         TITLE 'IFCST003  3270 REMOTE BUFFER LOG SUMMARY'
         SPACE 2
*  LINE MACRO     LINE MACRO     LINE MACRO     LINE MACRO            *
         MACRO
&NAME    LINE  &DATA,&LABEL,&SKIP=
.*                            THIS MACRO ESTABLISHES THE MARGINS OR
.*                                 COLUMN SETTINGS FOR EACH LINE. IT
.*                                 GENERATES NECESSARY CARRIAGE CONTROL
.*                                 ENTRIES. LASTLY IT DETERMINES THE
.*                                 NUMBER OF ENTRIES ASSOCIATED WITH
.*                                 THE PREVIOUS LINE AND STORES THAT #
.*                                 INTO THE APPROPRIATE BYTE.
.*                                 &DATA(1) - CHARACTER POSITION TO
.*                                 BEGIN DATA.
.*
.*                                 &DATA(2) - # OF SPACES BETWEEN
.*                                 SUCCESSIVE DATA COLUMN STARTING
.*                                 CHARACTERS.
.*
.*                                 &LABEL(1) - CHARACTER POSITION
.*                                 TO BEGIN LABELS.
.*
.*                                 &LABEL(2) - # OF SPACES BETWEEN
.*                                 LINE'S LABEL STARTING CHARACTERS.
.*
.*                                 &SKIP= - # OF LINES TO ADVANCE
.*                                 CARRIAGE TO BEGIN NEXT PRINTED LINE.
.*
.*                                 NEW ENTRIES ARE GENERATED ONLY WHEN
.*                                 NECESSARY. OMISSION OF ITEMS MEANS
.*                                 THEY HAVE NOT CHANGED SINCE PREVIOUS
.*                                 SETTINGS. A LINE MACRO IS REQUIRED
.*                                 FOR EACH PRINTED LINE. IF NO SETTING
.*                                 CHANGES ARE REQUIRED ALL OPERANDS
.*                                 ARE OMITTED IN WHICH CASE ONLY THE
.*                                 # OF ENTRIES FOR THE PREVIOUS LINE
.*                                 FIRST MACRO INSTRUCTION ISSUED FOR
.*                                 THE SUBJECT LINE.
         GBLA  &DB,&DT,&LB,&LT,&NRENTS
         GBLA  &LASTCC,&INITIAL
         GBLC  &NRENTSX
         GBLC  &CARRCON
         GBLB  &TEST
         LCLA  &S
&NAME    DS    0C
         AIF   (&INITIAL EQ 0).FIRSTLN
         LINEND
         AGO   .NTFIRST
.FIRSTLN ANOP
&NRENTSX SETC  'N&SYSNDX'
&INITIAL SETA  1
&LASTCC  SETA  1
N&SYSNDX EQU   *
.NTFIRST ANOP
         DC    AL1(0)
         AIF   ('&DATA(1)' EQ '').CKDTABS
         AIF   ('&DATA'(1,1) NE '(').SLABEL
         AIF   (&DATA(1) EQ &DB).CKDTABS
&DB      SETA  &DATA(1)
         AGO   .AA
.CKDTABS AIF   ('&DATA(2)' EQ '').NCDATA
         AIF   (&DATA(2) EQ &DT).NCDATA
         AGO   .CC
.AA      AIF   ('&DATA(2)' EQ '').BB
         AIF   (&DATA(2) EQ &DT).BB
.CC      ANOP
&DT      SETA  &DATA(2)
.BB      DC    XL2'FFFE'
         DC    FL1'&DB'
         DC    FL1'&DT'
&NRENTS  SETA  &NRENTS+1
.NCDATA  ANOP
         AIF   ('&LABEL(1)' EQ '').CKLTABS
         AIF   ('&LABEL'(1,1) NE '(').SLABEL
         AIF   (&LABEL(1) EQ &LB).CKLTABS
&LB      SETA  &LABEL(1)
         AGO   .AAA
.CKLTABS AIF   ('&LABEL(2)' EQ '').NCLABEL
         AIF   (&LABEL(2) EQ &LT).NCLABEL
         AGO   .CCC
.AAA     AIF   ('&LABEL(2)' EQ '').BBB
         AIF   (&LABEL(2) EQ &LT).BBB
.CCC     ANOP
&LT      SETA  &LABEL(2)
.BBB     DC    XL2'FFFF'
         DC    FL1'&LB'
         DC    FL1'&LT'
&NRENTS  SETA  &NRENTS+1
.NCLABEL ANOP
         AIF   ('&SKIP' EQ 'E').EJECT
         AIF   ('&SKIP' EQ '').TESTOFF
.CONT    ANOP
         AIF   (&TEST EQ 0).AB
         AIF   (&SKIP EQ &LASTCC).TESTOFF
&S       SETA  &SKIP
         ORG   &CARRCON+3
         DC    AL.3(0),AL.2(&S),AL.3(1)
         ORG
&LASTCC  SETA  &S
.SLABEL  ANOP
.TESTOFF ANOP
&TEST    SETB  0
         AGO   .DD
.EJECT   DC    XL2'FFFB'
&NRENTS  SETA  &NRENTS+1
         DC    X'8B'              SKIP TO CHANNEL 1
         DC    AL.3(0),AL.2(&LASTCC),AL.3(1)
&TEST    SETB  1
         AGO   .DD
.AB      AIF   (&SKIP EQ &LASTCC).NOCHANG
A&SYSNDX DC    XL2'FFFB'
         DC    AL.3(0),AL.2(&SKIP),AL.3(1)
         DC    AL.3(0),AL.2(&SKIP),AL.3(1)
&LASTCC  SETA  &SKIP
&TEST    SETB  1
&CARRCON SETC  'A&SYSNDX'
&NRENTS  SETA  &NRENTS+1
.DD      ANOP
.NOCHANG ANOP
         MEND
         EJECT
         SPACE 2
*  ROUTINE MACRO     ROUTINE MACRO     ROUTINE MACRO     ROUTINE MACRO*
         MACRO
&NAME    ROUTINE &LOGITEM,&RNAME
         GBLC  &DSECT,&CSECT
         GBLC  &ITEM(1000)
         GBLA  &SHIFT(1000),&ITEMNBR
         GBLA  &NRENTS
         LCLA  &ISHIFT,&NDX
.LOOP    ANOP
&NDX     SETA  &NDX+1
         AIF   ('&ITEM(&NDX)' EQ '&LOGITEM').FOUND
         AIF   (&NDX LT &ITEMNBR).LOOP
         MNOTE *,'LOG ITEM NOT DEFINED'
         MEXIT
.FOUND   ANOP
&ISHIFT  SETA  &SHIFT(&NDX)
&NAME    DC    AL.12(&LOGITEM-&DSECT),XL.4'D'
         DC    AL.4(&ISHIFT),AL.12(&RNAME-&CSECT)
&NRENTS  SETA  &NRENTS+1
         MEND
*  DSGEN MACRO     DSGEN MACRO     DSGEN MACRO     DSGEN MACRO        *
         SPACE 2
         MACRO
&NAME    DSGEN &X1,&X2,&X3,&X4,&X5,&X6,&X7,&X8,&X9,&X10,&X11,&X12,&X13,X
               &X14,&X15,&X16,&X17,&X18,&X19,&X20,&X21,&X22,&X23,&X24, X
               &X25,&X26,&X27,&X28,&X29,&X30,&X31,&X32
.*                            THIS MACRO GENERATES ONE DSECT WORD
.*                                 FORMATTED FOR THE SUBJECT LOG RECORD
.*                                 EACH OPERAND HAS TWO SUB LISTS. THE
.*                                 FIRST IS THE NAME OF THE LOG ITEM
.*                                 WHILE THE SECOND IS THE # OF BITS TO
.*                                 ALLOCATE FOR THIS ITEM. ITEMS MUST
.*                                 BE DEFINED CONTIGUOUSLY WITHOUT GAPS
.*                                 UNUSED BIT GROUPS MUST BE GIVEN
.*                                 DUMMY NAMES. THE NAMES PROVIDED FOR
.*                                 THE LOG ITEMS MAY THEN BE USED IN
.*                                 THE CONVERSION MACRO INSTRUCTIONS.
         GBLC &ITEM(1000)
         GBLA &ITEMNBR,&BITS(1000),&SHIFT(1000)
         LCLC  &SYMBOL
         LCLA  &OP,&COUNT,&BYTE
.LOOP    ANOP
&OP      SETA  &OP+1
&ITEMNBR SETA  &ITEMNBR+1
&SYMBOL  SETC  '&SYSLIST(&OP,1)'
         AIF   ('&SYSLIST(&OP,2)' NE '').OK1
         MNOTE *,'NULL BIT COUNT FIELD'
         MEXIT
.OK1     ANOP
         AIF   ('&SYMBOL' NE '').OK
         MNOTE 'LOG ITEM SYMBOL NOT PROVIDED'
         AGO   .CNT
.OK      ANOP
         AIF   ('&SYMBOL'(1,1) EQ '''').CNT                *TEMP*
&SYMBOL  EQU   *+&BYTE
&ITEM(&ITEMNBR)  SETC '&SYSLIST(&OP,1)'
&BITS(&ITEMNBR) SETA &SYSLIST(&OP,2)
&SHIFT(&ITEMNBR) SETA &COUNT-&BYTE*8
.CNT     ANOP
&COUNT   SETA  &COUNT+&SYSLIST(&OP,2)
&BYTE    SETA  &COUNT/8
         AIF (&OP LT N'&SYSLIST).LOOP
         AIF   (&COUNT NE 32).NOT32
&NAME    DS    4C
         MEXIT
.NOT32   AIF   (&COUNT NE 64).ERR
&NAME    DS    8C
         MEXIT
.ERR     MNOTE '**BIT COUNT FIELDS DO NOT TOTAL 32 OR 64**'
         MEND
         MACRO
         LINEND
.*                            THIS MACRO IS USED ONLY BY THE LINE
.*                                 MACRO TO SET THE NUMBER OF ENTRIES
.*                                 ASSOCIATED WITH EACH LINE.
         GBLA  &NRENTS
         GBLC &NRENTSX
         ORG   &NRENTSX
         DC    FL1'&NRENTS'
         ORG
&NRENTS  SETA  0
B&SYSNDX EQU   *
&NRENTSX SETC  'B&SYSNDX'
         MEND
         SPACE 2
         EJECT
*  LABEL MACRO     LABEL MACRO     LABEL MACRO     LABEL MACRO        *
         SPACE 2
         MACRO
&NAME    LABEL &LABEL1,&LABEL2,&LABEL3,&LABEL4,&LABEL5,&LABEL6,        C
               &LABEL7,&LABEL8
.*                            THIS MACRO ALLOWS UP TO ACHT LABELS TO
.*                                 BE SPECIFIED FOR A GIVEN LINE. THE
.*                                 LABELS SHOULD BE ENCLOSED IN QUOTA-
.*                                 TION MARKS. THE COLUMN AND LINE END
.*                                 CONTROLS WILL BE INSERTED BY THE
.*                                 MACRO. OMITTED OPERANDS MEAN NO
.*                                 LABEL REQUIRED FOR RESPECTIVE
.*                                 COLUMN. THIS MACRO WILL ALSO ALERT
.*                                 THE PROGRAMMER TO EXACTLY WHERE THE
.*                                 TABLE MUST BE BROKEN IF NECESSARY
.*                                 TO AVOID EXCEEDING THE MAXIMUM LIMIT
         GBLC &LABELS(2000)
         GBLC  &LBL(100)
         GBLA  &LBLCTR(100)
         GBLA  &LABELNR
         GBLA  &NRENTS,&LPTR
         LCLC  &MARGIN,&TACK
         LCLC  &TEXT
         LCLA  &OP,&K,&START,&NRCHAR,&REMAIN
&MARGIN  SETC  '*'
         AIF   ('&NAME' EQ '').LOOPOUT
&LPTR    SETA  &LPTR+1
&LBL(&LPTR) SETC '&NAME'
&LBLCTR(&LPTR) SETA &LABELNR+1
.LOOPOUT ANOP
&OP      SETA  &OP+1
&K       SETA  K'&SYSLIST(&OP)
         AIF (&K GE 2).NORM
&K       SETA  2
.NORM    ANOP
&START   SETA  2
         AIF (&OP LT N'&SYSLIST).NOTLAST
&MARGIN  SETC  '$'
.NOTLAST ANOP
&NRCHAR  SETA  8
&TACK    SETC  ''
.LOOPIN  ANOP
&REMAIN  SETA  &K-&START
         AIF (&REMAIN GE 8).MORE
&TACK    SETC  '&MARGIN'
&NRCHAR  SETA  &REMAIN
.MORE    ANOP
&TEXT    SETC  ''
         AIF (&REMAIN EQ 0).ENDTEXT
&TEXT    SETC  '&SYSLIST(&OP)'(&START,&NRCHAR)
.ENDTEXT ANOP
&LABELNR SETA  &LABELNR+1
&LABELS(&LABELNR) SETC '&TEXT'.'&TACK'
&START   SETA  &START+8
         AIF ('&TACK' EQ '').LOOPIN
         AIF ('&TACK' EQ '*').LOOPOUT
         MEND
         SPACE 2
         MACRO
         LSTART
.*                            THIS MACRO IS ISSUED WHEN THE LABEL AREA
.*                                 OF THE TABLE IS TO BEGIN.
         GBLC &LABELS(2000)
         GBLA  &LABELNR
         GBLC  &LBL(100)
         GBLA  &LBLCTR(100)
         LCLA  &NDX,&CTR
         LINEND
&CTR     SETA  1
.LOOP    ANOP
&NDX     SETA  &NDX+1
         AIF   (&LBLCTR(&CTR) NE &NDX).NOLBL
&LBL(&CTR) DC  C'&LABELS(&NDX)'
&CTR     SETA  &CTR+1
         AGO   .LOOPCTL
.NOLBL   ANOP
         DC    C'&LABELS(&NDX)'
.LOOPCTL AIF   (&NDX LT &LABELNR).LOOP
         MEND
         SPACE 2
*  BIN MACRO     BIN MACRO     BIN MACRO     BIN MACRO     BIN MACRO  *
         SPACE 2
         MACRO
         BIN   &LOGITEM,&SKIP$OR
.*                                 &LOGITEM - NAME OF ITEM IN LOG
.*                                      RECORD DSECT
.*                                 &SKIP$OR - NBR OF SPACES TO SKIP ON
.*                                 MULTIPLE PRINT OR NBR OF SPACES
.*                                      TO BACK UP FROM COLUMN FOR
.*                                      START OF PRINTING. THE LETTER
.*                                      B PRECEEDS THE NUMBER (B5) IF
.*                                      THE LATTER IS DESIRED. OMISSION
.*                                      OF THIS OPERAND FORCES OPTION 2
.*                                      WITH BACKUP SPACING EQUAL TO
.*                                 THE NUMBER OF BITS IN THE ITEM
.*                                 DEFINITION (VIA MACRO 'DSGEN').
.*                            A LIMIT OF 15 BITS IS IMPOSED FOR THE
.*                                 TOTAL NUMBER OF BITS TO PRINT.
         GBLC &ITEM(1000)
         GBLA &ITEMNBR,&BITS(1000),&SHIFT(1000),&NRENTS
         GBLC  &DSECT
         LCLB  &B
         LCLA  &IBITS,&NDX,&ISHIFT,&K
         LCLA  &TEMP,&T
         LCLC  &S
.LOOP    ANOP
&NDX     SETA  &NDX+1
         AIF   ('&ITEM(&NDX)' EQ '&LOGITEM').FOUND
         AIF   (&NDX LT &ITEMNBR).LOOP
         MNOTE *,'YOU BLEW IT'
         ROUTINE DUM,SKIPPER
         MEXIT
.FOUND   ANOP
&ISHIFT  SETA  &SHIFT(&NDX)
&IBITS   SETA  &BITS(&NDX)
&T       SETA  &IBITS-1
&B       SETB  0
         AIF   ('&SKIP$OR' EQ '').BACKUP
&K       SETA  K'&SKIP$OR
&B       SETB  ('&SKIP$OR'(1,1) EQ 'B')
&S       SETC  '&SKIP$OR'(&B+1,&K-&B)
&T       SETA  &S
.BACKUP  ANOP
&NRENTS  SETA  &NRENTS+1
&TEMP    SETA  &ISHIFT
A&SYSNDX DC    AL.12(&LOGITEM-&DSECT),XL.4'&TEMP'
         AIF (&IBITS EQ 1 AND &B EQ 0).OUT
         ORG   A&SYSNDX
&B       SETB  1
         DC    AL.12(&LOGITEM-&DSECT),XL.4'C'
         DC    BL.1'&B',AL.7(&T),AL.4(&IBITS),FL.4'&ISHIFT'
.OUT     ANOP
         MEND
         EJECT
*  HEX MACRO     HEX MACRO     HEX MACRO    HEXN MACRO     HEX MACRO  *
         SPACE 2
         MACRO
         HEX   &LOGITEM,&SKIP$OR,&BYTES
.*                            THIS MACRO FACILITATES GENERATION OF THE
.*                                 TABLE ENTRIES SPECIFYING HEX TYPE
.*                                 CONVERSIONS.
.*                            &LOGITEM - NAME OF DATA ITEM TO BE
.*                                 CONVERTED
.*                            &SKIP$OR - NUMBER OF SPACES TO SKIP ON
.*                                 MULTIPLE PRINT OR NBR OF SPACES TO
.*                                 BACK UP FROM COLUMN FOR START OF
.*                                 PRINTING. THE LETTER B PRECEEDS THE
.*                                 NUMBER (B8) IF THE LATTER OPTION IS
.*                                 DESIRED. OMISSION OF THIS OPERAND
.*                                 FORCES OPTION 2 WITH BACKUP SPACING
.*                                 EQUAL TO THE NUMBER OF BYTES SPECI-
.*                                 FIED BY THE NEXT OPERAND (TWICE THIS
.*                                 NUMBER IF SUFFIX IS EXPLICITLY OR
.*                                 IMPLICITLY B).
.*                            &BYTES - NUMBER OF TOTAL INPUT BYTES TO
.*                                 PROCESS. THIS NUMBER IS SUFFIXED
.*                                 WITH AN L,R, OR B TO STIPULATE
.*                                 PRINTING OF THE LEFT HALF, RIGHT
.*                                 HALF, OR BOTH HALVES OF THE BYTE
.*                                 RESPECTIVELY. OMISSION OF THIS
.*                                 OPERAND DEFAULTS TO B WITH THE NUM-
.*                                 BER OF BYTES EQUAL TO THE ITEM LNGTH
.*                            A NEW ENTRY IS GENERATED ONLY WHEN NECES-
.*                                 SARY. THIS MACRO MUST BE THE FIRST
.*                                 MACRO INSTRUCTION ISSUED FOR THE
.*                                 SUBJECT LINE(S).
         GBLC &ITEM(1000),&DSECT
         GBLA &ITEMNBR,&BITS(1000),&SHIFT(1000),&NRENTS
         LCLB  &B
         LCLA  &IBITS,&NDX,&ISHIFT,&K,&T,&CODE,&BYTESP
         LCLC  &S,&LETTER
.LOOP    ANOP
&NDX     SETA  &NDX+1
         AIF   ('&ITEM(&NDX)' EQ '&LOGITEM').FOUND
         AIF   (&NDX LT &ITEMNBR).LOOP
         MNOTE *,'LOG ITEM NOT DEFINED'
         MEXIT
.FOUND   ANOP
&ISHIFT  SETA  &SHIFT(&NDX)
&IBITS   SETA  &BITS(&NDX)
&CODE    SETA  1
&K       SETA  K'&BYTES
         AIF   (&IBITS-(&IBITS/4)*4 EQ 0).OK
         MNOTE *,'BIT LENGTH SPECIFICATION INCONSISTENT WITH CONTROL'
         MEXIT
.OK      AIF   ('&BYTES' EQ '').USEDEFN
&LETTER  SETC  '&BYTES'(&K,1)
&S       SETC  '&BYTES'(1,&K-1)
&BYTESP  SETA  &S
         AIF   ('&LETTER' EQ 'B').BOTH
         AIF   (&ISHIFT EQ 0 OR &ISHIFT EQ 4).OK2
.ERR     MNOTE *,'DATA NOT ALLIGNED ON HEX OR BYTE BOUNDARY'
         MEXIT
.USEDEFN ANOP
&BYTESP  SETA  &IBITS/8
.BOTH    AIF   (&ISHIFT NE 0).ERR
&CODE    SETA  3
&T       SETA  &BYTESP*2-1
&S       SETC  '&T'
.OK2     AIF   (&ISHIFT EQ 0).L
&CODE    SETA  2
.L       ANOP
&B       SETB  1
         AIF   ('&SKIP$OR' EQ '').BACKUP
&K       SETA  K'&SKIP$OR
&B       SETB  ('&SKIP$OR'(1,1) EQ 'B')
&S       SETC  '&SKIP$OR'(&B+1,&K-&B)
.BACKUP  ANOP
&NRENTS  SETA  &NRENTS+1
         DC    AL.12(&LOGITEM-&DSECT),XL.4'A'
         DC    BL.1'&B',FL.7'&S',FL.4'&BYTESP',FL.4'&CODE'
.OUT     ANOP
         MEND
         MACRO
         SPECIAL  &ROUTINE,&PARAM,&SPACE=
.*                            THIS MACRO GENERATES A SPECIAL ROUTINE
.*                                 ENTRY TO BE PROCESSED BY THE SUM. M.
.*                            &ROUTINE - SYMBOL ON SPECIAL ROUTINE EWT.
.*                            &PARAM - AN 8 BIT BINARY REPRESENTATION
.*                                 TO OCCUPY THE 'MASK' FIELD BUT TO BE
.*                                 INTERPRETED AS AN ARGUMENT OF THE
.*                                 SPECIAL ROUTINE.
.*                            &SPACE - THE NUMBER OF 2BYTE COUNTERS TO
.*                                 ALLOCATE FOR REQUIRED PROCESSING.
         GBLC  &CSECT
         GBLA  &COUNTR
         LCLA  &ADD
         DC    AL1(128)
         DC    BL.8'&PARAM'
         DC    AL2(&ROUTINE-&CSECT)
         DC    AL2(&COUNTR)
&ADD     SETA  1
         AIF   ('&SPACE' EQ '').NORM
&ADD     SETA  &SPACE
.NORM    ANOP
&COUNTR  SETA  &COUNTR+&ADD
         MEND
         MACRO
         SUM   &LOGITEM,&MASK
.*                            THIS MACRO GENERATES A NORMAL EDIT ENTRY
.*                                 FOR PROCESSING BY THE SUMMARY MODULE
.*                            &LOGITEM - NAME OF DATA ITEM TO BE SUMMED
.*                            &MASK - BYTE MASK FOR BITS TO BE TESTED.
.*                                 THIS OPERAND SHOULD BE OMITTED FOR
.*                                 SINGLE BIT ITEMS IN WHICH CASE THE
.*                                 MASK WILL BE SET ACCORDING TO THE
.*                                 OFF BYTE BIT DISPLACEMENT OF THE
.*                                ITEM AS DEFINED BY THE MACRO 'DSGEN'
         GBLA  &COUNTR,&ITEMNBR,&BITS(1000),&SHIFT(1000)
         GBLC  &ITEM(1000),&DSECT
         LCLA  &IBITS,&NDX,&ISHIFT,&M,&BITNBR
.LOOP    ANOP
&NDX     SETA  &NDX+1
         AIF   ('&ITEM(&NDX)' EQ '&LOGITEM').FOUND
         AIF   (&NDX LT &ITEMNBR).LOOP
         MNOTE *,'LOGITEM NOT FOUND'
         MEXIT
.FOUND   ANOP
         DC    AL1(0)
&ISHIFT  SETA  &SHIFT(&NDX)
&IBITS   SETA  &BITS(&NDX)
         AIF   ('&MASK' EQ '').FORM
         DC    B'&MASK'
         AGO   .ITEM
.FORM    ANOP
&BITNBR  SETA  &ISHIFT-7
&BITNBR  SETA  0-&BITNBR
&M       SETA  1
.LOOP2   ANOP
         AIF   (&BITNBR EQ 0).GOTIT
&M       SETA  &M*2
&BITNBR  SETA  &BITNBR-1
         AGO   .LOOP2
.GOTIT   ANOP
         DC    AL1(&M)
.ITEM    DC    AL2(&LOGITEM-&DSECT)
         DC    AL2(&COUNTR)
&COUNTR  SETA  &COUNTR+1
         MEND
         GBLC  &DSECT,&CSECT
&CSECT   SETC  'IFCST003'
&DSECT   SETC  'T003'
IFCST003 CSECT
T003     DSECT
         DSGEN (KEY,16),(TSWS,16),(TID,8),(TDUM1,16),(TCHAR,8)
         DSGEN (XDATE,32),(TIME,32)
         DSGEN (TDUM2,8),(TSER,24),(TMOD,16),(TDUM3,16)
         DSGEN (TCUA,16),(TSID,16)
         DSGEN (TSTAT,16),(TDUM4,16)
IFCST003 CSECT
         USING T003,R2
         USING *,R9
         DC    A(ENTRIES)               PTR TO ENTRIES
         DC    A(PENTRY)
REG8     DC    F'0'                     CURRENT ENTRY
SCSIZE   DC    H'30'                    NO OF 2BYTE CNTRS FOR SUM
XDATE1   STM   R14,R12,L12(R13)         SAVE REGS
         CLC   XDATE(L4),HEX00         IS DATE ZERO
         BE    RETURN                   BR-ZERO
         CLC   L0(L4,R3),HEX00          IS LOW DATE ZERO
         BNE   XDATE2                   BR-NO
         MVC   L0(L4,R3),XDATE          MOVE IN DATE
XDATE2   EQU   *
         CLC   XDATE(L4),L0(R3)         CHECK FOR LOW DATE
         BL    SAVELOW                  LOWER SAVE IT
         CLC   XDATE(L4),L4(R3)         CHECK FOR HI
         BNH   RETURN                   BR-NOT HI
SAVEHI   MVC   L4(L4,R3),XDATE          MOVE HI DATE
         B     RETURN
SAVELOW  MVC   L0(L4,R3),XDATE          MOVE LOW DATE
         B     RETURN
*
RETURN   LM    R14,R12,L12(R13)    RESTORE REGS
         BR    R14                 RETURN
SETERR   DS    0H
         ST    R5,XSAVE                 SAVE REG
         MVC   SAVE1(L2),TSTAT          SAVE STATS
         NC    SAVE1,STATMASK           TURN OFF UNUSED BITS
         LA    R5,ERLIST                PICK UP LIST POINTER
LOOP     DS    0H
         TM    0(R5),HEXFF              IS THIS LAST ENTRY
         BO    RETURNB                  YES,RETURN
         CLC   SAVE1(L2),0(R5)          IS THIS THE ERROR COMBO
         LA    R3,L2(R3)                BUMP TO NEXT COUNTER
         BE    ADDONE                   YES, ADD TO COUNTER
         LA    R5,L2(R5)                BUMP TO NEXT
         B     LOOP                     TRY NEXT
ADDONE   DS    0H
         LH    R5,0(R3)                 GET COUNTER
         LA    R5,L1(R5)                ADD ONE
         STH   R5,0(R3)                 RESTORE COUNTER
         B     RETURNB                  RETURN
RETURNB  L     R5,XSAVE                 RESTORE REG
         BR    R14
ERLIST   DS    0C
         DC    X'0C00'                  DB,US
         DC    X'0002'                  CC
         DC    X'0003'                  CC,OC
         DC    X'0020'                  CR
         DC    X'0004'                  DC
         DC    X'0005'                  DC,OC
         DC    X'0404'                  DC,US
         DC    X'0405'                  DC,US,OC
         DC    X'0008'                  EC
         DC    X'0408'                  EC,US
         DC    X'0010'                  IR
         DC    X'0018'                  IR,EC
         DC    X'0418'                  IR,EC,US
         DC    X'0011'                  IR,OC
         DC    X'0410'                  IR,OC
         DC    X'0001'                  OC
         DC    X'0401'                  OC,US
         DC    X'0100'                  TC
         DC    X'FFFF'
HEX00    DC    XL4'00'
SAVE1    DC    XL2'0000'
STATMASK DC    X'0D3F'                                           P4378
BDEUSCON DC    X'0E00'
ENTRIES  DS    0F
         SPECIAL    XDATE1,00000000,SPACE=4
         SPECIAL  SETERR,0,SPACE=60
         DC    X'FF'
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
L0       EQU   0
L1       EQU   1
L2       EQU   2
L3       EQU   3
L4       EQU   4
L5       EQU   5
L6       EQU   6
L7       EQU   7
L8       EQU   8
L9       EQU   9
L12      EQU   12
L20      EQU   20
L28      EQU   28
L30      EQU   30
L32      EQU   32
L34      EQU   34
L64      EQU   64
L100     EQU   100
HEXI28   EQU   X'28'
HEXFF    EQU   X'FF'
CUDISP   EQU   X'17'
NOT      EQU   X'FF'
Y3270    DSECT
         DSGEN (YDUMA,32),(FWDPTR,32)
         DSGEN (TOTALREC,16),(YTYPE,8),(YCHAN,8),(YCUA,24),(YSER1,8)
         DSGEN (YSER2,16),(YCPU,16),(YSMSW,16),(YDUMB,8),(CU,8)
         DSGEN (DS,8),(YDUMC,8),(YDUMD,16)
         DS    2C
         DSGEN (YLOWD,32)               LOW DATE
         DSGEN (YHID,32)                HI DATE
         DS    2C
         DSGEN (YERR01,16),(YERR02,16),(YERR03,16),(YERR04,16)
         DSGEN (YERR05,16),(YERR06,16),(YERR07,16),(YERR08,16)
         DSGEN (YERR09,16),(YERR10,16),(YERR11,16),(YERR12,16)
         DSGEN (YERR13,16),(YERR14,16),(YERR15,16),(YERR16,16)
         DSGEN (YERR17,16),(YERR18,16),(YERR19,16),(YERR20,16)
IFCST003 CSECT
PENTRY   DS    0F
&DSECT   SETC  'Y3270'
&CSECT   SETC  'PENTRY'
         USING *,R9
         DC    A(PEDIT)
         DC    C'IFCST003'
YR9PTR   DS    F
YLABELP  DS    F
*
SKIPPER  BR    R14                      NO-OP FOR EDIT
SORTDATE DS    0H
         STM   R5,R8,XSAVE
         LR    R5,R2                    SET R5 FOR FIRST LOOP
LOOPDATE L     R5,L4(R5)                GET NEXT AREA
         LTR   R5,R5                    ZERO POINTER?
         BZ    RETURNA                  YES, DONE
         CLC   L30(L4,R5),L30(R2)       IS NEW DATE LOWER
         BNL   DATEHI                   NO, SEE IF HIGH HIGHER
         MVC   L30(L4,R2),L30(R5)       YES, MOVE IN NEW LOWER
DATEHI   CLC   L34(L4,R5),L34(R2)       IS HIGH HIGHER?
         BNH   LOOPDATE                 NO, CHECK NEXT AREA
         MVC   L34(L4,R2),L34(R5)       YES, MOVE IN
         B     LOOPDATE                 CHECK NEXT AREA
SETCPUNO STM   R5,R8,XSAVE              SAVE REGS
         SR    R5,R5                    CLEAR R5
         IC    R5,0(R4)                 PICK UP
         SLL   R5,L8                      CPU TYPE
         IC    R5,L1(R4)                    FIELD
         LTR   R5,R5                    IS IT ZERO?
         BNZ   RETURNA                  NO, HEX IS GOOD, RETURN
         LA    R6,L64                   ELSE, BACK UP DATA PTR
         SR    R3,R6                    TO PUT IN NEW INFO
         MVC   0(L6,R3),SHARED          SAY MODEL SHARED       @Z427VLS
         B     RETURNA                  RETURN
*
SETDATE  UNPK  WORK(L8),L0(L4,R4)       PACK DATE
         MVZ   WORK+L7(L1),WORK         MOVE ON ZONE
         MVC   L0(L3,R3),WORK+L5        MOVE DATE TO PRINT LINE
         MVC   L5(L2,R3),WORK+L3        MOVE YEAR TO PRINT LINE
         BR    R14
*
RETURNA  LM    R5,R8,XSAVE              RESTORE REGS
         BR    R14
SHARED   DC    C'SHARED'                                       @Z427VLS
NODVPRT  DS    0H
         TM    CU2,FLGEDTCU             IS THIS A CU EDIT
         BO    NOPRT                    YES, DON'T PRINT LINE
         TM    CU2,FLGCUAPT             IS CUA EDIT OCCURRING
         BO    NOPRT                    YES, DON'T PRINT LINE
         BR    R14                      ELSE, PRINT
NOCUPRT  DS    0H
         TM    CU2,FLGCUAPT             IS CUA EDIT OCCURRING
         BO    NOPRT                    YES, DON'T PRINT THIS LINE
         BR    R14                      ELSE PRINT
NOCUAPRT DS    0H
         TM    CU2,FLGCUAPT             IS CUA EDIT OCCURRING
         BNO   NOPRT                    NO, DON'T PRINT LINE
         BR    R14                      RETURN
NOPRT    SR    R15,R15                  SHOW EREP TO NOT PRINT
         BR    R14                      RETURN
LOOPDS   DS    0H                       EDIT NEXT SECTIONS
         STM   R5,R10,YSAVE             SAVE REGS
         L     R5,L4(R2)                GET NEXT DS
         LTR   R5,R5                    ALL DONE?
         BE    EDITCUA                  YES, EDIT CUA SUMMARY
         CLC   CUDISP(L1,R2),CUDISP(R5) SAME CU?
         BNE   CHNGCU                   NO, CHANGE CU
         BAL   R10,FREEMAIN             GO FREE CORE
         L     R6,CUSAVE                GET CURRENT CU AREA
         BAL   R7,ADDCU                 ADD COUNTERS TO CU
         TM    CU2,FLGCU2               IS THIS 2ND CU
         BNO   N2CU                     NO, DON'T ADD TO CUA
         L     R6,CUASAVE               SET UP FOR  ADD
         BAL   R7,ADDCU                 ADD COUNTERS TO CUA
N2CU     DS    0H
         LR    R2,R5                    UPDATE R2
         MVC   RELABELS(L100),DEVCHAR   SET LABEL TO SHOW DEVICE
SETEDIT  DS    0H
         LA    R5,REDIT-4               POINT TO RE-EDIT AREA
         ST    R5,YR9PTR                TELL EREP
         LA    R5,RELABELS              GET NEXT LABELS
         ST    R5,YLABELP               TELL EREP
EDITEND  DS    0H
         LM    R5,R10,YSAVE             RESTORE REGS
         BR    R14                      RETURN
ADDCU    DS    0H                       ADD R5 COUNTERS TO R6
         LH    R8,L8(R6)                GET NUMBER OF RECORDS
         AH    R8,L8(R5)                ADD NUMBER IN NEXT SLOT
         STH   R8,L8(R6)                STORE IN CU OR CUA
         LA    R10,HEXI28               POINT TO FIRST ERROR SLOT
ADDLOOP  DS    0H
         LH    R8,L0(R10,R6)            GET CU OR CUA ERROR COUNT
         AH    R8,L0(R10,R5)            ADD ERROR COUNT OF NEXT
         STH   R8,L0(R10,R6)            STORE IN CU OR CUA SUM
         LA    R10,L2(R10)              BUMP R10
         CH    R10,HEX4C                PAST LAST COUNTER
         BNE   ADDLOOP                  NO, LOOP
         BR    R7                       YES, RETURN
CHNGCU   DS    0H                       EDIT SUMS FOR CU
         OI    CU2,FLGCU2               SHOW MORE THAN ONE CU
         BAL   R10,FREEMAIN             GO FREE CORE
         TM    CU2,FLGEDTCU             JUST EDITED CU?
         BO    CHNGCU2                  YES, START NEXT CU
CUEDIT   L     R2,CUSAVE                SET TO EDIT CU
         ST    R5,CUSAVE                SHOW NEW CU SUM AREA
         ST    R5,L4(R2)                RELINK CHAIN
         OI    CU2,FLGEDTCU             SHOW CU EDIT OCCURRING
         MVC   RELABELS(L100),CUCHAR    SET LABEL TO SHOW CU SUM
         B     SETEDIT
CHNGCU2  DS    0H
         NI    CU2,NOT-FLGEDTCU         TURN OFF CU FLAG
         LR    R2,R5                    SET TO EDIT FIRST OF NEXT
         L     R6,CUASAVE               ADD THIS TO CUA (COMB SUM
               BAL   R7,ADDCU
         MVC   RELABELS(L100),DEVCHAR   SET LABEL TO SHOW DEVICE
         B     SETEDIT                  GO EDIT IT
EDITCUA  DS    0H                       LAST RECORD IN CHAIN
         BAL   R10,FREEMAIN             GO FREE CORE
         TM    CU2,FLGCUAPT             ALL DONE?
         BO    EDITEND                  YES, END EDIT
         TM    CU2,FLGCUA               BEEN HERE BEFORE?
         BO    LASTEDIT                 YES, DO CUA SUMS, END
         OI    CU2,FLGCUA               SHOW CUA TO BE PRINTED
         B     CUEDIT                   SET UP TO EDIT CU
LASTEDIT DS    0H
         L     R2,CUASAVE               POINT TO CUA TOTALS
         OI    CU2,FLGCUAPT             TELL THAT CUA IS PRINTING
         ST    R5,CUASAVE               SET TO FREE CUA NXT ENTRY
         ST    R5,L4(R2)                SET TO RETURN TO EDITCUA
         MVC   RELABELS(L100),COMCHAR   SET LABEL TO SHOW XCU SUM
         B     SETEDIT
FREEMAIN DS    0H
         C     R2,CUSAVE                WAS THIS CU TO BE SAVED
         BE    SKIPFREE                 YES, DON'T FREE IT
         C     R2,CUASAVE               IS THIS CUA SUM AREA?
         BE    SKIPFREE                 YES, DON'T FREE
         LR    R1,R2                    SET UP FOR FREEMAIN
         FREEMAIN  R,LV=96,A=(1)        FREE THE SORE
SKIPFREE DS    0H
         BR    R10                      RETURN
CONVERT  DS    0H
         STM   R14,R12,L12(R13)         SAVE REGS
         LH    R5,L0(R4)
CONV1    CVD   R5,WORK                  CONVERT TO DECIMAL
         UNPK  L0(L5,R3),WORK+L3(L5)    UNPACK TO PRINT BUFFER @XA22506
         MVZ   L4(L1,R3),L0(R3)         PUT ON PRINTABLE ZONE  @XA22506
         LM    R14,R12,L12(R13)         RESTORE REGS
         BR    R14
SORT     DS    0H
         STM   R14,R12,L12(R13)         SAVE REGS
         L     R3,L4(R2)                GET 2ND AREA
         LA    R8,0
         ST    R8,L4(R2)                SET NEW POINTER TO ZERO
LOOP1    DS    0H
         LTR   R3,R3                    NO MORE AREAS?
         BZ    ENDSORT                  YES, STOP SORT
         LR    R4,R2               INITIALIZE R4
         L     R7,L4(R4)                UPDATE R7
         L     R5,L4(R3)                R5 HOLDS NEXT IN OLD CHAIN
         CLC   CUDISP(L2,R3),CUDISP(R2)
         BL    FIRST
LOOP2    DS    0H
*                                       COMPARE ON CU AND DS
         LTR   R7,R7                    END OF NEW CHAIN?
         BZ    EOCHAIN                  YES, ADD TO END
         CLC   CUDISP(L2,R3),CUDISP(R7) B> OR = TO A?
         BH    BHIGH
         ST    R3,L4(R4)                INSERT AFTER LAST LOWER
         ST    R7,L4(R3)                POINT TO NEXT HIGHER
         LR    R3,R5                    SET TO NEXT TO CHECK
         B     LOOP1                    GO GET NEXT AREA
BHIGH    DS    0H
         LR    R4,R7                    UPDATE R4
         L    R7,L4(R4)                 SETUP R7
         B     LOOP2                    CHECK NEXT SLOT
EOCHAIN  DS    0H
         ST    R3,L4(R4)                PT OLD LAST TO NEW LAST
         ST    R8,L4(R3)                POINT NEW LAST TO ZERO
         LR    R3,R5                    SET TO NEXT OLD AREA
         B     LOOP1                    INSERT IT IN NEW CHAIN
FIRST    DS    0H
         ST    R2,L4(R3)                POINT THIS NEW AT NEXT
         LR    R2,R3                    START AT THIS NEW
         LR    R3,R5                    CHECK NEXT AREA
         B     LOOP1
ENDSORT  DS    0H
         ST    R2,L28(R13)              SET R2 FOR EREP
         ST    R2,CUSAVE                SET FIRST CU SUM AREA
         ST    R2,CUASAVE               SET CUA SUM AREA
         LM    R14,R12,L12(R13)         RESTORE REGS
         BR    R14                      RETURN
HEX4C    DC    H'76'
YSAVE    DS    6F                       SAVE AREA FOR WORK REGS
CUSAVE   DS    F                        POINTER TO CURRENT CU SUM
CUASAVE  DS    F                        PTR TO CURR CUA SUM AREA
CU2      DC    X'00'                    FLAGS FOR LOOPDS
FLGCU2   EQU   X'80'                    SET FOR 2ND CU
FLGEDTCU EQU   X'40'                    SHOWS CU EDIT OCCURRING
FLGCUAPT EQU   X'20'                    SHOWS CUA EDIT OCCURRING
FLGCUA   EQU   X'10'                    SHOWS LAST RECORD REACHED
WORK     DC    D'0'
XSAVE    DS    4F
COMCHAR  DC    CL100'TRANSMISSION CONTROL UNIT     TRANSMISSION CONTROLX
                UNIT     TRANSMISSION CONTROL UNIT               '
CUCHAR   DC    CL100'CONTROL UNIT  CONTROL UNIT  CONTROL UNIT  CONTROL X
               UNIT  CONTROL UNIT  CONTROL UNIT  CONTROL UNIT    '
DEVCHAR  DC    CL100'DEVICE DEVICE DEVICE DEVICE DEVICE DEVICE DEVICE DX
               EVICE DEVICE DEVICE DEVICE DEVICE DEVICE DEVICE   '
PEDIT    DC    2F'0'
         DC    A(LABELS)                LABEL PTR
         DC    H'0'                     DISP
         LINE  ,,SKIP=E                 EJECT
         LINE  (57,32),(23,26)
         HEX   YCPU,0,2B
         HEX   YSER1,0,3B
         ROUTINE  YCPU,SETCPUNO
         ROUTINE  YDUMA,SORT
         ROUTINE  YLOWD,SORTDATE
         LABEL 'DAY YEAR   DAY YEAR','MODEL-','SERIAL NO.'
         LINE       (23,11),(1,30)
         ROUTINE    YLOWD,SETDATE
         ROUTINE    YHID,SETDATE
         LABEL      'OUTBOARD DATE RANGE -','TO'
*
         LINE  (55,1),(1,65),SKIP=2
         HEX   YCUA
         LABEL 'SUMMARY OF MISCELLANEOUS RECORDS FOR DEVICE','DEVICE TYX
               PE 3270 REMOTE'
         LINE  ,,SKIP=2
         ROUTINE  YDUMA,SKIPPER
RELABELS LABEL 'DEVICE DEVICE DEVICE DEVICE DEVICE DEVICE DEVICE DEVICEX
                DEVICE DEVICE DEVICE DEVICE DEVICE DEVICE   '
REDIT    LINE  (30,1),(1,1),SKIP=1
         HEX   YCUA
         ROUTINE  YDUMA,NOCUAPRT
         LABEL 'CHANNEL UNIT ADDRESS'
         LINE
         HEX   CU
         ROUTINE  YDUMA,NOCUPRT
         LABEL 'CONTROL UNIT ADDRESS'
         LINE
         HEX   DS
         ROUTINE  YDUMA,NODVPRT
         LABEL 'DEVICE ADDRESS'
         LINE  (26,1),,SKIP=3                                @XA22506
         ROUTINE TOTALREC,CONVERT
         LABEL 'NUMBER OF RECORDS'
         LINE  ,,SKIP=2
         ROUTINE  YDUMA,SKIPPER
         LABEL 'STATISTICS SUMMARY'
         LINE  (25,40),(5,40),SKIP=1
         ROUTINE  YERR01,CONVERT
         ROUTINE  YERR02,CONVERT
         LABEL 'DB,US','CC'
         LINE
         ROUTINE  YERR03,CONVERT
         ROUTINE  YERR04,CONVERT
         LABEL 'CC,OC','CR'
         LINE
         ROUTINE  YERR05,CONVERT
         ROUTINE  YERR06,CONVERT
         LABEL 'DC','DC,OC'
         LINE
         ROUTINE  YERR07,CONVERT
         ROUTINE  YERR08,CONVERT
         LABEL 'DC,US','DC,US,OC'
         LINE
         ROUTINE  YERR09,CONVERT
         ROUTINE  YERR10,CONVERT
         LABEL 'EC','EC,US'
         LINE
         ROUTINE  YERR11,CONVERT
         ROUTINE  YERR12,CONVERT
         LABEL 'IR','IR,EC'
         LINE
         ROUTINE  YERR13,CONVERT
         ROUTINE  YERR14,CONVERT
         LABEL 'IR,EC,US','IR,OC'
         LINE
         ROUTINE  YERR15,CONVERT
         ROUTINE  YERR16,CONVERT
         LABEL 'IR,US','OC'
         LINE  ,,SKIP=3
         ROUTINE  YERR17,CONVERT
         ROUTINE  YERR18,CONVERT
         LABEL 'OC,US','TC'
         LINE  (27,1),(1,1),SKIP=2
         ROUTINE  YDUMA,LOOPDS
         LABEL ''
         DC    X'FF'
         DC    X'0000'
         DC    X'0000'
         DC    X'0000'
LABELS   DS    0F
         DC    C'$'
         LSTART
         END
