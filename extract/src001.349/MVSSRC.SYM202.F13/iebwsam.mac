         TITLE 'IEBWSAM IEBCOPY WRITE ROUTINE FOR UNLOADED DATA SETS'
         LCLA  &T,&SPN                                            0001
.@001    ANOP                                                     0001
IEBWSAM  CSECT ,                                                  0001
         STM   @E,@C,12(@D)                                       0001
         BALR  @B,0                                               0001
@PSTART  DS    0H                                                 0001
         USING @PSTART+00000,@B                                   0001
         ST    @D,@SAV001+4                                       0001
         LA    @F,@SAV001                                         0001
         ST    @F,8(0,@D)                                         0001
         LR    @D,@F                                              0001
         USING IEBMCA,@4               ADDRESSABILITY TO IEBMCA
         USING IHADCB,@7               ADDRESSABILITY TO DCB FIELDS
         DS    0H
*         WSFLAG(5)='0'B;               /* INDICATE WRITING           *
         NI    WSFLAG,B'11110111'                                 0037
*         REDAD=WRTNEXT;                /* ADDRESS OF AREA FROM WHERE
*                                          TO START WRITING           *
         MVC   REDAD(4),WRTNEXT                                   0038
*         NBTTR=0;                      /* SET TTR COUNTER TO ZERO    *
         SR    @F,@F                                              0039
         STH   @F,NBTTR                                           0039
*         WRCNT=8;                      /* INIT COUNTER OF NUMBER OF
*                                          BYTES TO WRITE TO EICHT    *
         LA    @F,8                                               0040
         STH   @F,WRCNT                                           0040
*
*         /*----------------------------------------------------------*
*         /* NOW A TEST IS MADE TO SEE IF WE ARE PROCESSING MEMBER    *
*         /* DATA OR DIRECTORY BLOCKS                                 *
*         /*----------------------------------------------------------*
*
*         IF TAG(2)='0'B                /* WRITING DIRECTORY          *
*            THEN                       /* YES                        *
         TM    TAG,B'01000000'                                    0041
*                GO TO WSAM0003;        /* WRITE OUT DIRECTORY        *
         BC    08,WSAM0003                                        0042
*            ELSE;                      /* NO-MEMBER DATA TO PROCESS  *
*
*         /*----------------------------------------------------------*
*         /* AS A NOTE LIST PRECEDES MEMBER DATA IN THE UNLOADED DATA *
*         /* SET A TEST IS MADE TO SEE IF THIS MEMBER HAS ONE.        *
*         /*----------------------------------------------------------*
*
*         IF WSFLAG(1)='1'B             /* USER TTR PRESENT           *
*            THEN                       /* YES                        *
         TM    WSFLAG,B'10000000'                                 0044
         BC    12,@9FF                                            0044
*              DO;                      /* SEE IF NOTE LIST PRESENT   *
*                WSFLAG(1)='0'B;        /* TURN OFF SWITCH INDIC USER
*                                          TTR'S PRESENT              *
         NI    WSFLAG,B'01111111'                                 0046
*
*           /*--------------------------------------------------------*
*           /* A TEST IS NOW MADE TO SEE IF THERE ARE AT LEAST 2 USER *
*           /* TTR'S                                                  *
*           /*--------------------------------------------------------*
*
*           IF CFLD(2)='1'B             /* 2 USER TTR'S PRESENT       *
*              THEN                     /* YES                        *
         L     @1,IDEAD                                           0047
         TM    11(@1),B'01000000'                                 0047
         BC    12,@9FE                                            0047
*                  TTRNB(7)='1'B;       /* SET TWO IN TTRN COUNTER    *
         OI    NBTTR+1,B'00000010'                                0048
*              ELSE;                    /* NO LESS THAN 2 USER TTR'S  *
@9FE     EQU   *                                                  0049
*
*           /*--------------------------------------------------------*
*           /* A TEST IS NOW MADE TO SEE IF THE NEXT BIT IN THE C     *
*           /* FIELD IS ALSO ON INDICATING ONE MORE USER TTR          *
*           /*--------------------------------------------------------*
*
*           IF CFLD(3)='1'B             /* ONE MORE USER TTR          *
*              THEN                     /* YES                        *
@9FD     TM    11(@1),B'00100000'                                 0050
         BC    12,@9FC                                            0050
*                  TTRNB(8)='1'B;       /* ADD ONE TO USER TTR COUNTER*
         OI    NBTTR+1,B'00000001'                                0051
*              ELSE;                    /* NO NOMORE USER TTRN'S      *
@9FC     EQU   *                                                  0052
*
*                /*---------------------------------------------------*
*                /* NOW A ITERATIVE DO LOOP IS MADE TO SEE IF ANY OF  *
*                /* THE TTRN'S POINTS TO A NOTE LIST                  *
*                /*---------------------------------------------------*
*
*                DO J=1 TO NBTTR BY 1;
@9FB     LA    @F,1                                               0053
         BC    15,@DO9F9                                          0053
*
*           /*--------------------------------------------------------*
*           /* A TEST IS NOW MADE TO SEE IF ANY OF THE USER TTR'S     *
*           /* POINT TO A NOTE LIST                                   *
*           /*--------------------------------------------------------*
*
*           IF TTRNS(J,4) ^= '00'X      /* N OF TTRN NOT ZERO         *
*              THEN                     /* YES                        *
@DO9FA   LH    @1,J                                               0054
         BCTR  @1,0                                               0054
         SLA   @1,2                                               0054
         L     @5,IDEAD                                           0054
         LA    @A,15(@1,@5)                                       0054
         CLI   0(@A),X'00'                                        0054
*                  GO TO WSAM0036;      /* GO WRITE NOTE LIST         *
         BC    07,WSAM0036                                        0055
*              ELSE;                    /* NO                         *
*                END;                   /* ALL USER TTRNS ARE TESTED  *
*              END;
         LH    @F,J                                               0057
         AH    @F,@D1                                             0057
@DO9F9   STH   @F,J                                               0057
         CH    @F,NBTTR                                           0057
         BC    12,@DO9FA                                          0057
         BC    15,@9F6                                            0059
*            ELSE;                      /* NO                         *
@9FF     EQU   *                                                  0059
*
* /********************************************************************
* /* AT THIS POINT ACTUAL DATA IN THE BUFFER IS PREPARED FOR WRITING. *
* /* THE ADDRESS TO WRITE IS SET AT THE BEGINNING OF A BUFFER AND THE *
* /* AREA USED FOR THE RECORD DESCRIPTOR WORDS IS SAVED SO THAT IT MAY*
* /* BE RESTITUTED TO ITS INITIAL VALUE WHEN ITS USE IS ENDED.        *
* /********************************************************************
*
* WSAM0003:;
@9F6     EQU   *                                                  0060
*
*             /********************************************************
*             /* THIS GENERATE IS TO OBTAIN THE ADDR OF THE OUTPUT DCB*
*             /* SO AS TO OBTAIN THE BLOCKSIZE                        *
*             /********************************************************
*             GENERATE;
WSAM0003 EQU   *                                                  0061
         LA    @7,ULOADDCB             DCB ADDR OF UNLOADED DATA SET
         DS    0H
*
*             READNEXT=REDAD - 8;       /* ADDR OF CURRENT BLOCK TO BE
*                                          WRITTEN.                   *
         L     @F,REDAD                                           0062
         SH    @F,@D2                                             0062
         ST    @F,READNEXT                                        0062
*             RECDESAV=VFIELD;          /* SAVE AREA FOR RECORD
*                                          CONTROL FIELDS AS IT HOLDS
*                                          NEEDED IEBCOPY INFORMATION *
         LR    @1,@F                                              0063
         MVC   RECDESAV(8),0(@1)                                  0063
*             FIRSTM='1'B;              /* INDICATE THAT RECORD
*                                          CONTROL FIELDS HAVE BEEN
*                                          SAVED                      *
         OI    FIRSTM,B'10000000'                                 0064
*             N=0;                      /* INIT NB OF PDS RECORDS TO
*                                          ZERO.                      *
         SR    @F,@F                                              0065
         STH   @F,N                                               0065
*
* /********************************************************************
* /* NOW EACH PDS RECORD IS SCANNED FOR LAST RECORD AND AS MANY OF    *
* /* THEM AS POSSIBLE ARE BLOCKED UP IN ONE BLOCK OF THE SEQUENTIAL   *
* /* DATA SET                                                         *
* /********************************************************************
*
* WSAM0006:;
*             RECB=KEY + DATA + 12;     /* GET LENGHT OF THIS RECORD  *
WSAM0006 LA    @F,12                                              0067
         L     @1,REDAD                                           0067
         MVC   @TEMP2+2(2),10(@1)                                 0067
         A     @F,@TEMP2                                          0067
         SR    @0,@0                                              0067
         IC    @0,9(0,@1)                                         0067
         AR    @F,@0                                              0067
         ST    @F,RECB                                            0067
*             N=N + 1;                  /* UPDATE BY ONE NUMBER OF PDS
*                                          RECORDS                    *
         LA    @F,1                                               0068
         AH    @F,N                                               0068
         STH   @F,N                                               0068
*
*             /*------------------------------------------------------*
*             /* NOW A TEST HAS TO BE MADE TO SEE IF THERE ARE MORE   *
*             /* RECORDS IN THE BUFER AFTER THIS ONE.                 *
*             /*------------------------------------------------------*
*
*             IF F(2)='1'B              /* LAST RECORD IN BUFFER      *
*                THEN                   /* YES                        *
         TM    0(@1),B'01000000'                                  0069
         BC    12,@9F5                                            0069
*                  DO;                  /* SEE IF MORE DATA TO PROCESS*
*
*               /*----------------------------------------------------*
*               /* NOW A TEST IS MADE TO SEE IF IT WAS LAST RECORD IN *
*               /* THIS BUFFER OR LAST RECORD TO PROCESS.             *
*               /*----------------------------------------------------*
*
*               IF F(1)='1'B            /* LAST RECORD IN ANY BUFFER  *
*                  THEN                 /* YES                        *
         TM    0(@1),B'10000000'                                  0071
         BC    12,@9F4                                            0071
*                      RETAD=ADDR(WSAM0030);/* SET RETURN ADDR OF
*                                              PROCESSING LAST RECORD *
         LA    @F,WSAM0030                                        0072
         ST    @F,@TEMP4                                          0072
         MVC   RETAD(3),@TEMP4+1                                  0072
         BC    15,@9F3                                            0073
*                  ELSE                 /* NO LAST REC IN THIS BUFFER *
*                      RETAD=ADDR(WSAM0024);/* SET RETURN ADDR OF
*                                              PROCESSING LAST RECORD
*                                              IN THIS BUFFER         *
@9F4     LA    @F,WSAM0024                                        0073
         ST    @F,@TEMP4                                          0073
         MVC   RETAD(3),@TEMP4+1                                  0073
*                    F='00'X;           /* RESET F BYTE OF COUNT FIELD
*                                          TO ZERO BEFORE WRITING     *
@9F3     MVI   0(@1),X'00'                                        0074
         BC    15,@9F2                                            0076
*                  END;
*                ELSE                   /* NO - NO MORE DATA IN BUFFER*
*                    RETAD=ADDR(WSAM0018);/* RETURN ADDR TO PROCESS
*                                            NEXT RECORD IN BUFFER    *
@9F5     LA    @F,WSAM0018                                        0076
         ST    @F,@TEMP4                                          0076
         MVC   RETAD(3),@TEMP4+1                                  0076
*
* /********************************************************************
* /* AT THIS POINT A PDS RECORD IS ANALYSED TO SEE IF IT HAS TO BE    *
* /* WRITTEN IN SPANNED VARIABLE FORMAT OR JUST VARIABLE FORMAT OR    *
* /* WHETHER MORE DATA WILL FIT INTO THE BLOCK TO BE WRITTEN          *
* /********************************************************************
*
* WSAM0009:;
@9F2     EQU   *                                                  0077
*
*             /*------------------------------------------------------*
*             /* A TEST IS NOW MADE TO SEE IF THE DATA SO FAR ANALYSED*
*             /* WILL FIT IN ONE BLOCK OF THE SEQUENTIAL DATA SET AND *
*             /* IF SO A TRY IS MADE TO ADD YET ANOTHER PDS RECORD    *
*             /* OTHERWISE THE DATA HAS TO BE WRITTHEN                *
*             /*------------------------------------------------------*
*
*             IF WRCNT+RECB <=  DCBBLKSI/* DATA FIT IN THIS BLOCK     *
*                THEN                   /* YES                        *
WSAM0009 L     @F,RECB                                            0078
         AH    @F,WRCNT                                           0078
         CH    @F,DCBBLKSI                                        0078
         BC    02,@9F1                                            0078
*                  DO;                  /* SEE IF MORE WILL FIT       *
*                    WRCNT=WRCNT + RECB;/* UPDATE WRITE COUNTER       *
         L     @F,RECB                                            0080
         AH    @F,WRCNT                                           0080
         STH   @F,WRCNT                                           0080
*                    GO TO NEXTPROC;    /* GO PROCESS MORE DATA       *
         MVC   @TEMP3+1(3),RETAD                                  0081
         L     @1,@TEMP3           RETAD                          0081
         BCR   15,@1                                              0081
*                  END;
*                ELSE;                  /* NO-HAVE TO WRITE THIS BLOCK*
@9F1     EQU   *                                                  0083
*
*             /*------------------------------------------------------*
*             /* A TEST IS NOW MADE TO SEE IF THIS BLOCK CAN BE       *
*             /* WRITTEN AS A WHOLE OR WHETHER THE BLOCK HAS TO BE    *
*             /* SPANNED                                              *
*             /*------------------------------------------------------*
*
*             IF N ^= 1                 /* ONLY ONE PDS RECORD BIGGER
*                                          THAN SEQUENTIAL BLOCK      *
*                THEN                   /* NO MORE THAN ONE REC IN BLK*
@9F0     LA    @F,1                                               0084
         CH    @F,N                                               0084
         BC    08,@9EF                                            0084
*                  DO;                  /* PROCESS NORMALLY           *
*                    BLLA=WRCNT;        /* FILL BLOCK DESCRIPTOR WORD *
         L     @1,READNEXT                                        0086
         MVC   0(2,@1),WRCNT                                      0086
*                    SLLA=WRCNT - 4;    /* FILL RECORD DESCRIPTOR WORD*
         LH    @F,WRCNT                                           0087
         SH    @F,@D3                                             0087
         ST    @F,@TEMP4                                          0087
         MVC   4(2,@1),@TEMP4+2                                   0087
*                    BLLB='0000'X;      /* SET RESERVED BYTES IN      *
         MVC   2(2,@1),@X4                                        0088
*                    SLLB='0000'X;      /* DESCRIPTOR WORDS TO ZERO   *
         MVC   6(2,@1),@X4                                        0089
*                    CALL WRITER;       /* WRITE THIS BLOCK OF DATA   *
         BAL   @E,WRITER                                          0090
*                    READNEXT=REDAD-8;   /* SET NEXT WRITE ADDRESS    *
         L     @F,REDAD                                           0091
         SH    @F,@D2                                             0091
         ST    @F,READNEXT                                        0091
*                    N=1;               /* RESET NB OF PDS RECORDS TO
*                                          PROCESS TO ONE             *
         LA    @F,1                                               0092
         STH   @F,N                                               0092
*                    GO TO WSAM0009;    /* ANALYSE NEXT PDS RECORD    *
         BC    15,WSAM0009                                        0093
*                  END;
*                ELSE;                  /* YES- NEED VARIABLE SPANNED *
@9EF     EQU   *                                                  0095
*
*             /*------------------------------------------------------*
*             /* NOW IT IS POSSIBLE DUE TO AN OVERWRITE THAT THE DCB  *
*             /* BLOCKSIZE DOES NOT REPRESENT THE ACTUAL DATA LENGTH  *
*             /* AND THAT DUE TO THAT THE UNLOADED DATA SETS BLOCKSIZE*
*             /* HAS BEEN CHOSEN TOO SMALL THIS GIVES AN ERROR        *
*             /* CONDITION AS THE DATA SET CAN NOT BE LOADED.         *
*             /*------------------------------------------------------*
*
*             IF DATA > IBLKSIZE        /* DATA LENGHT TOO BIG        *
*                THEN                   /* YES                        *
@9EE     L     @1,REDAD                                           0096
         CLC   10(2,@1),IBLKSIZE                                  0096
         BC    12,@9ED                                            0096
*                  DO;                  /* INDIC ERROR CONDITION      *
*                    IOEF2(7)='1'B;     /* SET ERROR SWITCH           *
         OI    IOEF2,B'00000010'                                  0098
*
*                    /*************************************************
*                    /* A BRANCH IS NOW MADE TO IEBIOE TO HANDLE THE  *
*                    /* ERROR CONDITION                               *
*                    /*************************************************
*
*                    GENERATE;
         L     @F,VIEBIOE2             ENTRY POINT IN ERROR ROUTINE
         BR    @F                      GO TO ERROR ROUTINE
         DS    0H
*
*                  END;
*                ELSE;                  /* NO - DATA LENGTH IS OK     *
@9ED     EQU   *                                                  0101
*                    SLLB='4000'X;      /* INDIC 1ST SEGMENT OF BLOCK *
@9EC     L     @1,READNEXT                                        0102
         MVC   6(2,@1),@X5                                        0102
*
* /********************************************************************
* /* AT THIS POINT THE DESCRIPTOR WORDS FOR THE VARIABLE SPANNED      *
* /* RECORDS ARE FILLED IN                                            *
* /********************************************************************
*
* WSAM0012:;
*                    BLLA=DCBBLKSI;     /* BLOCK DESCRIPTOR WORD      *
WSAM0012 L     @1,READNEXT                                        0104
         MVC   0(2,@1),DCBBLKSI                                   0104
*                    SLLA=DCBBLKSI - 4;   /* RECORD DESCRIPTOR WORD   *
         LH    @F,DCBBLKSI                                        0105
         SH    @F,@D3                                             0105
         ST    @F,@TEMP4                                          0105
         MVC   4(2,@1),@TEMP4+2                                   0105
*                    BLLB='0000'X;      /* RESERVED BYTES TO ZERO     *
         MVC   2(2,@1),@X4                                        0106
*                    RECB=RECB -        /* NUMBER OF BYTES LEFT TO    *
*                           DCBBLKSI +  /* WRITE FOR NEXT SEGMENT     *
*                             8;        /* RECORD DESCRIPTOR LENGTH   *
         LA    @F,8                                               0107
         SH    @F,DCBBLKSI                                        0107
         A     @F,RECB                                            0107
         ST    @F,RECB                                            0107
*                    CALL WRITER;       /* WRITE PREPARED BLOCK       *
         BAL   @E,WRITER                                          0108
*                    READNEXT=READNEXT +/* ADDRESS POINTING TO NEXT   *
*                              DCBBLKSI -/* SEGMENT FOR NEXT WRITE    *
*                               8;      /*  ADDRESS                   *
         LH    @F,@D4                                             0109
         AH    @F,DCBBLKSI                                        0109
         A     @F,READNEXT                                        0109
         ST    @F,READNEXT                                        0109
*
*             /*------------------------------------------------------*
*             /* NOW A TEST IS MADE TO SEE IF THERE ARE STILL MORE    *
*             /* SEGMENTS BEFORE THE LAST ONE                         *
*             /*------------------------------------------------------*
*
*             IF RECB + 8 > DCBBLKSI    /* A MIDDLE SEGMENT           *
*                THEN                   /* YES                        *
         LA    @F,8                                               0110
         A     @F,RECB                                            0110
         CH    @F,DCBBLKSI                                        0110
         BC    12,@9EB                                            0110
*                  DO;                  /* PREPARE IT FOR WRITING     *
*                    SLLB='C000'X;      /* INDIC MIDDLE SEGMENT       *
         L     @1,READNEXT                                        0112
         MVC   6(2,@1),@X6                                        0112
*                    GO TO WSAM0012;    /* GO WRITE BLOCK             *
         BC    15,WSAM0012                                        0113
*                  END;
*                ELSE;                  /* NO - LAST SEGMENT          *
@9EB     EQU   *                                                  0115
*                    BLLA=RECB + 8;     /* FILL BLOCK DESCRIPTOR WORD *
@9EA     LA    @F,8                                               0116
         A     @F,RECB                                            0116
         L     @1,READNEXT                                        0116
         ST    @F,@TEMP4                                          0116
         MVC   0(2,@1),@TEMP4+2                                   0116
*                    SLLA=RECB + 4;     /* FILL RECORD DESCRIPTOR WORD*
         LA    @F,4                                               0117
         A     @F,RECB                                            0117
         ST    @F,@TEMP4                                          0117
         MVC   4(2,@1),@TEMP4+2                                   0117
*                    BLLB='0000'X;      /* SET RESERVED BYTES TO ZERO *
         MVC   2(2,@1),@X4                                        0118
*                    SLLB='8000'X;      /* INDIC LAST SEGMENT         *
         MVC   6(2,@1),@X7                                        0119
*                    CALL WRITER;       /* WRITE LAST SEGMENT         *
         BAL   @E,WRITER                                          0120
*                    N=0;               /* SET COUNTER OF NUMBER OF
*                                          PDS RECORDS TO ZERO        *
         SR    @F,@F                                              0121
         STH   @F,N                                               0121
*                    REDAD=READNEXT +   /* SET ADDRESS TO LAST PDS    *
*                                8;     /* RECORD PROCESSED.          *
         LA    @F,8                                               0122
         A     @F,READNEXT                                        0122
         ST    @F,REDAD                                           0122
*                    READNEXT=READNEXT +/* POINT TO NEXT RECORD TO    *
*                              RECB;    /* WRITE.                     *
         L     @F,RECB                                            0123
         A     @F,READNEXT                                        0123
         ST    @F,READNEXT                                        0123
*                    GO TO NEXTPROC;    /* GO TO ADDRESS SET          *
         MVC   @TEMP3+1(3),RETAD                                  0124
         L     @1,@TEMP3           RETAD                          0124
         BCR   15,@1                                              0124
* /********************************************************************
* /* AT THIS POINT THERE ARE MORE RECORDS IN THE BUFFER TO BE WRITTEN *
* /* OUT SO THE POINTER IS UPDATED AND THE NEXT RECORD IS PROCESSED   *
* /********************************************************************
*
* WSAM0018:;
*             REDAD=REDAD + RECB;       /* POINT TO NEXT PDS RECORD   *
WSAM0018 L     @F,RECB                                            0126
         A     @F,REDAD                                           0126
         ST    @F,REDAD                                           0126
*             GO TO WSAM0006;           /* GO PROCESS IT              *
         BC    15,WSAM0006                                        0127
*
* /********************************************************************
* /* AT THIS POINT THE END OF THE FIRST BUFFER WAS REACHED PREPARATION*
* /* IS MADE FOR PROCESSING IN THE SECOND BUFFER                      *
* /********************************************************************
*
* WSAM0024:;
*
*             /*------------------------------------------------------*
*             /* A TEST HAS TO BE MADE TO SEE IF THE LAST RECORD OF   *
*             /* THE PREVIOUS BUFFER STILL HAS TO BE WRITTEN          *
*             /*------------------------------------------------------*
*
*             IF N ^= 0                 /* LAST RECORD STILL TO WRITE *
*                THEN                   /* YES                        *
WSAM0024 SR    @F,@F                                              0129
         CH    @F,N                                               0129
         BC    08,@9E9                                            0129
*                  DO;                  /* PREPARE IT AND WRITE IT    *
*                    BLLA=WRCNT;        /* FILL BLOCK DESCRIPTOR WORD *
         L     @1,READNEXT                                        0131
         MVC   0(2,@1),WRCNT                                      0131
*                    SLLA=WRCNT - 4;    /* FILL RECORD DESCRIPTOR WORD*
         LH    @F,WRCNT                                           0132
         SH    @F,@D3                                             0132
         ST    @F,@TEMP4                                          0132
         MVC   4(2,@1),@TEMP4+2                                   0132
*                    BLLB='0000'X;      /* SET RESERVED BYTES IN      *
         MVC   2(2,@1),@X4                                        0133
*                    SLLB='0000'X;      /* DESCRIPTOR WORDS TO ZERO   *
         MVC   6(2,@1),@X4                                        0134
*                    CALL WRITER;       /* WRITE LAST BLOCK OF 1ST BUF*
         BAL   @E,WRITER                                          0135
*                  END;
*                ELSE;                  /* NO 1ST BUF HAS BEEN WRITTEN*
@9E9     EQU   *                                                  0137
*                    REDAD=BEGFST2;     /* POINT TO BEGIN OF 2ND BUF  *
@9E8     MVC   REDAD(4),BEGFST2                                   0138
*                    GO TO WSAM0003;    /* PROCESS 2ND BUFFER         *
         BC    15,WSAM0003                                        0139
*
* /********************************************************************
* /* AT THIS POINT THERE IS NO MORE DATA IN THE BUFFERS TO PROCESS    *
* /* A LAST RECORD MAY HAVE TO BE WRITTEN AND THEN CONTROL IS GIVEN   *
* /* BACK TO THE CALLER                                               *
* /********************************************************************
*
* WSAM0030:;
*
*             /*------------------------------------------------------*
*             /* A TEST HAS TO BE MADE TO SEE IF THE LAST RECORD IN   *
*             /* THE LAST BUFFER HAS BEEN WRITTEN                     *
*             /*------------------------------------------------------*
*
*             IF N ^= 0                 /* LAST RECORD STIL TO WRITE  *
*                THEN                   /* YES                        *
WSAM0030 SR    @F,@F                                              0141
         CH    @F,N                                               0141
         BC    08,@9E7                                            0141
*                  DO;                  /* PREPARE AND WRITE IT       *
*                    BLLA=WRCNT;        /* FILL BLOCK DESCRIPTOR WORD *
         L     @1,READNEXT                                        0143
         MVC   0(2,@1),WRCNT                                      0143
*                    SLLA=WRCNT - 4;    /* FILL RECORD DESCRIPTOR WORD*
         LH    @F,WRCNT                                           0144
         SH    @F,@D3                                             0144
         ST    @F,@TEMP4                                          0144
         MVC   4(2,@1),@TEMP4+2                                   0144
*                    BLLB='0000'X;      /* SET RESERVED BYTES IN      *
         MVC   2(2,@1),@X4                                        0145
*                    SLLB='0000'X;      /* DESCRIPTOR WORDS TO ZERO   *
         MVC   6(2,@1),@X4                                        0146
*                    CALL WRITER;       /* WRITE LAST BLOCK           *
         BAL   @E,WRITER                                          0147
*                  END;
*                ELSE;                  /* NO NO MORE TO WRITE        *
@9E7     EQU   *                                                  0149
*                    READNEXT=WRTNEXT;  /* RESET WRITE ADDRESS        *
@9E6     MVC   READNEXT(4),WRTNEXT                                0150
*                    RETURN;            /* GO BACK TO CALLER OF RTN   *
         BC    15,@EL01                                           0151
* /********************************************************************
* /* AT THIS POINT THE MEMBER HAS A NOTE LIST AND PREPARATION IS MADE *
* /* FOR THE WRITING OF THIS NOTE LIST TO THE UNLOADED DATA SET       *
* /********************************************************************
*
* WSAM0036:;
*
*         /************************************************************
*         /* THIS GENERATE IS TO OBTAIN THE ADDR OF THE INPUT PDS DCB *
*         /* ADDR SO AS TO OBTAIN THE RECORD FORMAT                   *
*         /************************************************************
*         GENERATE;
WSAM0036 EQU   *                                                  0153
         LA    @7,INDCB                ADDR OF INPUT PDS DCB
         DS    0H
*
*         TTRNB(1:8)=                   /* PUT IN COUNTER  NUMBER OF  *
*                TTRNS(J,4);            /* NOTE LIST TTR'S            *
         LH    @1,J                                               0154
         BCTR  @1,0                                               0154
         SLA   @1,2                                               0154
         L     @5,IDEAD                                           0154
         LA    @E,15(@1,@5)                                       0154
         MVC   NBTTR+1(1),0(@E)                                   0154
*         READNEXT=ADNL-8;              /* ADDRESS WHERE TO START
*                                          WRITING                    *
         L     @F,ADNL                                            0155
         SH    @F,@D2                                             0155
         ST    @F,READNEXT                                        0155
*         NF='111'B;                    /* SET NOTE LIST INDICATOR    *
         L     @6,ADNL                                            0156
         MVI   0(@6),B'11100000'                                  0156
*         WRCNT= WRCNT +                /* NB OF BYTES TO WRITE       *
*                 NBTTR*4 +             /* NOTE LIST LENGTH           *
*                    NKEY +             /* KEY LENGTH                 *
*                       12;             /* LENGTH OF COUNT FIELD      *
         LA    @E,4                                               0157
         MH    @E,NBTTR                                           0157
         AH    @E,WRCNT                                           0157
         AH    @E,@D5                                             0157
         SR    @0,@0                                              0157
         IC    @0,9(0,@6)                                         0157
         AR    @E,@0                                              0157
         STH   @E,WRCNT                                           0157
*
*         /************************************************************
*         /* THIS TEST IS TO FIND OUT IF THE INPUT PDS HAD VARIABLE   *
*         /* RECORD FORMAT IN WHICH CASE 8 HAS TO BE ADDED TO THE     *
*         /* LENGTH OF THE NOTE LIST TO BE WRITTEN                    *
*         /************************************************************
*         IF DCBRECFM(1) = '0'B         /* RECORD FORMAT VARIABLE     *
*            THEN                       /* YES                        *
         TM    DCBRECFM,B'10000000'                               0158
         BC    05,@9E5                                            0158
*                 WRCNT =WRCNT  + 8;    /* ADD 8 TO NOTE LIST LENGTH  *
         LA    @F,8                                               0159
         AH    @F,WRCNT                                           0159
         STH   @F,WRCNT                                           0159
*            ELSE;                      /* NO LENGTH OK               *
@9E5     EQU   *                                                  0160
*
*         RECDESAV=VFIELD;              /* SAVE CONTROL AREA INFORM   *
@9E4     L     @C,READNEXT                                        0161
         MVC   RECDESAV(8),0(@C)                                  0161
*         FIRSTM='1'B;                  /* INDIC SAVED RECORD CONTROL
*                                          FIELD.                     *
         OI    FIRSTM,B'10000000'                                 0162
*         BLLA=WRCNT;                   /* FILL BLOCK DESCRIPTOR WORD *
         MVC   0(2,@C),WRCNT                                      0163
*         SLLA=WRCNT - 4;               /* FILL RECORD DESCRIPTOR WORD*
         LH    @F,WRCNT                                           0164
         SH    @F,@D3                                             0164
         ST    @F,@TEMP4                                          0164
         MVC   4(2,@C),@TEMP4+2                                   0164
*         BLLB='0000'X;                 /* SET RESERVED BYTES IN      *
         MVC   2(2,@C),@X4                                        0165
*         SLLB='0000'X;                 /* DESCRIPTOR WORDS TO ZERO   *
         MVC   6(2,@C),@X4                                        0166
*         CALL WRITER;                  /* GO WRITE THIS BLOCK        *
         BAL   @E,WRITER                                          0167
*         GO TO WSAM0003;               /* GO PROCESS MEMBER          *
         BC    15,WSAM0003                                        0168
* /********************************************************************
* /* AT THIS ENTRY POINT THE HEADER LABEL NEEDED FOR AN UNLOADED      *
* /* DATA SET IS WRITTEN TO THE OUTPUT DATA SET                       *
* /********************************************************************
*
* IEBWSAM1: ENTRY;
IEBWSAM1 STM   @E,@C,12(@D)                                       0169
         BALR  @B,0                                               0169
         LA    @F,IEBWSAM1-IEBWSAM                                0169
         SR    @B,@F                                              0169
         ST    @D,@SAV001+4                                       0169
         LA    @F,@SAV001                                         0169
         ST    @F,8(0,@D)                                         0169
         LR    @D,@F                                              0169
*           WSFLAG(5)='0'B;             /* INDIC WRITING              *
@9E3     NI    WSFLAG,B'11110111'                                 0170
*           FIRSTM='0'B;                /* INDIC NO NEED TO SAVE RECORD
*                                          CONTROL FIELD.             *
         NI    FIRSTM,B'01111111'                                 0171
*           ACOP(1)=ACOPYR1;            /* ADDR OF 1ST HEADER LABEL   *
         MVC   ACOP(4),ACOPYR1                                    0172
*           ACOP(2)=ACOPYR2;            /* ADDR OF 2ND HEADER LABEL   *
         MVC   ACOP+4(4),ACOPYR2                                  0173
*
*           /**********************************************************
*           /* AS TWO RECORDS HAVE TO BE WRITTEN A ITERITIVE DO LOOP  *
*           /* IS SET UP.                                             *
*           /**********************************************************
*
*           DO J=1 TO 2;
         LA    @F,1                                               0174
         STH   @F,J                                               0174
*             READNEXT=ACOP(J);         /* GET LABEL ADDRESS          *
@DO9E2   LH    @1,J                                               0175
         SLA   @1,2                                               0175
         L     @F,ACOP-4(@1)                                      0175
         ST    @F,READNEXT                                        0175
*             CALL WRITER;              /* WRITE HEADER LABEL         *
         BAL   @E,WRITER                                          0176
*           END;                        /* HEADER RECORDS WRITTEN     *
*
*           READNEXT=WRTNEXT;           /* RESET READ POINTER         *
         LH    @F,J                                               0177
         AH    @F,@D1                                             0177
@DO9E1   STH   @F,J                                               0177
         CH    @F,@D6                                             0177
         BC    12,@DO9E2                                          0177
         MVC   READNEXT(4),WRTNEXT                                0178
*           RETURN;                     /* BACK TO CALLER             *
* /********************************************************************
* /* THIS INTERNAL PROCEDURE WRITES OUT THE RECORDS FROM THE BUFFER   *
* /********************************************************************
*
* WRITER:   PROCEDURE;
@EL01    L     @D,4(0,@D)                                         0180
         LM    @E,@C,12(@D)                                       0180
         BCR   15,@E                                              0180
WRITER   STM   @E,@C,12(@D)                                       0180
         ST    @D,@SAV002+4                                       0180
         LA    @F,@SAV002                                         0180
         ST    @F,8(0,@D)                                         0180
         LR    @D,@F                                              0180
*           RESTRICT(4);                /* FOR ADDRESSABILITY TO
*                                          IEBMCA                     *
*           RESTRICT(7);                /* TO CONTAIN THE ADDRESS OF
*                                          THE AREA TO WRITE FROM     *
*
*           /**********************************************************
*           /* IN THE FOLLOWING GENERATE, A BLOCK OF DATA IS WRITTEN  *
*           /* TO THE UNLOADED OUTPUT DATA SET                        *
*           /**********************************************************
*
*           GENERATE;
         L     @7,READNEXT             ADDR TO WRITE FROM
         WRITE DECB1,SF,ULOADDCB,(@7),MF=E
         CHECK DECB1
         DS    0H
*
*           WRCNT=8;                    /* INIT WRITE COUNT TO 8      *
         LA    @F,8                                               0184
         STH   @F,WRCNT                                           0184
*
*             /*------------------------------------------------------*
*             /* A TEST IS NOW MADE TO SEE IF THE RECORD CONTROL      *
*             /* FIELD HAD BEEN SAVED IN WHICH CASE IT HAS TO BE      *
*             /* RESTORED.                                            *
*             /*------------------------------------------------------*
*
*             IF FIRSTM='1'B            /* SAVED REC CONTROL FIELD    *
*                THEN                   /* YES                        *
         TM    FIRSTM,B'10000000'                                 0185
         BC    12,@9DE                                            0185
*                  DO;                  /* RESET IT.                  *
*                    VFIELD=RECDESAV;   /* RESTORE INITIAL FIELD      *
         L     @1,READNEXT                                        0187
         MVC   0(8,@1),RECDESAV                                   0187
*                    FIRSTM='0'B;       /* INDIC FIELD RESTORED       *
         NI    FIRSTM,B'01111111'                                 0188
*                  END;
*                ELSE;                  /* NO-NO NEED TO RESTORE      *
*           END WRITER;
         BC    15,@EL01                                           0191
*          END IEBWSAM;
@DATA1   EQU   *
@0       EQU   00                  EQUATES FOR REGISTERS 0-15
@1       EQU   01
@2       EQU   02
@3       EQU   03
@4       EQU   04
@5       EQU   05
@6       EQU   06
@7       EQU   07
@8       EQU   08
@9       EQU   09
@A       EQU   10
@B       EQU   11
@C       EQU   12
@D       EQU   13
@E       EQU   14
@F       EQU   15
@D1      DC    H'1'
@D2      DC    H'8'
@D3      DC    H'4'
@D4      DC    H'-8'
@D5      DC    H'12'
@D6      DC    H'2'
         DS    0F
@X4      DC    X'0000'
@X5      DC    X'4000'
@X6      DC    X'C000'
@X7      DC    X'8000'
         DS    0D
@DATA    EQU   *
@SAV001  EQU   @DATA+00000000      72 BYTE(S) ON WORD
RETAD    EQU   @DATA+00000073      3  BYTE  POINTER ON WORD+1
REDAD    EQU   @DATA+00000076      FULLWORD POINTER
N        EQU   @DATA+00000080      HALFWORD INTEGER
J        EQU   @DATA+00000082      HALFWORD INTEGER
ACOP     EQU   @DATA+00000084      2*FULLWORD POINTER
RECB     EQU   @DATA+00000092      FULLWORD INTEGER
OUTA     EQU   00000000            12 BYTE(S)
F        EQU   OUTA+00000000       8 BIT(S)
MBBCCHHR EQU   OUTA+00000001       8 BYTE(S)
KEY      EQU   OUTA+00000009       1 BYTE(S)
DATA     EQU   OUTA+00000010       2 BYTE(S)
FIRSTM   EQU   @DATA+00000096      1 BIT(S) ON BYTE
USTTRN   EQU   00000011            13 BYTE(S)
CFLD     EQU   USTTRN+00000000     8 BIT(S)
TTRNS    EQU   USTTRN+00000001     3*4 BYTE(S)
NBTTR    EQU   @DATA+00000098      HALFWORD INTEGER
TTRNO    EQU   NBTTR+00000000      8 BIT(S)
TTRNB    EQU   NBTTR+00000001      8 BIT(S)
NOTA     EQU   00000000            12 BYTE(S)
NF       EQU   NOTA+00000000       8 BIT(S)
NCNT     EQU   NOTA+00000001       8 BYTE(S)
NKEY     EQU   NOTA+00000009       1 BYTE(S)
NDATA    EQU   NOTA+00000010       2 BYTE(S)
WRCNT    EQU   @DATA+00000100      HALFWORD INTEGER
VFIELD   EQU   00000000            8 BYTE(S)
BLLA     EQU   VFIELD+00000000     2 BYTE(S)
BLLB     EQU   VFIELD+00000002     2 BYTE(S)
SLLA     EQU   VFIELD+00000004     2 BYTE(S)
SLLB     EQU   VFIELD+00000006     2 BYTE(S)
RECDESAV EQU   @DATA+00000102      8 BYTE(S)
         ENTRY IEBWSAM1
@SAV002  EQU   @DATA+00000112      72 BYTE(S) ON WORD
         DS    00000184C
@TEMPS   DS    0F
@TEMP2   DC    F'0'
@TEMP3   DC    F'0'
@TEMP4   DC    F'0'
PATCHLN  EQU   (*-IEBWSAM)/20          5 PERCENT OF MODULE LENGTH
PATCH    DC    XL(PATCHLN)'00'         5 PERCENT PATCH AREA
         WRITE DECB1,SF,MF=L
         DCBD  DSORG=PS
IEBMCA   DSECT
         IEBMCA
@DATEND  EQU   *
@EL02    EQU   @EL01
@9DD     EQU   @EL01
@9DE     EQU   @EL01
         END   IEBWSAM
