RWPC     TITLE 'IGG019C8- READ PCI APPENDAGE'
IGG019C8 CSECT
         SPACE 1
*A 129671,188080-188084,441959-441963,447200-447984,           @YM04451
*A 462100-462200                                               @YM04451
*C 451300                                                      @YM06448
*A 442983                                                      @YM06435
*A 171500-171800,189267-189334,231200-231420,462800-462820     @YM06434
*C 171000                                                      @YM06434
*A 128937,129049,184500-184600,185020,188020-188040,188908     @YM06433
*A 188941-188942,189010-189263,189945-190196,315500            @YM06433
*A 419000-419320,419900,431500,439500,441004-441064,441924     @YM06433
*A 441940-442099,442908,443063-443100,451300,462500-462600     @YM06433
*A 462900                                                      @YM06433
*C 149500-150000,155000-157000,159000-161000,187000-188000     @YM06433
*C 188904,188917,188960,189356-189388,189652-189656            @YM06433
*C 189885-189887,192000,314000,363000,365800,375000,418300     @YM06433
*C 420400,424000,441100,441800-441920,442332-442632            @YM06433
*C 442665-442887,442945-442954,443100,443400,444000-447000     @YM06433
*C 451400,452000,459000,460000                                 @YM06433
*D 134600,135900,149000,154000,180000-180400,180800-183988     @YM06433
*D 185100-185500,188916,188918-188940,188946,188980-188988     @YM06433
*D 189996-189998,189660-189877,189888,316000-318000,363500     @YM06433
*D 395600-395980,396100-396200,425000-428000,432000-437900     @YM06433
*D 440500-440988,441600,442652-442664,442881,442925            @YM06433
*D 442957-442963,451600,459500,460060-460120,460300-461000     @YM06433
*A 128929,128989,395600-395980,396100-396200                    YA00099
*C457000                                                        OY01184
*D450000                                                         A34092
*C469400                                                         A41780
* 132500,190000,192000                                           X010XX
*C 128995,150000,182600,363000,437900,463440                    YL026VD
*A 149000,182400,382800,363500,437800                           YL026VD
*C212100,213570                                                @ZA11964
*A213670,213700                                                @ZA13707
*A213670,213700                                                @ZA13751
*TITLE- IEBCOPY READ/WRITE PCI APPENDAGE- IGG019C8                    *
*                                                                     *
*STATUS- CHANGE LEVEL 001                                             *
*                                                                     *
*FUNCTION/OPERATION- THIS MODULE DETERMINES DYNAMICALLY WHILE A RECORD*
*       IS BEING READ OR WRITTEN, IF THERE ARE MORE RECORDS TO BE     *
*       READ OR WRITTEN, IF THEY ARE IN OR WILL FIT IN THE BUFFER, AND*
*       IF SO, WHERE THE NEXT RECORD WILL BE READ INTO OR WRITTEN     *
*       FROM AND UPDATES CCWS TO DO AS IT DETERMINES. A PROGRAM       *
*       CONTROLLED INTERRUPT IS GENERATED WHEN A CCW IS FETCHED WHICH *
*       HAS THE PCI FLAG SET. IOS TRAPS THE PCI, DOES SOME SETTING UP *
*       OF REGISTERS AND GIVES THE PCI APPENDAGE CONTROL AT IGG019C8. *
*                                                                     *
*ENTRY POINTS- ENTERED FROM I/O SUPERVISOR AT IGG019C8.               *
*                                                                     *
*INPUT- REGISTER 15 SET BY IOS TO THE ADDRESS OF THE ENTRY POINT OF   *
*      THE APPENDAGE SO IS USED AS BASE ADDRESS REGISTER FOR IGG019C8.*
*       REGISTER 2 IS SET BY IOS TO POINT TO THE IOB BEING USED. EACH *
*      IOB CREATED BY THE IEBDSCPY HAS A POINTER TO THE COMMON AREA   *
*      IEBMCA AT THE END OF IT (OFFSET IEBMCAPT) SO THAT POINTERS,CCWS*
*      AND OTHER COMMON DATA CAN BE FOUND AND CHANGED BY THE PCI      *
*      APPENDAGE. POINTER TO THE DCB IS ALSO IN THE IOB AS A SYSTEMS  *
*      REQUIREMENT.                                                   *
*      'RDGSW' IS ON IN 'WSFLAG' IF A READ IS BEING DONE.             *
*       'STATUS' SWITCH IS SET TO DEFINE WHICH DATA SET IS BEING READ.*
*       'TAG' SWITCH IS SET OT DEFINE WHICH DATA SET IS BEING WRITTEN.*
*       'RDPTR1' IS SET TO CCW BEING EXECUTED IF READING.             *
*       'RDPTR2' IS SET TO NEXT CCW TO BE EXECUTED IF READING.        *
*       'WRPTR1' IS SET TO NEXT CCW TO BE EXECUTED IF WRITING         *
*       'WRPTR2' IS SET TO NEXT CCW TO BE EXECUTED IF WRITING.        *
*       'RDCKPTR1' SET TO CCW BEING EXECUTED IF READBACK CHECKING.    *
*       'RDCKPTR2' SET TO NEXT CCW TO BE EXECUTED IF READBACK CHECKING*
*       'LASTREC' FLAG SET IN FLAG AHEAD OF COUNT FIELD OF RECORD AND *
*      IF ON WITHOUT 'ENDPROC' PCI APPENDAGE MUST LOCATE NEXT BUFFER  *
*      TO DETERMINE WHERE NEXT RECORD TO BE READ OR WRITTEN. 'LASTREC'*
*      SET BY PCI APPENDAGE WHEN READING, ONLY TESTED WHEN WRITING.   *
*       'ENDPROC' FLAG SET BY PCI APPENDAGE WHEN NO MORE BUFFER ROOM  *
*      AVAILABLE TO READ INTO. SET BY IEBDRD (READ ROUTINE) WHEN AN   *
*      EOF WAS READ- PCI DOESN'T CHECK IF EOF WAS READ AS MAIN READ   *
*      SHOULD DO IT. WHEN WRITING OR READ BACK CHECKING, 'ENDPROC'    *
*      FLAG SET MEANS RECORD HAVING IT ON IS THE LAST ONE TO BE DONE. *
*       'WRTOVR' FLAG SET IN FLAG AHEAD OF COUNT FIELD WHEN WRITING   *
*      MEANS MAKE NEXT WRITE CCW OP CODE A 'WRITE SPECIAL CNT/KEY/DATA*
*                                                                     *
*OUTPUT- IOB CCHHR ADDRESS SET TO LAST RECORD SUCCESSFULLY READ OR    *
*       WRITTEN.                                                      *
*                                                                     *
*                  PCI ACTION IF READING OR WRITING                   *
*        RESET PCI FLAG IN CCW CURRENTLY EXECUTING SO PCI NOT GIVEN   *
*       AGAIN IN CASE OF ERROR RETRY OF READ OR WRITE.                *
*        RESET PCI FLAG IN NEXT READ OR WRITE CCW TO BE EXECUTED.     *
*        IF MORE RECORDS TO BE READ OR WRITTEN, SET NOP OP CODE AFTER *
*       NEXT READ OR WRITE CCW TO BE EXECUTED THEN SET A TIC COMMAND  *
*       AFTER CURRENT CCW EXECUTING SO THAT WILL EXECUTE NEXT READ OR *
*       WRITE CCW WITH PCI.                                           *
*        IF NO MORE RECORDS TO BE READ OR WRITTEN, LEAVE NOP CCW OP   *
*       CODE AFTER CURRENT CCW EXECUTING SO CHAIN OF COMMANDS WILL BE *
*       BROKEN AND READ/WRITE STOPPED.                                *
*        SWAP READ OR WRITE CURRENT AND NEXT POINTERS.                *
*        UP BY 1 THE PCI TAKEN COUNT FOR READING OR WRITING.          *
*                                                                     *
*                  PCI ACTION IF READING                              *
*        IF 'CTOUT' SWITCH ON IN 'TAG' UP BY 1 'DIRCNT' FOR EACH      *
*       DIRECTORY BLOCK READ.                                         *
*        IF 'STAT5' SWITCH ON IN 'STATUS' DIRECTORY BLOCKS ARE UNUSED *
*       SO NEED ONLY COUNT THEM. READ EACH BLOCK INTO SAME AREA AND   *
*       COUNT EACH ONE READ BY UPPING 'DIRCNT'.                       *
*        MOVE MBB FROM IOB TO AHEAD OF COUNT OF RECORD JUST READ AND  *
*       CLEAR FLAG FIELD.                                             *
*        SET 'LASTREC' IF CURRENT BUFFER FULL AND POSITION TO NEXT.   *
*        SET 'LASTREC' AND 'ENDPROC' IF HAVE NO MORE BUFFER SPACE.    *
*                                                                     *
*TABLES/WORK AREAS-                                                   *
*       -WKA1-     TEMPORARY BOUNDARY ALIGNMENT FOR DATA LENGTH       *
*       -BCB-      POINTERS TO BUFFERS                                *
*       -WRPCICNT- WRITE PCI'S TAKEN COUNT USED BY READ BACK CHECK    *
*       -IOB-      POINTS TO CURRENT IOB                              *
*       -RDPTR1-   CURRENT READ CCW COMMAND (READ COUNT/KEY/DATA-8)   *
*       -RDPTR2-   NEXT READ CCW COMMAND (READ COUNT OF NEXT CHAIN)   *
*       -WRPTR1-   CURRENT WRITE COMMAND                              *
*       -WRPTR2-   NEXT WRITE COMMAND                                 *
*       -RDCKPTR1- CURRENT READ BACK CHECK CCW                        *
*       -RDCKPTR2- NEXT READ BACK CHECK CCW                           *
*       -LASTADDR- CONTAINS MBBCCHHR OF LAST SUCCESFULLY WRITTEN REC. *
*       -SAVEREGS- SAVES REGISTERS UPON ENTRY INTO APPENDAGE AND      *
*                  RESTORES THEM WHEN RETURNS TO IOS.                 *
*                                                                     *
*ATTRIBUTES- SERIAL REUSABLE,SUPERVISOR MODE, DISABLED                *
         EJECT
*                                                                     *
*               SYMBOLIC REGISTERS FOR READ PCI ROUTINE               *
*                                                                     *
*   BASE ADDRESS REGISTER GR15- ENTRY POINT PASSED BY IOS             *
*                                                                     *
*    WRITE PCI HANDLER IS HERE TOO       IGG019 ENTRY LABEL****-*******
*                                                                     *
         SPACE 1
GR0      EQU   0
GR1      EQU   1                       APPENDAGE SHOULD NOT CHANGE
GR2      EQU   2                       POINTS TO IOB ON ENTRY
GR3      EQU   3                       POINTS TO DEB ON ENTRY
GR4      EQU   4                       POINTS TO DCB ON ENTRY
*    DO NOT NEED POINTER TO DCB AS THERE IS ONE IN THE IOB
*    SAVE REGISTER 4 THRU 8 AND USE REGISTER 4 TO REFERENCE THE COMMON
*   AREA IEBMCA.
GR5      EQU   5                       APPENDAGE USES TO POINT TO CCW
*               REFERENCED BY RDPTR2 IF READING, WRPTR1 IF WRITING.
GR6      EQU   6                       APPENDAGE USES TO POINT TO CCW
*                REFERENCED BY RDPTR1 IF READING
GR7      EQU   7                       POINTS TO UCB ON ENTRY- DO NOT
*        NEED UCB SO USE AS WORK REGISTER AFTER SAVING IT.
GR8      EQU   8                       SAVED AND THEN USED TO POINT TO
*             FMBB FIELD AHEAD OF RECORD BEING READ
GR9      EQU   9                       USED BY APPENDAGE BUT RESET TO
*                  ZERO BEFORE RETURNING TO IOS.
*                     GR10-GR13 WORK REGISTER NO NEED TO SAVE/RESTORE.
GR10     EQU   10
GR11     EQU   11
GR12     EQU   12
GR13     EQU   13
GR14     EQU   14                      CONTAINS RETURN ADDRESS OF IOS
GR15     EQU   15                      ENTRY POINT OF PCI APPENDAGE SET
*            BEFORE ENTRY SO USED AS BASE REGISTER.
*  DECIMAL CONSTANTS
         SPACE 1
C0       EQU   0
C1       EQU   1
C4       EQU   4
C6       EQU   6
C8       EQU   8
C9       EQU   9
C12      EQU   12
C276     EQU   276
C2       EQU   2
C3       EQU   3
C5       EQU   5
C7       EQU   7
C10      EQU   10
C11      EQU   11                                               YA00099
C16      EQU   16
C40      EQU   40                                                X010XX
D2048    EQU   2048                                            @YM06433
*  HEX CONSTANTS
X01      EQU   X'01'
X03      EQU   X'03'
X08      EQU   X'08'
X0D      EQU   X'0D'
X0E      EQU   X'0E'
X1D      EQU   X'1D'
X60      EQU   X'60'
X68      EQU   X'68'
X70      EQU   X'70'
X78      EQU   X'78'
X80      EQU   X'80'                                            YA00099
X92      EQU   X'92'
XF7      EQU   X'F7'                                           @YM06433
         SPACE 1                                                 S20201
* MISC CONSTANTS                                                 S20201
         SPACE 1                                                 S20201
RPS      EQU   X'10'                                             S20201
CSW      EQU   8                  OFFSET OF CSW IN IOB          YL026VD
*                                   CHANNEL STATUS WORD          S20201
VIOBIT   EQU   X'80'              IN UCB IF VIO DATA SET       @YM04451
         SPACE 1                                                 S20201
         SPACE 1
         USING START,GR15
         USING IEBMCA,GR10                                       S20201
START    EQU   *                                                 S20201
         L     GR10,IEBMCAPT(GR0,GR2)  PTR TO COMMON AREA IN     S20201
*                                        IOB                     S20201
         STM   GR0,GR8,PCISAVE    SAVE REGS                      X010XX
         DROP  GR10                                              S20201
         LR    GR4,GR10                SET PTR TO COMMON         S20201
*                                        AREA IN REG 4           S20201
         USING IEBMCA,GR4                                        S20201
         LA    GR3,DEVOFF(GR0,GR2)     LOAD PTR TO DEVTYPE INFO  S20201
         LA    GR7,C8                  LOAD 8 INTO WORK REG      S20201
         STH   GR7,WKA1                STORE AS INCREMENT FOR    S20201
*                                       VALID PCI INTERRUPT      S20201
*                                       TESTING - READ OR RDBACK S20201
         TM    WSFLAG,RDGSW            READING
         BZ    IGG019                  NO, GO TO WRITE PCI RTN
         SPACE 1
*****      PCI HANDLER FOR READING   IGG019C8                 *********
         SPACE 1
*           GR5 HAS POINTER TO RDPTR2 AND GR6 TO RDPTR1
*       REGISTER 2 (GR2) HAS IOB ADDRESS PASSED FROM IOS              *
         L     GR5,RDPTR2              NEXT CCW LIST TO EXECUTE
         L     GR6,RDPTR1              POINTER TO CCW EXECUTED
         SPACE 1                                                 S20201
         LA    GR7,C16(GR0,GR6)        FIND ACCEPTABLE LOWER     S20201
*                                        LIMIT OF CSW AT PCI     S20201
*                                        INTERRUPT               S20201
         BAL   GR9,PCIVALCK            CHECK FOR VALID CSW       S20201
         SPACE 1                                                 S20201
         SPACE 1
*   PREPARE FOR RESTART IN CASE CCW EXECUTING FAILS- WILL BE ABLE TO  *
*  RETRY THRU IOS IF SET POINTER RIGHT.                               *
         SPACE 1
         LRA   GR11,C8(GR6)            REAL ADDR OF READ K/D   @YM06433
         STCM  GR11,C7,CCW3+C1         TIC TO CCW EXECUTING    @YM06433
*
*    TIC SET UP FOR ERROR RESTART IN CASE THIS READ KEY/DATA NOT DONE
*
         OI    C12(GR5),X68            RESTORE PCI             @YM06433
         NI    C12(GR6),XF7          RESET PCI FLAG FOR RETRY  @YM06433
         L     GR8,CURRCCW1            GET READ COUNT ADDRESS  @YM06433
         LA    GR8,C0(GR0,GR8)         CLEAR OP CODE
         LA    GR7,C4                                          @YM06433
         SR    GR8,GR7                 MOVE BACK 4 BYTES TO    @YM06433
         MVC   IOBCCHHR(C5,GR2),C4(GR8) FLAG FIELD             @YM06433
         MVC   C1(C3,GR8),IOBMCCHH(GR2) MOVE MBB FROM IOB TO RECORD
         TM    SENSE,SENSE4            COMPRESS SCAN FOR 'HOLES'
         BO    SCANCOMP                 YES
         TM    STATUS,STAT4            READING INPUT MEMBER
         BO    INMEMBR                  YES
         TM    STATUS,STAT1+STAT3      INPUT OR OUTPUT SPILL DIRECTORY
         BC    C5,READDIR              YES, READ DIRECTORY
         TM    STATUS,STAT5            NEW OUTPUT DIRECTORY
         BZ    READDIR                 NO, MUST ACTUALLY READ DIRECTORY
*     MAKE CCWS SAME, READ TILL EOF                            @YM06434
         L     GR7,CURRCCW1       VIRT ADDR OF READ COUNT      @YM06434
         STCM  GR7,C7,C1(GR5)     STORE IN RD CT OF NEXT CCW   @YM06434
         LA    GR7,C8(GR7)        VIRT ADDR OF READ K/D        @YM06434
         STCM  GR7,C7,C9(GR5)     STORE IN DR K/D OF NEXT CCW  @YM06434
         SPACE 1
* WHEN DIRECTORY BLOCKS TO BE COUNTED MAINFLOW CLEARS DIRBCNT BUFFER. *
         CLC   C8(C1,GR8),NDBTR   IS NDBTR >OR= TO 'R' OF THE    A36049
*                                 BLOCK JUST READ                A36049
         BNH   COUNTDR            YES                            A36049
         MVC   NDBTR(C1),C8(GR8)  NO, UPDATE NDBTR               A36049
         SPACE 1
COUNTDR  EQU   *
         LH    GR7,DIRBCNT
         LA    GR7,C1(GR0,GR7)
         STH   GR7,DIRBCNT             UP DIRECTORY BLOCK COUNT BY 1
RESETNOP EQU   *
         MVC   C16(C4,GR5),RSECTOR     REPLACE NOP WITH RS CCW   S20201
* NOP OR RS WILL STOP CCW EXECUTION IF PCI MISSED                S20201
SWAP     EQU   *
         SPACE 1
         CLI   C0(GR8),LASTREC+ENDPROC FLAG AS LASTREC +BUFFER @YM06433
*          LOAD AND STORE MULTIPLE DONT CHANGE CONDITION CODE  @YM06433
         STM   GR5,GR6,RDPTR1          SWAP RDPTR1 AND RDPTR2
         L     GR7,C0(GR5)        LOAD VIRT DATA ADDR          @YM06433
         L     GR8,CURRCCW1                                    @YM04848
         STM   GR7,GR8,CURRCCW1   SWAP READ CCW POINTERS       @YM04848
         L     GR2,IALPTR2                                     @YM06433
         L     GR3,IALPTR1                                     @YM06433
         STM   GR2,GR3,IALPTR1    SWAP IAL LIST POINTERS       @YM06433
         BE    GENRETRN    IF LAST RECORD IN ANY BUFFER, DONT  @YM06433
*                  TRANSLATE OR SET UP TIC, JUST RETURN TO IOS @YM06433
         SPACE 1
         TM    AOS,PCI      IF PCI BIT OFF, DONT TRANSLATE OR  @YM04451
         BZ    GENRETRN     SET UP TIC, JUST RETURN TO IOS     @YM04451
         SPACE 1
*
* AT THIS POINT, RDPTR1 (GR5) POINTS AT THE NEXT CCW STRING TO @YM04848
* BE TRANSLATED, CURRCCW1 (GR7) CONTAINS THE VIRTUAL DATA      @YM04848
* ADDRESS, AND EXTEND1 (GR2) CONTAINS THE ADDRESS OF THE       @YM04848
* ASSOCIATED INDIRECT ADDRESS LIST (IAL)                       @YM04848
*
         LA    GR6,C0(GR7)        LOAD ADDR OF READ COUNT      @YM06433
         NI    C4(GR5),X'FF'-X'04' SET OFF IAL LIST PRESENT    @YM06433
         LRA   GR9,C0(GR6)        TRANSLATE ADDRESS TO REAL    @YM06433
         LR    GR8,GR6          PUT VIRT START ADR IN WORK REG @YM06433
         AH    GR8,C6(GR5)        BUMP BY LENGTH OF READ       @YM06433
         BCTR  GR8,C0             DECREASE FOR ACTUAL DATA END @YM06433
         SRL   GR6,11             SHIFT FOR 2K BOUNDARY        @YM06433
         SRL   GR8,11             SHIFT FOR 2K BOUNDARY        @YM06433
         SR    GR8,GR6            ON SAME 2K PAGE              @YM06433
         BZ    SAMEPAGE           YES, ALL ON ONE PAGE         @YM06433
         ST    GR9,C0(GR2)        PUT 1ST ENTRY IN IAL         @YM06433
         SLL   GR6,11             GET 1ST BYTE 1ST 2K PAGE     @YM06433
         LA    GR6,2048(GR6)      BUMP BY 2K                   @YM06433
         LRA   GR9,C0(GR6)        TRANSLATE TO REAL            @YM06433
         ST    GR9,C4(GR2)        PUT 2ND ENTRY IN IAL         @YM06433
         LRA   GR9,C0(GR2)        TRANSLATE ADDR TO REAL       @YM06433
         OI    C4(GR5),X'04'      SET IAL LIST PRESENT         @YM06433
SAMEPAGE DS    0H                                              @YM06433
         STCM  GR9,C7,C1(GR5)     INSERT REAL ADDR INTO RD CNT @YM06433
         LA    GR5,C8(GR5)        BUMP TO READ KEY/DATA CCW    @YM06433
         NI    C4(GR5),X'FF'-X'04' SET IAL LIST NOT PRESENT    @YM06433
         LA    GR7,C8(GR7)        BUMP DATA ADDRESS BY 8       @YM06434
         LRA   GR9,C0(GR7)        TRANSLATE ADDRESS TO REAL    @YM06434
         LR    GR6,GR7            VIRT DATA ADDRESS            @YM06434
         AH    GR7,C6(GR5)        ADD LENGTH OF READ           @YM04848
         BCTR  GR7,C0             FIND ACTUAL END ADDR         @YM06433
         SRL   GR6,11             STARTING PAGE NUMBER         @YM06433
         SRL   GR7,11             ENDING PAGE NUMBER           @YM06433
         SR    GR7,GR6            SEE IF ALL ON ONE PAGE       @YM04848
         BZ    EXTIALRD           MORE THAN 1 PAGE, NEED IAL   @YM04848
         ST    GR9,C8(GR2)        PUT FIRST ENTRY INTO IAL     @YM04848
         LA    GR8,C8(GR2)        GET POINTER TO IAL LIST      @YM04848
         SLL   GR6,11             ADDR OF 1ST BYTE ON 1ST PAGE @YM06433
EXTLOOPR LA    GR6,D2048(GR6)     BUMP TO LAST BYTE THIS PAGE  @YM06433
         LA    GR8,C4(GR8)        BUMP TO NEXT IAL ENTRY       @YM04848
         LRA   GR9,C0(GR6)        REAL ADDR NEXT PAGE          @YM04848
         ST    GR9,C0(GR8)        STORE REAL ADDR IN NEXT IAL  @YM04848
         BCT   GR7,EXTLOOPR       LOOP TO TRANSLATE NEXT ENTRY @YM04848
         LRA   GR9,C8(GR2)        TRANSLATE ADDRESS OF IAL LIST@YM04848
         OI    C4(GR5),X'04'      SET IAL PRESENT TO READ CCW  @YM06433
EXTIALRD DS    0H                                              @YM06433
         STCM  GR9,C7,C1(GR5)     INSERT REAL ADDR OF IAL LIST @YM06433
         L     GR5,RDPTR1         LOAD RDPTR1                  @YM06433
         L     GR6,RDPTR2         LOAD ADDR OF READ COUNT      @YM06433
         LA    GR6,C8(GR6)        BUMP TO READ KEY/DATA        @YM06433
GENRET1  LRA   GR5,C0(GR5)        REAL ADDR OF NEXT READ COUNT @YM06433
         ICM   GR5,C8,CCW3        INSERT TIC OP CODE           @YM06433
         BR    GR0                     MODEL 91 CODE           @YM06433
*                                      (NOP USED TO INSURE ALL @YM06433
*                                       PREVIOUS INSTRUCTIONS  @YM06433
*                                       HAVE ALREADY BEEN      @YM06433
*                                       EXECUTED)              @YM06433
         ST    GR5,C8(GR0,GR6)         STORE TIC TO NEXT CCW   @YM06433
GENRETRN EQU   *
         LM    GR0,GR8,PCISAVE    RESTORE REGS                   X010XX
         SR    GR9,GR9                 CLEAR 9 AS IT WAS USED
         BR    GR14               RETURN TO IOS                @YM06433
         SPACE 1
SCANCOMP EQU   *
         TM    STATUS,STAT2       READING OUTPUT DIR             A36049
         BZ    SCNCMP             NO                             A36049
         TM    TAG,CTOUT          COUNT DIRECTORY BLOCKS         A36049
         BZ    SCNCMP             NO                             A36049
         CLC   C8(C1,GR8),NDBTR   IS NDBTR >OR= TO 'R' OF THE    A36049
*                                 BLOCK JUST READ                A36049
         BNH   SCNCMP             YES                            A36049
         MVC   NDBTR(C1),C8(GR8)  NO, UPDATE NDBTR               A36049
SCNCMP   EQU   *                                                 A36049
         MVC   WKA1(C2),C10(GR8)       MOVE DATA LENGTH TO WORD BOUNDRY
         SR    GR9,GR9
         IC    GR9,C9(GR0,GR8)         PICK UP KEY LENGTH
         LH    GR7,WKA1                DATA LENGTH IF ANY
         AR    GR7,GR9                 ADD KEY + DATA LENGTH
         SR    GR13,GR13
         LA    GR10,OUTCHAR            ADDRESS OF DEVTAB CONSTANTS
         USING DEVTAB,GR10             DEVICE CONSTANTS DSECT
         CLI   C8(GR8),X01             FIRST RECORD ON A TRACK R=1
         BNE   SAMETRKS                NO- CONTINUE ON TRACK
         MVC   OUTDS1+C4(C2),TRKCAP    REINITIALIZE TRACK SIZE
         SPACE 1
SAMETRKS EQU   *
         IC    GR13,OVERI              OVERHEAD NOT LAST RECORD
         TM    DEVFLAG,HALFOVER        TWO BYTE OVERHEAD FOR     S20201
*                                        THIS DEVICE             S20201
         BNO   NOTTWO1       NO,USE ONE BYTE                   @ZA11964
         SPACE 1                                                 S20201
         LH    GR13,OVERI              LOAD TWO BYTE OVERHEAD    S20201
NOTTWO1  OC    WKA1(C2),WKA1 IS DATA LENGTH ZERO (EOF)         @ZA11964
         BNZ   NOTTWO                  NO, GO ON                 S20201
         CLI   DEVCODE+3,X'08'    IS IT A 2314?                @ZA13751
         BE    NOTTWO             YES,DON'T ADD ONE BYTE       @ZA13751
         SPACE 1                                                 S20201
*  FOR I/O DEVICES WITH A TWO BYTE OVERHEAD VALUE, THE ONE BYTE  S20201
* OF DATA WRITTEN BY THE HARDWARE FOR AN EOF RECORD MUST BE      S20201
* INCLUDED IN TRACK BALANCE COMPUTATIONS                         S20201
         SPACE 1                                                 S20201
         LA    GR7,C1(GR0,GR7)         YES, ADD 1 TO KEYLEN PLUS S20201
*                                       DATA LENGTH FOR EOF      S20201
NOTTWO   EQU   *                                                 S20201
         SR    GR11,GR11               WILL HAVE KEY OVERHEAD IF ANY
         LTR   GR9,GR9                 ANY KEY
         BNZ   AKEY                    YES
         IC    GR11,OVERK              OVERHEAD IF RECORD WAS KEYED
AKEY     EQU   *
         LH    GR12,OUTDS1+C4          GET BYTES UNUSED ON THIS TRK
         TM    DEVFLAG,TOLFAC          TOLERANCE FACTOR TO BE ADDED
         BZ    NOTOLER                 NO
         MH    GR7,TOLER               MULTIPLY KL + DL BY TOLERANCE
         SRL   GR7,C9                  (KL + DL)*TOLERANCE/512
         SPACE 1
NOTOLER  EQU   *
         AR    GR7,GR13                ADD OVERHEAD
         SR    GR7,GR11                SUBTRACT KEY OVERHEAD IF NO KEY
         SR    GR12,GR7                COMPUTE THE REMAINING BYTE
         STH   GR12,OUTDS1+C4          UPDATE TRK BAL FOR WSU
         L     GR7,CURRCCW1       VIRT ADDR OF READ COUNT      @YM06434
         STCM  GR7,C7,C1(GR5)     STORE IN RD CT OF NEXT CCW   @YM06434
         LA    GR7,C8(GR7)        VIRT ADDR OF READ K/D        @YM06434
         STCM  GR7,C7,C9(GR5)     STORE IN DR K/D OF NEXT CCW  @YM06434
         B     TESTCNTX                GO TEST FOR COUNT
         SPACE 1
READDIR  EQU   *
         TM    STATUS,STAT2       READING OUTPUT DIR             A36049
         BZ    RDDIR              NO                             A36049
         TM    TAG,CTOUT          COUNT DIRECTORY BLOCKS         A36049
         BZ    RDDIR              NO                             A36049
         CLC   C8(C1,GR8),NDBTR   IS NDBTR >OR= TO 'R' OF THE    A36049
*                                 BLOCK JUST READ                A36049
         BNH   RDDIR              YES                            A36049
         MVC   NDBTR(C1),C8(GR8)  NO, UPDATE NDBTR               A36049
RDDIR    EQU   *                                                 A36049
         LA    GR7,C276(GR0,GR8)       UP POINTERS FOR 1 MORE RECORD
         LA    GR10,C276(GR0,GR7)      NEXT RECORD CURRENT + 276
         TM    FLG7,DM                 MERGING DIRECTORY
         BZ    BUF2ND                  NO-ASSUME BUFFER NOT SPLIT
BUF1ST   EQU   *
         C     GR10,ENDFST1            EXCEED END OF FIRST BUFFER
         BNH   READSMOR                NO-GET SOMEMORE
         B     LASTRCB                 YES -MARK BUFFER FLAG
         SPACE 1
BUF2ND   EQU   *
         C     GR10,END2ND2            EXCEED END OF SECOND BUFFER
         BNH   READSMOR                NO
         SPACE 1
LASTRCB  EQU   *
         MVI   C0(GR8),LASTREC+ENDPROC FLAG AS LASTREC + LAST BUFFER
         SPACE 1
         TM    STATUS,STAT2            READING OUTPUT DIRECTORY
         BZ    SWAP                    NO, CHANGE POINTERS
         TM    TAG,CTOUT               COUNT DIRECTORY BLOCKS
         BZ    SWAP                    NO, CHANGE POINTERS
         LH    GR7,DIRBCNT
         LA    GR7,C1(GR0,GR7)         UPDATE COUNT
         STH   GR7,DIRBCNT
         B     SWAP                    CHANGE POINTERS
         SPACE 1
READSMOR EQU   *
         MVI   C0(GR8),C0              CLEAR FLAG FIELD
         LR    GR8,GR7                 START NEXT RECORD
NEWBUFR  EQU   *
*        KEEP  GR8 POINTING TO START OF RECORD IN BUFFER
         LA    GR11,C4(GR0,GR8)        PASS FLAG + MBB TO COUNT CCHHR
         STCM  GR11,C7,C1(GR5)    SET RDPTR2 ADDR FOR READ CNT @YM06433
         LA    GR11,C8(GR0,GR11)
         STCM  GR11,C7,C9(GR5)    SET RDPTR2 ADDR FOR READ K/D @YM06433
         TM    STATUS,STAT2            READING OUTPUT DIRECTORY
         BZ    RESETNOP                NO
TESTCNTX EQU   *
         TM    TAG,CTOUT               COUNT DIRECTORY BLOCKS
         BO    COUNTDR                 YES, GO BUMP COUNTER
         B     RESETNOP                RESET, SWAP, RETURN
         SPACE 1
INMEMBR  EQU   *
         SR    GR7,GR7
         IC    GR7,C9(GR0,GR8)         KEY LENGTH OF MEMBER
         LR    GR10,GR7                SAVE KEY LENGTH
         MVC   WKA1(C2),C10(GR8)       SAVE DATA LENGTH
         AH    GR7,WKA1                ADD KEY + DATA LENGTH
         LA    GR7,C12(GR0,GR7)        COUNT + FLAG
         AR    GR7,GR8                 LOCATION FOR NEXT RECORD
         AH    GR10,IBLKSIZE           BLOCKING FACTOR + KEY LN
         LA    GR10,C12(GR0,GR10)      COUNT + FLAG + MBB
         AR    GR10,GR7                END OF NEXT RECORD
         TM    FLG1,STOPEND1           ONLY CAN USE FIRST BUFFER
         BO    BUF1ST                  YES
         TM    FLG1,P2FLG1             TWO BUFFERS
         BZ    BUF2ND                  NO, USE END OF FIRST PAIR
         TM    FLG1,IN2ND              IN SECOND BUFFER
         BO    BUF2ND                  YES
         C     GR10,ENDFST1            EXCEED END OF FIRST BUFFER
         BNH   READSMOR                BUFFER NOT EXCEEDED NEXT READ
         MVI   C0(GR8),LASTREC         FLAG AS LAST RECORD THIS BUFFER
         L     GR8,BEGFST2             START OF SECOND BUFFER
         OI    FLG1,IN2ND              IN SECOND BUFFER FLAG SET
         B     NEWBUFR                 READ INTO NEXT BUFFER
         TITLE 'IGG019C8- WRITE PORTION OF PCI APPENDAGE'
*                                                                     *
*****      PCI HANDLER FOR WRITING   IGG019                   *********
*                                                                     *
IGG019   EQU   *
         TM    TAG,TAG6                VALIDITY CHECKING
         BO    VALCHK                  YES
         MVI   WKA1+C1,C16             UPDATE INCREMENT FOR      S20201
*                                       VALID PCI INTERRUPT      S20201
*                                       TESTING - WRITE          S20201
         SPACE 1                                                 S20201
         L     GR5,WRPTR1              LOAD POINTER TO 'CURRENT' S20201
*                                        CCW CHAIN               S20201
         LA    GR7,C8(GR0,GR5)         FIND ACCEPTABLE LOWER     S20201
*                                        LIMIT OF CSW AT PCI     S20201
*                                        INTERRUPT               S20201
         BAL   GR9,PCIVALCK            CHECK FOR VALID CSW       S20201
         SPACE 1                                                 S20201
         LRA   GR11,C0(GR5)            TRANSLATE TO REAL        YL026VD
         STCM  GR11,C7,CCW3+C1         SET UP RESTART ADDRESS  @YM06433
         NI    C4(GR5),XF7             RESET PCI FOR RESTART   @YM06433
         L     GR6,CURRCCW1         GET ADDRESS OF LAST WRITE  @YM04848
         LA    GR6,C0(GR0,GR6)         CLEAR OP CODE
         TM    TAG,TAG1                DIRECTORY
         BZ    NOTDIRTY                NO-XFER
         LA    GR7,C12                 GO TO
         SR    GR6,GR7                 START OF BUFFER
         MVC   LASTGB(C8),LASTGBSV     UPDATE LASTGB FIELD FOR USE
*                                        BY IEBIOE IF AN I/O ERROR
*                                        OCCURS
         MVC   LASTGBSV(C8),LASTADDR   SAVE VALUE OF LASTADDR AT ENTRY
*                                        TO IGG019C8
         MVC   IOBMCCHH(C8,GR2),LASTADDR MOVE THIS RECORD IN RESTART
         B     TESTBUF            SEE IF THIS IS THE LAST RECORD
NOTDIRTY EQU   *
         LA    GR7,C4
         SR    GR6,GR7                 BACK UP TO FLAG FIELD
         MVC   IOBMCCHH(C8,GR2),LASTADDR MOVE LAST REC WRITTEN ADDRESS
         MVC   LASTADDR(C8),C1(GR6)    THIS RECORD BEING WRITTEN
TESTBUF  EQU   *
         TM    C0(GR6),ENDPROC+LASTREC VERY LAST RECORD
         BZ    THISBUF                 NOT LAST RECORD IN ANY BUFFER
         BO    SWAPPTRS                YES                     @YM06433
         L     GR6,BEGFST2             GET START OF SECOND BUFFER
         B     RECADDRS                SET UP WRITE
         SPACE 1
THISBUF  EQU   *
         MVC   WKA1(C2),C10(GR6)       SAVE DATA LENGTH
         SR    GR9,GR9
         IC    GR9,C9(GR0,GR6)         GET KEY LENGTH
         AH    GR9,WKA1                ADD KEY + DATA LENGTH
         LA    GR9,C12(GR0,GR9)        ADD COUNT + FMBB LENGTH
         AR    GR6,GR9                 START OF NEXT RECORD
         SPACE 1
RECADDRS EQU   *
         MVC   WKA1(C2),C10(GR6)       SAVE DATA LENGTH
         SR    GR9,GR9
         IC    GR9,C9(GR0,GR6)         KEY LENGTH
         AH    GR9,WKA1                ADD KEY + DATA LENGTH
         L     GR5,WRPTR2              NEXT CCW
         TM    TAG,TAG1                WRITING DIRECTORY
         BO    WRTNOCT                 YES, WRITE ONLY KEY/DATA
         LA    GR9,C8(GR0,GR9)         COUNT LENGTH
         LA    GR8,C4(GR0,GR6)         START OF COUNT NEXT RECORD
         B     STRCNT                  STORE ADDRESS AND COUNT
WRTNOCT  EQU   *
         LA    GR8,C12(GR0,GR6)        START OF DIRECTORY KEY NEXT REC
STRCNT   EQU   *
         STH   GR9,C6(GR0,GR5)         STORE COUNT FOR NEXT WRITE
         ST    GR8,C0(GR0,GR5)         WHERE TO WRITE RECORD FROM
         TM    C0(GR6),WRTOVR          OVERFLOW SEGMENT
         BZ    REGWRT                  NO
         MVI   C0(GR5),X01             WRITE SPECIAL OP CODE
         B     SETFLGS            GO SET OTHER INDICATORS
         SPACE 1
REGWRT   EQU   *
         TM    TAG,TAG1                WRITING DIRECTORY
         BZ    WRCKDOP                 NO, WRITE COUNT KEY DATA
         MVI   C0(GR5),X0D             WRITE KEY DATA OP CODE
         MVC   LASTADDR(C8),C1(GR6)    THIS RECORD BEING WRITTEN
         B     SETFLGS                 RESTORE NEXT CCWS
         SPACE 1
WRCKDOP  EQU   *
         MVI   C0(GR5),X1D             WRITE COUNT KEY DATA OP CODE
SETFLGS  EQU   *
         MVI   C4(GR5),X68             RESTORE PCI
         LRA   GR8,C16(GR0,GR5)       LOAD POINTER TO STOP CCW @YM06433
         ST    GR8,C8(GR0,GR5)         STORE IN TIC CCW SLOT     S20201
         MVI   C8(GR5),X08             RESTORE TIC OP CODE
* SET UP TIC FROM SIDEQ,MT TO NEXT WRITE WHETHER NEEDED OR NOT @YM06433
         L     GR8,WRPTR2         GET ADDR OF NEXT WRITE CCW   @YM06433
         LA    GR8,C0(GR8)        CLEAR HIGH ORDER BYTE        @YM06433
         LRA   GR8,C0(GR8)        TRANSLATE TO REAL            @YM06433
         STCM  GR8,C7,WSCH2+C1    STORE IN SIDEQ,MT TIC FORWD  @YM06433
*        NOP OR RS WILL STOP EXECUTION IF PCI MISSED             S20201
         LA    GR8,WSCH                PTR TO SID M/T CCW        S20201
         ST    GR8,WRTICPTR          SAVE TO SET UP PROPER TIC @YM06433
         TM    TAG,TAG1                WRITING DIRECTORY         S20201
         BO    SWAPPTRS                YES, LEAVE R ALONE      @YM06433
         CLI   C8(GR6),X01             NEXT RECORD R1, IF SO     S20201
*                                        ON NEXT TRACK           S20201
         BNE   SAMETRK                 NO                        S20201
         MVC   LASTADDR(C8),C1(GR6)    THIS RECORD TO BE WRITTEN
         MVI   LASTADDR+C7,C0          MAKE R=0 FOR HEAD SWITCH
         B     SWAPPTRS                SET UP REST OF CCWS     @YM06433
         SPACE 1
SAMETRK  EQU   *
         L     GR8,WRPTR2              CCW TO START WITH
         ST    GR8,WRTICPTR          SAVE TO SET UP PROPER TIC @YM06433
         SPACE 1
SWAPPTRS EQU   *
         L     GR9,WRPTR1              CCW JUST USED           @YM06433
         L     GR8,WRPTR2              CCW TO START WITH
         STM   GR8,GR9,WRPTR1          SWAP POINTERS
         LR    GR9,GR6            SAVE ADDRESS OF FLAG FIELD   @YM06433
         TM    TAG,TAG1           WRITING DIRECTORY            @YM06433
         BZ    DOINGMEM           NO, WRITING MEMBER           @YM06433
         LA    GR6,C8(GR6)        BUMP FOR SKIPPED COUNT FIELD @YM06433
DOINGMEM LA    GR6,C4(GR6)             BUMP TO COUNT FIELD     @YM06433
         L     GR7,CURRCCW1                                    @YM04848
         STM   GR6,GR7,CURRCCW1                                @YM04848
         L     GR2,IALPTR2                                     @YM06433
         L     GR3,IALPTR1                                     @YM06433
         STM   GR2,GR3,IALPTR1         SWAP IAL LIST POINTERS  @YM06433
         TM    C0(GR9),ENDPROC+LASTREC VERY LAST RECORD
         BO    GENRETRN   DONT TRANSLATE OR SET TIC, RETURN    @YM06433
         SPACE 1
         TM    AOS,PCI       IF PCI BIT OFF, DONT TRANSLATE OR @YM04451
         BZ    WASVIO        TIC, BUT UPDATE PCI COUNTS        @YM04451
         SPACE 1
*
* AT THIS POINT, WRPTR1 (GR8) POINTS AT NEXT CCW STRING TO BE  @YM06433
* TRANSLATED, CURRCCW1 (GR6) CONTAINS THE NEXT VIRTUAL DATA    @YM06433
* ADDRESS, AND IOBVRPTR+8 (GR2) CONTAINS THE ADDRESS OF THE    @YM06433
* ASSOCIATED INDIRECT ADDRESS LIST                             @YM06433
*
         NI    C4(GR8),X'FF'-X'04' SET IAL LIST NOT PRESENT    @YM06433
         LRA   GR9,C0(GR6)        TRANSLATE DATA ADDR TO REAL  @YM06433
         LA    GR6,C0(GR6)        CLEAR HIGH ORDER BYTE        @YM06433
         LR    GR7,GR6            VIRTUAL DATA ADDRESS         @YM06433
         AH    GR7,C6(GR8)        ADD LENGTH OF READ           @YM06433
         BCTR  GR7,C0
         SRL   GR6,11             STARTING PAGE NUMBER         @YM06433
         SRL   GR7,11             ENDING PAGE NUMBER           @YM06433
         SR    GR7,GR6            IF MORE THAN 1 PAGE NEED IAL @YM06433
         BZ    EXTIALWR           BRANCH IF ONLY ONE PAGE      @YM06433
         ST    GR9,C8(GR2)        PUT FIRST ENTRY INTO IAL     @YM06433
         LA    GR3,C8(GR2)        GET POINTER TO IAL LIST      @YM06433
         SLL   GR6,11             ADDR OF 1ST BYTE ON 1ST PAGE @YM06433
EXTLOOPW LA    GR6,D2048(GR6)     ADDR OF LAST BYTE THIS PAGE  @YM06433
         LA    GR3,C4(GR3)        BUMP TO NEXT IAL ENTRY       @YM06433
         LRA   GR9,C0(GR6)        REAL ADDR OF NEXT PAGE       @YM06433
         ST    GR9,C0(GR3)        STORE REAL ADDR IN NEXT IAL  @YM06433
         BCT   GR7,EXTLOOPW       LOOP TO TRANSLATE NEXT ENTRY @YM06433
         OI    C4(GR8),X'04'      SET IAL PRESENT INTO WRT CCW @YM06433
         LRA   GR9,C8(GR2)        TRANSLATE ADDR OF IAL LIST   @YM06433
EXTIALWR STCM  GR9,C7,C1(GR8)     INSERT REAL ADDR OF IAL LIST @YM06433
         SPACE 1
         MVC   C16(C4,GR8),RSECTOR PUT VIRT ADDR IN NEXT NO-OP @YM06435
         L     GR5,WRTICPTR       ADDR OF CCW TO WHICH TO TIC  @YM06433
         L     GR6,WRPTR2         ADDR OF CURRENT WRT C/K/D    @YM06433
         CLI   C0(GR6),X01             WAS OP CODE OF CCW JUST @YM06433
*                                       EXECUTED A WRITE SPECIAL A35473
*                                       C/K/D                    A35473
         BE    GENRET1                 YES, DON'T INCREMENT    @YM06433
*                                        COUNTER                 A35473
         L     GR9,WRPCICNT            PCI COUNT               @YM06433
         LA    GR9,C1(GR0,GR9)                                 @YM06433
         ST    GR9,WRPCICNT            UPDATE PCI COUNT        @YM06433
         B     GENRET1                 RETURN TO IOS           @YM06433
         SPACE 1
WASVIO   EQU   *                                               @YM04451
         MVC   C16(C4,GR8),RSECTOR PUT VIRT ADDR IN NEXT NO-OP @YM04451
         L     GR6,WRPTR2         ADDR OF CURRENT WRT C/K/D    @YM04451
         CLI   C0(GR6),X01             WAS OP CODE OF CCW JUST @YM04451
*                                       EXECUTED A WRITE       @YM04451
*                                       SPECIAL C/K/D          @YM04451
         BE    GENRETRN                YES, DON'T INCREMENT    @YM04451
*                                        COUNTER               @YM04451
         L     GR9,WRPCICNT            PCI COUNT               @YM04451
         LA    GR9,C1(GR0,GR9)                                 @YM04451
         ST    GR9,WRPCICNT            UPDATE PCI COUNT        @YM04451
         B     GENRETRN                RETURN TO IOS           @YM04451
         EJECT
VALCHK   EQU   *                       READ BACK VALIDITY CHECKING
         SPACE 1                                                 S20201
         L     GR6,RDCKPTR1            LOAD POINTER TO 'CURRENT' S20201
*                                        CCW CHAIN               S20201
         LA    GR7,C16(GR0,GR6)        FIND ACCEPTABLE LOWER     S20201
*                                        LIMIT OF CSW AT PCI     S20201
*                                        INTERRUPT               S20201
         BAL   GR9,PCIVALCK            CHECK FOR VALID CSW       S20201
         SPACE 1                                                 S20201
         L     GR7,RDCKPTR1
         LA    GR5,C8(GR0,GR7)    GET PTR TO RKD CCW             A34092
         LRA   GR9,C0(GR5)        GET REAL ADDR OF RD K/D CCW  @YM06448
         STCM  GR9,C7,CCW3+C1     STORE IN TIC CCW             @YM06433
         MVC   IOBCCHHR(C5,GR2),LASTADDR  UPDATE IOB SEEK ADDR   A34092
         NI    C12(GR7),XF7            RESET PCI               @YM06433
         L     GR9,WRPCICNT            RECORD COUNT
         BCTR  GR9,GR0                 DECREMENT BY 1
         ST    GR9,WRPCICNT            STORE DECREMENTED COUNT
         LTR   GR9,GR9                 DID LAST RECORD (COUNT = ZERO)
         BNP   GENRETRN           YES,GET OUT                   OY01184
         L     GR6,RDCKPTR2                                    @YM06433
         MVI   C12(GR6),X78            RESTORE PCI             @YM06433
         MVC   C16(C4,GR6),RSECTOR     REPLACE NOP WITH RS CCW   S20201
NOTRPS4  EQU   *                                                 S20201
         STM   GR6,GR7,RDCKPTR1
         TM    AOS,PCI            IF PCI BIT OFF, DONT         @YM04451
         BZ    GENRETRN           TRANSLATE OR TIC, RETURN     @YM04451
         L     GR5,RDCKPTR1       GET ADDRESS OF NEXT CCW      @YM06433
         L     GR6,RDCKPTR2       GET ADR READ COUNT, CURR CCW @YM06433
         MVC   C1(C3,GR5),C1(GR6)     MOVE REAL ADDRESS IN CCW @YM06434
         MVC   C9(C3,GR5),C9(GR6)     MOVE REAL ADDRESS IN CCW @YM06434
         LA    GR6,C8(GR6)        BUMP TO READ KEY/DATA ADDR   @YM06433
         B     GENRET1                PRE-RETURN TO IOS
         EJECT                                                   S20201
**************************************************************** S20201
*                                                              * S20201
*    THIS ROUTINE IS USED TO MAKE SURE THAT IF A CCW WITH THE  * S20201
*  PCI FLAG ON IS EXECUTED VIA COMMAND RETRY, THE INTERRUPT    * S20201
*  WILL BE IGNORED                                             * S20201
*                                                              * S20201
**************************************************************** S20201
         SPACE 2                                                 S20201
PCIVALCK EQU   *                                                 S20201
         L     GR8,CSW(GR0,GR2)        LOAD CSW                 YL026VD
         LA    GR8,C0(GR0,GR8)         CLEAR HIGH ORDER BYTE     S20201
         CR    GR8,GR7                 CSW LESS THAN LOWER LIMIT S20201
         BL    GENRETRN                YES, IGNORE THIS PCI      S20201
         AH    GR7,WKA1                FIND ACCEPTABLE UPPER     S20201
*                                        LIMIT OF CSW AT PCI     S20201
*                                        INTERRUPT               S20201
         CR    GR8,GR7                 CSW GREATER THAN UPPER    S20201
*                                        LIMIT                   S20201
         BH    GENRETRN                YES, IGNORE THIS PCI      S20201
         BR    GR9                     RETURN, EVERYTHING IS OK  S20201
         EJECT
ID       DC    CL8'IGG019C8'      APPENDAGE ID
OVERFLOW EQU   X'20'                   SETTING FOR OVERFLOW DEVICE DCB
         DS    0F                 FULL WORD ALIGNMENT
PATCHLEN EQU (*-IGG019C8)/20      5 PER CENT PATCH AREA LENGTH
PATCH    DC    XL(PATCHLEN)'00'   5 PER CENT PATCH AREA          A41780
         DS    0D                 DOUBLE WORD ALIGNMENT
         DCBD  DSORG=PS
         EJECT
IEBMCA   DSECT
         IEBMCA
         EJECT
IECDSECT DSECT
         IECDSECT
IOBMCCHH EQU   DXDAADDR-DXIOB          MBBCCHHR FIELD IN IOB
IOBCCHHR EQU   DXDAADDR-DXIOB+3        CCHHR FIELD IN IOB
IOBMCCHR EQU   DXDAADDR-DXIOB+7        RECORD FIELD IN IOB
DCB4IOB  EQU   IOBDCBPT-DXIOB-1        POINTER TO DCB IN IOB
DEB      EQU   DXDEB                   REFERENCE START OF DEB
DEBEXSCL EQU   DXDEBAPP                EXTENT SCALE (4 FOR DA)
DEBSTRCC EQU   DXDEBSCC                CCHH START OF AN EXTENT
DEBENDHH EQU   DXDEBEHH                END OF AN EXTENT HH
DISKADR  EQU   DCBFDAD-IHADCB          FDAD IN DCB (MBBCCHHR)
         SPACE 1
DEVTAB   DSECT
*
*     DIRECT ACCESS DEVICE TABLE OVERLAY  OUTCHAR IN IEBMCA           *
*                                                                     *
DEVCODE  DS    F                       DEVICE CODE FROM UCB           *
MAXSIZE  DS    F                       MAXIMUM SIZE UNKEYED BLOCK     *
MAXCC    DS    H                       NUMBER OF CYLINDER             *
MAXHH    DS    H                       NUMBER OF TRACKS               *
TRKCAP   DS    H                       MAXIMUM TRACK LENGTH           *
OVERI    DS    XL1                     OVERHEAD NOT LAST RECORD       *
OVERL    DS    XL1                     OVERHEAD LAST RECORD           *
OVERK    DS    XL1                     OVERHEAD REDUCTION FOR NON-KEY *
DEVFLAG  DS    XL1                     APPLY TOLERANCE FACTOR NOT LAST*
TOLER    DS    H                       GAP LENGTH CALCULATE TOLERANCE *
TOLFAC   EQU   X'01'                   TOLERANCE FACTOR TO BE ADDED   *
HALFOVER EQU   X'08'                                             S20201
*                                                                     *
*       END OF DEVTAB OVERLAY                                         *
*                                                                     *
         SPACE 1
         END
