         TITLE 'IEBRSAM - IEBCOPY READ ROUTINE FOR UNLOADED DATA SETS'
         LCLA  &T,&SPN                                            0001
.@001    ANOP                                                     0001
IEBRSAM  CSECT ,                                                  0001
         STM   @E,@C,12(@D)                                       0001
         BALR  @B,0                                               0001
@PSTART  DS    0H                                                 0001
         USING @PSTART+00000,@B                                   0001
         ST    @D,@SAV001+4                                       0001
         LA    @F,@SAV001                                         0001
         ST    @F,8(0,@D)                                         0001
         LR    @D,@F                                              0001
******************************APARS FIXED******************************
*                                                                     *
*A263500-263800,270500,433500                @YA14033-@XA15454-@ZA13782
*                                                                     *
***********************************************************************
         USING IEBMCA,MCABASE          ESTABLISH ADDRESSABILITY
         LA    DCBA,LOADDCB
         USING IHADCB,DCBA
         B     AROUND                                          @ZA13782
         DC    C'IEBRSAM-OZ13782'                              @ZA13782
         DS    0F                                              @ZA13782
AROUND   EQU   *                                               @ZA13782
         DS    0H
*         WSFLAG(5)='1'B;               /* INDICATE READING           *
         OI    WSFLAG,B'00001000'                                 0036
*         FLG2(3)='0'B;                 /* ASURE FLAG INDIC NO MORE TO
*                                          READ IS OFF                *
         NI    FLG2,B'11011111'                                   0037
*         RDNXT=READNEXT-8;             /* PTR TO WHERE TO START READ *
         L     @F,READNEXT                                        0038
         SH    @F,@D1                                             0038
         ST    @F,RDNXT                                           0038
*         RDNXT=RDNXT&'00FFFFFF'X;  /* CLEAR HIGH ORDER BYTE @ZA13782 *
         NC    RDNXT(4),@X3                                       0039
*
*
* /********************************************************************
* /* NOW A BLOCK OF DATA CAN BE READ INTO THE BUFFER                  *
* /********************************************************************
*
* RSAM0006: CALL READBLK;
RSAM0006 BAL   @E,READBLK                                         0040
*
* /********************************************************************
* /* EACH RECORD READ IS TESTED FOR END OF DATA AT THIS POINT         *
* /********************************************************************
* RSAM0012:;
*         /*----------------------------------------------------------*
*         /* NOW THAT A RECORD HAS BEEN READ INTO THE BUFFER,A TEST IS*
*         /* MADE TO SEE IF THERE ARE MORE DIRECTORY BLOCKS TO BE READ*
*         /* IF DATA LENGTH OF THE DIRECTORY BLOCK IS ZERO THERE      *
*         /* IS NO MORE TO BE READ OTHERWISE AN OTHER BLOCK EXISTS    *
*         /*----------------------------------------------------------*
*
*         IF DATA ^= '0000'X            /*  IS KEY + DATA LENGHT ZERO *
*            THEN                       /* NO                         *
RSAM0012 L     @1,REDAD                                           0042
         CLC   10(2,@1),@X4                                       0042
         BC    08,@9FF                                            0042
*              DO;                      /* PREPARE FOR TESTING NEXT
*                                          BLOCK AND POSSIBLY READING
*                                          MORE BLOCKS                *
*
*           /*--------------------------------------------------------*
*           /* NOW THERE IS A POINTER TO THE NEXT DIR BLOCK,A TEST IS *
*           /* MADE TO SEE IF THAT BLOCK HAS ALREADY BEEN READ        *
*           /*--------------------------------------------------------*
*
*           IF REDAD+276 < BLKEX        /* READ ANOTHER DIR BLOCK     *
*              THEN                     /* YES                        *
         LA    @F,276                                             0044
         A     @F,REDAD                                           0044
         C     @F,BLKEX                                           0044
         BC    10,@9FE                                            0044
*                DO;
*                  REDAD=REDAD + 276;   /* POINT TO NEXT DIR BLOCK    *
         LA    @F,276                                             0046
         A     @F,REDAD                                           0046
         ST    @F,REDAD                                           0046
*                  GO TO RSAM0012;      /* SEE IF IT IS THE LAST      *
         BC    15,RSAM0012                                        0047
*                END;
*              ELSE;                    /* NO  READ IT                *
@9FE     EQU   *                                                  0049
*                  RDEND = RDNXT +      /* POINT TO END OF NEXT POSS  *
*                         DCBBLKSI;     /* BLOCK IN THE BUFFER        *
@9FD     LH    @F,DCBBLKSI                                        0050
         A     @F,RDNXT                                           0050
         ST    @F,RDEND                                           0050
*
*           /*--------------------------------------------------------*
*           /* NOW AN OTHER DIR BLOCK HAS TO BE READ,A TEST IS MADE TO*
*           /* SEE WHETHER IT WILL FIT IN THE BUFFER                  *
*           /*--------------------------------------------------------*
*
*           IF RDEND <= END2ND2         /* WILL NEXT READ FIT IN BUF  *
*              THEN                     /* YES                        *
         L     @F,END2ND2                                         0051
         C     @F,RDEND                                           0051
*                  GO TO RSAM0006;      /* READ ANOTHER BLOCK         *
         BC    10,RSAM0006                                        0052
         BC    15,@9FC                                            0055
*              ELSE;                    /* NO  HAVE THIS BUF PROCESSED*
*              END;
*            ELSE                       /* YES KEY AND DATA LEN ZERO  *
*                FLG2(3)='1'B;          /* INDIC NO MORE TO READ      *
@9FF     OI    FLG2,B'00100000'                                   0055
*         F='80'X+ '40'X;               /* INDIC LAST REC IN ANY BUF  *
@9FC     LA    @F,X'40'                                           0056
         LA    @0,X'80'                                           0056
         AR    @F,@0                                              0056
         L     @1,REDAD                                           0056
         STC   @F,0(0,@1)                                         0056
*         RETURN;                       /* GO BACK TO CALLER          *
         BC    15,@EL01                                           0057
* /********************************************************************
* /* AT THIS ENTRY OF THE READ ROUTINE MEMBER DATA IS READ INTO THE   *
* /* BUFFER UNTIL THE BUFFER IS FILLED OR UNTIL THE END OF THE MEMBER.*
* /* ALSO THE NOTE LIST IF ANY IS PLACED INTO THE NOTE LIST AREA.     *
* /********************************************************************
*
* IEBRSAM1: ENTRY;
IEBRSAM1 STM   @E,@C,12(@D)                                       0058
         BALR  @B,0                                               0058
         LA    @F,IEBRSAM1-IEBRSAM                                0058
         SR    @B,@F                                              0058
         ST    @D,@SAV001+4                                       0058
         LA    @F,@SAV001                                         0058
         ST    @F,8(0,@D)                                         0058
         LR    @D,@F                                              0058
*
*           WSFLAG(5)='1'B;             /* INDICATE READING           *
@9FB     OI    WSFLAG,B'00001000'                                 0059
*           SECAV='0'B;                 /* INDIC 2ND BUF NOT AVAIL    *
         NI    SECAV,B'01111111'                                  0060
*           FLG2(3)='0'B;               /* ASSURE FLAG INDIC NO MORE
*                                          TO READ IS OFF             *
         NI    FLG2,B'11011111'                                   0061
*
*           /**********************************************************
*           /* TO BE ABLE TO GET THE KEY LENGTH AND THE DCBFDAD FIELD *
*           /* OF THE INPUT DCB REGISTER 6 MUST CONTAIN THE INPUT     *
*           /* DCB ADDRESS.                                           *
*           /**********************************************************
*
*           GENERATE;
         LA    DCBA,INDCB              ADDRESS OF INPUT DCB
         DS    0H
*           FDAD=DCBFDAD;               /* SAVE VALUE OF DCBFDAD FOR
*                                          THIS MEMBER                *
         MVC   FDAD(8),DCBFDAD                                    0063
*           BLKRD=IBLKSIZE +            /* MAXIMUM SIZE OF INPUT BLOCK*
*                  DCBKEYLE +           /* IS INPUT BLOCKSIZE + KEY   *
*                   12 +                /* LENGTH + COUNT LENGTH +    *
*                    8;                 /* RECORD DESCRIPTOR LENGTH   *
         LA    @F,8                                               0064
         AH    @F,@D2                                             0064
         SR    @0,@0                                              0064
         IC    @0,DCBKEYLE                                        0064
         AR    @F,@0                                              0064
         AH    @F,IBLKSIZE                                        0064
         ST    @F,BLKRD                                           0064
*
*           /**********************************************************
*           /* NOW THERE IS A NEED TO FIND OUT IF THE OUTPUT DATA     *
*           /* SET IS TRACK OVERFLOW AS THEN ONLY THE FIRST BUFFER MAY*
*           /* BE USED.                                               *
*           /**********************************************************
*
*           GENERATE;
         LA    DCBA,OUTDCB             DCB OF OUTPUT PDS
         DS    0H
*           RECFMO=DCBRECFM;            /* SAVE RECORD FORMAT         *
         MVC   RECFMO(1),DCBRECFM                                 0066
*
*           /**********************************************************
*           /* NOW IT IS NECESSARY TO KNOW THE BLOCKSIZE OF THE DATA  *
*           /* SET TO BE LOADED.                                      *
*           /**********************************************************
*
*           GENERATE;
         LA    DCBA,LOADDCB            ADDRESS OF LOAD DCB
         DS    0H
*
*           /*--------------------------------------------------------*
*           /* NOW THE BIGGER OF THE MAXIMUM INPUT BLOCK AND THE      *
*           /* UNLOADED DATA SET'S BLOCKSIZE IS NEEDED TO BE ABLE TO  *
*           /* DETERMINE WHETHER THE NEXT BLOCK TO BE READ WILL FIT   *
*           /* INTO THE BUFFER.                                       *
*           /*--------------------------------------------------------*
*
*           IF BLKRD < DCBBLKSI         /* PDS RECORD LESS THAN
*                                          UNLOADED DS BLOCKSIZE      *
*              THEN                     /* YES                        *
         LH    @F,DCBBLKSI                                        0068
         C     @F,BLKRD                                           0068
         BC    12,@9FA                                            0068
*                  BLKRD=DCBBLKSI;      /* USE UNLOADED DS BLOCKSIZE  *
         ST    @F,BLKRD                                           0069
         BC    15,@9F9                                            0070
*              ELSE;                    /* NO - USE PDS BLOCK LENGTH  *
@9FA     EQU   *                                                  0070
*
*           /**********************************************************
*           /* NOW BUFFER DELIMITATIONS HAVE TO BE MADE TO READ IN    *
*           /* MEMBER DATA.                                           *
*           /**********************************************************
*
*           /*--------------------------------------------------------*
*           /* A TEST IS MADE TO SEE IF BOTH BUFFERS ARE AVAILLABLE   *
*           /* FOR MEMBER DATA OR WHETHER ONE HAS TO BE RESERVED FOR  *
*           /* FUTURE PROCESSING(REBLOCKING-TRACK OVERFLOW )          *
*           /*--------------------------------------------------------*
*
*           IF FLG1(3)='0'B & RECFMO(3)='0'B         /* ALL BUF AVAIL *
*              THEN                     /* YES                        *
@9F9     TM    FLG1,B'00100000'                                   0071
         BC    05,@9F8                                            0071
         TM    RECFMO,B'00100000'                                 0071
         BC    05,@9F7                                            0071
*
*             /*------------------------------------------------------*
*             /* BOTH BUFFERS ARE AVAILLABLE,A TEST IS NOW MADE TO SEE*
*             /* IF THEY ARE CONTIGUOUS IN WHICH CASE THEY CAN BE     *
*             /* CONSIDERED AS ONE IF NOT THEY HAVE TO BE FILLED      *
*             /* SEPERATELY                                           *
*             /*------------------------------------------------------*
*
*             IF FLG1(1)='1'B           /* ARE BUFFERS CONTIGUOUS     *
*                THEN                   /* NO                         *
         TM    FLG1,B'10000000'                                   0072
         BC    12,@9F6                                            0072
*
*               /*----------------------------------------------------*
*               /* NOW A TEST HAS TO BE MADE TO SEE IF PROCESSING     *
*               /* ALREADY OCCURS IN THE 2ND BUFFER.                  *
*               /*----------------------------------------------------*
*
*               IF FLG1(2)='0'B         /* PROCESS IN 2ND BUFFER      *
*                  THEN                 /* NO                         *
         TM    FLG1,B'01000000'                                   0073
         BC    05,@9F5                                            0073
*                    DO;                /* FILL 1ST BUFFER            *
*                      BUFEND=ENDFST1;  /* END FOR FILLING DATA       *
         MVC   BUFEND(4),ENDFST1                                  0075
*                      SECAV='1'B;      /* INDIC SEC BUFFER AVAILLABLE*
         OI    SECAV,B'10000000'                                  0076
         BC    15,@9F4                                            0078
*                    END;
*                  ELSE                 /* YES- PROCESS IN 2ND        *
*                      BUFEND=END2ND2;  /* END FOR FILLING DATA       *
@9F5     MVC   BUFEND(4),END2ND2                                  0078
*                ELSE                   /* YES- BUFFERS ARE CONTIG    *
*                    BUFEND=END2ND2;    /* END OF BUFFER AREA IS END
*                                          OF SECOND BUFFER           *
         BC    15,@9F3                                            0079
@9F6     MVC   BUFEND(4),END2ND2                                  0079
*              ELSE                     /* NO - FILL 1 BUF ONLY       *
*                  BUFEND=ENDFST1;      /* SET END OF 1ST BUFFER      *
         BC    15,@9F2                                            0080
@9F7     EQU   *                                                  0080
@9F8     MVC   BUFEND(4),ENDFST1                                  0080
*
* /********************************************************************
* /* NOW BEFORE READING A BLOCK OF DATA THE READ ADDRESS IS SET TO    *
* /* EICHT BYTES BEFORE THE BUFFER AREA                               *
* /********************************************************************
*
* RSAM1003:  RDNXT=READNEXT-8;          /* PTR TO WHERE TO START READ *
@9F2     EQU   *                                                  0081
RSAM1003 L     @F,READNEXT                                        0081
         SH    @F,@D1                                             0081
         ST    @F,RDNXT                                           0081
*         RDNXT=RDNXT&'00FFFFFF'X;  /* CLEAR HIGH ORDER BYTE @ZA13782 *
         NC    RDNXT(4),@X3                                       0082
*
* /********************************************************************
* /* NOW THAT THE BUFFER DELIMITATIONS ARE SET UP, A BLOCK OF DATA    *
* /* CAN BE READ INTO THE BUFFER                                      *
* /********************************************************************
*
* RSAM1006:  CALL READBLK;              /*  GO READ A BLOCK OF DATA   *
RSAM1006 BAL   @E,READBLK                                         0083
*
*           /*--------------------------------------------------------*
*           /* A BLOCK OF DATA IS IN THE BUFFER, A TEST HAS TO BE MADE*
*           /* TO SEE IF THIS MEMBER HAS A NOTE LIST.                 *
*           /*--------------------------------------------------------*
*
*           IF F(1:3)='111'B            /* IS IT A NOTE LIST          *
*              THEN                     /* YES                        *
         L     @1,REDAD                                           0084
         TM    0(@1),B'11100000'                                  0084
         BC    12,@9F1                                            0084
*                DO;                    /* MOVE IT TO NOTE LIST AREA  *
*                  CNT=1;               /* FIRST BYTE TO MOVE         *
         LA    @F,1                                               0086
         STH   @F,CNT                                             0086
*                  BYTRD=BLKEX - REDAD; /* LENGTH OF NOTE LIST        *
         L     @F,BLKEX                                           0087
         S     @F,REDAD                                           0087
         STH   @F,BYTRD                                           0087
*
* /********************************************************************
* /* AS ONLY 256 BYTES CAN BE MOVED IN ONE INSTRUCTION AND AS THE     *
* /* NOTE LIST CAN BE LONGER A LOOP IS MADE TO MOVE A MAXIMUM OF      *
* /* 256 BYTES AT A TIME WHENEVER THIS IS NECESSARY                   *
* /********************************************************************
*
* RSAM1007:;                             /* LOOP TO MOVE NOTE LIST    *
*             /*------------------------------------------------------*
*             /* TEST WETHER THE NUMBER OF BYTES TO MOVE IS BIGGER    *
*             /* THAN 256                                             *
*             /*------------------------------------------------------*
*             IF BYTRD > 256            /* TOO MUCH FOR ONE MOVE      *
*               THEN                    /* YES                        *
RSAM1007 LA    @F,256                                             0089
         CH    @F,BYTRD                                           0089
         BC    10,@9F0                                            0089
*                  DO;                  /* MOVE 256 AT A TIME         *
*                    NOTE(CNT:CNT+256-1)=       /* NOTE LIST WORK AREA*
*                       INAREA(CNT:CNT+256-1);       /* BUFFER AREA   *
         LH    @1,CNT                                             0091
         L     @5,REDAD                                           0091
         LA    @E,0(@1,@5)                                        0091
         BCTR  @E,0                                               0091
         LH    @7,@D3                                             0091
         AH    @7,@D4                                             0091
         AH    @7,CNT                                             0091
         SR    @7,@1                                              0091
         L     @C,ADNL                                            0091
         LA    @A,0(@1,@C)                                        0091
         BCTR  @A,0                                               0091
         EX    @7,@MVC                                            0091
*                    CNT=CNT + 256;     /* UPDATE MOVE ADDRESS        *
         LA    @F,256                                             0092
         AH    @F,CNT                                             0092
         STH   @F,CNT                                             0092
*                    BYTRD=BYTRD - 256;     /* BYTES LEFT TO MOVE     *
         LH    @F,BYTRD                                           0093
         SH    @F,@D4                                             0093
         STH   @F,BYTRD                                           0093
*                    GO TO RSAM1007;    /* SEE IF MORE TO MOVE        *
         BC    15,RSAM1007                                        0094
*                  END;
*               ELSE;                   /* NO LESS THAN 256 TO MOVE   *
@9F0     EQU   *                                                  0096
*                  NOTE(CNT:CNT+BYTRD-1)=  /* NOTE LIST WORK AREA     *
*                  INAREA(CNT:CNT+BYTRD-1);  /* NOTE LIST IN BUFFER   *
@9EF     LH    @1,CNT                                             0097
         L     @5,REDAD                                           0097
         LA    @E,0(@1,@5)                                        0097
         BCTR  @E,0                                               0097
         LH    @7,@D3                                             0097
         AH    @7,BYTRD                                           0097
         AH    @7,CNT                                             0097
         SR    @7,@1                                              0097
         L     @C,ADNL                                            0097
         LA    @A,0(@1,@C)                                        0097
         BCTR  @A,0                                               0097
         EX    @7,@MVC                                            0097
*                  GO TO RSAM1003;      /* GO TO READ THE MEMBER DATA *
         BC    15,RSAM1003                                        0098
*                END;
*              ELSE;                    /* NO - IT IS MEMBER DATA     *
@9F1     EQU   *                                                  0100
*
*           /*--------------------------------------------------------*
*           /* NOW THAT A BLOCK OF DATA HAS BEEN READ INTO THE BUFFER *
*           /* A TEST IS MADE TO SEE IF IT IS THE MEMBER THAT IS      *
*           /* NEEDED BY COMPARING THE COUNT FIELDS.                  *
*           /*--------------------------------------------------------*
*
*           IF MBBCCHHR <= FDAD         /* IS THIS THE WANTED DATA    *
*              THEN                     /* NO                         *
@9EE     L     @1,REDAD                                           0101
         CLC   1(8,@1),FDAD                                       0101
*                  GO TO RSAM1003;      /* GO READ NEXT DATA BLOCK    *
         BC    12,RSAM1003                                        0102
*              ELSE                     /* YES - WANTED MEMBER DATA   *
*                  GO TO RSAM1012;      /* GO ANALYSE MEMBER DATA     *
         BC    15,RSAM1012                                        0103
*
* /********************************************************************
* /* A NEW BLOCK OF DATA HAS TO BE READ AT THIS POINT                 *
* /********************************************************************
*
* RSAM1008:;
*           CALL READBLK;               /* READ A BLOCK OF DATA       *
RSAM1008 BAL   @E,READBLK                                         0105
*
*
* /********************************************************************
* /* MEMBER DATA IS NOW IN THE BUFFER,A TEST IS MADE TO SEE IF THE    *
* /* END OF THE MEMBER HAS BEEN REACHED                               *
* /********************************************************************
* RSAM1012:   IF DATA='0000'X           /* IS DATA LENTHT ZERO        *
*                THEN                   /* YES                        *
RSAM1012 L     @1,REDAD                                           0106
         CLC   10(2,@1),@X4                                       0106
         BC    07,@9ED                                            0106
*                  DO;
*                    FLG2(3)='1'B;      /* INDIC NO MORE TO READ      *
         OI    FLG2,B'00100000'                                   0108
         BC    15,@9EC                                            0110
*                  END;
*                ELSE                   /* NO NOT END OF DATA         *
*                  DO;                  /* GET LENGTH OF THIS RECORD  *
*                    AWRK=KEY + DATA +  /* LENGHT OF THIS RECORD IS   *
*                            12;        /* KEY + DATA + FIXED LENGHT  *
@9ED     LA    @F,12                                              0111
         L     @1,REDAD                                           0111
         MVC   @TEMP2+2(2),10(@1)                                 0111
         A     @F,@TEMP2                                          0111
         SR    @0,@0                                              0111
         IC    @0,9(0,@1)                                         0111
         AR    @F,@0                                              0111
         STH   @F,AWRK                                            0111
*
*               /*----------------------------------------------------*
*               /* NOW A TEST TO SEE IF MORE DATA RECORDS HAVE BEEN   *
*               /* READ HAS TO BE MADE.                               *
*               /*----------------------------------------------------*
*
*               IF REDAD+AWRK < BLKEX   /* HAS MORE DATA BEEN READ    *
*                  THEN                 /* YES                        *
         A     @F,REDAD                                           0112
         C     @F,BLKEX                                           0112
         BC    10,@9EB                                            0112
*                    DO;
*                      REDAD=REDAD+AWRK; /* POINT TO NEXT DATA RECORD *
         LH    @F,AWRK                                            0114
         A     @F,REDAD                                           0114
         ST    @F,REDAD                                           0114
*                      GO TO RSAM1012;  /* SEE IF THIS ONE IS EOD     *
         BC    15,RSAM1012                                        0115
*                    END;
*                  ELSE                 /* NO                         *
*                    DO;                /* NEED TO READ MORE DATA     *
*                      RDEND=RDNXT +    /* END OF NEXT POSSIBLE BLOCK *
*                          BLKRD;       /* MAXIMUM SIZE OF BLOCK      *
@9EB     L     @F,BLKRD                                           0118
         A     @F,RDNXT                                           0118
         ST    @F,RDEND                                           0118
*
*                 /*--------------------------------------------------*
*                 /* NOW A TEST HAS TO BE MADE TO SEE IF THE NEXT     *
*                 /* BLOCK WHEN READ WILL FIT INTO THE BUFFER.        *
*                 /*--------------------------------------------------*
*
*                 IF RDEND <= BUFEND    /* NEXT BLOCK FIT INTO BUFFER *
*                    THEN               /* YES                        *
         L     @F,BUFEND                                          0119
         C     @F,RDEND                                           0119
*                        GO TO RSAM1008;/* GO AND READ IT             *
         BC    10,RSAM1008                                        0120
*                    ELSE               /* NO                         *
*                      DO;              /* IT DOES NOT FIT            *
*
*                   /*------------------------------------------------*
*                   /* NOW THAT THERE IS NO MORE SPACE IN THIS BUFFER *
*                   /* A TEST IS MADE TO SEE IF THE SECOND BUF IS     *
*                   /* STILL AVAILLABLE AND IF IT MAY BE USED         *
*                   /*------------------------------------------------*
*
*                   IF SECAV='1'B       /* 2ND BUFFER STILL AVAILLABLE*
*                      THEN             /* YES                        *
         TM    SECAV,B'10000000'                                  0122
         BC    12,@9E9                                            0122
*                        DO;            /* SET APPROPRIATE ADDRESSES  *
*                          RDNXT=BEGFST2-8;   /* BEGIN OF 2ND BUFFER  *
         L     @F,BEGFST2                                         0124
         SH    @F,@D1                                             0124
         ST    @F,RDNXT                                           0124
*                          BUFEND = END2ND2; /* END OF 2ND BUFFER     *
         MVC   BUFEND(4),END2ND2                                  0125
*                          F= '40'X;    /* INDIC LAST RECORD IN BUFFER*
         L     @1,REDAD                                           0126
         MVI   0(@1),X'40'                                        0126
*                          FLG1(2)='1'B;   /* INDIC PROCESS IN 2ND BUF*
         OI    FLG1,B'01000000'                                   0127
*                          SECAV='0'B;  /* 2ND BUF NO MORE AVAILLABLE *
         NI    SECAV,B'01111111'                                  0128
*                          GO TO RSAM1008; /* GO FILL SECOND BUFFER   *
         BC    15,RSAM1008                                        0129
*                        END;
*                      ELSE;            /* NO - 2ND BUFFER FULL       *
@9E9     EQU   *                                                  0131
*                      END;
@9E8     EQU   *                                                  0132
*                    END;
*                  END;
@9EA     EQU   *                                                  0134
*                     F='40'X + '80'X;     /* INDIC LAST RECORD IN ANY
*                                             BUFFER                  *
@9EC     LA    @F,X'80'                                           0135
         LA    @0,X'40'                                           0135
         AR    @F,@0                                              0135
         L     @1,REDAD                                           0135
         STC   @F,0(0,@1)                                         0135
*                     RETURN;           /* GO BACK TO CALLER          *
* /********************************************************************
* /* THIS NESTED PROCEDURE READS A BLOCK OF DATA, GIVES A POINTER     *
* /* TO THE END OF DATA READ, AND TELLS HOW MANY BYTES HAVE BEEN      *
* /* READ                                                             *
* /********************************************************************
*
*
* READBLK:  PROCEDURE;
@EL01    L     @D,4(0,@D)                                         0137
         LM    @E,@C,12(@D)                                       0137
         BCR   15,@E                                              0137
READBLK  STM   @E,@C,12(@D)                                       0137
         ST    @D,@SAV002+4                                       0137
         LA    @F,@SAV002                                         0137
         ST    @F,8(0,@D)                                         0137
         LR    @D,@F                                              0137
*
*           RESTRICT(4);                /* RESTRICT THIS REGISTER FOR
*                                          ADDRESSABILITY TO IEBMCA   *
*           RESTRICT(6);                /* HOLDS DCB ADDRESS          *
*           REDAD=RDNXT+8;              /* POINT TO 1ST RECORD IN
*                                          BLOCK READ                 *
         LA    @F,8                                               0140
         A     @F,RDNXT                                           0140
         ST    @F,REDAD                                           0140
*
* /********************************************************************
* /* AT THIS POINT THE RECORD DESCRIPTOR WORD AREA IS SAVED AND A     *
* /* BLOCK OF DATA IS READ. IF THE BLOCK READ WAS A SEGMENT OF A PDS  *
* /* RECORD CONTROL COMES BACK HERE TO READ THE OTHER SEGMENTS.       *
* /********************************************************************
* READ0006:;
*           RECDESAV=VFIELD;            /* SAVE RECORD CONTROL FIELD  *
READ0006 L     @1,RDNXT                                           0142
         MVC   RECDESAV(8),0(@1)                                  0142
*
*           /**********************************************************
*           /* THE FOLLOWING GENERATE READS 1 BLOCK OF DATA AT A PLACE*
*           /* IN THE BUFFER POINTED TO BY RDNXT                      *
*           /**********************************************************
*
*           GENERATE;
         L     RDA,RDNXT               GET ADDR WHERE TO READ IN
         READ  DECB,SF,LOADDCB,(RDA),MF=E READ 1 BLOCK
         CHECK DECB                    CHECK FOR SUCCESSFULL READ
         DS    0H
*
*           BLKEX=RDNXT + BLLA;         /* END OF BLOCK JUST READ     *
         L     @1,RDNXT                                           0144
         MVC   @TEMP2+2(2),0(@1)                                  0144
         L     @F,@TEMP2                                          0144
         A     @F,RDNXT                                           0144
         ST    @F,BLKEX                                           0144
*
*           /*--------------------------------------------------------*
*           /* A TEST IS NOW MADE TO SEE IF THE BLOCK JUST READ HOLDS *
*           /* A WHOLE PDS RECORD OR ONLY A SEGMENT OF A PDS RECORD   *
*           /* IN WHICH CASE THE OTHER SEGMENTS HAVE TO BE READ       *
*           /*--------------------------------------------------------*
*           IF SLLB ^= '0000'X          /* NORMAL BLOCK               *
*              THEN                     /* NO - SEGMENTED             *
         CLC   6(2,@1),@X4                                        0145
         BC    08,@9E7                                            0145
*
*             /*------------------------------------------------------*
*             /* NOW SEGMENTS OF PDS RECORDS ARE BEING READ, A TEST IS*
*             /* MADE TO SEE IF THE LAST SEGMENT HAS BEEN READ.       *
*             /*------------------------------------------------------*
*             IF SLLB ^= '8000'X        /* LAST SEGMENT OF DATA BLOCK *
*                THEN                   /* NO                         *
         CLC   6(2,@1),@X8                                        0146
         BC    08,@9E6                                            0146
*                  DO;                  /* READ OTHER SEGMENTS        *
*                    VFIELD=RECDESAV;   /* RESET CONTROL FIELD AREA   *
         MVC   0(8,@1),RECDESAV                                   0148
*                    RDNXT=BLKEX - 8;   /* UPDATE READ ADDRESS        *
         L     @F,BLKEX                                           0149
         SH    @F,@D1                                             0149
         ST    @F,RDNXT                                           0149
*                    GO TO READ0006;    /* READ NEXT SEGMENT          *
         BC    15,READ0006                                        0150
*                  END;
*                ELSE;                  /* YES WHOLE BLOCK READ       *
@9E6     EQU   *                                                  0152
*                    VFIELD=RECDESAV;   /* RESET CONTROL FIELD AREA   *
@9E5     EQU   *                                                  0153
@9E7     L     @1,RDNXT                                           0153
         MVC   0(8,@1),RECDESAV                                   0153
*                    RDNXT=BLKEX - 8;   /* SET ADDR FOR NEXT READ     *
         L     @F,BLKEX                                           0154
         SH    @F,@D1                                             0154
         ST    @F,RDNXT                                           0154
*           END READBLK;
         BC    15,@EL01                                           0155
*         END IEBRSAM;
@DATA1   EQU   *
@0       EQU   00                  EQUATES FOR REGISTERS 0-15
@1       EQU   01
@2       EQU   02
@3       EQU   03
@4       EQU   04
@5       EQU   05
@6       EQU   06
@7       EQU   07
@8       EQU   08
@9       EQU   09
@A       EQU   10
@B       EQU   11
@C       EQU   12
@D       EQU   13
@E       EQU   14
@F       EQU   15
@D1      DC    H'8'
@D2      DC    H'12'
@D3      DC    H'-1'
@D4      DC    H'256'
@MVC     MVC   0(1,@A),0(@E)
         DS    0F
@X3      DC    X'00FFFFFF'
@X4      DC    X'0000'
@X8      DC    X'8000'
         DS    0D
@DATA    EQU   *
@SAV001  EQU   @DATA+00000000      72 BYTE(S) ON WORD
REDAD    EQU   @DATA+00000072      FULLWORD POINTER
BUFEND   EQU   @DATA+00000076      FULLWORD POINTER
BLKRD    EQU   @DATA+00000080      FULLWORD INTEGER
SECAV    EQU   @DATA+00000084      1 BIT(S) ON BYTE
FDAD     EQU   @DATA+00000085      8 BYTE(S)
AWRK     EQU   @DATA+00000094      HALFWORD INTEGER
BLKEX    EQU   @DATA+00000096      FULLWORD POINTER
RDEND    EQU   @DATA+00000100      FULLWORD POINTER
RDNXT    EQU   @DATA+00000104      FULLWORD POINTER
INAREA   EQU   00000000            12 BYTE(S)
F        EQU   INAREA+00000000     8 BIT(S)
MBBCCHHR EQU   INAREA+00000001     8 BYTE(S)
KDD      EQU   INAREA+00000009     3 BYTE(S)
KEY      EQU   INAREA+00000009     8 BIT(S)
DATA     EQU   INAREA+00000010     16 BIT(S)
BYTRD    EQU   @DATA+00000108      HALFWORD INTEGER
CNT      EQU   @DATA+00000110      HALFWORD INTEGER
VFIELD   EQU   00000000            8 BYTE(S)
BLLA     EQU   VFIELD+00000000     2 BYTE(S)
BLLB     EQU   VFIELD+00000002     2 BYTE(S)
SLLA     EQU   VFIELD+00000004     2 BYTE(S)
SLLB     EQU   VFIELD+00000006     2 BYTE(S)
RECDESAV EQU   @DATA+00000112      8 BYTE(S)
NOTE     EQU   00000000            4 BYTE(S)
RECFMO   EQU   @DATA+00000120      8 BIT(S) ON BYTE
         ENTRY IEBRSAM1
@SAV002  EQU   @DATA+00000124      72 BYTE(S) ON WORD
         DS    00000196C
@TEMPS   DS    0F
@TEMP2   DC    F'0'
DCBA     EQU   6                       ADDRESSABILITY TO INP DCB
MCABASE  EQU   4                       USED AS BASE REG FOR IEBMCA
RDA      EQU   6                       ADDR TO READ FROM
         READ  DECB,SF,MF=L
         DS    0F
PATCHLN  EQU   (*-IEBRSAM)/20          5 PERCENT OF MODULE LENGHT
PATCH    DC    XL(PATCHLN)'00'         5 PERCENT PATCH AREA
IEBMCA   DSECT                         COMMON AREA DSECT
         IEBMCA                        MACRO FOR COMMON AREA DATA
         DCBD  DSORG=PS
@DATEND  EQU   *
@9F3     EQU   @9F2
@EL02    EQU   @EL01
@9F4     EQU   @9F3
         END   IEBRSAM
