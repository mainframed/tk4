         TITLE 'IEBDSU IEBCOPY S DIRECTORY SET UP FOR UNLOAD'
         LCLA  &T,&SPN                                            0001
.@001    ANOP                                                     0001
IEBDSU   CSECT ,                                                  0001
         STM   @E,@C,12(@D)                                       0001
         BALR  @B,0                                               0001
@PSTART  DS    0H                                                 0001
         USING @PSTART+00000,@B                                   0001
         ST    @D,@SAV001+4                                       0001
         LA    @F,@SAV001                                         0001
         ST    @F,8(0,@D)                                         0001
         LR    @D,@F                                              0001
         USING IEBMCA,MCABASE
         DS    0H
*         SWITCH1(1)='0'B;              /* MAKE SURE IEBMGI WILL INIT
*                                          ITSELF FIRST TIME THROUGH  *
         NI    SWITCH1,B'01111111'                                0023
*         FLG5='00'X;                   /* INIT THESE SWITCHES TO ZERO*
         MVI   FLG5,X'00'                                         0024
*         FLG4(2)='0'B;                 /* ASSURE THAT LAST ENTRY BIT
*                                          IS OFF.                    *
         NI    FLG4,B'10111111'                                   0025
*         FLG7(3)='1'B;                 /* INDIC THAT DIR MERGE IS
*                                          BEING DONE.                *
         OI    FLG7,B'00100000'                                   0026
*         FLG7(1)='0'B;                 /* ASSURE THAT SWITCH INDIC
*                                          COPY PHASE IS OFF.         *
         NI    FLG7,B'01111111'                                   0027
*         SWITCH1(4)='1'B;              /* INDIC THAT DIR SET UP IS
*                                          BEING DONE FOR UNLOAD.     *
         OI    SWITCH1,B'00010000'                                0028
*         BLKAD=BEGFST1;                /* INIT ADDRESS WHERE TO BUILD
*                                          DIR BLOCK TO BEGIN OF BUF  *
         MVC   BLKAD+1(3),BEGFST1                                 0029
         MVI   BLKAD,X'00'                                        0029
*
*         CALL PREPBLK;                 /* GO PREPARE A BLOCK         *
         BAL   @E,PREPBLK                                         0030
*         CALL GETDE;                   /* GO GET DIR ENTRIES         *
         BAL   @E,GETDE                                           0031
*
*         FLG4(2)='0'B;                 /* ASSURE LAST ENTRY BIT OFF  *
         NI    FLG4,B'10111111'                                   0032
*         SWITCH1(4)='0'B;              /* TURN OFF SW INDIC DIR SET
*                                          UP FOR UNLOAD              *
         NI    SWITCH1,B'11101111'                                0033
*         RETURN;                       /* RETURN TO CALLER(IEBDSCPY) *
         BC    15,@EL01                                           0034
* /********************************************************************
* /* AT THIS ENTRY POINT MEMBER NAMES ARE RETURNED TO THE CONTROL     *
* /* TABLE SO THAT THE MESSAGE ROUTINE CAN FIND THEM.                 *
* /********************************************************************
*
* IEBDSU1:  ENTRY;
IEBDSU1  STM   @E,@C,12(@D)                                       0035
         BALR  @B,0                                               0035
         LA    @F,IEBDSU1-IEBDSU                                  0035
         SR    @B,@F                                              0035
         ST    @D,@SAV001+4                                       0035
         LA    @F,@SAV001                                         0035
         ST    @F,8(0,@D)                                         0035
         LR    @D,@F                                              0035
*         SWITCH1(1)='0'B;              /* MAKE SURE IEBMGI WILL INIT
*                                          ITSELF FIRST TIME THROUGH  *
@9FF     NI    SWITCH1,B'01111111'                                0036
*         FLG5='00'X;                   /* INIT THESE SWITCHES TO ZERO*
         MVI   FLG5,X'00'                                         0037
*         FLG4(2)='0'B;                 /* ASSURE THAT LAST ENTRY BIT
*                                          IS OFF.                    *
         NI    FLG4,B'10111111'                                   0038
*         FLG7(3)='1'B;                 /* INDIC THAT DIR MERGE IS
*                                          BEING DONE.                *
         OI    FLG7,B'00100000'                                   0039
*         FLG7(1)='0'B;                 /* ASSURE THAT SWITCH INDIC
*                                          COPY PHASE IS OFF.         *
         NI    FLG7,B'01111111'                                   0040
*
* /********************************************************************
* /* THIS GENERATE BRANCHES TO IEBMGI TO GET ONE DIRECTORY ENTRY      *
* /* ADDRESS IN IDEAD                                                 *
* /********************************************************************
*
* DSU10006: GENERATE;
DSU10006 EQU   *                                                  0041
         STM   RETAD,ENTPT,SV6         SAVE RETURN AND ENTRY ADDRESS
         L     ENTPT,VIEBMGI           ROUTINE TO GET 1 DIR ENTRY
         BALR  RETAD,ENTPT             GO GET A DIR ENTRY
         LM    RETAD,ENTPT,SV6         RESTORE RETURN AND ENTRY ADDR
         DS    0H
*
*           /*--------------------------------------------------------*
*           /* NOW A TEST HAS TO BE MADE TO SEE IF IEBMGI RETURNED A  *
*           /* DIRECTORY ENTRY OR NOT.                                *
*           /*--------------------------------------------------------*
*
*           IF SWITCH1(3)='0'B          /* WAS A DIR ENTRY RETURNED   *
*              THEN                     /* YES                        *
         TM    SWITCH1,B'00100000'                                0042
         BC    05,@9FE                                            0042
*                DO;
*                  NEWNAME=MEMNAM;      /* PUT NAME IN CONTROL TABLE  *
         L     @1,IDEAD                                           0044
         L     @5,TABAD                                           0044
         LR    @A,@5                                              0044
         SH    @A,@D1                                             0044
         MVC   0(8,@A),0(@1)                                      0044
*                  COPIED(4)='1'B;      /* INDIC MEMBER COPIED        *
         LR    @A,@5                                              0045
         SH    @A,@D2                                             0045
         OI    0(@A),B'00010000'                                  0045
         BC    15,@9FD                                            0047
*                END;
*              ELSE                     /* NO - NO DIR ENTRY RETURNED *
*                  SWITCH1(3)='0'B;     /* RESET NO ENTRY INDIC       *
@9FE     NI    SWITCH1,B'11011111'                                0047
*
*             /*------------------------------------------------------*
*             /* NOW A TEST HAS TO BE MADE TO SEE IF THERE ARE MORE   *
*             /* DIRECTORY ENTRIES.                                   *
*             /*------------------------------------------------------*
*
*             IF FLG4(2)='0'B           /* MORE DIR ENTRIES           *
*                THEN                   /* YES                        *
@9FD     TM    FLG4,B'01000000'                                   0048
*                    GO TO DSU10006;    /* GET NEXT ENTRY             *
         BC    08,DSU10006                                        0049
*
*                ELSE                   /* NO - NO MORE ENTRIES       *
*                    RETURN;            /* RETURN TO CALLER           *
         BC    15,@EL01                                           0050
*
* /********************************************************************
* /* THIS NESTED PROCEDURE GETS A DIRECTORY ENTRY VIA CTLTAB AND      *
* /* PUTS THIS ENTRY IN THE DIRECTORY BLOCK, IF THE BLOCK IS FULL, IT *
* /* WILL CALL THE NESTED PROCEDURE PREPBLK FOR ALLOCATION OF A NEW   *
* /* DIRECTORY BLOCK                                                  *
* /********************************************************************
*
* GETDE:    PROCEDURE;
@EL01    L     @D,4(0,@D)                                         0051
         LM    @E,@C,12(@D)                                       0051
         BCR   15,@E                                              0051
GETDE    STM   @E,@C,12(@D)                                       0051
         ST    @D,@SAV002+4                                       0051
         LA    @F,@SAV002                                         0051
         ST    @F,8(0,@D)                                         0051
         LR    @D,@F                                              0051
*
*           RESTRICT(4);                /* ADDRESSABILITY OF IEBMCA   *
*
* /********************************************************************
* /* IN THIS GENERATE STATEMENT A BRANCH IS TAKEN TO IEBMGI IN        *
* /* IEBDSCPY TO OBTAIN THE ADDRESS OF A DIRECTORY ENTRY              *
* /********************************************************************
*
* GETDE006: GENERATE;
GETDE006 EQU   *                                                  0053
         STM   RETAD,ENTPT,SV6         SAVE RETURN AND ENTRY ADDRESS
         L     ENTPT,VIEBMGI           GO TO IEBMGI TO GET A DIR ENTRY
         BALR  RETAD,ENTPT             ADDRESS IN IDEAD
         LM    RETAD,ENTPT,SV6         RESTORE RETURN AND ENTRY ADDR
         DS    0H
*
*           /*--------------------------------------------------------*
*           /* TEST TO SEE WHETHER IEBMGI RETURNED AN ENTRY OR WHETHER*
*           /* DUE TO I/O ERROR FROM SYSUT3 NO ENTRY WAS RETURNED.    *
*           /*--------------------------------------------------------*
*
*           IF SWITCH1(3)='0'B          /* WAS A DIR ENTRY RETURNED?  *
*              THEN                     /* YES                        *
         TM    SWITCH1,B'00100000'                                0054
         BC    05,@9FC                                            0054
*                DO;                    /* PUT IN DIR BLK FOR OUTPUT  *
*                  WORK=''B;            /* CLEAR WORK AREA FOR C FIELD*
         XC    WORK(2),WORK                                       0056
*                  WORK(9:16)=CFLD;        /* PUT C FIELD ON HWORD BDY*
         L     @1,IDEAD                                           0057
         MVC   WORK+1(1),11(@1)                                   0057
*                  WORK(9:11)='000'B;       /* CLEAR 3 HI ORDER BITS  *
         NI    WORK+1,B'00011111'                                 0058
*                  WCOUNT=WORK;         /* PREPARE THIS VALUE FOR ARITH
*                                          OPERATION                  *
         MVC   WCOUNT(2),WORK                                     0059
*                  WCOUNT=              /* TOTAL NB OF USERS BYTES    *
*                    WCOUNT*2           /* MAKE NB OF HWORDS NB OF BYT*
*                    + 12;              /* ADD FIXED LEN OF DE        *
         LA    @E,2                                               0060
         MH    @E,WCOUNT                                          0060
         AH    @E,@D3                                             0060
         STH   @E,WCOUNT                                          0060
*
* /********************************************************************
* /* THERE IS A DIRECTORY ENTRY AND ITS LENGTH IS CALCULATED IN       *
* /* WCOUNT A TEST HAS TO BE MADE TO SEE WHETHER THE ENTRY WILL FIT   *
* /* INTO THIS DIRECTORY BLOCK OR IF A NEW ONE IS NEEDED              *
* /********************************************************************
*
* GETDE012:   IF BC + WCOUNT <=254      /* WILL ENTRY FIT IN BLOCK?   *
*                THEN                   /* YES                        *
GETDE012 LH    @F,WCOUNT                                          0061
         AH    @F,BC                                              0061
         CH    @F,@D4                                             0061
         BC    02,@9FB                                            0061
*                  DO;                  /* PUT IT IN THIS BLOCK       *
*                    ENTRIES(BC+1:BC+WCOUNT)=ENTRI(1:WCOUNT);
         L     @1,IDEAD                                           0063
         LR    @E,@1                                              0063
         LH    @5,WCOUNT                                          0063
         AH    @5,BC                                              0063
         LA    @C,1                                               0063
         AH    @C,BC                                              0063
         SR    @5,@C                                              0063
         L     @8,BLOCK                                           0063
         LA    @A,21(@C,@8)                                       0063
         EX    @5,@MVC                                            0063
*
*               /*----------------------------------------------------*
*               /* THE ENTRY FITS INTO THE PRESENT BLOCK, A TEST IS   *
*               /* NOW PERFORMED TO SEE WETHER A NEW NAME WAS SPECI-  *
*               /* -FIED IN A SELECTIVE COPY STMT.                    *
*               /*----------------------------------------------------*
*
*               IF SWITCH1(2)='1'B      /* NEED TO PLUG IN NEWNAME?   *
*                  THEN                 /* YES PLUG IN NEW NAME       *
         TM    SWITCH1,B'01000000'                                0064
         BC    12,@9FA                                            0064
*                      ENTRIES(BC+1:BC+8)=NEWNAME;
         L     @5,TABAD                                           0065
         LR    @E,@5                                              0065
         SH    @E,@D1                                             0065
         LA    @9,8                                               0065
         AH    @9,BC                                              0065
         LA    @6,1                                               0065
         AH    @6,BC                                              0065
         SR    @9,@6                                              0065
         LA    @A,21(@6,@8)                                       0065
         EX    @9,@MVC                                            0065
*                  ELSE;                /* NO NO NEED FOR NEW NAME    *
@9FA     EQU   *                                                  0066
*                    OLDKEY=ENTRIES(BC+1:BC+8);       /* SAVE NAME OF
*                                                        ENTRY FOR KEY*
@9F9     LA    @1,8                                               0067
         AH    @1,BC                                              0067
         LA    @5,1                                               0067
         AH    @5,BC                                              0067
         SR    @1,@5                                              0067
         L     @C,BLOCK                                           0067
         LA    @E,21(@5,@C)                                       0067
         LA    @A,OLDKEY                                          0067
         MVI   0(@A),C' '                                         0067
         MVC   1(007,@A),0(@A)                                    0067
         EX    @1,@MVC                                            0067
*                    BC=BC+WCOUNT;      /* UPDATE NB OF BYTES IN DIR
*                                          BLOCK                      *
         LH    @F,WCOUNT                                          0068
         AH    @F,BC                                              0068
         STH   @F,BC                                              0068
*                    GO TO GETDE018;    /* GO SEE IF MORE ENTRIES TO
*                                          PROCESS.                   *
         BC    15,GETDE018                                        0069
*                  END;
*                ELSE                   /* NO DOES NOT FIT IN BLOCK   *
*                  DO;                  /* COMPLETE BLK GET NEW ONE   *
*                    KEY=OLDKEY;        /* FILL IN LAST ENTRY NAME AS
*                                          KEY OF THIS BLOCK          *
@9FB     L     @1,BLOCK                                           0072
         MVC   12(8,@1),OLDKEY                                    0072
*                    BCNT=BC+2;         /* FILL IN NB OF BYTES USED IN
*                                          THIS DIR BLOCK             *
         LA    @F,2                                               0073
         AH    @F,BC                                              0073
         ST    @F,@TEMP4                                          0073
         MVC   20(2,@1),@TEMP4+2                                  0073
*                    BLKAD=             /* ADDRESS OF END OF THIS BLK *
*                      BLOCK+           /* ADDRESS OF BEGIN OF BLK +  *
*                      276;             /* LENGHT OF A DIR BLOCK      *
         LA    @F,276                                             0074
         A     @F,BLOCK                                           0074
         ST    @F,BLKAD                                           0074
*                    CALL PREPBLK;      /* GO PREPARE NEW BLOCK       *
         BAL   @E,PREPBLK                                         0075
*                    GO TO GETDE012;    /* PUT  ENTRY IN NEXT AVAIL-
*                                          -LABLE BLOCK.              *
         BC    15,GETDE012                                        0076
*                  END;
*                END;
*              ELSE                     /* NO NO ENTRY RETURNED       *
*                 SWITCH1(3)='0'B;      /* TURN OFF SW INDIC NO ENTRY *
@9FC     NI    SWITCH1,B'11011111'                                0079
*
* /********************************************************************
* /* NOW THE ENTRY HAS BEEN PROCESSED, A TEST IS MADE TO SEE IF       *
* /* THERE ARE MORE DIRECTORY ENTRIES TO PROCESS                      *
* /********************************************************************
*
* GETDE018: IF FLG4(2)='0'B             /* MORE ENTRIES TO GET?       *
*              THEN                     /* YES                        *
@9F7     EQU   *                                                  0080
GETDE018 TM    FLG4,B'01000000'                                   0080
*                GO TO GETDE006;        /* GO GET NEXT ENTRY          *
         BC    08,GETDE006                                        0081
*              ELSE                     /* NO                         *
*                DO;                    /* NO MORE ENTRIES TO PROCESS *
*
* /********************************************************************
* /* THERE ARE NO MORE ENTRIES TO PROCESS A FF DIRECTORY ENTRY HAS    *
* /* TO BE MADE, A TEST TO SEE WETHER A NEW BLOCK IS NEEDED FOR THIS  *
* /* ENTRY FOLLOWS                                                    *
* /********************************************************************
*
* GETDE024:   IF BC+12 <= 254           /* WILL FF REC FIT IN THIS
*                                          BLOCK                      *
*                THEN                   /* YES                        *
GETDE024 LA    @F,12                                              0083
         AH    @F,BC                                              0083
         CH    @F,@D4                                             0083
         BC    02,@9F6                                            0083
*                  DO;                  /* PUT FF REC IN THIS BLOCK   *
*                    ENTRIES(BC+1:BC+8)='FFFFFFFFFFFFFFFF'X;/*
*                                                      INSERT FFNAME  *
         LA    @E,@X6                                             0085
         LA    @1,8                                               0085
         AH    @1,BC                                              0085
         LA    @5,1                                               0085
         AH    @5,BC                                              0085
         SR    @1,@5                                              0085
         L     @C,BLOCK                                           0085
         LA    @A,21(@5,@C)                                       0085
         EX    @1,@MVC                                            0085
*                    BCNT= BC + 12 + 2;     /* PUT IN BYTE COUNT      *
         LA    @F,2                                               0086
         AH    @F,@D3                                             0086
         AH    @F,BC                                              0086
         ST    @F,@TEMP4                                          0086
         MVC   20(2,@C),@TEMP4+2                                  0086
*                    KEY='FFFFFFFFFFFFFFFF'X;/*
*                                          SET KEY OF BLOCK TO FF'S   *
         MVC   12(8,@C),@X6                                       0087
*                    BLKAD=BLOCK + 276;    /* POINT TO END OF THIS
*                                             BLOCK                   *
         LA    @F,276                                             0088
         A     @F,BLOCK                                           0088
         ST    @F,BLKAD                                           0088
*
* /********************************************************************
* /* NOW THAT THE FF ENTRY IS PLACED IN A BLOCK, A END OF FILE MARK   *
* /* CONSISTING OF 12 BYTES OF ZERO'S HAS TO BE INTRODUCED IN THE     *
* /* BUFFER, A TEST FOR THIS SPACE FOLLOWS.                           *
* /********************************************************************
*
* GETDE030:       IF BLKAD+12 <= END2ND2   /* WILL EOF FIT IN BUFFER  *
*                  THEN                 /* YES                        *
GETDE030 LA    @F,12                                              0089
         A     @F,BLKAD                                           0089
         C     @F,END2ND2                                         0089
         BC    02,@9F5                                            0089
*                    DO;                /* INSERT EOF (12 BYTES ZERO) *
*                      ENDOF(2)= '00'X;  /* ZERO OUT THE 12 BYTES FOR
*                                           EOF                       *
         L     @1,BLKAD                                           0091
         MVI   1(@1),X'00'                                        0091
*                      ENDOF(3:12)=ENDOF(2:11);
         MVC   2(10,@1),1(@1)                                     0092
*                      ENDOF(1)='40'X+'80'X;       /* INDIC LAST REC
*                                                     IN ANY BUFFER   *
         LA    @F,X'80'                                           0093
         LA    @0,X'40'                                           0093
         AR    @F,@0                                              0093
         STC   @F,0(0,@1)                                         0093
*
*                      /***********************************************
*                      /* NOW,THE WHOLE DIRECTORY IS SET UP IEBSAM2   *
*                      /* MUST NOW BE CALLED TO WRITE OUT THE BUFFER  *
*                      /***********************************************
*
*                      CALL IEBSAM2;    /* GO WRITE OUT BUFFER        *
         BAL   @E,IEBSAM2                                         0094
*                      RETURN;          /* THE WHOLE DIR IS SET UP    *
         BC    15,@EL01                                           0095
*                    END;
*                  ELSE                 /* NO EOF DOES NOT FIT IN BUF *
*                    DO;                /* PREPARE TO WRITE DATA      *
*                      CNT(1)='40'X +     /* INDICATE LAST RECORD IN  *
*                                 '80'X;  /* THE BUFFER               *
@9F5     LA    @F,X'80'                                           0098
         LA    @0,X'40'                                           0098
         AR    @F,@0                                              0098
         L     @1,BLOCK                                           0098
         STC   @F,0(0,@1)                                         0098
*
*                      /***********************************************
*                      /* NOW THE BUFFER MUST BE WRITTEN OUT BEFORE   *
*                      /* THE END OF FILE RECORD CAN BE WRITTEN       *
*                      /***********************************************
*
*                      CALL IEBSAM2;    /* GO WRITE OUT BUFFERS       *
         BAL   @E,IEBSAM2                                         0099
*                      BLKAD=BEGFST1;   /* BUILD AGAIN AT BEGINNING
*                                          OF BUFFER AREA             *
         MVC   BLKAD+1(3),BEGFST1                                 0100
         MVI   BLKAD,X'00'                                        0100
*                      GO TO GETDE030;  /* GO SET UP EOF FOR DIR      *
         BC    15,GETDE030                                        0101
*                    END;
*                  END;
*                ELSE                   /* NO FF REC DOES NOT FIT     *
*                  DO;                  /* SET UP BLOCK FOR FF'S      *
*                    BCNT=BC+2;         /* FILL NB OF BYTES IN BLK    *
@9F6     LA    @F,2                                               0105
         AH    @F,BC                                              0105
         L     @1,BLOCK                                           0105
         ST    @F,@TEMP4                                          0105
         MVC   20(2,@1),@TEMP4+2                                  0105
*                    KEY=OLDKEY;        /* SET BLOCK KEY              *
         MVC   12(8,@1),OLDKEY                                    0106
*                    BLKAD=BLOCK+276;   /* NEXT BLOCK ADDRESS         *
         LA    @F,276                                             0107
         A     @F,BLOCK                                           0107
         ST    @F,BLKAD                                           0107
*                    CALL PREPBLK;      /* GET NEW DIR BLOCK          *
         BAL   @E,PREPBLK                                         0108
*                    GO TO GETDE024;    /* MAKE FF ENTRY AND EOF MARK *
         BC    15,GETDE024                                        0109
*                  END;
*                END;
*           END GETDE;
* /********************************************************************
* /* THIS PART OF THE ROUTINE WILL TEST WHETHER A NEW DIRECTORY BLOCK *
* /* WILL FIT IN THE BUFFER, IF IT DOES THEN IT WILL PREPARE IT AND   *
* /* CLEAR IT, IF IT DOES NOT FIT, IT WILL SET THE APPROPRIATE FLAGS  *
* /* FOR IEBSAM2 AND HAVE THE BUFFER WRITTEN OUT.                     *
* /********************************************************************
*
* PREPBLK:  PROCEDURE;
PREPBLK  STM   @E,@C,12(@D)                                       0113
         ST    @D,@SAV003+4                                       0113
         LA    @F,@SAV003                                         0113
         ST    @F,8(0,@D)                                         0113
         LR    @D,@F                                              0113
*
*           RESTRICT(4);                /* ADDRESSABILITY OF IEBMCA   *
*
* /********************************************************************
* /* THE ADDRESS WHERE A POSSIBLE NEW BLOCK WILL END IS CALCULATED    *
* /********************************************************************
*
* PRBLK006: BLKEND=BLKAD + 276;         /* ADD 276 TO CURRENT POSSIBLE
*                                          DIR BLOCK ADDRESS          *
PRBLK006 LA    @F,276                                             0115
         A     @F,BLKAD                                           0115
         ST    @F,BLKEND                                          0115
*
*           /*--------------------------------------------------------*
*           /* A NEW BLOCK HAS TO BE PREPARED, A TEST TO SEE IF IT    *
*           /* FITS IN THE BUFFER HAS TO BE MADE, IF IT DOES NOT FIT, *
*           /* THE BUFFER IS EMPTIED BEFORE STARTING THE CONSTRUCTION *
*           /* OF A NEW BLOCK.                                        *
*           /*--------------------------------------------------------*
*
*           IF BLKEND <= END2ND2        /* TESTING WHETHER A NEW BLOCK
*                                          WILL FIT INTO BUF.         *
*              THEN                     /* YES IT DOES, PREPARE BLOCK *
         L     @F,END2ND2                                         0116
         C     @F,BLKEND                                          0116
         BC    04,@9F2                                            0116
*                DO;                    /* TO FILL IN ENTRIES         *
*                  BLOCK=BLKAD;         /* UPDATE PTR TO NEW DIR BLOCK*
         MVC   BLOCK(4),BLKAD                                     0118
*                  CNT(1)='00'X;        /* SET F BYTE AND MBBCCHHR TO *
         L     @1,BLOCK                                           0119
         MVI   0(@1),X'00'                                        0119
*                  CNT(2:9)=CNT(1:8);             /* ZERO AND SET     *
         MVC   1(8,@1),0(@1)                                      0120
*                  CNT(10:12)=KLDL;         /* KEY TO 8, DATA TO 256  *
         MVC   9(3,@1),KLDL                                       0121
*                  ENTRIES(1)='00'X;    /* CLEAR AREA FOR DIRECTORIES *
         MVI   22(@1),X'00'                                       0122
*                  ENTRIES(2:254)=ENTRIES(1:253);            /*ENTRIES*
         MVC   23(253,@1),22(@1)                                  0123
*
*                  /***************************************************
*                  /* NOW THE BLOCK HAS BEEN PREPARED AND ENTRIES CAN *
*                  /* BE INSERTED.                                    *
*                  /***************************************************
*
*                  BC=0;                /* SET NB OF BYTES IN THIS BLK
*                                          TO ZERO                    *
         SR    @F,@F                                              0124
         STH   @F,BC                                              0124
*                  RETURN;              /* GO BACK TO CALLER,BLK READY*
         BC    15,@EL01                                           0125
*                END;                   /* END OF BLOCK PREPARATION   *
*              ELSE                     /* NO - NO MORE BUFFER SPACE  *
*                DO;                    /* PREPARE TO WRITE OUT DATA  *
*                  CNT(1)='40'X+'80'X;      /* INDICATE LAST RECORD
*                                              IN BUFFER              *
@9F2     LA    @F,X'80'                                           0128
         LA    @0,X'40'                                           0128
         AR    @F,@0                                              0128
         L     @1,BLOCK                                           0128
         STC   @F,0(0,@1)                                         0128
*                  CALL IEBSAM2;        /* WRITE OUT BUFFER           *
         BAL   @E,IEBSAM2                                         0129
*                  BLKAD=BEGFST1;       /* INIT ADDRESS WHERE TO START
*                                          TO BUILD NEW BLOCK         *
         MVC   BLKAD+1(3),BEGFST1                                 0130
         MVI   BLKAD,X'00'                                        0130
*                  GO TO PRBLK006;      /* GO PREPARE DIRECTORY BLOCK *
         BC    15,PRBLK006                                        0131
*                END;
*           END PREPBLK;
* /********************************************************************
* /* THIS  NESTED PROCEDURE BRANCHES TO IEBWSAM TO WRITE OUT THE DIR  *
* /********************************************************************
*
* IEBSAM2:  PROCEDURE OPTIONS (DONTSAVE,NOSAVEAREA);
IEBSAM2  EQU   *                                                  0134
*
*           GENERATE;
         STM   RETAD,ENTPT,SV6         SAVE RETURN AND ENTRY ADDR
         L     ENTPT,VWSAM             ADDR OF WRITE ROUTINE
         MVC   WRTNEXT+1(3),BEGFST1    POINT TO START OF BUFF  @ZA04405
         BALR  RETAD,ENTPT             WRITE OUT BUFFER
         LM    RETAD,ENTPT,SV6         RESTORE RETURN AND ENTRY ADDR
         DS    0H
*           RETURN;                     /* BUFFER WRITTEN OUT -BACK TO
*                                          CALLER                     *
*           END IEBSAM2;
@EL04    BCR   15,@E                                              0137
*         END IEBDSU;
@DATA1   EQU   *
@0       EQU   00                  EQUATES FOR REGISTERS 0-15
@1       EQU   01
@2       EQU   02
@3       EQU   03
@4       EQU   04
@5       EQU   05
@6       EQU   06
@7       EQU   07
@8       EQU   08
@9       EQU   09
@A       EQU   10
@B       EQU   11
@C       EQU   12
@D       EQU   13
@E       EQU   14
@F       EQU   15
@D1      DC    H'8'
@D2      DC    H'9'
@D3      DC    H'12'
@D4      DC    H'254'
@MVC     MVC   0(1,@A),0(@E)
         DS    0F
@X6      DC    X'FFFFFFFFFFFFFFFF'
         DS    0D
@DATA    EQU   *
@SAV001  EQU   @DATA+00000000      72 BYTE(S) ON WORD
         ORG   @DATA+00000072
KLDL     EQU   *                   3 BYTE(S)
         DC    X'080100'
WORK     EQU   @DATA+00000076      16 BIT(S) ON HWORD
WCOUNT   EQU   @DATA+00000078      HALFWORD INTEGER
MEMTABLE EQU   00000009            9 BYTE(S)
COPIED   EQU   MEMTABLE+00000000   8 BIT(S)
NEWNAME  EQU   MEMTABLE+00000001   8 BYTE(S)
DIRBLK   EQU   00000000            276 BYTE(S)
CNT      EQU   DIRBLK+00000000     12 BYTE(S)
KEY      EQU   DIRBLK+00000012     8 BYTE(S)
BCNT     EQU   DIRBLK+00000020     2 BYTE(S)
ENTRIES  EQU   DIRBLK+00000022     254 BYTE(S)
ENTRI    EQU   00000000            74 BYTE(S)
MEMNAM   EQU   ENTRI+00000000      8 BYTE(S)
TTR      EQU   ENTRI+00000008      3 BYTE(S)
CFLD     EQU   ENTRI+00000011      8 BIT(S)
OPUSDAT  EQU   ENTRI+00000012      62 BYTE(S)
BLKEND   EQU   @DATA+00000080      FULLWORD POINTER
ENDOF    EQU   00000000            12 BYTE(S)
         ENTRY IEBDSU1
@SAV002  EQU   @DATA+00000084      72 BYTE(S) ON WORD
@SAV003  EQU   @DATA+00000156      72 BYTE(S) ON WORD
         ORG   @DATA
         DS    00000228C
@TEMPS   DS    0F
@TEMP4   DC    F'0'
MCABASE  EQU   4                       BASE FOR IEBMCA
RETAD    EQU   14                      RETURN ADDR FROM OTHER MODULES
ENTPT    EQU   15                      ENTRY PNT ADDR FROM OTHER MODULE
PATCHLN  EQU   (*-IEBDSU)/20           5 PERCENT OF MODULE LENGTH
PATCH    DC    XL(PATCHLN)'00'         MODULE PATCH AREA
IEBMCA   DSECT                         MACRO TO GENERATH THE COMMUNI-
         IEBMCA                        -CATION AREA IEBMCA
@DATEND  EQU   *
@9F8     EQU   @9F7
@EL02    EQU   @EL01
@9F3     EQU   @EL01
@EL03    EQU   @EL01
@9F1     EQU   @EL01
@9F4     EQU   @9F3
         END   IEBDSU
