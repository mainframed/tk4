         TITLE 'IEBVDM - DIRECTORY MERGE SUBROUTINE OF IEBCOPY'
IEBVDM   CSECT
*D082300                                                         A37901
*C827000                                                         A41780
*C045800,716800                                                  A44144
*A045820,716700-716720,717300,720100                             A44144
*A433300-433400                                                 YA01719
*A471500                                                       @ZA01673
***********************************************************************
*TITLE - IEBVDM - IEBCOPY DIRECTORY MERGE                             *
*                                                                     *
*STATUS - CHANGE LEVEL 001                                            *
*                                                                     *
*FUNCTION/OPERATION - MERGES THE INPUT DIRECTORY ENTRIES WITH THE     *
*        OUTPUT DIRECTORY ENTRIES                                     *
*ENTRY POINTS - IEBVDM                                                *
*                                                                     *
*INPUT - INPUT DIRECTORY ENTRIES                                      *
*        OUTPUT DIRECTORY ENTRIES                                     *
*                                                                     *
*OUTPUT - A MERGED OUTPUT DIRECTORY                                   *
*        THE NUMBER OF BLOCKS IN THE OUTPUT DIRECTORY                 *
*                                                                     *
*EXITS - NORMAL - RETURN TO CALLER                                    *
*                                                                     *
*EXTERNAL ROUTINES - IEBDV4,AN ENTRY POINT IN IEBDV1                  *
*                  IEBDRD(FOR READING IN OUTPUT + INPUT DIRECTORY ENT-*
*                  RIES)                                              *
*                  IEBMGD -GETS AN OUTPUT DIRECTORY ENTRY             *
*                  IEBMGI                                             *
*                  IEBVMS                                             *
*TABLES/WORK AREA - I/O BUFFERS                                       *
*                  AREAS WHERE INPUT + OUTPUT DIRECTORY ENTRIES HAVE  *
*                  BEEN RETAINED                                      *
*ATTRIBUTES - SERIALLY REUSEABLE                                      *
***********************************************************************
TWNTY    EQU   20                 OFFSET FROM BEGINNING OF BLK TO COUNT
TW2      EQU   22                 OFFSET FROM BEG. OF BLK TO 1ST ENTRY
FF       EQU   X'FF'
OPEN     EQU   X'10'              MASK USED FOR TESTING DCBOFLGS
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
SAV8     EQU   8                  SAVE AREA DISPLACEMENT
SAV4     EQU   4                  SAVE AREA DISPLACEMENT
FLGSET   EQU   X'00'              FLAG SETTING
LEN1     EQU   1                  LENGTH OR DISPLACEMENT OF 1
LEN2     EQU   2                  LENGTH OR DISPLACEMENT OF 2
LEN3     EQU   3                  LENGTH OR DISPLACEMENT OF 3
LEN4     EQU   4
LEN8     EQU   8                  LENGTH OR DISPLACEMENT OF 8
DISP4    EQU   4                  DISPLACEMENT OR LENGTH OF 4
LEN254   EQU   254                LENGTH OF 254
DISP0    EQU   0                  0 DISPLACEMENT
LEN11    EQU   11                 LENGTH OF 11
LEN27    EQU   27                 LENGTH OF 27
LEN26    EQU   26                 LENGTH OF 26
LEN10    EQU   10                 LENGTH OF 10
LEN7     EQU   7                  LENGTH OF 7
MSGN     EQU   X'47'              OFFSET IN MSG FOR NAME
RTCDE    EQU   C'8'               RETURN CODE                    A44144
RTCD12   EQU   X'FC'              RETURN CODE                    A44144
ZERO     EQU   0                  VALUE OF ZERO                  S20201
         EJECT
         SAVE  (14,12),,*
         BALR  R11,R0             BASE REG
         USING *,R11               ESTABLISH ADDRESSABILITY
         USING IEBMCA,4
         LA    R12,SV6
         ST    R12,SAV8(R13)      SAVE ADDRESS OF CALLED ROUTINES SAVE
*                                  AREA
         ST    R13,SAV4(R12)      SAVE ADDRESS OF CALLERS SAVE AREA
         LR    R13,R12
         OI    FLG7,DM            INDICATE THAT DIR MERGE IS BEING DONE
         NI    WSFLAG,FF-USERTTR       ASSURE NOTELIST/USER TTR SWITCH
*                                        IS OFF
         NI    FLG4,FF-LE         ASSURE THAT LAST INPUT ENTRY BIT OFF
         MVI   FLG5,FLGSET        RESET FLAGS
         XC    BC(LEN2),BC        INITIALIZE BC TO 0
         XC    DMSW(LEN1),DMSW    RESET INTERNAL SWITCHES
         LA    R15,LEN1
         STH   R15,DBCNT          INIT OUTPUT DIRECTORY BLK CT TO 1
         LA    R15,TW2            INITIAL VALUE FOR DISPLACEMENT
         STH   R15,DISPO          INITIALIZE DISPLACEMENT TO 22
         MVI   UT4SCTOR,ZERO      SET UT4 SECTOR VALUE TO 0      S20201
*                                   (USED ONLY IF ON AN RPS      S20201
*                                   DEVICE)                      S20201
         MVI   OUTSCTOR,ZERO      SET OUTPUT SECTOR VALUE TO 0   S20201
*                                   (USED ONLY IF ON AN RPS      S20201
*                                   DEVICE)                      S20201
         L     R15,VIEBMGI
TRNI     EQU   *
         BALR  R14,R15            GET FIRST IDE
         TM    SWITCH1,MGINODE    WAS NO IDE RETURNED BY IEBMGI
         BZ    GOTIDE1            NO - AN IDE WAS RETURNED AND IS POIN-
*                                 TED TO BY 'IDEAD'
         NI    SWITCH1,FF-MGINODE YES - RESET 'NO IDE' SWITCH
         TM    FLG4,LE            WAS THIS THE ONLY/LAST IDE TO  A37901
*                                 BE MERGED                      A37901
         BZ    TRNI               NO - TRY FOR ANOTHER ONE
         OI    DMSW,E             YES - INDICATE THAT THERE ARE NO MORE
*                                 INPUT DE'S TO BE MERGED
GOTIDE1  EQU   *
         XC    OUTDS1(LEN8),OUTDS1 SET TTRN IN AREA TO ZEROES
         MVC   OUTDS1+DISP4(LEN2),TRBALBUF SET TRK BAL FOR OUTPUT DIR
         TM    COMDCDSW,COMPRESS  IS A COMPRESS BEING DONE
         BO    NULLOUT            IF NO OUTPUT DATA SET, SET UP TO
*                                 PROCESS INPUT ONLY
         TM    STATUS,STAT5       IS OUTPUT NULL
         BO    NULLOUT            IF SO PROCESS INPUT ONLY
         TM    FLG6,OIC           ALL OUTPUT IN CORE
         BO    NULLOUT            YES, DONT NEED TO READ ODE'S
         TM    FLG4,ODALT         NEED TO READ OUTPUT FROM SYSUT4
         BO    WROUT              YES- SETUP TO READ FROM UT4
         LA    R6,OUTDCB          ESTABLISH PTR TO DCB TO BE USED
*                                 WHEN READING OUTPUT DIR
         ST    R6,READDCB
         NI    STATUS,STAT7+STAT8
         OI    STATUS,STAT2+STAT6 INDIC  MERGING DIR FROM OUTPUT D.S.
         LA    R5,UT4DCB
         ST    R5,WRTDCB          ESTABLISH UT4DCB AS DCB TO BE USED
*                                 WHEN WRITING MERGED DIRECTORY
         OI    FLG4,ODALT         SET INDICATION OF WHERE OUTPUT DIREC-
*                                 TORY IS TO BE READ FROM FOR NEXT INDD
*                                 PROCESSING
         MVC   UT4DS1(LEN8),SYS4TTR RE-INIT TTRN AND TRK BALANCE AREA
*                                 IF DCB NOT YET OPEN, DOESN'T MATTER
         NI    TAG,TAG5+TAG6
         OI    TAG,TAG3           INDIC WRITING TO SYSUT4 DS
         USING IHADCB,R5
         TM    DCBOFLGS,OPEN      IS SYSUT4 DCB OPEN
         BO    SETRDNXT           YES - SET READ AND WRITE BFR PTRS
         DROP  R5
         L     R15,VIEBM04        ADDR OF E.P. IN MAIN PROGRAM TO CALL
*                                 IEBDV4 TO OPEN/VALIDATE SYSUT4 DCB
         BALR  R14,R15            EXIT TO E.P.
IEBRTM   EQU   *                  RETURN POINT IN IEBVDM FROM MAIN PGM
IEBVDRTM EQU   IEBRTM
         ENTRY IEBVDRTM
SETRDNXT MVC   READNEXT+LEN1(LEN3),BEGFST1  SET BFR ADDR FOR READ
         MVC   ENDWRT(DISP4),END2ND2   END OF WRT BFR
         L     R7,BEGFST2
         XC    TW2(LEN254,R7),TW2(R7)  CLEAR AREA TO BLD 1ST OUTPUT BLK
         ST    R7,WRTNEXT         SET POINTER FOR IEBDWR
         MVI   DISP0(R7),FLGSET        SET F=0
         ST    R7,BLOCK           SET INTERNAL POINTER TO 1ST BLOCK
         TM    FLG6,ODIC          ANY ODE'S IN CORE
         BO    SOPTR              IF SO, LOCATE 1ST SAVED BLOCK
         SR    R0,R0              SET TTR 0 FOR BEGIN OF DIR TO BE READ
         L     R1,READDCB         ADDR OF DCB
         LA    R2,FDAD(R1)        POINT TO DCBFDAD FIELD FOR MBBCCHHR
         L     R15,VTTOCC         CONVERT TTR TO MBBCCHHR
         BALR  R14,R15            LINK TO ROUTINE
RDOUT    EQU   *
         NI    SENSE,SENSE7+SENSE8 RESET POSSIBLE UNWANTED BITS
         L     R15,VIEBDRD        ADDR OF READ ROUTINE
         BALR  R14,R15            LINK TO READ OUT DIR INTO I/O BFR
GOBFR    L     R15,VIEBMGD
         BALR  R14,R15            OBTAIN PTR TO 'NEXT' ODE IN BFR
         B     CKDEPTR            THIS INSTRUCTION WILL BE EXECUTED IF
*                                 IEBMGD DOES NOT RETURN A PTR TO THE
*                                 ODE
TME      TM    DMSW,E             ANY INPUT DE'S TO COMPARE AGAINST
         BO    DOOUT              IF NOT, JUST PUT THIS ODE INTO THE
*                                 OUTPUT DIRECTORY
SETCOMP  L     R2,IDEAD           ADDR OF IDE
         L     R6,DEPTR           ADDR OF ODE
         CLC   DISP0(LEN8,R2),DISP0(R6) COMPARE INPUT MBRNAME VS OUTPUT
*                                       NAME
         BE    TOIC               IF SAME, GET NEXT ODE
         BNL   DOOUT              IF OUTPUT LOW MERGE IT
SETI     OI    DMSW,I             INDIC IDE BEING MERGED
* NOTE - AT THIS POINT, R2 POINTS TO THE DE TO BE MERGED
ADDADE   SR    R3,R3
         IC    R3,LEN11(R2)       GET 'C' FIELD FROM THIS DE
*                                 NEED TO ISOLATE NUMBER OF USER HALFWD
         SLL   R3,LEN27
         SRL   R3,LEN26           MPLY BY 2 FOR NBR OF USER BYTES
         LA    R3,TWLV(R3)        ADD THE FIXED MINIMUM LENGTH TO THE
*                                 NUMBER OF USER DATA BYTES TO CALC.
*                                 TOTAL LENGTH OF THIS DE
BCUPD    LH    R6,BC              GET BYTE COUNT OF CURR BLK BEING BLT
         AR    R6,R3              ADD LENGTH OF CURR DE
         CH    R6,TWO54           DOES BYTE COUNT EXCEED 254
         BH    NEWBLK             IF SO, FINISH UP CURRENT BLK
         LH    R8,DISPO           GET CURRENT VALUE OF DISPLACEMENT
         A     R8,BLOCK           ADD TO STARTING ADDR OF DB
         BCTR  R3,R0              DECREMENT LENGTH OF DE BY 1 FOR EX
         EX    R3,ADDENT
         MVC   OLDKEY(LEN8),DISP0(R2)  SAVE NAME OF DE JUST MOVED
         ST    R8,ADLAST          SAVE ADDR OF LAST DE MERGED IN OUTDIR
         STH   R6,BC              SAVE UPDATED BYTE-COUNT
         LA    R6,TW2(R6)         ADD 22 TO CURR VALUE OF BC
         STH   R6,DISPO           SET AS NEW VALUE OF DISPO
         TM    DMSW,I             WAS AN IDE JUST MERGED
         BZ    CKR                IF NOT, SEE IF THIS WAS LAST ODE
         NI    DMSW,FF-I          ELSE RESET IDE-MERGED SWITCH
         L     R15,TABAD
         LA    R14,LEN10
         SR    R15,R14            POINT TO CTLTAB ENTRY FOR THIS MEMBER
         MVC   LEN2(LEN8,R15),OLDKEY PUT NAME OF IDE MERGED INTO CTL-
*                                 TAB ENTRY FOR PRINTING BY IEBVTM
         OI    LEN1(R15),JSTCPD   INDIC NEED TO PRINT THIS NAME IN MSG
SETBIT4  OI    DISP0(R15),SEBIT4  SET 'DONT-COPY' FLAG IN CTLTAB ENTRY
         TM    DISP0(R15),SEBIT1  IS THIS A NEWNAME ENTRY
         BZ    TF4LE              NO, TEST FOR MORE IDE'S TO MERGE
         L     R14,NNTABAD        GET POINTER TO CURRENT ENTRY IN
*                                 NNPTRTAB (SET BY IEBMGI)
         LA    R15,DISP4
         SR    R14,R15            POINT TO CURRENT NNPTRTAB SLOT
         L     R15,DISP0(R14)     POINT TO RELATED OLDNAME CTLTAB ENTRY
         B     SETBIT4            GO SET 'DONT-COPY' IN OLDNAME ENTRY
TF4LE    EQU   *
         TM    FLG4,LE            ANY MORE IDE'S
         BO    SETE               IF NOT, SET INDICATOR 'E'
         L     R15,VIEBMGI
         BALR  R14,R15            OBTAIN POINTER TO NEXT IDE
         TM    SWITCH1,MGINODE    WAS NO IDE RETURNED BY IEBMGI
         BZ    GOTIDEN            NO - AN IDE WAS RETURNED AND IS POIN-
*                                 TED TO BY 'IDEAD'
         NI    SWITCH1,FF-MGINODE YES - RESET 'NO IDE' SWITCH
         B     TF4LE              SEE IF ANY MORE IDE'S TO BE TRIED FOR
GOTIDEN  EQU   *
         TM    DMSW,R             ANY ODE'S
         L     R2,IDEAD           POINT TO NXT IDE IN CASE NEED IT
         BO    SETI               IF NOT, PUT THIS IDE INTO OUT DIR
         B     SETCOMP            ELSE COMPARE IDE TO ODE
WROUT    LA    R6,OUTDCB          ESTAB PTR TO DCB TO BE WRITTEN TO
         ST    R6,WRTDCB
         LA    R5,UT4DCB          ESTAB PTR TO DCB TO READ FROM
         ST    R5,READDCB
         NI    FLG4,FF-ODALT      RESET INDICATOR - OUTPUT DIRECTORY
*                                 WILL BE READ FROM OUTPUT DATA SET
*                                 WHEN PROCESSING NEXT INDD
         NI    STATUS,STAT7+STAT8
         OI    STATUS,STAT3+STAT6 INDIC READING FROM SYSUT4 AND MERGING
         NI    TAG,TAG5+TAG6
         OI    TAG,TAG1           INDIC WRTG OUTPUT DIRECTORY TO OUT DS
         MVC   FDAD(LEN8,R5),UT4FDAD RESET MBBCCHHR OF BEG OF UT4 DATA
         B     SETRDNXT           SET POINTERS FOR I/O ROUTINES
DOOUT    L     R2,DEPTR           POINT TO ODE TO BE MERGED
         B     ADDADE             GO TO MERGE IT
NEWBLK   L     R8,BLOCK           PT TO OUTPUT BLK
         ST    R8,WKA1            SAVE ADDR OF THIS BLK IN CASE NO MORE
         LH    R9,BC              GET CT OF NBR BYTES USED IN THIS DB
         LA    R9,LEN2(R9)        ADD 2 TO ACCOUNT FOR LENGTH OF COUNT
         STH   R9,BC              SET TO MOVE UPDTD CT INTO DIR BLOCK
         MVC   TWNTY(LEN2,R8),BC  MOVE TOTAL LENGTH INTO DIRECTORY BLK
         MVC   TWLV(LEN8,R8),OLDKEY SET UP KEY OF THIS DIRECTORY BLOCK
         MVC   KLLOC(LEN3,R8),KLDL  SET UP KEY-LENGTH AND DATA-LENGTH
         LH    R15,DBCNT          ADD 1 TO CURR NBR OUT BLKS BUILT
         LA    R15,LEN1(R15)
         CH    R15,DIRBCNT        IS THERE SPACE FOR AT LEAST 1 MORE
         BH    TOOMANY            IF NOT, OUT OF ALLOCATED DIR SPACE
         STH   R15,DBCNT          ELSE SAVE UPDATED BLOCK-COUNT
         LA    R8,BLKLEN(R8)      POINT TO NEXT POSSIBLE BLOCK
         ST    R8,BLOCK           SAVE NEW PTR IN CASE SPACE IN BFR
         LA    R8,BLKLEN(R8)      CALC, WHERE NXT BLK WOULD END
         C     R8,ENDWRT          SPACE FOR NEXT BLK
         BNL   SETREC             IF NOT SEE IF MORE BFR SPACE AVAIL
INITNXT  XC    BC(LEN2),BC        RESET BYTE COUNT TO 0
         L     R8,BLOCK           RESET POINTER TO ADDR OF NEXT BLOCK
         MVI   DISP0(R8),FLGSET   SET  F=0
         XC    TW2(LEN254,R8),TW2(R8)  CLEAR NEXT BLOCK
         LA    R15,TW2            RESET DISPLACEMENT TO 22
         STH   R15,DISPO
         B     BCUPD              NOW GO PUT NXT DE INTO OUTPUT BLK
CKR      TM    DMSW,R             ANY MORE ODE'S
         BZ    TOIC               IF SO GET NXT ODE TO BE MERGED
         L     R2,IDEAD           POINT TO IDE IN CASE NEED TO MERGE
         TM    DMSW,E             ANY MORE IDE'S TO BE MERGED
         BZ    SETI               YES - GO MERGE NXT IDE
         B     SETFF              ELSE SET 'FF' RECORD INTO LAST BLK
SETE     OI    DMSW,E             INDIC NO MORE IDE'S TO BE MERGED
         TM    DMSW,R             ANY MORE ODE'S TO BE MERGED
         BZ    DOOUT              IF SO, GET ADDR OF NXT ONE TO MERGE
SETFF    LH    R7,BC              GET CURR NBR BYTES IN LAST O.D. BLOCK
         LA    R7,DLEOD(R7)       ADD 12 FOR 'FF'S
         L     R8,BLOCK
         CH    R7,TWO54           ENOUGH ROOM FOR FF'S IN THIS BLOCK
         BH    CKALLOC            IF NOT, SEE IF ALLOCATION FOR ANOTHER
*                                 BLOCK IS AVAILABLE
         LR    R9,R8              SAVE POINTER TO START OF BLOCK
         AH    R8,DISPO           ELSE CALC ADDR TO PUT FF'S AT
         MVI   DISP0(R8),FF
         MVC   LEN1(LEN7,R8),DISP0(R8) MOVE NME OF 'FF' INTO OUTPUT DIR
         MVC   TWLV(LEN8,R9),DISP0(R8) SET KEY TO THIS BLOCK TO 'FF'
         MVC   KLLOC(LEN3,R9),KLDL     SET KEY LENGTH AND DATA LENGTH
         LA    R7,LEN2(R0,R7)     ADD 2 TO ACCOUNT FOR LENGTH OF
*                                    COUNT
         CLC   DBCNT(LEN2),DIRBCNT     ARE FF'S BEING PLACED IN LAST
*                                   DIRECTORY BLOCK
         BNE   NOPAM1             NO, GO AROUND
         STH   R7,BPAMOUT+DIRCTDCB  STORE BYTE COUNT IN BPAM DCB
NOPAM1   EQU   *
         STH   R7,WKA1            SET BYTE-COUNT INTO AREA TO MOVE FROM
         MVC   TWNTY(LEN2,R9),WKA1 MOVE BYTE-COUNT INTO DIR BLOCK
TSTTAG3  TM    TAG,TAG3           IS OUT DIR BEING WRITTEN TO SYSUT4
         BZ    SETLREP            IF NOT, GO TO WRT THE OUTPUT DIR.
         LR    R15,R9             SAVE ADDR OF LAST FULL BLOCK IN BFR
         LA    R9,BLKLEN(R9)      ADD 276 TO CURRENT ADDR OF BLOCK
         LA    R8,TWLV(R9)        ADD 12 TO ACCOMMODATE AN EOF RECORD
         C     R8,ENDWRT          ENOUGH ROOM IN BFR FOR THE EOF
         BL    MV0                IF SO, SET UP AN EOF RECORD
         OI    DMSW,RETEOD        ELSE INDICATE NEED TO SET UP/WRT EOF
         MVI   DISP0(R15),LASTREC+ENDPROC  SET FLGS INTO BFR FOR IEBVWS
SETTOWRT  EQU  *
         MVC   READNEXT(DISP4),WRTNEXT SET POINTER FOR USE BY IEBVWS
         L     R15,VIEBVWS        ROUTINE TO SET UP OUTPUT MBBCCHHR'S
         BALR  R14,R15            GO SET UP AND WRT MERGED OUTPUT DIR
         TM    DMSW,RETEOD        NEED TO WRITE SEPARATE EOF RECORD
         BO    SETUPEOF           YES - GO SET UP  EOF RECORD
DONE     EQU   *
         TM    FLG4,ODALT         WAS DIRECTORY JUST WRITTEN TO SYSUT4
         BO    DMTO4              YES - SEE IF I/O ERR OCCURRED TO UT4
         MVC   ERPLMFD(LEN8),OUTFDAD SET PTR TO MOST RECENT MBBCCHHR OF
*                                 AN EOF OF MEMBER DATA FOR WHEN MERGED
*                                 DIRECTORY IS ON THE OUTPUT DATA SET
         MVC   ERPTTR(DISP4),OUTPTTR SAME FOR TTRN OF LAST MEMBER'S EOF
         MVC   ERPTB(LEN2),OUTPTTR+DISP4  SAME FOR TRACK BALANCE
DONE1A   EQU   *
         NI    FLG4,FF-NEWODS     RESET BIT TO INDICATE THAT THE OUTPUT
*                                 DATA SET HAS BEEN WRITTEN TO, I.E.,
*                                 IS NOT UNCHANGED.
DONE1    EQU   *
         MVC   MSG1+LEN1(LEN1),ZROS   CLEAR MSG CODE MAYBE USED YA01719
*                                         IN IGG019FT           YA01719
         L     R13,SV6+SAV4       ADDR OF SAVE AREA +4
         RETURN (14,12)           RETURN TO CALLER
DMTO4    EQU   *
         MVC   ERPLMFD4(LEN8),OUTFDAD  SET PTR TO LATEST MBBCCHHR OF
*                                 AN EOF OF MEMBER DATA FOR WHEN MERGED
*                                 DIRECTORY IS ON THE SYSUT4 DATA SET
         MVC   ERPTTR4(DISP4),OUTPTTR  SAME TTRN OF LAST MEMBER'S EOF
         MVC   ERPTB4(LEN2),OUTPTTR+DISP4  SAME FOR TRACK BALANCE
         B     DONE1A             GO TO EXIT TO CALLER AFTER RESETTING
*                                 'NEWODS' TO INDIC OUTPUT DS WRITTEN
MV0      XC    KLLOC(LEN3,R9),KLLOC(R9) SET KEY/DATALENGTH TO 0 FOR EOF
SETLREP  MVI   DISP0(R9),LASTREC+ENDPROC  SET INDIC FOR IEBVWS USE
         B     SETTOWRT           GO WRT THRU LAST BLOCK AND/OR EOF
CKALLOC  EQU   *
         LH    R15,DBCNT          GET COUNT OF NBR OF BLOCKS BUILT
         LA    R15,LEN1(R15)           ADD 1
         CH    R15,DIRBCNT        IS AT LEAST 1 MORE BLOCK ALLOCATED
         BH    TOOMANY            IF NOT, CLOBBER LAST BLOCK BUILT
         STH   R15,DBCNT          ELSE RETAIN UPDATED BLOCK COUNT
         B     MVNM               GO COMPLETE PREVIOUS BLOCK WITHOUT
*                                 PUTTING IN 'FF'S
SETUPEOF MVC   WRTNEXT(DISP4),BEGFST2  SET UP WHERE TO WRITE FROM FOR
*                                      IEBDWR
         L     R9,WRTNEXT
         XC    LEN1(LEN11,R9),LEN1(R9)
         NI    DMSW,FF-RETEOD     RESET EOD-NEEDED INDICATOR
         B     SETLREP            EOD RECORD SET UP
MVNM     MVC   TWLV(LEN8,R8),OLDKEY    MOVE NAME OF LAST DE INTO KEY
         LH    R7,BC              NBR BYTES USED IN THIS (LAST) BLOCK
         LA    R7,LEN2(R7)        ADD 2 FOR LENGTH OF COUNT AREA
         STH   R7,WKA1
         MVC   TWNTY(LEN2,R8),WKA1 SAVE NO. IN COUNT FIELD OF OUTPUT BL
         MVC   KLLOC(LEN3,R8),KLDL SET KEYLENGTH AND DATALENGTH
         LR    R9,R8              SAVE ADDR OF THIS BLOCK
         LA    R8,BLKLEN(R8)      LOCATE BEGIN NXT POSSIBLE BLK
         LA    R6,BLKLEN(R8)
         C     R6,ENDWRT          ROOM IN BUFFER FOR LAST BLK
         BL    CLEAR              IF SO, SET UP DIR BLK WITH FF'S
         MVI   DISP0(R9),LASTREC+ENDPROC INDIC LAST REC TO BE PROCESSED
         MVC   READNEXT(DISP4),WRTNEXT SET POINTER FOR IEBWSU  @ZA01673
         L     R15,VIEBVWS
         BALR  R14,R15            ELSE GO WRT DIR TO (BUT NOT THRU)
*                                 FF'S RECORD, SINCE IT IS NOT YET SET
*                                 UP
FAKEFFS  EQU   *
         MVC   WRTNEXT(DISP4),BEGFST2  SET UP WHERE TO WTE FROM FOR DWR
         L     R9,WRTNEXT
XC1      EQU   *
         MVI   DISP0(R9),FLGSET   SET F BYTE = 0                 A33294
         XC    TW2(LEN254,R9),TW2(R9)  CLEAR LAST BLOCK
         MVI   TWLV(R9),FF
         MVC   TWLV+LEN1(LEN7,R9),TWLV(R9)  SET KEY TO FF'S
         MVC   TW2(LEN8,R9),TWLV(R9)  MOVE FF'S INTO NAME FIELD
         MVC   KLLOC(LEN3,R9),KLDL  SET KEY-LENGTH AND DATA-LENGTH
         MVC   TW2-LEN2(LEN2,R9),FRTEEN  SET LENGTH FIELD IN DE TO 14
         CLC   DBCNT(LEN2),DIRBCNT     ARE FF'S BEING PLACED IN LAST
*                                   DIRECTORY BLOCK
         BNE   NOPAM2             NO, GO AROUND
         LA    R15,FAKELEN        LOAD LENGTH OF BLOCK
         STH   R15,BPAMOUT+DIRCTDCB  STORE IN BPAM DCB
NOPAM2   EQU   *
         B     TSTTAG3            CK WHERE TO WRT MERGED OUT DIR
CLEAR    LR    R9,R8              GET PTR TO NXT BLOCK
         B     XC1                GO SET UP FF'S RECORD
NULLOUT  MVC   BLOCK+LEN1(LEN3),BEGFST1  INIT PTR TO 1ST BLK TO BUILD
         L     R8,BLOCK
         XC    TW2(LEN254,R8),TW2(R8)  CLEAR AREA FOR 1ST BLK
         ST    R8,WRTNEXT         INITIALIZE WHERE TO START WRT'G
         MVI   DISP0(R8),FLGSET        SET  F=0
         MVC   ENDWRT(DISP4),ENDFST1  SET PTR WHERE TO STOP WRITING
         LA    R6,OUTDCB
         ST    R6,WRTDCB          INDIC DCB TO WRITE TO
         NI    TAG,TAG5+TAG6      RESET ALL BUT POSSIBLE RDBACK-CK BITS
         OI    TAG,TAG1           INDIC WRT'G OUT DIR TO OUTPUT DATASET
         NI    COMDCDSW,FF-COMPRESS    ASSURE THAT BIT INDICATING COM-
*                                 PRESS-IN-PLACE IS OFF
         TM    FLG6,OIC           WERE ALL ODE'S RETAINED IN CORE
         BO    SOPTR              IF SO, SET TO FIND 1ST ODE IN CORE
SETRI    OI    DMSW,R+I           INDICATE NO ODES AND DOING AN IDE
         TM    DMSW,E             ANY INPUT DE'S TO BE MERGED
         BO    FAKEFFS            NO - SET UP A FAKE END-OF-DIRECTORY
*                                 BLOCK
         L     R2,IDEAD           POINT TO IDE TO BE PUT OUT
         B     ADDADE             GO BEGIN TO BUILD OUTPUT DIRECTORY
SOPTR    L     R2,SVFSTO          POINT TO 1ST OUT DIR BLK SAVED INCORE
         ST    R2,ODEPTR          SET INTERNAL PTR
         MVC   DBKEY(LEN8),TWLV(R2)    SAVE KEY
         CLI   TW2(R2),FF         1ST ENTRY NAME = FF
         BE    SETRI              YES - SET TO MERGE ONLY INPUT
         ST    R2,BLKAD           SAVE ADDR OF BLOCK
         LA    R2,TW2(R2)         POINT TO 1ST ENTRY
         ST    R2,DEPTR           SAVE POINTER TO ODE
         B     TME                TEST TO SEE IF ANY IDE'S
CKDEPTR  CLC   DEPTR(LEN4),ZROS   WAS END OF OUTPUT DIRECTORY REACHED
         BNE   RDOUT              NO, JUST END OF BFR.  GO RD MORE ODES
SETR     OI    DMSW,R             YES, INDIC NO MORE ODES TO MERGE
         TM    DMSW,E             ANY MORE IDE'S TO BE MERGED
         L     R2,IDEAD           SET UP REG IN CASE THERE ARE MORE
         BZ    SETI               YES, GO PUT AN IDE INTO MERGED OUTPUT
         B     SETFF              ELSE SET UP MBRNAME OF FF'S
TOIC     TM    FLG6,OIC+ODIC      ALL OUTPUT DE'S IN CORE
         BZ    GOBFR              NO, GET ADDR OF NXT ODE IN I/O BFR
         L     R5,DEPTR
         CLC   DISP0(LEN8,R5),DBKEY  IS THIS LAST ENTRY IN OUT DIR BLK
         BE    BMP1               IF SO, CK FOR ANOTHER BLOCK IN CORE
         SR    R6,R6              ELSE COMPUTE LENGTH OF THIS DE
         IC    R6,LEN11(R5)
         SLL   R6,LEN27
         SRL   R6,LEN26
         LA    R6,TWLV(R6)
         AR    R6,R5              ADD ADDR OF DE TO LENGTH FOR ADDR NXT
         CLI   DISP0(R6),FF       IS NEXT DE NAMED FF'S
         BE    SETR               IF SO, DONE WITH OUTPUT DIRECTORY
         ST    R6,DEPTR           ELSE SAVE ADDR OF NXT DE
TSTEON   TM    DMSW,E             ANY MORE IDE'S
         BO    DOOUT              IF NOT, GO MERGE THIS ODE
         B     SETCOMP            ELSE COMPARE IDE VS. ODE NAMES
BMP1     L     R6,BLKAD
         C     R6,SVLSTO          IS THIS THE LAST BLOCK IN CORE
         BNE   MORBLKS            NO, LOCATE NEXT BLOCK
         TM    FLG6,OIC           WERE ALL ODE'S SAVED IN CORE
         BO    SETR               YES - NO MORE ODE'S TO LOOK AT
         NI    FLG6,FF-ODIC       NO, RESET INDICATOR THAT SOME ARE IN
*                                 CORE - THESE HAVE BEEN PROCESSED AND
*                                 IT IS NOW NECESSARY TO READ INTO THE
*                                 I/O BUFFER
         L     R6,READDCB         POINT TO WHICHEVER DCB IS TO BE READ
         USING IHADCB,R6
         MVC   DCBFDAD(LEN8),OUTDAD1 MOVE MBBCCHHR OF 1ST UNRETANED BLK
         SR    R7,R7
         IC    R7,DCBFDAD+LEN7
         BCTR  R7,R0              SUBTRACT 1 FROM 'R' OF MBBCCHHR -SRCH
         STC   R7,DCBFDAD+LEN7
         B     RDOUT              GO TO READ OUTPUT DIRECTORY INTO BFR
MORBLKS  LA    R6,BLKLEN(R6)      POINT TO NXT BLOCK IN CORE
         ST    R6,BLKAD           SAVE ITS ADDRESS
         MVC   DBKEY(LEN8),TWLV(R6)    SAVE KEY OF THIS BLOCK
         LA    R5,TW2(R6)         PT TO 1ST ENTRY IN BLOCK
         CLI   DISP0(R5),FF       NAME OF 1ST ENTRY = 'FF'
         BE    SETR               YES - DONE WITH OUTPUT DIR
         ST    R5,DEPTR           NO - WANT TO USE 1ST ENTRY NAME
         B     TSTEON             GO CHECK FOR NEED TO COMPARE WITH IDE
SETREC   L     R8,WKA1            GET ADDR OF LAST COMPLETE BLOCK TO BE
*                                 WRITTEN
         MVI   DISP0(R8),LASTREC+ENDPROC  INDIC LST REC TO BE PROCESSED
         L     R10,READNEXT       SAVE PTR WHERE TO READ
         MVC   READNEXT(DISP4),WRTNEXT  SET UP STARTING ADDR FOR VWS
         L     R15,VIEBVWS        ADDR OF RTNE TO PREPARE FOR WRITING
         BALR  R14,R15            LINK TO SET UP MBBCCHHR'S AND WRITE
         OI    DMSW,DIRWRT        INDICATE THAT SOME OF THE DIRECTORY
*                                 HAS NOW BEEN WRITTEN
         ST    R10,READNEXT       RESTORE PTR WHERE TO READ
         MVC   BLOCK(DISP4),WRTNEXT  RESET PTR TO NXT BLOCK TO BE BUILT
         B     INITNXT            SET TO BUILD 1ST BLOCK IN NEXT BFR
TOOMANY  MVI   MSG1+LEN1,NORMOD   MSG CODE - NO MORE SPACE IN OUT DIR
         MVI   MSG1,LASTMSG+PBIT  SET INDICATORS FOR IEBVMS
         MVI   VTMFLG1,UNUSEND    INDICATE UNUSUAL END OF OPERATION
         MVI   PARAMS,NAME        INDICATE NAME TO BE PUT INTO MSG TEXT
         L     R15,NXTINDS        POINT TO INDD NAME
         MVC   NAMEFLD(LEN8),LEN2(R15) PUT NAME INTO PARAMETER AREA
         MVI   NAMEDISP,MSGN      OFFSET IN MSG TEXT FOR NAME
         CLI   RCBUF,RTCDE        IS RETURN CODE 8 OR MORE       A44144
         BNL   DONTSET            YES- DO NOT CHANGE IT          A44144
         MVI   RCBUF,RTCDE        SET RETURN CODE TO 8           A44144
DONTSET  EQU   *                                                 A44144
         OI    FLG7,SUPPRMSG      SET INDICATOR TO SUPPRESS PRINTING
*                                 MEMBERNAME MESSAGE(S)
         L     R15,VIEBVMS        ADDR OF MSG WRITER
         BALR  R14,R15            LINK TO WRITE ERROR MESSAGE
         TM    FLG4,ODALT         WAS THIS MERGE BEING DONE TO UT4
         BZ    TSTDIRW            NO, SEE IF ANY WAS WRITTEN YET
         NI    FLG4,FF-ODALT      YES, RESET SYSUT4 INDICATOR
         B     DONE1              NOW EXIT TO IEBVTM VIA MAIN PGM
TSTDIRW  TM    DMSW,DIRWRT        WAS ANY OF THIS DIRECTORY WRITTEN YET
         BZ    DONE1              NO, EXIT TO IEBVTM VIA MAIN PGM
         TM    STATUS,STAT5       WAS OUTPUT DIRECTORY NULL BEFORE MRGE
         BZ    TSTOIC             IF NOT, SEE IF OUTPUT BLOCKS IN CORE
         MVI   MSG1+LEN1,PLAMPID  YES, SET UP ADDITIONAL MSG CODE
         MVI   MSG1,LASTMSG       INDIC LAST MSG IN LIST
         MVI   RCBUF,RTCD12       SET HIGHEST RETURN CODE        A44144
         L     R15,VIEBVMS        ADDR OF MSG WRITER
         BALR  R14,R15            LINK TO WRITE ERROR MESSAGE
         MVI   TWLV(R8),FF        SET KEYNAME TO FF'S
         MVC   TWLV+LEN1(LEN7,R8),TWLV(R8)
         MVI   DISP0(R8),LASTREC+ENDPROC  FLAG FOR IEBVWS AND IEBDWR
         L     R15,ADLAST
         MVC   DISP0(LEN8,R15),TWLV(R8)  SET NAME OF LAST ENTRY IN THIS
*                                 BLOCK TO FF'S
         LA    R7,LEN8(R0,R8)     * CALCULATE AMOUNT OF SPACE *
         SR    R15,R7             *  USED IN LAST DB =        *
*                                 * ADLAST - (BLOCK+20-12)    *
         STH   R15,BPAMOUT+DIRCTDCB  STORE IN BPAM DCB
         ST    R15,WKA1
         MVC   TWNTY(LEN2,R8),WKA1  UPDATE COUNT FIELD
         MVC   READNEXT(DISP4),WRTNEXT  SET POINTER FOR USE BY IEBVWS
         L     R15,VIEBVWS        WRT TRUNCATED OUTPUT DIRECTORY
         BALR  R14,R15            LINK TO ROUTINE
         B     DONE1              NOW GO TO EXIT TO IEBVTM VIA MAIN PGM
TSTOIC   EQU   *
         TM    FLG6,OIC           ARE ALL OUTPUT DIR BLKS IN CORE
         BO    REWRTOUT           IF SO, THEY CAN BE RE-WRITTEN BACK TO
*                                 THE OUTPUT DATA SET DIRECTORY
         OI    FLG4,ODALT         SET BIT TO CAUSE THE PREVIOUS VALID
*                                 OUTPUT DIRECTORY TO BE COPIED FROM
*                                 SYSUT4 BY THE IEBVTM MODULE
         MVC   OUTFDAD(LEN8),ERPLMFD4  RESET POINTERS AND TRK BAL WHICH
*                                 WERE VALID WHEN UT4 WAS LAST USED
         MVC   OUTPTTR(DISP4),ERPTTR4
         MVC   OUTPTTR+DISP4(LEN2),ERPTB4
         B     DONE1              GO TO EXIT TO IEBVTM VIA MAIN PGM
REWRTOUT EQU   *
         MVC   READNEXT(DISP4),SVFSTO  POINT TO FST SAVED-IN-CORE OUTPT
*                                 DIRECTORY BLOCK TO BE WRITTEN BACK
         MVC   WRTNEXT(DISP4),SVFSTO
         L     R1,SVLSTO          POINT TO LAST SAVED-IN-CORE BLOCK
         MVI   DISP0(R1),LASTREC+ENDPROC  ASSURE THAT THIS BLK IS FLAG-
*                                 GED AS THE LAST ONE TO BE PROCESSED
*                                 AND WRITTEN
         XC    OUTDS1(LEN8),OUTDS1  RESET OUTPUT TTRN TO ZERO (DIRECT)
         MVC   OUTDS1+DISP4(LEN2),TRBALBUF  RESET TRK BAL FOR DIR WRITE
         L     R15,VIEBVWS
         BALR  R14,R15            LINK TO SET UP AND REWRITE OUTPUT DIR
         B     DONE1              GO TO EXIT TO IEBVTM VIA MAIN PGM
         EJECT
ADDENT   MVC   DISP0(LEN1,R8),DISP0(R2) EXEC TO MOVE A DE TO THE OUTPUT
*                                 DIR BLK BEING BUILT
TWO54    DC    H'254'             MAX LENGTH-2 OF 1 DIRECTORY BLOCK
FRTEEN   DC    H'14'              FOR DL FIELD OF DE CONTAINING FF ONLY
KLDL     DC    X'080100'          KEY LENGTH AND DATA LENGTH FOR A
*                                 DIRECTORY BLOCK
KLLOC    EQU   9                  OFFSET FROM START OF A BLK TO KEYLEN
TWLV     EQU   12                 OFFSET FROM START OF A BLK TO KEY
FAKELEN  EQU   14                 LENGTH OF FF'S DIRECTORY
*                                   ENTRY + COUNT
BLKLEN   EQU   276                LENGTH OF 1 ENTIRE BLOCK -
*                                 FLG, MBBCCHHR, KEYLEN, DATALEN, KEY,
*                                 AND DIRECTORY BLOCK
DLEOD    EQU   12                 FOR DATA LENGTH OF EOD RECORD
DISPO    DC    H'22'              THE DISPLACEMENT FROM THE BEGINNING
*                                 OF A DIRECTORY BLOCK TO WHICH
*                                  ENTRIES ARE TO BE ADDED
         DS    0F
PATCHLEN EQU   (*-IEBVDM)/20      LENGTH OF 5 PER CENT PATCH AREA
PATCH    DC    XL(PATCHLEN)'00'   5 PER CENT PATCH AREA          A41780
         EJECT
         DCBD  DSORG=PS
FDAD     EQU   DCBFDAD-IHADCB     OFFSET IN DCB TO DCBFDAD
DIRCTDCB EQU   DCBDIRCT-IHADCB    OFFSET IN DCB TO DIRECTORY BYTE
*                                 COUNT USED IN LAST BLOCK
         EJECT
IEBMCA   DSECT
         IEBMCA
         END
