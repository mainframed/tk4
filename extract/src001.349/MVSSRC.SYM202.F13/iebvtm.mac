         TITLE 'IEBVTM - INTERMEDIATE AND FINAL TERMINATION PROCESSOR'
IEBVTM   CSECT
*A 052980-052984679600-679984,747500                           @YM06438
*C751000                                                         A41780
*A678500,679000                                                  A37881
*A051500,655092-655095                                           A44144
*C052020,125945,125953                                           A44144
*A558540-558552                                                  A48762
*A059500,666500,674500,710500-710700                             A48806
***********************************************************************
*C147000                                                         A41828
* 532330-532420,552000,725000                                    X010XX
*D427000-431000,466000-474000                                  @YA02527
*A076500-076800                                                @ZA01676
*C077000                                                       @ZA01676
*D089000-093000                                                @ZA01676
*A679905,679910,679993                                         @ZA04372
*C655490                                @XA19752,@YA19226,(ORG)@ZA24954
*
*        FUNCTION -
*            - CLOSE AND/OR RE-INITIALIZE APPROPRIATE DCB'S
*            - IF NECESSARY, COPIES 'SPILLED' MERGED OUTPUT DIRECTORY
*              FROM SYSUT4 TO OUTPUT DATA SET
*            - WRITES APPROPRIATE TERMINATION MSGS
*
*        INPUT - R15 = ADDR OF IEBVTM
*              - R13 = CALLER'S SAVE AREA
*              - R4  = POINTER TO COMMUNICATION AREA
*
*        SUBROUTINES CALLED -
*              IEBVMS - MESSAGE WRITER
*              IEBDRD - READ ROUTINE
*              IEBDWR - WRITE ROUTINE
*
*        EXITS -
*            - TO 'IEBSCN' IF NECESSARY TO READ MORE CONTROL CARDS
*            - TO 'IEBMNI' IF NECESSARY TO PROCESS ''THE NEXT'' INPUT
*              DATA SET IN THE CURRENT ''INDD-GROUP''
*            - TO THE CALLER/SYSTEM IF AT END-OF-JOB
*
*        REGISTER DEFINITION
*
R0       EQU   0                  WORK/PARAM REG
R1       EQU   1                  WORK/PARAM REG
R2       EQU   2                  USED INTERNALLY TO POINT TO DCB
R3       EQU   3                  WORK REG
R4       EQU   4                  ADDR OF IEBMCA
R5       EQU   5                  INTERNAL SUBROUTINE LINKAGE REG
R6       EQU   6                  WORK REG
R7       EQU   7                  WORK REG
R8       EQU   8                  WORK REG
R9       EQU   9                  WORK REG
R10      EQU   10                 BASE REG
R11      EQU   11                 WORK REG
R12      EQU   12                 WORK REG
R13      EQU   13                 ADDR OF REG SAVE AREA
R14      EQU   14                 PARAM/LINK REG
R15      EQU   15                 PARAM/LINK REG
ZERO     EQU   0
ONE      EQU   1
OPEN     EQU   X'10'              FOR TESTING DCBOFLGS
LWR      EQU   X'80'              TO SET DCBOFLGS IN OUTDCB, INDICATING
*                                 LAST OPERATION WAS A WRITE
PAMDIR   EQU   X'80'              FOR SETTING BPAM DCB - OUTPUT
FF       EQU   X'FF'
RTCD     EQU   C'4'
RCRFRSH  EQU   C'0'               TO REFRESH RETURN CODE IN IEBMCA
RCCHAR8  EQU   C'8'               TO SET RETURN CODE IF REQUIRED A44144
D8       EQU   8                  LENGTH OR DISPLACEMENT OF 8
D2       EQU   2
D4       EQU   4
D0       EQU   0
MS7      EQU   7
D10      EQU   10
X00      EQU   X'00'
D3       EQU   3
D1       EQU   1
X01      EQU   X'01'
D5       EQU   5
D12      EQU   12
MS8      EQU   8
D6       EQU   6
MS1      EQU   1
O33      EQU   33             OFFSET IN MSG TEXT FOR OUTDD NAME  A36049
OFF20    EQU   20                 DISP IN MSG FOR ' COPIED '     X010XX
OFF27    EQU   27                 DISP IN MSG FOR ' COPIED '     X010XX
OFF31    EQU   31                 DISP IN MSG FOR ' COPIED '     X010XX
OFF63    EQU   63                 DISP IN MSG FOR NAME           X010XX
D7       EQU   7
D9       EQU   9
D16      EQU   16
MS11     EQU   11                 MASK IN BCR INSTR              X010XX
C0       EQU   C'0'
X0A      EQU   X'0A'              DISP IN MSG FOR NBR OF TRKS
X41      EQU   X'41'              DISP IN MSG FOR OUTDD NAME
X0F      EQU   X'0F'              RETURN CODE BITS (HIGH ORDER)
D48      EQU   48                 LENGTH OF DDLIST
SP253    EQU   253                SUBPOOL FOR PLPA STORAGE     @YM06438
C24      EQU   24                 SHIFT SP TO HIGH-ORDER BYTE  @YM06438
         EJECT
* CALLER'S REGS ARE NOT SAVED, AS CALLER IS NOT RETURNED TO
         LR    R10,R15            ADDRESSIBILITY
         USING IEBVTM,R10
         USING IEBMCA,R4
         LA    R13,RSA            ADDR OF SAVE AREA FOR CALLED RTNES
         NI    FLG7,NOPRNBDB+SUPPRMSG  RESET SEVERAL BITS
         SR    R7,R7              INDICATE NO FREEPOOL NEEDED    A48806
         LA    R2,INDCB
         USING IHADCB,R2
         BAL   R3,CLOSE           CLOSE INPUT DCB IF IT IS OPEN  X010XX
         LA    R2,LOADDCB         POINT TO LOAD DCB              X010XX
         BAL   R3,CLOSE           CLOSE LOAD DCB IF IT IS OPEN   X010XX
         SPACE 2
TSTTER   EQU   *
         TM    VTMFLG1,NOMAIN     WAS GETMAIN NOT SATISFACTORY
         BO    WEJFTM             YES - WRITE EOJ MSGS AND TERMINATE
         TM    VTMFLG1,UNUSEND    DID A NON-I/O ERROR OCCUR
         BO    TSTVAL             YES - SEE IF IT WAS IN IEBDV1
         TM    VTMFLG1,IOERROR    DID A NON-FATAL I/O ERROR OCCUR
         BO    TSTERFS            YES - SEE WHAT TYPE OF ERROR
         SPACE 2
* NORMAL END OF INPUT DATA SET PROCESSING HAS OCCURRED -
         TM    ULLDST,UNLOAD      UNLOAD OPERATION               X010XX
         BO    VTM00120           YES-GO TO ROUTINE FOR NORMAL   X010XX
*                                 UNLOAD OPERATION TERMINATION   X010XX
         SPACE 2
         BAL   R5,RESUT34         LINK TO RESET UT3/4 DCB'S IF REQUIRED
         TM    FLG4,ODALT         IS DIRECTORY ON SYSUT4       @ZA01676
         BZ    NRC1               IF NOT, DONT RE-COPY IT      @ZA01676
         BAL   R5,RCPY            IF UT DIRECTORY IS ON SYSUT4,@ZA01676
*                                 RE-COPY TO THE OUTPUT DS     @ZA01676
NRC1     SR    R8,R8                                           @ZA01676
         CH    R8,INDDCT          ANY MORE INPUT DATA SETS IN THE CUR-
*                                 RENT 'INDD-GROUP'
         BNE   GETNXTIN           YES - SET UP TO PROCESS NEXT ONE
         TM    CCSWITCH,SYSINEOF  EOF ON SYSIN (NO MORE CONTROL STMTS)
         BO    NORMTALT           YES - SEE IF NEED TO RE-COPY FROM UT4
         TM    PARMSWCH,COPYNOW   NO - IS NXT CTL STATEMENT A 'COPY'
         BZ    PRNIGRP            NO - GO TO PREPARE TO PROCESS NEXT
*                                 ''INDD-GROUP''
         SPACE 2
NORMTALT EQU   *                  THE FOLLOWING CODE WILL BE EXECUTED
*                                 WHEN ''NORMAL'' END OF COPY STEP/OP-
*                                 ERATION HAS OCCURRED
         BAL   R5,PRTMBRS         PRINT NAMES OF MEMBERS COPIED
         BAL   R5,PS0             SEE IF A SELECTIVE COPY
         BAL   R5,PUDUT           PRT UNUSED TRACKS/BLOCKS MSGS
         BAL   R5,PREDASD     SEE IF OUTPUT PDS HAD TOO MANY     A36049
*                      DIRECTORY BLOCKS PER TRACK                A36049
         BAL   R5,COUTDCB         CLOSE OUTPUT DCB IF IT IS OPEN
         TM    CCSWITCH,SYSINEOF  DID EOF ON SYSIN OCCUR
         BZ    RMISC              IF NOT, GO TO EXIT TO IEBSCN
         TM    VTMFLG1,NOMAIN     WAS IT NECESSARY FOR CORE TO BE FREED
         BZ    EOJMS              NO, WRITE EOJ MSG AND END JOB
         BAL   R5,RESODS          YES, LINK TO SET UP BPAM DCB
         B     EOJMS              WRITE EOJ COMPLETION CODE MSG, CLOSE
*                                 ALL OPEN DCB'S, FREE CORE, AND RETURN
*                                 TO SYSTEM/INVOKER
         SPACE 2
PRNIGRP  EQU   *                  EXECUTED WHEN AN INP DATASET'S X010XX
*                   MEMBRS HAVE BEEN ''NORMALLY'' COPIED/LOADED, X010XX
*                   THIS WAS THE LAST INPUT DATA SET IN THE CURRENT
*                   INDD-GROUP, AND THE NEXT CONTROL STATEMENT TO BE
*                   PROCESSED IS NOT A 'COPY' STATEMENT.
         BAL   R5,RESOUT          RESET OUTDCB FOR USE WITH NEXT INDD
         BAL   R5,PRTMBRS         IF DIRECTORY NOT ON SYSUT4, PRINT
*                                 NAMES OF MEMBERS JUST COPIED
         BAL   R5,PS0             SEE IF A SELECTIBE COPY
         B     RMISC              SET UP AND EXIT TO IEBMNI IN MAIN
*                                 CSECT OF PROGRAM
         SPACE 2
GETNXTIN EQU   *                  EXECUTED WHEN AN INP DATASET'S X010XX
*                   MEMBRS HAVE BEEN ''NORMALLY'' COPIED/LOADED, X010XX
*                   THERE IS ANOTHER INPUT DATA SET TO BE PROCESSED IN
*                   THE CURRENT ''INDD-GROUP''.
         BAL   R5,RESOUT          RESET OUTDCB FOR USE WITH NEXT INDD
         BAL   R5,PRTMBRS         PRT NAMES OF MBRS JUST COPIED UNLESS
*                                 OUTPUT DIRECTORY IS ON SYSUT4
         B     SLOCOR             RESET POINTERS AND EXIT TO IEBMNI
         SPACE 2
VTM00120 EQU   *                  THIS CODE IS EXECUTED AFTER    X010XX
*                   NORMAL COMPLETION OF AN UNLOAD OPERATION     X010XX
         BAL   R5,PRTMBRS         PRINT NAMES OF MEMBRS UNLOADED X010XX
         BAL   R5,PS0             SEE IF A SELECTIVE UNLOAD AND  X010XX
*                                 IF SO LOOK FOR UNFOUNDS        X010XX
         BAL   R5,RESUT34         TO RESET UT3 DCB IF REQUIRED   X010XX
         SR    R8,R8                                             X010XX
         CH    R8,INDDCT          MORE INPUT DATASETS IN         X010XX
*                                 CURRENT INDD GROUP             X010XX
         BE    VTM00130           NO-DO NOT PRINT ERROR MSG      X010XX
         BAL   R5,VTM00150        WRITE ERRMSG,SET RET CODE      X010XX
VTM00130 EQU   *                                                 X010XX
         TM    CCSWITCH,SYSINEOF  EOF ON SYSIN                   X010XX
         BO    EOJMS              WRITE EOJ COMPLETION CODE MSG, X010XX
*                                 CLOSE ALL OPEN DCB'S,FREE CORE X010XX
*                                 AND RETURN TO SYSTEM/INVOKER   X010XX
         OI    FLG4,NEWODS        INDICATE NEXT OUTPUT DATASET'S X010XX
*                                 DIRECTORY NOT UPDATED          X010XX
         TM    PARMSWCH,COPYNOW   IS NEXT CONTROL STMT A 'COPY'  X010XX
         BO    VTM00140           YES - GO AROUND                X010XX
         OI    PARMSWCH,FLUSHSW   NO - CAUSE IEBSCN TO FLUSH TO  X010XX
*                                 NEXT 'COPY' COMMAND OR TO /*   X010XX
         SR    R8,R8                                             X010XX
         CH    R8,INDDCT          ERRMSG ALREADY PRINTED         X010XX
         BNE   VTM00140           YES - GO AROUND                X010XX
         BAL   R5,VTM00150        NO - WRITE ERRMSG,SET RET CODE X010XX
VTM00140 EQU   *                                                 X010XX
         XC    INDDCT(D2),INDDCT  SET CNT PENDING INDD'S TO ZERO X010XX
         B     RMISC              SET TO EXIT TO IEBSCN          X010XX
VTM00150 EQU   *                                                 X010XX
         MVI   MSG1+D1,MTOINDS    MSGCODE-MORE THAN ONE INP DSET X010XX
         MVI   MSG1,LASTMSG       INDICATE LAST MESSAGE          X010XX
         L     R15,VIEBVMS        ADDR OF MESSAGE WRITER         X010XX
         BALR  R14,R15            LINK TO WRITE MESSAGE          X010XX
         CLI   RCBUF,RCCHAR8      RETURN CODE GE 8               A44144
         BCR   MS11,R5            YES-RETURN TO CALLER           X010XX
         MVI   RCBUF,RCCHAR8      SET RETURN CODE TO 8           A44144
         BR    R5                 RETURN TO CALLER               X010XX
         SPACE 2
TSTVAL   EQU   *
         OI    FLG7,SUPPRMSG      SET SWITCH SO THAT MEMBSERS COPIED
*                                 MSGS WILL NOT BE ISSUED
         TM    IOEF2,NOSYSIN      WAS THERE A PROBLEM EITHER OPENING OR
*                                 USING SYSIN
         BZ    TVFL               NEITHER - HANDLE AS ANY OTHER NON-I/O
*                                 ERROR
         TM    ULLDST,UNLOAD      IS THIS AN UNLOAD OPERATION    X010XX
         BO    WEJFTM             YES-WRT EOJ MSGS AND TERM JOB  X010XX
         TM    FLG4,NEWODS        WAS ANYTHING WRITTEN TO THE OUTPUT
*                                 DATA SET
         BO    WEJFTM             NO - WRT EOJ MSGS AND TERMINATE JOB
         TM    FLG4,ODALT         IS MERGED DIRECTORY ON SYSUT4
         BO    T03RCPY            YES - RECOPY AND RESET OUTDCB
         BAL   R5,CLODS           NO - SET OUTDCB TO PREVIOUS VALID EOF
         B     WEJFTM             WRT EOJ MSGS AND TERMINATE JOB STEP
T03RCPY  EQU   *
         BAL   R5,RCPY            RE-COPY DIRECTORY FROM SYSUT4 TO OUT-
*                                 PUT DATA SET
         LA    R2,OUTDCB
         TM    DCBOFLGS,OPEN      IS OUTPUT DCB OPEN
         BZ    WEJFTM             NO - WRT MSGS AND TERMINATE JOB STEP
         MVC   DCBFDAD(D8),ERPLMFD4    POINT TO PREVIOUS VALID EOF FOR
*                                      WHEN DIR WAS WRITTEN TO SYSUT4
         MVC   DCBTRBAL(D2),ERPTB4     SET PREVIOUS VALID TRACK BALANCE
         MVC   DCBRELAD(D4),ERPTTR4  SET PREV VAL LAST REC TTRN  A41828
         BAL   R5,CLODCB          CLOSE OUTPUT DCB
         B     WEJFTM             WRT EOJ MSGS AND TERMINATE JOB STEP
         SPACE 2
TVFL     EQU   *
         TM    FLG4,NEWODS        WAS ANYTHING WRITTEN TO THE OUTPUT
*                                 DATA SET YET
         BO    RSUTS              NO - SET UP TO FLUSH
ERF7ON   EQU   *                  I/O ERROR WRITING TO SYSUT3
ERF8ON   EQU   *                  I/O ERROR READING FROM SYSUT3
         TM    ULLDST,UNLOAD      IS THIS AN UNLOAD OPERATION    X010XX
         BO    RSUTS              YES-SKIP                       X010XX
         TM    FLG4,ODALT         IS MERGED DIRECTORY ON SYSUT4
         BZ    SKR9               NO
         BAL   R5,RCPY            RE-COPY DIRECTORY FROM UT4 TO OUTDCB
SKR9     EQU   *
         BAL   R5,PRTMBRS         PRINT NAMES OF MEMBERS JUST COPIED
         BAL   R5,PAMSETUP        SET UP FOR BPAM CLOSE
         BAL   R5,COUTDCB         SET OUTDCB TO ''CURRENT'' EOF STATUS
         SPACE 2
RSUTS    EQU   *
         BAL   R5,RESUT34         RESET SYSUT3 AND SYSUT4 DCB'S
         TM    VTMFLG1,NOMAIN     WAS IT NECESSARY FOR CORE TO BE FREED
         BZ    TSEOF              NO, DONT SET UP BPAM DCB
         BAL   R5,RESODS          YES, LINK TO SET UP BPAM DCB
TSEOF    EQU   *
         TM    CCSWITCH,SYSINEOF  DID EOF OCCUR ON SYSIN
         BO    WEJFTM             YES- WRT EOJ MSGS AND TERMINATE JOB
         NI    IOEF2,SPRNOPN      RESET ALL BUT POSSIBLY THIS BIT
         XC    INDDCT(D2),INDDCT  SET COUNT OF PENDING INDD'S TO ZERO
         BAL   R5,CLODS           CLOSE OUTPUT DCB TO PREVIOUS VALID
*                                   EOF
         OI    FLG4,NEWODS        SET INDICATION THAT (NEXT) OUTPUT DA-
*                                 TA SET HAS NOT BEEN WRITTEN TO
         TM    PARMSWCH,COPYNOW   IS NEXT CONTROL STMT A 'COPY'
         BO    RMISC              YES - SET TO EXIT TO IEBSCN
         OI    PARMSWCH,FLUSHSW   NO - SET TO CAUSE IEBSCN TO 'FLUSH'
*                                 TO NEXT 'COPY' COMMAND OR TO '/*'
         B     RMISC              NOW SET TO EXIT TO IEBSCN
         SPACE 2
TSTERFS  EQU   *                  THIS CODE EXECUTED WHEN A ''HARD''
*                                 I/O ERROR HAS OCCURRED
         TM    IOEF1,ERF2         I/O ERROR READING INPUT DIRECTORY
         BO    ERF2ON             YES - SEE IF SELECT WAS BEING DONE
         TM    IOEF1,ERF3         I/O ERROR READING MEMBER DATA
*                                 OR I/O ERR LOADING/UNLOADING   X010XX
         BO    ERF3ON             YES - SEE IF ANY DATA WRITTEN TO OUT-
*                                 PUT DATA SET
         TM    IOEF1,ERF4         I/O ERROR READING OUTPUT DIRECTORY
         BO    ERF4ON             YES - CHECK FOR ERF10 ON
         TM    IOEF1,ERF5         I/O ERROR WRITING DIRECTORY TO OUTDCB
         BO    ERF5ON             YES - CLOSE OUTPUT DCB
         TM    IOEF1,ERF6         I/O ERROR WRITING MEMBER DATA
         BO    ERF6ON             YES
         TM    IOEF1,ERF7         I/O ERROR WRITING TO SYSUT3
         BO    ERF7ON             YES
         TM    IOEF1,ERF8         I/O ERROR READING FROM SYSUT3
         BO    ERF8ON             YES
         TM    IOEF2,ERF9         I/O ERROR WRITING DIRECTORY TO UT4DCB
         BO    ERF9ON             YES
         TM    IOEF2,ERF10        I/O ERROR READING DIRECTORY FROM UT4
         BO    ERF10ON            YES - CHECK FOR ERF4 ON
***** NOTE - THE FOLLOWING CODE SHOULD NEVER GET EXECUTED -
         B     WEJFTM             WRITE EOJ ERROR MESSAGE, EOJ COMPLE-
*                                 TION CODE MSG, CLOSE ALL OPEN DCB'S,
*                                 FREE CORE, AND RETURN TO SYSTEM/CALLR
         SPACE 2
ERF2ON   EQU   *                  I/O ERR READING INPUT PDS DIRECTORY
         TM    COMDCDSW,SELECTSC  WAS A SELECTIVE COPY BEING DONE
         BZ    ERF3ON             NO, SEE IF ANY OUTPUT WAS WRITTEN YET
         L     R6,SEBEGIN         ADDR OF SETAB
ERF2L1   EQU   *
         TM    D0(R6),SEBIT1+SEBIT4  IS DONTCOPY OR NEWNAME BIT ON
         BC    MS7,ERF2L2         YES- SEE IF THIS IS THE LAST ENTRY
         TM    D0(R6),SEBIT5      NO- WAS THIS MEMBERNAME ''FOUND''
         BO    ERF2L3             YES - GET MEMBERNAME FROM THE IDE
ERF2L2   EQU   *
         TM    D0(R6),SEBIT6      IS THIS THE LAST ENTRY IN THE SETAB
         LA    R6,D10(R6)         BUMP POINTER IN CASE IT ISNT
         BZ    ERF2L1             NOT LAST ENTRY - CHECK NEXT
         B     ERF3ON             NOW SEE IF ANY OUTPUT WAS WRITTEN YET
ERF2L3   EQU   *
         MVI   WKA1,X00
         MVC   WKA1+D1(D3),D3(R6) SET POINTER TO IDE INTO WORK AREA (ON
*                                 FULL-WORD BOUNDARY) - POINTER MAY BE
*                                 AN IN-CORE ADDRESS OR A SYSUT3 TTR.
         TM    D2(R6),X01         IS THE IDE ON SYSUT3
         BO    ERF2RUT3           YES - SET TO READ IT FROM SYSUT3
         L     R7,WKA1            NO - GET POINTER TO MBRNAME IN IDE
ERF2SM   EQU   *
         MVI   MSG1+D1,MFBNC      MSG CODE- MBR FOUND BUT NOT COPIED
         MVI   MSG1,LASTMSG+PBIT  LAST MSG+BUILD
         MVI   PARAMS,NAME+MSGULLD     INDIC NAME PARAMETER AND  X010XX
*                                      ' COPIED ' IN MSG         X010XX
         MVI   COPDISP,OFF27      OFFSET OF ' COPIED ' IN MSG    X010XX
         MVC   NAMEFLD(D8),D0(R7) NAME OF MEMBER TO MSG PARAMETER AREA
         L     R15,VIEBVMS        ADDR OF MSG WRITING ROUTINE
         BALR  R14,R15            LINK TO WRITE MSG
         B     ERF2L2             SEE IF MORE MEMBERNAMES
ERF2RUT3 EQU   *
         L     R0,WKA1            GET SYSUT3 TTR OF SPILLED IDE
         LA    R1,UT3DCB          SET TO CONVERT
         LA    R2,D5(R1)          POINT TO FDAD FIELD OF SYSUT3 DCB
         L     R15,VTTOCC
         BALR  R14,R15            LINK TO CONVERT TTR TO MBBCCHHR
         MVI   SENSE,SENSE1+SENSE3 SET TO READ FROM SYSUT3
         L     R15,VIEBDRD
         BALR  R14,R15            LINK TO READ THE SPILLED IDE
         L     R7,ADWK            ADDR OF WHERE IDE WAS READ INTO
         LA    R7,D12(R7)         POINT TO IDE WITHIN WORK BUFFER
         B     ERF2SM             GO TO PUT MEMBERNAME FROM THE SPILLED
*                                 IDE INTO THE MESSAGE
         SPACE 1
ERF3ON   EQU   *                  I/O ERROR READING MEMBER DATA
*                                 OR I/O ERROR LOADING/UNLOADING X010XX
         TM    ULLDST,UNLOAD      UNLOAD OPERATION               X010XX
         BO    RSUTS              YES - GO AROUND                X010XX
         TM    FLG4,NEWODS        ANYTHING WRITTEN TO OUTPUT DATA SET
         BO    ERF5ON             IF NOT, DONT PRINT TRKS/BLKS MESSAGES
         BAL   R5,PUDUT           WRITE UNUSED TRKS / UNUSED BLKS MSGS
ERF5ON   EQU   *                  I/O ERROR WRITING DIRECTORY TO OUTDCB
ERF6ON   EQU   *                  I/O ERROR WRITING MEMBER DATA
ERF9ON   EQU   *                  I/O ERROR WRITING DIRECTORY TO UT4DCB
ERF10ON  EQU   *                  I/O ERROR READING DIRECTORY FROM UT4
         BAL   R5,CLODS                SET OUTDCB TO PREVIOUS VALID EOF
         B     RSUTS              GO TO RESET UT3/UT4 DCB'S AND FLUSH
         SPACE 2
ERF4ON   EQU   *                  I/O ERR READING OUTPUT DIRECTORY
         TM    IOEF2,ERF10        DID ERROR OCCUR WHILE READING FROM
*                                 SYSUT4
         BZ    ERF5ON             NO
*                                 YES - MUST HAVE BEEN DURING OUTPUT
*                                 PRESCAN, SINCE ERF4 AND ERF10 BOTH ON
         B     ERF3ON             SEE IF COPYING HAS BEEN DONE TO THE
*                                 OUTPUT DATA SET
         SPACE 2
***********************************************************************
RESUT34  LA    R2,UT3DCB
         TM    DCBOFLGS,OPEN      IS SYSUT3 DCB OPEN
         BZ    RPT1               IF NOT, SEE IF UT4 DCB IS OPEN
         MVC   UT3DS1(D8),SYS3TTR RE-INIT PTR TO CURRENT UT3 TTR + TB
         MVC   DCBFDAD(D8),UT3FDAD SET DCB TO ADDR OF WHERE TO PUT DATA
RPT1     LA    R2,UT4DCB
         TM    DCBOFLGS,OPEN      IS UT4DCB OPEN
         BCR   MS8,R5             IF NOT, RETURN TO CALLER
         MVC   UT4DS1(D8),SYS4TTR RE-INIT PTR TO CURRENT UT4 TTR + TB
         MVC   DCBFDAD(D8),UT4FDAD SET DCB TO ADDR OF WHERE TO PUT DATA
         BR    R5                 NOW RETURN TO CALLER
***********************************************************************
         SPACE 2
***********************************************************************
RCPY     EQU   *                  RE-COPY MERGED OUTPUT DIRECTORY FROM
*                   SYSUT4 TO OUTPUT DATA SET
         ST    R5,SAV5            SAVE CALLER'S LINKREG
         BAL   R5,RESOUT          RESET OUTDCB FOR RECOPYING OUTPUT DIR
         BAL   R5,RESUT34         RESET SYSUT3 AND SYSUT4 DCB'S
BCBSET   EQU   *
         XC    OUTDS1(D4),OUTDS1  SET TTRN TO ZEROES, FOR DIRECTORY
         MVC   OUTDS1+D4(D2),TRBALBUF  SET TRK BAL TO= TRK CAPACITY
         MVI   UT4SCTOR,X00       SET UT4 AND OUTPUT SECTOR      S20201
         MVI   OUTSCTOR,X00         VALUES TO 0 (USED ONLY IF    S20201
*                                   THEY ARE ON RPS DEVICES)     S20201
         NI    TAG,TAG5+TAG6
         OI    TAG,TAG1           INDIC WRT'G OUTPUT DIRECTORY TO OUTDS
         NI    STATUS,STAT7
         OI    STATUS,STAT3       INDIC READ'G DIRECTORY FROM UT4
         MVI   SENSE,X00
         MVI   FLG2,X00           RESET EOF-REACHED SWITCH
RWLOOP   MVC   READNEXT(D4),BCB   SET POINTER FOR IEBDRD
         L     R15,VIEBDRD
         BALR  R14,R15            GO TO READ SPILLED, MERGED OUTPUT
*                                 DIRECTORY FROM SYSUT4
         MVC   WRTNEXT,BCB        SET POINTER FOR IEBDWR
         L     R15,VIEBVWS
         BALR  R14,R15            GO TO WRITE MERGED OUTPUT DIRECTORY
*                                 (WHICH WAS JUST READ FROM SYSUT4)
*                                 ONTO OUTPUT DATA SET.
         TM    FLG2,RDEOF         WAS EOF READ/WRITTEN
         BZ    RWLOOP             IF NOT, LOOP TO READ AND WRITE MORE
         LA    R2,UT4DCB
         MVC   DCBFDAD(D8),UT4FDAD RESET SYSUT4 DCBFDAD POINTER
         MVC   OUTDS1(D6),OUTPTTR  RESET OUTPUT TTRN AND TRBAL
         NI    FLG4,FF-ODALT      RESET INDICATOR - MERGED OUTPUT DI-
*                                 RECTORY IS NO LONGER ON SYSUT4
         CLC   FCT(D2),ZROS       WERE ANY CTLTAB ENTRIES BUILT FOR THE
*                                 CURRENT INPUT DATA SET JUST PROCESSED
         BNE   SOMEFD             IF SO, GO ON
         MVI   FCT+D1,ONE         ELSE SET FCT TO FAKE OUT PRINTING OF
*                               NAMES OF MEMBERS 'JUST' COPIED
SOMEFD   EQU   *
         L     R5,SAV5            RESTORE CALLER'S LINK REG
         BR    R5                 RETURN TO CALLER
***********************************************************************
         SPACE 2
***********************************************************************
RESOUT   LA    R2,OUTDCB          POINT TO OUTPUT DCB
         TM    DCBOFLGS,OPEN      IS THE DCB OPEN
         BCR   MS8,R5             NO- DONT RESET IT
         L     R3,DCBDEBAD        POINT TO OUTPUT DCB'S DEB
         LA    R3,D0(R3)
         USING DXDEB,R3
         XC    DCBFDAD(D8),DCBFDAD ZERO OUT CURRENT FDAD
         MVC   DCBFDAD+D1(D6),DXDEBBIN PUT IN BBCCHH OF OUTPUT DIRECT.
         DROP  R3
         MVC   OUTDS1(D6),OUTPTTR SET TTRN AND TRACK BALANCE TO REFLECT
*                                 STATUS OF OUTPUT DATA SET AFTER LAST
*                                 DATA RECORD WAS WRITTEN.
         BR    R5                 EXIT TO CALLER
***********************************************************************
         SPACE 2
***********************************************************************
COUTDCB  LA    R2,OUTDCB          POINT TO OUTPUT DCB
         TM    DCBOFLGS,OPEN      IS THE DCB OPEN
         BCR   MS8,R5             IF NOT, IT HASN'T BEEN WRITTEN TO
         MVC   DCBFDAD(D8),OUTFDAD SET DCB TO POINT TO EOF OF DATA SET
         MVC   DCBTRBAL(D2),OUTPTTR+D4  SET TRKBAL INTO DCB FOR CLOSE
         MVC   DCBRELAD(D4),OUTPTTR    PUT LAST REC'S TTRN INTO DCB
CLODCB   OI    DCBOFLGS,LWR       INDIC LAST OPERATION WAS WRITE
         CLOSE ((R2))             CLOSE OUTPUT DATA SET
         BR    R5                 RETURN TO CALLER
CLODS    LA    R2,OUTDCB
         TM    DCBOFLGS,OPEN      IS THE DCB OPEN
         BCR   MS8,R5             IF NOT, IT HASN'T BEEN WRITTEN TO
         MVC   DCBFDAD(D8),ERPLMFD POINT TO PREVIOUS VALID EOF FOR WHEN
*                                 DIRECTORY WAS WRITTEN TO THE OUTPUT
*                                 DATA SET
         MVC   DCBTRBAL(D2),ERPTB  SET PREVIOUS VALID TRACK BALANCE
         MVC   DCBRELAD(D4),ERPTTR SET PREVIOUS VALID LASTREC TTRN
         B     CLODCB             GO SET OFLGS AND CLOSE DCB
***********************************************************************
         SPACE 2
***********************************************************************
PRTMBRS  EQU   *                  PRINT NAMES OF MEMBERS COPIED TO THE
*                                 OUTPUT DATASET
         TM    FLG7,SUPPRMSG      ARE MBRNAMES TO BE PRINTED
         BCR   MS1,R5             IF SO, DONT PRINT MEMBERS COPIED MSGS
         CLC   FCT(D2),ZROS       WERE ANY CTLTAB ENTRIES BUILT FOR THE
*                                 CURRENT INPUT DATA SET
         BCR   MS8,R5             IF NOT, DONT TRY TO PRINT MBRNAMES
         TM    COMDCDSW,LISTSW    WAS ''LIST = NO'' SPECIFIED
         BO    TJCM4              YES - DONT PRINT MESSAGE
         MVI   MSG1,LASTMSG+PBIT  INDIC LAST MSG AND USE PARAMETER LIST
         MVI   MSG1+D1,FOLLMCPD   MESSAGE CODE
         MVI   PARAMS,NAME+MSGULLD     INDIC NAME PARAMETER AND  X010XX
*                                      ' COPIED ' IN MSG         X010XX
         MVI   NAMEDISP,OFF63     OFFSET IN MSG TEXT FOR NAME    X010XX
         MVI   COPDISP,OFF20      OFFSET OF ' COPIED ' IN MSG    X010XX
         L     R3,NXTINDS         POINT TO INDD SLOT
         MVC   NAMEFLD(D8),D2(R3) PUT INDD NAME INTO PARAMETER LIST
         L     R15,VIEBVMS        ADDR OF MSG WRITER
         BALR  R14,R15            LINK TO WRITE MSG
TJCM4    EQU   *
         L     R3,CTAD            ADDRESS OF CTLTAB
TJC      TM    D1(R3),JSTCPD      WAS THIS MEMBER 'JUST NOW' COPIED
         BO    PUTIT              YES, GO WRT MSG AND RESET 'JSTCPD'
TSTBIT6  TM    D0(R3),SEBIT6      IS THIS THE LAST CTLTAB ENTRY
         BCR   MS1,R5             YES, EXIT TO CONTINUE PROCESSING
         LA    R3,D10(R3)         NO, POINT TO NEXT CTLTAB ENTRY
         B     TJC                GO TEST TO SEE IF MBRNAME TO PRINT
PUTIT    EQU   *
         TM    IOEF2,SPRNOPN      IS SYSPRINT USABLE
         BO    NONAMPRT           IF NOT, DONT BOTHER TO SET UP MSG
         TM    COMDCDSW,LISTSW    WAS ''LIST=NO'' SPECIFIED
         BO    NONAMPRT           YES - DONT LIST NAMES OF MBRS COPIED
         TM    D0(R3),SEBIT1      IS THIS A NEWNAME
         BZ    REGMSG             NO, SET UP 'NORMAL' MSG CODE
         MVI   MSG1+D1,RNMEMCOP   YES, SET UP 'NEWNAME' MSG CODE
         B     SLP                BRANCH AROUND 'NORMAL' MSG CODE
REGMSG   MVI   MSG1+D1,MEMCOP     SET UP NORMAL (NOT NEWNAME) MSG
SLP      MVC   NAMEFLD(D8),D2(R3) MEMBERNAME TO IEBVMS PARAM AREA
         MVI   MSG1,LASTMSG+PBIT  SET INDICATORS FOR IEBVMS INTERFACE
         MVI   PARAMS,NAME+MSGULLD     INDIC NAME PARAMETER AND  X010XX
*                                      ' COPIED ' IN MSG         X010XX
         MVI   COPDISP,OFF31      OFFSET OF ' COPIED ' IN MSG    X010XX
         MVI   NAMEDISP,X00       OFFSET IN MSG FOR NAME
         L     R15,VIEBVMS
         BALR  R14,R15            LINK TO PRINT MSG
NONAMPRT NI    D1(R3),FF-JSTCPD   RESET NEED-TO-PRINT-NAME BIT
         B     TSTBIT6            SEE IF DONE WITH CTLTAB SCAN
***********************************************************************
  SPACE 2
***********************************************************************
PS0      TM    COMDCDSW,SELECTSC  WAS A SELECTIVE COPY BEING DONE
         BCR   D8,R5              IF NOT,DONT LOOK FOR UN-FOUNDS
         L     R3,SEBEGIN         POINT TO START OF SETAB
PS1      TM    D0(R3),SEBIT1+SEBIT4+SEBIT5  WAS THIS MEMBER A NEWNAME
*                                 FOUND, OR FLAGGED AS DONT-COPY
         BC    D7,PS2             IF SO,SEE IF MORE TO BE TRIED
         MVI   NAMEDISP,D0        OFFSET IN MSG FOR NAME
         MVI MSG1,LASTMSG+PBIT  INDIC LAST MSG IN LIST + PARAMETER
         MVI   PARAMS,NAME        INDIC PARAMETER IS A NAME
         MVI   MSG1+D1,SMNF       SET UP MSG CODE
         MVC   NAMEFLD(D8),D2(R3) PUT MBR NAME INTO PARAM LIST
         CLI   RCBUF,RTCD         IS RETURN CODE 4 OR HIGHER     A48762
         BNL   DONTSET            YES- DON'T SET                 A48762
         MVI   RCBUF,RTCD         SET RETURN CODE 4              A48762
DONTSET  EQU   *                                                 A48762
         L     R15,VIEBVMS
         BALR  R14,R15            WRT MBR SELECTED BUT NOT FOUND MSG
PS2      TM    D0(R3),SEBIT6      IS THIS THE LAST MBR NAME IN SETAB
         LA    R3,D10(R3)         BUMP PTR IN CASE NOT
         BZ    PS1                LOOP IF NOT LAST NAME
         BR    R5                 RETURN TO CALLER
***********************************************************************
         SPACE 2
***********************************************************************
PUDUT    EQU   *                  FORMAT AND PRINT UNUSED TRACKS & UN-
*                   USED DIRECTORY BLOCKS MESSAGES -
         LA    R2,OUTDCB
         TM    DCBOFLGS,OPEN      IS THE OUTPUT DCB OPEN
         BCR   MS8,R5             IF NOT, CANT PRINT EITHER MESSAGE
         ST    R5,SAV5            ELSE SAVE CALLER'S LINK REG
         TM    IOEF2,SPRNOPN      IS SYSPRINT USABLE
         BO    TMISSUED           IF NOT, DONT BOTHER TO SET UP MSG
* FORMAT MSG AS FOLLOWS-
* IEB574I XXX UNUSED TRACKS IN OUTPUT DATA SET REFERENCED BY (DDNAME)
* SET UP DDNAME AND NBR OF TRKS IN PARAMETER AREA FOR MSG WRITER
         L     R3,DCBDEBAD
         LA    R3,D0(R3)          POINT TO CORRESPONDING DEB
         USING DXDEB,R3
         XR    R6,R6                   CLEAR WORK REGISTER
         IC    R6,DXDEBUSR             INSERT NUMBER OF EXTENTS
         BCTR  R6,R0              SUBTRACT ONE
         STC   R6,DWORD2               STORE M OF LAST EXTENT
         SLL   R6,D4              MULTIPLY M BY 16
         AR    R3,R6                   BUMP BASE REGISTER OF DEB TO
*                                        USE LAST EXTENT DESCRIPTION
*                                        WITH DSECT
         MVC   DWORD2+D1(D2),DXDEBBIN  MOVE BIN NUMBER LAST EXTENT
         MVC   DWORD2+D3(D4),DXDEBECC  MOVE CCHH OF LAST TRACK
         MVI   DWORD2+D7,X00      SET  R=0
         LA    R1,OUTDCB               POINTER TO DCB
         BAL   R8,GETATTR              GET TTR
         LH    R9,WKA1                 LOAD ENDING TT
         MVC   DWORD2(D8),OUTFDAD  MOVE OUTFDAD FOR CONVERSION
         LA    R1,OUTDCB               POINTER TO DCB
         BAL   R8,GETATTR              GET TTR
         SH    R9,WKA1                 GET NUMBER OF UNUSED TRACKS
         CVD   R9,WKA1            MAKE THE RESULT PRINTABLE
         UNPK  WKA1+D8(D9),WKA1+D3(D5)
         OI    WKA1+D16,C0
         MVC   NOFLD(D7),WKA1+D10  PUT NBR OF TRKS IN MSG PARAM LIST
         MVC   NAMEFLD(D8),OUTNAME PUT OUTPUT DDNAME IN PARAMETER LIST
         MVI   PARAMS,NBR+NAME    INDICATE PRESENCE OF NUMBER AND NAME
*                                 TO IEBVMS (FOR INSERTION INTO MSG)
         MVI   NODISP,X0A         DISPLACEMENT IN MSG FOR NBR TRKS
         MVI   NAMEDISP,X41       DISPLACEMENT IN MSG FOR OUTDD NAME
         B     TRKSDONE           DONE
GETATTR  EQU   *
         LA    R2,DWORD2               POINTER TO MBBCCHHR
         L     R15,VCCOTT              POINTER TO CCOTT
         BALR  R14,R15                 GET TTR
         BR    R8                      RETURN
         SPACE
TRKSDONE EQU   *
         MVI   MSG1+D1,M49        MSG CODE - TRKS UNUSED
         MVI   MSG1,LASTMSG+PBIT
         L     R15,VIEBVMS
         BALR  R14,R15            LINK TO WRT MSG
TMISSUED EQU   *
         TM    FLG7,NOPRNBDB      NEED TO SUPPRESS THIS MSG
         BO    FM2                YES - DONT SET IT UP
*              NOW FORMAT NEXT MESSAGE AS FOLLOWS -
* IEB580I XXX UNUSED DIRECTORY BLOCKS IN OUTPUT DATA SET REFERENCED BY
* (DDNAME)
*
         LH    R5,DIRBCNT         GET CT OF MAX POSSIBLE NBR OD BLKS
         LPR   R5,R5
         LH    R6,DBCNT           ACTUAL NBR BLOCKS MERGED OUTPUT DIR
         LPR   R6,R6
         SR    R5,R6              GET DIFFERENCE
         TM    IOEF1,ERF5         DID AN I/O ERROR OCCUR WHILE WRITING
*                                 DIRECTORY TO OUTPUT DATA SET
         BO    NOBLKPRT           IF SO, DONT FORMAT OR PRINT MSG
         TM    IOEF2,SPRNOPN      IS SYSPRINT USABLE
         BO    NOBLKPRT           IF NOT, DONT BOTHER TO SET UP MSG
         CVD   R5,WKA1
         UNPK  WKA1+D8(D9),WKA1+D3(D5)
         OI    WKA1+D16,C0        MAKE NBR UNUSED BLOCKS PRINTABLE
         MVC   NOFLD(D7),WKA1+D10
         MVI   NODISP,X0A         DISPLACEMENT IN MSG FOR NBR BLKS
         MVI   PARAMS,NBR
         MVI   MSG1+D1,UNUSDDB    MSG CODE - DIRECTORY BLOCKS
         MVI   MSG1,LASTMSG+PBIT
         L     R15,VIEBVMS
         BALR  R14,R15            LINK TO WRT MSG
NOBLKPRT EQU   *
         LTR   R5,R5              WAS LAST OUTPUT DIRECTORY BLOCK WRIT-
*                                 TEN ON BY 'IEBVDM' ROUTINE
         BNZ   FM2                IF NOT, RETURN TO CALLER
DOFREE   EQU   *
         LM    R1,R2,ADGOT        GET ADDR AND LENGTH OF ORIGINALLY
*                                 ACQUIRED CORE
         S     R2,FREEAMT         SUBTRACT LENGTH INITIALLY FREED
         LR    R0,R2              PUT CORRECT LENGTH INTO PARAMETER REG
         FREEMAIN   R,LV=(0),A=(1) FREE ALL ACQUIRED CORE
         OI    VTMFLG1,NOMAIN     INDICATE FREEMAIN DONE
         NI    ULLDST,FF-CFREED   RESET CORE FREED FLAG          X010XX
*                                 USED BY DSCPY                  X010XX
FM2      L     R5,SAV5            RESTORE CALLER'S LINK REG
         BR    R5                 RETURN TO CALLER
PAMSETUP EQU   *
         ST    R5,SAV5            SAVE RETURN REG
         LH    R5,BPAMOUT+DIRCTDCB  LOAD COUNT OF BYTES USED IN
*                                     LAST DIRECTORY BLOCK
         LTR   R5,R5              HAS LAST BLOCK BEEN USED
         BZ    FM2                NO, RETURN
         B     DOFREE             ISSUE FREEMAIN
***********************************************************************
         SPACE 2
***********************************************************************
PREDASD  EQU   *                                                 A36049
         TM    FLG4,REDASD        WAS INVALID NDBTR FOUND        A36049
         BCR   MS8,R5             NO, DON'T WRITE MSG            A36049
         TM    IOEF2,SPRNOPN      IS SYSPRINT USABLE             A36049
         BCR   MS1,R5             NO, DON'T WRITE MSG            A36049
         MVI   MSG1,LASTMSG+PBIT  INDIC LAST MSG AND USE PARAM   A36049
*                                 LIST                           A36049
         MVI   MSG1+D1,TMDBTR     MESSAGE CODE                   A36049
         MVI   PARAMS,NAME        INDIC NAME TO BE PUT INTO MSG  A36049
         MVI   NAMEDISP,O33       OFFSET IN MESSAGETEXT FOR NAME A36049
         MVC  NAMEFLD(D8),OUTNAME PUT OUTDD NAME INTO PARAM LIST A36049
         CLI   RCBUF,RTCD         IS RETURN CODE 4 OR HIGHER     A44144
         BNL   DONOTSET           YES- DON'T SET                 A44144
         MVI   RCBUF,RTCD         SET RETURN CODE 4              A44144
DONOTSET EQU   *                                                 A44144
         L     R15,VIEBVMS        ADDR OF MSG WRITER             A36049
         BALR  R14,R15            LINK TO WRITE MSG              A36049
         NI    FLG4,FF-REDASD     RESET INDIC TO WRITE WARNING   A36049
*                                  MESSAGE                       A36049
         BR    R5                 RETURN TO CALLER               A36049
***********************************************************************
         SPACE 3
***********************************************************************
RESODS   EQU   *                  ROUTINE TO OPEN AND CLOSE BPAM
*                                   DCB WHEN THE LAST DIRECTORY
*                                   BLOCK HAS BEEN MODIFIED.  THIS
*                                   WILL UPDATE THE DSCB
         LA    R2,BPAMOUT         GET ADDR OF THE BPAM DCB
         ST    R5,SAV5            SAVE LINK REG
         LH    R5,DCBDIRCT        SAVE COUNT OF BYTES USED IN LAST
*                                   DIRECTORY BLOCK
         OPEN  ((R2),OUTPUT)
         OI    DCBCIND2,PAMDIR    INDICATE THAT THE OUTPUT DIR @ZA24954
*                                 WAS MODIFIED
         STH   R5,DCBDIRCT        RESTORE COUNT OF BYTES USED IN
*                                   LAST DIRECTORY BLOCK
         CLOSE ((R2))
         L     R5,SAV5            RESTORE LINK REG
         BR    R5                 RETURN TO THE CALLER
***********************************************************************
         SPACE 2
***********************************************************************
WEJFTM   MVI   MSG1+D1,M58        MSG CODE - ABNORMAL END
         MVI   MSG1,LASTMSG
         L     R15,VIEBVMS
         BALR  R14,R15            LINK TO WRT MSG
EOJMS    MVI   MSG1+D1,M53        MSG CODE - EOJ MSG
* FORMAT MSG AS FOLLOWS -
* IEB147I END OF JOB - X WAS HIGHEST COMPLETION CODE
         MVI   MSG1,LASTMSG+RCODE
         L     R15,VIEBVMS
         BALR  R14,R15            GO WRT EOJ MSG
         SR    R7,R7              INDICATE NO FREEPOOL NEEDED    A48806
         LA    R2,UT3DCB          POINT TO SYSUT3 DCB
         BAL   R3,CLOSE           GO CLOSE IT IF ITS OPEN
         LA    R2,UT4DCB          POINT TO SYSUT4 DCB
         BAL   R3,CLOSE           GO CLOSE IT IF ITS OPEN
         LA    R2,OUTDCB          POINT TO OUTPUT DCB
         BAL   R3,CLOSE           GO CLOSE IT IF ITS OPEN
         LA    R2,ULOADDCB        POINT TO UNLOAD DCB            X010XX
         BAL   R3,CLOSE           GO CLOSE IT IF ITS OPEN        X010XX
         LA    R2,PRTDCB          POINT TO SYSPRINT DCB
         BCTR  R7,R0              INDICATE FREEPOOL TO BE DONE   A48806
         BAL   R3,CLOSE           GO CLOSE IT IF ITS OPEN
         LA    R2,CARDCB          POINT TO SYSIN DCB
         BAL   R3,CLOSE           GO CLOSE IT IF ITS OPEN
         DELETE  EP=IGG019C8      THE PCIAPPENDAGE WAS PRELOADED A37881
         DELETE  EP=IGG019FT      THE SIOAPPENDAGE WAS PRELOADED A37881
         SPACE
* THE FOLLOWING INSTRUCTIONS FREE THE PAGE FIX LIST OBTAINED   @YM06438
* IN IEBDSCPY AND USED IN THE PAGE FIX PORTION OF THE START    @YM06438
* I/O APPENDAGE (IGG019FT).                                    @YM06438
         SPACE
         TM    MSG2+ONE,OPENERRX  OPEN ERROR ON SYSIN?         @ZA04372
         BO    DONTFREE           YES,BRANCH AROUND FREEMAIN   @ZA04372
         LA    R0,SP253(R0,R0)     PICK UP SUBPOOL NUMBER      @YM06438
         SLL   R0,C24(R0)         SHIFT TO HIGH ORDER BYTE     @YM06438
         O     R0,SIXENTRY        INSERT LENGTH INTO REG       @YM06438
         L     R1,FIXLIST         ADDRESS OF GOTTEN AREA       @YM06438
         FREEMAIN R,LV=(0),A=(1)  FREE FIXLIST AREA            @YM06438
         SPACE
DONTFREE EQU   *                                               @ZA04372
         TM    VTMFLG1,NOMAIN     NEED TO INHIBIT FREEMAIN
         BO    NOFREE             YES - DONT EXECUTE FREEMAIN SEQUENCE
         LM    R1,R2,ADGOT        GET ADDR AND LENGTH OF ORIGINALLY
*                                 ACQUIRED CORE
         S     R2,FREEAMT         SUBTRACT LENGTH INITIALLY FREED
         LR    R0,R2              PUT CORRECT LENGTH INTO PARAMETER REG
         FREEMAIN   R,LV=(0),A=(1) FREE ALL ACQUIRED CORE
         SPACE
NOFREE   EQU   *
         SR    R15,R15            CLEAR RETURN CODE REGISTER
         NI    RCBUF,X0F          TURN OFF HIGH ORDER RETURN CODE BITS
         IC    R15,RCBUF          SET UP RETURN CODE
*                   THE FOLLOWING CODE RE-INITIALIZES THE COMMUNICATION
*                   AREA FOR RE-USE IN CASE THIS PROGRAM IS RE-INVOKED
*                   WITHOUT BEING RELOADED INTO CORE -
         XC    BCB(EOREAD+D4-BCB),BCB
         XC    ADNL(OUTNAME+D8-ADNL),ADNL
         XC    WKA1(SV1-WKA1),WKA1
         XC    OUTPTTR(INIDDCTS+D2-OUTPTTR),OUTPTTR              S20201
         XC    FLG3(NOFLD+D7-FLG3),FLG3
         MVI   LINECT,X00
         MVC   DDLIST(D48),DDLRFRSH RESET DDLIST IN CASE RE-INVOKED
         MVC   PGNO(D4),PGRFRSH   RESET PAGE NUMBER IN CASE RE-INVOKED
         MVI   RCBUF,RCRFRSH      RESET RETURN CODE IN CASE RE-INVOKED
         LA    R13,SV1            POINT TO PRIMARY SAVE AREA
         L     R13,D4(R13)
         RETURN (14,12),RC=(15)   RETURN TO INVOKER
         SPACE 1
CLOSE    TM    DCBOFLGS,OPEN      IS THIS DCB OPEN
         BCR   MS8,R3             IF NOT, DONT CLOSE IT
         CLOSE ((R2))             CLOSE THE OPEN DATA SET
         LTR   R7,R7              FREEPOOL TO BE DONE            A48806
         BCR   MS8,R3             NO,  EXIT TO CALLER            A48806
         FREEPOOL (R2)            YES, FREE BUFFER POOL          A48806
         BR    R3                 EXIT TO NSI OR TO CALLER
***********************************************************************
         SPACE 2
***********************************************************************
SLOCOR   EQU   *
         MVC   LOCOR(D4),SVLO     RESET POINTER TO LOWEST USABLE CORE
         MVI   FLG7,X00           RESET THIS SWITCH
         NI    COMDCDSW,FF-COMPRESS RESET POSSIBLY-ON COMPRESS SWITCH
         NI    ULLDST,FF-LOAD     RESET POSSIBLY ON LOAD FLAG    X010XX
         XC    FCT(D2),FCT        RESET COUNT OF NBR OF CTLTAB ENTRIES
         LM    R11,R14,RESET1     RESTORE CRITICAL REGS
         L     R15,VIEBMNI        ADDR OF ENTRY PT IN MAINFLOW
         BR    R15                EXIT
***********************************************************************
         SPACE 2
***********************************************************************
RMISC    EQU   *                                                 X010XX
         LA    R2,ULOADDCB        POINT TO ULOADDCB              X010XX
         BAL   R3,CLOSE           CLOSE IT IF IT IS OPEN         X010XX
         NI    ULLDST,FF-LOAD-UNLOAD    RESET POSSIBLY ON LOAD   X010XX
*                                       AND UNLOAD FLAGS         X010XX
         L     R5,SVHI            RE-INIT POINTERS IN IEBMCA     X010XX
         ST    R5,HICOR
         ST    R5,END2ND2
         L     R5,ADWK
         LA    R5,WKLEN(R5)
         ST    R5,LOCOR
         ST    R5,INBEGIN
         ST    R5,NXTINDS
         MVI   FLG7,X00           RESET THIS SWITCH
         NI    COMDCDSW,FF-COMPRESS RESET POSSIBLY-ON COMPRESS SWITCH
         XC    FCT(D2),FCT        RESET COUNT OF NBR OF CTLTAB ENTRIES
         LM    R11,R14,RESET1     RESET CRITICAL REGS
         TM    VTMFLG1,NOMAIN     WAS IT NECESSARY FOR CORE TO BE FREED
         BZ    CLRVTM             NO, DONT SET TO DO ANOTHER GETMAIN
         XC    VTMFLG1(D2),VTMFLG1 RESET VTMFLG1 AND IOEF1
         BAL   R5,RESODS          NOW LINK TO SET UP BPAM DCB
         L     R15,VIEBGME        ADDR OF E.P. TO RE-ISSUE GETMAIN
         BR    R15                EXIT TO MAIN PROGRAM
CLRVTM   XC    VTMFLG1(D2),VTMFLG1 RESET VTMFLG1 AND IOEF1
         L     R15,VIEBSCX        ADDR OF CTL-CD SCAN MODULE LINKAGE
         BR    R15                EXIT TO MAINFLOW TO GO TO IEBSCN
***********************************************************************
         SPACE 2
***********************************************************************
DDLRFRSH DC    CL8'SYSIN   '      DDNAMES USED TO REFRESH LIST IN MCA
         DC    CL8'SYSPRINT'
         DC    CL8'SYSUT1  '
         DC    CL8'SYSUT2  '
         DC    CL8'SYSUT3  '
         DC    CL8'SYSUT4  '
PGRFRSH  DC    C'0001'            TO REFRESH PAGE NO. IN IEBMCA
SIXENTRY DC    F'48'              MAX LENGTH OF PAGE FIX LIST  @YM06438
RSA      DC    18F'0'             REGISTER SAVE AREA
SAV5     DC    F'0'               INTERNAL SAVE AREA FOR LINKREG
PTCHLEN  EQU   (*-IEBVTM)/20      LENGTH OF 5 PER CENT PATCH AREA
PATCH    DC    XL(PTCHLEN)'00'    5 PER CENT PATCH AREA          A41780
         EJECT
IEBMCA   DSECT
         IEBMCA
         EJECT
         DCBD  DSORG=PO
DIRCTDCB EQU   DCBDIRCT-IHADCB    OFFSET IN DCB TO COUNT
*                                   OF BYTES USED IN LAST DIR BLOCK
IECDSECT DSECT
         IECDSECT
DWORD2   EQU   WKA1+8                  WORK AREA
         END
