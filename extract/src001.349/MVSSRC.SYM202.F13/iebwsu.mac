VWSU     TITLE 'IEBCOPY -WRITE SETUP ROUTINE-IEBWSU'
IEBWSU   CSECT
*D905000-908000,916000-921000                                    A33288
*C933000                                                         A41780
*C536000,539000                                                  A41760
*C665000-666000,883000,888000,941000-942000                      A38720
*C665000-666000,883000,888000,941000-942000                      A38720
*A057764-057768,662100-662600,795500-795700,                     A38720
*A535500-535984,538500-538920                                    A41760
*A887500,888500,941500,942100                                    A38720
*D540000-543000                                                  A41760
*A429500-429800,651500,667500-667600,690500-690600,695500        A44345
*A697500-697600,702500                                           A44345
*C311000,319000,415000                                           A44345
*D715000                                                         A44345
*A308500-308600,312500                                           A45136
*A057104,057880,362020-362740,872500                             A45142
*D361000                                                         A45142
*A736500-737960                                                  X010XX
*D737000                                                         X010XX
*A057772,852500-852800,898500-898600,899500                      A44144
*C057780,899000                                                  A44144
*A472300-472600                                                @ZA01712
*C448270,448729                                                @ZA10902
*D448756-448783                                                @ZA10902
*A448741,448744                                                @ZA13707
*A448741,448744                                                @ZA13751
*A105500,111300,111600,202100-202600,215500,505800             @ZA26248
*C110000,202000,203000,215000,512000                           @ZA26248
*D091000,092000,189000-201000,218000-237000                    @ZA26248
*A797300-798300,849300-849600           (ORG)@XA16941,@YA19690,@ZA27766
*C798400,895000                         (ORG)@XA16941,@YA19690,@ZA27766
*A057920-057960,538630-538750           @XA20499,@YA19841,(ORG)@ZA16486
*C538600,538780                         @XA20499,@YA19841,(ORG)@ZA16486
***********************************************************************
*TITLE-  WRITE SETUP-IEBWSU
*                                                                     *
*STATUS- CHANGE LEVEL 001                                             *
*                                                                     *
*FUNCTION/OPERATION- THIS MODULE PROCESSES RECORDS TO PREPARE THE     *
*       COUNT FIELDS FOR THE OUTPUT TARGET ADDRESS. RECORDS ARE       *
*       GENERALLY PROCESSED STARTING WITH THE RECORD POINTED TO BY    *
*       'WRTNEXT' AND CONTINUE THRU THE RECORD WHICH HAS THE          *
*       'ENDPROC' FLAG ON.                                            *
*                                                                     *
*ENTRY POINT- ENTERED AT IEBWSU                                       *
*                                                                     *
*INPUT- POINTER TO FIRST RECORD IN BUFFER TO PROCESS IN 'WRTNEXT'     *
*       'FORCEWRT' SWITCH SET TO MAKE IEBVWS PURGE THE BUFFERS        *
*       'USERTTR' SWITCH SET WHEN DATA SET HAS USER TTRS TO PROCESS   *
*       'NOTELST' SWITCH SET WHEN DATA SET HAS NOTE LIST TTR TO DO    *
*                                                                     *
*OUTPUT- 'READNEXT'-POINTS TO SPACE IN BUFFER AFTER LAST RECORD DONE  *
*        'NOWRT' SWITCH SET IF EOF OF PRESENT MEMBER PROCESSED BUT    *
*    BUFFER HAS ROOM FOR MORE RECORDS FROM NEXT MEMBER, IF ANY, SO    *
*    BUFFER WAS NOT WRITTEN.                                          *
*                                                                     *
*EXTERNAL ROUTINES- IEBDWR WRITE ROUTINE, SYSTEM TTR/CCHH CONVERSION  *
*        ROUTINES,IEBVMS -MESSAGE WRITER ROUTINE
*                                                                     *
*EXITS- RETURN TO CALLER ON NORMAL COMPLETION                         *
*                                                                     *
*TABLES/WORK AREAS-                                                   *
*        -IEBMCA- COPY COMMUNICATIONS AREA
*        -SAVERGS- REGISTER SAVE AREA                                 *
*                                                                     *
*ATTRIBUTES- SERIAL REUSABLE                                          *
*                                                                     *
         EJECT
*                                                                     *
*                         SYMBOLIC REGISTERS FOR IEBWSU               *
*                                                                     *
*
GR0      EQU   0
GR1      EQU   1                  DCB ADDRESS
GR2      EQU   2
GR3      EQU   3
GR4      EQU   4                  COMMUNICATIONS AREA (IEBMCA) ADDRESS
GR5      EQU   5
GR6      EQU   6                  TTRN ADDRESS
GR7      EQU   7                  DEVICE CHARACTERISTIC TABLE ADDRESS
GR8      EQU   8
GR9      EQU   9
GR10     EQU   10                 LINKAGE POINTER FROM SUBROUTINES
GR11     EQU   11
GR12     EQU   12                 BASE REGISTER
GR13     EQU   13
GR14     EQU   14
GR15     EQU   15
W4       EQU   4
W8       EQU   8
W0       EQU   0
W10      EQU   10
W2       EQU   2
W24      EQU   24                                                A45142
W276     EQU   276
XFF      EQU   X'FF'
X00      EQU   X'00'
W3       EQU   3
W9       EQU   9
W12      EQU   12
W5       EQU   5
W1       EQU   1
MS8      EQU   8
X80      EQU   X'80'
SVC55    EQU   55
X7F      EQU   X'7F'
MS9      EQU   9
W25      EQU   25
W30      EQU   30
W256     EQU   256
MS1      EQU   1
MSGCLR   EQU   C' '
W120     EQU   120
W7       EQU   7
W29      EQU   29
W40      EQU   40
W27      EQU   27
W68      EQU   68
W76      EQU   76
W85      EQU   85
W13      EQU   13
W98      EQU   98
W28      EQU   28
W99      EQU   99
W93      EQU   93
W51      EQU   51
W17      EQU   17
W53      EQU   53                                                A38720
W64      EQU   64                                                A38720
RTCD     EQU   C'4'                                              A44144
RTCDE    EQU   C'8'                                              A44144
DBOFF    EQU   4                  OFFSET IN DEVTYPE TO TRACKSIZE A45142
W6       EQU   6                                               @ZA16486
W36      EQU   36                                              @ZA16486
*
         SAVE  (14,12),,*
         BALR  GR12,GR0           ESTABLISH ADDRESSABILITY
*
         USING START,GR12
         USING IEBMCA,4
         USING IHADCB,GR1
         USING DEVTAB,GR7
*
START    EQU   *
         ST    GR13,SAVERGS+W4
         LA    GR15,SAVERGS
         ST    GR15,W8(GR13)      POINTER TO NEW SAVE AREA IN OLD
         LR    GR13,GR15
*
         TM    WSFLAG,FORCEWRT         BUFFER TO BE PURGED
         BZ    MEMBER                  NO-GO TEST FOR MEMBER FIRST
         L     GR5,LASTMREC            POINTER TO LAST RECORD IN BUFFER
         MVI   W0(GR5),LASTREC+ENDPROC SET LAST RECORD FLAGS
         B     MUSTWRTE                WRITE BUFFER
         EJECT
*
***********************************************************************
*        MEMBER OUTPUT
***********************************************************************
*
MEMBER   EQU   *
         L     GR5,READNEXT            GET FIRST INPUT ENTRY
         LA    GR5,W0(GR5)        LOP OFF HI BYTE
         LA    GR6,OUTDS1              TTRNLL ADDRESS
         LA    GR1,OUTDCB              DCB PTR
         TM    TAG,TAG2                WRITING MEMBER
         BZ    DIRTY                   NO-GO TEST DIRECTORY
         TM    FLG3,REBLK              REBLOCKING
         BO    REBLKING                YES-XFER
         TM    DCBRECFM,OVERFLOW       OUTPUT TRKOVERFLOW
         BO    TRKOVER                 YES-XFER TO PROCESS
*
RECYCLE1 EQU   *
         LA    GR7,OUTCHAR             GET DEVICE CHARACTERISTICS
         BAL   GR10,GOTRKBAL           GO TO TRACK BALANCE
         BAL   GR10,CHKFIRST      CHECK FOR FIRST RECORD OF A    A34431
*                                  MEMBER PROCESSING             A34431
         TM    WSFLAG,USERTTR          USER TTR TO PROCESS
         BZ    NOTNOTE1                NO-XFER
         BAL   GR10,CHKUTTRS           GO TO CHECK FOR USER TTRS
NOTNOTE1 EQU   *
         BAL   GR10,CONVERT            GO CONVERT TO MBBCCHHR-OUTPUT
         ST    GR5,LASTMREC  SAVE LAST RECORD PROCESSED        @ZA26248
         BAL   GR10,RECLNVAL           GO VALIDATE RECORD LENGTH
         BAL   GR10,UPDATE             GO SEE IF MORE RECORDS
         B     RECYCLE1                YES-TRY SOME MORE
         CLC   W10(W2,GR5),ZROS   AT- EOF
         BNE   MUSTWR      NO, MUST BE NO MORE ROOM IN BUFFER  @ZA26248
         BAL   GR10,MORERUUM           YES-GO SEE IT WE CAN READ AGAIN
MUSTWR   TM    COMDCDSW,COMPRESS       COMPRESS                @ZA26248
         BO    COMPRS                  YES-XFER                @ZA26248
MUSTWRTE EQU   *                  NO ROOM WRITE OUT
         MVC   READNEXT(W4),WRTNEXT RESET BUFFER POINTERS
         LA    GR10,GOBACK             RETURN TO CALLER AFTER WRITING
         B     WRITEUM            GO WRITE IT
*
***********************************************************************
*        DIRECTORY
***********************************************************************
*
DIRTY    EQU   *
         TM    TAG,TAG1                DIRECTORY OUTPUT
         BZ    TUT3                    NO-GO TEST FOR SYSUT4
         LA    GR7,OUTCHAR             DEVICE CHARACTERISTS
RECYCLE2 EQU   *
         BAL   GR10,GOTRKBAL           TRK BAL. FIRST
         BAL   GR10,CONVERT            CONVERT IT
         BAL   GR10,UPDATE        GO SEE IF MORE
         B     RECYCLE2                YES- TRY AGAIN
         CLC   W10(W2,GR5),ZROS   EOF ONLY FROM SYSUT4
         BNE   MUSTWRTE                NO EOF FOR OUTPUT MUST WRITE IT
         C     GR5,WRTNEXT             SYSUT4 - AT START OF BUFFER
         BE    GOBACK                           YES-GO BACK TO CALLER
         LA    GR11,W276          NO- GO BACK PREVIOUS
         SR    GR5,GR11                         RECORD
         MVI   W0(GR5),LASTREC+ENDPROC  AND WRITE IT OUT
         B     MUSTWRTE                WRITE BUFFER
*
***********************************************************************
*        SYSUT3
***********************************************************************
*
TUT3     EQU   *
         TM    TAG,TAG4                IS IT SYSUT3
         BZ    TUT4                    NO-GO TEST NEXT ONE
         L     GR5,ADWK           GET PTR TO SYSUT3 RECORD
         LA    GR7,UT3CHAR             UT3-OUTPUT CHARACTERISTICS
         LA    GR6,UT3DS1                 -TTRNLL
         LA    GR1,UT3DCB                 -DCB
         BAL   GR10,GOTRKBAL           BALANCE IT
         BAL   GR10,CONVERT            CONVERT IT
         MVI   W0(GR5),LASTREC+ENDPROC INDIC NO MORE RECS IN BFRS
         LA    GR10,GOBACK             RETURN TO CALLER AFTER WRITING
         B     WRITEUM            WRITE IT
*
***********************************************************************
*        SYSUT4
***********************************************************************
*
TUT4     EQU   *
         LA    GR7,UT4CHAR             UT4-OUTPUT CHARACTERISTICS
         LA    GR6,UT4DS1                 -TTRNLL
         LA    GR1,UT4DCB                 -DCB
RECYCLE3 EQU   *
         BAL   GR10,GOTRKBAL           BALANCE IT
         BAL   GR10,CONVERT       CONVERT IT
         BAL   GR10,UPDATE             SEE IF SOME MORE
         B     RECYCLE3                YES TRY AGAIN
         B     MUSTWRTE                NO- MUST WRITE
*
***********************************************************************
*        REBLOCKED RECORDS                                            *
***********************************************************************
*
REBLKING EQU   *
         LA    GR7,OUTCHAR             FETCH DEV. CHARACT. TABLE PTR.
RECYCLE7 EQU   *
         BAL   GR10,GOTRKBAL           GO TO TRACK BALANCE
         BAL   GR10,CHKFIRST      CHECK FOR FIRST RECORD OF A    A34431
*                                  MEMBER PROCESSING             A34431
         BAL   GR10,CONVERT            CONVERT TTR TO MBBCCHHR
         BAL   GR10,UPDATE             SEE IF MORE RECORDS
         B     RECYCLE7                YES-XFER
         B     MUSTWRTE                NO- MUST WRITE
*
***********************************************************************
*        COMPRESS IN PLACE
***********************************************************************
*
COMPRS   EQU   *
*       IF COMPRESSING WRITE ALL COMPLETE TRKS AND MOVE PARTIAL@ZA26248
*       TRK TO FRONT OF THE BUFFER                             @ZA26248
         MVI   W0(GR5),X00        TURN OFF LAST RECORD IND.    @ZA26248
         L     GR5,LASTTRK           SET UP TO MOVE ALL OF THE @ZA26248
         MVI   W0(GR5),X00        PARTIAL TRK THAT MAY BE IN   @ZA26248
         BAL   GR10,UPDATE        THE BUFFER                   @ZA26248
         ST    GR5,READNEXT          SET WHERE TO MOVE FROM    @ZA26248
         L     GR5,LASTTRK   YES,FIND END OF LAST WHOLE TRACK  @ZA26248
         MVI   W0(GR5),LASTREC+ENDPROC TURN ON LAST RECORD IN BUFFER
         BAL   GR10,WRITEUM            WRITE IT OUT
         L     GR2,READNEXT            FETCH PTR. TO NEXT RECORD
         L     GR8,EOREAD              PTR. TO END RECORDS READ
         L     GR3,BCB                 WHERE TO MOVE TO
         LA    GR3,W0(GR3)        LOP OFF HI BYTE
         LR    GR5,GR3                 SAVE ADDRESS FOR RECYCLE
         SR    GR8,GR2                 FIND LENGTH OF MUVE
         LR    GR11,GR8                ADD LENGTH OF MOVE TO WHERE
         AR    GR11,GR5                IT IS GOING TO BE MOVED TO
         ST    GR11,EOREAD             AND SAVE AS LOGICAL END OF BUF.
         ST    GR11,READNEXT SET WHERE TO START READING        @ZA26248
         LA    GR10,GOBACK             EXIT ADDRESS FOR MOVE   @ZA26248
         B     MOVEUM                  GO MOVE RECORDS
*
*
***********************************************************************
*        TRACK OVERFLOW RECORDS
***********************************************************************
*
TRKOVER  EQU   *
         NI    FLG1,XFF-STOPEND1  TURN OFF STOP AFTER 1ST BUFFER
         OI    WSFLAG,RETRNOVR         SET OVERFLOW FLAG
         L     GR9,BEGFST2        INITIALIZE POINTER
         MVI   SEGKLDL+W3,X00     TURN OFF ALL INTERNAL FLAGS
         ST    GR9,WRTNEXT        WRITE FROM SECOND BUFFER
RECYCLE5 EQU   *
         TM    WSFLAG,USERTTR          NOTE/LIST USER TTRS       A44345
         BZ    NOTNOTE4                NO-XFER                   A44345
         OI    WSFLAG,NTELSTRC         RECORD MAY BE NOTELIST    A44345
         BAL   GR10,CHKUTTRS           GO PROCESS NOTE/USER TTRS A44345
         NI    WSFLAG,XFF-NTELSTRC     IF NOTELIST, THEN IT'S    A44345
*                                          UPDATED               A44345
NOTNOTE4 EQU   *                                                 A44345
         LA    GR7,OUTCHAR             PT. TO DEVICE TABLE
         BAL   GR10,GOTRKBAL           GET TRK BAL.
*
*        RETURN +0 - RECORD WILL FIT AND MAY BE A SEGMENT
*                  - LENGTH FOUND IN INPUT BUFFER
*        RETURN +4 - RECORD WILL NOT FIT MUST MAKE SEGMENT
*                  - LENGTH IN GR0
         B     WILLFIT            SEE IF AT LEAST 1 SEGMENT MADE
         LR    GR8,GR0                 GET LENGTH OF SEGMENT
         TM    SEGKLDL+W3,WRTOVR  FIRST SEGMENT
         BO    NOTFSEG                 NO-XFER
*        FIRST SEGMENT
         OI    SEGKLDL+W3,WRTOVR  SET FLAG TO INDICATE AT
*                                      LEAST ONE SEG
         MVC   SEGTTRN(W4),OUTDS1 SAVE 1ST TTRN FOR NOTELIST PROC.
         MVC   SEGKLDL(W3),W9(GR5) SAVE INPUT KEY AND DATA LENGTHS
         MVI   W9(GR5),X00        ZERO INPUT KEY LN. FOR NEXT PASS
         MVC   WRTPROC(W4),WRTNEXT  INITIALIZE SEGMENT PTR.
         LA    GR2,W12(GR5)       UPDATE PRESENT INPUT
         ST    GR2,READPROC       PAST FMBBCCHHRKDD FOR MOVING DATA
         L     GR3,WRTPROC
         ST    GR3,LASTSEG             INITIALIZE LAST SEGMENT PTR
         IC    GR9,SEGKLDL             GET ORIGINAL KEY LN.
         STC   GR9,W9(GR3)        PLACE IN FIRST SEGMENT ONLY
         B     SEGPROC                 GO PROCESS SEGMENT
*        MORE THAN ONE SEGMENT
NOTFSEG  EQU   *
         L     GR3,WRTPROC             FETCH PTR TO NEXT SEGMENT
         MVI   W9(GR3),X00        MAKE KEY LN ZERO
         L     GR2,READPROC            FETCH PTR TO NEXT DATA
*        CREAT SEGMENT
SEGPROC  EQU   *
         MVI   W0(GR3),WRTOVR     TURN ON SEG FLAG ONLY- OUTPUT
         STH   GR8,WKA1                MOVE
         MVC   W10(W2,GR3),WKA1   DATA LENGTH TO SEGMENT
         MVC   WKA1(W2),W10(GR5)  GET INPUT LENGTH
         LH    GR9,WKA1                ON FULL WORD BOUNDARY
         SR    GR9,GR8                 TAKE AWAY AMOUNT THAT THIS SEG
         STH   GR9,WKA1                WILL USE
         MVC   W10(W2,GR5),WKA1   STOW BACK AS AMOUNT LEFT
*        UPDATE POINTER AND MOVE DATA TO OUTPUT BUFFER
FINALSEG EQU   *
         LR    GR5,GR3                 GET OUTPUT PTR. TO CONVERT
         LR    GR9,GR2                 SAVE INPUT DATA PTR.
         BAL   GR10,CONVERT            CONVERT SEGMENT
         LR    GR2,GR9                 RESTORE INPUT DATA PTR.
         L     GR9,WRTNEXT             GET BEGIN OF 1ST SEGMENT
*        ALL SEGMENTS OF A RECORD MUST BE ON SAME CYL.,BIN AND EXTENT
         LA    GR15,W5            COMPARE MBBCCH FOR 2321
         CLI   OUTUCBDV,A2321          IS OUTPUT DEVICE A 2321
         BE    DONTSUB                 YES, GO AROUND
         BCTR  GR15,GR0                COMPARE MBBCC FOR OTHER DEVICES
DONTSUB  EQU   *
         EX    GR15,COMPSEGS           ALL SEGMENTS WITHIN SAME BOUNDRY
         L     GR5,READNEXT            FETCH INPUT AGAIN
         BNE   RESTART                 NO MUST START OVER-MUST BE SAME
*
         ST    GR3,LASTSEG             SAVE LAST SEG PTR.
         LA    GR3,W12(GR3)       BUMP PASS FMBBCCHHR FOR OUTPUT
         LA    GR9,W0(GR8,GR3)    PT. TO NEXT SEG.
         ST    GR9,WRTPROC             SAVE IT FOR NEXT PASS
         L     GR9,READPROC            FETCH THIS DATA ADDRESS
         LA    GR9,W0(GR8,GR9)    ADD LENGTH OF MOVE
         ST    GR9,READPROC            UPDATE FOR NEXT SEG.
         LTR   GR8,GR8            IS DATA LENGTH ZERO            A45136
         BZ    NULLDATA           YES, BRANCH AROUND             A45136
         BAL   GR10,MOVEUM             MOVE DATE FROM INPUT TO OUTPUT
         TM    SEGKLDL+W3,WRTOVR  ARE WE AT LAST SEG.
         BO    NOTNOTE4                NO-XFER GETNEXT ONE       A44345
*        LAST SEGMENT-RESTORE INPUT FOR NOTE LIST AND BUFFER UPDATING
NULLDATA EQU   *                                                 A45136
         MVC   W9(W3,GR5),SEGKLDL RESTORE KEY AND DATA LENGTHS
         L     GR9,OUTDS1              YES-MUST SET
         MVC   OUTDS1(W4),SEGTTRN TTRN TO FIRST SEGMENT ONLY
         ST    GR9,SEGTTRN             SAVE THIS ONE
         BAL   GR10,CHKFIRST      CHECK FOR FIRST RECORD OF A    A34431
*                                  MEMBER PROCESSING             A34431
         TM    WSFLAG,USERTTR          NOTE/LIST USER TTRS
         BZ    NOTNOTE3                NO-XFER
         BAL   GR10,CHKUTTRL           GO PROCESS NOTE/USER TTRS A44345
NOTNOTE3 EQU   *
         BAL   GR10,RECLNVAL           GO VALIDATE RECORD LENGTH
         MVC   OUTDS1(W4),SEGTTRN  RESTORE TTRN
SEGDONE  EQU   *
         TM    W0(GR5),LASTREC+ENDPROC LASTRECORD PROCESSED
         BZ    RECYCLE6                NO-XFER TO UPDATE POINTERS
         MVC   WRTNEXT(W4),BEGFST2  RESET WRTNEXT FOR WRITING
         BAL   GR10,WRITEUM       GO WRITE BUFFER-FULL
         L     GR5,BCB                 RESET
         LA    GR5,W0(GR5)        LOP OFF HI BYTE
         ST    GR5,READNEXT            EVERYTHING
         ST    GR5,WRTNEXT             FOR RE-READ
         B     GOBACK                  RETURN TO CALLER
*
WILLFIT  EQU   *
         TM    SEGKLDL+W3,WRTOVR  HAS AT LEAST 1 SEG. BEEN MADE
         BO    LASTONE                 YES-XFER THIS MUST BE LAST ONE
*        NORMAL RECORD-NO OVERFLOW
         MVC   WKA1(W2),W10(GR5)  GET INPUT DATA LENGTH
         L     GR3,WRTNEXT        WRITE PTR.
         MVC   W0(W12,GR3),W0(GR5) MOVE TO OUTPUT FMBBCCHHR
         SR    GR8,GR8
         IC    GR8,W9(GR5)         GET KEY LN.
         AH    GR8,WKA1                ADD DATA LN.
         LA    GR2,W12(GR5)        ON BOTH INPUT AND OUTPUT
         MVC   SEGTTRN(W4),OUTDS1  SAVE 1ST TTRN FOR NOTELIST PROC.
         MVC   SEGKLDL(W3),W9(GR5) SAVE INPUT KEY AND DATA LENGTHS
         ST    GR2,READPROC            SAVE DATA PTR. FOR UPDATE
        B     FINALSEG                GO PROCESS AS SEG.
*        LAST  SEGMENT
LASTONE  EQU   *
         NI    SEGKLDL+W3,XFF-WRTOVR TURN OFF SEG. FLAG
         L     GR3,WRTPROC             FETCH NEXT SEGMENT PTR
         MVC   W0(W12,GR3),W0(GR5) MOVE TO OUTPUT FMBBCCHHR
         L     GR2,READPROC            GET PTR. TO NEXT DATA
         MVC   WKA1(W2),W10(GR5)   GET LENGTH OF MOVE
         LH    GR8,WKA1                PLACE IN REG 8 FOR MOVEUM
         B     FINALSEG                PROCESS LAST SEGMENT
RECYCLE6 EQU   *                       MORE INPUT DATA
         L     GR5,READPROC            FETCH NEXT INPUT DATA PTR.
         ST    GR5,READNEXT            UPDATE INPUT START PTR.
         MVI   SEGKLDL+W3,X00     RESET INTERNAL CONTROL FLAG
         SR    GR2,GR2            CLEAR REGISTER                 A45142
         IC    GR2,W9(GR5)        GET KEY SIZE IF ANY            A45142
         MVC   WKA1(W2),W10(GR5)  MOVE IN DATA LENGTH            A45142
         AH    GR2,WKA1           ADD DATA LENGTH TO KEY SIZE    A45142
         LA    GR2,W24(GR2)       ALLOW FOR COUNT FIELD +FMBB    A45142
*                               AND FIDGE FACTOR FOR 1 SEGMENT   A45142
         SR    GR8,GR8                                           A45142
         L     GR7,OUTCHAR+DBOFF  GET TRACKSIZE FROM DEVTYPE AR  A45142
         LH    GR9,WKA1           GET DATA LENGTH                A45142
         DR    GR8,GR7            DIVIDE LENGTH WITH TRACKSIZE   A45142
         LA    GR7,W12            AND                            A45142
         MR    GR8,GR7            MULTIPLY QUOTIENT WITH 12      A45142
*                                 BYTES FIDGE FACTOR             A45142
         AR    GR2,GR9            AND ADD TO TOTAL SIZE          A45142
         L     GR8,WRTPROC        START OF RECORD IN BUFFER      A45142
         AR    GR8,GR2            ADD TOTAL SIZE RECORD MAY HAVE A45142
         C     GR8,END2ND2        STILL WITHIN BUFFER            A45142
         BNH   FITSINB            YES-IT WILL FIT                A45142
         L     GR3,LASTSEG        NO-WRITE BUFFER OUT            A45142
         MVI   W0(GR3),LASTREC+ENDPROC  SET LAST RECORD FLAGS    A45142
         MVC   WRTNEXT(W4),BEGFST2 RESET BUFFER POINTER          A45142
         BAL   GR10,WRITEIT       WRITE AND RETURN               A45142
         B     RECYCLE5                GO TRY NEXT RECORD        A45142
FITSINB  EQU   *                                                 A45142
         MVC   WRTNEXT(W4),WRTPROC  UPDATE OUTPUT PTR.           A45142
         B     RECYCLE5                GO TRY NEXT RECORD
RESTART  EQU   *
*      DETERMINATION IS NOW MADE TO SEE IF IT IS NECCESSARY TO ERASE
*  ANY UNUSED TRACKS.  IF IT IS, IEBDWR IS CALLED TO DO THE ERASING.
*
         SPACE 1
         L     GR2,LASTSEG             LOAD PTR TO LAST SEG WITHIN
*                                        BOUNDRY
         LA    GR2,W1(GR0,GR2)    BUMP PASSED F
         BAL   GR10,GETCCOTT           GET TTR OF LAST SEGMENT
*                                        WITHIN BOUNDRY
         MVC   LASTERS(W4),WKA1   SAVE TTR
         LA    GR2,W1(GR0,GR9)    GET PTR TO MBBCCHHR OF FIRST SEG
         BAL   GR10,GETCCOTT           GET TTR OF FIRST SEG
         MVC   FIRSTERS(W4),WKA1  SAVE TTR
         CLI   FIRSTERS+W2,W1     IS FIRST SEGMENT'S R=1
         BE    ERSNEED                 YES, THIS TRACK IS FIRST
         SPACE 1
         LH    GR2,FIRSTERS            LOAD TT OF TTRN OF FIRST SEG
         LA    GR2,W1(GR0,GR2)    UP TT BY ONE
         STH   GR2,FIRSTERS            STORE BACK UPDATED TT
         SPACE 1
ERSNEED  EQU   *
         XR    GR2,GR2                 CLEAR WORK REG
         STH   GR2,FIRSTERS+W2    CLEAR RN OF TTRN
         STH   GR2,LASTERS+W2
         CLC   FIRSTERS(W2),LASTERS FIRST TRACK HIGHER THAN LAST
         BH    CLEARFGS                YES, NO ERASE NEEDED
         SPACE 1
*   IT IS NOW NECESSARY TO CALL IEBDWR TO ERASE ALL TRACKS FROM
*  FIRSTERS TO AND INCLUDING LASTERS
         SPACE 1
         OI    FORM,ERASE              TURN ON ERASE FLAG FOR DWR
         L     GR15,VIEBDWR            LOAD PTR TO DWR
         BALR  GR14,GR15               GO TO DWR
         SPACE 1
         NI    FORM,XFF-ERASE     TURN OFF ERASE FLAG
         B     CLEARFGS           GO RESET FLAGS
         SPACE 2
GETCCOTT EQU   *
         L     GR15,VCCOTT             LOAD PTR TO CONVERT ROUTINE
         BALR  GR14,GR15               CONVERT TO TTR
         BR    GR10                    RETURN
         SPACE 2
CLEARFGS EQU   *
         MVI   SEGKLDL+W3,X00     TURN OFF ALL FLAGS
         MVI   W2(GR6),X00        RESTART AT BEGIN. OF TRK
         LH    GR14,TRKCAP        RESTART WITH
         STH   GR14,W4(GR6)       FULL TRK
         MVC   W9(W3,GR5),SEGKLDL RESTORE KEY AND DATA LENGTHS
         B     NOTNOTE4                GO TRY THIS ONE AGAIN     A44345
*
***********************************************************************
*                                                                     *
*                   TRACK BALANCE SUB-ROUTINE                         *
*                                                                     *
***********************************************************************
*
*        INPUT REGISTERS
*              GR1 - ADDRESS OF DCB
*              GR5 - ADDRESS OF RECORD TO BE PROCESSED
*              GR6 - ADDRESS OF TTRN
*              GR7 - ADDRESS OF DEVICE CHARACTERIST TABLE
*              GR10- RETURN ADDRESS
*        WORK REGISTERS
*              GR2,3,8,9,11,14 AND 15
*
*        EXITS GR10+0 - NORMAL EXIT
*              GR10+4 - RECORD WILL NOT FIT ON THE CURRENT TRACK
*                     - RETURN FOR COMPRESS AND TRACK OVERFLOW
*
GOTRKBAL EQU   *
         MVC   WKA1(W2),W10(GR5)  MOVE IN DATA LENGTH
         SR    GR9,GR9
         IC    GR9,W9(GR5)        PICK UP KEY LENGTH IF ANY
         LH    GR8,WKA1                DATA SIZE
         AR    GR8,GR9                 ADD KEY LENGTH IF ANY
*                                                                     *
*   CALCULATE THE SPACE REQUIRED TO WRITE DATA AS LAST RECORD. FOR    *
* BEST DIRECT ACCESS SPEED RECORDS SHOULD BE AS BIG AS POSSIBLE,      *
* IDEALLY MAXIMUM FOR TRACK.                                          *
*
         SR    GR3,GR3
         IC    GR3,OVERL               OVERHEAD FOR LAST RECORD
         TM    DEVFLAG,HALFOVER        TWO BYTE OVERHEAD FOR     S20201
*                                        THIS DEVICE             S20201
         BNO   NOTTWO             NO, USE ONE BYTE             @ZA10902
*                                        OVERHEAD                S20201
         SPACE 1                                                 S20201
         LH    GR3,OVERI               LOAD TWO BYTE OVERHEAD    S20201
*                                        (OVERHEAD LAST =        S20201
*                                         OVERHEAD NOT LAST)     S20201
NOTTWO   OC    WKA1(W2),WKA1      IS DATA LENGTH ZERO (EOF)    @ZA10902
         BNZ   NOTTWO1                 NO, GO ON                 S20201
         CLI   DEVCODE+3,X'08'    IS IT A 2314?                @ZA13751
         BE    NOTTWO1            YES,DON'T ADD ONE BYTE       @ZA13751
         SPACE 1                                                 S20201
         LA    GR8,W1(GR0,GR8)         YES, ADD 1 TO KEYLEN PLUS S20201
*                                       DATA LENGTH FOR EOF      S20201
         SPACE 1                                                 S20201
NOTTWO1  EQU   *                                                 S20201
         AR    GR3,GR8                 ADD TOTAL RECORD KEY+DATA SIZE
         SR    GR15,GR15
         LTR   GR9,GR9                 IS THERE A KEY
         BNZ   AKEY                    YES
         IC    GR15,OVERK              OVERHEAD IF A KEY
         SR    GR3,GR15                SUBTRACT KEY OVERHEAD
AKEY     EQU   *
         LH    GR14,W4(GR6)       TRACK BALANCE
         CR    GR3,GR14                WILL THIS TRK HOLD THIS RECORD
         BH    NOFIT                   NO- RECORD WILL NOT FIT ON TRACK
*
NEWBAL   EQU   *
         TM    DEVFLAG,TOLFAC          TOLERANCE FACTOR TO BE ADDED
         BZ    NOTOLER            NO
         MH    GR8,TOLER               MULTIPLY KL+DL BY TOLERANCE
         SRL   GR8,W9             (KL+DL)*TOLERANCE/512
*
NOTOLER  EQU   *
         SR    GR11,GR11
         IC    GR11,OVERI              TRACK OVERHEAD NOT LAST RECORD
         TM    DEVFLAG,HALFOVER        TWO BYTE OVERHEAD FOR     S20201
*                                        THIS DEVICE             S20201
         BNO   NOTTWO2                 NO, USE ONE BYTE OVERHEAD S20201
         SPACE 1                                                 S20201
         LH    GR11,OVERI              LOAD TWO BYTE OVERHEAD    S20201
         SPACE 1                                                 S20201
NOTTWO2  EQU   *                                                 S20201
         AR    GR8,GR11                ADD KL+DL+OVERHEAD
         SR    GR8,GR15                SUBTRACT KEY OVERHEAD IF NO KEY
         SR    GR14,GR8                COMPUTE NEW TRK BALANCE
         STH   GR14,W4(GR6)       NEW TRK BALANCE- MAY BE NEGATIVE
         BNM   *+8                     GR14 NEGATIVE           @ZA01712
         OI    W4(GR6),X'80'           YES INDICATE IT         @ZA01712
         SR    GR2,GR2
         IC    GR2,W2(GR6)        OBTAIN 'R' FROM TTRN
         LA    GR2,W1(GR2)        ADD 1 TO 'R'
         STC   GR2,W2(GR6)        STORE BACK UPDATED 'R'
         BR    GR10               RETURN TO CALLER + 0
*
NOFIT    EQU   *
         TM    TAG,TAG1           DIRECTORY OUTPUT               A36049
         BZ    NOPRBLM            NO, GO ON                      A36049
         CLC   W2(W1,GR6),NDBTR   WAS LAST 'R' FROM TTRN LOWER   A36049
*                                 THAN CURRENT MAX NUMBER OF     A36049
*                                 BLOCKS PER TRACK               A36049
         BNL   NOPRBLM            N0, G0 0N                      A36049
         OI    FLG4,REDASD        YES, INDIC WRITING OF WARNING  A36049
*                                 MSG                            A36049
         B     NEWBAL             RECORD WILL STILL FIT          A36049
NOPRBLM  EQU   *                                                 A36049
         TM    WSFLAG,RETRNOVR         OVERFLOW RECORDS-OUTPUT
         BZ    NOOVERFL                NO-NORMAL RECORD
         CLC   W10(W2,GR5),ZROS   EOF
         BE    NEXTTRK                 YES-XFER
         SR    GR3,GR8                 FETCH OVERHEAD IF ANY
         LR    GR0,GR14           SAVE TRL. BAL.
         LA    GR2,W1(GR3,GR9)    ADD KL.+1
         SR    GR14,GR2           WILL IT FIT
         BNP   NEXTTRK                 NO-IF 0 OR -
         SR    GR0,GR3            FIND ACTUAL LENGTH THAT WILL
         SR    GR14,GR14          ZERO AS TRK BAL LEFT
         LA    GR10,W4(GR10)      RETURN TO CALLER+4
         B     NEWBAL                  AFTER CALCULATING NEW BAL
NEXTTRK  EQU   *
         LH    GR14,TRKCAP             FETCH TOTAL TRK LENGTH
         STH   GR14,W4(GR6)       STOW FOR TRK BAL
         LH    GR2,W0(GR6)        GET TT
         LA    GR2,W1(GR2)        TT+1
         STH   GR2,W0(GR6)        STOW BACK
         MVI   W2(GR6),X00        MAKE R ZERO
         B     GOTRKBAL                MAY OR MAY NOT FIT -RETRY
NOOVERFL EQU   *
         LH    GR2,W0(GR6)        OBTAIN TT
         LA    GR2,W1(GR2)        ADD 1 TO TT
         STH   GR2,W0(GR6)        STOW TT+1
         MVI   W2(GR6),X00        MAKE R ZERO
         LH    GR14,TRKCAP             GET NEW TRK BALANCE
         TM    TAG,TAG2      WRITING MEMBER DATA                 A36074
         BZ    NEWBAL        NO, CALC. NEW TRACK BALANCE         A36074
         TM    COMDCDSW,COMPRESS  IS COMPRESS BEING DONE
         BZ    NEWBAL                  NO-CALCULATE NEW TRK BAL.
         MVC   LASTTRK(W4),LASTMREC SAVE LAST RECORD ADDRESS   @ZA26248
         TM    TAG,TAG8                FIRST TIME AFTER MCM-1ST RECORD
         BO    NEWBAL                  YES-PROCESS AS NEW RECORD
         STH   GR14,W4(GR6)       STORE TRK CAPACITY FOR NEXT RECORD
         B     NEWBAL        GO PROCESS RECORD ON NEXT TRACK   @ZA26248
*
***********************************************************************
*                                                                     *
*                   CONVERT SUB-ROUTINE                               *
*                                                                     *
***********************************************************************
*
*        INPUT  REGISTERS
*              GR1 - ADDRESS OF DCB
*              GR6 - ADDRESS OF TTRN
*              GR10- RETURN ADDRESS
*        WORK REGISTERS
*              GR0,2,14,15
*
CONVERT  EQU   *
         L     GR0,W0(GR6)        FETCH TTRN
         LA    GR2,W1(GR5)        ADDRESS OF MBBCCHHR IN BUFFER
         L     GR15,VTTOCC             ADDRESS OF CONVERSION ROUTINE
         BALR  GR14,GR15               CONVERT TTRN FROM R0 INTO (GR2)
         LTR   GR15,GR15               EOF EXTENTS
         BCR   MS8,GR10           BRANCH NOT END YET
         LR    GR2,GR1                 SAVE DCB ADDRESS - EOV
         OI    DCBOFLGS,X80       TURN ON WRITING FLAG
         TM    TAG,TAG2           WRITING MEMBER DATA            A41760
         BZ    CALLEOV            NO                             A41760
         MVC   WKA1(W8),DCBFDAD   SAVE DCB FULL DISK ADDRESS     A41760
         MVC   WKA1+W8(W2),DCBTRBAL   SAVE DCB TRACK BALANCE     A41760
         MVC   WKA1+W10(W4),DCBRELAD  SAVE LAST REC TTRN         A41760
         MVC   DCBFDAD(W8),ERPLMFD  POINT TO PREVIOUS VALID EOF  A41760
*             WHEN DIRECTORY LAST TIME WAS WRITTEN TO OUTPUT DS  A41760
         MVC   DCBTRBAL(W2),ERPTB SET PREVIOUS VALID TR BALANCE  A41760
         MVC   DCBRELAD(W4),ERPTTR  SET PREVIOUS VALID LAST REC  A41760
CALLEOV  SVC   SVC55              CALL EOV                       A41760
         LR    GR1,GR2                 RETURN DCB ADDRESS - EOV
         NI    DCBOFLGS,X7F       TURN OFF WRITING FLAG
         TM    TAG,TAG2           WRITING MEMBER DATA            A41760
         BO    RESTORE            RETRY CONVERSION             @ZA16486
         TM    TAG,TAG3           WRITING OUT DIR ON SYSUT4?   @ZA16486
         BZ    CONVERT            NO,RETRY CONVERSION          @ZA16486
         L     GR2,DCBDEBAD       PICK UP DEB ADDRESS          @ZA16486
         MVC   UT4FDAD+1(W6),W36(GR2) REINIT EXTENT START      @ZA16486
         B     CONVERT            RETRY CONVERSION             @ZA16486
RESTORE  MVC   DCBFDAD(W8),WKA1   RESTORE DCB FULL DISK ADDR   @ZA16486
         MVC   DCBTRBAL(W2),WKA1+W8   RESTORE DCB TRACK BALANCE  A41760
         MVC   DCBRELAD(W4),WKA1+W10  RESTORE LAST REC TTRN      A41760
         B     CONVERT            RETRY CONVERSION
*
***********************************************************************
*                                                                     *
*                  RECORD CONTROL SUB-ROUTINE                         *
*                                                                     *
***********************************************************************
*
*        INPUT REGISTERS
*              GR5 - ADDRESS OF RECORD TO BE PROCESSED
*              GR10- RETURN ADDRESS
*        EXITS GR10+0 - MORE RECORDS TO PROCESS
*              GR10+4 - NO MORE RECORDS TO PROCESS
*        WORK REGISTERS  GR11
*
UPDATE   EQU   *
         TM    W0(GR5),ENDPROC+LASTREC LAST RECORD FLAG ON
         BZ    UPRECPTR           MORE RECORDS IN THIS BUFFER
         BO    W4(GR10)           LAST RECORD IN LAST BUFFER
         L     GR5,BEGFST2             START OF SECOND BUFFER
         OI    FLG1,IN2ND         SET TO INDICATE IN LAST BUFFER
         BR    GR10                    HANDLE NEXT RECORD
UPRECPTR EQU   *
         SR    GR11,GR11
         IC    GR11,W9(GR5)       GET KEY LENGTH
         MVC   WKA1(W2),W10(GR5)  DATA LENGTH- NO ADDRESSING PROBLEM
         AH    GR11,WKA1               ADD KEY + DATA LENGTH
         LA    GR11,W12(GR11)     +FMBB +COUNT
         AR    GR5,GR11                FIND START OF NEXT RECORD
         BR    GR10               ANALYZE NEXT RECORD
*
***********************************************************************
*                                                                     *
*                  END OF FILE SUB-ROUTINE                            *
*                                                                     *
***********************************************************************
*        INPUT REGISTERS
*              GR1 - ADDRESS OF DCB
*              GR5 - ADDRESS OF RECORD TO BE PROCESSED
*              GR10- RETURN ADDRESS
*        EXITS GR10+0 - IF NO MORE ROOM IN THE BUFFER TO READ
*              RETURN TO CALLER - IF THERE IS MORE ROOM TO READ
*        WORK REGISTERS
*              GR6,7,9,AND 11
*
MORERUUM EQU   *
         SR    GR11,GR11
         IC    GR11,W9(GR5)       GET EOF KEY SIZE IF ANY
         SR    GR7,GR7
         IC    GR7,DCBKEYLE            GET KEY LENGTH OF RECORDS
         LA    GR6,W12(GR5)       GET ADDRESS COUNT FIELD + FMBB
         AR    GR6,GR11                ADD KEY TO LOCATE END OF EOF
         AH    GR7,IBLKSIZE            MAX. BLOCKSIZE + KEY LN
         LA    GR7,W12(GR7)       ALLOW FOR COUNT FIELD + FMBB
         TM    ULLDST,LOAD             IS A LOAD BEING DONE      X010XX
         BNO   WSU07010                NO, GO AROUND             X010XX
         LR    GR9,GR1                 SAVE OUTPUT DCB POINTER   X010XX
         LA    GR1,LOADDCB             LOAD POINTER TO LOAD DCB  X010XX
         LH    GR11,DCBBLKSI           OBTAIN LOAD DCB BLKSIZE   X010XX
         LA    GR1,W8                  LOAD OVERLAP READ LENGTH  X010XX
         SR    GR11,GR1                SUBTRACT OVERLAP LENGTH   X010XX
*                                         FROM LOAD DCB BLKSIZE  X010XX
         CR    GR11,GR7                IS THE LOAD DCB BLKSIZE - X010XX
*                                         OVERLAP LENGTH LARGER  X010XX
*                                         THAN MAXIMUM DIRECT    X010XX
*                                         ACCESS RECORD LENGTH   X010XX
         BNH   WSU07000                NO, GO AROUND             X010XX
         LR    GR7,GR11                SET MAXIMUM RECORD LENGTH X010XX
*                                         TO LOAD DCB BLKSIZE -  X010XX
*                                         OVERLAP LENGTH         X010XX
WSU07000 EQU   *                       RESTORE DCB POINTER       X010XX
         LR    GR1,GR9                 RESTORE POINTER TO OUTPUT X010XX
*                                         DCB                    X010XX
WSU07010 EQU   *                       FIND                      X010XX
         AR    GR7,GR6                 END OF MAXIMUM NEXT RECORD
         L     GR9,END2ND2             END OF SECOND (LOWER) BUFFER
         TM    FLG1,P2FLG1+IN2ND       IN LAST BUFFER OF 2 OR ONLY 1
         BC    MS9,GOTLIMIT       YES
         LA    GR10,GONEXTBF           IF NO ROOM GO TO NEXT BUFFER
         L     GR9,ENDFST1             END OF FIRST BUFFER
GOTLIMIT EQU   *                       TEST IF OUT OF BUFFER
         CR    GR7,GR9                 WILL NEXT RECORD EXCEED BUFFER
         BNH   DONOWRTS                NO- CAN READ MORE INTO BUFFER
         BR    GR10                    EITHER RETURN OR GET NEXT ONE
GONEXTBF EQU   *
         MVI   W0(GR5),LASTREC    SET ONLY LASTREC IN BUFFER FLAG
         L     GR6,BEGFST2             SET AT START OF SECOND BUFFER
         OI    FLG1,IN2ND              SET FLAG TO SHOW IN LAST BUFFER
         B     SETNOWRT                SET THAT HAVE NOT WRITTEN
DONOWRTS EQU   *
         MVI   W0(GR5),X00        RESET ENDPROC,LASTREC FLAGS
SETNOWRT EQU   *
         OI    WSFLAG,NOWRT            SET FLAG EOF IN BUFFER MORE ROOM
         ST    GR5,LASTMREC            SAVE POINTER TO LAST RECORD
         ST    GR6,READNEXT            START OF NEXT RECORD
         B     GOBACK                  RETURN
*
*
***********************************************************************
*                                                                     *
*                   NOTE LIST/USER TTR SUB-ROUTINE                    *
*                                                                     *
***********************************************************************
*
***********************************************************************
*                                                                     *
*     IF USER TTR'S ARE PRESENT IN ANY MEMBER, THIS SECTION OF CODE   *
*   WILL BE EXECUTED.  THIS SECTION CONSISTS OF AN INNER LOOP TO      *
*   PROCESS NOTELISTS AND AN OUTTER LOOP TO PROCESS USER TTR'S.       *
*   EACH INPUT RECORD'S TTR IS CHECKED AGAINST EACH USER AND NOTELIST *
*   TTR AND UPDATED AND FLAGGED WHEN FOUND.  FLAGGING IS DONE SO THAT *
*   ONCE A TTR IS UPDATED IT IS NOT CHECKED FOR AGAIN.  FLAGS         *
*   INDICATING THAT USER TTR'S HAVE BEEN UPDATED ARE IN THE           *
*   COMMUNICATION AREA.  NOTELIST TTRX'S ARE FLAGGED IN THE HIGH      *
*   ORDER BIT OF THE FIELD.  NOTELIST TTR FLAGS ARE CLEARED BEFORE    *
*   WRITING THE NOTELIST TO THE OUTPUT DATA SET.                      *
*                                                                     *
* *** NOTE THAT IF THE HIGH ORDER BIT OF THE TTRX FIELD IS USED,      *
*   THE TTR WILL NOT BE UPDATED AND THE HIGH ORDER BIT WILL BE SET    *
*   TO ZERO AT THE END OF PROCESSING.                                 *
*                                                                     *
***********************************************************************
*
CHKUTTRS EQU   *
         LR    GR0,GR1            SAVE ''OUTPUT'' DCB PTR.
         LA    GR1,INDCB               POINTER TO INPUT DCB
         LR    GR2,GR5                 POINTER TO FMBBCCHHR IN BUFFER
         LA    GR2,W1(GR0,GR2)    BUMP PASSED F
         L     GR15,VCCOTT             ADDRESS OF CONVERSION RTN
         BALR  GR14,GR15               GET INPUT TTR
         LR    GR1,GR0            RETURN ''OUTPUT''
         SPACE
         MVC   SAVETTR0(W3),WKA1  MOVE TTR FOR TEST
CHKUTTRL EQU   *                                                 A44345
         NI    UTTRFLAG,XFF-NOTELIST TURN OFF NOTELIST PTR FOUND FLAG
         L     GR7,IDEAD               DIRECTORY ENTRY POINTER
         IC    GR3,TTRNUMB(GR0,GR7) NUMBER OF USER TTR'S
         SLL   GR3,W25            GET NUMBER OF USER TTR'S AS A
         SRL   GR3,W30            FULL REGISTER BINARY VALUE
*                                      (STRIP OFF ALIAS AND NUMBER
*                                         OF HALF WORDS OF USER DATA)
         LA    GR7,TTRDIRC(GR0,GR7) START OF USER TTR FIELD
OUTLOOP  EQU   *
         CLI   W3(GR7),X00        IS THIS TTRN A NOTELIST POINTER
         BE    CARRYON                 NO, BRANCH AROUND
         L     GR2,AMSG           LOAD PTR TO MSG CSECT          A38720
         USING IEBWSUMG,GR2       ADDRESSABILITY TO MSG CSECT    A38720
         LA    GR8,MSGNO176       LOAD PTR TO MSG                A38720
         DROP  GR2                                               A38720
         TM    UTTRFLAG,NOTELIST       WAS A PREVIOUS TTRN A NOTELIST
*                                         POINTER
         BO    GIVEMSG                 ERROR, MORE THAN ONE      A38720
*                                NOTELIST POINTER IS ILLEGAL     A38720
         OI    UTTRFLAG,NOTELIST       SET NOTELIST PTR FOUND SWITCH
         TM    WSFLAG,NTELSTRC    CHECKING FOR NOTELIST RECORD   A44345
         BO    FORNOTE            YES, BRANCH AROUND             A44345
         XR    GR8,GR8                 CLEAR REGISTER
         L     GR9,ADNL                POINTER TO NOTELIST
         IC    GR8,W9(GR0,GR9)    LOAD KEY LENGTH
         AR    GR9,GR8                 BUMP NOTELIST POINTER BY KEY
         LA    GR9,W12(GR0,GR9)   LENGTH+FMBB+COUNT FIELD
         TM    INDCB+RECFM,FIXREC IS INPUT FIXED OR UNDEFINED
         BO    GETNUMB            YES - GO AROUND
         LA    GR9,W8(GR0,GR9)    BUMP PAST BIG AND LITTLE
*                                         LL FIELDS PLUS 2 RESERVED
*                                         BYTES
GETNUMB  EQU   *
         IC    GR8,W3(GR0,GR7)    INSERT NUMBER OF NOTELIST TTRX'S
INNRLOOP EQU   *
         TM    W0(GR9),REPFLAG    HAS THIS TTR BEEN UPDATED
         BO    NOTEDECR                YES, GO ON
         CLC   W0(W3,GR9),SAVETTR0  ARE TTR'S EQUAL
         BNE   NOTEDECR                NO, GO ON
         MVC   W0(W3,GR9),OUTDS1  PUT IN OUTPUT TTR
         OI    W0(GR9),REPFLAG    SET REPLACED FLAG
NOTEDECR EQU   *
         LA    GR9,W4(GR0,GR9)    INCREMENT TO NEXT TTRX
         BCT   GR8,INNRLOOP            LOOP TILL DONE
CARRYON  EQU   *
         TM    WSFLAG,NTELSTRC    CHECKING FOR NOTELIST RECORD   A44345
         BO    USERDECR           YES, BRANCH TO OUTER LOOP      A44345
         STC   GR3,CONMASK             STORE FOR CONVERSION
         TR    CONMASK(W1),BITSWAP TRANSLATE INTO A MASK
         IC    GR8,CONMASK             LOAD MASK
         EX    GR8,TESTREP             HAS THIS TTR BEEN UPDATED
         BO    USERDECR                YES, GO TO END OF OUTTER LOOP
FORNOTE  EQU   *                                                 A44345
         CLC   W0(W3,GR7),SAVETTR0  ARE TTR'S EQUAL
         BNE   USERDECR                NO, GO TO END OF OUTTER LOOP
         TM    WSFLAG,NTELSTRC    CHECKING FOR NOTELIST RECORD   A44345
         BO    NOTEUPDT           YES, BRANCH TO MOVE NOTELIST   A44345
         MVC   W0(W3,GR7),OUTDS1  PUT IN OUTPUT TTR
         OC    UTTRFLAG(W1),CONMASK SET REPLACED FLAG
         CLI   W3(GR7),X00        HAVE I JUST UPDATED A NOTELIST
*                                        POINTER TTR
         BE    USERDECR                NO, GO ON
NOTEUPDT EQU   *                                                 A44345
         ST    GR10,RETSAVE            SAVE REGISTERS
         ST    GR3,RETSAVE+W4
         ST    GR7,RETSAVE+W8
         BAL   GR10,NOTENOW            RESET FLAGS AND MOVE NOTELIST
*                                        TO BUFFER
         L     GR10,RETSAVE            RESTORE REGISTERS
         L     GR3,RETSAVE+W4
         L     GR7,RETSAVE+W8
USERDECR EQU   *
         LA    GR7,W4(GR0,GR7)    INCREMENT TO NEXT TTRN
         BCT   GR3,OUTLOOP             LOOP TILL DONE
         BR    GR10                    GET NEXT RECORD
*                                                                     *
*    CLEAR FLAGS IN NOTELIST TTRX'S IN WORKAREA AND MOVE TO BUFFER    *
*                                                                     *
NOTENOW  EQU   *
         XR    GR8,GR8                 CLEAR REGISTER
         L     GR9,ADNL                POINTER TO NOTELIST
         IC    GR8,W9(GR0,GR9)    LOAD KEY LENGTH
         AR    GR9,GR8                 BUMP NOTELIST POINTER BY KEY
         LA    GR9,W12(GR0,GR9)   LENGTH+FMBB+COUNT FIELD
         TM    INDCB+RECFM,FIXREC      IS RECFM FIEXD OR UNDEFINED
         BO    NUMBGET                 YES, GO AROUND
         LA    GR9,W8(GR0,GR9)    BUMP POINTER PASSED LL FIELDS
NUMBGET  EQU   *
         IC    GR8,W3(GR0,GR7)    INSERT NUMBER OF NOTELIST TTRX'S
CLEARFLG EQU   *
         NI    W0(GR9),XFF-REPFLAG CLEAR FLAGS
         LA    GR9,W4(GR0,GR9)    BUMP TO NEXT TTRX
         BCT   GR8,CLEARFLG            CONTINUE CLEARING
         L     GR2,ADNL                POINTER TO NOTELIST RECORD
         LA    GR2,W12(GR0,GR2)   SPACE OVER NOTELIST COUNT+FMBB
         LA    GR3,W12(GR5)       START OF NOTELIST IN OUTPUT AREA
         IC    GR8,W3(GR0,GR7)    INSERT NUMBER OF NOTELIST      X010XX
*                                      TTRX'S                    X010XX
         SLL   GR8,W2             AND MULTIPLY BY 4              X010XX
         TM    INDCB+RECFM,FIXREC IS INPUT PDS RECFM FIXED OR    X010XX
*                                      UNDEFINED                 X010XX
         BO    WSU08000           YES, GO AROUND                 X010XX
         LA    GR8,W8(GR0,GR8)    ADD LENGTH OF BIG AND LITTLE   X010XX
*                                      LL FIELDS                 X010XX
WSU08000 EQU   *                                                 X010XX
         STH   GR8,WKA1           SAVE NOTELIST DATA SIZE        X010XX
         SR    GR8,GR8
         IC    GR8,W9(GR5)        NOTELIST MIGHT JUST HAVE A KEY
         AH    GR8,WKA1                TOTAL SIZE OF NOTELIST
*
***********************************************************************
*                                                                     *
*                   MOVE SUB-ROUTINE                                  *
*                                                                     *
***********************************************************************
*
*        INPUT REGISTERS
*              GR2 -ADDRESS OF WHERE TO MOVE FROM
*              GR3 -ADDRESS OF WHERE TO MOVE TO
*              GR8 -LENGTH OF MOVE
*        EXIT  GR10+0
*        WORK REGISTERS
*              GR9 AND 11
*
MOVEUM   EQU   *
         LR    GR9,GR8                 SAVE TOTAL SIZE
         SRL   GR8,W8             DIVIDE BY 256
         LTR   GR8,GR8
         BC    MS8,MOVE1          LESS THAN 256 BYTES DO IN 1 MOVE
         LA    GR11,W256          MOVE CONSTANT
MOVE256  EQU   *
         MVC   W0(W256,GR3),W0(GR2)  MOVE 256 BYTES
         LA    GR2,W256(GR2)
         LA    GR3,W256(GR3)      UP TO AND FROM POINTERS
         SR    GR9,GR11                AMT. REMAINING TO MUVE
         BCT   GR8,MOVE256             MORE 256 BYTE BLOCKS TO MOVE
         LTR   GR9,GR9                 CAME OUT EVEN-NO MORE
         BCR   MS8,GR10           YES- NONE LEFT TO MOVE- EXIT
MOVE1    EQU   *
         BCTR  GR9,GR0            DECREMENT FOR EXECUTE
         EX    GR9,MOVENOTE       MOVE LAST ONES
         BR    GR10                    EXIT LOOP
*
***********************************************************************
*                                                                     *
*                   RECORD LENGTH VALIDATION SUB-ROUTINE              *
*                                                                     *
***********************************************************************
*
*        INPUT REGISTERS
*              GR1 - ADDRESS OF OUTPUT DCB
*              GR5 - ADDRESS OF RECORD TO BE PROCESSED
*              GR6 - ADDRESS OF TTRN
*              GR10- RETURN ADDRESS
*        WORK  REGISTRES
*              GR2,3,8,9,11,14,AND 15
*        EXITS GR10+0
*
*
RECLNVAL EQU   *
         L     GR2,AMSG                LOAD PTR TO MSG CSECT
         USING IEBWSUMG,GR2            ADDRESSABILITY TO MSG CSECT
         TM    SENSE,SENSE5            PREVIOUS RECORD A SHORT 1
         BO    FXBLKSTD                YES-XFER TO TEST IF THIS IS EOF
         LA    GR8,MSGNO188            LOAD PTR TO MSG           A38720
         CLC   W10(W2,GR5),IBLKSIZE    INPUT VS. INPUT BLOCKSIZE A38720
         BH    GIVEMSG                 XFER-IF INPUT REC HI      A38720
         LR    GR11,GR6                GET OUTPUT TTRN PTR.
         LA    GR8,MSGNO175            LOAD PTR TO LONG MSG
         LA    GR7,OUTCHAR        DEVICE CHARACTERISTICS       @ZA27766
         CLC   W10(W2,GR5),TRKCAP RECORD EXCEED TRACK CAPACITY @ZA27766
         BNH   VSBLKSZ            NO,GO TEST AGAINST BLKSIZE   @ZA27766
         OI    VTMFLG1,UNUSEND    YES,SET ERROR FLAG           @ZA27766
         B     CONSTMSG           GO AND GIVE MSG IEB175I      @ZA27766
VSBLKSZ  CLC   W10(W2,GR5),OBLKSIZE INPUT VS. OUTPUT BLOCKSIZE @ZA27766
         BH    CONSTMSG                XFER-IF INPUT HI
         BCR   MS8,GR10           RTN. TO CALLER IF EQUAL
         CLC   W10(W2,GR5),ZROS   IS THIS AN EOF RECORD (DATA LEN = O)
         BCR   MS8,GR10           YES-RTN TO CALLER
         TM    DCBRECFM,VARUNDF        UNDEFINED OR VARIABLE LN. REC.
         BCR   MS1,GR10           YES-RTN TO CALLER
         LA    GR8,MSGNO174            LOAD PTR TO SHORT MSG
         TM    DCBRECFM,FIXBLKS        FIXED BLOCK STANDARD
         BZ    CONSTMSG                IF FIXED
         BM    FIXBLK                  IF FIXED BLOCK
         ST    GR6,WARNTTRN            SAVE THIS TTRN FOR NEXT PASS
         OI    SENSE,SENSE5            FBS-SET SHORT REC. FLAG
FIXBLK   EQU   *
         CLC   W10(W2,GR5),OUTLRECL INPUT LN. VS OUTPUT LRECL
         BL    CONSTMSG                LESS THAN LRECL
         BCR   MS8,GR10           EQ- RTN. TO CALLER
         MVC   WKA1(W2),W10(GR5)  GET DATA LN OF RECORD
         SR    GR2,GR2
         LH    GR3,WKA1
         LH    GR9,OUTLRECL            FETCH OUTPUT LRECL
         DR    GR2,GR9                 IS INPUT AN
         LTR   GR2,GR2                 INTERGRAL OF LRECL
         BCR   MS8,GR10           YES-RTN. TO CALLER
CONSTMSG EQU   *
         L     GR2,AMSG                LOAD PTR TO MSG CSECT
         MVI   MSGBUF,MSGCLR
         MVC   MSGBUF+W1(W120),MSGBUF  CLEAR MESSAGE BUFFER
         MVC   MSGBUF+W1(W7),W0(GR8)  FETCH MSG. NO.
         MVC   MSGBUF+W10(W29),WARNINRC STANDARD HEADER
         MVC   MSGBUF+W40(W27),W7(GR8)  SHORT OR GREATER MSG
         MVC   MSGBUF+W68(W8),NAMEMSG  DDNAME MSG HEADER
         L     GR9,NXTINDS             FETCH POINTER TO CURRENT INDD
         MVC   MSGBUF+W76(W8),W2(GR9)  DDNAME TO MSG
         MVC   MSGBUF+W85(W13),TTRNMSG TTRN HEADER
         SR    GR2,GR2                 INITIALIZE
         SR    GR3,GR3                 WORK REGISTERS
         SR    GR14,GR14               FOR CONVERSION OF TTRN TO
         SR    GR15,GR15               PRINTABLE HEX.
         LA    GR9,W4             NO. OF BYTES TO CONVERT
CONVHEX  EQU   *
         IC    GR2,W0(GR11,GR15)  FETCH FIRST CHARACTER
         SRDL  GR2,W4             SAVE BOTH INTEGERS
         IC    GR2,NUM(GR2)            FETCH HEX EQUIVALENT FOR 1ST NO.
         STC   GR2,MSGBUF+W98(GR14) STOW IN MSG
         SRL   GR3,W28            FIND SECOND HALF
         IC    GR3,NUM(GR3)            FETCH HEX EQU.
         STC   GR3,MSGBUF+W99(GR14) STOW IN NEXT SLOT IN MSG
         LA    GR15,W1(GR15)      UPDATE INDEX TO NO. TO CONVERT
         LA    GR14,W2(GR14)      INDEX TO PLACE IN MSG
         BCT   GR9,CONVHEX        LOOP UNTIL ALL CONVERTED
         TM    VTMFLG1,UNUSEND    IS IT REC'S LONGER THATN TRK @ZA27766
         BO    MSGTERM1           YES,TERMINATE AFTER MSG      @ZA27766
         MVI   MSG1,IOERF+LASTMSG      INDICATE SYNAD + LAST MSG
         L     GR15,VIEBVMS       FETCH MSG. WRITER ADDRESS
         BALR  GR14,GR15               GO
         CLI   RCBUF,RTCD         IS RETURN CODE 4 OR HIGHER     A44144
         BNL   DONTSET            YES-DON'T SET RETURN CODE      A44144
         MVI   RCBUF,RTCD         SET RETURN CODE=4              A44144
DONTSET  EQU   *                                                 A44144
         BR    GR10                    RTN. TO CALLER
FXBLKSTD EQU   *
         LA    GR8,MSGNO174            POINT TO SHORT MSG
         NI    SENSE,XFF-SENSE5   RESET SHORT REC. FLAG
         L     GR11,WARNTTRN           FETCH SAVED TTRN
         CLC   W10(W2,GR5),ZROS   THIS ONE EOF
         BCR   MS8,GR10           YES- RTN TO CALLER
         B     CONSTMSG           OTHERWISE GET MESSAGE
         DROP  GR2
*
***********************************************************************
*                                                                     *
*                  CALL WRITE AND RETURN                              *
*                                                                     *
***********************************************************************
*
WRITEUM  EQU   *
         NI    WSFLAG,XFF-FORCEWRT-NOWRT-RETRNOVR   RESET FOR
*                                 RE-ENTRY TO IEBWSU
         NI    FLG1,XFF-IN2ND     RESET SECOND SWITCH
WRITEIT  EQU   *                                                 A45142
         L     GR15,VIEBDWR            WRITE ROUTINE ADDRESS
         BALR  GR14,GR15               WRITE BUFFER
         BR    GR10               RETURN TO CALLER OF SUBROUTINE
*
*
GOBACK   EQU   *
         L     GR13,SAVERGS+W4    PICK UP POINTER TO REGISTERS
         RETURN (14,12)                RETURN TO CALLER
*
         EJECT
GIVEMSG  EQU   *                                                 A38720
         L     GR2,AMSG                LOAD PTR TO MSG CSECT
         USING IEBWSUMG,GR2            ADDRESSABILITY TO MSG CSECT
         MVI   MSGBUF,MSGCLR      CLEAR
         MVC   MSGBUF+W1(W120),MSGBUF   BUFFER
         MVC   MSGBUF+W1(W7),W0(GR8)  FETCH MSG. NO.             A38720
         MVC   MSGBUF+W10(W53),MEMBMSG  STANDARD HEADER          A38720
         MVC   MSGBUF+W64(W30),W7(GR8)  NOTELIST OR GREATER MSG  A38720
         L     GR3,NXTINDS             POINTER TO INDD NAME
         MVC   MSGBUF+W51(W8),W2(GR3) PLACE DDNAME IN BUFFER
         SPACE 1
         L     GR3,IDEAD               POINTER TO MEMBER NAME
         MVC   MSGBUF+W17(W8),W0(GR3) MOVE MEMBER NAME TO BUFFER
         SPACE 1
MSGTERM1 MVI   MSG1,IOERF+LASTMSG INDICATE SYNAD + LAST MSG    @ZA27766
         L     GR15,VIEBVMS            LOAD PTR TO MSG WRITER
         BALR  GR14,GR15               ISSUE ERROR MSG
         SPACE 1
         CLI   RCBUF,RTCDE        IS RETURN CODE 8 OR HIGHER     A44144
         BNL   DONOTSET           YES-DON'T SET RETURN CODE      A44144
         MVI   RCBUF,RTCDE        SET RETURN CODE=8              A44144
DONOTSET EQU   *                                                 A44144
         MVI   VTMFLG1,UNUSEND         SET SWITCH FOR VTM
         L     GR15,VIEBVTM            LOAD PTR TO VTM
         BALR  GR14,GR15               BRANCH TO VTM  (NO RETURN)
         DROP  GR2
         SPACE 2                                                 A34431
CHKFIRST EQU   *                                                 A34431
         TM    WSFLAG,FRSTMREC    WAS FIRST RECORD OF A MEMBER   A34431
*                                  JUST PROCESSED                A34431
         BCR   W8,GR10            NO, RETURN                     A34431
         SPACE 1                                                 A34431
         NI    WSFLAG,XFF-FRSTMREC TURN OFF FIRST RECORD OF A    A34431
*                                    MEMBER SWITCH               A34431
         MVC   SVTTR(W3),OUTDS1   ESTABLISH MEMBER TTR           A34431
         BR    GR10               RETURN TO CALLER               A34431
         EJECT                                                   A34431
         EJECT
TESTREP  TM    UTTRFLAG,X00       TM  INSTRUCTION EXECUTED BY VWS
CONMASK  DC    X'00'                   MASK FIELD
BITSWAP  EQU   *-1
         DC    X'804020'               TRANSLATE FIELD
REPFLAG  EQU   X'80'                   FLAG FOR TTR'S REPLACED
*                                        REPLACED
MOVENOTE MVC   W0(W1,GR3),W0(GR2) MOVE FOR LESS THAN 256 BYTES
COMPSEGS CLC   W1(W0,GR9),W1(GR5) COMPARE INST FOR TRK OV-FLOW
AMSG     DC    A(IEBWSUMG)        ADDR OF WSU MESSAGE CSECT
NUM      DC    CL16'0123456789ABCDEF'  PRINTABLE HEX CONVERSION TABLE
FIXREC   EQU   X'80'              FIXED AND UNDEFINED BIT OF RECFM
*                                 IN DCB
VARUNDF  EQU   X'40'                   UNDEFINED/VARIABLE-RECFM
FIXBLKS  EQU   X'18'                   FIXED BLOCKED STANDARD-RECFM
OVERFLOW EQU   X'20'                   OVERFLOW FLAG DCBRECFM
TTRNUMB  EQU   11                      START OF TTR COUNT IN DIRECTORY
TTRDIRC  EQU   12                      START OF USER TTR FIELD IN D.E.
         DS    0F
PATCHLN  EQU   (*-START)/20       5 PER CENT PATCH LENGTH
PATCH    DC    XL(PATCHLN)'00'         PATCH AREA                A41780
         EJECT
IEBWSUMG CSECT
* FOLLOWING DC'S ARE MESSAGE SEGMENTS WHICH ARE PUT TOGETHER WHEN WSU
* IS TO SET UP ITS OWN WARNING/ERROR MSGS.
MSGNO174 DC    C'IEB174IA SHORT LENGTH RECORD      '
MSGNO175 DC    C'IEB175IGREATER THAN OUTPUT BLKSIZE'
WARNINRC DC    C'** WARNING ** INPUT RECORD IS'
NAMEMSG  DC    C'-DDNAME='
TTRNMSG  DC    C'-OUTPUT TTRN='
MSGNO176 DC    C'IEB176IMORE THAN ONE NOTELIST POINTER'          A38720
MSGNO188 DC    C'IEB188IRECORDS GREATER THAN BLKSIZE  '          A38720
MEMBMSG  DC    C'MEMBER          IN DATASET REFERENCED'          A38720
         DC    C' BY          HAS'                               A38720
         EJECT
DEVTAB   DSECT
*                                                                     *
*   DIRECT ACCESS DEVICE TABLE OVERLAY                                *
*         OUTCHAR1, UT3CHAR, UT4CHAR BYFFERS IN IEBMCA                *
*                                                                     *
DEVCODE  DS    F                       DEVICE CODE FROM UCB
MAXSIZE  DS    F                       MAXIMUM SIZE UNKEYED BLOCK
MAXCC    DS    H                       NUMBER OF CYLINDERS
MAXHH    DS    H                       NUMBER OF TRACKS PER CYLINDER
TRKCAP   DS    H                       MAXIMUM TRACK LENGTH
OVERI    DS    XL1                     OVERHEAD FOR NOT LAST RECORD
OVERL    DS    XL1                     OVERHEAD FOR LAST RECORD
OVERK    DS    XL1                     OVERHEAD REDUCTION FOR NON-KEYED
DEVFLAG  DS    XL1                     APPLY TOLERANCE FACTOR NOT LAST
TOLER    DS    H                       GAP LENGTH CALCULATION TOLERANCE
HALFOVER EQU   X'08'                   OVERHEAD LAST=OVERHEAD    S20201
*                                      NOT LAST AND IS A TWO     S20201
*                                      BYTE FIELD                S20201
TOLFAC   EQU   X'01'                   TOLERANCE FACTOR TO BE ADDED
*                                                                     *
*   END OF DEVTAB OVERLAY                                             *
*                                                                     *
         DCBD  DSORG=PO
RECFM    EQU   DCBRECFM-IHADCB         RECFM FIELD OFFSET IN DCB
         EJECT
IEBMCA   DSECT
         IEBMCA
OUTUCBDV EQU   OUTCHAR+3  DEVICE CODE INFORMATION
A2321    EQU   X'05'      DEVICE CODE FOR A 2321
         END
