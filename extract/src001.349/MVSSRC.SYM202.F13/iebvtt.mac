         TITLE 'IEBVTT - IEBCOPY CTLTAB SORT'
IEBVTT   CSECT
*D282000-315000                                                  A33287
*C846000                                                         A41780
*C831440                                                        YA01455
*D832160                                                        YA01455
***********************************************************************
*TITLE   IEBVTT - IEBCOPY CTLTAB SORT                                 *
*                                                                     *
*STATUS  CHANGE LEVEL 001                                             *
*                                                                     *
*FUNCTION/OPERATION - SORTS CTLTAB SO THAT THERE ARE POINTERS TO      *
*             INPUT DIRECTORY ENTRIES ARRANGED IN TTR ORDER AND IN    *
*             ALPHABETICAL ORDER.                                     *
*ENTRY POINTS - IEBVTT                                                *
*                                                                     *
*INPUT - A POINTER TO THE CTLTAB                                      *
*        NUMBER OF ENTRIES TO BE SORTED FOR 'CURRENT' INPUT DATA SET  *
*        A BIT INDICATING THAT A PARTICULAR ENTRY IS IN 'CURRENT'     *
*        INPUT DATA SET.                                              *
*                                                                     *
*OUTPUT - CTLTAB WITH POINTERS TO INPUT DIRECTORY ENTRIES SORTED      *
*        IN TTR ORDER AND IN ALPHABETICAL ORDER                       *
*                                                                     *
*EXITS - NORMAL - RETURN TO CALLER                                    *
*        ERROR - RETURN TO IEBVTM VIA IEBVMS.                         *
*                                                                     *
*EXTERNAL ROUTINES -NONE                                              *
*                                                                     *
*TABLES/WORK AREA - CTLTAB                                            *
*ATTRIBUTES - SERIALLY REUSEABLE                                      *
***********************************************************************
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
SAV8     EQU   8             SAVE AREA DISPLACEMENT
SAV4     EQU   4             SAVE AREA DISPLACEMENT
LEN10    EQU   10            LENGTH OF 10
OFF      EQU   X'00'         OFF POSITION FOR INTERNAL SWITCH
DISP0    EQU   0             DISPLACEMENT OF 0
MS7      EQU   7             MASK OF 7
LEN4     EQU   4             LENGTH OF 4
LEN2     EQU   2             LENGTH OF 2
LEN1     EQU   1             LENGTH OF 1
RTCDE    EQU   C'4'          RETURN CODE OF 4
DISP6    EQU   6             DISPLACEMENT OF 6
DISP7    EQU   7             DISPLACEMENT OF 7
LEN3     EQU   3             LENGTH OF 3
DISP1    EQU   1             DISPLACEMENT OF 1
LEN9     EQU   9             LENGTH OF 9
DISP4    EQU   4             DISPLACEMENT OF 4
         SAVE  (14,12),,*
         BALR  R11,R0              ESTABLISH ADDRESSABILITY
         USING *,R11
         USING IEBMCA,R4
         LA    R12,SV3
         ST    R12,SAV8(R13)      SAVE ADDRESS OF CALLED ROUTINES SAVE
*                                  AREA
         ST    R13,SAV4(R12)      SAVE ADDRESS OF CALLERS SAVE AREA
         LR    R13,R12
         LA    R7,LEN10
         MVI   SWITCH,OFF         INITIALIZE INTERNAL SWITCH
         L     R10,ADWK           LOAD POINTER TO UT3 BUFFER     A33287
         MVC   KEYDISP(LEN3,R10),KDD   INITIALIZE KDD PORTION    A33287
*                                    OF COUNT FIELD INCASE SPILL A33287
*                                    NEEDED                      A33287
         LA    R10,DATADISP(R0,R10)    GET POINTER TO FIRST      A33287
*                                    DATA BYTE IN BUFFER         A33287
         ST    R10,WORKADDR       INITIALIZE POINTER             A33287
         SR    R12,R12            CLEAR REG                      A33287
         STH   R12,NUMENT         INITIALIZE COUNTER             A33287
         MVI   SPSWITCH,OFF       RESET SPILL SWITCH             A33287
         OI    FLG2,FMTSPL        INDICATE TO WRITE CT-KEY-DATA  A33287
*                                   IF NEED TO USE SYSUT3        A33287
         IC    R12,TAG            SAVE                           A33287
         STC   R12,TAGSAVE          SWITCHES                     A33287
         IC    R12,SENSE             TAG AND                     A33287
         STC   R12,SENSSAVE           SENSE                      A33287
         SPACE 1                                                 A33287
*   IN CASE SPILLING MUST BE DONE SWITCHES SENSE AND TAG ARE SET A33287
*  AT THIS TIME                                                  A33287
         MVI   SENSE,SENSE1+SENSE3+SENSE8  INDICATE READING ALPHAA33287
*                                 SORTED INFORMATION FROM SYSUT3 A33287
*                                 (ALTHOUGH SENSE8 IS NOT USED BYA33287
*                                 IEBDRD,IEBWSU OR IEBDWR IT IS  A33287
*                                 USED BY IEBIOE IN CASE AN I/O  A33287
*                                 ERROR OCCURS)                  A33287
         MVI   TAG,TAG4           INDICATE WRITING TO SYSUT3     A33287
MOVEINIT L     R2,CTAD
         L     R3,BCB
         ST    R3,BUFAD       INITIALIZE PTR BUFFER1
         L     R3,END2ND2
         ST    R3,ENDBUF      SAVE PTR END BUFFER1
MOVEDE   TM    DISP0(R2),SEBIT1+SEBIT4 IS ENTRY NEWNAME OR NOT TO BE
*                                      PROCESSED
         BC    MS7,LASTENT             IF EITHER, SEE IF ITS LAST ENTRY
         TM    DISP0(R2),SEBIT5        IS ENTRY FOUND
         BZ    LASTENT            IF NOT, SEE IF THIS IS THE LAST ENTRY
         L     R3,BUFAD
         TM    SWITCH,BUFTOTAB
         BO    REVERSE            IF BIT ON, MOVING FROM BUFFER TO TAB.
         LA    R5,LEN4(R3)
         C     R5,ENDBUF
         LA    R8,LASTENT         LOAD RETURN ADDRESS INCASE     A33287
*                                    BRANCH TAKEN                A33287
         BH    BUFFEXT            IF NO MORE SPACE IN BUFFER     A33287
*                                    GO TO SUBROUTINE TO SET     A33287
*                                    UP TO SPILL                 A33287
         MVC   DISP0(LEN4,R3),LEN2(R2) MOVE BYTES 2 THRU 5 OF CTLTAB
*                                      ENTRY TO BUFFER
         ST    R5,BUFAD
         B     LASTENT            SEE IF MORE ENTRIES TO BE TRIED
REVERSE  EQU   *                                                 A33287
         LA    R15,LEN4(R0,R3)    BUMP CURRENT POINTER BY 4      A33287
         C     R15,ENDBUF         IS THE CURRENT ENTRY ENTIRELY  A33287
*                                    WITHIN THE BUFFER           A33287
         LA    R8,LASTENT         LOAD RETURN POINTER IN CASE    A33287
*                                    BRANCH IS TAKEN             A33287
         BH    RETRIEVE           NO, GO GET NEXT ENTRY FROM     A33287
*                                    SYSUT3                      A33287
         MVC   DISP6(LEN4,R2),DISP0(R3)  YES, RESTORE CTLTAB     A33287
*                                    ENTRY FROM BUFFER           A33287
         LA    R3,LEN4(R3)             UPDATE PTR TO NEXT ENTRY IN BUFF
         ST    R3,BUFAD
*                             CTLTAB
LASTENT  TM    DISP0(R2),SEBIT6   IS THIS THE LAST ENTRY TO PROCESS
         BZ    UPDATE              NOT LAST ENTRY THEN UPDATE TO NEXT
*                                  ENTRY
         TM    SWITCH,BUFTOTAB
         BO    RETURN              TTR SORT IS DONE AND ALL ENTRIES
*                                  HAVE BEEN MOVED FROM BUFFER TO
*                                  CTLTAB
         BAL   R8,PURGE           MAKE SURE THAT LAST BLOCK      A33287
*                                    HAS BEEN WRITTEN TO UT3     A33287
*                                    (NO WRITING WILL BE DONE IF A33287
*                                    SYSUT3 HAS NOT BEEN USED)   A33287
         MVC   UT3SCTOR(LEN1),SECTSAVE  RESTORE SYSUT3 SECTOR    S20201
*                                      AS IT WAS BEFORE WRITING  S20201
*                                      WAS DONE TO SYSUT3        S20201
         L     R2,CTAD
         B     FINDENT1           GO LOOK FOR 1ST ENTRY TO PROCESS
UPDATE   LA    R2,LEN10(R2)       UPDATE PTR NEXT CTLTAB ENTRY
         B     MOVEDE             GO TEST FOR NEWNAME OR DONT-COPY
FINDENT1 TM    DISP0(R2),SEBIT1+SEBIT4
         BZ    ENTF               IF NOT NEWNAME OR DONTCOPY, BRANCH
NEXT     LA    R2,LEN10(R2)
         B     FINDENT1           LOOP TO TEST NEXT CTLTAB ENTRY
ENTF     TM    DISP0(R2),SEBIT5        WAS THIS ENTRY FOUND
         BZ    NEXT               IF NOT, TRY NEXT ONE
         LA    R3,LEN1
         CH    R3,FCT
         ST    R2,ENTRY1
         BL    TEST2              IF MORE THAN 1 ENTRY TO PROCESS, BR.
         MVC   DISP6(LEN4,R2),LEN2(R2) MOVE PTR TO DE TO RIGHT SIDE OF
*                                 CTLTAB
         B     RETURN             HAVE NOW SET-UP THE ONLY CTLTAB ENTRY
TEST2    LA    R2,LEN10(R2)
         TM    DISP0(R2),SEBIT1+SEBIT4 IS THIS ENTRY NEW NAME OR DON'T
*                                 COPY
         BZ    FOUND               SEE IF FOUND
LAST     TM    DISP0(R2),SEBIT6   IS THIS THE LAST CTLTAB ENTRY
         BZ    TEST2               TEST NEXT ENTRY
         OI    SWITCH,ENDSORT      TURN ON ENDSORT
         B     NEXTPAIR           SEE IF NEED TO MOVE PTRS BACK TO TAB.
FOUND    TM    DISP0(R2),SEBIT5   ENTRY2 FOUND
         BZ    LAST               IF NOT, SEE IF ITS THE LAST ENTRY
         ST    R2,ENTRY2
         TM    DISP0(R2),SEBIT6   IS THE 2ND COMPARAND THE LAST ENTRY
         BZ    COMPARE            IF NOT, DONT SET 'ENDSORT' SWITCH
         OI    SWITCH,ENDSORT
COMPARE  L     R5,ENTRY1
         L     R6,ENTRY2
         CLC   DISP7(LEN3,R5),DISP7(R6) COMPARE ENTRY 1 TO ENTRY2
         BL    NEXTPAIR            IF IN ORDER SET UP NEXT PAIR
         ST    R5,NEWENT          IF ENTRY1 HIGH   NEWENT=ENTRY1
         ST    R6,SAVED           SAVED=ENTRY2
COMPENT  L     R2,NEWENT
         L     R3,SAVED
         CLC   DISP7(LEN3,R2),DISP7(R3) COMPARE NEWENT TO SAVED ENTRY
         BL    NEXTPAIR           IF IN ORDER, SET UP NEXT PAIR
         BE    ALIASP             IF SAME, CHECK FOR ALIAS INDICATORS
INTERC   EQU   *
         XC    DISP1(LEN9,R2),DISP1(R3)
         XC    DISP1(LEN9,R3),DISP1(R2)
         XC    DISP1(LEN9,R2),DISP1(R3)
         ST    R2,SAVED           SAVED=NEWENT
SUBTRACT SR    R2,R7              NEWENT=NEWENT-10
         C     R2,CTAD            IS NEWENT BELOW THE CTLTAB
         BL    NEXTPAIR           YES - AM AT TOP OF CTLTAB NOW
         TM    DISP0(R2),SEBIT1+SEBIT4
         BC    MS7,SUBTRACT       IF NEWNAME AND/OR DON'T COPY, BRANCH
         TM    DISP0(R2),SEBIT5   IS 'FOUND' INDICATOR ON
         BZ    SUBTRACT           IF NOT, SEE IF AT TOP OF CTLTAB YET
         ST    R2,NEWENT
         B     COMPENT            NOW SEE IF IN SEQUENCE YET
NEXTPAIR TM    SWITCH,ENDSORT      IS SORT DONE
         BZ    UPDATE1            IF NOT, SET TO GET NEXT PAIR
         OI    SWITCH,BUFTOTAB
         B     MOVEINIT            SORT IS DONE MOVE & PTRS BACK TO
*                                  TABLE
UPDATE1  MVC   ENTRY1(LEN4),ENTRY2  SORT IS NOT DONE GET NEXT PAIR
         L     R2,ENTRY2
         B     TEST2              GO UPDATE 'ENTRY2' POINTER
RETURN   EQU   *                                                 A33287
         NI    FLG2,FF-FMTSPL     TURN OFF FORMAT SPILL SWITCH   A33287
         IC    R9,TAGSAVE         RESTORE                        A33287
         IC    R8,SENSSAVE         SWITCHES                      A33287
         STC   R9,TAG               TAG AND                      A33287
         STC   R8,SENSE              SENSE                       A33287
         L     R13,DISP4(R0,R13)  RESTORE REG 13                 A33287
         RETURN (14,12)
ALIASP   TM    DISP1(R2),ALIAS
         BZ    NEXTPAIR           IF 'NEWENT' NOT AN ALIAS, DONT SWITCH
         TM    DISP1(R3),ALIAS
         BO    NEXTPAIR           IF 'SAVED' IS AN ALIAS, DONT SWITCH
         B     INTERC             ELSE PUT ALIAS ENTRY AFTER MAIN ENTRY
 DS      0F
ENTRY1   DC    F'0'               1ST PRIMARY COMPARAND
ENTRY2   DC    F'0'               2ND PRIMARY COMPARAND
BUFAD    DC    F'0'               PTR TO START OF BFR USED AS WORK AREA
ENDBUF   DC    F'0'               PTR TO END OF BFR USED AS WORK AREA
SAVED    DC    F'0'               1ST SECONDARY COMPARAND
NEWENT   DC    F'0'               2ND SECONDARY COMPARAND
SWITCH   DC    XL1'0'             INTERNAL SWITCHES -
ENDSORT  EQU   X'80'         ON = LAST ENTRY HAS BEEN PROCESSED
BUFTOTAB EQU   X'40'         ON = MOVING POINTERS FROM BFR BACK TO TAB.
*              LO ORDER 6 BITS NOT USED
         EJECT                                                   A33287
**************************************************************** A33287
*                                                                A33287
*     THE PURPOSE OF THIS SUBROUTINE IS TO RETAIN OR PASS BACK   A33287
*   SAVED ALPHA SORTED INFORMATION WHEN THERE IS NO ROOM LEFT IN A33287
*   THE I/O BUFFER                                               A33287
*                                                                A33287
**************************************************************** A33287
         SPACE 2                                                 A33287
         DS    0H                                                A33287
BUFFEXT  EQU   *                                                 A33287
         SPACE 1                                                 A33287
         MVC   DISP0(LEN4,R10),LEN2(R2) MOVE BYTES 2 THRU 5 OF   A33287
*                                   CTLTAB TO UT3 I/O BUFFER     A33287
         LA    R10,DISP4(R0,R10)  BUMP CURRENT UT3 BUFFER        A33287
*                                    LOCATION                    A33287
         LH    R1,NUMENT          LOAD CURRENT COUNT OF ENTRIES  A33287
*                                    IN THIS BLOCK               A33287
         LA    R1,DISP1(R0,R1)    UP COUNTER BY 1                A33287
         STH   R1,NUMENT          SAVE UPDATED COUNT             A33287
         CH    R1,LIMITENT        ENTIRE BLOCK BUILT             A33287
         BCR   LOW,R8             NO, RETURN                     A33287
         SPACE 1                                                 A33287
WRITE    LA    R1,UT3DCB               GET POINTER TO UT3 DCB   YA01455
         USING IHADCB,R1                                         A33287
         TM    DCBOFLGS,OPEN      IS SYSUT3 OPEN                 A33287
OPEN     EQU   X'10'              DCB OPEN FLAG                  A33287
         BO    UT3OPEN            YES, GO AROUND                 A33287
         DROP  R1                                                A33287
         SPACE 1                                                 A33287
         L     R15,VIEBDV3        ADDR OF ROUTINE TO OPEN UT3    A33287
         BALR  R14,R15            OPEN UT3 - NO RETURN IF        A33287
*                                    NOT OPEN                    A33287
         SPACE 1                                                 A33287
UT3OPEN  EQU   *                                                 A33287
         L     R15,VIEBVWS        LINK TO WRITE                  A33287
         BALR  R14,R15               THIS BLOCK                  A33287
         SPACE 1                                                 A33287
         TM    SPSWITCH,FRSTSPIL  IT THIS THE FIRST TIME TO UT3  A33287
         BO    DONEONCE           NO, GO AROUND                  A33287
         SPACE 1                                                 A33287
         OI    SPSWITCH,FRSTSPIL  SET SWITCH                     A33287
         MVC   SPILLTTR(LEN3),UT3DS1   SAVE TTR OF FIRST RECORD  A33287
         MVC   SECTSAVE(LEN1),UT3SCTOR  SAVE SYSUT3 SECTOR VALUE S20201
*                                      SO IT CAN BE USED WHEN    S20201
*                                      IT IS TIME TO READ THE    S20201
*                                      SPILLED INFORMATION       S20201
* CALCULATE THE NUMBER OF SYSUT3 RECORDS TO BE WRITTEN PER TRACK A33287
*   THIS VALUE WILL BE NEEDED TO READ BACK THE SPILLED ALPHA     A33287
*   SORTED CTLTAB ENTRIES AFTER THE TTR SORT IS DONE             A33287
*                                                                A33287
*   THE FOLLOWING FORMULA IS USED -                              A33287
*                                                                A33287
*   NUMBER OF RECORDS PER TRACK =                                A33287
*                                                                A33287
*   1 + (( TRK CAP - LENGTH LAST REC) / LENGTH NOT LAST REC)     A33287
         SPACE 2                                                 A33287
         LA    R9,UT3CHAR         LOAD POINTER TO UT3 DEVICE     A33287
*                                    INFORMATION                 A33287
         USING DEVCSECT,R9                                       A33287
         SPACE 1                                                 A33287
         LH    R15,TRKCAP         LOAD TRACK CAPACITY            A33287
         LH    R1,UT3LRECL        LOAD UT3 DATA LENGTH           A33287
         SR    R15,R1             SUBTRACT DATA LENGTH FROM      A33287
*                                    TRACK CAPACITY              A33287
         SR    R0,R0              CLEAR REG                      A33287
         SR    R14,R14            CLEAR REG                      A33287
         IC    R0,OVERL           INSERT LAST RECORD OVERHEAD    A33287
         TM    DEVFLAG,HALFOVER   TWO BYTE OVERHEAD FOR THIS     S20201
*                                    DEVICE                      S20201
         BNO   NOTTWO             NO, USE ONE BYTE OVERHEAD      S20201
         SPACE 1                                                 S20201
         LH    R0,OVERI           LOAD TWO BYTE OVERHEAD         S20201
*                                    (OVERHEAD LAST=OVERHEAD     S20201
*                                    NOT LAST RECORD)            S20201
NOTTWO   EQU   *                                                 S20201
         IC    R14,OVERK          INSERT KEYED OVERHEAD          A33287
         SR    R0,R14             SUBTRACT KEYED OVERHEAD FROM   A33287
*                                    LAST RECORD OVERHEAD        A33287
         SR    R15,R0             SUBTRACT TOTAL OVERHEAD OF     A33287
*                                    LAST RECORD FROM (TRK CAP - A33287
*                                    DATA LENGTH)                A33287
         TM    DEVFLAG,TOLFAC     TOLERANCE FACTOR TO BE USED    A33287
*                                    (ONLY APPLIES TO NOT        A33287
*                                    LAST RECORD)                A33287
         BZ    NOTOLER            NO, GO AROUND                  A33287
         SPACE 1                                                 A33287
         MH    R1,TOLER           EFFECTIVE DATA LENGTH =        A33287
         SRL   R1,LEN9               ((DL * TOLER) / 512)        A33287
         SPACE 1                                                 A33287
NOTOLER  EQU   *                                                 A33287
         TM    DEVFLAG,HALFOVER   TWO BYTE OVERHEAD FOR THIS     S20201
*                                    DEVICE                      S20201
         BO    USETWO             YES, GO AROUND - R0 ALREADY    S20201
*                                    CONTAINS (OVERHEAD NOT LAST S20201
*                                    - KEY OVERHEAD)             S20201
         IC    R0,OVERI           INSERT OVERHEAD NOT LAST       A33287
*                                    RECORD                      A33287
         SR    R0,R14             SUBTRACT KEY OVERHEAD FROM     A33287
*                                    OVERHEAD NOT LAST RECORD    A33287
USETWO   EQU   *                                                 S20201
         AR    R1,R0              ADD TOTAL OVERHEAD TO DATA     A33287
*                                    LENGTH (OR EFFECTIVE DATA   A33287
*                                    LENGTH)                     A33287
         SR    R14,R14            CLEAR REG FOR DIVISION         A33287
         DR    R14,R1             ((TRK CAP - DL LAST)/DL NOT    A33287
*                                    LAST))                      A33287
         LA    R15,LEN1(R0,R15)   ADD ONE TO QUOTIENT            A33287
         STH   R15,MAXREC         STORE AS NUMBER OF RECORDS PER A33287
*                                    SYSUT3 TRACK                A33287
         DROP  R9                                                A33287
         SPACE 1                                                 A33287
DONEONCE EQU   *                                                 A33287
         L     R10,WORKADDR       RESTORE POINTER FOR NEXT PASS  A33287
         SR    R15,R15            CLEAR REG                      A33287
         STH   R15,NUMENT         INITIALIZE COUNTER             A33287
         BR    R8                 RETURN                         A33287
         SPACE 2                                                 A33287
PURGE    EQU   *                                                 A33287
         LH    R15,NUMENT         LOAD ENTRY COUNTER             A33287
         LTR   R15,R15            IS IT ZERO                     A33287
         BNZ   WRITE              NO, GO WRITE OUT LAST BLOCK    A33287
         BR    R8                 YES, RETURN                    A33287
         SPACE 3                                                 A33287
RETRIEVE EQU   *                                                 A33287
         LH    R9,NUMENT          LOAD CURRENT ENTRY NUMBER      A33287
         LTR   R9,R9              IS IT ZERO                     A33287
         BNZ   GOTSOME            NO, I/O NOT NEEDED             A33287
         SPACE 1                                                 A33287
         USING IHADCB,R1                                         A33287
         LA    R1,UT3DCB          LOAD POINTER TO UT3 DCB        A33287
         LR    R9,R2              SAVE R2                        A33287
         LA    R2,DCBFDAD         GET POINTER TO FDAD FIELD      A33287
         DROP  R1                                                A33287
         L     R0,SPILLTTR        LOAD TTR TO BE CONVERTED       A33287
         L     R15,VTTOCC         GO CONVERT TTR TO MBBCCHHR     A33287
         BALR  R14,R15            FOR READ                       A33287
         LR    R2,R9              RESTORE R2                     A33287
         L     R15,VIEBDRD        LOAD PTR TO READ ROUTINE       A33287
         BALR  R14,R15            GO READ A RECORD               A33287
         SPACE 1                                                 A33287
         SR    R1,R1              CLEAR REG                      A33287
         IC    R1,SPILLTTR+LEN2   INSERT R OF CURRENT TTR        A33287
         LA    R1,LEN1(R0,R1)     BUMP R BY ONE                  A33287
         CH    R1,MAXREC          IS NEXT RECORD ON SAME TRACK   A33287
         BNH   SAMETRK            YES, GO AROUND                 A33287
         SPACE 1                                                 A33287
         LA    R1,LEN1            SET RECORD NUMBER TO ONE       A33287
         LH    R9,SPILLTTR        LOAD CURRENT TT                A33287
         LA    R9,LEN1(R0,R9)     UP TT BY ONE                   A33287
         STH   R9,SPILLTTR        STORE BACK UPDATED TT          A33287
         SPACE 1                                                 A33287
SAMETRK  EQU   *                                                 A33287
         STC   R1,SPILLTTR+LEN2   STORE R OF NEXT RECORD         A33287
         L     R10,WORKADDR       INITIALIZE CURRENT UT3 BUFFER  A33287
*                                    POINTER                     A33287
         MVC   NUMENT(LEN2),LIMITENT   SET FOR MAX ENTRIES IN    A33287
*                                    UT3 RECORD                  A33287
GOTSOME  EQU   *                                                 A33287
         MVC   DISP6(LEN4,R2),DISP0(R10)  MOVE FOUR BYTE ENTRY   A33287
*                                    FROM BUFFER TO CTLTAB       A33287
         LA    R10,DISP4(R0,R10)  BUMP CURRENT UT3 BUFFER POINTERA33287
         LH    R15,NUMENT         LOAD CURRENT NUMBER OF ENTRIES A33287
*                                    IN BUFFER                   A33287
         BCTR  R15,R0             DECREMENT NUMBER OF ENTRIES    A33287
*                                    BY ONE                      A33287
         STH   R15,NUMENT         UPDATE COUNTER                 A33287
         BR    R8                 RETURN                         A33287
         SPACE 2                                                 A33287
* CONSTANTS AND WORK AREA FOR SPILL                              A33287
NUMENT   DC    H'0'               CURRENT NUMBER OF ENTRIES IN   A33287
*                                    UT3 BUFFER                  A33287
LIMITENT DC    H'20'              MAXIMUM NUMBER OF ENTRIES FOR  A33287
*                                   UT3 BLOCK                    A33287
KDD      DC    X'000050'          KDD VALUE FOR SYSUT3 RECORDS   A33287
SPSWITCH DC    X'00'              SWITCH                         A33287
FRSTSPIL EQU   X'80'              IF ON - ATLEAST ONE SPILL HAS  A33287
*                                    OCCURED TO SYSUT3           A33287
MAXREC   DC    H'0'               MAX NUMBER OF 80 BYTE REC /    A33287
*                                    UT3 TRACK                   A33287
WORKADDR DC    F'0'               POINTER TO FIRST DATA BYTE IN  A33287
*                                    UT3 BUFFER                  A33287
SPILLTTR DC    F'0'               TTR OF FIRST BLOCK WRITTEN     A33287
SENSSAVE DC    X'00'              SWITCH SAVE AREA               A33287
TAGSAVE  DC    X'00'              SWITCH SAVE AREA               A33287
SECTSAVE DC    X'00'              SECTOR VALUE OF FIRST BLOCK    S20201
*                                    WRITTEN (VALID ONLY IF      S20201
*                                    SYSUT3 IS ON AN RPS DEVICE) S20201
KEYDISP  EQU   9             DISPLACEMENT TO KDD PORTION OF A    A33287
*                               COUNT FIELD                      A33287
DATADISP EQU   12                 LENGTH OF FMBBCCHHRKDD         A33287
LOW      EQU   4                  CONDITION CODE FOR BCR INST    A33287
FF       EQU   X'FF'              FLAG OF 1'S                    A33287
         DS    0F
PATCHLEN EQU   (*-IEBVTT)/20      LENGTH OF 5 PER CENT PATCH AREA
PATCH    DC    XL(PATCHLEN)'00'   5 PER CENT PATCH AREA          A41780
         EJECT
         DS    0D
IEBMCA   DSECT
         IEBMCA
DEVCSECT DSECT
*                                                                A33287
*  DIRECT ACCESS DEVICE TABLE DSECT FOR UT3CHAR                  A33287
*                                                                A33287
         SPACE 1                                                 A33287
DEVCODE  DS    F                  DEVICE CODE                    A33287
MAXSIZE  DS    F                  MAX RECORD LENGTH              A33287
MAXCC    DS    H                  MAX CC VALUE                   A33287
MAXHH    DS    H                  MAX HH VALUE                   A33287
TRKCAP   DS    H                  TRACK CAPACITY                 A33287
OVERI    DS    XL1                OVERHEAD NOT LAST RECORD       A33287
OVERL    DS    XL1                OVERHEAD LAST RECORD           A33287
OVERK    DS    XL1                KEY OVERHEAD                   A33287
DEVFLAG  DS    XL1                FLAG FIELD                     A33287
TOLER    DS    H                  TOLERANCE FACTOR               A33287
TOLFAC   EQU   X'01'              ADD TOL FAC SWITCH             A33287
HALFOVER EQU   X'08'              OVERHEAD LAST=OVERHEAD NOT     S20201
*                                    LAST AND IS A 2 BYTE FIELD  S20201
         DCBD  DSORG=PS                                          A33287
         END
