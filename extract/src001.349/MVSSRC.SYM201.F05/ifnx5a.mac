* /* START OF SPECIFICATIONS ****
*02* PROCESSOR = ASSEMBLER
**** END OF SPECIFICATIONS ***/
         GBLC  &COMPNM,&ASMID
         JHEAD 'ASSEMBLER OPCODE PROCESSOR - ASSEMBLY PHASE',          X
               PHASEID=X5A,                                            X
               LEVEL=13
*FUNCTION/OPERATION-                                                  *
*   THIS SUBROUTINE IS CALLED FOR EACH ASSEMBLER OPCODE ENCOUNTERED   *
*   IN THE TEXT STREAM.  THIS ROUTINE IS CALLED BY MAINLINE CONTROL.  *
*   THE ONLY ASSEMBLER OPCODES THAT CAUSE PUNCH OR LINK OUTPUT IS DC'S*
*   CCW'S AND CNOP'S. ALL ASSEMBLER OPCODES CAUSE THE PRINT ROUTINE   *
*   TO BE CALLED. THE ASSEMBLER OPCODES ARE EVALUATED AND THE PROPER  *
*   TABLES ARE UPDATED OR THE PUNCH TEXT IS PREPARED THEN THE OUTPUT  *
*   ROUTINE IS CALLED. FOR DC'S THE OUTPUT ROUTINE WILL BE CALLED FOR *
*   EACH 8 BYTES, OR FRACTION THEREOF, OF PUNCHED OUTPUT.             *
*                                                                     *
*ENTRY POINT-                                                         *
*        AOP100                                                       *
*                                                                     *
*INPUT-                                                               *
*   INTERNAL TEXT RECORDS RETRIEVED IN MAINLINE CONTROL.              *
*   SYMBOL REFERENCE FILE.                                            *
*                                                                     *
*OUTUT-                                                               *
*   LISTING OF ASSEMBLER OPCODES.                                     *
*   PUNCH FILE OUTPUT FOR DC'S, CCW'S AND CNOP'S.                     *
*                                                                     *
*EXTERNAL ROUTINES-                                                   *
*        FORMATING, PRINT AND PUNCH ROUTINE                           *
*        EVAL - EXPRESSION EVALUATION.                                *
*        DCEVAL- DC EVALUATION ROUTINE                                *
*                                                                     *
*EXITS, NORMAL-                                                       *
*   EXITS TO MAINLINE CONTROL.                                        *
*                                                                     *
*EXITS, ERROR-                                                        *
*   NONE                                                              *
*                                                                     *
*TABLES/WORK AREAS-                                                   *
*   ASSEMBLY COMMON                                                   *
*   USING TABLE                                                       *
*                                                                     *
*ATTRIBUTES-                                                          *
*   REFRESHABLE                                                       *
*                                                                     *
*NOTES-                                                               *
*   NONE                                                              *
*                                                                     *
*                                                                     *
         SPACE 2
    TITLE '&COMPNM&ASMID - ASSEMBLER OPCODE PROCESSOR - ASSEMBLY PHASE -
               - COPY CODE '
         PRINT OFF                      DON'T PRINT JCOMMON COPY CODE
         COPY  JCOMMON
         PRINT OFF                      DON'T PRINT JTEXT COPY CODE
         COPY  JTEXT
         PRINT OFF                      DON'T PRINT X5COM COPY CODE
         COPY  X5COM
         PRINT ON                       PRINT RSYMRCD COPY CODE
DSECT10  DSECT ,                        DEFINE RESOLUTION DATA DSECT
         COPY  RSYMRCD                  COPY DSECT ITEMS
         PRINT OFF                      DON'T PRINT JRXLFMTS COPY CODE
         COPY  RXLFMTS                  POST PROCESSOR RECORD FORMATS
         PRINT OFF                      DON'T PRINT JERRMSGCD COPY CODE
         COPY  JERMSGCD                 DEFINE ERROR CODES AND SEVERITY
         PRINT OFF                      DON'T PRINT JERRCD COPY CODE
         COPY  JERRCD                   COPY ERR RECORD FORMAT
         PRINT ON                       THAT'S ALL THE COPY CODE
         SPACE 3
    TITLE '&COMPNM&ASMID - ASSEMBLER OPCODE PROCESSOR - ASSEMBLY PHASE -
               - INITIALIZATION '
         JCSECT (X5A00)                 START CSECT
* VS1 RELEASE 2 CHANGES
*D159320                                                        OX00216
*C133500                                                        OX00219
*C214900-215600                                                 OX00220
* VS1 RELEASE 2.6 CHANGES
*A484500,485000,485600-485780,514420                            OX00222
*C503300,513800                                                 OX00222
*D485100,486280-487900                                          OX00222
* VS1 RELEASE 3 CHANGES
*D492800                                                        OX00086
*A493600,494000                                                 OX00086
*C158900,158920,159000                                          OX01760
* VS1 RELEASE 3.1 CHANGES
*D484500                                                        OY01863
*A485742                                                        OY01863
*C164500,903700,905100                                          OX02675
*A199900-200900                                                 OX05796
*C202300                                                        OX05796
*A208400-208520                                                 OX05796
*C208600                                                        OX05796
*A199500,199600,208000,208100                                   OY06130
*C199900,208400                                                 OY06130
* VS1 RELEASE 040 CHANGES
*A158300                                                       @OY06117
*C653800,654500,664300,665000,670600,702100,702800             @OX08876
*A658500,712400                                                @OX08876
*D684600,685300                                                @OX08876
*D870800,A885300                                               @OX11000
*A211000,213400-213932,214167-214191                           @AZ07356
*A056700                                                       @AY12907
         JMODID ,                       MODULE IDENTIFICATION
         USING JTEXT,R5                 FIXED TEXT PART
         USING JTEXTA,R4                VARIABLE TEXT PART
         USING X5COM,R7                 PHASE COMMON AREA
         USING DSECT10,R11              RESOLVED SYMBOL DATA USING
         SPACE 2
AOP100   JSAVE BASE=YES                 SAVE CALLING REGISTERS
         LA    R3,AOP100+4095           SET UP USING REGISTER
         LA    R3,D1(R3)                INCREMENT 1
         USING AOP100+4096,R3           SET USING FOR OVER 4K SIZE
         JENTRY (X5A01=AOP100)          ENTRY POINT
         GOIF  JTEND,LT=AOP400          JUST LIST GENERATOR OPS
         GOIF  JPRONLY,ON=AOP350        IS RECORD PRINT ONLY
         SR    R11,R11                  CLEAR FOR INSERT CHARACTER
         IC    R11,JTIOP                PICK UP OP-CODE
         LA    R10,JTEND                LESS OP-CODES NOT IN TABLE WILL
         SR    R11,R10                  CALCULATE BRANCH TABLE OP-CODE
         AR    R11,R11                  DOUBLE FOR BRANCH TABLE INDEX
         LH    R11,AOP200(R11)          GET ROUTINE DISPLACEMENT
         XC    DUMSW,DUMSW              CLEAR DS SW            @AY12907
         B     AOP200(R11)              BRANCH TO ASSEMBLER OP ROUTINE
         SPACE 3
    TITLE '&COMPNM&ASMID - ASSEMBLER OPCODE PROCESSOR - ASSEMBLY PHASE -
               - BRANCH TABLE AND EXIT ROUTINES'
*   BRANCH TABLE FOR ASSEMBLER OPCODES
AOP200   EQU   *                        BEGINNING OF BRANCH TABLE
         ORG   AOP200+2*(0-JTEND+JTEND)      BRANCH DISPLACEMENT END
         DC    AL2(END100-AOP200)            TABLE ENTRY FOR END
         ORG   AOP200+2*(0-JTEND+JTDXD)      BRANCH DISPLACEMENT DXD
         DC    AL2(DXD100-AOP200)            TABLE ENTRY FOR DXD
         ORG   AOP200+2*(0-JTEND+JTEQU)      BRANCH DISPLACEMENT EQU
         DC    AL2(EQU100-AOP200)            TABLE ENTRY FOR EQU
         ORG   AOP200+2*(0-JTEND+JTORG)      BRANCH DISPLACEMENT ORG
         DC    AL2(ORG100-AOP200)            TABLE ENTRY FOR ORG
         ORG   AOP200+2*(0-JTEND+JTCNOP)     BRANCH DISPLACEMENT CNOP
         DC    AL2(CNOP00-AOP200)            TABLE ENTRY FOR CNOP
         ORG   AOP200+2*(0-JTEND+JTCCW)      BRANCH DISPLACEMENT CCW
         DC    AL2(CCW100-AOP200)            TABLE ENTRY FOR CCW
         ORG   AOP200+2*(0-JTEND+JTDC)       BRANCH DISPLACEMENT DC
         DC    AL2(DC0100-AOP200)            TABLE ENTRY FOR DC
         ORG   AOP200+2*(0-JTEND+JTDS)       BRANCH DISPLACEMENT DS
         DC    AL2(DS0100-AOP200)            TABLE ENTRY FOR DS
         ORG   AOP200+2*(0-JTEND+JTSTART)    BRANCH DISPLACEMENT START
         DC    AL2(START0-AOP200)            TABLE ENTRY FOR START
         ORG   AOP200+2*(0-JTEND+JTCSECT)    BRANCH DISPLACEMENT CSECT
         DC    AL2(CSECT0-AOP200)            TABLE ENTRY FOR CSECT
         ORG   AOP200+2*(0-JTEND+JTDSECT)    BRANCH DISPLACEMENT DSECT
         DC    AL2(DSECT0-AOP200)            TABLE ENTRY FOR DSECT
         ORG   AOP200+2*(0-JTEND+JTCOM)      BRANCH DISPLACEMENT COM
         DC    AL2(COM100-AOP200)            TABLE ENTRY FOR COM
         ORG   AOP200+2*(0-JTEND+JTENTRY)    BRANCH DISPLACEMENT ENTRY
         DC    AL2(ENTRY0-AOP200)            TABLE ENTRY FOR ENTRY
         ORG   AOP200+2*(0-JTEND+JTEXTRN)    BRANCH DISPLACEMENT EXTRN
         DC    AL2(EXTRN0-AOP200)            TABLE ENTRY FOR EXTRN
         ORG   AOP200+2*(0-JTEND+JTWXTRN)  BRANCH DISPLACEMENT WXTRN
         DC    AL2(EXTRN0-AOP200)         TABLE ENTRY FOR WXTRN
         ORG   AOP200+2*(0-JTEND+JTCXD)      BRANCH DISPLACEMENT CXD
         DC    AL2(CXD100-AOP200)            TABLE ENTRY FOR CXD
         ORG   AOP200+2*(0-JTEND+JTLTORG)    BRANCH DISPLACEMENT LTORG
         DC    AL2(LTORG0-AOP200)            TABLE ENTRY FOR LTORG
         ORG   AOP200+2*(0-JTEND+JTLITR)     BRANCH DISPLACEMENT LITR
         DC    AL2(LITR00-AOP200)            TABLE ENTRY FOR LITERAL
         ORG   AOP200+2*(0-JTEND+JTSYMBL)    BRANCH DISPLACEMENT SYMBOL
         DC    AL2(AOP300-AOP200)            TABLE ENTRY FOR SYMBOL
         ORG   AOP200+2*(0-JTEND+JTPUNCH)    BRANCH DISPLACEMENT PUNCH
         DC    AL2(PUNCH0-AOP200)            TABLE ENTRY FOR PUNCH
         ORG   AOP200+2*(0-JTEND+JTREPRO)    BRANCH DISPLACEMENT REPRO
         DC    AL2(REPRO0-AOP200)            TABLE ENTRY FOR REPRO
         ORG   AOP200+2*(0-JTEND+JTPUSH)  ORG FOR PUSH BRANCH ADDRESS
         DC    AL2(PUSH00-AOP200)       DISPLACEMENT TO PUSH
         ORG   AOP200+2*(0-JTEND+JTPOP) ORG FOR POP BRANCH ADDRESS
         DC    AL2(POP100-AOP200)       DISPLACEMENT TO POP
         ORG   AOP200+2*(0-JTEND+JTPRINT)    BRANCH DISPLACEMENT PRINT
         DC    AL2(PRINT0-AOP200)            TABLE ENTRY FOR PRINT
         ORG   AOP200+2*(0-JTEND+JTUSING)    BRANCH DISPLACEMENT USING
         DC    AL2(USING0-AOP200)            TABLE ENTRY FOR USING
         ORG   AOP200+2*(0-JTEND+JTDROP)     BRANCH DISPLACEMENT DROP
         DC    AL2(DROP00-AOP200)            TABLE ENTRY FOR DROP
         ORG   AOP200+2*(0-JTEND+JTCMNT)     BRANCH DISPLACEMENT COMNT
         DC    AL2(AOP400-AOP200)            TABLE ENTRY FOR COMMENT
         ORG   AOP200+2*(0-JTEND+JTHCMNT)   BRANCH DISPLACEMENT HCMNT
         DC    AL2(AOP400-AOP200)       TABLE ENTRY FOR HIDDEN COMMENT
         ORG   AOP200+2*(0-JTEND+JTERROR)    BRANCH DISPLACEMENT ERROR
         DC    AL2(ERROR0-AOP200)            TABLE ENTRY FOR ERROR
         ORG   AOP200+2*(0-JTEND+JTSPACE)    BRANCH DISPLACEMENT SPACE
         DC    AL2(SPACE0-AOP200)            TABLE ENTRY FOR SPACE
         ORG   AOP200+2*(0-JTEND+JTEJECT)    BRANCH DISPLACEMENT EJECT
         DC    AL2(EJECT0-AOP200)            TABLE ENTRY FOR EJECT
         ORG   AOP200+2*(0-JTEND+JTTITLE)    BRANCH DISPLACEMENT TITLE
         DC    AL2(TITLE0-AOP200)            TABLE ENTRY FOR TITLE
         ORG   AOP200+2*(0-JTEND+JTMNOTE)    BRANCH DISPLACEMENT MNOTE
         DC    AL2(MNOTE0-AOP200)            TABLE ENTRY FOR MNOTE
         ORG   AOP200+2*(0-JTEND+JTSICTL)    RESTORE STANDARD
         DC    AL2(SICTL-AOP200)        ICTL
         ORG   ,                        REORG TO THE END OF TABLE
         SPACE
AOP300   GOIF  JERR,OFF=AOP310          IS THERE AN ERROR IN RECORD
         LA    R10,ERROUT               YES, LOAD PRINT INDEX
         JCALL OUTPUT                   GO PRINT ERROR FLAG IN TEXT
AOP310   JRETURN ,                      EXIT
AOP350   GOIF  JTEND,NE=AOP375          IS THIS AN END STATEMENT
         MVC   ENDSTMNO,STMTN           YES, SAVE THE STATEMENT NUMBER
AOP375   GOIF  JTREPRO,NE=AOP400        IS THIS A REPRO CARD
         GOIF  JPSOP,OFF=AOP400         IS STMT A PSEUDO OP    @AY13962
         GOIF  REPCARD,ON=REPRO0        IS IT EXPECTED GO PRINT
         SET   REPCARD,ON               NEXT STATEMENT TO BE IN 1 LINE
AOP400   MVI   LHFLGS,DNTPLH            SET PRINT FLAGS
AOP405   LA    R10,LSTOUT               LOAD PRINT INDEX
AOP410   JCALL OUTPUT                   GO PRINT
         B     AOP300                   EXIT PHASE
         JEXTRN (X5P01=OUTPUT)          PRINT PUNCH ENTRY POINT
AOP440   LA    R10,LSTOUT               GET BRANCH DISPLACEMENT PRINT
         OI    LHFLGS,DNTPLH            TURN ON DON'T PRINT LEFT HALF
AOP450   JCALL OUTPUT                   CALL OUT PUT ROUTINE
         BR    R6                       RETURN TO CALLING ROUTINE
         EJECT
AOP500   L     R14,OPNADR               POINT TO OPERAND BEGINNING
         L     R15,OPNEND               POINT TO OPERAND END
         LA    R11,X5ATEMP              POINT BUILD AREA WORK REGISTER
         LR    R4,R11                   REMEMBER WHERE WE STARTED AT
         GOIF  D0(R14),JQUOTE,NE=AOP590 NO LEADING QUOTE
AOP540   LA    R14,D1(,R14)             STEP WORK REGISTER
         CR    R14,R15                  IS OPERAND COMPLETE
         BNL   AOP595                   YES, GO LOG ERROR
         GOIF  D0(R14),JQUOTE,EQ=AOP560   CHECK FOR QUOTE
         GOIF  D0(R14),JAMPER,EQ=AOP560   CHECK FOR AMPERSAND
AOP550   MVC   D0(D1,R11),D0(R14)       MOVE CHARACTER TO OUTPUT
         LA    R11,D1(,R11)             STEP OUTPUT POINTER
         B     AOP540                   GO STEP TO NEXT CHARACTER
AOP560   CLC   D0(D1,R14),D1(R14)       IS AMPERSAND OR QUOTE A DUPLICT
         LA    R14,D1(,R14)             INCREMENT POINTER
         BE    AOP550                   GO OUTPUT CHARACTER
         BCTR  R14,0                    DECREMENT POINTER
         GOIF  D0(R14),JAMPER,EQ=AOP580 UNPAIRES AMPERSAND
         CLI   D1(R14),JBLANK           DO BLANK FOLLOW TERM QUOTE
         BNE   AOP585                   IF NOT ERROR
         SR    R11,R4                   GET LENGTH OF FIELD
         BR    R6                       RETURN TO CALLING ROUTINE
         JEXTRN (X5L01=LOGERR)
AOP580   SET   TPTEXT,ON                INDICATE BAD OPERAND
         ST    R14,ERRPTR               IT IS ALSO ERROR POINTER
         X5ERRL 176,CLMPTR              UNPAIRED AMPERSAND
         BR    R6                       RETURN TO CALLER
AOP585   LA    R14,D1(R14)              POINT TO CHR AFTER QUOT OX00219
         ST    R14,ERRPTR               SAVE POINTER FOR LOGGING
         SET   TPTEXT,ON                INDICATE BAD OPERAND
         X5ERRL 185,CLMPTR              BLANK DO NOT FOLLOW TERM QUOTE
         BR    R6                       RETURN TO CALLER
AOP590   X5ERRL 175,0                   NO LEADING QUOTE
         SET   TPTEXT,ON                INDICATE BAD OPERAND
         BR    R6                       RETURN TO CALLER
AOP595   X5ERRL 240,0                   ENDING QUOTE MISSING, LOG IT
         SET   TPTEXT,ON                INDICATE BAD OPERAND
         BR    R6                       RETURN TO CALLER
         SPACE 2
*                                                                     *
*   COMMON CALL OF EVAL.                                              *
*                                                                     *
AOP600   JCALL EVAL                     GO EVALUATE EXPRESSION
         BR    R6                       RETURN TO CALLING LOCATION
         JEXTRN (X5V01=EVAL)            DEFINITION OF EVAL
         SPACE 4
*
*   REPLACE THE USER ICTL WITH STANDARD ICTL IN CASE WE HAVE THE SYSMAC
*   OPTION AND ARE GOING TO PRINT OUT MACRO DEFINITIONS
*
SICTL    MVC   JBGNCL(L'JBGNCL*3),=Y(1,16,71)    RESTORE STD ICTL
         B     AOP310                   RETURN TO GET NEXT RECORD
    TITLE '&COMPNM&ASMID - ASSEMBLER OPCODE PROCESSOR - ASSEMBLY PHASE -
               - ''END'' STATEMENT PROCESSOR'
*                                                                     *
*   END STATEMENT PROCESSING
*
END100   L     R10,OPNADR               GET OPERAND POINTER
         MVC   ENDSTMNO,STMTN           SAVE END STATEMENT NUMBER
         GOIF  OPNPRS,OFF=END450        OPERAND PRESENT ?
         GOIF  D0(R10),JCOMMA,EQ=END400 1ST OPERAND OMITTED ?
         SPACE
END150   BAL   R6,AOP600                GO EVALUATE OPERAND
         BNH   END350                   ERROR IF NOT RELOCATABLE
         CH    R10,=H'4096'             IS ESDID VALID?
         BNL   END350                   NO,GO LOG ERROR
         ST    R11,LCTRSAV              PUT VALUE IN WORK AREA
         TM    LCTRSAV+D3,D1            IS IT EVEN
         BNZ   END600                   ERROR IF NOT
         ST    R11,LOCATN               STORE VALUE FOR PRINTING
         ST    R11,JENTRYPT             SAVE ENTRY POINT FOR END CARD
         STH   R10,JESDID               SAVE ENTRY POINT ESD
         NI    JESDID,X'F7'             CLEAR FLAGBIT 5        @YA06117
         SET   JESDCHK,ON               INDICATE ESD INF FOR END CARD
END200   GOIF  D0(R14),JBLANK,EQ=END250 WAS DELIMIT A BLANK-OK  OX01760
         GOIF  D1(R14),JLPARN,EQ=END210 IS DELIMITER A PAREN    OX01760
         GOIF  D1(R14),JBLANK,EQ=END250 2ND OPERAND OMITTED ?   OX01760
         B     END230                   ERROR IN 2ND IDR ITEM IF NONE
END210   MVI   JIDR,X'02'               INDICATE A 2ND IDR ITEM
         SR    R6,R6
         AH    R14,=H'1'
END225   AH    R14,=H'1'               COUNT COLUMN POINTER
         GOIF  D0(R14),JCOMMA,EQ=END235 SUBITEMS DEL BY COMMA
         AH    R6,=H'1'                COUNT CHAR. IN PID ORDER NUMBER
         IC    R9,D0(R14)               MOVE CHAR TO IDR SAVE LOC
         STC   R9,JIDR+D19(R6)
         CH    R6,=H'10'                MAX 10 CHARACTERS ALLOWED
         BNH   END225                   GET NEXT CHAR IF MORE ALLOWED
END230   X5ERRL 254,CLMPTR              LOG ERR IN 2ND IDR ITEM
         CLI   JIDR,X'02'               IS FLAG BYTE SET TO 2
         BNE   END250                   BRANCH IF NOT
         MVI   JIDR,X'01'               RESET IT TO ONE
         MVI   JIDR+D20,X'2F'           RESET 2ND IDR PART OF JIDR
         MVC   JIDR+D21(D19),JIDR+D20     TO BLANKS
         B     END250
END235   CH    R6,=H'10'                WAS THERE 10 CHARACTERS
         BNL   END240                   YES
         LA    R6,D1(R6)                STEP UP INDEX
         IC    R9,=X'2F'                NO   - PAD WITH BLANKS
         STC   R9,JIDR+D19(R6)
         B     END235                   CHECK AGAIN
END240   MVC   JIDR+D30(D4),D1(R14)     MOVE 2ND SUBITEM TO SAVE LOC
         MVC   JIDR+D31+D3(D5),D6(R14)  MOVE 3RD SUBITEM TO SAVE LOC
         GOIF  D11(R14),JRPARN,NE=END230  IS DELIM A PAREN
END250   SR    R10,R10                  SET PRINT ROUTINE INDEX
         BAL   R6,AOP450                GO PRINT END
         GOIF  JERR,OFF=END300          IF NO ERROR,CHECK LITERALS
         LA    R10,ERROUT               YES, SET *** ERROR *** INDEX
         JCALL OUTPUT                   GO PRINT IT
END300   LH    R1,LITPID                GET LITERAL POOL ID
         GOIF  JSYSGEN,OFF=AOP310       EXIT IF X4 NOT LOADED
         LA    R1,D1(R1)                INCREMENT BY 1
         STH   R1,LITPID                SAVE IT
         L     R1,SYMXRF                GET SYMBOL XREFED       OX02675
         SR    R2,R2                    CLEAR R2
         IC    R2,SYMCNT                GET SYMBOL COUNT
         SR    R2,R1                    GET REMAINING SYMBOLS
         BNH   END345                   BRANCH IF NOT HIGH
END325   LH    R10,JINFILE              GET JINFILE INDEX
         JGETL FILE=(R10)               GET SYMBOL
         BCT   R2,END325                FINISH FLUSHING?
         SPACE
END345   MVI   SYMCNT,D0                ZEROED OUT SYMBOL COUNT
         B     LTO200                   GO CHECK LITERALS
END350   OI    LHFLGS,DNTPLH            TURN ON DON'T PRINT LEFT HALF
         X5ERRL 217,CLMPTR              RELOCATEBILITY ERROR
         B     END200                   GO CHECK 2ND OPERAND
END400   OI    LHFLGS,DNTPLH            TURN ON DON'T PRINT LEFT HALF
         LR    R14,R10
         B     END200                   GO PRINT END
END450   OI    LHFLGS,DNTPLH            SET DONT PRINT LEFT HALF
         B     END250                   GO PRINT END STATEMENT
END500   ST    R14,ERRPTR               SAVE COLUMN PTR FOR LOGGING
         X5ERRL 185,CLMPTR,END400       INVALID DELIMITER ERROR
         SPACE
END600   X5ERRL 220,CLMPTR,END400       LOG ALIGNMENT ERROR
         SPACE 3
    TITLE '&COMPNM&ASMID - ASSEMBLER OPCODE PROCESSOR - ASSEMBLY PHASE -
               - ''DXD'' STATEMENT PROCESSOR'
DXD100   SET   DXDSW,ON                 INDICATE DXD FOR DCEVAL
         BAL   R6,COMCALL               GO GET GOOD OPERAND NUMBER
         MVC   ELCTR+D4(4),ELCTR        SAVE CURR. LOCTR
         MVC   ELCTR+D8(2),EESDI        SAVE CURR. ESDID
         XC    ELCTR,ELCTR              CLEAR LOCTR
         XC    EESDI,EESDI              CLEAR ESDID
         L     R10,OPNADR               POINT TO OPERAND
         JCALL DCEVAL                   GO EVALUATE
         SET   DCMOP,ON                 TURN ON MOP-UP SWITCH
         LA    R10,DC0OUT               SET PRINT INDEX
         JCALL OUTPUT                   CALL OUTPUT
         SET   DXDSW,OFF                TURN OF SWITCH
         MVC   ELCTR,ELCTR+D4           RESTORE CURR. LOCTR
         MVC   EESDI,ELCTR+D8           RESTORE CURR. ESDID
         B     AOP300                   EXIT
         SPACE
    TITLE '&COMPNM&ASMID - ASSEMBLER OPCODE PROCESSOR - ASSEMBLY PHASE -
               - COMMON ROUTINE FOR DC, DS AND DXD PROCESSORS'
COMCALL  L     R11,SYMDEF               GET SYMBOL FILE RECORD PTR
         GOIF  NAMPRS,ON=COMCALL2       SKIP IF NAME PRESENT
         GOIF  DXDSW,OFF=COMCALL1       NOT DXD - GET RECORD
         SR    R10,R10                  CLEAR REG
         GOIF  JNMERR,ON=COMCALL3       DO NOT LOG NAME ERR AGAIN
         X5ERRL 163,0,COMCALL3          INVALID DXD NAME- NO NAME
COMCALL1 LH    R10,JINFILE              GET INPUT FILE NO
         JGETL FILE=(R10)               GET SYMBOL FILE RECORD
         SPACE
COMCALL2 SR    R10,R10                  CLEAR REG
         IC    R10,RFLGA                GET GOOD OPERAND COUNT
COMCALL3 STH   R10,LCTRSAV+D8           SAVE FOR DCEVAL USE
         SET   (DCSWH,DCCOMP,DCMOP,DCSTRT),OFF RESET DCFLGS FOR SAFE
         BR    R6                       RETURN TO CALLER
         SPACE 3
    TITLE '&COMPNM&ASMID - ASSEMBLER OPCODE PROCESSOR - ASSEMBLY PHASE -
               - ''EQU'' STATEMENT PROCESSOR'
EQU100   LH    R12,JTNMP                COMPUTE ADDR TO         OY06130
         AR    R12,R5                   NAME FIELD              OY06130
         CLI   D0(R12),X'00'            TST FOR NO NAME         OY06130
         BNE   EQU150                                           OX05796
         X5ERRL 163,0,AOP400                                    OX05796
EQU150   L    R11,SYMDEF                GET NAME RECORD PTR     OX05796
         MVC   ADDRS2,RLCTR             MOVE SYMBOL VALUE
         SET   PRDEFREQ,ON              TURN PRIORDEF REQ BIT ON
         L     R10,OPNADR               GET OPERAND POINTER
         IC    R6,RFLGB                 SAVE FLAGS
         GOIF  NAMPRS,ON=EQU250         ANY NAME
         X5ERRL 163,0                   LOG MISSING NAME ERROR
         SPACE
EQU250   LH    R12,JTOPP                COMPUTE ADDR TO         OY06130
         AR    R12,R5                   OPERAND FIELD           OY06130
         CLI   D0(R12),X'00'            TST FOR NO OPERAND      OY06130
         BNE   EQU275                                           OX05796
         X5ERRL 177,0,AOP400                                    OX05796
EQU275   JCALL EVAL                     GO EVALUATE             OX05796
         BC    CMPX,EQUER1              IS EQU COMPLEXLY RELOCATABLE
         BC    ERRX,EQU300              BRANCH IF SYNTAX ERROR
         GOIF  D0(R14),JBLANK,EQ=EQU225 OK IF BLANK
         GOIF  D0(R14),JCOMMA,NE=EQUER3 ERROR IF NOT COMMA
         SET   EQUOPR,ON                MORE THAN 1 OPR IN EQU @AZ07356
EQU225   ST    R11,ADDRS2               SAVE VALUE IN LEFTHLF
EQU200   EX    R6,EQUCPR                CHECK FOR CIRCULAR DEFINTION
         BE    EQU300                   NO
         X5ERRL 237,0                   CIRCULAR DEFINITION
EQU300   SET   PRDEFREQ,OFF             RESET PRIOR DEFINITION SWITCH
         SET   EOUBIT,ON                INDICATE EQU
         GOIF  EQUOPR,OFF=AOP405        BR IF NO 2ND OPER      @AZ07356
         GOIF  D1(R14),JCOMMA,EQ=EQU800 BR IF 2ND OPER OMITTED @AZ07356
         LA    R10,D1(R14)              BUMP POINTER           @AZ07356
         JCALL EVAL                     GO EVAL 2ND OPER       @AZ07356
         BC    (X'F'-CMPX),EQU400       BR IF NOT COMPLEX RELO @AZ07356
         X5ERRL 213,CLMPTR              ERR: COMPLEXLY RELOC   @AZ07356
EQU400   GOIF  D0(R14),JBLANK,EQ=EQU650 BR IF 3RD OPER         @AZ07356
         GOIF  D0(R14),JCOMMA,NE=EQU650 BR IF 3RD OPER INVALID @AZ07356
         LA    R10,D1(R14)              BUMP POINTER           @AZ07356
EQU500   JCALL EVAL                     GO EVAL 3RD OPER       @AZ07356
         BC    (X'F'-CMPX),EQU600       BR IF NOT COMPLEX RELO @AZ07356
         X5ERRL 213,CLMPTR              ERR: COMPLEX RELOC     @AZ07356
EQU600   GOIF  D0(R14),JBLANK,NE=EQU650 BR IF INVALID DELIM    @AZ07356
EQU650   SET   EQUOPR,OFF               RESET FOR NEXT STMT    @AZ07356
         B     AOP405                   NO EXIT
EQU800   LA    R10,D2(R14)              BUMP POINTER           @AZ07356
         GOIF  D2(R14),JBLANK,EQ=EQU650 BR IF 3RD OPER OMITTED @AZ07356
         B     EQU500                   GO EVAL 3RD OPER       @AZ07356
EQUER1   CLI   EVALSW1,D0               ANY SYNTACTIC ERROR?
         BNE   EQU300                   YES, EXIT               OX00220
         X5ERRL 213,CLMPTR,EQU300       COMPLEXLY RELOCATABLE   OX00220
EQUER3   X5ERRL 216,CLMPTR,EQU200       ILLEGAL OPERAND FORMAT
EQUCPR   CLI   EVALSW1,*-*              EXECUTED CIRCULAR DEF CHEK
    TITLE '&COMPNM&ASMID - ASSEMBLER OPCODE PROCESSOR - ASSEMBLY PHASE -
               - ''ORG'' STATEMENT PROCESSOR'
ORG100   L     R11,SYMDEF               GET SYMBOL DEFINITION POINTER
         GOIF  NAMPRS,OFF=ORG200        IS STATEMENT NAMED
         MVC   LOCATN,RLCTR             MOVE IN DEFINITION LOCATION
         B     ORG300                   GO GET ORG VALUE
ORG200   MVC   LOCATN,ELCTR              DATA, GET LOCATION COUNTER
ORG300   LH    R10,JINFILE              POINT TO INPUT FILE
         JGETL FILE=(R10)               GET ORG VALUE
         MVC   ADDRS2(D4),RLCTR         MOVE ORGED VALUE TO PRINT
         GOIF  OPNPRS,OFF=ORG700        BRANCH IF OPERAND NOT PRESENT
         L     R10,OPNADR               GET OPERAND POINTER
         CLC   D0(2,R10),=AL1(JCOMMA,JBLANK) IS OPERAND MISSING?
         BE    ORG700                   BRANCH IF MISSING
         SET   PRDEFREQ,ON              TURN ON PRIORDEF REQ BIT
         MVC   DWORD2(1),RFLGB          SAVE FLAG BYTE
         JCALL EVAL                     EVALUATE OPERAND FOR ERRORS
         BC    8,ORGERR1                ORG VALUE ABSOLUTE
         BC    4,ORG600                 IF ERROR BRANCH
         BC    1,ORG400                 SYNTACTIC ERRORS
         CLI   D0(R14),JBLANK           IS DELIMITER BLANK?
         BNE   ORGERR2                  BRANCH IF NOT BLANK
         CH    R10,EESDI                SAME ESDID?
         BNE   ORGERR3                  ESDID NOT ALIKE
         GOIF  WRPFLG,ON=ORG500         DO NOT LOC OVERFLOW AGAIN
         C     R11,=A(X'FFFFFF')        DID LCTR WRAPPED?
         BH    ORGERR5                  YES, GO LOG ERROR
ORG500   TM    DWORD2,BIT0              ANY ERROR IN ORG OPERAND ?
         BNO   ORGERR4                  YES,GO LOG ERROR
ORG700   MVC   ELCTR,ADDRS2             PUT IN NEW LOCTR VALUE
ORG400   IC    R4,EESDI                 SAVE DSECT INDICATOR
         MVI   EESDI,BIT1+BIT2          INDICATE DSECT OR COM
         SR    R10,R10                  SET PRINT INDEX
         SET   EOUBIT,ON                INDICATE ORG
         BAL   R6,AOP450                GO PRINT RECORD
         STC   R4,EESDI                 RESTORE ESD
         SET   PRDEFREQ,OFF             RESET PRDEFREQ BIT
         B     AOP300                   EXIT
ORGERR1  X5ERRL 174,0,ORG400            ORG VALUE ABSOLUTE
ORGERR2  X5ERRL 185,CLMPTR,ORG700       INCORRECT DELIMITER
ORGERR3  X5ERRL 173,0,ORG400            ESDID NOT ALIKE
ORGERR4  X5ERRL 172,0,ORG400            ORG VALUE NEGATIVE
ORG600   CLI   EVALSW1,D0               ANY NON-SYSTACTIC ERROR?
         BNE   ORG400                   YES,BRANCH TO EXIT
         X5ERRL 213,CLMPTR,ORG400       LOG ERROR THEN EXIT
ORGERR5  SET   WRPFLG,ON                INDICATE WE LOGGED THE ERROR
         X5ERRL 246,0,ORG700            INVALID ORG OPERAND
         SPACE 3
    TITLE '&COMPNM&ASMID - ASSEMBLER OPCODE PROCESSOR - ASSEMBLY PHASE -
               - ''CNOP'' STATEMENT PROCESSOR'
CNOP00   LA    R2,D1                    GET MAXIMUM ALIGNMENT
         EX    R2,ALNTST                IS ALIGNMENT NECESSARY
         BZ    CNP100                   NO, SKIP
         JCALL ALIGN                    GO ALIGN CNOP
         OI    LHFLGS,ENTALN+D1         SET OUTPUT LENGTH AND FLAGS
         SR    R10,R10                  SET OUTPUT INDEX
         JCALL OUTPUT                   GO PRINT ALIGNMENT
CNP100   GOIF  OPNPRS,OFF=CNPER7        ERROR IF NO OPERAND
         L     R10,OPNADR               POINT TO OPERAND
         MVC   LOCATN,ELCTR             MOVE LOCATION TO LEFT HALF
         SET   PRDEFREQ,ON              TURN ON PRIORDEF REQ BIT
         JCALL EVAL                     CALL EVALUATION ROUTINE
         BNZ   CNPER1                   MUST BE ABSOLUTE
         SET   PRDEFREQ,OFF             TURN OFF PRIOEDEF REQ BIT
         GOIF  (R11),NEG=CNPER5         ERROR IF NEGATIVE
         CH    R11,=H'8'                IS VALUE VALID?
         BNL   CNPER5                   VALUE ERROR IN OPERAND 1
         EX    R11,BITTST               IS OPERAND VALUE ODD
         BNZ   CNPER5                   YES, GO LOG ERROR
CNP150   LR    R4,R11                   SAVE FIRST OPERAND VALUE
         GOIF  D0(R14),JCOMMA,NE=CNPER2 CHECK SYNTAX - MUST BE A COMMA
         LA    R10,D1(,R14)             INITIALIZE EVAL POINTER
         SET   PRDEFREQ,ON              TURN PRIORDEF REQ BIT
         JCALL EVAL                     GO EVALUATE SECOND OPERAND
         BNZ   CNPER8                   MUST BE ABSOLUTE
         SET   PRDEFREQ,OFF             TURN OFF PRIORDEF REQ BIT
         CH    R11,=H'8'                IS SECOND OPERAND AN 8
         BE    CNP200                   YES, GO CHECK FIRST OPERAND
         CH    R11,=H'4'                IS IT 4
         BNE   CNPER4                   NO, GO LOG ERROR
CNP200   CR    R4,R11                   IS OPERAND 1 NOT LESS THAN 2ND
         BNL   CNPER6                   YES, GO LOG ERROR
         GOIF  INVCNOP,OFF=CNP250       DO ALIGN IF CNOP OPERAND OK
         SET   INVCNOP,OFF              RESET BAD OPERAN INDICATOR
         B     AOP400
CNP250   LNR   R2,R11                   COMPLEMENT  2ND OPERAND VALUE
         L     R1,ELCTR                 GET LOCATION COUNTER
         NR    R1,R2                    ALIGN IT TO PREVIOUS BOUNDARY
         AR    R1,R4                    ADD FIRST OPERAND BOUNDRY
         C     R1,ELCTR                 HAS ALIGNMENT REQUESTED CORRECT
         BNL   CNP300                   YES, ALIGNMENT COMPLETE
         AR    R1,R11                   NO, ADD SECOND OPERAND VALUE
CNP300   S     R1,ELCTR                 CALCULATE CNOP LENGTH
         EX    R1,ORLEN                 INDICATE OUTPUT LENGTH
         ST    R1,LOCLEN                SAVE CNOP LENGTH
         JCALL LOCUPD                   GO UPDATE LOCATION COUNTER
         MVC   DCDATA(D6),=X'070007000700'  MOVE IN PAD BYTES
         SET   ENTDC,ON                 SET PRINT FLAG
         LA    R10,DC0OUT               GET PRINT INDEX
         JCALL OUTPUT                   CALL PRINT
         SET   DCMOP,ON                 SET MOP-UP SWITCH ON
         LA    R10,DC0OUT               GET DCPRINT INDEX
         JCALL OUTPUT                   CALL PRINT
         B     AOP300                   GO CHECK ERROR FLAG
         SPACE
CNPER1   SET   PRDEFREQ,OFF             TURN PRIORDEF REQ BIT OFF
         SET   INVCNOP,ON               INDICATE ERROR IN CNOP OPERAND
         X5ERRL 179,CLMPTR,CNP150       OPERAND NOT ABSOLUTE
         SPACE
CNPER2   ST    R14,ERRPTR               SET COLUMN POINTER
         SET   INVCNOP,OFF              RESET CNOP OPERAND ERROR IND
         X5ERRL 178,CLMPTR,AOP400       COMMA EXPECTED
         SPACE
CNPER4   SET   INVCNOP,ON               INDICATE ERROR IN CNOP OPERAND
         X5ERRL 180,CLMPTR,CNP200       VALUE ERROR- SHOULD BE 4 OR 8
         SPACE
CNPER5   SET   INVCNOP,ON               INDICATE ERROR IN CNOP OPERAND
         X5ERRL 181,CLMPTR,CNP150       VALUE ERROR OPERAND IS ODD
         SPACE
CNPER6   SET   INVCNOP,OFF              RESET CNOP OPERAND ERROR IND
         X5ERRL 182,0,AOP400            OPERAND 2 LARGER THAN 1
CNPER7   SET   INVCNOP,OFF              RESET CNOP OPERAND ERROR IND
         X5ERRL 177,0,AOP400            OPERAND REQUIRED
CNPER8   SET   PRDEFREQ,OFF             TURN PRIORDEF REQ BIT OFF
         X5ERRL 179,CLMPTR,AOP400       OPERAND NOT ABSOLUTE
BITTST   TM    =X'01',D0                EXECUTEC LOW BIT TEST
         SPACE 3
    TITLE '&COMPNM&ASMID - ASSEMBLER OPCODE PROCESSOR - ASSEMBLY PHASE -
               - ''CCW'' STATEMENT PROCESSOR'
CCW100   LA    R2,D7                    GET ALIGNMENT CHECK BITS
         EX    R2,ALNTST                CHECK ALIGNMENT
         BZ    CCW150                   NO ALIGNMENT REQUIRED
         JCALL ALIGN                    CALL ALIGNMENT ROUTINE
         L     R2,FULLWD                GET ALIGNMENT LENGTH
         EX    R2,ORLEN                 OR LENGTH INTO OUTPUT DATA
         SET   ENTALN,ON                TURN ON ALIGNMENT INDICATOR
         SR    R10,R10                  SET PRINT INDEX
         JCALL OUTPUT                   GO PRINT LENGTH
CCW150   MVC   LOCATN,ELCTR             MOVE IN ALIGNED LOCATION CTR
         XC    DCDATA(D8),DCDATA        CLEAR OBJECT CODE
         OI    LHFLGS,D8+ENTDC          INDICATE LENGTH
         GOIF  OPNPRS,OFF=CCWER1        ERROR IF NO OPERAND
         L     R10,OPNADR               GET OPERAND POINTER
         JCALL EVAL                     EVALUATE OPERAND
         BNZ   CCWER2                   GO LOG ERROR IF OPERAND BAD
         CH    R11,=H'255'              IS VALUE TOO LARGE
         BH    CCWER3                   GO LOG ERROR IF IT IS
         LTR   R11,R11                  TEST FOR NEGATIVE VALUE
         BM    CCWER15                  ERROR IF NEGATIVE
CCW200   STC   R11,DCDATA               SAVE VALUE FOR OUTPUT
CCW225   GOIF  D0(R14),JCOMMA,NE=CCWER4 IS SYNTAX OK
         LA    R10,D1(,R14)             STEP PAST COMMA
         JCALL EVAL                     GO EVALUATE SECOND OPERAND
         ST    R11,DWORD2               SAVE VALUE
         MVC   DCDATA+D1(D3),DWORD2+D1  MOVE VALUE TO OUTPUT AREA
         BC    ABSX,CCW250              SKIP RLD IF ABSOLUTE
         BC    ERRX,CCW250              SKIP RLD IF FATAL ERROR
         LR    R4,R14                   SAVE OPERAND SCAN POINTER
         L     R1,LOCATN                GET CCW LOCATION
         LA    R1,D1(,R1)               STEP FOR RLD LOCATION
         ST    R1,DWORD1                SAVE FOR RLD OUTPUT
         MVI   DWORD1,D0                SET RLD TYPE FLAG
         LA    R1,D3                    GET LENGTH
         STH   R1,DWORD2                SAVE FOR RLD OUTPUT
         JCALL RLDOUT                   GO LOG RLD
         LR    R14,R4                   RESTORE OPERAND SCAN POINTER
CCW250   L     R11,DWORD2               GET VALUE BACK
         GOIF  (R11),NEG=CCWER14        ERROR IF NEGATIVE
         C     R11,=A(X'FFFFFF')        MAXIMUM VALUE
         BH    CCWER14                  GO LOG ERROR
CCW275   GOIF  D0(R14),JCOMMA,NE=CCWER6 COMMA EXPECTED
         LA    R10,D1(,R14)             STEP PAST COMMA
         JCALL EVAL                     GO EVALUATE THIRD OPERAND
         BNZ   CCWER7                   MUST BE ABSOLUTE
         CH    R11,=H'255'              IS VALUE TOO BIG
         BH    CCWER9                   YES, GO LOG ERROR
CCW300   STC   R11,DCDATA+D4            SAVE VALUE FOR OUTPUT
         TM    DCDATA+D4,BIT6+BIT7      IS BIT 38 AND 39 ZERO
         BNZ   CCWER8                   NO  - ERROR
CCW325   GOIF  D0(R14),JCOMMA,NE=CCWER10 IS SYNTAX STILL OK
         LA    R10,D1(,R14)             STEP PAST COMMA
         JCALL EVAL                     GO EMULATE FORUTH OPERAND
         BNZ   CCWER11                  MUST BE ABSOLUTE
         C     R11,=F'65535'            VALUE MUST FIT IN TWO BYTES
         BH    CCWER12                  LOG ERRER IF TOO LARGE
CCW400   STH   R11,DCDATA+D6            SAVE VALUE
CCW425   GOIF  D0(R14),JBLANK,NE=CCWER13 IS SYSNTAX STILL OK
         SPACE
CCW500   LA    R10,D8                   SET ALIGNMENT
         ST    R10,LOCLEN               SAVE FOR LOCUPD
         JCALL LOCUPD                   CALL LOCATION UPDATE
         LA    R10,DC0OUT               SET PRINT INDEX
         JCALL OUTPUT                   CALL PRINT ROUTINE
         SET   DCMOP,ON                 INDICATE MOP-UP
         LA    R10,DC0OUT               SET PRINT INDEX
         B     AOP410                   GO DO DC MOP-UP PRINT CALL
ALNTST   TM    ELCTR+D3,D0              EXECUTED ALIGNMENT TEST
ORLEN    OI    LHFLGS,D0                EXECUTED OR OF ALIGNMENT LENGTH
CCWER1   MVC   ERRPTR,OPNADR            SET COLUMN POINTER
         X5ERRL 177,CLMPTR,CCW500       MISSING OPERAND
CCWER2   X5ERRL 179,CLMPTR,CCW500       OPERAND NOT ABSOLUTE
CCWER3   X5ERRL 183,CLMPTR,CCW225       INVALID RANGE 255 MAXIMUM
CCWER4   X5ERRL 178,CLMPTR,CCW500       COMMA EXPECTED
CCWER6   X5ERRL 178,CLMPTR,CCW500       COMMA EXPECTED
CCWER7   X5ERRL 179,CLMPTR,CCW325       OPERAND NOT ABSOLUTE
CCWER8   X5ERRL 244,CLMPTR,CCW325       BIT 38 AND 39 NOT SERP
CCWER9   X5ERRL 183,CLMPTR,CCW325       INVALID RANGE 255 MAXIMUM
CCWER10  X5ERRL 178,CLMPTR,CCW500       COMMA EXPECTED
CCWER11  X5ERRL  179,CLMPTR,CCW425      OPERAND NOT ABSOLUTE
CCWER12  X5ERRL 184,CLMPTR,CCW425       INVALID RANGE 65535 MAXIMUM
CCWER13  X5ERRL 185,CLMPTR,CCW500       INVALID DELIMITER
CCWER14  X5ERRL 241,CLMPTR,CCW275       INVALID RANGE X'FFFFFF' MAX
CCWER15  X5ERRL 243,CLMPTR,CCW500       CCW OPCODE NEGATIVE
         SPACE 3
    TITLE '&COMPNM&ASMID - ASSEMBLER OPCODE PROCESSOR - ASSEMBLY PHASE -
               - ''DC && DS'' STATEMENT - CALL DC EVAL'
*
*   DC STATEMENT - CALL DC EVAL
*
DC0100   BAL   R6,COMCALL               GO GET GOOD OPERAND COUNT
         L     R10,OPNADR               GET OPERAND ADDRESS
         JCALL DCEVAL                   CALL DC EVALUATION
         SET   DCMOP,ON                 TURN MOP-UP SWITCH
         LA    R10,DC0OUT               SET PRINT INDEX
         JCALL OUTPUT                   GO COMPLETE DC OUTPUT
         JEXTRN (X5D01=DCEVAL)          DEFINE EXTERNAL SYMBOL
         B     AOP300                   EXIT TO MAINLINE
         SPACE 5
*
*   DS STATEMENT - CALL DC EVAL
*
DS0100   SET   DSSW,ON                  INDICATE ENTRY IS A DS
         BAL   R6,COMCALL               GO GET GOOD OPERAND COUNT
         L     R10,OPNADR               POINT TO OPERAND
         JCALL DCEVAL                   CALL DC EVALUATION
         SET   DCMOP,ON                 SET MOP UP SWITCH ON
         LA    R10,DC0OUT               LOAD PRINT INDEX
         JCALL OUTPUT                   GO MOP UP DS
         SET   DSSW,OFF                 TURN OFF DS SWITCH
         B     AOP300                   EXIT
         SPACE 3
      TITLE '&COMPNM&ASMID - ASSEMBLER OPCODE PROCESSOR- ASSEMBLY PHASE-
               - ''START, CSECT, DSECT && COM'' STATEMENT PROCESSOR'
START0   L     R11,SYMDEF               GET DATA POINTER
DSECT0   EQU   START0                   DEFINE DSECT ENTRY POINT
COM100   EQU   START0                   DEFINE COM ENTRY POINT
CSECT0   EQU   START0                   DEFINE CSECT ENTRY POINT
         GOIF  NAMPRS,ON=STR100         IS CONTROL SECTOIN NAMED
         LH    R10,JINFILE              GET INPUT FILE NUMBER
         JGETL FILE=(R10)               GET RESOLUTION DATA
         SPACE
STR100   GOIF  JTSTART,NE=STR110        ARE WE PROCESSING START CARD?
         TM    RFLGB,BIT0               IS IT VALID?
         BO    STR110                   BRANCH AROUND IF YES
         X5ERRL 164,0                   INVALID START CARD
         SPACE
STR110   MVC   ELCTR,RLCTR              START LOCATION COUNTER
         MVC   EESDI,RESDI              INITIALIZE ESD FOR THIS CSECT
         MVC   LOCATN,RLCTR             MOVE VALUE TO LEFT HALF PRINT
         CLC   ELCTR,=A(X'FFFFFF')      IS CSECT START LOC BELOW LIMIT
         BNH   AOP405                   YES , GO PRINT AND EXIT
         GOIF  WRPFLG,ON=AOP405         GO PRINT IF ALREADY LOGGED
         SET   WRPFLG,ON                INDICATE ERROR LOGGED
         X5ERRL 246,0                   LOG LOCATION COUNTER ERROR
         B     AOP405                   GO PRINT AND EXIT
         SPACE 3
    TITLE '&COMPNM&ASMID - ASSEMBLER OPCODE PROCESSOR - ASSEMBLY PHASE -
               - ''ENTRY && EXTRN'' STATEMENT PROCESSOR'
ENTRY0   GOIF  OPNPRS,OFF=ENXER1        IS OPERAND BLANK
EXTRN0   EQU   ENTRY0                   DEFINE EXTRN ERTRY POINT
         L     R4,OPNADR                POINT TO THE OPERAND
ENX100   LR    R1,R4                    INITIALIZE SCAN REGISTER
         ST    R1,ERRPTR                SAVE OPERAND PTR FOR LOGGING
         GOIF  D0(R1),JALFAMIN,LT=ENXER2 FIRST CHARACTER NON-NUMERIC
ENX200   GOIF  D0(R1),JALFAMAX,GT=ENX300 IS CHARACTER LEGAL IN SYMBOL
         LA    R1,D1(,R1)               STEP TO NEXT CHARACTER
         B     ENX200                   CONTINUE SCAN
ENX300   GOIF  D0(R1),JBLANK,EQ=ENX325  WAS DELIMITER A BLANK
         GOIF  D0(R1),JCOMMA,NE=ENXER2  NO, WAS DELIMITER A COMMA
ENX325   SR    R1,R4                    GET LENGTH OF SYMBOL
         BZ    ENXER2                   SHOULD NOT BE ZERO
         CH    R1,=H'8'                 IS SYMBOL 8 CHARACTERS OR LESS
         BH    ENXER4                   NO, GO LOG ERROR
         AR    R4,R1                    POINT TO DELIMITER
         LH    R10,JINFILE              POINT TO INPUT FILE
         JGETL FILE=(R10)               GET NEXT RECORD
         GOIF  JTENTRY,EQ=ENX400        IS ENTRY AN ENTRY
         LA    R2,BASE                  INDICATE BASE FOR XREF
         GOIF  PRIORDEF,OFF=ENX350      IF NOT DUPLICATE BRANCH AROUND
         ST    R11,ERRPTR               STORE OPERAND POINTER
         X5ERRL 196,DTAPTR              LOG DUPLICATE NAME ERROR
         LA    R2,DUPL                  INDICATE DUP FOR XREF
         SPACE
ENX350   JCALL XREF                     GO MAKE XREF
         B     ENX500                   SKIP ENTRY ERROR CHECKING
ENX400   LA    R2,REF                   INDICATE REFERENCE FOR XREF
         JCALL XREF                     GO MAKE XREF FOR ENTRY
         TM    RFLGB,BIT2               VALID ENTRY?
         BZ    ENXER6                   BRANCH IF ENTRY INVALID
ENX500   GOIF  D0(R4),JBLANK,EQ=AOP400  WAS DELIMITER A BLANK
         LA    R4,D1(,R4)               YES, STEP PAST COMMA
         B     ENX100                   CONTINUE SCAN
         SPACE
ENXER1   X5ERRL 177,0,AOP400            MISSING OPERAND
         SPACE
ENXER2   X5ERRL 186,CLMPTR,AOP400       INVALID SYMBOL
         SPACE
ENXER4   X5ERRL 187,CLMPTR,AOP400       INVALID SYMBOL - TOO LONG
         SPACE
ENXER6   X5ERRL 189,0,ENX500            LOG ENTRY ERROR
         SPACE
         SPACE 3
    TITLE '&COMPNM&ASMID - ASSEMBLER OPCODE PROCESSOR - ASSEMBLY PHASE -
               - ''CXD'' STATEMENT PROCESSOR'
CXD100   LA    R2,D3                    GET MAXIMUM ALIGNMENT
         EX    R2,ALNTST                DO WE NEED TO ALIGN LOCATION
         BZ    CXD200                   NO, CONTINUE CXD PROCESSING
         GOIF  JALGN,OFF=CXD200         DON'T ALIGN IF NOALIGN OPTION
         JCALL ALIGN                    GO DETERMINE ALIGNMENT
         L     R2,FULLWD                SAVE ALIGNMENT LENGTH
         EX    R2,ORLEN                 INDICATE OUTPUT LENGTH
         SET   ENTALN,ON                INDICATE ALIGNMENT
         SR    R10,R10                  LOAD OUTPUT INDEX
         JCALL OUTPUT                   GO OUTPUT ALIGNMENT
CXD200   OI    LHFLGS,ENTDC+D4          SET LENGTH AND PRINT FLAGS
         MVC   LOCATN,ELCTR             MOVE LOCATION COUNTER TO PRINT
         LA    R1,D4                    GET LENGTH OF DXD
         ST    R1,LOCLEN                SAVE LENGTH
         STH   R1,DWORD2                SAVE CXD LENGTH
         JCALL LOCUPD                   UPDATE LOCATION COUNTER
         TM    EESDI,BIT1+BIT2+BIT3     ARE WE IN DSECT OR COMMON
         BNZ   AOP405                   BRANCH IF YES
         MVC   DWORD1+D1(D3),LOCATN+D1  MOVE CXD LOCATION FOR OUTPUT
         MVI   DWORD1,BIT2+BIT3         SET CXD FLAGS
         MVC   RLIST,EESDI              POSITION AND RELOCATION ID SAME
         MVI   RELOCTR,D1               INDICATE ONLY 1 ESDID.
         JCALL RLDOUT                   GO MAKE RLD ENTRY
         XC    D8(D2,R11),D8(R11)       SET RELID TO ZERO
         B     AOP405                   GO PRINT AND EXIT
         SPACE 3
    TITLE '&COMPNM&ASMID - ASSEMBLER OPCODE PROCESSOR - ASSEMBLY PHASE -
               - ''LTORG'' STATEMENT PROCESSOR'
LTORG0   LH    R1,LITPID                GET POOL ID
         LA    R1,D1(,R1)               ADD 1
         STH   R1,LITPID                STORE NEW POOL ID
LTO050   LA    R2,D7                    GET ALIGNMENT FACTOR
         EX    R2,ALNTST                IS ALIGNMENT NECESSARY
         BZ    LTO100                   NO, SKIP ALIGNMENT
         GOIF  JALGN,OFF=LTO100         DON'T ALIGN IF NOALIGN OPTION
         JCALL ALIGN                    YES, GO ALIGN LOCATION CTR
         SPACE
LTO100   MVC   LOCATN,ELCTR             MOVE LOCATION FOR PRINTING
         GOIF  JTLTORG,NE=LTO200        IS IT A LTORG STATEMENT?
         SR    R10,R10                  SET PRINT INDEX
         JCALL OUTPUT                   GO PRINT RECORD
         GOIF  JERR,OFF=LTO200          ANY ERROR IN LTORG STMNT
         LA    R10,ERROUT               YES  LOAD PRINT INDEX
         JCALL OUTPUT                   GO PRINT ERROR FLAG
LTO200   L   R2,ELCTR                   IS LOCATION COUNTER GREATHER
         C     R2,=A(X'FFFFFF')         THAN MAXIMUM
         BNH   LTO210
         GOIF  WRPFLG,ON=LTO210         FORGET ERROR IF ALREADY LOGGED
         SET   WRPFLG,ON                INDICATE LCTR ERROR LOGGED
         X5ERRL  246,0                  LOG - LOCATION COUNTER ERROR
         LA    R10,ERROUT
         JCALL OUTPUT                   PRINT *** ERROR ***
LTO210   LH    R10,JINFILE              POINT TO SYMBOL DATA FILE
         JGETL FILE=(R10)               GET NEXT RECORD
         GOIF  JTEND,EQ=LTO300          ARE WE PROCESSING END CARD?
         LR    R5,R11                   SAVE TEXT POINTER
         GOIF  JTADJII,EQ=LITR00        IS ENTRY A LITERAL DC
         GOIF  JTLTEND,EQ=AOP310        NO, IS IT END OF LITERAL POOL
         X5ERRL 167,0,AOP310            SYMBOL FILE OUT OF SYNC
         SPACE
LTO300   CLI  RTYPE,JTLTEND             IF LITERAL END, THEN EXIT
         BC    8,AOP310                 YES,EXIT
         MVC   ELCTR,RLCTR              RESUMED LOCATION COUNTER
         MVC   EESDI,RESDI              RESUME ESDID
         MVI   JTIOP1,X'00'             ZEROED OUT OPCODE
         B     LTO050                   GO CHECK ALIGNMENT
         SPACE 3
    TITLE '&COMPNM&ASMID - ASSEMBLER OPCODE PROCESSOR - ASSEMBLY PHASE -
               - ''LITR'' STATEMENT PROCESSOR'
LITR00   L     R1,STMTN                 GET STATEMENT NUMBER
         LA    R1,1(,R1)                INCREMENT 1
         C     R1,=F'65535'             IS IT THE LIMIT ?
         BNH   LITR05                   NO,BRANCH AROUND
         SR    R1,R1                    YES START FROM ZERO
         SPACE
LITR05   ST    R1,STMTN                 SAVE IT
         MVC   LITRSD,JTNMP             SAVE LITR * LOCATION
         MVC   LITRLC,JTOCP             SAVE LITR * ESD
         MVI   SYMCNT,D0                ZERO NUMBER OF SYMBOLS THIS REC
         SET   LITRSW,ON                INDICATE A LITR FOR DCEVAL
         SR    R2,R2                    CLEAR REGISTER
         LH    R2,RRCDL                 GET RECORD LENGTH
         BCTR  R2,0                     MAKE IT MOVE LENGTH
         CH    R2,=H'255'               LONGER THAN MAX MOVE LENGTH
         BNH   LITR10                  NO MOVE WILL WORK
         SH    R2,=H'256'               COMPUTE REMAINDER
         EX    R2,LITMOV2               MOVE REMAINDER
         LH    R2,=H'255'               MOVE FIRST 256 BYTES
LITR10   EQU   *
         EX    R2,LITMOV                MOVE LITERAL TO X5ATEMP
         SR    R2,R2                    CLEAR REGISTER
         IC    R2,RLNGA                 GET MACHINE LENGTH OF LITERAL
         LA    R5,X5ALIT                TREAT IT AS TEXT FILE RECORD
         EX    R2,LITMVX                MOVE LITERAL IN RECORD  OX00222
         MVC   JTRLI(D23),=AL1(0,0,0,0,X'2C',0,0,18,0,18,0,20,0,18,0,18*
               ,0,0,0,0,16,0,JEQUAL)    BUILT TEXT REC FOR LIT  OX00222
         MVC   JTFLGA(D1),RFLGA         MOVE IN FLAG A          OX00222
         LA    R2,D1(R2)                INCREMENT BY 1          OY01863
         STC   R2,D21(R5)               INSERT LIT TRUE LENGTH  OX00222
         LA    R1,D23(R2)               COMPUTE REC LENGTH      OX00222
         STH   R1,JTRLI                 PUT IN REC LENGTH       OX00222
         LH    R10,JOUTFILE             POINT TO OUTPUT FILE
         JPUTL FILE=(R10),BUFREQ=(R1)   LOCATE NEXT BUFFER
         USING XRFIN,R11                XREF RECORD USING
         LA    R1,D20(R2)               COMPUTE LENGTH
         STH   R1,XRECLN                PUT IN DEFINITION RECORD
         MVC   XFLAG(4),=AL2(0,LITTYPE*256)  XREF RECORD HEADER
         STC   R2,LITDTL                PUT IN LITERAL LENGTH
         BCTR  R2,0                     GIVE TRUE LENGTH        OX00086
         EX    R2,LITRMV                MOVE LITERAL TO RECORD  OX00086
         MVC   XRFSYM(D4),ELCTR         MOVE LOCATION TO XREF RECORD
         MVC   XRFSYM+D4(D2),EESDI      MOVE ESD TO XREF RECORD
         MVC   XRFSYM+6(1),LITPID+1     MOVE LITPOOL ID TO XREF RECORD
         MVI   XRFSYM+7,X'00'           ZEROED OUT BYTE
         MVI   XRFFLG,BASE              INDICATE BASE REFERENCE
         MVC   XRFSTM,STMTN+D2          STATEMENT NUMBER TO RECORD
         SR    R10,R10                  CLEAR REGISTER
         IC    R10,JTFLGA               GET LENTH ATTRIBUTE
         LA    R10,D1(,R10)             INCREMENT BY 1
         STH   R10,LCTRSAV              SAVE FOR MOVING
         MVC   XRFLEN,LCTRSAV           MOVE TO XREF RECORD
         SPACE
         LH    R1,JTRLI                 GET RECORD LENGTH
         LA    R10,D23(R5)              POINT AT EXPRESSION     OX00222
         ST    R10,OPNADR               SAVE OPERAND ADDRESS
         ST    R5,TXTPTR                SAVE LITERAL TEXT PTR
         AR    R1,R5                    ADD RECORD LENGTH TO RECORD PTR
         ST    R1,OPNEND                SAVE OPERAND END
         SET   (DCSWH,DCCOMP,DCMOP,DCSTRT),OFF TURN OFF ALL DC FLAGS
         JCALL DCEVAL                   GO TO DC EVALUATION ROUTINE
         SET   LITRSW,OFF               TURN OFF LITERAL SWITCH
         SET   DCMOP,ON                 TURN MOP-UP SWITCH ON
         LA    R10,DC0OUT               GET DC PRINT INDEX
         JCALL OUTPUT                   CALL OUTPUT
         GOIF  JERR,OFF=LTO200          ANY ERRORS FLAGGED?
         LA    R10,ERROUT               LOAD ERROR FLAG INDEX
         SET   PERR,OFF                 TURN PRINT ERROR FLAG  OFF
         JCALL OUTPUT                   GO PRINT ERROR FLAG
         B     LTO200                   GO SEE IF THERE IS MORE LITR'S
LITRMV   MVC   LITDTA(0),D22(R5)        MOVE LITERAL            OX00222
LITMOV   MVC   X5ALIT(0),D0(R11)        MOVE LITERAL RECORD TO X5ALIT
LITMOV2  MVC   X5ALIT+256(0),256(R11)   MOVE FIRST 256 IF TOO LONG
LITMVX   MVC   D23(0,R5),D13(R11)       REBUILT LIT REC         OX00222
         SPACE 3
    TITLE '&COMPNM&ASMID - ASSEMBLER OPCODE PROCESSOR - ASSEMBLY PHASE -
               - ''PUNCH'' && ''REPRO'' STATEMENT PROCESSOR'
*
*   PUNCH STATEMENT PROCESSING
*
PUNCH0   BAL   R6,AOP440                GO PRINT PUNCH STATEMENT
         BAL   R6,AOP500                GO CLEAR DUPLICATE QUOTES
         GOIF  TPTEXT,ON=PUNCH3         FORGET PUNCH IF OPERAND ERROR
         CH    R11,=H'80'               IS LENGTH > 80?
         BNH   PUNCH1                   BRANCH AROUND IF NOT HIGH
PUNER1   X5ERRL 165,0,AOP300            LOG PUNCH OPERAND ERROR
         SPACE
PUNCH1   LTR   R11,R11                  IS LENGTH =0?
         BZ    PUNER1                   IF YES GO LOG ERROR
         GOIF  JSYSGEN,OFF=PUNCH2       NEED TO CHECK? NO,BRANCH
         GOIF  JPRESD,ON=AOP300         RECORD PUNCHED ALREADY?
         SPACE
PUNCH2   LA    R10,PUNOUT               LOAD PUNCH INDEX
         B     AOP410                   GO PUNCH STATEMENT
         SPACE
PUNCH3   SET   TPTEXT,OFF               RESET BAD OPERAND INDICATOR
         B     AOP300                   GET OUT
         SPACE 3
*
*   REPRO STATEMENT PROCESSING
*
REPRO0   LA    R10,RPOOUT               LOAD INDEX FOR REPRO CARD
         B     AOP410                   GO PUNCH AND PRINT
         SPACE 3
    TITLE '&COMPNM&ASMID - ASSEMBLER OPCODE PROCESSOR - ASSEMBLY PHASE -
               - ''PUSH'' STATEMENT PROCESSOR'
PUSH00   GOIF  OPNPRS,OFF=PUSHR1        ERROR NO OPERAND
         L     R4,OPNADR                POINT TO OPERAND
PSH100   CLC   D0(D5,R4),PSPOUS         PUSH USING
         ST    R4,ERRPTR                SAVE COLUMN PTR
         BE    PSH400                   YES, GO PUSH USING DOWN LEVEL
         CLC   D0(D5,R4),PSPOPR         PUSH PRINT
         BNE   PUSHR2                   NO - REQUEST INVALID
         LH    R1,PRPU                  GET PRINT PUSH COUNT
         CH    R1,=AL2(PUPOLV)          DOES REQUEST EXCEED LEVEL
         BNL   PUSHR3                   YES, GO LOG ERROR
         LA    R2,PRPU+D2(R1)           POINT TO PUSH PRINT SAVE AREA
         MVC   D0(D1,R2),PRINTSW        SAVE PRINT SWITCHES
         LA    R1,D1(,R1)               STEP COUNT BY 1
         STH   R1,PRPU                  SAVE NEW LEVEL COUNT
         GOIF  PSTMT,ON=PSH200          IF PRINT ON OK
         SET   PRPP,ON                  ELSE FORCE PRINT OF PUSH
PSH200   GOIF  D5(R4),JBLANK,EQ=AOP400  OPERAND FOLLOWED BY A BLANK
         GOIF  D5(R4),JCOMMA,NE=PUSHR4  NO, IS COMMA FOLLOWING
         LA    R4,D6(,R4)               YES, STEP TO NEXT OPERAND
         B     PSH100                   CONTINUE SCAN
PSH400   LH    R1,USPHL                 GET USING PUSH DOWN LEVEL
         CH    R1,=AL2(PUPOLV)          IN MAX. LEVEL EXCEEDED
         BNL   PUSHR3                   YES,ERROR
         LA    R1,D1(,R1)               STEP LEVEL COUNT
         STH   R1,USPHL                 SAVE NEW COUNT
         MH    R1,=AL2(USTL)            POINT TO SPACE TO PUSH
         LA    R1,USINGT(R1)             USING TABLE
         MVC   D0(USTL,R1),USINGT       SAVE USING TABLE
         B     PSH200                   CONTINUE SCAN
         SPACE
PUSHR1   MVC   ERRPTR,OPNADR            SET COLUMN PTR
         X5ERRL 177,CLMPTR,AOP400       MISSING OPERAND
         SPACE
PUSHR2   X5ERRL 190,CLMPTR,AOP400       UNDEFINED PUSH REQUEST
         SPACE
PUSHR3   X5ERRL 191,CLMPTR,AOP400       PUSH LEVEL EXCEEDED - PRINT
         SPACE
PUSHR4   X5ERRL 185,CLMPTR,AOP400       INVALID DELIMITER -BLANK
         SPACE 3
    TITLE '&COMPNM&ASMID - ASSEMBLER OPCODE PROCESSOR - ASSEMBLY PHASE -
               - ''POP'' STATEMENT PROCESSOR'
POP100   GOIF  OPNPRS,OFF=POPER1        DOES POP HAVE AN OPERAND
         L     R4,OPNADR                POINT TO OPERAND
POP200   CLC   D0(D5,R4),PSPOUS         ARE WE POPING USING
         ST    R4,ERRPTR                SAVE COLUMN PTR
         BE    POP400                   YES, GO MOVE USING UP A LEVEL
         CLC   D0(D5,R4),PSPOPR         POP PRINT REQUESTED
         BNE   POPER2                   NO, ERROR UNDEFINED OPERATION
         LH    R1,PRPU                  GET PRINT PUSH LEVEL
         LTR   R1,R1                    IS TI ZERO
         BZ    POPER3                   YES, EXCEEDED PUSH LEVEL
         BCTR  R1,0                     DECREMENT COUNT
         LA    R2,PRPU+D2(R1)           POINT TO LAST LEVEL SAVED
         MVC   PRINTSW,D0(R2)           RESTORE PREVIOUS PRINT SWITCH
         STH   R1,PRPU                  SAVE NEW PUSH COUNT
         GOIF  PSTMT,ON=POP300          IF PRINT ON OK
         SET   PRPP,ON                  ELSE FORCE PRINT OF POP
POP300   GOIF  D5(R4),JBLANK,EQ=AOP400  IS PUSH OPERAND FOLLOWED BLANK
         GOIF  D5(R4),JCOMMA,NE=POPER4  NO, CHECK COMMA - IF NO ERROR
         LA    R4,D6(,R4)               YES, POINT TO NEXT OPERAND
         B     POP200                   CONTINUE SCAN OF OPERAND
POP400   LH    R1,USPHL                 GET USING PUSH LEVEL
         LTR   R2,R1                    SAVE AND TEST FOR ZERO
         BZ    POPER3                   NO MORE LEVEL TO POP
         MH    R1,=AL2(USTL)            POINT TO USING PUSH DOWN
         LA    R1,USINGT(R1)             SEGMENT FOR RESTORE
         MVC   USINGT(USTL),D0(R1)      RESTORE USING TABLE
         BCTR  R2,0                     DECREMENT PUSH DOWN LEVEL
         STH   R2,USPHL                 SAVE NEW PUSH COUNT
         B     POP300                   CONTINUE SCAN
         SPACE
POPER1   MVC   ERRPTR,OPNADR            SET COLUMN PTR
         X5ERRL 177,CLMPTR,AOP400       MISSING OPERAND
         SPACE
POPER2   X5ERRL 192,CLMPTR,AOP400       INVALID (UNDEFINED) POP REQUEST
         SPACE
POPER3   X5ERRL 193,CLMPTR,AOP400       NO LEVEL LEFT TO POP FOR PRINT
         SPACE
POPER4   X5ERRL 185,CLMPTR,AOP400       INVALID DELIMITER - BLANK
PUPOLV   EQU   4                        PUSH LEVEL MAXIMUM
USTL     EQU   (17*8)                   USING TABLE LENGTH
PSPOUS   JGENIN 'USING'                 INTERNAL DC -USING-
PSPOPR   JGENIN 'PRINT'                 INTERNAL DC -PRINT-
         SPACE 3
    TITLE '&COMPNM&ASMID - ASSEMBLER OPCODE PROCESSOR - ASSEMBLY PHASE -
               - ''PRINT'' STATEMENT PROCESSOR'
PRINT0   IC    R2,PRINTSW               SAVE PRINT SWITCH
         SET   (PSTMT,PGEN),ON          FORCE PRINT ON
         BAL   R6,AOP440                GO PRINT PRINT STATEMENT
         STC   R2,PRINTSW               RESTORE PRINT SWITCH
         GOIF  OPNPRS,OFF=PRTER1        GO LOG ERROR IF NO OPERAND
         L     R10,OPNADR               GET OPERAND POINTER
         L     R11,OPNEND               GET OPEREND END
         SR    R14,R14                  ZERO REGISTER TO CLEAR 3 BYTES
PRT100   LA    R15,PRTBL                POINT TO POSSIBLE PRINT OPERNDS
         CR    R10,R11                  ARE WE TO THE END OF OPERAND
         BNL   PRT350                   YES,GO LOG ERROR
PRT300   IC    R14,D0(,R15)             GET LENGTH OF TABLE ENTRY
         EX    R14,PRTCLC               IS THIS THE PRINT OPTION
         BE    PRT400                   YES, GO SET PRINT FLAGS
         LA    R15,D3(R14,R15)          POINT TO NEXT TABLE ENTRY
         GOIF  D0(R15),BITFF,NE=PRT300  HAVE WE SCANNED THE WHOLE TABLE
         SPACE
PRT350   ST    R10,ERRPTR               SAVE OPERAND COLUMN PTR
         X5ERRL 194,CLMPTR,AOP300       INVALID PRINT REQUEST
PRT400   ST    R10,ERRPTR               SAVE ERROR PTR
         LA    R10,D1(R14,R10)          POINT TO NEXT OPERAND
         GOIF  D0(R10),JBLANK,EQ=PRT450 OK IF DELIMITED BY BLANK
         GOIF  D0(R10),JCOMMA,NE=PRTER2 ERROR IF NOT DELIMITED BY COMMA
         SPACE
PRT450   TM    D1(R15),BIT7             HOW TO TURN FLAG
         BO    PRT600                   GO TO TURN FLAG OFF
         OC    PRINTSW,D1(R15)          TURN FLAG ON
         SPACE
PRT500   GOIF  D0(R10),JCOMMA,NE=AOP300  FINISH IF NOT COMMA
         LA    R10,D1(R10)              STEP PASS COMMA
         B     PRT100                   GO SCAN NEXT OPERAND
PRT600   NC    PRINTSW,D1(R15)          TURN OF FLAG
         B     PRT500                   GO STEP TO NEXT OPERAND
PRTER1   X5ERRL 177,0,AOP300            NO OPERAND
PRTER2   X5ERRL 185,CLMPTR,AOP300       INVALID DELIMITER
PRTCLC   CLC   D0(0,R10),D2(R15)        COMPARE EXECUTED ABOVE
PRTBL    DC    AL1(L'GON-1)             LENGTH OF 'ON' -1
         DC    AL1(PSTMT)               OR FLAG TO TURN ON PSTMT
GON      JGENIN 'ON'                    ON - INTERNAL
         DC    AL1(L'GOFF-1)            LENGTH OF 'OFF' -1
         DC    AL1(BITFF-PSTMT)         AND FLAG TO TURN OF PSTMT
GOFF     JGENIN 'OFF'                   OFF - INTERNAL
         DC    AL1(L'GGEN-1)            LENGTH OF 'GEN' -1
         DC    AL1(PGEN)                OR FLAG TO TURN ON PGEN
GGEN     JGENIN 'GEN'                   GEN - INTERNAL
         DC    AL1(L'GDATA-1)           LENGTH OF 'DATA' -1
         DC    AL1(PDATA)               OR FLAG TO TURN ON PDATA
GDATA    JGENIN 'DATA'                  DATA - INTERNAL
         DC    AL1(L'GNOGN-1)           LENGTH OF 'NOGEN' -1
         DC    AL1(BITFF-PGEN)          AND FLAG TO TURN OFF PGEN
GNOGN    JGENIN 'NOGEN'                 NOGEN-INTERNAL
         DC    AL1(L'GNODTA-1)          LENGTH OF 'NODATA' -1
         DC    AL1(BITFF-PDATA)         AND FLAG TO TURN OFF PDATA
GNODTA   JGENIN 'NODATA'
         DC    AL1(BITFF)
         SPACE 3
    TITLE '&COMPNM&ASMID - ASSEMBLER OPCODE PROCESSOR - ASSEMBLY PHASE -
               - ''USING'' STATEMENT PROCESSOR'
USING0   GOIF  OPNPRS,ON=USI050         OPERAND PRESENT?
         X5ERRL 210,0,AOP405            LOG ERROR AND EXIT
         SPACE
USI050   XC    LHSAVE(2),LHSAVE         CLEAR SAVE AREA
         L     R10,OPNADR               GET OPERAND POINTER
         ST    R10,ERRPTR               SAVE COLUMN PTR
         GOIF  D0(R10),JASTER,GT=USI800 IS 1ST OPERAND PRESENT?
         LH    R2,LHSAVE                GET OPERAND COUNT
         LA    R2,D1(R2)                INCREMENT BY 1
         STH   R2,LHSAVE                STORE OPERAND COUNT
         BAL   R6,AOP600                GO EVALUATE FIRST OPERAND
         BC    CMPX+ERRX,USI900         IS 1ST OPERAND VALID?
         LR    R6,R11                   SAVE REGISTER
         LTR   R11,R11                  IS VALUE NEGATIVE
         BNM   USI085                   NO,BRANCH AROUND
         LCR   R6,R11                   COMPLEMENT VALUE
         SPACE
USI085   STM   R10,R11,DWORD1           SAVE ESD AND VALUE
         GOIF  D0(R14),JCOMMA,NE=USI600 IF NOT A COMMA-SYNTATIC ERROR
         MVC   ADDRS2(D4),DWORD1+D4     MOVE VALUE TO LEFT HALF
         SET   EOUBIT,ON                INDICATE NO LOCTR IN LISTING
USI100   LA    R10,D1(,R14)             POINT TO NEXT OPERAND
         LH    R2,LHSAVE                GET OPERAND COUNT
         LA    R2,D1(R2)                INCREMENT OPERAND COUNT BY 1
         STH   R2,LHSAVE                STORE OPERAND COUNT
         CH    R2,=H'17'                TOO MANY OPERAND?
         BNH   USI110                   NO,BRANCH AROUND
         X5ERRL 211,0,AOP405            LOG ERROR AND EXIT
         SPACE
USI110   BAL   R6,AOP600                GO EVALUATE
         BNZ   USI700                   GO LOG ERROR IF NOT ABSOLUTE
         STH   R11,DWORD2               SAVE REGISTER NUMBER
         CL    R11,=A(HIREG)            IS REGISTER NUMBER TO HIGH
         BH    USI700                   YES, GO LOG ERROR
         GOIF  (R11),ZERO=USI500        IS REGISTER NUMBER ZERO
USI120   LA    R4,USINGT                POINT TO USING TABLE
         USING UESD,R4                  ESTABLISH USING FOR USING TABLE
         LR    R1,R14                   SAVE OPERAND TERMINATOR POINTER
USI200   TM    UREG,X'0F'               ARE WE TO THE END OF   @OX08876
         BO    USI300                    TABLE - YES, TRM SCN  @OX08876
         CLC   UREG,DWORD2              NO, CHECK REGISTER
         BE    USI320                   BRANCH IF REPLACING REGISTER
         LA    R4,USNXT                 POINT TO NEXT ENTRY
         B     USI200                   CONTINUE SCAN
USI300   XC    USNXT(USSL),USNXT        MAKE SURE END OF TABLE DEFINED
         MVI   USNXT+D6,X'0F'           IND END OF TABLE       @OX08876
USI320   MVC   UESD(USSL),DWORD1+D2     MOVE IN NEW USING ENTRY
         NC    UESD,UESD                IS ESD ZERO
         BNZ   USI340                   NO, NOT ABSOLUTE
         SET   ABSUS,ON                 TURN ABSOLUTE USING SWITCH
USI340   LA    R6,USINGT                PREPARE FOR BUBBLE SORT
         USING JTEXTA,R4                RE-ESTABLISH OPERAND USING
         USING UESD,R6                  CHANGE USING FOR USING TABLE
         SET   USSRT,OFF                TURN OFF SORT SWITCH
USI360   TM    USNXT+D6,X'0F'           HAVE WE  END OF TABLE  @OX08876
         BO    USI400                   YES, SORT COMPLETE?    @OX08876
         CLC   UESD(2),USNXT            COMPARE ESD'S
         BL    USI380                   GO TO EXCHANGE IF LOW
         BH    USI370                   GO TO NEXT IF HIGH
         L     R15,UVAL                 GET USING VALUE
         C     R15,USNXT+D2             COMPARE VALUES
         BL    USI380                   GO TO EXCHANGE IF LOW
         BH    USI370                   GO TO NEXT ENTRY IF HIGH
         CLC   UREG+D1(1),USNXT+D7      COMPARE REGISTER NR    @OX08876
         BL    USI380                   NO, GO EXCHANGE ENTRIES
USI370   LA    R6,USNXT                 STEP TO NEXT ENTRY
         B     USI360                   CONTINUE SORT
USI380   XC    UESD(USSL),USNXT         EXCHANGE (SORT)
         XC    USNXT(USSL),UESD           ENTRIES
         XC    UESD(USSL),USNXT             IN USING TABLE
         SET   USSRT,ON                 TURN ON SORT FLAG
         B     USI370                   GO CONTINUE SORT
USI400   GOIF  USSRT,ON=USI340          IS SORT COMPLETE
USI420   EQU   *                        STEP TO NEXT OPERAND
         GOIF  D0(R14),JBLANK,EQ=AOP405  ARE WE AT THE END OF OPERAND
         GOIF  D0(R14),JCOMMA,NE=USI600  IS TERMINATOR A COMMA
         L     R2,DWORD1+D4             YES, GET VALUE
         AH    R2,=H'4096'              ADD 4096 FOR SECOND USING
         ST    R2,DWORD1+D4             SAVE NEW VALUE
         B     USI100                   GO GET NEXT REGISTER
USI500   CLC   LHSAVE(2),=H'2'          IS REGISTER ZERO THE FIRST OPRA
         BNE   USI700                   NO,GO LOG ERROR
         XC    DWORD1+D4(L'UVAL),DWORD1+D4 NO, ZERO VALUE
         B     USI120                   GO ENTER ENTRY
USI600   X5ERRL 178,CLMPTR,AOP405       SYNTAX ERROR
USI700   X5ERRL 195,CLMPTR,AOP405       INVALID REGISTER
USI800   X5ERRL 216,CLMPTR,AOP405       ILLEGAL FORMAT
USI900   X5ERRL 217,CLMPTR,AOP405       RELOCATABILITY ERROR
         SPACE 3
    TITLE '&COMPNM&ASMID - ASSEMBLER OPCODE PROCESSOR - ASSEMBLY PHASE -
               - ''DROP'' STATEMENT PROCESSOR'
DROP00   L     R10,OPNADR               GET OPERAND POINTER
         GOIF  OPNPRS,OFF=DRP400        DROP ALL IF OPERAND EMPTY
         CLC   D0(2,R10),=AL1(JCOMMA,JBLANK) IS OPERAND MISSING?
         BE    DRP400                   BRANCH IF YES
         GOIF  D0(R10),JASTER,GT=DRP800 IS OPERAND MISSING?
DRP100   BAL   R6,AOP600                GO EVALUATE OPERAND
         BNZ   DRP700                   EVAL ERRORS OR RELOCATABLE
         CL    R11,=A(HIREG)            IS REGISTER VALID
         BH    DRP700                   NO GO LOG ERROR
         LA    R4,USINGT                POINT TO USING TABLE
         DROP  R6                       ELIMINATE USING THIS REGISTER
         USING UESD,R4                  DEFINE USING FOR TABLE SCAN
DRP200   TM    UREG,X'0F'               IS SCAN COMPLETE       @OX08876
         BO    DRP500                   YES8 REG NOT IN USE    @OX08876
         CH    R11,UREG                 IS THIS REGISTER TO BE DROPPED
         BE    DRP300                   REGISTER FOUND GO DELETE
         LA    R4,USNXT                 STEP TO NEXT ENTRY
         B     DRP200                   CONTINUE SCAN
DRP300   LA    R2,USINGT+USSL*(HIREG+D2)-D1  POINT END OF TABLE
         SR    R2,R4                    GET MOVE LENGTH REMAINDER TABLE
         BNH   DRPABT                   ABORT SOMETHING IS WRONG
         EX    R2,DRPMVC                OVERLAY DROPED REGISTER
DRP350   GOIF  D0(R14),JBLANK,EQ=AOP400 REGISTER(S) DROPPED EXIT
         GOIF  D0(R14),JCOMMA,NE=DRP600 INVALID SYNTAX
         LA    R10,D1(,R14)             POINT TO NEXT OPERAND
         B     DRP100                   GO REPEAT PROCESS
DRP400   XC    USINGT(USSL),USINGT      INITAILIZE USING TABLE
         MVI   USINGT+D6,X'0F'          IND END OF TABLE       @OX08876
         SET   ABSUS,OFF                TURN OFF ABSOLUTE USING SWITCH
         B     AOP400                   GO PRINT AND EXIT
DRP500   X5ERRL 195,CLMPTR,AOP400       INVALID REGISTER
DRP600   X5ERRL 178,CLMPTR,AOP400       SYNTAX ERROR
DRP700   LR    R2,R14                   SAVE TEXT POINTER
         X5ERRL 195,CLMPTR              INVALID REGISTER
         LR    R14,R2                   RESTORE TEXT POINTER
         B     DRP350                   GO CONTINUE SCAN
DRP800   EQU   *
         ST    R10,ERRPTR               SAVE COLUMN PTR
         X5ERRL 216,CLMPTR,AOP400       ILLEGAL OPERAND FORMAT
DRPABT   DC    H'0'
DRPMVC   MVC   UESD(0),USNXT            EXECUTED MVC LENGTH OR-ED IN
         SPACE 3
    TITLE '&COMPNM&ASMID - ASSEMBLER OPCODE PROCESSOR - ASSEMBLY PHASE -
               - ''SPACE'' AND ''EJECT'' STATEMENT PROCESSOR'
SPACE0   GOIF  OPNPRS,OFF=SPC200        GO SPACE 1 IF NO OPERAND
         L     R10,OPNADR               POINT TO OPERAND
         LR    R11,R10                  SAVE OPERAND POINTER
         CLC   D0(2,R11),=AL1(JCOMMA,JBLANK) IS OPERAND MISSING?
         BE    SPC200                   BRANCH IF MISSING
SPC050   CLI   D0(R11),JNUMMAX          IS IT NUMERIC?
         BH    SPC075                   NO,GO CHECK FURTHER
         LA    R11,D1(R11)              SKIP TO NEXT CHARACTER
         B     SPC050                   CONTINUE SCAN
SPC075   CLI   D0(R11),JBLANK           IS IT BLANK?
         BNE   SPCER1                   ERROR IF NOT BLANK
         JCALL EVAL                     GO EVALUATE
         BO    AOP400                   EVAL ERROR EXIT
         BNZ   SPCER1                   OPERAND CANNOT BE RELOCATABLE
         LTR   R11,R11                  IS VALUE ZERO
         BZ    AOP300                   YES, EXIT
         BM    SPCER1                   IF NEGATIVE ERROR
SPC100   LA    R10,CAROUT               GET PRINT INDEX
         B     AOP410                   GO SPACE PRINTER
SPC200   LA    R11,D1                   INDICATE 1 SPACE
         B     SPC100                   EXIT
SPCER1   X5ERRL 242,CLMPTR,AOP400       OPERAND INVALID
         SPACE 3
EJECT0   LNR   R11,R13                  LOAD NEGATIVE VALUE IN REGISTER
         LA    R10,CAROUT               LOAD CARRIAGE CONTROL INDEX
         B     AOP410                   GO EJECT PAGE
         SPACE 3
    TITLE '&COMPNM&ASMID - ASSEMBLER OPCODE PROCESSOR - ASSEMBLY PHASE -
               - ''TITLE'' STATEMENT PROCESSOR'
TITLE0   BAL   R6,AOP500                GO SQUEEZE OUT QUOTE AND AMPSND
         MVI   JTITLE,JBLANK                  BLANK OUT TITLE
         MVC   JTITLE+D1(L'JTITLE-D1),JTITLE  HOLD AREA FOR NEW TITLE
         GOIF  (R11),ZERO=TTL150        NULL OPERAND - BLANK TITLE
         GOIF  TPTEXT,ON=TTL300         FORGET TITLE IF OPERAND ERROR
         CH    R11,H100                 IS TITLE LENGTH GT. 100
         BH    TTL200                   YES, SAVE ONLY 100 CHARACTERS
         BCTR  R11,0                    GET MOVE LENGTH
         EX    R11,TTLMVC               MOVE TITLE
TTL100   GOIF  PSTMT,OFF=AOP310         EXIT IF PRINT OFF
         GOIF  JGEN,OFF=TTL150          BRANCH AROUND IF NOT GENERATED
         GOIF  PGEN,ON=TTL150           BRANCH IF PRINT GEN
         B     AOP310                   EXIT IF PRINT NOGEN
         SPACE
TTL150   LNR   R11,R13                  LOAD NEGATIVE VALUE FOR EJECT
         LA    R10,CAROUT               LOAD CARRIAGE CONTROL FOR EJECT
         JCALL OUTPUT                   CALL PRINT
         SET   TWASLC,ON                SET BUFFER AVAIL. FLAG
         B     AOP300                   EXIT
TTL200   X5ERRL 171,0                   TITLE LENGTH GREATER THAN 100
         MVC   JTITLE,D0(R4)            MOVE ONLY 100 CHARACTERS
         B     TTL100                   GO ESTABLISH PRINT INDEXES
TTL300   SET   TPTEXT,OFF               RESET BAD OPERAND INDICATOR
         B     AOP400                   GO PRINT TITLE STATEMENT
H100     DC    H'100'                   MAX. LENGTH OF TITLE
TTLMVC   MVC   JTITLE(D0),D0(R4)        EXECUTE MOVE OF NEW TITLE
         SPACE 3
    TITLE '&COMPNM&ASMID - ASSEMBLER OPCODE PROCESSOR - ASSEMBLY PHASE -
               - ''MNOTE'' STATEMENT PROCESSOR'
MNOTE0   GOIF  OPNPRS,ON=MNO100         CHECK IF OPERAND PRESENT
         X5ERRL 177,0,AOP400            MISSING OPERAND
MNO050   MVI   LHFLGS,DNTPLH            SET DON'T PRINT LEFTHALF
         GOIF  PSTMT,OFF=MNO075
         GOIF  JLIST,OFF=MNO075
         LA    R10,LSTOUT               GET PRINT INDEX FOR LISTING
         JCALL OUTPUT                   CALL PRINT
MNO075   SET   MNOPRT,OFF               RESET MNOTE FLAG
         B     AOP300                   EXIT
MNO085   GOIF  PSTMT,OFF=MNO075         EXIT IF PRINT OFF
         GOIF  JLIST,OFF=MNO075         EXIT IF NOLIST
         SET   MNOPRT,OFF               ELSE GO EVALUATE FOR PRINT
         LA    R10,MNOOUT               LOAD MNOTE PRINT INDEX
         JCALL OUTPUT                   GO GET BUILD AREA RECORD
         LR    R2,R11                   SAVE PRINT BUFFER POINTER
         MVC   STMTNO(D5,R2),DWORD2     MOVE STATEMENT NUMBER TO PRINT
         LH    R6,JENDCL                END COLUMN
         AR    R6,R11                   POINT TO END OF PRINT BUFFER
         B     MNO135                   GO EVALUATE
MNO100   SET   MNOPRT,ON                INDICATE SCAN OF OPERAND
MNO135   L     R4,OPNADR                GET OPERAND POINTER
         GOIF  D0(R4),JASTER,EQ=MNO800  CHECK MNOTE SEVERITY
         GOIF  D0(R4),JNUMMAX,GT=MNO250 IS SEVERITY NUMERIC
         LR    R10,R4                   YES, SAVE PARAMETER
         JCALL EVAL                     CALL EVALUATION ROUTINE
         BNZ   MNOER1                   GO LOG ERROR
         CH    R11,=H'255'              IS SEVERITY WITHIN RANGE
         BH    MNOER2                   NO, ERROR
MNO150   EX    R11,PRNTLEV              IS MSG TO BE LOGGED (MSGLEVEL)
         BH    MNO200                   NO
         GOIF  MNOPRT,OFF=MNO200        DO NOT LOG ERR IF MSG BUILD ON
         X5ERRL 197,0                   FLAG AS MNOTE ....
         EX    R11,SEVTST               IS SEVERITY HIGHER THAN RECORD
         BNL   MNO200                   NO,DONT SAVE NEW SEVERITY
         STC   R11,JSEVER               YES, SAVE NEW SEVERITY
MNO200   GOIF  MNOPRT,ON=MNO225         IF NO PRINT SKIP MOVE
         LR    R11,R14                  GET MOVE LENGTH
         SR    R11,R4                     LENGTH OF
         LA    R2,D4(,R2)               MNOTE WITH SEVERITY DISPLACEMT
         EX    R11,SEVMOV               MOVE TO PRINT - BY EXECUTE-
         LA    R2,D1(R11,R2)            STEP PRINT BUFFER POINTER
MNO225   GOIF  D0(R14),JCOMMA,NE=MNOER3 ERROR IF NEXT CHAR NOT ,
         LA    R4,D1(,R14)              STEP OVER COMMA
MNO300   GOIF  D0(R4),JQUOTE,NE=MNOER3  NEED A QUOTE NOW
         LA    R4,D1(,R4)               STEP OVER QUPTE
MNO400   GOIF  D0(R4),JQUOTE,EQ=MNO700  ELIMINATE DUPLICATE QUOTES
         GOIF  D0(R4),JAMPER,EQ=MNO750   AND AMPERSANDS
         C    R4,OPNEND                 COMPARE WITH OPERAND END
         BNL   MNO875                   YES CHECK DELIMITER
MNO500   GOIF  MNOPRT,ON=MNO550         NO PRINT OF MNOTE ?
         MVC   MNOALN(D1,R2),D0(R4)     MOVE CHARACTER TO PRINT
         LA    R4,D1(,R4)               STEP TO NEXT CHARACTER
         LA    R2,D1(,R2)               STEP PRINT OUTPUT
         CR    R2,R6                    END OF PRINT BUFFER
         BNL   MNO600                   YES, GO PRINT LINE
         B     MNO400                   NO, CONTINUE SCAN
MNO550   LA    R4,D1(R4)                STEP TO NEXT CHAR
         B     MNO400                   CONTINUE SCAN
MNO250   GOIF  D0(R4),JCOMMA,EQ=MNO275   COMMA ALLOWED
         GOIF  D0(R4),JBLANK,NE=MNO300  ERROR IF NOT BLANK EITHER
         LA    R4,D1(R4)                STEP UP POINTER
         B     MNO250                   SCAN FOR DELIMITER
MNO275   LA    R11,D1                   SET SEVERITY TO ONE
         LR    R14,R4                   POINT R14 AT COMMA (,) ALSO
         B     MNO150                   GO PROCESS SEVERITY
MNO600   GOIF  D0(R4),JQUOTE,EQ=MNO650  IS NEXT CHARACTER A QUOTE
MNO610   GOIF  MNOPRT,ON=MNO400         CONTINUE SCAN IF NOT PRINTED
         LA    R10,MNOOUT               LOAD INDEX FOR PRINT
         MVI   MNOALN(R2),JX            PUT IN CONTINUATION CHAR
         JCALL OUTPUT                   GO GET NEXT LINE BUFFER
         LR    R2,R11                   SAVE PRINT BUFFER POINTER
         LH    R6,JENDCL                END COLUMN
         AR    R6,R11                   POINT TO END OF PRINT BUFFER
         B     MNO400                   CONTINUE SCAN
MNO650   GOIF  D1(R4),JQUOTE,EQ=MNO610  IS QUOTE A TERMINATOR
         B     MNO900                   YES, CHECK DELIMITER
MNO700   GOIF  D1(R4),JQUOTE,NE=MNO900  QUOTE IS AN ENDING TERMINATOR
MNO710   LA    R4,D1(,R4)               NO, ELIMINATE EXTRA
         B     MNO500                   CONTINUE SCAN
MNO750   GOIF  D1(R4),JAMPER,EQ=MNO710,ELSE=MNO500 IS AMPERSAND TWO
MNO800   GOIF  D1(R4),JCOMMA,NE=MNOER3  DOES COMMA FOLLOW ASTERISK
         GOIF  MNOPRT,ON=MNO850         BRANCH AROUND MOVE IF NO PRINT
         MVC   MNOALN(D2,R2),D0(R4)     YES, MOVE BOTH TO PRINT
         LA    R2,D2(,R2)               STEP POINTERS PAST
MNO850   LA    R4,D2(R4)                ASTERISK AND COMMA
         B     MNO300                   CONTINUE OUTPUT
MNO875   BCTR  R4,0                     ADJUST REGISTER FOR DELIM TEST
MNO900   CLI   D1(R4),JBLANK            DO BLANK FOLLOW TERM QUOTE
         BNE   MNOER4                   ERROR IF NOT
         GOIF  MNOPRT,ON=MNO085         BRANCH IF SCAN ONLY
         B     MNO075                   BRANCH IF MESSAGE BUILD DONE
MNOER1   X5ERRL 179,CLMPTR,MNO050       SEVERITY CODE MUST BE ABSOLUTE
MNOER2   X5ERRL 183,CLMPTR,MNO050
         SPACE
MNOER3   ST    R4,ERRPTR                SAVE COLUMN PTR FOR LOGGING
         X5ERRL 178,CLMPTR,MNO050       SYNTAX ERROR - NOT A COMMA
MNOER4   ST  R4,ERRPTR                  SAVE COLUMN POINTER FOR LOGGING
         X5ERRL 185,CLMPTR,MNO050       SYNTAX ERROR NO BLANK
         SPACE
PRNTLEV  CLI   JMSGL,*-*                EXECUTED MSGLEVEL CHECK
SEVTST   CLI   JSEVER,D0                EXECUTE SEVERITY CHECK
SEVMOV   MVC   MNOALN(D0,R2),D0(R4)     EXECUTED SEVERITY MOVE
MNOOUT   EQU   24                       MNOTE PRINT INDEX
STMTNO   EQU   X'23'                    STATEMENT NUMBER DISPLACEMENT
MNOALN   EQU   41                       MNOTE PRINT DISPLACEMENT
         SPACE 3
    TITLE '&COMPNM&ASMID - ASSEMBLER OPCODE PROCESSOR - ASSEMBLY PHASE -
               - ERROR RECORD PROCESSING '
ERROR0   SET   JERRCHK,ON               SET ERROR RECORDS PRESENT
         DROP  R11                      DROP REG. FOR LATER USE
         USING JERRCD,R5                SET UP BASE FOR ERR RECORD
         MVC   JESTMTNO,STMTN+D4-L'JESTMTNO  PUT STATMENT NO. IN ERR RD
         CLI   JERCDE,ERR60             GENERATED END STATEMENT ERROR
         BNE   ERROR1                   NO
         MVC   JESTMTNO,ENDSTMNO+D4-L'JESTMTNO  GET SAVED STATEMENT NO.
         USING JTEXT,R5                 SET UP BASE FOR TEXT RECORD
ERROR1   LH    R10,JOUTFILE             POINT TO ERROR RECORD
         JPUTM FILE=(R10),ADDR=JTEXT    OUTPUT ERROR RECORD
         XC    SYMCNT,SYMCNT            CLEAR SYMBOL COUNT
         B     AOP310                   EXIT
         SPACE 3
         TITLE '&COMPNM&ASMID - ASSEMBLY PHASE - PATCH AREA '
         JPATCH X5A00,15B0              5% PATCH AREA
    TITLE '&COMPNM&ASMID - ASSEMBLY PHASE - ALIGNMENT ROUTINE '
         JCSECT (X5A20)                 DEFINE CSECT
ALIGN    JSAVE BASE=YES                 SAVE REGISTERS
         JENTRY (X5A21=ALIGN)           DEFINE MODULE ENTRY POINT
ALIGN0   L     R1,ELCTR                 GET LOCATION COUNTER
         GOIF  VLIT,ON=ALIGN1           BRANCH AROUND IF ON
         ST    R1,LOCATN                STORE FOR PRINT
ALIGN1   AR    R1,R2                    ADD MAX ALIGN ADJUSTMENT
         LCR   R2,R2                    CREATE MASK TO GET ALIGNED
         BCTR  R2,0                       LOCATION COUNTER
         NR    R2,R1                    DETERMINE ALIGNED VALUE
         S     R2,ELCTR                 GET NUMBER OF PADDING BYTES
         ST    R2,LOCLEN                SAVE FOR LOCATION COUNTER
         ST    R2,FULLWD                SAVE ALIGNMENT
         JCALL LOCUPD                   CALL LOCATION COUNTER UPDATE
ALNEND   JRETURN ,                      EXIT
         JPATCH X5A20,54                5% PATCH AREA
         SPACE 3
         TITLE '&COMPNM&ASMID - ASSEMBLY PHASE - LOCATION COUNTER UPDATE
               E ROUTINE '
         JCSECT (X5A30)                 DEFINE CSECT
LOCUPD   JSAVE BASE=YES                 SAVE REGISTERS
         JENTRY (X5A31=LOCUPD)          DEFINE MODULE ENTRY POINT
         GOIF  LTDECV,ON=LUDEND         EXIT IF LITERAL REFERENCE
         L     R1,ELCTR                 GET LOCATION COUNTER
         A     R1,LOCLEN                ADD LENGTH OF DC
         ST    R1,ELCTR                 SAVE NEW LOCATION
         C     R1,=X'1000000'           IS IT GREATER THAN MAXIMUM?
         BL    LUDEND                   BRANCH IF NOT
         GOIF  WRPFLG,ON=LUDEND         HAS ERROR BEEN LOGGED
         SET   WRPFLG,ON                NO, SET FLAG
         X5ERRL 246,0,LUDEND            LOCATION COUNTER ERROR
LUDEND   JRETURN ,                      EXIT
         SPACE 3
         TITLE '&COMPNM&ASMID - ASSEMBLY PHASE - LOCATION COUNTER UPDATE
               E ROUTINE - PATCH AREA '
         JPATCH X5A30,68                5% PATCH AREA
         SPACE 3
         TITLE '&COMPNM&ASMID - ASSEMBLY PHASE - RLD OUTPUT ROUTINE '
         JCSECT (X5A40)                 DEFINE CSECT
RLDOUT   JSAVE BASE=YES                 SAVE REGISTERS
         JENTRY (X5A41=RLDOUT)          DEFINE MODULE ENTRY POINT
         GOIF  LTDECV,ON=RLDEND         EXIT IF LITERAL REFERENCE
         GOIF  (DSSW,DXDSW),ANY=RLDEND  SKIP RLD IF DS OR DXD
         TM    EESDI,BIT1+BIT2+BIT3     IS THIS IN DSECT OR COMMON
         BNZ   RLDEND                   YES, NO RLD - EXIT
         SR    R4,R4                    ZERO REGISTER
         IC    R4,RELOCTR               GET NUMBER OF RLD'S TO PUT
         GOIF  (R4),NOTPOS=RLDEND       DON'T PUT RLD IF NOT POSITIVE
         LA    R6,RLIST                 POINT TO ESD LIST
RLD100   LH    R10,JOUTFILE             POINT TO OUTPUT FILE
RLD115   LH    R1,D0(R6)                GET RELOCATION ID
         LTR   R1,R1                    IS IT NEGATIVE?
         BNZ   RLD125                   BRANCH AROUND IF NOT ZERO
         LA    R6,D2(R6)                SKIP TO NEXT ESDID
         B     RLD115                   GO TRY AGAIN
         SPACE
RLD125   BNM   RLD150                   NO BRANCH AROUND
         OI    X5VSW,BIT2               SET BIT TO INDICATE NEGATIVE
         LCR   R1,R1                    COMPLEMENT ESDID
         STH   R1,D0(R6)                STORE BACK
         SPACE
RLD150   LR    R2,R1                    SAVE R1
         TM    D0(R6),BIT1+BIT3         IS IT IN A DSECT
         BNZ   RLDER1                   ERRONEOUS RELID
         JPUTL FILE=(R10),BUFREQ=RLDND  GO GET BUFFER
         SET   JRLDCHK,ON               INDICATE RLD PRESENT   @OX11000
         USING RLDIN,R11                ESTABLISH USING
         MVC   RLDIN(D6),=AL1(0,RLDND,0,0,RLDTYPE,0) INITIALIZE RECORD
         MVC   POSID,EESDI              GET POSITION ID
         MVC   RLDFLG,DWORD1            MOVE TYPE TO FLAG
         MVC   RLDVAL,DWORD1+D1         MOVE VALUE TO RECORD
         STH   R2,RELID                 PUT IN RELID
         NI    RELID,D15                MASK OUT HIGH ORDER HALF BYTE
         TM    X5VSW,BIT2               IS ESDID NEGATIVE?
         BNO   RLD200                   NO,BRANCH AROUND
         NI    X5VSW,BITFF-BIT2         TURN OFF BIT2
         OI    RLDFLG,BIT6              INDITATE NEGATIVE RELOCATION
RLD200   LH    R1,DWORD2                GET LENGTH
         BCTR  R1,0                     DECREMENT IT
         SLL   R1,D2                    POSITION IT FOR FLAG BYTE
         EX    R1,RLDORL                OR IN LENGTH-1
         LA    R6,D2(,R6)               STEP TO NEXT ESD
         BCT   R4,RLD100                CONTINUE IF COUNT NOT DEPLETE
RLDEND   JRETURN ,                      EXIT
RLDER1   X5ERRL 158,CLMPTR,RLDEND
RLDORL   OI    RLDFLG,D0                EXECUTE OR OF LENGTH-1
         JPATCH X5A40,F2                5 % PATCH AREA
         SPACE 3
         TITLE '&COMPNM&ASMID - ASSEMBLY PHASE - XREF OUTPUT ROUTINE '
         JCSECT (X5A50)                 DEFINE CSECT
XREF     JSAVE BASE=YES                 SAVE REGISTERS
         JENTRY (X5A51=XREF)            DEFINE ENTRY POINT
         L     R1,SYMXRF                GET NBR SYMBOLS XREF    OX02675
         LA    R1,D1(,R1)                THIS STATEMENT AND ADD 1
         ST    R1,SYMXRF                STORE NEW COUNT         OX02675
         GOIF  (JXREF,JLIST),NOTALL=XRFXIT  BOTH SWITCHES MUST BE ON
         LR    R4,R11                   SAVE REFERENCE DATA POINTER
         SET   JXREFCHK,ON              SET FLAG TO INDICATE XREF MADE
         USING DSECT10,R4               ESTABLISH USING
         USING XRFIN,R11                ESTABLISH USING
         LH    R10,JOUTFILE             POINT TO OUTPUT FILE
         JPUTL FILE=(R10),BUFREQ=XRFND  GET OUTPUT BUFFER
         MVC   XRECLN(D6),=AL2(XRFND,0,XRFTYPE*256)  INITIALISE HEADER
         STC   R2,XRFFLG                INDICATE DUP OR REF
         MVC   XRFSYM,RNAME             MOVE SYMBOL TO XREF RECORD
         MVC   XRFSTM,STMTN+D2          STATEMENT NUMBER TO RECORD
         MVC   XRFLEN,RLNGQ             LENGTH ATTRIBUTE TO RECORD
         MVC   XRFVAL,RLCTR             LOCATION TO RECORD
         LR    R11,R4                   RESTORE INPUT POINTER
XRFXIT   JRETURN ,                      EXIT
         SPACE 3
         TITLE '&COMPNM&ASMID - ASSEMBLY PHASE - XREF OUTPUT ROUTINE - X
               PATCH AREA '
         JPATCH X5A50,7E                5% PATCH AREA
         END
