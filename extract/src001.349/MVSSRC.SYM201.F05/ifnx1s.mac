         MACRO
         BIND  &OP
         ORG   BINDERS+JTM&OP           ORIGIN
         DC    AL1(BIND&OP)                  VALUE
         SPACE
         MEND
         EJECT
         JHEAD 'CONDITIONAL ASSEMBLY POSTFIX ROUTINE',                 X
               PHASEID=X1S,                                            X
               LEVEL=10
*FUNCTION/OPERATION--                                                 *
*   AS THE EDITOR PROCESSES EXPRESSIONS, IT WILL PLACE ALL TERMS IM-  *
*   MEDIATELY INTO THE TEXT, BUT WILL PASS ALL OPERATORS TO POSTER.   *
*   POSTER WILL ENTER OPERATORS INTO AN OPERATOR STACK, RETURNING     *
*   OPERATORS TO THE EDITOR IN PROPER SEQUENCE FOR POSTFIX NOTATION,  *
*   ALSO CALLED REVERSE POLISH, WITHOUT PARENTHESES.                  *
*                                                                     *
*   EACH OPERATOR IS ASSIGNED A BINDING FACTOR.  LOWEST BINDING FACTOR*
*   IS TO BE EVALUATED FIRST.  ALL INCOMING OPERATORS ARE COMPARED    *
*   WITH THE LAST OPERATOR IN THE STACK. IF THE BINDING FACTOR OF     *
*   THE INPUT IS LOWER THAN THAT OF THE STACK, THE NEW ONE IS ADDED   *
*   TO THE STACK. IF EQUAL OR GREATER, THE INPUT IS SAVED AND THE     *
*   LAST STACK ENTRY IS RETURNED.                                     *
*                                                                     *
*   A LEFT PAREN IS ENTERED IMMEDIATELY INTO THE STACK.  A RIGHT PAREN*
*   CAUSES THE STACK TO DUMP TO A LEFT PAREN, AND THE PARENS ARE DIS- *
*   CARDED.  A TERMINATOR HAS HIGHEST BINDING FACTOR, AND CAUSES THE  *
*   ENTIRE STACK TO DUMP.  THE TERMINATOR ITSELF WILL BE THE LAST OP- *
*   ERATOR RETURNED TO THE EDITOR.                                    *
*                                                                     *
*ENTRY POINTS--                                                       *
*        X1S01  =  POSTER01             FUNCTIONAL ENTRY POINT        *
*                                                                     *
*INPUT--                                                              *
*   INPUT IS AN OPERATOR IN REGISTER R10.                             *
*                                                                     *
*OUTPUT--                                                             *
*   NONE                                                              *
*                                                                     *
*EXTERNAL ROUTINES--NONE                                              *
*                                                                     *
*EXITS--                                                              *
*   NORMAL-                                                           *
*        B     D4(,R9)                  TAKE NORMAL EXIT              *
*   ERROR-                                                            *
*        BR    R9                       TAKE ERROR EXIT               *
*                                                                     *
*TABLES/WORK AREAS--                                                  *
*   BINDERS--A TABLE OF BINDING FACTORS OF THE OPERATORS.             *
*                                                                     *
*   STACK--A DYNAMIC OPERATOR STACK CONTAINING ALL OPERATORS NOT YET  *
*   RETURNED TO THE EDITOR.  PUSH DOWN.  TWO BYTES/ENTRY.             *
*                                                                     *
*   TEMP--THE LAST OPERATOR IN AND ITS BINDING FACTOR, UNTIL IT IS PUT*
*   IN THE STACK.                                                     *
*                                                                     *
*   POINTER--POINTS TO NEXT AVAILABLE STACK POSITION.                 *
*                                                                     *
*ATTRIBUTES--                                                         *
*   REFRESHABLE.  ALL DYNAMIC ELEMENTS ARE IN MODULE COMMON POINTED TO*
*   BY R7.
*                                                                     *
*NOTES--                                                              *
*                                                                     *
         EJECT
         COPY  JCOMMON
         EJECT
         COPY  JTMTXT
         EJECT
         COPY  EDSECT
         EJECT
STACKREC DSECT ,                        STACK ELEMENT SNAPSHOT
LAST     DS    0H                       LAST STACK ENTRY
LASTOP   DS    C                             OPERATOR
LASTBIND DS    C                             BINDING FACTOR
NEXT     DS    0H                       NEXT STACK ENTRY
NEXTOP   DS    C                             OPERATOR
NEXTBIND DS    C                             BINDING FACTOR
         SPACE
TEXTPTR  DSECT
TEXT     DS    C                        CURRENT TEXT POINTER
TEXTNEXT DS    C                        NEXT AVAILABLE TEXT POSITION
         EJECT
         JCSECT (X1S00)
         JMODID
         SPACE 3
*        REGISTERS
         SPACE
RLAST    EQU   R3                       POINTS TO LAST STACK ELEMENT
OP       EQU   R10                      INPUT OPERATOR
FACTOR   EQU   R15                      BINDING FACTOR WORK REGISTER
MODCOMM  EQU   R2                       BASE FOR PHASE COMMON
         SPACE
*        OTHER VALUES
         SPACE
ASTACK   EQU   ALAST                   ALAST IS IN EDSECT
D70      EQU   70                      LENGTH OF OPERATOR STACK - 2
         SPACE 3
POSTER01 EQU   *                        INITIALIZATION ENTRY
         SPACE
         JENTRY (X1S01=POSTER01)
         SPACE
         USING POSTER01,R12
         L     RLAST,SVLAST             PICK UP STACK POINTER
         USING STACKREC,RLAST             AND DECLARE AS BASE.
         STC   OP,TEMPOP                SAVE THE OPERATOR
         SPACE
POSTER12 EQU   *
         SPACE
         IC    FACTOR,BINDERS(OP)       LOAD REGISTER WITH BINDING     X
                                          FACTOR CORRESPONDING TO INPUT
         STC   FACTOR,TEMPBIND          SAVE THE BINDING FACTOR
         SPACE
POSTER14 EQU   *
         SPACE
         GOIF  TEMPOP,JTMLPAR,EQ=POSTER40   PUT IN STACK IF LEFT PAREN
         GOIF  TEMPBIND,BINDPLUS,EQ=POSTER40      PUT IN STACK IF UNARY
         GOIF  TEMPOP,JTMSCM,EQ=POSTER50 PUT IN TEXT IF START CHARACTERX
                                          MODE.
         GOIF  TEMPOP,JTMECM,EQ=POSTER50    LIKEWISE IF END CHARACTER  X
                                            MODE
POSTER20 GOIF  (RLAST),ALAST,LOW=POSTER40  GO ENTER NEW OP IF          X
                                                  THE STACK IS EMPTY.
         GOIF  TEMPBIND,LASTBIND,LOW=POSTER40     ENTER THE NEW OP IF  X
                                                  ITS BINDING FACTOR   X
                                                  IS LOW.
         SPACE
POSTER22 EQU   *                        ONE FROM STACK TO TEXT.
         SPACE
         USING TEXTPTR,R4               TEXT BASED ON REG 4
         MVC   TEXT,LASTOP              MOVE OPERATOR TO TEXT
         LA    R4,TEXTNEXT              NEXT TEXT POSITION
         SH    RLAST,=H'2'              REMOVE ONE ELEMENT FROM STACK
         B     POSTER20                 LOOP THE LOOP
         SPACE 3
POSTER50 EQU   *
         SPACE
         MVC   TEXT,TEMPOP
         B     POSTER66                 GO TO EXIT SEQUENCE
         SPACE
POSTER40 EQU   *
         LA    OP,STACK+D70             GET PTR TO LAST STACK SLOT
         CR    OP,RLAST                 SEE IF STACK OVERFLOW OCCURS
         BNHR  R9                       TAKE ERROR EXIT OF SO
         MVC   NEXT,TEMP                MOVE OP AND BINDER TO STACK AND
         LA    RLAST,NEXT                 UPDATE POINTER.
         SPACE
POSTER60 EQU   *
         SPACE
         GOIF  TEMPOP,JTMRPAR,EQ=POSTER70    IF RIGHT PAREN, REMOVE IT X
                                             AND LEFT PAREN FROM STACK
POSTER64 GOIF  TEMPOP,JTMCOM,EQ=POSTER72     COMMA, BRANCH
         GOIF  TEMPOP,JTMPER,NE=POSTER90  EXIT IF LAST OP NOT PERIOD
         MVI   TEXT,JTMPER              ELSE PUT A PERIOD IN THE TEXT
POSTER65 SH    RLAST,=H'2'              REMOVE TERM FROM STACK
POSTER66 LA    R4,TEXTNEXT              ADJUST TEXT OUTPUT POINTER
         SPACE
POSTER90 ST    RLAST,SVLAST             SAVE THE STACK POINTER
         SPACE
POSTER99 B     D4(,R9)                  NO ERROR TO LOG, NORMAL EXIT
         SPACE
POSTER70 SH    RLAST,=H'4'              REMOVE LPAREN AND RPAREN
         GOIF  LASTOP,JTMDIM,EQ=POSTER71     BRANCH IF DIMENSION
         GOIF  LASTOP,JTMDIM3,NE=POSTER90    EXIT IF NO DIMENSION
POSTER71 MVC   TEXT,LASTOP              MOVE DIMENSION TO TEXT
         B     POSTER65                 GO TO EXIT SEQUENCE
         SPACE
POSTER72 SH    RLAST,=H'4'              REMOVE L AND RPAREN
         GOIF  LASTOP,JTMDIM,NE=POSTER74  BRANCH IF NOT DIMENSION
         MVI   TEXT,JTMDIM2             SYSLIST(N) TO TEXT
         LA    R4,TEXTNEXT              UPDATE TEXT POINTER
         MVI   LASTOP,JTMDIM3           CHANGE DIMENSION OP IN STACK
POSTER74 AH    RLAST,=H'2'              PUT LPAREN BACK IN STACK
         B     POSTER90                 AND EXIT.
         DROP  R4
         SPACE
         EJECT
*        CONSTANTS, TABLES, EQUATES
         SPACE
*        BINDING FACTORS
         SPACE
BINDDIM  EQU   0                        DIMENSION OPERATOR
BINDSTR  EQU   BINDDIM+1                STRING OPERATOR
BINDDUP  EQU   BINDSTR+1                DUPLICATION OPERATOR
BINDPER  EQU   BINDDUP+1                PERIOD--CONCATENATOR
BINDPLUS EQU   BINDPER+1                UNARY PLUS
BINDMIN  EQU   BINDPLUS                 UNARY MINUS
BINDTAT  EQU   BINDPLUS                 TYPE ATTRIBUTE
BINDLAT  EQU   BINDPLUS                 LENGTH ATTRIBUTE
BINDSAT  EQU   BINDPLUS                 SCALE ATTRIBUTE
BINDIAT  EQU   BINDPLUS                 INTEGER ATTRIBUTE
BINDKAT  EQU   BINDPLUS                 COUNT ATTRIBUTE
BINDNAT  EQU   BINDPLUS                 NUMBER ATTRIBUTE
BINDMULT EQU   BINDPLUS+1               MULTIPLY
BINDDIV  EQU   BINDMULT                 DIVIDE
BINDADD  EQU   BINDMULT+1               ADD
BINDSUB  EQU   BINDADD                  SUBTRACT
BINDGT   EQU   BINDADD+1                GREATER THAN
BINDGE   EQU   BINDGT                   GREATER OR EQUAL
BINDLT   EQU   BINDGT                   LESS THAN
BINDLE   EQU   BINDGT                   LESS OR EQUAL
BINDEQ   EQU   BINDGT                   EQUAL
BINDNE   EQU   BINDGT                   NOT EQUAL
BINDNOT  EQU   BINDGT+1                 NOT
BINDAND  EQU   BINDNOT+1                AND
BINDOR   EQU   BINDAND+1                OR
BINDRPAR EQU   BINDOR+1                 RIGHT PAREN
BINDECM  EQU   BINDRPAR                 END CHARACTER MODE
BINDCOM  EQU   BINDRPAR                 COMMA
BINDLPAR EQU   BINDRPAR+1               LEFT PAREN
BINDSCM  EQU   BINDLPAR                 START CHARACTER MODE
BINDSTRM EQU   BINDLPAR+1               STATEMENT TERMINATOR
HIBIND   EQU   BINDSTRM                 HIGHEST BINDING FACTOR
         SPACE
BINDERS  EQU   *                        NAME THE TABLE,
         SPACE
         BIND  DIM                      DIMENSION
         BIND  STR                      SUB STRING
         BIND  DUP                      DUPLICATION
         BIND  PER                      CONCATENATION
         BIND  PLUS                     UNARY PLUS
         BIND  MIN                      UNARY MINUS
         BIND  MULT                     MULTIPLY
         BIND  DIV                      DIVIDE
         BIND  ADD                      ADD
         BIND  SUB                      SUBTRACT
         BIND  GT                       GREATER THAN
         BIND  GE                       GREATER OR EQUAL
         BIND  LT                       LESS THAN
         BIND  LE                       LESS OR EQUAL
         BIND  EQ                       EQUAL
         BIND  NE                       NOT EQUAL
         BIND  NOT                      NOT
         BIND  AND                      AND
         BIND  OR                       OR
         BIND  RPAR                     RIGHT PAREN
         BIND  ECM                      END CHARACTER MODE
         BIND  COM                      COMMA
         BIND  LPAR                     LEFT PAREN
         BIND  SCM                      START CHARACTER MODE
         BIND  STRM                     STATEMENT TERMINATOR
         BIND  TAT                      TYPE ATTRIBUTE
         BIND  LAT                      LENGTH ATTRIBUTE
         BIND  SAT                      SCALE ATTRIBUTE
         BIND  IAT                      INTEGER ATTRIBUTE
         BIND  KAT                      COUNT ATTRIBUTE
         BIND  NAT                      NUMBER ATTRIBUTE
         SPACE
         JPATCH X1S00,12C               X1S PATCH AREA
         SPACE
         END
