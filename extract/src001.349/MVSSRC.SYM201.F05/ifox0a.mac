         MACRO
         JPHASE &PHASE=,&PHSUFF=,&BUF=,&DBLBUF=
         LCLA  &A,&B
         LCLC  &C
         AIF   (K'&PHSUFF EQ 0).NX10
&C       SETC  '&PHSUFF'(2,2)
PHASE&C  DC    C'&PHSUFF'                 PHASE SUFFIX
         AIF   ('&PHSUFF'(2,1) EQ '0').EXIT
&A       SETA  &BUF(1)+&BUF(2)+&BUF(3)  COUNT NUMBER OF SINGLE BUFFERS
&B       SETA  &DBLBUF(1)+&DBLBUF(2)+&DBLBUF(3)+&A TOTAL BUFFERS
         DC    X'&A&B'                      NO. OF BUF IF SINGLE,DOUBLE
         AIF   (&B EQ 0).EXIT
         DC    B'&BUF(1)&DBLBUF(1).000000'  FILE1
         DC    B'&BUF(2)&DBLBUF(2).000000'  FILE2
         DC    B'&BUF(3)&DBLBUF(3).000000'  FILE3
         MEXIT
.NX10    ANOP
&C       SETC  '&PHASE'(5,2)
PHASE&C  DC    CL8'&PHASE'                LOAD NAME
.EXIT    MEND
         SPACE 3
         GBLC  &COMPNM,&ASMID           GLOBAL VARIABLES
         SPACE 5
         JHEAD 'ASSEMBLER DRIVER - PROLOG',                            X
               PHASEID=X0A,                                            X
               LEVEL=21                                        @AX14179
*                                                                     *
*FUNCTION/OPERATION-                                                  *
*   THIS MODULE IS THE DRIVER FOR THE ASSEMBLER.  THIS MODULE TREATS  *
*   ALL OTHER PHASES AS SUBROUTINES.                                  *
*                                                                     *
*ENTRY POINT-                                                         *
*        START - ENTERED BY SYSTEM.                                   *
*                                                                     *
*INPUT-                                                               *
*   REGISTER R1 POINTS TO PARAMETER LIST (EXEC CARD).                 *
*                                                                     *
*OUTPUT-                                                              *
*   RETURN CODE IN REGISTER R15.                                      *
*                                                                     *
*EXTERNAL ROUTINES-                                                   *
*   ALL OTHER PHASES OF THE ASSEMBLER                                 *
*                                                                     *
*EXITS, NORMAL-                                                       *
*   RETURN TO SYSTEM                                                  *
*                                                                     *
*EXITS, ERROR-                                                        *
*   N/A                                                               *
*                                                                     *
*TABLE/WORK AREAS-                                                    *
*   COMMON - LOADED BY THIS PHASE.                                    *
*                                                                     *
*ATTRIBUTES-                                                          *
*   REFRESHABLE.                                                      *
*                                                                     *
*NOTES-                                                               *
         SPACE 5
         TITLE '&COMPNM&ASMID - ASSEMBLER DRIVER - JCOMMON COPY CODE'
         COPY  JCOMMON                  JCOMMON COPY CODE
         TITLE '&COMPNM&ASMID - ASSEMBLER DRIVER - JFLEBLK COPY CODE'
         COPY  JFLEBLK                  JFLEBLK COPY CODE
         SPACE 3
         TITLE '&COMPNM&ASMID - ASSEMBLER DRIVER - EQUATES'
MINBUF   EQU   2+788                    2 BYTE HEADER + LONGEST LOG REC
PHAS1    EQU   C'1'                     PHAS1 SUFFIX
PCPREQ   EQU   8192                     MFT SYSTEM REQUIREMENT  OX01003
MVTREQ   EQU   8192                     MVT SYSTEM REQUIREMENTS OX01003
CVTADDR  EQU   X'10'                    LOCATION OF CVT ADDRESS
CVTDCB   EQU   X'74'                    DISP INTO CVT FOR SYSTEM CONFIG
MVT      EQU   X'10'                   BIT IN CVTDCB THAT INDICATES MVT
         SPACE 5
         TITLE '&COMPNM&ASMID - ASSEMBLER DRIVER'
         JCSECT (X0A00)                 SECTION NAME
* VS1 RELEASE 2.6 CHANGES
*C122400-122600                                                 OX01003
*C046000                                                       @OZ01709
*C046000                                                       @OX07280
*C670000                                                       @OX07284
*C046000                                                       OX09734
*C046000                                                       @AX14179
*A510500-511960,512500-513800,572500-574799,488500-491900      @AZ13738
*C421000,670000                                                @AZ13738
*A420500                                                       @AX19340
MODID    JMODID                         EMBEDDED IDENTIFIER
         JEXTRN (X0B01=MLC)             WORKFILE I/O MODULE
START    SAVE  (14,12)                  SAVE REGISTERS
         JENTRY (X0A01=START)
         LR    R8,R15                   SET BASE REGISTER
         USING START,R8                 ''
         LR    R2,R1                    SAVE PARM POINTER
         SPACE
         LOAD  EPLOC=PHASE01            LOAD COMMON
         LR    R12,R0                   LOAD R12 FROM R0
         ST    R13,D4(,R12)             CHAIN SAVE AREAS
         ST    R12,D8(,R13)             ''
         LR    R13,R12                  SET R13 TO COMMON
         MVC   JPHNAME,PHASE01          SAVE PREFIX OF PHASE
         LA    R6,LDPHASE               GET ADDR OF LOAD ROUTINE
         LA    R7,DLPHASE               GET ADDR OF DELETE ROUTINE
         SPACE 2
         MVC   JMLC,=A(MLC)             ADDR OF WORKFILE I/O PACKAGE
         MVC   JAABORT,=A(ABORT)        ADDRESS OF ABORT ROUTINE
         SPACE 2
         LA    R5,PHASE02               LOAD INITIALIZATION
         BALR  R9,R6                    ''
         L     R10,AMODID               PASS MODID ADDR TO INIT
         LR    R11,R2                   PASS PARM FIELD POINTER
         BALR  R9,R12                   GO TO INIT
         SPACE
         BALR  R9,R7                    DELETE INITIALIZATION
         SPACE
         L     R1,JSYSOPEN              OPEN WORKFILES
         OPEN  MF=(E,(1))               ''
         SPACE 2
         LA    R5,PHASE03               LOAD INPUT COMMON
         BALR  R9,R6                    ''
         ST    R12,JADINCM              SAVE ADDRESS OF INPUT COMMON
         SPACE
         LA    R5,PHASE04               LOAD INPUT PACKAGE
         BALR  R9,R6                    ''
         ST    R12,JINMLC               SAVE INPUT MLC ADDRESS
         LR    R11,R2                   PASS PARM FIELD POINTER
         BAL   R9,JININIT(,R12)         GO TO INPUT INIT
         SPACE 2
         LA    R5,PHASE11               LOAD EDITOR
         BALR  R9,R6                    ''
         BALR  R9,R12                   GO TO EDITOR
         SPACE 2
         L     R12,JINMLC               GO TO INPUT INIT TO CLOSE FILES
         BAL   R9,JININIT(,R12)         ''
         SPACE
         BALR  R9,R7                    DELETE EDITOR
         SPACE
         LA    R5,PHASE04               DELETE INPUT PACKAGE
         BALR  R9,R7                    ''
         SPACE 2
         LA    R5,PHASE03               DELETE INPUT COMMON
         BALR  R9,R7                    ''
         SPACE 2
         LA    R5,PHASE21               LOAD DICT. RES.
         BALR  R9,R6                    ''
         BALR  R9,R12                   GO TO DICT. RES.
         SPACE
         BALR  R9,R7                    DELETE DICT. INTERLUDE
         SPACE
         LA    R5,PHASE31               LOAD GENERATOR
         BALR  R9,R6                    ''
         BALR  R9,R12                   GO TO GENERATOR
         SPACE
         BALR  R9,R7                    DELETE GENERATOR
         SPACE
         LA    R5,PHASE05               LOAD OUTPUT COMMON
         BALR  R9,R6                    ''
         ST    R12,JADOUTCM             SAVE ADDRESS OF OUTPUT COMMON
         SPACE 2
         LA    R5,PHASE06               LOAD OUTPUT PACKAGE
         BALR  R9,R6                    ''
         ST    R12,JOUTMLC              SAVE OUTPUT MLC ADDRESS
         LR    R11,R2                   PASS PARM FIELD POINTER
         BAL   R9,JOUTINIT(,R12)        GO TO OUTPUT INIT
         SPACE 3
         GOIF  JSYSGEN,OFF=SKIPX4       SKIP X4 IF JSYSGEN OFF
         LA    R5,PHASE41               LOAD SYMBOL RES (NO SYM CARDS)
         GOIF  JTEST,OFF=NOTEST         NO SYM CARDS WANTED
         GOIF  (JDECK,JLINK),NONE=NOTEST     FRUSTRATE SYM OUTPUT
         LA    R5,PHASE42               LOAD SYMBOL RES (SYM CARDS)
NOTEST   BALR  R9,R6                    ''
         BALR  R9,R12                   GO TO SYMBOL RES.
         SPACE
         BALR  R9,R7                    DELETE SYMBOL RES.
         SPACE
SKIPX4   LA    R5,PHASE51               LOAD OUTPUT LISTER
         BALR  R9,R6                    ''
         BALR  R9,R12                   GO TO OUTPUT LISTER
         SPACE
         BALR  R9,R7                    DELETE ASSEMBLER
         SPACE
         LA    R5,PHASE61               LOAD RLD & XREF PROCESSOR
         BALR  R9,R6                    ''
         BALR  R9,R12                   GO TO LISTER
         SPACE 2
         BALR  R9,R7                    DELETE RLD & XREF PROCESSOR
         LA    R5,PHASE62               LOAD DIAGNOSTIC PHASE
         BALR  R9,R6                    ''
         BALR  R9,R12                   GO TO DIAGNOSTIC PHASE
         LR    R2,R10                   SAVE RETURN CODE
         SPACE
         BALR  R9,R7                    DELETE DIAGNOSTIC PHASE
         SPACE
         L     R12,JOUTMLC              GO TO OUT INIT TO CLOSE FILES
         BAL   R9,JOUTINIT(,R12)        ''
         SPACE 2
         LA    R5,PHASE06               DELETE OUTPUT PACKAGE
         BALR  R9,R7                    ''
         SPACE 2
         LA    R5,PHASE05               DELETE OUTPUT COMMON
         BALR  R9,R7                    ''
         SPACE 2
         L     R1,JSYSCLOS              CLOSE WORKFILES
         CLOSE MF=(E,(1))               ''
         SPACE 2
         L     R1,JPARMPTR              FREE TRANSLATED PARM AREA
         LTR   R1,R1                    HAS AREA BEEN FREED BY INIT
         BZ    FREED                    YES.  ALREADY FREED
         LH    R0,D0(,R1)               GET LENGTH OF AREA
         FREEMAIN R,LV=(0),A=(1)        FREE CORE
         SPACE 2
FREED    L     R13,D4(,R13)             PT TO SAVE AREA
         DELETE EPLOC=PHASE01           DELETE COMMON
         SPACE 2
         LR    R15,R2                   LOAD RETURN CODE
         RETURN (14,12),RC=(15)         RETURN TO CALLER
         SPACE 3
         TITLE '&COMPNM&ASMID - ASSEMBLER DRIVER - PHASE LOAD ROUTINE'
*        THIS ROUTINE LOADS THE PHASE WHOSE NAME IS POINTED TO BY R5. *
*   IT RETURNS WITH THE ENTRY POINT ADDRESS IN R12.                   *
         SPACE 3
LDPHASE  JSAVE BASE=NO                  SAVE REGISTERS
         SPACE
         MVC   JPHSUFF,D0(R5)           BUILD COMPLETE PHASE NAME
         LOAD  EPLOC=JPHNAME            LOAD PHASE
         SPACE
         LR    R2,R0                    SAVE ENTRY POINT
         CLI   JPHSUFF+D1,PHAS1         WAS SYS IND PHASE LOADED
         BL    LD50                     NO, RETURN
         L     R3,=A(PCPREQ)            PCP MFT REQUIREMENT
         L     R1,CVTADDR               GET ADDR OF CVT
         TM    CVTDCB(R1),MVT           IS SYSTEM MVT
         BZ    GETREQ                   NO, GET PCP REQUIREMENT
         LA    R3,MVTREQ-PCPREQ(,R3)    MVT REQUIREMENTS
GETREQ   GETMAIN R,LV=(R3)              GET CORE FOR RETURN TO SYSTEM
         SPACE
         LR    R10,R1                   SAVE CORE ADDRESS
         MVC   JEOS,CORESIZE            GET REQ CORESIZE       @AX19340
         MVC   JBOS(D4),MINCORE         GET MIN CORE VALUE     @AZ13738
         GETMAIN VU,LA=JBOS,A=JBOS,SP=0,HIARCHY=0,MF=(E,JDWORD)        X
                                        GET ALL THE CORE WE CAN
         SPACE
         LR    R1,R10                   PT TO AREA THAT IS TO BE FREED
         FREEMAIN R,LV=(R3),A=(1)       FREE CORE THAT SYSTEMS NEED
         SPACE
         LM    R14,R15,JBOS             LD ADDR OF CORE & LENGTH
         AR    R14,R15                  CALC END OF CORE ADDR
         ST    R14,JEOS                 SAVE IN JEOS
         ST    R15,JSLEN                SAVE LENGTH OF AREA (JEOS-JBOS)
         CLC   JPHSUFF,PHASE11          IS THIS THE EDITOR
         BNE   LD30                     NO, GO ALLOC BUFFERS
         SR    R14,R14                  DIVIDE AVAILABLE BUFFER SPACE
         D     R14,=F'8'                TAKE 37.5 PERCENT AND
         LR    R14,R15                  DIVIDE BY THREE BUFFERS
         GOIF  JMINBUF,ON=LD22          MIN BUFFER ALLOC REQUIRED
         MH    R15,=H'10'               IS AVAILABLE SPACE 60 PERCENT
         SRA   R15,D5                   (16/10) LARGER THAN JMAXRL
         SPACE
         CH    R15,JMAXRL               ''
         BNH   LD10                     NO, SINGLE BUFFER
         SET   JDBLALL,ON               YES, DOUBLE BUFFER AND ALLOW
         SRA   R14,D1                     HALF THE BUFFER SIZE
LD10     CH    R14,JMAXRL               IF SIZE OF EACH BUFFER IS GT
         BNH   LD20                       MAXRL, THEN SET SIZE TO MAXRL
         LH    R14,JMAXRL                 ''
LD20     SH    R14,=H'2'                TRUNCATE RL TO A MULTIPLE OF
         N     R14,=X'FFFFFFFC'           FW + 2 BYTES
         LA    R14,D2(,R14)               ''
         CH    R14,=Y(MINBUF)           BUFFER SIZE MUST BE LARGE
         BNL   LD25                       ENOUGH TO CONTAIN THE
LD22     LH    R14,=Y(MINBUF)             LONGEST POSSIBLE LOGICAL REC.
LD25     STH   R14,JMAXRL               SAVE NEW MAXRL
         STH   R14,JFLEBLK1+JRL-JFLEBLK SET FILE1 RL
         STH   R14,JFLEBLK2+JRL-JFLEBLK SET FILE2 RL
         STH   R14,JFLEBLK3+JRL-JFLEBLK SET FILE3 RL
         GOIF  JMBUF,OFF=LD30           BR IF NO MBUF REQ      @AZ13738
         GOIF  JDBLALL,OFF=LD30         BR IF SINGEL BUFFERS   @AZ13738
         L     R15,JSLEN                GET LENGH OF AREA      @AZ13738
         SRA   R15,D3                   GET 37,5 PERCENT       @AZ13738
         M     R14,=F'3'                OF WORK AREA.          @AZ13738
         LH    R11,JMAXRL               GET USABEL REC LENGH   @AZ13738
         DR    R14,R11                  GET MAX NR OF BUFFERS  @AZ13738
         IC    R11,PHASE31+D3           GET MIN NR OF DBLBUFS  @AZ13738
         N     R11,=X'0000000F'         MASK OUT THE REST      @AZ13738
         SR    R15,R11                  GET NR OF MULTIPLE BUFS@AZ13738
         BNP   LD30                     BR IF NO MBUFS         @AZ13738
         STH   R15,NRMBUF               SAVE VALUE             @AZ13738
LD30     LA    R5,D3(,R5)               ADVANCE PHASE NAME PTR TO PARM
         IC    R15,D0(,R5)              PICK UP NUMBER OF SINGLE AND   X
                                          DOUBLE BUFFERS FOR FILE
         GOIF  JDBLALL,ON=LD40          FILES CAN BE DOUBLEED BUFFERED
         SPACE
         SRL   R15,D4                   LEFT HALF OF BYTE IS NO. OF    X
                                          SINGLE BUFFERS. RT NO. OF DBL
LD40     N     R15,=X'0000000F'         MASK OUT REST OF REGISTER
         BZ    LD50                     BRANCH IF NO BUFFERS WANTED
         LH    R3,JMAXRL                GET MAXRL, BUMP TO A MULTIPLE
         LA    R3,D2(,R3)                 OF FW (2 BYTES WASTED), AND
         USING JFLEBLK,R11              ADDRABIL TO FILES      @AZ13738
         LA    R11,JFLEBLK1             PT TO FILE 1           @AZ13738
         SET   JMLTBUF,OFF              RESET MBUF SW          @AZ13738
         LA    R11,JFLEBLK2             PT TO FILE 2           @AZ13738
         SET   JMLTBUF,OFF              RESET MBUF SW          @AZ13738
         LA    R11,JFLEBLK3             PT TO FILE 3           @AZ13738
         SET   JMLTBUF,OFF              RESET MBUF SW          @AZ13738
         DROP  R11                      DROP ADDRABIL TO FILES @AZ13738
         CLC   JPHSUFF,PHASE31          IS PHASE X31 LOADED    @AZ13738
         BNE   LD42                     BR IF NOT PHASE X31    @AZ13738
         GOIF  JMBUF,OFF=LD42           BR IF NOT MBUF REQ.    @AZ13738
         LH    R10,NRMBUF              LOAD NR OF MBUFFERS     @AZ13738
         CH    R10,=H'2'                TEST FOR NR OF-        @AZ13738
         BL    LD42                     MULTIBUFFERS ARE-      @AZ13738
         CH    R10,=H'15'               WITHIN 2 AND 15-       @AZ13738
         BNH   LD41                     AND BR IF SO OR-       @AZ13738
         LA    R10,15                   SET MAXIMUM NR.        @AZ13738
         STH   R10,NRMBUF               SAVE NEW VALUE         @AZ13738
LD41     EQU   *                        PROCEED                @AZ13738
         BCTR  R10,0                    SUBTRACT BY ONE        @AZ13738
         AR    R15,R10                  ADD TO TOTAL NR OF BUFS@AZ13738
         LA    R11,JFLEBLK1             PT TO FILE 1           @AZ13738
         USING JFLEBLK,R11              ADDRESSABILITY TO FILE1@AZ13738
         SET   JMLTBUF,ON               IND MULTIBUFFERS REQ.  @AZ13738
LD42     EQU   *                        PROCEED                @AZ13738
         MR    R14,R3                     MULTIPLY BY NUMBER OF BUFFERS
         GOIF  JMLTBUF,OFF=LD44         BR IF NOT NBUF REQ.    @AZ13738
         DROP  R11                      DROP ADDR              @AZ13738
         LA    R10,BUFENLN              LOAD LENGH OF ENTRY    @AZ13738
         MH    R10,NRMBUF               GET TOTAL SPACE        @AZ13738
         AR    R15,R10                  ADD TO PREV. SPACE     @AZ13738
LD44     EQU   *                        PROCEED                @AZ13738
         LA    R10,D7(,R15)             CONVERT VALUE TO NUMBER OF DW
         SRL   R10,D3                     (GREATER THAN ORIGINAL VALUE)
         JGETCORE DBL=(R10)             ALLOCATE MEMORY
         SPACE
         LA    R10,D2(,R10)             PT TO HW BOUNDRY
         LA    R11,JFLEBLK1             PT TO FILE1 BLOCK
         BAL   R9,ALLOCBUF              GO ALLOC BUF FOR FILE1
         LA    R11,JFLEBLK2             PT TO FILE2 BLOCK
         BAL   R9,ALLOCBUF              GO ALLOC BUF FOR FILE2
         LA    R11,JFLEBLK3             PT TO FILE3 BLOCK
         BAL   R9,ALLOCBUF              GO ALLOC BUF FOR FILE3
LD50     LR    R12,R2                   LOAD ENTRY POINT INTO R12
LDRTN    JRETURN                        RETURN
         SPACE 2
         TITLE '&COMPNM&ASMID - ASSEMBLER DRIVER - PHASE DELETION AND BX
               UFFER ALLOCATION ROUTINES'
*        THIS ROUTINE DELETE THE PHASE WHOSE NAME IS POINTED TO BY R5.
         SPACE
DLPHASE  MVC   JPHSUFF,D0(R5)           BUILD PHASE NAME TO BE DELETED
         DELETE EPLOC=JPHNAME           DELETE PHASE
         SPACE
         CLI   JPHSUFF+D1,PHAS1         IS IT A SYS IND PHASE
         BLR   R9                       NO, RETURN
         LM    R0,R1,JSLEN              GET LENGTH AND ADDR OF AREA
         FREEMAIN R,LV=(0),A=(1)        FREE CORE
         SPACE
         XC    JSLEN,JSLEN              INDICATE NO CORE FOR ABORT
         BR    R9                       RETURN
         SPACE 5
*        THIS ROUTINE ALLOCATES BUFFERS FOR A FILE.
*   R5 POINTS TO PARAMETER BYTE.  R11 POINTS TO JFLEBLK.
         SPACE
         USING JFLEBLK,R11              ADDRESSABILITY TO JFLEBLK
ALLOCBUF SET   JDBLBUF,OFF              TURN OFF JDBLBUF FOR FILE
         SPACE
         LA    R5,D1(,R5)               PT TO PARM BYTE FOR FILE
         GOIF  JMLTBUF,OFF=ALLOC10      BR IF NOT MBUF REQ.    @AZ13738
         LH    R15,NRMBUF               LOAD NR OF MBUFFERS    @AZ13738
         SR    R12,R12                  CLEAR REGISTER         @AZ13738
         ST    R10,LOWPRIOR             LOWPRIOR ADDR          @AZ13738
         LA    R14,1                    SET LOWPRIOR VALUE     @AZ13738
ALLOC5   XC    FWBUFPTR(BUFENLN,R10),FWBUFPTR(R10) CLEAN ENTRY @AZ13738
         ST    R12,FWBUFPTR(R10)        SET FOWARD CHAIN       @AZ13738
         LR    R12,R10                  SAVE ENTRY ADDR        @AZ13738
         ST    R10,BUFSTART             SAVE END OF TABEL      @AZ13738
         LA    R10,BUFENLN(R10)         ADD WITH ENTRY LENGH   @AZ13738
         ST    R10,BUFADR(R12)          SET ADDR TO BUFFER     @AZ13738
         AR    R10,R3                   ADD LENGH OF BUFFER    @AZ13738
         STH   R14,PRIOR(R12)           SET PRIORITY TO BUF    @AZ13738
         SLL   R14,1                    INCREASE PRIORITY      @AZ13738
         BCT   R15,ALLOC5               BR IF MORE BUFFERS     @AZ13738
         SRL   R14,1                    REPOS PRIORITY         @AZ13738
         STH   R14,HIMASK               SAVE HIGEST PRIORITY   @AZ13738
         L     R12,LOWPRIOR             LOAD LAST ENTRY        @AZ13738
         L     R15,BUFADR(R12)          LOAD THIS BUF ADDR     @AZ13738
         ST    R15,JBUF                 INIT JFLE BUF PTR      @AZ13738
         BR    R9                       RETURN                 @AZ13738
ALLOC10  EQU   *                        PROCEED                @AZ13738
         TM    D0(R5),BIT0              DO ANY BUFFERS NEED ALLOC
         BZR   R9                       NO, RETURN
         ST    R10,JBUF                 STORE ADDRESS OF PRIMARY BUFFER
         AR    R10,R3                   BUMP PTR BY (MAXRL + 2)
         GOIF  JDBLALL,OFF=(R9)         NO FILES ARE DOUBLED BUFFERED
         SPACE
         TM    D0(R5),BIT1              DO ANY ALT BUF NEED ALLOC
         BZR   R9                       NO, RETURN
         SET   JDBLBUF,ON               SET JDBLBUF ON FOR FILE
         SPACE
         ST    R10,JBUFFER              STORE ADDRESS OF ALT BUFFER
         AR    R10,R3                   BUMP PTR BY (MAXRL + 2)
         BR    R9                       RETURN
         DROP  R11                      DROP ADDRESSABILITY
         SPACE 2
         TITLE '&COMPNM&ASMID - ASSEMBLER DRIVER - ABORT ROUTINE'
*        THIS ROUTINE LOADS THE ABORT ROUTINE.  R10 CONTAINS THE ERROR
*   CODE.  R11 WILL CONTAIN R1 INFO AT THE TIME THE ASSEMBLER WAS
*   INVOKED (PARAMETER LIST PTR) (ERR260) OR R0 INFO FROM SYNAD EXIT
*   (ERR261).  R1 WILL CONTAIN THE DCB ADDRESS FOR ERR261.
         SPACE 3
         USING ABORT,R12                REGISTER R12 IS BASE
ABORT    LR    R2,R1                    DCB ADDR MAY BE IN REG. R1
         DELETE EPLOC=JPHNAME           DELETE LAST PHASE LOADED
         LOAD  EPLOC=PHASE07            LOAD ABORT ROUTINE
         LR    R12,R0                   GO TO ABORT
         BALR  R9,R12                   ''
         DELETE EPLOC=PHASE07           DELETE ABORT ROUTINE
         L     R13,D4(,R13)             PT TO SAVE AREA
         DELETE EPLOC=PHASE01           DELETE COMMON
         RETURN (14,12),RC=20           RETURN TO CALLER
         SPACE 3
         TITLE '&COMPNM&ASMID - ASSEMBLER DRIVER - CONSTANTS '
*        CONSTANTS
*
         JPHASE PHASE=&COMPNM.X01       X01 PHASE ID
         JPHASE PHSUFF=X02              X02 PHASE ID
         JPHASE PHSUFF=X03              X03 PHASE ID
         JPHASE PHSUFF=X04              X04 PHASE ID
         JPHASE PHSUFF=X05              X05 PHASE ID
         JPHASE PHSUFF=X06              X06 PHASE ID
         JPHASE PHASE=&COMPNM.X07       X07 PHASE ID
         JPHASE PHSUFF=X11,BUF=(1,1,1),DBLBUF=(1,1,1)    X11 PHASE ID
         JPHASE PHSUFF=X21,BUF=(1,1,1),DBLBUF=(0,0,0)    X21 PHASE ID
         JPHASE PHSUFF=X31,BUF=(1,1,1),DBLBUF=(0,1,1)    X31 PHASE ID
         JPHASE PHSUFF=X41,BUF=(1,0,1),DBLBUF=(1,0,1)    X41 PHASE ID
         JPHASE PHSUFF=X42,BUF=(1,0,1),DBLBUF=(1,0,1)    X42 PHASE ID
         JPHASE PHSUFF=X51,BUF=(1,1,1),DBLBUF=(0,0,0)    X51 PHASE ID
         JPHASE PHSUFF=X61,BUF=(0,0,0),DBLBUF=(0,0,0)    X61 PHASE ID
         JPHASE PHSUFF=X62,BUF=(1,0,1),DBLBUF=(0,0,0)    X62 PHASE ID
         SPACE 3
AMODID   DC    A(MODID+6)               ADDRESS OF MASTER MODID LEVEL
MINCORE  DC    A(8)                 MIN CORE REQUEST           @AZ13738
         SPACE 3
         JPATCH X0A00,3BE               5% PATCH AREA
         END   START
