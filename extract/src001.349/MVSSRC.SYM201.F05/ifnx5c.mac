* /* START OF SPECIFICATIONS ****
*02* PROCESSOR = ASSEMBLER
**** END OF SPECIFICATIONS ***/
         LCLC  &TBP                     TEXT BASE POINTER
         LCLC  &BAL                     LINK REGISTER
         LCLC  &OPT                     OUTPUT POINTER
         LCLC  &LEN                     FIELD LENGTH
         LCLC  &SCR                     SCRATCH REGISTER
         LCLC  &SCH                     ALSO SCRATCH
         LCLC  &COM                     PHASE WORK AREA POINTER
         LCLC  &IPT                     INPUT FIELD ADDRESS
         LCLC  &PRN                     PRINT BUFFER POINTER
         SPACE 5
         GBLC  &COMPNM,&ASMID
         SPACE 5
&SCR     SETC  'R1'
&COM     SETC  'R7'
&OPT     SETC  'R3'
&IPT     SETC  'R4'
&BAL     SETC  'R6'
&TBP     SETC  'R5'
&LEN     SETC  'R14'
&PRN     SETC  'R2'
&SCH     SETC  'R15'
         SPACE 5
         JHEAD 'ASSEMBLY PHASE - MAINLINE CONTROL - PROLOG',           X
               PHASEID=X5C,                                            X
               LEVEL=10
*FUNCTION/OPERATION-                                                  *
*   THIS PHASE ACCEPTS THE MACRO GENERATION PHASE AND THE SYMBOL      *
*   RESOLUTION PHASE OUTPUT AND COMPLETES THE ASSEMBLY PROCESS.  THIS *
*   IS THE MAINLINE CONTROL FOR THE ASSEMBLY PHASE. CONTROL IS PASSED *
*   TO THE ASSEMBLY PHASE BY THE SYMBOL RESOLUTION INTERLUDE PHASE.   *
*   PHASE INITIALIZE ROUTINE IS CALLED TO ALLOCATE ALL OF THE NEC-    *
*   ESSARY WORK STORAGE AND BUFFERS, AND SET ANY REQUIRED ENTRY CON-  *
*   DITIONS. THE GET TEXT ROUTINE IS THEN CALLED TO BRING IN THE FIRST*
*   TEXT RECORD. CONTROL IS THEN PASSED TO THE APPROPIATE ROUTINES TO *
*   PERFORM THE ASSEMBLY FOR THAT RECORD. THE RECORD IS THEN OUTPUT   *
*   THROUGH THE PRINT AND PUNCH ROUTINE. THE GET TEXT ROUTINE IS      *
*   CALLED TO GET THE NEXT RECORD AND THE PROCESS IS REPEATED.        *
*                                                                     *
*ENTRY POINT-                                                         *
*        MLC100                                                       *
*INPUT-                                                               *
*   INTERNAL TEXT FILE FROM THE GENERATOR PHASE.                      *
*   RESOLVED SYMBOLS IN ORDER OF OCCURANCE FROM THE SYMBOL RESOLUTION *
*   PHASE.                                                            *
*                                                                     *
*OUTPUT-                                                              *
*   RELOCATABLE OBJECT TEXT TO THE PUNCH FILE.                        *
*   ASSEMBLY LISTINGS TO THE PRINT FILE.                              *
*   RELOCATION DICTIONARY ENTRIES TO THE POST PROCESSOR.              *
*   CROSS REFERENCE ENTRIES TO THE POST PROCESSOR.                    *
*   ERROR RECORDS TO THE DIAGNOSTIC PHASE.                            *
*                                                                     *
*EXTERNAL ROUTINES-                                                   *
*        TEXT GET                                                     *
*        ASSEMBLER OPCODE PROCESSOR                                   *
*        MACHINE OPCODE PROCESSOR                                     *
*                                                                     *
*EXITS, NORMAL-                                                       *
*   EXITS TO THE POST PROCESS PHASE.                                  *
*EXITS, ERROR-                                                        *
*   N/A                                                               *
*                                                                     *
*TABLES/WORK AREAS-                                                   *
*   THESE ARE ALLOCATED IN THE INITIALIZATION MODULE AND ARE          *
*   DESCRIBED THERE.                                                  *
*                                                                     *
*ATTRIBUTES-                                                          *
*   REFRESHABLE                                                       *
*                                                                     *
*NOTES-                                                               *
*   N/A                                                               *
         TITLE '&COMPNM&ASMID - ASSEMBLY PHASE - MAINLINE CONTROL - JCOX
               MMON COPY CODE'
         COPY  JCOMMON                  INCLUDE COMMON DSECT
         TITLE '&COMPNM&ASMID - ASSEMBLY PHASE - MAINLINE CONTROL - JTEX
               XT COPY CODE'
         COPY  JTEXT
         TITLE '&COMPNM&ASMID - ASSEMBLY PHASE - MAINLINE CONTROL - X5CX
               OM COPY CODE'
         COPY  X5COM
         TITLE '&COMPNM&ASMID - ASSEMBLY PHASE - MAINLINE CONTROL - DSEX
               CT10 DEFINITION (RSYMRCD)'
DSECT10  DSECT
         COPY  RSYMRCD                  GET DSECT10 DEFINITION
         TITLE '&COMPNM&ASMID - ASSEMBLY PHASE - MAINLINE CONTROL - POSX
               T PROCESSOR RECORD DEFNS (BMDSECTS)'
         COPY  BMDSECTS                 GET POST PROCESSOR RECORD DEFNS
         TITLE '&COMPNM&ASMID - ASSEMBLY PHASE - MAINLINE CONTROL - JERX
               MSGCD COPY CODE'
         COPY  JERMSGCD                 DEFINE ERROR CODES AND SEVERITY
         TITLE '&COMPNM&ASMID - ASSEMBLY PHASE - MAINLINE CONTROL'
         JCSECT (X5C00)                 INITIALIZE MODULE CSECT
* VS1 REL 3.1 CHANGES
*C714000                                                       @OX02675
*A714500                                                       @OX10362
*A369000                                                       @OX08876
         JMODID ,                       CREATE OBJECT PHASE ID
*                            USINGS FOR-
         USING JTEXT,&TBP               FIXED TEXT PART
         USING JTEXTA,&IPT              VARIABLE TEXT PART
         USING X5COM,&COM               PHASE COMMON AREA
         USING DSECT10,R11              ESTABLISH DEFINITION FILE USING
         EJECT
MLC100   JSAVE BASE=YES                 SAVE CALLING REGISTERS
         JENTRY (X5C01=MLC100)          DEFINE ENTRY
         B     INIT                     INITIALIZE PHASE
MLC200   B     TEXTGET                  GO GET TEXT RECORD
MLC250   GOIF  JPRONLY,ON=MLC275        IS RECORD PRINT ONLY
         GOIF  JPSOP,OFF=MLC285         IS STATEMENT A PSEUDO OP?
         CLI   JTIOP1,JTERROR           IS IT AN ERROR RECORD?
         BE    MLC275                   BRANCH AROUND IF YES
         BAL   R6,GETDFN                GO GET NAME DEFINITION DATA
MLC275   JCALL ASMOP                    CALL ASSEMBLER OP ROUTINE
         B     MLC200                   GO GET NEXT RECORD
MLC285   BAL   R6,GETDFN                GO GET NAME DEFINITION DATA
         JCALL MACHOP                   CALL MACHINE OP ROUTINE
         B     MLC200                   GO GET NEXT TEXT RECORD
         JEXTRN (X5M01=MACHOP)          DEFINE MACHINE OP ENTRY
         JEXTRN (X5A01=ASMOP)           DEFINE ASSEMBLER OP ENTRY
         SPACE
MLC900   JRETURN ,                      EXIT TO CONTROLLER
         TITLE '&COMPNM&ASMID - ASSEMBLY PHASE - MAINLINE CONTROL - PHAX
               SE INITIALIZATION'
* INIT
*
*   THIS ROUTINE PERFORMS INITIALIZATION FOR THE ASSEMBLY PHASE
         SPACE
INIT     JGETCORE   DBL=X5COMLEN        GET WORK STORAGE
         LR    &COM,R10                 LOAD BASE FOR COMMON
* INITIALIZE COMMON
         XC    PRPU,PRPU                ZERO PRINT PUSH LEVEL COUNTER
         SET   PRDEFREQ,OFF             TURN OFF PRIOR DEFINITION REQ.
         XC    USINGT(USSL),USINGT      INITIALIZE USING TABLE
         MVI   USINGT+D6,X'0F'          IND END USING TABLE    @OX08876
         XC    LITPID,LITPID            INITIALIZE LITERAL POOL ID
         TS    SELFDEFN                 SET SELF DEFINITION FLAG ON
         XC    ELCTR(FLDEND-ELCTR),ELCTR  INITIALIZE TO ZERO
         MVI   JSEVER,D0                SET HIGH.SEV.CODE TO 0
         SET   XRFNO,ON                 TURN ON XREF SWITCH
         MVC   EESDI,JESDID             INITIALIZE ESDID
         LA    R1,TERMS                 INITIALIZE
         ST    R1,ATPTR                   EVALUATION
         LA    R1,RLIST                     WORK
         ST    R1,ALPTR                       AREA
         LA    R1,OPRNS-1                       POINTERS
         ST    R1,AOPTR                           FOR ASSEMBLY
         MVI   LNCNT+D3,D1              INITIALIZE LINE COUNT TO 1
         MVI   JTITLE,JBLANK            BLANK OUT
         MVC   JTITLE+D1(L'JTITLE-D1),JTITLE   THE TITLE BUFFER
         MVI   LISTSW,BITFF             INITIALIZE LIST SWITCH
         GOIF  JLIST,ON=INIT1           LEAVE ON IF JLIST IS ON
         NI    LISTSW,BITFF-PSTMT       TURN OFF LIST SWITCH
INIT1    SET   (JRLDCHK,JXREFCHK,JERRCHK),OFF ASSUME NO RLDS,ERRS,XREFS
         SPACE
         L     &SCR,JBEGCL             GET BEGIN COLUMN-1
         LA    &SCR,D1(,&SCR)          ADD 1
         STH   &SCR,JBGNCL             STORE BEGIN COL PTR
         L     &SCR,JCTBGN              GET CONTINUE COLUMN-1
         LA    &SCR,D1(,&SCR)           ADD 1
         STH   &SCR,JCNTCL              STORE CONT COL PTR
         L     &SCR,JBEGCL              GET BEGIN COLUMN-1
         A     &SCR,JSRCLN              ADD SOURCE FIELD MOVE LENGTH
         LA    &SCR,D1(,&SCR)           AND 1
         STH   &SCR,JENDCL              JENDCL NOW CONTAINS END COL-1
         SPACE
         SET   (PSTMT,PGEN),ON          INITIALIZE PRINT SWITCH
         NC    PRINTSW,LISTSW           TURN OFF PSTMT IF JLIST IS OFF
         JPOINT FILE=FILE2,NEXT=START   REWIND FILE2
         B     MLC200                   GO GET FIRST TEXT RECORD
         TITLE '&COMPNM&ASMID - ASSEMBLY PHASE - MAINLINE CONTROL - GETX
                DEFINITION RECORD ROUTINE'
GETDFN   LH    R4,JTNMP                 GET NAME FIELD POINTER
         SET   NAMPRS,OFF               TURN OF NAME PRESENT SWITCH
         AR    R4,R5                    ADD TEXT RECORD POINTER
         GOIF  JTNML,D0,EQ=(R6)         IS NAME PRESENT
         GOIF  JPSOP,OFF=GT100          CHECK FOR MACHINE OPERATION
         GOIF  JTEND,LT=(R6)            DO WE WORRY ABOUT NAME
         GOIF  JTTITLE,EQ=(R6)          EXIT IF TITLE
GT100    CLI   JTNAME,JALFAMAX          SEE IF REAL NAME
         BHR   R6                       EXIT IF NOT
         GOIF  JNMERR,ON=(R6)           IS NAME VALID?
         LH    R10,JINFILE              YES, GET FILE NUMBER
         JGETL FILE=(R10)               GET DEFINITION DATA
         ST    R11,SYMDEF               SAVE DATA POINTER
         SET   NAMPRS,ON                TURN ON NAME PRESENT SWITCH
         SR    R2,R2                    CLEAR REGISTER
         IC    R2,JTNML                 GET NAME LENGTH
         BCTR  R2,0                     SUBTRACT 1 FOR EXECUTE
         EX    R2,COMPNAME              GO TO COMPARE NAME
         BE    GT150                    BRANCH IF EQUAL
         X5ERRL 167,0                   SYMBOL FILE OUT OF PHASE
         LA    R10,LSTOUT               GET PRINT LISTING INDEX
         JCALL OUTPUT                   CALL PRINT
         LA    R10,ERROUT               GET ERROR FLAG INDEX
         JCALL OUTPUT                   CALL PRINT
         B     TEXTGET                  GO BACK TO GET TEXT RECORD
         JEXTRN (X5P01=OUTPUT)
         SPACE
GT150    GOIF  JXREF,OFF=GT250          DO WE MAKE CROSS REFERENCES
         SET   JXREFCHK,ON              YES, TURN ON XREF MADE
         LR    R4,R11                   SAVE DEFINITION POINTER
         LH    R10,JOUTFILE             GET OUTPUT FILE NUMBER
         JPUTL FILE=(R10),BUFREQ=XRFVAL-XRFIN+L'XRFVAL GET XRF OUTPUT
         USING XRFIN,R11                ESTABLISH USING FOR XREF
         USING DSECT10,R4               CHANGE USING FOR DEFN DATA
         MVC   XRECLN(D6),=AL2(XRFND,0,XRFTYPE*256) MOVE HEADER DATA
         MVC   XRFSYM,RNAME             MOVE NAME TO RECORD
         MVI   XRFFLG,BASE              SET DEFINITION DATA FLAG
         MVC   XRFSTM,STMTN+D2          MOVE STATEMENT DATA TO RECORD
         MVC   XRFLEN,RLNGQ             MOVE LENGTH OF DATA ITEM
         MVC   XRFVAL,RLCTR             VALUE OR ADDRESS OF ITEM
         GOIF  PRIORDEF,OFF=GT200       IS THIS A MULTIPLE DEFINITION
         MVI   XRFFLG,DUPL              YES, CHANGE DEFINITION FLAG
         ST    R4,ERRPTR                SAVE DEFINITION DATA POINTER
         X5ERRL 196,DTAPTR              LOG ERROR
         BR    R6                       EXIT
COMPNAME CLC   2(0,R4),12(R11)          COMPARE NAME IN TEXT & SYMFILE
GT200    GOIF  DEFINED,OFF=(R6)         HAS IT BEEN DEFINED BEFORE
         MVI   XRFFLG,REF
         BR    R6
GT250    LR    R4,R11                   SAVE SYMBOL DEFINITION POINTER
         GOIF  PRIORDEF,OFF=(R6)        IS THIS A PRIOR DEFINITION
         ST    R4,ERRPTR                SAVE DEFINITION DATA POINTER
         X5ERRL 196,DTAPTR              LOG ERROR
         BR    R6                       RETURN TO MAINLINE
         JEXTRN (X5L01=LOGERR)          DEFINE EXTERNAL SYMBOL
         USING JTEXTA,R4                RESET USING FOR VARIABLE TEXT
         TITLE '&COMPNM&ASMID - ASSEMBLY PHASE - MAINLINE CONTROL - PHAX
               SE WRAP-UP FUNCTIONS'
* CLOSE
*
*   THIS ROUTINE PERFORMS PHASE WRAP-UP FUNCTIONS
         SPACE
CLOSE    NC    CRDCNT,CRDCNT            IS BYTES IN PUNCHED CARD ZERO
         BZ    CLOSE0                   YES, DON'T PLACE IN TEXT CARD
         L     R1,CRDPTR                GET POINTER TO PUNCH CARD
         MVC   D10(D2,R1),CRDCNT        MOVE NUMBER BYTES TO CARD
         SPACE
CLOSE0   GOIF  (JERRCHK,JXREFCHK,JRLDCHK),OFF=CLOSE1  IS EOF RECORD NEC
         LH    R10,JOUTFILE             GET OUTPUT FILE POINTER
         JPUTM FILE=(R10),ADDR=ERREOF   OUTPUT EOF RECORD
CLOSE1   JFRECORE   ADDR=(&COM)         RELEASE WORK STORAGE
         LH    R10,JINFILE              SWITCH INPUT AND
         MVC   JINFILE,JOUTFILE          OUTPUT FILES
         STH   R10,JOUTFILE               FOR NEXT PHASE
         JPOINT FILE=FILE1,NEXT=START   REPOSITION
         JPOINT FILE=FILE2,NEXT=START    ALL
         JPOINT FILE=FILE3,NEXT=START     WORK FILES
         B     MLC900                   THUS ENDETH THE ASSEMBLY
         TITLE '&COMPNM&ASMID - ASSEMBLY PHASE - MAINLINE CONTROL - TEXX
               T RECORD GET ROUTINE'
* TEXT GET ROUTINE
*   GETS A TEXT RECORD AND INITIALIZES FOR PROCESSING OF IT
         SPACE
TEXTGET  L     R1,SYMXRF                GET NBR OF SYMB XREFED  OX02675
         MVI   DUMSW,X'00'              CLEAR SW FOR X5L       @OX10362
         SR    R4,R4                    ZERO REGISTER FOR NEXT USE
         IC    R4,SYMCNT                GET NUMBER OF SYMBOLS THIS CARD
         SR    R4,R1                    DETERMINE SYMBOLS REMAINING
         BNH   TXT040                   ALL SYMBOLS REFERENCED
TXT010   LH    R10,JINFILE              GET FILE NUMBER
         JGETL FILE=(R10)               GET REFERENCE DATA
         BCT   R4,TXT010                GO BACK IF MORE SYMBOLS
TXT040   XC    SYMXRF,SYMXRF            RESET REFERENCE COUNT
         JGETL FILE=FILE2               GET TEXT RECORD
         LR    &TBP,R11                 LOAD TEXT BASE REGISTER
         ST    R5,TXTPTR                SAVE TEXT POINTER
         GOIF  JTEOF,EQ=CLOSE           GO CLOSE PHASE IF END-OF-FILE
         GOIF  JPSOP,OFF=TXT045         BRANCH IF NOT PSEUDO OP
         GOIF  JTERROR,EQ=MLC275        GET OUT IF ERROR
TXT045   OC    JTFLGB,JPRTONLY          OR IN X4 CATASTROPHIC FLAG
*   THE FOLLOWING CARDS ARE FOR TSO
         GOIF  JTERM,OFF=TXT050         DO WE PRINT TO TERMINAL?
         SET   ERRBIT,OFF               TURN ERRBIT OFF
         GOIF  TERR,ON=TXT047           CAN THIS BE CONTINUATION
         GOIF  JTCALL,EQ=ERRSCAN        CAN IT BE MACRO CALL
         GOIF  JTPROTO,EQ=ERRSCAN       OR A PROTOTYPE
TXT0455  GOIF  JPRONLY,OFF=TXT048       CAN IT BE MODEL
         GOIF  (JSUBNAME,JSUBOPCD,JSUBOPND),OFF=TXT048 OK IF SUBST REQ
TXT046   BAL   R6,RECSAVE               SAVE RECORD
         B     TXT048                   CONTINUE
ERRSCAN  GOIF  JNOCNT,ON=TXT0455        NOT BEGIN OF PROTO OR CALL
         JNOTE FILE=FILE2               SAVE POSITION OF CALL OR PROTO
         MVC   MODNOTV,JNOTEVAL         SAVE VALUE
         GOIF  JERR,ON=ERRSCAN1         RECORD IN ERROR
ERRSCAN0 JGETL FILE=FILE2               GET NEXT RECORD
         LR    R5,R11                   GET RECORD ADDRESS
         GOIF  JTCALL,EQ=ERRSCAN1       CALL ?
         GOIF  JTPROTO,EQ=ERRSCAN1      PROTOTYPE ?
         JPOINT FILE=FILE2,NEXT=GET,ADDR=MODNOTV POSITION BACK TO START
         JGETL FILE=FILE2               READ 1ST RECORD AGAIN
         LR    R5,R11                   ESTABLISH RECORD BASE
         GOIF  JTCALL,NE=TXT048         IF CALL SAVE RECORD
         GOIF  JGEN,ON=TXT048           DO NOT SAVE IF INNER CALL
         BAL   R6,RECSAVE               SAVE CALL
         B     TXT048                   CONTINUE
ERRSCAN1 GOIF  JERR,OFF=ERRSCAN0        READ NEXT RECORD IF NO ERROR
         JPOINT FILE=FILE2,NEXT=GET,ADDR=MODNOTV POSITION BACK
         JGETL FILE=FILE2               GET 1ST RECORD
         LR    R5,R11                   GET RECORD ADDRESS
         SET   TERR,ON                  INDICATE REST TO TERM
         GOIF  JTCALL,NE=TXT049         SAVE RECORD IF CALL
         GOIF  JGEN,ON=TXT049           IF INNER CALL DO NOT SAVE
         BAL   R6,RECSAVE               ELSE CONTINUE
         B     TXT049                   CONTINUE SCAN
RECSAVE  LH    R4,JTRLI                 GET RECORD LENGTH
         LA    R3,MODEL                 GET SAVE ADDRESS
         LR    R2,R5                    SAVE RECORD POINTER
         SH    R4,=H'256'               CHECK MOVE LENGTH
         BM    RECSAVE1                 OK
         MVC   D0(256,R3),D0(R2)        MOVE 256 FIRST CHAR
         AH    R3,=H'256'               UPDATE BOTH POINTERS
         AH    R2,=H'256'
RECSAVE1 EX    R4,RECMOVE               MOVE REST
         L     R1,STMTN                 GET STATEMENT NUMBER OF
         LA    R1,D1(R1)                  NOTED RECORD
         STH   R1,MODSTMT               SAVE IT
         BR    R6                       CONTINUE
RECMOVE  MVC   D0(R0,R3),D0(R2)         MOVE MODEL STATEMENT
TXT047   GOIF  JNOCNT,ON=TXT049         PRINT ALL LINES OF STMT ON TSO
         SET   TERR,OFF                 INDICATE ALL PRINTED
         B     TXT045                   DO ORDINARY CHECK
TXT048   GOIF  JERR,OFF=TXT050          ANY ERROR RECORD EEXPECTED
         GOIF  JGEN,OFF=TXT049          SHALL WE GET NOTED STMT
TXT0485  LH    R10,JOUTFILE             GET FILE UNDEX
         JPUTM FILE=(R10),ADDR=MODEL    OUTPUT MODEL STMT
         MVC   D4(,R11),=AL1(JT,J0)     INDICATE TEXT RECORD
         MVC   D16(D1,R11),D3(R11)      SAVE FLAGB
         MVC   D2(D2,R11),MODSTMT       MOVE IN STATEMENT NUMBER
TXT049   LH    R10,JOUTFILE             GET FILE INDEX
         SET   TERR,ON                  INDICATE MORE LINES CAN COME
         JPUTM FILE=(R10),ADDR=JTEXT    WRITE OUT TEXT RECORD
         MVC   D4(,R11),=AL1(JT,J0)     MOVE IN TEXT RECORD OPCODE
         MVC   D16(D1,R11),D3(R11)      SAVE JTFLGB
         L     R1,STMTN                 GET STMT NUMBER
         LA    R1,D1(,R1)               INCREMENT 1
         STH   R1,D2(R11)               SAVE STMNT NUMBER
         SET   ERRBIT,ON                YES, TURN 1ST TIME SWITCH OFF
*   TSO ENDS HERE
TXT050   LH    R4,JTOPP                 GET OPERAND POINTER
         AR    R4,R5                    ADD TEXT POINTER
         GOIF  JTOPOCD,OFF=TXT100       BRANCH IF CARD POINTER
         LA    R4,D1(,R4)               STEP PAST CARD POINTER
TXT100   SR  R14,R14                    ZERO WORK REGISTER
         SET   OPNPRS,OFF               INDICATE OPERAND NOT PRESENT
         GOIF  JTOPL,D0,EQ=TXT200       ZERO OPERAND LENGTH - NO OPND
         CLC   JTOPND(D2),=AL1(JCOMMA,JBLANK) IS OPERAND ONLY A COMMA
         BE    TXT200                   YES, NO OPERAND LEAVE INDICATOR
         SET   OPNPRS,ON                NO, INDICATE OPERAND PRESENT
TXT200   IC    R14,JTOPL                GET OPERAND LENGTH
         LA    R4,JTOPND                POINT TO FIRST CHAR OF OPERAND
         AR    R14,R4                   POINT TO END OF OPERAND
         ST    R4,OPNADR                SAVE OPERAND POINTER
         ST    R14,OPNEND               SAVE POINTER TO END OF OPERAND
         MVC   CDSTMT,=H'1'             RESET CARD-WITHIN-STMT COUNTER
         MVC   CLCLNG,=H'1'             DEFAULT LENGTH TO 1 FOR L'*
         SPACE
         LH    &SCR,JTSPR               GET STRING GROUP POINTER
         AR    &SCR,&TBP                ADD TEXT BASE POINTER
         ST    &SCR,STRADR              STORE STRING GROUP ADDRESS
         TM    JPRTONLY,BIT0            IS X4 CATASTROPHIC ON
         BO    TXT250                   YES, NO SYMBOLS TO XREF
         MVC   SYMCNT,JTSYMCNT          SAVE OPERAND SYMBOL COUNT
TXT250   SET   PERR,OFF                TURN OFF ERROR SWITCH
         GOIF  JNOCNT,ON=MLC250         BRANCH IF STATEMENT NOT COUNTED
         L     &SCR,STMTN               GET STATEMENT NUMBER
         LA    &SCR,D1(,&SCR)           STEP IT BY 1
         C     R1,=F'65535'             IS IT THE LIMIT ?
         BNH   TXT300                   NO,BRANCH AROUND
         SR    R1,R1                    YES,START FROM ZERO
TXT300   ST    &SCR,STMTN               SAVE IT
         B     MLC250                   RETURN TO MAINLINE
         TITLE '&COMPNM&ASMID - ASSEMBLY PHASE - MAINLINE CONTROL - CONX
               STANTS AND PATCH AREA'
ERREOF   DS    0CL8                      EOF RECORD TO OVERFLOW FILE
         DC    AL2(L'ERREOF)            RECORD LENGTH
         DC    AL1(JPSOP,0)             FLAGS
         DC    AL1(JTEOF,X'EE',X'00',X'FF')  FLAGS
         SPACE 2
         JPATCH X5C00,520               5% PATCH AREA
         END   MLC100
