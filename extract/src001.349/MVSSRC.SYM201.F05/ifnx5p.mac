* /* START OF SPECIFICATIONS ****
*02* PROCESSOR = ASSEMBLER
**** END OF SPECIFICATIONS ***/
         LCLC  &TBP                     TEXT BASE POINTER
         LCLC  &BAL                     LINK REGISTER
         LCLC  &OPT                     OUTPUT POINTER
         LCLC  &LEN                     FIELD LENGTH
         LCLC  &SCR                     SCRATCH REGISTER
         LCLC  &SCH                     ALSO SCRATCH
         LCLC  &COM                     PHASE WORK AREA POINTER
         LCLC  &IPT                     INPUT FIELD ADDRESS
         LCLC  &PRN                     PRINT BUFFER POINTER
         SPACE 5
&SCR     SETC  'R1'
&COM     SETC  'R7'
&OPT     SETC  'R3'
&IPT     SETC  'R4'
&BAL     SETC  'R6'
&TBP     SETC  'R5'
&LEN     SETC  'R14'
&PRN     SETC  'R2'
&SCH     SETC  'R15'
         SPACE 5
         JHEAD 'ASSEMBLY PHASE - PRINT ROUTINE',                       X
               PHASEID=X5P,                                            X
               LEVEL=10
*                                                                     *
*FUNCTION/OPERATION-                                                  *
*   THIS ROUTINE IS CALLED TO LIST AND PUNCH ALL TEXT OUTPUT FROM     *
*   THE ASSEMBLY PORTION OF THE ASSEMBLE. THIS ROUTINE RECONSTRUCTS   *
*   THE ASSEMBY PORTION OF THE ASSEMBLER. THIS ROUTINE RECONSTRUCTS   *
*   TEXT FOR THE PRINT FILE FROM THE EDITED TEXT RECORD. IT ALSO USES *
*   INPUT FROM LEFTHF TO CONSTRUCT THE LEFT HALF OF THE PRINT IMAGE,  *
*   AND TO BUILD PUNCH RECORD FOR THE PUNCH AND LINK FILES.           *
*                                                                     *
*ENTRY POINT-                                                         *
*        PRN100                                                       *
*                                                                     *
*INPUT-                                                               *
*   EDITED TEXT RECORDS ON JINFILE.                                   *
*   THE LEFT HALF VALUES IN A 19 BYTE TABLE CALLED LEFT HALF          *
*                                                                     *
*OUTPUT-                                                              *
*   ASSEMBLY LISTINGS TO THE PRINT FILE.                              *
*   RELOCATABLE OBJECT TEXT TO THE PUNCH AND LINK FILES.              *
*                                                                     *
*EXTERNAL ROUTINES                                                    *
*        JPUTL                                                        *
*        JPUNCH                                                       *
*                                                                     *
*EXITS, NORMAL-                                                       *
*   EXITS TO THE CALLING ROUTINE THROUGH THE JRETURN MACRO.           *
*                                                                     *
*EXITS, ERROR-                                                        *
*   NONE                                                              *
*                                                                     *
*TABLES/WORK AREAS-                                                   *
*   THE DEFINITION OF LEFTHF IS:                                      *
*                                                                     *
*   BYTES BITS  DATA                                                  *
*                                                                     *
*                                                                     *
*   00-03       LOCATION OF ENTRY                                     *
*   04-11       DC DATA IF ENTRY IS A DC OR CCW                       *
*   04-05       OPCODE  IF ENTRY IS A MACHINE OPERATION               *
*               BYTE 05 MAY ALSO CONTAIN LENGTH, REGISTERS, IMEDIATE  *
*               DATA.                                                 *
*   06-07       BASE-DISPLACEMENT 1                                   *
*   08-09       BASE-DISPLACEMENT 2                                   *
*   10-11       FLAGS                                                 *
*          0-1  01 ENTRY IS ALIGNMENT.                                *
*               10 ENTRY IS A DC                                      *
*               11 ENTRY IS AN EQUATE                                 *
*           2   BASE-DISPLACEMENT 1 PRESENT                           *
*           3   BASE-DISPLACEMENT 2 PRESENT                           *
*          4-7  LENGTH OF ENTRY. (IF ALL BITS ON DON'T PRINT LEFT HALF*
*   12-15       ADDRESS 1                                             *
*   16-19       ADDRESS 2                                             *
*   TOTAL LENGTH OF LEFT HALF IS 20 BYTES                             *
*                                                                     *
*ATTRIBUTES-                                                          *
*   REFRESHABLE                                                       *
*                                                                     *
*NOTES                                                                *
*   NONE                                                              *
*                                                                     *
*                                                                     *
         EJECT
         PRINT OFF                      DON'T PRINT JCOMMON COPY CODE
         COPY  JCOMMON                  INCLUDE COMMON DSECT
         PRINT OFF                      DON'T PRINT JTEXT COPY CODE
         COPY  JTEXT                    INCLUDED TEXT DSECT
         PRINT OFF                      DON'T PRINT X5COM COPY CODE
         COPY  X5COM                    INCLUED ASSEMBLY PHASE COMMON
         PRINT ON                       PRINT PRINT AREA DSECT
PRNIMG   DSECT
*   PRINT WORK AREA
PRNLN    DS    0CL121                   LENGTH OF PRINT LINE
CCTRL    DS    C                        CARRIAGE CONTROL
TITCD    DS    CL8                      TITLE CODE FIELD
         DS    C                        BLANKS
TITLEO   DS    CL100                    TITLE FROM ASSEMBLY
         DS    2C                       BLANKS
PAGEO    DS    CL4                      PAGE FOR HEADING
PGNO     DS    CL5                      PAGE NUMBER
         ORG   PRNIMG                   RE-ORG FOR HEADING LINE 2
         DS    C                        CARRIAGE CONTROL ALREADY DEFINE
         DS    2C                       BLANKS
SNDHDO   DS    CL56                     HEADING 2
         DS    38C                      BLANKS
SNDHID   DS    CL24                     ID AND DATE PLUS TIME
         ORG   PRNIMG                   RE-ORG FOR LIST EACH LINE
         DS    C                        CARRIAGE CONTROL
LOCO     DS    CL6                      LOCATION
         DS    C                        BLANK
OPCDO    DS    CL4                      OP CODE
IMEDO    EQU   OPCDO+2                  IMEDIATE, RX, OR LENGTH FIELD
         DS    C                        BLANK
BDPL1    DS    CL4                      BASE-DISPLACEMENT 1
         DS    C                        BLANK
BDPL2    DS    CL4                      BASE-DISPLACEMENT 2
ADDR1    DS    CL6                      ADDRESS 1
ADDR2    DS    CL6                      ADDRESS 2
         DS    C                        BLANK
STMTNO   DS    CL5                      STATEMENT NUMBER
GENFLG   DS    C                        GENERATION INDICATION
NAMFLD   EQU   *                        NAME FIELD
COMMENT  DS    0CL80                    COMMENT STATEMENTS COME HERE
         ORG   PRNIMG                   RE-ORG FOR OPCODE
OPFLD    DS    0C                       OPCODE FIELD
CMNFLD   DS    0C                       COMMENT FIELD
OPNFLD   DS    0C                       OPERAND FIELD
MRGFLD   DS    0C                       MARGIN OR POST END FIELD
         ORG   PRNIMG                   REORG FOR ERROR NOTE
         DS    CL(1+9)                  CARR CTL + BLANK
ERRLOC   DC    C'*** ERROR ***'
         ORG
PEJECT   EQU   0                        CARRIAGE CONTROL EJECT
P1SPACE  EQU   1                        CARRIAGE CONTROL SPACE 1
P2SPACE  EQU   2                        CARRIAGE CONTROL SPACE 2
P3SPACE  EQU   3                        CARRIAGE CONTROL SPACE 3
GENIND   EQU   JPLUS                    MACRO GENERATED INDICATOR
JTEXTA   DSECT
         ORG   JTOCO
OPTR     DSW   CDPTR                    CARD POINTER FLAG
         ORG   JTOCO                    REORG FOR OTHER POINTERS
OCPTR    DS    C                        OUTPUT COLUMN POINTER
LENGTH   DS    C                        FIELD (TRUE) LENGTH
FIELD    EQU   *
         EJECT
CRDSCT   DSECT  ,                       DSECT FOR TXT CARDS
CRDID    DS    CL4                      12-2-9 PUNCH AND TXT
         ORG   CRDID+1                  POINT TO AREA THAT NEEDS TRANS
CRDTR    DS    0CL71                    LENGTH OF TRANSLATE
         ORG   ,                        ORG BACK TO NEXT BYTE
         DS    C                        BLANK
CRDVLO   DS    CL3                      ADDRESS OF FIRST BYTE OF TEXT
         DS    2C                       BLANK
CRDLEN   DS    CL2                      NUMBER OF BYTES OF TEXT
         DS    2C                       BLANK
CRDESD   DS    CL2                      ESD OF TEXT
CRDTXT   DS    CL56                     TEXT - MAXIMUM OF 56 BYTES
D80      EQU   80
         PRINT ON                       THAT'S ALL THE COPY CODE
         EJECT
         JCSECT (X5P00)                 START MODULE CSECT
* VS1 RELEASE 2.6 CHANGES
*D301000-305000                                                 OX00222
*A194100                                                        OX00412
* VS1 RELEASE 4 CHANGES
*C608000,617200                                                 OX01764
*A633900-633940                                                 OX01764
*A366120,379500,412500                                          OX02266
*C336200,380000                                                 OX02266
*A219500                                                       @AZ13709
*D288000                                                       &AZ13795
*A633360,633380                                                @AX16963
*D633380                                                       @AZ29272
*A633340,633380                                                @AZ29272
         JMODID ,                       CREAT ROUTINE ID
         USING JTEXT,R5                 FIXED TEXT USING
         USING JTEXTA,R4                VARIABLE TEXT USING
         USING X5COM,R7                 COMMON USING
         USING PRNIMG,R2                PRINT BUFFER USING
PRN100   JSAVE BASE=YES                 SAVE CALLING REGISTERS
         JENTRY (X5P01=PRN100)          MAKE ENTRY POINT EXTERNAL
         EJECT
         GOIF  (JLIST,JDECK,JLINK),     IF DECK, LIST, LINK ARE NOT    X
               OFF=PRNXIT               REQUIRED EXIT
         GOIF  LTDECV,ON=PRNXIT         EXIT IF LITERAL REFERENCE
         CH    R10,=H'4'                IS IT PRNCAR PRINT INDEX
         BE    PRN110                   YES
         SET   SPACECC,OFF              RESET SPACE CONTROL
PRN110   EQU   *
         GOIF  JLIST,OFF=INDEX2(R10)    IF LIST IS OF USE BRANCH TABLE X
                                        NUMBER 2
         GOIF  PSTMT,OFF=PRN125         IS STATEMENT TO BE PRINTED
         GOIF  JGEN,ON=PRN150           IS TEXT GENERATED
         B     INDEX1(R10)              NO, USE BRANCH TABLE NUMBER1
INDEX1   B     PRNLST                   ENTRY IS FOR STANDARD LISTING
         B     PRNCAR                   ENTRY IS CARRIAGE CONTROL
         B     PRNPUN                   ENTRY IS FOR PUNCH STATEMENT
         B     PRNRPO                   ENTRY IS FOR REPRO CARD
         B     PRNDC                    ENTRY IS FOR A DC
         B     PRNERR                   ERROR ROUTINE
         B     PRNMNO                   GET BUFFER FOR MNOTE
INDEX2   B     PUNRTN                   NO LIST - GO CHECK PUNCH OPTION
         B     PRNXIT                   NO LIST - EXIT
         B     PRNPUN                   GO CHECK PUNCH OPTION
         B     PRNRPO                   GO CHECK PUNCH OPTION
         B     PUNRTN                   GO CHECK PUNCH OPTION
         B     PRNXIT                   EXIT IF NOLIST
         B     PRNXIT                   EXIT NO MNOTE
PRN125   GOIF  PRPP,ON=INDEX1(R10)      WAS PRINT FORCED ?
         B     INDEX2(R10)              IF NOT USE BRANCH TABLE NR 2
PRN150   GOIF  PGEN,ON=INDEX1(R10)      CHECK PRINT GEN OPTION IF ON
         CLI   JTIOP1,JTMNOTE           IS IT AN MNOTE?
         BE    INDEX1(R10)              USE INDEX 1 IF MNOTE
         GOIF  JERR,ON=INDEX1(R10)      USE INDEX 1 IF STMT FLAGGED
         SET   DCMOP,OFF                CLEAR SWITCH TO BE SURE OX00412
         B     INDEX2(R10)              ELSE USE INDEX 2
PRNXIT   SET   (DCSWH,DCCOMP,DCMOP,DCSTRT),OFF  TURN OFF ALL DC FLAGS
         SET   PRPP,OFF                 RESET FORCED POP PUSH PRINT
PRN200   XC    DCDATA(L'LEFTHF-L'LOCATN),DCDATA ZERO LEFT HALF
         SET   COLOVLP,OFF              TURN OVERLAP SWITCH OFF
PRNLEV   JRETURN ,                      EXIT
         EJECT
PRN800   CVD   &SCR,DWORD1              CONVERT NUMBER TO DECIMAL
         UNPK  DWORD2(L'STMTNO),DWORD1  UNPACK NUMBER
         NC    DWORD2(D5),ZMASK         MASK OUT ZONE BITS
         LA    &SCR,D4                  GET MAXIMUM BLANKS TO ADD
         LA    &SCH,DWORD2              POINT TO NUMBER
PRN810   CLI   D0(&SCH),J0              IS LEADING DIGIT ZERO
         BNE   PRN820                   NO
         MVI   D0(&SCH),JBLANK          YES,BLANK OUT
         LA    &SCH,D1(,&SCH)           BUMP POIMTER
         BCT   &SCR,PRN810             GO BACK IF COUNT NOT DEPLETE
PRN820   BR    R6                       RETURN
         SPACE
PRN600   L     R2,PRNSV1
         JPRINT ,
         LR    &PRN,R11                 SAVE NEW BUFFER ADDRESS
         ST    R2,PRNSV1                SAVE PRINT BUFFER POINTER
         BR    &BAL                     RETURN
         EJECT
PRNLST   BAL   R6,PRINT                 GO GET PRINT LINE
         SET   SPACECC,OFF              RESET SPACE CONTROL    @AZ13709
         TM    LHFLGS,DNTPLH            IS LEFT HALF TO BE PRINTED
         BO    LIST1                    YES, GO PRINT SOURCE
         UNPK  LHWORK(D15),LEFTHF(D8)         UNPACK THE LEFT HALF OF
         UNPK  LHWORK+D14(D15),LEFTHF+D7(D8)  THE PRINT LINE FOR
         UNPK  LHWORK+D28(D15),LEFTHF+D14(D8) PRINTING
         NC    LHWORK,ZMASK             MASK OUT ZONE BITS FROM UNPACK
         GOIF  EOUBIT,ON=PRL300         BRANCH IF ORG EQU OR USING
         TM    LHFLGS,ENTDC+ENTALN
         MVC   LOCO,ULOCO+D2            MOVE LOCATION TO PRINT LINE
         BZ    PRL200                   NOT ALIGNMENT OR DC
         BM    PRL100                   IS ALIGNMENT OR DC
         B     LIST1                    GO PRINT SOURCE
PRL100   IC    R14,LHFLGS               GET LENGTH OF DATA
         LA    R15,JF                   GET MASK
         NR    R14,R15                  AND OUT EXTRA BITS
         BZ    PRL150                   BRANCH IF NO DATA TO MOVE
         SLL   R14,D1                   DOUBLE FOR PRINT LENGTH
         BCTR  R14,0                    GET MOVE LENGTH
         EX    R14,MVDCDA               EXECUTE MOVE TO PRINT LINE
PRL150   EQU   *                        BRANCH LABEL
         GOIF  ENTALN,ON=PUNRTN         PRINT COMPLETE FOR ALIGNMENT
         GOIF  DCSWH,ON=DC100           DC OR CCW
         B     LIST1                    GO PRINT CCW
MVDCDA   MVC   OPCDO(D0),UOPCOD         EXECUTED MOVE OF DC AND ALIGN
         EJECT
PRL200   TM    LHFLGS,DNTPLH            IS LENGTH OF ENTRY ZERO
         BZ    LIST1                    YES, LEFT HALF COMPLETE
         MVC   OPCDO,UOPCOD             GET OPCODE AND SECOND BYTE
         CLI   LHFLGS,D2                IS ENTRY 2 BYTES LONG
         BE    LIST1                    YES, LEFT HALF COMPLETE
         MVC   BDPL1,UBASD1             MOVE BASE-DISPLACEMENT 1
         MVC   ADDR1,UADR1+D2           MOVE ADDRESS 1 TO PRINT
         CLI   ADDR1,J0                 DOES ADDRES 1 HAVE LEADING 0
         BNE   PRL250                   NO, LEAVE AS IS
         MVI   ADDR1,JBLANK             YES, BLANK OUT ZERO
PRL250   CLI   LHFLGS,D4                IS ENTRY LENGTH 4
         BE    LIST1                    YES, LEFT HALF COMPLETE
         MVC   BDPL2,UBASD2             MOVE BASE-DISPLACEMENT 2
         MVC   ADDR2,UADR2+D2           MOVE ADDRESS 2 TO PRINT
         CLI   ADDR2,J0                 DOES ADDRESS 2 HAVE LEADING 0
         BNE   LIST1                    NO, LEAVE AS IS
         MVI   ADDR2,JBLANK             YES, BLANK LEADING ZERO
         B     LIST1                    GO PRINT RIGHT HALF
PRL300   MVI   LOCO,X'2F'               ZERO OUT LEFTH HALF
         MVC   LOCO+D1(D23),LOCO
         MVC   ADDR2-D2(D8),UADR2       MOVE VALUE FOR PRINT
         CLI   ADDR2-D2,J0              SUPRESS UP TO 3 LEADING ZEROS
         BNE   PRL400
         MVI   ADDR2-D2,JBLANK
         CLI   ADDR2-D1,J0
         BNE   PRL400
         MVI   ADDR2-D1,JBLANK
         CLI   ADDR2,J0
         BNE   PRL400
         MVI   ADDR2,JBLANK
PRL400   GOIF  JTORG,NE=LIST1           IS IT ORG ?
         MVC   LOCO,ULOCO+D2            YES MOVE LOCTR FOR PRINT
         B      LIST1                   GO PRINT SOURCE
         EJECT
PRNCAR   LR    R3,R11                   SAVE NUMBER OF LINES TO SPACE
         GOIF  (R3),NEG=CAR600          IS IT EJECT
         GOIF  JLNCT,LNCNT+D2,NE=CAR025  TOP OF PAGE ?
         GOIF  SPACECC,OFF=CAR025       FIRST LINE ON NEW PAGE
         SET   SPACECC,OFF              RESET NEW PAGE INDICATOR
         LA    R3,D1(R3)                ADD 1 FOR SPACE IN HEADING
         L     R4,LNCNT                 GET LINES LEFT ON PAGE
         LA    R4,D1(R4)                COMPENSATE FOR 1 SPACE
         ST    R4,LNCNT                 SAVE NEW LNCNT
CAR025   GOIF  TWASLC,ON=CAR050         BUFF AVAIL SO DO NOT COMP PRT
         L     R4,LNCNT                 PICK UP LNCNT
         LA    R4,D1(R4)                COMPENSATE FOR PRINT
         ST    R4,LNCNT                 SAVE NEW LNCNT
CAR050   BAL   R6,PRINT                 GO GET PRINT LINE
         L     R4,LNCNT                 PICK UP LNCNT
         SR    R4,R3                    SUBTRACT NUMBER OF SPACES
         BNH   CAR700                   EJECT IF NOT ENOUGH LINES LEFT
         ST    R4,LNCNT                 STORE REMAINING LINES + COMP
CAR100   BCT   R3,CAR200                DOES SPACE = 1
         B     PRNXIT                   YES, EXIT
CAR200   BCT   R3,CAR300                DOES SPACE = 2
         MVI   CCTRL,P2SPACE            YES, SET CARRIAGE CONTROL
         B     PRNXIT                   EXIT
CAR300   MVI   CCTRL,P3SPACE            SET CARRIAGE CONTROL = 3
         BCT   R3,CAR400                STILL MORE LINES TO SPACE
         B     PRNXIT                   NO, EXIT
CAR400   L     R4,LNCNT                 COMP FOR PRT TO PREVENT EJECT
         LA    R4,D1(R4)                ADD 1 TO COMPENSATE FOR PRINT
         ST    R4,LNCNT                 STORE REMAINING LINES
         BAL   R6,PRINT                 PRINT SPACE 3
         B     CAR100                   GO CHECK FOR MORE SPACES
CAR600   GOIF  TWASLC,ON=CAR700         WAS EJECT LAST OP
         BAL   R6,PRINT                 GET PRINT LINE
         GOIF  JLNCT,LNCNT+D2,NE=CAR700 TOP OF PAGE ?
         SET   TWASLC,ON                INDICATE BUFFER AVAILABLE
         B     PRNXIT                   SUPRESS EJECT
CAR700   L     R2,PRNSV1                RESTORE BUFFER POINTER
         BAL   R6,PRNEJT                SET UP RETURN REGISTER
         B     PRNXIT                   RETURN
PRNEJT   ST    R6,PRNSAVE               SAVE RETURN REGISTER
         SET   TWASLC,ON                INDICATE BUFFER AVAILABLE
         B     PRT150                   GO PRINT TITLES
         EJECT
* LISTSRC
*
*   THIS ROUTINE RECONSTRUCTS THE SOURCE RECORDS IN THE PRINT AREA
*   AND CALLS PRINT TO LIST ALL CARDS BUT THE LAST IN THE STATEMENT
*   THE LAST(OR,MOST OFTEN,THE ONLY)CARD IS PRINTED AFTER PROCESSING
         SPACE
LIST1    GOIF  JNOCNT,ON=LST100         DOES STATEMENT GET NUMBER
         L     R1,STMTN                 GET STATEMENT NUMBER
         BAL   R6,PRN800                GO CONVERT IT FOR LISTING
         MVC   STMTNO,DWORD2            MOVE CONVERTED NUMBER TO LIST
         SPACE
LST100   SET   COLOVLP,OFF              TURN OFF OVERLAP CHECK BIT
         XC    COLSAV,COLSAV            ZEROED OUT SAVE AREA
         LH    R4,JTNMP                 GET NAME POINTER
         BAL   &BAL,FLDMOVE             MOVE NAME TO OUTPUT
         SPACE
*   MOVE OPCODE FIELD
         SPACE
         LH    &IPT,JTOCP               GET OPCODE POINTER
         BAL   &BAL,FLDMOVE             MOVE TO OUTPUT
         SPACE
*   MOVE OPERAND FIELD
         SPACE
         LH    &IPT,JTOPP               GET OPERAND POINTER
         BAL   &BAL,FLDMOVE             MOVE TO OUTPUT
         SPACE
*   MOVE COMMENTS TO OUTPUT
         SPACE
         LH    &IPT,JTCPR               GET COMMENTS POINTER
         BAL   &BAL,FLDMOVE             MOVE TO OUTPUT
         BAL   &BAL,STRING              INSERT STRINGS INTO PRINT LINE
         GOIF  JGEN,OFF=LIST6           GOIF NOT GENERATED
         L     &SCR,DWORD1              GET CONTINUATION COLUMN POINTER
         CLI   D0(&SCR),JBLANK          IS CONTINUATION COL BLANK
         BE    LIST6                    YES
         MVI   D0(&SCR),JBLANK          NO, MAKE IT SO
         SPACE
LIST6    GOIF  DCSWH,ON=DC300           IS ENTRY A DC
         GOIF  ENTDC,ON=PRNXIT          EXIT IF DATA NO TO BE PUNCHED
         TM    LHFLGS,DNTPLH            ANY PUNCH DATA
         BM    PUNRTN                   YES, GO PACK IN PUNCH CARD
         B     PRNXIT                   RETURN TO MAINLINE
         EJECT
* FLDMOVE
*
*   THIS ROUTINE MOVES THE NAME,OPERATION,OPERAND OR COMMENTS FIELD
*   TO THE PRINT AREA.IF THE FIELD IS TOO LONG TO FIT INTO THE CURRENT
*   LINE PART OF THE FIELD IS MOVED AND THE LINE IS PRINTED.THIS
*   PROCESS CONTINUES UNTIL THE WHOLE FIELD IS MOVED.
*   CALL BY BAL BAL,FLDMOVE WITH REG IPT CONTAINIG A POINTER TO THE
*   FIELD GROUP.
         SPACE
FLDMOVE  ST    &BAL,FLDSAVE             SAVE LINK REGISTER
         AR    &IPT,&TBP                TURN POINTER INTO ADDRESS
         GOIF  CDPTR,OFF=FLD1           TEST IF CARD PTR,GO IF NOT
         SPACE
*   HANDLE CARD POINTER
         SPACE
         MVC   CARDP,OPTR               SAVE CARD POINTER
         SET   CDPTR1,OFF               TURN OFF FLAG BIT
FLD01    SR    &SCR,&SCR                CLEAR REGISTER
         IC    &SCR,CARDP               GET CARD POINTER
         SH    &SCR,CDSTMT              SUBTR CURRENT CARD-WITHIN-STMT
         BNH   FLD02                    WE ARE DONE IF NOT IN NEW CARD
         BAL   &BAL,STRING              INSERT STRINGS INTO PRINT LINE
         BAL   &BAL,PRINT               PRINT CURRENT CARD
         XC    COLSAV,COLSAV            CLEAR SAVE AREA FOR COLUMN PTR
         SET   COLOVLP,OFF              TURN OFF OVERLAP CHECK BIT
         B     FLD01                    GO TEST NEXT CARD
FLD02    LA    &IPT,L'OPTR(,&IPT)       POINT TO COLUMN POINTER
         SPACE
FLD1     SR    &OPT,&OPT                CLEAR REGOSTER
         IC    &OPT,OCPTR               GET OUTPUT COLUMN POINYER
         SR    &LEN,&LEN                CLEAR THIS ONT TOO
         IC    &LEN,LENGTH              GET FIELD LENGTH
         GOIF  (R14),NOTZERO=FLD10      CHECK IF OPERAND LENGTH ZERO
         GOIF  JPSOP,OFF=FLD1A          CAN IT BE ICTL
         GOIF  JTICTL,EQ=FLD2           ICTL STATEMENT ?
FLD1A    GOIF  JPRGICTL,OFF=FLD2        USE STD ICTL            OX02266
         LH    &SCR,JENDCL              NOT ICTL -GET END COL-1 OX02266
         B     FLD3                     GO GET OUT
FLD2     LA    &SCR,D7*D10+D1           USE STANDARD ICTL
FLD3     LA    &SCR,NAMFLD(&SCR)        POINT TO END COLUMN
         ST    &SCR,DWORD1              SAVE IT
         L     R6,FLDSAVE               RESTORE LINKAGE REGISTER
         BR    R6                       RETURN
         SPACE
*   LEN NOW CONTAINS TRUE LENGTH,OPT OUTPUT COLUMN POINTER
         SPACE
FLD10    BCTR  &LEN,0                   DECREASE TO MOVE LENGTH
         GOIF  COLOVLP,OFF=FLD20        BRANCH IF OVERLAP BIT IS OFF
         CH    R3,COLSAV                DOES FIELD OVERLAP?
         BNL   FLD20                    NO,BRANCH AROUND
         LH    R3,COLSAV                GET COLUMN PTR SAVED
         SPACE
FLD20    SET   COLOVLP,ON               TURN OVERLAP CHECK BIT ON
         GOIF  JPSOP,OFF=FLD22          CAN IT BE ICTL
         GOIF  JTICTL,EQ=FLD30          ICTL STATEMENT?
FLD22    GOIF  JPRGICTL,OFF=FLD30       USE STD ICTL            OX02266
         LH    &SCR,JENDCL              NOT ICTL -GET END COL-1 OX02266
         SPACE
FLD25    SR    &SCR,&OPT                GET MAXIMUM MOVE LENGTH
         BM    FLD30                    TRY STD ICTL
FLD27    LA    R15,D2(R3,R14)           COMPUTE NEXT FIELD PTR
         STH   R15,COLSAV               SAVE COLUMN PTR FOR NXT FIELD
         CR    &LEN,&SCR                WILL FIELD FIT INTO THIS LINE
         LA    &OPT,NAMFLD-D1(&OPT)
         BH    FLD100                   NO
         EX    &LEN,MOVE                YES,MOVE IT
         L     &BAL,FLDSAVE             RESTORE LINK REGISTER
         LA    R1,D1(R1,R3)             COMPUTE END COL + 1
         ST    R1,DWORD1                SAVE IT
         BR    &BAL                     RETURN
FLD30    LA    R1,D7*D10+D1             USE STD ICTL END COL
         SR    R1,R3                    NOW TRY MAX MOVE LENGTH
         BNM   FLD27                    BRANCH IF OK
         LA    &OPT,NAMFLD-D1(&OPT)     PT TO PRINT POSITION
         LA    R6,D1(R1,R3)             COMPUTE END COLUMN + 1
         LH    R1,=H'-1'                SET TO -1 (0=1 BYTE,-1=NO BYTE)
         B     FLD101                   NOW SKIP MOVE
FLD100   EX    &SCR,MOVE               MOVE PART OF FIELD
         LA    R6,D1(R1,R3)             COMPUTE END COLUMN + 1
FLD101   SR    &LEN,&SCR                GET (TRUE) LENGTH OF REMAINDER
         STH   &LEN,HWD                 SAVE LENGTH
         LA    &IPT,D1(&SCR,&IPT)      GET ADDR OF REMAINING PART
         LR    R1,R6                    TRANSFER END COLUMN+1 TO R1
         GOIF  LITRSW,ON=FLD102         SKIP IF LITERAL
         ST    R1,DWORD1                SAVE IT
         BAL   &BAL,STRING              INSERT STRINGS INTO PRINT LINE
         L     R1,DWORD1                RESTORE R1
         SPACE
FLD102   CLI   D0(R1),JBLANK            IS IT BLANK?
         BNE   FLD105                   BRANCH AROUND IF NOT EQUAL
         MVI   D0(R1),JX                PUT IN CONTINUATION CHAR
         SPACE
FLD105   GOIF  DCSWH,ON=DC500           IS ENTRY A DC
         SPACE
FLD110   BAL   &BAL,PRINT               PRINT COMPLETED LINE
         SPACE
FLD120   LH    &LEN,HWD                 GET LENGTH AGAIN
         GOIF  JTICTL,EQ=FLD40          ICTL STATEMENT?
         GOIF  JPRGICTL,OFF=FLD40       USE STD ICTL            OX02266
         LH    &OPT,JCNTCL              SET OUTPUT COL PTR=CONT COL
         SPACE
FLD35    XC    COLSAV,COLSAV            ZEROED OUT SAVE AREA
         SET   COLOVLP,OFF              TURN OFF OVERLAP CHECK BIT
         B     FLD10                    GO MOVE REMAINING PART
FLD40    LA    R3,D16                   PUT 16 IN R3
         B     FLD35                    GO BACK
         EJECT
* STRING
*
*   EXTRACT STRINGS FROM TEXT RECORD AND INSERT THEM INTO THE
*   CURRENT PRINT LINE.
*   PARAMETER - STRADR CONTAINS ADDRESS OF CURRENT STRING GROUP.THIS
*   FIELD IS UPDATED HERE,AS IS THE CARD-WITHIN-STATEMTNT COUNTER.
         SPACE
STRING   LH    &SCR,CDSTMT              GET CARD-WITHIN-STMT COUNTER
         LA    &SCR,D1(,&SCR)           AND
         STH   &SCR,CDSTMT              UPDATE IT
         GOIF  JGEN,OFF=STR050          IS STATEMENT GENERATED
         MVI   GENFLG,GENIND            YES, INDICATE AS SUCH
         SPACE
STR050   L     &SCH,STRADR              GET STRING GROUP ADDRESS
         DROP  &IPT
         USING JTEXTA,&SCH              DON'T DESTROY IPT-USE SCH
         CLI   JTSTC,D0                 ANY STRINGS
         BER   &BAL                     NO
         SR    &SCR,&SCR                ZERO REGISTER
         IC    &SCR,JTSTC               GET STRING COUNT
         LA    &SCH,JTSTO               POINT TO OUTPUT POINTER
STR100   SR    &LEN,&LEN                CLEAR REGISTER
         IC    &LEN,JTSTL2              GET STRING LENGTH
         BCTR  &LEN,0                   DECREASE TO MOVE LENGTH
         SR    &OPT,&OPT                CLEAR REGISTER
         IC    &OPT,JTSTO2              GET OUTPUT POINTER
         LA    &OPT,NAMFLD-D1(&OPT)     MAKE IT AN ABS ADDRESS
         EX    &LEN,STRMOVE             MOVE STRING TO OUTPUT
         LA    &SCH,JTSTR2+D1(&LEN)     POINT TO NEXT STRING
         BCT   R1,STR100                GO BACK IF SECOND STRING
         SPACE
         ST    &SCH,STRADR              STORE UPDATED STRING POINTER
         DROP  &SCH
         USING JTEXTA,&IPT              BACK TO NORMAL REGISTER
         BR    &BAL                     RETURN
         EJECT
* PRINT
*
*   THE PRINT BUFFER CONTENTS ARE PRINTED.IF THAT LINE WAS THE
*   THE LAST ON A PAGE,HEADINGS ARE WRITTEN ON NEXT PAGE.
         SPACE
PRINT    ST    &BAL,PRNSAVE             SAVE LINK REGISTER
         GOIF  TWASLC,OFF=PRT120        WAS LAST STATEMENT TITLE
         L     R2,PRNSV1                RESTORE PRINT BUFFER POINTER
         SET   TWASLC,OFF               TURN OFF TITLE INDICATOR
         BR    R6                       PRINT LINE ALREADY  AVAILABLE
PRT120   BAL   &BAL,PRN600              GO GET PRINT LINE
         L     R1,LNCNT                 GET LINE COUNT
         BCT   R1,PRT200                DECREMENT AND BRANCH IF NOT 1
PRT150   MVI   CCTRL,PEJECT             EJECT CARRIAGE CONTROL
         MVC   TITCD,JDECKID            MOVE DECK ID TO TITLE
         MVC   TITLEO,JTITLE            MOVE TITLE
         MVC   PAGEO,PAGE               MOVE PAGE
         LH    R1,JPAGENO               GET PAGE COUNT
         LA    R1,D1(,R1)               INCREMENT BY 1
         STH   R1,JPAGENO               STORE NEW COUNT
         BAL   R6,PRN800                GO CONVERT IT FOR PRINT
         MVC   PGNO,DWORD2              MOVE TO PRINT LINE
         BAL   R6,PRN600                GO PRINT AND GET NEXT LINE
         MVI   CCTRL,P3SPACE            CARRIAGE CONTROL 3 SPACES
         MVC   SNDHDO,SNDHDR            GET SECOND HEADER
         MVC   SNDHID,JLVTMDT           GET MODULE ID AND DATE
         BAL   R6,PRN600                GO PRINT
         MVI   CCTRL,P2SPACE            CARRIAGE CONTROL 2 SPACES
         SET   SPACECC,ON               INDICATE TOP OF PAGE
         LH    R1,JLNCT                 GET NEW LINE COUNT
PRT200   ST    R1,LNCNT                 STORE LINES LEFT ON PAGE
         L     &BAL,PRNSAVE             RESTORE LINK REGISTER
         BR    &BAL                     ..AND RETURN
         EJECT
PRNERR   GOIF  PERR,ON=PRNXIT           GO IF NOT FIRST ERR THIS STMT
         BAL   R6,PRINT                 GET POINTER TO PRINT BUFFER
         SET   PERR,ON                  REMEMBER ERROR HAS OCCURRED
         MVC   ERRLOC,ERRNOTE           MOVE ***ERROR*** TO PRINT LINE
         B     PRNXIT                   EXIT
         SPACE 5
PRNMNO   BAL   R6,PRINT                 GET PRINT BUFFER
         TM    JTFLGB,JGEN              IS IT GENERATED
         BZ    PRNMNO1                  BRANCH AROUND IF NOT
         MVI   GENFLG,GENIND            PUT IN FLAG
         SPACE
PRNMNO1  L     R1,STMTN                 GET STATEMENT NUMBER
         BAL   R6,PRN800                CONVERT IT FOR PRINTING
         LR    R11,R2                   RET BUFFER ADDR TO PRINT RTN
         B     PRN200                   RETURN TO MNOTE ROUTINE
         EJECT
PRNDC    SET   DCSWH,ON                 TURN ON DC SWITCH
         L     R4,OPNADR                PICK UP OPERAND POINTER
         GOIF  DCMOP,ON=DC200           IS DC COMPLETE
         GOIF  DCCOMP,ON=DC220          IS PRINT OF RECORD COMPLETE
         B     PRNLST                   GO PRINT LEFT HALF
DC100    GOIF  DCCOMP,ON=PUNRTN              IS LIST OF RECORD COMPLETE
         GOIF  DCSTRT,OFF=LIST1,ELSE=FLD120  IS THIS FIRST LINE OF DC
DC200    GOIF  DCCOMP,ON=PRNXIT,ELSE=FLD110  EXIT IF LIST COMPLETE
DC220    GOIF  PDATA,OFF=PUNRTN,ELSE=PRNLST  IS PRINT DATA ON
DC300    GOIF  DCMOP,ON=PRNXIT               IS STATEMENT COMPLETED
         SET   DCCOMP,ON                     TURN ON LIST COMPLETE
         B     PUNRTN                        GO PUNCH DATA
DC500    SET   DCSTRT,ON                SET START LIST OF RECORD
         ST    R4,OPNADR                SAVE OPERAND POINTER
         GOIF  DCMOP,ON=FLD110          ARE WE MOPPING UP?
         TM    DCEVSW,DSSW+DXDSW        DS OR DXD?
         BZ    PUNRTN                   ID DC GO TO PUNCH RTN
         B     PRN200                   EXIT
         EJECT
PUNRTN   GOIF  (JDECK,JLINK),NONE=PRN200 EXIT IF DECK AND LINK BOTH OFF
         TM    EESDI,BIT1+BIT2+BIT3     ARE WE IN DSECT OR COM
         BNZ   PRN200                   YES, NO PUNCH
         TM    LHFLGS,DNTPLH            IS THERE ANY DATA TO PUNCH
         BNM   PRN200                   NO, EXIT
         L     R2,CRDPTR                GET POINTER TO PUNCH RECORD
         USING CRDSCT,R2                ESTBLISH USING FOR PUNCH RECORD
         LH    R1,CRDCNT                GET COUNT OF BYTES IN TEXT CARD
         LTR   R1,R1                    IS IT ZERO
         BZ    PUN300                   YES GO GET A NEW CARD
         CH    R1,=H'56'                IS CARD FULL
         BE    PUN300                   YES GO GET A NEW CARD
         CLC   CRDVAL,LOCATN            HAS LOCATION COUNTER JUMPED
         BNE   PUN500                   NO, GO PUNCH NEW RECORD
         CLC   CRDESD,EESDI             DID ESD ID CHANGE
         BNE   PUN500                   YES
PUN100   IC    R10,LHFLGS               GET LENGTH OF PUNCH DATA
         N     R10,=A(X'0F')            CLEAR EXTRA BITS
         AR    R1,R10                   COMPUTE NEW LENGTH
         CH    R1,=H'56'                WILL NEW DATA FIT IN THIS CARD
         BH    PUN400                   NO GO SPLIT IT
         AH    R2,CRDCNT                POINT PAST TEXT ALREADY IN CARD
         LR    R11,R10                  SAVE LENGTH OF DATA
         BCTR  R10,0                    GET MOVE LENGTH OF INPUT
         EX    R10,CRDMVC               MOVE DATA TO CARD
         A     R11,CRDVAL               ADD TO CARD LOCATION COUNTER
         ST    R11,CRDVAL               SAVE NEW ADDRESS
         STH   R1,CRDCNT                SAVE COUNT OF TEXT BYTES
         B     PRN200                   EXIT
PUN500   MVC   CRDLEN,CRDCNT            MOVE TEXT LENGTH
PUN300   MVC   CRDVAL,LOCATN            UPDATE CARD LOCATION COUNTER
         BAL   R6,PUN800                GO PUNCH CARD
         SR    R1,R1                    ZERO CARD BYTE COUNT
         XC    CRDCNT,CRDCNT            INITIALIZE BYTE COUNT
         B     PUN100                   CONTINUE OUTPUT
PUN400   LR    R4,R1                    SAVE BYTE COUNT
         SH    R4,=H'56'                GET BYTES OVER FIT
         SR    R10,R4                   GET NUMBER OF BYTES THAT FIT
         LR    R11,R10                  SAVE COUNT
         STH   R10,CRDLAC               SAVE NUMBER BYTES PUT THIS CARD
         BCTR  R10,0                    GET MOVE LENGTH
         AH    R2,CRDCNT                ADD CARD COUNT
         EX    R10,CRDMVC               MOVE PART OF INPUT TO TEXT CARD
         A     R11,CRDVAL               COMPUTE ADDRESS OF NEXT CARD
         ST    R11,CRDVAL               SAVE NEW ADDRESS
         BAL   R6,PUN800                GO PUNCH CARD
         LH    R10,CRDLAC               GET BYTES PUT LAST CARD
         AR    R10,R7                   STEP PAST BYTES ALREADY PUT
         LR    R11,R4                   SAVE LENGTH OF DATA
         BCTR  R4,0                     GET MOVE LENGTH OF DATA
         EX    R4,CRDMV2                MOVE REMAINING OUTPUT DATA
         STH   R11,CRDCNT               SAVE NEW BYTE COUNT
         A     R11,CRDVAL               COMPUTE NEXT INPUT ADDRESS
         ST    R11,CRDVAL               SAVE NEW ADDRESS
         B     PRN200                   EXIT
PUN800   JPUNCH SEQ=YES                 PUNCH RECORD
         LR    R2,R11                   LOAD TEXT POINTER
         MVC   CRDID,TXTID              MOVE IDENTIFIER TO TEXT CARD
         TR    CRDTR,JTRTABLE           TRANSLATE CARD TO EXTERNAL
         ST    R11,CRDPTR               STORE IT FOR LATER USE
         MVC   CRDVLO,CRDVAL+D1         MOVE VALUE TO PRINT
         MVC   CRDESD,EESDI             MOVE TXT ESD
         MVC   CRDLEN,=H'56'            MOVE TXT LENGTH
         BR    R6                       RETURN TO CALLING LOCATION
TXTID    JGENIN '2TXT'                  INTERNAL TEXT ID
CRDMVC   MVC   CRDTXT(0),DCDATA         EXECUTED MOVE TO TXT CARD
         DROP  R7                       INVALIDATE THIS REGISTER
         USING X5COM,R10                ESTABLISH NEW USING
CRDMV2   MVC   CRDTXT(0),DCDATA         EXECUTED MOVE TO NEW CARD
         DROP  R10                      INVALIDATE THIS REGISTER
         USING X5COM,R7                 RE-ESTABLISH COMMON USING
         EJECT
PRNPUN   GOIF  (JDECK,JLINK),NONE=PRN200  LINK OR DECK MUST BE ON
         NC    CRDCNT,CRDCNT            IS BYTES IN CARD ZERO
         BZ    PPUN10                   YES FORGET TEXT CARD
         L     R2,CRDPTR                POINT TO OUTPUT CARD
         MVC   CRDLEN,CRDCNT            MOVE NUMBER OF BYTES TO OUTPUT
         XC    CRDCNT,CRDCNT            ZERO BYTE COUNT
PPUN10   LR    R6,R11                   SAVE PUNCH BYTE COUNT
         JPUNCH SEQ=NO                  GET PUNCH BUFFER
         BCTR  R6,0                     GET MOVE LENGTH
         EX    R6,MOVPUN                MOVE DATA TO PUNCH BUFFER
         B     PRN200                   EXIT
         EJECT
PRNRPO   GOIF  JLIST,OFF=PRP030         LIST MUST BE ON         OX01764
         GOIF  PSTMT,OFF=PRPO25         AND PRINT MUST BE ON
         BAL   R6,PRINT                 GO GET PRINT BUFFER
         GOIF  JNOCNT,ON=PRP005         IF NOCOUNT ON THEN SKIP
         L     R1,STMTN                 GET STATEMENT NUMBER
         BAL   R6,PRN800                CONVERT IT
         MVC   D32+D3(D5,R2),DWORD2     MOVE STMT NUM TO PRINTLINE
         SPACE
PRP005   LH    R4,JTCPR                 GET COMMENTS POINTER
         AR    R4,R5                    POINT TO COMMENT FIELD
         MVC   D32+D9(D80,R2),D2(R4)    MOVE PRINT DATA OF REPRO
PRP007   GOIF  REPCARD,OFF=PRPO10       PRINT ONLY REPRO CARD   OX01764
         SET   REPCARD,OFF              YES, RESET BIT AND EXIT
         GOIF  JPRONLY,ON=PRN200        EXIT IF PRINT ONLY
         USING CRDSCT,R2                ESTABLISH PUNCH CARD USING
PRPO10   GOIF  (JDECK,JLINK),NONE=PRN200  ONE AT LEAST MUST BE ON
         GOIF  JSYSGEN,OFF=PRP015       DO WE NEED TO TEST
         GOIF  JPRESD,ON=PRN200         IF PRE ESD - EXIT
PRP015   NC    CRDCNT,CRDCNT            IS BYTES IN CARD ZERO
         BZ    PRPO20                   YES, NO CARD IN BUFFER
         L     R2,CRDPTR                POINT TO OUTPUT CARD
         MVC   CRDLEN,CRDCNT            MOVE NUMBER OF BYTES TO OUTPUT
         XC    CRDCNT,CRDCNT            ZERO BYTE COUNT
PRPO20   JPUNCH SEQ=NO                  GET PUNCH BUFFER
         MVC   D0(D80,R11),D2(R4)       MOVE REPRO DATA
         B     PRN200                   EXIT
PRPO25   SET   REPCARD,OFF              CLEAR REP PRT ONLY IND
         GOIF  JSYSGEN,OFF=PRP027       IF PHASE 4 WAS SKIPPED @AZ29272
         GOIF  JPRONLY,ON=PRN200        EXIT IF PRINT ONLY     @AX16963
PRP027   EQU   *                                               @AZ29272
         LH    R4,JTCPR                 GET COMMENT POINTER
         AR    R4,R5                    POINT TO COMMENT FIELD
         B     PRPO10                   GO PUNCH
PRP030   LH    R4,JTCPR                 GET COMMENT POINTER     OX01764
         AR    R4,R5                    POINT TO COMMENT FIELD  OX01764
         B     PRP007                                           OX01764
         EJECT
MOVPUN   MVC   D0(0,R11),D0(R4)         EXECUTED MOVE OF PUNCH CARD
MOVE     MVC   D0(0,&OPT),FIELD         EXECUTED MOVE-FIELD TO PRINT
         DROP  &IPT
         USING JTEXTA,&SCH              USE SCH FOR STRING MOVE
STRMOVE  MVC   D0(0,&OPT),JTSTR2        EXECUTED - STRING TO OUTPUT
PAGE     JGENIN 'PAGE'
SNDHDR   JGENIN 'LOC  OBJECT CODE    ADDR1 ADDR2  STMT   SOURCE STATEMEX
               NT'                      SECOND HEADER IN INTERNAL CODE
ERRNOTE  JGENIN '*** ERROR ***'         TOO WELL KNOWN TO BE EXPLAINED
ZMASK    DC    40X'0F'                  MASK TO REMOVE ZONE BITS
         JPATCH X5P00,8A2               5% PATCH AREA
         END
