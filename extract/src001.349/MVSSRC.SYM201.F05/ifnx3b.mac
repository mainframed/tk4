         JHEAD 'SYMBOL RESOLUTION PREPROCESSOR',                       ,
               PHASEID=X3B,                                            ,
               LEVEL=10
*                                                                     *
*FUNCTION/OPERATION-                                                  *
*   THE SYMBOL RESOLUTION PREPROCESSOR SCANS ALL GENERATED STATEMENTS *
*   AND PRODUCES A SEQUENTIAL FILE OF ALL NECESSARY RECORDS REQUIRED  *
*   BY THE ASSEMBLER SYMBOL RESOLUTION PHASE.  THIS FILE CONSISTS OF  *
*   THE FOLLOWING TYPES OF RECORDS-                                   *
*        1.   RECORDS GENERATED BY 'PUNCH' AND 'REPRO' STATEMENTS     *
*             BEFORE THE ESD.                                         *
*        2.   SYMBOL DEFINITIONS.                                     *
*        3.   SYMBOL REFERENCES.                                      *
*        4.   LITERALS.                                               *
*        5.   OTHER ASSEMBLER OPERATIONS AFFECTING THE ESD OR STORAGE *
*             ASSIGNMENT (START, CSECT, DSECT, COM, DXD, ENTRY,       *
*             EXTRN, WXTRN, EQU, ORG, LTORG, CNOP, DC, DS, END)       *
*                                                                     *
*ENTRY POINT-                                                         *
*        X3B01                                                        *
*                                                                     *
*INPUT-                                                               *
*   'TXTOUT' IS A POINTER TO THE GENERATED RECORD.                    *
*                                                                     *
*OUTPUT-                                                              *
*   FILE 3 IS A FILE OF THE RECORDS DESCRIBED ABOVE.                  *
*                                                                     *
*EXTERNAL ROUTINES-                                                   *
*   ROUTINES 'JPUTL' AND 'JPUTM' INT THE CONTROLLER TO WRITE THE      *
*   OUTPUT RECORDS.                                                   *
*                                                                     *
*EXITS, NORMAL-                                                       *
*   RETURN TO THE MACRO GENERATOR.                                    *
*                                                                     *
*EXITS, ERROR-                                                        *
*   NONE                                                              *
*                                                                     *
*TABLE/WORK AREAS-                                                    *
*   NONE                                                              *
*                                                                     *
*ATTRIBUTES-                                                          *
*   REFRESHABLE                                                       *
*                                                                     *
*NOTES-                                                               *
         EJECT
         COPY  JCOMMON
         EJECT
         COPY  JTEXT
         EJECT
         COPY  GENCOM
         EJECT
         COPY  RSYMRCD
         EJECT
*A690500-692500,708500                                         @OZ01688
*D690500-692500,708500                                         @OY09620
         JCSECT  (X3B00)
         JMODID
X3B01    STM   R8,R9,SAVVY              SAVE VASE AND VETURN VEGISTERS
         LR    R8,R12                   MY BASE
         JENTRY  (X3B01=X3B01)          ENTRY
         USING X3B01,R8                 USING
         USING JTEXT,R5                 USING
         USING RRCDL,R11                USING
         L     R5,TXTOUT                RECORD POINTER
         LR    R4,R5                    TEXT POINTER
         AH    R4,JTOPP                 OPERAND POINTER
         SR    R6,R6                    INITIALIZE OP LENGTH
         ST    R6,SYMBLCNT              INITIALIZE
         MVC   LFLGA(D3),JTFLGA         RECORD TYPE
         GOIF  JDEF,OFF=EXTRACT              NO DEFINITION RECORD
         GOIF  (JINPC,JINHB),NONE=LOCTR1     SKIP IF PC NOT REQUIRED
         TS    INHI                          SEE IF IN SECTION
         BNZ   LOCTR1                   SKIP IF ALREADY IN SECTION
         GOIF  JINHB,ON=LOCTR1          SKIP IF PC NOT REQUIRED
         JPUTM FILE=FILE3,ADDR=LOCTRUPC INITIATE PC
LOCTR1   GOIF  JPSOP,OFF=LOCTR3         SEE IF MACHINE OP
         SET   FRCMI,ON                 INDICATE PSEUDO OP
         GOIF  JTEND,EQUAL=LOCTR0       END
         GOIF  JTUSING,EQUAL=USING      FINISHED IF USING
         GOIF  JTPUNCH,EQUAL=PUNCH      SKIP IF PUNCH
         GOIF  JTREPRO,EQUAL=REPRO      SKIP IF REPRO
         GOIF  JTCXD,EQUAL=LOCTR2       SET OP LENGTH TO 4
         GOIF  JTCCW,NOTEQ=LOCTR4       SKIP IF NOT CCW
         LA    R6,D4                    SET OP LENGTH TO 4
LOCTR2   LA    R6,D4(,R6)               SET OP LENGTH TO 4 OR 8
         B     LOCTR4                   CONTINUE
LOCTR3   MVI   LFLGA+D2,JTPMOP          PSEUDO OP CODE FOR MACHINE OP
         IC    R6,JTFLGA                GET OP LENGTH
         N     R6,=F'3'                 ISOLATE SIGNIFICANT BITS
         LA    R6,D2(R6,R6)             COMPUTE LENGTH
LOCTR4   SET   JSYSGEN,ON               CALL X4
LOCTR0   LR    R3,R5                    POINTER
         AH    R3,JTNMP                 NAME POINTER
         SR    R2,R2                    INITIALIZE TO ZERO
         GOIF  JNMERR,ON=LOCTR7         NO NAME, NO ERROR
         CLI   JTNML-JTNMO(R3),D0         SEE IF NAMED
         BNZ   LOCTR5                       THERE'S A NAME
LOCTRR   GOIF  JPSOP,ON=LOCTR7          FORCE PSEUDO OP
         GOIF  FRCMI,ON=LOCTR7,ELSE=EXTRACT1 FORCE FIRST MACHINE INSTR
LOCTR5   CLI   JTNAME-JTNMO(R3),JPERIOD     SEE IF SEQUENCE SYMBOL
         BE    LOCTRR                     NOT REALLY A NAME
LOCTR6   LA    R2,D10                   LENGTH OF NAME APPENDAGE
LOCTR7   STH   R2,NAMELNG                 SAVE
         LA    R2,D12(,R2)                  RECORD LENGTH
         GOIF  (JPSOP,JREQOP),NOTALL=LOCTR8   SKIP NOT REQUIRED OPERAND
         TM    JTOPO-JTOPO(R4),JTOPOCD      SEE IF SWITCH ON
         BZ    LOCTRA                     NO
         LA    R4,JTOPL-JTOPO(,R4)      BUMP
LOCTRA   CLI   JTOPL-JTOPO(R4),D0       SEE IF ZERO
         BZ    LOCTR8                   SKIP IF NOT
         SR    R1,R1                    CLEAR REGISTER
         IC    R1,JTOPL-JTOPO(,R4)      GET OPERAND LENGTH
         LA    R2,D2(R1,R2)             RECORD LENGTH
LOCTR8   GOIF  JPSOP,ON=PASSIT          BRANCH IF PSEUDO OP
         SET   FRCMI,OFF                INDICATE MACHINE INSTRUCTION
PASSIT   JPUTL FILE=FILE3,BUFREQ=(R2)   GET BUFFER
         STH   R2,RRCDL                 RECORD LENGTH
         MVC   RFLGA(D3),LFLGA          RECORD TYPE
         XC    RFLDI(D3),RFLDI          INITIALIZE TO ZERO
         MVI   RFLGB,D0                 DON'T PASS FLGB
         L     R0,LCR                   GET LOCATION COUNTER
         ST    R0,RLCTR                 PASS IN RECORD
         SR    R0,R0                    PUT A ZERO
         ST    R0,LCR                   BACK
         CLI   NAMELNG+D1,D0            SEE IF ANME APPENDAGE
         BZ    LOCTR9                   SKIP IF NO NAME
         IC    R1,JTNML-JTNMO(,R3)      GET NAME LENGTH
         BCTR  R1,D0                      GET MACHINE LENGTH
         MVC   RNAME+D1(D7),=7AL1(JBLANK)   PAD WITH BLANKS
         EX    R1,LOCTRMVC                MOVE IN NAME
         LA    R1,RFIELDN(,R1)          SET FLAG ON
         STC   R1,RFLDI                 PASS FIELD INDICATORS
         STH   R6,RLNGQ                 PASS LENGTH ATTRIBUTE
         SH    R2,NAMELNG               COMPENSATE FOR RECORD LENGTH
LOCTR9   SH    R2,=H'14'                SEE IF OPERAND PRESENT
         BNP   EXTRACT                  SKIP IF NO OPERAND
         SET   RFIELDX,ON               INDICATE OPERAND PRESENT
         AH    R11,NAMELNG              BUMP PAST NAME, IF PRESENT
         EX    R2,LOCTRMOV              MOVE IN OPERAND
         AR    R11,R2                   BUMP PAST OPERAND
         MVI   RFLDA,JBLANK             AND INSERT A BLANK
EXTRACT  GOIF  JREF,OFF=FINIS           EXIT IF NOT REQUESTED
EXTRACT1 TM    JTOPO-JTOPO(R4),JTOPOCD  SEE IF CARD POINTER
         BZ    EXTRACT0                 NAH
         LA    R4,JTOPL-JTOPO(,R4)      HOP
EXTRACT0 CLI   JTOPL-JTOPO(R4),D0       SEE IF OPERAND
         BZ    FINIS                    EXIT IF NO OPERAND
         SET   (VCONV,MODV),OFF         CLEAR VCON BITS
         SET   (VCONW,MODW),OFF         CLEAR VCON BITS
         SR    R3,R3                    CLEAR REGISTER
         IC    R3,JTOPL-JTOPO(,R4)      GET OPERAND LENGTH
         LA    R5,D1(R3,R4)             POINT TO END-OF-OPERAND
         LA    R3,D2(,R4)               POINT TO START-OF-OPERAND
         LA    R4,D1                    INCREMENT
EXTRACT4 TM    LFLGA,JPSOP+JEXTB        SEE IF EXTERNAL SYMBOL
         BNO   EXTRACT2                 SKIP IF NOT
EXTRACT5 CLI   D0(R3),JAT               SEE IF INVALID CHARACTER
         BH    FINIS                    INVALID CHARACTER
         CLI   D0(R3),J9                SEE IF INVALID CHARACTER
         BH    SYMBOL                   POSSIBLE EXTERNAL SYMBOL
         B     FINIS                    SYNTAX ERROR
EXTRACT2 MVC   SUPPRESV,LFLGA           SET SUPPRESS SWITCH
         SET   VCONV,OFF                CLEAR VCON BIT
         SET   MODV,OFF                 CLEAR MODIFIER BIT
EXTRACT3 MVC   SUPPRESW,SUPPRESV        SET SUPPRESS SWITCH
LOOK     CLI   D0(R3),JEQUAL            SEE IF ALPHANUMERIC
         BL    ALPHANUM                 GO IF ALPHANUMERIC
LOOKY    CLI   D0(R3),JPERIOD           SEE IF VALID CHARACTER
         BH    FINIS                    GO IF INVALID CHARACTER
         SR    R2,R2                    ZERO INDEX
         TRT   D0(D1,R3),INDEX          COMPUTE INDEX
         B     PIVOT(R2)                INVESTIGATE SPECIAL CHARACTER
COMMA    CH    R4,PARENCNT              SEE IF INSIDE PARENS
PIVOT    EQU   COMMA                    SAME
         BNH   ADVANCE                  IGNORE IF INSIDE PARENS
         BXLE  R3,R4,EXTRACT2           END-OF-OPERAND ENCOUNTERED
         B     FINIS                    END-OF-OPERAND
LPARN    SET   SUPPRESS,OFF             SET SUPPRESS SWITCH OFF
         LH    R1,PARENCNT              GET PAREN COUNT
         GOIF  VCONW,ON=CHCKMOD         CHECK IF VCON
LPARN1   AR    R1,R4                    BUMP IT BY ONE
         B     STPAR                    CONTINUE
RPARN    LH    R1,PARENCNT              GET PAREN COUNT
         BCT   R1,STPAR                 WATCH PAREN LEVEL
         EX    R0,EXTRACT3              SET SUPPRESS SWITCH
STPAR    STH   R1,PARENCNT              SAVE PAREN COUNT
ADVANCE  BXLE  R3,R4,LOOK                 LOOK AT NEXT CHARACTER
FINIS    A     R6,LCR                       ADD LENGTH OF CURRENT OP
         ST    R6,LCR                         SAVE FOR BYRON
         L     R2,TXTOUT                        RECORD POINTER
         MVC   JTSYMCNT-JTRLI(D1,R2),SYMBLCNT+D1  SYMBOL COUNT
         LM    R8,R9,SAVVY                      RESTORE REGISTERS
         BR    R9                             RETURN TO BYRON
USING    SET   JSYSGEN,ON               INDICATE X4 TO BE CALLED
         B     EXTRACT1                 SCAN OPERAND
EQUAL    TM    LFLGA,JPSOP                  SEE IF MACHINE OP
         BO    FINIS                      LITERAL ILLEGAL OTHERWISE
         SR    R5,R3                    GET LENGTH OF LITERAL
         CLI   D1(R3),JBLANK            CAN'T HAVE A BLANK FOLLOWING
         BE    FINIS                    OR IT'S CURTAINS FOR THIS GUY
         LA    R2,D14(,R5)              LENGTH OF RECORD
         JPUTL FILE=FILE3,BUFREQ=(R2)   GET BUFFER
         STH   R2,RRCDL                 RECORD LENGTH
         MVC   RFLGA(D6),LITRHDR        RECORD HEADER
         L     R0,LCR                   LOCATION COUNTER
         ST    R0,RLCTR                 PASS IN RECORD
         SR    R0,R0                    PUT A ZERO BACK
         ST    R0,LCR                   INTO THE LOCATION COUNTER
         EX    R5,LITRMVC               MOVE LITERAL INTO RECORD
         STC   R5,RLNGA                 PASS LENGTH OF LITERAL
         AR    R11,R5                   LOCATE THE END OF LITERAL
         MVI   RFLDA,JBLANK             AND APPEND A BLANK
         LH    R0,SYMBLCNT              GET COUNT OF SYMBOLS
         AR    R0,R4                    BUMP COUNT BY ONE
         STH   R0,SYMBLCNT              SAVE COUNT OF SYMBOLS
         SET   (VPSOP,SUPPREST),ON      SET SUPPRESS SWITCH ON
         AR    R5,R3                    POINT TO THE END OF OPERAND
         AR    R3,R4                      BUMP COLUMN POINTER
         B     EXTRACT3                     LOOK FOR MORE SYMBOLS
ALPHANUM GOIF  (WPSOP,SUPPRESS),ALL=CHCKVCON SUPPRESS CONDITION ON
         CLI   D0(R3),JA                    SEE IF ALPHA
         BL    ELFLUSHO                   DECIMAL SELF-DEFINING-VALUE
         CLI   D1(R3),JQUOTE            SEE IF FOLLOWED BY A QUOTE
         BNE   SYMBOL                   SYMBOL ENCOUNTERED
         CLI   D0(R3),JL                SEE IF LENGTH ATTRIBUTE
         BXH   R3,R4,FINIS              BUMP COLUMN POINTER BY ONE
         BE    ADVANCE                  LENGTH ATTRIBUTE REFERENCE
QUOTE    BALR  R1,D0                    PIVOT
         BXH   R3,R4,FINIS              BUMP COLUMN POINTER
         CLI   D0(R3),JQUOTE            LOOKING FOR QUOTES ONLY
         BNER  R1                       IGNORE THE OTHERS
         BXH   R3,R4,FINIS              BUMP COLUMN POINTER
         CLI   D0(R3),JQUOTE            CHECK FOR PAIRED QUOTES
         BNE   LOOK                     VALID DELIMITER
         BR    R1                       TREAT AS ONE
ELFLUSHO BALR  R1,D0                    PIVOT
         BXH   R3,R4,FINIS              BUMP COLUMN POINTER
         CLI   D0(R3),JEQUAL            TEST FOR DELIMITERS
         BLR   R1                       LOOP ON LOW
         B     LOOKY                    CHECK THIS ONE OUT
SYMBOL   LR    R2,R3                    SAVE COLUMN POINTER
SYMBOL1  BXH   R2,R4,SYMBOL2            ADVANCE COLUMN POINTER
         CLI   D0(R2),JEQUAL            LOOK FOR DELIMITER
         BL    SYMBOL1                  LOOP IF NOT FOUND
SYMBOL2  SR    R2,R3                    FIND LENGTH OF SYMBOL
         CH    R2,=H'8'                 MUST NOT BE MORE THAN 8 CHARS
         BH    FINIS                    OR IT'S A BADDIE
         TM    LFLGA,JPSOP+JEXTB        SEE IF EXTERNAL SYMBOL
         BNO   SYMBOLS                  SKIP IF NOT
         LA    R1,D0(R2,R3)             UPDATE COLUMN POINTER
         CR    R1,R5                    SEE IF END-OF-OPERAND
         BH    SYMBOLS                  SKIP IF SO
         CLI   D0(R1),JBLANK            SEE IF END-OF-OPERAND
         BE    SYMBOLS                  SKIP IF SO
         CLI   D0(R1),JCOMMA            SEE IF VALID DELIMITER
         BNE   FINIS                    INVALID DELIMITER
SYMBOLS  LH    R1,SYMBLCNT              GET SYMBOL COUNT
         AR    R1,R4                    BUMP IT BY ONE
         STH   R1,SYMBLCNT              SAVE SYMBOL COUNT
         SET   JSYSGEN,ON               CALL X4
         JPUTL FILE=FILE3,BUFREQ=D24    GO FIND A BUFFER
         MVC   RRCDL(D24),SYMBOL4       BUILD RECORD HEADER
         BCTR  R2,D0                    GET LENGTH OF SYMBOL
         EX    R2,SYMBOL3               MOVE IN SYMBOL
         GOIF  (VCONW,MODW),ALL=NOTVCON,NONE=NOTVCON
         OI    RNAME,BIT0               INDICATE VCON OPERAND
NOTVCON  AR    R3,R2                    UPDATE COLUMN POINTER
         LA    R2,RFIELDN(,R2)          FLAG
         STC   R2,RFLDI                 PASS SYMBOL LENGTH IN RECORD
         TM    LFLGA,JPSOP+JEXTB        SEE IF EXTERNAL SYMBOL
         BNO   ADVANCE                  SKIP IF NOT
         MVC   RTYPE,LFLGA+D2           SET TYPE
         CLI   D1(R3),JCOMMA            SEE IF MULTIPLE OPERAND
         BNE   FINIS                    END-OF-OPERAND
         AR    R3,R4                    UPDATE COLUMN POINTER
         BXLE  R3,R4,EXTRACT5           CHECK OUT NEXT OPERAND
         B     FINIS                    ALL DONE OTHERWISE
SYMBOL3  MVC   RNAME(D0),D0(R3)         EXECUTED INSTRUCTION
SYMBOL4  DC    H'24',AL1(JPSOP,D0,JTSYMBL,D0),3H'0',8AL1(JBLANK),H'0' X
CHCKVCON CLI   D0(R3),JV                CHECK IF VCON
         BNE   ELFLUSHO                 CONTINUE IF NOT
         SET   VCONV,ON                 INDICATE VCON
         SET   VCONW,ON                 INDICATE VCON
         B     ELFLUSHO                 CONTINUE
CHCKMOD  LTR   R1,R1                    CHECK PAREN COUNT
         BNZ   LPARN1                   BR IF WITHIN PARENS
         SR    R3,R4                    POINT TO CHAR BEFORE LEFT
         CLI   D0(R3),JL                LENGTH MODIFIER
         BE    CHCKMOD5                 BRANCH IF YES
         CLI   D0(R3),JE                EXPONENT MODIFIER
         BE    CHCKMOD5                 BRANCH IF SO
         CLI   D0(R3),JS                SCALE MODIFIER
         BNE   CHCKMOD6                 VCON IF NOT
CHCKMOD5 SET   MODW,ON                  INDICATE MODIFIER
CHCKMOD6 AR    R3,R4                    UPDATE POINTER
         B     LPARN1                   CONTINUE
REPRO    LR    R4,R5                    TEXT POINTER
         AH    R4,JTCPR                 COMMENT POINTER
PUNCH    GOIF  INHIBIT,ON=FINIS         EXIT IF ON
         GOIF  (JDECK,JLINK),NONE=FINIS   SKIP IF NOT OPTIONED
         SET   JPRESD,ON                PINCHED
         SR    R3,R3                    CLEAR REGISTER
         IC    R3,JTOPL-JTOPO(,R4)      GET OPERAND LENGTH
         LA    R2,D7(,R3)               GET RECORD LENGTH
         JPUTL FILE=FILE3,BUFREQ=(R2)   GET BUFFER
         STH   R2,RRCDL                 RECORD LENGTH
         MVC   RFLGA(D4),PUNCHEAD       PUNCH RECORD HEADER
         EX    R3,PUNCHMVC              MOVE IN OPERAND
         GOIF  JTPUNCH,EQUAL=FINIS      SKIP IF PUNCH STATEMENT
         MVI   RTYPE,JTPREP             REPRO
         B     FINIS                     FINIS
PUNCHEAD DC    AL1(D0,D0,JTPPCH,D1)        TYPE
PUNCHMVC MVC   RESDI(D0),JTOPL-JTOPO(R4)     EXECUTED INSTRUCTION
LITRMVC  MVC   RLNGA(D0),D0(R3)                EXECUTED INSTRUCTION
LITRHDR  DC    AL1(JPSOP+JDEF,D0,JTLITR,RFIELDX) LITERAL RECORD HEADER
LOCTRUPC DC    H'8',AL1(JPSOP,D0,JTINPC,D0)    UNINITIATED PRIVATE CODE
LOCTRMVC MVC   RNAME(D0),JTNAME-JTNMO(R3)    EXECUTED INSTRUCTION
LOCTRMOV MVC   RLNGA(D0),JTOPL-JTOPO(R4)   EXECUTED INSTRUCTION
INDEX    EQU   *-JEQUAL                  TABLE ORIGIN
         DC    YL1(EQUAL-PIVOT)         EQUAL SIGN
         DC    YL1(LPARN-PIVOT)         LEFT PAREN
         DC    YL1(ADVANCE-PIVOT)       PLUS SIGN
         DC    YL1(ADVANCE-PIVOT)       MINUS SIGN
         DC    YL1(ADVANCE-PIVOT)       ASTERISK
         DC    YL1(ADVANCE-PIVOT)       SLASH
         DC    YL1(RPARN-PIVOT)         RIGHT PAREN
         DC    YL1(COMMA-PIVOT)         COMMA
         DC    YL1(FINIS-PIVOT)         BLANK
         DC    YL1(QUOTE-PIVOT)         QUOTE
         DC    YL1(FINIS-PIVOT)         AMPERSAND
         DC    YL1(ADVANCE-PIVOT)       PERIOD
         JPATCH X3B00,41F
         END
