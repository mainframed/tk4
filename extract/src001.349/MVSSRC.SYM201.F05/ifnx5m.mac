* /* START OF SPECIFICATIONS ****
*02* PROCESSOR = ASSEMBLER
**** END OF SPECIFICATIONS ***/
         TITLE ' TEXT AND MITAB MACRO DEFINITIONS '
         MACRO
&LABEL   TEXT  &ADDR1,&DELIM,&ADDR2
.*********************************************************************.
.*  CHECK FOR DELIMITER AND ADVANCE TEXT POINTER WHEN APPROPRIATE    *.
.*********************************************************************.
         GBLC  &TCP
&LABEL   C     &TCP,OPNEND              DOES TEXT END HERE ?
         BNL   &ADDR1                   YES
         AIF   ('&DELIM' EQ '').MEND    GO IF NO DELIMITER SPECIFIED
         GOIF  &DELIM,NE=&ADDR2         GO IF DELIMITER NOT IN TEXT
         LA    &TCP,NXTCH               POINT TO NEXT CHARACTER
.MEND    MEND
         SPACE 5
         MACRO
&NAME    MITAB
.*********************************************************************.
.* THIS MACRO IS ONLY CALLED ONCE.ITS PURPOSE IS TO SET THE GLOBAL   *.
.* VARIABLES USED IN THE CONSTRUCTION OF THE FAR TABLE.THE VARIABLES *.
.* CORRESPOND TO THE BIT SETTINGS DEFINED IN THE FARENT DSECT - IE   *.
.* &FSNLIT CORRESPONDS TO FSNLIT ETC.                                *.
.*********************************************************************.
         GBLA  &FSNLIT,&FSALOC,&FILEN,&FIALOC
         GBLA  &RIDEC,&RIBND,&RIDIV
         GBLA  &RSMOD,&RSALW,&RSDIV
&FSNLIT  SETA  32768
&FSALOC  SETA  4096
&FILEN   SETA  2048
&FIALOC  SETA  256
&RIDEC   SETA  128
&RIBND   SETA  16
&RIDIV   SETA  1
&RSMOD   SETA  &RIDEC
&RSALW   SETA  8
&RSDIV   SETA  &RIDIV
&NAME    EQU   *
         MEND
         TITLE ' OPND MACRO DEFINITION '
         MACRO
&NAME    OPND  &T,                      TYPE                           X
               &A,                      ALLOCATION                     X
               &R                       RESTRICTIONS
.*********************************************************************.
.* THIS MACRO IS CALLED TO CONSTRUCT AN OPERAND ENTRY IN THE FAR     *.
.* TABLE.NO CODE IS GENERATED - THE TABLE ENTRY IS PASSED IN THE     *.
.* GLOBAL &E(&I) TO THE NEAREST FOLLOWING OPCD MACRO.                *.
.* THE VALID PARAMETER FORMATS ARE -                                 *.
.*                                                                   *.
.* PARM MEANING      FORMAT   DESCRIPTION                            *.
.* ---  -------      ------   -----------                            *.
.* &T   TYPE         I OR R   IMMEDIATE,REGISTER OR MASK.            *.
.*                   S        STORAGE,SHIFT OR I/O UNIT.FORMAT D(B). *.
.*                   SX       INDEXED STORAGE.FORMAT IS D(X,B).      *.
.*                   SL       STORAGE WITH LENGTH.FORMAT IS D(L,B).  *.
.* &A   ALLOCATION   N        N IS 1,2 OR 3 AND SETS  ALLOCATION FOR *.
.*                            TYPE I OPERANDS TO FIRST,SECOND OR     *.
.*                            BOTH HOLFBYTES OF SECOND INSTR BYTE.   *.
.*                            FOR TYPE S OPERANDS,SETS ALLOCATION TO *.
.*                            SECOND,THIRD OR FOURTH HALWORD,RESP.   *.
.*                   (N,M)    USED FOR SX AND SL TYPE OPERANDS.N     *.
.*                            GIVE S PART ALLOCATION M I PART ALLOC. *.
.* &R   RESTRICTIONS N OR (N,M) FOR I OPERANDS.N IS DIVISIBILITY     *.
.*                            (POWER OF 2) AND M IS UPPER BOUND      *.
.*                            (POWER OF 2).                          *.
.*                   A OR                                            *.
.*                   (A,B,..) FOR S,SX AND SL OPERANDS.A,B ETC CAN   *.
.*                            BE EITHER OF                           *.
.*                            H,F,D     H,F OR D ALIGNMENT           *.
.*                            ALW       ALWAYS CHECK ALIGNMENT       *.
.*                            NLIT      NO LITERAL ALLOWED           *.
.*                            MOD       MODIFIED AT EXECUTION        *.
.*********************************************************************.
         GBLA  &E(5)                    FAR ENTRY CANDIDATE
         GBLA  &I                       ENTRY INDEX
         GBLA  &M                       MAXIMUM NUMBER OF OPERANDS
         GBLB  &ERR                     ERROR HAS OCCURRED
         GBLA  &FSNLIT,&FSALOC,&FILEN,&FIALOC     FLAGS
         GBLA  &RIDEC,&RIBND,&RIDIV     MORE FLAGS
         GBLA  &RSMOD,&RSALW,&RSDIV     GOOD GRIEF,MORE FLAGS
         LCLA  &J                       SUBSCRIPT
&I       SETA  &I+1                     POINT TO NEXT ENTRY
         AIF   (&I LE &M).CT
         MNOTE 8,'TOO MANY OPERANDS'
.ERR     ANOP
&ERR     SETB  1
         MEXIT
.* CHECK TYPE
.*
.CT      AIF   ('&T' EQ 'R' OR '&T' EQ 'I').I
         AIF   ('&T' EQ 'S').S
         AIF   ('&T' EQ 'SX').SX
         AIF   ('&T' EQ 'SL').SL
         MNOTE 8,'INVALID TYPE'
         AGO   .ERR
.* I (OR R) TYPE OPERAND
.*
.I       AIF   (N'&A NE 1).IVP
         AIF   (&A EQ 1 OR &A EQ 2).I12
&E(&I)   SETA  &A*&FIALOC               SET FIALOC
         AGO   .RIDIV
.I12     ANOP
&E(&I)   SETA  (3-&A)*&FIALOC
.RIDIV   AIF   (N'&R EQ 0).OK
         AIF   (K'&R(1) EQ 0).RIBND
&E(&I)   SETA  &E(&I)+&R(1)*&RIDIV      SET RIDIV
.RIBND   AIF   (N'&R EQ 1).OK
         AIF   (K'&R(2) EQ 0).RIDEC
&E(&I)   SETA  &E(&I)+&R(2)*&RIBND      SET RIBND
.RIDEC   AIF   (N'&R EQ 2).OK
         AIF   ('&R(3)' NE 'DEC').IVP
&E(&I)   SETA  &E(&I)+&RIDEC            SET RIDEC
         AGO   .OK
.* S TYPE OPERAND
.S       AIF   (N'&A NE 1).IVP
.SP      ANOP
&E(&I)   SETA  &E(&I)+&A(1)*&FSALOC     SET FSALOC
.RS      AIF   (&J GE N'&R).OK
&J       SETA  &J+1
         AIF   ('&R(&J)' EQ 'H').H
         AIF   ('&R(&J)' EQ 'F').F
         AIF   ('&R(&J)' EQ 'D').D
         AIF   ('&R(&J)' EQ 'ALW').RSALW
         AIF   ('&R(&J)' EQ 'NLIT').FSNLIT
         AIF   ('&R(&J)' EQ 'MOD').RSMOD
.IVP     MNOTE 8,'INVALID PARAMETER'
         AGO   .ERR
.H       ANOP
&E(&I)   SETA  &E(&I)+1*&RSDIV          SET RSDIV FOR H ALIGNMENT
         AGO   .RS
.F       ANOP
&E(&I)   SETA  &E(&I)+2*&RSDIV          SET RSDIV FOR F ALIGNMENT
         AGO   .RS
.D       ANOP
&E(&I)   SETA  &E(&I)+3*&RSDIV          SET RSDIV FOR D ALIGNMENT
         AGO   .RS
.RSALW   ANOP
&E(&I)   SETA  &E(&I)+&RSALW            SET RSALW
         AGO   .RS
.FSNLIT  ANOP
&E(&I)   SETA  &E(&I)+&FSNLIT           SET FSNLIT
         AGO   .RS
.RSMOD   ANOP
&E(&I)   SETA  &E(&I)+&RSMOD            SET RSMOD
         AGO   .RS
.* SX TYPE OPERAND
.*
.SX      AIF   (N'&A NE 2).IVP
         AIF   (&A(2) EQ 1 OR &A(2) EQ 2).SX12
&E(&I)   SETA  &E(&I)+&A(2)*&FIALOC     SET FIALOC
         AGO   .SP
.SX12    ANOP
&E(&I)   SETA  &E(&I)+(3-&A(2))*&FIALOC
         AGO   .SP
.* SL TYPE OPERAND
.*
.SL      ANOP
&E(&I)   SETA  &E(&I)+&FILEN            SET FILEN
         AGO   .SX
.OK      ANOP
         MEND
         TITLE ' OPCD MACRO DEFINITION '
         MACRO
&NAME    OPCD  &O
.*********************************************************************.
.* THIS MACRO IS CALLED TO GENERATE AN INSTRUCTION ENTRY IN THE FAR  *.
.* TABLE (IF AN IDENTICAL ONE IS NOT ALREADY THERE) AND TO CONSTRUCT *.
.* A POINTER IN THE FGT OR FGTX TABLE TO THE FAR ENTRY FOR THE       *.
.* INSTRUCTION.                                                      *.
.* THE OPERAND IS THE ONE- OR TWOBYTE OPCODE FOR THE INSTRUCTION.    *.
.* FOR EXTENDED BRANCHES,TWO BYTES MUST BE USED - EG X'07F0' FOR BR  *.
.*********************************************************************.
         GBLA  &E(5)                    CANDIDATE FOR FAR ENTRY
         GBLA  &I                       INDEX IN ENTRY
         GBLB  &ERR                     ERROR HAS OCCURRED
         GBLA  &M                       MAXIMUM NUMBER OF OPERANDS
         GBLA  &F1(255),&F2(255),&F3(255),&F4(255),&F5(255)
         GBLA  &FGT1(128),&FGT2(128)    **** STUPID ASSEMBLER ***
         GBLA  &FGTXO(255),&FGTXP(255)  FGT FOR EXTENDED OPCODES
         GBLA  &FP                      FAR POINTER
         GBLA  &XOCP                    POINTER FOR EXTENDED OPCODES
         LCLA  &J,&N                    INDICES
         LCLC  &FOP(5)                  FAR OPERANDS
         AIF   (&ERR).ERR
.L1      ANOP
&J       SETA  &J+1
         AIF   (&J GT &FP).NEW          GO MAKE NEW ENTRY
         AIF   (&F1(&J) NE &E(1)).L1    GO IF 1:ST OPND NOT EQUAL
         AIF   (&F2(&J) NE &E(2)).L1    GO IF 2=ND OPND NOT EQUAL
         AIF   (&F3(&J) NE &E(3)).L1    GO IF 3=RD OPND NOT EQUAL
         AIF   (&F4(&J) NE &E(4)).L1    GO IF 4=TH OPND NOT EQUAL
         AIF   (&F5(&J) NE &E(5)).L1    GO IF 5=TH OPND NOT EQUAL
.OLD     AIF   (&O GT X'FF').XOC        GO IF EXTENDED OPCODE
         AIF   (&O GT 127).FGT2
&FGT1(&O+1)   SETA  &J-1                SET FAR POINTER IN FGT
         AGO   .OK
.FGT2    ANOP
&FGT2(&O-127) SETA  &J-1                SET FAR POINTER IN FGT
         AGO   .OK
.XOC     ANOP
&XOCP    SETA  &XOCP+1
&FGTXO(&XOCP) SETA &O
&FGTXP(&XOCP) SETA  &J-1                SET FAR POINTER IN FGTX
         AGO   .OK
.NEW     ANOP
&N       SETA  2
.L2      AIF   (&N GT &M).GEN
&FOP(&N) SETC  ','.'&E(&N)'
&N       SETA  &N+1
         AGO   .L2
.GEN     ANOP
&NAME    DC  AL2(&E(1)&FOP(2)&FOP(3)&FOP(4)&FOP(5))
&FP      SETA  &FP+1
&F1(&FP) SETA  &E(1)
&F2(&FP) SETA  &E(2)
&F3(&FP) SETA  &E(3)
&F4(&FP) SETA  &E(4)
&F5(&FP) SETA  &E(5)
         AGO   .OLD
.ERR     MNOTE 8,'NO TABLE ENTRIES GENERATED'
         AGO   .END
.OK      ANOP
         MNOTE *,'FAR ENTRY NUMBER IS &J'
.END     ANOP
&E(1)    SETA  0
&E(2)    SETA  0
&E(3)    SETA  0
&E(4)    SETA  0
&E(5)    SETA  0
&I       SETA  0
&ERR     SETB  0
         MEND
         TITLE ' MIEND MACRO DEFINITION '
         MACRO
&NAME    MIEND
.*********************************************************************.
.* THIS MACRO IS ONLY CALLED ONCE.ITS PURPOSE IS TO GENERATE CODE    *.
.* FOR THE FGT AND FGTX TABLES THAT HAVE BEEN GUILT BY PRECEDING     *.
.* OPCD MACRO INSTRUCTIONS.                                          *.
.*********************************************************************.
         GBLA  &FGT1(128),&FGT2(128)
         GBLA  &FGTXO(255),&FGTXP(255),&XOCP
         LCLA  &J,&N
&NAME    EQU   *    FAR GET TABLE FOR INSTRUCTIONS WITH ONE-BYTE OPCODE
.L1      AIF   (&J GE 256).XOC
         AIF   (&J GT 127).FGT2
         DC    AL1(&FGT1(&J+1),&FGT1(&J+2),&FGT1(&J+3),&FGT1(&J+4),&FGT?
               1(&J+5),&FGT1(&J+6),&FGT1(&J+7),&FGT1(&J+8))
         AGO   .COM
.FGT2    ANOP
         DC    AL1(&FGT2(&J-127),&FGT2(&J-126),&FGT2(&J-125),&FGT2(&J-1X
               24),&FGT2(&J-123),&FGT2(&J-122),&FGT2(&J-121),&FGT2(&J-1X
               20))
.COM     ANOP
&J       SETA  &J+8
         AGO   .L1
.XOC     ANOP
&J       SETA  1
&NAME.X  EQU   *    FAR GET TABLE FOR INSTRUCTIONS WITH EXTENDED OPCODE
.*
.* THIS SECTION ASSUMES THAT EXTENDED INSTRUCTIONS HAVE BEEN ENTERED
.* SORTED IN ASCENDING ORDER ON THE OPCODE.
&N       SETA  1
         AIF   (&XOCP EQ 0).OUT
.L2      AIF   (&FGTXO(&J)/256 NE &FGTXO(&N)/256).GEN
         AIF   (&FGTXP(&J) NE &FGTXP(&N)).GEN
&N       SETA  &N+1
         AIF   (&N LE &XOCP).L2
.GEN     DC    AL2(&FGTXO(&N-1))        MAX OPCODE
         DC    AL1(&FGTXP(&N-1))        FAR ENTRY NUMBER
&J       SETA  &N
         AIF   (&N LE &XOCP).L2
.OUT     MEND
         TITLE ' GLOBAL DECLARATIONS AND INITIAL SETTINGS FOR X5M '
* THE GLOBAL &M IS THE MAXIMUM NUMBER OF OPERANDS IN ANY MACHINE
* INSTRUCTION.EACH ENTRY IN FAR CONSISTS OF &M HALFWORDS.THE
* MAXIMUM NUMBER THAT CAN BE ACCOMODATED WITH PRESENT BIT ASSIGNMENTS
* IS 5 - THREE STORAGE OPERANDS AND TWO IMMEDIATE OPERANDS.
         GBLA &M
* REGISTERS
         GBLC  &SCH                     SCRATCH REG
         GBLC  &RTN                     RETURN REG
         GBLC  &COM                     PHASE COMMON AREA ADDRESS
         GBLC  &SCR                     SCRATCH - LOCAL USE ONLY
         GBLC  &WRK                     WORK
         GBLC  &TBP                     TEXT BASE POINTER
         GBLC  &TCP                     TEXT CURRENT POINTER
         GBLC  &FRG                     FAR TABLE POINTER
         GBLC  &ESD1                    ESDID OF EXPRESSION 1
         GBLC  &EXP1                    VALUE OF EXPRESSION 1
         SPACE 2
&M       SETA  3
&COM     SETC  'R7'
&SCR     SETC  'R14'
&WRK     SETC  'R6'
&TBP     SETC  'R5'
&TCP     SETC  'R10'
&SCH     SETC  'R15'
&RTN     SETC  'R9'
&ESD1    SETC  'R6'
&EXP1    SETC  'R4'
&FRG     SETC  'R3'
* NOTE - R1 AND R2 ARE DESTROYED IN THIS MODULE
         JHEAD 'MACHINE INSTRUCTION PROCESSOR',                        X
               PHASEID=X5M,                                            X
               LEVEL=10
*FUNCTION/OPERATION-                                                  *
*   ASSEMBLE MACHINE INSTRUCTIONS.                                    *
*   THE OPERAND LIST OF A MACHINE INSTRUCTION CONSISTS OF NONE OR     *
*   MORE OPERANDS,SEPARATED BY COMMAS.EACH OPERAND IS CONSIDERED      *
*   TO CONSIST OF AN OPTIONAL 'I PART' AND AN OPTIONAL 'S PART'.      *
*   THE FOLLOWING OPERAND TYPES ARE RECOGNIZED -                      *
*                                                                     *
*   TYPE FORMAT DESCRIPTION                       I PART   S PART     *
*   ---- ------ -----------                       -----    ------     *
*   I    I      IMMEDIATE,MASK OR REGISTER FIELD   I        N/A       *
*   S    D(B)   STORAGE,OR SHIFT OR I/O UNIT       N/A      D(B)      *
*   SX   D(X,B) INDEXED STORAGE OPERAND            X        D(B)      *
*   SL   D(L,B) STORAGE OPERAND WITH LENGTH FIELD  L        D(B)      *
*                                                                     *
*   EACH OPERAND IS PROCESSED SEPARATELY.THE PROCESSING IS DRIVEN     *
*   BY A TABLE -FAR- THAT DESCRIBES THE OPERAND FORMAT,ALLOCATION     *
*   (IN ASSEMBLED INSTRUCTION) AND RESTRICTIONS.THE TABLE ENTRY       *
*   FORMAT IS DESCRIBED WITH THE DSECT 'FARENT'.                      *
*                                                                     *
*ENTRY POINT-                                                         *
*        X5M.                                                         *
*                                                                     *
*INPUT-                                                               *
*   INTERNAL TEXT RECORD - READ BY PHASE MAINLINE TO JTEXT BUFFER.    *
*                                                                     *
*OUTPUT-                                                              *
*   ASSEMBLED TEXT IN LEFTHF (IN PHASE COMMON).                       *
*                                                                     *
*EXTERNAL ROUTINES-                                                   *
*        X5V - EVALUATE EXPRESSIONS.                                  *
*        X5P - PRINT AND PUNCH.                                       *
*        X5L - LOG ERRORS.                                            *
*                                                                     *
*EXITS,NORMAL-                                                        *
*   RETURN TO PHASE MAINLINE.                                         *
*                                                                     *
*EXITS,ERROR-                                                         *
*   N/A                                                               *
*                                                                     *
*TABLES/WORK AREAS-                                                   *
*   FAR - MACHINE INSTRUCTION TABLE(SEE ABOVE).                       *
*   USING - USING TABLE.                                              *
*                                                                     *
*ATTRIBUTES-                                                          *
*   REFRESHABLE.                                                      *
*                                                                     *
*NOTES-                                                               *
*   INSTRUCTIONS FOR MODIFYING THE FAR TABLE ARE INCLUDED WITH THE    *
*   TABLE.TO ACCOMODATE MORE THAN 3 OPERANDS,CHANGE THE GLOBAL &M.    *
*   TO HANDLE THREE STORAGE OPERANDS,LEFTHF MUST BE EXPANDED.         *
*                                                                     *
         SPACE 2
         PRINT OFF                      DON'T PRINT JCOMMON COPY CODE
         COPY  JCOMMON                  JCOMMON COPY CODE
         PRINT OFF                      DON'T PRINT JTEXT COPY CODE
         COPY  JTEXT                    JTEXT COPY CODE
         PRINT OFF                      DON'T PRINT THE X5COM COPY CODE
         COPY  X5COM                    X5COM COPY CODE
         PRINT OFF                      DON'T PRINT JERMSGCD COPY CODE
         COPY  JERMSGCD                 DEFINE ERROR CODES AND SEVERITY
         PRINT ON                       THAT'S ALL THE COPY CODE
         SPACE 5
JTEXTA   DSECT                          RESUME VARIABLE PART OF TEXT
         ORG   JTEXTA                   REORG FOR CURRENT CHARACTER
CURCH    DBV   COMMA(JCOMMA),                                          X
               LPAREN(JLPARN),                                         X
               RPAREN(JRPARN)
NXTCH    EQU   *                        NEXT CHARACTER
         EJECT
FGTXE    DSECT                          ENTRY IN FGT FOR EXTENDED OPS
XOPCM    DS    CL2                      OPCODE MASK - TWO BYTES
XFPTR    DS    C                        FAR POINTER
XNEXT    EQU   *                        NEXT ENTRY
         COPY  RXLFMTS                  POST PROCESSOR RECORD FORMATS
         EJECT
* FARENT
*
*   THIS DSECT DESCRIBES THE FORMAT OF AN OPERAND ENTRY IN FAR.
*   EACH INSTRUCTION ENTRY IN FAR CONSISTS OF A FIXED NUMBER OF
*   FAR OPERAND ENTRIES.THE FIXED NUMBER IS THE MAXIMUM NUMBER OF
*   OPERANDS IN ANY MACHINE INSTRUCTION AND IS SET THROUGH THE
*   GLOBAL &M.
*   EACH FAR OPERAND ENTRY CONSISTS OF TWO BYTES.THE FORMAT OF THE
*   FIRST BYTE IS -
*
*   NAME     BITS   DESCRIPTION
*   ----     ----   -----------
*   FSNLIT   0      1    LITERAL NOT ALLOWED (WHEN FSALOC NONZERO)
*            1           NOT USED
*   FSALOC   2-3    00   NO S PART
*                   01   S PART ASSEMBLED INTO HALFWORD 1
*                   10   S PART ASSEMBLED INTO HALFWORD 2
*                   11   NOT USED
*   FILEN    4      1    SUBTRACT 1 FROM EVALUATED I PART(LENGTH FIELD)
*            5           NOT USED
*   FIALOC   6-7    00   NO I PART
*                   01   I PART ASSEMBLED INTO BITS 12-15
*                   10   I PART ASSEMBLED INTO BITS 8-11
*                   11   I PART ASSEMBLED INTO BITS 8-15
*
*   THE FORMAT OF THE SECOND BYTE FOR OPERANDS WITHOUT S PART IS -
*
*   NAME     BITS   DESCRIPTION
*   ----     ----   -----------
*   RIDEC    0      1    DECIMAL DIGIT
*            1           NOT USED
*   RIBND    2-3    00   FIELD WIDTH ONLY BOUND FOR VALUE
*                   01   NOT USED
*                   10   NOT USED
*                   11   VALUE LESS THAN 8
*            4-5         NOT USED
*   RIDIV    6-7    00   NO DIVISIBILITY CONSTRAINTS
*                   01   VALUE DIVISIBLE BY 2
*                   10   VALUE DIVISIBLE BY 4
*                   11   NOT USED
*
*   THE FORMAT OF THE SECOND BYTE FOR OPERANDS WITH S PART IS -
*
*   NAME     BITS   DESCRIPTION
*   ----     ----   -----------
*   RSMOD    0      1    OPERAND MODIFIED AT EXECUTION
*            1-3         NOT USED
*   RSALW    4      1    CHECK ALIGNMENT EVEN IF NOALGN OPTION
*            5           NOT USED
*   RSDIV    6-7    00   NO ALIGNMENT RESTRICTIONS
*                   01   ALIGN ON HALFWORD BDRY
*                   10   ALIGN ON FULLWORD BDRY
*                   11   ALIGN ON DOUBLEWORD BDRY
*
         SPACE
FARENT   DSECT
FENT     DS    0H
FMT      DSW   FSNLIT,                  NO LITERAL                     X
               ,,,                                                     X
               FILEN,                   LENGTH FIELD                   *
               ,                                                       *
               FIAL1                    FIRST BIT OF FIALOC
FSALOC   EQU   BIT2+BIT3                S ALLOCATION
FIALOC   EQU   BIT6+BIT7                I ALLOCATION
RIST     DSW   RIDEC                    DECIMAL DIGIT
RIBND    EQU   BIT2+BIT3                I FIELD UPPER BOUND
RIDIV    EQU   BIT6+BIT7                I FIELD DIVISIBILITY
         ORG   RIST
RSST     DSW   RSMOD,                   STORAGE MODIFIED               X
               ,,,                                                     X
               RSALW                    ALIGNMENT ALWAYS CHECKED
RSDIV    EQU   BIT6+BIT7                S DIVISIBILITY(I.E.,ALIGNMENT)
NXTFENT  EQU   *                        NEXT FAR ENTRY
         ORG   FMT
         DBV   EOP(0)                   END OF OPERAND
         EJECT
         JCSECT (X5M00)                 CREATE CSECT
* VS1 RELEASE 3.1 CHANGES
*C579600,580800,594700,594900                                   OX02675
*A540500,540540                                                @OY09690
*D540600                                                       @OY09690
*C536400                                                       @AZ07389
*A590900                                                       @AX13632
*C876300,877200,880200,881400,884490,884610                    @AM07317
         JMODID                         EMBED MODULE IDENTIFIER
         SPACE
X5M      JSAVE BASE=YES                 SAVE CALLING REGISTERS
         JENTRY (X5M01=X5M)             IDENTIFY ENTRY POINT
         JEXTRN (X5P01=X5P)             ENTRY POINT FOR PRINT AND PUNCH
         JEXTRN (X5L01=LOGERR)          ENTRY POINT FOR ERROR LOGGING
         JEXTRN (X5V01=X5V)             ENTRY POINT FOR EXPR EVALUATION
         USING X5COM,&COM
         USING JTEXT,&TBP
         USING JTEXTA,&TCP
         USING FARENT,&FRG
         USING XRFIN,R11                SETUP BASE FOR XREF RECORD
         EJECT
***********************************************************************
* INIT                                                                *
*   INITIALIZE FOR MACHINE INSTRUCTION PROCESSING.                    *
***********************************************************************
         SPACE
         SET   (TOOMANY,LEAVE),OFF      RESET SWITCHES
         SET   ZAPIT,OFF                INITLZ SW FOR ZEROING OP CODE
         L     &WRK,ELCTR               GET LOCATION COUNTER
         TM    ELCTR+L'ELCTR-1,BIT7     IS IT ODD ?
         BNO   INTLCT                   NO, STORE
* PRODUCE ALIGNMENT BYTE FOR PRINTING
         ST    &WRK,LOCATN              STORE LOCATION CTR IN OUTPUT
         MVI   LHFLGS,D1                LENGTH IS ONE
         SET   ENTALN,ON                INDICATE ALIGNMENT
         LA    R10,LSTOUT               SET PARAMETER FOR X5P
         JCALL X5P             GO PRINT AND PUNCH ALIGNMENR BYTE
         LA    &WRK,D1(,&WRK)           ROUND LOCTR TO HALFWORD
         ST    &WRK,ELCTR               STORE IT
INTLCT   ST    &WRK,LOCATN              SET LOCATION FOR INSTRUCTION
         SPACE
*   GET LENGTH OF INSTRUCTION(NEEDED IN X5V)
         SPACE
         IC    &SCR,JTFLGA              GET LENGTH FLAGS(IN JTFLGA)
         SLL   &SCR,D32-JLN4            SHIFT OUT GARBAGE
         SRL   &SCR,D32-(JLN4+D1)       SHIFT BACK AND MULTIPLY BY 2
         LA    &SCR,D2(,&SCR)           ADD 2 (BASIC LENGTH)
         STH   &SCR,CLCLNG              STORE INSTRUCTION LENGTH
         SPACE
         XC    LHIMD(LHFLGS-LHIMD),LHIMD  CLEAR LEFTHALF
         MVC   LHOPCD,JTIOP             MOVE OPCODE TO OUTPUT
         SPACE
* GET POINTER TO OPERAND LIST
         SPACE
         L     &TCP,OPNADR              INITIALIZE TEXT POINTER
         SPACE
* GET ADDRESS OF INSTRUCTION ENTRY IN FAR.
*   THE ENTRY IS LOOKED UP VIA ONE OF TWO AUXILIARY TABLES,FGT AND
*   FGTX.FGT IS USED FOR INSTRUCTIONS WITH ONE-BYTE OPCODE AND IS
*   SIMPLY A TRANSLATION TABLE.FGTX IS USED FOR EXTENDED OPCODE,IE
*   EXTENDED BRANCHES AND TWO-BYTE OPCODES.ITS ENTRIES ARE SORTED IN
*   ASCENDING ORDER ON THE OPCODE.
         SPACE
         SR    R2,R2                    CLEAR POINTER REG
         GOIF  JEXTB,ON=INTXOC          GO IF EXTENDED OPCODE
         TRT   JTIOP1,FGT               GET FAR ENTRY NUMBER IN REG 2
         B     INTGFR
         SPACE
INTXOC   LA    &SCR,FGTX                GET FAR-GET-TABLE ADDRESS  FOR
         USING FGTXE,&SCR               EXT OPCODES
INTXCP   CLC   XOPCM,JTIOP              IS THIS THE ENTRY
         BNL   INTXFD                   YES
         LA    &SCR,XNEXT               NO,TRY
         B     INTXCP                   NEXT ENTRY
INTXFD   IC    R2,XFPTR                 GET FAR ENTRY NUMBER
         SPACE
INTGFR   MH    R2,=Y(&M*L'FENT)         GET ADDR (REL TO FAR) OF ENTRY
         LA    &FRG,FAR(R2)             ADD FAR BASE POINTER
         LA    &SCR,FARENT+&M*L'FENT    GET ADDR OF FAR ENTRY END
         ST    &SCR,FNTEND              STORE IT
         TEXT  DRVCKE                   GO IF NO OPERAND THERE
         CLC   D0(,&FRG),=H'0'          ZERO FAR ENTRY. TREAT OPND AS
         BNE   DRVRST                    A COMMENT
         B     CLOSE                    GO OUTPUT
*   END OF INITIALIZATION
         EJECT
***********************************************************************
* DRIVER                                                              *
*   FUNCTION                                                          *
*    -MONITOR OPERAND PROCESSING.                                     *
*    -DIAGNOSE THE FOLLOWING ERRORS-                                  *
*      ERROR                                 ACTION                   *
*      ----                                  ------                   *
*      TOO FEW OPERANDS                      LEAVE *                  *
*      TOO MANY OPERANDS                     SCAN SUPERFLUOUS OPERANDS*
*                                            FOR ERRORS               *
*      COMMA EXPECTED AFTER OPERAND          LEAVE                    *
*                                                                     *
*      *'LEAVE' MEANS THAT CONTROL IS RETURNED TO PHASE MAINLINE,WITH *
*        UNPROCESSED OPERANDS SET TO ZERO.                            *
***********************************************************************
         SPACE 2
DRIVERZ  SET   ZAPIT,ON                 SET TO ZERO LEFTHALF
DRIVER   GOIF  LEAVE,ON=CLOSEZ          EXIT IF UNRECOVERABLE ERROR    *
                                        OCCURRED DURING OPERAND PROC
         LA    &FRG,NXTFENT             GET NEXT FORMAT
         CLI   D0(R10),JBLANK           IS IT BLANK?
         BE    DRVCKE                   YES,GO CHECK IF IT SHOILD BE
         TEXT  DRVCKE,COMMA,DRVNCM      GO TO DRVCKE IF END OF TEXT,   *
                                        DRVNCM IF NOT SO AND NO COMMA
         GOIF  EOP,EQ=DRV2MN            GO IF END OF FORMAT
         C     &FRG,FNTEND                   LIKE-
         BNL   DRV2MN                        WISE
DRVRST   EQU   *                   RESET SWITCHES AND WORK AREAS
         SET   (E2PR,E3PR,E1ERR,E2ERR,E3ERR),OFF       RESET SWITCHES
         XC    MWORK(MWLEN),MWORK       CLEAR WORK AREA
         SR    &ESD1,&ESD1              CLEAR
         SR    &EXP1,&EXP1              CLEAR
         MVI   LQ1+L'LQ1-1,1            SET INITIAL LENGTH ATTR TO 1
         B     COLLECT                  GO SCAN OPERAND
         SPACE
DRVCKE   EQU   *                   NO MORE TEXT.CHECK IF IT SHOULD BE.
         GOIF  EOP,EQ=CLOSE             GO IF FORMAT END (ALL OK)
         C     &FRG,FNTEND                   LIKE-
         BNL   CLOSE                         WISE
         X5ERRL 210,0,CLOSEZ            TOO FEW OPERANDS
         SPACE
DRVNCM   X5ERRL 178,CLMPTR,CLOSEZ       SYNTAX ERROR
         SPACE
DRV2MN   EQU   *                   TOO MANY OPERANDS
         GOIF  TOOMANY,ON=DRVRST        GO IF ALREADY DIAGNOSED
         X5ERRL 211,0                   TOO MANY OPERANDS
         SET   TOOMANY,ON               REMEMBER WE DID
         SET   ZAPIT,ON                 SET TO ZERO LEFTHALF
         B     DRVRST                   CONTINUE
         SPACE 5
CLOSEZ   SET   ZAPIT,ON                 SET TO ZERO LEFTHALF
         EJECT
***********************************************************************
* CLOSE                                                               Q
*   WRAP UP INSTRUCTION PROCESSING.CALL PRINT ROUTINE.EXIT            *
***********************************************************************
         SPACE 2
CLOSE    L     &SCR,ELCTR               TAKE A LOCATION COUNTER
         LH    &SCH,CLCLNG              ... AND ITS LENGTH
         AR    &SCR,&SCH                    ADD THEM TOGETHER
         ST    &SCR,ELCTR               AND YOU HAVE A NEW,BETTER LOCTR
         STC   &SCH,LHFLGS              SET LENGTH FOR OUTPUT
         GOIF  ZAPIT,OFF=CLOSE0         BR IF NO ERROR
         BCTR  &SCH,0                   DECR LNG BY 1
         EX    &SCH,ZAPER               ZERO OP CODE
         SPACE
CLOSE0   C     R14,=X'1000000'          IS IT GREATER THAN MAXIMUM?
         BL    CLOSE1                   BRANCH AROUND IF BELOW LIMIT
         GOIF  WRPFLG,ON=CLOSE1         BRANCH AROUND IF NOT FIRST
         SET   WRPFLG,ON                SET WRAPFLAG
         X5ERRL 246,0                   LOCATION COUNTER OVERFLOW
         SPACE
CLOSE1   LA    R10,LSTOUT               SET PARAMETER FOR X5P
         JCALL X5P                      PRINT AND/OR PUNCH INSTR
         GOIF  JERR,OFF=X5M99           WAS AN ERROR FLAGGED
         LA    R10,ERROUT               YES, LOAD ERROR FLAG INDEX
         JCALL X5P                      GO PRINT FLAG
X5M99    JRETURN ,                      RETURN TO PHASE MAINLINE
ZAPER    XC    LHOPCD(*-*),LHOPCD       ZERO OPCODE
         EJECT
***********************************************************************
* COLLECT                                                             *
* FUNCTION                                                            *
*  -SCAN ONE OPERAND AND COLLECT DATA                                 *
*  -DIAGNOSE THE FOLLOWING ERRORS-                                    *
*    ERROR                                   ACTION                   *
*    -----                                   ------                   *
*    PREMATURE END OF OPERAND                LEAVE                    *
*    RIGHT PARENTHESES EXPECTED              LEAVE                    *
*    COMPLEXLY RELOCATABLE OPERAND           SET TO ZERO              *
*    ILLEGAL LITERAL USAGE                   -                        *
*                                                                     *
*    THE FOLLOWING FORMATS ARE ACCEPTED,REGARDLESS OF FORMAT SPECIFIED*
*    IN FAR TABLE                                                     *
*        EXP1                                                         *
*        EXP1(EXP2)                                                   *
*        EXP1(,EXP3)                                                  *
*        EXP1(EXP2,EXP3)                                              *
*        LITERAL                                                      *
*   ALL OTHERS ARE FLAGGED AS SYNTAX ERRORS EITHER BY X5V OR BY THIS  *
*   ROUTINE.                                                          *
***********************************************************************
         SPACE 2
COLLECT  EQU   *
         TEXT  COLPME                   GO IF PREMATURE END OF OPERAND
         GOIF  D0(R10),JEQUAL,EQ=LIT100 IS OPERAND A LITERAL
         GOIF  D0(R10),JCOMMA,NE=CONTIN CONTINUE IF NOT COMMA
         X5ERRL 210,CLMPTR,COLFAT       OPERAND MISSING
         SPACE
CONTIN   JCALL X5V                      EVALUATE EXPRESSION 1
         ST    R14,ERRPTR               SAVE COLUMN PTR FOR LOGGING
         BC    ERRX,COLFAT              GO IF FATAL EVALUATION ERROR
         BC    CMPX,COLCMP              GO IF NONFATAL ERROR
         LR    &ESD1,R10                SET ESDID OF EXPR 1
         LR    &EXP1,R11                SET VALUE OF EXPR1
         MVC   LQ1,IMPLNG               ... AND LENGTH ATTRIBUTE
         SPACE
COLCLP   LR    &TCP,R14                 RECOVER TEXT POINTER FROM X5V
         TEXT  COLOUT,LPAREN,COLOUT     GO TO COLOUT IF END OF OPERAND *
                                        LIST OR NOT LEFT PAREN
         TEXT  COLPME,COMMA,COLEE2      GO TO COLPME IF END OF OPERAND,*
                                        TO COLEE2 IF NOT COMMA
         TM    FMT,FIALOC               IS EXP2 ALLOWED
         TM    FMT,FIALOC               IS THERE AN I PART
         BZ    IPROC1                   NO, LOG AN ERROR
         TM    FMT,FSALOC               IS THERE AN S PART
         BZ    IPROC1                   NO, LOG AN ERROR
         SPACE
COLEE3   JCALL X5V                      EVALUATE EXPRESSION 3
         ST    R14,ERRPTR               SAVE COLUMN PTR FOR LOGGING
         LR    &TCP,R14                 RECOVER TEXT POINTER FROM X5V
         BC    ERRX,COLFAT              GO IF FATAL EVALUATION ERROR
         BC    ABSX,COLE3A              GO IF EXP3 ABSOLUTE
         SET   E3ERR,ON                 NOT ABSOLUTE - SET ERROR FLAG
         B     COLE3P
         SPACE
COLE3A   ST    R11,EXP3                 SET EXP3 VALUE
COLE3P   SET   E3PR,ON                  SET EXP3 PRESENT
COLCRP   TEXT  COLPME,RPAREN,COLRPE     GO TO COLPME IF END OF OPERAND,*
                                        TO COLRPE IF NOT RIGHT PAREN
         TM    FMT,FSALOC               IS THERE AN S PART
         BZ    IPROC1                   NO, LOG AN ERROR
         GOIF  E3PR,OFF=COLOUT          IF ONLY EXP2, EXIT
         TM    FMT,FIALOC               IS THERE AN I PART
         BZ    IPROC1                   NO, LOG AN ERROR
COLOUT   GOIF  TOOMANY,ON=DRIVER        GO IF THIS IS ONE OF TOO MANY
         TM    FMT,FSALOC               ANY S PART
         BZ    IPROC                    NO
         TM    FMT,FIALOC               ANY I PART
         BZ    SPROC                    NO
         GOIF  FILEN,OFF=SXPROC         GO IF SX OPERAND
         B     SLPROC                   GO PROCESS SL OPERAND
COLPME   X5ERRL 212,CLMPTR              PREMATURE END OF OPERAND
COLFAT   SET   LEAVE,ON                 FATAL ERROR - DONT COLLECT MORE
         B     COLOUT                   TRY WITH WHAT YOU GOT
         SPACE
COLCMP   EQU   *                   EXP1 COMPLEXLY RELOCATABLE,OR WHAT ?
         SET   ZAPIT,ON                 SET TO ZERO LEFT HALF
         GOIF  COMPLEX,NE=COLCLP        IF NOT COMPLEX,NON-SYNTATIC
         SET   E1ERR,ON                 SET EXPRESSION 1 ERROR
         X5ERRL 213,CLMPTR,COLCLP       COMPLEXLY RELOCATABLE
         SPACE
COLLIT   GOIF  FSNLIT,OFF=COLOUT        GO IF LITERAL ALLOWED
         SET   ZAPIT,ON                 SET TO ZERO LEFTHALF
         X5ERRL 214,CLMPTR,COLOUT       ILLEGAL LITERAL USAGE
         SPACE
COLEE2   JCALL X5V                      EVALUATE EXPRESSION 2
         ST    R14,ERRPTR               SAVE COLUMN PTR FOR LOGGING
         LR    &TCP,R14                 RECOVER TEXT POINTER FROM X5V
         BC    ERRX,COLFAT              GO IF FATAL EVALUATION ERROR
         BC    ABSX,COLE2A              GO IF EXP2 ABSOLUTE
         SET   E2ERR,ON                 NOT ABSOLUTE - SET ERROR FLAG
         B     COLE2P
         SPACE
COLE2A   ST    R11,EXP2                 SET EXP2 VALUE
COLE2P   SET   E2PR,ON                  SET EXP2 PRESENT
         TEXT  COLPME,COMMA,COLCRP      GO TO COLPME IF END OF OPERAND,*
                                        TO COLCRP IF NOT COMMA
         B     COLEE3                   GO HANDLE EXP3
         SPACE
COLRPE   X5ERRL 215,CLMPTR,COLFAT       RIGHT PAREN EXPECTED
         EJECT
***********************************************************************
* IPROC                                                               *
*   FUNCTION                                                          *
*    -PROCESS I TYPE OPERAND                                          *
*    -DIAGNOSE THE FOLLOWING ERRORS-                                  *
*      ERROR                                 ACTION                   *
*      -----                                 ------                   *
*      ILLEGAL FORMAT FOR I OPERAND          SET TO ZERO              *
*      OPERAND IS RELOCATABLE                SET TO ZERO              *
*      FIELD OVERFLOW                        TRUNCATED                *
*      BOUND EXCEEDED                        -                        *
*      DIVISIBILITY ERROR                    -                        *
***********************************************************************
         SPACE
IPROC    GOIF  (E2PR,E3PR),OFF=IPRNFE   GO IF NEITHER EXP2 NOR EXP3 PR
         SPACE
IPROC1   X5ERRL 216,CLMPTR,DRIVERZ      ILLEGAL FORMAT
IPRNFE   GOIF  E1ERR,ON=DRIVER          GO IF COMPLEXLY RELOCATABLE
         LTR   &ESD1,&ESD1              IS IT ABSOLUTE
         BZ    IPRABS                   YES
         X5ERRL 217,CLMPTR,DRIVERZ      I OPERAND RELOCATABLE
IPRABS   JCALL CDIV,BASE=NO             CHECK DIVISIBILITY
         BNZ   IPRBER                   NOT OK, GO LOG ERROR
         ST    &EXP1,EXP2               SET PARAMETER FOR IASGN
         JCALL IASGN,BASE=NO            ASSIGN AND CHECK FOR(FIELD)SIZE
         BL    IPRBND                   GO IF OK
         GOIF  RIDEC,ON=IPRDEC          SHOULD IT BE DEC DIGIT ?
         X5ERRL 219,CLMPTR,DRIVERZ      FIELD OVERFLOW
IPRBND   TM    RIST,RIBND+RIDEC         ANY BOUND REQUIREMENT
         BZ    DRIVER                   NO
         GOIF  RIDEC,ON=IPRDEC          GO IF IT SHOULD BE DEC DIGIT
         SR    R2,R2                    ZERO REGISTER
         MVC   DWORD1(L'RIST),RIST      GET RESTRICTION BYTE
         NI    DWORD1,RIBND             STRIP OFF NON-BOUND BITS
         IC    R2,DWORD1                GET BOUND BITS
         SRL   R2,4                     SHIFT TO LOWER HALF BYTE
         STC   R2,DWORD1                RESTORE BOUND BITS
         TRT   DWORD1(L'RIST),IPRTAB    GET TEST BITS IN REG 2
         LCR   R2,R2                    COMPLEMENT
         NR    R2,&EXP1                 RESULT SHOULD BE ZERO
         BZ    DRIVER                   IT IS
IPRBER   X5ERRL 218,0,DRIVERZ           INVALID REGISTER SPECIFICATION
IPRDEC   C     &EXP1,=F'10'             IS IT A DECIMAL DIGIT
         BNL   DECERR                   ERROR IF GE THAN 10
         LTR   R4,R4                    IS IT NEGATIVE
         BNM   DRIVER                   OK IF NOT NEGATIVE
DECERR   X5ERRL 162,CLMPTR,DRIVERZ      DECIMAL DIGIT ERROR
         SPACE
IPRTAB   DC    AL1(0,2,4,8)             TABLE OF TEST BITS
         EJECT
***********************************************************************
* SPROC                                                               *
*   FUNCTION                                                          *
*    -REFORMAT THE DATA COLLECTED FOR SPART INPUT                     *
*    -DIAGNOSE THE FOLLOWING ERRORS-                                  *
*      ERROR                                 ACTION                   *
*      -----                                 ------                   *
*      NO INDEX OR LENGTH FIELD EXPECTED     -                        *
***********************************************************************
         SPACE
SPROC    GOIF  E3PR,ON=SPRSE3           GO IF EXP3 PRESENT
         GOIF  E2PR,OFF=SPART           GO IF NO EXP2 PRESENT
         SET   E3PR,ON                  PRETEND EXP3 IS EXP2
         MVC   EXP3,EXP2                ---
         GOIF  E2ERR,ON=SPRE2R          GO IF REL BASE
SPRFG2   SET   E2PR,OFF                 FORGET EXP2
         B     SPART
SPRSE3   GOIF  E2PR,OFF=SPART           DONT MENTION IF EXP2 NOT THERE
         SET   ZAPIT,ON                 SET TO ZERO LEFTHALF
         X5ERRL 221,CLMPTR,SPRFG2       ILLEGAL LENGTH OR INDEX
SPRE2R   SET   E3ERR,ON                 EXP2 WAS EXP3,WASN'T IT ?
         B     SPART
         EJECT
***********************************************************************
* SXPROC                                                              *
*   FUNCTION                                                          *
*    -PROCESS INDEX FIELD IN SX OPERAND                               *
*    -DIAGNOSE THE FOLLOWING ERRORS-                                  *
*      ERROR                                 ACTION                   *
*      -----                                 ------                   *
*      INDEX NOT ABSOLUTE                    SET TO ZERO              *
*      INDEX FIELD OVERFLOW                  TRUNCATED                *
***********************************************************************
SXPROC   EQU   *
         GOIF  E2PR,OFF=SPART           GO IF INDEX NOT EXPLICIT
         GOIF  E2ERR,ON=SXPXNA          GO IF INDEX NOT ABSOLUTE
         OC    EXP2,EXP2                IS INDEX ZERO ?
         BZ    SPART                    YES,IGNORE IT
         JCALL IASGN,BASE=NO            MOVE INDEX TO OBJECT CODE
         BL    SPARTX                   GO IF NO OVERFLOW
         X5ERRL 222,CLMPTR,SPARTXZ      INVALID INDEX
         SPACE
SXPXNA   X5ERRL 223,CLMPTR,SPARTXZ      RELOCATABLE INDEX
         EJECT
***********************************************************************
* SLPROC                                                              *
*   FUNCTION                                                          *
*    -PROCESS LENGTH FIELD IN SL OPERAND                              *
*    -DIAGNOSE THE FOLLOWING ERRORS-                                  *
*      ERROR                                 ACTION                   *
*      -----                                 ------                   *
*      LENGTH NOT ABSOLUTE                   IMPLIED LENGTH USED      *
*      LENGTH FIELD OVERFLOW                 TRUNCATED                *
***********************************************************************
         SPACE 2
SLPROC   EQU   *
         GOIF  E2PR,ON=SLPLE2           GO IF EXPLICIT LENGTH
         LH    &SCR,LQ1                 GET IMPLIED LENGTH
         SPACE
SLPLS1   LTR   &SCR,&SCR                IS IT ZERO ?
         BZ    SPART                    YES
         BCTR  &SCR,0                   SUBTRACT 1 FROM LENGTH
         ST    &SCR,EXP2                STORE MOVE LENGTH IN EXP2
         JCALL IASGN,BASE=NO            MOVE LENGTH TO OBJECT CODE
         BL    SPART                    GO IF NOT TOO BIG
         X5ERRL 224,CLMPTR,SLPROCZ      LENGTH ERROR
         SPACE
SLPLE2   GOIF  E2ERR,ON=SLPELR          GO IF LENGTH ERROR
         L     &SCR,EXP2                GET EXPLICIT LENGTH
         B     SLPLS1
SLPELR   X5ERRL 225,CLMPTR              RELOCATABLE LENGTH
         SPACE
SLPROCZ  SET   ZAPIT,ON                 SET TO ZERO LEFTHALF
         EJECT
***********************************************************************
* SPART                                                               *
* FUNCTION                                                            *
*  -PROCESS S PART OF STORAGE OPERAND                                 *
*  -DECOMPOSE IMPLICIT VALUES INTO BASE-DISPLACEMENT                  *
*  -DIAGNOSE THE FOLLOWING ERRORS-                                    *
*    ERROR                                   ACTION                   *
*    -----                                   ------                   *
*    RELOCATABLE DISPLACEMENT                SET TO ZERO              *
*    BASE NOT ABSOLUTE                       SET TO ZERO              *
*    ADDRESSABILITY ERROR                    BASE,DISP SET TO ZERO    *
*    BASE REG FIELD OVERFLOW                 TRUNCATED                *
*    DISPLACEMENT FIELD OVERFLOW                                      *
*    (IE,DISP NOT IN RANGE -4096 TO 4095)    TRUNCATED                *
*    ALIGNMENT ERROR                         -                        *
*    REENTERABILITY ERROR                    -                        *
* ENTRY POINTS - SPART,SPARTX                                         *
***********************************************************************
         SPACE
* CHECK ALIGNMENT
         SPACE
SPART    GOIF  E3PR,OFF=SPALG1          GO IF NO EXPLICIT BASE
         OC    EXP3,EXP3                IS BASE ZERO
         BNZ   SPARTX                   NO
         SPACE
SPALG1   GOIF  RSALW,ON=SPALGN          GO IF ALGN ALWAYS TO BE CHECKED
         GOIF  JALGN,OFF=SPARTX         GO IF NOALGN OPTION
SPALGN   JCALL CDIV,BASE=NO             CHECK ALIGNMENT
         BZ    SPARTX                   GO IF OK
         X5ERRL 220,CLMPTR,SPARTX       ALIGNMENT ERROR
         SPACE
SPARTXZ  SET   ZAPIT,ON                 SET TO ZERO LEFTHALF
         SPACE
SPARTX   GOIF  E3PR,OFF=SPAHK1          GO IF NO EXPLICIT BASE
         GOIF  E3ERR,OFF=SPAEA1         GO IF BASE OK
         X5ERRL 226,CLMPTR              BASE NOT ABSOLUTE
         SET   ZAPIT,ON                 SET TO ZERO LEFTHALF
SPAEA1   LTR   &ESD1,&ESD1              IS EXP1 ABSOLUTE
         BNZ   SPARDP                   NO - RELOCATABLE DISPLACEMENT
         SPACE
SPAHKD   STH   &EXP1,DISPL              SAVE DISPLACEMENT
         CL    &EXP1,=F'4096'           IS IT LT 4096
         BL    SPASGN                   NO,ERROR
         X5ERRL  208,0,SPASGNZ          DISPLACEMENT TOO LARGE
         SPACE
SPARDP   X5ERRL 228,CLMPTR,SPASGNZ      RELOCATABLE DISPLACEMENT
SPAHK1   GOIF  E1ERR,ON=DRIVER          GO IF EXP1 COMPL RELOCATABLE
         LTR   &ESD1,&ESD1              IS EXP1 ABSOLUTE
         BNZ   SPAREL                   NO
         GOIF  ABSUS,OFF=SPAHKD         GO IF NO ABS USING IS CURRENT
         SPACE
* ATTEMPT DECOMPOSITION
         SPACE
SPADEC   LA    &SCH,USINGT              GET USING TABLE ADDRESS
         USING UESD,&SCH                USE THE USING USING
         SPACE
SPATRY   CH    &ESD1,UESD               IS IT SAME ESDID
         BH    SPAAER                   ADDR ERROR IF HIGH
         BE    SPAMBS                   EQUAL - MAYBE SUCCESS
SPAPNE   LA    &SCH,USNXT               POINT TO NEXT ENTRY
         B     SPATRY                   GO TRY IT
SPAMBS   LTR   &ESD1,&ESD1              IS IT ABSOLUTE
         BZ    SPAABS                   YES
         SPACE
SPAG1V   LR    &SCR,&EXP1               GET EXP1 VALUE
         S     &SCR,UVAL                GET TENTATIVE DISPLACEMENT
         BM    SPAPNE                   NEG DISP NOT VALID HERE
         C     &SCR,=F'4096'            IS IT LT 4096
         BNL   SPAPNE         *         NO - TRY NEXT (IT WILL FAIL)
         STH   &SCR,DISPL               SAVE DISPLACEMENT
         LH    &SCR,UREG      *         GET USING REG
         ST    &SCR,EXP3                SAVE IT
         B     SPASGN
SPAABS   CLI   UREG+1,X'00'             REG 0 (END OF TABLE)   @AZ07389
         BNZ   SPAG1V                   NO
         B     SPAHKD                   YES - CHECK DISPLACEMENT
         SPACE
SPAREL   GOIF  JRENT,OFF=SPADEC         GO IF NORENT OPTION
         GOIF  RSMOD,OFF=SPADEC         GO IF OPERAND NOT STORED INTO
         STH   &ESD1,JHWORD1            TEST FOR OPERAND-      @OY09690
         TM    JHWORD1,X'50'            IN DSECT OR Q-CONST    @OY09690
         BM    SPADEC                   BR IF SO.              @OY09690
         X5ERRL 229,CLMPTR,SPADEC       REENTERABILITY ERROR
SPAAER   X5ERRL 209,CLMPTR,DRIVERZ      ADDRESSABILITY ERROR
         SPACE
SPASGNZ  SET   ZAPIT,ON                 SET TO ZERO LEFTHALF
         SPACE
SPASGN   PACK  SALOC,FMT                GET ZERO+GARBAGE+S PART ALLOC
         NI    SALOC+D1,FSALOC/D16      STRIP OFF GARBAGE
         LH    &SCH,SALOC               HALFWORD NUMBER INTO REG
         SLL   &SCH,D2                  MULTIPLY BY 4
         ST    &EXP1,ADDRS1-D4(&SCH)    STORE INTO ADDR1 OR -2
         SRL   &SCH,D1                  DIVIDE OFFSET BY 2
         LA    &SCH,LHOPCD(&SCH)        SCH NOW CONTAINS TARGET ADDRESS
         MVC   D0(L'DISPL,&SCH),DISPL   MOVE DISPL TO INSTRUCTION
         MVO   D0(L'BASEX,&SCH),BASEX   MOVE BASE
         CLC   EXP3,=F'16'    *         IS BASE REG LT 16
         BL    DRIVER                   YES
         X5ERRL 230,CLMPTR,DRIVERZ      BASE REGISTER TOO LARGE
         EJECT
* CDIV
*
*   CHECK DIVISIBILITY (FOR PURE I OPERANDS) AND ALIGNMENT ( FOR
*   OPERANDS WITH S PART).RETURN WITH CC=0 IF OK.REG 2 IS DESTROYED.
*
         SPACE
CDIV     TM    RIST,RIDIV               ANY DIVISIBILITY REQUIRED ?
         BZR   &RTN                     NO - RETURN WITH CC 0.
         MVC   DWORD1(L'RIST),RIST      GET RESTRICTION FIELD
         NI    DWORD1,RIDIV             STRIP OFF ALL BUT DIV BITS
         SR    R2,R2                    CLEAR
         TRT   DWORD1(L'RIST),CDVTAB    GET TEST BITS IN REG 2
         NR    R2,&EXP1                 RESULT SHOULD BE ZERO
         BR    &RTN                     RETURN
CDVTAB   DC    AL1(0,1,3,7)             TABLE TO GET TEST BITS
         EJECT
* IASGN
*
*   MOVE I PART VALUE TO INSTRUCTION.SET CC=1 IF NO FIELD OVERFLOW.
*
         SPACE
IASGN    TM    FMT,FIALOC               IS IT 4-BIT OR 8-BIT FIELD
         BM    IAS4BT                   4-BIT IF MIXED
         MVC   LHIMD,I                  MOVE TO INSTRUCTION
         CLC   EXP2,=F'256'             SET CONDITION CODE
         BR    &RTN
         SPACE
IAS4BT   GOIF  FIAL1,ON=IASFHB          GO IF FIELD IN FIRST HALF-BYTE
         MVN   LHIMD,I                  MOVE TO 2ND HALF-BYTE
         B     IAS4BR                   GO SET CC
         SPACE
IASFHB   MVO   LHIMD,I                  MOVE TO 1ST HALF-BYTE
         SPACE
IAS4BR   CLC   EXP2,=F'16'              SET CONDITION CODE
         BR    &RTN                     RETURN
         EJECT
***********************************************************************
*  LITERAL OPERAND PROCESSING                                         *
***********************************************************************
LIT100   LR    R6,R10                   SAVE TEXT POINTER
         ST    R6,ERRPTR                SAVE COLUMN PTR FOR LOGGING
         CLI   D1(R10),JBLANK           CAN'T HAVE A BLANK FOLLOWING
         BE    LIT140                   OR IT'S CURTAINS FOR THIS GUY
         LH    R10,JINFILE              POINT TO INPUT FILE
         JGETL FILE=(R10)               GET LITERAL REFERENCE
         L     R9,SYMXRF                GET SYMBOL XREFED       OX02675
         LA    R9,D1(R9)                INCREMENT 1
         ST    R9,SYMXRF                STORE BACK              OX02675
         CLI   D4(R11),JTLITII          IS IT LITERAL REFERENCE REC
         BE    LIT125                   BRANCH AROUND IF YES
         SPACE
         X5ERRL 167,0,CLOSEZ            SYMBOL FILE OUT OF PHASE
         SPACE
LIT125   LH    R10,D6(R11)              GET LITERAL ESDID
         LTR   R10,R10                  IS IT ZERO?
         BNZ   LIT150                   INVALID LITERAL IF YES
         SPACE
LIT140   X5ERRL 161,CLMPTR,CLOSEZ       INVALID LITERAL
         SPACE
LIT150   MVC   LCTRSAV(4),D8(R11)       SAVE LITERAL LOCTR
         MVC   LCTRSAV+D4(2),D6(R11)    SAVE LITERAL ESDID
         SR    R2,R2                    CLEAR REGISTER
         IC    R2,D2(R11)               GET LENGTH ATTRIBUTE
         LA    R2,D1(R2)                INCREMENT 1
         STH   R2,LQ1                   SAVE IT
         SR    R2,R2                    CLEAR REGISTER         @AX13632
         IC    R2,D5(R11)               GET LITERAL LENGTH
         LA    R2,D1(R2,R6)             POINT AFTER LITERAL
         ST    R2,LHSAVE                SAVE IT
         SR    R2,R2                    CLEAR REGISTER
         IC    R2,D3(R11)               GET SYMBOL COUNT
         LTR   R2,R2                    IS IT ZERO?
         BZ    LIT175                   BRANCH IF YES
         L     R9,SYMXRF                GET SYMBOLS XREFED      OX02675
         AR    R9,R2                    INCREMENT BY NO. OF SYMBOLS
         ST    R9,SYMXRF                STOR BACK               OX02675
LIT165   LH    R10,JINFILE              GET INPUT FILE INDEX
         JGETL FILE=(R10)               GET SYMBOL RECORD
         BCT   R2,LIT165                GO BACK IF MORE
         SPACE
LIT175   GOIF  (JXREF,JLIST),NOTALL=LIT200 NEED TO XREF?
         LH    R10,JOUTFILE             GET OUTPUT FILE NUMBER
         JPUTL FILE=(R10),BUFREQ=D18    LOCATE NEXT BUFFER
         MVC   XRFIN(6),=AL2(17,0,JY*256)  XREF RECORD HEADER
         MVC   LITLOCTR(4),LCTRSAV      PUT IN LITERAL LOCTR
         MVC   LITESDID(2),LCTRSAV+4    PUT IN LITERAL ESDID
         LH    R6,LITPID                GET POOL ID
         LA    R6,1(R6)                 ADD 1
         SLL   R6,8                     PUT POOL ID IN THE RIGHT PLACE
         STH   R6,LITPOLID              PUT POOLID IN RECORD
         MVI   XRFFLG,REF               INDICATE A REFERENCE
         MVC   XRFSTM,STMTN+D2          MOVE IN STATEMENT NUMBER
LIT200   EQU   *
         L     R10,LHSAVE               RESTORE OPERAND POINTER
         LH    R6,LCTRSAV+4             PUT IN LITERAL ESDID
         L     R4,LCTRSAV               PUT IN LITERAL LOCTR
         B     COLLIT                   GO COLLECT OPERAND
         EJECT
***********************************************************************
* FAR TABLE                                                           *
*   THE FUNCTION OF THIS TABLE IS DESCRIBED IN THE MODULE PROLOGUE.   *
*   THE TABLE,AS WELL AS THE FGT AND FGTX TABLES ARE GENERATED BY     *
*   FOUR MACROS - MITAB (GLOBAL INITIALIZATION),OPND (DESCRIBE AN     *
*   OPERAND),OPCD (GIVE INSTRUCTION OPCODE) AND MIEND (WRAP-UP,GENE-  *
*   RATE FGT AND FGTX TABLES).                                        *
*    EACH MACHINE INSTRUCTION IS DESCRIBED BY ONE OPND INSTRUCTION    *
*   PER OPERAND,FOLLOWED BY AN OPCD INSTRUCTION.                      *
*   NOTE MACHINE INSTRUCTIONS WITH EXTENDED OPCODE MUST BE ENTERED    *
*   IN ASCENDING SEQUENCE ON THE OPCODE.                              *
***********************************************************************
         SPACE 2
FAR      MITAB ,                        SET GLOBALS FOR FAR MACROS
SPM      OPND  R,1
         OPCD  X'04'
BALR     OPND  R,1
         OPND  R,2
         OPCD  X'05'
BCTR     OPND  R,1
         OPND  R,2
         OPCD  X'06'
BCR      OPND  I,1
         OPND  R,2
         OPCD  X'07'
SSK      OPND  R,1
         OPND  R,2
         OPCD  X'08'
ISK      OPND  R,1
         OPND  R,2
         OPCD  X'09'
SVC      OPND  I,3                      I FIELD IS IN WHOLE I BYTE
         OPCD  X'0A'
MVCL     OPND  R,1,1                    EVEN REGS
         OPND  R,2,1
         OPCD  X'0E'
CLCL     OPND  R,1,1
         OPND  R,2,1
         OPCD  X'0F'
LPR      OPND  R,1
         OPND  R,2
         OPCD  X'10'
LNR      OPND  R,1
         OPND  R,2
         OPCD  X'11'
LTR      OPND  R,1
         OPND  R,2
         OPCD  X'12'
LCR      OPND  R,1
         OPND  R,2
         OPCD  X'13'
NR       OPND  R,1
         OPND  R,2
         OPCD  X'14'
CLR      OPND  R,1
         OPND  R,2
         OPCD  X'15'
OR       OPND  R,1
         OPND  R,2
         OPCD  X'16'
XR       OPND  R,1
         OPND  R,2
         OPCD  X'17'
LR       OPND  R,1
         OPND  R,2
         OPCD  X'18'
CR       OPND  R,1
         OPND  R,2
         OPCD  X'19'
AR       OPND  R,1
         OPND  R,2
         OPCD  X'1A'
SR       OPND  R,1
         OPND  R,2
         OPCD  X'1B'
MR       OPND  R,1,1
         OPND  R,2
         OPCD  X'1C'
DR       OPND  R,1,1
         OPND  R,2
         OPCD  X'1D'
ALR      OPND  R,1
         OPND  R,2
         OPCD  X'1E'
SLR      OPND  R,1
         OPND  R,2
         OPCD  X'1F'
LPDR     OPND  R,1,(1,3)
         OPND  R,2,(1,3)
         OPCD  X'20'
LNDR     OPND  R,1,(1,3)
         OPND  R,2,(1,3)
         OPCD  X'21'
LTDR     OPND  R,1,(1,3)
         OPND  R,2,(1,3)
         OPCD  X'22'
LCDR     OPND  R,1,(1,3)
         OPND  R,2,(1,3)
         OPCD  X'23'
HDR      OPND  R,1,(1,3)
         OPND  R,2,(1,3)
         OPCD  X'24'
LRDR     OPND  R,1,(1,3)
         OPND  R,2,(2,3)
         OPCD  X'25'
MXR      OPND  R,1,(2,3)
         OPND  R,2,(2,3)
         OPCD  X'26'
MXDR     OPND  R,1,(2,3)
         OPND  R,2,(1,3)
         OPCD  X'27'
LDR      OPND  R,1,(1,3)
         OPND  R,2,(1,3)
         OPCD  X'28'
CDR      OPND  R,1,(1,3)
         OPND  R,2,(1,3)
         OPCD  X'29'
ADR      OPND  R,1,(1,3)
         OPND  R,2,(1,3)
         OPCD  X'2A'
SDR      OPND  R,1,(1,3)
         OPND  R,2,(1,3)
         OPCD  X'2B'
MDR      OPND  R,1,(1,3)
         OPND  R,2,(1,3)
         OPCD  X'2C'
DDR      OPND  R,1,(1,3)
         OPND  R,2,(1,3)
         OPCD  X'2D'
AWR      OPND  R,1,(1,3)
         OPND  R,2,(1,3)
         OPCD  X'2E'
SWR      OPND  R,1,(1,3)
         OPND  R,2,(1,3)
         OPCD  X'2F'
LPER     OPND  R,1,(1,3)
         OPND  R,2,(1,3)
         OPCD  X'30'
LNER     OPND  R,1,(1,3)
         OPND  R,2,(1,3)
         OPCD  X'31'
LTER     OPND  R,1,(1,3)
         OPND  R,2,(1,3)
         OPCD  X'32'
LCER     OPND  R,1,(1,3)
         OPND  R,2,(1,3)
         OPCD  X'33'
HER      OPND  R,1,(1,3)
         OPND  R,2,(1,3)
         OPCD  X'34'
LRER     OPND  R,1,(1,3)
         OPND  R,2,(1,3)
         OPCD  X'35'
AXR      OPND  R,1,(2,3)
         OPND  R,2,(2,3)
         OPCD  X'36'
SXR      OPND  R,1,(2,3)
         OPND  R,2,(2,3)
         OPCD  X'37'
LER      OPND  R,1,(1,3)
         OPND  R,2,(1,3)
         OPCD  X'38'
CER      OPND  R,1,(1,3)
         OPND  R,2,(1,3)
         OPCD  X'39'
AER      OPND  R,1,(1,3)
         OPND  R,2,(1,3)
         OPCD  X'3A'
SER      OPND  R,1,(1,3)
         OPND  R,2,(1,3)
         OPCD  X'3B'
MER      OPND  R,1,(1,3)
         OPND  R,2,(1,3)
         OPCD  X'3C'
DER      OPND  R,1,(1,3)
         OPND  R,2,(1,3)
         OPCD  X'3D'
AUR      OPND  R,1,(1,3)
         OPND  R,2,(1,3)
         OPCD  X'3E'
SUR      OPND  R,1,(1,3)
         OPND  R,2,(1,3)
         OPCD  X'3F'
NOPR     OPND  R,2
         OPCD  X'0700'
BOR      OPND  R,2
         OPCD  X'0710'
BHR      OPND  R,2                      BPR ALSO
         OPCD  X'0720'
BLR      OPND  R,2                      BMR ALSO
         OPCD  X'0740'
BNER     OPND  R,2                      BNZR ALSO
         OPCD  X'0770'
BER      OPND  R,2                      BZR ALSO
         OPCD  X'0780'
BNLR     OPND  R,2                      BNMR ALSO
         OPCD  X'07B0'
BNHR     OPND  R,2                      BNPR ALSO
         OPCD  X'07D0'
BNOR     OPND  R,2
         OPCD  X'07E0'
BR       OPND  R,2
         OPCD  X'07F0'
STH      OPND  R,1
         OPND  SX,(1,2),(H,NLIT,MOD)
         OPCD  X'40'
LA       OPND  R,1
         OPND  SX,(1,2)
         OPCD  X'41'
STC      OPND  R,1
         OPND  SX,(1,2),(NLIT,MOD)
         OPCD  X'42'
IC       OPND  R,1
         OPND  SX,(1,2)
         OPCD  X'43'
EX       OPND  R,1
         OPND  SX,(1,2),(H,ALW)
         OPCD  X'44'
BAL      OPND  R,1
         OPND  SX,(1,2),(H,ALW)
         OPCD  X'45'
BCT      OPND  R,1
         OPND  SX,(1,2),(H,ALW)
         OPCD  X'46'
BC       OPND  R,1
         OPND  SX,(1,2),(H,ALW)
         OPCD  X'47'
LH       OPND  R,1
         OPND  SX,(1,2),H
         OPCD  X'48'
CH       OPND  R,1
         OPND  SX,(1,2),H
         OPCD  X'49'
AH       OPND  R,1
         OPND  SX,(1,2),H
         OPCD  X'4A'
SH       OPND  R,1
         OPND  SX,(1,2),H
         OPCD  X'4B'
MH       OPND  R,1
         OPND  SX,(1,2),H
         OPCD  X'4C'
CVD      OPND  R,1
         OPND  SX,(1,2),(D,NLIT,MOD)
         OPCD  X'4E'
CVB      OPND  R,1
         OPND  SX,(1,2),D
         OPCD  X'4F'
ST       OPND  R,1
         OPND  SX,(1,2),(F,NLIT,MOD)
         OPCD  X'50'
N        OPND  R,1
         OPND  SX,(1,2),F
         OPCD  X'54'
CL       OPND  R,1
         OPND  SX,(1,2),F
         OPCD  X'55'
O        OPND  R,1
         OPND  SX,(1,2),F
         OPCD  X'56'
X        OPND  R,1
         OPND  SX,(1,2),F
         OPCD  X'57'
L        OPND  R,1
         OPND  SX,(1,2),F
         OPCD  X'58'
C        OPND  R,1
         OPND  SX,(1,2),F
         OPCD  X'59'
A        OPND  R,1
         OPND  SX,(1,2),F
         OPCD  X'5A'
S        OPND  R,1
         OPND  SX,(1,2),F
         OPCD  X'5B'
M        OPND  R,1,1
         OPND  SX,(1,2),F
         OPCD  X'5C'
D        OPND  R,1,1
         OPND  SX,(1,2),F
         OPCD  X'5D'
AL       OPND  R,1
         OPND  SX,(1,2),F
         OPCD  X'5E'
SL       OPND  R,1
         OPND  SX,(1,2),F
         OPCD  X'5F'
STD      OPND  R,1,(1,3)
         OPND  SX,(1,2),(D,NLIT,MOD)
         OPCD  X'60'
MXD      OPND  R,1,(2,3)
         OPND  SX,(1,2),D
         OPCD  X'67'
LD       OPND  R,1,(1,3)
         OPND  SX,(1,2),D
         OPCD  X'68'
CD       OPND  R,1,(1,3)
         OPND  SX,(1,2),D
         OPCD  X'69'
AD       OPND  R,1,(1,3)
         OPND  SX,(1,2),D
         OPCD  X'6A'
SD       OPND  R,1,(1,3)
         OPND  SX,(1,2),D
         OPCD  X'6B'
MD       OPND  R,1,(1,3)
         OPND  SX,(1,2),D
         OPCD  X'6C'
DD       OPND  R,1,(1,3)
         OPND  SX,(1,2),D
         OPCD  X'6D'
AW       OPND  R,1,(1,3)
         OPND  SX,(1,2),D
         OPCD  X'6E'
SW       OPND  R,1,(1,3)
         OPND  SX,(1,2),D
         OPCD  X'6F'
STE      OPND  R,1,(1,3)
         OPND  SX,(1,2),(F,NLIT,MOD)
         OPCD  X'70'
LE       OPND  R,1,(1,3)
         OPND  SX,(1,2),F
         OPCD  X'78'
CE       OPND  R,1,(1,3)
         OPND  SX,(1,2),F
         OPCD  X'79'
AE       OPND  R,1,(1,3)
         OPND  SX,(1,2),F
         OPCD  X'7A'
SE       OPND  R,1,(1,3)
         OPND  SX,(1,2),F
         OPCD  X'7B'
ME       OPND  R,1,(1,3)
         OPND  SX,(1,2),F
         OPCD  X'7C'
DE       OPND  R,1,(1,3)
         OPND  SX,(1,2),F
         OPCD  X'7D'
AU       OPND  R,1,(1,3)
         OPND  SX,(1,2),F
         OPCD  X'7E'
SU       OPND  R,1,(1,3)
         OPND  SX,(1,2),F
         OPCD  X'7F'
NOP      OPND  SX,(1,2),(H,ALW)         NOP OPERAND
         OPCD  X'4700'                  NOP OP CODE
BO       OPND  SX,(1,2),(H,ALW)
         OPCD  X'4710'
BH       OPND  SX,(1,2),(H,ALW)    BP ALSO
         OPCD  X'4720'
BL       OPND  SX,(1,2),(H,ALW)    BM ALSO
         OPCD  X'4740'
BNE      OPND  SX,(1,2),(H,ALW)
         OPCD  X'4770'
BE       OPND  SX,(1,2),(H,ALW)
         OPCD  X'4780'
BNL      OPND  SX,(1,2),(H,ALW)    BNM ALSO
         OPCD  X'47B0'
BNH      OPND  SX,(1,2),(H,ALW)    BNP ALSO
         OPCD  X'47D0'
BNO      OPND  SX,(1,2),(H,ALW)
         OPCD  X'47E0'
B        OPND  SX,(1,2),(H,ALW)
         OPCD  X'47F0'
SSM      OPND  S,1
         OPCD  X'80'
LPSW     OPND  S,1,(D,ALW)
         OPCD  X'82'
WRD      OPND  S,1
         OPND  I,3
         OPCD  X'84'
RDD      OPND  S,1,(MOD,NLIT)
         OPND  I,3
         OPCD  X'85'
BXH      OPND  R,1
         OPND  R,2
         OPND  S,1,(H,ALW)
         OPCD  X'86'
BXLE     OPND  R,1
         OPND  R,2
         OPND  S,1,(H,ALW)
         OPCD  X'87'
SRL      OPND  R,1
         OPND  S,1,NLIT
         OPCD  X'88'
SLL      OPND  R,1
         OPND  S,1,NLIT
         OPCD  X'89'
SRA      OPND  R,1
         OPND  S,1,NLIT
         OPCD  X'8A'
SLA      OPND  R,1
         OPND  S,1,NLIT
         OPCD  X'8B'
SRDL     OPND  R,1,1
         OPND  S,1,NLIT
         OPCD  X'8C'
SLDL     OPND  R,1,1
         OPND  S,1,NLIT
         OPCD  X'8D'
SRDA     OPND  R,1,1
         OPND  S,1,NLIT
         OPCD  X'8E'
SLDA     OPND  R,1,1
         OPND  S,1,NLIT
         OPCD  X'8F'
STM      OPND  R,1
         OPND  R,2
         OPND  S,1,(F,NLIT,MOD)
         OPCD  X'90'
TM       OPND  S,1
         OPND  I,3
         OPCD  X'91'
MVI      OPND  S,1,(MOD,NLIT)
         OPND  I,3
         OPCD  X'92'
TS       OPND  S,1,(MOD,NLIT)
         OPCD  X'93'
NI       OPND  S,1,(MOD,NLIT)
         OPND  I,3
         OPCD  X'94'
CLI      OPND  S,1
         OPND  I,3
         OPCD  X'95'
OI       OPND  S,1,(MOD,NLIT)
         OPND  I,3
         OPCD  X'96'
XI       OPND  S,1,(MOD,NLIT)
         OPND  I,3
         OPCD  X'97'
LM       OPND  R,1
         OPND  R,2
         OPND  S,1,F
         OPCD  X'98'
SIO      OPND  S,1,NLIT
         OPCD  X'9C'
SIOF     OPND  S,1,NLIT
         OPCD  X'9C01'
TIO      OPND  S,1,NLIT
         OPCD  X'9D'
CLRIO    OPND  S,1,NLIT
         OPCD  X'9D01'
HIO      OPND  S,1,NLIT
         OPCD  X'9E'
HDV      OPND  S,1,NLIT
         OPCD  X'9E01'
TCH      OPND  S,1,NLIT
         OPCD  X'9F'
STNSM    OPND  S,1,(NLIT,MOD)                                  <AM07317
         OPND  I,3
         OPCD  X'AC'
STOSM    OPND  S,1,(NLIT,MOD)                                  <AM07317
         OPND  I,3
         OPCD  X'AD'
SIGP     OPND  R,1
         OPND  R,2
         OPND  S,1,NLIT
         OPCD  X'AE'
MC       OPND  S,1
         OPND  I,2
         OPCD  X'AF'
LRA      OPND  R,1
         OPND  SX,(1,2)
         OPCD  X'B1'
STIDP    OPND  S,1,(NLIT,MOD)                                  <AM07317
         OPCD  X'B202'
STIDC    OPND  S,1,(NLIT,MOD)                                  <AM07317
         OPCD  X'B203'
SCK      OPND  S,1
         OPCD  X'B204'
STCK     OPND  S,1,(MOD,NLIT)
         OPCD  X'B205'
SCKC     OPND  S,1,(D,ALW)
         OPCD  X'B206'
STCKC    OPND  S,1,(D,ALW,NLIT,MOD)                            <AM07317
         OPCD  X'B207'
SPT      OPND  S,1,(D,ALW)
         OPCD  X'B208'
STPT     OPND  S,1,(D,ALW,NLIT,MOD)                            <AM07317
         OPCD  X'B209'
SPKA     OPND  S,1,NLIT
         OPCD  X'B20A'
IPK      OPCD  X'B20B'
PTLB     OPCD  X'B20D'
SPX      OPND  S,1,(F,ALW)
         OPCD  X'B210'
STPX     OPND  S,1,(F,NLIT,MOD,ALW)
         OPCD  X'B211'
STAP     OPND  S,1,(H,NLIT,MOD,ALW)
         OPCD  X'B212'
RRB      OPND  S,1,NLIT
         OPCD  X'B213'
STCTL    OPND  R,1
         OPND  R,2
         OPND  S,1,(F,MOD,NLIT)
         OPCD  X'B6'
LCTL     OPND  R,1
         OPND  R,2
         OPND  S,1,F
         OPCD  X'B7'
CS       OPND  R,1
         OPND  R,2
         OPND  S,1,(F,NLIT,MOD,ALW)
         OPCD  X'BA'
CDS      OPND  R,1,1
         OPND  R,2,1
         OPND  S,1,(D,NLIT,MOD,ALW)
         OPCD  X'BB'
CLM      OPND  R,1
         OPND  I,2
         OPND  S,1
         OPCD  X'BD'
STCM     OPND  R,1
         OPND  I,2
         OPND  S,1,(MOD,NLIT)
         OPCD  X'BE'
ICM      OPND  R,1
         OPND  I,2
         OPND  S,1
         OPCD  X'BF'
MVN      OPND  SL,(1,3),(MOD,NLIT)
         OPND  S,2
         OPCD  X'D1'
MVC      OPND  SL,(1,3),(MOD,NLIT)
         OPND  S,2
         OPCD  X'D2'
MVZ      OPND  SL,(1,3),(MOD,NLIT)
         OPND  S,2
         OPCD  X'D3'
NC       OPND  SL,(1,3),(MOD,NLIT)
         OPND  S,2
         OPCD  X'D4'
CLC      OPND  SL,(1,3)
         OPND  S,2
         OPCD  X'D5'
OC       OPND  SL,(1,3),(MOD,NLIT)
         OPND  S,2
         OPCD  X'D6'
XC       OPND  SL,(1,3),(MOD,NLIT)
         OPND  S,2
         OPCD  X'D7'
TR       OPND  SL,(1,3),(MOD,NLIT)
         OPND  S,2
         OPCD  X'DC'
TRT      OPND  SL,(1,3)
         OPND  S,2
         OPCD  X'DD'
ED       OPND  SL,(1,3),(MOD,NLIT)
         OPND  S,2
         OPCD  X'DE'
EDMK     OPND  SL,(1,3),(MOD,NLIT)
         OPND  S,2
         OPCD  X'DF'
SRP      OPND  SL,(1,1),(MOD,NLIT)
         OPND  S,2,NLIT
         OPND  I,2,(,,DEC)
         OPCD  X'F0'
MVO      OPND  SL,(1,1),(MOD,NLIT)
         OPND  SL,(2,2)
         OPCD  X'F1'
PACK     OPND  SL,(1,1),(MOD,NLIT)
         OPND  SL,(2,2)
         OPCD  X'F2'
UNPK     OPND  SL,(1,1),(NLIT,MOD)
         OPND  SL,(2,2)
         OPCD  X'F3'
ZAP      OPND  SL,(1,1),(MOD,NLIT)
         OPND  SL,(2,2)
         OPCD  X'F8'
CP       OPND  SL,(1,1)
         OPND  SL,(2,2)
         OPCD  X'F9'
AP       OPND  SL,(1,1),(MOD,NLIT)
         OPND  SL,(2,2)
         OPCD  X'FA'
SP       OPND  SL,(1,1),(MOD,NLIT)
         OPND  SL,(2,2)
         OPCD  X'FB'
MP       OPND  SL,(1,1),(MOD,NLIT)
         OPND  SL,(2,2)
         OPCD  X'FC'
DP       OPND  SL,(1,1),(MOD,NLIT)
         OPND  SL,(2,2)
         OPCD  X'FD'
         EJECT
FGT      MIEND
ESDSECT  DC    HS14'1'                  ESDID FOR A DSECT IS GE THIS
         JPATCH X5M00,A42               5 % PATCH AREA
         END   X5M                      DID I FORGET ANYTHING ?
