 TITLE 'IEBISSO-IEBISAM UTILITY PROGRAM-UNLOAD SUBROUTINE'
*STATUS: CHANGE LEVEL
*FUNCTION/OPERATION: SUPPLIED WITH A RECORD ADDRESS AND THE LENGTH OF *
*   INFORMATION CONTAINED AT THIS ADDRESS(IN BYTES),PRODUCES 80 BYTE  *
*   CARD IMAGES WITH THE FIELDS DEFINED IN OUTPUT. A POINTER TO THE   *
*   CURRENT OUTPUT ADDRESS AND THE NUMBER OF BYTES REMAINING TO BE    *
*   FILLED IN THIS 80 BYTE AREA ARE MAINTAINED.                       *
*ENTRY POINTS: IEHISSI-TO PROCESS A RECORD FOR OUTPUT  BAL 14,IEHISSO *
*   DATA IS PASSED BY LOCATION                                        *
*INPUT: ALL ZEROS IN REGISTER 0 UPON INITIAL ENTRY                    *
*   AND THE ADDRESS OF THE PARAMETER LIST IN REGISTER 1.              *
*   A TWO BYTE RECORD LENGTH IN REGISTER 0 AND A RECORD ADDRESS IN    *
*   REGISTER 1, AND A RECORD OF LENGTH SPECIFIED BY REGISTER ZERO AT  *
*   THE ADDRESS SPECIFIED BY REGISTER 1.                              *
*   PARAMETER LIST                                                    *
*    GUARD    F     CONTAINS ADDRESS OF COMMON WORK AREA              *
*    KEYADR   F     CONTAINS KEY ADDRESS OR  X'FF' IN HIGH ORDER BYTE *
*    LONG     CL1   CONTAINS KEY LENGTH                               *
*    CPYDCB   CL1   DCB UNLOADED INDICATOR                            *
*                                                                     *
*   REGISTER 13 MUST CONTAIN  THE ADDRESS OF THE CALLING PROGRAM'S    *
*   SAVE AREA,REGISTER 14 MUST CONTAIN THE RETURN ADDRESS IN THE      *
*   CALLING PROGRAM,AND REGISTER 15 MUST CONTAIN THE ADDRESS OF THIS  *
*   MODULE                                                            *
*OUTPUT: 80 BYTE CARD IMAGES WITH THE FOLLOWING FIELDS                *
*   SEQUENCE NUMBER: A TWO BYTE NUMBER STARTING AT ZERO FOR THE FIRST *
*   CARD IMAGE AND INCREMENTED BY ONE FOR EACH SUCCEEDING CARD IMAGE. *
*   LENGTH: A TWO BYTE FIELD SPECIFYING THE NUMBER OF BYTES OF INFOR- *
*   MATION BETWEEN THIS LENGTH FIELD AND THE NEXT.                    *
*   INFORMATION: THIS FIELD CONTAINS THE INFORMATION FROM A GIVEN     *
*   RECORD. IT IS SEGMENTED(IF NECESSARY) ON SEQUENTIAL CARD IMAGES.  *
*   THE LENGTH FIELD DETERMINES ITS SEGMENTATION.                     *
*   END OF OUTPUT: THIS FIELD OF 0,1,OR 2 BYTES OF ZEROS IS CONTAINED *
*   ONLY ON THE LAST CARD IMAGE.                                      *
*EXTERNAL ROUTINES; IEBISU - UNLOAD RTN.GETRECORD ADDRESS AND         *
*   LENGTH.                                                           *
*EXITS-NORMAL:  WHEN AN ENTIRE RECORD HAS BEEN PROCESSED (LENGTH      *
*   IN REGISTER 0), A RETURN IS MADE TO THE CALLING PROGRAM BY A      *
*   RETURN MACRO WITH A RETURN CODE OF 0 IN REGISTER 15.              *
*     -ERROR: IF AN EXIT TO THE OUTPUT DCB SYNAD ROUTINE WAS TAKEN    *
*   A RETURN CODE OF FOUR(4) IS LOADED IN REGISTER 15,BEFORE A RETURN *
*   IS MADE TO THE CALLING PROGRAM.                                   *
*   IF THE OPEN FOR THE OUTPUT DATA SET WAS NOT SUCCESSFULLY COMPLETED*
*   A RETURN CODE OF EIGHT(8) IS LOADED IN REGISTER 15.               *
*   IF THE BLKSIZE FIELD OF THE OUTPUT DCB WAS INCORRECT A RETURN     *
*   CODE OF 12 IS LOADED INTO REGISTER 15.                            *
*TABLES/WORK AREAS: SAVE AREA 72 BYTES TO STORE REGISTERS             *
*   SEQ = SEQUENCE NUMBER WORK AREA                                   *
*   KEEP = SAVE AREA FOR CURRENT OUTPUT AREA ADDRESS                  *
*   SAVE = BYTES REMAINING IN CARD IMAGE WORK AREA                    *
*ATTRIBUTES-REENTRANT                                              000G
*NOTES:  BASE REGISTER    = BASERG                                    *
*        SAVE REGISTER =  13                                          *
*        PARAMETER REGISTERS:                                         *
*         PARM0=0 ,PARM1=1                                            *
*        RETURN CODE REGISTER = 15                                    *
*        RETURN REGISTER = 14                                         *
*        WORK REGISTERS                                               *
*         WK2            WK6                                          *
*         WK3            WK7                                          *
*REGISTER ASSIGNMENTS
PARM00   EQU   0
PARM1    EQU   1        *REGISTERS* REGISTER OF EVEN-ODD PAIR
WK2      EQU   2                   WORK REGISTER
WK3      EQU   3                   BYTES LEFT IN OUTPUT-WORK REGISTER
PARM0    EQU   4
RETRG    EQU   5                   RETURN REGISTER FOR OPERTN SECTION
WK6      EQU   6                   WORK REGISTER FOR OPERTN SECTION
WK7      EQU   7                   WORK REGISTER
TRANS    EQU   8                   CURRENT RECORD ADDRESS REGISTER
OUTPT    EQU   9                   CURRENT OUTPUT AREA ADDRESS REGISTER
BASREG   EQU   10                  BASE REGISTER
WORKAREA EQU   11                      WORKAREA REGISTER           000G
WK12     EQU   12                            RECORD KEY ADDRESS
SAVREG   EQU   13
RCRG     EQU   15
*                                                                     *
IEBISSO  CSECT
*2821     014600,016600,018400-018600,019000-019600,020000-020200, 000G
*         020800,021200,021600,022000,024400-024600,025000-025400, 000G
*         025800,026800,027800,028200,028600-029200,029600,030000, 000G
*         030400,031600,032600-033000,033600,034400-035000,035600, 000G
*         038000-038200,039200,040800,041200,044000-044200,        000G
*         045600-045800,046200,046600,047200-047400,048000,048400, 000G
*         050800,051800,052200,052600-053000,054800,056400,        000G
*         059600-059800,060200,062200,063200-065000,               000G
* WITH RELEASE 16 THE ENTIRE MODULE WAS REPLACED                   000G
*  WITH RELEASE 16 THIS MODULE WAS MADE REENTRANT BY USING A       000G
*DSECT NAMED IEBWORK WHICH WAS DESIGNED AS A COMMON WORKAREA.      000G
*  THIS SECTION PERFORMS THE INITIALIZATION NECESSARY FOR EACH ENTRY  *
*A576100-578000                                                  A41745
         SAVE  (14,12),T,SSO-66-V1           SAVE REGISTERS
         USING IEBISSO,BASREG                ESTABLISH BASE REGISTER
         LR    BASREG,RCRG                   ESTABLISH BASE REGISTER
         LTR   PARM00,PARM00           IS THIS INITIAL ENTRY       000G
         BNE   SKIP                    NO, BRANCH                  000G
         LR    WORKAREA,PARM1          PICK UP WORK AREA POINTER   000G
         USING IEBWORK,WORKAREA                                    000G
SKIP     ST    SAVREG,SAVE2BK          SET BACK CHAIN POINTER      000G
         LA    SAVREG,SAVE2            UPDATE TO NEW SAVE AREA     000G
         LA    WK2,SAVE3               SET UP FORWARD CHAIN POINTER000G
         ST    WK2,SAVE2FD                TO NEXT SAVE AREA        000G
         BNE   COMPRE                       NO,BRANCH
*                                                                     *
*  THIS SECTION SAVES THE PARAMETER LIST ADDRESS STORES KEYLEN FOR UN-*
*BLOCKED RECORDS, SETS THE UNBLOCKED RECFM INDICATOR, MOVES THE       *
*  DDNAME FROM ISUT2 FIELD OF COMMON AREA TO THE OUTPUT DCB,OPENS THE *
*  OUTPUT DATASET, SAVES THE APPROPIATE POINTERS ANS SETS RETURN CODE *
*                                                                     *
         CLI   DOUBLE,X'FF'            UNBLOCKED RECORDS           000G
         BNE   COMAREA             NO,BRANCH
         MVC   EXITADDR+5(1),DOUBLE+4   STORE KEY LENGTH           000G
         MVI   EXITADDR+6,X'02'        SET UNBLOCKED INDICATOR     000G
COMAREA  MVC   DCBAR2(OPENL-OUTDCB),OUTDCB                         000G
         USING IHADCB,WK2                                          000G
         LA    WK2,DCBAR2                                          000G
         MVI   REENTAR+33,X'00'                                    000G
         MVC   DCBDDNAM(8),ISUT2       MOVE DDNAME FROM ISUT2      000G
         MVC   REENTAR(CLOSEL-OPENL),OPENL   MOVE OPENL TO WORKAREA000G
         OPEN  (DCBAR2,(OUTPUT)),MF=(E,REENTAR)   YES, OPEN OUTPUT 000G
         TM    DCBOFLGS,X'10'                WAS OPEN SUCCESSFUL
         BZ    NOTOK                         IF NOT,BRANCH
         CLI   REENTAR+33,X'00'        VALID DCB FIELDS            000G
         BNE   HERE                          NO, BRANCH
ALRITE   XC    EXITADDR(2),EXITADDR    SET SEQUENCE NUMBER TO 0    000G
         LA    WK3,78                        NUMBER OF BYTES LEFT IN
         STH   WK3,EXITADDR+2              OUTPUT AREA EQUAL 78    000G
         BAL   RETRG,OPERTN
         ST    OUTPT,ALIGN             SAVE OUTPUT POINTER         000G
         LR    PARM1,WK2                     LOAD ADDRESS OF OUTPUT DCB
         LA    RCRG,0                        SET RETURN CODE OF ZERO
         LR    PARM00,RCRG                   RETURN ZERO IN REGISTER 0
         L     SAVREG,4(SAVREG)             POP UP SAVE AREA
         L     14,12(0,SAVREG)               RESTORE REGISTER FOURTEEN
         RETURN (2,12),T,RC=(15)            RETURN TO CALLING PROGRAM
*  THIS SECTION DETERMINES IF THERE IS ANY SPACE LEFT IN THE OUTPUT   *
*  AREA. IF NOT,THE NEXT AVAILABLE OUTPUT AREA ADDRESS IS ACQUIRED.   *
*  ALL POINTERS AND LENGTH SPECIFIERS,SAVED UPON EXIT,ARE RESTORED.   *
COMPRE   LR    TRANS,PARM1                   SAVE RECORD ADDRESS
         LR    PARM0,PARM00
         CLI   DOUBLE+5,X'FF'          END OF INPUT DATA           000G
         BE    ERROR1                   YES,BRANCH CLOSE OUTPUT    000G
         BE    ERROR+4                       YES,BRANCH ,CLOSE OUTPUT
         L     WK12,DOUBLE             LOAD KEY ADDRESS            000G
         MVC   EXITADDR+5(1),DOUBLE+4   GET KEY LENGTH             000G
         L     OUTPT,ALIGN             RESTORE OUTPUT POINTER      000G
         LA    WK7,2(PARM0)                  SAVE LENGTH PLUS 2 BYTES
         CLC   EXITADDR+2(2),ZERO      IF SPACE LEFT IN OUTPUT     000G
         BNE   HOWMCH                         AREA,BRANCH
*                                            ELSE,GET NEXT AVAILABLE
         BAL   RETRG,OPERTN                   OUTPUT AREA ADDRESS
         LA    WK3,78                        RESET BYTES LEFT IN OUTPUT
         STH   WK3,EXITADDR+2              AREA TO 78              000G
         SPACE
*  THIS SECTION DETERMINES THE AMOUNT OF ROOM LEFT,PUTS THE RECORD    *
*  LENGTH IN THE OUTPUT AREA AND STEPS THE OUTPUT POINTER.            *
         EJECT
HOWMCH   CH    WK7,EXITADDR+2          IF ENOUGH ROOM FOR INFOR-   000G
         BNH   ENUF                           MATION AND LENGTH,BRANCH
         CLC   EXITADDR+2(2),TWO       IF ONLY ONE BYTE LEFT IN    000G
         BL    ONE                            OUTPUT AREA,BRANCH
         STH   PARM0,ALIGN                                         000G
         MVC   0(2,OUTPT),ALIGN        MOVE LENGTH TO OUTPUT AREA  000G
         LH    PARM0,ALIGN                                         000G
         LH    WK3,EXITADDR+2                                      000G
         SH    WK3,TWO                       DECREMENT NUMBER OF BYTES
         STH   WK3,EXITADDR+2              LEFT BY TWO             000G
         LA    OUTPT,2(OUTPT)                ADD TWO TO OUTPUT POINTER
         CLI   DOUBLE+5,X'11'          DCB FIELDS UNLOADED         000G
         BE    INFORM                        NO  BRANCH
         CLI   EXITADDR+6,X'02'        UNBLOCKED RECORDS           000G
         BNE   INFORM                        NO,BRANCH
         LTR   WK3,WK3                       ANY MORE BYTES LEFT?
         BZ    KACTION                       NO,BRANCH
*  THIS SECTION MOVES THE RECORD KEY TO THE OUTPUT AREA FOR UNBLOCKED *
*RECORDS:WHERE RKP=0, TECHNIQUE SAME AS FOR DATA PORTIONS.            *
KEYCOMP  LH    WK6,EXITADDR+4          LOAD KEY LENGTH             000G
         CR    WK3,WK6                       ENOUGH ROOM FOR KEY?
         BL    GETMOR                        NO,BRANCH
         BCTR  WK6,0
         EX    WK6,MVEKEY                    MOVE KEY TO OUTPUT
         SH    PARM0,EXITADDR+4        DECREMENT TOTAL LENGTH      000G
         AH    OUTPT,EXITADDR+4        STEP OUTPUT POINTER         000G
         SH    WK3,EXITADDR+4          DECREMENT BYTES LEFT        000G
         LTR   WK3,WK3                       ANY BYTES LEFT
         BZ    MORE                          NO,BRANCH
         STH   WK3,EXITADDR+2                                      000G
         B     FIND                          YES,BRANCH
GETMOR   BCTR  WK3,0
         EX    WK3,MVEKEY                    MOVE 'SAVE' BYTES OF KEY
         SH    WK6,EXITADDR+2          DECREMENT KEY LENGTH        000G
         STH   WK6,EXITADDR+4                                      000G
         SH    PARM0,EXITADDR+2        DECREMENT TOTAL LENGTH      000G
         AH    WK12,EXITADDR+2         STEP KEY ADDRESS            000G
KACTION  BAL   RETRG,OPERTN                  GET NEXT OUTPUT ADDRESS
         LA    WK3,78
         STH   WK3,EXITADDR+2          SET SAVE = 78               000G
*  THIS INSTRUCTION MOVES THE RECORD KEY TO OUTPUT; THE LENGTH OF     *
*WHICH IS SPECIFIED IN THE REGISTER OF AN EXECUTE INSTRUCTION         *
         B     KEYCOMP
MVEKEY   MVC   0(0,OUTPT),0(WK12)            MOVE KEY TO OUTPUT
INFORM   LTR   WK3,WK3                       ANY SPACE
         BZ    MORE                           LEFT,BRANCH
         SPACE
*  THIS SECTION MOVES ENOUGH BYTES FROM THE RECORD TO FILL THE OUTPUT *
*  AREA AND MODIFIES THE OUTPUT POINTER AND RECORD LENGTH.            *
CONTIN   BCTR  WK3,0                         MOVE 'SAVE' BYTES TO
         EX    WK3,MOVE                      FILL OUTPUT AREA
         AH    TRANS,EXITADDR+2        STEP RECORD POINTER         000G
         SH    PARM0,EXITADDR+2        DECREMENT LENGTH BY 'SAVE'  000G
*  THIS SECTION GETS NEXT AVAILABLE OUTPUT ADDRESS AND RESETS 'SAVE'
*                                            GET ADDRESS OF NEXT AVAIL-
MORE     BAL   RETRG,OPERTN                   ABLE OUTPUT AREA
         LA    WK3,78                        RESET BYTES LEFT IN
         STH   WK3,EXITADDR+2               OUTPUT AREA TO 78      000G
*  THIS SECTION MOVES IN THE ENTIRE RECORD OF INFORMATION,IF THERE IS *
*  ENOUGH ROOM IN THE OUTPUT AREA
FIND     CR    WK3,PARM0                     ENOUGH ROOM
         BL    CONTIN                        NO,GO MOVE IN 'SAVE' BYTES
         LR    WK3,PARM0                     YES,
         BCTR  WK3,0
         EX    WK3,MOVE                      MOVE IN INFORMATION
         LH    WK3,EXITADDR+2                                      000G
         SR    WK3,PARM0                     DECREMENT NUMBER OF BYTES
         STH   WK3,EXITADDR+2            LEFT BY NUMBER MOVED (LL) 000G
         AR    OUTPT,PARM0                   STEP OUTPUT POINTER
         B     CHECK
*  THIS SECTION INSERTS THE HIGH ORDER BYTE OF THE RECORD LENGTH IN   *
*  LAST BYTE OF OUTPUT AREA;LOW ORDER BYTE IN THE NEXT AVAILABLE OUT- *
*  PUT AREA AND MODIFIES THE APPROPIATE POINTERS AND LENGTH SPECIFIER *
ONE      SRDL  PARM0,8                       INSERT HIGH ORDER BYTE OF
         STC   PARM0,0(0,OUTPT)               RECORD LENGTH FOR OUTPUT
         SRDL  PARM0,8                                             1620
         LR    PARM0,RETRG
         SRL   PARM0,16                                            1620
         BAL   RETRG,OPERTN
         STC   PARM0,0(0,OUTPT)              INSERT LOW ORDER BYTE
         LA    OUTPT,1(OUTPT)               STEP OUTPUT POINTER BY ONE
         LA    WK3,77                        RESET NUMBER OF BYTES LEFT
         STH   WK3,EXITADDR+2            IN OUTPUT AREA TO 77      000G
         CLI   EXITADDR+6,X'02'        UNBLOCKED RECORDS           000G
         BE    KEYCOMP                       YES,BRANCH
         B     FIND                          NO,BRANCH
         SPACE 2
*  THIS SECTION MOVES AN ENTIRE RECORD TO THE OUTPUT AREA AND MODIFIES*
*  THE OUTPUT AREA LENGTH SPECIFIER AND THE OUTPUT AREA POINTER. IT   *
*  ALSO MOVES RECORD LENGTH TO OUTPUT AREA.                           *
ENUF     STH   PARM0,ALIGN             MOVE LENGTH TO OUTPUT AREA  000G
         MVC   0(2,OUTPT),ALIGN                                    000G
         LA    OUTPT,2(OUTPT)                ADD TWO TO OUTPUT POINTER
         CLI   EXITADDR+6,X'02'        UNBLOCKED RECORDS           000G
         BNE   EASYMVE                       NO,BRANCH
         LH    WK6,EXITADDR+4          GET KEYLEN                  000G
         BCTR  WK6,0
         EX    WK6,MVEKEY                    MOVE KEY TO OUTPUT
         SH    PARM0,EXITADDR+4        DECREMENT TOTAL LENGTH      000G
         AH    OUTPT,EXITADDR+4        STEP OUTPUT POINTER         000G
EASYMVE  BCTR  PARM0,0                       MOVE ENTIRE RECORD TO
         EX    PARM0,MOVE                     OUTPUT AREA
         LH    WK3,EXITADDR+2          DECREMENT BYTES LEFT BY     000G
         SR    WK3,WK7                        THE BYTES OF INFORMATION
         STH   WK3,EXITADDR+2                MOVED PLUS TWO.       000G
         AR    OUTPT,PARM0                  STEP OUTPUT POINTER
         LA    OUTPT,1(OUTPT)                BY LENGTH OF RECORD
         SPACE
*  THIS  SECTION PUTS 1 OR 2 BYTES OF ZEROS IN THE OUTPUT AREA AT THE *
*  END OF EACH FIELD OF INFORMATION,AND SETS A RETURN CODE OF ZERO.   *
CHECK    CH    WK3,UNO                       ONE BYTE LEFT IN OUTPUT
         BE    END                           NO,BRANCH
         BL    END+6                         POSSIBLE END,BRANCH
         MVC   0(2,OUTPT),ZERO               DESIGNATE POSSIBLE END OF
         B     END+6                         OUTPUT BY HALFWORD OF ZERO
END      MVC   0(1,OUTPT),ZERO                OR BY ONE BYTE OF ZERO
         ST    OUTPT,ALIGN             SAVE OUTPUT POINTER         000G
         LA    RCRG,0                   RETURN CODE=0;OPERATION OKAY
         B     GOBACK                   BRANCH,TO RETURN
         SPACE
*  THIS SECTION SETS RETURN CODES DIFFERENT FROM 0.                   *
NOTOK    MVI   REENTAR+32,X'08'        RETURN CODE=8 OPEN NOT GOOD 000G
         B     ERROR1                                              000G
HERE     MVI   REENTAR+32,X'12'        WRONG DSORG OR BLKSIZE      000G
         B     ERROR1                                              000G
ERROR    MVI   REENTAR+32,X'04'        RETURN CODE=4 SYNAD RTN     000G
         SYNADAF ACSMETH=QSAM,PARM1=DCBAR2,PARM2=(0)               000G
         MVC   MESSAGE+8(79),49(PARM1)  MOVE IN MESSAGE            000G
         SYNADRLS                                                  000G
ERROR1   MVC   REENTAR(ZERO-CLOSEL),CLOSEL   MOVE L FORM OF CLOSE  000G
*                                               TO WORKAREA        000G
         CLOSE (DCBAR2),MF=(E,REENTAR)   CLOSE OUTPUT              000G
         CLI   REENTAR+32,X'08'         OPEN NO GOOD             A41745
         BE    BYPASS                   NO OPEN SO BYPASS FREEP  A41745
         FREEPOOL DCBAR2                FREEPOOL OUTPUT BUFFER   A41745
BYPASS   IC    RCRG,REENTAR+32         LOAD RETURN CODE          A41745
GOBACK   L     SAVREG,4(SAVREG)             POP UP SAVE AREA
         RETURN (14,12),T,RC=(15)           RETURN TO CALLING PROGRAM
         SPACE
*                                                                     *
*  THIS IS THE OUTPUT DCB EXIT ROUTINE.   THE BLOCKSIZE               *
*  IS VERIFIED TO BE A MULTIPLE OF EIGHTY(80).  AN INDICATOR IS SET TO*
*  DESIGNATE THE INVALIDITY OF THE TWO FIELDS.                        *
*                                                                     *
DCBRTN   XC    REENTAR+33(1),REENTAR+33  CLEAR INDICATOR           000G
TBLKSI   CLC   DCBBLKSI(2),ZERO             BLOCKSIZE FIELD ZERO
         BE    SET80                         YES,BRANCH
         SR    WK6,WK6
         LH    WK7,DCBBLKSI                  LOAD BLOCKSIZW
         D     WK6,EIGHTY                    IS BLOCKSIZE A MULTIPLE
         LTR   WK6,WK6                        OF EIGHTY?
         BE    CONTINUE
         MVI   REENTAR+33,X'FF'        SET INVALID INDICATOR       000G
         B     CONTINUE
SET80    MVC   DCBBLKSI(2),EIGHTY+2          SET BLOCKSIZE TO EIGHTY
CONTINUE RETURN
*  THIS INSTRUCTION MOVES INFORMATION FROM THE RECORD TO THE OUTPUT   *
*  AREA;THE NUMBER OF CHARACTERS TO BE MOVED IS SPECIFIED IN THE      *
*  REGISTER OF THE EXECUTE STATEMENT WHICH USES THIS INSTRUCTION.     *
MOVE     MVC   0(0,OUTPT),0(TRANS)      MOVE INFORMATION TO OUTPUT
         EJECT
*  THE FOLLOWING SECTION OF CODE OUTPUTS ONE CARD IMAGE AND SUPPLIES  *
*  AN ADDRESS OF THE NEXT AVAILABLE OUTPUT AREA. IT ALSO MOVES THE    *
*  TWO BYTE SEQUENCE NUMBER TO THE OUTPUT AREA,INCREMENTS THE SEQUENCE*
*  NUMBER BY ONE FOR THE FOLLOWING CARD IMAGE,AND STEPS THE POINTER TO*
*  THE OUTPUT AREA BY TWO. THE RESULTING ADDRESS IS RETURNED IN 'OUT- *
*  PT' TO THE ADDRESS SPECIFIED IN THE REGISTER NAMED 'RETRG'.        *
OPERTN   PUT   DCBAR2                  OUTPUT CARD IMAGE           000G
         MVC   0(2,PARM1),EXITADDR     MOVE SEQUENCE NUMBER        000G
         LH    WK6,EXITADDR                                        000G
         LA    WK6,1(WK6)
         STH   WK6,EXITADDR            INCREMENT NUMBER BY ONE     000G
REAP     LA    OUTPT,2(PARM1)               STEP OUTPUT POINTER BY TWO
         BR    RETRG
         DS    0F
VALID    DC    X'85'
         DC    AL3(DCBRTN)
         SPACE
OUTDCB   DCB   DSORG=PS,MACRF=PL,DDNAME=SYSUT2,                        *
               RECFM=FB,LRECL=80,SYNAD=ERROR,EXLST=VALID
         SPACE
*CONSTANTS
OPENL    OPEN  (,OUTPUT),MF=L                                      000G
CLOSEL   CLOSE (,DISP),MF=L                                        000G
ZERO     DC    1H'0'               **
UNO      DC    1H'1'                *COMPARE CONSTANTS
TWO      DC    1H'2'               **
EIGHTY   DC    F'80'
         DCBD  DSORG=(PS)
IEBWORK  DSECT
SAVE1    DS    1F
SAVE1BK  DS    1F
SAVE1FD  DS    1F
         DS    15F
SAVE2    DS    1F
SAVE2BK  DS    1F
SAVE2FD  DS    1F
         DS    15F
SAVE3    DS    1F
SAVE3BK  DS    1F
SAVE3FD  DS    1F
         DS    15F
*IEHISR WORKAREA
ISINVOK  DS    F                        ADDRESS OF PARAMETER LIST AT
*                                          INVOCATION
ISPRINT  DS    2F                       DDNAME FOR SYSPRINT
ISUT1    DS    2F                       DDNAME FOR SYSUT1
ISUT2    DS    2F                       DDNAME FOR SYSUT2
ISCOMP   DS    H                        COMPLETION CODE
ISMESS   DS    H                        MESSAGE NUMBER
ISPAGE   DS    H                        PAGE NUMBER FOR SYSPRINT
ISCNTRL  DS    CL1                      CONTROL BYTE
* MASKS FOR TESTING CONTROL BYTE - ISCONTRL
ISSWC    EQU   X'80'                    COPY
ISSWU    EQU   X'40'                    UNLOAD
ISSWL    EQU   X'20'                    LOAD
ISSWP    EQU   X'10'                    PRINT
ISSWN    EQU   X'08'                    NO CONVERT REQUESTED
ISSWPI   EQU   X'04'                    PRINT INDEX
ISSWPP   EQU   X'02'                    PRINT PRIME
ISSWPO   EQU   X'01'                    PRINT OVERFLOW
ALLMASK  EQU   X'07'                                               000G
ISSWITCH DS    CL1                      EXTRANEOUS SWITCHES
FIRSTTM  EQU   X'80'                    FIRST TIME SWITCH
*
XCTLAREA DS    2F
WHICH    DS    2F
ALIGN    DS    1F
DOUBLE   DS    1D
EXITADDR DS    2F
REENTAR  DS    9F
DCBAR1   DS    64F
DCBAR2   DS    64F
MESSAGER DS    CL1
MESSAGE  DS    CL120
RECADDR  DS    1F                                                  000G
         DS    0D
QISAM    DS    CL250                    UNLOADED DCB WORK AREA
HEADERC  DS    CL1
HEADERT  DS    CL144                    HEADER AREA
TARGET   DS    2F                       DATE HOLD AREA
PAGENO   DS    1F                       HOLD PAGE NUMBER FOR A HEADING
PAGEPTR  DS    1F                       HOLD POINTER TO WHERE PAGE
*                                       NUMBER IS TO BE PLACED
         END
