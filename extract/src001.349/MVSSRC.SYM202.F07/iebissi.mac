 TITLE 'IEBISSI-IEBISAM UTILITY PROGRAM-LOAD SUBROUTINE'
*STATUS: CHANGE LEVEL                                                 *
*FUNCTION/OPERATION: GIVEN A LIMIT(MAXIMUM NUMBER OF CHARACTERS OF    *
*   CHARACTERS THAT SHOULD BE TRANSMITTED,AND THE ADDRESS OF THE AREA *
*   TO WHICH THESE CHARACTERS ARE TO BE TRANSMITTED, THIS SUBROUTINE  *
*   PROCESSES 80 BYTE CARD IMAGES OF FORMAT DESCRIBED BELOW. A POINTER*
*   TO THE CURRENT INPUT AREA ADDRESS AND THE NUMBER OF BYTES REMAIN- *
*   ING TO BE PROCESSED ON THE CARD IMAGE ARE MAINTAINED. A CHECK FOR *
*   SEQUENTIAL INPUT IS MADE EACH TIME A CARD IMAGE IS OBTAINED.      *
*ENTRY POINTS: IEBISSI - TO GET A RECORD LENGRH AND ADDRESS OF THE    *
*   RECORD.   BAL  14,IEHISSI. DATA IS PASSED BY LOCATION.            *
*INPUT:ALL ZEROS IN REG 0 ON FIRST ENTRY.OTHERWISE,A LIMIT AND ADDRESS*
*       CARDS OR TAPE,80 BYTE CARD IMAGES WITH FOLLOWING FORMAT       *
*   SEQUENCE NUMBER: A TWO BYTE NUMBER WHICH IS ZERO FOR THE FIRST    *
*   CARD IMAGE AND ONE GREATER FOR EACH SUCCEEDING CARD IMAGE.        *
*   LENGTH: A TWO  BYTE  FIELD SPECIFYING THE NUMBER OF BYTES OF IN-  *
*   FORMATION BETWEEN THIS LENGTH FIELD AND THE NEXT. THIS FIELD IN-  *
*   DICATES HOW THE FOLLOWING INFORMATION IS SEGMENTED ON SEQUENTIAL  *
*   CARD IMAGES(IF IT IS SEGMENTED).                                  *
*   INFORMATION: THIS FIELD CONTAINS THE INFORMATION FROM A GIVEN RE  *
*   CORD,IT MAY BE SEGMENTED ON SEQUENTIAL CARD IMAGES.               *
*   END OF INPUT : A 0,1 , OR  2 BYTE FIELD OF ZERO CONTAINED ONLY ON *
*   THE LAST CARD IMAGE TO DESIGNATE  END OF  INPUT                   *
*                                                                     *
*   REGISTER 13 MUST CONTAIN  THE ADDRESS OF THE CALLING PROGRAM'S    *
*   SAVE AREA,REGISTER 14 MUST CONTAIN THE RETURN ADDRESS IN THE      *
*   CALLING PROGRAM,AND REGISTER 15 MUST CONTAIN THE ADDRESS OF THIS  *
*   MODULE                                                            *
*OUTPUT: A VARIABLE LENGTH RECORD, THE LENGTH OF WHICH DOES NOT EXCEED*
*   THE VALUE GIVEN THIS ROUTINE IN REGISTER ZERO UPON ENTRY.         *
*EXTERNAL ROUTINES: IEBISL - LOAD RTN. GET LIMIT AND ADDRESS TO WHICH *
*   INFORMATION IS TO BE TRANSMITTED.                                 *
*EXITS-NORMAL: TO CALLING PROGRAM WITH A RETURN CODE OF 0 IN REGISTER *
*   15,THE ACTUAL LENGTH OF THE INFORMATION TRANSMITTED, AND THE      *
*   ADDRESS OF THIS INFORMATION. CONTENTS OF OTHER REGISTERS UNCHANGED*
*     -ERROR: TO CALLING PROGRAM WITH ONE OF THE FOLLOWING RETURN CODE*
*   S AND THE CONTENTS OF THE OTHER REGISTERS UNCHANGED,DATASET CLOSED*
*   RETURN CODES:                                                     *
*   FOUR(4) = AN EXIT TO THE INPUT DCB SYNAD ROUTINE WAS TAKEN.       *
*   EIGHT(8)= END OF INPUT DATA.                                      *
*   TWELVE(12)= NUMBER OF CHARACTERS TO BE TRANSMITTED EXCEEDS LIMIT. *
*   SIXTEEN(16)= INPUT OUT OF SEQUENCE.                               *
*   TWENTY(20)=  OPEN UNSUCCESSFUL FOR INPUT DATASET                  *
*TABLES/WORKAREAS:                                                    *
*   SPACE = NUMBER OF BYTES TO BE PROCESSED AREA                      *
*   CSQ = NUMBER USED TO CHECK SEQUENTIAL INPUT WORK AND SAVE AREA    *
*   HOLD = WORK AREA FOR ACTUAL LENGTH OF INFORMATION TRANSMITTED     *
*   SAVARA =  SAVE AREA FOR REGISTERS                                 *
*ATTRIBUTES\ REENTRANT                                             000G
*NOTES:  BASE REGISTER        BASREG                                  *
*        SAVE REGISTER        SAVREG = 13                             *
*        PARAMETER REGISTERS  PARM0 =0                                *
*                             PARM1 =1                                *
*        RETURN CODE REGISTER      RCRG=15                            *
*        RETURN REGISTER           NSIRG                              *
*        WORK REGISTERS            WK2            WK6                 *
*                                  WK3            WK7                 *
*        ADDRESSING REGISTERS      INPT           TRANS               *
*  REGISTER ASSIGNMENTS
PARM00   EQU   0        PARAMETER*LIMIT REGISTER
PARM1    EQU   1         REGISTERS*ADDRESS OF TRANSMITTED INFORMATION
WK2      EQU   2                   WORK REGISTER
WK3      EQU   3                   BYTES TO BE PROCESSED WORK REGISTER
PARM0    EQU   4
NSIRG    EQU   5                   RETURN REGISTER FOR PROC SECTION
WK6    EQU   6
WK7      EQU   7                   WORK REGISTER FOR RECORD LENGTH
INPT     EQU   8                   INPUT ADDRESS REGISTER
TRANS    EQU   9                   OUTPUT ADDRESS REGISTER
BASREG   EQU   10                  BASE REGISTER
WORKAREA EQU   11                       WORKAREA REGISTER          000G
SAVREG   EQU   13                 SAVE RGISTER
RCRG     EQU   15                  RETURN CODE REGISTER
IEBISSI  CSECT
*0181480000                                                        7060
*                                                                A31442
*A762100-765000                                                  A41745
*A399300-401700,585100-587100,787000                             A45167
*D387000,579000                                                  A45167
*C258000                                                         A45167
*A390500-392000                                                  A48756
*C399300                                                         A48756
*A742500
*A STATEMENTS FOR FIX 01165 ARE REPLACED BY STMNTS FOR FIX 01167OY01165
*A586600-586660                                                 OY01167
*D586600                                                        OY01167
* WITH RELEASE 16 THE ENTIRE MODULE WAS REPLACED                   000G
*  WITH RELEASE 16 THIS MODULE WAS MADE REENTRANT BY USING A       000G
*A DSECT CALLED IEBWORK WHICH WAS DESIGNED AS A COMMON WORKAREA.   000G
*  THIS SECTION PERFORMS THE INITIALIZATION NECESSARY FOR EACH ENTRY  *
         SAVE  (14,12),T,SSI-66-V1           SAVE REGISTERS
         USING IEBISSI,BASREG                ESTABLISH BASE REGISTER
         LR    BASREG,RCRG                   ESTABLISH BASE REGISTER
         LTR   PARM0,PARM00        SECOND ENTRY ?                A45167
         BNE   SKIP                    NO, BRANCH                  000G
         LR    WORKAREA,PARM1           PICK UP WORKAREA POINTER   000G
         USING IEBWORK,WORKAREA
SKIP     ST    SAVREG,SAVE2BK           SET BACK CHAIN POINTER     000G
         LA    SAVREG,SAVE2             UPDATE TO NEW SAVE AREA    000G
         LA    WK2,SAVE3                SET UP FORWARD CHAIN POINTR000G
         ST    WK2,SAVE2FD                 TO NEXT SAVE AREA       000G
         LTR   PARM00,PARM00                IS THIS INITIAL ENTRY
         BNE   COMP                         NO,BRANCH
         SPACE
*                                                                     *
*  THIS SECTION LOADS THE ADDRESS OF THE IEBISR COMMON AREA, MOVES THE*
*  DDNAME FROM ISUT1 FIELD OF COMMON AREA TO THE INPUT  DCB,OPENS THE *
*  INPUT  DATASET, SAVES THE APPROPIATE POINTERS ANS SETS RETURN CODE *
*                                                                     *
         MVC   DCBAR1(LABEL-INDCB),INDCB                           000G
         USING IHADCB,WK2
         LA    WK2,DCBAR1                                          000G
         MVI   REENTAR+33,X'00'
         MVC   DCBDDNAM(8),ISUT1        MOVE DDNAME FROM ISUT1     000G
         MVC   REENTAR(CLOSEL-OPENL),OPENL   MOVE L FORM OF OPEN   000G
*                                               TO WORKAREA        000G
         OPEN  (DCBAR1,(INPUT)),MF=(E,REENTAR)  OPEN INPUT DATA SET000G
         TM    DCBOFLGS,X'10'                WAS OPEN SUCCESSFUL
         BZ    NOTOK                         NO,BRANCH
         CLI   REENTAR+33,X'00'         VALID DCB FIELDS           000G
         BNE   INVALD                        NO, BRANCH
         XC    EXITADDR+2(2),EXITADDR+2 INITIALIZE COMPARE NUMBER  000G
         BAL   NSIRG,PROC                    GET A RECORD
         LA    WK3,78                        NUMBER OF BYTES TO BE PRO-
         STH   WK3,EXITADDR                  CESSED IS 78          000G
         ST    INPT,ALIGN               SAVE INPUT POINTER         000G
         LA    RCRG,0                        SET RETURN CODE OF ZERO
         L     SAVREG,4(SAVREG)              POP UP SAVE AREA
         L     14,12(SAVREG)                 RESTOR REGISTER FOURTEEN
         SR    PARM00,PARM00                 SET REGISTER ZERO TO ZERO
         RETURN (1,12),T,RC=(15)             RETURN TO CALLING PROGRAM
         EJECT
*  THIS SECTION PERFORMS ADDITIONAL INITIALIZATION NECESSARY FOR EACH *
*  SECONDARY ENTRY;IT DETERMINES IF THE ENTIRE CARD IMAGE HAS BEEN    *
*  PROCESSED.                                                         *
COMP     LR    TRANS,PARM1                   SAVE OUTPUT AREA ADDRESS
         L     INPT,ALIGN               RESTORE INPUT POINTER      000G
         CLI   DOUBLE+7,X'20'     COULD SYSUT2 BE OPENED ?       A48756
         BE    NOTOK              NO, CLOSE UT1 AND UT2          A48756
         CLI   DOUBLE+6,X'01'     SYSUT2 DCB PARAM ERROR ?       A48756
         BE    INVALD             YES, CLOSE UT1 AND UT2         A48756
         CLC   EXITADDR(2),ZERO         ALL CARD IMAGES PROCESSED  000G
         BNE   COMP1                         NO,BRANCH TO COMPLETE
         BAL   NSIRG,PROC                    ELSE, GET ANOTHER RECORD
         TM    ISSWITCH,X'FF'      SYSUT2 OPEN ?                 A48756
         BNO   NOTOPEN             NO, SKIP PUT                  A45167
         MVI   ISSWITCH,X'0F'      YES,PREVENT PUT NEXT TIMES    A45167
         TM    DCBAR2+DCBRECFM-IHADCB,X'40'  RECFM VAR OR UND ?  A45167
         BNO   *+10                NO, SKIP LRECL UPDATE         A45167
         MVC   DCBAR2+DCBLRECL-IHADCB(2),0(INPT) GET LRECL       A45167
         PUT   DCBAR2              PUT FOR OBTAINING POINTER     A45167
         LR    TRANS,PARM1         SAVE UPDATED POINTER          A45167
NOTOPEN  EQU   *                                                 A45167
         MVC   EXITADDR+4(2),0(INPT)                               000G
         LH    WK7,EXITADDR+4           LOAD ACTUAL LENGTH         000G
         LA    WK3,76                        BYTES TO BE PROCESSED = 76
         LA    INPT,2(INPT)                  STEP INPUT POINTER BY TWO
         B     MAX                           BRANCH TO CHECK LIMIT
         SPACE
*  THIS SECTION DETERMINES IF THE NUMBER OF BYTES TO BE PROCESSED IS  *
*  EQUAL TO 1,OR IS GREATER THAN OR EQUAL TO 2.IF THE LATTER IS TRUE  *
*  THE 2 BYTE FIELD IS PROCESSED IF IT DOESN'T CONTAIN ZEROS.         *
COMP1    CLC   EXITADDR(2),TWO          ARE 2 OR MORE BYTES LEFT   000G
         BL    LAST                          NO,BRANCH
         CLC   0(2,INPT),ZERO                IS THIS END OF INPUT
         BE    FINI                          YES,BRANCH
         MVC   EXITADDR+4(2),0(INPT)                               000G
         LH    WK7,EXITADDR+4           SAVE LENGTH                000G
         LH    WK3,EXITADDR             SUBTRACT TWO FROM NUMBER   000G
         LA    INPT,2(INPT)                  STEP INPUT POINTER BY TWO
         SH    WK3,TWO                        OF BYTES TO BE PROCESSED
         LTR   WK3,WK3                       MORE BYTES TO BE PROCESSED
         BNE   MAX                          YES,BRANCH
         BAL   NSIRG,PROC                    GET ANOTHER RECORD
         LA    WK3,78                        BYTES TO BE PROCESSED = 78
         B     MAX                           BRANCH TO CHECK LIMIT
         SPACE
*  THIS SECTION PROCESSES THE LAST BYTE OF THE CARD IMAGE AS DETER-   *
*  MINED ABOVE IF IT IS NON-ZERO                                      *
LAST     SR    WK7,WK7            CLEAR REG BEFORE INSERTING CHAR  7060
         IC    WK7,0(INPT)        LOAD FIRST BYTE OF LENGTH        7060
         SLL   WK7,8
         BAL   NSIRG,PROC                    GET NEXT RECORD
         IC    WK7,0(0,INPT)                 LOAD SECOND BYTE OF LENGTH
         STH   WK7,EXITADDR+4           SAVE ACTUAL LENGTH         000G
         LA    WK3,77                        BYTES TO BE PROCESSED = 77
         LA    INPT,1(INPT)                  STEP INPUT PTR BY 1
*  THIS SECTION DETERMINES WHETHER THE LENGTH OF THE RECORD TO BE     *
*  TRANSMITTED EXCEEDS MAXIMUM NUMBER OF CHARACTERS TO BE TRANSMITTED *
MAX      STH   WK3,EXITADDR                                        000G
         CR    PARM0,WK7                     LENGTH EXCEED LIMIT
         BL    EXCEED                        YES,BRANCH
*  THIS SECTION DETERMINES IF THE ENTIRE RECORD IS CONTAINED ON THIS  *
*  CARD IMAGE. IF NOT,THE CHARACTERS CONTAINED ARE TRANSMITTED.       *
CHECK    CR    WK3,WK7                       ENTIRE RECORD PRESENT
         BNL   ENUF                          YES,BRANCH
         BCTR  WK3,0                         MOVE EXACT NUMBER OF BYTES
         EX    WK3,MOVE                       LEFT FOR OUTPUT
         AH    TRANS,EXITADDR           INCREMENT OUTPUT POINTER   000G
         SH    WK7,EXITADDR             DECREMENT RECORD LENGTH    000G
         BAL   NSIRG,PROC                    GET ANOTHER RECORD
         LA    WK3,78                        BYTES TO BE PROCESSED = 78
         STH   WK3,EXITADDR                                        000G
         B     CHECK
         SPACE
*  THIS SECTION TRANSMITS AN ENTIRE RECORD FOR OUTPUT AND MODIFIES THE*
*  APPROPRIATE POINTERS AND LENGTH SPECIFIER                          *
ENUF     BCTR  WK7,0
         EX    WK7,MOVE                      MOVE CHARACTERS FOR OUTPUT
         LA    WK7,1(WK7)
         SR    WK3,WK7                      DECREMENT BYTES LEFT BY
         STH   WK3,EXITADDR                  NUMBER MOVED          000G
         AR    INPT,WK7                     STEP INPUT POINTER
         ST    INPT,ALIGN               SAVE INPUT POINTER
         LA    RCRG,0                        SET RETURN CODE OF ZERO
         CLI   ISSWITCH,X'0F'      SYSUT2 DCB OPEN ?             A45167
         BNE   NOPUT               NO, DO NOT PUT                A45167
         CLC   EXITADDR(2),ONE     ONE BYTE LEFT ON LAST CARD ?  A45167
         BH    NOINPUT             NO, MORE, STORE PTR AND PUT   A45167
         BE    PARTINPT            YES, ONE BYTE LEFT            A45167
         BAL   NSIRG,PROC          NO BYTE LEFT, GET ANOTH RCRD
         LA    WK3,78              LOAD NBR OF BYTES TO PROCESS  A45167
         B     ENDINPUT            PUT A RECORD                  A45167
PARTINPT IC    WK3,0(INPT)         SAVE LAST BYTE                A45167
         BAL   NSIRG,PROC          GET ANOTHER RECORD            A45167
         BCTR  INPT,0              RESET PTR ONE BACK            A45167
         STC   WK3,0(INPT)         STORE SAVED BYTE              A45167
         LA    WK3,79              LOAD NBR OF BYTES TO PROCESS  A45167
ENDINPUT STH   WK3,EXITADDR        SAVE NBR OF BYTES TO PROCESS  A45167
         ST    INPT,ALIGN          SAVE PTR TO INPUT DATA        A45167
NOINPUT  CLC   0(2,INPT),ZERO     END OF INPUT ?                OY01167
         BE    FINI               YES, STOP PROCESSING          OY01167
         TM    DCBAR2+DCBRECFM-IHADCB,X'40'  RECFM VARIABLE ?   OY01167
         BNO   *+10                NO, SKIP LRECL UPDATE         A45167
         MVC   DCBAR2+DCBLRECL-IHADCB(2),0(INPT) GET LRECL       A45167
         PUT   DCBAR2              PUT FOR OBTAINING POINTER     A45167
         B     COMP                PROCESS NEXT LOGICAL RECORD   A45167
NOPUT    EQU   *                                                 A45167
         L     SAVREG,4(SAVREG)              POP UP SAVE AREA
         L     14,12(0,SAVREG)              RESTORE REGISTER FOURTEEN
         RETURN (1,12),T,RC=(15)            RETURN TO CALLING PROGRAM
*  THIS SECTION SETS THE APPROPRIATE RETURN CODES IN REGISTER 15, AND *
*  BRANCHES TO CLOSE THE DATASET AND RETURN                           *
NOTOK    LA    RCRG,X'20'                    SET RETURN CODE OF 20;
         B     OUT                            OPEN UNSUCCESSFUL
EXCEED   LA    RCRG,X'12'                    SET RETURN CODE OF 12;RE-
         B     OUT                            CORD LENGTH EXCEEDS LIMIT
FINI     LA    RCRG,8                        SET RETURN CODE OF 8;
         B     OUT                            END OF INPUT
INVALD   LA    RCRG,X'24'                    SET RETURN CODE OF    24
         B     OUT                            INVALID DCB FIELDS
         DS    0F
LIST     DC    X'85'
         DC    AL3(ISIEXT)
         SPACE
*  THIS INSTRUCTION TRANSMITS INFORMATION FROM THE INPUT AREA TO THE  *
*  OUTPUT AREA. THE LENGTH IS SPECIFIED IN THE EXECUTE STATEMENT      *
MOVE     MVC   0(0,TRANS),0(INPT)            MOVE CHARACTERS TO OUTPUT
         EJECT
*                                                                     *
*  THIS IS THE INPUT DCB EXIT ROUTINE, IN WHICH THE BLOCKSIZE         *
*  IS VERIFIED TO BE A MULTIPLE OF EIGHTY(80).  AN INDICATOR IS SET TO*
*  DESIGNATE THE INVALIDITY OF THE TWO FIELDS.                        *
*                                                                     *
ISIEXT   XC    REENTAR+33(1),REENTAR+33                            000G
TBLKSI   CLC   DCBBLKSI(2),ZERO              BLOCKSIZE ZERO?
         BE    MAKE80                        YES,BRANCH
         SR    WK6,WK6
          LH    WK7,DCBBLKSI                 LOAD BLOCKSIZE
         D     WK6,EIGHTY                    IS BLOCKSIZE A MULTIPLE
         LTR   WK6,WK6                        OF EIGHTY
         BE    CONTIN                        YES,BRANCH
         MVI   REENTAR+33,X'FF'         SET INVALID INDICATOR      000G
         B     CONTIN
MAKE80   MVC   DCBBLKSI(2),EIGHTY+2          SET BLOCKSIZE TO EIGHTY
CONTIN   RETURN
         SPACE 2
*  THIS SECTION MAKES A RECORD AVAILABLE FOR PROCESSING AND CHECKS FOR*
*  SEQUENTIAL INPUT. IF THE INPUT IS OUT OF SEQUENCE,THE INPUT DATASET*
*  IS 'CLOSED',AND A RETURN IS MADE TO THE CALLING PROGRAM WITH A RE- *
*  TURN CODE OF 16. OTHERWISE,THE ADDRESS OF THE INPUT AREA+2,IS RE-  *
*  TURNED IN 'INPT' TO THE ADDRESS SPECIFIED IN 'NSIRG'.              *
PROC     GET   DCBAR1                  GET A RECORD                000G
         CLC   0(2,PARM1),EXITADDR+2    IS INPUT IN SEQUENCE       000G
         BNE   NOTSEQ                        NO,BRANCH
         LH    WK2,EXITADDR+2                                      000G
         LA    WK2,1(WK2)                    INCREMENT SEQUENCE NUMBER
         STH   WK2,EXITADDR+2                FOR COMPARE BY ONE    000G
         LA    INPT,2(PARM1)                 SAVE ADDRESS OF INPUT+2
         BR    NSIRG                         RETURN WITH INPUT ADDRESS
EREXIT   SYNADAF ACSMETH=QSAM                                    A31442
         MVC   MESSAGE+8(79),49(PARM1)  MOVE SYNAD MSG TO BUFFER A52028
         SYNADRLS                                                A31442
         LA    RCRG,4                  LOAD RETURN CODE=4        A31442
         B     OUT                            SYNAD ERROR
NOTSEQ   LA    RCRG,X'16'                    INPUT OUT OF SEQUENCE
OUT      STC   RCRG,REENTAR+32          SAVE RETURN CODE           000G
         MVC   REENTAR(ZERO-CLOSEL),CLOSEL   MOVE L FORM OF CLOSE  000G
*                                               TO WORKAREA        000G
         CLOSE (DCBAR1),MF=(E,REENTAR) CLOSE INPUT DATA SET
         CLI   REENTAR+32,X'20'         NO GOOD OPEN             A41745
         BE    BYPASS                   NO OPEN SO BYPASS FREEP  A41745
         FREEPOOL DCBAR1                FREEPOOL INPUT BUFFER    A41745
BYPASS   IC    RCRG,REENTAR+32                                   A41745
         L     SAVREG,4(SAVREG)              POP UP SAVE AREA
         RETURN (14,12),T,RC=(15)           RETURN TO CALLING PROGRAM
*  CONSTANTS
OPENL    OPEN  (,INPUT),MF=L                                       000G
CLOSEL   CLOSE (,DISP),MF=L                                        000G
ZERO     DC    1H'0'               ** CONSTANTS USED TO CHECK THE
TWO      DC    1H'2'               ** NUMBER OF BYTES TO BE PROCESSED
ONE      DC    H'1'                TEST BYTE                     A45167
EIGHTY   DC    F'80'
         SPACE
INDCB    DCB   DSORG=PS,MACRF=GL,DDNAME=SYSUT1,                        *
               RECFM=FB,LRECL=80,EXLST=LIST,                           *
               EODAD=FINI,SYNAD=EREXIT
LABEL    DS    0F                      DUMMY LABEL                 000G
         DCBD  DSORG=(PS)
IEBWORK  DSECT
SAVE1    DS    1F
SAVE1BK  DS    1F
SAVE1FD  DS    1F
         DS    15F
SAVE2    DS    1F
SAVE2BK  DS    1F
SAVE2FD  DS    1F
         DS    15F
SAVE3    DS    1F
SAVE3BK  DS    1F
SAVE3FD  DS    1F
         DS    15F
*IEHISR WORKAREA
ISINVOK  DS    F                        ADDRESS OF PARAMETER LIST AT
*                                          INVOCATION
ISPRINT  DS    2F                       DDNAME FOR SYSPRINT
ISUT1    DS    2F                       DDNAME FOR SYSUT1
ISUT2    DS    2F                       DDNAME FOR SYSUT2
ISCOMP   DS    H                        COMPLETION CODE
ISMESS   DS    H                        MESSAGE NUMBER
ISPAGE   DS    H                        PAGE NUMBER FOR SYSPRINT
ISCNTRL  DS    CL1                      CONTROL BYTE
* MASKS FOR TESTING CONTROL BYTE - ISCONTRL
ISSWC    EQU   X'80'                    COPY
ISSWU    EQU   X'40'                    UNLOAD
ISSWL    EQU   X'20'                    LOAD
ISSWP    EQU   X'10'                    PRINT
ISSWN    EQU   X'08'                    NO CONVERT REQUESTED
ISSWPI   EQU   X'04'                    PRINT INDEX
ISSWPP   EQU   X'02'                    PRINT PRIME
ISSWPO   EQU   X'01'                    PRINT OVERFLOW
ALLMASK  EQU   X'07'
ISSWITCH DS    CL1                      EXTRANEOUS SWITCHES
FIRSTTM  EQU   X'80'                    FIRST TIME SWITCH
*
XCTLAREA DS    2F
WHICH    DS    2F
ALIGN    DS    1F
DOUBLE   DS    1D
EXITADDR DS    2F
REENTAR  DS    9F
DCBAR1   DS    64F
DCBAR2   DS    64F
MESSAGER DS    CL1
MESSAGE  DS    CL120
RECADDR  DS    1F                                                  000G
         DS    0D
QISAM    DS    CL250                    UNLOADED DCB WORK AREA
HEADERC  DS    CL1
HEADERT  DS    CL144                    HEADER AREA
TARGET   DS    2F                       DATE HOLD AREA
PAGENO   DS    1F                       HOLD PAGE NUMBER FOR A HEADING
PAGEPTR  DS    1F                       HOLD POINTER TO WHERE PAGE
*                                       NUMBER IS TO BE PLACED
         END
