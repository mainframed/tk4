 TITLE 'IGG019MC - BTAM PCI APPENDAGE'
***********************************************************************
*                                                                     *
* MODULE NAME: IGG019MC   (OS/VS)                                     *
*                                                                     *
* DESCRIPTIVE NAME: BTAM PCI APPENDAGE                                *
*                                                                     *
* COPYRIGHT: NONE                                                     *
*                                                                     *
* STATUS: RELEASE 2                                                   *
*                                                                     *
* FUNCTION:         THE PROGRAM CONTROLLED INTERRUPT IS USED TO       *
*                   PROVIDE DYNAMIC BUFFERING (*) BY ASSIGNING BUFFER *
*                   N+1  DURING THE TIME BUFFER N IS BEING READ INTO  *
*                   OR WRITTEN FROM.  ONLY THE CURRENT BUFFER AND 1   *
*                   SUCCEEDING BUFFER CAN BE MADE AVAILABLE AT ANY    *
*                   ONE TIME.                                         *
*                                                                     *
*                   *  SEE NOTE BELOW FOR BRIEF DESCRIPTION OF        *
*                      DYNAMIC BUFFERING.                             *
*                                                                     *
* ENTRY POINT:      ENTRY IS 1ST EXECUTIVE INSTRUCTION                *
*                                                                     *
* INPUT:            REGISTER 2 CONTAINS A POINTER TO THE PERTINENT    *
*                              IOB                                    *
*                   REGISTER 15 CONTAINS THE BASE ADDRESS             *
*                                                                     *
* OUTPUT:           NONE                                              *
*                                                                     *
* EXTERNAL ROUTINE: THE REQUEST-RELEASE BUFFER ROUTINE IS USED TO     *
*                   GET OR RELEASE BFRS FROM OR TO THE BUFFER POOL.   *
*                                                                     *
* EXIT:             RETURN IS TO IOS AFTER ASSIGNING A BUFFER OR      *
*                   QUEUING A REQUEST FOR ONE                         *
*                                                                     *
* IN LINE ROUTINES: THE PCI OCCURS FOR ALL READ OR WRITE CHANNEL      *
*                   COMMANDS SET UP FOR DYNAMIC BUFFERING.            *
*                   READ                                              *
*                        READ OR READ-SKIP                            *
*                        READ                                         *
*                           AN ATTEMPT IS MADE TO ASSIGN A BUFFER     *
*                           TO THE NEXT READ CCW WHICH IS BLOCKED BY  *
*                           A READ-SKIP CCW UNTIL THE BFR IS ASSIGNED *
*                           IF A BUFFER IS ASSIGNED THE READ-SKIP IS  *
*                           ALTERED TO A TIC TO THE BLOCKED READ CCW. *
*                           AND THIS READ IS IN TURN BLOCKED BY ALTER *
*                           ING THE FOLLOWING TIC CCW TO READ-SKIP    *
*                           IF NO BUFFER IS AVAILABLE TO BE ASSIGNED  *
*                           A REQUEST IS ADDED TO THE REQUEST QUEUE.  *
*                           POINTERS TO THE 1ST AND LAST ENTRIES IN   *
*                           THIS QUEUE ARE STORED IN THE DATA EXTENT  *
*                           BLOCK ASSOCIATED WITH THIS IOB.  THE      *
*                           CHAINING POINTERS ARE STORED IN THE READ  *
*                           CCW'S IN PLACE OF THE BUFFER ADDRESSES.   *
*                                                                     *
*                        READ-SKIP                                    *
*                           A BUFFER NEVER DID GET ASSIGNED.  THE     *
*                           PCI ON THE PREVIOUS READ WAS EITHER LOST  *
*                           OR HANDLED.  IF IT WAS LOST THE TWO       *
*                           PREVIOUS READ BUFFERS MUST BE POSTED,     *
*                           THE MOST RECENT WITH AN ERROR INDICATION, *
*                           AND ANOTHER READ-SKIP COMMAND OVERLAYED   *
*                           IN THE NEXT CCW TO PERMIT COMPLETION OF   *
*                           THE READ.  IF THE PCI ON THE PREVIOUS     *
*                           READ WERE HANDLED THE BUFFER REQUEST WAS  *
*                           QUEUED.  THIS REQUEST MUST BE PURGED      *
*                           FROM THE QUEUE AND THE PREVIOUS READ      *
*                           BUFFER POSTED.  ANOTHER READ-SKIP COMMAND *
*                           PLACED IN THE NEXT CCW TO ALLOW COMPLE-   *
*                           TION OF THE READ.                         *
*                           IF A BUFFER WERE ASSIGNED PRIOR TO HAND-  *
*                           LING THIS INTERRUPT, BUT AFTER FETCHING   *
*                           THE CCW COMMAND CODE IN STORAGE WILL      *
*                           BE A TIC.  IN THIS CASE THE BFR WILL BE   *
*                           RELEASED AND THE READ BFR WILL BE POSTED. *
*                           IN EITHER CASE DATA WILL HAVE BEEN LOST   *
*                           AND THE POSTING WILL SO INDICATE.         *
*                   WRITE                                             *
*                        THE BUFFER CHAIN ADDRESS IS TESTED FOR 0 TO  *
*                        SEE IF THIS IS THE LAST BUFFER IN THE WRITE  *
*                        CHAIN.  IF IT IS THE BUFFER IS POSTED.  IF   *
*                        NOT THE NEXT BUFFER ADDRESS IS PLACED IN THE *
*                        NEXT WRITE CCW, THE FOLLOWING TIC IS MADE    *
*                        VALID AND THE TIC TO THE CURRENT WRITE CCW   *
*                        IS INVALIDATED BY ORRING A 1 TO ITS TRANSFER *
*                        ADDRESS.  SHOULD THE INVALID TIC ADDRESS BE  *
*                        FETCHED AN ABNORMAL END WOULD OCCUR.         *
*                                                                     *
*                   CCW 1 ----------------------------------------    *
*                        IRD/WR CMD*   B U F F E R   A D D R E S S    *
*                        I---------------------------------------I    *
*                        I FLAGS   *T/P OP CD*    C O U N T      I    *
*                        -----------------------------------------    *
*                                                                     *
*                   CCW 2-----------------------------------------    *
*                        IR-S / TIC* A D D R E S S  OF  C C W  3 I    *
*                        I---------------------------------------I    *
*                        I FLAGS   *T/P OP CD*    C O U N T      I    *
*                        -----------------------------------------    *
*                                                                     *
*                   CCW 3-----------------------------------------    *
*                        IRD/WR CMD*  B U F F E R   A D D R E S S     *
*                        I---------------------------------------I    *
*                        I FLAGS   *T/P OP CD*    C O U N T      I    *
*                        -----------------------------------------    *
*                                                                     *
*                   CCW 4-----------------------------------------    *
*                        IR-S / TIC* A D D R E S S  OF  C C W 1  I    *
*                        I---------------------------------------I    *
*                        I FLAGS   *T/P OP CD*    C O U N T      I    *
*                        -----------------------------------------    *
*                                                                     *
* ATTRIBUTES:       THIS ROUTINE IS RUN IN SUPERVISOR MODE, DISABLED  *
*                                                                     *
* NOTE:             'DYNAMIC BUFFERING' IS DEFINED AS THE ABILITY TO  *
*                   PROVIDE I/O BUFFERS JUST PRECEDING AN IMPENDING   *
*                   I/O OPERATION TO PERMIT MORE FLEXIBLE USE OF      *
*                   LIMITED STORAGE SPACE.                            *
*                                                                     *
* CHANGE ACTIVITY AS FOLLOWS:                                         *
*            APARS                          PTMS                      *
*        YA02154  (10/17/73)            YM4064  (10/3/73)             *
*        YA02155  (10/17/73)            YM4072  (10/15/73)            *
*        YA02156  (10/17/73)            YM5663  (12/11/73) PROLOG     *
*        ZA02312  (11/18/74)            YM5662  (12/11/73) DELETE     *
*        ZA02335  (11/18/74)                                          *
*        AZ04150  (04/29/75)                                          *
*        AZ04157  (07/15/75)                                          *
*        AZ04188  (10/08/75)                                          *
*        AZ11431  (06/10/76)                                          *
*        AZ13192  (09/15/76)                                          *
***********************************************************************
         EJECT
IGG019MC CSECT
         SPACE 5
DEVTYPE  EQU   16                                                  000C
DCBBSENQ EQU   68                                                A27624
ZEROREG  EQU   0                        REGISTER ZERO
PARREG   EQU   1                        PARAMETER REGISTER
RQEREG   EQU   1                        RQE ADDRESS              Y02947
IOBREG   EQU   2                        PTR TO INPUT OUTPUT BLOCK
WKRG2    EQU   2                   WORK REG FOR ALTERCCW RTN     Y02947
DEBREG   EQU   3                        PTR TO DATA EXTENT BLOCK
WKRG3    EQU   3                   WORK REG FOR ALTERCCW RTN     Y02947
DCBREG   EQU   4                        PTR TO DATA CONTROL BLOCK
WKRG4    EQU   4                   WORK REG FOR ALTERCCW RTN     Y02947
TCBREG   EQU   5                   PTR TO TASK CONTROL BLOCK     Y02947
QREG     EQU   6                        PTR TO REQ-REL BFR & REQ QUEUE
BUFREG   EQU   7                        PTR TO BUFFER
BUF2REG  EQU   8                        PTR TO NEXT BUFFER
CCWREG   EQU   9                        PTR TO CHANNEL COMMAND WORD
CCW2REG  EQU   10                       PTR TO NEXT CH COMMAND WORD
WORKREG  EQU   11                       WORK REGISTER
UCBREG   EQU   11                       UCB ADDRESS             YA02155
BASEREG  EQU   12                       BASE REGISTER
SAVEREG  EQU   13                       PTR TO SAVE AREA
RETREG   EQU   14                       RETURN ADDRESS REGISTER
BRREG    EQU   15                       PTR TO REQUESTED BFR OR ER IND
RCCWREG  EQU   15                  ADDRESS OF REAL CCW           Y02947
         EJECT                                                   Y02947
DEBNMEXT EQU   16
DEBUCBAD EQU   32
SIXTEEN  EQU   16
DCBXMODE EQU   X'38'                                            YA02154
DCBBSETX EQU   X'3F'                                            YA02154
DCBBSETB EQU   X'46'                                            YA02154
INTBLCHK EQU   X'40'                                            YA02154
DCBBUFCB EQU   20                       OFFSET TO BCB ADDRESS
IOBECBPT EQU   4                        OFFSET TO ECB POINTER
DEBTCBAD EQU   0                        OFFSET TO TCB ADDRESS
DECTYPE  EQU   4                                                   000A
DECLNGTH EQU   6                        OFFSET TO LAST BFR LENGTH
DECAREA  EQU   12                                                  000A
DECPOLPT EQU   36                                                  000A
DECWLNG  EQU   42                                                  000B
DCBBUFCT EQU   34                                                  7752
DECBUFCT EQU   8                                                   7752
INVTIC   EQU   X'01'               INVALID TIC DATA ADDR         Y02947
IDAWFLAG EQU   X'04'               CCW IDAW FLAG                 Y02947
DCBEIOBX EQU   X'24'               DISP IN DCB OF IOB SIZE       Y02947
DATACHN  EQU   X'80'               CCW DATA CHAINING FLAG        Y02947
PCIOFF   EQU   X'BF'               TURN OFF 1ST TIME PCI         Y02947
IDAWOFF  EQU   X'FB'               TURN OFF CCW IDAW FLAG        Y02947
TWOBITS  EQU   2                                                 Y02947
TWO      EQU   2                                                 Y02947
IOBUCBX  EQU   32                  IOB DISP TO UCB INDEX         Y02947
IOBCPA   EQU   64                  IOB DISP TO CHANNEL PROGRAM   Y02947
*                                  AREA                          Y02947
LEN8     EQU   8                   LENGTH OF 8                   Y02947
LEN16    EQU   16                  LENGTH OF 16                  Y02947
AUTOPOLL EQU   X'80'                                               000A
FIRSTPCI EQU   X'40'                    FIRST TIME PCI FLAG        3712
RDCMND   EQU   X'02'                    READ COMMAND               3712
RSTICOP  EQU   X'12'                    READ SKIP/TIC TP OP CODE   3712
RDRESP   EQU   X'25'               READ RESP TO TXT OP CODE LD @ZA02312
TICCMND  EQU   X'08'                    TIC COMMAND                3712
SKIP     EQU   X'10'                    SKIP FLAG
PC       EQU   X'20'                   PROGRAM CHECK BIT
RRTXT    EQU   X'20'               READ RESO TO TEXT CODE   LD @ZA02335
HEX21    EQU   X'21'                                        LD @ZA02335
HEXA1    EQU   X'A1'                                        LD @ZA02335
FORTY    EQU   X'40'               CCW COMMAND CHAINING FLAG    YA02156
BF       EQU   X'BF'               MASK TO RESET CCW COMMAND    YA02156
*                                  CHAINING FLAG                YA02156
DISP0    EQU   0                   DISPLACEMENT OF 0             Y02947
DISP1    EQU   1                   DISPLACEMENT OF 1             Y02947
DISP2    EQU   2                   DISPLACEMENT OF 2             Y02947
DISP3    EQU   3                   DISPLACEMENT OF 3             Y02947
DISP4    EQU   4                   DISPLACEMENT OF 4             Y02947
DISP5    EQU   5                   DISPLACEMENT OF 5             Y02947
DISP6    EQU   6                   DISPLACEMENT OF 6             Y02947
DISP8    EQU   8                   DISPLACEMENT OF 8             Y02947
DISP11   EQU   11                  DISPLACEMENT OF 11            Y02947
DISP12   EQU   12                  DISPLACEMENT OF 12            Y02947
DISP13   EQU   13                  DISPLACEMENT OF 13            Y02947
DISP16   EQU   16                  DISPLACEMENT OF 16            Y02947
DISP17   EQU   17                  DISPLACEMENT OF 17            Y02947
DISP19   EQU   19                  DOSPLACEMENT OF 19           YA02155
DISP20   EQU   20                  DISPLACEMENT OF 20            Y02947
DISP24   EQU   24                  DISPLACEMENT OF 24            Y02947
LEN2     EQU   2                   LENGTH OF 2                   Y02947
ELEVEN   EQU   11                  NUMBER OF BITS IN 2K          Y02947
         SPACE 5                                                 Y02947
         USING *,BASEREG
         USING TCB,TCBREG                                        Y02947
         STM   RETREG,CCWREG,DISP0(SAVEREG)      SAVE REGISTERS  Y02947
         LR    BASEREG,BRREG
         B     AROUND                                            Y02947
         DC    C'IGG019MC'                                       Y02947
         DC    C',VS2/R2, DEC  73'                               Y02947
         DS    0F                                                Y02947
PATCH    DC    XL86'00'         PATCH AREA                       Y02947
AROUND   L     CCWREG,DISP8(IOBREG)  LOAD CCW ADDR FROM IOBCSW   Y02947
         LA    CCWREG,DISP0(CCWREG)  CLEAR HIGH ORDER BYTE       Y02947
         SH    CCWREG,EIGHT        BACK UP TO INTERRUPTED CCW    Y02947
         L     TCBREG,DEBTCBAD(DEBREG) LOAD TCB ADDR             Y02947
         TM    TCBFLGS6,TCBRV        VIRTUAL = REAL              Y02947
         BO    TESTSTS               YES, CHECK PCI ALONE        YM4072
         TM    DISP5(CCWREG),FIRSTPCI FIRST TIME PCI             Y02947
         BNO   TESTSTS               NO, CHECK PCI ALONE         YM4072
         NI    DISP5(CCWREG),PCIOFF  TURN OFF 1ST TIME PCI       Y02947
         B     EXIT                  RETURN                      Y02947
*     APPROXIMATELY 32 LINES DELETED BY THE FOLLOWING PTM:       YM5662
TESTSTS  EQU   *
         CLC   DISP12(LEN2,IOBREG),STATUS IS STATUS PCI ONLY     Y02947
         BE    CHKWRT                                            A49691
         CLI   0(CCWREG),RDCMND         IS COMMAND READ            3712
         BNE   PROGCK                  IF NO, IS THERE PROG CK   A28629
         CLI   5(CCWREG),RDPCI         IS THIS FIRST PCI         A28629
         BNE   EXIT                    IF NOT, EXIT              A28629
         TM    DISP12(IOBREG),UCORUE   UNIT CHECK OR UNIT EXCP   Y02947
         BNZ   EXIT                    IF SO, EXIT               A28629
         B     MOVEIND                 CHECK FOR AUTOPOLL        A28629
PROGCK   TM    DISP13(IOBREG),PC       WAS THERE PROG CHECK      Y02947
         BZ    WRTIC                    IF NOT, GO TO WRITE ROUTINE3712
         TM    5(CCWREG),RSTICOP        IS TIC TPOP CODE PRESENT   3712
         BNO   EXIT                     IF NOT, EXIT               3712
         CLI   0(CCWREG),TICCMND        AND IS COMMAND TIC         3712
         BNE   EXIT                     IF NOT, EXIT               3712
         SH    CCWREG,EIGHT             IF SO BACK UP TO WRITE CMND3712
         B     WRTIC                    GO POST PREVIOUS BUFFER    3712
CHKWRT   EQU   *                                                 A49691
         CLI   0(CCWREG),TICCMND                                 A49691
         BNE   LBCB                                              A49691
         TM    3(CCWREG),X'01'                                   A49691
         BNO   EXIT                                              A49691
         CLI   DISP5(CCWREG),HEX21 TP OP CODE, ALL RESET    LD @ZA02335
         BE    EXIT                YES, EXIT                LD @ZA02335
         CLI   DISP5(CCWREG),HEXA1 TP OP CODE, ALL RESET    LD @ZA02335
         BE    EXIT                YES, EXIT                LD @ZA02335
         SH    CCWREG,EIGHT                                      A49691
         B     WRTIC                                             A49691
LBCB     EQU   *                                                 Y02947
         CLI   DISP5(CCWREG),RRTXT RD RESP TO TXT (STR/STP) LD @ZA02335
         BE    EXIT                YES, EXIT                LD @ZA02335
         SR    WORKREG,WORKREG          COMPUTE PTR TO REQUEST BFR Q
         IC    WORKREG,DEBNMEXT(DEBREG)
         SLL   WORKREG,2
         LA    QREG,DEBUCBAD(WORKREG,DEBREG)
         MVC   BYTE(1),5(CCWREG)        IS T/P OP CODE READ-SKIP OR TIC
         NI    BYTE,X'3F'               TEST BITS 2-7 ONLY
         CLI   BYTE,X'12'               IS TP OP CODE 22
         BE    READSKIP                 YES
WRTIC    L     CCW2REG,8(CCWREG)        LOAD ADRS OF PREVIOUS CCW
         N     CCW2REG,TICMASK          VALIDATE TIC ADDRESS IN REG
         MVC   SAVEBFR+1(3),1(CCW2REG)  SAVE ADRS OF PREVIOUS BUFFER
         L     BUFREG,0(CCWREG)         LOAD PTR TO THIS CCW BUFFER
         N     BUFREG,BUFMSK            ADJUST TO 1ST BYTE OF BFR
         SH    BUFREG,FOUR
         CLI   0(CCWREG),X'01'          IS COMMAND WRITE
         BE    WRPCI                    YES
*
*              2 LINES DELETED FOR ----->                   LD @ZA02312
*
         SH    CCW2REG,EIGHT       PREV CCW                 LD @ZA02312
         TM    DISP5(CCW2REG),RDRESP CK RD RESP TO TXT(BSC) LD @ZA02312
         BNO   NOT25               IF NOT BRANCH            LD @ZA02312
         L     WORKREG,DISP8(CCW2REG)  LOAD DATA ADDR...    LD @ZA02312
*                                      FOR READ TEXT        LD @ZA02312
         SH    WORKREG,TWENTY      SUB CNT OF RD RESP CCW   LD @ZA02312
         CL    WORKREG,0(CCW2REG)  EQ DATA AREA OF RD RESP? LD @ZA04157
         BNO   NOT25               IF NOT BRANCH            LD @ZA02312
         LA    WORKREG,DISP0(WORKREG)  CLEAR HI ORDER BYTE  LD @ZA02312
         ST    WORKREG,SAVEBFR     STORE AS BUFFER PTR      LD @ZA02312
NOT25    EQU   *                                            LD @ZA02312
         AH    CCW2REG,EIGHT       RESTORE CCW              LD @ZA02312
         L     PARREG,DISP12(SAVEREG)   RQE ADDRESS              Y02947
         USING RQE,PARREG         ESTABLISH RQE ADDRESSABILITY   Y02947
         L     PARREG,RQEUCB      LOAD UCB ADDRESS               Y02947
         DROP  PARREG             DROP RQE ADDRESSABILITY        Y02947
         SR    WORKREG,WORKREG                                     000C
         IC    WORKREG,DEVTYPE+3(PARREG)                           000C
         SRL   WORKREG,4                                           000C
         EX    WORKREG,COMPARE                                     000C
         BNE   READPCI                                             000C
         CLC   4(1,BUFREG),DCBBSENQ(DCBREG)                        000C
         BE    CKEXIT            CK FOR USASCII CODE           @ZA04188
         CLC   5(1,BUFREG),DCBBSENQ(DCBREG)                      A46838
         BE    EXIT                                              A46838
         B     READPCI          CHAR IS NOT AN ENQ             @ZA04188
CKEXIT   EQU   *                       CK USASCII CODE         @ZA04188
         L     PARREG,IOBECBPT(IOBREG)   DECB POINTER          @ZA04188
         TM    DCBXCODE(DCBREG),USASCII   USASCII CODE ?       @ZA04188
         BNO   EXIT                   CHAR IS AN ENQ           @ZA04188
         CLI   DECTYPE+1(PARREG),RDTI    READ INITIAL          @ZA04188
         BNE   EXIT                   NO, CHAR IS AN ENQ       @ZA04188
*              CHARACTER IS AN INDEX BYTE                      @ZA04188
READPCI  EQU   *                                                   000C
         SR    UCBREG,UCBREG            CLEAR REGISTER          YA02155
         IC    UCBREG,IOBUCBX(IOBREG)   UCB INDEX FOR LINE      YA02155
         SLL   UCBREG,DISP2             MULT INDEX BY 4         YA02155
         L     UCBREG,IOBUCBX(DEBREG,UCBREG) UCB ADDR FOR LINE  YA02155
         TM    DISP19(UCBREG),BISYNC    BSC LINE?               YA02155
         BNO   CONTINU                  NO, START STOP          YA02155
         CLI   5(CCWREG),RDPCI          IS THIS FIRST PCI ?    @ZA13192
         BE    CONTINU                  YES CONTINUE           @ZA13192
         LH    WORKREG,DISP6(CCW2REG)   COUNT OF PREVIOUS CCW   YA02154
         A     WORKREG,DISP0(CCW2REG)   ADD ADDR OF PREV. CCW   YA02154
         BCTR  WORKREG,DISP0            POINT TO LAST CHARACTER YA02154
         TM    DCBXMODE(DCBREG),INTBLCHK INT BLK CHECK USED?    YA02154
         BZ    CHKETX                   NO                      YA02154
         BCTR  WORKREG,DISP0            POINT TO NEXT TO LAST   YA02154
*                                       CHARACTER               YA02154
CHKETX   CLC   DISP0(DISP1,WORKREG),DCBBSETX(DCBREG) ETX?       YA02154
         BE    EXIT                     YES, DON'T GET ANOTHER  YA02154
*                                       BUFFER                  YA02154
         CLC   DISP0(DISP1,WORKREG),DCBBSETB(DCBREG) ETB?       YA02154
         BE    EXIT                     YES, DON'T GET ANOTHER  YA02154
*                                       BUFFER                  YA02154
CONTINU  EQU   *                                                YA02155
         L     BUF2REG,DCBBUFCB(DCBREG) LOAD POINTER TO BCB      Y02947
         CLI   DISP5(BUF2REG),DISP0 ARE ANY BUFFERS AVAILABLE    Y02947
         BE    QUEUE                    NO
         L     PARREG,IOBECBPT(IOBREG)  GET POINTER TO DECB        7752
         CLC   DECBUFCT(1,PARREG),DCBBUFCT(DCBREG) ALL BUFFERS USED7752
         BNL   QPCI                     IF SO, BRANCH              7752
         SR    RETREG,RETREG            CLEAR REGISTER           Y02947
         IC    RETREG,DCBEIOBX(DCBREG)  IOB SIZE                 Y02947
         LR    WORKREG,IOBREG           IOB ADDRESS              Y02947
         AR    WORKREG,RETREG           POINT TO END OF IOB      Y02947
         SH    WORKREG,EIGHT            POINT TO DYN BUF EXT     Y02947
         IC    WORKREG,DECBUFCT(PARREG) PICKUP BUFFER COUNT        7752
         LA    WORKREG,1(WORKREG)       BUMP BY ONE                7752
         STC   WORKREG,DECBUFCT(PARREG) STORE BUFFER COUNT         7752
         L     ZEROREG,ZEROE            SETUP PARAM TO REQUEST 1 BUFFER
         LR    PARREG,DCBREG            LOAD PTR TO DCB INTO REG 1
         L     BRREG,0(QREG)            LOAD PTR TO REQ BFR ROUTINE
         LR    WORKREG,SAVEREG          SAVE IOS SAVEAREA ADDR   YM4064
         LA    SAVEREG,SAVEAREA         SAVEAREA ADDR FOR 19MS   YM4064
         BALR  RETREG,BRREG             LINK TO REQUEST BUFFER ROUTINE
         LR    SAVEREG,WORKREG       RESTORE IOS SAVEAREA ADDR   YM4064
         LA    BRREG,4(BRREG)           INCR BY 4 TO 1ST DATA BYTE
         ST    BRREG,0(CCW2REG)         STORE BUFFER ADRS IN CCW
         LH    WORKREG,DISP6(BUF2REG)        LOAD BFR LENGTH     Y02947
         SH    WORKREG,FOUR
         STH   WORKREG,6(CCW2REG)       STORE AS COUNT
         MVI   0(CCW2REG),X'02'         RESTORE READ COMMAND CODE
         MVI   8(CCW2REG),X'02'         MAKE TIC COMMAND A READ SKIP
         SPACE 2                                                   000A
         BCR   15,0                     THIS INSTRUCTION IS        000A
*    REQUIRED FOR MODEL 91 SUPPORT TO ENSURE THAT THE FOLLOWING    000A
*    INSTRUCTION (WHICH CHANGES THE READ-SKIP TO A TIC) WILL BE    000A
*    EXECUTED IN SEQUENCE.                                         000A
         MVI   8(CCWREG),X'08'          MAKE THIS READ-SKIP A TIC
         TM    TCBFLGS6,TCBRV           VIRTUAL = REAL           Y02947
         BO    QPCI                     YES, DO NOT ALTER CCWS   Y02947
         SPACE 1
         BAL   RETREG,BLDPARM     BUILD ENTRIES IN PCI PARM LIST
         BAL   RETREG,ALTERCCW          ALTER REAL CCWS          Y02947
         B     QPCI
         SPACE 2                                                 Y02947
READSKIP SR    ZEROREG,ZEROREG          CLEAR REGISTER TO        Y02947
*                          INDICATE THAT IT IS NOT NECCESSARY    Y02947
*                          TO POST A BUFFER.                     Y02947
         CLI   0(CCWREG),X'08'          IS THE CMND CODE TIC
         BE    TIC                      YES
         L     CCWREG,0(CCWREG)         LOAD PTR TO NEXT READ CCW
         C     CCWREG,4(QREG)           IS CCW TO BE PURGED 1ST
         BNE   NOT1ST
         MVC   4(4,QREG),0(CCWREG)      MAKE 2ND CCW 1ST NOW
         B     SETUPRS
NOT1ST   L     CCW2REG,4(QREG)          LOAD PTR TO 1ST INTO REG
NXTCMP   C     CCW2REG,ZERO             IS THIS THE END OF THE QUEUE
         BE    NOTINQ                   YES, NOT IN QUEUE
         C     CCWREG,0(CCW2REG)        COMPARE CCW PTR TO NEXT CCW PTR
         BE    FOUND
         L     CCW2REG,0(CCW2REG)       LOAD PTR TO NEXT CCW PTR IN CHN
         B     NXTCMP
FOUND    MVC   0(4,CCW2REG),0(CCWREG)   CHAIN FRONT & BACK BFRS TOGETHR
LAST     C     CCWREG,8(QREG)           IS PURGED CCW LAST ONE IN QUEUE
         BNE   SETUPRS
         ST    CCW2REG,8(QREG)          UPDATE PTR TO LAST CCW IN CHAIN
         B     SETUPRS
NOTINQ   L     CCW2REG,8(CCWREG)        LOAD PTR TO PREVIOUS READ
         TM    5(CCW2REG),X'40'         IS THIS FIRST PCI
         BZ    NOTINQ1                  IF NOT, BRANCH             000A
         L     PARREG,IOBECBPT(IOBREG)  LOAD PTR TO DECB           000A
         TM    DECTYPE(PARREG),AUTOPOLL IS AN AUTOPOLL OPERATION   000A
         BZ    SETUPRS    IN PROGRESS.  IF NOT, BRANCH             000C
         L     WORKREG,DECAREA(PARREG)  LOAD BUFFER ADDRESS        000A
         MVC   DECPOLPT(1,PARREG),4(WORKREG) MOVE INDEX BYTE FROM  000A
*    INPUT AREA TO HIGH ORDER BYTE OF DECPOLPT.                    000A
         B     SETUPRS                                             000A
NOTINQ1  EQU   *                                                 Y02947
         LA    ZEROREG,DISP4            SET NON ZERO VALUE TO    Y02947
*                            INDICATE A BUFFER MUST BE POSTED.   Y02947
         L     DEBREG,0(CCWREG)     LOAD PTR TO COMPLETED BFR    Y02947
         N     DEBREG,BUFMSK        ADJUST TO 1ST BYTE OF BFR    Y02947
         SH    DEBREG,FOUR                                       Y02947
         L     BUFREG,0(CCW2REG)      SET UP PARM FOR SV POST    Y02947
         N     BUFREG,BUFMSK          ADJUST TO 1ST BYTE OF BFR  Y02947
         SH    BUFREG,FOUR              BACK UP TO LINK FIELD    Y02947
         O     BUFREG,POSTMSK           OR IN COMPLETION CODE    Y02947
SETUPRS  MVC   1(3,CCWREG),RS2+1        MOVE ADRS OF 4 TO READ CCW 0583
         L     CCW2REG,8(CCWREG)        LOAD PTR TO PREVIOUS READ
         MVC   16(8,CCW2REG),RS2        OVERLAY R-S IN CCW 3 OR 5
*        CONSTRUCT A PCI MODIFY ENTRY FOR THE ALTERED CCW
         OI    12(CCW2REG),X'80'        TURN ON DATA CHAIN BIT   A32459
         L     PARREG,IOBECBPT(IOBREG)  GET POINTER TO DECB      A32452
         CLC   DECBUFCT(1,PARREG),DCBBUFCT(DCBREG) ALL BUFS USED A32452
         BL    CHECK                    IF NOT, BRANCH           Y02947
         MVC   22(2,CCW2REG),CCWCOUNT   MAKE COUNT 'C0'          A32452
CHECK    TM    TCBFLGS6,TCBRV           VIRTUAL = REAL           Y02947
         BO    EXIT1                    YES, CHECK FOR BUFFER    Y02947
*                                     POSTING.                   Y02947
         BAL   RETREG,BLDPARM           GET ADDR OF REAL CCWS    Y02947
         OI    DISP12(RCCWREG),DATACHN  TURN ON DATA CHAIN       Y02947
*                           IN REAL CCW                          Y02947
         L     WORKREG,DISP16(RCCWREG) LOAD VIRT DATA ADDR       Y02947
         LA    WORKREG,DISP0(WORKREG)  CLEAR HIGH ORDER BYTE     Y02947
         LRA   WORKREG,DISP0(WORKREG)  LOAD REAL DATA ADDR AND   Y02947
         STCM  WORKREG,7,DISP17(RCCWREG) STORE IN REAL CCW       Y02947
EXIT1    LTR   ZEROREG,ZEROREG          ANY BUFFERS TO BE        Y02947
*                                       POSTED?                  Y02947
         BZ    EXIT                     NO, PREPARE TO RETURN    Y02947
         LR    CCWREG,DEBREG            LOAD ECB ADDRESS         Y02947
         LR    CCW2REG,BUFREG           LOAD POST CODE           Y02947
EXIT2    EQU   *                                                 Y02947
*        IT IS NOT NECESSARY TO RESTORE REGISTERS 10,11,12,      Y02947
*        AND 13 BEFORE RETURNING TO IOS.                         Y02947
         LM    RETREG,BUF2REG,DISP0(SAVEREG) RESTORE REGISTERS   Y02947
*                     SO THAT SAVE AREA CAN BE USED BY PCIPOST   Y02947
         LR   IOBREG,BASEREG            REG 2 IS NOW THE BASE    Y02947
         DROP BASEREG                   DROP REG 12 ADDR         Y02947
         USING IGG019MC,IOBREG          REG 2 ADDRESSABILITY     Y02947
         PCIPOST ECB=(CCWREG),SVAREA=(SAVEREG),RQE=(RQEREG),CODE=(CCW2R-
               EG)                                               Y02947
         DROP  IOBREG                   DROP REG 2 ADDR          Y02947
         USING IGG019MC,BASEREG         REG 12 ADDRESSABILITY    Y02947
*                                REG 12 RESTORED BY MACRO        Y02947
         L     IOBREG,RQEIOB-RQE(RQEREG)    RESTORE IOB ADDRESS  Y02947
         LA    IOBREG,DISP0(IOBREG)     CLEAR HIGH ORDER BYTE    Y02947
*       IF REGISTER 9 IS NOT RESTORED TO ITS ORIGINAL VALUE,     Y02947
*       IT MUST BE ZEROED BEFORE RETURNING TO IOS.               Y02947
         SR    CCWREG,CCWREG            CLEAR REGISTER BEFORE    Y02947
*                                       RETURNING TO IOS         Y02947
         BR    RETREG                   RETURN TO IOS            Y02947
         SPACE 2
QUEUE    L     CCW2REG,8(CCWREG)        LOAD PTR TO NEXT CCW
         OI    15(CCWREG),X'01'        TURN ON PCI ENTRANCE BIT    1265
         NI    15(CCW2REG),X'FE'       TURN OFF PREVIOUS PCI     A27624
         L     WORKREG,4(QREG)          LOAD PTR TO 1ST CCW IN QUEUE
         C     WORKREG,ZERO             IS THIS FIRST ENTRY TO QUEUE
         BE    QIST
         L     WORKREG,8(QREG)          LOAD PTR TO LAST CCW IN QUEVE
         ST    CCW2REG,0(WORKREG)       STORE CHAIN ADRS IN LAST ENTRY
         B     STLAST
QIST     ST    CCW2REG,4(QREG)
STLAST   ST    CCW2REG,8(QREG)          ST PTR OF CCW AS LAST IN QUEUE
         MVC   0(4,CCW2REG),ZERO        ZERO IN CCW
QPCI     TM    5(CCWREG),X'40'          IS T/P OP CODE 2ND PCI
         BZ    POSTBUF                  YES
         NI    5(CCWREG),X'BF'          CHANGE T/P OP CODE PCI BIT
MOVEIND  L     PARREG,IOBECBPT(IOBREG) LOAD PTR TO DECB          A28629
         TM    DECTYPE(PARREG),AUTOPOLL IS AN AUTOPOLL OPERATION   000A
         BZ    EXIT                IN PROGRESS?  IF NOT, BRANCH    000A
         L     WORKREG,DECAREA(PARREG)  LOAD BUFFER ADDRESS        000A
         MVC   DECPOLPT(1,PARREG),4(WORKREG) MOVE INDEX BYTE FROM  000A
*    INPUT AREA TO HIGH ORDER BYTE OF DECPOLPT                     000A
         B     EXIT
TIC      L     CCWREG,0(CCWREG)         LOAD ADRS OF NEXT READ CCW 0583
         L     BUFREG,0(CCWREG)         LOAD PTR TO BUFFER
         N     BUFREG,BUFMSK            ADJUST TO 1ST BYTE OF BFR
         SH    BUFREG,FOUR
         LA    ZEROREG,0(BUFREG)        PLACE BFR PTR IN REG 0
         LR    PARREG,DCBREG            LOAD PTR TO DCB INTO REG 1
         L     BRREG,0(QREG)            LOAD PTR TO RELEASE BFR ROUTINE
         LR    WORKREG,SAVEREG          SAVE IOS SAVEAREA ADDR   YM4064
         LA    SAVEREG,SAVEAREA         SAVEAREA ADDR FOR 19MS   YM4064
         BALR  RETREG,BRREG             LINK TO RELEASE BFR
         LR    SAVEREG,WORKREG       RESTORE IOS SAVEAREA ADDR   YM4064
         SR    ZEROREG,ZEROREG          CLEAR REGISTER TO        Y02947
*                             INDICATE NO BUFFER POSTING         Y02947
         B     SETUPRS                  GO TO SETUP READ-SKIP      0583
WRPCI    CLC   1(3,BUFREG),ZERO+1       IS CHAIN ADRS IN BFR ZERO
         BE    LASTWR                   YES, LAST BUFFER, POST ONLY
         OI    11(CCW2REG),X'01'        INVALIDATE FOLLOWING TIC ADRS
         TM    5(CCWREG),FIRSTPCI       IS THIS FIRST PCI INT      3712
         BZ    WRB                      IF NOT, BRANCH             3712
         L     BUF2REG,16(CCWREG)       LOAD NEXT BUFFER ADDRESS   3712
         SH    BUF2REG,FOUR             BACK UP TO LONK FIELD      3712
         B     WRC                                                 3712
WRB      L     BUF2REG,0(BUFREG)        LOAD NEXT BUFFER ADDRESS   3712
WRC      CLC   1(3,BUF2REG),ZERO+1      IS THE NEXT BUFFER THE LAST3712
         BNE   QWPCI
         L     PARREG,IOBECBPT(IOBREG)  LOAD PTR TO ECB
         TM    DECTYPE+1(PARREG),X'0D'  IS OPERATION CONVERSATIONAL000B
         BO    WRWL                     YES, BRANCH                000B
         LH    WORKREG,DECLNGTH(PARREG) LOAD LAST BFR COUNT
WRL      SH    WORKREG,FOUR             ADJUST COUNT               000B
         STH   WORKREG,6(CCW2REG)       STORE IN CCW
         LA    CCWREG,0(CCWREG)         CLEAR HIGH BYTE        @ZA11431
         LA    CCW2REG,0(CCW2REG)       CLEAR HIGH BYTE        @ZA11431
         LR    WORKREG,CCWREG                                  @ZA04150
         AR    WORKREG,CCW2REG                                 @ZA04150
*****THE FOLLOWING INST DELETED BY AZ04150.******              @ZA04150
******   LA    WORKREG,0(CCWREG,CCW2REG) ADD TWO WRITE ADRS TOGETHER
         SRL   WORKREG,1                DIVIDE BY 2, RESULT = 1ST TIC
         NI    DISP4(CCW2REG),BF        SUPPRESS COMMAND        YA02156
*                                                    CHAINING   YA02156
         TM    21(WORKREG),X'80'        IS NEXT TIC CMND LAST CCW
         BO    NODC                     IF SO, BYPASS SET UP CHAINING
         OI    DISP4(CCW2REG),FORTY     INVOKE COMMAND CHAINING YA02156
         A     WORKREG,TICCHN           ADD CMND AND DIFFERENCE TO CCW
         ST    WORKREG,8(CCW2REG)           BEYOND 2ND TIC AND STORE
         OI    4(CCW2REG),X'20'         LEAVE SLI FLG ON           3712
NODC     NI    4(CCW2REG),X'7F'                                  A49689
QWPCI    TM    5(CCWREG),X'40'          IS T/P OP CODE FOR 2ND PCI
         BZ    MOVEPTR
         NI    5(CCWREG),X'BF'          ZERO T/P OP CODE BIT  1
         SPACE 2                                                   000A
         BCR   15,0                     THIS INSTRUCTION IS        000A
*    REQUIRED FOR MODEL 91 SUPPORT TO ENSURE THAT THE FOLLOWING    000A
*    INSTRUCTION (WHICH VALIDATES THE ADDRESS IN THE NEXT TIC      000A
*    COMMAND) WILL BE EXECUTED IN SEQUENCE.                        000A
         NI    11(CCWREG),X'FE'         VALIDATE NEXT TIC ADDRESS  000A
         SPACE 1
         BAL   RETREG,BLDPARM     BUILD ENTRIES IN PCI PARM LIST
         BAL   RETREG,ALTERCCW         ALTER REAL CCWS           Y02947
         B     EXIT
         SPACE 2                                                 Y02947
WRWL     LH    WORKREG,DECWLNG(PARREG)  LOAD COUNT                 000B
         B     WRL                                                 000B
MOVEPTR  MVC   1(3,CCW2REG),1(BUFREG)   MOVE PTR TO NXT BFR TO CCW
         L     WORKREG,0(CCW2REG)       ADD 4 TO CCW BFR ADRS FOR
         AH    WORKREG,FOUR
         ST    WORKREG,0(CCW2REG)
         SPACE 2                                                   000A
         BCR   15,0                     THIS INSTRUCTION IS        000A
*    REQUIRED FOR MODEL 91 SUPPORT TO ENSURE THAT THE FOLLOWING    000A
*    INSTRUCTION (WHICH VALIDATES THE ADDRESS IN THE NEXT TIC      000A
*    COMMAND) WILL BE EXECUTED IN SEQUENCE.                        000A
         NI    11(CCWREG),X'FE'         VALIDATE NEXT TIC ADDRESS  000A
         SPACE 1
         BAL   RETREG,BLDPARM     BUILD ENTRIES IN PCI PARM LIST
         BAL   RETREG,ALTERCCW         ALTER REAL CCWS           Y02947
         B     ZEROCC
         SPACE 2
*        CONSTRUCT ENTRIES IN THE PCI MODIFY PARAMETER LIST
         SPACE 1
BLDPARM  DS    0H
         TM    TCBFLGS6,TCBRV           VIRTUAL = REAL           Y02947
         BO    RETURN0                  YES, NO VIRTUAL CCW'S    Y02947
         L     WORKREG,DISP12(SAVEREG)  LOAD RQE ADDRESS         Y02947
         USING RQE,WORKREG          ESTABLISH RQE ADDR           Y02947
         L     BUF2REG,RQETCCW     LOAD TCCW ADDR (TRANSLATED)   Y02947
         DROP  WORKREG              DROP RQE ADDRESSABILITY      Y02947
         USING TCCW,BUF2REG         ESTABLISH TCCW ADDR          Y02947
         LR    RCCWREG,CCW2REG      VIRT ADDR OF DESIRED CCW     Y02947
         S     RCCWREG,IOBCPA(IOBREG) GET CCW OFFSET FROM        Y02947
*                        BEGINNING OF CHANNEL PROGRAM AREA       Y02947
         L     WORKREG,TCCWFRC GET ADDR OF FIRST REAL CCW        Y02947
         AR    RCCWREG,WORKREG    GET REAL ADDR OF DESIRED CCW   Y02947
         DROP  BUF2REG            DROP TCCW ADDRESSABILITY       Y02947
RETURN0  BR    RETREG
         SPACE 1
LASTWR   TM    13(CCWREG),X'80'         IS NEXT CWW THE LAST
         BO    ZEROCC                   IF SO, NO SWEAT, ADRS O.K.
         TM    21(CCWREG),X'2E'        IS FOLLOWING CCW DATA     A26889
         BNZ   SUB32                   NO, BRANCH                A26889
         TM    21(CCWREG),X'10'         IS FOLLOWING CCW A DATA CCW
         BO    MVCSAVE                  IF SO, BRANCH
SUB32    SH    CCWREG,THIRTY2          SUBTRACT 32               A26889
MVCSAVE  MVC   SAVEBFR+1(3),17(CCWREG)  MOVE BUFFER ADRS TO SAVE AREA
ZEROCC   MVI   0(BUFREG),X'00'          ZERO COMPLETION CODE IN THIS BF
POSTBUF  EQU   *                                                 Y02947
         ST    BUFREG,BUFPOST           STORE BUFFER ADDRESS
         MVC   BUFPOST(1),POSTCODE      MOVE IN WRROR CODE IF ANY
         L     CCW2REG,BUFPOST       LOAD BFR ADRS AS ECB CODE   Y02947
         NI    SAVEBFR+3,X'FC'
         L     CCWREG,SAVEBFR        LOAD PTR TO COMPLETED BFR   Y02947
         SH    CCWREG,FOUR           ADJUST TO 1ST BYTE OF BFR   Y02947
         MVI   POSTCODE,X'7F'           RESET POSTING CODE
         B    EXIT2                     GO POST BUFFER           Y02947
EXIT     LM    RETREG,CCWREG,DISP0(SAVEREG) RESTORE REGISTERS    Y02947
         BR    RETREG                 RETURN                     Y02947
         SPACE 3                                                 Y02947
ALTERCCW TM    TCBFLGS6,TCBRV           VIRTUAL = REAL           Y02947
         BO    RETURN1                  YES, NO VIRTUAL CCW'S    Y02947
         MVC   DISP0(LEN16,RCCWREG),DISP0(CCW2REG) MOVE NEXT     Y02947
*                     R/W CCW AND FOLLOWING TIC OR RD SKIP       Y02947
         LR    BUF2REG,CCWREG      LOAD INTERRUPTED CCW ADDR     Y02947
         S     BUF2REG,IOBCPA(IOBREG) GET CCW OFFSET FROM        Y02947
*                     BEGINNING OF CHANNEL PROGRAM AREA          Y02947
         AR    BUF2REG,WORKREG     GET ADDR OF REAL CCW          Y02947
         MVC   DISP8(LEN8,BUF2REG),DISP8(CCWREG) MOVE TIC OR     Y02947
*                     RD SKIP CCW AFTER INTERRUPTED CCW          Y02947
         STCM  RCCWREG,7,DISP8(BUF2REG) MAKE REAL TIC OR         Y02947
*                     RD SKIP POINT TO NEXT CCW                  Y02947
         TM    DISP11(CCW2REG),INVTIC INVALID TIC ADDR           Y02947
         BNO   NOTON0              NO, DO NOT ALTER REAL CCW     Y02947
         OI    DISP11(RCCWREG),INVTIC MAKE REAL TIC INVALID      Y02947
NOTON0   STCM  BUF2REG,7,DISP8(RCCWREG) MAKE REAL TIC OR         Y02947
*                     RD SKIP POINT TO NEXT CCW                  Y02947
         TM    DISP11(CCWREG),INVTIC INVALID TIC ADDR            Y02947
         BNO   NOTON1              NO, DO NOT ALTER REAL CCW     Y02947
         OI    DISP11(BUF2REG),INVTIC MAKE REAL TIC CCW          Y02947
*                             ADDRESS INVALID                    Y02947
NOTON1   L     WORKREG,DISP0(RCCWREG) LOAD VIRT DATA ADDR        Y02947
         LA    WORKREG,DISP0(WORKREG) CLEAR HIGH ORDER BYTE      Y02947
         LR    WKRG3,WORKREG       VIRT DATA ADDR                Y02947
         N     WORKREG,PAGE4K      GET STARTING PAGE BOUNDARY    Y02947
         AH    WKRG3,DISP6(RCCWREG) ADD DATA LENGTH              Y02947
         N     WKRG3,PAGE4K        GET ENDING PAGE BOUNDARY      Y02947
         CR    WKRG3,WORKREG       DOES DATA CROSS PAGE BNDRY    Y02947
         BNH   GETREAL             NO, DO NOT NEED IDAL          Y02947
         SR    WORKREG,WORKREG     CLEAR REGISTER                Y02947
         IC    WORKREG,DCBEIOBX(DCBREG) IOB SIZE                 Y02947
         AR    IOBREG,WORKREG      POINT TO END OF IOB           Y02947
         SH    IOBREG,EIGHT        POINT TO DYN BUF EXT          Y02947
         L     WORKREG,DISP4(IOBREG) GET VSL ADDR                Y02947
         L     WORKREG,DISP0(WORKREG) GET 1ST IDAL ADDR          Y02947
         OI    DISP4(RCCWREG),IDAWFLAG TURN ON IDAW FLAG IN      Y02947
*                             REAL CCW                           Y02947
         CR    CCWREG,CCW2REG      USE 1ST OR 2ND IDAL           Y02947
         BL    KEEP                KEEP ADDR OF 1ST IDAL         Y02947
         L     WORKREG,DISP0(WORKREG) LOAD ADDR OF 2ND IDAL      Y02947
KEEP     LA    WORKREG,DISP8(WORKREG) ADDR IDAW ENTRIES          Y02947
         LRA   WKRG3,DISP0(WORKREG) GET REAL IDAW ADDR AND       Y02947
         STCM  WKRG3,7,DISP1(RCCWREG) STORE IN REAL CCW          Y02947
         L     WKRG3,DISP0(CCW2REG) GET VIRT DATA ADDR           Y02947
         LA    WKRG3,DISP0(WKRG3)  CLEAR HIGH ORDER BYTE         Y02947
         LR    WKRG2,WKRG3         VIRT DATA ADDR                Y02947
         N     WKRG2,PAGE2K        GET STARTING 2K ADDR          Y02947
         CLC   DISP6(LEN2,RCCWREG),TWOK LENGTH GREATER THAN 2K   Y02947
         BH    SETUP               YES, DETERMINE NUM OF IDAWS   Y02947
         LA    WKRG4,TWO           NUM OF IDAWS                  Y02947
MORE     LRA   WKRG3,DISP0(WKRG3)  REAL DATA ADDR                Y02947
         ST    WKRG3,DISP0(WORKREG) STORE REAL DATA ADDR IN      Y02947
*                             IDAW                               Y02947
         LA    WORKREG,DISP4(WORKREG) ADDR NEXT IDAW             Y02947
         A     WKRG2,FUL2K         LOAD NEXT 2K BOUNDARY         Y02947
         LR    WKRG3,WKRG2         PUT IN RIGHT REG              Y02947
         BCT   WKRG4,MORE          BRANCH UNTIL NUM OF IDAWS=0   Y02947
         B     EXIT0               PREPARE TO RETURN             Y02947
GETREAL  L     WKRG3,DISP0(RCCWREG) VIRT DATA ADDR               Y02947
         LA    WKRG3,DISP0(WKRG3)  CLEAR HIGH ORDER BYTE         Y02947
         LRA   WKRG3,DISP0(WKRG3)  GET REAL DATA ADDR AND        Y02947
         STCM  WKRG3,7,DISP1(RCCWREG) STORE IN REAL CCW          Y02947
         NI    DISP4(RCCWREG),IDAWOFF TURN OFF IDAW CCW FLAG     Y02947
         B     EXIT0               PREPARE TO RETURN             Y02947
SETUP    LH    WKRG4,DISP6(RCCWREG) GET LENGTH                   Y02947
         SRL   WKRG4,ELEVEN DIVIDE BY 2K TO GET NUM OF IDAWS     Y02947
         LA    WKRG4,DISP2(WKRG4) ADD TWO FOR START AND END      Y02947
         B     MORE                SET UP CCW                    Y02947
EXIT0    LM    IOBREG,DCBREG,DISP16(SAVEREG) RESTORE REGISTERS   Y02947
RETURN1  BR    RETREG              RETURN                        Y02947
         SPACE 5                                                 Y02947
COMPARE  CLI   NINE,0
EIGHT    DC    H'8'
FOUR     DC    H'4'
THIRTY2  DC    H'32'
TWOK     DC    H'2048'             2K (2048) BYTES               Y02947
TWENTY   DC    H'20'                                        LD @ZA02312
ZERO     DC    F'0'
SAVEBFR  DC    F'0'                     PREVIOUS BUFFER ADDRESS
BUFPOST  DC    F'0'                     BUFFER AS ECB ADDRESS
         DS    0F                                                Y02947
PAGE4K   DC    X'00FFF000'         MASK TO OBTAIN 4K PG BNDRY    Y02947
PAGE2K   DC    X'00FFF800'         MASK TO OBTAIN 2K PG BNDRY    Y02947
FUL2K    DC    X'00000800'         2K (2048) BYTES               Y02947
TEXT     EQU   X'10'
POLL     EQU   X'09'
NOP      EQU   X'03'
NOPTPCD  EQU   X'09'
DYNBUF   EQU   X'08'
DCBBFTEK EQU   32
BISYNC   EQU   X'90'                    BSC DEVICE TYPE         YA02155
BUFFIX   EQU   X'40'                    ECB COMPLETION BIT       Y02947
RDTI     EQU   X'01'                    READ INITIAL           @ZA04188
USASCII  EQU   X'14'                    USASCII DCB CODE       @ZA04188
DCBXCODE EQU   X'39'           CONTROL STATION FLAG XMISSION   @ZA04188
BYTE     DC    X'12'
POSTCODE DC    X'7F'                    POSTING CODE
NINE     DC    X'09'                                               000C
SAVEAREA DC    18F'0'                   SAVE AREA FOR BUFFER     YM4064
*                                       ROUTINE (IGG019MS)       YM4064
POSTMSK  DC    X'7F000000'              COMPLETION CODE MASK
ZEROE    DC    X'01000000'
TICCHN   DC    X'08000018'
TICMASK  DC    X'FFFFFFFE'              TIC MASK FOR VALIDATING ADRS
BUFMSK   DC    X'00FFFFFC'                                         3712
RS2      DC    X'02'                    COMMAND - READ
         DC    X'000004'                AREA
         DC    X'30'                    FLAGS - SLI,SKIP
         DC    X'12'                    T/P OP CODE
         DC    X'7FFD'                  COUNT
CCWCOUNT DC    X'00C0'                                           A32452
STATUS   DC    X'0080'
CEDEPCI  DC    X'0C80'                  CHAN/DEVICE END PCI        3712
R10DISP  EQU   48
RDPCI    EQU   X'51'                                             A28629
UCORUE   EQU   X'03'                                             A28629
         EJECT                                                   Y02947
CVT      DSECT                                                   Y02947
         CVT   LIST=NO                                           Y02947
         EJECT                                                   Y02947
         IKJTCB DSECT=YES,LIST=YES                               Y02947
         EJECT                                                   Y02947
         IECDRQE                                                 Y02947
         EJECT                                                   Y02947
         IECDTCCW                                                Y02947
         EJECT                                                   Y02947
         IHASRB                                                  Y02947
         EJECT                                                   Y02947
         IHAASVT                                                 Y02947
         EJECT                                                   Y02947
         IECDIOSB                                                Y02947
         CNOP  0,8
         END
