         TITLE 'IGG0194P - BTAM OPEN LOAD 2 FOR LOCAL 3270'
IGG0194P CSECT
*                                                              @YA02128
*              FOLLOWING CHANGES APPLIED:                      @YA02128
*                                                              @YA02128
* A602500-603500,A604000                                     LD YA03239
* D603000-603500,D604100                                      LD YM7701
*
*        YA03230  (12/1/74)
*        ZA00543  (11/15/74)        ZA00544  (11/15/74)
*        ZA02328  (11/15/74)        AZ04872  (10/06/75)
*        AZ06392  (10/06/75)        AZ08051  (01/29/76)
*        AZ12151  (07/29/76)
*
*
* STATUS - CHANGE LEVEL 000
*
* FUNCTION/OPERATION - THIS MODULE VERIFIES THAT ALL DEVICES IN THE
*    LINE GROUP ARE LOCAL 3270 DEVICES.  A BUFFER POOL WILL BE OBTAINED
*    AND INITIALIZED IF REQUESTED.  IOB'S WILL BE OBTAINED AND
*    INITIALIZED.  AN ERASE WRITE WILL BE DONE TO EACH DEVICE IN THE
*    LINE GROUP TO INITIALIZE IT.  THE CONTROL BLOCK CHAINS REQUIRED
*    FOR ATTENTION HANDLING WILL BE INITIALIZED.
*
* ENTRY POINTS - THIS ROUTINE IS ENTERED AT IGG0194P VIA AN XCTL FROM
*    IGG0193M, THE FIRST BTAM OPEN LOAD.  IT MAY ALSO BE RE-ENTERED
*    FROM THE RELOOP PORTION OF THIS ROUTINE IF IT DETERMINES THAT
*    THERE IS ANOTHER DATA CONTROL BLOCK TO BE OPENED.
*
* INPUT - THE REGISTERS 5, 6, 7, AND 8 ARE THE INPUT, AS FOLLOWS:
*    5 - THE ADDRESS OF THE FIRST ENTRY IN THE DCB PARAMETER LIST
*    6 - THE ADDRESS OF THE BEGINNING OF THE WHERE-TO-GO TABLE
*    7 - THE ADDRESS OF THE CURRENT ENTRY IN THE DCB PARAMETER LIST
*    8 - THE ADDRESS OF THE CURRENT EXECUTOR'S ENTRY IN THE WHERE-TO-GO
*        TABLE
*
* OUTPUT - THE REGISTERS 7 AND 8 WILL BE POSITIONED AT THE NEXT ENTRIES
*    IN THE DCB PARAMETER LIST AND THE WHERE-TO-GO TABLE.
*        SOME OF THE DCB AND UCB EXTENSION FIELDS WILL HAVE BEEN
*    INITIALIZED.
*        THIS EXECUTOR'S ENTRY (OR ENTRIES) IN THE WHERE-TO-GO TABLE
*    WILL HAVE BEEN UPDATED TO IDENTIFY LOAD 3 FOR 3270 (IGG0194Q).
*
* EXTERNAL ROUTINES - GETMAIN, REGISTER FORM (SVC 10)
*    FREEMAIN, REGISTER FORM (SVC 10)
*    ABEND (SVC 13)
*    EXCP (SVC 0)
*    WAIT (SVC 1)
*    DOM (SVC 87)
*    PURGE (SVC 16)
*    WTOR (SVC 35)
*    XCTL (SVC 7)
*
* EXITS, NORMAL - THIS ROUTINE EXITS VIA XCTL TO THE MODULE IDENTIFIED
*    BY THE NEXT NON-ZERO ENTRY IN THE WHERE-TO-GO TABLE, NAMELY
*    IGG0194Q (BTAM OPEN EXECUTOR - LOAD 3 FOR 3270).
*
* EXITS, ERROR - THIS ROUTINE EXITS VIA ABEND FOR THE FOLLOWING ERROR
*    CONDITIONS:
*    00095000  INCOMPATIBLE DEVICES ARE DEFINED ARE DEFINED TO BE ON
*              THE SAME LINE GROUP.
*
* TABLE/WORK AREAS - THE WHERE-TO-GO TABLE CONTAINS THE ID AND TTR OF
*    OPEN EXECUTOR LOAD 3 FOR 3270.  THE DCB PARAMETER LIST CONTAINS
*    THE ADDRESS OF EACH DCB SPECIFIED IN THE OPEN MACRO.
*
* ATTRIBUTES - THIS ROUTINE IS EXECUTED IN THE TRANSIENT AREA AS
*    ENABLED, PRIVILEDGED, AND REENTRANT.
*
         EJECT
*/*IGG0194P: CHART */
*/* HEADER
*/*BTAM OPEN LOAD 2 FOR LOCAL 3270 DEVICES                          */
*/*IGG0194P: E ENTRY FROM IGG0193M VIA XCTL */
*/* M ESTABLISH ADDRESSABILITY FOR DCB AND DEB DSECTS */
*/*GETUCB: D (YES,,NO,ABEND95) ALL DVCS IN LINE GROUP 3270 DVCS */
*/* M SUPPRESS DYNAMIC BUFFERING */
*/*GETIOB: P STORE IOB SIZE IN DCB */
*/* P COMPUTE SIZE OF IOB POOL */
*/* L GETMAIN FOR IOB'S */
*/* P STORE IOB POOL BASE ADDRESS IN DCB */
*/* M SET UCB INDEX VALUE TO ZERO */
*/*INITIOBS: P CLEAR CORE FOR ONE IOB */
*/* P INITIALIZE IOBFLAG1, IOBSTART, IOBDCBPT, AND IOBUCBX */
*/* M INCREMENT THE UCB INDEX VALUE BY 1 */
*/* D (YES,,NO,INITIOBS) ALL IOB'S INITIALIZED? */
*/* D (YES,,NO,INITERMS) OLT REQUESTED? */
*/* P GET IRB POINTER AREA AND STORE ADDRESS IN DEBIRBAD */
*/*INITERMS: M GET NUMBER OF DVCS, ADDR OF DEB UCB LIST AND IOB POOL */
*/*INITLP: M GET ADDRESS OF UCB */
*/* P SAVE OLTEP EXECUTING FLAG FROM GCB */
*/* P CLEAR ATTENTION HANDLING FIELDS IN UCB EXTENSION */
*/* P CLEAR THE GRAPHICS STATUS BYTE IN THE UCB */
*/* D (NO,,YES,RLN1) IOBUCBX = 0? */
*/* P STORE POINTER TO MASTER UCB */
*/*STRLN: P INCREMENT UCB INDEX BY 1 TO OBTAIN RLN AND STORE IN UCB */
*/* D (NO,,YES,BYPASSIO) OLTEP EXECUTING ON DEVICE? */
*/* P CREATE ERASE WRITE CHANNEL PROGRAM IN IOB CPA */
*/* L GETMAIN FOR WTOR AREA AND ECB */
*/* P STORE ADDRESS OF ECB IN IOB */
*/*EXCP: L ISSUE EXCP TO DO WRITE */
*/* M CLEAR TIMER LOOP COUNTER */
*/*TIMELOOP: L STIMER WAIT FOR 1/2 SECOND */
*/* D (YES,,NO,TIMLPCHK) ECB POSTED COMPLETE? */
*/*CHKECB: D (NO,,YES,RLSECORE) COMP CODE = X'7F'? */
*/* D (YES,,NO,CHKERR) COMP CODE = X'44'? */
*/* M (,EXCP) CLEAR ECB */
*/*TIMLPCHK: D (NO,,YES,PURGE) HAVE WAITED FOR 30 SEC */
*/* M (,TIMELOOP) INCR TIMER LOOP COUNTER BY 1 */
*/*PURGE: P BUILD PURGE PARM LIST IN WTOR AREA */
*/* L PURGE I/O OPERATION REQUEST */
*/* D (YES,,NO,WRTMSG) REQUEST QUIESCING? */
*/* L (,CHKECB) WAIT FOR OPERATION TO COMPLETE */
*/*CHKERR: D (YES,WRTMSG,NO,) ERROR WAS SIO CC=3? */
*/* D (YES,,NO,SETERR) ERROR WAS INTERVENTION REQUIRED ? */
*/* P SET OPEN FAILED FLAG IN GRAPHICS STATUS BYTE IN UCB */
*/*DVCIRMSG: M INITIALIZE WTOR PARM LIST, ECB, AND REPLY AREA */
*/* P STORE DEVICE NAME IN MESSAGE */
*/* L ISSUE WTOR */
*/* P SAVE MESSAGE ID FROM WTOR */
*/* L WAIT FOR REPLY */
*/* L RELEASE MESSAGE */
*/* D (YES,SETERR,NO,) IS REPLY POST ? */
*/* D (YES,,NO,SPECCHK) IS REPLY CONT ? */
*/* M (,EXCP) CLEAR COMPLETION CODE IN ECB */
*/*SPECCHK: D (YES,,NO,DVCIRMSG) IS REPLY DROP ? */
*/* P (,SETERR) SET FORCE BRANCH TO SETERR ON INTERVENTION REQUIRED */
*/*WRTMSG: M INITIALIZE WTOR PARM LIST, ECB, AND REPLY AREA */
*/* P STORE DEVICE NAME IN MESSAGE */
*/* L ISSUE WTOR */
*/* P SAVE MESSAGE ID FROM WTOR */
*/* L WAIT FOR REPLY */
*/* L RELEASE MESSAGE */
*/* D (NO,,YES,SETERR) IS REPLY 'POST'? */
*/* D (YES,,NO,WRTMSG) IS REPLY 'CONT'? */
*/* M (,EXCP) CLEAR COMPLETION CODE IN ECB */
*/*BYPASSIO: P SET OLTEP EXECUTING FLAG IN IOB */
*/*SETERR: P FLAG INITIALIZATION FAILURE IN IOB */
*/*RLSECORE: L FREEMAIN WTOR AREA */
*/* M CLEAR POINTER TO WTOR AREA AND TIMER LOOP COUNT */
*/* M INCR POINTERS TO NEXT IOB AND UCB POINTER */
*/* D (YES,,NO,INITLP) ALL TERMINALS DONE? */
*/* R GO TO END-OF-LOAD CODE */
*/*RLN1: P STORE ADDRESS OF DEB IN UCB */
*/* P (,STRLN) SAVE ADDRESS OF MASTER UCB */
*/*ABEND95: R ABEND WITH SYSTEM 095 CODE */
*/*IGG0194P: END */
         EJECT
RPARM2   EQU   0                    PARAMETER REGISTER
RPARM1   EQU   1                    PARAMETER REGISTER
RW1      EQU   2                    WORK REGISTER
RCORE    EQU   3                    ADDRESS OF GETMAIN CORE
RUCB     EQU   4                    UCB ADDRESS
RPAR     EQU   5                    ADDRESS OF DCB PARAMETER LIST
RWTG     EQU   6                    ADDRESS OF WTG TABLE
RPARC    EQU   7                    ADDRESS OF CURRENT DCB ENTRY
RWTGC    EQU   8                    ADDRESS OF CURRENT WTG ENTRY
RTIOT    EQU   9                    ADDRESS OF THE TASK I/O TABLE
RDCB     EQU   10                   DCB ADDRESS
RDEB     EQU   11                   DEB ADDRESS
RBASE    EQU   12                   BASE REGISTER
RW2      EQU   13                   WORK REGISTER
RGMUCB   EQU   13                   MASTER UCB REG             @ZA06392
RPARM4   EQU   14                   PARAMETER REGISTER
RPARM3   EQU   15                   PARAMETER REGISTER
*
RW3      EQU   RTIOT                ALTERNATE
RW4      EQU   RPARM3                   ASSIGNMENTS
RW5      EQU   RDCB                         FOR WORK REGISTERS
*
*
ALLON    EQU   X'FF'                MASK OF ALL ONE'S
ANRIOBSZ EQU   88                   3270 IOB SIZE
ATNCNT   EQU   26                   DISP TO ATTN CNT FIELD IN UCB
ATNXTNSN EQU   14                   LENGTH OF ATTN HANDLING SECTION
*                                      OF UCB EXTENSION
COMPOK   EQU   X'7F'                NORMAL COMPLETION CODE
DEBATV   EQU   28                  DISP TO DEB VECTOR TO APPNDG TAB
DVC3277  EQU   X'09'                DEVICE TYPE FOR 3277 DISPLAY
DVC3286  EQU   X'0B'                DEVICE TYPE FOR 3286 PRINTER
*              DEVICE TYPE FOR 3284 PRINTER IS X'0A'
DYNBUF   EQU   X'08'                DCB DYNAMIC BUFFERING FLAG
EIGHT    EQU   8
EQ       EQU   8                    BC MASK FOR EQUALITY
ERROR    EQU   X'41'                PERMANENT ERROR OCCURED
FIVE     EQU   5
FLAG1    EQU   X'42'               IOB IOS FLAGS - CMND CHAINING
*                                       I/O REQUESTS UNRELATED
FOUR     EQU   4                    ADDR INCR OF 4
GCB      EQU   27                   DISP TO GCB FIELD IN UCB
GRAF     EQU   28                  DISP TO GRAPHICS STATUS     @YA02128
GRPHCDVC EQU   X'10'                GRAPHIC DEVICE CLASS
INITERR  EQU   X'80'                INITIALIZATION ERROR FLAG IN IOB
INTERCPT EQU   X'44'                IOB INTERCEPTED
INTREQ   EQU   X'40'               INTERVENTION REQUIRED SENS  @YA02128
IOBOLTEP EQU   X'42'                SECONDARY OLTEP EXECUTING FLAGS
LINK     EQU   36                   DISP TO CONTROL BLOCK LINK-1
MAXINTVL EQU   59                  MAX VALUE OF TIME LOOP CTR
MSGDVCAD EQU   21                   DISP TO DEVICE ADDRESS IN WTOR
*                                      EXPASION
OLT      EQU   X'10'                DCB BIT FOR EROPT=T
OLTEP    EQU   X'80'                PRIMARY OLTEP EXECUTING FLAG
ONE      EQU   1
OPENINIT EQU   X'80'               OPEN IN PROGRESS FLAG       @YA02128
OPENFAIL EQU   X'02'               OPEN FAILED GRAF FLAG       @YA02128
OPENMSG  EQU   X'08'               FLAG BYPASS INT REQ MSG     @YA02128
PLOFF    EQU   4                    OFFSET OF DCB ENTRIES
POSTBIT  EQU   X'40'               ECB POST BIT
PTRSZ    EQU   16                  SIZE OF IRB POINTER AREA
PRGCTL   EQU   X'94'               PURGE CONTROL BYTE
RDYQBTM  EQU   X'02'                RDYQ CODED IN DCB          @ZA12151
RLN      EQU   36                   DISP TO RLN FIELD IN UCB
SIOCC3   EQU   X'30'                MASK TO TEST SIO CC = 3 IN IOB
PURGEOPT EQU   X'A0'               OPTION BYTE FOR PURGE    LD @ZA02328
SIX      EQU   6
TENAND4  EQU   14
THREE    EQU   3
TIMELNG  EQU   4                                               @ZA08051
TWELVE   EQU   12
TWO      EQU   2
UCBDVCLS EQU   18                   DISP TO DEVICE CLASS FIELD IN UCB
UCBDVCTP EQU   19                   DISP TO DEVICE TYPE FIELD IN UCB
UCBNAME  EQU   13                   DISP TO DEVICE NAME IN UCB
WAOFF    EQU   32                   OFFSET OF FIRST WTG ENTRY FROM
*                                       BEGINNING OF TABLE
WGOFF    EQU   8                    OFFSET OF WTG ENTRIES
WTGPATH  EQU   30                  OFFSET TO PATH BITS         @YA02128
ZERO     EQU   X'00'
*              ENTRY AND ADDRESSABILITY CODE
         BALR  RBASE,0              ESTABLISH BASE REGISTER
         USING *,RBASE
         USING IHADCB,RDCB
         USING IECTDEB,RDEB
         USING WTGENTRY,RWTGC
         B     BEGIN                   BRANCH AROUND ID        @YA02128
         DC    CL8'IGG0194P'           NAME                    @YA02128
         DC    C'** MVS *'                                   LD YA03239
         DC    C'&SYSDATE'         DATE LAST ASSEMBLE       LD @ZA00544
BEGIN    DS    0H                                              @YA02128
*
         L     RDCB,0(RPARC)        GET DCB ADDRESS
         L     RDEB,DCBDEBAD        GET DEB ADDRESS
         L     RW4,WTGCORE-ONE     ADDR OF OPEN WORKAREA       @ZA04872
         USING WORKAREA,RW4                                    @ZA04872
         XC    DXCCW(TWELVE),DXCCW CLEAR PURGE PARM LIST       @ZA04872
         ST    RDEB,DXCCW          SAVE DEB ADDR FOR PURGE     @ZA04872
         L     RDEB,DEBATV(RDEB)  GET ADDR OF APPENDAGE TABLE  @ZA04872
*                                   FOR BASE OF DSECT          @ZA04872
*
*              CHECK ALL UCB'S IN LINE GROUP FOR 3270 DEVICES
*
         SR    RW1,RW1
         IC    RW1,DEBNMEXT         GET NUMBER OF DEVICES IN LINE GROUP
         SR    RW2,RW2              INITIALIZE UCB TABLE INDEX TO ZERO
*
GETUCB   L     RUCB,DEBUCBAD(RW2)   GET ADDRESS OF UCB
         CLI   UCBDVCLS(RUCB),GRPHCDVC  DEVICE A GRAPHICS DEVICE
         BNE   ABEND95              NO, ABEND
         CLI   UCBDVCTP(RUCB),DVC3277   DEVICE A 3270 DEVICE
         BL    ABEND95              NO, ABEND
         BE    NEXTUCB              YES, CHECK NEXT UCB
         CLI   UCBDVCTP(RUCB),DVC3286   MAYBE
         BH    ABEND95              NO, ABEND
*
NEXTUCB  LA    RW2,FOUR(RW2)        INCR TO NEXT ADDRESS IN TABLE
         BCT   RW1,GETUCB           CHECK NEXT IF ALL NOT CHECKED
*
         NI    DCBBFTEK,ALLON-DYNBUF  SUPRESS DYNAMIC BUFFERING
*
*              CONSTRUCT THE IOB POOL
GETIOB   LA    RW1,ANRIOBSZ         GET THE IOB SIZE
         STC   RW1,DCBEIOBX         STORE IOB SIZE IN DCB
         LR    RPARM1,RW1
         SR    RW2,RW2
         IC    RW2,DEBNMEXT         GET NUMBER OF IOB'S
         MR    RPARM2,RW2           GET TOTAL CORE REQUIRED
         LR    RPARM2,RPARM1        LOAD PRODUCT INTO REG 0
         O     RPARM2,IOBPOOL       OR IN SUBPOOL NUMBER
         L      RW4,WTGCORE-ONE                                  Y02947
         USING WORKAREA,RW4                                      Y02947
         MODESET KEYADDR=DXUKEY,WORKREG=9                        Y02947
         GETMAIN  R,LV=(0)          GET CORE FOR THE IOB'S
*
         USING IECTIOB,RCORE
         LR    RCORE,RPARM1         GET ADDRESS OF IOB POOL
         SR    RCORE,RW1            SUBTRACT IOB SIZE
         LR    RUCB,RCORE           SAVE IOB BASE ADDR           Y02947
         LA    RDCB,0(RDCB)         CLEAR HIGH BYTE OF DCB ADDRESS
         SR    RW3,RW3              INITIALIZE COUNTER FOR UCB INDEX
*
INITIOBS LA    RCORE,0(RCORE,RW1)   STEP TO BEGINNING OF IOB
         XC    0(ANRIOBSZ,RCORE),0(RCORE)  CLEAR IOB
         MVI   IOBFLAG1,FLAG1      SET IOS FLAGS
         LA    RW4,IOBCPA           GET ADDR OF CHANNEL PROG AREA
         ST    RW4,IOBSTART             & STORE IT IN IOBSTART
         L     RW4,WTGCORE-ONE      ADDRESS OF OPEN WORKAREA     Y02947
         MVC   IOBDCBPT,DXUDCBAD    ADDR OF USER'S DCB TO IOB    Y02947
         STC   RW3,IOBUCBX          STORE UCB INDEX
         LA    RW3,ONE(RW3)        INCR UCB INDEX BY 1
         BCT   RW2,INITIOBS         DECR & TEST IOB COUNT
*                                   LOOP IF NOT FINISHED
*
*              GET POINTERS FOR IRB IF ON-LINE TEST REQUESTED
         TM    DCBERROP,OLT         OLT REQUESTED
         BNO   INITERMS             NO, GO TO INITIALIZE TERMINALS
         LA    RPARM2,PTRSZ        NUMBER OF BYTES FOR POINTERS
         O     RPARM2,IOBPOOL       OR IN SUBPOOL NUMBER
         GETMAIN  R,LV=(0)          GET CORE FOR POINTERS
         MODESET EXTKEY=DATAMGT     BACK TO DATA MGT KEY         Y02947
         ST    RPARM1,DEBIRBAD-1    STORE ADDRESS IN DEB
         ST    RUCB,DCBIOBAD        IOB ADDR TO 'COPY' DCB       Y02947
         L     RW4,WTGCORE-ONE                                   Y02947
         MODESET KEYADDR=DXUKEY,WORKREG=9   ASSUME USER KEY      Y02947
         XC    0(PTRSZ,RPARM1),0(RPARM1)  CLEAR AREA
         B     CONTINUE                                       LD Y02947
*
*              INITIALIZE THE ATTENTION FIELDS IN THE UCB (EXCEPT THE
*              IRB ADDRESS AND UNLOCK AND CLEAR THE TERMINALS
*
INITERMS EQU   *                                              LD Y02947
         MODESET EXTKEY=DATAMGT                               LD Y02947
         ST    RUCB,DCBIOBAD       IOB ADDR TO 'COPY' DCB     LD Y02947
         L     RW4,WTGCORE-ONE     ADDR OF OPEN WORKAREA      LD Y02947
         MODESET KEYADDR=DXUKEY,WORKREG=9                     LD Y02947
CONTINUE EQU   *                                              LD Y02947
         SR    RW3,RW3
         IC    RW3,DEBNMEXT         GET NO. OF DEVICES IN  LINE GROUP
         LA    RDEB,DEBUCBAD        GET ADDR OF DEB UCB LIST
         DROP  RDEB                END DEB ADDRESSABILITY
         L     RCORE,DCBIOBAD       GET BASE ADDR OF IOB POOL
INITLP   EQU   *
         L     RUCB,0(RDEB)         GET ADDR OF UCB FOR DEVICE
         LA    RCORE,ANRIOBSZ(RCORE)  GET ADDR OF IOB FOR DEVICE
         IC    RW1,GCB(RUCB)          SAVE GCB FIELD
         MODESET EXTKEY=ZERO          NEED KEY 0 TO STORE IN UCB Y02947
         XC    ATNCNT(ATNXTNSN,RUCB),ATNCNT(RUCB)  CLEAR ATTN-HANDLING
*                                         FIELDS IN UCB EXTENSION
         STC   RW1,GCB(RUCB)          RESTORE GCB TO UCB
         NI    GCB(RUCB),OLTEP     CLEAR ALL GCB EXCEPT OLTEP-EXEC
*                                         FLAG
         NI    GRAF(RUCB),ZERO     RESET GRAPHICS STATUS       @YA02128
         OI    GRAF(RUCB),OPENINIT FLAG OPEN IN PROGRESS       @YA02128
         SR    RW1,RW1
         IC    RW1,IOBUCBX            GET UCB INDEX FROM IOB
         LTR   RW1,RW1                IS IT 0, I.E. IS RLN = 1
         BZ    RLN1                   YES, SET UP MASTER UCB PTR TO DEB
         ST    RGMUCB,LINK(RUCB) NO, STORE PNTR TO MASTER UCB  @ZA06392
STRLN    LA    RW1,ONE(RW1)           COMPUTE RLN FROM UCB INDEX
         STC   RW1,RLN(RUCB)          AND STORE IN UCB
*
         L     RW4,WTGCORE-ONE        ADDR OF OPEN WORKAREA   LD Y02947
         MODESET KEYADDR=DXUKEY,WORKREG=2    ASSUME USER KEY     Y02947
         TM    GCB(RUCB),OLTEP        OLTEP EXECUTING ON DEVICE
         BO    BYPASSIO               YES, DO NOT DO INITIALIZATION
*
         MVC   IOBCPA(EIGHT),WRTCCW   MOVE ERASE WRITE CCW INTO IOB
         MVC   IOBCPA+EIGHT(ONE),NOPWRT  WCC TO DATA AREA   LD @ZA00543
         LA    RW1,IOBCPA+EIGHT          ADR OF DATA AREA   LD @ZA00543
         O     RW1,IOBCPA             ADD COMMAND CODE TO HIGH BYTE
         ST    RW1,IOBCPA
         LA    RPARM2,WTOARLNG        GET LENGTH OF WTOR AREA
         O     RPARM2,IOBPOOL         SET POOL NUMBER
         GETMAIN  R,LV=(0)          GET CORE FOR IT
         ST    RPARM1,IOBECBPT      STORE ADDRESS IN IOB
         XC    0(WTOARLNG,RPARM1),0(RPARM1)  CLEAR AREA
         MODESET EXTKEY=DATAMGT    DATA MGT KEY               LD Y02947
         LR    RPARM1,RUCB         SAVE REG 4                 LD Y02947
         L     RUCB,WTGCORE-ONE    WORK AREA ADDRESS          LD Y02947
         USING WTG,RWTG            WTG ADDRESSABILITY         LD Y02947
         L     RW4,WTGPREFX        WTG PREFIX ADDRESS         LD Y02947
         STM   RPARM2,RPARM4,IECREGSV-IECPREFX(RW4) SAVE REG  LD Y02947
         IECRES INIT,DCBCOPY=FRWKAR
         LR    RW4,RWTG            REG SAVEAREA ADDR          LD YM5668
         LM    RPARM2,RPARM4,IECREGSV-IECPREFX(RW4) REST REG  LD Y02947
         LR    RUCB,RPARM1         RESTORE REG 4              LD Y02947
         USING WORKAREA,RW4        WORKAREA ADDRESSABILITY    LD Y02947
         L RW4,WTGCORE-ONE         WORK AREA ADDRESS          LD Y02947
         MODESET KEYADDR=DXUKEY,WORKREG=1   USER KEY          LD Y02947
*
EXCP     EQU   *                                                 Y02947
         DROP  RW4                                               Y02947
         LA    RPARM1,IOBFLAG1      GET ADDRESS OF IOB
         EXCP  (1)                  DO I/O OPERATION
*
         MVI   IOBINCAM+1,ZERO     CLEAR LOOP CTR
         MVC   IOBERINF(TIMELNG),TIME   MOVE TIME VALUE        @ZA08051
*
TIMELOOP STIMER WAIT,BINTVL=IOBERINF   WAIT FOR .5 SEC      LD @ZA00544
         L     RW1,IOBECBPT        GET ADDR OF ECB
         TM    0(RW1),POSTBIT      HAS ECB BEEN POSTED
         BZ    TIMLPCHK            NO, SEE IF TIME INTERVAL UP
*
CHKECB   EQU   *
         L     RW1,IOBECBPT         GET ADDRESS OF ECB
         CLI   0(RW1),COMPOK        NORMAL COMPLETION
         BE    RLSECORE             YES, RELEASE GETMAIN AREA
*
         CLI   0(RW1),INTERCPT      IOB INTERCEPTED
         BNE   CHKERR               NO, CHECK CAUSE OF ERROR
         MVI   0(RW1),ZERO          YES, CLEAR COMPLETION CODE
         B     EXCP                 RE-ISSUE OPERATION
*
TIMLPCHK CLI   IOBINCAM+1,MAXINTVL LOOP CTR AT MAX VALUE
         BE    PURGE               YES, PURGE I/O           LD @ZA02328
         SR    RW1,RW1
         IC    RW1,IOBINCAM+1      GET LOOP CTR
         LA    RW1,ONE(RW1)        INCR CTR BY 1
         STC   RW1,IOBINCAM+1      AND STORE BACK IN IOB
         B     TIMELOOP            WAIT FOR 0.5 SEC MORE
*
PURGE    EQU   *                                            LD @ZA02328
         MODESET EXTKEY=DATAMGT    DATA MANAGEMENT KEY      LD @ZA02328
         L     RW4,WTGCORE-ONE     WORKAREA ADDRESSABILITY  LD @ZA02328
         USING WORKAREA,RW4
         MVI   DXCCW,PURGEOPT      HALT I/O OPTION          LD @ZA02328
         PURGE DXCCW                                        LD @ZA02328
         L     RW4,WTGCORE-ONE     WORKAREA ADDRESSABILITY  LD @ZA02328
         MODESET KEYADDR=DXUKEY,WORKREG=15                  LD @ZA02328
*
CHKERR   EQU   *                   CHECK CAUSE OF I/O FAILURE  @YA02128
         TM    IOBSIOCC,SIOCC3     WAS ERROR SIO CC = 3 (CU    @YA02128
*                                  NOT OPERATIONAL)            @YA02128
         BO    WRTMSG              YES, TELL OPERATOR          @YA02128
         TM    IOBSENS0,INTREQ     INTERVENTION REQUIRED ?     @YA02128
         BNO   SPECBR              NO, GO FLAG OPEN ERROR      @YA02128
         MODESET EXTKEY=ZERO                                 LD YA02128
         OI    GRAF(RUCB),OPENFAIL FLAG OPEN FAILED            @YA02128
         USING WORKAREA,RW4         WORKAREA ADDRESSABILITY  LD YA02128
         L     RW4,WTGCORE-ONE      WORKAREA ADDRESS         LD YA02128
         MODESET KEYADDR=DXUKEY,WORKREG=15                   LD YA02128
         DROP  RW4                                           LD YA02128
SPECBR   EQU   *                   TEST TO SEE IF BYPASS MSG   @YA02128
         TM    WTGPATHS,WTGSPMSG   BYPASS MSG SET ?            @YA02128
         BO    SETERR              YES, BYPASS INT REQ MSG     @YA02128
         L     RW1,IOBECBPT        GET ADDR OF GETMAINED AREA  @YA02128
DVCIRMSG EQU   *                   PUT OUT DEVICE NOT OPER     @YA02128
         XC    0(EIGHT,RW1),0(RW1) CLEAN ECB AND REPLY AREA    @YA02128
         LA    RPARM2,FOUR(RW1)    GET ADDRESS OF REPLY AREA   @YA02128
         MVC   EIGHT(WTODVLNG-EIGHT,RW1),WTODEV MOVE DEV MSG   @YA02128
         MVC   MSGDVCAD+EIGHT(THREE,RW1),UCBNAME(RUCB) PUT     @YA02128
*                                  UCB NAME IN MESSAGE         @YA02128
         LA    RPARM1,EIGHT(RW1)   GET BEGINNING OF WTOR EXP   @YA02128
         WTOR  ,(RPARM2),,(RW1),MF=(E,(1)) WRITE MESSAGE       @YA02128
         XR    RPARM1,RW1          EXCHANGE CONTENTS           @YA02128
         XR    RW1,RPARM1          OF REGISTERS                @YA02128
         XR    RPARM1,RW1          RPARM1 AND RW1              @YA02128
         WAIT  ECB=(1)             WAIT FOR REPLY              @YA02128
         DOM   MSG=(2)             RELEASE MESSAGE             @YA02128
         L     RW1,IOBECBPT        GET ADDRESS OF WTOR AREA    @YA02128
         CLC   FOUR(FOUR,RW1),POST IS REPLY 'POST' ?           @YA02128
         BE    SETERR              YES, FLAG ERROR             @YA02128
         CLC   FOUR(FOUR,RW1),CONT IS REPLY 'CONT' ?           @YA02128
         BNE   SPECCHK             NO, CHECK SPECIAL REPLY     @YA02128
         MVI   0(RW1),ZERO         YES, CLEAR COMPLETION CODE  @YA02128
         MODESET EXTKEY=ZERO                                 LD YA02128
         NI    GRAF(RUCB),ALLON-OPENFAIL TURN OFF OPEN  FLAG   @YA02128
         USING WORKAREA,RW4         WORKAREA ADDRESSABILITY  LD YA02128
         L     RW4,WTGCORE-ONE      WORKAREA ADDRESS         LD YA02128
         MODESET KEYADDR=DXUKEY,WORKREG=1                    LD YA02128
         B     EXCP                AND RETRY I/O               @YA02128
SPECCHK  EQU   *                   CHECK FOR BYPASS FUTURE     @YA02128
         CLC   FOUR(FOUR,RW1),DROP IS REPLY 'DROP' ?           @YA02128
         BNE   DVCIRMSG            NO, INVALID - REISSUE MSG   @YA02128
         MODESET EXTKEY=DATAMGT                              LD YA02128
         OI    WTGPATHS,WTGSPMSG   SET BYPASS INT REQ MSG      @YA02128
         L     RW4,WTGCORE-ONE     WORKAREA ADDRESS          LD YA02128
         MODESET KEYADDR=DXUKEY,WORKREG=15                   LD YA02128
         DROP  RW4                                           LD YA02128
         B     SETERR              AND GO SET OPEN ERROR       @YA02128
*
WRTMSG   XC    0(EIGHT,RW1),0(RW1)  YES, CLEAR ECB AND REPLY AREA
         LA    RPARM2,FOUR(RW1)     GET ADDRESS OF REPLY AREA
         MVC   EIGHT(WTOARLNG-EIGHT,RW1),WTOBASE  MOVE SKELETON MSG
*                                   INTO GETMAIN AREA
         MVC   MSGDVCAD+EIGHT(THREE,RW1),UCBNAME(RUCB)  PUT DEVICE
*                                   NAME INTO MESSAGE
         LA    RPARM1,EIGHT(RW1)    GET BEGINNING OF WTOR EXPASION
         WTOR  ,(RPARM2),,(RW1),MF=(E,(1))   WRITE MESSAGE
         XR    RPARM1,RW1           EXCHANGE CONTENTS
         XR    RW1,RPARM1               OF REGISTERS
         XR    RPARM1,RW1                   RPARM1 AND RW1
*
         WAIT  ECB=(1)              WAIT FOR REPLY
*
         DOM   MSG=(2)              RELEASE MESSAGE
*
         L     RW1,IOBECBPT         GET ADDRESS OF WTOR AREA
         CLC   FOUR(FOUR,RW1),POST  REPLY IS 'POST'
         BE    SETERR               YES, FLAG ERROR
*
         CLC   FOUR(FOUR,RW1),CONT  REPLY IS 'CONT'
         BNE   WRTMSG               NO, INVALID REPLY - REWRITE MESSAGE
         MVI   0(RW1),ZERO          CLEAR COMPLETION CODE
         B     EXCP                 RETRY INITIALIZATION
*
BYPASSIO OI    IOBINCAM,IOBOLTEP    SET OLTEP EXECUTING FLAGS IN IOB
SETERR   EQU   *                                             LD YA03239
         TM    DCBRDYI,RDYQBTM       USING RDYQ                @ZA06392
         BZ    SETERR1              NO FLAG IOB                @ZA06392
         TM    IOBSENS0,INTREQ        INTERVENTION REQUIRED    @ZA06392
         BO    NOSETERR             YES DON'T FLAG             @ZA06392
SETERR1  OI    IOBINCAM,INITERR     FLAG I/O ERROR AT OPEN     @ZA06392
NOSETERR TM    GCB(RUCB),OLTEP      OLTEP USING DVC            @ZA06392
         BO    DONORLSE                                         YA01229
RLSECORE LR    RPARM1,RW1           ADDRESS OF AREA TO BE FREED
         LA    RPARM2,WTOARLNG      LENGTH OF AREA
         O     RPARM2,IOBPOOL       POOL NUMBER
         FREEMAIN  R,LV=(0),A=(1)   FREE AREA
DONORLSE EQU   *                                                YA01229
         XC    IOBECBPT(FOUR),IOBECBPT  CLEAR POINTER TO AREA
         MVI   IOBINCAM+1,ZERO
         LA    RDEB,FOUR(RDEB)      GET POINTER TO NEXT UCB ADDRESS
         BCT   RW3,INITLP           LOOP IF MORE TERMS TO INITIALIZE
         B     ENDLOAD              END-OF-LOAD CODE
*
         USING IHADCB,RDCB                                       Y02947
RLN1     L     RPARM1,DCBDEBAD      GET ADDRESS OF DEB
         ST    RPARM1,LINK(RUCB)    STORE IN LINK FIELD
         LR    RGMUCB,RUCB       SAVE ADDRESS OF MASTER UCB    @ZA06392
         B     STRLN                STORE RLN
*
*              END-OF-LOAD CODE
ENDLOAD  MODESET EXTKEY=DATAMGT     BACK TO DATA MGT KEY         Y02947
         MVC   WTGIDTTR(FIVE),LD3F3270   SET UP IDTTR FOR NEXT LOAD
         USING WORKAREA,RW1                                      Y02947
         L     RW1,WTGCORE-ONE
*
RELOOP   LA    RWTGC,WGOFF(RWTGC)   INCR CURRENT WTG REGISTER
         LA    RPARC,PLOFF(RPARC)   INCR CURRENT PARM LIST REG TO NEXT
*                                       ENTRY
         CLC   WTGIDTTR(TWO),AMIDCNST  IF NEXT WTG ENTRY REQUIRES THIS
         BCR   EQ,RBASE             EXECUTOR, RETURN TO BEGINNING
         CLC   WTGIDTTR(TWO),OPIDCNST   IF NOT, TEST FOR END OF TABLE
         BNE   RELOOP               NOT END, CHECK NEXT ENTRY
*
         LR    RPARC,RPAR           REINITIALIZE CURRENT PARM REG
         LA    RWTGC,WAOFF(RWTG)    AND CURRENT WTG REG
ZCHECK   CLI   WTGIDTTR,ZERO        IF FIRST BYTE OF CURRENT WTG ENTRY
         BNE   XCTLRTNE             NON-ZERO, GO TO TRANSFER CONTROL
         LA    RWTGC,WGOFF(RWTGC)   IF NOT, GET NEXT ENTRY
         LA    RPARC,PLOFF(RPARC)
         B     ZCHECK               AND CHECK IT
*
*
XCTLRTNE EQU   *                                               @YA02128
         NI    WTGPATHS,ALLON-WTGSPMSG  TURN OFF BYPASS        @YA02128
         LA    RPARM3,DXCCW12           POINT TO DOUBLE WORD LIST
         MVC   WTGMODID(TWO),WTGIDTTR   MOVE ID TO NAME FIELD
         MVC   TENAND4(THREE,RWTG),TWO(RWTGC)  MOVE TTR TO WTG TABLE
         XCTL  DE=(RWTG),SF=(E,(15))
*
ABEND95  L     RPARM1,ERRCODE
         ABEND (1)                 INCOMPATIBLE DEVICES ON LINE GROUP
NOPWRT   DC    X'C3'                ERASE WRITE DATA STREAM - WCC ONLY
*                                     RESET KEYBOARD
*                                     RESET MODIFIED DATA TAGS
OPIDCNST DC    C'0S'                ID OF LAST OPEN LOAD
AMIDCNST DC    C'4P'                ID OF THIS MODULE
TIME     DC    F'50'               TIME INTERVAL OF .50 SEC
ERRCODE  DC    X'80095000'         ABEND CODE
IOBPOOL  DC    X'FA000000'          SUBPOOL NUMBER FOR IOB'S
CONT     DC    C'CONT'             WTOR REPLY
DROP     DC    C'DROP'                                         @YA02128
POST     DC    C'POST'                  COMPARANDS
POOLNUM  DC    X'E6000000'          SUBPOOL FOR WTOR AREA
WRTCCW   DC    XL8'0500000020240001'  ERASE WRITE CCW SKELETON
*                                   COMMAND = ERASE WRITE
*                                   FLAGS = SLI
*                                   TP OP CODE = OPEN WRITE
*                                   BYTE CNT = 1
WTOBASE  WTOR  'IEC804A  000 CONTROL UNIT NOT OPERATIONAL. REPLY CONT O*
               R POST',,4,,ROUTCDE=(1,8,10),DESC=2,MF=L
WTOARLNG EQU   (*-WTOBASE+8+7)/8*8  LENGTH OF GETMAIN AREA FOR WTOR
WTODEV   WTOR  'IEC804A  000 DEVICE NOT OPERATIONAL. REPLY CONT, POST O*
               R DROP',,4,,ROUTCDE=(1,8,10),DESC=2,MF=L        @YA02128
WTODVLNG EQU   (*-WTODEV+8+7)/8*8  LENGTH OF GETMAINED AREA    @YA02128
PTCHAREA DC    80XL1'00'       PATCH AREA                      @YA02128
NENT     EQU   1                    NUMBER OF IDTTR'S
LENGTH   EQU   NENT*6+6             LENGHT OF IDTTR'S+2+4
NODBWDS  EQU   (LENGTH+7)/8         NO. OF DBL WDS WITH PADDING
ORGIDTTR EQU   2048-NODBWDS*8                                  @YA02128
         ORG   IGG0194P+ORGIDTTR
LD3F3270 DC    C'4Q'                ID FOR THIRD LOAD OF BTAM OPEN
*                                       FOR 3270
         DC    X'00000000'          TTR AND L
IDEND    DC    X'0000'              END OF IDTTRL TABLE
         CNOP  4,8                  PADDING
LOADID   DC    C'019'               OPEN SVC CODE
         DC    YL1(X'80'-NODBWDS)  POINTER FOR IEHIOSUP
*
         EJECT
CVT      DSECT
         CVT
         EJECT
         DCBD  DSORG=BX,DEVD=BS
         EJECT
         IECTDEBX
         EJECT
         IECTIOBX
         EJECT
WORKAREA DSECT                                                   Y02947
         IECDSECT IOB=NO                                         Y02947
         EJECT
         IECDSECS WTG,PREFX,EXPAND=YES
         END
