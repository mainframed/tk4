         TITLE 'IGC0706F' - BSC ONLTST ASCII-TRANSCODE MODULE'     000D
         SPACE 2
IGC0706F CSECT
***********************************************************************
*                                                                     *
* STATUS -            CHANGE LEVEL 001, NOVEMBER 7,1969               *
*                                                                     *
* FUNCTION -          BUILD XX=1 AND PREDEFINED ASCII AND TRANS-      *
*                     CODE MESSAGES. STORE COUNT IN TEXT CCW.         *
*                                                                     *
* ENTRY POINT -       ENTRY IS TO FIRST EXECUTABLE INSTRUCTION        *
*                     VIA XCTL FROM IGC0006F.                         *
*                                                                     *
* INPUT -             CHANNEL PROGRAM IN CHANNEL PROGRAM AREA         *
*                     REGISTER 1 - ADDRESS OF IOB                     *
*                     REGISTER 4 - XX VALUE                           *
*                                                                     *
* OUTPUT -            TEST MESSAGE IN USER AREA AND COUNT IN WRITE    *
*                     TEXT CCW.                                       *
*                                                                     *
* EXTERNAL ROUTINES - SVC 0, EXECUTE CHANNEL PROGRAM                  *
*                                                                     *
* EXIT              - SVC 3, RETURN                                   *
*                                                                     *
* IN LINE ROUTINES -  1. CONTINUE - SETS UP MESSAGE FOR XX=1, USER    *
*                        DEFINED DATA.                                *
*                                                                     *
*                     2. TRANSASC - MOVE TRANSPARENT ASCII MESSAGE    *
*                        INTO USER AREA AND SET UP COUNT IN CCW.      *
*                                                                     *
*                     3. NORMASC - MOVES NORMAL PRINTABLE ASCII       *
*                        MESSG INTO AREA AND SETS COUNT IN CCW        *
*                                                                     *
*                     4. ALPHAASC - SETS UP ALPHAMERIC ASCII MSG IN   *
*                        AREA AND MOVES COUNT INTO CCW.               *
*                                                                     *
*                     5. PRINTASC - SETS UP ASCII PRINTER MSG AND     *
*                        COUNT IN CCW.                                *
*                                                                     *
*                     6. PUNCHASC - SETS UP ASCII PUNCH MSG AND       *
*                        COUNT IN CCW.                                *
*                                                                     *
*                     7. PRNTTRNS - SETS UP TRANSCODE PRINTER MSG     *
*                        AND COUNT IN CCW.                            *
*                                                                     *
*                     8. PNCHTRNS - SETS UP TRANSCODE PUNCH MSG AND   *
*                        COUNT IN CCW.                                *
*                                                                     *
*                     9. MPTTRNS - SETS UP TRANSCODE MULTIPOINT MSG   *
*                        AND COUNT IN CCW.                            *
*                                                                     *
*                     10. EXCP - STORES CPA IN IOBSTART, CLEARS       *
*                        ERROR COUNTERS, ISSUES SVC 0.                *
*                                                                     *
*                     11. WEAKLEAS - BUILDS TRANSCODE WEAK PATTERN    *
*                        MESSAGE AND COUNT IN CCW.                    *
*                                                                     *
*                     12. WEAKSWIT - BUILDS TRANSCODE WEAK-PATTERN-   *
*                        ON-SWITCHED-LINE MSG AND COUNT IN CCW.       *
*                                                                     *
* ATTRIBUTES - THIS MODULE IS RE-ENTRANT.                             *
*                                                                     *
***********************************************************************
         SPACE 2                                                   000D
IOBREG   EQU   1                        IOB BASE REGISTER          000D
DEBREG    EQU   2
WREG    EQU   2
XREG     EQU   3
TYPEREG  EQU   4                        X REGISTER                 000D
IOREG    EQU   5                       POINTER TO I0O AREA         000D
BASEREG  EQU   6                        MODULE BASE REGISTER       000D
LENGTREG EQU   7                        LENGTH OF MESSAGE REGISTER 000D
TESTREG  EQU   8                        WORK REGISTER              000D
CNTREG   EQU   9                        PARAMETER REG FROM 0006F   000D
DECBREG  EQU   10                      DECB ADDRESSABILITY         000D
DCBREG   EQU   11                       BASE REGISTER FOR DCB      000D
UCBREG   EQU   13
         SPACE 2
         BALR  BASEREG,0                ESTABLISH                  000D
         USING *,BASEREG                  MODULE ADDRESSABILITY    000D
         USING IECTIOB,IOBREG             IOB DSECT ADDRESSABILITY 000D
         USING   IHADCB,DCBREG         DCB DSECT ADDRESSABILITY    0000
         USING  IECTDECB,DECBREG       DECB ADDRESSABILITY         000D
         L     DECBREG,IOBECBPT                                    000D
         L     DCBREG,8(DECBREG)                                   000D
         USING IECTDEB,DEBREG
         L     DEBREG,DCBDEBAD
         L     DEBREG,28(DEBREG)
         SR    UCBREG,UCBREG
         IC    UCBREG,IOBUCBX
         SLL   UCBREG,2
         L     UCBREG,DEBUCBAD(UCBREG)
         LA    WREG,300                                            000D
         CH    WREG,6(DECBREG)         I/O AREA AT LEAST 300 BYTES 000D
         BNH    CONTINUE                                           000D
NOMESSG   EQU   *
         OI    IOBINCAM,X'02'          TURN ON ERROR BIT           000D
         B     STORLENG                GO, START CHANNEL PROGRAM   300D
CONTINUE EQU   *                                                   000D
         L     IOREG,IOBCPA+40          GET TEXT ADDRESS FROM CCWA27602
         LA    IOREG,0(IOREG)                                      000D
         BCT   TYPEREG,ANDOFF           IF X NE 1, GO TO OTHER RTN 000D
         L     CNTREG,DECAREA          ADDRESS OF USER READ IN AREA000D
         LR    WREG,IOREG              GET TEXT ADDRSSS            000D
         SR    WREG,CNTREG             NO. BYTES IN MESSG HEADER   000D
         LH    LENGTREG,DECLNGTH       GET ORIGINAL COUNT          000D
         SH    LENGTREG,IOBCSW+6       SUBTRACT RESIDUAL COUNT     000D
         SR    LENGTREG,WREG           SUBTRACT HEADER             000D
         CLC   0(2,IOREG),DCBBSTSX      IS TRANSPARENT TEXT USED   000D
         BNE   NORMTEXT                 MODIFY CH.PGM FOR NORM.TXT 000D
         BCTR  LENGTREG,0              SUBTRACT ONE FOR ETX        000D
         TM    DCBXMODE,IBCMODE        IS INTRMD. BLOCK CHK USED   000D
         BNO   STORLENG                GO STORE COUNT IN CCW       000D
         BCTR  LENGTREG,0              SUBTRACT ONE FOR IBC CHAR.  000D
         B     STORLENG                 STORE COUNT IN CCW         000D
         SPACE 2                                                   000D
NORMTEXT MVC   IOBCPA+48(8),IOBCPA+56   OVERLAY XPARENT CCW      A27602
         B     STORLENG                STORE COUNT IN CCW          000D
         SPACE 2
ANDOFF   N     TYPEREG,MASK             TURN OFF HI-ORDER BIT      000D
         SLL   TYPEREG,2                MULTIPLY BY FOUR           000D
         B     MESSGSEL(TYPEREG)        BRANCH TO X-MESSG RTN      000D
         SPACE 2                                                   000D
MESSGSEL B     WEAKSWIT                 WEAK TRANSCODE-SWITCHED    000D
         B     WEAKLEAS                 WEAK TRANSCODE-LEASED      000D
         B     TRANSASC                 TRANSPARENT ASCII MESSAGE  000D
         NOP   NORMTEXT                                            000D
         B     NORMASC                  NORMAL ASCII MESSAGE       000D
         B     ALPHAASC                 ALPHAMERIC ASCII MESSAGE   000D
         B     PRINTASC                 PRINTER ASCII MESSAGE      000D
         B     PUNCHASC                 PUNCH ASCII MESSAGE        000D
         B     PRNTTRNS                 PRINTER TRANSCODE MESSAGE  000D
         B     PNCHTRNS                 PUNCH TRANSCODE MESSAGE    000D
         B     MPTTRANS                 MULTI-PT TRANSCODE MESSAGE 000D
TRANSASC MVC   0(2,IOREG),DCBBSTSX      MOVE DLE-STX TO AREA       000D
         LA    LENGTREG,128             GET HIGHEST VALUE IN ASCII 000D
         STC   LENGTREG,2(LENGTREG,IOREG) BUILD TABLE OF ALL VALID 000D
         BCT   LENGTREG,*-4                ASCII REPRESENTATIONS   000D
         STC   LENGTREG,2(IOREG)       STORE ZEROTH DIGIT          000D
         LA    LENGTREG,130             GET LENGTH OF MESSAGE      000D
         B     STORLENG                                            000D
         SPACE 2
NORMASC  MVC   0(121,IOREG),ASCCHARS    MOVE MESSAGE TO I/O AREA   000L
         BAL   3,ADDR                                              000L
         LA    LENGTREG,121             LENGTH OF ASCII NON-DATA-  000L
         B     MOVECCW                    LINK-CONTROL CHARACTERS  000D
         SPACE 2
ALPHAASC MVI   0(IOREG),STX             MOVE STX INTO I/O AREA     000D
         MVC   1(2,IOREG),ASCSYN       MOVE IN SYN CHARACTERS
         BAL   3,ADDR                                              000L
         MVC   3(37,IOREG),ASCII        FOLLOW WITH APLHAMERIC MSG 000L
         B     MOVE38                                              000D
         SPACE 2
PRINTASC MVC   0(3,IOREG),PRINTSEL      PRINTER SELECT SEQUENCE    000D
MOVECHAR MVC   3(37,IOREG),ASCII        ASCII TEXT                 000D
         B     MOVE40                                              000D
         SPACE 2
PUNCHASC MVC   0(3,IOREG),PUNCHSEL      PUNCH SELECT SEQUENCE      000D
         B     MOVECHAR                                            000D
         SPACE 2
PRNTTRNS MVC   0(3,IOREG),TRNSPRNT      MOVE STX & PRINTER ESCAPE  000D
MOVETRNS MVC   3(37,IOREG),TRANSCHR     MOVE IN TRANSCODE CHARS    000D
         B     MOVE40                                              000D
         SPACE 2
PNCHTRNS MVC   0(3,IOREG),TRNSPNCH      MOVE STX & PUNCH ESCAPE    000D
         B     MOVETRNS                                            000D
         SPACE 2
MPTTRANS MVI   0(IOREG),TRANSSTX        MOVE STX INTO I/O AREA     000D
         MVC   1(2,IOREG),TRANSSYN     MOVE IN SYN CHARACTERS
         BAL   3,ADDR                                              000L
         MVC   3(37,IOREG),TRANSCHR     MOVE TRANSCODE CHARACTERS  000L
         B     MOVE38                                              000D
         SPACE 2
MOVE38   LA    LENGTREG,40              GET LENGTH OF MESSAGE      000L
         B     MOVECCW                                             000D
MOVE40   LA    LENGTREG,40              GET LENGTH OF MESSAGE      000D
MOVECCW MVC    IOBCPA+48(8),IOBCPA+56                            A27602
STORLENG STH   LENGTREG,IOBCPA+46                                A27602
EXCP     LA    TESTREG,IOBCPA           GET CH.PGM ADDRESS         000D
         ST    TESTREG,IOBSTART         STORE IN IOB               000D
         XC    IOBUCBX+2(4),IOBUCBX+2   CLEAR COUNTERS             000D
         L     LENGTREG,IOBECBPT       GET DECB ADDRESS            000D
         L     TYPEREG,0(LENGTREG)     SAVE ECB                    000D
         SVC    0                                                  000D
         ST    TYPEREG,0(LENGTREG)     RESTORE ECB                 000D
         SVC   3                       RETURN                      000D
         SPACE 2                                                   000D
WEAKLEAS MVI   0(IOREG),TRANSSTX        MOVE IN TRANSCODE STX      000D
         MVC   1(2,IOREG),TRANSSYN     MOVE IN SYN CHARACTERS
         BAL   3,ADDR                                              000L
         MVI   3(IOREG),NCHAR           MOVE TRANSCODE 'N' CHARS   000L
         MVC   4(39,IOREG),3(IOREG)        ALONG WITH ESCAPE CHARS 000L
         MVI   43(IOREG),ESC               TO FORM WEAK TRANSCODE  000L
         MVC   44(39,IOREG),43(IOREG)      PATTERN ON SWITCHED LNE 000L
MOVEETX  MVI   83(IOREG),ETX           MOVE ETX INTO TEXT AREA     000L
         LA    LENGTREG,84              GET MESSAGE LENGTH         000L
         B     MOVECCW                  GO COMPLETE CH.PGM & EXCP  000D
         SPACE 2
WEAKSWIT MVI   0(IOREG),TRANSSTX        MOVE IN TRANSCODE          000D
         MVC   1(2,IOREG),TRANSSYN     MOVE IN SYN CHARACTERS
         BAL   3,ADDR                                              000L
         MVI   3(IOREG),SOH             WEAK PATTERN ON SWITCHED   000L
         MVC   4(79,IOREG),3(IOREG)       LINE - TRANSCODE         000L
         B     MOVEETX                                             000D
         SPACE 2
ADDR     EQU   *                                                   000L
         TM    17(UCBREG),X'40'         IS THIS MULTIPOINT         000L
         BZ    ADDR0                                               000L
         BR    3                                                   000L
ADDR0    EQU   *                                                   000L
         L     CNTREG,12(DECBREG)       GET ADDR OF I/O AREA       000L
         CLI   6(CNTREG),ZERO           ADDR=0                     000L
         BE    0(3)                                                000L
         CLI   6(CNTREG),ONE            ADDR=1                     000L
         BNE   NOT1                                                000L
         MVC   1(1,IOREG),7(CNTREG)     MOVE ADDR INTO TEXT        000L
         BR    3                        RETURN                     000L
NOT1     EQU   *                                                   000L
         MVC   1(2,IOREG),7(CNTREG)     MOVE ADDR INTO TEXT        000L
         BR    3                        RETURN                     000L
      SPACE   2
ASCCHARS DC    X'021616'                                           000L
         DC    X'000708090A0B0C0D0E0F'
         DC    X'1112131418191A1B1C'
         DC    X'1D1E2021222324252627'
         DC    X'28292A2B2C2D2E2F30313233'
         DC    X'3435363738393A3B3C3D3E3F'
         DC    X'404142434445464748494A4B4C4D4E4F'
         DC    X'505152535455565758595A'
         DC    X'5B5C5D5E5F6061'
         DC    X'62636465666768696A6B'
         DC    X'6C6D6E6F707172737475'
         DC    X'767778797A7B7C7D7E7F'
         DC    X'03'
ASCII    DC    X'4142434445464748494A'
         DC    X'4B4C4D4E4F5051525354'
         DC    X'55565758595A'
         DC    X'30313233343536373839'
         DC    X'03'
PRINTSEL DC    X'021B51'
PUNCHSEL DC    X'021B34'
TRANSCHR DC    X'01020304050607080911'
         DC    X'12131415161718192223'
         DC    X'24252627282930313233'
         DC    X'3435363738392E'
TRNSPRNT DC    X'0A2A21'
TRNSPNCH DC    X'0A2A34'
MASK     DS    0F
         DC    X'0000000F'
ZERO     EQU   X'00'                                               000L
ONE      EQU   X'01'                                               000L
IBCMODE  EQU   X'40'                   BIT FOR IBC MODE            000D
SOH      EQU   X'00'
NCHAR    EQU   X'15'
ESC      EQU   X'2A'
ETX      EQU   X'2E'
STX      EQU   X'02'
TRANSSTX EQU   X'0A'
ASCSYN   DC    X'1616'
TRANSSYN DC    X'3A3A'
         IECTIOBX
         DCBD  DSORG=BX,DEVD=BS
         IECTDECB
         IECTDEBX
         END
