         TITLE 'IGC0606F-2848/2260 TERMINAL TEST MODULE.'
IGC0606F CSECT
         SPACE 2
* STATUS -          CHANGE LEVEL 001    MARCH 18,1968
* STATUS -          CHANGE LEVEL 000    JANUARY 14, 1967
         SPACE 2
*
* FUNCTION -        COMPLETE CHANNEL PROGRAM FOR 2848 ON LINE TESTS
*
*
* ENTRY POINT -     ENTRY IS TO FIRST INSTRUCTION FROM IGC0509I
*
*
* INPUT -           REGISTER  3 - ADDRESS OF A PARAMETER LIST
*                   REGISTER  5 - ADDRESS OF THE IOB
*                   REGISTER  7 - ADDRESS OF THE INPUT AREA
*                   REGISTER 10 - ADDRESS OF THE CCW AREA IN THE IOB
*                   REGISTER 12 - ADDRESS OF THE DECB
*                   REGISTER 14 - RETURN ADDRESS
*
*
* OUTPUT -          COMPLETED CHANNEL PROGRAM
*
*
* EXTERNAL ROUTINES-NONE
*
*
* EXIT -            RETURN TO ADDRESS IN REGISTER 14
*
*
* INLINE ROUTINES - THE INPUT MESSAGE IS ANALYZED FOR TYPE OF REQUEST.
*                   THE DATA CCW IS COMPLETED AND DATA MOVED TO THE
*                   INPUT AREA IF REQUIRED.
*                   SUBROUTINES--
*                        A.  CONVERT TWO ASCII DIGITS TO BINARY.
*                        B.  FIND THE LENGTH OF A BUFFER.
*                        C.  CONVERT AN ASCII ADDRESSING CHAR TO BINARY
*
*
* ATTRIBUTES -      THIS ROUTINE IS EXECUTED IN THE SVC TRANSIENT AREA
*                   AS A TYPE 4 SVC ROUTINE, ENABLED, PRIVILEGED AND
*                   REENTRANT.
         EJECT
         SPACE 2
         EJECT
         BALR  BASEREG,0
         USING *,BASEREG
         USING  IECTIOB,IOBREG                                     000D
         LR    IOBREG,1                GET IOB ADDRESS             000D
         L     IOREG,IOBAREA           GET READ-IN AREA ADDR       000D
         L     PARREG,IOBPARM          LOAD PARAMETER LIST ADDR    000D
         L     DECBREG,IOBECBPT        GET DECB ADDRESS            000D
         LA    CCWREG,56(IOBREG)       ADDRESS OF CCW AREA         000D
*
         CLI   6(IOREG),X'A4'          BRANCH IF
         BE    MSGSWTCH                         COMPARE VALID MESSAGE
         CLI   6(IOREG),X'58'           BRANCH IF
         BE    WRATLINE                      WRITE AT LINE ADDRESS TEST
         BH    REQADDR                  BRANCH IF REQUEST ADDRESS
*
MSGSWTCH EQU   *
         MVI   8(DECBREG),X'00'
         L     IOREG,IOBAREA            ADDRESS OF DATA TO BE SWTCHD
         BCTR  IOREG,0                  REDUCE ADDRESS FOR STX
         MVI   0(IOREG),X'02'           PUT IN STX
         ST    IOREG,16(CCWREG)         PUT ADDRESS IN CCW
         MVI   16(CCWREG),X'01'         RESTORE OP CODE
         BAL   LINKREG,GETCOUNT
         STC   WORKREG,23(CCWREG)       IN CASE NO END FOUND
         CLC   7(2,IOREG),=X'5058'      CHECK FOR WRITE AT LINE REQUEST
         BE    *+6
         BCTR  WORKREG,0                BYPASS FIRST CHARACTER
         CLI   0(IOREG),X'03'           LOOK FOR ETX
         BE    FOUNDIT
         LA    IOREG,1(IOREG)           UP CORE POINTER
         BCT   WORKREG,*-12             LOOP ON COUNT
         BCTR  IOREG,0                  ADJUST TO POINT TO LAST POS.
         MVI   0(IOREG),X'03'           PUT IN ETX AT LAST POSITION
         BR    RETURN
*
FOUNDIT S     IOREG,IOBAREA            COMPUTE NO. CHARACTERS      000D
         LA    IOREG,2(IOREG)           UP COUNT TO INCLUDE STX AND ETX
         STC   IOREG,23(CCWREG)         PUT IN CCW
         BR    RETURN
*
WRATLINE EQU   *
         L     IOREG,IOBAREA           GET INPUT AREA ADDR         000D
         BCTR  IOREG,0                  ALLOW FOR ADDRESS CHARACTER
         ST    IOREG,IOBAREA           NEEDED LATER                000D
         BAL   LINKREG,ASCIIBIN         CONVERT LINE ADDRESS TO BINARY
         IC    WORKREG,13(IOREG)        TENS
         IC    WORKREG2,14(IOREG)       UNITS
         LA    WORKREG,79(WORKREG)      CONVERT TO ASCII CHARACTER
         STC   WORKREG,0(IOREG)         PUT AT BEGINNING OF MESSAGE
         B     MSGSWTCH
*
REQADDR  EQU   *
         BCTR  IOREG,0                  REDUCE INPUT AREA POINTER
         L     WORKREG,36(DECBREG)     GET ADDRESS OF POLLING CHAR.
         MVC   35(1,IOBREG),0(WORKREG)  PUT DC ADDRESS IN IOB
         MVC   36(1,IOBREG),0(IOREG)    PUT DS ADDRESS IN IOB
         MVC   1(11,IOREG),DEVMSG       PUT MESSAGE IN INPUT AREA
         LA    WORKREG,35(IOBREG)       ADDRESS OF DC IN ASCII
         BAL   LINKREG,CONVERT          CONVERT TO BINARY
         LA    WORKREG,X'50'            INITIALIZE WORK REGISTER
         SH    WORKREG2,=H'10'          CONVERT
         BM    *+12                      BINARY
         LA    WORKREG,1(WORKREG)         TO
         B     *-12                        DECIMAL
         STC   WORKREG,7(IOREG)         PUT TENS IN MESSAGE
         LA    WORKREG2,90(WORKREG2)
         STC   WORKREG2,8(IOREG)        PUT UNITS IN MESSAGE
         LA    WORKREG,36(IOBREG)       ADDRESS OF DS IN ASCII
         CLI   36(IOBREG),X'A0'         DS ADDRESS LESS THAN A0  A27620
         BNL   NOT2265                  NO, 2845                 A27620
         MVC   9(1,IOREG),36(IOBREG)    SAVE DS ADDRESS          A27620
         NI    9(IOREG),X'F0'           REMOVE DS ADDR NUMERICS  A27620
         CLI   9(IOREG),X'50'           IS DS ADDRESS 5X         A27620
         BE    DSPLY65                  YES, SET MESSAGE         A27620
         CLI   9(IOREG),X'40'           IS DS ADDRESS 4X         A27620
         BNE   RESTART                  NO, INVALID              A27620
         MVC   9(2,IOREG),X5257         MESSAGE FOR 2845/1053    A27620
         B     MSGSWTCH                 GO TO MESSAGE SWITCH     A27620
DSPLY65  MVC   9(2,IOREG),X5256         MESSAGE FOR 2845/2265    A27620
         B     MSGSWTCH                 GO TO MESSAGE SWITCH     A27620
NOT2265  BAL   LINKREG,CONVERT          CONVERT TO BINARY        A27620
         MVI   9(IOREG),X'51'           STORE TENS ONE IN ASCII
         CH    WORKREG2,=H'33'
         BL    RESTART                  LESS THAN 33 IS NOT VALID
         CH    WORKREG2,=H'57'
         BH    RESTART                  OVER 57 IS NOT VALID
         SH    WORKREG2,=H'42'
         BC    10,*+12                  PLUS OR ZERO--10 TO 12
         LA    WORKREG2,10(WORKREG2)    CORRECT RESULTING UNITS
         MVI   9(IOREG),X'50'           STORE TENS ZERO IN ASCII
         STC   WORKREG2,10(IOREG)       STORE UNITS
         OI    10(IOREG),X'50'          ADD ASCII ZONE
         B     MSGSWTCH                 SWITCH THIS MESSAGE
*
*
*  CONVERT AN ASCII ADDRESSING CHARACTER TO BINARY
*
CONVERT  EQU   *
         SR    WORKREG2,WORKREG2        CLEAR SECOND WORKING REGISTER
         IC    WORKREG2,0(WORKREG)      GET CHARACTER TO BE CONVERTED
         CLI   0(WORKREG),X'40'         LESS THAN 40 IS INVALID
         BL    RESTART
         CLI   0(WORKREG),X'60'         40 TO 5F IS EQUIVALENT TO 1-32
         BL    SUB3F
         CLI   0(WORKREG),X'A0'         60 TO 9F IS INVALID
         BL    RESTART
         CLI   0(WORKREG),X'C0'         A0 TO BF IS EQUIVALENT TO 33-64
         BL    SUB40
         CLI   0(WORKREG),X'E0'         C0 TO DF IS INVALID
         BL    RESTART
         SH    WORKREG2,=H'32'          E0 TO FF IS EQUIVALENT TO 65-96
SUB40    SH    WORKREG2,=H'64'
SUB3F    SH    WORKREG2,=H'63'
         BR    LINKREG                  RETURN
*
*
*  CONVERT TWO ASCII DIGITS TO A BINARY NUMBER  ENTRY IS--
*
*        BAL   LINKREG,ASCIIBIN
*        IC    WORKREG,TENSCHAR         RESULT IS RETURNED IN WORKREG
*        IC    WORKREG2,UNITCHAR
*
*
ASCIIBIN EQU   *
         SR    WORKREG,WORKREG          CLEAR WORKING REGISTERS
         SR    WORKREG2,WORKREG2
         EX    0,0(LINKREG)             GET TENS CHARACTER
         N     WORKREG,=F'15'           DROP ZONE BITS
         MH    WORKREG,=H'10'           CONVERT TO TENS FACTOR
         EX    0,4(LINKREG)             GET UNITS CHARACTER
         N     WORKREG2,=F'15'          DROP ZONE BITS
         AR    WORKREG,WORKREG2         DEVELOP FINAL RESULT
         B     8(LINKREG)               RETURN
*
RESTART  EQU   *                                                   000D
         NI    IOBINCAM,NOTEST         SET NOTEST SWITCH           000D
         BR    RETURN                                              000D
         BR    RETURN
*
*
*  GET COUNT OF CHARACTERS IN A BUFFER
*
GETCOUNT EQU   *
         LH    WORKREG,6(DECBREG)       USED IF NOT DYNAMIC BUFFERING
         TM    32(DCBREG),X'08'         TEST IF DYNAMIC BUFFERING USED
         BZ    *+12
         LH    WORKREG,24(DCBREG)       USED WITH DYNAMIC BUFFERING
         SH    WORKREG,=H'4'            BYPASS TIC
         BR    LINKREG
*
DEVMSG   DC    X'A4A34BA4B6404040404003'     DEVICE ADDRESS MESSAGE
X5257    DC    X'5257'
X5256    DC    X'5256'
*
*  EQUATES
*
LINKREG  EQU   2
PARREG   EQU   3
IOBREG   EQU   5
BASEREG  EQU   6
IOREG    EQU   7
WORKREG  EQU   8
WORKREG2 EQU   9
CCWREG   EQU   10
DCBREG   EQU   11
DECBREG  EQU   12
RETURN   EQU   14
NOTEST   EQU   X'FE'                                               000D
         IECTIOBX                                                  000D
IOBAREA  EQU   IOBERCCW+8                                          000D
IOBPARM  EQU   IOBERCCW+12                                         000D
         END
