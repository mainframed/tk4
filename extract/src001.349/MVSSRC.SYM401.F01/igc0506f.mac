         TITLE 'IGC0506F-2848/2260 TERMINAL TEST MODULE.'
IGC0506F CSECT
         SPACE 2
* STATUS -          CHANGE LEVEL 001    MARCH 18,1968
         SPACE 2
*
* FUNCTION -        GENERATE CHANNEL PROGRAM FOR 2848 ON LINE TESTS
*
*
* ENTRY POINT -     ENTRY IS TO FIRST INSTRUCTION FROM HEADER ANALYSIS
*                   MODULE
*
*
* INPUT -           REGISTER 1 - ADDRESS OF IOB
*                   REGISTER 14 - RETURN ADDRESS
*
*
* OUTPUT -          1.  GENERATED CHANNEL PROGRAM (COMPLETE IF REQUEST
*                       IS FOR A PATTERN)
*                   2.  UPDATED USAGE COUNT AND POINTER IN TERMINAL
*                       TEST CONTROL MODULE (IGG019MR)
*
*
* EXTERNAL ROUTINE -SVC 4 ROUTINE (GETMAIN)
*                   SVC 7 ROUTINE (TRANSFER CONTROL)
*
*
* EXIT -            RETURN TO ADDRESS IN REGISTER 14 IF REQUEST IS FOR
*                   A PATTERN OR TRANSFER CONTROL TO 'IGC0606F'
*
*
* INLINE ROUTINES -THE INPUT MESSAGE IS LOCATED THROUGH THE PARAMETER
*                   LIST AND IS ANALYZED FOR TYPE OF REQUEST.  CCW'S
*                   FOR THE PROPER DATA AND CONTROL PURPOSES ARE FORMED
*                   IN THE CCW AREA OF THE IOB.  IF THE REQUESTED DATA
*                   PATTERN IS NOT IN USE, CORE WILL BE OBTAINED AND
*                   THE PATTERN MOVED INTO THE NEW AREA.  IF NO CORE IS
*                   AVAILABLE, THE TEST REQUEST WILL BE SWITCHED TO THE
*                   TERMINAL SPECIFIED IN THE TEST REQUEST.
*                   SUB-ROUTINES--
*
*                        A.  CONVERT TWO ASCII DIGITS TO BINARY.
*                        B.  FIND THE LENGTH OF A BUFFER.
*
*
* ATTRIBUTES -      THIS ROUTINE IS EXECUTED IN THE SVC TRANSIENT AREA
*                   AS A TYPE 4 SVC ROUTINE, ENABLED,PRIVILEGED AND
*                   REENTRANT.
*
         EJECT
         SPACE 2
         EJECT
*
*
         BALR  BASEREG,0
         USING *,BASEREG
         USING PARMLIST,PARREG
         USING IECTIOB,IOBREG
         USING IECTDECB,DECBREG
*
         LR    IOBREG,1                 LOAD IOB ADDRESS
         L     PARREG,IOBPARM           LOAD PARAMETER LIST ADDRESS
         L     DECBREG,IOBECBPT         ADDRESS OF DECB
         L     DCBREG,DECDCBAD          ADDRESS OF DCB
         LA    CCWREG,56(IOBREG)       ADDRESS OF CCW AREA         000D
         ST    CCWREG,16(IOBREG)        PUT IN IOB POINTER
         MVC   0(32,CCWREG),CHANPROG    MOVE CCW'S INTO CCW AREA
         L     IOREG,IOBAREA            LOAD I/O AREA ADDRESS
         CLI   6(IOREG),X'59'           TEST FOR REQUESTED ADDRESS
         BE    REQADDRX
*
         BAL   LINKREG,ASCIIBIN         CONVERT DC ADDRESS TO BINARY
         IC    WORKREG,8(IOREG)         TENS
         IC    WORKREG2,9(IOREG)        UNITS
         BZ    RESTART                  ZERO RESULT IS NOT VALID
         CH    WORKREG,H33+2            TEST FOR 1-32
         BL    ADD3F
         CH    WORKREG,H65+2            TEST FOR 33-64
         BL    ADD40
         LA    WORKREG,32(WORKREG)      ADDRESS IS 65-96
ADD40    LA    WORKREG,64(WORKREG)      ADDRESS IS 33 OR MORE
ADD3F    LA    WORKREG,63(WORKREG)
         STC   WORKREG,35(IOBREG)       PUT DC ADDRESS IN IOB
         BAL   LINKREG,ASCIIBIN         CONVERT DEVICE ADDRESS
H10      IC    WORKREG,10(IOREG)        TENS
         IC    WORKREG2,11(IOREG)       UNITS
         BZ    RESTART                  ZERO RESULT IS NOT VALID
         CH    WORKREG,H26              IS DS ADDRESS 26 OR MORE A27620
         BL    NOT2265                  NO, DEVICE IS 2260       A27620
         CLI   35(IOBREG),X'50'         IS DC ADDRESS VALID      A27620
         BNL   RESTART                  NO, RESTART              A27620
         IC    WORKREG2,35(IOBREG)      GET DC ADDRESS           A27620
         CH    WORKREG,H27              COMPARE DS ADDRESS TO 27 A27620
         BH    RESTART                  MORE THAN 27, INVALID    A27620
         BE    PRNTR                    EQUAL TO 27, 2845/1053   A27620
         LA    WORKREG2,16(WORKREG2)    DS ADDRESS 26, 2845/2265 A27620
PRNTR    STC   WORKREG2,36(IOBREG)      STORE DS ADDRESS         A27620
         B     REQADDRX                                          A27620
NOT2265  LA    WORKREG,159(WORKREG)     DEVELOP ADDRESS RESULT   A27620
         STC   WORKREG,36(IOBREG)       PUT DEVICE ADDRESS IN IOB
REQADDRX MVI   33(IOBREG),X'02'         PUT STX IN IOB
         MVI   34(IOBREG),X'04'         PUT EOT IN IOB
         MVI   37(IOBREG),X'A0'         PUT THE OP CODE IN IOB
         CLI   6(IOREG),X'58'           CHECK FOR TYPE 8 REQUEST
         BNE   *+8                      BRANCH IF NOT
         MVI   37(IOBREG),X'B0'         PUT IN OP FOR TYPE 8 REQUEST
H33      LA    WORKREG,33(IOBREG)       ADDRESS OF STX, ETC.
         ST    WORKREG,0(CCWREG)        PUT IN CCW
         MVI   0(CCWREG),X'01'          RESTORE OP CODE
*
         LA    WORKREG,26(DECBREG)      ADDRESS FOR ADDRESSING RESPONSE
         ST    WORKREG,8(CCWREG)        PUT IN CCW
         MVI   8(CCWREG),X'02'          RESTORE OP CODE
*
         LA    WORKREG,27(DECBREG)      ADDRESS FOR LRC RESPONSE
         ST    WORKREG,24(CCWREG)       PUT IN CCW
         MVI   24(CCWREG),X'02'         RESTORE OP CODE
         CLI   6(IOREG),X'51'           BRANCH IF
         BE    MSGSWTCH                           MESSAGE SWITCH
         CLI   6(IOREG),X'55'           BRANCH IF
         BE    COMPARE                            COMPARE TEST
         CLI   6(IOREG),X'58'           BRANCH IF
         BE    WRATLINE                      WRITE AT LINE ADDRESS TEST
         BH    REQADDR    09            BRANCH IF REQUEST ADDRESS
         SR    TESTREG,TESTREG          CLEAR TEST REGISTER
         IC    TESTREG,6(IOREG)         INSERT TEST SELECT CHARACTER
         IC    TESTREG,TESTCODE-82(TESTREG)   SET UP INDEXING
         L     WORKREG2,0(PARREG)       ADDRESS OF PATTERN NAME TABLE
         LA    WORKREG,0(TESTREG,WORKREG2)
         CLI   0(WORKREG),X'00'         BRANCH IF THIS PATTERN
         BE    NOTINUSE                                   IS NOT IN USE
         IC    WORKREG,0(TESTREG,WORKREG2)   1-UP
         LA    WORKREG,1(WORKREG)             USAGE
         STC   WORKREG,0(TESTREG,WORKREG2)     COUNT
SETDATA  EQU   *
         L     WORKREG,0(TESTREG,WORKREG2)
         IC    WORKREG2,0(WORKREG)      LENGTH OF DATA
         BCTR  WORKREG2,0               REDUCE BY ONE
         STC   WORKREG2,23(CCWREG)      PUT IN CCW
         STC   TESTREG,8(DECBREG)       STORE DISPLACEMENT FOR LATER
         LA    WORKREG,1(WORKREG)       ADDRESS OF DATA TO BE SENT
         ST    WORKREG,16(CCWREG)       PUT IN CCW
         MVI   16(CCWREG),X'01'         RESTORE OP CODE
         BR    RETURN                   EXIT
*
NOTINUSE EQU   *
         L     GETMAIN,0(WORKREG2)      ADDRESS OF GETMAIN CONSTANTS
         EX    0,DATAADDR-X'40'(TESTREG)     ADDRESS OF TEST DATA
         LA    TOREG,0(TESTREG,WORKREG2)     ADDRESS OF THE TABLE ENTRY
         ST    TOREG,4(GETMAIN)
         SR    COUNTREG,COUNTREG        CLEAR A REGISTER FOR COUNT
         IC    COUNTREG,0(WORKREG)      CHARACTER COUNT OF DATA
         ST    COUNTREG,0(GETMAIN)     PUT IN GETMAIN CONSTANTS
         SVC   4                        ISSUE GETMAIN SVC
         SLL   15,24                    ELIMINATE HIGH ORDER BITS
         NR    15,15                    TEST FOR ZERO RETURN CODE
         BNE   MSGSWTCH                 NON-ZERO IS NO CORE AVAILABLE
         MVI   0(TOREG),X'01'           SET USAGE COUNT TO ONE
         L     TOREG,0(TOREG)           GET ADDRESS OF DATA AREA
         BCTR  COUNTREG,0               ADJUST COUNT FOR MVC INST
         EX    COUNTREG,EXMVC           MOVE THE DATA
         B     SETDATA                  FINISH THE DATA CCW
*
RESTART  EQU   *
         NI    IOBINCAM,NOTEST          SET NOTEST SWITCH
         BR    RETURN
*
COMPARE  EQU   *
         BAL   LINKREG,GETCOUNT         GET LENGTH OF BUFFER
         LR    COUNTREG,WORKREG
         SH    COUNTREG,H14             BYPASS HEADER
         LA    IOREG,12(IOREG)          ADDRESS OF CHARACTERS IN INPUT
         LA    WORKREG,ALLCHAR+3        ADDRESS OF COMPARE DATA
CHECKETX CLI   0(IOREG),X'03'           CHECK FOR ETX
         BE    COMPDONE
         CLI   0(WORKREG),X'0A'         CHECK IF PAST END OF DATA
         BE    MSGSWTCH                 IF YES, SWITCH THE MESSAGE
         CLC   0(1,IOREG),0(WORKREG)    IS THIS CHARACTER EQUAL
         BNE   MSGSWTCH                 IF NOT, SWITCH THE MESSAGE
         LA    IOREG,1(IOREG)           UP POINTERS
         LA    WORKREG,1(WORKREG)
         BCT   COUNTREG,CHECKETX        LOOP ON COUNT
*
COMPDONE EQU   *
         BCTR  IOREG,0                  BACK INPUT POINTER TO LAST CHAR
         L     WORKREG,IOBAREA          START ADDRESS              000D
         MVC   0(10,WORKREG),VALIDCMP   MOVE IN VALID COMPARE MESSAGE
         IC    WORKREG2,0(IOREG)        LAST CHARACTER COMPARED
         LA    WORKREG,11(WORKREG)      COMPUTE DISPLACEMENT OF LAST
         SR    WORKREG,IOREG             CHARACTER DISPLAYED
         BZ    MSGSWTCH                 ZERO--NO CHARACTERS
         L     WORKREG,IOBAREA                                     000D
         STC   WORKREG2,8(WORKREG)      PUT LAST CHAR COMPARED IN MSG.
         B     MSGSWTCH
*
MSGSWTCH EQU   *
WRATLINE EQU   *
REQADDR  EQU   *
         IC    PARREG,=X'F6'           GET NEXT MODULE ID          000D
         STC   PARREG,IOBERCCW+4       STORE IN MODULE NAME        000D
         LA    PARREG,IOBERCCW         GET ADDR OF MODULE NAME     000D
         XCTL  EPLOC=(3)               LINK TO NEXT LOAD
*
*  CONVERT TWO ASCII DIGITS TO A BINARY NUMBER  ENTRY IS--
*
*        BAL   LINKREG,ASCIIBIN
*        IC    WORKREG,TENSCHAR         RESULT IS RETURNED IN WORKREG
*        IC    WORKREG2,UNITCHAR
ASCIIBIN EQU   *
         SR    WORKREG,WORKREG          CLEAR WORKING REGISTERS
         SR    WORKREG2,WORKREG2
         EX    0,0(LINKREG)             GET TENS CHARACTER
         N     WORKREG,F15              DROP ZONE BITS
         MH    WORKREG,H10+2            CONVERT TO TENS FACTOR
         EX    0,4(LINKREG)             GET UNITS CHARACTER
         N     WORKREG2,F15             DROP ZONE BITS
         AR    WORKREG,WORKREG2         DEVELOP FINAL RESULT
         B     8(LINKREG)               RETURN
*
*  GET COUNT OF CHARACTERS IN A BUFFER
*
GETCOUNT EQU   *
         LH    WORKREG,6(DECBREG)       USED IF NOT DYNAMIC BUFFERING
         TM    32(DCBREG),X'08'         TEST IF DYNAMIC BUFFERING USED
         BZ    *+12
         LH    WORKREG,24(DCBREG)       USED WITH DYNAMIC BUFFERING
         SH    WORKREG,H4+2             BYPASS TIC
         BR    LINKREG
*
*
*  PATTERNS OF DATA FOR 2848 TESTS
*
TILT     DC    AL1(TILTEND-TILT)
         DC    X'020AA1BFA3B4A5B6A7B8A8B9455FA2B3A4B5A6B7A9BA5A48AA5C'
         DC    X'AC0A49AE4AB047B1FE5EBDABFCAD5BAF42B25D0A03'
TILTEND  EQU   *
*
ROTATE   DC    AL1(ROTATEND-ROTATE)
         DC    X'020AA1A9A5A4A8A2AAB2AEADB1ABBFBAB6B5B9B3484249FC47BD'
         DC    X'5159550A54585243535657505D5C5B4AFE5AB4B7B85FACAFB05E'
         DC    X'A3A6A7450A03'
ROTATEND EQU   *
*
TWIST    DC    AL1(TWISTEND-TWIST)
         DC    X'020AA143BF44A359B4A9A556B6A6A754B8A4A852B9A24550B346'
         DC    X'A457A6B8B755A9B6BA0A534351485DB253AF5C42AD55AB495B5E'
         DC    X'58B1FCB050AEBDAC52AAFE54AE56B1590A03'
TWISTEND EQU   *
*
ALLCHAR  DC    AL1(ALLCHARX-ALLCHAR)
         DC    X'020A50515253545556575859A1A2A3A4A5A6A7A8A9AAABACADAE'
         DC    X'AFB0B1B2B3B4B5B6B7B8B9BA0A03'
ALLCHARX EQU   *
*
*  CCW'S
*
F15      CCW   X'00',15,X'60',5         STX, EOT, ADDRESS, OPERATION
         CCW   X'02',0,X'60',1          READ ADDRESSING RESPONSE
H65      CCW   X'01',65,X'60',42        WRITE THE TEST MESSAGE
         CCW   X'02',0,X'20',1          READ THE LRC RESPONSE
*
*  ADDRESSES OF DATA TO BE MOVED TO PATTERN BUFFER
*
DATAADDR EQU   *
         LA    FROMREG,TILT
         LA    FROMREG,ROTATE
         LA    FROMREG,TWIST
         LA    FROMREG,ALLCHAR
*
*  CONSTANTS
*
TESTCODE DC    X'404448004C'
EXMVC    MVC   0(1,TOREG),0(FROMREG)
VALIDCMP DC    X'A3ADB040B6ACA44D4F03'  VALID COMPARE MESSAGE
H4       DC    H'4'
H14      DC    H'14'
H26      DC    H'26'
H27      DC    H'27'
*
*  EQUATES
*
GETMAIN  EQU   1
LINKREG  EQU   2
TOREG    EQU   2
PARREG   EQU   3
TESTREG  EQU   4
MULTEVEN EQU   4
MULTODD  EQU   5
IOBREG   EQU   5
BASEREG  EQU   6
IOREG    EQU   7
FROMREG  EQU   8
WORKREG  EQU   8
WORKREG2 EQU   9
CCWREG   EQU   10
DCBREG   EQU   11
DECBREG  EQU   12
COUNTREG EQU   13
RETURN   EQU   14
CHANPROG EQU   F15
NOTEST   EQU   X'FE'
         SPACE 2
         IECTIOBX
IOBNAME  EQU   IOBERCCW
IOBAREA  EQU   IOBNAME+8
IOBPARM  EQU   IOBNAME+12
         EJECT
         IECTDECB
         EJECT
PARMLIST DSECT
PATTERN  DS    F
NLIDLES  DS    F
         END
