 TITLE 'HEWLFREL - SECOND PASS RELOCATION'
***********************************************************************
*STATUS: CHANGE LEVEL 0                                               *
*FUNCTION/OPERATION:                                                  *
*        1) RELOCATION                                                *
*        2) CREATION OF ENTAB AND ITS RLDS                            *
*        3) SECOND PASS INITIALIZATION                                *
*ENTRY POINTS:                                                        *
*        HEWLFREL- FOR SECOND PASS INITIALIZATION                     *
*        RELOCATE- FOR RELOCATION                                     *
*        SCDENTAB- FOR CREATION OF ENTAB AND ITS RLDS                 *
*                                                                     *
*INPUT: - SAME TABLES AS HEWLFSCD                                     *
*                                                                     *
*OUTPUT: ENTAB TEXT AND ENTAB RLD RECORDS. THE SIZE OF THE ENTAB IS   *
*              LIMITED ONLY  BY THE MAXIMUM RECORD SIZE ON SYSLMOD    *
*                                                                     *
*EXTERNAL ROUTINES:                                                   *
*        GETIDMUL- TO GET NEXT TEXT TO PROCESS                        *
*        WRTTXT- TO WRITE A TEXT RECORD                               *
*        WRTCRRLD- TO WRITE A CR/RLD RECORD                           *
*        CHECKRD - TO CHECK A READ                                    *
*        CHECKWRT- TO CHECK A WRITE                                   *
*EXITS: NORMAL-RETURN VIA REGISTER 14 TO CALLER                       *
*       ERROR ---  ENTRY LIST EXCEEDED      L  15,ERDIG               *
*                                           L  0,ERCODE44             *
*                                           BR 15                     *
*TABLES/WORK AREAS: - REFER TO LINKAGE EDITOR PLM FOR DETAILED        *
*        DESCRIPTIONS                                                 *
*        1) ALL PURPOSE TABLE                                         *
*        2) HESD                                                      *
*        3) DELINK TABLE                                              *
*        4) RELOCATION CONSTANT TABLE                                 *
*        5) RLD NOTELIST                                              *
*        6) TEXT CONTROL BLOCKS(SEE LABELS TXTCB1 AND TXTCB2)         *
*        7) RLD CONTROL BLOCKS(SEE LABELS INRLDCB1,INRLDCB2,OTRLDCB1, *
*              OTRLDCB2, AND OTRLDCB3)                                *
*        8) SEGTAB1                                                   *
*                                                                     *
*ATTRIBUTES:  REUSABLE                                                *
*NOTES:  NONE                                                         *
*                                                                     *
***********************************************************************
*                                                                     *
*   THE PROLOGUE FOR THIS ROUTINE IS INCORPORATED IN THE PROLOGUE     *
*                   FOR HEWLFSCD                                      *
*                                                                     *
HEWLFREL CSECT
*420400-422000,424400,426800-427600,430000,430800                S01904
*I478000-478784                                         OX05443,OY04003
*D624400-626000,A628400,D634000-642000,I657800-679999   OX05440,OY04132
*I682800                                                        XM09129
*SEE FIX FOR XM09129                                            XA07157
*A255600-257000  ADCONS OVER 8 MEG HAVE FF IN HIGH ORDER       @ZA08247
*
***********************************************************************
*                       FLAG INDICATORS                               *
***********************************************************************
ABSOLUTE EQU   X'1F'                   TO MARK RLD ABSOLUTE
*                                                                     *
*                   NEWSW2 INDICATORS IN APT                          *
MORERLDS EQU   X'80'                    MORE RLDS STILL TO BE READ
SPLTMOVD EQU   X'40'                    SPLIT RLD MOVED TO OUTPUT BFR.
MOVDOFF  EQU   X'BF'
RPSAVED  EQU   X'20'                    R+P SAVED FROM PREV. RECORD.
RPSAVOFF EQU   X'DF'
ABS      EQU   X'10'                   ABSOLUTE RELOCATION NEEDED
REL      EQU   X'EF'                   RELATIVE RELOCATION NEEDED
SPLITRLD EQU   X'08'                    SPLIT RLD SAVED IN HESD
GROUPRLD EQU   X'02'                   USE SAME BUFFER--GROUP RLDS
GROUPOFF EQU   X'FD'                   RLDS ARE NOT TO BE GROUPED
RPINBFR  EQU   X'01'                    R+P ALREADY MOVE TO BUFFER
NOTINBFR EQU   X'FE'
*                                                                     *
*                  CONTROL RECORD INDICATORS                          *
*                                                                     *
TXT      EQU   X'01'                    TEXT FOLLOWS
RLD      EQU   X'02'                    RLDS PRESENT
RLDOFF   EQU   X'FD'
SEGEND   EQU   X'04'                    LAST TEXT FOR SEGMENT
MODEND   EQU   X'08'                    LAST TEXT FOR MODULE
*   TEXT CONTROL BLOCK INDICATORS                                     *
*                              BYTE 1                                 *
INUSE    EQU   X'80'                    CONTROL BLOCK IN USE
BEINGWT  EQU   X'40'                    TEXT BEING WRITTEN
WRTCKD   EQU   X'3F'
BEINGRD  EQU   X'20'                    TEXT BEING READ
RDCKD    EQU   X'DF'                    READ IS CHECKED
FIRSTXT  EQU   X'08'                    FIRST TEXT OF GROUP
LASTXT   EQU   X'04'                    LAST TEXT OF GROUP
TESTWRT  EQU   X'C0'                    TEST IF TEXT WRITTEN YET
*                              BYTE2                                  *
XDAP     EQU   X'80'                    XDAP WRITE NEEDED
DUMMY    EQU   X'40'                    DUMMY WRITE NEEDED
PREV     EQU   X'07'                    TEST FOR PREVIOUS CONTROL REC.
*                              BYTE3
RLDSIN1  EQU   X'C0'                    TEST FOR UNPROCESSED RLDS-BFR1
RLDSIN2  EQU   X'30'                    TEST FOR UNPROCESSED RLDS-BFR2
BUF1PROC EQU   X'40'                    RLDS IN BUFFER 1 PROCESSED
BUF1OFF  EQU   X'3F'
BUF2PROC EQU   X'10'                    RLDS IN BUFFER 2 PROCESSED
BUF2OFF  EQU   X'CF'
*    RLD INPUT CONTROL BLOCK INDICATORS                               *
*INUSE    EQU  X'80'                    CONTROL BLOCK IN USE
*NOTINUSE EQU  X'7F'
*   RLD  NOTELIST INDICATORS
PROCESSD EQU   X'20'                   RLDS ALL PROCESSED IN SET
BUF2     EQU   X'10'                   RLDS IN BFR. 2
SPLT     EQU   X'08'                    RLD SET HAS A SPLIT RLD
SPLTOFF  EQU   X'F7'
JUSTPROC EQU   X'04'                    RLD SET CONTAINS RELOCATED RLDS
*                                            TO MOVE
JUSTOFF  EQU   X'FB'
*       RLD OUTPUT CONTROL BLOCK INDICATORS                           *
*INUSE   EQU   X'80'                    CONTROL BLOCK IN USE
NOTINUSE EQU   X'7F'
*BEINGWT EQU   X'40'                    CONTROL BLOCK BEING WRITTEN
*WRTCKD  EQU   X'3F'                    TURN OFF BEING WRITTEN+IN USE
*      RLD ITEM INDICATORS
UNRESER  EQU   X'80'                    UNRESOLVED EXTERNAL REFERENCE
*                                            INDICATOR IN RLD
PROC     EQU   X'40'                    RLD HAS BEEN PROCESSED
PROCOFF  EQU   X'BF'                    PROCESSED BIT OFF
CONT     EQU   X'01'                    NEXT FA FIELD IS CHAINED
CONTOFF  EQU   X'FE'
RELREL   EQU   X'7F'                   TURN OFF RELATIVE INDICATOR
*                                                                     *
*                   APT3 INDICATORS                                   *
*                                                                     *
SEGSTART EQU   X'04'                   TEXT IS FIRST IN SEGMENT
*                                                                     *
*                  REGISTER  USAGE                                    *
*                                                                     *
SAVEAREA EQU   13                      SAVE AREA REGISTER
RETURN   EQU   14                       RETURN REGISTER
BRANCH   EQU   15                      BASE REGISTER IN HEWLFREL
WORK0    EQU   0                        GENERAL WORK REGISTER
WORK1    EQU   1                        PARM REG.AND GENERAL WORK REG.
APT      EQU   2                        BASE REG FOR APT
CURTXTCB EQU   3                       ADDRESS OF CURRENT TEXT CTRL BLK
WORK4    EQU   4                        GENERAL WORK REGISTER
HESDADDR EQU   5                        HESD ENTRY ADDR.-USED IN RELOC.
OUTRLDCB EQU   5                        ADDR.OF.CTRL.BLK.FOR OUTPUT
*                                            BFR.-USED IN MVRLD
WORK2    EQU   6                        WORK REG -USED IN DIVIDE INSTR
WORK3    EQU   7                        WORK REG -USED IN DIVIDE INSTR
INRLDCB  EQU   8                        ADDR.OF CTRL.BLK.FOR INPUT BFR.
*                                            CONTAINING NEEDED RLD'S
PREVCREC EQU   8                        PREV CTRL REC - USED ONLY IN
*                                            SCDENTAB
NOTLSENT EQU   9                        CURR.RLD NOTELIST ENTRY
RLDSETAD EQU   10                       RLD SET BUFFER ADDR
BRANCHX  EQU   11                      SECOND LEVEL BR. REG--MVRLD
WORK5    EQU   11                      GENERAL WORK REGISTER--MREL
BASE     EQU   12                       BASE REG.FOR HEWLFSCD
*                             ERROR CODES                             *
HEX1     EQU   X'1'                     BITMAP INDIC-INVAL.2 BYTE ADCON
HEX2     EQU   X'2'                     BITMAP INDIC-INVAL.VCON IN OVLY
ERCODE44 EQU   X'42C'                   ENTRY LIST OVERFLOWED
         ENTRY RELOCATE
         ENTRY  SCDENTAB
         ENTRY OTRLDCB1                 RLD OUTPUT CONTROL BLOCK 1
         ENTRY OTRLDCB2                 RLD OUTPUT CONTROL BLOCK 2
         ENTRY OTRLDCB3                 RLD OUTPUT CONTROL BLOCK 3
         ENTRY INRLDCB1                 RLD INPUT CONTROL BLOCK  1
         ENTRY INRLDCB2                 RLD INPUT CONTROL BLOCK  2
         USING *,BRANCH
         B     MODID+6
MODID    DC    C'19MREL'
         USING APTDSECT,APT             BASE FOR APT
         LA    SAVEAREA,REGSA           APT SAVE AREA FOR IOCS
         ST    WORK1,CURENTAB           HESD ADDR. OF NEXT ENTAB ENTRY
         MVC   LKAENTAB+1(4),1(WORK1)     HESD--SET-UP BY HEWLFOUT
         MVC   CURENTRY(4),SELST       INIT CURR ENTRY ADDR TO BEG
         MVI   NEWSW2,X'00'            INIT. APT SWITCH AREA
         NI    APT3,X'F1'              INIT APT SWITCH AREA
**********************************************************************
*                                                                     *
*        INITIALIZATION OF TXT AND RLD CONTROL BLOCKS                 *
*                                                                     *
INIT     SR    WORK1,WORK1
         ST    WORK1,TXTCB1
         ST    WORK1,TXTCB2
         STH   WORK1,OTRLDCB1+2
         STH   WORK1,OTRLDCB2+2
         STH   WORK1,OTRLDCB3+2
         MVI   OTRLDCB1,X'00'          CLEAR FLAG FIELD OF OUTPUT BFR
         MVI   OTRLDCB2,X'00'               CONTROL BLOCKS
         MVI   OTRLDCB3,X'00'
         MVC   INRLDCB1(4),OF           SET RLD ADDR TO F'S
         MVC   INRLDCB2(4),OF
         MVC   INRLDCB1+4(4),RLDINBF1   BEG. OF RLD INPUT BUFFER 1
         MVC   INRLDCB2+4(4),RLDINBF2   BEG. OF RLD INPUT BUFFER 2
         L     WORK1,RLDOUTBF           BEG. AND END OF RLD OUTPUT BFRS
         ST    WORK1,OTRLDCB1+8
         LA    WORK1,236(WORK1)        (END-4 SO CAN ALWAYS ADD
         ST    WORK1,OTRLDCB1+12       ONE ID-LENGTH LIST ENTRY
         LA    WORK1,20(WORK1)
         ST    WORK1,OTRLDCB2+8
         LA    WORK1,236(WORK1)
         ST    WORK1,OTRLDCB2+12
         LA    WORK1,20(WORK1)
         ST    WORK1,OTRLDCB3+8
         LA    WORK1,236(WORK1)
         ST    WORK1,OTRLDCB3+12
*                                                                     *
*              INITIALIZATION OF CONSTANT AREAS                       *
*                                                                     *
         MVC   SRCHBEG(4),TXTIO         BEGINNING ADDR.OF TEXT I/O TBL.
         OI    APT3,FIRSTXT             SET 1ST TEXT OF MODULE ON
         LA    CURTXTCB,TXTCB1
         LA    WORK4,TXTCB2
         OI    INRLDCB2,BUF2
         LA    PREVCREC,OTRLDCB1        ADDR. OF CTRL. BLK. FOR PREV.CR
         OI    1(CURTXTCB),X'24'       PREV. CR. IS IN BFR. 1
         MVC   4(4,PREVCREC),8(PREVCREC) FIRST FREE ADDR.= BFR.BEG.
         OI    0(PREVCREC),INUSE
         L     WORK2,8(PREVCREC)
         XC    0(16,WORK2),0(WORK2)     ZERO THE CONTROL RECORD
         XC    CCWDISP(4),CCWDISP
         XC    GROUPLNG(2),GROUPLNG
         BR    RETURN
RELOCATE STM   WORK0,BRANCH,SAVE       SAVE REGISTERS
*                                                                     *
*                    COMPUTE  BUFFER  RELOCAND                        *
*                                                                     *
         L     WORK5,8(CURTXTCB)
         SH    WORK5,24(CURTXTCB)       BEGINNING OF TXT FOR CURR ID
         ST    WORK5,TXTBEG
         LH    WORK2,CURMULT
         MH    WORK2,MULTSIZE+2        MULT . MULT SIZE
         LH    HESDADDR,CURID
         SLL   HESDADDR,3
         A     HESDADDR,HESD           CALCULATE CURRENT HESD ENTRY
         LH    WORK3,CURID
         SLL   WORK3,2
         A     WORK3,RECNT             ADDR OF REL CNST TABLE ENTRY
         L     WORK3,0(WORK3)          GET REL RELOC CONSTANT
         AR    WORK5,WORK3
         L     WORK4,0(HESDADDR)       TYPE AND LKA
         LA    WORK4,0(WORK4)
         SR    WORK5,WORK4
         SR    WORK5,WORK2              BFREL=BEG.OF TXT+REL RELO CNST
         ST    WORK5,BFREL                    -LKA-(MULT NO* MULT SIZE)
         SR    WORK3,WORK4
         ST    WORK3,INPUTADR          SAVE INPUT ADDR FOR MULT UPDATE
*                                                                     *
*        DETERMINE IN WHICH BUFFER RLD'S ARE LOCATED                  *
*                                                                     *
TSTBUF1  TM    2(CURTXTCB),RLDSIN1      ARE THERE UNPROC. RLD'S IN BFR1
         BC    11,TSTBUF2               NO
         LA    INRLDCB,INRLDCB1         YES,GET ADDR.OF BFR.CTRL.BLOCK
         B     RLDADDR
TSTBUF2  TM    2(CURTXTCB),RLDSIN2      ARE THERE UNPROC. RLD'S IN BFR2
         BC    11,MVRLD                 NO,GO TO MOVE RLDS
         LA    INRLDCB,INRLDCB2         GET ADDR.OF BFR.CTRL BLOCK
*                                                                     *
*              CALCULATE STORAGE ADDRESS OF RLD SET                   *
*                                                                     *
RLDADDR  L     NOTLSENT,12(INRLDCB)     GET RLD NOTELIST ENTRY ADDR
         CL    NOTLSENT,8(INRLDCB)     IS THIS 1ST ENTRY
         BNE   RLDADDR1                NO
         L     RLDSETAD,4(INRLDCB)     USE BEG OF BUFFER
         B     RELOC
RLDADDR1 LR    RLDSETAD,NOTLSENT
         SH    RLDSETAD,FOUR
         MVC   TEMPAREA(4),0(RLDSETAD) GET BOUNDARY ALIGN
         L     RLDSETAD,TEMPAREA
         LA    RLDSETAD,0(RLDSETAD)
         SLL   RLDSETAD,2
         A     RLDSETAD,4(INRLDCB)      STORAGE ADDR.OF RLD SET
*                                                                     *
*                   DETERMINE BYTES OF RLD INFORMATION IN SET         *
*                                                                     *
RELOC    MVC   TEMPAREA(2),4(NOTLSENT)
         LA    WORK1,4
         MH    WORK1,TEMPAREA
         STH   WORK1,RLDBYTES           BYTES OF RLD INFORMATION
RELOC00  MVC   RSAVE(2),0(RLDSETAD)     SAVE  R PTR
         NI    RSAVE,X'7F'              CLEAR DELINK BIT
         ST    RLDSETAD,PREVRPAD        SAVE ADDR OF PREV R AND P PTR
*                                                                     *
RELOC10  LA    RLDSETAD,4(RLDSETAD)     UPDATE TO FA FIELD
         LH    WORK1,RLDBYTES
         SH    WORK1,FOUR               DECR. RLD BYTE COUNT
         LTR   WORK1,WORK1              IS RLD SET ALL PROCESSED
         BZ    RELOC150                 YES
         STH   WORK1,RLDBYTES           SAVE REMAINING COUNT
         TM    0(RLDSETAD),PROC         IS RLD ALREADY PROCESSED
         BO    RELOC120                 YES
*                                                                     *
*        COMPUTE TEXT BUFFER ADDRESS OF ADCON                         *
*                                                                     *
         L     WORK1,0(RLDSETAD)        RLD FA FIELD
         LA    WORK1,0(WORK1)           CLEAR FLAG FIELD
         A     WORK1,BFREL              BFR RELOCAND + RLD ADDR
         ST    WORK1,ADCONADR           SAVE ADCON'S TEXT BUFFER ADDR
*                                                                     *
*        DETERMINE IF RLD ITEM IS WITHIN CURRENT TEXT LIMITS          *
*                                                                     *
         C     WORK1,TXTBEG             COMPARE TO BEGINNING OF TEXT
         BL    RELOC120                 NO, NOT WITHIN THIS TXT RECORD
         C     WORK1,8(CURTXTCB)        COMPARE TO END ADDR
         BL    RELOC20                  YES, IT IS WITHIN THIS TXT REC
         CLC   1(3,RLDSETAD),1(INRLDCB) NO,CHECK IF LOW RLD ADDR.
         BNL   RELOC120                       SHOULD BE UPDATED
         MVC   1(3,INRLDCB),1(RLDSETAD)
         B     RELOC120                 GO TO PROCESS NEXT RLD ITEM
*                                                                     *
*                 TEST FOR A SPLIT ADDRESS CONSTANT                   *
*                                                                     *
RELOC20  TM    0(RLDSETAD),X'04'        IS LENGTH OF ADCON = 3 BYTES
         BO    RELOC30                  NO
         LA    WORK3,2                  YES,LENGTH-1 SAVED
         AR    WORK1,WORK3              CALC END OF ADCON
         B     RELOC50
RELOC30  TM    0(RLDSETAD),X'08'        IS LENGTH OF ADCON = 4 BYTES
         BZ    RELOC40                  NO,  MUST BE TWO BYTES
         LA    WORK3,3                  YES,LENGTH-1 SAVED
         AR    WORK1,WORK3              CALC END OF ADCON
         B     RELOC50
RELOC40  TM    0(RLDSETAD),X'20'        IS IT A PSEUDO REG TYPE
         BZ    ERROR01                  NO, SET BIT MAP ERROR INDICATOR
         LA    WORK3,1                  YES, LENGTH-1 SAVED
         AR    WORK1,WORK3              CALC END OF ADCON
RELOC50  STH   WORK3,LENGTH             SAVE ADCON LENGTH-1
         C     WORK1,8(CURTXTCB)        COMP END OF ADCON TO END OF BFR
         BL    RELOC60
         BAL   RETURN,SPLTADCN          GO TO SPLIT ADCON ROUTINE
RELOC60  L     WORK3,PREVRPAD
         TM    0(WORK3),X'80'           IS TYPE A DELINK
         LH    WORK3,RSAVE              GET CURRENT R PTR
         LR    WORK0,WORK3
         BNO   RELOC70                  NO,  TEST FOR OVERLAY
*                                                                     *
*              DELINK THE ADDRESS CONSTANT                            *
*                                                                     *
         MH    WORK3,FIVE
         A     WORK3,DLKT               COMPUTE DELINK TABLE ENTRY ADDR
         MVC   DLNKR(2),0(WORK3)        GET R PTR FROM DELINK TABLE
         LH    WORK0,DLNKR              WORK0 CONTAINS TRUE R PTR
         MVC   DLNKSAVE+1(3),2(WORK3)  SAVE DELIND VALUE
RELOC70  TM    PDSE7,X'20'              IS THE PGM IN OVERLAY
         BO    SCDOVLY                  YES
*                                                                     *
*   MOVE ADCON FROM TEXT BUFFER TO WORK REG FOR RELOCATION            *
*                                                                     *
RELOC75  L     WORK3,ADCONADR           GET TEXT ADDR OF ADCON
         LA    WORK1,ADCON+3            END ADDR OF ADCON SAVE AREA
         SH    WORK1,LENGTH
         LH    WORK4,LENGTH
         EX    WORK4,MOVE               MOVE ADCON TO GET BNDY. ALIGN.
         L     WORK4,ADCON
         ST    WORK1,RELADCON           STORAGE ADDR OF RELO ADCON
*                                                                     *
*     TEST TYPE TO DETERMINE WHAT TYPE OF RELOCATION TO PERFORM       *
*                                                                     *
         TM    0(RLDSETAD),X'80'        IS IT RELATIVE
         BZ    RELOC130                 NO
         NI    0(RLDSETAD),RELREL      SET OFF REL. INDIC.
         NI    NEWSW2,REL              SET REL. RELOC. INDIC.
         LR    WORK1,WORK0    USE SAVED ID TO INDEX HESD       @ZA08247
         LR    WORK3,WORK1                                     @ZA08247
         SLL   WORK3,3                                         @ZA08247
         A     WORK3,HESD                                      @ZA08247
         TM    0(WORK3),X'0F'    TEST FOR UNRESOLVED EXTERNAL  @ZA08247
         BC    8,TESTIT                                        @ZA08247
         TM    0(WORK3),X'05'                                  @ZA08247
         BC    5,TESTIT                                        @ZA08247
         OI    0(RLDSETAD),UNRESER  SET UNRESOLVED EXT.REF.IND @ZA08247
TESTIT   TM    NEWSW2,ABS           REL OR ABS RELOCATION      @ZA08247
         BO    GETIT                ABS.USE LKA FROM HESD      @ZA08247
         LR    WORK3,WORK1          REL.GET REL FACTOR FROM    @ZA08247
         SLL   WORK3,2               THE REL.RELOC.CONST. TBL  @ZA08247
         A     WORK3,RECNT                                     @ZA08247
GETIT    L     WORK3,0(WORK3)      GET RELOC FACTOR            @ZA08247
*                                                                     *
*                        PERFORM  RELOCATION                          *
*                                                                     *
         TM    0(RLDSETAD),X'90'       UNRESOLVED VCON
         BNO   RELOC90                 NO-GO AND RELOCATE
         SR    WORK4,WORK4        YES - CLEAR REG. AND RETURN
         OI    0(RLDSETAD),PROC   MARK RLD PROCESSED
         B     RELOC110
RELOC90  TM    0(RLDSETAD),X'02'        DOES RLD INDICATE SUBT.
         BZ    RELOC95                  NO
         LCR   WORK3,WORK3              COMPLEMENT FOR SUBTRACT
RELOC95  AR    WORK4,WORK3              RELOCATE ADCON
*                                                                     *
*           PLACE RELOCATED ADDRESS CONSTANT BACK INTO TEXT           *
*                                                                     *
RELOC100 ST    WORK4,ADCON              PUTS RELOC. ADCON INTO WK AREA
         L     WORK3,RELADCON           ADDR. OF RELOCATED ADCON
         L     WORK1,ADCONADR           TEXT BUFFER ADDR OF ADCON
         LH    WORK2,LENGTH
         EX    WORK2,MOVE               RELOC ADCON MOVE BACK INTO TEXT
*                                                                     *
*            RELOCATE THE ADDRESS FIELD OF CURRENT RLD ITEM           *
*                                                                     *
RELOC110 LH    WORK1,CURID
         NI    NEWSW2,REL              SET REL. RELOC. INDIC.
         BAL   RETURN,FRELFAC1          TO FETCH RELOCATION FACTOR
         L     WORK4,0(RLDSETAD)        GET RLD ADDR.
         LA    WORK4,0(WORK4)          CLEAR FLAG FIELD
         AR    WORK4,WORK3
         ST    WORK4,TEMPAREA
         MVC   1(3,RLDSETAD),TEMPAREA+1 UPDATE RLD ADDR FIELD
         OI    0(RLDSETAD),PROC         MARK RLD PROCESSED
*                                                                     *
*              UPDATE TO NEXT RLD ITEM                                *
*                                                                     *
RELOC120 TM    0(RLDSETAD),X'01'        IS IT A FA CONTINUATION
         BO    RELOC10                  YES, RETURN
         LA    RLDSETAD,4(RLDSETAD)     NO, UPDATE TO NEXT RLD ITEM
         LH    WORK1,RLDBYTES
         SH    WORK1,FOUR
         STH   WORK1,RLDBYTES           DECR. RLD BYTE COUNT
         LTR   WORK1,WORK1             RLD SET ALL PROCESSED
         BZ    RELOC150                YES
         B     RELOC00                  RETURN TO PROCESS NEXT RLD
*                                                                     *
*                   ABSOLUTE  RELOCATION                              *
*                                                                     *
RELOC130 TM    0(RLDSETAD),X'30'        IS IT A PSEUDO REG - TYPE 2
         BO    RELOC135                 YES
         L     WORK1,PREVRPAD
         TM    0(WORK1),X'80'           IS DELINKING REQUIRED
         BO    RELOC140                 YES
RELOC131 OI    NEWSW2,ABS              SET ABS. RELOC. INDIC.
         BAL   RETURN,FRELFAC           TO FETCH ABS. RELOC. FACTOR
         TM    0(RLDSETAD),X'70'        IS TYPE ABSOLUTE
         BZ    RELOC90                  YES, GO TO RELOCATE
*                                       NO, TYPE IS 'BRANCH' OR PSEUDO1
         LR    WORK4,WORK3              USE RELOC. FAC. AS ADCON VALUE
         B     RELOC100                 RETURN TO RELOCATE
RELOC135 L     WORK4,PRAL               USE  ACCUM LNC AS ADCON VALUE
         B     RELOC100                 RETURN TO RELOCATE
RELOC140 L     WORK2,DLNKSAVE          GET DELIND VALUE
         TM    0(RLDSETAD),X'02'        DOES SIGN INDICATE SUBTRACT
         BO    RELOC145                 YES
         LCR   WORK2,WORK2              COMPLEMENT VALUE
RELOC145 AR    WORK4,WORK2              ADD DELINK VALUE TO ADCON
         NI    0(RLDSETAD),ABSOLUTE    MARK RLD ABSOLUTE
         B     RELOC131
RELOC150 OI    2(NOTLSENT),JUSTPROC    RLD SET JUST PROCESSED
         CLC   FF(3),1(INRLDCB)         IS RLD SET ALL RELOCATED
         BE    RELOC160                 YES
         L     WORK3,0(INRLDCB)         NO, UPDATE LOWEST MULTIPLICITY
         LA    WORK3,0(WORK3)
         A     WORK3,INPUTADR
         SR    WORK2,WORK2
         D     WORK2,MULTSIZE          WORK3 CONTAINS UPDATED MULT
         STH   WORK3,TEMP
         NI    2(NOTLSENT),X'FC'       SAVE ONLY INDIC.
         OC    TEMP(1),2(NOTLSENT)     SET INDICATORS IN NEW MULT
         MVC   2(2,NOTLSENT),TEMP       UPDATE LOWEST MULTIPLICITY
         MVC   1(3,INRLDCB),FF         REINITIAL F'S IN INRLDCB
         B     RELOC170
RELOC160 OI    2(NOTLSENT),PROCESSD     SET PROCESSED BIT FOR RLD SET
*                                                                     *
*        CHECK FOR OTHER NEEDED RLD'S IN GROUPING                     *
*                                                                     *
RELOC170 CL    NOTLSENT,16(INRLDCB)     MORE RLD SETS IN GROUP
         BNE   RELOC190                YES
         TM    0(INRLDCB),X'10'         WORKING IN BUFFER 1
         BZ    RELOC180                 YES
         OI    2(CURTXTCB),BUF2PROC     NO,SET RLD'S IN BFR 2 PROCESSED
         B     TSTBUF1
RELOC180 OI    2(CURTXTCB),BUF1PROC     SET RLD'S IN BUFFER 1 PROCESSED
         B     TSTBUF1
RELOC190 LA    NOTLSENT,9(NOTLSENT)     INCR. TO NEXT NOTELIST ENTRY
         CLC   CURID(2),0(NOTLSENT)     CURRENT ID = ENTRY ID
         BNE   RELOC170                 NO
         MVC   TEMPAREA(2),2(NOTLSENT)
         NI    TEMPAREA,X'03'          CLEAR INDICATORS
         CLC   CURMULT(2),TEMPAREA     CURRENT MULT = ENTRY MULT
         BNE   RELOC170                 NO
         ST    NOTLSENT,12(INRLDCB)     UPDATE NOTELIST FIELD OF CB
         B     TSTBUF1                  RETURN TO PROCESS
*                                                                     *
*   SUBROUTINE TO FETCH THE NEEDED RELOCATION FACTOR - WORK3 CONTAINS *
*     THE RELOCATION FACTOR ON EXIT - WORK0 CONTAINS R PTR ON ENTRANCE*
*                                                                     *
FRELFAC  LR    WORK1,WORK0              USE SAVED ID TO INDEX HESD
FRELFAC1 LR    WORK3,WORK1
         SLL   WORK3,3
         A     WORK3,HESD
         TM    0(WORK3),X'0F'           TEST FOR UNRESOLVED EXTERNAL
         BC    8,TEST
      TM   0(WORK3),X'05'
         BC    5,TEST
         OI    0(RLDSETAD),UNRESER      SET UNRESOLVED EXT.REF.INDIC.
TEST     TM    NEWSW2,ABS              REL OR ABS RELOCATION NEEDED
         BO    GET                      ABS. - USE LKA FIELD FROM HESD
         LR    WORK3,WORK1              REL. - GET RELOC.FACTOR FROM
         SLL   WORK3,2                       THE REL. RELOC. CONST. TBL
         A     WORK3,RECNT
GET      L     WORK3,0(WORK3)           GET RELOC FACTOR
         LA    WORK3,0(WORK3)           CLEAR HIGH ORDER BYTE
         BR    RETURN                   RETURN
*                                                                     *
*                   OVERLAY RELOCATION  ROUTINE                       *
*                                                                     *
SCDOVLY  NI    VCONSW,LN3OFF            INIT 3-BYT VCON SWCH OFF A48242
         TM    0(RLDSETAD),X'60'        IS IT A V-TYPE ADCON
         BC    5,RELOC75               NO,RETURN
         TM    0(RLDSETAD),X'10'
         BZ    RELOC75                  NO, RETURN
         TM    0(RLDSETAD),X'0C'        IS LENGTH = 4 BYTES
         BM    ERROR02A                 NO - POSSIBLE ERROR      A48242
*                                       GO TURN ON SWITCH        A48242
RETRN    EQU   *                        AND CONTINUE             A48242
*                                                                     *
*              OBTAIN  'FROM'  SEGMENT                                *
*                                                                     *
         SR    WORK5,WORK5
         NI    0(RLDSETAD),RELREL      SET OFF RELATIVE INDIC.
         IC    WORK5,4(HESDADDR)        GET SEG. NO. FROM HESD
*                                                                     *
*              OBTAIN   'TO'   SEGMENT                                *
*                                                                     *
         OI    NEWSW2,ABS              SET ABS. RELOC. INDIC.
         BAL   RETURN,FRELFAC
         TM    0(RLDSETAD),X'80'        IS RLD MARKED 'UNRESOLVED ER'
         BO    RELOC75                  YES, RETURN TO NON-OVERLAY
         LR    WORK3,WORK0
         SLL    WORK3,3
         A     WORK3,HESD              HESD ADDR OF R PTR
         SR    WORK1,WORK1
         IC    WORK1,4(WORK3)           GET SEG NO. FROM HESD
         BAL   RETURN,CPTH              GO TO COMMON PATH ROUTINE
*                                                                     *
*        TEST   RESULTS TO DETERMINE TYPE OF CALL                     *
*                                                                     *
         IC    WORK1,4(WORK3)
         CLR   WORK5,WORK1
         BE    RELOC75                 UPWARD CALL-NO ENTAB NEEDED
         IC    WORK1,4(HESDADDR)
         CLR   WORK5,WORK1
         BE    OVLY70                  DOWNWARD CALL-ENTAB NEEDED
*                                                                     *
*        TEST TO DETERMINE IF IT IS WITHIN OR ACROSS A REGION         *
*                                                                     *
         ST    SAVEAREA,SAVE13         SAVE REG. 13 TEMPORARILY
         LA    SAVEAREA,OVLY30          INITIALIZE
OVLY10   LA    RETURN,4                 LOOP CT = 4 REGIONS
         LA    WORK5,LSTS
         SR    WORK2,WORK2
OVLY20   IC    WORK2,0(WORK5)           GET HIGHEST SEG OF REGION
         CLR   WORK1,WORK2              COMPARE TO 'TO' AND 'FROM' SEG
         BCR   13,SAVEAREA              SEG. IS IN REGION
         LA    WORK5,1(WORK5)           SEG NOT IN REGION -UPDATE TO
         BCT   RETURN,OVLY20                 NEXT REGION
OVLY30   ST    WORK5,TEMPAREA           FOUND REGION FOR 'FROM' SEG
         LA    SAVEAREA,OVLY40
         IC    WORK1,4(WORK3)           GET 'TO' SEGMENT
         B     OVLY10                   GO TO FIND ITS REGION
OVLY40   CL    WORK5,TEMPAREA           ARE SEGMENTS IN SAME REGION
         L     SAVEAREA,SAVE13         RESTORE REG 13
         BNE   OVLY70                   NO
*                                                                     *
*              SEGMENTS IN SAME REGION-TEST FOR EXCLUSIVE CALL        *
*                                                                     *
         L     WORK2,SELST
         LH    WORK5,ENELTC
         LTR   WORK5,WORK5
         BZ    RELOC75                 NO ENTRIES-INVALID EXCLUS. CALL
OVLY50   CH    WORK0,0(WORK2)           ENTRY IN ENTRY LIST FOR CALL
         BE    OVLY60                   YES
         LA    WORK2,6(WORK2)
         BCT   WORK5,OVLY50
         B     RELOC75                  INVALID EXCLUSIVE CALL
*                                                                     *
*        PLACE CUR. SEG.NO. AND ENTAB ADDR. INTO ADCON TEXT LOCATION  *
*                                                                     *
OVLY60   TM    VCONSW,LEN3             IS IT A 3-BYTE VCON ?     A48242
         BO    ERROR02B                IF SO, IT IS AN ERROR     A48242
         L     WORK5,ADCONADR           TXT ADDR OF ADCON        A48242
*        PLACE CUR.SEG.NO. AND ENTAB ADDR INTO ADCON TEXT LOCATION    *
         MVC   1(3,WORK5),3(WORK2)      ENTAB ENTRY ADDR.
         MVC   0(1,WORK5),CURSEG+1      CUR. SEG. NO.
         B     RELOC110                 RETURN TO RELOCATE
OVLY70   TM    VCONSW,LEN3             IS IT A 3-BYTE VCON ?     A48242
         BO    ERROR02B                IF SO, IT IS AN ERROR     A48242
         LH    WORK5,ENELTC                                      A48242
OVLY70C  CH    WORK5,ENELTX             ENTRY LIST FULL
         BL    OVLY70B                 NO,BRANCH OUT            S01904
         TM    APT4,REALOCTE           REALLOC DONE ALREADY?    S01904
         BNO   OVLY70A                 NO,TRY TO REALLOC        S01904
         LA    RETURN,ERCODE44         SIGNAL ERROR COND
         B     ERROR                    GO TO ERROR EXIT
OVLY70A  STM   WORK1,WORK3,BRNCHSV     SAVE WORK REGISTERS      S01904
         L     WORK3,FFCADR            HIGHEST ADDR RETAINED BY ALLOC
         S     WORK3,SELST             MINUS ADDR OF 2PASS ENTRY LIST
         XR    WORK2,WORK2             EQUALS AVAILABLE BYTES   S01904
         D     WORK2,SIXFULL           DIVIDE BY SIX            S01904
         STH   WORK3,ENELTX            YIELDS NEW MAX NO OF ENTRIES
         OI    APT4,REALOCTE           FLAG REALLOCATION AS DONE
         LM    WORK1,WORK3,BRNCHSV     RESTORE REGISTERS        S01904
         B     OVLY70C                 RESUME PROCESSING        S01904
OVLY70B  LTR   WORK5,WORK5              ENTRY LIST EMPTY
         BZ    OVLY90                   YES
*                                                                     *
*        SCAN ENTRY LIST ON  ID  FOR SAVED R                          *
*                                                                     *
         L     WORK2,SELST
OVLY80   CH    WORK0,0(WORK2)           SAVED R = ENTRY LIST ID
         BE    OVLY60                   YES
         LA    WORK2,6(WORK2)
         BCT   WORK5,OVLY80
*                                                                     *
*        ENTRY LIST FOR ID DOES NOT EXIST - CREATE AN ENTRY           *
*                                                                     *
OVLY90   L     WORK2,CURENTRY
         STH   WORK0,0(WORK2)           R PTR TO ENTRY LIST
         MVC   2(1,WORK2),CURSEG+1      CURRENT SEGMENT TO ENTRY LIST
         MVC   3(3,WORK2),LKAENTAB+1    ENTAB LKA
*                                                                     *
*        PLACE CUR.SEG.NO.AND ENTAB ADDR.INTO ADCON TEXT LOCATION     *
*                                                                     *
         L     WORK5,ADCONADR
         MVC   0(4,WORK5),2(WORK2)      MODIFY VALUE OF ADCON
         LA    WORK2,6(WORK2)
         ST    WORK2,CURENTRY           UPDATE ENTRY LIST 1ST FREE ADDR
         L     WORK1,LKAENTAB
         LA    WORK1,12(WORK1)
         ST    WORK1,LKAENTAB           UPDATE TO NEXT ENTAB LINE ADDR.
         LH    WORK1,ENELTC
         LA    WORK1,1(WORK1)           INC. ENTRY LIST COUNT
         STH   WORK1,ENELTC
         B     RELOC110                 RETURN TO RELOCATE
*                                                                     *
*              SPLIT ADDRESS CONSTANT ROUTINE                         *
*                                                                     *
SPLTADCN STM   WORK0,BRANCH,SAVERET    SAVE ALL REGISTERS
         OI    2(NOTLSENT),SPLT         SET SPLIT ADCON IN RLD SET
         ST    RLDSETAD,SPLITADR        SAVE START ADDR OF SPLIT RLD
         L     WORK2,SAVE+16            GET ADDR OF OTHER TEXT CTRL BLK
         TM    0(WORK2),INUSE           IS IT IN USE
         BO    SPLT7                    YES
SPLT2    L     WORK3,4(CURTXTCB)        BEG. OF TEXT IN BUFFER
         L     WORK1,BFREL
         A     WORK1,TXTBFBEG
         S     WORK1,TXTBEG
         ST    WORK1,BFREL             UPDATE BUFFER RELOC. CONSTANT
         A     WORK1,0(RLDSETAD)
         ST    WORK1,ADCONADR          UPDATE ADCON ADDRESS
         L     WORK1,TXTBFBEG           BEG. OF TEXT BUFFER
         ST    WORK1,TXTBEG            UPDATE TEXT BEG. ADDR
         ST    WORK1,4(CURTXTCB)        UPDATE BEG. OF TEXT IN BUFFER
         L     WORK5,MULTSIZE           SIZE OF TEXT
         LA    WORK4,255                YES
SPLT3    CH    WORK5,CON256             MORE THAN 256 BYTES TO MOVE
         BL    SPLT5                    NO
         EX    WORK4,MOVE               MOVE 256 BYTES
         SH    WORK5,CON256             DECR TXT SIZE
         AH    WORK3,CON256             UPDATE TXT BUFFER PTRS
         AH    WORK1,CON256
         B     SPLT3
SPLT5    EQU   *                                        OX05443,OY04003
         LTR   WORK5,WORK5             ANY REMAINDER?   OX05443,OY04003
         BNP   SPLT6                   NO,CONTINUE      OX05443,OY04003
         LR    WORK4,WORK5             SAVE COUNT       OX05443,OY04003
         BCTR  WORK4,0                 DECRE FOR MOVE   OX05443,OY04003
         EX    WORK4,MOVE              MOVE REMAINDER   OX05443,OY04003
         AR    WORK1,WORK5             UPDATE TEXT BUFFER POINTER
SPLT6    EQU   *                                        OX05443,OY04003
         ST    WORK1,8(CURTXTCB)        UPDATE END OF TEXT IN BUFFER
         ST    WORK1,FREEADDR          UPDATE 1ST FREE ADDR
         LR    WORK1,WORK2
         LA    WORK0,1                 LOOKAHEAD READ INDIC
         L     BRANCHX,ADGET
         BALR  RETURN,BRANCHX           GO TO READ IN NEXT MULT
SPLT7    TM    0(WORK2),BEINGRD         IS IT BEING READ
         BO    SPLT8                    YES
         TM    0(WORK2),BEINGWT         IS IT BEING WRITTEN
         BZ    SPLT9                    NO
         L     RETURN,ADCHKWRT
         BALR  BRANCHX,RETURN          CHECK WRITE
         NI    0(WORK2),WRTCKD          MARK TEXT CTRL BLK NOT IN USE
         B     SPLT2                       AND NOT BEING WRITTEN
SPLT8    L     RETURN,ADCHKRD
         BALR  BRANCHX,RETURN          CHECK READ
         NI    0(WORK2),RDCKD           MARK TEXT CTRL BLK NOT BEING RD
SPLT9    LM    WORK0,BRANCH,SAVERET    RESTORE ALL REGISTERS
         BR    RETURN                   RETURN
*                                                                     *
* DETERMINE THE HIGHEST SEGMENT IN THE COMMON PATH BETWEEN 2 SEGMENTS *
*                                                                     *
CPTH     L     WORK2,SGT1
CPTH1    CLR   WORK5,WORK1
         BCR   8,RETURN                 SEGMENTS EQUAL - RETURN
         BH    CPTH2
         XR    WORK5,WORK1              SWITCH REGISTERS
         XR    WORK1,WORK5
         XR    WORK5,WORK1
CPTH2    IC    WORK5,0(WORK2,WORK5)
         LTR   WORK5,WORK5              SEGMENT ENTRY > 0
         BH    CPTH1                   YES
         LA    WORK5,1                  NO, SET SEGMENT = 1
         BR    RETURN                   RETURN
*                                                                     *
*                                                                     *
*     MOVE  RELOCATED RLDS FROM INPUT BUFFER TO OUTPUT BUFFER         *
*                                                                     *
*                                                                     *
MVRLD    TM    NEWSW2,SPLTMOVD          CHECK IF SPLIT RLD IN BUFFER
         BO    MVRLD20                  YES
         TM    NEWSW2,GROUPRLD         SHOULD RLDS BE GROUPED
         BZ    MVRLD00                 NO
         NI    NEWSW2,GROUPOFF         SET RLD GROUP INDIC OFF
         L     OUTRLDCB,SAVEBFCB       USE PREV BUFFER CTRL BLK
         B     MVRLD30
*                                                                     *
*                  FIND  A FREE OUTPUT RLD BUFFER                     *
*                                                                     *
MVRLD00  LA    OUTRLDCB,OTRLDCB1        IS BUFFER 1 FREE
         TM    0(OUTRLDCB),INUSE
         BZ    MVRLD25                  YES
         LA    OUTRLDCB,OTRLDCB2        IS BUFFER 2 FREE
         TM    0(OUTRLDCB),INUSE
         BZ    MVRLD25                  YES
         LA    OUTRLDCB,OTRLDCB3        IS BUFFER 3 FREE
         TM    0(OUTRLDCB),INUSE
         BZ    MVRLD25                  YES
         TM    0(OUTRLDCB),BEINGWT      IS BUFFER 3 BEING WRITTEN
         BO    MVRLD10                  YES
         LA    OUTRLDCB,OTRLDCB2        IS BUFFER 2 BEING WRITTEN
         TM    0(OUTRLDCB),BEINGWT
         BO    MVRLD10                  YES
         LA    OUTRLDCB,OTRLDCB1        IS BUFFER 1 BEING WRITTEN
         TM    0(OUTRLDCB),BEINGWT
         BZ    MVRLD210                 NO, ALL BUFFERS IN USE - WRITE
MVRLD10  L     RETURN,ADCHKWRT
         BALR  BRANCHX,RETURN          BRANCH TO CHECK WRITE
         NI    0(OUTRLDCB),WRTCKD       WRITE CHECKED -CB NOT IN USE
         B     MVRLD25
MVRLD20  L     OUTRLDCB,CBTOUSE         CB.ADDR.FOR BFR.WITH SPLIT RLD
         NI    NEWSW2,MOVDOFF           TURN OFF SPLIT RLD MOVED INDIC.
         B     MVRLD28
MVRLD25  L     WORK2,8(OUTRLDCB)        GET BEG. ADDR. OF BUFFER
         XC    0(16,WORK2),0(WORK2)     CLEAR THE CONTROL RECORD
         MVC   4(4,OUTRLDCB),8(OUTRLDCB) FIRST FREE ADDR= BFR.BEG.
MVRLD28  MVC   TEMP(1),1(OUTRLDCB)
         XI    TEMP,X'FF'               FLIP BITS
         NI    TEMP,X'38'               ALL BITS OFF EXCEPT BFR. INDIC.
         OC    1(1,CURTXTCB),TEMP       ASSOCIATE BFR. WITH TXTCB
         OI    0(OUTRLDCB),INUSE        MARK OUTPUT CB USED
         XC    2(2,OUTRLDCB),2(OUTRLDCB) ZERO ID LENGTH FIELD
MVRLD30  TM    NEWSW2,RPSAVED           HAVE R AND P PTRS.BEEN SAVED
         BO    MVRLD100
*                                                                     *
*        DETERMINE IN WHICH BUFFER THE PROCESSED RLDS ARE             *
*                                                                     *
MVRLD35  TM    2(CURTXTCB),BUF1PROC     PROCESSED RLDS IN BUFFER 1
         LA    INRLDCB,INRLDCB1
         BO    MVRLD40                  YES
         TM    2(CURTXTCB),BUF2PROC     PROCESSED RLDS IN BUFFER 2
         LA    INRLDCB,INRLDCB2
         BO    MVRLD40                  YES
         TM    NEWSW2,MORERLDS         ARE THERE MORE RLDS FOR TEXT
         BZ    MVRLD36                 NO, CHECK FOR EMPTY BUFFER
         OI    NEWSW2,GROUPRLD         YES, SET RLD GROUP INDIC.
         ST    OUTRLDCB,SAVEBFCB       SAVE CTRL BLK ADDRESS
         B     MVRLD37
MVRLD36  L     WORK2,4(OUTRLDCB)       FIRST FREE ADDRESS
         LR    WORK1,OUTRLDCB
         CL    WORK2,8(OUTRLDCB)       HAS ANYTHING BEEN ADDED TO BFR
         BNE   MVRLD37                 YES
         NI    0(WORK2),RLDOFF         NO, TURN RLD INDIC. OFF
         NI    0(OUTRLDCB),NOTINUSE    MARK CTRL BLK NOT IN USE
         NC    1(1,CURTXTCB),1(OUTRLDCB)
MVRLD37  LM    2,15,SAVE+8             RESTORE REGISTER 0,2-15
         L     0,SAVE
         BR    RETURN                   RETURN,ALL RELOCATED RLDS MOVED
*                                                                     *
*          IDENTIFY NOTELIST ENTRY PERTAINING TO THE RLDS THAT        *
*                  ARE TO BE MOVED                                    *
*                                                                     *
MVRLD40  L     WORK2,8(OUTRLDCB)
         OI    0(WORK2),RLD             SET RLDS PRESENT INDIC IN CR
         L     NOTLSENT,8(INRLDCB)      ADDR. OF 1ST NOTELIST ENTRY
MVRLD50  CLC   0(2,NOTLSENT),CURID     ENTRY ID = CURRENT ID
         BNE   MVRLD60
         TM    2(NOTLSENT),JUSTPROC     RLD SET HAS RELOC.RLDS TO MOVE
         BO    MVRLD80                  YES
MVRLD60  LA    NOTLSENT,9(NOTLSENT)     UPDATE TO NEXT ENTRY
         CL    NOTLSENT,16(INRLDCB)     ALL RLDS MOVED FROM BUFFER
         BNH   MVRLD50                  NO
         L     WORK2,4(OUTRLDCB)
         AH    WORK2,TWELVE
         NI    0(WORK2),CONTOFF        SET CONT. OFF IN LAST FA FIELD
         TM    0(INRLDCB),BUF2          ALL RLDS MOVED FROM INPUT BFR2
         BO    MVRLD70                  YES
         NI    2(CURTXTCB),BUF1OFF      NO RLDS IN BFR1 FOR CURR. TEXT
         B     MVRLD35
MVRLD70  NI    2(CURTXTCB),BUF2OFF      NO RLDS IN BFR2 FOR CURR. TEXT
         B     MVRLD35
MVRLD80  NI    2(NOTLSENT),JUSTOFF      TURN RLDS TO MOVE INDIC. OFF
         ST    NOTLSENT,12(INRLDCB)
*                                                                     *
*    CALCULATE  ADDRESS AND EXTENT OF RLD SET IN BUFFER               *
*                                                                     *
         MVC   TEMPAREA(2),4(NOTLSENT)  LENGTH OF RLD SET
         LH    WORK2,TEMPAREA
         SLL   WORK2,2                  MULT. TO GET BYTES OF RLD
         CL    NOTLSENT,8(INRLDCB)     IS THIS 1ST ENTRY FOR BUFFER
         BNE   MVRLD90                 NO
         L     RLDSETAD,4(INRLDCB)     YES USE BEG. OF BUFFER
         B     MVRLD95
MVRLD90  SH    NOTLSENT,THREE
         MVC   TEMPAREA+1(3),0(NOTLSENT) GET DISP.OF RLDS FROM BFR.BEG.
         L     RLDSETAD,TEMPAREA
         LA    RLDSETAD,0(RLDSETAD)     CLEAR HIGH ORDER BYTES
         SLL   RLDSETAD,2
         A     RLDSETAD,4(INRLDCB)      ADDR. OF RLD SET IN BUFFER
MVRLD95  AR    WORK2,RLDSETAD
         ST    WORK2,RLDSTEND           SAVE RLD SET END ADDR.
*                                                                     *
*      CALCULATE BEGIN AND END OF TEXT                                *
*                                                                     *
         LH    WORK2,CURMULT
         MH    WORK2,MULTSIZE+2         DISPLACEMENT FROM BEG. OF CSECT
         LH    WORK1,CURID
         SLL   WORK1,3
         A     WORK1,HESD
         L     WORK3,0(WORK1)
         LA    WORK3,0(WORK3)
         AR    WORK2,WORK3              DISPLACEMENT FROM BEG.OF MODULE
         ST    WORK2,MULTBEG            START DISP. OF MULT.
         A     WORK2,MULTSIZE
         ST    WORK2,MULTEND            END  DISP. OF  MULT.
*                                                                     *
*    CHECK FOR SPLIT RLD FROM PREVIOUS TEXT AND FOR SPLIT RLD         *
*                      IN CURRENT TEXT                                *
*                                                                     *
         NI    NEWSW2,NOTINBFR         TURN OFF R+P IN BFR.
         MVI   RPPTRS,X'FF'             SET PREV. R PTR TO HIGHEST R
         TM    NEWSW2,SPLTMOVD          HAS SPLIT RLD BEEN MOVED TO BFR
         BZ    MVRLD100
         L     WORK2,8(OUTRLDCB)
         MVC   RPPTRS(2),16(WORK2)     SET R PTR TO SPLIT RLD R PTR
         OI    NEWSW2,RPINBFR           TURN ON  R+P IN BFR. INDICATOR
MVRLD100 L     NOTLSENT,12(INRLDCB)     NOTELIST ENTRY ADDR.
MVRLD102 TM    NEWSW2,RPSAVED           R+P SAVED FROM PREV RLD RECORD
         BZ    MVRLD105                 NO
         NI    NEWSW2,RPSAVOFF          SET R+P SAVED INDIC OFF
         L     RLDSETAD,RESUMEAD        GET ADDR OF CHAIN
         B     MVRLD120
MVRLD105 MVC   RSAVE(2),0(RLDSETAD)
         TM    RSAVE,X'80'             IS R PTR MARKED DELINK
         BZ    MVRLD110                NO               OX05440,OY04132
         NI    RSAVE,X'7F'             TURN OFF DELINK BIT
         SR    WORK2,WORK2             CLEAR REGISTER
         LH    WORK2,RSAVE
         MH    WORK2,FIVE
         A     WORK2,DLKT              DELINK TABLE ENTRY FOR R PTR
         MVC   RSAVE(2),0(WORK2)       UPDATE R PTR
MVRLD110 LA    RLDSETAD,4(RLDSETAD)     UPDATE TO FA FIELD
MVRLD120 TM    0(RLDSETAD),PROC         IS RLD PROCESSED
         BZ    MVRLD140                 NO
         TM    2(NOTLSENT),SPLT         IS THERE A SPLIT RLD IN SET
         BZ    MVRLD121                NO
         CL    RLDSETAD,SPLITADR       IS THIS A SPLIT RLD
         BE    MVRLD145                YES
MVRLD121 L     WORK2,0(RLDSETAD)        GET RLD ADD?
         LA    WORK2,0(WORK2)
*                                                                     *
*    CHECK IF  RLD REFERS TO CURRENT MULTIPLICITY                     *
*                                                                     *
         CL    WORK2,MULTBEG
         BL    MVRLD140
         CL    WORK2,MULTEND
         BNL   MVRLD140
         TM    NEWSW2,RPINBFR           ARE R+P PTRS.ALREADY IN BUFFER
         L     WORK2,4(OUTRLDCB)        FIRST FREE ADDR
         BO    MVRLD125                 YES
*                                                                     *
*                                                       OX05440,OY04132
*      CHECK IF RLDS CAN BE CHAINED WITH PREVIOUS RLDS  OX05440,OY04132
*                                                       OX05440,OY04132
MVRLD106 CLC   RPPTRS(2),RSAVE         DOES PREV R = NEW R
         BNE   MVRLD108                 NO              OX05440,OY04132
         CL    WORK2,8(OUTRLDCB)       ANYTHING IN BUFFER
         BE    MVRLD108                NO               OX05440,OY04132
         OI    NEWSW2,RPINBFR          SET R AND P IN BUFFER
         OI    12(WORK2),CONT          SET CONT BIT IN PREV FA
         B     MVRLD123                                 OX05440,OY04132
MVRLD108 MVC   RPPTRS(2),RSAVE         SAVE NEW R PTR   OX05440,OY04132
*
*          CHECK IF ROOM IN OUTPUT RLD BUFFER                         *
*                                                                     *
MVRLD123 EQU   *                                        OX05440,OY04132
         CLC   4(4,OUTRLDCB),12(OUTRLDCB) IS THERE ROOM FOR R-P PTR.
         BNL   MVRLD180                 NO
         L     WORK3,12(OUTRLDCB)
         SH    WORK3,EIGHT
         CR    WORK2,WORK3              IS THERE ROOM TO ADD R+P AND FA
         BH    MVRLD180                 NO
         CL    WORK2,8(OUTRLDCB)       1ST ENTRY IN BUFFER
         BE    MVRLD122                YES
         NI    12(WORK2),CONTOFF       MAKE SURE CONT. INDIC OFF
MVRLD122 MVC   16(4,WORK2),RPPTRS      MOVE R+P TO OUTPUT BUFFER
         LA    WORK2,4(WORK2)
         ST    WORK2,4(OUTRLDCB)        UPDATE 1ST FREE ADDR.
         OI    NEWSW2,RPINBFR           SET INDICATOR  R+P  IN BFR
         B     MVRLD130
MVRLD125 CLC   4(4,OUTRLDCB),12(OUTRLDCB) IS THERE ROOM TO ADD FA
         BNL   MVRLD170                 NO
         OI    12(WORK2),CONT          MAKE SURE CONT INDIC ON
*                                                                     *
*         MOVE RLD INFORMATION FROM INPUT TO OUTPUT BUFFER            *
*                                                                     *
MVRLD130 MVC   16(4,WORK2),0(RLDSETAD) MOVE FA TO OUTPUT BUFFER
         NI    16(WORK2),PROCOFF       TURN OFF PROCESSED INDICATOR
         LA    WORK2,4(WORK2)
         ST    WORK2,4(OUTRLDCB)        UPDATE 1ST FREE ADDR.
MVRLD140 TM    0(RLDSETAD),CONT         IS RLD MARKED CONTINUATION
         BZ    MVRLD160                 NO
         B     MVRLD110                YES
MVRLD145 L     WORK2,HESD
         MVC   0(4,WORK2),RPPTRS        MOVE SAVED R+P PTRS TO HESD
         MVC   0(2,WORK2),RSAVE         GET CORRECT R PTR      XM09129
         MVC   4(4,WORK2),0(RLDSETAD)   MOVE FA FIELD
         NI    4(WORK2),X'BE'           TURN PROC. AND CONT BITS OFF
         OI    NEWSW2,SPLITRLD          SET SPLIT RLD SAVED IN HESD
         NI    2(NOTLSENT),SPLTOFF      TURN SPLIT RLD IN SET OFF
         TM    0(RLDSETAD),CONT         IS CONT. INDICATED
         BO    MVRLD110
MVRLD160 NI    NEWSW2,NOTINBFR          TURN OFF R+P IN BFR. INDIC.
         LA    RLDSETAD,4(RLDSETAD)     UPDATE TO NEXT R+P FIELD
         CL    RLDSETAD,RLDSTEND        ARE RLDS ALL MOVED FROM SET
         BL    MVRLD100                 NO
         L     WORK2,8(OUTRLDCB)       BUFFER BEGINNING
         L     WORK3,4(OUTRLDCB)       1ST FREE ADDR
         OI    0(WORK2),RLD            SET RLDS PRESEND INDIC
         SR    WORK3,WORK2
         ST    WORK3,4(WORK2)          STORE RLD BYTE COUNT IN BUFFER
         TM    0(CURTXTCB),LASTXT      IS TEXT LAST IN GROUP
         BO    MVRLD60                 YES
         OI    NEWSW2,GROUPRLD         SET RLDS TO BE GROUPED INDIC
         ST    OUTRLDCB,SAVEBFCB       SAVE CTRL BLK ADDR
         B     MVRLD60                  YES, DET.IF MORE SETS IN GROUP
*                                            TO BE MOVED
*                                                                     *
* THE RLD OUTPUT BUFFER IS FULL --COMPLETE INFORMATION IN BUFFER      *
*        CONTROL RECORD AND BUFFER CONTROL BLOCK                      *
*                                                                     *
MVRLD170 L     WORK2,12(OUTRLDCB)
MVRLD180 ST    RLDSETAD,RESUMEAD        SAVE ADDR.OF WHERE TO RESUME
         NI    12(WORK2),CONTOFF        SET CONT. OFF IN PREV FA FIELD
         OI    NEWSW2,RPSAVED           SET R+P SAVED INDICATOR
         NI    NEWSW2,NOTINBFR         TURN OFF R-P IN BFR.
         L     WORK2,8(OUTRLDCB)        BUFFER BEGINNING
         L     WORK3,4(OUTRLDCB)        1ST FREE ADDR
         OI    0(WORK2),RLD             SET RLDS PRESENT INDIC
         SR    WORK3,WORK2
         ST    WORK3,4(WORK2)           STORE RLD BYTE COUNT IN BUFFER
         B     MVRLD00                  GO TO FIND FREE OUTPUT BUFFER
*                                                                     *
*      ALL RLD OUTPUT BUFFERS ARE FULL- FREE ONE FOR USE              *
*                                                                     *
MVRLD210 TM    1(CURTXTCB),PREV         CHECK IF ONE CONTAINS THE
         BC    7,MVRLD230                    1D-LENGTH LIST
         TM    1(CURTXTCB),XDAP         HAS DUMMY WRITE BEEN WRITTEN
         BO    MVRLD220                 YES
         TM    NEWSW2,MORERLDS          ARE THE MORE RLDS TO PROCESS
         BZ    MVRLD260                 NO
         OI    1(CURTXTCB),DUMMY        SET DUMMY WRITE INDICATOR
         L     BRANCHX,ADWRTTXT
         BALR  RETURN,BRANCHX           BRANCH TO WRITE DUMMY TXT
         OI    1(CURTXTCB),XDAP         SET XDAP INDICATOR
MVRLD220 LA    WORK1,OTRLDCB1          WRITE RLD RECORD 1
         L     WORK4,SAVE+16           RESTORE NEXT TXTCB ADDR FOR
*                                            WRTCRRLD CHECK
         L     BRANCHX,ADWRTCR
         BALR  RETURN,BRANCHX           BRANCH TO WRITE RLD RECORD
         NC    1(1,CURTXTCB),1(WORK1)    TAKE CR REC OFF TXTCB
         B     MVRLD00                  RETURN TO CONTINUE MOVES
*
MVRLD230 L     WORK1,SAVE+32           ADDR OF PREV. CONTROL RECORD CB
         OI    0(CURTXTCB),LASTXT       SET LAST TEXT IN GROUP
         L     WORK2,SAVE+16            NEXT TEXT CONTROL BLOCK
         TM    0(WORK2),INUSE           HAS SOME TEXT BEEN READ AHEAD
         BO    MVRLD250                 YES
         XC    GROUPLNG(2),GROUPLNG    CLEAR GROUP LENGTH
MVRLD240 L     BRANCHX,ADWRTCR
         L     WORK4,SAVE+16           RESTORE NEXT TXTCB ADDR FOR
*                                            WRTCRRLD CHECK
         BALR  RETURN,BRANCHX           BRANCH TO WRITE PREV CTRL. REC.
         NC    1(1,CURTXTCB),1(WORK1)    TAKE CR REC OFF TXTCB
         B     MVRLD00                  RETURN TO CONTINUE MOVES
MVRLD250 TM    0(WORK2),BEINGWT         IS IT BEING WRITTEN
         BO    MVRLD240                 YES
         OI    0(WORK2),FIRSTXT         SET 1ST TEXT IN GROUP INDIC.
         MVC   26(2,WORK2),24(WORK2)   CORRECT GROUP LENGTH
         L     WORK0,8(WORK2)
         SH    WORK0,24(WORK2)
         ST    WORK0,4(WORK2)          UPDATE BEG OF TEXT
         ST    WORK0,PREVBEG           UPDATE BEG. ADDR OF TEXT GROUP
         MVC   29(3,WORK2),CCWDISP+1   UPDATE CCW DISP
         MVC   GROUPLNG(2),24(WORK2)   UPDATE LNG FOR GROUPING
         B     MVRLD240
MVRLD260 TM    0(CURTXTCB),TESTWRT      HAS TEXT BEEN WRITTEN YET
         BC    11,MVRLD220              YES, GO TO WRITE RLD RECORD
         L     BRANCHX,ADWRTTXT
         BALR  RETURN,BRANCHX           BRANCH TO WRITE TEXT
         B     MVRLD220
*                                                                     *
*                        ERROR  ROUTINES                              *
*                                                                     *
ERROR01  OI    BITMAP+7,HEX1      SET INVALID TWO BYTE ADCON
         B     RELOC120                 RETURN TO PROCESS NEXT ADCON
ERROR02A OI    VCONSW,LEN3        TURN ON 3-BYTE VCON SWITCH     A48242
         B     RETRN              AND CONTINUE PROCESSING        A48242
ERROR02B NI    VCONSW,LN3OFF      TURN OFF 3-BYTE VCON SWITCH    A48242
ERROR02  OI    BITMAP+7,HEX2      SET INVALID VCON IN OVERLAY
         B     RELOC120                 RETURN TO PROCESS NEXT ADCON
ERROR    L     BRANCH,ERDIG
         LR    WORK0,RETURN             ERROR CODE
         BR    BRANCH                   GO TO ERROR DIAGNOSTICS ROUTINE
***    *     *     *    *    *    *    *    *    *    *    *    *   ***
*                                                                     *
*              ENTAB AND ENTAB/RLD CREATION ROUTINE                   *
*                                                                     *
***    *     *     *    *    *    *    *    *    *    *    *    *   ***
SCDENTAB EQU   *
         ST    RETURN,SAVERET
         L     WORK2,CURENTAB           HESD ADDR.OF CURRENT ENTAB
         LR    WORK3,WORK2
         S     WORK2,HESD
         SRL   WORK2,3
         STH   WORK2,CURID              CALC. ENTAB ID
*                                                                     *
*   MAKE ID-LENGTH LIST ENTRY FOR ENTAB, THEN WRITE THE CONTROL       *
*   RECORD.  THERE IS ALWAYS ROOM FOR THE ENTAB ID-LENGTH, BECAUSE    *
*           4 BYTES ARE LEFT IN EVERY RLD RECORD                      *
*                                                                     *
         TM    0(PREVCREC),INUSE       DOES PREV CR CONTAIN RLDS
         BO    SCDENT10                YES
         MVC   4(4,PREVCREC),8(PREVCREC) INIT 1ST FREE ADDR
         OI    0(PREVCREC),INUSE
         L     WORK2,8(PREVCREC)       BEG. OF BUFFER
         XC    0(16,WORK2),0(WORK2)    CLEAR THE CONTROL INFOR
SCDENT10 L     WORK2,4(PREVCREC)        1ST FREE ADDR IN PREV. CR
         MVC   16(2,WORK2),CURID        MAKE ID-LENGTH LIST ENTRY IN
         MVC   18(2,WORK2),6(WORK3)          PREV. CR.
         MVI   3(PREVCREC),X'04'        ID-LENGTH =4
         L     WORK2,8(PREVCREC)
         OI    0(WORK2),TXT             SET TEXT FOLLOWS IN CR
         MVC   26(2,CURTXTCB),6(WORK3)  LENGTH OF ENTAB TO CB
         MVC   9(3,WORK2),1(WORK3)      MOVE LKA TO CR
         MVC   LKAENTAB+1(3),1(WORK3)  GET LKA ADDR
         OI    8(WORK2),X'06'
         MVC   14(2,WORK2),6(WORK3)     ENTAB LENGTH TO CR
         OI    12(WORK2),X'40'
         LR    WORK1,PREVCREC
         L     BRANCHX,ADWRTCR
         BALR  RETURN,BRANCHX           GO TO WRITE PREV CTRL REC
         NC    1(1,CURTXTCB),1(PREVCREC) TAKE CR REC OFF TXTCB
*                                                                     *
*         CREATE ENTAB AND WRITE IT                                   *
*                                                                     *
         L     WORK1,TXTBFBEG           BEGINNING OF TEXT BUFFER
         ST    WORK1,4(CURTXTCB)        BEG.OF TEXT IN CB
         LH    WORK0,26(CURTXTCB)       LENGTH OF ENTAB
         SH    WORK0,TWELVE             INIT.  DISP.
         L     WORK3,SELST              START OF ENTRY LIST
SCDENT15 MVC   0(2,WORK1),BRINST        SET IN 1ST 2 BYTES OF ENTAB
         STH   WORK0,2(WORK1)           SET IN DISP.
SCDENT20 CLC   CURSEG+1(1),2(WORK3)     SEARCH ENTRY LIST FOR CUR.SEG.
         BNE   SCDNT25A                NOT FOUND
SCDENT25 LH    WORK2,0(WORK3)
         SLL   WORK2,3
         A     WORK2,HESD
         XC    4(8,WORK1),4(WORK1)
         MVC   5(4,WORK1),1(WORK2)      MOVE ADDR. AND SEG.NO.TO ENTAB
         LA    WORK1,12(WORK1)          INCR.TO NEXT LINE IN ENTAB
         SH    WORK0,TWELVE             DECR. DISP
         BZ    SCDENT30                 BRANCH WHEN OFFSET =0
SCDNT25A LH    WORK2,ENELTC            NO. ENTS IN ENTRY LIST
         MH    WORK2,SIX               MULTIPLY BY 6
         A     WORK2,SELST             ADD TO LIST BEG ADDR
         LA    WORK3,6(WORK3)          INCR TO NEXT LIST ENTRY
         CR    WORK3,WORK2             SEARCHED THRU WHOLE LIST?
         BNL   SCDENT31                YES
         B     SCDENT15
SCDENT31 LA    WORK1,12(WORK1)         UPDATE ENTAB ENTRY ADDR
         SH    WORK0,TWELVE            END OF ENTAB?
         BZ    SCDENT30                YES-GO TO CREATE LST LINE
         B     SCDENT31                NO-BRANCH BACK
SCDENT30 ST    WORK1,8(CURTXTCB)        LAST ENTRY ADDR.
         MVC   0(8,WORK1),SVCLINE       SET UP LAST LINE OF ENTAB
         LH    WORK3,ENSPX              GET SEGTAB ID
         SLL   WORK3,3
         A     WORK3,HESD
         MVC   9(3,WORK1),1(WORK3)      MOVE SEGTAB ADDR TO ENTAB
         MVC   8(1,WORK1),CURSEG+1      CURRENT SEG.NO. TO ENTAB
         NI    1(CURTXTCB),X'00'        CLEAR FLAG BITS OF TXTCB
         L     BRANCHX,ADWRTTXT
         BALR  RETURN,BRANCHX           BRANCH TO WRITE ENTAB
*                                                                     *
*    CREATE ENTAB RLDS IN OUTPUT BUFFER AND WRITE THEM OUT            *
*                                                                     *
         LA    PREVCREC,OTRLDCB1        USE BFR1 AND BFR2
         LA    WORK3,OTRLDCB2
         L     WORK1,LKAENTAB           ADDR. OF BEG.OF ENTAB
         LA    WORK1,4(WORK1)           INCR. TO FIRST LKA
         LH    WORK0,26(CURTXTCB)
         A     WORK0,LKAENTAB
         SH    WORK0,TWELVE             ADDR.OF LAST ENTRY IN ENTAB
SCDENT50 L     WORK2,8(PREVCREC)        ADDR. OF RLD BFR.BEG.
         OI    0(PREVCREC),INUSE       MARK RLD CTRL BLK IN USE
         XC    0(16,WORK2),0(WORK2)     CLEAR CTRL.REC.
         MVC   4(4,PREVCREC),8(PREVCREC)
         OI    0(WORK2),RLD             SET RLDS PRESENT INDIC.
         XC    16(2,WORK2),16(WORK2)    SET R PTR.TO ZERO
         MVC   18(2,WORK2),CURID        SET P PTR = ENTAB ID
SCDENT60 LA    WORK2,4(WORK2)           UPDATE 1ST FREE ADDR.
         CL    WORK2,12(PREVCREC)       ROOM FOR 4 BYTES IN BUFFER
         BNL   SCDENT80                 NO
         ST    WORK1,16(WORK2)          MAKE RLD FA FIELD FOR ENTAB
         MVI   16(WORK2),X'1D'               ENTRY
         LA    WORK1,12(WORK1)          UPDATE TO NEXT LKA FIELD
         CR    WORK1,WORK0              RLD FOR EACH 12 BYTES OF ENTAB
         BL    SCDENT60                 NO
         AH    WORK1,FIVE               INCR. TO SEGTAB ADDR.
         ST    WORK1,20(WORK2)          UPDATE LAST RLD ITEM TO POINT
         MVI   20(WORK2),X'18'               TO SEGTAB ADDR.
         L     WORK1,8(PREVCREC)        BEG.OF BFR.
         LA    WORK2,8(WORK2)          UPDATE FOR LAST 2 RLD ENTRIES
         S     WORK2,8(PREVCREC)        RLD BYTES
         STH   WORK2,6(WORK1)           SET RLD BYTES IN CR.
         OI    0(WORK1),SEGEND          SET END OF SEG.INDIC.IN CR
         CLC   CURSEG(2),ENSPC          IS THIS LAST SEGMENT
         BNE   SCDENT70                 NO
         OI    0(WORK1),MODEND          YES,SET END OF MOD. INDIC.IN CR
SCDENT70 LR    WORK1,PREVCREC
         L     BRANCHX,ADWRTCR
         BALR  RETURN,BRANCHX           BRANCH TO WRITE RLD RECORD
         NC    1(1,CURTXTCB),1(PREVCREC) TAKE CR REC OFF TXTCB
         L     WORK1,CURENTAB
         LA    WORK1,8(WORK1)           UPDATE TO NEXT ENTAB ENTRY
         ST    WORK1,CURENTAB
         MVC   LKAENTAB+1(4),1(WORK1)  GET LKA AND SEG NO OF NEXT ENTAB
         OI    APT3,SEGSTART           SET 1ST TEXT OF SEG INDIC
         XC    0(3,CURTXTCB),0(CURTXTCB)  CLEAR INDIC IN CURR. TXT CB
         XC    GROUPLNG(2),GROUPLNG    INIT GROUP CT. FOR NEXT SEG.
         L     RETURN,SAVERET
         BR    RETURN                   RETURN TO PROCESS NEXT SEGMENT
SCDENT80 S     WORK2,8(PREVCREC)        BYTES OF RLD
         ST    WORK1,TEMPAREA          SAVE ADDR OF ADCON
         L     WORK1,8(PREVCREC)
         STH   WORK2,6(WORK1)           BYTES OF RLD INFO IN CR
         LR    WORK1,PREVCREC
         L     BRANCHX,ADWRTCR
         BALR  RETURN,BRANCHX           BRANCH TO WRITE AN RLD RECORD
         NC    1(1,CURTXTCB),1(PREVCREC) TAKE CR REC OFF TXTCB
         XR    PREVCREC,WORK3           SWITCH BUFFERS
         XR    WORK3,PREVCREC
         XR    PREVCREC,WORK3
         L     WORK1,TEMPAREA          RESTORE ADDRESS OF ADCON
         B     SCDENT50
MOVE     MVC   0(1,WORK1),0(WORK3)
*                     ******************
         DS    0F
TXTCB1   EQU   *                   TEXT CONTROL BLOCK
         DC    F'0'                FLAGS
         DC    F'0'                BEGINNING ADDRESS OF TEXT IN BUFFER
         DC    F'0'                END ADDRESS OF TEXT IN BUFFER
         DC    F'0'                ADDRESS OF TXTIOT ENTRY MARKING THE
*                                       BEGINNING OF THE TEXT GROUPING
         DC    F'0'                ADDRESS OF TXTIOT ENTRY FOR TEXT
*                                       BEING PROCESSED
         DC    F'0'                ADDRESS OF TXTIOT ENTRY MARKING THE
*                                       END OF THE TEXT GROUPING
         DC    H'0'                LENGTH OF CURRENT TEXT
           DC    H'0'                ACCUMULATED TEXT LENGTH
         DC    F'0'                    CCW DISPLACEMENT
TXTCB2   EQU   *                   TEXT CONTROL BLOCK
         DC    F'0'                FLAGS
         DC    F'0'                BEGINNING ADDRESS OF TEXT IN BUFFER
         DC    F'0'                END ADDRESS OF TEXT IN BUFFER
         DC    F'0'                ADDRESS OF TXTIOT ENTRY MARKING THE
*                                       BEGINNING OF THE TEXT GROUPING
         DC    F'0'                ADDRESS OF TXTIOT ENTRY FOR TEXT
*                                       BEING PROCESSED
         DC    F'0'                ADDRESS OF TXTIOT ENTRY MARKING THE
*                                       END OF THE TEXT GROUPING
         DC    H'0'                LENGTH OF CURRENT TEXT
         DC    H'0'                ACCUMULATED TEXT LENGTH
         DC    F'0'                    CCW DISPLACEMENT
OTRLDCB1 EQU   *                   RLD OUTPUT CONTROL BLOCK
         DC    X'00DB'
         DC    H'0'                BYTES OF ID-LENGTH LIST
         DC    F'0'                ADDRESS OF 1ST FREE ADDR. IN BUFFER
         DC    F'0'                ADDRESS OF BEGINNING OF BUFFER
         DC    F'0'                ADDRESS OF END OF BUFFER
OTRLDCB2 EQU   *                   RLD OUTPUT CONTROL BLOCK
         DC    X'00ED'
         DC    H'0'
         DC    F'0'
         DC    F'0'
         DC    F'0'
OTRLDCB3 EQU   *                   RLD  OUTPUT CONTROL BLOCK
         DC    X'00F6'
         DC    H'0'
         DC    F'0'
         DC    F'0'
         DC    F'0'
INRLDCB1 EQU   *                   RLD INPUT CONTROL BLOCK
         DS    1X                  FLAGS
         DS    3X                  LOWEST RLD ADDRESS OF UNPROCESSED
*                                       RLD'S IN RLD SET
         DC    F'0'                ADDRESS OF BEGINNING OF BUFFER
         DC    F'0'                ADDRESS OF RLDION ENTRY MARKING THE
*                                       BEGINNING OF RLD GROUPING
         DC    F'0'                ADDRESS OF CURRENT RLDION ENTRY
*                                       BEING PROCESSED
         DC    F'0'                ADDRESS OF RLDION ENTRY MARKING THE
*                                       END OF THE RLD GROUPING
INRLDCB2 EQU   *                   RLD INPUT CONTROL BLOCK
         DS    1X
         DS    3X
         DC    F'0'
         DC    F'0'
         DC    F'0'
         DC    F'0'
*                   SAVE AREAS
LENGTH   DS    1H                       LENGTH OF ADCON-1
DLNKR    DS    1H                       DELINK R SAVED
RSAVE    DS    1H                       SAVE AREA FOR R PTR
RLDBYTES DS    1H                       BYTES OF RLD INFO IN RLD SET
SAVERET  DS    16F                      SAVE AREA FOR RETURN REG
MULTBEG  DS    1F                      BEG BUFFER ADDR OF MULT
MULTEND  DS    1F                      END BUFFER ADDR OF MULT
RESUMEAD DS    1F                       ADDR OF REMAINING FA'S IN CHAIN
RLDSTEND DS    1F                       RLD SET END ADDR.
BFREL    DS    1F                       BUFFER RELOCAND
ADCON    DS    1F                       ADCON MOVED HERE FOR ALIGNMENT
TXTBEG   DS    1F                      BEGINNING OF TXT FOR CURR ID
PREVRPAD DS    1F                      ADDR  OF LAST R + P PTR.
SAVE13   DS    1F                      TEMPORARY SAVE AREA FOR REG. 13
TEMPAREA DS    1F                       TEMP SAVE AREA
ADCONADR DS    1F                      TEXT BUFFER ADDR OF ADCON
RELADCON DS    1F                       BEGIN ADDR OF RELOCATE ADCON
SAVEBFCB DS    1F                      PREV RLD BUFFER CB SAVE AREA
DLNKSAVE DC    F'0'                    SAVE DELINK VALUE
INPUTADR DS    1F                      ADDR OF CSECT ON INPUT
TEMP     DS    1H                      TEMPORARY SAVE AREA
*                                         IN WORK AREA
SAVE     DS    18F                      SAVE AREA FOR HEWLFREL
*                   CONSTANT AREAS
SIXFULL  DC    F'6'
OF       DC    X'00FFFFFF'             SET FLAGS & RLD ADDR IN RLD CB
FF       DC    X'FFFFFF'                COMPARE FOR UPDATE MULTIPLICITY
VCONSW   DC    X'00'                   VCON LENGTH SWITCH        A48242
LEN3     EQU   X'80'                   VCON LENGTH = 3 BYTES     A48242
LN3OFF   EQU   X'7F'                   TO TURN OF LEN3 BIT       A48242
THREE    DC    H'3'
FOUR     DC    H'4'
FIVE     DC    H'5'
SIX      DC    H'6'                    DECIMAL 6
SEVEN    DC    H'7'
EIGHT    DC    H'8'
TWELVE   DC    H'12'
CON256   DC    H'256'
BRINST   BC    15,0(15)
SVCLINE  SVC   45
         L     15,4(15)
         BCR   15,15
ADWRTTXT DC    V(WRTTXT)                WRITE TEXT ROUTINE
ADWRTCR  DC    V(WRTCRRLD)              WRITE CR/RLD ROUTINE
ADCHKWRT DC    V(CHECKWRT)              ADDR. OF CHECK ROUTINE(WRITE)
ADCHKRD  DC    V(CHECKRD)               ADDR. OF CHECK ROUTINE(READ)
ADGET    DC    V(GETIDMUL)              ADDR OF LOOKAHEAD/READAHEAD
PATCH    DS    25F     ********PATCH AREA   **************************
         HEWAPT
CURENTAB EQU   IOCT                     HESD ADDR.OF NEXT ENTAB ENTRY
LKAENTAB EQU   IOCT+4                   ENTAB LKA
GROUPLNG EQU   IOCT+10                  ACCUMULATED GROUP LENGTH
CCWDISP  EQU   IOCT+12                 CCW DISP ACEMENT
SPLITADR EQU   IOCT+16                  SPLIT RLD ADDR.IN INPUT BUFFER
CBTOUSE  EQU   IOCT+20                  CTRL.BLK.ADDR.FOR BFR.WITH
*                                            SPLIT RLD
CURSEG   EQU   EPSM                     CURRENT SEGMENT
RPPTRS   EQU   EPSM+2                   SAVED R PTR.FOR CHAINING
CURID    EQU   EPSM+4                   CURREND ID
CURMULT  EQU   EPSM+6                   CURRENT MULTIPLICITY
SRCHBEG  EQU   SPACES+56               WHERE TO RESUME SEARCH OF
*                                           TXTIOT FOR NEW ID
CURENTRY EQU   SPACES+60           FIRST FREE ENTRY IN ENTRY LIST
FREEADDR EQU   SPACES+64               FIRST FREE ADDR IN TEXT BUFFER
PREVBEG  EQU   SPACES+68               ADDR OF 1ST TEXT OF GROUP
         END
