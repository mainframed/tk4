         TITLE 'HEWLFESD  ESD CARD PROCESSOR'
*FUNCTION/OPERATION: THIS MODULE PROCESSES THE ESD CARDS PRODUCED BY  *
*      ASSEMBLERS AND COMPILERS. IT ALSO PROCESSES THE ESD RECORDS    *
*      WHICH ARE THE OUTPUT OF A PREVIOUS LINK EDIT. AS EACH ESD ITEM *
*      IS ENCOUNTERED,IT IS ENTERED IN THE COMPOSITE ESD. IF THE      *
*      SYMBOL IS UNIQUE, THE ITEM IS ENTERED IN A NEW LINE, OTHERWISE *
*      THE HIERARCHIAL RULES OF ESD TYPES APPLY AND THE EXISTING      *
*      LINE IS MODIFIED. FOLLOWING ARE A FEW EXAMPLES OF COLLECTION.  *
*      SECTION DEFINITION + EXTERNAL REFERENCE = SECTION DEFINITION   *
*      LABEL DEFINITION + EXTERNAL REFERENCE = LABEL DEFINITION       *
*      EXTERNAL REFERENCE + EXTERNAL REFERENCE = EXTERNAL REFERENCE   *
*                                                                     *
*      PSEUDO REGISTERS MAY ONLY COLLECT PSEUDO REGISTERS,E.G.        *
*      A PR CANNOT COLLECT AVER BUT MAY ONLY COLLECT A PR .           *
*                                                                     *
*      IN THE PROCESS OF CREATING THE COMPOSITE ESD, THE ESD PROCESSOR*
*      ALSO CREATES THE RENUMBERING TABLE WHICH IS A TRANSLATION TABLE*
*      USED TO CHANGE ID'S FROM ESD-RELATIVE, TO CESD-RELATIVE.       *
*                                                                     *
*ENTRY POINTS  HEWLFESD - BEGINNING OF CSECT  -  LA  13,SAVEAREA      *
*                                                  BALR 14,15         *
*INPUT:                      -REGISTERS-                              *
*      REGISTER 4 - BYTE COUNT OF ESD ITEMS TO BE PROCESSED           *
*      REGISTER 5- ID OF FIRST ESD ITEM INPUT TO ESD PROCESSOR        *
*      REGISTER 6- ADDRESS OF FIRST ESD ITEM TO BE PROCESSED          *
*                            - OTHER INPUT -                          *
*      THE BASIC INPUT IS THE ESD RECORD ITSELF WHICH IS READ BY THE  *
*      INPUT PROCESSOR                                                *
*                                                                     *
*OUTPUT:  THE COMPOSITE EXTERNAL SYMBOL DICTIONARY(CESD)              *
*         THE RENUMBERING TABLE(RNT)                                  *
*           NEITHER OF THE ABOVE TABLES IS OUTPUT TO AN I/O DEVICE    *
*           BUT THEY ARE USED IN SUBSEQUENT PROCESSES                 *
*EXTERNAL ROUTINES: HEWLFLOG- WRITES ERROR DIAGNOSTIC CODE            *
*          HEWLCDLK - DELINK ROUTINE - IF AN RLD ITEM REQUIRES A      *
*                     DELINK VALUE, THIS ROUTINE SAVES IT IN THE      *
*                     DELINK TABLE                                    *
*                     CALLING SEQUENCE - BALR 14,15                   *
*EXITS-NORMAL:  AFTER ALL ESD ITEMS INPUT HAVE BEEN PROCESSED,CONTROL *
*               RETURNS TO THE INPUT PROCESSOR VIA REGISTER 14        *
*EXITS-ERROR:   THERE ARE NO ERROR EXITS TO THE SYSTEM. ALL ERRORS    *
*               ARE RELAYED THROUGH THE ERROR DIAGNOSTIC ROUTINE      *
*               WHICH THEN DECIDES WHETHER TO PROCEED OR STOP         *
*                                                                     *
*TABLES/WORK AREAS: NO INTERNAL TABLES ARE USED                       *
*ATTRIBUTES: REUSABLE                                                 *
*NOTES: N/A                                                           *
HEWLFESD CSECT
**********************************************************************
*437000-442000                                                   S01904
*A442000,435000                                                   M4320
*A342500                                                        OX00027
*C305000,D307000-308000                                         OY00577
*SEE FIX FOR X4241,ALSO A721600-721700,A580667                  OX00822
*C081000                                                        OY00131
*SEE FIX FOR X4241                                               XM1786
*C343000,C348000                                                OX02010
*A359500-359960,C360000                                          XM4628
*     SEE FIX FOR XM4628                                        OX02833
*C65400                                                   OX3508,OY3042
*I533000,D579520-580532                                   OX3919,OY3210
*C262000-263000,C486000,I486000                                 XA05436
* SEE FIX FOR XA05436                                           YA03749
*C359600-359700,C359900,C359940,D359960-360000                  XA04649
* SEE FIX FOR XA04649                                           YA03751
*I533992,D533996                                        XA06871,ZA00835
* C263000,D263500-264960,D486500-486992,C492000,I499500         ZA01413
* I509000,C589000,C594000-595000,I597000,I721000                ZA01413
*C081000                                                       @XA11151
        ENTRY HEWLCE30
         ENTRY HEWLCTTY
        ENTRY HEWLCRID
SYSRET   EQU   14
RNT      EQU   5
TEMP2    EQU   4
CESDCHN  EQU   14
SD       EQU   X'00'
NULL     EQU   X'07'
CESDID   EQU   9
CESDORG  EQU   9
ESDORG   EQU   9
CESDSEG  EQU   12
RNTTYPE  EQU   3
RNTFLAG  EQU   2
CM       EQU   X'05'
TEMP     EQU   10
CESDLEN  EQU   13
SYSBRNCH EQU   15
ESDLEN   EQU   13
CESDTYPE EQU   8
CESDNAME EQU   0
ESDNAME  EQU   0
CESDTF   EQU   10
CESDXR   EQU   7
LABELDEF EQU   X'01'
LD       EQU   X'01'
PC       EQU   X'04'
LR       EQU   X'03'
INTERNAL EQU   13
SUBTYPE  EQU   13
ER       EQU   X'02'
ESDSEG   EQU   12
PR       EQU   X'06'
ESDTYPE  EQU   8
ESDADD   EQU   6
APT      EQU   2
CESD     EQU   3
BASE     EQU   12
AUTOLIB  EQU   X'40'
ESDWRITE EQU   X'01'
NOLENBIT EQU   X'40'
TEMP1    EQU   8
TEMP4    EQU   0
TEMP3    EQU   1
OVBIT    EQU   X'20'
TBLONUM  EQU   X'10D'
REGSAVE  EQU   76
OBJCTMOD EQU   X'20'
RETURN   EQU   11
BYTECNT  EQU   4
RNTID    EQU   0
RNTR     EQU   4
COM      EQU   X'04'
ESDOVFLW EQU   X'419'
RNTOFLOW EQU   X'41A'
ERR23    EQU   X'417'                                  @XA11151,OY00131
WX       EQU   X'0A'               WXTERN ESD ITEM
WRKREG0  EQU   0                       WORK REGISTER 0
WRKREGE  EQU   14                      WORK REGISTER 14
WRKREGF  EQU   15                      WORK REGISTER 15
         USING HEWLFESD,BASE
         USING APTDSECT,APT   ESTABLISH ADDRESSABILITY FOR APT
         STM   SYSRET,BASE,12(INTERNAL) SAVE CALLERS REGISTERS
         LR    BASE,SYSBRNCH            BASE IN 12
         B     OVERNAME                BRANCH AROUND MODULE IDENT
MODID    DC    C'HEWLFESD'
         DC    C'10/15/75'
         DC    C'OZ02229 '
         DC    0H'0'
OVERNAME ST    INTERNAL,SAVEAREA        SAVE ADDRESS OF SAVEAREA
         ST    SYSRET,REG24SA
         TM    APT1,OBJCTMOD       IS INPUT OBJECT MODULE
         BC    1,ESD01                  NO BRANCH
         CH    BYTECNT,C56              IS BYTE COUNT GR 56
         BC    2,BADCARDO               YES ERROR
         BC    15,ESD02
ESD01    CH    BYTECNT,C240             IS BYTE COUNT GR 240
         BC    2,BADCARDL               YES ERROR
ESD02    SRL   BYTECNT,4                NUMBER OF ESD ITEMS
         LTR   BYTECNT,BYTECNT  IS BYTE COUNT LESS THAN 16 DECIMAL
         BC    8,BADCARDO    NO-CONTINUE--YEW--PRINT ERROR
         STM   BYTECNT,RNT,REGSA4
*              INITIALIZE ALL BASES AND INDEXES
         L     RNT,RECNT           RENUMBERING TABLE BASE REGISTER
         L     CESD,CHESD          CESD BASE REGISTER
*              EXTRACT BITS 5,6,7 OF TYPE AND MAKE IT A BYTEFULL
ESD1     MVC   TESTYPE(1),ESDTYPE(ESDADD)
*              MOVE ESD TYPE TO INTERNAL WORK AREA
         LR    CESDXR,CESD              SAFETY FOR IDCESD
         NI    ESDTYPE(ESDADD),X'1F'   CLEAR ALL FLAGS EXCEPT DELETE
         NI    TESTYPE,X'0F'       CLEAR DELETE BIT
*              IS ESD TYPE PR
         TM    APT1,OBJCTMOD       IS INPUT OBJECT MODULE
         BC    1,ESD1A0                NO-BRANCH
         NI    ESDTYPE(ESDADD),X'EF'   CLEAR DELETE BIT
ESD1A0   CLI   TESTYPE,PR
         BC    8,ESD2
*              YES-BRANCH TO ESD2 NOT TO DESTROY ALIGNMENT FIELD
*              NO-CONTINUE
         MVC   ESDSEG(1,ESDADD),CSNO+1
*              SET ESD SEGMENT NUMBER FIELD TO THE CURRENT SEGMENT
*              IF AUTOMATIC LIBRARY CALL IS IN OPERATION, THE CURRENT *
*              SEGMENT NUMBER IS ONE                                  *
         TM    APT1,AUTOLIB
         BC    8,ESD1A
         MVI   ESDSEG(ESDADD),1
*              IS ESD TYPE AN ER                                      *
ESD1A    CLI   TESTYPE,ER          IS TYPE ER
         BC    8,ESD1B             YES
         CLI   TESTYPE,WX          IS TYPE WX
         BC    7,ESD2              NO
*              NO-BRANCH TO ESD2
*              YES-CONTINUE
*              CLEAR BYTE 9 OF THE ER FOR AUTOMATIC LIBRARY CALL      *
ESD1B    XC    ESDORG(3,ESDADD),9(ESDADD)
         TM    APT1,OBJCTMOD
*              IS INPUT OBJECT MODULE
*              NO-BRANCH TO ESD2
*              YES-CONTINUE
*              ALL ERS  FROM OBJECT MODULES ARE PURE ERS(BYTE 13 = 0) *
         BC    1,ESD2
         MVI   SUBTYPE(ESDADD),X'00'
ESD2     L     TEMP,RCCB
*              ARE THERE ANY REPLACE/CHANGE CARDS IN CHAIN            *
         LTR   TEMP,TEMP
         BC    8,ESD3
*              YES-CONTINUE BY BRANCHING TO REPLACE/CHANGE CARD PROCESS
         L     INTERNAL,RPCHGADD
         BALR  RETURN,INTERNAL
*              REPLACE/CHANGE CARD PROCESSOR RETURNS HERE
ESD3     CLI   TESTYPE,PC
*              IS ESD TYPE PRIVATE CODE
*              YES-BRANCH TO ENTER PC AT CURRENT LINE + 1
*              NO-CONTINUE TESTING FOR LABEL DEFINITION
         BC    8,ESD20
         CLI   TESTYPE,NULL            IS TYPE A NULL
         BC    8,RENUMBER              YES , BRANCH
*              IS ESD TYPE LABEL DEFINITION
         CLI   TESTYPE,LD
*              NO-BRANCH TO ESD4 TO SEARCH THE CESD
*              YES-CHANGE TYPE TO LR AND SET LABEL DEFINITION BIT ON
         BC    7,ESD4
         MVI   TESTYPE,LR
         OI    INTERN1,LABELDEF
ESD4     LR    CESDXR,CESD
*              INITIALIZE CESD LOOP
         LH    CESDTF,ENCDC
         LA    CESDTF,1(CESDTF)
ESD5     LA    CESDXR,16(CESDXR)
*              IS CESD LOOP DONE
         BCT   CESDTF,ESD6
*              YES-BRANCH TO NON-RESOLUTION PROCESSING
         B     ESD23             BRANCH TO ENTER ESD ITEM
*              NO-CONTINUE CHECKING FOR A SYMBOL MATCH
ESD6     CLC   ESDNAME(8,ESDADD),CESDNAME(CESDXR)
*              DO ESD AND CESD SYMBOLS MATCH
*              NO-CONTINE CESD SEARCH
         BC    7,ESD5
*              YES-PERFORM COLLECTION OF ESD AND CESD TYPES
*              EXTRACT CESD TYPE FOR TESTING PURPOSES
ESD6A    EQU   *
         MVC   CESDTTYP(1),CESDTYPE(CESDXR)
         NI    CESDTTYP,X'0F'
         BAL   RETURN,IDCESD
         CLI   CESDTTYP,NULL
         BC    8,ESD5
         CLI   TESTYPE,PR
*              IS ESD TYPE PSEUDO REGISTER
*              YES-A PSEUDO REGISTER MAY ONLY COLLECT ANOTHER
         BC    8,ESD9
*              NO-THE CESD TYPE MAY BE A PSEUDO REGISTER
*              IS CESD TYPE PSEUDO REGISTER OR NULL
         CLI   CESDTTYP,PR
*              YES-RETURN TO CESD SEARCH
         BC    8,ESD5
         CLI   CESDTTYP,NULL       IS TYPE NULL
         BC    8,ESD5
*              NO-CONTINUE
*
*        PROCESS WX'S  HERE.  IF WX MATCHES ANYTHING BUT ANOTHER
*        WX, CHANGE THE TYPE TO ER AND PROCESS NORMALLY.
*
         CLI   TESTYPE,WX          IS INPUT ESD TYPE WX
         BC    7,ESD6B             NO - BRANCH
*        INPUT ITEM IS WX
         CLI   CESDTTYP,WX         IS CESD A WX
         BC    7,ESD6C             NO - BRANCH
         B     RENUMBER            BOTH TYPES ARE WX
*        ONLY  INPUT ITEM IS WX
ESD6C    CLI   CESDTTYP,ER         IS CESD TYPE ER
         BNE   ESD6D               NO
         CLI   SUBTYPE(CESDXR),X'80'  IS CESD ITEM A CONTROL CARD
         BC    2,ESD5              YES - CONTINUE CESD LOOP
ESD6D    MVI   TESTYPE,ER          CHANGE INPUT ITME TO ER
         MVI   ESDTYPE(ESDADD),ER
         B     ESD7                CONTINUE
ESD6B    CLI   CESDTTYP,WX         IS CESD TYPE WX
         BC    7,ESD7              NO - BRANCH
*        ONLY CESD TYPE IS WX - CHANGE TO ER
         NI    CESDTTYP,X'F7'          CHANGE CESD ITEM TO ER
         NI    CESDTYPE(CESDXR),X'F7'  CHANGE CESD ITEM TO ER
ESD7     TM    CESDTYPE(CESDXR),X'40' IS TYPE CHAIN
*              YES-BRANCH TO RESET CESD INDEX TO CHAIN VALUE
         BC    1,ESD13
*              IS CESD TYPE ER
         LA    RETURN,ESD23A
         CLI   CESDTTYP,ER
*              YES-SEE IF IT IS A CONTROL CARD
         BC    8,ESD12
*              IT IS NOT AN ER OR CONTROL CARD
         CLI   TESTYPE,LR
*              IS ESD TYPE LR
         BC    7,ESD14
*              NO-BRANCH FOR FURTHER EXAMINATION OF ESD TYPE
*              YES-PERFORM LABEL REFERENCE RESOLUTION
         OI    INTERN1,X'02'
*              SET MATCH BIT ON INTERNALLY
         BC    15,LABEL
ESD9     CLI   CESDTYPE(CESDXR),PR
*              IS CESD TYPE A PSEUDO REGISTER
         BC    7,ESD5
*              NO-RETURN TO THE CESD SEARCH
*              YES-BOTH ESD AND CESD TYPES ARE PSEUDO REGISTERS
         CLC   ESDLEN(3,ESDADD),CESDLEN(CESDXR)
*              IS ESD LENGTH GREATER THAN CESD LENGTH
*              NO-BRAN.H TO CHECK ALIGNMENT
         BC    4,ESD10
*              YES SET CESD LENGTH TO ESD LENGTH
         MVC   CESDLEN(3,CESDXR),ESDLEN(ESDADD)
ESD10    OC    CESDSEG(1,CESDXR),ESDSEG(ESDADD)
*              SET CESD ALIGNMENT TO THE HIGHER OF THE TWO VALUES
         BC    15,RENUMBER
ESD12    CLI   SUBTYPE(CESDXR),X'80'
*              IS CESD SUBTYPE FOR A CONTROL CARD
         BC    2,ESD5
*              YES-CONTINUE CESD LOOP
*              NO-RESUME PROCESSING
         OI    INTERN1,MATCHER         SHOW WE MATCHED AN ER
*              IS ESD TYPE CM,SD,LR
         CLI   TESTYPE,X'02'            IS INPUT ITEM AN ER     XA05436
         BNE   ESD17                    BRANCH IF NOT   XA05436,ZA01413
         TM    ESDTYPE(ESDADD),X'10'    IS INCOMING ITEM DELETE/REPLACE
         BC    8,ESD12A                 NO-BRANCH
         TM    CESDTYPE(CESDXR),X'10'   IS CESD TYPE DELETE/RELPACE
         BC    8,ESD15A                 NO
*                                       CESD ITEM IS ALSO DEL/REP
         TM    SUBTYPE(CESDXR),X'08'         IS IT A DELETE
         BC    8,ESD15A                 NO BRANCH
         TM    SUBTYPE(ESDADD),X'08'    IS ESD TYPE A DELETE
         BC    8,CESDDLNK               NO BRANCH
         BC    15,ESD23                 DELETE-DELETE CAUSES BOTH LINES
*                                       TO BE ENTERED
ESD12A   TM    SUBTYPE(ESDADD),X'07'    IS SUBTYPE A PURE ER
         BC    5,ESD17
         NI    SUBTYPE(CESDXR),X'F7'    CLEAR DELETE BIT MAKING SUBTYPE
*                                       A REPLACE
         TM    SUBTYPE(CESDXR),X'06'    IS SUBTYPE A NO CALL
*                                       OR LIBR ARY MEMBER
         BC    9,RENUMBER               NO BRANCH
         OI    SUBTYPE(CESDXR),X'01'    YES IT IS-MARK CESD MATCHED
         BC    15,RENUMBER
*              RESET CESD INDEX TO CHAIN VALUE AND THEN BRANCH BACK TO*
*              EXAMINE THE TYPE OF THE LINE TO WHICH THIS WAS CHAINED *
ESD13    LH    TEMP,CESDCHN(CESDXR)
         SLL   TEMP,4
         LA    CESDXR,0(TEMP,CESD)
         BC    15,ESD6A
ESD14    CLI   TESTYPE,SD
*              IS ESD TYPE SD
         BC    7,ESD18
*              NO-BRANCH FOR FURTHER EXAMINATION OF ESD TYPE
*              YES-PERFORM SECTION DEFINITION RESOLUTION
         CLI   CESDTTYP,CM
*              IS CESD TYPE CM
         BC    7,ESD15
*              NO-CONTINUE RESOLUTION
*        YES! COMPARE LENGTH FIELDS.CM SHOULD BE  SMALLER OR EQUAL.
*        IF IT'S NOT WE'LL GIVE ERROR MESSAGE AND TAKE CM LENGTH.222116
         CLC   ESDLEN(3,ESDADD),CESDLEN(CESDXR)
         BNL   ESD38
         CLC   ESDLEN(3,ESDADD),ZERO3  IS SD LENGTH ZERO?
         BNE   COMMON1                YES. GOTO PRINT ERROR MSG OY00577
*                               'COMMON AND SUBROUTINE-SAME NAME
ESD14A   LR    TEMP3,CESDXR            NAME OF COMMON FOR MSG
         LH    TEMP4,ERR57             ERR NUMBER,SEVERITY,DISP
         L     SYSBRNCH,ERDIG          ADDR. OF ERROR ROUTINE
         BALR  SYSRET,SYSBRNCH         GO TO PRINT MSG
         B     ESD38                   CONT. PROCESSING SD ITEM
*              BRANCH TO SECTION DEFINITION PROCESSING
ESD15    CLI   CESDTTYP,LR
*              IS CESD TYPE LABEL REFERENCE
         LA    RETURN,ESD15A
         BC    8,DBLDEF
*              YES-BRANCH TO ERROR ROUTINE FOR DOUBLE LABEL DEFINITION
*              NO-CONTINUE
ESD15A   LA    RETURN,ENTER
*              BRANCH TO DELETE CHAIN ROUTINE FOR AUTOMATIC REPLACE   *
         BC    15,DELCHN
*              IF THE ESD TYPE IS NOT MARKED DELETE,RENUMBER IT       *
ESD16    TM    ESDTYPE(ESDADD),X'10'
         BC    8,RENUMBER
*              IT IS DELETE SO BRANCH TO DELETE CHAIN ROUTINE
         BC    15,ESD15A
*              IS SUBTYPE UNMATCHED LIBRARY MEMBER
ESD17    OI    INTERN1,X'08'
         TM    8(CESDXR),X'10'         IS CESD DELETE
         BC    1,CESDDLNK               DELINK IT
ESD17A   TM    13(CESDXR),X'06'        IF CESD TYPE IS LIBRARY MEMBER
         BCR   9,RETURN                DECHAIN IT
         TM    13(CESDXR),X'04'
         BCR   1,RETURN
         L     SYSBRNCH,ADDDECHN
         BCR   15,SYSBRNCH
ESD18    CLI   TESTYPE,CM
*              IS ESDTYPE COMMON
         BC    7,ESD16
*              NO-BRANCH FOR ER PROCESSING                            *
         OI    INTERN1,COM         INTERNAL COM BIT FOR DELINK OX00027
         CLI   CESDTTYP,PC                                      OX02010
*              IS CESD TYPE PC
         BC    8,ESD5
*              YES-NO MATCH RESULTS
         LA    RETURN,ESD15A
         CLI   CESDTTYP,LR                                      OX02010
*              IS CESDTYPE A LABEL
         BC    8,DBLDEF
*              YES-BRANCH TO ERROR FOR DOUBLE LABEL DEFINITION MESSAGE
*              SET ESD TYPE TO CESD TYPE
*              SET ESD TYPE TO DELETE AND THEN BRANCH TO THE COMMON   *
*              ROUTINE
         BC    15,COMMON
*                                                                     *
*                   UNMATCHED  PC  PROCESSING BEGINS HERE             *
*                                                                     *
ESD20    EQU   *                                                 XM4628
         BAL   RETURN,NXTLINE          GET NEXT CESD ITEM       XA04649
         NC    ESDLEN(3,ESDADD),ESDLEN(ESDADD) IS IT 0 LENGTH?   XM4628
         BNZ   ESD21                 BRANCH IF NO        XM4628,XA04649
         OI    TESTYPE,DELETE        MARK DELETE                 XM4628
         B     ENTER                 ENTER IN RNT        XM4628,XA04649
ESD21    TM    APT1,AUTOLIB
*              IS AUTOMATIC LIBRARY CALL IN OPERATION                 *
         BC    8,ESD22
*              NO-BRANCH AROUND
*              YES-SET BIT 0 OF TYPE TO A ONE
         OI    ESDTYPE(ESDADD),X'80'
ESD22    OI    APT1,ESDWRITE
*              SET ESD WRITE INDICATOR ON
*              IS LENGTH FIELD IN ESD BLANKS
         NC    ESDLEN(3,ESDADD),ESDLEN(ESDADD)
         BC    4,ENTER
*              NO-ENTER THE LINE IN THE CESD
*              YES-IS NO LENGTH BIT ON
         TM    APT2,NOLENBIT
*              YES-IGNORE IT                                          *
         BC    1,ENTER
         OI    APT2,NOLENBIT
*              SET NOLENGTH BIT ON AND SAVE THE LINE ADDRESS IN APT   *
         ST    CESDXR,PDSE18
         BC    15,ENTER
**********            NON RESOLUTION PROCESSING BEGINS HERE  **********
ESD23    BAL   RETURN,FREELINE
*              SET CESD INDEX TO CURRENT LINE+1 AND UPDATE CURRENT CNT*
ESD23A   CLI   TESTYPE,LR
*              IS ESD TYPE LR
         BC    8,LABEL
*              YES BRANCH TO LABEL ROUTINE
*              NO-IS ESD TYPE SECTION DEFINITION
         CLI   TESTYPE,SD
         BC    8,ESD21
*              YES-BRANCH TO SECTION DEFINITION PROCESSING
*              NO-IS TYPE NULL
         CLI   TESTYPE,CM
*              SET INTERNAL COMMON INDICATOR ON AND MARK COMMON DELETE*
         BC    8,ESD42
*              YES-BRANCH TO RENUMBER ROUTINE
**********            THE ENTER ROUTINE STARTS HERE          **********
ENTER    CH    CESDID,ENCDX
*              IS THE CESD LIMIT EXCEEDED
         BC    12,ENTER2               NO,SKIP REALOC           S01904
         STM   WRKREG0,WRKREGF,BRNCHSV   SAVE REGISTERS         S01904
         LA    WRKREG0,ESDOVFLW        MESSAGE CODE CESD OVFLW  S01904
         LA    WRKREGE,ENTER1          SET RETURN ADDRESS       S01904
ENTER3   TM    APT4,X'C0'              REALOC POSSIBLE          S01904
         BO    ESD39A                  SIGNAL OVERFLOW          S01904
         L     WRKREGF,ERDIGA          GET REALOC RTN ADDR      S01904
         BR    WRKREGF                 GO TO REALOC RTN         S01904
ENTER1   LM    WRKREG0,WRKREGF,BRNCHSV  RESTORE REGISTERS       S01904
*              NO-SET ESD SYMBOL AND ORIGIN INTO CESD LINE
ENTER2   MVC   CESDNAME(8,CESDXR),ESDNAME(ESDADD)
*              MOVE SYMBOL FIELD                                      *
         MVC   CESDORG(3,CESDXR),ESDORG(ESDADD)
*              MOVE ORIGIN FIELD                                      *
         TM    CESDTYPE(CESDXR),X'20'
*              IS CESD TYPE INSERT
         BC     8,ESD24X         NO,  BRANCH.
         CLI    TESTYPE,LR       IS ITEM AN LR
         BC     7,ESD24          NO,  BRANCH.
ESD24X   MVC    CESDSEG(1,CESDXR),ESDSEG(ESDADD)
ESD24    MVC   CESDLEN(3,CESDXR),ESDLEN(ESDADD)
*              SET CESD LENGTH FIELD TO ESD LENGTH FIELD
*              SET CESD TYPE TO ESD TYPE
         NI    CESDTYPE(CESDXR),X'F0'   CLEAR LOW ORDER BITS
         OC    CESDTYPE(1,CESDXR),TESTYPE
         MVC   CLRBYT(1),ESDTYPE(ESDADD)
         NI    CLRBYT,X'F0'        CLEAR BITS
         OC    CESDTYPE(1,CESDXR),CLRBYT
**********            THE RENUMBER ROUTINE STARTS HERE       **********
*              IF THE LINE WHICH IS ABOUT TO BE ENTERED IS AN LD
*              IT IS NOT ENTERED-ALL OTHERS ARE
RENUMBER TM    INTERN1,LABELDEF
         BC    1,ESD30
         L     TEMP,REGSA5
         LTR   TEMP,TEMP
         BC    12,TBLOFLOW
         L     RNT,RECNT               UPDATE REG PTR TO RNT      M4320
         CH    TEMP,ENCDX
         BC    12,RNUMBR2              NO OVERFLOW              S01904
         STM   WRKREG0,WRKREGF,BRNCHSV SAVE REGISTERS           S01904
         LA    WRKREGE,RNUMBR1         SET RETURN ADDRESS       S01904
         LA    WRKREG0,RNTOFLOW        MESSAGE CODE RNT OVFLW   S01904
         B     ENTER3                  CHECK FOR POSS REALOC    S01904
RNUMBR1  LM    WRKREG0,WRKREGF,BRNCHSV RESTORE REGISTERS        S01904
         L     RNT,RECNT               UPDATE REG PTR TO RNT      M4320
RNUMBR2  SLL   TEMP,2
*              COMPUTE ADDRESS OF RNT LINE                            *
         AR    TEMP,RNT
         MVC   RNTTYPE(1,TEMP),TESTYPE
         MVC   CLRBYT(1),ESDTYPE(ESDADD)
         NI    CLRBYT,X'F0'        CLEAR BITS
         OC    RNTTYPE(1,TEMP),CLRBYT
*              SET TYPE IN RNT
         OI    RNTFLAG(TEMP),X'01'
*              SET PRESENT FLAG ON IN RNT LINE AND THEN GO TO  IDCESD *
*              TO COMPUTE THE ID(LINE NUMBER) OF THE PRESENT LINE     *
         BAL   RETURN,IDCESD
         LH    TEMP1,RNTID(TEMP)
         STH   CESDID,RNTID(TEMP)
*              STORE THE LINE ID IN THE RNT                           *
         TM    RNTFLAG(TEMP),X'02'
*              IS DEPEND FLAG ON
         BC    8,ESD29
*              NO-BRANCH TO UPDATE RNT INDEX                          *
*              YES-CLEAR DEPEND BIT IN RNT                            *
         NI    RNTFLAG(TEMP),X'FD'
ESD24A   SLL   TEMP1,4
         AR    TEMP1,CESD               TEMP1 IS INDEX TO LABEL LINE
         TM    CESDTYPE(TEMP1),X'40'
         BC    8,ESD25
*              IF THE CESD TYPE IS CHAINED A DOUBLE DEFINITION WILL
*              OCCUR IF THE PRESENTESD IS NOT MARKED DELETE           *
         TM    ESDTYPE(ESDADD),X'10'
         BC    1,ESD28B
         LA    RETURN,ESD28B
*              BRANCH TO ERROR DIAGNOSTIC FOR DOUBLE SYMBOL DEFINITION*
*                        *****ERROR*****                              *
*                                                                     *
         BC    15,DBLDEF1
ESD25    TM    ESDTYPE(ESDADD),X'10'
         BC    1,ESD27
*              IF ESD TYPE IS NOT DELETE - RENUMBER ID
ESD26    LH    TEMP,12(TEMP1)
ESD26A   STH   CESDID,14(TEMP1)
*              IF CHAIN ENDS (TEMP= 0 ) STOP RENUMBERING LABELS       *
ESD26B   LTR   TEMP1,TEMP
         BC    8,ESD29
         BC    15,ESD24A
ESD27    LH    TEMP2,14(,TEMP1)        GET CESD ID FOR SD ITEM  XA05436
         MVI   CESDTYPE(TEMP1),ER      SET CESD TO ER
*              IF THE ESD TYPE IS DELETE, CHECK RNT POINTER TO SEE IF *
*              IT IS AN LD-IF IT IS SET TYPE TO ER MARKED DELETE      *
         LTR   TEMP2,TEMP2
         BZ    ESD28A                  LD THAT CAN BE DELETED
         BM    ESD28C                  LD THAT CAN'T BE DELETED ZA01413
*              IF IT IS AN LR- THE RNT TYPE MUST BE SET TO ER DELETE  *
*              AS WELL AS CESD TYPE                                   *
ESD28    SLL   TEMP2,2
         AR    TEMP2,RNT
*              SET RNT TYPE                                           *
*              SET CESD TYPE                                          *
         MVI   RNTTYPE(TEMP2),ER       RNT TYPE ER
         OI    RNTTYPE(TEMP2),DELETE   TURN ON DELETE FLAG       A44660
         TM    RNTFLAG(TEMP2),X'80'    CHECK FOR SAVED BLDL BIT ZA01413
         BNO   ESD28AA                 BRANCH IF NOT FOUND      ZA01413
         MVI   CESDORG(TEMP1),X'80'    RESTORE BLDL BIT IN ER   ZA01413
         NI    RNTFLAG(TEMP2),X'7F'    REMOVE BLDL BIT IN RNT   ZA01413
ESD28AA  EQU   *                                                ZA01413
         TM    RNTFLAG(TEMP2),NODELETE   SHOULD WE MARK IT
*                                             FOR DELETION?
         BO    ESD28B                  NO,BRANCH
ESD28A   OI    CESDTYPE(TEMP1),DELETE  YES, SET DELETE FLAG
*                                              IN TYPE
ESD28B   LH    TEMP,12(TEMP1)
*              SET SUBTYPE TO DELETE                                  *
         MVI   SUBTYPE(TEMP1),X'08'
         BC    15,ESD26B                TO CHECK IF CHAIN IS DONE
ESD28C   STC   TEMP2,TSTBYT            SAVE FLAG LOW BYTE       ZA01413
         TM    TSTBYT,X'01'            TEST IF EVEN OR ODD      ZA01413
         BO    ESD28B                  BRANCH IF ODD            ZA01413
         MVI   CESDORG(CESDXR),X'80'   RESTORE BLDL BIT IN ER   ZA01413
         B     ESD28B                  RESUME MAINLINE          ZA01413
ESD29    L     TEMP,REGSA5
*              IF THE ITEM BEING PROCESSED IS COMMON-DELINK IT        *
         TM    INTERN1,COM
         BC    1,ESD43
ESD29A   LA    TEMP,1(TEMP)
         ST    TEMP,REGSA5
HEWLCE30 EQU   *
ESD30    NI    INTERN1,X'00'
         LA    ESDADD,16(ESDADD)
         L     TEMP,REGSA4
         BCT   TEMP,ESD30A
*              IF THE ESD CARD IS DONE- RETURN TO THE INPUT PROCESSOR *
ESD30A0  L     INTERNAL,SAVEAREA
         LM    SYSBRNCH,TEMP3,16(INTERNAL)
         L     SYSRET,REG24SA
         LM    CESD,BASE,32(INTERNAL)
*              CLEAR INTERNAL INDICATORS                              *
         BCR   15,SYSRET
*              OTHERWISE SAVE THE RNTID AND RETURN TO THE BEGINNING   *
ESD30A   ST    TEMP,REGSA4
         BC    15,ESD1
**********            THE LABEL ROUTINE STARTS HERE          **********
LABEL    LH    TEMP,14(ESDADD)
*              COMPUTE THE RNT ADDRESS FOR THE LABEL ID               *
         CH    TEMP,ENCDX               DOES IT EXCEED THE      OX03919
*                                       LIMITS OF THE RNT       OX03919
         BC    12,RNTOK                 BRANCH IF NOT           OX03919
         STM   WRKREG0,WRKREGF,BRNCHSV  SAVE REGISTERS          OX03919
         LA    WRKREGE,RNTRET           SET UP RETURN ADDRESS   OX03919
         LA    WRKREG0,RNTOFLOW         SET CODE FOR RNT        OX03919
*                                       OVERFLOW                OX03919
         B     ENTER3                   GO TEST IF REALLOC      OX03919
*                                       POSS AND DO SO IF       OX03919
*                                       POSSIBLE                OX03919
RNTRET   EQU   *                                                OX03919
         LM    WRKREG0,WRKREGF,BRNCHSV  RESTORE REGS            OX03919
RNTOK    EQU   *                                        ZA00835,XA06871
         L     RNT,RECNT               RESTORE POINTER TO RNT   OX03919
         SLL   TEMP,2
         AR    TEMP,RNT
         LA    INTERNAL,ENTER
         L     TEMP2,REGSA5
         TM    INTERN1,MATCHER         DID THIS MATCH AN ER?
         BNO   REN1                    NO, BRANCH
         TM    INTERN1,LABELDEF        IS THIS AN LD?
         BO    REN1                    YES, NO FLAG IN RNT
         SLL   TEMP2,2
         AR    TEMP2,RNT               ADD TO FORM RNT ADDRESS
         OI    RNTFLAG(TEMP2),NODELETE   YES,SET FLAG ON IN RNT
*                                      SO THIS CAN'T BE DELETED
         L     TEMP2,REGSA5            RESTORE RNT ID
REN1     EQU   *
*              SAVE THE RNT ID FIELD                                  *
         LH    TEMP1,0(TEMP)
*              IS CONTROL SECTION PRESENT
         TM    2(TEMP),X'01'
         BC    8,ESD33
*              NO-BRANCH
*              IF RNT TYPE IS DELETE-BRANCH
         TM    3(TEMP),X'50'
         BC    5,ESD31
*              IF MATCH BIT IS ON-BRANCH
         TM    INTERN1,X'02'
         BC    1,ESD32
*              IF NOT-RENUMBER ID FIELD
         STH   TEMP1,14(ESDADD)
         BCR   15,INTERNAL
*              IF THE RNT TYPE IS DELETE -
ESD32    BAL   RETURN,DBLDEF
ESD31    TM    INTERN1,LABELDEF
         BC    1,ESD44
*              AND THE ESD TYPE IS LD - DONT ENTER THE LINE
*              IF IT IS AN LR -                                       *
         MVI   SUBTYPE(ESDADD),X'08'
         MVI   TESTYPE,2
         OI    ESDTYPE(ESDADD),X'10'
*              MAKE ESD TYPE ER MARKED DELETE
         TM    INTERN1,X'0A'
*              IF IT IS A MATCHING SYMBOL, BRANCH TO  DELETE CHAIN    *
*              ROUTINE. IF NOT, STORE RNTID IN  BYTE 14 OF CESD LINE  *
         BC    8,ESD33A
         BAL   RETURN,DELCHN
         BCR   15,INTERNAL
*
ESD33    EQU   *                                                OX00822
         OI    2(TEMP),X'02'                                    OX00822
*              SET DEPENDENCY BIT ON IN RNT LINE FOR SD
         TM    INTERN1,X'02'
*              IF IT IS A MATCHING SYMBOL - BRANCH, IF NOT- SET UP    *
*              CHAIN OF LABELS                                        *
         BC    1,ESD35
         STH   CESDID,0(TEMP)
         STH   TEMP1,12(ESDADD)
         TM    INTERN1,X'01'
         BC    8,ESD33B                                         ZA01413
         SR    TEMP2,TEMP2              CLEAR TEMP2
         TM    INTERN1,MATCHER         DID THIS MATCH AN ER?
         BNO   ESD33A                  NO, BRANCH
         O     TEMP2,FS                YES, IT CAN'T BE DELETED
         TM    CESDORG(CESDXR),X'80'   CHECK BLDL BIT           ZA01413
         BNO   ESD33A                  BRANCH IF NOT ON         ZA01413
         SLL   TEMP2,1                 MAKE FLAG EVEN IF ON     ZA01413
ESD33A   STH   TEMP2,14(ESDADD)
         BCR   15,INTERNAL
ESD33B   TM    INTERN1,MATCHER         DID LR MATCH ER          ZA01413
         BNO   ESD33A                  BRANCH IF NOT            ZA01413
         TM    CESDORG(CESDXR),X'80'   WAS BLDL ISSUED FOR ER   ZA01413
         BNO   ESD33A                  BRANCH IF NOT            ZA01413
         L     TEMP,REGSA5             GET INPUT ESD ID         ZA01413
         SLL   TEMP,2                  CALC RNT OFFSET          ZA01413
         AR    TEMP,RNT                POINT TO RNT ENTRY       ZA01413
         OI    RNTFLAG(TEMP),X'80'     KEEP BLDL BIT IN RNT     ZA01413
         B     ESD33A                  RESUME MAINLINE          ZA01413
ESD35    BAL   RETURN,DELCHN
         MVI   TESTYPE,2
*              MAKE LABEL AN ER  AND CHAIN IT TO THE MATCH            *
         STH   CESDID,0(TEMP)
         STH   TEMP1,12(ESDADD)
         BCR   15,INTERNAL
**********            THE DELCHN ROUTINE STARTS HERE         **********
DELCHN   STH   CESDID,14(ESDADD)
*              STORE THE ID OF THE LINE IT IS CHAINED TO IN BYTES 14- *
*              15 OF THE LINE AND MARK TYPE DELETE-CHAIN              *
         OI    ESDTYPE(ESDADD),X'50'
**********            THE FREELINE ROUTINE STARTS HERE       **********
FREELINE CLI   TESTYPE,PR     IS THIS ESD ITEM A PSEUDO REGISTER
         BE    NXTLINE    IF PSEUDO-REG USE NEW CESD LINE
* PSEUDO REGISTERS MUST BE IN THE ORDER OF APPEARANCE
         L     CESDXR,FLCD
         LTR   CESDXR,CESDXR
*              IF THERE ARE NO LINES IN THE ENTRIES DELETED CHAIN,    *
*              GO TO NXTLINE TO SELECT CURRENT LINE+1                 *
         BC    8,NXTLINE
ESD37    L     TEMP3,12(CESDXR)
*              SET FIRST FREE LINE TO NEXT FREE LINE                  *
         ST    TEMP3,FLCD
*              IDCESD COMPUTES AN ID OF A CESD LINE GIVEN  AN ADDRESS *
IDCESD   LR    CESDID,CESDXR
         SR    CESDID,CESD
         SRL   CESDID,4
         BCR   15,RETURN
*              NXTLINE INCREMENTS THE CURRENT CESD COUNT AND THEN     *
*              COMPUTES THE ADDRESS OF THE LINE(CESDXR)               *
NXTLINE  LH    CESDID,ENCDC
         LA    CESDID,1(CESDID)
         STH   CESDID,ENCDC
         LR    CESDXR,CESDID
         SLL   CESDXR,4
         AR    CESDXR,CESD
         BCR   15,RETURN
COMMON   CLC   13(3,CESDXR),13(ESDADD)
*        IF CESD SIZE IS LESS,CHECK FOR SD TYPE CESD
         BNL   ESD38
         TM    CESDTYPE(CESDXR),X'0F'  IS CESD SD
         BZ    COMMON1
         MVC   13(3,CESDXR),13(ESDADD)
         B   ESD38
COMMON1  LR    TEMP3,CESDXR
*                                 NAME OF COMMON.
         LH    TEMP4,CMGTSD       GET ERROR CODE
         L     SYSBRNCH,ERDIG     GIVE ERROR MESSAGE
         BALR  14,15
*              IF OVERLAY-PROMOTION TAKES PLACE IN COMMON PATH        *
ESD38    TM    PDSE7,OVBIT
         BCR   8,RETURN
         TM    CESDTYPE(CESDXR),X'20'    IS INSERT BIT ON IN CESD
         BCR   1,RETURN                 YES. USE CESD SEG NO
         L     INTERNAL,ADDCPTH
         BCR   15,INTERNAL
DBLDEF1  LR    TEMP3,TEMP1             POINT TO DUPLICATE NAME    X3508
         BC    15,ESD39
DBLDEF   LR    TEMP3,ESDADD
ESD39    EQU   *
         LH    TEMP4,DLDEF
ESD39A   L     SYSBRNCH,ERDIG
         BALR  14,15
         BCR   15,RETURN
TBLOFLOW LA    TEMP4,RNTOFLOW
         BC    15,ESD39A
ESDOFLOW LA    TEMP4,ESDOVFLW
         BC    15,ESD39A
**********            THE CESDDLNK ROUTINE STARTS HERE       **********
CESDDLNK LH    RNTR,14(CESDXR)          LOAD WITH RNT POINTER
DLNK1    LR    TEMP3,CESDID
         L     SYSBRNCH,DELNKRT
         BALR  SYSRET,SYSBRNCH
         BCR   15,RETURN
INTERN1  DC    X'00'
MATCHER  EQU   X'10'                   INTERN1 FLAG -- THIS
*                                      ENTRY MATCHED AN ER
NODELETE EQU   X'20'                   RNT FLAG -- THIS NAME
*                                      SHOULDN'T BE DELETED
DELETE   EQU   X'10'                   CESD TYPE DELETE FLAG
FS       DS    0F
         DC    X'FFFFFFFF'             NEG FULLWORD FOR LD CHAIN
HEWLCTTY EQU   *
TESTYPE  DC    X'00'
CESDTTYP DC    X'00'
ERR57    DC    X'2239'                 MSG NUMBER FOR MSG#562
ZERO3    DC    X'000000'               FOR CHECKING SD LENGTH
ADDCPTH  DC    V(HEWLCPTH)
ADDDECHN DC    V(HEWLCDCN)
RPCHGADD DC    V(HEWLFRCG)
DELNKRT  DC    V(HEWLCDLK)
ESD42    OI    INTERN1,COM
*              SET INTERNAL COMMON BIT ON AND MAKE ESD TYPE DELETE    *
         OI    ESDTYPE(ESDADD),X'10'
         BC    15,ENTER
ESD43    LR    RNTR,TEMP
         LA    RETURN,ESD29A
*              CLEAR COMMON BIT AND SET UP FOR DELINKING              *
         NI    INTERN1,X'FB'
         OI    APT1,ESDWRITE
         BC    15,DLNK1
ESD44    TM    INTERN1,X'0A'
         BC    4,ESD30
         MVI   8(CESDXR),NULL
         BC    15,ESD30
BADCARDO LA    TEMP3,0(0,ESDADD)
         SH    TEMP3,C16
         LH    TEMP4,ERR22
         BC    15,BADCRDL1
BADCARDL LA    TEMP4,ERR23
BADCRDL1 LA    RETURN,ESD30A0
         BC    15,ESD39A
REGSA4   DC    F'0'
HEWLCRID EQU   *
REGSA5   DC    F'0'
REG24SA  DC    F'0'
C56      DC    H'56'
C240     DC    H'240'
C16      DC    H'16'
ERR22    DC   X'1216'
DLDEF    DC    X'2118'
SAVEAREA DC    F'0'
CMGTSD   DC    X'2237'
CLRBYT   DC    X'00'
TSTBYT   DS    X                       WORK AREA                ZA01413
SAVETEMP DC    F'0'                     SAVE AREA FOR TEMP REG  OX00822
MAINTAIN DC    50F'0'                   MAINTENANCE AREA        OX00822
         HEWAPT
         END
