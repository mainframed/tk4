         TITLE    'HEWLFMAP  CROSS REFERENCE AND MODULE MAP'
HEWLFMAP CSECT
*                                                                     *
*THIS CSECT IS CALLED IF MAP OR XREF IS SPECIFIED.                    *
*IT PRODUCES THE REQUESTED DATA.                                      *
*                                                                     *
*ENTRY ONLY AT HEWLFMAP BY ANY MEANS                                  *
*                                                                     *
*INPUT: SYSLMOD LOAD MODULE                                           *
*                                                                     *
*OUTPUT: MAP ON PRINTER                                               *
*                                                                     *
*EXIT: NORMAL RETURN                                                  *
*                                                                     *
*XCESDTAB IS THE ADDRESS OF THE TABLE WHERE COMPOSITE ESD ENTRIES     *
*ARE COLLECTED (16-BYTE ENTRIES).                                     *
*XADDCESD IS THE ADDRESS OF THE TABLE OF ADDRESSES FROM ESD ENTRIES   *
*FOR THE PRESENT SEGMENT (4-BYTE ENTRIES).                            *
*XAD2CESD IS THE ADDRESS OF THE TABLE CORRESPONDING TO XADDCESD CON-  *
*TAINING RESPECTIVE ENTRY NUMBERS (2-BYTE ENTRIES).                   *
*RLDIN IS RLD INPUT BUFFER.                                           *
*PRLIN IS PRINT OUTPUT BUFFER.                                        *
*PRHDR IS SAVED HEADER BUFFER.                                        *
*                                                                     *
*REUSABLE                                                             *
*                                                                     *
R0       EQU   0
R1       EQU   1
RPAR     EQU   1
RJ       EQU   1
APT      EQU   2
RD       EQU   3
RENTRY   EQU   4
RI       EQU   4
RPLACE   EQU   4
RF       EQU   5
RST      EQU   5
RST2     EQU   6
RG       EQU   6
RWORK    EQU   7
RH       EQU   7
RIN      EQU   7
RA       EQU   8
RB       EQU   9
RE       EQU   10
RC       EQU   11
RBASE    EQU   12
RSAVREG  EQU   13
R14      EQU   14
R15      EQU   15
         EXTRN HEWLCMDB
         EXTRN APTXLIST                ADDRESS OF OPEN EXIT LIST
         ENTRY JFCBADDR                ADDRESS OF SYSLMOD JFCB
ALBIT    EQU   X'80'
XREFBIT  EQU   X'40'                 BIT SET FOR XREF OPTION
OVERBIT  EQU   X'20'                 OVERLAY BIT
ESDIND   EQU   X'20'                 ESD INDICATOR
PRIVCODE EQU   X'04'                 PRIVATE CODE
HEXTEN   EQU   X'10'                 HEXADECIMAL TEN FOR CONVERSION
DECTEN   EQU   X'0A'                 DECIMAL TEN FOR CONVERSION
PRIVDEL  EQU   X'14'                 CODE FOR ENTAB AND SEGTAB
NEVCALL  EQU   X'06'                 NEVER CALL BITS
CUMLNREQ EQU   X'30'                    FLAG FOR CUM PSEUDO REG LN REQ
EOMOD    EQU   X'08'                 END OF MODULE BIT
SKIP     EQU   X'0B'                   IMMEDIATE SPACE
SINGLE   EQU   X'09'                   PRINT AND SPACE
DOUBLE   EQU   X'11'                   PRINT AND SPACE 2
TRIPLE   EQU   X'19'                   PRINT AND SPACE 3
SKIP2    EQU   X'13'                   IMMEDIATE SPACE 2
SKIP3    EQU   X'1B'                   IMMEDIATE SPACE 3
RESTORE  EQU   X'8B'                   SKIP TO CHANNEL 1
TSO      EQU   X'80'                   TSO SWITCH IN APTSWS
         USING *,R15                 SET UP BASE ADDRESSABILITY
         USING APTDSECT,APT       ESTABLISH ADDRESSABILITY FOR APT
START    EQU   *                     FOR LATER STATEMENT OF BASE ADDR
         BC    15,MODID+6              BRANCH AROUND MODULE IDENT
MODID    DC    C'05MMAP'
         NC    ENCDC(2),ENCDC          TEST FOR NO ESDS
         BC    7,MAP000
         BR    R14                     RETURN
MAP000   EQU   *
         OI    NEWSW,X'10'             INDICATE MAP/XREF IN OPERATION
         STM   R14,RBASE,SPACES+12 SAVE REG
         LR    RBASE,R15             LOAD PERMANENT BASE
         USING START,RBASE           PROPER USING
         DROP  R15                   OLD BASE
         LA    RSAVREG,REGSA      LOAD SAVE AREA ADDRESS
         EJECT
*
*        THIS PROGRAM PRODUCES A MEMORY MAP AND A CROSS REFERENCE
*        TABLE AS SUPPLEMENTARY OUTPUT FROM THE LINKAGE EDITOR
*
         TM    APTSWS,TSO          TSO MODE?
         BZ    TSO1               NO - BRANCH
         LA    RA,40               CHANGE LINE COUNTS
         STH   RA,COUNT
         LA    RA,20(RA)
         STH   RA,COUNT2
TSO1     LH    RA,ENCDC            NUMBER OF CESD ENTRIES
         LA    RA,20(0,RA)             ADD SAFETY FACTOR
         TM    NEWSW,X'40'             IS ENTRY FROM INTERMEDIATE
         BC    8,ALLOC                 NO--DO GETMAIN FOR CESD
         L     R1,CHESD                YES--USE CESD IN CORE
         LA    R1,16(0,R1)             INCREMENT TO FIRST ENTRY
         B     ALLOCA
ALLOC    LH    R0,ENCDX                MAXIMUM NUMBER OF ENTRIES
         SLL   R0,4                  MULTIPLY BY SIXTEEN
         ST    R0,SAVMAIN            SAVE LENGTH OF AREA OBTAINED
         L     R1,CHESD                USE CESD FOR TABLES
ALLOCA   ST    R1,XCESDTAB             STORE ADDRESS OF CESD
         LH    R1,ENR1C                NO. OF ENTRIES IN RLD NOTELIST
         MH    R1,RLDNTSZ              TIMES BYTES PER ENTRY
         L     R0,RNT1                 INITIALIZE SAVRLDNT
         AR    R1,R0
         ST    R1,RLDNTEND             SAVE END ADDRESS
         SH    R0,RLDNTSZ              ONE ENTRY BEFORE BEGINNING
         ST    R0,SAVRLDNT
         LM    R0,R1,HEWLCRBB+4        ADDRESSES OF SYSLIB OBJ BUFFERS
         CR    R0,R1                   USE LOWER ADDRESS AS START
         BNH   ALLOCB                       FOR WORK AREA
         LR    R0,R1
ALLOCB   ST    R0,XAD2CESD
*
*        FIRST, A HEADER IS PUT OUT WITH A SKIP TO ONE.
*
         MVI   CNTLCH,SKIP2            SKIP TWO LINES
         TM    APTSWS,TSO          TSO MODE?
         BC    1,MAP0005           YES - BRANCH
         MVC   LINCOUNT+1(1),LINECNT+1  INITIALIZE LINE COUNTER
         CLI   LINCOUNT+1,X'0A'      TEST FOR ROOM ON PAGE
         BC    3,MAP0005             NO
         MVI   CNTLCH,RESTORE          RESTORE PAGE CHARACTER
         MVI   LINCOUNT+1,NUMBLINS+2   SET LINE COUNTER
MAP0005  EQU   *
         BAL   R14,CNTRL               TO CARRIAGE CONTROL ROUTNIE
         TM    APT0,XREFBIT       TEST FOR XREFS
         BC    3,PUTHC               PUT XREF HDR
         MVC   PRLIN+55(10),TOPHDM   NO  PUT MAP HEADER
         B     PUTHEAD               PUT HEADER
TOPHDM   DC    C'MODULE MAP'         MAP HEADER
TOPHDC   DC    C'CROSS REFERENCE TABLE'
SGHD     DC    C'NAME    ORIGIN  LENGTH  SEG. NO.'
SEGHD    EQU   SGHD+24               ADDR OF WORDS SEG. NO.
NAMLOC   DC    C'NAME   LOCATION'
PUTHC    MVC   PRLIN+49(21),TOPHDC   MOVE IN XREF HEADER
PUTHEAD  LA    R15,PUTLINS
         L     RD,DCBLMOD            LOAD ADDRESS OF DCB
         MVI   PRLIN,DOUBLE            PRINT AND SPACE 2
         BALR  R14,R15               CALL PRINT SUBROUTINE
         TM    NEWSW,X'40'             IS ENTRY FROM INTERMEDIATE
         BC    1,L1OUT                 YES--BYPASS READ
*
*        END OF DATA EXIT IS REPLACED BY SPECIAL ONE FOR THIS CSECT.
*
         MVC   SAVEODAD(3),33(RD)    SAVE END OF DATA ADDRESS
         MVC   33(3,RD),SPECEOD      LOAD SPECIAL ADDRESS
MAPPOINT CLOSE ((RD))                CLOSE SYSLMOD FOR OUTPUT
         TM    JFCBADDR,X'80'          IS SYSLMOD OPEN J REQUIRD
         BZ    NORMLOPN                NO--BRANCH
         GETMAIN EU,LV=200,A=JFCBADDR  GETMAIN AN AREA FOR JFCB
         L     1,XLSTADDR              GET SYSLMOD EXIT LST ADDR
         MVC   5(3,1),JFCBADDR+1       JFCB AREA ADDR TO EXT LST
         RDJFCB ((RD),(INPUT))         ISSUE RDJFCB FOR SYSLMOD
         L     6,JFCBADDR              LOAD JFCB ADDR INTO REG
         MVC   44(8,6),PDSE1           MOVE MEM NAME INTO JFCB
         OI    52(6),X'08'             INHIBT JFCB RETRN TO JOBQ
         OPEN  ((RD),(INPUT)),TYPE=J   OPEN J SYSLMOD FOR INPUT
         B     ARNDOPN                 BYPASS NORMAL OPEN
NORMLOPN OPEN  ((RD))                  OPEN SYSLMOD FOR INPUT
ARNDOPN  LA    R0,CTTR                 LOAD DCB ADDRESS
         POINT (RD),(0)              POINT TO FIRST ESD
         L     RIN,XCESDTAB          LOAD INPUT PTR W ADDR OF TBL
         LR    RST,RIN               SVE START REG
MAP001   READ  DECB2,SF,(RD),RLDIN,256  READ RECORD FROM MODULE
         CHECK DECB2
         TM    RLDIN,ESDIND          TEST FOR ESD INDICATOR
L0SW     BC    0,L1OUT               NOP SW SET BY 1ST ESD
         BC    8,MAP001              LOOP TO READ ANOTHER RECORD
         MVI   L0SW+1,X'80'          SET SW FOR ESD FOUND
         LH    RA,RLDIN+6            LOAD NUMBER OF ESD BYTES
         EX    RA,ESDMVC             EXECUTE MOVE TO ESD TABLE
         AR    RIN,RA                INCREMENT POINTER
         TM    RLDIN,EOMOD           TEST FOR LAST ESD + NO TEXT
         BC    3,L1OUT               READ NO MORE
         B     MAP001                LOOP TO READ AGAIN
ESDMVC   MVC   0(0,RIN),RLDIN+8      EXECUTED TO MOVE ESD TO TABLE
SAVEND   DS    1F                    SAVE LIMIT OF ESDS
*
*        PROCESS ASSEMBLED ESD ENTRIES
*
L1OUT    L     RST,XCESDTAB            ADDRESS OF CESD
         NC    ENR1C(2),ENR1C          CHECK FOR NO RLDS
         BC    7,L1GO                  IF THERE ARE RLDS
         MVI   L5SW2+1,X'00'         PREVENT XREFS
L1GO     LH    RIN,ENCDC               NUMBER OF CESD ENTRIES
         SLL   RIN,4                   TIMES 16 FOR NUMBER OF BYTES
         A     RIN,XCESDTAB            ADD START OF TABLE
         BCTR  RIN,0                   DECREMENT BY ONE
         ST    RIN,SAVEND            SAVE
         TM    SAVATS,OVERBIT     TEST FOR OVERLAY
         BC    3,L1CONT              YES
         MVI   L2SW+1,X'00'          PROC ALL ENTRIES
         MVC   SEGHD(8),SEGHD-1      BLANK OUT SEG. NO. FROM HDR
L1CONT   LA    RIN-1,16              LOAD STOPPING FACTOR
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
MAP002   EQU   L1CONT                LOOP TO PROCESS A SEGMENT
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         TM    APT0,XREFBIT       TEST FOR CROSS REFERENCES
L1SW     BC    0,NONEWHDR            SKIP HEADER IF NO XREFS AFTER 1ST
         MVI   L1SW+1,X'80'          MAKE NOP BRANCH FROM NOW ON
         MVC   PRHDR+2(117),PRHDR+1  PREVENT LAST HEADER FROM PRINTIN
         MVC   PRLIN+2(28),PRLIN+1   BLANK OUT POSS RESIDUE
         MVI   CNTLCH,SKIP             SKIP A LINE
         BAL   R14,CNTRL
         LA    R15,PUTLINS             ADDRESS OF PRINT ROUTINE
         MVC   PRLIN+3(15),CTLSEC
         MVC   PRLIN+41(5),ENTRY     PUT HEADER
         TM    APTSWS,TSO          TSO MODE?
         BC    1,MAP0025           YES - BRANCH
         CLI   LINCOUNT+1,X'05'      TEST FOR BOTTOM OF PAGE
         BC    3,MAP0025             NO  GO AHEAD AND PRINT
         MVI   LINCOUNT+1,X'01'      RESET LINE COUNTER FOR SKIP
MAP0025  EQU   *
         MVI   PRLIN,DOUBLE            PRINT AND DOUBLE SPACE
         BALR  R14,R15               CALL SUBR TO PRIT LINE
         MVC   PRLIN+5(32),SGHD      MOVE IN SEG HEADER
         MVC   PRLIN+43(15),NAMLOC
         MVC   PRLIN+63(15),NAMLOC
         TM    APTSWS,TSO          TSO MODE?
         BC    1,TEMP              YES - BRANCH
         MVC   PRLIN+83(15),NAMLOC
         MVC   PRLIN+103(15),NAMLOC
TEMP     MVI   PRLIN,DOUBLE        PRINT + DOUBLE SPACE
         MVC   PRHDR(119),PRLIN        SAVE HEADER FOR NEW PAGE
         BALR  R14,R15               CALL SUBROUTINE
NONEWHDR LA    RENTRY,1              INIT ENTRY COUNTER
         L     RB,RNT1                 ADDRESS OF RLD NOTELIST
         SH    RB,RLDNTSZ              MINUS SIZE OF ENTRY
         ST    RB,SAVRLDNT
         L     RB,XAD2CESD           INIT ADDR OF 2 BYTE TABLE
         ST    RB,SAVID                INITIALIZE SAVID TO FIRST
*
*        LOOP TO SELECT ESD ENTRIES FOR THIS SEGMENT
*
L2        CLI  8(RST),X'0A'
      BE   L2CTL
       TM   8(RST),X'03'
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
MAP003   EQU   L2                    LOOP TO SELECT ESD ENTRIES
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         BC    8,PROCSEG             PROCESS SEGTION
         TM    8(RST),X'06'          TEST FOR PSEUDO REG  OR NULL
         BC    3,L2CTL               YES  LOP TO NEXT
         TM    8(RST),X'05'          TEST FOR COMMON
         BC    3,PROCSEG             YES  TREAT AS SECTION
         BC    8,L2CTL               EXTERNAL REF = UNRESOLVED
         LH    RPAR,14(0,RST)        LOAD SECT ENTRY NO. AS PARAMETER
         BAL   R14,SEGSUBR           CALL SUBR TO LOCATE ENTRY
         CH    RPAR,SEGNO            IN THIS SEGMENT
L2SW     BC    7,L2CTL               NO  LOOP AGAIN
         STH   RENTRY,0(0,RB)        STORE ENTRY NUMBER
         LA    RB,2(0,RB)            ADVANCE POINTERS
L2CTL    LA    RENTRY,1(0,RENTRY)    ADVANCE ENTRY NUMBER
         BXLE  RST,RIN-1,L2          LOOP CTL STEPS THRU ESDS
         ST    RB,IDEND                SAVE ADDRESS OF END OF ID LIST
         C     RB,XAD2CESD           TEST FOR NO ENTRIES
         BC    8,L5SW2-4             OMIT PROCESSING
         EJECT
*
*        THE FOLLO WING PROGRAM SORTS THE ENTRIES FOR
*        THIS SEGMENT USING TWO TABLES, ON EOF TWO BYTE ENTRIES
*        AND  ONE OF 4 BYTE (ADDRESS) ENTRIES ON WHICH THE
*        SORT IS DONE.
*
*        SORT REGISTER USAGE IS AS FOLLOWS
*        RA    ADDRESS OF CURRENT COMPARAND IN FOUR BYTE TABLE
*        RB    ADDRESS OF LAST ENTRY FULLY SORTED IN FOUR BYTE TABLE
*        RC    LIMIT FOR SORT = END OF FOUR BYTE TABLE
*        RD    COMPARAND
*        RE    PLUS FOUR FOR INCREMENT
*        RF    USED FOR EXCHANGE OF TWO BYTE ENTRIES
*        RG    MINUS FOUR FOR DECREMENT
*        RH    LIMIT FOR SORT = START OF FOUR BYTE TABLE
*        RI    ADDRESS OF CURRENT ENTRY IN TWO BYTE TABLE
*        RJ    ADDRESS OF TWO BYTE ENTRY FOR LAST FULLY SORTED ITEM
*
         LR    RC,RB                   END OF TWO BYTE TABLE
         LA    RE,2                    LOAD INCREMENT FOR SORT
         SR    RC,RE                 SUBTRACT 4 FOR LIMIT
         BCTR  RC,0                  AND 1 MORE
         LNR   RG,RE                 LOAD DECREMENT FOR SORT
         L     RA,XAD2CESD             ADDR OF 2 BYTE TABLE
         CR    RA,RC                 TEST FOR BUT ONE ENTRY
         BC    3,MAP0055             YES  SKIP SORT
         L     RI,XAD2CESD           LOAD ADDR OF 2 BYTE TABLE
         LR    RH,RA                 LOAD START ADDRESS
         BCTR  RH,0                  MINUS ONE FOR LIMIT
SL1      LR    RJ,RI                 LOAD CURRENT ADDR FOR 2BYTE TBL
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
MAP004   EQU   SL1                   MAJOR SORT LOOP
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         LR    RB,RA                 LOAD CURRENT ADDR FOR 4BYTE TBL
SL2      LH    RD,0(0,RA)              CESD ID
         BCTR  RD,0                    MINUS ONE
         SLL   RD,4                    TIMES 16
         A     RD,XCESDTAB             PLUS CESD ADDRESS
         L     RD,8(0,RD)              ASSIGNED ADDRESS
         LA    RD,0(0,RD)
         LH    RF,2(0,RA)              CESD ID NEXT ENTRY
         BCTR  RF,0                    MINUS ONE
         SLL   RF,4                    TIMES 16
         A     RF,XCESDTAB             PLUS ADDRESS OF CESD
         L     RF,8(0,RF)              LKED ASSIGNED ADDRESS
         LA    RF,0(0,RF)
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
MAP005   EQU   SL2                   MINOR SORT LOOP
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         CR    RD,RF                   COMPARE ADDRESSES
         BC    4,INORD               IN ORDER
         BC    2,XCHANGE             MUST BE EXCHANGED
*        MUST NOW TEST FOR SECT FOLLOWING SYMBOL AT SAME LOCATION.
         ST    RPAR,RPARSAV          SAVE PARAM REGISTER
         LH    RPAR,2(0,RI)          LOAD ENTRY NUMBER OF LAST AS PAR
         BAL   R14,SEGSUBR           SUBR TO LOCATE CESD ENTRY
         L     RPAR,RPARSAV          RESTORE PARAMETER REGISTER
         TM    8(R15),X'03'          TEST FOR CSECT OR PRIVATE
         BC    8,XCHANGE             BRANCH IF SO TO EXCHANGE
         TM    8(R15),X'05'          TEST FOR COMMON
         BC    12,INORD              BRANCH TO IN ORDER IF NOT
XCHANGE  LH    RF,0(0,RI)              LOAD ID OF CESD ITEM
         MVC   0(2,RI),2(RI)         EXCHANGE ENTRIES
         STH   RF,2(0,RI)
         BCTR  RI,0                  DECREMENT POINTER BY 2
         BCTR  RI,0
         BXH   RA,RG,SL2             DECR & LOOP BACK THRU TBL TO ST
INORD    LR    RA,RB                 RELOAD PTR FROM CURRENT
         LR    RI,RJ                 RELOAD PTR FROM CURRENT
         LA    RI,2(0,RI)            ADD 2 TO 2BYTE PTR
         BXLE  RA,RE,SL1             INCR PTR &LOOP BACK TIL DONE
         EJECT
*
*        THE FOLLOW ING PROGRAM PROCESSE THE SORTED ESD ENTRIES
*        FOR A SEGMNENT AND PRODUCES A MEMORY MAP.
*
MAP0055  SR    RPLACE,RPLACE         ZERO REG FOR ENTRY COUNTER
         L     RST,XAD2CESD          LOAD PT RTO TOP OF 2BYTE TABLE
         LR    RST2,RST
         LA    RC-1,2                  INCREMENT FOR BXLE
         AR    RC,RC-1               RESTORE LIMIT TO END
L5       LH    RPAR,0(0,RST)         LOAD ENTRY NUMBER
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
MAP006   EQU   L5                    LOOP THROUGH TABLE ENTRIES
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         BAL   R14,SEGSUBR           CALL SUBR TO LOCATE ENTRY
         LR    RA,R15                SAVE POINTER
         TM    8(R15),X'03'          TEST FOR SECT OR PRIV CODE
         BC    8,PUTSECT             YES
         TM    8(R15),X'05'          \)ST FOR COMMON
         BC    12,L5CONT1            NO  CONTINUE
         B     PUTSECT               HANDLE AS SECTION
PROCSEG  CLC   SEGNO+1(1),12(RST)    TEST FOR THIS SEGMENT NUMBER
         B     L2SW                  TEST IN LINE
L5CONT1  CH    RPLACE,COUNT        LINE FINISHED?
         BC    7,L5CONT2             NO  CONTINUE
         SR    RPLACE,RPLACE         REZERO REG
         LA    R15,PUTLINS           SUBR TO PRINT
         BALR  R14,R15               CALL SUBROUTINE
L5CONT2  LR    RWORK,RPLACE          COMPUTE PLACE FOR LABEL
         LA    RPLACE,20(0,RPLACE)   INCR NAME COUNTER
         LA    RWORK,PRLIN(RWORK)    ADD ADDR OF PR LINE TO REG
         L     RPAR,8(0,RA)            LOAD ADDRESS OF THIS ENTRY
         BAL   R14,BINBCDS           CALL CONVERSION SUBROUTINE
         LR    R15,RA                RESTORE POINTER
         MVC   41(8,RWORK),0(R15)    MOVE IN NAME
         MVC   51(6,RWORK),COLLECT   MOVE IN LOC
L5CTL    LA    RST,2(0,RST)          ADD 2 TO TABLE POINTER
         BXLE  RST2,RC-1,L5          INCR PTR & LOOP TIL END
         LA    R15,PUTLINS           SUBR PUT LINE TO PUT LABELS LEFT
         BALR  R14,R15               CALL SUBROUTINE
         TM    APT0,XREFBIT       TEST FOR CROSS REFS CALL
L5SW2    BC    3,XREFS               YES  NOP IF NO MORE RLDS
XRRET    LA    R15,PUTLINS             ADDRESS OF PRINT SUBROUTINE
         BALR  R14,R15
         CLI   CUMLEN+5,C' '           TEST FOR ANY CUM LEN REQ
         BC    8,NXTSEGNO            NO
         MVC   PRLIN+3(58),CUMREQ    DENOTE CUM LENGTH REQUEST
         BALR  R14,R15               CALL SUBROUTINE
         MVC   CUMLEN(6),CUMLEN-1    BLANK OUT CUN LENGTH
NXTSEGNO CLC   CSNO(2),SEGNO      TEST FOR HIGHEST SEGMENT NUMBER
         BC    8,CLEANUP             YES  GET FINAL ITEMS
         LH    RA,SEGNO              LOAD SEGMENT NUMBER
         LA    RA,1(0,RA)            ADD 1 TO SEGMENT NO.
         STH   RA,SEGNO              RESTORE
         L     RIN,SAVEND            RESTORE INPUT REGISTER
         L     RST,XCESDTAB          LOAD ADDRESS OF ESD TABLE
         BC    15,L1CONT             LOOP TO NEXT SEGMENT
COUNT    DC    H'80'                 RECORD LENGTH - TSO
COUNT2   DC    H'120'                RECORD LENGTH - MVT
SAVEODAD DS    3C                    SAVE END OF DATA ADDRESS HERE
SPECEOD  DC    AL3(XRRET)            ADDR OF ALTERNATE EO DATA EXIT
         EJECT
*
*        ROUTINE TO PUT OUT SECTION LINE
*
PUTSECT  LTR   RPLACE,RPLACE         TEST FOR NO LSYMBOLS
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
MAP007   EQU   PUTSECT               ROUTINE TO PROCESS SECTION
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         BC    8,L5CONT3             NONE
         LA    R15,PUTLINS           SUBR TO PRINT
         BALR  R14,R15               CALL SUBROUTINE
L5CONT3  L     RPAR,8(0,RA)            LOAD ADDRESS OF SECT
         LA    R15,BINBCDS           SUBR TO CVT FROM BIN TO BCD
         BALR  R14,R15               CALL SUBROUTINE
         MVC   PRLIN+13(6),COLLECT   MOVE IN ADDRESS
         LR    RWORK,RA              RESTORE POINTER TO ENTRY
         L     RPAR,12(0,RWORK)      LOAD ADDRESS FOR CONVERSION
         BALR  R14,R15               CALL SUBROUTINE
         MVC   PRLIN+21(6),COLLECT   MOVE IN ADDRESS
SECCONT  TM    8(RWORK),X'80'        TEST FO LIBRARY
         BC    8,*+8                 NO
         MVI   PRLIN+11,C'*'         MOVE IN LIBR DESIGNATUON
         MVC   PRLIN+3(8),0(RWORK)   MOVE IN NAME
         TM    8(RWORK),X'01'        TEST FOR COMMONP
         BC    8,NOTCOM              NOT COMMON
         CLI   0(RWORK),C' '         TEST FOR BLANK
         BC    7,OVERTEST            OMIT OTHER TESTS
         MVC   PRLIN+2(9),BLANKCOM   DESIGNATE BLANK COMMON
         B     OVERTEST              OMIT OTHER TESTS
NOTCOM   CLI   8(RWORK),PRIVDEL      TEST FOR SEGTAB OR ENTAB
         BC    7,SEGTSTS             NO
         MVC   PRLIN+2(6),ENTAB      SET ENTAB DESIGNATOR
L5SW3    BC    0,SEGPRINT            SW FOR ENTABS FROM NOW ON
         MVI   L5SW3+1,X'F0'         SET SW FOR ENTAB HENCEFORTH
         MVC   PRLIN+2(7),SEGTAB     LOAD SEGTAB DESIGNATOR
         B     SEGPRINT              BYPASS UNNEEEDED TESTS
SEGTSTS  TM    8(RWORK),PRIVCODE     TEST FOR PRIVATE CODE
         BC    8,OVERTEST            NO  TEST OVERLAY NEXT
         MVC   PRLIN+2(9),PRIVATE    PLACE PRIVATE DESIGNATOR
OVERTEST TM    SAVATS,OVERBIT     TEST FOR OVERLAY
         BC    8,PRINTSEC            NO  PRINT LINE
SEGPRINT SR    RPAR,RPAR             CLEAR REG FOR PARAMETER
         IC    RPAR,12(0,RWORK)      INSERT SEGMENT NUMBER
         CVD   RPAR,COLLECT-1        CONVERT TO DECIMAL
         UNPK  COLLECT(5),COLLECT+5(3) UNPACK QUANTITY
        MVC   PRLIN+30(3),COLLECT     MOVE INTO PRINT LINE
         CLI   PRLIN+30,C'0'           CHECK FOR LEADING ZERO
         BC    7,PRINTSEC              NO
         MVI   PRLIN+30,C' '           MOVE IN BLANK
         CLI   PRLIN+31,C'0'         TEST FOR LEADING ZERO
         BC    7,PRINTSEC            NO  CONTINUE
         MVI   PRLIN+31,C' '         REPLACE ZERO WITH LEADING BLANK
PRINTSEC LA    R15,PUTLINS           LOAD ADDR OF SUBR TO PRINT LINE
         SR    RPLACE,RPLACE         ZERO REGISTER
         BALR  R14,R15               CALL SUBROUTINE
         BC    15,L5CTL              LOOP TO NEXT TABLE ENTRY
         DS    0F                    ALIGN TO FULL WORD BOUNDARY
DCBLMOD  DC    AL4(HEWLCMDB)
WKWORD   DC    AL4(0)                WORD ON BOUNDRY
SAVMAIN  DS    2F                    WORDS FOR FREE MAIN MACRO
XCESDTAB EQU   SAVMAIN+4             ADDRESS OF CESD ENTRIES
XADDCESD DS    1F                    ADDRESS FO 4 BYTE TABLE
XAD2CESD DS    1F                    ADDRESS OF 2 BYTE TABLE
SAVID    DC    F'0'                    POINTER TO CURRENT ID
SAVRLDNT DC    F'0'                    POINTER TO CURRENT RLD NOTELIST
RLDNTEND DC    F'0'                    END OF RLD NOTELIST
IDEND    DC    F'0'                    END OF ID LIST
ALIGNF   DC    F'0'                    TO ALIGN ADDRESS TO FULL WORD
SAVAD    DC    F'0'                    SAVE ADDRESS OF SECTION
RMASK    DC    X'00007FFF'             MASK OUT HI ORDER BIT R POINTER
ALIGNH   DC    H'0'                    TO ALIGN COUNT TO HALF WORD
FIVE     DC    H'5'                    SIZE OF DELINK TABLE ENTRY
RLDNTSZ  DC    H'9'                    SIZE OF RLD NOTELIST
SEGNO    DC    AL2(1)                CURRENT SEGMENT NUMBER
PRIVATE  DC    C'$PRIVATE '          PRIVATE CODE DESIGNATOR
ENTAB    DC    C'$ENTAB'             ENTAB DESIGNATOR
SEGTAB   DC    C'$SEGTAB'            SEGTAB DESIGNATOR
BLANKCOM DC    C'$BLANKCOM'          BL ANK COMMON DESIGNATOR
CTLSEC   DC    C'CONTROL SECTION'
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         EJECT
*
*        THIS ROUTINE PROCESSE RLD ENRTIES TO GET X REF TABLE
*
XREFS    EQU   *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
MAP008   EQU   XREFS                 ROUTINE TO PROCESS RLDS FOR SEG
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         MVC   PRHDR+2(117),PRHDR+1  PREVENT LAST HEADER FROM PRINTIN
         MVI   CNTLCH,SKIP2            IMMEDIATE SKIP 2 LINES
         BAL   R14,CNTRL
         LA    R15,PUTLINS             ADDRESS OF PRINT ROUTNIE
         MVC   PRLIN+3(30),CRHEAD    PUT IN XREF HEADER
         MVC   PRLIN+34(15),CTLSEC
         MVC   PRLIN+51(8),SEGHD
         TM    APTSWS,TSO          TSO MODE?
         BC    1,TEMP2             YES - BRANCH
         MVC   PRLIN+60(59),PRLIN+1    COMPLETE HEADING
TEMP2    LA    RST,PRLIN           ADDRESS OF PRINT LINE
         MVI   PRLIN,DOUBLE            PRINT AND DOUBLE SPACE
         MVC   PRHDR(119),PRLIN        SAVE HEADER FOR NEW PAGE
         BALR  R14,R15               CALL SUBROUTINE
         LA    RC-1,4
         LNR   RA,RC-1               LOAD DECREMENTFOR BXH
         SR    RA+1,RA+1             ZERO FOR TEST OF BXH
         TM    NEWSW,X'40'             IS ENTRY FROM INTERMEDIATE
         BC    8,XL1CONT               NO--CARD ALREADY READ
MAP009   TM    NEWSW,X'40'             IS ENTRY FROM INTERMEDIATE
         BC    8,MAP009A               NO--GO READ A RECORD
MAP0091  L     RD,SAVID                ADDRESS OF CURRENT ID
         L     RC,SAVRLDNT             ADDRESS OF RLD NOTELIST ITEM
MAP0090  LA    RC,9(0,RC)              UPDATE TO NEXT RLD NOTELIST
MAP00901 C     RC,RLDNTEND             IS END OF LIST REACHED
         BNL   MAP0092                 YES
         CLC   0(2,RC),0(RD)           ARE RLDS FOR THIS ID
         BC    7,MAP0090               NO--CHECK NEXT ENTRY
         MVC   ALIGNF+1(3),6(RC)       YES--GET ADDRESS OF RLD DATA
         MVC   ALIGNH(2),4(RC)         AND NUMBER OF BYTES
         ST    RC,SAVRLDNT             SAVE POINTER TO RLD NOTELIST
         L     RD,ALIGNF               DISPLACEMENT OF RLD DATA
         AR    RD,RD                   TIMES 4
         AR    RD,RD
         TM    2(RC),X'10'             IS IT IN BUFFER 2
         BC    1,MAP0093               YES
         A     RD,RLDOUT1              NO--ADD ADDRESS OF BUFFER 1
         BC    15,MAP0094
MAP0093  A     RD,RLDOUT2              ADD ADDRESS OF BUFFER 2
MAP0094  LH    RC,ALIGNH               NUMBER OF WORDS OF RLD DATA
         AR    RC,RC                   TIMES FOUR
         AR    RC,RC
         SR    RD,RC                   START OF RLD DATA
         B     XL3                     GO TO PROCESS RLDS
MAP0092  LA    RD,2(0,RD)              UPDATE POINTER TO NEXT ID
         C     RD,IDEND                IS END OF ID LIST REACHED
         BNL   XRRET                   YES--CHECK FOR ANOTHER SEGMENT
         ST    RD,SAVID                NO--SAVE ADDRESS OF ID
         L     RC,RNT1                 AND START AT TOP OF RLD NOTELIST
         B     MAP00901                TO SEARCH LIST FOR THIS ID
MAP009A  L     RD,DCBLMOD              ADDRESS OF SYSLMOD DCB
         READ  DECB4,SF,(RD),RLDIN,256
XL1      EQU   MAP009
         CHECK DECB4
XL1CONT  TM    RLDIN,X'02'           TEST FOR RLD
         BC    8,RLDOUTA               TEST FURTHER
XL1A     LA    RD,RLDIN+16           INIT REG TO 1ST RLD DATA
         LH    RC,RLDIN+6            LOAD COUNT OF RLD DATA
XL3      TM    4(RD),X'20'           TEST FOR PSEUDO
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
MAP010   EQU   XL3                   LOOP TO PROCESS RLD ENTRY
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         BC    12,XL3CONT            NO  GO ON
         TM    4(RD),CUMLNREQ        TEST FOR PSEUDO REG LENGTH REQ
         BC    12,XL3A               NO
         CLI   CUMLEN+5,C' '         TEST FOR ONE ALREADYENCOUNTERED
         BC    7,XL3A                YES
         L     RPAR,4(0,RD)          LOAD ADDRESS FOR CONVERSION
         BAL   R14,BINBCDS           CALL CONVERSION SUBROUTINE
         MVC   CUMLEN(6),COLLECT     MOVE IN ADDRESS
XL3A     TM    4(RD),X'01'           TEST FOR CONTINUATION
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
MAP011   EQU   XL3A                  LOOP TO PASS OVER RLD ENTRIES
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         BC    8,XGETNXT2              NO--GET NEXT RLD ITEM
         SR    RD,RA                 ADD 4 TO REG
         BXH   RC,RA,XL3A            LOOP
         B     RLDOUTA
XL4      MVC   4(26,RST),3(RST)        BLANK OUT UNWANTED ADDRESS NAME
         B     XL3A                    SKIP OVER ANY CONTINUATIONS
XL3CONT  LH    RPAR,2(0,RD)          LOAD POINTER
         BAL   R14,SEGSUBR           CALL SUBR TO LOCATE ENTRY
         CH    RPAR,SEGNO            TEST FOR THIS  SEGMENT
         BC    7,XRRET               NO  RETURN
         L     RPAR,4(0,RD)          LOAD ADDRESS FOR CONVERSION
         TM    NEWSW,X'40'             IS ENTRY FROM INTERMEDIATE
         BC    8,XL4CONT               NO
         LH    R14,2(0,RD)             GET P POINTER
         SLL   R14,2                   TIMES 4
         A     R14,RECNT               PLUS START OF RELCTN CNST TABLE
         L     R14,0(0,R14)            GET RELOCATION CONSTANT
         ST    R14,SAVAD               SAVE IT FOR POSSIBLE LATER USE
         AR    RPAR,R14                ADD RELOCATION CONSTANT
XL4CONT  BAL   R14,BINBCDS             CALL CONVERSION SUBROUTINE
         MVC   4(6,RST),COLLECT        MOVE IN ADDRESS
         LH    RPAR,0(0,RD)          LOAD ENTRY NUMBER
         TM    0(RD),X'80'             IS DELINK BIT ON
         BC    8,XL5CONT               NO--HAVE REAL R POINTER
         N     RPAR,RMASK              YES--GET REAL R POINTER
         MH    RPAR,FIVE               R POINTER TIMES LENGTH OF DELINK
         A     RPAR,DLKT               PLUS ADDRESS OF DELINK TABLE
         MVC   ALIGNH(2),0(RPAR)       ALIGN R POINTER TO HALF WORD
         LH    RPAR,ALIGNH             REAL R POINTER FROM DELINK TABLE
XL5CONT  STH   RPAR,ALIGNH             SAVE R POINTER
         LTR   RPAR,RPAR             TEST R POINTER FOR ZERO
         BC    8,XL4                 BYPASS ENTAB ENTRIES
         BAL   R14,SEGSUBR           CALL SUBR TO LOCATE ENTRY
         LR    RPLACE,R15            SAVE ADDR IN CONVENIENT REG
         MVC   22(8,RST),0(RPLACE)     MOVE IN SYMBOL
         CLI   8(RPLACE),X'02'       TEST FOR UNRESOLVED
         BC    8,UNRES               YES
      CLI   8(RPLACE),X'0A'
       BC   8,WXT
         CLI   8(RPLACE),X'07'         TEST FOR NULL
         BC    8,XL4                   YES--OMIT REFERENCE
         TM    8(RPLACE),X'03'       TEST FOR CONTROL SECTIOMN
         BC    8,RLDSECT             YES
         TM    8(RPLACE),X'05'       TEST FOR SECTION
         BC    3,RLDSECT             YES
         CLC   14(2,RPLACE),2(RD)    TEST FOR INTERNAL REFERENCE
         BC    8,XL4                 YES  SKIP THIS REFERENCE
         LH    RPAR,14(0,RPLACE)     LOAD REF NO. FOR THIS ENTRY
         BAL   R14,SEGSUBR           CALL SUBR TO LOCATE ENTRY
         LR    RPLACE,R15            PLACE ADDR IN CONVENIENT REG
RLDSECT  CLC   ALIGNH(2),2(RD)         CHECK FOR SAME ID
*        NOTE--RPOINTER WAS PUT IN ALIGNH AT XL5CONT
         BC    8,XL4                 YES  SKIP THIS ONE
        MVC   38(8,RST),0(RPLACE)     MOVE IN SECTION NAME
         TM    SAVATS,OVERBIT     TEST FOR OVERLAY
         BC    8,MAP0119             OMIT SEGMENT NUMBER
         SR    RPAR,RPAR             CLEAR PARAMETER REG
         IC    RPAR,12(RPLACE)       INSERT SEG NO
         CVD   RPAR,COLLECT-1        CONVERT TO DECIMAL
         UNPK  COLLECT(5),COLLECT+5(3) UNPACK QUANTITY
         MVC   53(3,RST),COLLECT       MOVE INTO PRINT LINE
         CLI   53(RST),C'0'            CHECK FOR LEADING ZERO
         BC    7,MAP0119               NO
         MVI   53(RST),C' '            YES--MOVE IN BLANK
         CLI   54(RST),C'0'            CHECK FOR LEADING ZERO
         BC    7,MAP0119             NO  CONTINUE
         MVI   54(RST),C' '            MOVE IN BLANK
MAP0119  LA    R15,PUTLINS           LOAD ADDRESS OF PRINT ROUTINE
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*        CODING FOR MULTIPLE RLD ENTRIES
*
XL2      TM    4(RD),X'01'           TEST FOR ANOTHER ADDR
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
MAP012   EQU   XL2                   LOOP FOR SAME R AND P POINTERS
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         BC    8,XGETNXT             NO
         MVC   SVAR1(34),22(RST)       SAVE DATA FROM POINTERS
         LA    R14,PRLIN
         TM    APTSWS,TSO          TSO MODE?
         BC    1,MAP0122           YES - BRANCH
         CR    R14,RST                 IS LINE FULL
         BC    7,MAP0122               YES--GO PRINT
         LA    RST,60(0,RST)           NO--SET TO SECOND HALF OF LINE
         B     MAP0123
MAP0122  BALR  R14,R15                 TO PRINT ROUTINE
         LA    RST,PRLIN               SET RST TO FIRST OF LINE
MAP0123  SR    RD,RA                   ADD 4 TO POINTER
         MVC   22(34,RST),SVAR1        RESTORE DATA
         L     RPAR,4(0,RD)          LOAD ADDRESS FOR CONVERSION
         TM    NEWSW,X'40'             IS ENTRY FROM INTERMEDIATE
         BC    8,MAP0125               NO
         A     RPAR,SAVAD              YES--ADD ASSIGNED ADDRESS
MAP0125  BAL   R14,BINBCDS             CALL CONVERSION SUBROUTINE
         MVC   4(6,RST),COLLECT        MOVE IN NEW ADDRESS
         LA    R15,PUTLINS           LOAD ADDR FO PRINT SUBR
         BXH   RC,RA,XL2             LOOP & DECR COUNT
         B     RLDOUTA                 EXIT
*
*        END FO CODING FOR MULTIPLE ENTRIES
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
XGETNXT  LA    R14,PRLIN
         TM    APTSWS,TSO          TSO MODE?
         BC    1,MAP0124           YES - BRANCH
        CR    R14,RST                 IS LINE FULL
        BC    7,MAP0124               YES--GO PRINT
         LA    RST,60(0,RST)          SET RST TO SECOND HALF OF LINE
        B     XGETNXT2
MAP0124  BALR  R14,R15                 TO PRINT ROUTINE
         LA    RST,PRLIN               SET RST TO FIRST OF PRINT LINE
XGETNXT2 AR    RC,RA                   SUBTRACT 4 FROM COUNT
RLDOUT   LA    RD,8(0,RD)            ADD 8 TO POINTER
         BXH   RC,RA,XL3             GET NEXT RLD IF ANY
RLDOUTA  TM    NEWSW,X'40'             IS ENTRY FROM INTERMEDIATE
         BC    1,MAP0091               YES--BYPASS READ
        TM    RLDIN,X'09'             TEST FOR EOMOD OR TXT NEXT
         BC    8,XL1                 THERE IS SUCH A CARD
         TM    RLDIN,EOMOD           TEST FOR END OF MOD
         BC    3,XRRET               YES
         L     RD,DCBLMOD
         READ  DECB5,SF,(RD),RLDIN,1    SKIP OVER TEXT RECORD
         CHECK DECB5
         B     XL1                   EXIT RLD RTN
UNRES    MVC   37(11,RST),UNRESOLV     MOVE IN '$UNRESOLVED'
         CLI   13(RPLACE),NEVCALL    TEST FOR NEVER CALL
         BC    7,MAP0119             NO  LEAVE UNRESOLVED
         MVC   37(11,RST),NEVERCAL     MOVE IN '$NEVER-CALL'
         B     MAP0119               RETURN TO MAIN LINE
WXT   MVC   37(14,RST),UNRESOLV
      B   MAP0119
RLDIN    DS    64F                   RLD READ INTO HERE
UNRESOLV  DC C'$UNRESOLVED(W)'
NEVERCAL DC    C'$NEVER-CALL'        NEVER CALL DESIGNATOR
SVAR1    DS    34C                   SAVE AREA
CRHEAD   DC    C'LOCATION  REFERS TO SYMBOL  IN'
CUMREQ   DC    C'LOCATION        REQUESTS CUMULAT'
         DC    C'IVE PSEUDO REGISTER LENGTH'
CUMLEN   EQU   CUMREQ+9              LOC OF ADDRESS
         EJECT
*
*        THIS ROUTINE ENDS THE MAP
*
CLEANUP  SR    RPLACE,RPLACE         ZERO REG CTR REGISTER
         MVC   PRHDR+2(117),PRHDR+1  PREVENT LAST HEADER FROM PRINTIN
         MVC   PRLIN+2(30),PRLIN+1   BLANK OUT POSS INTERNAL REF
         C     RPLACE,PRAL        TEST FOR NO PSEUDO REGISTERS
         BC    8,ENTOT1              NONE  OMIT PROCESSING
         L     RC,SAVEND             LOAD POINTER TO LAST ESD
         LA    RC-1,16               LOAD INDEXING FACTOR
         L     RST2,XCESDTAB         LOAD ADDR OF ESD TABLE
*
*        LIST PSEUDO REGISTERS
*
         MVC   PRLIN+20(100),PRLIN+19  BLANK OUT ERSIDUE
         MVC   PRLIN+2(16),PSEUDOS
         MVI   PRLIN,DOUBLE            PRINT AND DOUBLE SPACE
         LA    R15,PUTLINS           PRINT SUBROUTINE
         BALR  R14,R15               CALL SUBROUTINE
         MVC   PRLIN+5(22),NAMOLEN   CREATE HEADER
         MVC   PRLIN+35(22),NAMOLEN
         TM    APTSWS,TSO          TSO MODE?
         BC    1,TEMP3             YES - BRANCH
         MVC   PRLIN+65(22),NAMOLEN
         MVC   PRLIN+95(22),NAMOLEN
TEMP3    MVI   PRLIN,TRIPLE        PRINT AND TRIPLE SPACE
         MVC   PRHDR(119),PRLIN
         BALR  R14,R15               CALL SUBROUTINE
L7       TM    8(RST2),X'06'         TEST FOR PSEUDO
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
MAP013   EQU   L7                    LOOP TO PROCESS PSEUDO REGS
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         BC    12,L7CTL              NO
         TM    8(RST2),X'01'         TEST FOR PSEUDO
         BC    3,L7CTL               NO  GO TO NEXT ESD ENTRY
ONEFND   CH    RPLACE,COUNT2       LINE FULL?
         BC    7,L7CONT              NO
         SR    RPLACE,RPLACE         REZERO POINTER
         LA    R15,PUTLINS           SUBR TO PUT 1 LINE
         BALR  R14,R15               CALL SUBROUTINE
L7CONT   LR    RWORK,RPLACE          FORM ACTUAL PRINT ADDR
         LA    RWORK,PRLIN(RWORK)
         L     RPAR,8(0,RST2)        LOAD ADDDRESS FOR CONVERSION
         LA    R15,BINBCDS           CONVERT SUBR
         BALR  R14,R15               CALL SUBROUTINE
         MVC   3(8,RWORK),0(RST2)    MOVE IN NAME
         MVC   13(6,RWORK),COLLECT   MOVE IN LOC
         L     RPAR,12(0,RST2)       LOAD ADDRESS FOR CONVERSION
         BALR  R14,R15               CALL SUBROUTINE
         MVC   21(6,RWORK),COLLECT   MOVE TO PRINT LINE
         LA    RPLACE,30(0,RPLACE)   ADD TO COUNTER
L7CTL    BXLE  RST2,RC-1,L7          LOOP TO NEXT ESD TIL LAST
         LTR   RPLACE,RPLACE         TEST FOR NO PSEUDO REGS
         BC    8,ENTOT               BRANCH AROUND PUT
         LA    R15,PUTLINS           SUBR TO PRINT LINE
         MVI   PRLIN,DOUBLE            PRINT AND DOUBLE SPACE
         BALR  R14,R15               CALL SUBROUTINE
*
*        PUT OUT ENTRY ADDRESS AND TOTAL LENGTH
*
ENTOT    L     RPAR,PRAL          LOAD PSEUDO LENGTH
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
MAP014   EQU   ENTOT                 ROUTINE FOR LENGTH OF PSEUDOS
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         MVC   PRHDR+2(117),PRHDR+1  BLANK OUT PRINT HEADER
         BAL   R14,BINBCDS           CALL CONVERSION SUBROUTINE
         MVC   PRLIN+2(32),CUMPS     PUT IN INDICATOR
         MVC   PRLIN+36(6),COLLECT   MOVE IN QUANTITY
         LA    R15,PUTLINS           SUBROUTINE TO PNINT LINE
         BALR  R14,R15               CALL SUBROUTINE
ENTOT1   MVC   PRLIN+2(13),ENTADD    LOAD INDICATOR
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
HEWLFAPX EQU   ENTOT1                  ENTRY AFTER SYNAD EXIT
         ENTRY HEWLFAPX
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         MVC   PRHDR+2(117),PRHDR+1  BLANK OUT PRINT HEADER
         MVC   WKWORD+1(3),PDSE11  MOVE ENTRY ADDRESS
         L     RPAR,WKWORD           LOAD FULL WORD
         TM    PDSE3,ALBIT         TEST FOR ALIAS
         BC    8,MAP0153             NO  ENTRY ADDRESS CORRECT
         L     RPAR,IOCT           PICK UP RIGHT ENTRY ADDRESS
         SRL   RPAR,8
MAP0153  EQU   *
         BAL   R14,BINBCDS           CALL CONVERSION SUBROUTINE
         MVC   PRLIN+18(6),COLLECT   STORE NUMBER
         LA    R15,PUTLINS           PRINT LINE
         BALR  R14,R15               CALL SUBROUTINE
         MVC   PRLIN+2(12),TOTLEN    LOAD TITLE
         MVC   WKWORD+1(3),PDSE9   LOAD TOTAL LENGTH IN FULL WORD
         L     R1,WKWORD             LOAD IN FOLL WORD
         BAL   R14,BINBCDS           CALL CONVERSION SUBROUTINE
         MVC   PRLIN+18(6),COLLECT   STORE NUMBER
         MVI   PRLIN,DOUBLE            PRINT AND DOUBLE SPACE
         LA    R15,PUTLINS           PRINT LINE
         BALR  R14,R15               CALL SUBROUTINE
         MVI   L2SW+1,X'70'          RESET SWITCHES
         MVI   L1SW+1,X'00'
         MVI   L5SW3+1,X'00'
         MVI   L5SW2+1,X'30'
         TM    NEWSW,X'40'             IS ENTRY FROM INTERMEDIATE
         BC    1,MAP0154               YES--BYPASS FREEMAIN AND CLOSE
         L     RA,DCBLMOD
         MVC   33(3,RA),SAVEODAD     RESTORE END OF DATA ADDRESS
         CLOSE ((RA))
         TM    JFCBADDR,X'80'          WAS OPEN J REQUIRED
         BZ    MAP0154                 NO--BRANCH
         FREEMAIN E,LV=200,A=JFCBADDR  FREE JFCB AREA
MAP0154  MVC   SEGHD(8),SAVSEG         RESTORE SEG. NO. TO HDRS
         MVI   SEGNO+1,X'01'
         MVI   L0SW+1,X'00'
         MVC   LINECNT+1(1),LINCOUNT+1 RESTORE LINE COUNT TO APT
         NI    NEWSW,X'EF'             INDICATE MAP/XREF NOT OPERATING
         LM    R14,RBASE,SPACES+12
         BR    R14                     RETURN
         DS    0F
PSEUDOS  DC    C'PSEUDO REGISTERS'      HEADER FOR PSEUDO REGISTERS
NAMOLEN  DC    C'NAME    ORIGIN  LENGTH'  HEADER FOR PSEUDOS
CUMPS    DC    C'TOTAL LENGTH OF PSEUDO REGISTERS' LINE FOR OUT PUT
ENTADD   DC    C'ENTRY ADDRESS'
ENTRY    EQU   ENTADD                WORD ENTRY
TOTLEN   DC    C'TOTAL LENGTH'
SAVSEG   DC    C'SEG. NO.'           FOR RESTORATION FO SEG. NO.
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         EJECT
*
*        THIS SUBROUTINE TAKES A BINARY QUANTITY FROM RPAR
*        AND CONVERTS IT TO PRINT CHARACTERS TO THE BASE
*        INDICATED BY THE VARIABLE TEN.  THIS RESULT IS PLACED
*        IN THE SIX CHARACTER AREA COLLECT.  THE SUBROUTINE
*        RETURNS ON REGISTER R14.
*
BINBCDS  LA    RPAR,0(0,RPAR)        CLEAR HIGH ORDER BITS
         LTR   RPAR,RPAR             TEST FOR ZERO
         BC    7,CVTCONT             NO
         MVC   COLLECT(6),ZERO       STORE ZERO INDICATOR
         BR    R14                   RETURN
TEN      DC    A(16)                   DIVIDE CONSTANT
ZERO     DC    C'    00'             ZERO INDICATOR
CVTCONT  ST    RPAR,COLLECT-1        PLACE BINARY QUANT IN BUFFER
         UNPK  COLLECT(7),COLLECT(4)  UNPACK BINARY QUANTITY
         MVZ   COLLECT(6),COLLECT-1  ZERO ALL ZONES FOR TRANSLATE
         TR    COLLECT(6),TRTABLE    TRANSLATE FOR PRINTING
*
*        CHANGE LEADING ZEROS TO BLANKS
*
         LA    R0,1                  LOAD INCREMENT
         LA    RPAR,COLLECT          LOAD START ADDRESS
HIZEROS  CLI   0(RPAR),C'0'          TEST FOR ZERO
         BCR   7,R14                 NO  DONE SO RETURN
         MVI   0(RPAR),C' '          REPLACE ZERO WITH LEADING BLANK
         BXH   RPAR,R0,HIZEROS       INCR + LOOP TO NEXT DIGIT ALWAYS
BUFFER   DS    1D                    DOUBLE WORD AREA FOR CONVERSION
COLLECT  EQU   BUFFER+1              ADDRESS OF CONVERTED DATA
TRTABLE  DC    C'0123456789ABCDEF '  TABLE FOR TRANSLATION
         EJECT
*
*        THIS SUBROUTINE PUTS OUT A LINE FROM PRLIN AND THEN
*        BLANKS IT OUT.
*
         DS    0H
PUTLINS  STM   RE,R15,PRSAV          SAVE REGISTERS
SET4LINE LA    RE,PRLIN              SET FOR PRINT OF LINE
         TM    APTSWS,TSO          TSO MODE?
         BC    1,PRINT             YES - BRANCH
         LH    R15,LINCOUNT          LOAD LINE COUNT INTO REGISTER
         BCT   R15,CHKSNGL
         B     CHKHDR                  IF AT END OF PAGE
CHKSNGL  CLI   PRLIN,SINGLE            WAS SINGLE SPACE REQUESTED
         BE    NOPAGE                  YES--GO PRINT
         BCT   R15,CHKDBL              NO--DECREMENT COUNT AGAIN
         B     CHKHDR                  IF AT END OF PAGE
CHKDBL   CLI   PRLIN,DOUBLE            WAS DOUBLE SPACE REQUESTED
         BE    NOPAGE                  YES--GO PRINT
         BCT   R15,NOPAGE              NO--MUST BE TRIPLE--DECREMENT
CHKHDR   CLC   PRLIN+1(118),PRHDR+1    IS THIS LINE HEADER
         BE    HEADPNT                 YES--DON'T PRINT TWICE
         LA    RE,PRHDR                SET TO PRINT HEADER
HEADPNT  MVI   LINCOUNT+1,NUMBLINS     RESET LINE COUNTER
         L     R15,HEWLCWBB+20         ADDRESS OF PRINT BUFFER
         MVI   0(R15),RESTORE          INSERT CONTROL CH FOR RESTORE
         L     R15,PRNTAD              ADDRESS OF PRINT ROUTINE
         BALR  R14,R15
         B     PRINT                 GO TO PRINT
NOPAGE   STC   R15,LINCOUNT+1        STORE UPDATED LINE COUNT
         CLI   LINCOUNT+1,X'02'      TEST FOR BOTTOM OF PAGE
         BC    3,PRINT               NO  GO AHEAD AND PRINT
         CLC   PRLIN+1(118),PRHDR+1  TEST FOR HEADER
         BE    HEADPNT                 NO DOUBLE HEAD PRINT
PRINT    L     RC,HEWLCWBB+20      ADDRESS OF PRINT BUFFER
         MVC   0(121,RC),0(RE)         MOVE MESSAGE TO PRINT BUFFER
         L     R15,PRNTAD              ADDRESS OF PRINT ROUTINE
         BALR  R14,R15
         TM    APTSWS,TSO          TSO MODE?
         BC    1,PREXIT            YES - BRANCH
         LA    R15,PRHDR             LOAD FOR TEST FOR HEADER
         CR    R15,RE                TEST FOR HEADER LAST
         BE    SET4LINE              YES  PUT OUT PROPER LINE
PREXIT   LM    RE,R15,PRSAV          NO  RESTORE REGISTERS
         MVI   PRLIN,SINGLE          SET PRLIN BUFFER TO SINGLE SPACE
         MVC   PRLIN+2(118),PRLIN+1  BLANK OUT PRINT LINE
         BR    R14                   EXIT
*
*        THIS SUBROUTINE PERFORMS IMMEDIATE SKIP OPERATIONS, USING
*        THE CARRIAGE COTNROL CHARACTER FROM LOCATION CNTLCH
*
CNTRL    ST    R14,SAV14               SAVE R14
         TM    APTSWS,TSO          TSO MODE?
         BC    1,CNTRLB            YES - BRANCH
         LH    R15,LINCOUNT
         BCT   R15,CNTRLA              DECREMENT LINE COUNT
         B     NEWPAGE                 IF AT END OF PAGE
CNTRLA   CLI   CNTLCH,SKIP             WAS SKIP ONE REQUESTED
         BE    CNTRLB                  YES
         BCT   R15,CNTRLB              NO--DECREMENT LINE COUNT AGAIN
NEWPAGE  MVI   LINCOUNT+1,X'01'        INDICATE END OF PAGE
         BR    R14                     AND RETURN
CNTRLB   STH   R15,LINCOUNT            STORE UPDATED LINE COUNT
         L     R15,HEWLCWBB+20         ADDRESS OF PRINT BUFFER
         MVC   0(1,R15),CNTLCH         MOVE IN CONTROL CHARACTER
         L     R15,PRNTAD              ADDRESS OF PRINT ROUTINE
         BALR  R14,R15
         L     R14,SAV14               RESTORE R14
         BR    R14                     RETURN
SAV14    DC    F'0'
CNTLCH   DC    AL1(SKIP)
         DS    0F
PRSAV    DS    6F                    SAVE AREA
RPARSAV  EQU   PRSAV+8               SAVE R1 IN SORT OVER BASE SAVE
NUMBLINS EQU   53                    NUMBER OF LINES ON PAGE AFTER 1ST
LINCOUNT DC    AL2(54)               COUNTER OF LINES ON A PAGE
PRHDR    DC    AL1(DOUBLE)             CONTROL CH PRINT AND SPACE 2
         DC    4C'                              '
PRLIN    DC    AL1(SINGLE)             CONTROL CH PRINT AND SPACE
         DC    4C'                              '  BUFFER
PRNTAD   DC    V(HEWLEPNT)             ADDRESS OF PRINT ROUTINE
JFCBADDR DC    F'00'                   ADDR OF JFCB AREA
XLSTADDR DC    A(APTXLIST)             ADDR OF SYSLMOD EXIT LIST
         EJECT
*
*        THIS SUBROUTINE TAKES AN ANTRY NUMBER FROM RPAR
*        AND RETURNS THE ADDRESS OF THAT ENTRY IN R15
*        AND ITS SEGMENT NUMBER IN RPAR
*
SEGSUBR  SLL   RPAR,4                MULT BY 16
         L     R15,XCESDTAB          LOAD ADDRESS OF ESD TABLE
         AR    R15,RPAR              ADD PARAMETER
         S     R15,TEN               AND SUBTRACT SIXTEEN
         SR    RPAR,RPAR             CLEAR REG
         IC    RPAR,12(0,R15)        INSERT SEG NUMBER
         BR    R14                   RETURN
*
         HEWAPT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         END
