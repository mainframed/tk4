         TITLE  'HEWLFROU-ENTRY,SYNAD,AND PRINT ROUTINES'
*  THIS CSECT IS THE ENTRY POINT OF LINKAGE EDITOR F AND CONTAINS AN  *
* UNCONDITIONAL BRANCH TO HEWLFINT WHERE INTERNAL PROCESSING BEGINS.  *
*  THE ERROR DIAGNOSTIC AND LOG ROUTINE AND A COMMON PRINT ROUTINE,   *
* THE  EXIT LIST (APTEXLST,APTXLIST) AND A COMMON SYNAD ROUTINE ARE   *
* ALSO IN THIS CSECT.                                                 *
*  DCB MACROS FOR SYSLIN, SYSLMOD, SYSUT1, SYSPRINT, AND SYSLIB,      *
* ARE PRESENT AND THE CSECT CONTAINS APPROPRIATE VCONS, EXTRNS AND    *
* ENTRIES SO THAT  CERTAIN EXCLUSIVE CALLS BETWEEN SEGMENTS WILL BE   *
* ALLOWED                                                             *
*                                                                     *
HEWLFROU CSECT
**********************************************************************
*385200-391600,430800-436400,446800-447600,453200-464400         S21016
*503600-964400                                                   S01904
*020200,140900                                                   A47001
*C222800                                                        OX01131
*C851600,C854800                                                 YM5281
*A717700-717984                                                  XM1692
*A706500-706700,A944100-944392,C940400                          OX04245
*I022800,I501200,I964400                                OX04280,OY03413
*A644400,I644900-645100                                 OX05441,OY05016
*I053200,I107600,C108400                                        OZ01414
*C964500                                                       @XA11383
*C168400                                                       @ZA07606
*
         EJECT
**********************************************************************
         ENTRY HEWLCRO1
         ENTRY HEWLCRO2
         ENTRY HEWLCRO3
         ENTRY APTEND
         ENTRY HEWLCSDB
         ENTRY HEWLCMDB
         ENTRY HEWLCPDB
         ENTRY HEWLCUDB
         ENTRY HEWLTMDB
         ENTRY HEWLFLOG
         ENTRY HEWLFLDB
         ENTRY APTEXLST
         ENTRY APTXLIST
         ENTRY HEWLEPNT
         ENTRY HEWLCADA
         ENTRY     ENQNAME
         ENTRY     MINOR
         ENTRY INDDNAME                                          A47001
         EXTRN HEWLEEON
         EXTRN HEWLCEOD
         EXTRN HEWLXIT2
         EXTRN MSGFOUR
         ENTRY HEWVLDCK                                 OX04280,OY03413
*                                                                     *
*   REGISTERS AND EQUATES                                             *
*                                                                     *
R0       EQU   0
R1       EQU   1
REG2     EQU   2
REG3     EQU   3
REG4     EQU   4
BUFFADD  EQU   4
REG5     EQU   5
PRECL    EQU   8
R9       EQU   9
TSO      EQU   X'80'                   TSO SWITCH IN APTSWS
TERM     EQU   X'02'                   TERM SWITCH IN NEWSW
TERMCHK  EQU   X'08'                   TERMINAL CHECK SWITCH
NOCHK    EQU   X'F7'                   NO CHECK NEEDED
TERMWRT  EQU   X'04'                   TERMINAL WRITE SWITCH
NOTRMWRT EQU   X'FB'                   NO WRITE NEEDED
FLUSH    EQU   X'02'                   FLUSH REQUESTED
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
REG14    EQU   14
R15      EQU   15
REG15    EQU   15
BLKSIZ   EQU   12
LRECL    EQU   14
BLKFAC   EQU   16
RECCNT   EQU   18
CURBUF   EQU   20
PRNTSW   EQU   24
READSW   EQU   24
NUMBLINS EQU   53                      NUMBER OF LINES PER PAGE
LETON    EQU   X'10'
NOEX     EQU   X'FD'
NOLIN    EQU   55
TERMON   EQU   X'04'                                            OZ01414
         USING *,15
         BC    15,OVERNAME            BRANCH AROUND MODULE IDENT
         DC    C' 01/26/76 OZ07606'   DATE/APAR NUMBER
         DC    C' HEWLFROU ',0H'0'    MOD ID
         SPACE 3
OVERNAME L     15,HEWLCINT
         BR    15                       BRANCH TO INITIALIZATION
HEWLCINT DC    V(HEWLFINT)
***********************************************************************
*        BRANCH TO HEWLFINT                                           *
***********************************************************************
         TITLE 'HEWLFROU'
***********************************************************************
* COMMON SYNAD ROUTINE                                                *
***********************************************************************
         USING *,15
         USING APTDSECT,REG2
         USING IHADCB,1
HEWLCRO1 LR    REG3,0                  ADDRESS OF DECB
         NI    ENTRYSW,X'7F'           INDICATE ENTRY FROM BSAM
         LA    REG3,0(0,REG3)          DESTRUCT H1 ORDER BYTE
         LA    REG4,DECBLIN            ADDRESS OF SYSLIN DECB
         CR    REG3,REG4               IS THIS SYSLIN
         BC    8,CKBLKSZ               YES--CHECK FOR SHORT BLOCK
         LA    REG4,DECBLIB            NO--CHECK IF THIS IS SYSLIB
         CR    REG3,REG4
         BC    7,CHECKPNT              NO--GO CHECK FOR SYSPRINT
         TM    HEWLCRBB+24,X'08'       IS IGNORE ERROR BIT ON
         BCR   1,14                    YES--RETURN
CKBLKSZ  L     REG3,16(0,REG3)         ADDRESS OF STATUS INDICATORS
         CLI   13(REG3),X'40'          IS IT INCORRECT LENGTH
         BC    7,SYNERR                NO--GO TO ERROR ROUTINE
         LH    REG4,BLKFAC(0,REG5)     YES--CHECK FOR VALID SHORT BLOCK
         LH    REG3,14(0,REG3)         RESIDUAL COUNT
DECREC   BCTR  REG4,0                  DECREMENT RECORD COUNT
         SH    REG3,LRECL(0,REG5)      SUBTRACT LOGICAL RECORD LENGTH
         BP    DECREC                  LOOP UNTIL ZERO OR MINUS
         BM    SYNERR                  NOT VALID SHORT BLOCK
         STH   REG4,RECCNT(0,REG5)     SAVE NUMBER OF RECORDS.
         BR    14                      RETURN TO CONTROL PROGRAM
SYNERR   TM    ENTRYSW,X'80'           WAS ENTRY FROM BPAM
         BC    8,BSAMERR               NO
         B     BPAMERR                 GO TO BPAM MACRO
CHECKPNT LA    REG4,DECBPRNT           CHECK FOR SYSPRINT
         CR    REG3,REG4
         BC    7,BSAMERR               NO
         OI    NEWSW,X'08'             SET IMMEDIATE ABORT BIT
         B     ABORT
BSAMERR  ST    REG4,SAVE4              SAVE REGISTER 4
         LR    REG4,REG15              SAVE BASE REGISTER
         SYNADAF ACSMETH=BSAM          BSAM
         LR    REG15,REG4              RESTORE BASE REGISTER
         L     REG4,SAVE4              RESTORE REGISTER 4
MESGPRNT OI    BITMAP+4,X'10'          INDICATE ERR 294 FOR BIT MAP
         MVI   HISEV+1,X'04'           MOVE IN SEVERITY 4
MESGPNTA LH    REG3,LINECNT            CHECK FOR END OF PAGE
         BCT   REG3,NOPAGE
         LA    REG3,NUMBLINS           INITIALIZE LINE COUNT
         L     REG4,HEWLCWBB+20        ADDRESS OF PRINT BUFFER
         MVI   0(REG4),X'8B'           RESTORE CHARACTER
         LR    REG4,REG15              SAVE BASE REG
         L     REG15,PRNTAD            ADDRESS OF PRINT ROUTINE
         BALR  REG14,REG15
         LR    REG15,REG4              RESTORE BASE REG
NOPAGE   STH   REG3,LINECNT            STORE UPDATED LINE COUNT
         L     REG4,HEWLCWBB+20        ADDRESS OF PRINT BUFFER
         MVC   26(94,REG4),32(1)       MOVE FORMATTED MESSAGE TO BUFF
         MVC   0(20,REG4),MESG1        MOVE IN IEW0294
         TM    NEWSW,X'10'             WAS ENTRY FROM MAP
         BC    8,MESGPNTB              NO
         MVC   0(8,REG4),MESG3         YES--MOVE IN IEW0630
MESGPNTB LR    REG4,REG15              SAVE BASE REGISTER
         TM    NEWSW,TERM              TERM OPTION SPEC?        OZ01414
         BZ    NOTERM                  NO? BRANCH               OZ01414
         OI    HEWLCWBB+24,TERMON      SET ON TERM.WRITE SW     OZ01414
NOTERM   L     REG15,PRNTAD            LOAD ADD OF PRT ROUTINE  OZ01414
         BALR  REG14,REG15
         LR    REG15,REG4              RESTORE BASE REG
         SYNADRLS
         LR    REG15,REG4    RESTORE BASE VALUE TO R15
         TM    NEWSW,X'10'             WAS ENTRY FROM MAP
         BC    8,ABORT                 NO--ABORT
         L     REG15,MAPADD            YES--RETURN TO MAP
         BR    REG15
ABORT    L     REG15,SYNADROU          GO TO FINAL
         BR    REG15
         USING *,REG15
HEWLCRO2 L     REG15,BASEADD           SET UP BASE REG
         USING HEWLCRO1,REG15
         OI    ENTRYSW,X'80'           INDICATE BPAM ENTRY
         TM    HEWLCRBB+24,X'08'       IS IGNORE ERROR BIT ON
         BCR   1,14                    YES--RETURN
         TM    DCBRECFM,X'40'          NO--IS RECFM FIXED
         LR    REG3,0                  DECB ADDRESS TO REG3
         BC    8,CKBLKSZ               YES--GO CHECK FOR SHORT BLOCK
BPAMERR  ST    REG4,SAVE4              SAVE REGISTER 4
         LR    REG4,REG15              SAVE BASE REGISTER
         SYNADAF ACSMETH=BPAM          BPAM
         LR    REG15,REG4              RESTORE BASE REGISTER
         L     REG4,SAVE4              RESTORE REGISTER 4
         TM    NEWSW,X'10'             WAS ENTRY FROM MAP
         BC    8,MESGPRNT              NO
         OI    BITMAP,X'40'            INCICATE ERR 630 FOR BIT MAP
         B     MESGPNTA
         USING *,REG15
HEWLCRO3 L     REG15,BASEADD           SET UP BASE REG
         USING HEWLCRO1,REG15
         ST    REG4,SAVE4              SAVE REGISTER 4
         LR    REG4,REG15              SAVE BASE REGISTER
         SYNADAF   ACSMETH=EXCP
         LR    REG15,REG4              RESTORE BASE REGISTER
         L     REG4,SAVE4              RESTORE REGISTER 4
         B     MESGPRNT                GO TO PRINT MESSAGE
SAVE4    DC    F'0'                    SAVE AREA FOR REGISTER 4
MAPADD   DC    V(HEWLFAPX)             ADDRESS OF MAP TO CLEAN UP
BASEADD  DC    A(HEWLCRO1)
INDDNAME DC    C'SYSLIN  '         TO SAVE SYSLIN DDNAME         A47001
ENTRYSW  DC    X'00'
*        BIT 0 - 0  ENTRY FROM BSAM
*                1  ENTRY FROM BPAM
MESG1    DC    X'09'                   CONTROL CHARACTER PRINT AND SP
         DC    C'IEW0294'
         DC    C'  SYNAD EXIT'
MESG3    DC    X'09'                   CONTROL CHARACTER PRINT AND SP
         DC    C'IEW0630'
SYNADROU DC    V(HEWLCSNX)             ADDRESS TO FINAL PROCESSOR
         EJECT
***********************************************************************
*                                                                     *
*  DCB EXIT ROUTINE FOR SYSLIN,SYSLIB, AND SYSPRINT                   *
*                                                                     *
***********************************************************************
         USING *,15
         USING IHADCB,1
HEWLEXIT EQU   *
         NI    DCBBUFNO,X'00'      ZERO OUT BUFFER NUMBER FIELD
         TM    DCBRECFM,X'80'      CHECK FOR FORMAT F-BITS 01=10
         BC    8,EXIT4                 NO--RETURN
         TM    DCBRECFM,X'40'
         BC    1,EXIT4                 NO--RETURN
         NI    DCBRECFM,X'E7'          TURN OFF B AND S BITS
         L     REG5,HEWLCLAC           ADDRESS OF CURRENT CONTROL BLOCK
         LA    REG3,0(0,R1)            ADDRESS OF DCB
         L     REG4,HEWLCWBB           ADDRESS OF SYSPRINT DCB
         LA    REG4,0(0,REG4)          DESTRUCT HI ORDER BYTE
         CR    REG3,REG4               IS THIS SYSPRINT
         BC    7,EXITA                 NO
****************************************************************
*  UNDER TSO, SYSPRINT IS ALWAYS UNBLOCKED; LRECL=BLKSIZE=81.  *
****************************************************************
         TM    APTSWS,TSO          IS TSO IN EFFECT?
         BC    8,TSO1              NO-BRANCH
         CLI   DCBDEVT,X'4F'       IS TERM USED FOR SYSPRINT?  @ZA07606
         BNE   TSO1                BR IF NOT USED              @ZA07606
         LA    REG5,81             LOAD LRECL FOR TERMINAL
         STH   REG5,DCBLRECL       STORE IN DCB
         STH   REG5,DCBBLKSI           STORE BLOCKSIZE
         STH   REG5,HEWLCWBB+14    STORE IN SYSPRINT CONT. BLOCK
TSO1     LA    REG5,HEWLCWBB       LOAD CONTROL BLOCK
         L     8,TEST
         CLI   0(8),X'00'
         BE    EXITA
         LH    REG4,DCBLRECL
         CH    REG4,DCBBLKSI
         BL    EXITB
         MVI   0(8),X'00'
         B     EXITB
EXITA    LH    REG4,DCBBLKSI
         LTR   REG4,REG4
         BC    7,EXIT1                 IF BLOCKSIZE NOT 0 BRANCH
         LH    REG4,DCBLRECL
EXITB    STH   REG4,DCBBLKSI       MAKE BLKSI = LRECL
EXIT1    SR    PRECL,PRECL
         LH    REG3,MAXBF              MAXIMUM BLOCKING FACTOR
EXIT2    LA    PRECL,1(0,PRECL)        DIVIDE BLKSI BY LRECL
         SH    REG4,DCBLRECL           TO FIND BLOCKING FACTOR
         BC    8,EXIT3
         BCT   REG3,EXIT2              FALL THRU IF BLKSIZE TO BIG
         MVI   BLKFAC+1(REG5),41       INDICATE INVALID BLOCKSIZE
         OI    READSW(REG5),X'04'      INDICATE INVALID BLOCKSIZE
         BR    R14                     RETURN
EXIT3    STH   PRECL,BLKFAC(0,REG5)    SAVE BLOCKING FACTOR
         MVI   RECCNT+1(REG5),X'01'    INITIALIZE RECORD COUNT TO ONE
         MVC   BLKSIZ(2,REG5),DCBBLKSI SAVE BLOCK SIZE IN CONTROL BLOCK
         OI    READSW(REG5),X'80'      SET SWITCH TO PRIME BUFFER
         NI    READSW(REG5),X'FB'      TURN OFF INVALID BLOCKSIZE BIT
         LA    REG3,HEWLCWBB           IS THIS SYSPRINT
         CR    REG3,REG5
         BC    7,EXIT4                 NO--RETURN
         STH   PRECL,RECCNT(0,REG5)    YES--RESET RECCNT TO BLK FACTOR
         BCT   PRECL,EXIT5             IS IT BLOCKED
         BC    15,EXIT4                NO
EXIT5    OI    DCBRECFM,X'10'          YES--TURN ON BLOCK BIT
EXIT4    BR    R14                     RETURN
         DROP  15
***********************************************************************
*                                                                     *
*        DCB EXIT ROUTINE FOR SYSUT1                                  *
*                                                                     *
***********************************************************************
         USING *,15
         USING IHADCB,1
HEWLXIT1 EQU   *
         NI    DCBBUFNO,X'00'          ZERO OUT BUFFER NUMBER
         BR    R14                     RETURN
         DROP  15
*  SYSTERM IS ALWAYS UNBLOCKED. LRECL=81 FOR TSO,121 FOR BCKGRND
*
         USING *,15
         USING IHADCB,1
TERMEX   TM    APTSWS,TSO              IN TSO MODE?
         BO    EXIT6                   YES - BRANCH
         LA    REG5,121                NO--SET BLKSIZE,LRECL=121
         STH   REG5,DCBLRECL
         STH   REG5,DCBBLKSI
EXIT6    BR    14                      RETURN
         DROP  15
*                                                                     *
*  DCB MACROS FOR SYSLIN, SYSLMOD, SYSUT1, SYSPRINT, SYSLIB           *
*                                                                     *
*         *         *         *         *         *         *         *
         SPACE 3
         DC    0F'0'
         DC    C'SYSLIN '
HEWLCSDB DCB   DSORG=PS,MACRF=(R),DDNAME=SYSLIN,RECFM=FB,LRECL=80,     X
               NCP=1,EODAD=HEWLEEON,SYNAD=HEWLCRO1,EXLST=APTEXLST
         SPACE 3
         DC    C'SYSLMOD'
SYSLMOD  DCB   DSORG=PO,MACRF=(R,W),DDNAME=SYSLMOD,RECFM=U,            X
               NCP=1,EODAD=HEWLCRO2,SYNAD=HEWLCRO2,EXLST=APTXLIST
HEWLCMDB EQU   SYSLMOD
         SPACE 3
         DC    C'SYSUT1'
SYSUT1   DCB   DSORG=PS,MACRF=(WP,RP),DDNAME=SYSUT1,DEVD=DA,RECFM=U,   X
               BLKSIZE=3072,NCP=1,EODAD=HEWLCRO1,SYNAD=HEWLCRO1,       X
               EXLST=APTELIST
HEWLCUDB EQU   SYSUT1
         SPACE 3
         DC    C'SYSPRINT'
SYSPRINT DCB   DSORG=PS,MACRF=(W),DDNAME=SYSPRINT,DEVD=DA,             X
               NCP=1,RECFM=FA,LRECL=121,SYNAD=HEWLCRO1,EXLST=APTEXLST
HEWLCPDB EQU   SYSPRINT
         SPACE 3
         DC    C'SYSTERM'
SYSTERM  DCB   DSORG=PS,MACRF=(W),DDNAME=SYSTERM,NCP=1,DEVD=DA,        X
               RECFM=FA,LRECL=81,BLKSIZE=81,BUFNO=0,                   X
               EXLST=TERMEXIT
HEWLTMDB EQU   SYSTERM
         SPACE 3
         DC    C'SYSLIB'
HEWLFLDB DCB   DSORG=PO,MACRF=(R),DDNAME=SYSLIB,NCP=1,EODAD=HEWLCEOD,  C
               SYNAD=HEWLCRO2,EXLST=APTEXLST,LRECL=80
         TITLE 'HEWLFROU COMMON PRINT ROUTINE'
*         *         *         *         *         *         *         *
*                                                                     *
*   COMMON PRINT ROUTINE                                              *
*                                                                     *
*         *         *         *         *         *         *         *
APTEND   EQU   *
         USING *,R15
HEWLEPNT STM   R9,R1,SAVREGS       SAVE REGISTERS
         LR    R12,R15                 R12 IS BASE REG
         USING HEWLEPNT,R12
         DROP  R15
         LA    R13,REGSA           ADDRESS OF SAVE AREA
         LA    R11,HEWLCWBB        ADDRESS OF PRINT CONTROL BLOCK
         L     R10,CURBUF(0,R11)        PICK UP BUF ADDR
         TM    0(R10),X'02'             SKIP LINES ONLY
         BNO   TRANCHAR                 NO, PRINT LINE
         NI    0(R10),X'FD'             TURN OFF BIT
TRANCHAR EQU   *
         LA    R0,CVTABEND              PICK UP TABLE END ADDR
         LA    R15,CONVERTB             PICK UP TABLE BEGINADDR
TRANLOOP EQU   *
         CLC   0(1,R10),0(R15)          COMPARE CHAR WITH TABLE
         BE    OUTLPTR                  MATCH FOUND
         LA    R15,2(R15)               UPDATE TABLE PTR
         CR    R15,R0                   END OF TABLE REACHED
         BNH   TRANLOOP                 NO, CONTINUE SEARCH
         B     PRINTK                   ASSUMED ALREADY ASA CHAR
OUTLPTR  EQU   *
         MVC   0(1,R10),1(R15)          MATCH FOUND, PICK UP ASA CHAR
PRINTK   EQU   *
* ****************************************************************** *
*
*        THIS SECTION OF CODE DOES WRITES TO THE SYSTERM DATASET.
*        THE SYSTERM DATA SET MAY RESIDE ON ANY DEVICE, BUT ITS
*        PRIMARY PURPOSE IS TO ISSUE ERROR MESSAGES TO THE TSO
*        USER'S TERMINAL.  THEREFORE, SYSTERM IS ALWAYS UNBLCKD,
*        LRECL=81, BLKSIZE=81.  SINCE THE ERROR MESSAGES ARE
*        ALSO WRITTEN ON THE SYSPRINT DATA SET, THE SAME BUFFERS
*        ARE USED.
*
* ****************************************************************** *
         TM    PRNTSW(R11),TERMCHK     NEED TERMINAL CHECK?
         BC    8,TSO2                  NO - BRANCH AROUND
         CHECK DECBPRN2                CHECK LAST TERMINAL WRITE
         NI    PRNTSW(R11),NOCHK       TURN OFF CHECK SWITCH
TSO2     TM    PRNTSW(R11),TERMWRT     WRITE TO TERM. NEEDED?
         BC    8,TSO3                  NO - GO DO SYSPRINT
         L     R9,TERMDCB              LOAD  TERMINAL DCB
         L     R10,CURBUF(R11)         LOAD CURRENT RECORD ADD.
         WRITE DECBPRN2,SF,(R9),(R10)  WRITE RECORD
         OI    PRNTSW(R11),TERMCHK     TURN ON TERM CHECK SWITCH
         NI    PRNTSW(R11),NOTRMWRT  TURN OFF TERM. WRITE SWITCH
TSO3     TM    PRNTSW(R11),FLUSH       IS THIS A FLUSH?
         BC    8,PRINTD                NO
         CLC   RECCNT(2,R11),BLKFAC(R11) YES--IS ANYTHING IN BUFFER
         BNE   PRINTG                  NO--GO CHECK LAST PRINT
         TM    PRNTSW(R11),X'80'       WAS THERE ANY WRITE
         BC    1,PRINTE                NO--GO RETURN
PRINTI   OI    PRNTSW(R11),X'01'       YES--SET CHECK ONLY BIT
         BC    15,PRINTF               AND GO CHECK
PRINTG   LH    R10,BLKFAC(0,R11)
         SH    R10,RECCNT(0,R11)       NUMBER OF RECORDS TO WRITE
         MH    R10,LRECL(0,R11)        SIZE OF BLOCK
         L     R14,HEWLCWBB
         USING IHADCB,R14
         STH   R10,DCBBLKSI
         DROP  R14
         BC    15,PRINTH               GO TO PRINT
PRINTD   LH    R10,RECCNT(0,R11)       CHECK IF BUFFER FULL
         BCT   R10,PRINTB              BRANCH IF NOT FULL
PRINTH   L     R10,BUFFADD(0,R11)      SWITCH BUFFERS
         MVC   BUFFADD(4,R11),BUFFADD+4(R11)
         ST    R10,BUFFADD+4(0,R11)
         MVC   RECCNT(2,R11),BLKFAC(R11) RESTORE RECORD COUNT
         TM    PRNTSW(R11),X'80'       IS THIS FIRST WRITE
         BC    1,PRINTA                YES--DON'T CHECK
PRINTF   CHECK DECBPRNT
         TM    PRNTSW(R11),X'01'       IS CHECK ONLY SW ON
         BC    1,PRINTE                YES--GO RETURN
PRINTA   WRITE DECBPRNT,SF,HEWLCPDB,(R10)
         TM    PRNTSW(R11),X'02'       WAS THIS A FLUSH
         BC    1,PRINTI                YES--GO CHECK
         NI    PRNTSW(R11),X'7F'       TURN OFF FIRST WRITE SW
         L     R10,BUFFADD(0,R11)      GET NEW BUFFER
         BC    15,PRINTC
PRINTB   STH   R10,RECCNT(0,R11)
         L     R10,CURBUF(0,R11)       UPDATE CURRENT BUFFER ADDRESS
         AH    R10,LRECL(0,R11)
PRINTC   ST    R10,CURBUF(0,R11)
         MVI   0(R10),C' '             CLEAN OUT NEW BUFFER
         MVC   1(120,R10),0(R10)
PRINTE   LM    R9,R1,SAVREGS       RESTORE REGISTERS
         BR    R14                     AND RETURN
SAVREGS  DS    9F                  SAVE AREA
TERMDCB  DC    A(HEWLTMDB)         ADDRESS OF TERMINAL DCB
CONVERTB EQU   *
         DC    X'09'                    MACH CHAR--PRINT ON NEXT LINE
         DC    C' '                     ASA CHAR--PRT ON NEXT LINE
         DC    X'11'                    MACH CHAR--SKIP LINE THEN PRT
         DC    C'0'                     ASA CHAR--SKIP LINE THEN PRT
         DC    X'19'                    MACH CHAR-SKIP 2 LINES THEN PRT
         DC    C'-'                     ASA CHAR--SKIP 2 LINES THEN PRT
         DC    X'89'                    MACH CHAR--TOP OF PAGE THEN PRT
         DC    C'1'                     ASA CHAR--TOP OF PAGE THEN PRT
CVTABEND EQU   *
         TITLE  'HEWLFROU  ERROR DIAGNOSTIC AND LOG ROUTINE'
*              *                   *              *                   *
*FUNCTION                                                             *
*1.THE ERROR DIAGNOSTIC ROUTINE WILL OUTPUT A MESSAGE FOR EACH ERROR  *
*  CONDITION UNCOVERED DURING LINKAGE EDITING. IT WILL ALSO LOG CON-  *
*  TROL CARDS, IF THE LIST OPTION HAS BEEN SPECIFIED. IT WILL NOT     *
*  OUTPUT AN ENGLISH MESSAGE. ALL MESSAGES WILL BE IN THE FORMAT      *
*  IEWMMMS, WHERE 'MMM' IS THE ERROR MESSAGE NUMBER AND 'S' IS THE    *
*  SEVERITY. A CARD, SYMBOL, TWO SYMBOLS, OR BLANKS MAY FOLLOW,       *
*  DEPENDING IF ADDITIONAL INFORMAION IS REQUIRED.                    *
*2.ALSO INCLUDED IS A NUMBER OF 'V' TYPE ADCONS. THIS IS TO ALLOW     *
*  CALLS BETWEEN VARIOUS SUBROUTINES IN THE LINKAGE EDITOR OVERLAY    *
*  TREE.                                                              *
*                                                                     *
*ENTRY POINTS                                                         *
*  HEWLFLOG                                                           *
*  THE CALLING SEQUENCE IS: GR14=RETURN ADD GR15=ADD OF ERROR ROUTINE *
*  GR0=ERROR CODE. THE FOLLOWING TWO REGISTERS ARE OPTIONAL:          *
*  GR1=ADDRESS OF SYMBOL, GR13=ADDRESS OF 2ND SYMBOL.                 *
*                                                                     *
*  INPUT - FROM VARIOUS PROCESSORS WITHIN THE LINKAGE EDITOR          *
*                                                                     *
*  OUTPUT - ALWAYS TO SYSPRNT                                         *
*                                                                     *
*  EXTERNAL ROUTINES - NONE                                           *
*                                                                     *
*  EXITS - RETURN ADDRESS SPECIFIED IN REGISTER 14 IS LOADED INTO R15.*
*          R15 IS USED TO ALLOW CONTROL, WITHIN THE EDITOR, TO PASS TO*
*          ANOTHER OVERLAY SEGMENT(IF CONTROL IS NOT TO BE RETURNED TO*
*          THE SENDER).                                               *
*                                                                     *
*  WORK AREA - A THIRTY-TWO BYTE BUFFER IS USED FOR THE MESSAGE HEADER*
*                                                                     *
*  ATTRIBUTES - REUSABLE                                              *
*                                                                     *
*NOTES:                                                               *
* THE ERROR CODE IN R0 WILL APPEAR AS FOLLOWS:                        *
*                                                                     *
*  *     *     *    *    *    *    *    *    *    *                   *
*  *           *DISPOSITION   *SEVERITY * MESSAGE *                   *
*  * BITS ZERO *  0 TO 3      * 0 TO 4  *         *                   *
*  * TO 12 = 0 * (OPTIONAL)   *         * NUMBER  *                   *
*  *     *     *    *    *    *    *    *    *    *                   *
*                                                                     *
*              DISPOSITION     SEVEVERITY  MESSAGE NUMBER             *
*                =4 BITS          =4 BITS      =8 BITS                *
*                                                                     *
*  TO LOG A CARD  R0 IS SET TO ZERO.(DISPOSITION AND SEVERITY = ZERO  *
*  A DISPOSITION OF 1 = INCLUDE INPUT BUFFER IN MESSAGE(CARD IMAGE)   *
*  A DISPOSITION OF 2 = INCLUDE SYMBOL(ADDRESS IN R1) IN MESSAGE      *
*  A DISPOSITION OF 3 = INCLUDE 2 SYMBOLS(ADD IN R1 AND R13/          *
*                                                                     *
*  SEVERITY 1 = A CONDITION THAT MAY CAUSE AN ERROR DURING EXECUTION  *
*  OF THE OUTPUT MODULE. A MODULE MAP OR CROSS REFERENCE TABLE IS PRO-*
*  DUCED IF SPECIFIED BY THE PROGRAMMER. THE OUTPUT MODULE IS MARKED  *
*  EXECUTABLE                                                         *
*                                                                     *
*  SEVERITY 2 =  AN ERROR THAT COULD MAKE EXECUTION OF THE OUTPUT MOD-*
*  ULE IMPOSSIBLE. PROCESSING CONTINUES. A MODULE MAP OR CROSS        *
*  REFERENCE TABLE IS PRODUCED IF SO SPECIFIED BY THE PROGRAMMER. THE *
*  OUTPUT MODULE IS MARKED NOT EXECUTABLE UNLESS THE 'LET' OPTION HAS *
*  BEEN SPECIFIED                                                     *
*                                                                     *
*  SEVERITY 3 = AN ERROR THAT COULD MAKE EXECUTION OF THE OUTPUT MOD- *
*  ULE IMPOSSIBLE. LINKAGE EDITOR PROCESSING CONTINUES. A MODULE MAP  *
*  OR CROSS REFERENCE TABLE IS PRODUCED IF REQUESTED. THE OUTPUT MOD- *
*  ULE IS MARKED 'NOT EXECUTABLE'.                                    *
*                                                                     *
*  SEVERITY 4 = A CONDITION FROM WIHCH NO RECOVERY IS POSSIBE.        *
*  PROCESSING CONTINUES.                                              *
*                                                                     *
*  THE ERROR DIAGNOSTIC ROUTINE WILL SET A BIT IN A BIT-MAP THAT WILL *
*  BE SCANNED BY THE FINAL PROCESSOR. THE FINAL PROCESSOR WILL OUTPUT *
*  ONLY THOSE ERROR MESSAGES THAT HAVE BEEN DETECTED WITHIN THE EDITOR*
*                                                                     *
*  THE ERROR DIAGNOSTIC ROUTINE WILL UPDATE THE LINE COUNT INDICATOR  *
*  IN THE ALL PURPOSE TABLE. IT WILL SKIP TO A NEW PAGE WHEN THE LINE *
*  COUNT EQUALS ZERO(MAXIMUM NUMBER OF LINES = 55)                    *
*              *                   *              *                   *
         SPACE 1                                                 S21016
**************  SYMBOLIC EQUATES FOR IDR SUPPORT  ************** S21016
POS12    EQU   12                      DISPLACEMENT OF 12 BYTES  S21016
NODISP   EQU   0                       NULL DISPLACEMENT         S21016
LEN80    EQU   80                      LENGTH OF A CARD IMAGE    S21016
MXIII    EQU   63                      SIXTY-THREE               S21016
LOGIDNT  EQU   X'20'                   SWITCH INDICATING A CARD  S21016
*                                      IMAGE TO BE LOGGED IS     S21016
*                                      NOT IN THE INPUT BUFFER   S21016
*                                      BUT IS POINTED TO BY R1   S21016
         SPACE 1                                                 S21016
HEWLFLOG EQU   *
         USING LOG01,12
         STM   R11,R1,SPACES+12
         BALR  12,0
*TEST IF THIS SEVERITY CODE IS HIGHEST RECEIVED
LOG01    SRL   R0,12          ISOLATE DISPOSITION
         STC   R0,HEWLEDE1        SAVE DISPOSITION
         NI    HEWLEDE1+2,X'0F'   ISOLATE SEVERITY
         CLC   HEWLEDE1+2(1),HISEV+1 COMPARE IF NEW SEVERITY CODE IS
*                                       GREATER
         BC    4,LOG02
         MVC   HISEV+1(1),HEWLEDE1+2 RESET SEVERITY CODE TO NEW HIGH
LOG02    L     R0,HEWLEDE1
         STH   R0,X+8
         SR    R0,R0
         IC    R0,X+9  INSERT MESS NO IN R0
         CVD   R0,X  CONVERT MESS NO TO DECIMAL
         UNPK  X+5(3),X+6(2)  CONVERT MESS NO TO ALPHA-NUM.
         MVZ   X+7(2),X+5  MOVE ZONE BITS TO LAST BYTE OF MESS NO.+S.C.
         MVC   X+1(4),DUMH MOVE CONTROL CHAR. AND IDENTIFIER
*                          HEADER WITH MESS NO. AND S.C. NOW COMPLETE
*IT MUST NOW BE DETERMINED IF ANY ADDITIONAL ACTION IS REQUIRED. THE
*DISPOSITION BYTE IS NOW  TESTED. IT HAS BEEN STORED IN SAREAS
         L     R15,PRNTAD              ADDRESS OF PRINT ROUTINE
         TM    APTSWS,TSO              TSO IN EFFECT?
         BO    TSO4                    YES - NO PAGING
         LH    R11,LINECNT             CHECK FOR END OF PAGE
         BCT   R11,LOG07               BRANCH IF NO
         LA    R11,NOLIN               NUMBER OF LINES PER PAGE
         L     R14,HEWLCWBB+20         ADDRESS OF PRINT BUFFER
         MVI   0(R14),X'8B'            CONTROL CHARACTER FOR RESTORE
         BALR  R14,R15                 TO PRINT ROUTINE
LOG07    STH   R11,LINECNT             STORE UPDATED LINE COUNT
TSO4     TM    NEWSW,TERM              TERM OPTION SPEC.?
         BZ    TSO5                    NO - BRANCH
         OI    HEWLCWBB+24,TERMWRT     SET ON TERM. WRITE SWITCH
TSO5     L     R14,HEWLCWBB+20         LOAD ADD. OF CURRNT RECRD
         L     R11,HEWLEDE1
         LTR   R11,R11
         BC    8,LOG03
         CLI   HEWLEDE1,X'02'
         BC    2,LOG04     DISPOSITION EQ 3, OUTPUT TWO SYMBOLS
         BC    8,LOG05     DISPOSITION EQ 2, OUTPUT ONE SYMBOL
         CLI   HEWLEDE1,X'01'
         BC    4,LOG010    DISPOSITION EQ 0, NO ACTION
*LOG03 IS DISPOSITION 1, OUTPUT CARD IMAGE
*THE FOLLOWING CODE HANDLES THE OUTPUTTING OF CARD IMAGES
LOG03    TM    IDRSWS,LOGIDNT          IS THE CARD IMAGE ADDRESS S21016
*                                      IN REGISTER 1?            S21016
         BZ    LOG03A                  IF NOT, BRANCH            S21016
         MVC   POS12(LEN80,R14),NODISP(R1)  MOVE CARD IMAGE TO   S21016
*                                      PRINT BUFFER              S21016
         B     LOG010                  GO TO PRINT THE MESSAGE   S21016
LOG03A   L     R11,HEWLCLAC            ADDRESS OF READ CONTROL   S21016
*                                      BLOCK                     S21016
         L     R11,CURBUF(0,R11)       ADDRESS OF CURRENT INPUT BUFFER
         MVC   12(80,R14),0(R11)       MOVE CARD IMAGE TO PRINT BUFFER
         B     LOG010
*IF ENTERED AT LOG3 TWO SYMBOLS ARE FORMATTED, AT LOG4 ONLY 1 SYMBOL
LOG04    MVC   20(8,R14),0(R13)
LOG05    L     R1,SPACES+36            RESTORE CONTINETS OF REGISTER 1
         MVC   10(8,R14),0(R1)
LOG010   MVC   0(8,R14),X+1   MOVE HEADER TO MESS. BUF. AREA
         BALR  R14,R15                 TO PRINT ROUTINE
*A BIT IS NOW SET TO TELL THE FINAL PROCESSOR WHAT MESSAGE TO OUTPUT
         LA    R15,1
         SR    R14,R14
          CLI   HEWLEDE1+3,MXIII       IS MSG NO. > 63 ?         S21016
          BH    MAP2                   IF SO, BRANCH             S21016
         MVC   S+3(1),HEWLEDE1+3
S        SLDL  R14,0
         SRDL  R14,1
         O     R14,BITMAP
         O     R15,BITMAP+4
         STM   R14,R15,BITMAP
          B     BYPASS                 BRNCH AROUND BITMAP2 CODE S21016
MAP2      IC    R14,HEWLEDE1+3         GET MESSAGE NUMBER        S21016
          S     R14,SIXTY3             SUBTRACT 63               S21016
          STC   R14,HEWLEDE1+3         STORE MESSAGE NUMBER-63   S21016
          SR    R14,R14                ZERO REGISTER             S21016
          MVC   S2+3(1),HEWLEDE1+3     MOVE MSG.NO. - 63 TO      S21016
*                                      SHIFT INSTRUCTION         S21016
S2        SLDL  R14,0                  SHIFT ONE-BIT TO POSITION S21016
          SRDL  R14,1                  CORRESPONDING TO MSG.NO.  S21016
          O     R14,BITMAP2            TURN ON APPROPRIATE       S21016
          O     R15,BITMAP2+4          BIT AND STORE             S21016
          STM   R14,R15,BITMAP2        IN BITMAP2                S21016
          B     BYPASS                 BRANCH AROUND CONSTANT    S21016
SIXTY3    DC    A(63)                  VALUE 63 FOR SUBTRACT     S21016
BYPASS    EQU   *                                                S21016
         CLI   HEWLEDE1+2,X'03'
         BC    2,LOG014  ABORT
         BC    8,LOG012   SET NOT EXECUTABLE
         CLI   HEWLEDE1+2,X'02'
         BC    4,LOG013  NORMAL RETURN
*TEST IF EXECUTE OPTION IS SPECIFIED
*THIS MEANS SEVERITY CODE WAS 2
         TM    APT0,LETON
         BC    1,LOG013
LOG012   NI    PDSE7,NOEX
LOG013   LM    R11,R1,SPACES+12
         LR    R15,R14
         BCR   15,R15
LOG014   L     15,ADD1             TRANSFER TO FINAL PROCESSOR TO ABEND
         NI    PDSE7,NOEX         SET NO EXEC BIT IN APT
         BALR  14,15
         DC    V(HEWLFMAP)
HEWLCADA DC    V(HEWLFADA)
         DC    V(HEWLENAM)
         DC    V(HEWLCFNI)
         DC    V(HEWLCEOI)
         DC    V(HEWLFINP)
         DC    V(HEWLFSCD)
DCB      DC    A(HEWLCPDB)
ADD1     DC    V(HEWLCFAB)
PRNTAD   DC    A(HEWLEPNT)         ADDRESS OF PRINT ROUTINE
         DC    V(HEWLFFNL)
TERMEXIT DC    X'85'                   END FLAG
         DC    AL3(TERMEX)             SYSTERM EXIT ADDRESS
APTELIST DC    X'85'
         DC    AL3(HEWLXIT1)
APTEXLST DC    X'85'                   EXIT LIST--END AND DCB EXIT
         DC    AL3(HEWLEXIT)  ADR OF INPUT EXIT
APTXLIST DC   X'05'
         DC    AL3(HEWLXIT2)
         DC    X'87'
         DC    AL3(0)
DUMH     DC    X'09'                   CARRIAGE CONTROL PRINT AND SPACE
         DC    C'IEW'
         DS    0D
X        DS    5H
TEST     DC    A(MSGFOUR)
         DS    0F
*        DC FOR MAJOR AND MINOR NAMES FOR SYSLMOD ENQ,DEQ
ENQNAME  DC    C'SYSIEWLP'
MINOR    DC    44C' '
         TITLE 'VALIDITY CHECK ROUTINE'
*                                                       OX04280,OY03413
* THIS SUBROUTINE SCANS THE MEMBER NAME AND ALIAS       OX04280,OY03413
* NAMES FOR VALID CHARACTERS                            OX04280,OY03413
* THE SUBROUTINE IS CALLED BY SCN DURING THE            OX04280,OY03413
* PROCESSING OF NAME AND ALIAS CONTROL STATEMENTS AND   OX04280,OY03413
* BY FNL WHEN THE MEMBER NAME IS TAKEN FROM THE         OX04280,OY03413
* SYSLMOD DD STATEMENT (VIA THE DEB)                    OX04280,OY03413
* INPUT - REGISTER 9 CONTAINS A POINTER TO THE          OX04280,OY03413
*         CHARACTER STRING                              OX04280,OY03413
* OUTPUT - A ZERO VALUE IN REGISTER 9 INDICATING        OX04280,OY03413
*          A VALID NAME                                 OX04280,OY03413
*        - A NONZERO VALUE IN REGISTER 9 INDICATING     OX04280,OY03413
*          AN INVALID NAME                              OX04280,OY03413
*                                                       OX04280,OY03413
THISCHR  EQU   9                       POINTS TO PRESENT CHAR. AND
*                                      SCNDS BASE                A37667
LASTCHR  EQU   10                      POINTS TO LAST CHAR       A37667
FSTCHAR  EQU   X'02'                   WORKING ON 1ST CHARACTER  A37667
NOTFST   EQU   X'FD'                   NOT FIRST CHARACTER       A37667
         USING VLDCHAR,REG15                            OX04280,OY03413
VLDCHAR  ST    LASTCHR,SAVR            SAVE REG 10               A37667
HEWVLDCK EQU   VLDCHAR
         USING SCNDS,THISCHR                                     A37667
         LA    LASTCHR,LAST            PICK UP ADDR OF LAST CHAR A37667
         MVI   OPT2,FSTCHAR            TURN ON FIRST CHAR SWITCH A37667
* THE FOLLOWING CODE IS CHARACTER DEPENDENT                      A37667
VALIDLP  CLI   THIS,C'Z'               IS CHAR GREATER THAN 'Z'  A37667
         BH    CHAR1                   YES, CHECK IF 1ST CHAR    A37667
         CLI   THIS,C'S'               SI IT 'S' OR  GREATER     A37667
         BNL   CHAROK                  YES, SO VALID CHAR        A37667
         CLI   THIS,C'R'               IS CHAR GREATER THAN 'R'  A37667
         BH    CHARERR                 YES, ERROR                A37667
         CLI   THIS,C'J'               IS IT 'J' OR  GREATER     A37667
         BNL   CHAROK                  YES, SO VALID CHAR        A37667
         CLI   THIS,C'I'               IS CHAR GREATER THAN 'I'  A37667
         BH    CHARERR                 YES, ERROR                A37667
         CLI   THIS,X'C0'              IS IT 12-0 PUNCH OR GTR    M0556
         BNL   CHAROK                  YES, SO VALID CHAR        A37667
         CLI   THIS,C'@'               IS CHAR '@'?              A37667
         BE    CHAROK                  YES, VALID                A37667
         CLI   THIS,C'#'               IS IT '#'                 A37667
         BE    CHAROK                  YES, SO VALID CHAR        A37667
         CLI   THIS,C'$'               IS IT '$'                 A37667
         BE    CHAROK                  YES, SO VALID CHAR        A37667
CHAR1    TM    OPT2,FSTCHAR            IS THIS THE 1ST CHAR      A37667
         BO    CHARERR                 YES, SO ERROR             A37667
         CLI   THIS,C'9'               IS IT GREATER THAN '9'    A37667
         BH    CHARERR                 YES, SO INVALID           A37667
         CLI   THIS,C'0'               IS IT LESS THAN '0'       A37667
         BL    CHARERR                 YES, SO INVALID           A37667
CHAROK   NI    OPT2,NOTFST             TURN OFF FIRST CHAR BIT   A37667
         LA    THISCHR,NEXT            UPDATE PTR                A37667
         CR    THISCHR,LASTCHR         HAVE WE FINISHED          A37667
         BH    VALIDOUT                YES                       A37667
         CLI   THIS,C' '               IS THIS DELIM    OX04280,OY03413
         BE    VALIDOUT                YES, SO FINISHED          A37667
         B     VALIDLP                 CONTINUE                  A37667
VALIDOUT SR    THISCHR,THISCHR         INDICATE   VALID NAME     A37667
CHARERR  L     LASTCHR,SAVR            RESTORE REGS              A37667
         BR    R14                     RETURN                    A37667
OPT2     DC    X'00'               FOR CHECKING VALID CHARACTERS A37667
SAVR     DS    F                      SAVE AREA REG14   OX04280,OY03413
         DROP  REG15                                    OX04280,OY03413
         TITLE  'HEWLFROU  TABLE ALLOCATION ROUTINE'
         ENTRY HEWLFALK
*********************************************************************
*                                                                    *
*        HEWLFALK--TABLE ALLOCATION ROUTINE                          *
*                                                                    *
**********************************************************************
*                                                                    *
*        STATUS:  AOS/1,AOS/2--RELEASE 1                             *
*                                                                    *
*        FUNCTION :                                                  *
*              TO ALLOCATE TABLES USED BY THE LINKAGE EDITOR,        *
*              AND TO EXPAND THEM TO THEIR MAXIMUM SIZES             *
*              WHEN A TABLE OVERFLOW SITUATION OCCURS.               *
*                                                                    *
*                                                                    *
*        ENTRY POINT : HEWLFALK                                      *
*              1) RECEIVING CONTROL FROM HEWLFINT FOR                *
*                 INITIAL ALLOCATION                                 *
*              2) RECEIVING CONTROL FROM HEWLFINP,HEWLFESD,          *
*                 HEWLFRAT,HEWLFADA,HEWLFREL FOR REALLOCATION.       *
*                                                                    *
*        EXTERNAL REFERENCES : NONE                                  *
*                                                                    *
*        INPUT :                                                     *
*              REGISTER 2 CONTAINS THE ADDR OF HEWLFAPT              *
*              REGISTER 14 CONTAINS THE RETURN ADDRESS.              *
*                                                                    *
*        OUTPUT : NONE                                               *
*                                                                    *
*        EXIT NORMAL : TO CALLING ROUTINE                            *
*                                                                    *
*        EXIT ERROR : NONE                                           *
*                                                                    *
*        TABLES/WORK AREAS :                                         *
*              HEWLFAPT    - LINKAGE EDITOR COMMUNICATION AREA       *
*              ALOCTABL - ALLOCATION TABLE                           *
*              TMPADRSV - TEMPORARY TABLE ADDR SAVE AREA             *
*                                                                    *
*        ATTRIBUTES : SERIALLY REUSABLE,PROBLEM PROGRAM MODE ,ENABLED*
*                                                                    *
*        NOTES : ALL REGISTERS SAVED BY THE CALLING ROUTINE          *
*                                                                    *
*********************************************************************
         EJECT
*********************************************************************
*                                                                    *
*        EQUATES FOR REGISTERS                                       *
*                                                                    *
*********************************************************************
REG0     EQU   0                       REGISTER 0
TABLPT2  EQU   1                       TEMPORARY ADDR SAVE AREA PT
APTBASE  EQU   2                       BASE REG FOR APT
INDXRG   EQU   3                       INDEX REGISTER
ALOCPT   EQU   4                       ALLOCATING ADDR
TABLPT1  EQU   5                       ALLOCATION TABLE PT
WORK1    EQU   7                       WORK REGISTER
WORK2    EQU   8                       WORK REGISTER
WORK3    EQU   9                       WORK REGISTER
BYTSPRWT EQU   11                      BYTES PER WEIGHT
BASE     EQU   12                      BASE REGISTER
RETURN   EQU   14                      RETURN REGISTER
         SPACE 3
*********************************************************************
*                                                                    *
*        MISCELLANEOUS OFFSETS AND MASKS                             *
*                                                                    *
*********************************************************************
         SPACE 2
O        EQU   0                       ZERO
I        EQU   1                       ONE
IV       EQU   4                       DECIMAL VALUE 4
VIII     EQU   8                       DECIMAL VALUE 8
TENN     EQU   10                      DECIMAL VALUE 10
IO       EQU   X'10'                   HEX 10
EO       EQU   X'E0'                   HEX E0
FO       EQU   X'F0'                   HEX F0
FF       EQU   X'FF'                   HEX FF
ENDFLG   EQU   X'FF'                   END INDICATOR OF ALLOC TABLE
HEX100   EQU   256                     HEX 100
OVERBIT  EQU   X'20'                   OVERLAY
HIARCHY  EQU   X'04'                   HIARCHY SPECIFIED
         EJECT
*********************************************************************
*                                                                    *
*        ALLOCATION OF ADDRESSES AND SIZES OF TABLES                 *
*                                                                    *
*********************************************************************
         SPACE 3
HEWLFALK BALR  BASE,0                   ESTABLISH    ROUTINE
         USING *,BASE                  ADDRESSABILITY
         USING APTDSECT,APTBASE        ADDRESSABILITY FOR APT
         XR    BYTSPRWT,BYTSPRWT       INITIALIZE BYTES PER WEIGHT
         MVC   CSNOSV(4),CSNO          GET CURRENT SEGMENT NUMBER
         MVC   TTRLIST(4),HEWLCRBB+IV  INITIALIZE TTR LIST ADDR
         MVC   TOTALWT,SIMPLWT         INITIALIZE TOTAL WEIGHT
         TM    SAVATS,OVERBIT          IS OVLY SPECIFIED
         BO    TBAL001                 YES,BRANCH OUT
         TM    NEWSW,HIARCHY           IS HIARCHY SPECIFIED      S01904
         BZ    TBAL010                 NO,BRANCH OUT             S01904
         MVC   TOTALWT,HIARWT          INITIALIZE TOTAL WEIGHT   S01904
         MVI   TBAL101A+I,O            HIARCHY TABLE IS ALLOC    S01904
         B     TBAL010                 BRANCH OUT                S01904
TBAL001  MVI   TBAL101+I,O             OVLY TBL WILL BE ALLOC    S01904
         MVC   TOTALWT,OVLYWT          INITIALIZE WEIGHT         S01904
TBAL010  TM    APT4,REALOCTE           IS THIS REALLOCATION      S01904
         BZ    TBAL020                 NO,BRANCH OUT             S01904
         L     BYTSPRWT,FFCADR         GET HIGHEST ADDR GETMAINED
         S     BYTSPRWT,HIGHSV         SIZE OF CORE FOR TBL ALLOC
         N     BYTSPRWT,DBLWRD         DOUBLE WORD BDY ALIGNMENT
         XR    BYTSPRWT-I,BYTSPRWT-I  INITIALIZE FOR DIVISION
         D     BYTSPRWT-I,TOTALWT      CALCULATE BYTES PER WEIGHT
TBAL020  LA    TABLPT1,ALOCTABL        INITIALIZE ALLOC TBL      S01904
         LA    TABLPT2,TMPADRSV        INIT TBL ADDR SAVEAREA    S01904
         MVC   FSTPHIGH,TXTBFEND       INITIALIZE ALL            S01904
         MVC   INTPHIGH(VIII),FSTPHIGH  ALLOCATING ADDR          S01904
TBAL100  XR    INDXRG,INDXRG           ZERO OUT INDEX REG        S01904
         TM    FLG2(TABLPT1),HIARSW    TABLE FOR HIARCHY         S01904
TBAL101A BO    TBAL250       COND BRANCH SET DYNAMICALLY         S01904
         TM    FLG1(TABLPT1),OVLY      IS TBL USED FOR OVLY      S01904
TBAL101  BO    TBAL250       COND BRANCH SET DYNAMICALLY         S01904
         L     ALOCPT,FSTPHIGH         ALLOCATING ADDR=1ST PASS HIGH
         TM    FLG1(TABLPT1),FRSTPS IS TABLE USED FOR 1ST PASS
         BO    TBAL110                 YES,BRANCH OUT            S01904
         L     ALOCPT,SCDPHIGH         ALLOC ADDR=INTR PASS HIGH S01904
TBAL110  TM    FLG1(TABLPT1),INTRPS  IS TBL USED FOR INTR PASS   S01904
         BZ    TBAL120                 NO,BRANCH OUT             S01904
         C     ALOCPT,INTPHIGH         ALLOC ADDR>INTR PASS HIGH S01904
         BNL   TBAL120       YES,BRANCH OUT                      S01904
         L     ALOCPT,INTPHIGH         NO,ALLOC ADDR=INTR PASS HIGH
TBAL120  TM    FLG1(TABLPT1),SCDPS     IS TABLE USED IN 2ND PASS S01904
         BZ    TBAL200                 NO,BRANCH OUT             S01904
         C     ALOCPT,SCDPHIGH         ALLOC ADDR>2ND PASS HIGH  S01904
         BNL   TBAL200                 YES,BRANCH OUT            S01904
         L     ALOCPT,SCDPHIGH         NO,ALLOC ADDR=2ND PASS HIGH
TBAL200  TM    FLG1(TABLPT1),ZERONTRY  PREFIX NEEDED             S01904
         LR    REG0,ALOCPT             SAVE ALLOC ADDR TEMPORARY S01904
         BZ    TBAL201                 NO,BRANCH OUT             S01904
         IC    INDXRG,BYTS(TABLPT1)    YES,GET BYTES PER ENTRY   S01904
         SR    ALOCPT,INDXRG           DECREMENT ALLOC ADDR      S01904
TBAL201  TM    APT4,REALOCTE           REALLOCATION?             S01904
         BM    TBAL400                 YES,BRANCH OUT            S01904
TBAL203  IC    INDXRG,ADDR(TABLPT1)    GET TABLE ADDR INDEX      S01904
         ST    ALOCPT,CSNO(INDXRG)     SAVE TABLE ADDR IN APT    S01904
TBAL204  LR    ALOCPT,REG0             RESTORE ALLOCATING ADDR   S01904
         LR    WORK1,BYTSPRWT          GET BYTES PER WEIGHT      S01904
         MH    WORK1,WEIT(TABLPT1)     CALCULATE SIZE TO BE EXPANDED
         AH    WORK1,MIN(TABLPT1)      ADD TO MIN SIZE OF TABLE  S01904
         TM    FLG1(TABLPT1),CUTOFF    IS THERE A LIMIT TO SIZE  S01904
         BZ    TBAL210                 NO,BRANCH OUT             S01904
         TM    FLG1(TABLPT1),SCDPS     IS TABLE USED FOR 2ND PASS
         BO    TBAL205                 YES,BRANCH OUT            S01904
         C     WORK1,SZSYSUT1          NO,COMPARE WITH SYSUT1 TRK SIZE
         BL    TBAL210                 LOW,NO FIX NEEDED         S01904
         L     WORK1,SZSYSUT1          PICK UP TRACK SIZE        S01904
         N     WORK1,DBLWRD            FORCE TO DBL WORD BDY     S01904
TBAL205  LA    WORK3,IV                GET DECIMAL VALUE FOUR    S01904
         M     WORK3-I,SZSYSUT1        MULTIPLY TRACK SIZE BY 4  S01904
         CR    WORK1,WORK3             COMPARE WITH ALLOC SIZE   S01904
         BL    TBAL210                 LOW,BRANCH OUT            S01904
         LR    WORK1,WORK3             FIX SIZE                  S01904
         N     WORK1,DBLWRD            FORCE TO DBL WORD BDY     S01904
TBAL210  LA    ALOCPT,O(WORK1,ALOCPT)  UPDATE ALLOC ADDR         S01904
         LA    ALOCPT,8(ALOCPT)        FORCE TO NEXT HIGHER      S01904
         N     ALOCPT,DBLWRD           DOUBLE WORD BDY           S01904
         TM    FLG1(TABLPT1),FRSTPS    TABLE USED IN 1ST PASS    S01904
         BZ    TBAL220                 NO,BRANCH OUT             S01904
         ST    ALOCPT,FSTPHIGH         UPDATE 1ST PASS HIGH      S01904
TBAL220  TM    FLG1(TABLPT1),INTRPS    IS TABLE FOR INTR PASS    S01904
         BZ    TBAL230                 NO,BRANCH OUT             S01904
         ST    ALOCPT,INTPHIGH         YES,UPDATE INTR PASS HIGH S01904
TBAL230  TM    FLG1(TABLPT1),SCDPS     TABLE USED IN 2ND PASS    S01904
         BZ    TBAL240                 NO,BRANCH OUT             S01904
         ST    ALOCPT,SCDPHIGH         YES,UPDATE 2ND PASS HIGH  S01904
TBAL240  IC    INDXRG,BYTS(TABLPT1)    PICK UP NO OF BYTES PER ENTRY
         XR    WORK1-I,WORK1-I         CLEAR REG FOR DIVISION    S01904
         DR    WORK1-I,INDXRG          CALCULATE MAX NO OF ENTRIES
         C     WORK1,MAXENTRY          LESS THAN 32K?   OX05441,OY05016
         BNH   TBAL245                 YES, CONTINUE    OX05441,OY05016
         L     WORK1,MAXENTRY          ELSE SET TO MAX ALLOWED  OY05016
TBAL245  EQU   *                                        OX05441,OY05016
         IC    INDXRG,ENTRY(TABLPT1)   PICK UP ENTRY ADDR INDEX  S01904
         STH   WORK1,CSNO(INDXRG)      STORE MAX NO OF ENTRIES   S01904
TBAL250  LA    TABLPT1,TENN(TABLPT1)   UPDATE ALLOCATION PTR     S01904
         TM    O(TABLPT1),ENDFLG       END OF TABLE REACHED      S01904
         BNO   TBAL100                 NO,CONTINUE ALLOCATION    S01904
TBAL260  TM    APT4,REALOCTE           REALLOCATION?             S01904
         BM    TBAL300                 YES,BRANCH OUT            S01904
         CLC   SCDPHIGH+1(3),INTPHIGH+1  2ND PASS HIGH>INTR PASS HIGH
         BH    TBAL260A                YES,BRANCH OUT            S01904
         MVC   HIGHSV+1(3),INTPHIGH+1  SAVE HIGHER ADDR          S01904
         B     TBAL901                 EXIT                      S01904
TBAL260A MVC   HIGHSV+1(3),SCDPHIGH+1  USE 2ND PASS HIGH         S01904
         B     TBAL901                 EXIT                      S01904
         EJECT
*********************************************************************
*                                                                    *
*        MOVING AND CLEARING TABLES AFTER REALLOCATION               *
*                                                                    *
********************************************************************
         SPACE 3
TBAL300  SH    TABLPT2,FOUR            UPDATE TABLE PTR          S01904
TBAL301  SH    TABLPT1,TEN             UPDATE TABLE PTR          S01904
         TM    FLG1(TABLPT1),ENDMOVE   NO MORE MOVE REQUIRED     S01904
         BO    TBAL900                 NO MORE,BRANCH OUT        S01904
         TM    FLG1(TABLPT1),MOVETBL   TABLE HAS TO BE MOVED     S01904
         BZ    TBAL301                 NO,BRANCH OUT             S01904
         NI    FLG1(TABLPT1),FF-MOVETBL  RESET SWITCH            S01904
         IC    INDXRG,ADDR(TABLPT1)    GET TABLE ADDR INDEX      S01904
         L     WORK2,CSNO(INDXRG)      PICK UP OLD TABLE ADDR    S01904
         L     WORK3,O(TABLPT2)        PICK UP NEW TABLE ADDR    S01904
         ST    WORK3,CSNO(INDXRG)      STORE NEW TABLE ADDR IN APT
         IC    INDXRG,CURNTRY(TABLPT1) GET CURRENT NO OF ENTRIES INDEX
         LH    WORK1,CSNO(INDXRG)      PICK UP CORRENT NO OF ENTRIES
         TM    FLG1(TABLPT1),ZERONTRY  IS THERE A PREFIX         S01904
         BZ    TBAL310                 NO,BRANCH OUT             S01904
         LA    WORK1,I(WORK1)          YES,INCREMENT NO OF ENTRIES
TBAL310  IC    INDXRG,BYTS(TABLPT1)    GET NO OF BYTES PER ENTRY S01904
         MR    WORK1-I,INDXRG          BYTES TO BE MOVED         S01904
         AR    WORK2,WORK1                                       S01904
         AR    WORK3,WORK1                                       S01904
         XR    WORK1-I,WORK1-I         CLEAR REG BEFORE DIVISION S01904
         D     WORK1-I,HEXI00          DIVIDE BY 256             S01904
         LTR   WORK1,WORK1             QUOTIENT EQUAL TO ZERO    S01904
         BZ    TBAL320                 YES,BRANCH OUT            S01904
TBAL330  S     WORK2,HEXI00                                      S01904
         S     WORK3,HEXI00                                      S01904
         MVC   MOVESV(HEX100),O(WORK2)                           S01904
         XC    O(HEX100,WORK2),O(WORK2)  CLEAR 256 BYTES AT A TIME
         MVC   O(HEX100,WORK3),MOVESV    MOVE DATA TO NEW AREA   S01904
         BCT   WORK1,TBAL330           DECREMENT QUOTIENT BY ONE S01904
TBAL320  LTR   WORK1-I,WORK1-I         IS THE REMAINDER ZERO     S01904
         BZ    TBAL300                 GO TO PROCESS NEXT ENTRY  S01904
         SR    WORK2,WORK1-I                                     S01904
         SR    WORK3,WORK1-I                                     S01904
         BCTR  WORK1-I,REG0            NO,DECREMENT BY 1 FOR EX  S01904
         EX    WORK1-I,MOVEINST        MOVE THAT MANY BYTES      S01904
         EX    WORK1-I,MOVEINSA                                  S01904
         EX    WORK1-I,CLEAR           CLEAR THAT MANY BYTES     S01904
         B     TBAL300                 GO PROCESS NEXT TABLE     S01904
MOVEINST MVC   MOVESV(I),O(WORK2)                                S01904
MOVEINSA MVC   O(I,WORK3),MOVESV                                 S01904
CLEAR    XC    O(O,WORK2),O(WORK2)     CLEAR INSTRUCTION FOR EX  S01904
         EJECT
********************************************************************
*              RETURN TO CALLING ROUTINE                            *
********************************************************************
         SPACE 3
TBAL900  OI    APT4,REALOCTD           REALLOCATION DONE         S01904
**********************************************************************
*         THE FOLLOWING CODE UPDATES THE APT TO REFLECT              *
*         THE CHANGES IN  REALLOCATING THE IDR TABLES .              *
*         THE ADDRESS OF THE NEXT AVAILABLE ENTRY IS CALCULATED      *
*         AND STORED IN THE APT - IDRXXEND.                          *
**********************************************************************
         L     WORK1,IDRTRTAB          GET ADDR OF IDRTR TABLE   S01904
         AH    WORK1,IDRTRCUR          COMPUTE NEXT AVAIL ENTRY  S01904
         ST    WORK1,IDRTREND          STORE ADDRESS IN APT      S01904
         L     WORK1,IDRTITAB          GET ADR OF IDR TI TABLE  OX04245
         AH    WORK1,IDRTICUR          COMPUTE NEXT AVAIL ENTRY OX04245
         ST    WORK1,IDRTIEND          STORE ADDRESS IN APT     OX04245
         L     WORK1,IDRUDTAB          GET ADDR OF IDRUD TABLE   S01904
         AH    WORK1,IDRUDCUR          COMPUTE NEXT AVAIL ENTRY  S01904
         ST    WORK1,IDRUDEND          STORE ADDRESS IN APT      S01904
         L     WORK1,IDRZPTAB          GET ADDR OF IDRZP TABLE   S01904
         AH    WORK1,IDRZPCUR          COMPUTE NEXT AVAIL ENTRY  S01904
         ST    WORK1,IDRZPEND          STORE ADDRESS IN APT      S01904
**********************************************************************
         MVC   CSNO(4),CSNOSV                                    S01904
         B     TBAL901A                RETURN TO CALLING RTN     S01904
TBAL901  OI    APT4,INALOCTD           INITIAL ALLOCATION DONE   S01904
         XC    CSNO(4),CSNO            ZERO OUT NO OF SEGMENTS   S01904
         MVC   ENT1X1(4),ENT1X                                   S01904
TBAL901A MVI   TBAL101+I,IO            RESTORE BRANCH INSTR      S01904
         MVI   TBAL101A+I,IO           RESTORE BRANCH INSTR      S01904
         LH    WORK1,ENRNX             GET MAX. ENTRIES IN RNT   XM1692
         STH   WORK1,ENRNC             STORE IN CURRENT          XM1692
*                                      CURRENT NO. ENTRIES IN    XM1692
*                                      RNT MUST ALWAYS EQUAL     XM1692
*                                      MAX NO. ENTRIES SINCE     XM1692
*                                      LR PROCESSING CAN PUT     XM1692
*                                      DEPEND FLAGS IN FOR       XM1692
*                                      CESDIDS NOT YET RECEIVED  XM1692
         BR    RETURN                  RETURN TO CALLING RTN     S01904
         EJECT
********************************************************************
*                                                                   *
*              CLEARING TABLES THAT NEED NOT BE MOVED               *
*                                                                   *
********************************************************************
         SPACE 3
TBAL400  TM    FLG1(TABLPT1),ENDMOVE   TABLE NOT TO BE MOVED?    S01904
         BO    TBAL203                 RETURN                    S01904
         TM    FLG2(TABLPT1),NOMOVE    IS IT A BUFFER            S01904
         BO    TBAL203                 YES,GO CLEAR THE BUFFER   S01904
         IC    INDXRG,CURNTRY(TABLPT1) GET CUR NO OF ENTRIES INDEX
         LH    WORK1,CSNO(INDXRG)      PICK UP CUR NO OF ENTRIES S01904
         LTR   WORK1,WORK1             IS IT ZERO                S01904
         BZ    TBAL203                 YES,NORMAL PROCESSING     S01904
TBAL410  ST    ALOCPT,O(TABLPT2)       SAVE NEW TABLE ADDR TEMP  S01904
         LA    TABLPT2,IV(TABLPT2)     UPDATE PTR                S01904
         OI    FLG1(TABLPT1),MOVETBL   SET SWITCH TO MOVE TABLE  S01904
         B     TBAL204                 GO ALLOCATE SIZE OF TABLE S01904
         EJECT
********************************************************************
*                                                                   *
*                  TABLES AND WORK AREAS                            *
*                                                                   *
********************************************************************
         SPACE 3
TEN      DC    H'10'         DECIMAL VALUE 10                    S01904
FOUR     DC    H'4'          DECIMAL VALUE FOUR                  S01904
FSTPHIGH DC    F'0'          FIRST PASS ALLOC ADDR               S01904
INTPHIGH DC    F'0'          INTERMEDIATE PASS ALLOC ADDR        S01904
SCDPHIGH DC    F'0'          SECOND PASS ALLOC ADDR              S01904
HIGHSV   DC    F'0'          HIGHEST ADDRESS ASSIGNED            S01904
CSNOSV   DC    F'0'          CURRENT NUMBER OF ENTRIES           S01904
MAXENTRY DC    X'00007FFF'   MAX NO OF ENTRIES IN ANY TABLE      S01904
DBLWRD   DC    X'FFFFFFF8'   DOUBLE WORD MASK                    S01904
SIMPLWT  DC    AL4(ROUNDSIM) TOTAL WEIGHT FOR SIMPLE STRUCTURE
HIARWT   DC    AL4(ROUNHIAR) TOTAL WEIGHT FOR HIARCHY
OVLYWT   DC    AL4(ROUNOVLY) TOTAL WEIGHT FOR OVLY
HEXI00   DC    X'00000100'   VALUE 256                           S01904
TOTALWT  DS    F             TOTAL WEIGHT                        S01904
         EJECT
*              ALLOCATION TABLE                                     *
*********************************************************************
*                                                                    *
*        OFFSETS FOR ALLOCATION TABLE ENTRIES                        *
*                                                                    *
*********************************************************************
FLG1     EQU   0                       SWITCHES
ADDR     EQU   1                       INDEX FOR ADDR OF TABLE
ENTRY    EQU   2                       INDEX FOR MAX # OF ENTRIES
BYTS     EQU   3                       BYTES PER WEIGHT
WEIT     EQU   4                       WEIGHT OF THE TABLE
MIN      EQU   6                       MINIMUM SIZE OF THE TABLE
CURNTRY  EQU   8                       INDEX FOR CURRENT # OF ENTRIES
FLG2     EQU   9                       SECOND FLAG
*********************************************************************
*                                                                    *
*        MASKS IN ALLOCATION TABLE                                   *
*MASKS FOR FLG1
OVLY     EQU   X'80'                   TABLE USED FOR OVERLAY ONLY
FRSTPS   EQU   X'40'                   TABLE USED IN 1ST PASS
*INTRPS  EQU   X'20'                   TABLE USED IN INTERMEDIATE PASS
*ABOVE SYMBOL DEFINED IN APT
*SCDPS   EQU   X'10'                   TABLE USED IN SECOND PASS
*ABOVE SYMBOL DEFINED IN APT
ENDMOVE  EQU   X'08'                   NO MORE MOVING NEEDED
MOVETBL  EQU   X'04'                   TABLE IS TO BE MOVED
CUTOFF   EQU   X'02'                   THERE IS A LIMIT TO THE SIZE
ZERONTRY EQU   X'01'                   THERE IS A PREFIX
*MASKS FOR FLAG2
NOMOVE   EQU   X'80'                   TABLE NOT TO BE MOVED
HESDD    EQU   X'40'                   HESD ENTRY IN ALLOCATION TBL
HIARSW   EQU   X'20'                   HIERARCHY TABLE
*******************************************************************
*******************************************************************
ALOCTABL EQU   *
*******************************************************************
*              RLD INPUT BUFFER 1ST PASS                         S01904
*******************************************************************
ALRLD1   DC    X'48'                                             S01904
         DC    AL1(RLDINPAD-CSNO)                                S01904
         DC    AL1(CSNO-CSNO)                                    S01904
         DC    X'01'                                             S01904
         DC    AL2(WT1)                                          S01904
         DC    AL2(MIN1)                                         S01904
         DC    AL1(CSNO-CSNO)                                    S01904
         DC    X'00'                                             S01904
*******************************************************************
*              ALIAS TABLE ENTRY                                 S01904
*******************************************************************
ALALIAS  DC    X'38'                                             S01904
         DC    AL1(ALAS-CSNO)                                    S01904
         DC    AL1(BUFSIZ-CSNO)                                  S01904
         DC    X'01'                                             S01904
         DC    AL2(WT2)                                          S01904
         DC    AL2(MIN2)                                         S01904
         DC    AL1(CSNO-CSNO)                                    S01904
         DC    X'00'                                             S01904
*******************************************************************
*              CESD TABLE ENTRY                                  S01904
*******************************************************************
ALCESD   DC    X'49'                                             S01904
         DC    AL1(CHESD-CSNO)                                   S01904
         DC    AL1(ENCDX-CSNO)                                   S01904
         DC    X'10'                                             S01904
         DC    AL2(WT3)                                         S01904
         DC    AL2(MIN3)                                         S01904
         DC    AL1(ENCDC-CSNO)                                   S01904
         DC    X'00'                                             S01904
*******************************************************************
*              HESD TABLE ENTRY                                  S01904
*******************************************************************
ALHESDP  DC    X'38'                                             S01904
         DC    AL1(HESD-CSNO)                                    S01904
         DC    AL1(CSNO-CSNO)                                    S01904
         DC    X'01'                                             S01904
         DC    AL2(WT4)                                         S01904
         DC    AL2(MIN4)                                         S01904
         DC    AL1(CSNO-CSNO)                                    S01904
         DC    X'00'                                             S01904
ALHESD   DC    X'38'                                             S01904
         DC    AL1(CSNO-CSNO)                                    S01904
         DC    AL1(ENCDX-CSNO)                                   S01904
         DC    X'08'                                             S01904
         DC    AL2(WT5)                                        S01904
         DC    AL2(MIN5)                                         S01904
         DC    AL1(ENCDC-CSNO)                                   S01904
         DC    X'00'                                             S01904
*******************************************************************
*              TEXT NOTE LIST 2 ENTRY                            S01904
*******************************************************************
ALTNL2   DC    X'32'                                             S01904
         DC    AL1(TNLS2-CSNO)                                   S01904
         DC    AL1(ENT2X-CSNO)                                   S01904
         DC    X'07'                                             S01904
         DC    AL2(WT6)                                         S01904
         DC    AL2(MIN6)                                         S01904
         DC    AL1(ENT2C-CSNO)                                   S01904
         DC    X'00'                                             S01904
*******************************************************************
*              RLD NOTE LIST 2 ENTRY                             S01904
*******************************************************************
ALRNL2   DC    X'32'                                             S01904
         DC    AL1(RNLS2-CSNO)                                   S01904
         DC    AL1(ENR2X-CSNO)                                   S01904
         DC    X'09'                                             S01904
         DC    AL2(WT7)                                         S01904
         DC    AL2(MIN7)                                         S01904
         DC    AL1(ENR2C-CSNO)                                   S01904
         DC    X'00'                                             S01904
*******************************************************************
*              TEXT IO TABLE ENTRY                               S01904
*******************************************************************
ALTXTIO  DC    X'70'                                             S01904
         DC    AL1(TXTIO-CSNO)                                   S01904
         DC    AL1(ENTOX-CSNO)                                   S01904
         DC    X'01'                                             S01904
         DC    AL2(WT8)                                         S01904
         DC    AL2(MIN8)                                         S01904
         DC    AL1(ENTOC-CSNO)                                   S01904
         DC    X'00'                                             S01904
*******************************************************************
*              RENUMBERING TABLE/RELOC CONSTANT TABLE            S01904
*******************************************************************
ALRNTRLC DC    X'71'                                             S01904
         DC    AL1(RECNT-CSNO)                                   S01904
         DC    AL1(ENRNX-CSNO)                                  OX02397
         DC    X'04'                                             S01904
         DC    AL2(WT9)                                          S01904
         DC    AL2(MIN9)                                         S01904
         DC    AL1(ENRNC-CSNO)                                  OX02397
         DC    X'00'                                             S01904
*******************************************************************
*              DELINK TABLE ENTRY                                S01904
*******************************************************************
ALDELINK DC    X'71'                                             S01904
         DC    AL1(DLKT-CSNO)                                    S01904
         DC    AL1(ENDTX-CSNO)                                   S01904
         DC    X'05'                                             S01904
         DC    AL2(WT10)                                         S01904
         DC    AL2(MIN10)                                        S01904
         DC    AL1(ENDTC-CSNO)                                   S01904
         DC    X'00'                                             S01904
*******************************************************************
*              RLD OUTPUT BUFFER 2ND PASS                        S01904
*******************************************************************
ALRLD2   DC    X'10'                                             S01904
         DC    AL1(RLDOUTBF-CSNO)                                S01904
         DC    AL1(CSNO-CSNO)                                    S01904
         DC    X'01'                                             S01904
         DC    AL2(WT11)                                        S01904
         DC    AL2(MIN11)                                        S01904
         DC    AL1(ENRLD2X-CSNO)                                 S01904
         DC    X'80'                                             S01904
*******************************************************************
*              TEXT NOTE LIST 1                                  S01904
*******************************************************************
ALTNL1   DC    X'62'                                             S01904
         DC    AL1(TNT1-CSNO)                                    S01904
         DC    AL1(ENT1X-CSNO)                                   S01904
         DC    X'07'                                             S01904
         DC    AL2(WT12)                                        S01904
         DC    AL2(MIN12)                                        S01904
         DC    AL1(ENT1C-CSNO)                                   S01904
         DC    X'00'                                             S01904
*******************************************************************
*              RLD NOTE LIST 1                                   S01904
*******************************************************************
ALRNL1   DC    X'62'                                             S01904
         DC    AL1(RNT1-CSNO)                                    S01904
         DC    AL1(ENR1X-CSNO)                                   S01904
         DC    X'09'                                             S01904
         DC    AL2(WT13)                                        S01904
         DC    AL2(MIN13)                                        S01904
         DC    AL1(ENR1C-CSNO)                                   S01904
         DC    X'00'                                             S01904
*******************************************************************
*              ORDER TABLE ENTRY                                 S01904
*******************************************************************
ALORDER  DC    X'60'                                             S01904
         DC    AL1(ORDRADR-CSNO)                                 S01904
         DC    AL1(ORDRMAX-CSNO)                                 S01904
         DC    X'01'                                             S01904
         DC    AL2(WT14)                                        S01904
         DC    AL2(MIN14)                                        S01904
         DC    AL1(ORDRCUR-CSNO)                                 S01904
         DC    X'00'                                             S01904
*******************************************************************
*              HIERARCHY TABLE ENTRY                             S01904
*******************************************************************
ALHIAR   DC    X'61'                                             S01904
         DC    AL1(HIARADD-CSNO)                                 S01904
         DC    AL1(CSNO-CSNO)                                    S01904
         DC    X'01'                                             S01904
         DC    AL2(WT15)                                        S01904
         DC    AL2(MIN15)                                        S01904
         DC    AL1(ENCDC-CSNO)                                   S01904
         DC    X'20'                                             S01904
*******************************************************************
*              SEGMENT TABLE ENTRY                               S01904
*******************************************************************
ALSEG    DC    X'F1'                                             S01904
         DC    AL1(SGT1-CSNO)                                    S01904
         DC    AL1(ENS1X-CSNO)                                   S01904
         DC    X'01'                                             S01904
         DC    AL2(WT16)                                        S01904
         DC    AL2(MIN16)                                        S01904
         DC    AL1(ENS1X-CSNO)                                   S01904
         DC    X'00'                                             S01904
*******************************************************************
*              CALLS LIST ENTRY                                  S01904
*******************************************************************
ALCALL   DC    X'E0'                                             S01904
         DC    AL1(CLLT-CSNO)                                    S01904
         DC    AL1(ENCLX-CSNO)                                   S01904
         DC    X'01'                                             S01904
         DC    AL2(WT17)                                        S01904
         DC    AL2(MIN17)                                        S01904
         DC    AL1(ENCLC-CSNO)                                   S01904
         DC    X'00'                                             S01904
*******************************************************************
*              ENTRY LIST ENTRY                                  S01904
*******************************************************************
ALENT    DC    X'90'                                             S01904
         DC    AL1(SELST-CSNO)                                   S01904
         DC    AL1(ENELTX-CSNO)                                  S01904
         DC    X'06'                                             S01904
         DC    AL2(WT18)                                        S01904
         DC    AL2(MIN18)                                        S01904
         DC    AL1(ENELTC-CSNO)                                  S01904
         DC    X'00'                                             S01904
*******************************************************************
*               IDR TRANSLATOR DATA TABLE ENTRY
*******************************************************************
ALIDRTR   DC    X'60'
          DC    AL1(IDRTRTAB-CSNO)
          DC    AL1(IDRTRLEN-CSNO)
          DC    X'01'                                           OX04245
          DC    AL2(WT19)
          DC    AL2(MIN19)
          DC    AL1(IDRTRCUR-CSNO)
          DC    X'00'
*******************************************************************
*         IDR TRANSLATOR ID TABLE ENTRY                         OX04245
*******************************************************************
ALIDRTI  DC    X'60'                                            OX04245
         DC    AL1(IDRTITAB-CSNO)                               OX04245
         DC    AL1(IDRTILEN-CSNO)                               OX04245
         DC    X'01'                                            OX04245
         DC    AL2(WT22)                                        OX04245
         DC    AL2(MIN22)                                       OX04245
         DC    AL1(IDRTICUR-CSNO)                               OX04245
         DC    X'00'                                            OX04245
*******************************************************************
*               IDR USER DATA TABLE ENTRY
*******************************************************************
ALIDRUD   DC    X'60'
          DC    AL1(IDRUDTAB-CSNO)
          DC    AL1(IDRUDLEN-CSNO)
          DC    X'01'
          DC    AL2(WT20)
          DC    AL2(MIN20)
          DC    AL1(IDRUDCUR-CSNO)
          DC    X'00'
*******************************************************************
*               IDR ZAP DATA TABLE ENTRY
*******************************************************************
ALIDRZP   DC    X'60'
          DC    AL1(IDRZPTAB-CSNO)
          DC    AL1(IDRZPLEN-CSNO)
          DC    X'01'
          DC    AL2(WT21)
          DC    AL2(MIN21)
          DC    AL1(IDRZPCUR-CSNO)
          DC    X'00'
ALEND    DC    X'FF'                                             S01904
         SPACE 3
TMPADRSV DS    14F             TABLE ADDRESS SAVE AREA           S01904
MOVESV   DC    XL256'0'        DATA MOVEMENT AREA                S01904
********************************************
*        PATCH AREA                        *
********************************************
PATCH    DC    20F'0',C'PATCH AREA ' FOR PROG MAINT
SCNDS    DSECT                         FOR VALID CHAR SCAN       A37667
THIS     DS    CL1                     POINTS TO PRESENT CHAR    A37667
NEXT     DS    CL1                     POINTS TO NEXT CHAR       A37667
         DS    CL5                                               A37667
LAST     DS    CL1                     ENDING ADDR               A37667
         TITLE 'DCB MAP'
         DCBD  DSORG=(PS,PO)
         HEWAPT
HEWLEDE1 EQU   SPACES+32
         END
