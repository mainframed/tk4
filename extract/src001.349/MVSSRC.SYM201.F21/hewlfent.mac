          TITLE   'HEWLFENT  ENTRY POINT PROCESSOR'
***********************************************************************
*              HEWLFENT - ENTRY POINT PROCESSOR - ALIAS TABLE BUILDER *
***********************************************************************
*
*              ENTRY POINT - HEWLFENT - CONTROL SECTION NAME          *
*
*              INPUT--
*                  A)  1) COMPOSITE EXTERNAL DICTIONARY
*                      2) RELOCATION CONSTANT TABLE
*                      4) ENTRY POINT SYMBOL OR ASSEMBLED ADD AND ESDID
*                      3) INDICATION IF ENTRY POINT HAS BEEN RECIEVED
*                      4)ALIAS TABLE
*
*                 B)   1) GP REGISTER  2 -ADDRESS OF ALL PURPOSE TABLE
*                      2) GP REGISTER 13 -ADDRESS OF A REG SAVE AREA
*                      3) GP REGISTER 14 -CALLER RETURN ADDRESS
*
***********************************************************************
***********************************************************************
*                   DETERMINE ENTRY POINT  AND ASSOCIATED ESDID       *
*                                                                     *
*              PROCEDURE:                                             *
*                                                                     *
*               (A) BUILD ALIAS TABLE USING ALIAS CHAIN IN CESD       *
*               (B) HAS AN ENTRY POINT BEEN DEFINED ?                 *
*                  (1)YES - IS IT SYMBOLIC ?                          *
*                     (A)YES-FIND SYMBOL IN CESD  (NOT FOUND IS ERROR)*
*                            IS SYMBOL TYPE = SD OR LR (NO IS ERROR)  *
*                            IS SYMBOL IN SEGMENT 1 (NO IS AN ERROR)  *
*                     (B)NO - ENTRY POINT IS AN ASSEMBLED ADDRESS     *
*                            USING GIVEN ESDID FIND LINKED ADDRESS    *
*                            USING ESDID CHECK ADDRESS TO BE IN SEG 1 *
*                             (NOT IN SEGMENT 1 IS AN ERROR)          *
*                  (2)NO  -  FIND LOWEST LINKED ADDRESS FOR TYPE SD OR*
*                            PC (NOT DELETE) IN CESD IN SEGMENT 1     *
*                            (NOT FOUND IS AN ERROR)                  *
*                                                                     *
*                                                                     *
***********************************************************************
*
*              REGISTER USAGE
*
HEWLFENT CSECT
ERRCODRG EQU   0                                                   REGS
ERRSYM   EQU   1                        ERROR SYMBOL ADDRESS       REGS
ALIASTBL EQU   3                       ADDRESS OF ALIAS TABLE
WORK1    EQU   5                       WORK REG
APT      EQU   2                        APT                        REGS
CESDCT   EQU   11                       CESD CURR CT               REGS
BASE     EQU   12                                                  REGS
WORK2    EQU   13
RCTADD   EQU   8                       ADDRESS OF RCT              REGS
RETURN   EQU   14                                                  REGS
TEMP4    EQU   9
TEMP3    EQU   10
EVEN     EQU   14                      EVEN REG OF AN EVEEN /ODD PAIR
TEMP1    EQU   6                        TEMPORARY WORK
ALIASADD EQU   7                        ADDRESS OF ALIAS ENTRY IN CESD
BRANCH   EQU   15                                                  REGS
CESDADD  EQU   8                        CESD ADDRESS             REGS
ENTRYCD  EQU   X'02'                    ENTRY CARD RECIEVED- MASK
OVERLYBT EQU   X'20'                    OVERLAY MASK               DISP
ENTPTSYM EQU   X'04'                    SYMBOLIC ENTRY PT MASK
ENTPTRCD EQU   X'08'                    ENTRY PT RECVD IND.
NULL     EQU   X'07'                                               DISP
DISP     EQU   0                        REL DISP TO SAVE CALLERS REGS
*
***********************************************************************
*              SAVE ALL REGISTERS                                     *
***********************************************************************
         STM   14,12,DISP(13)
         USING ENT00050+2,BASE
         USING APTDSECT,APT
ENT00050 BALR  BASE,0
         BC    15,MODID+6              BRANCH AROUND MODULE IDENT
MODID    DC    C'01MENT'
         ST    13,SAVERG13
         NI    WORKBYTE,X'00'           INITIALIZE WORKBYTE TO ZERO
***********************************************************************
*              CHAIN THROUGH CESD FINDING ALIASES - SCAN CESD FOR A   *
*               SYMBOL MATCH                                          *
*                  1) MATCH - SAVE ESD ID IN ALIAS TABLE              *
*                  2) NO MATCH - PUT 0 FOR ESDID IN ALIAS TABLE       *
***********************************************************************
***********************************************************************
*              ALIAS  TABLE  BUILDER
***********************************************************************
*              THE FOLLOWING EXPLAINS THE ALIAS TABLE BUILDING TECH   *
*                                                                     *
*                1) THE ALIAS SYMBOL IS PLACED IN THE ALIAS TABLE  IN *
*                   BYTE LOCATIONS 1-8                                *
*                2) IF A MATCH BETWEEN THE ALIAS SYMBOL AND AN SD OR  *
*                   LR SYMBOL IN SEG 1 IS NOT FOUND - A 0 IS PUT BYTES*
*                   9 AND 10 OF THE ALIAS TABLE                       *
*                3) IF A MATCH IS FOUND THE ESD ID OF THIS SYMBOL IN  *
*                   THE ALIAS CHAIN IS SAVED IN BYTES 9 AND 10 OF THE *
*                   ALIAS TABLE - THIS ESDID (OR POINTER TO THE CESD) *
*                   POINTS TO A LINE OF ESD TYPE NULL (07 HEX)FOUND IN*
*                   BYTE 8 OF THE CESD ENTRY - IN BYTES 10-12 THE     *
*                   ADDRESS OF LR OR SD IS SAVED - BYTES 13 AND 14 ARE*
*                   NOT USED - BYTES 15-16 CONTAIN THE ESD ID OF THE  *
*                   SD WHICH THE ALIAS SYMBOL MATCHED OR THE SD IN    *
*                   WHICH THE LR(WHICH THE ALIAS SYMBOL MATCHED) RESID*
*                   ES -  THIS ESD ID IS SAVED FOR SCATTER LOADING    *
*                4) THE CESD ENTRIES WHICH WERE CHAINED TOGETHER IN THE
*                   FIRST PASS TO RECORD ALIAS SYMBOLS ARE NOW USED TO*
*                   RECORD THE SYMBOL'S ADDRESS AND ID WHEN NEEDED.   *
*                5) THE INFORMATION IS USED BY THE FINAL PROCESSOR IN *
*                   STOWING ALIASES                                   *
***********************************************************************
*
ENT00150 L     ALIASADD,ALCB       ADDRESS OF FIRST ALIAS ITEM
         L     ALIASTBL,ALAS       ADDRESS OF ALIAS TABLE
         L     TEMP1,CHESD         ADDRESS OF CESD
         LH    TEMP3,ENCDC         CESD CT
ENT00155 LR    CESDADD,TEMP1            RESTORE CESD ADD
         LR    CESDCT,TEMP3             RESTORE CESD CT
ENT00160 LTR   ALIASADD,ALIASADD        ARE  THERE ANY MORE ALIASES
         BC    8,ENT00200               NO /GO TO FIND ENTRY ADDRESS
         MVC   0(8,ALIASTBL),0(ALIASADD) MV ALIAS SYMBOL TO ALIAS TABLE
         MVI   8(ALIASADD),NULL           SET THIS CESD LINE- TYPE NULL
         L     WORK1,8(ALIASADD)       ADDREAS OF NEXT ALIAS SYMBOL
ENT00190 LA    CESDADD,16(CESDADD)      INCREMENT TO FIRST(NEXT) ENTRY
         CLC   0(8,CESDADD),0(ALIASTBL) DOES ALIAS SYM = THIS CESD SYM
         BC    7,ENT00192               NO /BRANCH TO TEST END CESDLOOP
         LR    ERRSYM,CESDADD           ADDRESS OF ALIAS TABLE
         MVC   9(7,ALIASADD),9(CESDADD) MOVE ADD OF LR OR SD TO NULL
*                                       LINE,ALSO MOVE ID/L FIELD
         LA    WORK2,ENT00192           RETURN ADDRESS IF TYPE NE SD,LR
         LA    TEMP4,ENT01191           RETURN IF TYPE = LR
         BAL   RETURN,ENT01800          GO TO TEST TYPE FOR SD OR LR
         SR    CESDADD,TEMP1           RELATIVE CESD ADD OF SYMBOL
         SRL   CESDADD,4               ID OF SYMBOL
         STH   CESDADD,14(ALIASADD)    PUT ID OF SD IN LD LINE
ENT01191 CLI   12(ERRSYM),X'01'         IS  SD OR LR IN SEG 1
         BC    7,ENT00198               NO / GO TO PRINT ERROR MESSAGE
         SR    ALIASADD,TEMP1           RELATIVE ADD OF AE LINE
         SRL   ALIASADD,4               ID OF AE LINE
ENT00191 STH   ALIASADD,8(ALIASTBL)     PUT ID OF AE LINE IN ALIAS TBL
         LA    ALIASTBL,10(ALIASTBL)    INCREMENT TO NEXT ALIAS SYMBOL
         LA    ALIASADD,0(WORK1)        RESTORE ADD OF NEXT ALIAS SYM
         BC    15,ENT00155              BRANCH TO TEST END OF ALIASLOOP
ENT00192 BCT   CESDCT,ENT00190          BRANCH IF CESD LOOP NOT DONE
ENT00197 SR    ALIASADD,ALIASADD
         BC    15,ENT00191              BRANCH STORE 0 ID - CONTINUE
*
ENT00198 LH    ERRCODRG,ERRPARM9        ERROR- ALIAS SYMBOL NOT IN SEG1
         LA    RETURN,ENT00197          RETURN ADDRESS
         BC    15,ENT00500              GO TO /GO TO ERROR ROUT.
***********************************************************************
*              DETERMINE ENTRY POINT OF MODULE
***********************************************************************
ENT00200 TM    APT1,ENTPTRCD       ENTRY POINT RECEIVED
         BC    8,ENT01250               NO / GO FIND 1ST GOOD BYTE SEG1
         TM    APT1,ENTPTSYM       ENTRY PT SYMBOLIC
         BC    8,ENT01200               NO - GO FIND ABSOLUTE
***********************************************************************
*              ENTRY POINT IS SYMBOLIC                                *
***********************************************************************
ENT00300 LA    CESDADD,16(CESDADD)      INC CESD ADD
         CLC   EPSM(8),0(CESDADD)  DOES ENTRY SYMBOL =  CESD SYMBOL
         BC    8,ENT00600               YES / GO TO FIND ITS ADD
ENT00350 BCT   CESDCT,ENT00300          BRANCH IF LOOP NOT DONE
         LH    ERRCODRG,ERRPARM3       SYMBOL NOT SD,LR IN CESD-ENTRY
         TM    APT1,ENTRYCD        HAS AN ENTRY CD BEEN RECEIVED
         BC    1,ENT00400               YES
         LH    ERRCODRG,ERRPARM4       SYMBOL NOT SD,LR IN CESD-ENTRY
ENT00400 LA    ERRSYM,EPSM         ADDRESS OF SYMBOL
ENT00450 LA    RETURN,ENT01100          RETURN ADDRESS
ENT00500 L     BRANCH,ERDIG        ADD OF ERROR DIAGNOSTIC ROUTINE
         BCR   15,BRANCH                GO TO ERROR DIAGNOTIC ROUTINE
ENT00600 MVC   LKDENTPT+1(3),9(CESDADD) SAVE ENTRY PT ADDRESS
         LA    WORK2,ENT00350           RETURN IF TYPE NOT ACCEPTABLE
         LA    TEMP4,ENT00800           RETURN IF TYPE = SD OR LR
         BAL   RETURN,ENT01800          GO TO TEST TYPE- SD,LR,SD W RLD
ENT00800 CLI   12(CESDADD),X'01'        ENTRY PT IN SEGMENT 1
         BC    7,ENT01700               NO / INVALID ENTRY POINT
ENT00900 SR    CESDADD,TEMP1            RELATIVE ADD
         SRL   CESDADD,4                CS  ID
         STH   CESDADD,LKDENTID         SAVE ID
         OC    LKDENTPT(3),LKDENTPT    IS ENTRY POINT ADD = 0
         BC    8,ENT01000              YES
         NI    PDSE8,X'DF'         SET IND IN PDS - ADD NOT = 0
ENT01000 MVC   PDSE16(2),LKDENTID   PUT ID IN PDS
         MVC   PDSE11(3),LKDENTPT+1 PUT ADD IN PDS
***********************************************************************
*              RESTORE ALL REGISTERS - RETURN TO CALLER               *
***********************************************************************
ENT01100 L     13,SAVERG13              RESTORE ADD OF CALLERS SAVEREA
         LM    14,12,DISP(13)           RESTORE USER REGISTERS
         BCR   15,14                    RETURN TO CALLER
***********************************************************************
*              ENTRY POINT  IS AN ASSEMBLED ADDRESS FROM AN END CARD  *
***********************************************************************
ENT01200 MVC   LKDENTID(2),PDSE16  PUT ID ON BOUNDRY
         LH    CESDADD,LKDENTID         LOAD ID
         LH    ERRCODRG,ERRPARMA        INVALID ENTRY PT ID -NO PT ADD
         LTR   TEMP4,CESDADD            SAVE ID AND TEST FOR ZERO
         BC    8,ENT00450               GO PRINT ERROR - INVALID ID
         CLR   TEMP4,TEMP3              DOES ID POINT INTO CESD
         BC    2,ENT00450               NO-GO PRINT ERROR- INVALID ID
         SLL   CESDADD,4               RELATIVE CESD ADD
         AR    CESDADD,TEMP1           ADDRESS OF CESD ENTRY
         MVN   WORKBYTE(1),8(CESDADD)  MOVE TYPE TO TEST IT
         TM    WORKBYTE,X'03'          IS TYPE = SD,PC OR LR
         BC    4,ENT00450              NO - ERROR ON ID
         SLL   TEMP4,2                  RCT RELATIVE ADD
         A     TEMP4,RECNT         RCT ADD OF RC FOR THIS CS
         TM    APTSWS,X'20'        IS END PT ADD TO BE RELOCATED
         BC    8,ENT01230         ABSOLUTLY - NO
         LA    TEMP4,8(CESDADD)        REG POINTS TO TYPE- ADDRESS
ENT01230 L     TEMP4,0(TEMP4)     LOAD RC OR CESD ADD TYPE
         A     TEMP4,EPSM          ADD ASSEMBLED ADD TO RC
         LA    TEMP4,0(TEMP4)          CLEAR HI ORDER BYTE
         ST    TEMP4,LKDENTPT           SAVE ADD ON BOUNDRY
         LH    ERRCODRG,ERRPARMB        INVALID ENTRY PT ADD-PRINT ADD
         L     WORK1,8(CESDADD)         LINKED ADD OF CONTROL SEC
         LA    WORK1,0(WORK1)           CLEAR HI BYTE TO ZERO
         CR    TEMP4,WORK1              IS ENTRY PT ADD GTR CONT SEC AD
         BC    4,ENT01240               NO,GO TO PRINT ERROR MESS
         A     WORK1,12(CESDADD)        UPPER BOUND OF CONTROL SECTION
         LA    WORK1,0(WORK1)           CLEAR HI BYTE TO ZERO
         CLR   TEMP4,WORK1              IS ENTRY POINT LESS THAN UPP BD
         BC    11,ENT01240              NO,GO TO PRINT ERROR MESSAGE
         CLI   12(CESDADD),X'01'       IS ENTRY POINT IN SEG 1
         BC    8,ENT00900               YES / GO TO SAVE ENTRY POINT
         LH    ERRCODRG,ERRPARM7        ENTRY POINT NOT IN SEG 1 PARM
ENT01240 MVI   LKDENTPT,X'00'           SET HI BYTE OF ADD TO ZERO
         UNPK  EPSM(8),LKDENTPT(5) UNPACK 4 BYTE ADDRESS
         TR    EPSM(8),TABLE-C'0'  TRANSLATE BINARY TO HEX
         LM    EVEN,BRANCH,EPSM
         SRDL  EVEN,8
         STM   EVEN,BRANCH,EPSM
         MVI   EPSM,C'0'           SET HI BYTE TO ZERO
         BC    15,ENT00400              GO TO ERROR ROUTINE
***********************************************************************
*              NO ENTRY POINT SPECIFIED BY PROBLEM PROGRAM            *
***********************************************************************
ENT01250 MVC   LKDENTPT+1(3),THREEFS   SET LKDENTPT TO HIGHEST POS ADD
         LR    TEMP4,TEMP1
ENT01300 LA    TEMP4,16(TEMP4)          INC TEMP1 BY 16 (TEMP1 PTST
         MVC   WORKBYTE(1),8(TEMP4)     MOVE TYPE TO WORKBYTE
         NI    WORKBYTE,X'1F'           REMOVE TOP 3BITS -
         CLI   WORKBYTE,X'0C'           IS TYPE NOT ACCEPTABLE
         BC    2,ENT01400               YES / CONTINUE LOOP
         TM    WORKBYTE,X'13'           IS TYPE = SD OR PC(NOT DELETE)
         BC    5,ENT01400               NO/ GO TO TEST END OF LOOP
         CLI   12(TEMP4),X'01'          IS CS  IN  SEG 1
         BC    7,ENT01400               NO / GO TO TEST END OF LOOP
         CLC   9(3,TEMP4),LKDENTPT+1   IS THIS CS ADD LESS PRV ADD
         BC    11,ENT01400              NO / GO TEST END OF LOOP
         LR    CESDADD,TEMP4            SAVE CESD ADD OF LOW CS ADD
         MVC   LKDENTPT+1(3),9(TEMP4)   SAVE NEW LOW CS ADD
ENT01400 BCT   CESDCT,ENT01300          BRANCH IF LOOP NOT DONE
         CLC   LKDENTPT+1(3),THREEFS    HAS A CS BEEN FOUND
         BC    7,ENT00900               YES / SAVE ADD AND ID
         TM    PDSE7,OVERLYBT      IS PROGRAM IN OVERLAY
         BC    8,ENT01100               NO/ GO TO GO TO ERROR ROUTINE
         LH    ERRCODRG,ERRPARM8        NO ENTRY PT DEFINED IN SEG 1
         BC    15,ENT00450              GO TO - GO TO ERROR DIAG
*                                        NO ENTRY PT DEFINED BY PRB.PG.
ENT01700 LH    ERRCODRG,ERRPARM5        SYMBOL FROM ENTRY CD NOT IN SG1
         TM    APT1,ENTRYCD        HAS AN ENTRY CARD BEEN RECEIVED
         BC    1,ENT00400               YES / GO TO PASS RETURN ADD
         LH    ERRCODRG,ERRPARM6        SYMBOL FROM END CARD NOT IN SG1
         BC    15,ENT00400              GO TO PASS RETURN ADDRESS
***********************************************************************
*              TEST TYPE = HEX(08,03,08)
***********************************************************************
ENT01800 MVN   WORKBYTE(1),8(CESDADD)   MOVE LOW 4 BITS TO TEST TYPE
         CLI   WORKBYTE,X'08'           IS TYPE AN ACCEPTABLE ONE
         BCR   2,WORK2                  NO /  RETURN
         CLI   WORKBYTE,X'03'           IS TYPE = LR
         BCR   8,TEMP4                  YES / RETURN
         TM    WORKBYTE,X'07'           IS NOT SD OR SD WITH RLDS OR LR
         BCR   5,WORK2                  YES / RETURN
         BCR   15,RETURN                RETURN - SD
THREEFS  DC    XL3'FFFFFF'
LKDENTPT DS    F                        ENTRY POINT
LKDENTID DS    H                        ENTRY POINT ID
SAVERG13 DS    F                        SAVE AREA FOR ADDRESS OF CALL-
*
WORKBYTE DC    X'00'                    USED TO TEST TYPE OF ESDS
***********************************************************************
*              ERROR  PARAMETERS -  ALL ARE SEVERITY 3 - NON EXECUTABLE
***********************************************************************
*                                       DISP      SEVERITY   MESS.NO.
ENT3     EQU   X'2305'                  2         3         05
ENT4     EQU   X'2306'                  2         3         06
ENT5     EQU   X'2307'                  2         3         07
ENT6     EQU   X'2308'                  2         3         08
ENT7     EQU   X'2309'                  2         3         09
ENT8     EQU   X'030B'                  0         3         0B
ENT9     EQU   X'222F'                  2         2         2F
ENTA     EQU   X'0303'                  0         3         03
ENTB     EQU   X'2303'                  2         3         03
         DS    0F
ERRPARM3 DC    AL2(ENT3)                SYMBOL NOT AN EXTERNAL NAME-ENT
ERRPARM4 DC    AL2(ENT4)                SYMBOL NOT AN EXTERNAL NAME-END
ERRPARM5 DC    AL2(ENT5)                SYMBOL NOT DEFINED IN ROOT -ENT
ERRPARM6 DC    AL2(ENT6)                SYMBOL NOT DEFINED IN ROOT -END
ERRPARM7 DC    AL2(ENT7)                ENTRY POINT ADDRESS NOT IN ROOT
ERRPARM8 DC    AL2(ENT8)               NO CONTROL SECTION IN ROOT
ERRPARM9 DC    AL2(ENT9)                INVALID ALIAS ENTRY POINT \SEG1
ERRPARMA DC    AL2(ENTA)               INVALID ENTRY PT - NO ADDRESS
ERRPARMB DC    AL2(ENTB)               INVALID ENTRY PT -  ADDRESS
***********************************************************************
*              TABLE OF HEX CHARACTERS - USED IN BINARY CONVERSION    *
***********************************************************************
TABLE    DC    C'0'
         DC    C'1'
         DC    C'2'
         DC    C'3'
         DC    C'4'
         DC    C'5'
         DC    C'6'
         DC    C'7'
         DC    C'8'
         DC    C'9'
         DC    C'A'
         DC    C'B'
         DC    C'C'
         DC    C'D'
         DC    C'E'
         DC    C'F'
*
         HEWAPT
         END
