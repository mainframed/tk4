         TITLE    'HEWLFADA  ADDRESS ASSIGNMENT'
*                                                                     *
***********************************************************************
***********************************************************************
*
*STATUS: CHANGE LEVEL
*FUNCTION:                                                            *
*   1) ASSIGN LINKED ADDRESSES TO ALL CONTROL SECTIONS AND LABELS     *
*      THEREIN                                                        *
*   2) IF IN OVERLAY DETERMINE SEGMENT ADDRESSES                      *
*   3) DETERMINE PSEUDO REGISTER DISPLACEMENTS AND CUMULATIVE LENGTH  *
*   4) PRINT MESSAGE FOR ALL UNRESOLVED EXTERNAL REFERENCES           *
*   5) SET CERTAIN ESD TYPES TO NULL - DELETE LINE TYPE ER SUBTYPE    *
*      (BYTE 13 OF CESD) AS FOLLOWS                                   *
*       A) ALL CARDS EXCEPT ALIAS (F0 - B0,90)                        *
*       B) NO CALL UNMATCHED       (04)                               *
*       C) UNMATCHED LIBRARY MEMBER (02)                              *
*   6) IF IN OVERLAY COMPUTE LENGTH OF SEGTAB                         *
*   7) GO TO HEWLKENS TO DETERMINE SEGMENT NUMBERS FOR LABELS AND TO  *
*      COMPUTE ENTAB SIZES (ONLY IF IN OVERLAY)                       *
*                                                                     *
*ENTRY POINTS:                                                        *
*   1) HEWLFADA - CONTROL SECTION NAME - MAIN ENTRY POINT             *
*   2) HEWLCAD1 - LABEL - ENTERED FROM HEWLKENS TO MAKE CESD ENTRIES  *
*      FOR ENTABS                                                     *
*                                                                     *
*INPUT:                                                               *
*   1) GP REGISTER 2 - ADDRESS OF ALL PURPOSE TABLE
*EXTERNAL ROUTINES:                                                   *
*   1) HEWLFENS    -ENTAB SIZE DETERMINATION
*   2) HEWLFENT
*   3) HEWLFLOG    - ERROR DIAGNOSTIC ROUTINE                         *
*                                                                     *
*EXITS:                                                               *
*   1) HEWLFOUT (NORMAL) - INTERMEDIATE OUTPUT PROCESSOR
*   2) HEWLFFNL (NO CESD OR TEXT) FINAL PROCESSOR
*                                                                     *
*TABLES:                                                              *
*   INPUT                                                             *
*   1) COMPOSITE EXTERNAL SYMBOL DICTIONARY                           *
*   2) ALL PURPOSE TABLE                                              *
*   3) SEGTA1 (OVERLAY ONLY)                                          *
*                                                                     *
*   INTERNALLY USED                                                   *
*   1) SEGMENT LENGTH TABLE                                           *
*                                                                     *
*   OUTPUT                                                            *
*   1) RELOCATION CONSTANT TABLE                                      *
*   2) UPDATED COMPOSITE EXTERNAL SYMBOL DICTIONARY                   *
***********************************************************************
***********************************************************************
*              HEWLFADA    -ADDRESS ASSIGNMENT                        *
*                                                                     *
HEWLFADA CSECT
**********************************************************************
*098000,155000-187000,283000-285000,287000,316000-317000         S01904
*342000-366000,533000-569000,573000-574000,576000,583000-584000  S01904
*590000-591000,594000,604000-674000,768000-775000,881000-920000  S01904
*                                                               OY00358
*C092000-0930200,A093520-093560,A094484                          YM5543
*D093500-093984                                                  XM4628
*  SEE FIX FOR XM4628                                           OX02833
*D314000,D523000,D701000-713000,D829000-832000          OX03901,OY03217
*D846000,D850000                                        OX03901,OY03217
**********************************************************************
         ENTRY HEWLCAD1
         ENTRY SEGLNTAB
***********************************************************************
*              REGISTER  ASSIGNMENT                                   *
***********************************************************************
ERRCODE  EQU   0
ERRSYMAD EQU   1
TEMP2    EQU   1
WORK4    EQU   1
APT      EQU   2
CSLGTH   EQU   3                        CONTROL SECTION LENGTH
WORK1    EQU   3
MAXSEGCT EQU   3                        MAX.NO OF SEGMENTS
CSSEGNO  EQU   4                        CONTROL SECTION SEGMENT NO
WORK2    EQU   4
CSASADD  EQU   5                        CONTROL SECTION ASSEMBLED ADD.
WORK3    EQU   5
CESDCRCT EQU   6
CESDCRAD EQU   7
TEMP1    EQU   7
SEGLGTH  EQU   8
ASMADD   EQU   9
CURSEGNO EQU   9
LOCCTR   EQU   10
ADTXTIOT EQU   11
BASE     EQU   12
ACUMZERO EQU   13
TEST     EQU   13
RETURN   EQU   14
BRANCH   EQU   15
EBIT     EQU   X'80'                    ENTAB PRESENT MASK
OVLYOFF  EQU   X'DF'                    MASK TO TURN OVERLAY OFF
OVRLAYBT EQU   X'20'
RCCOMP   EQU   X'20'                    RELOCATION CONST IS IN COMPFORM
         USING APTDSECT,APT   DECLARE APT BASE
         USING ADA00100+2,BASE
ADA00100 BALR  BASE,0
         B     MODID                                             YM5543
         DC    C'01MADA'                                         YM5543
MODID    EQU   *                                                 YM5543
         OI    APT4,INTRPS             INDICATE INTR PASS        S01904
NOCESD   EQU   *                       BRANCH TARGET             YM5543
*
*              INITIALIZATION
*
*
*              SET SEGMENT LENGTH TABLE = 0
*
*  USE OBJECT MODULE BUFFER FOR SEG LENGTH TABLE - USE LOWER ADDRESS
         CLC   HEWLCRBB+4(4),HEWLCRBB+8
         BL    ADA00110            FIRST LOW- USE IT
         L     SEGLGTH,HEWLCRBB+8  FIRST HIGH- USE SECOND
         B     ADA00115
ADA00110 L     SEGLGTH,HEWLCRBB+4  USE FIRST
ADA00115 ST    SEGLGTH,SEGLNTAB    SAVE LOW ADD AS ADD OF SEG LNGTH TAB
         SR    WORK3,WORK3         CLEAR REGISTER
         IC    WORK3,CSNO+1        GET HIGHEST SEGMENT USED
         LA    WORK3,1(WORK3)      ADD 1 FORRE-ORIGINING
         MH    WORK3,SIX           MULT BY NUM BYTES/ENTRY FOR TOTAL
         SR    WORK2,WORK2         CLEAR REMAINDER REGISTER
         D     WORK2,CONST256      DVIDE BY 256
         LR    TEMP1,SEGLGTH       ADDR. OF BEG SEGMNT LGTH TABLE
         LTR   WORK3,WORK3         IF LESS THAN 256 BYTES QUOTIENT = 0
         BC    2,CLRBUF            IF NOT SO, BEGIN CLEARING TABLE
         B     CLRFNL      IF QUOTIENT = 0, CLEAR NON-MULTIPLE OF 256
CLRBUF   XC    0(256,TEMP1),0(TEMP1)    CLEAR 256 BYTES
         LA    TEMP1,256(TEMP1)        UPDATE PTR BY 256
         BCT   WORK3,CLRBUF        REDUCE QUOTIENT & IF NOTZERO- RETURN
CLRFNL   BCTR  WORK2,0             DECREMENT FOR PROPER CLEARING
         EX    WORK2,CLRLAST       CLEAR LAST NON-MULTIPLE OF 256
         XC    HIADDREG(12),HIADDREG   SET HIADDREG,BGADDREG,CURRREGN
*                                      AND NCESDCT = 0  (12 BYTES)
*                                      = 0  (10 BYTES )
***********************************************************************
*              TEST IF CESD CURRENT CT = 0  - YES-ERROR  /GO TO FINAL *
*              PROCESSOR                                              *
***********************************************************************
ADA00120 BAL   RETURN,ADA02300         GO TO TEST CESD CT = 0
***********************************************************************
*              TEST IF PROGRAM IS IN OVERLAY - YES/ COMPUTE SIZE SEGTB*
***********************************************************************
         TM    PDSE7,OVRLAYBT      IS PROGRAM IN OVERLAY
         BC    1,ADA01000               YES  GO TO INIT SEGTAB & ENS
***********************************************************************
*              GO TO HEWLKENS TO DETERMINE SEGMENT NUMBERS FOR LABELS *
*              REG 13 SUPPLIED BUT REGISTERS NEED NOT BE SAVED        *
***********************************************************************
ADA00122 LA    13,SAVEREGS             SAVE REG AREA AADDRESS FOR ENS
         L     BRANCH,ENSVCON          ADDRESS OF HEWLCENS
         BALR  RETURN,BRANCH            BRANCH TO HEWLCENS
**********************************************************************
*                                                                     *
*              FIRST SEARCH  ASSIGN TEMPORARY LINKED ADDRESSES        *
*                TO ALL CSECTS REFERENCED IN THE TXTIO TABLE          *
*                                                                     *
**********************************************************************
*
* SET UP SEARCH OF TXTIO TABLE
         ST    TEST,SAVE13         KEEP ADDRESS OF SAVE AREA     S01904
         TM    APT4,ORDERR         IS ORDERING TO BE DONE        S01904
         BZ    ADA0123A            NO,BRANCH OUT                 S01904
         LH    TEST,ORDRCUR        OBTAIN CUR NO OF BYTES USED   S01904
         LTR   TEST,TEST           IS THERE ANY ENTRY            S01904
         BZ    ADA0123A            NO,BRANCH OUT                 S01904
         OI    TWELVE,X'40'        INDICATE ORDER TABLE PROCESS  S01904
ADORDR   EQU   11                                                S01904
         L     ADORDR,ORDRADR      GET BEG ADDR OF ORDER TBL     S01904
         AR    TEST,ADORDR         POINT TO END OF ORDER TBL     S01904
ADA0300  TM    O(ADORDR),X'A0'     IS THIS A MATCHED ENTRY       S01904
         BNO   ADA0302             NO,BRANCH OUT                 S01904
         MVC   IDSV(2),I(ADORDR)   SAVE ID                       S01904
         LH    CESDCRAD,IDSV                                     S01904
         SLL   CESDCRAD,4          COMPUTE REL CESD LOC OF ID    S01904
         A     CESDCRAD,CHESD      COMPUTE ABS CESD ENTRY LOC    S01904
         CLI   0(CESDCRAD),0       IS CORRESPONDING ENTRY DELETED
         BE    ADA0302             YES,BRANCH OUT                S01904
         TM    VIII(CESDCRAD),X'08'     IS THIS A WEAK EXTRN     S01904
         BO    ADA0302             YES,BRANCH OUT                S01904
         MVN   TYPESV(I),VIII(CESDCRAD)                          S01904
         CLI   TYPESV,X'05'        TYPE COMMON?                  S01904
         BE    ADA00175            YES,DETERMINE TLA             S01904
         CLI   TYPESV,O            IS TYPE SD?                   S01904
         BE    ADA00175            YES,DETERMINE TLA             S01904
         LA    RETURN,ADA0302      FLAG ERROR - INVALID ID       S01904
         LH    ERRCODE,ERRPARM8                                  S01904
         L     BRANCH,ERDIG                                      S01904
         BR    BRANCH                                            S01904
ADA0301  OI    VIII(CESDCRAD),X'08'     MARK ENTRY PROCESSED     S01904
ADA0302  LA    ADORDR,3(ADORDR)    INCREMENT TO NEXT ORDER TBL ENTRY
         CR    ADORDR,TEST         END OF TABLE REACHED?         S01904
         BL    ADA0300             NO,CONTINUE SCAN              S01904
         NI    TWELVE,X'BF'        MARK END OF ORDER TBL PROCESS
ADA0123A SR    TEST,TEST
         CH    TEST,ENTOC               IS THERE ANY TEXT
         BC    11,ADA00140         NO TXT - SEARCH CESD
         OI    TWELVE,X'80'             SET SWITCH INDICATNG TXTIO LOOP
         L     ADTXTIOT,TXTIO           ADDR OF TXTIO TABLE
         LR    TEST,ADTXTIOT           ADDRESS TXTIOT TABLE
         AH    TEST,ENTOC       TEST NOW CONTAINS END ADDR OF TXTIOT
ADA00123 CR    ADTXTIOT,TEST      ANY MORE TXT IN TXTIOT
         BC    11,ADA00135              NO- SET IN TXTIOT LOOP OFF
         TM    2(ADTXTIOT),X'20'        IS IT OUT OF ORDER TXT
         BC    1,ADA00133               YES--ID FOR TXTIO ENTRY ALREADY
*                                          PROCESSD. CHECK NEXT ENTRY.
* FIND CESD ENTRY
         LH    CESDCRAD,0(ADTXTIOT)     CESD ENTRY ID (FROM TXTIOT)
         SLL   CESDCRAD,4               FIND REL. ADDR. ON CESD  (*16)
         A     CESDCRAD,CHESD           ADDRESS OF CESD ENTRY
         TM    08(CESDCRAD),X'08'       HAS CESD ENTRY BEEN PROCESSED
         BC    1,ADA00133               YES- CHECK NEXT TXTIOT ENTRY
         TM    8(CESDCRAD),X'0B'        IS TYPE SD OR PC
         BC    7,ERRETURN               NO-ERROR-GO TO NEXT ENTRY
         CLI   8(CESDCRAD),X'14'        IS THIS A PC FOR ENTAB OR SEGTB
         BC    7,ADA00175              NO - PROCESS CESD ENTRY
*    ERROR FOUND  LOG IT THEN CONTINUE
ERRETURN LA    RETURN,ADA00175
         L     BRANCH,ERDIG
         LH    ERRCODE,ERRPARM8        GIVE TXTIOT ERROR MESSAGE
         BR    BRANCH
ADA00130 OI    8(CESDCRAD),X'08'        SET CESD ENTRY PROCESSED SWITCH
ADA00133 LA    ADTXTIOT,INC(ADTXTIOT)   UPDATE ADDRESS
         B     ADA00123                 GO TO NEXT TXTIOT ENTRY
ADA00135 NI    TWELVE,X'7F'             TURN TXTIO LOOP SWITCH OFF
         B     ADA00140                 SEARCH CESD
ADA00136 NI    8(CESDCRAD),X'F7'        SET PROCESSD SWITCH OFF
         B     ADA00400                 CHECK END OF LOOP
***********************************************************************
*                                                                     *
*              SEARCH CESD FOR NON-PROCESSED CSECTS- NO TEXT          *
*                COMMON,  ASSIGN TEMP LINKED ADDRESSES
*                COMPUTERELOCATION CONSTANTS (PUT IN RCT),DETERMINE   *
*                PSEUDO REGISTER DISPLACEMENTS AND TOTAL LENGTH       *
*                                                                     *
***********************************************************************
ADA00140 LH    CESDCRCT,ENCDC           CURRENT NO. CESD ENTRIES
         L     CESDCRAD,CHESD  CESD ADD
         LA    WORK4,1(CESDCRCT)       CESD CURRENT CT + 1
         STH   WORK4,NCESDCT           INITIALIZE NCESD CT
ADA00150 LA    CESDCRAD,16(CESDCRAD)    POINTS TO CURRENT CESD ENTRY
         CLI    8(CESDCRAD),X'0A'       WEAK EXTERNAL
         BE    ADA00400                 YES,CHECK END OF LOOP
         TM    8(CESDCRAD),X'08'        HAS CESD ENTRY BEEN PROCESSED
         BC    1,ADA00136               YES- SET PROCESSD SW OFF-
         NI    8(CESDCRAD),X'DF'       SET BIT 2 OF TYPE BYTE TO 0
         MVN   TESTTYPE(1),8(CESDCRAD)  MOVE LOW 4 BITS FOR ESDTYPETEST
         TM    TESTTYPE,X'02'           IS TYPE NOT SO,PC OR CM
         BC    1,ADA00850               YES
***********************************************************************
*              IS THIS CESD ENTRY THE PC DELETE FOR SEGTAB / YES -DONOT
*              ASSIGN AN ADDRESS TO IT ( IT IS INITIALIZED TO 0)      *
***********************************************************************
         LR    TEMP2,CESDCRAD
         S     TEMP2,CHESD    REL ID
         SRL   TEMP2,4                  ID
         CH    TEMP2,ENSPX    IS THIS A SEGTAB ENTRY
         BC    8,ADA00400               YES  DO NOT ASSIGN ADDRESS
***********************************************************************
*              USING SEGMENT NUMBER REFERENCE SEGMENT LENGTH TABLE AND*
*              FIND LENGTH OF THIS SEGMENT                            *
***********************************************************************
ADA00175 SR    SEGLGTH,SEGLGTH
         IC    SEGLGTH,12(CESDCRAD)     PICK UP SEG NO OF THIS CESD ENT
         MH    SEGLGTH,SIX              MULTIPLY BY 6  (6BYTES/ENTRY)
         A     SEGLGTH,SEGLNTAB    POINTS TO AN ENTRY IN SEG LENGTH TAB
         MVI   CONSTWK,X'00'
         MVC   CONSTWK+1(3),0(SEGLGTH)  MOVE SEGMENT LG TO CONST+1
         L     ASMADD,8(CESDCRAD)       ASSEMBLED ADDRESS OF THIS CS
         LA    ASMADD,0(ASMADD)         REMOVE TYPE
         L     LOCCTR,CONSTWK           LENGTH OF THIS SEGMENT
***********************************************************************
*              IF SEGMENT LENGTH = 0  SAVE LOW 3 BITS OF ASSEMBLED ADD*
***********************************************************************
         LTR   LOCCTR,LOCCTR            IS LENGTH = 0
         BC    2,ADA00200               NO
         LA    WORK1,7                  SET REG TO 7/FOR SAVING LOW 3
         NR    WORK1,ASMADD             SAVE LOW 3 BITS OF ASSEMBLED AD
         STC   WORK1,3(SEGLGTH)         STORE LOW 3 BITS OF CS INSGLGTH
***********************************************************************
*              MAKE TEMPORARY LINKED ADDRESS (SEGMENT LENGTH) MODULO 8*
*              WITH ASSEMBLED ADDRESS - SAVE TLA IN CESD              *
***********************************************************************
ADA00200 LR    WORK1,ASMADD             SAVE ASSEMBLED ADDRESS
         SR    WORK1,LOCCTR             MAKE TEMP LINKED ADD MOD 8 WITH
         LA    WORK2,7                   THE ASSEMBLED ADDRESS OF CS
         NR    WORK1,WORK2
         AR    LOCCTR,WORK1             ANS IN LOCCTR  (TLA)
         TM    PDSE7,OVRLAYBT           OVERLAY SPECIFIED?       S01904
         BO    ADA0201                 YES,BRANCH AROUND         S01904
         LR    WORK2,LOCCTR             SAVE LOCAL REGISTER      S01904
         BAL   WORK3,ADA0400            CHECK FOR PAGE ALIGNMENT
         LR    LOCCTR,WORK2             RESTORE LOCAL REGISTER   S01904
ADA0201  IC    WORK2,8(CESDCRAD)        SAVE  TYPE
         ST    LOCCTR,8(CESDCRAD)       PUT TLA IN CESD
         STC   WORK2,8(CESDCRAD)        RESTORE  TYPE
         LR    WORK1,LOCCTR             SAVE  LOCCTR  (TLA)
***********************************************************************
*              DETERMINE ADDRESS OF RELOCATION CONST IN RCT FOR THIS CS
***********************************************************************
*
         LR    WORK2,CESDCRAD
         S     WORK2,CHESD    RELATIVE CESD ADD
         SRL   WORK2,2                  RELATIVE RC ADD
         A     WORK2,RECNT    ADD OF A RCT ENTRY/RCT 1-1 CESD
***********************************************************************
*              COMPUTE RELOCATION CONSTANT  , RC = TLA - AA /PUT IN RCT
***********************************************************************
         SR    WORK1,ASMADD             COMPUTE  RCT = TLA - ASSM ADD
         BC    11,ADA00250         IF POSITIVE  -- CONTINUE
         OI    8(CESDCRAD),X'20'   IF NEG- INCICATE NEG RELOC CONST
ADA00250 ST    WORK1,0(WORK2)           STORE TRC IN RELOC CONST TABLE
***********************************************************************
*              ADD CS LENGTH TO CS TLA AND SAVE IN SEG LENGTH TABLE/SEG
***********************************************************************
ADA00300 MVC   CONSTWK(4),12(CESDCRAD)  MOVE LENGTH TO CONST
         MVI   CONSTWK,X'00'           SET IST BYTE TO ZERO
         A     LOCCTR,CONSTWK          ADD LENGTH TO LOCATION CTR
         ST    LOCCTR,CONSTWK
ADA00350 MVC   0(3,SEGLGTH),CONSTWK+1  PUT TLA + L (CURRENT SEG LG) IN
         TM    TWELVE,X'40'             ORDER TABLE LOOP         S01904
         BO    ADA0301                  YES,BRANCH OUT           S01904
         TM    TWELVE,X'80'             IN TXTIOT LOOP?
         BC    1,ADA00130               YES- SET CESD ENTRY PROCESSED
         L     TEST,SAVE13         RESTORE REG 13
*
ADA00400 BCT   CESDCRCT,ADA00150         SEGLGTH TABLE /BRANCH IFNOTDON
***********************************************************************
*              TEST FOR OVERLAY-YES/ GO TO SCAN SEG LENGTH TABLE      *
***********************************************************************
         TM    PDSE7,OVRLAYBT IS PROGRAM IN OVERLAY
         BC    1,ADA01100               YES
         MVC   SIZSAVE+1(3),0(SEGLGTH)  GET PROGRAM LENGTH
         L     WORK1,SIZSAVE
         LA    WORK1,7(WORK1)          ROUND SIZE TO NEXT
         N     WORK1,ROUNDOFF          DOUBLE WORD
         ST    WORK1,SIZSAVE           SAVE SIZE FOR PDS DIRECTORY
         MVC   0(3,SEGLGTH),SIZSAVE+1
         MVC   PDSE9(3),0(SEGLGTH) PUT PROGRAM LENGTH IN PDS
***********************************************************************
*              SCAN CESD - RELOCATE ADDRESSES OF LRS-PROCESS ERS      *
***********************************************************************
ADA00550 LH    CESDCRCT,ENCDC  CURRENT NO. CESD ENTRIES
         L     CESDCRAD,CHESD  CESD ADD
ADA00600 LA    CESDCRAD,16(CESDCRAD)    INCREMENT TO FIRST(NEXT) ENTRY
         MVN   TESTTYPE(1),8(CESDCRAD)  MOVE LOW 4 BITS FOR ESDTYPETEST
         STM   WRKREGE,WRKREG1,BRNCHSV SAVE REGISTERS            S01904
         LH    WRKREG1,ORDRCUR          GET CUR NO OF BYTES IN ORDR
         LTR   WRKREG1,WRKREG1          ARE THERE ANY ENTRIES?   S01904
         BZ    ADA060D                  NONE,BRANCH OUT          S01904
         L     WRKREGF,ORDRADR          COMPUTE ADDR OF AVAIL ENTRY
         AR    WRKREG1,WRKREGF          IN THE ORDER TABLE       S01904
         LA    WRKREG0,3                GET LENGTH OF AN ENTRY   S01904
         SR    WRKREG1,WRKREG0          POINT TO LAST ENTRY      S01904
         LR    WRKREGE,WRKREG7                                   S01904
         S     WRKREGE,CHESD            CALCULATE CESD ID        S01904
         SRL   WRKREGE,4                OF THE ENTRY BEING EXAMINED
         STH   WRKREGE,IDSV             SAVE ID                  S01904
ADA060B  CLC   IDSV(2),1(WRKREGF)       LOOK FOR  MATCH IN ORDR TBL
         BE    ADA060C                  MATCH FOUND-CHECK TYPE   S01904
         BXLE  WRKREGF,WRKREG0,ADA060B  CONTINUE LOOP SEARCH     S01904
         B     ADA060D                  NO MATCH FOUND-BRANCH OUT
ADA060C  CLI   TESTTYPE,X'00'           IS TYPE SD?              S01904
         BE    ADA060D                  YES,PROCEED-VALID COND   S01904
         CLI   TESTTYPE,X'05'           IS TYPE COMMON?          S01904
         BE    ADA060D                  YES,PROCEED-VALID COND   S01904
         LR    WRKREG1,WRKREG7          GET CESD ENTRY ADDRESS   S01904
         LH    WRKREG0,ERRCDDE          GET ERROR CODE           S01904
         L     WRKREGF,ERDIG            GET ADDRESS OF LOG RTN   S01904
         BALR  WRKREGE,WRKREGF          BRANCH TO ERROR LOG RTN  S01904
ADA060D  LM    WRKREGE,WRKREG1,BRNCHSV  RESTORE REGISTERS        S01904
         TM    TESTTYPE,X'0A'           IS TYPE WEAK EXTRN
         BNO   ADA00601                 NO,BRANCH OUT
         XC    9(4,CESDCRAD),9(CESDCRAD)  CLEAR CHN ADDR AND SEG FLDS
         B     ADA00650
ADA00601 CLI TESTTYPE,X'02'
         BC    8,ADA00900               YES / GO TO ER ROUTINE
         CLI   TESTTYPE,X'07'           IS TYPE NULL
         BC    8,ADA00700               YES / TEST END OF LOOP
         CLI   TESTTYPE,X'03'           IS TYPE = LR
         BC    7,ADA00650               NO / GO TO  SAVE  Y
         LH    WORK1,14(CESDCRAD)       YES  LR - NOW RELOCATE TLA/ ID
         SLL   WORK1,2                  MULTIPLY BY 4
         A     WORK1,RECNT    POINTS TO RCT ENTRY OF SD,PC,CM
         L     WORK2,0(WORK1)           RELOCATION CONSTANT = RC
         LR    WORK1,CESDCRAD
         S     WORK1,CHESD    REL ADD OF LR ENTRY IN RCT
         SRL   WORK1,2
         A     WORK1,RECNT    ADD OF RC FOR LR
         ST    WORK2,0(WORK1)          ST RC OF LR
         A     WORK2,8(CESDCRAD)        ADD RC TO ASSEMBLED ADD OF LR
         IC    WORK1,8(CESDCRAD)        SAVE TYPE
         ST    WORK2,8(CESDCRAD)        STORE LINKED ADDRESS OF THIS LR
         STC   WORK1,8(CESDCRAD)        RESTORE TYPE
*              SAVE CURRENT CESD CT - CESD LINE NUMBER + 1 = Y
ADA00650 STH   CESDCRCT,NCESDCT         SAVE Y
ADA00700 BCT   CESDCRCT,ADA00600        BRANCH IF LOOP OF CESD NOT DONE
*              COMPUTE NEW CESD CURRENT NUMBER ENTRIES
         LH    CESDCRCT,NCESDCT         Y= CESD CURR CT - CESD LN NO +1
         BCTR  CESDCRCT,0               Y-1
         LCR   CESDCRCT,CESDCRCT        Y-1 IN COMPLEMENT FORM
         AH    CESDCRCT,ENCDC      CESD ID OF LAST NON NULL LINE
         STH   CESDCRCT,ENCDC      SAVE NEW CESD CT
         BAL   RETURN,ADA02300          GO TO TEST CESD CT = 0
         L     BRANCH,ENTVCON           GO TO ENTRY PROCESSOR
         LA    13,SAVEREGS             ADDRESS OF SAVE AREA FOR ENT
         BALR  RETURN,BRANCH            (EXPECT ENT TO RETURN ALL REGS)
ADA00800 L     BRANCH,OUTVCON           GO TO OUTPUT PROCESSOR
         BALR  RETURN,BRANCH
***********************************************************************
*              TEST IF THIS IS A PSEUDO REGISTER                      *
*                                                                     *
***********************************************************************
ADA00850 CLI   TESTTYPE,X'06'          IS TYPE = PSEUDO REGISTER
         BC    7,ADA00400              NO / GO TO TEST END OF LOOP
***********************************************************************
*              CESD  TYPE = PSEUDO REGISTER
***********************************************************************
         SR    WORK1,WORK1
         IC    WORK1,12(CESDCRAD)       PSEUDO REGISTER ALIGNMENT
         LCR   WORK2,WORK1              2S COMPLEMENT OF ALIGNMENT
         BCTR  WORK2,0                  IS COMPLEMENT OF ALIGNMENT
         A     WORK1,PRAL          ADD PR LOC CTR TO ALIGNMENT
         NR    WORK1,WORK2              AND IS COMPLEMENT TO ADJUSTEDPR
         IC    WORK2,8(CESDCRAD)        SAVE TYPE
         ST    WORK1,8(CESDCRAD)        STORE PSEUDO REG NEW DISPLACMNT
         STC   WORK2,8(CESDCRAD)        RESTORE TYPE
         A     WORK1,12(CESDCRAD)       ADD PR LENGTH TO CULMULATIVE
         LA    WORK1,0(WORK1)           REMOVE HI BYTE GARBAGE
         ST    WORK1,PRAL          SAVE NEW CULMULATIVE TOTAL LGTH
         BC    15,ADA00400              BRANCH TO TEST END OF CESD LOOP
***********************************************************************
*              TYPE = ER - DETERMINE SUBTYPE -                        *
***********************************************************************
ADA00900 LA    RETURN,ADA00650          RETURN TO SAVE Y
         LA    TEMP2,ADA00910          ADD OF NULLIFY ROUT
*
         CLI   13(CESDCRAD),X'A0'      IS TYPE = ALIAS
         BCR   8,RETURN                YES - RETURN TO MAIN LOOP
*
         CLI   13(CESDCRAD),X'90'      IS TYPE = NULL
         BCR   11,TEMP2                GO TO NULLIFY CESD LINE
*
         CLI   13(CESDCRAD),X'04'      IS TYPE = NO CALL LOB MEMBER
         BCR   8,TEMP2                 YES - NULLIFY
*
         CLI   13(CESDCRAD),X'02'      IS TYPE = NULL
         BCR   8,TEMP2                 YES - NULLIFY
         XC    9(4,CESDCRAD),9(CESDCRAD) SET ADD AND SEG FIELD = 0
*
         CLI   13(CESDCRAD),X'06'       IS TYPE = NEVER CALL
         BC    8,ADA00904               YES / PRINT WARNING MESSAGE -ER
*              MATCHED LIB.MEM.(TYPE 03) ARE REGULAR ERS
         CLI   13(CESDCRAD),X'05'       IS TYPE = NO CALL MATCHED
         MVI   13(CESDCRAD),X'00'       SET TYPE 05 OR 03 = 00 -REG.ER
         BC    8,ADA00904               YES / PRINT WARNING MESSAGE -ER
*
         LH    ERRCODE,ERRPARM1         ER - ASSUME NO CALL OFF
         TM    APT0,X'80'          IS NO CALL OPTION = ON
         BC    8,ADA00905               NO - SEV 3 - EXEC ONLY IF LET
ADA00904 LH    ERRCODE,ERRPARM2         ER - NO CALL ON
ADA00905 LR    ERRSYMAD,CESDCRAD        ADDRESS OF SYMBOL OF ER
ADA00906 L     BRANCH,ERDIG        ADDRESS OF ERROR DIAGNOSTIC RT
         L     13,SAVE13           RESTORE ADDR. OF SAVE AREA
         BCR   15,BRANCH               GO TO ERROR ROUTINE - TYPE ER
*              NULL LINE
ADA00910 XC    0(16,CESDCRAD),0(CESDCRAD) NULLIFY LINE
         MVI   8(CESDCRAD),X'07'       SET NULL TYPE
         BC    15,ADA00700              RETURN TO TEST END OF LOOP
***********************************************************************
*              TEST IF CURRENT NO SEGMENTS IS GTR THAN 1/ NO ERROR    *
*              SET PROGRAM TO NOT IN OVERLAY                          *
***********************************************************************
ADA01000 LH    CSLGTH,CSNO         CURRENT NUMBER OF SEGMENTS
         BCT   CSLGTH,ADA01050          BRANCH IF CURRNO SEG GTR 1
         NI    PDSE7,OVLYOFF       SET PROG TO NOT IN OVERLAY
         LH    ERRCODE,ERRPARM5         LOAD ERR PARM - OVERLAY WARNING
         LA    RETURN,ADA00122          RETURN ADDRESS
         BC    15,ADA00906              GO TO GO TO ERROR ROUTINE
ADA01050 LA    CSLGTH,1(CSLGTH)         RESTORE CURRENT NO SEGMENTS
         SLL   CSLGTH,2                 MULTIPLY BY 4
         LA    CSLGTH,24(CSLGTH)        LENGTH OF SEGTAB
         L     WORK4,SEGLNTAB
         ST    CSLGTH,CONSTWK
         MVC   6(3,WORK4),CONSTWK+1     PUT SEGTAB LGTH IN SEGLGTH TBL
*                                       AT ENTRY PER SEGMENT 1
         MVC   PDSE10(2),CONSTWK+2  PUT LENGTH OF SEGTAB IN PDS
         SR    CSASADD,CSASADD          ASSEMBLED ADD OF SEGTAB = 0
         LA    CSSEGNO,1                SEGMENT NO = 1
         BAL   RETURN,ADA02500         GO TO PCB ROUT
*
         MVC   ENSPX(2),ENCDC      PUT ESDID IN PDS (SEGTAB)
         BC    15,ADA00122              GO TO SCAN CESD  (MAIN FLOW)
*
*
ADA01100 LA    CURSEGNO,1               INIT CURRENT SEGMENT =1
         L     SEGLGTH,SEGLNTAB    ADDRESS OF SEG LENGTH TABLE
         LR    WORK4,SEGLGTH            ADDRESS OF SEGLGTH
ADA01200 LA    SEGLGTH,6(SEGLGTH)       INC SEGMENT LG TBL ADD NXT ENTY
         L     WORK1,SGT1          ADDRESS OF SEGTAB1
         SR    WORK2,WORK2
         IC    WORK2,0(WORK1,CURSEGNO)  PICK UP PRV SEGMENT NO.
         LTR   WORK2,WORK2              IS PREVIOUS SEGMENT NO.= 0
         BC    2,ADA02400               NO
         LH    WORK3,CURRREGN           LOAD CURRENT REGION NO.
         ST    CURSEGNO,CONSTWK         CURR SEG NO
         LA    WORK2,LSTS(WORK3)   ADDR OF LAST SEG OG PRES REG
         CLC   CONSTWK+3(1),0(WORK2)    IS CURR SEG IN PRES REGION
         BC    13,ADA01300              YES
         LA    WORK3,1(WORK3)           INC CURRENT REG NO BY 1
         STH   WORK3,CURRREGN           SAVE CURR REG NO
         MVC   BGADDREG(4),HIADDREG     SET BEGIN ADDOF REG TO HIADDREG
ADA01300 L     WORK3,BGADDREG           LOAD BEGIN ADDRESS OF REGION
ADA01500 SR    WORK1,WORK1              SAVE SEGMENT (PATH) LENGTH
         IC    WORK1,3(SEGLGTH)         PICK UP FLAG BYTE FOR THIS SEG
         SR    WORK1,WORK3              3BITS OF AA - SEGLENGTH
         LA    WORK2,7
         NR    WORK1,WORK2              AND OUT ALL BUT LOW 3 BITS/DIFF
         AR    WORK3,WORK1              SEGMENT LENGTH NOW MODULO 8FLAG
         ST    WORK3,CONSTWK
         NI    CONSTWK+3,X'F8'          AND OUT LOW 3 BITS OF SEGMENTRC
         MVC   3(3,SEGLGTH),CONSTWK+1   PUT SEGMENT RC IN LST 3BYTSEGLG
         MVC   CONSTWK+1(3),0(SEGLGTH)  MOVE LENGTH OFTHIS SEGMENT
         MVI   CONSTWK,X'00'            SET HI BYTE OF LENGTH TO ZERO
         A     WORK3,CONSTWK            ADD LENGTH OF THIS SEG TO PTHTL
         ST    WORK3,CONSTWK            PUT UPDATED SEGMENT LENGTH IN
         MVC   0(3,SEGLGTH),CONSTWK+1   SEGLGTH TBL AT THIS SEG ENTRY
         CL    WORK3,HIADDREG           IS THIS ADD GTR THAN CURR HIADD
         BC    13,ADA01600              NO
         ST    WORK3,HIADDREG           YES SAVE NEW HI ADDRESS
ADA01600 LA    CURSEGNO,1(CURSEGNO)     INC CURRENT SEGMENT CT
         CH    CURSEGNO,CSNO       IS LOOP DONE
         BC    13,ADA01200              NO / CONTINUE LOOP
*
*              LOOP THROUGH CESD ADDING SEGMENT RC TO TLA OF (SD,PC,CM)
*                           AND TO TRC OF (SD,PC,CM)
         LA    CURSEGNO,1               INIT CURRENT SEG=1       S01904
         XC    CURRREGN(10),CURRREGN    CLEAR CURRENT REGION NO  S01904
         LH    WRKREG7,ENSPX            COUNT OF CESD ENTRIES    S01904
         OI    SWITCHH,4                SET SWITCHH TO 4         S01904
         L     SEGLGTH,SEGLNTAB         ADDR OF SEG LEN TABLE    S01904
         B     ADA01701                                          S01904
ADA0170A L     SEGLGTH,SEGLNTAB         ADDR OF SEG LEN TABLE    S01904
ADA0600A LH    WRKREG1,ORDRCUR          CUR NO OF BYTES IN ORDR TBL
         NI    SWITCHH,X'FB'                                     S01904
         LTR   WRKREG1,WRKREG1          ANY ENTRIES IN ORDR TBL  S01904
         BZ    ADA0700                  NO,BRANCH OUT            S01904
         OI    SWITCHH,1                INDICATE ORDER TBL LOOP  S01904
         L     WRKREGF,ORDRADR          ADDR OF ORDER TBL        S01904
         AR    WRKREG1,WRKREGF          ADDR OF LAST ENTRY IN ORDR
         LA    WRKREG0,3               TO BE COMPUTED            S01904
         SR    WRKREG1,WRKREG0          NOW IN REGISTER 1        S01904
ADA0600  TM    0(WRKREGF),X'A0'         MATCHED ENTRY TO BE ORDERED
         BNO   ADA0601                  NO,CONTINUE SEARCH       S01904
         MVC   IDSV(2),1(WRKREGF)       SAVE ESIDID FROM ORDR TABLE
         LH    WRKREG7,IDSV             PROCESS THIS ENTRY       S01904
         B     ADA01701                                          S01904
ADA0601  BXLE  WRKREGF,WRKREG0,ADA0600  CONTINUE LOOP            S01904
         NI    SWITCHH,X'FE'            RESET ORDR TBL LOOP INDICATOR
ADA0700  LH    WRKREG1,ENTOC            CURR NO OF BYTES IN TXTIO TBL
         LTR   WRKREG1,WRKREG1          ANY ENTRIES IN TXTIO TBL
         BZ    ADA0800                  NO,BRANCH OUT            S01904
         OI    SWITCHH,2                INDICATE TXTIO LOOP      S01904
         L     WRKREGF,TXTIO            GET ADDR OF TXTIO TBL    S01904
         AR    WRKREG1,WRKREGF          COMPUTE THE ADDR         S01904
         LA    WRKREG0,4                OF THE LAST ENTRY IN TXTIO
         SR    WRKREG1,WRKREG0          ADDR NOW IN REG ONE      S01904
ADA0701  LH    WRKREG7,0(WRKREGF)       GET ESDID FROM ENTRY     S01904
ADA01701 SLL   WRKREG7,4                LOCATE CORR ENTRY        S01904
         A     WRKREG7,CHESD            IN CESD TABLE.           S01904
         B     ADA01702                 PROCEED TO PROCESS ENTRY
ADA0702  BXLE  WRKREGF,WRKREG0,ADA0701  CONTINUE TXTIO PROCESS LOOP
         NI    SWITCHH,X'FD'            RESET TXTIO INDICATOR    S01904
ADA0800  L     CESDCRAD,CHESD      CESD ADDRESS
         LH    CESDCRCT,ENCDC      CESD CURRENT COUNT
ADA01700 LA    CESDCRAD,16(CESDCRAD)    INCREMENT CESD ADDRESS
ADA01702 TM    8(WRKREG7),8             WAS ENTRY PROCESSED      S01904
         BO    ADA02000                 YES,BRANCH OUT           S01904
         MVN   TESTTYPE(1),8(CESDCRAD)  MOVE TYPE FOR TESTING
         NI    TESTTYPE,X'F7'                                    S01904
         CLI   TESTTYPE,X'05'           IS TYPE = CM
         BC    8,ADA01750               YES
         TM    TESTTYPE,X'03'           IS TYPE NOT = SD,PC,(W/O RLDS)
         BC    5,ADA02000               NO  GO TO TEST END OF LOOP
ADA01750 SR    WORK1,WORK1
         IC    WORK1,12(CESDCRAD)       PICK UP SEG NO OF THIS CESD ID
         CR    WORK1,CURSEGNO           IS IT THE CURR SEG NO    S01904
         BNE   ADA02000                 NO,BRANCH OUT            S01904
         MH    WORK1,SIX                MULTIPLY BY 6
         AR    WORK1,SEGLGTH            ADD SEGLGTH ADD /POINTS   ENTRY
         MVI   CONSTWK,X'00'
         MVC   CONSTWK+1(3),3(WORK1)    MOVE SEGMENT RC TO CONSTWK
         L     WORK1,CONSTWK            LOAD SEGMENT RELOCATION CONST
         MVI   CONSTWK1,0                                        S01904
         A     WORK1,CONSTWK1                                    S01904
         LR    WORK2,WORK1              SAVE SEGMENT RC
         A     WORK2,8(CESDCRAD)        ADD TEMP LINKED ADD TO SEG RC
         BAL   WORK3,ADA0400            CHECK PAGE ALIGN         S01904
         IC    WORK3,8(CESDCRAD)        SAVE TYPE
         ST    WORK2,8(CESDCRAD)        STORE FINAL LINKED ADD
         STC   WORK3,8(CESDCRAD)        RESTORE TYPE
         LR    WORK2,CESDCRAD           SAVE CURRENT CESD ADD
         S     WORK2,CHESD         FIND RELATIVE CESD ADD
         SRL   WORK2,2                  FIND RELATIVE RCT (REL)ADD
         A     WORK2,RECNT         ADDRESS OF THIS RC ENTRY
ADA01800 A     WORK1,0(WORK2)           ADD TRC TO SEG RC
         ST    WORK1,0(WORK2)          PUT FINAL RC IN RCT
         TM    SWITCHH,X'07'                                     S01904
         BZ    ADA02000                                          S01904
         OI    8(WRKREG7),X'08'                                  S01904
ADA02000 TM    SWITCHH,1                                         S01904
         BO    ADA0601                                           S01904
         TM    SWITCHH,2                                         S01904
         BO    ADA0702                                           S01904
         TM    SWITCHH,4                                         S01904
         BO    ADA0600A                                          S01904
         CLI   8(WRKREG7),X'0A'         IS ENTRY A WEAK EXTN     S01904
         BE    ADA02001                 YES,SKIP RESET           S01904
         NI    8(WRKREG7),X'F7'         RESET PROCESSED BIT      S01904
ADA02001 BCT   CESDCRCT,ADA01700        BRANC IF LOOP NOT DONE   S01904
ADA0500  STM   WRKREG0,WRKREGF,BRNCHSV  SAVE REGISTERS           S01904
         LR    WRKREG1,CURSEGNO         GET CURRENT SEG NO       S01904
         MH    WRKREG1,SIX             COMPUTE ITS ENTRY ADDR    S01904
         A     WRKREG1,SEGLNTAB        IN THE SEG LEN TABLE      S01904
         MVC   CONSTWK+1(3),0(WRKREG1)  MOVE THE SEG LENGTH      S01904
         MVI   CONSTWK,0               ZERO OUT HI ORDER BYTE    S01904
         L     WRKREG0,CONSTWK         LOAD SEG LENGTH           S01904
         MVI   CONSTWK1,0                                        S01904
         A     WRKREG0,CONSTWK1        ADD                       S01904
         LR    WRKREG4,WRKREG0         USE NONZERO REG FOR INDXING
         LA    WRKREG0,7(WRKREG4)      FORCE ADDR TO NEXT HIGHER
         N     WRKREG0,ROUNDOFF        DOUBLEWORD BOUNDARY       S01904
         ST    WRKREG0,CONSTWK         SAVE                      S01904
         MVC   0(3,WRKREG1),CONSTWK+1   MOVE TO SEG LEN TBLE     S01904
         C     WRKREG0,HIRNADR2                                  S01904
         BNH   ADA500A                                           S01904
         ST    WRKREG0,HIRNADR2                                  S01904
ADA500A  XC    CONSTWK1(4),CONSTWK1                              S01904
         XR    WRKREGE,WRKREGE                                   S01904
         L     WRKREGF,SGT1                                      S01904
         LA    WRKREG3,1(CURSEGNO)                               S01904
         CH    WRKREG3,CSNO                                      S01904
         BNH   ADA0501                                           S01904
         LM    WRKREG0,WRKREGF,BRNCHSV   RESTORE REGS            S01904
         B     ADA504A                                           S01904
ADA0501  LH    WRKREG5,CURRREGN        GET CURR REGION NO        S01904
         LA    WRKREG6,LSTS(WRKREG5)                             S01904
         STC   CURSEGNO,SEGNOSV                                  S01904
         CLC   0(1,WRKREG6),SEGNOSV                              S01904
         BNE   ADA0501A                                          S01904
         MVC   HIRNADR1(4),HIRNADR2                              S01904
         LA    WRKREG5,1(WRKREG5)                                S01904
         STH   WRKREG5,CURRREGN                                  S01904
ADA0501A IC    WRKREG3,0(WRKREG3,WRKREGF)  GET CUR SEG LOC IN OVLY TREE
         LTR   WRKREG3,WRKREG3         IS IT ZERO?               S01904
         BZ    ADA0504                 YES,BRANCH OUT            S01904
         LR    WRKREG4,WRKREG3         COMPUTE CORR ENTRY ADDR   S01904
         MH    WRKREG4,SIX             IN THE SEG LEN TABLE      S01904
         A     WRKREG4,SEGLNTAB                                  S01904
         MVC   CONSTWK+1(3),0(WRKREG4) OBTAIN SEGMENT LENGTH     S01904
         L     WRKREGE,CONSTWK         LOAD INTO REGISTER        S01904
         B     ADA0504B                                          S01904
ADA0504  L     WRKREGE,HIRNADR1                                  S01904
ADA0504B LR    WRKREGB,WRKREGE                                   S01904
         MVC   CONSTWK+1(3),9(WRKREG1)                           S01904
         MVI   CONSTWK,0                                         S01904
         S     WRKREGB,CONSTWK                                   S01904
         MVC   CONSTWK+1(3),6(WRKREG1)                           S01904
         A     WRKREGB,CONSTWK                                   S01904
         ST    WRKREGB,CONSTWK                                   S01904
         MVC   6(3,WRKREG1),CONSTWK+1                            S01904
         ST    WRKREGE,CONSTWK                                   S01904
         MVC   9(3,WRKREG1),CONSTWK+1                            S01904
         LM    WRKREG0,WRKREGF,BRNCHSV                           S01904
         LA    CURSEGNO,1(CURSEGNO)                              S01904
         CH    CURSEGNO,CSNO                                     S01904
         BNH   ADA0170A                                          S01904
ADA504A  MVC   HIADDREG,HIRNADR2                                 S01904
         L     WORK1,HIADDREG          GET LENGTH OF LONGEST PATH
         LA    WORK1,7(WORK1)          ROUND UP TOTAL LENGTH TO
         N     WORK1,ROUNDOFF          NEXT DOUBLE WORD
         ST    WORK1,HIADDREG          SAVE FOR PDS DIRECTORY
         MVC   PDSE9(3),HIADDREG+1 PUT TOTAL CONTIGOUS CORE REQ
         BC    15,ADA00550              IN PDS / GO TO FINAL CESD LOOP
ADA02300 LH    CESDCRCT,ENCDC      CESD CURR CT
         LTR   CESDCRCT,CESDCRCT       IS CESD CURR CT = 0
         BCR   2,RETURN                N/ / GO TO CALLER
         L     BRANCH,ERDIG        ERROR RT ADDRESS
         LH    ERRCODE,ERRPARM3         CESD DOES NOT EXIST
         BALR  RETURN,BRANCH
         L     BRANCH,FNLVCON           ADD OF FINAL PROC
         BCR   15,BRANCH                GO TO FINAL PROC
ADA02400 MH    WORK2,SIX
         AR    WORK2,WORK4              ADDRESS OF A SEGLGTH ENTRY
         MVI   CONSTWK,X'00'
         MVC   CONSTWK+1(3),0(WORK2)    MOVE SEG LGTH OF PRVIOUS SEG.
         L     WORK3,CONSTWK
         LTR   WORK3,WORK3              IS PRV. SEGMENT LENGTH = 0
         BC    2,ADA01500               NO
         SR    WORK2,WORK2
         IC    WORK2,0(WORK1,CURSEGNO)  PICK UP PRVIOUS SEGMENT NO.
         IC    WORK2,0(WORK1,WORK2)     USING PRV.SEG.NO PICK UP ITSPRV
         STC   WORK2,0(WORK1,CURSEGNO)  PUT PRV.OF PRV AS PRV TO THIS 1
         BC    15,ADA02400              BRANCH TO GET SEG LENGTH OF
***********************************************************************
*              THE FOLLOWING BOX OF CODE WILL BE USED ON THE E LOADER *
*                        1) IT COMPUTES NO.BYTES OF ENTAB PER SEGMENT *
*                        2) IT MAKES AN ENTRY IN CESD FOR EACH SEGMENT*
*                   NOTE:  1) AND 2) ARE DONE ONLY IF A SEG HAS ENTAB *
*                                                                     *
         DROP  BASE
         USING HEWLCAD1,BRANCH
         DS    0F
HEWLCAD1 LR    TEMP1,BASE          SAVE BASE OF HEWLKENS
         L     BASE,BASADD             SET UP ADDRESSABILITY
         LR    TEMP2,RETURN        SAVE RETURN ADD OF HEWLKENS
         MH    ACUMZERO,TWELVE          CHANGE ENTAB LINES TO ENTAB
         LA    ACUMZERO,12(ACUMZERO)    BYTES
         C     ACUMZERO,MULTSIZE       IS ENTAB  G.T. MULTIPLICITY
         BC    2,ENTABERR    YES GIVE TERMINAL ERROR MESSAGE
         CH    ACUMZERO,FOUR096        IS ENTAB G.T. ABSOLUTE MAX.
         BC    2,ENTABERR     YES, GIVE TERMINAL ERROR MESSAGE
         SR    CSASADD,CSASADD          ADDRESS OF THIS ENTAB = 0
         LR    CSLGTH,ACUMZERO          LENGTH OF THIS ENTAB (BYTES)
         LR    CSSEGNO,CURSEGNO         SEGMENT NO OF THIS ENTAB
         BAL   RETURN,ADA02500         GO TO PCB ROUTINE
         LR    BASE,TEMP1          RESTORE BASE OF HEWLKENS
         LR    RETURN,TEMP2        RESTORE RETURN ADD OF HEWLKENS
         BCR   15,RETURN               RETURN TO ENS
ENTABERR LH    ERRCODE,ERRPARM7        SET UP FOR 454 MESSAGE
         BC    15,ADA02600+4       GO TO GIVE MSG AND TERMINATE
BASADD   DC    A(ADA00100+2)       ADDRESS OF HEWLKADA+2
         DROP  BRANCH
         USING ADA00100+2,BASE
***********************************************************************
*
*              PCB  - PRIVATE CODE ENTRY BUILDING
*
*                                                                     *
*                   REQUIRED REGISTERS & PARAMETERS                   *
*                        CESDADD (11)  WORK REGISTER                  *
*                        APT      (2)- ADDRESS OF APT                 *
*                        CSLGTH        CONTROL SECTION LENGTH         *
*                        CSSEGNO       CONTROL SECTION SEGMENT NO.    *
*                        CSASADD       CONTROL SECTION ASSIGNED ADD   *
*                        BASE    (12)  BASE REGISTER                  *
*                        RETURN  (14)                                 *
*
*              REGISTERS
*
CESDADD  EQU   11
ERRADD   EQU   15
*              APT  DISPLACEMENTS
*              DATA CONSTANTS  AND TEMPORARY STORAGE
PCDELETE EQU   X'14'                    CESD TYPE PC MARKED DELETE
ADA02500 LH    CESDADD,ENCDC       CURRENT NO CESD ENTRIES
         LA    CESDADD,1(CESDADD)       INC CESD CURRENT CT
ADA02510 CH    CESDADD,ENCDX       IS CESD FULL
         BL    ADA02520                NO,BRANCH OUT             S01904
         TM    APT4,REALOCTE           CAN REALLOC BE DONE       S01904
         BO    ADA02600                NO,SIGNAL OVERFLOW        S01904
         STM   WRKREG0,WRKREGF,BRNCHSV    SAVE REGISTERS         S01904
         L     WRKREGF,ERDIGA          ADDR OF REALOC RTN        S01904
         BALR  WRKREGE,WRKREGF         GO TO REALOC RTN          S01904
         LM    WRKREG0,WRKREGF,BRNCHSV RESTORE REGISTERS         S01904
         B     ADA02510                RESUME CHECK              S01904
ADA02520 STH   CESDADD,ENCDC            INCR CUR CESD COUNT
ADA02550 SLL   CESDADD,4                LOCATE NEXT AVAIL ENTRY
         A     CESDADD,CHESD            ADD BEGIN ADDR OF CESD TBL
         MVI   0(CESDADD),X'40'         MOVE BLANKS FOR SYMBOL
         MVC   1(7,CESDADD),0(CESDADD)   IN AVAIL ENTRY
         ST    CSASADD,8(CESDADD)       STORE CS ASSIGNED ADDR
         MVI   8(CESDADD),PCDELETE      INDICATE PC DELETE TYPE
         ST    CSLGTH,12(CESDADD)       STORE LENGTH OF CSECT
         STC   CSSEGNO,12(CESDADD)      STORE CURR SEG NO
         BCR   15,RETURN                RETURN TO CALLING RTN
ADA02600 LH    ERRCODE,ERRPARM4         CESD OVERFLOW
         L     ERRADD,ERDIG
         BCR   15,ERRADD
***********************************************************************
*                                 TEMPORARY  ERROR  PARMS             *
***********************************************************************
DISP1    EQU   X'22'                    DISP = 2   SEV = 2   NCAL  OFF
DISP2    EQU   X'21'                    DISP = 2   SEV = 1   NCAL  ON
DISP3    EQU   X'03'                    DISP = 0   SEV = 3   NO
DISP4    EQU   X'04'
DISP5    EQU   X'01'                   DISP = 0     SEV = 1
DISP6    EQU   X'02'                   DISP = 0    SEV = 2
*
*              MESSAGE NUMBERS ARE DECIMAL
*
MESS1    EQU   13                       UNRESOLVED ER   NCALL OFF
MESS2    EQU   46                       UNRESOLVED ER   NCALL ON
MESS3    EQU   12                       NO CESD
MESS4    EQU   25                       CESD OVERFLOW
MESS5    EQU   20     ONLY 1 SEGMENT IN AN OVERLAY STRUCTURE
MESS6    EQU   19     OUTPUT LOAD MODULE GREATER THAN 512K
MESS7    EQU   45     ENTAB GREATER THAN MULT SIZE OR 4K
*                     TOO MANY DOWNWARD CALLS FROM SEGMENT
MESS8    EQU   38     ID FOR TEXT IN TXTIOT IS NOT SD,PC, OR CM
         DS    0F
         EXTRN HEWLFLDB
SYSLIBAD DC    A(HEWLFLDB)    SYSLIB DCB ADDRESS
ERRPARM1 DC    AL1(DISP1)               UNRESOLVED XTERNAL REFERENCE
         DC    AL1(MESS1)               SEV =2  - NCALL OFF
*
ERRPARM2 DC    AL1(DISP2)               UNRESOLVED XTERNAL REF
         DC    AL1(MESS2)         SEV=1 - NCAL ON
*
ERRPARM3 DC    AL1(DISP3)               NO CESD
         DC    AL1(MESS3)               SEV = 3
*
ERRPARM4 DC    AL1(DISP4)               CESD  OVERFLOW
         DC    AL1(MESS4)
*
ERRPARM5 DC    AL1(DISP5)              ONLY 1 SEGMENT IN AN OVERLAY
         DC    AL1(MESS5)              PROGRAM - OVERLAY OPTION
*                                      CANCELLED
*
ERRPARM7  DC   AL1(DISP4)              ENTAB HAS EXCEEDED MULTIPLICITY
         DC    AL1(MESS7)              SIZE OR THE MAX. OF 4K.
*                                      TOO MANY DOWNWARD CALLS IN SEG.
*
ERRPARM8 DC    AL1(DISP6)              ID IN TXTIOT IS NOT SD, OR PC
         DC    AL1(MESS8)              INVALID ID MESSAGE ISSUED
*
*              MASKS & CONSTANTS
*
OUTVCON  DC    V(HEWLFOUT)    ADD OF OUTPRO
ENSVCON  DC    V(HEWLFENS)    ADDRESS OF ENTAB SIZE DETERMINATION
ENTVCON  DC    V(HEWLFENT)    ADDRESS OF ENTRY PROCESSOR
FNLVCON  DC    V(HEWLFFNL)    ADDRESS OF FINAL PROCESSOR
CONSTWK  DC    F'0'                     WORK WORD
SIX      DC    H'6'                     VALUE OF 6
CLRLAST  XC    0(0,TEMP1),0(TEMP1)  INSTRUCTION FOR CLEARING TABLES
CONST256 DC    F'256'              USED FOR CLEARING TABLES
SIZSAVE  DC    F'0'                    AREA FOR MANIPULATING PGM SIZE
ROUNDOFF DC    X'FFFFFFF8'             MASK FOR ROUNDING TO NEXT
*                                      DOUBLE WORD
SAVE13   DS    1F
INC      EQU   4       NUMBRR OF BYTES/ENTRY ON TXTIOT
***********************************************************************
*              HIADDREG,BGADDREG,CURREGN,NCESDCT MUST BE IN THE CONTIG*
*              UOUS ORDER - THEY ARE REFERENCED AS A BLOCK            *
***********************************************************************
HIADDREG DC    F'0'                     PRESENT HIGH ADDRESS OF THISREG
BGADDREG DC    F'0'                          PRESENT BEGIN ADDR OF REG
NCESDCT  DS    H                        Y - USED TO RECORD CESD CURR CT
CURRREGN DC    H'0'                     CURRENT REGION NUMBER
HIRNADR1 DC    F'0'
HIRNADR2 DC    F'0'
TWELVE   DC    H'12'
         DS    0F
***********************************************************************
TESTTYPE DC    X'00'                    USED FOR TESTING ESD TYPES
*                                       HI 4 BITS= 0,LOW 4 BITS FORTYPE
FOUR096  DC    H'4096'                 CONSTANT OF 4K
SEGLNTAB DS    F         ADDRESS OF SEGMENT LENGTH TABLE
*     TABLE ALSO USED BY HEWLFOUT FOR HI ID'S
         DS    50F
SAVEREGS DS    16F
         EJECT
*********************************************************************
*                                                                    *
*********************************************************************
ADA0400  TM    APT4,PAGEE         WAS PAGE ALIGN REQUESTED       S01904
         BCR   8,WORK3            NO,RETURN TO CALLING RTN       S01904
         STM   WRKREGE,WRKREG1,BRNCHSV SAVE REGISTERS            S01904
         LH    WRKREG1,ORDRCUR    OBTAIN CUR NO OF BYTES IN ORDR TBL
         LTR   WRKREG1,WRKREG1    ARE THERE ANY ENTRIES?         S01904
         BZ    ADA0405            NO,BRANCH OUT AND EXIT         S01904
         L     WRKREGE,ORDRADR    GET BEGIN ADDR OF ORDER TBL    S01904
         AR    WRKREG1,WRKREGE    COMPUTE ADDR OF LAST ENTRY     S01904
         LA    WRKREG0,3          IN THE ORDER TABLE             S01904
         SR    WRKREG1,WRKREG0    WRKREG1 NOW HAS THE ADDR       S01904
         LR    WRKREGF,WRKREG7    GET CESD ENTRY ADDR            S01904
         S     WRKREGF,CHESD      SUBTRACT FROM CESD TBL ADDR    S01904
         SRL   WRKREGF,4          AND DIVIDE BY 16               S01904
         STH   WRKREGF,IDSV       TO OBTAIN ESDID.               S01904
ADA0402  CLC   IDSV(2),1(WRKREGE) MATCH WITH ORDER TABLE ENTRY?  S01904
         BNE   ADA0406            NO,CONTINUE                    S01904
         TM    0(WRKREGE),X'10'   IS ENTRY FOR PAGE ALIGNMENT?   S01904
         BZ    ADA0405            NO,BRANCH OUT AND EXIT         S01904
         TM    APT4,ALIGN2        ALIGNMENT FOR 2K-BOUNDARY      S01904
         BO    ADA0403            YES,BRANCH OUT FOR 2K-ALIGNMENT
         LA    WRKREGF,X'FFF'(WORK2)   ALIGN TLA                 S01904
         N     WRKREGF,HEX1000    ON 4K-BOUNDARY                 S01904
         B     ADA0404                                           S01904
ADA0403  LA    WRKREGF,X'7FF'(WORK2)   ALIGN TLA                 S01904
         N     WRKREGF,HEX800     ON 2K-BOUNDARY                 S01904
ADA0404  LR    WRKREGE,WRKREGF    SAVE ALIGNED TLA               S01904
         SR    WRKREGF,WORK2      CHECK IF ALIGNMENT CAUSED DISPLMENT
         BZ    ADA0405            NO,EXIT                        S01904
         TM    PDSE7,OVRLAYBT     PROCESS INVOLVES OVLY STRUCTURES?
         BZ    ADA0405A           NO,BRANCH OUT                  S01904
         AR    WORK1,WRKREGF                                     S01904
         LA    WORK1,0(WORK1)                                    S01904
         A     WRKREGF,CONSTWK1   ACCUM INCREMENTS WITHIN SEGMENT
         LA    WRKREGF,0(WRKREGF) REMOVE HI ORDER BYTE           S01904
         ST    WRKREGF,CONSTWK1   SAVE ACCUM INCREMENT           S01904
ADA0405A LR    WORK2,WRKREGE                                     S01904
ADA0405  LM    WRKREGE,WRKREG1,BRNCHSV  RESTORE REGISTERS        S01904
         BR    WORK3              RETURN                         S01904
ADA0406  BXLE  WRKREGE,WRKREG0,ADA0402  CONTINUE SEARCH          S01904
         B     ADA0405                 SEARCH DONE               S01904
*********************************************************************
CONSTWK1 DC    F'0'
HEX1000  DC    X'FFFFF000'
HEX800   DC    X'FFFFF800'
IDSV     DC    H'0'
TYPESV   DC    H'0'
ERRCDDE  DC    X'2240'
SWITCHH  DC    X'0'
SEGNOSV  EQU   IDSV
WRKREG0  EQU   0
WRKREG1  EQU   1
WRKREG2  EQU   2
WRKREG3  EQU   3
WRKREG4  EQU   4
WRKREG5  EQU   5
WRKREG6  EQU   6
WRKREG7  EQU   7
WRKREG8  EQU   8
WRKREG9  EQU   9
WRKREGA  EQU   10
WRKREGB  EQU   11
WRKREGC  EQU   12
WRKREGD  EQU   13
WRKREGE  EQU   14
WRKREGF  EQU   15
O        EQU   0
I        EQU   1
VIII     EQU   8
***********************************************************************
*                                                                     *
***********************************************************************
         HEWAPT
         END
