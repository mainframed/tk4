         TITLE 'HEWLFINT - LINKAGE EDITOR   ** INITIALIZER **'
HEWLFINT CSECT
**********************************************************************
*154000-156500,164600-164700,171100-171440,458600-458700         S21016
*458800-458998                                                   S21016
*062600-062700,070100-070200,077600,153700,178100,333500-333900  S01904
*412500-413500,458720-458740                                     S01904
*070300-070420,153220,153800,542100                              Y01048
*046000,527500                                                   A47001
*093500                                                           M2199
*A146500                                SA51444
*C415500                                SA51436
*C123500,A275000,C277000-277500,C494000-502000                  SA47971
*D503000,C503500                                                SA47971
*A064500,C117700,A120500,C151000,A151000,D514100-514200,        SA49330
*A515000,C515500,A515500,A543500                                SA49330
*D121500-122000                                                 OY00129
*D009158,A009372-009376,A494600-494700,A495600-495700           OX00127
*A314600-314800,A316000-318000,D316000-320500,A334600           OY00338
*D064600,A064600-064920,C120540,A120560-120980,D151000-151100   OY00130
*D151300-151666,I528600-528900,D543600-543700,A543600-543740    OY00130
*A117720,C117750,C117800,D118000                                OY00136
*C515420-515440                                                 OY00227
*D063500-064000,D117600-117650,C399500-402000,D402500-403500    OY00359
*C405500-406000,C413500                                         OY00359
*C499500,A500100-500440,A500600-501000                           YM5584
*C155500-156000                                                  XM1641
*A440600                                                         XM5473
*A458944-458956                                                 OX04245
*I496000                                                OX03511,OY03041
*I146500                                                OX03507,0Y03040
*I064920,I515600,D516200                                OX04281,OY03412
*C333701                                              @ZA04726,@YA09265
*C449000                                                       @ZA05444
*C515120                                                       @ZA07598
*C495500                                                       @ZA07605
*A21951000-21953000      SYSPRINT BLOCKING                     @ZA16058
*C117500,117700,495700,499000,499200 D493500 A499100,499500    @ZA33269
       EJECT
**********************************************************************
         USING HEWLFINT,SYSBRNCH
* STATUS CHANGE LEVEL - 002     DATE - 01/19/73
*
*FUNCTION/OPERATION: THIS MODULE IS THE SECOND TO BE ENTERED IN THE   *
*      LINK EDITOR. IT OPENS THE FOLLOWING DDNAMES- SYSLMOD,SYSLIN,   *
*      AND SYSPRINT.  IT THEN ALLOCATES STORAGE TO LINK EDITOR        *
*      TABLES DEPENDENT UPON THE STORAGE AVAILABLE AT THE TIME.       *
*      IT CLEARS OUT THE ALL PURPOSE TABLE AND THE TABLE AREA WHICH   *
*      IT ALLOCATES. IT SETS UP THE PDS DIRECTORY INDICATORS TO       *
*      THEIR INITIAL VALUES.                                          *
*      IF THE NAME CARD IS USED, IT WILL RE-INITIALIZE FOR A NEW      *
*      RECURSION THROUGH LINK EDITOR.                                 *
*                                                                     *
*                                                                     *
*ENTRY POINTS  HEWLFINT - BEGINNING OF  LINK EDITOR  LA REG13,SAVEAREA*
*                                                    L  REG1,POINTER  *
*                                                      TO LIST        *
*                                                    BALR 14,15       *
*              HEWLENAM - RECURSIVE ENTRY FOR SECOND LINK EDIT        *
*                                                    BCR 15,15        *
*                                                                     *
*                                                                     *
*INPUT:  THE ADDRESS OF A PARAMETER LIST IS PASSED FROM INITIATOR IN  *
*        REGISTER ONE. THE LIST CONTAINS THE ADDRESS OF THE           *
*        PARAMETER BYTE COUNT AND POSSIBLY THE ADDRESS OF A LIST      *
*        OF DDNAMES                                                   *
*        THE FIRST IS USED TO OBTAIN THE PARM FIELD OF THE            *
*        EXECUTE CARD. THE BYTE COUNT IDENTIFIES THE NUMBER OF BYTES  *
*        OF PARM INFORMATION WHICH FOLLOWS.                           *
*                                                                     *
*                                                                     *
*OUTPUT: THE ADDRESSES AND MAXIMUM ENTRY COUNTS FOR ALL LINK EDITOR   *
*        VARIABLE TABLES                                              *
*                                                                     *
*                                                                     *
*EXTERNAL ROUTINES  HEWLFLOG- WRITE ERROR CODE
*                   HEWLFOPT- PROCESSES PARM FIELD OF EXEC CARD
*                                                                     *
*                                                                     *
*EXITS-NORMAL   AFTER INITIALIZATION IS COMPLETE, TO HEWLFINP TO      *
*               INITIATE PROCESSING                                   *
*                                                                     *
*EXITS-ERROR: IF A DDNAME CANNOT BE OPENED ERROR 28,SEVERITY 4 IS     *
*             PASSED TO HEWLFLOG.                                     *
*             IF THE MINIMUM CORE CANNOT BE OBTAINED, ERROR 29,       *
*             SEVERITY 4 IS PASSED TO HEWLFLOG.                       *
*                                                                     *
*TABLES/WORK AREAS:
*                                                                     *
*        TABLE IS USED BY THE ALLOCATOR ROUTINE TO ASSIGN AREAS IN    *
*        GOTTEN STORAGE TO THE VARIABLE TABLES OF THE PROGRAM.        *
*        EACH ENTRY CONTAINS 8 SWITCHES IN ONE BYTE DENOTING, FOR     *
*        EXAMPLE, WHICH PASSES USE THE TABLE; AN INCREMENT TO WHICH   *
*        156 MUST BE ADDED TO DETERMINE THE ADDRESS IN THE ALL PURPOSE*
*        TABLE AT WHICH THE DETERMINED ADDRESS OF THE TABLE IS TO BE  *
*        STORED; A SIMILAR INCREMENT FOR THE NUMBER OF ENTRIES IN THE *
*        TABLE; THE NUMBER OF BYTES IN EACH ENTRY OF THE TABLE;       *
*        THE WEIGHT FACTOR OF THE TABLE FOR PURPOSES OF EXPANSION;    *
*        AND THE MINIMUM SIZE OF THE TABLE.
*                                                                     *
*ATTRIBUTES: REUSABLE                                                 *
*                                                                     *
*NOTES: N/A                                                           *
*                                                                     *
DDNAME   EQU   40
         EXTRN HEWLFAPT
         EXTRN APTEXLST
         EXTRN HEWLCSDB
         EXTRN HEWLCMDB
         EXTRN HEWLCUDB
         EXTRN HEWLCPDB
         EXTRN HEWLTMDB
         ENTRY HEWLENAM
         ENTRY HEWLXIT2                SYSLMOD OPEN EXIT
         EXTRN APTXLIST                SYSLMOD EXIT LIST
         ENTRY MAINGOT
         EXTRN     ENQNAME
         EXTRN     MINOR
         EXTRN     INDDNAME                                      A47001
         ENTRY MSGFOUR
DDNAMEOF EQU   40
BASE     EQU   12
REG1     EQU   1
SYSBRNCH EQU   15
REG3     EQU   3
REG4     EQU   4
LEN4     EQU   4             REG 4 FOR SYSLMOD ADJUST SIZE
REG7     EQU   7
REG8     EQU   8
REG11    EQU   11
REG10    EQU   10
REG5     EQU   5
LEN5     EQU   5             REG 5 FOR TEXT BUFFER ADJUST USE
ZERO     EQU   0
REG13    EQU   13
REG14    EQU   14
REG9     EQU   9
OPENBIT  EQU   X'10'
OPENFLAG EQU   48
SYSRET   EQU   14
LEN6     EQU   6
SYSTERM  EQU   5
SYSPRINT EQU   6
TCBTSTSK EQU   X'80'       TIME SHARING FLAG IN TCBTSFLG FIELD
SYSLIN   EQU   7
SYSLMOD  EQU   8
SYSUT1   EQU   9
TERMOFF  EQU   X'FD'                   TERM OPTION TURNED OFF
TSO      EQU   X'80'                   TSO SWITCH IN APTSWS
TERM     EQU   X'02'                   TERM SWITCH IN NEWSW
SNGLIN   EQU   X'01'                   SWITCH FOR 1 LINE OF OPTS.
DCBS     EQU   X'10'                   DCBS SWITCH
AOSLE    EQU   X'80'                   PDSE12, RUN UNDER AOS     S01904
THREE    EQU   3                       LENGTH OF THREE BYTES     S01904
APT      EQU   2
REG15    EQU   15
TIOTPTR  EQU   14                       POINTER TO TIOT         OY00130
UCBPTR   EQU   TIOTPTR                  POINTER TO UCB          OY00130
LNTHDD   EQU   15                       LENGTH OF DD ENTRY      OY00130
BINNO    EQU   LNTHDD                   BIN NUMBER (2321)       OY00130
D2321    EQU   X'05'                    CODE FOR 2321 DEVICE    OY00130
STOWBIT  EQU   X'80'                   STOW DONE FLG    OX04281,OY03412
CIND2    EQU   X'3D'                   FLG DISP IN DCB  OX04281,OY03412
         EJECT
         STM   14,12,12(REG13)
*              SAVE CALLERS REGISTERS                                 *
        BALR  BASE,0
         USING *,BASE
         BC    15,OVERNAME         TO AVOID THE NAME IDENTIFIER
DATE     DC    C'&SYSDATE OZ33269'  DATE/APAR NUMBER
         DC    C'HEWLFINT',0H'0'    MOD ID
         EJECT
OVERNAME L     APT,APTADD
*              LOAD REGISTER 2 WITH APT ADDRESS                       *
         USING APTDSECT,APT        ESTABLISH ADDRESSABILITY WITH APT
         USING DEFDSECT,RWORK2
         XC    PDSE12(THREE),PDSE12    ZERO OUT SWITCHES         S01904
         OI    PDSE12,AOSLE            BIT FOR AOS LKED          S01904
         OI    PDSE12,PDSAPFLG         SET AUTH CODE BIT         Y01048
         MVC   PDSAPF,APFINIT          INITIALIZE AUTHORIZATION  Y01048
         MVC   APTAPF,APFINIT          CODES-LGTH=1,CODE=0       Y01048
         STM   13,14,SYSRTN
*              SAVE SYSTEM RETURN AND SAVE AREA ADDRESS               *
         LA    REG13,REGSA         LOAD REG13 WITH ADDRESS OF
*                                       SAVE AREA                     *
         XC    HISEV(2),HISEV CLEAR THE HI SEVERITY CODE
         NI    SWITCH,X'00'        TURN OFF ALL BIT SWITCHES
         L     REG3,0(0,REG1)                COMPUTE THE ADDRESS OF THE
         LA    REG3,0(0,REG3)                BYTE COUNT FOR ATTRIBUTES
         ST    REG1,REGSAVE1      SAVE PARM REG
         LR    REG1,REG3
         NI    PDSE7,ZERO
         NI    PDSE8,ZERO
         OI    PDSE8,X'82'   SET 44K LE BIT ON AND DC OPT OFF
         NI    APT0,ZERO
         NI    APTSWS,SWSINIT          INITIALIZE
*                                      BIT 0 & 2-4
         NI    APT4,ZERO               INITIALIZE APT4          S01904
         L     SYSBRNCH,ATOPTADD
         BALR  SYSRET,SYSBRNCH
CONTIN   L     REG1,REGSAVE1
         LM    SYSTERM,SYSUT1,DCBADRS1
*              MOVE STANDARD DDNAMES                                  *
         MVC   DDNAMEOF(8,SYSLIN),SYSLINNM   MOVE SYSLIN DDNAME
         MVC   DDNAMEOF(8,SYSLMOD),SYSLMDNM  MOVE SYSLMOD DDNAME
         MVC   DDNAMEOF(8,SYSUT1),SYSUT1NM   MOVE SYSUT1 DDNAME
         MVC   DDNAMEOF(8,SYSPRINT),SYSPRTNM MOVE SYSPRINT DDNAME
         MVC   DDNAMEOF(8,SYSTERM),SYSTRMNM  MOVE SYSTERM DDNAME
         MVC   LIBNAME(8),SYSLIBNM MOVE SYSLIB DD NAME
         TM    0(REG1),X'80'            ARE DDNAMES PASSED
         BC    1,INT20                  NO- BRANCH
         L     REG3,4(0,REG1)           ADDRESS OF DDNAMES BYTECOUNT
         NI    1(REG3),X'F8'      ROUND COUNT MODULO 8
         LH    REG4,0(0,REG3)           BYTE COUNT OF DDNAMES IN REG4
         LTR   REG4,REG4                ARE DDNAMES PASSED
         BC    8,INT20                  NO-BRANCH
         LA    REG3,2(REG3)             ADDRESS OF DDNAMES
         EXTRACT  INITEXAD,'S',FIELDS=(TSO)  TEST IF TSO
         ST    REG4,XTRTSAVE       SAVE REG.4
         L     REG4,INITEXAD         GET @ OF TSO FIELD
         LTR   REG4,REG4             WAS TSO DEFINED
         BZ    TSO2                  NO. BRANCH
         TM    0(REG4),TCBTSTSK      YES. IS IT TS TASK
         BNO   TSO2                  NO. DONT SET TSO FLAG
         OI    APTSWS,TSO            TURN ON TSO FLAG
TSO2     L     REG4,XTRTSAVE         RESTORE REG4
         LA    SYSBRNCH,TEST         @ OF DDNAME TEST
         LA    REG4,0(REG3,REG4)        REG4 CONTAINS END ADDRESS
         BALR  SYSRET,SYSBRNCH          TEST DDNAME
         MVC   DDNAMEOF(8,SYSLIN),0(REG3) MOVE SYSLIN DDNAME
         L     REG10,INDDNMAD       GET SYSLIN DDNAME SAVAREA     M2199
         MVC   0(8,REG10),0(REG3)   SAVE SYSLIN DDNAME            M2199
         LA    REG3,8(REG3)             INCREMENT COUNT
         CLR   REG3,REG4                IS LOOP DONE
         BC    11,INT20                 YES-BRANCH
         BALR  SYSRET,SYSBRNCH          TEST MEMBER NAME
         BC    15,INT19                 BRANCH TO SET MEMBER NAME BIT
         BCR   0,0                      PADDING
INT01    LA    REG3,8(REG3)             INCREMENT COUNT
         CLR   REG3,REG4                IS LOOP DONE
         BC    11,INT20                 YES-BRANCH
         BALR  SYSRET,SYSBRNCH          TEST DDNAME
         MVC   DDNAMEOF(8,SYSLMOD),0(REG3) MOVE SYSLMOD DDNAME
         BALR  SYSRET,SYSBRNCH     DO IT AGAIN
         MVC   ACTVLMOD(8),0(REG3) SAVE ACTIVE LMOD DDNAME
         LA    REG3,8(REG3)             INCREMENT COUNT
         CLR   REG3,REG4                IS LOOP DONE
         BC    11,INT20                 YES-BRANCH
         BALR  SYSRET,SYSBRNCH          TEST DDNAME
         MVC   LIBNAME(8),0(REG3)  MOVE SYSLIB DDNAME
         LA    REG3,16(REG3)            INCREMENT COUNT
         CLR   REG3,REG4                IS LOOP DONE
         BC    11,INT20                 YES-BRANCH
         BALR  SYSRET,SYSBRNCH          TEST DDNAME
         MVC   DDNAMEOF(8,SYSPRINT),0(REG3) MOVE SYSPRINT DDNAME
         LA    REG3,16(REG3)            INCREMENT COUNT
         CLR   REG3,REG4                IS TABLE DONE
         BC    11,INT20                 YES-BRANCH
         BALR  SYSRET,SYSBRNCH          TEST DDNAME
         MVC   DDNAMEOF(8,SYSUT1),0(REG3)  MOVE SYSUT1 DDNAME
         BALR  SYSRET,SYSBRNCH     DO IT AGAIN
         MVC   ACTVUT1(8),0(REG3)  SAVE ACTIVE UT1 DDNAME
         LA    REG3,32(REG3)       INCREMENT ADDRESS
         CLR   REG3,REG4           LOOP DONE ?
         BC    11,INT20            YES - BRANCH
         BALR  SYSRET,SYSBRNCH     TEST DDNAME
         MVC   DDNAMEOF(8,SYSTERM),0(REG3)
         BC    15,INT20                 DONE
INT19    OI    APTEMP+8,X'80'     SET MEMBER NAME RECEIVED TEMP BIT
         MVC   APTEMP(8),0(REG3)  MOVE MEMBER NAME TO TEMP STORAGE
         BC    15,INT01                 BRANCH BACK IN-LINE
TEST     NC    0(8,REG3),0(REG3)        IS FIELD ZERO
         BC    8,6(SYSRET)              YES BRANCH TO 6 PLUS RETURN
         BCR   15,SYSRET                RETURN
INT20    DEVTYPE  ACTVLMOD,DEVSAVE   FIND SYSLMOD BLOCK SIZE
         MVC   EXITTEST(2),DEVMAXBS+2  SAVE IT FOR EXIT ROUTINE
         GETMAIN  EU,LV=200,A=MAINGOT
         L     1,ADDRIND
         MVC   5(3,1),MAINGOT+1
         RDJFCB MF=(E,DCBADRS2)
JFCBIND2 EQU   X'57'                   D'PLACEMENT IN JFCB     @ZA33269
         MVI   APTSW2,X'00'            TURN OFF FIRST BIT A49330,A37663
         L     1,MAINGOT               POINT TO JFCB            OY00136
         TM    JFCBIND2(REG1),X'08'    TEST IF DISP=SHR        @ZA33269
         BO    SKIPSET                 YES, DON'T ENQ           OY00136
         OI    APTSW2,ENQBIT           YES - TURN ON FIRST BIT   A37663
SKIPSET  EQU   *                                                 A37663
*  MOVES DSNAME TO MINOR NAME POSITION FOR ENQ
         ST    REG3,TEMP
         L     REG3,=V(MINOR)
         MVC   0(44,REG3),0(1)
         L     REG3,TEMP
         TM    DEVCODE+1,SHRSYSMD      IS SYSLMOD SHRD DASD     SA49330
         BZ    CHKENQ                  BRANCH IF ON             OY00130
         EXTRACT INITEXAD,'S',FIELDS=(TIOT)                     OY00130
*                                      GET TIOT POINTER
         L     TIOTPTR,ADDRTIOT        PICK UP TIOT ADDRESS     OY00130
         USING TIOT,TIOTPTR                                     OY00130
         SR    LNTHDD,LNTHDD           CLEAR DD LENGTH REG      OY00130
TIOTLP   CLI   TIOELNGH,X'00'          END OF TIOT REACHED      OY00130
         BE    SKIPENQ                 YES, LET OPEN CATCH IT   OY00130
         CLC   TIOEDDNM,ACTVLMOD       SYSLMOD ENTRY FOUND      OY00130
         BE    UCBPRCS                 YES, BRANCH TO PROCESS   OY00130
         IC    LNTHDD,TIOELNGH         GET LENGTH OF DD ENTRY   OY00130
         AR    TIOTPTR,LNTHDD          POINT TO NEXT DD ENTRY   OY00130
         B     TIOTLP                  REPEAT FOR NEXT ENTRY    OY00130
UCBPRCS  EQU   *                                                OY00130
         LA    REG4,TIOEFSRT-1         PICK UP PTR TO UCB PTR   OY00130
         DROP  TIOTPTR                                          OY00130
         OI    APTSW2,SHRSYSMD         INDICATE SHARED SYSLMOD  OY00130
         RESERVE (ENQNAME,MINOR,E,44,SYSTEMS),UCB=(REG4)        OY00130
*                                      RESERVE SYSLMOD DEVICE   OY00130
         B     SKIPENQ                 RETURN TO MAIN FLOW      OY00130
CHKENQ   EQU   *                       RESERVE BYPASS           OY00130
         TM    APTSW2,ENQBIT           DISP=OLD ON SYSLMOD?      A37663
         BO    SKIPENQ                 YES - DON'T ENQUEUE       A37663
         ENQ   (ENQNAME,MINOR,E,44,SYSTEM)
SKIPENQ  EQU   *                                                 A37663
         L     1,MAINGOT
         MVC   OVERRIDE(2),102(1)   SAVE OVER/RIDE
         XC    102(2,1),102(1)        CLEAN OUT JFCB            SA47971
         OPEN  MF=(E,DCBADRS2),TYPE=J
NOOR     FREEMAIN  E,LV=200,A=MAINGOT
         NI    APTSWS,X'EF'          TURN OFF OVER-RIDE SWITCH
         USING IHADCB,SYSPRINT
         MVC   PRNTNAME(8),DCBDDNAM
         MVC   NAMEDD(8),DCBDDNAM
         DROP  SYSPRINT
         DEVTYPE  PRNTNAME,ANSWER
         LTR   REG15,REG15
         BNZ   ABENT10            BRANCH IF DEVTYPE UNSUCCESSFUL
         TM    ANSWER+2,X'A0'
         BM    BLKGOK
         LA    REG15,MSG4
         ST    REG15,MSGFOUR
         MVI   MSGFOUR,49
***********************************************************************
*      OPEN   ((SYSPRINT),(OUTPUT),(SYSLIN),(INPUT),(OUTPUT))         *
***********************************************************************
BLKGOK   LA    1,DCBADRS4
         TM    NEWSW,TERM         TERM SPECIFIED?
         BZ    TSO3               NO - BRANCH
         LA    1,DCBADRS1
TSO3     OPEN  MF=(E,(1))          OPEN DATA SETS
         TM    OPENFLAG(SYSPRINT),OPENBIT
         BC    8,ABENT10
         TM    HEWLCWBB+24,X'04'       WAS ERROR DETECTED
         BC    1,ABENT2A               YES, BLKSIZE TOO LARGE
         TM    NEWSW,TERM              TERM OPTION SPECIFIED?
         BZ    TSO5                    NO - CONTINUE
         TM    OPENFLAG(SYSTERM),OPENBIT  OPEN ERROR?
         BC    1,TSO5                  NO - CONTINUE
         NI    NEWSW,TERMOFF           YES--TURN OFF TERM OPTION
TSO5     TM    OPENFLAG(SYSLIN),OPENBIT  OPEN ERROR?
         BC    1,INTSET
         OI    INTERN1,1
         MVC   DDSAV(8),DDNAME(SYSLIN)
INTSET   OI    OPENFLAG(SYSLIN),X'08'  TURN ON UNLIKE ATTRIBUTES
INT20A   BALR  BASE,0
         USING *,BASE
         OI    PDSE7,X'02'     SET EXECUTABLE BIT ON
         OI    PDSE8,X'70'     SET NO RLD 1 TXT BITS
         MVC   SAVATS(2),PDSE7     SAVE ATTRIBUTES
         MVC   SAVATS+2(1),APT0
         BCR   15,0
         MVI   SPACES,54           LINE COUNT IS 54 FIRST TIME
         BC    15,INT21
         DROP  BASE
HEWLENAM MVI   SPACES,1            LINE COUNT IS 1 SECOND TIME
         MVI   LIBOPEN,C' '            FORCE LIB REOPEN OX03507,OY03040
         OI    APTSW2,REINTRY           SET NOT FIRST TIME THRU SA51444
INT21    BALR  BASE,0
         USING *,BASE
         TM    INTERN1,1               OPEN ERROR
         BC    1,INT22                 YES BRANCH
         LA    REG13,REGSA         ADDRESS OF SAVE AREA
         OPEN  MF=(E,DCBADRS2)     OPEN SYSLMOD
         L     SYSLMOD,DCBADRS2        LOAD ADDR. OF SYSLMOD
INT21A   TM    OPENFLAG(SYSLMOD),OPENBIT
         BO    INT22                    BRANCH IF NOT           SA49330
         OI    INTERN1,1
         MVC   DDSAV(8),DDNAME(SYSLMOD)
INT22    EQU   *
         SPACE 1                                                 S21016
********** CLEAR ALL PORTIONS OF THE ALL PURPOSE TABLE **********S21016
**********     THAT ARE NOT INITIALIZED ELSEWHERE      **********S21016
         MVC   PDSAPF,APTAPF           REAL CODE=DEFAULT         Y01048
         XC    PDSE1(APT3-PDSE1),PDSE1 CLEAR PDSE1 TO APT3       S21016
         NI    APT3,X'01'                    CLEAR APT3 EXCLDG BIT 7
         OI    PDSE12,AOSLE            BIT FOR AOS LINKEDIT      AOSCD
         OI    PDSE12,PDSAPFLG         SET AUTH CODE BIT         Y01048
         XC    CTTR(SGT1-CTTR),CTTR    CLEAR CTTR TO SGT1        S21016
         XC    BITMAP(HISEV-BITMAP),BITMAP CLEAR BITMAP TO HISEV S21016
* DO NOT CLEAR THE HIGHEST SEVERITY CODE
         XC    INCBRKPT(ENRNX-INCBRKPT),INCBRKPT CLEAR INCBRKPT  XM1641
*                                                TO ENRNX        XM1641
         XC    ENSPX(ORDRMAX-ENSPX),ENSPX CLEAR ENSPX TO ORDRMAX S01904
         MVC   REGSA+5(3),SYSRTN+1 SAVE POINTER BACK
         LH    RWORK2,ENRNX           GET MAX ENTRIES IN RNT    OX02397
         STH   RWORK2,ENRNC           STORE IN CURRENT          OX02397
*                                     CURRENT MUST ALWAYS       OX02397
*                                     EQUAL MAX FOR RNT DUE TO  OX02397
*                                     LR PROCESSING             OX02397
         SPACE 2
R0       EQU   0
RPARAM   EQU   1                      PARAMETER REGISTER
RINDEX   EQU   3                      INDEX REGISTER
RWORK2   EQU   4                     WORK REGISTERS
RWORK3   EQU   5
RWORK4   EQU   6
RWORK5   EQU   7
RWORK9   EQU   9
NUMBGROS EQU   9                      NUMBER OF GROWS POSSIBLE
RWORK6   EQU   10
TABLLIST EQU   11                     GPR USED TO ADDRESS LIST OF TABLS
RBASE    EQU   12                     BASE REGISTER
RSAVE    EQU   13                     POINTER TO SAVE AREA
RRETURN  EQU   14                     RETURN REGISTER
RLINK    EQU   15                     LINKAGE REGISTER
PTRLEN   EQU   4                       LENGTH OF A FOUR-BYTE     S21016
*                                      ADCON FOR USE IN A MOVE   S21016
OVERBIT  EQU   X'20'                  BIT TESTED FOR OVERLAY
LOWZEROS EQU   X'07'                  TEST FOR DOUBLE
LOWZERO  EQU   X'03'                           SINGLE WORD ALIGNMENT
ENDFLAG  EQU   X'FF'                  END FLAG FOR LIST
SWITCHES EQU   0                      INCREMENT IN LIST ENTRY OF SWTCHS
OVERLAY  EQU   X'80'                  BIT DENOTING OVERLAY TABLE
FIRSTPAS EQU   X'40'                               FIRST PASS TABLE
INTERPAS EQU   X'20'                               INTERMED. PASS TABLE
SECONDPS EQU   X'10'                               SECOND PASS TABLE
DBLWORDB EQU   X'08'                               DBL WORD BOUNDARY
WORDBNDR EQU   X'04'                               SGL
CUTOFF   EQU   X'02'                               SPECIAL PROCESSING
ZERONTRY EQU   X'01'                               ZEROTH ENTRY PROV
SWSOFF   EQU   X'00'                   IMMEDIATE BYTE TO         S21016
*                                      INIALIZE A BYTE OF        S21016
*                                      SWITCHES TO ZEROES        S21016
SWSINIT  EQU   X'47'                   IMMEDIATE BYTE TO         S21016
*                                      INITIALIZE APTSWS BITS    S21016
*                                      0,2,3 & 4 TO ZEROES       S21016
ADDRINCR EQU   1                                         ADDR INCREMENT
ENTRINCR EQU   2                                         ENTR
BYTSENTR EQU   3                                         WEIGHT
WEIGHT   EQU   4                                         MINIMUM SIZE
MINSIZE  EQU   6
ENTRYSIZ EQU   8                      SIZE OF LIST ENTRY
DC       EQU   X'80'
FRSTIME  EQU   X'80'
HIAROPT  EQU   X'04'               HIARCHY BIT IN NEWSW IN APT
ERRORTN  EQU   X'DC'
BADLIN   EQU   X'43B'
         EJECT
         L     RWORK2,DEFVCON      FETCH ADDR OF HEWLFDEF
         L     REG1,VALUE1         FETCH MAX MAIN STOR AVAILABLE
         S     REG1,LLEGF64                                      S01904
PREPGM   EQU   *
         ST    REG1,MAXSTOR        AND PLACE IN GETMAIN MAX REQ
         MVC   TOTWT(8),NORMWT        SET
         TM    SAVATS,OVERBIT      TEST SAVED BIT FOR OVERLAY OPT
         BC    8,ALL001               NONE, CONTINUE
         MVC   TOTWT(8),OVLAYWT       YES, RESET PARAMETERS
         MVI   ALL010SW+1,X'00'      SET SWITCH TO KEEP OVERLAY TABLES
ALL001   EQU   *
         LH    RWORK2,DUMHRWT      FETCH DUMMY HIAR TABLE WEIGHT
         LH    REG10,DUMHRMN       FETCH DUMMY HIAR TABLE MIN BYTES
         TM    NEWSW,HIAROPT  TEST HIAR BIT
         BC    8,ALL002            NO, CONTINUE
         MVC   TOTWT(8),HIARWT     YES, RESET PARAMETERS
         LH    RWORK2,WEIGHTHR     FETCH TRUE HIAR TABLE WEIGHT
         LH    REG10,MINBTHR       FETCH TRUE HIAR TABLE MIN BYTES
ALL002   EQU   *
         STH   RWORK2,HIARSLOT+4   PLACE HIAR WEIGHT IN ALLOCATION TAB
         STH   REG10,HIARSLOT+6    PLACE HIAR MIN BT IN ALLOCATION TAB
         TM    NEWSW,FRSTIME       IS THIS THE FIRST TIME IN INT
         BC    8,FSTENTRY          BRANCH IF 1ST TIME THRU
REUSSW   BC    0,GOODLIN      DUMMY BR FOR REUSABILITY
         MVI   REUSSW+1,X'F0'      MAKE IT UNCOND IF LE IS KLUDGE
         L     RWORK3,MAINREQ      FETCH MINIMUM MAIN STOR REQ
         S     RWORK3,BUFCON       SUBTRACT MIN BUFFER AREA REQ
         ST    RWORK3,MAINREQ      REPLACE MINIMUM MAIN STOR REQ
         BC    15,GOODLIN          BYPASS ALL TABLE ALLOCATION
FSTENTRY EQU   *
         NI    APT3,X'00'                    CLEAR APT3 IF 1ST TIME TH
         GETMAIN VU,LA=MAINREQ,A=MAINGOT
*        GET AS MUCH STORAGE AS POSSIBLE
         MVC   COREADR(8),MAINGOT  SAVE FOR ERROR FREEMAIN
         L     RWORK3,MAINLEN         LOAD LENGTH OF AREA RECEIVED
         L     REG10,MAINLEN       FETCH RETURNED LENGTH
         S     REG10,MAINREQ       REDUCE BY REQUIREMENT
         AH    REG10,TXT6K         BUT ADD IN TXT BUF SIZE
         C     REG10,VALUE2        COMPARE FOR SUFFICIENCY
         BC    4,ALTERV2           NOT ENOUGH
NOWTEST  EQU   *
         LH    REG10,TXT6K         SEE IF VALUE2 IS
         C     REG10,VALUE2        GR THAN 6K
         BC    11,SIXK             NO-BRANCH
         L     REG10,CON60K        UPDATE
         SH    REG10,TXT6K              THE 60K CONSTANT
         A     REG10,VALUE2             TO
         ST    REG10,CON60K             60K + (VALUE2 - 6K)
         L     REG10,CON32K        UPDATE
         SH    REG10,TXT6K              THE 32K CONSTANT
         A     REG10,VALUE2             TO
         ST    REG10,CON32K             32K + (VALUE2 - 6K)
         BC    15,GRSIXK
SIXK     EQU   *
*
         MVC   VALUE2+2(2),TXT6K   USE 6K ALWAYS
*
GRSIXK   EQU   *
         C     RWORK3,CON60K       CAN WE PROVIDE A MAX BLK FCTR OF 40
         BC    11,ALLM40           YES
         C     RWORK3,CON32K       CAN WE PROVIDE A BLK FCTR OF 10
         BC    11,ALLM10           YES
         MVC   MAXBF(2),M05        NO-PROVIDE A MAX BLK FCTR OF 5
         MVC   LINSIZE(4),LINMIN   USE MIN SYSLIN AND SYSPRINT SIZES
         BC    15,FETCHADR
ALTERV2  EQU   *
         N     REG10,MASK2K        SET VALUE2 TO 2048 BYTE BOUNDARY
         ST    REG10,VALUE2        CHANGE VALUE2
         BC    15,NOWTEST          GO BACK
ALLM10   MVC   MAXBF(2),M10        PROVIDE A MAX BLK FACTOR OF 10
         MVC   LINSIZE(4),LININT   USE INT SYSLIN AND SYSPRINT SIZES
         BC    15,FETCHADR
ALLM40   MVC   MAXBF(2),M40        PROVIDE A MAX BLK FACTOR OF 40
         MVC   LINSIZE(4),LINMAX   USE MAX SYSLIN AND SYSPRINT SIZES
FETCHADR LH    RWORK2,PRTSIZE      GET MAX. PRTBUF SIZE
         LH    REG1,HEWLCWBB+12         LOAD BLOCKSIZE
         TM    APTSWS,TSO              IN TSO MODE?
         BZ    TSO6                    NO - CONTINUE
         L     REG7,HEWLCWBB           LOAD DCB ADDDRESS       @AZ16058
         CLI   17(REG7),X'4F'       IS SYSPRNT A TERMINAL      @AZ16058
         BNE   TSO6                    NO--BRANCH              @AZ16058
         LA    REG1,121                YES--SET UP A FULL BUFFER
*                                      EVEN THO LRECL ONLY 81
TSO6     LA    REG1,7(REG1)            ROUND UP TO
         N     REG1,ALIGNX         A MULTIPLE OF EIGHT
         STH   REG1,PRTSIZE        SAVE REAL SIZE FOR ALLOCATION
         SR    RWORK2,REG1             COMPUTE STORAGE AVAIL. TO TABLES
         AR    RWORK2,RWORK2           DOUBLE VALUE FOR BOTH BUFFERS
         STH   RWORK2,DIFFSAVE        SAVE DIFFER. FOR LATER
         L     RWORK2,MAINGOT          FETCH ADDR OF OBTAINED STORAGE
         ST    RWORK2,HEWLCRBB+4   PLACE 1ST LIBRARY BUFFER ADDR
         AH    RWORK2,LINSIZE      ADD BUFFER SIZE TO ADDR
         SH    RWORK3,LINSIZE      SUB BUFFER SIZE FROM LENGTH
         ST    RWORK2,HEWLCRBB+8   PLACE 2ND LIBRARY BUFFER ADDR
         AH    RWORK2,LINSIZE      ADD BUFFER SIZE TO ADDR
         SH    RWORK3,LINSIZE      SUB BUFFER SIZE FROM LENGTH
         ST    RWORK2,HEWLCRBN+4   PLACE 1ST SYSLIN BUFFER ADDR
         AH    RWORK2,LINSIZE      ADD BUFFER SIZE TO ADDR
         SH    RWORK3,LINSIZE      SUB BUFFER SIZE FROM LENGTH
         ST    RWORK2,HEWLCRBN+8   PLACE 2ND SYSLIN BUFFER ADDR
         AH    RWORK2,LINSIZE      ADD BUFFER SIZE TO ADDR
         SH    RWORK3,LINSIZE      SUB BUFFER SIZE FROM LENGTH
         ST    RWORK2,HEWLCWBB+4   PLACE 1ST SYSPRINT BUFFER ADDR
         MVI   1(RWORK2),X'40'         CLEAR SYSPRINT BUFFER
         MVC   2(120,RWORK2),1(RWORK2)
         ST    RWORK2,HEWLCWBB+20
         AH    RWORK2,PRTSIZE      INCREMENT ADDRESS
         SH    RWORK3,PRTSIZE      DECREMENT LENGTH
         ST    RWORK2,HEWLCWBB+8   PLACE 2ND SYSPRINT BUFFER ADDR
         AH    RWORK2,PRTSIZE      INCREMENT ADDRESS
         SH    RWORK3,PRTSIZE      DECREMENT LENGTH
         TM    SAVATS+1,DC         TEST FOR DOWNWARD COMP IN LM
         BC    8,PROV1K            BR IF IT IS TO BE DC
*                                  CONTINUE IF NOT DC
*
*     DEVTYPE FOR SYSLMOD DONE BEFORE OPEN
         MVC   TXTSIZE(2),TXT18K        USE 18K
         LA    REG10,TXT18K            LOAD ADDR OF LIST
PROVNK   CLC   DEVMAXBS+2(2),0(REG10)  COMPARE BLOCKING
         BC    11,TRYUT1               DEVTYPE > LIST VALUE
         MVC   TXTSIZE(2),2(REG10)     USE NEXT SIZE IN LIST
         LA    REG10,2(REG10)          GET ITS ADDR
         CLC   TXT1K(2),0(REG10)       IS BLKSIZE 1K?
         BNE   PROVNK                  IF NOT, TEST AGAIN
PROV1K   MVC   TXTSIZE(2),TXT1K         USE 1K
TRYUT1   EQU   *
         L     REG10,VALUE2        FETCH VALUE2
         SRL   REG10,1             DIVIDE BY 2
         CH    REG10,TXT20K        SEE IF 18K RECORDS NEEDED
         BC    4,TESTSIZE          BR IF NO
         OI    SWITCH,X'80'        TURN ON BIT TO PROVIDE 5K RLD BUF
TESTSIZE EQU   *
         CH    REG10,TXTSIZE       SEE IF WE CAN DOUBLE BUFFER
         BC    11,NOFIXT           BR IF OK
         STH   REG10,TXTSIZE       USE SMALLER VALUE FOR RCD SIZE
NOFIXT   EQU   *
         DEVTYPE ACTVUT1,DEVSAVE FIND MAXIMUN TEXT BUFFER RECORD SIZE
*
         NI    DEVMAXBS+3,X'F8'    SET TO DOUBLE WORD BOUNDARY
         MVC   SZSYSUT1+2(2),DEVMAXBS+2 ESTABLISH SYSUT1 MAX BYTES/TRK
         MVC   UT1SIZE+2(2),TXT18K      USE 18K
         LA    REG10,TXT18K            LOAD ADDR OF LIST
PROVMK   CLC   DEVMAXBS+2(2),0(REG10)  COMPARE BLOCKING
         BC    11,TRYNXT               DEVTYPE > LIST VALUE
         MVC   UT1SIZE+2(2),2(REG10)   USE NEXT SIZE IN LIST
         LA    REG10,2(REG10)          GET ITS ADDR
         CLC   TXT1K(2),0(REG10)       IS BLKSIZE 1K?
         BNE   PROVMK                  IF NOT, TEST AGAIN
         MVC   UT1SIZE+2(2),TXT1K       USE 1K
TRYNXT   EQU   *
         C     REG10,UT1SIZE       SEE IF WE CAN DOUBLE BUFFER
         BC    11,NOFIXU           BR IF OK
         ST    REG10,UT1SIZE       USE SMALLER VALUE FOR RCD SIZE
NOFIXU   EQU   *
         STM   LEN4,LEN6,SPACES+8 STORE REGISTER FOR USE
         SR    LEN4,LEN4     CLEAR REGISTER 4
         LH    LEN5,TXTSIZE  MAXIMUM SYSLMOD SIZE
         LH    LEN6,UT1SIZE+2  LOAD MAXIMUM SUST1 BUFFER SIZE
         CR    LEN5,LEN6     IS SYSLMOD SIZE GREATER THAN SYSUT1 SIZE
         BH    NOFX          YES
         LR    LEN6,LEN5     READJUST FOR DIVISION
         LH    LEN5,UT1SIZE+2     LOAD SYSUT1 BUFFER SIZE INTO RER. 5
*  DIVID LARGER OF SYSLMOD OR SYSUT1 BUFFER SIZE INTO EACH OTHER
*  TO FIND EVEN MULTIPLE
NOFX     DR    LEN4,LEN6
         LTR   LEN4,LEN4     WERE SIZES AN EVEN MULTIPLE OF EACH OTHER
         BC      8,NORMDER   YES
         SR    LEN4,LEN4
         MR    LEN4,LEN6     FIND EVEN MULTIPLE SIZE
         CLC   TXTSIZE(2),UT1SIZE+2    IS SYSLMOD SIZE GREATER
         BL    UT1MORE       NO
         STH   LEN5,TXTSIZE  READJUST SYSLMOD MAXIMUM RECORD SIZE
         BC    15,SHIFT2
UT1MORE  STH   LEN5,UT1SIZE+2     READJUST UT1 BUFFER SIZE
NORMDER  LH    LEN5,TXTSIZE  LOAD SYSLMOD BUFFER SIZE
SHIFT2   SLL   LEN5,1        MULTIPLE SYSLMOD BUFFER SIZE BY 2
READJT   L     LEN4,VALUE2
         TM    SWITCH,X'80'  ARE 4K UBFFERS AVAILABLE FOR RLD RECORDS
         BC    8,NOBUFF      NO
         SH    LEN4,TXT4K    SUBTRACT FOUR K FROM BUFFER AREA
NOBUFF   LH    LEN6,TXTSIZE
         CH    LEN6,UT1SIZE+2
         BH    MULT2
         LH    LEN6,UT1SIZE+2
MULT2    AR    LEN5,LEN6
         CR    LEN4,LEN5
         BH    MULT2
         BE    ENDFIX
         SR    LEN5,LEN6
         ST    LEN5,VALUE2
ENDFIX   LM    LEN4,LEN6,SPACES+8  RESTORE REGISTERS USED
         MVC   MULTSIZE+2(2),TXTSIZE ESTABLISH MULTIPLICITY SIZE
         CLC   MULTSIZE+2(2),EXITTEST   COMPARE TO BLOCK SIZE   SA47971
         BNH   MULTFIX                  BRANCH IF USABLE        SA47971
         MVC   MULTSIZE+2(2),EXITTEST   OVERRIDE WITH BLK SIZE  SA47971
MULTFIX  EQU   *                        OVERRIDE BYPASS         SA47971
         L     SYSLMOD,DCBADRS2        GET ADDR OF SYSLMOD DCB
         USING IHADCB,SYSLMOD
         CLC   MULTSIZE+2(2),DCBBLKSI  COMPARE MULT. TO BLKSIZE
         BNH   MULTOK                  MULT. LESS               SA47971
         MVC   MULTSIZE+2(2),DCBBLKSI  USE BLKSIZE AS MULT.     SA47971
MULTOK   EQU   *
         NI    MULTSIZE+3,X'F8'   RND RECSIZES DOWN TO MULT OF 8
         DROP      SYSLMOD
         LH    RWORK5,TXT1K        FETCH TWICE SIZE INTO BUFFER
         TM    SWITCH,X'80'        PROVIDE A 5K RLD BUFFER
         BC    8,ITERATE           BR IF NO
         LH    RWORK5,TXT5K            GET TWICE SIZE OF RLD BUFFER
ITERATE  SRL   RWORK5,1            DIVIDE BY TWO
         C     RWORK5,SZSYSUT1     COMPARE THIS SIZE TO MAX
         BC    2,ITERATE           LOOP IF GR TH MAX ALLOWABLE
         STH   RWORK5,RLDBUFSZ     SET THIS SIZE IN BUF SIZE
         LH    RWORK5,MAXTKS1      FETCH  8K CONSTANT
         C     RWORK5,SZSYSUT1     COMPARE THIS SIZE TO MAX
         BC    4,HAVEMAX           BR IF LESS THAN MAX
         L     RWORK5,SZSYSUT1     FETCH ACTUAL MAX
HAVEMAX  EQU   *
         STH   RWORK5,MAXTKS1      PLACE IN MAX TRACK SIZE
         SLL   RWORK5,2            MULTIPLY BY 4
         STH   RWORK5,MAXTKS2      PLACE IN MAX TRACK SIZE X 4
         ST    RWORK2,RLDOUT1      PLACE RLD BUFFER 1 ADDR
         AH    RWORK2,RLDBUFSZ     INCREMENT ADDRESS
         SH    RWORK3,RLDBUFSZ     DECREMENT LENGTH
         ST    RWORK2,RLDOUT2      PLACE RLD BUFFER 2 ADDRESS
         AH    RWORK2,RLDBUFSZ     INCREMENT ADDRESS
         SH    RWORK3,RLDBUFSZ     DECREMENT ADDRESS
         MVC   RLDSIZE+2(2),RLDBUFSZ    SET RLD BUF SIZE IN APT
         ST    RWORK2,TXTBFBEG     PLACE LOAD MOD OR TXT BUFFER ADDR
         L     RWORK5,VALUE2       FETCH VALUE2
         TM    SWITCH,X'80'
         BC    8,L5KRLD
         SH    RWORK5,TXT4K
L5KRLD   EQU   *
         CH    RWORK5,TXT6K        SEE IF VALUE2 IS GR TH 6K
         BC    2,GRTH6K            YES-BRANCH
         LH    RWORK5,TXT6K        NO-THEN USE 6K INSTEAD
GRTH6K   AR    RWORK2,RWORK5            INCREMENT BY SIZE OF TEXT BUF
         SR    RWORK3,RWORK5            DECREMENT BY SIZE OF TEXT BUF
         ST    RWORK2,TXTBFEND          PLACE ADDR OF END OF TEXT BUF
         STM   RWORK2,RWORK3,MAINGOT    RESTORE MAINGOT + LENGTH
         L     REG8,DCBADRS3       FETCH ADDR OF SYSUT1 DCB
         USING IHADCB,REG8
         MVC   DCBBLKSI(2),SZSYSUT1+2        UPDATE SYSUT1 DCB
         DROP  REG8
         CLC   MAXBF(2),HEWLCWBB+16  COMPARE SYSPRT BLKFC
         BL    ABENT2     EXIT IF SYSPRINT BLOCKING TOO GREAT
         L     REG10,HEWLCWBB+20   GET ADDR OF SYSPRINT BUFFER
         MVI   0(REG10),X'8B'          CC TO RESTORE
         L     REG15,COREADR           PICK UP GETMAIN'D ADDR
         A     REG15,CORELEN           ADD IN LENGTH
         ST    REG15,FFCADR            STORE ADDR IN APT
         L     SYSBRNCH,PRNTAD         ADDRESS OF PRINT ROUTINE
         BALR  SYSRET,SYSBRNCH
         L     REG10,HEWLCWBB+20       ADDRESS OF PRINT BUFFER
TEST1ST  CLI   MSGONE,X'00'             TEST 1ST BYTE FOR ZEROES
         BC    8,TEST2ND                YES - TRY NEXT
         L     RWORK2,MSGONE            FETCH ADDR OF MSG
         NI    SWITCH,X'FE'        TURN OFF SINGLE LINE SWITCH
         LH    RWORK5,HEWLCWBB+14  LOAD LRECL
         LA    RWORK9,0(RWORK5,RWORK2) ADDRESS OF CHARACTER AT
*                                      END OF BUFFER
         BCTR  RWORK9,0
         CLI   0(RWORK9),C' '      IS THE CHARACTER BLANK
         BNE   TEST2               NO - BRANCH
         OI    SWITCH,SNGLIN       TURN ON SINGLE LINE SWITCH
         B     HDR1                BRANCH TO PRINT HEADER
TEST2    CLI   0(RWORK9),C','      IS LAST CHARACTER A COMMA
         BE    HDR1                YES - BRANCH TO PRINT
         BCT   RWORK9,TEST2        LOOK FOR COMMA TO BREAK LINE
HDR1     SR    RWORK9,RWORK2       GET LENGTH OF MESSAGE
         EX    RWORK9,MOVEMSG      MOVE MOVE MESSAGE INTO BUFFER
         BALR  SYSRET,SYSBRNCH     GO PRINT
         TM    SWITCH,SNGLIN       IS THE MESSAGE CONTINUED
         BC    1,TEST2ND           NO - BRANCH
         L     REG10,HEWLCWBB+20   GET BUFFER ADDRESS
         MVI   0(RWORK2),C' '           INJECT BLANK TO CLEAR   OY00338
         BCTR  RWORK9,0                 GET MOVE LNG, LINE1     OY00338
         EX    RWORK9,MOVEPAD           CLEAR OUT LINE 1        OY00338
         SR    SYSRET,SYSRET
         IC    SYSRET,MSGONE       GET TOTAL LENGTH OF MESSAGE
         LA    RWORK2,1(SYSRET,RWORK2)  POINT TO END OF TEXT    OY00338
         SR    RWORK2,RWORK5            POINT TO SECOND LINE    OY00338
         MVI   0(RWORK2),X'09'          MOVE IN CARR CNTRL      OY00338
         BCTR  RWORK5,0                 ADJUST FOR MOVE LENGTH  OY00338
         EX    RWORK5,MOVEMSG           MOVE IN REST OF MSG     OY00338
         BALR  SYSRET,SYSBRNCH     GO PRINT SECOND LINE
TEST2ND  CLI   MSGTWO,X'00'        TEST 1ST BYTE FOR ZEROES
         BC    8,TEST3RD           YES - TRY NEXT
         L     REG10,HEWLCWBB+20        ADDRESS OF PRINT BUFFER
         L   RWORK2,MSGTWO
         IC    SYSRET,MSGTWO       FETCH LENGTH OF MSG TWO
         EX    SYSRET,MOVEMSG      THEN MOVE MSG TWO
         BALR  SYSRET,SYSBRNCH          PRINT MSG TWO
TEST3RD  CLI   MSGTHREE,X'00'
         BC    8,TEST4TH           YES - TRY NEXT
         L     REG10,HEWLCWBB+20   GET ADDR OF SYSPRINT BUFFER
         L     RWORK2,MSGTHREE     FETCH ADDR OF MSG
         IC    SYSRET,MSGTHREE     FETCH LENGTH OF MSG THREE
         EX    SYSRET,MOVEMSG      THEN MOVE MSG THREE
         BALR  SYSRET,SYSBRNCH          PRINT MSG THREE
TEST4TH  CLI   MSGFOUR,X'00'
         BC    8,DECREQ            YES - CONTINUE
         L     REG10,HEWLCWBB+20   GET ADDR OF SYSPRINT BUFFER
         L     RWORK2,MSGFOUR      FETCH ADDR OF MSG
         IC    SYSRET,MSGFOUR     FETCH LENGHT OF MSG FOUR
         EX    SYSRET,MOVEMSG      THEN MOVE MSG FOUR
         BALR  SYSRET,SYSBRNCH     PRINT MSG FOUR
DECREQ   EQU   *
         A     RWORK3,BUFCON       ADD SIZE OF BUFFERS  SINCE
*                                  THEY HAVE BEEN ALLOCATED
         STM   ZERO,SYSBRNCH,BRNCHSV   SAVE REGISTERS            S01904
         L     SYSBRNCH,ERDIGA         ADDRESS OF REALLOC RTN    S01904
         BALR  SYSRET,SYSBRNCH         GO TO REALLOC RTN         S01904
************************************************                OY09265
*  REALLOCATION IMMEDIATELY AFTER ALLOCATION   *                OY09265
************************************************                OY09265
         TM    APT4,X'C0'              PREVIOUS REALLOCATE?     OY09265
         BO    REALLOC                 BR IF PREVIOUS REALLOC   OY09265
         L     15,ERDIGA               ADDRESS OF REALLOC RTN   OY09265
         BALR  14,15                   GO TO REALLOC RTN        OY09265
REALLOC  LM    ZERO,SYSBRNCH,BRNCHSV   RESTORE REGISTERS         S01904
         B     ALL043                                            S01904
*
MOVEMSG  MVC   0(1,REG10),0(RWORK2) PUT MSG INTO SYSPRINT BUFFER
MOVEPAD  MVC   1(1,RWORK2),0(RWORK2)   EXECUTED PAD PROPAGATOR  OY00338
*
         EJECT
SCDENTRY EQU   *
         TM    SAVATS,OVERBIT           TEST FOR OVERLAY
         BC    8,NOTOVLY                NOT  OVERLAY
         LH    RWORK2,DIFFSAVE         GET PRTBUF REMAINDER
         LA    RWORK6,3000             AMOUNT FOR LARGER CALLS LIST
         CR    RWORK6,RWORK2           IS THERE 3000 BYTES LEFT
         BC    12,USESOME      YES SO ONLY USE 3000 BYTES
         LR    RWORK6,RWORK2           GET ALL OF EXTRA PRTBUF
USESOME  SR    RWORK3,RWORK6       KEEP  THIS 3000 FROM GENERAL ALLOC.
         LH    RWORK2,CALLSLST+6       GET MIN CALLS LIST SIZE
         AR    RWORK2,RWORK6       ADD 3000 TO MIN.
         STH   RWORK2,CALLSLST+6       SAVE FOR ALLOCATION
         LH    RWORK2,ENTRLIST+6       GET MIN ENTRY LIST SIZE
         AR    RWORK2,RWORK6       ADD 3000 TO MINIMUM
         STH   RWORK2,ENTRLIST+6       SAVE FOR ALLOCATION
         MVC   TTRLIST(4),HEWLCRBB+4    PLACE ADDR OF TTR LIST
         MVC   SGTBSLOT+6(2),SG256 ALLOW 256 SEGMENTS
         CLC   MAXBF(2),M10        CAN WE PROVIDE 256 SEGMENTS
         BC    11,NOTOVLY          YES
         MVC   SGTBSLOT+6(2),SG200 NO - THEN PROVIDE A MAX OF 200
NOTOVLY  EQU   *
         S     RWORK3,MAINREQ           SUB MINIMUM MAIN STOR REQ
         SR    RWORK2,RWORK2          CLEAR REGISTER FOR DIVISION
         SR    RWORK6,RWORK6
         D     RWORK2,TOTWT           CALCULATE NUMBER OF GROWS
         MVC   FSTPHIGH(4),MAINGOT    INITIALIZE HIGH ASSIGNED ADDRS
         MVC   INTPHIGH(8),FSTPHIGH
         LA    TABLLIST,TABLE         INITIALIZE REGISTERS FOR TABLE
         SR    RWORK4,RWORK4
         LA    RINDEX,ENTRYSIZ
ALL010   LR    NUMBGROS,RWORK3        REINITIALIZE NUMBER OF GROWS
         TM    SWITCHES(TABLLIST),OVERLAY TEST FOR OVERLAY TABLE
ALL010SW BC    3,ALL0405             YES, SKIP THIS TABLE
         TM    SWITCHES(TABLLIST),FIRSTPAS TEST FOR OCCURANCE IN PASS
         BC    8,ALL011                         TO FIND HIGHEST UNAVAIL
         L     RWORK2,FSTPHIGH                  ABLE ADDRESS
ALL011   TM    SWITCHES(TABLLIST),INTERPAS
         BC    8,ALL012
         C     RWORK2,INTPHIGH
         BC    11,ALL012
         L     RWORK2,INTPHIGH
ALL012   TM    SWITCHES(TABLLIST),SECONDPS
         BC    8,ALL020
         C     RWORK2,SECPHIGH
         BC    11,ALL020
         L     RWORK2,SECPHIGH
ALL020   TM    SWITCHES(TABLLIST),DBLWORDB ALIGN IF NECESSARY
         BC    8,ALL021
         STC   RWORK2,ALIGNTST
         TM    ALIGNTST,LOWZEROS
         BC    8,ALL030
         SRL   RWORK2,3
         LA    RWORK2,1(0,RWORK2)
         SLL   RWORK2,3
ALL021   TM    SWITCHES(TABLLIST),WORDBNDR
         BC    8,ALL030
         STC   RWORK2,ALIGNTST
         TM    ALIGNTST,LOWZERO
         BC    8,ALL030
         SRL   RWORK2,2
         LA    RWORK2,1(0,RWORK2)
         SLL   RWORK2,2
ALL030   IC    RWORK4,ADDRINCR(TABLLIST)
         TM    SWITCHES(TABLLIST),ZERONTRY TEST FOR NEED TO DECR ADDR
         BC    3,ALL060               YES
         ST    RWORK2,CSNO(RWORK4)  NO-STORE ADDRESS IN APT
ALL031   MH    NUMBGROS,WEIGHT(TABLLIST) CALC. BYTES TO BE ADDED
         AH    NUMBGROS,MINSIZE(TABLLIST) AND ADD
         TM    SWITCHES(TABLLIST),CUTOFF  TEST FOR SPECIAL CASE
         BC    3,ALL070               YES
ALL032   LA    RWORK5,0(RWORK2,NUMBGROS) NO, ADD TO START ADDRESS
         TM    SWITCHES(TABLLIST),FIRSTPAS TEST FOR OCCURANCE IN PASS
         BC    8,ALL033                             AND UPDATE HIGH
         ST    RWORK5,FSTPHIGH                      ADDRESSES
ALL033   TM    SWITCHES(TABLLIST),INTERPAS
         BC    8,ALL034
         ST    RWORK5,INTPHIGH
ALL034   TM    SWITCHES(TABLLIST),SECONDPS
         BC    8,ALL040
         ST    RWORK5,SECPHIGH
ALL040   IC    RWORK4,BYTSENTR(TABLLIST) CALCULATE MAXIMUM NUMBER OF
         SR    NUMBGROS-1,NUMBGROS-1  CLEAR REGISTER FOR DIVISION
         DR    NUMBGROS-1,RWORK4                                ENTRIES
         IC    RWORK4,ENTRINCR(TABLLIST)
         C     NUMBGROS,MAXENTRS             TEST VS MAX POSSIBLE ENTRS
         BC    12,NOWSTORE                   IF LESS TH OR EQ BRANCH
         L     NUMBGROS,MAXENTRS             OTHERWISE USE MAX VALUE
NOWSTORE EQU   *
         STH   NUMBGROS,CSNO(RWORK4)
ALL0405  CLI   MINSIZE+2(TABLLIST),ENDFLAG TEST FOR END
         BC    7,ALL050               NO, LOOP
         L     RPARAM,INTPHIGH        YES, DETERMINE HIGHEST ADDRESS
         C     RPARAM,SECPHIGH                                     USED
         BC    3,ALL041
         L     RPARAM,SECPHIGH
ALL041   STC   RPARAM,ALIGNTST
         TM    ALIGNTST,LOWZEROS      ALIGN
         BC    8,ALL042
         SRL   RPARAM,3
         LA    RPARAM,1(0,RPARAM)
         SLL   RPARAM,3
ALL042   ST    RPARAM,FFCADR
         L     R0,MAINGOT
         A     R0,MAINLEN
         SR    R0,RPARAM
         FREEMAIN R,LV=(0),A=(1)
ALL043   XC    CSNO(4),CSNO        ZERO OUT SCRATCH LOCATION
         MVI   ALL010SW+1,X'30'      RESET SWITCH
         B     ALLOCEND            LEAVE ALLOCATE ROUTINE
ALL050   SR    RWORK2,RWORK2          RESET REGISTER
         BXH   TABLLIST,RINDEX,ALL010 LOOP
ALL060   IC    RWORK6,BYTSENTR(TABLLIST) TAKE CARE OF ZEROTH ENTRY
         SR    RWORK2,RWORK6                                  PROVISION
         ST    RWORK2,CSNO(RWORK4)
         AR    RWORK2,RWORK6
         B     ALL031
ALL070   TM    SWITCHES(TABLLIST),X'32'
         BC    1,ALL0702
         CH    NUMBGROS,MAXTKS1
         BC    4,ALL032
         LH    NUMBGROS,MAXTKS1
         B     ALL032
ALL0702  CH    NUMBGROS,MAXTKS2    EXCEED 4 TIMES TRACK SIZE
         BC    4,ALL032            NO--CONTINUE
         LH    NUMBGROS,MAXTKS2    YES--RESET TO MAX TRACK SIZE X 4
         B     ALL032
         DS    0F
NORMWT   DC    AL4(ROUNDSIM)  TOTAL WEIGHT W/O OVLY OR HIAR     OY00359
NORMMIN  DC    AL4(NORMTABS+BUFFERS+ALIGNM)  MIN SPACE NEEDED   OY00359
OVLAYWT  DC    AL4(ROUNOVLY)  TOTAL WEIGHT WITH OVLY,NO HIAR    OY00359
OVLAYMIN DC    AL4(OVLATABS+BUFFERS+ALIGNM)  MIN SPACE NEEDED   OY00359
HIARWT   DC    AL4(ROUNHIAR)  TOTAL WEIGHT WITH HIAR,NO OVLY    OY00359
HIARCHYM DC    AL4(HIARTABS+BUFFERS+ALIGNM)  MIN SPACE NEEDED   OY00359
BUFCON   DC    AL4(BUFFERS)
BUFFERS  EQU   9984           MINIMUM BUFFER AREA REQ.
ALIGNM   EQU   7                     ALLOWANCE FOR ALIGNMENT
DATAMAN  EQU   2*1024        SPACE FOR DATA MANAGEMENT AND      OY00359
*                             STOW WORK AREAS AND ABEND PROC    OY00359
NONRES   EQU   2048                    SPACE FOR NONRESIDENT ACCESS
*                                      METHOD ROUTINES
MAXTKS1  DC    AL2(8184)
MAXTKS2  DC    AL2(32736)
TOTWT    DS    1F                     TOTAL WEIGHT
MAINREQ  DC    X'00000000'         REQUEST FOR GETMAIN
MAXSTOR  DC    X'01000000'    MAXIMUM MAIN STORAGE - 16384K OR LESS
MAINGOT  DC    2A(0)                  ADDRESS OF MAIN STORAGE GOTTEN
MAINLEN  EQU   MAINGOT+4              LENGTH OF SAME
CON88K   DC    X'00016000'    CONSTANT OF 88K
CON60K   DC    AL4(42*1024)                                      S01904
CON32K   DC    AL4(25*1024)                                      S01904
LLEGF64  DC    AL4(28*1024+DATAMAN)  SPACE FOR LE AND SCP       OY00359
MAXENTRS DC    X'00007FFF'         MAXIMUM ENTRIES BEF NEG SIGN GOES ON
DEFVCON  DC    V(HEWLFDEF)    ADDRESS OF CSECT CONTAINING DEFAULTS
         EJECT
         DS    0H                     FOR ALIGNMENT
*                SSAAEEBBWWWWMMMM SWS,ADDR,ENTS,BYTES,WGT,MINIMUM  NO.
TABLE    DC    X'78347A0100300480'  1 TEXT I/O TABLE   BYTES/ENT IS 4
SGTBSLOT EQU   *
         DC    X'F31C800100000100'  2 SEGTAB1
         DC    X'713C7E05001E01F4'  3 DELINK
         DC    X'30388201000000A0'  4 ALIAS
         DC    X'3884000100000008'  5 8 BYTES PRIOR TO HESD
         DC    X'3800700800B00AF0'  6 HESD
         DC    X'32487607005407E0' 7  TEXT NOTE LIST 2
         DC    X'324C7809006C0708' 8  RLD NOTE LIST 2
         DC    X'442C000100000104'  9 INPUT RLD BUFFERS-1ST PASS
         DC    X'49407010016015E0' 10 CESD
HIARSLOT EQU   *
         DC    X'635800010016015E' 11 HIAR
         DC    X'1454000100000300' 12 OUTPUT RLD BUFFERS-2ND PASS
         DC    X'6A247207001501F8' 14  TXT NOTE LIST 1
         DC    X'6A287409001B01C2' 15  RLD NOTE LIST 1
         DC    X'7400000100000004' 16 RENUMBERING TABLE PREFIX
         DC    X'7530000400580578' 17 RNT + RLC TABLES
ENTRLIST DC    X'9444880600120558' 18A  ENTRY LIST
CALLSLST DC    X'E4207C0100140558' 18B  CALLS LIST
         DC    X'FF'               19 END FLAG
*
*              XXXX      FORMAT OF HIGH ORDER DIGIT
*              11XX      OVLY 1ST PASS
*              1X1X      OVLY INT PASS
*              1XX1      OVLY 2ND PASS
*              01XX      NO-OVLY 1ST PASS
*              0X1X      NO-OVLY INT PASS
*              0XX1      NO-OVLY 2ND PASS
*
ALIGNTST DS    1C                     BYTE USED FOR ALIGNMENT
DEVSAVE  DS    0F
DEVCODE  DC    F'0'           DEV CODE FROM UCB
DEVMAXBS DC    F'0'           MAX  BLK SIZE ACCEPTED
LINMIN   DC    H'0400'
PRTMIN   DC    H'0608'
LININT   DC    H'0800'
PRTINT   DC    H'1216'
LINMAX   DC    H'3200'
PRTMAX   DC    H'4840'
LINSIZE  DC    H'0'
PRTSIZE  DC    H'0'
TXT18K   DC    H'18432'
TXT13K   DC    H'13312'
TXT12K   DC    H'12288'
TXT7P5K  DC    H'7680'       7.5K FOR 3340 DEVICE                XM5473
TXT6K    DC    H'6144'
TXT5K    DC    H'5120'                 CONSTANT FOR RLD BUF SIZE
TXT4K    DC    H'4096'
TXT3K    DC    H'3072'
TXT2K    DC    H'2048'
TXT1K    DC    H'1024'
TXT10K   DC    H'10240'
TXT20K   DC    H'20480'
RLDBUFSZ DC    H'0'           SIZE OF RLD BUFS 1ST P-OUT  2ND P-IN
K4       DC    H'4'
K8       DC    H'8'
WEIGHTHR DC    X'0016'
MINBTHR  DC    X'015E'
DUMHRWT  DC    X'0000'
DUMHRMN  DC    X'0008'
SG200    DC    X'00C8'
SG256    DC    X'00FF'                MAX SEGMENT COUNT        @ZA05444
TXTSIZE  DC    H'0'
DIFFSAVE DS    H                       AREA FOR SAVE OF UNUSED PRTBUF
FSTPHIGH DS    3F                     CURRENT HIGH ASSIGNED ADDRESSES
SECPHIGH EQU   FSTPHIGH+8
INTPHIGH EQU   FSTPHIGH+4
MASK2K   DC    X'FFFFF800'         MASK TO SET A VALUE TO MULT OF 2048
ALIGNX   DC    X'FFFFFFF8'             CONST. FOR  DBLE WORD ALIGNMENT
SWITCH   DC    X'00000000'
*              BIT 0     IF ON PROVIDE 2-2560 BYTE RLD BUFFERS
*              BITS 1-7 SPARE
         EJECT
ALLOCEND EQU   *                   END OF ALLOCATE ROUTINE
TESTLIN  CLC   MAXBF(2),HEWLCRBN+16   COMPARE SYSLIN BLKFC
         BC    11,GOODLIN                    EXIT IF VALID BLKFCTR
         MVC   LINECNT+1(1),SPACES     SET LINE COUNT
         LA    R0,BADLIN                FETCH MESSAGE NO
         L     SYSBRNCH,ERDIG      ADDR OF ERROR RTN
         BALR  SYSRET,SYSBRNCH          PRINT THE ERROR MSG AND EXIT
GOODLIN  EQU   *
         MVI   IDRSWS,SWSOFF           INIALIZE IDR SWITCHES TO  S21016
*                                      ALL ZEROES                S21016
         MVI   APTSW3,SWSOFF           INITIALIZE TO ZEROES      S01904
         MVI   APTSW4,SWSOFF           INITIALIZE TO ZEROES      S01904
         MVC   IDRTREND(PTRLEN),IDRTRTAB  INIALIZE ADDRESS OF    S21016
*                                      NEXT AVAILABLE BYTE IN    S21016
*                                      IDR TRANSLATOR DATA TABLE S21016
*                                      TO FIRST BYTE OF TABLE    S21016
         MVC   IDRTIEND(PTRLEN),IDRTITAB INITIALIZE ADDRESS OF  OX04245
*                                      NEXT AVAILABLE BYTE IN   OX04245
*                                      IDR TRANSLATOR ID TABLE  OX04245
*                                      TO FIRST BYTE OF TABLE   OX04245
         MVC   IDRUDEND(PTRLEN),IDRUDTAB  INIALIZE ADDRESS OF    S21016
*                                      NEXT AVAILABLE BYTE IN    S21016
*                                      IDR USER - DATA TABLE     S21016
*                                      TO FIRST BYTE OF TABLE    S21016
         MVC   IDRZPEND(PTRLEN),IDRZPTAB  INIALIZE ADDRESS OF    S21016
*                                      NEXT AVAILABLE BYTE IN    S21016
*                                      IDR IMASPZAP DATA TABLE   S21016
*                                      TO FIRST BYTE OF TABLE    S21016
         NI    NEWSW,X'86'        INIT. NEWSW
         NI    APT4,X'C3'              INIT. PAGE/ORDER SWITCHES YM2649
         MVC   EPSM(8),BLANKS      CLEAR EP SYMBOL TO BLANKS
         MVC   PDSE18(8),BLANKS    CLEAR MEMBER NAME OF MODULE TO BLNKS
         MVC   PDSE7(2),SAVATS     RESTORE
         MVC   APT0(1),SAVATS+2    ATTRIBUTES
         NI    APTSWS,TSO              CLEAR SWITCHES, NOT TSO
         OI    APTSWS,DCBS         INIT. APTSWS
         TM    APTEMP+8,X'80'           MEMBER NAME RECEIVED
         BZ    AROUND                   NO
         L     SYSBRNCH,DCBADRS2        GET SYSLMOD DCB
         L     SYSBRNCH,44(SYSBRNCH)    DEB ADDRESS
         LA    SYSBRNCH,0(SYSBRNCH)     CLEAR HI-ORDER BITS
         TM    8(SYSBRNCH),X'80'        IS DISP NEW OR MOD
         BO    AROUND                   YES.  DON'T SET BIT FOR
         OI    APTEMP+8,X'10'           STOW WITH REPLACE
AROUND   MVC   PDSE1(8),APTEMP          SET MEMBER NAME RECEIVED IN APT
*
         OC    APT3(1),APTEMP+8    MOVE NAME RCD BIT TO APT
         OI    APT1,X'04'
         MVI   CSNO+1,1            SET CURRENT SEGMENT TO 1
         MVC   LINECNT+1(1),SPACES  SET LINE COUNT
         MVI   LSTS,X'01'
         MVC   ENRLD2X(2),K256+2   MOVE INPUT RLD BUF SIZE TO APT
         TM    INTERN1,1
         BC    1,ABENT
         TM    NEWSW,FRSTIME       SEE IF FIRST TIME IN INT
         BC    1,SECOND            YES - THEN FALL THRU
         OI    NEWSW,X'80'         SET BIT ON
         L     REG9,TXTBFEND       GET ADDR OF NORM TABLES
SETEXIT  EQU   *
         L     REG10,FFCADR        GET END ADDR OF NORM TABLES
         LA    RWORK3,EXIT         FETCH ADDRESS OF 1ST TIME EXIT
CLEARSUB EQU   *
         L     SYSRET,K256         FETCH CONSTANT 256 FOR TEST
         LR    REG3,REG9           FETCH STARTING ADDR OF TABLES
         SR    REG4,REG4           CLEAR A REGISTER
         ST    REG4,0(REG3)             AND PLACE ZEROES INTO
         ST    REG4,4(REG3)             FIRST 8 BYTES OF THE FIELD
         LR    REG4,REG10          FETCH ENDING ADDR OF TABLES
         SR    REG4,REG3                CALC LENGTH OF TABLES
         SH    REG4,K8             REDUCE BY 8 FOR ORIGINAL STORES
         CR    REG4,SYSRET              SEE IF GR TH 256
         BNH   OUTLOOP                  BR  IF GR TH 256
COMPR    MVC   8(256,REG3),0(REG3) START OF LOOP--  MOVE 256 CHARS
         AR    REG3,SYSRET                          INC ADDRESS
         SR    REG4,SYSRET                          DEC LENGTH
         CR    REG4,SYSRET                          SEE IF GR TH 256
         BH    COMPR               END OF LOOP----  BR IF GR TH 256
OUTLOOP  BCTR  REG4,0                   SUB 1 FOR MVC
         EX    REG4,LASTMVC             DO LAST MVC
         BCR   15,RWORK3           NOW LEAVE SUBROUTINE
EXIT     L     SYSBRNCH,INPUT      FETCH ADDRESS OF HEWLFINP
         BALR  SYSRET,SYSBRNCH     LEAVE INITIALIZER
SECOND   EQU   *
         L     REG9,TXTBFEND           GET ADDR OF TXTIO TABLE
         L     REG10,FFCADR            GET END ADDR OF TABLES
         BAL   RWORK3,CLEARSUB     BR TO ENTER CLEAR SUBR
         L     REG9,RECNT          GET ADDR OF RENUMB TABLE
         SH    REG9,K4             TAKE 4 MORE BYTES FOR RNT PREFIX
         BC    15,SETEXIT          NOW GO TO SET RET ADDRESS
*
LASTMVC  MVC   8(1,REG3),0(REG3)   FOR THE LAST MOVE OF LS TH 256 CHARS
*
         USING *,15
         USING IHADCB,REG1
HEWLXIT2 ST    REG5,SAVEIT             SAVE REG
         L     REG5,ADDRIND            ADDRESS OF INDICATOR
         NI    0(REG5),X'F0'           SET NOT ACTIVE
         NI    DCBBUFNO,X'00'      ZERO OUT BUFFER NUMBER FIELD
         TM    APTSWS,X'10'             TEST FOR DCBS OVERRIDE  SA47971
         BNO   XIT2A                    BRANCH IF NOT           SA47971
         NC    OVERRIDE,OVERRIDE        IS OVERRIDE SPECIFIED   OX00127
         BZ    XIT2A                    BRANCH IF NOT           OX00127
         CLC   EXITTEST,OVERRIDE        COMPARE TO BLOCK SIZE   SA47971
         BL    XIT2A                    BRANCH IF USABLE 47971,@ZA07605
         CLC   DCBBLKSI(2),OVERRIDE     IS OVERRIDE USUABLE     OX00127
         BH    XIT2A                    BRANCH IF NOT          @ZA33269
         MVC   EXITTEST,OVERRIDE        USE DCB OVERRIDE        SA47971
         MVC   DCBBLKSI(2),OVERRIDE     UPDATE DSCB     OX03511,OY03041
XIT2A    TM    PDSE8,X'80'              TEST FOR DC OPTION      SA47971
         BO    XIT2B                    BRANCH IF NOT APPLIC    SA47971
         CLC   EXITTEST,BUF1K           COMPARE TO 1024         SA47971
         BNH   XIT2B                    BRANCH IF USABLE        SA47971
         MVC   EXITTEST,BUF1K           USE 1024 FOR BLK SIZE   SA47971
XIT2B    L     REG5,4(REG5)             POINT TO JFCB          @ZA33269
         TM    JFCBIND2(REG5),X'C0'     NEW DATA SET?          @ZA33269
         BNO   TESTMIN                  IF NOT, BRANCH         @ZA33269
         MVC   DCBBLKSI(2),EXITTEST     IF SO, SET BLOCK SIZE   SA47971
TESTMIN  EQU   *                                                 YM5584
         L     REG5,SAVEIT              RESTORE REGISTER 5     @ZA33269
         TM    PDSE7,SCTR               TEST SCTR SPECIFIED      YM5584
         BO    SCTRMIN                  USE SCTR MINIMUM         YM5584
         CLC   DCBBLKSI(2),MIN256       TEST FOR MINIMUM BLKSIZE YM5584
         BL    SETMIN                   GO SET MINIMUM BLKSIZE   YM5584
         BR    REG14                    RETURN                   YM5584
SETMIN   EQU   *                                                 YM5584
         MVC   DCBBLKSI(2),MIN256       SET MINIMUM BLKSIZE      YM5584
         BR    REG14                    RETURN                  SA47971
SCTRMIN  EQU   *                                                 YM5584
         CLC   DCBBLKSI(2),MINSCTR      TEST FOR MINBLK FOR SCTR YM5584
         BL    SETSCTR                  GO SET SCTR MIN BLKSIZE  YM5584
         BR    REG14                    RETURN                   YM5584
SETSCTR  EQU   *                                                 YM5584
         MVC   DCBBLKSI(2),MINSCTR      SET MIN BLKSIZE FOR SCTR YM5584
         BR    REG14                    RETURN                   YM5584
SCTR     EQU   X'04'                    MASK FOR SCTR TEST       YM5584
MINSCTR  DC    H'1024'                  MIN BLKSIZE FOR SCTR     YM5584
MIN256   DC    H'256'                   MINIMUM SYSLMOD BLKSIZE  YM5584
OVERRIDE DC    H'00'
EXITTEST DC    H'00'  BLOCK SIZE FROM DEVTYPE OR OPEN EXIT CALC SA47971
BUF1K    DC    H'1024'
SAVEIT   DC    F'0'
ADDRIND  DC    A(APTXLIST)
         DROP  15
         DROP  REG1
ATOPTADD DC    V(HEWLFOPT)
BLANKS   DC    C'        '         8 BLANKS
K256     DC    F'256'
K3K      DC    F'3072'
K44K     DC    F'45056'
ADRAPTEX DC    A(APTEXLST)       ADR OF EXIT LIST
APTADD   DC    A(HEWLFAPT)
ABENT    LH    ZERO,ERROR
         LA    REG1,DDSAV
         L     SYSBRNCH,ERDIG      ADDR OF ERROR ROUTINE
         BCR   15,SYSBRNCH
ABENT2   L     BASE,=A(HEWLFINT+6)     ESTABLISH ADDRESSABILITY
         USING HEWLFINT+6,BASE
         L     0,CORELEN          LENGTH OF STORAGE FROM GETMAIN
         L     1,COREADR    ADDRESS OF THE FIRST BYTE
         FREEMAIN R,LV=(0),A=(1)  FREE ALLOCATED CORE
ABENT2A  WTO   'IEW0984 ERROR-SYSPRINT BLOCKSIZE EXCEEDS MAXIMUM-LINKEDX
               IT PROCESSING TERMINATED.',ROUTCDE=11
ABENT1   EQU   *                                               @ZA07598
         L     SYSLMOD,DCBADRS2                                @ZA07598
         OI    CIND2(SYSLMOD),STOWBIT                          @ZA07598
         LA    1,DCBADRS4                                      @ZA07598
         TM    NEWSW,TERM                                      @ZA07598
         BZ    TSO4                                            @ZA07598
         LA    1,DCBADRS1                                      @ZA07598
TSO4     CLOSE MF=(E,(1))                                      @ZA07598
         TM    APTSW2,SHRSYSMD                                 @ZA07598
         BNO   ABENT1A                                         @ZA07598
         DEQ   (ENQNAME,MINOR,44,SYSTEMS)                      @ZA07598
         B     ABENT1B                                         @ZA07598
ABENT1A  TM    APTSW2,ENQBIT                                   @ZA07598
         BO    ABENT1B                                         @ZA07598
         DEQ   (ENQNAME,MINOR,44,SYSTEM)                       @ZA07598
ABENT1B  LA    SYSBRNCH,16                                     @ZA07598
         LM    13,14,SYSRTN                                    @ZA07598
         LM    0,12,20(13)                                     @ZA07598
         BCR   15,14                                           @ZA07598
ABENT10  WTO   'IEW0994 ERROR - SYSPRINT DD CARD MISSING--LINKAGE EDITOX
               R PROCESSING TERMINATED.',ROUTCDE=11
         B     ABENT1                  BRANCH TO DEQUE
REGSAVE1 DC    F'0'
DCBADRS1 DC    X'0F'               OUTPUT FLAG
         DC    AL3(HEWLTMDB)       ADDRESS OF SYSTERM
DCBADRS4 DC    X'0F'               OUTPUT FLAG
         DC    AL3(HEWLCPDB)       ADDRESS OF SYSPRINT
         DC    X'00'               INPUT FLAG
         DC    AL3(HEWLCSDB)       ADDRESS OF SYSLIN
DCBADRS2 DC    X'8F'               OUTPUT FLAG AND END FLAG
         DC    AL3(HEWLCMDB)       ADDRESS OF SYSLMOD
DCBADRS3 DC    A(HEWLCUDB)         ADDRESS OF SYSUT1
INPUT    DC    V(HEWLFINP)
PRNTAD   DC    V(HEWLEPNT)
INDDNMAD DC    A(INDDNAME)                                       A47001
TEMP     DS    F
INITEXAD DS    F           EXTRACT WILL PUT @ OF TSO FIELD HERE
*                                      EXTRACT WILL PUT @ OF    OY00130
*                                      TIOT HERE                OY00130
ADDRTIOT EQU   INITEXAD                TIOT ADDR FROM EXTRACT   OY00130
ADDRUCB  EQU   ADDRTIOT                UCB ADDR FROM TIOT       OY00130
XTRTSAVE DS    F       SAVE AREA FOR REG USED AFTER EXTRACT FOR TSO
SYSLINNM DC    C'SYSLIN  '
SYSUT1NM DC    C'SYSUT1  '
SYSLMDNM DC    C'SYSLMOD '
SYSPRTNM DC    C'SYSPRINT'
SYSLIBNM DC    C'SYSLIB  '
SYSTRMNM DC    C'SYSTERM '      STANDARD DDNAME FOR 12TH ENTRY
LENGTH   DC    H'96'            LENGTH OF DDNAMELIST IN TSO MODE
ACTVUT1  DC    C'SYSUT1  '
ACTVLMOD DC    C'SYSLMOD '
ERROR    DC    X'241C'
INTERN1  DC    X'00'
DDSAV    DS    8X'00'
APTEMP   DC    C'        '                PDSEI TEMP STORAGE
         DC    X'00'                     APT0+3 TEMP STORAGE
         DS    0H
M05      DC    H'05'
M10      DC    H'10'
M40      DC    H'40'
PRNTNAME DS    2F
ANSWER   DS    2F
MSGFOUR  DC    A(0)
MSG4     DC    X'09'
         DC    11C' '
NAMEDD   DC    C'SYSPRINT DEFAULT BLOCKING USED'
         DC    2C' '
FACTOR   DC    C' 1 - 1'
APFINIT  DC    X'0100'                 INIT VALUE FOR AUTH CODE  Y01048
         EJECT
         DCBD  DSORG=(PS,PO)
         EJECT
TIOT     DSECT                         MAP OF TIOT              OY00130
         IEFTIOT1                                               OY00130
UCB      DSECT                                                  OY00130
         IEFUCBOB                                               OY00130
         EJECT                                                  SA49330
*
*
DEFDSECT DSECT
DEFIDENT DS    CL4                 THE NAME IDENTIFIER
DESPNT   DS    F                   DESIGN POINT
DEFV1    DS    F                   DEFAULT VALUE1
DEFV2    DS    F                   DEFAULT VALUE2
NAME     DS    CL4                 EDITOR NAME
*
*
         HEWAPT
         END
