         TITLE 'IEASMFEX'
*                                                                     *
* STATUS                                                              *
*    CHANGE LEVEL 0                                                   *
*                                                                     *
* FUNCTION                                                            *
*    IEASMFEX IS THE SMF EXCP COUNTER ROUTINE WHICH IS ENTERED FOR:   *
*    EXCP AT IEASMFEX +0                                              *
*    PCI AT IEASMFEX +4                                               *
*    CE/AE AT IEASMFEX +8                                             *
*    VSAM AT IEASMFEX +12                                             *
*    WITH THE PURPOSE OF COUNTING EXCPS UNLESS ANY OF THE FOLLOWING   *
*    CONDITIONS ARE TRUE: 1) THERE IS NO TCT 2) THERE IS NO TCTTIOT,  *
*    3) NO MATCH IN TCT LOOKUP TABLE, 4) NO MATCH FOR UCB             *
*    IN TCT COUNTER TABLE FOR PROPER DD ENTRY. IF NONE OF THESE ARE   *
*    TRUE, THE EXCP COUNT FIELD IN THE PROPER TCT DEVICE ENTRY IS     *
*    INCREMENTED BY CONTENTS OF REG1 AND THE IOSM FIELD OF THE ASCB IS*
*    INCREMENTED BY CONTENTS OF REG1 FOR THE OPTIMIZER'S USE (ALSO    *
*    UPDATED FOR NO TCTTIOT). THIS ROUTINE IS ENTERED FOR     @ZA04379*
*    EXCP COUNTS FOR PROBLEM PROGRAM KEYS ONLY.               @ZA04379*
*                                                                     *
* ENTRY POINTS                                                        *
*         IEASMFEX - 4 ENTRY POINTS AS EXPLAINED IN FUNCTION ABOVE    *
*                                                                     *
* INPUT                                                               *
*    REGISTER 0 - TCB@                                                *
*    REGISTER 1 - INPUT COUNT                                 @ZA04379*
*    REGISTER 3 - DEB@                                                *
*    REGISTER 4 - DCB@(NOT USED)                                      *
*    REGISTER 7 - UCB@                                                *
*                                                                     *
* OUTPUT                                                              *
*    COUNTING DONE - PROPER EXCP COUNT IN TCT INCREASED BY VALUE IN R1*
*                    AND ASCBIOSM FIELD INCREASED BY VALUE IN REG1    *
*    NO COUNTING BECAUSE NO TCTTIOT - ASCBIOSM FIELD INCREASED BY     *
*    VALUE IN REG1 (OTHERWISE NO OUTPUT GENERATED)                    *
*                                                                     *
* EXTERNAL REFERENCES                                                 *
*         NONE                                                        *
*                                                                     *
* EXITS,NORMAL                                                        *
*    RETURN TO CALLER VIA REG 14                                      *
*    REGISTERS 0-9 & 14 REMAIN UNCHANGED THROUGHOUT SMFEX             *
*    REGISTERS 10-13 & 15 ARE NOT RESTORED UPON RETURN                *
*                                                                     *
* EXITS,ERROR                                                         *
*    NONE                                                             *
*                                                                     *
* TABLES/WORK AREAS                                                   *
*    -CONTROL AREAS REFERENCED                                        *
*    TCB                                                              *
*    TCT                                                              *
*    DEB                                                              *
*    DSAB                                                             *
*    ASCB                                                             *
*    PSA                                                              *
*    -CONSTANTS                                                       *
*                                                                     *
* ATTRIBUTES                                                          *
*    REENTRANT, RESIDENT, SUPERVISOR STATE, KEY 0, LOCAL LOCK HELD    *
*                                                                     *
* CHARACTER CODE DEPENDENCY                                           *
*    NONE                                                             *
*                                                                     *
* NOTES                                                               *
*    (MAPPING MACROS)- IHAASCB,IKJTCB,IEFTCT,IHADSAB,IEZDEB,          *
*    IHAPSA & IEFTIOT1                                       @ZA00896 *
*                                                                     *
*                                                                     *
*    REGISTER EQUATES
*
TCBLOC   EQU   0                   @ OF TCB ON ENTRY
DEBLOC   EQU   3                   @ OF DEB ON ENTRY
DCBLOC   EQU   4                   @ OF DCB ON ENTRY
UCBLOC   EQU   7                   @ OF UCB ON ENTRY
TCTIOT   EQU   10                  TO BASE LOOKUP & DD ENTRY TABLES
CSCOMPAR EQU   10                  TO INCREMENT ASCBIOSM (CS LOGIC)
TCT@     EQU   11                  @ OF TCT FROM THE TCB (BASE)
TCTIOTDD EQU   11                  BASE FOR TCTTIOT DD ENTRIES
CSWORK   EQU   11                  WORK REG FOR ASCBIOSM (CS LOGIC)
TCB@     EQU   12                  @ OF TCB FROM REG 0 (BASE)
DEB@     EQU   12                  TO BASE DEB PREFIX & EXTENSION
DSAB@    EQU   12                  @ OF DSAB FROM DEB EXTENSION (BASE)
LASTSLOT EQU   12                  TO TEST FOR END OF TCT LOOKUP TABLE
UCBCOUNT EQU   12                  # OF UCB'S FOR SEARCH LOOP CONTROL
EXCPCTR  EQU   12                  TO INCREMENT EXCP COUNT
OFFSET   EQU   13                  DD ENTRY OFFSET IN TIOT
UCB@     EQU   13                  @ OF UCB FROM REG 7
PSA@     EQU   13                  @ OF PSA TO GET ASCB@ (BASE)
ASCB@    EQU   13                  @ OF ASCB FROM PSA (BASE)
TIOTP    EQU   13                  TIOT PTR                    @ZA00896
RETURN@  EQU   14                  RETURN POINT IN CALLER'S ROUTINE
ENTRY@   EQU   15                  VARIABLE ENTRY POINT TO SMFEX (BASE)
ZERO     EQU   0                   0 DISPLACEMENT & REG 0
*
*    NON-REGISTER EQUATES
*
Z        EQU   8                   C-C MASK FOR BCR ON ZERO
NE       EQU   7                   C-C MASK FOR BCR ON NOT EQUAL
NO       EQU   14                  C-C MASK FOR BCR ON NOT ONES
EQ       EQU   8                   C-C MASK FOR BCR ON EQUAL
NEXTSLOT EQU   4                   LOOKUP TABLE ENTRY LENGTH
NEXTNTRY EQU   8                   COUNTER TABLE DEVICE ENTRY LENGTH
VAMDS    EQU   X'40'               MASK TO TEST FOR A VAM DATASET
CHKPT    EQU   X'3F'               MASK TO TEST FOR A CHKPT SVRB
*
*    ENTRY POINT VARIES BY CALLER BUT PROCESSING IS SAME FOR ALL
*
IEASMFEX CSECT                                                 @YM03759
*A 54600                                                       @YM03759
*A 088100-088300,092600                                        @YM00540
*C 088000,089000,092500                                        @YM00540
*D 064000-065500                                               @YM06529
*C 007500,066000                                               @YM06529
*A 034600,045700,084000-084100,096200-096300                   @ZA00896
*D 084000                                                      @ZA00896
*C 066000                                                      @ZM30154
*                                                              @ZA04379
         USING *,ENTRY@            OBTAIN BASE FOR ENTRY
         B     SMFEX               ENTRY POINT FOR EXCP        @ZA04379
         B     SMFEX               ENTRY POINT FOR PCI         @ZA04379
         B     SMFEX               ENTRY POINT FOR CE/AE       @ZA04379
         B     SMFEX               ENTRY POINT FOR VSAM        @ZA04379
SMFEX    LR    TCB@,TCBLOC         GET THE TCB @ PASSED IN REG 0
         USING TCB,TCB@            ADDRESSABILITY FOR TCB
         L     TCT@,TCBTCT         GET THE TCT @ FROM TCB
         LA    TCT@,ZERO(TCT@)     CLEAR HI ORDER BYTE
         LTR   TCT@,TCT@           IS THERE A TCT?
         BCR   Z,RETURN@           IF NOT - RETURN
         USING SMFTCT,TCT@         ADDRESSABILITY FOR TCT
TIOTCHK  L     TCTIOT,TCTIOTBL     GET I/O TABLE @ FROM TCT
         LA    TCTIOT,ZERO(TCTIOT) CLEAR HI ORDER BYTE
         LTR   TCTIOT,TCTIOT       IS THERE A TCTTIOT?
         BZ    OPTIM               IF NOT - UPDATE ASCBIOSM & RETURN
*
*    CALCULATE OFFSET RATHER THAN GETTING IT FROM DCB (INTEGRITY)
*
         LR    DEB@,DEBLOC         GET DEB @ PASSED IN REG 3
         S     DEB@,SIXTEEN        BACK UP TO DEB PREFIX
         USING DEBPREFX,DEB@       ADDRESSABILITY FOR DEB PREFIX
         L     DEB@,DEBXTNP        GET @ OF DEB EXTENSION
         USING DEBXTN,DEB@         ADDRESSABILITY FOR DEB EXTENSION
         L     DSAB@,DEBXDSAB      GET DSAB @ FROM DEB EXTENSION
         USING DSAB,DSAB@          ADDRESSABILITY FOR DSAB
         L     OFFSET,DSABTIOT     GET TIOT DD ENTRY PTR FROM DSAB
         LR    TCB@,TCBLOC         RELOAD TCB @
         USING TCB,TCB@            GET ADDRESSABILITY BACK FOR TCB
         S     OFFSET,TCBTIO       SUBTRACT TIOT @ GIVING ENTRY OFFSET
*
*    SEARCH LOOKUP TABLE FOR ENTRY WITH PROPER TIOT OFFSET
*
         USING TCTTIOT,TCTIOT      ADDRESSABILITY FOR TCTTIOT
         LA    TCTIOT,TCTIODSP     MOVE TO FIRST LOOKUP ENTRY
         USING TCTIODSP,TCTIOT     ADDRESSABILITY FOR LOOKUP TABLE
         SR    LASTSLOT,LASTSLOT   SET TEST FOR LAST ENTRY IN TABLE
SRCHSLOT CH    LASTSLOT,TCTDCBTD   IS THIS THE LAST LOOKUP ENTRY?
         BCR   EQ,RETURN@          IF SO - RETURN
         CH    OFFSET,TCTDCBTD     DO THESE TIOT OFFSETS MATCH?
         BE    SLOTFND             IF SO - THE CORRECT ENTRY IS FOUND
         LA    TCTIOT,NEXTSLOT(TCTIOT)  ELSE MOVE TO NEXT SLOT
         B     SRCHSLOT            AND TEST IT'S OFFSET
*
*    SEARCH PROPER DD ENTRY FOR CORRECT DEVICE ENTRY (MATCH WITH UCB@)
*
SLOTFND  L     TCTIOTDD,TCTIOTBL   RELOAD TCTIOT @
         LA    TCTIOTDD,ZERO(TCTIOTDD) CLEAR HI ORDER BYTE
         AH    TCTIOTDD,TCTIOTSD   ADD THE TCT DD ENTRY OFFSET
         USING TCTDDENT,TCTIOTDD   ADDRESSABILITY FOR PROPER DD ENTRY
*    IF DATA SET IS VAM - NO NEED TO SEARCH - ONLY 1 DEVICE ENTRY
         TM    TCTFLGS,VAMDS       IS THIS A VAM DATASET?
         BO    EXCP                IF SO - COUNT THE EXCP
         IC    UCBCOUNT,TCTSCTR    GET # OF UCB'S FOR THIS DD ENTRY
         LA    UCB@,ZERO(UCBLOC)   GET ONLY THE UCB @ PASSED IN REG 7
SRCHUCB  CLM   UCB@,3,TCTUCBP      DOES UCB@ MATCH @ IN THIS    Z30ANPF
*                                  ENTRY?                       Z30ANPF
         BE    EXCP                IF SO - COUNT THE EXCP
         LA    TCTIOTDD,NEXTNTRY(TCTIOTDD) ELSE GET NEXT DEVICE ENTRY
         BCT   UCBCOUNT,SRCHUCB    & IF THERE IS ONE TEST IT'S UCB@
         C     LASTSLOT,TCTDCBLE   IS THIS LAST L/U ENTRY      @ZA00896
         BCR   EQ,RETURN@          YES,RETURN                  @ZA00896
         LA    TCTIOT,NEXTSLOT(TCTIOT) ELSE MOVE TO NEXT SLOT  @ZA00896
         LR    TCB@,TCBLOC         TCB@                        @ZA00896
         USING TCB,TCB@                                        @ZA00896
         L     TIOTP,TCBTIO        TIOT@                       @ZA00896
         AH    TIOTP,TCTDCBTD      PTR TO NEXT TIOT DD ENTRY   @ZA00896
         USING TIOENTRY,TIOTP                                  @ZA00896
         CLI   TIOEDDNM,C' '       IS DDNAME BLANK(CONCAT)     @ZA00896
         BCR   NE,RETURN@          NO,RETURN                   @ZA00896
         L     TCT@,TCBTCT         PICK UP TCT PTR             @ZA00896
         SR    UCBCOUNT,UCBCOUNT   CLEAR COUNT REG             @ZA00896
         B     SLOTFND             CHECK DD ENTRY FOR UCB      @ZA00896
*
*    INCREMENT THE EXCP COUNT OF THE PROPER DEVICE ENTRY
*
EXCP     L     EXCPCTR,TCTDCTR     GET EXCP COUNTER FIELD
         ALR   EXCPCTR,REG1        INCREMENT COUNT BY CONTENTS OF REG1
*                                                              @ZA04379
         ST    EXCPCTR,TCTDCTR     STORE THIS COUNTER FIELD BACK
*
*    INCREMENT ASCBIOSM FOR OPTIMIZER
*
OPTIM    SR    PSA@,PSA@           GET PSA@ (LOC. 0-4K)
         USING PSA,PSA@            ADDRESSABILITY FOR PSA
         L     ASCB@,PSAAOLD       GET THIS TCB'S ASCB FROM THE PSA
         USING ASCB,ASCB@          ADDRESSABILITY FOR ASCB
         L     CSCOMPAR,ASCBIOSM   GET IOSM FIELD FROM ASCB-HW @YM00540
*  THE ASCBIOSM FIELD IS ONLY A HALFWORD BUT IS USED IN        @YM00540
*  COMPARE-SWAP(CS) LOGIC HENCE THE FULLWORD LOAD.             @YM00540
*  THE INCREMENT IS ONLY IN THE HIGH ORDER HALFWORD.           @YM00540
         SLL   REG1,MOVE16         MOVE VALUE TO HIGH ORDER    @ZA04379
CHANGED  LR    CSWORK,CSCOMPAR     PUT IT IN WORK REG FOR CS LOGIC
         ALR   CSWORK,REG1         INCREMNT IOSM FOR OPTIMIZER @ZA04379
         CS    CSCOMPAR,CSWORK,ASCBIOSM  STORE IT IF FIELD NOT UPDATED
         BNE   CHANGED             IF UPDATED - GO THRU ADDITION AGAIN
         BR    RETURN@             RETURN TO CALLER
*
*    CONSTANTS
*
MOVE16   EQU   16                                              @ZA04379
REG1     EQU   1                   INPUT REGISTER              @ZA04379
SIXTEEN  DC    F'16'               TO BACK UP TO DEB PREFIX
IDENTIFY DC    CL8'IEASMFEX'       IDENTIFING LABEL
         IKJTCB
         IEFTCT
         IEZDEB
         IHAASCB
         IHADSAB
         IHAPSA
TIOTSECT DSECT                                                 @ZA00896
         IEFTIOT1                                              @ZA00896
         END
