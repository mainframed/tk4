ACCT     TITLE 'HASP SMF INTERFACE ROUTINE'                    @OZ18212
***********************************************************************
*                                                                     *
* MODULE NAME = HASPACCT                                              *
*                                                                     *
* DESCRIPTIVE NAME = HASPACCT                                         *
*                                                                     *
* COPYRIGHT = NONE                                                    *
*                                                                     *
* STATUS = OS/VS2 MVS   --  SEE &VERSION (BELOW) FOR JES2 LEVEL       *
*                                                                     *
* FUNCTION = THE HASPACCT ROUTINE IS A SUBTASK OF JES2 WHICH WRITES   *
*            SMF RECORDS, POINTED TO BY $SMFBUSY, USING SVC 83.       *
*            IF THE HASP SMF BUFFER CONTAINS A JMR (JOB LOG, OR       *
*            COMMON EXIT PARAMETER LIST), THEN THE ROUTINE BRANCHES   *
*            TO THE IEFUJP CSECT, THEN WRITES THE TYPE 26 RECORD      *
*            ONLY IF THE RETURN CODE SO INDICATES.  HASPACCT PUTS     *
*            FREED HASP SMF BUFFERS ON THE $SMFFREE QUEUE AND         *
*            CONTINUES PROCESSING BUFFERS UNITL THERE ARE NONE LEFT   *
*            ON THE BUSY QUEUE, THEN IT WAITS TO BE POSTED BY JES2.   *
*                                                                     *
* NOTES = SEE BELOW                                                   *
*                                                                     *
*    DEPENDENCIES = SMFWTM MACRO TO WRITE SMF RECORDS TO MAN DATA SET *
*                                                                     *
*    RESTRICTIONS = NONE                                              *
*                                                                     *
*    REGISTER CONVENTIONS = R1   =         SMF BUFFER ADDRESSABILITY  *
*                           R3   = WB    = JMR BUFFER ADDRESS         *
*                           R6   = WE    = SMF BUFFER ADDRESS         *
*                           R11  = BASE1 = HCT ADDRESSABILITY         *
*                           R12  = BASE2 = HASPACCT BASE REGISTER     *
*                           R13  = SAVE  = SAVE AREA                  *
*                           R14  = LINK  = RETURN ADDRESS             *
*                           R15  =         ENTRY POINT                *
*                                                                     *
*    PATCH LABEL = NONE                                               *
*                                                                     *
* MODULE TYPE = PROCEDURE ( CSECT TYPE )                              *
*                                                                     *
*    PROCESSOR = ASSEMBLER F                                          *
*                                                                     *
*    MODULE SIZE = SEE $DLENGTH MACRO EXPANSION(S) AT END OF ASSEMBLY *
*                                                                     *
*    ATTRIBUTES = READ ONLY, SERIALLY REUSABLE                        *
*                                                                     *
* ENTRY POINT = HASPACCT                                              *
*                                                                     *
*    PURPOSE = SEE FUNCTION                                           *
*                                                                     *
*    LINKAGE = R1  = ADDRESS HASP ECB (AT INITIAL ENTRY)              *
*              R13 = CALLERS SAVE AREA                                *
*              R14 = RETURN ADDRESS                                   *
*              R15 = ENTRY POINT                                      *
*                                                                     *
* INPUT = AT INITIAL ENTRY, HASP ECB TO BE POSTED, SUBSEQUENTLY       *
*         $SMFBUSY CELL IN HCT AS POINTER TO SMF RECORDS              *
*                                                                     *
* OUTPUT = SMFWTM TO WRITE HASP SMF RECORDS AND ADDING FREE SMF       *
*          BUFFERS TO $SMFFREE CELL IN HCT.                           *
*                                                                     *
* EXIT-NORMAL = RETURN TO CALLER USING RETURN MACRO                   *
*                                                                     *
* EXIT-ERROR = NONE                                                   *
*                                                                     *
* EXTERNAL REFERENCES = SEE BELOW                                     *
*                                                                     *
*    ROUTINES = NONE                                                  *
*                                                                     *
*    DATA AREAS = SEE BELOW                                           *
*                                                                     *
*    CONTROL BLOCKS = SEE $HASPCB MACRO EXPANSION                     *
*                                                                     *
* TABLES = SEE BELOW                                                  *
*                                                                     *
* MACROS = POST, NULL, RETURN, WAIT, SMFWTM, $$POST, $DLENGTH         *
*                                                                     *
* CHANGE ACTIVITY                                                     *
*                                                                     *
*     RELEASE 4.0 = NONE                                              *
*                                                                     *
*     RELEASE 4.1 = NONE                                              *
*                                                                     *
***********************************************************************
         TITLE 'HASP CONTROL BLOCK GENERATION MACRO'
*
*****    $HASPCB   *****           GENERATE HASP CONTROL BLOCKS
*
         SPACE 1
         MACRO
         $HASPCB &DOC=NO,&LIST=NO
         GBLC  &PRINT,&GEN,&DATA
         PUSH  PRINT
         PRINT &PRINT
         $SVT  DOC=&DOC            GENERATE HASP SSVT DSECT
         $HCT  DOC=&DOC            GENERATE HASP HCT DSECT
         $BUFFER DOC=&DOC          GENERATE HASP BUFFER DSECT
         $SMF  DOC=&DOC            GENERATE HASP SMF DSECT
         $JCT  DOC=&DOC            GENERATE HASP JCT DSECT
         SPACE 1
         POP   PRINT
         PRINT &GEN,&DATA          SET ASSEMBLY PRINT OPTIONS
         MEND
         TITLE 'HASP ACCOUNTING ROUTINE'
         SPACE 5
HASPACCT START 0                   HASP ACCOUNTING ROUTINE
         SPACE 5
         COPY  $HASPGEN            COPY HASPGEN PARAMETERS
         TITLE 'HASP ACCOUNTING ROUTINE'
         SPACE 5
HASPACCT $ENTRY CSECT=YES,BASE=R15 PROVIDE PROCESSOR ENTRY POINT
         DROP  R15                 KILL ENTRY ADDRESSABILITY
         SPACE 5
*
*                             DOCUMENTATION OPTIONS FOR THIS ASSEMBLY
*
         SPACE 3
        $SYSPARM (OFF,GEN,NODATA,NO,NO)
         SPACE 5
*
*                             GENERATE HASP CONTROL BLOCKS
*
         SPACE 3
        $HASPCB DOC=&DOC,LIST=&LIST  GENERATE HASP CONTROL BLOCKS
         TITLE 'HASP ACCOUNTING ROUTINE FOR SMF'
ABEGIN   STM   R14,R12,12(R13)     SAVE REGISTERS
         BALR  BASE2,0             ESTABLISH BASE
         USING *,BASE2
         LR    BASE1,R1            RELOAD HCT ADDRESS                R4
         USING SMFDSECT,R1         SMF BUFFER ADDRESSABILITY
         GETMAIN R,LV=20*4         GET SAVE AREA                     R4
         ST    R13,4(,R1)          STORE BACKWARD POINTER            R4
         LR    WC,R13
         LR    R13,R1              ADDRESS MY SAVE AREA              R4
         USING ASVDSECT,R13        PROVIDE SAVE AREA ADDRESSABILITY  R4
         ST    R13,8(WC)           STORE FORWARD POINTER
         POST  $PSMFECB            POST HASP INITIALIZATION          R4
         B     AWAIT               WAIT FOR HASP POST FOR WORK
AENDQ    NULL  END OF $SMFBUSY QUEUE
         TM    $STATUS,$SYSEXIT    TEST FOR WITHDRAWAL OF HASP
         BZ    AWAIT               NO
         L     R13,ASAVAREA+4      RETURN AFTER $PHASP COMMAND
         RETURN (14,12),RC=0
AWAIT    LA    R1,$ACCTECB         WAIT TO BE POSTED FOR WORK BY HASP
         WAIT  ECB=(1)
         XC    $ACCTECB,$ACCTECB   RESET POST ECB
*    REMOVE A SMF BUFFER FROM $SMFBUSY
AFREESMF NULL
* REMOVE SMF BUFFER FROM END OF $SMFBUSY CHAIN
         SR    WB,WB               ZERO JMR BUF. ADDR REGISTER
ARECYCLE C     WB,$SMFBUSY         IS THE BUSY CHAIN EMPTY
         BZ    AENDQ               YES
         LA    R1,$SMFBUSY         ADDRESS OF BUFFERS QUEUED
ARETRY   LR    WA,R1               SAVE POINTER TO PREVIOUS BUFFER
         L     R1,SMFCHAIN         GET NEXT BUFFER ON CHAIN
         C     WB,SMFCHAIN         IS THIS THE END OF THE CHAIN
         BNE   ARETRY              NO
         CS    R1,WB,0(WA)         UPDATE CHAIN POINTER
         BNE   ARECYCLE            IF CHAIN CHANGED, RETRY SEARCH
         LR    WE,R1               SAVE FOR AUNQSMF
         CLI   SMFTYPE,SMFJMRTP    IS BUFFER JMR
         BNE   AWRITSMF            NO
         MVI   SMFTYPE,SMFRECTP    REINITIALIZE SMFTYPE
         LR    WB,R1               SAVE R1 ADDR FOR AUNQSMF
         L     WE,JMRCHAIN         SAVE PURGE RECORD PTR. FOR AUNQ
         LA    WD,SMFJMR           SET UP ADDR OF JMR
         ST    WD,APRGPARM         PUT ADDR INTO PARMLIST FOR IEFUJP
         LA    R1,SMFRDW-SMFDSECT(WE)   BEGINNING OF PURGE RECORD
         ST    R1,APRGREC          PUT ADDR PURGE RECORD IN PARMLIST
         LA    R1,APRGPARM         PUT ADDR. OF PARM. LIST IN R1
         L     R15,$SSVT           ADDRESS OF SSVT
         USING SSVT,R15            $SSVT ADDRESSABILITY
         L     R15,$SVSMFJP        ADDRESS OF IEFUJP
         DROP  R15                 DROP SSVT ADDRESSABILITY
         BALR  LINK,R15            CALL IEFUJP
         C     R15,=F'4'           WRITE SMF RECORD
         BE    AUNQSMF             NO
         LR    R1,WE               SET UP SMF RECORD ADDR. IN R1
AWRITSMF TM    SMF26FLG,SMFNO26    SHOULD RECORD BE WRITTEN
         BO    AUNQSMF             NO
         LA    R1,SMFRDW-SMFDSECT(R1)   DISP. OF RECORD IN SMF BUF
         SMFWTM (1)                WRITE SMF RECORD
AUNQSMF  NULL                      RETURN BUFFERS TO $SMFFREE
         LR    R1,WE               GET SMF RECORD BUFFER ADDRESS
         NI    SMF26FLG,X'FE'      TURN OFF ANY NO WRITE INDICATOR
* PLACE SMF BUFFER(S) ON BEGINNING OF $SMFFREE CHAIN
         L     WD,$SMFFREE         SAVE $SMFFREE FOR POST
AFREBUF  ST    WD,SMFCHAIN         RETURN SMF RECORD BUFFER TO
         CS    WD,R1,$SMFFREE         FREE CHAIN
         BNE   AFREBUF             IF CHAIN CHANGED, RETRY STORE
         LTR   WB,WB               IS THERE A JMR BUFFER TO BE FREED
         BZ    APOST               NO
         LR    R1,WB
         L     WA,$SMFFREE         RETURN JMR BUFFER TO FREE CHAIN
AFREJMR  ST    WA,SMFCHAIN         UPDATE POINTER
         CS    WA,R1,$SMFFREE      UPDATE $SMFFREE
         BNE   AFREJMR             IF CHAIN CHANGED, RETRY STORE
APOST    NULL
         LTR   WD,WD               WAS $SMFFREE EMPTY$
         BNZ   AFREESMF            GO CHECK FOR MORE WORK
        $$POST TYPE=SMF,R11=HCT    $$POST HASP FOR SMF
         B     AFREESMF            GO CHECK FOR MORE WORK
         EJECT                                                       R4
ASVDSECT DSECT                     SAVE AREA DSECT                   R4
ASAVAREA DS    18F                 SAVE AREA
*    THE FOLLOWING PARAMETER LIST IS POINTED TO IN R1 WHEN IEFUJP
*    IS CALLED- IT POINTS TO THE EXIT PARAMETER LIST(JMR)&PURGE RECORD
APRGPARM DS    F                   POINTER TO JMR DATA(JOB LOG)
APRGREC  DS    F                   POINTER TO RDW FOR PURGE REC.
HASPACCT CSECT                     END OF SAVE AREA DSECT            R4
         LTORG
$DLENGTH $DLENGTH                  COMPUTE CONTROL SECTION LENGTH
APARNUM  DC    CL5'32566'          APAR NUMBER
         END
