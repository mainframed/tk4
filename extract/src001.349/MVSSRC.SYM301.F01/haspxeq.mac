XEQ      TITLE 'HASP EXECUTION SERVICES PROLOG'                @OZ18212
***********************************************************************
*                                                                     *
* MODULE NAME -- HASJES2 (HASPXEQ CSECT)                              *
*                                                                     *
* DESCRIPTIVE NAME -- HASPXEQ CSECT OF JES2 MAIN MODULE               *
*                                                                     *
* COPYRIGHT = NONE                                                    *
*                                                                     *
* STATUS = OS/VS2 MVS   --  SEE &VERSION (BELOW) FOR JES2 LEVEL       *
*                                                                     *
* FUNCTION -- PASS JOBS THROUGH JCL CONVERSION.  SELECT JOBS FOR EXE- *
*             CUTION.  PERFORM SERVICES FOR JOBS IN EXECUTION.  SUP-  *
*             PORT ACCESS TO HELD DATASETS BY CONVERSATIONAL SYSTEMS  *
*             AND BY EXTERNAL WRITERS.                                *
*                                                                     *
* NOTES -- 1)  THE FIVE PROCESSORS IN THIS MODULE ARE INDEPENDENTLY   *
*              DISPATCHED BY THE JES2 DISPATCHER.                     *
*          2)  THE INSTRUCTIONS, CONSTANTS AND LITERALS FOR EACH PRO- *
*              CESSOR ARE CODED CONTIGUOSLY.                          *
*          3)  SEE BELOW                                              *
*                                                                     *
* DEPENDENCIES -- NONE                                                *
*                                                                     *
* RESTRICTIONS -- NONE                                                *
*                                                                     *
* REGISTER CONVENTIONS -- R10 = JCT ADDRESS                           *
*                         R11 = HCT ADDRESS                           *
*                         R12 = PROCESSOR ADDRESSABILITY              *
*                         R13 = PCE ADDRESS                           *
*                       R0-R9 = SEE ENTRY POINT DOCUMENTATION         *
*                                                                     *
* PATCH LABEL -- NONE                                                 *
*                                                                     *
* MODULE TYPE -- PROCESSOR                                            *
*                                                                     *
*    PROCESSOR -- ASSEMBLER F                                         *
*                                                                     *
*    MODULE SIZE = SEE $DLENGTH MACRO EXPANSION(S) AT END OF ASSEMBLY *
*                                                                     *
*    ATTRIBUTES -- READ ONLY, AFTER PROCESSOR AND SUBTASK             *
*                  INITIALIZATION, AND HASP REENTRANT                 *
*                                                                     *
* PROCESSOR ENTRY POINTS -- HASPCNVT = INITIAL ENTRY TO JCL CONVER-   *
*                                      SION PROCESSOR.                *
*                           HASPXEQ  = INITIAL ENTRY TO EXECUTION     *
*                                      PROCESSOR.                     *
*                           HASPHOLD = INITIAL ENTRY TO HOLD QUEUE    *
*                                      PROCESSOR.                     *
*                           HASPTIME = INITIAL ENTRY TO TIME EXCES-   *
*                                      SION PROCESSOR.                *
*                           HASPPSO  = INITIAL ENTRY TO PROCESS SYS-  *
*                                      OUT PROCESSOR.                 *
*                                                                     *
*    PURPOSE -- SEE FUNCTION                                          *
*                                                                     *
*    LINKAGE -- SEE ENTRY POINT DOCUMENTATION                         *
*                                                                     *
*    INPUT -- SEE ENTRY POINT DOCUMENTATION                           *
*                                                                     *
*    OUTPUT -- SEE ENTRY POINT DOCUMENTATION                          *
*                                                                     *
*    EXIT - NORMAL -- SEE ENTRY POINT DOCUMENTATION                   *
*                                                                     *
*    EXIT - ERROR -- SEE ENTRY POINT DOCUMENTATION                    *
*                                                                     *
* EXTERNAL REFERENCES -- SEE BELOW                                    *
*                                                                     *
*   ROUTINES -- SVC 1, SVC 2, SVC 8, SVC 9, SVC 10, SVC 11, SVC 19,   *
*               SVC 20, SVC 35, SVC 41, SVC 42, SVC 62, SVC 120       *
*               $#ADD, $#BLD, $#CKPT, $#JCT, $#PUT, $#REM,            *
*               $$POST, $BFRBLD, $DISTERR, $ERROR, $EXCP,             *
*               $FREBUF, $FRELOK, $GETBUF, $GETLOK, $IOERROR,         *
*               $JCAN, $PGSRVC, $PURGE, $QCKPT, $QGET, $QLOC,         *
*               $QMOD, $QPUT, $QSUSE, $STIMER, $TIME, $TRACK,         *
*               $TTIMER, $WAIT, $WTO, $XMPOST                         *
*                                                                     *
*    DATA AREAS -- SEE $HASPCB MACRO EXPANSION                        *
*                                                                     *
* CONTROL BLOCKS -- SEE $HASPCB MACRO EXPANSION                       *
*                                                                     *
* TABLES -- SEE $HASPCB MACRO EXPANSION                               *
*                                                                     *
* MACROS -- ATTACH, CALL, CLOSE, DELETE, DETACH, ESTAE, FREEMAIN,     *
*           GETMAIN, IDENTIFY, LOAD, OPEN, POST, WAIT, WTO            *
*                                                                     *
* CHANGE ACTIVITY                                                     *
*                                                                     *
*     RELEASE 4.0 = OZ00790,OZ02446,OZ03286,OZ03308,OZ03309,OZ04332,  *
*                   OZ04345,OZ04958,OZ04993,OZ05762,OZ08188,OZ08229,  *
*                   OZ09043,OZ09094,OZ09108                           *
*                                                                     *
*     RELEASE 4.1 = OZ12300,OZ13228,OZ14441,OZ15815,OZ15841           *
*                                                                     *
***********************************************************************
         TITLE 'HASP CONTROL BLOCK GENERATION MACRO'
         SPACE 5
*
*****   $HASPCB   *****       GENERATE HASP CONTROL BLOCKS
*
         SPACE 1
         MACRO
         $HASPCB &DOC=NO,&LIST=NO
         GBLC  &PRINT,&GEN,&DATA
         PUSH  PRINT
         PRINT &PRINT
         $PSA  LIST=&LIST          GENERATE OS PSA DSECT
         $CVT  LIST=&LIST          GENERATE OS CVT DSECT
         $SSOB (SO,CS,JS,RQ,RR),LIST=&LIST  OS SSOB DSECT            R4
         $DCB  LIST=&LIST          GENERATE OS DCB DSECT
         $ACB  LIST=&LIST          GENERATE OS ACB DSECT
         $DEB  LIST=&LIST          GENERATE OS DEB DSECT
         $NEL  LIST=&LIST          GENERATE OS NEL DSECT
         $TEXT LIST=&LIST          GENERATE OS TEXT DSECT
         $KEYS LIST=&LIST          GENERATE OS TEXT KEYS
         $SDWA LIST=&LIST          GENERATE OS SDWA DSECT      @OZ29021
         $TGM  DOC=&DOC            GENERATE HASP TGM DSECT
         $TAB  DOC=&DOC            GENERATE HASP TAB DSECT           R4
         $SVT  DOC=&DOC            GENERATE HASP SSVT DSECT
         $SJB  DOC=&DOC            GENERATE HASP SJB DSECT
         $HCT  DOC=&DOC            GENERATE HASP HCT DSECT
         $PCE  DOC=&DOC            GENERATE HASP PCE DSECT
         $BUFFER DOC=&DOC          GENERATE HASP BUFFER DSECT
         $JQE  DOC=&DOC            GENERATE HASP JQE DSECT
         $JOE  DOC=&DOC            GENERATE HASP JOE DSECT
         $JOT  DOC=&DOC            GENERATE HASP JOT DSECT
         $QSE  DOC=&DOC            GENERATE HASP QSE DSECT
         $JCT  DOC=&DOC            GENERATE HASP JCT DSECT
         $PDDB DOC=&DOC            GENERATE HASP PDDB DSECT
         $IOT  DOC=&DOC            GENERATE HASP IOT DSECT
         $CAT  DOC=&DOC            GENERATE HASP CAT DSECT
         $SCAT DOC=&DOC            GENERATE HASP SCAT DSECT
         $RAT  DOC=&DOC            GENERATE HASP RAT DSECT
         $DCT  DOC=&DOC            GENERATE HASP DCT DSECT
         $TQE  DOC=&DOC            GENERATE HASP TQE DSECT
         $HQR  DOC=&DOC            GENERATE HASP HQR DSECT
         $HQT  DOC=&DOC            GENERATE HASP HQT DSECT
         $PIT  DOC=&DOC            GENERATE HASP PIT DSECT
         $PSO  DOC=&DOC            GENERATE HASP PSO DSECT
         $RDRWORK DOC=&DOC         GENERATE HASP RDRWORK DSECT
         $CNVWORK DOC=&DOC         GENERATE HASP CNVWORK DSECT
         SPACE 1
         POP   PRINT
         PRINT &GEN,&DATA          SET ASSEMBLY PRINT OPTIONS
         MEND
         TITLE 'HASP SJB DE-QUEUE MACRO'
         SPACE 5
*
*****    $DEQSJB   *****           DE-QUEUE AN SJB FROM A QUEUE
*
         SPACE 2
         MACRO
&NAME    $DEQSJB &Q,&NONE
&NAME    BAL   LINK,XSJBLOCK       OBTAIN SJB QUEUES LOCK
         AIF   ('&Q' NE '$SVJPCLS').A
         L     WA,$SVJPCLS         GET FIRST SJB ON QUEUE
         LTR   WA,WA               TEST FOR EMPTY QUEUE
         BZ    &NONE               BR IF NO SJBS QUEUED
         MVC   $SVJPCLS,SJBXQCHN    ELSE DE-QUEUE THE SJB
         MEXIT
.A       LA    WD,&Q                AND DE-QUEUE THE SJB
         BAL   LINK,XDEQSJB          FROM ITS QUEUE
         AIF   ('&NONE' EQ '').END
         BNZ   &NONE               BR IF SJB WAS NO LONGER QUEUED
.END     MEND
         TITLE 'HASP EXECUTION PROCESSORS'
         SPACE 5
HASPXEQ  START 0                   HASP EXECUTION PROCESSORS
         SPACE 5
         COPY  $HASPGEN            COPY HASPGEN PARAMETERS
         TITLE 'HASP CONTROL BLOCKS'
         SPACE 5
HASPXEQ  $ENTRY BASE=,CSECT=YES    PROVIDE PROCESSOR IDENTIFICATION
         SPACE 5
*
*                             SYMBOLIC REGISTER DEFINITIONS
*
         SPACE 2
XL1      EQU   WE                  LINK REGISTER
XL2      EQU   WF                  LINK REGISTER
         EJECT
         SPACE 5
*
*                             DOCUMENTATION OPTIONS FOR THIS ASSEMBLY
*
         SPACE 3
        $SYSPARM (OFF,GEN,NODATA,NO,NO)
         SPACE 5
*
*                             GENERATE HASP CONTROL BLOCKS
*
         SPACE 3
        $HASPCB DOC=&DOC,LIST=&LIST  GENERATE HASP CONTROL BLOCKS
         TITLE 'HASP JCL CONVERSION PROCESSOR -- INITIAL ENTRY POINT'
***********************************************************************
*                                                                     *
* PROCESSOR NAME -- HASPCNVT                                          *
*                                                                     *
* DESCRIPTIVE NAME -- JES2 JCL CONVERSION PROCESSOR                   *
*                                                                     *
