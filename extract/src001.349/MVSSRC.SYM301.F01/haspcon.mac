CON      TITLE 'HASP CONSOLE SUPPORT - PROLOG'                 @OZ18212
***********************************************************************
*                                                                     *
* MODULE NAME = HASJES20 ( HASPCON CSECT )                            *
*                                                                     *
* DESCRIPTIVE NAME = HASPCON CSECT OF JES2 MAIN MODULE                *
*                                                                     *
* COPYRIGHT = NONE                                                    *
*                                                                     *
* STATUS = OS/VS2 MVS   --  SEE &VERSION (BELOW) FOR JES2 LEVEL       *
*                                                                     *
* FUNCTION = THE HASPCON CSECT PROVIDES $WTO, $GETCMB, $DOM,          *
*            AND $FRECMB SERVICES TO THE PROCESSORS OF THE MAIN       *
*            JES2 TASK DURING NORMAL JOB PROCESSING, SEE ENTRY        *
*            POINTS FOR DOCUMENTATION OF EACH SERVICE ROUTINE.        *
*                                                                     *
* NOTES = SEE BELOW                                                   *
*                                                                     *
*    DEPENDENCIES = IDENTIFY MACRO TO ALLOW ATTACHING A DAUGHTER      *
*                   TASK WITH ENTRY CONTAINED WITHIN THIS CSECT.      *
*                   SEE ASSEMBLY HASPINIT FOR ATTACH.                 *
*                                                                     *
*    RESTRICTIONS = NONE                                              *
*                                                                     *
*    REGISTER CONVENTIONS = SEE ENTRY POINT DOCUMENTATION             *
*                                                                     *
*    PATCH LABEL = NONE                                               *
*                                                                     *
* MODULE TYPE = PROCEDURE ( CSECT TYPE )                              *
*                                                                     *
*    PROCESSOR = ASSEMBLER F                                          *
*                                                                     *
*    MODULE SIZE = SEE $DLENGTH MACRO EXPANSION(S) AT END OF ASSEMBLY *
*                                                                     *
*    ATTRIBUTES = REENTRANT                                           *
*                                                                     *
* ENTRY POINT =    $WTOR    - ENTRY FROM $WTO MACRO TO QUEUE          *
*                             CONSOLE MESSAGE FOR DISPLAY             *
*                  HASPWQUE - ENTRY FOR SPECIAL PURPOSE QUEUING       *
*                             OF CMBS                                 *
*                  $WTOCR   - ENTRY FROM $WTO CMB=YES MARCO TO        *
*                             QUEUE CONSOLE MESSAGE FOR DISPLAY       *
*                  $GETCMBR - ENTRY FROM $GETCMB MACRO TO GET A       *
*                             CONSOLE MESSAGE BUFFER                  *
*                  $DOMR    - ENTRY FROM $DOM MACRO TO DELETE         *
*                             OPERATOR MESSAGE                        *
*                  $FRECMBR - ENTRY FROM $FRECMB MACRO TO FREE A      *
*                             CONSOLE MESSAGE BUFFER                  *
*                  $HASPWTO - ENTRY FROM ATTACH MACRO ISSUED BY       *
*                             HASPINIT TO PERFORM ALL SVC 34 AND      *
*                             35 REQUESTS FOR THE MAIN JES2 TASK      *
*                             DURING JOB PROCESSING                   *
*                                                                     *
*    PURPOSE = SEE FUNCTION                                           *
*                                                                     *
*    LINKAGE = SEE ENTRY POINT DOCUMENTATION                          *
*                                                                     *
* INPUT = SEE ENTRY POINT DOCUMENTATION                               *
*                                                                     *
* OUTPUT = SEE ENTRY POINT DOCUMENTATION                              *
*                                                                     *
* EXIT-NORMAL = SEE ENTRY POINT DOCUMENTATION                         *
*                                                                     *
* EXIT-ERROR = NONE                                                   *
*                                                                     *
* EXTERNAL REFERENCES = SEE BELOW                                     *
*                                                                     *
*    ROUTINES = $$POST ROUTINE IN HASPSSSM, SVC 3                     *
*                                                                     *
*    DATA AREAS = SEE $HASPCB MACRO EXPANSION                         *
*                                                                     *
*    CONTROL BLOCKS = SEE $HASPCB MACRO EXPANSION                     *
*                                                                     *
* TABLES = NONE                                                       *
*                                                                     *
* MACROS = SSVT, POST, WAIT, TIME, DOM                                *
*                                                                     *
* CHANGE ACTIVITY                                                     *
*                                                                     *
*     RELEASE 4.0 = OZ05766                                           *
*                                                                     *
*     RELEASE 4.1 = NONE                                              *
*                                                                     *
***********************************************************************
         TITLE 'HASP CONTROL BLOCK GENERATION MACRO'
         SPACE 5
*
*****    $HASPCB  *****      GENERATE HASP CONTROL BLOCKS
*
         SPACE 1
         MACRO
         $HASPCB &DOC=NO,&LIST=NO
         GBLC  &PRINT,&GEN,&DATA
         PUSH  PRINT
         PRINT &PRINT
         $SVT  DOC=&DOC            GENERATE HASP SSVT DSECT
         $HCT  DOC=&DOC            GENERATE HASP HCT DSECT
         $PCE  DOC=&DOC            GENERATE HASP PCE DSECT
         $BUFFER DOC=&DOC          GENERATE HASP BUFFER DSECT
         $CMB  DOC=&DOC            GENERATE HASP CMB DSECT
         $JQE  DOC=&DOC            GENERATE HASP JQE DSECT          R41
         $JCT  DOC=&DOC            GENERATE HASP JCT DSECT
         $PIT  DOC=&DOC            GENERATE HASP PIT DSECT
         $CSA  DOC=&DOC            GENERATE HASP CSA DSECT
         SPACE 1
         POP   PRINT
         PRINT &GEN,&DATA          SET ASSEMBLY PRINT OPTIONS
         MEND
         TITLE 'HASP CONSOLE ROUTINES'
         SPACE 5
HASPCON  START 0                   HASP CONSOLE PROCESSOR
         SPACE 5
         COPY  $HASPGEN            COPY HASPGEN PARAMETERS
         TITLE 'HASP CONSOLE ROUTINES'
         SPACE 5
HASPCON  $ENTRY CSECT=YES,BASE=BASE2  PROVIDE PROCESSOR ENTRY POINT
         SPACE 5
*
*                             EXTERNAL REFERENCES
*
         SPACE 3
         ENTRY $DOMR               DELETE OPERATOR MESSAGE
         ENTRY $FRECMBR            FREE CMB
         ENTRY $GETCMBR            GET CMB
         ENTRY $HASPWTO            HASP WTO SUBTASK
         ENTRY $WTOR               MESSAGE BUILD AND BUFFERING
         ENTRY $WTOCR              ENTRY TO $WTO WITH CMB ROUTINE
         ENTRY HASPWQUE            BUFFER QUEUING ROUTINE            R4
         SPACE 5
         TITLE 'HASP CONTROL BLOCKS'
         SPACE 5
*
*                             DOCUMENTATION OPTIONS FOR THIS ASSEMBLY
*
         SPACE 3
        $SYSPARM (OFF,GEN,NODATA,NO,NO)
         SPACE 5
*
*                             GENERATE HASP CONTROL BLOCKS
*
         SPACE 3
        $HASPCB DOC=&DOC,LIST=&LIST  GENERATE HASP CONTROL BLOCKS
         SPACE 2
         TITLE 'HASP CONSOLE BUFFERING ROUTINE'
***********************************************************************
*                                                                     *
*        $WTO - WRITE TO OPERATOR ROUTINE                             *
*                                                                     *
* FUNCTIONS -                                                         *
*                                                                     *
*                                                                     *
*    (2) OBTAIN A CMB FROM THE $SVCMBFQ QUEUE. IF NO CMBS ARE         *
*        AVAILABLE WAIT THE PROCESSOR OR RETURN WITH ZERO CC AND      *
*        R15 ZERO. IF $DOMACT IS SPECIFIED REDUCE $SVCOMCT BY         *
*        ONE AND IF THE COUNT GOES BELOW WDOMMIN SIMULATE NO CMB      *
*        AVAILABLE. IF NO CMBS ARE AVAILABLE AND THE REQUEST IS       *
*        FOR A UCMID (RESTRICTED TO COMMAND PROCESSOR) THE            *
*        $WCOMRES QUEUE IS TESTED FOR THE PRESENCE OF A RESERVED      *
*        CMB AND USED IF PRESENT.                                     *
*                                                                     *
*    (3) INSERT TIME STAMP AND JOB NUMBER (IF REQUESTED).             *
*                                                                     *
*    (4) INSERT HASP MESSAGE ID.                                      *
*                                                                     *
*    (5) MOVE MESSAGE TEXT INTO CMB.                                  *
*                                                                     *
*    (6) QUEUE CMB TO REMOTE CONSOLE OR COMMUNICATIONS SUBTASK.       *
*                                                                     *
*    (7) PROVIDE CMB ADDRESS TO CALLER IF $DOMACT REQUESTED.          *
*                                                                     *
* INPUT REGISTERS -                                                   *
*                                                                     *
*        R0    = $WTO PARAMETERS AS FOLLOWS -                         *
*        R1    = ADDRESS OF TEXT INCLUDING TWO BYTE MESSAGE ID.       *
*        R10   = ADDRESS OF JCT BUFFER IF WFJOBN ON.                  *
*        R13   = ADDRESS OF PCE.                                      *
*        LINK  = RETURN - 4 BYTES.                                    *
*        R15   = ENTRY BASE.                                          *
*                                                                     *
* OUTPUT REGISTERS -                                                  *
*                                                                     *
*        R1    = ADDRESS OF $DOMACT CMB.                              *
*        R15   = 0 - NO CMB AVAILABLE (CONDITION CODE ZERO),          *
*                OTHERWISE MESSAGE WAS QUEUED OR SCREENED OUT.        *
*                                                                     *
***********************************************************************
         EJECT                                                       R4
***********************************************************************
*                                                                     *
*        LOCAL DEFINITIONS                                            *
*                                                                     *
***********************************************************************
WPLFLAG  EQU   CMBFLAG-CMBFLAG+CSAW FLAG                             R4
WPLLEVEL EQU   CMBLEVEL-CMBFLAG+CSAW LIST LEVEL                      R4
WPLTYPE  EQU   CMBTYPE-CMBFLAG+CSAW FORMAT TYPE                      R4
WPLLENG  EQU   CMBML-CMBFLAG+CSAW  MESSAGE LENGTH                    R4
WPLTO    EQU   CMBTO-CMBFLAG+CSAW  TO SYSTEM INFORMATION             R4
WPLOUT   EQU   CMBOUT-CMBFLAG+CSAW OUTPUT INFORMATION                R4
WPLRMT   EQU   CMBRMT-CMBFLAG+CSAW REMOTE NUMBER                     R4
WPLDESC  EQU   CMBDESC-CMBFLAG+CSAW DESCRIPTOR CODES                 R4
WPLUCMA  EQU   CMBUCMA-CMBFLAG+CSAW UCM AREA                         R4
WPLROUT  EQU   CMBROUT-CMBFLAG+CSAW LOGICAL CONSOLE ROUTINGS         R4
WPLLINET EQU   CMBLINET-CMBFLAG+CSAW LINE TYPE FIELD                 R4
         SPACE 2                                                     R4
WPLNLOG  EQU   CMBFLAGT+CMBFLAGC+CMBFLAGU+CMBFLAGW NOT LOGICAL CONSOLE
WPLCONT  EQU   CMBFLAGJ+CMBFLAGD+CMBFLAGS SPECIAL $WTO CONTROLS      R4
WPLNOLEN EQU   CMBFLAGR            MSG LEN IN R0 FOR STD-FORM MACRO  R4
         EJECT
***********************************************************************
*                                                                     *
*        BUFFER QUEUEING PREFIX                                       *
*                                                                     *
***********************************************************************
         USING CSADSECT,R5                                           R4
         USING SSVT,R8
WWFREE   BAL   LINK,WFREE          FREE CMB
         SPACE 1                                                     R4
WTESTW   TM    WPLFLAG,CMBFLAGD    DID CALLER WISH TO WAIT...        R4
         BO    WSOUT               BR IF NO TO RETURN                R4
         LM    R0,R14,WSAVREGS      ELSE RESTORE REGISTERS           R4
        $WAIT  CMB                   AND WAIT FOR A CMB              R4
         BALR  R15,0               INSURE BASE OK
         USING *,R15
***********************************************************************
*              ENTRY POINT                                            *
***********************************************************************
$WTOR    DS    0H
         STM   R0,R15,WSAVREGS     SAVE CALLERS REGS
         L     BASE2,WBASE2        PICK UP BASE                      R4
         DROP  R15
         L     R8,$SSVT            POINT TO SSVT
         L     R5,$CSAREA          POINT TO WORK AREA                R4
         BAL   LINK,WSCREEN        FILL OUT WORK AREA AND SCREEN ROUTES
         EJECT
***********************************************************************
*              INITIALIZE BUFFER FOR PROCESSING                       *
***********************************************************************
         USING CMBDSECT,R2
         LR    R4,R1               POINT TO MESSAGE AREA             R4
         SLR   R14,R14             ZERO REGISTER
         TM    WPLFLAG,CMBFLAGU    UCMID IN WPLOUT                   R4
         BZ    WTMLACT             CHECK FOR MLWTO ACTIVE IF NOT
         CLI   WPLUCMA,0           AREA SPECIFIED                    R4
         BZ    WTMLACT             CHECK FOR QUEUE TO GET CMB        R4
         C     R14,CSAMLPCE        IS THERE AN MLWTO OWNER           R4
         BNZ   WTMOWND             SKIP SETTING CONTROL              R4
         ST    SAVE,CSAMLPCE       CLAIM OWNERSHIP                   R4
WTMOWND  C     SAVE,CSAMLPCE       IS THIS PCE THE OWNER             R4
         BNE   WTESTW              TEST FOR WAIT IF NOT
WGETRES  ICM   R2,15,$WCOMRES      TEST FOR RESERVED EMPTY
         BZ    WGETBUF             SKIP RESERVED IF EMPTY
         L     R0,CMBCMB           PICK UP CHAIN FIELD               R4
         CS    R2,R0,$WCOMRES      DECHAIN CMB
         BNZ   WGETRES             TRY AGAIN IF FAILURE
         B     WTESTA              TEST FOR MLWTO CLEARING
WTMLACT  C     R14,CSAMLPCE        IS THERE AN MLWTO OWNER           R4
         BZ    WGETRES             GET RESERVED BUFFER IF NOT        R4
WGETBUF  LM    R2,R3,$SVCMBFQ      PICK UP FREE QUEUE
WGETBUFA LTR   R2,R2               CHECK PRESENT
         BZ    WTESTW              TEST FOR WAIT IF NONE
         LR    R1,R3               COPY SECURITY COUNT
         L     R0,CMBCMB           POINT TO NEXT CMB                 R4
         CDS   R2,R0,$SVCMBFQ      DECHAIN
         BNZ   WGETBUFA            TRY AGAIN IF FAILURE
WTESTA   TM    WPLFLAG,WPLNLOG     IS THIS NOT LOGICAL ROUTED OUTPUT R4
         BNZ   WBLDCMB             BUILD THE CMB                     R4
         TM    WPLLEVEL,$DOMACT    IS THIS IMMEDIATE ACTION          R4
         BZ    WBLDCMB             IF NOT, BUILD CMB
         L     R15,$SVCOMCT        PICK UP COMMAND COUNT
WWCTLOOP LR    R1,R15              COPY
         BCTR  R1,0                REDUCE
         CH    R1,WDOMMIN          CHECK FOR BELOW MINIMUM
         BL    WWFREE              IF LOW FREE UP CMB
         CS    R15,R1,$SVCOMCT     SET NEW VALUE
         BNE   WWCTLOOP            LOOP
         ST    R2,WSAVREGS+R1*4    SET CMB ADDRESS FOR USER DOM      R4
         EJECT                                                       R4
***********************************************************************
*                                                                     *
*        FILL OUT CMB                                                 *
*                                                                     *
*        R2    = CMB ADDRESS                                          *
*        R4    = MESSAGE ADDRESS OR ZERO                              *
*        R10   = JCT/JQE ADDRESS IF JOB = YES SPECIFIED               *
*                                                                     *
***********************************************************************
WBLDCMB  MVC   CMBFLAG(14),CSAW    MOVE HEADER                       R4
         SLR   R3,R3               ZERO LENGTH                       R4
         IC    R3,CMBML            PICK UP MESSAGE LENGTH            R4
         BCT   R3,WBLDCMBA         ADJUST COUNTS IF NOT END LINE NULLR4
         MVI   CMBLINET,WLTEND     FORCE MLWTO TO END                R4
         STC   R3,CMBML            SET ZERO LENGTH                   R4
         ST    R3,CSAMLPCE         FREE MLWTO                        R4
         B     WIDR                QUEUE IT                          R4
WBLDCMBA LA    R6,2                GET ADJUSTMENT                    R4
         LA    R7,CMBMSG           ASSUME COMMAND                    R4
         TM    CMBFLAG,CMBFLAGC    COMMAND                           R4
         BO    WBLDCMBC            TEST FOR MOVE IF COMMAND          R4
         MVC   CMBTIME-1(L'CMBTIME+L'CMBJOBID+3),WCMBBLDM MOVE MASK  R4
         TM    CMBFLAG,CMBFLAGU    THIS UCM                          R4
         BZ    WBLDCMBO            TEST OTHER SYSTEM                 R4
         CLI   CMBUCMA,0           MLWTO                             R4
         BE    WBLDCMBO            TEST OTHER SYSTEM                 R4
         TM    CMBLINET,WLTCONT    CONTROL LINE                      R4
         BZ    WBLDCMBD            HANDLE DATA LINE                  R4
         TIME  DEC                 GET TIME                          R4
         ST    R0,CMBCMB           SET INTO CHAIN FIELD              R4
         ED    CMBTIME-1(L'CMBTIME+1),CMBCMB EDIT                    R4
         MVC   CMBJOBN(9),CMBTIME  COPY TO FORCE DISPLAY AREA        R4
         B     WBLDCMBT            MOVE TEXT                         R4
WBLDCMBD MVC   CMBTIME,CMBJOBID    BLANK OUT TIME STAMP              R4
         TM    CMBLINET,WLTEND     IS THIS AN END LINE               R4
         BZ    WBLDCMBE            SKIP NEXT IF NOT                  R4
         SLR   R14,R14             FREE                              R4
         ST    R14,CSAMLPCE        MLWTO                             R4
WBLDCMBE LA    R7,CMBMID           ASSUME START AT WTO ORIGIN        R4
         TM    CMBFLAG,CMBFLAGJ    USER WANT JOB INFO INSERTED       R4
         BZ    WBLDCMBC            MOVE MESSAGE                      R4
         BAL   LINK,WBLDJBN        EXTRACT JOB ID, JOB NAME         R41
         MVC   CMBMID(8),WBLDJBNO  SET JOB ID                       R41
         MVI   CMBMID+8,C' '       SET BLANK                         R4
         MVC   CMBMID+9(8),WBLDJNAM  SET JOB NAME                   R41
         MVI   CMBMID+17,C' '      SET BLANK                         R4
         LA    R7,CMBMID+18        POINT TO WHERE TEXT STARTS        R4
         B     WBLDCMBC            MOVE MESSAGE                      R4
WBLDCMBO TM    CMBFLAG,CMBFLAGW    REMOTE WORKSTATION...             R4
         BZ    WBLDCMBJ            BR IF NO                          R4
WBLDCMBN TIME  DEC                 GET TIME                          R4
         ST    R0,CMBCMB           STORE                             R4
         ED    CMBTIME-1(L'CMBTIME+1),CMBCMB EDIT                    R4
WBLDCMBJ TM    CMBFLAG,CMBFLAGJ    USER WANT JOB INFO INSERTED       R4
         BO    WBLDCMBI            INSERT JOB ID                     R4
         LA    R7,CMBJOBN          POINT TO JOB NAME FIELD           R4
         LTR   R4,R4               IS R4 POINTING TO USER MESSAGE    R4
         BNZ   SKIP10              SKIP NSI                          R4
         LR    R4,R7               USER HAD BETTER STARTED IN JOBN   R4
SKIP10   TM    1(R4),X'0F'         USER PUT JOB INFO IN              R4
         BO    WBLDCMBM            SET HASP ID IF NO                 R4
         MVC   CMBJOBID,2(R4)      COPY JOB ID                       R4
         LA    R6,L'CMBJOBID+3     ACCOUNT FOR HDR, JOB ID, BLANK    R4
         B     WBLDCMBM            SET HASP ID                       R4
WBLDCMBI BAL   LINK,WBLDJBN        EXTRACT JOB ID, JOB NAME         R41
         MVC   CMBJOBID,WBLDJBNO   SET JOB ID                       R41
         MVC   CMBJOBN,WBLDJNAM    SET JOB NAME                     R41
         MVI   CMBJOBN+8,C' '      BLANK NEXT CHARACTER              R4
WBLDCMBT LA    R7,CMBTEXT          SET REST OF MESSAGE ADDRESS       R4
         LTR   R4,R4               MESSAGE ADDRESS ZERO...          R41
         BNZ   WBLDCMBM            BR IF NO                         R41
         LR    R4,R7                ELSE SET MESSAGE ADDRESS        R41
WBLDCMBM MVC   CMBMID,=C'$HASP000 ' SET DUMMY ID                     R4
         CLI   $SVHASP,255         IS JES2 BEING RESTARTED...        R4
         BNE   SKIP20              BR IF NO                          R4
         MVC   CMBMID(1),$CCOMCHR   ELSE SET MESSAGE ID CHARACTER    R4
SKIP20   UNPK  CMBMID+L'CMBMID-4(3),0(2,R4) SET USERS NUMBER         R4
         OI    CMBMID+L'CMBMID-2,C'0' FORCE PRINTABLE                R4
WBLDCMBC LTR   R4,R4               USER MESSAGE BEEN LOCATED         R4
         BNZ   SKIP30              SKIP NSI                          R4
         LR    R4,R7               MAKE SAME AS SLOT TO PUT IT IN    R4
SKIP30   ALR   R4,R6               UP PAST HDR (POSSIBLY JOB ID)     R4
         SLR   R3,R6               REDUCE MACHINE COUNT              R4
         BM    WBLDONEB            SET ONE BLANK IF NEGATIVE         R4
         LA    R14,1(R7,R3)        POINT TO LAST CHARACTER + 1       R4
         SR    R14,R2              GET TOTAL USEFUL CMB LENGTH       R4
         S     R14,=A(CMBL)        MAKE SURE NOT TOO BIG             R4
         BNP   SKIP40              SKIP TRUNCATION                   R4
         SR    R3,R14              REDUCE BY OVERFLOW                R4
SKIP40   EX    R3,WEXMVC           MOVE IN MESSAGE                   R4
         LA    R14,0(R7,R3)        POINT TO LAST CHARACTER           R4
SKIP60   TM    0(R14),X'BF'        ZERO OR BLANK                     R4
         BNZ   SKIP50              NOT BLANK OR ZERO                 R4
         BCT   R14,SKIP60          LOOP                              R4
SKIP50   SLR   R14,R2              SET NEW USEFUL CMB LENGTH - 1     R4
         S     R14,=A(CMBMSG-CMB-1) GET LENGTH OF MESSAGE PORTION    R4
         BNP   SKIP70              SKIP NEXT IF NEGATIVE             R4
         TM    CMBFLAG,CMBFLAGC    IS THIS A COMMAND                 R4
         BO    WBLDSETL            SET LENGTH                        R4
SKIP70   LA    R3,CMBMID+1-CMBMSG  GET MINIMUM LENGTH                R4
         CR    R14,R3              TOO SMALL                         R4
         BNL   WBLDSETL            SET LENGTH                        R4
WBLDONEB LA    R14,CMBMID+1-CMBMSG SET MINIMUM LENGTH WTO            R4
         MVI   CMBMID,C' '         FORCE BLANK                       R4
WBLDSETL STC   R14,CMBML           SET LENGTH                        R4
WIDR     NI    CMBFLAG,255-WPLCONT TURN OFF $WTO CONTROLS            R4
         MVC   CMBFM,$SVTO         SET FROM ID                       R4
         B     WWQUE               QUEUE BUFFER                      R4
         SPACE 1                                                    R41
WBLDJBN  LA    R0,0(,JCT)          PURIFY 'JCT' ADDRESS             R41
         S     R0,$JOBQPTR         SUBTRACT JOB QUEUE ORIGIN        R41
         BM    WBLDJCT             BR IF NOT JQE (MUST BE JCT)      R41
         C     R0,$JOBQSIZ         TEST AGAIN                       R41
         BH    WBLDJCT             BR IF NOT JQE (MUST BE JCT)      R41
         LH    R0,QUEJOBNO(,JCT)            GET JES2 JOB NUMBER     R41
         CVD   R0,WBLDBLWD                   AND CONSTRUCT          R41
         NI    WBLDBLWD+5,X'0F'               JCT-FORM              R41
         MVC   WBLDJBNO+2(6),=X'402020202021'  JES2                 R41
         ED    WBLDJBNO+2(6),WBLDBLWD+5         JOB ID              R41
         MVC   WBLDJNAM,QUEJNAME(JCT)  SET JOB NAME                 R41
         MVC   WBLDJBNO(3),=C'JOB' ASSUME BATCH JOB                 R41
         CH    R0,=H'10000'        TEST ASSUMPTION                  R41
         BLR   LINK                RETURN IF VALID                  R41
         MVC   WBLDJBNO(3),=C'STC' ASSUME STARTED TASK              R41
         CH    R0,=H'20000'        TEST ASSUMPTION                  R41
         BLR   LINK                RETURN IF VALID                  R41
         MVC   WBLDJBNO(3),=C'TSU'  ELSE MUST BE LOGON              R41
         BR    LINK                RETURN                           R41
         SPACE 1                                                    R41
WBLDJCT  MVC   WBLDJBNO,JCTJOBID   SET JOB ID                       R41
         MVC   WBLDJNAM,JCTJNAME   SET JOB NAME                     R41
         BR    LINK                RETURN                           R41
         SPACE 1                                                    R41
WBLDJBNO EQU   $POSTSAV,8          SAVE AREA FOR JOB ID             R41
WBLDJNAM EQU   WBLDJBNO+8,8        SAVE AREA FOR JOB NAME           R41
WBLDBLWD EQU   WBLDJNAM            DOUBLE WORD WORK AREA            R41
         EJECT                                                       R4
***********************************************************************
*                                                                     *
*        HASPWQUE - QUEUE CMB FOR CONSOLE SERVICE PROCESSORS          *
*                                                                     *
***********************************************************************
HASPWQUE DS    0H                                                    R4
         USING *,R15                                                 R4
         STM   R0,R15,WSAVREGS     SAVE REGISTERS                    R4
         L     BASE2,WBASE2        PICK UP BASE                      R4
         DROP  R15                                                   R4
         EJECT                                                       R4
***********************************************************************
*                                                                     *
*        QUEUE CMB                                                    *
*                                                                     *
***********************************************************************
WWQUE    TM    CMBFLAG,CMBFLAGW    THIS FOR A REMOTE WORKSTATION     R4
         BZ    WWQUELOC            BR IF NO                          R4
WWQUERMT L     R4,WQMASK           PICK UP MASK                      R4
         LR    R0,R4               COPY                              R4
         N     R0,CMBPRIO-(CMBPRIO-CMBFLAG) PURIFY PRIORITY          R4
         LA    R1,$BUSYRQ-(CMBCMB-CMB) POINT TO CMB Q                R4
WWQUERL  LR    R3,R1               PULL UP REAR
         L     R1,CMBCMB-CMB(,R1)  POINT TO NEXT                     R4
         LTR   R1,R1               TEST FOR END                      R4
         BZ    WWQNOW              QUEUE IT NOW
         LR    R14,R4              PURIFY THE                        R4
         N     R14,CMBPRIO-CMB-(CMBPRIO-CMBFLAG)(,R1) PRIORITY       R4
         CR    R0,R14              CHECK PRIORITY
         BNH   WWQUERL             LOOP
WWQNOW   ST    R2,CMBCMB-CMB(,R3)  QUEUE TO CHAIN                    R4
         ST    R1,CMBCMB           QUEUE END ON BEHIND               R4
         OI    $MCONPCE,$MCONACT   SET NEW ACTIVITY                  R4
         L     SAVE,$MCONPCE       ADDRESS OF REMOTE CONSOLE PCE     R4
         $POST (SAVE),WORK         POST REMOTE CONSOLE PCE
         B     WQUERET             EXIT
WWQUELOC L     R0,$BUSYQUE         POINT TO BUSY QUEUE ELEMENT
WWQUEIT  ST    R0,CMBCMB           SET FOR SUBTASK                   R4
         CS    R0,R2,$BUSYQUE      TRY TO QUEUE IT
         BNE   WWQUEIT             LOOP
         L     R2,=X'40000000'     PICK UP POST CODE                 R4
         L     R0,$WTOECB          PICK UP THE ECB                   R4
WTRQPL   LTR   R0,R0               TEST FOR WAITING                  R4
         BM    WTRP                DO FULL POST IF WAITING           R4
         CS    R0,R2,$WTOECB       TRY QUICK POST                    R4
         BNZ   WTRQPL              TRY AGAIN IF NO GO                R4
         B     WQUERET             RETURN                            R4
WTRP     LA    R1,$WTOECB          POINT TO ECB                      R4
         POST  (1)                 POST IT
WQUERET  DS    0H
         LM    R0,R15,WSAVREGS     RESTORE CALLERS REGISTERS
         LTR   LINK,LINK           SET NON-ZERO CONDITION CODE       R4
         BP    4(,LINK)            RETURN TO +4 IF STD-FORM MACRO    R4
         BR    LINK                RETURN TO +0 IF EXECUTE-FORM      R4
         EJECT
***********************************************************************
*                                                                     *
*        $WTOC - WRITE TO OPERATOR WITH USER PROVIDED CMB             *
*                                                                     *
* FUNCTIONS -                                                         *
*                                                                     *
*                                                                     *
*    (2) INSERT TIME STAMP AND JOB NUMBER (IF REQUESTED).             *
*                                                                     *
*    (3) SET HASP MESSAGE ID.                                         *
*                                                                     *
*    (4) SHIFT MESSAGE LEFT TWO BYTES (IF ID SPECIFIED).              *
*                                                                     *
*    (5) QUEUE CMB TO REMOTE CONSOLE OR COMMUNICATIONS SUBTASK.       *
*                                                                     *
* NOTES -                                                             *
*                                                                     *
*        THIS ROUTINE IS THE ALTERNATE ENTRY TO $WTO ROUTINE AND      *
*        HAS THE SAME REQUIREMENTS EXCEPT AS FOLLOWS -                *
*                                                                     *
*        (A) R1 MUST POINT TO A CMB GOTTEN FROM THE CMB POOL.         *
*                                                                     *
*        (B) THE MESSAGE TEXT MUST BE LOCATED WITHIN THE CMB AT       *
*            APPROPRIATE LOCATION ( SEE R7 SETTING IN WBLDCMB RTN )   *
*                                                                     *
***********************************************************************
$WTOCR   DS    0H
         USING *,R15
         STM   R0,R15,WSAVREGS     SAVE CALLERS REGISTERS
         L     BASE2,WBASE2        PICK UP BASE                      R4
         DROP  R15
         L     R8,$SSVT            POINT TO SSVT
         L     R5,$CSAREA          POINT TO WORK AREA                R4
         BAL   LINK,WSCREEN        FILL OUT WORK AREA AND SCREEN ROUTES
         LR    R2,R1               POINT TO CMB                      R4
         SLR   R4,R4               ZERO USER MESSAGE ADDRESS         R4
         TM    WPLFLAG,CMBFLAGC    IS THIS A COMMAND                 R4
         BO    WBLDCMB             ENTER NORMAL PROCESSING           R4
         TM    WPLFLAG,CMBFLAGU    IS THIS A UCMID                   R4
         BZ    WBLDCMB             ENTER NORMAL PROCESSING           R4
         CLI   WPLUCMA,0           AREA SPECIFIED                    R4
         BZ    WBLDCMB             ENTER NORMAL PROCESSING           R4
         SLR   R14,R14             ZERO WORK                         R4
         C     R14,CSAMLPCE        IS THERE AN MLWTO OWNER           R4
         BNZ   WTOCRT              SKIP IF YES                       R4
         ST    SAVE,CSAMLPCE       CLAIM OWNERSHIP                   R4
WTOCRT   C     SAVE,CSAMLPCE       IS THIS PCE THE OWNER             R4
         BE    WBLDCMB             ENTER NORMAL PROCESSING           R4
         EJECT                                                       R4
***********************************************************************
*                                                                     *
*        NON-PROCESS EXIT - RETURN CONDITION TO USER                  *
*                                                                     *
***********************************************************************
WSOUT    LM    R0,R14,WSAVREGS     RESTORE USER REGISTERS
         SLR   R15,R15             SET NON-PROCESS RETURN CODE       R4
         TM    WSAVREGS+LINK*4,X'80'  TEST FOR EXECUTE-FORM MACRO    R4
         BZ    4(,LINK)            RETURN IF NO TO +4 WITH CC = 0    R4
         SR    R15,R15              ELSE RESET CC TO 0               R4
         BR    LINK                 AND RETURN TO +0                 R4
         EJECT
***********************************************************************
*                                                                     *
*        SUBROUTINE TO SCREEN OUT LOW LEVEL LOGICAL CONSOLE MSG.      *
*                                                                     *
* REGISTERS -                                                         *
*        R0    = PARAMETER LIST OR ADDRESS OF PARAMETER LIST          *
*                                                                     *
*        R2    = LOGICAL CONSOLE MASK                                 *
*        R3    = TEST REGISTER                                        *
*        R4    = CONSOLE CONVERSION TABLE POINTER                     *
*        R5    = REQUESTED LIST LEVEL                                 *
*        LINK  = RETURN                                               *
*                                                                     *
***********************************************************************
WSCREEN  DS    0H
         ICM   R4,15,WSAVREGS+LINK*4  TEST FOR EXECUTE-FORM MACRO    R4
         BM    WSCLTST             BR IF YES                         R4
         MVC   CSAW(4),0(R4)        ELSE COPY SHORT-FORM PARAMETERS  R4
         MVC   WPLRMT,2(4)         ASSUME RMT OR UCM IN PARM LIST    R4
         TM    WPLFLAG,CMBFLAGW+CMBFLAGU RMT NO./UCMID IN R0   @OZ26405
         BZ    SKIP80              BR IF NO                          R4
         STCM  R0,2,WPLRMT          ELSE SET FROM R0                 R4
SKIP80   TM    WPLFLAG,WPLNOLEN    TEST FOR LENGTH IN R0             R4
         BZ    WSCTYPE             BR IF NO                          R4
         STC   R0,WPLLENG           ELSE SET FROM R0                 R4
         NI    WPLFLAG,255-WPLNOLEN  AND RESET NO-LENGTH FLAG        R4
         B     WSCTYPE             THEN BR TO CONTINUE               R4
         SPACE 1                                                     R4
WSCLTST  TM    WSAVREGS+R0*4+0,CMBFLAGS  IS THIS SHORT-FORM REQUEST  R4
         BZ    WSCX                MOVE EXTENDED FORM                R4
         MVC   CSAW(4),WSAVREGS+R0*4 COPY SHORT FORM                 R4
         MVC   WPLRMT,WSAVREGS+R0*4+2  ASSUME RMT OR UCM             R4
WSCTYPE  MVI   WPLTYPE,0           INDICATE NO FORMAT                R4
         MVC   WPLTO,$SYSID        SET OUR SYSTEM ID                 R4
         XC    WPLOUT+1(7),WPLOUT+1  ZERO OUTPUT INFORMATION FIELD   R4
         TM    WPLFLAG,WPLNLOG-CMBFLAGC TEST FOR NOT LOGICAL ROUTINGSR4
         BNZR  LINK                RETURN IF COMPLETE                R4
         LA    R4,WTORET           POINT TO ROUTING EQUIVALENCE TABLER4
         SLR   R2,R2               ZERO WORK                         R4
         IC    R2,WPLRMT           PICK UP ROUTINGS                  R4
WSCL     SRDL  R2,1                SHIFT BIT INTO R3                 R4
         LTR   R3,R3               DID WE GET A ONE BIT              R4
         BNM   SKIP90              SKIP NSI IF NOT                   R4
         OC    WPLROUT,0(R4)       TURN ON BITS                      R4
SKIP90   LA    R4,L'WPLROUT(,R4)   POINT TO NEXT                     R4
         LTR   R2,R2               FINISHED                          R4
         BNZ   WSCL                LOOP                              R4
         MVC   WPLDESC,WTODRSTN    SET STANDARD DESCRIPTOR CODES     R4
         B     WSC                 SKIP MOVE                         R4
WSCX     LR    R4,R0               POINT TO PARAMETERS               R4
         MVC   CSAW(14),0(R4)      COPY PARAMETERS                   R4
WSC      TM    WPLFLAG,WPLNLOG     TEST FOR NOT LOGICAL ROUTED OUTPUTR4
         BNZR  LINK                RETURN                            R4
         TM    WPLLEVEL,$DOMACT    IS ACTION REQUIRED                R4
         BZ    WSCZERO             SKIP FORCE DESC                   R4
         TM    WPLLEVEL,$ALWAYS    IF $DOMACT ALONE,                 JN
         BZ    WSCACT                FORCE OS 'ACTION' WTO           JN
         CLI   WPLLEVEL,$DOMACT+$ACTION IF $DOMACT+$NORMAL OR LESS,  JN
         BLR   LINK                  LEAVE AS OS 'INFO' WTO          JN
WSCACT   MVI   WPLDESC,WTODESCA    FORCE ACTION DESCRIPTOR           R4
         BR    LINK                RETURN                            R4
WSCZERO  SLR   R4,R4               ZERO LIST LEVEL POINTER           R4
         IC    R4,WPLLEVEL         PICK UP LEVEL AND PRIORITY        R4
         SRA   R4,4                GET RID OF PRIORITY               R4
         ALR   R4,R4               ALIGN                             R4
         LA    R4,CSALEVEL(R4)     POINT TO MASK                     R4
         NC    WPLROUT,0(R4)       MASK OUT UNDESIRABLES             R4
         BR    LINK                RETURN                            R4
         EJECT
***********************************************************************
*              MISCELLANEOUS ITEMS                                    *
***********************************************************************
WEXMVC   MVC   0(*-*,R7),0(R4)     *** EXECUTE ONLY ***              R4
WCMBBLDM DC    X'4021204B20204B2020',CL(L'CMBJOBID+2)' '             R4
WQMASK   DC    0F'0',AL1(0,15,0,0) MASK FOR PRIORITY QUEUING OF CMBS R4
         DROP  R2
         DROP  R5                                                    R4
         DROP  R8                                                    R4
 TITLE 'HASP CMB SERVICE - $GETCMB - GET CMB(S) ROUTINE'
***********************************************************************
*                                                                     *
*        $GETCMB - GET ONE OR MORE CONSOLE MESSAGE BUFFERS            *
*                                                                     *
* FUNCTIONS                                                           *
*                                                                     *
*    (1) CALCULATE NEW VALUE FOR $SVCOMCT AS PER R0.                  *
*                                                                     *
*    (2) TEST FOR NUMBER OF REQUESTED CMBS AVAILABLE. IF              *
*        AVAILABLE, REMOVE THE CMBS FROM THE $SVCMBFQ.                *
*        IF NOT AVAILABLE, ERROR EXIT.                                *
*                                                                     *
*    (3) EXITS SET R1 TO ADDRESS OF CMB OR ZERO.                      *
*                                                                     *
* INPUT REGISTERS                                                     *
*                                                                     *
*        R0    = +X REDUCE $SVCOMCT BY X, PREVENT GOING TO ZERO       *
*              = -X REDUCE $SVCOMCT BY X, PREVENT GOING LT 3          *
*              =  0 NO CHANGE IN $SVCOMCT                             *
*        R1    = Y NUMBER OF CMBS REQUESTED 1,2,3,...                 *
*        LINK  = RETURN ADDRESS                                       *
*        R15   = ENTRY BASE                                           *
*                                                                     *
* OUTPUT REGISTERS                                                    *
*                                                                     *
*        R1    = ADDRESS OF FIRST CMB OR ZERO. CHAIN FIELD            *
*                POINTS TO NEXT OR ZERO.                              *
*                                                                     *
***********************************************************************
$GETCMBR DS    0H
         USING *,R15
         STM   R0,R15,WSAVREGS     SAVE CALLERS REGISTERS
         L     BASE2,WBASE2        PICK UP BASE                      R4
         DROP  R15
         L     R8,$SSVT            POINT TO SSVT
         USING SSVT,R8
         SR    R1,R1               ZERO FOR EXIT
         SR    R3,R3               SET COMPARE REGISTER
         L     R15,$SVCOMCT        PICK UP COUNT
         ICM   R0,15,WSAVREGS+R0*4 PICK UP R0
         BZ    WGNOCT              SKIP IF NO COUNTING
         BP    WGADJ               IF POSITIVE DO NORMAL SUB
         LA    R3,$DOMMIN          SET LOW BOUND
         LPR   R0,R0               MAKE POSITIVE
WGADJ    LR    R2,R15              SET FOR CALCULATIONS
         SR    R2,R0               REDUCE COUNT
         CR    R2,R3               CHECK FOR TOO LOW
         BNH   WGERR               ERROR EXIT
         CS    R15,R2,$SVCOMCT     TRY TO STORE
         BNE   WGADJ               LOOP
WGNOCT   L     R4,WSAVREGS+R1*4    PICK UP COUNT
WGNOCTA  LM    R2,R3,$SVCMBFQ      POINT TO FREE QUEUE
         USING CMBDSECT,R2
WGNOCTL  LTR   R2,R2               ANY THERE
         BZ    WGERRR              EXIT IF NONE THERE
         L     R6,CMBCMB           PICK UP CHAIN                     R4
         LR    R7,R3               COPY SECURITY COUNT
         CDS   R2,R6,$SVCMBFQ      TAKE CMB AWAY
         BNE   WGNOCTL             LOOP
         ST    R1,CMBCMB           FREE TO TEMP                      R4
         LR    R1,R2                CHAIN
         BCT   R4,WGNOCTA          LOOP
WGERR    ST    R1,WSAVREGS+R1*4    SET ANSWER
         LM    R0,R15,WSAVREGS     SET USER REGISTERS
         LTR   R1,R1               SET CONDITION CODES
         BR    LINK                EXIT
WGERRR   LR    R4,R1               SAVE FREE POINTERS WE HAVE
         LTR   R6,R0               TEST FOR UP COUNT
         BZ    WGERRRA             SKIP IF NOT
         BAL   LINK,WCOUNT         UP COUNT
         BCT   R6,*-4              LOOP
WGERRRA  LTR   R2,R4               TEST FOR ANY CMBS
         BZ    WGERRRB             IF NOT EXIT
         L     R4,CMBCMB           LOOK AT NEXT                      R4
         BAL   LINK,WFREE          FREE
         B     WGERRRA             LOOP
WGERRRB  LR    R1,R2               COPY ANSWER
         B     WGERR               EXIT
         DROP  R8
         DROP  R2
 TITLE 'HASP CMB SERVICE - $DOM - DELETE OPERATOR MESSAGE'
***********************************************************************
*                                                                     *
*        $DOM - DELETE OPERATOR MESSAGE FOR HASP PROCESSOR            *
*                                                                     *
* FUNCTIONS                                                           *
*                                                                     *
*    (1) INCREASE THE CMB COUNT ALLOWABLE FOR COMMANDS AND            *
*        SPECIAL PURPOSES SUCH AS $DOMACT MESSAGES.                   *
*                                                                     *
*    (2) TURN $DOMACT INDICATOR OFF REGARDLESS OF WHERE THE CMB       *
*        IS, IE QUEUED TO SUB-TASK, IN PROCESS OF OS WTO, OR ON       *
*        DOM QUEUE.                                                   *
*                                                                     *
*    (3) LOCATE THE CMB ON THE ACTION QUEUE $DOMQUE, IF LOCATED       *
*        REMOVE THE CMB, FREE IT, AND ISSUE OS DOM.                   *
*                                                                     *
*    (4) RETURN.                                                      *
*                                                                     *
* INPUT REGISTERS                                                     *
*                                                                     *
*        R1    = ADDRESS OF CMB TO DOM                                *
*        BASE1 = ADDRESS OF HCT                                       *
*        LINK  = RETURN ADDRESS                                       *
*        R15   = ENTRY BASE                                           *
*                                                                     *
***********************************************************************
$DOMR    DS    0H
         USING *,R15
         STM   R0,R15,WSAVREGS     SAVE CALLERS REGISTERS
         L     BASE2,WBASE2        PICK UP BASE                      R4
         DROP  R15
         L     R8,$SSVT            POINT TO SSVT
         USING SSVT,R8
         BAL   LINK,WCOUNT         COUNT CMB
         L     R4,WSAVREGS+R1*4    PICK UP CMB ADDRESS
         USING CMBDSECT,R4
         NI    CMBLEVEL,255-$DOMACT TURN OFF DOM ACTION              R4
         $POST $HASPECF,CMB        POST CMB
         LA    R2,$DOMQUE-(CMBCMB-CMB) POINT TO CMB ZERO             R4
WDOMLOOP LR    R15,R2              PULL UP REAR
         L     R2,CMBCMB-CMB(,R2)  POINT TO NEXT CMB                 R4
         LTR   R2,R2               TEST FOR END                      R4
         BZ    WDOMRETA            EXIT IF END
         CR    R2,R4               CMB MATCH
         BNE   WDOMLOOP            LOOP
         MVC   CMBCMB-CMB(,R15),CMBCMB REMOVE CMB                    R4
         ICM   R4,15,CMBDOMID      PICK UP DOM ID                    R4
         BAL   LINK,WFREE          FREE CMB
         LR    R1,R4               GET DOM ID
         DOM   MSG=(1)             DELETE MESSAGE
WDOMRETA LM    R0,R15,WSAVREGS     RESTORE REGISTERS
         BR    LINK                EXIT
         DROP  R8
         DROP  R4
 TITLE 'HASP CMB SERVICE - $FRECMB - FREE CMB ROUTINE'
***********************************************************************
*                                                                     *
*        $FRECMB - FREE A CONSOLE MESSAGE BUFFER                      *
*                                                                     *
* FUNCTIONS                                                           *
*                                                                     *
*                                                                     *
*    (1) IF R1 BYTE 0 NOT 0, INCREASE THE CMB COUNT ALLOWABLE         *
*        FOR COMMANDS AND SPECIAL PURPOSES SUCH AS $DOMACT            *
*        MESSAGES.                                                    *
*                                                                     *
*    (2) FREE THE CMB INTO THE RESERVE CMB (IF RESERVE EMPTY)         *
*        OR THE FREE QUEUE.                                           *
*                                                                     *
*    (3) $POST CMB.                                                   *
*                                                                     *
* INPUT REGISTERS                                                     *
*                                                                     *
*        R1    = ADDRESS OF CMB (HIGH BYTE ZERO)                      *
*        BASE1 = ADDRESS OF HCT                                       *
*        LINK  = RETURN ADDRESS                                       *
*        R15   = ENTRY BASE                                           *
*                                                                     *
***********************************************************************
$FRECMBR DS    0H
         USING *,R15
         STM   R0,R15,WSAVREGS     SAVE CALLERS REGISTERS
         L     BASE2,WBASE2        PICK UP BASE                      R4
         DROP  R15
         L     R8,$SSVT            POINT TO SSVT
         USING SSVT,R8
         CLI   WSAVREGS+R1*4,0     TEST FOR COUNT REQUIRED
         BZ    WFR                 SKIP COUNTING
         BAL   LINK,WCOUNT         COUNT
WFR      L     R2,WSAVREGS+R1*4    POINT TO CMB TO FREE
         LA    R2,0(0,R2)          PURIFY ADDRESS
         BAL   LINK,WFREE          FREE THE CMB
         $POST $HASPECF,CMB        POST CMB
         LM    R0,R15,WSAVREGS     RESTORE CALLERS REGISTERS
         BR    LINK                RETURN
***********************************************************************
*                                                                     *
*        SUBROUTINE TO FREE CMB (ALSO USED BY COMM SUB-TASK)          *
*                                                                     *
***********************************************************************
         USING CMBDSECT,R2
WFREE    ICM   R0,15,$WCOMRES      MLWTO HAVE A CMB                  R4
         BNZ   WFREER              TRY SVC 34 RESERVE IF YES         R4
         ST    R0,CMBCMB           SET ZERO CHAIN                    R4
         CS    R0,R2,$WCOMRES      GIVE MLWTO ONE                    R4
         BNZ   WFREE               LOOP IF NO GO                     R4
         BR    LINK                RETURN                            R4
WFREER   ICM   R0,15,$SVCMBRQ      RESERVE QUEUE EMPTY               R4
         BNZ   WFREEN              IF NOT, DO NORMAL FREE
         ST    R0,CMBCMB           SET ZERO CHAIN                    R4
         CS    R0,R2,$SVCMBRQ      STORE IN RESERVE QUEUE
         BNZ   WFREE               IF NO STORE LOOP
         BR    LINK                RETURN
WFREEN   LM    R0,R1,$SVCMBFQ      PICK UP FREE QUEUE
WFREENL  LR    R3,R1               COPY SECURITY COUNT
         BCTR  R3,0                COUNT
         ST    R0,CMBCMB           SET OLD POINTER                   R4
         CDS   R0,R2,$SVCMBFQ      QUEUE IT
         BNE   WFREENL             LOOP
         BR    LINK                RETURN
         DROP  R2
***********************************************************************
*                                                                     *
*        SUBROUTINE TO UP COMMAND COUNT                               *
*                                                                     *
***********************************************************************
WCOUNT   L     R1,$SVCOMCT         PICK UP COUNT
WCOUNTA  LA    R0,1(0,R1)          UP COUNT
         CS    R1,R0,$SVCOMCT      TRY TO COUNT
         BNE   WCOUNTA             LOOP
         BR    LINK                RETURN
         DROP  R8
 TITLE 'HASP CONSOLE PROCESSOR  --  COMMUNICATIONS TASK ROUTINE'
         SPACE 5
***********************************************************************
*                                                                     *
*        THIS CODE, WHILE A PART OF HASP, OPERATES UNDER THE          *
*        CONTROL OF THE HASP COMMUNICATIONS TASK TO DEQUEUE           *
*        OPERATOR MESSAGES GENERATED BY HASP AND PASS SUCH            *
*        MESSAGES, VIA 'WTO' TO OS FOR PROCESSING. THIS CODE          *
*        IS ACTIVATED BY A HASP 'POST', INDICATING ONE OR             *
*        MORE MESSAGES HAS BEEN QUEUED FOR PROCESSING.                *
*        THIS ROUTINE THEN --                                         *
*                                                                     *
*              1. DEQUEUES THE MESSAGE FROM THE HASP QUEUE.           *
*                                                                     *
*                                                                     *
*              3. FOR ACTION MESSAGES ISSUES AN OS 'WTO'              *
*                 QUEUES THE CMB TO $DOMQUEA FOR ASYNC PROCESSOR      *
*                 TO SERVICE.                                         *
*                                                                     *
*              4. FOR UCMID OF ZERO ISSUE SVC 34 REQUEST.             *
*                                                                     *
*              5. FOR NON-ACTION MESSAGES FREES THE CMB, POSTS        *
*                 HASP, AND ISSUES OS 'WTO'.                          *
*                                                                     *
*              6. CONTINUES THE ABOVE STEPS UNTIL THE HASP            *
*                 MESSAGE QUEUE IS EXHAUSTED.                         *
*                                                                     *
*              7. ENTERS AN OS 'WAIT' STATE TO AWAIT ANOTHER          *
*                 'POST' BY HASP.                                     *
*                                                                     *
*        NOTE THAT ONCE THIS PROCESSOR BEGINS A MLWTO FOR THE         *
*        COMMAND PROCESSOR, ALL OTHER WTO (NON UCMID) REQUESTS        *
*        ARE DELAYED UNTIL THE END LINE IS SENT.                      *
*                                                                     *
***********************************************************************
         EJECT
$HASPWTO NULL  *                   INITIAL ENTRY POINT FROM ATTACH
         BALR  BASE2,0             ESTABLISH
         USING *,BASE2              BASE
         LR    BASE1,R1            RELOAD HCT ADDRESS                R4
         L     BASE2,WBASE2        LOAD NORMAL BASE                  R4
         USING HASPCON,BASE2
         POST  $WTOPECB            POST HASP INITIALIZATION          R4
         L     R8,$SSVT            POINT TO SSVT
         L     R5,$CSAREA          POINT TO WORK AREA
         B     WTOWAIT             GO WAIT FOR HASP POST
         USING SSVT,R8
         USING CSADSECT,R5
WTOQMT   NULL  *                   MESSAGE QUEUE EMPTY
         TM    $STATUS,$SYSEXIT    TEST FOR WITHDRAWAL OF HASP
         BZ    WTOWAIT             WAIT FOR MORE MESSAGES
         SVC   3                   EXIT TO TERMINATE TASK
WTOWAIT  WAIT  ECB=$WTOECB         WAIT FOR HASP POST
         MVI   $WTOECB,0           RESET ECB
***********************************************************************
*                                                                     *
*        EXAMINE INPUT QUEUE $BUSYQUE AND REMOVE ALL CMBS             *
*                                                                     *
***********************************************************************
WTODQ    NI    CSACONCT,255-1      TURN OFF NO WTO INDICATOR         R4
         USING CMBDSECT,R1
         L     R1,$BUSYQUE         POINT TO LAST QUEUED CMB
         LTR   R1,R1               PRESENT
         BZ    WSBSYQ              IF NOT LOOK AT WORK QUEUE
         SLR   R2,R2               PULL ALL CMBS
WSBQL    CS    R1,R2,$BUSYQUE       OFF THE QUEUE
         BNE   WSBQL               TRY AGAIN IF NOT OFF
***********************************************************************
*                                                                     *
*        REVERSE CMB ORDER TO FIFO                                    *
*                                                                     *
***********************************************************************
WSBQLL   L     R0,CMBCMB           POINT TO NEXT                     R4
         ST    R2,CMBCMB           SWITCH THE                        R4
         LR    R2,R1                ORDER
         LTR   R1,R0                OF CMBS
         BNZ   WSBQLL              CONTINUE
         EJECT
***********************************************************************
*                                                                     *
*        PLACE CMBS ON WORK QUEUE AND REMOVE FIRST ELIGIBLE CMB       *
*                                                                     *
***********************************************************************
WTQL     L     R4,WQMASK           PICK UP MASK                      R4
         LR    R0,R4               PURIFY                            R4
         N     R0,CMBPRIO-CMB-(CMBPRIO-CMBFLAG)(,R2) PRIORITY        R4
         LA    R1,$CONWKQ-(CMBCMB-CMB) POINT TO WORK QUEUE           R4
WTQLL    LR    R3,R1               PULL UP REAR
         L     R1,CMBCMB           POINT TO NEXT CMB                 R4
         LTR   R1,R1               CHECK FOR END
         BZ    WTQNOW              QUEUE IT NOW IF END
         LR    R14,R4              PURIFY THE                        R4
         N     R14,CMBPRIO-(CMBPRIO-CMBFLAG) PRIORITY                R4
         CR    R0,R14              CHECK PRIORITY
         BNH   WTQLL               LOOP IF NOT HIGH
WTQNOW   L     R14,CMBCMB-CMB(,R2) NEXT CMB IN TEMPORARY Q           R4
         ST    R1,CMBCMB-CMB(,R2)  PUT LOW PRIORITY BEHIND           R4
         ST    R2,CMBCMB-CMB(,R3) PUT CURRENT IN QUEUE               R4
         LTR   R2,R14              POINT TO FIRST CMB IN TEMP
         BNZ   WTQL                LOOP IF NOT VOID
WSBSYQ   LA    R1,$CONWKQ-(CMBCMB-CMB) POINT TO CMB ZERO             R4
WSBSYQL  LR    R2,R1               SAVE POINTER TO PREVIOUS
         L     R1,CMBCMB           POINT TO NEXT                     R4
         LTR   R1,R1               TEST FOR END
         BZ    WTOQMT              WAIT IF YES
         CLI   CSACONCT,0          IS MLWTO IN PROCESS
         BZ    WSBSYQE             DEQUEUE IF NOT
         TM    CMBFLAG,CMBFLAGU    DOES CMBOUT CONTAIN UCMID         R4
         BZ    WSBSYQL             LOOP IF NOT
         TM    CMBFLAG,CMBFLAGC    THIS A COMMAND                    R4
         BO    WSBSYQL             LOOP IF YES                       R4
         CLI   CMBUCMA,0           IS AREA SPECIFIED                 R4
         BZ    WSBSYQL             LOOP IF GENERAL
WSBSYQE  MVC   CMBCMB-CMB(,R2),CMBCMB REMOVE FROM QUEUE              R4
         EJECT
***********************************************************************
*                                                                     *
*        FILL OUT WTO LIST AND ISSUE WTO                              *
*                                                                     *
***********************************************************************
         MVC   CSANFM,CMBFM        MOVE THE FROM INFORMATION         R4
         MVC   CSADESC(CSALSIZ-2),WTODRSTN MOVE DEFAULTS TO TRAILLER
         MVC   CSAMCS,WMCSSTAN     SET STANDARD MCS FLAGS
         SLR   R2,R2               ZERO WORK                         R4
         SLR   R6,R6               ZERO UCMID REGISTER               R4
         LA    R0,128-1            SET MAXIMUM TEXT LENGTH - 1       R4
         TM    CMBFLAG,WPLNLOG     IS THIS NOT LOGICAL ROUTE         R4
         BZ    WTOLOG              HANDLE LOGICAL ROUTINGS           R4
         TM    CMBFLAG,CMBFLAGC    DOES THIS CONTAIN A COMMAND       R4
         BO    WS34                HANDLE SVC 34 PROCESSING          R4
*        THE CMB CONTAINS A UCMID RESPONSE                           R4
         IC    R6,CMBUCM           PICK UP THE UCMID                 R4
         OI    CSAMCS,WOSUCMF      SET UCMID AND RESPONSE            R4
         CLI   CMBUCMA,0           IS THIS MLWTO                     R4
         BZ    WTOWTO              DO NORMAL WTO                     R4
         MVI   CSAMCS+1,WMCSML     SET MLWTO MODE                    R4
         MVI   CSADESC,WDOUTLN     SET NEW DESCRIPTOR CODES          R4
         MVI   CSADESC+1,WDCONTID  FOR OUT OF LINE RESPONSES         R4
         MVC   CSALINET,CMBLINET   MOVE LINE TYPE                    R4
         MVC   CSALAREA,CMBUCMA    MOVE AREA                         R4
         LA    R0,34-1             SET MAXIMUM CONTROL LENGTH - 1    R4
         TM    CMBLINET,WLTCONT    IS THIS A CONTROL LINE            R4
         BO    WTOWTO              DO NORMAL WTO                     R4
         LA    R0,70-1             SET MAXIMUM SECONDARY LENGTH - 1  R4
         ICM   R6,14,CSACONCT+1    PICK UP CONNECT ID                R4
         TM    CMBLINET,WLTEND     IS THIS END                       R4
         BZ    WTOWTO              DO NORMAL WTO IF NOT              R4
         OI    CSACONCT,8          SET END LINE                      R4
         B     WTOWTO              DO NORMAL WTO                     R4
         EJECT
***********************************************************************
*                                                                     *
*        ISSUE SVC 34 FOR COMMAND PROCESSOR                           *
*                                                                     *
***********************************************************************
WS34     DS    0H                                                    R4
         IC    R2,CMBML            PICK UP LENGTH                    R4
         BCTR  R2,0                GET MACHINE COUNT                 R4
         EX    R2,WS34MVC          MOVE ENTIRE TEXT                  R4
         LA    R2,5(0,R2)          GET TOTAL LENGTH                  R4
WS34C    XC    CSAMCS,CSAMCS       ZERO MCS FLAGS                    R4
         STC   R2,CSAMSGL+1        SET LENGTH                        R4
         SLR   R0,R0               INSURE UCMID XERO                 R4
         LR    R4,R1               SAVE CMB ADDRESS                  R4
         LA    R1,CSAWTOL          POINT TO WTOL FOR SVC 34          R4
         OI    CSACONCT,1          SUPPRESS WTO                      R4
         SVC   34                  ISSUE COMMAND REQUEST             R4
         LR    R1,R4               RESTORE CMB ADDRESS               R4
         TM    CMBFLAG,CMBFLAGU    UCM SPECIFIED                     R4
         BZ    WNRMFRE             FREE CMB IF NO UCM                R4
         CLI   CMBUCM,X'FF'        SPECIAL UCM                       R4
         BNE   WNRMFRE             FREE THE CMB IF GOOD UCMID
         L     R2,$PITABLE         POINT TO FIRST PIT
         USING PITDSECT,R2
WPITL    TM    PITFLAGS,PITSIVER+PITSIERR ARE WE STARTING PIT
         BM    WPITF               SIVER ON, SIERR OFF BR
         L     R2,PITNEXT          POINT TO NEXT PIT                 R4
         LTR   R2,R2               TEST FOR VALID PIT ADDRESS        R4
         BNZ   WPITL               BR IF SO                          R4
         B     WNRMFRE             SHOULD NEVER HAPPEN EXIT
WPITF    LTR   R15,R15             DID SVC 34 SAY OK
         BZ    WPITOK              ALLOW USE OF PIT IF YES
         L     R0,$SVPIDLE         PICK UP PIT IDLE COUNT
WPITCSL  LTR   R14,R0              COPY AND TEST
         BZ    WPITOK              ACCEPT USER STARTED INIT
         BCTR  R14,0               DECREMENT COUNT
         CS    R0,R14,$SVPIDLE     ALTER COUNT
         BNZ   WPITCSL             LOOP IF NOT ALTERED
         OI    PITFLAGS,PITSIERR   SET REJECTION FLAG
         B     WNRMFRE             FREE THE CMB
WPITOK   NI    PITFLAGS,255-PITSIVER ALLOW SELECTION
         TS    $SVJOB              FAKE $$POST OF HASPXEQ
*                                  FREE CMB WILL COMPLETE $$POST
         B     WNRMFRE             FREE CMB
WS34MVC  MVC   CSAMSG(*-*),CMBMSG  *** EXECUTE ONLY ***              R4
         DROP  R2
         EJECT
WTOLOG   MVC   CSADESC(4),CMBDESC+CMBROUT-CMBROUT COPY CODES         R4
         CLC   CSAROUTE,WTORET     TEST FOR LOG ONLY
         BNE   WTOWTO              SKIP NEXT INSTRUCTION
         OI    CSAMCS,WTOHCPY      SET FOR HARD COPY ONLY
WTOWTO   NULL  *                   SEND MESSAGE
         IC    R2,CMBML            PICK UP LENGTH                    R4
         SH    R2,=Y(CMBMID-CMBMSG+1) SET MACHINE MOVE COUNT         R4
         BP    WTOTRUNC            CHECK FOR TOO LONG                R4
         SLR   R2,R2               FORCE ZERO                        R4
         MVC   CSAPRE,WCMBBLDM+1   SET BLANK INTO PREFIX             R4
         BCT   R2,WTOMPRE          SKIP MOVE                         R4
WTOTRUNC CR    R2,R0               TRUNCATE REQUIRED                 R4
         BNH   *+6                 SKIP NSI IF NOT
         LR    R2,R0               TRUNCATE
         EX    R2,WTOMVC           MOVE TEXT TO WTO
         MVC   CSAPRE,CMBMSG       SET PREFIX INFORMATION            R4
WTOMPRE  LA    R2,5(,R2)           LENGTH FOR WTO                    R4
         STC   R2,CSAMSGL+1        SET COUNT IN WTO
         LA    R2,CSAWTOL(R2)      POINT TO MESSAGE END + 1          R4
         MVC   0(CSALSIZ,R2),CSADESC MOVE TRAILLER FIELDS
         TM    CMBLEVEL,$DOMACT    IS DOM ACTION REQUIRED            R4
         BZ    WNDOM               IF NOT DO NORMAL PROCESSING
         LR    R4,R1               SAVE CMB POINTER
         WTO   MF=(E,CSAWTOL)      SEND MESSAGE
         STCM  R1,15,CMBDOMID-CMB(R4) SAVE DOM ID                    R4
         L     R1,$DOMQUEA         POINT TO OLD ACTION CMB
WDQNXT   ST    R1,CMBCMB-CMB(,R4)  PUT OLD BEHIND                    R4
         CS    R1,R4,$DOMQUEA      QUEUE TO HEAD OF QUEUE
         BNE   WDQNXT              LOOP IF NOT QUEUED
         $$POST ELMT=$SVASYNC,R11=HCT POST ASYNC PCE
         B     WTODQ               LOOK FOR MORE WORK
WNDOM    DS    0H
WNRMFRE  LR    R2,R1               POINT TO CMB TO FREE              R4
         BAL   LINK,WFREE          FREE CMB                          R4
WPOSTH   $$POST TYPE=CMB,R11=HCT   POST FOR CMB                      R4
         TM    CSACONCT,1          IS SUPPRESS WTO ON                R4
         BO    WTODQ               LOOK FOR MORE WORK                R4
         TM    CSACONCT,2          IS SKIP MLWTO ON                  R4
         BO    WTOSKIP             SKIP THIS WTO                     R4
         LR    R0,R6               COPY UCMID WITH CONNECT ID        R4
         WTO   MF=(E,CSAWTOL)      SEND MESSAGE                      R4
         TM    CSAMCS+1,WMCSML     IS THIS MLWTO                     R4
         BZ    WTODQ               LOOK FOR MORE WORK                R4
         TM    CSACONCT,8          DID WE SAY END                    R4
         BO    WTORESET            RESET MLWTO IF YES                R4
         ST    R1,CSACONCT         SET CONNECT                       R4
         MVI   CSACONCT,4          SET MLWTO ON                      R4
         LTR   R15,R15             DID OPERATOR DELETE               R4
         BZ    WTODQ               LOOK FOR MORE WORK                R4
         MVI   CSACONCT,2          SET SKIPPING MLWTO                R4
         B     WTODQ               LOOK FOR MORE WORK                R4
WTOSKIP  TM    CSACONCT,8          DID WE SAY END                    R4
         BZ    WTODQ               LOOK FOR MORE WORK                R4
WTORESET SLR   R1,R1               RESET                             R4
         ST    R1,CSACONCT         FLAGS AND CONNECT IDS             R4
         B     WTODQ               LOOK FOR MORE WORK                R4
WTOMVC   MVC   CSAMSG(*-*),CMBMID  *** EXECUTE ONLY ***              R4
         DROP  R8
         DROP  R5                                                    R4
         EJECT                                                       R4
*
*              H A S P / O S  --  ROUTING EQUIVALENCE TABLE  --
*
*              THE TABLE BELOW REFLECTS THE OS/MCS CONSOLE ROUTING
*              BITS WHICH WILL BE USED TO CORRESPOND WITH THE HASP
*              LOGICAL CONSOLE ROUTING BITS AS INDICATED...
WTORET   DS    0H                  TABLE START
         DC    X'0000'             HASP LOG = (FUNCTION DONE BY HRDCPY)
         DC    X'0040'             HASP ERROR = SYSTEM ERROR/MAINT.
         DC    X'0200'             HASP UR = UNIT RECORD POOL
         DC    X'0100'             HASP TP = TELEPROCESSING CONTROL
         DC    X'3C00'             HASP TAPE = DA AND TAPE POOL
*                                        AND = DA AND TAPE LIBRARY
         DC    X'C000'             HASP MAIN = MASTER CONSOLE
*                                        AND = MASTER INFORMATIONAL
         DC    X'0008'             HASP SPARE1 = OS USER1
         DC    X'0004'             HASP SPARE2 = OS USER2
         SPACE 2                                                     R4
WOSUCMF  EQU   B'01100000'         MCS UCMID AND RESPONSE
WTOHCPY  EQU   B'00000010'         MCS FOR QUEUE TO HARD COPY ONLY
WMCSML   EQU   B'01000000'         MCS+1 MLWTO FLAG
WMCSSTAN DC    B'1000000000000000' STANDARD MCSFLAGS
WTODRSTN DC    B'0001000000000000' STANDARD DESCRIPTOR CODES
WTODESCA EQU   B'01000000'         ACTION DESCRIPTION CODE
WDOUTLN  EQU   B'00000001'         DESCRIPTION FOR OUT OF LINE
WDCONTID EQU   B'10000000'         DESCRIPTION + 1 CONTROL ID
         DC    B'0000000000000000' STANDARD ROUTING CODES
         DC    B'1000000000000000' LINE TYPE ( CONTROL LINE )
WLTCONT  EQU   B'10000000'         CONTROL LINE
WLTTITL  EQU   B'01000000'         TITLE LINE                        R4
WLTDATA  EQU   B'00100000'         DATA LINE
WLTEND   EQU   B'00010000'         END LINE
         SPACE 1                                                     R4
WSAVREGS EQU   $CSAVREG            ADDRESS OF SAVE AREA
WBASE2   DC    A(HASPCON)          FOLLOWS WBASES                    R4
$DOMMIN  EQU   2                   CMBS RESERVED FROM $DOMACT
WDOMMIN  DC    Y($DOMMIN+1)        COUNT TO PREVENT CMB LOCKOUTS
         SPACE 1                                                     R4
         LTORG
         SPACE 1                                                     R4
$DLENGTH $DLENGTH ,
APARNUM  DC    CL5'32566'          APAR NUMBER
         END
