INIT     TITLE 'HASP INITIALIZATION -- PROLOG'
***********************************************************************
*                                                                     *
* MODULE NAME = HASJES20 ( HASPINIT CSECT )                           *
*                                                                     *
* DESCRIPTIVE NAME = HASPINIT CSECT OF JES2 MAIN MODULE               *
*                                                                     *
* COPYRIGHT = NONE                                                    *
*                                                                     *
* STATUS = OS/VS2 MVS   --  SEE &VERSION (BELOW) FOR JES2 LEVEL       *
*                                                                     *
* FUNCTION = THE HASPINIT CSECT INITIALIZES THE JES2 SUBSYSTEM AND    *
*            SUBSYSTEM INTERFACES AND RETURNS CONTROL TO HASPNUC.     *
*            THE FUNCTIONS OF THIS MODULE ARE AS FOLLOWS --           *
*                                                                     *
*              1.  TO OBTAIN THE INITIALIZATION OPTIONS FROM THE      *
*                  OPERATOR OR FROM THE PARM PARAMETER ON THE EXEC    *
*                  CARD AND CONVERT THE OPTIONS SPECIFIED INTO STATUS *
*                  BITS.                                              *
*                                                                     *
*              2.  TO READ AND PROCESS THE JES2 INITIALIZATION        *
*                  PARAMETER DATA SET.                                *
*                                                                     *
*              3.  TO SCAN THE DIRECT ACCESS DEVICES AND TO IDENTIFY  *
*                  AND ALLOCATE THE ELIGIBLE SPOOLING VOLUMES.        *
*                                                                     *
*              4.  TO EXAMINE AND INITIALIZE THE SPOOLING VOLUMES     *
*                  FOR JES2 PROCESSING.                               *
*                                                                     *
*              5.  TO CONSTRUCT AND INITIALIZE THE SUBSYSTEM INTER-   *
*                  FACE CONTROL BLOCKS, SUCH AS THE SSCT AND SSVT.    *
*                                                                     *
*              6.  TO SCAN THE UNIT RECORD DEVICES AND REMOTE JOB     *
*                  ENTRY LINES, AND TO LOCATE AND ALLOCATE THE        *
*                  ELIGIBLE AND/OR SPECIFIED DEVICES TO JES2.         *
*                                                                     *
*              7.  TO ATTACH THE JES2 SUB-TASKS, AND TO LOCATE THE    *
*                  EXIT ROUTINES.                                     *
*                                                                     *
*              8.  TO INITIATE SMF PROCESSING BY GENERATING A TYPE 47 *
*                  SMF RECORD.                                        *
*                                                                     *
*              9.  TO CREATE, OR OBTAIN FROM SPOOL, THE JES2 JOB      *
*                  QUEUE AND JOB OUTPUT TABLE.                        *
*                                                                     *
*             10.  TO CONSTRUCT AND/OR INITIALIZE THE JES2 CONTROL    *
*                  BLOCKS, SUCH AS THE HCT, THE DCT'S, THE DCB'S, THE *
*                  DEB'S, THE BUFFERS, ETC.                           *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
* NOTES = SEE BELOW                                                   *
*                                                                     *
*    DEPENDENCIES = EXCP ACCESS METHOD                                *
*                   DYNAMIC ALLOCATION                                *
*                   DIRECT-ACCESS DEVICE SPACE MANAGEMENT             *
*                   MVS SUBSYSTEM INTERFACES                          *
*                   MISCELLANEOUS STANDARD SUPERVISOR SERVICES        *
*                                                                     *
*    RESTRICTIONS = NONE                                              *
*                                                                     *
*    REGISTER CONVENTIONS = R0          = WORK REGISTER               *
*                           R1          = WORK REGISTER               *
*                           R2  = WA    = WORK REGISTER               *
*                           R3  = WB    = WORK REGISTER               *
*                           R4  = WC    = WORK REGISTER               *
*                           R5  = WD    = WORK REGISTER               *
*                           R6  = WE    = WORK REGISTER               *
*                           R7  = WF    = WORK REGISTER               *
*                           R8  = BASE3 = BASE/WORK REGISTER          *
*                           R9          = UNUSED                      *
*                           R10 = JCT   = WORK REGISTER               *
*                           R11 = BASE1 = ADDRESS OF HCT              *
*                           R12 = BASE2 = LOCAL ADDRESSABILITY        *
*                           R13 = SAVE  = ADDRESS OF SAVE AREA        *
*                           R14 = LINK  = LINK REGISTER               *
*                           R15         = WORK REGISTER               *
*                                                                     *
*    PATCH LABEL = NONE                                               *
*                                                                     *
* MODULE TYPE = PROCEDURE, TABLE ( CSECT TYPE )                       *
*                                                                     *
*    PROCESSOR = ASSEMBLER F                                          *
*                                                                     *
*    MODULE SIZE = SEE $DLENGTH MACRO EXPANSION(S) AT END OF ASSEMBLY *
*                                                                     *
*    ATTRIBUTES = NOT REUSABLE                                        *
*                                                                     *
* ENTRY POINT = HASPINIT                                              *
*                                                                     *
*    PURPOSE = SEE FUNCTION                                           *
*                                                                     *
*    LINKAGE = STANDARD OS/VS PROGRAM LINKAGE                         *
*                                                                     *
* INPUT = R1  = ADDRESS OF JCL EXEC CARD PARAMETER CONTROL BLOCK      *
*         R13 = ADDRESS OF SAVE AREA                                  *
*         R14 = RETURN ADDRESS                                        *
*         R15 = ADDRESS OF ENTRY POINT                                *
*                                                                     *
* OUTPUT = SEE EXIT                                                   *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
* EXIT-NORMAL = RETURN TO CALLER (HASPNUC)                            *
*                                                                     *
* EXIT-ERROR = TO SYSTEM VIA BACK CHAINING SAVE AREAS WITH ALL        *
*              REGISTERS RESTORED TO ORIGINAL ENTRY VALUES            *
*              EXCEPT R15 WHICH CONTAINS A COMPLETION CODE OF 20      *
*                                                                     *
* EXTERNAL REFERENCES = SEE BELOW                                     *
*                                                                     *
*    ROUTINES = EXCP, DYNAMIC ALLOCATE, OBTAIN, WTO/WTOR, GETMAIN,    *
*               MISCELLANEOUS JES2 SERVICE ROUTINES IN HASPNUC, AND   *
*               MISCELLANEOUS STANDARD SUPERVISOR SERVICE ROUTINES    *
*                                                                     *
*    DATA AREAS = SEE $HASPCB MACRO EXPANSION                         *
*                                                                     *
*    CONTROL BLOCKS = SEE $HASPCB MACRO EXPANSION                     *
*                                                                     *
* TABLES = NONE                                                       *
*                                                                     *
* MACROS = SEE $HASPCB MACRO FOR CONTROL BLOCK MACROS USED            *
*                                                                     *
* CHANGE ACTIVITY                                                     *
*                                                                     *
*     RELEASE 4.0 = OZ00577,OZ02406,OZ03313,OZ03316,OZ04304,OZ04327,  *
*                   OZ04328,OZ04336,OZ04987,OZ05760,OZ06759,OZ07455,  *
*                   OZ09023,OZ09027,OZ09068                           *
*                                                                     *
*     RELEASE 4.1 = OZ10378,OZ11752,OZ11782,OZ11798,OZ11799,OZ11802,  *
*                   OZ12290,OZ12303,OZ13249,OZ14428,OZ14890,OZ14903,  *
*                   OZ15293,OZ15839                                   *
*                                                                     *
***********************************************************************
         TITLE 'HASP INITIALIZATION -- CONTROL BLOCK GENERATION MACRO DC
               EFINITIONS'
*
***** $HASPCB *****           GENERATE HASP CONTROL BLOCKS
*
         MACRO
         $HASPCB &DOC=NO,&LIST=NO
         GBLC  &PRINT,&GEN,&DATA
         PUSH  PRINT
         PRINT &PRINT
         $PSA  LIST=&LIST          GENERATE OS PSA DSECT
         $CVT  LIST=&LIST          GENERATE OS CVT DSECT
         $JESCT LIST=&LIST         GENERATE OS JESCT DSECT
         $SSCT LIST=&LIST          GENERATE OS SSCT DSECT
         $SSIB LIST=&LIST          GENERATE OS SSIB DSECT
         $ASCB LIST=&LIST          GENERATE OS ASCB DSECT
         $ASVT LIST=&LIST          GENERATE OS ASVT DSECT
         $SRB  LIST=&LIST          GENERATE OS SRB DSECT
         $TCB  LIST=&LIST          GENERATE OS TCB DSECT
         $JSCB LIST=&LIST          GENERATE OS JSCB DSECT
         $DCB  LIST=&LIST          GENERATE OS DCB DSECT
         $DEB  LIST=&LIST          GENERATE OS DEB DSECT
         $IOSB LIST=&LIST          GENERATE OS IOSB DSECT
         $UCB  LIST=&LIST          GENERATE OS UCB DSECT
         $NEL  LIST=&LIST          GENERATE OS NEL DSECT             R4
         $UCM  LIST=&LIST          GENERATE OS UCM DSECT
         $IOCM LIST=&LIST          GENERATE OS IOCM DSECT
         $ATB  LIST=&LIST          GENERATE OS ATB DSECT
         $RPL  LIST=&LIST          GENERATE OS RPL DSECT             R4
         $CPT  DOC=&DOC            GENERATE HASP CPT DSECT          R41
         $SMCA LIST=&LIST          GENERATE OS SMCA DSECT            R4
         $TED  DOC=&DOC            GENERATE HASP TED DSECT
         $TGB  DOC=&DOC            GENERATE HASP TGB DSECT
         $TGM  DOC=&DOC            GENERATE HASP TGM DSECT
         $TAB  DOC=&DOC            GENERATE HASP TAB DSECT           R4
         $PCIE DOC=&DOC            GENERATE HASP PCIE DSECT          R4
         $SVT  DOC=&DOC            GENERATE HASP SSVT DSECT
         $HCT  DOC=&DOC            GENERATE HASP HCT DSECT
         $PCE  DOC=&DOC            GENERATE HASP PCE DSECT
         $BUFFER DOC=&DOC          GENERATE HASP BUFFER DSECT
         $BPM  DOC=&DOC            GENERATE HASP BPM DSECT           R4
         $CMB  DOC=&DOC            GENERATE HASP CMB DSECT
         $SMF  DOC=&DOC            GENERATE HASP SMF DSECT
         $JQE  DOC=&DOC            GENERATE HASP JQE DSECT
         $JOE  DOC=&DOC            GENERATE HASP JOE DSECT
         $JOT  DOC=&DOC            GENERATE HASP JOT DSECT
         $QSE  DOC=&DOC            GENERATE HASP QSE DSECT
         $JQB  DOC=&DOC            GENERATE HASP JQB DSECT
         $JCT  DOC=&DOC            GENERATE HASP JCT DSECT
         $PDDB DOC=&DOC            GENERATE HASP PDDB DSECT          R4
         $IOT  DOC=&DOC            GENERATE HASP IOT DSECT           R4
         $CAT  DOC=&DOC            GENERATE HASP CAT DSECT
         $SCAT DOC=&DOC            GENERATE HASP SCAT DSECT
         $RAT  DOC=&DOC            GENERATE HASP RAT DSECT
         $RDT  DOC=&DOC            GENERATE HASP RDT DSECT           R4
         $DCT  DOC=&DOC            GENERATE HASP DCT DSECT
         $TQE  DOC=&DOC            GENERATE HASP TQE DSECT           R4
         $CCA  DOC=&DOC            GENERATE HASP CCA DSECT           R4
         $HQR  DOC=&DOC            GENERATE HASP HQR DSECT           R4
         $HQT  DOC=&DOC            GENERATE HASP HQT DSECT           R4
         $PIT  DOC=&DOC            GENERATE HASP PIT DSECT
         $CSA  DOC=&DOC            GENERATE HASP CSA DSECT           R4
         $ACT  DOC=&DOC            GENERATE HASP ACT DSECT           R4
         $FMH  DOC=&DOC                                        @OZ29180
         $ICE  DOC=&DOC            GENERATE HASP ICE DSECT           R4
         $SPL  DOC=&DOC            GENERATE HASP SPL DSECT           R4
         $RDRWORK DOC=&DOC         GENERATE HASP RDRWORK DSECT       R4
         $CNVWORK DOC=&DOC         GENERATE HASP CNVWORK DSECT       R4
         $OUTWORK DOC=&DOC         GENERATE HASP OUTWORK DSECT       R4
         $PPPWORK DOC=&DOC         GENERATE HASP PPPWORK DSECT       R4
         $COMWORK DOC=&DOC         GENERATE HASP COMWORK DSECT
         $MLMWORK DOC=&DOC         GENERATE HASP MLMWORK DSECT       R4
         $RCPWORK DOC=&DOC         GENERATE HASP RCPWORK DSECT       R4
         $CKPWORK DOC=&DOC         GENERATE HASP CKPWORK DSECT      R41
         $WARMWRK DOC=&DOC         GENERATE HASP WARMWRK DSECT       R4
         $COM  DOC=&DOC,LIST=&LIST GENERATE HASP COM DSECT
         $MODMAP DOC=&DOC          GENERATE HASP MODMAP DSECT        R4
         $PTE  DOC=&DOC            GENERATE HASP PTE DSECT          R41
         POP   PRINT                                                R41
         PRINT &GEN,&DATA          SET ASSEMBLY PRINT OPTIONS       R41
         MEND                                                       R41
         EJECT                                                      R41
*                                                                   R41
*****    $PTE    *****             MAP PARAMETER TABLE ENTRY        R41
*                                                                   R41
*                                                                   R41
         SPACE 1                                                    R41
         MACRO                                                      R41
         $PTE  &DOC=NO                                              R41
         TITLE 'HASP PARAMETER TABLE ENTRY (PTE) DSECT'             R41
PTEDSECT DSECT                     PARAMETER TABLE ENTRY DSECT      R41
PTEKEY   DS    CL8                 KEYWORD                          R41
PTEKEYLN DS    AL1                 KEYWORD LENGTH                   R41
PTEFLDLN DS    AL1                 FIELD LENGTH                     R41
PTEDISPL DS    Y                   FIELD DISPLACEMENT               R41
PTEFLG1  DS    X                   ENTRY FLAGS                      R41
PTEPRTN  DS    AL3                 PROCESSING ROUTINE ADDRESS       R41
PTEFLG2  DS    X                   RESERVED FOR FUTURE USE          R41
PTEDRTN  DS    AL3                 DISPLAY ROUTINE ADDRESS          R41
PTELOVAL DS    0H                  LOWER LIMIT / MINIMUM LENGTH     R41
PTESWNO  DS    B                   BINARY SWITCH 'OFF' INFO         R41
PTESWYES DS    B                   BINARY SWITCH 'ON'  INFO         R41
         DS    H                   RESERVED FOR FUTURE USE          R41
PTEHIVAL DS    F                   UPPER LIMIT / MAXIMUM LENGTH     R41
PTELENG  EQU   *-PTEDSECT          PARAMETER TABLE ENTRY LENGTH     R41
&SYSECT  CSECT                     END OF PTE DSECT                 R41
         SPACE 3                                                    R41
*                                                                   R41
*                             PTEFLG1                               R41
*                                                                   R41
         SPACE 1                                                    R41
PTE1SHOW EQU   X'80'               FIELD VALUE IS DISPLAYABLE       R41
PTE1OPT  EQU   X'40'               ENTRY DEFINES BINARY SWITCH      R41
PTE1NUM  EQU   X'20'               FIELD VALUE IS NUMERIC           R41
PTE1CHAR EQU   X'10'               FIELD VALUE IS EBCDIC            R41
PTE1SUB  EQU   X'08'               STATEMENT CONTAINS SUBPARAMETERS R41
PTE1RSV5 EQU   X'04'               RESERVED FOR FUTURE USE          R41
PTE1RSV6 EQU   X'02'               RESERVED FOR FUTURE USE          R41
PTE1RSV7 EQU   X'01'               RESERVED FOR FUTURE USE          R41
         MEND                                                       R41
         TITLE 'HASP INITIALIZATION -- TABLE AND ELEMENT GENERATION MACC
               RO DEFINITIONS'                                      R41
*
***** $SCNTBL *****           GENERATE SCAN TABLE ENTRY
*
*
         MACRO
&NAME    $SCNTBL &CODE,&MASK,&DISP,&FLAGS,&RTN                 @OZ29180
         GBLC  &PRINT,&SCNBASE
         LCLC  &KEY
         AIF   ('&RTN' NE '').EE                               @OZ29180
         AIF   ('&MASK' NE '').B
         AIF   ('&NAME' EQ '').F
         AIF   ('&PRINT' NE 'OFF').A
         PUSH  PRINT
         PRINT NOGEN
.A       ANOP
&NAME    DS    0F
&SCNBASE SETC  '&CODE'             SET OUTPUT TABLE BASE
         MEXIT
.B       AIF   ('&NAME' EQ '').C
&NAME    DS    0F
.C       AIF   ('&FLAGS' EQ '').D
&KEY     SETC  '        &CODE'(K'&CODE+1,8)
         DC    CL8'&KEY',AL1(&FLAGS,0),AL2(&DISP-&SCNBASE)     @OZ29180
         DC    AL1(&MASK),AL3(0)                               @OZ29180
         MEXIT
.D       AIF   ('&CODE(1)' EQ '').E
&KEY     SETC  '        &CODE(1)'(K'&CODE(1)+1,8)
         DC    CL8'&KEY',AL1(NSCFLMSK,0),AL2(&DISP-&SCNBASE)   @OZ29180
         DC    AL1(&MASK),AL3(0)                               @OZ29180
.E       AIF   (N'&CODE LE 1).G
&KEY     SETC  '        &CODE(2)'(K'&CODE(2)+1,8)
         DC    CL8'&KEY',AL1(NSCFLCOM,0),AL2(&DISP-&SCNBASE)   @OZ29180
         DC    AL1(&MASK),AL3(0)                               @OZ29180
         MEXIT
.EE      ANOP                                                  @OZ29180
&KEY     SETC  '        &CODE'(K'&CODE+1,8)                    @OZ29180
         DC    CL8'&KEY',AL1(0,NSCFLRTN),AL3(&RTN),AL3(0)      @OZ29180
         MEXIT                                                 @OZ29180
.F       DC    X'FF'               INDICATE END OF SCAN TABLE
         AIF   ('&PRINT' NE 'OFF').G
         POP   PRINT
.G       MEND
         EJECT                                                      R41
*                                                                   R41
*****    $PTENT    *****           GENERATE PARAMETER TABLE ENTRY   R41
*                                                                   R41
*                                                                   R41
         MACRO                                                      R41
&NAME    $PTENT &LNG,&KEY,&RTN,&FLGS,&FLN,&LOC,&RANGE,&FLAG=,       R41C
               &DISPLAY=0                                           R41
         GBLC  &PRINT                                               R41
         LCLA  &A,&KL                                               R41
         LCLC  &C,&D,&FL,&FLX,&LOCN,&N,&O,&OPT,&R,&S,&SHOW          R41
&FL      SETC  '0'                                                  R41
&LOCN    SETC  '0'                                                  R41
         AIF   ('&KEY' EQ '').K    MUST SUPPLY KEYWORD              R41
&KL      SETA  K'&KEY              SET DEFAULT KEY LENGTH           R41
         AIF   ('&DISPLAY' EQ '0').A  BR IF NO DISPLAY ROUTINE      R41
&D       SETC  '+PTE1SHOW'         INDICATE DISPLAYABLE             R41
.A       AIF   ('&KEY'(1,2) NE '&&').B  BR IF NOT &&...             R41
&KL      SETA  &KL-1               COUNT ONLY 1 &                   R41
&D       SETC  '+PTE1SHOW'         INDICATE DISPLAYABLE             R41
&N       SETC  '+PTE1NUM'          INDICATE NUMERIC                 R41
&R       SETC  'NPLNUM'            DEFAULT FOR NUMERIC              R41
&SHOW    SETC  'NPLSHNUM'          DEFAULT FOR NUMERIC DISPLAY      R41
.B       AIF   ('&LNG' EQ '').C    BR IF LENGTH NOT SPECIFIED       R41
&KL      SETA  &LNG                USE SUPPLIED KEY LENGTH          R41
.C       AIF   (&A EQ N'&FLGS).J   BR IF ALL SUBPARMS PROCESSED     R41
&A       SETA  &A+1                COUNT TO NEXT SUBPARAMETER       R41
         AIF   ('&FLGS(&A)' NE 'SHOW').D                            R41
&D       SETC  '+PTE1SHOW'         INDICATE DISPLAYABLE             R41
         AGO   .C                  BR TO TEST NEXT SUBPARAMETER     R41
.D       AIF   ('&FLGS(&A)' NE 'NOSHOW').E                          R41
&D       SETC  ''                  INDICATE NOT DISPLAYABLE         R41
         AGO   .C                  BR TO TEST NEXT SUBPARAMETER     R41
.E       AIF   ('&FLGS(&A)' NE 'EBCDIC').F                          R41
&C       SETC  '+PTE1CHAR'         INDICATE EBCDIC FIELD            R41
&N       SETC  ''                  INDICATE NOT NUMERIC             R41
&R       SETC  'NPLCHAR'           DEFAULT FOR EBCDIC               R41
&SHOW    SETC  'NPLSHCH'           DEFAULT FOR EBCDIC DISPLAY       R41
         AGO   .C                  BR TO TEST NEXT SUBPARAMETER     R41
.F       AIF   ('&FLGS(&A)' NE 'NUMERIC').G                         R41
&N       SETC  '+PTE1NUM'          INDICATE NUMERIC                 R41
&C       SETC  ''                  INDICATE NOT EBCDIC              R41
&R       SETC  'NPLNUM'            DEFAULT FOR NUMERIC              R41
&SHOW    SETC  'NPLSHNUM'          DEFAULT FOR NUMERIC DISPLAY      R41
         AGO   .C                  BR TO TEST NEXT SUBPARAMETER     R41
.G       AIF   ('&FLGS(&A)' NE 'SWITCH').H                          R41
&O       SETC  '+PTE1OPT'          INDICATE BINARY SWITCH           R41
&N       SETC  ''                  INDICATE NOT NUMERIC             R41
&C       SETC  ''                  INDICATE NOT EBCDIC              R41
&R       SETC  'NPLSWICH'          DEFAULT FOR BINARY SWITCH        R41
&SHOW    SETC  'NPLSHOPT'          DEFAULT FOR BINARY SW DISPLAY    R41
         AGO   .C                  BR TO TEST NEXT SUBPARAMETER     R41
.H       AIF   ('&FLGS(&A)' NE 'SUBPARMS').I                        R41
&C       SETC  ''                  INDICATE NOT EBCDIC              R41
&N       SETC  ''                  INDICATE NOT NUMERIC             R41
&O       SETC  ''                  INDICATE NOT SWITCH              R41
         AGO   .C                  BR TO TEST NEXT SUBPARAMETER     R41
.I       MNOTE 8,'INVALID PARAMETER SPECIFICATION'                  R41
         MEXIT                                                      R41
.J       AIF   ('&N' NE '').K      BR IF NUMERIC                    R41
         AIF   ('&C' EQ '').M      BR IF NOT EBCDIC                 R41
         AIF   ('&RANGE' EQ '').N  BR IF DEFAULT LIMITS             R41
.K       AIF   (N'&RANGE EQ 2).N   BR IF LOWER/UPPER LIMITS         R41
.L       MNOTE 8,'MISSING (SUB)PARAMETER'                           R41
         MEXIT                                                      R41
.M       AIF   ('&O' NE '').N      BR IF BINARY SWITCH              R41
&S       SETC  '+PTE1SUB'          INDICATE PARM HAS SUBPARAMETERS  R41
&SHOW    SETC  '0'                 DEFAULT FOR SUBPARAMETER DISPLAY R41
         AIF   ('&RTN' EQ '').L    PARM WITH SUBPARMS REQUIRES RTN  R41
.N       AIF   ('&RTN' EQ '').P    BR IF RTN NOT SPECIFIED          R41
&R       SETC  '&RTN'              USE SUPPLIED ROUTINE ADDRESS     R41
.P       AIF   ('&S' NE '').T      BR IF SUBPARAMETERS              R41
         AIF   ('&LOC' EQ '0').T   BR IF ADDR TO BE SET LATER       R41
&LOCN    SETC  '&KEY'(3,K'&KEY-2)  STRIP OFF AMPERSANDS             R41
&LOCN    SETC  '$&LOCN'            REPLACE WITH $                   R41
         AIF   ('&O' EQ '').R      BR IF NOT BINARY SWITCH          R41
&OPT     SETC  '&LOCN'             DEFAULT FOR SWITCH 'ON'          R41
         AIF   ('&FLAG' EQ '').Q   BR IF FLAG NOT SPECIFIED         R41
&OPT     SETC  '&FLAG'             USE SUPPLIED FLAG                R41
.Q       AIF   ('&LOC' EQ '').L    MUST SPECIFY FIELD FOR SWITCH    R41
.R       AIF   ('&LOC' EQ '').S    BR IF FIELD NOT SPECIFIED        R41
&LOCN    SETC  '&LOC'              USE SUPPLIED FIELD NAME          R41
.S       ANOP                                                       R41
&FL      SETC  'L''&LOCN'          DEFAULT FIELD LENGTH             R41
&LOCN    SETC  '&LOCN.-HCTDSECT'   CONVERT TO FIELD OFFSET IN HCT   R41
.T       AIF   ('&FLN' EQ '').U    BR IF FLD LENGTH NOT SPECIFIED   R41
&FL      SETC  '&FLN'              USE SUPPLIED FIELD LENGTH        R41
.U       AIF   ('&DISPLAY' EQ '0').V  BR IF NO SPECIAL DISPLAY RTN  R41
&SHOW    SETC  '&DISPLAY'             USE SUPPLIED DISPLAY RTN ADDR R41
.V       ANOP                                                       R41
&NAME    DC    CL8'&KEY',AL1(&KL)                                   R41
         DC    AL1(&FL),Y(&LOCN)                                    R41
&FLX     SETC  '&D&O&N&C&S'                                         R41
&FLX     SETC  '&FLX'(2,K'&FLX-1)                                   R41
         DC    AL1(&FLX),AL3(&R)                                    R41
         DC    AL1(0),AL3(&SHOW)                                    R41
         AIF   ('&O' EQ '').X      BR IF NOT BINARY SWITCH          R41
         DC    AL1(255-&OPT,&OPT),AL2(0),A(0)                       R41
         MEXIT                                                      R41
.X       AIF   ('&S' NE '').Z      BR IF SUBPARAMETERS              R41
         AIF   ('&C' EQ '' OR '&RANGE' NE '').Y                     R41
         DC    AL2(&FL,0),A(&FL)                                    R41
         MEXIT                                                      R41
.Y       ANOP                                                       R41
         DC    AL2(&RANGE(1),0),A(&RANGE(2))                        R41
         MEXIT                                                      R41
.Z       ANOP                                                       R41
         DC    AL2(0,0),A(0)                                        R41
         MEND                                                       R41
 TITLE 'HASP INITIALIZATION -- LOCAL EXECUTABLE MACRO DEFINITIONS'   R4
*                                                                    R4
***** $$WTOR *****            ISSUE QUERY TO OPERATOR                R4
*                                                                    R4
*                                                                    R4
         MACRO                                                       R4
&NAME    $$WTOR &MSG                                                 R4
&NAME    $$WTO  &MSG               USE $$WTO ROUTINE FOR $$WTOR'S    R4
         MEND                                                        R4
         SPACE 5                                                     R4
*                                                                    R4
***** $$WTO *****             ISSUE MESSAGE TO OPERATOR              R4
*                                                                    R4
*                                                                    R4
         MACRO                                                       R4
&NAME    $$WTO &MSG                                                  R4
         LCLC  &N                                                    R4
         AIF   ('&MSG' EQ '(R1)').B                                  R4
         AIF   ('&MSG'(1,1) NE '(').A                                R4
&NAME    LR    R1,&MSG(1)          RELOAD MESSAGE ADDRESS            R4
         AGO   .C                                                    R4
.A       ANOP                                                        R4
&NAME    L     R1,=A(&MSG)         POINT TO MESSAGE                  R4
         AGO   .C                                                    R4
.B       ANOP                                                        R4
&N       SETC  '&NAME'                                               R4
.C       ANOP                                                        R4
&N       L     R15,=A(NWTORTN)     POINT TO $$WTO/$$WTOR SETUP RTN   R4
         BALR  R14,R15             PROCESS $$WTO/$$WTOR REQUEST      R4
         MEND                                                        R4
         EJECT                                                       R4
*                                                                    R4
***** $EXIT *****                  EXIT ABNORMALLY FROM HASPINIT     R4
*                                                                    R4
*                                                                    R4
         MACRO                                                       R4
&NAME    $EXIT &MSG                                                  R4
         LCLC  &N                                                    R4
         AIF   ('&MSG' EQ '(R1)').B                                  R4
         AIF   ('&MSG'(1,1) NE '(').A                                R4
&NAME    LR    R1,&MSG(1)          RELOAD MESSAGE ADDRESS            R4
         AGO   .C                                                    R4
.A       ANOP                                                        R4
&NAME    L     R1,=A(&MSG)         POINT TO MESSAGE                  R4
         AGO   .C                                                    R4
.B       ANOP                                                        R4
&N       SETC  '&NAME'                                               R4
.C       ANOP                                                        R4
&N       L     R15,=A(NERRORET)    GET ERROR EXIT ROUTINE ADDRESS    R4
         BR    R15                  AND BR TO EXIT                   R4
         MEND                                                        R4
         TITLE 'HASP INITIALIZATION'
         SPACE 5
HASPINIT START 0                   HASP INITIALIZATION MODULE        R4
         SPACE 5
         COPY  $HASPGEN            COPY HASPGEN PARAMETERS
         TITLE 'HASP INITIALIZATION OPTIONS'
         SPACE 5
*
*                        STANDARD DEFAULT INITIALIZATION PARAMETERS
*
         SPACE 3
$OPTSTD  EQU   $OPTNFMT+$OPTWARM+$OPTREQ+$OPTLIST+$OPTLOG           R41
         SPACE 5                                                    R41
*                                                                   R41
*                             AUXILLIARY REGISTER DEFINITIONS       R41
*                                                                   R41
         SPACE 3                                                    R41
BASE4    EQU   R10                 PROCESSOR ADDRESSABILITY REGISTER
         TITLE 'HASP CONTROL BLOCKS'
*
*                             DOCUMENTATION OPTIONS FOR THIS ASSEMBLY
*
         SPACE 3
        $SYSPARM (OFF,GEN,NODATA,NO,NO)
         SPACE 5
*
*                             GENERATE HASP CONTROL BLOCKS
*
         SPACE 3
        $HASPCB DOC=&DOC,LIST=&LIST  GENERATE HASP CONTROL BLOCKS
         TITLE 'HASP INITIALIZATION -- BASE1 ADDRESS TABLE'          R4
         SPACE 5                                                     R4
***********************************************************************
*                                                                     *
*              BASE1 (HCT) ADDRESS TABLE                              *
*                                                                     *
***********************************************************************
         SPACE 3                                                     R4
HCTDSECT DSECT                     RE-OPEN HCT DSECT                 R4
         SPACE 1                                                     R4
         ORG   $EWQ1               REDEFINE PROCESSOR QUEUES         R4
         SPACE 2                                                     R4
INITDBL  DS    D                   DOUBLE WORD WORK AREA             R4
TEDSTART DC    A(*-*)              ADDRESS OF TEMPORARY TEDS         R4
$RAT     DC    A(*-*)              ADDRESS OF TEMPORARY RAT          R4
$RWT     DC    A(*-*)              ADDRESS OF REMOTE WORK TABLE      R4
NCOMMTAB DC    A(*-*)              ADDRESS OF 1ST TEMP COMMAND AREA  R4
NTMPSTOR DC    A(*-*)              ADDRESS OF TEMPORARY STORAGE      R4
NDCTSTOR DC    A(*-*)              ADDR OF TEMPORARY DCT STORAGE     R4
*                                  THIS CARD DELETED BY APAR   @OZ20010
$NDQ     DS    A                   ADDRESS OF FIRST NDQ              R4
NLOGLINE DC    F'0'                COUNT OF UNIT=SNA LINES           R4
         SPACE 2                                                     R4
HASPINIT CSECT                     END OF BASE1 ADDRESS TABLE        R4
         TITLE 'HASP INITIALIZATION -- INITIAL ENTRY POINT'
***********************************************************************
*                                                                     *
*        HASPINIT -- INITIAL ENTRY POINT                              *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
HASPINIT $ENTRY CSECT=YES,BASE=R15 PROVIDE HASPINIT ENTRY POINT      R4
         SPACE 1                                                     R4
         DROP  SAVE,R15            KILL INITIAL, PCE ADDRESSABILITY  R4
         USING HASPINIT,BASE2      RE-ESTABLISH ADDRESSABILITY       R4
         SPACE 1                                                     R4
         STM   R14,R12,12(R13)     SAVE HASPNUC'S REGISTERS          R4
         LR    BASE2,R15           ESTABLISH BASE
         LA    R15,NSAVE           POINT TO HASPINIT SAVE AREA       R4
         ST    R15,8(,R13)         STORE FORWARD POINTER
         ST    R13,4(,R15)         STORE BACKWARD POINTER
         LR    R13,R15             SWITCH TO NEW SAVE AREA
         L     WB,0(,R1)           GET ADDRESS OF PARAMETER FIELD    R4
         SPACE 1                                                     R4
***********************************************************************
*                                                                     *
*        LONG-TERM FIX FIRST 8K OF HASPNUC                            *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
         L     WA,PSATOLD-PSA      PICK UP HASP TCB ADDRESS          R4
         ST    WA,$HASPTCB         STORE IN HCT                      R4
         L     R0,=A(8192)           PAGE FIX                        R4
         LA    R2,NOPTECB             1ST 8K                         R4
        $PGSRVC FIX,(BASE1),(R0),(R2)  OF HASP                       R4
         WAIT  ECB=NOPTECB         WAIT FOR PAGE FIX TO COMPLETE     R4
         MVC   NOPTPJES+2(1),$CCOMCHR  SET ID FOR 'PJES2'            R4
         TITLE 'HASP INITIALIZATION -- OPTION REPLY SCAN'            R4
***********************************************************************
*                                                                     *
*        SCAN EXEC CARD PARAMETER FIELD OR OPERATOR REPLY             *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
         LH    R1,0(,WB)           GET LENGTH OF PARAMETER FIELD     R4
         LTR   R1,R1               TEST
         BZ    NOPTWTOR            BRANCH IF NO PARAMETER FIELD
         CL    R1,=A(L'NOPTAREA)   CHECK LENGTH
         BH    NOPTSCN8            ERROR IF TOO LONG
         BCTR  R1,0                DECREMENT
         STC   R1,*+5               AND SET MOVE LENGTH
         MVC   NOPTAREA(*-*),2(WB) MOVE PARM FIELD TO REPLY AREA     R4
         B     NOPTSCAN            SCAN PARAMETER LIST
         SPACE 1                                                     R4
NOPTWTOR MVI   NOPTECB,0           CLEAR REPLY ECB                   R4
        $$WTOR NOPTMSG1            ASK OPERATOR FOR RUN OPTIONS      R4
         SPACE 1                                                     R4
NOPTWAIT WAIT  ECB=NOPTECB         WAIT FOR REPLY
         SPACE 1                                                     R4
NOPTSCAN MVI   $OPTSTAT,$OPTSTD    SET STANDARD OPTIONS
         LA    WA,NOPTAREA-1       PREPARE TO SCAN REPLY
         SPACE 1                                                     R4
NOPTSCN1 LM    R0,R1,NOPTNULL      SCAN NEXT PARAMETER
         LA    WB,L'NOPTNULL+1     MAXIMUM KEYWORD LENGTH + 1        R4
         SPACE 1                                                     R4
NOPTSCN2 LA    WA,1(WA)            ADVANCE TO NEXT CHARACTER
         CLI   0(WA),C','          CHECK FOR COMMA
         BE    NOPTSCN3            BRANCH IF COMMA
         CLI   0(WA),C'='          CHECK FOR EQUAL
         BE    NOPTSCN5            BRANCH IF EQUAL
         CLI   0(WA),0             CHECK FOR END OF REPLY
         BE    NOPTSCN3            BRANCH IF END OF REPLY
         CLI   0(WA),C' '          CHECK FOR BLANK
         BE    NOPTSCN2            BRANCH IF BLANK
         OI    0(WA),X'40'         CAPITALIZE
         SLDL  R0,8                MAKE ROOM IN REGISTERS
         IC    R1,0(WA)            AND INSERT CHARACTER
         BCT   WB,NOPTSCN2         LOOP FOR MAX KEYWORD LENGTH + 1   R4
         B     NOPTSCN8            SYNTAX ERROR - NOTIFY OPERATOR    R4
         SPACE 1                                                     R4
NOPTSCN3 TM    $OPTSTAT,$OPTPARM   TEST FOR HASPPARM= VALUE
         BO    NOPTSCN6            BRANCH IF YES
         STM   R0,R1,NOPTPARM      SAVE PARAMETER
         CLC   NOPTPARM,NOPTPJES   TEST FOR 'PJES2'                  R4
         BE    NOPTRET             RETURN IMMEDIATELY IF '$PJES2'
         LA    WB,NOPTORG-10       PREPARE TO SEARCH OPTION TABLE
         LA    WC,(NOPTEND-NOPTORG)/10  WC = NUMBER OF ENTRIES
         EJECT                                                       R4
NOPTSCN4 LA    WB,10(,WB)          ADVANCE TO NEXT ENTRY
         CLC   0(8,WB),NOPTPARM    SEARCH FOR MATCHING ENTRY
         BE    NOPTSCN9            BRANCH IF MATCH FOUND
         BCT   WC,NOPTSCN4         SEARCH ENTIRE TABLE
         B     NOPTSCN8            NOT FOUND, NOTIFY OPERATOR
         SPACE 1                                                     R4
NOPTSCN5 STM   R0,R1,NOPTPARM      SAVE PARAMETER
         CLC   NOPTPARM,=CL8'HASPPARM'  CHECK FOR 'HASPPARM='
         BNE   NOPTSCN8            ILLEGAL IF NOT
         OI    $OPTSTAT,$OPTPARM   INDICATE HASPPARM= SCAN
         B     NOPTSCN1            SCAN HASPPARM= VALUE
         SPACE 1                                                     R4
NOPTSCN6 CL    R1,NOPTNULL         CHECK FOR NULL VALUE
         BE    NOPTSCN8            ILLEGAL IF NULL
         SPACE 1                                                     R4
NOPTSCN7 STM   R0,R1,NOPTPARM      SAVE VALUE
         SLDL  R0,8                LEFT
         IC    R1,NOPTNULL          JUSTIFY
         CLI   NOPTPARM,C' '         ADDING
         BE    NOPTSCN7               TRAILING BLANKS
         L     R1,=A(HASPPARM)     GET ADDRESS OF HASPPARM DCB
         MVC   DCBDDNAM-DCBDSECT(,R1),NOPTPARM  SET NEW DDNAME
         NI    $OPTSTAT,255-$OPTPARM  INDICATE PROCESSING COMPLETE
         B     NOPTSCNE            PROCESS NEXT PARAMETER
         SPACE 1                                                     R4
NOPTSCN8 XC    NOPTAREA,NOPTAREA   ERROR, CLEAR REPLY AREA
         L     R1,=A(HASPPARM)     RESET HASPPARM DDNAME
         MVC   DCBDDNAM-DCBDSECT(,R1),=CL8'HASPPARM'
         MVI   NOPTECB,0           CLEAR ECB
        $$WTOR NOPTMSG2            RE-QUERY OPERATOR                 R4
         B     NOPTWAIT            REPEAT PROCEDURE
         SPACE 1                                                     R4
NOPTSCN9 OC    $OPTSTAT,8(WB)      SET OR
         NC    $OPTSTAT,9(WB)       RESET STATUS BITS
         SPACE 1                                                     R4
NOPTSCNE CLI   0(WA),0             TEST FOR END OF REPLY
         BNE   NOPTSCN1            BRANCH IF NOT END OF REPLY
         B     NCBINIT             BR TO NEXT SECTION                R4
         SPACE 1                                                     R4
***********************************************************************
*                                                                     *
*        RETURN IMMEDIATELY IF '$PJES2'                               *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
NOPTRET  L     R13,4(,R13)         POINT TO HASPNUC'S SAVE AREA      R4
         L     R13,4(,R13)         POINT TO SYSTEM'S SAVE AREA       R4
         LM    R14,R12,12(R13)     RESTORE REGISTERS
         SR    R15,R15             SET RETURN CODE
         BR    R14                  AND RETURN
         EJECT                                                       R4
         DS    0D                  BOUNDARY ALIGNMENT          @OZ20010
NSAVE    DS    18F                 HASPINIT SAVE AREA                R4
NOPTECB  DC    F'0'                ECB FOR WTOR
NOPTNULL DC    0D'0',CL8' '        NULL PARAMETER
NOPTPJES DC    CL8'  *PJES2'       USED TO TEST FOR 'PJES2'          R4
NOPTPARM DS    D                   PARAMETER STORAGE
         SPACE 1
NOPTAREA DC    XL100'0',X'00'      OPTION AREA
         SPACE 1
NOPTORG  NULL                      OPTION TABLE
         DC    C'  FORMAT',AL1($OPTFMT,255-$OPTNFMT)   FORMAT
         DC    C'   NOFMT',AL1($OPTNFMT,255-$OPTFMT)   NOFMT
         DC    C'    COLD',AL1($OPTCOLD,255-$OPTWARM)  COLD
         DC    C'    WARM',AL1($OPTWARM,255-$OPTCOLD)  WARM
         DC    C'     REQ',AL1($OPTREQ,255-$OPTNREQ)   REQ
         DC    C'   NOREQ',AL1($OPTNREQ,255-$OPTREQ)   NOREQ
         DC    C'    LIST',AL1($OPTLIST,255-$OPTNLST)  LIST
         DC    C'  NOLIST',AL1($OPTNLST,255-$OPTLIST)  NOLIST
         DC    C'     LOG',AL1($OPTLOG,255-$OPTNLOG)   LOG          R41
         DC    C'   NOLOG',AL1($OPTNLOG,255-$OPTLOG)   NOLOG        R41
         DC    C'    NONE',AL1(0,255)                  NONE
         DC    C'       N',AL1(0,255)                  N
         DC    C'       U',AL1(0,255)                  U
         DC    C'        ',AL1(0,255)                  NULL
NOPTEND  NULL                      END OF OPTION TABLE
  TITLE  'HASP INITIALIZATION -- FIXED-LENGTH TABLE INITIALIZATION'  R4
***********************************************************************
*                                                                     *
*        OBTAIN STORAGE FOR AND INITIALIZE FIXED-LENGTH TABLES        *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
NCBINIT  LA    WB,16+40            PTF MAP, SET. TIME PRIO TBL LNS   R4
         LA    WB,CCALEN(,WB)      CELL CONTROL AREA LENGTH          R4
         LA    WB,ACTLEN(,WB)      AUTOMATIC COMMAND TABLE LENGTH    R4
         LA    WB,CATLEN*64(,WB)   CLASS ATTRIBUTE TABLE LENGTH      R4
         LA    WB,CSALEN(,WB)      CONSOLE SERVICE WORK AREA LENGTH  R4
         LR    R0,WB               RELOAD FOR GETMAIN                R4
         GETMAIN R,LV=(0)          OBTAIN TABLE STORAGE              R4
         LR    WA,R1               CLEAR                             R4
         SLR   WD,WD                TABLE                            R4
         MVCL  WA,WC                 STORAGE                         R4
         ST    R1,$PTFMAP          SET POINTER TO PTF MAP            R4
         LA    R1,16(,R1)          STEP OVER PTF MAP                 R4
         ST    R1,$RTIMTAB         SET POINTER TO PRIORITY TABLE     R4
         MVC   0(40,R1),NRTIMTAB   INITIALIZE EST. TIME PRIORITY TBL R4
         LA    R1,40(,R1)          STEP OVER TABLE                   R4
         ST    R1,$CCAREA          SET POINTER TO CCA                R4
         SPACE 1                                                     R4
         USING CCADSECT,R1         PROVIDE CCA ADDRESSABILITY        R4
         SPACE 1                                                     R4
         LA    R0,5*60             SET DELETE                        R4
         ST    R0,CCADELT           TIME INTERVAL                    R4
         LA    R1,CCALEN(,R1)      STEP OVER CCA                     R4
         SPACE 1                                                     R4
         ST    R1,$ACTABLE         SET POINTER TO ACT                R4
         SPACE 1                                                     R4
         USING ACTDSECT,R1         PROVIDE ACT ADDRESSABILITY        R4
         SPACE 1                                                     R4
         MVI   ACTTQE+IPOST,X'80'  PRE-POST TQE                      R4
         LA    R0,10*60            SET MAXIMUM                       R4
         ST    R0,ACTMINTV          TIME INTERVAL                    R4
         LA    R0,5*60             SET MAXIMUM                       R4
         ST    R0,ACTMDELI          BACKLOG INTERVAL                 R4
         LA    R1,ACTLEN(,R1)      STEP OVER ACT                     R4
         ST    R1,$CATABLE         SET POINTER TO CAT                R4
         EJECT                                                       R4
         USING CATDSECT,R1         PROVIDE CAT ADDRESSABILITY        R4
         SPACE 1                                                     R4
         LA    R0,X'C9'-X'BF'      INITIALIZE                        R4
         BAL   WE,NONBATCH          CAT ENTRIES                      R4
         BCT   R0,NBATCH             C0 - C9                         R4
         SPACE 1                                                     R4
         LA    R0,X'CF'-X'C9'      INITIALIZE                        R4
         BAL   WE,NONBATCH          CAT ENTRIES                      R4
         BCT   R0,NONBATCH           CA - CF                         R4
         SPACE 1                                                     R4
         OI    CATJOBFL,CATSTCJB   INDICATE STARTED TASK CLASS       R4
         BAL   WE,NOCATSMF         INITIALIZE STC CAT ENTRY D0       R4
         LA    R0,X'D9'-X'D0'      INITIALIZE                        R4
         BAL   WE,NBATCH            CAT ENTRIES                      R4
         BCT   R0,NBATCH             D1 - D9                         R4
         SPACE 1                                                     R4
         LA    R0,X'DF'-X'D9'      INITIALIZE                        R4
         BAL   WE,NONBATCH          CAT ENTRIES                      R4
         BCT   R0,NONBATCH           DA - DF                         R4
         SPACE 1                                                     R4
         OI    CATJOBFL,CATTSUJB   INDICATE LOGON CLASS              R4
         OI    CATOPSWT,CATTSOP    INDICATE TIME-SHARING USER        R4
         BAL   WE,NONBATCH         INITIALIZE TSU CAT ENTRY E0       R4
         LA    R0,X'E9'-X'E0'      INITIALIZE                        R4
         BAL   WE,NONBATCH          CAT ENTRIES                      R4
         BCT   R0,NBATCH             E1 - E9                         R4
         SPACE 1                                                     R4
         LA    R0,X'EF'-X'E9'      INITIALIZE CAT                    R4
         BAL   WE,NONBATCH          CAT ENTRIES                      R4
         BCT   R0,NONBATCH           EA - EF                         R4
         SPACE 1                                                     R4
         LA    R0,X'F9'-X'EF'      INITIALIZE                        R4
         BAL   WE,NBATCH            CAT ENTRIES                      R4
         BCT   R0,NBATCH             F0 - F9                         R4
         SPACE 1                                                     R4
         LA    R0,X'FF'-X'F9'      INITIALIZE                        R4
         BAL   WE,NONBATCH          CAT ENTRIES                      R4
         BCT   R0,NONBATCH           FA - FF                         R4
         SPACE 1                                                     R4
         B     NCSAINIT            THEN BR TO CONTINUE               R4
         SPACE 1                                                     R4
NBATCH   OI    CATJOBFL,CATBATCH   INDICATE BATCH JOB CLASS          R4
         SPACE 1                                                     R4
NONBATCH OI    CATOPSWT,CATSMF     INDICATE SMF PROCESSING           R4
         SPACE 1                                                     R4
NOCATSMF MVC   CATPROCN,=C'000'    SET DEFAULT PROCEDURE NAME SUFFIX R4
         MVC   CATPERFM,=C'000'    SET DEFAULT PERFORMANCE GROUP     R4
         LA    R1,CATEND           POINT TO NEXT CAT ENTRY           R4
         BR    WE                   AND RETURN                       R4
         EJECT                                                       R4
NCSAINIT ST    R1,$CSAREA          SET POINTER TO CSA                R4
         SPACE 1                                                     R4
         USING CSADSECT,R1         PROVIDE CSA ADDRESSABILITY        R4
         SPACE 1                                                     R4
         MVI   CSALAREA+1,1        SET NUMBER OF LINES               R4
         MVI   CSALEVEL+2,X'FF'             $T CON SETTINGS FOR      R4
         MVC   CSALEVEL+3(7*2-1),CSALEVEL+2  LOGICAL CONSOLES        R4
         B     NSETPTF             BR TO INITIALIZE PTF MAP          R4
         SPACE 1                                                     R4
         DROP  R1                  KILL CSA ADDRESSABILITY           R4
         SPACE 3                                                     R4
NRTIMTAB DS    0F                                                    R4
         DC    AL1(9),AL3(60*2)                FIRST   INTERVAL      R4
         DC    AL1(8),AL3(30*5)                SECOND  INTERVAL      R4
         DC    AL1(7),AL3(60*15)               THIRD   INTERVAL      R4
         DC    AL1(6),AL3(60*(X'FFFFFF'/60))   FOURTH  INTERVAL      R4
         DC    AL1(5),AL3(60*(X'FFFFFF'/60))   FIFTH   INTERVAL      R4
         DC    AL1(4),AL3(60*(X'FFFFFF'/60))   SIXTH   INTERVAL      R4
         DC    AL1(3),AL3(60*(X'FFFFFF'/60))   SEVENTH INTERVAL      R4
         DC    AL1(2),AL3(60*(X'FFFFFF'/60))   EIGHTH  INTERVAL      R4
         DC    AL1(1),AL3(60*(X'FFFFFF'/60))   NINTH   INTERVAL      R4
         DC    AL4(X'FFFFFF')                                        R4
     TITLE 'HASP INITIALIZATION -- MAINTENANCE RECORD INITIALIZATION'
***********************************************************************
*                                                                     *
*        THE INSTRUCTIONS WHICH FOLLOW WILL BE CHANGED FROM 'CLI'     *
*        INSTRUCTIONS TO 'OI' INSTRUCTIONS AS PART OF THE PTF         *
*        FIXES WHICH ARE RECORDED AGAINST THIS VERSION OF JES2.       *
*                                                                     *
*        THE BITS TURNED ON IN THE PTF MAP THUS REFLECT THE PTF       *
*        LEVEL OF THE LOAD MODULE.                                    *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
NSETPTF  L     WA,$PTFMAP          POINT TO HASP PTF MAP             R4
         SPACE 1                                                     R4
         CLI   0(WA),X'80'         APAR NUMBER    1                  R4
         CLI   0(WA),X'40'         APAR NUMBER    2                  R4
         CLI   0(WA),X'20'         APAR NUMBER    3                  R4
         CLI   0(WA),X'10'         APAR NUMBER    4                  R4
         CLI   0(WA),X'08'         APAR NUMBER    5                  R4
         CLI   0(WA),X'04'         APAR NUMBER    6                  R4
         CLI   0(WA),X'02'         APAR NUMBER    7                  R4
         CLI   0(WA),X'01'         APAR NUMBER    8                  R4
         CLI   1(WA),X'80'         APAR NUMBER    9                  R4
         CLI   1(WA),X'40'         APAR NUMBER   10                  R4
         CLI   1(WA),X'20'         APAR NUMBER   11                  R4
         CLI   1(WA),X'10'         APAR NUMBER   12                  R4
         CLI   1(WA),X'08'         APAR NUMBER   13                  R4
         CLI   1(WA),X'04'         APAR NUMBER   14                  R4
         CLI   1(WA),X'02'         APAR NUMBER   15                  R4
         CLI   1(WA),X'01'         APAR NUMBER   16                  R4
         CLI   2(WA),X'80'         APAR NUMBER   17                  R4
         CLI   2(WA),X'40'         APAR NUMBER   18                  R4
         CLI   2(WA),X'20'         APAR NUMBER   19                  R4
         CLI   2(WA),X'10'         APAR NUMBER   20                  R4
         CLI   2(WA),X'08'         APAR NUMBER   21                  R4
         CLI   2(WA),X'04'         APAR NUMBER   22                  R4
         CLI   2(WA),X'02'         APAR NUMBER   23                  R4
         CLI   2(WA),X'01'         APAR NUMBER   24                  R4
         CLI   3(WA),X'80'         APAR NUMBER   25                  R4
         CLI   3(WA),X'40'         APAR NUMBER   26                  R4
         CLI   3(WA),X'20'         APAR NUMBER   27                  R4
         CLI   3(WA),X'10'         APAR NUMBER   28                  R4
         CLI   3(WA),X'08'         APAR NUMBER   29                  R4
         CLI   3(WA),X'04'         APAR NUMBER   30                  R4
         CLI   3(WA),X'02'         APAR NUMBER   31                  R4
         CLI   3(WA),X'01'         APAR NUMBER   32                  R4
         EJECT                                                       R4
         CLI   4(WA),X'80'         APAR NUMBER   33                  R4
         CLI   4(WA),X'40'         APAR NUMBER   34                  R4
         CLI   4(WA),X'20'         APAR NUMBER   35                  R4
         CLI   4(WA),X'10'         APAR NUMBER   36                  R4
         CLI   4(WA),X'08'         APAR NUMBER   37                  R4
         CLI   4(WA),X'04'         APAR NUMBER   38                  R4
         CLI   4(WA),X'02'         APAR NUMBER   39                  R4
         CLI   4(WA),X'01'         APAR NUMBER   40                  R4
         CLI   5(WA),X'80'         APAR NUMBER   41                  R4
         CLI   5(WA),X'40'         APAR NUMBER   42                  R4
         CLI   5(WA),X'20'         APAR NUMBER   43                  R4
         CLI   5(WA),X'10'         APAR NUMBER   44                  R4
         CLI   5(WA),X'08'         APAR NUMBER   45                  R4
         CLI   5(WA),X'04'         APAR NUMBER   46                  R4
         CLI   5(WA),X'02'         APAR NUMBER   47                  R4
         CLI   5(WA),X'01'         APAR NUMBER   48                  R4
         CLI   6(WA),X'80'         APAR NUMBER   49                  R4
         CLI   6(WA),X'40'         APAR NUMBER   50                  R4
         CLI   6(WA),X'20'         APAR NUMBER   51                  R4
         CLI   6(WA),X'10'         APAR NUMBER   52                  R4
         CLI   6(WA),X'08'         APAR NUMBER   53                  R4
         CLI   6(WA),X'04'         APAR NUMBER   54                  R4
         CLI   6(WA),X'02'         APAR NUMBER   55                  R4
         CLI   6(WA),X'01'         APAR NUMBER   56                  R4
         CLI   7(WA),X'80'         APAR NUMBER   57                  R4
         CLI   7(WA),X'40'         APAR NUMBER   58                  R4
         CLI   7(WA),X'20'         APAR NUMBER   59                  R4
         CLI   7(WA),X'10'         APAR NUMBER   60                  R4
         CLI   7(WA),X'08'         APAR NUMBER   61                  R4
         CLI   7(WA),X'04'         APAR NUMBER   62                  R4
         CLI   7(WA),X'02'         APAR NUMBER   63                  R4
         CLI   7(WA),X'01'         APAR NUMBER   64                  R4
         CLI   8(WA),X'80'         APAR NUMBER   65                  R4
         CLI   8(WA),X'40'         APAR NUMBER   66                  R4
         CLI   8(WA),X'20'         APAR NUMBER   67                  R4
         CLI   8(WA),X'10'         APAR NUMBER   68                  R4
         CLI   8(WA),X'08'         APAR NUMBER   69                  R4
         CLI   8(WA),X'04'         APAR NUMBER   70                  R4
         CLI   8(WA),X'02'         APAR NUMBER   71                  R4
         CLI   8(WA),X'01'         APAR NUMBER   72                  R4
         CLI   9(WA),X'80'         APAR NUMBER   73                  R4
         CLI   9(WA),X'40'         APAR NUMBER   74                  R4
         CLI   9(WA),X'20'         APAR NUMBER   75                  R4
         CLI   9(WA),X'10'         APAR NUMBER   76                  R4
         CLI   9(WA),X'08'         APAR NUMBER   77                  R4
         CLI   9(WA),X'04'         APAR NUMBER   78                  R4
         CLI   9(WA),X'02'         APAR NUMBER   79                  R4
         CLI   9(WA),X'01'         APAR NUMBER   80                  R4
         EJECT                                                       R4
         CLI   10(WA),X'80'        APAR NUMBER   81                  R4
         CLI   10(WA),X'40'        APAR NUMBER   82                  R4
         CLI   10(WA),X'20'        APAR NUMBER   83                  R4
         CLI   10(WA),X'10'        APAR NUMBER   84                  R4
         CLI   10(WA),X'08'        APAR NUMBER   85                  R4
         CLI   10(WA),X'04'        APAR NUMBER   86                  R4
         CLI   10(WA),X'02'        APAR NUMBER   87                  R4
         CLI   10(WA),X'01'        APAR NUMBER   88                  R4
         CLI   11(WA),X'80'        APAR NUMBER   89                  R4
         CLI   11(WA),X'40'        APAR NUMBER   90                  R4
         CLI   11(WA),X'20'        APAR NUMBER   91                  R4
         CLI   11(WA),X'10'        APAR NUMBER   92                  R4
         CLI   11(WA),X'08'        APAR NUMBER   93                  R4
         CLI   11(WA),X'04'        APAR NUMBER   94                  R4
         CLI   11(WA),X'02'        APAR NUMBER   95                  R4
         CLI   11(WA),X'01'        APAR NUMBER   96                  R4
         CLI   12(WA),X'80'        APAR NUMBER   97                  R4
         CLI   12(WA),X'40'        APAR NUMBER   98                  R4
         CLI   12(WA),X'20'        APAR NUMBER   99                  R4
         CLI   12(WA),X'10'        APAR NUMBER  100                  R4
         CLI   12(WA),X'08'        APAR NUMBER  101                  R4
         CLI   12(WA),X'04'        APAR NUMBER  102                  R4
         CLI   12(WA),X'02'        APAR NUMBER  103                  R4
         CLI   12(WA),X'01'        APAR NUMBER  104                  R4
         CLI   13(WA),X'80'        APAR NUMBER  105                  R4
         CLI   13(WA),X'40'        APAR NUMBER  106                  R4
         CLI   13(WA),X'20'        APAR NUMBER  107                  R4
         CLI   13(WA),X'10'        APAR NUMBER  108                  R4
         CLI   13(WA),X'08'        APAR NUMBER  109                  R4
         CLI   13(WA),X'04'        APAR NUMBER  110                  R4
         CLI   13(WA),X'02'        APAR NUMBER  111                  R4
         CLI   13(WA),X'01'        APAR NUMBER  112                  R4
         CLI   14(WA),X'80'        APAR NUMBER  113                  R4
         CLI   14(WA),X'40'        APAR NUMBER  114                  R4
         CLI   14(WA),X'20'        APAR NUMBER  115                  R4
         CLI   14(WA),X'10'        APAR NUMBER  116                  R4
         CLI   14(WA),X'08'        APAR NUMBER  117                  R4
         CLI   14(WA),X'04'        APAR NUMBER  118                  R4
         CLI   14(WA),X'02'        APAR NUMBER  119                  R4
         CLI   14(WA),X'01'        APAR NUMBER  120                  R4
         CLI   15(WA),X'80'        APAR NUMBER  121                  R4
         CLI   15(WA),X'40'        APAR NUMBER  122                  R4
         CLI   15(WA),X'20'        APAR NUMBER  123                  R4
         CLI   15(WA),X'10'        APAR NUMBER  124                  R4
         CLI   15(WA),X'08'        APAR NUMBER  125                  R4
         CLI   15(WA),X'04'        APAR NUMBER  126                  R4
         CLI   15(WA),X'02'        APAR NUMBER  127                  R4
         CLI   15(WA),X'01'        APAR NUMBER  128                  R4
         TITLE 'HASP INITIALIZATION -- INITIAL CONTROL BLOCK INITIALIZAC
               TION'                                                 R4
***********************************************************************
*                                                                     *
*        LIMIT &MAXPART UPPER LIMIT TO MAXUSER - 3                    *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
         USING ASVT,WA             PROVIDE ASVT ADDRESSABILITY       R4
         USING CVTDSECT,WC         PROVIDE CVT ADDRESSABILITY        R4
         SPACE 1                                                     R4
         L     WC,CVTPTR           POINT TO CVT                      R4
         L     WA,CVTASVT          POINT TO ASVT                     R4
         L     R1,ASVTMAXU         GET MAXIMUM ADDRESS SPACES        R4
         SH    R1,=H'3'             LESS 3 FOR MSTR SCHED, ASM, JES2 R4
         L     R15,=A(NMAXPART)    POINT TO &MAXPART UPPER LIMIT     R4
         C     R1,0(,R15)          ENSURE &MAXPART                  R41
         BNL   SKIP10               NOT GREATER THAN                 R4
         ST    R1,0(,R15)            MAXUSER - 3                    R41
         SPACE 2                                                     R4
***********************************************************************
*                                                                     *
*        FIND OUR SUBSYSTEM CVT (SSCT)                                *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
SKIP10   L     WA,$HASPTCB         PICK UP HASP TCB ADDRESS          R4
         L     WA,TCBJSCB-TCB(,WA)  POINT TO JSCB                    R4
         L     WA,JSCBSSIB-JSCB(,WA)  POINT TO SSIB                  R4
         SPACE 1                                                     R4
         USING SSIB,WA             PROVIDE SSIB ADDRESSABILITY       R4
         SPACE 1                                                     R4
         LA    WD,CVTBRET          POINT TO CVT BR 14
         L     WC,CVTJESCT         POINT TO JES CONTROL TABLE
         SPACE 1                                                     R4
         USING JESCT,WC            PROVIDE JESCT ADDRESSABILITY      R4
         SPACE 1                                                     R4
         CLC   JESPJESN,SSIBJBID   CHECK FOR OUR NAME
         BNE   *+8                 SKIP IF WE ARE NOT PRIMARY
         OI    ISVSTUS,$SVSTUSP    SET PRIMARY INDICATOR
         LA    WC,JESSSCT-(SSCTSCTA-SSCT) POINT TO SSCT HEAD
         SPACE 1                                                     R4
         USING SSCT,WC             PROVIDE SSCT ADDRESSABILITY       R4
         SPACE 1                                                     R4
ISSCTL   ICM   WC,15,SSCTSCTA      POINT TO NEXT SSCT
         BZ    INOSSCT             IF END, EXIT
         CLC   SSCTSNAM,SSIBJBID   IS THIS OUR CVT
         BNE   ISSCTL              LOOP
         EJECT                                                       R4
***********************************************************************
*                                                                     *
*        OBTAIN THE SSVT (NEW OR OLD)                                 *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
         USING SSVT,WA             PROVIDE SSVT ADDRESSABILITY       R4
         SPACE 1                                                     R4
         ICM   WA,15,SSCTSSVT      IS OUR SSVT ALREADY IN
         BNZ   INSTART             BR IF HASP IS OR HAS BEEN IN
         LA    WB,8+SSVTLEN        STORAGE FOR SSVT AND PREFIX       R4
         LR    R0,WB               SET FOR GETMAIN
         ICM   R0,8,=AL1(241)      SET SUBPOOL NUMBER
         GETMAIN R,LV=(0)          GET SSVT AREA
         ST    WB,4(,R1)           SAVE CURRENT SSVT LENGTH          R4
         LA    WA,8(,R1)           POINT BEYOND SSVT PREFIX          R4
         SH    WB,=H'8'            REDUCE LENGTH BY PREFIX LENGTH    R4
         SLR   R15,R15             SET COUNT AND PAD TO ZERO
         MVCL  WA,R14              ZERO SSVT (L IN WB)
         LA    WA,8(,R1)           GET ADDRESS OF ACTUAL SSVT
         MVC   $SVSTUS,ISVSTUS     COPY STATUS BYTE
         EJECT                                                       R4
***********************************************************************
*                                                                     *
*        OBTAIN FIXED GLOBAL STORAGE FOR STARTIO-RELEASE SRB/IOSB     *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
         GETMAIN R,LV=SRBSIZE+IOSEND-IOSB,SP=245  GET FIXED GLOBAL
         ST    R1,$SVRELSE          STORAGE FOR RELEASE SRB-IOSB
         MODESET EXTKEY=ZERO       SET ZERO KEY
         XC    0(SRBSIZE+IOSEND-IOSB,R1),0(R1)  ZERO
         LA    R15,SRBSIZE(,R1)    GET IOSB ADDRESS
         ST    R15,SRBPARM-SRB(,R1)  STORE IN SRB
         SPACE 1                                                     R4
         USING IOSB,R15            IOSB ADDRESSABILITY
         SPACE 1                                                     R4
         OI    IOSOPT,IOSBYP+IOSRELSE+IOSPSLL  SET IOS OPTION BITS
         MVI   IOSDVRID,IOSMISID   SET MISCELLANEOUS DRIVER ID
         MVI   IOSASID+1,1         SET ASID OF ONE
         ST    WD,IOSPGAD          POINT TERMINATION TO BR 14
         ST    WD,IOSNRM           POINT NORMAL EXIT TO BR 14
         ST    WD,IOSABN           POINT ABNORMAL EXIT TO BR 14
         MODESET EXTKEY=HASP       SET HASP KEY
         B     IHAVSSVT            SKIP OVER SSVT CLAIM
         SPACE 1                                                     R4
         DROP  R15                 KILL IOSB ADDRESSABILITY          R4
         EJECT                                                       R4
***********************************************************************
*                                                                     *
*        DETERMINE WHETHER OR NOT HASP CAN COME UP                    *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
INSTART  TM    $SVSTUS,$SVSTUST    CHECK FOR HASP TERMINATED
         BZ    INSTRTER            EXIT WITH ERROR
         ICM   R1,15,$SVHASP       TEST HASP CONDITION
         BZ    INSTRTER            BRANCH IF ACTIVE
         BP    *+12                BRANCH IF NOT RESTART
         TM    $OPTSTAT,$OPTFMT+$OPTCOLD  TEST OPTIONS
         BNZ   INSTRTER            COLD OR FORMAT ILLEGAL IF RESTART
         ICM   R1,15,$SVPOSTE      POINT TO MASTER HASP ECB          R4
         BZ    SKIP20              BR IF NONE YET                    R4
         TM    $SVPOSTW(R1),X'80'  MAY WE START...                   R4
         BZ    INSTRTER            BR IF NO                          R4
SKIP20   L     R1,SSVT+ICSWD       PICK UP WORD
         ST    R1,ISVSTUS          SET INTO WORK AREA
         NI    ISVSTUS+($SVSTUS-SSVT-ICSWD),255-$SVSTUST TURN OFF TERM
         OI    ISVSTUS+($SVSTUS-SSVT-ICSWD),$SVSTUSR SET RESTART FLAG
         L     R0,ISVSTUS          PICK UP RESULT
         CS    R1,R0,SSVT+ICSWD    ESTABLISH OWNERSHIP
         BNZ   INSTART             LOOP IF NOT OWNER
         SPACE 1                                                     R4
IHAVSSVT ST    WA,$SSVT            SET ADDRESS OF SSVT
         L     WG,$HASPMAP         POINT TO HASP MODULE MAP          R4
         ST    WA,MAPSSVTA-MAPDSECT(,WG)  SET ADDR FOR REPPING       R4
         ST    BASE1,$SVHCT        SET ADDRESS OF HASP CONTROL TABLE R4
         ST    WC,$SVSSCT          SET ADDRESS OF SSCT               R4
         MVC   $SVSSNM,SSCTSNAM    SET SUBSYSTEM NAME                R4
         L     R1,CVTPTR           GET CVT ADDRESS                   R4
         SH    R1,=H'4'            POINT TO OS/VS2 RELEASE INFO      R4
         MVC   $RELEASE(4),0(R1)   MOVE RELEASE INFO TO HCT          R4
         MVC   $SVRELNO(4),0(R1)   MOVE RELEASE INFO TO SSVT         R4
         EJECT                                                       R4
         ICM   R1,15,$SVPOSTE      TEST FOR MASTER POST ELEMENT      R4
         BNZ   ISETECBA            BR IF PRESENT                     R4
         SPACE 2                                                     R4
***********************************************************************
*                                                                     *
*        OBTAIN FIXED GLOBAL STORAGE FOR HASP WAIT ECB                *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
         CLC   $SVRELNO,=C'02'     TEST OS/VS2 RELEASE               R4
         BNE   NGLBLFIX            BR IF RELEASE 3 OR GREATER        R4
         GETMAIN R,LV=8,SP=241     GET ECB STORAGE FROM CSA          R4
         LA    R0,8                GET STORAGE LENGTH                R4
         LA    R2,NOPTECB           AND ECB ADDRESS                  R4
        $PGSRVC FIX,(R1),(R0),(R2) LONG-TERM FIX THE ECB             R4
         L     R2,$SSVT            RESTORE SSVT ADDRESS              R4
         B     ISETECBA            THEN BR TO CONTINUE               R4
*              THIS LINE DELETED BY APAR NUMBER                @OZ32235
*              THIS LINE DELETED BY APAR NUMBER                @OZ32235
*              THIS LINE DELETED BY APAR NUMBER                @OZ32235
*              THIS LINE DELETED BY APAR NUMBER                @OZ32235
*              THIS LINE DELETED BY APAR NUMBER                @OZ32235
*              THIS LINE DELETED BY APAR NUMBER                @OZ32235
*              THIS LINE DELETED BY APAR NUMBER                @OZ32235
*              THIS LINE DELETED BY APAR NUMBER                @OZ32235
NGLBLFIX GETMAIN R,LV=56,SP=228    GET FIXED GLOBAL STORAGE    @OZ32235
*              THE NEXT THREE LINES DEFINE THE GETMAINED AREA  @OZ32235
*              BYTES 00 THROUGH 03 HEX = $HASPECB              @OZ32235
*              BYTES 04 THROUGH 07 HEX = $SVPOSTW              @OZ32235
*              BYTES 08 THROUGH 37 HEX = BLANKS FOR 3525       @OZ32235
         SPACE 1                                                     R4
ISETECBA ST    R1,$HASPECB         SET ECB ADDRESS IN HCT,           R4
         ST    R1,$SVQLOKP          JOB SERVICES QUEUE ELEMENT,      R4
         ST    R1,$SVPOSTE           AND MASTER HASP POST ELEMENT    R4
         XC    0(4,R1),0(R1)       INITIALIZE MASTER POST ELEMENT    R4
         MVI   $SVPOSTW(R1),X'FF'  SET TO ALLOW JES2 RESTART         R4
         MVI   $SVBLANK(R1),X'40'  SET GOTTEN AREA + 8 TO      @OZ32235
         MVC   $SVBLANK+1(47,R1),$SVBLANK(R1)     BLANKS.      @OZ32235
*              THIS LINE DELETED BY APAR NUMBER                @OZ32235
*              THIS LINE DELETED BY APAR NUMBER                @OZ32235
*              THIS LINE DELETED BY APAR NUMBER                @OZ32235
*              THIS LINE DELETED BY APAR NUMBER                @OZ32235
*              THIS LINE DELETED BY APAR NUMBER                @OZ32235
         SPACE 1                                                     R4
         DROP  WA,WC               KILL SSVT, SSCT ADDRESSABILITY    R4
         SPACE 1                                                     R4
ICSWD    EQU   ($SVSTUS-SSVT)/4*4  OFFSET OF WORD CONTAINING $SVSTUS R4
         EJECT                                                       R4
***********************************************************************
*                                                                     *
*        LOCATE SUBSYSTEM SUPPORT MODULE -- HASPSSSM                  *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
         L     WA,=A(NPLSSSM)      POINT TO HASPSSSM PROGRAM NAME   R41
         LOAD  EPLOC=(WA),ERRET=NESTAE  LOCATE HASPSSSM             R41
         ST    R0,MAPSSSMA-MAPDSECT(,WG)  SET ADDR FOR REPPING       R4
         DELETE EPLOC=(WA)         DELETE HASPSSSM                  R41
         SPACE 1                                                     R4
         EJECT                                                       R4
***********************************************************************
*                                                                     *
*        ACTIVATE JES2 ESTAE ROUTINE                                  *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
NESTAE   L     WA,MAPABNDA-MAPDSECT(,WG)  GET HASP ESTAE EXIT ADDR  R41
         ESTAE (WA),RECORD=YES     SET JES2 TASK ABEND EXIT          R4
         B     ISVTDONE            BRANCH TO NEXT SECTION
         EJECT
INOSSCT  L     R1,=A(ISTRTEM1)     POINT TO ERROR MESSAGE            R4
         MVC   ISTRTSNM-ISTRTEM1(,R1),SSIBJBID-SSIB(WA)  SUBSYS NAME R4
        $EXIT  (R1)                THEN ISSUE ERROR MSG AND QUIT     R4
         SPACE 3
INSTRTER $EXIT ISTRTEM2            ISSUE ERROR MSG AND QUIT          R4
         SPACE 5                                                     R4
ISVSTUS  DC    A(*-*)              SYSTEM STATUS WORK AREA           R4
         SPACE 3                                                     R4
         LTORG                                                       R4
         SPACE 5                                                     R4
ISVTDONE NULL                                                        R4
         TITLE 'HASP INITIALIZATION -- TEMPORARY DCT ALLOCATION'     R4
***********************************************************************
*                                                                     *
*        OBTAIN TEMPORARY STORAGE FOR LOCAL U/R AND LINE DCTS         *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
         BALR  BASE2,0             RE-ESTABLISH                      R4
         USING *,BASE2              LOCAL ADDRESSABILITY             R4
         SPACE 1                                                     R4
         LA    WB,NDCTABLE         PICK UP DCT BUILD TABLE ADDR      R4
         SLR   R0,R0               ZERO GETMAIN TOTAL VALUE          R4
         SPACE 1                                                     R4
NDCTLOP1 LH    WF,NDCTNUMB(,WB)    PICK UP NO. OF DCTS TO BE GENED   R4
         LTR   WF,WF               TEST FOR TABLE END                R4
         BZ    NDCTGETM            YES, BRANCH - ISSUE GETMAIN       R4
         MH    WF,NDCTSIZE(,WB)    MULTIPLY NO. BY SIZE              R4
         ALR   R0,WF               ADD TO TOTAL STORAGE REQUIREMENT  R4
         LA    WB,NDCTBLEN(,WB)    NEXT TABLE ENTRY                  R4
         B     NDCTLOP1            LOOP, DO ALL DCT TYPES            R4
         SPACE 2                                                     R4
NDCTGETM ICM   R0,8,=AL1(229)      INDICATE HI-CORE STORAGE          R4
         LR    WB,R0               SAVE STORAGE REQUIREMENT          R4
         GETMAIN R,LV=(0)          GET STORAGE FOR TEMPORARY DCTS    R4
         LR    R0,WB               SAVE AREA LENGTH IN R0            R4
         ST    R1,NDCTSTOR         SAVE STORAGE ADDRESS              R4
         LR    WA,R1               COPY STORAGE ADDRESS FOR MVCL     R4
         SLR   WD,WD               CLEAR OPERAND 2 LENGTH            R4
         MVCL  WA,WC               USE MVCL TO CLEAR GOTTEN AREA     R4
         ST    R0,0(,R1)           SAVE AREA LENGTH IN AREA          R4
         LA    R1,4(,R1)           SKIP OVER LENGTH                  R4
         EJECT                                                       R4
***********************************************************************
*                                                                     *
*        INITIALIZE TEMPORARY LOCAL U/R AND LINE DCTS                 *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
         USING DCTDSECT,R1         DCTS ADDRESSABLE IN GOTTEN AREA   R4
         SPACE 1                                                     R4
         LA    WB,NDCTABLE         PICK UP DCT BUILD TABLE ADDR      R4
         LA    WC,$DCTPOOL-(DCTCHAIN-DCTDSECT) PRIME OLD DCT PTR     R4
         SPACE 1                                                     R4
NDCTLOP2 LH    R0,NDCTNUMB(,WB)    PICK UP NUMBER OF DCTS INITIALIZE R4
         LTR   R0,R0               TEST FOR TABLE END                R4
         BZ    INDCTDON            YES, BRANCH - NEXT PHASE OF INIT  R4
         SPACE 1                                                     R4
         LA    WA,1                START WITH DCT NUMBER 1           R4
         L     WE,NDCTOFST(,WB)    PICK UP HCT OFFSET                R4
         ST    R1,HCTDSECT(WE)         AND SAVE DCT ADDRESS IN HCT   R4
         SPACE 1                                                     R4
         L     WE,NDCTRTNE(,WB)    GET MODEL DCT INIT ROUTINE ADDR   R4
         SPACE 1                                                     R4
NDCTLOP3 ST    R1,DCTCHAIN-DCTDSECT(,WC) CHAIN ALL THE DCTS          R4
         BR    WE                  EXECUTE MODEL DCT INIT ROUTINE    R4
         SPACE 1                                                     R4
NDCTRTN1 NULL                      RETURN FROM UR DCT INIT ROUTINES  R4
         STC   WA,DCTDEVID+1       STORE DEVICE NUMBER IN DCT        R4
         SPACE 1                                                     R4
NDCTRTN2 NULL                      RETURN FROM LINE/LOGON DCT INIT   R4
         CVD   WA,INDBLWK          CONVERT DEVICE NUMBER TO DECIMAL  R4
         OI    INDBLWK+7,X'0F'        ADJUST SIGN                    R4
         UNPK  INDIGITS+1(3),INDBLWK      AND MAKE EBCDIC            R4
         SPACE 1                                                     R4
SKIP30   MVC   INDIGITS,INDIGITS+1 LEFT JUSTIFY                      R4
         CLI   INDIGITS,C'0'           REMOVING ALL                  R4
         BE    SKIP30                      LEADING ZEROS             R4
         SPACE 1                                                     R4
         LA    WF,L'DCTDEVN-1      GET FIELD LENGTH                  R4
         SR    WF,WD                   COMPUTE DIGIT POSITION        R4
         LA    WF,DCTDEVN(WF)              AND ADDRESS FOR MVC       R4
         EX    WD,NDCTMVC          MOVE IN DIGITS                    R4
         MVI   DCTSTAT,DCTUNAL     SHOW DEVICE NOT ALLOCATED         R4
         LR    WC,R1               SAVE OLD DCT ADDRESS FOR CHAINING R4
         AH    R1,NDCTSIZE(,WB)    ADVANCE TO NEXT DCT               R4
         LA    WA,1(,WA)           INCREMENT DEVICE NUMBER           R4
         BCT   R0,NDCTLOP3         LOOP FOR ALL THIS TYPE DCTS       R4
         SPACE 1                                                     R4
NDCTNXT  LA    WB,NDCTBLEN(,WB)    ADVANCE TO NEXT DCT TYPE          R4
         B     NDCTLOP2            LOOP FOR ALL DCTS IN TABLE        R4
         SPACE 1                                                     R4
NDCTMVC  MVC   0(*-*,WF),INDIGITS  *** EXECUTED ***                  R4
         EJECT                                                       R4
         SPACE 1                                                     R4
*        READER MODEL DCT INITIALIZATION                             R4
         SPACE 1                                                     R4
NIDCTRDR MVI   DCTDEVTP,DCTRDR     SET READER DEVICE TYPE            R4
         MVC   DCTDEVN(8),=C'READER'        AND NAME                 R4
         L     WD,CVTPTR           GET ADDRESS OF CVT                R4
         L     WD,CVTSMCA-CVT(,WD) GET ADDRESS OF SMCA               R4
         MVC   DCTINDC,SMCAOPT-SMCA(WD)  SET BACKGROUND SMF OPTIONS  R4
         MVI   DCTDEVID,DCTRDRID   SET READER DEVICE ID              R4
         LA    WD,2-1              SHOW POS. OF DEVICE NUMBER DIGITS R4
         MVI   DCTSIAFF,QUESYSAF   SET DEFAULT AFFINITY              R4
         MVI   DCTJCLAS,C'A'       READER DEFAULT CLASS = A          R4
         MVI   DCTMCLAS,C'A'                      MSGCLASS = A       R4
         MVI   DCTPRLIM,15         DEFAULT PRIO IS MAX (15)          R4
         B     NDCTRTN1            RETURN TO LOOP                    R4
         SPACE 3                                                     R4
*        PUNCH MODEL DCT INITIALIZATION                              R4
         SPACE 1                                                     R4
NIDCTPUN MVI   DCTDEVTP,DCTPUN       SET PUNCH DEVICE TYPE           R4
         MVC   DCTDEVN(8),=CL8'PUNCH'       AND NAME                 R4
         MVI   DCTDEVID,DCTPUNID   SET PUNCH DEVICE ID               R4
         MVC   DCTCLASS(3),=C'BK '       SET DEFAULT                 R4
         MVC   DCTCLASS+3(33),DCTCLASS+2  SYSOUT CLASSES             R4
         LA    WD,3-1              SHOW POS. OF DEVICE NUMBER DIGITS R4
         B     NIDCTPP             COMPLETE COMMON PRINT/PUNCH       R4C
                                          INITIALIZTION              R4
         EJECT                                                       R4
*        PRINTER MODEL DCT INITALIZTION                              R4
         SPACE 1                                                     R4
NIDCTPRT MVI   DCTDEVTP,DCTPRT     SET LOCAL PRINT DEVICE TYPE       R4
         MVC   DCTDEVN(8),=CL8'PRINTR'      AND NAME                 R4
         MVI   DCTDEVID,DCTPRTID   SET PRINTER DEVICE ID             R4
         MVC   DCTCLASS(3),=C'AJ '       SET DEFAULT                 R4
         MVC   DCTCLASS+3(33),DCTCLASS+2  SYSOUT CLASSES             R4
         LA    WD,2-1              SHOW POS. OF DEVICE NUMBER DIGITS R4
         SPACE 3                                                     R4
*        PRINT/PUNCH MODEL DCT COMMON INITIALIZATION                 R4
         SPACE 1                                                     R4
NIDCTPP  MVI   DCTCHAR1,C'*'       SET DEFAULT CHARACTER SETS ,      R4
         MVC   DCTCHAR1+1(DCTMODF+L'DCTMODF-DCTCHAR1-1),DCTCHAR1     R4C
                                   FORMS OVERLAY & COPY MODFICATION  R4C
                                                  NAME               R4
         MVI   DCTPPSW,DCTPPSWO+DCTPPSWC+DCTPPSWT ALLOW $T U         R4
         B     NDCTRTN1            RETURN TO LOOP                    R4
         EJECT                                                       R4
*        LINE MODEL DCT INITIALIZTION                                R4
         SPACE 1                                                     R4
NIDCTLNE MVI   DCTDEVTP,DCTLNE     SET LINE DEVICE TYPE              R4
         MVC   DCTDEVN(8),=CL8'LINE'        AND NAME                 R4
         LA    WD,4-1              SHOW POS. OF DEVICE NUMBER DIGITS R4
         SPACE 3                                                     R4
*        LINE/LOGON MODEL DCT COMMON INITIALIZATION                  R4
         SPACE 1                                                     R4
NIDCTPWD MVI   MDCTPSWD,C' '       CLEAR PASSWORD                    R4
         MVC   MDCTPSWD+1(L'MDCTPSWD-1),MDCTPSWD TO BLANKS           R4
         B     NDCTRTN2            RETURN TO LOOP                    R4
         SPACE 3                                                     R4
*        LOGON MODEL DCT INITIALIZATION                              R4
         SPACE 1                                                     R4
NIDCTLOG MVI   DCTDEVTP,DCTLOG     SET LOGON DEVICE TYPE             R4
         MVC   DCTDEVN(8),=CL8'LOGON'       AND NAME                 R4
         LA    WD,3-1              SHOW POS. OF DEVICE NUMBER DIGITS R4
         MVI   MDCTPWDL,8          ALWAYS USE PASSWORD LENGTH 8      R4
         MVI   MDCTAPNL,8             AND APPLICATION NAME LENGTH 8  R4
         MVC   MDCTAPPL(8),=CL8'JES2' DEFAULT APPLICATION NAME       R4
         MVI   MDCTTYPE,DCTPSNA    SHOW SNA TYPE DCT                 R4
         B     NIDCTPWD            COMPLETE COMMON LINE DCT INIT     R4
         EJECT                                                       R4
*        TEMPORARY DCT BUILD TABLE DEFINITIONS                       R4
         SPACE 1                                                     R4
NDCTNUMB EQU   0                   MAXIMUM NO. OF TEMPRARY DCTS      R4
NDCTSIZE EQU   2                   SIZE OF TEMPORARY DCT             R4
NDCTRTNE EQU   4                   POINTER TO MODEL DCT INIT ROUTINE R4
NDCTOFST EQU   8                   OFFSET TO HCT FIELD FOR THIS TYPE R4
NDCTBLEN EQU   12                  SIZE OF TABLE ENTRY               R4
         SPACE 3                                                     R4
NDCTABLE DS    0F                  TEMPORARY DCT BUILD TABLE         R4
         SPACE 1                                                     R4
         DC    AL2(1),AL2(4),A(NDCTNXT),A($DCTPOOL-HCTDSECT)         R4C
                                   ENTRY FOR ENTIRE DCT POOL         R4
         SPACE 1                                                     R4
         DC    AL2($MAXRDRS)       LOCAL READER ENTRY                R4
         DC    AL2(DCTRDEND-DCTDSECT)                                R4
         DC    A(NIDCTRDR)                                           R4
         DC    A($RDRDCT-HCTDSECT)                                   R4
         SPACE 1                                                     R4
         DC    AL2($MAXPRTS)       LOCAL PRINTER ENTRY               R4
         DC    AL2(((DCTPPEND-DCTDSECT+(36+1)+3)/4)*4)               R4
         DC    A(NIDCTPRT)                                           R4
         DC    A($PRTDCT-HCTDSECT)                                   R4
         SPACE 1                                                     R4
         DC    AL2($MAXPUNS)       LOCAL PUNCH ENTRY                 R4
         DC    AL2(((DCTPPEND-DCTDSECT+(36+1)+3)/4)*4)               R4
         DC    A(NIDCTPUN)                                           R4
         DC    A($PUNDCT-HCTDSECT)                                   R4
         SPACE 1                                                     R4
         DC    AL2($MAXLNES)       TP LINE ENTRY                     R4
         DC    AL2(MDCTLEND-DCTDSECT)                                R4
         DC    A(NIDCTLNE)                                           R4
         DC    A($LNEDCT-HCTDSECT)                                   R4
         SPACE 1                                                     R4
         DC    AL2($MAXLOGS)       LOGON DCT ENTRY                   R4
         DC    AL2(MDCTLGND-DCTDSECT)                                R4
         DC    A(NIDCTLOG)                                           R4
         DC    A($LOGNDCT-HCTDSECT)                                  R4
         SPACE 1                                                     R4
         DC    H'0'                TABLE END                         R4
         DROP  R1                  DROP R1 / DCT ADDRESSABILITY      R4
         SPACE 2                                                     R4
INDBLWK  EQU   INITDBL             DOUBLE WORD WORK AREA             R4
INDIGITS DC    CL4' ',C' '         DEVICE NUMBER WORK AREA           R4
         SPACE 1                                                     R4
INDCTDON NULL                                                        R4
         EJECT                                                       R4
***********************************************************************
*                                                                     *
*              INITIALIZE INTERNAL READER MODEL DCT                   *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
         L     R4,=A(NINRDCT)      GET ADDR OF MODEL INTRDR DCT      R4
         USING DCTDSECT,R4         SHOW MODEL DCT ADDRESSABILITY     R4
         SPACE 1                                                     R4
         MVI   DCTSTAT,DCTUNAL+DCTHOLD SHOW DCT AVAILABLE BUT HELD   R4
         MVI   DCTDEVTP,DCTINR     SET DCT INTERNAL READER TYPE      R4
         MVC   DCTDEVN,=CL8'INTRDR'    AND DEVICE NAME               R4
         MVI   DCTDEVID,DCTINRID   SET DCT DEVICE ID                 R4
         MVC   RIDJOBID,=C'JOB00000' SET INTERNAL READER JOB ID      R4
         MVI   DCTSIAFF,QUESYSAF   SET DEFAULT AFFINITY              R4
         MVI   DCTJCLAS,C'A'       INTRDR DEFAULT CLASS = A          R4
         MVI   DCTMCLAS,C'A'                      MSGCLASS = A       R4
         MVI   DCTPRLIM,15         DEFAULT PRIO IS MAX (15)          R4
         L     R7,$SSVT            GET ADDRESS OF SSVT               R4
         ST    R7,RIDSSVT          STORE IN DCT                      R4
         LA    R5,$SVBR14-SSVT(,R7)   INITIALIZE ADDRESS             R4
         ST    R5,RIDERRET             OF ERROR ROUTINE IN DCT       R4
         L     R5,CVTPTR           GET ADDRESS OF CVT                R4
         L     R5,CVTSMCA-CVT(,R5) GET ADDRESS OF SMCA               R4
         MVC   DCTINDC,SMCAOPT-SMCA(R5)  SET BACKGROUND SMF OPTIONS  R4
         SPACE 2                                                     R4
         DROP  R4                  RELEASE MODEL DCT ADDRESSABILITY  R4
         TITLE 'HASP INITIALIZATION -- OBTAIN STORAGE FOR TEMPORARY CONC
               TROL BLOCKS'                                          R4
***********************************************************************
*                                                                     *
*        OBTAIN STORAGE FOR TEMPORARY PIT, RAT, RWT AND CPT           *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
         L     R1,=A(NMAXPART)     COMPUTE                           R4
         L     WC,0(,R1)            SIZE OF                         R41
         LA    WB,PITLEN             TEMPORARY                       R4
         MR    WA,WC                  PIT                            R4
         AL    WB,=A(4+$MAXRJE*(RATTLE+RWTLEN))  ADD RAT, RWT SIZE   R4
         AL    WB,=A(100*(CPTEND-CPTDSECT)) ADD CPT SIZE            R41
         ICM   WB,8,=AL1(229)      INDICATE HI-CORE STORAGE          R4
         LR    R0,WB               GET TEMPORARY                     R4
         GETMAIN R,LV=(0)           STORAGE                          R4
         ST    R1,NTMPSTOR         SAVE STORAGE ADDRESS              R4
         ST    WB,0(,R1)           SAVE STORAGE AMOUNT               R4
         LA    WB,0(,WB)           CLEAR SUBPOOL NUMBER              R4
         LA    R1,4(,R1)           POINT TO USABLE STORAGE           R4
         SH    WB,=H'4'            ADJUST USABLE STORAGE LENGTH      R4
         LR    WA,R1               CLEAR                             R4
         SLR   R15,R15              USABLE                           R4
         MVCL  WA,R14                STORAGE                         R4
         TITLE 'HASP INITIALIZATION -- CREATE TEMPORARY PIT'         R4
***********************************************************************
*                                                                     *
*        CREATE TEMPORARY PIT                                         *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
         ST    R1,$PITABLE         SET POINTER TO TEMPORARY PIT      R4
         LA    WA,NPITCLAS+35      STARTING DEFAULT CLASS LIST ADDR  R4
         SLR   WB,WB               STARTING PIT NUMBER               R4
         SPACE 1                                                     R4
         USING PITDSECT,WD         PROVIDE PIT ADDRESSABILITY        R4
         SPACE 1                                                     R4
NPITNEXT LR    WD,R1               POINT TO NEXT PIT                 R4
         LA    R1,PITLEN(,R1)      UPDATE PIT CHAIN ADDRESS          R4
         ST    R1,PITNEXT          SET CHAIN ADDRESS IN PIT          R4
         LA    WB,1(,WB)           BUMP PIT NUMBER                   R4
         CVD   WB,INITDBL          CREATE                            R4
         OI    INITDBL+7,X'0F'      INITIATOR                        R4
         UNPK  PITPATID,INITDBL      ID                              R4
         CLI   PITPATID,C'0'          FOR                            R4
         BNE   SKIP40                  NEW                           R4
         MVI   PITPATID,C' '            PIT                          R4
SKIP40   MVC   PITCLASS(37),0(WA)  PROVIDE DEFAULT JOB CLASS LIST    R4
         CL    WA,=A(NPITCLAS)     TEST FOR CLASS LIST ORIGIN        R4
         BE    SKIP50              BR IF REACHED                     R4
         BCTR  WA,0                 ELSE UPDATE CLASS LIST POINTER   R4
SKIP50   BCT   WC,NPITNEXT         LOOP THRU ALL PITS                R4
         SPACE 1                                                     R4
         ST    WC,PITNEXT          ZERO LAST PIT CHAIN ADDRESS       R4
         B     NTEMPRAT             AND BR TO NEXT SECTION           R4
         SPACE 1                                                     R4
         DROP  WD                  KILL PIT ADDRESSABILITY           R4
         SPACE 1                                                     R4
PITLEN   EQU   (PITCLASS+36+1+3-PITDSECT)/4*4  MAXIMUM PIT LENGTH    R4
NPITCLAS DC    CL72'9876543210ZYXWVUTSRQPONMLKJIHGFEDCBA'  JOB CLASS R4
         TITLE 'HASP INITIALIZATION -- RAT / RWT ALLOCATION'         R4
***********************************************************************
*                                                                     *
*        CREATE TEMPORARY RAT                                         *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
NTEMPRAT ST    R1,$RAT             SAVE RAT ADDRESS                  R4
         LA    WA,$MAXRJE          RAT ELEMENTS                      R4
         SLR   WB,WB               RAT COUNT                         R4
         SPACE 1                                                     R4
         USING RATDSECT,R1         PROVIDE RAT ADDRESSABILITY        R4
         SPACE 1                                                     R4
INITRAT  LA    WB,1(,WB)           BUMP REMOTE NUMBER                R4
         MVC   RATNAME,=CL8'RMT'    MOVE                             R4
         MVI   RATTYPE,0              DEFAULT                        R4
         MVI   RATFMT,DCTPBLK+DCTPVAR  VALUES                        R4
         MVI   RATNUMRD,1               TO                           R4
         MVI   RATNUMPR,1                TEMPORARY                   R4
         MVI   RATCONF,RATCONFT           RAT                        R4
         MVC   RATPSWD,=CL8' '             ENTRY                     R4
         CVD   WB,INITDBL           AND PREPARE TO                   R4
         OI    INITDBL+7,X'0F'       JUSTIFY DIGITS IN               R4
         UNPK  RATNAME+4(3),INITDBL   REMOTE NAME                    R4
         SPACE 1                                                     R4
SKIP60   MVC   RATNAME+3(4),RATNAME+4  LEFT JUSTIFY                  R4
         CLI   RATNAME+3,C'0'           DIGITS IN                    R4
         BE    SKIP60                    REMOTE NAME                 R4
         SPACE 1                                                     R4
         STH   WB,RATROUTE         SET REMOTE ROUTE CODE             R4
         STH   WB,RATCONRT         SET REMOTE CONSOLE ROUTE CODE     R4
         MVI   RATSYMB,C' '        CLEAR REMOTE LUNAME               R4
         MVC   RATSYMB+1(L'RATSYMB),RATSYMB TO BLANKS                R4
         LA    WC,256              SET DEFAULT                       R4
         STH   WC,RATBUFSZ          BUFSIZE VALUE                    R4
         LA    R1,RATEND           POINT TO NEXT RAT                 R4
         BCT   WA,INITRAT          LOOP THRU ENTIRE RAT              R4
         SPACE 1                                                     R4
         DROP  R1                  KILL RAT ADDRESSABILITY           R4
         EJECT                                                       R4
***********************************************************************
*                                                                     *
*        CREATE TEMPORARY CPT                                         *
*                                                                     *
***********************************************************************
         SPACE 1                                                    R41
NTEMPCPT ST    R1,$CPTPOOL         SAVE CPTPOOL ADDRESS             R41
         LA    WA,100              NUMBER OF CPT ELEMENTS           R41
         LA    WB,0                FIRST CPT NUMBER                 R41
         SPACE 1                                                    R41
         USING CPTDSECT,R1                                          R41
         SPACE 1                                                    R41
INITCPT  STC   WB,CPTNUM           INIT CPT NUMBER                  R41
         LA    R1,CPTEND           POINT TO NEXT CPT                R41
         LA    WB,1(,WB)           INCREMENT CPT NUMBER             R41
         BCT   WA,INITCPT          LOOP THROUGH CPT                 R41
         SPACE 1                                                    R41
         DROP  R1                                                   R41
         EJECT                                                      R41
***********************************************************************
*                                                                     *
*        CREATE REMOTE WORK TABLE                                     *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
         ST    R1,$RWT             SAVE RWT ADDRESS                  R4
         LA    WA,$MAXRJE          RWT ELEMENTS                      R4
         SPACE 1                                                     R4
         USING RWTDSECT,R1         PROVIDE RWT ADDRESSABILITY        R4
         USING RWLDSECT,WD         SHOW RWL ADDRESSABILITY     @OZ29180
         SPACE 1                                                     R4
INITRWT  LA    WB,7                RWT READER ELEMENTS               R4
         SLR   WC,WC               RWT READER ELEMENT COUNT          R4
         L     WD,=A($RWL)         GET RWL ADDRESS             @OZ29180
         SPACE 1                                                     R4
INRWTRD  STC   WC,RWTINDEX         SET DEVICE INDEX                  R4
         MVC   RWTSTAT(INRWTD1L),INRWTD1 SET REMAINING FIELDS        R4
         MVC   RWTSEL,RWLSEL       SET STANDARD SELECT BYTE    @OZ29180
         LA    R1,RWTRDEND         POINT TO NEXT READER ELEMENT      R4
         LA    WC,RWLEND-RWLDSECT(,WC) BUMP INDEX VALUE              R4
         LA    WD,RWLEND           POINT TO NEXT RWL ENTRY     @OZ29180
         BCT   WB,INRWTRD          LOOP THRU ALL RDR ELEMENTS        R4
         SPACE 1                                                     R4
         MVC   INRWTCL,=C'AJ'      SET                               R4
         MVI   INRWTLN,120          RWT                              R4
         LA    WC,(RWLEND-RWLDSECT)*7 PRINT                          R4
         BAL   WE,INRWTPP             ELEMENTS                       R4
         MVC   INRWTCL,=C'BK'      SET                               R4
         MVI   INRWTLN,80           RWT                              R4
         LA    WC,((7+7)*(RWLEND-RWLDSECT)) PUNCH                    R4
         BAL   WE,INRWTPP             ELEMENTS                       R4
         LA    R1,3(,R1)           ROUND UP TO NEXT                  R4
         N     R1,=F'-4'            FULLWORD BOUNDARY                R4
         BCT   WA,INITRWT          LOOP THRU ENTIRE RWT              R4
         SPACE 1                                                     R4
         B     INRWTEND            THEN BR TO NEXT SECTION           R4
         SPACE 1                                                     R4
INRWTPP  LA    WB,7                SET ELEMENT COUNT                 R4
         SPACE 1                                                     R4
INRWTPP1 STC   WC,RWTINDEX         SET DEVICE INDEX                  R4
         MVC   RWTSTAT(INRWTD2L),INRWTD2 SET REMAINING FIELDS        R4
         MVC   RWTSEL,RWLSEL       SET STANDARD SELECT BYTE    @OZ29180
         LA    R1,RWTPPEND         POINT TO NEXT ELEMENT             R4
         LA    WC,RWLEND-RWLDSECT(,WC) BUMP INDEX VALUE              R4
         LA    WD,RWLEND           POINT TO NEXT RWL ENTRY     @OZ29180
         BCT   WB,INRWTPP1         LOOP THRU ALL ELEMENTS            R4
         SPACE 1                                                     R4
         BR    WE                  THEN RETURN                       R4
         SPACE 1                                                     R4
         DROP  R1,WD               KILL RWT AND RWL BASE       @OZ29180
         EJECT                                                       R4
         SPACE 5                                                     R4
INRWTD1  DC    AL1(DCTHOLD),X'8000'  STATUS/ROUTE CODE         @OZ29180
         DC    AL1(80)               CARD RECORD LENGTH        @OZ29180
         DC    AL1(0),X'FF',X'FF'    SELECT/FEATURES           @OZ29180
         DC    AL1(0)                RESERVED                  @OZ29180
         DC    4X'8000'                                              R4
         DC    C'AA',AL1(0,15,0)                                     R4
INRWTD1L EQU   *-INRWTD1                                             R4
         SPACE 2                                                     R4
INRWTD2  DC    AL1(DCTHOLD),X'8000'  STATUS/ROUTE CODE         @OZ29180
INRWTLN  DC    AL1(*-*)              RECORD LENGTH             @OZ29180
         DC    AL1(0),X'FF',X'FF'    SELECT/FEATURES           @OZ29180
         DC    3XL4'00'                                              R4
         DC    AL1(DCTSUSPD,DCTPPSWF+DCTPPSWO)                       R4
INRWTCL  DC    CL2' ',CL34' '                                        R4
*                                  THIS CARD DELETED BY APAR   @OZ29180
         DC    X'00'                                                 R4
         DC    AL1(00,255)                                           R4
INRWTD2L EQU   *-INRWTD2                                             R4
         SPACE 5                                                     R4
INRWTEND NULL                                                        R4
         TITLE 'HASP INITIALIZATION -- NDQ ALLOCATION'               R4
***********************************************************************
*                                                                     *
*        CREATE FIRST DESTINATION QUEUE ELEMENT                       *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
         USING NDQDSECT,R1                                           R4
         SPACE 1                                                     R4
INITNDQ  LA    R0,NDQSIZ           GET STORAGE                       R4
         ICM   R0,8,=AL1(229)       FOR DESTINATION                  R4
         GETMAIN R,LV=(0)            QUEUE ELEMENT                   R4
         XC    NDQ,NDQ             ZERO ELEMENT                      R4
         MVC   NDQNAME,=CL8'LOCAL' SET NAME                          R4
         ST    R1,$NDQ             SET POINTER                       R4
         B     NPLINIT             BR TO NEXT SECTION                R4
         SPACE 1                                                     R4
         DROP  R1                                                    R4
         EJECT                                                       R4
         SPACE 5                                                     R4
         LTORG                                                       R4
         TITLE 'HASP INITIALIZATION -- PARAMETER LIBRARY PROCESSING INIC
               TIALIZATION'                                         R41
***********************************************************************
*                                                                     *
*        PARAMETER LIBRARY PROCESSING INITIALIZATION                  *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
NPLINIT  BALR  BASE2,0             RE-ESTABLISH                      R4
         USING *,BASE2,BASE3,BASE4  LOCAL ADDRESSABILITY            R41
         SPACE 1                                                     R4
         LA    BASE3,2048(,BASE2)  SET UP SECOND                     R4
         LA    BASE3,2048(,BASE3)   BASE REGISTER                    R4
         LA    BASE4,2048(,BASE3)    AND THIRD                      R41
         LA    BASE4,2048(,BASE4)     BASE REGISTER                 R41
         OPEN  (HASPPARM,,HASPLIST,(OUTPUT))  OPEN PARMLIB DATA SETS R4
         L     R1,=A(HASPPARM)     POINT TO HASPPARM DCB            R41
         TM    DCBOFLGS-DCBDSECT(R1),DCBOFOPN  TEST HASPPARM        R41
         BO    NPLOPEN1            BRANCH IF OPEN                    R4
         L     R1,=A(NMSG450)      POINT TO WARNING MESSAGE          R4
         BAL   WE,NPLWTOR          ISSUE MSG, QUERY OPERATOR         R4
         OI    NPLFLAGS,NPLCONSL+NPLEOFSW  SHOW CONSOLE MODE/EOF    R41
         B     NPLNEXT             BR TO CONTINUE                   R41
         SPACE 3                                                     R4
NPLOPEN1 L     R1,=A(HASPLIST)     POINT TO HASPLIST DCB            R41
         TM    DCBOFLGS-DCBDSECT(R1),DCBOFOPN  TEST HASPLIST        R41
         BO    NPLNEXT             BR IF OPEN SUCCESSFUL            R41
         NI    $OPTSTAT,255-$OPTLIST  ELSE FORCE NOLIST OPTION       R4
         TITLE 'HASP INITIALIZATION -- PARAMETER STATEMENT PROCESSING RC
               OUTINE SELECTION'                                    R41
         USING PTEDSECT,WB         PROVIDE PTE ADDRESSABILITY       R41
         SPACE 1                                                    R41
NPLNEXT  NULL                      PROCESS NEXT STATEMENT
         BAL   LINK,NPLGET         GET PARAMETER STATEMENT          R41
         B     NPLEND              BR IF 'END'/END-OF-FILE          R41
         SPACE 2
         LA    R14,1               SET INCREMENT AND LIMIT          R41
         LA    R15,NCARD+70         FOR STATEMENT PROCESSING        R41
         SPACE 2
NPLNEXT1 L     WC,=A(NPLTRT2)      POINT TO PARAMETER XLATE TABLE   R41
         MVI   C'.'(WC),0          ALLOW PERIOD AS LEGAL CHARACTER  R41
         MVI   C'-'(WC),1           AND DISALLOW HYPHEN             R41
         MVI   C'/'(WC),1            AND SLASH                      R41
         L     WB,=A(NPLPTBL)      POINT TO PARAMETER TABLE         R41
         LA    R0,NPLPTENT         GET NUMBER OF TABLE ENTRIES      R41
         SPACE 1
NPLNEXT2 IC    R1,PTEKEYLN         GET LENGTH OF KEYWORD            R41
         BCTR  R1,0                REDUCE FOR EXECUTE               R41
         EX    R1,NPLCLCLC         EXECUTE COMPARE
         BE    NPLNEXT3            BR IF NAME MATCHES STATEMENT     R41
         LA    WB,PTELENG(,WB)     GET NEXT TABLE ENTRY             R41
         BCT   R0,NPLNEXT2         TEST NEXT ENTRY                  R41
         B     NPLSSERR            ERROR IF NOT FOUND IN TABLE
         SPACE 3                                                     R4
NPLNEXT3 ICM   R1,7,PTEPRTN        GET PROCESSING ROUTINE ADDRESS   R41
         BNZR  R1                  BR IF PRESENT                    R41
I01     $ERROR                      ELSE CRUMP                      R41
         SPACE 3                                                    R41
NPLEND   TM    NPLFLAGS,NPLCONSL   ARE WE IN CONSOLE MODE...        R41
         BZ    NPLCLOSE            BR IF NO                         R41
         NI    NPLFLAGS,255-NPLCONSL  RESET CONSOLE INDICATOR       R41
         B     NPLCOMNT            BR TO LIST/LOG STATEMENT         R41
         SPACE 3                                                    R41
NPLCLCLC CLC   0(*-*,WA),PTEKEY    *** EXECUTE ONLY ***             R41
         TITLE 'HASP INITIALIZATION -- INITIALIZATION VARIABLE STATEMENC
               T PROCESSING ROUTINES'                               R41
***********************************************************************
*                                                                     *
*        NPLNUM -- ROUTINE TO PROCESS STATEMENTS SPECIFYING SPECIFIC  *
*                  NUMERIC VALUE                                      *
*                                                                     *
***********************************************************************
         SPACE 1                                                    R41
NPLNUM   BAL   WC,NPLNUMBR         EXTRACT AND CHECK NUMBER         R41
         SPACE 1                                                    R41
NPLSTORE LH    WD,PTEDISPL         GET FIELD DISPLACEMENT           R41
         ALR   WD,BASE1            ADD HCT ORIGIN                   R41
         SPACE 1                                                    R41
NPLSTORX STC   R1,0(,WD)           ASSUME 1-BYTE FIELD              R41
         CLI   PTEFLDLN,1          TEST ASSUMPTION                  R41
         BE    NPLCOMNT            BR IF VALID TO LIST/LOG STMNT    R41
         STH   R1,0(,WD)           ASSUME 2-BYTE FIELD              R41
         CLI   PTEFLDLN,2          TEST ASSUMPTION                  R41
         BE    NPLCOMNT            BR IF VALID TO LIST/LOG STMNT    R41
         STCM  R1,7,0(WD)          ASSUME 3-BYTE FIELD              R41
         CLI   PTEFLDLN,3          TEST ASSUMPTION                  R41
         BE    NPLCOMNT            BR IF VALID TO LIST/LOG STMNT    R41
         ST    R1,0(,WD)           ASSUME 4-BYTE FIELD              R41
         CLI   PTEFLDLN,4          TEST ASSUMPTION                  R41
         BE    NPLCOMNT            BR IF VALID TO LIST/LOG STMNT    R41
I02     $ERROR                      ELSE CRUMP                      R41
         EJECT                                                      R41
***********************************************************************
*                                                                     *
*        NPLX2 -- ROUTINE TO PROCESS STATEMENTS SPECIFYING SPECIFIC   *
*                 NUMERIC VALUE WHICH MUST BE ROUNDED TO MULTIPLE     *
*                 OF TWO                                              *
*                                                                     *
***********************************************************************
         SPACE 1                                                    R41
NPLX2    BAL   WC,NPLNUMBR         EXTRACT AND CHECK NUMBER         R41
         LA    R1,1(,R1)           ENSURE MULTIPLE                  R41
         N     R1,=F'-2'            OF 2 BYTES                      R41
         B     NPLSTORE            BR TO STORE VALUE                R41
         SPACE 3                                                    R41
***********************************************************************
*                                                                     *
*        NPLX8 -- ROUTINE TO PROCESS STATEMENTS SPECIFYING SPECIFIC   *
*                 NUMERIC VALUE WHICH MUST BE ROUNDED TO MULTIPLE     *
*                 OF EIGHT                                            *
*                                                                     *
***********************************************************************
         SPACE 1                                                    R41
NPLX8    BAL   WC,NPLNUMBR         EXTRACT AND CHECK NUMBER         R41
         LA    R1,7(,R1)           ENSURE MULTIPLE                  R41
         N     R1,=F'-8'            OF 8 BYTES                      R41
         B     NPLSTORE            BR TO STORE VALUE                R41
         SPACE 3                                                    R41
***********************************************************************
*                                                                     *
*        NPLINVRT -- ROUTINE TO PROCESS STATEMENTS SPECIFYING         *
*                    SPECIFIC NUMERIC VALUE WHOSE RECIPROCAL IS TO    *
*                    BE STORED                                        *
*                                                                     *
***********************************************************************
         SPACE 1                                                    R41
NPLINVRT BAL   WC,NPLNUMBR         EXTRACT AND CHECK NUMBER         R41
         LNR   R1,R1               MAKE NEGATIVE                    R41
         B     NPLSTORE            BR TO STORE VALUE                R41
         EJECT                                                      R41
***********************************************************************
*                                                                     *
*        NPLSWICH -- ROUTINE TO PROCESS STATEMENTS SPECIFYING A       *
*                    BINARY VALUE (YES/NO)                            *
*                                                                     *
***********************************************************************
         SPACE 1                                                    R41
NPLSWICH BAL   R1,NPLSETWA         ADJUST WA FOR COMMON CODE        R41
         CLI   8(WA),C'='          TEST NEXT CHARACTER              R41
         BNE   NPLSSERR            INVALID IF NOT EQUAL SIGN        R41
         LA    WA,8(,WA)           STEP OVER KEYWORD                R41
         LA    WE,1(,WA)           SAVE FIELD ORIGIN ADDRESS        R41
         SPACE 1                                                    R41
NPLSWTST BXH   WA,R14,NPLSSERR     LOCATE                           R41
         CLI   0(WA),C' '           END OF                          R41
         BNE   NPLSWTST              FIELD                          R41
         SPACE 1                                                    R41
         LH    WD,PTEDISPL         GET FIELD DISPLACEMENT           R41
         ALR   WD,BASE1            ADD HCT ORIGIN                   R41
         CLC   =C'Y ',0(WE)        IF OPTION                        R41
         BE    NPLYES               BIT TO                          R41
         CLC   =C'YES ',0(WE)        BE SET,                        R41
         BE    NPLYES                 BR TO SET IT                  R41
         CLC   =C'N ',0(WE)        IF OPTION BIT                    R41
         BE    NPLNO                NOT TO BE                       R41
         CLC   =C'NO ',0(WE)         RESET,                         R41
         BNE   NPLSSERR               BR TO ISSUE DIAGNOSTIC        R41
         SPACE 1                                                    R41
NPLNO    IC    R1,PTESWNO          GET RESET INFO                   R41
         EX    R1,NPLRESET         RESET SWITCH                     R41
         B     NPLCOMNT            BR TO LIST/LOG STATEMENT         R41
         SPACE 1                                                    R41
NPLYES   IC    R1,PTESWYES         GET SET INFO                     R41
         EX    R1,NPLSET           SET SWITCH                       R41
         B     NPLCOMNT            BR TO LIST/LOG STATEMENT         R41
         SPACE 1                                                    R41
NPLSET   OI    0(WD),*-*           *** EXECUTE ONLY ***             R41
NPLRESET NI    0(WD),*-*           *** EXECUTE ONLY ***             R41
         EJECT                                                      R41
***********************************************************************
*                                                                     *
*        NPLCHAR -- ROUTINE TO PROCESS STATEMENTS SPECIFYING SPECIFIC *
*                   CHARACTER STRING                                  *
*                                                                     *
***********************************************************************
         SPACE 1                                                    R41
NPLCHAR  BAL   WC,NPLID            EXTRACT AND CHECK CHAR STRING    R41
         SPACE 1                                                    R41
NPLSTORC LH    WD,PTEDISPL         GET FIELD DISPLACEMENT           R41
         ALR   WD,BASE1            ADD HCT ORIGIN                   R41
         SPACE 1                                                    R41
NPLSTORO SLR   WC,WC               CLEAR FOR INSERT                 R41
         IC    WC,PTEFLDLN         GET FIELD LENGTH                 R41
         BCTR  WC,0                REDUCE FOR EXECUTE               R41
         EX    WC,NPLMOVEC         MOVE CHARACTER STRING TO FIELD   R41
         B     NPLCOMNT            BR TO LIST/LOG STATEMENT         R41
         SPACE 1                                                    R41
NPLMOVEC MVC   0(*-*,WD),NPLWORK   *** EXECUTE ONLY ***             R41
         SPACE 3                                                    R41
***********************************************************************
*                                                                     *
*        NPLJCL -- ROUTINE TO PROCESS STATEMENTS SPECIFYING SPECIFIC  *
*                  CHARACTER STRING, LIMITING VALID CHARACTERS TO     *
*                  THOSE ALLOWED IN JCL NAMES/KEYWORDS                *
*                                                                     *
***********************************************************************
         SPACE 1                                                    R41
NPLJCL   MVI   C'.'(WC),1          DISALLOW PERIOD AS LEGAL CHAR    R41
         BAL   WC,NPLID            EXTRACT CHARACTER STRING         R41
         CLI   NPLWORK,C'0'        TEST 1ST CHARACTER               R41
         BNL   NPLCHERR            BR IF NUMBER TO ISSUE DIAGNOSTIC R41
         B     NPLSTORC             ELSE BR TO STORE VALUE          R41
         EJECT                                                      R41
NPLBACK  NULL                      PARAMETER LIBRARY &BSPACE  STATEMENT
         LA    WA,7(,WA)           POINT TO 1ST HEX CHARACTER - 1   R41
         BAL   WE,NREPHEX          ENSURE 1ST HEX DIGIT VALID       R41
         MVO   NREPDATA(1),NREPCHAR  SAVE ZONE NIBBLE               R41
         BAL   WE,NREPHEX          ENSURE 2ND HEX DIGIT VALID       R41
         CLI   1(WA),C' '          TEST TERMINATOR CHARACTER        R41
         BNE   NREPERR             ILLEGAL IF NOT BLANK             R41
         MVN   NREPDATA(1),NREPCHAR  SAVE NUMERIC NIBBLE            R41
         MVC   $BSPACE,NREPDATA    UPDATE BACKSPACE CHARACTER       R41
         B     NPLCOMNT            BR TO LIST/LOG STATEMENT         R41
         SPACE 3                                                    R41
NPLCOMCH NULL  ,                   &CCOMCHR, &RCOMCHR STATEMENTS    R41
         LA    R1,NPLWORK          POINT TO WORK AREA               R41
         BAL   WE,NPLCCOM1         EXTRACT CHARACTER                R41
         L     WE,=A(NPLTRT1)      POINT TO TRANSLATE TABLE         R41
         TRT   NPLWORK(1),0(WE)    TEST CHARACTER                   R41
         BNZ   NPLCHERR            BR IF ILLEGAL                    R41
         CLI   NPLWORK,X'4A'       RETEST CHARACTER                 R41
         BL    NPLCHERR            BR IF ILLEGAL                    R41
         CLI   NPLWORK,X'7F'       RETEST CHARACTER                 R41
         BH    NPLCHERR                                             R41
         B     NPLSTORC             ELSE BR TO STORE VALUE          R41
         EJECT                                                      R41
NPLCKSPL NULL  ,                   &CHKPT, &SPOOL STATEMENTS        R41
         MVI   C'-'(WC),0          ALLOW HYPHEN AS LEGAL CHARACTER  R41
         MVI   C'.'(WC),1           AND DISALLOW PERIOD             R41
         B     NPLCHAR             BR TO COMMON PROCESSING          R41
         SPACE 3                                                    R41
NPLDELAY NULL                      PARAMETER LIBRARY &DELAYTM STATEMENT
         BAL   WC,NPLNUMBR         EXTRACT AND CHECK NUMBER         R41
         SLL   R1,12               ADJUST VALUE                     R41
         B     NPLSTORE            BR TO STORE VALUE                R41
         SPACE 3                                                    R41
NPLPRI   NULL  ,                   &PRIHIGH, &PRILOW STATEMENTS     R41
         BAL   WC,NPLNUMBR         EXTRACT AND CHECK NUMBER         R41
         SLL   R1,4                MULTIPLY BY 16                   R41
         B     NPLSTORE            BR TO STORE VALUE                R41
         EJECT                                                      R41
NPLROPSL NULL                      PARAMETER LIBRARY &RDROPSL STATEMENT
         L     WD,=A(NRDROPSL)     POINT TO LOGON 'RDR' PARMS       R41
         B     NPLRDROP            BR TO CONTINUE                   R41
         SPACE 3                                                    R41
NPLROPST NULL                      PARAMETER LIBRARY &RDROPST STATEMENT
         L     WD,=A(NRDROPST)     POINT TO STC 'RDR' PARMS         R41
         B     NPLRDROP            BR TO CONTINUE                   R41
         SPACE 3                                                    R41
NPLROPSU NULL                      PARAMETER LIBRARY &RDROPSU STATEMENT
         L     WD,=A(NRDROPSU)     POINT TO BATCH JOB 'RDR' PARMS   R41
         SPACE 1                                                    R41
NPLRDROP BAL   WC,NPLID            EXTRACT 'RDR' PARM FIELD         R41
         BAL   WE,NPLRDVAL         VALIDATE 'RDR' PARM FIELD        R41
         B     NPLCHERR            BR IF ILLEGAL    +0              R41
         B     NPLSTORO            BR TO SET VALUE  +4              R41
         SPACE 3                                                    R41
NPLRPRI  NULL                      PARAMETER LIBRARY &RPRI(N) STATEMENT
         BAL   WE,NPLINDEX         GET TABLE OFFSET IN WD           R41
         AL    WD,$RTIMTAB         ADD TABLE ORIGIN                 R41
         BAL   WC,NPLNUMB          EXTRACT AND CHECK NUMBER         R41
         STC   R1,0(,WD)           STORE FIELD VALUE                R41
         B     NPLCOMNT            BR TO LIST/LOG STATEMENT         R41
         SPACE 3                                                    R41
NPLRPRT  NULL                      PARAMETER LIBRARY &RPRT(N) STATEMENT
         BAL   WE,NPLINDEX         GET TABLE OFFSET IN WD           R41
         AL    WD,$RTIMTAB         ADD TABLE OFFSET                 R41
         BAL   WC,NPLNUMB          EXTRACT AND CHECK NUMBER         R41
         MH    R1,=H'60'           ADJUST NUMBER                    R41
         STCM  R1,7,1(WD)          STORE FIELD VALUE                R41
         B     NPLCOMNT            BR TO LIST/LOG STATEMENT         R41
         EJECT                                                      R41
NPLSID   NULL                      PARAMETER LIBRARY &SID     STATEMENT
         MVI   C'.'(WC),1          DISALLOW PERIOD AS LEGAL CHAR    R41
         B     NPLCHAR             BR TO COMMON PROCESSING          R41
         SPACE 3                                                    R41
NPLXLIN  NULL                      PARAMETER LIBRARY &XLIN(N) STATEMENT
         BAL   WE,NPLINDEX         GET TABLE OFFSET IN WD           R41
         AL    WD,=A(NXPRITAB)     ADD TABLE ORIGIN                 R41
         BAL   WC,NPLNUMB          EXTRACT AND CHECK NUMBER         R41
         STCM  R1,7,1(WD)          STORE FIELD VALUE                R41
         B     NPLCOMNT            BR TO LIST/LOG STATEMENT         R41
         SPACE 3                                                    R41
NPLXPRI  NULL                      PARAMETER LIBRARY &XPRI(N) STATEMENT
         BAL   WE,NPLINDEX         GET TABLE OFFSET IN WD           R41
         AL    WD,=A(NXPRITAB)     ADD TABLE ORIGIN                 R41
         BAL   WC,NPLNUMB          EXTRACT AND CHECK NUMBER         R41
         SLL   R1,4                MULTIPLY BY 16                   R41
         STC   R1,0(,WD)           STORE FIELD VALUE                R41
         B     NPLCOMNT            BR TO LIST/LOG STATEMENT         R41
         SPACE 3                                                    R41
NPLINDEX CLI   5(WA),C'('          WAS KEYWORD SUBSCRIPTED...       R41
         BNE   NPLSSERR            BR TO ISSUE DIAGNOSTIC      @OZ30738
         CLI   7(WA),C')'          TEST FOR SUBSCRIPT TERMINATOR    R41
         BNE   NPLDXERR            ILLEGAL IF NO                    R41
         CLI   6(WA),C'1'          IF                               R41
         BL    NPLDXERR             SUBSCRIPT                       R41
         CLI   6(WA),C'9'            INVALID,                       R41
         BH    NPLDXERR               BR TO ISSUE DIAGNOSTIC        R41
         IC    WD,6(,WA)           WD = SUBSCRIPT                   R41
         N     WD,=F'15'                 CONVERTED                  R41
         BCTR  WD,0                       TO TABLE                  R41
         SLL   WD,2                        OFFSET                   R41
         BR    WE                  RETURN                           R41
         SPACE 1                                                    R41
NPLDXERR L     R1,=A(NPLDXERM)     POINT TO ILLEGAL SUBSCRIPT MSG   R41
         B     NPLERMSG             AND BR TO ISSUE DIAGNOSTIC      R41
         EJECT                                                      R41
***********************************************************************
*                                                                     *
*        NPLNUMBR -- ROUTINE TO EXTRACT AND VALIDATE NUMERIC VALUE    *
*                                                                     *
***********************************************************************
         SPACE 1                                                    R41
NPLNUMBR BAL   R1,NPLSETWA         ADJUST WA FOR COMMON CODE        R41
         SPACE 1                                                    R41
NPLNUMB  BAL   WE,NPLDCNVT         EXTRACT NUMBER                   R41
         B     NPLBADNO            BR IF ILLEGAL NUMBER       +0    R41
         CLI   0(WA),C' '          IF TERMINATOR IS A BLANK,  +4    R41
         BE    NRANGECK             BR TO CHECK FOR WITHIN RANGE    R41
         CLR   WA,R15              IF NOT END OF CARD,              R41
         BNH   NPLDCERR             BR TO ISSUE DIAGNOSTIC          R41
         SPACE 1                                                    R41
NRANGECK CH    R1,PTELOVAL         IF                               R41
         BL    NPLBADNO             WITHIN                          R41
         C     R1,PTEHIVAL           VALID RANGE,                   R41
         BNHR  WC                     RETURN                        R41
         SPACE 1                                                    R41
NPLBADNO LH    LINK,PTELOVAL       GET LOWER LIMIT                  R41
         L     R0,PTEHIVAL         GET UPPER LIMIT                  R41
         SPACE 1                                                    R41
NRANGERR L     R1,=A(NRANGERM)     POINT TO ILLEGAL RANGE MSG       R41
         MVC   17(15,R1),=X'2021206B4020202020202020202120'         R41
         CVD   LINK,NPLLWORK       FILL IN                          R41
         ED    16(4,R1),NPLLWORK+6  LOWER LIMIT                     R41
         CVD   R0,NPLDBL           FILL IN                          R41
         MVO   NPLLWORK,NPLDBL      UPPER                           R41
         ED    21(11,R1),NPLLWORK+2  LIMIT                          R41
         B     NPLERMSG            THEN BR TO ISSUE DIAGNOSTIC      R41
         SPACE 3                                                    R41
***********************************************************************
*                                                                     *
*        NPLSETWA -- SUBROUTINE TO ADJUST KEYWD ADDR FOR COMMON CODE  *
*                                                                     *
***********************************************************************
         SPACE 1                                                    R41
NPLSETWA LA    R0,8                SET TO MAXIMUM KEYWORD LENGTH    R41
         SPACE 1                                                    R41
NPLTSTWA CLM   R0,1,PTEKEYLN       TEST KEYWORD LENGTH              R41
         BER   R1                  RETURN IF MATCH                  R41
         BCTR  WA,0                BACK UP KEYWORD POINTER          R41
         BCT   R0,NPLTSTWA         REDUCE LENGTH AND LOOP           R41
         SPACE 1                                                    R41
I03     $ERROR                     ERROR IN PARAMETER TABLE         R41
         EJECT                                                      R41
***********************************************************************
*                                                                     *
*        NPLID -- SUBROUTINE TO EXTRACT AND VALIDATE EBCDIC VALUE     *
*                                                                     *
***********************************************************************
         SPACE 1                                                    R41
NPLID    BAL   R1,NPLSETWA         ADJUST WA FOR COMMON CODE        R41
         CLI   8(WA),C'='          TEST NEXT CHARACTER              R41
         BNE   NPLSSERR            INVALID IF NOT EQUAL SIGN        R41
         LA    WA,8(,WA)           STEP OVER KEYWORD                R41
         LA    WE,1(,WA)           SAVE FIELD ORIGIN ADDRESS        R41
         SPACE 1                                                    R41
NPLIDEND BXH   WA,R14,NPLSSERR     LOCATE                           R41
         CLI   0(WA),C' '           END OF                          R41
         BNE   NPLIDEND              FIELD                          R41
         SPACE 1                                                    R41
         SLR   WA,WE               COMPUTE FIELD LENGTH             R41
         CH    WA,PTELOVAL         IF FIELD LENGTH                  R41
         BL    NPLCHERR             NOT WITHIN                      R41
         C     WA,PTEHIVAL           VALID RANGE,                   R41
         BH    NPLCHERR               BR TO ISSUE DIAGNOSTIC        R41
         MVC   NPLWORK,NPLBLNKS    INITIALIZE FIELD TO BLANKS       R41
         LTR   WA,WA               TEST FOR NULL VALUE              R41
         BZR   WC                  RETURN IF YES                    R41
         BCTR  WA,0                LEFT JUSTIFY FIELD               R41
         EX    WA,NPLIDMV           IN NPLWORK                      R41
         L     WE,=A(NPLTRT2)      POINT TO PARAMETER XLATE TABLE   R41
         EX    WA,NPLIDTRT         SCAN FOR ILLEGAL CHARACTERS      R41
         BZR   WC                  RETURN IF NONE                   R41
         SPACE 1                                                    R41
NPLCHERR L     R1,=A(NPLCHERM)     POINT TO INVALID CHARACTER MSG   R41
         B     NPLERMSG             AND BR TO ISSUE DIAGNOSTIC      R41
         SPACE 1                                                    R41
NPLIDMV  MVC   NPLWORK(*-*),0(WE)  *** EXECUTE ONLY ***             R41
NPLIDTRT TRT   NPLWORK(*-*),0(WE)  *** EXECUTE ONLY ***             R41
         TITLE 'HASP INITIALIZATION -- INITIALIZATION PARAMETER STATEMEC
               NT DISPLAY PROCESSING ROUTINES'                      R41
NPLSHOW  NULL                      PARAMETER LIBRARY DISPLAY  STATEMENT
         LA    WA,1(,WA)           SKIP                             R41
         CLI   0(WA),C' '           OVER                            R41
         BNE   NPLSHOW               KEYWORD                        R41
         SPACE 1                                                    R41
NPLSHKEY BXH   WA,R14,NPLSSERR     LOCATE NAME                      R41
         CLI   0(WA),C' '           OF FIELD TO BE                  R41
         BE    NPLSHKEY              DISPLAYED                      R41
         SPACE 1                                                    R41
         CLI   0(WA),C''''         TEST FOR MESSAGE                 R41
         BE    NPLSHMSG            BR IF YES                        R41
         L     WB,=A(NPLPTBL)      POINT TO PARAMETER TABLE         R41
         LA    R0,NPLPTENT         GET NUMBER OF TABLE ENTRIES      R41
         SLR   WC,WC               CLEAR FOR INSERTS                R41
         SPACE 1                                                    R41
NPLSHNX1 IC    WC,PTEKEYLN         GET LENGTH OF KEYWORD            R41
         BCTR  WC,0                REDUCE FOR EXECUTE               R41
         EX    WC,NPLCLCLC         EXECUTE COMPARE                  R41
         BE    NPLSHNX2            BR IF NAME MATCHES STATEMENT     R41
         LA    WB,PTELENG(,WB)     GET NEXT TABLE ENTRY             R41
         BCT   R0,NPLSHNX1         TEST NEXT ENTRY                  R41
         SPACE 1                                                    R41
NPLSHER1 LA    R1,NPLDSAVE         FAKE CONTROL BLOCK ADDRESS  @OZ30738
         B     NPLDVERR             AND BR TO ISSUE DIAGNOSTIC      R41
         SPACE 1                                                    R41
NPLSHNX2 LR    R1,WA               RELOAD FIELD ADDRESS             R41
         SPACE 1                                                    R41
NPLSHNX3 BXH   R1,R14,NPLSSERR     LOCATE                           R41
         CLI   0(R1),C' '           END OF                          R41
         BNE   NPLSHNX3              FIELD                          R41
         SPACE 1                                                    R41
         TM    PTEFLG1,PTE1SHOW    IS FIELD DISPLAYABLE...          R41
         BZ    NPLSHERR            BR IF NO                         R41
         MVC   NPLWORK,NPLBLNKS    SET WORK AREA TO BLANKS          R41
         LH    WD,PTEDISPL         GET FIELD DISPLACEMENT           R41
         ALR   WD,BASE1            ADD HCT ORIGIN                   R41
         ICM   R1,7,PTEDRTN        GET DISPLAY ROUTINE ADDRESS      R41
         BNZR  R1                  BR IF PRESENT                    R41
         SPACE 1                                                    R41
NPLSHERR L     R1,=A(NPLSHERM)     POINT TO ERROR MESSAGE           R41
         B     NPLERMSG             AND BR TO ISSUE DIAGNOSTIC      R41
         EJECT                                                      R41
***********************************************************************
*                                                                     *
*        NPLSHMSG -- ROUTINE TO DISPLAY MESSAGE TO OPERATOR           *
*                                                                     *
***********************************************************************
         SPACE 1                                                    R41
NPLSHMSG SLR   WC,WC               CLEAR MESSAGE LENGTH             R41
         TM    NPLFLAGS,NPLCONSL   ARE WE IN CONSOLE MODE...        R41
         BZ    NPLSHQ              BR IF NO                         R41
         AL    WA,=A(NLOGTEXT-NCARD) ELSE USE                       R41
         AL    R15,=A(NLOGTEXT-NCARD) NON-UPPER-CASE TEXT           R41
         SPACE 1                                                    R41
NPLSHQ   LR    WD,WA               SAVE ADDRESS OF START OF TEXT    R41
         SPACE 1                                                    R41
NPLSHQ1  BXH   WA,R14,NPLSSERR     GET NEXT CHARACTER               R41
         LA    WC,1(,WC)           BUMP LENGTH                      R41
         CLI   0(WA),C''''         TEST FOR CLOSING QUOTE           R41
         BNE   NPLSHQ1             LOOP IF NO                       R41
         CLI   1(WA),C''''         TEST FOR INTERNAL QUOTE          R41
         BNE   NPLSHQ2             BR IF NO TO DISPLAY MESSAGE      R41
         LR    R1,R15              OVERLAY                          R41
         SLR   R1,WA                INTERNAL                        R41
         EX    R1,NPLSHQM1           QUOTE                          R41
         B     NPLSHQ1             BR TO RESUME SCAN                R41
         SPACE 1                                                    R41
NPLSHQ2  BCT   WC,NPLSHQ3          BR IF NON-NULL MESSAGE           R41
         B     NPLCOMNT             ELSE BR TO LIST/LOG STATEMENT   R41
         SPACE 1                                                    R41
NPLSHQ3  L     R1,=A(NLSTMSG)      POINT TO DISPLAY MESSAGE         R41
         MVC   NLSTTXT-NLSTMSG(,R1),NPLBLNKS  CLEAR MESSAGE AREA    R41
         BCTR  WC,0                REDUCE FOR EXECUTE               R41
         EX    WC,NPLSHQM2         MOVE MESSAGE INTO DISPLAY AREA   R41
        $$WTO  (R1)                ISSUE MESSAGE TO OPERATOR        R41
         B     NPLCOMNT            BR TO LIST/LOG STATEMENT         R41
         SPACE 1                                                    R41
NPLSHQM1 MVC   0(*-*,WA),1(WA)                *** EXECUTE ONLY ***  R41
NPLSHQM2 MVC   NLSTTXT-NLSTMSG(*-*,R1),1(WD)  *** EXECUTE ONLY ***  R41
         EJECT                                                      R41
***********************************************************************
*                                                                     *
*        NPLSHNUM -- ROUTINE TO DISPLAY NUMERIC VALUE TO OPERATOR     *
*                                                                     *
***********************************************************************
         SPACE 1                                                    R41
NPLSHNUM SLR   R0,R0               CLEAR FOR INSERT                 R41
         IC    R0,0(,WD)           ASSUME 1-BYTE FIELD              R41
         CLI   PTEFLDLN,1          TEST ASSUMPTION                  R41
         BE    NPLSHOWN            BR IF VALID                      R41
         ICM   R0,3,0(WD)          ASSUME 2-BYTE FIELD              R41
         CLI   PTEFLDLN,2          TEST ASSUMPTION                  R41
         BE    NPLSHOWN            BR IF VALID                      R41
         ICM   R0,7,0(WD)          ASSUME 3-BYTE FIELD              R41
         CLI   PTEFLDLN,3          TEST ASSUMPTION                  R41
         BE    NPLSHOWN            BR IF VALID                      R41
         L     R0,0(,WD)           ASSUME 4-BYTE FIELD              R41
         CLI   PTEFLDLN,4          TEST ASSUMPTION                  R41
         BNE   I02                 BR IF INVALID (TABLE ERROR)      R41
         LPR   R0,R0               ENSURE NUMBER IS POSITIVE        R41
         SPACE 1                                                    R41
NPLSHOWN BAL   WE,NPLSHEDT         EDIT VALUE INTO NPLWORK          R41
         B     NPLSHWTO            BR TO DISPLAY VALUE              R41
         SPACE 3                                                    R41
***********************************************************************
*                                                                     *
*        NPLSHEDT -- SUBROUTINE TO EDIT NUMERIC VALUE INTO NPLWORK    *
*                                                                     *
***********************************************************************
         SPACE 1                                                    R41
NPLSHEDT LA    R1,NPLWORK          POINT TO WORK AREA               R41
         SPACE 1                                                    R41
NPLSHED2 CVD   R0,NPLDBL           CONVERT VALUE TO DECIMAL         R41
         UNPK  0(8,R1),NPLDBL      UNPACK INTO WORK AREA            R41
         OI    7(R1),C'0'          MAKE DISPLAYABLE                 R41
         SPACE 1                                                    R41
NPLSHNXT CLI   1(R1),C' '          TEST FOR END OF FIELD            R41
         BER   WE                  RETURN IF YES                    R41
         CLI   0(R1),C'0'          TEST FOR HIGH-ORDER ZERO         R41
         BNER  WE                  RETURN IF NO                     R41
         MVC   0(8,R1),1(R1)       SHIFT OUT HIGH-ORDER ZERO        R41
         B     NPLSHNXT            CONTINUE                         R41
         EJECT                                                      R41
***********************************************************************
*                                                                     *
*        NPLSHCH -- ROUTINE TO DISPLAY EBCDIC VALUE TO OPERATOR       *
*                                                                     *
***********************************************************************
         SPACE 1                                                    R41
NPLSHCH  IC    R1,PTEFLDLN         GET FIELD LENGTH                 R41
         BCTR  R1,0                REDUCE FOR EXECUTE               R41
         EX    R1,NPLSHMOV         MOVE VALUE TO NPLWORK            R41
         B     NPLSHWTO            BR TO DISPLAY VALUE              R41
         SPACE 1                                                    R41
NPLSHMOV MVC   NPLWORK(*-*),0(WD)  *** EXECUTE ONLY ***             R41
         SPACE 3                                                    R41
***********************************************************************
*                                                                     *
*        NPLSHOPT -- ROUTINE TO DISPLAY OPTION VALUE TO OPERATOR      *
*                                                                     *
***********************************************************************
         SPACE 1                                                    R41
NPLSHOPT MVC   NPLWORK(2),=C'NO '  ASSUME SWITCH NOT SET            R41
         IC    R1,PTESWYES         GET 'ON' VALUE                   R41
         EX    R1,NPLSHSWT         IS SWITCH ON...                  R41
         BZ    NPLSHWTO            BR IF NO                         R41
         MVC   NPLWORK(3),=C'YES '  ELSE SET 'YES'                  R41
         SPACE 1                                                    R41
NPLSHWTO L     R1,=A(NLSTMSG)      POINT TO DISPLAY MESSAGE         R41
         MVC   NLSTTXT-NLSTMSG(,R1),NPLBLNKS  CLEAR MESSAGE AREA    R41
         MVC   NLSTKEY-NLSTMSG(,R1),PTEKEY  MOVE IN KEYWORD         R41
         LA    WC,NLSTKEY+1-NLSTMSG(WC,R1)  SKIP OVER KEYWORD       R41
         SPACE 1                                                    R41
NPLSHMEQ MVI   0(WC),C'='          SET EQUAL SIGN                   R41
         MVC   1(L'NPLWORK,WC),NPLWORK  MOVE IN FIELD VALUE         R41
        $$WTO  (R1)                DISPLAY FIELD VALUE              R41
         B     NPLCOMNT            BR TO LIST/LOG STATEMENT         R41
         SPACE 1                                                    R41
NPLSHSWT TM    0(WD),*-*           *** EXECUTE ONLY ***             R41
         EJECT                                                      R41
NPLDRPRI CLI   5(WA),C'('          TEST FOR SUBSCRIPT               R41
         BNE   NPLSHER1            BR TO ISSUE DIAGNOSTIC      @OZ30738
         BAL   WE,NPLINDEX         GET TABLE OFFSET IN WD           R41
         AL    WD,$RTIMTAB         ADD TABLE ORIGIN                 R41
         SLR   R0,R0               CLEAR FOR INSERT                 R41
         IC    R0,0(,WD)           GET FIELD VALUE                  R41
         B     NPLDNDX             BR TO EDIT VALUE                 R41
         SPACE 3                                                    R41
NPLDRPRT CLI   5(WA),C'('          TEST FOR SUBSCRIPT               R41
         BNE   NPLSHER1            BR TO ISSUE DIAGNOSTIC      @OZ30738
         BAL   WE,NPLINDEX         GET TABLE OFFSET IN WD           R41
         AL    WD,$RTIMTAB         ADD TABLE ORIGIN                 R41
         SLR   R1,R1               CLEAR FOR INSERT                 R41
         ICM   R1,7,1(WD)          GET FIELD VALUE                  R41
         SLR   R0,R0               CLEAR FOR DIVIDE                 R41
         D     R0,=F'60'           DIVIDE BY 60                     R41
         LR    R0,R1               MOVE QUOTIENT TO R0              R41
         B     NPLDNDX             BR TO EDIT VALUE                 R41
         SPACE 3                                                    R41
NPLDXLIN CLI   5(WA),C'('          TEST FOR SUBSCRIPT               R41
         BNE   NPLSHER1            BR TO ISSUE DIAGNOSTIC      @OZ30738
         BAL   WE,NPLINDEX         GET TABLE OFFSET IN WD           R41
         AL    WD,=A(NXPRITAB)     ADD TABLE ORIGIN                 R41
         SLR   R0,R0               CLEAR FOR INSERT                 R41
         ICM   R0,7,1(WD)          GET FIELD VALUE                  R41
         B     NPLDNDX             BR TO EDIT VALUE                 R41
         SPACE 3                                                    R41
NPLDXPRI CLI   5(WA),C'('          TEST FOR SUBSCRIPT               R41
         BNE   NPLSHER1            BR TO ISSUE DIAGNOSTIC      @OZ30738
         BAL   WE,NPLINDEX         GET TABLE OFFSET IN WD           R41
         AL    WD,=A(NXPRITAB)     ADD TABLE ORIGIN                 R41
         SLR   R0,R0               CLEAR FOR INSERT                 R41
         IC    R0,0(,WD)           GET FIELD VALUE                  R41
         SRL   R0,4                DIVIDE BY 16                     R41
         SPACE 1                                                    R41
NPLDNDX  BAL   WE,NPLSHEDT         EDIT VALUE INTO NPLWORK          R41
         L     R1,=A(NLSTMSG)      POINT TO DISPLAY MESSAGE         R41
         MVC   NLSTTXT-NLSTMSG(,R1),NPLBLNKS  CLEAR MESSAGE AREA    R41
         MVC   NLSTKEY-NLSTMSG(8,R1),0(WA)  MOVE IN KEYWORD         R41
         LA    WC,NLSTKEY+8-NLSTMSG(,R1)  SKIP OVER KEYWORD         R41
         B     NPLSHMEQ            BR TO DISPLAY VALUE              R41
         EJECT                                                      R41
NPLDSSSM MVC   NPLWORK(8),NPLSSSM  MOVE SSSM NAME TO NPLWORK        R41
         B     NPLSHWTO            BR TO DISPLAY IT                 R41
         SPACE 3                                                    R41
NPLDOPSL L     WD,=A(NRDROPSL)     POINT TO LOGON 'RDR' PARMS       R41
         B     NPLSHCH             BR TO DISPLAY THEM               R41
         SPACE 3                                                    R41
NPLDOPST L     WD,=A(NRDROPST)     POINT TO STC 'RDR' PARMS         R41
         B     NPLSHCH             BR TO DISPLAY THEM               R41
         SPACE 3                                                    R41
NPLDOPSU L     WD,=A(NRDROPSU)     POINT TO BATCH JOB 'RDR' PARMS   R41
         B     NPLSHCH             BR TO DISPLAY THEM               R41
         SPACE 3                                                    R41
NPLDDLAY L     R0,0(,WD)           GET FIELD VALUE                  R41
         SRL   R0,12               UNADJUST VALUE                   R41
         B     NPLSHOWN            BR TO DISPLAY IT                 R41
         SPACE 3
NPLDPRI  SR    R0,R0               CLEAR REG FOR INSERT             R41
         IC    R0,0(,WD)           GET FIELD VALUE                  R41
         SRL   R0,4                DIVIDE BY 16                     R41
         B     NPLSHOWN            BR TO DISPLAY VALUE              R41
         SPACE 1                                                    R41
         DROP  WB                  KILL PTE ADDRESSABILITY          R41
         TITLE 'HASP INITIALIZATION -- OS/JES2 REP FACILITY PROCESSING C
               ROUTINES'                                            R41
NPLBASE  NULL                      PARAMETER LIBRARY BASE STATEMENT  R4
         BAL   WD,NREPLSCN         SCAN LOCATION FIELDS              R4
         ST    WC,12(,WB)          SET NEW BASE                      R4
         B     NPLCOMNT            PROCESS AS COMMENT STATEMENT      R4
         SPACE 5                                                     R4
NPLVER   NULL                      PARAMETER LIBRARY VERIFY STATEMENT
         BAL   WD,NREPLSCN         SCAN LOCATION FIELDS
         BAL   WD,NREPDSCN         SCAN DATA FIELD
         MODESET EXTKEY=ZERO       SET ZERO PROTECT KEY
         EX    R1,NREPCLC          PERFORM VERIFICATION CHECK
         MODESET EXTKEY=HASP       RESET HASP PROTECT KEY
         BE    NPLCOMNT            BRANCH IF DATA VERIFIES
         L     R1,=A(NVERERM)      POINT TO VERIFICATION MSG         R4
         B     NPLERMSG             AND BR TO ISSUE DIAGNOSTIC       R4
         SPACE 5
NPLREP   NULL                      PARAMETER LIBRARY REPLACE STATEMENT
         BAL   WD,NREPLSCN         SCAN LOCATION FIELDS
         CLC   NREPMOD,=C'ABS '    REP TO ABSOLUTE LOCATION...      R41
         BE    NPLREPIT            BR IF YES                        R41
         OC    8(4,WB),8(WB)       IS MODULE LOCATABLE...           R41
         BZ    NREPERR             ERROR IF NO                      R41
         SPACE 1                                                    R41
NPLREPIT BAL   WD,NREPDSCN         SCAN DATA FIELDS                 R41
         MODESET EXTKEY=ZERO       SET ZERO PROTECT KEY
         EX    R1,NREPMVC          MOVE DATA TO SPECIFIED LOCATION
         MODESET EXTKEY=HASP       RESET HASP PROTECT KEY
         B     NPLCOMNT            PROCESS AS COMMENT STATEMENT
         EJECT
NPLNAME  NULL                      PARAMETER LIBRARY NAME STATEMENT
         BAL   WE,NREPBSCN         FIND START OF MEMBER NAME FIELD
         BAL   WE,NREPBSCN         FIND START OF MODULE NAME FIELD
         CLC   0(4,WA),=CL4'HASP'  TEST FIRST FOUR CHARACTERS
         BNE   NREPERR             ERROR IF NOT 'HASP....'
         MVC   NREPMOD,4(WA)       SET LAST FOUR CHARACTERS OF NAME
         BAL   WE,NREPNSCN         GET ADDRESS OF DIRECTORY ENTRY
         MVC   NREPZAP,8(WB)       SAVE MODULE ADDRESS
         XC    NREPBASE,NREPBASE   RESET MODULE BASE
         OI    NPLFLAGS,NPLZAPSW   INDICATE SPZAP MODE
         B     NPLCOMNT            PROCESS AS COMMENT STATEMENT
         SPACE 3                                                    R41
NPLENDZP NULL                      PARAMETER LIBRARY ENDZAP STATEMENT
         NI    NPLFLAGS,255-NPLZAPSW  RESET SPZAP MODE
         B     NPLCOMNT            PROCESS AS COMMENT STATEMENT
         SPACE 3                                                    R41
NREPLSCN NULL                      SCAN REP LOCATION FIELDS
         BAL   WE,NREPBSCN         FIND START OF SECOND FIELD
         LA    WB,NREPZAP-8        ASSUME SPZAP MODE
         TM    NPLFLAGS,NPLZAPSW   TEST REP MODE
         BO    NREPLSC1            BRANCH IF SPZAP MODE
         L     WB,NREPNAME         POINT TO LAST DIRECTORY ENTRY    R41
         CLC   0(2,WA),=CL2'* '    TEST MODULE NAME                 R41
         BE    NREPLSC             BR IF UNCHANGED                  R41
         MVC   NREPMOD,0(WA)       SET MODULE NAME
         BAL   WE,NREPNSCN         GET ADDRESS OF DIRECTORY ENTRY
         ST    WB,NREPNAME          AND SAVE
         SPACE 1                                                    R41
NREPLSC  BAL   WE,NREPBSCN         FIND START OF LOCATION FIELD     R41
         L     WC,NREPLOC          ASSUME PREVIOUS LOCATION
         CLC   0(2,WA),=CL2'* '    TEST LOCATION FIELD
         BER   WD                  RETURN IF '*'
         SPACE 2
NREPLSC1 SR    WC,WC               CLEAR LOCATION REGISTER
         BCTR  WA,0                BACK UP ONE CHARACTER
         BAL   WE,NREPHEX          VALIDATE AND CONVERT CHARACTER
         SLL   WC,4                SHIFT TOTAL
         O     WC,NREPWORD         ADD NEW VALUE
         CL    WC,=X'00FFFFFF'     TEST TOTAL
         BH    NREPERR             BRANCH IF LOCATION LIMIT EXCEEDED
         CLI   1(WA),C' '          TEST NEXT CHARACTER
         BNE   NREPHEX             CONVERT NEXT CHARACTER IF NOT BLANK
         BR    WD                  RETURN
         EJECT
NREPDSCN NULL                      DATA SCAN SUBROUTINE
         ST    WC,NREPLOC          SAVE CURRENT DISPLACEMENT
         AL    WC,8(,WB)           ADD MODULE ADDRESS
         SL    WC,12(,WB)          SUBTRACT ASSEMBLY BASE
         BAL   WE,NREPBSCN         FIND START OF DATA FIELD
         BCTR  WA,0                BACK UP ONE CHARACTER
         LA    R1,NREPDATA         GET ADDRESS OF PACKED DATA
         SPACE 2
NREPDSC1 LA    R0,2                CONVERT TWO EBCDIC CHARACTERS
         B     NREPDSC3             TO ONE BYTE
         SPACE 1
NREPDSC2 MVO   0(1,R1),NREPCHAR    SET ZONE NIBBLE
         SPACE 1
NREPDSC3 BAL   WE,NREPHEX          VALIDATE AND CONVERT CHARACTER
         BCT   R0,NREPDSC2         BRANCH IF FIRST CHARACTER
         MVN   0(1,R1),NREPCHAR    SET NUMERIC NIBBLE
         LA    R1,1(,R1)           ADVANCE TO NEXT BYTE
         SPACE 2
         CLI   1(WA),C'('          TEST NEXT CHARACTER
         BNE   NREPDSC4            BRANCH IF NOT LEFT PARENTHESIS
         TM    NPLFLAGS,NPLZAPSW   TEST REP MODE
         BO    NREPERR             ERROR IF SPZAP MODE
         MVC   NREPMOD,2(WA)       SET MODULE NAME
         MVI   NREPMOD+4,C')'      ADD TERMINATION CHARACTER
         LA    WB,NREPMOD          SCAN
         LA    WB,1(,WB)            FOR
         CLI   0(WB),C')'            RIGHT
         BNE   *-8                    PARENTHESIS
         MVI   0(WB),C' '          BLANK IT OUT
         BAL   WE,NREPNSCN         GET ADDRESS OF DIRECTORY ENTRY
         SL    R1,=F'4'            BACK UP REP DATA ADDRESS
         L     R0,0(,R1)           GET REP DATA
         AL    R0,8(,WB)           ADD MODULE ADDRESS
         SL    R0,12(,WB)          SUBTRACT ASSEMBLY BASE
         ST    R0,0(,R1)           UPDATE REP DATA
         LA    R1,4(,R1)           RESTORE REP DATA ADDRESS
         BXH   WA,R14,NREPERR      SCAN FOR
         CLI   0(WA),C')'           END OF
         BNE   *-8                   MODULE NAME
         SPACE 2
NREPDSC4 CLI   1(WA),C','          TEST NEXT CHARACTER
         BNE   *+8                 BRANCH IF NOT COMMA
         BXH   WA,R14,NREPERR      STEP OVER COMMA
         CLI   1(WA),C' '          TEST NEXT CHARACTER
         BNE   NREPDSC1            BRANCH IF NOT BLANK
         SL    R1,=A(NREPDATA+1)   COMPUTE LENGTH OF DATA
         L     WB,NREPLOC          GET DISPLACEMENT
         LA    WB,1(R1,WB)         ADD DATA LENGTH
         ST    WB,NREPLOC          UPDATE DISPLACEMENT
         BR    WD                  RETURN
         EJECT
NREPBSCN NULL                      FIND START OF VARIABLE FIELD
         BXH   WA,R14,NREPERR      SCAN FOR
         CLI   0(WA),C' '           START OF
         BNE   *-8                   BLANK FIELD
         SPACE 1
         BXH   WA,R14,NREPERR      SCAN FOR
         CLI   0(WA),C' '           START OF
         BE    *-8                   NEXT FIELD
         BR    WE                  RETURN
         SPACE 5
NREPNSCN NULL                      FIND ADDRESS OF DIRECTORY ENTRY
         L     WB,$HASPMAP         GET ADDRESS OF MODULE DIRECTORY
         LA    R0,MAPMODS          GET ENTRIES IN MODULE DIRECTORY   R4
         SPACE 2
NREPNSC1 CLC   NREPMOD,4(WB)       CHECK LAST FOUR CHARACTERS OF NAME
         BER   WE                  RETURN IF MODULE FOUND
         LA    WB,16(,WB)          GET ADDRESS OF NEXT ENTRY
         BCT   R0,NREPNSC1         CHECK NEXT ENTRY
         B     NREPERR             ERROR, MODULE NAME NOT FOUND
         SPACE 5
NREPHEX  NULL                      CONVERT HEX CHARACTER TO BINARY
         BXH   WA,R14,NREPERR      GET NEXT CHARACTER
         CLI   0(WA),X'C1'         TEST
         BL    NREPERR             ILLEGAL IF LESS THAN X'C1'
         MVC   NREPCHAR,0(WA)      MOVE CHARACTER TO WORK AREA
         TR    NREPCHAR,NREPTTAB   TRANSLATE TO BINARY VALUE
         CLI   NREPCHAR,X'0F'      VALIDATE RESULT
         BNHR  WE                  RETURN IF VALID
         SPACE 5
NREPERR  NULL                      REP CARD DATA OR FORMAT ERROR
         L     R1,=A(NREPERM)      POINT TO ILLEGAL REP MSG          R4
         B     NPLERMSG             AND BR TO ISSUE DIAGNOSTIC       R4
         EJECT
         SPACE 5
*
*                             REP CONSTANTS AND WORK AREAS
*
         SPACE 3
NREPCLC  CLC   0(*-*,WC),NREPDATA  ***** EXECUTE ONLY *****
NREPMVC  MVC   0(*-*,WC),NREPDATA  ***** EXECUTE ONLY *****
         SPACE 2
NREPNAME DC    A(*-*)              ADDRESS OF MODULE DIRECTORY ENTRY R4
NREPLOC  DC    A(*-*)              DATA DISPLACEMENT
NREPZAP  DC    A(*-*)              SPZAP MODULE ADDRESS
NREPBASE DC    A(*-*)              SPZAP MODULE BASE
NREPWORD DC    0F'0',XL3'00'       WORK WORD
NREPCHAR DC    XL1'00'             WORK BYTE (LAST BYTE OF NREPWORD)
NREPMOD  DC    2F'0'               MODULE NAME SCAN AREA
NREPDATA DC    XL33'00'            PACKED DATA WORK AREA
         SPACE 2
NREPTTAB EQU   *-X'C1'             EBCDIC HEX TO BINARY TRANSLATE TABLE
         DC    X'0A0B0C0D0E0F',41X'FF',X'00010203040506070809',6X'FF'
         TITLE 'INIT     HASP INITIALIZATION -- COMPACT PARAMETER PROCEX
               SSING ROUTINE'                                       R41
NPLCMPCT NULL                      PARAMETER LIBRARY COMPACT STMNT  R41
         CLI   7(WA),C'='          TEST NEXT CHARACTER              R41
         BNE   NPLSSERR            BR IF NOT EQUAL SIGN             R41
         L     R1,$CPTPOOL         POINT TO WORK CPT (CPT 0)        R41
         USING CPTDSECT,R1                                          R41
         SPACE 1                                                    R41
         LR    WC,R1               CLEAR                            R41
         LA    WD,CPTEND-CPTDSECT   WORK                            R41
         XR    WB,WB                 CPT                            R41
         MVCL  WC,WA                  BEFORE USING                  R41
         LA    WA,7(,WA)           POINT PAST THE KEYWORD           R41
         BAL   WE,NPLASCAN         GET COMPACTION TABLE NUMBER      R41
         LTR   R0,R0               IF NUMBER IS ZERO OR NEG         R41
         BNP   NPLDVERR             GO ISSUE ERROR MSG              R41
         CH    R0,=H'99'           IF NUMBER IS GREATER THAN 99     R41
         BH    NPLDVERR             GO ISSUE ERROR MSG              R41
         STC   R0,CPTNUM           SAVE CPT NUMBER                  R41
         BAL   WE,NPLASCAN         GET NUMBER OF MASTER CHARS       R41
         CH    R0,=H'3'            IF LESS THAN 3                   R41
         BL    NPLDVERR             GO ISSUE ERROR MSG              R41
         CH    R0,=H'16'           IF MORE THAN 16                  R41
         BH    NPLDVERR             GO ISSUE ERROR MSG              R41
         STC   R0,CPTNMAST         SAVE NUMBER OF MASTER CHARS      R41
         LA    WC,X'F0'            INITIAL CPTDTT DISPLACEMENT      R41
         LA    WB,CPTMST           INITIAL CPTCAT ATTRIBUTE         R41
         SPACE 1                                                    R41
NPLALOOP BAL   WE,NPLASCAN         GET A MASTER/NONMASTER CHAR      R41
         LTR   WD,WD               TEST CHARACTER                   R41
         BZ    NPLCHERR            ZERO IS INVALID CHARACTER        R41
         LA    WE,CPTCAT(WD)       IF CHARACTER                     R41
         CLI   0(WE),CPTCHAR        HAS ALREADY BEEN USED           R41
         BNE   NPLDVERR              GO ISSUE ERROR MSG             R41
         STC   WB,CPTCAT(WD)       INIT                             R41
         STC   WC,CPTCTT(WD)        CPT                             R41
         STC   WD,CPTDTT(WC)         TABLES                         R41
         B     NPLDCALC            GO CALCULATE NEXT DISPLACEMENT   R41
         EJECT                                                      R41
NPLAOUT  IC    WB,CPTCAT+C' '      INDICATE                         R41
         LA    WB,CPTPCHAR(,WB)     BLANK                           R41
         STC   WB,CPTCAT+C' '        IS PRIME                       R41
         IC    WC,CPTNUM           POINT TO                         R41
         MH    WC,=AL2(CPTEND-CPTDSECT) CPT                         R41
         LA    WC,0(R1,WC)           TO BE INITIALIZED              R41
         CLI   CPTNMAST-CPTDSECT(WC),X'00' IF CPT IS ALREADY INIT   R41
         BNE   NPLAMVE              DONT INCREMENT COUNT            R41
         LH    WB,$NUMCPTS         INCREMENT                        R41
         LA    WB,1(,WB)            NUMBER OF                       R41
         STH   WB,$NUMCPTS           CPTS INITIALIZED               R41
         SPACE 1                                                    R41
NPLAMVE  LR    WA,R1               MOVE WORK CPT                    R41
         LA    WB,CPTEND-CPTDSECT   TO CPT BEING INITIALIZED        R41
         LR    WD,WB                 OVERLAYING ANY                 R41
         MVCL  WC,WA                  PREVIOUSLY DEFINED CPT        R41
         B     NPLCOMNT            NEXT PARAMETER                   R41
         SPACE 1                                                    R41
         DROP  R1                                                   R41
         TITLE 'HASP INITIALIZATION -- OS/JES2 COMMAND STATEMENT PROCESC
               SING ROUTINE'                                        R41
NPLCOMND NULL                      PARAMETER LIBRARY COMMAND STATEMENT
         GETMAIN R,LV=80,SP=229    GET TEMPORARY COMMAND AREA        R4
         LA    WA,NCOMMTAB         POINT TO ADDR OF 1ST TMP CMD AREA R4
         SPACE 1                                                     R4
SKIP130  LR    WB,WA               LOCATE LAST                       R4
         ICM   WA,15,0(WA)          TEMPORARY                        R4
         BNZ   SKIP130               COMMAND AREA                    R4
         SPACE 1                                                     R4
         ST    R1,0(,WB)           ADD NEW TEMPORARY                 R4
         ST    WA,0(,R1)            COMMAND AREA TO END OF CHAIN     R4
         MVC   8(72,R1),NCARD      MOVE COMMAND TO TEMP AREA         R4
         B     NPLCOMNT            PROCESS COMMAND STMNT AS COMMENT  R4
         TITLE 'HASP INITIALIZATION -- SYSTEM PARAMETER PROCESSING ROUTC
               INE'
NPLSN    NULL                      PARAMETER LIBRARY SN STATEMENT
         BXH   WA,R14,NPLSSERR     GET NEXT CHARACTER
         CLI   0(WA),X'F0'         TEST
         BL    NPLSSERR            INVALID IF NOT NUMERIC
         BE    NPLSNERR            INVALID IF 0                      R4
         BAL   WE,NPLDCONV         GET SYSTEM NUMBER
         B     NPLSNERR            BR IF ILLEGAL NUMBER       +0     R4
         CLI   0(WA),C' '          TEST TERMINATOR CHARACTER  +4     R4
         BNE   NPLSNERR            INVALID IF NOT BLANK
         BCTR  R1,0                DECREMENT SYSTEM NUMBER
         CL    R1,=F'7'             AND TEST
         BNL   NPLSNERR            INVALID IF NOT LESS THAN 7
         MH    R1,=AL2(L'NS1)      COMPUTE TABLE ENTRY DISPLACEMENT
         AL    R1,=A(NS1)          GET ADDRESS OF TABLE ELEMENT
         L     R0,=A(NPLSYSST)     GET ADDRESS OF SCAN TABLE         R4
         BAL   WE,NPLSSCAN         SCAN SUB-PARAMETERS
         B     NPLCOMNT            PROCESS AS COMMENT STATEMENT
         SPACE 5
NPLSNERR NULL                      INVALID SYSTEM NUMBER
         L     R1,=A(NPLSNERM)     POINT TO INVALID SYSTEM MSG       R4
         B     NPLERMSG             AND BR TO ISSUE DIAGNOSTIC       R4
         TITLE 'HASP INITIALIZATION -- LOGICAL INITIATOR PARAMETER PROCC
               ESSING ROUTINE'
NPLINNN  NULL                      PARAMETER LIBRARY INNN STATEMENT
         BXH   WA,R14,NPLSSERR     GET NEXT CHARACTER
         CLI   0(WA),X'F0'         TEST
         BL    NPLSSERR            INVALID IF NOT NUMERIC
         BAL   WE,NPLDCONV         GET INITIATOR NUMBER
         B     NPLINERR            BR IF ILLEGAL NUMBER       +0     R4
         CLI   0(WA),C' '          TEST TERMINATOR CHARACTER  +4     R4
         BNE   NPLINERR            INVALID IF NOT BLANK
         LTR   R0,R1               TEST INITIATOR NUMBER
         BZ    NPLINERR            INVALID IF ZERO
         L     R1,=A(NMAXPART)      OR                              R41
         C     R0,0(,R1)             GREATER                        R41
         BH    NPLINERR               THAN MAX                      R41
         L     R1,$PITABLE         GET                               R4
         BAL   WE,*+8               ADDRESS
         LA    R1,PITLEN(,R1)        OF                              R4
         BCTR  R0,WE                  NTH PIT
         L     R0,=A(NPLPITST)     GET ADDRESS OF SCAN TABLE         R4
         BAL   WE,NPLSSCAN         SCAN SUB-PARAMETERS
         B     NPLCOMNT            PROCESS AS COMMENT STATEMENT
         SPACE 5
NPLINERR NULL                      INVALID INITIATOR NUMBER
         L     R1,=A(NPLINERM)     POINT TO INVALID INITIATOR MSG    R4
         B     NPLERMSG             AND BR TO ISSUE DIAGNOSTIC       R4
         TITLE 'HASP INITIALIZATION -- CLASS ATTRIBUTE TABLE PARAMETER C
               PROCESSING ROUTINE'
NPLSTC   NULL                      PARAMETER LIBRARY &STC STATEMENT
         LA    R1,CATSTCCL         GET STC JOB CLASS
         B     NPLCAT1             UTILIZE COMMON CODE
         SPACE 3
NPLTSU   NULL                      PARAMETER LIBRARY &TSU STATEMENT
         LA    R1,CATTSUCL         GET TSU JOB CLASS
         B     NPLCAT1             UTILIZE COMMON CODE
         SPACE 3
NPLCATX  NULL                      PARAMETER LIBRARY &X STATEMENT
         CLI   1(WA),C'A'          TEST JOB CLASS
         BL    NPLSSERR            ILLEGAL IF LESS THAN 'A'
         CLI   2(WA),C' '          TEST NEXT CHARACTER
         BNE   NPLSSERR            ILLEGAL IF NOT BLANK
         IC    R1,1(,WA)           GET JOB CLASS
         SPACE 2
         USING CATDSECT,R1         PRIVIDE CAT ADDRESSABILITY        R4
         SPACE 1                                                     R4
NPLCAT1  N     R1,=A(X'3F')        CONVERT TO JOB CLASS INDEX
         SLL   R1,5                MULTIPLY BY 32
         AL    R1,$CATABLE         GET ADDRESS OF CAT ELEMENT
         TM    CATJOBFL,CATVALID   TEST CAT FLAGS                    R4
         BZ    NPLSSERR            BRANCH IF INVALID CLASS
         L     R0,=A(NPLCATST)     GET ADDRESS OF SCAN TABLE         R4
         BAL   WE,NPLSSCAN         SCAN SUB-PARAMETERS
         CLC   CATPERFM,=C'255'    TEST PERFORMANCE GROUP            R4
         BH    NPLDVERR            BR IF ILLEGAL SPECIFICATION       R4
         CLI   CATCONVP,0          TEST FOR CONVERTER PARM FIELD     R4
         BE    NPLCOMNT            BR IF NO                          R4
         MVC   NPLWORK,CATCONVP     ELSE MOVE IT TO WORK AREA        R4
         BAL   WE,NPLRDVAL         VALIDATE 'RDR' PARM FIELD        R41
         B     NPLDVERR            BR IF ILLEGAL                 +0  R4
         B     NPLCOMNT            PROCESS PARM CARD AS COMMENT  +4  R4
         SPACE 1                                                     R4
         DROP  R1                  KILL CAT ADDRESSABILITY           R4
         TITLE 'HASP INITIALIZATION -- SYSOUT CLASS ATTRIBUTE TABLE PARC
               AMETER PROCESSING ROUTINE'
NPL$$X   NULL                      PARAMETER LIBRARY $$X STATEMENT
         CLI   2(WA),C'A'          TEST SYSOUT CLASS
         BL    NPLSSERR            ILLEGAL IF LESS THAN 'A'
         CLI   3(WA),C' '          TEST NEXT CHARACTER
         BNE   NPLSSERR            ILLEGAL IF NOT BLANK
         SR    R1,R1               CLEAR REGISTER
         IC    R1,2(,WA)           GET SYSOUT CLASS
         AL    R1,=A(NSCAT)        GET ADDRESS OF SCAT ENTRY
         TM    SCATFLAG-SCADSECT(R1),SCATINVL  TEST SCAT FLAG
         BO    NPLSSERR            BRANCH IF INVALID CLASS
         L     R0,=A(NPLSCAST)     GET ADDRESS OF SCAN TABLE         R4
         BAL   WE,NPLSSCAN         SCAN SUB-PARAMETERS
         B     NPLCOMNT            PROCESS AS COMMENT STATEMENT
         TITLE 'HASP INITIALIZATION -- CARD READER PARAMETER PROCESSINGC
                ROUTINE'
NPLRDR   NULL                      PARAMETER LIBRARY READERNN STATEMENT
         L     R0,=A(NPLRDRST)     GET ADDRESS OF SCAN TABLE         R4
         BAL   WE,NPLDSCAN         SCAN READER SUB-PARAMETERS
         SPACE 1                                                     R4
         USING DCTDSECT,R1         ESTABLISH DCT ADDRESSABILITY
         SPACE 1                                                     R4
SKIP140  CLI   DCTPRRTE,0          TEST FOR PRINT ROUTING            R4
         BNE   NPLRROUT            BR IF YES                        R41
         NI    DCTFLAGS,255-DCTPRLCL  ELSE RESET SPECIAL ROUTING FLG R4
NPLRROUT DS    0H                                                   R41
SKIP160  CLI   DCTPURTE,0          TEST FOR PUNCH ROUTING            R4
         BNE   SKIP170             BR IF YES                         R4
         NI    DCTFLAGS,255-DCTPULCL  ELSE RESET SPECIAL ROUTING FLG R4
SKIP170  CLI   DCTMCLAS,C'A'       TEST DEFAULT MSGCLASS
         BL    NPLDVERR            ILLEGAL IF LESS THAN 'A'
         B     NPLRDVER            BR TO CONCLUDE PARM VALIDATION    R4
         TITLE 'HASP INITIALIZATION -- PRINT/PUNCH PARAMETER PROCESSINGC
                ROUTINE'
NPLPRINT NULL                      PARAMETER LIBRARY PRINTERN STATEMENT
         MVC   NPLSVAL(5),0(WA)    CONVERT
         MVC   NPLSVAL+5(4),6(WA)   PRINTERNN
         LA    WA,NPLSVAL            TO PRINTRNN
         SPACE 5
NPLPUNCH NULL                      PARAMETER LIBRARY PUNCHNN STATEMENT
         L     R0,=A(NPLPPST)      GET ADDRESS OF SCAN TABLE         R4
         BAL   WE,NPLDSCAN         SCAN DEVICE SUB-PARAMETERS
         B     NPLCOMNT            PROCESS AS COMMENT CARD
         TITLE 'HASP INITIALIZATION -- INTERNAL READER PARAMETER PROCESC
               SING ROUTINE'
NPLINR   NULL                      PARAMETER LIBRARY INTRDR STATEMENT
         L     R1,=A(NINRDCT)      GET ADDRESS OF INTRDR DCT         R4
         L     R0,=A(NPLINRST)     GET ADDRESS OF SCAN TABLE         R4
         BAL   WE,NPLSSCAN         SCAN INTERNAL READER SUB-PARAMETERS
         SPACE 1                                                     R4
NPLRDVER CLI   DCTPRINC,15         TEST PRIORITY INCREMENT           R4
         BH    NPLDVERR            ILLEGAL IF GREATHER THAN 15
         CLI   DCTPRLIM,15         TEST PRIORITY LIMIT
         BH    NPLDVERR            ILLEGAL IF GREATHER THAN 15
         CLI   DCTJCLAS,C'A'       TEST DEFAULT JOB CLASS
         BL    NPLDVERR            ILLEGAL IF LESS THAN 'A'
         CLI   DCTRAUTH,7          TEST COMMAND AUTHORIZATION LEVEL
         BH    NPLDVERR            ILLEGAL IF GREATHER THAN 7
         B     NPLCOMNT            PROCESS AS COMMENT STATEMENT
         TITLE 'HASP INITIALIZATION -- NEWS STATEMENT PROCESSING ROUTINC
               E'                                                   R41
NPLNEWS  NULL                      PARAMETER LIBRARY NEWS     STATEMENT
         ICM   WD,15,$NEWNEWS      PICK UP POINTER TO NEWS BLOCK,   R41
         BNZ   NPLNW10               BR AROUND GETMAIN IF NON-ZERO  R41
         L     R0,=A(NEWSTOTL)     GET LENGTH FOR GETMAIN           R41
         ICM   R0,8,=AL1(229)      SET SUBPOOL                      R41
         GETMAIN R,LV=(0)          GET STORAGE FOR NEWS LINES       R41
         ST    R1,$NEWNEWS         SAVE ADDRESS FOR NEXT TIME       R41
         LR    WD,R1               SET UP ADDRESSABILITY            R41
         USING NEWSBLOK,WD           FOR NEWS ENTRIES               R41
         LR    R0,R1               CLEAR ENTIRE                     R41
         L     R1,=A(NEWSTOTL)       GETMAINED                      R41
         L     WB,=X'40000000'       AREA TO                        R41
         MVCL  R0,WA                 BLANKS                         R41
         L     R0,=A(NEWSLAST-NEWSBLOK) SAVE POINTER TO LAST        R41
         ALR   R0,WD                 POSSIBLE NEWS ENTRY            R41
         ST    R0,NEWSEND            TO AVOID FALLING OFF END       R41
         LA    R0,NEWSTART         INITIALIZE POINTER               R41
         ST    R0,NEWSPTR            TO NEXT AVAILABLE ENTRY        R41
         XC    NEWSCONT,NEWSCONT   CLEAR CONTINUATION POINTER       R41
         SPACE 1                                                    R41
NPLNW10  L     WE,NEWSPTR          POINT TO SPACE FOR NEXT/CUR LINE R41
         CL    WE,NEWSEND          SEE IF PAST END OF AREA,         R41
         BH    NPLCOMNT              IGNORE CARD IF SO              R41
         LA    R1,5(,WA)           POINT TO FIRST CHAR OF NEWS DATA R41
         OC    NEWSCONT,NEWSCONT   CONTINUATION CARD...             R41
         BNZ   NPLNW40               BRANCH IF SO                   R41
         CLI   0(R1),C' '          SEE IF                           R41
         BE    NPLNW30               FIRST CHAR                     R41
         CLI   0(R1),C'8'            APPEARS                        R41
         BH    NPLNW20               TO BE                          R41
         CLI   0(R1),C'0'            ANSI                           R41
         BNL   NPLNW30               CARRIAGE CONTROL               R41
         CLI   0(R1),C'-'          IF NOT,                          R41
         BE    NPLNW30               POINT BACK                     R41
         CLI   0(R1),C'+'            TO PRECEEDING                  R41
         BE    NPLNW30               BLANK                          R41
NPLNW20  BCTR  R1,0                  ('SINGLE SPACE')               R41
         EJECT                                                      R41
NPLNW30  LA    R14,NCARD+71        COMPUTE LENGTH OF                R41
         SLR   R14,R1                NEWS TEXT                      R41
         EX    R14,NPLNWMV1        MOVE 1ST (OR ONLY) HALF OF LINE  R41
         CLI   NCARD+71,C' '       CHECK FOR CONTINUATION CARD,     R41
         BE    NPLNW50               BRANCH IF NOT                  R41
         LA    R0,NEWSCCTL(WE,R14) SAVE STARTING ADDRESS            R41
         ST    R0,NEWSCONT           OF 2ND HALF OF LINE            R41
         B     NPLCOMNT            BR TO LIST/LOG STATEMENT         R41
         SPACE 1                                                    R41
NPLNW40  L     R15,NEWSCONT        POINT TO 2ND HALF OF LINE        R41
         XC    NEWSCONT,NEWSCONT   CLEAR POINTER FOR NEXT TIME THRU R41
         LA    R14,NCARD+70        COMPUTE MACHINE                  R41
         SR    R14,R1                TEXT LENGTH,                   R41
         BM    NPLNW50               EXIT IF NEGATIVE               R41
         EX    R14,NPLNWMV2        MOVE 2ND HALF OF LINE            R41
         SPACE 1                                                    R41
NPLNW50  LA    WE,NEWSLENG(,WE)    BUMP POINTER TO NEXT LINE        R41
         ST    WE,NEWSPTR          SAVE FOR NEXT TIME THROUGH       R41
         B     NPLCOMNT            BR TO LIST/LOG STATEMENT         R41
         SPACE 3                                                    R41
NPLNWMV1 MVC   NEWSCCTL(*-*,WE),0(R1) *** EXECUTE ONLY ***          R41
NPLNWMV2 MVC   0(*-*,R15),0(R1)       *** EXECUTE ONLY ***          R41
         TITLE 'HASP INITIALIZATION -- REMOTE JOB ENTRY LINE PARAMETER C
               PROCESSING ROUTINE'                                   R4
NPLLINE  NULL                      PARAMETER LIBRARY LINENN   STMNT  R4
         L     R0,=A(NPLLINST)     GET ADDRESS OF SCAN TABLE         R4
         BAL   WE,NPLDSCAN         SCAN LINE SUB-PARAMETERS          R4
         L     WE,=X'FFFFFFFF'     LOAD DUMMY UCB ADDRESS           R41
         C     WE,DCTBUFAD         TEST FOR DUMMY UCB ADDR          R41
         BE    NPLINE1             BR IF ALREADY DUMMY              R41
         NI    MDCTTYPE,255-DCTPSNA  RESET SNA INDICATOR            R41
         CLC   =C'SNA',DCTBUFAD    TEST FOR SNA LINE                R41
         BNE   NPLINE1             BR IF NO                         R41
         ST    WE,DCTBUFAD          AVOID DEVICE ALLOCATION          R4
         OI    MDCTTYPE,DCTPSNA    SHOW DCT IS LOGICAL LINE          R4
         SPACE 1                                                     R4
NPLINE1  NULL                                                        R4
         B     NPLCOMNT            PROCESS AS COMMENT CARD           R4
         SPACE 1                                                     R4
         DROP  R1                  KILL DCT ADDRESSABILITY           R4
         TITLE 'HASP INITIALIZATION -- LOGONNN PARAMETER PROCESSING ROUC
               TINE'                                                 R4
         SPACE 1                                                     R4
NPLOGON  NULL                      PARAMETER LIBRARY LOGONNN  STMNT  R4
         L     R0,=A(NPLOGNST)     GET ADDRESS OF SCAN TABLE         R4
         BAL   WE,NPLDSCAN         SCAN LOGON SUB-PARAMETERS         R4
         B     NPLCOMNT            PROCESS AS COMMENT CARD           R4
         SPACE 2                                                     R4
         SPACE 2                                                     R4
         TITLE 'HASP INITIALIZATION -- REMOTE TERMINAL PARAMETER PROCESC
               SING ROUTINE'
NPLRMTNN NULL                      PARAMETER LIBRARY RMTNNN STATEMENT
         MVC   NPLSVAL(8),0(WA)    MOVE REMOTE NAME TO WORK AREA
         MVI   NPLSVAL+8,C' '      ADD TERMINATING BLANK
         LA    R1,NPLSVAL+2        SCAN
         LA    R1,1(,R1)            FOR
         CLI   0(R1),C' '            TERMINATING
         BNE   *-8                    BLANK
         MVC   1(4,R1),0(R1)       BLANK OUT REST OF NAME
         SPACE 1                                                    R41
         LA    R0,$MAXRJE          GET MAX NUMBER OF RAT ENTRIES     R4
         L     R1,$RAT             POINT TO 1ST RAT ELEMENT          R4
         SPACE 1                                                     R4
         USING RATDSECT,R1         ESTABLISH RAT ADDRESSABILITY
         SPACE 1                                                     R4
NPLRMTN1 CLC   RATNAME,NPLSVAL     COMPARE REMOTE NAMES
         BE    NPLRMTN2            BRANCH IF NAMES MATCH
         LA    R1,RATEND           GET ADDRESS OF NEXT RAT ELEMENT
         BCT   R0,NPLRMTN1         CHECK NEXT RAT ELEMENT
         B     NPLDNERR            RAT ELEMENT NOT FOUND
         SPACE 1                                                    R41
NPLRMTN2 L     R0,=A(NPLRMTST)     GET ADDRESS OF SCAN TABLE         R4
         BAL   WE,NPLSSCAN         SCAN REMOTE SUB-PARAMETERS
         CLI   RATTYPE,0           TEST FOR DEFAULT SPECIFIED        R4
         BNE   SKIP200             NO, SKIP DEFAULT SETTING          R4
         MVI   RATTYPE,DCTP2770    SET DEFAULT VALUE                 R4
SKIP200  CLC   RATRDCT(2),=H'8160' TEST DISCONNECT INTERVAL         R41
         BH    NPLDVERR            ILLEGAL IF GREATER THAN 8192      R4
         CLI   RATNUMRD,7          TEST NUMBER OF READERS
         BH    NPLDVERR            ILLEGAL IF GREATER THAN 7
         TM    RATTYPE,DCTPLU1     IF NOT SNA REMOTE                R41
         BNO   NPLATPR              GO TEST FOR MAX OF 7            R41
         TM    RATCONF,RATCONFC    IF NO CONSOLE                    R41
         BNO   NPLATPR              GO TEST FOR MAX OF 7            R41
         CLI   RATNUMPR,6          IF MORE THAN 6 PRINTERS          R41
         BH    NPLDVERR             GO ISSUE ERROR MSG              R41
         SPACE 1                                                    R41
NPLATPR  CLI   RATNUMPR,7          TEST NUMBER OF PRINTERS          R41
         BH    NPLDVERR            ILLEGAL IF GREATER THAN 7
         CLI   RATNUMPU,7          TEST NUMBER OF PUNCHES
         BH    NPLDVERR            ILLEGAL IF GREATER THAN 7
         TM    RATTYPE,DCTPLU1     IF SNA REMOTE                    R41
         BO    NPLATLU              GO TEST FOR LUNAME              R41
         IC    R0,RATNUMPR         GET NUMBER OF PRINTERS      @OZ27119
         IC    WE,RATNUMPU         GET NUMBER OF PUNCHES       @OZ27119
         AR    WE,R0               COMPUTE SUM                 @OZ27119
         N     WE,=A(X'3F')        MASK                        @OZ27119
         C     WE,=F'8'            COMPARE                     @OZ27119
         BH    NPLDVERR            ILLEGAL IF SUM IS OVER 8    @OZ27119
         B     NPLCOMNT            GO PRINT STATEMEMT               R41
NPLATLU  CLI   RATSYMB,C' '        IF LUNAME NOT SPECIFIED          R41
         BE    NPLCOMNT              GO PRINT STATEMENT             R41
         OI    RATFLAGS,RATPILUN   IND LUNAME PERMANENTLY INIT      R41
         B     NPLCOMNT            PROCESS AS COMMENT STATEMENT
         SPACE 1                                                     R4
         DROP  R1                  DROP RAT ADDRESSABILITY
         TITLE 'HASP INITIALIZATION -- REMOTE TERMINAL DEVICE PARAMETERC
                PROCESSING ROUTINE'
NPLRNDVM NULL                      PARAMETER LIBRARY RNNN.DVM STATEMENT
         BXH   WA,R14,NPLSSERR     GET NEXT CHARACTER
         CLI   0(WA),X'F0'         TEST
         BL    NPLSSERR            INVALID IF NOT NUMERIC
         BAL   WE,NPLDCONV         GET REMOTE NUMBER
         B     NPLRTERR            BR IF ILLEGAL NUMBER       +0     R4
         CLI   0(WA),C'.'          TEST TERMINATOR CHARACTER  +4     R4
         BNE   NPLSSERR            INVALID IF NOT PERIOD
         BCTR  R1,0                DECREMENT REMOTE NUMBER
         CL    R1,=A($MAXRJE)       AND TEST                         R4
         BNL   NPLDNERR            INVALID IF GREATER THAN MAX       R4
         MH    R1,=AL2(RWTLEN)     COMPUTE RWT ELEMENT DISPLACEMENT
         AL    R1,$RWT             POINT TO 1ST RWT ELEMENT          R4
         LA    R0,21               GET NUMBER OF RWL ELEMENTS
         L     WE,=A($RWL)         GET ADDRESS OF RWL
         SPACE 2
         USING RWLDSECT,WE         ESTABLISH RWL ADDRESSABILITY
         SPACE 1                                                     R4
NPLRND1  CLC   RWLNAME,1(WA)       COMPARE RWL NAME WITH DEVICE NUMBER
         BE    NPLRND2             BRANCH IF RWL ELEMENT FOUND
         LA    WE,RWLEND           GET ADDRESS OF NEXT RWL ELEMENT
         BCT   R0,NPLRND1          NO, TRY AGAIN
         B     NPLDNERR            INVALID DEVICE NAME
         SPACE 3                                                     R4
NPLRTERR L     R1,=A(NPLRTERM)     POINT TO REMOTE NUMBER ERROR MSG  R4
         B     NPLERMSG             AND BR TO ISSUE DIAGNOSTIC       R4
         SPACE 3
NPLRND2  AH    R1,RWLDISP          GET ADDRESS OF RWT ENTRY
         CLI   1(WA),C'P'          TEST DEVICE TYPE
         BE    NPLRNPXM            BRANCH IF REMOTE PRINTER OR PUNCH
         SPACE 1                                                     R4
         DROP  WE                  KILL RWL ADDRESSABILITY           R4
         TITLE 'HASP INITIALIZATION -- REMOTE TERMINAL READER PARAMETERC
                PROCESSING ROUTINE'
*                                  PARAMETER LIBRARY RNNN.RDM STATEMENT
*
         L     R0,=A(NPLRNRST)     GET ADDRESS OF SCAN TABLE         R4
         BAL   WE,NPLSSCAN         SCAN REMOTE READER SUB-PARAMETERS
         USING RWTDSECT,R1         ESTABLISH RWT ADDRESSABILITY
         SPACE 1                                                     R4
NPLRNR2  ICM   WE,1,RWTPRINT       TEST FOR PRINT ROUTING            R4
         BM    NPLRNR3             BR IF INDIRECT ROUTING            R4
         BNZ   NPLDVERR            ILLEGAL IF GREATER THAN 255       R4
         B     NPLRNR6             BR TO TEST PUNCH ROUTING          R4
         SPACE 1                                                     R4
NPLRNR3  NI    RWTFLAGS,255-DCTPRLCL  RESET SPECIAL LCL ROUTING FLAG R4
         SPACE 1                                                     R4
NPLRNR6  ICM   WE,1,RWTPUNCH       TEST FOR PUNCH ROUTING            R4
         BM    NPLRNR7             BR IF INDIRECT ROUTING            R4
         BNZ   NPLDVERR            ILLEGAL IF GREATER THAN 255       R4
         B     NPLRNR8             BR TO CONTINUE                    R4
         SPACE 1                                                     R4
NPLRNR7  NI    RWTFLAGS,255-DCTPULCL  RESET SPECIAL LCL ROUTING FLAG R4
         SPACE 1                                                     R4
NPLRNR8  CLI   RWTPRINC,15         TEST PRIORITY INCREMENT           R4
         BH    NPLDVERR            ILLEGAL IF GREATER THAN 15
         CLI   RWTPRLIM,15         TEST PRIORITY LIMIT
         BH    NPLDVERR            ILLEGAL IF GREATER THAN 15
         CLI   RWTJCLAS,C'A'       TEST DEFAULT JOB CLASS
         BL    NPLDVERR            ILLEGAL IF LESS THAN 'A'
         CLI   RWTMCLAS,C'A'       TEST DEFAULT MESSAGE CLASS
         BL    NPLDVERR            ILLEGAL IF LESS THAN 'A'
         B     NPLCOMNT            PROCESS AS COMMENT STATEMENT
         TITLE 'HASP INITIALIZATION -- REMOTE TERMINAL PRINT/PUNCH PARAC
               METER PROCESSING ROUTINE'
NPLRNPXM NULL                      PARAMETER LIBRARY RNNN.PXN STATEMENT
         L     R0,=A(NPLRPRST)     GET ADDRESS OF PRINT SCAN TABLE   R4
         CLI   2(WA),C'R'          TEST DEVICE TYPE
         BE    *+8                 BRANCH IF REMOTE PRINTER
         L     R0,=A(NPLRPUST)     GET ADDRESS OF PUNCH SCAN TABLE   R4
         BAL   WE,NPLSSCAN         SCAN SUB-PARAMETERS
         CLI   RWTDCPTN,99         TEST COMPACTION TABLE NUMBER     R41
         BH    NPLDVERR            ILLEGAL IF GREATER THAN 99       R41
         CLI   RWTLRECL,0          TEST FOR VALID LRECL        @OZ29180
         BNH   NPLDVERR            ILLEGAL IF LESS THAN 1      @OZ29180
         TM    RWTSFEAT,DCTPNDST   TEST FOR BASIC EXCHANGE     @OZ29180
         BO    NPLRNPX1            BRANCH IF NOT               @OZ29180
         CLI   RWTLRECL,FMHBXMRL   TEST VALID LRECL            @OZ29180
         BH    NPLDVERR            ILLEGAL IF GREATER THAN MAX @OZ29180
NPLRNPX1 ICM   WE,1,RWTROUTE       TEST ROUTE CODE             @OZ29180
         BM    NPLCOMNT            BR IF INDIRECT ROUTING            R4
         BNZ   NPLDVERR            ILLEGAL IF GREATER THAN 255       R4
         B     NPLCOMNT            PROCESS AS COMMENT STATEMENT
         DROP  R1                  DROP RWT ADDRESSABILITY     @OZ29180
         TITLE 'HASP INITIALIZATION -- SELECT SUBPARAMETER PROCESSING RC
               OUITNE'                                         @OZ29180
***************************************************************@OZ29180
*                                                              @OZ29180
*  NPLSELCT - SCAN THE SELECT SUBPARAMETER OF THE REMOTE       @OZ29180
*             PRINTER AND PUNCH INITIALIZATION STATEMENTS.     @OZ29180
*                                                              @OZ29180
*     CALLED BY NPLSSCAN                                       @OZ29180
*                                                              @OZ29180
*     REGISTERS UPON ENTRY:                                    @OZ29180
*                                                              @OZ29180
*         WC = R4 = ADDRESS OF RWT                             @OZ29180
*         WB = R3 = ADDRESS OF SCAN TABLE                      @OZ29180
*         WA = R2 = ADDRESS OF CURRENT CHARACTER               @OZ29180
*         WE = R6 = RETURN ADDRESS FOR THE NPLSCAN ROUTINE     @OZ29180
*         WF = R7 = RETURN ADDRESS IN NPLSSCAN                 @OZ29180
*                                                              @OZ29180
***************************************************************@OZ29180
         SPACE 2                                               @OZ29180
         USING RWTDSECT,WC         SHOW RWT ADDRESSABILITY     @OZ29180
         SPACE 1                                               @OZ29180
NPLSELCT CLI   0(WA),C'='          TEST CURRENT CHARACTER      @OZ29180
         BNE   NPLSVERR            ILLEGAL IF NOT EQUAL SIGN   @OZ29180
         BXH   WA,R14,NPLSSERR     SCAN TO NEXT CHARACTER      @OZ29180
         CLC   0(2,WA),=C'X'''     TEST NEXT 2 CHARACTERS      @OZ29180
         BNE   NPLSEL10            BRANCH IF NOT HEX           @OZ29180
         BXH   WA,R14,NPLSSERR     SCAN PAST                   @OZ29180
         BXH   WA,R14,NPLSSERR       NEXT TWO CHARACTERS       @OZ29180
         BAL   WD,NPLHEXTR         CONVERT TO HEX              @OZ29180
         CLR   WA,R15              TEST FOR END OF CARD        @OZ29180
         BH    NPLSSERR            BRANCH IF PAST END          @OZ29180
         CLI   0(WA),C''''         TEST FOR ENDING QUOTE       @OZ29180
         BNE   NPLSVERR            ILLEGAL IF MISSING          @OZ29180
         C     R0,=F'255'          INSURE ONLY 1 BYTE WORTH    @OZ29180
         BH    NPLSVERR            ILLEGAL IF NOT              @OZ29180
         STC   R0,RWTSEL           PUT MEDIA/SUBADDRESS IN RWT @OZ29180
         OI    RWTSEL,DCTPOUTB     MARK AS OUTBOUND DEVICE     @OZ29180
         BR    WF                  RETURN TO MAIN SCAN ROUTINE @OZ29180
         SPACE 2                                               @OZ29180
         USING NPLSLTAB,R1         SELECT TABLE ADDRESSABLITY  @OZ29180
         SPACE 1                                               @OZ29180
NPLSELEX CLC   0(*-*,WA),NPLSLMN   **** EXECUTED ****          @OZ29180
         SPACE 1                                               @OZ29180
NPLSEL10 SLR   WD,WD               ZERO WORK REGISTER          @OZ29180
         LA    R1,NPLSELMT-NPLSLTLN-1  R1 TO INDEX TABLE       @OZ29180
NPLSEL20 LA    R1,NPLSLTLN+1(R1,WD)    POINT TO NEXT ENTRY     @OZ29180
         CLI   0(R1),X'FF'         TEST FOR END OF TABLE       @OZ29180
         BE    NPLSVERR            ERROR IF NAME NOT IN TABLE  @OZ29180
         IC    WD,NPLSLLEN         GET NAME LENGTH FOR COMPARE @OZ29180
         EX    WD,NPLSELEX         COMPARE FOR DEVICE NAME     @OZ29180
         BNE   NPLSEL20            CONTINUE IF NOT END         @OZ29180
         EJECT                                                 @OZ29180
NPLSEL30 LA    WA,0(WD,WA)         POINT TO LAST CHAR IN NAME  @OZ29180
         CLR   WA,R15              CHECK FOR END OF CARD       @OZ29180
         BH    NPLSSERR            ERROR IF TOO FAR            @OZ29180
         MVC   RWTSEL,NPLSLMV      MOVE MEDIA VALUE TO RWT     @OZ29180
         OI    RWTSFEAT,DCTPNDST   ASSUME NOT BASIC/EXCHANGE   @OZ29180
         TM    NPLSLFLG,NPLSLBXC   TEST FOR BASIC/EXCHANGE     @OZ29180
         BZ    NPLSEL33            BRANCH NOT BASIC/EXCHANGE   @OZ29180
         NI    RWTSFEAT,255-DCTPNDST  INDICATE BASIC/EXCHANGE  @OZ29180
         DROP  R1                  KILL MEDIA TABLE BASE       @OZ29180
         SPACE 1                                               @OZ29180
NPLSEL33 CLI   1(WA),C','          TEST NEXT CHARACTER         @OZ29180
         BE    NPLSEL35            BRANCH IF COMMA             @OZ29180
         CLI   1(WA),C' '          TEST NEXT CHARACTER         @OZ29180
         BNE   NPLSEL40            BRANCH IF NOT BLANK         @OZ29180
NPLSEL35 OI    RWTSEL,FMHLDANY     SET SUBADDRESS TO ANY       @OZ29180
         BR    WF                  RETURN TO MAIN SCAN ROUTINE @OZ29180
         SPACE 1                                               @OZ29180
NPLSEL40 BXH   WA,R14,NPLSSERR     SCAN TO NEXT CHARACTER      @OZ29180
         LR    WD,WE               SAVE 1ST LEVEL RETURN ADDR  @OZ29180
         BAL   WE,NPLDCONV         CONVERT DEV NO. TO BINARY   @OZ29180
         B     NPLSVERR            +0 ILLEGAL VALUE            @OZ29180
         LR    WE,WD               +4 RESTORE 1ST LEVEL RETURN @OZ29180
         LTR   R1,R1               TEST DEVICE NUMBER          @OZ29180
         BZ    NPLSVERR            ILLEGAL IF 0                @OZ29180
         CH    R1,=H'15'           TEST FOR MAX DEVICE NUMBER  @OZ29180
         BH    NPLSVERR            ILLEGAL IF NOT LESS THAN 16 @OZ29180
NPLSEL45 BCTR  R1,0                GET SUBADDRESS              @OZ29180
         IC    R0,RWTSEL           GET MEDIA VALUE             @OZ29180
         OR    R1,R0               INCLUDE SUBADDRESS          @OZ29180
         STC   R1,RWTSEL           PUT MEDIA/SUBADDRESS IN RWT @OZ29180
         BCTR  WA,0                BACK UP ONE CHARACTER       @OZ29180
         BR    WF                  RETURN TO MAIN SCAN ROUTINE @OZ29180
         SPACE 1                                               @OZ29180
         DROP  WC                  DROP RWT ADDRESSIBILITY     @OZ29180
         EJECT                                                 @OZ29180
NPLSELMT DS    0F                  MEDIA SELECT TABLE          @OZ29180
         DC    AL1(4),AL1(DCTPOUTB+FMHPRINT),AL1(0),C'PRINT'   @OZ29180
         DC    AL1(4),AL1(DCTPOUTB+FMHCARD),AL1(0),C'PUNCH'    @OZ29180
         DC    AL1(3),AL1(DCTPOUTB+FMHEXCH),AL1(0),C'EXCH'     @OZ29180
         DC    AL1(4),AL1(DCTPOUTB+FMHEXCH),AL1(NPLSLBXC)      @OZ29180
         DC    C'BASIC'                                        @OZ29180
         DC    X'FF'               END-OF-TABLE                @OZ29180
         SPACE 5                                               @OZ29180
NPLSLTAB DSECT                     MEDIA SELECT TABLE DSECT    @OZ29180
NPLSLLEN DS    AL1                 DEVICE NAME LENGTH-1        @OZ29180
NPLSLMV  DS    AL1                 MEDIA VALUE                 @OZ29180
NPLSLFLG DS    AL1                 FLAG BYTE                   @OZ29180
NPLSLTLN EQU   *-NPLSLTAB          LENGTH OF FIXED SECTION     @OZ29180
NPLSLMN  EQU   *                   MEDIA NAME VARIABLE LENGTH  @OZ29180
         SPACE 1                                               @OZ29180
*                          NPLSLFLG                            @OZ29180
         SPACE 1                                               @OZ29180
NPLSLBXC EQU   B'10000000'         BASIC EXCHANGE MEDIA        @OZ29180
         SPACE 1                                               @OZ29180
HASPINIT CSECT                                                 @OZ29180
         TITLE 'HASP INITIALIZATION -- REMOTE DESTINATION PARAMETER PROC
               CESSING ROUTINE'                                @OZ29180
NPLDEST  NULL                      PARAMETER LIBRARY DESTID    @OZ29180
         LA    WA,6(,WA)           PT TO BLANK AFTER 'DESTID'  @OZ29180
         BXH   WA,R14,NPLSSERR     POINT TO NEXT CHARACTER     @OZ29180
         LA    R1,NPLDSAVE         USE SAVE AREA AS NDQ        @OZ29180
         SPACE 1                                               @OZ29180
         USING NDQDSECT,R1         PROVIDE NDQ ADDRESSABILITY  @OZ29180
         SPACE 1                                               @OZ29180
         XC    NDQ,NDQ             CLEAR NDQ AREA                    R4
         L     R0,=A(NPLDESST)     GET ADDRESS OF SCAN TABLE         R4
         BAL   WE,NPLSSCAN         SCAN SUBPARAMETERS                R4
         OC    NDQNAME,NDQNAME     TEST FOR NAME                     R4
         BZ    NPLSSERR            ILLEGAL IF NOT PROVIDED           R4
         CLI   NDQNAME,C'0'        RETEST NAME                       R4
         BNL   NPLDVERR            ILLEGAL IF 1ST CHARACTER NUMERIC  R4
         CLC   NDQDEST,=CL8'LOCAL' TEST DESTINATION                  R4
         BE    NPLDESS             BR IF 'LOCAL'                     R4
         CLI   NDQDEST,C'U'        TEST FOR UNIT SPECIFICATION       R4
         BE    NPLDESD             BR IF YES                         R4
         CLI   NDQDEST,C'R'        TEST FOR REMOTE SPECIFICATION     R4
         BNE   NPLDVERR            BR IF ILLEGAL DEST                R4
         SPACE 1                                                     R4
NPLDESD  CLI   NDQDEST+1,C'0'      TEST 2ND CHARACTER                R4
         BNH   NPLDVERR            ILLEGAL IF ALPHA OR LEADING ZERO  R4
         MVC   NPLLWORK,NDQDEST+2  MOVE REMAINING DEST TO WORK AREA  R4
         LA    R0,3                MAX REMAINING DIGITS        @OZ18420
         SPACE 1                                                     R4
NPLDESN  CLI   NPLLWORK,C' '       TEST FOR END OF DEST              R4
         BE    NPLDESS             BR IF YES                         R4
         CLI   NPLLWORK,C'0'       TEST FOR NUMERIC                  R4
         BL    NPLDVERR            ILLEGAL IF NO                     R4
         MVC   NPLLWORK,NPLLWORK+1 SHIFT LEFT 1 CHARACTER            R4
         BCT   R0,NPLDESN          BR TO TEST NEXT CHARACTER         R4
         SPACE 1                                                     R4
         B     NPLDVERR            ILLEGAL IF MORE THAN 3 DIGITS     R4
         SPACE 1                                                     R4
         DROP  R1                  KILL NDQ ADDRESSABILITY           R4
         EJECT                                                       R4
NPLDESS  LA    WB,$NDQ-(NDQNDQ-NDQ)  PREPARE TO SCAN DEST'N ELEMENTS R4
         L     WC,$NDQ             POINT TO FIRST ELEMENT            R4
         SPACE 1                                                     R4
         USING NDQDSECT,WC         PROVIDE NDQ ADDRESSABILITY        R4
         SPACE 1                                                     R4
NPLDESC  CLC   NDQNAME,NDQNAME-NDQ+NPLDSAVE  COMPARE NAMES           R4
         BE    NPLDESR             BR IF EQUAL                       R4
         BH    NPLDESI             INSERT IF OLD IS HIGH             R4
         LR    WB,WC               PULL HEADER UP ONE                R4
         ICM   WC,15,NDQNDQ        POINT TO NEXT NDQ                 R4
         BNZ   NPLDESC             LOOP IF VALID ADDRESS             R4
         SPACE 1                                                     R4
NPLDESI  LA    R0,NDQSIZ           GET STORAGE                       R4
         ICM   R0,8,=AL1(229)       FOR DESTINATION                  R4
         GETMAIN R,LV=(0)            QUEUE ELEMENT                   R4
         ST    WC,NDQNDQ-NDQ(,R1)  SET POINTER TO NEXT               R4
         LR    WC,R1               COPY ADDRESS                      R4
         SPACE 1                                                     R4
NPLDESR  MVC   NDQDATA,NDQDATA-NDQ+NPLDSAVE INSERT NEW DATA          R4
         ST    WC,NDQNDQ-NDQ(,WB)  PLACE ON QUEUE                    R4
         B     NPLCOMNT            PROCESS PARM CARD AS COMMENT      R4
         SPACE 1                                                     R4
         DROP  WC                  KILL NDQ ADDRESSABILITY           R4
         SPACE 3                                                     R4
NDQDSECT DSECT                     DESTINATION QUEUE ELEMENT DSECT   R4
NDQNDQ   DS    A                   CHAIN FIELD                       R4
NDQDATA  DS    0CL16               DATA PORTION OF DESTINATION       R4
NDQNAME  DS    CL8                 DESTINATION NAME                  R4
NDQDEST  DS    CL8                 NATIVE SPECIFICATION              R4
         DS    0D                  ENSURE MULTIPLE OF 8 BYTES        R4
NDQSIZ   EQU   *-NDQDSECT          LENGTH OF QUEUE ELEMENT           R4
NDQ      EQU   NDQDSECT,NDQSIZ     ALTERNATE QUEUE ELEMENT NAME      R4
         SPACE 1                                                     R4
HASPINIT CSECT                     END OF NDQ DSECT                  R4
         TITLE 'HASP INITIALIZATION -- PARAMETER STATEMENT DEVICE LOOKUC
               P SUBROUTINE'                                        R41
NPLDSCAN NULL                      DEVICE LOOKUP SUBROUTINE
         MVC   NPLSVAL(8),0(WA)    MOVE DEVICE NAME TO WORK AREA
         CLI   NPLSVAL+5,C' '      TEST SIXTH CHARACTER
         BNE   *+8                 BRANCH IF NOT BLANK
         MVI   NPLSVAL+6,C' '      YES, BLANK OUT SEVENTH CHARACTER
         CLI   NPLSVAL+6,C' '      TEST SEVENTH CHARACTER
         BNE   *+8                 BRANCH IF NOT BLANK
         MVI   NPLSVAL+7,C' '      YES, BLANK OUT EIGHTH CHARACTER
         CLI   NPLSVAL+7,C' '      TEST EIGHTH CHARACTER
         BE    *+12                BRANCH IF BLANK
         CLI   8(WA),C' '          TEST NEXT CHARACTER
         BNE   NPLDNERR            INVALID IF NOT BLANK
         SPACE 1
         LA    R1,$DCTPOOL-(DCTCHAIN-DCTDSECT)  FAKE FIRST DCT
         SPACE 1                                                     R4
         USING DCTDSECT,R1         ESTABLISH DCT ADDRESSABILITY
         SPACE 1                                                     R4
NPLDSCN1 ICM   R1,7,DCTCHAIN+1     GET ADDRESS OF NEXT DCT
         BZ    NPLDNERR            ERROR IF DEVICE NOT FOUND
         CLC   DCTDEVN,NPLSVAL     COMPARE DEVICE NAMES
         BNE   NPLDSCN1            BRANCH IF NAMES DO NOT MATCH
         SPACE 1
         B     NPLSSCAN            SCAN DEVICE SUB-PARAMETERS
         SPACE 1                                                     R4
         DROP  R1                  DROP DCT ADDRESSABILITY
         SPACE 5
NPLDNERR NULL                      INVALID DEVICE NAME
         L     R1,=A(NPLDNERM)     POINT TO INVALID DEV NAME MSG     R4
         B     NPLERMSG             AND BR TO ISSUE DIAGNOSTIC       R4
         SPACE 5
NPLDVERR NULL                      HASPPARM DEVICE VALUE ERROR
         MVC   0(L'NPLDSAVE,R1),NPLDSAVE  RESTORE CONTROL BLOCK
         L     R1,=A(NPLDVERM)     POINT TO INVALID DEV VALUE MSG    R4
         B     NPLERMSG             AND BR TO ISSUE DIAGNOSTIC       R4
         TITLE 'HASP INITIALIZATION -- MISCELLANEOUS INITIALIZATION PARC
               AMETER PROCESSING ROUTINES'
NPLSTCMC NULL                      PARAMETER LIBRARY STCMCLAS STATEMENT
         L     R1,=A(NSTCMCLS)     GET ADDRESS OF STC MSGCLASS
         B     NPLTSUM1            UTILIZE COMMON CODE
         SPACE 3                                                     R4
NPLTSUMC NULL                      PARAMETER LIBRARY TSUMCLAS STATEMENT
         L     R1,=A(NTSUMCLS)     GET ADDRESS OF TSU MSGCLASS
         SPACE 2
NPLTSUM1 CLI   9(WA),C'A'          TEST MSGCLASS
         BL    NPLCHERR            INVALID IF LESS THAN 'A'
         BAL   WE,NPLCCOM1         EXTRACT CHARACTER                R41
         B     NPLCOMNT            THEN PROCESS AS COMMENT STATEMENT R4
         SPACE 2                                                     R4
NPLCCOM1 LA    WA,8(,WA)           STEP OVER NAME FIELD
         CLI   0(WA),C'='          TEST NEXT CHARACTER
         BNE   NPLSSERR            INVALID IF NOT EQUAL SIGN
         BXH   WA,R14,NPLSSERR     ADVANCE TO NEXT CHARACTER
         CLI   0(WA),C' '          TEST DATA CHARACTER
         BE    NPLCHERR            INVALID IF BLANK
         CLI   1(WA),C' '          TEST TERMINATOR CHARACTER         R4
         BNE   NPLCHERR            ILLEGAL IF NOT BLANK              R4
         MVC   0(1,R1),0(WA)       SET PARAMETER CHARACTER
         BR    WE                  THEN RETURN                      R41
         EJECT                                                       R4
NPLHSSSM NULL                      PARAMETER LIBRARY HASPSSSM STMNT  R4
         MVI   C'.'(WC),1          DISALLOW PERIOD AS LEGAL CHAR    R41
         BAL   WC,NPLID            EXTRACT PROGRAM NAME             R41
         CLI   NPLWORK,C'0'        TEST 1ST CHARACTER               R41
         BNL   NPLCHERR            BR IF NUMBER TO ISSUE DIAGNOSTIC R41
         LOAD  EPLOC=NPLWORK,ERRET=NPLHSERR  LOCATE HASPSSSM        R41
         MVC   NPLSSSM,NPLWORK     SAVE PROGRAM NAME                R41
         L     R1,$HASPMAP         POINT TO HASP MODULE MAP          R4
         ST    R0,MAPSSSMA-MAPDSECT(,R1)  SET ADDR FOR REPPING       R4
         DELETE EPLOC=NPLSSSM      DELETE HASPSSSM                  R41
         B     NPLCOMNT            PROCESS PARM CARD AS COMMENT      R4
         SPACE 1                                                    R41
NPLHSERR L     R1,=A(NPLHSERM)     POINT TO DIAGNOSTIC              R41
         MVC   NPLHSNAM-NPLHSERM(,R1),NPLWORK  SET PGM NAME         R41
         B     NPLERMSG            BR TO ISSUE DIAGNOSTIC           R41
         SPACE 1                                                    R41
NPLSSSM  DC    CL8'HASPSSSM'       HASPSSSM PROGRAM NAME            R41
         EJECT                                                      R41
NPLCON   NULL                      PARAMETER LIBRARY CONSOLE  STATEMENT
         OI    NPLFLAGS,NPLCONSL   INDICATE CONSOLE MODE            R41
         B     NPLCOMNT            BR TO LIST/LOG STATEMENT         R41
         SPACE 3                                                    R41
NPLLISTC NULL                      PARAMETER LIBRARY LIST     STMNT  R4
         NI    NPLFLAGS,255-NPLNOLST  RESET 'NOLIST' SPECIFICATION   R4
         B     NPLCOMNT            PROCESS PARM CARD AS COMMENT      R4
         SPACE 3                                                     R4
NPLNLIST NULL                      PARAMETER LIBRARY NOLIST   STMNT  R4
         OI    NPLFLAGS,NPLNOLST   SET 'NOLIST' SPECIFICATION        R4
         B     NPLCOMNT            BR TO LIST/LOG STATEMENT         R41
         SPACE 3                                                    R41
NPLLOGC  NULL                      PARAMETER LIBRARY LOG      STATEMENT
         NI    NPLFLAGS,255-NPLNOLOG  RESET 'NOLOG' SPECIFICATION   R41
         B     NPLCOMNT            BR TO LIST/LOG STATEMENT         R41
         SPACE 3                                                    R41
NPLNLOG  NULL                      PARAMETER LIBRARY NOLOG    STATEMENT
         OI    NPLFLAGS,NPLNOLOG   SET 'NOLOG' SPECIFICATION        R41
         B     NPLCOMNT            BR TO LIST/LOG STATEMENT         R41
         SPACE 5                                                     R4
NPLSSERR NULL                      PARAMETER LIBRARY SYNTAX ERROR    R4
         L     R1,=A(NPLSSERM)     POINT TO INVALID STATEMENT MSG    R4
         SPACE 1                                                     R4
NPLERMSG MVC   NDIAG,0(R1)         MOVE DIAGNOSTIC TO PARM CARD     R41
         TM    NPLFLAGS,NPLCONSL   ARE WE IN CONSOLE MODE...        R41
         BO    NPLCOMNT            BR IF YES                        R41
         OI    NPLFLAGS,NPLERROR   INDICATE HASPPARM ERROR          R41
         SPACE 1                                                     R4
NPLCOMNT BAL   LINK,NPLLIST        LIST CONTROL STATEMENT            R4
         B     NPLNEXT             GET NEXT PARAMETER LIBRARY STMNT  R4
         TITLE 'HASP INITIALIZATION -- PARAMETER STATEMENT DECIMAL CONVC
               ERSION SUBROUTINE'                                   R41
***********************************************************************
*                                                                     *
*        NPLDCONV -- EXTRACT NUMBER OF 8 DIGITS OR LESS               *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
NPLDCNVT CLI   8(WA),C'='          TEST NEXT CHARACTER               R4
         BNE   NPLSSERR            INVALID IF NOT EQUAL SIGN         R4
         LA    WA,9(,WA)           STEP OVER KEYWORD                 R4
         SPACE 1                                                     R4
NPLDCONV CLR   WA,R15              TEST CURRENT COLUMN               R4
         BH    NPLSSERR            ILLEGAL IF MORE THAN COLUMN 71
         CLI   0(WA),X'F0'         TEST FIRST CHARACTER
         BL    NPLDCERR            ILLEGAL IF LESS THAN X'F0'
         SR    R0,R0               INITIALIZE
         LR    R1,R0                REGISTERS
         SPACE 1                                                     R4
NPLDCON1 CLI   0(WA),X'F9'         TEST NEXT CHARACTER
         BH    NPLDCERR            ILLEGAL IF GREATER THAN X'F9'
         LTR   R0,R0               TEST NUMBER SO FAR                R4
         BMR   WE                  RETURN IF ALREADY 8 DIGITS TO +0  R4
         SLDL  R0,8                SHIFT AND
         IC    R1,0(,WA)            ADD CURRENT CHARACTER
         BXH   WA,R14,NPLDCON2     GET NEXT CHARACTER
         CLI   0(WA),X'F0'         TEST
         BNL   NPLDCON1            BRANCH IF NUMERIC
         SPACE 1                                                     R4
NPLDCON2 STM   R0,R1,NPLLWORK      CONVERT
         PACK  NPLLWORK,NPLLWORK    EBCDIC TO
         CVB   R1,NPLLWORK           BINARY
         B     4(,WE)                 AND RETURN TO +4               R4
         SPACE 2                                                     R4
NPLDCERR NULL                      ILLEGAL DECIMAL VALUE
         L     R1,=A(NPLDCERM)     POINT TO ILLEGAL DEC VALUE MSG    R4
         B     NPLERMSG             AND BR TO ISSUE DIAGNOSTIC @OZ29180
         TITLE 'HASP INITAILIZATION -- PARAMETER STATEMENT HEXIDECIMAL C
               CONVERSION ROUTINE'                             @OZ29180
***************************************************************@OZ29180
*                                                              @OZ29180
*    NPLHEXTR  - EXTRACT HEX DIGITS (8 OR LESS)                @OZ29180
*                                                              @OZ29180
*             INPUT  - WA = ADDRESS OF 1ST HEX DIGIT           @OZ29180
*                                                              @OZ29180
*             OUTPUT - R0 = HEXIDECIMAL NUMBER                 @OZ29180
*                                                              @OZ29180
***************************************************************@OZ29180
         SPACE 2                                               @OZ29180
NPLHEXTR CLR   WA,R15              TEST FOR END OF CARD        @OZ29180
         BH    NPLSSERR            BRANCH IF PAST END          @OZ29180
         ST    WD,NPLHEXSV         SAVE RETURN REGISTER        @OZ29180
         SLR   R0,R0               R0 TO ACCUMULATE HEX DIGITS @OZ29180
         SLR   R1,R1               CLEAR WORK REGISTER         @OZ29180
         LA    WD,8                TRANSLATE UPTO 8 HEX DIGITS @OZ29180
         SPACE 1                                               @OZ29180
NPLHEX05 CLI   0(WA),C'A'          TEST FOR VALID HEX          @OZ29180
         BL    NPLHEX10            BRANCH IF INVALID           @OZ29180
         MVC   NPLHEXCH,0(WA)      MOVE CHAR TO WORK AREA      @OZ29180
         TR    NPLHEXCH,NREPTTAB   TRANSLATE TO A HEX DIGIT    @OZ29180
         CLI   NPLHEXCH,X'0F'      TEST FOR VALID HEX DIGIT    @OZ29180
         BH    NPLHEX10            BRANCH IF INVALID           @OZ29180
         IC    R1,NPLHEXCH         GET HEX DIGIT IN WORK REG   @OZ29180
         SLL   R0,4                MAKE ROOM FOR DIGIT         @OZ29180
         OR    R0,R1               PLACE DIGIT IN R0           @OZ29180
         BXH   WA,R14,NPLHEX15     SCAN TO NEXT CHARACTER      @OZ29180
         BCT   WD,NPLHEX05         TRANSLATE NEXT BYTE         @OZ29180
         B     NPLHEX15            8 BYTES TRANSLATED          @OZ29180
         SPACE 1                                               @OZ29180
NPLHEX10 C     WD,=F'8'            ANY VALID HEX DIGITS FOUND  @OZ29180
         BNL   NPLHXERR            ERROR IF NONE FOUND         @OZ29180
NPLHEX15 L     WD,NPLHEXSV         RESTORE RETURN ADDRESS      @OZ29180
         B     0(,WD)              RETURN TO CALLER            @OZ29180
         SPACE 2                                               @OZ29180
NPLHXERR L     R1,=A(NPLHXERM)     GET INVALID HEX MESSAGE     @OZ29180
         B     NPLERMSG            GO ISSUE MESSAGE            @OZ29180
         TITLE 'INIT     HASP INITIALIZATION -- COMPACTION STRING SCAN X
               SUBROUTINES'                                         R41
***********************************************************************
*                                                                     *
*        NPLASCAN -- SCAN AND CONVERT COMPACT= POSITIONAL PARMS       *
*                    EXIT: WD=HEX CHAR, R0=BIN CHAR (NEG IF INVLD)    *
*                                                                     *
***********************************************************************
         SPACE 1                                                    R41
NPLASCAN CLC   0(2,WA),=CL3', '    IF NOT CONTINUATION              R41
         BNE   NPLA0                GO SCAN FIELD                   R41
         CLI   2(WA),C','          IF NOT SPECIAL CASE OF -, ,-     R41
         BNE   NPLACONT             GO GET CONTINUATION CARD        R41
         SPACE 1                                                    R41
NPLA0    LNR   R0,WA               SET R0 INVALID INITIALLY         R41
         XR    WD,WD               CLEAR REG FOR CHAR               R41
         CLI   2(WA),C','          IF 1 CHAR FIELD                  R41
         BE    NPLA1                GO LOAD IT                      R41
         CLI   2(WA),C' '          IF NOT 1 CHAR FIELD              R41
         BNE   NPLA2                GO TEST FOR 2 CHAR FIELD        R41
         SPACE 1                                                    R41
NPLA1    IC    WD,1(,WA)           LOAD HEX CHAR                    R41
         CLI   1(WA),C'0'          IF FIELD                         R41
         BL    NPLARTN              IS NON NUMERIC                  R41
         CLI   1(WA),C'9'            LEAVE R0                       R41
         BH    NPLARTN                AS INVALID                    R41
         LR    R0,WD               GET                              R41
         SLL   R0,28                BINARY                          R41
         SRL   R0,28                 CHAR                           R41
         SPACE 1                                                    R41
NPLARTN  LA    WA,2(,WA)           POINT TO NEXT FIELD              R41
         BR    WE                  RETURN                           R41
         SPACE 1                                                    R41
NPLA2    CLI   3(WA),C','          IF 2 CHAR FIELD                  R41
         BE    NPLAC2               GO CONVERT IT                   R41
         CLI   3(WA),C' '          IF NOT 2 CHAR FIELD              R41
         BNE   NPLDVERR             GO ISSUE ERROR MSG              R41
         SPACE 1                                                    R41
NPLAC2   CLI   1(WA),C'A'          IF LESS THAN A                   R41
         BL    NPLDVERR             GO ISSUE ERROR MSG              R41
         CLI   1(WA),C'F'          IF MORE THAN F                   R41
         BH    NPLAFOX1             GO TEST FOR 1-9                 R41
         IC    WD,1(,WA)           PICK UP ALPHA CHAR               R41
         LA    WD,9(,WD)           CHANGE RIGHTMOST 4 BITS TO A-F   R41
         B     NPLASHF1            GO POSITION 4-BIT FIELD          R41
         EJECT                                                      R41
NPLAFOX1 CLI   1(WA),C'0'          IF LESS THAN 0                   R41
         BL    NPLDVERR             GO ISSUE ERROR MSG              R41
         CLI   1(WA),C'9'          IF MORE THAN 9                   R41
         BH    NPLDVERR             GO ISSUE ERROR MSG              R41
         IC    WD,1(,WA)           PICK UP NUMERIC CHAR             R41
         LR    R0,WD               GET COPY                         R41
         SLL   R0,28               CONVERT                          R41
         SRL   R0,28                TO                              R41
         MH    R0,=H'10'             BINARY                         R41
         SPACE 1                                                    R41
NPLASHF1 SLL   WD,28               POSITION                         R41
         SRL   WD,24                4-BIT FIELD                     R41
         CLI   2(WA),C'A'          IF LESS THAN A                   R41
         BL    NPLDVERR             GO ISSUE ERROR MSG              R41
         CLI   2(WA),C'F'          IF MORE THAN F                   R41
         BH    NPLAFOX2             GO TEST FOR 1-9                 R41
         IC    LINK,2(,WA)         PICK UP ALPHA CHAR               R41
         LA    LINK,9(,LINK)       CHANGE RIGHTMOST BITS TO A-F     R41
         LNR   R0,WA               SET R0 INVALID                   R41
         B     NPLASHF2            GO POSITION RIGHTMOST 4-BITS     R41
         SPACE 1                                                    R41
NPLAFOX2 CLI   2(WA),C'0'          IF LESS THAN 0                   R41
         BL    NPLDVERR             GO ISSUE ERROR MSG              R41
         CLI   2(WA),C'9'          IF MORE THAN 9                   R41
         BH    NPLDVERR             GO ISSUE ERROR MSG              R41
         IC    LINK,2(,WA)         PICK UP NUMERIC CHAR             R41
         SPACE 1                                                    R41
NPLASHF2 SLL   LINK,28             COMBINE                          R41
         SRL   LINK,28              TWO 4-BIT                       R41
         AR    WD,LINK               FIELDS                         R41
         LTR   R0,R0               IF R0 IS INVALID                 R41
         BM    NPLADD2              LEAVE IT INVALID                R41
         AR    R0,LINK             R0 IS A BINARY CHAR              R41
         SPACE 1                                                    R41
NPLADD2  LA    WA,3(,WA)           POINT TO NEXT FIELD              R41
         BR    WE                  RETURN                           R41
         SPACE 1                                                    R41
NPLACONT STM   R1,R6,NPLASAVE      SAVE STATUS                      R41
         BAL   LINK,NPLLIST        LIST CURRENT CARD                R41
         BAL   LINK,NPLGET         GET NEXT CARD                    R41
         B     NPLDVERR            IF EOF, GO ISSUE ERROR MSG +0    R41
         LM    R1,R6,NPLASAVE      RESTORE STATUS             +4    R41
         LA    WA,NCARD-2          SEARCH                           R41
         LA    R14,1                FOR                             R41
         LA    R15,NCARD+70          START                          R41
NPLASCNB BXH   WA,R14,NPLDVERR        OF                            R41
         CLI   1(WA),C' '              NEXT                         R41
         BE    NPLASCNB                 FIELD                       R41
         B     NPLA0               GO SCAN FIELD                    R41
         SPACE 1                                                    R41
NPLASAVE DS    6F                  SAVES STATUS REGS                R41
         EJECT                                                      R41
***********************************************************************
*                                                                     *
*        NPLDCALC -- CALC DISPL AND ATTRIB OF NEXT COMPACTION CHAR    *
*                                                                     *
***********************************************************************
         SPACE 1                                                    R41
         USING CPTDSECT,R1                                          R41
         SPACE 1                                                    R41
NPLDCALC CH    WC,=X'000F'         IF LAST VALID CHAR               R41
         BE    NPLDOUT              GO TEST FOR END OF STRING       R41
         CLI   CPTNMAST,16         IF NOT SPECIAL 16 MASTERS CASE,  R41
         BNE   NPLDCAL1             GO CALC NEXT DISPLACEMENT       R41
         CH    WC,=X'00FF'         IF LAST VALID CHAR               R41
         BE    NPLDOUT              GO TEST FOR END OF STRING       R41
         SPACE 1                                                    R41
NPLDCAL1 SRDL  WC,4                SEPARATE OLD DISPLACEMENT        R41
         SRL   WD,28                INTO TWO 4-BIT DIGITS: ROW,COL  R41
         LA    WD,1(,WD)           INCREMENT COLUMN DIGIT BY 1      R41
         CLM   WD,1,CPTNMAST       IF NOT PAST MASTER CHARS         R41
         BL    NPLDCAL2             LEAVE ATTRIBUTE AS IS           R41
         LA    WB,CPTNMST          SWITCH TO NONMASTER ATTRIBUTE    R41
         SPACE 1                                                    R41
NPLDCAL2 CH    WD,=H'16'           IF NOT TOO MANY COLUMNS          R41
         BL    NPLDCOMB             GO FORM NEW DISPLACEMENT        R41
         BCTR  WC,0                NEXT ROW                         R41
         XR    WD,WD               FIRST COLUMN                     R41
         CLM   WC,1,CPTNMAST       IF ROW HIGHER THAN NUM MASTERS   R41
         BNL   NPLDCOMB             LEAVE AT FIRST COLUMN           R41
         IC    WD,CPTNMAST         SHIFT COLUMN PAST NUM MASTERS    R41
         SPACE 1                                                    R41
NPLDCOMB SLL   WC,4                COMBINE ROW AND                  R41
         AR    WC,WD                COLUMN IN 1 BYTE                R41
         B     NPLALOOP            RETURN NORMALLY                  R41
         SPACE 1                                                    R41
NPLDOUT  CLI   0(WA),C' '          IF MORE CHARS IN FIELD           R41
         BNE   NPLDVERR             GO ISSUE ERROR MSG              R41
         B     NPLAOUT             RETURN, CPT FINISHED             R41
         SPACE 1                                                    R41
         DROP  R1                                                   R41
         TITLE 'HASP INITIALIZATION -- PARAMETER STATEMENT SUB-PARAMETEC
               R SCAN SUBROUTINE'                                   R41
NPLSSCAN NULL                      SUB-PARAMETER SCAN SUBROUTINE
         MVC   NPLDSAVE,0(R1)      SAVE CURRENT FIELD DATA           R4
         STM   R0,R1,NPLSCTAB      SAVE REGISTERS
         LA    WA,NCARD-2          RESET CARD COLUMN
         SPACE 1                                                     R4
         BXH   WA,R14,NPLSSERR     SEARCH FOR
         CLI   1(WA),C' '           START OF
         BE    *-8                   NAME FIELD
         SPACE 1                                                     R4
         BXH   WA,R14,NPLSSERR     SEARCH FOR
         CLI   1(WA),C' '           END OF
         BNE   *-8                   NAME FIELD
         SPACE 1                                                     R4
NPLSSC01 BXH   WA,R14,NPLSSC25     SEARCH FOR
         CLI   1(WA),C' '           START OF
         BE    *-8                   SUB-PARAMETERS
         SPACE 1                                                     R4
NPLSSC02 MVI   NPLSFILL,C' '       PRESET VALUE FIELD
         MVC   NPLSVAL,NPLSFILL     TO BLANKS
         MVI   NPLSSC22+1,X'F0'    SET FOR ALPHAMERIC SCAN           R4
         L     R1,=A(NPLTRT2)      POINT TO ALPHAMERIC XLATE TABLE   R4
         MVI   C'-'(R1),0          ALLOW HYPHEN AND SLASH            R4
         MVI   C'/'(R1),0           AS LEGAL CHARACTERS              R4
         BAL   WD,NPLSSC20         SCAN KEYWORD
         B     NPLSKERR            BRANCH IF ILLEGAL KEYWORD
         CLI   NPLSNAME+7,C' '     TEST FOR NULL KEYWORD
         BE    NPLSSC20            IGNORE NULL KEYWORDS
         CLI   NPLSNAME-1,C' '     TEST FOR OVERFLOW
         BNE   NPLSKERR            BRANCH IF MORE THAN 8 CHARACTERS
         SPACE 1                                                     R4
         L     WB,NPLSCTAB         GET ADDRESS OF SCAN TABLE
         SPACE 1                                                     R4
         USING NSCANTBL,WB         ESTABLISH SCAN TABLE ADDRESSABILITY
         SPACE 1                                                     R4
NPLSSC03 CLC   NPLSNAME,NSCANAME   COMPARE TABLE KEYWORD
         BE    NPLSSC04            BRANCH IF KEYWORD MATCHES
         LA    WB,NSCANEXT         GET ADDRESS OF NEXT ENTRY
         CLI   0(WB),X'FF'         TEST FOR END OF SCAN TABLE
         BNE   NPLSSC03            CONTINUE IF NOT END OF TABLE
         B     NPLSKERR            ERROR IF KEYWORD NOT FOUND
         SPACE 1                                                     R4
NPLSSC04 L     WC,NPLSOTAB         GET ADDRESS OF OUTPUT TABLE
         SPACE 1                                               @OZ29180
         TM    NSCANFL2,NSCFLRTN   TEST FOR SPECIAL ROUTINE    @OZ29180
         BZ    NPLSSCNR            BRANCH IF NONE              @OZ29180
         ICM   R1,7,NSCANRTN       GET ROUTINE ADDRESS         @OZ29180
         BALR  WF,R1               GOTO ROUTINE                @OZ29180
         B     NPLSSC02            GET NEXT SUBPARAMETER       @OZ29180
         SPACE 1                                               @OZ29180
NPLSSCNR AH    WC,NSCANDSP         ADD DISPLACEMENT FOR SUBPRM @OZ29180
         TM    NSCANFLG,NSCFLMSK+NSCFLCOM  TEST OPTION BYTE
         BZ    NPLSSC05            BRANCH IF VALUE REQUIRED
         IC    R1,NSCANMSK         GET MASK FROM SCAN TABLE
         LA    WD,NPLSOI           ASSUME 'OR' OPERATION
         TM    NSCANFLG,NSCFLCOM   TEST OPTION BYTE
         BZ    *+12                BRANCH IF NO COMPLEMENTATION
         LCR   R1,R1               COMPLEMENT MASK
         BCTR  R1,0                CONVERT TO ONE'S COMPLEMENT
         LA    WD,NPLSNI           GET 'AND OPERATION
         EX    R1,0(,WD)           PERFORM INDICATED OPERATION
         B     NPLSSC02            GET NEXT SUB-FIELD
         SPACE 2
NPLSSC05 CLI   0(WA),C'='          TEST CURRENT CHARACTER
         BNE   NPLSVERR            ILLEGAL IF NOT EQUAL SIGN
         L     R1,=A(NPLTRT2)      POINT TO ALPHAMERIC XLATE TABLE   R4
         MVI   C'-'(R1),1          DISALLOW HYPHEN AND SLASH         R4
         MVI   C'/'(R1),1           AS LEGAL CHARACTERS              R4
         MVC   NPLSNAME,NPLSFILL   BLANK OUT NAME FIELD
         TM    NSCANFLG,NSCFLBLK   TEST OPTION BYTE
         BO    NPLSSC06            BRANCH IF BLANK-FILL INDICATED
         MVI   NPLSFILL,C'0'       ASSUME EBCDIC-ZERO-FILL
         TM    NSCANFLG,NSCFLZER   TEST OPTION BYTE
         BO    *+8                 BRANCH IF EBCDIC-ZERO-FILL
         MVI   NPLSFILL,0          BINARY-ZERO-FILL
         MVC   NPLSVAL,NPLSFILL    PRESET VALUE FIELD TO ZEROES
         SPACE 2
NPLSSC06 TM    NSCANFLG,NSCFLNUM+NSCFLBIN  TEST OPTION BYTE
         BZ    *+8                 BRANCH IF ALPHAMERIC SCAN
         MVI   NPLSSC22+1,0         ELSE SET FOR NUMERIC SCAN        R4
         BAL   WD,NPLSSC20         SCAN NEXT VALUE
         B     NPLSVERR            BRANCH IF ILLEGAL VALUE
         TM    NSCANFLG,NSCFLBIN   TEST OPTION BYTE
         BZ    NPLSSC07            BRANCH IF NO BINARY CONVERSION
         CLC   NPLSVAL(56),NPLSFILL  TEST FOR OVERFLOW
         BNE   NPLSVERR            ERROR IF MORE THAN EIGHT CHARACTERS
         OI    NPLSNAME+7,X'F0'    INSURE VALID ZONE
         PACK  NPLSNAME,NPLSNAME   CONVERT
         SR    R0,R0                VALUE
         CVB   R1,NPLSNAME           TO
         STM   R0,R1,NPLSNAME         BINARY
         SPACE 2
NPLSSC07 SR    R0,R0               GET
         IC    R0,NSCANLEN          VALUE LENGTH
         BCTR  R0,0                DECREMENT FOR LATER USE
         LA    WD,62               COMPUTE LENGTH
         SR    WD,R0                OF UNUSED VALUE FIELD
         BM    NPLSSC08            BRANCH IF ZERO LENGTH
         STC   WD,*+5              SET COMPARE LENGTH
         CLC   NPLSVAL(*-*),NPLSFILL  TEST FOR FIELD OVERFLOW
         BNE   NPLSVERR            BRANCH IF VALUE OVERFLOWS FIELD
         SPACE 2
NPLSSC08 LA    WD,NPLSVAL(WD)      COMPUTE ADDRESS OF 1ST BYTE - 1
         TM    NSCANFLG,NSCFLFIT   TEST OPTION BYTE
         BZ    NPLSSC09            BRANCH IF EXACT FIT NOT REQUIRED
         CLC   NPLSFILL,1(WD)      TEST FIRST BYTE OF VALUE
         BNE   NPLSSC12            BRANCH IF VALUE IS EXACT FIT
         B     NPLSVERR            ERROR IF NOT EXACT FIT
         SPACE 2                                               @OZ29180
NPLSSC09 TM    NSCANFLG,NSCFLEFT   TEST OPTION BYTE
         BZ    NPLSSC12            BRANCH IF NO LEFT JUSTIFICATION
         CLC   NPLSVAL,NPLSFILL    TEST VALUE
         BE    NPLSSC12            BRANCH IF NULL
         STC   R0,NPLSSC11+1       SET SHIFT LENGTH
NPLSSC10 CLC   NPLSFILL,1(WD)      TEST FIRST CHARACTER
         BNE   NPLSSC12            BRANCH IF NOT NULL VALUE
NPLSSC11 MVC   1(*-*,WD),2(WD)     SHIFT LEFT ONE CHARACTER
         MVC   NPLSVAL+63(1),NPLSFILL  ADD FILL CHARACTER
         B     NPLSSC10            TRY AGAIN
         SPACE 2
NPLSSC12 STC   R0,*+5              SET MOVE LENGTH
         MVC   0(*-*,WC),1(WD)     SET OUTPUT VALUE
         B     NPLSSC02            GET NEXT SUB-PARAMETER
         SPACE 2                                                     R4
NPLSKERR L     R1,=A(NPLSKERM)     POINT TO INVALID KEYWORD MSG      R4
         MVC   NPLSKERK-NPLSKERM(,R1),NPLSNAME  KILL IN KEYWORD      R4
         B     NPLSERR             PROCESS HASPPARM ERROR
         SPACE 2                                                     R4
NPLSVERR L     R1,=A(NPLSVERM)     POINT TO INVALID VALUE MSG        R4
         MVC   NPLSVERK-NPLSVERM(,R1),NSCANAME  FILL IN NAME         R4
         B     NPLSERR             PROCESS HASPPARM ERROR
         DROP  WB                  DROP SCAN TABLE ADDRESSABILITY
         EJECT                                                 @OZ29180
NPLSSC20 NULL                      KEYWORD AND VALUE SCAN SUBROUTINE
         LTR   R15,R15             TEST FOR END OF CARD
         BZ    NPLSSC24            BRANCH IF END OF CARD
         BXH   WA,R14,NPLSSC23     GET NEXT CHARACTER
         SPACE 2
NPLSSC21 CLI   0(WA),C','          TEST NEXT CHARACTER
         BE    4(,WD)              RETURN IF COMMA
         CLI   0(WA),C'='          *
         BE    4(,WD)              RETURN IF EQUAL SIGN
         CLI   0(WA),C' '          *
         BE    NPLSSC23            BRANCH IF BLANK
         L     R1,=A(NPLTRT2)      POINT TO TRANSLATE TABLE          R4
         TRT   0(1,WA),0(R1)       TEST FOR ILLEGAL ALPHAMERIC       R4
         BNZR  WD                  RETURN IF YES TO +0               R4
NPLSSC22 NOP   *+10                BR IF ALPHAMERIC SCAN             R4
         CLI   0(WA),C'0'          TEST FOR NUMERIC                  R4
         BLR   WD                  RETURN IF NO TO +0                R4
         CLC   NPLSFILL,NPLSVAL    TEST HIGH-ORDER CHARACTER
         BNER  WD                  BRANCH IF OVERFLOW
         MVC   NPLSVAL(63),NPLSVAL+1  SHIFT PARAMETER
         MVC   NPLSVAL+63(1),0(WA) ADD CURRENT CHARACTER
         BXLE  WA,R14,NPLSSC21     GET NEXT CHARACTER
NPLSSC23 SLR   R15,R15             INDICATE END OF CARD
         B     4(,WD)              INDICATE END-OF-FIELD
         EJECT                                                       R4
NPLSSC24 BCTR  WA,0                BACK UP ONE CHARACTER
         CLI   0(WA),C','          TEST LAST CHARACTER
         BNE   NPLSSC25            NO CONTINUATION IF NOT COMMA
         BAL   LINK,NPLLIST        LIST CURRENT CARD
         BAL   LINK,NPLGET         READ NEXT CARD
         B     NPLSCERR            ILLEGAL IF END-OF-FILE
         LA    WA,NCARD-2          SET UP
         LA    R14,1                SCAN
         LA    R15,NCARD+70          REGISTERS
         B     NPLSSC01            SCAN CONTINUATION CARD
         SPACE 2
NPLSSC25 CLI   NCARD+71,C' '       TEST COLUMN 72
         BE    NPLSEXIT            BRANCH IF NO CONTINUATION INDICATED
         BAL   LINK,NPLLIST        LIST CURRENT CARD
         BAL   LINK,NPLGET         READ NEXT CARD
         B     NPLSCERR            ILLEGAL IF END-OF-FILE
         B     NPLSSC25            TREAT AS COMMENT
         SPACE 5
NPLSCERR L     R1,=A(NPLSCERM)     POINT TO INVALID CONTINUATION MSG R4
NPLSERR  OI    NPLFLAGS,NPLERROR   INDICATE HASPPARM ERROR
         MVC   NDIAG,0(R1)         MOVE DIAGNOSTIC TO PARM CARD      R4
         SPACE 2
NPLSEXIT LM    R0,R1,NPLSCTAB      RESTORE REGISTERS
         BR    WE                   AND RETURN
         SPACE 5
NPLSOI   OI    0(WC),*-*           ***** EXECUTE ONLY *****
NPLSNI   NI    0(WC),*-*           ***** EXECUTE ONLY *****
         SPACE 2
NPLSCTAB DS    F                   ADDRESS OF SCAN TABLE
NPLSOTAB DS    F                   ADDRESS OF OUTPUT TABLE
         SPACE 2
         ORG   *-7                 FORCE
         DS    0D,7X                BOUNDARY ALIGNMENT
NPLSFILL DS    C                   FILLER CHARACTER
NPLSVAL  DS    0CL64,CL56          VALUE FIELD
NPLSNAME DS    CL8                 NAME FIELD
         TITLE 'HASP INITIALIZATION -- PARAMETER STATEMENT SUB-PARAMETEC
               R SCAN TABLE DSECT'                                  R41
         SPACE 5
NSCANTBL DSECT                     SUB-PARAMETER SCAN TABLE
NSCANAME DS    CL8                 SUB-PARAMETER NAME
NSCANFLG DS    B                   SUB-PARAMETER FLAGS
NSCANFL2 DS    B                   SUB-PARAMETER FLAGS 2       @OZ29180
NSCANRTN DS    0AL3                SUB-PARAMETER SCAN ROUTINE  @OZ29180
NSCANDSP DS    AL2                 SUB-PARAMETER VALUE DISPLAC @OZ29180
NSCANMSK DS    0X                  SUB-PARAMETER MASK
NSCANLEN DS    AL1                 SUB-PARAMETER VALUE LENGTH
         DS    AL3                 RESERVED                    @OZ29180
NSCANEXT DS    0F                  ADDRESS OF NEXT TABLE ENTRY
HASPINIT CSECT                     END OF SUB-PARAMETER SCAN TABLE
         SPACE 5
*                             NSCANFLG
         SPACE 3
NSCFLMSK EQU   B'10000000'         NSCANMSK CONTAINS MASK
NSCFLCOM EQU   B'01000000'         NSCANMSK CONTAINS COMPLEMENTED MASK
NSCFLNUM EQU   B'00100000'         VALUE MUST BE NUMERIC
NSCFLBIN EQU   B'00010000'         CONVERT VALUE TO BINARY
NSCFLEFT EQU   B'00001000'         LEFT-ADJUST VALUE
NSCFLFIT EQU   B'00000100'         NSCANLEN MUST EQUAL VALUE LENGTH
NSCFLBLK EQU   B'00000010'         BLANK-FILL VALUE
NSCFLZER EQU   B'00000001'         EBCDIC-ZERO-FILL VALUE
         SPACE 5                                               @OZ29180
*                             NSCANFL2                         @OZ29180
         SPACE 3                                               @OZ29180
NSCFLRTN EQU   B'10000000'         NSCANRTN CONTAINS RTN ADDR  @OZ29180
         TITLE 'HASP INITIALIZATION -- PARAMETER STATEMENT GET SUBROUTIC
               NE'                                                  R41
NPLGET   NULL                      PARAMETER LIBRARY GET SUBROUTINE
         ST    LINK,NPLGSAVE       SAVE RETURN REGISTER
         MVC   NDIAG,NDIAG-1       CLEAR DIAGNOSTIC AREA
         TM    NPLFLAGS,NPLCONSL   ARE WE IN CONSOLE MODE...        R41
         BZ    NPLGETCD            BR IF NO                         R41
         MVI   NPLECB,0            CLEAR ECB                        R41
         L     R1,=A(NLOGMSG)      POINT TO LOG MESSAGE             R41
         MVC   NLOGTEXT-NLOGMSG(,R1),NPLBLNKS  CLEAR REPLY AREA     R41
        $$WTOR NOPRMSG             ISSUE CONSOLE QUERY              R41
         WAIT  ECB=NPLECB          WAIT FOR RESPONSE                R41
         L     R1,=A(NLOGMSG)      POINT TO LOG MESSAGE             R41
         MVC   NCARD,NLOGTEXT-NLOGMSG(R1)  MOVE REPLY TO CARD AREA  R41
         OC    NCARD,NPLBLNKS      FORCE UPPER CASE RESPONSE        R41
         L     LINK,NPLGSAVE       RESTORE RETURN REGISTER          R41
         CLC   NCARD(4),=C'END '   TEST FOR 'END'                   R41
         BER   LINK                RETURN IF YES TO +0              R41
         CLC   NCARD(7),=C'CANCEL '  TEST FOR CANCEL                R41
         BNE   NPLGETST            BR IF NO TO TEST FOR COMMENT     R41
         OI    NPLFLAGS,NPLCAN     INDICATE CANCEL                  R41
         B     NPLGEOF1            BR TO END-OF-FILE EXIT           R41
         EJECT                                                      R41
NPLGETCD TM    NPLFLAGS,NPLEOFSW   TEST STATUS BYTE                 R41
         BO    NPLGEOF             BRANCH IF PREVIOUS EOF
         L     R1,=A(HASPPARM)     POINT TO HASPPARM DCB            R41
         GET   (1)                 GET LOCATION OF NEXT CARD        R41
         MVC   NCARD,0(R1)         MOVE CARD TO WORK AREA
         CLC   NCARD(2),=C'/*'     TEST FOR /* CARD
         BE    NPLGEOF1            BR IF YES TO SIMULATE EOF        R41
         SPACE 1                                                    R41
NPLGETST LA    R0,NCARD            POINT TO START OF STATEMENT      R41
         LA    R1,71               GET STATEMENT LENGTH             R41
         SLR   R15,R15             SET LENGTH FOR COMPARE           R41
         ICM   R15,8,NPLBLNKS      GET PAD BYTE                     R41
         CLCL  R0,R14              SCAN FOR 1ST NON-BLANK CHARACTER R41
         BE    NPLGELST            BR IF BLANK STATEMENT            R41
         LR    WA,R0               RELOAD FIELD ADDRESS             R41
         CLI   0(WA),C'*'          TEST FOR COMMENT                 R41
         BE    NPLGELST            BR IF YES TO LIST/LOG STATEMENT  R41
         L     LINK,NPLGSAVE       RESTORE RETURN REGISTER          R41
         B     4(,LINK)             AND RETURN TO +4                R41
         SPACE 1                                                    R41
NPLGELST BAL   LINK,NPLLIST        LIST/LOG BLANK/COMMENT STATEMENT R41
         L     LINK,NPLGSAVE       RESTORE RETURN REGISTER          R41
         B     NPLGET              BR TO GET NEXT STATEMENT         R41
         SPACE 3                                                    R41
NPLGEOF  NULL                      END-OF-FILE EXIT
         MVC   NCARD,NLINE         BLANK OUT CARD IMAGE
NPLGEOF1 OI    NPLFLAGS,NPLEOFSW   SET EOF SWITCH
         L     LINK,NPLGSAVE       RESTORE RETURN REGISTER
         BR    LINK                TAKE END-OF-FILE RETURN
         TITLE 'HASP INITIALIZATION -- PARAMETER STATEMENT CONVERTER PAC
               RAMETER FIELD VALIDATION SUBROUTINE'                 R41
***********************************************************************
*                                                                     *
*        NPLRDVAL -- VALIDATE CONVERTER PARM FIELD                    *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
NPLRDVAL MVC   NPLLWORK(1),NPLWORK+14  SAVE 'A---'                   R4
         MVI   NPLWORK+14,C'0'     MAKE 'A---' NUMERIC               R4
         LA    R0,20               GET PARM FIELD LENGTH             R4
         LA    WC,NPLWORK          GET PARM FIELD ADDRESS           R41
         SPACE 1                                                     R4
SKIP310  CLI   0(WC),C'0'          ENSURE                           R41
         BLR   WE                   ALL BUT                         R41
         LA    WC,1(,WC)             'A---'                         R41
         BCT   R0,SKIP310             NUMERIC                        R4
         SPACE 1                                                     R4
         MVC   NPLWORK+14(1),NPLLWORK  RESTORE ORIGINAL 'A---'       R4
         CLI   NPLWORK,C'3'        TEST 'B'                          R4
         BHR   WE                  RETURN IF ILLEGAL TO +0          R41
         CLC   =C'144000',NPLWORK+3  TEST 'MMMMSS'                   R4
         BLR   WE                  RETURN IF ILLEGAL TO +0          R41
         CLC   =C'60',NPLWORK+7    TEST 'SS'                         R4
         BNHR  WE                  RETURN IF ILLEGAL TO +0          R41
         CLI   NPLWORK+12,C'3'     TEST 'R'                          R4
         BHR   WE                  RETURN IF ILLEGAL TO +0          R41
         CLI   NPLWORK+13,C'1'     TEST 'L'                          R4
         BHR   WE                  RETURN IF ILLEGAL TO +0          R41
         CLC   NPLWORK+15(4),=C'0002'  TEST '-AAA' AND 'E'           R4
         BHR   WE                  RETURN IF ILLEGAL TO +0          R41
         CLI   NPLWORK+19,C'1'     TEST 'F'                          R4
         BHR   WE                  RETURN IF ILLEGAL TO +0          R41
         CLI   NPLLWORK,C'E'       TEST 'A---'                       R4
         BH    NPLRDVLA            BR IF PROBABLE NUMERIC            R4
         TM    NPLLWORK,1          TEST FOR LEGAL ALPHA              R4
         BZR   WE                  RETURN IF ILLEGAL TO +0          R41
         B     4(,WE)              OK IF A, C, OR E                 R41
         SPACE 1                                                    R41
NPLRDVLA CLI   NPLLWORK,C'0'       TEST FOR NUMERIC                 R41
         BLR   WE                  RETURN IF ILLEGAL ALPHA TO +0    R41
         TM    NPLLWORK,1          TEST FOR LEGAL NUMERIC           R41
         BLR   WE                  RETURN IF ILLEGAL TO +0          R41
         B     4(,WE)              OK IF 0, 2, 4, 6, OR 8           R41
         TITLE 'HASP INITIALIZATION -- PARAMETER STATEMENT LIST SUBROUTC
               INE'                                                 R41
NPLLIST  NULL                      PARAMETER STATEMENT LIST SUBROUTINE
         ST    LINK,NPLLSAVE       SAVE RETURN REGISTER             R41
         L     R1,=A(NDIAGMSG)     POINT TO DIAGNOSTIC MESSAGE      R41
         MVC   NDIAGTXT-NDIAGMSG(,R1),NDIAG  SET DIAGNOSTIC         R41
         L     R1,=A(NLOGMSG)      POINT TO LOG MESSAGE             R41
         MVC   NLOGTEXT-NLOGMSG(,R1),NCARD  INSERT STATEMENT        R41
         LA    R0,78               SET LOOP TERMINATOR              R41
         LA    WA,NCARD+79         POINT TO LAST CHARACTER          R41
         SPACE 1                                                    R41
NPLLOGLN CLI   0(WA),C' '          TEST NEXT CHARACTER              R41
         BNE   NPLLOGIT            BR IF NON-BLANK                  R41
         BCTR  WA,0                BACK UP 1 CHARACTER              R41
         BCT   R0,NPLLOGLN         LOOP UNTIL 1ST NON-BLANK CHAR    R41
         SPACE 1                                                    R41
NPLLOGIT SL    WA,=A(NCARD)        GET STATEMENT LENGTH - 1         R41
         LA    WA,4+9+1(,WA)       ALLOW FOR WTO, MSGID, + 1        R41
         STH   WA,0(,R1)           SET MESSAGE LENGTH               R41
         CLI   NDIAG,C' '          WAS STATEMENT FLAGGED...         R41
         BE    NPLOGTST            BR IF NO                         R41
         TM    NPLFLAGS,NPLCONSL   ARE WE IN CONSOLE MODE...        R41
         BO    NPLDIAG             BR IF YES                        R41
        $$WTO  (R1)                DISPLAY PARAMETER STATEMENT      R41
         SPACE 1                                                    R41
NPLDIAG $$WTO  NDIAGMSG            DISPLAY PARAMETER DIAGNOSTIC     R41
         OI    NPLFLAGS,NPLCONSL   ENTER CONSOLE MODE               R41
         B     NPLIST              BR TO LIST PARAMETER STATEMENT   R41
         SPACE 1                                                    R41
NPLOGTST TM    $OPTSTAT,$OPTLOG    TEST OPERATOR OPTIONS            R41
         BZ    NPLIST              BR IF NOLOG SPECIFIED            R41
         TM    NPLFLAGS,NPLNOLOG   TEST HASPPARM CONTROL STATUS     R41
         BO    NPLIST              BR IF NOLOG IN EFFECT            R41
         L     WA,=A(NLOGMSG)      POINT TO LOG MESSAGE             R41
         OI    2(WA),X'02'         INDICATE HARD COPY ONLY          R41
        $$WTO  (WA)                LOG PARAMETER STATEMENT          R41
         NI    2(WA),255-X'02'     RESET HARD COPY INDICATOR        R41
         EJECT                                                      R41
NPLIST   L     LINK,NPLLSAVE       RESTORE RETURN ADDRESS           R41
         TM    $OPTSTAT,$OPTLIST   TEST OPERATOR OPTIONS
         BZR   LINK                BRANCH IF NOLIST SPECIFIED
         TM    NPLFLAGS,NPLNOLST   TEST HASPPARM CONTROL STATUS
         BOR   LINK                BRANCH IF NOLIST IN EFFECT
         L     WA,=A(HASPLIST)     POINT TO HASPLIST DCB            R41
         LH    R0,NPLLINCT         GET LINE COUNT
         BCT   R0,NPLLIST1         BRANCH IF NOT END OF PAGE
         LH    R1,NPLLPGCT         GET PAGE COUNT
         LA    R1,1(,R1)           INCREMENT
         STH   R1,NPLLPGCT          AND SAVE
         CVD   R1,NPLLWORK         CONVERT TO PACKED DECIMAL
         MVC   NPLLPGNO,=X'40202120'  SET EDIT MASK
         ED    NPLLPGNO,NPLLWORK+6 EDIT PAGE COUNT
         PUT   (WA),NPLLTTL1       WRITE TITLE                      R41
         PUT   (WA),NPLLTTL2       WRITE SPACE                      R41
         LA    R0,50               RESET LINE COUNT
         SPACE 1                                                    R41
NPLLIST1 STH   R0,NPLLINCT         SAVE UPDATED LINE COUNT
         PUT   (WA),NLINE          WRITE PARAMETER STATEMENT        R41
         L     LINK,NPLLSAVE       RESTORE LINK REGISTER
         BR    LINK                 AND RETURN
         TITLE 'HASP INITIALIZATION -- PARAMETER LIBRARY PROCESSING TERC
               MINATION'                                             R4
NPLCLOSE NULL                      CLOSE PARAMETER LIBRARY DATA SETS R4
         L     WA,=A(NPLCLIST)     POINT TO DCB CLOSE LIST          R41
         CLOSE MF=(E,(WA))         CLOSE FILES                      R41
         SPACE 1                                                     R4
NPLFREEP L     R1,0(,WA)           GET ADDRESS OF NEXT DCB           R4
         TM    DCBBUFCB+3-DCBDSECT(R1),1  TEST FOR BUFFER POOL       R4
         BO    NPLNPOOL            BR IF NO                          R4
         FREEPOOL (1)               ELSE FREE BUFFER POOL            R4
         SPACE 1                                                     R4
NPLNPOOL TM    0(WA),X'80'         TEST DCB LIST ENTRY               R4
         LA    WA,4(,WA)           STEP TO NEXT ENTRY                R4
         BZ    NPLFREEP            BR IF NOT LAST ENTRY              R4
         EJECT                                                      R41
         TM    NPLFLAGS,NPLCAN     INITIALIZATION CANCELLED...      R41
         BO    NPLQUIT             BR IF YES                        R41
         L     WE,=A(NCATNIP)      POINT TO NEXT SECTION             R4
         TM    NPLFLAGS,NPLERROR   TEST FOR PARAMETER LIBRARY ERROR  R4
         BZR   WE                  BR IF NO TO NEXT SECTION          R4
         L     R1,=A(NMSG451)      POINT TO WARNING MESSAGE          R4
         SPACE 1                                                     R4
NPLWTOR $$WTO  (R1)                ISSUE WARNING MESSAGE TO OPERATOR R4
         SPACE 1                                                     R4
NPLQUERY MVI   NPLECB,0            CLEAR ECB                         R4
        $$WTOR NMSG441             ASK OPERATOR ABOUT CONTINUING     R4
         WAIT  ECB=NPLECB          WAIT FOR OPERATOR REPLY           R4
         OI    NPLREPLY,X'40'      FORCE UPPER CASE REPLY            R4
         CLI   NPLREPLY,C'Y'       TEST FOR CONTINUE                 R4
         BER   WE                  BR IF YES                         R4
         CLI   NPLREPLY,C'N'       TEST FOR QUIT                     R4
         BNE   NPLQUERY            BR IF NO TO RE-ISSUE QUERY        R4
         SPACE 1                                                    R41
NPLQUIT $EXIT  NGQUITM             ISSUE 'QUIT' MESSAGE AND QUIT    R41
         TITLE 'HASP INITIALIZATION -- PARAMETER STATEMENT DATA AREAS'
NPLDBL   DS    D                   DOUBLE WORD WORK AREA             R4
NPLLWORK EQU   INITDBL             DOUBLE WORD WORK AREA             R4
NPLHEXSV DS    F                   HEX ROUTINE SAVE AREA       @OZ29180
NPLGSAVE DS    F                   SAVE AREA                         R4
NPLLSAVE DS    F                   SAVE AREA                        R41
NPLECB   DS    F                   WTOR ECB                         R41
         SPACE 1                                                     R4
NPLLINCT DC    H'1'                LINE COUNT                        R4
NPLLPGCT DC    H'0'                PAGE COUNT                        R4
         SPACE 1                                                     R4
NPLFLAGS DC    AL1(NPLNOLOG)       PARAMETER LIBRARY FLAGS          R41
NPLEOFSW EQU   B'10000000'         END-OF-FILE INDICATION            R4
NPLNOLST EQU   B'01000000'         NOLIST INDICATION                 R4
NPLERROR EQU   B'00100000'         HASPPARM STMNT ERROR INDICATION   R4
NPLZAPSW EQU   B'00010000'         SUPERZAP MODE INDICATION          R4
NPLNOLOG EQU   B'00001000'         NOLOG INDICATOR                  R41
NPLCONSL EQU   B'00000100'         CONSOLE MODE                     R41
NPLCAN   EQU   B'00000010'         INITIALIZATION ABORT SWITCH      R41
NPLREPLY DS    C                   WTOR REPLY AREA                  R41
         SPACE 1                                                     R4
NPLDSAVE DS    XL((DCTCLASS+36+1+3-DCTDSECT)/4*4)  DCT/RAT SAVE AREA R4
NPLWORK  DS    CL20                WORK AREA                         R4
NPLHEXCH DS    X                   HEX BYTE WORK AREA          @OZ29180
         SPACE 3                                                     R4
NPLLTTL1 DC    CL26'1',CL87'JES2 PARAMETER LIBRARY LISTING',C'PAGE'  R4
NPLLPGNO DC    CL4'   1'           EBCDIC PAGE NUMBER                R4
NPLLTTL2 DC    CL121'0'            DOUBLE SPACE                      R4
NPLBLNKS EQU   NPLLTTL2+1,120      BLANKS                            R4
         SPACE 3                                                     R4
NLINE    DS    0CL121              LINE IMAGE                        R4
         DC    CL1' '              CARRIAGE CONTROL                  R4
NCARD    DC    CL80' '             CARD IMAGE                        R4
         DC    CL2' '                                                R4
NDIAG    DC    CL38' '             DIAGNOSTIC AREA                   R4
         SPACE 2                                                    R41
         DROP  BASE2,BASE3,BASE4   KILL LOCAL ADDRESSABILITY        R41
         EJECT                                                      R41
         LTORG                                                      R41
         TITLE 'HASP INITIALIZATION -- PARAMETER LIBRARY DATA CONTROL BC
               LOCKS'                                               R41
         AIF   ('&PRINT' NE 'OFF').NCBB                             R41
         PUSH  PRINT                                                R41
         PRINT NOGEN                                                R41
.NCBB    SPACE 2                                                    R41
NPLCLIST CLOSE (HASPPARM,FREE,HASPLIST,FREE),MF=L                   R41
         SPACE 3                                                    R41
HASPPARM DCB   DSORG=PS,MACRF=(GL),DDNAME=HASPPARM,EODAD=NPLGEOF,   R41C
               LRECL=80,BUFNO=1,EROPT=SKP,RECFM=FB,EXLST=NPLEXLST   R41
         SPACE 3                                                    R41
HASPLIST DCB   DSORG=PS,MACRF=(PM),DDNAME=HASPLIST,RECFM=FBA,       R41C
               LRECL=121,EROPT=ACC,EXLST=NPLEXLST                   R41
         SPACE 2                                                    R41
         AIF   ('&PRINT' NE 'OFF').NCBE                             R41
         POP   PRINT                                                R41
.NCBE    SPACE 3                                                    R41
NPLEXLST DC    0F'0',X'85',AL3(NPLEXIT)  DCB EXIT LIST              R41
         SPACE 3                                                    R41
         USING DCBDSECT,R1         PROVIDE DCB ADDRESSABILITY       R41
         SPACE 1                                                    R41
NPLEXIT  MVC   DCBBUFL,DCBBLKSI    SET BUFFER LENGTH                R41
         OC    DCBBLKSI,DCBBLKSI   BLOCK SIZE PROVIDED...           R41
         BNZR  R14                 RETURN IF YES                    R41
         MVC   DCBBLKSI,DCBLRECL    ELSE SET BLKSIZE=LRECL          R41
         MVC   DCBBUFL,DCBBLKSI      AND RESET BUFFER LENGTH        R41
         BR    R14                 THEN RETURN                      R41
         SPACE 1                                                    R41
         DROP R1                   KILL DCB ADDRESSABILITY          R41
         TITLE 'HASP INITIALIZATION -- PARAMETER STATEMENT SUB-PARAMETEC
               R SCAN TABLES'                                       R41
NPLPITST $SCNTBL PITDSECT          LOGICAL INITIATOR SCAN TABLE      R4
         $SCNTBL NAME,L'PITPATID,PITPATID,NSCFLBLK                   R4
         $SCNTBL CLASS,36,PITCLASS,NSCFLEFT+NSCFLBLK                 R4
         $SCNTBL (DRAIN,START),PITHOLD1,PITSTAT                      R4
         $SCNTBL                   END OF SCAN TABLE                 R4
         SPACE 5                                                     R4
NPLCATST $SCNTBL CATDSECT          CAT SCAN TABLE                    R4
         $SCNTBL CONVPARM,L'CATCONVP,CATCONVP,NSCFLFIT               R4
         $SCNTBL PERFORM,L'CATPERFM,CATPERFM,NSCFLNUM+NSCFLZER       R4
         $SCNTBL PROCLIB,L'CATPROCN,CATPROCN,NSCFLNUM+NSCFLZER       R4
         $SCNTBL (COPY,NOCOPY),CATTCOPY,CATJOBFL                     R4
         $SCNTBL (HOLD,NOHOLD),CATTHOLD,CATJBOPT                     R4
         $SCNTBL (NOJOURN,JOURNAL),CATNOJNL,CATJOBFL                 R4
         $SCNTBL (NOLOG,LOG),CATNOLOG,CATJBOPT                       R4
         $SCNTBL (NOOUTPUT,OUTPUT),CATNOUPT,CATJOBFL                 R4
         $SCNTBL (SCAN,NOSCAN),CATTSCAN,CATJOBFL                     R4
         $SCNTBL (XBATCH,NOXBATCH),CATXBACH,CATJBOPT                 R4
         $SCNTBL (NOUSO,IEFUSO),CATNOUSO,CATSMFLG                   R41
         $SCNTBL (NOTYPE6,TYPE6),CATNOTY6,CATSMFLG                   R4
         $SCNTBL (NOUJP,IEFUJP),CATNOUJP,CATSMFLG                    R4
         $SCNTBL (NOTYPE26,TYPE26),CATNOT26,CATSMFLG                 R4
         $SCNTBL (RESTART,NORESTRT),CATRSTRT,CATJOBFL                R4
         $SCNTBL                   END OF SCAN TABLE                 R4
         SPACE 5                                                     R4
NPLSCAST $SCNTBL SCADSECT          SCAT SCAN TABLE                   R4
         $SCNTBL (PUNCH,PRINT),SCATPNCH,SCATFLAG                     R4
         $SCNTBL (HOLD,NOHOLD),SCATHOLD,SCATFLAG                     R4
         $SCNTBL (DUMMY,SYSOUT),SCATDUMM,SCATFLAG                    R4
         $SCNTBL (TRKCEL,NOTRKCEL),SCATTCEL,SCATFLAG                 R4
         $SCNTBL                   END OF SCAN TABLE                 R4
         EJECT                                                       R4
NPLRDRST $SCNTBL DCTDSECT          LOCAL CARD READER SCAN TABLE      R4
         $SCNTBL UNIT,3,DCTBUFAD,NSCFLZER                            R4
         $SCNTBL PRDEST,L'DCTPRRTE,DCTPRRTE,NSCFLBIN                 R4
         $SCNTBL PUDEST,L'DCTPURTE,DCTPURTE,NSCFLBIN                 R4
         $SCNTBL MSGCLASS,1,DCTMCLAS,NSCFLFIT                        R4
         $SCNTBL (PRLCL,PRRMT),DCTPRLCL,DCTFLAGS                     R4
         $SCNTBL (PULCL,PURMT),DCTPULCL,DCTFLAGS                     R4
         $SCNTBL (DRAIN,AUTO),DCTDRAIN,DCTSTAT                       R4
         SPACE 1                                                     R4
NPLINRST $SCNTBL PRIOINC,L'DCTPRINC,DCTPRINC,NSCFLBIN                R4
         $SCNTBL PRIOLIM,L'DCTPRLIM,DCTPRLIM,NSCFLBIN                R4
         $SCNTBL CLASS,1,DCTJCLAS,NSCFLFIT                           R4
         $SCNTBL AUTH,L'DCTRAUTH,DCTRAUTH,NSCFLBIN                   R4
         $SCNTBL (HOLD,NOHOLD),DCTHOLDJ,DCTFLAGS                     R4
         $SCNTBL                   END OF SCAN TABLE                 R4
         SPACE 5                                                     R4
NPLPPST  $SCNTBL DCTDSECT          LOCAL PRINT/PUNCH SCAN TABLE      R4
         $SCNTBL UNIT,3,DCTBUFAD,NSCFLZER                            R4
         $SCNTBL ROUTECDE,L'DCTROUTE,DCTROUTE,NSCFLBIN               R4
         $SCNTBL CLASS,36,DCTCLASS,NSCFLEFT+NSCFLBLK                 R4
         $SCNTBL FORMS,L'DCTFORMS,DCTFORMS,NSCFLEFT+NSCFLBLK         R4
         $SCNTBL FCB,L'DCTFCB,DCTFCB,NSCFLEFT+NSCFLBLK               R4
         $SCNTBL UCS,L'DCTUCS,DCTUCS,NSCFLEFT+NSCFLBLK               R4
         $SCNTBL (BURST,NOBURST),DCTNIBRS,DCTPPSW2                   R4
         $SCNTBL (MARK,NOMARK),DCTNIMRK,DCTPPSW2                     R4
         $SCNTBL (OPERATOR,AUTO),DCTPPSWF,DCTPPSW                    R4
         $SCNTBL (NOSEP,SEP),DCTPPSWS,DCTPPSW                        R4
         $SCNTBL (SEPEXIST,SEPDEFLT),DCTSEPNL,DCTPPSW2              R41
         $SCNTBL (PAUSE,NOPAUSE),DCTPAUSE,DCTPPFL                    R4
         $SCNTBL (DRAIN,START),DCTDRAIN,DCTSTAT                      R4
         $SCNTBL (DSPLTCEL,DSPLSNGL),DCTTCEL,DCTPPFL                 R4
         $SCNTBL                   END OF SCAN TABLE                 R4
         EJECT                                                       R4
NPLLINST $SCNTBL DCTDSECT          RJE LINE SCAN TABLE               R4
         $SCNTBL UNIT,3,DCTBUFAD,NSCFLZER                            R4
         $SCNTBL PASSWORD,L'MDCTPSWD,MDCTPSWD,NSCFLEFT+NSCFLBLK      R4
         $SCNTBL (IFACEB,IFACEA),B'00100000',MDCTMODE                R4
         $SCNTBL (FDUPLEX,HDUPLEX),DCTPFULL,MDCTLINE                 R4
         $SCNTBL (HISPEED,LOWSPEED),DCTPWIDE,MDCTLINE                R4
         $SCNTBL (CODEB,CODEA),B'00001000',MDCTMODE                  R4
         $SCNTBL (USASCII,EBCDIC),DCTPASCI,MDCTLINE                  R4
         $SCNTBL (TRANSP,NOTRANSP),DCTPTRSP,MDCTLINE                 R4
         $SCNTBL (NOADISC,ADISCON),DCTPNADS,MDCTLINE                 R4
         $SCNTBL                   END OF SCAN TABLE                 R4
         SPACE 5                                                     R4
NPLOGNST $SCNTBL DCTDSECT          LOGONNN SCAN TABLE                R4
         $SCNTBL APPLID,L'MDCTAPPL,MDCTAPPL,NSCFLEFT+NSCFLBLK        R4
         $SCNTBL PASSWORD,L'MDCTPSWD,MDCTPSWD,NSCFLEFT+NSCFLBLK      R4
         $SCNTBL                                                     R4
         EJECT                                                       R4
NPLRMTST $SCNTBL RATDSECT          REMOTE TERMINAL SCAN TABLE        R4
         $SCNTBL 2770,DCTP2770,RATTYPE                               R4
         $SCNTBL 2780,DCTP2780,RATTYPE                               R4
         $SCNTBL 3740,DCTP3740,RATTYPE                               R4
         $SCNTBL 3780,DCTP3780,RATTYPE                               R4
         $SCNTBL 3781,DCTP2770,RATTYPE                               R4
         $SCNTBL 2922,DCTP20S2,RATTYPE                               R4
         $SCNTBL M20-2,DCTP20S2,RATTYPE                              R4
         $SCNTBL M20-4,DCTP20S2,RATTYPE                              R4
         $SCNTBL M20-5,DCTP20S5,RATTYPE                              R4
         $SCNTBL M20-6,DCTP20S6,RATTYPE                              R4
         $SCNTBL S/360,DCTP360,RATTYPE                               R4
         $SCNTBL  S360,DCTP360,RATTYPE                               R4
         $SCNTBL S/370,DCTP360,RATTYPE                               R4
         $SCNTBL  S370,DCTP360,RATTYPE                               R4
         $SCNTBL 1130,DCTP1130,RATTYPE                               R4
         $SCNTBL SYSTEM/3,DCTPSYS3,RATTYPE                           R4
         $SCNTBL  SYSTEM3,DCTPSYS3,RATTYPE                           R4
         $SCNTBL LUTYPE1,DCTPLU1,RATTYPE                             R4
         $SCNTBL DISCINTV,2,RATRDCT,NSCFLBIN                         R4
         $SCNTBL WAITIME,2,RATWTIME,NSCFLBIN                         R4
         $SCNTBL BUFSIZE,2,RATBUFSZ,NSCFLBIN                         R4
         $SCNTBL LINE,1,RATLDCT,NSCFLBIN                             R4
         $SCNTBL ROUTECDE,L'RATRTE,RATRTE,NSCFLBIN                   R4
         $SCNTBL CONDEST,L'RATCONRT,RATCONRT,NSCFLBIN                R4
         $SCNTBL PASSWORD,L'RATPSWD,RATPSWD,NSCFLEFT+NSCFLBLK        R4
         $SCNTBL LUNAME,L'RATSYMB,RATSYMB,NSCFLEFT+NSCFLBLK          R4
         $SCNTBL NUMRD,L'RATNUMRD,RATNUMRD,NSCFLBIN                  R4
         $SCNTBL NUMPR,L'RATNUMPR,RATNUMPR,NSCFLBIN                  R4
         $SCNTBL NUMPU,L'RATNUMPU,RATNUMPU,NSCFLBIN                  R4
         $SCNTBL (CONSOLE,NOCON),RATCONFC+RATCONFO,RATCONF           R4
         $SCNTBL (SETUPINF,SETUPACT),RATCONFI,RATCONF                JN
         $SCNTBL (MULTI,HARDWARE),DCTPROG,RATFMT                     R4
         $SCNTBL (TRANSP,NOTRANSP),DCTPTRSP,RATFEAT                  R4
         $SCNTBL (BUFEX,NOBUFEX),DCTPBEXP,RATFEAT                    R4
         $SCNTBL (ABUFEX,NOABUFEX),DCTPABEX,RATFEAT                  R4
         $SCNTBL (MRF,NOMRF),DCTPMRF,RATFEAT                         R4
         $SCNTBL (COMP,NOCOMP),DCTPPRES,RATFEAT                      R4
         $SCNTBL (CMPCT,NOCMPCT),DCTPCPCT,RATFEAT                   R41
         $SCNTBL (SETUPHDR,SETUPMSG),DCTPSHDR,RATFEAT               R41
         $SCNTBL (TABS,NOTABS),DCTPTAB,RATFEAT                       R4
         $SCNTBL (VARIABLE,FIXED),DCTPVAR,RATFMT                     R4
         $SCNTBL (BLOCKED,UNBLOCK),DCTPBLK,RATFMT                    R4
         $SCNTBL                   END OF SCAN TABLE                 R4
         EJECT                                                       R4
NPLRNRST $SCNTBL RWTDSECT          REMOTE CARD READER SCAN TABLE     R4
         $SCNTBL PRDEST,L'RWTPRINT,RWTPRINT,NSCFLBIN                 R4
         $SCNTBL PUDEST,L'RWTPUNCH,RWTPUNCH,NSCFLBIN                 R4
         $SCNTBL PRIOINC,L'RWTPRINC,RWTPRINC,NSCFLBIN                R4
         $SCNTBL PRIOLIM,L'RWTPRLIM,RWTPRLIM,NSCFLBIN                R4
         $SCNTBL CLASS,1,RWTJCLAS,NSCFLFIT                           R4
         $SCNTBL MSGCLASS,1,RWTMCLAS,NSCFLFIT                        R4
         $SCNTBL (PRLCL,PRRMT),DCTPRLCL,RWTFLAGS                     R4
         $SCNTBL (PULCL,PURMT),DCTPULCL,RWTFLAGS                     R4
         $SCNTBL (DRAIN,START),DCTDRAIN,RWTSTAT                      R4
         $SCNTBL (HOLD,NOHOLD),DCTHOLDJ,RWTFLAGS                     R4
         $SCNTBL                   END OF SCAN TABLE                 R4
         SPACE 5                                                     R4
NPLRPRST $SCNTBL RWTDSECT          REMOTE PRINT/PUNCH SCAN TABLE     R4
         $SCNTBL PRWIDTH,L'RWTLRECL,RWTLRECL,NSCFLBIN          @OZ29180
         SPACE 1                                                     R4
NPLRPUST $SCNTBL ROUTECDE,L'RWTROUTE,RWTROUTE,NSCFLBIN               R4
         $SCNTBL LRECL,L'RWTLRECL,RWTLRECL,NSCFLBIN            @OZ29180
         $SCNTBL (COMP,NOCOMP),DCTPPRES,RWTFEAT                @OZ29180
         $SCNTBL (CMPCT,NOCMPCT),DCTPCPCT,RWTSFEAT             @OZ29180
         $SCNTBL SELECT,,,,NPLSELCT                            @OZ29180
         $SCNTBL (CCTL,NOCCTL),DCTPCCTL,RWTSFEAT               @OZ29180
         $SCNTBL CLASS,L'RWTCLASS,RWTCLASS,NSCFLEFT+NSCFLBLK   @OZ29180
         $SCNTBL COMPACT,1,RWTDCPTN,NSCFLBIN                   @OZ29180
         $SCNTBL FORMS,L'RWTFORMS,RWTFORMS,NSCFLEFT+NSCFLBLK         R4
         $SCNTBL FCB,L'RWTFCB,RWTFCB,NSCFLEFT+NSCFLBLK               R4
         $SCNTBL UCS,L'RWTUCS,RWTUCS,NSCFLEFT+NSCFLBLK               R4
         $SCNTBL CHAINSIZ,L'RWTCHSZ,RWTCHSZ,NSCFLBIN                 R4
         $SCNTBL (FCBLOAD,NOFCBLOD),DCTRMFCB,RWTPPFL                 R4
         $SCNTBL (OPERATOR,AUTO),DCTPPSWF,RWTPPSW                    R4
         $SCNTBL (NOSEP,SEP),DCTPPSWS,RWTPPSW                        R4
         $SCNTBL (DRAIN,START),DCTDRAIN,RWTSTAT                      R4
         $SCNTBL (SUSPEND,NOSUSPND),DCTSUSPD,RWTPPFL                 R4
         $SCNTBL                   END OF SCAN TABLE                 R4
         EJECT                                                       R4
NPLSYSST $SCNTBL 0                 SYSTEM SCAN TABLE                 R4
         $SCNTBL SID,L'NS1,0,NSCFLFIT                                R4
         $SCNTBL                   END OF SCAN TABLE                 R4
         SPACE 5                                                     R4
NPLDESST $SCNTBL NDQDSECT          DEST'N QUEUE ELEMENT SCAN TABLE   R4
         $SCNTBL NAME,L'NDQNAME,NDQNAME,NSCFLBLK+NSCFLEFT            R4
         $SCNTBL DEST,L'NDQDEST,NDQDEST,NSCFLBLK+NSCFLEFT            R4
         $SCNTBL                   END OF SCAN TABLE                 R4
         TITLE 'HASP INITIALIZATION -- PARAMETER STATEMENT DIAGNOSTICS'
         SPACE 5                                                     R4
NVERERM  DC    CL38'*****     VERIFICATION ERROR     *****'          R4
NREPERM  DC    CL38'*****    DATA OR FORMAT ERROR    *****'          R4
NPLSHERM DC    CL38'*****   VALUE NOT DISPLAYABLE    *****'         R41
NPLSNERM DC    CL38'*****   INVALID SYSTEM NUMBER    *****'          R4
NPLINERM DC    CL38'*****  INVALID INITIATOR NUMBER  *****'          R4
NPLDNERM DC    CL38'*****    INVALID DEVICE NAME     *****'          R4
NPLDVERM DC    CL38'*****  INVALID PARAMETER VALUE   *****'          R4
NPLCHERM DC    CL38'*****  INVALID CHARACTER VALUE   *****'          R4
NPLDCERM DC    CL38'*****   ILLEGAL DECIMAL VALUE    *****'          R4
NPLHXERM DC    CL38'*****     ILLEGAL HEX VALUE      *****'    @OZ29180
NPLSSERM DC    CL38'***** INVALID HASPPARM STATEMENT *****'          R4
NPLSCERM DC    CL38'***** CONTINUATION CARD EXPECTED *****'          R4
NRANGERM DC    CL38'***** LIMITS ARE NNN, NNNNNNNNNN *****'          R4
NPLRTERM DC    CL38'*****   INVALID REMOTE NUMBER    *****'          R4
NPLDXERM DC    CL38'*****     ILLEGAL SUBSCRIPT      *****'          R4
         SPACE 1                                                     R4
NPLSKERM DC    CL24'***** INVALID KEYWORD - '                        R4
NPLSKERK DC    CL8'KEYWORD',CL6' *****'                              R4
         SPACE 1                                                     R4
NPLSVERM DC    CL16'*****   ILLEGAL '                                R4
NPLSVERK DC    CL8'KEYWORD',CL14' VALUE   *****'                     R4
         SPACE 1                                                    R41
NPLHSERM DC    CL8'*****'                                           R41
NPLHSNAM DC    CL8'HASPSSSM',CL22' NOT LOADABLE    *****'           R41
         TITLE 'HASP INITIALIZATION -- PARAMETER STATEMENT PROCESSING RC
               OUTINE TRANSLATE TABLES'                             R41
NPLTRT1  EQU   *-X'4A'                                               R4
         DC    7AL1(0),9AL1(1),4AL1(0),AL1(1),3AL1(0)          @OZ28199
         DC    10AL1(1),4AL1(0),10AL1(1),AL1(0,0,0,1,0,0)      @OZ28199
         SPACE 5                                                     R4
NPLTRT2  DC    75AL1(1),AL1(0),15AL1(1),AL1(0),31AL1(1),2AL1(0)      R4
         DC    68AL1(1),9AL1(0),7AL1(1),9AL1(0),8AL1(1)              R4
         DC    8AL1(0),6AL1(1),10AL1(0),6AL1(1)                      R4
         TITLE 'HASP INITIALIZATION -- INITIALIZATION PARAMETER STATEMEC
               NT TABLE'                                            R41
NPLPTBL  DS    0F                  PARAMETER STATEMENT TABLE        R41
         AIF   ('&PRINT' NE 'OFF').PTGO                             R41
         PUSH  PRINT                                                R41
         PRINT NOGEN                                                R41
.PTGO    SPACE 1                                                    R41
         $PTENT ,&&ADDSYNS,,SWITCH,,$RJEOPTS         &ADDSYNS STATEMENT
         $PTENT ,&&BSPACE,NPLBACK,EBCDIC             &BSPACE  STATEMENT
         $PTENT ,&&BSPGCT,,,,,(1,255)                &BSPGCT  STATEMENT
         $PTENT ,&&BSPNTE,,,,,(0,256/6)              &BSPNTE  STATEMENT
         $PTENT ,&&BSVBOPT,,SWITCH,,$RJEOPTS         &BSVBOPT STATEMENT
         $PTENT ,&&BUFSIZE,NPLX8,,,,                 &BUFSIZE STATEMENTC
               ((1024+7-(BUFSTART-BUFDSECT))/8*8,(4096+7-(BUFSTART-BUFDC
               SECT))/8*8)                                          R41
         $PTENT ,&&CCOMCHR,NPLCOMCH,EBCDIC           &CCOMCHR STATEMENT
         $PTENT ,&&CHKPT,NPLCKSPL,EBCDIC,,,(1,L'$CHKPT)  &CHKPT STMNT
         $PTENT ,&&CKPTIME,,,,,(10,5*60)             &CKPTIME STATEMENT
         $PTENT ,&&DEBUG,,SWITCH,,$RUNOPTS           &DEBUG   STATEMENT
         $PTENT ,&&DELAYTM,NPLDELAY,,,,(1,9999),     &DELAYTM STATEMENTC
               DISPLAY=NPLDDLAY                                     R41
         $PTENT ,&&DMNDSET,,SWITCH,,$PRTOPTS         &DMNDSET STATEMENT
         $PTENT ,&&DSNPRFX,NPLJCL,EBCDIC,,,          &DSNPRFX STATEMENTC
               (1,L'$DSNPRFX)                                       R41
         $PTENT ,&&DUPVOLT,,SWITCH,,$RUNOPTS         &DUPVOLT STATEMENT
         $PTENT ,&&ESTIME,,,,,(1,1440)               &ESTIME  STATEMENT
         $PTENT ,&&ESTLNCT,,,,,(1,9999)              &ESTLNCT STATEMENT
         $PTENT ,&&ESTPUN,,,,,(0,9999999)            &ESTPUN  STATEMENT
         $PTENT ,&&HTDIST,,,,,(2,144)                &HTDIST  STATEMENT
         $PTENT ,&&JCOPYLM,,,,,(1,255)               &JCOPYLM STATEMENT
         $PTENT ,&&LINECT,,,,,(0,255)                &LINECT  STATEMENT
         $PTENT ,&&MAXCLAS,,,,,(1,36)                &MAXCLAS STATEMENT
         $PTENT ,&&MAXCMCT,,,,,(1,255)               &MAXCMCT STATEMENT
         $PTENT ,&&MAXDORM,NPLINVRT,,,,(100,6000)    &MAXDORM STATEMENT
         $PTENT ,&&MAXJOBS,,,,,(10,$MAXJQES)         &MAXJOBS STATEMENT
         $PTENT ,&&MAXPART,,,,,(1,36*37)             &MAXPART STATEMENT
NMAXPART EQU   *-PTELENG+PTEHIVAL-PTEDSECT,4  UPPER LIMIT           R41
         $PTENT ,&&MAXSESS,,,,,(0,999)               &MAXSESS STATEMENT
         $PTENT ,&&MINDORM,NPLINVRT,,,,(0,3000)      &MINDORM STATEMENT
         $PTENT ,&&MINHOLD,NPLINVRT,,,,(0,99999999)  &MINHOLD STATEMENT
         $PTENT ,&&MINJOES,,,,,(2,$MAXJOES-2)        &MINJOES STATEMENT
         $PTENT ,&&MLBFSIZ,NPLX2,,,,                 &MLBFSIZ STATEMENTC
               (128,(4096+7-(TPBUFST-BUFDSECT))/8*8)                R41
         $PTENT ,&&MSGID,,SWITCH,,$RUNOPTS           &MSGID   STATEMENT
         $PTENT ,&&NIPFCB,,EBCDIC,,,(0,L'$NIPFCB)    &NIPFCB  STATEMENT
         $PTENT ,&&NIPUCS,,EBCDIC,,,(1,L'$NIPUCS)    &NIPUCS  STATEMENT
         $PTENT ,&&NOPRCCW,,,,,(1,255)               &NOPRCCW STATEMENT
         $PTENT ,&&NOPUCCW,,,,,(1,255)               &NOPUCCW STATEMENT
         $PTENT ,&&NUMACE,,,,,(2,9999)               &NUMACE  STATEMENT
         $PTENT ,&&NUMBUF,,,,,(15,$MAXBUF)           &NUMBUF  STATEMENT
         $PTENT ,&&NUMCLAS,,,,,(1,36)                &NUMCLAS STATEMENT
         $PTENT ,&&NUMCMBS,,,,,(3,999)               &NUMCMBS STATEMENT
         $PTENT ,&&NUMDA,,,,,(1,36)                  &NUMDA   STATEMENT
         $PTENT ,&&NUMINRS,,,,,(0,255)               &NUMINRS STATEMENT
         $PTENT ,&&NUMJOES,,,,,(10,$MAXJOES)         &NUMJOES STATEMENT
         $PTENT ,&&NUMLNES,,,,,(0,$MAXLNES)          &NUMLNES STATEMENT
         $PTENT ,&&NUMLOGS,,,,,(0,$MAXLOGS)          &NUMLOGS STATEMENT
         $PTENT ,&&NUMPRTS,,,,,(0,$MAXPRTS)          &NUMPRTS STATEMENT
         $PTENT ,&&NUMPUNS,,,,,(0,$MAXPUNS)          &NUMPUNS STATEMENT
         $PTENT ,&&NUMRDRS,,,,,(0,$MAXRDRS)          &NUMRDRS STATEMENT
         $PTENT ,&&NUMRJE,,,,,(0,$MAXRJE)            &NUMRJE  STATEMENT
         $PTENT ,&&NUMSMFB,,,,,(0,255)               &NUMSMFB STATEMENT
         $PTENT ,&&NUMTGBE,,,,,(1,255)               &NUMTGBE STATEMENT
         $PTENT ,&&NUMTGV,,,,,(100,9999)             &NUMTGV  STATEMENT
         $PTENT ,&&NUMTPBF,,,,,(0,$MAXTPBF)          &NUMTPBF STATEMENT
         $PTENT ,&&OUTPOPT,,,,,(0,2)                 &OUTPOPT STATEMENT
         $PTENT ,&&OUTXS,,,,,(500,9999999)           &OUTXS   STATEMENT
         $PTENT ,&&PRIDCT,,,,,(0,255)                &PRIDCT  STATEMENT
         $PTENT ,&&PRIHIGH,NPLPRI,,,,(0,15),         &PRIHIGH STATEMENTC
               DISPLAY=NPLDPRI                                      R41
         $PTENT ,&&PRILOW,NPLPRI,,,,(0,15),          &PRILOW  STATEMENTC
               DISPLAY=NPLDPRI                                      R41
         $PTENT ,&&PRIOOPT,,SWITCH,,$RUNOPTS         &PRIOOPT STATEMENT
         $PTENT ,&&PRIRATE,,,,,(0,1440)              &PRIRATE STATEMENT
         $PTENT ,&&PRTBOPT,,SWITCH,,$PRTOPTS         &PRTBOPT STATEMENT
         $PTENT ,&&PRTFCB,,EBCDIC,,,(1,L'$PRTFCB)    &PRTFCB  STATEMENT
         $PTENT ,&&PRTRANS,,SWITCH,,$PRTOPTS         &PRTRANS STATEMENT
         $PTENT ,&&PRTUCS,,EBCDIC,,,(1,L'$PRTUCS)    &PRTUCS  STATEMENT
         $PTENT ,&&PRTYOPT,,SWITCH,,$RUNOPTS         &PRTYOPT STATEMENT
         $PTENT ,&&PUNBOPT,,SWITCH,,$PRTOPTS         &PUNBOPT STATEMENT
         $PTENT ,&&RCOMCHR,NPLCOMCH,EBCDIC           &RCOMCHR STATEMENT
         $PTENT ,&&RDROPSL,NPLROPSL,EBCDIC,          &RDROPSL STATEMENTC
               L'CATCONVP,0,DISPLAY=NPLDOPSL                        R41
         $PTENT ,&&RDROPST,NPLROPST,EBCDIC,          &RDROPST STATEMENTC
               L'CATCONVP,0,DISPLAY=NPLDOPST                        R41
         $PTENT ,&&RDROPSU,NPLROPSU,EBCDIC,          &RDROPSU STATEMENTC
               L'CATCONVP,0,DISPLAY=NPLDOPSU                        R41
         $PTENT ,&&RECINCR,,,,,(1,8)                 &RECINCR STATEMENT
         $PTENT ,&&RJOBOPT,,,,,(0,5)                 &RJOBOPT STATEMENT
         $PTENT ,&&RPRBOPT,,SWITCH,,$PRTOPTS         &RPRBOPT STATEMENT
         $PTENT ,&&RPRI,NPLRPRI,,1,0,(0,15),         &RPRI(N) STATEMENTC
               DISPLAY=NPLDRPRI                                     R41
         $PTENT ,&&RPRT,NPLRPRT,,3,0,                &RPRT(N) STATEMENTC
               (1,X'FFFFFF'/60),DISPLAY=NPLDRPRT                    R41
         $PTENT ,&&RPS,,SWITCH,,$RUNOPTS             &RPS     STATEMENT
         $PTENT ,&&RPUBOPT,,SWITCH,,$PRTOPTS         &RPUBOPT STATEMENT
         $PTENT ,&&SID,NPLSID,EBCDIC                 &SID     STATEMENT
         $PTENT ,&&SPOLMSG,,,,,(0,254)               &SPOLMSG STATEMENT
         $PTENT ,&&SPOOL,NPLCKSPL,EBCDIC,,,          &SPOOL   STATEMENTC
               (L'$SPOOL-1,L'$SPOOL)                                R41
         $PTENT ,&&STDFORM,,EBCDIC                   &STDFORM STATEMENT
         $PTENT ,&&SYNCTOL,,,,,(0,5*60)              &SYNCTOL STATEMENT
         $PTENT ,&&TCELSIZ,,,,,(1,127)               &TCELSIZ STATEMENT
         $PTENT ,&&TGWARN,,,,,(0,101)                &TGWARN  STATEMENT
         $PTENT ,&&TIMEOPT,,SWITCH,,$RUNOPTS         &TIMEOPT STATEMENT
         $PTENT ,&&TIMEXS,,,,,(1,30)                 &TIMEXS  STATEMENT
         $PTENT ,&&TPBFSIZ,NPLX8,,,,                 &TPBFSIZ STATEMENTC
               (128,(4096+7-(TPBUFST-BUFDSECT))/8*8)                R41
         $PTENT ,&&TPIDCT,,,,,(0,255)                &TPIDCT  STATEMENT
         $PTENT ,&&WAITIME,,,,,(1,30)                &WAITIME STATEMENT
         $PTENT ,&&WARNTIM,NPLINVRT,,,,(500,15000)   &WARNTIM STATEMENT
         $PTENT ,&&XBATCHN,NPLJCL,EBCDIC             &XBATCHN STATEMENT
         $PTENT ,&&XBATCH,,SWITCH,,$RUNOPTS          &XBATCH  STATEMENT
         $PTENT ,&&XLIN,NPLXLIN,,3,0,                &XLIN(N) STATEMENTC
               (1,X'FFFFFF'),DISPLAY=NPLDXLIN                       R41
         $PTENT ,&&XPRI,NPLXPRI,,1,0,(0,15),         &XPRI(N) STATEMENTC
               DISPLAY=NPLDXPRI                                     R41
         EJECT                                                       R4
         SPACE 5                                                     R4
         $PTENT 8,CONSOLE,NPLCON                     CONSOLE  STATEMENT
         $PTENT 8,DISPLAY,NPLSHOW                    DISPLAY  STATEMENT
         $PTENT 8,HASPSSSM,NPLHSSSM,EBCDIC,8,0,      HASPSSSM STATEMENTC
               (1,8),DISPLAY=NPLDSSSM                               R41
         $PTENT 8,REPLACE,NPLREP                     REPLACE  STATEMENT
         $PTENT 8,STCMCLAS,NPLSTCMC                  STCMCLAS STATEMENT
         $PTENT 8,TSUMCLAS,NPLTSUMC                  TSUMCLAS STATEMENT
         $PTENT 7,COMPACT,NPLCMPCT                   COMPACT  STATEMENT
         $PTENT 7,DESTID,NPLDEST                     DESTID   STATEMENT
         $PTENT 7,ENDZAP,NPLENDZP                    ENDZAP   STATEMENT
         $PTENT 7,INTRDR,NPLINR                      INTRDR   STATEMENT
         $PTENT 7,NOLIST,NPLNLIST                    NOLIST   STATEMENT
         $PTENT 7,PRINTER,NPLPRINT                   PRINTERN STATEMENT
         $PTENT 7,VERIFY,NPLVER                      VERIFY   STATEMENT
         $PTENT 6,NOLOG,NPLNLOG                      NOLOG    STATEMENT
         $PTENT 6,READER,NPLRDR                      READERNN STATEMENT
         $PTENT 5,LOGON,NPLOGON                      LOGONNN  STATEMENT
         $PTENT 5,&&STC,NPLSTC,(SUBPARMS,NOSHOW)     &STC     STATEMENT
         $PTENT 5,&&TSU,NPLTSU,(SUBPARMS,NOSHOW)     &TSU     STATEMENT
         $PTENT 5,BASE,NPLBASE                       BASE     STATEMENT
         $PTENT 5,LIST,NPLLISTC                      LIST     STATEMENT
         $PTENT 5,NAME,NPLNAME                       NAME     STATEMENT
         $PTENT 5,NEWS,NPLNEWS                       NEWS     STATEMENT
         $PTENT 5,PUNCH,NPLPUNCH                     PUNCHNN  STATEMENT
         $PTENT 4,LINE,NPLLINE                       LINENNN  STATEMENT
         $PTENT 4,LOG,NPLLOGC                        LOG      STATEMENT
         $PTENT 4,REP,NPLREP                         REPLACE  STATEMENT
         $PTENT 4,VER,NPLVER                         VERIFY   STATEMENT
         $PTENT 3,RMT,NPLRMTNN                       RMTNNN   STATEMENT
         $PTENT 2,$$,NPL$$X                          $$X      STATEMENT
         $PTENT 2,B,NPLBASE                          BASE     STATEMENT
         $PTENT 2,D,NPLSHOW                          DISPLAY  STATEMENT
         $PTENT 2,R,NPLREP                           REPLACE  STATEMENT
         $PTENT 2,V,NPLVER                           VERIFY   STATEMENT
         $PTENT 1,&&,NPLCATX,(SUBPARMS,NOSHOW)       &X       STATEMENT
         $PTENT 1,$,NPLCOMND                         COMMAND  STATEMENT
         $PTENT 1,I,NPLINNN                          INNN     STATEMENT
         $PTENT 1,R,NPLRNDVM                         RNNN.DVM STATEMENT
         $PTENT 1,S,NPLSN                            SN       STATEMENT
         SPACE 1                                                     R4
NPLPTEND DS    0F                  END OF PARAMETER TABLE           R41
NPLPTENT EQU   (NPLPTEND-NPLPTBL)/PTELENG  NUMBER OF TABLE ENTRIES  R41
         AIF   ('&PRINT' NE 'OFF').PTEND                            R41
         POP   PRINT                                                R41
.PTEND   TITLE 'HASP INITIALIZATION -- CATCONVP INITIALIZATION'     R41
***********************************************************************
*                                                                     *
*        SUPPLY CATCONVP DEFAULTS, WHERE NECESSARY                    *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
NCATNIP  BALR  BASE2,0             RE-ESTABLISH                      R4
         USING *,BASE2              LOCAL ADDRESSABILITY             R4
         SPACE 1                                                     R4
         USING CATDSECT,R1         PROVIDE CAT ADDRESSABILITY        R4
         SPACE 1                                                     R4
         L     R1,$CATABLE         POINT TO 1ST CAT ENTRY            R4
         LA    R0,16               INITIALIZE                        R4
         BAL   WE,NCATPRM1          CAT ENTRIES C0 - CF              R4
         LA    WA,NRDROPST         INITIALIZE                        R4
         LA    R0,1                 STARTED TASK                     R4
         BAL   WE,NCATPRM2           CAT ENTRY                       R4
         LA    R0,15               INITIALIZE                        R4
         BAL   WE,NCATPRM1          CAT ENTRIES D1 - DF              R4
         LA    WA,NRDROPSL         INITIALIZE                        R4
         LA    R0,1                 LOGON                            R4
         BAL   WE,NCATPRM2           CAT ENTRY                       R4
         LA    R0,31               INITIALIZE                        R4
         BAL   WE,NCATPRM1          CAT ENTRIES E1 - FF              R4
         B     NCKBSP              THEN BR TO CONTINUE               R4
         SPACE 1                                                     R4
NCATPRM1 LA    WA,NRDROPSU         BATCH JOB DEFAULTS                R4
         SPACE 1                                                     R4
NCATPRM2 CLI   CATCONVP,0          TEST CATCONVP                     R4
         BNE   SKIP330             BR IF ALREADY PROVIDED            R4
         MVC   CATCONVP,0(WA)       ELSE SUPPLY DEFAULT              R4
SKIP330  LA    R1,CATEND           POINT TO NEXT CAT ENTRY           R4
         BCT   R0,NCATPRM2         LOOP THRU REQUESTED ENTRIES       R4
         SPACE 1                                                     R4
         BR    WE                  THEN RETURN                       R4
         SPACE 1                                                     R4
         DROP  R1                  KILL CAT ADDRESSABILITY           R4
         TITLE 'HASP INITIALIZATION -- SMF/RJE INITIALIZATION'       R4
***********************************************************************
*                                                                     *
*        ENSURE VALID BACKSPACE CHARACTER                             *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
NCKBSP   CLC   $BSPACE,$CCOMCHR    TEST BACKSPACE CHARACTER          R4
         BNE   NBSPOK              BR IF VALID                       R4
         MVI   $BSPACE,0            ELSE SET TO X'00'                R4
        $$WTO  NBSPMSG               AND INFORM OPERATOR OF CHANGE   R4
         SPACE 1                                                     R4
NBSPOK   DS    0H                                                    R4
         SPACE 1                                                     R4
***********************************************************************
*                                                                     *
*        DETERMINE SMF REQUIREMENT                                    *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
NSMFTEST CLI   $NUMSMFB,2          IF SMF TO BE SUPPORTED,           R4
         BNL   NINRTEST             BR TO TEST INTERNAL READER REQ'T R4
         MVI   $NUMSMFB,0            ELSE ZERO BUFFER COUNT          R4
         MVC   $GETSMFB(4),=X'1B1107FE'  AND NO-OP SMF BUFFER        R4
         MVC   $QUESMFB(2),=X'07FE'       GET/QUEUE ROUTINES         R4
         SPACE 1                                                     R4
***********************************************************************
*                                                                     *
*        ENSURE VALID INTERNAL READER SPECIFICATION                   *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
         USING $SVDSECT,WG         PROVIDE SSVT ADDRESSABILITY       R4
         SPACE 1                                                     R4
NINRTEST L     WG,$SSVT            POINT TO SSVT                     R4
         ICM   R1,15,$SVIRDRS      TEST FOR EXISTING INR DCTS        R4
         BZ    NCMCTEST            BR IF NO                          R4
         S     R1,=F'8'            BACK UP TO DCT STORAGE PREFIX     R4
         CLC   0(4,R1),=CL4'IDCT'  TEST PREFIX                       R4
         BE    NINRSET             BR IF VALID                       R4
         XC    $SVIRDRS,$SVIRDRS    ELSE RESET INR DCT POINTER       R4
         B     NCMCTEST              AND BR TO CONTINUE              R4
         SPACE 1                                                     R4
NINRSET  TM    $SVHASP,X'80'       TEST FOR JES2 RESTART             R4
         BZ    NCMCTEST            BR IF NO                          R4
         L     R1,4(,R1)           GET COUNT OF EXISTING INRS        R4
         BCTR  R1,0                 LESS TWO FOR STC                 R4
         BCTR  R1,0                  AND TSU                         R4
         STC   R1,$NUMINRS         RESET JOB INTERNAL READER REQ'T   R4
         SPACE 1                                                     R4
         DROP  WG                  KILL SSVT ADDRESSABILITY          R4
         EJECT                                                       R4
***********************************************************************
*                                                                     *
*        SET MAXIMUM CONSOLE MESSAGE COUNT                            *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
NCMCTEST CLI   $MAXCMCT,0          TEST COUNT                        R4
         BNE   NRJETEST            BR IF ALREADY PROVIDED            R4
         LH    R0,$NUMCMBS          ELSE SET                         R4
         LA    R1,255                EQUAL TO                        R4
         CLR   R0,R1                  LESSER                         R4
         BNH   SKIP340                 OF                            R4
         LR    R0,R1                    $NUMCMBS                     R4
SKIP340  STC   R0,$MAXCMCT               OR 255                      R4
         SPACE 1                                                     R4
***********************************************************************
*                                                                     *
*        DETERMINE RJE ENVIRONMENT                                    *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
NRJETEST LH    R0,$NUMLNES         GET NUMBER OF TP LINES            R4
         OC    $NUMRJE,$NUMRJE     TEST TERMINAL REQUIREMENT         R4
         BNZ   SKIP350             BR IF REMOTES DEFINED             R4
         STH   R0,$NUMRJE           ELSE SUPPLY DEFAULT              R4
SKIP350  OC    $NUMTPBF,$NUMTPBF   TEST TP BUFFER REQUIREMENT        R4
         BNZ   *+8                 BR IF BUFFER COUNT PROVIDED       R4
         STH   R0,$NUMTPBF          ELSE SUPPLY DEFAULT              R4
SKIP360  LTR   R0,R0               TEST TP LINE REQUIREMENT          R4
         BNZ   NLOGLNES            BR IF LINES DEFINED               R4
         STH   R0,$NUMRJE           ELSE RESET TERMINAL COUNT,       R4
         MVI   $SPOLMSG,0            MESSAGE SPOOL BUFFER COUNT,     R4
         STH   R0,$NUMTPBF            AND TP BUFFER COUNT            R4
         ST    R0,NLOGLINE         ALSO CLEAR LOGICAL LINE COUNT     R4
         ST    R0,$MLLMPCE         NEED NO LINE MANAGER PROCESSOR    R4
         ST    R0,$MCONPCE         NEED NO REMOTE CONSOLE PROCESSOR  R4
         B     NSPOLMSG            BR TO CONTINUE                    R4
         EJECT                                                      R41
         SPACE 1                                                     R4
NLOGLNES LA    R1,$LNEDCT-(DCTCHAIN-DCTDSECT)  PREPARE TO SCAN DCTS  R4
         SLR   WA,WA               CLEAR LOGICAL LINE COUNT          R4
         SPACE 1                                                     R4
         USING DCTDSECT,R1         PROVIDE DCT ADDRESSABILITY        R4
         SPACE 1                                                     R4
NXTLINE  L     R1,DCTCHAIN         POINT TO NEXT LINE DCT            R4
         TM    MDCTTYPE,DCTPSNA    TEST FOR LOGICAL LINE             R4
         BZ    SKIP370             BR IF NO                          R4
         LA    WA,1(,WA)            ELSE BUMP LOGICAL LINE COUNT     R4
SKIP370  BCT   R0,NXTLINE          BR IF ANOTHER LINE DCT            R4
         SPACE 1                                                     R4
         ST    WA,NLOGLINE         STORE COUNT OF LOGICAL LINES      R4
         SPACE 1                                                     R4
         DROP  R1                  KILL DCT ADDRESSABILITY           R4
         EJECT                                                       R4
***********************************************************************
*                                                                     *
*        FINALIZE RAT -- OBTAIN RJE DEVICE COUNTS                     *
*                                                                     *
*        ENSURE TP BUFFER SIZE ADEQUATE FOR ALL SPECIFIED REMOTES     *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
         USING RATDSECT,WD         PROVIDE RAT ADDRESSABILITY        R4
         SPACE 1                                                     R4
INITRJE  SLR   R1,R1               CLEAR FOR INSERTS                 R4
         LR    WA,R1               CLEAR                             R4
         LR    WB,R1                WORK                             R4
         LR    WC,R1                 REGISTERS                       R4
         LH    WF,$TPBFSIZ         LOAD INITIAL TP BUFFER SIZE       R4
         LH    R0,$NUMRJE          GET NUMBER OF REMOTES             R4
         L     WD,$RAT             POINT TO 1ST RAT ELEMENT          R4
         SPACE 1                                                     R4
NRJEDEVS LH    WE,RATRDCT          GET DISCONNECT INTERVAL           R4
         LA    WE,31(,WE)          ROUND UP                          R4
         SRL   WE,5                DIVIDE BY 32                      R4
         STC   WE,RATDINTV         SET DISCONNECT INTERVAL           R4
         STC   WE,RATIDINV         SAVE INITIAL MAX DISC INTERVAL   R41
         MVI   RATSYS,1            SET SYSTEM ID                     R4
         CLI   RATTYPE,DCTP2770    TEST TERMINAL TYPE                R4
         BNE   NOT2770             BR IF NOT 2770                    R4
         TM    RATFEAT,DCTPBEXP    TEST FOR BUFFER EXPANSION         R4
         BZ    SKIP380             BR IF NO                          R4
         CH    WF,*+10              ELSE ENSURE                      R4
         BNL   SKIP380               MINIMUM                         R4
         LA    WF,264                 TP BUFFER SIZE                 R4
SKIP380  TM    RATFEAT,DCTPABEX    TEST FOR ADD'L BUFFER EXPANSION   R4
         BZ    NOT2770             BR IF NO                          R4
         CH    WF,*+10              ELSE ENSURE                      R4
         BNL   NOT2770               MINIMUM                         R4
         LA    WF,520                 TP BUFFER SIZE                R41
         SPACE 1                                                     R4
NOT2770  CLI   RATTYPE,DCTP2780    TEST TERMINAL TYPE                R4
         BNE   SKIP390             BR IF NOT 2780                    R4
         CH    WF,*+10              ELSE ENSURE                      R4
         BNL   SKIP390               MINIMUM                         R4
         LA    WF,400                 TP BUFFER SIZE                 R4
SKIP390  CLI   RATTYPE,DCTP3780    TEST TERMINAL TYPE                R4
         BNE   NRJETYPE            BR IF NOT 3780                    R4
         CH    WF,*+10              ELSE ENSURE                      R4
         BNL   SKIP400               MINIMUM                         R4
         LA    WF,520                 TP BUFFER SIZE                 R4
SKIP400  OI    RATFEAT,DCTPABEX    FORCE ADDITIONAL BUFFERS          R4
         CLI   RATNUMPU,0          TEST PUNCH COUNT                  R4
         BE    NRJEHDW             BR IF ZERO                        R4
         MVI   RATTYPE,DCTP2770     ELSE RE-DEFINE AS 2770           R4
         EJECT                                                       R4
NRJETYPE TM    RATTYPE,DCTPLU1     IF NOT SNA REMOTE                R41
         BNO   NRJEBSC              GO TEST FOR BSC CPU TYPE        R41
         TM    RATCONF,RATCONFC    IF NO CONSOLE                    R41
         BNO   NRJECT               GO COUNT DEVICES                R41
         IC    R1,RATNUMPR         INCREMENT                        R41
         LA    R1,1(,R1)            NUMBER OF PRINTERS BY 1         R41
         STC   R1,RATNUMPR           TO ALLOW FOR CONSOLE DCT       R41
         B     NRJECT              GO COUNT DEVICES                 R41
         SPACE 1                                                    R41
NRJEBSC  TM    RATTYPE,DCTPCPU     TEST TERMINAL TYPE               R41
         BZ    NRJEHDW             BR IF NOT CPU TERMINAL            R4
         TM    RATFMT,DCTPROG      TEST FORMAT TYPE                  R4
         BZ    NRJEHDW             BR IF NOT PROGRAMMABLE            R4
         NI    RATFMT,DCTPROG       ELSE RESET HARDWARE FORMATS      R4
         NI    RATFEAT,DCTPTRSP      AND FEATURES                    R4
         CLI   RATNUMRD,0          ENSURE                            R4
         BNE   SKIP410              READER COUNT                     R4
         MVI   RATNUMRD,1            AT LEAST 1                      R4
SKIP410  CLI   RATNUMPR,0          ENSURE                            R4
         BNE   NRJECT               PRINTER COUNT                    R4
         MVI   RATNUMPR,1            AT LEAST 1                      R4
         B     NRJECT              THEN BR TO TALLY DEVICES          R4
         SPACE 1                                                     R4
NRJEHDW  MVI   RATNUMRD,1          FORCE NUMBER OF READERS           R4
         MVI   RATNUMPR,1           AND PRINTERS TO 1                R4
         CLI   RATNUMPU,0          ENSURE                            R4
         BE    NRJECT               NO MORE THAN                     R4
         MVI   RATNUMPU,1            1 PUNCH                         R4
         SPACE 1                                                     R4
NRJECT   IC    R1,RATNUMRD         COUNT NUMBER                      R4
         ALR   WA,R1                OF READERS                       R4
         IC    R1,RATNUMPR         COUNT NUMBER                      R4
         ALR   WB,R1                OF PRINTERS                      R4
         IC    R1,RATNUMPU         COUNT NUMBER                      R4
         ALR   WC,R1                OF PUNCHES                       R4
         LA    WD,RATEND           POINT TO NEXT RAT                 R4
         BCT   R0,NRJEDEVS         LOOP THRU ALL RATS                R4
         SPACE 1                                                     R4
***********************************************************************
*                                                                     *
*        SET REMOTE READER, PRINTER AND PUNCH COUNTS                  *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
         STH   WA,$NUMTPRD         SET REMOTE READER COUNT           R4
         STH   WB,$NUMTPPR         SET REMOTE PRINTER COUNT          R4
         STH   WC,$NUMTPPU         SET REMOTE PUNCH COUNT            R4
         STH   WF,$TPBFSIZ         SET CURRENT TP BUFFER SIZE        R4
         EJECT                                                       R4
***********************************************************************
*                                                                     *
*        SET MESSAGE SPOOL BUFFER COUNT                               *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
NSPOLMSG LH    R6,$BUFSIZE         GET JES2 BUFFER SIZE              R4
         CLI   $SPOLMSG,2          IF MSG SPOOL BUFFER              R41
         BNL   SKIP420              COUNT LESS THAN 2,              R41
         MVI   $SPOLMSG,0            RESET IT TO 0                  R41
SKIP420  CLI   $SPOLMSG,255        TEST MSG SPOOL BUFFER COUNT       R4
         BNE   NSPOLMOK            BR IF NUMBER PROVIDED             R4
         LA    R1,2048              ELSE SET                         R4
         ALR   R1,R1                 DEFAULT                         R4
         SLR   R0,R0                  EQUAL TO                       R4
         DR    R0,R6                   4K DIVIDED                    R4
         MH    R1,=H'6'                 BY $BUFSIZE                  R4
         STC   R1,$SPOLMSG               TIMES 6                     R4
         SPACE 1                                                     R4
NSPOLMOK DS    0H                                                    R4
         TITLE 'HASP INITIALIZATION -- LOCAL/REMOTE DEVICE PCE/DCT GENEC
               RATION'                                               R4
***********************************************************************
*                                                                     *
*        COMPUTE STORAGE FOR PRIMARY HASP PCES                        *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
NPCEGEN  SLR   WB,WB               INITIALIZE STORAGE REQUIREMENT    R4
         TM    $RUNOPTS,$TIMEOPT   TEST TIME EXCESSION OPTION        R4
         BO    SKIP450             BR IF SELECTED                    R4
         ST    WB,$XTIMPCE          ELSE INDICATE NO PCE             R4
SKIP450  OC    $PRIRATE,$PRIRATE   TEST FOR PRIORITY AGING           R4
         BNZ   SKIP460             BR IF SELECTED                    R4
         ST    WB,$PRAGPCE          ELSE INDICATE NO PCE             R4
SKIP460  OC    $NUMRJE,$NUMRJE     TEST RJE REQUIREMENT              R4
         BZ    SKIP470             BR IF NO REMOTES DEFINED          R4
         LA    WB,$MWORKSZ          ELSE RESET STORAGE REQUIREMENT   R4
SKIP470  LA    R0,NPCES            GET PRIMARY PCE COUNT             R4
         LA    WD,NPCETBL-6        PREPARE TO SCAN PRIMARY PCE TABLE R4
         SPACE 1                                                     R4
NPCECORE LA    WD,6(,WD)           POINT TO NEXT TABLE ENTRY         R4
         LH    WC,0(,WD)           GET OFFSET OF HCT ENTRY           R4
         L     WC,0(WC,BASE1)      GET PROCESSOR ADDR FROM PCE ENTRY R4
         LTR   WC,WC               IF NO PCE REQUIRED,               R4
         BZ    SKIP480              BR TO AVOID ADDING STORAGE       R4
         AH    WB,4(,WD)             ELSE ADD PCE REQUIREMENT        R4
SKIP480  BCT   R0,NPCECORE         LOOP THRU ALL PRIMARY PCES        R4
         EJECT                                                       R4
***********************************************************************
*                                                                     *
*        COMPUTE VARIABLE PCE, DCT, ACE AND SMF BUFFER STORAGE        *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
         LH    R1,$BUFSIZE         CALCULATE DEFAULT VALUE           R4
         D     R0,=A(80)            FOR &NOPRCCW AND &NOPUCCW        R4
         CLI   $NOPRCCW,0          TEST FOR PROVIDED VALUE           R4
         BNE   SKIP490             BR IF DEFAULT PROVIDED            R4
         STC   R1,$NOPRCCW          ELSE USE CALCULATED VALUE        R4
SKIP490  CLI   $NOPUCCW,0          TEST FOR PROVIDED VALUE           R4
         BNE   SKIP500             BR IF DEFAULT PROVIDED            R4
         STC   R1,$NOPUCCW          ELSE USE CALCULATED VALUE        R4
SKIP500  SLR   WD,WD               GET NUMBER                        R4
         IC    WD,$NUMRDRS          OF LOCAL READERS                 R4
         M     WC,=A(((PCEWORK-PCEDSECT+RDRPCEWS+3)/4*4+DCTRDEND+7-DCTDC
               SECT)/8*8)          PCE/DCT REQUIREMENT               R4
         ALR   WB,WD               ADD TO STORAGE TOTAL              R4
         SLR   R10,R10             BACKSPACE                         R4
         IC    R10,$BSPNTE          TABLE                            R4
         MH    R10,=H'7'             SIZE                            R4
         STH   R10,$BSPSIZ         STORE IN HCT                      R4
         LA    R10,3(,R10)         ROUND TO                          R4
         N     R10,=F'-4'           NEXT FULLWORD                    R4
         ST    R10,NBSPSIZ         SAVE FOR LATER USE                R4
         SLR   WA,WA               GET TOTAL                         R4
         IC    WA,$NUMPRTS          NUMBER OF                        R4
         SLR   WD,WD                 REQUIRED LOCAL                  R4
         IC    WD,$NUMPUNS            AND REMOTE                     R4
         ALR   WA,WD                   PRINTERS                      R4
         AH    WA,$NUMTPPR              AND                          R4
         AH    WA,$NUMTPPU               PUNCHES                     R4
         LA    R1,(PBSPTBL+3-PCEDSECT)/4*4(,R10)  DCT OFFSET         R4
         IC    WD,$NUMCLAS                     COMPUTE LENGTH        R4
         LA    WD,DCTCLASS+1+7-DCTDSECT(R1,WD)  OF INDIVIDUAL        R4
         N     WD,=F'-8'                         PCE/DCT PAIR        R4
         MR    WC,WA               MULTIPLY BY TOTAL PRINT/PUNCH CT  R4
         ALR   WB,WD               ADD TO STORAGE TOTAL              R4
         IC    WC,$NUMINRS         GET NUMBER OF INTERNAL READERS    R4
         LA    WC,2(,WC)           ADD 2 FOR TSU AND STC             R4
         MH    WC,=AL2(PCEWORK-PCEDSECT+(RDRPCEWS+7)/8*8)  PCE REQ'T R4
         ALR   WB,WC               ADD TO STORAGE TOTAL              R4
         LH    WC,$NUMLNES                        ADD RJE            R4
         S     WC,NLOGLINE                        (- LOGICAL LINES)  R4
         MH    WC,=AL2((MDCTLEND+7-DCTDSECT)/8*8)  LINE DCT          R4
         ALR   WB,WC                                STORAGE REQ'T    R4
         L     WC,NLOGLINE                        ADD LOGICAL LINES  R4
         MH    WC,=AL2((MDCTVLND+7-DCTDSECT)/8*8) DCT REQUIREMENT    R4
         ALR   WB,WC                                TO TOTAL STORAGE R4
         LH    WA,$NUMTPRD         GET REMOTE READER COUNT           R4
         MH    WA,=AL2(((PCEWORK-PCEDSECT+RJEPCEWS+3)/4*4+DCTRDEND+7-DCC
               TDSECT)/8*8)        PCE/DCT REQUIREMENT               R4
         ALR   WB,WA               ADD TO STORAGE TOTAL              R4
         LH    WC,$NUMLOGS                       ADD LOGON           R4
         MH    WC,=AL2((MDCTLGND+7-DCTDSECT)/8*8) DCT REQUIREMENT    R4
         ALR   WB,WC                               TO TOTAL STORAGE  R4
         LH    WA,$NUMACE          ADD STORAGE                       R4
         MH    WA,=AL2(ACEL)        FOR AUTOMATIC                    R4
         ALR   WB,WA                 COMMAND ELEMENTS                R4
         SLR   WC,WC               COMPUTE SMF                       R4
         IC    WC,$NUMSMFB          BUFFER STORAGE                   R4
         MH    WC,=Y(SMFLNG)         REQUIREMENT                     R4
         LA    WB,4095(WB,WC)      ROUND UP STORAGE REQUIREMENT      R4
         N     WB,=F'-4096'         TO NEXT 4K                       R4
         B     NVARGETM            BR TO GET STORAGE                 R4
         EJECT                                                       R4
***********************************************************************
*                                                                     *
*        OBTAIN VARIABLE PCE, DCT, ACE AND SMF BUFFER STORAGE         *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
NVARGETM LR    R0,WB               RELOAD STORAGE REQUIREMENT        R4
         GETMAIN RU,LV=(0),BNDRY=PAGE  REQUEST PERMANENT STORAGE     R4
         LR    WA,R1               CLEAR ACQUIRED                    R4
         MVCL  WA,R14               STORAGE                          R4
         EJECT                                                       R4
***********************************************************************
*                                                                     *
*        FORMAT HASP PRIMARY PCES                                     *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
         USING MAPDSECT,WG         PROVIDE MOD MAP ADDRESSABILITY    R4
         SPACE 1                                                     R4
         L     WG,$HASPMAP         POINT TO HASP MODULE MAP          R4
         OC    $NUMRJE,$NUMRJE     TEST RJE REQUIREMENT              R4
         BZ    SKIP510             BR IF NO REMOTES DEFINED          R4
         ST    R1,$MWORK            ELSE SET POINTER TO RTAM WORK SP R4
         LA    R1,$MWORKSZ(,R1)      AND SKIP OVER WORK SPACE        R4
SKIP510  LA    R0,NPCES                     PREPARE                  R4
         LA    WD,NPCETBL-6                  TO FORMAT               R4
         LA    WA,$PCEORG-(PCENEXT-PCEDSECT)  PRIMARY PCES           R4
         SPACE 1                                                     R4
         USING PCEDSECT,R1         PROVIDE PCE ADDRESSABILITY        R4
         SPACE 1                                                     R4
NPCEPRIM LA    WD,6(,WD)           POINT TO NEXT TABLE ENTRY         R4
         LH    WE,0(,WD)           GET OFFSET OF HCT ENTRY           R4
         L     WB,0(WE,BASE1)      LOAD PROCESSOR ADDRESS            R4
         LTR   WB,WB               TEST PROCESSOR ADDRESS            R4
         BZ    NPCENEXT            BR IF NONE                        R4
         LH    WC,2(,WD)            ELSE GET PCE ID                  R4
         BAL   LINK,INITPCE          AND INITIALIZE PCE              R4
         ST    R1,0(WE,BASE1)      SET PCE ADDRESS IN HCT            R4
         AH    R1,4(,WD)           POINT TO NEXT PCE                 R4
         SPACE 1                                                     R4
NPCENEXT BCT   R0,NPCEPRIM         LOOP THRU ALL PRIMARY PCES        R4
         SPACE 1                                                     R4
         L     WE,$PCEORG          POINT TO 1ST PCE                  R4
         ST    R0,PCEPREV-PCEDSECT(,WE)  CLEAR ADDR OF PREVIOUS PCE  R4
         ST    R0,$DCTPOOL         CLEAR TEMP DCT CHAIN ADDRESS      R4
         LA    WE,$DCTPOOL-(DCTCHAIN-DCTDSECT)  INITIAL CHAIN ADDR   R4
         SPACE 1                                                     R4
         USING DCTDSECT,WE         PROVIDE DCT ADDRESSABILITY        R4
         SPACE 1                                                     R4
         ICM   R0,1,$NUMRDRS       GET NUMBER OF READERS             R4
         BZ    INITPRTS            BR IF NONE                        R4
         EJECT                                                       R4
***********************************************************************
*                                                                     *
*        FORMAT LOCAL READER PCES AND DCTS                            *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
         L     WB,MAPRDRA          PROCESSOR ADDRESS                 R4
         LH    WC,=AL2(256*PCELCLID+PCERDRID)  PCE ID                R4
         LA    WD,$RDRDCT-(DCTCHAIN-DCTDSECT)  TEMPORARY DCTS        R4
         LA    WF,DCTRDEND-1-DCTDSECT  DCT MOVE LENGTH               R4
         SPACE 1                                                     R4
NRDRLOOP BAL   LINK,INITPCE        INITIALIZE PCE                    R4
         LA    R10,PCEWORK+(RDRPCEWS+3)/4*4  SET DCT ADDRESS         R4
         ST    R10,PCEDCT                     IN PCE           @OZ32566
         LR    R1,R10              RELOAD DCT ADDRESS                R4
         BAL   LINK,INITDCT        INITIALIZE DCT                    R4
         MVC   DCTPRSYS,$OWNSYS    SET SYSTEM ID                     R4
         CLI   DCTPRRTE,0          TEST FOR REMOTE/LOCAL ROUTING     R4
         BE    NRDPRRTE            BR IF NO                          R4
         TM    DCTFLAGS,DCTPRLCL   TEST FOR SPECIAL LOCAL ROUTING    R4
         BZ    NRDPRRTE            BR IF NO                          R4
         MVI   DCTPRSYS,0           ELSE RESET SYSTEM ID             R4
         SPACE 1                                                     R4
NRDPRRTE CLC   DCTPRSYS,$OWNSYS    TEST FOR ROUTE TO REMOTE          R4
         BNE   NRDNTOWN            BR IF NO                         R41
         CLC   DCTPRRTE,$NUMRJE+1  TEST FOR VALID REMOTE NUMBER      R4
         BH    NBADRTE             BR IF NO                          R4
NRDNTOWN DS    0H                                                   R41
         MVC   DCTPUSYS,$OWNSYS    SET SYSTEM ID                     R4
         CLI   DCTPURTE,0          TEST FOR REMOTE/LOCAL ROUTING     R4
         BE    NRDPURTE            BR IF NO                          R4
         TM    DCTFLAGS,DCTPULCL   TEST FOR SPECIAL LOCAL ROUTING    R4
         BZ    NRDPURTE            BR IF NO                          R4
         MVI   DCTPUSYS,0           ELSE RESET SYSTEM ID             R4
         SPACE 1                                                     R4
NRDPURTE CLC   DCTPUSYS,$OWNSYS    TEST FOR ROUTE TO REMOTE          R4
         BNE   NRDNXT              BR IF NO                          R4
         CLC   DCTPURTE,$NUMRJE+1  TEST FOR VALID REMOTE NUMBER      R4
         BH    NBADRTE             BR IF NO                          R4
         SPACE 1                                                     R4
NRDNXT   NI    DCTFLAGS,255-DCTPRLCL-DCTPULCL  CLEAR ANY FLAGS       R4
         BCT   R0,NRDRLOOP         LOOP THRU ALL READERS             R4
         EJECT                                                       R4
NRDRXIT  B     INITPRTS            BR IF NO ROUTE CODE ERRORS        R4
        $EXIT  NGQUITM              ELSE ISSUE 'QUIT' MSG AND QUIT   R4
         SPACE 1                                                     R4
NBADRTE  STM   R14,R12,12(R13)     SAVE REGISTERS                    R4
         L     R1,=A(NRTEMSG)      POINT TO MESSAGE TEXT             R4
         MVC   NRTEDEV-NRTEMSG(,R1),DCTDEVN  SET DEVICE NAME         R4
        $$WTO  (R1)                ISSUE ERROR MESSAGE TO OPERATOR   R4
         LM    R14,R12,12(R13)     RESTORE REGISTERS                 R4
         MVI   NRDRXIT+1,0         FORCE QUIT AFTER TESTING ALL RDRS R4
         B     NRDNXT              BR TO TEST NEXT READER            R4
         SPACE 1                                                     R4
INITPRTS SLR   R15,R15                      DCT                      R4
         IC    R15,$NUMCLAS                  MOVE                    R4
         LA    WF,DCTCLASS+1-1-DCTDSECT(,R15)  LENGTH                R4
         L     WB,MAPPPI1A         PROCESSOR ADDRESS                 R4
         ICM   R0,1,$NUMPRTS       GET NUMBER OF PRINTERS            R4
         BZ    INITPUNS            BR IF NONE                        R4
         SPACE 1                                                     R4
***********************************************************************
*                                                                     *
*        FORMAT LOCAL PRINTER PCES AND DCTS                           *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
         LH    WC,=AL2(256*(PCEPRSID+PCELCLID)+PCEPRTID)  PCE ID     R4
         LA    WD,$PRTDCT-(DCTCHAIN-DCTDSECT)  TEMPORARY DCTS        R4
         SPACE 1                                                     R4
NPRTLOOP BAL   LINK,INITPCE        INITIALIZE PCE                    R4
         MVI   PBUFOPT,2           ASSUME DOUBLE BUFFERING           R4
         TM    $PRTOPTS,$PRTBOPT   TEST ASSUMPTION                   R4
         BO    SKIP530             BR IF VALID                       R4
         MVI   PBUFOPT,1            ELSE PROVIDE SINGLE BUFFERING    R4
SKIP530  BAL   LINK,NPPDCT         INITIALIZE PPPWORK AND DCT        R4
         LA    LINK,DCTCLASS(R15)  POINT TO END OF CLASS LIST        R4
         MVI   0(LINK),C' '        SET DCTCLASS TERMINATOR           R4
         CLI   $NUMPRTS,9          TEST PRINTER COUNT                R4
         BH    NPRTGT9             BR IF GREATER THAN 9             R41
         MVC   DCTDEVN+7(1),DCTDEVN+6  ELSE ALTER                    R4
         MVC   DCTDEVN+5(2),=C'ER'      DEVICE NAME FORMAT           R4
NPRTGT9  CLI   DCTROUTE,0          TEST FOR LOCAL ROUTING           R41
         BE    SKIP540             BR IF NO                         R41
         MVI   DCTSYS,0             ELSE RESET SYSTEM ID            R41
SKIP540  BCT   R0,NPRTLOOP         LOOP THRU ALL PRINTERS            R4
         EJECT                                                       R4
INITPUNS ICM   R0,1,$NUMPUNS       GET NUMBER OF PUNCHES             R4
         BZ    INRPCES             BR IF NONE                        R4
         SPACE 1                                                     R4
***********************************************************************
*                                                                     *
*        FORMAT LOCAL PUNCH PCES AND DCTS                             *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
         LH    WC,=AL2(256*(PCEPUSID+PCELCLID)+PCEPUNID)  PCE ID     R4
         LA    WD,$PUNDCT-(DCTCHAIN-DCTDSECT)  TEMPORARY DCTS        R4
         SPACE 1                                                     R4
NPUNLOOP BAL   LINK,INITPCE        INITIALIZE PCE                    R4
         MVI   PBUFOPT,2           ASSUME DOUBLE BUFFERING           R4
         TM    $PRTOPTS,$PUNBOPT   TEST ASSUMPTION                   R4
         BO    SKIP550             BR IF VALID                       R4
         MVI   PBUFOPT,1            ELSE PROVIDE SINGLE BUFFERING    R4
SKIP550  BAL   LINK,NPPDCT         INITIALIZE PPPWORK AND DCT        R4
         LA    LINK,DCTCLASS(R15)  POINT TO END OF CLASS LIST        R4
         MVI   0(LINK),C' '        SET DCTCLASS TERMINATOR           R4
         CLI   DCTROUTE,0          TEST FOR LOCAL ROUTING           R41
         BE    *+8                 BR IF NO                         R41
         MVI   DCTSYS,0             ELSE RESET SYSTEM ID            R41
         BCT   R0,NPUNLOOP         LOOP THRU ALL PUNCHES             R4
         EJECT                                                       R4
INRPCES  IC    R0,$NUMINRS         GET NUMBER OF INTERNAL READERS    R4
         AH    R0,=H'2'            ADD 2 FOR TSU AND STC             R4
         SPACE 1                                                     R4
***********************************************************************
*                                                                     *
*        FORMAT INTERNAL READER PCES                                  *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
         L     WB,MAPRDRA          PROCESSOR ADDRESS                 R4
         LH    WC,=AL2(256*PCEINRID+PCERDRID)  PCE ID                R4
         SPACE 1                                                     R4
         BAL   LINK,INITPCE        INITIALIZE PCE                    R4
         LA    R1,PCEWORK-PCEDSECT+(RDRPCEWS+7)/8*8(,R1)  NEXT PCE   R4
         BCT   R0,INITPCE          LOOP THRU ALL INTERNAL READERS    R4
         SPACE 1                                                     R4
         DROP  WG                  KILL MOD MAP ADDRESSABILITY       R4
         SPACE 1                                                     R4
         ICM   R0,15,NLOGLINE      TEST NUMBER OF LOGICAL LINES      R4
         BNZ   SKIP560             NON ZERO, GO GENERATE LOGON DCTS  R4
         STH   R0,$NUMLOGS         ZERO COUNT OF LOGON DCTS          R4
SKIP560  ICM   R0,3,$NUMLOGS       GET NUMBER OF LOGON DCTS          R4
         BZ    NITRJE              BRANCH IF NONE                    R4
         SPACE 1                                                     R4
***********************************************************************
*                                                                     *
*        FORMAT VTAM INTERFACE LOGON DCTS                             *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
         LA    WD,$LOGNDCT-(DCTCHAIN-DCTDSECT) TEMPORARY DCTS        R4
         LA    WF,MDCTLGND-1-DCTDSECT  DCT MOVE LENGTH               R4
         SPACE 1                                                     R4
         BAL   LINK,INITDCT        INITIALIZE DCTS                   R4
         BCT   R0,INITDCT          LOOP THRU ALL LOGON DCTS          R4
         EJECT                                                       R4
NITRJE   ICM   R0,3,$NUMLNES       GET NUMBER OF RJE LINES           R4
         BZ    INITACES            BR IF NONE                        R4
         SPACE 1                                                     R4
***********************************************************************
*                                                                     *
*        FORMAT RJE LINE DCTS AND REMOTE TERMINAL PCES AND DCTS       *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
         LA    WD,$LNEDCT-(DCTCHAIN-DCTDSECT)  TEMPORARY DCTS        R4
         SPACE 1                                                     R4
NLNELOOP LA    WF,MDCTLEND-1-DCTDSECT  PICK UP LINE DCT SIZE         R4
         L     WB,DCTCHAIN-DCTDSECT(,WD) PICK UP TEMPORARY DCT ADDR  R4
         TM    MDCTTYPE-DCTDSECT(WB),DCTPSNA TEST FOR LOGICAL LINE   R4
         BZ    SKIP570             NO, SKIP - USE PRELOADED DCT SIZE R4
         LA    WF,MDCTVLND-1-DCTDSECT USE LOGICAL LINE DCT SIZE      R4
SKIP570  BAL   LINK,INITDCT        INITIALIZE DCT                    R4
         BCT   R0,NLNELOOP         LOOP THRU ALL LINE DCTS           R4
         SPACE 1                                                     R4
         USING RATDSECT,R15        PROVIDE RAT ADDRESSABILITY        R4
         SPACE 1                                                     R4
         L     R15,$RAT            POINT TO 1ST RAT ELEMENT          R4
         LH    WG,$NUMRJE          GET NUMBER OF REMOTES             R4
         SPACE 1                                                     R4
NRMTDEV  ICM   R0,1,RATNUMRD       GET NUMBER OF READERS             R4
         BZ    NRMTPRT             BR IF NONE                        R4
         L     WB,$HASPMAP         POINT TO HASP MODULE MAP          R4
         L     WB,MAPRDRA-MAPDSECT(,WB)  PROCESSOR ADDRESS           R4
         LH    WC,=AL2(256*PCERJEID+PCERDRID)  PCE ID                R4
         LA    WF,DCTRDEND-1-DCTDSECT  DCT MOVE LENGTH               R4
         SPACE 1                                                     R4
NTPRDLUP BAL   LINK,INITPCE        INITIALIZE PCE                    R4
         LA    R10,PCEWORK+(RJEPCEWS+3)/4*4  SET DCT ADDRESS         R4
         ST    R10,PCEDCT                     IN PCE           @OZ32566
         LR    R1,R10              RELOAD DCT ADDRESS                R4
         BAL   LINK,INITPDCT       INITIALIZE DCT                    R4
         MVI   DCTDEVTP,DCTRJR     INDICATE REMOTE READER            R4
         BCT   R0,NTPRDLUP         LOOP THRU ALL READERS             R4
         EJECT                                                       R4
NRMTPRT  L     WB,$HASPMAP         POINT TO HASP MODULE MAP          R4
         L     WB,MAPPPI1A-MAPDSECT(,WB)  PROCESSOR ADDRESS          R4
         IC    WF,$NUMCLAS                   DCT MOVE                R4
         LA    WF,DCTCLASS+1-1-DCTDSECT(,WF)  LENGTH                 R4
         ICM   R0,1,RATNUMPR       GET NUMBER OF PRINTERS            R4
         BZ    NRMTPUN             BR IF NONE                        R4
         LH    WC,=AL2(256*(PCEPRSID+PCERJEID)+PCEPRTID)  PCE ID     R4
         SPACE 1                                                     R4
NTPPRLUP BAL   LINK,INITPCE        INITIALIZE PCE                    R4
         MVI   PBUFOPT,2           ASSUME DOUBLE BUFFERING           R4
         TM    $PRTOPTS,$RPRBOPT   TEST ASSUMPTION                   R4
         BO    SKIP580             BR IF VALID                       R4
         MVI   PBUFOPT,1            ELSE PROVIDE SINGLE BUFFERING    R4
SKIP580  BAL   LINK,NTPPPDCT       INITIALIZE PPPWORK AND DCT        R4
         MVI   DCTDEVTP,DCTRPR     INDICATE REMOTE PRINTER           R4
         BCT   R0,NTPPRLUP         LOOP THRU ALL PRINTERS            R4
         SPACE 1                                                     R4
NRMTPUN  ICM   R0,1,RATNUMPU       GET NUMBER OF PUNCHES             R4
         BZ    NRMTNEXT            BR IF NONE                        R4
         LH    WC,=AL2(256*(PCEPUSID+PCERJEID)+PCEPUNID)  PCE ID     R4
         SPACE 1                                                     R4
NTPPULUP BAL   LINK,INITPCE        INITIALIZE PCE                    R4
         MVI   PBUFOPT,2           ASSUME DOUBLE BUFFERING           R4
         TM    $PRTOPTS,$RPUBOPT   TEST ASSUMPTION                   R4
         BO    SKIP590             BR IF VALID                       R4
         MVI   PBUFOPT,1            ELSE PROVIDE SINGLE BUFFERING    R4
SKIP590  BAL   LINK,NTPPPDCT       INITIALIZE PPPWORK AND DCT        R4
         MVI   DCTDEVTP,DCTRPU     INDICATE REMOTE PUNCH             R4
         BCT   R0,NTPPULUP         LOOP THRU ALL PUNCHES             R4
         SPACE 1                                                     R4
NRMTNEXT LA    R15,RATEND          POINT TO NEXT RAT                 R4
         BCT   WG,NRMTDEV          LOOP THRU ALL REMOTE TERMINALS    R4
         SPACE 1                                                     R4
         DROP  WE,R15              KILL DCT, RAT ADDRESSABILITY      R4
         TITLE 'HASP INITIALIZATION -- ACE/SMF BUFFER POOL CREATION' R4
***********************************************************************
*                                                                     *
*        CONTRUCT AUTOMATIC COMMAND ELEMENT CHAIN                     *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
INITACES L     WA,$ACTABLE              SET POINTER                  R4
         ST    R1,ACTACEF-ACTDSECT(,WA)  TO 1ST ACE                  R4
         LH    R0,$NUMACE          GET NUMBER OF ACES                R4
         SPACE 1                                                     R4
NACELOOP LR    WC,R1               RELOAD ACE ADDRESS                R4
         LA    R1,ACEL(,R1)        POINT TO NEXT ACE                 R4
         ST    R1,ACEACE-ACEDSECT(,WC)  SET CHAIN ADDRESS            R4
         BCT   R0,NACELOOP         LOOP THRU ALL ACES                R4
         SPACE 1                                                     R4
         ST    R0,ACEACE-ACEDSECT(,WC)  RESET LAST CHAIN ADDRESS     R4
         SPACE 2                                                     R4
***********************************************************************
*                                                                     *
*        INITIALIZE SMF BUFFER POOL                                   *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
         ICM   R0,1,$NUMSMFB       GET NUMBER OF SMF BUFFERS         R4
         BZ    NKORFREE            BR IF NONE                        R4
         ST    R1,$SMFFREE          ELSE SET POINTER TO 1ST BUFFER   R4
         SPACE 1                                                     R4
NSMFLOOP LR    WC,R1               RELOAD BUFFER ADDRESS             R4
         LA    R1,SMFLNG(,R1)      POINT TO NEXT BUFFER              R4
         ST    R1,0(,WC)           SET CHAIN ADDRESS                 R4
         BCT   R0,NSMFLOOP         LOOP THRU ALL BUFFERS             R4
         SPACE 1                                                     R4
         ST    R0,0(,WC)           RESET LAST CHAIN ADDRESS          R4
         SPACE 2                                                     R4
***********************************************************************
*                                                                     *
*        FREE TEMPORARY DCT STORAGE                                   *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
NKORFREE L     R1,NDCTSTOR         GET ADDRESS OF TEMPORARY STORAGE  R4
         L     R0,0(,R1)           GET SIZE OF TEMPORARY STORAGE     R4
         FREEMAIN R,LV=(0),A=(1)   FREE TEMPORARY STORAGE            R4
        TITLE 'HASP INITIALIZATION -- DCT POOL HEADER DETERMINATION' R4
***********************************************************************
*                                                                     *
*        SETUP HCT POINTER TO DCT CHAINS                              *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
         LA    WC,DCTRDR           LOCATE                            R4
         LA    R1,$RDRDCT           FIRST                            R4
         BAL   LINK,NDCT1LOC         LOCAL READER DCT                R4
         LA    WC,DCTPRT           LOCATE                            R4
         LA    R1,$PRTDCT           FIRST                            R4
         BAL   LINK,NDCT1LOC         LOCAL PRINTER DCT               R4
         LA    WC,DCTPUN           LOCATE                            R4
         LA    R1,$PUNDCT           FIRST                            R4
         BAL   LINK,NDCT1LOC         LOCAL PUNCH DCT                 R4
         LA    WC,DCTLNE           LOCATE                            R4
         LA    R1,$LNEDCT           FIRST                            R4
         BAL   LINK,NDCT1LOC         RJE LINE DCT                    R4
         LA    WC,DCTLOG           LOCATE                            R4
         LA    R1,$LOGNDCT          FIRST                            R4
         BAL   LINK,NDCT1LOC         LOGON DCT                       R4
         B     NDCBGEN             THEN BR TO NEXT SECTION           R4
         SPACE 2                                                     R4
NDCT1LOC LA    WA,$DCTPOOL-(DCTCHAIN-DCTDSECT)  PREPARE TO SCAN DCTS R4
         SPACE 1                                                     R4
SKIP630  ICM   WA,7,DCTCHAIN+1-DCTDSECT(WA)  LOCATE                  R4
         BZ    SKIP620                        1ST (IF ANY)           R4
         CLM   WC,1,DCTDEVTP-DCTDSECT(WA)      MATCHING              R4
         BNE   SKIP630                          DCT                  R4
         SPACE 1                                                     R4
SKIP620  ST    WA,0(,R1)           SET POINTER TO 1ST DCT (OR ZERO)  R4
         BR    LINK                 AND RETURN                       R4
         TITLE 'HASP INITIALIZATION -- PCE/DCT BUILD SUBROUTINES'    R4
***********************************************************************
*                                                                     *
*        INITPCE -- PCE INITIALIZATION ROUTINE                        *
*                                                                     *
*        R1    - PCE ADDRESS                                          *
*        WA    - ADDR OF PREVIOUS PCE, CURRENT PCE ADDR ON EXIT       *
*        WB    - PROCESSOR ADDRESS                                    *
*        WC    - PCE ID BYTES (LO-ORDER HALF-WORD)                    *
*        R11   - HCT ADDRESS (BASE1)                                  *
*        R14   - RETURN ADDRESS                                       *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
INITPCE  ST    R1,PCENEXT-PCEDSECT(,WA)  SET 'NEXT' ADDR IN PREV PCE R4
         ST    WA,PCEPREV          SET POINTER TO PREVIOUS PCE       R4
         ST    WB,PCER15           SET ENTRY POINT ADDRESS           R4
         ST    BASE1,PCEBASE1      SET HCT ADDRESS                   R4
         ST    WB,PCEBASE2         SET ENTRY POINT ADDRESS           R4
         ST    R1,PCEPCEA          INDICATE                          R4
         ST    R1,PCEPCEB           NON-READY PCE                    R4
         STH   WC,PCEID            SET PCE ID FIELD                  R4
         ST    R1,PCEIOEWF         SET DA DCT POST ADDRESS           R4
         MVI   PCEDEVTP,PCEDAWR    INDICATE WRITE IN DA DCT          R4
         LR    WA,R1               THIS PCE TO BE NEXT PREVIOUS PCE  R4
         BR    LINK                RETURN TO CALLER                  R4
         EJECT                                                       R4
***********************************************************************
*                                                                     *
*        NTPPPDCT -- REMOTE PRINT/PUNCH DCT INITIALIZATION ROUTINE    *
*                                                                     *
*        NPPDCT   --  LOCAL PRINT/PUNCH DCT INITIALIZATION ROUTINE    *
*                                                                     *
*        R1    - PCE ADDRESS, DCT ADDRESS ON EXIT                     *
*        WD    - ADDRESS OF PREVIOUS ADDRESS ON EXIT                  *
*        WE    - ADDRESS OF PREVIOUS TEMPORARY DCT (NPPDCT)           *
*        WF    - LENGTH OF NEW DCT (-1)                               *
*        R14   - RETURN ADDRESS                                       *
*                                                                     *
* NOTE         - THESE ROUTINES EXIT TO THE INITDCT (NPPDCT) OR THE   *
*                INITPDCT (NTPPPDCT) ROUTINE TO COMPLETE DCT INIT-    *
*                IALIZATION                                           *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
NTPPPDCT LA    R10,(PBSPTBL+3-PCEDSECT)/4*4(,R1)  SET POINTER        R4
         AL    R10,NBSPSIZ                         TO PRINT/PUNCH    R4
         ST    R10,PCEDCT                           DCT        @OZ32566
         LR    R1,R10              RELOAD DCT ADDRESS                R4
         B     INITPDCT             AND BR TO INITIALIZE DCT         R4
         SPACE 1                                                     R4
NPPDCT   LA    R10,(PBSPTBL+3-PCEDSECT)/4*4(,R1)  SET POINTER        R4
         AL    R10,NBSPSIZ                         TO PRINT/PUNCH    R4
         ST    R10,PCEDCT                           DCT        @OZ32566
         L     R1,DCTCHAIN-DCTDSECT(,WD)  POINT TO TEMPORARY DCT     R4
         SPACE 1                                                     R4
         DROP  R1                  KILL PCE ADDRESSABILITY           R4
         USING DCTDSECT,R1         PROVIDE DCT ADDRESSABILITY        R4
         SPACE 1                                                     R4
         CLI   DCTFORMS,0          TEST FOR FORMS ID                 R4
         BNE   SKIP640             BR IF PRESENT                     R4
         MVC   DCTFORMS,$STDFORM    ELSE SUPPLY DEFAULT              R4
SKIP640  TM    DCTDEVTP,DCTPRT     LOCAL PRINTER                     R4
         BNO   NPPDCT1             NO - SKIP COUNTING                R4
         TM    DCTPPFL,DCTTCEL     WAS DSPLTCEL ON PRINTERN CARD     R4
         BNO   NPPDCT1             NO - SKIP COUNTING                R4
         LH    R1,NPRDTCEL         PICK UP DESPOOL COUNTER           R4
         LA    R1,1(,R1)           ADD 1 TO IT                       R4
         STH   R1,NPRDTCEL         SAVE NEW VALUE                    R4
         SPACE 1                                                     R4
NPPDCT1  LR    R1,R10              RELOAD DCT ADDRESS                R4
         EJECT                                                       R4
***********************************************************************
*                                                                     *
*        INITDCT -- DCT INITIALIZATION ROUTINE                        *
*                                                                     *
*        R1    - DCT ADDRESS, NEXT DOUBLE-WORD AFTER DCT ON EXIT      *
*        WD    - ADDRESS OF PREVIOUS TEMPORARY DCT                    *
*        WE    - ADDR OF PREVIOUS NEW DCT, CURRENT DCT ADDR ON EXIT   *
*        WF    - LENGTH FOR DCT MOVE                                  *
*        R14   - RETURN ADDRESS                                       *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
INITDCT  L     WD,DCTCHAIN-DCTDSECT(,WD) POINT TO TEMPORARY DCT      R4
         EX    WF,NDCTMV           CREATE NEW DCT FROM TEMPORARY     R4
         XC    DCTCHAIN+1(3),DCTCHAIN+1 CLEAR CHAIN ADDRESS         R41
         SPACE 1                                                     R4
INITPDCT STCM  R1,7,DCTCHAIN+1-DCTDSECT(WE)  SET CHAIN ADDR IN PREV  R4
         ST    WA,DCTEWF           SET $POST ADDRESS                 R4
         MVC   DCTSYS,$OWNSYS      SET SYSTEM ID                     R4
         LR    WE,R1               THIS DCT TO BE NEXT PREVIOUS DCT  R4
         LA    R1,8(WF,R1)         POINT TO 1ST DOUBLE-WORD          R4
         N     R1,=F'-8'            BEYOND CURRENT DCT               R4
         BR    LINK                THEN RETURN TO CALLER             R4
         SPACE 1                                                     R4
NDCTMV   MVC   0(*-*,R1),0(WD)     *** EXECUTE ONLY ***              R4
         SPACE 2                                                     R4
NPRDTCEL DC    H'0'                NBR OF PRINTERS SAYING DSPLTCEL   R4
         SPACE 1                                                     R4
         DROP  R1                  KILL DCT ADDRESSABILITY           R4
         TITLE 'HASP INITIALIZATION -- TABLE OF PRIMARY PCES'        R4
NBSPSIZ  DC    A(*-*)              SIZE OF PRINT/PUNCH BACKSPACE TBL R4
         SPACE 1                                                     R4
NRDROPSL DC    C'00014400000030E00000'  LOGON JOB DEFAULTS           R4
NRDROPST DC    C'00000100000000E00000'  STARTED TASK DEFAULTS        R4
NRDROPSU DC    C'00000300012820E00001'  BATCH USER JOB DEFAULTS      R4
         SPACE 2                                                     R4
***********************************************************************
*                                                                     *
*        TABLE OF PRIMARY HASP PCES                                   *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
NPCETBL  DS    0H                                                    R4
         DC    AL2($ASYNCP-HCTDSECT,PCEASYID,PCEWORK-PCEDSECT)       R4
         DC    AL2($XTIMPCE-HCTDSECT,PCETIMID,PCEWORK+64-PCEDSECT)   R4
         DC    AL2($TIMEPCE-HCTDSECT,PCETIMID,PCEWORK-PCEDSECT)      R4
         DC    AL2($MLLMPCE-HCTDSECT,PCEMLMID)                       R4
         DC    AL2((PCEWORK-PCEDSECT+MLMPCEWS+7)/8*8)                R4
         DC    AL2($MCONPCE-HCTDSECT,PCECONID)                       R4
         DC    AL2((PCEWORK-PCEDSECT+RCPPCEWS+7)/8*8)                R4
         DC    AL2($JCLPCE-HCTDSECT,PCECNVID)                        R4
         DC    AL2((PCEWORK-PCEDSECT+JCLPCEWS+7)/8*8)                R4
         DC    AL2($EXECPCE-HCTDSECT,PCEXEQID)                       R4
         DC    AL2((PCEWORK-PCEDSECT+RDRPCEWS+7)/8*8)                R4
         DC    AL2($OUTPCE-HCTDSECT,PCEOUTID)                        R4
         DC    AL2((PCEWORK-PCEDSECT+OUTWKSIZ+7)/8*8)                R4
         DC    AL2($HOLDPCE-HCTDSECT,PCEXEQID)                       R4
         DC    AL2((PCEWORK-PCEDSECT+HQRLENG+7)/8*8)                 R4
         DC    AL2($PSOPCE-HCTDSECT,PCEPSOID)                        R4
         DC    AL2((PCEWORK-PCEDSECT+2*JOESIZE+7)/8*8)               R4
         DC    AL2($PRGPCE-HCTDSECT,PCEPRGID,PCEWORK-PCEDSECT)       R4
         DC    AL2($CKPTPCE-HCTDSECT,PCECKPID)                      R41
         DC    AL2((PCEWORK-PCEDSECT+CKPPCEWS+7)/8*8)               R41
         DC    AL2($PRAGPCE-HCTDSECT,PCEGPRID,PCEWORK+16-PCEDSECT)   R4
         DC    AL2($COMMPCE-HCTDSECT,PCECONID)                       R4
         DC    AL2((PCEWORK-PCEDSECT+COMPCEWS+7)/8*8)                R4
         DC    AL2($WARMPCE-HCTDSECT,PCEWRMID)                       R4
         DC    AL2((PCEWORK-PCEDSECT+WRMPCEWS+7)/8*8)                R4
         SPACE 1                                                     R4
NPCES    EQU   (*-NPCETBL)/6       NUMBER OF TABLE ENTRIES           R4
         EJECT                                                       R4
         LTORG                                                       R4
         TITLE 'HASP INITIALIZATION -- DCB/DEB GENERATION'           R4
***********************************************************************
*                                                                     *
*        OBTAIN DCB/DEB STORAGE FOR LINES, RDRS, PRTS, AND PUNS       *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
NDCBGEN  BALR  BASE2,0             RE-ESTABLISH                      R4
         USING *,BASE2              LOCAL ADDRESSABILITY             R4
         SPACE 1                                                     R4
         LH    R3,$NUMLNES         COMPUTE                           R4
         LR    R1,R3                MAIN                             R4
         IC    R3,$NUMRDRS           STORAGE                         R4
         ALR   R1,R3                  REQUIREMENT                    R4
         IC    R3,$NUMPRTS             FOR                           R4
         ALR   R1,R3                    NON-DA                       R4
         IC    R3,$NUMPUNS               DCBS                        R4
         ALR   R1,R3                      AND                        R4
         SL    R1,NLOGLINE                 DEBS                      R4
         MH    R1,=Y((4+9)*4)          (4 WORD DCBS, 9 WORD DEBS)    R4
         IC    R3,$NUMDA              ADD SIZE OF                    R4
         SLL   R3,4                    DIRECT ACCESS                 R4
         LA    R0,4*(4*(1)+3+8)(R1,R3)  DCB AND DEB                  R4
         LR    R3,R0               SAVE STORAGE AMOUNT               R4
         ICM   R0,8,=AL1(229)      REQUEST STORAGE                   R4
         GETMAIN R,LV=(0)           FOR DCBS AND DEBS                R4
         LR    R2,R1               CLEAR                             R4
         SLR   R15,R15              DCB/DEB                          R4
         MVCL  R2,R14                STORAGE                         R4
         EJECT                                                       R4
***********************************************************************
*                                                                     *
*        INITIALIZE $SID, SET DCBS/DEBS FOR LOCAL U/R AND BSC LINES   *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
         USING IHADCB,R1           PROVIDE DCB ADDRESSABILITY        R4
         USING DEBDSECT,R15        PROVIDE DEB ADDRESSABILITY        R4
         USING DCTDSECT,WA         PROVIDE DCT ADDRESSABILITY        R4
         USING CVTDSECT,WB         PROVIDE CVT ADDRESSABILITY        R4
         SPACE 1                                                     R4
         SH    R1,=H'36'           R1 = 1ST DCB ADDRESS              R4
         LA    R15,36+4*4(,R1)     R15 = 1ST DEB ADDRESS             R4
         L     WB,CVTPTR           WC = ADDRESS                      R4
         L     WC,CVTSMCA                OF SMCA                     R4
         CLI   $SID,C' '           TEST FOR SUPPLIED SYSTEM ID       R4
         BNE   SKIP650             BR IF YES                         R4
         MVC   $SID,SMCASID-SMCA(WC)  ELSE USE SMF SYSTEM ID         R4
SKIP650  L     WD,$HASPTCB         GET ADDRESS OF HASP TCB           R4
         SLR   R0,R0               R0 = NUMBER                       R4
         IC    R0,$NUMRDRS               OF READERS                  R4
         L     WA,$DCTPOOL         WA = 1ST RDR DCT ADDRESS          R4
         BAL   R14,NDCBDEB         BUILD READER DCBS AND DEBS        R4
         IC    R0,$NUMPRTS         R0 = NUMBER OF PRINTERS           R4
         BAL   R14,NDCBDEB         BUILD PRINTER DCBS AND DEBS       R4
         IC    R0,$NUMPUNS         R0 = NUMBER OF PUNCHES            R4
         BAL   R14,NDCBDEB         BUILD PUNCH DCBS AND DEBS         R4
         LH    R0,$NUMLNES         R0 = NUMBER OF RJE LINES          R4
         L     WA,$LNEDCT          WA = 1ST LINE DCT ADDRESS         R4
         BAL   R14,NDCBDEB         BUILD LINE DCBS AND DEBS          R4
         SH    R1,=H'4'            ADJUST DCB ADDRESS FOR DA         R4
         SH    R15,=H'4'           ADJUST DEB ADDRESS FOR DA         R4
         MVC   DCBTIOT((3+8)*4),NDCDEDUM+4  DA DCB/DEB CONSTANTS     R4
         ST    R15,DCBDEBAD        SET DEB ADDRESS IN DCB            R4
         STCM  WD,7,DEBTCBB        SET TCB ADDRESS IN DEB            R4
         STCM  R1,7,DEBDCBB        SET DCB ADDRESS IN DEB            R4
         SLR   WA,WA               SET                               R4
         IC    WA,$NUMDA            NUMBER                           R4
         LA    WA,1(,WA)             OF                              R4
         STC   WA,DEBNMEXT            EXTENTS                        R4
         MVI   DEBEXSCL,X'04'      INDICATE DA DEB                   R4
         ST    R1,$HASPDCB         SET DCB ADDRESS IN HCT            R4
         MVC   DEBAPPB,CVTXAPG+1   DON'T USE JES2 APPENDAGES         R4
         ST    R15,$DADEBAD        SET DEB ADDRESS IN HCT            R4
         B     NVALSYS             THEN BR TO NEXT SECTION           R4
         SPACE 1                                                     R4
         DROP  WB                  KILL CVT ADDRESSABILITY           R4
         EJECT                                                       R4
NDCBDEB  LTR   R0,R0               AT LEAST ONE DEVICE               R4
         BZR   R14                 RETURN IF NO                      R4
         SPACE 1                                                     R4
NDCDE1   DS    0H                                                    R4
         CLI   DCTDEVTP,DCTLNE     TEST                              R4
         BNE   SKIP660               FOR                             R4
         TM    MDCTTYPE,DCTPSNA        UNIT=VTAM LINE                R4
         BO    NDCTNEXT            BR IF YES TO SKIP DCB/DEB BUILD   R4
SKIP660  MVC   DCBEXLST((4+8)*4),NDCDEDUM U/R DCB AND DEB CONSTANTS  R4
         STCM  R1,7,DCTDCB+1       DCB ADDR INTO DCT                 R4
         ST    R15,DCBDEBAD        DEB ADDR INTO DCB                 R4
         STCM  WD,7,DEBTCBB        TCB ADDR INTO DEB                 R4
         STCM  R1,7,DEBDCBB        DCB ADDR INTO DEB                 R4
         L     WE,$HASPMAP         POINT TO HASP MODULE MAP          R4
         MVC   DEBAPPB,MAPIOAPG+1-MAPDSECT(WE)  USE HASP I/O APPG'S  R4
         CLI   DCTDEVTP,DCTLNE     TEST DEVICE TYPE                  R4
         BNE   NDCDE2              BR IF NOT A LINE                  R4
         MVI   DCBIFLGS,DCBIFIOE   SET NO OS RECOVERY FLAGS          R4
         SPACE 1                                                     R4
NDCDE2   LA    R1,(4+9)*4(,R1)     R1 = NEXT DCB ADDRESS             R4
         LA    R15,(4+9)*4(,R15)   R15 = NEXT DEB ADDRESS            R4
         SPACE 1                                                     R4
NDCTNEXT L     WA,DCTCHAIN         WA = NEXT DCT ADDRESS             R4
         BCT   R0,NDCDE1           LOOP IF MORE OF SAME DEVICE       R4
         SPACE 1                                                     R4
         BR    R14                 THEN RETURN                       R4
         SPACE 1                                                     R4
         DROP  R1,WA,R15           KILL DCB, DCT, DEB ADDRESSABILITY R4
         SPACE 2                                                     R4
NDCDEDUM DS    0F                  DCB/DEB SKELETONS                 R4
         DC    A(0)                              DCBEXLST            R4
         DC    AL2(0),AL1(DCBMRECP+DCBMRAPG)     DCBTIOT, DCBMACRF   R4
         DC    AL1(0),A(0),AL1(DCBOFOPN),AL3(0)  DCBOFLGS            R4
         DC    A(0),AL1(4),AL3(0)                DEBTCBAD, DEBAMLNG  R4
         DC    AL1(DEBDSMOD+DEBDCB),AL3(0)       DEBOFLGS            R4
         DC    AL1(DEBINOUT),AL3(0)              DEBINOUT            R4
         DC    AL1(1),AL3(0),A(0)                DEBNMEXT            R4
         DC    AL1(1*16+15),AL3(0)               DEBPROTG/DEBDEBID   R4
         DC    AL1(2),AL3(0)                     DEBEXSCL            R4
         TITLE 'HASP INITIALIZATION -- SYSTEM PARAMETER VALIDATION'  R4
***********************************************************************
*                                                                     *
*        VALIDATE SYSTEM PARAMETER TABLE                              *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
*                                                                    R4
***   DETERMINE IS THIS AN UNSHARED ENVIRONMENT                      R4
*                                                                    R4
NVALSYS  CLC   NS1(L'NS1*7),=CL28' '  IS TABLE EMPTY...              R4
         BNE   NVAL050             BR IF NO                          R4
         MVC   NS1,$SID            SET SMF CPU ID FOR THIS SYSTEM
         LA    R3,1                INDICATE 1 MEMBER IN NODE         R4
         B     NVAL300             BR TO SET QSE INFO                R4
*
***   DETERMINE IF TABLE IS CONTIGUOUS
*
NVAL050  CLI   NS1,C' '            SEE IF 1ST TABLE ENTRY IS BLANK   R4
         BE    NVALERR             BR. IF YES TO DOCUMENT ERROR
         LA    R0,NS1A-1           POINT TO END OF TABLE ENTRIES
         LA    R1,NS1              POINT TO FIRST TABLE ENTRY
NVAL100  LA    R1,L'NS1(,R1)       STEP TO NEXT TABLE ELEMENT
         CLI   0(R1),C' '          Q. IF TABLE ELEMENT IS BLANK
         BNE   NVAL100             BR. IF NO TO CONTINUE SEARCH
         SR    R0,R1               FIND LENGTH OF REMAINING TABLE
         STC   R0,*+L'*+1          STORE LENGTH INTO NEXT INSTR
         CLC   0(*-*,R1),=CL28' '  Q. IF REMAINING TABLE IS BLANK
         BNE   NVALERR             BR. IF NO TO DOCUMENT ERROR
*
***   DETERMINE IF TABLE CONTAINS DUPLICATE ENTRIES
*
         SLR   R3,R3               CLEAR MEMBER COUNT                R4
         LA    R1,NS1-L'NS1        SET POINTER BEFORE TABLE
NVAL210  LA    R1,L'NS1(,R1)       STEP TO NEXT TABLE ENTRY
         LA    R3,1(,R3)           INCREMENT MEMBER COUNT            R4
         CLI   L'NS1(R1),C' '      Q. IF AT END OF TABLE
         BE    NVAL300             BR. IF YES
         LR    R2,R1               COPY CURRENT TABLE ELEMENT ADDR
NVAL220  LA    R2,L'NS1(,R2)       STEP TO NEXT TABLE ELEMENT
         CLI   0(R2),C' '          Q. IF AT END OF TABLE
         BE    NVAL210             BR. IF YES TO STEP PRIMARY PTR.
         CLC   0(L'NS1,R1),0(R2)   Q. IF DUPLICATE ENTRY
         BNE   NVAL220             BR. IF NO TO CONTINUE SEARCH
         B     NVALERR             BR. TO DOCUMENT ERROR
         EJECT                                                       R4
*                                                                    R4
***   SET $QSENO                                               @OZ20010
*                                                                    R4
NVAL300  STH   R3,$QSENO           SET COUNT OF MEMBERS IN NODE      R4
                                   PRINT OFF - SECTION DELETED @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
                                   PRINT ON -- SECTION DELETED @OZ20010
*
***   DETERMINE IF TABLE CONTAINS SMF CPU ID FOR THIS SYSTEM
*
         LA    R1,NS1              POINT TO 1ST TABLE ENTRY          R4
NVAL310  CLC   $SID,0(R1)          Q. IF SMF CPU ID
         BE    NTEDINIT            BR IF YES TO NEXT SECTION         R4
         LA    R1,L'NS1(,R1)       STEP TO NEXT TABLE ENTRY
         CLI   0(R1),C' '          Q. IF AT END OF TABLE
         BNE   NVAL310             BR. IF NO TO CONTINUE SEARCH
*
***   DOCUMENT INVALID SYSTEM PARAMETER TABLE
*
NVALERR  L     R1,=A(NVALMSG)      POINT TO ERROR MESSAGE            R4
         B     NAEXIT              BR TO ISSUE MESSAGE AND QUIT      R4
         SPACE 6
*
***   SYSTEM PARAMETER TABLE
*
NS1      DC    8CL4' '             SMF ID(S) FOR CPU 1 THRU CPU 7
NS1A     DC    X'01010000',X'02020000',X'03040000',X'04080000'
         DC    X'05100000',X'06200000',X'07400000'
         TITLE 'HASP INITIALIZATION -- TEMPORARY TED ALLOCATION'     R4
***********************************************************************
*                                                                     *
*        OBTAIN STORAGE FOR TEMPORARY TEDS                            *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
NTEDINIT LH    R3,$NUMTGV          COMPUTE                           R4
         LA    R3,7(,R3)            AND                              R4
         SRL   R3,3                  STORE                           R4
         SLR   R0,R0                  LENGTH OF                      R4
         IC    R0,$NUMDA               TRACK                         R4
         MR    R2,R0                    GROUP                        R4
         ST    R3,$CYLMAPL               MAP                         R4
         LA    R2,IOTTGMAP-IOTDSECT+TGMAP-TGMDSECT+3(,R3)            R4
         N     R2,=F'-4'           COMPUTE AND STORE                 R4
         ST    R2,$IOTPDDB          OFFSET WITHIN IOT OF 1ST PDDB    R4
         LA    R3,IOTPDBOD-(BUFSTART-BUFDSECT)(,R2)  MIN BUFFER SIZE R4
         CH    R3,$BUFSIZE         IF BUFFER SIZE ADEQUATE,          R4
         BNH   NGETTEDS             BR TO GET TEMPORARY TEDS         R4
         L     R1,=A(NTGBFMSG)       ELSE POINT TO ERROR MESSAGE     R4
         SPACE 1                                                     R4
NAEXIT  $$WTO  (R1)                ISSUE ERROR MESSAGE TO OPERATOR   R4
        $EXIT  NGQUITM             THEN ISSUE 'QUIT' MSG AND QUIT    R4
         SPACE 1                                                     R4
NGETTEDS LA    R3,TEDSIZ           REQUEST STORAGE                   R4
         MR    R2,R0                FOR TEMPORARY                    R4
         LR    R0,R3                 TRACK EXTENT                    R4
         ICM   R0,8,=AL1(229)         DATA                           R4
         GETMAIN R,LV=(0)              TABLES                        R4
         EJECT                                                       R4
***********************************************************************
*                                                                     *
*        FORMAT TEMPORARY TRACK EXTENT DATA TABLES                    *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
         ST    R1,TEDSTART         SET POINTER TO TEMPORARY TEDS     R4
         LR    R2,R1                AND CLEAR                        R4
         MVCL  R2,R14                TED STORAGE                     R4
         LH    R2,$NUMTGV          GET TRACK GROUPS PER EXTENT       R4
         IC    R15,$NUMDA           AND NUMBER OF VOLUMES            R4
         LA    R4,7(,R2)           GET SINGLE VOLUME                 R4
         SRL   R4,3                 MAP SIZE                         R4
         SLR   R5,R5               INITIALIZE MAP OFFSET             R4
         SPACE 1                                                     R4
         USING TEDDSECT,R1         PROVIDE TED ADDRESSABILITY        R4
         SPACE 1                                                     R4
INITTED  STC   R3,TNMD             EXTENT NUMBER, SHIFTED LEFT 8     R4
         STH   R2,TNGE             NUMBER OF GROUPS PER EXTENT       R4
         MVI   TNTG+1,1            NUMBER OF TRACKS PER GROUP        R4
         STH   R5,TNMO             OFFSET OF THIS MAP FROM 1ST MAP   R4
         STH   R4,TNMB             NUMBER OF BYTES PER MAP           R4
         LA    R3,1(,R3)           BUMP EXTENT NUMBER                R4
         ALR   R5,R4               BUMP MAP OFFSET                   R4
         LA    R1,TEDSIZ(,R1)      POINT TO NEXT TED                 R4
         BCT   R15,INITTED         LOOP THRU ALL TEDS                R4
         SPACE 1                                                     R4
         DROP  R1                  KILL TED ADDRESSABILITY           R4
         TITLE 'HASP INITIALIZATION -- JOB QUEUE / JOT ALLOCATION'   R4
***********************************************************************
*                                                                     *
*        COMPUTE ENTRIES IN RESIDENT JCT QUEUE                        *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
NALOCJQS SLR   R1,R1               CLEAR FOR INSERTS                 R4
         LA    R0,2                COMPUTE AND SAVE                  R4
         IC    R1,$NUMPRTS          NUMBER                           R4
         ALR   R0,R1                 OF                              R4
         IC    R1,$NUMPUNS            PRINT,                         R4
         ALR   R0,R1                   PUNCH,                        R4
         AH    R0,$NUMTPPR              REMOTE PRINT,                R4
         AH    R0,$NUMTPPU               AND REMOTE PUNCH ENTRIES    R4
         STH   R0,$#JCTQCT                PLUS 2                     R4
         SPACE 1                                                     R4
***********************************************************************
*                                                                     *
*        PROVIDE PRINT/PUNCH-RELATED PARAMETER DEFAULTS               *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
         SH    R0,=H'2'            REDUCE R0 TO PRINT/PUNCH COUNT    R4
         LR    R1,R0               MULTIPLY PRINT/PUNCH              R4
         M     R0,=F'10'            COUNT BY 10                      R4
         CH    R1,=Y($MAXJOES)     IMPOSE                            R4
         BNH   SKIP670              &NUMJOES                         R4
         LH    R1,=Y($MAXJOES)       LIMIT                           R4
SKIP670  OC    $NUMJOES,$NUMJOES   TEST $NUMJOES                     R4
         BNZ   SKIP680             BR IF PROVIDED                    R4
         STH   R1,$NUMJOES          ELSE SUPPLY DEFAULT              R4
SKIP680  LH    R1,$NUMJOES         GET $NUMJOES                      R4
         D     R0,=F'5'             DIVIDED BY 5                     R4
         LH    WA,$MINJOES         IF                                R4
         LTR   WA,WA                $MINJOES                         R4
         BNZ   SKIP690               NOT PROVIDED,                   R4
         LR    WA,R1                  SUPPLY DEFAULT                 R4
SKIP690  LH    R0,$NUMJOES         ENSURE                            R4
         BCTR  R0,0                 $MINJOES                         R4
         BCTR  R0,0                  AT                              R4
         CLR   R0,WA                  LEAST                          R4
         BNL   SKIP700                 2                             R4
         LR    WA,R0                    LESS THAN                    R4
SKIP700  STH   WA,$MINJOES               $NUMJOES                    R4
         EJECT                                                       R4
***************************************************************@OZ20010
*                                                              @OZ20010
*        COMPUTE SIZE OF JES2 JOB QUEUE                        @OZ20010
*                                                              @OZ20010
***************************************************************@OZ20010
         SPACE 1                                               @OZ20010
         LH    R1,$MAXJOBS         GET JQE REQUIREMENT         @OZ20010
         MH    R1,=AL2(JQELNGTH)   COMPUTE AND                 @OZ20010
         LA    R1,4095(,R1)         STORE NUMBER OF            @OZ20010
         SRL   R1,12                 JOB QUEUE                 @OZ20010
         STH   R1,$JOBRECN            RECORDS                  @OZ20010
         SLL   R1,12               COMPUTE AND STORE           @OZ20010
         ST    R1,$JOBQSIZ          SIZE OF JOB QUEUE          @OZ20010
         SPACE 1                                               @OZ20010
***************************************************************@OZ20010
*                                                              @OZ20010
*        COMPUTE SIZE OF JES2 JOB OUTPUT TABLE (JOT)           @OZ20010
*                                                              @OZ20010
***************************************************************@OZ20010
         SPACE 1                                               @OZ20010
         LH    R1,$NUMJOES         GET REAL JOE REQUIREMENT    @OZ20010
         LA    R1,NJOTPRFX(,R1)     PLUS PREFIX AND            @OZ31676
         MH    R1,=AL2(JOESIZE)    COMPUTE STORAGE REQUIREMENT @OZ31676
         LA    R1,4095(,R1)          ROUNDING FACTOR           @OZ20010
         SRL   R1,12               COMPUTE AND STORE           @OZ20010
         STH   R1,$JOTRECN          COUNT OF JOT RECORDS       @OZ20010
         SLL   R1,12               COMPUTE AND STORE           @OZ20010
         ST    R1,$JOTSIZE           SIZE OF JOT               @OZ20010
         SPACE 1                                               @OZ20010
***************************************************************@OZ20010
*                                                              @OZ20010
*        COMPUTE LENGTH OF SHARED-SPOOL QUEUE ELEMENT (QSE)    @OZ20010
*                                                              @OZ20010
***************************************************************@OZ20010
         SPACE 1                                               @OZ20010
         LA    R3,QSESTAT+L'QSESTAT-QSEDSECT  BASIC QSE LEN    @OZ20010
         STH   R3,$QSECTLB         SAVE OFFSET OF CKPT CTLB    @OZ20010
         AH    R3,$JOBRECN         ADD NUMBER OF JOB QUEUE AND @OZ20010
         AH    R3,$JOTRECN          JOT CKPT CONTROL BYTES     @OZ20010
         LA    R3,7(,R3)           ROUND UP TO                 @OZ20010
         N     R3,=F'-8'            MULTIPLE OF 8 BYTES        @OZ20010
         STH   R3,$QSEL            STORE QSE LENGTH            @OZ20010
         EJECT                                                 @OZ20010
***************************************************************@OZ20010
*                                                              @OZ20010
*        GET STORAGE FOR 1ST CKPT RECORD AND ITS READ-IN AREA  @OZ20010
*                                                              @OZ20010
***************************************************************@OZ20010
         SPACE 1                                               @OZ20010
         MH    R3,$QSENO           R3  = SIZE OF ALL QSE'S     @OZ20010
         SLR   R10,R10             R10 = SIZE OF DA CKPT       @OZ20010
         IC    R10,$NUMDA                 INFO BLOCKS AT       @OZ20010
         MH    R10,=H'6'                   6 BYTES PER BLOCK   @OZ20010
         LH    R5,$NUMRJE          R5 = SIZE OF REMOTE         @OZ20010
         LR    R8,R5                     MESSAGE SPOOL QUEUE   @OZ20010
         LA    R5,1(,R5)                  HEADS AT 3 BYTES     @OZ20010
         MH    R5,=H'3'                    PER QUEUE HEAD      @OZ20010
         MH    R8,=H'3'            R8 = SIZE OF REMOTE SIGN-ON @OZ20010
         LA    R8,7(,R8)                 TABLE AT 3 BITS PER   @OZ20010
         SRL   R8,3                       RMT, SPANNING BYTES  @OZ20010
         LA    R7,$SAVELEN(R5,R10) ADD ABOVE PLUS LENGTHS      @OZ20010
         ALR   R7,R8                OF HCT VARIABLES AND       @OZ20010
         ALR   R7,R3                 MASTER TRACK GROUP MAP,   @OZ20010
         AL    R7,$CYLMAPL            STORING TOTAL AS LENGTH  @OZ20010
         ST    R7,$CKPTR1L             OF 1ST CKPT RECORD      @OZ20010
         LA    R7,4095(,R7)        ROUND STORAGE REQUIREMENT   @OZ20010
         N     R7,=F'-4096'         TO MULTIPLE OF 4K          @OZ20010
         LA    R0,0(R7,R7)         GET STORAGE FOR 1ST CKPT    @OZ20010
         SPACE 1                                               @OZ20010
         GETMAIN RU,LV=(0),BNDRY=PAGE  RCD AND ITS READ-IN AREA@OZ20010
         EJECT                                                 @OZ20010
***************************************************************@OZ20010
*                                                              @OZ20010
*        CLEAR AND PAGE-FIX 1ST CHECKPOINT RECORD              @OZ20010
*                                                              @OZ20010
***************************************************************@OZ20010
         SPACE 1                                               @OZ20010
         L     R2,=A(NOPTECB)      GET ECB ADDRESS FOR $PGSRVC @OZ20010
        $PGSRVC FIX,(R1),(R7),(R2) FIX RECORD AREA FOR EXCPVR  @OZ20010
         SPACE 1                                               @OZ20010
         LR    R6,R1               CLEAR STORAGE               @OZ20010
         SLR   R15,R15              FOR FIRST                  @OZ20010
         MVCL  R6,R14                CKPT RECORD               @OZ20010
         ST    R1,$CKPTR1          STORE PTR TO 1ST CKPT RCD   @OZ20010
         ST    R6,$CKPR1RD         STORE PTR TO READ-IN AREA   @OZ20010
         LA    R1,$SAVELEN(,R1)    STORE POINTER TO            @OZ20010
         ST    R1,$QSE1             FIRST QSE                  @OZ20010
         ALR   R1,R3               STORE POINTER TO            @OZ20010
         ST    R1,$DACKPT           DA CKPT INFO BLOCKS        @OZ20010
         ALR   R1,R10              STORE POINTER TO            @OZ20010
         ST    R1,$MSPOOLQ          RMT MSG SPOOL QUEUE HEADS  @OZ20010
         ALR   R1,R5               STORE POINTER TO            @OZ20010
         ST    R1,$RMTSON           REMOTE SIGN-ON TABLE       @OZ20010
         ALR   R1,R8               STORE POINTER TO            @OZ20010
         ST    R1,$TGMAP            MASTER TRACK GROUP MAP     @OZ20010
         EJECT                                                 @OZ20010
***************************************************************@OZ20010
*                                                              @OZ20010
*        GET STORAGE FOR JOB QUEUE, JOT AND THE READ-IN AREAS  @OZ20010
*                                                              @OZ20010
***************************************************************@OZ20010
         SPACE 1                                               @OZ20010
         L     R7,$JOTSIZE         GET SIZE OF JOT             @OZ20010
         L     R4,$JOBQSIZ         GET SIZE OF JOB QUEUE       @OZ20010
         LA    R7,0(R4,R7)         GET TOTAL STORAGE REQ'T     @OZ20010
         LA    R0,0(R7,R7)         RELOAD TOTAL SIZE DOUBLED   @OZ20010
         SPACE 1                                               @OZ20010
         GETMAIN RU,LV=(0),BNDRY=PAGE  REQUEST STORAGE         @OZ20010
         SPACE 1                                               @OZ20010
***************************************************************@OZ20010
*                                                              @OZ20010
*        CLEAR AND FIX JOB QUEUE AND JOT PAGES                 @OZ20010
*                                                              @OZ20010
***************************************************************@OZ20010
         SPACE 1                                               @OZ20010
         L     R2,=A(NOPTECB)      GET ECB ADDRESS FOR $PGSRVC @OZ20010
        $PGSRVC FIX,(R1),(R7),(R2) FIX JOB Q & JOT FOR EXCPVR  @OZ20010
         SPACE 1                                               @OZ20010
         LA    R0,0(R4,R7)         STORE POINTER               @OZ20010
         ALR   R0,R1                TO JOT                     @OZ20010
         ST    R0,$JOTREAD           READ-IN AREA              @OZ20010
         LR    R6,R1               CLEAR STORAGE               @OZ20010
         SLR   R15,R15              FOR JOB QUEUE              @OZ20010
         MVCL  R6,R14                AND JOT                   @OZ20010
         ST    R1,$JOBQPTR         STORE JOB QUEUE ORIGIN      @OZ20010
         ST    R6,$JBQREAD         STORE JOB Q READ-AREA PTR   @OZ20010
         ALR   R4,R1               STORE POINTER TO            @OZ20010
         ST    R4,$JOTABLE          JOB OUTPUT TABLE (JOT)     @OZ20010
         EJECT                                                 @OZ20010
***************************************************************@OZ20010
*                                                              @OZ20010
*        GET STORAGE FOR CHECKPOINT I/O BUFFER                 @OZ20010
*                                                              @OZ20010
***************************************************************@OZ20010
         SPACE 1                                               @OZ20010
         USING JQBDSECT,R1         PROVIDE JQB ADDRESSABILITY  @OZ20010
         LH    R2,$JOBRECN         R2 = NUMBER OF JOB QUEUE    @OZ20010
         AH    R2,$JOTRECN               & JOT CKPT CTL BYTES  @OZ20010
         LA    R4,1(,R2)           R4 = NUMBER OF CCW AREAS    @OZ20010
         LR    R6,R4               R6 = SIZE OF CHANNEL        @OZ20010
         MH    R6,=AL2(L'JQBCCWEL)       PROGRAM AREA          @OZ20010
         LA    R7,JQBCCWS-JQBDSECT(R4,R6)  GET BASIC JQB       @OZ20010
         LH    R5,$#JCTQCT         R5 = STORAGE FOR RESIDENT   @OZ20010
         SLL   R5,3                      JCT QUEUE CTL BLOCKS  @OZ20010
         ALR   R7,R5               R7 = TOTAL                  @OZ20010
         ALR   R7,R2                     JQB STORAGE           @OZ20010
         LR    R0,R7                      REQUIREMENT          @OZ20010
         GETMAIN RU,LV=(0),BNDRY=PAGE  GET JQB STORAGE         @OZ20010
         L     R2,=A(NOPTECB)      GET ECB ADDRESS FOR $PGSRVC @OZ20010
        $PGSRVC FIX,(R1),(R7),(R2) LONG-TERM FIX THE JQB       @OZ20010
         ST    R1,$CKPTIOB         STORE JQB ADDRESS IN HCT    @OZ20010
         LR    R14,R1              CLEAR                       @OZ20010
         LR    R15,R7               ENTIRE                     @OZ20010
         SLR   R1,R1                 JQB                       @OZ20010
         MVCL  R14,R0                 AREA                     @OZ20010
         L     R1,$CKPTIOB         RESTORE JQB ADDRESS         @OZ20010
         LA    R0,JQBCCWS(R6)      STORE POINTER TO RESIDENT   @OZ20010
         ST    R0,$#JCTQ            JCT QUEUE CONTROL BLOCKS   @OZ20010
         ALR   R0,R5               STORE POINTER TO            @OZ20010
         ST    R0,$JOBCTLB          JOB QUEUE                  @OZ20010
         AH    R0,$JOBRECN           AND JOT                   @OZ20010
         ST    R0,$JOTCTLB            CKPT CONTROL BYTES       @OZ20010
         MVC   JQBECBP,=A(NGECB)   STORE POINTER TO INIT'N ECB @OZ20010
         MVI   JQBIOB,X'42'        SET 'IOBFLAG1' IN JQB       @OZ20010
         MVC   JQBDCBP,$HASPDCB    SET DA DCB ADDRESS IN JQC   @OZ20010
         LA    R0,JQBCCWS                STORE POINTER TO      @OZ20010
         ST    R0,IOBSTART-BUFDSECT(,R1)  START OF CHANNEL PGM @OZ20010
                                   PRINT OFF - SECTION DELETED @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
                                   PRINT ON -- SECTION DELETED @OZ20010
         B     INITVAT             THEN BR TO NEXT SECTION           R4
         SPACE 1                                                     R4
         DROP  R1                  KILL JQB ADDRESSABILITY           R4
         EJECT                                                       R4
NJOTPRFX EQU   (JOTJOES-JOTDSECT)/JOESIZE                            R4
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
         SPACE 3                                                     R4
         LTORG                                                       R4
         TITLE 'HASP INITIALIZATION -- DIRECT ACCESS INITIALIZATION' R4
***********************************************************************
*                                                                     *
*        CREATE VOLUME ALLOCATION TABLE                               *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
INITVAT  BALR  BASE2,0             RE-ESTABLISH                      R4
         USING *,BASE2,BASE3        LOCAL ADDRESSABILITY             R4
         SPACE 1                                                     R4
         LA    BASE3,2048(,BASE2)  PROVIDE SECOND                    R4
         LA    BASE3,2048(,BASE3)   BASE REGISTER                    R4
         SLR   R3,R3               OBTAIN                            R4
         IC    R3,$NUMDA            STORAGE                          R4
         LA    R3,1(,R3)             FOR                             R4
         MH    R3,=Y(NVLTBLN)         VOLUME                         R4
         LA    R0,NVLTBLN(,R3)         ALLOCATION                    R4
         GETMAIN R,LV=(0)               TABLE                        R4
         ST    R1,NVOLTABL         SET POINTER TO ALLOC'N TABLE      R4
         SLR   R15,R15             CLEAR                             R4
         LR    R2,R1                USABLE                           R4
         MVCL  R2,R14                ENTRIES                         R4
         MVI   NVLEND-NVLDSECT(R2),255  SET TERMINATOR               R4
         EJECT                                                       R4
***********************************************************************
*                                                                     *
*        LOCATE SPOOL/CHECKPOINT VOLUMES                              *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
         CLI   $CHKPT,C' '         IF NO CHECKPOINT                  R4
         BNE   SKIP710              VOLUME DEFINED,                  R4
         MVC   $CHKPT,$SPOOL         SUPPLY DEFAULT                  R4
SKIP710  L     WA,CVTPTR           GET ADDRESS OF                    R4
         L     WA,CVTILK2-CVT(,WA)  UCB LOOK-UP TABLE                R4
         SH    WA,=H'2'              (LESS 2)                        R4
         LA    WC,2*NVLTBLN(,R1)   ENTRY FOR 1ST SECONDARY SPOOL VOL R4
         SLR   WB,WB               CLEAR FOR INSERTS                 R4
         SPACE 1                                                     R4
         USING UCBDSECT,WB         PROVIDE UCB ADDRESSABILITY        R4
         USING NVLDSECT,WD         PROVIDE ALLOC TBL ADDRESSABILITY  R4
         SPACE 1                                                     R4
NEXTUCB  LA    WA,2(,WA)           GET NEXT LOOK-UP TABLE ENTRY      R4
         ICM   WB,3,0(WA)          GET UCB ADDRESS                   R4
         BZ    NEXTUCB             IGNORE IF NULL ENTRY              R4
         CL    WB,=A(X'FFFF')      TEST UCB ADDRESS                  R4
         BE    NDACKPT             BR IF END OF UCBS                 R4
         CLI   UCBTBYT3,UCB3DACC   TEST DEVICE TYPE                  R4
         BNE   NEXTUCB             IGNORE IF NOT DIRECT ACCESS       R4
         CLC   $CHKPT,UCBVOLI      TEST VOLUME SERIAL NUMBER         R4
         BE    NUCBGOT             IGNORE IF NOT                    R41
         CLC   $SPOOL(5),UCBVOLI    CHECKPOINT OR                    R4
         BNE   NEXTUCB               SPOOL VOLUME                    R4
         EJECT                                                       R4
***********************************************************************
*                                                                     *
*        ENSURE SPOOL/CHECKPOINT VOLUME IS UNIQUE                     *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
NUCBGOT  L     R15,CVTPTR            GET ADDRESS OF                 R41
         L     R15,CVTILK2-CVT(,R15)  UCB LOOK-UP TABLE              R4
         SH    R15,=H'2'               (LESS 2)                      R4
         SLR   R1,R1               CLEAR FOR INSERTS                 R4
         SPACE 1                                                     R4
NUCBNEXT LA    R15,2(,R15)         GET NEXT LOOK-UP TABLE ENTRY      R4
         ICM   R1,3,0(R15)         GET UCB ADDRESS                   R4
         BZ    NUCBNEXT            IGNORE IF NULL ENTRY              R4
         CLI   UCBTBYT3-UCBDSECT(R1),UCB3DACC  TEST DEVICE TYPE      R4
         BNE   NUCBNEXT            IGNORE IF NOT DIRECT ACCESS       R4
         CLC   UCBVOLI,UCBVOLI-UCBDSECT(R1)  TEST VOLUME SERIALS     R4
         BNE   NUCBNEXT            IGNORE IF DIFFERENT               R4
         CLR   R1,WB               TEST UCB ADDRESS                  R4
         BE    NUCBOK              BR IF SAME                        R4
         TM    $RUNOPTS,$DUPVOLT   TEST DUPLICATE VOL TEST OPTION    R4
         BZ    NDACKPT             EXIT LOOP IF NOT SELECTED         R4
         B     NDAERR1              ELSE ISSUE ERROR MSG AND QUIT    R4
         SPACE 1                                                     R4
NUCBOK   CLR   R15,WA              TEST LOOK-UP TABLE ADDRESSES      R4
         BNE   NEXTUCB             DUPL CHANNEL PATH IF DIFFERENT    R4
         EJECT                                                      R41
***********************************************************************
*                                                                     *
*        UPDATE SPOOL/CHECKPOINT VOLUME ALLOCATION TABLE              *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
         L     WD,NVOLTABL         POINT TO 1ST ALLOC TABLE ENTRY    R4
         CLC   $CHKPT,UCBVOLI      TEST FOR CHECKPOINT VOLUME        R4
         BNE   NSPLUCB             BR IF NO                         R41
         ST    WB,NVLUCBPT          ELSE SET UCB ADDRESS            R41
         MVC   NVLVOLID,UCBVOLI      AND VOLUME SERIAL              R41
         CLC   $SPOOL(5),UCBVOLI   IS VOLUME ALSO A SPOOL...        R41
         BNE   NEXTUCB             BR IF NO                         R41
         SPACE 1                                                    R41
NSPLUCB  LA    WD,NVLTBLN(,WD)     POINT TO 2ND TABLE ENTRY         R41
         CLC   $SPOOL,UCBVOLI      TEST FOR PRIMARY SPOOL VOLUME     R4
         BE    NDAVUPDT            BR IF YES                         R4
         LR    WD,WC               POINT TO CURRENT TABLE ENTRY      R4
         CLI   NVLEND,255          ARE ENTRIES EXHAUSTED...          R4
         BE    NDAERR2             BR IF YES                         R4
         LA    WC,NVLTBLN(,WC)      ELSE REMEMBER NEXT ENTRY         R4
         SPACE 1                                                     R4
NDAVUPDT ST    WB,NVLUCBPT         SET UCB ADDRESS                   R4
         MVC   NVLVOLID,UCBVOLI    SET VOLUME SERIAL NUMBER          R4
         B     NEXTUCB             THEN BR TO TEST NEXT UCB          R4
         SPACE 1                                                     R4
NDAERR1  L     R1,=A(NDAEM1)       POINT TO MESSAGE TEXT             R4
         MVC   NDAVOL-NDAEM1(,R1),UCBVOLI  SET VOLUME SERIAL         R4
         B     NGKWIT              BR TO ISSUE MESSAGE AND QUIT      R4
         SPACE 1                                                     R4
         DROP  WB                  KILL UCB ADDRESSABILITY           R4
         EJECT                                                       R4
***********************************************************************
*                                                                     *
*        ALLOCATE CHECKPOINT DATA SET (SYS1.HASPCKPT)                 *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
         USING QSEDSECT,R2         PROVIDE QSE ADDRESSABILITY  @OZ20010
         USING UCBDSECT,R3         PROVIDE UCB ADDRESSABILITY  @OZ20010
         USING SPLDSECT,WC         PROVIDE SPL ADDRESSABILITY        R4
         SPACE 1                                                     R4
NDACKPT  LA    R0,=CL8'HOSPOOL'        IDENTIFY                      R4
         L     R1,$HASPMAP              HOSPOOL                      R4
         L     R1,MAPSPLA-MAPDSECT(,R1)  SUBTASK                     R4
         IDENTIFY EPLOC=(0),ENTRY=(1)     ENTRY POINT                R4
         L     R2,$QSE1            POINT TO 1ST QSE            @OZ20010
         L     R1,=A(NS1)          POINT TO SYSTEM PARAMATER TABLE   R4
NDANEXT  CLI   L'NS1(R1),C' '      IS THIS THE LAST ENTRY           R41
         BE    NDALAST             BR IF YES                        R41
         AH    R2,$QSEL            POINT TO NEXT QSE           @OZ20010
         LA    R1,L'NS1(R1)        POINT TO NEXT ENTRY              R41
         B     NDANEXT             TEST NEXT ENTRY                  R41
NDALAST  OI    QSEFLAGS,QSELAST    MAKE QSE LAST                    R41
SKIP730  L     WD,NVOLTABL         POINT TO 1ST ALLOC TABLE ENTRY    R4
         MVC   NVLVOLID,$CHKPT     ENSURE CKPT VOL SER PRESENT       R4
         MVC   NVLVOLID+NVLTBLN,$SPOOL  ENSURE PRIMARY SPOOL VOL SER R4
         MVI   NVLFLAGS,SPL1CKPT+SPL1NFMT  SET REQUEST FLAGS         R4
         BAL   WE,NGSPLGET         OBTAIN CKPT VOL ALLOC'N WORK AREA R4
         BAL   WE,NGALLOC          ALLOCATE THE CHECKPOINT VOLUME    R4
         BAL   WE,NGWAIT           WAIT FOR ALLOCATION TO COMPLETE   R4
         BNZ   NGCKBAD             BR IF ANY ERRORS                  R4
         L     R3,SPLUCBPT         GET UCB ADDRESS             @OZ20010
         ST    R3,NVLUCBPT         ENSURE IN ALLOC'N TABLE     @OZ20010
         CLC   $CHKPT,$SPOOL       TEST FOR CKPT/PRIMARY SPOOL MATCH R4
         BNE   NGCKDEB             BR IF NO                          R4
         MVC   NVLTBLN(NVLTBLN,WD),0(WD)  FILL PRI SPOOL VOL ENTRY   R4
         MVI   NVLFLAGS+NVLTBLN,0  RESET REQUEST FLAGS               R4
         B     NGCKDEB             THEN BR TO SET CKPT DEB EXTENT    R4
         SPACE 1                                                     R4
         DROP  R2                                              @OZ20010
         SPACE 1                                                    R41
NGCKBAD  BAL   WE,NGDETACH         DETACH HOSPOOL, FREE WORK AREA    R4
         B     NGQUITT             BR TO ISSUE MESSAGE AND QUIT      R4
         SPACE 1                                               @OZ20010
         DROP  WD                  KILL ALLOC TBL BASE         @OZ20010
         EJECT                                                       R4
***********************************************************************
*                                                                     *
*        CONSTRUCT CHECKPOINT DATA SET DEB                            *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
         USING DEBDSECT,R14        PROVIDE DEB ADDRESSABILITY        R4
         SPACE 1                                                     R4
NGCKDEB  L     R14,$DADEBAD        GET POINTER TO DA DEB             R4
         SLR   R1,R1               POINT                             R4
         IC    R1,$NUMDA            TO                               R4
         SLL   R1,4                  CHECKPOINT                      R4
         LA    R14,DEBBASND(R1)       EXTENT                         R4
         SPACE 1                                                     R4
         USING DEBDASD,R14         PROVIDE DEB EXTENT ADDRESSABILITY R4
         SPACE 1                                                     R4
         ST    R3,DEBUCBAD         SET UCB ADDRESS             @OZ20010
         MVC   DEBSTRCC(8),SPLSTRCC  SET CKPT VOL EXTENT LIMITS      R4
         MVC   DEBNMTRK,SPLNMTRK   SET NUMBER OF TRACKS IN EXTENT    R4
         MVC   NGCKNRT,SPLTNRT     SAVE NUMBER OF RECS/TRACK   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
         SPACE 1                                                     R4
         L     R1,$SSVT            GET SSVT ADDRESS                  R4
         L     R1,$SVRELSE-SSVT(,R1)  GET RELEASE SRB-IOSB ADDRESS   R4
         MODESET EXTKEY=ZERO       SET ZERO PROTECT KEY              R4
         ST    R3,IOSUCB-IOSB+SRBSIZE(,R1) SAVE CKPT VOL UCB   @OZ20010
         MODESET EXTKEY=HASP       RESTORE JES2 PROTECT KEY          R4
         MVC   NGWDBL,SPLSTRCC     SAVE EXTENT LIMITS          @OZ20010
         BAL   WE,NGDETACH         DETACH HOSPOOL, FREE WORK AREA    R4
         SPACE 1                                               @OZ20010
         DROP  WC                  RELEASE SPL ADDRESSABILITY  @OZ20010
         EJECT                                                 @OZ20010
***************************************************************@OZ20010
*                                                              @OZ20010
*        VERIFY CHECKPOINT DATA SET SPECIFICATIONS             @OZ20010
*                                                              @OZ20010
***************************************************************@OZ20010
         SPACE 1                                               @OZ20010
*        COMPUTE AND VALIDATE CHECKPOINT TRACK REQUIREMENT     @OZ20010
         SPACE 1                                               @OZ20010
         LH    WE,NGCKNRT          GET NO. OF RECORDS / TRACK  @OZ20010
         SLR   R0,R0               COMPUTE                     @OZ20010
         LH    R1,$JOBRECN          TRACK                      @OZ20010
         AH    R1,$JOTRECN           REQUIREMENT               @OZ20010
         ALR   R1,WE                  FOR JOB QUEUE  (ROUNDED  @OZ20010
         BCTR  R1,0                    AND JOT          UP)    @OZ20010
         DR    R0,WE                    RECORDS                @OZ20010
         LA    R1,1(,R1)           PLUS RECORD 1 TRACK         @OZ20010
         STH   R1,NGCKNTRK         SAVE TRACK REQUIREMENT      @OZ20010
         CH    R1,DEBNMTRK         TEST AGAINST CKPT EXTENTS.. @OZ20010
         BH    NGCSPECR            ... ERROR IF TO SMALL       @OZ20010
         SPACE 1                                               @OZ20010
         DROP  R14                 RELEASE DEB ADDRESSABILITY  @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
         EJECT                                                       R4
*        DETERMINE MAXIMUM LENGTH OF CHECKPOINT RECORDS        @OZ20010
         SPACE 1                                                     R4
NGCKDCT  L     R10,CVTPTR             POINT TO DEVICE               R41
         L     R10,CVTZDTAB-CVT(,R10)  CHARACTERISTICS TABLE         R4
         SLR   R6,R6               GET DEVICE TYPE                   R4
         IC    R6,UCBTBYT4          FROM UCB                         R4
         SPACE 1                                                     R4
*                                  THIS CARD DELETED BY APAR   @OZ20010
         USING NGZ,R6              PROVIDE DEV TBL ADDRESSABILITY    R4
         SPACE 1                                                     R4
         IC    R6,0(R6,R10)        PICK UP OFFSET TO DESCRIPTION     R4
         ALR   R6,R10              POINT TO DEVICE DESCRIPTION ENTRY R4
         LH    R2,NGZR             GET MAXIMUM TRACK LENGTH
         LH    R1,NGZO             GET 2305 BLOCK OVERHEAD
         TM    NGZF,NGZF2305       IS THIS 2305
         BO    *+10                SKIP NEXT IF YES
         SLR   R1,R1               ZERO REGISTER
         IC    R1,NGZL             GET BLOCK OVERHEAD LAST RECORD
         SLR   R0,R0               ZERO REGISTER
         IC    R0,NGZU             GET CREDIT FOR NO KEYS
         SR    R2,R1               L=MAXRSIZ-BLOCK OVERHEAD (KEYED)
         AR    R2,R0               L=L(OLD)+CREDIT FOR NO KEY  @OZ20010
         SPACE 1                                               @OZ20010
*        VERIFY TRACK SIZE ADEQUATE FOR CHECKPOINT RECORD 1    @OZ20010
         SPACE 1                                               @OZ20010
         C     R2,$CKPTR1L         WILL RECORD 1 FIT ON TRK... @OZ20010
         BNL   NGCKCWI             BRANCH IF YES (OK)          @OZ20010
         SPACE 2                                               @OZ20010
*        CHECKPOINT DATA SET SPECIFICATION ERROR               @OZ20010
         SPACE 1                                               @OZ20010
NGCSPECR L     R1,=A(NSPECMSG)     PICK UP ADDRESS OF MESSAGE  @OZ20010
         B     NGKWIT               EXIT INIT WITH MESSAGE     @OZ20010
         TITLE 'HASP INITIALIZATION -- BUILD INITIALIZATION CCWS'
***************************************************************@OZ20010
*                                                              @OZ20010
*        SET UP INITIALIZATION CCWS IN JQB                     @OZ20010
*                                                              @OZ20010
***************************************************************@OZ20010
         SPACE 1                                               @OZ20010
         USING JQBCCWE,R1          CCW PACKET ADDRESSABILITY   @OZ20010
         SPACE 2                                               @OZ20010
NGCKCWI  L     R10,$CKPTIOB        ESTABLISH TEMPORARY         @OZ20010
         USING JQBDSECT,R10         JQB ADDRESSABILITY         @OZ20010
         MVC   JQBSEEK(1),$NUMDA   SET UP JQB SEEK             @OZ20010
         MVC   JQBSEEK+3(4),NGWDBL  ADDRESS (MBBCCHHR)         @0Z20010
         LA    R1,JQBCCWS          PICK UP 1ST CCW ADDRESS     @OZ20010
         DROP  R10                 KILL TEMP. ADDRESSABILITY   @OZ20010
         SPACE 2                                               @OZ20010
*        BUILD CCW PACKET FOR CHECKPOINT RECORD 1              @OZ20010
         SPACE 1                                               @OZ20010
         MVI   NGWDBL+4,1          SET TO RECORD NO. 1         @OZ20010
         MVC   JQBCCHH0(4),NGWDBL  PLACE TRACK AND             @OZ20010
         MVC   JQBCCHHR(5),NGWDBL   RECORD ADDR IN CCW AREA    @OZ20010
         SPACE 1                                               @OZ20010
         BAL   R14,NGCKFMC2        INITIALIZE RECORD 1 CCWS    @OZ20010
         SPACE 1                                               @OZ20010
         LA    R14,JQBCNEXT        ADJUST                      @OZ20010
         STCM  R14,7,JQBCCW6+5      TIC CCW                    @OZ20010
         LRA   R14,0(,R14)           TO POINT TO               @OZ20010
         STCM  R14,7,JQBCCW6+1        NEXT TRACK'S SEEK        @OZ20010
         L     R0,$CKPTR1L         PICK UP LENGTH OF RECORD 1  @OZ20010
         STH   R0,JQBCCW5+6         STORE LENGTH IN CCW        @OZ20010
         STH   R0,JQBCCHHR+6         AND COUNT FIELD           @OZ20010
         LA    R2,JQBIDAWS-JQBDSECT(,R10) STORE                @OZ20010
         LRA   R14,0(,R2)                  REAL ADDRESS OF     @OZ20010
         STCM  R14,7,JQBCCW5+1              IDAWS IN READ CCW  @OZ20010
         OI    JQBCCW5+4,X'04'        AND SET CCW FOR IDA      @OZ20010
         L     R10,$CKPTR1         PICK UP READ AREA ADDRESS   @OZ20010
NGCKCWIL LRA   R14,0(,R10)         GET REAL ADDRESS OF AREA    @OZ20010
         ST    R14,0(,R2)          STORE IT IN IDAW            @OZ20010
         LA    R10,2048(,R10)      BUMP TO NEXT                @OZ20010
         SH    R0,=H'2048'          2K BLOCK                   @OZ20010
         LA    R2,4(,R2)             AND NEW IDAW              @OZ20010
         BP    NGCKCWIL            LOOP TILL ALL DATA ADDRESSD @OZ20010
         EJECT                                                 @OZ20010
*        BUILD CCW PACKETS FOR JOB QUEUE AND JOT RECORDS       @OZ20010
         SPACE 1                                               @OZ20010
         LH    R7,$JOBRECN         COMPUTE TOTAL CCW AREAS     @OZ20010
         AH    R7,$JOTRECN          TO INITIALIZE              @OZ20010
         L     R10,$JOBQPTR        PICK UP JOB QUEUE ADDRESS   @OZ20010
         B     NGCKCWIT            DO JQES & JOES ON NXT TRACK @OZ20010
         SPACE 1                                               @OZ20010
NGCKCWIK SLR   R14,R14             PICK UP                     @OZ20010
         IC    R14,NGWDBL+4         CURRENT RECORD NUMBER      @OZ20010
         LA    R14,1(,R14)           INCREMENT                 @OZ20010
         CH    R14,NGCKNRT         TEST FOR STILL ON TRACK     @OZ20010
         BNH   NGCKCWIX            BRANCH IF YES               @OZ20010
NGCKCWIT LA    R14,1               PICK UP ADDRESS             @OZ20010
         AL    R14,NGWDBL           OF NEXT HEAD        (CCHH) @OZ20010
         CLM   R14,B'0011',NGZH     TEST FOR CYLINDER BOUNDARY @OZ20010
         BL    NGCKCWIY              BRANCH IF NOT             @OZ20010
         LH    R14,NGWDBL          PICK UP CYLINDER NO. (00CC) @OZ20010
         LA    R14,1(,R14)          INCREMENT                  @OZ20010
         SLL   R14,16                RESET HEAD         (CC00) @OZ20010
NGCKCWIY ST    R14,NGWDBL          REPLACE TRACK ADDRESS       @OZ20010
         LA    R14,1               RESET RECORD NUMBER         @OZ20010
NGCKCWIX STC   R14,NGWDBL+4        REPLACE RECORD NUMBER       @OZ20010
         LA    R1,JQBCNEXT         BUMP TO NEXT CCW AREA       @OZ20010
         MVC   JQBCCHH0(4),NGWDBL  STORE TRACK AND             @OZ20010
         MVC   JQBCCHHR(5),NGWDBL   RECORD ADDRESS IN CCW AREA @OZ20010
         SPACE 1                                               @OZ20010
         BAL   R14,NGCKFMC2        INITIALIZE CCWS             @OZ20010
         SPACE 1                                               @OZ20010
         LRA   R14,0(,R10)         STORE REAL ADDRESS OF AREA  @OZ20010
         STCM  R14,7,JQBCCW5+1      IN READ DATA CCW           @OZ20010
         SPACE 1                                               @OZ20010
         LA    R10,2048(,R10)      BUMP TO NEXT                @OZ20010
         LA    R10,2048(,R10)       DATA AREA PAGE             @OZ20010
         BCT   R7,NGCKCWIK         LOOP TILL ALL CCWS BUILT    @OZ20010
         MVC   JQBCCW6,NGCKPNOP    TERMINATE CCW CHAIN W / NOP @OZ20010
         SPACE 1                                               @OZ20010
         DROP  R6                  KILL DEV TBL ADDRESSABILITY @OZ20010
                                   PRINT OFF - SECTION DELETED @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
                                   PRINT ON -- SECTION DELETED @OZ20010
         TITLE 'HASP INITIALIZATION -- DIRECT ACCESS INITIALIZATION ENVC
               IRONMENT DETERMINATION'                               R4
***********************************************************************
*                                                                     *
*         E N V I R O N M E N T   D E T E R M I N A T I O N           *
*                                                                     *
***********************************************************************
         SPACE 1                                               @OZ20010
         USING JQBDSECT,R10        JQB ADDRESSABILITY          @OZ20010
         SPACE 1                                               @OZ20010
*                                                                     *
*        DETERMINE IF READABLE CHECKPOINT FILE EXISTS                 *
*                                                                     *
NVIRON   STCK  $SIDTIME            OBTAIN CURRENT TIME-OF-DAY        R4
         L     R10,$CKPTIOB        LOCATE JQB AND              @OZ20010
         MVI   JQBCCWS+JQBCCW5-JQBCCWE+4,X'34' SET 1ST CCW     @OZ20010C
                                           TO SKIP-READ        @OZ20010
                                   PRINT OFF - SECTION DELETED @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
                                   PRINT ON -- SECTION DELETED @OZ20010
         SPACE 1                                               @OZ20010
        $GETLOK
         MODESET EXTKEY=ZERO
         IC    R1,UCBSQC                GET RESERVE COUNT      @OZ20010
         LA    R1,1(,R1)                INCREMENT BY ONE
         STC   R1,UCBSQC                STORE BACK IN UCB      @OZ20010
         L     R1,$SSVT            POINT TO SSVT
         USING SSVT,R1
         OI    $SVSTUS,$SVSTIRV    SET CHECKPOINT RESERVE COUNT BIT
         DROP  R1
        $FRELOK
         SPACE 1                                               @OZ20010
         BAL   R14,NGEXCP          FORCE RESERVE ON CKPT VOLUME      R4
         BZ    NFCKPTOK            BR IF SUCCESSFUL                  R4
         TM    $OPTSTAT,$OPTCOLD+$OPTFMT  TEST FOR COLD/FORMAT START R4
         BZ    NGT020              BR IF NO TO DENY REQUEST          R4
         B     NFCKPNOK             ELSE GO COLD START         @OZ20010
         SPACE 1                                               @OZ20010
         DROP  R3                  RELEASE UCB ADDRESSABILITY  @OZ20010
         EJECT                                                       R4
*
*        DETERMINE IF THE FILE CONTAINS HASP CHECKPOINT RECORDS
*
         SPACE 1                                                     R4
NFCKPTOK DS    0H                  SET CCW CHAIN TO READ 1ST   @OZ20010
         MVI   JQBCCWS+JQBCCW5-JQBCCWE+4,X'24'  RECORD         @OZ20010
         SPACE 1                                               @OZ20010
         LH    R1,$QSEL                   COMPUTE              @OZ20010
         MH    R1,$QSENO                   LENGTH              @OZ20010
         LA    R1,$SAVELEN(,R1)             FOR READ           @OZ20010
         STH   R1,JQBCCWS+JQBCCW5-JQBCCWE+6  AND STORE IN CCW  @OZ20010
         SPACE 2                                               @OZ20010
                                   PRINT OFF - SECTION DELETED @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
                                   PRINT ON -- SECTION DELETED @OZ20010
         BAL   R14,NGEXCP          READ 1ST CHECKPOINT RECORD        R4
         SPACE 1                                               @OZ20010
         USING JQBCCWE,R1        TEMP. CCW ADDRESSABILITY      @OZ20010
NFCKPNOK LA    R1,JQBCCWS        LOCATE CCW CHAIN              @OZ20010
         MVI   JQBCCW5+4,X'44'    AND RESET                    @OZ20010
         L     R0,$CKPTR1L         TO READ                     @OZ20010
         STH   R0,JQBCCW5+6         ENTIRE CHECKPOINT          @OZ20010
         DROP  R1                KILL TEMP. CCW ADDRESSABILITY @OZ20010
         SPACE 1                                               @OZ20010
         CLI   NGECB,X'7F'       TEST I/O COMPLETION STATUS    @OZ20010
         BNE   NGTEST            BRANCH IF I/O ERROR           @OZ20010
         SPACE 1                                               @OZ20010
*
*        CONFIRM THAT SUFFICIENT DATA WAS READ TO POTENTIALLY
*        REPRESENT A HASP CHECKPOINT RECORD.
*
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
         OC    JQBCSW+6(2),JQBCSW+6  TEST CSW RESIDUAL COUNT         R4
         BNZ   NGTEST              BR IF LENGTH ERROR INDICATED      R4
*
*        CONFIRM THE EXISTENCE OF A HASP CHECKPOINT RECORD     @OZ20010
*
         L     R1,$CKPTR1          POINT TO HCT VARIABLES      @OZ20010
         CLC   $HASPID,$HASPID-$SAVEBEG(R1)  Q.  IF -JES2-           R4
         BNE   NGTEST              BR. IF NO -- TEST START REQUEST
         EJECT                                                 @OZ20010
*                                                              @OZ20010
*        CHECK FOR OTHER ACTIVE SYSTEMS                        @OZ20010
*                                                              @OZ20010
         SPACE 1                                               @OZ20010
         MVI   $ESYSQSE,X'80'      ASSUME SINGLE SYSTEM WARM START   R4
         L     R2,$SSVT            POINT TO SSVT                    R41
         TM    $SVHASP-SSVT(R2),X'80'  TEST FOR JES2 RESTART        R41
         BO    NFSYSACT                BR IF YES                    R41
         L     R0,$SIDTIME         LOAD FIRST WORD (SECONDS)
         SL    R0,$SYNCTOL         MINUS SYNCHRONIZATION TOLERANCE   R4
         L     R1,$QSE1            LOCATE FIRST QSE                  R4
         LH    R2,$QSENO           PICK UP NUMBER OF SYSTEMS   @OZ20010
         LH    R3,$QSEL            GET QSE LENGTH                    R4
         USING QSEDSECT,R1
NFQSETST TM    QSESTAT,QSEACTIV    TEST FOR ACTIVE SYSTEM            R4
         BZ    SKIP750             BR IF NO                          R4
         CL    R0,QSESITIM         TEST AGE OF CHECKPOINT DATA       R4
         BNH   NFSYSACT            BR. IF SYSTEM NOT DORMANT
SKIP750  TM    QSEFLAGS,QSELAST    Q. IF LAST QSE
         BNZ   NFQSENAC            BR IF YES, VERIFY SYS RESET @OZ20010
         ALR   R1,R3               STEP TO NEXT QSE            @OZ20010
         BCT   R2,NFQSETST         CHECK ALL KNOWN SYSTEMS     @OZ20010
         B     NFSYSACT            ASSUME UNKNOWN SYSTEM ACTIVE@OZ20010
         EJECT                                                       R4
*
*        NO SYSTEM SHARING THE CHECKPOINT FILE IS ACTIVE.
*
NFQSENAC L     R1,$QSE1            LOCATE FIRST QSE            @OZ20010
         TM    QSEFLAGS,QSELAST    Q. IF NO SHARED SYSTEM
         BO    NFQSEONE            BR. IF YES - BYPASS CONFIRMATION
*
*        FORCE THE OPERATOR TO CONFIRM THAT ALL SYSTEMS
*        SHARING THE CHECKPOINT FILE ARE DORMANT.
*
         L     R2,=A(NMSG419)      POINT TO WTOR MESSAGE TEXT
NFQSEMSG TM    QSESTAT,QSEACTIV    TEST FOR ACTIVE SYSTEM            R4
         BZ    NFQSENXT            BR IF NO                          R4
         CLC   QSESID,$SID         TEST FOR THIS SYSTEM              R4
         BE    NFQSENXT            BR IF YES                         R4
         MVC   NMSG419A-NMSG419+1(,R2),QSESID   PUT CPU ID IN MSG.
         LA    R2,5(,R2)           STEP TO NEXT MESSAGE SLOT
NFQSENXT TM    QSEFLAGS,QSELAST    TEST FOR LAST QSE                 R4
         LA    R1,0(R3,R1)         STEP TO NEXT QSE                  R4
         BZ    NFQSEMSG            BR. IF NOT AT END OF QSE ELEMENTS
         CL    R2,=A(NMSG419)      TEST FOR ACTIVE SYSTEM(S)         R4
         BE    NFQSEONE            BR IF NO                          R4
         MVI   NMSG419A-NMSG419(R2),C'.'    SET PERIOD AT END OF MSG
         L     R1,=A(NMSG419)      POINT TO WTOR MESSAGE TEXT
         LA    R2,NMSG419A-(NMSG419+7)(,R2) STEP TO END OF MESSAGE
         SLR   R2,R1               COMPUTE MESSAGE LENGTH
         STH   R2,8(,R1)           STORE INTO WTOR MESSAGE HEADER
         L     WA,=A(NMSG419)      POINT TO 'CONFIRM RESET' MSG     R41
         BAL   WE,NGWTOR           QUERY OPERATOR                   R41
         BNE   NFSYSACT            BR IF REPLY 'NO'                 R41
         SPACE 1                                                    R41
NFQSEONE TM    $OPTSTAT,$OPTCOLD+$OPTFMT  Q. IF COLD OR FORMAT REQ.
         BNZ   NGCOLD              BR. IF YES
         TITLE 'HASP INITIALIZATION -- DIRECT ACCESS INITIALIZATION FORC
                WARM START'                                          R4
***********************************************************************
*                                                                     *
*                     W A R M   S T A R T                             *
*                                                                     *
***********************************************************************
*                                                                     *
*        A WARM START AT THIS POINT IS A COMPLEX WARM START AND       *
*        WILL RESULT IN A TRACK GROUP BIT MAP RECONSTRUCTION.         *
*                                                                     *
         MVI   $ESYSQSE,X'00'      NOTE COMPLEX WARM START
*
*        ENTRY AT THIS POINT WILL WARM START A SINGLE SYSTEM WHILE
*        OTHER ACTIVE SYSTEMS ARE SHARING THE CHECKPOINT FILE
*
NFSYSACT TM    $OPTSTAT,$OPTCOLD+$OPTFMT  COLD/FORMAT START...      R41
         BNZ   NGT040              BR IF YES                        R41
         L     R1,$QSE1            LOCATE 1ST QSE                   R41
         LH    R4,$QSEL            GET QSE LENGTH                   R41
         L     R2,=A(NS1)          LOCATE SYSTEM PARAMETER TABLE    R41
         SPACE 1
NFSYSCHK CLC   $SID,QSESID         Q. IF QSE SID MATCHES SMF SID
         BNE   *+6                 BR. IF NO
         LR    R3,R1               SAVE QSE ADDRESS FOR THIS SYSTEM
         CLC   QSESID,0(R2)        Q. QSE MATCHES PARAMETER TABLE
         BNE   NFSYSERR            BR. IF NO -- TELL OPERATOR
         LA    R2,L'NS1(,R2)       STEP TO NEXT PARAMETER TABLE SLOT
         TM    QSEFLAGS,QSELAST    Q. IF AT LAST QSE
         LA    R1,0(R4,R1)         STEP TO NEXT QSE                  R4
         BZ    NFSYSCHK            CONTINUE TO CHECK IF NOT AT END
         LR    R1,R3               RESTORE QSE ADDR FOR THIS SYSTEM
         CLI   0(R2),C' '          Q. IF AT END OF PARAMETER TABLE
         BE    NFSYSQSE            BR. IF YES -- CONTINUE WARM START
         SPACE 1                                                    R41
NFSYSERR L     R1,=A(NVALMSG)      POINT TO WTO MESSAGE TEXT
         B     NGKWIT              BR. TO TELL OPERATOR AND QUIT
         EJECT                                                      R41
NFSYSQSE STCK  $SIDTIME            OBTAIN CURRENT TIME OF DAY
         TM    QSESTAT,QSEACTIV    TEST FOR ACTIVE SYSTEM            R4
         BZ    NFSYSQOK            BR IF NO                          R4
         L     R0,$SIDTIME         LOAD FIRST WORD (SECONDS)
         SL    R0,$SYNCTOL         MINUS SYNCHRONIZATION TOLERANCE   R4
         CL    R0,QSESITIM         Q. IF THIS SYSTEM IS ACTIVE
         BH    NFSYSQOK            BR. IF NO -- CONTINUE WARM START
         L     R1,$QSE1            LOCATE FIRST QSE                  R4
         TM    QSEFLAGS,QSELAST    Q. IF SINGLE SYSTEM IN COMPLEX
         BO    NFSYSQOK            BR. IF YES -- CONTINUE WARM START
         L     R2,$SSVT            POINT TO SSVT                    R41
         TM    $SVHASP-SSVT(R2),X'80'  TEST FOR JES2 RESTART        R41
         BO    NFSYSQOK                BR IF YES                    R41
         L     R1,=A(NDORMMSG)     POINT TO 'NOT DORMANT' MSG       R41
         MVC   NDORMTYP-NDORMMSG(,R1),=C'SYSTEM '  INDICATE SYSTEM  R41
        $$WTO  (R1)                TELL OPERATOR SYSTEM NOT DORMANT R41
         L     WA,=A(NRESUMSG)     POINT TO 'CONTINUE' MSG          R41
         MVC   NRESUMST-NRESUMSG(,WA),=C'WARM'  INDICATE WARM START R41
         BAL   WE,NGWTOR           QUERY OPERATOR                   R41
         BNE   NGQUITT             QUIT IF CANNOT WARM START        R41
         SPACE 1                                               @OZ18412
         EJECT                                                       R4
NFSYSQOK TM    $ESYSQSE,X'80'      Q. IF COMPLEX WARM START
         BZ    *+8                 BR. IF YES
         ST    R3,$ESYSQSE         SET QSE ADDR OF THIS SYSTEM @OZ18412
         ST    R3,$AQSE            SET QSE ADDR OF THIS SYSTEM @OZ18412
         SL    R3,$CKPTR1          STORE ADDR OF THIS          @OZ20010
         AL    R3,$CKPR1RD          SYSTEM'S QSE IN THE        @OZ20010
         ST    R3,$RQSE              CKPT READ-IN AREA         @OZ20010
         SPACE 1                                                     R4
***********************************************************************
*                                                                     *
*        ENSURE THAT CHECKPOINT VERIFICATION FIELDS ARE VALID         *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
         L     WF,$CKPTR1          POINT TO HCT VARIABLES      @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
         CLC   $PARMVER,$PARMVER-$SAVEBEG(WF)  TEST NEW PARMS        R4
         BE    NFSYSPOK            BR IF VALID PARAMETERS            R4
         LA    R2,NUMPARMS+1-3     SET INITIAL PARAMETER COUNT       R4
         LA    R3,2                SET PARM COUNT FOR REST OF LINE  R41
         L     R4,=A(NMSGPRMS)     POINT TO PARM AREA OF MESSAGE     R4
         LA    R5,NOLDPRMS         POINT TO TABLE OF REQUIRED PARMS  R4
         MVC   15(6,R4),$SPOOL-$SAVEBEG(WF)  SET 1ST PARM IN 1ST LN  R4
         CLC   $SPOOL,15(R4)       WAS PARM VALUE VALID...           R4
         BE    NEXTPARM            BR IF YES                        R41
         MVI   21(R4),C'*'          ELSE INDICATE INVALID            R4
         SPACE 1                                                     R4
NEXTPARM LA    R4,21(,R4)          POINT TO NEXT PARM SLOT IN LINE   R4
         MVC   4(8,R4),6(R5)       SET PARM KEYWORD                  R4
         MVC   12(9,R4),NPARMASK   SET MASK FOR PARM VALUE EDIT      R4
         SLR   R1,R1               CLEAR IN CASE OF INSERT           R4
         MVI   XVALLOAD,X'43'      SET                               R4
         CLI   1(R5),1              UP                               R4
         BL    SKIP770               APPROPRIATE                     R4
         MVI   XVALLOAD,X'48'         REGISTER                       R4
         BE    SKIP770                 LOAD                          R4
         MVI   XVALLOAD,X'58'           INSTRUCTION                  R4
SKIP770  MVC   XVALLOAD+2(2),4(R5) SET TARGET OF LOAD                R4
XVALLOAD IC    R1,*-*              GET PARM VALUE IN R1              R4
         CVD   R1,NGWDBL           SET PARM VALUE                    R4
         ED    15(6,R4),NGWDBL+5    IN MESSAGE                       R4
         EX    R0,0(,R5)           WAS PARM VALUE VALID...           R4
         BE    SKIP780             BR IF YES                         R4
         MVI   21(R4),C'*'          ELSE INDICATE INVALID            R4
SKIP780  LA    R5,14(,R5)          POINT TO NEXT PARM IN TABLE       R4
         BCT   R3,NEXTPARM         LOOP THRU LINE                    R4
         SPACE 1                                                     R4
         LA    R4,1(,R4)           ADJUST FOR END OF LINE      @OZ18405
         LA    R3,3                SET FULL LINE PARM COUNT          R4
         SR    R2,R3               REDUCE COUNT OF PARMS REMAINING   R4
         BNM   NEXTPARM            BR IF ENOUGH FOR FULL LINE        R4
         AR    R3,R2               GET SHORT LINE PARM COUNT         R4
         BP    NEXTPARM            BR IF 1ST TIME THRU HERE          R4
         L     R1,=A(NPARAMSG)     POINT TO MESSAGE TEXT             R4
         B     NGKWIT              BR TO ISSUE MESSAGE AND QUIT      R4
         EJECT                                                       R4
***********************************************************************
*                                                                     *
*        READ IN ENTIRE JOB QUEUE AND JOT                             *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
NFSYSPOK MVC   $SAVEBEG($SAVELEN),0(WF)  SAVE HCT VARIABLES          R4
         BAL   R14,NGEXCP          ISSUE EXCP                  @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
         BNZ   NGCKMSGR            BR IF I/O ERROR                   R4
         SPACE 1                                               @OZ20010
         OC    $ESYSQSE,$ESYSQSE   TEST FOR NODAL WARM START         R4
         BNZ   NGW020              BR IF NO                          R4
         L     R0,$TGMAP           CLEAR                             R4
         L     R1,$CYLMAPL          MASTER                           R4
         SLR   R15,R15               TRACK GROUP                     R4
         MVCL  R0,R14                 BIT MAP                        R4
         DROP  R10                 RELEASE JQB ADDRESSABILITY  @OZ20010
         EJECT                                                       R4
***********************************************************************
*                                                                     *
*        ENSURE THAT ALL FORMERLY MOUNTED SPOOL VOLUMES ARE NOW       *
*        MOUNTED ON THE PROPER DEVICES AND THAT EACH HAS THE SAME     *
*        EXTENT LIMITS AS BEFORE                                      *
*                                                                     *
***********************************************************************
         SPACE 1                                               @OZ20010
         USING NVLDSECT,WD         ALLOC TABLE ADDRESSABILITY  @OZ20010
         USING SPLDSECT,WC         SPOOL ALLOC ADDRESSABILITY  @OZ20010
         SPACE 1                                                     R4
NGW020   SLR   WF,WF               INITIAL RELATIVE $DACKPT ENTRY    R4
         SPACE 1                                                     R4
NGW040   L     R1,$DACKPT          GET NEXT                          R4
         LR    WB,WF                OLD                              R4
         MH    WB,=H'6'              DISK                            R4
         LH    WB,0(WB,R1)            DESCRIPTOR                     R4
         LTR   WB,WB               TEST ENTRY                        R4
         BZ    NGW220              IGNORE IF NULL                    R4
         L     WD,NVOLTABL          ELSE PREPARE TO SCAN ALLOC TBL   R4
         SPACE 1                                                     R4
NGW060   LA    WD,NVLTBLN(,WD)     POINT TO NEXT ALLOC TBL ENTRY     R4
         CLM   WB,1,NVLVOLID+5     TEST VOLUME SERIAL                R4
         BE    NGW080              BR IF MATCHING                    R4
         TM    NVLEND,255          TEST FOR EMPTY/LAST ENTRY         R4
         BM    NGW060              LOOP IF NO                        R4
         SPACE 1                                                     R4
         BO    NDAERR2             BR IF ENTRIES EXHAUSTED           R4
         MVC   NVLVOLID,$SPOOL     SET VOLUME                        R4
         STC   WB,NVLVOLID+5        SERIAL NUMBER                    R4
         MVI   NVLFLAGS,SPL1NFMT   SET REQUEST FLAGS                 R4
         BAL   WE,NGSPLGET         OBTAIN SPOOL VOL ALLOC WORK AREA  R4
         ICM   WB,4,=AL1(UCB3DACC) INDICATE DIRECT ACCESS            R4
         LOAD  EP=DEVNAMET         GET DEVICE NAME TABLE             R4
         LR    WE,R0               MAKE ADDRESSABLE                  R4
         L     WA,0(,WE)           GET ENTRIES IN TABLE              R4
         LA    WE,4(,WE)           POINT TO 1ST TABLE ENTRY          R4
         SPACE 1                                                     R4
SKIP790  CLM   WB,6,10(WE)         TEST FOR MATCH                    R4
         BE    *+12                BR IF YES                         R4
         LA    WE,12(,WE)           ELSE POINT TO NEXT ENTRY         R4
         BCT   WA,SKIP790            AND BR TO TEST IT               R4
         SPACE 1                                                     R4
         DELETE EP=DEVNAMET        DELETE DEVICE NAME TABLE          R4
         LTR   WA,WA               TEST ENTRY COUNT                  R4
         BNZ   NGW070              BR IF ENTRY LOCATED               R4
         BAL   WE,NGWUNAL           ELSE ISSUE ERROR MESSAGE,        R4
         OI    NGQUIT+1,X'F0'        SET QUIT SWITCH,                R4
         B     NGW220                 AND BR TO CONTINUE             R4
         EJECT                                                       R4
NGW070   MVC   SPLUNIT(8),0(WE)    SET DEVICE TYPE                   R4
         B     NGW100              THEN BR TO ALLOCATE VOLUME        R4
         SPACE 1                                                     R4
NGW080   MVI   NVLFLAGS,SPL1NFMT   SET REQUEST FLAGS                 R4
         BAL   WE,NGSPLGET         OBTAIN SPOOL VOL ALLOC WORK AREA  R4
         SPACE 1                                                     R4
NGW100   BAL   WE,NGALLOC          ALLOCATE SPOOL VOLUME             R4
         BAL   WE,NGWAIT           WAIT FOR ALLOCATION TO COMPLETE   R4
         TM    SPLFLG2,SPL2UNAL+SPL2OBT  TEST ALLOCATE/OBTAIN        R4
         BNZ   NGW160              BR IF ERROR                       R4
         TM    SPLFLG2,SPL2RDER    IS VOLUME FORMATTED...            R4
         BO    NGW120              ERROR IF NO                       R4
         LR    WB,WF               POINT TO                          R4
         MH    WB,=H'6'             CHECKPOINT INFO                  R4
         AL    WB,$DACKPT            FOR THIS VOLUME                 R4
         CLC   2(4,WB),SPLOWTRK    TEST EXTENT LIMITS                R4
         BE    NGW180              BR IF SAME (OK)                   R4
         L     R1,=A(NXTNTMSG)     POINT TO MESSAGE TEXT             R4
         MVC   NXTNTVOL-NXTNTMSG(,R1),SPLVOLID  SET VOLUME SERIAL    R4
         B     NGW140              BR TO ISSUE ERROR MESSAGE         R4
         SPACE 1                                                     R4
NGW120   L     R1,=A(NRDERMSG)     POINT TO MESSAGE TEXT             R4
         MVC   NRDERVOL-NRDERMSG(,R1),SPLVOLID  SET VOLUME SERIAL    R4
         SPACE 1                                                     R4
NGW140  $$WTO  (R1)                ISSUE ERROR MESSAGE TO OPERATOR   R4
         SPACE 1                                                     R4
NGW160   OI    NGQUIT+1,X'F0'      SET QUIT SWITCH                   R4
         SPACE 1                                                     R4
NGW180   TM    NGQUIT+1,X'F0'      TEST QUIT SWITCH                  R4
         BO    NGW200              BR IF SET                         R4
         BAL   WE,NGDEBSET         SET DEB EXTENT AND TED ENTRY      R4
         OC    $ESYSQSE,$ESYSQSE   TEST FOR NODAL WARM START         R4
         BNZ   NGW200              BR IF NO                          R4
         BAL   WE,NGBITMAP         ADD OLD VOLUME BIT MAP TO MASTER  R4
         SPACE 1                                                     R4
NGW200   BAL   WE,NGDETACH         DETACH HOSPOOL, FREE WORK AREA    R4
         SPACE 1                                                     R4
NGW220   LA    WF,1(,WF)           BUMP $DACKPT RELATIVE ENTRY NO.   R4
         CLM   WF,1,$NUMDA         TEST FOR END OF TABLE             R4
         BL    NGW040              BR IF NO                          R4
         EJECT                                                       R4
***********************************************************************
*                                                                     *
*        CHECK FOR NEW SPOOL VOLUMES.  IF NODAL (COMPLEX) WARM        *
*        START, TREAT EACH ONE FOUND AS IN COLD START.  IF JES2       *
*        RESTART, OR SINGLE SYSTEM WARM START WITHIN MULTI-SYSTEM     *
*        NODE, DISALLOW USE OF NEW SPOOL VOLUME.                      *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
         L     WD,NVOLTABL         POINT TO ALLOCATION TABLE         R4
         SPACE 1                                                     R4
NGW240   LA    WD,NVLTBLN(,WD)     GET NEXT TABLE ENTRY              R4
         TM    NVLEND,255          IF NO MORE ENTRIES,               R4
         BNM   NGW300               BR TO WAIT ON ALLOCATES (IF ANY) R4
         TM    NVLFLAGS,SPL1NFMT   IF PREVIOUSLY USED VOLUME,        R4
         BO    NGW240               BR TO CHECK NEXT                 R4
         OC    $ESYSQSE,$ESYSQSE   IF NODAL WARM START,              R4
         BZ    NGW260               BR TO ALLOCATE NEW VOLUME        R4
         L     R1,=A(NOUSEMSG)     POINT TO MESSAGE TEXT             R4
         MVC   NOUSEVOL-NOUSEMSG(,R1),NVLVOLID  SET VOLUME SERIAL    R4
        $$WTO  (R1)                ISSUE WARNING MESSAGE TO OPERATOR R4
         B     NGW240              THEN BR TO CONTINUE CHECKING      R4
         SPACE 1                                                     R4
NGW260   BAL   WE,NGSPLGET         GET SPOOL VOL ALLOC WORK AREA     R4
         L     R1,NVOLWKSP         L-I-F-O QUEUE                     R4
         ST    WC,NVOLWKSP          WORK AREA                        R4
         ST    R1,SPLCHAIN           TO NVOLWKSP                     R4
         BAL   WE,NGALLOC          ALLOCATE THE SPOOL VOLUME         R4
         B     NGW240              THEN BR TO CONTINUE CHECKING      R4
         SPACE 1                                                     R4
NGW300   ICM   WC,15,NVOLWKSP      GET NEXT SPOOL VOL ALLOC WK AREA  R4
         BZ    NGEXIT              BR IF NO MORE TO EXIT             R4
         MVC   NVOLWKSP,SPLCHAIN    ELSE DE-CHAIN THE WORK AREA      R4
         BAL   WE,NGWAIT           WAIT FOR ALLOCATION TO COMPLETE   R4
         BNZ   NGW320              BR IF ANY ERRORS                  R4
         BAL   WE,NGCKPSET         SET $DACKPT ENTRY                 R4
         BAL   WE,NGDEBSET         SET DEB EXTENT AND TED ENTRY      R4
         BAL   WE,NGBITMAP         ADD NEW VOLUME BIT MAP TO MASTER  R4
         SPACE 1                                                     R4
NGW320   BAL   WE,NGDETACH         DETACH HOSPOOL, FREE WORK AREA    R4
         B     NGW300              BR TO CHECK FOR ANOTHER NEW VOL   R4
         EJECT                                                       R4
***********************************************************************
*                                                                     *
*        INVALID CHECKPOINT RECORD - WARM START NOT POSSIBLE          *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
NGTEST   TM    $OPTSTAT,$OPTCOLD+$OPTFMT  TEST FOR COLD/FORMAT START R4
         BNZ   NGT060              BR IF YES                        R41
         SPACE 1                                                     R4
NGT020   L     R1,=A(NMSG434)      POINT TO MESSAGE TEXT             R4
         B     NGKWIT              BR TO ISSUE MESSAGE AND QUIT      R4
         SPACE 1                                                     R4
         USING QSEDSECT,R1         PROVIDE QSE ADDRESSABILITY       R41
         SPACE 1                                                    R41
NGT040   L     R1,$QSE1            LOCATE 1ST QSE                   R41
         TM    QSEFLAGS,QSELAST    UNI-SYSTEM NODE...               R41
         BO    NGT060              BR IF YES                        R41
        $$WTO  NDORMMSG            TELL OP THAT COMPLEX NOT DORMANT R41
         L     WA,=A(NRESUMSG)     POINT TO 'CONTINUE' MSG          R41
         BAL   WE,NGWTOR           QUERY OPERATOR                   R41
         BE    NGCOLD              BR IF OK TO COLD START           R41
         B     NGQUITT              ELSE QUIT                       R41
         SPACE 1                                                    R41
         DROP  R1                  KILL QSE ADDRESSABILITY          R41
         SPACE 1                                                    R41
NGT060   L     WA,=A(NMSG436)      POINT TO 'CONFIRM CHANGE' MSG    R41
         BAL   WE,NGWTOR           QUERY OPERATOR                   R41
         BE    NGCOLD              BR IF OK TO COLD START           R41
         L     R1,=A(NMSG434)      POINT TO MESSAGE TEXT             R4
         MVC   NMSG434A-NMSG434(,R1),=C'COLD'  CHANGE WARM TO COLD   R4
         B     NGKWIT              BR TO ISSUE MESSAGE AND QUIT      R4
         TITLE 'HASP INITIALIZATION -- DIRECT ACCESS INITIALIZATION FORC
                COLD START'                                          R4
***********************************************************************
*                                                                     *
*        BUILD QSE(S) FROM SYSTEM PARAMETER TABLE                     *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
NGCOLD   MVI   $ESYSQSE,0          NOTE NODAL COLD START             R4
         L     R0,$TGMAP           CLEAR                             R4
         L     R1,$CYLMAPL          MASTER                           R4
         SLR   R15,R15               TRACK GROUP                     R4
         MVCL  R0,R14                 BIT MAP                        R4
         L     R0,$QSE1            CLEAR                             R4
         LH    R1,$QSENO            ALL                              R4
         MH    R1,$QSEL              ACTIVE                          R4
         MVCL  R0,R14                 QSES                           R4
         L     R1,$QSE1            POINT TO 1ST QSE                  R4
         L     R2,=A(NS1)          POINT TO SYSTEM PARAMETER TABLE   R4
         SPACE 1                                                     R4
         USING QSEDSECT,R1         PROVIDE QSE ADDRESSABILITY        R4
         SPACE 1                                                     R4
NGC020   MVC   QSESID,0(R2)        SET SYSTEM ID                     R4
         MVC   QSESIBSY(2),NS1A-NS1(R2)  SET BUSY AND AFFINITY       R4
         CLC   $SID,QSESID         TEST FOR THIS SYSTEM              R4
         BNE   SKIP800             BR IF NO                          R4
         ST    R1,$AQSE             ELSE SAVE QSE ADDRESS            R4
         LR    R0,R1               STORE ADDRESS               @OZ20010
         SL    R0,$CKPTR1           OF THIS SYSTEM'S QSE       @OZ20010
         AL    R0,$CKPR1RD           IN THE CHECKPOINT         @OZ20010
         ST    R0,$RQSE               READ-IN AREA             @OZ20010
SKIP800  LA    R2,L'NS1(,R2)       STEP TO NEXT TABLE ENTRY          R4
         CLI   0(R2),C' '          TEST FOR END OF TABLE             R4
         BE    NGC040              BR IF YES                         R4
         AH    R1,$QSEL             ELSE STEP TO NEXT QSE            R4
         B     NGC020                AND BR TO SET IT                R4
         SPACE 1                                                     R4
NGC040   OI    QSEFLAGS,QSELAST    INDICATE LAST QSE                 R4
         SPACE 1                                                     R4
         DROP  R1                  KILL QSE ADDRESSABILITY           R4
         EJECT                                                       R4
***********************************************************************
*                                                                     *
*        ALLOCATE SPOOL VOLUMES FOR COLD/FORMAT START                 *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
         L     WD,NVOLTABL         POINT TO ALLOCATION TABLE         R4
         SPACE 1                                                     R4
NGC060   LA    WD,NVLTBLN(,WD)     GET NEXT TABLE ENTRY              R4
         TM    NVLEND,255          IF NO MORE ENTRIES,               R4
         BNM   NGC080               BR TO WAIT ON ALLOCATE(S)        R4
         TM    $OPTSTAT,$OPTFMT    TEST FOR FORMAT START             R4
         BZ    SKIP810             BR IF NO                          R4
         OI    NVLFLAGS,SPL1FMT     ELSE FORCE VOLUME FORMAT         R4
SKIP810  BAL   WE,NGSPLGET         OBTAIN SPOOL VOL ALLOC WORK AREA  R4
         L     R1,NVOLWKSP         L-I-F-O QUEUE                     R4
         ST    WC,NVOLWKSP          WORK AREA                        R4
         ST    R1,SPLCHAIN           TO NVOLWKSP                     R4
         BAL   WE,NGALLOC          ALLOCATE THE SPOOL VOLUME         R4
         B     NGC060              THEN BR TO CHECK NEXT ENTRY       R4
         SPACE 1                                                     R4
NGC080   ICM   WC,15,NVOLWKSP      GET NEXT SPOOL VOL ALLOC WK AREA  R4
         BZ    NGC140              BR IF NO MORE                     R4
         MVC   NVOLWKSP,SPLCHAIN    ELSE DE-CHAIN THE WORK AREA      R4
         BAL   WE,NGWAIT           WAIT FOR ALLOCATION TO COMPLETE   R4
         BZ    NGC100              BR IF OK TO ACCEPT VOLUME         R4
         CLC   $SPOOL,SPLVOLID     TEST FOR PRIMARY SPOOL VOLUME     R4
         BNE   NGC120              BR IF NO TO IGNORE VOLUME         R4
         OI    NGQUIT+1,X'F0'       ELSE SET QUIT SWITCH             R4
         B     NGC120              THEN BR TO CONTINUE               R4
         SPACE 1                                                     R4
NGC100   BAL   WE,NGCKPSET         SET $DACKPT ENTRY                 R4
         BAL   WE,NGDEBSET         SET DEB EXTENT AND TED ENTRY      R4
         BAL   WE,NGBITMAP         ADD NEW VOLUME BIT MAP TO MASTER  R4
         SPACE 1                                                     R4
NGC120   BAL   WE,NGDETACH         DETACH HOSPOOL, FREE WORK AREA    R4
         B     NGC080              BR TO CHECK FOR ANOTHER VOLUME    R4
         SPACE 1                                                     R4
NGC140   EX    R0,NGQUIT           QUIT IF ANY ERROR(S)              R4
         SPACE 1                                                     R4
         DROP  WC,WD               KILL SPL/ALLOC TBL ADDRESSABILITY R4
         EJECT                                                       R4
***********************************************************************
*                                                                     *
*        FORMAT HASP JOB QUEUE                                        *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
         USING JQEDSECT,R2         JQE ADDRESSABILITY          @OZ20010
         SPACE 2                                               @OZ20010
         L     R2,$JOBQPTR         PICK UP ADDRESS OF 0TH JQE  @OZ20010
         MVC   JQEDSECT(JQELNGTH),NGJQETXT SET EYE-CATCHER     @OZ20010
         MVC   NGJQESID(,R2),$SID  MOVE $SID TO EYE-CATCHER    @OZ20010
         TIME  DEC                 GET 'READABLE' DATE/TIME    @OZ20010
         STM   R0,R1,NGJQEDTM(R2)  STORE IN EYE-CATCHER        @OZ20010
         LA    R2,JQELNGTH(,R2)    POINT TO ACTUAL 1ST JQE     @OZ20010
         LH    R3,$MAXJOBS         NO. OF JQES TO INITIALIZE   @OZ20010
         LA    R1,$JQFREE          PICK UP ADDRESS OF FREE Q   @OZ20010
         SPACE 1                                               @OZ20010
NGC200   LR    R0,R2               COMPUTE                     @OZ20010
         SL    R0,$JOBQPTR          NEXT                       @OZ20010
         SRL   R0,2                  JQE OFFSET                @OZ20010
         STH   R0,0(,R1)           STORE PREVIOUS JQE CHAIN    @OZ20010
         MVI   JQETYPE,X'FF'       SHOW JQE ON FREE QUEUE      @OZ20010
         LA    R1,JQECHAIN         POINT TO CHAIN              @OZ20010
         LA    R2,JQELNGTH(,R2)    BUMP TO NEXT JQE            @OZ20010
         BCT   R3,NGC200           LOOP TILL ALL JQES CHAINED  @OZ20010
         SPACE 1                                               @OZ20010
         SLR   R2,R2               CLEAR LAST JQE              @OZ20010
         ST    R2,0(,R1)            CHAIN POINTER              @OZ20010
         SPACE 1                                               @OZ20010
                                   PRINT OFF - SECTION DELETED @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
                                   PRINT ON -- SECTION DELETED @OZ20010
         STH   R2,$JOBNO           RESET JOB NUMBER            @OZ20010
         L     R6,=F'10000'        RESET                             R4
         STH   R6,$STCNO            STARTED TASK NUMBER              R4
         ALR   R6,R6               RESET                             R4
         STH   R6,$TSUNO            TIME-SHARING USER NUMBER         R4
         SPACE 2                                               @OZ20010
         DROP  R2                  RELEASE JQE ADDRESSABILITY  @OZ20010
         EJECT                                                       R4
***********************************************************************
*                                                                     *
*        FORMAT HASP JOB OUTPUT TABLE                                 *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
         USING JOTDSECT,R2         PROVIDE JOT ADDRESSABILITY  @OZ20010
         SPACE 1                                               @OZ20010
         L     R2,$JOTABLE                                     @OZ20010
         LH    R3,$NUMJOES         NO. OF JQES TO INITIALIZE   @OZ20010
         STH   R3,JOTFREC           EQUAL NUMBER OF FREE JOES  @0Z20010
         LA    R1,JOTFREQ          PICK UP ADDRESS OF FREE Q   @OZ20010
         LA    R2,JOTJOES          PICK UP ADDRESS OF 1ST JOE  @OZ20010
         USING JOEDSECT,R2         PROVIDE JOE ADDRESSABILITY  @OZ20010
         SPACE 1                                               @OZ20010
NGC202   LR    R0,R2               COMPUTE                     @OZ20010
         SL    R0,$JOTABLE          OFFSET TO                  @OZ20010
         SRL   R0,2                  NEXT JOE                  @OZ20010
         STH   R0,0(,R1)           STORE PREVIOUS JOE CHAIN    @OZ20010
         LA    R1,JOENEXT          POINT TO CHAIN              @OZ20010
         LA    R2,JOESIZE(,R2)     BUMP TO NEXT JOE            @OZ20010
         BCT   R3,NGC202           LOOP TILL ALL JOES CHAINED  @OZ20010
         SPACE 1                                               @OZ20010
         SLR   R2,R2               CLEAR LAST JOE              @OZ20010
         ST    R2,0(,R1)            CHAIN POINTER              @OZ20010
         B     NGEXIT              BRANCH AROUND DATA          @OZ20010
         SPACE 1                                               @OZ20010
                                   PRINT OFF - SECTION DELETED @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
                                   PRINT ON -- SECTION DELETED @OZ20010
         DROP  R2                  KILL JOT ADDRESSABILITY     @OZ20010
         SPACE 1                                               @OZ20010
NGJQETXT DC    CL(JQELNGTH)' '     EBDCIC TEXT FOR SPACE       @0Z20010
         ORG   NGJQETXT              USED BY ZEROTH JQE ENTRY  @0Z20010
         DC    CL5'JES2 '          NAME OF JOB ENTRY SUBSYSTEM @0Z20010
         DC    CL10'COLDSTART '    COLDSTART TIME STAMP FLAG   @0Z20010
NGJQESID EQU   *-NGJQETXT,4        OFFSET, LEN FOR SMF SYSID   @0Z20010
         DC    CL5' '              SLOT FOR SMF SYSID          @0Z20010
NGJQEDTM EQU   *-NGJQETXT,8        OFFSET, LEN FOR DATE/TIME   @0Z20010
         DC    CL8' '              SLOT FOR DATE/TIME (SVC 11) @0Z20010
         ORG   ,                                               @0Z20010
         TITLE 'HASP INITIALIZATION -- DIRECT ACCESS INITIALIZATION TERC
               MINATION'                                             R4
***********************************************************************
*                                                                     *
*        ALLOCATE TRACKS FOR MESSAGE SPOOLING                         *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
         USING TEDDSECT,WA         PROVIDE TED ADDRESSABILITY        R4
         SPACE 1                                                     R4
         CNOP  0,4                                                   R4
NGEXIT   DS    0H                  USED LATER AS SAVE AREA           R4
         SPACE 1                                                     R4
NGQUIT   NOP   NGQUITT             QUIT IF ANY ERROR(S) SO FAR       R4
         CLI   $SPOLMSG,0          IF NO MSG BUFFERS REQUESTED,      R4
         BE    NGX000               DON'T ALLOCATE ANY TRACKS        R4
         L     WA,TEDSTART         POINT TO PRIMARY SPOOL VOL TED    R4
         L     WC,$TGMAP           POINT TO PRIMARY SPOOL VOL TGM    R4
         L     R1,$DACKPT          GET START OF PRIMARY              R4
         LH    R1,2(,R1)            SPOOL DATA SET                   R4
         LR    R15,R1              SAVE FOR SETTING OF MTTR          R4
         LH    WD,TNTG             GET TRACKS PER GROUP              R4
         ALR   R1,WD               R1 = FIRST                        R4
         BCTR  R1,0                      AVAILABLE                   R4
         SLR   R0,R0                      TRACK                      R4
         DR    R0,WD                       GROUP                     R4
         LR    WE,R1               SAVE FOR LATER USE                R4
         BCTR  WE,0                GET GROUP IN FRONT                R4
         LR    WF,WE               SAVE IT ALSO                      R4
         MR    R0,WD               GET TRACK NUMBER OF GROUP         R4
         SR    R1,R15              TRACKS LEFT IN DEAD SPACE         R4
         BNZ   SKIP840             SKIP IF DEAD SPACE TRACKS         R4
         OI    NMSGECLD+1,X'F0'    SET TO PREVENT ALLOCATION         R4
SKIP840  LH    R15,TNRT            GET RECORDS PER TRACK             R4
         MR    R0,R15              R1 = NEGATIVE OF NUMBER           R4
         LNR   R1,R1                     OF ALLOCATED RECORDS        R4
         IC    R0,$SPOLMSG         R1 = NUMBER                       R4
         AR    R1,R0                     OF RECORDS                  R4
         MH    R0,$NUMRJE                 LEFT                       R4
         AR    R1,R0                       AVAILABLE                 R4
         BNP   NTESTART            BR IF NONE REMAINING              R4
         MR    R14,WD              R1 = NUMBER                       R4
         AR    R1,R15                    OF                          R4
         BCTR  R1,0                       TRACK                      R4
         SLR   R0,R0                       GROUPS                    R4
         DR    R0,R15                       REMAINING                R4
         ALR   WE,R1               END GROUP                         R4
         LNR   R1,R1               NEGATIVE OF GROUPS REMAINING      R4
         A     R1,NGXTGS           TOTAL - GROUPS = REMAINING        R4
         BNP   NMSGERR             IF NOT POSITIVE, SERIOUS ERROR    R4
         ST    R1,NGXTGS           SET NEW TOTAL                     R4
         SPACE 1                                                     R4
NTESTART OC    $ESYSQSE,$ESYSQSE   TEST FOR NODAL WARM/COLD START    R4
         BNZ   NGX080              BR IF NO                          R4
         EJECT                                                       R4
NMSGLOOP LR    R14,WE              LOCATE BIT MAP BYTE AND BIT       R4
         SRDL  R14,3               SEPARATE BYTE AND BIT             R4
         CH    R14,TNMB            MAKE SURE WITHIN PRIMARY VOLUME   R4
         BH    NMSGERR             ERROR IF NOT                      R4
         LA    R1,0(R14,WC)        BYTE OF CYLINDER MAP              R4
         SRL   R15,32-3            ALIGN AT LOW END                  R4
         IC    R15,NMSGBIT(R15)    PICK UP BIT PATTERN               R4
         CR    WE,WF               TEST FOR END                      R4
         BNH   NMSGECLD            EXIT IF SO                        R4
         EX    R15,NMSGXI          FLIP BIT TO OFF                   R4
         EX    R15,NMSGTM          TEST FOR BIT OFF                  R4
         BNZ   NMSGERR             ERROR IF NOT                      R4
         BCT   WE,NMSGLOOP         LOOP                              R4
         SPACE 1                                                     R4
NMSGECLD NOP   NGX000              FALL THRU IF TRKS IN DEAD SPACE   R4
         EX    R15,NMSGOI          TURN BIT ON                       R4
         EX    R15,NMSGXI          NOW TURN BIT OFF                  R4
         B     NGX000              THEN BR TO CONTINUE               R4
         SPACE 1                                                     R4
         DROP  WA                  KILL TED ADDRESSABILITY           R4
         SPACE 2                                                     R4
NMSGERR  L     R1,=A(NMSGMSG)      POINT TO MESSAGE TEXT             R4
         B     NGKWIT              BR TO ISSUE MESSAGE AND QUIT      R4
         SPACE 2                                                     R4
NMSGBIT  DC    X'8040201008040201' BIT PATTERNS FOR ALLOCATION       R4
         SPACE 1                                                     R4
NMSGXI   XI    0(R1),*-*           *** EXECUTE ONLY ***              R4
NMSGTM   TM    0(R1),*-*           *** EXECUTE ONLY ***              R4
NMSGOI   OI    0(R1),*-*           *** EXECUTE ONLY ***              R4
         EJECT                                                       R4
***********************************************************************
*                                                                     *
*        SYSTEM ENVIRONMENT RECORDING                                 *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
NGX000   OC    $ESYSQSE,$ESYSQSE   TEST FOR NODAL WARM/COLD START    R4
         BNZ   NGX080              BR IF NO                          R4
         L     R1,$QSE1            POINT TO 1ST QSE                  R4
         LH    R0,$QSENO           GET NUMBER OF MEMBERS IN NODE     R4
         SPACE 1                                                     R4
         USING QSEDSECT,R1         PROVIDE QSE ADDRESSABILITY        R4
         SPACE 1                                                     R4
NGX020   XC    QSESITIM,QSESITIM   ZERO LAST CHECKPOINT WRITE TIME   R4
         NI    QSESTAT,255-QSEACTIV  INDICATE SYSTEM INACTIVE        R4
         AH    R1,$QSEL            STEP TO NEXT QSE                  R4
         BCT   R0,NGX020           LOOP THRU ACTIVE QSES             R4
         SPACE 1                                                     R4
*                                  THIS CARD DELETED BY APAR   @OZ20010
         L     R1,$CKPTR1              MOVE HCT VARIABLES      @OZ20010
         MVC   0($SAVELEN,R1),$SAVEBEG  TO JOB QUEUE BUFFER    @OZ20010
         EJECT                                                       R4
***************************************************************@OZ20010
*                                                              @OZ20010
*       ADJUST INITIALIZATION CCW CHAIN TO WRITE AND / OR      @OZ20010
*                   FORMAT THE CHECKPOINT                      @OZ20010
*                                                              @OZ20010
***************************************************************@OZ20010
         SPACE 1                                               @OZ20010
         USING JQBCCWE,R1          CCW PACKET ADDRESSABILITY   @OZ20010
         SPACE 1                                               @OZ20010
NGX080   L     R1,$CKPTIOB              PICK UP                @OZ20010
         LA    R1,JQBCCWS-JQBDSECT(,R1)  1ST CCW ADDRESS       @OZ20010
         LH    R7,$JOBRECN         COMPUTE                     @OZ20010
         AH    R7,$JOTRECN          NUMBER OF                  @OZ20010
         LA    R7,1(,R7)             CCW PACKETS               @OZ20010
         SPACE 1                                               @OZ20010
NGX081   MVI   JQBCCW4,X'1D'       SET CCW TO FORMAT WRITE     @OZ20010
         NI    JQBCCW4+4,X'FF'-X'30' AND NOT SILI OR SKIP      @OZ20010
         LA    R1,JQBCNEXT         BUMP TO NEXT CCW PACKET     @OZ20010
         BCT   R7,NGX081           LOOP TILL ALL CCWS ADJUSTED @OZ20010
         SPACE 2                                               @OZ20010
         USING QSEDSECT,R1         PROVIDE QSE ADDRESSABILITY  @OZ20010
         SPACE 1                                               @OZ20010
                                   PRINT OFF - SECTION DELETED @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
                                   PRINT ON -- SECTION DELETED @OZ20010
         STCK  $SIDTIME            GET CURRENT TIME OF DAY           R4
         L     R1,$AQSE            POINT TO QSE FOR THIS SYSTEM      R4
         MVC   QSESITIM,$SIDTIME   SET CHECKPOINT WRITE TIME IN QSE  R4
         OI    QSESTAT,QSEACTIV    INDICATE SYSTEM ACTIVE            R4
         MVC   $SIDBUSY,QSESIBSY   SET SYSTEM BUSY MASK              R4
         MVC   $SIDAFF,QSESIAFF    SET SYSTEM AFFINITY MASK          R4
         EJECT                                                       R4
***********************************************************************
*                                                                     *
*        CHECKPOINT JOB QUEUE AND JOT                                 *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
         BAL   R14,NGEXCP          WRITE JOB QUEUE AND JOT           R4
         BNZ   NGCKMSGW            BR IF I/O ERROR                   R4
                                   PRINT OFF - SECTION DELETED @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
                                   PRINT ON -- SECTION DELETED @OZ20010
         SPACE 1                                                     R4
         USING DEBDSECT,R1         PROVIDE DEB ADDRESSABILITY        R4
         USING $SVDSECT,R2         PROVIDE SSVT ADDRESSABILITY       R4
         USING UCBDSECT,R3         PROVIDE UCB ADDRESSABILITY        R4
         SPACE 1                                                     R4
         L     R1,$DADEBAD         POINT TO DA DEB             @OZ20010
         L     R2,$SSVT            POINT TO SSVT               @OZ20010
         SLR   R3,R3               LOAD                        @OZ20010
         IC    R3,$NUMDA            CHECKPOINT                 @OZ20010
         SLL   R3,4                  UCB                       @OZ20010
         L     R3,DEBBASND(R3)        ADDRESS                  @OZ20010
         OC    $ESYSQSE,$ESYSQSE   TEST FOR NODAL WARM START   @OZ20010
         BZ    NGX110              BR IF YES - KEEP RESERVE    @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
        $GETLOK                    GET CMS LOCK                      R4
         MODESET EXTKEY=ZERO       SET PROTECT KEY TO ZERO           R4
         SLR   R0,R0               CLEAR FOR INSERT                  R4
         IC    R0,UCBSQC           DECREMENT                         R4
         BCTR  R0,0                 RESERVE                          R4
         STC   R0,UCBSQC             COUNT                           R4
         NI    $SVSTUS,255-$SVSTIRV  KILL INIT RESERVE COUNT BIT     R4
         LTR   R0,R0               IF RESERVE COUNT NOT ZERO,        R4
         BNZ   NGX100               SKIP STARTIO MACRO               R4
         TM    UCBTBYT2,UCBRR      IF NOT SHARED DASD,               R4
         BZ    NGX100               SKIP STARTIO MACRO               R4
         EJECT                                                       R4
***********************************************************************
*                                                                     *
*        REMOVE RESERVE ON CHECKPOINT VOLUME                          *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
         STM   R14,R12,12(R13)     SAVE REGISTERS THRU STARTIO       R4
         L     R1,$SVRELSE         POINT TO SRB FOR STARTIO          R4
         STARTIO SRB=(1)           REMOVE RESERVE ON CHECKPOINT      R4
         LM    R14,R12,12(R13)     RESTORE SAVED REGISTERS           R4
         SPACE 1                                                     R4
*                                  THIS CARD DELETED BY APAR   @OZ20010
         SPACE 1                                                     R4
NGX100  $FRELOK                    FREE CMS LOCK                     R4
         EJECT                                                 @OZ20010
***************************************************************@OZ20010
*                                                              @OZ20010
*        CREATE FINAL JQB CCWS                                 @OZ20010
*                                                              @OZ20010
***************************************************************@OZ20010
         SPACE 1                                               @OZ20010
         USING JQBCCWE,R1          CCW PACKET ADDRESSABILITY   @OZ20010
         USING JQBDSECT,R5         JQB ADDRESSABILITY          @OZ20010
         SPACE 1                                               @OZ20010
NGX110   L     R5,$CKPTIOB         PICK UP JQB ADDRESS         @OZ20010
         LA    R1,JQBCCWS           AND ADDDRESS OF 1ST CCW    @OZ20010
         SPACE 2                                               @OZ20010
*        BUILD CCW PACKET FOR 1ST CHECKPOINT RECORD            @OZ20010
         SPACE 1                                               @OZ20010
         BAL   R14,NGCKFMC1        INITIALIZE CCW PACKET       @OZ20010
         SPACE 1                                               @OZ20010
         LRA   R14,JQBIDAWS        SET READ CCW ADDRESS        @OZ20010
         STCM  R14,7,JQBCRW+1       TO POINT TO IDAWS          @OZ20010
         OI    JQBCRW+4,X'04'      SET IDA FLAG FOR READ/WRITE @OZ20010
         L     R0,$CKPTR1L         SET LENGTH FOR              @OZ20010
         STH   R0,JQBCRW+6           FIRST RECORD              @OZ20010
         SPACE 2                                               @OZ20010
*        BUILD CCW PACKETS FOR THE JOB QUEUE AND JOT RECORDS   @OZ20010
         SPACE 1                                               @OZ20010
         LH    R7,$JOBRECN         COMPUTE NUMBER OF CCW       @OZ20010
         AH    R7,$JOTRECN          PACKETS TO INITIALIZE      @OZ20010
         SPACE 1                                               @OZ20010
NGX120   LA    R1,JQBCNEXT         BUMP TO NEXT CCW PACKET     @OZ20010
         BAL   R14,NGCKFMC1         AND INITIALIZE IT          @OZ20010
         SPACE 1                                               @OZ20010
         BCT   R7,NGX120           DO ALL JOB-Q AND JOT CCWS   @OZ20010
         MVC   JQBCTNXT,NGCKPNOP   TERMINATE CCW CHAIN         @OZ20010
         SPACE 1                                               @OZ20010
         DROP  R1                  RELEASE JQB AND             @OZ20010
         DROP  R5                   CCW ADDRESSABILITY         @OZ20010
         EJECT                                                 @OZ20010
***************************************************************@OZZ2010
*                                                              @OZ20010
*        FREE CHECKPOINT AREA PAGES AND RELEASE READ IN AREA   @OZ20010
*                                                              @OZ20010
***************************************************************@OZZ2010
         SPACE 1                                               @OZ20010
         L     R0,$CKPTR1L         PICK UP LENGTH AND ADDRESS  @OZ20010
         L     R1,$CKPTR1           OF 1ST CKPT RECORD AREA    @OZ20010
        $PGSRVC FREE,(R1),(R0)       AND FREE ITS PAGE FRAMES  @OZ20010
         SPACE 2                                               @OZ20010
         L     R1,$CKPR1RD         PICK UP READ-IN AREA ADDR   @OZ20010
        $PGSRVC RLSE,(R1),(R0)      AND RELEASE ITS PAGES      @OZ20010
         SPACE 2                                               @OZ20010
         L     R0,$JOBQSIZ         COMPUTE SIZE OF JOB QUEUE   @OZ20010
         AL    R0,$JOTSIZE          AND JOT AREAS              @OZ20010
         L     R1,$JOBQPTR           PICK UP AREA ADDRESS      @OZ20010
        $PGSRVC FREE,(R1),(R0)        AND FREE ITS PAGE FRAMES @OZ20010
         SPACE 2                                               @OZ20010
         L     R1,$JBQREAD         PICK UP READ-IN AREA ADDR   @OZ20010
        $PGSRVC RLSE,(R1),(R0)      AND RELEASE ITS PAGES      @OZ20010
         EJECT                                                 @OZ20010
***************************************************************@OZ20010
*                                                              @OZ20010
*        CREATE FINAL CHECKPOINT IOB AND DEB VALUES            @OZ20010
*                                                              @OZ20010
***************************************************************@OZ20010
         SPACE 1                                               @OZ20010
         USING DEBDSECT,R1         PROVIDE DEB  ADDRESSABILITY @OZ20010
         USING $SVDSECT,R2         PROVIDE SSVT ADDRESSABILITY @OZ20010
         SPACE 1                                               @OZ20010
         L     R2,$SSVT            POINT TO SSVT                     R4
         L     R10,$HASPECB        POINT TO ECB                      R4
         L     R1,$CKPTIOB         POINT TO CHECKPOINT IOB     @OZ20010
         ST    R10,JQBECBP-JQBDSECT(,R1)  SET CHECKPOINT IOB ECBP    R4
         L     R1,$DADEBAD         POINT TO DA DEB                   R4
         L     WD,$HASPMAP         POINT TO HASP MODULE MAP          R4
         MVC   DEBAPPB,MAPIOAPG+1-MAPDSECT(WD)  USE HASP I/O APPG'S  R4
         SPACE 2                                               @OZ20010
         TM    $SVHASP,X'80'       TEST FOR JES2 RESTART             R4
         BO    NGEXITND            BR IF YES                         R4
         MVC   $SVTGTOT,NGXTGS      ELSE SET TOTAL AVAIL TRK GRPS    R4
         TM    $RUNOPTS,$RPS       TEST RPS OPTION                   R4
         BZ    NGEXITND            BR IF NOT SELECTED                R4
         SPACE 1                                                     R4
         DROP  R1,R2               KILL DEB, SSVT ADDRESSABILITY     R4
         EJECT                                                       R4
***********************************************************************
*                                                                     *
*        CREATE ROTATIONAL POSITION SENSING TABLES                    *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
         USING DEBDSECT,WB         PROVIDE DEB ADDRESSABILITY        R4
         USING TEDDSECT,WC         PROVIDE TED ADDRESSABILITY        R4
         USING UCBDSECT,WD         PROVIDE UCB ADDRESSABILITY        R4
         SPACE 1                                                     R4
         ICM   WD,15,NRPSTBLN      GET SIZE OF RPS SECTOR TABLE      R4
         BZ    NGEXITND            EXIT IF NO RPS DEVICES            R4
         GETMAIN R,SP=231,LV=(WD)  GET CSA SPACE FOR SECTOR TABLE    R4
         L     WB,$DADEBAD         PREPARE TO SCAN                   R4
         LA    WB,DEBBASND-16       DEB EXTENTS                      R4
         L     WC,TEDSTART         PREPARE TO SCAN                   R4
         SH    WC,=Y(TEDSIZ)        TED ENTRIES                      R4
         SLR   WE,WE               SET INITIAL EXTENT NUMBER         R4
         LR    WF,R1               RELOAD SECTOR TABLE ADDRESS       R4
         SPACE 1                                                     R4
         USING DEBDASD,WB          PROVIDE DEB EXTENT ADDRESSABILITY R4
         SPACE 1                                                     R4
NEXTXTNT LA    WB,16(,WB)          POINT TO NEXT DEB EXTENT          R4
         LA    WC,TEDSIZ(,WC)      POINT TO NEXT TED ENTRY           R4
         CLM   WE,1,$NUMDA         TEST FOR END OF EXTENTS           R4
         BNL   NGEXITND            EXIT IF YES                       R4
         LA    WE,1(,WE)            ELSE BUMP EXTENT NUMBER          R4
         ICM   WD,7,DEBUCBA        GET UCB ADDRESS                   R4
         BZ    NEXTXTNT            BR IF NULL EXTENT                 R4
         TM    UCBTBYT2,UCBRPS     TEST DEVICE FOR RPS               R4
         BZ    NEXTXTNT            BR IF NO                          R4
         ST    WF,TRPS             SET TED RPS TABLE ADDRESS         R4
         SLR   R0,R0               FOR IEC0SCR1, DD IS &BUFSIZE AND  R4
         ICM   R0,12,$BUFSIZE       R0 = DDKR                        R4
         LR    R2,WF               FOR IECOSCR1,                     R4
         ICM   R2,8,UCBTBYT4        R2 = TAAA                        R4
         LH    R10,TNRT            GET RECORDS/TRACK THIS EXTENT     R4
         SPACE 1                                                     R4
NEXTRCD  AL    R0,=F'1'            ADD 1 TO RECORD NUMBER            R4
         AL    R2,=F'1'            ADD 1 TO SINK NUMBER              R4
         STM   R0,R15,NGEXIT       SAVE OUR REGS                     R4
         L     R15,CVTPTR             GET ADDRESS OF                 R4
         L     R15,CVT0SCR1-CVT(,R15)  IEC0SCR1                      R4
         BALR  R14,R15             LINK TO IEC0SCR1                  R4
         LM    R0,R15,NGEXIT       RESTORE OUR REGS                  R4
         BCT   R10,NEXTRCD         LOOP THRU ALL RECORDS             R4
         SPACE 1                                                     R4
         LA    WF,1(,R2)           SET DEV TBL REG FOR NEXT TIME     R4
         B     NEXTXTNT            BR TO TEST NEXT EXTENT            R4
         EJECT                                                       R4
***********************************************************************
*                                                                     *
*        NORMAL EXIT FROM DIRECT ACCESS INITIALIZATION                *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
NGEXITND SLR   R1,R1               FREE                              R4
         IC    R1,$NUMDA            STORAGE                          R4
         LA    R0,2(,R1)             FOR                             R4
         MH    R0,=Y(NVLTBLN)         VOLUME                         R4
         L     R1,NVOLTABL             ALLOCATION                    R4
         FREEMAIN R,LV=(0),A=(1)        TABLE                        R4
                                   PRINT OFF - SECTION DELETED @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
                                   PRINT ON -- SECTION DELETED @OZ20010
         L     R15,=A(NCMBINIT)    POINT TO NEXT SECTION             R4
         BR    R15                  AND BR TO NEXT SECTION           R4
         EJECT                                                      R41
***********************************************************************
*                                                                     *
*        ABNORMAL EXITS FROM DIRECT ACCESS INITIALIZATION             *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
NDAERR2  L     R1,=A(NDAEM2)       POINT TO ERROR MESSAGE            R4
         SLR   R0,R0                        SET                      R4
         IC    R0,$NUMDA                     MAXIMUM                 R4
         CVD   R0,NGWDBL                      SPOOL                  R4
         OI    NGWDBL+7,X'0F'                  VOLUME                R4
         UNPK  NDAEM2A-NDAEM2(,R1),NGWDBL+6(2)  COUNT                R4
         CLI   NDAEM2A-NDAEM2(R1),C'0'           IN                  R4
         BNE   SKIP850                            ERROR              R4
         MVI   NDAEM2A-NDAEM2(R1),C' '             MESSAGE           R4
SKIP850  B     NGKWIT              BR TO ISSUE MESSAGE AND QUIT      R4
         SPACE 1                                                     R4
NGCKMSGW L     R1,=A(NGCKMSG)      POINT TO MESSAGE TEXT             R4
         MVC   NGCKMSGZ-NGCKMSG(,R1),=C'WRIT'  CHANGE READ TO WRIT   R4
         SPACE 1                                                     R4
NGCKMSGR L     R1,=A(NGCKMSG)      POINT TO MESSAGE TEXT             R4
         SPACE 1                                                     R4
NGKWIT  $$WTO  (R1)                ISSUE ERROR MESSAGE TO OPERATOR   R4
         SPACE 1                                                     R4
NGQUITT $EXIT  NGQUITM             ISSUE 'QUIT' MSG AND QUIT         R4
         SPACE 1                                                     R4
         DROP  WB,WC,WD            KILL DEB, TED, UCB ADDRESSABILITY R4
         TITLE 'HASP INITIALIZATION -- DIRECT ACCESS INITIALIZATION SUBC
               ROUTINES'                                             R4
***********************************************************************
*                                                                     *
*        NGSPLGET -- SUBROUTINE TO OBTAIN AND FORMAT DYNAMIC          *
*                    SPOOL ALLOCATION WORK AREA                       *
*                                                                     *
*        WC    - SPL ADDRESS ON EXIT                                  *
*        WD    - VOLUME ALLOCATION TABLE ENTRY ADDRESS                *
*        WE    - RETURN ADDRESS                                       *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
         USING UCBDSECT,R1         PROVIDE UCB ADDRESSABILITY        R4
         USING SPLDSECT,WC         PROVIDE SPL ADDRESSABILITY        R4
         USING NVLDSECT,WD         PROVIDE ALLOC TBL ADDRESSABILITY  R4
         SPACE 1                                                     R4
NGSPLGET LH    WC,$NUMTGV          COMPUTE SIZE                      R4
         LA    WC,7(,WC)            OF TRACK GROUP MAP               R4
         SRL   WC,3                  FOR SINGLE VOLUME               R4
         LA    R0,SPLTGM           ADD REST OF WORK AREA             R4
         STH   R0,NGSPLLNG         SAVE WORK AREA LENGTH             R4
         ICM   R0,8,=AL1(229)      GET DYNAMIC SPOOL ALLOCATION      R4
         GETMAIN R,LV=(0)           WORK AREA FROM SUBPOOL 229       R4
         LR    WC,R1               RELOAD SPL ADDRESS                R4
         LR    R0,R1               CLEAR                             R4
         LH    R1,NGSPLLNG          SPOOL                            R4
         SLR   R15,R15               WORK                            R4
         MVCL  R0,R14                 AREA                           R4
         MVC   SPLLENG,NGSPLLNG    SET WORK AREA LENGTH              R4
         MVC   SPLFLG1,NVLFLAGS    SET REQUEST FLAGS                 R4
         MVC   SPLVOLID,NVLVOLID   SET VOLUME SERIAL                 R4
         ICM   R1,15,NVLUCBPT      IF NO UCB YET,                    R4
         BZR   WE                   RETURN                           R4
         ST    R1,SPLUCBPT           ELSE SET UCB ADDRESS            R4
         MVC   SPLUNIT,UCBNAME        AND UNIT NAME                  R4
         BR    WE                  THEN RETURN                       R4
         SPACE 1                                                     R4
NGSPLLNG DS    H                   WORK AREA LENGTH                  R4
         SPACE 1                                                     R4
         DROP  R1,WD               KILL UCB/ALLOC TBL ADDRESSABILITY R4
         EJECT                                                       R4
***********************************************************************
*                                                                     *
*        NGALLOC -- SUBROUTINE TO ATTACH HOSPOOL TO DYNAMICALLY       *
*                   ALLOCATE AND, OPTIONALLY, FORMAT A SPOOL/         *
*                   CHECKPOINT VOLUME                                 *
*                                                                     *
*        WC    - SPL ADDRESS                                          *
*        WE    - RETURN ADDRESS                                       *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
NGALLOC  OC    SPLUCBPT,SPLUCBPT   IF VOLUME MOUNTED,                R4
         BNZ   NGAL                 BR TO ALLOCATE IT                R4
         L     R1,=A(NGDMSG)       POINT TO ERROR MESSAGE            R4
         MVC   NGDVOLID-NGDMSG(,R1),SPLVOLID  SET VOLUME SERIAL      R4
         B     NGKWIT              ISSUE 'NOT MOUNTED' MSG AND QUIT  R4
         SPACE 1                                                     R4
NGAL     LA    R14,=CL8'HOSPOOL'   HOSPOOL ENTRY POINT NAME          R4
         LR    R1,WC               GIVE WORK AREA TO SUBTASK         R4
         LA    R0,SPLWTECB         TERMINATION ECB ADDRESS           R4
         ATTACH EPLOC=(R14),SM=SUPV,ECB=(R0)  ATTACH HOSPOOL         R4
         ST    R1,SPLTCBPT         SAVE TCB ADDRESS                  R4
         BR    WE                   AND RETURN                       R4
         EJECT                                                       R4
***********************************************************************
*                                                                     *
*        NGWAIT -- SUBROUTINE TO WAIT ON RETURN FROM HOSPOOL          *
*                  AND TEST FOR ANY ERRORS                            *
*                                                                     *
*        WC    - SPL ADDRESS                                          *
*        WE    - RETURN ADDRESS                                       *
*                                                                     *
*        CONDITION CODE SET TO ZERO IF NO ERRORS, ELSE NON-ZERO       *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
NGWAIT   WAIT  ECB=SPLWTECB        WAIT FOR HOSPOOL TO RETURN        R4
         TM    SPLFLG2,X'FF'       TEST FOR ERROR(S)                 R4
         BZR   WE                  RETURN IF NO WITH CC = 0          R4
         SPACE 1                                                     R4
NGWUNAL  L     R1,=A(NUNALMSG)     POINT TO MESSAGE TEXT             R4
         MVC   NUNALVOL-NUNALMSG(,R1),SPLVOLID  SET VOLUME SERIAL    R4
        $$WTO  (R1)                ISSUE MESSAGE TO OPERATOR         R4
         SLR   R15,R15             SET NON-ZERO CC                   R4
         BR    WE                   AND RETURN                       R4
         EJECT                                                       R4
***********************************************************************
*                                                                     *
*        NGDETACH -- SUBROUTINE TO DETACH HOSPOOL AND TO FREE         *
*                    DYNAMIC SPOOL ALLOCATION WORK AREA               *
*                                                                     *
*        WC    - SPL ADDRESS                                          *
*        WE    - RETURN ADDRESS                                       *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
NGDETACH DETACH SPLTCBPT           DETACH HOSPOOL                    R4
         LH    R0,SPLLENG          GET WORK AREA LENGTH              R4
         ICM   R0,8,=AL1(229)       AND SUBPOOL NUMBER               R4
         LR    R1,WC               RELOAD WORK AREA ADDRESS          R4
         FREEMAIN R,LV=(0),A=(1)   FREE WORK AREA                    R4
         BR    WE                  THEN RETURN                       R4
         EJECT                                                       R4
***********************************************************************
*                                                                     *
*        NGDEBSET -- SUBROUTINE TO CONSTRUCT JES2 DIRECT ACCESS       *
*                    DEB EXTENT AND TRACK EXTENT DATA AREA (TED)      *
*                                                                     *
*        WC    - SPL ADDRESS                                          *
*        WE    - RETURN ADDRESS                                       *
*        WF    - RELATIVE EXTENT NUMBER                               *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
         USING UCBDSECT,R1         PROVIDE UCB ADDRESSABILITY        R4
         USING DEBDSECT,R14        PROVIDE DEB ADDRESSABILITY        R4
         USING TEDDSECT,R15        PROVIDE TED ADDRESSABILITY        R4
         SPACE 1                                                     R4
NGDEBSET L     R14,$DADEBAD        POINT                             R4
         LR    R1,WF                TO JES2                          R4
         SLL   R1,4                  DIRECT ACCESS                   R4
         LA    R14,DEBBASND(R1)       DEB EXTENT                     R4
         SPACE 1                                                     R4
         USING DEBDASD,R14         PROVIDE DEB EXTENT ADDRESSABILITY R4
         SPACE 1                                                     R4
         L     R1,SPLUCBPT         GET UCB ADDRESS                   R4
         ST    R1,DEBUCBAD         SET UCB ADDRESS                   R4
         MVC   DEBSTRCC(8),SPLSTRCC EXTENT LIMITS,                   R4
         MVC   DEBNMTRK,SPLNMTRK     AND NUMBER OF TRACKS            R4
         LR    R15,WF              POINT                             R4
         MH    R15,=Y(TEDSIZ)       TO                               R4
         AL    R15,TEDSTART          TED ENTRY                       R4
         MVC   TNRT,SPLTNRT        SET RECORDS PER TRACK             R4
         MVC   TNTC,SPLTNTC        SET NUMBER OF HEADS PER CYLINDER  R4
         MVC   TNTG,SPLTNTG        SET NUMBER OF TRACKS PER GROUP    R4
         L     R0,$TGMAP           SET ADDRESS OF                    R4
         AH    R0,TNMO              START OF THIS VOLUME'S           R4
         ST    R0,TNCH               SEGMENT OF MASTER TRK GRP MAP   R4
         L     R0,SPLNUMTG         UPDATE COUNT                      R4
         AL    R0,NGXTGS            OF AVAILABLE                     R4
         ST    R0,NGXTGS             TRACK GROUPS                    R4
         TM    UCBTBYT2,UCBRPS     TEST DEVICE FOR RPS               R4
         BZ    NGDEBCEL            BR IF NO                          R4
         LH    R1,TNRT              ELSE                             R4
         LA    R1,1(,R1)             UPDATE                          R4
         AL    R1,NRPSTBLN            SIZE OF                        R4
         ST    R1,NRPSTBLN             RPS SECTOR TABLE              R4
         SPACE 1                                                     R4
NGDEBCEL MVC   TTCM,TNRT           SET MINIMUM TRACK CELL SIZE       R4
         CLC   $TCELSIZ,TNRT+1     USE RECORDS/TRACK IF $TCELSIZ     R4
         BHR   WE                   IS GREATER THAN RECORDS/TRACK    R4
         SLR   R1,R1               ELSE,                             R4
         IC    R1,$TCELSIZ          USE                              R4
         LA    R1,1(,R1)             50 PERCENT                      R4
         SRL   R1,R1                  OF                             R4
         STH   R1,TTCM                 $TCELSIZ                      R4
         BR    WE                  THEN RETURN                       R4
         DROP  R1,R14,R15          KILL UCB, DEB, TED ADDRESSABILITY R4
         EJECT                                                       R4
***********************************************************************
*                                                                     *
*        NGBITMAP -- SUBROUTINE TO ADD BIT MAP FOR NEW VOLUME         *
*                    TO MASTER TRACK GROUP BIT MAP                    *
*                                                                     *
*        WC    - SPL ADDRESS                                          *
*        WE    - RETURN ADDRESS                                       *
*        WF    - RELATIVE EXTENT NUMBER                               *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
NGBITMAP LH    R1,$NUMTGV          ADD                               R4
         LA    R1,7(,R1)            BIT                              R4
         SRL   R1,3                  MAP                             R4
         LR    R15,R1                 FOR                            R4
         MR    R0,WF                   NEW                           R4
         AL    R1,$TGMAP                VOLUME                       R4
         LR    R0,R1                     TO                          R4
         LR    R1,R15                     MASTER                     R4
         LA    R14,SPLTGM                  BIT                       R4
         MVCL  R0,R14                       MAP                      R4
         BR    WE                  THEN RETURN                       R4
         EJECT                                                       R4
***********************************************************************
*                                                                     *
*        NGCKPSET -- SUBROUTINE TO LOCATE AND SET NEW $DACKPT         *
*                    ENTRY                                            *
*                                                                     *
*        WC    - SPL ADDRESS                                          *
*        WE    - RETURN ADDRESS                                       *
*        WF    - RELATIVE $DACKPT ENTRY ON EXIT                       *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
         USING UCBDSECT,R15        PROVIDE UCB ADDRESSABILITY        R4
         SPACE 1                                                     R4
NGCKPSET SLR   WF,WF               INITIAL ENTRY NUMBER              R4
         L     R1,$DACKPT          GET SPOOL CHECKPOINT INFO ADDRESS R4
         CLC   $SPOOL,SPLVOLID     TEST FOR PRIMARY SPOOL VOLUME     R4
         BE    NGSETCKP            BR IF YES                         R4
         SPACE 1                                                     R4
SKIP860  LA    WF,1(,WF)           BUMP ENTRY NUMBER                 R4
         LA    R1,6(,R1)           POINT TO NEXT ENTRY               R4
         OC    0(2,R1),0(R1)       TEST FOR NULL ENTRY               R4
         BNZ   SKIP860             LOOP IF NO                        R4
         SPACE 1                                                     R4
NGSETCKP L     R15,SPLUCBPT        GET UCB ADDRESS                   R4
         MVC   0(1,R1),UCBTBYT4    SET DEVICE TYPE                   R4
         MVC   1(1,R1),SPLVOLID+5  SET VOLUME SERIAL IDENTIFIER      R4
         MVC   2(4,R1),SPLOWTRK    SET VOLUME EXTENT LIMITS          R4
         BR    WE                  THEN RETURN                       R4
         SPACE 1                                                     R4
         DROP  R15                 KILL UCB ADDRESSABILITY           R4
         EJECT                                                       R4
***************************************************************@OZ20010
*                                                              @OZ20010
*        NGCKFMC1 -- SUBROUTINE TO INITIALIZE CCW PACKETS      @OZ20010
*                    USED BY CHECKPOINT PROCESSOR              @OZ20010
*                                                              @OZ20010
*         REGISTER       INPUT           OUTPUT                @OZ20010
*                                                              @OZ20010
*           R1     CCW PACKET ADDRESS   UNCHANGED              @OZ20010
*           R3     UCB ADDRESS          UNCHANGED              @OZ20010
*           R14    RETURN ADDRESS       UNCHANGED              @OZ20010
*                                                              @OZ20010
***************************************************************@OZ20010
         SPACE 1                                               @OZ20010
         USING UCBDSECT,WB         UCB ADDRESSABILITY          @OZ20010
         USING JQBCCWE,R1          CCW PACKET ADDRESSABILITY   @OZ20010
         SPACE 2                                               @OZ20010
*        SET UP A STANDARD CCW PACKET                          @OZ20010
         SPACE 1                                               @OZ20010
NGCKFMC1 STM   R14,R12,12(R13)     SAVE REGISTERS              @OZ20010
         MVC   JQBCCWEL(NGCKPL),NGCKPTRN MOVE CCW PATTERN      @OZ20010
         LRA   R2,JQBCTRK          PLACE ADDRESS OF 00CCHH     @OZ20010
         STCM  R2,7,JQBCSEEK+1      IN SEEK CCW                @OZ20010
         SPACE 2                                               @OZ20010
*        COMPUTE RECORD SECTOR ADDRESS FOR RPS DEVICES         @OZ20010
         SPACE 1                                               @OZ20010
         TM    $RUNOPTS,$RPS       SEE IF RPS FEATURE SHOULD   @OZ20010
         BZ    NGCKFMCR             BE USED, BR IF NOT DESIRED @OZ20010
         TM    UCBTBYT2,UCBRPS     TEST FOR RPS DEVICE         @OZ20010
         BZ    NGCKFMCR             BRANCH IF NO RPS           @OZ20010
         MVI   JQBCSET,X'23'       SET NOP/SS TO 'SET SECTOR'  @OZ20010
         LRA   R2,JQBCSCTR         PLACE ADDRESS OF SECTOR NO. @OZ20010
         STCM  R2,7,JQBCSET+1       IN SET SECTOR CCW          @OZ20010
         NI    JQBCSET+4,X'FF'-X'20' TURN OFF SLI BIT IN SS    @OZ20010
         LA    R2,JQBCSCTR         PICK UP SECTOR NO. ADDR...  @OZ20010
         ICM   R2,8,UCBTBYT4        UCB DEVICE TYPE BYTE...    @OZ20010
         L     R0,JQBCCHHR+4         RECORD LENGTH...          @OZ20010
         SLL   R0,16                  AND RECORD POSITION (#)  @OZ20010
         IC    R0,JQBCRECN             FOR CONVERT ROUTINE     @OZ20010
         L     R15,CVTPTR          PICK UP CVT ADDRESS         @OZ20010
         L     R15,CVT0SCR1-CVTDSECT(,R15) PICK UP ROUTINE EP  @OZ20010
         BALR  R14,R15             CALL CONVERT ROUTINE        @OZ20010
         SPACE 2                                               @OZ20010
NGCKFMCR LRA   R2,JQBCCHHR         PLACE ADDRESS OF CCHHR      @OZ20010
         STCM  R2,7,JQBCSID+1       IN SEARCH ID EQUAL CCW     @OZ20010
         LRA   R2,JQBCSID          PLACE SEARCH ID EQUAL CMD   @OZ20010
         STCM  R2,7,JQBCTIC+1       ADDRESS IN TIC             @OZ20010
         LM    R14,R12,12(R13)     RELOAD REGISTERS            @OZ20010
         BR    R14                  AND RETURN                 @OZ20010
         EJECT                                                 @OZ20010
***************************************************************@OZ20010
*                                                              @OZ20010
*        NGCKFMC2 -- SUBROUTINE TO INITIALIZE CCW PACKETS      @OZ20010
*                    USED DURING DIRECT ACCESS INITIALIZATION  @OZ20010
*                                                              @OZ20010
*         REGISTER       INPUT           OUTPUT                @OZ20010
*                                                              @OZ20010
*           R1     CCW PACKET ADDRESS   UNCHANGED              @OZ20010
*           R3     UCB ADDRESS          UNCHANGED              @OZ20010
*           R14    RETURN ADDRESS       UNCHANGED              @OZ20010
*                                                              @OZ20010
***************************************************************@OZ20010
         SPACE 2                                               @OZ20010
*        SET UP AN INITIALIZATION CCW PACKET                   @OZ20010
         SPACE 1                                               @OZ20010
NGCKFMC2 STM   R14,R12,12(R13)     SAVE REGISTERS              @OZ20010
         MVC   JQBCCWEL(NGCKPL),NGCKPTRF MOVE CCW PATTERN      @OZ20010
         MVC   JQBCCHHR+6(2),JQBCCW5+6 COPY LENGTH TO CNT FLD  @OZ20010
         CLI   JQBCRECN,1          TEST FOR 1ST RECORD ON TRK  @OZ20010
         BNE   NGCKFMCT             BRANCH IF NOT 1ST RECORD   @OZ20010
         LRA   R2,JQBCTRK          PLACE ADDRESS OF 00CCHHR    @OZ20010
         STCM  R2,7,JQBCCW1+1       IN SEEK CCW                @OZ20010
         LRA   R2,JQBCCHH0         PLACE ADDRESS OF CCHH0      @OZ20010
         STCM  R2,7,JQBCCW2+1       IN SEARCH ID               @OZ20010
         LRA   R2,JQBCCW2          PLACE SEARCH ID EQ R0       @OZ20010
         STCM  R2,7,JQBCCW3+1       COMMAND ADDRESS IN TIC     @OZ20010
NGCKFMCT LRA   R2,JQBCCHHR         PLACE ADDRESS OF COUNT      @OZ20010
         STCM  R2,7,JQBCCW4+1       IN NOP (FOR WRITE CKD)     @OZ20010
         LA    R2,JQBCNEXT         GET ADDR OF NEXT SEEK CCW   @OZ20010
         CLC   JQBCRECN,NGCKNRT+1  TEST FOR LAST RECD ON TRK   @OZ20010
         BE    NGCKFMCE             BR IF LAST RECORD          @OZ20010
         LA    R2,JQBCNEXT+(JQBCCW4-JQBCCWE) ELSE USE NOP ADDR @OZ20010
NGCKFMCE STCM  R2,7,JQBCTNXT+5     STORE                       @OZ20010
         LRA   R2,0(,R2)            VIRTUAL AND                @OZ20010
         STCM  R2,7,JQBCTNXT+1       REAL ADDRESS IN TIC       @OZ20010
         LM    R14,R12,12(R13)     RESTORE REGISTERS           @OZ20010
         BR    R14                 EXIT TO CALLER              @OZ20010
                                   PRINT OFF - SECTION DELETED @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
*                                  THIS CARD DELETED BY APAR   @OZ20010
                                   PRINT ON -- SECTION DELETED @OZ20010
         EJECT                                                       R4
***********************************************************************
*                                                                     *
*        NGEXCP -- SUBROUTINE TO READ OR WRITE JES2 JOB QUEUE         *
*                  AND JOT                                            *
*                                                                     *
*        R14   - RETURN ADDRESS                                       *
*                                                                     *
*        CONDITION CODE     ZERO ON RETURN - I/O OK                   *
*        CONDITION CODE NON-ZERO ON RETURN - I/O ERROR                *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
NGEXCP   L     R1,$CKPTIOB         POINT TO CHECKPOINT IOB     @OZ20010
         EXCPVR (1),SUBSYS         INITIATE I/O OPERATION      @OZ20010
         WAIT  ECB=NGECB           WAIT FOR I/O TO COMPLETE          R4
         CLI   NGECB,X'7F'         TEST FOR I/O ERROR                R4
         BR    R14                 RETURN WITH VALID CONDITION CODE  R4
         EJECT                                                      R41
***********************************************************************
*                                                                     *
*        NGWTOR -- SUBROUTINE TO QUERY OPERATOR                       *
*                                                                     *
*        WA    - ADDRESS OF OPERATOR MESSAGE                          *
*        WE    - RETURN ADDRESS                                       *
*                                                                     *
***********************************************************************
         SPACE 1                                                    R41
NGWTOR   MVI   NGWDBL,0            CLEAR REPLY AREA                 R41
         MVI   NGECB,0             CLEAR ECB                        R41
        $$WTOR (WA)                QUERY OPERATOR                   R41
         WAIT  ECB=NGECB           WAIT FOR RESPONSE                R41
         OI    NGWDBL,X'40'        FORCE UPPER CASE RESPONSE        R41
         CLI   NGWDBL,C'Y'         TEST REPLY                       R41
         BER   WE                  RETURN IF 'YES' WITH RC = 0      R41
         CLI   NGWDBL,C'N'         TEST REPLY                       R41
         BNE   NGWTOR              BR IF INVALID REPLY TO RE-QUERY  R41
         SLR   R1,R1               SET NON-ZERO RETURN CODE         R41
         BR    WE                   AND RETURN                      R41
         SPACE 3                                                     R4
         DROP  WC,BASE2,BASE3      KILL SPL, LOCAL ADDRESSABILITY    R4
         TITLE 'HASP INITIALIZATION -- DIRECT ACCESS INITIALIZATION AREC
               AS, CONSTANTS AND LITERALS'                           R4
*        BASIC CCW PATTERN FOR READING/WRITING CHECKPOINT            R4
         SPACE 2                                                     R4
NGCKPTRN CCW   X'07',*-*,X'40',6     SEEK                      @OZ20010
         CCW   X'03',*-*,X'60',1     NOP OR SET SECTOR *+5     @OZ20010
         CCW   X'31',*-*,X'40',5     SEARCH ID EQUAL           @OZ20010
         CCW   X'08',*-*,X'00',0     TIC *-8                   @OZ20010
         CCW   X'06',*-*,X'40',4096  READ / WRITE DATA         @OZ20010
         CCW   X'08',*-*,X'20',0     TIC TO NEXT CCW PACKET    @OZ20010
NGCKPL   EQU   *-NGCKPTRN            LENGTH OF EITHER PATTERN  @OZ20010
         SPACE 2                                               @OZ20010
*        BASIC CCW PATTERN FOR CHECKPOINT INITIALIZATION       @OZ20010
         SPACE 1                                               @OZ20010
NGCKPTRF CCW   X'07',*-*,X'40',6     SEEK                      @OZ20010
         CCW   X'31',*-*,X'40',5     SEARCH ID EQUAL (R0)      @OZ20010
         CCW   X'08',*-*,X'00',0     TIC *-8                   @OZ20010
         CCW   X'1E',*-*,X'D0',8     READ / WRITE CKD          @OZ20010
         CCW   X'03',*-*,X'40',4096   WITH DATA CHAINING       @OZ20010
         CCW   X'08',*-*,X'20',0     TIC TO NEXT CCW PACKET    @OZ20010
         SPACE 1                                               @OZ20010
NGCKPNOP CCW   X'03',*-*,X'20',1     NO-OP TO END CCW CHAINS   @OZ20010
         SPACE 1                                               @OZ20010
NGWDBL   DC    D'0'                DOUBLE-WORD WORK AREA             R4
NGXTGS   DC    F'0'                TOTAL NUMBER OF TRACK GROUPS      R4
NRPSTBLN DC    F'0'                SIZE OF RPS SECTOR TABLE          R4
NVOLWKSP DC    A(*-*)              SPOOL ALLOC WORK AREA CHAIN HDR   R4
NGECB    DC    F'0'                EVENT CONTROL BLOCK               R4
NVOLTABL DS    A                   VOLUME ALLOCATION TABLE ADDRESS   R4
NGCKNRT  DS    H                   NO. OF CKPT RECORDS / TRACK @OZ20010
NGCKNTRK DS    H                   NO. OF CKPT TRACKS REQUIRED @OZ20010
         EJECT                                                       R4
***********************************************************************
*                                                                     *
*        TABLE OF REQUIRED VALUES USED IN MESSAGE 442                 *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
NOLDPRMS DS    0F                                                    R4
         CLC   $BUFSIZE,$BUFSIZE-$SAVEBEG(WF)  ENTRY FOR &BUFSIZE    R4
         DC    CL8'&&BUFSIZE'                                        R4
         CLC   $MAXJOBS,$MAXJOBS-$SAVEBEG(WF)  ENTRY FOR &MAXJOBS    R4
         DC    CL8'&&MAXJOBS'                                        R4
         CLC   $NUMJOES,$NUMJOES-$SAVEBEG(WF)  ENTRY FOR &NUMJOES    R4
         DC    CL8'&&NUMJOES'                                        R4
         CLC   $MINJOES,$MINJOES-$SAVEBEG(WF)  ENTRY FOR &MINJOES    R4
         DC    CL8'&&MINJOES'                                        R4
         CLC   $SPOLMSG,$SPOLMSG-$SAVEBEG(WF)  ENTRY FOR &SPOLMSG    R4
         DC    CL8'&&SPOLMSG'                                        R4
         CLC   $NUMRJE,$NUMRJE-$SAVEBEG(WF)    ENTRY FOR &NUMRJE     R4
         DC    CL8'&&NUMRJE'                                         R4
         CLC   $NUMTGV,$NUMTGV-$SAVEBEG(WF)    ENTRY FOR &NUMTGV     R4
         DC    CL8'&&NUMTGV'                                         R4
         CLC   $NUMDA,$NUMDA-$SAVEBEG(WF)      ENTRY FOR &NUMDA      R4
         DC    CL8'&&NUMDA'                                          R4
         CLC   $TCELSIZ,$TCELSIZ-$SAVEBEG(WF)  ENTRY FOR &TCELSIZ    R4
         DC    CL8'&&TCELSIZ'                                        R4
         CLC   $RECINCR,$RECINCR-$SAVEBEG(WF)  ENTRY FOR &RECINCR    R4
         DC    CL8'&&RECINCR'                                        R4
NUMPARMS EQU   (*-NOLDPRMS)/14     NUMBER OF TABLE ENTRIES           R4
NPARMLNS EQU   (NUMPARMS+1+2)/3    LINES REQUIRED TO PRINT ENTRIES   R4
         SPACE 1                                                     R4
NPARMASK DC    C' =  ',X'2020202120'  PARM VALUE EDIT MASK           R4
         EJECT                                                       R4
***********************************************************************
*                                                                     *
*        VOLUME ALLOCATION TABLE ENTRY DSECT                          *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
NVLDSECT DSECT                     ALLOCATION TABLE ENTRY DSECT      R4
NVLUCBPT DS    A                   VOLUME UCB ADDRESS                R4
NVLEND   DS    0X                  TERMINATION/EMPTY ENTRY INDICATOR R4
NVLVOLID DS    CL6                 VOLUME SERIAL NUMBER              R4
NVLFLAGS DS    X                   ALLOCATION REQUEST FLAGS          R4
         DS    0F                                                    R4
NVLTBLN  EQU   *-NVLDSECT          ALLOCATION TABLE ENTRY LENGTH     R4
         SPACE 2                                                     R4
***********************************************************************
*                                                                     *
*        DEVICE CHARACTERISTICS TABLE ENTRY DSECT                     *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
NGZ      DSECT                     IECZDTAB DUMMY SECTION            R4
NGZC     DS    H                   NUMBER OF CYLINDERS PER VOLUME    R4
NGZH     DS    H                   NUMBER OF TRACKS PER CYLINDER     R4
NGZR     DS    H                   MAXIMUM TRACK LENGTH              R4
NGZO     DS    0H                  BLOCK OVERHEAD -- 2305            R4
NGZNL    DS    X                   BLOCK OVERHEAD -- KEYED           R4
NGZL     DS    X                   BLOCK OVERHEAD -- KEYED LAST      R4
NGZU     DS    X                   BLOCK OVERHEAD -- UNKEYED         R4
NGZF     DS    X                   FLAGS --                          R4
NGZFT    EQU   1                      APPLY TOLERANCE FACTOR         R4
NGZF2305 EQU   8                      DEVICE IS 2305                 R4
NGZT     DS    H                   TOLERANCE FACTOR IF SPZFT         R4
NGZA     DS    H                   NUMBER OF ALTERNATE TRACKS        R4
         SPACE 1                                                     R4
HASPINIT CSECT                     END OF IECZDTAB DUMMY SECTION     R4
         EJECT                                                       R4
         LTORG                                                       R4
         TITLE 'HASP INITIALIZATION -- HASPINIT MESSAGES'            R4
NMSG1    EQU   *                   START OF HASPINIT MESSAGE AREA    R4
         SPACE 2                                                     R4
         $MID  401                 SET MESSAGE NUMBER                R4
NXTNTMSG WTO   '&MID.EXTENT ERROR ON ******',MF=L                    R4
NXTNTVOL EQU   *-6,6               VOLUME SERIAL                     R4
         SPACE 2                                                     R4
         $MID  402                 SET MESSAGE NUMBER                R4
NEWTOM   WTO   '&MID.XXXXXXXX ATTACH ERROR - ******',MF=L            R4
NEWTON   EQU   *-30,8                                                R4
NEWTOV   EQU   *-6,6                                                 R4
         DC    C' '                SPACER                            R4
         SPACE 2                                                     R4
         $MID  411                 SET MESSAGE NUMBER                R4
NDAEM2   WTO   '&MID.MAXIMUM OF NN SPOOL VOLUME(S) EXCEEDED',MF=L    R4
NDAEM2A  EQU   *-27,2              VOLUME COUNT                      R4
         SPACE 2                                                     R4
         $MID  412                 SET MESSAGE NUMBER                R4
NURWTO   WTO   '&MID.MAXIMUM OF *** ********** EXCEEDED',MF=L       R41
NURWTOM  EQU   *-23,14             NUMBER AND DEVICE NAME           R41
         EJECT                                                       R4
         $MID  415                 SET MESSAGE NUMBER                R4
NJBQMSG  WTO  '&MID.JOB QUEUE EXCEEDS CAPACITY OF CHECKPOINT DATA SET',C
               MF=L                                                  R4
         SPACE 2                                                     R4
         $MID  416                 SET MESSAGE NUMBER                R4
NMSGMSG  WTO   '&MID.OPERATOR MESSAGE SPACE NOT AVAILABLE',MF=L      R4
         SPACE 2                                                     R4
         $MID  417                 SET MESSAGE NUMBER                R4
NOUSEMSG WTO   '&MID.VOLUME ****** NOT ADDED - COMPLEX NOT DORMANT', R4C
               MF=L                                                  R4
NOUSEVOL EQU   *-38,6              VOLUME SERIAL                     R4
         EJECT                                                       R4
         $MID  419                 SET MESSAGE NUMBER                R4
NMSG419  WTOR  '&MID.REPLY Y OR N TO CONFIRM RESET ON SYSTEM(S) **** **C
               ** **** **** **** ****.',NGWDBL,1,NGECB,MF=L          R4
NMSG419A EQU   *-31,4                                                R4
         SPACE 2                                                     R4
         $MID  420                 SET MESSAGE NUMBER                R4
NGCKMSG  WTO   '&MID.PERM I/O ERROR READING JES2 CKPT',MF=L          R4
NGCKMSGZ EQU   *-17,4              I/O TYPE                          R4
         SPACE 2                                                     R4
         $MID  421                 SET MESSAGE NUMBER                R4
NRDERMSG WTO   '&MID.PREVIOUSLY MOUNTED VOLUME ****** IS UNFORMATTED', C
               MF=L                                                  R4
NRDERVOL EQU   *-21,6              VOLUME SERIAL                     R4
         SPACE 2                                                     R4
         $MID  422                 SET MESSAGE NUMBER                R4
NDAEM1   WTO   '&MID.DUPLICATE SPOOLX VOLUMES',MF=L                  R4
NDAVOL   EQU   *-14,6              VOLUME SERIAL                     R4
         EJECT                                                       R4
         $MID  424                 SET MESSAGE NUMBER                R4
NGDMSG   WTO   '&MID.****** IS NOT MOUNTED',MF=L                     R4
NGDVOLID EQU   *-21,6              VOLUME SERIAL                     R4
         SPACE 2                                                     R4
         $MID  425                 SET MESSAGE NUMBER                R4
ISTRTEM2 WTO   '&MID.SUBSYSTEM INTERFACE NOT DORMANT',MF=L           R4
         SPACE 2                                                     R4
         $MID  426                 SET MESSAGE NUMBER                R4
NOPTMSG1 WTOR  '&MID.SPECIFY OPTIONS - HASP-II, VERSION &VERSION',   R4C
               NOPTAREA,L'NOPTAREA,NOPTECB,MF=L                      R4
         SPACE 2                                                     R4
         $MID  427                 SET MESSAGE NUMBER                R4
NOPTMSG2 WTOR  '&MID.PARAMETER OR SYNTAX ERROR - RESPECIFY OPTIONS', R4C
               NOPTAREA,L'NOPTAREA,NOPTECB,MF=L                      R4
         EJECT                                                       R4
         $MID  428                 SET MESSAGE NUMBER                R4
NGQUITM  WTO   '&MID.CORRECT THE ABOVE PROBLEMS AND RESTART JES2',MF=L
         SPACE 2                                                     R4
         $MID  429                 SET MESSAGE NUMBER                R4
ISTRTEM1 WTO   '&MID.SUBSYSTEM NAME NOT DEFINED',MF=L                R4
ISTRTSNM EQU   *-16,4              SUBSYSTEM NAME                    R4
         SPACE 2                                                     R4
         $MID  430                 SET MESSAGE NUMBER                R4
ISTRTEM3 WTO   '&MID.INCOMPATIBLE SUBSYSTEM INTERFACE',MF=L          R4
         SPACE 2                                                     R4
         $MID  432                 SET MESSAGE NUMBER                R4
NBFMSG   WTO   '&MID.REQUESTED JES2 BUFFERS EXCEED AVAILABLE STORAGE', C
               MF=L                                                  R4
         EJECT                                                       R4
         $MID  434                 SET MESSAGE NUMBER                R4
NMSG434  WTO  '&MID.WARM START DENIED -- INVALID CHECKPOINT RECORD', R4C
               MF=L                                                  R4
NMSG434A EQU   *-46,4              LOCATE 'WARM'                     R4
         SPACE 2                                                     R4
         $MID  435                 SET MESSAGE NUMBER                R4
NVALMSG  WTO   '&MID.SYSTEM PARAMETER TABLE ERROR',MF=L              R4
         SPACE 2                                                     R4
         $MID  436                 SET MESSAGE NUMBER                R4
NMSG436  WTOR  '&MID.REPLY Y OR N TO CONFIRM CHECKPOINT RECORD CHANGE',C
               NGWDBL,1,NGECB,MF=L                                   R4
         EJECT                                                       R4
         $MID  439                 SET MESSAGE NUMBER                R4
NCMBMSG  WTO   '&MID.CMBS EXHAUSTED - LAST NNN OPERATOR COMMANDS IGNOREC
               D',MF=L                                               R4
NCMBCT   EQU   *-30,4              COMMAND COUNT                     R4
         SPACE 2                                                     R4
         $MID  440                 SET MESSAGE NUMBER                R4
NTGBFMSG WTO   '&MID.&&BUFSIZE TOO SMALL FOR &&NUMTGV AND/OR &&NUMDA', C
               MF=L                                                  R4
         EJECT                                                       R4
         $MID  441                 SET MESSAGE NUMBER                R4
NMSG441  WTOR  '&MID.REPLY Y OR N TO CONTINUE INITIALIZATION',       R4C
               NPLREPLY,1,NPLECB,MF=L                                R4
         SPACE 2                                                     R4
         $MID  442                 SET MESSAGE NUMBER                R4
NPARAMSG WTO   ('&MID.WARM START DENIED',C),(' ',L),                 R4C
               ('REQUIRED INITIALIZATION PARAMETERS FOLLOW --',D),   R4C
               (' ',DE),ROUTCDE=(1,2),DESC=(4),MF=L                  R4
         ORG   *-59                GO BACK AND                       R4
         DC    AL1(4+NPARMLNS)      RESET LINE COUNT                 R4
         ORG   *+59-1-5            GO FORWARD TO ADD DATA LINES      R4
         DC    AL2(5),XL2'2000',C' '                                 R4
NMSGPRMS DC    (NPARMLNS)X'00402000404040404040404040404040404040404040C
               40404040404040404040404040404040404040404040404040404040C
               4040404040404040404040404040'                   @OZ18405
         DC    AL2(5),XL2'3000',C' '                                 R4
         ORG   NMSGPRMS+4                                            R4
         DC    C'&&SPOOL   ='                                        R4
         ORG   ,                                                     R4
NPARMSGL EQU   *-NPARAMSG          MESSAGE LENGTH                    R4
         EJECT                                                       R4
         $MID  443                 SET MESSAGE NUMBER                R4
NUNALMSG WTO   '&MID.XXXXXX NOT ALLOCATED',MF=L                      R4
NUNALVOL EQU   *-20,6              VOLUME SERIAL                     R4
         SPACE 2                                                     R4
         $MID  444                 SET MESSAGE NUMBER                R4
NRTEMSG  WTO   '&MID.DDDDDDDD PRINT/PUNCH ROUTE CODE INVALID',MF=L   R4
NRTEDEV  EQU   *-39,8              DEVICE NAME                       R4
         SPACE 2                                                     R4
         $MID  448                 SET MESSAGE NUMBER                R4
NBSPMSG  WTO   '&MID.ILLEGAL BACKSPACE CHARACTER -- RESET TO X''00''', C
               MF=L                                                  R4
         EJECT                                                       R4
         $MID  450                 SET MESSAGE NUMBER                R4
NMSG450  WTO   '&MID.OPEN FAILED FOR JES2 PARAMETER LIBRARY',MF=L    R4
         SPACE 2                                                     R4
         $MID  451                 SET MESSAGE NUMBER                R4
NMSG451  WTO   '&MID.ERROR ON JES2 PARAMETER LIBRARY',MF=L           R4
         SPACE 2                                                     R4
         $MID  465                 SET MESSAGE NUMBER                R4
NLNEMSG  WTO   '&MID.RMTNNN SPECIFIES INVALID LINE VALUE ',MF=L      R4
NLNERMT  EQU   NLNEMSG+4+9+3,3                                       R4
         SPACE 2                                                    R41
         $MID  466                 SET MESSAGE NUMBER               R41
NLOGMSG  WTL   '&MID.THIS MESSAGE AREA IS TO CONTAIN A COPY OF THE INITC
               IALIZATION STMNT TO BE LOGGED ',MF=L                 R41
NLOGTEXT EQU   *-80,80             MESSAGE TEXT AREA                R41
         EJECT                                                      R41
         $MID  467                 SET MESSAGE NUMBER               R41
NDIAGMSG WTL   '&MID.DIAGNOSTIC MESSAGE FOR ABOVE STATEMENT',MF=L   R41
NDIAGTXT EQU   *-38,38             STATEMENT DIAGNOSTIC             R41
         SPACE 2                                                    R41
         $MID  468                 SET MESSAGE NUMBER               R41
NLSTMSG  WTO   '&MID.KEYWORD=VALUE DISPLAY LONG ENOUGH TO ALSO DISPLAY C
               MESSAGES TO OPERATOR          ',MF=L                 R41
NLSTTXT  EQU   *-80,80             TOTAL TEXT AREA                  R41
NLSTKEY  EQU   *-80,8              KEYWORD                          R41
         SPACE 2                                                    R41
         $MID  469                 SET MESSAGE NUMBER               R41
NOPRMSG  WTOR  '&MID.REPLY PARAMETER STATEMENT, CANCEL, OR END',    R41C
               NLOGTEXT,L'NLOGTEXT,NPLECB,MF=L                      R41
         SPACE 2                                                    R41
         $MID  470                 SER MESSAGE NUMBER               R41
NDORMMSG WTO   '&MID.COMPLEX NOT DORMANT',MF=L                      R41
NDORMTYP EQU   *-19,7              LOCATE 'COMPLEX'                 R41
         EJECT                                                      R41
         $MID  471                 SET MESSAGE NUMBER               R41
NRESUMSG WTOR  '&MID.REPLY Y OR N TO CONTINUE COLD START',          R41C
               NGWDBL,1,NGECB,MF=L                                  R41
NRESUMST EQU   *-10,4              LOCATE 'COLD'                    R41
         SPACE 2                                                     R4
         $MID  472                 SET MESSAGE NUMBER          @OZ20010
NSPECMSG WTO   '&MID.CHECKPOINT DATA SET SPECIFICATION ERROR', @OZ20010X
               MF=L                                            @OZ20010
         SPACE 2                                               @OZ20010
NMSGAREA EQU   *-NMSG1             LENGTH OF HASPINIT MESSAGE AREA   R4
         TITLE 'HASP INITIALIZATION -- COMMON INTERFACE CONTROL BLOCK IC
               NITIALIZATION'
***********************************************************************
*                                                                     *
*        CREATE CONSOLE MESSAGE BUFFERS                               *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
NCMBINIT BALR  BASE2,0             RE-ESTABLISH                      R4
         USING *,BASE2              LOCAL ADDRESSABILITY
         SPACE 1                                                     R4
         USING SSVT,WA             ESTABLISH SSVT ADDRESSABILITY
         SPACE 1                                                     R4
         L     WA,$SSVT            POINT TO SSVT                     R4
         TM    $SVSTUS,$SVSTUSR    ARE WE RESTARTING
         BZ    ICMBNEW             CREATE NEW CMBS IF NOT
         ICM   R1,15,$SVCMBAC      IS THERE ANY ACTIVITY ON CMBS
         BNZ   INSTRTEE            REFUSE TO START IF NOT ZERO
         ICM   R1,15,$SVCMBA       POINT TO CMB AREA                 R4
         BZ    ICMBNEW             BR IF NO CMBS                     R4
         L     R0,8(0,R1)          PICK UP LENGTH
         ICM   R0,8,=AL1(231)      SET SUBPOOL
         FREEMAIN R,LV=(0),A=(1)   FREE OLD CMB AREA
         SLR   R0,R0               CLEAR
         ST    R0,$SVCMBRQ          RESERVE QUEUE
         ST    R0,$SVCOMMQ         CLEAR COMMAND QUEUE PTR           R4
         SPACE 1                                                     R4
ICMBNEW  LH    WC,$NUMCMBS         GET REQUESTED CMB COUNT           R4
         ST    WC,$SVCOMCT         SET INTO SSVT
         LA    WC,2(0,WC)          ADD TWO TO AVOID INTERLOCKS
         MH    WC,=Y(CMBL)         GET LENGTH OF AREA
         LA    WC,12(0,WC)         ALLOW FOR ID AND LENGTH FIELD
         LR    R0,WC               POINT FOR GETMAIN
         ICM   R0,8,=AL1(231)      SET PROTECTED SUBPOOL
         GETMAIN R,LV=(0)          GET CMB WORK AREA
         ST    R1,$SVCMBA          SET POINTER
         MVC   0(8,R1),=CL8'HASP CMB'  SET IDENTIFICATION
         ST    WC,8(0,R1)          SET LENGTH OF AREA
         AR    WC,R1               POINT TO END + 1
         LA    R1,12(0,R1)         POINT TO FIRST CMB
         ST    R1,$SVCMBFQ         SET FREE QUEUE
         SPACE 1                                                     R4
ICMBGENL LR    R15,R1              BRING UP REAR
         AH    R1,=Y(CMBL)         UP TO NEXT CMB
         ST    R1,CMBCMB-CMB(,R15) SET CHAIN                         R4
         CR    R1,WC               CHECK FOR END
         BL    ICMBGENL            LOOP
         XC    CMBCMB-CMB(,R15),CMBCMB-CMB(R15) ZERO CHAIN           R4
         EJECT
***********************************************************************
*                                                                     *
*        QUEUE PARAMETER LIBRARY COMMANDS                             *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
         ICM   WC,15,NCOMMTAB      POINT TO 1ST TEMP COMMAND AREA    R4
         BZ    IBLDSSVT            BR IF NONE                        R4
         L     WB,$SVCOMCT          ELSE GET RESERVED CMB COUNT      R4
         SLR   WE,WE               CLEAR FOR COUNT                   R4
         L     R15,CVTPTR            GET                            R41
         L     R15,CVTCUCB-CVT(,R15)  UCM ID                        R41
         SL    R15,=F'4'               OF CURRENT                   R41
         L     R15,0(,R15)              MASTER                      R41
         L     R15,0(,R15)               CONSOLE                    R41
         MVC   CMBUCM-CMBFLAG+IQUECMBH,UCMID-UCMLIST(R15)           R41
         SPACE 1                                                     R4
         USING CMBDSECT,WD         PROVIDE CMB ADDRESSABILITY        R4
         SPACE 1                                                     R4
IQUECOMM L     WD,$SVCMBFQ         DE-CHAIN NEXT                     R4
         MVC   $SVCMBFQ(4),CMBCMB   CMB ON FREE CHAIN                R4
         MVC   CMBCMB,$SVCOMMQ     LIFO QUEUE DE-CHAINED             R4
         ST    WD,$SVCOMMQ          CMB ON $SVCOMMQ                  R4
         MVC   CMBFLAG(14),IQUECMBH SET CMB HEADER                   R4
         MVC   CMBFM,$SYSID        RESPOND TO THIS SYSTEM            R4
         MVC   CMBMSG(71),8(WC)    MOVE COMMAND TO CMB               R4
         SPACE 1                                                     R4
ICMBFREE LR    R1,WC               RELOAD TEMP COMMAND AREA ADDRESS  R4
         L     WC,0(,WC)           POINT TO NEXT TEMP CMD AREA       R4
         FREEMAIN R,LV=80,A=(1),SP=229  FREE CURRENT TEMP CMD AREA   R4
         LTR   WC,WC               TEST FOR ANOTHER COMMAND          R4
         BZ    ICMBXS              BR IF NO                          R4
         BCT   WB,IQUECOMM         BR IF ANOTHER RESERVED CMB        R4
         SPACE 1                                                     R4
         LA    WB,1                RESET RESERVED COUNT              R4
         LA    WE,1(,WE)           BUMP 'IGNORED' COMMAND COUNT      R4
         B     ICMBFREE             AND BR TO FREE TEMP MSG AREA     R4
         EJECT                                                      R41
ICMBXS   LTR   WE,WE               TEST 'IGNORED' COMMAND COUNT      R4
         BZ    ICMBCT              BR IF COUNT IS ZERO               R4
         CVD   WE,INITDBL          CONVERT EXCESS TO PACKED DECIMAL  R4
         L     R1,=A(NCMBMSG)      POINT TO WARNING MESSAGE          R4
         MVC   NCMBCT+1-NCMBMSG(3,R1),=X'202120'  SET EDIT MASK      R4
         ED    NCMBCT-NCMBMSG(,R1),INITDBL+6  EDIT EXCESS INTO MSG   R4
        $$WTO  (R1)                ISSUE WARNING MESSAGE TO OPERATOR R4
         SPACE 1                                                     R4
         DROP  WD                  KILL CMB ADDRESSABILITY           R4
         SPACE 1                                                     R4
ICMBCT   BCTR  WB,0                DECREMENT RESERVED COUNT          R4
         ST    WB,$SVCOMCT         SET RESERVED COUNT                R4
         EJECT
***********************************************************************
*                                                                     *
*        BEGIN INITIALIZATION OF SSVT                                 *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
IBLDSSVT MVC   $SVOUTXS,$OUTXS     SET OUTPUT EXCESSION MSG INCRE    R4
         MVC   $SVOUTOP,$OUTPOPT   SET OUTPUT EXCESSION OPTION       R4
         NI    $SVSTUS,255-$SVSTXST-$SVSTIDS  RESET RUN OPTIONS      R4
         TM    $RUNOPTS,$TIMEOPT   TEST TIME EXCESSION OPTION        R4
         BZ    SKIP870             BR IF NOT SELECTED                R4
         OI    $SVSTUS,$SVSTXST     ELSE INDICATE OPTION IN SSVT     R4
SKIP870  TM    $RUNOPTS,$MSGID     TEST FOR FULL MESSAGE IDS         R4
         BZ    SKIP880             BR IF OPTION NOT SELECTED         R4
         OI    $SVSTUS,$SVSTIDS     ELSE INDICATE OPTION IN SSVT     R4
SKIP880  MVC   $SVROUT,$NUMRJE     SET REMOTE TERMINAL COUNT         R4
         MVC   $SVTO,$SYSID        SET THIS SYSTEM'S MESSAGE ROUTE   R4
         MVC   $SVCOMCH,$CCOMCHR   SET HASP COMMAND CHARACTER        R4
         MVC   $SVCOMM(IPCESL),IPCES  INSERT $$POST ELEMENTS         R4
         L     R1,PSAAOLD-PSA      PICK UP ADDRESS OF OUR ASCB
         ST    R1,$HASCB           SET IN HCT                        R4
         ST    R1,$SVQLOKE+16      SET LOCK ELEMENT ASCB ADDRESS
         ST    R1,$SVPOSTE+4       SET POST ELEMENT ASCB ADDRESS
         L     R1,$HASPMAP         POINT TO HASP MODULE MAP          R4
         L     R1,MAPSSSMA-MAPDSECT(,R1)  POINT TO SSSM              R4
         CLI   0(R1),$SVENTL       CHECK LENGTH OF ADCON VECTOR     R41
         BNE   INOTCOMP            BR IF NOT CORRECT                R41
         L     R1,0(,R1)           POINT TO ADCON VECTOR            R41
         LR    R15,WA              POINT TO
         SL    R15,=F'8'            SSVT PREFIX
         TM    $SVSTUS,$SVSTUSR    ARE WE RESTARTING
         BO    ICLCFUN             IF SO INSURE SAME SSSM
         MVC   0(4,R15),=C'SSVT'   SET SSVT ID                       R4
         MVC   SSVTFNUM,ISVTFNUM   INSERT NUMBER OF FUNCTIONS
         MVC   SSVTFCOD(IFUNL),ISVTFUNS MOVE FUNCTION OFFSETS
         MVC   $SVSOUT($SVENTL),0(R1)  COPY ENTRIES                 R41
         MVC   $SVNTGBE,$NUMTGBE   SET MAX TG'S PER TGB              R4
         MVC   $SVCENQ(IENQPL),IENQP  SET CELL ENQ PATTERN
         LA    R1,$SVQNAM          SET ADDRESS
         ST    R1,$SVCENQ+4         OF QNAME
         LA    R1,$SVCRNAM         SET ADDRESS
         ST    R1,$SVCENQ+8         OF RNAME
         MVC   $SVQNAM(4),=CL4'SYSZ'  SET FIRST PART OF QNAME
         MVC   $SVCRNAM,=CL4'CELL' SET RNAME FOR CELL CONTROL
         MVI   $SVCPOST,X'FF'      INDICATE NO CELLS DESIRED
         LA    R1,$SVBR14          GET ADDRESS OF BR 14
         ST    R1,$SVCPOST+8       SET
         ST    R1,$SVQLOKE+20       ERROR
         ST    R1,$SVPOSTE+8         RETURNS
         MVC   $SVQLOKE,$SVSSNM    SET QUEUE LOCK ELEMENT HEADER
         LA    R1,$SVRETN          GET ADDRESS OF RETURN ROUTINE
         ST    R1,$SVSMFSO         SET DEFAULT
         ST    R1,$SVSMFJP          SMF EXITS
         MVC   $SVRETN(4),=XL4'1FFF07FE'  SET RETURN ROUTINE
         EJECT
***********************************************************************
*                                                                     *
*        BUILD HASP ADDRESS SPACE VECTOR TABLE                        *
*                                                                     *
***********************************************************************
         SPACE 3
         L     R1,CVTPTR           GET ADDRESS OF CVT
         L     R1,CVTASVT-CVT(,R1) GET ADDRESS OF SYSTEM ASVT
         L     R1,ASVTMAXU-ASVT(,R1)  GET MAXIMUM ADDRESS SPACES
         ALR   R1,R1               MULTIPLY BY FOUR
         LA    R3,4(R1,R1)          AND ADD FOUR
         GETMAIN R,SP=241,LV=(R3)  GET COMMON STORAGE
         LR    R0,R2               SAVE REGISTER 2
         LR    R2,R1               SET ADDRESS TO CLEAR
         SLR   R5,R5                AND PAD CHARACTER
         MVCL  R2,R4               CLEAR THE HAVT
         LR    R2,R0               RESTORE REGISTER 2
         MVC   0(4,R1),=CL4'HAVT'  SET CONTROL BLOCK ID
         ST    R1,$SVHAVT          SET ADDRESS OF THE HAVT
         B     ISVTSCAT            COMPLETE SSVT INITIALIZATION
         SPACE 3
ICLCFUN  CLC   0(4,R15),=C'SSVT'   CHECK SSVT ID                     R4
         BNE   INOTCOMP            ERROR IF NOT SAME
         CLC   SSVTFNUM,ISVTFNUM   DOES FUNCTION AREA MATCH
         BNE   INOTCOMP            IF NOT ERROR EXIT
         CLC   SSVTFCOD(IFUNL),ISVTFUNS  CHECK FUNCTION OFFSETS
         BNE   INOTCOMP            ERROR IF NOT SAME
         CLC   $SVNTGBE,$NUMTGBE   TEST MAX TG'S PER TGB             R4
         BNE   INOTCOMP            ERROR IF NOT SAME                 R4
         CLC   $SVSOUT($SVENTL),0(R1)  CHECK SAME SSSM              R41
         BE    ISVTSCAT            BRANCH IF SAME SSSM
         SPACE 2
INOTCOMP $EXIT ISTRTEM3            ISSUE ERROR MSG AND QUIT          R4
         SPACE 2
INSTRTEE $EXIT ISTRTEM2            ISSUE ERROR MSG AND QUIT          R4
         EJECT
***********************************************************************
*                                                                     *
*        COMPLETE INITIALIZATION OF SSVT                              *
*                                                                     *
***********************************************************************
         SPACE 3
ISVTSCAT NULL                      COMPLETE SSVT
         LA    R0,57               PREPARE TO SCAN                   R4
         L     R1,=A(NSCAT+3*64)    SYSOUT CLASS                     R4
         LR    WB,R1                 ATTRIBUTE TABLE                 R4
         SPACE 1                                                     R4
ISETSCAT LA    R1,1(,R1)           POINT TO NEXT SCAT ENTRY          R4
         TM    SCATFLAG-SCADSECT(R1),SCATPNCH+SCATPLOT+SCATINVL
         BNZ   *+8                 BRANCH IF PUNCH OR INVALID
         OI    SCATFLAG-SCADSECT(R1),SCATPRNT  SET PRINT INDICATION
         BCT   R0,ISETSCAT         GET NEXT ENTRY
         SPACE 1                                                     R4
         MVC   $SVSCAT+3*64(64),0(WB)  MOVE SCAT TO SSVT
         MVC   $SVBAKSP,$BSPACE    SET CONSOLE BACKSPACE CHARACTER   R4
         MVC   $SVBFSIZ,$BUFSIZE   SET HASP BUFFER SIZE              R4
         LH    R1,$BUFSIZE            COMPUTE                        R4
         SL    R1,=A(HQTHQR-HQTSTART)  AND                           R4
         D     R0,=A(HQRLENG)           SET                          R4
         ST    R1,$SVHQRCT               MAX HQRS IN HQT             R4
         MVC   $SVMAPL,$CYLMAPL    SET DA ALLOCATION MAP LENGTH      R4
         MVC   $SVNUMDA,$NUMDA     SET NO. OF DIRECT ACCESS VOLUMES  R4
         MVC   $SVPDDB1,$IOTPDDB   SET OFFSET WITHIN IOT OF 1ST PDDB R4
         MVC   $SVRINCR,$RECINCR   SET RECORD ALTERNATION PARAMETER  R4
         MVC   $SVTKCEL,$TCELSIZ   SET TRAKCELL SIZE                 R4
         L     R1,=A(NXPRITAB)     MOVE JOB OUTPUT                   R4
         MVC   $SVXPRI(10*4),0(R1)  PRIORITY TABLE TO SSVT           R4
         MVC   $SVNOSYS+1(1),$SYSID  SET SYSTEM ID                   R4
         MVI   $SVNOUNT+1,255      SET MAXIMUM LOCAL UNITS ROUTE     R4
         MVC   $SVSID,$SID         SET SYSTEM ID               @OZ18212
         EJECT                                                       R4
***********************************************************************
*                                                                     *
*        INITIALIZE PARTITION INFORMATION TABLES                      *
*                                                                     *
***********************************************************************
         SPACE 3
         L     WD,$PITABLE         GET ADDRESS OF TEMPORARY PITS     R4
         ICM   R1,15,$SVPIT        GET ADDRESS OF EXISTING PITS      R4
         ST    R1,$PITABLE         STORE IN HCT
         BZ    NEWPITS             BR IF NO EXISTING PITS            R4
         TM    $SVHASP,X'80'       TEST INITIALIZATION STATUS
         BZ    NEWPITS             BR IF NOT JES2 RESTART            R4
         SL    R1,=F'8'            BACK UP TO PIT STORAGE PREFIX     R4
         MVC   $MAXCLAS,6(R1)      USE EXISTING JOB CLASS COUNT      R4
         B     NURALL              THEN BR TO NEXT SECTION           R4
         SPACE 1                                                     R4
NEWPITS  SLR   WB,WB               ZERO                              R4
         ST    WB,$SVPIDLE         PIT IDLE COUNT
         IC    WB,$MAXCLAS              WC = INDIVIDUAL              R4
         LA    WC,PITCLASS+1+3-PITDSECT(,WB)  PIT                    R4
         N     WC,=F'-4'                       LENGTH                R4
         LH    R15,$MAXPART        WB = TOTAL                        R4
         MR    R14,WC                    PIT                         R4
         LA    WB,8(,R15)                 SIZE                       R4
         LTR   R1,R1               TEST
         BZ    NGETPIT             BRANCH IF NO PITS
         SL    R1,=F'8'            GET ADDRESS OF PIT PREFIX
         CLC   0(4,R1),=CL4'PIT'   CHECK PIT ID
         BNE   NGETPIT             IGNORE SPACE IF INVALID ID
         LH    R0,4(,R1)           GET PIT STORAGE SIZE              R4
         ICM   R0,8,=AL1(241)      GET SUBPOOL NUMBER
         FREEMAIN R,LV=(0),A=(1)   FREE PITS
         SPACE 2
NGETPIT  GETMAIN R,SP=241,LV=(WB)  GET COMMON STORAGE FOR PITS
         MVC   0(4,R1),=CL4'PIT'   SET PIT ID
         STH   R0,4(,R1)            AND LENGTH                       R4
         MVC   6(1,R1),$MAXCLAS    SAVE JOB CLASS COUNT              R4
         EJECT                                                       R4
NMOVEPIT LA    WF,8(,R1)           POINT TO 1ST PIT ELEMENT          R4
         ST    WF,$SVPIT           SET IN SSVT                       R4
         ST    WF,$PITABLE          AND IN HCT                       R4
         LR    R1,WD               SAVE POINTER TO TEMPORARY PITS    R4
         LH    R0,$MAXPART         GET NUMBER OF PITS                R4
         SLR   WB,WB               GET NUMBER                        R4
         IC    WB,$MAXCLAS          OF JOB CLASSES                   R4
         LA    WE,PITCLASS-1-PITDSECT(,WB)  SET LENGTH               R4
         STC   WE,NPITMOVE+1                 OF PIT MOVE             R4
         SPACE 1                                                     R4
         USING PITDSECT,WE         PROVIDE PIT ADDRESSABILITY        R4
         SPACE 1                                                     R4
NEXTPIT  LR    WE,WF               POINT TO NEXT PIT                 R4
         ALR   WF,WC               SUPPLY NEXT CHAIN POINTER         R4
         SPACE 1                                                     R4
NPITMOVE MVC   PITDSECT(*-*),0(WD) MOVE NEXT TEMPORARY PIT           R4
         ST    WF,PITNEXT          SET CHAIN ADDRESS                 R4
         LA    R15,PITCLASS(WB)    SET JOB CLASS                     R4
         MVI   0(R15),C' '          TERMINATOR                       R4
         L     WD,PITNEXT-PITDSECT(,WD)  POINT TO NEXT TEMPORARY PIT R4
         BCT   R0,NEXTPIT          LOOP THRU ALL REQUESTED PITS      R4
         SPACE 1                                                     R4
         ST    R0,PITNEXT          ZERO LAST CHAIN ADDRESS           R4
         B     NURALL              THEN BR TO NEXT SECTION           R4
         SPACE 1                                                     R4
         DROP  WA,WE               KILL SSVT, PIT ADDRESSABILITY     R4
         EJECT                                                       R4
ISVTFNUM DC    Y(($SVRETID-$SVNULL)/4)  NUMBER OF FUNCTIONS
ISVTFUNS $SVTC                     GENERATE FUNCTION OFFSETS
IFUNL    EQU   *-ISVTFUNS
SENTRIES EQU   16                  ENTRY POINTER SECTION OF SSSM
         SPACE 1
IENQP    ENQ   (*-*,*-*,E,4,SYSTEM),MF=L  CELL CONTROL ENQ PATTERN
IENQPL   EQU   *-IENQP             LENGTH OF PATTERN
         SPACE 1                                                     R4
IPCES    EQU   $COMMPCE            1ST $$POST ELEMENT                R4
IPCESL   EQU   $SVPCENO*4          ALL $$POST ELEMENTS               R4
IQUECMBH DC    AL1(CMBFLAGC+CMBFLAGU,$ALWAYS+$HI,0,71),AL2(0,256,0,0,0)
         EJECT
         LTORG                     DEFINE LITERALS FOR SSVT SETUP
         TITLE 'HASP INITIALIZATION -- UNIT RECORD DEVICE ALLOCATION'
IECITMOD EQU   X'18'               HASP ATTENTION INDEX
         SPACE 1                                                     R4
NURALL   BALR  BASE2,0             RE-ESTABLISH                      R4
         USING *,BASE2              LOCAL ADDRESSABILITY
         SPACE 1                                                     R4
         SLR   R0,R0               CLEAR FOR INSERTS                 R4
         IC    R0,$NUMRDRS         INITIALIZE                        R4
         LA    R1,NURRDR            READER ENTRY IN                  R4
         BAL   WE,NURDEVS            DEVICE ALLOCATION TABLE         R4
         IC    R0,$NUMPUNS         INITIALIZE                        R4
         LA    R1,NURPUN            PUNCH ENTRY IN                   R4
         BAL   WE,NURDEVS            DEVICE ALLOCATION TABLE         R4
         IC    R0,$NUMPRTS         INITIALIZE                        R4
         LA    R1,NURPRT            PRINTER ENTRY IN                 R4
         BAL   WE,NURDEVS            DEVICE ALLOCATION TABLE         R4
         LH    R0,$NUMLNES         INITIALIZE                        R4
         LA    R1,NURLNE            LINE ENTRY IN                    R4
         LA    WE,NURSSVT            DEVICE ALLOCATION TABLE         R4
         SPACE 1                                                     R4
NURDEVS  CVD   R0,INITDBL          FORMAT                            R4
         OI    INITDBL+7,X'0F'      DEVICE                           R4
         UNPK  1(3,R1),INITDBL       COUNT                          R41
         CLI   1(R1),C'0'             IN                             R4
         BNER  WE                      MESSAGE                       R4
         MVC   1(3,R1),2(R1)            SEGMENT                     R41
         CLI   1(R1),C'0'                OF                         R41
         BNER  WE                         U/R                       R41
         MVC   1(3,R1),2(R1)               DEVICE                   R41
         BR    WE                           TABLE                   R41
         EJECT                                                      R41
NURSSVT  L     R10,$SSVT           GET ADDRESS OF SSVT               R4
         USING SSVT,R10            ESTABLISH SSVT ADDRESSABILITY
         TM    $SVSTUS,$SVSTUSP    TEST SUBSYSTEM STATUS
         BZ    NURAL01             BRANCH IF NOT PRIMARY SUBSYSTEM
         L     R1,PSAAOLD-PSA      GET ADDRESS OF SUBSYSTEM ASCB
         LH    R0,ASCBASID-ASCB(,R1)  GET SUBSYSTEM ASID
         ICM   R0,8,=AL1(ATBLLKR)  INDICATE LOCAL LOCK REQUIRED
         L     R1,$HASPMAP         POINT TO HASP MODULE MAP          R4
         L     R1,MAPATTNA-MAPDSECT(,R1)  POINT TO ATTENTION ROUTINE R4
         L     WA,CVTPTR           GET ADDRESS OF CVT
         L     WA,CVTIXAVL-CVT(,WA)  GET ADDRESS OF IOCOM
         L     WA,IOCATTBL-IOCOM(,WA)  GET ADDRESS OF ATTENTION TABLE
         MODESET EXTKEY=ZERO       SET ZERO PROTECT KEY
         STM   R0,R1,ATBFLA+2*IECITMOD-ATB(WA)  SET ATTN TABLE ENTRY
         MODESET EXTKEY=HASP       RESET HASP PROTECT KEY
         SPACE 1                                                     R4
NURAL01  MVC   NURDEB+1(3),$HASPTCB+1  SET TCB ADDRESS IN DEB
         L     WA,CVTPTR           GET ADDRESS OF CVT
         L     WA,CVTILK2-CVT(,WA) GET START OF UCB LOOK-UP TABLE
         SH    WA,=H'2'             LESS 2                           R4
         SR    WB,WB               ZERO UCB ADDR REG
         EJECT                                                       R4
NXTENTRY LA    WA,2(,WA)           STEP TO NEXT LOOKUP TABLE ENTRY   R4
         ICM   WB,3,0(WA)          GET ADDRESS OF NEXT UCB
         BZ    NXTENTRY            IGNORE IF NULL                    R4
         CL    WB,=F'65535'        TEST FOR X'FFFF'
         BE    NURAL10             EXIT IF ALL UCB'S PROCESSED
         USING UCBDSECT,WB         ESTABLISH UCB ADDRESSABILITY
         LA    WC,NURTAB           GET ADDRESS OF DEVICE TYPE TABLE
         LA    R0,(NURTABE-NURTAB)/4  GET NUMBER OF ENTRIES
         SPACE 1                                                     R4
NURAL02  CLC   0(2,WC),UCBTBYT3    COMPARE DEVICE TYPE WITH UCB TYPE
         BE    NURAL03             BRANCH IF DEVICE TYPE FOUND
         LA    WC,4(,WC)           STEP TO NEXT ENTRY
         BCT   R0,NURAL02          TRY NEXT ENTRY
         B     NXTENTRY            DEVICE TYPE NOT FOUND, LOOP       R4
         SPACE 1                                                     R4
NURAL03  L     R15,CVTPTR          GET ADDRESS OF CVT
         L     R15,CVTILK2-CVT(,R15)  GET START OF UCB LOOK-UP TABLE
         SH    R15,=H'2'               LESS 2                        R4
         SR    R1,R1               ZERO REG FOR UCB ADDRESS
         SPACE 1                                                     R4
NEXTDEV  LA    R15,2(,R15)         STEP TO NEXT LOOKUP TABLE ENTRY   R4
         ICM   R1,3,0(R15)         GET ADDRESS OF NEXT UCB
         CLR   R1,WB               COMPARE UCB ADDRESS WITH CURRENT
         BNE   NEXTDEV             TRY AGAIN IF NO MATCH             R4
         CLR   WA,R15              COMPARE LOOK-UP TABLE ADDRESSES
         BNE   NXTENTRY            DUPLICATE CHN PATH IF DIFFERENT   R4
         SPACE 1                                                     R4
         MVI   NURCSW+4,X'02'      INITIALIZE IOB FIELDS
         MVI   NURSIOCC,X'30'       TO SIMULATE SIO FAILURE
         LH    R1,2(,WC)           GET ALLOCATION TABLE OFFSET       R4
         LA    R1,NURDEVTB(R1)     GET ALLOCATION ENTRY FOR THIS UCB R4
         CLI   0(R1),X'FF'         TEST ALLOCATION TYPE              R4
         BE    NURAL04             BRANCH IF DESIGNATED UCB REQUIRED R4
         TM    UCBSTAT,UCBONLI+UCBCHGS  TEST UCB STATUS
         BNM   NURAL04             BRANCH IF NOT ONLINE
         MVI   NURSIOCC,0          RESET SIO CONDITION CODE
         TM    UCBSTAT,UCBALOC     TEST UCB STATUS
         BO    NURAL04             BRANCH IF DEVICE IS ALLOCATED
         TM    UCBFL1,X'FE'        TEST UCB FLAGS
         BNZ   NURAL04             BRANCH IF DEVICE IS NOT AVAILABLE
         XC    NURECB,NURECB       CLEAR ECB
         MVI   NURIOB,X'02'        PRESET IOBFLAG1
         STCM  WB,7,NURUCB+1       SET ADDRESS OF UCB IN DEB
         EXCP  NURIOB              INITIATE I/O
         WAIT  ECB=NURECB          WAIT FOR I/O TO COMPLETE
         EJECT                                                       R4
NURAL04  NI    NURALSW+1,X'0F'     INDICATE DEVICE NOT ASSIGNED
         LA    WD,$DCTPOOL-(DCTCHAIN-DCTDSECT)  PREPARE TO SCAN DCTS R4
         B     NURAL06             GO DO IT                          R4
         SPACE 1                                                     R4
         USING DCTDSECT,WD         ESTABLISH DCT ADDRESSABILITY
         SPACE 1                                                     R4
NURAL05  CLC   UCBNAME,DCTBUFAD    TEST DCT DESIGNATION              R4
         BNE   NURAL06             BRANCH IF THIS UCB NOT DESIGNATED
         BAL   WE,NURALLOC         ATTEMPT TO ALLOCATE DEVICE
         OI    NURALSW+1,X'F0'     INDICATE DEVICE ASSIGNED
         SPACE 1                                                     R4
NURAL06  ICM   WD,7,DCTCHAIN+1     GET ADDRESS OF NEXT DCT
         BNZ   NURAL05             PROCESS NEXT DCT
         SPACE 1                                                     R4
NURALSW  NOP   NXTENTRY            BR IF DEVICE ASSIGNED             R4
         TM    NURSIOCC,X'30'      TEST SIO CONDTION CODE
         BO    NXTENTRY            IGNORE DEVICE IF NOT AVAILABLE    R4
         LH    R1,2(,WC)           GET DEVICE TYPE TABLE OFFSET
         LA    WC,NURDEVTB(R1)     GET APPROPRIATE ENTRY FOR THIS UCB
         LA    WD,$DCTPOOL-(DCTCHAIN-DCTDSECT)  PREPARE TO SCAN DCTS R4
         B     NURAL08             GO DO IT                          R4
         SPACE 1                                                     R4
NURAL07  CLI   DCTBUFAD+2,0        TEST DCT ALLOCATION STATUS        R4
         BNE   NURAL08             BRANCH IF DCT IS NOT AVAILABLE
         CLC   DCTDEVTP,0(WC)      TEST DCT DEVICE TYPE
         BNE   NURAL08             BRANCH IF NOT CORRECT DEVICE TYPE
         BAL   WE,NURALLOC         ATTEMPT TO ALLOCATE DEVICE
         MVI   DCTBUFAD+2,1        INDICATE DEVICE ALLOCATED         R4
         B     NXTENTRY            GET NEXT UCB                      R4
         SPACE 1                                                     R4
NURAL08  ICM   WD,7,DCTCHAIN+1     GET ADDRESS OF NEXT DCT
         BNZ   NURAL07             PROCESS NEXT DCT
         CLI   1(WC),X'FF'         TEST MESSAGE SWITCH
         BE    NXTENTRY            BR IF MESSAGE HAS BEEN ISSUED     R4
         L     R1,=A(NURWTO)       POINT TO ERROR MESSAGE            R4
         MVC   NURWTOM-NURWTO(,R1),1(WC)  SET UP MESSAGE             R4
        $$WTO  (R1)                ISSUE DEVICES EXCEEDED MESSAGE    R4
         MVI   1(WC),X'FF'         INDICATE MESSAGE ISSUED
         B     NXTENTRY            GET NEXT UCB                      R4
         SPACE 1                                                     R4
NURAL10  LA    WD,$DCTPOOL-(DCTCHAIN-DCTDSECT)  PREPARE TO SCAN DCTS R4
         B     NURAL12             GO DO IT                          R4
         SPACE 1                                                     R4
NURAL11  ICM   R1,7,DCTDCB+1       GET ADDRESS OF DCB (IF PRESENT)   R4
         BZ    SKIP890             NOT PRESENT, BR - DRAIN DEVICE    R4
         L     R1,DCBDEBAD-DCBDSECT(,R1)  GET ADDRESS OF DEB
         ICM   R1,7,DEBSUCBB-DEBDSECT(R1)  GET ADDRESS OF UCB
         BNZ   *+8                 BRANCH IF DEVICE IS ALLOCATED
SKIP890  OI    DCTSTAT,DCTDRAIN    NO, INDICATE DEVICE DRAINED
         SPACE 1                                                     R4
NURAL12  ICM   WD,7,DCTCHAIN+1     GET ADDRESS OF NEXT DCT           R4
         BNZ   NURAL11             PROCESS NEXT DCT
         B     NUREND              EXIT IF ALL DCT'S PROCESSED
         SPACE 5
NURALLOC NULL                      UNIT RECORD DEVICE ALLOCATION
         L     R1,DCTDCB           GET ADDRESS OF DCB
         L     R1,DCBDEBAD-DCBDSECT(,R1)  GET ADDRESS OF DEB
         STCM  WB,7,DEBSUCBB-DEBDSECT(R1)  SET UCB ADDRESS IN DEB
         LA    R0,$IMAGTCB         IMPACT IMAGE-LOADER TCB ADR @OZ26939
         TM    DCTDEVTP,DCTPRPU    TEST DEVICE TYPE                  R4
         BZ    NURAL13C            BR IF NOT LOC PRINT/PUNCH   @OZ26939
         L     R1,DCTEWF                         ELSE SET UCB ADDR   R4
         STCM  WB,7,PRPUUCB+1-PCEDSECT(R1)        AND DEVICE TYPE    R4
         MVC   PDEVTYPE+1-PCEDSECT(3,R1),UCBTYP+1  IN PPPWORK        R4
         CLI   UCBTBYT4,UCB3800    TEST FOR LOCAL 3800 PRINTER       R4
         BNE   NURAL13A            BR IF NO TO USE REGULAR VALUES    R4
         OI    DCTPPSW2,DCTNIPRT    ELSE SHOW NON-IMPACT PRINTER     R4
         LH    R15,NBR3800         GENERATE TOTAL                    R4
         LA    R15,1(,R15)          COUNT OF                         R4
         STH   R15,NBR3800           3800 PRINTERS                   R4
         CLI   DCTFCB,0            FCB SPECIFIED ON PRINTERN CARD... R4
         BNE   SKIP900             BR IF YES TO USE AS DEFAULT       R4
         MVC   DCTFCB,$NIPFCB       ELSE USE &NIPFCB AS DEFAULT      R4
SKIP900  CLC   DCTFCB,=C'    '     TEST FOR HARDWARE (3800) DEFAULT  R4
         BNE   SKIP910             BR IF NO                          R4
         MVC   DCTFCB,=C'****'     ELSE, INDICATE IN DCT             R4
SKIP910  MVC   PRDFCB-PCEDSECT(4,R1),DCTFCB  SET UP 3800 DEFAULT FCB R4
         GETMAIN RU,LV=16          STORAGE FOR DTE             @OZ26939
         LR    R0,R1               NON-IMPACT LOADER TCB ADDR  @OZ26939
         XC    0(16,R1),0(R1)      INITIALIZE DTE              @OZ26939
         CLI   DCTUCS,0            UCS SPECIFIED ON PRINTERN CARD... R4
         BNE   NURAL13B            BR IF YES TO USE AS DEFAULT       R4
         MVC   DCTUCS,$NIPUCS       ELSE USE &NIPUCS AS DEFAULT      R4
         B     NURAL13B            CLEAR SAVE FIELDS                 R4
         SPACE 1                                                     R4
NURAL13A CLI   DCTFCB,0            FCB SPECIFIED ON PRINTERN CARD... R4
         BNE   SKIP920             BR IF YES TO USE AS DEFAULT       R4
         MVC   DCTFCB,$PRTFCB       ELSE USE &PRTFCB AS DEFAULT      R4
SKIP920  CLI   DCTUCS,0            UCS SPECIFIED ON PRINTERN CARD... R4
         BNE   NURAL13B            BR IF YES TO USE AS DEFAULT       R4
         MVC   DCTUCS,$PRTUCS       ELSE USE &PRTUCS AS DEFAULT      R4
         SPACE 2                                                     R4
NURAL13B L     R1,DCTEWF           STORE ADDR OF HASPIMAG      @OZ26939
         ST    R0,PRIMGDTE-PCEDSECT(,R1)  SUBTASK DTE INTO PCE @OZ26939
NURAL13C CLI   DCTDEVTP,DCTLNE     TEST DEVICE TYPE            @OZ26939
         BE    NURALL4             BRANCH IF RJE LINE
         TM    $SVSTUS,$SVSTUSP    TEST SUBSYSTEM STATUS
         BZ    NURALL2             BRANCH IF NOT PRIMARY SUBSYSTEM
         CLI   DCTDEVTP,DCTRDR     TEST DEVICE TYPE
         BNE   NURALL1             SET ATTN INDICATION IF NOT READER
         TM    DCTSTAT,DCTDRAIN    TEST DEVICE STATUS
         BOR   WE                  RETURN IF READER IS DRAINED
         EJECT                                                       R4
NURALL1  OI    DCTSTAT,DCTATTN     SET FOR ATTENTION PROCESSING
         SPACE 1                                                     R4
NURALL2  TM    DCTSTAT,DCTDRAIN    TEST DEVICE STATUS
         BOR   WE                  RETURN IF DEVICE IS DRAINED
         TM    NURSIOCC,X'30'      TEST SIO CONDITION CODE
         BO    NURALL5             BRANCH IF DEVICE IS NOT AVAILABLE
         CLI   DCTDEVTP,DCTRDR     TEST DEVICE TYPE
         BNE   NURALL3             BRANCH IF NOT READER
        $ALLOC (WD),NURALL5        ATTEMPT TO ALLOCATE DEVICE
         TM    NURCSW+4,X'02'      TEST CHANNEL STATUS WORD
         BZR   WE                  RETURN IF READER IS READY
         OI    DCTSTAT,DCTHOLD     PLACE READER IN HOLD STATUS
         BR    WE                   AND RETURN
         SPACE 1                                                     R4
NURALL3  TM    NURCSW+4,X'02'      TEST CHANNEL STATUS WORD
         BO    NURALL5             BRANCH IF UNIT CHECK
        $ALLOC (WD)                ATTEMPT TO ALLOCATE DEVICE
         BNZR  WE                  RETURN IF SUCCESSFUL
         B     NURALL5             NO, DRAIN DEVICE
         SPACE 1                                                     R4
NURALL4  CLI   UCBTBYT3,UCB3CTC    TEST DEVICE TYPE                  R4
         BNE   SKIP930             SKIP IF NOT CTCA                  R4
         OI    MDCTLINE,DCTPCTC+DCTPTRSP SET CTC AND TRANSPARENCY    R4
         B     NURALL5             GO DRAIN DEVICE                   R4
SKIP930  OI    MDCTMODE,X'04'      SET INTERRUPT MODE                R4
         CLI   UCBTBYT4,UCBBSCA    TEST DEVICE TYPE                  R4
         BNE   NURALL5             BRANCH IF NOT 2703
         MVI   MDCTMODE,0          2703, RESET MODE BYTE
         OI    MDCTLINE,DCTPTRSP    AND FORCE TRANSPARENCY
         SPACE 1                                                     R4
NURALL5  OI    DCTSTAT,DCTDRAIN    INDICATE DEVICE DRAINED
         BR    WE                   AND RETURN
         DROP  WB,WD,R10           DROP CONTROL BLOCK ADDRESSABILITY
         SPACE 3                                                     R4
         LTORG                                                       R4
         EJECT                                                       R4
NURECB   DC    F'0'                I/O EVENT CONTROL BLOCK
NURIOB   DS    0D                  INPUT/OUTPUT BLOCK
         DC    A(0,NURECB)
NURCSW   DC    D'0'
NURSIOCC DC    A(NURCCW,NURDCB,0,0,0,0)
NURCCW   CCW   X'03',0,X'20',1     NOP CCW
NURDCB   EQU   *-40                DATA CONTROL BLOCK
         DC    X'0000A0000C',AL3(NURDEB),X'10000000'
NURDEB   DS    0F                  DATA EXTENT BLOCK
         DC    A(*-*),AL1(4,0,0,0,136,0,0,0,3,0,0,0,1,0,0,0)
         DC    A(0),AL1(31),AL3(NURDCB),AL1(2),AL3(NURAPPEN)
NURUCB   DC    A(*-*)              ADDRESS OF UNIT CONTROL BLOCK
NURAPPEN DC    5A(NURRET)          I/O APPENDAGE VECTOR TABLE
NURRET   BR    R14                 NOP APPENDAGE
         SPACE 3
NURTAB   DS    0F                  UNIT RECORD DEVICE TYPE TABLE
         DC    AL1(UCB3UREC,UCB2540R),AL2(NURRDR-NURDEVTB)  2540R
         DC    AL1(UCB3UREC,UCB2501),AL2(NURRDR-NURDEVTB)   2501
         DC    AL1(UCB3UREC,UCB3505),AL2(NURRDR-NURDEVTB)   3505
         DC    AL1(UCB3UREC,UCB2540P),AL2(NURPUN-NURDEVTB)  2540P
         DC    AL1(UCB3UREC,UCB2520),AL2(NURPUN-NURDEVTB)   2520
         DC    AL1(UCB3UREC,UCB3525),AL2(NURPUN-NURDEVTB)   3525
         DC    AL1(UCB3UREC,UCB1403),AL2(NURPRT-NURDEVTB)   1403
         DC    AL1(UCB3UREC,UCB3211),AL2(NURPRT-NURDEVTB)   3211
         DC    AL1(UCB3UREC,UCB3800),AL2(NURPRT-NURDEVTB)   3800     R4
         DC    AL1(UCB3COMM,UCBSDAII),AL2(NURLNE-NURDEVTB)  2701
         DC    AL1(UCB3COMM,UCBBSCA),AL2(NURLNE-NURDEVTB)   2703
         DC    AL1(UCB3CTC,0),AL2(NURNONE-NURDEVTB)         CTCA     R4
NURTABE  DS    0F                  END OF DEVICE TYPE TABLE
         SPACE 3
NURDEVTB DS    0F                  DEVICE ALLOCATION TABLE
NURRDR   DC    AL1(DCTRDR),CL14'    READER(S)'                      R41
NURPUN   DC    AL1(DCTPUN),CL14'    PUNCH(ES)'                      R41
NURPRT   DC    AL1(DCTPRT),CL14'    PRINTER(S)'                     R41
NURLNE   DC    AL1(DCTLNE),CL14'    LINE(S)'                        R41
NURNONE  DC    X'FFFF'             PREVENTS NON-DESIGNATED UCB ALLOC R4
         SPACE 3
NBR3800  DC    H'0'                NBR OF 3800 PRINTERS              R4
         SPACE 3                                                     R4
NUREND   NULL                      END OF UNIT RECORD INITIALIZATION
         TITLE 'HASP INITIALIZATION -- FINAL RJE INITIALIZATION'     R4
***********************************************************************
*                                                                     *
*        COMPLETE RJE INITIALIZATION                                  *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
NRJEINIT BALR  BASE2,0             RE-ESTABLISH                      R4
         USING *,BASE2              LOCAL ADDRESSABILITY             R4
         USING SSVT,WG             PROVIDE SSVT ADDRESSABILITY       R4
         SPACE 1                                                     R4
         L     WG,$SSVT            GET SSVT ADDRESS                  R4
         LH    R0,$SVROUT          GET NUMBER OF REMOTES             R4
         LTR   R0,R0               IF NO REMOTES DEFINED,            R4
         BZ    NTPRAT               BR TO FREE TEMPORARY STORAGE     R4
         L     R1,$MLLMPCE         POINT TO LINE MANAGER PCE         R4
         MVI   PCEEWF-PCEDSECT(R1),$EWFWORK  ENSURE PCE HELD         R4
         LA    WA,$PCEORG-(PCENEXT-PCEDSECT)  PREPARE TO SCAN PCES   R4
         SPACE 1                                                     R4
         USING PCEDSECT,WA         PROVIDE PCE ADDRESSABILITY        R4
         SPACE 1                                                     R4
SKIP1000 ICM   WA,15,PCENEXT       LOCATE                            R4
         BZ    NTPRAT               FIRST                            R4
         TM    PCEID,PCERJEID        REMOTE TERMINAL                 R4
         BZ    SKIP1000               PCE                            R4
         SPACE 1                                                     R4
         L     R1,PCEDCT           ASSUME REMOTE READER        @OZ32566
         CLI   PCEID+1,PCERDRID    TEST ASSUMPTION                   R4
         BE    SKIP1010            BR IF VALID                       R4
         L     R1,PCEDCT            ELSE GET PRT/PNCH DCT ADDR @OZ32566
         SPACE 1                                                     R4
         DROP  WA                  KILL PCE ADDRESSABILITY           R4
         SPACE 1                                                     R4
SKIP1010 SLR   WF,WF               GET MAXIMUM                       R4
         IC    WF,$NUMCLAS          SYSOUT CLASSES                   R4
         STC   WF,NCRDCTCL+1       SET CLASS MOVE LENGTH             R4
         SLR   WA,WA               CLEAR FOR SCAN
         L     R14,$RWT            POINT TO 1ST RWT ELEMENT          R4
         USING RWTDSECT,R14        ESTABLISH RWT ADDRESSABILITY
         L     R15,$RAT            POINT TO 1ST RAT ELEMENT          R4
         USING RATDSECT,R15        ESTABLISH RAT ADDRESSABILITY
         SPACE 2
NRDBUILD ST    R1,RATRDCT          STORE ADDRESS OF REMOTE DCT IN RAT
         ICM   WA,1,RATLDCT        GET LINE NUMBER
         BZ    NRDBLD3             NON-DEDICATED LINE IF ZERO
         CH    WA,$NUMLNES         CHECK LINE SPECIFICATION VALIDITY R4
         BH    NLNERROR            BRANCH IF INVALID                 R4
         L     WB,$LNEDCT          POINT TO 1ST LINE DCT             R4
         USING DCTDSECT,WB         ESTABLISH DCT ADDRESSABILITY
         B     *+8                 BYPASS FIRST TIME
         L     WB,DCTCHAIN         GET ADDRESS OF
         BCT   WA,*-4               NTH LINE DCT
         TM    RATTYPE,DCTPSNA     TEST FOR SNA TYPE REMOTE          R4
         BNO   SKIP1020            NO, BR -- GO INSURE BSC LINE      R4
         TM    MDCTTYPE,DCTPSNA    ELSE CHECK FOR LOGICAL LINE TYPE  R4
         BNO   NLNERROR            NO, BR -- INCOMPATIBLE LINE       R4
         B     SKIP1030            SKIP AROUND BSC LINE CHECK        R4
SKIP1020 TM    MDCTTYPE,DCTPSNA    INSURE BSC RMTS USE BSC LINES     R4
         BO    NLNERROR            BRANCH IF SNA LINE                R4
SKIP1030 ST    WB,RATLDCT          STORE ADDRESS OF LINE DCT IN RAT
         OI    MDCTSTAT,DCTLEASE   INDICATE DEDICATED LINE
         ST    R15,MDCTRAT         STORE RAT ADDRESS IN LINE DCT     R4
         TM    RATTYPE,DCTPSNA     TEST FOR SNA TYPE RMT             R4
         BO    SKIP1040            YES, BR--HANDLE AS SEMI-LEASED    R4
         OC    MDCTDCT,MDCTDCT     TEST FOR ALREADY LEASED           R4
         BZ    NRDBLD2             NO, SKIP--LEASE LINE TO FIRST RMT R4
SKIP1040 OI    MDCTSTAT,DCTSHARE   INDICATE SHARED LINE              R4
         LA    R1,0                PREPARE TO ZERO LINE DCT RMT PTR  R4
         XC    MDCTRAT,MDCTRAT     CLEAR RAT ADDRESS FROM LINE DCT   R4
NRDBLD2  ST    R1,MDCTDCT          STORE RMT DCT ADDRESS IN LINE DCT R4
         L     R1,RATRDCT          RESTORE RMT DCT ADDRESSABILITY    R4
         B     NRDBLD3             CONTINUE RMT INITIALIZTION        R4
         DROP  WB                  DROP DCT ADDRESSABILITY
         SPACE 2                                                     R4
NLNERROR STM   R14,R1,60(R13)      SAVE RAT, RWT, & RMT DCT POINTERS R4
         L     WB,=A(NLNEMSG)      POINT TO MESSAGE TEXT             R4
         MVC   NLNERMT-NLNEMSG(3,WB),RATNAME+3 MOVE RMT NUMBR TO MSG R4
        $$WTO  (WB)                ISSUE ERROR MESSAGE TO OPERATOR   R4
         LM    R14,R1,60(R13)      RELOAD SAVED POINTERS             R4
         XC    RATLDCT,RATLDCT     CLEAR RMT LINE SPECIFICATION      R4
         MVI   NRJEXIT+1,0         FORCE QUIT AFTER TESTING ALL RJE  R4
         EJECT                                                       R4
NRDBLD3  SLR   R10,R10             INDICATE NO PREVIOUS DCT
         IC    WA,RATNUMRD         GET NUMBER OF READERS
         LA    WB,RWTRDR1          GET ADDRESS OF 1ST RDR RWT ELEMENT
         BAL   WE,NCRMTDCT         BUILD REMOTE READER DCT'S
         SPACE 1
         IC    WA,RATNUMPR         GET NUMBER OF PRINTERS
         LA    WB,RWTPRT1          GET ADDRESS OF 1ST PRT RWT ELEMENT
         BAL   WE,NCRMTDCT         BUILD REMOTE PRINTER DCT'S
         SPACE 1
         IC    WA,RATNUMPU         GET NUMBER OF PUNCHES
         LA    WB,RWTPUN1          GET ADDRESS OF 1ST PUN RWT ELEMENT
         BAL   WE,NCRMTDCT         BUILD REMOTE PUNCH DCT'S
         MVC   RATCONRT(1),$OWNSYS SET SYS ID                  @OZ26276
         SPACE 1                                                    R41
         TM    RATTYPE,DCTPLU1     IF NOT SNA REMOTE                R41
         BNO   NCONOUT              SKIP CONSOLE CONVERSION         R41
         TM    RATCONF,RATCONFC    IF NO CONSOLE ON REMOTE          R41
         BNO   NCONOUT              SKIP CONSOLE CONVERSION         R41
         L     WE,RATRDCT          POINT TO FIRST REMOTE DCT        R41
         IC    WA,RATNUMRD         NUMBER OF READERS                R41
         XR    WB,WB                ADDED TO                        R41
         IC    WB,RATNUMPR           NUMBER OF PRINTERS             R41
         AR    WB,WA                  LOCATES LAST PRINTER DCT      R41
         BCT   WB,NXTSTRT          IF TOP OF RMT DCT CHAIN ALREADY  R41
         B     NMAKCON              GO CONVERT TO A CONSOLE DCT     R41
         SPACE 1                                                    R41
NXTTLST  L     WE,MDCTDCT-DCTDSECT(,WE) POINT TO NEXT-TO-LAST       R41
NXTSTRT  BCT   WB,NXTTLST                PRINTER DCT                R41
         L     WB,MDCTDCT-DCTDSECT(,WE) POINT TO LAST PRINTER DCT   R41
         MVC   MDCTDCT-DCTDSECT(4,WE),MDCTDCT-DCTDSECT(WB) MOV LAST R41
         MVC   MDCTDCT-DCTDSECT(4,WB),RATRDCT PRINTER DCT TO        R41
         ST    WB,RATRDCT                      TOP OF RMT DCT CHAIN R41
NMAKCON  L     WE,RATRDCT          POINT TO CONSOLE DCT TO BE       R41
         MVI   DCTDEVTP-DCTDSECT(WE),DCTRCON MAKE DEV TYPE CONSOLE  R41
         MVI   MDCTSEL-DCTDSECT(WE),X'80' SHOW OUTBND CONS. SELECT  R41
         LA    WB,DCTDEVN-DCTDSECT(,WE) CHANGE                      R41
NAMESCN  LA    WB,1(,WB)                 DEVICE NAME                R41
         CLI   0(WB),C'.'                 TO                        R41
         BNE   NAMESCN                     READ                     R41
         MVC   1(3,WB),=C'CON'              RNNN.CON                R41
NCONOUT  DS    0H                                                   R41
         SPACE 1
         LA    R14,RWTEND          GET ADDRESS OF NEXT WORK TABLE
         LA    R15,RATEND          GET ADDRESS OF NEXT RAT ELEMENT
         BCT   R0,NRDBUILD         BUILD DCT'S FOR NEXT REMOTE
         SPACE 1                                                     R4
         DROP  R14                 KILL RWT ADDRESSABILITY           R4
         SPACE 1                                                     R4
NRJEXIT  B     NRDBUFS             BR IF NO ROUTE CODE ERRORS        R4
        $EXIT  NGQUITM              ELSE ISSUE 'QUIT' MSG AND QUIT   R4
         SPACE 1                                                     R4
NRDBUFS  LH    R1,$TPBFSIZ         GET TP BUFFER SIZE                R4
         CH    R1,$MLBFSIZ         TEST AGAINST ML BUFFER SIZE       R4
         BNL   SKIP1050            BR IF AT LEAST AS LARGE           R4
         LH    R1,$MLBFSIZ          ELSE FORCE                       R4
         LA    R1,7(,R1)             &TPBFSIZ = &MLBFSIZ             R4
         N     R1,=F'-8'              ROUNDED UP TO                  R4
         STH   R1,$TPBFSIZ             MULTIPLE OF 8 BYTES           R4
SKIP1050 LH    WE,=AL2(BUFDSECT-TPBUFST) LOAD BSC TP BUFR PREFIX SZ  R4
         LH    WF,=AL2(RPLDSECT-RPLBUFST) LOAD SNA TP BFR PREFIX SZ  R4
         LCR   R0,WF               ASSUME SNA TP BUFFER LARGER       R4
         CLR   WE,WF               TEST ASSUMPTION                   R4
         BNL   SKIP1060            BRANCH IF VALID                   R4
         LCR   R0,WE               ELSE-- USE BSC TP BFR SZ          R4
SKIP1060 AR    R1,R0               COMPUTE ACTUAL TP BUFFER SIZE     R4
         LA    R1,7(,R1)           ROUND UP TO A                    R41
         N     R1,=F'-8'            DOUBLE WORD BOUNDARY            R41
         CH    R1,=H'4096'         IF BUFFER SIZE LARGER THAN  @OZ20669
         BNH   SKIP1065              ONE PAGE, ROUND DOWN TO   @OZ20669
         LH    R1,=H'4096'             ONE PAGE                @OZ20669
SKIP1065 DS    0H                                              @OZ20669
         AR    WE,R1               COMPUTE BSC BUFFER USABLE SIZE    R4
         STH   WE,$BFSZBSC           AND STORE VALUE IN HCT          R4
         AR    WF,R1               COMPUTE SNA BUFFER USABLE SIZE    R4
         STH   WF,$BFSZSNA           AND STORE VALUE IN HCT          R4
         LH    R0,$NUMTPBF         GET RJE BUFFER REQUEST            R4
         L     WF,=A(NBFBUILD)     POINT TO BUFFER BUILD ROUTINE     R4
         BALR  WE,WF                AND GO DO IT                     R4
         MVI   BPMBFTYP-BPMDSECT(R1),BUFTP  SET BUFFER TYPE          R4
         STH   R0,$NUMTPBF         STORE BUFFERS ALLOCATED           R4
         ST    R1,$TPBFMAP          AND BUFFER POOL MAP ADDRESS      R4
         EJECT                                                       R4
***********************************************************************
*                                                                     *
*        OBTAIN PERMANENT CPT, AND INITIALIZE                         *
*                                                                     *
***********************************************************************
         SPACE 1                                                    R41
         LH    WB,$NUMCPTS         GET NUMBER OF CPTS               R41
         LTR   WB,WB               IF NOT ZERO                      R41
         BNZ   NGETCPT              GO GET SPACE                    R41
         ST    WB,$CPTPOOL         IF NO CPTS, ZERO CPTPOOL ADDRESS R41
         B     NCPTDONE            GO ON TO NEXT PHASE OF INIT      R41
         SPACE 1                                                    R41
NGETCPT  MH    WB,=AL2(CPTEND-CPTDSECT) CALCULATE TOTAL LENGTH REQD R41
         GETMAIN R,LV=(WB)         GET SPACE FOR CPT                R41
         SPACE 1                                                    R41
         L     WA,$CPTPOOL         POINT TO TEMP CPT POOL           R41
         USING CPTDSECT,WA                                          R41
         L     WF,$MLLMPCE         GET LINE MANAGER WORK            R41
         USING PCEDSECT,WF          AREA ADDRESSABILITY             R41
         LA    WE,1                INDEX PERM CPTS FROM 1           R41
         SPACE 1                                                    R41
         LA    WA,CPTDSECT         POINT TO ZERO CPT                R41
         ST    R1,$CPTPOOL         SAVE ADDR OF PERM CPTS           R41
         LR    WC,R1               POINT TO PERM CPT                R41
         LA    R1,CPTEND-CPTDSECT  SET INCREMENT REG                R41
         LH    R0,$NUMCPTS         SET LOOP COUNT                   R41
         SLR   WD,WD               CLEAR WORK REG FOR INDEXED 'STC' R41
         SPACE 1                                                    R41
NEXTCPT  ALR   WA,R1               POINT TO NEXT TEMP CPT           R41
         SPACE 1                                                    R41
NMOVECPT CLI   CPTNMAST,X'00'      IF TEMP CPT NOT INIT             R41
         BE    NEXTCPT              GO POINT TO NEXT CPT            R41
         IC    WD,CPTNUM           PICK UP NOMINAL TABLE NUMBER     R41
         STC   WE,MCPTMAP-PCEDSECT(WD,WF)  USE AS OFFSET INTO QUICK R41C
                                            LOCATORS & SAVE OFFSET  R41
         LR    WB,R1               GET TWO COPIES OF LENGTH         R41
         LR    WD,R1                OF CPT FOR LONG MOVE            R41
         MVCL  WC,WA               MOVE TEMP CPT TO PERM STORAGE    R41
         LA    WE,1(,WE)           ADVANCE PERM CPT INDEX           R41
         BCT   R0,NMOVECPT         REPEAT 'TIL ALL VALID CPTS MOVED R41
         SPACE 1                                                    R41
NCPTDONE EQU   *                                                    R41
         SPACE 1                                                    R41
         DROP  WA,WF               DISCARD TEMP ADDRESSABILITY      R41
         EJECT                                                      R41
***********************************************************************
*                                                                     *
*        OBTAIN AND INITIALIZE STORAGE FOR ICES                       *
*                                                                     *
***********************************************************************
         SPACE 3                                                     R4
         ICM   WD,15,NLOGLINE      IF NO SNA                         R4
         BNZ   SKIP1070             LOGICAL LINES,                   R4
         STH   WD,$MAXSESS           SET SESSION COUNT TO ZERO       R4
SKIP1070 LH    R0,$MAXSESS         IF SESSIONS                       R4
         LTR   R0,R0                SPECIFIED,                       R4
         BNM   SKIP1080              BR TO TEST SPECIFICATION        R4
         LTR   R0,WD                  ELSE SET EQUAL TO COUNT        R4
         STH   R0,$MAXSESS              OF LOGICAL LINES             R4
SKIP1080 BZ    NTPRAT              BR IF SESSION COUNT ZERO          R4
         MH    R0,=AL2((ICESIZE+7)/8*8) COMPUTE STORAGE NEEDED      R41
         LR    WB,R0               SAVE STORAGE SIZE FOR MVCL        R4
         SPACE 1                                                     R4
         GETMAIN R,LV=(0)          GET ICES IN TRAY                  R4
         SPACE 1                                                     R4
         LR    WA,R1               WA = START OF ICETRAY             R4
         SLR   WD,WD               WD = ZERO                         R4
         MVCL  WA,WC               CLEAR ICETRAY                     R4
         SPACE 1                                                     R4
         LA    WA,$ICETRAY-(ICEAPCHN-ICEDSECT) FAKE ICEAPCHN         R4
         LH    WB,$MAXSESS         PICK UP COUNT OF ICES             R4
         SPACE 1                                                     R4
         USING ICEDSECT,WA         SHOW ICE ADDRESSABILITY           R4
         SPACE 1                                                     R4
NBLDICE  ST    R1,ICEAPCHN         CHAIN NEW ICE TO OLD              R4
         LR    WA,R1               SAVE OLD ICE ADDRESS FOR CHAINING R4
         LA    R1,((ICESIZE+7)/8*8)(,R1)  BUMP TO NEXT ICE          R41
         BCT   WB,NBLDICE          LOOP FOR ALL ICES                 R4
         SPACE 1                                                     R4
         DROP  WA                  RELEASE ICE ADDRESSABILITY        R4
         EJECT                                                       R4
***********************************************************************
*                                                                     *
*        OBTAIN PERMANENT RAT                                         *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
NTPRAT   LH    WB,$SVROUT          GET LENGTH                        R4
         MH    WB,=AL2(RATTLE)      OF RAT                           R4
         LTR   R1,WB               IF NO REMOTES DEFINED,            R4
         BZ    NRDFRAT              BR TO FREE TEMPORARY STORAGE     R4
         LA    WB,8(,WB)             ELSE GET                        R4
         LR    R0,WB                  PERMANENT                      R4
         GETMAIN R,LV=(0)              RAT STORAGE                   R4
         MVC   0(4,R1),=CL4'RAT'   SET RAT ID
         ST    WB,4(,R1)            AND LENGTH
         SPACE 2
NMOVERAT LA    R1,8(,R1)           GET ADDRESS OF FIRST RAT ELEMENT
         SL    WB,=F'8'            GET LENGTH OF RAT ELEMENTS
         LR    WA,R1               WA = NEW ADDRESS OF RAT
         L     WC,$RAT             WC = CURRENT RAT ADDRESS          R4
         LR    WD,WB               WD = WB = LENGTH OF RAT
         MVCL  WA,WC               MOVE TEMP RAT TO FINAL LOCATION   R4
         EJECT                                                       R4
***********************************************************************
*                                                                     *
*        FREE TEMPORARY RAT, CORRECT DCT RAT ADDRESSES                *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
NRDFRAT  ST    R1,$RATABLE         SET RAT ADDRESS IN HCT            R4
         L     R1,NTMPSTOR         FREE                              R4
         L     R0,0(,R1)            TEMPORARY                        R4
         FREEMAIN R,LV=(0),A=(1)     STORAGE                         R4
         SLR   R0,R0               CLEAR REGISTER                    R4
         ICM   R0,3,$NUMLNES       GET NUMBER OF RJE LINES           R4
         BZ    NRDT                BR IF NONE DEFINED                R4
         L     R1,$RAT             GET DIFFERENCE BETWEEN            R4
         SL    R1,$RATABLE          CURRENT AND TEMPORARY RAT        R4
         L     WB,$LNEDCT          POINT TO 1ST LINE DCT             R4
         SPACE 1                                                     R4
         USING DCTDSECT,WB         PROVIDE DCT ADDRESSABILITY        R4
         SPACE 1                                                     R4
NEXTLINE TM    MDCTSTAT,DCTLEASE   TEST FOR LEASED LINE              R4
         BZ    SKIP1090            BR IF NO                          R4
         OC    MDCTRAT,MDCTRAT     TEST FOR SHARED LINE              R4
         BZ    SKIP1090            BR IF NO                          R4
         L     R15,MDCTRAT          ELSE                             R4
         SLR   R15,R1                ADJUST                          R4
         ST    R15,MDCTRAT            RAT ADDRESS                    R4
SKIP1090 L     WB,DCTCHAIN         POINT TO NEXT LINE DCT            R4
         BCT   R0,NEXTLINE         LOOP THRU ALL LINE DCTS           R4
         SPACE 1                                                     R4
         B     NRDT                EXIT TO NEXT SECTION              R4
         SPACE 1                                                     R4
         DROP  WB                  KILL DCT ADDRESSABILITY           R4
         EJECT                                                       R4
NCRMTDCT NULL                      BUILD REMOTE DEVICE DCT
         USING DCTDSECT,R1         ESTABLISH DCT
         USING RWTDSECT,WB          AND RWT ADDRESSABILITY
         LTR   WA,WA               TEST NUMBER OF DCT'S
         BZR   WE                  EXIT IF ZERO
         LTR   R10,R10             TEST FOR PREVIOUS DCT
         BZ    NCRDCT2             BRANCH IF NO PREVIOUS DCT
         SPACE 2
NCRDCT1  ST    R1,MDCTDCT-DCTDSECT(,R10)  SET REMOTE DEVICE CHAIN    R4
         SPACE 1                                                     R4
NCRDCT2  LR    R10,R1              UPDATE PREVIOUS DCT TO CURRENT
         SLR   WC,WC               CLEAR REGISTERS
         IC    WC,RWTINDEX         GET LOOK-UP TABLE INDEX
         AL    WC,=A($RWL)         GET ADDRESS OF LOOK-UP TABLE ELEMENT
         USING RWLDSECT,WC         ESTABLISH RWL ADDRESSABILITY
         SPACE 1
         MVC   DCTSTAT,RWTSTAT     SET DCT STATUS
         MVC   DCTNO,RATROUTE      SET REMOTE ROUTE CODE
         CLC   RWTROUTE,=X'8000'   TEST REMOTE DEVICE ROUTE CODE
         BE    *+10                BRANCH IF DEFAULT
         MVC   DCTROUTE,RWTROUTE+1  ELSE USE DEVICE ROUTE CODE       R4
         MVC   DCTDEVN,RATNAME     SET UP REMOTE NAME
         MVC   DCTDEVN+1(5),DCTDEVN+3  SHIFT REMOTE NUMBER
         LA    WD,DCTDEVN+1        SEARCH
         LA    WD,1(,WD)            FOR
         CLI   0(WD),C' '            FIRST
         BNE   *-8                    BLANK
         MVI   0(WD),C'.'          ADD PERIOD
         MVC   1(3,WD),RWLNAME     ADD DEVICE NAME
         MVC   MDCTTYPE,RATTYPE    SET TERMINAL TYPE
         L     WD,RATLDCT          GET ADDRESS OF LINE DCT
         LTR   WD,WD               TEST
         BZ    NCRDCT3             BRANCH IF NON-DEDICATED LINE
         TM    MDCTSTAT-DCTDSECT(WD),DCTSHARE TEST FOR SHARED LINE   R4
         BO    NCRDCT3             YES, BR--TREAT AS UNLEASED        R4
         OI    MDCTSTAT,DCTSINON   INDICATE DCT ATTACHED TO LINE DCT
         STCM  WD,7,DCTDCB+1       SET ADDRESS OF LINE DCT IN RMT DCT
         MVC   MDCTLINE,MDCTLINE-DCTDSECT(WD)  SET LINE CHARACTERISTICS
         TM    RATFEAT,DCTPTRSP    TEST TERMINAL FEATURES
         BO    NCRDCT3             BR IF TERMINAL HAS TRANSPARENCY   R4
         NI    MDCTLINE,255-DCTPTRSP  NO, RESET POSSIBLE INDICATION
         EJECT                                                       R4
NCRDCT3  DS    0H                                                    R4
         TM    MDCTTYPE,DCTPSNA    TEST FOR SNA TYPE TERMINAL        R4
         BZ    NCRDCT30            NO, BRANCH - GO INIT FCS/RCB      R4
         MVC   MDCTSEL,RWTSEL      SET MEDIA/SUBADDRESS        @OZ29180
         CLI   MDCTSEL,DCTPOUTB+FMHCARD   TEST FOR             @OZ29180
         BL    NCRDCTNC                   CARD MEDIA           @OZ29180
         CLI   MDCTSEL,DCTPOUTB+FMHCARD+FMHLDANY  BRANCH       @OZ29180
         BH    NCRDCTNC                           IF NOT       @OZ29180
         OI    RATFLAGS,RATCARD    SET CARD INDICATOR          @OZ29180
NCRDCTNC CLI   MDCTSEL,DCTPOUTB+FMHEXCH   TEST FOR             @OZ29180
         BL    NCRDCTNE                   EXCHANGE MEDIA       @OZ29180
         CLI   MDCTSEL,DCTPOUTB+FMHEXCH+FMHLDANY  BRANCH       @OZ29180
         BH    NCRDCTNE                           IF NOT       @OZ29180
         OI    RATFLAGS,RATEXCH    SET EXCHANGE INDICATOR      @OZ29180
NCRDCTNE MVC   MDCTBFSZ,RATBUFSZ   MOVE BUFR (RU) SIZE TO DCT  @OZ29180
         CLI   RWLNAME,C'P'        TEST REMOTE DEVICE TYPE           R4
         BNE   NCRDCT31            BRANCH IF NOT PRINT OR PUNCH      R4
         MVC   MDCTCHSZ,RWTCHSZ    SET CHAIN SIZE AND                R4
         MVC   MDCTCHLM,RWTCHLM        CHAIN LIMIT VALUES IN DCT    R41
         LH    WD,$NUMCPTS         GET NUMBER OF COMPACTION TABLES  R41
         LTR   WD,WD               ANY COMPACTION TABLES            R41
         BNZ   NCRDCT34            YES, CONTINUE RJE INITIALIZATION R41
         NI    RATFEAT,255-DCTPCPCT NO, COMPACTION NOT ALLOWED      R41
         B     NCRDCT31            GO INITIALIZE REST OF RJE VALUES R41
         SPACE 1                                                    R41
NCRDCT34 TM    RATFEAT,DCTPCPCT    IS COMPACTION ALLOWED            R41
         BZ    NCRDCT31            NO, CONTINUE RJE INITIALIZATION  R41
         OI    RATFEAT,DCTPPRES    YES, ASSURE COMPRESSION          R41
         B     NCRDCT31            GO INITIALIZE REST OF RJE VALUES  R4
         SPACE 1                                                     R4
NCRDCT30 DS    0H                                                    R4
         MVC   MDCTFCS,RWLFCS      SET DEVICE FUNCTION CONTROL SEQ  R41
         MVC   MDCTRCB,RWLRCB      SET DEVICE RECORD CONTROL BYTE
         SPACE 1                                                     R4
NCRDCT31 MVC   MDCTFMT,RATFMT      SET TERMINAL FORMAT               R4
         MVC   MDCTFEAT,RATFEAT    SET TERMINAL FEATURES
         NC    MDCTFEAT,RWTFEAT    SET COMMON BSC/SNA FEATURES @OZ29180
         MVC   DCTLRECL,RWTLRECL   SET DEFAULT RECORD LENGTH   @OZ29180
         MVC   MDCTRECL,DCTLRECL   SET RECORD LENGTH           @OZ29180
         TM    MDCTTYPE,DCTPSNA    TEST FOR SNA TERMINAL       @OZ29180
         BZ    NCRDCTNS            BRANCH IF NOT SNA           @OZ29180
         OI    MDCTFEAT,DCTPNDST+DCTPCCTL  ASSUME CARRIAGE CNT @OZ29180
*                                  AND NOT BASIC/EXCHANGE      @OZ29180
         NC    MDCTFEAT,RWTSFEAT   INCLUDE SNA ONLY FEATURES   @OZ29180
         TM    MDCTFEAT,DCTPCCTL   ARE CARRIAGE CNTRLS ALLOWED @OZ29180
         BO    NCRDCTCC            YES, CONTINUE               @OZ29180
         NI    MDCTFEAT,255-DCTPCPCT-DCTPPRES   NO, FORCE NO   @OZ29180
         B     NCRDCTNS            COMPRESSION NO COMPACTION   @OZ29180
NCRDCTCC TM    MDCTFEAT,DCTPCPCT   IS COMPACTION ALLOWED       @OZ29180
         BZ    NCRDCTNS            NO, CONTINUE                @OZ29180
         OI    MDCTFEAT,DCTPPRES   YES, FORCE COMPRESSION      @OZ29180
NCRDCTNS LH    WD,$SVROUT          COMPUTE                     @OZ29180
         LA    WD,1(,WD)            REMOTE                     @OZ29180
         SLR   WD,R0                 NUMBER                          R4
         STH   WD,DCTDEVID         SET REMOTE NUMBER
         MVN   DCTDEVID(1),RWLNAME+2  AND DEVICE NUMBER IN DEVICE ID
         CLI   RWLNAME,C'P'        TEST DEVICE TYPE
         BE    NCRDCT4             BRANCH IF REMOTE PRINTER OR PUNCH
         MVC   DCTFLAGS,RWTFLAGS   SET OPERATOR COMMANDS
*                                  THIS CARD DELETED BY APAR   @OZ29180
         OI    DCTDEVID,DCTRMTID+DCTRDRID  SET REMOTE READER ID
         MVC   DCTPRINT,RATROUTE   SET PRINT DESTINATION
         CLI   RWTPRINT,X'80'      TEST PRINT ROUTE CODE             R4
         BE    NCRDCT32            BR IF INDIRECT ROUTING           R41
         MVC   DCTPRRTE,RWTPRINT+1  ELSE OVERRIDE ROUTE CODE         R4
NCRDCT32 DS    0H                                                   R41
*                                  THIS CARD DELETED BY APAR   @OZ29180
NCRDCT3A CLI   DCTPRRTE,0          TEST FOR REMOTE/LOCAL ROUTING     R4
         BE    NCRDCT3B            BR IF NO                          R4
         TM    DCTFLAGS,DCTPRLCL   TEST FOR SPECIAL LOCAL ROUTING    R4
         BZ    NCRDCT3B            BR IF NO                          R4
         MVI   DCTPRSYS,0           ELSE RESET SYSTEM ID             R4
         SPACE 1                                                     R4
NCRDCT3B CLC   DCTPRSYS,$OWNSYS    TEST FOR ROUTE TO REMOTE          R4
         BNE   SKIP1110            BR IF NO                          R4
         CLC   DCTPRRTE,$NUMRJE+1  TEST FOR VALID REMOTE NUMBER      R4
         BH    NRTEBAD             BR IF NO                          R4
SKIP1110 MVC   DCTPUNCH,RATROUTE   SET PUNCH DESTINATION             R4
         CLI   RWTPUNCH,X'80'      TEST PUNCH ROUTE CODE             R4
         BE    NCRDCT33            BR IF INDIRECT ROUTING           R41
         MVC   DCTPURTE,RWTPUNCH+1  ELSE OVERRIDE ROUTE CODE         R4
NCRDCT33 DS    0H                                                   R41
         EJECT                                                       R4
NCRDCT3C CLI   DCTPURTE,0          TEST FOR REMOTE/LOCAL ROUTING     R4
         BE    NCRDCT3D            BR IF NO                          R4
         TM    DCTFLAGS,DCTPULCL   TEST FOR SPECIAL LOCAL ROUTING    R4
         BZ    NCRDCT3D            BR IF NO                          R4
         MVI   DCTPUSYS,0           ELSE RESET SYSTEM ID             R4
         SPACE 1                                                     R4
NCRDCT3D CLC   DCTPUSYS,$OWNSYS    TEST FOR ROUTE TO REMOTE          R4
         BNE   NCRDCT3E            BR IF NO                          R4
         CLC   DCTPURTE,$NUMRJE+1  TEST FOR VALID REMOTE NUMBER      R4
         BH    NRTEBAD             BR IF NO                          R4
         SPACE 1                                                     R4
NCRDCT3E NI    DCTFLAGS,255-DCTPRLCL-DCTPULCL  CLEAR ANY FLAGS       R4
         MVI   DCTSIAFF,QUESYSAF   SET GLOBAL SYSTEM AFFINITY
         MVI   DCTRAUTH,DCTREJRM   SET REMOTE COMMAND AUTHORITY
         MVC   DCTJCLAS(4),RWTJCLAS  SET CLASSES AND PRIORITY VALUES
         L     WD,CVTPTR           GET ADDRESS OF CVT
         L     WD,CVTSMCA-CVTDSECT(,WD)  GET ADDRESS OF SMCA
         MVC   DCTINDC,SMCAOPT-SMCA(WD)  SET BACKGROUND SMF OPTIONS  R4
         ICM   R1,7,DCTCHAIN+1     GET ADDRESS OF NEXT DCT           R4
         LA    WB,RWTRDEND         GET ADDRESS OF NEXT RWT ELEMENT
         BCT   WA,NCRDCT1          BUILD ADDITIONAL READER DCT'S
         BR    WE                   AND RETURN WHEN DONE
         SPACE 1                                                     R4
NRTEBAD  STM   R14,R12,12(R13)     SAVE REGISTERS                    R4
         L     R1,=A(NRTEMSG)      POINT TO MESSAGE TEXT             R4
         MVC   NRTEDEV-NRTEMSG(,R1),DCTDEVN  SET DEVICE NAME         R4
        $$WTO  (R1)                ISSUE ERROR MESSAGE TO OPERATOR   R4
         LM    R14,R12,12(R13)     RESTORE REGISTERS                 R4
         MVI   NRJEXIT+1,0         FORCE QUIT AFTER TESTING ALL RDRS R4
         B     NCRDCT3E            BR TO TEST NEXT READER            R4
         EJECT                                                       R4
NCRDCT4  OI    DCTDEVID,DCTRMTID+DCTPRTID  SET REMOTE PRINTER ID     R4
         CLI   RWLNAME+1,C'R'      TEST DEVICE TYPE
         BNE   NCRDCT4A            BR IF NOT REMOTE PRINTER          R4
         L     WC,DCTEWF           POINT TO PCE                      R4
         LA    WD,$IMAGTCB         STORE ADDR OF HASPIMAG      @OZ26939
         ST    WD,PRIMGDTE-PCEDSECT(,WC) SUBTASK DTE INTO PCE  @OZ26939
         MVI   PDEVTYPE+3-PCEDSECT(WC),X'08' PSEUDO 1403 WITHOUT UCS R4
         TM    RWTPPFL,DCTRMFCB              TEST FOR 3211           R4
         BZ    NCRDCT5                       BR IF NO                R4
         MVI   PDEVTYPE+3-PCEDSECT(WC),X'09' PSEUDO 3211 WITHOUT UCS R4
         B     NCRDCT5             BR TO CONTINUE                    R4
         SPACE 1                                                     R4
NCRDCT4A NI    DCTDEVID,255-DCTPRTID  CONVERT REMOTE PRINTER ID      R4
         OI    DCTDEVID,DCTPUNID       TO REMOTE PUNCH ID
         SPACE 1                                                     R4
*                                  THIS CARD DELETED BY APAR   @OZ29180
NCRDCT5  MVC   DCTFORMS(12),RWTFORMS  SET FORMS, FCB, AND UCS  @OZ29180
         MVC   DCTDCPTN(1),RWTDCPTN SET DEFAULT CPT NUMBER          R41
         CLI   DCTFORMS,0          TEST FOR FORMS ID                 R4
         BNE   SKIP1130            BR IF PRESENT                     R4
         MVC   DCTFORMS,$STDFORM    ELSE SUPPLY DEFAULT              R4
SKIP1130 CLI   DCTFCB,0            TEST FOR FCB ID                   R4
         BNE   SKIP1140            BR IF PRESENT                     R4
         MVC   DCTFCB,$PRTFCB       ELSE SUPPLY DEFAULT              R4
SKIP1140 CLI   DCTUCS,0            TEST FOR UCS ID                   R4
         BNE   SKIP1150            BR IF PRESENT                     R4
         MVC   DCTUCS,$PRTUCS       ELSE SUPPLY DEFAULT              R4
SKIP1150 MVC   DCTPPFL(2),RWTPPFL  SET FLAGS AND SWITCHES
         SPACE 1                                                     R4
NCRDCTCL MVC   DCTCLASS(*-*),RWTCLASS  SET OUTPUT CLASSES            R4
         LA    WC,DCTCLASS(WF)     SET CLASS LIST                    R4
         MVI   0(WC),C' '           TERMINATOR                       R4
         ICM   R1,7,DCTCHAIN+1     GET ADDRESS OF NEXT DCT           R4
         LA    WB,RWTPPEND         GET ADDRESS OF NEXT RWT ELEMENT
         BCT   WA,NCRDCT1          BUILD ADDITIONAL PRINT/PUNCH DCT'S
         BR    WE                   AND RETURN WHEN DONE
         SPACE 1                                                     R4
         DROP  R1,WB,WC,WG,R15     KILL ADDRESSABILITY               R4
         TITLE 'HASP INITIALIZATION -- REMOTE DESTINATION TABLE INITIALC
               IZATION'                                              R4
***********************************************************************
*                                                                     *
*        COMPLETE REMOTE DESTINATION TABLE INITIALIZATION             *
*                                                                     *
* NOTE   REGISTER WB DESTROYED BY DESTINATION VERIFICATION ROUTINE    *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
         USING $SVDSECT,WG         PROVIDE SSVT ADDRESSABILITY       R4
         SPACE 1                                                     R4
NRDT     L     WG,$SSVT            GET SSVT ADDRESS                  R4
         LA    R1,$SVROUTM+$MAXRJE POINT TO REMOTE MASK TABLE END    R4
         LA    R0,$MAXRJE          SET NUMBER                        R4
         SPACE 1                                                     R4
SKIP1160 STC   R0,0(,R1)           SET REMOTE NUMBER                 R4
         BCTR  R1,0                REDUCE BY 1                       R4
         BCT   R0,SKIP1160         LOOP                              R4
         SPACE 1                                                     R4
         ICM   R1,15,$SVRDT        POINT TO START OF OLD RDT         R4
         BZ    NGETRDT             BR IF NONE                        R4
         SL    R1,=F'8'             ELSE BACK UP TO EYE CATCHER      R4
         L     R0,4(,R1)           FREE                              R4
         ICM   R0,8,=AL1(241)       OLD                              R4
         FREEMAIN R,LV=(0),A=(1)     RDT                             R4
         SPACE 1                                                     R4
NGETRDT  LA    WC,$NDQ-(NDQNDQ-NDQ)  PREPARE TO SCAN NDQS            R4
         SLR   WD,WD               ZERO COUNTER                      R4
         SPACE 1                                                     R4
         USING RDTDSECT,WF         PROVIDE RDT ADDRESSABILITY        R4
         USING NDQDSECT,WC         PROVIDE NDQ ADDRESSABILITY        R4
         SPACE 1                                                     R4
NGETRDTL ICM   WC,15,NDQNDQ        POINT TO NEXT NDQ                 R4
         BZ    NGETRDTS            EXIT IF END                       R4
         LA    WD,1(,WD)           INCREMENT COUNTER                 R4
         B     NGETRDTL            LOOP                              R4
         SPACE 1                                                     R4
NGETRDTS MH    WD,=Y(RDTSIZ)       CALCULATE SIZE                    R4
         LA    WD,8(,WD)            OF RDT AREA                      R4
         LR    R0,WD               OBTAIN                            R4
         ICM   R0,8,=AL1(241)       NEW                              R4
         GETMAIN R,LV=(0)            RDT                             R4
         MVC   0(4,R1),=CL4'RDT'   SET EYE CATCHER                   R4
         ST    WD,4(,R1)           SAVE RDT LENGTH                   R4
         ALR   WD,R1               POINT TO RDT END                  R4
         LA    WE,8(,R1)           POINT TO RDT                      R4
         LR    WF,WE               COPY                              R4
         SH    WF,=Y(RDTSIZ)       BACK UP ONE                       R4
         STM   WE,WF,$SVRDT        SET START AND END VALUES          R4
         EJECT                                                       R4
NSETRDT  ICM   WC,15,$NDQ          POINT TO NEXT NDQ                 R4
         BZ    NFINRDT             BR IF NO MORE                     R4
         LA    WF,RDTSIZ(,WF)      POINT TO NEXT RDT                 R4
         MVC   RDTNAME,NDQNAME     COPY NAME                         R4
         MVI   RDTFLAG,0           ZERO FLAGS                        R4
         LA    R1,NDQDEST          POINT TO NAME                     R4
         SLR   WA,WA               ZERO ANSWER REGISTER              R4
         IC    WA,$SVTOSYS         GET SYSTEM ID                     R4
         LR    R11,WG              RELOAD SSVT ADDRESS               R4
         L     R15,$SVDEST         POINT TO DESTINATION VERIFY RTN   R4
         BALR  LINK,R15            ENTER IT                          R4
         B     NFNDQRDT            LEAVE DEFAULT ROUTING IF ERR   +0 R4
         STC   WA,RDTRMTNO         SET REMOTE/UNIT NUMBER         +4 R4
         CLI   NDQDEST,C'U'        DID USER SAY UNIT...              R4
         BNE   NRMTRDT             BR IF NO                          R4
         MVI   RDTFLAG,RDTFLAGU    SET TO LOAD NODE ZERO AND UNIT    R4
         B     NFNDQRDT            FREE THE NDQ                      R4
         SPACE 1                                                     R4
NRMTRDT  CLI   RDTRMTNO,0          TEST FOR REMOTE                   R4
         BE    NFNDQRDT            BR IF NO                          R4
         OI    RDTFLAG,RDTFLAGR    SET TO LOAD REMOTE                R4
         SPACE 1                                                     R4
NFNDQRDT L     BASE1,$SVHCT        RESTORE HCT ADDRESS IN BASE1      R4
         MVC   $NDQ,NDQNDQ         DE-CHAIN NDQ                      R4
         LA    R0,NDQSIZ           FREE DESTINATION                  R4
         ICM   R0,8,=AL1(229)       QUEUE ELEMENT                    R4
         FREEMAIN R,LV=(0),A=(WC)    STORAGE                         R4
         B     NSETRDT             LOOP                              R4
         SPACE 1                                                     R4
NFINRDT  ST    WF,$SVRDTE          SET END OF RDT                    R4
         LA    R1,$SVROUTM+1       POINT TO REMOTE 1 MASK BYTE       R4
         LH    R0,$SVROUT          GET NUMBER OF REMOTES             R4
         XC    $SVROUTM,$SVROUTM   CLEAR REMOTE MASK BYTES           R4
         LTR   R0,R0               TEST NUMBER OF REMOTES            R4
         BZ    NRJEEND             BR OF NONE DEFINED                R4
         L     WA,$RATABLE         POINT TO 1ST RAT ELEMENT          R4
         SPACE 1                                                     R4
NRDTMASK MVC   0(1,R1),RATROUTE+1-RATDSECT(WA)  MOVE RAT'S ROUTE CODER4
         LA    WA,RATTLE(,WA)      POINT TO NEXT RAT                 R4
         LA    R1,1(,R1)           POINT TO NEXT MASK BYTE           R4
         BCT   R0,NRDTMASK         LOOP THRU ALL REMOTES             R4
         SPACE 1                                                     R4
         B     NRJEEND             EXIT TO NEXT SECTION              R4
         SPACE 1                                                     R4
         DROP  WC,WF               KILL NDQ, RDT ADDRESSABILITY      R4
         DROP  WG                  KILL SSVT ADDRESSABILITY          R4
         EJECT                                                       R4
         LTORG                     DEFINE LITERALS FOR RJE INIT
         SPACE 3
NRJEEND  NULL                      END OF RJE INITIALIZATION
         TITLE 'HASP INITIALIZATION -- MISCELLANEOUS INITIALIZATION'
NWRAPUP  BALR  BASE2,0             RE-ESTABLISH                      R4
         USING *,BASE2              LOCAL ADDRESSABILITY
         SPACE 1                                                     R4
***********************************************************************
*                                                                     *
*        INITIALIZE COMMAND PROCESSOR EXTENDED AREA                   *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
         L     WA,CVTPTR           POINT TO CVT
         L     WA,CVTCUCB-CVT(,WA) THEN TO UCM
         LM    WD,WF,UCMVEA-UCM(WA) PICK UP FIRST, LENGTH, LAST UCME
         LR    R1,WF               COPY LAST
         ALR   R1,WE               UP TO BEYOND
         SLR   R0,R0               ZERO HIGH PART
         SLR   R1,WD               GET LENGTH OF ALL UCMES
         DR    R0,WE               GET NUMBER OF OS CONSOLES
         LR    WD,R1               COPY FOR BUILDER
         MH    R1,=Y(COMCONL)      GET LENGTH OF REDIRECTION ELEMENTS
         LA    R0,COMRESP-COMDSECT(0,R1) SET LENGTH OF AREA
         LR    WF,R0               COPY FOR BUILDER
         GETMAIN R,LV=(0)          GET STORAGE FOR EXTENDED AREA
         LR    WE,R1               COPY
         LR    R0,R1               COPY ORG
         LR    R1,WF               COPY LENGTH
         SLR   WB,WB               ZERO SOURCE LENGTH
         MVCL  R0,WA               CLEAR WORK AREA
         L     R1,$COMMPCE         POINT TO COMMAND PROCESSOR PCE    R4
         ST    WE,COMEXTEN-PCEDSECT(,R1) SET POINTER
         STH   WD,COMCONNO-PCEDSECT(,R1) SET NUMBER OF CONSOLES
         USING COMDSECT,WE
         STH   WD,COMOCON          SET NUMBER OF CONSOLES
         MVC   COMLCON,=Y(COMCONL) SET LENGTH OF GROUP OF ELEMENTS
         LA    R1,1                SET FIRST CONSOLE ID
         LA    WA,COMRESP          POINT TO FIRST ELEMENT
         SPACE 1                                                     R4
ICOMXL   LA    R0,COMCONL/2        SET NUMBER OF ELEMENTS/GROUP
         SPACE 1                                                     R4
ICOMXLA  STC   R1,COMCON(,WA)      STORE CONSOLE IN ELEMENT
         LA    WA,2(,WA)           UP TO NEXT ELEMENT
         BCT   R0,ICOMXLA          LOOP FOR ALL ELEMENTS IN GROUP
         SPACE 1                                                     R4
         LA    R1,1(,R1)           UP TO NEXT CONSOLE
         BCT   WD,ICOMXL           LOOP FOR ALL CONSOLES
         SPACE 1                                                     R4
         L     WG,$HASPMAP         POINT TO HASP MODULE MAP          R4
         SPACE 1                                                     R4
         USING MAPDSECT,WG         PROVIDE MOD MAP ADDRESSABILITY    R4
         EJECT                                                       R4
         LOAD  EP=IEE7603D         LOCATE VERIFICATION MODULE
         ST    R0,COMVERIF         SET ENTRY TO VERIFICATION ROUTINE
         DROP  WE
         DELETE EP=IEE7603D        DELETE VERIFICATION MODULE        R4
         LA    WA,$WTOPECB         POINT TO TERMINATION ECB
         LA    WD,NHASPBR1         ADDRESS OF DUMMY TASK
         L     WE,MAPWTOA          POINT TO $HASPWTO ENTRY POINT     R4
         BAL   WF,NATTACH          ATTACH WTO SUBTASK                R4
         ST    WE,$WTOTCBA         SET TCB ADDRESS FOR WITHDRAW      R4
* LOAD HASP SMF USER EXITS INTO MEMORY, IF THEY EXIST
         L     WF,$SSVT            ADDRESS OF SSVT
         USING SSVT,WF             SSVT ADDRESSABILITY
         LOAD  EP=IEFUSO,ERRET=NUSOBAD LOAD USO IF IT EXISTS
         ST    R0,$SVSMFSO         PUT ADDR. INTO SSVT SLOT
         DELETE EP=IEFUSO          DELETE USO                        R4
         SPACE 1                                                     R4
NUSOBAD  CLI   $NUMSMFB,2          TEST SMF OPTION                   R4
         BL    NOSMF               BR IF NOT SELECTED                R4
         LOAD  EP=IEFUJP,ERRET=NUJPEXIT      LOAD UJP IF POSSIBLE
         ST    R0,$SVSMFJP         PUT ADDR. INTO SSVT SLOT
         DELETE EP=IEFUJP          DELETE UJP                        R4
         EJECT                                                       R4
NUJPEXIT NULL
         LA    WD,NSMFNAM          POINT TO HASPSMF NAME
         L     WE,MAPACCTA         POINT TO HASPSMF ENTRY POINT      R4
         LA    WA,$PSMFECB         POINT TO TERMINATION ECB          R4
         BAL   WF,NATTACH          ATTACH ACCOUNTING SUBTASK         R4
         ST    WE,$SMFTCBA         SET TCB ADDRESS FOR WITHDRAW      R4
         USING SMFDSECT,R1
        $GETSMFB WAIT=YES          GET SMF BUFFER FOR RECORD TYPE 43
         MVI   SMFRDW+1,SMF43END-SMFRDW      LENGTH OF START HASP SMF
         MVI   SMFHDRTY,SMFSSSTP   START HASP SUBSYSTEM SMF RECORD TYPE
         MVC   SMFSSID,NSMFHASP    PUT HASP SUBSYSTEM ID IN RECORD 4
         MVI   SMFSSLEN+1,SMF43END-SMF43RV1  LENGTH OF SUBSYSTEM PART
         MVC   SMF43OPT,$OPTSTAT   HASP OPTIONS
        $QUESMFB                   WRITE RECORD TYPE 43
         DROP  R1,WF               KILL SMF, SSVT ADDRESSABILITY     R4
         SPACE 1                                                     R4
NOSMF    NULL                                                        R4
         LA    WD,NIMGNAM          POINT TO HASPIMAG NAME
         L     WE,MAPIMAGA         POINT TO HASPIMAG ENTRY POINT     R4
         LA    WA,$PIMGECB         POINT TO TERMINATION ECB          R4
         BAL   WF,NATTACH          ATTACH IMAGE LOADER SUBTASK       R4
         ST    WE,$IMAGTCB         SET TCB ADDRESS FOR WITHDRAW      R4
         SPACE 1                                               @OZ20685
         LA    WD,NALOCNAM         PT TO HOSALLOC NAME         @OZ20685
         L     WE,MAPALOCA         PT TO HOSALLOC E. P.        @OZ20685
         LA    WA,$PDYNECB         PT TO TERMINATION ECB       @OZ20685
         BAL   WF,NATTACH          ATTACH ALLOCATION TASK      @OZ20685
         ST    WE,$DYNTCBA         SET TCB ADDRESS             @OZ20685
         SPACE 3                                                     R4
         L     WD,NLOGLINE         PICK UP NO. OF VTAM LOGICAL LINES R4
         LTR   WD,WD               TEST FOR NONE SPECIFIED           R4
         BZ    NIRBUILD            BR IF NONE TO NEXT SECTION        R4
         LA    WA,$PSNAECB         GET ADDR OF TERMINATION ECB       R4
         LA    WD,NVTAMNAM         PICK UP VTAM SUBTASK NAME TO BE   R4
         L     WE,MAPVTAMA          ASSOC. WITH ENTRY POINT ADDR     R4
         BAL   WF,NATTACH          ATTACH VTAM API SUBTASK           R4
         ST    WE,$SNATCBA         SET TCB ADDRESS FOR WITHDRAW      R4
         B     NIRBUILD            THEN BR TO NEXT SECTION           R4
         EJECT                                                       R4
         SPACE 1                                                     R4
         DROP  WG                  KILL MOD MAP ADDRESSABILITY       R4
NATTACH  IDENTIFY EPLOC=(WD),ENTRY=(WE)  IDENTIFY SUBTASK CODE       R4
         LR    R1,BASE1            GIVE HCT ADDRESS TO SUBTASK       R4
         CLC   NIMGNAM,0(WD)       CHECK FOR HASPIMAG ATTACH   @OZ26939
         BNE   *+8                 BR IF NO, BYPASS DTE LOAD   @OZ26939
         LA    R1,$IMAGTCB         LOAD ADDRESS OF IMAGE TCB   @OZ26939
         ATTACH EPLOC=(WD),SM=SUPV,ECB=(WA)  ATTACH SUBTASK          R4
         LR    WE,R1               SAVE TCB ADDRESS                  R4
         WAIT  ECB=(WA)            WAIT FOR SUBTASK TO ENTER         R4
         OC    1(3,WA),1(WA)       TEST ATTACH                       R4
         BNZ   NEWTO               BR IF UNSUCCESSFUL                R4
         MVI   0(WA),0              ELSE RESET TERMINATION ECB       R4
         BR    WF                    AND RETURN                      R4
         SPACE 1                                                     R4
NEWTO    L     R1,=A(NEWTOM)                POINT TO MESSAGE         R4
         UNPK  NEWTOV-NEWTOM(7,R1),1(4,WA)  SPREAD DIGITS            R4
         TR    NEWTOV-NEWTOM(,R1),NEWTOT    MAKE PRINTABLE           R4
         MVC   NEWTON-NEWTOM(,R1),0(WD)     SET MODULE NAME          R4
        $$WTO  (R1)                ISSUE WARNING MESSAGE TO OPERATOR R4
         BR    WF                  THEN RETURN                       R4
         EJECT                                                       R4
NEWTOT   EQU   *-C'0'
         DC    C'0123456789ABCDEF'
NHASPBR1 DC    CL8'HASPWTO'        HASP WTO TASK NAME
NSMFNAM  DC    CL8'HASPACCT'       HASPACCT MODULE NAME
NIMGNAM  DC    CL8'HASPIMAG'       MODULE NAME FOR HASPIMAG
NVTAMNAM DC    CL8'HASPVTAM'       HASP VTAM API SUBTASK NAME        R4
NALOCNAM DC    CL8'HOSALLOC'       ALLOCATION MODULE NAME      @OZ20685
NSMFHASP DC    AL2(SMFHSPID)       SMF SUBSYSTEM ID FOR HASP
         SPACE 3
         LTORG                     DEFINE LITERALS FOR MISC INIT
         TITLE 'HASP INITIALIZATION -- INTERNAL READER BUILD'
***********************************************************************
*                                                                     *
*        (RE-)INITIALIZE INTERNAL READER DCTS                         *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
NIRBUILD BALR  BASE2,0             RE-ESTABLISH
         USING *,BASE2              LOCAL ADDRESSABILITY.
         USING $SVDSECT,R7         PROVIDE SSVT ADDRESSABILITY       R4
         SPACE 1                                                     R4
         L     R7,$SSVT            POINT TO SSVT                     R4
         SLR   R3,R3               GET COUNT OF JOB                  R4
         IC    R3,$NUMINRS          INTERNAL READERS                 R4
         L     R2,$SVIRDRS         POINT TO EXISTING INRS (IF ANY)   R4
         S     R2,=F'8'            POINT TO DCT STORAGE PREFIX       R4
         BP    NIRSTAT             BR IF VALID                       R4
         SPACE 1                                                     R4
***********************************************************************
*                                                                     *
*        NO OLD INTERNAL READER DCTS -- CREATE INITIAL ONES           *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
         BAL   WE,NIRSETUP         GET DCT STORAGE, SET UP REGS      R4
         B     NIRINIT             BR TO INITIALIZE ALL INR DCTS     R4
         SPACE 1                                                     R4
NIRSTAT  TM    $SVHASP,X'80'       TEST FOR JES2 RESTART             R4
         BZ    NIRREBLD            BR IF NO TO REBUILD DCTS          R4
         SPACE 1                                                     R4
***********************************************************************
*                                                                     *
*        JES2 RESTART -- RE-USE EXISTING INTERNAL READER DCTS         *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
         BAL   WE,NIRREGS          SET UP REGS FOR DCT RESET         R4
         STCM  R2,7,DCTCHAIN+1-DCTDSECT(R3)  ADD INR DCTS TO DCT CHN R4
         SPACE 1                                                     R4
         USING DCTDSECT,R2         PROVIDE DCT ADDRESSABILITY        R4
         SPACE 1                                                     R4
NIRRESET LR    R3,R2               SAVE CURRENT DCT ADDRESS          R4
         ST    R2,PCEDCT-PCEDSECT(,R4)   SET DCT ADDR IN PCE   @OZ32566
         ST    R4,DCTEWF                 SET PCE ADDRESS IN DCT      R4
         NI    DCTSTAT,255-DCTINUSE      RESET DCT IN-USE STATUS     R4
         ICM   R2,7,DCTCHAIN+1           POINT TO NEXT DCT           R4
         L     R4,PCENEXT-PCEDSECT(,R4)  POINT TO NEXT PCE           R4
         BCT   R0,NIRRESET         LOOP THRU ALL INTERNAL RDR DCTS   R4
         SPACE 1                                                     R4
         STCM  R0,7,DCTCHAIN+1-DCTDSECT(R3)  TERMINATE DCT CHAIN     R4
         B     NXEQDCT             BR TO SET REQUEST-JOB-ID DCT      R4
         EJECT                                                       R4
***********************************************************************
*                                                                     *
*        RESTART AFTER $PJES2 -- RE-CREATE JOB INTERNAL READER DCTS   *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
NIRREBLD L     R0,4(,R2)           GET COUNT OF EXISTING INR DCTS    R4
         BCTR  R0,0                 LESS TWO FOR                     R4
         BCTR  R0,0                  STC AND TSU                     R4
         MH    R0,=Y(RIDCTEND-DCTDSECT)  STORAGE FOR OLD JOB INRS    R4
         ICM   R0,8,NINRMASK       GET INR DCT STORAGE SUBPOOL       R4
         L     R1,$SVIRDRS         POINT TO EXISTING STC INR DCT     R4
         ICM   R1,7,DCTCHAIN+1-DCTDSECT(R1)  POINT TO OLD TSU INR    R4
         ICM   R1,7,DCTCHAIN+1-DCTDSECT(R1)  POINT TO OLD JOB INRS   R4
         BZ    NIRJINRS            BR IF NO EXISTING JOB INR DCTS    R4
         FREEMAIN R,LV=(0),A=(1)    ELSE FREE OLD JOB INR DCTS       R4
         SPACE 1                                                     R4
NIRJINRS LA    R15,NIRSETUP        ASSUME NEW JOB INTERNAL READERS   R4
         LTR   R3,R3               TEST ASSUMPTION                   R4
         BNZ   SKIP1210            BR IF VALID                       R4
         LA    R15,NIRREGS          ELSE SET UP FOR NO NEW JOB INRS  R4
SKIP1210 BALR  WE,R15              GET DCT STORAGE AND/OR SET UP REGSR4
         NI    DCTSTAT,255-DCTINUSE  RESET STC INTERNAL              R4
         BAL   LINK,NINRINIT          READER DCT                     R4
         NI    DCTSTAT,255-DCTINUSE    AND TSU INTERNAL              R4
         BAL   LINK,NINRINIT            READER DCT                   R4
         LR    R2,R1               POINT TO 1ST NEW JOB INR DCT      R4
         SPACE 1                                                     R4
NIRINIT  BALR  LINK,0              SET RETURN ADDRESS FOR NINRINIT   R4
         MVC   0(RIDCTEND-DCTDSECT,R2),NINRDCT  BUILD BASIC DCT      R4
         B     NINRINIT            BR TO COMPLETE DCT INITIALIZATION R4
         EJECT                                                       R4
***********************************************************************
*                                                                     *
*        NIRSETUP -- OBTAIN STORAGE FOR NEW INTERNAL READER DCTS      *
*                                                                     *
*        NIRREGS  -- (RE)SET INTERNAL READER DCT STORAGE PREFIX       *
*                 -- LOCATE AND OF CURRENT DCT CHAIN                  *
*                 -- LOCATE 1ST INTERNAL READER PCE                   *
*                                                                     *
* INPUT  R3    - COUNT OF NEW JOB INTERNAL READERS                    *
*                                                                     *
* OUTPUT R0    - COUNT OF TOTAL INTERNAL READERS                      *
*        R3    - ADDR OF LAST DCT ON CURRENT DCT CHAIN                *
*        R4    - ADDR OF 1ST INTERNAL READER PCE                      *
*        WE    - RETURN ADDRESS                                       *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
NIRSETUP LR    R0,R3               RELOAD NEW JOB INR COUNT          R4
         ICM   R2,15,$SVIRDRS      TEST FOR EXISTING INR DCTS        R4
         BNZ   SKIP1220            BR IF YES                         R4
         LA    R0,2(,R3)            ELSE ALLOW FOR STC AND TSU       R4
SKIP1220 MH    R0,=Y(RIDCTEND-DCTDSECT)  INR DCT STORAGE REQ'T       R4
         BNZ   SKIP1230            BR IF EXISTING INR DCTS           R4
         AL    R0,NINRMASK         ALLOW FOR DCT STORAGE PREFIX      R4
SKIP1230 ICM   R0,8,NINRMASK       SET DCT STORAGE SUBPOOL           R4
         GETMAIN R,LV=(0)          GET DCT STORAGE                   R4
         S     R2,=F'8'            POINT TO OLD DCT STORAGE PREFIX   R4
         BP    SKIP1240            BR IF VALID ADDRESS               R4
         LR    R2,R1                ELSE NEW STORAGE HAS PREFIX      R4
SKIP1240 MVC   0(4,R2),=CL4'IDCT'  SET DCT STORAGE IDENTIFIER        R4
         SPACE 1                                                     R4
NIRREGS  LA    R3,1(,R3)           SAVE COUNT                        R4
         ST    R3,NINRDCTS          OF DCTS + 1                      R4
         LA    R0,1(,R3)           SET NEW DCT COUNT                 R4
         ST    R0,4(,R2)            IN DCT STORAGE PREFIX            R4
         LA    R2,8(,R2)           POINT TO STORAGE FOR 1ST INR DCT  R4
         ST    R2,$SVIRDRS         SET POINTER IN SSVT               R4
         ST    R2,$INRDCT           AND IN HCT                       R4
         LA    R4,$DCTPOOL-(DCTCHAIN-DCTDSECT)  PREPARE TO SCAN DCTS R4
         SPACE 1                                                     R4
SKIP1250 LR    R3,R4                        LOCATE END               R4
         ICM   R4,7,DCTCHAIN+1-DCTDSECT(R4)  OF CURRENT              R4
         BNZ   SKIP1250                       DCT CHAIN              R4
         SPACE 1                                                     R4
         LA    R4,$PCEORG-(PCENEXT-PCEDSECT)  PREPARE TO SCAN PCES   R4
         SPACE 1                                                     R4
SKIP1260 L     R4,PCENEXT-PCEDSECT(,R4)    LOCATE 1ST                R4
         CLI   PCEID-PCEDSECT(R4),PCEINRID  INTERNAL                 R4
         BNE   SKIP1260                      RDR PCE                 R4
         SPACE 1                                                     R4
         BR    WE                  RETURN TO CALLER                  R4
         EJECT                                                       R4
***********************************************************************
*                                                                     *
*        NINRINIT -- FINISH BUILDING A DCT                            *
*                                                                     *
*        R0    - COUNT OF REMAINING DCTS, DECREMENTED ON RETURN       *
*        R2    - ADDR OF CURRENT DCT, UPDATED ON RETURN               *
*        R3    - ADDR OF PREVIOUS DCT, UPDATED ON RETURN              *
*        R4    - ADDR OF CURRENT PCE, UPDATED ON RETURN               *
*        LINK  - RETURN ADDRESS                                       *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
NINRINIT STCM  R2,7,DCTCHAIN+1-DCTDSECT(R3)  SET DCT CHAIN ADDRESS   R4
         ST    R2,PCEDCT-PCEDSECT(,R4)  SET DCT ADDRESS IN PCE @OZ32566
         ST    R4,DCTEWF           SET $POST ADDRESS                 R4
         LA    R5,RIDECB           SET ADDRESS OF
         ST    R5,RIDECBP           INTERNAL READER ECB
         MVC   DCTSYS,$OWNSYS      SET SYSTEM ID                     R4
         CL    R0,NINRDCTS         TEST                              R4
         BL    NIRINIT2            BRANCH IF NORMAL INTERNAL READER
         MVC   DCTROUTE(2),=XL4'00'  RESET ROUTE CODE/OPERATOR FLGS R41
         MVC   DCTDEVN,=CL8'STCINRDR'  SET STC INRDR DEVICE NAME
         MVC   DCTSIAFF,$SIDAFF    FORCE INPUT CPU AFFINITY
         MVC   DCTPRINT(4),=XL4'00'  RESET PRINT AND PUNCH DESTINATIONS
         MVC   DCTPRSYS,$OWNSYS       TO LOCAL PRINTERS              R4
         MVC   DCTPUSYS,$OWNSYS        AND PUNCHES                   R4
         MVC   DCTPRINC(2),=XL2'0F0F'  SET PRIORITY FIELDS
         MVI   DCTRAUTH,0          RESET COMMAND AUTHORIZATION
         BE    NIRINIT1            BRANCH IF LOGON INTERNAL READER
         MVI   DCTJCLAS,CATSTCCL   SET STC JOB CLASS
NSTCMCLS EQU   *+1,1               STC MSGCLASS
         MVI   DCTMCLAS,C'A'       SET STC MSGCLASS
         MVC   RIDJOBID(3),DCTDEVN  RESET JOBID HEADER
         B     NIRINIT2            GET NEXT INTERNAL READER
         SPACE 1                                                     R4
NIRINIT1 MVC   DCTDEVN(3),=CL3'TSO'  RESET DEVICE NAME HEADER
         MVI   DCTJCLAS,CATTSUCL   SET TSU JOB CLASS
NTSUMCLS EQU   *+1,1               TSU MSGCLASS
         MVI   DCTMCLAS,C'A'       SET TSU MSGCLASS
         L     R5,CVTPTR           GET ADDRESS OF CVT                R4
         L     R5,CVTSMCA-CVT(,R5) GET ADDRESS OF SMCA               R4
         MVC   DCTINDC,SMCAFOPT-SMCA(R5)  SET FOREGROUND SMF OPTIONS R4
         MVC   RIDJOBID(3),=CL3'TSU'  RESET JOBID HEADER
         SPACE 1                                                     R4
NIRINIT2 LR    R3,R2               SAVE DCT ADDRESS
         LA    R2,RIDCTEND         GET ADDRESS OF NEXT INTRDR DCT
         L     R4,PCENEXT-PCEDSECT(,R4)  AND OF NEXT INTRDR PCE      R4
         BCTR  R0,LINK             RETURN IF ANOTHER DCT             R4
         SPACE 1                                                     R4
         STCM  R0,7,DCTCHAIN+1-DCTDSECT(R3)  TERMINATE DCT CHAIN
         TITLE 'HASP INITIALIZATION -- REQUEST JOB DCT INITIALIZATION'
         SPACE 1                                                     R4
***********************************************************************
*                                                                     *
*        CREATE REQUEST-JOB-ID DCT                                    *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
NXEQDCT  LA    WB,DCTRDEND-DCTDSECT  SPACE NEEDED FOR RDR DCT        R4
         SPACE 1                                                     R4
         GETMAIN R,LV=(WB)         GET STORAGE FOR DCT               R4
         SPACE 1                                                     R4
         SLR   R5,R5               SETUP                             R4
         LR    R2,R1                 FOR MVCL                        R4
         MVCL  R2,R4                   TO CLEAR AREA                 R4
         SPACE 1                                                     R4
         ST    R1,$XEQDCT          STORE DCT ADDRESS IN HCT          R4
         LR    R2,R1               RELOAD DCT BASE REGISTER          R4
         SPACE 1                                                     R4
         MVI   DCTDEVTP,DCTRDR     USE READER DEVICE TYPE            R4
         MVC   DCTDEVN,=CL8'STCJOBID' SET DEVICE NAME IN DCT         R4
         MVI   DCTDEVID,DCTRDRID   SET READER DEVICE ID              R4
         MVC   DCTSIAFF,$SIDAFF    SET AFFINITY FOR THIS SYSTEM      R4
         MVI   DCTJCLAS,CATSTCCL   USE STC CLASS FOR REQUEST JOBID   R4
         MVI   DCTMCLAS,C'A'         AND MSGCLASS = A                R4
         MVI   DCTPRLIM,15         LIMIT PRIORITY IS 15              R4
         L     WC,CVTPTR           GET CVT ADDRESS                   R4
         L     WC,CVTSMCA-CVTDSECT(,WC)  GET SMCA ADDRESS FROM CVT   R4
         MVC   DCTINDC,SMCAOPT-SMCA(WC)  SET BACKGROUND SMF OPTIONS  R4
         MVC   DCTPRSYS,$OWNSYS    SET PRINT AND PUNCH               R4
         MVC   DCTPUSYS,$OWNSYS     ROUTING DESTINATIONS             R4
         B     NINEXT              PROCEED TO NEXT FUNCTION
         SPACE 1                                                     R4
         DROP  R2                  KILL DCT ADDRESSABILITY           R4
         SPACE 5                                                     R4
NINRDCTS DS    F                   DCTS + 1                          R4
NINRMASK DC    0F'0',AL1(241),AL3(8)  SUBPOOL AND PREFIX             R4
         SPACE 2                                                     R4
NINRDCT  DC    (RIDCTEND-DCTDSECT)X'00' INTERNAL READER MODEL DCT    R4
         TITLE 'HASP INITIALIZATION -- FINAL SECTION'
NINEXT   ICM   R1,15,$SVDEB        TEST FOR EXISTING DA DEB          R4
         BZ    SKIP1270            BR IF NO                          R4
         TM    $SVHASP,X'80'       TEST HASP STATUS.
         BO    NPCEADDR            BR IF RESTARTING                  R4
         SPACE 1                                                     R4
***********************************************************************
*                                                                     *
*        MOVE DIRECT ACCESS DCB TO SSVT                               *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
SKIP1270 LA    R2,$SVDCB+40        POINT TO $SVDCB + PREFIX          R4
         LA    R3,12               MOVE                              R4
         L     R4,$HASPDCB          DA                               R4
         LR    R5,R3                 DCB                             R4
         LA    R4,40(,R4)             TO                             R4
         MVCL  R2,R4                   SSVT                          R4
         S     R1,=F'8'            POINT TO DEB STORAGE PREFIX       R4
         BM    NEWDADEB            BR IF NO EXISTING DA DEB          R4
         TM    $OPTSTAT,$OPTCOLD+$OPTFMT  TEST INIT'N OPTIONS        R4
         BZ    NPCEADDR            BR IF WARM START                  R4
         L     R0,0(,R1)            ELSE GET DA DEB, TED,            R4
         ICM   R0,8,=AL1(241)        AND TGB STORAGE REQUIREMENT     R4
         FREEMAIN R,LV=(0),A=(1)      AND FREE EXISTING STORAGE      R4
         XC    $SVDEB,$SVDEB       CLEAR DA DEB ADDRESS              R4
         EJECT                                                       R4
***********************************************************************
*                                                                     *
*        OBTAIN CSA STORAGE FOR DA DEB, TEDS, AND TGBS                *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
NEWDADEB IC    R3,$NUMDA           GET                               R4
         LA    R3,1(,R3)            LENGTH                           R4
         SLL   R3,4                  OF                              R4
         LA    R3,32(,R3)             DEB                            R4
         IC    R5,$NUMDA           ADD                               R4
         MH    R5,=Y(TEDSIZ)        TED                              R4
         LA    R5,7(R3,R5)           STORAGE                         R4
         N     R5,=F'-8'              AND ROUND TO DOUBLE-WORD       R4
         SLR   R3,R3               ADD                               R4
         IC    R3,$NUMTGBE          STORAGE                          R4
         MH    R3,=Y(TGBSIZE)        FOR                             R4
         LA    R5,8(R3,R5)            TGBS AND PREFIX                R4
         LR    R0,R5               RELOAD STORAGE REQUIREMENT        R4
         ICM   R0,8,=AL1(241)      SET SUBPOOL                       R4
         GETMAIN R,LV=(0)          GET STORAGE IN CSA                R4
         LR    R2,R1               CLEAR                             R4
         LR    R3,R5                STORAGE                          R4
         SLR   R15,R15               FOR DEB,                        R4
         MVCL  R2,R14                 TEDS, AND TGBS                 R4
         ST    R5,0(,R1)           SAVE STORAGE SIZE                 R4
         LA    R2,8(,R1)           STEP OVER PREFIX                  R4
         ST    R2,$SVDEB           SET POINTER TO DA DEB             R4
         EJECT                                                       R4
***********************************************************************
*                                                                     *
*        MOVE DIRECT ACCESS DEB TO CSA                                *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
         IC    R3,$NUMDA           GET                               R4
         LA    R3,1(,R3)            LENGTH                           R4
         SLL   R3,4                  OF                              R4
         LA    R3,32(,R3)             DEB                            R4
         L     R4,$DADEBAD         MOVE                              R4
         LR    R5,R3                DA DEB                           R4
         MVCL  R2,R4                 TO CSA                          R4
         SPACE 1                                                     R4
***********************************************************************
*                                                                     *
*        MOVE TED TO CSA, SET TGB POINTERS                            *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
         ST    R2,$SVTED           SET POINTER TO FINAL TEDS         R4
         ST    R2,$SVTFRST         SET POINTER TO FIRST TED          R4
         ST    R2,$SVTNEXT         SET POINTER TO NEXT TED           R4
         LA    R1,TEDSIZ           GET SIZE OF INDIVIDUAL TED        R4
         IC    R5,$NUMDA           MOVE                              R4
         MR    R4,R1                HASP                             R4
         L     R4,TEDSTART           TED                             R4
         LR    R3,R5                  TO                             R4
         MVCL  R2,R4                   CSA                           R4
         SLR   R2,R1               SET POINTER TO                    R4
         ST    R2,$SVTLAST          LAST TED                         R4
         LA    R2,7(R1,R2)         SET POINTER                       R4
         N     R2,=F'-8'            TO FIRST                         R4
         ST    R2,$SVTTGBA           TRACK GROUP BLOCK               R4
         LA    R1,TGBSIZE          SET SIZE                          R4
         ST    R1,$SVTTGBA+4        OF TRACK GROUP BLOCK             R4
         IC    R5,$NUMTGBE         SET                               R4
         BCTR  R5,0                 POINTER                          R4
         MR    R4,R1                 TO                              R4
         ALR   R2,R5                  LAST                           R4
         ST    R2,$SVTTGBA+8           TGB                           R4
         EJECT                                                       R4
***********************************************************************
*                                                                     *
*        SET PCE ADDRESS IN ALL DCTS                                  *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
NPCEADDR LA    WA,$DCTPOOL-(DCTCHAIN-DCTDSECT)  PREPARE TO SCAN DCTS R4
         SPACE 1                                                     R4
         USING DCTDSECT,WA         PROVIDE DCT ADDRESSABILITY        R4
         SPACE 1                                                     R4
NEXTDCT  ICM   WA,7,DCTCHAIN+1     POINT TO NEXT DCT                 R4
         BZ    NDECHAIN            BR IF NO MORE DCTS                R4
         MVC   DCTPCE+1(3),DCTEWF+1  ELSE PROVIDE PCE ADDRESS        R4
         XC    DCTBUFAD,DCTBUFAD   CLEAR OUT EBCDIC DEVICE NAME      R4
         CLI   DCTDEVTP,DCTLOG     TEST DEVICE TYPE                  R4
         BE    NPCELOG             HANDLE IF LOGON DCT               R4
SKIP1280 CLI   DCTDEVTP,DCTLNE     TEST DEVICE TYPE                  R4
         BNE   NEXTDCT             LOOP IF NOT LINE                  R4
         XC    MDCTOBUF,MDCTOBUF    ELSE CLEAR BUFFER ADDRESS        R4
         SPACE 1                                                     R4
NPCELOG  MVC   DCTPCE+1(3),$MLLMPCE+1  AND RESET PCE ADDRESS         R4
         B     NEXTDCT             LOOP THRU ALL DCTS                R4
         SPACE 1                                                     R4
***********************************************************************
*                                                                     *
*        DECHAIN REMOTE TERMINAL DCTS (IF ANY)                        *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
NDECHAIN SLR   R0,R0               GET NUMBER                        R4
         ICM   R0,3,$NUMLNES        OF RJE LINES                     R4
         BZ    NFREEKOR            BR IF NONE DEFINED                R4
         LA    WA,$LNEDCT-(DCTCHAIN-DCTDSECT)  PREPARE TO RUN DCTS   R4
         SPACE 1                                                     R4
SKIP1290 L     WA,DCTCHAIN         LOCATE LAST                       R4
         BCT   R0,SKIP1290          LINE DCT                         R4
         SPACE 1                                                     R4
         MVC   DCTCHAIN,$INRDCT    UNCHAIN REMOTE TERMINAL DCTS      R4
         SPACE 1                                                     R4
         DROP  WA                  KILL DCT ADDRESSABILITY           R4
         SPACE 1                                                     R4
NFREEKOR IC    R0,$NUMDA           FREE                              R4
         MH    R0,=Y(TEDSIZ)        STORAGE                          R4
         ICM   R0,8,=AL1(229)        USED                            R4
         L     R1,TEDSTART            FOR                            R4
         FREEMAIN R,LV=(0),A=(1)       TEMPORARY TEDS                R4
         EJECT                                                       R4
***********************************************************************
*                                                                     *
*        INITIALIZE PROCESSOR WAIT QUEUES                             *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
         LA    R1,$EWQ1-(PCEPCEA-PCEDSECT)  POINT TO 1ST PCE ZERO    R4
         LA    R2,8                         SET INCREMENT            R4
         LA    R3,$READY-(PCEPCEA-PCEDSECT) POINT TO LAST PCE ZERO   R4
         SPACE 1                                                     R4
SKIP1300 ST    R1,PCEPCEA-PCEDSECT(,R1)  STORE 1ST PCE POINTER       R4
         ST    R1,PCEPCEB-PCEDSECT(,R1)  STORE LAST PCE POINTER      R4
         BXLE  R1,R2,SKIP1300            LOOP UNTIL ALL ARE SET      R4
         SPACE 1                                                     R4
***********************************************************************
*                                                                     *
*        SET CAT OVERRIDES FOR STARTED TASKS AND LOGONS               *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
         USING CATDSECT,R1         PROVIDE CAT ADDRESSABILITY        R4
         SPACE 1                                                     R4
         L     WA,$CATABLE                     GET STC               R4
         LA    R1,CATLEN*(CATSTCCL-X'C0')(,WA)  CAT ENTRY            R4
         OI    CATJOBFL,CATNOJNL   FORCE NO JOURNAL                  R4
         NI    CATJOBFL,255-CATRSTRT  FORCE NO RESTART               R4
         MVI   CATCONVP,C'0'       DON'T REQUIRE ACCT'G/PGM'R NAME   R4
         OI    CATSMFLG,CATNOUSO+CATNOTY6+CATNOUJP+CATNOT26  NO SMF  R4
         LA    R1,CATLEN*(CATTSUCL-X'C0')(,WA)  GET TSU CAT ENTRY    R4
         OI    CATJOBFL,CATNOJNL   FORCE NO JOURNAL                  R4
         NI    CATJOBFL,255-CATRSTRT  FORCE NO RESTART               R4
         MVI   CATCONVP,C'0'       DON'T REQUIRE ACCT'G/PGM'R NAME   R4
         SPACE 1                                                     R4
         DROP  R1                  KILL CAT ADDRESSABILITY           R4
         EJECT                                                       R4
***********************************************************************
*                                                                     *
*        $POST THE TIME EXCESSION, $TIMER, WARM START AND             *
*        CHECKPOINT PROCESSORS.  HOLD ALL OTHERS.                     *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
         MVC   $VERSION,NVERSION   SET CURRENT VERSION IN HCT        R4
         SPACE 1                                                     R4
         LA    R1,$PCEORG-(PCENEXT-PCEDSECT)  PREPARE TO SCAN PCES   R4
         SPACE 1                                                     R4
         USING PCEDSECT,R1         PROVIDE PCE ADDRESSABILITY        R4
         SPACE 1                                                     R4
NXTPCE   ICM   R1,15,PCENEXT       SKIP TO NEXT PCE ON CHAIN
         BZ    NBUFBLD             BRANCH IF AT END OF CHAIN
         CLI   PCEID+1,PCETIMID    Q. IF $TIMER OR TIME EXCESSION
         BE    NPCEPST             BR. IF YES
         CLI   PCEID+1,PCECKPID    Q. IF CHECKPOINT PCE
         BE    NPCEPST             BR. IF YES
         CLI   PCEID+1,PCEWRMID    Q. IF WARM START PCE
         BE    NPCEPST             BR. IF YES
         OI    PCEEWF,$EWFHOLD     TURN ON PCE HOLD BIT
         B     NXTPCE              REITERATE LOOP
         SPACE 1
NPCEPST $POST  (R1),POST           PLACE PCE ON ACTIVE QUEUE
         B     NXTPCE              REITERATE LOOP
         SPACE 1                                                     R4
NVERSION DC    CL8'&VERSION'       HASP VERSION NUMBER               R4
         SPACE 1                                                     R4
         DROP  R1                  KILL PCE ADDRESSABILITY           R4
         SPACE 1                                                     R4
         TITLE 'HASP INITIALIZATION -- BUFFER POOL GENERATION'       R4
***********************************************************************
*                                                                     *
*        CALCULATE DEFAULT HASP BUFFER COUNT                          *
*                                                                     *
*        DEFAULT = 20 + 4*&NUMRDRS + (&NUMPRTS-N1)*N2                 *
*                  + N1*N2*&TCELSIZ + &NUMPUNS*N3                     *
*                  + &NUMLNES*(3+N4+N5)                               *
*          WHERE                                                      *
*                  N1 = NUMBER OF PRINTERS SPECIFYING DSPLTCEL        *
*                  N2 = 2 IF &PRTBOPT=YES, ELSE 1                     *
*                  N3 = 2 IF &PUNBOPT=YES, ELSE 1                     *
*                  N4 = 2 IF &RPRBOPT=YES, ELSE 1                     *
*                  N5 = 2 IF &RPUBOPT=YES, ELSE 1                     *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
NBUFBLD  LH    R0,$NUMBUF          USE &NUMBUF                       R4
         LTR   R0,R0                VALUE IF                         R4
         BNZ   NBBLDBGN              SPECIFIED                       R4
         SLR   WA,WA               GET NUMBER OF                     R4
         IC    WA,$NUMRDRS          LOCAL READERS                    R4
         SLL   WA,2                  TIMES 4                         R4
         SLR   WB,WB               ADD NUMBER                        R4
         IC    WB,$NUMPRTS          OF                               R4
         L     WC,=A(NPRDTCEL)       (LOCAL-DSPLTCEL)                R4
         SH    WB,0(,WC)              PRINTERS                       R4
         TM    $PRTOPTS,$PRTBOPT       TIMES                         R4
         BZ    SKIP1310                 BUFFERS PER                  R4
         SLL   WB,1                      PRINTER                     R4
SKIP1310 LA    R0,20(WA,WB)        ADD 20 TO ABOVE TOTAL             R4
         LH    WA,0(,WC)           ADD NUMBER OF                     R4
         IC    WB,$TCELSIZ          OF DSPLTCEL                      R4
         MR    WA,WA                 PRINTERS                        R4
         TM    $PRTOPTS,$PRTBOPT      TIMES TRACK-                   R4
         BZ    SKIP1320                CELL SIZE                     R4
         ALR   R0,WB                    TIMES BUFFERS                R4
SKIP1320 ALR   R0,WB                     PER PRINTER                 R4
         IC    WA,$NUMPUNS         ADD                               R4
         TM    $PRTOPTS,$PUNBOPT    NUMBER                           R4
         BZ    SKIP1330              OF PUNCHES                      R4
         ALR   R0,WA                  TIMES BUFFERS                  R4
SKIP1330 ALR   R0,WA                   PER PUNCH                     R4
         LA    WA,3+1+1                   ADD 3 TO                   R4
         TM    $PRTOPTS,$RPRBOPT+$RPUBOPT  BUFFERS PER               R4
         BM    SKIP1340                     REMOTE PRINTER           R4
         BZ    SKIP1350                      AND BUFFERS             R4
         LA    WA,1(,WA)                      PER REMOTE             R4
SKIP1340 LA    WA,1(,WA)                       PUNCH                 R4
SKIP1350 MH    WA,$NUMLNES         ADD BUFFERS                       R4
         ALR   R0,WA                PER LINE                         R4
         CH    R0,*+10             IMPOSE                            R4
         BNH   NBBLDBGN             &NUMBUF                          R4
         LA    R0,$MAXBUF            LIMIT                           R4
         EJECT                                                       R4
***********************************************************************
*                                                                     *
*        GENERATE JES2 GENERAL BUFFER POOL                            *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
NBBLDBGN LH    R1,$BUFSIZE         GET SPOOL BUFFER SIZE             R4
         LA    R1,BUFSTART-BUFDSECT(,R1)  COMPUTE STORAGE BFR SIZE   R4
         STH   R1,$BUFLENG         SAVE STORAGE BUFFER SIZE          R4
         LA    WF,NBFBUILD         POINT TO BUFFER BUILD ROUTINE     R4
         BALR  WE,WF                AND GO DO IT                     R4
         MVI   BPMBFTYP-BPMDSECT(R1),BUFHASP  SET BUFFER TYPE        R4
         STH   R0,$NUMBUF          STORE BUFFERS ALLOCATED           R4
         ST    R1,$BFRMAP           AND BUFFER POOL MAP ADDRESS      R4
         SPACE 3                                                     R4
***********************************************************************
*                                                                     *
*        GENERATE JES2 PP (PRINT/PUNCH PROCESSOR) BUFFERS             *
*                                                                     *
*        THE NUMBER OF BUFFERS REQUIRED = $NUMPUNS + NPRDTCEL +       *
*                                         ($NUMPRTS - NBR3800)        *
*                                                                     *
*        THE SIZE OF A BUFFER = 2X + (BUFFER PREFIX AREA)             *
*                                                                     *
*          WHERE X = MAX ($NOPRCCW*8+PCIESIZE+((JOESIZE+7)/8)*8,      *
*                         $NOPUCCW*8+PCIESIZE+((JOESIZE+7)/8)*8,      *
*                         ($TCELSIZ*4-3)*4)                           *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
NBBLDPP  SLR   WE,WE               CLEAR WORK REGISTER               R4
         IC    WE,$NOPRCCW         PICK UP $NOPRCCW                  R4
         SLL   WE,3                MULTIPLY BY 8                     R4
         LA    WE,PCIESIZE(,WE)    ADD LENGTH OF PCIE                R4
         LA    WE,(JOESIZE+7)/8*8(,WE) ADD ROUNDED JOE SIZE          R4
         LR    R1,WE               SAVE AS FIRST MAX VALUE           R4
         SLR   WE,WE               CLEAR WORK REG                    R4
         IC    WE,$NOPUCCW         PICK UP $NOPUCCW                  R4
         SLL   WE,3                MULTIPLY BY 8                     R4
         LA    WE,PCIESIZE(,WE)    ADD LENGTH OF PCIE                R4
         LA    WE,(JOESIZE+7)/8*8(,WE) ADD ROUNDED JOE SIZE          R4
         CR    R1,WE               DO WE HAVE A NEW MAX VALUE...     R4
         BNL   SKIP1360            BR IF NO                          R4
         LR    R1,WE                ELSE USE NEW MAX VALUE           R4
SKIP1360 SLR   R2,R2               CLEAR WORK REG                    R4
         IC    R2,$TCELSIZ         PICK UP $TCELSIZ                  R4
         SLL   R2,2                MULTIPLY BY 4                     R4
         EJECT                                                       R4
         BCTR  R2,0                SUB-                              R4
         BCTR  R2,0                 TRACT                            R4
         BCTR  R2,0                  3                               R4
         SLL   R2,2                MULTIPLY BY 4                     R4
         CR    R1,R2               DO WE HAVE A NEW MAX VALUE...     R4
         BNL   SKIP1370            BR IF NO                          R4
         LR    R1,R2                ELSE USE NEW MAX VALUE           R4
SKIP1370 SLL   R1,1                MULTIPLY X BY 2                   R4
         LA    R1,BUFSTART-BUFDSECT(,R1) ADD BUFER PREFIX SIZE       R4
         CH    R1,=H'4096'         IF BUFFER SIZE LARGER THAN  @OZ27170
         BNH   SKIP1075             ONE PAGE, ROUND DOWN       @OZ27170
         LH    R1,=H'4096'           ONE PAGE                  @OZ27170
SKIP1075 DS    0H                                              @OZ27170
         SLR   R0,R0               CLEAR WORK REG                    R4
         SLR   R2,R2               CLEAR WORK REG                    R4
         IC    R0,$NUMPRTS         GET TOTAL NBR OF PRINTERS         R4
         L     WE,=A(NBR3800)      GET A(NBR3800)                    R4
         L     WF,=A(NPRDTCEL)     GET A(NPRDTCEL)                   R4
         SH    R0,0(,WE)           SUBTRACT NBR OF 3800 PRINTERS     R4
         AH    R0,0(,WF)           ADD NBR OF TRAKCELL PRINTERS      R4
         IC    R2,$NUMPUNS         NBR OF PUNCHES                    R4
         ALR   R0,R2               TOTAL NBR OF BUFFERS REQUIRED     R4
         LA    WF,NBFBUILD         POINT TO BUFFER BUILD RTN         R4
         BALR  WE,WF               BUILD THEM                        R4
         MVI   BPMBFTYP-BPMDSECT(R1),BUFPP   SET BUFFER TYPE         R4
         ST    R1,$PPBFMAP         SAVE BUFFER POOL MAP ADDRESS      R4
         SPACE 3                                                     R4
***********************************************************************
*                                                                     *
*        GENERATE JES2 PAGE BUFFERS                                   *
*                                                                     *
*        THE SIZE OF A BUFFER = 4096 BYTES (ONE PAGE)                 *
*                                                                     *
*        THE NUMBER OF BUFFERS = NBR OF 3800 PRINTERS                 *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
NBBLDPG  L     WE,=A(NBR3800)      GET NUMBER                        R4
         LH    R0,0(,WE)            OF 3800 PRINTERS                 R4
         LTR   R0,R0                IN SYSTEM                        R4
         BZ    NBBLDEND            AREN'T ANY, DON'T GET BUFFERS     R4
         LA    R1,4095             SIZE OF A                         R4
         LA    R1,1(,R1)            BUFFER                           R4
         LA    WF,NBFBUILD         POINT TO BUFFER BUILD RTN         R4
         BALR  WE,WF               DO IT                             R4
         MVI   BPMBFTYP-BPMDSECT(R1),BUFPAGE  SET BUFFER TYPE        R4
         ST    R1,$PGBFMAP         SAVE BUFFER POOL MAP ADDRESS      R4
         EJECT                                                       R4
***********************************************************************
*                                                                     *
*        END OF BASIC INITIALIZATION -- RETURN TO HASPNUC             *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
NBBLDEND L     R7,$SSVT            RESTORE SSVT ADDRESS              R4
         MVC   $VFL,$SVVFL         MOVE VFL RTN ADDR TO HCT          R4
         L     R0,$SVTED           SET HCT POINTER                   R4
         ST    R0,$TEDADDR          TO FIRST TED                     R4
         L     WA,$SVSSCT          POINT TO THE SSCT                 R4
         MODESET EXTKEY=ZERO       SET ZERO PROTECT KEY              R4
         OI    SSCTFLG1-SSCT(WA),SSCTSFOR SERIALIZE PROCESS SYSOUT   R4
         ST    R7,SSCTSSVT-SSCT(,WA)  CONNECT SSVT TO SSCT           R4
         MODESET EXTKEY=HASP       RESTORE JES2 PROTECT KEY          R4
         SPACE 1                                                     R4
         L     R13,4(,R13)         RESTORE SAVE AREA POINTER         R4
         LM    LINK,R12,12(R13)    RESTORE CALLER'S REGISTERS        R4
         BR    LINK                 AND RETURN TO HASPNUC            R4
         SPACE 1                                                     R4
         DROP  R7                  KILL SSVT ADDRESSABILITY          R4
 TITLE 'HASP INITIALIZATION -- BUFFER POOL GENERATION SUBROUTINE'    R4
***********************************************************************
*                                                                     *
*        NBFBUILD - GENERATE JES2 BUFFER POOL                         *
*                                                                     *
*        R0    - BUFFERS REQUESTED, BUFFERS ALLOCATED ON EXIT         *
*        R1    - BUFFER SIZE, BUFFER POOL MAP ADDR ON EXIT            *
*        WE    - RETURN ADDRESS                                       *
*        WF    - ENTRY POINT ADDRESS                                  *
*        R11   - HCT ADDRESS (BASE1)                                  *
*        R13   - 18 WORD SAVE AREA ADDRESS                            *
*                                                                     *
*        REGISTERS WA,WB,WC,WD DESTROYED BY THIS ROUTINE              *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
         USING BPMDSECT,R1         PROVIDE BFR MAP ADDRESSABILITY    R4
         USING NBFBUILD,WF         PROVIDE LOCAL ADDRESSABILITY      R4
         SPACE 1                                                     R4
NBFBUILD LH    WD,=H'4096'         WD = NUMBER                       R4
         SLR   WC,WC                     OF                          R4
         DR    WC,R1                      JES2                       R4
         CH    WD,=H'8'                    BUFFERS                   R4
         BNH   SKIP1380                     PER                      R4
         LH    WD,=H'8'                      PAGE                    R4
SKIP1380 SLR   WA,WA               WC = NUMBER OF                    R4
         LA    WB,BPMEND-1               BUFFERS RESERVED            R4
         DR    WA,R1                      IN BUFFER                  R4
         LR    WC,WB                       BIT MAP                   R4
         ALR   WB,R0               WB = NUMBER                       R4
         SLR   WA,WA                     OF BUFFERS,                 R4
         DR    WA,WD                      NOT TO                     R4
         LTR   WA,WA                       EXCEED 2048,              R4
         MR    WA,WD                        FILLING                  R4
         BZ    SKIP1390                      COMPLETELY              R4
         ALR   WB,WD                          THE                    R4
SKIP1390 CH    WB,=H'2048'                     PAGES                 R4
         BNH   NBFGMAIN                         TO                   R4
         SLR   WB,WD                             BE                  R4
         B     SKIP1390                           ALLOCATED          R4
         EJECT                                                       R4
NBFGMAIN DR    WA,WD               WB = STORAGE REQUIRED FOR         R4
         SLL   WB,12                     REQUESTED BUFFERS           R4
         LR    WA,R1               SAVE BUFFER SIZE                  R4
         LR    R0,WB               RELOAD STORAGE REQUIREMENT        R4
         GETMAIN RC,LV=(0),BNDRY=PAGE  OBTAIN BUFFER STORAGE         R4
         LTR   R15,R15             IF STORAGE NOT AVAILABLE,         R4
         BNZ   NBFPIG               BR TO ISSUE MSG AND ABORT        R4
         MVC   BPMID,=CL4'BPM'     SET BUFFER POOL MAP ID            R4
         STH   WA,BPMBFSIZ         STORE BUFFER SIZE                 R4
         LR    WA,R1               SAVE MAP ADDRESS                  R4
         ST    WB,BPMSIZE          SAVE STORAGE REQUIREMENT          R4
         LA    R0,BPMMAP           STORE ADDRESS                     R4
         ST    R0,BPMAPADR          OF BUFFER ALLOCATION MAP         R4
         ST    WD,BPMPGBFS         STORE NO. OF BUFFERS PER PAGE     R4
         L     R0,=X'0000FF00'     SET MASK                          R4
         SRL   R0,0(WD)             FOR DETERMINING                  R4
         STC   R0,BPMMASK            RELEASABLE PAGE                 R4
         LR    R0,WB               PAGE RELEASE                      R4
         SH    R0,=H'4096'          ALL BUFFER STORAGE               R4
         BZ    NBFMAP                EXCEPT                          R4
         AH    R1,=H'4096'            FOR                            R4
        $PGSRVC RLSE,(R1),(R0)         1ST PAGE                      R4
         LR    R1,WA               RESTORE MAP ADDRESS               R4
         EJECT                                                       R4
NBFMAP   XC    BPMMAP,BPMMAP       'ALLOCATE' ALL BUFFERS            R4
         L     R14,=X'0000FFFF'    FREE 1ST 16 BUFFERS,              R4
         SRL   R14,0(WC)            EXCEPT FOR THOSE                 R4
         STH   R14,BPMMAP            PERMANENTLY RESERVED            R4
         SRL   WB,12               IF MORE                           R4
         MR    WA,WD                THAN                             R4
         LR    R0,WB                 SIXTEEN                         R4
         SLR   R0,WC                  BUFFERS                        R4
         SH    WB,=H'16'               DEFINED,                      R4
         BP    NBFFREE                  BR TO FREE THE REST          R4
         LCR   WB,WB                ELSE 'RE-ALLOCATE'               R4
         SRL   R14,0(WB)             ANY UNDEFINED                   R4
         SLL   R14,0(WB)              BUFFERS AMONG                  R4
         STH   R14,BPMMAP              FIRST SIXTEEN                 R4
         SPACE 1                                                     R4
NBFRANGE LR    WB,WC               COMPUTE                           R4
         MH    WB,BPMBFSIZ          AND                              R4
         CLR   WC,WD                 STORE                           R4
         BL    SKIP1400               ADDRESS                        R4
         LH    WB,=H'4096'             OF                            R4
SKIP1400 ALR   WB,R1                    1ST                          R4
         ST    WB,BPMBFR1                BUFFER                      R4
         LR    WB,WC               GET RELATIVE                      R4
         ALR   WB,R0                BUFFER NUMBER                    R4
         BCTR  WB,0                  OF LAST BUFFER                  R4
         SLR   WA,WA               COMPUTE                           R4
         DR    WA,WD                AND                              R4
         SLL   WB,12                 STORE                           R4
         MH    WA,BPMBFSIZ            ADDRESS                        R4
         ALR   WB,WA                   OF                            R4
         ALR   WB,R1                    LAST                         R4
         ST    WB,BPMLAST                BUFFER                      R4
         STH   R0,BPMBUFCT         STORE NBR AVAIL BUFFERS AND       R4
         BR    WE                  THEN RETURN TO CALLER             R4
         SPACE 1                                                     R4
NBFFREE  LR    WA,WB               SAVE REMAINING BUFFER COUNT       R4
         SRL   WB,3                  FREE REMAINING                  R4
         STC   WB,*+5                 DEFINED                        R4
         MVC   BPMMAP+2(*-*),BPMMAP+1  BUFFERS                       R4
         N     WA,=F'7'            'RE-ALLOCATE' ANY                 R4
         L     R14,=X'0000FF00'     UNDEFINED BUFFERS                R4
         SRL   R14,0(WA)             AMONG LAST                      R4
         STC   R14,BPMMAP+2(WB)       8 'ALLOCATED'                  R4
         B     NBFRANGE            THEN BR TO SET BFR RANGE ADDRS    R4
         SPACE 1                                                     R4
NBFPIG  $$WTO  NBFMSG              ISSUE ERROR MESSAGE TO OPERATOR   R4
         L     R1,=A(NGQUITM)      POINT TO QUIT MESSAGE             R4
         L     R15,=A(NERRORET)    GET ADDRESS OF ERROR EXIT         R4
         BR    R15                  AND EXIT                         R4
         SPACE 1                                                     R4
         DROP  R1,WF               KILL LOCAL ADDRESSABILITY         R4
         EJECT                                                       R4
         LTORG                                                       R4
         TITLE 'HASP INITIALIZATION -- ERROR RETURN ROUTINE'         R4
***********************************************************************
*                                                                     *
*        ERROR RETURN TO SYSTEM                                       *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
         USING DEBDSECT,R1         PROVIDE DEB ADDRESSABILITY        R4
         USING $SVDSECT,R2         PROVIDE SSVT ADDRESSABILITY       R4
         USING UCBDSECT,R3         PROVIDE UCB ADDRESSABILITY        R4
         SPACE 1                                                     R4
NERRORET BALR  BASE2,0             RE-ESTABLISH                      R4
         USING *,BASE2              LOCAL ADDRESSABILITY             R4
         SPACE 1                                                     R4
        $$WTO  (R1)                ISSUE ERROR MESSAGE TO OPERATOR   R4
         ICM   R2,15,$SSVT         GET SSVT ADDRESS                  R4
         BZ    NERRRETN            IF NOT SET YET, SKIP FREE         R4
         TM    $SVSTUS,$SVSTIRV    IF CHECKPOINT NOT RESERVED,       R4
         BZ    NERCONT              BR TO BYPASS RELEASE             R4
         L     R1,$DADEBAD         GET POINTER TO DA DEB             R4
         SLR   R3,R3               LOAD                              R4
         IC    R3,$NUMDA            CHECKPOINT                       R4
         SLL   R3,4                  UCB                             R4
         L     R3,DEBBASND(R3)        ADDRESS                        R4
         SPACE 1                                                     R4
         DROP  R1                  KILL DEB ADDRESSABILITY           R4
         SPACE 1                                                     R4
        $GETLOK                    GET CMS LOCK                      R4
         MODESET EXTKEY=ZERO       SET ZERO PROTECT KEY              R4
         SLR   R0,R0               CLEAR WORK REGISTER               R4
         IC    R0,UCBSQC           DECREMENT                         R4
         BCTR  R0,0                 RESERVE                          R4
         STC   R0,UCBSQC             COUNT                           R4
         NI    $SVSTUS,255-$SVSTIRV  KILL INIT RESERVE BIT           R4
         LTR   R0,R0               Q. IF RESERVE COUNT WENT TO ZERO
         BNZ   NFRELOK             BR. IF NO -- SKIP STARTIO MACRO
         TM    UCBTBYT2,UCBRR      Q. IF RESERVE/RELEASE             R4
         BZ    NFRELOK             BR. IF NO -- SKIP STARTIO MACRO
         STM   R14,R12,12(R13)     SAVE REGISTERS THROUGH STARTIO
         L     R1,$SVRELSE-SSVT(,WA)  POINT TO SRB FOR STARTIO MACRO
         STARTIO SRB=(1)           REMOVE RESERVE ON CHECKPOINT
         LM    R14,R12,12(R13)     RESTORE SAVED REGISTERS
         EJECT                                                       R4
NFRELOK $FRELOK                    FREE CMS LOCK                     R4
         SPACE 1                                                     R4
NERCONT  TM    $SVSTUS,$SVSTUSR    CHECK STATUS                      R4
         BZ    NERFRCMB            BRANCH TO FREE SSVT
         XI    $SVSTUS,$SVSTUSR+$SVSTUST  FLIP BITS                  R4
         B     NERRRETN            EXIT
         SPACE 1                                                     R4
NERFRCMB ICM   R1,15,$SVCMBA       GET CMB POOL ADDRESS              R4
         BZ    NERFRSVT            BRANCH IF NONE
         L     R0,8(,R1)           GET LENGTH
         ICM   R0,8,=AL1(231)       AND SUBPOOL
         FREEMAIN R,LV=(0),A=(1)   FREE CMB POOL
         SPACE 1                                                     R4
NERFRSVT L     R1,$SVRELSE         POINT TO RELEASE SRB-IOSB         R4
         FREEMAIN R,LV=SRBSIZE+IOSEND-IOSB,A=(1),SP=245  FREE IT
         LR    R1,WA               GET ADDRESS OF SSVT
         SL    R1,=F'8'            POINT TO SSVT PREFIX              R4
         L     R0,4(,R1)           GET LENGTH, INCLUDING PREFIX      R4
         ICM   R0,8,=AL1(241)       AND SUBPOOL
         FREEMAIN R,LV=(0),A=(1)   FREE SSVT
         SPACE 1                                                     R4
NERRRETN L     R13,4(,R13)         GET ADDRESS OF HASPNUC SAVE AREA  R4
         L     R13,4(,R13)         GET ADDRESS OF SYSTEM SAVE AREA   R4
         LM    R14,R12,12(R13)     RESTORE REGISTERS
         LA    R15,20              SET RETURN CODE
         BR    R14                  AND RETURN
         SPACE 1                                                     R4
         DROP  R2,R3               KILL SSVT, UCB ADDRESSABILITY     R4
         SPACE 2                                                     R4
         LTORG                     DEFINE LITERALS FOR RETURN ROUTINE
  TITLE 'HASP INITIALIZATION -- $$WTO/$$WTOR PROCESSING ROUTINE'     R4
***********************************************************************
*                                                                     *
*        SETUP WTO/WTOR MESSAGE AND ENTER $$WTO ROUTINE               *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
         USING NWTORTN,R15         PROVIDE LOCAL ADDRESSABILITY      R4
         SPACE 1                                                     R4
NWTORTN  STM   R14,R3,12(R13)      SAVE REGISTERS                    R4
         LR    R0,R1               MOVE                              R4
         LA    R1,NPARMSGL          MESSAGE                          R4
         LR    R3,R1                 TO                              R4
         LA    R2,NWTOWORK            WORK                           R4
         MVCL  R2,R0                   AREA                          R4
         LM    R14,R3,12(R13)      RESTORE REGISTERS                 R4
         LA    R1,NWTOWORK         POINT TO WORK AREA                R4
         L     R15,$$WTO           POINT TO $$WTO/$$WTOR ROUTINE     R4
         BR    R15                  AND ENTER IT                     R4
         SPACE 1                                                     R4
         DROP  R15                 KILL LOCAL ADDRESSABILITY         R4
         SPACE 1                                                     R4
         DS    0F                                                    R4
NWTOWORK DS    (NPARMSGL)C         MESSAGE WORK AREA                 R4
         SPACE 1                                                     R4
         LTORG                                                       R4
         TITLE 'HASP INITIALIZATION -- OUTPUT PRIORITY TABLE'        R4
         SPACE 5                                                     R4
NXPRITAB DS    0F                                                    R4
         DC    AL1(16*9),AL3(2000)       FIRST   INTERVAL            R4
         DC    AL1(16*8),AL3(5000)       SECOND  INTERVAL            R4
         DC    AL1(16*7),AL3(15000)      THIRD   INTERVAL            R4
         DC    AL1(16*6),AL3(X'FFFFFF')  FOURTH  INTERVAL            R4
         DC    AL1(16*5),AL3(X'FFFFFF')  FIFTH   INTERVAL            R4
         DC    AL1(16*4),AL3(X'FFFFFF')  SIXTH   INTERVAL            R4
         DC    AL1(16*3),AL3(X'FFFFFF')  SEVENTH INTERVAL            R4
         DC    AL1(16*2),AL3(X'FFFFFF')  EIGHTH  INTERVAL            R4
         DC    AL1(16*1),AL3(X'FFFFFF')  NINTH   INTERVAL            R4
         DC    AL4(X'FFFFFF')                                        R4
         TITLE 'HASP INITIALIZATION -- SYSOUT CLASS CHARACTERISTICS TABC
               LE'
         SPACE 5
         ORG   *-3*64              ORG OVER UNUSED SPACE
NSCAT    DS    0D                  SYSOUT CLASS ATTRIBUTE TABLE
         ORG   *+3*64              INVALID CLASSES
         SPACE 1
         DC    01AL1(SCATDUMM+SCATINVL)  INVALID CLASS
         DC    01AL1(0)            CLASS A
         DC    01AL1(SCATPNCH)     CLASS B
         DC    07AL1(0)            CLASSES C-I
         DC    07AL1(SCATDUMM+SCATINVL)  INVALID CLASSES
         DC    01AL1(0)            CLASS J
         DC    01AL1(SCATPNCH)     CLASS K
         DC    07AL1(0)            CLASSES L-R
         DC    08AL1(SCATDUMM+SCATINVL)  INVALID CLASSES
         DC    08AL1(0)            CLASSES S-Z
         DC    06AL1(SCATDUMM+SCATINVL)  INVALID CLASSES
         DC    10AL1(0)            CLASSES 0-9
         DC    06AL1(SCATDUMM+SCATINVL)  INVALID CLASSES
         TITLE 'HASP INITIALIZATION -- REMOTE WORK TABLE (RWT) DSECT'
RWTDSECT DSECT                     REMOTE WORK TABLE DSECT
RWTINDEX DS    X                   REMOTE DEVICE INDEX               R4
RWTSTAT  DS    BL1                 REMOTE DEVICE STATUS
RWTROUTE DS    AL2                 REMOTE DEVICE ROUTE CODE
RWTLRECL DS    X                   REMOTE DEVICE LRECL         @OZ29180
RWTSEL   DS    X                   RMT SNA DEVICE SELECT BYTE  @OZ29180
RWTFEAT  DS    X                   COMMOM SNA/BSC FEATURES     @OZ29180
RWTSFEAT DS    X                   SNA FEATURES ONLY           @OZ29180
RWTCSEND EQU   *                   END OF COMMON SECTION
         DS    AL1                 RESERVED                          R4
RWTPRSYS DS    AL2                 SYSTEM ID                         R4
RWTPRINT DS    AL2                 DEFAULT PRINT ROUTE CODE
RWTPUSYS DS    AL2                 SYSTEM ID                         R4
RWTPUNCH DS    AL2                 DEFAULT PUNCH ROUTE CODE
RWTJCLAS DS    C                   DEFAULT JOB CLASS
RWTMCLAS DS    C                   DEFAULT MSGCLASS
RWTPRINC DS    X                   PRIORITY INCREMENT
RWTPRLIM DS    X                   PRIORITY LIMIT
RWTFLAGS DS    BL1                 OPERATOR COMMAND FLAGS
RWTRDEND EQU   *                   END OF REMOTE READER ELEMENT
         ORG   RWTCSEND
RWTFORMS DS    CL4                 REMOTE PRINT/PUNCH FORMS ID
RWTFCB   DS    CL4                 REMOTE PRINT CARRIAGE TAPE ID
RWTUCS   DS    CL4                 REMOTE PRINT CHARACTER SET ID
RWTPPFL  DS    BL1                 REMOTE PRINT PUNCH FLAGS
RWTPPSW  DS    BL1                 REMOTE PRINT/PUNCH SWITCHES
RWTCLASS DS    CL36                REMOTE PRINT/PUNCH CLASS LIST     R4
*                                  THIS CARD DELETED BY APAR   @OZ29180
RWTDCPTN DS    X                   DEFAULT CPT NUMBER               R41
RWTCHLM  DS    X                   SNA REMOTE CHAIN LIMIT            R4
RWTCHSZ  DS    X                   SNA REMOTE CHAIN SIZE             R4
RWTPPEND EQU   *                   END OF REMOTE PRINT/PUNCH ELEMENT
         SPACE 3
         ORG   RWTDSECT
RWTRDR1  DS    XL(RWTRDEND-RWTDSECT)  RNNN.RD1 WORK TABLE ELEMENT
RWTRDR2  DS    XL(RWTRDEND-RWTDSECT)  RNNN.RD2 WORK TABLE ELEMENT
RWTRDR3  DS    XL(RWTRDEND-RWTDSECT)  RNNN.RD3 WORK TABLE ELEMENT
RWTRDR4  DS    XL(RWTRDEND-RWTDSECT)  RNNN.RD4 WORK TABLE ELEMENT
RWTRDR5  DS    XL(RWTRDEND-RWTDSECT)  RNNN.RD5 WORK TABLE ELEMENT
RWTRDR6  DS    XL(RWTRDEND-RWTDSECT)  RNNN.RD6 WORK TABLE ELEMENT
RWTRDR7  DS    XL(RWTRDEND-RWTDSECT)  RNNN.RD7 WORK TABLE ELEMENT
RWTPRT1  DS    XL(RWTPPEND-RWTDSECT)  RNNN.PR1 WORK TABLE ELEMENT
RWTPRT2  DS    XL(RWTPPEND-RWTDSECT)  RNNN.PR2 WORK TABLE ELEMENT
RWTPRT3  DS    XL(RWTPPEND-RWTDSECT)  RNNN.PR3 WORK TABLE ELEMENT
RWTPRT4  DS    XL(RWTPPEND-RWTDSECT)  RNNN.PR4 WORK TABLE ELEMENT
RWTPRT5  DS    XL(RWTPPEND-RWTDSECT)  RNNN.PR5 WORK TABLE ELEMENT
RWTPRT6  DS    XL(RWTPPEND-RWTDSECT)  RNNN.PR6 WORK TABLE ELEMENT
RWTPRT7  DS    XL(RWTPPEND-RWTDSECT)  RNNN.PR7 WORK TABLE ELEMENT
RWTPUN1  DS    XL(RWTPPEND-RWTDSECT)  RNNN.PU1 WORK TABLE ELEMENT
RWTPUN2  DS    XL(RWTPPEND-RWTDSECT)  RNNN.PU2 WORK TABLE ELEMENT
RWTPUN3  DS    XL(RWTPPEND-RWTDSECT)  RNNN.PU3 WORK TABLE ELEMENT
RWTPUN4  DS    XL(RWTPPEND-RWTDSECT)  RNNN.PU4 WORK TABLE ELEMENT
RWTPUN5  DS    XL(RWTPPEND-RWTDSECT)  RNNN.PU5 WORK TABLE ELEMENT
RWTPUN6  DS    XL(RWTPPEND-RWTDSECT)  RNNN.PU6 WORK TABLE ELEMENT
RWTPUN7  DS    XL(RWTPPEND-RWTDSECT)  RNNN.PU7 WORK TABLE ELEMENT
RWTEND   DS    0F                  END OF REMOTE WORK TABLE ELEMENT
RWTLEN   EQU   RWTEND-RWTDSECT     LENGTH OF REMOTE WORK TABLE ELEMENT
HASPINIT CSECT                     END OF REMOTE WORK TABLE DSECT
         TITLE 'HASP INITIALIZATION -- REMOTE WORK LOOK-UP (RWL) TABLE C
               DSECT'
         SPACE 5
RWLDSECT DSECT                     REMOTE WORK LOOK-UP TABLE DSECT
RWLNAME  DS    CL3                 REMOTE DEVICE NAME
RWLRCB   DS    X                   REMOTE DEVICE RECORD CONTROL BYTE
RWLFCS   DS    BL2                 REMOTE DEVICE FUNCTION CONTROL SEQ
RWLDISP  DS    AL2                 REMOTE WORK TABLE ENTRY DISPLACEMENT
         DS    X                   RESERVED                          R4
RWLSEL   DS    X                   REMOTE DEVICE SNA SELECT BYTE     R4
RWLEND   DS    0H                  END OF REMOTE LOOK-UP TABLE ELEMENT
HASPINIT CSECT                     END OF RMT LOOK-UP TABLE DSECT
         TITLE 'HASP INITIALIZATION -- REMOTE WORK LOOK-UP TABLE'
         SPACE 5
$RWL     DS    0D
         DC    CL3'RD1',X'93',X'0800',AL2(RWTRDR1-RWTDSECT),XL2'20'  R4
         DC    CL3'RD2',X'A3',X'0400',AL2(RWTRDR2-RWTDSECT),XL2'21'  R4
         DC    CL3'RD3',X'B3',X'0200',AL2(RWTRDR3-RWTDSECT),XL2'22'  R4
         DC    CL3'RD4',X'C3',X'0100',AL2(RWTRDR4-RWTDSECT),XL2'23'  R4
         DC    CL3'RD5',X'D3',X'0008',AL2(RWTRDR5-RWTDSECT),XL2'24'  R4
         DC    CL3'RD6',X'E3',X'0004',AL2(RWTRDR6-RWTDSECT),XL2'25'  R4
         DC    CL3'RD7',X'F3',X'0002',AL2(RWTRDR7-RWTDSECT),XL2'26'  R4
         DC    CL3'PR1',X'94',X'0800',AL2(RWTPRT1-RWTDSECT),XL2'B0'  R4
         DC    CL3'PR2',X'A4',X'0400',AL2(RWTPRT2-RWTDSECT),XL2'B1'  R4
         DC    CL3'PR3',X'B4',X'0200',AL2(RWTPRT3-RWTDSECT),XL2'B2'  R4
         DC    CL3'PR4',X'C4',X'0100',AL2(RWTPRT4-RWTDSECT),XL2'B3'  R4
         DC    CL3'PR5',X'D4',X'0008',AL2(RWTPRT5-RWTDSECT),XL2'B4'  R4
         DC    CL3'PR6',X'E4',X'0004',AL2(RWTPRT6-RWTDSECT),XL2'B5'  R4
         DC    CL3'PR7',X'F4',X'0002',AL2(RWTPRT7-RWTDSECT),XL2'B6'  R4
         DC    CL3'PU1',X'95',X'0001',AL2(RWTPUN1-RWTDSECT),XL2'A0'  R4
         DC    CL3'PU2',X'A5',X'0002',AL2(RWTPUN2-RWTDSECT),XL2'A1'  R4
         DC    CL3'PU3',X'B5',X'0004',AL2(RWTPUN3-RWTDSECT),XL2'A2'  R4
         DC    CL3'PU4',X'C5',X'0008',AL2(RWTPUN4-RWTDSECT),XL2'A3'  R4
         DC    CL3'PU5',X'D5',X'0100',AL2(RWTPUN5-RWTDSECT),XL2'A4'  R4
         DC    CL3'PU6',X'E5',X'0200',AL2(RWTPUN6-RWTDSECT),XL2'A5'  R4
         DC    CL3'PU7',X'F5',X'0400',AL2(RWTPUN7-RWTDSECT),XL2'A6'  R4
         SPACE 5
$INITLEN $DLENGTH HEADER=I         COMPUTE CONTROL SECTION LENGTH
APARNUM  DC    CL5'29138'          APAR NUMBER
         END
