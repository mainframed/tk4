         TITLE 'LOAD MODULE LISTER - HMBLKLDM'
         LCLA  &T,&SPN                                            0001
.@001    ANOP                                                     0001
HMBLKLDM CSECT ,                                                  0001
         BC    15,14(0,@F)
         DC    C'©HMBLKLDM'                                       0001
         STM   @E,@C,12(@D)                                       0001
         BALR  @B,0                                               0001
@PSTART  DS    0H                                                 0001
         USING @PSTART+00000,@B                                   0001
         L     @0,@SIZ001                                         0001
         GETMAIN  R,LV=(0)                                        0001
         LR    @C,@1                                              0001
         USING @DATD+00000,@C                                     0001
         LM    @0,@1,20(@D)                                       0001
         XC    @TEMPS(@L),@TEMPS                                  0001
         ST    @D,@SAV001+4                                       0001
         LA    @F,@SAV001                                         0001
         ST    @F,8(0,@D)                                         0001
         LR    @D,@F                                              0001
*         PARMS=PARMLST;                /* LOCAL COPY OF PARAMETERS
*                                          TO AVOID INDIRECT ADDRESSING
*                                          AND SAVING-RESTORING REG 1
*                                          AROUND MACRO INSTRUCTIONS
         MVC   PARMS(57),0(@1)                                    0100
*         SAVE1=REG1;                   /* SAVE PARM LIST POINTER
         ST    @1,SAVE1                                           0101
*         EVCB=LECB;                    /* INITIALIZE DECB
         MVC   EVCB(20),LECB                                      0102
*         RECCNT=0;                     /* INIT RECORD NUMBER
         SR    @F,@F                                              0103
         STH   @F,RECCNT                                          0103
*         P=0;                          /* INIT PAGE NUMBER
         STH   @F,P                                               0104
*         BIGSEG=0;                     /* INITIALIZE SEGMENT NUMBER
         MVI   BIGSEG,0                                           0105
*         SW1='00'X;                    /* INITIALIZE SWITCHES
         MVI   SW1,X'00'                                          0106
*         LINE=' ';                     /* BLANK OUT OUTPUT BUFFER
         MVI   LINE,C' '                                          0107
         MVC   LINE+1(120),LINE                                   0107
*         HDLINE=LINE;                  /* BLANK OUT HEADING BUFFER
         MVC   HDLINE(121),LINE                                   0108
*         TIT1LINE=LINE;                /* BLANK OUT TITLE BUFFER
         MVC   TIT1LINE(121),LINE                                 0109
*         BLANKS=LINE;                  /* BLANK CONVERSION FIELD
         MVC   DBLW2+8(3),LINE                                    0110
*         LASTBYT=ADDR(SIGNBYT);        /* ADDR OF LAST BYTE IN CONV
         LA    @F,DBLW2+7                                         0111
         ST    @F,LASTBYT                                         0111
*         ENDADDR=ADDR(LENHEX)+5;       /* ADDR OF LAST BYTE - HEX CONV
         LA    @F,CESDLIN2+69                                     0112
         ST    @F,ENDADDR                                         0112
*         LINECNT=PGEND;                /* INIT LINE COUNT - 55
         LH    @6,PGEND                                           0113
*         HCC=SKIP2;                    /* CARRIAGE CNTRL-SKIP 2 LINES
         MVC   HDLINE(1),SKIP2                                    0114
*         RECHD=RECHD2;                 /* INITIALIZE HEADING LINE
         MVC   HDLINE+1(7),RECHD2                                 0115
*         TYP1=TYP2;                    /* TYPE
         MVC   HDLINE+15(4),TYP2                                  0116
*         HYPH1=HYPH2;                  /* HYPHEN
         MVC   HDLINE+23(1),STTAB+7                               0117
*         SZHD2=SIZEHD;                 /* SIZE
         MVC   HDLINE+69(4),SIZEHD                                0118
*         TCC=NEWPG;                    /* TO SKIP TO A NEW PAGE
         MVC   TIT1LINE(1),NEWPG                                  0119
*         MEMB=MEMNAME;                 /* MEMBER NAME
         MVC   TIT1LINE+64(8),PARMS+36                            0120
*         TITLE='LISTING OF LOAD MODULE '; /* TITLE - LOAD MOD LISTING
         MVC   TIT1LINE+41(23),@C3                                0121
*         PAGE=PAGE1;                   /* PAGE - HDG
         MVC   TIT1LINE+108(4),PAGE1                              0122
*         IF NOTEDIT='1'B               /* NOT-EDITABLE?              *
*            THEN NESW='1'B;            /* YES - INIT NE SWITCH       *
         TM    PARMS+20,B'00100000'                               0123
         BC    12,@9FF                                            0123
         OI    SW1,B'00000010'                                    0124
*         ADDRX=ADDR(LINE);             /* INITIALIZE OUTPUT POINTER
@9FF     LA    @F,LINE                                            0125
         ST    @F,ADDRX                                           0125
*         LABPTR=ADDR(READIN);          /* RETURN ADDR FOR ENDPAGE
         LA    @4,READIN                                          0126
*         GOTO PRINT;                   /* GO TO PRINT FIRST HEADING
         BC    15,PRINT                                           0127
*
* /********************************************************************
* /*                  PROCESS
* /********************************************************************
*         GEN(READ  LECB,SF,MF=L);      /* LIST FORM OF READ
         READ  LECB,SF,MF=L
         DS    0H
* READIN: PTR2=INDCB;                   /* INPUT DCB ADDRESS
READIN   L     @2,PARMS                                           0129
*         PTR1=INPTR;                   /* INPUT BUFFER ADDRESS
         L     @3,PARMS+24                                        0130
*         GEN(READ  EVCB,SF,(PTR2),(PTR1),'S',MF=E); /* READ INPUT REC.
         READ  EVCB,SF,(PTR2),(PTR1),'S',MF=E
         DS    0H
*         GEN(CHECK EVCB);              /* CHECK FOR END OF READ OPER
         CHECK EVCB
         DS    0H
*         /* CHECK IF MODULE TO BE LISTED IS NOT-EDITABLE             *
*         IF NESW='1'B                  /* IS IT NOT-EDITABLE?        *
*            THEN
         TM    SW1,B'00000010'                                    0133
         BC    12,@9FE                                            0133
*              DO;                      /* YES                        *
*                GENERATE;
         NOTE  (PTR2)                  GET TTR FROM READ
         ST    1,NOTETTR               SAVE TTR FROM NOTE
         DS    0H
*                NESW='0'B;             /* TURN OFF NOT EDITABLE SW   *
         NI    SW1,B'11111101'                                    0136
*              IF NOTETTR(1:3)=TEXTTR   /* DO TTRS MATCH FOR 1ST TEXT *
*                 THEN
         CLC   NOTETTR(3),PARMS+52                                0137
         BC    07,@9FD                                            0137
*                   DO;                 /* PROCESS 1ST TEXT           *
*                     COUNTX=TEXTLEN;   /* SET UP 1ST TEXT LENGTH     *
         MVC   COUNTX(2),PARMS+55                                 0139
*                     TXTADR=0;         /* STARTING ADDRESS OF TEXT   *
         SR    @F,@F                                              0140
         ST    @F,TXTADR                                          0140
*                     IF NORLD='1'B     /* ARE THERE ANY RLDS ?       *
*                        THEN EOMSW='1'B; /* INDICATE NO RLDS & EOM   *
         TM    PARMS+20,B'00010000'                               0141
         BC    12,@9FC                                            0141
         OI    SW1,B'00010000'                                    0142
*                     TXTSW='1'B;       /* TURN ON TEXT SWITCH        *
@9FC     OI    SW1,B'00100000'                                    0143
*                     IF OVLYFL='1'B    /* IS IT OVERLAY STRUCTURE?   *
*                        THEN
         TM    PARMS+20,B'01000000'                               0144
         BC    12,@9FB                                            0144
*                          DO;          /* YES                        *
*                            BIGSEG=SEGRG1;/* SAVE LAST SEG NO IN RGN1*
         L     @8,PARMS+24         PARMS                          0146
         MVC   BIGSEG(1),8(@8)                                    0146
*                            IF SEGRG1<SEGRG2/* RGN2 SEGMENTS?        *
*                               THEN BIGSEG=SEGRG2;/* SAVE LAST SGMT. *
         CLC   8(1,@8),10(@8)                                     0147
         BC    10,@9FA                                            0147
         MVC   BIGSEG(1),10(@8)                                   0148
*                            IF SEGRG2<SEGRG3/* RGN3 SEGMENTS?        *
*                               THEN BIGSEG=SEGRG3;/* SAVE LAST SGMT  *
@9FA     CLC   10(1,@8),12(@8)                                    0149
         BC    10,@9F9                                            0149
         MVC   BIGSEG(1),12(@8)                                   0150
*                            IF SEGRG3<SEGRG4/*RGN4 SEGMENTS?         *
*                               THEN BIGSEG=SEGRG4;/* SAVE RGN4 SGMT  *
@9F9     CLC   12(1,@8),14(@8)                                    0151
         BC    10,@9F8                                            0151
         MVC   BIGSEG(1),14(@8)                                   0152
*                          END;
@9F8     EQU   *                                                  0153
*                   END;
@9FB     EQU   *                                                  0154
*              END;
@9FD     EQU   *                                                  0155
*         IF TTRSW='1'B                 /* IS IT TTR LIST FOR OVLY SEG?
*           THEN GOTO TTRLAB;           /* YES-GO TO PROCESS THE LIST
@9FE     TM    SW1,B'00000100'                                    0156
         BC    01,TTRLAB                                          0157
*         RECCNT=RECCNT+1;              /* INCREASE RECORD NUMBER BY 1
         LA    @F,1                                               0158
         AH    @F,RECCNT                                          0158
         STH   @F,RECCNT                                          0158
*         PTR2=RECCNT;                  /* REC NUMBER INTO REG FOR CONV
         LR    @2,@F                                              0159
*         LABPTR2=ADDR(RECNO);          /* RETURN ADDR FOR CONVDEC RTN
         LA    @5,RECNO                                           0160
*         GOTO CONVDEC;                 /* TO CONVERT RECORD NUMBER
         BC    15,CONVDEC                                         0161
* RECNO:  RECNUM=WKX;                   /* RECORD NUMBER IN DECIMAL
RECNO    MVC   HDLINE+9(4),0(@2)                                  0162
*         IF TXTSW='1'B                 /* IS IT TEXT?
*           THEN GOTO TEXT1;            /* YES - GO TO PROCESS TEXT
         TM    SW1,B'00100000'                                    0163
         BC    01,TEXT1                                           0164
*         WK3=ID;                       /* RECORD ID FOR CONVERSION
         L     @8,PARMS+24         PARMS                          0165
         MVC   DBLW2+4(1),0(@8)                                   0165
*         GENERATE;
         UNPK  TYPEID(3),WK3(2)        CONVERT RECORD ID
         NC    TYPEID(2),ZONEOFF       CLEAR HIGH ORD 4 BITS
         TR    TYPEID(2),TABLE         TRANSLATE TO PRINTABLE HEX
         DS    0H
*         SPAR2=' ';                    /* CLEAR IGNORED BYTE
         MVI   HDLINE+22,C' '                                     0167
*         /* IF AT LEAST ONE CONTROL RECORD HAVE BEEN ENCOUNTERED,
*            DO NOT TEST FOR SYM,CESD,IDR OR SCATTER-TRANSLATION RECORD
*            BUT GO DIRECTLY TO CHECK FOR RLD OR CONTROL RECORD
*         IF SKIPSW='1'B
*           THEN GOTO NEXTREC;
         TM    SW1,B'00001000'                                    0168
         BC    01,NEXTREC                                         0169
*         IF SCTRSW='1'B                /*MORE THAN ONE SC-TR REC?
*           THEN
         TM    SW1,B'10000000'                                    0170
         BC    12,@9F7                                            0170
*             DO;                       /* YES -
*               SCTRCNT=SCTRCNT-1;      /* DECREASE SC-TR RECORD COUNT
         LH    @F,SCTRCNT                                         0172
         BCTR  @F,0                                               0172
         STH   @F,SCTRCNT                                         0172
*               IF SCTRCNT=1            /* LAST SC-TR RECORD?
*                 THEN
         LA    @F,1                                               0173
         CH    @F,SCTRCNT                                         0173
         BC    07,@9F6                                            0173
*                   DO;                 /* YES - LAST RECORD
*                     IF ERRORS(4)='0'B /* IF NO ERROR THEN PRINT RTN
*                                          WILL GO TO PROCESS TABLES
*                       THEN LABPTR=ADDR(SCTRB);
         TM    PARMS+32,B'00010000'                               0175
         BC    05,@9F5                                            0175
         LA    @4,SCTRB                                           0176
         BC    15,@9F4                                            0177
*                       ELSE SCTRSW='0'B; /* IF ERROR THEN ONLY LAST HD
*                                            WILL BE PRINTED
@9F5     NI    SW1,B'01111111'                                    0177
*                     GOTO SCTRHDG;     /* GO TO PRINT SC-TR HDG
         BC    15,SCTRHDG                                         0178
*                   END;
*                 ELSE                  /* NO - MORE RECORDS
*                   IF ERRORS(4)='0'B   /* ERROR?
*                     THEN GOTO SCTRA;  /* NO - GO TO MOVE SC-TR DATA
@9F6     TM    PARMS+32,B'00010000'                               0180
*                                          TO WORK AREA
         BC    08,SCTRA                                           0181
*                     ELSE GOTO SCTRHDG; /* YES - GO TO PRINT HDG
         BC    15,SCTRHDG                                         0182
*             END;                      /* END OF TEST FOR SC-TR
@9F3     EQU   *                                                  0183
*
* /********************************************************************
* /*  THIS SECTION OF CODE PROCESSES SYM AND IDR RECORDS DATA.
* /*  IF MODULE IS IN OVERLAY STRUCTURE THE TTR LIST FOR OVERLAY
* /*  SEGMENTS IS PRINTED BY THIS CODE ALSO.
* /********************************************************************
*         IF ID=SYM                     /* IS IT SYM RECORD?
*           THEN
@9F7     L     @8,PARMS+24         PARMS                          0184
         CLC   0(1,@8),SYM                                        0184
         BC    07,@9F2                                            0184
*             DO;                       /* YES -
*               PTR1=PTR1+4;            /* POINT TO SYM RECORD DATA
         LA    @3,4(0,@3)                                         0186
*               COUNTX=COUNT;           /* SYM RECORD DATA COUNT
         MVC   COUNTX(2),2(@8)                                    0187
*               TP2=SYMHD;              /* SYM RECORD HEADING
         MVC   HDLINE+25(3),SYMHD                                 0188
         MVI   HDLINE+28,C' '                                     0188
         MVC   HDLINE+29(3),HDLINE+28                             0188
*               WK3=SYMSUBT;            /* SYM REC SUBTYPE FOR CONV
         MVC   DBLW2+4(1),1(@8)                                   0189
* IDRLAB:       GENERATE;               /* CONVERTING SUBTYPE ID
IDRLAB   EQU   *                                                  0190
         UNPK  SUBTYPID(3),WK3(2)      RESULT DIRECTLY INTO THE BUFFER
         NC    SUBTYPID(2),ZONEOFF     CLEAR HIGH ORDER 4 BITS
         TR    SUBTYPID(2),TABLE       TRANSLATE TO PRINTABLE CHAR
         DS    0H
*               SUBTYPID(3)=' ';        /* CLEAR LAST BYTE
         MVI   HDLINE+42,C' '                                     0191
*               TP3=SYMSHD;             /* SYM REC SUBTYPE HEADING
         MVC   HDLINE+32(7),SYMSHD                                0192
*               DATAHD1=DATAHD2;        /* FORMATTING OUTPUT LINE
         MVC   HDLINE+64(4),DATAHD2                               0193
*               PTR2=COUNTX;            /* IDR/SYM DATA COUNT FOR CONV
         LH    @2,COUNTX                                          0194
*               LABPTR2=ADDR(SYMLAB1);  /* RETURN ADDR FROM CONVERSION
         LA    @5,SYMLAB1                                         0195
*               GOTO CONVDEC;           /* TO CONV SYM DATA COUNT
         BC    15,CONVDEC                                         0196
* SYMLAB1:      SZ2=WKX;                /* CONVERTED NUMBER
SYMLAB1  MVC   HDLINE+74(4),0(@2)                                 0197
*               LABPTR2=ADDR(READIN);   /* RETURN ADDR FOR CONV RTN
         LA    @5,READIN                                          0198
*               ADDRX=ADDR(HDLINE);     /* POINT TO HEADING LINE
         LA    @F,HDLINE                                          0199
         ST    @F,ADDRX                                           0199
*               LABPTR=ADDR(TTRLAB);    /* RETURN ADDR FROM PRINT RTN
         LA    @4,TTRLAB                                          0200
*               IF LINECNT>49           /* DO NOT START NEW RECORD HDG
*                                          AT THE BOTTOM OF THE PAGE
*                 THEN LINECNT=PGEND;
         CH    @6,@D1                                             0201
         BC    12,@9F1                                            0201
         LH    @6,PGEND                                           0202
         BC    15,@9F0                                            0203
*                 ELSE LINECNT=LINECNT+2; /* INCREASE LINE COUNT
@9F1     AH    @6,@D2                                             0203
*               GOTO PRINT;             /* GO TO PRINT SYM/IDR HEADING
         BC    15,PRINT                                           0204
* TTRLAB:       CC=SKIP2;               /* CARRIAGE CTL - SKIP 2 LINES
TTRLAB   MVC   LINE(1),SKIP2                                      0205
*               LABPTR=ADDR(CONVSYM);   /* INIT LOOP ADDRESS
         LA    @4,CONVSYM                                         0206
*               ADDRX=ADDR(LINE);       /* POINT TO OUTPUT BUFFER
         LA    @F,LINE                                            0207
         ST    @F,ADDRX                                           0207
* CONVSYM:      PTR2=ADDR(OLINE);       /* OUTPUT LINE ADDRESS
CONVSYM  LA    @2,LINE+13                                         0208
*               DO I=1 TO 10;           /* TEN 4-BYTE ENTRIES PER LINE
         LA    @7,1                                               0209
@DO9EF   EQU   *                                                  0209
*                 GENERATE;             /* CONVERT SYM/IDR DATA
         UNPK  0(9,PTR2),0(5,PTR1)     CONVERTING DIRECTLY INTO BUFFER
         NC    0(8,PTR2),ZONEOFF       CLEAR HIGH ORDER 4 BITS
         TR    0(8,PTR2),TABLE         TRANSLATE TO PRINTABLE CHAR
         MVI   8(PTR2),BLANK           CLEAR LAST BYTE
         DS    0H
*                 COUNTX=COUNTX-4;      /* DECREASE BYTE COUNT
         LH    @F,COUNTX                                          0211
         SH    @F,@D3                                             0211
         STH   @F,COUNTX                                          0211
*                 IF COUNTX<=0          /* END OF DATA?
*                   THEN
         SR    @F,@F                                              0212
         CH    @F,COUNTX                                          0212
         BC    04,@9EB                                            0212
*                     DO;               /* YES -
*                       /* IDR DATA COUNT MAY BE NOT AN EVEN MULT. OF 4
*                       IF COUNTX<0     /* IS COUNT A NEGATIVE NUMBER?
*                         THEN
         CH    @F,COUNTX                                          0214
         BC    12,@9EA                                            0214
*                           DO;         /* YES -
*                             PTR2=PTR2+X*2; /* POINT TO IDR DATA END
         LH    @E,X                                               0216
         AR    @E,@E                                              0216
         AR    @E,@2                                              0216
         LR    @2,@E                                              0216
*                             IDREND=' '; /* BLANKS IN PLACE OF GARBAGE
         MVI   0(@2),C' '                                         0217
         MVC   1(5,@2),0(@2)                                      0217
*                           END;
*                       LABPTR=LABPTR2; /* BRANCH AT END OF DATA
@9EA     LR    @4,@5                                              0219
*                       GOTO PRINT;     /* GO TO PRINT LAST LINE
         BC    15,PRINT                                           0220
*                     END;
*                 PTR1=PTR1+4;          /* ADVANCE INPUT DATA POINTER
@9EB     LA    @3,4(0,@3)                                         0222
*                 PTR2=PTR2+10;         /* NEXT ENTRY ON OUTPUT LINE
         LA    @2,10(0,@2)                                        0223
*               END;
*               GOTO PRINT;             /* GO TO PRINT DATA
         AH    @7,@D4                                             0224
@DO9EE   CH    @7,@D5                                             0224
         BC    12,@DO9EF                                          0224
         BC    15,PRINT                                           0225
*             END;                      /* END OF SYM,IDR AND TTR LST
*                                          FOR OVLY SEGMENTS PROCESSING
*
* /********************************************************************
* /*                CESD RECORD PROCESSING
* /********************************************************************
*         IF ID=CESD                    /* CESD RECORD?
*           THEN
@9F2     L     @8,PARMS+24         PARMS                          0227
         CLC   0(1,@8),CESD                                       0227
         BC    07,@9E9                                            0227
*             DO;                       /* YES -
*               LABPTR2=ADDR(CESDLAB);  /* RETURN ADDR FOR CONVDEC
         LA    @5,CESDLAB                                         0229
*               PTR2=COUNT2;            /* ESD DATA COUNT
         LH    @2,6(0,@8)                                         0230
*               GOTO CONVDEC;           /* GO TO CONVERSION RTN
         BC    15,CONVDEC                                         0231
* CESDLAB:      SZ2=WKX;                /* CONVTD NUMB IN OUTPUT BUFFER
CESDLAB  MVC   HDLINE+74(4),0(@2)                                 0232
*               TP2=CESDTYP;            /* RECORD TYPE - CESD
         MVC   HDLINE+25(4),CESDTYP                               0233
         MVI   HDLINE+29,C' '                                     0233
         MVC   HDLINE+30(2),HDLINE+29                             0233
*               TP3=ESDIDHD;            /* ESDID HEADING
         MVC   HDLINE+32(7),ESDIDHD                               0234
*               DATAHD1=ESDHD;          /* ESD HEADING
         MVC   HDLINE+64(4),ESDHD                                 0235
*               PTR2=COUNT1;            /* ESDID OF FIRST ESD ITEM
         L     @8,PARMS+24         PARMS                          0236
         LH    @2,4(0,@8)                                         0236
*               LABPTR2=ADDR(CESDL1);   /* RETURN ADDR FOR CONVDEC
         LA    @5,CESDL1                                          0237
*               GOTO CONVDEC;           /* GO TO CONVERSION RTN
         BC    15,CONVDEC                                         0238
* CESDL1:       SUBTYPID=WKX;           /* ESDID OF FIRST ESD ITEM
CESDL1   MVC   HDLINE+40(4),0(@2)                                 0239
*               IF LINECNT>48           /* DO NOT START NEW RECORD HDG
*                                          AT THE BOTTOM OF THE PAGE
*                 THEN LINECNT=PGEND;
         CH    @6,@D6                                             0240
         BC    12,@9E8                                            0240
         LH    @6,PGEND                                           0241
         BC    15,@9E7                                            0242
*                 ELSE LINECNT=LINECNT+2; /* INCREASE LINE COUNT
@9E8     AH    @6,@D2                                             0242
*               ADDRX=ADDR(HDLINE);     /* POINT TO THE HEADING LINE
@9E7     LA    @F,HDLINE                                          0243
         ST    @F,ADDRX                                           0243
*               LABPTR=ADDR(CESDL2);    /* RET ADDR FOR PRINT ROUTINE
         LA    @4,CESDL2                                          0244
*               GOTO PRINT;             /* GO TO PRINT CESD HEADING
         BC    15,PRINT                                           0245
* CESDL2:       ADDRX=ADDR(LINE);       /* POINT TO OUTPUT BUFFER
CESDL2   LA    @F,LINE                                            0246
         ST    @F,ADDRX                                           0246
*               OLINE(4:74)=CESDLIN1;   /* CESD SUBHEADING INTO BUFFER
         MVC   LINE+16(71),CESDLIN1                               0247
*               CC=SKIP2;               /* SKIP 2 LINES - CESD SUBHDG
         MVC   LINE(1),SKIP2                                      0248
*               LABPTR=ADDR(CESDL2A);   /* RET ADDR FOR PRINT ROUTINE
         LA    @4,CESDL2A                                         0249
*               GOTO PRINT;             /* GO TO PRINT CESD SUBHEADING
         BC    15,PRINT                                           0250
* /********************************************************************
* /*           CESD RECORD DATA - EACH PASS WILL PRINT 1 LINE
* /********************************************************************
* CESDL2A:      LABPTR=ADDR(CESDL6);    /* RETURN ADDR FOR PRINT RTN
CESDL2A  LA    @4,CESDL6                                          0251
*               COUNTX=COUNT2;          /* CESD DATA COUNT
         L     @8,PARMS+24         PARMS                          0252
         MVC   COUNTX(2),6(@8)                                    0252
*               CESDCNT=COUNT1;         /* INIT CESD # TO FIRST ESDID
         MVC   CESDCNT(2),4(@8)                                   0253
*               DO I=COUNTX TO 16 BY -16; /* PROCESS 16-BYTE ENTRIES
         LH    @7,COUNTX                                          0254
         BC    15,@DO9E5                                          0254
*                 PTR2=CESDCNT;         /* CESD ITEM COUNT FOR CONV
@DO9E6   LH    @2,CESDCNT                                         0255
*                 LABPTR2=ADDR(CESDL3); /* RETURN ADDR FOR CONVDEC
         LA    @5,CESDL3                                          0256
*                 GOTO CONVDEC;         /* GO TO CONV CESD ITEM COUNT
         BC    15,CONVDEC                                         0257
* CESDL3:         CESDNUM2=WK2;         /* FORMATTING OUTPUT LINE
CESDL3   MVC   CESDLIN2(4),DBLW2+4                                0258
*                 CESDCNT=CESDCNT+1;    /* CESD ITEMS COUNT
         LA    @F,1                                               0259
         AH    @F,CESDCNT                                         0259
         STH   @F,CESDCNT                                         0259
*                 WK1=TPADDR;           /* CESD DATA FOR CONVERSION
         MVC   DBLW2(4),16(@3)                                    0260
*                 GENERATE;             /* CONVERT TYPE & ADDRESS FIELD
         UNPK  DBLW(9),WK1(5)          LAST BYTE WILL BE IGNORED
         NC    DBLW(8),ZONEOFF         CLEAR HIGH ORDER 4 BITS
         TR    DBLW(8),TABLE           TRANSLATE TO PRINTABLE CHAR
         DS    0H
*                 CESDTYP1=HWRD1;       /* CESD ITEM ID
         MVC   CESDLIN2+18(2),DBLW                                0262
*                 TYPE=TYPE & '0F'X;    /* CLEAR HIGH ORDER 4 BITS
         NI    16(@3),X'0F'                                       0263
*                 CESDTYP2=CESDTYPE(TYPE+1); /* CESD ITEM NAME
         SR    @8,@8                                              0264
         IC    @8,16(0,@3)                                        0264
         MH    @8,@D7                                             0264
         LA    @E,CESDTYPE(@8)                                    0264
         MVC   CESDLIN2+20(6),0(@E)                               0264
*                 CSECTADR=SIXBYT;      /* CSECT ADDRESS
         MVC   CESDLIN2+29(6),DBLW+2                              0265
*                 SYMB=SYMBOL;          /* EXTERNAL NAME FOR CESD ITEMS
         MVC   CESDLIN2+8(8),8(@3)                                0266
*                 IF TYPE=LR            /* LABEL REFERENCE ITEM?
*                   THEN LNGTH=LNGTH&'00FFFF'X; /* YES-CLEAR FIRST BYTE
         CLC   16(1,@3),LR                                        0267
         BC    07,@9E2                                            0267
*                                                  OF ID/LENGTH FIELD
         NC    21(3,@3),@X7                                       0268
*                 IF TYPE=ER × TYPE=WX  /* ER OR WX ITEM?
*                   THEN
@9E2     CLC   16(1,@3),ER                                        0269
         BC    08,@9E1                                            0269
         CLC   16(1,@3),WX                                        0269
         BC    07,@9E0                                            0269
*                     DO;               /* YES - NO CONVERSION REQUIRED
*                       IF LNGTH(1)='06'X /* NEVER CALL ITEM?
*                         THEN
@9E1     CLI   21(@3),X'06'                                       0271
         BC    07,@9DF                                            0271
*                           DO;         /* YES -
*                             LENDEC(7:8)='06'; /* DEC ID
         MVC   CESDLIN2+56(2),@C9                                 0273
*                             LENHEX(5:6)='06'; /* HEX ID
         MVC   CESDLIN2+68(2),@C9                                 0274
*                             NEVCALL=NCMSG; /* NEVER CALL MESSAGE
         MVC   CESDLIN2+72(10),NCMSG                              0275
         BC    15,@9DE                                            0277
*                           END;
*                         ELSE
*                           DO;         /* NOT A NEVER CALL ER
*                             LENDEC=LNGTH; /* DEC LENGTH - BLANKS
@9DF     MVC   CESDLIN2+50(3),21(@3)                              0278
         MVI   CESDLIN2+53,C' '                                   0278
         MVC   CESDLIN2+54(4),CESDLIN2+53                         0278
*                             LENHEX=LNGTH; /* HEX LENGTH - BLANKS
         MVC   CESDLIN2+64(3),21(@3)                              0279
         MVI   CESDLIN2+67,C' '                                   0279
         MVC   CESDLIN2+68(2),CESDLIN2+67                         0279
*                           END;
*                     END;
         BC    15,@9DD                                            0282
*                   ELSE                /* NO - ITEM NOT ER
*                     DO;               /* CONVERT LENGTH FIELD
*                       WK4=LNGTH;      /* LENGTH FIELD TO BE CONVERTED
@9E0     MVC   DBLW2+5(3),21(@3)                                  0283
*                       GENERATE;       /* CONV TO PRINTABLE HEX
         UNPK  LENHEX(7),WK4(4)        LAST BYTE WILL BE INGORED
         NC    LENHEX(6),ZONEOFF       CLEAR HIGH ORDER 4 BITS
         TR    LENHEX(6),TABLE         TRANSLATE TO PRINTABLE CHAR
         MVI   LENHEX+6,BLANK          CLEAR LAST BYTE
         DS    0H
*                       /* BLANK OUT LEADING ZEROS IN HEX LENGTH FIELD
*                       PTR2=ADDR(LENHEX); /* POINT TO THE FIRST BYTE
         LA    @2,CESDLIN2+64                                     0285
* NEXTBYT:              IF BYTE='0'     /* IS IT ZERO?
*                         THEN
NEXTBYT  CLI   0(@2),C'0'                                         0286
         BC    07,@9DC                                            0286
*                           DO;         /* YES -
*                             BYTE=' '; /* BLANK IN PLACE OF ZERO
         MVI   0(@2),C' '                                         0288
*                             PTR2=PTR2+1; /* POINT TO THE NEXT BYTE
         LA    @2,1(0,@2)                                         0289
*                             IF PTR2<ENDADDR /* LAST BYTE?
*                               THEN GOTO NEXTBYT; /* NO - CHECK NEXT
         C     @2,ENDADDR                                         0290
         BC    04,NEXTBYT                                         0291
*                           END;
*                       IF OVLYFL='1'B & NOTEDIT='0'B /* OVERLAY &
*                                         NOT-EDITABLE?               *
*                         THEN
@9DC     TM    PARMS+20,B'01000000'                               0293
         BC    12,@9DB                                            0293
         TM    PARMS+20,B'00100000'                               0293
         BC    05,@9DA                                            0293
*                           IF SEGNUM>BIGSEG /* YES-SAVE NUMBER OF SEGM
*                             THEN BIGSEG=SEGNUM; /*# OF ELEM IN TTRLST
         CLC   20(1,@3),BIGSEG                                    0294
         BC    12,@9D9                                            0294
         MVC   BIGSEG(1),20(@3)                                   0295
*                       PTR2=SEGNUM;    /* FOR SEGMENT NUMBER CONV
@9D9     EQU   *                                                  0296
@9DA     EQU   *                                                  0296
@9DB     SR    @2,@2                                              0296
         IC    @2,20(0,@3)                                        0296
*                       LABPTR2=ADDR(CESDL4); /* RETURN ADDRESS
         LA    @5,CESDL4                                          0297
*                       GOTO CONVDEC;   /* TO CONVERT SEG NUMBER TO DEC
         BC    15,CONVDEC                                         0298
* CESDL4:               SEGNO=WK4;      /* SEGMENT NUMBER INTO BUFFER
CESDL4   MVC   CESDLIN2+41(3),DBLW2+5                             0299
*                       PTR2=LNGTH;     /* FOR CONVERSION
         MVC   @TEMP3+1(3),21(@3)                                 0300
         L     @2,@TEMP3                                          0300
*                       LABPTR2=ADDR(CESDL5); /* RETURN ADDRESS
         LA    @5,CESDL5                                          0301
*                       GOTO CONVDEC;   /* TO CONV ROUTINE
         BC    15,CONVDEC                                         0302
* CESDL5:               LENDEC=DBLW2;   /* LENGTH IN DECIMAL
CESDL5   MVC   CESDLIN2+50(8),DBLW2                               0303
*                     END;
*                 GOTO PRINT;           /* GO TO PRINT CESD LINE
         BC    15,PRINT                                           0305
* CESDL6:         PTR1=PTR1+16;         /* POINT TO THE NEXT CESD ITEM
CESDL6   LA    @3,16(0,@3)                                        0306
*               END;                    /* END OF ONE CESD LINE
*               GOTO READIN;            /* GO TO READ NEXT RECORD
         SH    @7,@D8                                             0307
@DO9E5   CH    @7,@D8                                             0307
         BC    10,@DO9E6                                          0307
         BC    15,READIN                                          0308
*             END;                      /* END OF CESD REC PROCESSING
* /********************************************************************
* /*               IDR RECORD
* /********************************************************************
*         IF ID=IDR                     /* IDR RECORD?
*           THEN
@9E9     L     @8,PARMS+24         PARMS                          0310
         CLC   0(1,@8),IDR                                        0310
         BC    07,@9D8                                            0310
*             DO;                       /* YES -
*               WK3=IDRSUB;             /* IDR SUBTYPE FOR CONVERSION
         MVC   DBLW2+4(1),2(@8)                                   0312
*               TP2=IDRTYPE;            /* IDR NAME IN HEADING
         MVC   HDLINE+25(3),IDRTYPE                               0313
         MVI   HDLINE+28,C' '                                     0313
         MVC   HDLINE+29(3),HDLINE+28                             0313
*               COUNTX=IDRCNT-2;        /* IDR RECORD DATA COUNT
         LH    @F,@D9                                             0314
         SR    @0,@0                                              0314
         IC    @0,1(0,@8)                                         0314
         AR    @F,@0                                              0314
         STH   @F,COUNTX                                          0314
*               X=COUNTX//4;            /* REMAINDER - WILL BE USED
*                                          AT THE END OF IDR DATA PROC.
         LR    @E,@F                                              0315
         SRDA  @E,32                                              0315
         LA    @0,4                                               0315
         DR    @E,@0                                              0315
         STH   @E,X                                               0315
*               PTR1=ADDR(IDRDATA);     /* BEGINNING OF IDR DATA ADDR
         LA    @3,3(0,@8)                                         0316
*               GOTO IDRLAB;            /* GO TO PROCESS IDR REC DATA
         BC    15,IDRLAB                                          0317
*             END;
*
* /********************************************************************
* /*             SCATTER-TRANSLATION RECORD
* /********************************************************************
*         IF ID=SCTR                    /* SCTR-TRANS?
*           THEN
@9D8     L     @8,PARMS+24         PARMS                          0319
         CLC   0(1,@8),SCTR                                       0319
         BC    07,@9D7                                            0319
*             DO;                       /* YES -
*               TYPENAME=STTAB;         /* RECORD TYPE NAME
         MVC   HDLINE+25(19),STTAB                                0321
*               DATAHD1=DATAHD2;        /* DATA HEADING
         MVC   HDLINE+64(4),DATAHD2                               0322
*               SCTRCNT=1;              /* INITIALIZE SC-TR RECORD CNT
         LA    @F,1                                               0323
         STH   @F,SCTRCNT                                         0323
*               COUNTX=SCSZ+TRSZ;       /* TOTAL SCATT-TRANS DATA SIZE
         LH    @F,PARMS+30                                        0324
         AH    @F,PARMS+28                                        0324
         STH   @F,COUNTX                                          0324
*               IF COUNTX<=MAXREC       /* WORK AREA NEEDED?
*                 THEN LABPTR=ADDR(SCTRB); /* NO - RET ADR FOR PRINT RT
         LH    @F,MAXREC                                          0325
         CH    @F,COUNTX                                          0325
         BC    04,@9D6                                            0325
*                                             AFTER PRINTING SC-TR HDG
         LA    @4,SCTRB                                           0326
         BC    15,@9D5                                            0327
*                 ELSE
*                   DO;                 /* YES- MORE THAN ONE SC-TR REC
*                     LABPTR=ADDR(READIN); /* PRINT WILL GO TO READ NEX
*                                             REC AFTER PRINTING HDG
@9D6     LA    @4,READIN                                          0328
*                     SCTRSW='1'B;      /* MORE THAN ONE SC-TR REC SW
         OI    SW1,B'10000000'                                    0329
*                     SCTRCNT=COUNTX/MAXREC; /* NUMBER OF SC-TR RECORDS
         LH    @E,COUNTX                                          0330
         SRDA  @E,32                                              0330
         LH    @0,MAXREC                                          0330
         DR    @E,@0                                              0330
         STH   @F,SCTRCNT                                         0330
*                     X=COUNTX//MAXREC; /* NUMBER OF BYTES IN LAST REC
         STH   @E,X                                               0331
*                     /* COMPUTING SIZE OF WORK AREA FOR SCATTER-TRANSL
*                     IF X=0            /* EXACTLY 1K RECORDS?
*                       THEN X=COUNTX-MAXREC; /* YES- X NOW HOLDS THE
         SR    @F,@F                                              0332
         CH    @F,X                                               0332
         BC    07,@9D4                                            0332
*                                                SIZE OF WRK AR NEEDED
         LH    @F,COUNTX                                          0333
         SH    @F,MAXREC                                          0333
         STH   @F,X                                               0333
         BC    15,@9D3                                            0334
*                       ELSE            /* NO -
*                         DO;           /* X HAS THE SIZE OF LAST REC
*                           SCTRCNT=SCTRCNT+1; /* NUMBER OF SC-TR REC
@9D4     LA    @F,1                                               0335
         AH    @F,SCTRCNT                                         0335
         STH   @F,SCTRCNT                                         0335
*                           X=COUNTX-X; /* X NOW HOLDS THE SIZE
*                                          OF WORK AREA NEEDED
         LH    @F,COUNTX                                          0336
         SH    @F,X                                               0336
         STH   @F,X                                               0336
*                         END;
*                     IF X>STORLEN      /* WORK AREA BIG ENOUGH?
*                       THEN
@9D3     L     @F,PARMS+16                                        0338
         CH    @F,X                                               0338
         BC    10,@9D2                                            0338
*                         DO;           /* NO -
*                           ERRORS(4)='1'B; /* ERROR-MORE STORAGE REQD
         OI    PARMS+32,B'00010000'                               0340
*                           GOTO SCTRHDG; /* GO TO PRINT HEADING
         BC    15,SCTRHDG                                         0341
*                         END;
*                     SCTRPTR=MAINADDR+STORLEN; /* END OF WORK AREA ADR
@9D2     L     @F,PARMS+16                                        0343
         A     @F,PARMS+12                                        0343
         ST    @F,SCTRPTR                                         0343
*                     SCTRPTR=SCTRPTR-4;/* ADJ FUTURE UNPACK   XA03396
         SH    @F,@D3                                             0344
         ST    @F,SCTRPTR                                         0344
*
* SCTRA:              SCTRPTR=SCTRPTR-MAXREC; /* POINT TO CURRENT REC
SCTRA    L     @F,SCTRPTR                                         0345
         SH    @F,MAXREC                                          0345
         ST    @F,SCTRPTR                                         0345
*
*                     /* MOVING SCATTER-TRANSLATION DATA TO WORK AREA
*                     SCTRREC(1:256)=RECORD(5:260);
         L     @8,PARMS+24         PARMS                          0346
         LR    @9,@F                                              0346
         MVC   0(256,@9),4(@8)                                    0346
*                     SCTRREC(257:512)=RECORD(261:516);
         MVC   256(256,@9),260(@8)                                0347
*                     SCTRREC(513:768)=RECORD(517:772);
         MVC   512(256,@9),516(@8)                                0348
*                     SCTRREC(769:1020)=RECORD(773:1024);
         MVC   768(252,@9),772(@8)                                0349
*                   END;
* SCTRHDG:      PTR2=COUNT;             /* SCATTER DATA SIZE
@9D5     EQU   *                                                  0351
SCTRHDG  L     @8,PARMS+24         PARMS                          0351
         LH    @2,2(0,@8)                                         0351
*               LABPTR2=ADDR(SCTRL1);   /* RETURN ADDR FOR CONV RTN
         LA    @5,SCTRL1                                          0352
*               GOTO CONVDEC;           /* TO CONV RECORD COUNT
         BC    15,CONVDEC                                         0353
* SCTRL1:       SZ2=WKX;                /* COUNT IN DECIMAL
SCTRL1   MVC   HDLINE+74(4),0(@2)                                 0354
*               IF LINECNT>48           /* DO NOT START NEW RECORD HDG
*                                          AT THE BOTTOM OF THE PAGE
*                THEN LINECNT=PGEND;
         CH    @6,@D6                                             0355
         BC    12,@9D1                                            0355
         LH    @6,PGEND                                           0356
         BC    15,@9D0                                            0357
*                 ELSE LINECNT=LINECNT+2; /* INCREASE LINE COUNT
@9D1     AH    @6,@D2                                             0357
*               ADDRX=ADDR(HDLINE);     /* POINT TO HEADING LINE
@9D0     LA    @F,HDLINE                                          0358
         ST    @F,ADDRX                                           0358
*               GOTO PRINT;             /* TO PRINT SCTR-TRANS HEADING
         BC    15,PRINT                                           0359
* /********************************************************************
* /*             TRANSLATION TABLE PROCESSING
* /********************************************************************
* SCTRB:        PTR1=PTR1+4;            /* POINT TO SCATTER-TRANSL DATA
SCTRB    LA    @3,4(0,@3)                                         0360
*               IF SCTRSW='1'B          /* MORE THAN ONE REC?
*                 THEN ENDADDR=PTR1+COUNT; /* YES-GET END OF BUFF ADDR
         TM    SW1,B'10000000'                                    0361
         BC    12,@9CF                                            0361
         L     @8,PARMS+24         PARMS                          0362
         LH    @F,2(0,@8)                                         0362
         AR    @F,@3                                              0362
         ST    @F,ENDADDR                                         0362
*               OLIN2=TRTAB;            /* TRANSLATION HEADING
@9CF     MVC   LINE+52(11),STTAB+8                                0363
*               OLIN5=TAB;              /* TABLE HEADING
         MVC   LINE+64(5),TAB                                     0364
*               CC=SKIP2;               /* SKIP 2 LINES BEFORE HDG
         MVC   LINE(1),SKIP2                                      0365
*               ADDRX=ADDR(LINE);       /* POINT TO OUTPUT BUFFER
         LA    @F,LINE                                            0366
         ST    @F,ADDRX                                           0366
*               LABPTR=ADDR(SCTRL3);    /* RET ADDR FOR PRINT ROUTINE
         LA    @4,SCTRL3                                          0367
*               GOTO PRINT;             /* GO TO PRINT SCATTER TAB HDG
         BC    15,PRINT                                           0368
* SCTRL3:       COUNTX=TRSZ;            /* TRANSLATION TABLE SIZE
SCTRL3   MVC   COUNTX(2),PARMS+30                                 0369
*               LABPTR2=ADDR(SCTRL4);   /* RETURN ADDR FOR CONVDEC RTN
         LA    @5,SCTRL4                                          0370
*               LABPTR=ADDR(NEXTTR);    /* RETURN ADDR FOR PRINT RTN
         LA    @4,NEXTTR                                          0371
* NEXTTR:       DATAPTR=ADDR(OLINE);    /* INITIAL OUTPUT LINE ENTRY
NEXTTR   LA    @F,LINE+13                                         0372
         ST    @F,DATAPTR                                         0372
*               DO I=1 TO 20;           /* 20 ENTRIES PER LINE
         LA    @7,1                                               0373
*                 PTR2=TR1;             /* FOR CONVERSION TO DEC
@DO9CE   LH    @2,0(0,@3)                                         0374
*                 GOTO CONVDEC;         /* TO CONVERT TR-TAB DATA
         BC    15,CONVDEC                                         0375
* SCTRL4:         TR2=WK2;              /* OUTPUT BUFFER - 4 BYTES
SCTRL4   L     @8,DATAPTR                                         0376
         MVC   0(4,@8),DBLW2+4                                    0376
*                 PTR1=PTR1+2;          /* POINT TO NEXT ITEM
         LA    @3,2(0,@3)                                         0377
*                 COUNTX=COUNTX-2;      /* TRANSLATION TABLE BYTE COUNT
         LH    @F,COUNTX                                          0378
         SH    @F,@D2                                             0378
         STH   @F,COUNTX                                          0378
*                 IF COUNTX<=0          /* END OF TRANSLATION TABLE?
*                   THEN
         SR    @F,@F                                              0379
         CH    @F,COUNTX                                          0379
         BC    04,@9CA                                            0379
*                     DO;               /* YES -
*                       LABPTR=ADDR(SCATTER); /* GO TO SCTR PROCESSING
*                                                AFTER PRINT. LAST LINE
         LA    @4,SCATTER                                         0381
*                       COUNTX=SCSZ;    /* SCATTER TABLE SIZE
         MVC   COUNTX(2),PARMS+28                                 0382
*                       GOTO PRINT;     /* TO PROCESS LAST LINE
         BC    15,PRINT                                           0383
*                     END;
*                 IF SCTRSW='1'B & PTR1=ENDADDR /* ANY DATA IN WK AREA
*                                                  AND END OF BUFFER?
*                   THEN
@9CA     TM    SW1,B'10000000'                                    0385
         BC    12,@9C9                                            0385
         C     @3,ENDADDR                                         0385
         BC    07,@9C8                                            0385
*                     DO;               /* YES -
*                       SCTRSW='0'B;    /* BUFFER DATA PROCESSED INDIC.
         NI    SW1,B'01111111'                                    0387
*                       PTR1=SCTRPTR;   /* POINT TO WORK AREA
         L     @3,SCTRPTR                                         0388
*                     END;
*                 DATAPTR=DATAPTR+5;    /* ADVANCE OUTPUT LINE POINTER
@9C8     EQU   *                                                  0390
@9C9     LA    @F,5                                               0390
         A     @F,DATAPTR                                         0390
         ST    @F,DATAPTR                                         0390
*               END;                    /* END OF ONE LINE LOOP
*               GOTO PRINT;             /* GO PRINT TRASLATION TAB LINE
         AH    @7,@D4                                             0391
@DO9CD   CH    @7,@D10                                            0391
         BC    12,@DO9CE                                          0391
         BC    15,PRINT                                           0392
* /********************************************************************
* /*               SCATTER TABLE PROCESSING
* /********************************************************************
* SCATTER:      OLIN3=SCTAB;            /* SCATTER HEADING
SCATTER  MVC   LINE+55(7),STTAB                                   0393
*               OLIN4=TAB;              /* TABLE HEADING
         MVC   LINE+63(5),TAB                                     0394
*               CC=SKIP2;               /* SKIP 2 LINES BEFORE HEADING
         MVC   LINE(1),SKIP2                                      0395
*               IF LINECNT>48           /* DO NOT START SCATTER TABLE
*                                          AT THE BOTTOM OF THE PAGE
*                 THEN LINECNT=PGEND;
         CH    @6,@D6                                             0396
         BC    12,@9C7                                            0396
         LH    @6,PGEND                                           0397
*               LABPTR=ADDR(NEXTSC);    /* RET ADDR FROM PRINT ROUTINE
@9C7     LA    @4,NEXTSC                                          0398
*               GOTO PRINT;             /* TO PRINT SCATTER TABLE LINE
         BC    15,PRINT                                           0399
* NEXTSC:       PTR2=ADDR(OLINE)+4;     /* INITIALIZE OUTPUT POINTER
NEXTSC   LA    @2,LINE+17                                         0400
*               DO I=1 TO 8;            /* NUMBER OF ENTRIES PER PAGE
         LA    @7,1                                               0401
@DO9C6   EQU   *                                                  0401
*                 GENERATE;             /* CONVERTING SCATTER TABLE
         UNPK  DBLW(9),0(5,PTR1)       LAST BYTE WILL BE IGNORED
         NC    DBLW(8),ZONEOFF         CLEAR HIGH ORDER 4 BITS
         TR    DBLW(8),TABLE           TRANSLATE TO PRINTABLE CHAR
         DS    0H
*                 HIAR=HWRD1;           /* HIERARCHY BYTE
         MVC   0(2,@2),DBLW                                       0403
*                 ADR=SIXBYT;           /* ADDRESS
         MVC   3(6,@2),DBLW+2                                     0404
*                 PTR1=PTR1+4;          /* ADVANCE INPUT POINTER
         LA    @3,4(0,@3)                                         0405
*                 COUNTX=COUNTX-4;      /* DECREASE SCATT TAB BYTE CNT
         LH    @F,COUNTX                                          0406
         SH    @F,@D3                                             0406
         STH   @F,COUNTX                                          0406
*                 IF COUNTX<=0          /* END OF SCATTER TABLE?
*                   THEN
         SR    @F,@F                                              0407
         CH    @F,COUNTX                                          0407
         BC    04,@9C2                                            0407
*                     DO;               /* YES -
*                       LABPTR=ADDR(READIN); /* PRINT WILL GO TO READ
*                                               A NEW RECORD
         LA    @4,READIN                                          0409
*                       GOTO PRINT;     /* GO TO PROCESS LAST LINE
         BC    15,PRINT                                           0410
*                     END;
*                 IF SCTRSW='1'B & PTR1=ENDADDR /* ANY DATA IN WORK ARE
*                                                  AND END OF BUFFER?
*                   THEN
@9C2     TM    SW1,B'10000000'                                    0412
         BC    12,@9C1                                            0412
         C     @3,ENDADDR                                         0412
         BC    07,@9C0                                            0412
*                     DO;               /* YES -
*                       SCTRSW='0'B;    /* BUFFER PROCESSED INDICATOR
         NI    SW1,B'01111111'                                    0414
*                       PTR1=SCTRPTR;   /* POINT TO WORK AREA
         L     @3,SCTRPTR                                         0415
*                     END;              /* END OF TEST FOR END OF BUFF.
*                 PTR2=PTR2+12;         /* ADVANCE OUTPUT POINTER
@9C0     EQU   *                                                  0417
@9C1     LA    @2,12(0,@2)                                        0417
*               END;                    /* END OF ONE LINE PROCESSING
*               GOTO PRINT;             /* TO PRINT SCATTER TABLE LINE
         AH    @7,@D4                                             0418
@DO9C5   CH    @7,@D11                                            0418
         BC    12,@DO9C6                                          0418
         BC    15,PRINT                                           0419
*             END;                      /* END OF SCTR-TRANS PROCESSING
*
* /********************************************************************
* /*              CONTROL RECORD PROCESSING
* /********************************************************************
*         SKIPSW='1'B;                  /* SET SWITCH TO BRANCH TO
*                                          NEXTREC AFTER NEXT READ
@9D7     OI    SW1,B'00001000'                                    0421
* NEXTREC:
*         IF ID(1:4)^='0000'B
*           THEN GOTO INVREC;           /* INVALID LOAD MODULE REC TYPE
NEXTREC  L     @8,PARMS+24         PARMS                          0422
         TM    0(@8),B'11110000'                                  0422
         BC    05,INVREC                                          0423
*         IF (ID&TEST)=CTRL             /* CONTROL RECORD?
*           THEN
         MVC   @CTEMP2(1),TEST                                    0424
         NC    @CTEMP2(1),0(@8)                                   0424
         CLC   @CTEMP2(1),CTRL                                    0424
         BC    07,@9BF                                            0424
*             DO;                       /* YES -
*               IF ID=CTLEOM            /* LAST CONTROL RECORD?
*                 THEN EOMSW='1'B;      /* YES-SET END OF MODULE SWITCH
         CLC   0(1,@8),CTLEOM                                     0426
         BC    07,@9BE                                            0426
         OI    SW1,B'00010000'                                    0427
*               TYPENAME=CTLTYPE;       /* CONTROL REC HEADING
@9BE     MVC   HDLINE+25(8),CTRLDTYP                              0428
         MVI   HDLINE+33,C' '                                     0428
         MVC   HDLINE+34(10),HDLINE+33                            0428
*               SIZE2=' ';              /* CLEAR RLD SIZE FIELD
         MVI   HDLINE+64,C' '                                     0429
         MVC   HDLINE+65(13),HDLINE+64                            0429
* CTRLD1:       CTHD=CTLTYPE;           /* FORMATTING OUTPUT LINE
CTRLD1   MVC   HDLINE+44(8),CTRLDTYP                              0430
*               SZHD1=SIZEHD;           /* CTL REC SIZE HEADING
         MVC   HDLINE+52(4),SIZEHD                                0431
*               PTR2=COUNT1;            /* TO BE CONVERTED TO DEC
         L     @8,PARMS+24         PARMS                          0432
         LH    @2,4(0,@8)                                         0432
*               LABPTR2=ADDR(CNTRL1);   /* RETURN ADDR FOR CONVDEC
         LA    @5,CNTRL1                                          0433
*               GOTO CONVDEC;           /* TO CONVERT REC SIZE
         BC    15,CONVDEC                                         0434
* CNTRL1:       SZ1=WKX;                /* SIZE INTO BUFFER
CNTRL1   MVC   HDLINE+57(4),0(@2)                                 0435
*               CCWHD1=CCWHD2;          /* CCW HEADING
         MVC   HDLINE+82(3),CCWHD2                                0436
*               DBLW2=CCW;              /* CCW FIELD INTO WORK AREA
         L     @8,PARMS+24         PARMS                          0437
         MVC   DBLW2(8),8(@8)                                     0437
         MVI   DBLW2+8,C' '                                       0437
         MVC   DBLW2+9(2),DBLW2+8                                 0437
*               GENERATE;
         UNPK  CCW1(9),WK1(5)          FIRST HALF OF CCW
         UNPK  CCW2(9),WK2(5)          SECOND HALF OF CCW
         NC    CCW1(8),ZONEOFF         CLEAR HIGH ORDER 4 BITS
         NC    CCW2(8),ZONEOFF         CLEAR HIGH ORDER 4 BITS
         TR    CCW1(8),TABLE           TRANSLATE TO PRINTABLE CHAR
         TR    CCW2(8),TABLE           TRANSLATE TO PRINTABLE CHAR
         DS    0H
*               SPARE4=' ';             /* CLEAR SIGN BYTE
         MVI   HDLINE+94,C' '                                     0439
*               SPARE5=' ';             /* CLEAR SIGN BYTE
         MVI   HDLINE+103,C' '                                    0440
*               IF CRSW='1'B            /* IS IT CTR-RLD RECORD?
*                 THEN GOTO CTRLD2;     /* YES-GO PRINT RLD INFO FIRST
         TM    SW1,B'01000000'                                    0441
         BC    01,CTRLD2                                          0442
*               PTR1=PTR1+16;           /* POINT TO CONTROL REC DATA
         LA    @3,16(0,@3)                                        0443
*               LABPTR=ADDR(CTRLD3);    /* RETURN ADDR FOR PRINT RTN
         LA    @4,CTRLD3                                          0444
*               IF LINECNT>48           /* DO NOT START NEW RECORD HDG
*                                          AT THE BOTTOM OF THE PAGE
*                 THEN LINECNT=PGEND;
         CH    @6,@D6                                             0445
         BC    12,@9BD                                            0445
         LH    @6,PGEND                                           0446
         BC    15,@9BC                                            0447
*                 ELSE LINECNT=LINECNT+1; /* INCREASE LINE COUNT
@9BD     AH    @6,@D4                                             0447
*               ADDRX=ADDR(HDLINE);     /* HDG ADDR FOR PRINT RTN
@9BC     LA    @F,HDLINE                                          0448
         ST    @F,ADDRX                                           0448
*               GOTO PRINT;             /* GO PRINT CONTROL HEADING
         BC    15,PRINT                                           0449
* CTRLD3:       ADDRX=ADDR(LINE);       /* RESET OUTPUT PTR TO REG LINE
CTRLD3   LA    @F,LINE                                            0450
         ST    @F,ADDRX                                           0450
*               OLINE(6:19)=CTLHD;      /* CONTROL REC SUBHDG TO BUFFER
         MVC   LINE+18(14),CTLHD                                  0451
*               IF LINECNT>51           /* DO NOT START NEW REC HEADING
*                                          AT THE BOTTOM OF THE PAGE
*                 THEN LINECNT=PGEND;
         CH    @6,@D12                                            0452
         BC    12,@9BB                                            0452
         LH    @6,PGEND                                           0453
         BC    15,@9BA                                            0454
*                 ELSE LINECNT=LINECNT+1; /* INCREASE LINE COUNT
@9BB     AH    @6,@D4                                             0454
*               CC=SKIP2;               /* CARRIAGE CTL - SKIP 2 LINES
@9BA     MVC   LINE(1),SKIP2                                      0455
*               LABPTR=ADDR(CTRLD3A);   /* RETURN ADDR FOR PRINT RTN
         LA    @4,CTRLD3A                                         0456
*               GOTO PRINT;             /* GO TO PRINT CNTRL REC SUBHDG
         BC    15,PRINT                                           0457
* CTRLD3A:      LABPTR2=ADDR(CNTRL2);   /* RETURN ADDR FOR CONVDEC RTN
CTRLD3A  LA    @5,CNTRL2                                          0458
*               LABPTR=ADDR(CNTRL3);    /* RETURN ADDR FOR PRINT RTN
         LA    @4,CNTRL3                                          0459
*               COUNTX=COUNT1;          /* CONTROL RECORD DATA COUNT
         L     @8,PARMS+24         PARMS                          0460
         MVC   COUNTX(2),4(@8)                                    0460
*               DO I=COUNTX TO 4 BY -4; /* PROCESSING CTL DATA
         LH    @7,COUNTX                                          0461
         BC    15,@DO9B8                                          0461
*                 PTR2=CESDNUM;         /* CESD NUMBER WILL BE IN DEC
@DO9B9   LH    @2,0(0,@3)                                         0462
*                 GOTO CONVDEC;         /* GO CONVERT CESD NUMBER
         BC    15,CONVDEC                                         0463
* CNTRL2:         CESDNO=WK2;           /* CESD DEC ID INTO BUFFER
CNTRL2   MVC   CTLINE(4),DBLW2+4                                  0464
*                 WK5=CSECT;            /* CSECT / TEXT LENGTH WILL BE
*                                          GIVEN IN HEX
         MVC   DBLW2+5(2),2(@3)                                   0465
*                 GENERATE;
         UNPK  WK1(5),WK5(3)           LAST BYTE WILL BE IGNORED
         NC    WK1(4),ZONEOFF          CLEAR HIGH ORDER 4 BITS
         TR    WK1(4),TABLE            TRANSLATE TO PRINTABLE CHAR
         DS    0H
*                 LNG=WK1;              /* CSECT/TXT LENGTH INTO BUFFER
         MVC   CTLINE+9(4),DBLW2                                  0467
*                 GOTO PRINT;           /* TO PRINT CONTROL REC INFO
         BC    15,PRINT                                           0468
* CNTRL3:         PTR1=PTR1+4;          /* ADVANCE INPUT REC POINTER
CNTRL3   LA    @3,4(0,@3)                                         0469
*               END;                    /* END OF ONE LINE
* /********************************************************************
* /*              TEXT PROCESSING
* /********************************************************************
*               COUNTX=CCWCNT;          /* TEXT RECORD BYTE COUNT
         SH    @7,@D3                                             0470
@DO9B8   CH    @7,@D3                                             0470
         BC    10,@DO9B9                                          0470
         L     @8,PARMS+24         PARMS                          0471
         MVC   COUNTX(2),14(@8)                                   0471
*               TXTADR=ADDR1;           /* INITIAL ADDR OF TEXT/CSECT
         MVC   TXTADR+1(3),9(@8)                                  0472
         MVI   TXTADR,X'00'                                       0472
*               TXTSW='1'B;             /* INDICATE TEXT RECORD
         OI    SW1,B'00100000'                                    0473
*               GOTO READIN;            /* GO TO READ TEXT RECORD
         BC    15,READIN                                          0474
* TEXT1:        TXTSW='0'B;             /* RESET TEXT INDICATOR
TEXT1    NI    SW1,B'11011111'                                    0475
*               LINE=HDLINE;            /* COPY HEADING BUFFER
         MVC   LINE(121),HDLINE                                   0476
*               OLINE=' ';              /* CLEAR THIS PART OF THE BUFF.
         MVI   LINE+13,C' '                                       0477
         MVC   LINE+14(107),LINE+13                               0477
*               OLIN2(5:11)=TXTHD;      /* TEXT RECORD HEADING
         MVC   LINE+56(7),TXTHD                                   0478
*               IF LINECNT>48           /* DO NOT START NEW REC. HEADIN
*                                          AT THE BOTTOM OF THE PAGE
*                 THEN LINECNT=PGEND;
         CH    @6,@D6                                             0479
         BC    12,@9B5                                            0479
         LH    @6,PGEND                                           0480
         BC    15,@9B4                                            0481
*                 ELSE LINECNT=LINECNT+1; /* INCREASE LINE COUNT
@9B5     AH    @6,@D4                                             0481
*               LABPTR=ADDR(CONVTXT);   /* INITIALIZE LOOP ADDRESS
@9B4     LA    @4,CONVTXT                                         0482
*               GOTO PRINT;             /* GO TO PRINT TEXT REC HEADING
         BC    15,PRINT                                           0483
* CONVTXT:      PTR2=ADDR(OLINE);       /* BEGINNING OF NEW LINE
CONVTXT  LA    @2,LINE+13                                         0484
*               GENERATE;               /* CONVERTING TEXT ADDRESSES
         UNPK  0(7,PTR2),TXTADR+1(4)   LAST BYTE WILL BE IGNORED
         NC    0(6,PTR2),ZONEOFF       CLEAR HIGH ORDER 4 BITS
         TR    0(6,PTR2),TABLE         TRANSLATE TO PRINTABLE CHAR
         MVI   6(PTR2),BLANK           CLEAR SIGN BYTE
         DS    0H
*               TXTADR=TXTADR+32;       /* ADDRESS OF TXT ON NEXT LINE
         LA    @F,32                                              0486
         A     @F,TXTADR                                          0486
         ST    @F,TXTADR                                          0486
*               PTR2=PTR2+10;           /* INIT POSITION ON OUTPUT LINE
         LA    @2,10(0,@2)                                        0487
*               DO I=1 TO 8;            /* EIGHT 4-BYTE ENTR PER LINE
         LA    @7,1                                               0488
@DO9B3   EQU   *                                                  0488
*                 GENERATE;             /* CONVERTING TEXT
         UNPK  0(9,PTR2),0(5,PTR1)     LAST BYTE WILL BE IGNORED
         NC    0(8,PTR2),ZONEOFF       CLEAR HIGH ORDER 4 BITS
         TR    0(8,PTR2),TABLE         TRANSLATE TO PRINTABLE CHAR
         MVI   8(PTR2),BLANK           CLEAR LAST/IGNORED BYTE
         DS    0H
*                 COUNTX=COUNTX-4;      /* KEEP TRACK OF BYTE COUNT
         LH    @F,COUNTX                                          0490
         SH    @F,@D3                                             0490
         STH   @F,COUNTX                                          0490
*                 IF COUNTX<=0          /* END OF RECORD?
*                   THEN
         SR    @F,@F                                              0491
         CH    @F,COUNTX                                          0491
         BC    04,@9AF                                            0491
*                     DO;               /* YES -
*                       IF EOMSW='1'B   /* END OF MODULE?
*                         THEN LABPTR=ADDR(EOJ); /* YES - PRINT ROUTINE
         TM    SW1,B'00010000'                                    0493
         BC    12,@9AE                                            0493
*                                                 WILL GO TO END OF JOB
         LA    @4,EOJ                                             0494
         BC    15,@9AD                                            0495
*                         ELSE LABPTR=ADDR(READIN); /* NO -PRINT ROUTIN
*                                             WILL GO TO READ NEXT REC
@9AE     LA    @4,READIN                                          0495
*                       GOTO PRINT;     /* GO PRINT LAST LINE OF TEXT
         BC    15,PRINT                                           0496
*                     END;              /* END TEST FOR END OF RECORD
*                 IF I=4                /*
*                   THEN PTR2=PTR2+12;  /* DIVIDE TEXT INTO TWO BLOCKS
@9AF     CH    @7,@D3                                             0498
         BC    07,@9AC                                            0498
         LA    @2,12(0,@2)                                        0499
         BC    15,@9AB                                            0500
*                   ELSE PTR2=PTR2+9;   /* ONE BLANK BETWEEN 4-BYTE TXT
@9AC     LA    @2,9(0,@2)                                         0500
*                 PTR1=PTR1+4;          /* ADVANCE INPUT POINTER
@9AB     LA    @3,4(0,@3)                                         0501
*               END;                    /* END OF LINE
*               GOTO PRINT;             /* GO TO PRINT TEXT LINE
         AH    @7,@D4                                             0502
@DO9B2   CH    @7,@D11                                            0502
         BC    12,@DO9B3                                          0502
         BC    15,PRINT                                           0503
*             END;                      /* END OF CTL / CTL-RLD PROCESS
*
* /********************************************************************
* /*                  RLD RECORD PROCESSING
* /********************************************************************
*         IF (ID&TEST)=RLD              /* RLD RECORD?
*           THEN
@9BF     MVC   @CTEMP2(1),TEST                                    0505
         L     @8,PARMS+24         PARMS                          0505
         NC    @CTEMP2(1),0(@8)                                   0505
         CLC   @CTEMP2(1),RLD                                     0505
         BC    07,@9AA                                            0505
*             DO;                       /* YES -
*               TYPENAME=RLDTYPE(2:4);  /* RLD TYPE NAME INTO BUFFER
         MVC   HDLINE+25(3),CTRLDTYP+10                           0507
         MVI   HDLINE+28,C' '                                     0507
         MVC   HDLINE+29(15),HDLINE+28                            0507
*               SIZE1=' ';              /* CLEAR CONTROL REC SIZE FIELD
         MVI   HDLINE+44,C' '                                     0508
         MVC   HDLINE+45(16),HDLINE+44                            0508
*               OCCW=' ';               /* CLEAR CCW FIELD
         MVI   HDLINE+82,C' '                                     0509
         MVC   HDLINE+83(20),HDLINE+82                            0509
* CTRLD2:       DATAHD1=RLDTYPE;        /* FORMAT OUTPUT LINE
CTRLD2   MVC   HDLINE+64(4),CTRLDTYP+9                            0510
*               SZHD2=SIZEHD;           /* SIZE HEADING
         MVC   HDLINE+69(4),SIZEHD                                0511
*               PTR2=COUNT2;            /* TO CONVERT RLD REC SIZE
         L     @8,PARMS+24         PARMS                          0512
         LH    @2,6(0,@8)                                         0512
*               LABPTR2=ADDR(RLDL1);    /* RETURN ADDR FOR CONVDEC RTN
         LA    @5,RLDL1                                           0513
*               GOTO CONVDEC;           /* GO CONVERT RLD RECORD SIZE
         BC    15,CONVDEC                                         0514
* RLDL1:        SZ2=WKX;                /* SIZE INTO BUFFER
RLDL1    MVC   HDLINE+74(4),0(@2)                                 0515
*               LABPTR=ADDR(RLDL2);     /* RETURN ADDR FOR PRINT RTN
         LA    @4,RLDL2                                           0516
*               ADDRX=ADDR(HDLINE);     /* BUFFER ADDR FOR PRINT RTN
         LA    @F,HDLINE                                          0517
         ST    @F,ADDRX                                           0517
*               IF LINECNT>48           /* DO NOT START NEW REC. HEADIN
*                                          AT THE BOTTOM OF THE PAGE
*                 THEN LINECNT=PGEND;
         CH    @6,@D6                                             0518
         BC    12,@9A9                                            0518
         LH    @6,PGEND                                           0519
         BC    15,@9A8                                            0520
*                 ELSE LINECNT=LINECNT+2; /* INCREASE LINE COUNT
@9A9     AH    @6,@D2                                             0520
*               GOTO PRINT;             /* GO TO PRINT RLD HEADING LINE
         BC    15,PRINT                                           0521
* RLDL2:        RPHD=RPTR2;             /* R-POINTER HDG
RLDL2    MVC   RLDHD1(5),RPTR2                                    0522
*               PPHD=PPTR2;             /* P-POINTER HDG
         MVC   RLDHD1+7(5),PPTR2                                  0523
*               PTR2=ADDR(OLINE)+18;    /* POINT TO FL-ADDR FIELD
         LA    @2,LINE+31                                         0524
*               DO I=1 TO 6;            /* 6 FL-ADDR ENTRIES PER LINE
         LA    @7,1                                               0525
*                 FLADR1=FLADR2;        /* MOVE FL-ADDR HDG TO BUFFER
@DO9A7   MVC   0(8,@2),FLADR2                                     0526
*                PTR2=PTR2+11;         /* POINT TO NEXT ENTRY         *
         LA    @2,11(0,@2)                                        0527
*               END;
*               ADDRX=ADDR(LINE);       /* RESET OUTPUT BUFFER PTR
         AH    @7,@D4                                             0528
@DO9A6   CH    @7,@D7                                             0528
         BC    12,@DO9A7                                          0528
         LA    @F,LINE                                            0529
         ST    @F,ADDRX                                           0529
*               CC=SKIP2;               /* CARRIAGE CNTRL-SKIP 2 LINES
         MVC   LINE(1),SKIP2                                      0530
*               LABPTR=ADDR(RLDLIN);    /* RETURN ADDR FROM PRINT RTN
         LA    @4,RLDLIN                                          0531
*               COUNTX=COUNT2;          /* RLD DATA COUNT
         L     @8,PARMS+24         PARMS                          0532
         MVC   COUNTX(2),6(@8)                                    0532
*               PTR1=PTR1+16;           /* POINT TO RLD REC DATA
         LA    @3,16(0,@3)                                        0533
*               GOTO PRINT;             /* GO TO PRINT RLD REC SUBHDG
         BC    15,PRINT                                           0534
* RLDLIN:       PTR2=CESDNUM;           /* R-POINTER FOR CONVERSION
RLDLIN   LH    @2,0(0,@3)                                         0535
*               LABPTR2=ADDR(RLDL3);    /* RETURN ADDR FOR CONVDEC
         LA    @5,RLDL3                                           0536
*               GOTO CONVDEC;           /* TO CONVERT R-POINTER
         BC    15,CONVDEC                                         0537
* RLDL3:        RPTR=WK2;               /* R-POINTER INTO BUFFER
RLDL3    MVC   RLDLINE(4),DBLW2+4                                 0538
*               PTR2=CSECT;             /* P-POINTER FOR CONVERSION
         LH    @2,2(0,@3)                                         0539
*               LABPTR2=ADDR(RLDL4);    /* RETURN ADDR FOR CONVDEC
         LA    @5,RLDL4                                           0540
*               GOTO CONVDEC;           /* TO CONVERT P-POINTER
         BC    15,CONVDEC                                         0541
* RLDL4:        PPTR=WK2;               /* P-POINTER INTO BUFFER
RLDL4    MVC   RLDLINE+7(4),DBLW2+4                               0542
*               LABPTR=ADDR(RLDL6);     /* INIT LOOP ADDRESS
         LA    @4,RLDL6                                           0543
*               COUNTX=COUNTX-4;        /* DECREASE BYTE COUNT
         LH    @F,COUNTX                                          0544
         SH    @F,@D3                                             0544
         STH   @F,COUNTX                                          0544
* RLDL6:        PTR2=ADDR(OLINE)+18;    /* POINT TO FLAG-ADDR POSITION
RLDL6    LA    @2,LINE+31                                         0545
*               DO I=1 TO 6;            /* 6 FL-ADDR ENTRIES PER LINE
         LA    @7,1                                               0546
*               PTR1=PTR1+4;            /* POINT TO FLAG-ADDR - INPUT
@DO9A3   LA    @3,4(0,@3)                                         0547
*                 GENERATE;             /* CONVERTING FL-ADDR DATA
         UNPK  DBLW(9),0(5,PTR1)       LAST BYTE WILL BE IGNORED
         NC    DBLW(8),ZONEOFF         CLEAR HIGH ORDER 4 BITS
         TR    DBLW(8),TABLE           TRANSLATE TO PRINTABLE CHAR
         DS    0H
*                 FL=HWRD1;             /* FORMAT OUTPUT LINE - FLAG
         MVC   0(2,@2),DBLW                                       0549
*                 ADDR3=SIXBYT;         /* ADDRESS
         MVC   3(6,@2),DBLW+2                                     0550
*                 COUNTX=COUNTX-4;      /* KEEP TRACK OF BYTE COUNT
         LH    @F,COUNTX                                          0551
         SH    @F,@D3                                             0551
         STH   @F,COUNTX                                          0551
*                 IF COUNTX<=0          /* END OF RLD DATA?
*                   THEN
         SR    @F,@F                                              0552
         CH    @F,COUNTX                                          0552
         BC    04,@99F                                            0552
*                     DO;               /* YES -
*                       IF ID=RLDEOM    /* LAST RECORD?
*                         THEN LABPTR=ADDR(EOJ); /* YES - PRINT ROUTINE
         L     @8,PARMS+24         PARMS                          0554
         CLC   0(1,@8),RLDEOM                                     0554
         BC    07,@99E                                            0554
*                                                   WILL GO TO END
         LA    @4,EOJ                                             0555
         BC    15,@99D                                            0556
*                         ELSE          /* NO - TEST IF CTL-RLD RECORD
*                           DO;
*                             /* CONTROL-RLD RECORD BEING PROCESSED?
*                             IF CRSW='1'B
*                               THEN
@99E     TM    SW1,B'01000000'                                    0557
         BC    12,@99C                                            0557
*                                 DO;   /* YES -
*                                   CRSW='0'B; /* RESET CTRL-RLD SWITCH
         NI    SW1,B'10111111'                                    0559
*                                   PTR1=PTR1+4; /* POINT TO CTL DATA
         LA    @3,4(0,@3)                                         0560
*                                   LABPTR=ADDR(CTRLD3); /* ADR OF CTRL
         LA    @4,CTRLD3                                          0561
         BC    15,@99B                                            0563
*                                 END;
*                             ELSE LABPTR=ADDR(READIN); /* NO-READ NEXT
@99C     LA    @4,READIN                                          0563
*                           END;
*                           GOTO PRINT; /* GO TO PRINT LAST RLD LINE
         BC    15,PRINT                                           0565
*                     END;              /* END TEST FOR END OF MODULE
*                                          OR CTL-RLD RECORD
*                 /* DIFFERENT R & P POINTER FOR NEXT ITEM?
*                 IF RLDFLG(8)='0'B
*                   THEN
@99F     TM    0(@3),B'00000001'                                  0567
         BC    05,@99A                                            0567
*                     DO;               /* YES -
*                        PTR1=PTR1+4;   /* POINT TO R & P POINTER FIELD
         LA    @3,4(0,@3)                                         0569
*                        LABPTR=ADDR(RLDLIN); /* PRINT RTN WILL GO TO
*                                                PROCESS NEXT R-P PTR
         LA    @4,RLDLIN                                          0570
*                        GOTO PRINT;    /* GO TO PRINT THIS LINE
         BC    15,PRINT                                           0571
*                     END;
*                 PTR2=PTR2+11;         /* OUTPUT LINE POSITION POINTER
@99A     LA    @2,11(0,@2)                                        0573
*               END;                    /* END OF ONE LINE LOOP
*               GOTO PRINT;             /* TO PRINT RLD DATA
         AH    @7,@D4                                             0574
@DO9A2   CH    @7,@D7                                             0574
         BC    12,@DO9A3                                          0574
         BC    15,PRINT                                           0575
*             END;                      /* END OF RLD REC PROCESSING
*
* /********************************************************************
* /*       CONTROL & RLD RECORD PROCESSING
* /********************************************************************
*         IF (ID&TEST)=CTRLD            /* CONTROL & RLD RECORD?
*           THEN
@9AA     MVC   @CTEMP2(1),TEST                                    0577
         L     @8,PARMS+24         PARMS                          0577
         NC    @CTEMP2(1),0(@8)                                   0577
         CLC   @CTEMP2(1),CTRLD                                   0577
         BC    07,@999                                            0577
*             DO;                       /* YES -
*               IF ID=CTRLDEOM          /* LAST RECORD?
*                 THEN EOMSW='1'B;      /* SET END OF MODULE SWITCH
         CLC   0(1,@8),CTRLDEOM                                   0579
         BC    07,@998                                            0579
         OI    SW1,B'00010000'                                    0580
*               TYPENAME=CTRLDTYP;      /* CTL & RLD HEADING
@998     MVC   HDLINE+25(13),CTRLDTYP                             0581
         MVI   HDLINE+38,C' '                                     0581
         MVC   HDLINE+39(5),HDLINE+38                             0581
*               CRSW='1'B;              /* SET CTL & RLD SWITCH
         OI    SW1,B'01000000'                                    0582
*               GOTO CTRLD1;            /* TO PROCESS CTL & RLD REC
         BC    15,CTRLD1                                          0583
*             END;
*           ELSE                        /* NO - UNDEFINED RECORD TYPE
* INVREC:     ERRORS(2)='1'B;           /* SET ERROR BIT
@999     EQU   *                                                  0585
INVREC   OI    PARMS+32,B'01000000'                               0585
*             LINE(1:11)='0*****ERROR'; /* MESSAGE INTO BUFFER
@997     MVC   LINE(11),@C11                                      0586
*             GOTO EOJERR;              /* GO TO TERMINATE PROCESSING
         BC    15,EOJERR                                          0587
*
* /********************************************************************
* /*                     PRINT ROUTINE
* /********************************************************************
* PRINT:
*         IF LINECNT>=PGEND             /* IS IT END OF PAGE?
*           THEN
PRINT    CH    @6,PGEND                                           0588
         BC    04,@996                                            0588
*             DO;                       /* YES -
*               LINECNT=2;              /* INITIALIZE LINE COUNT
         LA    @6,2                                               0590
*               P=P+1;                  /* INCREASE PAGE NUMBER
         LA    @F,1                                               0591
         AH    @F,P                                               0591
         STH   @F,P                                               0591
*               PTR2=P;                 /* FOR CONVERSION TO DEC
         LR    @2,@F                                              0592
*               GENERATE;               /* CONVERT TO PRINTABLE DECIMAL
         CVD   PTR2,DBLW               RESULT IN WORK AREA
         UNPK  PGNUM(4),DBLW+5(3)      DIRECTLY INTO OUTPUT BUFFER
         OI    PGNUM+3,X'F0'           FIX SIGN BYTE
         L     REG1,OUTDCB             GET OUTPUT DCB ADDRESS
         PUT   (1),TIT1LINE            PRINT PROGRAM NAME
         L     REG1,OUTDCB             OUTPUT DCB ADDRESS
         L     REG0,TITADDR            USER SPECIFIED TITLE ADDR
         PUT   (1)                     PRINT USER SPECIFIED TITLE
         DS    0H
*               CC=SKIP2;               /* SKIP EXTRA LINE ON NEW PAGE
         MVC   LINE(1),SKIP2                                      0594
*             END;
*         LINECNT=LINECNT+1;            /* INCREASE LINE COUNT BY 1
@996     AH    @6,@D4                                             0596
*         REG0=ADDRX;                   /* ADDRESS OF OUTPUT BUFFER
         L     @0,ADDRX                                           0597
*         REG1=OUTDCB;                  /* OUTPUT DCB ADDRESS
         L     @1,PARMS+4                                         0598
*         GEN(PUT   (1));               /* PRINT OUTPUT LINE
         PUT   (1)
         DS    0H
*         LINE=' ';                     /* BLANK OUT OUTPUT BUFFER
         MVI   LINE,C' '                                          0600
         MVC   LINE+1(120),LINE                                   0600
*         GOTO LABX;                    /* RETURN
         BCR   15,@4                                              0601
*
* /********************************************************************
* /*     THIS CODE CONVERTS DATA TO DECIMAL
* /*     AND BLANKS OUT LEADING ZEROS
* /********************************************************************
* CONVDEC:                              /* CONVERT TO DEC & BLANK ZEROS
*         GENERATE;
CONVDEC  EQU   *                                                  0602
         CVD   PTR2,DBLW               GET DECIMAL NUMBER
         UNPK  DBLW2(8),WRD2(4)        RESULT INTO WORK AREA
         DS    0H
*         SIGNBYT=SIGNBYT × 'F0'X;      /* FIX SIGN BYTE
         OI    DBLW2+7,X'F0'                                      0603
*         PTR2=ADDR(DBLW2);             /* POINT TO THE FIRST BYTE
         LA    @2,DBLW2                                           0604
* NEXTBYTE:
*         IF BYTE='0'                   /* IS IT ZERO?
*           THEN
NEXTBYTE CLI   0(@2),C'0'                                         0605
         BC    07,@995                                            0605
*             DO;                       /* YES -
*               BYTE=' ';               /* BLANK
         MVI   0(@2),C' '                                         0607
*               PTR2=PTR2+1;            /* POINT TO THE NEXT BYTE
         LA    @2,1(0,@2)                                         0608
*               IF PTR2 < LASTBYT       /* LAST BYTE?
*                 THEN GOTO NEXTBYTE;   /* GO TO CHECK NEXT BYTE
         C     @2,LASTBYT                                         0609
         BC    04,NEXTBYTE                                        0610
*             END;
*         GOTO LABX2;                   /* RETURN
@995     BCR   15,@5                                              0612
*         GENERATE;
BLANK    EQU   C' '                    BLANK FOR IMMEDIATE INSTR.
         DS    0H
*
* /********************************************************************
* /*        END OF MODULE - TEST IF OVERLAY
* /********************************************************************
* EOJ:    IF OVLYFL='1'B                /* MODULE IN OVERLAY?
*           THEN
EOJ      TM    PARMS+20,B'01000000'                               0614
         BC    12,@994                                            0614
*             DO;                       /* YES -
*               COUNTX=BIGSEG*4;        /* GET # OF BYTES IN TTR LIST
         SR    @F,@F                                              0616
         IC    @F,BIGSEG                                          0616
         SLA   @F,2                                               0616
         STH   @F,COUNTX                                          0616
*               OLINE(1:29)=SEGLSTHD;   /* TTR LIST HEADING
         MVC   LINE+13(29),SEGLSTHD                               0617
*               CC=SKIP2;               /* SKIP 2 LINES - CARR CONTROL
         MVC   LINE(1),SKIP2                                      0618
*               IF LINECNT>50           /* DO NOT START AT THE BOTTOM
*                                          OF THE PAGE
*                 THEN LINECNT=PGEND;
         CH    @6,@D13                                            0619
         BC    12,@993                                            0619
         LH    @6,PGEND                                           0620
*               LABPTR=ADDR(READIN);    /* RETURN ADDR FROM PRINT RTN
@993     LA    @4,READIN                                          0621
*               TTRSW='1'B;             /* INDICATES TTR PROCESSING
         OI    SW1,B'00000100'                                    0622
*               LABPTR2=ADDR(EOJX);     /* RETURN ADDR FROM TTR PROCESS
         LA    @5,EOJX                                            0623
*               GOTO PRINT;             /* GO TO PRINT HEADING LINE
         BC    15,PRINT                                           0624
*             END;
*
* EOJX:   LINE(1:34)=ENDMSG;            /* END OF LISTING MESSAGE
@994     EQU   *                                                  0626
EOJX     MVC   LINE(34),ENDMSG                                    0626
* EOJERR: REG1=OUTDCB;                  /* OUTPUT DCB ADDRESS
EOJERR   L     @1,PARMS+4                                         0627
*         GEN(PUT   (1),LINE);          /* PRINT END OF LISTING MSG
         PUT   (1),LINE
         DS    0H
*         REG1=SAVE1+32;                /* RESTORE PARM LIST POINTER
*                                          AND POINT TO ERROR BITS
         LA    @1,32                                              0629
         A     @1,SAVE1                                           0629
*         ERRBITS=ERRORS;               /* ERROR BITS SET DURING PROC.
         MVC   0(4,@1),PARMS+32                                   0630
*         END;                          /* END OF IMBLKLDM
@EL01    L     @D,4(0,@D)                                         0631
         LR    @1,@C                                              0631
         L     @0,@SIZ001                                         0631
         FREEMAIN R,LV=(0),A=(1)                                  0631
         LM    @E,@C,12(@D)                                       0631
         BCR   15,@E                                              0631
@DATA1   EQU   *
@0       EQU   00                  EQUATES FOR REGISTERS 0-15
@1       EQU   01
@2       EQU   02
@3       EQU   03
@4       EQU   04
@5       EQU   05
@6       EQU   06
@7       EQU   07
@8       EQU   08
@9       EQU   09
@A       EQU   10
@B       EQU   11
@C       EQU   12
@D       EQU   13
@E       EQU   14
@F       EQU   15
@D1      DC    H'49'
@D2      DC    H'2'
@D3      DC    H'4'
@D4      DC    H'1'
@D5      DC    H'10'
@D6      DC    H'48'
@D7      DC    H'6'
@D8      DC    H'16'
@D9      DC    H'-2'
@D10     DC    H'20'
@D11     DC    H'8'
@D12     DC    H'51'
@D13     DC    H'50'
         DS    0F
@SIZ001  DC    AL1(&SPN)
         DC    AL3(@DATEND-@DATD)
         DS    0F
@C9      DC    C'06'
@C3      DC    C'LISTING OF LOAD MODULE '
@X7      DC    X'00FFFF'
@C11     DC    C'0*****ERROR'
         DS    0D
@DATA    EQU   *
DUMMYPTR EQU   00000000            FULLWORD INTEGER
REG0     EQU   00000000            FULLWORD INTEGER REGISTER
REG1     EQU   00000001            3  BYTE  POINTER REGISTER
PTR2     EQU   00000002            3  BYTE  POINTER REGISTER
PTR1     EQU   00000003            3  BYTE  POINTER REGISTER
LABPTR   EQU   00000004            3  BYTE  POINTER REGISTER
LABPTR2  EQU   00000005            3  BYTE  POINTER REGISTER
LINECNT  EQU   00000006            FULLWORD INTEGER REGISTER
I        EQU   00000007            FULLWORD INTEGER REGISTER
PARMLST  EQU   00000000            57 BYTE(S)
RECORD   EQU   00000000            16 BYTE(S) ON WORD
ID       EQU   RECORD+00000000     8 BIT(S)
SYMSUBT  EQU   RECORD+00000001     8 BIT(S)
COUNT    EQU   RECORD+00000002     HALFWORD INTEGER
COUNT1   EQU   RECORD+00000004     HALFWORD INTEGER
COUNT2   EQU   RECORD+00000006     HALFWORD INTEGER
CCW      EQU   RECORD+00000008     8 BYTE(S)
A00004   EQU   RECORD+00000008     8 BIT(S)
ADDR1    EQU   RECORD+00000009     3 BYTE(S)
A00005   EQU   RECORD+00000012     16 BIT(S)
CCWCNT   EQU   RECORD+00000014     2  BYTE  INTEGER
CTRLDATA EQU   00000000            4 BYTE(S) ON WORD
CESDNUM  EQU   CTRLDATA+00000000   HALFWORD INTEGER
CSECT    EQU   CTRLDATA+00000002   HALFWORD INTEGER
RLDFLG   EQU   00000000            8 BIT(S) ON BYTE
CESDDATA EQU   00000008            16 BYTE(S) ON WORD
SYMBOL   EQU   CESDDATA+00000000   8 BYTE(S)
TPADDR   EQU   CESDDATA+00000008   4 BYTE(S)
TYPE     EQU   CESDDATA+00000008   8 BIT(S)
ADDR2    EQU   CESDDATA+00000009   3 BYTE(S)
SEGNUM   EQU   CESDDATA+00000012   1 BYTE(S)
LNGTH    EQU   CESDDATA+00000013   3 BYTE(S)
IDRREC   EQU   00000000            4 BYTE(S) ON WORD
IDRID    EQU   IDRREC+00000000     8 BIT(S)
IDRCTL   EQU   IDRREC+00000001     2 BYTE(S)
IDRCNT   EQU   IDRREC+00000001     8 BIT(S)
IDRSUB   EQU   IDRREC+00000002     8 BIT(S)
IDRDATA  EQU   IDRREC+00000003     1 BYTE(S)
SEGTAB   EQU   00000000            16 BYTE(S) ON WORD
A00006   EQU   SEGTAB+00000000     8 BYTE(S)
SEGRG1   EQU   SEGTAB+00000008     1 BYTE(S)
A00007   EQU   SEGTAB+00000009     1 BYTE(S)
SEGRG2   EQU   SEGTAB+00000010     1 BYTE(S)
A00008   EQU   SEGTAB+00000011     1 BYTE(S)
SEGRG3   EQU   SEGTAB+00000012     1 BYTE(S)
A00009   EQU   SEGTAB+00000013     1 BYTE(S)
SEGRG4   EQU   SEGTAB+00000014     1 BYTE(S)
A00010   EQU   SEGTAB+00000015     1 BYTE(S)
CESDLIN1 EQU   *                   71 BYTE(S)
         DC    C'CESD#    SYMBOL    TYPE     ADDRESS     SE'
         DC    C'GNUM   ID/LENGTH(DEC)   (HEX)'
CESDTYPE EQU   *                   16*6 BYTE(S)
         DC    C'(SD)'
         DC    00002C' '
         DC    C'*UNDEF'
         DC    C'(ER)'
         DC    00002C' '
         DC    C'(LR)'
         DC    00002C' '
         DC    C'(PC)'
         DC    00002C' '
         DC    C'(CM)'
         DC    00002C' '
         DC    C'(PR)'
         DC    00002C' '
         DC    C'(NULL)'
         DC    00002C'*UNDEF'
         DC    C'(WX)'
         DC    00002C' '
         DC    C'*UNDEF'
         DC    C'(PC)'
         DC    00002C' '
         DC    00003C'*UNDEF'
CTLHD    EQU   *                   14 BYTE(S)
         DC    C'CESD#   LENGTH'
FLADR1   EQU   00000000            8 BYTE(S)
RLDLIN2  EQU   00000000            9 BYTE(S) ON WORD
FL       EQU   RLDLIN2+00000000    2 BYTE(S)
SP12     EQU   RLDLIN2+00000002    1 BYTE(S)
ADDR3    EQU   RLDLIN2+00000003    6 BYTE(S)
SC1      EQU   00000000            FULLWORD INTEGER
SC2      EQU   00000000            9 BYTE(S)
HIAR     EQU   SC2+00000000        2 BYTE(S)
SC2SP    EQU   SC2+00000002        1 BYTE(S)
ADR      EQU   SC2+00000003        6 BYTE(S)
TR1      EQU   00000000            HALFWORD INTEGER
TR2      EQU   00000000            FULLWORD INTEGER
SYMHD    EQU   *                   3 BYTE(S)
         DC    C'SYM'
SYMSHD   EQU   *                   7 BYTE(S)
         DC    C'SUBTYPE'
CESDTYP  EQU   *                   4 BYTE(S)
         DC    C'CESD'
ESDIDHD  EQU   *                   7 BYTE(S)
         DC    C'  ESDID'
STTAB    EQU   @DATA+00000202      19 BYTE(S)
SCTAB    EQU   *                   7 BYTE(S)
         DC    C'SCATTER'
HYPH2    EQU   *                   1 BYTE(S)
         DC    C'-'
TRTAB    EQU   *                   11 BYTE(S)
         DC    C'TRANSLATION'
TAB      EQU   *                   5 BYTE(S)
         DC    C'TABLE'
CTRLDTYP EQU   @DATA+00000228      13 BYTE(S) ON WORD
         ORG   CTRLDTYP+00000000
CTLTYPE  EQU   *                   8 BYTE(S)
         DC    C'CONTROL'
         DC    00001C' '
AND      EQU   *                   1 BYTE(S)
         DC    C'&&'
RLDTYPE  EQU   *                   4 BYTE(S)
         DC    C' RLD'
RPTR2    EQU   *                   5 BYTE(S)
         DC    C'R-PTR'
PPTR2    EQU   *                   5 BYTE(S)
         DC    C'P-PTR'
FLADR2   EQU   *                   8 BYTE(S)
         DC    C'FL  ADDR'
IDRTYPE  EQU   *                   3 BYTE(S)
         DC    C'IDR'
DATAHD2  EQU   *                   4 BYTE(S)
         DC    C'DATA'
ESDHD    EQU   *                   4 BYTE(S)
         DC    C' ESD'
CCWHD2   EQU   *                   3 BYTE(S)
         DC    C'CCW'
RECHD2   EQU   *                   7 BYTE(S)
         DC    C'RECORD#'
TYP2     EQU   *                   4 BYTE(S)
         DC    C'TYPE'
SIZEHD   EQU   *                   4 BYTE(S)
         DC    C'SIZE'
PAGE1    EQU   *                   4 BYTE(S)
         DC    C'PAGE'
ENDMSG   EQU   *                   34 BYTE(S)
         DC    C'- ******END OF LOAD MODULE LISTING'
TXTHD    EQU   *                   7 BYTE(S)
         DC    C'T E X T'
NCMSG    EQU   *                   10 BYTE(S)
         DC    C'NEVER CALL'
SEGLSTHD EQU   *                   29 BYTE(S)
         DC    C'TTR LIST FOR OVERLAY SEGMENTS'
TEST     EQU   *                   1 BYTE(S)
         DC    X'03'
SYM      EQU   *                   1 BYTE(S)
         DC    X'40'
IDR      EQU   *                   1 BYTE(S)
         DC    X'80'
CESD     EQU   *                   1 BYTE(S)
         DC    X'20'
SCTR     EQU   *                   1 BYTE(S)
         DC    X'10'
CTRL     EQU   *                   1 BYTE(S)
         DC    X'01'
RLD      EQU   *                   1 BYTE(S)
         DC    X'02'
CTRLD    EQU   *                   1 BYTE(S)
         DC    X'03'
CTLEOM   EQU   *                   1 BYTE(S)
         DC    X'0D'
RLDEOM   EQU   *                   1 BYTE(S)
         DC    X'0E'
CTRLDEOM EQU   *                   1 BYTE(S)
         DC    X'0F'
TABLE    EQU   *                   16 BYTE(S)
         DC    C'0123456789ABCDEF'
ZONEOFF  EQU   *                   8 BYTE(S)
         DC    X'0F0F0F0F0F0F0F0F'
WKX      EQU   00000000            4 BYTE(S)
IDREND   EQU   00000000            6 BYTE(S)
BYTE     EQU   00000000            1 BYTE(S)
         ORG   @DATA+00000408
PGEND    EQU   *                   HALFWORD INTEGER
         DC    FL2'55'
SCTRREC  EQU   00000000            1020 BYTE(S)
SKIP2    EQU   *                   1 BYTE(S)
         DC    C'0'
NEWPG    EQU   *                   1 BYTE(S)
         DC    C'1'
MAXREC   EQU   *                   HALFWORD INTEGER
         DC    FL2'1020'
ER       EQU   *                   8 BIT(S) ON BYTE
         DC    X'02'
LR       EQU   *                   8 BIT(S) ON BYTE
         DC    X'03'
WX       EQU   *                   8 BIT(S) ON BYTE
         DC    X'0A'
ERRBITS  EQU   00000000            32 BIT(S) ON BYTE
MAINTAR  EQU   @DATA+00000417      200 BYTE(S)
         ORG   @DATA
         DS    00000617C
@L       EQU   3
@DATD    DSECT
@SAV001  EQU   @DATD+00000000      72 BYTE(S) ON WORD
LASTBYT  EQU   @DATD+00000072      FULLWORD POINTER
ADDRX    EQU   @DATD+00000076      FULLWORD POINTER
DATAPTR  EQU   @DATD+00000080      FULLWORD POINTER
SCTRPTR  EQU   @DATD+00000084      FULLWORD POINTER
ENDADDR  EQU   @DATD+00000088      FULLWORD POINTER
PARMS    EQU   @DATD+00000092      57 BYTE(S) ON WORD
INDCB    EQU   PARMS+00000000      FULLWORD POINTER
OUTDCB   EQU   PARMS+00000004      FULLWORD POINTER
TITADDR  EQU   PARMS+00000008      FULLWORD POINTER
MAINADDR EQU   PARMS+00000012      FULLWORD POINTER
STORLEN  EQU   PARMS+00000016      FULLWORD INTEGER
CTLFL    EQU   PARMS+00000020      16 BIT(S)
A00000   EQU   PARMS+00000020      1 BIT(S)
OVLYFL   EQU   PARMS+00000020      1 BIT(S)
NOTEDIT  EQU   PARMS+00000020      1 BIT(S)
NORLD    EQU   PARMS+00000020      1 BIT(S)
A00001   EQU   PARMS+00000020      12 BIT(S)
A00002   EQU   PARMS+00000022      2 BYTE(S)
INPTR    EQU   PARMS+00000024      FULLWORD POINTER
SCSZ     EQU   PARMS+00000028      HALFWORD INTEGER
TRSZ     EQU   PARMS+00000030      HALFWORD INTEGER
ERRORS   EQU   PARMS+00000032      32 BIT(S)
MEMNAME  EQU   PARMS+00000036      8 BYTE(S)
A00003   EQU   PARMS+00000044      8 BYTE(S)
TEXTTR   EQU   PARMS+00000052      3 BYTE(S)
TEXTLEN  EQU   PARMS+00000055      2 BYTE(S)
LINE     EQU   @DATD+00000149      121 BYTE(S)
CC       EQU   LINE+00000000       1 BYTE(S)
OLINSP   EQU   LINE+00000001       12 BYTE(S)
OLINE    EQU   LINE+00000013       108 BYTE(S)
OLIN1    EQU   LINE+00000013       39 BYTE(S)
OLIN2    EQU   LINE+00000052       11 BYTE(S)
OLINSP1  EQU   LINE+00000052       3 BYTE(S)
OLIN3    EQU   LINE+00000055       7 BYTE(S)
OLINSP2  EQU   LINE+00000062       1 BYTE(S)
OLIN4    EQU   LINE+00000063       5 BYTE(S)
OLINSP3  EQU   LINE+00000063       1 BYTE(S)
OLIN5    EQU   LINE+00000064       5 BYTE(S)
HDLINE   EQU   @DATD+00000270      121 BYTE(S)
HCC      EQU   HDLINE+00000000     1 BYTE(S)
RECHD    EQU   HDLINE+00000001     7 BYTE(S)
HDSP1    EQU   HDLINE+00000008     1 BYTE(S)
RECNUM   EQU   HDLINE+00000009     4 BYTE(S)
SPARE1   EQU   HDLINE+00000013     2 BYTE(S)
TYP1     EQU   HDLINE+00000015     4 BYTE(S)
SPARE1A  EQU   HDLINE+00000019     1 BYTE(S)
TYPEID   EQU   HDLINE+00000020     2 BYTE(S)
SPAR2    EQU   HDLINE+00000022     1 BYTE(S)
HYPH1    EQU   HDLINE+00000023     1 BYTE(S)
SPARE1B  EQU   HDLINE+00000024     1 BYTE(S)
TYPENAME EQU   HDLINE+00000025     19 BYTE(S)
TP1      EQU   HDLINE+00000025     15 BYTE(S)
TP2      EQU   HDLINE+00000025     7 BYTE(S)
TP3      EQU   HDLINE+00000032     7 BYTE(S)
SPAR1A   EQU   HDLINE+00000039     1 BYTE(S)
SUBTYPID EQU   HDLINE+00000040     4 BYTE(S)
SIZE1    EQU   HDLINE+00000044     17 BYTE(S)
CTHD     EQU   HDLINE+00000044     8 BYTE(S)
SZHD1    EQU   HDLINE+00000052     4 BYTE(S)
SPAR2A   EQU   HDLINE+00000056     1 BYTE(S)
SZ1      EQU   HDLINE+00000057     4 BYTE(S)
SPARE2   EQU   HDLINE+00000061     3 BYTE(S)
SIZE2    EQU   HDLINE+00000064     14 BYTE(S)
DATAHD1  EQU   HDLINE+00000064     4 BYTE(S)
SPAR2B   EQU   HDLINE+00000068     1 BYTE(S)
SZHD2    EQU   HDLINE+00000069     4 BYTE(S)
SPARE2A  EQU   HDLINE+00000073     1 BYTE(S)
SZ2      EQU   HDLINE+00000074     4 BYTE(S)
SPARE3   EQU   HDLINE+00000078     4 BYTE(S)
OCCW     EQU   HDLINE+00000082     21 BYTE(S)
CCWHD1   EQU   HDLINE+00000082     3 BYTE(S)
SPARE3A  EQU   HDLINE+00000085     1 BYTE(S)
CCWDATA  EQU   HDLINE+00000086     17 BYTE(S)
CCW1     EQU   HDLINE+00000086     8 BYTE(S)
SPARE4   EQU   HDLINE+00000094     1 BYTE(S)
CCW2     EQU   HDLINE+00000095     8 BYTE(S)
SPARE5   EQU   HDLINE+00000103     1 BYTE(S)
TIT1LINE EQU   @DATD+00000391      121 BYTE(S)
TCC      EQU   TIT1LINE+00000000   1 BYTE(S)
TITSP1   EQU   TIT1LINE+00000001   40 BYTE(S)
TITLE    EQU   TIT1LINE+00000041   23 BYTE(S)
MEMB     EQU   TIT1LINE+00000064   8 BYTE(S)
TITSP2   EQU   TIT1LINE+00000072   36 BYTE(S)
PAGE     EQU   TIT1LINE+00000108   4 BYTE(S)
TITSP3   EQU   TIT1LINE+00000112   1 BYTE(S)
PGNUM    EQU   TIT1LINE+00000113   4 BYTE(S)
CESDLIN2 EQU   @DATD+00000165      82 BYTE(S) ON WORD
CESDNUM2 EQU   CESDLIN2+00000000   4 BYTE(S)
SP2      EQU   CESDLIN2+00000004   4 BYTE(S)
SYMB     EQU   CESDLIN2+00000008   8 BYTE(S)
SP3      EQU   CESDLIN2+00000016   2 BYTE(S)
CESDTYP1 EQU   CESDLIN2+00000018   2 BYTE(S)
CESDTYP2 EQU   CESDLIN2+00000020   6 BYTE(S)
SP4      EQU   CESDLIN2+00000026   3 BYTE(S)
CSECTADR EQU   CESDLIN2+00000029   6 BYTE(S)
SP5      EQU   CESDLIN2+00000035   6 BYTE(S)
SEGNO    EQU   CESDLIN2+00000041   3 BYTE(S)
SP6      EQU   CESDLIN2+00000044   6 BYTE(S)
LENDEC   EQU   CESDLIN2+00000050   8 BYTE(S)
SP7      EQU   CESDLIN2+00000058   6 BYTE(S)
LENHEX   EQU   CESDLIN2+00000064   6 BYTE(S)
SP9      EQU   CESDLIN2+00000070   2 BYTE(S)
NEVCALL  EQU   CESDLIN2+00000072   10 BYTE(S)
CTLINE   EQU   @DATD+00000167      13 BYTE(S) ON WORD
CESDNO   EQU   CTLINE+00000000     4 BYTE(S)
SP8      EQU   CTLINE+00000004     5 BYTE(S)
LNG      EQU   CTLINE+00000009     4 BYTE(S)
RLDHD1   EQU   @DATD+00000164      12 BYTE(S) ON WORD
RPHD     EQU   RLDHD1+00000000     5 BYTE(S)
S2       EQU   RLDHD1+00000005     2 BYTE(S)
PPHD     EQU   RLDHD1+00000007     5 BYTE(S)
RLDLINE  EQU   @DATD+00000165      11 BYTE(S) ON WORD
RPTR     EQU   RLDLINE+00000000    4 BYTE(S)
SP10     EQU   RLDLINE+00000004    3 BYTE(S)
PPTR     EQU   RLDLINE+00000007    4 BYTE(S)
EVCB     EQU   @DATD+00000512      20 BYTE(S) ON WORD
DBLW2    EQU   @DATD+00000536      11 BYTE(S) ON DWORD
WK1      EQU   DBLW2+00000000      FULLWORD INTEGER
WK2      EQU   DBLW2+00000004      FULLWORD INTEGER
WK3      EQU   DBLW2+00000004      1 BYTE(S)
WK4      EQU   DBLW2+00000005      3 BYTE(S)
WK5      EQU   DBLW2+00000005      2 BYTE(S)
SIGNBYT  EQU   DBLW2+00000007      1 BYTE(S)
BLANKS   EQU   DBLW2+00000008      3 BYTE(S)
DBLW     EQU   @DATD+00000552      9 BYTE(S) ON DWORD
WRD1     EQU   DBLW+00000000       FULLWORD INTEGER
HWRD1    EQU   DBLW+00000000       2 BYTE(S)
SIXBYT   EQU   DBLW+00000002       6 BYTE(S)
HWRD2    EQU   DBLW+00000002       2 BYTE(S)
WRD2     EQU   DBLW+00000004       FULLWORD INTEGER
BYTE2    EQU   DBLW+00000004       2 BYTE(S)
BYTE2A   EQU   DBLW+00000006       2 BYTE(S)
DUMMY    EQU   DBLW+00000008       1 BYTE(S)
SW1      EQU   @DATD+00000564      1 BYTE(S) ON WORD
SCTRSW   EQU   SW1+00000000        1 BIT(S)
CRSW     EQU   SW1+00000000        1 BIT(S)
TXTSW    EQU   SW1+00000000        1 BIT(S)
EOMSW    EQU   SW1+00000000        1 BIT(S)
SKIPSW   EQU   SW1+00000000        1 BIT(S)
TTRSW    EQU   SW1+00000000        1 BIT(S)
NESW     EQU   SW1+00000000        1 BIT(S)
A00011   EQU   SW1+00000000        1 BIT(S)
CESDCNT  EQU   @DATD+00000566      HALFWORD INTEGER
COUNTX   EQU   @DATD+00000568      HALFWORD INTEGER
BIGSEG   EQU   @DATD+00000570      1  BYTE  POINTER
RECCNT   EQU   @DATD+00000572      HALFWORD INTEGER
P        EQU   @DATD+00000574      HALFWORD INTEGER
X        EQU   @DATD+00000576      HALFWORD INTEGER
SCTRCNT  EQU   @DATD+00000578      HALFWORD INTEGER
TXTADR   EQU   @DATD+00000580      FULLWORD INTEGER
SAVE1    EQU   @DATD+00000584      FULLWORD INTEGER
NOTETTR  EQU   @DATD+00000588      4 BYTE(S) ON WORD
         DS    00000724C
@TEMPS   DS    0F
@TEMP3   DC    F'0'
@CTEMP2  DS    CL001
@DATEND  EQU   *
HMBLKLDM CSECT ,
@9F4     EQU   SCTRHDG
@9F0     EQU   PRINT
@9DD     EQU   PRINT
@9AD     EQU   PRINT
@9A8     EQU   PRINT
@99D     EQU   PRINT
@99B     EQU   PRINT
@9DE     EQU   @9DD
         END    ,(C'PL/S',1400,73276)
