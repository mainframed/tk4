         TITLE 'HMBLKLPA  LISTS LINK PACK AREA'
         LCLA  &T,&SPN                                            0001
.@001    ANOP                                                     0001
HMBLKLPA CSECT ,                                                  0001
         BC    15,14(0,@F)
         DC    C'©HMBLKLPA'                                       0001
         STM   @E,@C,12(@D)                                       0001
         BALR  @B,0                                               0001
@PSTART  DS    0H                                                 0001
         USING @PSTART+00000,@B                                   0001
         L     @0,@SIZ001                                         0001
         GETMAIN  R,LV=(0)                                        0001
         LR    @C,@1                                              0001
         USING @DATD+00000,@C                                     0001
         LM    @0,@1,20(@D)                                       0001
         XC    @TEMPS(@L),@TEMPS                                  0001
         ST    @D,@SAV001+4                                       0001
         LA    @F,@SAV001                                         0001
         ST    @F,8(0,@D)                                         0001
         LR    @D,@F                                              0001
*         REG6=REG1;                     /* USE REG 6 AS BASE YM03994 *
         LR    @6,@1                                              0038
*         LOCPARM=DCBADR;                /* INITIALIZE LOCAL DCB ADDR *
         MVC   LOCPARM(4),4(@6)                                   0039
*         REG4=WKARADR;                  /* POINT TO WORK AREA        *
         MVC   @TEMP4(4),12(@6)                                   0040
         L     @4,@TEMP4                                          0040
*         GEN;
         LA REG2,CVTPTR                 GET ADDR OF PTR TO CVT
         L REG2,0(REG2)                 GET ADDR OF CVT
         USING CVTMAP,REG2              SET BASE OF CVT MAP     YM2968
         L REG2,CVTLPDIA                POINT TO LPA DIRECTORY  YM2968
         DS    0H
*         FLBUF='00'X;                   /* FILL LEFT BUFFER          *
         MVI   SWITCHES,X'00'                                     0042
*         ENTCN=0;                       /* INITIALIZE COUNTER        *
         SR    @F,@F                                              0043
         STH   @F,ENTCN                                           0043
*         ALNUSW='00'X;                  /* INITIALIZE SORT SWITCH    *
         MVI   SWITCHES+1,X'00'                                   0044
*         /************************************************************
*         /* COUNT AND MOVE ENTRIES                                   *
*         /************************************************************
* LPA06:  IF LPDENAME=LASTN              /* IS THIS LAST ENTRY?       *
*           THEN                         /* YES                       *
LPA06    CLC   8(8,@2),LASTN                                      0045
*             GO TO LPA07;               /* GO TO SORT                *
         BC    08,LPA07                                           0046
*           ELSE;                        /* NULL ELSE                 *
*         ENTCN=ENTCN+1;                 /* INCREMENT LPDE COUNTER    *
         LA    @F,1                                               0048
         AH    @F,ENTCN                                           0048
         STH   @F,ENTCN                                           0048
*         NAME2=LPDENAME;                /* MOVE MODULE NAME          *
         MVC   0(8,@4),8(@2)                                      0049
*         IF LPDEMIN='1'B                /* MINOR ENTRY ?             *
*           THEN                         /* YES                       *
         TM    28(@2),B'00000100'                                 0050
         BC    12,@9FF                                            0050
*             DO;
*               LOLEMN=LPDEMJNM;         /* MOVE IN MAJOR LPDE NAME   *
         MVC   8(8,@4),32(@2)                                     0052
*               MAMIN='FF'X;             /* SET MINOR ENTRY FLAG      *
         MVI   19(@4),X'FF'                                       0053
         BC    15,@9FE                                            0055
*             END;
*           ELSE                         /* NO,THIS IS A MAJOR ENTRY  *
*             DO;
*               LOCN2=LPDEXTAD;          /* MOVE MODULE ADDRESS       *
@9FF     MVC   8(4,@4),36(@2)                                     0056
*               LENG2=LPDEXTLN;          /* MOVE MODULE LENGTH        *
         MVC   12(4,@4),32(@2)                                    0057
*               MAMIN='00'X;             /* SET MAJOR ENTRY FLAG      *
         MVI   19(@4),X'00'                                       0058
*             END;
*         EPAD5=LPDENTP;                 /* MOVE ENTRY PT ADDR VS03809*
@9FE     MVC   16(3,@4),17(@2)                                    0060
*         REG2=REG2+LENGTH(LPDE);        /* INCREMENT LPDE PTR        *
         AH    @2,@D1                                             0061
*         REG4=REG4+LENGTH(CDETAB);      /* INCREMENT SORT ENTRY PTR  *
         AH    @4,@D2                                             0062
*         GO TO LPA06;                   /* INCREMENT COUNTER         *
         BC    15,LPA06                                           0063
*
*         RESPECIFY CDETAB BASED(REG2);  /* CHANGE POINTER            *
*         /************************************************************
*         /* SORT ROUTINE                                             *
*         /************************************************************
* LPA07:  COUNT=ENTCN;                   /* GET COUNT FOR SORT        *
LPA07    MVC   COUNT(2),ENTCN                                     0065
*         REG2=WKARADR;                  /* POINT TO WORK AREA        *
         MVC   @TEMP4(4),12(@6)                                   0066
         L     @2,@TEMP4                                          0066
*         IF ALNUSW='00'X                /* ALPHA SORT ?              *
*           THEN                         /* YES                       *
         CLI   SWITCHES+1,X'00'                                   0067
         BC    07,@9FD                                            0067
*             DO;
*               X=1;                     /* STARTING SORT COLUMN      *
         LA    @F,1                                               0069
         STH   @F,X                                               0069
*               Z=LENGTH(NAME2);         /* ENDING SORT COLUMN        *
         LA    @F,8                                               0070
         STH   @F,Z                                               0070
         BC    15,@9FC                                            0072
*             END;
*           ELSE                         /* NO,NUMERIC SORT           *
*             DO;
*               X=17;                    /* STARTING SORT COL YM03994 *
@9FD     LA    @F,17                                              0073
         STH   @F,X                                               0073
*                                        /* (CHANGED BY)      YM05937 *
*               Z=19;                    /* ENDING SORT COL   YM03994 *
         LA    @F,19                                              0074
         STH   @F,Z                                               0074
*                                        /* (CHANGED BY)      YM05937 *
*             END;
*
* LPA08:  COUNT=COUNT/2;                 /* DIVIDE ARRAY IN HALF      *
@9FC     EQU   *                                                  0076
LPA08    LH    @E,COUNT                                           0076
         SRDA  @E,32                                              0076
         LA    @0,2                                               0076
         DR    @E,@0                                              0076
         STH   @F,COUNT                                           0076
*         IF COUNT=0                     /* LAST ELEMENT?             *
*           THEN                         /* YES                       *
         SR    @F,@F                                              0077
         CH    @F,COUNT                                           0077
*             GO TO LPA01;               /* GO FORMAT OUTPUT          *
         BC    08,LPA01                                           0078
*           ELSE;                        /* NULL ELSE                 *
*         K=ENTCN-COUNT;                 /* NO-SET INDEX=1/2 ELEMENTS *
         LH    @F,ENTCN                                           0080
         SH    @F,COUNT                                           0080
         STH   @F,K                                               0080
*         J=1;                           /* INITIALIZE INDEX          *
         LA    @F,1                                               0081
         STH   @F,J                                               0081
* LPA09:  I=J;                           /* I=ELEM. NUMBER IN 1ST HALF*
LPA09    MVC   I(2),J                                             0082
* LPA10:  N=I+COUNT;                     /* N=ELEM. NUMBER IN 2ND HALF*
LPA10    LH    @F,COUNT                                           0083
         AH    @F,I                                               0083
         STH   @F,N                                               0083
*         /* COMPARE ELEMENT FIELDS                                   *
*         IF ARRAY(I,X:Z)<=ARRAY(N,X:Z)  /* ASCENDING ORDER?          *
*           THEN                         /* YES                       *
         LH    @1,X                                               0084
         LR    @5,@F                                              0084
         BCTR  @5,0                                               0084
         MH    @5,@D2                                             0084
         LA    @E,0(@5,@2)                                        0084
         AR    @E,@1                                              0084
         BCTR  @E,0                                               0084
         LH    @7,Z                                               0084
         LH    @8,I                                               0084
         BCTR  @8,0                                               0084
         MH    @8,@D2                                             0084
         SR    @7,@1                                              0084
         LA    @A,0(@8,@2)                                        0084
         AR    @A,@1                                              0084
         BCTR  @A,0                                               0084
         EX    @7,@CLC                                            0084
*             GO TO LPA11;               /* BYPASS SWAPPING           *
         BC    12,LPA11                                           0085
*           ELSE                         /* NO                        *
*             DO;
*               TEMPAREA=ARRAY(I);       /* MOVE ELEMENT INTO TEMPAREA*
         LA    @E,0(@8,@2)                                        0087
         MVC   TEMPAREA(20),0(@E)                                 0087
*               ARRAY(I)=ARRAY(N);       /* REPLACE ELEM IN FIRST HALF*
         LA    @E,0(@5,@2)                                        0088
         LA    @A,0(@8,@2)                                        0088
         MVC   0(20,@A),0(@E)                                     0088
*               ARRAY(N)=TEMPAREA;       /* FIRST GOES INTO SECOND    *
         LA    @A,0(@5,@2)                                        0089
         MVC   0(20,@A),TEMPAREA                                  0089
*               I=I-COUNT;               /* DECREMENT INDEX           *
         LH    @F,I                                               0090
         SH    @F,COUNT                                           0090
         STH   @F,I                                               0090
*               IF I>=1                  /* BEGINNING OF TABLE REACHED*
*                 THEN                   /* NO                        *
         LA    @F,1                                               0091
         CH    @F,I                                               0091
*                   GO TO LPA10;         /* COMPARE NEXT ELEMENT      *
         BC    12,LPA10                                           0092
*                 ELSE;                  /* NULL ELSE                 *
*             END;
* LPA11:  J=J+1;                         /* INDICATE NEW ELEMENT      *
LPA11    LA    @F,1                                               0095
         AH    @F,J                                               0095
         STH   @F,J                                               0095
*         IF J>K                         /* END OF FIRST HALF         *
*           THEN                         /* YES                       *
         LH    @F,K                                               0096
         CH    @F,J                                               0096
*             GO TO LPA08;               /* GO DO ANOTHER PASS        *
         BC    04,LPA08                                           0097
*           ELSE                         /* NO                        *
*             GO TO LPA09;               /* CONTINUE                  *
         BC    15,LPA09                                           0098
*
*         /************************************************************
*         /* DETERMINE WHICH SIDE OF THE BUFFER TO FILL THEN MOVE     *
*         /* DATA FROM SORT TABLE INTO BUFFER TO PRINT. THERE WILL BE *
*         /* TWO ENTRIES PER BUFFER EXCEPT FOR THE LAST ODD LPDE      *
*         /* SITUATION. THERE WILL BE A CHECK MADE ON THE LPDE        *
*         /* BEFORE IT IS MOVED TO DETERMINE IF A MAJOR OR MINOR      *
*         /* LPDE STRUCTURE SHOULD BE USED FOR THE MOVE.              *
*         /************************************************************
* LPA01:  CC=NEWPG;                      /* CARRIAGE CNTL-NEW PAGE    *
LPA01    MVC   BUF(1),NEWPG                                       0099
*         LINE=' ';                      /* CLEAR BUFFER              *
         MVI   BUF+1,C' '                                         0100
         MVC   BUF+2(119),BUF+1                                   0100
*         IF ALNUSW='00'X                /* ALPHA SORT ?              *
*           THEN                         /* YES                       *
         CLI   SWITCHES+1,X'00'                                   0101
         BC    07,@9FB                                            0101
*             TITLNE=TITLA;              /* MOVE IN ALPHA TITLE       *
         MVC   BUF+15(38),TITLA                                   0102
         MVI   BUF+53,C' '                                        0102
         BC    15,@9FA                                            0103
*           ELSE                         /* NO,NUMERIC SORT           *
*             TITLNE=TITLB;              /* MOVE IN NUMERIC TITLE     *
@9FB     MVC   BUF+15(39),TITLB                                   0103
*         RETADR=ADDR(LPA03);            /* GET RETURN ADDR           *
@9FA     LA    @F,LPA03                                           0104
         ST    @F,RETADR                                          0104
*         GO TO PRINTB;                  /* GO TO PRINT               *
         BC    15,PRINTB                                          0105
*         /* MOVE IN TWO IDENTICAL HEADINGS AND CARRIAGE CONTROL      *
* LPA03:  CC=SKIP3;                      /* SET CC TO SKIP 3 LINES    *
LPA03    MVC   BUF(1),SKIP3                                       0106
*         FTLNE=HDNG;                    /* MOVE IN FIRST HEADING     *
         MVC   BUF+1(60),HDNG                                     0107
*         STLNE=HDNG;                    /* MOVE IN SECOND HEADING    *
         MVC   BUF+61(60),HDNG                                    0108
*         RETADR=ADDR(LPA04);            /* GET RETURN ADDR           *
         LA    @F,LPA04                                           0109
         ST    @F,RETADR                                          0109
*         GO TO PRINTB;                  /* GO TO PRINT               *
         BC    15,PRINTB                                          0110
* LPA04:  LINECNT=3;                     /* SET LINE COUNT TO 3       *
LPA04    LA    @F,3                                               0111
         STH   @F,LINECNT                                         0111
*         LINE=' ';                      /* CLEAR BUFFER              *
         MVI   BUF+1,C' '                                         0112
         MVC   BUF+2(119),BUF+1                                   0112
* LPA02:  CC=SKIP1;                      /* SET CC TO SKIP 1 LINE     *
LPA02    MVC   BUF(1),SKIP1                                       0113
*         IF FLBUF = '00'X               /* FILL LEFT BUFFER ?        *
*           THEN                         /* YES                       *
         CLI   SWITCHES,X'00'                                     0114
         BC    07,@9F9                                            0114
*            DO;                         /*                           *
*               REG3=ADDR(FTLNE);        /* GET ADDR LEFT HALF OF BUFF*
         LA    @3,BUF+1                                           0116
*               FLBUF = '01'X;           /* FLIP BUFFER FILL SWITCH   *
         MVI   SWITCHES,X'01'                                     0117
         BC    15,@9F8                                            0119
*             END;
*           ELSE                         /* FILL RIGHT BUFFER         *
*             DO;
*               REG3=ADDR(STLNE);        /* GET ADDR RIGHT HALF OF BUF*
@9F9     LA    @3,BUF+61                                          0120
*               FLBUF = '00'X;           /* FLIP BUFFER FILL SWITCH   *
         MVI   SWITCHES,X'00'                                     0121
*             END;
*
*         /************************************************************
*         /* IF MINOR ENTRY MOVE IN MAJOR EP NAME. IF MAJOR ENTRY     *
*         /* MOVE IN MODULE ADDRESS AND LENGTH                        *
*         /************************************************************
*         COUNT=COUNT+1;                 /* INCREMENT COUNTER         *
@9F8     LA    @F,1                                               0123
         AH    @F,COUNT                                           0123
         STH   @F,COUNT                                           0123
*         IF MAMIN='FF'X                 /* IS THIS A MINOR ENTRY ?   *
*           THEN                         /* YES                       *
         CLI   19(@2),X'FF'                                       0124
         BC    07,@9F7                                            0124
*             DO;
*               MLPDNM=LOLEMN;           /* MOVE IN MAJOR LPDE NAME   *
         MVC   39(8,@3),8(@2)                                     0126
         BC    15,@9F6                                            0128
*             END;
*           ELSE                         /* THIS IS A MAJOR ENTRY     *
*             DO;
*               /* UNPACK HEX LOCATION INTO BUFFER AND INSERT ZONE    *
*               RESPECIFY (REG4,REG5) RESTRICTED;  /* RESTRICT REGS   *
*               REG4=ADDR(LCTION);       /* GET ADDR LOCATION IN BUFF *
@9F7     LA    @4,9(0,@3)                                         0130
*               REG5=ADDR(LOCN2);        /* GET ADDR LOC IN ENTRY     *
         LA    @5,8(0,@2)                                         0131
*               GEN(UNPK 0(7,REG4),1(4,REG5)); /* UNPACK THE ADDR     *
         UNPK 0(7,REG4),1(4,REG5)
         DS    0H
*               GEN(NC 0(6,REG4),ZONE);  /* ZERO OUT ZONE BITS        *
         NC 0(6,REG4),ZONE
         DS    0H
*               GEN(TR 0(6,REG4),TAB);   /* CONV TO PRINTABLE HEX     *
         TR 0(6,REG4),TAB
         DS    0H
*               LCTSN=' ';               /* CLEAR SIGN BYTE           *
         MVI   15(@3),C' '                                        0135
*               /* UNPACK HEX LENGTH INTO BUFFER AND INSERT ZONE      *
*               REG4=ADDR(LENGTA);           /* GET ADDR LENGTH IN BUF*
         LA    @4,19(0,@3)                                        0136
*               REG5=ADDR(LENG2);            /* GET LENGTH IN ENTRY   *
         LA    @5,12(0,@2)                                        0137
*               GEN(UNPK 0(7,REG4),1(4,REG5)); /* UNPACK THE ADDR     *
         UNPK 0(7,REG4),1(4,REG5)
         DS    0H
*               GEN(NC 0(6,REG4),ZONE);  /* ZERO OUT ZONE BITS        *
         NC 0(6,REG4),ZONE
         DS    0H
*               GEN(TR 0(6,REG4),TAB);   /* CONV TO PRINTABLE HEX     *
         TR 0(6,REG4),TAB
         DS    0H
*               LENSN=' ';               /* CLEAR SIGN BYTE           *
         MVI   25(@3),C' '                                        0141
*             END;
*
*         /************************************************************
*         /* MOVE IN MODULE NAME AND ENTRY POINT ADDRESS              *
*         /************************************************************
*         NAME=NAME2;                    /* MOVE IN MODULE NAME       *
@9F6     MVC   0(8,@3),0(@2)                                      0143
*         /* UNPACK ENTRY POINT ADDRESS INTO BUFFER AND INSERT ZONE   *
*         REG4=ADDR(EPADDR);             /* PT TO LOC IN BUFFER       *
         LA    @4,29(0,@3)                                        0144
*         REG5=ADDR(EPAD2);              /* PT TO LOC IN ENTRY        *
         LA    @5,16(0,@2)                                        0145
*         GEN(UNPK 0(7,REG4),0(4,REG5)); /* UNPACK THE ADDR           *
         UNPK 0(7,REG4),0(4,REG5)
         DS    0H
*         GEN(NC 0(6,REG4),ZONE);        /* ZERO OUT ZONE BITS        *
         NC 0(6,REG4),ZONE
         DS    0H
*         GEN(TR 0(6,REG4),TAB);         /* CONVERT TO PRINTABLE HEX  *
         TR 0(6,REG4),TAB
         DS    0H
*         EPSN=' ';                      /* CLEAR SIGN BYTE           *
         MVI   35(@3),C' '                                        0149
*         RESPECIFY (REG4,REG5) UNRSTD;  /* RELEASE REGS              *
*
*         /************************************************************
*         /* IF LAST ENTRY THEN PRINT BUFFER AND EXIT.                *
*         /************************************************************
*         IF ENTCN=COUNT                 /* LAST LPDE                 *
*           THEN                         /* YES                       *
         LH    @F,COUNT                                           0151
         CH    @F,ENTCN                                           0151
         BC    07,@9F5                                            0151
*             DO;
*               IF ALNUSW='00'X          /* ALPHA SORT                *
*                 THEN                   /* YES                       *
         CLI   SWITCHES+1,X'00'                                   0153
         BC    07,@9F4                                            0153
*                   DO;
*                     ALNUSW='01'X;      /* SET NUMERIC SORT SWITCH   *
         MVI   SWITCHES+1,X'01'                                   0155
*                     RETADR=ADDR(LPA07);  /* GET SORT ROUTINE ADDR   *
         LA    @F,LPA07                                           0156
         ST    @F,RETADR                                          0156
         BC    15,@9F3                                            0158
*                   END;
*                 ELSE                   /* NO,NUMERIC SORT           *
*                   RETADR=ADDR(LPAEN);  /* GET EXIT ADDR             *
@9F4     LA    @F,LPAEN                                           0158
         ST    @F,RETADR                                          0158
*               GO TO PRINTB;            /* PRINT BUFFER              *
         BC    15,PRINTB                                          0159
*             END;
*           ELSE;                        /* NULL ELSE                 *
@9F5     EQU   *                                                  0161
*
*         /************************************************************
*         /* INCREMENT POINTER TO NEXT LPDE ENTRY. IF RIGHT BUFFER    *
*         /* FILLED THEN PRINT.                                       *
*         /************************************************************
*         REG2=REG2+LENGTH(CDETAB);      /* POINT TO NEXT LPDE        *
@9F2     AH    @2,@D2                                             0162
*
*         IF FLBUF = '00'X               /* IS RIGHT BUFFER FILLED    *
*           THEN                         /* YES                       *
         CLI   SWITCHES,X'00'                                     0163
         BC    07,@9F1                                            0163
*             DO;
*               RETADR=ADDR(LPA05);      /* GET RETURN ADDR           *
         LA    @F,LPA05                                           0165
         ST    @F,RETADR                                          0165
*               GO TO PRINTB;            /* PRINT BUFFER              *
         BC    15,PRINTB                                          0166
* LPA05:        LINE=' ';                /* FILL IT WITH BLANKS       *
LPA05    MVI   BUF+1,C' '                                         0167
         MVC   BUF+2(119),BUF+1                                   0167
*               LINECNT=LINECNT+1;       /* INCREMENT LINE COUNT      *
         LA    @F,1                                               0168
         AH    @F,LINECNT                                         0168
         STH   @F,LINECNT                                         0168
*                 IF LINECNT < PGEND     /* SKIP TO NEW PAGE ?        *
*                   THEN                 /* NO                        *
         LH    @F,PGEND                                           0169
         CH    @F,LINECNT                                         0169
*                     GO TO LPA02;       /* CONVERT NEXT LPDEE        *
         BC    02,LPA02                                           0170
*                   ELSE                 /* YES                       *
*                     GO TO LPA01;       /* GO TO NEXT PAGE           *
         BC    15,LPA01                                           0171
*             END;
*           ELSE                         /* NO,RIGHT BUFF NOT FILLED  *
*             GO TO LPA02;               /* CONVERT NEXT LPDE         *
*
*         /************************************************************
*         /* PRINT SUBROUTINE                                         *
*         /************************************************************
* PRINTB: REG1=LOCPARM;                  /* PUT DCB ADDR IN REG 1     *
@9F0     EQU   *                                                  0174
PRINTB   L     @1,LOCPARM                                         0174
*         GEN(PUT (REG1),BUF);           /* PRINT LINE                *
         PUT (REG1),BUF
         DS    0H
*         GO TO LABX;                    /* RETURN                    *
         L     @1,RETADR                                          0176
         BCR   15,@1                                              0176
* LPAEN:  END   HMBLKLPA
* /* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.
* /*%INCLUDE SYSLIB  (IHALPDE )
* ;
LPAEN    EQU   *                                                  0177
@EL01    L     @D,4(0,@D)                                         0177
         LR    @1,@C                                              0177
         L     @0,@SIZ001                                         0177
         FREEMAIN R,LV=(0),A=(1)                                  0177
         LM    @E,@C,12(@D)                                       0177
         BCR   15,@E                                              0177
@DATA1   EQU   *
@0       EQU   00                  EQUATES FOR REGISTERS 0-15
@1       EQU   01
@2       EQU   02
@3       EQU   03
@4       EQU   04
@5       EQU   05
@6       EQU   06
@7       EQU   07
@8       EQU   08
@9       EQU   09
@A       EQU   10
@B       EQU   11
@C       EQU   12
@D       EQU   13
@E       EQU   14
@F       EQU   15
@D1      DC    H'40'
@D2      DC    H'20'
@CLC     CLC   0(1,@A),0(@E)
         DS    0F
@SIZ001  DC    AL1(&SPN)
         DC    AL3(@DATEND-@DATD)
         DS    0F
         DS    0D
@DATA    EQU   *
REG1     EQU   00000001            FULLWORD POINTER REGISTER
REG2     EQU   00000002            FULLWORD POINTER REGISTER
LPDEPTR  EQU   00000002            FULLWORD POINTER REGISTER
REG3     EQU   00000003            FULLWORD POINTER REGISTER
REG4     EQU   00000004            FULLWORD POINTER REGISTER
REG5     EQU   00000005            FULLWORD POINTER REGISTER
REG6     EQU   00000006            FULLWORD POINTER REGISTER
LPEPTR   EQU   00000000            FULLWORD POINTER
MAINT    EQU   *                   50 BYTE(S) ON DWORD
         DC    C'HMBLKLPA MAINTENANCE AREA'
         DC    00025C' '
LPDE     EQU   00000000            40 BYTE(S) ON WORD
LPDECHN  EQU   LPDE+00000000       FULLWORD POINTER
LPDERBP  EQU   LPDE+00000004       FULLWORD POINTER
LPDENAME EQU   LPDE+00000008       8 BYTE(S)
LPDENTP  EQU   LPDE+00000016       FULLWORD POINTER
LPDEXLP  EQU   LPDE+00000020       FULLWORD POINTER
LPDEUSE  EQU   LPDE+00000024       HALFWORD POINTER
A00000   EQU   LPDE+00000026       HALFWORD POINTER
LPDEATTR EQU   LPDE+00000028       1 BYTE(S)
LPDENIP  EQU   LPDE+00000028       1 BIT(S)
A00001   EQU   LPDE+00000028       1 BIT(S)
LPDEREN  EQU   LPDE+00000028       1 BIT(S)
LPDESER  EQU   LPDE+00000028       1 BIT(S)
A00002   EQU   LPDE+00000028       1 BIT(S)
LPDEMIN  EQU   LPDE+00000028       1 BIT(S)
A00003   EQU   LPDE+00000028       1 BIT(S)
LPDENLR  EQU   LPDE+00000028       1 BIT(S)
LPDEATT2 EQU   LPDE+00000029       1 BYTE(S)
A00004   EQU   LPDE+00000029       2 BIT(S)
LPDEXLE  EQU   LPDE+00000029       1 BIT(S)
LPDERLC  EQU   LPDE+00000029       1 BIT(S)
A00005   EQU   LPDE+00000029       1 BIT(S)
A00006   EQU   LPDE+00000029       1 BIT(S)
LPDESYSL EQU   LPDE+00000029       1 BIT(S)
LPDEAUTH EQU   LPDE+00000029       1 BIT(S)
LPDEATT3 EQU   LPDE+00000030       HALFWORD INTEGER
LPDEMJNM EQU   LPDE+00000032       8 BYTE(S) ON WORD
LPDEXTLN EQU   LPDE+00000032       FULLWORD INTEGER
LPDEXTAD EQU   LPDE+00000036       FULLWORD POINTER
PARMLST  EQU   00000000            16 BYTE(S)
A00007   EQU   PARMLST+00000000    4 BYTE(S)
DCBADR   EQU   PARMLST+00000004    4  BYTE  POINTER
A00008   EQU   PARMLST+00000008    4 BYTE(S)
WKARADR  EQU   PARMLST+00000012    4  BYTE  POINTER
LPDOL    EQU   00000000            57 BYTE(S) ON WORD
NAME     EQU   LPDOL+00000000      8 BYTE(S)
A00009   EQU   LPDOL+00000008      1 BYTE(S)
LCTION   EQU   LPDOL+00000009      7 BYTE(S)
A00010   EQU   LPDOL+00000009      6 BYTE(S)
LCTSN    EQU   LPDOL+00000015      1 BYTE(S)
A00011   EQU   LPDOL+00000016      3 BYTE(S)
LENGTA   EQU   LPDOL+00000019      7 BYTE(S)
A00012   EQU   LPDOL+00000019      6 BYTE(S)
LENSN    EQU   LPDOL+00000025      1 BYTE(S)
A00013   EQU   LPDOL+00000026      3 BYTE(S)
EPADDR   EQU   LPDOL+00000029      7 BYTE(S)
A00014   EQU   LPDOL+00000029      6 BYTE(S)
EPSN     EQU   LPDOL+00000035      1 BYTE(S)
A00015   EQU   LPDOL+00000036      3 BYTE(S)
MLPDNM   EQU   LPDOL+00000039      8 BYTE(S)
A00016   EQU   LPDOL+00000047      10 BYTE(S)
CDETAB   EQU   00000000            20 BYTE(S)
NAME2    EQU   CDETAB+00000000     8 BYTE(S)
LOLEMN   EQU   CDETAB+00000008     8 BYTE(S)
LOCN2    EQU   CDETAB+00000008     4 BYTE(S)
LENG2    EQU   CDETAB+00000012     4 BYTE(S)
EPAD2    EQU   CDETAB+00000016     3 BYTE(S)
EPAD5    EQU   CDETAB+00000016     3  BYTE  POINTER
MAMIN    EQU   CDETAB+00000019     1 BYTE(S)
ZONE     EQU   *                   8 BYTE(S)
         DC    X'0F0F0F0F0F0F0F0F'
LASTN    EQU   *                   8 BYTE(S)
         DC    X'FFFFFFFFFFFFFFFF'
TAB      EQU   *                   16 BYTE(S)
         DC    C'0123456789ABCDEF'
NEWPG    EQU   *                   1 BYTE(S)
         DC    C'1'
SKIP1    EQU   *                   1 BYTE(S)
         DC    C' '
SKIP3    EQU   *                   1 BYTE(S)
         DC    C'-'
         ORG   @DATA+00000086
PGEND    EQU   *                   HALFWORD INTEGER
         DC    FL2'55'
TITLA    EQU   *                   38 BYTE(S)
         DC    C'LINK PACK MAP - ALPHABETICALLY BY NAME'
TITLB    EQU   *                   39 BYTE(S)
         DC    C'LINK PACK MAP - NUMERICALLY BY LOCATION'
HDNG     EQU   *                   60 BYTE(S)
         DC    C'NAME     LOCATION  LENGTH    EP ADDR  MAJO'
         DC    C'R LPDE NAME'
         DC    00007C' '
ARRAY    EQU   00000000            20 BYTE(S)
         ORG   @DATA
         DS    00000225C
@L       EQU   1
@DATD    DSECT
@SAV001  EQU   @DATD+00000000      72 BYTE(S) ON WORD
RETADR   EQU   @DATD+00000072      FULLWORD POINTER
TEMPAREA EQU   @DATD+00000076      20 BYTE(S)
COUNTER  EQU   @DATD+00000096      HALFWORD INTEGER
ENTCN    EQU   @DATD+00000098      HALFWORD INTEGER
COUNT    EQU   @DATD+00000100      HALFWORD INTEGER
I        EQU   @DATD+00000102      HALFWORD INTEGER
J        EQU   @DATD+00000104      HALFWORD INTEGER
K        EQU   @DATD+00000106      HALFWORD INTEGER
N        EQU   @DATD+00000108      HALFWORD INTEGER
X        EQU   @DATD+00000110      HALFWORD INTEGER
Z        EQU   @DATD+00000112      HALFWORD INTEGER
LOCPARM  EQU   @DATD+00000116      FULLWORD POINTER
SWITCHES EQU   @DATD+00000120      2 BYTE(S)
FLBUF    EQU   SWITCHES+00000000   1 BYTE(S)
ALNUSW   EQU   SWITCHES+00000001   1 BYTE(S)
LINECNT  EQU   @DATD+00000122      HALFWORD INTEGER
BUF      EQU   @DATD+00000124      121 BYTE(S)
CC       EQU   BUF+00000000        1 BYTE(S)
LINE     EQU   BUF+00000001        120 BYTE(S)
FTLNE    EQU   BUF+00000001        60 BYTE(S)
A00017   EQU   BUF+00000001        14 BYTE(S)
TITLNE   EQU   BUF+00000015        39 BYTE(S)
STLNE    EQU   BUF+00000061        60 BYTE(S)
         DS    00000245C
@TEMPS   DS    0F
@TEMP4   DC    F'0'
            CVT LIST=YES,DSECT=YES
@DATD    DSECT
@DATEND  EQU   *
HMBLKLPA CSECT ,
@9F3     EQU   PRINTB
@9F1     EQU   LPA02
         END   HMBLKLPA,(C'PL/S',1400,73347)
