         TITLE 'HMBLKXRF - LOAD MODULE AND NUCLEUS MAPS AND CROSS-REFERX
               ENCES'
         LCLA  &T,&SPN
&SPN     SETA  44                      CHANGE AUTO DATA SUBPOOL TO 44
         AGO   .@001
         LCLA  &T,&SPN                                            0002
.@001    ANOP                                                     0002
HMBLKXRF CSECT ,                                                  0002
         BC    15,14(0,@F)
         DC    C'©HMBLKXRF'                                       0002
         STM   @E,@C,12(@D)                                       0002
         BALR  @B,0                                               0002
@PSTART  DS    0H                                                 0002
         USING @PSTART+00000,@B                                   0002
         LA    @9,4095(0,@B)                                      0002
         USING @PSTART+04095,@9                                   0002
         LA    @4,4095(0,@9)                                      0002
         USING @PSTART+08190,@4                                   0002
         L     @0,@SIZ001                                         0002
         GETMAIN  R,LV=(0)                                        0002
         LR    @C,@1                                              0002
         USING @DATD+00000,@C                                     0002
         LM    @0,@1,20(@D)                                       0002
         XC    @TEMPS(@L),@TEMPS                                  0002
         ST    @D,@SAV001+4                                       0002
         LA    @F,@SAV001                                         0002
         ST    @F,8(0,@D)                                         0002
         LR    @D,@F                                              0002
*   GEN(MVC   DECBE(READLEN),RD);       /* MOVE READ TO DYNAMIC AREA
         MVC   DECBE(READLEN),RD
         DS    0H
*   PARMPTR=PARMREG;                    /* SAVE PTR TO PARAMETER LIST
         ST    @1,PARMPTR                                         0031
*   CURRCESD=GTMAINAD;                  /* INIT CURRCESD TO BEGINNING
*                                          OF WORK AREA
         L     @7,PARMPTR                                         0032
         L     @5,12(0,@7)                                        0032
*   CETABPTR=GTMAINAD;                  /* INIT CESDTAB POINTER
         MVC   CETABPTR(4),12(@7)                                 0033
*   HIGHADDR=GTMAINAD+GMLENGTH;         /* SET END ADDR OF WORK AREA
         L     @F,16(0,@7)                                        0034
         A     @F,12(0,@7)                                        0034
         ST    @F,HIGHADDR                                        0034
*   TRSCDCNT=SCATDCNT+TRANDCNT;         /* COMPUTE BYTES OF SC/TR DATA
         LH    @F,30(0,@7)                                        0035
         AH    @F,28(0,@7)                                        0035
         STH   @F,TRSCDCNT                                        0035
*   INCR=4;                             /* INIT INCR TO 4
         LA    @F,4                                               0036
         STH   @F,INCR                                            0036
*   NUMCESDS=0;                         /* INIT NO. CESD TAB ENTS TO 0
         SR    @F,@F                                              0037
         STH   @F,NUMCESDS                                        0037
*   NUMRLDS=0;                          /* INIT NO. RLD TAB ENTS TO 0
         ST    @F,NUMRLDS                                         0038
*   PAGENUM=0;                          /* INIT PAGE NUMBER TO 0
         STH   @F,PAGENUM                                         0039
*   SEGLENCT=0;                         /* INIT SEGLENCT TO 0
         STH   @F,SEGLENCT                                        0040
*   RLDSPRTD=0;                         /* INIT RLDSPRTD TO 0
         ST    @F,RLDSPRTD                                        0041
*   LMLEN=0;                            /* INIT LMLEN TO 0
         MVC   LMLEN(3),@D1+1                                     0042
*   LMLENNO=0;                          /* INIT LMLENNO TO 0
         MVC   LMLENNO(3),@D1+1                                   0043
*   PDLEN=0;                            /* INIT PDLEN TO 0
         MVC   PDLEN(3),@D1+1                                     0044
*   LINECNT=61;                         /* INIT LINECNT TO 61
         LA    @F,61                                              0045
         ST    @F,LINECNT                                         0045
*   CURSEGNO=ZERO(1);                   /* INIT CURSEGNO TO 0
         MVC   CURSEGNO(1),ZERO                                   0046
*   PREGHERE='0'B;                      /* INIT PREGHERE TO OFF
         NI    SWITCHES+1,B'11110001'                             0047
*   EREFPRES='0'B;                      /* INIT EREFPRES TO OFF
*   DASHLINE='0'B;                      /* INIT DASHLINE TO OFF
*   NCHD='0'B;                          /* INIT NCHD TO OFF
         NI    SWITCHES,B'11110000'                               0050
*   NCSHD='0'B;                         /* INIT NCSHD TO OFF
*   ACHD='0'B;                          /* INIT ACHD TO OFF
*   ACSHD='0'B;                         /* INIT ACSHD TO OFF
*   NRHD='0'B;                          /* INIT NRHD TO OFF
         NI    SWITCHES+1,B'00011111'                             0054
*   ARHD='0'B;                          /* INIT ARHD TO OFF
*   PRHD='0'B;                          /* INIT PRHD TO OFF
*   NA3RET='0'B;                        /* INIT NA3RET TO OFF
         NI    SWITCHES+2,B'01111111'                             0057
*   PRSHD='0'B;                         /* INIT PRSHD TO OFF
         NI    SWITCHES+1,B'11101111'                             0058
*   TEXTNEXT='0'B;                      /* INIT TEXTNEXT TO OFF
         NI    SWITCHES,B'01111111'                               0059
*   SP2='0'B;                           /* INIT SP2 TO OFF
         NI    SWITCHES+2,B'11000111'                             0060
*   DUBLDASH='0'B;                      /* INIT DUBLDASH TO OFF
*   NUCMAP='0'B;                        /* INIT NUCMAP TO OFF
*   TRSCREC1='1'B;                      /* INIT TRSCREC1 TO ON
         OI    SWITCHES+2,B'00000100'                             0063
*   BLNKHEAD='1'B;                      /* INIT BLNKHEAD TO ON
         OI    SWITCHES,B'01100000'                               0064
*   BLNKDATA='1'B;                      /* INIT BLNKDATA TO ON
*   NUMCESD='1'B;                       /* INIT NUMCESD TO ON
         OI    SWITCHES+2,B'01000010'                             0066
*   RELOC='1'B;                         /* INIT RELOC TO ON
*   /* TEST FOR HOW TO INITIALIZE NUCMAP
*   IF LMODNAME(1:7)=IEANUC0            /* IF LOAD MODULE IS NUCLEUS
*     THEN                              /* THEN
         CLC   36(7,@7),IEANUC0                                   0068
         BC    07,@9FF                                            0068
*       DO;                             /* TEST FOR NUCLEUS ERRORS
*         /* TEST IF THERE IS ANY SCATTER DATA
*         IF SCATDCNT=0                 /* IF SCATTER DATA COUNT ZERO
*           THEN                        /* THEN INDICATE ERROR
         SR    @F,@F                                              0070
         CH    @F,28(0,@7)                                        0070
         BC    07,@9FE                                            0070
*             ERRORS(28)='1'B;          /* NUCLEUS NOT MARKED SCTR
         OI    35(@7),B'00010000'                                 0071
         BC    15,@9FD                                            0072
*           ELSE                        /* ELSE IT'S OKAY FOR NUC MAP
*             NUCMAP='1'B;              /* TURN NUCMAP SWITCH ON
@9FE     OI    SWITCHES+2,B'00001000'                             0072
*         /* TEST IF A RELOCATION FACTOR WAS SPECIFIED
*         IF RELOCFAC^=0                /* IF RELOCFAC IS NOT ZERO
*           THEN                        /* THEN INDICATE ERROR
@9FD     SR    @F,@F                                              0073
         C     @F,60(0,@7)                                        0073
         BC    08,@9FC                                            0073
*             DO;                       /* NEGATE RELOCFAC
*               RELOCFAC=0;             /* MAKE RELOCFAC 0
         ST    @F,60(0,@7)                                        0075
*               ERRORS(27)='1'B;        /* RELOC INVALID W/NUCLEUS MAP
         OI    35(@7),B'00100000'                                 0076
*             END;
*       END;
@9FC     EQU   *                                                  0078
*   RET=ADDR(READ);                     /* SET UP RETURN ADDRESS
@9FF     LA    @3,READ                                            0079
*   GO TO WRITE17;                      /* GO TO INIT BUFFERS TO BLANKS
         BC    15,WRITE17                                         0080
*
* /********************************************************************
* /*   THE FOLLOWING SECTION OF CODE READS LOAD MODULE RECORDS.  IT
* /*   TAKES DATA REQUIRED BY HMBLKXRF FROM CESD AND RLD RECORDS AND
* /*   BUILDS THE CESD TABLE AND THE RLD TABLE.  DATA FROM OTHER
* /*   RECORDS IS IGNORED.  THE RECORDS ARE PROCESSED ONE AT A TIME.
* /********************************************************************
*
* READ:
*   DCBAD=INDCBAD;                      /* LOAD INPUT DCB ADDR INTO REG
READ     L     @7,PARMPTR                                         0081
         L     @2,0(0,@7)                                         0081
*   INBUFAD=INBUF;                      /* LOAD INPUT BUF ADDR INTO REG
         L     @3,24(0,@7)                                        0082
*   GEN;
         READ  DECBE,SF,(DCBAD),(INBUFAD),'S',MF=E READ LOAD MOD RECORD
         CHECK DECBE                   CHECK READ
         DS    0H
*   /* TEST IF THIS INPUT RECORD IS TEXT
*   IF TEXTNEXT='1'B                    /* IF TEXTNEXT SWITCH IS ON
*     THEN                              /* THEN
         TM    SWITCHES,B'10000000'                               0084
         BC    12,@9FB                                            0084
*       DO;                             /* THIS RECORD IS TEXT
*         TEXTNEXT='0'B;                /* INDICATE NEXT REC NOT TEXT
         NI    SWITCHES,B'01111111'                               0086
*         GO TO READ;                   /* GO TO READ ANOTHER RECORD
         BC    15,READ                                            0087
*       END;
*   /* TEST IF INPUT RECORD TYPE IS CESD
*   IF IDENT1=CESD                      /* IF RECORD ID IS '00100000'
*     THEN                              /* THEN
@9FB     CLC   0(1,@3),CESD                                       0089
         BC    07,@9FA                                            0089
*       DO;                             /* PROCESS IT
*         CESDTBID=ESDID;               /* SET CESDTBID FROM CURR ESDID
         MVC   CESDTBID(2),4(@3)                                  0091
*         NUMITEMS=COUNT1/16;           /* SET NO. 16 BYTE ITEMS IN REC
         LH    @E,6(0,@3)                                         0092
         SRDA  @E,32                                              0092
         LA    @0,16                                              0092
         DR    @E,@0                                              0092
         STH   @F,NUMITEMS                                        0092
*         /* ENTER DATA FROM CESD RECORD INTO CESD TABLE
*         DO I=1 TO NUMITEMS;           /* LOOP
         LA    @2,1                                               0093
         BC    15,@DO9F8                                          0093
*          /* IF NULL CESD AND NUCLEUS IS BEING MAPPED THEN ALTER
*          /* ENTRY FOR LATER SORTOUT
*          TEMPESD=ESDATA(I,9) &'0F'X;  /* SAVE CESD TYPE      YM05307
@DO9F9   MVI   TEMPESD,X'0F'                                      0094
         LR    @7,@2                                              0094
         BCTR  @7,0                                               0094
         SLA   @7,4                                               0094
         LA    @E,16(@7,@3)                                       0094
         NC    TEMPESD(1),0(@E)                                   0094
*          IF TEMPESD=NULL              /* NULL ITEM ?         YM05307
*            THEN                       /* YES
         CLC   TEMPESD(1),NULL                                    0095
         BC    07,@9F5                                            0095
*              DO;
*                IF NUCMAP='1'B         /* AND NUCLEUS IS BEING MAPPED
*                  THEN                 /* YES
         TM    SWITCHES+2,B'00001000'                             0097
         BC    12,@9F4                                            0097
*                    DO;
*                    CESDLINE(3:18)=ESDATA(I,1:16); /* PUT IN CESD DATA
         LA    @E,8(@7,@3)                                        0099
         MVC   2(16,@5),0(@E)                                     0099
*                    SYMBOL=LASTN;          /* SET NAME TO ALL Z'S
         MVC   2(8,@5),LASTN                                      0100
*                    CESDADDR=LASTADDR;     /* SET ADDR TO ALL Z'S
         MVC   11(3,@5),LASTADDR                                  0101
*                    GO TO READA;           /* INCR PTR
         BC    15,READA                                           0102
*                    END;
*                  ELSE                 /* NUCLEUS IS NOT BEING MAPPED
*                    GO TO READA1;      /* INCR CESD TABLE ID
*              END;
@9F3     EQU   *                                                  0105
*          /* TEST IF THE CESD TABLE IS BIG ENOUGH TO HOLD ITEM
*           IF CURRCESD>HIGHADDR-18     /* IF LINE WILL OVERFLOW TABLE
*             THEN                      /* THEN
@9F5     L     @F,HIGHADDR                                        0106
         SH    @F,@D2                                             0106
         CR    @F,@5                                              0106
         BC    10,@9F2                                            0106
*               DO;                     /* PROCESS THE ERROR
*                 ERRORS(4)='1'B;       /* INDICATE TABLE OVERFLOW
         L     @7,PARMPTR                                         0108
         OI    32(@7),B'00010000'                                 0108
*                 GO TO ABORT;          /* ABORT (MESSAGE HMB104I)
         BC    15,ABORT                                           0109
*               END;
*           CESDLINE(3:18)=ESDATA(I,1:16); /* PUT CESD REC DATA IN TAB
@9F2     LR    @7,@2                                              0111
         BCTR  @7,0                                               0111
         SLA   @7,4                                               0111
         LA    @E,8(@7,@3)                                        0111
         MVC   2(16,@5),0(@E)                                     0111
* READA:    CESDID=CESDTBID;            /* ENTER ESDID FOR THIS ITEM
READA    MVC   0(2,@5),CESDTBID                                   0112
*           NUMCESDS=NUMCESDS+1;        /* INCR NO. CESD TABLE LINES
         LA    @F,1                                               0113
         AH    @F,NUMCESDS                                        0113
         STH   @F,NUMCESDS                                        0113
*           CURRCESD=CURRCESD+18;       /* LOC NEXT EMPTY LINE IN TABLE
         LA    @5,18(0,@5)                                        0114
*           /* BRANCH HERE TO AVOID ENTERING NULL CESD ITEM IN TABLE
* READA1:   CESDTBID=CESDTBID+1;        /* INCR CESD TABLE ID
READA1   LA    @F,1                                               0115
         AH    @F,CESDTBID                                        0115
         STH   @F,CESDTBID                                        0115
*         END;                          /* LOOP
*         CURRLD=CURRCESD;              /* INIT CURRLD
         AH    @2,@D3                                             0116
@DO9F8   CH    @2,NUMITEMS                                        0116
         BC    12,@DO9F9                                          0116
         LR    @6,@5                                              0117
*         GO TO READ;                   /* GO TO READ ANOTHER RECORD
         BC    15,READ                                            0118
*       END;
*   /* TEST IF INPUT RECORD TYPE IS IDR
*   IF IDENT1=IDR                       /* IF RECORD ID IS '10000000'
*     THEN                              /* THEN
@9FA     CLC   0(1,@3),IDR                                        0120
*       GO TO READ;                     /* GO TO READ ANOTHER RECORD
         BC    08,READ                                            0121
*   /* TEST IF INPUT RECORD TYPE IS CONTROL OR CONTROL-EOS
*   IF IDENT1=CONTROL                   /* IF RECORD ID IS '00000001'
*      × IDENT1=CONTEOS                 /* OR IF ID IS '00000101'
*     THEN                              /* THEN
         CLC   0(1,@3),CONTROL                                    0122
         BC    08,@9F1                                            0122
         CLC   0(1,@3),CONTEOS                                    0122
         BC    07,@9F0                                            0122
*       DO;                             /* DON'T PROCESS NEXT RECORD
*         TEXTNEXT='1'B;                /* INDICATE NEXT RECORD IS TEXT
@9F1     OI    SWITCHES,B'10000000'                               0124
*         GO TO READ;                   /* GO TO READ THIS TEXT RECORD
         BC    15,READ                                            0125
*       END;
*   /* TEST IF INPUT RECORD TYPE IS CONTROL-EOM
*   IF IDENT1=CONTEOM                   /* IF RECORD ID IS '00001101'
*     THEN                              /* THEN EOM HAS BEEN REACHED
@9F0     CLC   0(1,@3),CONTEOM                                    0127
*       GO TO NUCCONV;                  /* GO TO CONVERT NUC ADDRESSES
         BC    08,NUCCONV                                         0128
*   /* TEST IF INPUT RECORD TYPE IS SYM
*   IF IDENT1=SYM                       /* IF RECORD ID IS '01000000'
*     THEN                              /* THEN
         CLC   0(1,@3),SYM                                        0129
*       GO TO READ;                     /* GO TO READ ANOTHER RECORD
         BC    08,READ                                            0130
*   /* TEST IF INPUT RECORD TYPE IS SCATTER/TRANSLATION
*   IF IDENT1=SCATRANS                  /* IF RECORD IS '00010000'
*     THEN                              /* THEN
         CLC   0(1,@3),SCATRANS                                   0131
         BC    07,@9EF                                            0131
*       /* TEST IF A NUCLEUS IS BEING MAPPED
*       IF NUCMAP='0'B                  /* IF NUCMAP SWITCH IS OFF
*         THEN                          /* THEN THE LOAD MOD NOT A NUC
         TM    SWITCHES+2,B'00001000'                             0132
*           GO TO READ;                 /* GO TO READ ANOTHER RECORD
         BC    08,READ                                            0133
*         ELSE                          /* ELSE LOAD MOD IS A NUCLEUS
*           DO;
*             /* TEST IF THIS IS FIRST SCAT/TRAN READ
*             IF TRSCREC1='1'B          /* IF TRSCREC1 SWITCH IS ON
*               THEN                    /* THEN
         TM    SWITCHES+2,B'00000100'                             0135
         BC    12,@9EE                                            0135
*                 DO;                   /* EXECUTE FOLLOWING CODE
*                   /* CHECK FOR VALID CESD ORDER
*                   IF CESDTAB(1,3:10)=IEAANIP0  /* 1ST SYMBOL NIP ?
*                      & CESDTAB(1,1:2)=1  /* WITH CESDID = 1  YM04682
*                      × CESDTAB(1,3:10)=IEAVNIP0  /* OR VNIP? YM04682
*                      & CESDTAB(1,1:2)=1  /* AND ITS CESDID IS 1
*                     THEN
         L     @7,CETABPTR                                        0137
         CLC   2(8,@7),IEAANIP0                                   0137
         BC    07,@9ED                                            0137
         CLC   0(2,@7),@D3                                        0137
         BC    08,@9EC                                            0137
@9ED     L     @7,CETABPTR                                        0137
         CLC   2(8,@7),IEAVNIP0                                   0137
         BC    07,@9EB                                            0137
         CLC   0(2,@7),@D3                                        0137
         BC    07,@9EA                                            0137
*                       GO TO READB;         /* CONTINUE
         BC    08,READB                                           0138
*                     ELSE;                  /* NO,WRONG CESD
@9EA     EQU   *                                                  0139
*                       ERRORS(29)='1'B;     /* INVALID CESD ORDER
@9EB     L     @7,PARMPTR                                         0140
         OI    35(@7),B'00001000'                                 0140
*                       NUCMAP='0'B;         /* TURN NUCMAP SWITCH OFF
         NI    SWITCHES+2,B'11110111'                             0141
*                       GO TO READ;          /* GO READ ANOTHER RECORD
         BC    15,READ                                            0142
*                 END;
*               ELSE                    /* ELSE NOT FIRST TIME THRU
*                 GO TO READB1;         /* CONTINUE BUILDING TABLES
*         /************************************************************
* READB:  /* BRANCH HERE WHEN FIRST CSECT IN CESD TABLE IS IEAANIPO
*         /************************************************************
*         TRNTABAD=CURRCESD+18;         /* INIT TRNTABAD
@9E9     EQU   *                                                  0145
READB    LA    @F,18                                              0145
         AR    @F,@5                                              0145
         ST    @F,TRNTABAD                                        0145
*         CESDEND=TRNTABAD;             /* INIT CESDEND
         MVC   CESDEND(4),TRNTABAD                                0146
*         SCTTABAD=TRNTABAD+TRANDCNT-2; /* INIT SCTTABAD
         LH    @F,@D4                                             0147
         L     @7,PARMPTR                                         0147
         AH    @F,30(0,@7)                                        0147
         A     @F,TRNTABAD                                        0147
         ST    @F,SCTTABAD                                        0147
*         ADDRTBAD=SCTTABAD+SCATDCNT-4; /* GET ADDR OF ADDR TABLE
         LH    @F,@D5                                             0148
         AH    @F,28(0,@7)                                        0148
         A     @F,SCTTABAD                                        0148
         ST    @F,ADDRTBAD                                        0148
*         RLDTABAD=ADDRTBAD+SCATDCNT-4; /* INIT RLDTABAD
         LH    @F,@D5                                             0149
         AH    @F,28(0,@7)                                        0149
         A     @F,ADDRTBAD                                        0149
         ST    @F,RLDTABAD                                        0149
*         CURRLD=RLDTABAD;              /* INIT CURRLD
         LR    @6,@F                                              0150
*         IF RLDTABAD>=HIGHADDR         /* WILL ENTRIES OVERFLOW TABLE
*           THEN                        /* YES
         L     @F,HIGHADDR                                        0151
         C     @F,RLDTABAD                                        0151
         BC    02,@9E8                                            0151
*             DO;
*               ERRORS(4)='1'B;         /* INDICATE TABLE OVERFLOW
         OI    32(@7),B'00010000'                                 0153
*               GO TO ABORT;            /* ABORT (MESSAGE HMB104I)
         BC    15,ABORT                                           0154
*             END;
*           ELSE                        /* ENTRIES WILL NOT OVERFLOW
*             DO;
*               CURRTRSC=ADDRTBAD-4;    /* INIT SCAT/TRANTAB LINE PTR
@9E8     L     @F,ADDRTBAD                                        0157
         SH    @F,@D6                                             0157
         ST    @F,CURRTRSC                                        0157
*               TRSCREC1='0'B;          /* AVOID ABOVE CODE NEXT TIME
         NI    SWITCHES+2,B'11111011'                             0158
*             END;
*             /********************************************************
*             /* BUILD SCATTAB AND TRANTAB (SCATTAB IS BUILT FIRST)
*             /* IF SCATTAB IS BUILT THEN SWITCH TO A DECREMENT OF
*             /* TWO AND DO NOT PUT ITEM IN TABLE THIS TIME. IF
*             /* TRANTAB FINISHED THEN DO NOT PUT ITEM IN TABLE BUT
*             /* DECREMENT COUNTER SO THAT THIS LOOP WILL FINISH.
*             /********************************************************
* READB1:     DO I=COUNT4 TO 1 BY -INCR; /* LOOP THRU LOAD MOD RECORD
@9E7     EQU   *                                                  0160
READB1   LH    @F,2(0,@3)                                         0160
         LR    @2,@F                                              0160
         BC    15,@DO9E5                                          0160
*               TRSCDCNT=TRSCDCNT-INCR; /* DECREMENT COUNTER OF
@DO9E6   LH    @F,TRSCDCNT                                        0161
         SH    @F,INCR                                            0161
         STH   @F,TRSCDCNT                                        0161
*                                       /* SCATTER/TRANSLATION DATA
*               /* TEST IF SCATTAB OR TRANTAB IS FINISHED BEING BUILT
*               IF TRSCDCNT=TRANDCNT    /* IF SCATTAB BUILT
*                  × TRSCDCNT=0         /* OR IF TRANTAB BUILT
*                 THEN                  /* THEN DO NOT PUT ITEM IN TBL
         L     @7,PARMPTR                                         0162
         LH    @F,30(0,@7)                                        0162
         CH    @F,TRSCDCNT                                        0162
         BC    08,@9E2                                            0162
         SR    @F,@F                                              0162
         CH    @F,TRSCDCNT                                        0162
         BC    07,@9E1                                            0162
*                   DO;                 /* THIS TURN BUT STILL DECR
*                     INCR=2;           /* SET INCR TO BUILD TRANTAB
@9E2     LA    @F,2                                               0164
         STH   @F,INCR                                            0164
*                     CURRTRSC=CURRTRSC+2;  /* INCR TBL LINE PTR
         A     @F,CURRTRSC                                        0165
         ST    @F,CURRTRSC                                        0165
*                     I=I-2;               /* DECR I BY 2
         SH    @2,@D7                                             0166
*                     GO TO READC;      /* DO NOT PUT ITEM IN TABLE
         BC    15,READC                                           0167
*                   END;
*                 ELSE                  /* PUT ITEM IN TABLE & INCR PTR
*                   TRSCITEM(1:INCR)=TRSCDATA(I-INCR,2:INCR+1);
@9E1     LH    @7,INCR                                            0169
         LCR   @7,@7                                              0169
         AR    @7,@2                                              0169
         BCTR  @7,0                                               0169
         LA    @E,5(@7,@3)                                        0169
         LH    @8,INCR                                            0169
         BCTR  @8,0                                               0169
         L     @7,CURRTRSC                                        0169
         LR    @A,@7                                              0169
         EX    @8,@MVC                                            0169
*                   CURRTRSC=CURRTRSC-INCR; /* LOC NEXT LINE IN TABLE
@9E0     L     @F,CURRTRSC                                        0170
         SH    @F,INCR                                            0170
         ST    @F,CURRTRSC                                        0170
* READC:            /* BRANCH HERE TO AVOID ENTERING SCAT OR TRAN ITEM
*                   /* IN TABLE.
*             END;                      /* LOOP TO BUILD TABLE
*              GO TO READ;              /* READ NEXT RECORD
READC    SH    @2,INCR                                            0171
@DO9E5   CH    @2,@D3                                             0171
         BC    10,@DO9E6                                          0171
         BC    15,READ                                            0172
*           END;
*   /* TEST IF INPUT RECORD TYPE IS CONTROL&RLD
*      OR CONTROL&RLD-EOS OR CONTROL&RLD-EOM
*   IF IDENT1=CONTRLD                   /* IF RECORD ID IS '00000011'
*      × IDENT1=CRLDEOS                 /* OR IF ID IS '00000111'
*      × IDENT1=CRLDEOM                 /* OR IF ID IS '00001111'
*     THEN                              /* THEN
@9EF     CLC   0(1,@3),CONTRLD                                    0174
         BC    08,@9DF                                            0174
         CLC   0(1,@3),CRLDEOS                                    0174
         BC    08,@9DE                                            0174
         CLC   0(1,@3),CRLDEOM                                    0174
         BC    07,@9DD                                            0174
*       DO;                             /* DON'T PROCESS NEXT RECORD
@9DE     EQU   *                                                  0175
*         TEXTNEXT='1'B;                /* INDICATE NEXT RECORD IS TEXT
@9DF     OI    SWITCHES,B'10000000'                               0176
*         GO TO READ2;                  /* GO TO PUT RLD DATA IN TABLE
         BC    15,READ2                                           0177
*       END;
*   /* TEST IF INPUT RECORD TYPE IS RLD OR RLD-EOS OR RLD-EOM
*   IF IDENT1=RLD                       /* IF RECORD ID IS '00000010'
*      × IDENT1=RLDEOS                  /* OR IF ID IS '00000110'
*      × IDENT1=RLDEOM                  /* OR IF ID IS '00001110'
*      THEN                             /* THEN
@9DD     CLC   0(1,@3),RLD                                        0179
         BC    08,@9DC                                            0179
         CLC   0(1,@3),RLDEOS                                     0179
         BC    08,@9DB                                            0179
         CLC   0(1,@3),RLDEOM                                     0179
         BC    07,@9DA                                            0179
* READ2: /* BRANCH HERE WHEN CONTROL/RLD (-EOS, EOM) RECORD IS ENCOUNT-
*           ERED.  FOLLOWING CODE ENTERS DATA FROM IT INTO RLD TABLE.
*       DO;                             /* PROCESS RLD DATA
@9DB     EQU   *                                                  0180
@9DC     EQU   *                                                  0180
*         R=1;                          /* INIT RLDATA R PTR SUBSCRIPT
READ2    LA    @F,1                                               0181
         STH   @F,R                                               0181
*         P=3;                          /* INIT RLDATA P PTR SUBSCRIPT
         LA    @F,3                                               0182
         STH   @F,P                                               0182
*         F=5;                          /* INIT RLDATA FLAG SUBSCRIPT
         LA    @F,5                                               0183
         STH   @F,F                                               0183
*         A=6;                          /* INIT RLDATA ADDR SUBSCRIPT
         LA    @F,6                                               0184
         STH   @F,A                                               0184
*         DATACNT=COUNT3;               /* SET DATA COUNT FOR THIS REC
         MVC   DATACNT(2),6(@3)                                   0185
* READ3:  /* BRANCH HERE WHEN ITEM FROM CURRENT RLD RECORD IN PROCESS
*            ISN'T ENTERED INTO RLD TABLE.  FOLLOWING CODE TRIES TO
*            ENTER NEXT ITEM FROM RLD RECORD INTO RLD TABLE.
*         /* TEST IF ALL RLD DATA FROM THIS RECORD HAS BEEN PROCESSED
*         IF DATACNT=0                  /* IF DATA COUNT IS 0
*           THEN                        /* THEN
READ3    SR    @F,@F                                              0186
         CH    @F,DATACNT                                         0186
*             GO TO READ5;              /* GO TO TEST FOR MORE INPUT
         BC    08,READ5                                           0187
*         /* TEST IF FOLLOWING RLD ITEM HAS SAME R AND P POINTERS
*         IF RLDATA(F,8)='1'B           /* IF CHAINED BIT IS ON
*           THEN                        /* THEN
         LH    @7,F                                               0188
         BCTR  @7,0                                               0188
         LA    @A,16(@7,@3)                                       0188
         TM    0(@A),B'00000001'                                  0188
         BC    12,@9D9                                            0188
*             DATACNT=DATACNT-4;        /* DECREMENT DATA COUNT BY 4
         LH    @F,DATACNT                                         0189
         SH    @F,@D6                                             0189
         STH   @F,DATACNT                                         0189
         BC    15,@9D8                                            0190
*           ELSE                        /* ELSE RLD ITEMS NOT CHAINED
*             DATACNT=DATACNT-8;        /* DECREMENT DATA COUNT BY 8
@9D9     LH    @F,DATACNT                                         0190
         SH    @F,@D8                                             0190
         STH   @F,DATACNT                                         0190
*         /* TEST IF RLD DATA SHOULD BE PUT INTO RLD TABLE
*         IF RLDATA(R,1:16)=0           /* IF R PTR IS 0
*            × RLDATA(R,1:16)=RLDATA(P,1:16) /* OR SAME AS P PTR
*           THEN                        /* THEN DON'T PUT DATA INTO TAB
@9D8     LH    @8,R                                               0191
         BCTR  @8,0                                               0191
         LA    @A,16(@8,@3)                                       0191
         CLC   0(2,@A),@D1+2                                      0191
         BC    08,@9D7                                            0191
         LH    @7,P                                               0191
         BCTR  @7,0                                               0191
         LA    @E,16(@7,@3)                                       0191
         CLC   0(2,@A),0(@E)                                      0191
         BC    07,@9D6                                            0191
* READ4:      /* BRANCH HERE AFTER ENTERING RLD DATA INTO TABLE.
*                FOLLOWING CODE INCREMENTS SUBSCRIPTS.
*             DO;                       /* INCREMENT SUBSCRIPTS
@9D7     EQU   *                                                  0192
*               /* TEST IF FOLLOWING RLD ITEM HAS SAME R AND P POINTERS
*               IF RLDATA(F,8)='1'B     /* IF CHAINED BIT IS ON
*                 THEN                  /* THEN
READ4    LH    @7,F                                               0193
         BCTR  @7,0                                               0193
         LA    @A,16(@7,@3)                                       0193
         TM    0(@A),B'00000001'                                  0193
         BC    12,@9D5                                            0193
*                   DO;                 /* INCREMENT SUBSCRIPTS F AND A
*                     F=F+4;            /* INCR FLAG SUBSCRIPT
         LA    @F,4                                               0195
         AH    @F,F                                               0195
         STH   @F,F                                               0195
*                     A=A+4;            /* INCR ADDRESS SUBSCRIPT
         LA    @F,4                                               0196
         AH    @F,A                                               0196
         STH   @F,A                                               0196
*                     GO TO READ3;      /* TRY AGAIN TO PUT ITEM IN TAB
         BC    15,READ3                                           0197
*                   END;
*                 ELSE                  /* ELSE RLD ITEMS NOT CHAINED
*                   DO;                 /* INCREMENT RLD SUBSCRIPTS
*                     R=F+4;            /* INCR R PTR SUBSCRIPT
@9D5     LA    @F,4                                               0200
         AH    @F,F                                               0200
         STH   @F,R                                               0200
*                     P=F+6;            /* INCR P PTR SUBSCRIPT
         LA    @F,6                                               0201
         AH    @F,F                                               0201
         STH   @F,P                                               0201
*                     F=F+8;            /* INCR FLAG SUBSCRIPT
         LA    @F,8                                               0202
         AH    @F,F                                               0202
         STH   @F,F                                               0202
*                     A=A+8;            /* INCR ADDRESS SUBSCRIPT
         LA    @F,8                                               0203
         AH    @F,A                                               0203
         STH   @F,A                                               0203
*                     GO TO READ3;      /* TRY AGAIN TO PUT ITEM IN TAB
         BC    15,READ3                                           0204
*                   END;
*             END;
*           ELSE                        /* ELSE R PTR NOT 0 OR = P PTR
*             DO;                       /* PUT RLD DATA INTO TABLE
*               /* TEST IF RLD DATA SHOULD BE PUT INTO TABLE
*               IF RLDATA(F,3)='1'B     /* IF TYPE IS PR DISP VALUE
*                                          OR PR CUM DISP VALUE
*                 THEN                  /* THEN DON'T PUT DATA INTO TAB
@9D6     LH    @7,F                                               0208
         BCTR  @7,0                                               0208
         LA    @A,16(@7,@3)                                       0208
         TM    0(@A),B'00100000'                                  0208
*                   GO TO READ4;        /* GO TO INCREMENT SUBSCRIPTS
         BC    01,READ4                                           0209
*               /* TEST IF RLD DATA SHOULD BE PUT INTO TABLE
*               IF RLDATA(F,5)='0'B     /* IF TYPE IS TWO BYTE
*                 THEN                  /* THEN DON'T PUT DATA INTO TAB
         TM    0(@A),B'00001000'                                  0210
*                   GO TO READ4;        /* GO TO INCREMENT SUBSCRIPTS
         BC    08,READ4                                           0211
*               /* TEST IF RLD TABLE HAS ROOM FOR RLD DATA
*               IF CURRLD>HIGHADDR-8    /* IF TABLE IS FULL
*                 THEN                  /* THEN
         L     @F,HIGHADDR                                        0212
         SH    @F,@D8                                             0212
         CR    @F,@6                                              0212
         BC    10,@9D2                                            0212
*                   DO;                 /* PROCESS ERROR
*                     ERRORS(4)='1'B;   /* INDICATE TABLE OVERFLOW
         L     @8,PARMPTR                                         0214
         OI    32(@8),B'00010000'                                 0214
*                     GO TO ABORT;      /* ABORT (MESSAGE HMB104I)
         BC    15,ABORT                                           0215
*                   END;
*               EREFPRES='1'B;          /* INDIC EXTERNAL REF PRESENT
@9D2     OI    SWITCHES+1,B'00000010'                             0217
*               RPTR=RLDATA(R,1:16);    /* PUT R PTR INTO TABLE
         LH    @7,R                                               0218
         BCTR  @7,0                                               0218
         LA    @A,16(@7,@3)                                       0218
         MVC   @TEMP2+2(2),0(@A)                                  0218
         L     @F,@TEMP2                                          0218
         STH   @F,0(0,@6)                                         0218
*               PPTR=RLDATA(P,1:16);    /* PUT P PTR INTO TABLE
         LH    @8,P                                               0219
         BCTR  @8,0                                               0219
         LA    @A,16(@8,@3)                                       0219
         MVC   @TEMP2+2(2),0(@A)                                  0219
         L     @F,@TEMP2                                          0219
         STH   @F,2(0,@6)                                         0219
*               RLDFLAG=RLDATA(F);      /* PUT FLAGS INTO TABLE
         LH    @7,F                                               0220
         BCTR  @7,0                                               0220
         LA    @E,16(@7,@3)                                       0220
         MVC   4(1,@6),0(@E)                                      0220
*               RLDADDR=RLDATA(A,1:24); /* PUT ADDRESS INTO TABLE
         LH    @8,A                                               0221
         BCTR  @8,0                                               0221
         LA    @A,16(@8,@3)                                       0221
         MVC   @TEMP3+1(3),0(@A)                                  0221
         L     @F,@TEMP3                                          0221
         ST    @F,@TEMP4                                          0221
         MVC   5(3,@6),@TEMP4+1                                   0221
*               NUMRLDS=NUMRLDS+1;      /* INCR CNT OF RLD TAB ENTRIES
         LA    @F,1                                               0222
         A     @F,NUMRLDS                                         0222
         ST    @F,NUMRLDS                                         0222
*               CURRLD=CURRLD+8;        /* LOC NEXT EMPTY RLD TAB LINE
         LA    @6,8(0,@6)                                         0223
*               GO TO READ4;            /* GO TO INCREMENT SUBSCRIPTS
         BC    15,READ4                                           0224
*             END;
*       END;
@9D3     EQU   *                                                  0226
*   /* ALL LOAD MODULE RECORD TYPES HAVE NOW BEEN TESTED FOR
*   ERRORS(2)='1'B;                     /* ERROR-INVALID LMOD REC TYPE
@9DA     L     @7,PARMPTR                                         0227
         OI    32(@7),B'01000000'                                 0227
*   GO TO ABORT;                        /* ABORT (MESSAGE HMB102I)
         BC    15,ABORT                                           0228
* READ5: /* BRANCH HERE AFTER AN RLD RECORD IS PROCESSED.  FOLLOWING
*           CODE TESTS FOR END OF INPUT.
*   /* TEST IF INPUT RECORD TYPE IS RLD-EOM OR CONTROL&RLD-EOM
*   IF IDENT1=RLDEOM                    /* IF RECORD ID IS '00001110'
*      × IDENT1=CRLDEOM                 /* OR IF ID IS '00001111'
*     THEN                              /* THEN
READ5    CLC   0(1,@3),RLDEOM                                     0229
         BC    08,@9D1                                            0229
         CLC   0(1,@3),CRLDEOM                                    0229
         BC    07,@9D0                                            0229
*       GO TO NUCCONV;                  /* GO TO CONVERT NUC ADDRESSES
         BC    08,NUCCONV                                         0230
*     ELSE                              /* ELSE EOM NOT YET REACHED
*       GO TO READ;                     /* GO TO READ ANOTHER RECORD
         BC    15,READ                                            0231
*
* /********************************************************************
* /*   THE FOLLOWING SECTION OF CODE CONVERTS ALL CESD TABLE AND RLD
* /*   TABLE ADDRESSES POST-IPL VALUES WHEN A NUCLEUS IS BEING MAPPED.
* /*   AN ALGORITHM IS USED TO MOVE IEAQFX00 TO LOCATION 00 AND
* /*   IEAANIP0 TO THE HIGH END OF THE NUCLEUS WHILE THE REST OF THE
* /*   CONTROL SECTIONS KEEP THEIR SAME ORDER (BUT WITH NEW ADDRESSES)
* /*   BETWEEN THESE TWO CONTROL SECTIONS. A FEW TABLE INITIALIZATIONS
* /*   ARE ALSO PERFORMED HERE. THIS SECTION IS ENTERED AFTER ALL
* /*   LOAD MODULE RECORDS HAVE BEEN READ.
* /********************************************************************
* NUCCONV:
*
*   CESDEND=CURRCESD;                   /* INIT CESDEND
NUCCONV  ST    @5,CESDEND                                         0232
*   IF NUCMAP='0'B                      /* NUCLEUS BEING MAPPED
*     THEN                              /* NO
         TM    SWITCHES+2,B'00001000'                             0233
         BC    05,@9CF                                            0233
*       RLDTABAD=CESDEND;               /* INIT RLD TABLE ADDR
         MVC   RLDTABAD(4),CESDEND                                0234
*     ELSE;                             /* NULL ELSE
@9CF     EQU   *                                                  0235
*   RLDEND=NUMRLDS*8+RLDTABAD;          /* INIT RLDEND
@9CE     LA    @F,8                                               0236
         M     @E,NUMRLDS                                         0236
         A     @F,RLDTABAD                                        0236
         ST    @F,RLDEND                                          0236
*   /* TEST IF THERE IS ENOUGH ROOM TO BUILD THE INDEX TABLE
*   IF RLDEND+CESDTBID*2>HIGHADDR-2     /* IF INDEXES WILL OVERFLOW TAB
*     THEN                              /* THEN
         LH    @E,CESDTBID                                        0237
         AR    @E,@E                                              0237
         A     @E,RLDEND                                          0237
         L     @7,HIGHADDR                                        0237
         SH    @7,@D7                                             0237
         CR    @E,@7                                              0237
         BC    12,@9CD                                            0237
*       DO;                             /* PROCESS THE ERROR
*         ERRORS(4)='1'B;               /* INDICATE TABLE OVERFLOW
         L     @7,PARMPTR                                         0239
         OI    32(@7),B'00010000'                                 0239
*         GO TO ABORT;                  /* ABORT (MESSAGE HMB104I)
         BC    15,ABORT                                           0240
*       END;
*     ELSE                              /* ELSE INDEXTAB CAN BE BUILT
*       INDTABAD=RLDEND;                /* INIT INDTABAD
@9CD     MVC   INDTABAD(4),RLDEND                                 0242
*   /* TEST IF LOAD MODULE IS A NUCLEUS
*   IF NUCMAP='0'B                      /* MAPPING THE NUCLEUS ?
*     THEN                              /* NO
@9CC     TM    SWITCHES+2,B'00001000'                             0243
*       GO TO NCSORT;                   /* DON'T DO NUCLEUS MAP
         BC    08,NCSORT                                          0244
*     ELSE;                             /* NULL ELSE
*
*   IF LMODNAME(1:7)=IEANUC0            /* IF NAME IS IEANUC0X
*     THEN                              /* THEN
         L     @7,PARMPTR                                         0246
         CLC   36(7,@7),IEANUC0                                   0246
         BC    07,@9CB                                            0246
*       DO;                             /* CHECK THE FOLLOWING
*         RESTRICT(8);                  /* RESTRICT REGISTER 8
*         GEN;
         LA    8,CVTPTR                GET LOCATION 10 HEX      YM2968
         L     8,0(0,8)                GET ADDRESS OF CVT
         USING CVTMAP,8                SET BASE OF CVT MAP      YM2968
         L 8,CVTEXT2                   GET ADDR OF EXTENSION    YM2968
         USING CVTXTNT2,8              SET BASE OF CVT EXT.     YM2968
         MVC   TEMPAREA(1),CVTNUCLS    GET NUCLEUS NUMBER       YM2968
         DS    0H
*         RELEASE (8);
*         /* TEST IF NUCLEUS NUMBER REQUESTED WAS IPL'D
*         IF LMODNAME(8)=TEMPAREA(1)    /* IF USER'S NUC SAME AS CVT'S
*           THEN                        /* THEN
         CLC   43(1,@7),TEMPAREA                                  0251
*             GO TO NUCCONV1;           /* GO TO CHECK CESD ORDER
         BC    08,NUCCONV1                                        0252
*           ELSE;                       /* NULL ELSE
*             ERRORS(30)='1'B;          /* ELSE USER'S NUC NOT IPL'D
         OI    35(@7),B'00000100'                                 0254
         BC    15,@9CA                                            0256
*      END;
*        ELSE;                          /* NULL ELSE
@9CB     EQU   *                                                  0256
*
*    /*****************************************************************
*    /* BRANCH HERE WHEN NUCLEUS FOR WHICH LISTLOAD IS REQUESTED IS
*    /* THE ONE THAT WAS IPL'D.  FOLLOWING CODE CHECKS FOR PROPER
*    /* CESD SEQUENCE.
*    /*****************************************************************
* NUCCONV1:
*         IF CESDTAB(1,3:10)=IEAANIP0   /* IF 1ST SYMBOL IS IEAANIP0
*           × CESDTAB(1,3:10)=IEAVNIP0  /* OR IEAVNIP0
*           THEN                        /* THEN
@9CA     EQU   *                                                  0257
NUCCONV1 L     @7,CETABPTR                                        0257
         CLC   2(8,@7),IEAANIP0                                   0257
         BC    08,@9C9                                            0257
         CLC   2(8,@7),IEAVNIP0                                   0257
         BC    07,@9C8                                            0257
*             GO TO NUCCONV2;           /* GO TO START CONVERTING
         BC    08,NUCCONV2                                        0258
*           ELSE;                       /* NULL ELSE
*         ERRORS(29)='1'B;              /* INVALID CESD ORDER (HMB129I)
@9C8     L     @7,PARMPTR                                         0260
         OI    35(@7),B'00001000'                                 0260
*         NUCMAP='0'B;                  /* TURN NUCMAP SWITCH OFF
         NI    SWITCHES+2,B'11110111'                             0261
*         GO TO NCSORT;                 /* DON'T DO NUCLEUS MAP
         BC    15,NCSORT                                          0262
*
*    /*****************************************************************
*    /* BRANCH HERE WHEN FIRST CSECT IN CESD IS IEAANIP0.
*    /* FOLLOWING CODE DOES SOME INITIALIZATIONS.
*    /*****************************************************************
* NUCCONV2:
*    SCATWDCT=(SCATDCNT/4)-1;           /* GET WORD COUNT FOR COUNTER
NUCCONV2 L     @7,PARMPTR                                         0263
         LH    @E,28(0,@7)                                        0263
         SRDA  @E,32                                              0263
         LA    @0,4                                               0263
         DR    @E,@0                                              0263
         BCTR  @F,0                                               0263
         ST    @F,SCATWDCT                                        0263
*    IF NUCMAP^='1'B                    /* IF NUCLEUS NOT BEING MAPPED
*      THEN                             /* THEN
         TM    SWITCHES+2,B'00001000'                             0264
*        GO TO NCSORT;                  /* GO SORT CESD TABLE ENTRIES
         BC    12,NCSORT                                          0265
*      ELSE;                            /* NULL ELSE
*
*   /*                   THE FOLLOWING LINES ARE CHANGED FOR PTM YM2968
*
*    /* FLAG ALL ENTRIES IN ADDR TABLE
*    DO I=1 TO SCATWDCT;                /* LOOP THRU ADDR TABLE
         LA    @2,1                                               0267
         BC    15,@DO9C6                                          0267
*      ADDRTBL(I)='70000000'X;          /* FLAG ALL ENTRIES
@DO9C7   LR    @7,@2                                              0268
         BCTR  @7,0                                               0268
         SLA   @7,2                                               0268
         L     @8,ADDRTBAD                                        0268
         LA    @A,0(@7,@8)                                        0268
         MVC   0(4,@A),@X4                                        0268
*    END;
*
*    /* FOLLOWING CODE DOES SOME INITIALIZING
*    LASTAD=0;                          /* SET LAST ADDR TO ZERO
         AH    @2,@D3                                             0269
@DO9C6   C     @2,SCATWDCT                                        0269
         BC    12,@DO9C7                                          0269
         SR    @F,@F                                              0270
         ST    @F,LASTAD                                          0270
*    SIZEN=CESDTAB(2,16:18);            /* GET SIZE OF QFX
         L     @7,CETABPTR                                        0271
         MVC   @TEMP3+1(3),33(@7)                                 0271
         L     @F,@TEMP3                                          0271
         ST    @F,SIZEN                                           0271
*    REMAINDR=SIZEN//8;                 /* COMPUT REMAINDER
         LR    @E,@F                                              0272
         SRDA  @E,32                                              0272
         LA    @0,8                                               0272
         DR    @E,@0                                              0272
         ST    @E,REMAINDR                                        0272
*    IF REMAINDR^=0                     /* CHECK IF REMAINDER
*      THEN                             /* YES
         SR    @F,@F                                              0273
         C     @F,REMAINDR                                        0273
         BC    08,@9C3                                            0273
*        SIZEN=SIZEN+8-REMAINDR;        /* GET ROUNDED LENGTH
         L     @F,REMAINDR                                        0274
         LCR   @F,@F                                              0274
         AH    @F,@D8                                             0274
         A     @F,SIZEN                                           0274
         ST    @F,SIZEN                                           0274
*      ELSE;                            /* NULL ELSE
@9C3     EQU   *                                                  0275
*    TRCOUNT=(TRANDCNT-2)/2;            /* GET NO. OF TRANS ENTRIES
@9C2     LH    @E,@D4                                             0276
         L     @8,PARMPTR                                         0276
         AH    @E,30(0,@8)                                        0276
         SRDA  @E,32                                              0276
         LA    @0,2                                               0276
         DR    @E,@0                                              0276
         ST    @F,TRCOUNT                                         0276
*    Q=TRANTAB(1);                      /* GET TRANS PTR TO NIP
         L     @7,TRNTABAD                                        0277
         MVC   Q(2),0(@7)                                         0277
*    S=TRANTAB(2);                      /* GET TRANS PTR TO QFX
         MVC   S(2),2(@7)                                         0278
*    /*****************************************************************
*    /* BUILD ADDRESS TABLE TO BE USED WITH THE TRANSLATION TABLE
*    /*****************************************************************
*    DO N=3 TO TRCOUNT;                 /* LOOP THRU TRANSLATION TABLE
         LA    @F,3                                               0279
         BC    15,@DO9C0                                          0279
*    P=TRANTAB(N);                      /* GET TRANSLATION TABLE ENTRY
@DO9C1   LH    @7,N                                               0280
         BCTR  @7,0                                               0280
         SLA   @7,1                                               0280
         L     @8,TRNTABAD                                        0280
         LH    @F,0(@7,@8)                                        0280
         STH   @F,P                                               0280
*    IF P=0                             /* TRANSLATION TBL ENTRY = 0
*     × P=Q                             /* OR IEAVNIP0 PTR
*       × P=S                           /* OR IEAQFX00 PTR
*         THEN                          /* YES
         SR    @F,@F                                              0281
         CH    @F,P                                               0281
         BC    08,@9BD                                            0281
         LH    @F,Q                                               0281
         CH    @F,P                                               0281
         BC    08,@9BC                                            0281
         LH    @F,S                                               0281
         CH    @F,P                                               0281
         BC    07,@9BB                                            0281
*            GO TO CHNXT;               /* BYPASS PROCESSING
         BC    08,CHNXT                                           0282
*         ELSE;                         /* NULL ELSE
*           REMAINDR=SIZEN//8;          /* COMPUTE REMAINDER
@9BB     L     @E,SIZEN                                           0284
         SRDA  @E,32                                              0284
         LA    @0,8                                               0284
         DR    @E,@0                                              0284
         ST    @E,REMAINDR                                        0284
*           IF REMAINDR^=0              /* CHECK IF REMAINDER
*              THEN                     /* YES
         SR    @F,@F                                              0285
         C     @F,REMAINDR                                        0285
         BC    08,@9BA                                            0285
*                SIZEN=SIZEN+8-REMAINDR;    /* GET ROUNDED LENGTH
         L     @F,REMAINDR                                        0286
         LCR   @F,@F                                              0286
         AH    @F,@D8                                             0286
         A     @F,SIZEN                                           0286
         ST    @F,SIZEN                                           0286
*              ELSE;                    /* NULL ELSE
@9BA     EQU   *                                                  0287
*
*    IF ADDRTBL(P)='70000000'X          /* HAS ENTRY BEEN FILLED
*      THEN                             /* NO
@9B9     LH    @7,P                                               0288
         BCTR  @7,0                                               0288
         SLA   @7,2                                               0288
         L     @8,ADDRTBAD                                        0288
         LA    @A,0(@7,@8)                                        0288
         CLC   0(4,@A),@X4                                        0288
         BC    07,@9B8                                            0288
*        DO;
*        ADDRTBL(P)=SIZEN+LASTAD;       /* SET ENTRY TO SIZE OF
         L     @F,LASTAD                                          0290
         A     @F,SIZEN                                           0290
         ST    @F,@TEMP4                                          0290
         MVC   0(4,@A),@TEMP4                                     0290
*                                       /* PREVIOUS CSECT + LAST ADDR
*        LASTAD=ADDRTBL(P);             /* SET LASTAD TO SAME
         MVC   @TEMP4(4),0(@A)                                    0291
         L     @F,@TEMP4                                          0291
         ST    @F,LASTAD                                          0291
*        CESDTYP=CESDTAB(N,11);         /* GET CESD TYPE
         LH    @7,N                                               0292
         BCTR  @7,0                                               0292
         MH    @7,@D2                                             0292
         L     @8,CETABPTR                                        0292
         LA    @E,10(@7,@8)                                       0292
         MVC   CESDTYP(1),0(@E)                                   0292
*        IF CESDTYP(5:8)='0000'B        /* IS CESD TYPE SD
*         × CESDTYP(5:8)='0100'B        /* OR PC ?
*         × CESDTYP(5:8)='0101'B        /* OR CM ?             ZA03162
*          THEN                         /* YES
         TM    CESDTYP,B'00001111'                                0293
         BC    08,@9B7                                            0293
         TM    CESDTYP,B'00000100'                                0293
         BC    12,@9B6                                            0293
         TM    CESDTYP,B'00001011'                                0293
         BC    08,@9B5                                            0293
@9B6     TM    CESDTYP,B'00000101'                                0293
         BC    12,@9B4                                            0292
         TM    CESDTYP,B'00001010'                                0293
         BC    05,@9B3                                            0293
*            SIZEN=CESDTAB(N,16:18);     /* SAVE PRESENT CESD SIZE
@9B5     EQU   *                                                  0294
@9B7     LH    @7,N                                               0294
         BCTR  @7,0                                               0294
         MH    @7,@D2                                             0294
         L     @8,CETABPTR                                        0294
         LA    @A,15(@7,@8)                                       0294
         MVC   @TEMP3+1(3),0(@A)                                  0294
         L     @F,@TEMP3                                          0294
         ST    @F,SIZEN                                           0294
*          ELSE;                        /* NULL ELSE
@9B3     EQU   *                                                  0295
@9B4     EQU   *                                                  0295
*        IF CESDTYP(5:8)='0011'B        /* IS CESD TYPE LR ?
*          THEN                         /* YES
@9B2     TM    CESDTYP,B'00000011'                                0296
         BC    12,@9B1                                            0295
         TM    CESDTYP,B'00001100'                                0296
         BC    05,@9B0                                            0296
*            DO;
*              ID=CESDTAB(N,17:18);     /* GET CESD ID
         LH    @7,N                                               0298
         BCTR  @7,0                                               0298
         MH    @7,@D2                                             0298
         L     @8,CETABPTR                                        0298
         LA    @A,16(@7,@8)                                       0298
         MVC   @TEMP2+2(2),0(@A)                                  0298
         L     @F,@TEMP2                                          0298
         ST    @F,ID                                              0298
*              SIZEN=CESDTAB(ID,16:18);  /* GET SIZE OF THAT CESD
         LR    @7,@F                                              0299
         BCTR  @7,0                                               0299
         MH    @7,@D2                                             0299
         LA    @A,15(@7,@8)                                       0299
         MVC   @TEMP3+1(3),0(@A)                                  0299
         L     @F,@TEMP3                                          0299
         ST    @F,SIZEN                                           0299
*            END;
*          ELSE;                        /* NULL ELSE
*        END;
*      ELSE;                            /* NULL ELSE
@9B8     EQU   *                                                  0303
* CHNXT: END;
CHNXT    EQU   *                                                  0304
*
*        /*************************************************************
*        /* COMPUTE FINAL ADDRESSES AND PUT IN CESD TABLE
*        /*************************************************************
*        DO L=3 TO TRCOUNT;             /* LOOP THRU TABLES
@9AE     LH    @F,N                                               0304
         AH    @F,@D3                                             0304
@DO9C0   STH   @F,N                                               0304
         C     @F,TRCOUNT                                         0304
         BC    12,@DO9C1                                          0304
         LA    @F,3                                               0305
         BC    15,@DO9AC                                          0305
*        CESDTYP=CESDTAB(L,11);         /* GET CESDTYPE
@DO9AD   L     @7,L                                               0306
         BCTR  @7,0                                               0306
         MH    @7,@D2                                             0306
         L     @8,CETABPTR                                        0306
         LA    @E,10(@7,@8)                                       0306
         MVC   CESDTYP(1),0(@E)                                   0306
*        IF CESDTYP(5:8)='0011'B        /* IS IT LR ?
*          THEN                         /* YES
         TM    CESDTYP,B'00000011'                                0307
         BC    12,@9A9                                            0306
         TM    CESDTYP,B'00001100'                                0307
*            GO TO BYP;                 /* BYPASS UPDATING ADDRESSES
         BC    10,BYP                                             0308
*          ELSE;                        /* NULL ELSE
@9A8     EQU   *                                                  0309
*        N=TRANTAB(L);                  /* GET PTR TO SCATTER TBL ENT
@9A9     L     @7,L                                               0310
         BCTR  @7,0                                               0310
         SLA   @7,1                                               0310
         L     @8,TRNTABAD                                        0310
         LH    @F,0(@7,@8)                                        0310
         STH   @F,N                                               0310
*        SCATAD=SCATTAB(N);             /* GET CSECT ADDR FROM SCATTER
         LR    @7,@F                                              0311
         BCTR  @7,0                                               0311
         SLA   @7,2                                               0311
         L     @8,SCTTABAD                                        0311
         LA    @A,0(@7,@8)                                        0311
         MVC   @TEMP4(4),0(@A)                                    0311
         L     @F,@TEMP4                                          0311
         ST    @F,SCATAD                                          0311
*                                       /* TABLE
*        NEWAD=ADDRTBL(N);              /* GET ADDR FROM ADDR TABLE
         L     @8,ADDRTBAD                                        0312
         LA    @A,0(@7,@8)                                        0312
         MVC   @TEMP4(4),0(@A)                                    0312
         L     @F,@TEMP4                                          0312
         ST    @F,NEWAD                                           0312
*        RLF=NEWAD-SCATAD;              /* GET ADDR MINUS SCATTER VALUE
         S     @F,SCATAD                                          0313
         ST    @F,RLF                                             0313
*        CESDTAB(L,12:14)=RLF+CESDTAB(L,12:14); /* ADD EDITOR ASSIGNED
         L     @7,L                                               0314
         BCTR  @7,0                                               0314
         MH    @7,@D2                                             0314
         L     @8,CETABPTR                                        0314
         LA    @A,11(@7,@8)                                       0314
         MVC   @TEMP3+1(3),0(@A)                                  0314
         L     @F,@TEMP3                                          0314
         A     @F,RLF                                             0314
         ST    @F,@TEMP4                                          0314
         MVC   0(3,@A),@TEMP4+1                                   0314
*                                       /* ORIGIN + RLF VALUE
*    BYP: END;
*        CESDTAB(2,12:14)=0;            /* SET QFX ADDR TO ZERO
BYP      L     @F,L                                               0315
         AH    @F,@D3                                             0315
@DO9AC   ST    @F,L                                               0315
         C     @F,TRCOUNT                                         0315
         BC    12,@DO9AD                                          0315
         L     @7,CETABPTR                                        0316
         MVC   29(3,@7),@D1+1                                     0316
*
*    /*****************************************************************
*    /* SUBTRACT NIP SIZE FROM NUCLEUS SIZE AND
*    /* ROUND THIS VALUE UP TO A DOUBLEWORD MULTIPLE AND SET NIP
*    /* ADDR TO THIS VALUE.
*    /*****************************************************************
*          NUCMINIP=TEXTLEN- CESDTAB(1,16:18);  /* NUC MINUS NIP
         MVC   @TEMP3+1(3),15(@7)                                 0317
         L     @F,@TEMP3                                          0317
         LCR   @F,@F                                              0317
         L     @8,PARMPTR                                         0317
         A     @F,64(0,@8)                                        0317
         ST    @F,@TEMP4                                          0317
         MVC   NUCMINIP(3),@TEMP4+1                               0317
*          REMAINDR=NUCMINIP//8;        /* COMPUTE REMAINDER
         MVC   @TEMP3+1(3),NUCMINIP                               0318
         L     @E,@TEMP3                                          0318
         SRDA  @E,32                                              0318
         LA    @0,8                                               0318
         DR    @E,@0                                              0318
         ST    @E,REMAINDR                                        0318
*          /* TEST IF REMAINDER MUST BE ROUNDED TO A DOUBLEWORD
*          IF REMAINDR^=0               /* IF REMAINDER NOT ZERO
*            THEN                       /* THEN
         SR    @F,@F                                              0319
         C     @F,REMAINDR                                        0319
         BC    08,@9A7                                            0319
*              DO;
*                NUCMINIP=NUCMINIP+8-REMAINDR; /* ROUND TO DOUBLE WORD
         L     @F,REMAINDR                                        0321
         LCR   @F,@F                                              0321
         AH    @F,@D8                                             0321
         MVC   @TEMP3+1(3),NUCMINIP                               0321
         A     @F,@TEMP3                                          0321
         ST    @F,@TEMP4                                          0321
         MVC   NUCMINIP(3),@TEMP4+1                               0321
*              END;
*            ELSE;                      /* ADDR ON DOUBLEWORD BOUNDRY
@9A7     EQU   *                                                  0323
*              CESDTAB(1,12:14)=NUCMINIP; /* INSERT NIP ADDR IN CESDTAB
@9A6     L     @7,CETABPTR                                        0324
         MVC   11(3,@7),NUCMINIP                                  0324
*              ADDRTBL(Q,2:4)=NUCMINIP;     /* SET NIP ADDR IN ADDR TBL
         LH    @8,Q                                               0325
         BCTR  @8,0                                               0325
         SLA   @8,2                                               0325
         L     @7,ADDRTBAD                                        0325
         LA    @A,1(@8,@7)                                        0325
         MVC   0(3,@A),NUCMINIP                                   0325
*              P=TRANTAB(2);            /* GET QFX PTR
         L     @8,TRNTABAD                                        0326
         MVC   P(2),2(@8)                                         0326
*              ADDRTBL(P)=0;            /* SET QFX ADDR TO ZERO
         LH    @7,P                                               0327
         BCTR  @7,0                                               0327
         SLA   @7,2                                               0327
         L     @8,ADDRTBAD                                        0327
         LA    @A,0(@7,@8)                                        0327
         MVC   0(4,@A),@D1                                        0327
*              NIPADDR=NUCMINIP;        /* INSERT NIP ADDR IN CESDTAB
         MVC   NIPADDR(3),NUCMINIP                                0328
*
* /********************************************************************
* /* RESOLVE LABEL REFERENCES USING SCATTER/TRANSLATION AND CESD TABLES
* /* TO OBTAIN NEW ADDRESS
* /********************************************************************
* RESLRET: /* BRANCH HERE AFTER FINISHING FIRST PASS OF CESD TABLE
*          DO R=1 TO TRCOUNT;            /* LOOP THRU TABLES
RESLRET  LA    @F,1                                               0329
         BC    15,@DO9A4                                          0329
*            CESDTYP=CESDTAB(R,11);      /* GET CESD TYPE
@DO9A5   LH    @7,R                                               0330
         BCTR  @7,0                                               0330
         MH    @7,@D2                                             0330
         L     @8,CETABPTR                                        0330
         LA    @E,10(@7,@8)                                       0330
         MVC   CESDTYP(1),0(@E)                                   0330
*            IF CESDTYP(5:8)='0011'B     /* LABEL REFERENCE ?
*              THEN                      /* YES
         TM    CESDTYP,B'00000011'                                0331
         BC    12,@9A1                                            0330
         TM    CESDTYP,B'00001100'                                0331
         BC    05,@9A0                                            0331
*                DO;
*                   N=TRANTAB(R);        /* GET PTR TO SCATTER TBL ENT
         LH    @7,R                                               0333
         BCTR  @7,0                                               0333
         SLA   @7,1                                               0333
         L     @8,TRNTABAD                                        0333
         LH    @F,0(@7,@8)                                        0333
         STH   @F,N                                               0333
*                   SCATAD=SCATTAB(N);   /* GET CSECT ADDR FROM SCATTER
         LR    @7,@F                                              0334
         BCTR  @7,0                                               0334
         SLA   @7,2                                               0334
         L     @8,SCTTABAD                                        0334
         LA    @A,0(@7,@8)                                        0334
         MVC   @TEMP4(4),0(@A)                                    0334
         L     @F,@TEMP4                                          0334
         ST    @F,SCATAD                                          0334
*                                        /* TABLE
*                   /* SUBTRACT CSECT ADDR FROM LR ADDR
*                  LRDIF=CESDTAB(R,12:14)-SCATAD;  /* GET LR DISP
         LCR   @F,@F                                              0335
         LH    @7,R                                               0335
         BCTR  @7,0                                               0335
         MH    @7,@D2                                             0335
         L     @8,CETABPTR                                        0335
         LA    @A,11(@7,@8)                                       0335
         MVC   @TEMP3+1(3),0(@A)                                  0335
         A     @F,@TEMP3                                          0335
         ST    @F,LRDIF                                           0335
*                  /* GET NEW LR ADDR
*                  CESDTAB(R,12:14)=ADDRTBL(N)+LRDIF;
         LH    @7,N                                               0336
         BCTR  @7,0                                               0336
         SLA   @7,2                                               0336
         L     @8,ADDRTBAD                                        0336
         LA    @A,0(@7,@8)                                        0336
         MVC   @TEMP4(4),0(@A)                                    0336
         AL    @F,@TEMP4                                          0336
         LH    @7,R                                               0336
         BCTR  @7,0                                               0336
         MH    @7,@D2                                             0336
         L     @8,CETABPTR                                        0336
         ST    @F,@TEMP4                                          0336
         LA    @A,11(@7,@8)                                       0336
         MVC   0(3,@A),@TEMP4+1                                   0336
*                END;
*              ELSE;                    /* NULL ELSE
@9A0     EQU   *                                                  0338
@9A1     EQU   *                                                  0338
*          END;                         /* END OF LOOP THRU TABLES
* /*                                      END OF CHANGES FOR PTM YM2968
*    CURRLD=RLDTABAD-8;                 /* INIT CURRLD
@99F     LH    @F,R                                               0339
         AH    @F,@D3                                             0339
@DO9A4   STH   @F,R                                               0339
         C     @F,TRCOUNT                                         0339
         BC    12,@DO9A5                                          0339
         LH    @6,@D9                                             0340
         A     @6,RLDTABAD                                        0340
*
* /********************************************************************
* /* BRANCH HERE WHEN ALL CESD TABLE ADDRESSES HAVE BEEN
* /* CONVERTED. FOLLOWING CODE RELOCATES RLDTAB ADDRESSES
* /********************************************************************
* NUCCONV4:  CURRLD=CURRLD+8;           /* LOC NEXT LINE IN RLDTABLE
NUCCONV4 LA    @6,8(0,@6)                                         0341
*    /* TEST IF ALL RLDTABLE ADDRESSES HAVE BEEN CONVERTED
*    IF CURRLD=RLDEND                   /* IF AT END OF RLD TABLE
*      THEN                             /* THEN
         C     @6,RLDEND                                          0342
*        GO TO NCSORT ;                 /* GO TO SORT CESDTAB
         BC    08,NCSORT                                          0343
*      ELSE;                            /* NULL ELSE
*   N=TRANTAB(PPTR);                    /* GET TRANSLATION TABLE ENTRY
         LH    @7,2(0,@6)                                         0345
         BCTR  @7,0                                               0345
         SLA   @7,1                                               0345
         L     @8,TRNTABAD                                        0345
         LH    @F,0(@7,@8)                                        0345
         STH   @F,N                                               0345
*                                       /* FOR P PTR
*   SCADR=SCATTAB(N);                   /* GET SCAT ADDR OF CSECT THAT
         LR    @7,@F                                              0346
         BCTR  @7,0                                               0346
         SLA   @7,2                                               0346
         L     @8,SCTTABAD                                        0346
         LA    @A,0(@7,@8)                                        0346
         MVC   @TEMP4(4),0(@A)                                    0346
         L     @F,@TEMP4                                          0346
         ST    @F,SCADR                                           0346
*                                       /* CONTAINS THE ADCON
*   OFFSET=RLDADDR-SCADR;               /* GET OFFSET INTO CSECT
         LCR   @F,@F                                              0347
         MVC   @TEMP3+1(3),5(@6)                                  0347
         A     @F,@TEMP3                                          0347
         ST    @F,OFFSET                                          0347
*   /* CHECK IF NIP CESD AND GET STORED NIP ADDR IF YES
*   IF PPTR=0                           /* NIP CESD            ZA01417
*      THEN                             /* YES
         SR    @F,@F                                              0348
         CH    @F,2(0,@6)                                         0348
         BC    07,@99E                                            0348
*       DO;
*         RLDADDR=NIPADDR+OFFSET;       /* PUT NEW ADDR OF ADCON IN
         L     @F,OFFSET                                          0350
         MVC   @TEMP3+1(3),NIPADDR                                0350
         A     @F,@TEMP3                                          0350
         ST    @F,@TEMP4                                          0350
         MVC   5(3,@6),@TEMP4+1                                   0350
         BC    15,@99D                                            0352
*       END;                            /* RLD TABLE
*     ELSE                              /* THIS IS NOT NIP CESD
*       DO;
*         RLDADDR=ADDRTBL(N)+OFFSET;    /* PUT NEW ADDR OF
@99E     L     @F,OFFSET                                          0353
         LH    @7,N                                               0353
         BCTR  @7,0                                               0353
         SLA   @7,2                                               0353
         L     @8,ADDRTBAD                                        0353
         LA    @A,0(@7,@8)                                        0353
         MVC   @TEMP4(4),0(@A)                                    0353
         AL    @F,@TEMP4                                          0353
         ST    @F,@TEMP4                                          0353
         MVC   5(3,@6),@TEMP4+1                                   0353
*                                       /* ADCON IN RLD TABLE
*       END;
*   GO TO NUCCONV4;                     /* CHECK NEXT RLD TABLE ENTRY
         BC    15,NUCCONV4                                        0355
* /********************************************************************
* /*   THE FOLLOWING SECTION OF CODE SORTS CESD TABLE LINES INTO
* /*   ASCENDING NUMERICAL ORDER ACCORDING TO THE SEGMENT NUMBER
* /*   (IF THE LOAD MODULE IS IN OVERLAY), ADDRESS, AND CESD TYPE
* /*   IN EACH LINE. TO COMPARE TWO LINES,THE THREE FIELDS FOR
* /*   BOTH LINES ARE MOVED INTO TWO 5-BYTE AREAS.  THE RESULT IS
* /*   SEGMENT 1 SORTED BY ADDRESS, THEN SEGMENT 2, ETC.
* /*   THIS SECTION ALSO BUILDS THE INDEX TABLE, WHICH IS USED TO
* /*   DIRECTLY MATCH ID CHAIN POINTERS, R POINTERS, AND P
* /*   POINTERS TO CESD TABLE LINES.  THESE POINTER VALUES ARE USED
* /*   AS OFFSETS INTO THE INDEX TABLE TO FIND A VALUE WHICH
* /*   IS USED AS AN OFFSET INTO THE CESD TABLE.  THIS SECTION
* /*   HAS BEEN ASSIGNED NEW VALUES.
* /********************************************************************
* NCSORT:
*   M=NUMCESDS;                         /* INIT M TO NO. CESD TAB ENTS
NCSORT   LH    @F,NUMCESDS                                        0356
         ST    @F,M                                               0356
* NCSORT1: /* BRANCH HERE WHEN A PASS THROUGH THE CESD TABLE IS
*             FINISHED.  FOLLOWING CODE TESTS IF SORT IS FINISHED.
*   M=M/2;                              /* DIVIDE ARRAY IN HALF
NCSORT1  L     @E,M                                               0357
         SRDA  @E,32                                              0357
         LA    @0,2                                               0357
         DR    @E,@0                                              0357
         ST    @F,M                                               0357
*   /* TEST IF SORT IS FINISHED
*   IF M=0                              /* IF M IS 0
*     THEN                              /* THEN SORT IS FINISHED
         SR    @F,@F                                              0358
         C     @F,M                                               0358
         BC    07,@99C                                            0358
*       DO;                             /* DO THE FOLLOWING
*                 /* BUILD THE INDEX TABLE
*         DO J=1 TO NUMCESDS;           /* LOOP THRU CESD & INDEX TABS
         LA    @F,1                                               0360
         BC    15,@DO99A                                          0360
*           N=CESDTAB(J,1:2);           /* USE CESD AS INDEX
@DO99B   L     @7,J                                               0361
         BCTR  @7,0                                               0361
         MH    @7,@D2                                             0361
         L     @8,CETABPTR                                        0361
         LA    @A,0(@7,@8)                                        0361
         MVC   @TEMP2+2(2),0(@A)                                  0361
         L     @F,@TEMP2                                          0361
         STH   @F,N                                               0361
*           INDEXTAB(N)=J;              /* MAKE ENTRY IN INDEX TABLE
         L     @F,J                                               0362
         LH    @7,N                                               0362
         BCTR  @7,0                                               0362
         SLA   @7,1                                               0362
         L     @8,INDTABAD                                        0362
         STH   @F,0(@7,@8)                                        0362
*         END;                          /* LOOP
*         GO TO NRSORT;                 /* GO TO NUMERIC RLD SORT
         L     @F,J                                               0363
         AH    @F,@D3                                             0363
@DO99A   ST    @F,J                                               0363
         CH    @F,NUMCESDS                                        0363
         BC    12,@DO99B                                          0363
         BC    15,NRSORT                                          0364
*       END;
*   K=NUMCESDS-M;                       /* SET INDEX L
@99C     LH    @F,NUMCESDS                                        0366
         S     @F,M                                               0366
         ST    @F,K                                               0366
*   J=1;                                /* SET INDEX J TO 1
         LA    @F,1                                               0367
         ST    @F,J                                               0367
* NCSORT2: /* BRANCH HERE TO COMPLETE A PASS THRU THE CESD TABLE.
*         /* FOLLOWING CODE SETS INDEX I.
*   I=J;                                /* SET INDEX I
NCSORT2  L     @2,J                                               0368
* NCSORT3: /* BRANCH HERE WHEN TWO COMPARENDS ARE FOUND
*         /* FOLLOWING CODE COMPARES THEM
*   IM=I+M;                             /* SET INDEX IM
NCSORT3  L     @F,M                                               0369
         AR    @F,@2                                              0369
         ST    @F,IM                                              0369
*   BITCHECK=CESDTAB(I,11);             /* PREPARE TYPE AREA FOR TEST
         LR    @7,@2                                              0370
         BCTR  @7,0                                               0370
         MH    @7,@D2                                             0370
         L     @8,CETABPTR                                        0370
         LA    @E,10(@7,@8)                                       0370
         MVC   BITCHECK(1),0(@E)                                  0370
*   /* FOLLOWING HANDLES CASE WHERE SD AND/OR PC AND/OR LR HAVE
*   /* SAME ADDRESS
*   DO N=5 TO 10 BY 5;                  /* LOOP TWICE
         LA    @F,5                                               0371
         STH   @F,N                                               0371
*     /* TEST IF CESD TYPE IS SD
*     IF BITCHECK(5:8)='0000'B          /* IS SO
*       THEN
@DO997   TM    BITCHECK,B'00001111'                               0372
         BC    05,@993                                            0372
*         TEMPAREA(N)=ONE;              /* PUT ONE INTO COMPARISON AREA
         LH    @7,N                                               0373
         LA    @A,TEMPAREA-1(@7)                                  0373
         MVC   0(1,@A),ONE                                        0373
         BC    15,@992                                            0374
*       ELSE                            /* ELSE PUT IN TWO OR ZERO
*         /*TST IF CESD TYPE IS LR
*         IF BITCHECK(5:8)='0011'B      /* IS LR
*           THEN                        /* THEN
@993     TM    BITCHECK,B'00000011'                               0374
         BC    12,@991                                            0373
         TM    BITCHECK,B'00001100'                               0374
         BC    05,@990                                            0374
*             TEMPAREA(N)=TWO;          /* PUT TWO INTO COMPARE AREA
         LH    @7,N                                               0375
         LA    @A,TEMPAREA-1(@7)                                  0375
         MVC   0(1,@A),TWO                                        0375
         BC    15,@98F                                            0376
*           ELSE                        /* ELSE PC OR OTHER TYPE
*             TEMPAREA(N)=ZERO(1);      /* PUT 0 INTO COMPARISON AREA
@990     EQU   *                                                  0376
@991     LH    @7,N                                               0376
         LA    @A,TEMPAREA-1(@7)                                  0376
         MVC   0(1,@A),ZERO                                       0376
*     BITCHECK=CESDTAB(IM,11);          /* PREPARE TYPE AREA FOR TEST
@98F     EQU   *                                                  0377
@992     L     @7,IM                                              0377
         BCTR  @7,0                                               0377
         MH    @7,@D2                                             0377
         L     @8,CETABPTR                                        0377
         LA    @E,10(@7,@8)                                       0377
         MVC   BITCHECK(1),0(@E)                                  0377
*   END;                                /* LOOP
*   TEMPAREA(2:4)=CESDTAB(I,12:14);     /* PUT 1ST ADDR INTO TEMPAREA
         LH    @F,N                                               0378
         AH    @F,@D10                                            0378
@DO996   STH   @F,N                                               0378
         CH    @F,@D11                                            0378
         BC    12,@DO997                                          0378
         LR    @7,@2                                              0379
         BCTR  @7,0                                               0379
         MH    @7,@D2                                             0379
         L     @8,CETABPTR                                        0379
         LA    @E,11(@7,@8)                                       0379
         MVC   TEMPAREA+1(3),0(@E)                                0379
*   TEMPAREA(7:9)=CESDTAB(IM,12:14);    /* PUT 2ND ADDR INTO TEMPAREA
         L     @7,IM                                              0380
         BCTR  @7,0                                               0380
         MH    @7,@D2                                             0380
         LA    @E,11(@7,@8)                                       0380
         MVC   TEMPAREA+6(3),0(@E)                                0380
*   /* TEST IF INPUT LOAD MODULE IS IN OVERLAY STRUCTURE
*   IF OVERLAY='1'B                     /* IF OVERLAY SWITCH IS ON
*     THEN                              /* THEN
         L     @7,PARMPTR                                         0381
         TM    20(@7),B'01000000'                                 0381
         BC    12,@98E                                            0381
*       DO;                             /* FILL HIGH ORDER BYTE W/SEGNO
*         TEMPAREA(1)=CESDTAB(I,15);    /* PUT SEG NO. INTO TEMPAREA
         LR    @8,@2                                              0383
         BCTR  @8,0                                               0383
         MH    @8,@D2                                             0383
         L     @7,CETABPTR                                        0383
         LA    @E,14(@8,@7)                                       0383
         MVC   TEMPAREA(1),0(@E)                                  0383
*         TEMPAREA(6)=CESDTAB(IM,15);   /* PUT SEG NO. INTO TEMPAREA
         L     @8,IM                                              0384
         BCTR  @8,0                                               0384
         MH    @8,@D2                                             0384
         LA    @E,14(@8,@7)                                       0384
         MVC   TEMPAREA+5(1),0(@E)                                0384
         BC    15,@98D                                            0386
*       END;
*     ELSE                              /* ELSE OVERLAY SWITCH IS OFF
*       DO;                             /* FILL HIGH ORDER BYTE WITH 0
*         TEMPAREA(1)=ZERO(1);          /* PUT 0 INTO TEMPAREA
@98E     MVC   TEMPAREA(1),ZERO                                   0387
*         TEMPAREA(6)=ZERO(1);          /* PUT 0 INTO TEMPAREA
         MVC   TEMPAREA+5(1),ZERO                                 0388
*       END;
*   /* TEST WHICH IS GREATER OF TWO CESDTAB SEG NOS. AND ADDRESSES
*   IF TEMPAREA(1:5)<=TEMPAREA(6:10)    /* IF SECOND GREATER THAN FIRST
*     THEN                              /* THEN
@98D     CLC   TEMPAREA(5),TEMPAREA+5                             0390
*       GO TO NCSORT4;                  /* DON'T EXCHANGE CESD LINES
         BC    12,NCSORT4                                         0391
*   TEMPAREA(1:18)=CESDTAB(I);          /* FIRST GOES INTO TEMP AREA
         LR    @7,@2                                              0392
         BCTR  @7,0                                               0392
         MH    @7,@D2                                             0392
         L     @8,CETABPTR                                        0392
         LA    @E,0(@7,@8)                                        0392
         MVC   TEMPAREA(18),0(@E)                                 0392
*   CESDTAB(I)=CESDTAB(IM);             /* SECOND GOES INTO FIRST
         L     @7,IM                                              0393
         BCTR  @7,0                                               0393
         MH    @7,@D2                                             0393
         LA    @E,0(@7,@8)                                        0393
         LR    @7,@2                                              0393
         BCTR  @7,0                                               0393
         MH    @7,@D2                                             0393
         LA    @A,0(@7,@8)                                        0393
         MVC   0(18,@A),0(@E)                                     0393
*   CESDTAB(IM)=TEMPAREA(1:18);         /* FIRST GOES INTO SECOND
         L     @7,IM                                              0394
         BCTR  @7,0                                               0394
         MH    @7,@D2                                             0394
         LA    @A,0(@7,@8)                                        0394
         MVC   0(18,@A),TEMPAREA                                  0394
*   I=I-M;                              /* DECREMENT INDEX I BY M
         S     @2,M                                               0395
*   /* TEST IF BEGINNING OF CESD TABLE HAS BEEN REACHED
*   IF I>=1                             /* IF BEGINNING NOT REACHED
*     THEN                              /* THEN
         CH    @2,@D3                                             0396
*       GO TO NCSORT3;                  /* GO TO COMPARE AGAIN
         BC    10,NCSORT3                                         0397
* NCSORT4: /* BRANCH HERE TO BYPASS SWAPPING TWO CESD TABLE LINES.
*             FOLLOWING CODE TESTS FOR SCAN COMPLETION.
*   J=J+1;                              /* INCREMENT INDEX J BY 1
NCSORT4  LA    @F,1                                               0398
         A     @F,J                                               0398
         ST    @F,J                                               0398
*   /* TEST IF THIS SCAN IS FINISHED
*   IF J>K                              /* IF INDEX J GREATER THAN K
*     THEN                              /* THEN
         L     @F,K                                               0399
         C     @F,J                                               0399
*       GO TO NCSORT1;                  /* GO TO POSSIBLY SCAN AGAIN
         BC    04,NCSORT1                                         0400
*     ELSE                              /* ELSE SCAN ISN'T FINISHED
*       GO TO NCSORT2;                  /* GO TO FINISH IT
         BC    15,NCSORT2                                         0401
*
* /********************************************************************
* /*   THE FOLLOWING SECTION OF CODE SORTS RLD TABLE LINES INTO
* /*   ASCENDING NUMERICAL ORDER ACCORDING TO THE ADDRESS FIELD IN
* /*   EACH LINE.  COMPARISONS ARE MADE FROM THE RLD TABLE LINES,
* /*   WITHOUT USING TEMPORARY AREAS.  THIS SECTION IS ENTERED AFTER
* /*   THE NCSORT IS FINISHED.
* /********************************************************************
*
* NRSORT:
*   /* TEST IF LOAD MODULE CONTAINS ANY EXTERNAL REFERENCES
*   IF EREFPRES='0'B                    /* IF EREFPRES SWITCH IS OFF
*     THEN                              /* THEN
NRSORT   TM    SWITCHES+1,B'00000010'                             0402
*       GO TO NACESD;                   /* GO TO NACESD PROCESSING
         BC    08,NACESD                                          0403
*   M=NUMRLDS;                          /* INIT M TO NO. RLD TAB ENTS
         MVC   M(4),NUMRLDS                                       0404
* NRSORT1: /* BRANCH HERE WHEN A PASS THROUGH THE RLD TABLE IS
*             FINISHED.  FOLLOWING CODE TESTS IF SORT IS FINISHED.
*   M=M/2;                              /* DIVIDE ARRAY IN HALF
NRSORT1  L     @E,M                                               0405
         SRDA  @E,32                                              0405
         LA    @0,2                                               0405
         DR    @E,@0                                              0405
         ST    @F,M                                               0405
*   /* TEST IF SORT IS FINISHED
*   IF M=0                              /* IF M IS 0
*     THEN                              /* THEN SORT IS FINISHED
         SR    @F,@F                                              0406
         C     @F,M                                               0406
*         GO TO NACESD;                 /* GO TO NUMERIC CESD PROCESSNG
         BC    08,NACESD                                          0407
*   K=NUMRLDS-M;                        /* SET INDEX K
         L     @F,NUMRLDS                                         0408
         S     @F,M                                               0408
         ST    @F,K                                               0408
*   J=1;                                /* SET INDEX J TO 1
         LA    @F,1                                               0409
         ST    @F,J                                               0409
* NRSORT2: /* BRANCH HERE TO COMPLETE A PASS THROUGH THE RLD TABLE.
*             FOLLOWING CODE SETS INDEX I.
*   I=J;                                /* SET INDEX I
NRSORT2  L     @2,J                                               0410
* NRSORT3: /* BRANCH HERE WHEN TWO NEW COMPARANDS ARE FOUND.
*             FOLLOWING CODE COMPARES THEM.
*   IM=I+M;                             /* SET INDEX IM
NRSORT3  L     @F,M                                               0411
         AR    @F,@2                                              0411
         ST    @F,IM                                              0411
*   /* TEST WHICH IS GREATER OF TWO RLD TABLE ADDRESSES
*   IF RLDTAB(I,6:8)<=RLDTAB(IM,6:8)    /* IF SECOND GREATER THAN FIRST
*     THEN                              /* THEN
         LR    @7,@F                                              0412
         BCTR  @7,0                                               0412
         SLA   @7,3                                               0412
         L     @8,RLDTABAD                                        0412
         LA    @E,5(@7,@8)                                        0412
         LR    @7,@2                                              0412
         BCTR  @7,0                                               0412
         SLA   @7,3                                               0412
         LA    @A,5(@7,@8)                                        0412
         CLC   0(3,@A),0(@E)                                      0412
*       GO TO NRSORT4;                  /* DON'T EXCHANGE RLD LINES
         BC    12,NRSORT4                                         0413
*   TEMPAREA(1:8)=RLDTAB(I);            /* FIRST GOES INTO TEMP AREA
         LA    @E,0(@7,@8)                                        0414
         MVC   TEMPAREA(8),0(@E)                                  0414
*   RLDTAB(I)=RLDTAB(IM);               /* SECOND GOES INTO FIRST
         L     @7,IM                                              0415
         BCTR  @7,0                                               0415
         SLA   @7,3                                               0415
         LA    @E,0(@7,@8)                                        0415
         LR    @7,@2                                              0415
         BCTR  @7,0                                               0415
         SLA   @7,3                                               0415
         LA    @A,0(@7,@8)                                        0415
         MVC   0(8,@A),0(@E)                                      0415
*   RLDTAB(IM)=TEMPAREA(1:8);           /* FIRST GOES INTO SECOND
         L     @7,IM                                              0416
         BCTR  @7,0                                               0416
         SLA   @7,3                                               0416
         LA    @A,0(@7,@8)                                        0416
         MVC   0(8,@A),TEMPAREA                                   0416
*   I=I-M;                              /* DECREMENT INDEX I BY M
         S     @2,M                                               0417
*   /* TEST IF BEGINNING OF RLD TABLE HAS BEEN REACHED
*   IF I>=1                             /* IF BEGINNING NOT REACHED
*     THEN                              /* THEN
         CH    @2,@D3                                             0418
*       GO TO NRSORT3;                  /* GO TO COMPARE ADDRESSES
         BC    10,NRSORT3                                         0419
* NRSORT4: /* BRANCH HERE TO BYPASS SWAPPING TWO RLD TABLE LINES.
*             FOLLOWING CODE TESTS FOR SCAN COMPLETION.
*   J=J+1;                              /* INCREMENT INDEX J BY 1
NRSORT4  LA    @F,1                                               0420
         A     @F,J                                               0420
         ST    @F,J                                               0420
*   /* TEST IF THIS SCAN IS FINISHED
*   IF J>K                              /* IF INDEX J GREATER THAN K
*     THEN                              /* THEN
         L     @F,K                                               0421
         C     @F,J                                               0421
*       GO TO NRSORT1;                  /* GO TO POSSIBLY SCAN AGAIN
         BC    04,NRSORT1                                         0422
*     ELSE                              /* ELSE SCAN ISN'T FINISHED
*       GO TO NRSORT2;                  /* GO TO FINISH IT
         BC    15,NRSORT2                                         0423
*
* /********************************************************************
* /*   THE FOLLOWING SECTION OF CODE PRODUCES DATA FOR THE NUMERICAL
* /*   AND ALPHABETICAL MAPS.  IT IS ENTERED TWICE: AFTER THE NRSORT
* /*   (AT WHICH TIME IT WILL PRODUCE A NUMERICAL MAP) AND AFTER THE
* /*   ACSORT (WHEN IT WILL PRODUCE AN ALPHABETICAL MAP).
* /********************************************************************
*
* NACESD:
*   CURRCESD=CESDEND-18;                /* PREPARE FOR NEXT STATEMENT
NACESD   LH    @5,@D12                                            0424
         A     @5,CESDEND                                         0424
*   /* TEST IF INPUT LOAD MODULE IS IN OVERLAY
*   IF OVERLAY='1'B                     /* IF OVERLAY SWITCH IS ON
*     THEN                              /* THEN
         L     @7,PARMPTR                                         0425
         TM    20(@7),B'01000000'                                 0425
         BC    12,@98C                                            0425
*       HISEGNO=SEGNO;                  /* INIT HIGHEST SEGNO IN LMOD
         MVC   HISEGNO+1(1),14(@5)                                0426
         MVI   HISEGNO,X'00'                                      0426
         BC    15,@98B                                            0427
*     ELSE                              /* ELSE OVERLAY SWITCH IS OFF
*       HISEGNO=SEGLENCT;               /* SET HIGH SEG NO. TO 0
@98C     MVC   HISEGNO(2),SEGLENCT                                0427
*   SAVCURR1=CETABPTR;                  /* GET BEGINNING OF CESDTAB
@98B     MVC   SAVCURR1(4),CETABPTR                               0428
* NACESD1: /* BRANCH HERE WHEN RETURNING FROM NRLD ROUTINE.  FOLLOWING
*             CODE PERFORMS INITIALIZATIONS FOR NACESD PROCESSING.
*   /* TEST IF NUMERIC CESD PROCESSING IS BEING PERFORMED
*   IF NUMCESD='1'B                     /* IF NUMCESD SWITCH IS ON
*     THEN                              /* THEN
NACESD1  TM    SWITCHES+2,B'01000000'                             0429
         BC    12,@98A                                            0429
*       DO;                             /* PREPARE FOR THIS PROCESSING
*         NCHD='1'B;                    /* INDIC TO PRINT NCESD HEADING
         OI    SWITCHES,B'00001100'                               0431
*         NCSHD='1'B;                   /* INDIC TO PRINT NCESD SUBHEAD
*         /* TEST IF INPUT LOAD MODULE IS IN OVERLAY STRUCTURE
*         IF OVERLAY='1'B               /* IF OVERLAY SWITCH IS ON
*           THEN                        /* THEN
         L     @7,PARMPTR                                         0433
         TM    20(@7),B'01000000'                                 0433
         BC    12,@989                                            0433
*             DO;                       /* PREPARE FOR THIS PROCESSING
*               SEGLEN=0;               /* SET SEGLEN TO 0
         MVC   SEGLEN(3),@D1+1                                    0435
*               CURSEGNO=CURSEGNO+1;    /* INCR CURR SEGNO IN PROCESS
         LA    @F,1                                               0436
         SR    @0,@0                                              0436
         IC    @0,CURSEGNO                                        0436
         AR    @F,@0                                              0436
         STC   @F,CURSEGNO                                        0436
*               DASHLINE='1'B;          /* INDIC TO PRNT LINE OF DASHES
         OI    SWITCHES+1,B'00001000'                             0437
*               DUBLDASH='1'B;          /* PRINT ANOTHER LINE OF DASHES
         OI    SWITCHES+2,B'00010000'                             0438
*             END;
*       END;
         BC    15,@988                                            0441
*     ELSE                              /* ELSE NUMCESD SWITCH IS OFF
*       DO;                             /* PREP FOR ALPHA CESD PROCESNG
*         ACHD='1'B;                    /* INDIC TO PRINT ACESD HEADING
@98A     OI    SWITCHES,B'00000011'                               0442
*         ACSHD='1'B;                   /* INDIC TO PRINT ACESD SUBHEAD
*       END;
* NACESD2: /* BRANCH HERE AFTER PROCESSING CURRENT CESD TABLE LINE.
*             FOLLOWING CODE PROCESSES NEXT ONE.
*   CURRCESD=SAVCURR1;                  /* GET NEXT CESD TABLE LINE
@988     EQU   *                                                  0445
NACESD2  L     @5,SAVCURR1                                        0445
*   /* TEST IF THIS CESD ROUTINE IS FINISHED
*   IF CURRCESD=CESDEND                 /* IF END OF CESD TABLE REACHED
*     THEN                              /* THEN
         C     @5,CESDEND                                         0446
         BC    07,@987                                            0446
*       /* TEST IF THE RLD ROUTINE IS FINISHED
*       IF RLDSPRTD=NUMRLDS             /* IF ALL RLD DATA IS PRINTED
*                                          (THESE TWO SYMBOLS ARE ALWAY
*                                          EQUAL DURING ALPHA CESD
*                                          PROCESSING)
*         THEN                          /* THEN
         L     @F,NUMRLDS                                         0447
         C     @F,RLDSPRTD                                        0447
         BC    07,@986                                            0447
*           DO;                         /* TURN CESD HDNG SWITCHES OFF
*             NCHD='0'B;                /* TURN NUM CESD HEADING OFF
         NI    SWITCHES,B'11110000'                               0449
*             NCSHD='0'B;               /* TURN NUM CESD SUBHEAD OFF
*             ACHD='0'B;                /* TURN ALPHA CESD HEADING OFF
*             ACSHD='0'B;               /* TURN ALPHA CESD SUBHEAD OFF
*             /* TEST IF NUMERIC CESD PROCESSING IS BEING PERFORMED
*             IF NUMCESD='1'B           /* IF NUMCESD SWITCH IS ON
*               THEN                    /* THEN
         TM    SWITCHES+2,B'01000000'                             0453
         BC    12,@985                                            0453
*                 DO;                   /* PRODUCE MODULE LENGTHS
*                   /* TEST IF ALL SEGMENT LENGTHS HAVE BEEN PRINTED
*                   IF SEGLENCT^=HISEGNO  /* IF ANOTHER SEGLEN TO PRINT
*                     THEN              /* THEN
         LH    @F,HISEGNO                                         0455
         CH    @F,SEGLENCT                                        0455
         BC    08,@984                                            0455
*                       DO;             /* PREPARE TO PRINT IT
*                         NA3RET='1'B;  /* INDIC TO RETURN TO NACESD3
         OI    SWITCHES+2,B'10000000'                             0457
*                         GO TO NACESD7; /* GO TO PRODUCE SEG LENGTH
         BC    15,NACESD7                                         0458
*                       END;
* NACESD3:          /* BRANCH HERE WHEN THE LAST LOAD MODULE SEGMENT
*                      HAS NO CROSS-REFERENCE LIST. FOLLOWING CODE
*                      PRODUCES LOAD MODULE LENGTH.
*                   REMAINDR=LMLEN//8;  /* COMPUTE REMAINDER
@984     EQU   *                                                  0460
NACESD3  MVC   @TEMP3+1(3),LMLEN                                  0460
         L     @E,@TEMP3                                          0460
         SRDA  @E,32                                              0460
         LA    @0,8                                               0460
         DR    @E,@0                                              0460
         ST    @E,REMAINDR                                        0460
*                   /* TEST IF LMOD LENGTH MUST BE ROUNDED TO DBLWORD
*                   IF REMAINDR^=0      /* IF REMAINDER NOT 0
*                     THEN              /* THEN
         SR    @F,@F                                              0461
         C     @F,REMAINDR                                        0461
         BC    08,@983                                            0461
*                       LMLEN=LMLEN+8-REMAINDR; /* ROUND TO DBLWORD
         L     @F,REMAINDR                                        0462
         LCR   @F,@F                                              0462
         AH    @F,@D8                                             0462
         MVC   @TEMP3+1(3),LMLEN                                  0462
         A     @F,@TEMP3                                          0462
         ST    @F,@TEMP4                                          0462
         MVC   LMLEN(3),@TEMP4+1                                  0462
*                   DATABUF(1:6)=HEADING1(28:33); /* 'LENGTH' INTO BUF
@983     MVC   BUFFERS+125(6),HEADING1+27                         0463
*                   /* TEST IF A NUCLEUS IS BEING MAPPED
*                   IF NUCMAP='1'B      /* IF NUCMAP SWITCH IS ON
*                     THEN              /* THEN
         TM    SWITCHES+2,B'00001000'                             0464
         BC    12,@982                                            0464
*                       DO;             /* PUT FOLLOWING IN BUFFER
*                         DATABUF(8:9)=HEADING3(19:20); /* 'OF'
         MVC   BUFFERS+132(2),HEADING3+18                         0466
*                         DATABUF(11:17)=HEADING7(16:22); /* 'NUCLEUS'
         MVC   BUFFERS+135(7),HEADING7+15                         0467
         BC    15,@981                                            0469
*                       END;
*                     ELSE              /* ELSE NUCMAP SWITCH IS OFF
*                       DATABUF(8:21)=HEADING3(19:32); /* 'OF LOAD
*                                                         MODULE'
@982     MVC   BUFFERS+132(14),HEADING3+18                        0469
*                   BININT(5:7)=LMLEN; /* PREPARE TO CONVERT LMOD LEN
@981     MVC   BININT+4(3),LMLEN                                  0470
*                   RELOC='0'B;         /* INDICATE NOT TO ADD RELOCFAC
         NI    SWITCHES+2,B'11111101'                             0471
*                   RET=ADDR(NACESD4); /* SET UP RETURN ADDRESS
         LA    @3,NACESD4                                         0472
*                   GO TO BITOHEX;     /* CONV LMOD LEN TO PRINTBLE HEX
         BC    15,BITOHEX                                         0473
* NACESD4:          /* BRANCH HERE TO RETURN FROM BITOHEX ROUTINE.
*                      FOLLOWING CODE CONTINUES NACESD PROCESSING.
*                   DATABUF(23:28)=HEXINT(2:7); /* PUT LENGTH INTO BUF
NACESD4  MVC   BUFFERS+147(6),HEXINT+1                            0474
*                   /* TEST IF INPUT LOAD MODULE IS IN OVERLAY
*                   IF OVERLAY='1'B     /* IF OVERLAY SWITCH IS ON
*                     THEN              /* THEN
         L     @7,PARMPTR                                         0475
         TM    20(@7),B'01000000'                                 0475
         BC    12,@980                                            0475
*                       DO;             /* PREPARE FOR PRINT
*                         DASHLINE='1'B; /* INDICATE TO PRINT DASHES
         OI    SWITCHES+1,B'00001000'                             0477
*                         DUBLDASH='1'B; /* PRNT ANOTHER LINE OF DASHES
         OI    SWITCHES+2,B'00010000'                             0478
*                         DATABUF(73)=HEADING3(51); /* PUT '(' INTO BUF
         MVC   BUFFERS+197(1),HEADING3+50                         0479
*                         DATABUF(74:79)=HEADING1(28:33); /* 'LENGTH'
         MVC   BUFFERS+198(6),HEADING1+27                         0480
*                         DATABUF(81:112)=HEADING3(19:50); /* 'OF LOAD
*                                                             MODULE IF
*                                                             NOT IN
*                                                             OVERLAY'
         MVC   BUFFERS+205(32),HEADING3+18                        0481
*                         DATABUF(120)=HEADING3(52); /* PUT ')' IN BUF
         MVC   BUFFERS+244(1),HEADING3+51                         0482
*                         LMLENNO=LMLENNO-PDLEN; /* COMPUTE LMLENNO
         MVC   @TEMP3+1(3),LMLENNO                                0483
         L     @F,@TEMP3                                          0483
         MVC   @TEMP3+1(3),PDLEN                                  0483
         S     @F,@TEMP3                                          0483
         ST    @F,@TEMP4                                          0483
         MVC   LMLENNO(3),@TEMP4+1                                0483
*                         BININT(5:7)=LMLENNO; /* PREP CONV LEN NO OVLY
         MVC   BININT+4(3),LMLENNO                                0484
*                         RELOC='0'B;   /* INDICATE NOT TO ADD RELOCFAC
         NI    SWITCHES+2,B'11111101'                             0485
*                         RET=ADDR(NACESD5); /* SET UP RETURN ADDRESS
         LA    @3,NACESD5                                         0486
*                         GO TO BITOHEX; /* CONV LMLENNO TO PRNTBLE HEX
         BC    15,BITOHEX                                         0487
* NACESD5:                /* BRANCH HERE TO RETURN FROM BITOHEX ROUTINE
*                            FOLLOWING CODE CONTINUES NACESD PROCES'NG.
*                         DATABUF(114:119)=HEXINT(2:7); /* PUT INTO BUF
NACESD5  MVC   BUFFERS+238(6),HEXINT+1                            0488
*                       END;
*                   SP2='1'B;           /* SET UP DATA BUF CON CHAR
@980     OI    SWITCHES+2,B'00100000'                             0490
*                   RET=ADDR(NACESD6);  /* SET UP RETURN ADDRESS
         LA    @3,NACESD6                                         0491
*                   GO TO WRITE;        /* GO TO PRINT THIS BUFFER
         BC    15,WRITE                                           0492
*                 END;
* NACESD6:    /* BRANCH HERE TO RETURN FROM WRITE ROUTINE.
*                FOLLOWING CODE CONTINUES NACESD PROCESSING.
*             DASHLINE='0'B;            /* TURN DASHLINE SWITCH OFF
@985     EQU   *                                                  0494
NACESD6  NI    SWITCHES+1,B'11110111'                             0494
*             DUBLDASH='0'B;            /* TURN DUBLDASH SWITCH OFF
         NI    SWITCHES+2,B'11101111'                             0495
*             GO TO NACESD16;           /* GO TO TEST FOR PSEUDO REGS
         BC    15,NACESD16                                        0496
*           END;
*         ELSE                          /* ELSE NRLD ROUTINE NOT DONE
*           GO TO NACESD7;              /* GO TO TEST FOR OVERLAY
*     ELSE                              /* ELSE CESD ROUTINE ISN'T DONE
*       /* TEST IF NUMERIC CESD PROCESSING IS BEING PERFORMED
*       IF NUMCESD='1'B                 /* IF NUMCESD SWITCH IS ON
*         THEN                          /* THEN
@987     TM    SWITCHES+2,B'01000000'                             0499
         BC    12,@97D                                            0499
*           /* TEST IF INPUT LOAD MODULE IS IN OVERLAY
*           IF OVERLAY='1'B             /* IF OVERLAY SWITCH IS ON
*             THEN                      /* THEN
         L     @7,PARMPTR                                         0500
         TM    20(@7),B'01000000'                                 0500
         BC    12,@97C                                            0500
*               /* TEST IF CESD ITEM IS PR, UNRESLVD ER, OR UNRESLVD WX
*               IF CESDTYPE(7)='0'B     /* IF SD, PC, PD, OR CM
*                  × CESDTYPE(8)='1'B   /* OR IF LR OR CM
*                 THEN                  /* THEN
         TM    10(@5),B'00000010'                                 0501
         BC    08,@97B                                            0501
         TM    10(@5),B'00000001'                                 0501
         BC    12,@97A                                            0501
*                   /* TEST IF CURR LINE'S SEG NO.=CURR SEG IN PROCESS
*                   IF SEGNO^=CURSEGNO  /* IF THEY ARE NOT EQUAL
*                     THEN              /* THEN
@97B     CLC   14(1,@5),CURSEGNO                                  0502
         BC    08,@979                                            0502
* NACESD7:              /* BRANCH HERE WHEN A SEGMENT'S MAP IS COMPLETE
*                          FOLLOWING CODE PRODUCES SEGMENT LENGTH.
*                       /* TEST IF INPUT LOAD MODULE IS IN OVERLAY
*                       IF OVERLAY='1'B /* IF OVERLAY SWITCH IS ON
*                         THEN          /* THEN
NACESD7  L     @7,PARMPTR                                         0503
         TM    20(@7),B'01000000'                                 0503
         BC    12,@978                                            0503
*                           DO;         /* PROCESS SEGMENT LENGTH
*                             SEGLENCT=SEGLENCT+1; /* INCR SEGLENCT
         LA    @F,1                                               0505
         AH    @F,SEGLENCT                                        0505
         STH   @F,SEGLENCT                                        0505
*                             LMLENNO=LMLENNO+SEGLEN; /* INCR LMLENNO
         MVC   @TEMP3+1(3),SEGLEN                                 0506
         L     @F,@TEMP3                                          0506
         MVC   @TEMP3+1(3),LMLENNO                                0506
         A     @F,@TEMP3                                          0506
         ST    @F,@TEMP4                                          0506
         MVC   LMLENNO(3),@TEMP4+1                                0506
*                             BININT(5:7)=SEGLEN; /* PREP TO CONV SEGLN
         MVC   BININT+4(3),SEGLEN                                 0507
*                             RELOC='0'B; /* INDIC NOT TO ADD RELOCFAC
         NI    SWITCHES+2,B'11111101'                             0508
*                             RET=ADDR(NACESD8); /* SET UP RETURN ADDR
         LA    @3,NACESD8                                         0509
*                             GO TO BITOHEX; /* CONV TO PRINTABLE HEX
         BC    15,BITOHEX                                         0510
* NACESD8:                    /* BRANCH HERE TO RETURN FROM BITODEC
*                                ROUTINE.  FOLLOWING CODE CONTINUES
*                                NACESD PROCESSING.
*                             DATABUF(20:25)=HEXINT(2:7); /* PUT LEN IN
NACESD8  MVC   BUFFERS+144(6),HEXINT+1                            0511
*                             DATABUF(1:6)=HEADING1(28:33); /* 'LENGTH'
         MVC   BUFFERS+125(6),HEADING1+27                         0512
*                             DATABUF(8:9)=HEADING3(19:20); /* 'OF'
         MVC   BUFFERS+132(2),HEADING3+18                         0513
*                             DATABUF(11:17)=HEADING7(4:10); /* 'SEG'T'
         MVC   BUFFERS+135(7),HEADING7+3                          0514
*                             SP2='1'B; /* SET UP DATA BUF CON CHAR
         OI    SWITCHES+2,B'00100000'                             0515
*                             /* TEST FOR WHERE TO RETURN
*                             IF NA3RET='1'B /* IF NA3RET SWITCH IS ON
*                               THEN    /* THEN
         TM    SWITCHES+2,B'10000000'                             0516
         BC    12,@977                                            0516
*                                 RET=ADDR(NACESD3); /* RET TO NACESD3
         LA    @3,NACESD3                                         0517
         BC    15,@976                                            0518
*                               ELSE    /* ELSE NA3RET SWITCH IS OFF
*                                 RET=ADDR(NRLD); /* RETURN IS TO NRLD
@977     LA    @3,NRLD                                            0518
*                             GO TO WRITE; /* PRINT THIS BUFFER
         BC    15,WRITE                                           0519
*                           END;
*                         ELSE          /* ELSE OVERLAY SWITCH IS OFF
*                           GO TO NRLD; /* GO TO NUMERIC RLD ROUTINE
*   /* TEST IF CESD ITEM IS A SECTION DEF, COMMON AREA, OR PRIVATE CODE
*   IF CESDTYPE(5:8)='0000'B            /* IF CESD ITEM IS SD
*      × CESDTYPE(5:8)='0101'B          /* OR IF CESD ITEM IS CM
*      × CESDTYPE(6:8)='100'B           /* OR IF CESD ITEM IS PC OR PD
*     THEN                              /* THEN
@975     EQU   *                                                  0522
@979     EQU   *                                                  0522
@97A     EQU   *                                                  0522
@97C     EQU   *                                                  0522
@97D     EQU   *                                                  0522
@97E     TM    10(@5),B'00001111'                                 0522
         BC    08,@974                                            0522
         TM    10(@5),B'00000101'                                 0522
         BC    12,@973                                            0522
         TM    10(@5),B'00001010'                                 0522
         BC    08,@972                                            0522
@973     TM    10(@5),B'00000100'                                 0522
         BC    12,@971                                            0521
         TM    10(@5),B'00000011'                                 0522
         BC    05,@970                                            0522
*       DO;                             /* PUT IT INTO PRINT BUFFER
@972     EQU   *                                                  0523
*         /* TEST IF NUMERIC CESD PROCESSING IS BEING PERFORMED
*         IF NUMCESD='1'B               /* IF NUMCESD SWITCH IS ON
*           THEN                        /* THEN
@974     TM    SWITCHES+2,B'01000000'                             0524
         BC    12,@96F                                            0524
*             DO;                       /* PROCESS SEG AND LMOD LENGTHS
*               REMAINDR=IDLENGTH//8;   /* COMPUTE REMAINDER
         MVC   @TEMP3+1(3),15(@5)                                 0526
         L     @E,@TEMP3                                          0526
         SRDA  @E,32                                              0526
         LA    @0,8                                               0526
         DR    @E,@0                                              0526
         ST    @E,REMAINDR                                        0526
*               /* TEST IF SEGMENT LENGTH MUST BE ROUNDED TO DOUBLEWORD
*               IF REMAINDR^=0          /* IF REMAINDER NOT 0
*                 THEN                  /* THEN
         SR    @F,@F                                              0527
         C     @F,REMAINDR                                        0527
         BC    08,@96E                                            0527
*                   SEGLEN=SEGLEN+8-REMAINDR; /* ROUND TO DOUBLEWORD
         L     @F,REMAINDR                                        0528
         LCR   @F,@F                                              0528
         AH    @F,@D8                                             0528
         MVC   @TEMP3+1(3),SEGLEN                                 0528
         A     @F,@TEMP3                                          0528
         ST    @F,@TEMP4                                          0528
         MVC   SEGLEN(3),@TEMP4+1                                 0528
*               SEGLEN=SEGLEN+IDLENGTH; /* INCREMENT SEGMENT LENGTH
@96E     MVC   @TEMP3+1(3),15(@5)                                 0529
         L     @F,@TEMP3                                          0529
         MVC   @TEMP3+1(3),SEGLEN                                 0529
         A     @F,@TEMP3                                          0529
         ST    @F,@TEMP4                                          0529
         MVC   SEGLEN(3),@TEMP4+1                                 0529
*               /* TEST IF A NUCLEUS IS BEING MAPPED
*               IF NUCMAP='1'B          /* IF NUCMAP SWITCH IS ON
*                 THEN                  /* THEN
         TM    SWITCHES+2,B'00001000'                             0530
         BC    12,@96D                                            0530
*                   DO;                 /* INCREMENT NUCLEUS LENGTH
*                     /* TEST IF CSECT LENGTH MUST BE ROUNDED TO DBLWD
*                     IF REMAINDR^=0    /* IF REMAINDER IS NOT ZERO
*                       THEN            /* THEN
         SR    @F,@F                                              0532
         C     @F,REMAINDR                                        0532
         BC    08,@96C                                            0532
*                         LMLEN=LMLEN+8-REMAINDR; /* ROUND TO DOUBLEWRD
         L     @F,REMAINDR                                        0533
         LCR   @F,@F                                              0533
         AH    @F,@D8                                             0533
         MVC   @TEMP3+1(3),LMLEN                                  0533
         A     @F,@TEMP3                                          0533
         ST    @F,@TEMP4                                          0533
         MVC   LMLEN(3),@TEMP4+1                                  0533
*                     LMLEN=LMLEN+IDLENGTH; /* INCREMENT NUCLEUS LENGTH
@96C     MVC   @TEMP3+1(3),15(@5)                                 0534
         L     @F,@TEMP3                                          0534
         MVC   @TEMP3+1(3),LMLEN                                  0534
         A     @F,@TEMP3                                          0534
         ST    @F,@TEMP4                                          0534
         MVC   LMLEN(3),@TEMP4+1                                  0534
         BC    15,@96B                                            0536
*                   END;
*                 ELSE                  /* ELSE LOAD MODULE NOT NUCLEUS
*                   /* TEST IF LOAD MODULE LENGTH SHOULD BE INCREMENTED
*                   IF LMLEN<CESDADDR+IDLENGTH /* IF ADDR LARGST SO FAR
*                     THEN              /* THEN
@96D     MVC   @TEMP3+1(3),15(@5)                                 0536
         L     @F,@TEMP3                                          0536
         MVC   @TEMP3+1(3),11(@5)                                 0536
         A     @F,@TEMP3                                          0536
         MVC   @TEMP3+1(3),LMLEN                                  0536
         C     @F,@TEMP3                                          0536
         BC    12,@96A                                            0536
*                       LMLEN=CESDADDR+IDLENGTH; /* COMPUTE LMOD LENGTH
         MVC   @TEMP3+1(3),15(@5)                                 0537
         L     @F,@TEMP3                                          0537
         MVC   @TEMP3+1(3),11(@5)                                 0537
         A     @F,@TEMP3                                          0537
         ST    @F,@TEMP4                                          0537
         MVC   LMLEN(3),@TEMP4+1                                  0537
*             END;
@96A     EQU   *                                                  0538
@96B     EQU   *                                                  0538
*         BININT(5:7)=CESDADDR;         /* PREPARE TO CONVERT LMOD LOC
@96F     MVC   BININT+4(3),11(@5)                                 0539
*         RET=ADDR(NACESD9);            /* SET UP RETURN ADDRESS
         LA    @3,NACESD9                                         0540
*         GO TO BITOHEX;                /* CONV LMOD LOC TO PRINTBL HEX
         BC    15,BITOHEX                                         0541
* NACESD9: /* BRANCH HERE TO RETURN FROM BITOHEX ROUTINE.
*             FOLLOWING CODE CONTINUES NACESD PROCESSING.
*         DATABUF(19:24)=HEXINT(2:7);   /* PUT LMOD LOC INTO BUFFER
NACESD9  MVC   BUFFERS+143(6),HEXINT+1                            0542
*         BININT(5:7)=IDLENGTH;         /* PREPARE TO CONVERT LENGTH
         MVC   BININT+4(3),15(@5)                                 0543
*         RELOC='0'B;                   /* INDICATE NOT TO ADD RELOCFAC
         NI    SWITCHES+2,B'11111101'                             0544
*         RET=ADDR(NACESD10);           /* SET UP RETURN ADDRESS
         LA    @3,NACESD10                                        0545
*         GO TO BITOHEX;                /* CONV LENGTH TO PRINTABLE HEX
         BC    15,BITOHEX                                         0546
* NACESD10: /* BRANCH HERE TO RETURN FROM BITOHEX ROUTINE.
*              FOLLOWING CODE CONTINUES NACESD PROCESSING.
*         DATABUF(41:46)=HEXINT(2:7);   /* PUT LENGTH INTO BUFFER
NACESD10 MVC   BUFFERS+165(6),HEXINT+1                            0547
*         /* TEST IF CESD ITEM IS A SECTION DEFINITION
*         IF CESDTYPE(5:8)='0000'B      /* IF CESD ITEM IS SD
*           THEN                        /* THEN
         TM    10(@5),B'00001111'                                 0548
         BC    05,@969                                            0548
*             DO;                       /* PROCESS REST OF IT
*               DATABUF(30:37)=SYMBOL;  /* PUT ITS NAME INTO BUFFER
         MVC   BUFFERS+154(8),2(@5)                               0550
*               DATABUF(51:52)=SDPRT;   /* PUT 'SD' INTO BUFFER
         MVC   BUFFERS+175(2),SDPRT                               0551
*               GO TO NACESD11;         /* GO TO TEST FOR OVERLAY
         BC    15,NACESD11                                        0552
*             END;
*         /* TEST IF CESD ITEM IS A COMMON AREA
*         IF CESDTYPE(5:8)='0101'B      /* IF CESD ITEM IS CM
*           THEN                        /* THEN
@969     TM    10(@5),B'00000101'                                 0554
         BC    12,@968                                            0553
         TM    10(@5),B'00001010'                                 0554
         BC    05,@967                                            0554
*             DO;                       /* PROCESS REST OF IT
*               DATABUF(51:52)=CMPRT;   /* PUT 'CM' INTO BUFFER
         MVC   BUFFERS+175(2),CMPRT                               0556
*               /* TEST IF THIS IS BLANK COMMON OR NAMED COMMON
*               IF SYMBOL(1)=BLANK      /* IF NAME FIELD IS BLANK
*                 THEN                  /* THEN
         CLC   2(1,@5),BLANK                                      0557
         BC    07,@966                                            0557
*                   DATABUF(29:37)=BLCOMPRT; /* PUT '$BLANKCOM' IN BUF
         MVC   BUFFERS+153(9),BLCOMPRT                            0558
         BC    15,@965                                            0559
*                 ELSE                  /* ELSE IT IS NAMED COMMON
*                   DATABUF(30:37)=SYMBOL; /* PUT ITS NAME INTO BUFFER
@966     MVC   BUFFERS+154(8),2(@5)                               0559
*               GO TO NACESD11;         /* GO TO TEST FOR OVERLAY
         BC    15,NACESD11                                        0560
*             END;
*         /* TEST IF CESD ITEM IS PRIVATE CODE
*         IF CESDTYPE(6:8)='100'B       /* IF CESD ITEM IS PRIVATE CODE
*           THEN                        /* THEN
@967     EQU   *                                                  0562
@968     TM    10(@5),B'00000100'                                 0562
         BC    12,@964                                            0561
         TM    10(@5),B'00000011'                                 0562
         BC    05,@963                                            0562
*             /* TEST IF CESD ITEM IS PRIVATE CODE MARKED DELETE (PD)
*             IF CESDTYPE(4)='0'B       /* IF CESD ITEM IS NOT PD
*               THEN                    /* THEN
         TM    10(@5),B'00010000'                                 0563
         BC    05,@962                                            0563
*                 DO;                   /* IT IS PC
*                   DATABUF(29:36)=PRIVPRT; /* PUT '$PRIVATE' INTO BUF
         MVC   BUFFERS+153(8),PRIVPRT                             0565
*                   DATABUF(51:52)=PCPRT; /* PUT 'PC' INTO BUFFER
         MVC   BUFFERS+175(2),PCPRT                               0566
*                   GO TO NACESD11;     /* GO TO TEST FOR OVERLAY
         BC    15,NACESD11                                        0567
*                 END;
*               ELSE                    /* ELSE CESD ITEM IS PD
*                 DO;                   /* PROCESS REST OF IT
*                   DATABUF(51:52)=PDPRT; /* PUT 'PD' INTO BUFFER
@962     MVC   BUFFERS+175(2),PDPRT                               0570
*                   REMAINDR=IDLENGTH//8; /* COMPUTE REMAINDER
         MVC   @TEMP3+1(3),15(@5)                                 0571
         L     @E,@TEMP3                                          0571
         SRDA  @E,32                                              0571
         LA    @0,8                                               0571
         DR    @E,@0                                              0571
         ST    @E,REMAINDR                                        0571
*                   /* TEST IF LENGTH MUST BE ROUNDED TO DOUBLEWORD
*                   IF REMAINDR^=0      /* IF REMAINDER NOT 0
*                     THEN              /* THEN
         SR    @F,@F                                              0572
         C     @F,REMAINDR                                        0572
         BC    08,@960                                            0572
*                       PDLEN=PDLEN+8-REMAINDR; /* ROUND TO DOUBLEWORD
         L     @F,REMAINDR                                        0573
         LCR   @F,@F                                              0573
         AH    @F,@D8                                             0573
         MVC   @TEMP3+1(3),PDLEN                                  0573
         A     @F,@TEMP3                                          0573
         ST    @F,@TEMP4                                          0573
         MVC   PDLEN(3),@TEMP4+1                                  0573
*                   PDLEN=PDLEN+IDLENGTH; /* INCR CUMUL LEN OF PD ITEMS
@960     MVC   @TEMP3+1(3),15(@5)                                 0574
         L     @F,@TEMP3                                          0574
         MVC   @TEMP3+1(3),PDLEN                                  0574
         A     @F,@TEMP3                                          0574
         ST    @F,@TEMP4                                          0574
         MVC   PDLEN(3),@TEMP4+1                                  0574
*                   /* TEST IF THIS ITEM IS A SEGTAB
*                   IF CESDADDR=ZERO    /* IF CESD ADDRESS IS 0
*                     THEN              /* THEN IT IS SEGTAB
         MVC   @TEMP3+1(3),ZERO                                   0575
         L     @F,@TEMP3                                          0575
         MVC   @TEMP3+1(3),11(@5)                                 0575
         C     @F,@TEMP3                                          0575
         BC    07,@95F                                            0575
*                       DATABUF(29:35)=SEGTBPRT; /*PUT '$SEGTAB' IN BUF
         MVC   BUFFERS+153(7),SEGTBPRT                            0576
         BC    15,@95E                                            0577
*                     ELSE              /* ELSE CESD ADDRESS IS NOT 0
*                       DATABUF(29:34)=ENTABPRT; /* PUT '$ENTAB' IN BUF
@95F     MVC   BUFFERS+153(6),ENTABPRT                            0577
*                 END;
@95E     EQU   *                                                  0578
* NACESD11: /* BRANCH HERE WHEN LMOD LOC, NAME, LENGTH, AND TYPE HAVE
*              BEEN PROCESSED.  FOLLOWING CODE PROCESSES SEGMENT NO.
*         /* TEST IF INPUT LOAD MODULE IS IN OVERLAY
*         IF OVERLAY='1'B               /* IF OVERLAY SWITCH IS ON
*           THEN                        /* THEN
@961     EQU   *                                                  0579
@963     EQU   *                                                  0579
@964     EQU   *                                                  0579
NACESD11 L     @7,PARMPTR                                         0579
         TM    20(@7),B'01000000'                                 0579
         BC    12,@95D                                            0579
*             DO;                       /* PROCESS SEGMENT NUMBER
*               BINARY=SEGNO;           /* PREPARE TO CONVERT SEG NO.
         SR    @2,@2                                              0581
         IC    @2,14(0,@5)                                        0581
*               BLNKZERO='1'B;          /* INDIC TO BLANK NONSIG ZEROS
         OI    SWITCHES+1,B'00000001'                             0582
*               RET=ADDR(NACESD12);     /* SET UP RETURN ADDRESS
         LA    @3,NACESD12                                        0583
*               GO TO BITODEC;          /* CONV SEG NO. TO PRINTBLE DEC
         BC    15,BITODEC                                         0584
* NACESD12:     /* BRANCH HERE TO RETURN FROM BITODEC ROUTINE.
*                  FOLLOWING CODE CONTINUES NACESD PROCESSING.
*               DATABUF(57:59)=DECINT(2:4); /* PUT SEG NO. INTO BUFFER
NACESD12 MVC   BUFFERS+181(3),DECINT+1                            0585
*             END;
*         SAVLMLOC=CESDADDR;            /* SAVE LMOD LOC FOR LR PROC'NG
@95D     MVC   SAVLMLOC+1(3),11(@5)                               0587
         MVI   SAVLMLOC,X'00'                                     0587
*         CURRCESD=CURRCESD+18;         /* LOC NEXT LINE IN CESD TABLE
         LA    @5,18(0,@5)                                        0588
*         /* TEST IF ALPHABETIC CESD PROCESSING IS BEING PERFORMED
*         IF NUMCESD='0'B               /* IF NUMCESD SWITCH IS OFF
*           THEN                        /* THEN
         TM    SWITCHES+2,B'01000000'                             0589
         BC    05,@95C                                            0589
*             DO;                       /* REARRANGE CSECT DATA IN BUF
*               TEMPAREA=DATABUF(19:40); /* PUT LOC & NAME IN TEMP AREA
         MVC   TEMPAREA(22),BUFFERS+143                           0591
*               DATABUF(13:24)=TEMPAREA(11:22); /* MOVE NAME
         MVC   BUFFERS+137(12),TEMPAREA+10                        0592
*               DATABUF(25:34)=TEMPAREA(1:10); /* MOVE LMOD LOC
         MVC   BUFFERS+149(10),TEMPAREA                           0593
*               DATABUF(35:44)=DATABUF(41:50); /* MOVE LENGTH
         MVC   BUFFERS+159(10),BUFFERS+165                        0594
*               DATABUF(45:50)=DATABUF(51:56); /* MOVE TYPE
         MVC   BUFFERS+169(6),BUFFERS+175                         0595
*               DATABUF(51:59)=DATABUF(57:65); /* MOVE SEG NO.
         MVC   BUFFERS+175(9),BUFFERS+181                         0596
*             END;
* NACESD13: /* BRANCH HERE WHEN A LINE OF NACESD DATA IS READY TO BE
*              PRINTED.  FOLLOWING CODE PREPARES TO PRINT IT.
*         RET=ADDR(NACESD2);            /* SET UP RETURN ADDRESS
@95C     EQU   *                                                  0598
NACESD13 LA    @3,NACESD2                                         0598
*         SAVCURR1=CURRCESD;            /* SAVE CURRCESD
         ST    @5,SAVCURR1                                        0599
*         /* TEST IF LINE OF DATA SHOULD GO ON THIS OR NEXT PAGE
*         IF LINECNT>60                 /* IF LINE COUNT GREATR THAN 60
*           THEN                        /* THEN
         LA    @F,60                                              0600
         C     @F,LINECNT                                         0600
         BC    10,@95B                                            0600
*             DO;                       /* SET TWO SWITCHES
*               LINECT61='1'B;          /* INDIC TO PRINT ON NEXT PAGE
         OI    SWITCHES,B'00010000'                               0602
*               /* TEST IF NUMERIC CESD PROCESSING IS BEING PERFORMED
*               IF NUMCESD='1'B         /* IF NUMCESD SWITCH IS ON
*                 THEN                  /* THEN
         TM    SWITCHES+2,B'01000000'                             0603
         BC    12,@95A                                            0603
*                   NCHD='1'B;          /* INDIC TO PRINT NCESD HEADING
         OI    SWITCHES,B'00001000'                               0604
         BC    15,@959                                            0605
*                 ELSE                  /* ELSE NUMCESD SWITCH IS OFF
*                   ACHD='1'B;          /* INDIC TO PRINT ACESD HEADING
@95A     OI    SWITCHES,B'00000010'                               0605
*             END;
*         GO TO WRITE;                  /* GO TO PRINT LINE OF DATA
         BC    15,WRITE                                           0607
*       END;
*   /* TEST IF CESD ITEM IS A LABEL REFERENCE
*   IF CESDTYPE(5:8)='0011'B            /* IF CESD ITEM IS LR
*     THEN                              /* THEN
@970     EQU   *                                                  0609
@971     TM    10(@5),B'00000011'                                 0609
         BC    12,@958                                            0608
         TM    10(@5),B'00001100'                                 0609
         BC    05,@957                                            0609
*       DO;                             /* PROCESS IT
*         DATABUF(97:104)=SYMBOL;       /* PUT NAME INTO BUFFER
         MVC   BUFFERS+221(8),2(@5)                               0611
*         BININT(5:7)=CESDADDR;         /* PREPARE TO CONVERT LMOD LOC
         MVC   BININT+4(3),11(@5)                                 0612
*         RET=ADDR(NACESD14);           /* SET UP RETURN ADDRESS
         LA    @3,NACESD14                                        0613
*         GO TO BITOHEX;                /* CONV LMOD LOC TO PRINTBL HEX
         BC    15,BITOHEX                                         0614
* NACESD14: /* BRANCH HERE TO RETURN FROM BITOHEX ROUTINE.
*              FOLLOWING CODE CONTINUES NACESD PROCESSING.
*         DATABUF(74:79)=HEXINT(2:7);   /* PUT LMOD LOC INTO BUFFER
NACESD14 MVC   BUFFERS+198(6),HEXINT+1                            0615
*         SAVCURR2=CURRCESD;            /* SAVE CURRCESD
         ST    @5,SAVCURR2                                        0616
*         /* TEST IF NUMERIC CESD PROCESSING IS BEING PERFORMED
*         IF NUMCESD='1'B               /* IF NUMCESD SWITCH IS ON
*           THEN                        /* THEN
         TM    SWITCHES+2,B'01000000'                             0617
         BC    12,@956                                            0617
*             BININT(5:7)=CESDADDR-SAVLMLOC; /* PREP TO CONV CSECT LOC
         L     @F,SAVLMLOC                                        0618
         LCR   @F,@F                                              0618
         MVC   @TEMP3+1(3),11(@5)                                 0618
         A     @F,@TEMP3                                          0618
         ST    @F,@TEMP4                                          0618
         MVC   BININT+4(3),@TEMP4+1                               0618
         BC    15,@955                                            0619
*           ELSE                        /* ELSE ALPH CESD PROCESSING ON
*             DO;                       /* FIND CSECT LOC
*               SAVCSDAD=CESDADDR;      /* SAVE LR'S LMOD LOC
@956     MVC   SAVCSDAD+1(3),11(@5)                               0620
         MVI   SAVCSDAD,X'00'                                     0620
*               N=IDLENGTH(2:3);        /* PREP FOR NEXT INSTRUCTION
         MVC   @TEMP2+2(2),16(@5)                                 0621
         L     @F,@TEMP2                                          0621
         STH   @F,N                                               0621
*               N=INDEXTAB(N);          /* FIND INDEX INTO CESD TAB
         LR    @7,@F                                              0622
         BCTR  @7,0                                               0622
         SLA   @7,1                                               0622
         L     @8,INDTABAD                                        0622
         LH    @F,0(@7,@8)                                        0622
         STH   @F,N                                               0622
*               CURRCESD=ADDR(CESDTAB(N)); /* POINT TO CESD TABLE LINE
         LR    @7,@F                                              0623
         BCTR  @7,0                                               0623
         MH    @7,@D2                                             0623
         L     @8,CETABPTR                                        0623
         LA    @5,0(@7,@8)                                        0623
*               BININT(5:7)=SAVCSDAD-CESDADDR; /* PREP CONV CSECT LOC
         MVC   @TEMP3+1(3),11(@5)                                 0624
         L     @F,@TEMP3                                          0624
         LCR   @F,@F                                              0624
         A     @F,SAVCSDAD                                        0624
         ST    @F,@TEMP4                                          0624
         MVC   BININT+4(3),@TEMP4+1                               0624
*             END;
*         RELOC='0'B;                   /* INDICATE NOT TO ADD RELOCFAC
@955     NI    SWITCHES+2,B'11111101'                             0626
*         RET=ADDR(NACESD15);           /* SET UP RETURN ADDRESS
         LA    @3,NACESD15                                        0627
*         GO TO BITOHEX;                /* CONV CSECT LOC TO PRNTBL HEX
         BC    15,BITOHEX                                         0628
* NACESD15: /* BRANCH HERE TO RETURN FROM BITOHEX ROUTINE.
*              FOLLOWING CODE CONTINUES NACESD PROCESSING.
*         DATABUF(84:89)=HEXINT(2:7);   /* PUT CSECT LOC INTO BUFFER
NACESD15 MVC   BUFFERS+208(6),HEXINT+1                            0629
*         TEMPAREA(1:8)=SYMBOL;         /* PUT CSECT NAME IN TEMP AREA
         MVC   TEMPAREA(8),2(@5)                                  0630
*         CURRCESD=SAVCURR2+18;         /* INCR TO PROCESS NEXT LINE
         LA    @5,18                                              0631
         A     @5,SAVCURR2                                        0631
*         /* TEST IF NUMERIC CESD PROCESSING IS BEING PERFORMED
*         IF NUMCESD='1'B               /* IF NUMCESD SWITCH IS ON
*           THEN                        /* THEN
         TM    SWITCHES+2,B'01000000'                             0632
*             GO TO NACESD13;           /* GO TO PRINT ENTRY DATA
         BC    01,NACESD13                                        0633
*           ELSE                        /* ELSE DO THE FOLLOWING FIRST
*             DO;                       /* REARRANGE ENTRY DATA IN BUF
*               TEMPAREA(9:14)=DATABUF(74:79); /* PUT CSECT LOC IN TEMP
         MVC   TEMPAREA+8(6),BUFFERS+198                          0635
*               DATABUF(68:77)=DATABUF(97:106); /* MOVE NAME
         MVC   BUFFERS+192(10),BUFFERS+221                        0636
*               DATABUF(78:83)=TEMPAREA(9:14); /* MOVE LMOD LOC
         MVC   BUFFERS+202(6),TEMPAREA+8                          0637
*               TEMPAREA(9:14)=DATABUF(84:89); /* PUT CSECT LOC IN TEMP
         MVC   TEMPAREA+8(6),BUFFERS+208                          0638
*               DATABUF(84:99)=DATABUF(105:120); /* PUT BLANKS IN BUF
         MVC   BUFFERS+208(16),BUFFERS+229                        0639
*               DATABUF(88:93)=TEMPAREA(9:14); /* MOVE CSECT LOC
         MVC   BUFFERS+212(6),TEMPAREA+8                          0640
*               IF TEMPAREA(2:3)=PRIVPRT(1:2) /* CHECK FOR $P  ZA01415
*                  THEN DATABUF(99:106)=PRIVPRT;
         CLC   TEMPAREA+1(2),PRIVPRT                              0641
         BC    07,@954                                            0641
         MVC   BUFFERS+223(8),PRIVPRT                             0642
         BC    15,@953                                            0643
*                               /* IF FOUND, INSERT $PRIVATE   ZA01415
*                  ELSE DATABUF(100:107)=TEMPAREA(1:8);
@954     MVC   BUFFERS+224(8),TEMPAREA                            0643
*                               /* IF NOT, INSERT SYMBOL       ZA01415
*               GO TO NACESD13;         /* GO TO PRINT ENTRY DATA
         BC    15,NACESD13                                        0644
*             END;
*       END;
*   /* TEST IF CESD ITEM IS A PSEUDO REGISTER
*   IF CESDTYPE(5:8)='0110'B            /* IF CESD ITEM IS A PSEUDO REG
*     THEN                              /* THEN
@957     EQU   *                                                  0647
@958     TM    10(@5),B'00000110'                                 0647
         BC    12,@952                                            0646
         TM    10(@5),B'00001001'                                 0647
         BC    05,@951                                            0647
*       PREGHERE='1'B;                  /* INDIC PSEUDO REG PRESENT
         OI    SWITCHES+1,B'00000100'                             0648
*   /* TEST FOR INVALID CESD TYPE
*   IF CESDTYPE(5:8)='0010'B            /* IF CESD ITEM IS ER
*      × CESDTYPE(5:8)='1010'B          /* OR IF CESD ITEM IS WX
*      × CESDTYPE(5:8)='0110'B          /* OR IF CESD ITEM IS PR
*      × CESDTYPE(5:8)='0111'B          /* OR IF CESD ITEM IS NULL
*     THEN                              /* THEN CESD TYPE IS VALID
@951     EQU   *                                                  0649
@952     TM    10(@5),B'00000010'                                 0649
         BC    12,@950                                            0649
         TM    10(@5),B'00001101'                                 0649
         BC    08,@94F                                            0649
@950     TM    10(@5),B'00001010'                                 0649
         BC    12,@94E                                            0649
         TM    10(@5),B'00000101'                                 0649
         BC    08,@94D                                            0649
@94E     TM    10(@5),B'00000110'                                 0649
         BC    12,@94C                                            0649
         TM    10(@5),B'00001001'                                 0649
         BC    08,@94B                                            0649
@94C     TM    10(@5),B'00000111'                                 0649
         BC    12,@94A                                            0648
         TM    10(@5),B'00001000'                                 0649
         BC    05,@949                                            0649
*       DO;                             /* CONTINUE PROCESSING
@94B     EQU   *                                                  0650
@94D     EQU   *                                                  0650
*         SAVCURR1=SAVCURR1+18;         /* LOC NEXT LINE IN CESD TABLE
@94F     LA    @F,18                                              0651
         A     @F,SAVCURR1                                        0651
         ST    @F,SAVCURR1                                        0651
*         GO TO NACESD2;                /* GO TO PROCESS THIS NEXT LINE
         BC    15,NACESD2                                         0652
*       END;
*     ELSE                              /* ELSE CESD TYPE IS INVALID
*       DO;                             /* PROCESS ERROR
@949     EQU   *                                                  0654
*         ERRORS(1)='1'B;               /* ERROR-INVALID CESD REC TYPE
@94A     L     @7,PARMPTR                                         0655
         OI    32(@7),B'10000000'                                 0655
*         GO TO ABORT;                  /* ABORT (MESSAGE HMB101I)
         BC    15,ABORT                                           0656
*       END;
* NACESD16: /* BRANCH HERE WHEN IT IS TIME TO PROCESS PSEUDO REGISTERS.
*              FOLLOWNG CODE PROCESSES THEM.
*   /* TEST IF INPUT LOAD M0DULE CONTAINS ANY PSEUDO REGISTERS
*   IF PREGHERE='1'B                    /* IF PSEUDO REGS PRESENT
*     THEN                              /* THEN
@948     EQU   *                                                  0658
NACESD16 TM    SWITCHES+1,B'00000100'                             0658
         BC    12,@947                                            0658
*       DO;                             /* GET READY TO PROCESS THEM
*         DASHLINE='1'B;                /* INDIC TO PRNT LINE OF DASHES
         OI    SWITCHES+1,B'00001000'                             0660
*         DUBLDASH='1'B;                /* PRINT ANOTHER LINE OF DASHES
         OI    SWITCHES+2,B'00010000'                             0661
*         PRHD='1'B;                    /* INDIC TO PRINT PREG HEADING
         OI    SWITCHES+1,B'00110000'                             0662
*         PRSHD='1'B;                   /* INDIC TO PRINT PREG SUBHEAD
*         CURRCESD=CETABPTR;            /* PT CURRCESD TO  CESDTAB BEG
         L     @5,CETABPTR                                        0664
         BC    15,@946                                            0666
*       END;
*     ELSE                              /* ELSE BYPASS P REG PROCESSING
*       DO;                             /* FIND OUT WHERE TO BRANCH TO
*         /* TEST IF NUMERIC CESD PROCESSING IS BEING PERFORMED
*         IF NUMCESD='1'B               /* IF NUMCESD SWITCH IS ON
*           THEN                        /* THEN
@947     TM    SWITCHES+2,B'01000000'                             0667
*             GO TO ACSORT;             /* GO TO ALPHA CESD SORT
         BC    01,ACSORT                                          0668
*           ELSE                        /* ELSE ALPHA PROCESSING ON
*             GO TO ARLD;               /* GO TO ALPHA RLD PROCESSING
         BC    15,ARLD                                            0669
*       END;
* NACESD17: /* BRANCH HERE AFTER PROCESSING CURRENT PSEUDO REGISTER.
*              FOLLOWING CODE PROCESSES NEXT ONE.
*   /* TEST IF ALL PSEUDO REGISTERS HAVE BEEN PROCESSED
*   IF CURRCESD=CESDEND                 /* IF END OF CESD TABLE REACHED
*     THEN                              /* THEN
@946     EQU   *                                                  0671
NACESD17 C     @5,CESDEND                                         0671
         BC    07,@945                                            0671
*       /* TEST IF NUMERIC CESD PROCESSING IS BEING PERFORMED
*       IF NUMCESD='1'B                 /* IF NUMCESD SWITCH IS ON
*         THEN                          /* THEN
         TM    SWITCHES+2,B'01000000'                             0672
         BC    12,@944                                            0672
*           DO;                         /* PRINT TOTAL LENGTH OF P REGS
*             BININT(5:7)=PRLEN;        /* PREPARE TO CONVERT PR LENGTH
         MVC   BININT+4(3),PRLEN                                  0674
*             RELOC='0'B;               /* INDICATE NOT TO ADD RELOCFAC
         NI    SWITCHES+2,B'11111101'                             0675
*             RET=ADDR(NACESD18);       /* SET UP RETURN ADDRESS
         LA    @3,NACESD18                                        0676
*             GO TO BITOHEX;            /* CONV TOT LGTH TO PRINTBL HEX
         BC    15,BITOHEX                                         0677
* NACESD18:   /* BRANCH HERE TO RETURN FROM BITOHEX ROUTINE.
*                FOLLOWING CODE CONTINUES NACESD PROCESSING.
*             DATABUF(28:33)=HEXINT(2:7); /* PUT TOTAL LENGTH INTO BUF
NACESD18 MVC   BUFFERS+152(6),HEXINT+1                            0678
*             DATABUF(1:6)=HEADING1(28:33); /* PUT'LENGTH' INTO BUF
         MVC   BUFFERS+125(6),HEADING1+27                         0679
*             DATABUF(8:9)=HEADING3(19:20); /* PUT 'OF' INTO BUF
         MVC   BUFFERS+132(2),HEADING3+18                         0680
*             DATABUF(11:26)=HEADING4(8:23); /* PUT 'PSEUDO REGISTERS'
         MVC   BUFFERS+135(16),HEADING4+7                         0681
*             SP2='1'B;                 /* SET UP DATA BUF CON CHAR
         OI    SWITCHES+2,B'00100000'                             0682
*             RET=ADDR(ACSORT);         /* SET UP RETURN TO ALPHA SORT
         LA    @3,ACSORT                                          0683
*             GO TO WRITE;              /* LAST PRINT OF THIS DATA BUF
         BC    15,WRITE                                           0684
*           END;
*         ELSE                          /* ELSE ALPHA CESD PROCESSNG ON
*           GO TO ARLD;                 /* GO TO ARLD PROCESSNG
*   /* TEST IF CESD ITEM IS A PSEUDO REGISTER
*   IF CESDTYPE(5:8)^='0110'B           /* IF CESD ITEM IS NOT P REG
*     THEN                              /* THEN
@943     EQU   *                                                  0687
@945     TM    10(@5),B'00000110'                                 0687
         BC    12,@942                                            0686
         TM    10(@5),B'00001001'                                 0687
         BC    08,@941                                            0687
*       DO;                             /* DON'T PROCESS IT
*         CURRCESD=CURRCESD+18;         /* LOC NEXT LINE IN CESD TABLE
@942     LA    @5,18(0,@5)                                        0689
*         GO TO NACESD17;               /* GO TO PROCESS NEXT ITEM
         BC    15,NACESD17                                        0690
*       END;
*   PRLEN=CESDADDR+IDLENGTH;            /* COMPUTE TOT LENGTH OF P REGS
@941     MVC   @TEMP3+1(3),15(@5)                                 0692
         L     @F,@TEMP3                                          0692
         MVC   @TEMP3+1(3),11(@5)                                 0692
         A     @F,@TEMP3                                          0692
         ST    @F,@TEMP4                                          0692
         MVC   PRLEN(3),@TEMP4+1                                  0692
*   BININT(5:7)=IDLENGTH;               /* PREPARE TO CONVERT LENGTH
         MVC   BININT+4(3),15(@5)                                 0693
*   RELOC='0'B;                         /* INDICATE NOT TO ADD RELOCFAC
         NI    SWITCHES+2,B'11111101'                             0694
*   RET=ADDR(NACESD19);                 /* SET UP RETURN ADDRESS
         LA    @3,NACESD19                                        0695
*   GO TO BITOHEX;                      /* CONV LENGTH TO PRINTABLE HEX
         BC    15,BITOHEX                                         0696
* NACESD19: /* BRANCH HERE TO RETURN FROM BITOHEX ROUTINE.
*              FOLLOWING CODE CONTINUES NACESD PROCESSING.
*   DATABUF(40:45)=HEXINT(2:7);         /* PUT THIS PR'S LEN INTO BUF
NACESD19 MVC   BUFFERS+164(6),HEXINT+1                            0697
*   /* TEST IF LENGTH HAS A NONSIGNIFICANT ZERO
*   IF DATABUF(44)=CHARZERO(1)          /* IF TENS CHARACTER IS 0
*     THEN                              /* THEN
         CLC   BUFFERS+168(1),CHARZERO                            0698
         BC    07,@940                                            0698
*       DATABUF(44)=BLANK;              /* BLANK IT
         MVC   BUFFERS+168(1),BLANK                               0699
*   BININT(5:7)=CESDADDR;               /* PREPARE TO CONVERT ORIGIN
@940     MVC   BININT+4(3),11(@5)                                 0700
*   RELOC='0'B;                         /* INDICATE NOT TO ADD RELOCFAC
         NI    SWITCHES+2,B'11111101'                             0701
*   RET=ADDR(NACESD20);                 /* SET UP RETURN ADDRESS
         LA    @3,NACESD20                                        0702
*   GO TO BITOHEX;                      /* CONV ORIGIN TO PRINTABLE HEX
         BC    15,BITOHEX                                         0703
* NACESD20: /* BRANCH HERE TO RETURN FROM BITOHEX ROUTINE.
*              FOLLOWING CODE CONTINUES NACESD PROCESSING.
*   /* TEST IF NUMERIC CESD PROCESSING IS BEING DONE
*   IF NUMCESD='1'B                     /* IF NUMCESD SWITCH IS ON
*     THEN                              /* THEN
NACESD20 TM    SWITCHES+2,B'01000000'                             0704
         BC    12,@93F                                            0704
*       DO;                             /* PUT DATA INTO BUFFER
*         DATABUF(19:24)=HEXINT(2:7);   /* PUT VECTOR LOC INTO BUFFER
         MVC   BUFFERS+143(6),HEXINT+1                            0706
*         DATABUF(30:37)=SYMBOL;        /* PUT NAME INTO BUFFER
         MVC   BUFFERS+154(8),2(@5)                               0707
         BC    15,@93E                                            0709
*       END;
*     ELSE                              /* ELSE THE ORDER IS DIFFERENT
*       DO;                             /* PUT DATA INTO BUFFER
*         DATABUF(14:21)=SYMBOL;        /* PUT NAME INTO BUFFER
@93F     MVC   BUFFERS+138(8),2(@5)                               0710
*         DATABUF(25:30)=HEXINT(2:7);   /* PUT VECTOR LOC INTO BUFFER
         MVC   BUFFERS+149(6),HEXINT+1                            0711
*         DATABUF(34:45)=DATABUF(40:51); /* MOVE LENGTH INTO PLACE
         MVC   BUFFERS+158(12),BUFFERS+164                        0712
*       END;
*   CURRCESD=CURRCESD+18;               /* LOC NEXT LINE IN CESD TABLE
@93E     LA    @5,18(0,@5)                                        0714
*   RET=ADDR(NACESD17);                 /* SET UP RETURN ADDRESS
         LA    @3,NACESD17                                        0715
*   /* TEST IF LINE OF DATA SHOULD GO ON THIS OR NEXT PAGE
*   IF LINECNT>60                       /* IF LINE COUNT GREATR THAN 60
*     THEN                              /* THEN
         LA    @F,60                                              0716
         C     @F,LINECNT                                         0716
         BC    10,@93D                                            0716
*       DO;                             /* SET TWO SWITCHES
*         LINECT61='1'B;                /* INDIC TO PRINT ON NEXT PAGE
         OI    SWITCHES,B'00010000'                               0718
*         PRHD='1'B;                    /* INDIC TO PRINT PREG HEADING
         OI    SWITCHES+1,B'00100000'                             0719
*       END;
*   GO TO WRITE;                        /* PRINT THIS BUFFER OF DATA
         BC    15,WRITE                                           0721
*
* /********************************************************************
* /*   THE FOLLOWING SECTION OF CODE PRODUCES DATA FOR THE NUMERICAL
* /*   CROSS-REFERENCE LIST.  IF THE INPUT LOAD MODULE IS IN OVERLAY,
* /*   THIS SECTION IS ENTERED FOR EACH SEGMENT.  IF NOT IN OVERLAY,
* /*   THIS SECTION IS ENTERED ONCE.  EACH TIME ENTERED, THE ENTIRE
* /*   RLD TABLE IS SCANNED.
* /********************************************************************
*
* NRLD:
*   NRHD='1'B;                          /* INDIC TO PRINT NRLD HEADING
NRLD     OI    SWITCHES+1,B'10001000'                             0722
*   DASHLINE='1'B;                      /* INDIC TO PRNT LINE OF DASHES
*   SAVCURR1=CURRCESD;                  /* SAVE CURRCESD
         ST    @5,SAVCURR1                                        0724
*   CURRLD=RLDTABAD;                    /* GET BEGINNING OF RLD TABLE
         L     @6,RLDTABAD                                        0725
* NRLD1: /* BRANCH HERE WHEN READY TO PROCESS ANOTHER RLD TABLE LINE.
*           FOLLOWING CODE SEARCHES FOR THIS NEXT LINE.
*   /* TEST IF ALL NUMERIC RLD DATA (FOR CUR SEGMENT IF OVLY) PROCESSED
*   IF CURRLD=RLDEND                    /* IF END OF RLD TABLE REACHED
*     THEN                              /* THEN
NRLD1    C     @6,RLDEND                                          0726
         BC    07,@93C                                            0726
*       DO;                             /* THIS SCAN IS FINISHED
*         NRHD='0'B;                    /* TURN NUMERIC RLD HEADING OFF
         NI    SWITCHES+1,B'01110111'                             0728
*         DASHLINE='0'B;                /* TURN LINE OF DASHES OFF
*         GO TO NACESD1;                /* RETURN TO NUM CESD ROUTINE
         BC    15,NACESD1                                         0730
*       END;
*   /* TEST IF R AND P PTRS ARE VALID
*   IF RPTR>CESDTBID                    /* IF R PTR PTS BEYOND CESDTAB
*      × PPTR>CESDTBID                  /* OR IF P PTR PTS BEYOND IT
*     THEN                              /* THEN
@93C     LH    @F,CESDTBID                                        0732
         CH    @F,0(0,@6)                                         0732
         BC    04,@93B                                            0732
         CH    @F,2(0,@6)                                         0732
         BC    10,@93A                                            0732
*       DO;                             /* PROCESS ERROR
*         ERRORS(3)='1'B;               /* RLD PTR IS INVALID
@93B     L     @7,PARMPTR                                         0734
         OI    32(@7),B'00100000'                                 0734
*         GO TO ABORT;                  /* ABORT (MESSAGE HMB103I)
         BC    15,ABORT                                           0735
*       END;
*   N=INDEXTAB(PPTR);                   /* FIND INDEX INTO CESD TABLE
@93A     LH    @7,2(0,@6)                                         0737
         BCTR  @7,0                                               0737
         SLA   @7,1                                               0737
         L     @8,INDTABAD                                        0737
         LH    @F,0(@7,@8)                                        0737
         STH   @F,N                                               0737
*   CURRCESD=ADDR(CESDTAB(N));          /* POINT TO CESD TABLE LINE
         LR    @7,@F                                              0738
         BCTR  @7,0                                               0738
         MH    @7,@D2                                             0738
         L     @8,CETABPTR                                        0738
         LA    @5,0(@7,@8)                                        0738
*   SAVCURR3=CURRCESD;                  /* SAVE CURRCESD
         ST    @5,SAVCURR3                                        0739
*   /* TEST IF INPUT LOAD MODULE IS IN OVERLAY
*   IF OVERLAY='1'B                     /* IF OVERLAY SWITCH IS ON
*     THEN                              /* THEN
         L     @7,PARMPTR                                         0740
         TM    20(@7),B'01000000'                                 0740
         BC    12,@939                                            0740
*       /* TEST IF CESDTAB ITEM'S SEGNO = CURR SEG NO. IN PROCESS
*       IF SEGNO=CURSEGNO               /* IF THIS SEG IS IN PROCESS
*         THEN                          /* THEN
         CLC   14(1,@5),CURSEGNO                                  0741
*           GO TO NRLD2;                /* GO TO PROCESS RLD TABLE LINE
         BC    08,NRLD2                                           0742
*         ELSE                          /* ELSE SEGNO^=CURSEGNO
*           DO;                         /* DON'T PROCESS THIS LINE
*             CURRLD=CURRLD+8;          /* LOC NEXT LINE IN RLD TABLE
         LA    @6,8(0,@6)                                         0744
*             GO TO NRLD1;              /* GO TO TRY NEXT RLD TAB LINE
         BC    15,NRLD1                                           0745
*           END;
* NRLD2: /* BRANCH HERE WHEN AN RLD TABLE LINE IS FOUND FOR PROCESSING.
*           FOLLOWING CODE PROCESSES IT.
*   N=INDEXTAB(RPTR);                   /* FIND INDEX INTO CESD TABLE
@939     EQU   *                                                  0747
NRLD2    LH    @7,0(0,@6)                                         0747
         BCTR  @7,0                                               0747
         SLA   @7,1                                               0747
         L     @8,INDTABAD                                        0747
         LH    @F,0(@7,@8)                                        0747
         STH   @F,N                                               0747
*   CURRCESD=ADDR(CESDTAB(N));          /* POINT TO CESD TABLE LINE
         LR    @7,@F                                              0748
         BCTR  @7,0                                               0748
         MH    @7,@D2                                             0748
         L     @8,CETABPTR                                        0748
         LA    @5,0(@7,@8)                                        0748
*   BININT(5:7)=RLDADDR;                /* PREP TO CONV ER'S LMOD LOC
         MVC   BININT+4(3),5(@6)                                  0749
*   RET=ADDR(NRLD3);                    /* SET UP RETURN ADDRESS
         LA    @3,NRLD3                                           0750
*   GO TO BITOHEX;                      /* CONV LMOD LOC TO PRNTBLE HEX
         BC    15,BITOHEX                                         0751
* NRLD3: /* BRANCH HERE TO RETURN FROM BITOHEX ROUTINE.
*           FOLLOWING CODE CONTINUES NRLD PROCESSING.
*   DATABUF(7:12)=HEXINT(2:7);          /* PUT ER'S LMOD LOC INTO BUF
NRLD3    MVC   BUFFERS+131(6),HEXINT+1                            0752
*   /* TEST IF CESD ITEM IS A RESOLVED EXTERNAL REF (LABEL REFERENCE)
*   IF CESDTYPE(5:8)='0011'B            /* IF CESD ITEM IS LR
*     THEN                              /* THEN
         TM    10(@5),B'00000011'                                 0753
         BC    12,@938                                            0752
         TM    10(@5),B'00001100'                                 0753
         BC    05,@937                                            0753
*       DO;                             /* PROCESS IT
*         DATABUF(56:63)=SYMBOL;        /* PUT REF'D TO SYMBOL INTO BUF
         MVC   BUFFERS+180(8),2(@5)                               0755
*         BININT(5:7)=CESDADDR;         /* PREP TO CONV SYMB'S LMOD LOC
         MVC   BININT+4(3),11(@5)                                 0756
*         RET=ADDR(NRLD4);              /* SET UP RETURN ADDRESS
         LA    @3,NRLD4                                           0757
*         GO TO BITOHEX;                /* CONV LMOD LOC TO PRINTBL HEX
         BC    15,BITOHEX                                         0758
* NRLD4:  /* BRANCH HERE TO RETURN FROM BITOHEX ROUTINE.
*            FOLLOWING CODE CONTINUES NRLD PROCESSING.
*         DATABUF(72:77)=HEXINT(2:7);   /* PUT SYMBOL'S LMOD LOC IN BUF
NRLD4    MVC   BUFFERS+196(6),HEXINT+1                            0759
*         SAVCSDAD=CESDADDR;            /* SAVE CESDADDR
         MVC   SAVCSDAD+1(3),11(@5)                               0760
         MVI   SAVCSDAD,X'00'                                     0760
*         N=IDLENGTH(2:3);              /* PREPARE FOR NEXT INSTRUCTION
         MVC   @TEMP2+2(2),16(@5)                                 0761
         L     @F,@TEMP2                                          0761
         STH   @F,N                                               0761
*         N=INDEXTAB(N);                /* FIND INDEX INTO CESD TABLE
         LR    @7,@F                                              0762
         BCTR  @7,0                                               0762
         SLA   @7,1                                               0762
         L     @8,INDTABAD                                        0762
         LH    @F,0(@7,@8)                                        0762
         STH   @F,N                                               0762
*         CURRCESD=ADDR(CESDTAB(N));    /* POINT TO CESD TABLE LINE
         LR    @7,@F                                              0763
         BCTR  @7,0                                               0763
         MH    @7,@D2                                             0763
         L     @8,CETABPTR                                        0763
         LA    @5,0(@7,@8)                                        0763
*         BININT(5:7)=SAVCSDAD-CESDADDR; /* COMPUTE SYMBOL'S CSECT LOC
         MVC   @TEMP3+1(3),11(@5)                                 0764
         L     @F,@TEMP3                                          0764
         LCR   @F,@F                                              0764
         A     @F,SAVCSDAD                                        0764
         ST    @F,@TEMP4                                          0764
         MVC   BININT+4(3),@TEMP4+1                               0764
*         RELOC='0'B;                   /* INDICATE NOT TO ADD RELOCFAC
         NI    SWITCHES+2,B'11111101'                             0765
*         RET=ADDR(NRLD5);              /* SET UP RETURN ADDRESS
         LA    @3,NRLD5                                           0766
*         GO TO BITOHEX;                /* CONV CSECT LOC TO PRNTBL HEX
         BC    15,BITOHEX                                         0767
* NRLD5:  /* BRANCH HERE TO RETURN FROM BITOHEX ROUTINE.
*            FOLLOWING CODE CONTINUES NRLD PROCESSING.
*         DATABUF(83:88)=HEXINT(2:7);   /* PUT SYMBL'S CSECT LOC IN BUF
NRLD5    MVC   BUFFERS+207(6),HEXINT+1                            0768
*         IF CESDTYPE(5:8)='0000'B      /* CHECK FOR SD        ZA01415
*            THEN DATABUF(96:103)=SYMBOL;
         TM    10(@5),B'00001111'                                 0769
         BC    05,@936                                            0769
         MVC   BUFFERS+220(8),2(@5)                               0770
         BC    15,@935                                            0771
*                                /* IF SD, INSERT SYMBOL       ZA01415
*            ELSE DATABUF(95:102)=PRIVPRT;
@936     MVC   BUFFERS+219(8),PRIVPRT                             0771
*                                /* IF PC, INSERT $PRIVATE     ZA01415
*         /* TEST IF INPUT LOAD MODULE IS IN OVERLAY
*         IF OVERLAY='1'B               /* IF OVERLAY SWITCH IS ON
*           THEN                        /* THEN
@935     L     @7,PARMPTR                                         0772
         TM    20(@7),B'01000000'                                 0772
         BC    12,@934                                            0772
*             DO;                       /* PROCESS SEGMENT NUMBER
*               BINARY=SEGNO;           /* PREPARE TO CONVERT SEG NO.
         SR    @2,@2                                              0774
         IC    @2,14(0,@5)                                        0774
*               BLNKZERO='1'B;          /* INDIC TO BLANK NONSIG ZEROS
         OI    SWITCHES+1,B'00000001'                             0775
*               RET=ADDR(NRLD6);        /* SET UP RETURN ADDRESS
         LA    @3,NRLD6                                           0776
*               GO TO BITODEC;          /* CONV SEG NO. TO PRINTBLE DEC
         BC    15,BITODEC                                         0777
* NRLD6:  /* BRANCH HERE TO RETURN FROM BITODEC ROUTINE.
*            FOLLOWING CODE CONTINUES NRLD PROCESSING.
*               DATABUF(109:111)=DECINT(2:4); /* PUT SEG NO. INTO BUF
NRLD6    MVC   BUFFERS+233(3),DECINT+1                            0778
*             END;
* NRLD7:  /* BRANCH HERE TO BYPASS ABOVE LR PROCESSING WHEN CESD ITEM
*            FOUND THROUGH P PTR IS NOT LR.  FOLLOWING CODE COMPUTES
*            EXTERNAL REFERENCE'S CSECT LOC.
*         CURRCESD=SAVCURR3;            /* RESTORE CURRCESD FOUND
*                                          THROUGH P PTR
@934     EQU   *                                                  0780
NRLD7    L     @5,SAVCURR3                                        0780
*         BININT(5:7)=RLDADDR-CESDADDR; /* PREP TO CONV ER'S CSECT LOC
         MVC   @TEMP3+1(3),11(@5)                                 0781
         L     @F,@TEMP3                                          0781
         LCR   @F,@F                                              0781
         MVC   @TEMP3+1(3),5(@6)                                  0781
         A     @F,@TEMP3                                          0781
         ST    @F,@TEMP4                                          0781
         MVC   BININT+4(3),@TEMP4+1                               0781
*         RELOC='0'B;                   /* INDICATE NOT TO ADD RELOCFAC
         NI    SWITCHES+2,B'11111101'                             0782
*         RET=ADDR(NRLD8);              /* SET UP RETURN ADDRESS
         LA    @3,NRLD8                                           0783
*         GO TO BITOHEX;                /* CONV CSECT LOC TO PRNTBL HEX
         BC    15,BITOHEX                                         0784
* NRLD8:  /* BRANCH HERE TO RETURN FROM BITOHEX ROUTINE.
*            FOLOWING CODE CONTINUES NRLD PROCESSING.
*         DATABUF(17:22)=HEXINT(2:7);   /* PUT ER'S CSECT LOC INTO BUF
NRLD8    MVC   BUFFERS+141(6),HEXINT+1                            0785
*         /* TEST IF CESD ITEM IS A SECTION DEFINITION
*         IF CESDTYPE(5:8)='0000'B      /* IF CESD ITEM IS SD
*           THEN                        /* THEN
         TM    10(@5),B'00001111'                                 0786
         BC    05,@933                                            0786
*             DATABUF(30:37)=SYMBOL;    /* PUT CSECT NAME INTO BUFFER
         MVC   BUFFERS+154(8),2(@5)                               0787
         BC    15,@932                                            0788
*           ELSE                        /* ELSE IT IS PRIVATE CODE
*             DATABUF(29:36)=PRIVPRT;   /* PUT '$PRIVATE' INTO BUFFER
@933     MVC   BUFFERS+153(8),PRIVPRT                             0788
*         /* TEST IF INPUT LOAD MODULE IS IN OVERLAY
*         IF OVERLAY='1'B               /* IF OVERLAY SWITCH IS ON
*           THEN                        /* THEN
@932     L     @7,PARMPTR                                         0789
         TM    20(@7),B'01000000'                                 0789
         BC    12,@931                                            0789
*             DO;                       /* PROCESS SEGMENT NUMBER
*               BINARY=SEGNO;           /* PREPARE TO CONVERT SEG NO.
         SR    @2,@2                                              0791
         IC    @2,14(0,@5)                                        0791
*               BLNKZERO='1'B;          /* INDIC TO BLANK NONSIG ZEROS
         OI    SWITCHES+1,B'00000001'                             0792
*               RET=ADDR(NRLD9);        /* SET UP RETURN ADDRESS
         LA    @3,NRLD9                                           0793
*               GO TO BITODEC;          /* CONV SEG NO. TO PRINTBLE DEC
         BC    15,BITODEC                                         0794
* NRLD9:        /* BRANCH HERE TO RETURN FROM BITODEC ROUTINE.
*                  FOLLOWING CODE CONTINUES NRLD PROCESSING.
*               DATABUF(43:45)=DECINT(2:4); /* PUT SEG NO. INTO BUFFER
NRLD9    MVC   BUFFERS+167(3),DECINT+1                            0795
*             END;
*         CURRLD=CURRLD+8;              /* LOC NEXT LINE IN RLD TABLE
@931     LA    @6,8(0,@6)                                         0797
*         RLDSPRTD=RLDSPRTD+1;          /* INCR NO. OF RLD LINES PRINTD
         LA    @F,1                                               0798
         A     @F,RLDSPRTD                                        0798
         ST    @F,RLDSPRTD                                        0798
*         RET=ADDR(NRLD1);              /* SET UP RETURN ADDRESS
         LA    @3,NRLD1                                           0799
*         /* TEST IF LINE OF DATA SHOULD GO ON THIS OR NEXT PAGE
*         IF LINECNT>60                 /* IF LINE COUNT GREATR THAN 60
*           THEN                        /* THEN
         LA    @F,60                                              0800
         C     @F,LINECNT                                         0800
         BC    10,@930                                            0800
*             DO;                       /* SET TWO SWITCHES
*               LINECT61='1'B;          /* INDIC TO PRINT ON NEXT PAGE
         OI    SWITCHES,B'00010000'                               0802
*               NRHD='1'B;              /* INDIC TO PRINT NRLD HEADING
         OI    SWITCHES+1,B'10000000'                             0803
*             END;
*         GO TO WRITE;                  /* PRINT THIS BUFFER OF DATA
         BC    15,WRITE                                           0805
*       END;
*   /* TEST IF CESD ITEM IS A RESOLVED EXT REF (SECTION DEF OR COMMON)
*   IF CESDTYPE(5:8)='0000'B            /* IF CESD ITEM IS SD
*      × CESDTYPE(5:8)='0101'B          /* OR CESD ITEM IS CM
*      × CESDTYPE(6:8)='100'B           /* OR CESD ITEM IS PC OY03410
*     THEN                              /* THEN
@937     EQU   *                                                  0807
@938     TM    10(@5),B'00001111'                                 0807
         BC    08,@92F                                            0807
         TM    10(@5),B'00000101'                                 0807
         BC    12,@92E                                            0807
         TM    10(@5),B'00001010'                                 0807
         BC    08,@92D                                            0807
@92E     TM    10(@5),B'00000100'                                 0807
         BC    12,@92C                                            0806
         TM    10(@5),B'00000011'                                 0807
         BC    05,@92B                                            0807
*       DO;                             /* PROCESS IT
@92D     EQU   *                                                  0808
*         /* TEST WHETHER TO PRINT $PRIVATE                    OY03410
*         IF CESDTYPE(6:8)='100'B       /* IS THIS PC?         OY03410
*           THEN                        /* IF IT IS,           OY03410
@92F     TM    10(@5),B'00000100'                                 0809
         BC    12,@92A                                            0808
         TM    10(@5),B'00000011'                                 0809
         BC    05,@929                                            0809
*             DO;                       /* PRINT $PRIVATE      OY03410
*               DATABUF(55:63)=PRIVPRT; /* REF'D SYMBOL        OY03410
         MVC   BUFFERS+179(8),PRIVPRT                             0811
         MVI   BUFFERS+187,C' '                                   0811
*               DATABUF(95:103)=PRIVPRT; /* REF'D CSECT        OY03410
         MVC   BUFFERS+219(8),PRIVPRT                             0812
         MVI   BUFFERS+227,C' '                                   0812
         BC    15,@928                                            0814
*            END;
*         /* TEST WHETHER TO PRINT '$BLANKCOM' AS REF'D TO SYMB & CSECT
*         ELSE IF SYMBOL(1)=BLANK       /* IF SYMBOL FIELD IS BLANK
*           THEN                        /* THEN THE ITEM IS BLANK COM
@929     EQU   *                                                  0814
@92A     CLC   2(1,@5),BLANK                                      0814
         BC    07,@927                                            0814
*             DO;                       /* PUT '$BLANKCOM' INTO BUFFER
*               DATABUF(55:63)=BLCOMPRT; /* IT'S THE REF'D TO SYMBOL
         MVC   BUFFERS+179(9),BLCOMPRT                            0816
*               DATABUF(95:103)=BLCOMPRT; /* IT'S THE REF'D TO CSECT
         MVC   BUFFERS+219(9),BLCOMPRT                            0817
         BC    15,@926                                            0819
*             END;
*           ELSE                        /* ELSE ITEM ISN'T BLANK COMMON
*             DO;                       /* PUT SYMBOL INTO BUFFER
*               DATABUF(56:63)=SYMBOL;  /* IT'S THE REF'D TO SYMBOL
@927     MVC   BUFFERS+180(8),2(@5)                               0820
*               DATABUF(96:103)=SYMBOL; /* IT'S THE REF'D TO CSECT
         MVC   BUFFERS+220(8),2(@5)                               0821
*             END;
*         BININT(5:7)=CESDADDR;         /* PREP TO CONV SYMB'S LMOD LOC
@926     EQU   *                                                  0823
@928     MVC   BININT+4(3),11(@5)                                 0823
*         RET=ADDR(NRLD10);             /* SET UP RETURN ADDRESS
         LA    @3,NRLD10                                          0824
*         GO TO BITOHEX;                /* CONV LMOD LOC TO PRINTBL HEX
         BC    15,BITOHEX                                         0825
* NRLD10: /* BRANCH HERE TO RETURN FROM BITOHEX ROUTINE.
*            FOLLOWING CODE CONTINUES NRLD PROCESSING.
*         DATABUF(72:77)=HEXINT(2:7);   /* PUT SYMBOL'S LMOD LOC IN BUF
NRLD10   MVC   BUFFERS+196(6),HEXINT+1                            0826
*         DATABUF(87:88)=CHARZERO;      /* PUT LOCATION '00' INTO BUF
         MVC   BUFFERS+211(2),CHARZERO                            0827
*         /* TEST IF INPUT LOAD MODULE IS IN OVERLAY
*         IF OVERLAY='1'B               /* IF OVERLAY SWITCH IS ON
*           THEN                        /* THEN
         L     @7,PARMPTR                                         0828
         TM    20(@7),B'01000000'                                 0828
         BC    12,@925                                            0828
*             DO;                       /* PROCESS SEGMENT NUMBER
*               BINARY=SEGNO;           /* PREPARE TO CONVERT SEG NO.
         SR    @2,@2                                              0830
         IC    @2,14(0,@5)                                        0830
*               BLNKZERO='1'B;          /* INDIC TO BLANK NONSIG ZEROS
         OI    SWITCHES+1,B'00000001'                             0831
*               RET=ADDR(NRLD11);       /* SET UP RETURN ADDRESS
         LA    @3,NRLD11                                          0832
*               GO TO BITODEC;          /* CONV SEG NO. TO PRINTBLE DEC
         BC    15,BITODEC                                         0833
* NRLD11:       /* BRANCH HERE TO RETURN FROM BITODEC ROUTINE.
*                  FOLLOWING CODE CONTINUES NRLD PROCESSING.
*               DATABUF(109:111)=DECINT(2:4); /* PUT SEG NO. INTO BUF
NRLD11   MVC   BUFFERS+233(3),DECINT+1                            0834
*             END;
*         GO TO NRLD7;                  /* REST SAME AS LR PROCESSING
         BC    15,NRLD7                                           0836
*       END;
*   /* TEST IF CESD ITEM IS AN UNRESOLVED EXTERNAL REFERENCE (ER)
*   IF CESDTYPE(5:8)='0010'B            /* IF CESD ITEM IS ER
*     THEN                              /* THEN
@92B     EQU   *                                                  0838
@92C     TM    10(@5),B'00000010'                                 0838
         BC    12,@924                                            0837
         TM    10(@5),B'00001101'                                 0838
         BC    05,@923                                            0838
*       DO;                             /* FIND OUT WHICH KIND
*         DATABUF(56:63)=SYMBOL;        /* PUT REF'D TO SYMBOL INTO BUF
         MVC   BUFFERS+180(8),2(@5)                               0840
*         /* TEST IF UNRESOLVED ER IS SIMPLE UNRESOLVED
*         IF IDLENGTH(1)=ZERO(1)        /* IF ID IS 0
*           THEN                        /* THEN
         CLC   15(1,@5),ZERO                                      0841
         BC    07,@922                                            0841
*             DATABUF(95:105)=UNRESPRT; /* PUT '$UNRESOLVED' INTO BUF
         MVC   BUFFERS+219(11),UNRESPRT                           0842
         BC    15,@921                                            0843
*           ELSE                        /* ELSE TEST FOR NEVER-CALL
*             /* TEST IF UNRESOLVED ER IS NEVER-CALL
*             IF IDLENGTH(1)=NEVRCALL   /* IF ID IS 6
*               THEN                    /* THEN
@922     CLC   15(1,@5),NEVRCALL                                  0843
         BC    07,@920                                            0843
*                 DATABUF(95:105)=NEVCLPRT; /* PUT '$NEVER-CALL' IN BUF
         MVC   BUFFERS+219(11),NEVCLPRT                           0844
         BC    15,@91F                                            0845
*               ELSE                    /* ELSE
*                 DO;                   /* PROCESS ERROR
*                   ERRORS(3)='1'B;     /* RLD PTR IS INVALID
@920     L     @7,PARMPTR                                         0846
         OI    32(@7),B'00100000'                                 0846
*                   GO TO ABORT;        /* ABORT (MESSAGE HMB103I)
         BC    15,ABORT                                           0847
*                 END;
*         GO TO NRLD7;                  /* REST SAME AS LR PROCESSING
*       END;
*   /* TEST IF CESD ITEM IS AN UNRESOLVED WEAK EXTERNAL REFERENCE
*   IF CESDTYPE(5:8)='1010'B            /* IF CESD ITEM IS WX
*     THEN                              /* THEN
@923     EQU   *                                                  0851
@924     TM    10(@5),B'00001010'                                 0851
         BC    12,@91E                                            0850
         TM    10(@5),B'00000101'                                 0851
         BC    05,@91D                                            0851
*       DO;                             /* PROCESS IT
*         DATABUF(56:63)=SYMBOL;        /* PUT REF'D TO SYMBOL INTO BUF
         MVC   BUFFERS+180(8),2(@5)                               0853
*         DATABUF(95:108)=UNREWPRT;     /* PUT '$UNRESOLVED(W)' IN BUF
         MVC   BUFFERS+219(14),UNREWPRT                           0854
*         GO TO NRLD7;                  /* REST SAME AS LR PROCESSING
         BC    15,NRLD7                                           0855
*       END;
*
* /********************************************************************
* /*   THE FOLLOWING SECTION OF CODE SORTS CESD TABLE LINES INTO
* /*   ASCENDING ALPHABETICAL ORDER ACCORDING TO THE SYMBOL FIELD
* /*   IN EACH LINE.  FOR PC, PD, AND BLANK CM LINES (ALL THEIR
* /*   SYMBOL FIELDS CONTAIN BLANKS), APPROPRIATE SYMBOLS ARE FIRST
* /*   PUT INTO THESE FIELDS, SO THESE LINES MAY BE SORTED ALONG
* /*   WITH THE SD, LR, ER, AND NAMED CM LINES.  THEN THE SORT IS
* /*   DONE FROM THE CESD TABLE, WITHOUT USING TEMPORARY AREAS FOR
* /*   COMPARISONS.  THE INDEX TABLE IS ALSO REBUILT HERE.  THIS
* /*   SECTION OF CODE IS ENTERED AFTER ALL NACESD AND NRLD
* /*   PROCESSING IS FINISHED.
* /********************************************************************
*
* ACSORT:
*   LINECNT=61;                         /* INDIC TO SKIP TO NEXT PAGE
@91D     EQU   *                                                  0857
@91E     EQU   *                                                  0857
ACSORT   LA    @F,61                                              0857
         ST    @F,LINECNT                                         0857
*   NUMCESD='0'B;                       /* INDIC NUM CESD ROUTINE DONE
         NI    SWITCHES+2,B'10111111'                             0858
*   M=NUMCESDS;                         /* INIT M TO NO. CESDTAB ENTS
         LH    @F,NUMCESDS                                        0859
         ST    @F,M                                               0859
*   CURRCESD=CETABPTR;                  /* GET BEGINNING OF CESD TABLE
         L     @5,CETABPTR                                        0860
*   /* PUT $P, $E, $S, OR $B IN SYMBOL FIELD OF APPROPRIATE CESD ITEM
*   DO I=1 TO NUMCESDS;                 /* LOOP THROUGH CESD TABLE
         LA    @2,1                                               0861
         BC    15,@DO91B                                          0861
*     /* TEST IF CESD ITEM IS PRIVATE CODE
*     IF CESDTYPE(6:8)='100'B           /* IF CESD ITEM IS PRIVATE CODE
*       THEN                            /* THEN
@DO91C   TM    10(@5),B'00000100'                                 0862
         BC    12,@918                                            0861
         TM    10(@5),B'00000011'                                 0862
         BC    05,@917                                            0862
*        /* TEST IF CESD ITEM IS PRIVATE CODE MARKED DELETE (PD)
*        IF CESDTYPE(4)='0'B            /* IF CESD ITEM IS NOT PD
*           THEN                        /* THEN
         TM    10(@5),B'00010000'                                 0863
         BC    05,@916                                            0863
*             DO;                       /* IT IS PC
*               SYMBOL(2:3)=PRIVPRT(1:2); /* PUT '$P' INTO SYMBOL FIELD
         MVC   3(2,@5),PRIVPRT                                    0865
*               SYMBOL(4:6)=CESDADDR;   /* PUT CESDADDR INTO SYMB FIELD
         MVC   5(3,@5),11(@5)                                     0866
*               GO TO ACSORT1;          /* GO TO INCREMENT CURRCESD
         BC    15,ACSORT1                                         0867
*             END;
*           ELSE                        /* ELSE CESD ITEM IS PD
*             DO;                       /* TEST FOR ENTAB OR SEGTAB
*               /* TEST IF CESD ITEM IS ENTAB
*               IF CESDADDR^=ZERO       /* IF CESDADDR IS NOT 0
*                 THEN                  /* THEN ITEM IS ENTAB
@916     MVC   @TEMP3+1(3),ZERO                                   0870
         L     @F,@TEMP3                                          0870
         MVC   @TEMP3+1(3),11(@5)                                 0870
         C     @F,@TEMP3                                          0870
         BC    08,@914                                            0870
*                   DO;                 /* PROCESS IT
*                     SYMBOL(2:3)=ENTABPRT(1:2); /* '$E' IN SYMB FIELD
         MVC   3(2,@5),ENTABPRT                                   0872
*                     SYMBOL(4:6)=CESDADDR; /* CESDADDR INTO SYMB FIELD
         MVC   5(3,@5),11(@5)                                     0873
*                     GO TO ACSORT1;    /* LOOP
         BC    15,ACSORT1                                         0874
*                   END;
*                 ELSE                  /* ELSE ITEM IS SEGTAB
*                   DO;                 /* PROCESS IT
*                     SYMBOL(2:3)=SEGTBPRT(1:2); /* '$S' IN SYMB FIELD
@914     MVC   3(2,@5),SEGTBPRT                                   0877
*                     GO TO ACSORT1;    /* GO TO INCREMENT CURRCESD
         BC    15,ACSORT1                                         0878
*                   END;
*             END;
@913     EQU   *                                                  0880
*     /* TEST IF CESD ITEM IS COMMON AREA
*     IF CESDTYPE(5:8)='0101'B          /* IF CESD ITEM IS CM
*       THEN                            /* THEN
@915     EQU   *                                                  0881
@917     EQU   *                                                  0881
@918     TM    10(@5),B'00000101'                                 0881
         BC    12,@912                                            0880
         TM    10(@5),B'00001010'                                 0881
         BC    05,@911                                            0881
*         /* TEST IF COMMON AREA IS BLANK COMMON
*         IF SYMBOL(1)=BLANK            /* IF SYMBOL FIELD IS BLANK
*           THEN                        /* THEN ITEM IS BLANK COMMON
         CLC   2(1,@5),BLANK                                      0882
         BC    07,@910                                            0882
*             SYMBOL(2:3)=BLCOMPRT(1:2); /* PUT '$B' INTO SYMBOL FIELD
         MVC   3(2,@5),BLCOMPRT                                   0883
* ACSORT1: /* BRANCH HERE AFTER PRIVATE CODE OR COMMON AREA IS DETECTED
*             AND FLAGGED IN CESD TABLE.  FOLLOWING CODE LOOPS.
*     CURRCESD=CURRCESD+18;             /* LOC NEXT LINE IN CESD TABLE
@910     EQU   *                                                  0884
@911     EQU   *                                                  0884
@912     EQU   *                                                  0884
ACSORT1  LA    @5,18(0,@5)                                        0884
*   END;                                /* LOOP
* ACSORT2: /* BRANCH HERE WHEN A PASS THROUGH THE CESD TABLE IS
*             FINISHED.  FOLLOWING CODE TESTS IF SORT IS FINISHED.
*   M=M/2;                              /* DIVIDE ARRAY IN HALF
         AH    @2,@D3                                             0885
@DO91B   CH    @2,NUMCESDS                                        0885
         BC    12,@DO91C                                          0885
ACSORT2  L     @E,M                                               0886
         SRDA  @E,32                                              0886
         LA    @0,2                                               0886
         DR    @E,@0                                              0886
         ST    @F,M                                               0886
*   /* TEST IF SORT IS FINISHED
*   IF M=0                              /* IF M IS 0
*     THEN                              /* THEN SORT IS FINISHED
         SR    @F,@F                                              0887
         C     @F,M                                               0887
         BC    07,@90F                                            0887
*       DO;                             /* REBUILD THE INDEX TABLE
*         /* REBUILD THE INDEX TABLE
*         DO J=1 TO NUMCESDS;           /* LOOP THRU CESD & INDEX TABS
         LA    @F,1                                               0889
         BC    15,@DO90D                                          0889
*           N=CESDTAB(J,1:2);           /* USE CESDID AS INDEX
@DO90E   L     @7,J                                               0890
         BCTR  @7,0                                               0890
         MH    @7,@D2                                             0890
         L     @8,CETABPTR                                        0890
         LA    @A,0(@7,@8)                                        0890
         MVC   @TEMP2+2(2),0(@A)                                  0890
         L     @F,@TEMP2                                          0890
         STH   @F,N                                               0890
*           INDEXTAB(N)=J;              /* MAKE ENTRY IN INDEX TABLE
         L     @F,J                                               0891
         LH    @7,N                                               0891
         BCTR  @7,0                                               0891
         SLA   @7,1                                               0891
         L     @8,INDTABAD                                        0891
         STH   @F,0(@7,@8)                                        0891
*         END;                          /* LOOP
*         GO TO NACESD;                 /* GO TO ALPHA CESD PROCESSING
         L     @F,J                                               0892
         AH    @F,@D3                                             0892
@DO90D   ST    @F,J                                               0892
         CH    @F,NUMCESDS                                        0892
         BC    12,@DO90E                                          0892
         BC    15,NACESD                                          0893
*       END;
*   K=NUMCESDS-M;                       /* SET INDEX K
@90F     LH    @F,NUMCESDS                                        0895
         S     @F,M                                               0895
         ST    @F,K                                               0895
*   J=1;                                /* SET INDEX J TO 1
         LA    @F,1                                               0896
         ST    @F,J                                               0896
* ACSORT3: /* BRANCH HERE TO COMPLETE A PASS THROUGH THE CESD TABLE.
*             FOLLOWING CODE SETS INDEX I.
*   I=J;                                /* SET INDEX I
ACSORT3  L     @2,J                                               0897
* ACSORT4: /* BRANCH HERE WHEN TWO NEW COMPARANDS ARE FOUND.
*             FOLLOWING CODE COMPARES THEM.
*   IM=I+M;                             /* SET INDEX IM
ACSORT4  L     @F,M                                               0898
         AR    @F,@2                                              0898
         ST    @F,IM                                              0898
*   /* TEST WHICH IS GREATER OF TWO CESD TABLE SYMBOLS
*   IF CESDTAB(I,3:10)<=CESDTAB(IM,3:10) /* IF SECOND GREATER THAN 1ST
*     THEN                              /* THEN
         LR    @7,@F                                              0899
         BCTR  @7,0                                               0899
         MH    @7,@D2                                             0899
         L     @8,CETABPTR                                        0899
         LA    @E,2(@7,@8)                                        0899
         LR    @7,@2                                              0899
         BCTR  @7,0                                               0899
         MH    @7,@D2                                             0899
         LA    @A,2(@7,@8)                                        0899
         CLC   0(8,@A),0(@E)                                      0899
*       GO TO ACSORT5;                  /* DON'T EXCHANGE CESD LINES
         BC    12,ACSORT5                                         0900
*   TEMPAREA(1:18)=CESDTAB(I);          /* FIRST GOES INTO TEMP AREA
         LA    @E,0(@7,@8)                                        0901
         MVC   TEMPAREA(18),0(@E)                                 0901
*   CESDTAB(I)=CESDTAB(IM);             /* SECOND GOES INTO FIRST
         L     @7,IM                                              0902
         BCTR  @7,0                                               0902
         MH    @7,@D2                                             0902
         LA    @E,0(@7,@8)                                        0902
         LR    @7,@2                                              0902
         BCTR  @7,0                                               0902
         MH    @7,@D2                                             0902
         LA    @A,0(@7,@8)                                        0902
         MVC   0(18,@A),0(@E)                                     0902
*   CESDTAB(IM)=TEMPAREA(1:18);         /* FIRST GOES INTO SECOND
         L     @7,IM                                              0903
         BCTR  @7,0                                               0903
         MH    @7,@D2                                             0903
         LA    @A,0(@7,@8)                                        0903
         MVC   0(18,@A),TEMPAREA                                  0903
*   I=I-M;                              /* DECREMENT INDEX I BY M
         S     @2,M                                               0904
*   /* TEST IF BEGINNING OF CESD TABLE HAS BEEN REACHED
*   IF I>=1                             /* IF BEGINNING NOT REACHED
*     THEN                              /* THEN
         CH    @2,@D3                                             0905
*       GO TO ACSORT4;                  /* GO TO COMPARE SYMBOLS
         BC    10,ACSORT4                                         0906
* ACSORT5: /* BRANCH HERE TO BYPASS SWAPPING TWO CESD TABLE LINES.
*             FOLLOWING CODE TESTS FOR SCAN COMPLETION.
*   J=J+1;                              /* INCREMENT INDEX J BY 1
ACSORT5  LA    @F,1                                               0907
         A     @F,J                                               0907
         ST    @F,J                                               0907
*   /* TEST IF THIS SCAN IS FINISHED
*   IF J>K                              /* IF INDEX J GREATER THAN K
*     THEN                              /* THEN
         L     @F,K                                               0908
         C     @F,J                                               0908
*       GO TO ACSORT2;                  /* GO TO POSSIBLY SCAN AGAIN
         BC    04,ACSORT2                                         0909
*     ELSE                              /* ELSE SCAN ISN'T FINISHED
*       GO TO ACSORT3;                  /* GO TO FINISH IT
         BC    15,ACSORT3                                         0910
*
* /********************************************************************
* /*   THE FOLLOWING SECTION OF CODE PRODUCES DATA FOR THE
* /*   ALPHABETICAL CROSS-REFERENCE LIST.  THIS SECTION IS ENTERED
* /*   ONCE: AFTER ALPHABETICAL CESD PROCESSING.
* /********************************************************************
*
* ARLD:
*   /* TEST IF THE LOAD MODULE CONTAINS ANY EXTERNAL REFERENCES
*   IF EREFPRES='0'B                    /* IF EREFPRES SWITCH IS OFF
*     THEN                              /* THEN
ARLD     TM    SWITCHES+1,B'00000010'                             0911
*       GO TO FINISH;                   /* HMBLKXRF IS FINISHED
         BC    08,FINISH                                          0912
*   LINECNT=61;                         /* INDIC TO PRINT ON NEXT PAGE
         LA    @F,61                                              0913
         ST    @F,LINECNT                                         0913
*   CURRLD=RLDTABAD;                    /* GET BEGINNING OF RLD TABLE
         L     @6,RLDTABAD                                        0914
*   CURRCESD=CETABPTR;                  /* GET BEGINNING OF CESD TABLE
         L     @5,CETABPTR                                        0915
*   ARHD='1'B;                          /* TURN ALPHA RLD HEADING ON
         OI    SWITCHES+1,B'01000000'                             0916
* ARLD1: /* BRANCH HERE WHEN READY TO PROCESS ANOTHER RLD TABLE LINE.
*           FOLLOWING CODE SEARCHES FOR THIS NEXT LINE.
*   /* TEST IF A PASS THROUGH THE RLD TABLE IS COMPLETE
*      (THERE IS ONE PASS FOR EACH CESD TABLE ITEM)
*   IF CURRLD=RLDEND                    /* IF END OF RLD TABLE REACHED
*     THEN                              /* THEN
ARLD1    C     @6,RLDEND                                          0917
         BC    07,@90A                                            0917
*       DO;                             /* DO THE FOLLOWING
*         CURRLD=RLDTABAD;              /* GET BEG OF RLD TABLE AGAIN
         L     @6,RLDTABAD                                        0919
*         CURRCESD=CURRCESD+18;         /* LOC NEXT LINE IN CESD TABLE
         LA    @5,18(0,@5)                                        0920
*         /* TEST IF ALPHABETIC RLD PROCESSING IS COMPLETE
*         IF CURRCESD=CESDEND           /* IF END OF CESD TABLE REACHED
*           THEN                        /* THEN
         C     @5,CESDEND                                         0921
*             GO TO FINISH;             /* IMBLKXRF IS FINISHED
         BC    08,FINISH                                          0922
*       END;
*   /* TEST IF R PTR MATCHES CESD ID
*   IF CESDID=RPTR                      /* IF CESD ID = R PTR
*     THEN                              /* THEN
@90A     LH    @F,0(0,@6)                                         0924
         CH    @F,0(0,@5)                                         0924
*       GO TO ARLD2;                    /* GO TO PROCESS THIS MATCHUP
         BC    08,ARLD2                                           0925
*     ELSE                              /* ELSE CESD ID ^= R PTR
*       DO;                             /* TRY AGAIN
*         CURRLD=CURRLD+8;              /* LOC NEXT LINE IN RLD TABLE
         LA    @6,8(0,@6)                                         0927
*         GO TO ARLD1;                  /* GO TO TRY AGAIN FOR MATCHUP
         BC    15,ARLD1                                           0928
*       END;
* ARLD2: /* BRANCH HERE WHEN AN RLD TABLE LINE IS FOUND FOR PROCESSING.
*           FOLLOWING CODE CONVERTS ITS RLD ADDRESS.
*   BININT(5:7)=RLDADDR;                /* PREP TO CONV REF'S LMOD LOC
ARLD2    MVC   BININT+4(3),5(@6)                                  0930
*   RET=ADDR(ARLD3);                    /* SET UP RETURN ADDRESS
         LA    @3,ARLD3                                           0931
*   GO TO BITOHEX;                      /* CONV LMOD LOC TO PRNTBLE HEX
         BC    15,BITOHEX                                         0932
* ARLD3: /* BRANCH HRE TO RETURN FROM BITOHEX ROUTINE.
*           FOLLOWING CODE CONTINUES ARLD PROCESSING.
*   DATABUF(70:75)=HEXINT(2:7);         /* PUT ER'S LMOD LOC INTO BUF
ARLD3    MVC   BUFFERS+194(6),HEXINT+1                            0933
*   /* TEST IF CESD ITEM IS A RESOLVED EXTERNAL REF (LABEL REFERENCE)
*   IF CESDTYPE(5:8)='0011'B            /* IF CESD ITEM IS LR
*     THEN                              /* THEN
         TM    10(@5),B'00000011'                                 0934
         BC    12,@909                                            0933
         TM    10(@5),B'00001100'                                 0934
         BC    05,@908                                            0934
*       DO;                             /* PROCESS IT
*         DATABUF(2:9)=SYMBOL;          /* PUT REF'D TO SYMBOL INTO BUF
         MVC   BUFFERS+126(8),2(@5)                               0936
*         BININT(5:7)=CESDADDR;         /* PREP TO CONV SYMB'S LMOD LOC
         MVC   BININT+4(3),11(@5)                                 0937
*         RET=ADDR(ARLD4);              /* SET UP RETURN ADDRESS
         LA    @3,ARLD4                                           0938
*         GO TO BITOHEX;                /* CONV LMOD LOC TO PRINTBL HEX
         BC    15,BITOHEX                                         0939
* ARLD4:  /* BRACH HERE TO RETURN FROM BITOHEX ROUTINE.
*            FOLLOWING CODE CONTINUES ARLD PROCESSING.
*         DATABUF(14:19)=HEXINT(2:7);   /* PUT SYMBOL'S LMOD LOC IN BUF
ARLD4    MVC   BUFFERS+138(6),HEXINT+1                            0940
*         SAVCURR2=CURRCESD;            /* SAVE CURRCESD
         ST    @5,SAVCURR2                                        0941
*         SAVCSDAD=CESDADDR;            /* SAVE CESDADDR
         MVC   SAVCSDAD+1(3),11(@5)                               0942
         MVI   SAVCSDAD,X'00'                                     0942
*         N=IDLENGTH(2:3);              /* PREPARE FOR NEXT INSTRUCTION
         MVC   @TEMP2+2(2),16(@5)                                 0943
         L     @F,@TEMP2                                          0943
         STH   @F,N                                               0943
*         N=INDEXTAB(N);                /* FIND INDEX INTO CESD TABLE
         LR    @7,@F                                              0944
         BCTR  @7,0                                               0944
         SLA   @7,1                                               0944
         L     @8,INDTABAD                                        0944
         LH    @F,0(@7,@8)                                        0944
         STH   @F,N                                               0944
*         CURRCESD=ADDR(CESDTAB(N));    /* POINT TO CESD TABLE LINE
         LR    @7,@F                                              0945
         BCTR  @7,0                                               0945
         MH    @7,@D2                                             0945
         L     @8,CETABPTR                                        0945
         LA    @5,0(@7,@8)                                        0945
*         BININT(5:7)=SAVCSDAD-CESDADDR; /* PREP TO CONV SYM'S CSECT LC
         MVC   @TEMP3+1(3),11(@5)                                 0946
         L     @F,@TEMP3                                          0946
         LCR   @F,@F                                              0946
         A     @F,SAVCSDAD                                        0946
         ST    @F,@TEMP4                                          0946
         MVC   BININT+4(3),@TEMP4+1                               0946
*         RELOC='0'B;                   /* INDICATE NOT TO ADD RELOCFAC
         NI    SWITCHES+2,B'11111101'                             0947
*         RET=ADDR(ARLD5);              /* SET UP RETURN ADDRESS
         LA    @3,ARLD5                                           0948
*         GO TO BITOHEX;                /* CONV CSECT LOC TO PRNTBL HEX
         BC    15,BITOHEX                                         0949
* ARLD5:  /* BRANCH HERE TO RETURN FROM BITOHEX ROUTINE.
*            FOLLOWING CODE CONTINUES ARLD PROCESSING.
*         DATABUF(25:30)=HEXINT(2:7);   /* PUT SYMBL'S CSECT LOC IN BUF
ARLD5    MVC   BUFFERS+149(6),HEXINT+1                            0950
*         IF SYMBOL(2:3)=PRIVPRT(1:2)   /* CHECK FOR $P        ZA01415
*            THEN DATABUF(37:44)=PRIVPRT;
         CLC   3(2,@5),PRIVPRT                                    0951
         BC    07,@907                                            0951
         MVC   BUFFERS+161(8),PRIVPRT                             0952
         BC    15,@906                                            0953
*                              /* IF FOUND, INSERT $PRIVATE    ZA01415
*            ELSE DATABUF(38:45)=SYMBOL;
@907     MVC   BUFFERS+162(8),2(@5)                               0953
*                              /* IF NOT, INSERT SYMBOL        ZA01415
*         /* TEST IF INPUT LOAD MODULE IS IN OVERLAY
*         IF OVERLAY='1'B               /* IF OVERLAY SWITCH IS ON
*           THEN                        /* THEN
@906     L     @7,PARMPTR                                         0954
         TM    20(@7),B'01000000'                                 0954
         BC    12,@905                                            0954
*             DO;                       /* PROCESS SEGMENT NUMBER
*               BINARY=SEGNO;           /* PREPARE TO CONVERT SEG NO.
         SR    @2,@2                                              0956
         IC    @2,14(0,@5)                                        0956
*               BLNKZERO='1'B;          /* INDIC TO BLANK NONSIG ZEROS
         OI    SWITCHES+1,B'00000001'                             0957
*               RET=ADDR(ARLD6);        /* SET UP RETURN ADDRESS
         LA    @3,ARLD6                                           0958
*               GO TO BITODEC;          /* CONV SEG NO. TO PRINTBLE DEC
         BC    15,BITODEC                                         0959
* ARLD6:        /* BRANCH HERE TO RETURN FROM BITODEC ROUTINE.
*                  FOLLOWING CODE CONTINUES ARLD PROCESSING.
*               DATABUF(51:53)=DECINT(2:4); /* PUT SEG NO. INTO BUFFER
ARLD6    MVC   BUFFERS+175(3),DECINT+1                            0960
*             END;
*         CURRCESD=SAVCURR2;            /* PREPARE FOR FOLLOWING STMNT
@905     L     @5,SAVCURR2                                        0962
* ARLD7:  /* BRANCH HERE TO BYPASS ABOVE LR PROCESSING WHEN CESD ITEM
*            IS NOT LR.  FOLLOWING CODE LOOKS FOR P PTR MATCH.
*         SAVCURR2=CURRCESD;            /* SAVE CURRCESD
ARLD7    ST    @5,SAVCURR2                                        0963
*         N=INDEXTAB(PPTR);             /* FIND INDEX INTO CESD TABLE
         LH    @7,2(0,@6)                                         0964
         BCTR  @7,0                                               0964
         SLA   @7,1                                               0964
         L     @8,INDTABAD                                        0964
         LH    @F,0(@7,@8)                                        0964
         STH   @F,N                                               0964
*         CURRCESD=ADDR(CESDTAB(N));    /* POINT TO CESD TABLE LINE
         LR    @7,@F                                              0965
         BCTR  @7,0                                               0965
         MH    @7,@D2                                             0965
         L     @8,CETABPTR                                        0965
         LA    @5,0(@7,@8)                                        0965
*         BININT(5:7)=RLDADDR-CESDADDR; /* COMPUTE REF'S CSECT LOC
         MVC   @TEMP3+1(3),11(@5)                                 0966
         L     @F,@TEMP3                                          0966
         LCR   @F,@F                                              0966
         MVC   @TEMP3+1(3),5(@6)                                  0966
         A     @F,@TEMP3                                          0966
         ST    @F,@TEMP4                                          0966
         MVC   BININT+4(3),@TEMP4+1                               0966
*         RELOC='0'B;                   /* INDICATE NOT TO ADD RELOCFAC
         NI    SWITCHES+2,B'11111101'                             0967
*         RET=ADDR(ARLD8);              /* SET UP RETURN ADDRESS
         LA    @3,ARLD8                                           0968
*         GO TO BITOHEX;                /* CONV CSECT LOC TO PRNTBL HEX
         BC    15,BITOHEX                                         0969
* ARLD8:  /* BRANCH HERE TO RETURN FROM BITOHEX ROUTINE.
*            FOLLOWING CODE CONTINUES ARLD PROCESSING.
*         DATABUF(88:93)=HEXINT(2:7);   /* PUT ER'S CSECT LOC INTO BUF
ARLD8    MVC   BUFFERS+212(6),HEXINT+1                            0970
*         /* TEST IF CESD ITEM IS A SECTION DEFINITION
*         IF CESDTYPE(5:8)='0000'B      /* IF CESD ITEM IS SD
*           THEN                        /* THEN
         TM    10(@5),B'00001111'                                 0971
         BC    05,@904                                            0971
*             DATABUF(101:108)=SYMBOL;  /* PUT CSECT NAME INTO BUFFER
         MVC   BUFFERS+225(8),2(@5)                               0972
         BC    15,@903                                            0973
*           ELSE                        /* ELSE IT IS PRIVATE CODE
*             DATABUF(100:107)=PRIVPRT; /* PUT '$PRIVATE' INTO BUFFER
@904     MVC   BUFFERS+224(8),PRIVPRT                             0973
*         /* TEST IF INPUT LOAD MODULE IS IN OVERLAY
*         IF OVERLAY='1'B               /* IF OVERLAY SWITCH IS ON
*           THEN                        /* THEN
@903     L     @7,PARMPTR                                         0974
         TM    20(@7),B'01000000'                                 0974
         BC    12,@902                                            0974
*             DO;                       /* PROCESS SEGMENT NUMBER
*               BINARY=SEGNO;           /* PREPARE TO CONVERT SEG NO.
         SR    @2,@2                                              0976
         IC    @2,14(0,@5)                                        0976
*               BLNKZERO='1'B;          /* INDIC TO BLANK NONSIG ZEROS
         OI    SWITCHES+1,B'00000001'                             0977
*               RET=ADDR(ARLD9);        /* SET UP RETURN ADDRESS
         LA    @3,ARLD9                                           0978
*               GO TO BITODEC;          /* CONV SEG NO. TO PRINTBLE DEC
         BC    15,BITODEC                                         0979
* ARLD9:        /* BRANCH HERE TO RETURN FROM BITODEC ROUTINE.
*                  FOLLOWING CODE CONTINUES ARLD PROCESSING.
*               DATABUF(114:116)=DECINT(2:4); /* PUT SEG NO. INTO BUF
ARLD9    MVC   BUFFERS+238(3),DECINT+1                            0980
*             END;
*         CURRCESD=SAVCURR2;            /* RESTORE CURRCESD
@902     L     @5,SAVCURR2                                        0982
*         CURRLD=CURRLD+8;              /* LOC NEXT LINE IN RLD TABLE
         LA    @6,8(0,@6)                                         0983
*         RET=ADDR(ARLD1);              /* SET UP RETURN ADDRESS
         LA    @3,ARLD1                                           0984
*         /* TEST IF LINE OF DATA SHOULD GO ON THIS OR NEXT PAGE
*         IF LINECNT>60                 /* IF LINE COUNT GREATR THAN 60
*           THEN                        /* THEN
         LA    @F,60                                              0985
         C     @F,LINECNT                                         0985
         BC    10,@901                                            0985
*             DO;                       /* SET TWO SWITCHES
*               LINECT61='1'B;          /* INDIC TO PRINT ON NEXT PAGE
         OI    SWITCHES,B'00010000'                               0987
*               ARHD='1'B;              /* INDIC TO PRINT ARLD HEADING
         OI    SWITCHES+1,B'01000000'                             0988
*             END;
*         GO TO WRITE;                  /* PRINT THIS BUFFER OF DATA
         BC    15,WRITE                                           0990
*       END;
*   /* TEST IF CESD ITEM IS A RESOLVED EXT REF (SECTION DEF OR COMMON)
*   IF CESDTYPE(5:8)='0000'B            /* IF CESD ITEM IS SD
*      × CESDTYPE(5:8)='0101'B          /* OR CESD ITEM IS CM
*      × CESDTYPE(6:8)='100'B           /* OR CESD ITEM IS PC  OY03410
*     THEN                              /* THEN
@908     EQU   *                                                  0992
@909     TM    10(@5),B'00001111'                                 0992
         BC    08,@900                                            0992
         TM    10(@5),B'00000101'                                 0992
         BC    12,@8FF                                            0992
         TM    10(@5),B'00001010'                                 0992
         BC    08,@8FE                                            0992
@8FF     TM    10(@5),B'00000100'                                 0992
         BC    12,@8FD                                            0991
         TM    10(@5),B'00000011'                                 0992
         BC    05,@8FC                                            0992
*       DO;                             /* PROCESS IT
@8FE     EQU   *                                                  0993
*         /* TEST WHETHER TO PRINT $PRIVATE                    OY03410
*         IF CESDTYPE(6:8)='100'B       /* IS THIS PC?         OY03410
*           THEN                        /* IF IT IS,           OY03410
@900     TM    10(@5),B'00000100'                                 0994
         BC    12,@8FB                                            0993
         TM    10(@5),B'00000011'                                 0994
         BC    05,@8FA                                            0994
*             DO;                       /* PRINT $PRIVATE      OY03410
*               DATABUF(1:9)=PRIVPRT;   /* REF'D SYMBOL        OY03410
         MVC   BUFFERS+125(8),PRIVPRT                             0996
         MVI   BUFFERS+133,C' '                                   0996
*               DATABUF(37:45)=PRIVPRT; /* REF'D CSECT         OY03410
         MVC   BUFFERS+161(8),PRIVPRT                             0997
         MVI   BUFFERS+169,C' '                                   0997
         BC    15,@8F9                                            0999
*             END;
*         /* TEST WHETHER TO PRINT '$BLANKCOM' AS REF'D TO SYMB & CSECT
*         ELSE IF SYMBOL(1)=BLANK       /* IF SYMBOL FIELD IS BLANK
*           THEN                        /* THEN THE ITEM IS BLANK COM
@8FA     EQU   *                                                  0999
@8FB     CLC   2(1,@5),BLANK                                      0999
         BC    07,@8F8                                            0999
*             DO;                       /* PUT '$BLANKCOM' INTO BUFFER
*               DATABUF(1:9)=BLCOMPRT;  /* IT'S THE REF'D TO SYMBOL
         MVC   BUFFERS+125(9),BLCOMPRT                            1001
*               DATABUF(37:45)=BLCOMPRT; /* IT'S THE REF'D TO CSECT
         MVC   BUFFERS+161(9),BLCOMPRT                            1002
         BC    15,@8F7                                            1004
*             END;
*           ELSE                        /* ELSE ITEM ISN'T BLANK COMMON
*             DO;                       /* PUT SYMBOL INTO BUFFER
*               DATABUF(2:9)=SYMBOL;    /* IT'S THE REF'D TO SYMBOL
@8F8     MVC   BUFFERS+126(8),2(@5)                               1005
*               DATABUF(38:45)=SYMBOL;  /* IT'S THE REF'D TO CSECT
         MVC   BUFFERS+162(8),2(@5)                               1006
*             END;
*         BININT(5:7)=CESDADDR;         /* PREP TO CONV SYMB'S LMOD LOC
@8F7     EQU   *                                                  1008
@8F9     MVC   BININT+4(3),11(@5)                                 1008
*         RET=ADDR(ARLD10);             /* SET UP RETURN ADDRESS
         LA    @3,ARLD10                                          1009
*         GO TO BITOHEX;                /* CONV LMOD LOC TO PRINTBL HEX
         BC    15,BITOHEX                                         1010
* ARLD10: /* BRANCH HERE TO RETURN FROM BITOHEX ROUTINE.
*            FOLLOWING CODE CONTINUES ARLD PROCESSING.
*         DATABUF(14:19)=HEXINT(2:7);   /* PUT SYMBOL'S LMOD LOC IN BUF
ARLD10   MVC   BUFFERS+138(6),HEXINT+1                            1011
*         DATABUF(29:30)=CHARZERO;      /* PUT LOCATION '00' INTO BUF
         MVC   BUFFERS+153(2),CHARZERO                            1012
*         /* TEST IF INPUT LOAD MODULE IS IN OVERLAY
*         IF OVERLAY='1'B               /* IF OVERLAY SWITCH IS ON
*           THEN                        /* THEN
         L     @7,PARMPTR                                         1013
         TM    20(@7),B'01000000'                                 1013
         BC    12,@8F6                                            1013
*             DO;                       /* PROCESS SEGMENT NUMBER
*               BINARY=SEGNO;           /* PREPARE TO CONVERT SEG NO.
         SR    @2,@2                                              1015
         IC    @2,14(0,@5)                                        1015
*               BLNKZERO='1'B;          /* INDIC TO BLANK NONSIG ZEROS
         OI    SWITCHES+1,B'00000001'                             1016
*               RET=ADDR(ARLD11);       /* SET UP RETURN ADDRESS
         LA    @3,ARLD11                                          1017
*               GO TO BITODEC;          /* CONV SEG NO. TO PRINTBLE DEC
         BC    15,BITODEC                                         1018
* ARLD11:       /* BRANCH HERE TO RETURN FROM BITODEC ROUTINE.
*                  FOLLOWING CODE CONTINUES ARLD PROCESSING.
*               DATABUF(51:53)=DECINT(2:4); /* PUT SEG NO. INTO BUFFER
ARLD11   MVC   BUFFERS+175(3),DECINT+1                            1019
*             END;
*         GO TO ARLD7;                  /* REST SAME AS LR PROCESSING
         BC    15,ARLD7                                           1021
*       END;
*   /* TEST IF CESD ITEM IS AN UNRESOLVED EXTERNAL REFERENCE
*   IF CESDTYPE(5:8)='0010'B            /* IF CESD ITEM IS ER
*     THEN                              /* THEN
@8FC     EQU   *                                                  1023
@8FD     TM    10(@5),B'00000010'                                 1023
         BC    12,@8F5                                            1022
         TM    10(@5),B'00001101'                                 1023
         BC    05,@8F4                                            1023
*       DO;                             /* FIND OUT WHICH KIND
*         DATABUF(2:9)=SYMBOL;          /* PUT REF'D TO SYMBOL INTO BUF
         MVC   BUFFERS+126(8),2(@5)                               1025
*         /* TEST IF UNRESOLVED ER IS SIMPLE UNRESOLVED
*         IF IDLENGTH(1)=ZERO(1)        /* IF ID IS 0
*           THEN                        /* THEN
         CLC   15(1,@5),ZERO                                      1026
         BC    07,@8F3                                            1026
*             DATABUF(37:47)=UNRESPRT;  /* PUT '$UNRESOLVED' INTO BUF
         MVC   BUFFERS+161(11),UNRESPRT                           1027
         BC    15,@8F2                                            1028
*           ELSE                        /* ELSE ID IS 6
*             DATABUF(37:47)=NEVCLPRT;  /* PUT '$NEVER-CALL' INTO BUF
@8F3     MVC   BUFFERS+161(11),NEVCLPRT                           1028
*         GO TO ARLD7;                  /* REST SAME AS LR PROCESSING
         BC    15,ARLD7                                           1029
*       END;
*   /* TEST IF CESD ITEM IS A WEAK UNRESOLVED EXTERNAL REFERENCE
*   IF CESDTYPE(5:8)='1010'B            /* IF CESD ITEM IS WX
*     THEN                              /* THEN
@8F4     EQU   *                                                  1031
@8F5     TM    10(@5),B'00001010'                                 1031
         BC    12,@8F1                                            1030
         TM    10(@5),B'00000101'                                 1031
         BC    05,@8F0                                            1031
*       DO;                             /* PROCESS IT
*         DATABUF(2:9)=SYMBOL;          /* PUT REF'D TO SYMBOL INTO BUF
         MVC   BUFFERS+126(8),2(@5)                               1033
*         DATABUF(37:50)=UNREWPRT;      /* PUT '$UNRESOLVED(W)' IN BUF
         MVC   BUFFERS+161(14),UNREWPRT                           1034
*         GO TO ARLD7;                  /* REST SAME AS LR PROCESSING
         BC    15,ARLD7                                           1035
*       END;
*
* /********************************************************************
* /*   THE FOLLOWING SECTION OF CODE PRINTS ALL HEADINGS AND DATA.
* /*   HEADINGS ARE ASSEMBLED IN THEIR BUFFER HERE, DATA IS
* /*   ASSEMBLED IN ITS BUFFER PRIOR TO ENTERING THIS SECTION.  EACH
* /*   TIME THIS CODE IS EXECUTED, IT WILL FIRST PRINT A HEADING,
* /*   IF A SWITCH INDICATES IT IS REQUESTED, THEN A LINE OF DATA.
* /*   THIS SECTION IS ENTERED EACH TIME A LINE IS TO BE PRINTED.
* /********************************************************************
*
* WRITE:
*   SAVERET=RET;                        /* SAVE RETURN ADDRESS
@8F0     EQU   *                                                  1037
@8F1     EQU   *                                                  1037
WRITE    ST    @3,SAVERET                                         1037
*   /* TEST IF SKIP TO NEXT PAGE IS REQUESTED
*   IF LINECT61='1'B                    /* IF LINECT61 SWITCH IS ON
*     THEN                              /* THEN
         TM    SWITCHES,B'00010000'                               1038
         BC    12,@8EF                                            1038
* WRITE1: /* BRANCH HERE WHEN WRITE ROUTINE DISCOVERS THAT SKIP TO
*            NEXT PAGE IS REQUIRED.  FOLLOWING CODE PREPARES TITLE,
*            PAGE NO., AND USER TITLE FOR PRINTING.
*       DO;                             /* PRINT ON NEXT PAGE
*         LINECT61='0'B;                /* TURN LINECT61 SWITCH OFF
WRITE1   NI    SWITCHES,B'11101111'                               1040
*         /* TEST IF NUMERIC CESD OR RLD PROCESSING IS BEING PERFORMED
*         IF NUMCESD='1'B               /* IF NUMCESD SWITCH IS ON
*           THEN                        /* THEN
         TM    SWITCHES+2,B'01000000'                             1041
         BC    12,@8EE                                            1041
*             DO;                       /* PUT PAGE HEADING INTO BUFFER
*               HEADBUF(30:38)=HEADING6(6:14); /* 'NUMERICAL'
         MVC   BUFFERS+30(9),HEADING6+5                           1043
*               HEADBUF(40:67)=HEADING5(1:28); /* 'MAP AND CROSS-
*                                                 REFERENCE LIST'
         MVC   BUFFERS+40(28),HEADING5                            1044
*               /* TEST IF A NUCLEUS IS BEING MAPPED
*               IF NUCMAP='1'B          /* IF NUCMAP SWITCH IS ON
*                 THEN                  /* THEN
         TM    SWITCHES+2,B'00001000'                             1045
         BC    12,@8ED                                            1045
*                   DO;                 /* PUT NUCLEUS HEADING IN BUF
*                     HEADBUF(69:70)=HEADING3(19:20); /* 'OF'
         MVC   BUFFERS+69(2),HEADING3+18                          1047
*                     HEADBUF(72:78)=HEADING7(16:22); /* 'NUCLEUS'
         MVC   BUFFERS+72(7),HEADING7+15                          1048
*                     HEADBUF(80:87)=LMODNAME; /* PUT NUC NAME IN BUF
         L     @7,PARMPTR                                         1049
         MVC   BUFFERS+80(8),36(@7)                               1049
         BC    15,@8EC                                            1051
*                   END;
*                 ELSE                  /* ELSE NUCMAP SWITCH IS OFF
*                   DO;                 /* PUT LOAD MOD HEADING IN BUF
*                     HEADBUF(69:82)=HEADING3(19:32); /* 'OF LOAD
*                                                        MODULE'
@8ED     MVC   BUFFERS+69(14),HEADING3+18                         1052
*                     HEADBUF(84:91)=LMODNAME; /* PUT LMOD NAME IN BUF
         L     @7,PARMPTR                                         1053
         MVC   BUFFERS+84(8),36(@7)                               1053
*                   END;
*             END;
@8EC     EQU   *                                                  1055
*         /* TEST IF ALPHABETIC CESD PROCESSING IS BEING PERFORMED
*         IF ACHD='1'B                  /* IF ACHD SWITCH IS ON
*            × PRHD='1'B                /* OR IF PRHD SWITCH IS ON
*            & NUMCESD='0'B             /* AND IF NUMCESD SWITCH IS OFF
*           THEN                        /* THEN
@8EE     TM    SWITCHES,B'00000010'                               1056
         BC    01,@8EB                                            1056
         TM    SWITCHES+1,B'00100000'                             1056
         BC    12,@8EA                                            1056
         TM    SWITCHES+2,B'01000000'                             1056
         BC    05,@8E9                                            1056
*             DO;                       /* PUT PAGE HEADING INTO BUFFER
*               HEADBUF(41:52)=HEADING6(16:27); /* 'ALPHABETICAL'
@8EB     MVC   BUFFERS+41(12),HEADING6+15                         1058
*               HEADBUF(54:56)=HEADING5(1:3); /* 'MAP'
         MVC   BUFFERS+54(3),HEADING5                             1059
*               /* TEST IF A NUCLEUS IS BEING MAPPED
*               IF NUCMAP='1'B          /* IF NUCMAP SWITCH IS ON
*                 THEN                  /* THEN
         TM    SWITCHES+2,B'00001000'                             1060
         BC    12,@8E8                                            1060
*                   DO;                 /* PUT NUCLEUS HEADING IN BUF
*                     HEADBUF(58:59)=HEADING3(19:20); /* 'OF'
         MVC   BUFFERS+58(2),HEADING3+18                          1062
*                     HEADBUF(61:67)=HEADING7(16:22); /* 'NUCLEUS'
         MVC   BUFFERS+61(7),HEADING7+15                          1063
*                     HEADBUF(69:76)=LMODNAME; /* PUT NUC NAME IN BUF
         L     @7,PARMPTR                                         1064
         MVC   BUFFERS+69(8),36(@7)                               1064
         BC    15,@8E7                                            1066
*                   END;
*                 ELSE                  /* ELSE NUCMAP SWITCH IS OFF
*                   DO;                 /* PUT LOAD MOD HEADING IN BUF
*                     HEADBUF(58:71)=HEADING3(19:32); /* 'OF LOAD
*                                                        MODULE'
@8E8     MVC   BUFFERS+58(14),HEADING3+18                         1067
*                     HEADBUF(73:80)=LMODNAME; /* PUT LMOD NAME IN BUF
         L     @7,PARMPTR                                         1068
         MVC   BUFFERS+73(8),36(@7)                               1068
*                   END;
*             END;
@8E7     EQU   *                                                  1070
*         /* TEST IF ALPHABETIC RLD PROCESSING IS BEING PERFORMED
*         IF ARHD='1'B                  /* IF ARHD SWITCH IS ON
*           THEN                        /* THEN
@8E9     EQU   *                                                  1071
@8EA     TM    SWITCHES+1,B'01000000'                             1071
         BC    12,@8E6                                            1071
*             DO;                       /* PUT PAGE HEADING INTO BUFFER
*               HEADBUF(32:43)=HEADING6(16:27); /* 'ALPHABETICAL'
         MVC   BUFFERS+32(12),HEADING6+15                         1073
*               HEADBUF(45:64)=HEADING5(9:28); /* 'CROSS-REF'NCE LIST'
         MVC   BUFFERS+45(20),HEADING5+8                          1074
*               /* TEST IF A NUCLEUS IS BEING MAPPED
*               IF NUCMAP='1'B          /* IF NUCMAP SWITCH IS ON
*                 THEN                  /* THEN
         TM    SWITCHES+2,B'00001000'                             1075
         BC    12,@8E5                                            1075
*                   DO;                 /* PUT NUCLEUS HEADING IN BUF
*                     HEADBUF(66:67)=HEADING3(19:20); /* 'OF'
         MVC   BUFFERS+66(2),HEADING3+18                          1077
*                     HEADBUF(69:75)=HEADING7(16:22); /* 'NUCLEUS'
         MVC   BUFFERS+69(7),HEADING7+15                          1078
*                     HEADBUF(77:84)=LMODNAME; /* PUT NUC NAME IN BUF
         L     @7,PARMPTR                                         1079
         MVC   BUFFERS+77(8),36(@7)                               1079
         BC    15,@8E4                                            1081
*                   END;
*                 ELSE                  /* ELSE NUCMAP SWITCH IS OFF
*                   DO;                 /* PUT LOAD MOD HEADING IN BUF
*                     HEADBUF(66:79)=HEADING3(19:32); /* 'OF LOAD
*                                                        MODULE'
@8E5     MVC   BUFFERS+66(14),HEADING3+18                         1082
*                     HEADBUF(81:88)=LMODNAME; /* PUT LMOD NAME IN BUF
         L     @7,PARMPTR                                         1083
         MVC   BUFFERS+81(8),36(@7)                               1083
*                   END;
*             END;
@8E4     EQU   *                                                  1085
*         HEADBUF(112:115)=HEADING6(1:4); /* PUT 'PAGE' INTO BUFFER
@8E6     MVC   BUFFERS+112(4),HEADING6                            1086
*         PAGENUM=PAGENUM+1;            /* INCREMENT PAGE NUMBER BY 1
         LA    @F,1                                               1087
         AH    @F,PAGENUM                                         1087
         STH   @F,PAGENUM                                         1087
*         HEADCON=SP1PAGE;              /* CAUSE CARR SKIP TO NEXT PAGE
         MVC   BUFFERS(1),SP1PAGE                                 1088
*         BINARY=PAGENUM;               /* LOAD PAGE NO. INTO REGISTER
         LH    @2,PAGENUM                                         1089
*         BLNKZERO='0'B;                /* DON'T BLANK NONSIG ZEROS
         NI    SWITCHES+1,B'11111110'                             1090
*         RET=ADDR(WRITE2);             /* SET UP RETURN ADDRESS
         LA    @3,WRITE2                                          1091
*         GO TO BITODEC;                /* CONVERT TO PRINTABLE DECIMAL
         BC    15,BITODEC                                         1092
* WRITE2: /* BRANCH HERE TO RETURN FROM BITODEC ROUTINE.
*            FOLLOWING CODE PRODUCES PAGE TITLE AND NO.
*         HEADBUF(117:120)=DECINT(1:4); /* PUT PAGE NO. INTO BUFFER
WRITE2   MVC   BUFFERS+117(4),DECINT                              1093
*         OUTAREAD=ADDR(HEADPRNT);      /* GET ADDR OF BUFFER FOR PUT
         LA    @1,BUFFERS                                         1094
*         BLNKHEAD='1'B;                /* INDIC TO BLANK IT AFTER PRNT
         OI    SWITCHES,B'01000000'                               1095
*         RET=ADDR(WRITE3);             /* SET UP RETURN ADDRESS
         LA    @3,WRITE3                                          1096
*         GO TO WRITE16;                /* GO TO PRINT PAGE NO.& TITLE
         BC    15,WRITE16                                         1097
* WRITE3: /* BRANCH HERE TO RETURN FROM PRINTING PAGE TITLE AND NO.
*            FOLLOWING CODE PRODUCES USER TITLE.
*         LINECNT=5;                    /* SET LINE COUNT TO 5
WRITE3   LA    @F,5                                               1098
         ST    @F,LINECNT                                         1098
*         OUTAREAD=TITLEAD;             /* ADDR OF USER TITLE FOR PUT
         L     @7,PARMPTR                                         1099
         L     @1,8(0,@7)                                         1099
*         RET=ADDR(WRITE4);             /* SET UP RETURN ADDRESS
         LA    @3,WRITE4                                          1100
*         GO TO WRITE16;                /* GO TO PRINT TITLE
         BC    15,WRITE16                                         1101
*       END;
* WRITE4: /* BRANCH HERE TO RETURN FROM PRINTING USER TITLE.
*            FOLLOWING CODE PRODUCES A LINE OF DASHES IF REQUESTED.
*   /* TEST IF DASHES BETWEEN CESD AND RLD PRINTOUT ARE REQUESTED
*   IF DASHLINE='1'B                    /* IF DASHLINE SWITCH IS ON
*     THEN                              /* THEN
@8EF     EQU   *                                                  1103
WRITE4   TM    SWITCHES+1,B'00001000'                             1103
         BC    12,@8E3                                            1103
*       DO;                             /* PROCESS DASH PRINTING
*         /* TEST IF DASHES SHOULD GO ON THIS OR NEXT PAGE
*         IF LINECNT>56                 /* IF NO ROOM ON THIS PAGE
*           THEN                        /* THEN
         LA    @F,56                                              1105
         C     @F,LINECNT                                         1105
*             GO TO WRITE1;             /* GO TO SKIP TO NEXT PAGE
         BC    04,WRITE1                                          1106
*         DASHLINE='0'B;                /* TURN DASHES SWITCH OFF
         NI    SWITCHES+1,B'11110111'                             1107
*         LINECNT=LINECNT+3;            /* INCREMENT LINE COUNT BY 3
         LA    @F,3                                               1108
         A     @F,LINECNT                                         1108
         ST    @F,LINECNT                                         1108
*         HEADCON=SP3LINES;             /* CAUSE CARR TO SKIP 3 LINES
         MVC   BUFFERS(1),SP3LINES                                1109
*         HEADBUF(1)=DASH;              /* PUT '-' IN FIRST BYTE
         MVC   BUFFERS+1(1),DASH                                  1110
*         HEADBUF(2:120)=HEADBUF(1:119); /* FILL REMAINDER WITH DASHES
         MVC   BUFFERS+2(119),BUFFERS+1                           1111
*         OUTAREAD=ADDR(HEADPRNT);      /* GET ADDR OF BUFFER FOR PUT
         LA    @1,BUFFERS                                         1112
*         BLNKHEAD='1'B;                /* INDIC TO BLANK IT AFTER PRNT
         OI    SWITCHES,B'01000000'                               1113
*         RET=ADDR(WRITE5);             /* SET UP RETURN ADDRESS
         LA    @3,WRITE5                                          1114
*         GO TO WRITE16;                /* GO TO PRINT DASHES
         BC    15,WRITE16                                         1115
* WRITE5: /* BRANCH HERE TO RETURN FROM PRINTING A LINE OF DASHES.
*            FOLLOWING CODE PRODUCES 2ND LINE OF DASHES IF REQUESTED.
*         /* TEST IF DOUBLE LINE OF DASHES IS TO BE PRINTED
*         IF DUBLDASH='1'B              /* IF DUBLDASH SWITCH IS ON
*           THEN                        /* THEN
WRITE5   TM    SWITCHES+2,B'00010000'                             1116
         BC    12,@8E2                                            1116
*             DO;                       /* PREPARE TO PRINT LINE
*               DUBLDASH='0'B;          /* TURN DUBLDASH SWITCH OFF
         NI    SWITCHES+2,B'11101111'                             1118
*               LINECNT=LINECNT+1;      /* INCREMENT LINE COUNT BY 1
         LA    @F,1                                               1119
         A     @F,LINECNT                                         1119
         ST    @F,LINECNT                                         1119
*               HEADCON=SP1LINE;        /* CAUSE CARR TO SKIP 1 LINE
         MVC   BUFFERS(1),SP1LINE                                 1120
*               HEADBUF(1)=DASH;        /* PUT '-' IN FIRST BYTE
         MVC   BUFFERS+1(1),DASH                                  1121
*               HEADBUF(2:120)=HEADBUF(1:119); /* FILL REMAINDER OF BUF
         MVC   BUFFERS+2(119),BUFFERS+1                           1122
*               /* TEST IF SEG NO. IN LINE OF DASHES SHOULD BE PRINTED
*               IF NCHD='1'B            /* IF NCHD SWITCH IS ON
*                  × NCSHD='1'B         /* OR NCSHD SWITCH IS ON
*                  & OVERLAY='1'B       /* AND OVERLAY SWITCH IS ON
*                 THEN                  /* THEN
         TM    SWITCHES,B'00001000'                               1123
         BC    01,@8E1                                            1123
         TM    SWITCHES,B'00000100'                               1123
         BC    12,@8E0                                            1123
         L     @7,PARMPTR                                         1123
         TM    20(@7),B'01000000'                                 1123
         BC    12,@8DF                                            1123
*                   DO;                 /* PRINT SEGMENT NUMBER
*                     HEADBUF(1:3)=HEADING7(4:6); /* PUT 'SEG' INTO BUF
@8E1     MVC   BUFFERS+1(3),HEADING7+3                            1125
*                     HEADBUF(4)=PERIOD; /* PUT '.' INTO BUFFER
         MVC   BUFFERS+4(1),PERIOD                                1126
*                     HEADBUF(5:9)=DATABUF(56:60); /* PUT SEG NO. IN
         MVC   BUFFERS+5(5),BUFFERS+180                           1127
*                     /* TEST FOR ONLY ONE SIGNIFICANT DIGIT
*                        ( IN ORDER TO LEFT ALIGN THE SEGMENT NO. )
*                     IF HEADBUF(7)=BLANK /* IF SECOND DIGIT BLANK
*                       THEN            /* THEN
         CLC   BUFFERS+7(1),BLANK                                 1128
         BC    07,@8DE                                            1128
*                         HEADBUF(6:9)=HEADBUF(8:11); /* MOVE 2 PLACES
         MVC   BUFFERS+6(4),BUFFERS+8                             1129
         BC    15,@8DD                                            1130
*                       ELSE            /* ELSE MORE THAN 1 SIG DIGIT
*                         /* TEST FOR TWO SIGNIFICANT DIGITS
*                         IF HEADBUF(6)=BLANK /* IF FIRST DIGIT BLANK
*                           THEN        /* THEN
@8DE     CLC   BUFFERS+6(1),BLANK                                 1130
         BC    07,@8DC                                            1130
*                             HEADBUF(6:9)=HEADBUF(7:10); /* MOVE 1 PLC
         MVC   BUFFERS+6(4),BUFFERS+7                             1131
*                   END;
@8DC     EQU   *                                                  1132
@8DD     EQU   *                                                  1132
*               OUTAREAD=ADDR(HEADPRNT); /* GET ADDR OF BUFFER FOR PUT
@8DF     EQU   *                                                  1133
@8E0     LA    @1,BUFFERS                                         1133
*               BLNKHEAD='1'B;          /* INDIC TO BLANK IT AFTER PRNT
         OI    SWITCHES,B'01000000'                               1134
*               RET=ADDR(WRITE6);       /* SET UP RETURN ADDRESS
         LA    @3,WRITE6                                          1135
*               GO TO WRITE16;          /* GO TO PRINT DASHES
         BC    15,WRITE16                                         1136
*             END;
*     END;
@8E2     EQU   *                                                  1138
* WRITE6: /* BRANCH HERE TO RETURN FROM PRINTING SECOND LINE OF DASHES.
*            FOLLOWING CODE PRODUCES NUMERIC CESD HEADING IF REQUESTED.
*   /* TEST IF NUMERIC CESD HEADING IS TO BE PRINTED
*   IF NCHD='1'B                        /* IF NUM CESD HD SWITCH IS ON
*     THEN                              /* THEN
@8E3     EQU   *                                                  1139
WRITE6   TM    SWITCHES,B'00001000'                               1139
         BC    12,@8DB                                            1139
*       DO;                             /* PROCESS THIS HEADING
*         /* TEST IF HEADING SHOULD GO ON THIS OR NEXT PAGE
*         IF LINECNT>57                 /* IF NO ROOM ON THIS PAGE
*           THEN                        /* THEN
         LA    @F,57                                              1141
         C     @F,LINECNT                                         1141
*             GO TO WRITE1;             /* GO TO SKIP TO NEXT PAGE
         BC    04,WRITE1                                          1142
*         NCHD='0'B;                    /* TURN NUM CESD HD SWITCH OFF
         NI    SWITCHES,B'11110111'                               1143
*         LINECNT=LINECNT+3;            /* INCREMENT LINE COUNT BY 3
         LA    @F,3                                               1144
         A     @F,LINECNT                                         1144
         ST    @F,LINECNT                                         1144
*         HEADCON=SP3LINES;             /* CAUSE CARR TO SKIP 3 LINES
         MVC   BUFFERS(1),SP3LINES                                1145
*         HEADBUF(18:32)=HEADING1(1:15); /* PUT 'CONTROL SECTION' IN BF
         MVC   BUFFERS+18(15),HEADING1                            1146
*         HEADBUF(73:77)=HEADING1(17:21); /* PUT 'ENTRY' INTO BUFFER
         MVC   BUFFERS+73(5),HEADING1+16                          1147
*         OUTAREAD=ADDR(HEADPRNT);      /* GET ADDR OF BUFFER FOR PUT
         LA    @1,BUFFERS                                         1148
*         BLNKHEAD='1'B;                /* INDIC TO BLANK IT AFTER PRNT
         OI    SWITCHES,B'01000000'                               1149
*         RET=ADDR(WRITE7);             /* SET UP RETURN ADDRESS
         LA    @3,WRITE7                                          1150
*         GO TO WRITE16;                /* GO TO PRINT NUM CESD HEADING
         BC    15,WRITE16                                         1151
* WRITE7: /* BRANCH HERE TO RETURN FROM PRINTING NUMERIC CESD HEADING.
*            FOLLOWING CODE PRODUCES NUMERIC CESD SUBHEADING.
*         LINECNT=LINECNT+1;            /* INCREMENT LINE COUNT BY 1
WRITE7   LA    @F,1                                               1152
         A     @F,LINECNT                                         1152
         ST    @F,LINECNT                                         1152
*         HEADCON=SP1LINE;              /* CAUSE CARR TO SKIP 1 LINE
         MVC   BUFFERS(1),SP1LINE                                 1153
*         GO TO WRITE8;                 /* BYPASS NCSHD & LINECNT TESTS
         BC    15,WRITE8                                          1154
*       END;
*   /* TEST IF NUMERIC CESD SUBHEADING IS REQUESTED
*   IF NCSHD='1'B                       /* IF NUM CESD SUBHD IS ON
*     THEN                              /* THEN
@8DB     TM    SWITCHES,B'00000100'                               1156
         BC    12,@8DA                                            1156
*       DO;                             /* PROCESS THIS HEADING
*         /* TEST IF HEADING SHOULD GO ON THIS OR NEXT PAGE
*         IF LINECNT>58                 /* IF NO ROOM ON THIS PAGE
*           THEN                        /* THEN
         LA    @F,58                                              1158
         C     @F,LINECNT                                         1158
*             GO TO WRITE1;             /* GO TO SKIP TO NEXT PAGE
         BC    04,WRITE1                                          1159
*         LINECNT=LINECNT+2;            /* INCREMENT LINE COUNT BY 2
         LA    @F,2                                               1160
         A     @F,LINECNT                                         1160
         ST    @F,LINECNT                                         1160
*         HEADCON=SP2LINES;             /* CAUSE CARR TO SKIP 2 LINES
         MVC   BUFFERS(1),SP2LINES                                1161
* WRITE8: /* BRANCH HERE TO BYPASS NCSHD AND LINECNT TESTS,
*            BECAUSE EVERY TIME NCHD IS PRINTED NCSHD IS ALSO
*            PRINTED AND THESE TESTS MUST NOT BE MADE.
*            FOLLOWING CODE PRODUCES NUMERIC CESD SUBHEADING.
*         NCSHD='0'B;                   /* TURN NUM CESD SUBHEAD OFF
WRITE8   NI    SWITCHES,B'11111011'                               1162
*         SP2='1'B;                     /* SET UP DATA BUF CONTROL CHAR
         OI    SWITCHES+2,B'00100000'                             1163
*         HEADBUF(19:26)=HEADING2(22:29); /* PUT 'LMOD LOC' INTO BUF
         MVC   BUFFERS+19(8),HEADING2+21                          1164
*         HEADBUF(32:35)=HEADING1(23:26); /* PUT 'NAME' INTO BUFFER
         MVC   BUFFERS+32(4),HEADING1+22                          1165
*         HEADBUF(42:53)=HEADING1(28:39); /* PUT 'LENGTH TYPE' INTO BUF
         MVC   BUFFERS+42(12),HEADING1+27                         1166
*         /* TEST IF INPUT LOAD MODULE IS IN OVERLAY STRUCTURE
*         IF OVERLAY='1'B               /* IF OVERLAY SWITCH IS ON
*           THEN                        /* THEN
         L     @7,PARMPTR                                         1167
         TM    20(@7),B'01000000'                                 1167
         BC    12,@8D9                                            1167
*             HEADBUF(56:62)=HEADING7(4:10); /* PUT 'SEGMENT' INTO BUF
         MVC   BUFFERS+56(7),HEADING7+3                           1168
*         HEADBUF(74:92)=HEADING2(22:40); /* PUT'LMOD LOC
*                                            CSECT LOC' INTO BUFFER
@8D9     MVC   BUFFERS+74(19),HEADING2+21                         1169
*         /* TEST IF A NUCLEUS IS BEING MAPPED
*         IF NUCMAP='1'B                /* IF NUCMAP SWITCH IS ON
*           THEN                        /* THEN
         TM    SWITCHES+2,B'00001000'                             1170
         BC    12,@8D8                                            1170
*             DO;                       /* PUT FOLLOWING INTO BUFFER
*               HEADBUF(19:22)=HEADING7(15:18); /* PUT ' NUC' INTO BUF
         MVC   BUFFERS+19(4),HEADING7+14                          1172
*               HEADBUF(74:77)=HEADING7(15:18); /* PUT ' NUC' INTO BUF
         MVC   BUFFERS+74(4),HEADING7+14                          1173
*             END;
*         HEADBUF(99:102)=HEADING1(23:26); /* PUT 'NAME' INTO BUFFER
@8D8     MVC   BUFFERS+99(4),HEADING1+22                          1175
*         OUTAREAD=ADDR(HEADPRNT);      /* GET ADDR OF BUFFER FOR PUT
         LA    @1,BUFFERS                                         1176
*         BLNKHEAD='1'B;                /* INDIC TO BLANK IT AFTER PRNT
         OI    SWITCHES,B'01000000'                               1177
*         RET=ADDR(WRITE9);             /* SET UP RETURN ADDRESS
         LA    @3,WRITE9                                          1178
*         GO TO WRITE16;                /* GO TO PRINT NUM CESD SUBHD
         BC    15,WRITE16                                         1179
* WRITE9: /* BRANCH HERE TO RETURN FROM PRINTING NUMERIC CESD
*            SUBHEADING.  FOLLOWING CODE BRANCHES TO CHECK IF LINE
*            OF DATA IS TO BE PRINTED, BECAUSE IF NCSHD IS PRINTED,
*            NONE OF THE FOLLOWING HEADINGS CAN BE.
*         GO TO WRITE15;                /* GO TO PRINT LINE OF DATA
*       END;
*   /* TEST IF ALPHABETIC CESD HEADING IS REQUESTED
*   IF ACHD='1'B                        /* IF ALPHA CESD HEAD SWITCH ON
*     THEN                              /* THEN
@8DA     TM    SWITCHES,B'00000010'                               1182
         BC    12,@8D7                                            1182
*       DO;                             /* PROCESS THIS HEADING
*         /* TEST IF HEADING SHOULD GO ON THIS OR NEXT PAGE
*         IF LINECNT>57                 /* IF NO ROOM ON THIS PAGE
*           THEN                        /* THEN
         LA    @F,57                                              1184
         C     @F,LINECNT                                         1184
*             GO TO WRITE1;             /* GO TO SKIP TO NEXT PAGE
         BC    04,WRITE1                                          1185
*         ACHD='0'B;                    /* TURN ALPHA CESD HEAD OFF
         NI    SWITCHES,B'11111101'                               1186
*         LINECNT=LINECNT+3;            /* INCREMENT LINE COUNT BY 3
         LA    @F,3                                               1187
         A     @F,LINECNT                                         1187
         ST    @F,LINECNT                                         1187
*         HEADCON=SP3LINES;             /* CAUSE CARR TO SKIP 3 LINES
         MVC   BUFFERS(1),SP3LINES                                1188
*         HEADBUF(12:26)=HEADING1(1:15); /* PUT 'CONTROL SECTION' IN BF
         MVC   BUFFERS+12(15),HEADING1                            1189
*         HEADBUF(67:71)=HEADING1(17:21); /* PUT 'ENTRY' INTO BUFFER
         MVC   BUFFERS+67(5),HEADING1+16                          1190
*         OUTAREAD=ADDR(HEADPRNT);      /* GET ADDR OF BUFFER FOR PUT
         LA    @1,BUFFERS                                         1191
*         BLNKHEAD='1'B;                /* INDIC TO BLANK IT AFTER PRNT
         OI    SWITCHES,B'01000000'                               1192
*         RET=ADDR(WRITE10);            /* SET UP RETURN ADDRESS
         LA    @3,WRITE10                                         1193
*         GO TO WRITE16;                /* GO TO PRINT ALPHA CESD HEAD
         BC    15,WRITE16                                         1194
* WRITE10: /* BRANCH HERE TO RETURN FROM PRINTING ALPHABETIC CESD
*             HEADING.  FOLLOWING CODE PRODUCES ALPHABETIC CESD
*             SUBHEADING.
*         LINECNT=LINECNT+1;            /* INCREMENT LINE COUNT BY 1
WRITE10  LA    @F,1                                               1195
         A     @F,LINECNT                                         1195
         ST    @F,LINECNT                                         1195
*         HEADCON=SP1LINE;              /* CAUSE CARR TO SKIP 1 LINE
         MVC   BUFFERS(1),SP1LINE                                 1196
*         GO TO WRITE11;                /* BYPASS ACSHD & LINECNT TESTS
         BC    15,WRITE11                                         1197
*       END;
*   /* TEST IF ALPHABETIC CESD SUBHEADING IS TO BE PRINTED
*   IF ACSHD='1'B                       /* IF ALPHA CESD SUBHEAD IS ON
*     THEN                              /* THEN
@8D7     TM    SWITCHES,B'00000001'                               1199
         BC    12,@8D6                                            1199
*       DO;                             /* PROCESS THIS HEADING
*         /* TEST IF HEADING SHOULD GO ON THIS OR NEXT PAGE
*         IF LINECNT>58                 /* IF NO ROOM ON THIS PAGE
*           THEN                        /* THEN
         LA    @F,58                                              1201
         C     @F,LINECNT                                         1201
*             GO TO WRITE1;             /* GO TO SKIP TO NEXT PAGE
         BC    04,WRITE1                                          1202
*         LINECNT=LINECNT+2;            /* INCREMENT LINE COUNT BY 2
         LA    @F,2                                               1203
         A     @F,LINECNT                                         1203
         ST    @F,LINECNT                                         1203
*         HEADCON=SP2LINES;             /* CAUSE CARR TO SKIP 2 LINES
         MVC   BUFFERS(1),SP2LINES                                1204
* WRITE11: /* BRANCH HERE TO BYPASS ACSHD AND LINECNT TESTS, BECAUSE
*             EVERY TIME ACHD IS PRINTED ACSHD IS ALSO PRINTED AND
*             THESE TESTS MUST NOT BE MADE.  FOLLOWING CODE PRODUCES
*             ALPHABETIC CESD SUBHEADING.
*         ACSHD='0'B;                   /* TURN ALPHA CESD SUBHEAD OFF
WRITE11  NI    SWITCHES,B'11111110'                               1205
*         SP2='1'B;                     /* SET UP DATA BUF CONTROL CHAR
         OI    SWITCHES+2,B'00100000'                             1206
*         HEADBUF(16:19)=HEADING1(23:26); /* PUT 'NAME' INTO BUF
         MVC   BUFFERS+16(4),HEADING1+22                          1207
*         HEADBUF(25:32)=HEADING2(22:29); /* PUT 'LMOD LOC' INTO BUFFER
         MVC   BUFFERS+25(8),HEADING2+21                          1208
*         HEADBUF(36:47)=HEADING1(28:39); /* PUT 'LENGTH TYPE' INTO BUF
         MVC   BUFFERS+36(12),HEADING1+27                         1209
*         /* TEST IF INPUT LOAD MODULE IS IN OVERLAY STRUCTURE
*         IF OVERLAY='1'B               /* IF OVERLAY SWITCH IS ON
*           THEN                        /* THEN
         L     @7,PARMPTR                                         1210
         TM    20(@7),B'01000000'                                 1210
         BC    12,@8D5                                            1210
*             HEADBUF(50:56)=HEADING7(4:10); /* PUT 'SEGMENT' INTO BUF
         MVC   BUFFERS+50(7),HEADING7+3                           1211
*         HEADBUF(70:73)=HEADING1(23:26); /* PUT 'NAME' INTO BUFFER
@8D5     MVC   BUFFERS+70(4),HEADING1+22                          1212
*         HEADBUF(78:96)=HEADING2(22:40); /* PUT 'LMOD LOC
*                                            CSECT LOC' INTO BUFFER
         MVC   BUFFERS+78(19),HEADING2+21                         1213
*         /* TEST IF A NUCLEUS IS BEING MAPPED
*         IF NUCMAP='1'B                /* IF NUCMAP SWITCH IS ON
*           THEN                        /* THEN
         TM    SWITCHES+2,B'00001000'                             1214
         BC    12,@8D4                                            1214
*             DO;                       /* PUT FOLLOWING INTO BUFFER
*               HEADBUF(25:28)=HEADING7(15:18); /* PUT ' NUC' INTO BUF
         MVC   BUFFERS+25(4),HEADING7+14                          1216
*               HEADBUF(78:81)=HEADING7(15:18); /*'PUT ' NUC' INTO BUF
         MVC   BUFFERS+78(4),HEADING7+14                          1217
*             END;
*         HEADBUF(99:103)=HEADING2(32:36); /* PUT 'CSECT' INTO BUFFER
@8D4     MVC   BUFFERS+99(5),HEADING2+31                          1219
*         HEADBUF(105:108)=HEADING1(23:26); /* PUT 'NAME' INTO BUFFER
         MVC   BUFFERS+105(4),HEADING1+22                         1220
*         OUTAREAD=ADDR(HEADPRNT);      /* GET ADDR OF BUFFER FOR PUT
         LA    @1,BUFFERS                                         1221
*         BLNKHEAD='1'B;                /* INDIC TO BLANK IT AFTER PRNT
         OI    SWITCHES,B'01000000'                               1222
*         RET=ADDR(WRITE12);            /* SET UP RETURN ADDRESS
         LA    @3,WRITE12                                         1223
*         GO TO WRITE16;                /* GO TO PRINT ALPHA CESD SUBHD
         BC    15,WRITE16                                         1224
* WRITE12: /* BRANCH HERE TO RETURN FROM PRINTING ALPHABETIC CESD
*             SUBHEADING.  FOLLOWING CODE BRANCHES TO PRINT A LINE
*             OF DATA, BECAUSE IF ACSHD IS PRINTED NONE OF THE
*             FOLLOWING HEADINGS CAN BE PRINTED.
*         GO TO WRITE15;                /* GO TO PRINT LINE OF DATA
*       END;
*   /* TEST IF NUMERIC RLD HEADING IS TO BE PRINTED
*   IF NRHD='1'B                        /* IF NUM RLD HEAD SWITCH IS ON
*     THEN                              /* THEN
@8D6     TM    SWITCHES+1,B'10000000'                             1227
         BC    12,@8D3                                            1227
*       DO;                             /* PROCESS THIS HEADING
*         /* TEST IF HEADING SHOULD GO ON THIS OR NEXT PAGE
*         IF LINECNT>58                 /* IF NO ROOM ON THIS PAGE
*           THEN                        /* THEN
         LA    @F,58                                              1229
         C     @F,LINECNT                                         1229
*             GO TO WRITE1;             /* GO TO SKIP TO NEXT PAGE
         BC    04,WRITE1                                          1230
*         NRHD='0'B;                    /* TURN NUM RLD HEAD SWITCH OFF
         NI    SWITCHES+1,B'01111111'                             1231
*         LINECNT=LINECNT+3;            /* INCREMENT LINE COUNT BY 3
         LA    @F,3                                               1232
         A     @F,LINECNT                                         1232
         ST    @F,LINECNT                                         1232
*         HEADCON=SP3LINES;             /* CAUSE CARR TO SKIP 3 LINES
         MVC   BUFFERS(1),SP3LINES                                1233
*         SP2='1'B;                     /* SET UP DATA BUF CONTROL CHAR
         OI    SWITCHES+2,B'00100000'                             1234
*         HEADBUF(7:37)=HEADING2(22:52); /* PUT 'LMOD LOC  CSECT LOC
*                                           IN CSECT' INTO BUFFER
         MVC   BUFFERS+7(31),HEADING2+21                          1235
*         /* TEST IF INPUT LOAD MODULE IS IN OVERLAY STRUCTURE
*         IF OVERLAY='1'B               /* IF OVERLAY SWITCH IS ON
*           THEN                        /* THEN
         L     @7,PARMPTR                                         1236
         TM    20(@7),B'01000000'                                 1236
         BC    12,@8D2                                            1236
*             HEADBUF(40:49)=HEADING7(1:10); /*PUT 'IN SEGMENT' IN BUF
         MVC   BUFFERS+40(10),HEADING7                            1237
*         HEADBUF(52:67)=HEADING2(1:16); /* 'REFERS TO SYMBOL'
@8D2     MVC   BUFFERS+52(16),HEADING2                            1238
*         HEADBUF(70:103)=HEADING2(19:52); /* PUT 'AT LMOD LOC CSECT LO
*                                             IN CSECT' INTO BUFFER
         MVC   BUFFERS+70(34),HEADING2+18                         1239
*         /* TEST IF A NUCLEUS IS BEING MAPPED
*         IF NUCMAP='1'B                /* IF NUCMAP SWITCH IS ON
*           THEN                        /* THEN
         TM    SWITCHES+2,B'00001000'                             1240
         BC    12,@8D1                                            1240
*             DO;                       /* PUT FOLLOWING INTO BUFFER
*               HEADBUF(7:10)=HEADING7(15:18); /* PUT ' NUC' INTO BUF
         MVC   BUFFERS+7(4),HEADING7+14                           1242
*               HEADBUF(73:75)=HEADING7(16:18); /* PUT 'NUC' INTO BUF
         MVC   BUFFERS+73(3),HEADING7+15                          1243
*               HEADBUF(76:80)=HEADING2(26:30); /* PUT ' LOC ' INTO BUF
         MVC   BUFFERS+76(5),HEADING2+25                          1244
*             END;
*         /* TEST IF INPUT LOAD MODULE IS IN OVERLAY
*         IF OVERLAY='1'B               /* IF OVERLAY SWITCH IS ON
*           THEN                        /* THEN
@8D1     L     @7,PARMPTR                                         1246
         TM    20(@7),B'01000000'                                 1246
         BC    12,@8D0                                            1246
*             HEADBUF(106:115)=HEADING7(1:10); /* PUT 'IN SEGMENT IN'
         MVC   BUFFERS+106(10),HEADING7                           1247
*         OUTAREAD=ADDR(HEADPRNT);      /* GET ADDR OF BUFFER FOR PUT
@8D0     LA    @1,BUFFERS                                         1248
*         BLNKHEAD='1'B;                /* INDIC TO BLANK IT AFTER PRNT
         OI    SWITCHES,B'01000000'                               1249
*         RET=ADDR(WRITE15);            /* SET UP RETURN ADDRESS
         LA    @3,WRITE15                                         1250
*         GO TO WRITE16;                /* GO TO PRINT NUM RLD HEADING
         BC    15,WRITE16                                         1251
*       END;
*   /* TEST IF ALPHABETIC RLD HEADING IS TO BE PRINTED
*   IF ARHD='1'B                        /* IF ALPHA RLD HEAD SWITCH ON
*     THEN                              /* THEN
@8D3     TM    SWITCHES+1,B'01000000'                             1253
         BC    12,@8CF                                            1253
*       DO;                             /* PROCESS THIS HEADING
*         /* TEST IF HEADING SHOULD GO ON THIS OR NEXT PAGE
*         IF LINECNT>58                 /* IF NO ROOM ON THIS PAGE
*           THEN                        /* THEN
         LA    @F,58                                              1255
         C     @F,LINECNT                                         1255
*             GO TO WRITE1;             /* GO TO SKIP TO NEXT PAGE
         BC    04,WRITE1                                          1256
*         ARHD='0'B;                    /* TURN ALPHA RLD HD SWITCH OFF
         NI    SWITCHES+1,B'10111111'                             1257
*         LINECNT=LINECNT+3;            /* INCREMENT LINE COUNT BY 3
         LA    @F,3                                               1258
         A     @F,LINECNT                                         1258
         ST    @F,LINECNT                                         1258
*         HEADCON=SP3LINES;             /* CAUSE CARR TO SKIP 3 LINES
         MVC   BUFFERS(1),SP3LINES                                1259
*         SP2='1'B;                     /* SET UP DATA BUF CONTROL CHAR
         OI    SWITCHES+2,B'00100000'                             1260
*         HEADBUF(3:8)=HEADING2(11:16); /* PUT 'SYMBOL' INTO BUFFER
         MVC   BUFFERS+3(6),HEADING2+10                           1261
*         HEADBUF(12:45)=HEADING2(19:52); /* PUT 'AT LMOD LOC CSECT LOC
*                                            IN CSECT' INTO BUFFER
         MVC   BUFFERS+12(34),HEADING2+18                         1262
*         /* TEST IF INPUT LOAD MODULE IS IN OVERLAY STRUCTURE
*         IF OVERLAY='1'B               /* IF OVERLAY SWITCH IS ON
*           THEN                        /* THEN
         L     @7,PARMPTR                                         1263
         TM    20(@7),B'01000000'                                 1263
         BC    12,@8CE                                            1263
*             HEADBUF(48:57)=HEADING7(1:10); /*PUT 'IN SEGMENT' IN BUF
         MVC   BUFFERS+48(10),HEADING7                            1264
*         HEADBUF(60:76)=HEADING3(1:17); /* PUT 'IS REFERRED TO BY' IN
@8CE     MVC   BUFFERS+60(17),HEADING3                            1265
*         HEADBUF(78:108)=HEADING2(22:52); /* PUT 'LMOD LOC  CSECT LOC
*                                             IN CSECT' INTO BUFFER
         MVC   BUFFERS+78(31),HEADING2+21                         1266
*         /* TEST IF A NUCLEUS IS BEING MAPPED
*         IF NUCMAP='1'B                /* IF NUCMAP SWITCH IS ON
*           THEN                        /* THEN
         TM    SWITCHES+2,B'00001000'                             1267
         BC    12,@8CD                                            1267
*             DO;                       /* PUT FOLLOWING INTO BUFFER
*               HEADBUF(15:17)=HEADING7(16:18); /* PUT 'NUC' INTO BUF
         MVC   BUFFERS+15(3),HEADING7+15                          1269
*               HEADBUF(18:22)=HEADING2(26:30); /* PUT ' LOC ' INTO BUF
         MVC   BUFFERS+18(5),HEADING2+25                          1270
*               HEADBUF(78:80)=HEADING7(16:18); /* PUT 'NUC' INTO BUF
         MVC   BUFFERS+78(3),HEADING7+15                          1271
*               HEADBUF(81:85)=HEADING2(26:30); /* PUT ' LOC ' INTO BUF
         MVC   BUFFERS+81(5),HEADING2+25                          1272
*             END;
*         /* TEST IF INPUT LOAD MODULE IS IN OVERLAY STRUCTURE
*         IF OVERLAY='1'B               /* IF OVERLAY SWITCH IS ON
*           THEN                        /* THEN
@8CD     L     @7,PARMPTR                                         1274
         TM    20(@7),B'01000000'                                 1274
         BC    12,@8CC                                            1274
*             HEADBUF(111:120)=HEADING7(1:10); /* PUT 'IN SEGMENT' IN
         MVC   BUFFERS+111(10),HEADING7                           1275
*         OUTAREAD=ADDR(HEADPRNT);      /* GET ADDR OF BUFFER FOR PUT
@8CC     LA    @1,BUFFERS                                         1276
*         BLNKHEAD='1'B;                /* INDIC TO BLANK IT AFTER PRNT
         OI    SWITCHES,B'01000000'                               1277
*         RET=ADDR(WRITE15);            /* SET UP RETURN ADDRESS
         LA    @3,WRITE15                                         1278
*         GO TO WRITE16;                /* GO TO PRINT ALPHA RLD HEADNG
         BC    15,WRITE16                                         1279
*       END;
*   /* TEST IF PSEUDO REGISTER HEADING IS TO BE PRINTED
*   IF PRHD='1'B                        /* IF PSEUDO REG HEAD SWITCH ON
*     THEN                              /* THEN
@8CF     TM    SWITCHES+1,B'00100000'                             1281
         BC    12,@8CB                                            1281
*       DO;                             /* PROCESS THIS HEADING
*         /* TEST IF HEADING SHOULD GO ON THIS OR NEXT PAGE
*         IF LINECNT>57                 /* IF NO ROOM ON THIS PAGE
*           THEN                        /* THEN
         LA    @F,57                                              1283
         C     @F,LINECNT                                         1283
*             GO TO WRITE1;             /* GO TO SKIP TO NEXT PAGE
         BC    04,WRITE1                                          1284
*         PRHD='0'B;                    /* TURN PSEUDO REG HEADING OFF
         NI    SWITCHES+1,B'11011111'                             1285
*         LINECNT=LINECNT+3;            /* INCREMENT LINE COUNT BY 3
         LA    @F,3                                               1286
         A     @F,LINECNT                                         1286
         ST    @F,LINECNT                                         1286
*         HEADCON=SP3LINES;             /* CAUSE CARR TO SKIP 3 LINES
         MVC   BUFFERS(1),SP3LINES                                1287
*         /* TEST IF NUMERIC CESD PROCESSING IS BEING PERFORMED
*         IF NUMCESD='1'B               /* IF NUMCESD SWITCH IS ON
*           THEN                        /* THEN
         TM    SWITCHES+2,B'01000000'                             1288
         BC    12,@8CA                                            1288
*             HEADBUF(18:32)=HEADING4(8:22); /* 'PSEUDO REGISTER' IN BF
         MVC   BUFFERS+18(15),HEADING4+7                          1289
         BC    15,@8C9                                            1290
*           ELSE                        /* ELSE ALPH CESD PROCESSING ON
*             HEADBUF(12:26)=HEADING4(8:22); /* PUT IT IN DIFF SPOT
@8CA     MVC   BUFFERS+12(15),HEADING4+7                          1290
*         OUTAREAD=ADDR(HEADPRNT);      /* GET ADDR OF BUFFER FOR PUT
@8C9     LA    @1,BUFFERS                                         1291
*         BLNKHEAD='1'B;                /* INDIC TO BLANK IT AFTER PRNT
         OI    SWITCHES,B'01000000'                               1292
*         RET=ADDR(WRITE13);            /* SET UP RETURN ADDRESS
         LA    @3,WRITE13                                         1293
*         GO TO WRITE16;                /* GO TO PRINT PSEUDO REG HEAD
         BC    15,WRITE16                                         1294
* WRITE13: /* BRANCH HERE TO RETURN FROM PRINTING PSEUDO REGISTER
*             HEADING.  FOLLOWING CODE PRODUCES ALPHABETIC OR
*             NUMERIC PSEUDO REGISTER SUBHEADING.
*         LINECNT=LINECNT+1;            /* INCREMENT LINE COUNT BY 1
WRITE13  LA    @F,1                                               1295
         A     @F,LINECNT                                         1295
         ST    @F,LINECNT                                         1295
*         HEADCON=SP1LINE;              /* CAUSE CARR TO SKIP 1 LINE
         MVC   BUFFERS(1),SP1LINE                                 1296
*         GO TO WRITE14;                /* BYPASS PRSHD & LINECNT TESTS
         BC    15,WRITE14                                         1297
*       END;
*   /* TEST IF PSEUDO REGISTER SUBHEADING IS TO BE PRINTED
*   IF PRSHD='1'B                       /* IF PSEUDO REG SUBHEAD IS ON
*     THEN                              /* THEN
@8CB     TM    SWITCHES+1,B'00010000'                             1299
         BC    12,@8C8                                            1299
*       DO;                             /* PROCESS THIS HEADING
*         /* TEST IF HEADING SHOULD GO ON THIS OR NEXT PAGE
*         IF LINECNT>58                 /* IF NO ROOM ON THIS PAGE
*           THEN                        /* THEN
         LA    @F,58                                              1301
         C     @F,LINECNT                                         1301
*             GO TO WRITE1;             /* GO TO SKIP TO NEXT PAGE
         BC    04,WRITE1                                          1302
*           LINECNT=LINECNT+2;          /* INCREMENT LINE COUNT BY 2
         LA    @F,2                                               1303
         A     @F,LINECNT                                         1303
         ST    @F,LINECNT                                         1303
*           HEADCON=SP2LINES;           /* CAUSE CARR TO SKIP 2 LINES
         MVC   BUFFERS(1),SP2LINES                                1304
* WRITE14:  /* BRANCH HERE TO BYPASS PRSHD AND LINECNT TESTS, BECAUSE
*              EVERY TIME PRHD IS PRINTED PRSHD IS ALSO PRINTED AND
*              THESE TESTS MUST NOT BE MADE.  FOLLOWING CODE PRODUCES
*              ALPHABETIC OR NUMERIC PSEUDO REGISTER SUBHEADING.
*           PRSHD='0'B;                 /* TURN PSEUDO REG SUBHEAD OFF
WRITE14  NI    SWITCHES+1,B'11101111'                             1305
*           SP2='1'B;                   /* SET UP DATA BUF CONTROL CHAR
         OI    SWITCHES+2,B'00100000'                             1306
*           /* TEST IF NUMERIC CESD PROCESSING IS BEING PERFORMED
*           IF NUMCESD='1'B             /* IF NUMCESD SWITCH IS ON
*             THEN                      /* THEN
         TM    SWITCHES+2,B'01000000'                             1307
         BC    12,@8C7                                            1307
*               DO;                     /* PUT FOLLOWING INTO BUFFER
*                 HEADBUF(19:24)=HEADING4(1:6); /* PUT 'VECTOR' IN BUF
         MVC   BUFFERS+19(6),HEADING4                             1309
*                 HEADBUF(26:28)=HEADING2(27:29); /* PUT 'LOC' IN BUF
         MVC   BUFFERS+26(3),HEADING2+26                          1310
*                 HEADBUF(32:35)=HEADING1(23:26); /* PUT 'NAME' IN BUF
         MVC   BUFFERS+32(4),HEADING1+22                          1311
*                 HEADBUF(42:47)=HEADING1(28:33); /* PUT 'LENGTH' IN
         MVC   BUFFERS+42(6),HEADING1+27                          1312
         BC    15,@8C6                                            1314
*               END;
*             ELSE                      /* ELSE ALPH CESD PROCESSING ON
*               DO;                     /* PUT FOLLOWING INTO BUFFER
*                 HEADBUF(16:19)=HEADING1(23:26); /* PUT 'NAME' IN BUF
@8C7     MVC   BUFFERS+16(4),HEADING1+22                          1315
*                 HEADBUF(24:29)=HEADING4(1:6); /* PUT 'VECTOR' IN BUF
         MVC   BUFFERS+24(6),HEADING4                             1316
*                 HEADBUF(31:33)=HEADING2(27:29); /* PUT 'LOC' IN BUF
         MVC   BUFFERS+31(3),HEADING2+26                          1317
*                 HEADBUF(36:41)=HEADING1(28:33); /* PUT 'LENGTH' IN
         MVC   BUFFERS+36(6),HEADING1+27                          1318
*               END;
*           OUTAREAD=ADDR(HEADPRNT);    /* GET ADDR OF BUFFER FOR PUT
@8C6     LA    @1,BUFFERS                                         1320
*           BLNKHEAD='1'B;              /* INDIC TO BLANK IT AFTER PRNT
         OI    SWITCHES,B'01000000'                               1321
*           RET=ADDR(WRITE15);          /* SET UP RETURN ADDRESS
         LA    @3,WRITE15                                         1322
*           GO TO WRITE16;              /* GO TO PRINT PSEUDO REG SUBHD
         BC    15,WRITE16                                         1323
*         END;
* WRITE15: /* BRANCH HERE AFTER PRINTING A HEADING.
*             FOLLOWING CODE PREPARES TO PRINT A LINE OF DATA.
*   /* TEST IF SKIP TO 2ND NEXT LINE IS REQUESTED
*   IF SP2='1'B                         /* IF SP2 SWITCH IS ON
*     THEN                              /* THEN
@8C8     EQU   *                                                  1325
WRITE15  TM    SWITCHES+2,B'00100000'                             1325
         BC    12,@8C5                                            1325
*       DO;                             /* DO THE FOLLOWING
*         SP2='0'B;                     /* TURN SP2 SWITCH OFF
         NI    SWITCHES+2,B'11011111'                             1327
*         DATACON=SP2LINES;             /* CAUSE SKIP TO 2ND NEXT LINE
         MVC   BUFFERS+124(1),SP2LINES                            1328
*         LINECNT=LINECNT+2;            /* INCREMENT LINE COUNT BY 2
         LA    @F,2                                               1329
         A     @F,LINECNT                                         1329
         ST    @F,LINECNT                                         1329
         BC    15,@8C4                                            1331
*       END;
*     ELSE                              /* ELSE SP2 SWITCH IS OFF
*       DO;                             /* DO THE FOLLOWING
*         DATACON=SP1LINE;              /* CAUSE CARR TO SKIP 1 LINE
@8C5     MVC   BUFFERS+124(1),SP1LINE                             1332
*         LINECNT=LINECNT+1;            /* INCREMENT LINE COUNT BY 1
         LA    @F,1                                               1333
         A     @F,LINECNT                                         1333
         ST    @F,LINECNT                                         1333
*       END;
*   OUTAREAD=ADDR(DATAPRNT);            /* GET ADDR OF BUFF FOR SYSTEM
@8C4     LA    @1,BUFFERS+124                                     1335
*   BLNKDATA='1'B;                      /* INDIC TO BLANK IT AFTER PRNT
         OI    SWITCHES,B'00100000'                               1336
*   RET=SAVERET;                        /* RESTORE RET
         L     @3,SAVERET                                         1337
* WRITE16: /* BRANCH HERE WHEN A HEADING IS TO BE PRINTED.
*             FOLLOWING CODE PRINTS IT.
*   DCBAD=OUTDCBAD;                     /* LOAD OUTPUT DCB ADR INTO REG
WRITE16  L     @7,PARMPTR                                         1338
         L     @2,4(0,@7)                                         1338
*   OUTBUFAD=OUTAREAD;                  /* LOAD OUTPUT BUF ADR INTO REG
         LR    @0,@1                                              1339
*   GEN(PUT (DCBAD));                   /* PRINT ONE LINE
         PUT (DCBAD)
         DS    0H
*   /* TEST IF HEADING BUFFER SHOULD BE BLANKED OUT
*   IF BLNKHEAD='1'B                    /* IF BLNKHEAD SWITCH IS ON
*     THEN                              /* THEN
         TM    SWITCHES,B'01000000'                               1341
         BC    12,@8C3                                            1341
* WRITE17: /* BRANCH HERE RIGHT AFTER ENTERING HMBLKXRF.
*             FOLLOWING CODE INITIALIZES BUFFERS TO BLANKS.
*       DO;                             /* BLANK OUT THE HEADING BUFFER
*         HEADBUF(1)=BLANK;             /* PUT BLANK INTO FIRST BYTE
WRITE17  MVC   BUFFERS+1(1),BLANK                                 1343
*         HEADBUF(2:120)=HEADBUF(1:119); /* FILL REMAINDER OF BUFFER
         MVC   BUFFERS+2(119),BUFFERS+1                           1344
*         BLNKHEAD='0'B;                /* TURN BLNKHEAD SWITCH OFF
         NI    SWITCHES,B'10111111'                               1345
*       END;
*   /* TEST IF DATA BUFFER SHOULD BE BLANKED OUT
*   IF BLNKDATA='1'B                    /* IF BLNKDATA SWITCH IS ON
*     THEN                              /* THEN
@8C3     TM    SWITCHES,B'00100000'                               1347
         BC    12,@8C2                                            1347
*       DO;                             /* BLANK OUT THE DATA BUFFER
*         DATABUF(1)=BLANK;             /* PUT BLANK INTO FIRST BYTE
         MVC   BUFFERS+125(1),BLANK                               1349
*         DATABUF(2:120)=DATABUF(1:119); /* FILL REMAINDER OF BUFFER
         MVC   BUFFERS+126(119),BUFFERS+125                       1350
*         BLNKDATA='0'B;                /* TURN BLNKDATA SWITCH OFF
         NI    SWITCHES,B'11011111'                               1351
*       END;
*   GO TO RET;                          /* RETURN WITHIN HMBLKXRF
@8C2     BCR   15,@3                                              1353
*
* /********************************************************************
* /*   THE FOLLOWING SECTION OF CODE CONVERTS A 2-BYTE BINARY INTEGER
* /*   INTO A 4-BYTE ZONED DECIMAL INTEGER SUITABLE FOR PRINTING.
* /*   IT IS ENTERED EACH TIME A PAGE NO. OR SEGMENT NO. IS TO BE
* /*   CONVERTED.
* /********************************************************************
*
* BITODEC:
*   GEN;
BITODEC  EQU   *                                                  1354
         CVD   BINARY,BININT           CONVERT TO PACKED DECIMAL
         UNPK  DECINT(4),BININT+6(2)   CONVERT TO ZONED DECIMAL
         OI    DECINT+3,X'F0'          DELETE SIGN IN LOW ORDER BYTE
         DS    0H
*   /* TEST IF NONSIG ZEROS OF NUMBER TO BE PRINTED SHOULD BE BLANKED
*   IF BLNKZERO='1'B                    /* IF BLNKZERO SWITCH IS ON
*     THEN                              /* THEN
         TM    SWITCHES+1,B'00000001'                             1355
         BC    12,@8C1                                            1355
*       DO;                             /* BLANK OUT NONSIG ZEROS
*         BLNKZERO='0'B;                /* TURN BLNKZERO SWITCH OFF
         NI    SWITCHES+1,B'11111110'                             1357
*         GO TO BLANK0;                 /* GO TO BLANK OUT NONSIG ZEROS
         BC    15,BLANK0                                          1358
*       END;
*     ELSE                              /* ELSE BLNKZERO SWITCH IS OFF
*       DO;                             /* DON'T BLANK NONSIG ZEROS
*         GO TO RET;                    /* RETURN WITHIN HMBLKXRF
@8C1     BCR   15,@3                                              1361
*       END;
*
* /********************************************************************
* /*   THE FOLLOWING SECTION OF CODE CONVERTS A 3-BYTE BINARY INTEGER
* /*   INTO A 6-BYTE ZONED HEXADECIMAL INTEGER SUITABLE FOR PRINTING.
* /*   IT IS ENTERED EACH TIME AN ADDRESS IS TO BE CONVERTED.
* /********************************************************************
*
* BITOHEX:
*   /* TEST IF RELOCATION FACTOR IS TO BE ADDED TO ADDR BEING CONVERTED
*   IF RELOCFAC^=0                      /* IF RELOCFAC IS NOT 0
*      & RELOC='1'B                     /* AND IF RELOC SWITCH IS ON
*     THEN                              /* THEN
@8C0     EQU   *                                                  1363
BITOHEX  SR    @F,@F                                              1363
         L     @7,PARMPTR                                         1363
         C     @F,60(0,@7)                                        1363
         BC    08,@8BF                                            1363
         TM    SWITCHES+2,B'00000010'                             1363
         BC    12,@8BE                                            1363
*       BININT(5:7)=BININT(5:7)+RELOCFAC; /* ADD RELOC FACTOR TO ADDR
         L     @F,60(0,@7)                                        1364
         MVC   @TEMP3+1(3),BININT+4                               1364
         A     @F,@TEMP3                                          1364
         ST    @F,@TEMP4                                          1364
         MVC   BININT+4(3),@TEMP4+1                               1364
*   RELOC='1'B;                         /* TURN RELOC SWITCH ON
@8BE     EQU   *                                                  1365
@8BF     OI    SWITCHES+2,B'00000010'                             1365
*   GEN;
         UNPK  HEXINT+1(7),BININT+4(4) CONVERT TO ZONED BINARY
         NC    HEXINT+1(6),ZONEOFF     ZERO OUT THE ZONES OF THE DIGITS
         TR    HEXINT+1(6),HEXCHARS    CONVERT TO PRINTABLE HEXADECIMAL
         DS    0H
* BLANK0: /* BRANCH HERE AFTER CONVERTING A NUMBER TO PRINTABLE DECIMAL
*            FOLLOWING CODE BLANKS NONSIGNIFICANT ZEROS.
*   /* PUT BLANKS OVER NONSIGNIFICANT ZEROS
*   DO I=2 TO 5;                        /* LOOP A POSSIBLE 5 TIMES
BLANK0   LA    @2,2                                               1367
*     /* TEST IF NUMBER SHOULD BE BLANKED OUT
*     IF HEXINT(I)=CHARZERO(1)          /* IF THE NUMBER IS ZERO
*       THEN                            /* THEN
@DO8BD   LR    @7,@2                                              1368
         LA    @A,HEXINT-1(@7)                                    1368
         CLC   0(1,@A),CHARZERO                                   1368
         BC    07,@8B9                                            1368
*         HEXINT(I)=BLANK;              /* BLANK IT OUT
         MVC   0(1,@A),BLANK                                      1369
         BC    15,@8B8                                            1370
*       ELSE                            /* ELSE THE NUMBER IS NOT ZERO
*         GO TO RET;                    /* RETURN WITHIN HMBLKXRF
@8B9     BCR   15,@3                                              1370
*   END;
*   GO TO RET;                          /* RETURN WITHIN HMBLKXRF
@8B8     AH    @2,@D3                                             1371
@DO8BC   CH    @2,@D10                                            1371
         BC    12,@DO8BD                                          1371
         BCR   15,@3                                              1372
*
* /********************************************************************
* /*   THE FOLLOWING SECTION OF CODE PREPARES THIS MESSAGE FOR
* /*   PRINTING: '******END OF MAP AND CROSS-REFERENCE LISTING'.
* /*   IT IS ENTERED WHEN NORMAL PROCESSING COMPLETES.
* /********************************************************************
*
* FINISH:
*   DATABUF(1)=ASTERISK;                /* PUT '*' IN FIRST BYTE
FINISH   MVC   BUFFERS+125(1),ASTERISK                            1373
*   DATABUF(2:6)=DATABUF(1:5);          /* FILL BYTES 2 THRU 6
         MVC   BUFFERS+126(5),BUFFERS+125                         1374
*   DATABUF(7:9)=HEADING7(12:14);       /* PUT 'END' INTO BUFFER
         MVC   BUFFERS+131(3),HEADING7+11                         1375
*   DATABUF(11:12)=HEADING3(19:20);     /* PUT 'OF' INTO BUFFER
         MVC   BUFFERS+135(2),HEADING3+18                         1376
*   DATABUF(14:44)=HEADING5(1:31);      /* PUT 'MAP AND CROSS-REFERENCE
*                                          LISTING' INTO BUFFER
         MVC   BUFFERS+138(31),HEADING5                           1377
*   /* TEST IF LINE SHOULD GO ON THIS OR NEXT PAGE
*   IF LINECNT>58                       /* IF NO ROOM IN THIS PAGE
*     THEN                              /* THEN
         LA    @F,58                                              1378
         C     @F,LINECNT                                         1378
         BC    10,@8B7                                            1378
*       DATACON=SP1PAGE;                /* CAUSE CARR TO SKIP 1 PAGE
         MVC   BUFFERS+124(1),SP1PAGE                             1379
         BC    15,@8B6                                            1380
*     ELSE                              /* THERE IS ROOM ON THIS PAGE
*       DATACON=SP3LINES;               /* CAUSE CARR TO SKIP 3 LINES
@8B7     MVC   BUFFERS+124(1),SP3LINES                            1380
*   OUTAREAD=ADDR(DATAPRNT);            /* GET ADDR OF BUFFER FOR PUT
@8B6     LA    @1,BUFFERS+124                                     1381
*   RET=ADDR(ABORT);                    /* SET UP RETURN ADDRESS
         LA    @3,ABORT                                           1382
*   GO TO WRITE16;                      /* GO TO PRINT TERMINAL MSG
         BC    15,WRITE16                                         1383
*
* /********************************************************************
* /*   THE FOLLOWING SECTION OF CODE RETURNS CONTROL TO THE CONTROL
* /*   MODULE.  IT IS ENTERED WHEN AN ERROR IS ENCOUNTERED,
* /*   TERMINATING HMBLKXRF PROCESSING.
* /********************************************************************
*
* ABORT:
*   RETURN;                             /* RETURN TO HMBLKCTL
* END HMBLKXRF;                         /* END OF PROCEDURE HMBLKXRF
@EL01    L     @D,4(0,@D)                                         1385
         LR    @1,@C                                              1385
         L     @0,@SIZ001                                         1385
         FREEMAIN R,LV=(0),A=(1)                                  1385
         LM    @E,@C,12(@D)                                       1385
         BCR   15,@E                                              1385
@DATA1   EQU   *
@0       EQU   00                  EQUATES FOR REGISTERS 0-15
@1       EQU   01
@2       EQU   02
@3       EQU   03
@4       EQU   04
@5       EQU   05
@6       EQU   06
@7       EQU   07
@8       EQU   08
@9       EQU   09
@A       EQU   10
@B       EQU   11
@C       EQU   12
@D       EQU   13
@E       EQU   14
@F       EQU   15
@D1      DC    F'0'
@D2      DC    H'18'
@D3      DC    H'1'
@D4      DC    H'-2'
@D5      DC    H'-4'
@D6      DC    H'4'
@D7      DC    H'2'
@D8      DC    H'8'
@D9      DC    H'-8'
@D10     DC    H'5'
@D11     DC    H'10'
@D12     DC    H'-18'
@MVC     MVC   0(1,@A),0(@E)
         DS    0F
@SIZ001  DC    AL1(&SPN)
         DC    AL3(@DATEND-@DATD)
         DS    0F
@X4      DC    X'70000000'
         DS    0D
@DATA    EQU   *
DUMMY    EQU   00000000            FULLWORD INTEGER
OUTBUFAD EQU   00000000            FULLWORD POINTER REGISTER
PARMREG  EQU   00000001            FULLWORD POINTER REGISTER
OUTAREAD EQU   00000001            FULLWORD POINTER REGISTER
DCBAD    EQU   00000002            FULLWORD POINTER REGISTER
DEBAD    EQU   00000002            FULLWORD POINTER REGISTER
UCBAD    EQU   00000002            FULLWORD POINTER REGISTER
BINARY   EQU   00000002            FULLWORD INTEGER REGISTER
I        EQU   00000002            FULLWORD INTEGER REGISTER
INBUFAD  EQU   00000003            FULLWORD POINTER REGISTER
RET      EQU   00000003            3  BYTE  POINTER REGISTER
CURRCESD EQU   00000005            3  BYTE  POINTER REGISTER
CURRLD   EQU   00000006            3  BYTE  POINTER REGISTER
MAINT    EQU   *                   400 BYTE(S) ON DWORD
         DC    C'HMBLKXRF MAINTENANCE AREA'
         DC    00375C' '
NULL     EQU   *                   8 BIT(S) ON BYTE
         DC    B'00000111'
NEVRCALL EQU   *                   1 BYTE(S)
         DC    X'06'
CESD     EQU   *                   8 BIT(S) ON BYTE
         DC    B'00100000'
IDR      EQU   *                   8 BIT(S) ON BYTE
         DC    B'10000000'
CONTROL  EQU   *                   8 BIT(S) ON BYTE
         DC    B'00000001'
CONTEOS  EQU   *                   8 BIT(S) ON BYTE
         DC    B'00000101'
CONTEOM  EQU   *                   8 BIT(S) ON BYTE
         DC    B'00001101'
CONTRLD  EQU   *                   8 BIT(S) ON BYTE
         DC    B'00000011'
CRLDEOS  EQU   *                   8 BIT(S) ON BYTE
         DC    B'00000111'
CRLDEOM  EQU   *                   8 BIT(S) ON BYTE
         DC    B'00001111'
RLD      EQU   *                   8 BIT(S) ON BYTE
         DC    B'00000010'
RLDEOS   EQU   *                   8 BIT(S) ON BYTE
         DC    B'00000110'
RLDEOM   EQU   *                   8 BIT(S) ON BYTE
         DC    B'00001110'
SYM      EQU   *                   8 BIT(S) ON BYTE
         DC    B'01000000'
SCATRANS EQU   *                   8 BIT(S) ON BYTE
         DC    B'00010000'
SP1LINE  EQU   *                   1 BYTE(S)
         DC    C' '
SP2LINES EQU   *                   1 BYTE(S)
         DC    C'0'
SP3LINES EQU   *                   1 BYTE(S)
         DC    C'-'
SP1PAGE  EQU   *                   1 BYTE(S)
         DC    C'1'
HEADING1 EQU   *                   39 BYTE(S)
         DC    C'CONTROL SECTION ENTRY NAME LENGTH  TYPE'
HEADING2 EQU   *                   52 BYTE(S)
         DC    C'REFERS TO SYMBOL  AT LMOD LOC  CSECT LOC  '
         DC    C'  IN CSECT'
HEADING3 EQU   *                   52 BYTE(S)
         DC    C'IS REFERRED TO BY OF LOAD MODULE IF NOT IN'
         DC    C' OVERLAY()'
HEADING4 EQU   *                   23 BYTE(S)
         DC    C'VECTOR PSEUDO REGISTERS'
HEADING5 EQU   *                   31 BYTE(S)
         DC    C'MAP AND CROSS-REFERENCE LISTING'
HEADING6 EQU   *                   27 BYTE(S)
         DC    C'PAGE NUMERICAL ALPHABETICAL'
HEADING7 EQU   *                   22 BYTE(S)
         DC    C'IN SEGMENT END NUCLEUS'
SDPRT    EQU   *                   4 BYTE(S)
         DC    C'SD'
         DC    00002C' '
CMPRT    EQU   *                   4 BYTE(S)
         DC    C'CM'
         DC    00002C' '
PCPRT    EQU   *                   4 BYTE(S)
         DC    C'PC'
         DC    00002C' '
PDPRT    EQU   *                   4 BYTE(S)
         DC    C'PD'
         DC    00002C' '
PRIVPRT  EQU   *                   8 BYTE(S)
         DC    C'$PRIVATE'
ENTABPRT EQU   *                   6 BYTE(S)
         DC    C'$ENTAB'
SEGTBPRT EQU   *                   7 BYTE(S)
         DC    C'$SEGTAB'
BLCOMPRT EQU   *                   9 BYTE(S)
         DC    C'$BLANKCOM'
UNRESPRT EQU   *                   11 BYTE(S)
         DC    C'$UNRESOLVED'
UNREWPRT EQU   *                   14 BYTE(S)
         DC    C'$UNRESOLVED(W)'
NEVCLPRT EQU   *                   11 BYTE(S)
         DC    C'$NEVER-CALL'
BLANK    EQU   *                   1 BYTE(S)
         DC    C' '
CHARZERO EQU   *                   2 BYTE(S)
         DC    X'F0F0'
ZERO     EQU   *                   3 BYTE(S)
         DC    X'000000'
DASH     EQU   *                   1 BYTE(S)
         DC    C'-'
ASTERISK EQU   *                   1 BYTE(S)
         DC    C'*'
PERIOD   EQU   *                   1 BYTE(S)
         DC    C'.'
ONE      EQU   *                   1 BYTE(S)
         DC    X'01'
TWO      EQU   *                   1 BYTE(S)
         DC    X'02'
IEANUC0  EQU   *                   7 BYTE(S)
         DC    C'IEANUC0'
IEAANIP0 EQU   *                   8 BYTE(S)
         DC    C'IEAANIP0'
IEAVNIP0 EQU   *                   8 BYTE(S)
         DC    C'IEAVNIP0'
IEAQFX00 EQU   *                   8 BYTE(S)
         DC    C'IEAQFX00'
SYSNUC   EQU   *                   13 BYTE(S)
         DC    C'SYS1.NUCLEUS '
LASTN    EQU   *                   8 BYTE(S)
         DC    C'ZZZZZZZZ'
LASTADDR EQU   *                   3 BYTE(S)
         DC    X'FFFFFF'
ZONEOFF  EQU   *                   6 BYTE(S)
         DC    X'0F0F0F0F0F0F'
HEXCHARS EQU   *                   16 BYTE(S)
         DC    C'0123456789ABCDEF'
PARMLIST EQU   00000000            72 BYTE(S) ON WORD
INDCBAD  EQU   PARMLIST+00000000   FULLWORD POINTER
OUTDCBAD EQU   PARMLIST+00000004   FULLWORD POINTER
TITLEAD  EQU   PARMLIST+00000008   FULLWORD POINTER
GTMAINAD EQU   PARMLIST+00000012   FULLWORD POINTER
GMLENGTH EQU   PARMLIST+00000016   FULLWORD INTEGER
FLAGS    EQU   PARMLIST+00000020   16 BIT(S)
IDRFLAG  EQU   PARMLIST+00000020   1 BIT(S)
OVERLAY  EQU   PARMLIST+00000020   1 BIT(S)
A00001   EQU   PARMLIST+00000020   14 BIT(S)
BLKCNT   EQU   PARMLIST+00000022   HALFWORD INTEGER
INBUF    EQU   PARMLIST+00000024   FULLWORD POINTER
SCATDCNT EQU   PARMLIST+00000028   HALFWORD INTEGER
TRANDCNT EQU   PARMLIST+00000030   HALFWORD INTEGER
ERRORS   EQU   PARMLIST+00000032   32 BIT(S)
LMODNAME EQU   PARMLIST+00000036   8 BYTE(S)
DDNAME   EQU   PARMLIST+00000044   8 BYTE(S)
TXTTTR   EQU   PARMLIST+00000052   3 BYTE(S)
TXTLEN   EQU   PARMLIST+00000055   2 BYTE(S)
RELOCFAC EQU   PARMLIST+00000060   FULLWORD INTEGER
TEXTLEN  EQU   PARMLIST+00000064   FULLWORD INTEGER
JFCBARAD EQU   PARMLIST+00000068   FULLWORD POINTER
JFCBAREA EQU   00000000            176 BYTE(S)
CESDTAB  EQU   00000000            32767*18 BYTE(S)
RLDTAB   EQU   00000000            32767*8 BYTE(S)
SCATTAB  EQU   00000000            32767*4 BYTE(S)
TRANTAB  EQU   00000000            32767*HALFWORD INTEGER
ADDRTBL  EQU   00000000            32767*4 BYTE(S)
INDEXTAB EQU   00000000            32767*HALFWORD INTEGER
TRSCFORM EQU   00000000            1024 BYTE(S) ON WORD
IDENT3   EQU   TRSCFORM+00000000   8 BIT(S)
ZEROS1   EQU   TRSCFORM+00000001   1 BYTE(S)
COUNT4   EQU   TRSCFORM+00000002   HALFWORD INTEGER
TRSCDATA EQU   TRSCFORM+00000004   1020*1 BYTE(S)
TRSCITEM EQU   00000000            4 BYTE(S)
CESDLINE EQU   00000000            18 BYTE(S) ON WORD
CESDID   EQU   CESDLINE+00000000   HALFWORD INTEGER
SYMBOL   EQU   CESDLINE+00000002   8 BYTE(S)
CESDTYPE EQU   CESDLINE+00000010   8 BIT(S)
CESDADDR EQU   CESDLINE+00000011   3  BYTE  POINTER
SEGNO    EQU   CESDLINE+00000014   1 BYTE(S)
IDLENGTH EQU   CESDLINE+00000015   3 BYTE(S)
RLDLINE  EQU   00000000            8 BYTE(S) ON WORD
RPTR     EQU   RLDLINE+00000000    HALFWORD INTEGER
PPTR     EQU   RLDLINE+00000002    HALFWORD INTEGER
RLDFLAG  EQU   RLDLINE+00000004    8 BIT(S)
RLDADDR  EQU   RLDLINE+00000005    3  BYTE  POINTER ON WORD+1
CESDFORM EQU   00000000            248 BYTE(S) ON WORD
IDENT1   EQU   CESDFORM+00000000   8 BIT(S)
SPARE1   EQU   CESDFORM+00000001   3 BYTE(S)
ESDID    EQU   CESDFORM+00000004   HALFWORD INTEGER
COUNT1   EQU   CESDFORM+00000006   HALFWORD INTEGER
ESDATA   EQU   CESDFORM+00000008   15*16 BYTE(S)
RLDFORM  EQU   00000000            256 BYTE(S) ON WORD
IDENT2   EQU   RLDFORM+00000000    8 BIT(S)
SPARE2   EQU   RLDFORM+00000001    3 BYTE(S)
COUNT2   EQU   RLDFORM+00000004    HALFWORD INTEGER
COUNT3   EQU   RLDFORM+00000006    HALFWORD INTEGER
SPARE3   EQU   RLDFORM+00000008    8 BYTE(S)
RLDATA   EQU   RLDFORM+00000016    240*8 BIT(S) ON BYTE
         ORG   @DATA
         DS    00000835C
@L       EQU   6
@DATD    DSECT
@SAV001  EQU   @DATD+00000000      72 BYTE(S) ON WORD
BININT   EQU   @DATD+00000072      8 BYTE(S) ON DWORD
DECINT   EQU   @DATD+00000080      8 BYTE(S) ON DWORD
HEXINT   EQU   @DATD+00000080      8 BYTE(S)
DECBE    EQU   @DATD+00000088      20 BYTE(S) ON DWORD
PARMPTR  EQU   @DATD+00000108      FULLWORD POINTER
HIGHADDR EQU   @DATD+00000112      FULLWORD POINTER
RLDTABAD EQU   @DATD+00000116      FULLWORD POINTER
INDTABAD EQU   @DATD+00000120      FULLWORD POINTER
CURRTRSC EQU   @DATD+00000124      FULLWORD POINTER
TRNTABAD EQU   @DATD+00000128      FULLWORD POINTER
SAVCURR2 EQU   @DATD+00000132      FULLWORD POINTER
SCTTABAD EQU   @DATD+00000136      FULLWORD POINTER
SAVLMLOC EQU   @DATD+00000140      FULLWORD POINTER
SAVCSDAD EQU   @DATD+00000144      FULLWORD POINTER
RLDEND   EQU   @DATD+00000148      FULLWORD POINTER
CESDEND  EQU   @DATD+00000152      FULLWORD POINTER
SAVCURR1 EQU   @DATD+00000156      FULLWORD POINTER
SAVCURR3 EQU   @DATD+00000160      FULLWORD POINTER
CETABPTR EQU   @DATD+00000164      FULLWORD POINTER
SAVERET  EQU   @DATD+00000168      FULLWORD POINTER
REMAINDR EQU   @DATD+00000172      FULLWORD INTEGER
NUMRLDS  EQU   @DATD+00000176      FULLWORD INTEGER
RLDSPRTD EQU   @DATD+00000180      FULLWORD INTEGER
M        EQU   @DATD+00000184      FULLWORD INTEGER
K        EQU   @DATD+00000188      FULLWORD INTEGER
J        EQU   @DATD+00000192      FULLWORD INTEGER
IM       EQU   @DATD+00000196      FULLWORD INTEGER
L        EQU   @DATD+00000200      FULLWORD INTEGER
ID       EQU   @DATD+00000204      FULLWORD INTEGER
CESDSZSV EQU   @DATD+00000208      FULLWORD INTEGER
SCATAD   EQU   @DATD+00000212      FULLWORD INTEGER
SCATWDCT EQU   @DATD+00000216      FULLWORD INTEGER
TRCOUNT  EQU   @DATD+00000220      FULLWORD INTEGER
LINECNT  EQU   @DATD+00000224      FULLWORD INTEGER
NUCMINIP EQU   @DATD+00000229      3  BYTE  POINTER ON WORD+1
LRDIF    EQU   @DATD+00000232      FULLWORD INTEGER
TEMPADDR EQU   @DATD+00000236      FULLWORD INTEGER
RLF      EQU   @DATD+00000240      FULLWORD INTEGER
OFFSET   EQU   @DATD+00000244      FULLWORD INTEGER
SCADR    EQU   @DATD+00000248      FULLWORD INTEGER
ADDRTBAD EQU   @DATD+00000252      FULLWORD POINTER
NIPADDR  EQU   @DATD+00000257      3  BYTE  POINTER ON WORD+1
PREVAD   EQU   @DATD+00000260      FULLWORD POINTER
QFXADDR  EQU   @DATD+00000265      3  BYTE  POINTER ON WORD+1
PREVLN   EQU   @DATD+00000268      FULLWORD POINTER
SIZEN    EQU   @DATD+00000272      FULLWORD INTEGER
NEWAD    EQU   @DATD+00000276      FULLWORD INTEGER
LASTAD   EQU   @DATD+00000280      FULLWORD INTEGER
NIPLEN   EQU   @DATD+00000285      3  BYTE  POINTER ON WORD+1
QFXLEN   EQU   @DATD+00000289      3  BYTE  POINTER ON WORD+1
SEGLEN   EQU   @DATD+00000293      3  BYTE  POINTER ON WORD+1
LMLENNO  EQU   @DATD+00000297      3  BYTE  POINTER ON WORD+1
LMLEN    EQU   @DATD+00000301      3  BYTE  POINTER ON WORD+1
PDLEN    EQU   @DATD+00000305      3  BYTE  POINTER ON WORD+1
PRLEN    EQU   @DATD+00000309      3  BYTE  POINTER ON WORD+1
CESDTBID EQU   @DATD+00000312      HALFWORD INTEGER
NUMITEMS EQU   @DATD+00000314      HALFWORD INTEGER
NUMCESDS EQU   @DATD+00000316      HALFWORD INTEGER
DATACNT  EQU   @DATD+00000318      HALFWORD INTEGER
TRSCDCNT EQU   @DATD+00000320      HALFWORD INTEGER
INCR     EQU   @DATD+00000322      HALFWORD INTEGER
R        EQU   @DATD+00000324      HALFWORD INTEGER
P        EQU   @DATD+00000326      HALFWORD INTEGER
F        EQU   @DATD+00000328      HALFWORD INTEGER
A        EQU   @DATD+00000330      HALFWORD INTEGER
PAGENUM  EQU   @DATD+00000332      HALFWORD INTEGER
Q        EQU   @DATD+00000334      HALFWORD INTEGER
S        EQU   @DATD+00000336      HALFWORD INTEGER
N        EQU   @DATD+00000338      HALFWORD INTEGER
SEGLENCT EQU   @DATD+00000340      HALFWORD INTEGER
HISEGNO  EQU   @DATD+00000342      HALFWORD INTEGER
SWITCHES EQU   @DATD+00000344      24 BIT(S) ON BYTE
TEXTNEXT EQU   SWITCHES+00000000   1 BIT(S)
BLNKHEAD EQU   SWITCHES+00000000   1 BIT(S)
BLNKDATA EQU   SWITCHES+00000000   1 BIT(S)
LINECT61 EQU   SWITCHES+00000000   1 BIT(S)
NCHD     EQU   SWITCHES+00000000   1 BIT(S)
NCSHD    EQU   SWITCHES+00000000   1 BIT(S)
ACHD     EQU   SWITCHES+00000000   1 BIT(S)
ACSHD    EQU   SWITCHES+00000000   1 BIT(S)
NRHD     EQU   SWITCHES+00000001   1 BIT(S)
ARHD     EQU   SWITCHES+00000001   1 BIT(S)
PRHD     EQU   SWITCHES+00000001   1 BIT(S)
PRSHD    EQU   SWITCHES+00000001   1 BIT(S)
DASHLINE EQU   SWITCHES+00000001   1 BIT(S)
PREGHERE EQU   SWITCHES+00000001   1 BIT(S)
EREFPRES EQU   SWITCHES+00000001   1 BIT(S)
BLNKZERO EQU   SWITCHES+00000001   1 BIT(S)
NA3RET   EQU   SWITCHES+00000002   1 BIT(S)
NUMCESD  EQU   SWITCHES+00000002   1 BIT(S)
SP2      EQU   SWITCHES+00000002   1 BIT(S)
DUBLDASH EQU   SWITCHES+00000002   1 BIT(S)
NUCMAP   EQU   SWITCHES+00000002   1 BIT(S)
TRSCREC1 EQU   SWITCHES+00000002   1 BIT(S)
RELOC    EQU   SWITCHES+00000002   1 BIT(S)
A00000   EQU   SWITCHES+00000002   1 BIT(S)
BITCHECK EQU   @DATD+00000347      8 BIT(S) ON BYTE
CESDTYP  EQU   @DATD+00000348      8 BIT(S) ON BYTE
CURSEGNO EQU   @DATD+00000349      1 BYTE(S)
TEMPESD  EQU   @DATD+00000350      1 BYTE(S)
TEMPAREA EQU   @DATD+00000351      22 BYTE(S)
BUFFERS  EQU   @DATD+00000376      245 BYTE(S) ON WORD
HEADPRNT EQU   BUFFERS+00000000    121 BYTE(S) ON WORD
HEADCON  EQU   BUFFERS+00000000    1 BYTE(S)
HEADBUF  EQU   BUFFERS+00000001    120 BYTE(S)
DATAPRNT EQU   BUFFERS+00000124    121 BYTE(S) ON WORD
DATACON  EQU   BUFFERS+00000124    1 BYTE(S)
DATABUF  EQU   BUFFERS+00000125    120 BYTE(S)
         DS    00000780C
@TEMPS   DS    0F
@TEMP2   DC    F'0'
@TEMP3   DC    F'0'
@TEMP4   DC    F'0'
RD       READ  DECBL,SF,MF=L           ISSUE LIST FORMAT READ
READLEN  EQU   *-RD                    COMPUTE LENGTH OF READ CODE
         CVT LIST=YES,DSECT=YES                               YM2968
@DATD    DSECT
@DATEND  EQU   *
HMBLKXRF CSECT ,
@9F4     EQU   READA1
@9EC     EQU   READB
@9EE     EQU   READB1
@9D4     EQU   @9D3
@9D1     EQU   NUCCONV
@9D0     EQU   READ
@9C9     EQU   NUCCONV2
@9BD     EQU   CHNXT
@9BC     EQU   CHNXT
@9AF     EQU   @9AE
@9B1     EQU   @9AE
@9B0     EQU   @9AE
@99D     EQU   NUCCONV4
@989     EQU   @988
@986     EQU   NACESD7
@97F     EQU   @97E
@976     EQU   WRITE
@978     EQU   NRLD
@965     EQU   NACESD11
@95B     EQU   WRITE
@959     EQU   WRITE
@953     EQU   NACESD13
@944     EQU   ARLD
@93D     EQU   WRITE
@930     EQU   WRITE
@925     EQU   NRLD7
@921     EQU   NRLD7
@91F     EQU   NRLD7
@901     EQU   WRITE
@8F6     EQU   ARLD7
@8F2     EQU   ARLD7
WRITE9   EQU   WRITE15
WRITE12  EQU   WRITE15
ABORT    EQU   @EL01
         END   HMBLKXRF,(C'PL/S',1400,76175)
