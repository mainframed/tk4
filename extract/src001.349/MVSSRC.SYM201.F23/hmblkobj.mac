         TITLE ' OBJECT MODULE LISTER - HMBLKOBJ'
         LCLA  &T,&SPN                                            0001
.@001    ANOP                                                     0001
HMBLKOBJ CSECT ,                                                  0001
         BC    15,14(0,@F)
         DC    C'©HMBLKOBJ'                                       0001
         ST    @E,12(0,@D)                                        0001
         STM   @0,@C,20(@D)                                       0001
         BALR  @B,0                                               0001
@PSTART  DS    0H                                                 0001
         USING @PSTART+00000,@B                                   0001
         L     @0,@SIZ001                                         0001
         GETMAIN  R,LV=(0)                                        0001
         LR    @C,@1                                              0001
         USING @DATD+00000,@C                                     0001
         LM    @0,@1,20(@D)                                       0001
         XC    @TEMPS(@L),@TEMPS                                  0001
         ST    @D,@SAV001+4                                       0001
         LA    @F,@SAV001                                         0001
         ST    @F,8(0,@D)                                         0001
         LR    @D,@F                                              0001
* INITID: MLOG = '0000'X;               /* INITIAL. ERROR BITS        *
INITID   MVC   MLOG(2),@X1+2                                      0052
*         ESDCTR = '0000'X;             /* FOR ESDID                  *
         MVC   ESDCTR(2),@X1+2                                    0053
*         PAGCTR = '0000'X;             /* FOR PAGE NUMBER            *
         MVC   PAGCTR(2),@X1+2                                    0054
*         Q = '00'X;                    /* INITIALIZE Q               *
         MVI   Q,X'00'                                            0055
*         RLDSW1 = '00'X;               /* INIT. SWITCH FOR RLD       *
         MVI   RLDSW1,X'00'                                       0056
*         RLDSW2 = '00'X;               /* INITIALIZE SWITCH          *
         MVI   RLDSW2,X'00'                                       0057
*         RDCTR = '0000'X;              /* INITIALIZE DEBLK LOOP CTR  *
         MVI   RDCTR,X'00'                                        0058
*         DECBPTR = ADDR(READLIST);     /* PICK UP DECB ADDR          *
         LA    @F,READLIST                                        0059
         ST    @F,DECBPTR                                         0059
*         PARMPTR = REG1;               /* POINTS TO PARM LIST        *
         ST    @1,PARMPTR                                         0060
*         CVTWORK(1:4) = ADDR(OBJEOF);       /*STORE ADDR OF EOF RTN  *
         LA    @F,OBJEOF                                          0061
         ST    @F,CVTWORK                                         0061
*         ADRREG = DCBIN;               /* PICK UP INPUT DCB ADDR     *
         L     @8,PARMPTR                                         0062
         L     @3,0(0,@8)                                         0062
*         GENERATE;                     /* STORE EOF ADDR IN DCB      *
         USING IHADCB,ADRREG           EST. ADDRABILITY FOR DSECT
         MVC   DCBEODAD+1(3),CVTWORK+1  MOVE IN EOF ADDR
         DS    0H
*         GO TO MAINHD;                 /* SKIP AROUND LIST READ FORM *
         BC    15,MAINHD                                          0064
*         GENERATE;                     /* ISSUE LIST FORM OF         *
READLB1  READ  DECB,SF,MF=L            READ MACRO
READLTH  EQU   *-READLB1               PICK UP LIST FORM LENGTH
         DS    0H
*         /************************************************************
*         /* PRINT OUT LISTOBJ HEADING                                *
*         /************************************************************
* MAINHD: K = 1;                        /* PTR TO PAGE HEADING        *
MAINHD   MVI   K,1                                                0066
*         RTNPTR = ADDR(HDLAB1);        /* SET RTN PTR                *
         LA    @F,HDLAB1                                          0067
         ST    @F,RTNPTR                                          0067
*         GO TO INIT1;                  /* GO TO MOVE IN HEADING      *
         BC    15,INIT1                                           0068
* HDLAB1: IF MEMNAME = BUF(112:119)     /* IS MEMBER NAME PASSED?     *
*           THEN                        /* NO                         *
HDLAB1   L     @8,PARMPTR                                         0069
         CLC   36(8,@8),BUF+111                                   0069
*             GO TO HDLAB3;             /* CONTINUE PROCESSING        *
         BC    08,HDLAB3                                          0070
*           ELSE                        /* MEMBER NAME PASSED         *
*             DO;                       /* SO, PUT ON HEADER LINE     *
*               K = 16;                 /* INDEX INTO HEADINGS        *
         MVI   K,16                                               0072
*               RTNPTR = ADDR(HDLAB2);  /* SET RETURN ADDR            *
         LA    @F,HDLAB2                                          0073
         ST    @F,RTNPTR                                          0073
*               GO TO MVHDS;            /* PUT HEADING IN BUFFER      *
         BC    15,MVHDS                                           0074
* HDLAB2:       BUF(60:68) = MEMNAME;   /* MOVE NAME INTO BUFFER      *
HDLAB2   L     @8,PARMPTR                                         0075
         MVC   BUF+59(8),36(@8)                                   0075
         MVI   BUF+67,C' '                                        0075
*             END;                      /* END DO FOR MEMEBER NAME    *
* HDLAB3: K = 2;                        /*  PTR TO PAGE NO. HEAD      *
HDLAB3   MVI   K,2                                                0077
*         RTNPTR = ADDR(HDLAB4);        /* SET RTN PTR                *
         LA    @F,HDLAB4                                          0078
         ST    @F,RTNPTR                                          0078
*         GO TO MVHDS;                  /* MOVE IN HEADING            *
         BC    15,MVHDS                                           0079
* HDLAB4: PAGCTR = PAGCTR + 1;          /* UPDATE PAGE NO.CTR         *
HDLAB4   LA    @F,1                                               0080
         AH    @F,PAGCTR                                          0080
         STH   @F,PAGCTR                                          0080
*         GENERATE;                     /* CVD PAGE NO. TO DEC.       *
         LH    PTRREG,PAGCTR           PICK UP PAGE NO.
         CVD   PTRREG,DBLWD            CONVERT ONTO DOUBLEWD
         UNPK  CVTWORK(5),DBLWD+5(3)   UNPACK IT
         OI    CVTWORK+4,X'F0'         'OR' OUT SIGN BIT
         MVC   BUF+117(4),CVTWORK+1   MOVE PAGE# INTO BUF
         DS    0H
*         LINECT = '02'X;               /* UPDATE LINE CT             *
         LA    @F,X'02'                                           0082
         STH   @F,LINECT                                          0082
*         BUF(1) = '1';                 /* ASA CHAR FOR TOP PAGE      *
         MVI   BUF,C'1'                                           0083
*         REG1 = DCBOUT;                /* PICK UP DCB ADDR           *
         L     @8,PARMPTR                                         0084
         L     @1,4(0,@8)                                         0084
*         GENERATE  (PUT   (1),BUF);    /* PRINT HEADING              *
         PUT   (1),BUF
         DS    0H
*         /************************************************************
*         /* PRINT USER TITLE                                         *
*         /************************************************************
* PRTITLE:PTRREG = TITLEAD;             /* PICK UP TITLE ADDR         *
PRTITLE  L     @8,PARMPTR                                         0086
         L     @2,8(0,@8)                                         0086
*         REG1 = DCBOUT;                /* PICK UP DCB ADDR           *
         L     @1,4(0,@8)                                         0087
*         GENERATE  (PUT   (1),(PTRREG));  /* PRINT TITLE             *
         PUT   (1),(PTRREG)
         DS    0H
*         GO TO READ;                   /* GO READ RECORD             *
         BC    15,READ                                            0089
*         /************************************************************
*         /* COMMON RTN TO MOVE HEADINGS INTO BUFFER AREA             *
*         /************************************************************
* INIT1:  BUF(2) = ' ';                 /* BLANK OUT BUFFER           *
INIT1    MVI   BUF+1,C' '                                         0090
*         BUF(3:121) = BUF(2:120);      /* BLANK OUT BUFFER           *
         MVC   BUF+2(119),BUF+1                                   0091
* MVHDS:  L = WHERE(K);                 /* INDEX INTO BUFFER          *
MVHDS    SR    @8,@8                                              0092
         IC    @8,K                                               0092
         SR    @F,@F                                              0092
         IC    @F,HEADERS+63(@8)                                  0092
         STC   @F,L                                               0092
*         N = LNGTH(K);                 /*LENGTH TO BE MOVED          *
         SR    @F,@F                                              0093
         IC    @F,HEADERS+79(@8)                                  0093
         STC   @F,N                                               0093
*         WDSPTR = WDSADR(K);           /* PICK UP PTR                *
         SR    @9,@9                                              0094
         IC    @9,K                                               0094
         SLA   @9,2                                               0094
         L     @F,HEADERS-4(@9)                                   0094
         ST    @F,WDSPTR                                          0094
*         BUF(L:L+N-1) = WDSPTR->HEADBUF(1:N);  /* MOVE MSG INTO BUF  *
         LR    @6,@F                                              0095
         LR    @E,@6                                              0095
         LH    @7,@D1                                             0095
         SR    @0,@0                                              0095
         IC    @0,N                                               0095
         AR    @7,@0                                              0095
         IC    @0,L                                               0095
         AR    @7,@0                                              0095
         SR    @4,@4                                              0095
         IC    @4,L                                               0095
         SR    @7,@4                                              0095
         LA    @A,BUF-1(@4)                                       0095
         EX    @7,@MVC                                            0095
*         GO TO RETRN;                  /* RETURN                     *
         L     @5,RTNPTR                                          0096
         BCR   15,@5                                              0096
*         /************************************************************
*         /* CHECKS LINE COUNT AND READS NEXT RECORD AND DEBLKS       *
*         /************************************************************
* READ:   IF  LINECT >= 54              /* CAN ANOTHER REC'D FIT?     *
*           THEN                        /* YES                        *
READ     LA    @F,54                                              0097
         CH    @F,LINECT                                          0097
*             GO TO MAINHD;             /* GO TO PRINT HEADING        *
         BC    12,MAINHD                                          0098
*           ELSE                        /* OTHERWISE  CONTINUE        *
*             IF RDCTR > '0000'X        /* FINISHED WITH THIS BLK     *
*               THEN                    /* NO                         *
         L     @F,@X1                                             0099
         SR    @0,@0                                              0099
         IC    @0,RDCTR                                           0099
         CR    @F,@0                                              0099
         BC    10,@9FF                                            0099
*                 DO;                   /* CONTINUE DEBLOCKING        *
*                   INPTR = INPTR + 80;     /* UPDATE INPUT PTR       *
         LA    @F,80                                              0101
         A     @F,INPTR                                           0101
         ST    @F,INPTR                                           0101
*                   GO TO DEBLKRD;      /* PROCESS THIS RECORD        *
         BC    15,DEBLKRD                                         0102
*                 END;                  /* END DEBLK LOOP             *
*               ELSE;                   /* BLOCK DONE SO READ NEXT    *
@9FF     EQU   *                                                  0104
* OBJGET: ADRREG = DCBIN;               /* PICK UP DCB ADDR           *
@9FE     EQU   *                                                  0105
OBJGET   L     @8,PARMPTR                                         0105
         L     @3,0(0,@8)                                         0105
*         PTRREG = WORKBUF;             /* PICK UP BUFFER ADDR        *
         L     @2,24(0,@8)                                        0106
*         INPTR = PTRREG;               /* PICK UP ADDR IN INPUT PTR  *
         ST    @2,INPTR                                           0107
*         GENERATE;                     /* READ NEXT RECORD           *
         MVC   READLIST(READLTH),READLB1  MOVE IN LIST FORM OF READ
         READ  READLIST,SF,(ADRREG),(PTRREG),MF=E  ISSUE EXECUTE READ
         CHECK READLIST                CHECK READ
         DS    0H
*         IF  RESIDCT > '0000'X         /* FULL BLK READ IN           *
*            THEN                       /* NO, SHORT BLOCK            *
         L     @F,@X1                                             0109
         L     @9,DECBPTR                                         0109
         L     @9,16(0,@9)         DECBSTR                        0109
         MVC   @TEMP2+2(2),14(@9)                                 0109
         C     @F,@TEMP2                                          0109
         BC    10,@9FD                                            0109
*              DO;                      /* FIND NUM RECORDS READ IN   *
*                RDCTR = (DCBBLKSI - RESIDCT)/80;      /* CALC LOOPCTR*
         MVC   @TEMP2+2(2),14(@9)                                 0111
         L     @E,@TEMP2                                          0111
         LCR   @E,@E                                              0111
         MVC   @TEMP2+2(2),DCBBLKSI                               0111
         A     @E,@TEMP2                                          0111
         SRDA  @E,32                                              0111
         LA    @0,80                                              0111
         DR    @E,@0                                              0111
         STC   @F,RDCTR                                           0111
*                GO TO DEBLKRD;         /* PROCESS RECORD             *
         BC    15,DEBLKRD                                         0112
*              END;                     /* END SHORT BLK PROCESSING   *
*            ELSE                       /* FULL BLK READ IN           *
*              RDCTR = BLKCNT;          /* CALC LOOP CTR VALUE        *
@9FD     L     @8,PARMPTR                                         0114
         MVC   RDCTR(1),23(@8)                                    0114
* DEBLKRD:RDCTR = RDCTR - 1;            /* DECREASE CTR AND PROCESS RD*
@9FC     EQU   *                                                  0115
DEBLKRD  SR    @F,@F                                              0115
         IC    @F,RDCTR                                           0115
         BCTR  @F,0                                               0115
         STC   @F,RDCTR                                           0115
*         /************************************************************
*         /* CHECK CARD VALIDITY AND TYPE VALIDITY                    *
*         /************************************************************
*         IF  ZEROTWO = '02'X           /* CHECK 1ST CARD COLUMN      *
*           THEN                        /* OKAY                       *
         L     @8,INPTR                                           0116
         CLI   0(@8),X'02'                                        0116
*             GO TO TYPCK;              /* GO TO CHECK TYPE           *
         BC    08,TYPCK                                           0117
*           ELSE                        /* CONTROL CARD OR ERR        *
*             DO;                       /* CHECK FOR CNTRL CARD       *
*               IF ZEROTWO = ' '        /* IS FIRST COLUMN BLANK?     *
*                 THEN                  /* YES, SO CONTROL CARD       *
         CLI   0(@8),C' '                                         0119
         BC    07,@9FB                                            0119
*                   DO;                 /* PROCESS CARD               *
*                     BUF(1) = '0';      /* TO SKIP NEXT LINE         *
         MVI   BUF,C'0'                                           0121
*                     BUF(2) = ' ';     /* BLANK OUT BUFFER           *
         MVI   BUF+1,C' '                                         0122
*                     BUF(3:121) = BUF(2:120); /* BLANK OUT ENTIRE BUF*
         MVC   BUF+2(119),BUF+1                                   0123
*                     BUF(2:81) = CARD;  /* MOVE CARD IMAGE INTO BUF  *
         MVC   BUF+1(80),0(@8)                                    0124
*                     RTNPTR = ADDR(READ);  /* READ NEXT CD AFTER PRT *
         LA    @F,READ                                            0125
         ST    @F,RTNPTR                                          0125
*                     GO TO OBJPUT;     /* PRINT CONTROL RECORD       *
         BC    15,OBJPUT                                          0126
*                   END;                /* END CNTRL DO               *
*                 ELSE                  /* ERROR IN CARD              *
*                   DO;                 /* ERROR IMB102I              *
*                     ERRORS(2) = '1'B;     /* SET ERROR BIT          *
@9FB     L     @8,PARMPTR                                         0129
         OI    32(@8),B'01000000'                                 0129
*                     GO TO ERROR;      /* GO TO ERROR RTN            *
         BC    15,ERROR                                           0130
*                   END;                /* END OF DO FOR ERROR        *
*            END;                       /* END FIRST COLM.CHECK       *
@9FA     EQU   *                                                  0132
* TYPCK:  DO  I = 1 TO 5;               /* SEARCH TAB FOR TYPE        *
TYPCK    LA    @F,1                                               0133
         STC   @F,I                                               0133
*           IF  TPES(I) = CARDTYP       /* RECORD TYPE MATCH?         *
*             THEN                      /* MATCH FOUND                *
@DO9F9   L     @8,INPTR                                           0134
         SR    @9,@9                                              0134
         IC    @9,I                                               0134
         MH    @9,@D2                                             0134
         LA    @A,TYPETAB+18(@9)                                  0134
         CLC   0(3,@A),1(@8)                                      0134
         BC    07,@9F5                                            0134
*               GO TO TYADR(I);         /* GO TO PROCESS CARD         *
         SR    @6,@6                                              0135
         IC    @6,I                                               0135
         SLA   @6,2                                               0135
         LA    @A,TYPETAB-3(@6)                                   0135
         MVC   @TEMP3+1(3),0(@A)                                  0135
         L     @F,@TEMP3                                          0135
         BCR   15,@F                                              0135
*             ELSE ;                    /* CONTINUE SEARCH            *
*         END  TYPCK;                   /* END TYPE TAB SEARCH        *
*         ERRORS(2) = '1'B;             /* ERROR:TYPE NOT FOUND       *
@9F5     SR    @F,@F                                              0137
         IC    @F,I                                               0137
         AH    @F,@D3                                             0137
@DO9F8   STC   @F,I                                               0137
         CH    @F,@D4                                             0137
         BC    12,@DO9F9                                          0137
         L     @8,PARMPTR                                         0138
         OI    32(@8),B'01000000'                                 0138
*         GO TO ERROR;                  /* GOTO ERR RTN: IMB102I      *
*         /************************************************************
*         /* ERROR HANDLING:  WILL PRINT ENTIRE CARD                  *
*         /************************************************************
*         /* TO PRINT HEADING                                         *
*         /************************************************************
* ERROR:  K = 15;                       /* PTR TO ERROR HEADING       *
ERROR    MVI   K,15                                               0140
*         RTNPTR = ADDR(ER1);           /* SET RTN PTR                *
         LA    @F,ER1                                             0141
         ST    @F,RTNPTR                                          0141
*         GO TO INIT1;                  /* PUT HEADING IN BUF         *
         BC    15,INIT1                                           0142
*         /************************************************************
*         /* TO PRINT FIRST 40 CHARS OF CARD                          *
*         /************************************************************
* ER1:    PTRREG = INPTR;               /* PTR TO WHAT TO CONVT       *
ER1      L     @2,INPTR                                           0143
*         DATA = 40;                    /* NUMBER OF BYTES            *
         LA    @F,40                                              0144
         STH   @F,DATA                                            0144
*         RTNPTR = ADDR(ER2);           /* SET RTN PTR                *
         LA    @F,ER2                                             0145
         ST    @F,RTNPTR                                          0145
*         GO TO CVTHEX;                 /* CONV.TO PRT HEX IN BUF     *
         BC    15,CVTHEX                                          0146
* ER2:    RTNPTR = ADDR(ER3);           /* SET RTN PTR                *
ER2      LA    @F,ER3                                             0147
         ST    @F,RTNPTR                                          0147
*         BUF(1) = '0';                 /* TO SKIP TO NEXT LINE       *
         MVI   BUF,C'0'                                           0148
*         GO TO OBJPUT;                 /* GO PRINT OUT BUFFER        *
         BC    15,OBJPUT                                          0149
*         /************************************************************
*         /* TO PRINT OUT LAST 40 CHAR OF CARD                        *
*         /************************************************************
* ER3:    DATA = 40;                    /* SET NO. OF BYTES           *
ER3      LA    @F,40                                              0150
         STH   @F,DATA                                            0150
*         RTNPTR = ADDR(ER4);           /* SET RTN PTR                *
         LA    @F,ER4                                             0151
         ST    @F,RTNPTR                                          0151
*         BUF(1) = ' ';                 /* INITIALIZE  BLANKS         *
         MVI   BUF,C' '                                           0152
*         BUF(2:15) = BUF(1:14);        /* TO BLANK OUT HEADING       *
         MVC   BUF+1(14),BUF                                      0153
*         GO TO CVTHEX;                 /* CONV AND PUT ON BUF        *
         BC    15,CVTHEX                                          0154
* ER4:    RTNPTR = ADDR(READ);          /* SET RTN PTR                *
ER4      LA    @F,READ                                            0155
         ST    @F,RTNPTR                                          0155
*         BUF(1) = ' ';                 /* ASA CHAR TO PRT NEXT LINE  *
         MVI   BUF,C' '                                           0156
*         GO TO OBJPUT;                 /* PRINT OUT BUFFER           *
*         /************************************************************
*         /* TO PRINT OUT LINE                                        *
*         /************************************************************
* OBJPUT: REG1 = DCBOUT;                /* PICK UP DCB ADDR           *
OBJPUT   L     @8,PARMPTR                                         0158
         L     @1,4(0,@8)                                         0158
*         GENERATE( PUT   (REG1),BUF);  /* WRITE OUT BUFFER           *
          PUT   (REG1),BUF
         DS    0H
*         IF BUF(1) = ' '               /* UPDATE LINE CTR            *
*           THEN                        /* ONLY 1 LINE PRINTED        *
         CLI   BUF,C' '                                           0160
         BC    07,@9F4                                            0160
*             LINECT = LINECT + 1;      /* ADD ON TO COUNT            *
         LA    @F,1                                               0161
         AH    @F,LINECT                                          0161
         STH   @F,LINECT                                          0161
         BC    15,@9F3                                            0162
*           ELSE                        /* 2 LINES PRINTED            *
*             LINECT = LINECT + '02'X;  /* ADD ON TO COUNT            *
@9F4     LA    @F,X'02'                                           0162
         AH    @F,LINECT                                          0162
         STH   @F,LINECT                                          0162
*         GO TO RETRN;                  /* RETURN                     *
@9F3     L     @9,RTNPTR                                          0163
         BCR   15,@9                                              0163
*         /************************************************************
*         /* TO PROCESS SYM RECORDS                                   *
*         /************************************************************
* SYMTYP: K = 3;                        /* SET POINTER TO MOVE HEADS  *
SYMTYP   MVI   K,3                                                0164
*         RTNPTR = ADDR(SYMLAB2);       /* SET RTN POINTER            *
         LA    @F,SYMLAB2                                         0165
         ST    @F,RTNPTR                                          0165
*         GO TO INIT1;                  /* PUT HEADING IN BUFFER      *
         BC    15,INIT1                                           0166
* SYMLAB2:K = 4;                        /* SET HEADINGS PTR           *
SYMLAB2  MVI   K,4                                                0167
*         RTNPTR = ADDR(SYMLAB3);       /* SET RTN PTR                *
         LA    @F,SYMLAB3                                         0168
         ST    @F,RTNPTR                                          0168
*         GO TO MVHDS;                  /* PUT HEADING IN BUFFER      *
         BC    15,MVHDS                                           0169
* SYMLAB3:IF NUMBYTE <= 36              /* LESS THAN 36 DATA BYTES?   *
*           THEN                        /* YES SO TRANSLATE           *
SYMLAB3  LA    @F,36                                              0170
         L     @8,INPTR                                           0170
         MVC   @TEMP2+2(2),10(@8)                                 0170
         C     @F,@TEMP2                                          0170
         BC    04,@9F2                                            0170
*             DO;                       /* ALL BYTES NOW              *
*               DATA = NUMBYTE;         /* PICK UP TOTAL NUM OF BYTES *
         MVC   DATA(2),10(@8)                                     0172
*               DATARES = '00'X;        /* REMAINING BYTES = ZERO     *
         LA    @F,X'00'                                           0173
         STH   @F,DATARES                                         0173
         BC    15,@9F1                                            0175
*             END;                      /* CONTINUE PROCESSING        *
*           ELSE                        /* MORE THAN 36 BYTES, SO     *
*             DO;                       /* TRANSLATE                  *
*               DATA = 36;              /* 36 BYTES TESTRAN BYTES AND *
@9F2     LA    @F,36                                              0176
         STH   @F,DATA                                            0176
*               DATARES = NUMBYTE - 36;       /* REST LATER           *
         LH    @F,@D5                                             0177
         L     @8,INPTR                                           0177
         MVC   @TEMP2+2(2),10(@8)                                 0177
         A     @F,@TEMP2                                          0177
         STH   @F,DATARES                                         0177
*             END;                      /* PROCESS FIRST 36 BYTES     *
*         PTRREG = ADDR(TESTDATA);      /* PTR TO BYTES TO TRANSLATE  *
@9F1     L     @8,INPTR                                           0179
         LA    @2,16(0,@8)                                        0179
*         RTNPTR = ADDR(SYMLAB4);       /* SET RTN PTR                *
         LA    @F,SYMLAB4                                         0180
         ST    @F,RTNPTR                                          0180
*         GO TO CVTHEX;                 /* GO CONVERT BYTES AND PUT
*                                          IN BUFFER                  *
         BC    15,CVTHEX                                          0181
* SYMLAB4:BUF(1) = '0';                 /* SET TO SKIP NEXT LINE      *
SYMLAB4  MVI   BUF,C'0'                                           0182
*         RTNPTR = ADDR(SYMLAB5);       /* SET RTN PTR                *
         LA    @F,SYMLAB5                                         0183
         ST    @F,RTNPTR                                          0183
*         GO TO CARDNMHD;               /* GO PUT IN CARD NUM AND
*                                          PRINT OUT LINE             *
         BC    15,CARDNMHD                                        0184
* SYMLAB5:BUF(1) = ' ';                 /* INITIALIZE BLANK           *
SYMLAB5  MVI   BUF,C' '                                           0185
*         BUF(2:121) = BUF(1:120);      /* BLANK OUT BUFFER           *
         MVC   BUF+1(120),BUF                                     0186
*         IF DATARES = '00'X            /* ANY LEFT TO TRANSLATE & MV *
*           THEN                        /* NO MORE                    *
         LA    @F,X'00'                                           0187
         MVC   @TEMP2+2(2),DATARES                                0187
         C     @F,@TEMP2                                          0187
*             GO TO READ;               /* SO GO READ NEXT CARD       *
         BC    08,READ                                            0188
*           ELSE                        /* MORE TO GO                 *
*             DO;                       /* THEREFORE CONTINUE         *
*               DATA = DATARES;         /* NUM BYTES LEFT TO DO       *
         MVC   DATA(2),DATARES                                    0190
*               RTNPTR = ADDR(SYMLAB6); /* SET RTN PTR                *
         LA    @F,SYMLAB6                                         0191
         ST    @F,RTNPTR                                          0191
*               GO TO CVTHEX;           /* GO DO REMAINING BYTES      *
         BC    15,CVTHEX                                          0192
*             END;                      /* END DO LOOP                *
* SYMLAB6:RTNPTR = ADDR(READ);          /* SET RTN PTR TO READ NEXT   *
SYMLAB6  LA    @F,READ                                            0194
         ST    @F,RTNPTR                                          0194
*         BUF(1) = ' ';                 /* ASA CHAR TO PRT NXT LINE   *
         MVI   BUF,C' '                                           0195
*         GO TO OBJPUT;                 /* GO PRINT OUT REMAINING LINE*
         BC    15,OBJPUT                                          0196
*         /************************************************************
*         /* ESD CARD PROCESSING  - HEADINGS                          *
*         /************************************************************
* ESDTYP: K = 5;                        /* SET HEADING PTR            *
ESDTYP   MVI   K,5                                                0197
*         RTNPTR = ADDR(ESDLAB1);       /* SET RTN PTR                *
         LA    @F,ESDLAB1                                         0198
         ST    @F,RTNPTR                                          0198
*         BUF(1) = '0';                 /* TO SKIP NEXT LINE          *
         MVI   BUF,C'0'                                           0199
*         GO TO INIT1;                  /* PUT HEADING IN BUFFER      *
         BC    15,INIT1                                           0200
* ESDLAB1:RTNPTR = ADDR(ESDLAB2);       /* SET RTN PTR                *
ESDLAB1  LA    @F,ESDLAB2                                         0201
         ST    @F,RTNPTR                                          0201
* CARDNMHD:BUF(114:121) = CARDCHAR;     /* FILL IN CC 73-76 FROM CARD *
CARDNMHD L     @8,INPTR                                           0202
         MVC   BUF+113(8),72(@8)                                  0202
*         GO TO OBJPUT;                 /* PRINT OUT BUFFER           *
         BC    15,OBJPUT                                          0203
* ESDLAB2:K = 6;                        /* SET HEADING PTR            *
ESDLAB2  MVI   K,6                                                0204
*         RTNPTR = ADDR(ESDLAB3);       /* SET RTN PTR                *
         LA    @F,ESDLAB3                                         0205
         ST    @F,RTNPTR                                          0205
*         GO TO INIT1;                  /* GO PUT HEADING IN BUFFER   *
         BC    15,INIT1                                           0206
* ESDLAB3:RTNPTR = ADDR(ESDLP1);        /* SET RTN PTR                *
ESDLAB3  LA    @F,ESDLP1                                          0207
         ST    @F,RTNPTR                                          0207
*         BUF(1) = ' ';                 /* SET TO SKIP NEXT LINE      *
         MVI   BUF,C' '                                           0208
*         GO TO OBJPUT;                 /* PRINT OUT BUFFER           *
         BC    15,OBJPUT                                          0209
*         /************************************************************
*         /* ESD PROCESSING                                           *
*         /************************************************************
* ESDLP1: P = NUMBYTE/16;               /* PICK UP NUMBER OF ESD ITEMS*
ESDLP1   L     @8,INPTR                                           0210
         MVC   @TEMP2+2(2),10(@8)                                 0210
         L     @E,@TEMP2                                          0210
         SRA   @E,4                                               0210
         STC   @E,P                                               0210
*         CARDPTR = INPTR + 16;         /* INITIALIZE ESD ITEM PTR    *
         LA    @F,16                                              0211
         A     @F,INPTR                                           0211
         ST    @F,CARDPTR                                         0211
*         IF FSTESDID ^= BUF(120:121)   /* IS 1ST ITEM AN LD ?        *
*           THEN                        /* NO                         *
         MVC   @TEMP2+2(2),BUF+119                                0212
         L     @F,@TEMP2                                          0212
         MVC   @TEMP2+2(2),14(@8)                                 0212
         C     @F,@TEMP2                                          0212
         BC    08,@9F0                                            0212
*             ESDCTR = FSTESDID - 1;    /* SO ID=ID ON CRD-1,+1 LATER *
         LH    @F,@D1                                             0213
         MVC   @TEMP2+2(2),14(@8)                                 0213
         A     @F,@TEMP2                                          0213
         STH   @F,ESDCTR                                          0213
*           ELSE;                       /* YES, LEAVE CTR AS IS       *
@9F0     EQU   *                                                  0214
*         DO Q = 1 TO P;                /* LOOP TO PROCESS ESD   CARD *
@9EF     LA    @F,1                                               0215
         BC    15,@DO9ED                                          0215
*           BUF(1) = ' ';               /* SET TO PRINT ON NEXT LINE  *
@DO9EE   MVI   BUF,C' '                                           0216
*           BUF(2:121) = BUF(1:120);    /* BLANK OUT BUFFER           *
         MVC   BUF+1(120),BUF                                     0217
* ESDNAME:  BUF(20:27) = NAME;          /* MOVE NAME TO BUFFER        *
ESDNAME  L     @8,CARDPTR                                         0218
         MVC   BUF+19(8),0(@8)                                    0218
* IDESD:    IF TYPE = '01'X             /* IS TYPE AN LD?             *
*             THEN                      /* YES                        *
IDESD    L     @8,CARDPTR                                         0219
         CLI   8(@8),X'01'                                        0219
*               GO TO ESDADDR;          /* DO NOT PROCESS ESDID FOR LD*
         BC    08,ESDADDR                                         0220
*             ELSE;                     /* NOT LD. SO PROC. ESDID     *
*           ESDCTR = ESDCTR + '0001'X;  /* UPDATE ESDID COUNTER       *
         L     @F,@X8                                             0222
         MVC   @TEMP2+2(2),ESDCTR                                 0222
         A     @F,@TEMP2                                          0222
         STH   @F,ESDCTR                                          0222
*           GENERATE;                   /* CNVT ID TO PRINTABLE DEC   *
         LH    PTRREG,ESDCTR           PICK UP ESD ID
         CVD   PTRREG,DBLWD            CONVERT TO DECIMAL
         UNPK  CVTWORK(5),DBLWD+5(3)   UNPACK IT
         OI    CVTWORK+4,X'F0'     'OR' OUT LAST ZONE
         MVC   BUF+3(4),CVTWORK+1   MOVE ID INTO BUF
         DS    0H
* ESDADDR:  DATA = '03'X;               /* NUM BYTES TO TRANS. TO HEX *
ESDADDR  LA    @F,X'03'                                           0224
         STH   @F,DATA                                            0224
*           I = 30;                     /* SET PTR IN OUTPUT BUFFER   *
         MVI   I,30                                               0225
*           PTRREG = ADDR(ADRES);       /* PTR TO INPUT:ADDR          *
         L     @8,CARDPTR                                         0226
         LA    @2,9(0,@8)                                         0226
*           RTNPTR = ADDR(IDLTH);       /* SET RTN PTR                *
         LA    @F,IDLTH                                           0227
         ST    @F,RTNPTR                                          0227
*           GO TO BTHLP2;               /* GO TRANS AND PUT IN BUFFER *
         BC    15,BTHLP2                                          0228
* IDLTH:    DATA = '03'X;               /* NUM OF BYTES TO TRANS      *
IDLTH    LA    @F,X'03'                                           0229
         STH   @F,DATA                                            0229
*           I = 39;                     /* WHERE TO PLACE IN BUFFER   *
         MVI   I,39                                               0230
*           PTRREG = ADDR(IDORLGTH);    /* PTR TO BYTES TO TRANSLATE  *
         L     @8,CARDPTR                                         0231
         LA    @2,13(0,@8)                                        0231
*           RTNPTR = ADDR(ESDLP2);      /* SET RTN PTR                *
         LA    @F,ESDLP2                                          0232
         ST    @F,RTNPTR                                          0232
*           GO TO BTHLP2;               /* GO TRANS. ID/LTH INTO BUF  *
         BC    15,BTHLP2                                          0233
* ESDLP2:   DO I = 1 TO 8;              /* DO LOOP TO GET TYPE        *
ESDLP2   LA    @F,1                                               0234
         STC   @F,I                                               0234
*             IF ESDTAB(I) = TYPE       /* IS TYPE MATCH FOUND        *
*               THEN                    /* YES                        *
@DO9EA   L     @8,CARDPTR                                         0235
         SR    @F,@F                                              0235
         IC    @F,8(0,@8)                                         0235
         SR    @9,@9                                              0235
         IC    @9,I                                               0235
         SR    @0,@0                                              0235
         IC    @0,ESDTABLE-1(@9)                                  0235
         CR    @F,@0                                              0235
         BC    07,@9E6                                            0235
*                 DO;                   /* PROCESS TYPE               *
*                   BUF(11:16) = TYPTAB(I);  /* PUT TYPE IN BUFFER    *
         SR    @6,@6                                              0237
         IC    @6,I                                               0237
         MH    @6,@D6                                             0237
         LA    @E,ESDTABLE+2(@6)                                  0237
         MVC   BUF+10(6),0(@E)                                    0237
*                   GO TO ESDLAB4;      /* CONTINUE PROCESSING        *
         BC    15,ESDLAB4                                         0238
*                 END;                  /* END IF MATCH FOUND         *
*               ELSE;                   /* TYPE NOT FOUND,CONT SRCH   *
@9E6     EQU   *                                                  0240
*           END ESDLP2;                 /* CONTINUE SEARCH            *
*           ERRORS(3) = '1'B;           /* ERROR:TYPE NOT FOUND       *
@9E5     SR    @F,@F                                              0241
         IC    @F,I                                               0241
         AH    @F,@D3                                             0241
@DO9E9   STC   @F,I                                               0241
         CH    @F,@D7                                             0241
         BC    12,@DO9EA                                          0241
         L     @8,PARMPTR                                         0242
         OI    32(@8),B'00100000'                                 0242
*           GO TO ERROR;                /* GO PRINT OUT CARD AND ERROR*
         BC    15,ERROR                                           0243
* ESDLAB4:  RTNPTR = ADDR(ESDLAB5);     /* SET RTN PTR TO READ NEXT CD*
ESDLAB4  LA    @F,ESDLAB5                                         0244
         ST    @F,RTNPTR                                          0244
*           BUF(1) = ' ';               /* ASA CHAR TO PRT NXT LINE   *
         MVI   BUF,C' '                                           0245
*           GO TO OBJPUT;               /* PRINT OUT BUFFER           *
         BC    15,OBJPUT                                          0246
* ESDLAB5:  CARDPTR = CARDPTR + 16;     /* UPDATE ESD ITEM POINTER    *
ESDLAB5  LA    @F,16                                              0247
         A     @F,CARDPTR                                         0247
         ST    @F,CARDPTR                                         0247
*         END;                          /* END LOOP  ESD ITEMS:ESDLP1 *
*         GO TO READ;                   /* READ NEXT CARD             *
         SR    @F,@F                                              0248
         IC    @F,Q                                               0248
         AH    @F,@D3                                             0248
@DO9ED   STC   @F,Q                                               0248
         SR    @0,@0                                              0248
         IC    @0,P                                               0248
         CR    @F,@0                                              0248
         BC    12,@DO9EE                                          0248
         BC    15,READ                                            0249
*         /************************************************************
*         /* TXT PROCESSING: MOVE IN HEADINGS                         *
*         /************************************************************
* TXTTYP: K = 7;                        /* SET HEADING PTR            *
TXTTYP   MVI   K,7                                                0250
*         BUF(1) = '0';                 /* SKIP NEXT PRINTING LINE    *
         MVI   BUF,C'0'                                           0251
*         RTNPTR = ADDR(TXTLAB1);       /* SET RTN PTR                *
         LA    @F,TXTLAB1                                         0252
         ST    @F,RTNPTR                                          0252
*         GO TO INIT1;                  /* PUT HEADING IN BUFFER      *
         BC    15,INIT1                                           0253
* TXTLAB1:RTNPTR = ADDR(TXTLAB2);       /* SET RTN PTR                *
TXTLAB1  LA    @F,TXTLAB2                                         0254
         ST    @F,RTNPTR                                          0254
*         GO TO CARDNMHD;               /*PUT IN LAST 8 BYTES & PRINT *
         BC    15,CARDNMHD                                        0255
* TXTLAB2:BUF(1) = ' ';                 /* TO PRINT ON NEXT LINE      *
TXTLAB2  MVI   BUF,C' '                                           0256
*         K = 8;                        /* SET HEADING PTR            *
         MVI   K,8                                                0257
*         RTNPTR = ADDR(TXTLAB3);       /* SET RTN PTR                *
         LA    @F,TXTLAB3                                         0258
         ST    @F,RTNPTR                                          0258
*         GO TO INIT1;                  /* PUT HEADINGS IN BUFFER     *
         BC    15,INIT1                                           0259
*         /************************************************************
*         /* TXT PROCESSING: CARD FORMATTING AND PRINTING             *
*         /************************************************************
* TXTLAB3:DATA = '03'X;                 /* NUM BYTES TO TRANS INTO BUF*
TXTLAB3  LA    @F,X'03'                                           0260
         STH   @F,DATA                                            0260
*         I = 8;                        /* WHERE TO PUT IN BUFFER     *
         MVI   I,8                                                0261
*         PTRREG = ADDR(TXTADDR);       /* PTR TO BYTES TO BE TRANS   *
         L     @8,INPTR                                           0262
         LA    @2,5(0,@8)                                         0262
*         RTNPTR = ADDR(TXTLAB4);       /* SET RTN PTR                *
         LA    @F,TXTLAB4                                         0263
         ST    @F,RTNPTR                                          0263
*         GO TO BTHLP2;                 /* GO TRANS AND PUT IN BUFFER *
         BC    15,BTHLP2                                          0264
* TXTLAB4:GENERATE;                     /* ESDID TO PRINTABLE DEC     *
TXTLAB4  EQU   *                                                  0265
         L     ADRREG,INPTR            PICK UP INPTR
         LH    PTRREG,ESDIFER(ADRREG)  PICK UP ESD ID
         CVD   PTRREG,DBLWD            CONVERT TO DECIMAL
         UNPK  CVTWORK(5),DBLWD+5(3)  UNPACK IT
         OI    CVTWORK+4,X'F0'      'OR' OUT LAST ZONE
         MVC   BUF+21(4),CVTWORK+1  MOVE INTO BUF
         DS    0H
*         I = 33;                       /* SET INDEX INTO OUTPUT BUF  *
         MVI   I,33                                               0266
*         IF NUMBYTE3 > 40              /* MORE THAN 40 TEXT BYTES ?  *
*           THEN                        /* THEN                       *
         LA    @F,40                                              0267
         L     @8,INPTR                                           0267
         MVC   @TEMP2+2(2),10(@8)                                 0267
         C     @F,@TEMP2                                          0267
         BC    10,@9E4                                            0267
*             DO;                       /* TRANS. FIRST 40 BYTES 1ST  *
*                DATA = 40;             /* PICK UP NUM OF BYTES       *
         LA    @F,40                                              0269
         STH   @F,DATA                                            0269
*                DATARES = NUMBYTE3 - 40;     /* SAVE THE REMAINDER   *
         LH    @F,@D8                                             0270
         MVC   @TEMP2+2(2),10(@8)                                 0270
         A     @F,@TEMP2                                          0270
         STH   @F,DATARES                                         0270
         BC    15,@9E3                                            0272
*             END;                      /* CONTINUE  PROCESSING       *
*           ELSE                        /* LESS THAN 40 BYTES OF TXT  *
*             DO;                       /* TRANSLATE ALL NOW          *
*                DATA = NUMBYTE3;       /* PICK UP NUMBER OF BYTES    *
@9E4     L     @8,INPTR                                           0273
         MVC   DATA(2),10(@8)                                     0273
*                DATARES = '00'X;       /* ZERO OUT REMAINDER         *
         LA    @F,X'00'                                           0274
         STH   @F,DATARES                                         0274
*             END;                      /* CONTINUE PROCESSING        *
*         RTNPTR = ADDR(TXTLAB5);       /* SET RTN PTR                *
@9E3     LA    @F,TXTLAB5                                         0276
         ST    @F,RTNPTR                                          0276
*         PTRREG = ADDR(TXTDATA);       /* PTR TO BYTES TO BE TRANS   *
         L     @8,INPTR                                           0277
         LA    @2,16(0,@8)                                        0277
*         GO TO BTHLP2;                 /* TRANS TXT AND PUT IN BUFFER*
         BC    15,BTHLP2                                          0278
* TXTLAB5:RTNPTR = ADDR(TXTLAB6);       /* SET RTN PTR                *
TXTLAB5  LA    @F,TXTLAB6                                         0279
         ST    @F,RTNPTR                                          0279
*         BUF(1) = ' ';                 /* ASA CHAR TO PRT NXT LINE   *
         MVI   BUF,C' '                                           0280
*         GO TO OBJPUT;                 /* PRINT BUFFER               *
         BC    15,OBJPUT                                          0281
* TXTLAB6:BUF(1) = ' ';                 /* SET ASA CHAR FOR NEXT LINE *
TXTLAB6  MVI   BUF,C' '                                           0282
*         BUF(2:121) = BUF(1:120);      /* BLANK OUT HEADINGS         *
         MVC   BUF+1(120),BUF                                     0283
*         IF DATARES = '00'X            /* ANY MORE TXT TO TRANS?     *
*           THEN                        /* NO                         *
         LA    @F,X'00'                                           0284
         MVC   @TEMP2+2(2),DATARES                                0284
         C     @F,@TEMP2                                          0284
*             GO TO READ;               /* GO READ NEXT CARD          *
         BC    08,READ                                            0285
*           ELSE                        /* YES                        *
*             DO;                       /* SO                         *
*               RTNPTR = ADDR(TXTLAB7);  /* SET RTN PTR               *
         LA    @F,TXTLAB7                                         0287
         ST    @F,RTNPTR                                          0287
*               I = 33;                 /* SET INDEX INTO BUFFER      *
         MVI   I,33                                               0288
*               DATA = DATARES;         /* NUM BYTES LEFT TO TRANS    *
         MVC   DATA(2),DATARES                                    0289
*               GO TO BTHLP2;           /* GO TRANSLATE INTO BUFFER   *
         BC    15,BTHLP2                                          0290
*             END;                      /* END DO                     *
* TXTLAB7:RTNPTR = ADDR(READ);          /* SET RTN PTR TO READ NEXT CD*
TXTLAB7  LA    @F,READ                                            0292
         ST    @F,RTNPTR                                          0292
*         BUF(1) = ' ';                 /* ASA CHAR TO PRT NXT LINE   *
         MVI   BUF,C' '                                           0293
*         GO TO OBJPUT;                 /* PRINT OUT BUFFER           *
         BC    15,OBJPUT                                          0294
*         /************************************************************
*         /* RLD PROCESSING: HEADINGS                                 *
*         /************************************************************
* RLDTYP: K = 9;                        /* SET HEADING PTR            *
RLDTYP   MVI   K,9                                                0295
*         RTNPTR = ADDR(RLDLAB1);       /* SET RTN PTR                *
         LA    @F,RLDLAB1                                         0296
         ST    @F,RTNPTR                                          0296
*         BUF(1) = '0';                 /* SKIP NEXT PRINTING LINE    *
         MVI   BUF,C'0'                                           0297
*         GO TO INIT1;                  /* GO PUT HEADING IN BUFFER   *
         BC    15,INIT1                                           0298
* RLDLAB1:RTNPTR = ADDR(RLDLAB2);       /* SET RTN PTR                *
RLDLAB1  LA    @F,RLDLAB2                                         0299
         ST    @F,RTNPTR                                          0299
*         GO TO CARDNMHD;               /* PRINT BUFFER W/ LAST 8 CC  *
         BC    15,CARDNMHD                                        0300
* RLDLAB2:RLDPTR = INPTR + '0010'X;     /* PTR TO RLD CARD ITEM       *
RLDLAB2  L     @F,@X10                                            0301
         A     @F,INPTR                                           0301
         ST    @F,RLDPTR                                          0301
*         RLDCTR = NUMBYTE;             /* PICK UP NUM. ITEM BYTES    *
         L     @8,INPTR                                           0302
         MVC   RLDCTR(2),10(@8)                                   0302
* RLDLB2A:BUF(1) = ' ';                 /* PRINT ON NEXT LINE         *
RLDLB2A  MVI   BUF,C' '                                           0303
*         BUF(2:121) = BUF(1:120);      /* BLANK OUT BUFFER           *
         MVC   BUF+1(120),BUF                                     0304
*         I = 17;                       /* WHERE TO PLACE IN BUFFER   *
         MVI   I,17                                               0305
* RLDLAB3:IF RLDSW1 = '01'X             /* USE SAME PTRS AS LAST TIME?*
*           THEN                        /* YES                        *
RLDLAB3  CLI   RLDSW1,X'01'                                       0306
         BC    07,@9E2                                            0306
*             DO;                       /* FILL INTO OUTPUT BUFFER    *
*               BUF(I:I+3) = RPTRSAVE;  /* R POINTER                  *
         SR    @8,@8                                              0308
         IC    @8,I                                               0308
         LA    @A,BUF-1(@8)                                       0308
         MVC   0(4,@A),RPTRSAVE                                   0308
*               I = I + 8;              /* UPDATE BUFFER INDEX        *
         LA    @F,8                                               0309
         SR    @0,@0                                              0309
         IC    @0,I                                               0309
         AR    @F,@0                                              0309
         STC   @F,I                                               0309
*               BUF(I:I+3) = PPTRSAVE;  /* P POINTER                  *
         SR    @8,@8                                              0310
         IC    @8,I                                               0310
         LA    @A,BUF-1(@8)                                       0310
         MVC   0(4,@A),PPTRSAVE                                   0310
*               RLDSW2 = '01'X;         /* SET SWITCH TO UPDATE CTRS. *
         MVI   RLDSW2,X'01'                                       0311
*               RLDFLAG = FLAG2;        /* SAVE FLAG BYTE             *
         L     @9,RLDPTR                                          0312
         MVC   RLDFLAG(1),0(@9)                                   0312
*               RLDADDR = RLDADR2;      /* SAVE RLD ADDRESS           *
         MVC   RLDADDR(3),1(@9)                                   0313
*               GO TO RLDLAB4;          /* CONTINUE PROCESSING        *
         BC    15,RLDLAB4                                         0314
*             END;                      /* POINTERS IN BUFFER         *
*           ELSE                        /* MUST FILL IN NEW POINTERS  *
*             DO;                       /* POINTER CONVERSION         *
@9E2     EQU   *                                                  0316
*               GENERATE;               /* TRANS R PTR TO PRINT. DEC  *
         L     ADRREG,RLDPTR           PICK UP RLD ITEM PTR
         LH    PTRREG,RPTR(ADRREG)     PICK UP R PTR
         CVD   PTRREG,DBLWD            CONVERT TO DECIMAL
         UNPK  CVTWORK(5),DBLWD+5(3)  UNPACK IT
         OI    CVTWORK+4,X'F0'      'OR' OUT LAST ZONE
         DS    0H
*               BUF(I:I+3) = CVTWORK(2:5);  /* MOVE R PTR INTO BUFFER *
         SR    @8,@8                                              0318
         IC    @8,I                                               0318
         LA    @A,BUF-1(@8)                                       0318
         MVC   0(4,@A),CVTWORK+1                                  0318
*               GENERATE;               /* TRANS P PTR                *
         L     ADRREG,RLDPTR           PICK UP RLD ITEM PTR
         LH    PTRREG,PPTR(ADRREG)     PICK UP P PTR
         CVD   PTRREG,DBLWD            CONVERT TO DECIMAL
         UNPK  CVTWORK(5),DBLWD+5(3)  UNPACK IT
         OI    CVTWORK+4,X'F0'      'OR' OUT LAST ZONE
         DS    0H
*               I = I + 8;              /* UPDATE BUFFER PTR.         *
         LA    @F,8                                               0320
         SR    @0,@0                                              0320
         IC    @0,I                                               0320
         AR    @F,@0                                              0320
         STC   @F,I                                               0320
*               BUF(I:I+3) = CVTWORK(2:5);   /* MOVE INTO BUFFER      *
         SR    @8,@8                                              0321
         IC    @8,I                                               0321
         LA    @A,BUF-1(@8)                                       0321
         MVC   0(4,@A),CVTWORK+1                                  0321
*               RLDFLAG = FLAGS;        /* SAVE FLAG BYTE             *
         L     @9,RLDPTR                                          0322
         MVC   RLDFLAG(1),4(@9)                                   0322
*               RLDADDR = RLDADR;       /* SAVE RLD ADDRESS           *
         MVC   RLDADDR(3),5(@9)                                   0323
*               RLDSW2 = '00'X;         /* SET SWITCH TO  UPDATE PTRS *
         MVI   RLDSW2,X'00'                                       0324
*             END;                      /* END  CALCU.  IN PTRS       *
* RLDLAB4:DATA = '01'X;                 /* NUM BYTES TO TRANS TO HEX  *
@9E1     EQU   *                                                  0326
RLDLAB4  LA    @F,X'01'                                           0326
         STH   @F,DATA                                            0326
*         PTRREG = ADDR(RLDFLAG);       /* PICK UP ADDR OF FLAG BYTE  *
         LA    @2,RLDFLAG                                         0327
*         RTNPTR = ADDR(RLDLAB5);       /* SET RTN PTR                *
         LA    @F,RLDLAB5                                         0328
         ST    @F,RTNPTR                                          0328
*         I = I + 9;                    /* SET BUFFER PTR             *
         LA    @F,9                                               0329
         SR    @0,@0                                              0329
         IC    @0,I                                               0329
         AR    @F,@0                                              0329
         STC   @F,I                                               0329
*         GO TO BTHLP2;                 /* GO TRANSLATE INTO BUFFER   *
         BC    15,BTHLP2                                          0330
* RLDLAB5:RTNPTR = ADDR(RLDLAB6);       /* SET RTN PTR                *
RLDLAB5  LA    @F,RLDLAB6                                         0331
         ST    @F,RTNPTR                                          0331
*         PTRREG = ADDR(RLDADDR);       /* PTR TO WHAT TO TRANS       *
         LA    @2,RLDADDR                                         0332
*         I = I + 6;                    /* SET BUFFER POINTER         *
         LA    @F,6                                               0333
         SR    @0,@0                                              0333
         IC    @0,I                                               0333
         AR    @F,@0                                              0333
         STC   @F,I                                               0333
*         DATA = '03'X;                 /* NUM BYTES TO TRANS         *
         LA    @F,X'03'                                           0334
         STH   @F,DATA                                            0334
*         GO TO BTHLP2;                 /* GO TRANS INOT BUFFER       *
         BC    15,BTHLP2                                          0335
* RLDLAB6:IF PTRFLAG = '1'B             /* USE SAME PTRS FOR NEXT ITEM*
*           THEN                        /* YES, SAME PTRS             *
RLDLAB6  TM    RLDFLAG,B'00000001'                                0336
         BC    12,@9E0                                            0336
*             DO;                       /* SO SAVE PTRS               *
*               RPTRSAVE = BUF(I-23:I-20);  /* R PTR SAVED            *
         LH    @8,@D9                                             0338
         SR    @0,@0                                              0338
         IC    @0,I                                               0338
         AR    @8,@0                                              0338
         LH    @9,@D10                                            0338
         IC    @0,I                                               0338
         AR    @9,@0                                              0338
         SR    @8,@9                                              0338
         XC    @TEMP4(4),@TEMP4                                   0338
         LA    @E,BUF-1(@9)                                       0338
         LA    @A,@TEMP4+3                                        0338
         SR    @A,@8                                              0338
         EX    @8,@MVC                                            0338
         L     @F,@TEMP4                                          0338
         ST    @F,RPTRSAVE                                        0338
*               PPTRSAVE = BUF(I-15:I-12);  /* P PTR SAVED            *
         LH    @8,@D11                                            0339
         IC    @0,I                                               0339
         AR    @8,@0                                              0339
         LH    @9,@D12                                            0339
         IC    @0,I                                               0339
         AR    @9,@0                                              0339
         SR    @8,@9                                              0339
         XC    @TEMP4(4),@TEMP4                                   0339
         LA    @E,BUF-1(@9)                                       0339
         LA    @A,@TEMP4+3                                        0339
         SR    @A,@8                                              0339
         EX    @8,@MVC                                            0339
         L     @F,@TEMP4                                          0339
         ST    @F,PPTRSAVE                                        0339
*               RLDSW1 = '01'X;         /* TURN ON SWITCH: SAME PTRS  *
         MVI   RLDSW1,X'01'                                       0340
*               GO TO RLDLAB7;          /* CONTINUE                   *
         BC    15,RLDLAB7                                         0341
*             END;                      /* END SAVE PTRS FOR NEXT ITEM*
*           ELSE                        /* DON'T SAME PTRS            *
*             RLDSW1 = '00'X;           /* TURN  SWITCH OFF           *
@9E0     MVI   RLDSW1,X'00'                                       0343
*         /************************************************************
*         /* TO UPDATE COUNTERS                                       *
*         /************************************************************
* RLDLAB7:IF RLDSW2 = '01'X             /* WERE  OLD PTRS USED HERE?  *
*           THEN                        /* YES                        *
@9DF     EQU   *                                                  0344
RLDLAB7  CLI   RLDSW2,X'01'                                       0344
         BC    07,@9DE                                            0344
*             DO;                       /* UPDATE PTRS BY 4           *
*               RLDPTR = RLDPTR + 4;    /* PTR TO DATA ITEM           *
         LA    @F,4                                               0346
         A     @F,RLDPTR                                          0346
         ST    @F,RLDPTR                                          0346
*               RLDCTR = RLDCTR - 4;    /* COUNTER FOR LOOP           *
         LH    @F,RLDCTR                                          0347
         SH    @F,@D13                                            0347
         STH   @F,RLDCTR                                          0347
*               RLDSW2 = '00'X;         /* TURN OFF SWITCH            *
         MVI   RLDSW2,X'00'                                       0348
         BC    15,@9DD                                            0350
*             END;                      /* END UPDATE FOR OLD PTRS    *
*           ELSE                        /* NEW PTRS USED              *
*             DO;                       /* UPDATE BY 8                *
*               RLDPTR = RLDPTR + 8;      /* PTR TO DATA ITEM         *
@9DE     LA    @F,8                                               0351
         A     @F,RLDPTR                                          0351
         ST    @F,RLDPTR                                          0351
*               RLDCTR = RLDCTR - 8;      /* LOOP CTR                 *
         LH    @F,RLDCTR                                          0352
         SH    @F,@D7                                             0352
         STH   @F,RLDCTR                                          0352
*             END;                      /* COUNTERS UPDATED FOR NEW   *
* RLDLAB8:IF RLDCTR = '0000'X           /* FINISHED WITH PROCESSING?  *
*           THEN                        /* YES                        *
@9DD     EQU   *                                                  0354
RLDLAB8  L     @F,@X1                                             0354
         CH    @F,RLDCTR                                          0354
         BC    07,@9DC                                            0354
*             DO;                       /*  GO TO                     *
*               RTNPTR = ADDR(READ);    /*  READ NEXT CARD UPON RETURN*
         LA    @F,READ                                            0356
         ST    @F,RTNPTR                                          0356
*               BUF(1) = ' ';           /* ASA CHAR TO PRT NXT LINE   *
         MVI   BUF,C' '                                           0357
*               GO TO OBJPUT;           /*  PRINT LINE                *
         BC    15,OBJPUT                                          0358
*             END;                      /* RLD CARD FINISHED          *
*           ELSE;                       /* CONTINUE PROCESSING        *
@9DC     EQU   *                                                  0360
*         IF I >= 74                    /* IS LINE FULL?              *
*           THEN                        /* YES                        *
@9DB     CLI   I,74                                               0361
         BC    04,@9DA                                            0361
*             DO;                       /* THEREFORE                  *
*               RTNPTR = ADDR(RLDLB2A); /* CONTINUE UPON RETURN       *
         LA    @F,RLDLB2A                                         0363
         ST    @F,RTNPTR                                          0363
*               GO TO OBJPUT;           /* PRINT LINE                 *
         BC    15,OBJPUT                                          0364
*             END;                      /* LINE FINISHED              *
*           ELSE                        /* LINE NOT FINISHED          *
*             DO;                       /* THEREFORE                  *
*               I = I + 8;              /* UPDATE BUFFER INDEX        *
@9DA     LA    @F,8                                               0367
         SR    @0,@0                                              0367
         IC    @0,I                                               0367
         AR    @F,@0                                              0367
         STC   @F,I                                               0367
*               GO TO RLDLAB3;          /* AND CONTINUE ON THIS LINE  *
         BC    15,RLDLAB3                                         0368
*             END;                      /* END IF LINE NOT FINISHED   *
*         /************************************************************
*         /* END PROCESSING:  HEADINGS                                *
*         /************************************************************
* ENDTYP: K = 10;                       /* SET HEADING PTR            *
@9D9     EQU   *                                                  0370
ENDTYP   MVI   K,10                                               0370
*         RTNPTR = ADDR(ENDLAB1);       /* SET RTN PTR                *
         LA    @F,ENDLAB1                                         0371
         ST    @F,RTNPTR                                          0371
*         GO TO INIT1;                  /* PUT HEADING IN BUFFER      *
         BC    15,INIT1                                           0372
*         /************************************************************
*         /* END CARD PROCESSING: TO PROCESS DATA                     *
*         /************************************************************
* ENDLAB1:IF EPNAME = BUF(113:120)      /* CHECK FOR ENTRY PT NAME    *
*           THEN                        /* NO EP NAME                 *
ENDLAB1  L     @8,INPTR                                           0373
         CLC   16(8,@8),BUF+112                                   0373
*             GO TO ENDTYP1;            /* THEN TYPE 1 END CARD, GO DO*
         BC    08,ENDTYP1                                         0374
*           ELSE;                       /* YES EP NAME, SO PROCESS    *
*         K = 12;                       /* SET HEDING PTR FOR EP NAME *
         MVI   K,12                                               0376
*         RTNPTR = ADDR(ENDLAB2);       /* SET RTN PTR                *
         LA    @F,ENDLAB2                                         0377
         ST    @F,RTNPTR                                          0377
*         GO TO MVHDS;                  /* PUT HEADING IN BUFFER      *
         BC    15,MVHDS                                           0378
* ENDLAB2:BUF(26:33) = EPNAME;          /* PUT ENTRY PT NAME IN BUF   *
ENDLAB2  L     @8,INPTR                                           0379
         MVC   BUF+25(8),16(@8)                                   0379
* ENDLB2A:IF LTHBYTE = '00'X            /* IS THERE ANY LENGTH?       *
*           THEN                        /* YES, SO PROCESS            *
ENDLB2A  L     @8,INPTR                                           0380
         CLI   28(@8),X'00'                                       0380
*             GO TO ENDLTH;             /* GO PROCESS LENGTH          *
         BC    08,ENDLTH                                          0381
*           ELSE;                       /* NO LENGTH SO CONT.         *
* ENDLAB3:BUF(69:107) = CMPDATA;        /* COMPILER DATA MOVED IN BUF *
ENDLAB3  L     @8,INPTR                                           0383
         MVC   BUF+68(39),32(@8)                                  0383
*         RTNPTR = ADDR(READ);          /* END PROC.,RTN TO READ NEXT *
         LA    @F,READ                                            0384
         ST    @F,RTNPTR                                          0384
*         ESDCTR = '0000'X;             /* REINITIALIZE ESD ID CTR    *
         MVC   ESDCTR(2),@X1+2                                    0385
*         BUF(1) = '0';                 /* ASA CHAR TO SKIP NEXT LINE *
         MVI   BUF,C'0'                                           0386
*         GO TO CARDNMHD;               /* MOVE LAST 8 CC TO BUF & PRT*
         BC    15,CARDNMHD                                        0387
* ENDTYP1:IF ENDADDR = BUF(113:115)     /* ANY ADDR ON CARD?          *
*           THEN                        /* NO, GO CHECK FOR LENGTH    *
ENDTYP1  MVC   @TEMP3+1(3),BUF+112                                0388
         L     @F,@TEMP3                                          0388
         L     @8,INPTR                                           0388
         MVC   @TEMP3+1(3),5(@8)                                  0388
         C     @F,@TEMP3                                          0388
*             GO TO ENDLAB5;            /* GO CHECK ESD ID            *
         BC    08,ENDLAB5                                         0389
*           ELSE;                       /* YES, PROCESS ADDR          *
*         K = 11;                       /* SET HEADING PTR            *
         MVI   K,11                                               0391
*         RTNPTR = ADDR(ENDLAB4);       /* SET RTN PTR                *
         LA    @F,ENDLAB4                                         0392
         ST    @F,RTNPTR                                          0392
*         GO TO MVHDS;                  /* GO PUT HEADING IN BUFFER   *
         BC    15,MVHDS                                           0393
* ENDLAB4:I = 26;                       /* SET BUFFER PTR             *
ENDLAB4  MVI   I,26                                               0394
*         DATA = '03'X;                 /*  NUM BYTES TO TRANS        *
         LA    @F,X'03'                                           0395
         STH   @F,DATA                                            0395
*         RTNPTR = ADDR(ENDLAB5);       /* SET RTN PTR                *
         LA    @F,ENDLAB5                                         0396
         ST    @F,RTNPTR                                          0396
*         PTRREG = ADDR(ENDADDR);       /* BYTES TO BE TRANS. PTR     *
         L     @8,INPTR                                           0397
         LA    @2,5(0,@8)                                         0397
*         GO TO BTHLP2;                 /* TRANS ADDR AND PUT IN BUF  *
         BC    15,BTHLP2                                          0398
* ENDLAB5:IF ENDESD = BUF(113:114)      /* IS THERE AN ESD ID PRESENT?*
*           THEN                        /* NO                         *
ENDLAB5  MVC   @TEMP2+2(2),BUF+112                                0399
         L     @F,@TEMP2                                          0399
         L     @8,INPTR                                           0399
         MVC   @TEMP2+2(2),14(@8)                                 0399
         C     @F,@TEMP2                                          0399
*             GO TO ENDLB2A;            /* GO CONTINUE PROCESSING     *
         BC    08,ENDLB2A                                         0400
*           ELSE;                       /* ESD ID PRESENT, SO PROCESS *
*         K = 13;                       /* HEADING PTR OF ESDID       *
         MVI   K,13                                               0402
*         RTNPTR = ADDR(ENDLAB6);       /* SET RTN PTR                *
         LA    @F,ENDLAB6                                         0403
         ST    @F,RTNPTR                                          0403
*         GO TO MVHDS;                  /* PUT ESDID HEADING IN BUFFER*
         BC    15,MVHDS                                           0404
* ENDLAB6:GENERATE;                     /* TRANS ESDID TO PRINT. DEC  *
ENDLAB6  EQU   *                                                  0405
         L     ADRREG,INPTR            PICK UP CARD PTR ADDR
         LH    PTRREG,ENDESD(ADRREG)   PICK UP END ESD ID
         CVD   PTRREG,DBLWD            CONVERT TO DECIMAL
         UNPK  CVTWORK(5),DBLWD+5(3)  UNPACK IT
         OI    CVTWORK+4,X'F0'      'OR' OUT LAST ZONE
         DS    0H
*         BUF(46:49) = CVTWORK(2:5);    /* MOVE INTO BUFFER           *
         MVC   BUF+45(4),CVTWORK+1                                0406
*         GO TO ENDLB2A;                /* CONTINUE PROCESSING        *
         BC    15,ENDLB2A                                         0407
* ENDLTH: K = 14;                       /* SET HEADING PTR,ESD LTH    *
ENDLTH   MVI   K,14                                               0408
*         RTNPTR = ADDR(ENDLAB7);       /* SET RTN PTR                *
         LA    @F,ENDLAB7                                         0409
         ST    @F,RTNPTR                                          0409
*         GO TO MVHDS;                  /* PUT HEADING IN BUF         *
         BC    15,MVHDS                                           0410
* ENDLAB7:DATA = '04'X;                 /* NUM BYTES TO TRANS.:LTH    *
ENDLAB7  LA    @F,X'04'                                           0411
         STH   @F,DATA                                            0411
*         I = 59;                       /* SET OUTPUT BUFFER INDEX    *
         MVI   I,59                                               0412
*         PTRREG = ADDR(CSLTH);         /* PTR TO BYTES TO TRANS      *
         L     @8,INPTR                                           0413
         LA    @2,28(0,@8)                                        0413
*         RTNPTR = ADDR(ENDLAB3);       /* SET RTN PTR TO CONT.PROC   *
         LA    @F,ENDLAB3                                         0414
         ST    @F,RTNPTR                                          0414
*         GO TO BTHLP2;                 /* TRANS TO PRINT. HEX        *
         BC    15,BTHLP2                                          0415
*         /************************************************************
*         /* BINARY TO PRINTABLE HEX ROUTEEN                          *
*         /* DATA CONTAINS NUMBER OF BYTES TO TRANSLATE               *
*         /* PTRREG = REG2 CONTAINS TO ADDR OF THE BYTES TO TRANSLATE *
*         /* I IS THE INDEX INTO THE BUFFER AREA WHERE THE TRANSLATED *
*         /*   BYTES ARE TO BE PLACED                                 *
*         /* ENTERRED AT:                                             *
*         /*    CVTHEX - IF I TO BE 28 AND MORE THAN 40 BYTES TO TRANS*
*         /*    BTHLP2 - IF I IS ALREADY SPECIFIED                    *
*         /************************************************************
* CVTHEX: I = 28;                       /* SET BUF PTR TO 28          *
CVTHEX   MVI   I,28                                               0416
* BTHLP2: IF DATA >= '0004'X            /* MRE THAN 8 CHAR TO TRANS?  *
*           THEN                        /* YES                        *
BTHLP2   L     @F,@X12                                            0417
         MVC   @TEMP2+2(2),DATA                                   0417
         C     @F,@TEMP2                                          0417
         BC    02,@9D8                                            0417
*             DO;                       /* PROCESS 4 BYTES            *
*               GENERATE;               /* CONVERT TO PRINT. HEX      *
UNPACK       UNPK  CVTWORK(9),0(5,PTRREG)  UNPACK BYTES
ANDIT        NC    CVTWORK(8),ZEROZONE   'AND' OUT ZONES
TRANS        TR    CVTWORK(8),CVTTABLE   FIND EBCD CHAR
         DS    0H
*               DATA = DATA - 4;        /* UPDATE NUM BYTE TO GO      *
         MVC   @TEMP2+2(2),DATA                                   0420
         L     @F,@TEMP2                                          0420
         SH    @F,@D13                                            0420
         STH   @F,DATA                                            0420
*               PTRREG = PTRREG + 4;    /* UPDATE TO NEXT 4 BYTES     *
         AH    @2,@D13                                            0421
*               BUF(I:I+7) = CVTWORK;   /* MOVE TRANS'ED BYTES TO BUF *
         SR    @8,@8                                              0422
         IC    @8,I                                               0422
         LA    @A,BUF-1(@8)                                       0422
         MVC   0(8,@A),CVTWORK                                    0422
*               I = I + 9;              /* UPDATE BUF PTR             *
         LA    @F,9                                               0423
         SR    @0,@0                                              0423
         IC    @0,I                                               0423
         AR    @F,@0                                              0423
         STC   @F,I                                               0423
*               GO TO BTHLP2;           /* CONTINUE PROCESSING        *
         BC    15,BTHLP2                                          0424
*             END;                      /* END DO FOR DATA <= 4       *
*           ELSE                        /* LESS THAN 4 BYTES TO TRANS *
*             DO;                       /* PROCESS REMAINING BYTES    *
*               IF DATA = '00'X         /* FINISHED TRANSLATING       *
*                 THEN                  /* YES                        *
@9D8     LA    @F,X'00'                                           0427
         MVC   @TEMP2+2(2),DATA                                   0427
         C     @F,@TEMP2                                          0427
*                   GO TO DONECVT;      /* COMPLETE PROCESSING        *
         BC    08,DONECVT                                         0428
*                 ELSE                  /* NOT FINISHED               *
*                   DO;                 /* PROCESS REMAINING BYTES    *
*                     GENERATE;         /* TRANS. IF < 4 BYTES        *
           UNPK  CVTWORK(9),0(5,PTRREG)   UNPACK BYTES
           NC    CVTWORK(8),ZEROZONE   'AND' OUT ZONES
           TR    CVTWORK(8),CVTTABLE   FIND EBCD CHAR
         DS    0H
*                     J = I + (DATA * 2 - 1);     /* PTR TO LAST BYTE *
         LA    @E,2                                               0431
         MVC   @TEMP2+2(2),DATA                                   0431
         LR    @F,@E                                              0431
         M     @E,@TEMP2                                          0431
         BCTR  @F,0                                               0431
         SR    @0,@0                                              0431
         IC    @0,I                                               0431
         AR    @F,@0                                              0431
         STC   @F,J                                               0431
*                     BUF(I:J) = CVTWORK(1:J-I);   /* MOVE INTO BUFFER*
         LA    @E,CVTWORK                                         0432
         SR    @8,@8                                              0432
         IC    @8,J                                               0432
         SR    @9,@9                                              0432
         IC    @9,I                                               0432
         SR    @8,@9                                              0432
         LA    @A,BUF-1(@9)                                       0432
         EX    @8,@MVC                                            0432
*                   END;                /* END 'NOT FINISHED' DO      *
*             END;                      /* END DO FOR DATA < 4        *
* DONECVT:GO TO RETRN;                  /* RETURN TO CALLER           *
@9D7     EQU   *                                                  0435
DONECVT  L     @8,RTNPTR                                          0435
         BCR   15,@8                                              0435
*         /************************************************************
*         /* END OF FILE RTN                                          *
*         /************************************************************
* OBJEOF: RETURN;                       /* RTN TO CONTROL PGM         *
*         GENERATE;                     /* DSECT FOR DCB              *
         DCBD  DSORG=PS                DSECT FOR DCB
HMBLKOBJ CSECT
         DS    0H
*         END HMBLKOBJ;                 /* END HMBLKOBJ               *
@EL01    L     @D,4(0,@D)                                         0438
         LR    @1,@C                                              0438
         L     @0,@SIZ001                                         0438
         FREEMAIN R,LV=(0),A=(1)                                  0438
         L     @E,12(0,@D)                                        0438
         LM    @0,@C,20(@D)                                       0438
         BCR   15,@E                                              0438
@DATA1   EQU   *
@0       EQU   00                  EQUATES FOR REGISTERS 0-15
@1       EQU   01
@2       EQU   02
@3       EQU   03
@4       EQU   04
@5       EQU   05
@6       EQU   06
@7       EQU   07
@8       EQU   08
@9       EQU   09
@A       EQU   10
@B       EQU   11
@C       EQU   12
@D       EQU   13
@E       EQU   14
@F       EQU   15
@D1      DC    H'-1'
@D2      DC    H'3'
@D3      DC    H'1'
@D4      DC    H'5'
@D5      DC    H'-36'
@D6      DC    H'6'
@D7      DC    H'8'
@D8      DC    H'-40'
@D9      DC    H'-20'
@D10     DC    H'-23'
@D11     DC    H'-12'
@D12     DC    H'-15'
@D13     DC    H'4'
@MVC     MVC   0(1,@A),0(@E)
         DS    0F
@SIZ001  DC    AL1(&SPN)
         DC    AL3(@DATEND-@DATD)
         DS    0F
@X1      DC    X'00000000'
@X8      DC    X'00000001'
@X10     DC    X'00000010'
@X12     DC    X'00000004'
         DS    0D
@DATA    EQU   *
DUMMY    EQU   00000000            FULLWORD INTEGER
REG1     EQU   00000001            FULLWORD POINTER REGISTER
PARMLIST EQU   00000000            52 BYTE(S) ON WORD
DCBIN    EQU   PARMLIST+00000000   FULLWORD POINTER
DCBOUT   EQU   PARMLIST+00000004   FULLWORD POINTER
TITLEAD  EQU   PARMLIST+00000008   FULLWORD POINTER
GETAREA  EQU   PARMLIST+00000012   FULLWORD POINTER
A00000   EQU   PARMLIST+00000016   FULLWORD INTEGER
A00001   EQU   PARMLIST+00000020   HALFWORD POINTER
BLKCNT   EQU   PARMLIST+00000022   HALFWORD INTEGER
WORKBUF  EQU   PARMLIST+00000024   FULLWORD POINTER
A00002   EQU   PARMLIST+00000028   FULLWORD INTEGER
ERRORS   EQU   PARMLIST+00000032   32 BIT(S)
MEMNAME  EQU   PARMLIST+00000036   8 BYTE(S)
DDNAME   EQU   PARMLIST+00000044   8 BYTE(S)
TITLE    EQU   00000000            121 BYTE(S)
ADRREG   EQU   00000003            FULLWORD INTEGER REGISTER
DECBSTR  EQU   00000000            20 BYTE(S) ON WORD
A00003   EQU   DECBSTR+00000000    16 BYTE(S)
IOBADR   EQU   DECBSTR+00000016    FULLWORD POINTER
IOBSTR   EQU   00000000            16 BYTE(S) ON WORD
A00004   EQU   IOBSTR+00000000     9 BYTE(S)
IOBCSW   EQU   IOBSTR+00000009     7 BYTE(S)
A00005   EQU   IOBSTR+00000009     5 BYTE(S)
RESIDCT  EQU   IOBSTR+00000014     2  BYTE  POINTER
CARD     EQU   00000000            80 BYTE(S) ON WORD
ZEROTWO  EQU   CARD+00000000       1 BYTE(S) ON WORD
CARDTYP  EQU   CARD+00000001       3 BYTE(S)
DATAS    EQU   CARD+00000004       68 BYTE(S)
CARDCHAR EQU   CARD+00000072       8 BYTE(S)
HEADERS  EQU   @DATA+00000000      96 BYTE(S) ON WORD
WDSADR   EQU   *                   16*FULLWORD POINTER
         DC    AL4(W1)
         DC    AL4(W2)
         DC    AL4(W3)
         DC    AL4(W4)
         DC    AL4(W5)
         DC    AL4(W6)
         DC    AL4(W7)
         DC    AL4(W8)
         DC    AL4(W9)
         DC    AL4(W10)
         DC    AL4(W11)
         DC    AL4(W12)
         DC    AL4(W13)
         DC    AL4(W14)
         DC    AL4(W15)
         DC    AL4(W16)
WHERE    EQU   *                   16*1  BYTE  POINTER
         DC    AL1(2)
         DC    AL1(113)
         DC    AL1(2)
         DC    AL1(14)
         DC    AL1(2)
         DC    AL1(2)
         DC    AL1(2)
         DC    AL1(2)
         DC    AL1(2)
         DC    AL1(2)
         DC    AL1(18)
         DC    AL1(18)
         DC    AL1(33)
         DC    AL1(52)
         DC    AL1(2)
         DC    AL1(52)
LNGTH    EQU   *                   16*1  BYTE  POINTER
         DC    AL1(21)
         DC    AL1(5)
         DC    AL1(12)
         DC    AL1(14)
         DC    AL1(11)
         DC    AL1(44)
         DC    AL1(5)
         DC    AL1(30)
         DC    AL1(107)
         DC    AL1(12)
         DC    AL1(8)
         DC    AL1(8)
         DC    AL1(12)
         DC    AL1(7)
         DC    AL1(13)
         DC    AL1(8)
WORDS    EQU   @DATA+00000096      318 BYTE(S) ON WORD
W1       EQU   *                   21 BYTE(S)
         DC    C'OBJECT MODULE LISTING'
W2       EQU   *                   5 BYTE(S)
         DC    C'PAGE '
W3       EQU   *                   12 BYTE(S)
         DC    C'SYM RECORD: '
W4       EQU   *                   14 BYTE(S)
         DC    C'TESTRAN DATA: '
W5       EQU   *                   12 BYTE(S)
         DC    C'ESD RECORD: '
W6       EQU   *                   44 BYTE(S)
         DC    C' ESDID    TYPE      NAME     ADDR    ID/LT'
         DC    C'H '
W7       EQU   *                   5 BYTE(S)
         DC    C'TXT: '
W8       EQU   *                   30 BYTE(S)
         DC    C' ADDR=       ESDID=      TEXT:'
W9       EQU   *                   107 BYTE(S)
         DC    C'RLD RECORD:    R PTR   P PTR   FLAGS   ADD'
         DC    C'R   R PTR   P PTR   FLAGS   ADDR   R PTR  '
         DC    C' P PTR   FLAGS   ADDR  '
W10      EQU   *                   12 BYTE(S)
         DC    C'END RECORD: '
W11      EQU   *                   8 BYTE(S)
         DC    C'EP ADDR='
W12      EQU   *                   8 BYTE(S)
         DC    C'EP NAME='
W13      EQU   *                   12 BYTE(S)
         DC    C'ESDID OF EP='
W14      EQU   *                   7 BYTE(S)
         DC    C'LENGTH='
W15      EQU   *                   13 BYTE(S)
         DC    C'****ERROR****'
W16      EQU   *                   8 BYTE(S)
         DC    C'MEMBER= '
HEADBUF  EQU   00000000            120 BYTE(S)
TYPETAB  EQU   @DATA+00000416      36 BYTE(S) ON WORD
         ORG   TYPETAB+00000001
TYADR    EQU   *                   5*3  BYTE  POINTER ON WORD+1
         DC    AL3(SYMTYP)
         ORG   TYADR+00004
         DC    AL3(ESDTYP)
         ORG   TYADR+00008
         DC    AL3(TXTTYP)
         ORG   TYADR+00012
         DC    AL3(RLDTYP)
         ORG   TYADR+00016
         DC    AL3(ENDTYP)
         ORG   TYPETAB+00000021
TPES     EQU   *                   5*3 BYTE(S)
         DC    C'SYM'
         DC    C'ESD'
         DC    C'TXT'
         DC    C'RLD'
         DC    C'END'
SYMREC   EQU   00000000            72 BYTE(S) ON WORD
A00006   EQU   SYMREC+00000000     10 BYTE(S)
NUMBYTE  EQU   SYMREC+00000010     HALFWORD POINTER
A00007   EQU   SYMREC+00000012     4 BYTE(S)
TESTDATA EQU   SYMREC+00000016     56 BYTE(S)
ESDHD    EQU   00000000            16 BYTE(S) ON WORD
A00008   EQU   ESDHD+00000000      14 BYTE(S)
FSTESDID EQU   ESDHD+00000014      HALFWORD POINTER
ESDATA   EQU   00000000            16 BYTE(S) ON WORD
NAME     EQU   ESDATA+00000000     8 BYTE(S)
TYPE     EQU   ESDATA+00000008     1  BYTE  POINTER
ADRES    EQU   ESDATA+00000009     3  BYTE  POINTER ON WORD+1
A00009   EQU   ESDATA+00000012     1 BYTE(S)
IDORLGTH EQU   ESDATA+00000013     3  BYTE  POINTER ON WORD+1
ESDTABLE EQU   @DATA+00000452      56 BYTE(S) ON WORD
ESDTAB   EQU   *                   8*1  BYTE  POINTER
         DC    XL1'00'
         DC    XL1'01'
         DC    XL1'02'
         DC    XL1'03'
         DC    XL1'04'
         DC    XL1'05'
         DC    XL1'06'
         DC    XL1'0A'
TYPTAB   EQU   *                   8*6 BYTE(S)
         DC    C'SD(00)'
         DC    C'LD(01)'
         DC    C'ER(02)'
         DC    C'LR(03)'
         DC    C'PC(04)'
         DC    C'CM(05)'
         DC    C'PR(06)'
         DC    C'WX(0A)'
TXTCD    EQU   00000000            71 BYTE(S) ON WORD
A00010   EQU   TXTCD+00000000      5 BYTE(S)
TXTADDR  EQU   TXTCD+00000005      3  BYTE  POINTER ON WORD+1
A00011   EQU   TXTCD+00000008      HALFWORD POINTER
NUMBYTE3 EQU   TXTCD+00000010      HALFWORD POINTER
A00012   EQU   TXTCD+00000012      HALFWORD POINTER
ESDIFER  EQU   TXTCD+00000014      HALFWORD POINTER
TXTDATA  EQU   TXTCD+00000016      55 BYTE(S)
RLDDATA  EQU   00000000            8 BYTE(S) ON WORD
RPTR     EQU   RLDDATA+00000000    2  BYTE  POINTER ON WORD
PPTR     EQU   RLDDATA+00000002    HALFWORD POINTER
FLAGS    EQU   RLDDATA+00000004    1 BYTE(S)
RLDADR   EQU   RLDDATA+00000005    3 BYTE(S)
RLDNOPTR EQU   00000000            4 BYTE(S) ON WORD
FLAG2    EQU   RLDNOPTR+00000000   1 BYTE(S)
RLDADR2  EQU   RLDNOPTR+00000001   3 BYTE(S)
ENDCARD  EQU   00000000            71 BYTE(S) ON WORD
A00014   EQU   ENDCARD+00000000    5 BYTE(S) ON WORD
ENDADDR  EQU   ENDCARD+00000005    3  BYTE  POINTER ON WORD+1
A00015   EQU   ENDCARD+00000008    6 BYTE(S)
ENDESD   EQU   ENDCARD+00000014    HALFWORD POINTER
EPNAME   EQU   ENDCARD+00000016    8 BYTE(S)
A00016   EQU   ENDCARD+00000024    4 BYTE(S)
CSLTH    EQU   ENDCARD+00000028    4 BYTE(S)
LTHBYTE  EQU   ENDCARD+00000028    1 BYTE(S)
A00017   EQU   ENDCARD+00000029    3 BYTE(S)
CMPDATA  EQU   ENDCARD+00000032    39 BYTE(S)
ZEROZONE EQU   *                   8 BYTE(S)
         DC    X'0F0F0F0F0F0F0F0F'
CVTTABLE EQU   *                   16 BYTE(S)
         DC    C'0123456789ABCDEF'
PTRREG   EQU   00000002            FULLWORD INTEGER REGISTER
         ORG   @DATA+00000536
MAINT    EQU   *                   175 BYTE(S) ON DWORD
         DC    C'MAINTENANCE'
         DC    00164C' '
         ORG   @DATA
         DS    00000711C
@L       EQU   6
@DATD    DSECT
@SAV001  EQU   @DATD+00000000      72 BYTE(S) ON WORD
PARMPTR  EQU   @DATD+00000072      FULLWORD POINTER
INPTR    EQU   @DATD+00000076      FULLWORD POINTER
LINECT   EQU   @DATD+00000080      HALFWORD INTEGER
PAGCTR   EQU   @DATD+00000082      HALFWORD INTEGER
MLOG     EQU   @DATD+00000084      HALFWORD INTEGER
READLIST EQU   @DATD+00000088      30 BYTE(S) ON WORD
RDCTR    EQU   @DATD+00000118      1  BYTE  POINTER
DECBPTR  EQU   @DATD+00000120      FULLWORD POINTER
RTNPTR   EQU   @DATD+00000124      FULLWORD POINTER
WDSPTR   EQU   @DATD+00000128      FULLWORD POINTER
I        EQU   @DATD+00000132      1  BYTE  POINTER
J        EQU   @DATD+00000133      1  BYTE  POINTER
K        EQU   @DATD+00000134      1  BYTE  POINTER
L        EQU   @DATD+00000135      1  BYTE  POINTER
N        EQU   @DATD+00000136      1  BYTE  POINTER
P        EQU   @DATD+00000137      1  BYTE  POINTER
Q        EQU   @DATD+00000138      1  BYTE  POINTER
CARDPTR  EQU   @DATD+00000140      FULLWORD POINTER
ESDID    EQU   @DATD+00000144      4 BYTE(S)
ESDCTR   EQU   @DATD+00000148      HALFWORD POINTER
RLDPTR   EQU   @DATD+00000152      FULLWORD POINTER
RLDCTR   EQU   @DATD+00000156      HALFWORD POINTER
LOOPCTR  EQU   @DATD+00000158      HALFWORD POINTER
RLDSW1   EQU   @DATD+00000160      1  BYTE  POINTER
RLDSW2   EQU   @DATD+00000161      1  BYTE  POINTER
RPTRSAVE EQU   @DATD+00000164      FULLWORD INTEGER
PPTRSAVE EQU   @DATD+00000168      FULLWORD INTEGER
RLDFLAG  EQU   @DATD+00000172      1 BYTE(S)
A00013   EQU   RLDFLAG+00000000    7 BIT(S)
PTRFLAG  EQU   RLDFLAG+00000000    1 BIT(S)
RLDADDR  EQU   @DATD+00000173      3 BYTE(S)
DATA     EQU   @DATD+00000176      HALFWORD POINTER
DATARES  EQU   @DATD+00000178      HALFWORD POINTER
DBLWD    EQU   @DATD+00000184      8 BYTE(S) ON DWORD
CVTWORK  EQU   @DATD+00000192      8 BYTE(S)
BUF      EQU   @DATD+00000200      121 BYTE(S)
         DS    00000321C
@TEMPS   DS    0F
@TEMP2   DC    F'0'
@TEMP3   DC    F'0'
@TEMP4   DC    F'0'
@DATEND  EQU   *
HMBLKOBJ CSECT ,
OBJEOF   EQU   @EL01
         END   HMBLKOBJ,(C'PL/S',1400,75247)
