         TITLE 'HMBLKIDR -- IDR LISTING PROCESSOR'
         LCLA  &T,&SPN                                            0001
.@001    ANOP                                                     0001
HMBLKIDR CSECT ,                                                  0001
         BC    15,14(0,@F)
         DC    C'©HMBLKIDR'                                       0001
         ST    @E,12(0,@D)                                        0001
         STM   @0,@C,20(@D)                                       0001
         BALR  @9,0                                               0001
@PSTART  DS    0H                                                 0001
         USING @PSTART+00000,@9                                   0001
         LA    @B,4095(0,@9)                                      0001
         USING @PSTART+04095,@B                                   0001
         L     @0,@SIZ001                                         0001
         GETMAIN  R,LV=(0)                                        0001
         LR    @C,@1                                              0001
         USING @DATD+00000,@C                                     0001
         LM    @0,@1,20(@D)                                       0001
         XC    @TEMPS(@L),@TEMPS                                  0001
         ST    @D,@SAV001+4                                       0001
         LA    @F,@SAV001                                         0001
         ST    @F,8(0,@D)                                         0001
         LR    @D,@F                                              0001
*         PARMPTR=REG1;                 /* START OF PLIST             *
         ST    @1,PARMPTR                                         0080
*         TRNOUT=GMLENGTH/3;            /* DIVIDE AREA INTO 3 PARTS   *
         L     @3,PARMPTR                                         0081
         L     @E,16(0,@3)                                        0081
         SRDA  @E,32                                              0081
         LA    @0,3                                               0081
         DR    @E,@0                                              0081
         ST    @F,TRNOUT                                          0081
*         CSDPT=AREAGET;                /* START OF CESD TABLE        *
         MVC   CSDPT(4),12(@3)                                    0082
*         SORTOUT=AREAGET+GMLENGTH/3;   /* START OF SORTAREA          *
         L     @E,16(0,@3)                                        0083
         SRDA  @E,32                                              0083
         LA    @0,3                                               0083
         DR    @E,@0                                              0083
         A     @F,12(0,@3)                                        0083
         ST    @F,SORTOUT                                         0083
*         TRNOUT=SORTOUT+TRNOUT/2;      /* START OF TRANS DESCRIP     *
         L     @E,TRNOUT                                          0084
         SRDA  @E,32                                              0084
         LA    @0,2                                               0084
         DR    @E,@0                                              0084
         A     @F,SORTOUT                                         0084
         ST    @F,TRNOUT                                          0084
*         OUT=SORTOUT+GMLENGTH/3;       /* START OF PRINT AREA        *
         L     @E,16(0,@3)                                        0085
         SRDA  @E,32                                              0085
         LA    @0,3                                               0085
         DR    @E,@0                                              0085
         A     @F,SORTOUT                                         0085
         ST    @F,OUT                                             0085
*         CSDNXT=CSDPT;                 /* FORWARD PTR FOR CESD TABLE *
         MVC   CSDNXT(4),CSDPT                                    0086
*         FLG1='00'X;                   /* ZAP FLAG                   *
         MVI   FLG1,X'00'                                         0087
*         ESDNO = 0;                    /*                    YM3113P *
         SR    @F,@F                                              0088
         STH   @F,ESDNO                                           0088
*         LL = 0;                       /*                    YM3113P *
         STH   @F,LL                                              0089
*         SW1(1:2)='00'B;               /* ZERO OUT BITS              *
         NI    SW1,B'00111111'                                    0090
*         TYP='0'B;
         NI    TYP,B'01111111'                                    0091
*         PG='0001';                    /* FOR PAGE NUMBER            *
         MVC   PG(4),@C4                                          0092
*         PGCNT=1;                      /* PGCNT=BINARY ONE   @ZA04919*
         LA    @F,1                                               0093
         STH   @F,PGCNT                                           0093
*         BLANKS=' ';                   /* FOR BLANKING OUT AREAS     *
         MVI   BLANKS,C' '                                        0094
*         RESTRICT (5,6);               /* RESTRICT R5 AND R6         *
*         GEN DATA;
* READRT: R6=DCBIN;                     /* ADDR OF INPUT DCB          *
READRT   L     @3,PARMPTR                                         0097
         L     @6,0(0,@3)                                         0097
*         R5=BUFF;                      /* ADDR OF READ BUFFER        *
         L     @5,24(0,@3)                                        0098
*         GENERATE;
         MVC   READLIST(RDLGTH),RDLIST  MOVE IN LIST FORM OF READ
         READ  READLIST,SF,(6),(5),'S',MF=E
         CHECK READLIST
         DS    0H
*         IF NOTEDIT='1'B               /* NOT-EDITABLE MODULE?       *
*            THEN                       /* YES                        *
         TM    20(@3),B'00100000'                                 0100
         BC    12,@9FF                                            0100
*              DO;                      /* BEGIN DO LOOP              *
*                GENERATE;
         NOTE  (R6)                    GET TTR FROM READ
         ST    1,NOTETTR               SAVE TTR
         DS    0H
*                NOTEDIT='0'B;          /* TURN OFF NOT-EDITABLE BIT  *
         NI    20(@3),B'11011111'                                 0103
*                IF NOTETTR(1:3)=TXTTR  /* IS 1ST RECORD TEXT?        *
*                   THEN                /* YES                        *
         CLC   NOTETTR(3),52(@3)                                  0104
         BC    07,@9FE                                            0104
*                     IF NORLD='1'B     /* NO RLD RECORDS?            *
*                        THEN           /* NO RLDS                    *
         TM    20(@3),B'00010000'                                 0105
*                          GOTO ERR2;   /* ERROR MSG NO IDR DATA      *
         BC    01,ERR2                                            0106
*                        ELSE           /* RLD RECORDS                *
*                          GOTO READRT; /* READ ANOTHER RECORD        *
         BC    15,READRT                                          0107
*                END;
@9FE     EQU   *                                                  0108
*         INREC=BUFF;                   /* INPUT RECORD ADDRESS       *
@9FF     L     @3,PARMPTR                                         0109
         MVC   INREC(4),24(@3)                                    0109
*         RELEASE (5,6);                /* RELEASE RESTRICTION        *
*         IF TYPE='40'X                 /* SYM RECORD?                *
*           THEN                        /* YES                        *
         L     @8,INREC                                           0111
         CLI   0(@8),X'40'                                        0111
*             GO TO READRT;             /* READ NEXT RECORD           *
         BC    08,READRT                                          0112
*           ELSE;                       /* NULL ELSE                  *
*         IF TYPE='20'X                 /* CESD RECORD                *
*           THEN                        /* YES                        *
         CLI   0(@8),X'20'                                        0114
         BC    07,@9FD                                            0114
*             DO;                       /* BEGINNING OF DO LOOP       *
*               ESDNO=ESDID;            /* STARTING ID NUMBER         *
         MVC   ESDNO(2),4(@8)                                     0116
*               ESDCOUNT=COUNT;         /* NUMBER OF ESD DATA BYTES   *
         MVC   ESDCOUNT(2),6(@8)                                  0117
*               NEXT=INREC+8;           /* START OF ESD DATA          *
         LA    @F,8                                               0118
         A     @F,INREC                                           0118
         ST    @F,NEXT                                            0118
*               TBIT='00'X;             /* ZERO OUT SPECIAL BYTE      *
         MVI   TBIT,X'00'                                         0119
*               GO TO CESDRT;           /* BRANCH TO CESD RTN.        *
         BC    15,CESDRT                                          0120
*             END;                      /* END OF DO LOOP             *
*           ELSE;                       /* NULL ELSE                  *
@9FD     EQU   *                                                  0122
*         IF TYPE='80'X                 /* IDR RECORD                 *
*           THEN                        /* YES                        *
@9FC     L     @3,INREC                                           0123
         CLI   0(@3),X'80'                                        0123
         BC    07,@9FB                                            0123
*             DO;                       /* DO LOOP                    *
*               SW1(1)='1'B;            /* SET SWITCH - IDR           *
         OI    SW1,B'10000000'                                    0125
*               GO TO IDRTN;            /* PROCESS IDR RECORD         *
         BC    15,IDRTN                                           0126
*             END;                      /* END OF DO LOOP             *
*           ELSE
*             DO;                       /* DO LOOP                    *
*               IF SW1(1)='0'B          /* HAVE IDR'S BEEN PROCESSED  *
*                 THEN                  /* NO                         *
@9FB     TM    SW1,B'10000000'                                    0129
*                   GO TO ERR2;         /* NO IDR RECORDS             *
         BC    08,ERR2                                            0130
*                 ELSE                  /* YES                        *
*                   GO TO ERR3;         /* MISSING IDR RECORDS        *
         BC    15,ERR3                                            0131
*             END;                      /* END OF DO LOOP             *
* CESDRT: IF ESDTYP(5:8)='0000'B
*           THEN
@9FA     EQU   *                                                  0133
CESDRT   L     @3,NEXT                                            0133
         TM    8(@3),B'00001111'                                  0133
*             GO TO CSDRT1;             /* BEGIN PROCESSING CSED REC  *
         BC    08,CSDRT1                                          0134
*           ELSE;                       /* NULL ELSE                  *
*         IF ESDTYP(5:8)='0100'B        /* PRIVATE CODE               *
*           THEN                        /* YES                        *
         TM    8(@3),B'00000100'                                  0136
         BC    12,@9F9                                            0135
         TM    8(@3),B'00001011'                                  0136
         BC    05,@9F8                                            0136
*             DO;
*               NAME='$PRIVATE';        /* PUT NAME IN                *
         L     @8,CSDNXT                                          0138
         MVC   0(8,@8),@C12                                       0138
*               GO TO CSDPVT;           /* BEGIN PROCESSING CSED REC  *
         BC    15,CSDPVT                                          0139
*             END;
*           ELSE
*             DO;
@9F8     EQU   *                                                  0141
@9F9     EQU   *                                                  0141
* CSD:          ESDCOUNT=ESDCOUNT-16;   /* RECORD LENGTH COUNT        *
CSD      LH    @F,ESDCOUNT                                        0142
         SH    @F,@D1                                             0142
         STH   @F,ESDCOUNT                                        0142
*               IF ESDCOUNT = 0         /* ANY MORE DATA?             *
*                 THEN                  /* NO                         *
         SR    @F,@F                                              0143
         CH    @F,ESDCOUNT                                        0143
*                   GO TO READRT;       /* READ NEXT RECORD           *
         BC    08,READRT                                          0144
*                 ELSE                  /* YES - MORE DATA            *
*                   DO;                 /* DO LOOP                    *
*                     NEXT=NEXT+16;     /* UP RECORD PTR              *
         LA    @F,16                                              0146
         A     @F,NEXT                                            0146
         ST    @F,NEXT                                            0146
*                     ESDNO=ESDNO+1;    /* UP ESDID NUMBER            *
         LA    @F,1                                               0147
         AH    @F,ESDNO                                           0147
         STH   @F,ESDNO                                           0147
*                     GO TO CESDRT;     /* CONTINUE PROCESSING        *
         BC    15,CESDRT                                          0148
*                   END;                /* END OF DO LOOP             *
*             END;                      /* END OF DO LOOP             *
* CSDRT1: NAME=EXTRNAM;                 /* PUT NAME IN TABLE          *
@9F7     EQU   *                                                  0151
CSDRT1   L     @3,NEXT                                            0151
         L     @8,CSDNXT                                          0151
         MVC   0(8,@8),0(@3)                                      0151
* CSDPVT: IDEN=ESDNO;                   /* PUT ESD NUMBER IN TABLE    *
CSDPVT   L     @3,CSDNXT                                          0152
         MVC   10(2,@3),ESDNO                                     0152
*         IF CSDNXT+12>SORTOUT          /* CHK FOR TBL OVERFL XM04400 *
*           THEN                        /* OVERFLOW           XM04400 *
         LA    @F,12                                              0153
         A     @F,CSDNXT                                          0153
         C     @F,SORTOUT                                         0153
         BC    12,@9F6                                            0153
*             DO;                       /*                    XM04400 *
*               ERRORS(4)='1'B;         /* MSG IMB104I        XM04400 *
         L     @8,PARMPTR                                         0155
         OI    32(@8),B'00010000'                                 0155
*               RETURN;                 /* EXIT               XM04400 *
         BC    15,@EL01                                           0156
*             END;                      /*                    XM04400 *
*           ELSE;                       /* NO OVERFLOW        XM04400 *
@9F6     EQU   *                                                  0158
*         CSDEND=CSDNXT;                /* ADDR OF LAST CESD ENTRY    *
@9F5     MVC   CSDEND(4),CSDNXT                                   0159
* CSDRT2: ESDCOUNT=ESDCOUNT-16;         /* AMOUNT OF ESD DATA LEFT    *
CSDRT2   LH    @F,ESDCOUNT                                        0160
         SH    @F,@D1                                             0160
         STH   @F,ESDCOUNT                                        0160
*         IF ESDCOUNT=0                 /* END OF ESD DATA?           *
*           THEN                        /* YES                        *
         SR    @F,@F                                              0161
         CH    @F,ESDCOUNT                                        0161
         BC    07,@9F4                                            0161
*             DO;                       /* DO LOOP                    *
*               CSDNXT=CSDNXT+12;       /* UP CESD PTR                *
         LA    @F,12                                              0163
         A     @F,CSDNXT                                          0163
         ST    @F,CSDNXT                                          0163
*               GO TO READRT;           /* READ NEXT RECORD           *
         BC    15,READRT                                          0164
*             END;                      /* END OF DO LOOP             *
*           ELSE                        /* NO                         *
*             DO;                       /* DO LOOP START              *
*               CSDNXT=CSDNXT+12;       /* FOR NEXT CESD ENTRY        *
@9F4     LA    @F,12                                              0167
         A     @F,CSDNXT                                          0167
         ST    @F,CSDNXT                                          0167
*               NEXT=NEXT+16;           /* FOR NEXT ESD DATA ITEM     *
         LA    @F,16                                              0168
         A     @F,NEXT                                            0168
         ST    @F,NEXT                                            0168
*               ESDNO=ESDNO+1;          /* ESDID NUMBER               *
         LA    @F,1                                               0169
         AH    @F,ESDNO                                           0169
         STH   @F,ESDNO                                           0169
*               GO TO CESDRT;           /* FOR NEXT ENTRY             *
         BC    15,CESDRT                                          0170
*             END;                      /* END OF DO LOOP             *
* IDRTN:  IF SUBTYP(1)='1'B             /* LAST IDR RECORD?           *
*           THEN                        /* YES                        *
@9F3     EQU   *                                                  0172
IDRTN    L     @3,INREC                                           0172
         TM    2(@3),B'10000000'                                  0172
         BC    12,@9F2                                            0172
*               TYP='1'B;               /* SET BIT                    *
         OI    TYP,B'10000000'                                    0173
*           ELSE;                       /* NO                         *
@9F2     EQU   *                                                  0174
*         BYTES=BYTCNT-2;               /* NUMBER OF BYTES IN RECORD  *
@9F1     LH    @F,@D2                                             0175
         SR    @0,@0                                              0175
         IC    @0,1(0,@3)                                         0175
         AR    @F,@0                                              0175
         STC   @F,BYTES                                           0175
*         IF SUBTYP(5:8)='0001'B        /* ZAP RECORD                 *
*           THEN                        /* YES                        *
         TM    2(@3),B'00000001'                                  0176
         BC    12,@9F0                                            0175
         TM    2(@3),B'00001110'                                  0176
*             GO TO ZAPRT;              /* BEGIN PROCESSING ZAP REC   *
         BC    10,ZAPRT                                           0177
*           ELSE                        /* NO                         *
*             GO TO LK;                 /* CHECK FOR NEXT TYPE        *
         BC    15,LK                                              0178
* IDR2:   IF IDRFLAG='1'B × MDLB='1'B   /* PARTIAL IDR SERVICE        *
*           THEN                        /* YES                        *
IDR2     L     @3,PARMPTR                                         0179
         TM    20(@3),B'10000000'                                 0179
         BC    01,@9EE                                            0179
         TM    20(@3),B'00001000'                                 0179
         BC    12,@9ED                                            0179
*             IF TYP='1'B               /* LAST IDR RECORD            *
*               THEN                    /* YES                        *
@9EE     TM    TYP,B'10000000'                                    0180
*                 RETURN;               /* RETURN                     *
         BC    03,@EL01                                           0181
*               ELSE                    /* MORE IDR RECORDS           *
*                 GO TO READRT;         /* READ NEXT RECORD           *
         BC    15,READRT                                          0182
*           ELSE                        /* FULL IDR SERVICE           *
*             DO;                       /* DO LOOP                    *
*               COUNTER=BYTES;          /* NO. OF RECORD BYTES        *
@9ED     MVC   COUNTER(1),BYTES                                   0184
*               GO TO TRANSRT;          /* PROCESS RECORD             *
         BC    15,TRANSRT                                         0185
*             END;                      /* END OF DO LOOP             *
* LK:     IF SUBTYP(5:8)='0010'B        /* LINKEDIT RECORD            *
*           THEN                        /* YES                        *
@9EA     EQU   *                                                  0187
LK       L     @3,INREC                                           0187
         TM    2(@3),B'00000010'                                  0187
         BC    12,@9E9                                            0186
         TM    2(@3),B'00001101'                                  0187
         BC    05,@9E8                                            0187
*             DO;                       /* DO LOOP                    *
*               IF IDRFLAG='1'B × MDLB='1'B /* PARTIAL IDR SERVICE    *
*                 THEN                  /* YES                        *
         L     @8,PARMPTR                                         0189
         TM    20(@8),B'10000000'                                 0189
         BC    01,@9E7                                            0189
         TM    20(@8),B'00001000'                                 0189
         BC    12,@9E6                                            0189
*                   IF TYP='1'B         /* LAST IDR RECORD            *
*                     THEN              /* YES                        *
@9E7     TM    TYP,B'10000000'                                    0190
*                       RETURN;
         BC    03,@EL01                                           0191
*                     ELSE              /* NO                         *
*                       GO TO READRT;   /* READ NEXT RECORD           *
         BC    15,READRT                                          0192
*                 ELSE                  /* FULL IDR SERVICE           *
*                   GO TO LKERT;        /* BEGIN PROCESSING LINKEDIT  *
*             END;                      /* END OF DO LOOP             *
*           ELSE;                       /* NO                         *
@9E8     EQU   *                                                  0195
@9E9     EQU   *                                                  0195
*         IF SUBTYP(5:8)='0100'B        /* TRANSLATOR RECORD          *
*           THEN                        /* YES                        *
@9E2     EQU   *                                                  0196
         L     @3,INREC                                           0196
         TM    2(@3),B'00000100'                                  0196
         BC    12,@9E1                                            0195
         TM    2(@3),B'00001011'                                  0196
         BC    05,@9E0                                            0196
*             DO;                       /* DO LOOP                    *
*               NEXT=INREC+3;           /* RECORD PTR                 *
         LA    @F,3                                               0198
         A     @F,INREC                                           0198
         ST    @F,NEXT                                            0198
*               IF TBIT(1)='1'B         /* PREVIOUS TRANSLATOR RECORD *
*                 THEN                  /* YES                        *
         TM    TBIT,B'10000000'                                   0199
         BC    12,@9DF                                            0199
*                   DO;                 /* DO LOOP                    *
*                     TBIT(1)='0'B;     /* ZERO OUT BIT               *
         NI    TBIT,B'01111111'                                   0201
*                     COUNTER=BYTES;    /* NO. OF RECORD BYTES        *
         MVC   COUNTER(1),BYTES                                   0202
*                     GO TO TR1;        /* ANALYZE RECORD             *
         BC    15,TR1                                             0203
*                   END;                /* END OF DO LOOP             *
*                 ELSE;                 /* NO                         *
@9DF     EQU   *                                                  0205
*               IF TBIT(7)='1'B         /* TRANS DESCRIPTION          *
*                 THEN                  /* YES                        *
@9DE     TM    TBIT,B'00000010'                                   0206
         BC    12,@9DD                                            0206
*                   DO;                 /* DO LOOP                    *
*                     TBIT(7)='0'B;     /* ZERO OUT BIT               *
         NI    TBIT,B'11111101'                                   0208
*                     COUNTER=BYTES;    /* NO. OF RECORD BYTES        *
         MVC   COUNTER(1),BYTES                                   0209
*                     GO TO TR1A;       /* CONTINUE PROCESSING        *
         BC    15,TR1A                                            0210
*                   END;                /* END OF DO LOOP             *
*                 ELSE;                 /* NULL ELSE                  *
@9DD     EQU   *                                                  0212
*               IF TBIT(3)='1'B         /* TRANS DESCRIP CONTIN MIDPT *
*                 THEN                  /* YES                        *
@9DC     TM    TBIT,B'00100000'                                   0213
         BC    12,@9DB                                            0213
*                   DO;                 /* DO LOOP                    *
*                     COUNTER=15;       /* SET COUNTER                *
         MVI   COUNTER,15                                         0215
*                     POINT=ADDR(B1);   /* LINK ADDRESS               *
         LA    @F,B1                                              0216
         ST    @F,POINT                                           0216
*                     GO TO SP1;        /* BYTE BY BYTE MOVE          *
         BC    15,SP1                                             0217
* B1:                 COUNTER=BYTES-15; /* SUBTRACT BYTES MOVED       *
B1       SR    @F,@F                                              0218
         IC    @F,BYTES                                           0218
         SH    @F,@D3                                             0218
         STC   @F,COUNTER                                         0218
*                     TBIT(3)='0'B;     /* ZERO OUT BIT               *
         NI    TBIT,B'11011111'                                   0219
*                     GO TO TR1;        /* ANALYZE RECORD             *
         BC    15,TR1                                             0220
*                   END;                /* END OF DO LOOP             *
*                 ELSE;                 /* NO                         *
@9DB     EQU   *                                                  0222
*               IF TBIT(6)='1'B         /* TRANS DESCRIP CONTIN       *
*                 THEN                  /* YES                        *
@9DA     TM    TBIT,B'00000100'                                   0223
         BC    12,@9D9                                            0223
*                   DO;                 /* DO LOOP                    *
*                     TBIT(6)='0'B;     /* ZERO OUT BIT               *
         NI    TBIT,B'11111011'                                   0225
*                     POINT=ADDR(B2);   /* LINK ADDRESS               *
         LA    @F,B2                                              0226
         ST    @F,POINT                                           0226
*                     GO TO SP1;        /* BYTE BY BYTE MOVE          *
         BC    15,SP1                                             0227
* B2:                 COUNTER=BYTES-COUNTER; /* BYTES LEFT            *
B2       SR    @F,@F                                              0228
         IC    @F,BYTES                                           0228
         SR    @0,@0                                              0228
         IC    @0,COUNTER                                         0228
         SR    @F,@0                                              0228
         STC   @F,COUNTER                                         0228
*                   IF TBIT(5)='1'B          /*SECOND XLATOR @ZA03924 *
*                     THEN                   /* SPLIT THEN   @ZA03924 *
         TM    TBIT,B'00001000'                                   0229
         BC    12,@9D8                                            0229
*                       DO;                  /* TURN OFF BIT @ZA03924 *
*                       TBIT(5)='0'B;        /* AND CONTINUE @ZA03924 *
         NI    TBIT,B'11110111'                                   0231
*                       GO TO TR1;           /* NORMAL PROC  @ZA03924 *
         BC    15,TR1                                             0232
*                      END;                  /* OF RECORD    @ZA03924 *
*                    ELSE;                   /*              @ZA03924 *
@9D8     EQU   *                                                  0234
*                     IF TBIT(8)='1'B  /* BIT ON                      *
*                       THEN           /* YES                         *
@9D7     TM    TBIT,B'00000001'                                   0235
*                         GO TO TR1;   /* ANALYZE RECORD              *
         BC    01,TR1                                             0236
*                       ELSE           /* NO                          *
*                         DO;
*                           TDTAB=BLANKS; /* SET TRANS DESC TO BLANKS *
         L     @3,TRN                                             0238
         MVC   0(1,@3),BLANKS                                     0238
         MVI   1(@3),C' '                                         0238
         MVC   2(13,@3),1(@3)                                     0238
*                           TRN=TRN+15;   /* INCR PTR                 *
         LA    @F,15                                              0239
         A     @F,TRN                                             0239
         ST    @F,TRN                                             0239
*                         END;
*                     GO TO TR1;        /* ANALYZE REST OF RECORD     *
         BC    15,TR1                                             0241
*                   END;                /* END OF DO LOOP             *
*                 ELSE;                 /* NO                         *
@9D9     EQU   *                                                  0243
*               IF TBIT(4)='1'B         /* ID CONTIN                  *
*                 THEN                  /* YES                        *
@9D6     TM    TBIT,B'00010000'                                   0244
         BC    12,@9D5                                            0244
*                   DO;                 /* DO LOOP                    *
*                     SAV2=SPBIT;       /* ONE BYTE MOVE              *
         L     @3,NEXT                                            0246
         MVC   IDSAVE+1(1),0(@3)                                  0246
*                     NEXT=NEXT+1;      /* UP RECORD PTR              *
         LA    @F,1                                               0247
         A     @F,NEXT                                            0247
         ST    @F,NEXT                                            0247
*                     COUNTER=BYTES-1;  /* NO. OF RECORD BYTES LEFT   *
         SR    @F,@F                                              0248
         IC    @F,BYTES                                           0248
         BCTR  @F,0                                               0248
         STC   @F,COUNTER                                         0248
*                     GO TO TR1B;       /* CONTINUE PROCESSING        *
         BC    15,TR1B                                            0249
*                   END;                /* END OF DO LOOP             *
*                 ELSE;                 /* NO                         *
*               GO TO IDR2;             /* IDR CHECK                  *
*             END;                      /* END OF DO LOOP             *
*           ELSE;                       /* NO                         *
@9E0     EQU   *                                                  0254
@9E1     EQU   *                                                  0254
*         IF SUBTYP(5:8)='1000'B        /* IDENTIFY RECORD            *
*           THEN                        /* YES                        *
@9D3     EQU   *                                                  0255
         L     @3,INREC                                           0255
         TM    2(@3),B'00001000'                                  0255
         BC    12,@9D2                                            0254
         TM    2(@3),B'00000111'                                  0255
         BC    05,@9D1                                            0255
*             DO;                       /*                            *
*               CSDNXT=CSDPT;           /* START OF CESD TABLE        *
         MVC   CSDNXT(4),CSDPT                                    0257
*               NEXT=INREC+3;           /* UP RECORD PTR              *
         LA    @F,3                                               0258
         A     @F,INREC                                           0258
         ST    @F,NEXT                                            0258
*               IF TBIT(1)='1'B         /* PREVIOUS TRANSLATOR RECORD *
*                 THEN                  /* YES                        *
         TM    TBIT,B'10000000'                                   0259
         BC    12,@9D0                                            0259
*                   DO;                 /* DO LOOP                    *
*                     TBIT(1)='0'B;     /* ZERO OUT BIT               *
         NI    TBIT,B'01111111'                                   0261
*                     CALL TRSORT;      /* PRINT OUT PREVIOUS RECORD  *
         BAL   @E,TRSORT                                          0262
*                     COUNTER=BYTES;    /* NO. OF RECORD BYTES        *
         MVC   COUNTER(1),BYTES                                   0263
*                     GO TO IDENRT;     /* PROCESS RECORD             *
         BC    15,IDENRT                                          0264
*                   END;                /* END OF DO LOOP             *
*                 ELSE;                 /* NULL ELSE                  *
@9D0     EQU   *                                                  0266
*               IF TBIT(2)='1'B         /* LAST RECORD IDENTIFY       *
*                 THEN                  /*  YES                       *
@9CF     TM    TBIT,B'01000000'                                   0267
         BC    12,@9CE                                            0267
*                   DO;                 /* DO LOOP                    *
*                     TBIT(2)='0'B;     /* ZERO OUT BIT               *
         NI    TBIT,B'10111111'                                   0269
*                     COUNTER=BYTES;    /* NO. OF RECORD BYTES        *
         MVC   COUNTER(1),BYTES                                   0270
*                     GO TO ID3;        /* BEGIN PROCESSING           *
         BC    15,ID3                                             0271
*                   END;                /* END OF LOOP                *
*                 ELSE;                 /* NULL ELSE                  *
@9CE     EQU   *                                                  0273
*               IF TBIT(8)='1'B         /* BIT ON                     *
*                 THEN                  /* YES                        *
@9CD     TM    TBIT,B'00000001'                                   0274
         BC    12,@9CC                                            0274
*                   DO;                 /* DO LOOP                    *
*                     SAV2=INFO;        /* REST OF ID                 *
         L     @3,NEXT                                            0276
         MVC   IDSAVE+1(1),0(@3)                                  0276
*                     NEXT=NEXT+1;      /* UP RECORD PTR              *
         LA    @F,1                                               0277
         A     @F,NEXT                                            0277
         ST    @F,NEXT                                            0277
*                     TBIT(8)='0'B;     /* ZERO OUT BIT               *
         NI    TBIT,B'11111110'                                   0278
* SUB1:               IF IDEN=IDSAVE    /* MATCHING ID'S              *
*                       THEN            /*                            *
SUB1     L     @3,CSDNXT                                          0279
         CLC   10(2,@3),IDSAVE                                    0279
         BC    07,@9CB                                            0279
*                         DO;           /* DO LOOP                    *
*                           SRTEND=SRT;   /* END OF TABLE ADDRESS     *
         MVC   SRTEND(4),SRT                                      0281
*                           USNAME=NAME; /* PUT CSECT NAME IN TABLE   *
         L     @8,SRT                                             0282
         MVC   0(8,@8),0(@3)                                      0282
*                           SRT=SRT+8;  /* UP TABLE PTR               *
         LA    @F,8                                               0283
         A     @F,SRT                                             0283
         ST    @F,SRT                                             0283
*                           BYTES=BYTES-1; /* NO. OF REC BYTES LEFT   *
         SR    @F,@F                                              0284
         IC    @F,BYTES                                           0284
         BCTR  @F,0                                               0284
         STC   @F,BYTES                                           0284
*                           GO TO SUB2; /* DO LOOP FOR DATE           *
         BC    15,SUB2                                            0285
*                         END;          /* END OF LOOP                *
*                       ELSE            /* NO                         *
*                         IF CSDNXT > CSDEND /* END OF CESD TABLE     *
*                           THEN        /* YES                        *
@9CB     L     @F,CSDEND                                          0287
         C     @F,CSDNXT                                          0287
*                             GO TO ERR1;    /* ERROR                 *
         BC    04,ERR1                                            0288
*                           ELSE             /* NO                    *
*                             DO;            /* DO LOOP               *
*                               CSDNXT=CSDNXT+12; /* NEXT CESD ENTRY  *
         LA    @F,12                                              0290
         A     @F,CSDNXT                                          0290
         ST    @F,CSDNXT                                          0290
*                               GO TO SUB1;  /* TRY AGAIN             *
         BC    15,SUB1                                            0291
*                             END;           /* END OF DO LOOP        *
*                   END;                /* END OF DO LOOP             *
*                 ELSE;                 /* NULL ELSE                  *
@9CC     EQU   *                                                  0294
*               IF TBIT(7)='1'B         /* BIT ON                     *
*                 THEN                  /*   YES                      *
@9C9     TM    TBIT,B'00000010'                                   0295
         BC    12,@9C8                                            0295
*                   DO;                 /* DO LOOP                    *
*                     TBIT(7)='0'B;     /* ZERO OUT BIT               *
         NI    TBIT,B'11111101'                                   0297
*                     GO TO SUB2;       /* SAVE DATE AND NO. OF BYTES *
         BC    15,SUB2                                            0298
*                   END;                /* END OF LOOP                *
*                 ELSE;                 /* NULL ELSE                  *
@9C8     EQU   *                                                  0300
*               IF TBIT(6)='1'B         /* BIT ON                     *
*                 THEN                  /* YES                        *
@9C7     TM    TBIT,B'00000100'                                   0301
         BC    12,@9C6                                            0301
*                   DO;                 /* DO LOOP                    *
*                     USINFO=INFO;      /* MOVE REST OF DATE          *
         L     @3,NEXT                                            0303
         L     @8,SRT                                             0303
         MVC   0(1,@8),0(@3)                                      0303
*                     NEXT=NEXT+1;      /* UP RECORD PTR              *
         LA    @F,1                                               0304
         A     @F,NEXT                                            0304
         ST    @F,NEXT                                            0304
*                     SRT=SRT+1;        /* UP TABLE PTR               *
         LA    @F,1                                               0305
         A     @F,SRT                                             0305
         ST    @F,SRT                                             0305
*                     USINFO=INFO;      /* MOVE REST OF DATE          *
         L     @3,NEXT                                            0306
         LR    @8,@F                                              0306
         MVC   0(1,@8),0(@3)                                      0306
*                     NEXT=NEXT+1;      /* UP RECORD PTR              *
         LA    @F,1                                               0307
         A     @F,NEXT                                            0307
         ST    @F,NEXT                                            0307
*                     SRT=SRT+1;        /* UP TABLE PTR               *
         LA    @F,1                                               0308
         A     @F,SRT                                             0308
         ST    @F,SRT                                             0308
*                     NUMBS=INFO;       /* SAVE DATA LENGTH           *
         L     @3,NEXT                                            0309
         MVC   NUMBS(1),0(@3)                                     0309
*                     NEXT=NEXT+1;      /* UP RECORD PTR              *
         LA    @F,1                                               0310
         A     @F,NEXT                                            0310
         ST    @F,NEXT                                            0310
*                     COUNTER=BYTES-3;  /* NUMBER OF RECORD BYTES LEFT*
         SR    @F,@F                                              0311
         IC    @F,BYTES                                           0311
         SH    @F,@D4                                             0311
         STC   @F,COUNTER                                         0311
*                     TBIT(6)='0'B;     /* ZERO OUT BIT               *
         NI    TBIT,B'11111011'                                   0312
*                     GO TO ID4;        /* CONTINUE PROCESSING        *
         BC    15,ID4                                             0313
*                   END;                /* END OF LOOP                *
*                 ELSE;                 /* NULL ELSE                  *
@9C6     EQU   *                                                  0315
*               IF TBIT(5)='1'B         /* BIT ON                     *
*                 THEN                  /* YES                        *
@9C5     TM    TBIT,B'00001000'                                   0316
         BC    12,@9C4                                            0316
*                   DO;                 /* DO LOOP                    *
*                     USINFO=INFO;      /* MOVE REST OF DATE          *
         L     @3,NEXT                                            0318
         L     @8,SRT                                             0318
         MVC   0(1,@8),0(@3)                                      0318
*                     NEXT=NEXT+1;      /* UP RECORD PTR              *
         LA    @F,1                                               0319
         A     @F,NEXT                                            0319
         ST    @F,NEXT                                            0319
*                     SRT=SRT+1;        /* UP TABLE PTR               *
         LA    @F,1                                               0320
         A     @F,SRT                                             0320
         ST    @F,SRT                                             0320
*                     NUMBS=INFO;       /* SAVE DATA LENGTH           *
         L     @3,NEXT                                            0321
         MVC   NUMBS(1),0(@3)                                     0321
*                     NEXT=NEXT+1;      /* UP RECORD PTR              *
         LA    @F,1                                               0322
         A     @F,NEXT                                            0322
         ST    @F,NEXT                                            0322
*                     COUNTER=BYTES-2;  /* NO. OF RECORD BYTES LEFT   *
         SR    @F,@F                                              0323
         IC    @F,BYTES                                           0323
         SH    @F,@D5                                             0323
         STC   @F,COUNTER                                         0323
*                     TBIT(5)='0'B;     /* ZERO OUT BIT               *
         NI    TBIT,B'11110111'                                   0324
*                     GO TO ID4;        /* CONTINUE PROCESSING        *
         BC    15,ID4                                             0325
*                   END;                /* END OF LOOP                *
*                 ELSE;                 /* NULL ELSE                  *
@9C4     EQU   *                                                  0327
*               IF TBIT(4)='1'B         /* BIT ON                     *
*                 THEN                  /*        YES                 *
@9C3     TM    TBIT,B'00010000'                                   0328
         BC    12,@9C2                                            0328
*                   DO;                 /* DO LOOP                    *
*                     NUMBS=INFO;       /* SAVE DATA LENGTH           *
         L     @3,NEXT                                            0330
         MVC   NUMBS(1),0(@3)                                     0330
*                     NEXT=NEXT+1;      /* INCR PT TO INPUT           *
         LA    @F,1                                               0331
         A     @F,NEXT                                            0331
         ST    @F,NEXT                                            0331
*                     COUNTER=BYTES-1;  /* NO. OF RECORD BYTES        *
         SR    @F,@F                                              0332
         IC    @F,BYTES                                           0332
         BCTR  @F,0                                               0332
         STC   @F,COUNTER                                         0332
*                     TBIT(4)='0'B;     /* ZERO OUT BIT               *
         NI    TBIT,B'11101111'                                   0333
*                     GO TO ID4;        /* CONTINUE PROCESSING        *
         BC    15,ID4                                             0334
*                   END;                /* END OF LOOP                *
*                 ELSE;                 /* NULL ELSE                  *
@9C2     EQU   *                                                  0336
*               IF TBIT(3)='1'B         /* BIT ON                     *
*                 THEN                  /* YES                        *
@9C1     TM    TBIT,B'00100000'                                   0337
         BC    12,@9C0                                            0337
*                   DO;                 /* DO LOOP                    *
*                     DO A=1 TO COUNTER; /* MOVE REST OF DATA         *
         LA    @F,1                                               0339
         BC    15,@DO9BE                                          0339
*                       USINFO=INFO;    /* BYTE BY BYTE               *
@DO9BF   L     @3,NEXT                                            0340
         L     @8,SRT                                             0340
         MVC   0(1,@8),0(@3)                                      0340
*                       NEXT=NEXT+1;    /* UP RECORD PTR              *
         LA    @F,1                                               0341
         A     @F,NEXT                                            0341
         ST    @F,NEXT                                            0341
*                       SRT=SRT+1;      /* UP TABLE PTR               *
         LA    @F,1                                               0342
         A     @F,SRT                                             0342
         ST    @F,SRT                                             0342
*                     END;              /* END OF DO LOOP             *
*                       COUNTER=BYTES-COUNTER; /* NO. OF RECORD BYTES *
         SR    @F,@F                                              0343
         IC    @F,A                                               0343
         AH    @F,@D6                                             0343
@DO9BE   STC   @F,A                                               0343
         SR    @0,@0                                              0343
         IC    @0,COUNTER                                         0343
         CR    @F,@0                                              0343
         BC    12,@DO9BF                                          0343
         SR    @F,@F                                              0344
         IC    @F,BYTES                                           0344
         IC    @0,COUNTER                                         0344
         SR    @F,@0                                              0344
         STC   @F,COUNTER                                         0344
*                       TBIT(3)='0'B;   /* ZERO OUT BIT               *
         NI    TBIT,B'11011111'                                   0345
*                     GO TO ID5;        /* CONTINUE PROCESSING        *
         BC    15,ID5                                             0346
*                   END;                /* END OF LOOP                *
*                 ELSE;                 /* NULL ELSE                  *
@9C0     EQU   *                                                  0348
*         COUNTER=BYTES;                /* NO. OF RECORD BYTES        *
@9BB     MVC   COUNTER(1),BYTES                                   0349
*         GO TO IDENRT;                 /* PROCESS RECORD             *
         BC    15,IDENRT                                          0350
*             END;                      /* END OF DO LOOP             *
*           ELSE;                       /* NULL ELSE                  *
@9D1     EQU   *                                                  0352
@9D2     EQU   *                                                  0352
* SUB2:   COUNTER=3;                    /* SET UP COUNTER FOR DO LOOP *
@9BA     EQU   *                                                  0353
SUB2     MVI   COUNTER,3                                          0353
*         DO A=1 TO COUNTER;            /* MOVE IN DATE               *
         LA    @F,1                                               0354
         BC    15,@DO9B8                                          0354
*           USINFO=INFO;                /* BYTE BY BYTE               *
@DO9B9   L     @3,NEXT                                            0355
         L     @8,SRT                                             0355
         MVC   0(1,@8),0(@3)                                      0355
*           NEXT=NEXT+1;                /* UP RECORD PTR              *
         LA    @F,1                                               0356
         A     @F,NEXT                                            0356
         ST    @F,NEXT                                            0356
*           SRT=SRT+1;                  /* UP TABLE PTR               *
         LA    @F,1                                               0357
         A     @F,SRT                                             0357
         ST    @F,SRT                                             0357
*         END;                          /* END OF DO LOOP             *
*         NUMBS=INFO;                   /* NUMBER OF DATA BYTES       *
         SR    @F,@F                                              0358
         IC    @F,A                                               0358
         AH    @F,@D6                                             0358
@DO9B8   STC   @F,A                                               0358
         SR    @0,@0                                              0358
         IC    @0,COUNTER                                         0358
         CR    @F,@0                                              0358
         BC    12,@DO9B9                                          0358
         L     @3,NEXT                                            0359
         MVC   NUMBS(1),0(@3)                                     0359
*         COUNTER=BYTES-4;              /* NUMBER OF RECORD BYTES LEFT*
         SR    @F,@F                                              0360
         IC    @F,BYTES                                           0360
         SH    @F,@D7                                             0360
         STC   @F,COUNTER                                         0360
*         NEXT=NEXT+1;                  /* UP RECORD PTR              *
         LA    @F,1                                               0361
         A     @F,NEXT                                            0361
         ST    @F,NEXT                                            0361
*         GO TO ID4;                    /* CONTINUE PROCESSING        *
         BC    15,ID4                                             0362
* ZAPRT:  NUMBS='0'X;                   /* ZERO OUT COUNTER           *
ZAPRT    MVI   NUMBS,X'00'                                        0363
*         NEXT=INREC+3;                 /* PTR TO START OF ZAP INFO   *
         LA    @F,3                                               0364
         A     @F,INREC                                           0364
         ST    @F,NEXT                                            0364
*         SWITCH(1:8)=FLG(1:8);         /* SAVE FLAG BYTE             *
         LR    @3,@F                                              0365
         MVC   SWITCH(1),0(@3)                                    0365
*         CSDNXT=CSDPT;                 /* START OF CESD TABLE        *
         MVC   CSDNXT(4),CSDPT                                    0366
*         IF FLG1(2)='1'B               /* PREVIOUS ZAP RECORD        *
*           THEN                        /* YES                        *
         TM    FLG1,B'01000000'                                   0367
*             GO TO ZA;                 /* CONTINUE PROCESSING        *
         BC    01,ZA                                              0368
*           ELSE                        /* NO                         *
*             SRT=SORTOUT;              /* START OF SORT TABLE        *
         MVC   SRT(4),SORTOUT                                     0369
* ZA:     FLG1=FLG;                     /* SAVE NUMBER OF ZAPS        *
ZA       L     @3,NEXT                                            0370
         MVC   FLG1(1),0(@3)                                      0370
*         FLG1(1:2)='00'B;              /* ZERO OUT BITS              *
         NI    FLG1,B'00111111'                                   0371
*         COUNTER=FLG1;                 /* SET UP COUNTER             *
         MVC   COUNTER(1),FLG1                                    0372
*         IF COUNTER = 0                /* ANY ZAP ENTRIES            *
*           THEN                        /* NO                         *
         CLI   COUNTER,0                                          0373
         BC    07,@9B5                                            0373
*             IF SW1(2)='1'B            /* PREVIOUS ZAP RECORD        *
*               THEN                    /* YES                        *
         TM    SW1,B'01000000'                                    0374
*                 GO TO UP1;            /* PRINT IT OUT               *
         BC    01,UP1                                             0375
*               ELSE                    /* NO                         *
*                 GO TO WR1;            /* SPECIAL ZAP MESSAGE        *
         BC    15,WR1                                             0376
*           ELSE
*             DO;                       /* DO LOOP                    *
*               SW1(2)='1'B;            /* ZAP ENTRIES PROCESSED      *
@9B5     OI    SW1,B'01000000'                                    0378
*               NEXT=NEXT+1;            /* UP RECORD PTR              *
         LA    @F,1                                               0379
         A     @F,NEXT                                            0379
         ST    @F,NEXT                                            0379
*             END;                      /* END OF DO LOOP             *
* ZAP1:   IF IDEN=ESD                   /* SEARCH FOR MATCHING ESD    *
*           THEN                        /* WHEN FOUND                 *
@9B4     EQU   *                                                  0381
ZAP1     L     @3,NEXT                                            0381
         L     @8,CSDNXT                                          0381
         CLC   10(2,@8),0(@3)                                     0381
         BC    07,@9B3                                            0381
*             DO;                       /* DO LOOP                    *
*               ZPDATE=DATE1;           /* SAVE DATE                  *
         L     @6,SRT                                             0383
         MVC   8(3,@6),2(@3)                                      0383
*               CNAME=NAME;             /* SAVE CSECT NAME            *
         MVC   0(8,@6),0(@8)                                      0384
*               DAZP=ZP;                /* SAVE ZAP DATA              *
         MVC   11(8,@6),5(@3)                                     0385
*               NUMBS=NUMBS+1;          /* UP THE COUNTER             *
         LA    @F,1                                               0386
         SR    @0,@0                                              0386
         IC    @0,NUMBS                                           0386
         AR    @F,@0                                              0386
         STC   @F,NUMBS                                           0386
*               GO TO UPPTR;            /* BRANCH OUT                 *
         BC    15,UPPTR                                           0387
*             END;                      /* END OF DO LOOP             *
*           ELSE                        /* NO MATCH                   *
*             IF CSDNXT^=CSDEND         /* ANY MORE CESD ENTRIES?     *
*               THEN                    /* YES                        *
@9B3     L     @F,CSDEND                                          0389
         C     @F,CSDNXT                                          0389
         BC    08,@9B1                                            0389
*                 DO;                   /* DO LOOP                    *
*                   CSDNXT=CSDNXT+12;   /* UP CESD TABLE PTR          *
         LA    @F,12                                              0391
         A     @F,CSDNXT                                          0391
         ST    @F,CSDNXT                                          0391
*                   GO TO ZAP1;         /* TRY AGAIN                  *
         BC    15,ZAP1                                            0392
*                 END;                  /* END OF DO LOOP             *
*               ELSE                    /* NO MORE ENTRIES            *
*                 GO TO ERR1;           /* CESD ERROR                 *
* UPPTR:  IF COUNTER=NUMBS              /* LAST ZAP ENTRY             *
*           THEN                        /* YES                        *
@9B0     EQU   *                                                  0395
@9B2     EQU   *                                                  0395
UPPTR    CLC   COUNTER(1),NUMBS                                   0395
         BC    07,@9AF                                            0395
*             IF SWITCH(2)='1'B         /* ANOTHER ZAP RECORD         *
*               THEN                    /* YES                        *
         TM    SWITCH,B'01000000'                                 0396
         BC    12,@9AE                                            0396
*                 DO;                   /* DO LOOP                    *
*                   SRTEND=SRT;         /* SAVE END OF TABLE ADDR     *
         MVC   SRTEND(4),SRT                                      0398
*                   SRT=SRT+19;         /* INCR TABLE PTR      XA1821 *
         LA    @F,19                                              0399
         A     @F,SRT                                             0399
         ST    @F,SRT                                             0399
*                   FLG1(2)='1'B;       /* PREVIOUS ZAP               *
         OI    FLG1,B'01000000'                                   0400
*                   GO TO READRT;       /* READ NEXT ZAP RECORD       *
         BC    15,READRT                                          0401
*                 END;                  /* END OF DO LOOP             *
*               ELSE                    /*                            *
*                 DO;                   /* DO LOOP FOR SORTING TABLE  *
*                   SRTEND=SRT;         /* SAVE END OF TABLE ADDR     *
@9AE     MVC   SRTEND(4),SRT                                      0404
* UP1:              SRT=SORTOUT;        /* START OF TABLE             *
UP1      MVC   SRT(4),SORTOUT                                     0405
*                   IF SRT=SRTEND       /* END OF TABLE?              *
*                     THEN              /* YES                        *
         L     @F,SRTEND                                          0406
         C     @F,SRT                                             0406
         BC    07,@9AC                                            0406
*                       DO;             /* DO LOOP                    *
*                         CALL PRNT1;   /* WRITE HEADER               *
         BAL   @E,PRNT1                                           0408
*                         GO TO SRT2;   /* BRANCH TO PRINT            *
         BC    15,SRT2                                            0409
*                       END;            /* END OF DO LOOP             *
*                     ELSE;             /* NULL ELSE                  *
@9AC     EQU   *                                                  0411
*                   SRTPT=SRT;          /* START OF TABLE             *
@9AB     MVC   SRTPT(4),SRT                                       0412
*                   SORTAREA=SORTAB;    /* MOVE FIRST ENTRY           *
         L     @3,SRT                                             0413
         MVC   SORTAREA(19),0(@3)                                 0413
*                   GO TO SRT1;         /* BRANCH TO START SORT       *
         BC    15,SRT1                                            0414
*                 END;                  /* END OF DO LOOP             *
*           ELSE                        /* MORE ZAP DATA              *
*             DO;                       /* DO LOOP                    *
*               NEXT=NEXT+13;           /* UP RECORD PTR              *
@9AF     LA    @F,13                                              0417
         A     @F,NEXT                                            0417
         ST    @F,NEXT                                            0417
*               SRT=SRT+19;             /* UP TABLE PTR               *
         LA    @F,19                                              0418
         A     @F,SRT                                             0418
         ST    @F,SRT                                             0418
*               CSDNXT=CSDPT;           /* START OF CESD TABLE        *
         MVC   CSDNXT(4),CSDPT                                    0419
*               GO TO ZAP1;             /* PROCESS NEXT ZAP DATA      *
         BC    15,ZAP1                                            0420
*             END;                      /* END OF DO LOOP             *
* SRT1:   SRT=SRT+19;                   /* UP PTR TO SORT TABLE       *
@9AA     EQU   *                                                  0422
SRT1     LA    @F,19                                              0422
         A     @F,SRT                                             0422
         ST    @F,SRT                                             0422
*         IF CNAME ^< CSECTNM           /* ALPHA SORT CORRECT         *
*           THEN                        /* YES                        *
         LR    @3,@F                                              0423
         CLC   0(8,@3),SORTAREA                                   0423
         BC    04,@9A9                                            0423
*             DO;
*             IF SRT ^= SRTEND          /* LAST ENTRY                 *
*               THEN                    /* NO                         *
         L     @F,SRTEND                                          0425
         C     @F,SRT                                             0425
*                 GO TO SRT1;           /* CONTINUE SORT              *
         BC    07,SRT1                                            0426
*               ELSE                    /* YES                        *
*                 DO;                   /* DO LOOP                    *
*                   SRTPT=SRTPT+19;     /* NEXT ENTRY                 *
         LA    @F,19                                              0428
         A     @F,SRTPT                                           0428
         ST    @F,SRTPT                                           0428
*                   GO TO SRT3;         /* NEXT COMPARE               *
         BC    15,SRT3                                            0429
*                 END;                  /* END OF DO LOOP             *
*             END;                      /* END OF DO LOOP             *
*           ELSE                        /* ALPHA ORDER INCORRECT      *
*             DO;                       /* YES                        *
*               ZAPSORT=SORTAB;         /* SAVE PRESENT TABLE ENTRY   *
@9A9     L     @3,SRT                                             0433
         MVC   ZAPSORT(19),0(@3)                                  0433
*               SORTAB=SORTAREA;        /* REPLACE WITH COMPARE ITEM  *
         MVC   0(19,@3),SORTAREA                                  0434
*               SRT=SRTPT;              /* REPLACE WITH NEEDED ADDR   *
         MVC   SRT(4),SRTPT                                       0435
*               SORTAB=ZAPSORT;         /* SWAP TABLE ENTRY           *
         L     @3,SRT                                             0436
         MVC   0(19,@3),ZAPSORT                                   0436
* SRT3:         SRT=SRTPT;              /* USE NEW TABLE ENTRY        *
SRT3     MVC   SRT(4),SRTPT                                       0437
*               IF SRTPT = SRTEND       /* END OF TABLE               *
*                 THEN                  /*                            *
         L     @F,SRTEND                                          0438
         C     @F,SRTPT                                           0438
         BC    07,@9A7                                            0438
*                   DO;                 /* DO LOOP                    *
*                     CALL PRNT1;       /* WRITE HEADER               *
         BAL   @E,PRNT1                                           0440
*                     GO TO SRT2;       /* BRANCH TO PRINT            *
         BC    15,SRT2                                            0441
*                   END;                /* END OF DO LOOP             *
*                 ELSE                  /* NO                         *
*                   DO;                 /*                            *
*                     SORTAREA=SORTAB;  /* COMPARE ITEM               *
@9A7     L     @3,SRT                                             0444
         MVC   SORTAREA(19),0(@3)                                 0444
*                     GO TO SRT1;
         BC    15,SRT1                                            0445
*                   END;                /* END OF DO LOOP             *
*             END;
@9A6     EQU   *                                                  0447
* SRT2:   IF NUMO > 50                  /* LINES > 50?                *
*           THEN                        /* YES                        *
@9A8     EQU   *                                                  0448
SRT2     L     @3,PARMPTR                                         0448
         CLI   72(@3),50                                          0448
         BC    12,@9A5                                            0448
*             CALL PRNT1;               /* WRITE HEADER               *
         BAL   @E,PRNT1                                           0449
*           ELSE;                       /* NULL ELSE                  *
@9A5     EQU   *                                                  0450
*         SRT=SORTOUT;                  /* START OF SORT TABLE        *
@9A4     MVC   SRT(4),SORTOUT                                     0451
* SRT4:   NUMO=NUMO+2;                  /* FOR LINE COUNT             *
SRT4     LA    @F,2                                               0452
         L     @3,PARMPTR                                         0452
         SR    @0,@0                                              0452
         IC    @0,72(0,@3)                                        0452
         AR    @F,@0                                              0452
         STC   @F,72(0,@3)                                        0452
*         ZPPRINT=BLANKS;               /* BLANK OUT AREA             *
         L     @8,OUT                                             0453
         MVC   0(1,@8),BLANKS                                     0453
         MVI   1(@8),C' '                                         0453
         MVC   2(119,@8),1(@8)                                    0453
*         USA2 = '0';                   /* SKIP TWO LINES             *
         MVI   0(@8),C'0'                                         0454
*         CSNAME = 'CSECT';             /* CSECT                      *
         MVC   21(5,@8),@C16                                      0455
         MVI   26(@8),C' '                                        0455
         MVC   27(2,@8),26(@8)                                    0455
*         YEAR = 'YR';                  /* YR                         *
         MVC   49(2,@8),@C17                                      0456
*         SL = '/';                     /* /                          *
         MVI   51(@8),C'/'                                        0457
*         DATE = 'DAY';                 /* DAY                        *
         MVC   52(3,@8),@C19                                      0458
*         ZPD='IMASPZAP';               /* IMASPZAP                   *
         MVC   75(8,@8),@C20                                      0459
*         SPCD=' DATA';                 /* DATA                       *
         MVC   83(5,@8),@C21                                      0460
         MVI   88(@8),C' '                                        0460
         MVC   89(32,@8),88(@8)                                   0460
*         RESTRICT (5,6);               /* RESTRICT R5 AND R6         *
*         R5=DCBOUT;                    /* ADDR OF OUTPUT DCB         *
         L     @5,4(0,@3)                                         0462
*         R6=ADDR(ZPPRINT);             /* ADDR OF OUTPUT AREA        *
         LR    @6,@8                                              0463
*         GEN (PUT (5),(6));            /* PRINT OUTPUT LINE          *
         PUT (5),(6)
         DS    0H
*         GO TO WRZAP;                  /* CONTINUE PRINTOUT          *
         BC    15,WRZAP                                           0465
* WR:     R5=DCBOUT;                    /* ADDR OF OUTPUT DCB         *
WR       L     @3,PARMPTR                                         0466
         L     @5,4(0,@3)                                         0466
*         R6=ADDR(ZPPRINT);             /* ADDR OF OUTPUT             *
         L     @4,OUT                                             0467
         LR    @6,@4                                              0467
*         GENERATE (PUT (5),(6));       /* PRINT RTN USING BAL MACRO  *
         PUT (5),(6)
         DS    0H
*         USA2=' ';                     /* SINGLE SPACING             *
         MVI   0(@4),C' '                                         0469
*         NUMO=NUMO+1;                  /* FOR LINE COUNT             *
         LA    @F,1                                               0470
         SR    @0,@0                                              0470
         IC    @0,72(0,@3)                                        0470
         AR    @F,@0                                              0470
         STC   @F,72(0,@3)                                        0470
*         LL=NUMO;                      /* LAST LINE                  *
         MVC   LL+1(1),72(@3)                                     0471
         MVI   LL,X'00'                                           0471
*         IF NUMO > 50                  /* NUMBER OF LINES > 50?      *
*           THEN                        /*     YES                    *
         CLI   72(@3),50                                          0472
         BC    12,@9A3                                            0472
*             DO;                       /* DO LOOP                    *
*               CALL PRNT1;             /* PRINT NEW HEADER           *
         BAL   @E,PRNT1                                           0474
*               GO TO SRT4;             /* PRINT NEW TITLE            *
         BC    15,SRT4                                            0475
*             END;                      /* END OF DO LOOP             *
*           ELSE
*             GO TO WRZAP;              /* CONTINUE PRINTOUT          *
* WRZAP:  SPCD=BLANKS;                  /* BLANK OUT                  *
@9A2     EQU   *                                                  0478
WRZAP    L     @3,OUT                                             0478
         MVC   83(1,@3),BLANKS                                    0478
         MVI   84(@3),C' '                                        0478
         MVC   85(36,@3),84(@3)                                   0478
*         IF SRT > SRTEND               /* LAST ENTRY                 *
*           THEN                        /* YES                        *
         L     @F,SRTEND                                          0479
         C     @F,SRT                                             0479
         BC    10,@9A1                                            0479
*             DO;                       /* DO LOOP                    *
*               USA2='0';               /* FOR DOUBLE SPACING         *
         MVI   0(@3),C'0'                                         0481
*               ZPPRINT(2)='-';         /* DASH                       *
         MVI   1(@3),C'-'                                         0482
*               ZPPRINT(3:121)=ZPPRINT(2:120); /* PROPAGATE DASHES    *
         MVC   2(119,@3),1(@3)                                    0483
*               NUMO=NUMO+2;            /* FOR LINE COUNT             *
         LA    @F,2                                               0484
         L     @4,PARMPTR                                         0484
         SR    @0,@0                                              0484
         IC    @0,72(0,@4)                                        0484
         AR    @F,@0                                              0484
         STC   @F,72(0,@4)                                        0484
*               GEN (PUT (5),(6));
         PUT (5),(6)
         DS    0H
*               GO TO READRT;           /* READ NEXT RECORD           *
         BC    15,READRT                                          0486
*             END;                      /* END OF DO LOOP             *
*           ELSE                        /* NO                         *
*             DO;                       /* DO LOOP                    *
*               CSNAME=CNAME;           /* CSECT NAME                 *
@9A1     L     @3,SRT                                             0489
         L     @4,OUT                                             0489
         MVC   21(8,@4),0(@3)                                     0489
*               ZPD=DAZP;               /* ZAP DATA                   *
         MVC   75(8,@4),11(@3)                                    0490
*               R5=ADDR(ZPDATE);        /* ADDR OF DATE               *
         LA    @5,8(0,@3)                                         0491
*               R6=ADDR(UNPKAREA);      /* ADDR OF UNPACK AREA        *
         LA    @6,UNPKAREA                                        0492
*               GENERATE (UNPK 0(5,6),0(3,5));
         UNPK 0(5,6),0(3,5)
         DS    0H
*               RELEASE (5,6);          /* RELEASE RESTRICTION        *
*               YEAR=YRZ;               /*     YR                     *
         MVC   49(2,@4),UNPKAREA                                  0495
*               DATE=DYZ;               /* DAY                        *
         MVC   52(3,@4),UNPKAREA+2                                0496
*               SRT=SRT+19;             /* NEXT TABLE ENTRY           *
         LA    @F,19                                              0497
         A     @F,SRT                                             0497
         ST    @F,SRT                                             0497
*               GO TO WR;               /* GO TO PRINT OUT            *
         BC    15,WR                                              0498
*             END;                      /* END OF DO LOOP             *
* WR1:    CALL PRNT1;                   /* PRINT TITLE                *
@9A0     EQU   *                                                  0500
WR1      BAL   @E,PRNT1                                           0500
*         IF MDLB='1'B                  /* MODLIB SPECIFIED ?         *
*           THEN                        /* YES                        *
         L     @3,PARMPTR                                         0501
         TM    20(@3),B'00001000'                                 0501
*             GO TO READRT;             /* BYPASS NO ZAP MESSAGE      *
         BC    01,READRT                                          0502
*           ELSE;                       /* NULL ELSE                  *
*         NOZAP=BLANKS;                 /* BLANK OUT AREA             *
         L     @8,OUT                                             0504
         MVC   0(1,@8),BLANKS                                     0504
         MVI   1(@8),C' '                                         0504
         MVC   2(119,@8),1(@8)                                    0504
*         USA6='0';                     /* SKIP TWO LINES             *
         MVI   0(@8),C'0'                                         0505
*         ZPMSG1='THIS LOAD MODULE CONTAINS ';
         MVC   26(26,@8),@C23                                     0506
*         ZPMSG2='NO INFORMATION SUPPLIED BY IMASPZAP';
         MVC   52(35,@8),@C24                                     0507
*         RESTRICT (5,6);               /* RESTRICT R5 AND R6         *
*         R5=DCBOUT;                    /* ADDRESS OF OUTPUT DCB      *
         L     @5,4(0,@3)                                         0509
*         R6=ADDR(NOZAP);               /* ADDRESS OF OUTPUT AREA     *
         LR    @6,@8                                              0510
*         GENERATE (PUT (5),(6));
         PUT (5),(6)
         DS    0H
*         NOZAP(2)='-';                 /* DASH                       *
         MVI   1(@8),C'-'                                         0512
*         NOZAP(3:121)=NOZAP(2:120);    /* PROPAGATE DASHES           *
         MVC   2(119,@8),1(@8)                                    0513
*         GEN(PUT (5),(6));
         PUT (5),(6)
         DS    0H
*         RELEASE (5,6);                /* RELEASE RESTRICTION        *
*         NUMO=NUMO+4;                  /* FOR LINE COUNT             *
         LA    @F,4                                               0516
         SR    @0,@0                                              0516
         IC    @0,72(0,@3)                                        0516
         AR    @F,@0                                              0516
         STC   @F,72(0,@3)                                        0516
*         GO TO READRT;
         BC    15,READRT                                          0517
* IDENRT: NEXT=INREC+3;                 /* START OF IDEN DATA         *
IDENRT   LA    @F,3                                               0518
         A     @F,INREC                                           0518
         ST    @F,NEXT                                            0518
*         SRT=SORTOUT;                  /* START OF IDEN TABLE AREA   *
         MVC   SRT(4),SORTOUT                                     0519
* ID3:    CSDNXT=CSDPT;                 /* START OF CESD TABLE        *
ID3      MVC   CSDNXT(4),CSDPT                                    0520
*         IF COUNTER < 6                /* LESS THAN 6 BYTES OF DATA  *
*           THEN                        /* YES                        *
         CLI   COUNTER,6                                          0521
*             GO TO ID1;                /* SAVE THESE BYTES           *
         BC    04,ID1                                             0522
*           ELSE;                       /* NO                         *
* ID2:    IF IDEN=ESD4                  /* MATCHING ID'S              *
*           THEN                        /* YES                        *
ID2      L     @3,NEXT                                            0524
         L     @8,CSDNXT                                          0524
         CLC   10(2,@8),0(@3)                                     0524
         BC    07,@99F                                            0524
*             DO;                       /* DO LOOP                    *
*               SRTEND=SRT;             /* END OF TABLE ADDRESS       *
         MVC   SRTEND(4),SRT                                      0526
*               USNAME=NAME;            /* SAVE CSECT NAME IN TABLE   *
         L     @6,SRT                                             0527
         MVC   0(8,@6),0(@8)                                      0527
*               USDATE=DATE5;           /* SAVE DATE IN TABLE         *
         MVC   8(3,@6),2(@3)                                      0528
*               SRT=SRT+11;             /* UP TABLE PTR               *
         LA    @F,11                                              0529
         A     @F,SRT                                             0529
         ST    @F,SRT                                             0529
*               NUMBS=CNT;              /* NUMBER OF DATA BYTES       *
         MVC   NUMBS(1),5(@3)                                     0530
*               NEXT=NEXT+6;            /* UP RECORD PTR              *
         LA    @F,6                                               0531
         A     @F,NEXT                                            0531
         ST    @F,NEXT                                            0531
*               COUNTER=COUNTER-6;      /* NO. OF RECORD BYTES LEFT   *
         SR    @F,@F                                              0532
         IC    @F,COUNTER                                         0532
         SH    @F,@D8                                             0532
         STC   @F,COUNTER                                         0532
* ID4:          IF COUNTER ^< NUMBS     /* RECORD BYTES ^< DATA BYTES *
*                 THEN                  /* YES                        *
ID4      CLC   COUNTER(1),NUMBS                                   0533
         BC    04,@99E                                            0533
*                   DO;                 /* DO LOOP                    *
*                     DO A=1 TO NUMBS;  /* MOVE BYTES LEFT IN RECORD  *
         LA    @F,1                                               0535
         BC    15,@DO99C                                          0535
*                       USINFO = INFO;  /* BYTE BY BYTE               *
@DO99D   L     @3,NEXT                                            0536
         L     @8,SRT                                             0536
         MVC   0(1,@8),0(@3)                                      0536
*                       NEXT=NEXT+1;    /* UP RECORD POINTER          *
         LA    @F,1                                               0537
         A     @F,NEXT                                            0537
         ST    @F,NEXT                                            0537
*                       SRT=SRT+1;      /* UP TABLE PTR               *
         LA    @F,1                                               0538
         A     @F,SRT                                             0538
         ST    @F,SRT                                             0538
*                     END;              /* END OF DO LOOP             *
*                     COUNTER=COUNTER-NUMBS; /* NUMBER OF REC BYTES   *
         SR    @F,@F                                              0539
         IC    @F,A                                               0539
         AH    @F,@D6                                             0539
@DO99C   STC   @F,A                                               0539
         SR    @0,@0                                              0539
         IC    @0,NUMBS                                           0539
         CR    @F,@0                                              0539
         BC    12,@DO99D                                          0539
         SR    @F,@F                                              0540
         IC    @F,COUNTER                                         0540
         IC    @0,NUMBS                                           0540
         SR    @F,@0                                              0540
         STC   @F,COUNTER                                         0540
* ID5:                IF NUMBS=40       /* DATA BYTES LESS THAN 40    *
*                       THEN            /* YES                        *
ID5      CLI   NUMBS,40                                           0541
*                         GO TO ID3;    /* PROCESS NEXT RECORD ENTRY  *
         BC    08,ID3                                             0542
*                       ELSE            /* NO                         *
*                         DO;           /* DO LOOP                    *
*                           NUMBS=40-NUMBS;   /* NUMBER LESS THAN 40  *
         LA    @F,40                                              0544
         SR    @0,@0                                              0544
         IC    @0,NUMBS                                           0544
         SR    @F,@0                                              0544
         STC   @F,NUMBS                                           0544
*                           DO A=1 TO NUMBS;  /* MOVE IN BLANKS       *
         LA    @F,1                                               0545
         BC    15,@DO998                                          0545
*                             USINFO=BLANKS;  /* BYTE BY BYTE         *
@DO999   L     @3,SRT                                             0546
         MVC   0(1,@3),BLANKS                                     0546
*                             SRT=SRT+1;      /* UP TABLE PTR         *
         LA    @F,1                                               0547
         A     @F,SRT                                             0547
         ST    @F,SRT                                             0547
*                           END;              /* END OF LOOP          *
*                           GO TO ID3;        /* PROCESS NEXT ENTRY   *
         SR    @F,@F                                              0548
         IC    @F,A                                               0548
         AH    @F,@D6                                             0548
@DO998   STC   @F,A                                               0548
         SR    @0,@0                                              0548
         IC    @0,NUMBS                                           0548
         CR    @F,@0                                              0548
         BC    12,@DO999                                          0548
         BC    15,ID3                                             0549
*                         END;                /* END OF DO LOOP       *
*                   END;                /* END OF DO LOOP             *
*                 ELSE                  /* NO                         *
*                   DO;                 /* DO LOOP                    *
*                     DO A=1 TO COUNTER; /* MOVE BYTES LEFT IN RECORD *
@99E     LA    @F,1                                               0553
         BC    15,@DO993                                          0553
*                       USINFO=INFO;    /* BYTE BY BYTE               *
@DO994   L     @3,NEXT                                            0554
         L     @8,SRT                                             0554
         MVC   0(1,@8),0(@3)                                      0554
*                       NEXT=NEXT+1;    /* UP RECORD PTR              *
         LA    @F,1                                               0555
         A     @F,NEXT                                            0555
         ST    @F,NEXT                                            0555
*                       SRT=SRT+1;      /* UP TABLE PTR               *
         LA    @F,1                                               0556
         A     @F,SRT                                             0556
         ST    @F,SRT                                             0556
*                     END;              /* END OF LOOP                *
*                     COUNTER=NUMBS-COUNTER; /* NUMBER OF DATA BYTES  *
         SR    @F,@F                                              0557
         IC    @F,A                                               0557
         AH    @F,@D6                                             0557
@DO993   STC   @F,A                                               0557
         SR    @0,@0                                              0557
         IC    @0,COUNTER                                         0557
         CR    @F,@0                                              0557
         BC    12,@DO994                                          0557
         SR    @F,@F                                              0558
         IC    @F,NUMBS                                           0558
         IC    @0,COUNTER                                         0558
         SR    @F,@0                                              0558
         STC   @F,COUNTER                                         0558
*                                            /* LEFT FOR THAT ENTRY   *
*                     TBIT(3)='1'B;          /* TURN ON BIT           *
         OI    TBIT,B'00100000'                                   0559
*                     GO TO READRT;     /* READ NEXT RECORD           *
         BC    15,READRT                                          0560
*                   END;                /* END OF DO LOOP             *
*             END;                      /* END OF DO LOOP             *
*           ELSE                        /* NO                         *
*             IF CSDNXT ^> CSDEND       /* END OF TABLE               *
*               THEN                    /* NO                         *
@99F     L     @F,CSDEND                                          0563
         C     @F,CSDNXT                                          0563
         BC    04,@98F                                            0563
*                 DO;                   /* DO LOOP                    *
*                   CSDNXT=CSDNXT+12;   /* UP CESD TABLE PTR          *
         LA    @F,12                                              0565
         A     @F,CSDNXT                                          0565
         ST    @F,CSDNXT                                          0565
*                   GO TO ID2;          /* TRY AGAIN                  *
         BC    15,ID2                                             0566
*                 END;                  /* END OF DO LOOP             *
*               ELSE                    /* YES - END OF TABLE         *
*                 GO TO ERR1;           /* RETURN WITH ERROR MSG      *
* ID1:    IF COUNTER = 0                /* END OF RECORD              *
*           THEN                        /* YES                        *
@98E     EQU   *                                                  0569
@990     EQU   *                                                  0569
ID1      CLI   COUNTER,0                                          0569
         BC    07,@98D                                            0569
*             IF TYP='1'B               /* LAST IDR RECORD?           *
*               THEN                    /* YES                        *
         TM    TYP,B'10000000'                                    0570
         BC    12,@98C                                            0570
*                 DO;                   /* DO LOOP                    *
*                   CALL IDSORT;        /* PRINT OUT LAST RECORD      *
         BAL   @E,IDSORT                                          0572
*                   RETURN;             /* RETURN                     *
         BC    15,@EL01                                           0573
*                 END;                  /* END OF DO LOOP             *
*               ELSE                    /* NO                         *
*                 DO;                   /* DO LOOP                    *
*                   TBIT(2)='1'B;       /* ZERO OUT BIT               *
@98C     OI    TBIT,B'01000000'                                   0576
*                   GO TO READRT;       /* READ NEXT RECORD           *
         BC    15,READRT                                          0577
*             END;                      /* END OF DO LOOP             *
*           ELSE;                       /* NO                         *
@98D     EQU   *                                                  0579
*         IF COUNTER=1                  /* ONE BYTE LEFT              *
*           THEN                        /* YES                        *
@98A     CLI   COUNTER,1                                          0580
         BC    07,@989                                            0580
*             DO;                       /* DO LOOP                    *
*               SAV1=INFO;              /* SAVE BYTE                  *
         L     @3,NEXT                                            0582
         MVC   IDSAVE(1),0(@3)                                    0582
*               TBIT(8)='1'B;           /* ZERO OUT BIT               *
         OI    TBIT,B'00000001'                                   0583
*               GO TO READRT;           /* READ NEXT RECORD           *
         BC    15,READRT                                          0584
*             END;                      /* END OF DO LOOP             *
*           ELSE;                       /* NO                         *
@989     EQU   *                                                  0586
*         IF COUNTER=2                  /* TWO BYTES LEFT             *
*           THEN                        /* YES                        *
@988     CLI   COUNTER,2                                          0587
         BC    07,@987                                            0587
*             DO;                       /* DO LOOP                    *
*               POINT=ADDR(IA);         /* RETURN ADDRESS             *
         LA    @F,IA                                              0589
         ST    @F,POINT                                           0589
*               GO TO RTA;              /* FIND MATCHING ID           *
         BC    15,RTA                                             0590
* IA:           TBIT(7)='1'B;           /* ZERO OUT BIT               *
IA       OI    TBIT,B'00000010'                                   0591
*               SRT=SRT+8;              /* UP TABLE TABLE PTR         *
         LA    @F,8                                               0592
         A     @F,SRT                                             0592
         ST    @F,SRT                                             0592
*               GO TO READRT;           /* READ NEXT RECORD           *
         BC    15,READRT                                          0593
*             END;                      /* END OF DO LOOP             *
*           ELSE;                       /* NULL ELSE                  *
@987     EQU   *                                                  0595
*         IF COUNTER=3                  /* THREE BYTES LEFT           *
*           THEN                        /* YES                        *
@986     CLI   COUNTER,3                                          0596
         BC    07,@985                                            0596
*             DO;                       /* DO LOOP                    *
*               POINT=ADDR(IB);         /* RETURN ADDRESS             *
         LA    @F,IB                                              0598
         ST    @F,POINT                                           0598
*               GO TO RTA;              /* FIND MATCHING ID           *
         BC    15,RTA                                             0599
* IB:           TBIT(6)='1'B;           /* TURN ON BIT                *
IB       OI    TBIT,B'00000100'                                   0600
*               USDATE(1)=DATE5(1);     /* PART OF DATE               *
         L     @3,NEXT                                            0601
         L     @8,SRT                                             0601
         MVC   8(1,@8),2(@3)                                      0601
*               SRT=SRT+9;              /* UP TABLE TABLE PTR         *
         LA    @F,9                                               0602
         A     @F,SRT                                             0602
         ST    @F,SRT                                             0602
*               GO TO READRT;           /* READ NEXT RECORD           *
         BC    15,READRT                                          0603
*             END;                      /* END OF LOOP                *
*           ELSE;                       /* NULL ELSE                  *
@985     EQU   *                                                  0605
*         IF COUNTER=4                  /* FOUR BYTES LEFT            *
*           THEN                        /* YES                        *
@984     CLI   COUNTER,4                                          0606
         BC    07,@983                                            0606
*             DO;                       /* DO LOOP                    *
*               POINT=ADDR(IC);         /* RETURN ADDRESS             *
         LA    @F,IC                                              0608
         ST    @F,POINT                                           0608
*               GO TO RTA;              /* FIND MATCHING ID           *
         BC    15,RTA                                             0609
* IC:           TBIT(5)='1'B;           /* TURN ON BIT                *
IC       OI    TBIT,B'00001000'                                   0610
*               USDATE(1:2)=DATE5(1:2); /* SAVE DATE IN TABLE         *
         L     @3,NEXT                                            0611
         L     @8,SRT                                             0611
         MVC   8(2,@8),2(@3)                                      0611
*               SRT=SRT+10;             /* UP TABLE PTR               *
         LA    @F,10                                              0612
         A     @F,SRT                                             0612
         ST    @F,SRT                                             0612
*               GO TO READRT;           /* READ NEXT RECORD           *
         BC    15,READRT                                          0613
*             END;                      /* END OF LOOP                *
*           ELSE;                       /* NO                         *
@983     EQU   *                                                  0615
*         IF COUNTER=5                  /* FIVE BYTES LEFT            *
*           THEN                        /* YES                        *
@982     CLI   COUNTER,5                                          0616
         BC    07,@981                                            0616
*             DO;                       /* DO LOOP                    *
*               POINT=ADDR(IE);         /* RETURN ADDRESS             *
         LA    @F,IE                                              0618
         ST    @F,POINT                                           0618
*               GO TO RTA;              /* FIND MATCHING ID           *
         BC    15,RTA                                             0619
* IE:           TBIT(4)='1'B;           /* TURN ON BIT                *
IE       OI    TBIT,B'00010000'                                   0620
*               USDATE=DATE5;           /* SAVE DATE IN TABLE         *
         L     @3,NEXT                                            0621
         L     @8,SRT                                             0621
         MVC   8(3,@8),2(@3)                                      0621
*               NUMBS=CNT;              /* NO. OF DATA BYTES          *
         MVC   NUMBS(1),5(@3)                                     0622
*               SRT=SRT+11;             /* UP TABLE PTR               *
         LA    @F,11                                              0623
         A     @F,SRT                                             0623
         ST    @F,SRT                                             0623
*               GO TO READRT;           /* READ NEXT RECORD           *
         BC    15,READRT                                          0624
*             END;                      /* END OF DO LOOP             *
*           ELSE;                       /* NULL ELSE                  *
@981     EQU   *                                                  0626
* LKERT:  IF NUMO > 48                  /* LINE COUNT > 48?           *
*           THEN                        /* YES                        *
@980     EQU   *                                                  0627
LKERT    L     @3,PARMPTR                                         0627
         CLI   72(@3),48                                          0627
         BC    12,@97F                                            0627
*             CALL PRNT1;               /* PRINT NEW HEADER           *
         BAL   @E,PRNT1                                           0628
*           ELSE;                       /* NULL ELSE                  *
@97F     EQU   *                                                  0629
*         IF MDLB='1'B                  /* MODLIB SPECIFIED           *
*           THEN                        /* YES                        *
@97E     L     @3,PARMPTR                                         0630
         TM    20(@3),B'00001000'                                 0630
*             GO TO LKERT1;             /* BYPASS PRINTOUT            *
         BC    01,LKERT1                                          0631
*           ELSE;                       /* NULL ELSE                  *
*         LINKOUT=BLANKS;               /* BLANK OUT                  *
         L     @8,OUT                                             0633
         MVC   0(1,@8),BLANKS                                     0633
         MVI   1(@8),C' '                                         0633
         MVC   2(119,@8),1(@8)                                    0633
*         USA4='0';                     /* SKIP TWO LINES             *
         MVI   0(@8),C'0'                                         0634
*         MSG1='THIS LOAD MODULE WAS PRODUCED BY LINKAGE EDITOR ';
         MVC   10(48,@8),@C25                                     0635
*         MSG2=PROGNM;                  /* PROGRAM NAME               *
         L     @6,INREC                                           0636
         MVC   58(10,@8),3(@6)                                    0636
*         SP10=' AT LEVEL ';            /* CONTINUE MESSAGE           *
         MVC   68(10,@8),@C26                                     0637
*         RESTRICT (5,6);               /* RESTRICT R5 AND R6         *
*         R5=ADDR(VRSION);              /* ADDRESS OF PACKED DATA     *
         L     @4,INREC                                           0639
         LA    @5,13(0,@4)                                        0639
*         R6=ADDR(UPAK2);               /* ADDRESS OF UNPACK AREA     *
         LA    @6,UPAK2                                           0640
*         GENERATE (UNPK 0(5,6),0(3,5));
         UNPK 0(5,6),0(3,5)
         DS    0H
*         MSG3A=UPK1;                   /* VERSION                    *
         MVC   78(2,@8),UPAK2                                     0642
*         MSG3B='.';                    /* SLASH                      *
         MVI   80(@8),C'.'                                        0643
*         MSG3C=UPK2;                   /* MOD                        *
         MVC   81(2,@8),UPAK2+2                                   0644
*         R5=ADDR(LKDATE);              /* ADDRESS OF PACKED DATA     *
         LA    @5,15(0,@4)                                        0645
*         R6=ADDR(UNPKAREA);            /* ADDRESS OF UNPACK AREA     *
         LA    @6,UNPKAREA                                        0646
*         GENERATE (UNPK 0(5,6),0(3,5));
         UNPK 0(5,6),0(3,5)
         DS    0H
*         SP8=' ON DAY ';               /* CONTINUE MESSAGE           *
         MVC   83(8,@8),@C28                                      0648
*         MSG4=DYZ;                     /* DAY                        *
         MVC   91(3,@8),UNPKAREA+2                                0649
*         SP9=' OF YEAR ';              /* CONTINUE MESSAGE           *
         MVC   94(9,@8),@C29                                      0650
*         MSG5=YRZ;                     /* YEAR                       *
         MVC   103(2,@8),UNPKAREA                                 0651
*         DOT='.';                      /* .                          *
         MVI   105(@8),C'.'                                       0652
*         R5=DCBOUT;                    /* ADDR OF OUTPUT DCB         *
         L     @5,4(0,@3)                                         0653
*         R6=ADDR(LINKOUT);             /* ADDR OF OUTPUT PRINT AREA  *
         LR    @6,@8                                              0654
*         GENERATE (PUT (5),(6));
         PUT (5),(6)
         DS    0H
*         LINKOUT(2)='-';               /*  DASH                      *
         MVI   1(@8),C'-'                                         0656
*         LINKOUT(3:121)=LINKOUT(2:120); /* PROPAGATE DASHES          *
         MVC   2(119,@8),1(@8)                                    0657
*         GEN(PUT (5),(6));
         PUT (5),(6)
         DS    0H
*         RELEASE (5,6);                /* RELEASE RESTRICTION        *
*         NUMO=NUMO+4;                  /* FOR LINE COUNT             *
         LA    @F,4                                               0660
         SR    @0,@0                                              0660
         IC    @0,72(0,@3)                                        0660
         AR    @F,@0                                              0660
         STC   @F,72(0,@3)                                        0660
* LKERT1: IF TYP='1'B                   /* LAST IDR                   *
*           THEN                        /* YES                        *
LKERT1   TM    TYP,B'10000000'                                    0661
*             RETURN;                   /* RETURN                     *
         BC    03,@EL01                                           0662
*           ELSE                        /* NO                         *
*             GO TO READRT;             /* READ NEXT RECORD           *
         BC    15,READRT                                          0663
* TRANSRT: CSDNXT=CSDPT;                /* START OF CESD TABLE        *
@97C     EQU   *                                                  0664
TRANSRT  MVC   CSDNXT(4),CSDPT                                    0664
*         SRT=SORTOUT;                  /* START OF SORT TABLE        *
         MVC   SRT(4),SORTOUT                                     0665
*         NEXT=INREC+3;                 /* BEGINNING OF TRANS         *
         LA    @F,3                                               0666
         A     @F,INREC                                           0666
         ST    @F,NEXT                                            0666
*         TRN=TRNOUT;                   /* FOR TRANS DATA             *
         MVC   TRN(4),TRNOUT                                      0667
* TR1:    IF COUNTER=0                  /* ANY BYTES LEFT?            *
*           THEN                        /* NO                         *
TR1      CLI   COUNTER,0                                          0668
*             GO TO RET;                /* NEXT RECORD CHECK          *
         BC    08,RET                                             0669
*           ELSE                        /* YES                        *
*             IF TBIT(8)='1'B           /* ANOTHER TRANSLATOR         *
*               THEN                    /* YES                        *
         TM    TBIT,B'00000001'                                   0670
         BC    12,@97B                                            0670
*                   DO;                 /* DO LOOP                    *
*                     TBIT(8)='0'B;     /* ZERO OUT BIT               *
         NI    TBIT,B'11111110'                                   0672
*                     GO TO TR3;        /* CONTINUE PROCESSING        *
         BC    15,TR3                                             0673
*                   END;                /* END OF DO LOOP             *
*                 ELSE;                 /* NULL ELSE                  *
@97B     EQU   *                                                  0675
*         IDSAVE=ESDBITS;               /* ESDID                      *
@97A     L     @3,NEXT                                            0676
         MVC   IDSAVE(2),0(@3)                                    0676
*         COUNTER=COUNTER-2;            /* SUBTRACT 2 FROM BYTE COUNT *
         SR    @F,@F                                              0677
         IC    @F,COUNTER                                         0677
         SH    @F,@D5                                             0677
         STC   @F,COUNTER                                         0677
* TR1B:   IF IDSAVE(1)='1'B             /* LAST ID BEFORE TRANS DESCR *
*           THEN                        /* YES                        *
TR1B     TM    IDSAVE,B'10000000'                                 0678
         BC    12,@979                                            0678
*             DO;                       /* DO LOOP                    *
*               IDSAVE(1)='0'B;         /* TURN OFF BIT               *
         NI    IDSAVE,B'01111111'                                 0680
*               POINT=ADDR(TA);         /* RETURN ADDRESS             *
         LA    @F,TA                                              0681
         ST    @F,POINT                                           0681
*               GO TO CSFIND;           /* FIND MATCHING ID           *
         BC    15,CSFIND                                          0682
* TA:           TRNTAB=BLANKS;          /* BLANK OUT NEXT TABLE ENTRY *
TA       L     @3,SRT                                             0683
         MVC   0(1,@3),BLANKS                                     0683
         MVI   1(@3),C' '                                         0683
         MVC   2(6,@3),1(@3)                                      0683
*               SRT=SRT+8;              /* UP TABLE PTR               *
         LA    @F,8                                               0684
         A     @F,SRT                                             0684
         ST    @F,SRT                                             0684
*               IF COUNTER=0            /* ANY BYTES LEFT IN RECORD   *
*                 THEN                  /* NO                         *
         CLI   COUNTER,0                                          0685
         BC    07,@978                                            0685
*                   DO;                 /* DO LOOP                    *
*                     TBIT(7)='1'B;     /* NEXT RECORD - TRANS DESCRIP*
         OI    TBIT,B'00000010'                                   0687
*                     GO TO READRT;     /* NEXT RECORD CHECK          *
         BC    15,READRT                                          0688
*                   END;                /* END OF DO LOOP             *
*                 ELSE;                 /* YES                        *
@978     EQU   *                                                  0690
* TR1A:         TBIT=SPBIT;             /* NO. OF TRANSLATORS         *
@977     EQU   *                                                  0691
TR1A     L     @3,NEXT                                            0691
         MVC   TBIT(1),0(@3)                                      0691
*               NEXT=NEXT+1;            /* UP RECORD PTR              *
         LA    @F,1                                               0692
         A     @F,NEXT                                            0692
         ST    @F,NEXT                                            0692
*               COUNTER=COUNTER-1;      /* SUBTRACT INDIC BYTE        *
         SR    @F,@F                                              0693
         IC    @F,COUNTER                                         0693
         BCTR  @F,0                                               0693
         STC   @F,COUNTER                                         0693
*               IF COUNTER < 15         /* PARTIAL TRANS DESCRIP      *
*                 THEN                  /* YES                        *
         CLI   COUNTER,15                                         0694
         BC    10,@976                                            0694
*                   DO;                 /* DO LOOP                    *
*                     POINT=ADDR(B3);   /* LINK ADDR                  *
         LA    @F,B3                                              0696
         ST    @F,POINT                                           0696
*                     GO TO SP1;        /* BYTE BY BYTE MOVE          *
         BC    15,SP1                                             0697
* B3:                 TBIT(6)='1'B;     /* NEXT RECORD - TRANS CONTIN.*
B3       OI    TBIT,B'00000100'                                   0698
*                     COUNTER=15-COUNTER; /* BYTES LEFT TO BE MOVED   *
         LA    @F,15                                              0699
         SR    @0,@0                                              0699
         IC    @0,COUNTER                                         0699
         SR    @F,@0                                              0699
         STC   @F,COUNTER                                         0699
*                     GO TO READRT;     /* NEXT RECORD CHECK          *
         BC    15,READRT                                          0700
*                     END;              /* END OF DO LOOP             *
*                   ELSE                /* NO                         *
*                     GO TO TR2;        /* SAVE TRANS INFO            *
*             END;                      /* END OF DO LOOP             *
*           ELSE                        /* MORE ID'S TO FOLLOW        *
*             DO;                       /* DO LOOP                    *
*               POINT=ADDR(TR4);        /* RETURN ADDRESS             *
@979     LA    @F,TR4                                             0705
         ST    @F,POINT                                           0705
*               GO TO CSFIND;           /* FIND MATCHING ID           *
         BC    15,CSFIND                                          0706
* TR4:          IF COUNTER <2           /* POSSIBLE PARTIAL ID        *
*                 THEN                  /* YES                        *
TR4      CLI   COUNTER,2                                          0707
         BC    10,@973                                            0707
*                   IF COUNTER = 0      /* WHOLE ID ON NEXT RECORD    *
*                     THEN              /* YES                        *
         CLI   COUNTER,0                                          0708
         BC    07,@972                                            0708
*                       DO;             /* DO LOOP                    *
*                         TBIT(1)='1'B; /* FOR NEXT RECORD - ID       *
         OI    TBIT,B'10000000'                                   0710
*                         GO TO READRT; /* NEXT RECORD CHECK          *
         BC    15,READRT                                          0711
*                       END;            /* END OF DO LOOP             *
*                     ELSE              /* NO                         *
*                       DO;             /* DO LOOP                    *
*                         SAV1=SPBIT;   /* SPECIAL SAVE AREA          *
@972     L     @3,NEXT                                            0714
         MVC   IDSAVE(1),0(@3)                                    0714
*                         TBIT(4)='1'B; /* NEXT RECORD - ID CONTIN.   *
         OI    TBIT,B'00010000'                                   0715
*                         GO TO READRT; /* NEXT RECORD CHECK          *
         BC    15,READRT                                          0716
*                       END;            /* END OF DO LOOP             *
*                 ELSE                  /* COUNTER ^< 2               *
*                   GO TO TR1;          /* CONTINUE REGULAR PROCESSING*
*             END;                      /* END OF DO LOOP             *
@970     EQU   *                                                  0719
* TR2:    TPROG=PGM;                    /* SAVE TRANSLATOR NAME       *
@974     EQU   *                                                  0720
TR2      L     @3,NEXT                                            0720
         L     @8,TRN                                             0720
         MVC   0(10,@8),0(@3)                                     0720
*         TVER=VRMOD;                   /* VERSION                    *
         MVC   10(2,@8),10(@3)                                    0721
*         TDATE=CMPLE;                  /* COMPILE DATE               *
         MVC   12(3,@8),12(@3)                                    0722
*         TRN=TRN+15;                   /* UP TRANS DATA TABLE PTR    *
         LA    @F,15                                              0723
         A     @F,TRN                                             0723
         ST    @F,TRN                                             0723
*         COUNTER=COUNTER-15;           /* SUBTRACT BYTES PROCESSED   *
         SR    @F,@F                                              0724
         IC    @F,COUNTER                                         0724
         SH    @F,@D3                                             0724
         STC   @F,COUNTER                                         0724
*         IF COUNTER =0                 /* ANY BYTES LEFT             *
*           THEN                        /* NO                         *
         CLI   COUNTER,0                                          0725
         BC    07,@96F                                            0725
*             IF TBIT(8)='0'B           /* ANOTHER TRANSL EXPECTED    *
*               THEN                    /* NO                         *
         TM    TBIT,B'00000001'                                   0726
         BC    05,@96E                                            0726
*                 IF TYP(1)='1'B        /* LAST IDR?                  *
*                   THEN                /* YES                        *
         TM    TYP,B'10000000'                                    0727
         BC    12,@96D                                            0727
*                     DO;               /* DO LOOP                    *
*                       TDTAB=BLANKS;   /* BLANK OUT NEXT TABLE ENTRY *
         L     @8,TRN                                             0729
         MVC   0(1,@8),BLANKS                                     0729
         MVI   1(@8),C' '                                         0729
         MVC   2(13,@8),1(@8)                                     0729
*                       SRTEND=SRT;     /* END OF TABLE               *
         MVC   SRTEND(4),SRT                                      0730
*                       CALL TRSORT;    /* PRINT OUT LAST RECORD      *
         BAL   @E,TRSORT                                          0731
*                       RETURN;         /* RETURN                     *
         BC    15,@EL01                                           0732
*                     END;              /* END OF DO LOOP             *
*                   ELSE                /* MORE IDRS                  *
*                     DO;               /* DO LOOP                    *
*                       TBIT(1)='1'B;   /* TRANSLATOR RECORD CHECK    *
@96D     OI    TBIT,B'10000000'                                   0735
*                       TDTAB=BLANKS;   /* BLANK OUT NEXT TABLE ENTRY *
         L     @3,TRN                                             0736
         MVC   0(1,@3),BLANKS                                     0736
         MVI   1(@3),C' '                                         0736
         MVC   2(13,@3),1(@3)                                     0736
*                        TRN=TRN+15;    /* UP TRANS DATA TABLE PTR    *
         LA    @F,15                                              0737
         A     @F,TRN                                             0737
         ST    @F,TRN                                             0737
*                       SRTEND=SRT;     /* SAVE END OF TABLE ADDR     *
         MVC   SRTEND(4),SRT                                      0738
*                       GO TO READRT;   /* READ NEXT RECORD           *
         BC    15,READRT                                          0739
*                     END;              /* END OF DO LOOP             *
*               ELSE                    /* ANOTHER TRANSLATOR - YES   *
*                 DO;                   /* DO LOOP                    *
*               TBIT(8)='0'B;           /* TURN OFF BIT               *
@96E     NI    TBIT,B'11111110'                                   0742
*                   TBIT(3)='1'B;       /* TRANSL REC CONTIN. MIDPT   *
         OI    TBIT,B'00100000'                                   0743
*                   GO TO READRT;       /* NEXT RECORD CHECK          *
         BC    15,READRT                                          0744
*                 END;                  /* END OF DO LOOP             *
*           ELSE                        /* MORE ENTRIES               *
*             NEXT=NEXT+15;             /* UP RECORD PTR              *
@96F     LA    @F,15                                              0746
         A     @F,NEXT                                            0746
         ST    @F,NEXT                                            0746
*         IF TBIT(8)='1'B               /* ANOTHER TRANSL EXPECTED    *
*           THEN                        /* YES                        *
@96A     TM    TBIT,B'00000001'                                   0747
         BC    12,@969                                            0747
*             DO;                       /* DO LOOP                    *
*                   TBIT(8)='0'B;       /* TURN OFF BIT               *
         NI    TBIT,B'11111110'                                   0749
*               IF COUNTER < 15         /* INCOMPLETE DESCRIPTION     *
*                 THEN                  /* YES                        *
         CLI   COUNTER,15                                         0750
         BC    10,@968                                            0750
*                   DO;                 /* DO LOOP                    *
*                     POINT=ADDR(B4);   /* LINK ADDR                  *
         LA    @F,B4                                              0752
         ST    @F,POINT                                           0752
*                     GO TO SP1;        /* BYTE MOVE                  *
         BC    15,SP1                                             0753
* B4:                 COUNTER=15-COUNTER; /* NO. OF BYTES LEFT TO MOVE*
B4       LA    @F,15                                              0754
         SR    @0,@0                                              0754
         IC    @0,COUNTER                                         0754
         SR    @F,@0                                              0754
         STC   @F,COUNTER                                         0754
*                     TBIT(6)='1'B;     /*                            *
         OI    TBIT,B'00001100'                                   0755
*                     TBIT(5)='1'B;  /* IND 2ND XLATOR SPLIT @ZA03924 *
*                     GO TO READRT;     /* NEXT RECORD CHECK          *
         BC    15,READRT                                          0757
*                   END;                /* END OF DO LOOP             *
*                 ELSE                  /* COMPLETE TRANS DESCRIP     *
* TR3:            DO;                   /* DO LOOP                    *
@968     EQU   *                                                  0759
*                     TPROG=PGM;        /* SAVE PROGRAM NAME OF TRANS *
TR3      L     @3,NEXT                                            0760
         L     @8,TRN                                             0760
         MVC   0(10,@8),0(@3)                                     0760
*                     TVER=VRMOD;       /* VERSION                    *
         MVC   10(2,@8),10(@3)                                    0761
*                     TDATE=CMPLE;      /* DATE OF COMPILE            *
         MVC   12(3,@8),12(@3)                                    0762
*                        TRN=TRN+15;    /* UP TRANS DATA TABLE PTR    *
         LA    @F,15                                              0763
         A     @F,TRN                                             0763
         ST    @F,TRN                                             0763
*                     COUNTER=COUNTER-15; /* SUBTRACT BYTES MOVED     *
         SR    @F,@F                                              0764
         IC    @F,COUNTER                                         0764
         SH    @F,@D3                                             0764
         STC   @F,COUNTER                                         0764
*                     NEXT=NEXT+15;     /* UP RECORD PTR              *
         LA    @F,15                                              0765
         A     @F,NEXT                                            0765
         ST    @F,NEXT                                            0765
*                     IF COUNTER=0      /* ANY BYTES LEFT             *
*                       THEN            /* NO                         *
         CLI   COUNTER,0                                          0766
         BC    07,@966                                            0766
*                         DO;           /* DO LOOP                    *
*                           SRTEND=SRT; /* END OF TABLE               *
         MVC   SRTEND(4),SRT                                      0768
*                           TBIT(1)='1'B; /* TRANSLATOR RECORD BIT    *
         OI    TBIT,B'10000000'                                   0769
*                           GO TO RET;  /* NEXT RECORD CHECK          *
         BC    15,RET                                             0770
*                         END;          /* END OF LOOP                *
*                       ELSE            /* BYTES LEFT - YES           *
*                         GO TO TR4;    /* NEXT ID CHECK              *
*                 END;                  /* END OF DO LOOP             *
*             END;                      /* END OF DO LOOP             *
*           ELSE                        /* NO MORE TRANSLATORS        *
*             DO;                       /* DO LOOP                    *
@969     EQU   *                                                  0775
*               TDTAB=BLANKS;           /* BLANK OUT NEXT TABLE ENTRY *
         L     @3,TRN                                             0776
         MVC   0(1,@3),BLANKS                                     0776
         MVI   1(@3),C' '                                         0776
         MVC   2(13,@3),1(@3)                                     0776
*               TRN=TRN+15;             /* UP TRANS DATA TABLE PTR    *
         LA    @F,15                                              0777
         A     @F,TRN                                             0777
         ST    @F,TRN                                             0777
*               GO TO TR4;              /* NEXT ID CHECK              *
         BC    15,TR4                                             0778
*             END;                      /* END OF DO LOOP             *
* SP1:    DO A=1 TO COUNTER;            /* SPECIAL BYTE MOVE          *
@964     EQU   *                                                  0780
SP1      LA    @F,1                                               0780
         BC    15,@DO962                                          0780
*           SPBYT=SPBIT;                /* BYTE BY BYTE               *
@DO963   L     @3,NEXT                                            0781
         L     @8,TRN                                             0781
         MVC   0(1,@8),0(@3)                                      0781
*           NEXT=NEXT+1;                /* UP RECORD PTR              *
         LA    @F,1                                               0782
         A     @F,NEXT                                            0782
         ST    @F,NEXT                                            0782
*           TRN=TRN+1;                  /* UP DATA TABLE PTR          *
         LA    @F,1                                               0783
         A     @F,TRN                                             0783
         ST    @F,TRN                                             0783
*           END;                        /* END OF DO LOOP             *
*           GO TO LAB1;                 /* BRANCH ADDRESS             *
         SR    @F,@F                                              0784
         IC    @F,A                                               0784
         AH    @F,@D6                                             0784
@DO962   STC   @F,A                                               0784
         SR    @0,@0                                              0784
         IC    @0,COUNTER                                         0784
         CR    @F,@0                                              0784
         BC    12,@DO963                                          0784
         L     @3,POINT                                           0785
         BCR   15,@3                                              0785
* RET:    IF TYP='1'B                   /* LAST IDR                   *
*           THEN                        /* YES                        *
RET      TM    TYP,B'10000000'                                    0786
         BC    12,@95F                                            0786
*             DO;                       /* DO LOOP                    *
*               CALL TRSORT;            /* PRINT OUT TRANS RECORD     *
         BAL   @E,TRSORT                                          0788
*               RETURN;                 /* RETURN                     *
         BC    15,@EL01                                           0789
*             END;                      /* END OF DO LOOP             *
*           ELSE                        /* NO                         *
*             GO TO READRT;             /* READ NEXT RECORD           *
* ERR1:   ERRORS(14)='1'B;              /* CESD ERROR BIT             *
@95E     EQU   *                                                  0792
ERR1     L     @3,PARMPTR                                         0792
         OI    33(@3),B'00000100'                                 0792
*         RETURN;                       /* RETURN                     *
         BC    15,@EL01                                           0793
* ERR2:   IF MDLB='1'B                  /* MODLIB SPECIFIED           *
*           THEN                        /* YES                        *
ERR2     L     @3,PARMPTR                                         0794
         TM    20(@3),B'00001000'                                 0794
         BC    12,@95D                                            0794
*             DO;
*               CALL PRNT1;             /* PRINT LOAD MODULE NAME     *
         BAL   @E,PRNT1                                           0796
*               GO TO BYMSG;            /* BYPASS ERR MSG             *
         BC    15,BYMSG                                           0797
*             END;
*           ELSE;                       /* NO,SET TO PRINT MSG        *
@95D     EQU   *                                                  0799
*         ERRORS(12)='1'B;              /* NO IDR INFORMATION         *
@95C     L     @3,PARMPTR                                         0800
         OI    33(@3),B'00010000'                                 0800
* BYMSG:  RETURN;                       /* RETURN                     *
         BC    15,@EL01                                           0801
* ERR3:   ERRORS(13)='1'B;              /* IDRS INCOMPLETE            *
ERR3     L     @3,PARMPTR                                         0802
         OI    33(@3),B'00001000'                                 0802
*         RETURN;                       /* RETURN                     *
         BC    15,@EL01                                           0803
* CSFIND: CSDNXT=CSDPT;                 /* START OF CESD TABLE        *
CSFIND   MVC   CSDNXT(4),CSDPT                                    0804
* CS1:    IF IDEN=IDSAVE                /* MATCHING ID                *
*           THEN                        /* YES                        *
CS1      L     @3,CSDNXT                                          0805
         CLC   10(2,@3),IDSAVE                                    0805
         BC    07,@95B                                            0805
*             DO;                       /* DO LOOP                    *
*               TNAME=NAME;             /* CSECT NAME                 *
         L     @8,SRT                                             0807
         MVC   0(8,@8),0(@3)                                      0807
* NONAME:       SRT=SRT+8;              /* UP TABLE PTR      @ZA09119 *
NONAME   LA    @F,8                                               0808
         A     @F,SRT                                             0808
         ST    @F,SRT                                             0808
*               IF TBIT(4)='1'B         /* SPLIT ID?                  *
*                 THEN                  /* YES                        *
         TM    TBIT,B'00010000'                                   0809
         BC    12,@95A                                            0809
*                   TBIT(4)='0'B;       /* ZERO OUT BIT               *
         NI    TBIT,B'11101111'                                   0810
         BC    15,@959                                            0811
*                 ELSE                  /* NO                         *
*                 NEXT=NEXT+2;          /* UP RECORD PTR              *
@95A     LA    @F,2                                               0811
         A     @F,NEXT                                            0811
         ST    @F,NEXT                                            0811
*               GO TO LAB1;             /* RETURN                     *
@959     L     @3,POINT                                           0812
         BCR   15,@3                                              0812
*             END;                      /* END OF DO LOOP             *
*           ELSE                        /* NO MATCH                   *
*             IF CSDNXT ^= CSDEND       /* END OF TABLE?              *
*               THEN                    /* NO                         *
@95B     L     @F,CSDEND                                          0814
         C     @F,CSDNXT                                          0814
         BC    08,@957                                            0814
*                 DO;                   /* DO LOOP                    *
*                   CSDNXT=CSDNXT+12;   /* UP CESD PTR                *
         LA    @F,12                                              0816
         A     @F,CSDNXT                                          0816
         ST    @F,CSDNXT                                          0816
*                   GO TO CS1;          /* TRY AGAIN                  *
         BC    15,CS1                                             0817
*                 END;                  /* END OF DO LOOP             *
*               ELSE                    /* END OF TABLE               *
*                 TNAME='MISSING';      /* NAME NOT FOUND   @ZA09119  *
@957     L     @3,SRT                                             0819
         MVC   0(7,@3),@C30                                       0819
         MVI   7(@3),C' '                                         0819
*                 GO TO NONAME;         /* PUT IN SRT FIELD @ZA09119  *
         BC    15,NONAME                                          0820
* RTA:    CSDNXT=CSDPT;                 /* START OF CESD TABLE        *
RTA      MVC   CSDNXT(4),CSDPT                                    0821
* RTA1:   IF IDEN=ESD4                  /* MATCHING ID'S              *
*           THEN                        /* YES                        *
RTA1     L     @3,NEXT                                            0822
         L     @8,CSDNXT                                          0822
         CLC   10(2,@8),0(@3)                                     0822
         BC    07,@955                                            0822
*             DO;                       /* DO LOOP                    *
*               SRTEND=SRT;             /* END OF TABLE ADDRESS       *
         MVC   SRTEND(4),SRT                                      0824
*               USNAME=NAME;            /* MOVE NAME INTO TABLE       *
         L     @6,SRT                                             0825
         MVC   0(8,@6),0(@8)                                      0825
*               GO TO LAB1;             /* RETURN                     *
         L     @7,POINT                                           0826
         BCR   15,@7                                              0826
*             END;                      /* END OF DO LOOP             *
*           ELSE                        /* NO                         *
*             IF CSDNXT ^> CSDEND       /* END OF TABLE               *
*               THEN                    /* NO                         *
@955     L     @F,CSDEND                                          0828
         C     @F,CSDNXT                                          0828
         BC    04,@953                                            0828
*                 DO;                   /* DO LOOP                    *
*                   CSDNXT=CSDNXT+12;   /* UP CESD TABLE PTR          *
         LA    @F,12                                              0830
         A     @F,CSDNXT                                          0830
         ST    @F,CSDNXT                                          0830
*                   GO TO RTA1;
         BC    15,RTA1                                            0831
*                 END;                  /* END OF DO LOOP             *
*               ELSE                    /* YES                        *
*                 GO TO ERR1;           /* CESD ERROR                 *
*         /************************************************************
*         /* GENERAL PRINT ROUTINE FOR TITLES                         *
*         /************************************************************
* PRNT1:  PROCEDURE;
@952     EQU   *                                                  0834
@954     EQU   *                                                  0834
@EL01    L     @D,4(0,@D)                                         0834
         LR    @1,@C                                              0834
         L     @0,@SIZ001                                         0834
         FREEMAIN R,LV=(0),A=(1)                                  0834
         L     @E,12(0,@D)                                        0834
         LM    @0,@C,20(@D)                                       0834
         BCR   15,@E                                              0834
PRNT1    STM   @E,@C,12(@D)                                       0834
         ST    @D,@SAV002+4                                       0834
         LA    @F,@SAV002                                         0834
         ST    @F,8(0,@D)                                         0834
         LR    @D,@F                                              0834
*         PAGE=BLANKS;                  /* BLANK OUT PRINT AREA       *
         L     @1,OUT                                             0835
         MVC   0(1,@1),BLANKS                                     0835
         MVI   1(@1),C' '                                         0835
         MVC   2(119,@1),1(@1)                                    0835
*         TITLE='LISTIDR';              /* TITLE                      *
         MVC   44(7,@1),@C31                                      0836
*         TIT2=' FOR LOAD MODULE ';     /* HEADING CONTINUED          *
         MVC   51(17,@1),@C32                                     0837
*         MEM=MEMNAME;                  /* MEMBER NAME                *
         L     @8,PARMPTR                                         0838
         MVC   68(8,@1),36(@8)                                    0838
*
*         /* IF MODLIB SPECIFIED THEN CONDENSE LISTING                *
*         IF MDLB='1'B                  /* MODLIB SPECIFIED           *
*           THEN                        /* YES                        *
         TM    20(@8),B'00001000'                                 0839
         BC    12,@951                                            0839
*             DO;
*               IF NUMO > 48            /* LINE COUNT GREATER THAN 48 *
*                 THEN                  /* YES                        *
         CLI   72(@8),48                                          0841
         BC    12,@950                                            0841
*                   DO;
*                     USA3='1';         /* SKIP TO TOP OF PAGE        *
         MVI   0(@1),C'1'                                         0843
*                     NUMO='00'X;       /* ZERO OUT COUNTER           *
         MVI   72(@8),X'00'                                       0844
*                     GO TO BYPNT;      /* BYPASS PAGE NUMBER         *
         BC    15,BYPNT                                           0845
*                   END;
*                 ELSE;                 /* LINE COUNT NOT GT 48       *
@950     EQU   *                                                  0847
*               USA3=' ';               /* SKIP ONE LINE              *
@94F     L     @1,OUT                                             0848
         MVI   0(@1),C' '                                         0848
*               NUMO=NUMO+2;            /* INCREASE LINE COUNT BY 2   *
         LA    @F,2                                               0849
         L     @8,PARMPTR                                         0849
         SR    @0,@0                                              0849
         IC    @0,72(0,@8)                                        0849
         AR    @F,@0                                              0849
         STC   @F,72(0,@8)                                        0849
*               GO TO BYPNT;            /* BYPASS PAGE NO. AND SKIP   *
         BC    15,BYPNT                                           0850
*             END;
*           ELSE;                       /* NO,GIVE NORMAL LISTING     *
@951     EQU   *                                                  0852
*         USA3='1';                     /* TOP OF PAGE                *
@94E     L     @1,OUT                                             0853
         MVI   0(@1),C'1'                                         0853
*         NUMO='00'X;                   /* ZERO COUNTER               *
         L     @8,PARMPTR                                         0854
         MVI   72(@8),X'00'                                       0854
*         PGTITL='PAGE ';               /* PAGE                       *
         MVC   96(5,@1),@C34                                      0855
*         PGNO=PG;                      /* PAGE NUMBER                *
         MVC   101(4,@1),PG                                       0856
*         PGCNT=PGCNT+1;                /* UPDATE PAGE NUMBER @ZA04919*
         LA    @F,1                                               0857
         AH    @F,PGCNT                                           0857
         STH   @F,PGCNT                                           0857
*         PTR2=PGCNT;                   /* FOR CONV TO DEC    @ZA04919*
         LR    @2,@F                                              0858
*                GENERATE;              /* CONVERT TO PRINT   @ZA04919*
         CVD PTR2,DBLW                 /*     DECIMAL        @ZA04919*/
         UNPK PG(4),DBLW+5(3)          /*                    @ZA04919*/
         OI  PG+3,X'F0'                /*                    @ZA04919*/
         DS    0H
*         RESTRICT (5,6);               /* RESTRICT R5 AND R6         *
* BYPNT:  R5=DCBOUT;                    /* ADDR OF OUTPUT DCB         *
BYPNT    L     @1,PARMPTR                                         0861
         L     @5,4(0,@1)                                         0861
*         R6=ADDR(PAGE);                /* PRINT AREA ADDR            *
         L     @4,OUT                                             0862
         LR    @6,@4                                              0862
*         GENERATE (PUT (5),(6));       /* WRITE PAGE                 *
         PUT (5),(6)
         DS    0H
*         R6=TITLEAD;                   /* TITLE ADDR                 *
         L     @1,PARMPTR                                         0864
         L     @6,8(0,@1)                                         0864
*         GENERATE (PUT (5),(6));       /* WRITE TITLE                *
         PUT (5),(6)
         DS    0H
*         RELEASE (5,6);                /* RELEASE RESTRICTION        *
*         RETURN;                       /* RETURN                     *
* END PRNT1;
@EL02    L     @D,4(0,@D)                                         0868
         LM    @E,@C,12(@D)                                       0868
         BCR   15,@E                                              0868
*         /************************************************************
*         /* USER ID SORT AND PRINT ROUTINE                           *
*         /************************************************************
* IDSORT: PROCEDURE;
IDSORT   STM   @E,@C,12(@D)                                       0869
         ST    @D,@SAV003+4                                       0869
         LA    @F,@SAV003                                         0869
         ST    @F,8(0,@D)                                         0869
         LR    @D,@F                                              0869
*         SRT=SORTOUT;                  /* START OF SORT TABLE        *
         MVC   SRT(4),SORTOUT                                     0870
*         IF SRT = SRTEND               /* END OF TABLE               *
*           THEN                        /* YES                        *
         L     @F,SRTEND                                          0871
         C     @F,SRT                                             0871
*             GO TO IDS2;               /* WRITE HEADER               *
         BC    08,IDS2                                            0872
*           ELSE;                       /* NULL ELSE                  *
*         SRTPT=SRT;                    /* START OF TABLE             *
         MVC   SRTPT(4),SRT                                       0874
*         IDENTAB=IDENTDAT;             /* MOVE FIRST ENTRY           *
         L     @1,SRT                                             0875
         MVC   IDENTAB(51),0(@1)                                  0875
* IDS1:   SRT=SRT+51;                   /* UP PTR TO SORT TABLE       *
IDS1     LA    @F,51                                              0876
         A     @F,SRT                                             0876
         ST    @F,SRT                                             0876
*         IF USNAME ^< NAMUS            /* ALPHA SORT CORRECT         *
*           THEN                        /* YES                        *
         LR    @1,@F                                              0877
         CLC   0(8,@1),IDENTAB                                    0877
         BC    04,@94D                                            0877
*             DO;                       /* DO LOOP                    *
*               IF SRT ^= SRTEND        /* LAST ENTRY                 *
*                 THEN                  /* NO                         *
         L     @F,SRTEND                                          0879
         C     @F,SRT                                             0879
*                   GO TO IDS1;         /* CONTINUE SORT              *
         BC    07,IDS1                                            0880
*                 ELSE                  /* YES                        *
*                   DO;                 /* DO LOOP                    *
*                     SRTPT=SRTPT+51;   /* UP TABLE PTR               *
         LA    @F,51                                              0882
         A     @F,SRTPT                                           0882
         ST    @F,SRTPT                                           0882
*                     GO TO IDS3;       /* CONTINUE WITH NEXT ENTRY   *
         BC    15,IDS3                                            0883
*                   END;                /* END OF DO LOOP             *
*             END;                      /* END OF DO LOOP             *
*           ELSE                        /* ALPHA ORDER INCORRECT      *
*             DO;                       /* YES                        *
*               IDENSORT=IDENTDAT;      /* SAVE PRESENT TABLE ENTRY   *
@94D     L     @1,SRT                                             0887
         MVC   IDENSORT(51),0(@1)                                 0887
*               IDENTDAT=IDENTAB;       /* REPLACE WITH COMPARE ITEM  *
         MVC   0(51,@1),IDENTAB                                   0888
*               SRT=SRTPT;              /* REPLACE WITH NEEDED ADDRESS*
         MVC   SRT(4),SRTPT                                       0889
*               IDENTDAT=IDENSORT;
         L     @1,SRT                                             0890
         MVC   0(51,@1),IDENSORT                                  0890
* IDS3:         SRT=SRTPT;              /* USE NEW TABLE ENTRY        *
IDS3     MVC   SRT(4),SRTPT                                       0891
*               IF SRTPT=SRTEND         /* END OF TABLE               *
*                 THEN                  /* YES                        *
         L     @F,SRTEND                                          0892
         C     @F,SRTPT                                           0892
*                   GO TO IDS2;         /* BEGIN PRINTOUT             *
         BC    08,IDS2                                            0893
*                 ELSE                  /* NO                         *
*                   DO;                 /* DO LOOP                    *
*                     IDENTAB=IDENTDAT; /* COMPARE ITEM               *
         L     @1,SRT                                             0895
         MVC   IDENTAB(51),0(@1)                                  0895
*                     GO TO IDS1;       /* CONTINUE SORT              *
         BC    15,IDS1                                            0896
*                   END;                /* END OF DO LOOP             *
*             END;                      /* END OF DO LOOP             *
* IDS2:   SRT=SORTOUT;                  /* START OF SORT TABLE Y03739 *
@94C     EQU   *                                                  0899
IDS2     MVC   SRT(4),SORTOUT                                     0899
*         IF MDLB='1'B                  /* IS MODLIB SPECIFIED        *
*           THEN                        /* YES                        *
         L     @1,PARMPTR                                         0900
         TM    20(@1),B'00001000'                                 0900
         BC    12,@94B                                            0900
*             DO;
* RSICH:        IF RSIX='RSI'           /* IS THIS NON USER DATA      *
*                 THEN                  /* YES                        *
RSICH    L     @1,SRT                                             0902
         CLC   11(3,@1),@C35                                      0902
         BC    07,@94A                                            0902
*                   DO;
* RSICH1:             SRT=SRT+51;       /* BUMP PTR TO NEXT ENTRY     *
RSICH1   LA    @F,51                                              0904
         A     @F,SRT                                             0904
         ST    @F,SRT                                             0904
*                       IF SRT>SRTEND   /* END OF TABLE               *
*                         THEN          /* YES                        *
         L     @F,SRTEND                                          0905
         C     @F,SRT                                             0905
*                           RETURN;     /* RETURN TO CALLING ROUTINE  *
         BC    05,@EL03                                           0906
*                         ELSE;         /* NULL ELSE                  *
*                     GO TO RSICH;      /* CHECK NEXT ENTRY           *
         BC    15,RSICH                                           0908
*                   END;
*                 ELSE;                /* NULL ELSE                   *
*             END;
*           ELSE;                       /* PRINT NEXT LINE            *
@94B     EQU   *                                                  0912
*         IF NUMO > 48                  /* LINE COUNT > 48?    Y03739 *
*           THEN                        /* YES                 Y03739 *
@946     L     @1,PARMPTR                                         0913
         CLI   72(@1),48                                          0913
         BC    12,@945                                            0913
*             CALL PRNT1;               /* WRITE HEADER        Y03739 *
         BAL   @E,PRNT1                                           0914
         BC    15,@944                                            0915
*           ELSE                        /* NO                  Y03739 *
*             NUMO=NUMO+2;              /* FOR LINE COUNT      Y03739 *
@945     LA    @F,2                                               0915
         L     @1,PARMPTR                                         0915
         SR    @0,@0                                              0915
         IC    @0,72(0,@1)                                        0915
         AR    @F,@0                                              0915
         STC   @F,72(0,@1)                                        0915
* IDS6:   IDPRINT=BLANKS;               /* BLANK OUT                  *
@944     EQU   *                                                  0916
IDS6     L     @1,OUT                                             0916
         MVC   0(1,@1),BLANKS                                     0916
         MVI   1(@1),C' '                                         0916
         MVC   2(119,@1),1(@1)                                    0916
*         USA5='0';                     /* SKIP TWO LINES   @ZA09119  *
         MVI   0(@1),C'0'                                         0917
*         USNAM='CSECT';                /* CSECT HEADING              *
         MVC   11(5,@1),@C16                                      0918
         MVI   16(@1),C' '                                        0918
         MVC   17(2,@1),16(@1)                                    0918
*         USYR='YR';                    /* YR HEADING                 *
         MVC   39(2,@1),@C17                                      0919
*         USL='/';                      /* /                          *
         MVI   41(@1),C'/'                                        0920
*         USDY='DAY';                   /* DAY                        *
         MVC   42(3,@1),@C19                                      0921
*         USER='USER DATA';             /* USER DATA HEADING          *
         MVC   65(9,@1),@C36                                      0922
         MVI   74(@1),C' '                                        0922
         MVC   75(30,@1),74(@1)                                   0922
*         RESTRICT (5,6);               /* RESTRICT R5 AND R6         *
*         R5=DCBOUT;                    /* ADDRESS OF OUTPUT DCB      *
         L     @4,PARMPTR                                         0924
         L     @5,4(0,@4)                                         0924
*         R6=ADDR(IDPRINT);             /* ADDR OF OUTPUT AREA        *
         LR    @6,@1                                              0925
*         GEN (PUT (5),(6));            /* PRINT OUTPUT LINE          *
         PUT (5),(6)
         DS    0H
*         GO TO IDS5;                   /* CONTINUE PRINTOUT          *
         BC    15,IDS5                                            0927
* IDS4:   R5=DCBOUT;                    /* ADDR OF OUTPUT DCB         *
IDS4     L     @1,PARMPTR                                         0928
         L     @5,4(0,@1)                                         0928
*         R6=ADDR(IDPRINT);             /* OUTPUT AREA ADDR           *
         L     @4,OUT                                             0929
         LR    @6,@4                                              0929
*         GENERATE (PUT (5),(6));
         PUT (5),(6)
         DS    0H
*         USA5=' ';                     /* SINGLE SPACING             *
         MVI   0(@4),C' '                                         0931
*         NUMO=NUMO+1;                  /* FOR LINE COUNTER           *
         LA    @F,1                                               0932
         L     @1,PARMPTR                                         0932
         SR    @0,@0                                              0932
         IC    @0,72(0,@1)                                        0932
         AR    @F,@0                                              0932
         STC   @F,72(0,@1)                                        0932
*         LL=NUMO;                      /* LAST LINE                  *
         MVC   LL+1(1),72(@1)                                     0933
         MVI   LL,X'00'                                           0933
*         IF NUMO > 50                  /* LINE COUNT > 50?           *
*           THEN                        /* YES                        *
         CLI   72(@1),50                                          0934
         BC    12,@943                                            0934
*             DO;                       /* DO LOOP                    *
*               CALL PRNT1;             /* PRINT NEW HEADER           *
         BAL   @E,PRNT1                                           0936
*               GO TO IDS6;             /* PRINT NEW TITLE            *
         BC    15,IDS6                                            0937
*             END;                      /* END OF DO LOOP             *
*           ELSE                        /* NO                         *
*             GO TO IDS5;               /* CONTINUE PRINTOUT          *
* IDS5:   IF SRT > SRTEND               /* END OF TABLE               *
*           THEN                        /* YES                        *
@942     EQU   *                                                  0940
IDS5     L     @F,SRTEND                                          0940
         C     @F,SRT                                             0940
         BC    10,@941                                            0940
*             DO;                       /* DO LOOP                    *
* PRNTDSH:         IDPRINT(2)='-';         /* DASH          @ZA09119  *
PRNTDSH  L     @1,OUT                                             0942
         MVI   1(@1),C'-'                                         0942
*                  IDPRINT(3:121)=IDPRINT(2:120); /* PROPAGATE DASHES *
         MVC   2(119,@1),1(@1)                                    0943
*                  USA5='0';               /* DOUBLE SPACING          *
         MVI   0(@1),C'0'                                         0944
*                  NUMO=NUMO+2;            /* FOR LINE COUNT          *
         LA    @F,2                                               0945
         L     @4,PARMPTR                                         0945
         SR    @0,@0                                              0945
         IC    @0,72(0,@4)                                        0945
         AR    @F,@0                                              0945
         STC   @F,72(0,@4)                                        0945
*                  GEN (PUT (5),(6));
         PUT (5),(6)
         DS    0H
*                  RETURN;                   /* RETURN                *
         BC    15,@EL03                                           0947
*             END;                      /* END OF DO LOOP             *
*           ELSE                        /* NO                         *
*             DO;                       /* DO LOOP                    *
@941     EQU   *                                                  0949
* NONUSER:      IF MDLB='1'B            /* MODLIB SPECIFIED  @ZA09119 *
*                 THEN                  /* YES                        *
NONUSER  L     @1,PARMPTR                                         0950
         TM    20(@1),B'00001000'                                 0950
         BC    12,@93F                                            0950
*                   DO;
*                      IF RSIX='RSI'    /* IS THIS NON USER DATA      *
*                        THEN
         L     @4,SRT                                             0952
         CLC   11(3,@4),@C35                                      0952
         BC    07,@93E                                            0952
*                          DO;
*                            SRT=SRT+51; /* BUMP PTR TO NEXT ENTRY    *
         LA    @F,51                                              0954
         A     @F,SRT                                             0954
         ST    @F,SRT                                             0954
*                             IF SRT>SRTEND   /* END OF TABLE         *
*                               THEN          /* YES                  *
         L     @F,SRTEND                                          0955
         C     @F,SRT                                             0955
*                                GO TO PRNTDSH; /* PRNT DASH @ZA09119 *
         BC    04,PRNTDSH                                         0956
*                               ELSE;   /* NULL ELSE                  *
*                            GO TO NONUSER; /* NON USER?     @ZA09119 *
         BC    15,NONUSER                                         0958
*                          END;
*                        ELSE;          /* NULL ELSE                  *
*                   END;
*                 ELSE;                 /* NULL ELSE                  *
@93F     EQU   *                                                  0962
*               USNAM=USNAME;           /* CSECT NAME                 *
@93C     EQU   *                                                  0963
         L     @1,SRT                                             0963
         L     @4,OUT                                             0963
         MVC   11(8,@4),0(@1)                                     0963
*               USER=USSER;             /* USER DATA                  *
         MVC   65(40,@4),11(@1)                                   0964
*               R5=ADDR(USDATE);        /* ADDR OF PACKED DATE        *
         LA    @5,8(0,@1)                                         0965
*               R6=ADDR(UNPKAREA);      /* ADDR OF UNPACK AREA        *
         LA    @6,UNPKAREA                                        0966
*               GENERATE (UNPK 0(5,6),0(3,5));
         UNPK 0(5,6),0(3,5)
         DS    0H
*         RELEASE (5,6);                /* RELEASE RESTRICTION        *
*               USYR=YRZ;               /* YEAR                       *
         MVC   39(2,@4),UNPKAREA                                  0969
*               USDY=DYZ;               /* DAY                        *
         MVC   42(3,@4),UNPKAREA+2                                0970
*               SRT=SRT+51;             /* UP TABLE PTR               *
         LA    @F,51                                              0971
         A     @F,SRT                                             0971
         ST    @F,SRT                                             0971
*               GO TO IDS4;             /* PRINT OUT NEXT ENTRY       *
         BC    15,IDS4                                            0972
*             END;                      /* END OF DO LOOP             *
* END IDSORT;
@940     EQU   *                                                  0974
@EL03    L     @D,4(0,@D)                                         0974
         LM    @E,@C,12(@D)                                       0974
         BCR   15,@E                                              0974
*         /************************************************************
*         /* TRANSLATOR SORT AND PRINT ROUTINE                        *
*         /************************************************************
* TRSORT: PROCEDURE;
TRSORT   STM   @E,@C,12(@D)                                       0975
         ST    @D,@SAV004+4                                       0975
         LA    @F,@SAV004                                         0975
         ST    @F,8(0,@D)                                         0975
         LR    @D,@F                                              0975
*         TRN=TRNOUT;                   /* START OF DATA TABLE        *
         MVC   TRN(4),TRNOUT                                      0976
*         TTRN=TRN;                     /* OLD ENTRY                  *
         MVC   TTRN(4),TRN                                        0977
*         SRT=SORTOUT;                  /* START OF SORT TABLE        *
         MVC   SRT(4),SORTOUT                                     0978
*         SRTPT=SRT;                    /* OLD ENTRY ADDRESS          *
         MVC   SRTPT(4),SRT                                       0979
*         POINT=ADDR(TRS5);             /* LINK ADDRESS               *
         LA    @F,TRS5                                            0980
         ST    @F,POINT                                           0980
*         IF NUMO > 48                  /* LINE COUNT > 48?           *
*           THEN                        /* YES                        *
         L     @1,PARMPTR                                         0981
         CLI   72(@1),48                                          0981
         BC    12,@93B                                            0981
*             CALL PRNT1;               /* WRITE HEADER               *
         BAL   @E,PRNT1                                           0982
         BC    15,@93A                                            0983
*           ELSE                        /* NO                         *
*             NUMO=NUMO+2;              /* FOR LINE COUNT             *
@93B     LA    @F,2                                               0983
         L     @1,PARMPTR                                         0983
         SR    @0,@0                                              0983
         IC    @0,72(0,@1)                                        0983
         AR    @F,@0                                              0983
         STC   @F,72(0,@1)                                        0983
* TRS1:   TRNPRNT=BLANKS;               /* BLANK OUT PRINT AREA       *
@93A     EQU   *                                                  0984
TRS1     L     @1,OUT                                             0984
         MVC   0(1,@1),BLANKS                                     0984
         MVI   1(@1),C' '                                         0984
         MVC   2(119,@1),1(@1)                                    0984
*         USA7='0';                     /* DOUBLE SPACING             *
         MVI   0(@1),C'0'                                         0985
*         TRCSECT='CSECT';              /* CSECT                      *
         MVC   11(5,@1),@C16                                      0986
         MVI   16(@1),C' '                                        0986
         MVC   17(2,@1),16(@1)                                    0986
*         TRNAME='TRANSLATOR';          /* TRANSLATOR                 *
         MVC   24(10,@1),@C37                                     0987
*         TRVR='VR';                    /* VR                         *
         MVC   49(2,@1),@C38                                      0988
*         TRSL='.';                     /* .                          *
         MVI   51(@1),C'.'                                        0989
*         TRMD='MD';                    /* MD                         *
         MVC   52(2,@1),@C39                                      0990
*         TRYR='YR';                    /* YR                         *
         MVC   80(2,@1),@C17                                      0991
*         TRSLSH='/';                   /* /                          *
         MVI   82(@1),C'/'                                        0992
*         TRDY='DY';                    /* DY                         *
         MVC   83(2,@1),@C40                                      0993
         MVI   85(@1),C' '                                        0993
*         RESTRICT (5,6);               /* RESTRICT R5 AND R6         *
*         R5=DCBOUT;                    /* ADDR OF OUTPUT DCB         *
         L     @4,PARMPTR                                         0995
         L     @5,4(0,@4)                                         0995
*         R6=ADDR(TRNPRNT);             /* ADDR OF PRINT AREA         *
         LR    @6,@1                                              0996
*         GENERATE (PUT (5),(6));
         PUT (5),(6)
         DS    0H
*         GO TO TRS2;                   /* FOR NEXT TABLE ENTRY       *
         BC    15,TRS2                                            0998
* TRS4:   IF SRT ^< SRTEND              /* LAST ENTRY                 *
*           THEN                        /* YES                        *
TRS4     L     @F,SRTEND                                          0999
         C     @F,SRT                                             0999
         BC    02,@939                                            0999
*             DO;                       /* DO LOOP                    *
*               TRNPRNT(2)='-';         /* DASH                       *
         L     @1,OUT                                             1001
         MVI   1(@1),C'-'                                         1001
*               TRNPRNT(3:121)=TRNPRNT(2:120); /* PROPAGATE DASHES    *
         MVC   2(119,@1),1(@1)                                    1002
*               USA7='0';               /* DOUBLE SPACING             *
         MVI   0(@1),C'0'                                         1003
*               NUMO=NUMO+2;            /* FOR LINE COUNT             *
         LA    @F,2                                               1004
         L     @4,PARMPTR                                         1004
         SR    @0,@0                                              1004
         IC    @0,72(0,@4)                                        1004
         AR    @F,@0                                              1004
         STC   @F,72(0,@4)                                        1004
*               R5=DCBOUT;              /* ADDR OF OUTPUT DCB         *
         L     @5,4(0,@4)                                         1005
*               R6=ADDR(TRNPRNT);       /* ADDR OF OUTPUT LINE        *
         LR    @6,@1                                              1006
*               GEN(PUT (5),(6));
         PUT (5),(6)
         DS    0H
*               RETURN;                 /* RETURN                     *
         BC    15,@EL04                                           1008
*             END;                      /* END OF DO LOOP             *
*           ELSE                        /* NO                         *
*             DO;                       /* DO LOOP                    *
*               IF NUMO > 50            /* NEW PAGE?                  *
*                 THEN                  /* YES                        *
@939     L     @1,PARMPTR                                         1011
         CLI   72(@1),50                                          1011
         BC    12,@937                                            1011
*                   DO;                 /* DO LOOP                    *
*                     CALL PRNT1;       /* PRINT NEW HEADER           *
         BAL   @E,PRNT1                                           1013
*                     GO TO TRS1;       /* PRINT NEW TITLE            *
         BC    15,TRS1                                            1014
*                   END;                /* END OF DO LOOP             *
*                 ELSE                  /* NO                         *
*                   DO;                 /* DO LOOP                    *
*                     LL=NUMO;          /* LASTLINE                   *
@937     L     @1,PARMPTR                                         1017
         MVC   LL+1(1),72(@1)                                     1017
         MVI   LL,X'00'                                           1017
*                     NUMO=NUMO+1;      /* ADD 1 TO COUNTER           *
         LA    @F,1                                               1018
         SR    @0,@0                                              1018
         IC    @0,72(0,@1)                                        1018
         AR    @F,@0                                              1018
         STC   @F,72(0,@1)                                        1018
*                     GO TO TRS2;       /* CONTINUE PROCESSING        *
*                   END;                /* END OF DO LOOP             *
*             END;                      /* END OF DO LOOP             *
@936     EQU   *                                                  1021
* TRS2:   TRCSECT=TNAME;                /* CSECT NAME                 *
@938     EQU   *                                                  1022
TRS2     L     @1,SRT                                             1022
         L     @4,OUT                                             1022
         MVC   11(8,@4),0(@1)                                     1022
*         TRNAME=TPROG;                 /* PROGRAM NAME               *
         L     @7,TRN                                             1023
         MVC   24(10,@4),0(@7)                                    1023
*         R5=ADDR(TVER);                /* PACKED DATA                *
         LA    @5,10(0,@7)                                        1024
*         R6=ADDR(UPAK2);               /* UNPACK AREA                *
         LA    @6,UPAK2                                           1025
*         GENERATE (UNPK 0(5,6),0(3,5));
         UNPK 0(5,6),0(3,5)
         DS    0H
*         TRVR=UPK1;                    /* VERSION                    *
         MVC   49(2,@4),UPAK2                                     1027
*         TRMD=UPK2;                    /* MOD                        *
         MVC   52(2,@4),UPAK2+2                                   1028
*         R5=ADDR(TDATE);               /* COMPILE DATE               *
         LA    @5,12(0,@7)                                        1029
*         R6=ADDR(UNPKAREA);            /* UNPACK AREA ADDR           *
         LA    @6,UNPKAREA                                        1030
*         GENERATE (UNPK 0(5,6),0(3,5));
         UNPK 0(5,6),0(3,5)
         DS    0H
*         TRYR=YRZ;                     /* YEAR                       *
         MVC   80(2,@4),UNPKAREA                                  1032
*         TRDY=DYZ;                     /* DAY                        *
         MVC   83(3,@4),UNPKAREA+2                                1033
* TRS3:   R5=DCBOUT;                    /* ADDRESS OF OUTPUT DCB      *
TRS3     L     @1,PARMPTR                                         1034
         L     @5,4(0,@1)                                         1034
*         R6=ADDR(TRNPRNT);             /* ADDR OF PRINT AREA         *
         L     @4,OUT                                             1035
         LR    @6,@4                                              1035
*         GENERATE (PUT (5),(6));
         PUT (5),(6)
         DS    0H
*         USA7=' ';                     /* SINGLE SPACING             *
         MVI   0(@4),C' '                                         1037
*         RELEASE (5,6);                /* RELEASE RESTRICTION        *
*         GO TO LAB1;                   /* LINK ADDRESS               *
         L     @1,POINT                                           1039
         BCR   15,@1                                              1039
* TRS5:   SRTPT=SRT;                    /* OLD ENTRY                  *
TRS5     MVC   SRTPT(4),SRT                                       1040
*         SRT=SRT+8;                    /* NEW ENTRY                  *
         LA    @F,8                                               1041
         A     @F,SRT                                             1041
         ST    @F,SRT                                             1041
*         IF SRBYTE=BLANKS              /* LAST CSECT FOR THIS TRANSL *
*           THEN                        /* YES                        *
         LR    @1,@F                                              1042
         CLC   0(1,@1),BLANKS                                     1042
         BC    07,@935                                            1042
*             DO;                       /* DO LOOP                    *
*               TTRN=TRN;               /* OLD ENTRY                  *
         MVC   TTRN(4),TRN                                        1044
*               TRN=TRN+15;             /* NEW ENTRY                  *
         LA    @F,15                                              1045
         A     @F,TRN                                             1045
         ST    @F,TRN                                             1045
*               IF TRBYTE=BLANKS        /* TWO TRANSLATORS            *
*                 THEN                  /* NO                         *
         LR    @8,@F                                              1046
         CLC   0(1,@8),BLANKS                                     1046
         BC    07,@934                                            1046
*                   DO;                 /* DO LOOP                    *
*                     SRT=SRT+8;        /* UP TRANS TABLE PTR         *
         LA    @F,8                                               1048
         A     @F,SRT                                             1048
         ST    @F,SRT                                             1048
*                     TRN=TRN+15;       /* UP DATA PTR                *
         LA    @F,15                                              1049
         A     @F,TRN                                             1049
         ST    @F,TRN                                             1049
*                     POINT=ADDR(TRS5); /* LINK ADDRESS               *
         LA    @F,TRS5                                            1050
         ST    @F,POINT                                           1050
*                     GO TO TRS4;       /* BRANCH ADDRESS             *
         BC    15,TRS4                                            1051
*                   END;                /* END OF DO LOOP             *
*                 ELSE                  /* ANOTHER TRANSLATOR         *
*                   DO;                 /* DO LOOP                    *
*                     POINT=ADDR(TRS6); /* LINK ADDRESS               *
@934     LA    @F,TRS6                                            1054
         ST    @F,POINT                                           1054
*                     NUMO=NUMO+1;      /* ADD ONE TO COUNTER         *
         LA    @F,1                                               1055
         L     @1,PARMPTR                                         1055
         SR    @0,@0                                              1055
         IC    @0,72(0,@1)                                        1055
         AR    @F,@0                                              1055
         STC   @F,72(0,@1)                                        1055
*                     GO TO TRS2;       /* CONTINUE PROCESSING        *
         BC    15,TRS2                                            1056
*                   END;                /* END OF DO LOOP             *
*             END;                      /* END OF DO LOOP             *
*           ELSE                        /* ANOTHER CSECT FOR THIS     *
*                                       /* TRANSLATOR                 *
*             DO;                       /* DO LOOP                    *
*               TTRN=TRN;               /* OLD ENTRY                  *
@935     MVC   TTRN(4),TRN                                        1060
*               TRN=TRN+15;             /* NEW ENTRY                  *
         LA    @F,15                                              1061
         A     @F,TRN                                             1061
         ST    @F,TRN                                             1061
*               IF TRBYTE=BLANKS        /* ONLY ONE TRANSLATOR        *
*                 THEN                  /* YES                        *
         LR    @1,@F                                              1062
         CLC   0(1,@1),BLANKS                                     1062
         BC    07,@931                                            1062
*                   DO;                 /* DO LOOP                    *
*                     TRN=TTRN;         /* OLD ENTRY                  *
         MVC   TRN(4),TTRN                                        1064
*                     POINT=ADDR(TRS5); /* LINK ADDRESS               *
         LA    @F,TRS5                                            1065
         ST    @F,POINT                                           1065
*                     GO TO TRS4;       /* NEXT TABLE ENTRY           *
         BC    15,TRS4                                            1066
*                   END;                /* END OF DO LOOP             *
*                 ELSE                  /* TWO TRANSLATORS            *
*                   DO;                 /* DO LOOP                    *
*                     SRT=SRTPT;        /* OLD ENTRY                  *
@931     MVC   SRT(4),SRTPT                                       1069
*                     TNAME=BLANKS;     /* BLANK OUT CSECT ENTRY      *
         L     @1,SRT                                             1070
         MVC   0(1,@1),BLANKS                                     1070
         MVI   1(@1),C' '                                         1070
         MVC   2(6,@1),1(@1)                                      1070
*                     POINT=ADDR(TRS7); /* LINK ADDRESS               *
         LA    @F,TRS7                                            1071
         ST    @F,POINT                                           1071
*                     NUMO=NUMO+1;      /* ADD ONE TO COUNTER         *
         LA    @F,1                                               1072
         L     @8,PARMPTR                                         1072
         SR    @0,@0                                              1072
         IC    @0,72(0,@8)                                        1072
         AR    @F,@0                                              1072
         STC   @F,72(0,@8)                                        1072
*                     GO TO TRS2;       /* CONTINUE PROCESSING        *
         BC    15,TRS2                                            1073
*                   END;                /* END OF DO LOOP             *
*             END;                      /* END OF DO LOOP             *
@930     EQU   *                                                  1075
* TRS6:   TTRN=TRN;                     /* OLD ENTRY                  *
@932     EQU   *                                                  1076
TRS6     MVC   TTRN(4),TRN                                        1076
*         TRN=TRN+15;                   /* NEW ENTRY                  *
         LA    @F,15                                              1077
         A     @F,TRN                                             1077
         ST    @F,TRN                                             1077
*         SRT=SRT+8;                    /* UP TRANS TABLE PTR         *
         LA    @F,8                                               1078
         A     @F,SRT                                             1078
         ST    @F,SRT                                             1078
*         POINT=ADDR(TRS5);             /* LINK ADDR                  *
         LA    @F,TRS5                                            1079
         ST    @F,POINT                                           1079
*         GO TO TRS4;                   /* FOR NEXT TABLE ENTRY       *
         BC    15,TRS4                                            1080
* TRS7:   SRT=SRT+8;                    /* NEXT TABLE ENTRY           *
TRS7     LA    @F,8                                               1081
         A     @F,SRT                                             1081
         ST    @F,SRT                                             1081
*         IF SRBYTE=BLANKS              /* NO MORE CSECTS             *
*           THEN                        /* YES - NO MORE CSECTS       *
         LR    @1,@F                                              1082
         CLC   0(1,@1),BLANKS                                     1082
         BC    07,@92F                                            1082
*             DO;                       /* DO LOOP                    *
*               SRT=SRT+8;              /* NEXT CSECT                 *
         LA    @F,8                                               1084
         A     @F,SRT                                             1084
         ST    @F,SRT                                             1084
*               TRN=TRN+15;             /* NEXT TRANSLATOR            *
         LA    @F,15                                              1085
         A     @F,TRN                                             1085
         ST    @F,TRN                                             1085
*               POINT=ADDR(TRS5);       /* LINK ADDRESS               *
         LA    @F,TRS5                                            1086
         ST    @F,POINT                                           1086
*               GO TO TRS4;             /* BRANCH ADDRESS             *
         BC    15,TRS4                                            1087
*             END;                      /* END OF DO LOOP             *
*           ELSE                        /* MORE CSECTS                *
*             DO;                       /* DO LOOP                    *
*               TRN=TTRN;               /* OLD ENTRY                  *
@92F     MVC   TRN(4),TTRN                                        1090
*               POINT=ADDR(TRS5);       /* LINK ADDRESS               *
         LA    @F,TRS5                                            1091
         ST    @F,POINT                                           1091
*               GO TO TRS4;             /* BRANCH ADDRESS             *
         BC    15,TRS4                                            1092
*             END;                      /* END OF DO LOOP             *
* END TRSORT;
@92E     EQU   *                                                  1094
@EL04    L     @D,4(0,@D)                                         1094
         LM    @E,@C,12(@D)                                       1094
         BCR   15,@E                                              1094
* END HMBLKIDR;
@DATA1   EQU   *
@0       EQU   00                  EQUATES FOR REGISTERS 0-15
@1       EQU   01
@2       EQU   02
@3       EQU   03
@4       EQU   04
@5       EQU   05
@6       EQU   06
@7       EQU   07
@8       EQU   08
@9       EQU   09
@A       EQU   10
@B       EQU   11
@C       EQU   12
@D       EQU   13
@E       EQU   14
@F       EQU   15
@D1      DC    H'16'
@D2      DC    H'-2'
@D3      DC    H'15'
@D4      DC    H'3'
@D5      DC    H'2'
@D6      DC    H'1'
@D7      DC    H'4'
@D8      DC    H'6'
         DS    0F
@SIZ001  DC    AL1(&SPN)
         DC    AL3(@DATEND-@DATD)
         DS    0F
@C4      DC    C'0001'
@C12     DC    C'$PRIVATE'
@C20     DC    C'IMASPZAP'
@C25     DC    C'THIS LOAD MODULE WAS PRODUCED BY LINKAGE EDITOR '
@C28     DC    C' ON DAY '
@C17     DC    C'YR'
@C23     DC    C'THIS LOAD MODULE CONTAINS '
@C26     DC    C' AT LEVEL '
@C37     DC    C'TRANSLATOR'
@C38     DC    C'VR'
@C39     DC    C'MD'
@C40     DC    C'DY'
@C16     DC    C'CSECT'
@C19     DC    C'DAY'
@C21     DC    C' DATA'
@C24     DC    C'NO INFORMATION SUPPLIED BY IMASPZAP'
@C29     DC    C' OF YEAR '
@C30     DC    C'MISSING'
@C31     DC    C'LISTIDR'
@C32     DC    C' FOR LOAD MODULE '
@C34     DC    C'PAGE '
@C35     DC    C'RSI'
@C36     DC    C'USER DATA'
         DS    0D
@DATA    EQU   *
DUMMY    EQU   00000000            FULLWORD INTEGER
REG1     EQU   00000001            FULLWORD POINTER REGISTER
PTR2     EQU   00000002            FULLWORD INTEGER REGISTER
R5       EQU   00000005            FULLWORD POINTER REGISTER
R6       EQU   00000006            FULLWORD POINTER REGISTER
SRBYTE   EQU   00000000            1 BYTE(S)
TRBYTE   EQU   00000000            1 BYTE(S)
PAGE     EQU   00000000            121 BYTE(S) ON WORD
USA3     EQU   PAGE+00000000       1 BYTE(S)
NULL     EQU   PAGE+00000001       43 BYTE(S)
TITLE    EQU   PAGE+00000044       7 BYTE(S)
TIT2     EQU   PAGE+00000051       17 BYTE(S)
MEM      EQU   PAGE+00000068       8 BYTE(S)
NULL2    EQU   PAGE+00000076       20 BYTE(S)
PGTITL   EQU   PAGE+00000096       5 BYTE(S)
PGNO     EQU   PAGE+00000101       4 BYTE(S)
NONE     EQU   PAGE+00000105       16 BYTE(S)
CESDRC   EQU   00000000            8 BYTE(S) ON WORD
TYPE     EQU   CESDRC+00000000     8 BIT(S)
SPARE    EQU   CESDRC+00000001     3 BYTE(S)
ESDID    EQU   CESDRC+00000004     2 BYTE(S)
COUNT    EQU   CESDRC+00000006     2 BYTE(S)
IDRREC   EQU   00000000            3 BYTE(S) ON WORD
ID       EQU   IDRREC+00000000     8 BIT(S)
BYTCNT   EQU   IDRREC+00000001     1 BYTE(S)
SUBTYP   EQU   IDRREC+00000002     8 BIT(S)
LINKRC   EQU   00000000            18 BYTE(S) ON WORD
SPARE3   EQU   LINKRC+00000000     3 BYTE(S)
PROGNM   EQU   LINKRC+00000003     10 BYTE(S)
VRSION   EQU   LINKRC+00000013     2 BYTE(S)
LKDATE   EQU   LINKRC+00000015     3 BYTE(S)
TRANS    EQU   00000000            2 BYTE(S) ON WORD
ESDBITS  EQU   TRANS+00000000      16 BIT(S)
USRDATA  EQU   00000000            6 BYTE(S) ON WORD
ESD4     EQU   USRDATA+00000000    2 BYTE(S)
DATE5    EQU   USRDATA+00000002    3 BYTE(S)
CNT      EQU   USRDATA+00000005    1  BYTE  POINTER
CESDATA  EQU   00000000            16 BYTE(S) ON WORD
EXTRNAM  EQU   CESDATA+00000000    8 BYTE(S)
ESDTYP   EQU   CESDATA+00000008    8 BIT(S)
SKIP     EQU   CESDATA+00000009    7 BYTE(S)
ZAPD     EQU   00000000            1 BYTE(S) ON WORD
FLG      EQU   ZAPD+00000000       8 BIT(S)
ZAP      EQU   00000000            13 BYTE(S) ON WORD
ESD      EQU   ZAP+00000000        2 BYTE(S)
DATE1    EQU   ZAP+00000002        3 BYTE(S)
ZP       EQU   ZAP+00000005        8 BYTE(S)
TRNSDSC  EQU   00000000            15 BYTE(S) ON WORD
PGM      EQU   TRNSDSC+00000000    10 BYTE(S)
VRMOD    EQU   TRNSDSC+00000010    2 BYTE(S)
CMPLE    EQU   TRNSDSC+00000012    3 BYTE(S)
TRNTAB   EQU   00000000            8 BYTE(S) ON WORD
TNAME    EQU   TRNTAB+00000000     8 BYTE(S)
TDTAB    EQU   00000000            15 BYTE(S) ON WORD
TPROG    EQU   TDTAB+00000000      10 BYTE(S)
TVER     EQU   TDTAB+00000010      2 BYTE(S)
TDATE    EQU   TDTAB+00000012      3 BYTE(S)
TRNPRNT  EQU   00000000            121 BYTE(S) ON WORD
USA7     EQU   TRNPRNT+00000000    1 BYTE(S)
SSA      EQU   TRNPRNT+00000001    10 BYTE(S)
TRCSECT  EQU   TRNPRNT+00000011    8 BYTE(S)
SSB      EQU   TRNPRNT+00000019    5 BYTE(S)
TRNAME   EQU   TRNPRNT+00000024    10 BYTE(S)
SSC      EQU   TRNPRNT+00000034    15 BYTE(S)
TRVR     EQU   TRNPRNT+00000049    2 BYTE(S)
TRSL     EQU   TRNPRNT+00000051    1 BYTE(S)
TRMD     EQU   TRNPRNT+00000052    2 BYTE(S)
SSD      EQU   TRNPRNT+00000054    26 BYTE(S)
TRYR     EQU   TRNPRNT+00000080    2 BYTE(S)
TRSLSH   EQU   TRNPRNT+00000082    1 BYTE(S)
TRDY     EQU   TRNPRNT+00000083    3 BYTE(S)
SSE      EQU   TRNPRNT+00000086    35 BYTE(S)
LINKOUT  EQU   00000000            121 BYTE(S) ON WORD
USA4     EQU   LINKOUT+00000000    1 BYTE(S)
SP12     EQU   LINKOUT+00000001    9 BYTE(S)
MSG1     EQU   LINKOUT+00000010    48 BYTE(S)
MSG2     EQU   LINKOUT+00000058    10 BYTE(S)
SP10     EQU   LINKOUT+00000068    10 BYTE(S)
MSG3A    EQU   LINKOUT+00000078    2 BYTE(S)
MSG3B    EQU   LINKOUT+00000080    1 BYTE(S)
MSG3C    EQU   LINKOUT+00000081    2 BYTE(S)
SP8      EQU   LINKOUT+00000083    8 BYTE(S)
MSG4     EQU   LINKOUT+00000091    3 BYTE(S)
SP9      EQU   LINKOUT+00000094    9 BYTE(S)
MSG5     EQU   LINKOUT+00000103    2 BYTE(S)
DOT      EQU   LINKOUT+00000105    1 BYTE(S)
SP11     EQU   LINKOUT+00000106    15 BYTE(S)
SPBYT    EQU   00000000            8 BIT(S) ON BYTE
SPBIT    EQU   00000000            1  BYTE  POINTER
CSDTAB   EQU   00000000            12 BYTE(S) ON WORD
NAME     EQU   CSDTAB+00000000     8 BYTE(S)
SPARE6   EQU   CSDTAB+00000008     2 BYTE(S)
IDEN     EQU   CSDTAB+00000010     2 BYTE(S)
SORTAB   EQU   00000000            19 BYTE(S) ON WORD
CNAME    EQU   SORTAB+00000000     8 BYTE(S)
ZPDATE   EQU   SORTAB+00000008     3 BYTE(S)
DAZP     EQU   SORTAB+00000011     8 BYTE(S)
ZPPRINT  EQU   00000000            121 BYTE(S) ON WORD
USA2     EQU   ZPPRINT+00000000    1 BYTE(S)
SPCA     EQU   ZPPRINT+00000001    20 BYTE(S)
CSNAME   EQU   ZPPRINT+00000021    8 BYTE(S)
SPCB     EQU   ZPPRINT+00000029    20 BYTE(S)
YEAR     EQU   ZPPRINT+00000049    2 BYTE(S)
SL       EQU   ZPPRINT+00000051    1 BYTE(S)
DATE     EQU   ZPPRINT+00000052    3 BYTE(S)
SPCC     EQU   ZPPRINT+00000055    20 BYTE(S)
ZPD      EQU   ZPPRINT+00000075    8 BYTE(S)
SPCD     EQU   ZPPRINT+00000083    38 BYTE(S)
NOZAP    EQU   00000000            121 BYTE(S) ON WORD
USA6     EQU   NOZAP+00000000      1 BYTE(S)
SPEA     EQU   NOZAP+00000001      25 BYTE(S)
ZPMSG1   EQU   NOZAP+00000026      26 BYTE(S)
ZPMSG2   EQU   NOZAP+00000052      35 BYTE(S)
SPEB     EQU   NOZAP+00000087      34 BYTE(S)
IDENTDAT EQU   00000000            51 BYTE(S) ON WORD
USNAME   EQU   IDENTDAT+00000000   8 BYTE(S)
USDATE   EQU   IDENTDAT+00000008   3 BYTE(S)
USSER    EQU   IDENTDAT+00000011   40 BYTE(S)
RSIX     EQU   IDENTDAT+00000011   3 BYTE(S)
A00000   EQU   IDENTDAT+00000014   37 BYTE(S)
IDPRINT  EQU   00000000            121 BYTE(S) ON WORD
USA5     EQU   IDPRINT+00000000    1 BYTE(S)
SPDA     EQU   IDPRINT+00000001    10 BYTE(S)
USNAM    EQU   IDPRINT+00000011    8 BYTE(S)
SPDB     EQU   IDPRINT+00000019    20 BYTE(S)
USYR     EQU   IDPRINT+00000039    2 BYTE(S)
USL      EQU   IDPRINT+00000041    1 BYTE(S)
USDY     EQU   IDPRINT+00000042    3 BYTE(S)
SPDC     EQU   IDPRINT+00000045    20 BYTE(S)
USER     EQU   IDPRINT+00000065    40 BYTE(S)
SPDD     EQU   IDPRINT+00000105    16 BYTE(S)
USINFO   EQU   00000000            1  BYTE  POINTER
INFO     EQU   00000000            1  BYTE  POINTER
MAINT    EQU   *                   400 BYTE(S) ON DWORD
         DC    C'MAINTENANCE'
         DC    00389C' '
PARMLIST EQU   00000000            73 BYTE(S) ON WORD
DCBIN    EQU   PARMLIST+00000000   FULLWORD POINTER
DCBOUT   EQU   PARMLIST+00000004   FULLWORD POINTER
TITLEAD  EQU   PARMLIST+00000008   FULLWORD POINTER
AREAGET  EQU   PARMLIST+00000012   FULLWORD POINTER
GMLENGTH EQU   PARMLIST+00000016   FULLWORD INTEGER
FLAGS    EQU   PARMLIST+00000020   16 BIT(S)
IDRFLAG  EQU   PARMLIST+00000020   1 BIT(S)
OVLYFLAG EQU   PARMLIST+00000020   1 BIT(S)
NOTEDIT  EQU   PARMLIST+00000020   1 BIT(S)
NORLD    EQU   PARMLIST+00000020   1 BIT(S)
MDLB     EQU   PARMLIST+00000020   1 BIT(S)
A00001   EQU   PARMLIST+00000020   11 BIT(S)
BLKCNT   EQU   PARMLIST+00000022   HALFWORD INTEGER
BUFF     EQU   PARMLIST+00000024   FULLWORD POINTER
SCATLEN  EQU   PARMLIST+00000028   FULLWORD INTEGER
ERRORS   EQU   PARMLIST+00000032   32 BIT(S)
MEMNAME  EQU   PARMLIST+00000036   8 BYTE(S)
DDNAME   EQU   PARMLIST+00000044   8 BYTE(S)
TXTTR    EQU   PARMLIST+00000052   3 BYTE(S)
TXTLEN   EQU   PARMLIST+00000055   2 BYTE(S)
A00002   EQU   PARMLIST+00000060   FULLWORD INTEGER
A00003   EQU   PARMLIST+00000064   4 BYTE(S)
A00004   EQU   PARMLIST+00000068   4 BYTE(S)
NUMO     EQU   PARMLIST+00000072   1  BYTE  POINTER
         ORG   @DATA
         DS    00000400C
@L       EQU   1
@DATD    DSECT
@SAV001  EQU   @DATD+00000000      72 BYTE(S) ON WORD
PARMPTR  EQU   @DATD+00000072      FULLWORD POINTER
CSDEND   EQU   @DATD+00000076      FULLWORD POINTER
A        EQU   @DATD+00000080      1  BYTE  POINTER
INREC    EQU   @DATD+00000084      FULLWORD POINTER
NEXT     EQU   @DATD+00000088      FULLWORD POINTER
CSDNXT   EQU   @DATD+00000092      FULLWORD POINTER
SRT      EQU   @DATD+00000096      FULLWORD POINTER
SRTEND   EQU   @DATD+00000100      FULLWORD POINTER
TRNOUT   EQU   @DATD+00000104      FULLWORD INTEGER
OUT      EQU   @DATD+00000108      FULLWORD POINTER
CSDPT    EQU   @DATD+00000112      FULLWORD INTEGER
SORTOUT  EQU   @DATD+00000116      FULLWORD INTEGER
SRTPT    EQU   @DATD+00000120      FULLWORD INTEGER
TRN      EQU   @DATD+00000124      FULLWORD POINTER
TTRN     EQU   @DATD+00000128      FULLWORD INTEGER
COUNTER  EQU   @DATD+00000132      1  BYTE  POINTER
NUMBS    EQU   @DATD+00000133      1  BYTE  POINTER
SWITCH   EQU   @DATD+00000134      8 BIT(S) ON BYTE
ESDNO    EQU   @DATD+00000136      HALFWORD INTEGER
ESDCOUNT EQU   @DATD+00000138      HALFWORD INTEGER
BLANKS   EQU   @DATD+00000140      1 BYTE(S)
LL       EQU   @DATD+00000142      HALFWORD INTEGER
READLIST EQU   @DATD+00000144      30 BYTE(S) ON WORD
BYTES    EQU   @DATD+00000174      1  BYTE  POINTER
FLG1     EQU   @DATD+00000175      8 BIT(S) ON BYTE
PG       EQU   @DATD+00000176      FULLWORD INTEGER
PGCNT    EQU   @DATD+00000180      HALFWORD INTEGER
DBLW     EQU   @DATD+00000184      9 BYTE(S) ON DWORD
WRD1     EQU   DBLW+00000000       FULLWORD INTEGER
HWRD1    EQU   DBLW+00000000       2 BYTE(S)
SIXBYT   EQU   DBLW+00000002       6 BYTE(S)
HWRD2    EQU   DBLW+00000002       2 BYTE(S)
WRD2     EQU   DBLW+00000004       FULLWORD INTEGER
BYTE2    EQU   DBLW+00000004       2 BYTE(S)
BYTE2A   EQU   DBLW+00000006       2 BYTE(S)
DUMY     EQU   DBLW+00000008       1 BYTE(S)
TBIT     EQU   @DATD+00000193      8 BIT(S) ON BYTE
TYP      EQU   @DATD+00000194      1 BIT(S) ON BYTE
SW1      EQU   @DATD+00000195      2 BIT(S) ON BYTE
POINT    EQU   @DATD+00000196      FULLWORD POINTER
ZAPSORT  EQU   @DATD+00000200      19 BYTE(S)
SORTAREA EQU   @DATD+00000220      19 BYTE(S) ON WORD
CSECTNM  EQU   SORTAREA+00000000   8 BYTE(S)
ZPSPACE  EQU   SORTAREA+00000008   11 BYTE(S)
UPAK2    EQU   @DATD+00000240      5 BYTE(S) ON WORD
UPK1     EQU   UPAK2+00000000      2 BYTE(S)
UPK2     EQU   UPAK2+00000002      2 BYTE(S)
GARB     EQU   UPAK2+00000004      1 BYTE(S)
UNPKAREA EQU   @DATD+00000248      5 BYTE(S) ON WORD
YRZ      EQU   UNPKAREA+00000000   2 BYTE(S)
DYZ      EQU   UNPKAREA+00000002   3 BYTE(S)
IDENTAB  EQU   @DATD+00000256      51 BYTE(S) ON WORD
NAMUS    EQU   IDENTAB+00000000    8 BYTE(S)
RESTAB   EQU   IDENTAB+00000008    43 BYTE(S)
IDENSORT EQU   @DATD+00000307      51 BYTE(S)
IDSAVE   EQU   @DATD+00000358      16 BIT(S) ON BYTE
SAV1     EQU   IDSAVE+00000000     8 BIT(S)
SAV2     EQU   IDSAVE+00000001     8 BIT(S)
NOTETTR  EQU   @DATD+00000360      4 BYTE(S) ON WORD
@SAV002  EQU   @DATD+00000368      72 BYTE(S) ON WORD
@SAV003  EQU   @DATD+00000440      72 BYTE(S) ON WORD
@SAV004  EQU   @DATD+00000512      72 BYTE(S) ON WORD
         DS    00000596C
@TEMPS   DS    0F
         DS    C
HMBLKIDR CSECT
RDLIST   READ  RDECB,SF,MF=L
RDLGTH   EQU   *-RDLIST
@DATD    DSECT
@DATEND  EQU   *
HMBLKIDR CSECT ,
@9F0     EQU   LK
@9EF     EQU   LK
@9EC     EQU   READRT
@9EB     EQU   @9EA
@9E5     EQU   READRT
@9E6     EQU   LKERT
@9E3     EQU   @9E2
@9D4     EQU   IDR2
@9D5     EQU   IDR2
@9CA     EQU   @9C9
@9B1     EQU   ERR1
@9AD     EQU   @9AA
@9A3     EQU   WRZAP
@995     EQU   @990
@98F     EQU   ERR1
@98B     EQU   @98A
@97D     EQU   READRT
@976     EQU   TR2
@975     EQU   @974
@971     EQU   @970
@973     EQU   TR1
@96B     EQU   @96A
@966     EQU   TR4
@967     EQU   @964
@965     EQU   @964
@95F     EQU   READRT
BYMSG    EQU   @EL01
@958     EQU   NONAME
@956     EQU   NONAME
@953     EQU   ERR1
@948     EQU   RSICH
@949     EQU   RSICH
@947     EQU   @946
@94A     EQU   @946
@943     EQU   IDS5
@93D     EQU   @93C
@93E     EQU   @93C
@933     EQU   @932
@9E4     EQU   @9E3
@96C     EQU   @96B
         END   HMBLKIDR,(C'PL/S',1400,76175)
