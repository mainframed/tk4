         TITLE 'HMBLKCTL -- CONTROL MODULE FOR HMBLIST -- VERSION 1.0'
         LCLA  &T,&SPN
&SPN     SETA  33                  CHANGE SUBPOOL NUMBER TO 33
         AGO   .@001
         LCLA  &T,&SPN                                            0002
.@001    ANOP                                                     0002
HMBLKCTL CSECT ,                                                  0002
         BC    15,14(0,@F)
         DC    C'©HMBLKCTL'                                       0002
         ST    @E,12(0,@D)                                        0002
         STM   @0,@C,20(@D)                                       0002
         BALR  @B,0                                               0002
@PSTART  DS    0H                                                 0002
         USING @PSTART+00000,@B                                   0002
         LA    @7,4095(0,@B)                                      0002
         USING @PSTART+04095,@7                                   0002
         LA    @2,4095(0,@7)                                      0002
         USING @PSTART+08190,@2                                   0002
         L     @0,@SIZ001                                         0002
         GETMAIN  R,LV=(0)                                        0002
         LR    @C,@1                                              0002
         USING @DATD+00000,@C                                     0002
         LM    @0,@1,20(@D)                                       0002
         XC    @TEMPS(@L),@TEMPS                                  0002
         ST    @D,@SAV001+4                                       0002
         LA    @F,@SAV001                                         0002
         ST    @F,8(0,@D)                                         0002
         LR    @D,@F                                              0002
         MVC   INDCB(INLEN),INPUT      SET UP REENTRANT SYSIN
         MVC   OUTDCB(OUTLEN),OUTPUT   SET UP REENTRANT SYSPRINT
         MVC   PODCB(PDSLEN),PDSDCB    SET UP REENTRANT SYSLIB
         MVC   READIR(RLEN),READ1      SET UP REENTRANT READ
         MVC   OPEN1(8),OP1            SET UP REENTRANT OPEN
         MVC   OPEN2(4),OP2            SET UP REENTRANT OPEN
         MVC   CLOSR1(8),CL1           SET UP REENTRANT CLOSE
         MVC   CLOSR2(4),CL2           SET UP REENTRANT CLOSE
         DS    0H
*   LOW=12288;                          /* SET LOW GM REQ     YM03244 *
         MVC   HIGHLOW(4),@D1                                     0063
*   HIGH=9437184;                       /* SET HIGH GM REQ    YM03244 *
         MVC   HIGHLOW+4(4),@D2                                   0064
*   NLOW=49152;                         /* SET LOW LPA REQ    YM03244 *
         MVC   HILOLPA(4),@D3                                     0065
*   NHIGH=9437184;                      /* SET HIGH LPA REQ   YM03244 *
         MVC   HILOLPA+4(4),@D2                                   0066
*   BCARD(1:121)=' ';                   /* BLANK OUT CARD BUFFER      *
         MVI   BCARD,C' '                                         0067
         MVC   BCARD+1(120),BCARD                                 0067
*   ECARD(1:121)=' ';                   /* BLANK OUT ERR.MARKER BUFFER*
         MVI   ECARD,C' '                                         0068
         MVC   ECARD+1(120),ECARD                                 0068
*   TBLANK='0';                         /* SKIP TWO LINES             *
         MVI   BLINE,C'0'                                         0069
*   /* INITIALIZE MODULE SUMMARY HEADING                              *
*   MODULE='*****  M O D U L E   S U M M A R Y  *****';
         MVC   MODULE(41),@C3                                     0070
*   NAME='MEMBER NAME';                 /* INIT ENTRY HEADING         *
         MVC   NAME(11),@C4                                       0071
         MVI   NAME+11,C' '                                       0071
*   MAIN='MAIN ENTRY POINT';            /* INITIALIZE MAIN HEADING    *
         MVC   MAIN(16),@C5                                       0072
         MVI   MAIN+16,C' '                                       0072
*   ALIASES='** ALIASES **';            /* INIT ALIAS HEADING         *
         MVC   ALIASES(13),@C6                                    0073
*   SECOND(1:16)='SECONDARY ENTRY ';    /* INITIALIZE SECONDARY
*                                         ENTRY POINT HEADING         *
         MVC   SECOND(16),@C7                                     0074
*   /* INITIALIZE SECONDARY ENTRY POINT HEADING                       *
*   SECOND(17:56)='POINT ADDRESSES ASSOCIATED WITH ALIASES:';
         MVC   SECOND+16(40),@C8                                  0075
*   MODSSI='MODULE SSI:';               /* MODULE SSI HEADING         *
         MVC   MODSSI(11),@C9                                     0076
*   /* INITIALIZE LINKAGE EDITOR ATTRIBUTE HEADING                    *
*   LINKAGE='LINKAGE EDITOR ATTRIBUTES OF MODULE:';
         MVC   LINKAGE(36),@C10                                   0077
*   /******************************************************************
*   /* THE FOLLOWING CODE INITIALIZES THE SIXTEEN BITS WHICH          *
*   /*DETERMINES THE LOAD MODULE ATTRIBUTE. EACH BIT HAS AN ON AND    *
*   /*OFF ATTRIBUTE                                                   *
*   /******************************************************************
*   ATON(1)='RENT';                     /* BIT 0 IF ON                *
         MVC   ATNAME(4),@C11                                     0078
         MVI   ATNAME+4,C' '                                      0078
         MVC   ATNAME+5(4),ATNAME+4                               0078
*   ATOFF(1)='NOT-RENT';                /* BIT 0 IF OFF               *
         MVC   ATNAME+72(8),@C12                                  0079
         MVI   ATNAME+80,C' '                                     0079
*   ATON(2)='REUS';                     /* BIT 1 IF ON                *
         MVC   ATNAME+9(4),@C13                                   0080
         MVI   ATNAME+13,C' '                                     0080
         MVC   ATNAME+14(4),ATNAME+13                             0080
*   ATOFF(2)='NOT-REUS';                /* BIT 1 IF OFF               *
         MVC   ATNAME+81(8),@C14                                  0081
         MVI   ATNAME+89,C' '                                     0081
*   ATON(3)='OVLY';                     /* BIT 2 IF ON                *
         MVC   ATNAME+18(4),@C15                                  0082
         MVI   ATNAME+22,C' '                                     0082
         MVC   ATNAME+23(4),ATNAME+22                             0082
*   ATOFF(3)='NOT-OVLY';                /* BIT 2 IF OFF               *
         MVC   ATNAME+90(8),@C16                                  0083
         MVI   ATNAME+98,C' '                                     0083
*   ATON(4)='TEST';                     /* BIT 3 IF ON                *
         MVC   ATNAME+27(4),@C17                                  0084
         MVI   ATNAME+31,C' '                                     0084
         MVC   ATNAME+32(4),ATNAME+31                             0084
*   ATOFF(4)='NOT-TEST';                /* BIT 3 IF OFF               *
         MVC   ATNAME+99(8),@C18                                  0085
         MVI   ATNAME+107,C' '                                    0085
*   ATON(5)='ONLY-LOAD';                /* BIT 4 IF ON                *
         MVC   ATNAME+36(9),@C19                                  0086
*   ATOFF(5)='NOT-OL';                  /* BIT 4 IF OFF               *
         MVC   ATNAME+108(6),@C20                                 0087
         MVI   ATNAME+114,C' '                                    0087
         MVC   ATNAME+115(2),ATNAME+114                           0087
*   ATON(6)='SCTR';                     /* BIT 5 IF ON                *
         MVC   ATNAME+45(4),@C21                                  0088
         MVI   ATNAME+49,C' '                                     0088
         MVC   ATNAME+50(4),ATNAME+49                             0088
*   ATOFF(6)='BLOCK';                   /* BIT 5 IF OFF               *
         MVC   ATNAME+117(5),@C22                                 0089
         MVI   ATNAME+122,C' '                                    0089
         MVC   ATNAME+123(3),ATNAME+122                           0089
*   ATON(7)='EXEC';                     /* BIT 6 IF ON                *
         MVC   ATNAME+54(4),@C23                                  0090
         MVI   ATNAME+58,C' '                                     0090
         MVC   ATNAME+59(4),ATNAME+58                             0090
*   ATOFF(7)='NOT-EXEC';                /* BIT 6 IF OFF               *
         MVC   ATNAME+126(8),@C24                                 0091
         MVI   ATNAME+134,C' '                                    0091
*   ATON(8)='1-TXT';                    /* BIT 7 IF ON                *
         MVC   ATNAME+63(5),@C25                                  0092
         MVI   ATNAME+68,C' '                                     0092
         MVC   ATNAME+69(3),ATNAME+68                             0092
*   ATOFF(8)='MULTI-RCD';               /* BIT 7 IF OFF               *
         MVC   ATNAME+135(9),@C26                                 0093
*   SECATON(1)='NOT-DC';                /* BIT 8 IF ON                *
         MVC   ATNAME+144(6),@C27                                 0094
         MVI   ATNAME+150,C' '                                    0094
         MVC   ATNAME+151(2),ATNAME+150                           0094
*   SECATOFF(1)='DC';                   /* BIT 8 IF OFF               *
         MVC   ATNAME+216(2),@C28                                 0095
         MVI   ATNAME+218,C' '                                    0095
         MVC   ATNAME+219(6),ATNAME+218                           0095
*   SECATON(2)='ZERO-ORG';              /* BIT 9 IF ON                *
         MVC   ATNAME+153(8),@C29                                 0096
         MVI   ATNAME+161,C' '                                    0096
*   SECATOFF(2)='NOT-ZERO';             /* BIT 9 IF OFF               *
         MVC   ATNAME+225(8),@C30                                 0097
         MVI   ATNAME+233,C' '                                    0097
*   SECATON(3)='EP-ZERO';               /* BIT 10 IF ON               *
         MVC   ATNAME+162(7),@C31                                 0098
         MVI   ATNAME+169,C' '                                    0098
         MVI   ATNAME+170,C' '                                    0098
*   SECATOFF(3)='EP > ZERO';            /* BIT 10 IF OFF              *
         MVC   ATNAME+234(9),@C32                                 0099
*   SECATON(4)='NO-RLD';                /* BIT 11 IF ON               *
         MVC   ATNAME+171(6),@C33                                 0100
         MVI   ATNAME+177,C' '                                    0100
         MVC   ATNAME+178(2),ATNAME+177                           0100
*   SECATOFF(4)='RLD';                  /* BIT 11 IF OFF              *
         MVC   ATNAME+243(3),@C34                                 0101
         MVI   ATNAME+246,C' '                                    0101
         MVC   ATNAME+247(5),ATNAME+246                           0101
*   SECATON(5)='NOT-EDIT';              /* BIT 12 IF ON               *
         MVC   ATNAME+180(8),@C35                                 0102
         MVI   ATNAME+188,C' '                                    0102
*   SECATOFF(5)='EDIT';                 /* BIT 12 IF OFF              *
         MVC   ATNAME+252(4),@C36                                 0103
         MVI   ATNAME+256,C' '                                    0103
         MVC   ATNAME+257(4),ATNAME+256                           0103
*   SECATON(6)='SYMS';                  /* BIT 13 IF ON               *
         MVC   ATNAME+189(4),@C37                                 0104
         MVI   ATNAME+193,C' '                                    0104
         MVC   ATNAME+194(4),ATNAME+193                           0104
*   SECATOFF(6)='NO-SYMS';              /* BIT 13 IF OFF              *
         MVC   ATNAME+261(7),@C38                                 0105
         MVI   ATNAME+268,C' '                                    0105
         MVI   ATNAME+269,C' '                                    0105
*   SECATON(7)='F-LEVEL';               /* BIT 14 IF ON               *
         MVC   ATNAME+198(7),@C39                                 0106
         MVI   ATNAME+205,C' '                                    0106
         MVI   ATNAME+206,C' '                                    0106
*   SECATOFF(7)='E-LEVEL';              /* BIT 14 IF OFF              *
         MVC   ATNAME+270(7),@C40                                 0107
         MVI   ATNAME+277,C' '                                    0107
         MVI   ATNAME+278,C' '                                    0107
*   SECATON(8)='REFR';                  /* BIT 15 IF ON               *
         MVC   ATNAME+207(4),@C41                                 0108
         MVI   ATNAME+211,C' '                                    0108
         MVC   ATNAME+212(4),ATNAME+211                           0108
*   SECATOFF(8)='NOT-REFR';             /* BIT 15 IF OFF              *
         MVC   ATNAME+279(8),@C42                                 0109
         MVI   ATNAME+287,C' '                                    0109
*   SYSLIB='SYSLIB  ';                  /* INITIALIZE SYSLIB          *
         MVC   SYSLIB(8),@C43                                     0110
*   ENDNAME='FFFFFFFFFFFFFFFF'X;        /* ALL F'S MEAN END OF DIRECT.*
         MVC   ENDNAME(8),@X44                                    0111
*   HEXCHAR='0123456789ABCDEF';         /* INITIALIZE CONVERSION
*                                         CHARACTERS                  *
         MVC   HEXCHAR(16),@C45                                   0112
*   ZONEOFF='0F0F0F0F0F0F0F0F'X;        /* INITIALIZE ZONEOFF FIELD   *
         MVC   ZONEOFF(8),@X46                                    0113
*   LENGTH=14;                          /* LEN OF EACH BLDLIST ENTRY  *
         LA    @F,14                                              0114
         STH   @F,BLDLIST+2                                       0114
*   DIRORG='00000100'X;                 /* FIRST BLOCK ADDRESS        *
         MVC   DIRORG(4),@X47                                     0115
*   /******************************************************************
*   /* OPEN SYSIN AND SYSPRINT DATA CONTROL BLOCKS                    *
*   /******************************************************************
*   GEN;
   LA R5,INDCB                         GET ADDR OF SYSIN DCB
   USING IHADCB,R5                     SET REG AS DSECT BASE
   OPEN (INDCB,,OUTDCB,(OUTPUT)),MF=(E,OPEN1)
   TM DCBOFLGS,X'10'                   TEST IF SYSIN OPEN SUCCESSFUL
   BZ AAB0                             UNSUCCESSFUL OPEN
   LA R5,OUTDCB                        GET ADDR OF SYSOUT DCB
   USING IHADCB,R5                     SET REG AS DSECT BASE
   TM DCBOFLGS,X'10'                   TEST IF SYSOUT OPEN SUCCESSFUL
   BZ ENDITB                           UNSUCCESSFUL OPEN
   BC 15,SETPLIST                      SUCCESSFUL OPEN           XM2962
         DS    0H
* AAB0: /* BRANCH HERE IF SYSIN NOT OPENED                            *
*   GEN(  XC    PARMLIST(69),PARMLIST); /* ZERO OUT PARMLIST          *
AAB0       XC    PARMLIST(69),PARMLIST
         DS    0H
*   DCBOUT=ADDR(OUTDCB);                /* STORE DCB ADDR IN PARM     *
         LA    @F,OUTDCB                                          0118
         ST    @F,PARMLIST+4                                      0118
*   ERRORS=ERRORS×'0020'X;              /* DDNAME COULD NOT BE        *
         OC    PARMLIST+32(2),@X48                                0119
*                                       /* OPENED ERROR               *
*   GO TO ENDITA;                       /* GO PRINT ERROR MESSAGE     *
         BC    15,ENDITA                                          0120
* SETPLIST:                             /*                     XM2962 *
*   NFLGS= '00000000'X;                 /* CLEAR RET CODE FLAGS XM2962*
SETPLIST MVC   PARMLIST+68(4),@X49                                0121
* AAB1:
*   CONTINUE='0'B;                      /* TURN OF CONTINUE INDICATOR *
AAB1     NI    CONTINUE,B'01111111'                               0122
*   GEN(  XC    PARMLIST(68),PARMLIST); /* ZERO OUT PARMLIST   XM2962 *
           XC    PARMLIST(68),PARMLIST
         DS    0H
*   DCBIN=ADDR(PODCB);                  /* STORE DCB ADDR IN PARMLIST *
         LA    @F,PODCB                                           0124
         ST    @F,PARMLIST                                        0124
*   DCBOUT=ADDR(OUTDCB);                /* STORE DCB ADDR IN PARMLIST *
         LA    @F,OUTDCB                                          0125
         ST    @F,PARMLIST+4                                      0125
*   TITLINE=ADDR(BLINE);                /* ADDRESS OF TITLE LINE      *
         LA    @F,BLINE                                           0126
         ST    @F,PARMLIST+8                                      0126
*   SWITCHES='0000'X;                   /* INITIALIZE SWITCHES TO OFF *
         MVC   SWITCHES(2),@X47                                   0127
*   MEMNAME=' ';                        /* BLANK OUT MEMBER NAME      *
         MVI   PARMLIST+36,C' '                                   0128
         MVC   PARMLIST+37(7),PARMLIST+36                         0128
*   BLINE(1:121)=' ';                   /* BLANK OUT TITLE BUFFER     *
         MVI   BLINE,C' '                                         0129
         MVC   BLINE+1(120),BLINE                                 0129
*   LISTCNT=1;                          /* SET BLDLIST PTR TO ONE     *
         LA    @F,1                                               0130
         STH   @F,LISTCNT                                         0130
*   ALCNT=1;                            /* SET ALIASLST PTR TO ONE    *
         STH   @F,ALCNT                                           0131
*   APFDATA='NONE';                     /* INITIALIZE APF TO NONE     *
         MVC   APFDATA(4),@C51                                    0132
         MVI   APFDATA+4,C' '                                     0132
         MVC   APFDATA+5(3),APFDATA+4                             0132
*   BLANK1(1:256)=' ';                  /* BLANK OUT ALIASLST         *
         MVI   BLNKALAS,C' '                                      0133
         MVC   BLNKALAS+1(255),BLNKALAS                           0133
*   BLANK2(1:32)=' ';                   /* BLANK OUT ALIASLST         *
         MVI   BLNKALAS+256,C' '                                  0134
         MVC   BLNKALAS+257(31),BLNKALAS+256                      0134
* AAC1:
*   GEN(  GET   INDCB,CARD);            /* READ CONTROL CARD          *
AAC1       GET   INDCB,CARD
         DS    0H
*   COL=2;                              /* SET SCAN TO COLUMN 2       *
         LA    @9,2                                               0136
*   /* CHECK TO SEE IF CONTINUATION WAS INDICATED                     *
*   IF CONTINUE^='1'B                   /* SHOULD THIS BE CONTINUATION*
*      THEN DO;                         /* NOT CONTINUATION           *
         TM    CONTINUE,B'10000000'                               0137
         BC    01,@9FF                                            0137
* AAG0:
*           CBLANK='1';                 /* SKIP TO NEW PAGE           *
AAG0     MVI   BCARD,C'1'                                         0139
*           GEN(PUT   OUTDCB,BCARD);    /* PRINT CONTROL CARD         *
         PUT   OUTDCB,BCARD
         DS    0H
*           OPTNMAP='0'B;               /* SET BIT MAP TO ZERO        *
         MVI   OPTNMAP,B'00000000'                                0141
         XC    OPTNMAP+1(3),OPTNMAP+1                             0141
*           ERRORS='0'B;                /* ZERO OUT ERROR MAP         *
         MVI   PARMLIST+32,B'00000000'                            0142
         XC    PARMLIST+33(3),PARMLIST+33                         0142
*           /* LOOK FOR FIRST COLUMN OPERATION                        *
* AAH1:
*           IF CARD(COL-1)=' '          /* IS COLUMN ONE BLANK        *
*              & CARD(COL)^=' '         /* IS COLUMN TWO NOT A BLANK  *
*              THEN DO;                 /* PROCESS CARD               *
AAH1     LH    @1,@D4                                             0143
         AR    @1,@9                                              0143
         LA    @A,BCARD(@1)                                       0143
         CLI   0(@A),C' '                                         0143
         BC    07,@9FE                                            0143
         LR    @3,@9                                              0143
         LA    @A,BCARD(@3)                                       0143
         CLI   0(@A),C' '                                         0143
         BC    08,@9FD                                            0143
*                   /* LOOK FOR A LISTLOAD OPERATION ON CARD          *
*                   IF CARD(COL:COL+8)='LISTLOAD '/* LISTLOAD CARD    *
*                      THEN DO;         /* INDICATE LISTLOAD          *
         CLC   0(9,@A),@C53                                       0145
         BC    07,@9FC                                            0145
*                           LISTLOAD='1'B;/* TURN ON BIT IN OPTNMAP   *
         OI    OPTNMAP,B'10000000'                                0147
*                           COL=COL+9;  /* POINT TO NEXT VALID COLUMN *
         AH    @9,@D5                                             0148
*                           GOTO ABB1;  /* GOTO OPERAND PROCESSOR     *
         BC    15,ABB1                                            0149
*                           END;
*                   /* LOOK FOR LISTOBJ OPERATION                     *
*                   IF CARD(COL:COL+7)='LISTOBJ '/* IS IT LISTOBJ     *
*                      THEN DO;         /* INDICATE LISTOBJ OPERATION *
@9FC     LR    @1,@9                                              0151
         LA    @A,BCARD(@1)                                       0151
         CLC   0(8,@A),@C54                                       0151
         BC    07,@9FB                                            0151
*                           LISTOBJ='1'B;/* TURN ON BIT IN OPTNMAP    *
         OI    OPTNMAP,B'01000000'                                0153
*                           COL=COL+8;  /* POINT TO NEXT VALID COLUMN *
         AH    @9,@D6                                             0154
*                           GOTO ABB1;  /* GOTO OPERAND PROCESSOR     *
         BC    15,ABB1                                            0155
*                           END;
*                   /* LOOK FOR LISTIDR OPERATION                     *
*                   IF CARD(COL:COL+7)='LISTIDR '/* LISTIDR OPERATION?*
*                      THEN DO;         /* INDICATE LISTIDR OPERATION *
@9FB     LR    @1,@9                                              0157
         LA    @A,BCARD(@1)                                       0157
         CLC   0(8,@A),@C55                                       0157
         BC    07,@9FA                                            0157
*                           LISTIDR='1'B;/* TURN ON BIT IN OPTNMAP    *
         OI    OPTNMAP,B'00100000'                                0159
*                           COL=COL+8;  /* POINT TO NEXT VALID COLUMN *
         AH    @9,@D6                                             0160
*                           NUMO='00'X; /* INITIALIZE LINE CNT XM3799 *
         MVI   PARMLIST+76,X'00'                                  0161
*                           GOTO ABB1;  /* GOTO OPERAND PROCESSOR     *
         BC    15,ABB1                                            0162
*                           END;
*                   /* CHECK TO SEE IF IT IS A LINK PACK AREA MAP IS
*                     WANTED                                          *
*                   IF CARD(COL:COL+7)='LISTLPA '/* LISTLPA OPERATION?*
*                      THEN DO;         /* PROCESS LISTLPA            *
@9FA     LR    @1,@9                                              0164
         LA    @A,BCARD(@1)                                       0164
         CLC   0(8,@A),@C56                                       0164
         BC    07,@9F9                                            0164
*                           LISTLPA='1'B;/* INDICATE LPA OPTION       *
         OI    OPTNMAP,B'00010000'                                0166
*                           GOTO GETMAIN;/* GET WORKING STORAGE FOR LPA
*                                          SORT                       *
         BC    15,GETMAIN                                         0167
* LPACALL:
*                           R1=ADDR(PARMLIST);/* SET UP PARMLIST      *
LPACALL  LA    @1,PARMLIST                                        0168
*                           CALL HMBLKLPA;/* CALL LINK PACK AREA ROUT.*
         L     @F,@V1              ADDRESS OF HMBLKLPA            0169
         BALR  @E,@F                                              0169
*                           GEN;        /* ISSUE FREEMAIN FOR SP22    *
          FREEMAIN V,A=AREAGET,SP=22,MF=(E,SPFREE)
         DS    0H
*                           GOTO ERRCHK;/* CHECK FOR ANY ERRORS       *
         BC    15,ERRCHK                                          0171
*                           END;
*                      ELSE DO;         /* INDICATE INVALID CARD      *
@9F9     EQU   *                                                  0173
* AAJ4:
*                           ERRORS=ERRORS×'00000800'X;/* TURN ON BIT  *
AAJ4     OC    PARMLIST+32(4),@X57                                0174
* ERRCHK:
*                           R1=ADDR(PARMLIST);/* SET UP PARAMETER LIST*
ERRCHK   LA    @1,PARMLIST                                        0175
*                           CALL HMBLKERR;/* PROCESS ERROR MESSAGES   *
         L     @F,@V2              ADDRESS OF HMBLKERR            0176
         BALR  @E,@F                                              0176
*                           GOTO AAC1;  /* READ ANOTHER CONTROL CARD  *
         BC    15,AAC1                                            0177
*                           END;
*                   END;
*              ELSE DO;                 /* LOOK FOR FIRST STARTING
*                                         COLUMN                      *
@9FD     EQU   *                                                  0180
*                   COL=COL+1;          /* BUMP COL BY ONE            *
@9FE     AH    @9,@D7                                             0181
*                   /*CHECK TO SEE IF IT CAN BE A VALID CARD          *
*                   IF COL>64           /* IS COL PAST WHER VALID
*                                         OPERATION CAN START?        *
*                      THEN GOTO AAJ4;  /* INDICATE INVALID CARD      *
         CH    @9,@D8                                             0182
         BC    02,AAJ4                                            0183
*                      ELSE GOTO AAH1;  /* REPROCESS CARD             *
         BC    15,AAH1                                            0184
*                   END;
*           END;
@9F7     EQU   *                                                  0186
*   /* CHECK TO SEE IF CONTINUATION BEGINS IN VALID COLUMN            *
*   IF CARD(1)^=' '                     /* IS THERE A PUNCH IN ONE?   *
*      × CARD(2:16)='               '   /* ARE COLUMNS 2 TO 16 BLANK? *
*      THEN DO;                         /* ONE OR BOTH CONDITIONS TRUE*
@9FF     CLI   BCARD+1,C' '                                       0187
         BC    07,@9F6                                            0187
         CLC   BCARD+2(15),@C58                                   0187
         BC    07,@9F5                                            0187
*           CBLANK=' ';                 /* SKIP ONE LINE              *
@9F6     MVI   BCARD,C' '                                         0189
*           GEN(PUT   OUTDCB,BCARD);    /* PRINT OUT A CARD           *
         PUT   OUTDCB,BCARD
         DS    0H
*           CONTINUE='0'B;              /* TURN OFF CONTINUATION BIT  *
         NI    CONTINUE,B'01111111'                               0191
*           ERRORS=ERRORS×'00001000'X;  /* TURN ON ERROR BIT          *
         OC    PARMLIST+32(4),@X59                                0192
*           R1=ADDR(PARMLIST);          /* SAVE PARMLIST ADDR TO PASS *
         LA    @1,PARMLIST                                        0193
*           CALL HMBLKERR;              /* PROCESS ERROR MESSAGE      *
         L     @F,@V2              ADDRESS OF HMBLKERR            0194
         BALR  @E,@F                                              0194
*           GOTO AAG0;                  /*PRINT OUT BAD CARD          *
         BC    15,AAG0                                            0195
*           END;
*   CBLANK=' ';                         /* SKIP ONE LINE              *
@9F5     MVI   BCARD,C' '                                         0197
*   GEN(  PUT   OUTDCB,BCARD);          /* PRINT CONTROL CARD         *
           PUT   OUTDCB,BCARD
         DS    0H
*   /* CHECK TO SEE IF MEMBERS WERE CONTINUED                         *
*   IF MCONTIN='1'B                     /* IS THERE MEMBER OPTION
*                                         CONTINUATION?               *
*      THEN DO;                         /* MEMBERS WERE CONTINUED     *
         TM    OPTNMAP+1,B'00000100'                              0199
         BC    12,@9F4                                            0199
*           MCONTIN='0'B;               /* TURN OFF CONTINUE BIT      *
         NI    OPTNMAP+1,B'11111011'                              0201
* AAG3:
*           /* FIND WHERE MEMBERS WERE CONTINUED                      *
*           IF CARD(COL)=' '            /* DOES THE MEMBER START HERE *
*              THEN DO;                 /* NO MEMBER FOUND            *
AAG3     LR    @1,@9                                              0202
         LA    @A,BCARD(@1)                                       0202
         CLI   0(@A),C' '                                         0202
         BC    07,@9F3                                            0202
*                   COL=COL+1;          /* BUMP COL POINTER BY ONE    *
         AH    @9,@D7                                             0204
*                   GOTO AAG3;          /* REPROCESS MEMBER CHECK     *
         BC    15,AAG3                                            0205
*                   END;
*              ELSE GOTO AEC1;          /* PROCESS MEMBERS            *
*           END;
@9F2     EQU   *                                                  0208
* ABB1:
*   /* SCAN FOR NON BLANK CHARACTER AND BEGIN TO PROCESS              *
*   IF CARD(COL)=' '                    /* IS COLUMN A BLANK?         *
*      THEN DO;                         /* YES, THEN CHECK FURTHER    *
@9F4     EQU   *                                                  0209
ABB1     LR    @1,@9                                              0209
         LA    @A,BCARD(@1)                                       0209
         CLI   0(@A),C' '                                         0209
         BC    07,@9F1                                            0209
*           COL=COL+1;                  /* BUMP POINTER TO NEXT COLUMN*
         AH    @9,@D7                                             0211
*           /* CHECK TO SEE IF CARD COLUMN IS PAST COLUMN 71          *
*           IF COL > 71                 /* IS CARD COLUMN GREATER THAN
*                                         COLUMN 71?                  *
*              THEN IF LISTLOAD='1'B ×  /* IS IT LISTLOAD OPERATION?  *
         CH    @9,@D9                                             0212
         BC    12,@9F0                                            0212
*                      LISTIDR='1'B ×   /* IS IT LISTIDR OPERATION?   *
*                      LISTOBJ='1'B     /* IS IT LISTOBJ OPERATION?   *
*                      THEN GOTO PROCESS;/* PROCESS CONTROL CARD      *
         TM    OPTNMAP,B'10000000'                                0213
         BC    01,@9EF                                            0213
         TM    OPTNMAP,B'00100000'                                0213
         BC    01,@9EE                                            0213
         TM    OPTNMAP,B'01000000'                                0213
         BC    03,PROCESS                                         0214
*                      ELSE GOTO ABA2;  /* SET UP ERROR MESSAGE       *
         BC    15,ABA2                                            0215
*              ELSE GOTO ABB1;          /* CHECK FOR NON-BLANK        *
*           END;
@9EC     EQU   *                                                  0217
* ABC1:
*   /* CHECK TO SEE IF OPERAND IS MODLIB                              *
*   IF CARD(COL:COL+5)='MODLIB'         /* IS OPERAND MODLIB          *
*     THEN                              /* YES                        *
@9F1     EQU   *                                                  0218
ABC1     LR    @1,@9                                              0218
         LA    @A,BCARD(@1)                                       0218
         CLC   0(6,@A),@C60                                       0218
         BC    07,@9EB                                            0218
*       DO;
*         COL=COL+6;                    /* BUMP POINTER TO NEXT COL   *
         AH    @9,@D10                                            0220
*         MDLB='1'B;                    /* INDICATE MODLIB IN PARMLIST*
         OI    PARMLIST+20,B'00001000'                            0221
*         GO TO ACG4;                   /* CHECK FOR MORE OPT  XM3799 *
         BC    15,ACG4                                            0222
*       END;
*     ELSE;                             /* NULL ELSE                  *
@9EB     EQU   *                                                  0224
*   /* CHECK TO SEE IF OPERAND IS TITLE                               *
*   IF CARD(COL:COL+5)='TITLE='         /* IS OPERAND TITLE OPERAND?  *
*      THEN DO;                         /* PROCESS TITLE OPERAND      *
@9EA     LR    @1,@9                                              0225
         LA    @A,BCARD(@1)                                       0225
         CLC   0(6,@A),@C61                                       0225
         BC    07,@9E9                                            0225
*           COL=COL+6;                  /* BUMP POINTER TO START OF
*                                         VALID TITLE OPERAND         *
         AH    @9,@D10                                            0227
*           TITLE='1'B;                 /* INDICATE TITLE IN OPTNMAP  *
         OI    OPTNMAP,B'00001000'                                0228
*           TTLINE=' ';                 /* BLANK OUT TITLE BUFFER     *
         MVI   BLINE+1,C' '                                       0229
         MVC   BLINE+2(119),BLINE+1                               0229
*           LPAREN='0'B;                /* TURN OFF LEFT PARENTHESIS
*                                         INDICATOR                   *
         NI    LPAREN,B'01111111'                                 0230
*           /* CHECK FOR LEFT PARENTHESIS                             *
*           IF CARD(COL)='('            /* IS COLUMN A LEFT PAREND?   *
*              THEN DO;                 /* PROCESS LEFT PAREND        *
         LR    @1,@9                                              0231
         LA    @A,BCARD(@1)                                       0231
         CLI   0(@A),C'('                                         0231
         BC    07,@9E8                                            0231
*                   COL=COL+1;          /* POINT TO NEXT COLUMN       *
         AH    @9,@D7                                             0233
*                   LPAREN='1'B;        /* INDICATE LEFT PAREND IN
*                                         OPTNMAP                     *
         OI    LPAREN,B'10000000'                                 0234
*                   END;
*           /* CHECK FOR BEGGINNING QUOTE                             *
*           IF CARD(COL)=''''           /* IS IT FIRST QUOTE IN TITLE*/
*              THEN DO;                 /* PROCESS FIRST QUOTE        *
@9E8     LR    @1,@9                                              0236
         LA    @A,BCARD(@1)                                       0236
         CLI   0(@A),C''''                                        0236
         BC    07,@9E7                                            0236
*                   TCOL1=COL+1;        /* SAVE BEGINNING TITLE ADDR  *
         LA    @F,1                                               0238
         AR    @F,@9                                              0238
         STH   @F,TCOL1                                           0238
*                   GOTO ACB1;          /* PROCESS TITLE FURTHER      *
         BC    15,ACB1                                            0239
*                   END;
*              ELSE GOTO ABA2;          /* SET UP ERROR MESSAGE       *
*           END;
@9E6     EQU   *                                                  0242
*   /* CHECK FOR MEMBER OPERAND                                       *
*   IF CARD(COL:COL+6)='MEMBER='        /* IS IT MEMBER OPERAND?      *
*      THEN DO;                         /* PROCESS MEMBER OPERAND     *
@9E9     LR    @1,@9                                              0243
         LA    @A,BCARD(@1)                                       0243
         CLC   0(7,@A),@C64                                       0243
         BC    07,@9E5                                            0243
*           COL=COL+7;                  /* BUMP POINTER TO BEGINNING
*                                         OF MEMBER OPERAND           *
         AH    @9,@D11                                            0245
*           MEMBER='1'B;                /* INDICATE MEMBER IN OPTNMAP *
         OI    OPTNMAP,B'00000010'                                0246
*           PO='1'B;                    /* SHOW OBJECT PDS IF LISTOBJ *
         OI    OPTNMAP+1,B'00100000'                              0247
*           LASTMEM='0'B;               /* TURN OFF LAST MEM BIT      *
         NI    OPTNMAP+1,B'11101111'                              0248
*           LPAREN='0'B;                /* ZERO LEFT PAREND BIT       *
         NI    LPAREN,B'01111111'                                 0249
*           /* CHECK IF COLUMN CONTAINS LEFT PARENDS                  *
*           IF CARD(COL)='('            /* IS IT LEFT PAREND          *
*              THEN DO;                 /* PROCESS LEFT PAREND        *
         LR    @1,@9                                              0250
         LA    @A,BCARD(@1)                                       0250
         CLI   0(@A),C'('                                         0250
         BC    07,@9E4                                            0250
*                   COL=COL+1;          /* BUMP POINTER TO NEXT COLUMN*
         AH    @9,@D7                                             0252
*                   LPAREN='1'B;        /* TURN ON LEFT PAREND BIT    *
         OI    LPAREN,B'10000000'                                 0253
         BC    15,@9E3                                            0255
*                   END;
*              ELSE LASTMEM='1'B;       /* INDICATE LAST MEMBER       *
@9E4     OI    OPTNMAP+1,B'00010000'                              0255
*           GOTO AEB1;                  /* CHECK IF LIMIT REACHED     *
         BC    15,AEB1                                            0256
*           END;
*   /* CHECK FOR RELOCATION FACTOR                                    *
*   IF CARD(COL:COL+5)='RELOC='         /* IS IT RELOC OPERAND?       *
*      THEN DO;                         /* PROCESS RELOC OPERAND      *
@9E5     LR    @1,@9                                              0258
         LA    @A,BCARD(@1)                                       0258
         CLC   0(6,@A),@C65                                       0258
         BC    07,@9E2                                            0258
*           RELOC='1'B;                 /* TURN ON BIT IN OPTNMAP     *
         OI    OPTNMAP+1,B'00000010'                              0260
*           COL=COL+6;                  /* POINT TO START OF FACTOR   *
         AH    @9,@D10                                            0261
*           TCOL1=COL;                  /* SAVE LEFT BOUNDARY         *
         STH   @9,TCOL1                                           0262
* INCREM:
*           COL=COL+1;                  /* POINT TO NEXT POSITION     *
INCREM   AH    @9,@D7                                             0263
*           /* IS COL PAST 71?                                        *
*           IF COL > 71                 /* PAST COL 71?               *
*              THEN GOTO ABA2;          /* INDICATE ERROR             *
         CH    @9,@D9                                             0264
         BC    02,ABA2                                            0265
*           /* CHECK FOR END OF RELOC OPERAND                         *
*           IF CARD(COL)=','            /* IS THERE ANOTHER OPERAND?  *
*              × CARD(COL)=' '          /* END OF OPERAND             *
*              /* CHECK IF RELOC FACTOR IS A VALID LENGTH             *
*              THEN IF COL-TCOL1 < 7    /* IS IT SMALL ENOUGH         *
         LR    @1,@9                                              0266
         LA    @A,BCARD(@1)                                       0266
         CLI   0(@A),C','                                         0266
         BC    08,@9E1                                            0266
         CLI   0(@A),C' '                                         0266
         BC    07,@9E0                                            0266
*                      & COL-TCOL1 > 0  /* IS IT AT LEAST 1 CHARACTER *
*                      THEN DO;         /* PROCESS VALID RELOC OPERAND*
@9E1     LR    @F,@9                                              0267
         SH    @F,TCOL1                                           0267
         LA    @1,7                                               0267
         CR    @F,@1                                              0267
         BC    10,@9DF                                            0267
         LR    @F,@9                                              0267
         SH    @F,TCOL1                                           0267
         CH    @F,@D12                                            0267
         BC    12,@9DE                                            0267
*                           RELFAC=CARD(TCOL1:COL-1);/* SAVE FACTOR   *
         LH    @1,@D4                                             0269
         AR    @1,@9                                              0269
         LH    @3,TCOL1                                           0269
         SR    @1,@3                                              0269
         LA    @E,BCARD(@3)                                       0269
         LA    @A,RELFAC                                          0269
         MVI   0(@A),C' '                                         0269
         MVC   1(005,@A),0(@A)                                    0269
         EX    @1,@MVC                                            0269
*                           LOCLEN=COL-TCOL1;/* SAVE LENGTH OF
*                                         RELOCATION FACTOR           *
         LR    @F,@9                                              0270
         SH    @F,TCOL1                                           0270
         ST    @F,LOCLEN                                          0270
*                           GOTO VALID; /* CONTINUE PROCESSING CARD   *
*                           END;
*                      ELSE;            /* NULL ELSE                  *
*              ELSE GOTO INCREM;        /* BUMP COL POINTER           *
*           /* CHECK IF HEX CHARACTERS A TO F WERE CODED AND CONVERT  *
* VALID:
*           DO A=1 TO LOCLEN;
@9DC     EQU   *                                                  0275
VALID    LA    @F,1                                               0275
         BC    15,@DO9DA                                          0275
*              /* CHECK IF IT IS A VALID HEX CHARACTER                *
*              DO B=1 TO 16;
@DO9DB   LA    @F,1                                               0276
         ST    @F,B                                               0276
*                 /* VERIFY IF A VALID HEX CHARACTER ADDRESS IS GIVEN *
*                 IF RELFAC(A)=HEXCHAR(B)/* IS IT A VALID HEX CHAR    *
*                    THEN GOTO CONVERT; /* CONVERT CHAR TO HEX        *
@DO9D7   L     @1,B                                               0277
         LA    @E,HEXCHAR-1(@1)                                   0277
         L     @3,A                                               0277
         LA    @A,RELFAC-1(@3)                                    0277
         CLC   0(1,@A),0(@E)                                      0277
         BC    08,CONVERT                                         0278
*                 END;
*              GOTO ABA2;               /* INVALID OPERAND            *
         L     @F,B                                               0279
         AH    @F,@D7                                             0279
@DO9D6   ST    @F,B                                               0279
         CH    @F,@D13                                            0279
         BC    12,@DO9D7                                          0279
         BC    15,ABA2                                            0280
*              /* CHECK FOR VALID A TO F HEX CHARACTER                *
* CONVERT:
*              IF RELFAC(A) < 'C7'X     /* IS IT BETWEEN F            *
*                 & RELFAC(A) > 'C0'X   /* AND A ONLY                 *
*                 THEN DO;              /* PROCESS FOR CONVERSION     *
CONVERT  L     @1,A                                               0281
         LA    @A,RELFAC-1(@1)                                    0281
         CLI   0(@A),X'C7'                                        0281
         BC    10,@9D3                                            0281
         CLI   0(@A),X'C0'                                        0281
         BC    12,@9D2                                            0281
*                      RELOCX=0;        /* ZERO OUT PARM FIELD        *
         SR    @F,@F                                              0283
         ST    @F,PARMLIST+60                                     0283
*                      RELOCX=RELFAC(A);/* STORE CHAR TO CONVERT      *
         IC    @F,RELFAC-1(@1)                                    0284
         ST    @F,PARMLIST+60                                     0284
*                      RELOCX=RELOCX+'39'X;/* ADD CONVERSION FACTOR   *
         LA    @F,X'39'                                           0285
         A     @F,PARMLIST+60                                     0285
         ST    @F,PARMLIST+60                                     0285
*                      RELFAC(A)=RELCHAR(4);/* SAVE CONVERTED CHAR    *
         MVC   0(1,@A),RELCHAR+3                                  0286
*                      END;
*              END;
@9D2     EQU   *                                                  0288
*           WORKAREA=WORKAREA && WORKAREA;/* ZERO OUT WORKAREA        *
@9D3     L     @F,A                                               0288
         AH    @F,@D7                                             0288
@DO9DA   ST    @F,A                                               0288
         C     @F,LOCLEN                                          0288
         BC    12,@DO9DB                                          0288
         XC    WORKAREA(8),WORKAREA                               0289
*           WORKAREA(9-LOCLEN:8)=RELFAC(1:LOCLEN);/* SET UP FOR PACK  *
         LA    @E,RELFAC                                          0290
         LA    @1,8                                               0290
         L     @3,LOCLEN                                          0290
         LCR   @3,@3                                              0290
         AH    @3,@D5                                             0290
         SR    @1,@3                                              0290
         LA    @A,WORKAREA-1(@3)                                  0290
         EX    @1,@MVC                                            0290
*           GENERATE;
         PACK  A(4),WORKAREA(8)        PACK RELOC FACTOR
         L     R4,A                    PUT PACKED FACTOR IN REG
         SRL   R4,4                    DROP SIGN
         ST    R4,RELOCX               STORE IN PARMLIST
         DS    0H
*           GOTO ACG4;                  /* CHECK IF MORE OPTIONS      *
         BC    15,ACG4                                            0292
*           END;
*   /* CHECK TO SEE IF OPERAND IS DDN                                 *
*   IF CARD(COL:COL+3)='DDN='           /* IS IT DDN OPERAND?         *
*      THEN DO;                         /* PROCESS DDN OPERAND        *
@9E2     LR    @1,@9                                              0294
         LA    @A,BCARD(@1)                                       0294
         CLC   0(4,@A),@C70                                       0294
         BC    07,@9D1                                            0294
*           COL=COL+4;                  /* BUMP POINTER TO BEGINNING
*                                         OF OPERAND                  *
         AH    @9,@D14                                            0296
*           DDN='1'B;                   /* INDICATE DDN IN OPTNMAP    *
         OI    OPTNMAP,B'00000100'                                0297
*           TCOL1=COL;                  /* SET UP LEFT BOUNDARY OF DDN*
         STH   @9,TCOL1                                           0298
* ABF4:
*           COL=COL+1;                  /* BUMP POINTER TO FIND END
*                                         OF DDN                      *
ABF4     AH    @9,@D7                                             0299
*           /* CHECK IF COLUMN IS PAST COLUMN 71                      *
*           IF COL > 71                 /* IS IT PAST COLUMN 71?      *
*              THEN GOTO ABA2;          /* SET UP ERROR MESSAGE       *
         CH    @9,@D9                                             0300
         BC    02,ABA2                                            0301
*           /* CHECK TO SEE IF DDNAME GIVEN IS VALID                  *
*           IF CARD(COL)=','            /* IS THERE ANOTHER OPERAND OR*
*              ×  CARD(COL)=' '         /* IS IT END OF OPERAND       *
*              /* CHECK FOR VALID SIZE OF DDNAME                      *
*              THEN IF COL-TCOL1<9      /* IS DDNAME LESS THAN 9 CHARS*
         LR    @1,@9                                              0302
         LA    @A,BCARD(@1)                                       0302
         CLI   0(@A),C','                                         0302
         BC    08,@9D0                                            0302
         CLI   0(@A),C' '                                         0302
         BC    07,@9CF                                            0302
*                      &  COL-TCOL1>0   /* IS DDNAME > ZERO?          *
*                      THEN DO;         /* PROCESS DDNAME             *
@9D0     LR    @F,@9                                              0303
         SH    @F,TCOL1                                           0303
         LA    @1,9                                               0303
         CR    @F,@1                                              0303
         BC    10,@9CE                                            0303
         LR    @F,@9                                              0303
         SH    @F,TCOL1                                           0303
         CH    @F,@D12                                            0303
         BC    12,@9CD                                            0303
*                           DDNAME=CARD(TCOL1:COL-1);/* SAVE DDNAME   *
         LH    @1,@D4                                             0305
         AR    @1,@9                                              0305
         LH    @3,TCOL1                                           0305
         SR    @1,@3                                              0305
         LA    @E,BCARD(@3)                                       0305
         LA    @A,PARMLIST+44                                     0305
         MVI   0(@A),C' '                                         0305
         MVC   1(007,@A),0(@A)                                    0305
         EX    @1,@MVC                                            0305
*                           GOTO ACG4;  /* CONTINUE TO PROCESS CARD   *
         BC    15,ACG4                                            0306
*                           END;
*                      ELSE DO;         /* CHECK IF VALID CARD        *
@9CD     EQU   *                                                  0308
*                           /* CHECK IF COLUMN POINTER > 1            *
*                           IF COL-TCOL1<1/* IS COL > 1               *
*                              THEN GOTO ABA2;/*SET UP ERROR MESSAGE  *
@9CE     LR    @F,@9                                              0309
         SH    @F,TCOL1                                           0309
         CH    @F,@D7                                             0309
         BC    04,ABA2                                            0310
*                           COL=COL-9;  /* RESET COLUMN POINTER       *
         SH    @9,@D5                                             0311
*                           GOTO ABA2;  /* SET UP ERROR MESSAGE       *
         BC    15,ABA2                                            0312
*                           END;
*              ELSE GOTO ABF4;          /* RECHECK CARD               *
*           END;
@9CB     EQU   *                                                  0315
*   /* CHECK OPERAND TO SEE IF IT IS THE OUTPUT OPERAND               *
*   IF CARD(COL:COL+6)='OUTPUT='        /* OPERAND SPECIFY OUTPUT?    *
*      THEN DO;                         /* PROCESS OUTPUT OPERAND     *
@9D1     LR    @1,@9                                              0316
         LA    @A,BCARD(@1)                                       0316
         CLC   0(7,@A),@C71                                       0316
         BC    07,@9CA                                            0316
*           /* CHECK FOR INVALID OPERAND SPECIFIED FOR OPERATION      *
*           IF LISTOBJ='1'B             /* IS IT LISTOBJ OPERATION    *
*              THEN GOTO ABA8;          /* SET UP ERROR MESSAGE       *
         TM    OPTNMAP,B'01000000'                                0318
         BC    01,ABA8                                            0319
*           COL=COL+7;                  /* BUMP COLUMN POINTER        *
         AH    @9,@D11                                            0320
*           /* CHECK FOR A LISTIDR OPERATION                          *
*           IF LISTIDR='1'B             /* IS IT LISTIDR OPERATION    *
*              THEN GOTO ABA7;          /* PROCESS OUTPUT OPTIONS     *
         TM    OPTNMAP,B'00100000'                                0321
         BC    01,ABA7                                            0322
*           /**********************************************************
*           /* THE OUTPUT OPTIONS FOR A LISTLOAD OPERATION CAN BE     *
*           /* MODLIST, XREF OR BOTH WHERE BOTH IS THE DEFAULT IF     *
*           /* NO OUTPUT OPERAND IS SPECIFIED. XREF AND MODLIST ARE   *
*           /* INDICATED AS ON IF THE XREF AND MODLIST BITS IN        *
*           /* OPTNMAP ARE SET TO ZERO. IF EITHER ONE IS SET TO ONE   *
*           /* IT SIGNIFIES BYPASS PROCESSING THIS OPTION.            *
*           /**********************************************************
*           /* CHECK IF OUTPUT OPTION IS MODLIST FOR LISTLOAD         *
*           IF CARD(COL:COL+6)='MODLIST'/* IS IT MODLIST OPTION?      *
*              THEN DO;                 /* PROCESS MODLIST OPTION     *
         LR    @1,@9                                              0323
         LA    @A,BCARD(@1)                                       0323
         CLC   0(7,@A),@C72                                       0323
         BC    07,@9C9                                            0323
*                   COL=COL+7;          /* BUMP COLUMN POINTER        *
         AH    @9,@D11                                            0325
*                   XREF='1'B;          /* TURN OFF XREF OUTPUT       *
         OI    OPTNMAP+1,B'10000000'                              0326
*                   GOTO ACG4;          /* IS NEXT COLUMN A BLANK?    *
         BC    15,ACG4                                            0327
*                   END;
*           /* CHECK IF OUTPUT OPTION IS XREF FOR LISTLOAD OPERATION  *
*           IF CARD(COL:COL+3)='XREF'   /* IS IT XREF OPTION?         *
*              THEN DO;                 /* XREF OPTION                *
@9C9     LR    @1,@9                                              0329
         LA    @A,BCARD(@1)                                       0329
         CLC   0(4,@A),@C73                                       0329
         BC    07,@9C8                                            0329
*                   COL=COL+4;          /* BUMP COLUMN POINTER        *
         AH    @9,@D14                                            0331
*                   MODLIST='1'B;       /* TURN OFF MODLIST OPTION    *
         OI    OPTNMAP,B'00000001'                                0332
*                   GOTO ACG4;          /* KEEP PROCESSING CARD       *
         BC    15,ACG4                                            0333
*                   END;
*           /* CHECK IF OUTPUT OPTION IS BOTH XREF AND MODLIST        *
*           IF CARD(COL:COL+3)='BOTH'   /* IS IT BOTH OPTION          *
*              THEN DO;                 /* PROCESS BOTH OPTION        *
@9C8     LR    @1,@9                                              0335
         LA    @A,BCARD(@1)                                       0335
         CLC   0(4,@A),@C74                                       0335
         BC    07,@9C7                                            0335
*                   COL=COL+4;          /* BUMP COLUMN POINTER        *
         AH    @9,@D14                                            0337
*                   GOTO ACG4;          /* KEEP PROCESSING CARD       *
         BC    15,ACG4                                            0338
*                   END;
* ABA6:
*           ECARD(COL+1)='$';           /* MARK ERROR WITH DOLLAR SIGN*
@9C7     EQU   *                                                  0340
ABA6     LA    @1,1                                               0340
         AR    @1,@9                                              0340
         LA    @A,ECARD-1(@1)                                     0340
         MVI   0(@A),C'$'                                         0340
*           GEN  (PUT   OUTDCB,ECARD);  /* PRINT ERROR MARKER         *
         PUT   OUTDCB,ECARD
         DS    0H
*           ECARD(COL+1)=' ';           /* BLANK OUT ERROR MARKER     *
         LA    @1,1                                               0342
         AR    @1,@9                                              0342
         LA    @A,ECARD-1(@1)                                     0342
         MVI   0(@A),C' '                                         0342
*           ERRORS=ERRORS×'00000040'X;  /* WRITE: IMPROPER OPTION     *
         OC    PARMLIST+32(4),@X76                                0343
*           GOTO ABA9;                  /* BUMP COLUMN POINTER        *
         BC    15,ABA9                                            0344
* ABA7:
*           /* CHECK IF OUTPUT OPTION IS IDENT FOR LISTIDR            *
*           IF CARD(COL:COL+4)='IDENT'  /* IDENT OPTION?              *
*              THEN DO;                 /* PROCESS IDENT OPTION       *
ABA7     LR    @1,@9                                              0345
         LA    @A,BCARD(@1)                                       0345
         CLC   0(5,@A),@C77                                       0345
         BC    07,@9C6                                            0345
*                   COL=COL+5;          /* BUMP COLUMN POINTER        *
         AH    @9,@D15                                            0347
*                   IDENT='1'B;         /* TURN ON IDENT OPTION       *
         OI    OPTNMAP+1,B'01000000'                              0348
*                   GOTO ACG4;          /* KEEP PROCESSING CARD       *
         BC    15,ACG4                                            0349
*                   END;
*           /* CHECK IF OUTPUT OPTION IS ALL FOR LISTIDR              *
*           IF CARD(COL:COL+2)='ALL'    /* ALL OPTION?                *
*              THEN DO;                 /* PROCESS ALL OPTION         *
@9C6     LR    @1,@9                                              0351
         LA    @A,BCARD(@1)                                       0351
         CLC   0(3,@A),@C78                                       0351
         BC    07,@9C5                                            0351
*                   COL=COL+3;          /* BUMP COLUMN POINTER        *
         AH    @9,@D16                                            0353
*                   GOTO ACG4;          /* KEEP PROCESSING CARD       *
         BC    15,ACG4                                            0354
*                   END;
*           GOTO ABA6;                  /* INDICATE ERROR IN OPTION   *
*           END;
* ABA2:
*   ECARD(COL+1)='$';                   /* MARK ERROR                 *
@9CA     EQU   *                                                  0358
ABA2     LA    @1,1                                               0358
         AR    @1,@9                                              0358
         LA    @A,ECARD-1(@1)                                     0358
         MVI   0(@A),C'$'                                         0358
*   GEN (PUT   OUTDCB,ECARD);           /* PRINT ERROR MARKER         *
         PUT   OUTDCB,ECARD
         DS    0H
*   ECARD(COL+1)=' ';                   /* BLANK OUT ERROR MARKER     *
         LA    @1,1                                               0360
         AR    @1,@9                                              0360
         LA    @A,ECARD-1(@1)                                     0360
         MVI   0(@A),C' '                                         0360
*   ERRORS=ERRORS×'00000400'X;          /* SET UP INVALID OPTION MSG  *
         OC    PARMLIST+32(4),@X79                                0361
*   R1=ADDR(PARMLIST);                  /* SET UP PARAMETER LIST      *
         LA    @1,PARMLIST                                        0362
*   CALL HMBLKERR;                      /* PROCESS ERROR MESSAGE      *
         L     @F,@V2              ADDRESS OF HMBLKERR            0363
         BALR  @E,@F                                              0363
*   GOTO AAB1;                          /* PROCESS ANOTHER CARD       *
         BC    15,AAB1                                            0364
* ABA8:
*   ECARD(COL+1)='$';                   /* MARK ERROR COLUMN          *
ABA8     LA    @1,1                                               0365
         AR    @1,@9                                              0365
         LA    @A,ECARD-1(@1)                                     0365
         MVI   0(@A),C'$'                                         0365
*   GEN (PUT   OUTDCB,ECARD);           /* PRINT ERROR MARKER         *
         PUT   OUTDCB,ECARD
         DS    0H
*   ECARD(COL+1)=' ';                   /* BLANK OUT ERROR MARKER     *
         LA    @1,1                                               0367
         AR    @1,@9                                              0367
         LA    @A,ECARD-1(@1)                                     0367
         MVI   0(@A),C' '                                         0367
*   ERRORS=ERRORS×'00000080'X;          /* WRITE: IMPROPER OPERAND    *
         OC    PARMLIST+32(4),@X80                                0368
* ABA9:
*   COL=COL+1;                          /* BUMP COLUMN POINTER        *
ABA9     AH    @9,@D7                                             0369
*   /* CHECK IF COLUMN POINTER IS PAST COLUMN 71                      *
*   IF COL>71                           /* IS COLUMN PAST 71?         *
*      THEN GOTO ABA2;                  /* SET UP ERROR MESSAGE       *
         CH    @9,@D9                                             0370
         BC    02,ABA2                                            0371
*   /* CHECK IF COLUMN POINTER IS POINTING TO A COMMA OR A BLANK      *
*   IF CARD(COL)=','                    /* IS COL POINTING TO A COMMA?*
*      × CARD(COL)=' '                  /* OR A BLANK?                *
*      THEN GOTO ACG4;                  /* PROCESS CARD               *
         LR    @1,@9                                              0372
         LA    @A,BCARD(@1)                                       0372
         CLI   0(@A),C','                                         0372
         BC    08,@9C4                                            0372
         CLI   0(@A),C' '                                         0372
         BC    08,ACG4                                            0373
*      ELSE GOTO ABA9;                  /* BUMP COLUMN POINTER        *
         BC    15,ABA9                                            0374
* ACB1:
*   COL=COL+1;                          /* BUMP COLUMN POINTER        *
ACB1     AH    @9,@D7                                             0375
*   IF COL>70                           /* COLUMN PAST 71?            *
*      THEN DO;                         /* YES THEN DO                *
         CH    @9,@D17                                            0376
         BC    12,@9C2                                            0376
* ACC2:
*           ERRORS=ERRORS×'00000200'X;  /* SET UP ERROR MESSAGE       *
ACC2     OC    PARMLIST+32(4),@X81                                0378
*           R1=ADDR(PARMLIST);          /* SAVE PARMLIST ADDR TO PASS *
         LA    @1,PARMLIST                                        0379
*           CALL HMBLKERR;              /* PROCESS ANY ERROR MSGS     *
         L     @F,@V2              ADDRESS OF HMBLKERR            0380
         BALR  @E,@F                                              0380
*           GOTO AAB1;                  /* PROCESS ANOTHER CARD       *
         BC    15,AAB1                                            0381
*           END;
*   /* CHECK FOR A DOUBLE QUOTE IN TITLE TO INDICATE A CONTRACTION    *
*   IF CARD(COL:COL+1)=''''''           /* IS IT DOUBLE QUOTE?        *
*      THEN DO;                         /* PROCESS DOUBLE QUOTE       *
@9C2     LR    @1,@9                                              0383
         LA    @A,BCARD(@1)                                       0383
         CLC   0(2,@A),@C82                                       0383
         BC    07,@9C1                                            0383
*           CARD(COL:71)=CARD(COL+1:71);/* SHIFT CARD LEFT ONE COLUMN *
         LA    @3,1                                               0385
         AR    @3,@9                                              0385
         LA    @E,BCARD(@3)                                       0385
         LA    @4,71                                              0385
         SR    @4,@1                                              0385
         EX    @4,@MVC                                            0385
*           COL=COL+2;                  /* BUMP COLUMN POINTER        *
         AH    @9,@D18                                            0386
*           END;
*   /* CHECK FOR A SINGLE QUOTE TO INDICATE END OF TITLE              *
*   IF CARD(COL)=''''                   /* IS IT SINGLE QUOTE?        *
*      THEN TCOL2=COL-1;                /* SAVE TITLE RIGHT BOUNDARY  *
@9C1     LR    @1,@9                                              0388
         LA    @A,BCARD(@1)                                       0388
         CLI   0(@A),C''''                                        0388
         BC    07,@9C0                                            0388
         LR    @F,@9                                              0389
         BCTR  @F,0                                               0389
         STH   @F,TCOL2                                           0389
*      ELSE GOTO ACB1;                  /* POINT TO NEXT COLUMN       *
*   /* CHECK FOR LEFT PAREND INDICATING USER OUTPUT POSITION GIVEN    *
*   IF LPAREN^='1'B                     /* WAS LEFT PAREND FOUND?     *
*      THEN DO;                         /* PROCESS NO LEFT PAREND     *
@9BF     TM    LPAREN,B'10000000'                                 0391
         BC    01,@9BE                                            0391
* ACG2:
*           TITLECOL=1;                 /* STARTING TITLE OUTPUT COL  *
ACG2     LA    @F,1                                               0393
         STH   @F,TITLECOL                                        0393
* ACH2:
*           IF TCOL2-TCOL1>39           /* IS TITLE BIGGER THAN 40    *
*              THEN TCOL2=TCOL1+39;     /* TRUNCATE TITLE TO 40 CHARS.*
ACH2     LH    @F,TCOL2                                           0394
         SH    @F,TCOL1                                           0394
         CH    @F,@D19                                            0394
         BC    12,@9BD                                            0394
         LA    @F,39                                              0395
         AH    @F,TCOL1                                           0395
         STH   @F,TCOL2                                           0395
*           /* MOVE TITLE INTO TITLE BUFFER FOR PRINTING              *
*           TTLINE(TITLECOL:TITLECOL+39)=CARD(TCOL1:TCOL2);
@9BD     LH    @1,TCOL2                                           0396
         LH    @3,TCOL1                                           0396
         SR    @1,@3                                              0396
         LA    @E,BCARD(@3)                                       0396
         LH    @4,TITLECOL                                        0396
         LA    @A,BLINE(@4)                                       0396
         MVI   0(@A),C' '                                         0396
         MVC   1(039,@A),0(@A)                                    0396
         EX    @1,@MVC                                            0396
* ACF4:
*           COL=COL+1;                  /* BUMP COLUMN POINTER        *
ACF4     AH    @9,@D7                                             0397
* ACG4:
*           /* CHECK IF ALL OPTIONS SPECIFIED HAVE BEEN ENCOUNTERED   *
*           IF CARD(COL)=' '            /* IS COLUMN BLANK?           *
*              THEN GOTO PROCESS;       /* PROCESS OUTPUT OPTIONS     *
ACG4     LR    @1,@9                                              0398
         LA    @A,BCARD(@1)                                       0398
         CLI   0(@A),C' '                                         0398
         BC    08,PROCESS                                         0399
*           /* CHECK TO SEE IF CONTINUATION WAS SPECIFIED             *
*           IF CARD(COL:COL+1)=', '     /* IS IT CONTINUATION?        *
*              THEN DO;                 /* PROCESS CONTINUATION       *
         CLC   0(2,@A),@C83                                       0400
         BC    07,@9BC                                            0400
*                   CONTINUE='1'B;      /* TURN ON CONTINUATION BIT   *
         OI    CONTINUE,B'10000000'                               0402
*                   GOTO AAC1;          /* READ ANOTHER CARD          *
         BC    15,AAC1                                            0403
*                   END;
*           /* CHECK IF CARD COLUMN IS A COMMA                        *
*           IF CARD(COL)=','            /* IS COL A COMMA?            *
*              /* CHECK IF COLUMN IS EQUAL TO 71                      *
*              THEN IF COL=71           /* IS COL EQUAL TO 71?        *
@9BC     LR    @1,@9                                              0405
         LA    @A,BCARD(@1)                                       0405
         CLI   0(@A),C','                                         0405
         BC    07,@9BB                                            0405
*                      THEN DO;         /* PROCESS COL=71             *
         CH    @9,@D9                                             0406
         BC    07,@9BA                                            0406
*                           CONTINUE='1'B;/* TURN ON CONTINUATION     *
         OI    CONTINUE,B'10000000'                               0408
*                           GOTO AAC1;  /* READ ANOTHER CARD          *
         BC    15,AAC1                                            0409
*                           END;
*                      ELSE DO;         /* COL NOT EQUAL TO 71        *
*                           COL=COL+1;  /* BUMP COLUMN POINTER        *
@9BA     AH    @9,@D7                                             0412
*                           GOTO ABC1;  /* FIND NEXT OPTION           *
         BC    15,ABC1                                            0413
*                           END;
*              ELSE GOTO ABA2;          /* MARK COLUMN IN ERROR       *
*           END;
@9B8     EQU   *                                                  0416
*   COL=COL+1;                          /* BUMP COLUMN POINTER        *
@9BE     AH    @9,@D7                                             0417
*   /* CHECK IF COLUMN POINTER IS POINTING TO A COMMA                 *
*   IF CARD(COL)=','                    /* IS COL A COMMA?            *
*      THEN GOTO ADB1;                  /* BUMP COLUMN POINTER        *
         LR    @1,@9                                              0418
         LA    @A,BCARD(@1)                                       0418
         CLI   0(@A),C','                                         0418
         BC    08,ADB1                                            0419
*   /* CHECK IF COLUMN POINTER IS POINTING TO A RIGHT PAREND          *
*   IF CARD(COL)=')'                    /* IS COL A RIGHT PAREND      *
*      THEN GOTO ACG2;                  /* TAKE DEFAULT OUTPUT PLACE  *
         CLI   0(@A),C')'                                         0420
         BC    08,ACG2                                            0421
*      ELSE GOTO ABA2;                  /* SET UP ERROR MARKER        *
         BC    15,ABA2                                            0422
* ADB1:
*   COL=COL+1;                          /* BUMP COLUMN POINTER        *
ADB1     AH    @9,@D7                                             0423
*   TITLECOL=0;                         /* ZERO OUT TITLE OUTPUT ADDR *
         SR    @F,@F                                              0424
         STH   @F,TITLECOL                                        0424
*   /* CHECK FOR TWO POSITION TITLE OUTPUT ADDRESS PLUS RIGHT PAREND  *
*   IF CARD(COL+3)=')'                  /* IS COL+3 EQUAL RIGHT PAREND*
*      THEN GOTO ADC2;                  /* PROCESS TITLE OUTPUT ADDR  *
         LA    @1,3                                               0425
         AR    @1,@9                                              0425
         LA    @A,BCARD(@1)                                       0425
         CLI   0(@A),C')'                                         0425
         BC    08,ADC2                                            0426
*   /* CHECK FOR ONE POSITION TITLE OUTPUT ADDRESS PLUS RIGHT PAREND  *
*   IF CARD(COL+2)=')'                  /* IS COL+2 EQUAL RIGHT PAREND*
*      THEN GOTO ADD2;                  /* PROCESS TITLE OUTPUT ADDR  *
         LA    @3,2                                               0427
         AR    @3,@9                                              0427
         LA    @A,BCARD(@3)                                       0427
         CLI   0(@A),C')'                                         0427
         BC    08,ADD2                                            0428
*   /* CHECK FOR RIGHT PAREND ONLY                                    *
*   IF CARD(COL+1)=')'                  /* IS COL+1 EQUAL RIGHT PAREND*
*      THEN GOTO ADE2;                  /* PROCESS TITLE OUTPUT ADDR  *
         LA    @4,1                                               0429
         AR    @4,@9                                              0429
         LA    @A,BCARD(@4)                                       0429
         CLI   0(@A),C')'                                         0429
         BC    08,ADE2                                            0430
*      ELSE GOTO ACC2;                  /* SET UP ERROR MESSAGE       *
         BC    15,ACC2                                            0431
* ADC2:
*   TEMP=CARD(COL);                     /* SAVE POINTER TO QUOTE      *
ADC2     LR    @1,@9                                              0432
         SR    @F,@F                                              0432
         IC    @F,BCARD(@1)                                       0432
         STH   @F,TEMP                                            0432
*   TITLECOL=100*(TEMP-240);            /* CALCULATE OUTPUT COLUMN    *
         SH    @F,@D20                                            0433
         MH    @F,@D21                                            0433
         STH   @F,TITLECOL                                        0433
*   COL=COL+1;                          /* BUMP COLUMN POINTER        *
         AH    @9,@D7                                             0434
* ADD2:
*   TEMP=CARD(COL);                     /* SAVE POINTER TO QUOTE      *
ADD2     LR    @1,@9                                              0435
         SR    @F,@F                                              0435
         IC    @F,BCARD(@1)                                       0435
         STH   @F,TEMP                                            0435
*   TITLECOL=TITLECOL+10*(TEMP-240);    /* CALCULATE OUTPUT COLUMN    *
         SH    @F,@D20                                            0436
         MH    @F,@D22                                            0436
         AH    @F,TITLECOL                                        0436
         STH   @F,TITLECOL                                        0436
*   COL=COL+1;                          /* BUMP COLUMN POINTER        *
         AH    @9,@D7                                             0437
* ADE2:
*   TEMP=CARD(COL);                     /* SAVE POINTER TO QUOTE      *
ADE2     LR    @1,@9                                              0438
         SR    @F,@F                                              0438
         IC    @F,BCARD(@1)                                       0438
         STH   @F,TEMP                                            0438
*   TITLECOL=TITLECOL+TEMP-240;         /* CALCULATE OUTPUT COLUMN    *
         LH    @F,@D23                                            0439
         AH    @F,TEMP                                            0439
         AH    @F,TITLECOL                                        0439
         STH   @F,TITLECOL                                        0439
*   COL=COL+1;                          /* BUMP COLUMN POINTER        *
         AH    @9,@D7                                             0440
*   /* CHECK IF TITLE WILL FIT AT ADDRESS SPECIFIED                   *
*   IF TCOL2-TCOL1+TITLECOL>120         /* IS TITLE ADDR > 120        *
*      × TCOL2-TCOL1+TITLECOL < 1       /* IS TITLE ADDR < 1          *
*      THEN GOTO ACG2;                  /* START TITLE IN COLUMN 1    *
         SH    @F,TCOL1                                           0441
         AH    @F,TCOL2                                           0441
         LA    @1,120                                             0441
         CR    @F,@1                                              0441
         BC    02,@9B7                                            0441
         LH    @F,TITLECOL                                        0441
         SH    @F,TCOL1                                           0441
         AH    @F,TCOL2                                           0441
         CH    @F,@D7                                             0441
         BC    05,ACG2                                            0442
*      ELSE GOTO ACH2;                  /* IS TITLE > 40 CHARACTERS?  *
         BC    15,ACH2                                            0443
* AEB1:
*   /* CHECK TO SEE IF TOO MANY MEMBERS WERE SPECIFIED                *
*   IF LIMIT='1'B                       /* HAS MEMBER LIMIT BEEN HIT? *
*      THEN GOTO AEG2;                  /* FIND END OF MEMBER OPERAND *
AEB1     TM    OPTNMAP+1,B'00001000'                              0444
         BC    01,AEG2                                            0445
*   NUMBER=0;                           /* MEMBER OPERAND PROCESSER   *
         SR    @F,@F                                              0446
         STH   @F,NUMBER                                          0446
* AEC1:
*   TCOL1=COL;                          /* SAVE LEFT BOUNDARY         *
AEC1     STH   @9,TCOL1                                           0447
* AED1:
*   /* CHECK IF END OF MEMBER HAS BEEN FOUND                          *
*   IF CARD(COL)=','                    /* HAS END OF MEMBER BEEN HIT *
*      THEN DO;                         /* PROCESS MEMBER             *
AED1     LR    @1,@9                                              0448
         LA    @A,BCARD(@1)                                       0448
         CLI   0(@A),C','                                         0448
         BC    07,@9B5                                            0448
* AEE1:
*           TCOL2=COL-1;                /* SAVE RIGHT BOUNDARY        *
AEE1     LR    @F,@9                                              0450
         BCTR  @F,0                                               0450
         STH   @F,TCOL2                                           0450
* AEF1:
*           /* CHECK IF MEMBER IS GREATER THAN EIGHT CHARACTERS       *
*           IF TCOL2-TCOL1>7            /* IS MEMBER TOO LARGE?       *
*              THEN DO;                 /* PROCESS LARGE MEMBER       *
AEF1     LH    @F,TCOL2                                           0451
         SH    @F,TCOL1                                           0451
         CH    @F,@D11                                            0451
         BC    12,@9B4                                            0451
*                   COL=TCOL1;          /* POINT COL TO BEGINNING     *
         LH    @9,TCOL1                                           0453
*                   GOTO ABA2;          /* SET UP ERROR MARKER        *
         BC    15,ABA2                                            0454
*                   END;
*           /* CHECK TO SEE IF A MEMBER WAS SPECIFIED                 *
*           IF TCOL2-TCOL1<0            /* WAS MEMBER GIVEN?          *
*              THEN GOTO ABA2;          /* SET UP ERROR MARKER        *
@9B4     LH    @F,TCOL1                                           0456
         LCR   @F,@F                                              0456
         AH    @F,TCOL2                                           0456
         CH    @F,@D12                                            0456
         BC    04,ABA2                                            0457
*           NUMBER=NUMBER+1;            /* ADD 1 TO MEMBER COUNT      *
         LA    @F,1                                               0458
         AH    @F,NUMBER                                          0458
         STH   @F,NUMBER                                          0458
*           /* CHECK TO SEE IF LESS THAN 33 MEMBERS WERE PROCESSED    *
*           IF NUMBER<33                /* LESS THAN 33 MEMBERS?      *
*              THEN DO;                 /* PROCESS MEMBER             *
         LA    @F,33                                              0459
         CH    @F,NUMBER                                          0459
         BC    12,@9B3                                            0459
*                   LISTNAME(NUMBER)=CARD(TCOL1:TCOL2);/* SAVE MEMBER *
         LH    @1,TCOL2                                           0461
         LH    @3,TCOL1                                           0461
         SR    @1,@3                                              0461
         LA    @E,BCARD(@3)                                       0461
         LH    @4,NUMBER                                          0461
         MH    @4,@D24                                            0461
         LA    @A,BLDLIST-10(@4)                                  0461
         MVI   0(@A),C' '                                         0461
         MVC   1(007,@A),0(@A)                                    0461
         EX    @1,@MVC                                            0461
*                   /* CHECK IF ONLY ONE MEMBER SPECIFIED             *
*                   IF LASTMEM='1'B     /* WAS ONE MEMBER SPECIFIED?  *
*                      THEN GOTO ACG4;  /* CHECK IF MORE OPTIONS      *
         TM    OPTNMAP+1,B'00010000'                              0462
         BC    01,ACG4                                            0463
*                   /* CHECK TO SEE IF MEMBERS ARE CONTINUED          *
*                   IF CARD(COL+1)=' '  /* CHECK FOR CONTINUATION     *
*                      THEN DO;         /* PROCESS CONTINUATION       *
         LA    @1,1                                               0464
         AR    @1,@9                                              0464
         LA    @A,BCARD(@1)                                       0464
         CLI   0(@A),C' '                                         0464
         BC    07,@9B2                                            0464
* AEK3:
*                           MCONTIN='1'B;/* CONTINUATION OF MEMBERS   *
AEK3     OI    OPTNMAP+1,B'00000100'                              0466
*                           CONTINUE='1'B;/* CONTINUATION OF CARD     *
         OI    CONTINUE,B'10000000'                               0467
*                           GOTO AAC1;  /* READ ANOTHER CARD          *
         BC    15,AAC1                                            0468
*                           END;
*                   /* CHECK IF COMMA IS IN 71 INDICATING CONTINUATION*
*                   IF COL=71           /* COL EQUAL 71, CONTINUE     *
*                      THEN GOTO AEK3;  /* SET UP CONTINUATION BITS   *
@9B2     CH    @9,@D9                                             0470
         BC    08,AEK3                                            0471
*                      ELSE DO;         /* COL NO EQUAL TO 71         *
*                           COL=COL+1;  /* BUMP COLUMN POINTER        *
         AH    @9,@D7                                             0473
*                           GOTO AEC1;  /* SAVE LEFT BOUNDARY OF MEM  *
         BC    15,AEC1                                            0474
*                           END;
*                   END;
*              ELSE NUMBER=NUMBER-1;    /* SET NUMBER EQUAL TO 32     *
@9B3     LH    @F,NUMBER                                          0477
         BCTR  @F,0                                               0477
         STH   @F,NUMBER                                          0477
*           COL=TCOL1;                  /* COL EQUALS LEFT BOUNDARY   *
@9B1     LH    @9,TCOL1                                           0478
*           ECARD(COL+1)='$';           /* MARK ERROR COLUMN          *
         LA    @1,1                                               0479
         AR    @1,@9                                              0479
         LA    @A,ECARD-1(@1)                                     0479
         MVI   0(@A),C'$'                                         0479
*           GEN (PUT   OUTDCB,ECARD);   /* PRINT ERROR MARKER         *
         PUT   OUTDCB,ECARD
         DS    0H
*           ECARD(COL+1)=' ';           /* BLANK OUT ERROR MARKER     *
         LA    @1,1                                               0481
         AR    @1,@9                                              0481
         LA    @A,ECARD-1(@1)                                     0481
         MVI   0(@A),C' '                                         0481
*           ERRORS=ERRORS×'00000100'X;  /* WRITE: NO. MEM NAMES > 32  *
         OC    PARMLIST+32(4),@X47                                0482
* AEG2:
*           /* CHECK FOR END OF MEMBER OPERAND                        *
*           IF CARD(COL)=')'            /* COL EQUAL RIGHT PAREND?    *
*              THEN GOTO ACF4;          /* BUMP COLUMN POINTER        *
AEG2     LR    @1,@9                                              0483
         LA    @A,BCARD(@1)                                       0483
         CLI   0(@A),C')'                                         0483
         BC    08,ACF4                                            0484
*           /* CHECK FOR CONTINUATION OF MEMBER OPERAND               *
*           IF CARD(COL:COL+1)=', '     /* CONTINUATION SPECIFIED?    *
*              THEN DO;                 /* PROCESS CONTINUATION       *
         CLC   0(2,@A),@C83                                       0485
         BC    07,@9B0                                            0485
* AEH3:
*                   LIMIT='1'B;         /* INDICATE MEMBER LIMIT      *
AEH3     OI    OPTNMAP+1,B'00001100'                              0487
*                   MCONTIN='1'B;       /* INDICATE MEMBER CONTINUE   *
*                   GOTO AAC1;          /* READ ANOTHER CARD          *
         BC    15,AAC1                                            0489
*                   END;
*           COL=COL+1;                  /* BUMP COLUMN POINTER        *
@9B0     AH    @9,@D7                                             0491
*           /* CHECK IF COLUMN POINTER IS PAST COLUMN 71              *
*           IF COL^>71                  /* IS COL LESS THAN 71?       *
*              THEN GOTO AEG2;          /* PROCESS NEXT COLUMN        *
         CH    @9,@D9                                             0492
         BC    12,AEG2                                            0493
*           /* CHECK IF COLUMN POINTER IS POINTING TO A COMMA         *
*           IF CARD(71)=','             /* IS COL A COMMA?            *
*              THEN GOTO AEH3;          /* SET UP MEMBER CONTINUATION *
         CLI   BCARD+71,C','                                      0494
         BC    08,AEH3                                            0495
*              ELSE GOTO ABA2;          /* SET UP ERROR MARKER        *
         BC    15,ABA2                                            0496
*           END;
*   /* CHECK IF COLUMN POINTER IS POINTING TO A RIGHT PAREND          *
*   IF CARD(COL)=')'                    /* IS COL A RIGHT PAREND?     *
*      THEN DO;                         /* PROCESS RIGHT PAREND       *
@9B5     LR    @1,@9                                              0498
         LA    @A,BCARD(@1)                                       0498
         CLI   0(@A),C')'                                         0498
         BC    07,@9AF                                            0498
*           LASTMEM='1'B;               /* TURN ON LAST MEMBER BIT    *
         OI    OPTNMAP+1,B'00010000'                              0500
*           TCOL2=COL-1;                /* SET RIGHT BOUNDARY         *
         LR    @F,@9                                              0501
         BCTR  @F,0                                               0501
         STH   @F,TCOL2                                           0501
*           COL=COL+1;                  /* BUMP COLUMN POINTER        *
         AH    @9,@D7                                             0502
*           GOTO AEF1;                  /* CHECK IF VALID MEMBER      *
         BC    15,AEF1                                            0503
*           END;
*   /* CHECK IF COLUMN POINTER IS A BLANK                             *
*   IF CARD(COL)=' '                    /* IS COL A BLANK?            *
*      /* IF COL WAS A BLANK THAN SEE IF A LEFT PAREND WAS GIVEN      *
*      THEN IF LPAREN='0'B              /* WAS THERE A LEFT PAREND?   *
@9AF     LR    @1,@9                                              0505
         LA    @A,BCARD(@1)                                       0505
         CLI   0(@A),C' '                                         0505
         BC    07,@9AE                                            0505
*              THEN GOTO AEE1;          /* CHECK IF VALID MEMBER      *
         TM    LPAREN,B'10000000'                                 0506
         BC    08,AEE1                                            0507
*              ELSE GOTO ABA2;          /* SET UP ERROR MESSAGE       *
         BC    15,ABA2                                            0508
*   /* CHECK TO SEE IF COL IS NOT PAST A VALID ENDING COLUMN          *
*   IF COL>70                           /* IS COL PAST ENDING COL     *
*      THEN GOTO ACC2;                  /* SET UP ERROR MESSAGE       *
@9AE     CH    @9,@D17                                            0509
         BC    02,ACC2                                            0510
*      ELSE DO;                         /* NOT PAST 70 THEN PROCESS   *
*           COL=COL+1;                  /* BUMP COLUMN POINTER        *
         AH    @9,@D7                                             0512
*           GOTO AED1;                  /* CHECK FOR A COMMA          *
         BC    15,AED1                                            0513
*           END;
* /********************************************************************
* /* ENTRY POINT FOR END OF DATA ON INPUT DATASET-THIS IS AN ABNORMAL *
* /* OCCURANCE....................................           @ZA05200 *
* /********************************************************************
* PDSEOD:                                                 /* @ZA05200 *
*   GEN;                                                  /* @ZA05200 *
PDSEOD   EQU   *                                                  0515
         BALR  15,0                                      /* @ZA05200 */
         USING *,15                                      /* @ZA05200 */
*********** I S S U E  E R R O R  M E S S A G E  *********************
         WTO   'HMB107I  I/O ERROR ON READ',ROUTCDE=11   /* @ZA05200 */
         DROP  15                                        /* @ZA05200 */
         DS    0H
*     GO TO CLOSEIT;                                      /* @ZA05200 *
         BC    15,CLOSEIT                                         0516
* /********************************************************************
* /* ENTRY POINT FOR SYNAD ROUTINE FOR INPUT DATA SET BEING PROCESSED *
* /********************************************************************
* SYSIOPDS:
*   GEN;
SYSIOPDS EQU   *                                                  0517
         USING *,15                                      /* @ZA15060 */
         TM    SWITCH,X'01'       /* IS IT A PDS ERRROR?    @ZA15060 */
         BO    PARTDS             /* YES DON'T RESTORE REGS @ZA15060 */
*********** I S S U E  E R R O R  M E S S A G E     ********@ZA15060
         WTO   'HMB107I  I/O ERROR ON READ',ROUTCDE=11   /* @ZA15060 */
         DROP  15                                        /* @ZA15060 */
         L     13,4(13)           /* RESTORE                @ZA15060 */
         LM    @E,@C,12(@D)       /* REGISTERS              @ZA15060 */
         B     FINISH                                    /* @ZA15060 */
PARTDS   EQU   *                                         /* @ZA15060 */
         USING *,15                                      /* @ZA15060 */
********** I S S U E  E R R O R  M E S S A G E       **********
         WTO   'HMB109I  I/O ERROR ON READ',ROUTCDE=11
         DROP  15
         B     FINISH                                    /* @ZA15060 */
         DS    0H               /* READING DIRECTORY IN CTL @ZA15060 */
FINISH   EQU  *                                          /* @ZA15060 */
         DS    0H
*   ERRORS=ERRORS×'0100'X;
         OC    PARMLIST+32(2),@X85                                0518
*   R1=ADDR(PARMLIST);
         LA    @1,PARMLIST                                        0519
*   CALL HMBLKERR;
         L     @F,@V2              ADDRESS OF HMBLKERR            0520
         BALR  @E,@F                                              0520
*   GO TO CLOSEIT;                                       /*  @SA71638 *
         BC    15,CLOSEIT                                         0521
*   /******************************************************************
*   /* PROCESSING OF CONTROL CARD OPTIONS BEGINS HERE                 *
*   /******************************************************************
* PROCESS:
*   GEN;
PROCESS  EQU   *                                                  0522
         LA    R5,PODCB                 PUT DCB ADDRESS IN REGISTER
         USING IHADCB,R5                USE R5 AS BASE FOR DCB DSECT
         DS    0H
*   /* CHECK TO SEE IF CONTROL CARD HAD A DDNAME GIVEN                *
*   IF DDN='1'B                         /* WAS A DDNAME GIVEN?        *
*      THEN DCBDDNAM=DDNAME;            /* PUT IN DCB DDNAME GIVEN    *
         TM    OPTNMAP,B'00000100'                                0523
         BC    12,@9AD                                            0523
         MVC   DCBDDNAM(8),PARMLIST+44                            0524
         BC    15,@9AC                                            0525
*      ELSE DO;                         /* PROCESS NO DDNAME GIVEN    *
*           DDNAME=SYSLIB;              /* USE SYSLIB AS DEFAULT      *
@9AD     MVC   PARMLIST+44(8),SYSLIB                              0526
*           DCBDDNAM=SYSLIB;            /* PUT SYSLIB IN DCB          *
         MVC   DCBDDNAM(8),SYSLIB                                 0527
*           END;
*   /* CHECK FOR SEQUENTIAL OBJECT MODULE DATA SET OPERATION          *
*   IF PO='0'B                          /* IS IT A OBJ SEQUENTIAL
*                                         DATA SET?                   *
*      & LISTOBJ='1'B                   /* LISTOBJ OPTION?            *
*      THEN GOTO OBJSEQ;                /* PROCESS SEQ. DATA SET      *
@9AC     TM    OPTNMAP+1,B'00100000'                              0529
         BC    05,@9AB                                            0529
         TM    OPTNMAP,B'01000000'                                0529
         BC    03,OBJSEQ                                          0530
*   /******************************************************************
*   /* OPEN PODCB, GET A WORK BUFFER AND ACQUIRE STORAGE DYNAMICALLY  *
*   /******************************************************************
*   GEN;
@9AA     EQU   *                                                  0531
@9AB     EQU   *                                                  0531
         OPEN PODCB,MF=(E,OPEN2)       OPEN PODCB
         TM    DCBOFLGS,X'10'          SEE IF OPEN IS SUCCESSFUL
         BZ    NOOPEN                  SET UP ERROR MESSAGE
         GETBUF  PODCB,R6              GET WORK BUFFER
         LTR   R6,R6                   SET CONDITION CODE
         BZ    ERRMSG                  ISSUE ERROR MESSAGE
         ST    R6,BUFF                 SAVE BUFFER ADDRESS
         DS    0H
* GETMAIN:
*   IF LISTLPA='1'B                      /* GETMAIN FOR LPA           *
*     THEN                               /* YES                       *
GETMAIN  TM    OPTNMAP,B'00010000'                                0532
         BC    12,@9A9                                            0532
*       DO;
*          GEN(GETMAIN VU,LA=HILOLPA,A=STORAGE,SP=22,MF=(E,SPGET));
         GETMAIN VU,LA=HILOLPA,A=STORAGE,SP=22,MF=(E,SPGET)
         DS    0H
         BC    15,@9A8                                            0536
*       END;
*     ELSE                              /* NO,GETMAIN NOT FOR LPA     *
*       DO;
@9A9     EQU   *                                                  0536
*          GEN(GETMAIN VU,LA=HIGHLOW,A=STORAGE,SP=22,MF=(E,SPGET));
         GETMAIN VU,LA=HIGHLOW,A=STORAGE,SP=22,MF=(E,SPGET)
         DS    0H
*       END;
*   AREAGET=MAINADDR;                   /* PUT GETMAIN ADDR IN PARMLST*
@9A8     MVC   PARMLIST+12(4),STORAGE                             0539
*   MAINADDR=MAINADDR + (MAINLEN-OVERHEAD);/* STARTING ADDR FOR FREEMAI
*                                         OF SUBPOOL 22               *
         L     @F,STORAGE+4                                       0540
         S     @F,OVERHEAD                                        0540
         A     @F,STORAGE                                         0540
         ST    @F,STORAGE                                         0540
*   GMLENGTH=MAINLEN - OVERHEAD;        /* ACTUAL LENGTH OF SP 22
*                                         AFTER FREEMAIN              *
         L     @F,STORAGE+4                                       0541
         S     @F,OVERHEAD                                        0541
         ST    @F,PARMLIST+16                                     0541
*   MAINLEN=OVERHEAD;                   /* LENGTH TO BE FREED         *
         MVC   STORAGE+4(4),OVERHEAD                              0542
*   GEN;
         FREEMAIN  V,A=STORAGE,SP=22,MF=(E,SPFREE)  FREE UP 8K OF SP22
         DS    0H
*   /* CHECK IF GETMAIN WAS FOR LINK PACK AREA OPTION                 *
*   IF LISTLPA='1'B                     /* LINK PACK AREA OPTION?     *
*      THEN GOTO LPACALL;               /* RETURN TO CALLER           *
         TM    OPTNMAP,B'00010000'                                0544
         BC    01,LPACALL                                         0545
*      ELSE GOTO TEST;                  /* CONTINUE PROCESSING        *
         BC    15,TEST                                            0546
* NOOPEN:
*   /******************************************************************
*   /* SET UP ERROR MESSAGE, DDNAME COULD NOT BE OPENED               *
*   /******************************************************************
*   ERRORS=ERRORS×'0020'X;              /* TURN ON ERROR BIT AND GOTO *
NOOPEN   OC    PARMLIST+32(2),@X48                                0547
*   R1=ADDR(PARMLIST);                  /* SAVE PARMLIST ADDR TO PASS *
         LA    @1,PARMLIST                                        0548
*   CALL HMBLKERR;                      /* PROCESS ANY ERROR MSGS     *
         L     @F,@V2              ADDRESS OF HMBLKERR            0549
         BALR  @E,@F                                              0549
*   GOTO  AAB1;                         /* READ ANOTHER CARD          *
         BC    15,AAB1                                            0550
* TEST:
*   /* IS IT OBJECT MODULE PARTITIONED DATA SET                       *
*   IF SW4='1'B                         /* IS IT OBJPDS OPERATION?    *
*      THEN GOTO BLDCH;                 /* CHECK FOR MEMBER FOUND     *
TEST     TM    SWITCHES,B'00010000'                               0551
         BC    01,BLDCH                                           0552
*   /* CHECK IF IT IS A LOAD MODULE OPERATION                         *
*   IF LISTLOAD='1'B                    /* IS IT A LISTLOAD OPERATION?*
*      × LISTIDR='1'B                   /* IS IT A LISTIDR OPERATION? *
*      THEN DO;                         /* PROCESS LOAD MODULE        *
         TM    OPTNMAP,B'10000000'                                0553
         BC    01,@9A7                                            0553
         TM    OPTNMAP,B'00100000'                                0553
         BC    12,@9A6                                            0553
@9A7     EQU   *                                                  0554
*           GEN;
         TM    DCBRECFM,X'C0'          IS IT UNDEFINED RECORD LENGTH
         BNO   NOLOAD                  SET UP ERROR MESSAGE
         TM    DCBDSORG,X'02'          IS IT PARTITIONED DATA SET
         BO    MEM                     ARE THERE MEMBERS GIVEN
         DS    0H
* NOLOAD:
*   /******************************************************************
*   /* SET UP ERROR MESSAGE FOR INVALID LOAD MODULE                   *
*   /******************************************************************
*           ERRORS=ERRORS×'0800'X;      /* TURN ON ERROR BIT          *
NOLOAD   OC    PARMLIST+32(2),@X86                                0556
* NOLOAD1:                                                   /* Y03207*
*           R1=ADDR(PARMLIST);          /* SAVE PARMLIST ADDR TO PASS *
NOLOAD1  LA    @1,PARMLIST                                        0557
*           CALL HMBLKERR;              /* PROCESS ANY ERROR MSGS     *
         L     @F,@V2              ADDRESS OF HMBLKERR            0558
         BALR  @E,@F                                              0558
*           GEN(FREEBUF PODCB,R6);      /* FREE WORK BUFFER           *
         FREEBUF PODCB,R6
         DS    0H
*           GEN;
         CLOSE  PODCB,MF=(E,CLOSR2)      CLOSE PODCB
         DS    0H
*           GEN(FREEPOOL PODCB);        /* FREE BUFFER STORAGE        *
         FREEPOOL PODCB
         DS    0H
*           GEN;                        /* ISSUE FREEMAIN FOR SP22    *
       FREEMAIN V,A=AREAGET,SP=22,MF=(E,SPFREE) FREE WORKING STORAGE
         DS    0H
*           GOTO AAB1;                  /* PROCESS ANOTHER CARD       *
         BC    15,AAB1                                            0563
* MEM:
*           /* CHECK TO SEE IF A MEMBER OPTION WAS USED               *
*           IF MEMBER^='1'B             /* WAS MEMBER PARAMETER GIVEN?*
*              THEN DO;                 /* PROCESS DEFAULT OF ALL
MEM      TM    OPTNMAP,B'00000010'                                0564
         BC    01,@9A5                                            0564
*                                         MEMBERS                     *
*                   SW1='1'B;           /* NO TAKE DEFAULT OF ALL MEMS*
         OI    SWITCHES,B'10000000'                               0566
*                   GOTO SKIP;          /* READ A DIRECTORY ENTRY     *
         BC    15,SKIP                                            0567
*                   END;
* SORT:
*           NUMENTS=NUMBER;             /*NUM OF ENTRIES IN BLDLIST   *
@9A5     EQU   *                                                  0569
SORT     MVC   BLDLIST(2),NUMBER                                  0569
*           /**********************************************************
*           /* THE FOLLOWING CODE SORTS THE MEMBERS IN ALPHA-         *
*           /* NUMERIC SEQUENCE.                                      *
*           /**********************************************************
*           F=NUMBER;                   /* INIT F TO NO. OF MEMBERS   *
         MVC   F(2),NUMBER                                        0570
* SORT1:
*           F=F/2;                      /* DIVIDE ARRAY IN HALF       *
SORT1    LH    @E,F                                               0571
         SRDA  @E,32                                              0571
         LA    @0,2                                               0571
         DR    @E,@0                                              0571
         STH   @F,F                                               0571
*           /* CHECK FOR END OF SORT OR IF 1 MEMBER TO SKIP SORT      *
*           IF F=0                      /* IS SORT FINISHED?          *
*              THEN GOTO BUILD;         /* ISSUE BLDL MACRO           *
         SR    @F,@F                                              0572
         CH    @F,F                                               0572
         BC    08,BUILD                                           0573
*           G=NUMBER-F;                 /* SET INDEX G                *
         LH    @F,NUMBER                                          0574
         SH    @F,F                                               0574
         STH   @F,G                                               0574
*           H=1;                        /* SET INDEX H TO 1           *
         LA    @F,1                                               0575
         STH   @F,H                                               0575
* SORT2:
*           J=H;                        /* SET INDEX J                *
SORT2    MVC   J(2),H                                             0576
* SORT3:
*           L=J+F;                      /* SET INDEX L                *
SORT3    LH    @F,F                                               0577
         AH    @F,J                                               0577
         STH   @F,L                                               0577
*           /* TEST WHICH IS GREATER OF TWO ARRAYS                    *
*           IF LISTNAME(J,1:8)<=LISTNAME(L,1:8) /* IS SECOND > FIRST  *
*               THEN GOTO SORT4;        /* DONT EXCHANGE MEMNAMES     *
         LR    @1,@F                                              0578
         MH    @1,@D24                                            0578
         LA    @E,BLDLIST-10(@1)                                  0578
         LH    @3,J                                               0578
         MH    @3,@D24                                            0578
         LA    @A,BLDLIST-10(@3)                                  0578
         CLC   0(8,@A),0(@E)                                      0578
         BC    12,SORT4                                           0579
*           WORKAREA=LISTNAME(J);       /* FIRST GOES INTO WORKAREA   *
         LA    @E,BLDLIST-10(@3)                                  0580
         MVC   WORKAREA(8),0(@E)                                  0580
*           LISTNAME(J)=LISTNAME(L);    /* SWAP POSITIONS IN ARRAY    *
         LA    @E,BLDLIST-10(@1)                                  0581
         MVC   0(8,@A),0(@E)                                      0581
*           LISTNAME(L)=WORKAREA;       /* PUT FIRST IN SECOND        *
         LA    @A,BLDLIST-10(@1)                                  0582
         MVC   0(8,@A),WORKAREA                                   0582
*           J=J-F;                      /* DECREMENT INDEX J BY F     *
         LH    @F,J                                               0583
         SH    @F,F                                               0583
         STH   @F,J                                               0583
*           /* TEST IF BEGINNING OF MEMNAME ARRAY HAS BEEN REACHED    *
*           IF J>=1                     /* IF BEGINNING NOT REACHED   *
*               THEN GOTO SORT3;        /* COMPARE MEMNAMES           *
         LA    @F,1                                               0584
         CH    @F,J                                               0584
         BC    12,SORT3                                           0585
* SORT4:
*           H=H+1;                      /* BUMP INDEX H BY 1          *
SORT4    LA    @F,1                                               0586
         AH    @F,H                                               0586
         STH   @F,H                                               0586
*           /* TEST IF SCAN IS FINISHED                               *
*           IF H>G                      /* IS H GREATER THAN G        *
*               THEN GOTO SORT1;        /* GO TO POSSIBLE SCAN AGAIN  *
         LH    @F,G                                               0587
         CH    @F,H                                               0587
         BC    04,SORT1                                           0588
*               ELSE GOTO SORT2;        /* GO TO FINISH IT            *
         BC    15,SORT2                                           0589
* BUILD:
*   /******************************************************************
*   /* ISSUE BLDL MACRO ON MEMBERS IN BLDLIST                         *
*   /******************************************************************
*           GEN;
BUILD    EQU   *                                                  0590
         BLDL  PODCB,BLDLIST           CREATE BLDL LIST
         POINT PODCB,DIRORG            REPOSITION R/W HEAD TO BEGIN
         DS    0H
* BLDCH:
*           /* CHECK TO SEE IF BLDL WAS ABLE TO FIND MEMBER           *
*           IF LISTTR(LISTCNT,3)='00'X  /* WAS MEMBER FOUND?          *
*              THEN DO;                 /* PROCESS MEMBER NOT FOUND   *
BLDCH    LH    @1,LISTCNT                                         0591
         MH    @1,@D24                                            0591
         LA    @A,BLDLIST(@1)                                     0591
         CLI   0(@A),X'00'                                        0591
         BC    07,@9A4                                            0591
*                   MEMNAME=LISTNAME(LISTCNT,1:8);/* STORE MEMBER     *
         LA    @E,BLDLIST-10(@1)                                  0593
         MVC   PARMLIST+36(8),0(@E)                               0593
*                   ERRORS=ERRORS × '0100'X;/* SET UP ERROR MESSAGE   *
         OC    PARMLIST+32(2),@X85                                0594
*                   R1=ADDR(PARMLIST);  /* STORE PARMLIST ADDRESS     *
         LA    @1,PARMLIST                                        0595
*                   CALL HMBLKERR;      /* PROCESS ERROR MESSAGE      *
         L     @F,@V2              ADDRESS OF HMBLKERR            0596
         BALR  @E,@F                                              0596
*                   GOTO OUT;           /* CHECK FOR ANYMORE MEMBERS  *
         BC    15,OUT                                             0597
*                   END;
*           /* CHECK TO SEE IF IT IS AN OBJECT PARTITIONED DATA SET   *
*           IF SW4='1'B                 /* IS IT OBJPDS OPERATION?    *
*              THEN GOTO OBJCALL;       /* PROCESS OBJECT PDS         *
@9A4     TM    SWITCHES,B'00010000'                               0599
         BC    01,OBJCALL                                         0600
*           GEN;
SKIP     EQU   *
         OI    SWITCH,X'01'      /* TURN ON SYNAD SWITCH     @ZA15060*/
         READ  READIR,SF,PODCB,(R6),264,MF=E  READ A DIRECTORY BLOCK
         CHECK READIR                  WAS READ SUCCESSFUL?
         NI    SWITCH,X'FE'      /* TURN OFF SYNAD SWITCH    @ZA15060*/
         DS    0H
*           IF DCBLRECL^=264             /* GOOD DIR BLOCK?    Y03207 *
*              THEN DO;                  /* NO, ERROR          Y03207 *
         LA    @F,264                                             0602
         CH    @F,DCBLRECL                                        0602
         BC    08,@9A3                                            0602
*               ERRORS=ERRORS×'00008000'X; /* SET ERROR BIT    Y03207 *
         OC    PARMLIST+32(4),@X87                                0604
*               GOTO NOLOAD1;             /* TO ERROR PROCESS  Y03207 *
         BC    15,NOLOAD1                                         0605
*             END;                       /*                    Y03207 *
*           /* WAS THE DEFAULT OF ALL MEMBERS IN A LOAD MODULE PDS ON *
*           IF SW1='1'B                 /* DO I PROCESS ALL OF        *
*              THEN GOTO ALL;           /* DIRECTORY                  *
@9A3     TM    SWITCHES,B'10000000'                               0607
         BC    01,ALL                                             0608
* PDSREAD:  /* START PROCESSING DIRECTORY                             *
*           /* CHECK FOR LAST ACTIVE ENTRY IN DIRECTORY BLOCK         *
*           IF PDSNAME=ENDNAME          /*  LAST NAME IN DIRECTORY?   *
*              THEN GOTO ENDOFILE;      /* IS IT END OF DIRECTORY?    *
PDSREAD  CLC   10(8,@6),ENDNAME                                   0609
         BC    08,ENDOFILE                                        0610
*           TEMPCNT=INDICATR;           /* SAVE USER COUNT FIELD      *
         MVC   TEMPCNT(1),21(@6)                                  0611
*           GEN;
         XC    USER(2),USER            ZERO OUT USER FIELD
         MVC   USER+1(1),TEMPCNT       MOVE IN USER COUNT FIELD
         NI    USER+1,B'00011111'      TURN OFF HIGH ORDER 3 BYTES
         DS    0H
*           USER=(USER * 2)+12;         /* CALC LENGTH OF DIRC ENTRY  *
         LA    @E,2                                               0613
         MH    @E,USER                                            0613
         AH    @E,@D25                                            0613
         STH   @E,USER                                            0613
*           /* CHECK TO SEE IF TTR IN BLDL LIST MATCHES TTR IN DIRECTOR
*             ENTRY                                                   *
*           IF PDSTTR^=LISTTR(LISTCNT)  /* READ ANOTHER ENTRY IF
*                                         TTRS DO NOT MATCH           *
*              THEN GOTO BUMP;          /* PROCESS ANOTHER ENTRY      *
         LH    @1,LISTCNT                                         0614
         MH    @1,@D24                                            0614
         LA    @E,BLDLIST-2(@1)                                   0614
         CLC   18(3,@6),0(@E)                                     0614
         BC    07,BUMP                                            0615
*              ELSE DO;                 /* TTRS ARE EQUAL             *
*                   /* IS ENTRY IN DIRECTORY AN ALIAS                 *
*                   IF ALIAS='1'B       /* IS ENTRY AN ALIAS          *
*                      THEN DO;         /* PROCESS ALIAS              *
         TM    21(@6),B'10000000'                                 0617
         BC    12,@9A2                                            0617
*                           /* WAS MEMBER GIVEN AN ALIAS              *
*                           IF LISTNAME(LISTCNT)=PDSNAME/* ARE NAMES
*                                         EQUAL                       *
*                              THEN GOTO CHECK;/* SAVE DATA           *
         LA    @A,BLDLIST-10(@1)                                  0619
         CLC   0(8,@A),10(@6)                                     0619
         BC    08,CHECK                                           0620
*                              ELSE DO; /* PROCESS ALIAS IN ENTRY     *
*                                   SW5='1'B;/* TURN ON SAVE ALIAS
*                                         DATA SWITCH                 *
         OI    SWITCHES,B'00001000'                               0622
*                                   GOTO STORIT;/* SAVE ALIAS NAMES   *
         BC    15,STORIT                                          0623
*                                   END;
*                           END;
*                      ELSE DO;         /* IF NOT ALIAS THEN MEMBER   *
*                           /* CHECK IF ENTRY GIVEN IS MEMBER AND
*                             BLDLIST NAME IS ALIAS                   *
*                           IF LISTNAME(LISTCNT)^=PDSNAME/* IS ENTRY
*                                         AN ALIAS                    *
*                              THEN DO; /* PROCESS MEMBER AS ALIAS    *
@9A2     LH    @1,LISTCNT                                         0627
         MH    @1,@D24                                            0627
         LA    @A,BLDLIST-10(@1)                                  0627
         CLC   0(8,@A),10(@6)                                     0627
         BC    08,@9A0                                            0627
*                                   ASTERISK(ALCNT,2)='*';/* MARK
*                                         MEMBER IN ALIAS LIST        *
         LH    @3,ALCNT                                           0629
         SLA   @3,1                                               0629
         LA    @A,ALIASLST+127(@3)                                0629
         MVI   0(@A),C'*'                                         0629
*                                   SW5='1'B;/*STORE IN ALIAS LIST    *
         OI    SWITCHES,B'00001000'                               0630
*                                   GOTO SAVATTS; /* GET MODULE
*                                         ATTRIBUTES                  *
         BC    15,SAVATTS                                         0631
*                                   END;
*                           END;
@9A0     EQU   *                                                  0633
*                   END;
@9A1     EQU   *                                                  0634
* CHECK:
*           HEADNAME=PDSNAME;           /* SAVE MEMBER NAME           *
CHECK    MVC   HEADNAME(8),10(@6)                                 0635
*           HEADEP(5:7)=EPADDR;         /* SAVE ENTRY POINT FOR MEMBER*
         MVC   HEADEP+4(3),37(@6)                                 0636
*           ATTRIBUT=MODATTR;           /* SAVE MODULE ATTRIBUTES     *
         MVC   ATTRIBUT(2),30(@6)                                 0637
*           /* CHECK TO SEE IF MEMBER BEING PROCESSED IS IN OVERLAY   *
*           IF TESTBIT(3)=(MODATTR&TESTBIT(3))/*  OVERLAY ATTRIBUTE?  *
*              THEN OVLYFLAG='1'B;      /* TURN ON OVERLAY BIT IN
         MVC   @CTEMP2(1),TESTBIT+2                               0638
         NC    @CTEMP2(1),30(@6)                                  0638
         CLC   @CTEMP2(1),TESTBIT+2                               0638
         BC    07,@99F                                            0638
*                                          PARMLIST                   *
         OI    PARMLIST+20,B'01000000'                            0639
*           MODSIZE(2:4)=MAINSTOR;      /* SAVE MODULE SIZE           *
@99F     MVC   PARMLIST+65(3),32(@6)                              0640
*           /* CHECK FOR NOT-EDITABLE ATTRIBUTE TO BYPASS HMBLKXRF    *
*           IF TESTBIT(5)=(MODATTR(2)&TESTBIT(5))/* NOT-EDITABLE?     *
*              THEN DO;                 /* PROCESS NOT-EDITABLE       *
         MVC   @CTEMP2(1),TESTBIT+4                               0641
         NC    @CTEMP2(1),31(@6)                                  0641
         CLC   @CTEMP2(1),TESTBIT+4                               0641
         BC    07,@99E                                            0641
*                   NOTEDIT='1'B;       /* INDICATE NOT-EDITABLE      *
         OI    PARMLIST+20,B'00100000'                            0643
*                   TXTTR=TTRTEXT;      /* SAVE 1ST TXT TTR           *
         MVC   PARMLIST+52(3),22(@6)                              0644
*                   TXTLEN=FSTXTLEN;    /* SAVE 1ST TXT LENGTH        *
         MVC   PARMLIST+55(2),35(@6)                              0645
*                   /* CHECK FOR RLD RECORDS                          *
*                   IF TESTBIT(4)=(MODATTR(2) & TESTBIT(4))
*                      THEN NORLD='1'B; /* INDICATE NO RLD RECORDS    *
         MVC   @CTEMP2(1),TESTBIT+3                               0646
         NC    @CTEMP2(1),31(@6)                                  0646
         CLC   @CTEMP2(1),TESTBIT+3                               0646
         BC    07,@99D                                            0646
         OI    PARMLIST+20,B'00010000'                            0647
         BC    15,@99C                                            0648
*                      ELSE NORLD='0'B; /* INDICATE RLD RECORDS       *
@99D     NI    PARMLIST+20,B'11101111'                            0648
*                   /* CHECK FOR LISTLOAD AND XREF OPTION             *
*                   IF XREF='0'B        /* XREF OPTION?               *
*                      & LISTLOAD='1'B  /* LISTLOAD OPTION?           *
*                      THEN DO;         /* XREF WAS GIVEN             *
@99C     TM    OPTNMAP+1,B'10000000'                              0649
         BC    05,@99B                                            0649
         TM    OPTNMAP,B'10000000'                                0649
         BC    12,@99A                                            0649
*                           SW3='1'B;   /* BYPASS XREF PROCESSING     *
         OI    SWITCHES,B'00100000'                               0651
*                           ERRORS=ERRORS × '04'X;/* SET UP MESSAGE   *
         OI    PARMLIST+32,X'04'                                  0652
*                           END;
*                   END;
@99A     EQU   *                                                  0654
@99B     EQU   *                                                  0654
* SAVATTS:
*           /* CHECK WHAT LINKAGE EDITOR WAS USED TO PROCESS MODULE   *
*           IF TESTBIT(2)=(MODATTR(2)&TESTBIT(2))/* ZERO ORIGIN?      *
*              THEN DO;                 /* PROCESS ZERO ORIGIN FURTHER*
@99E     EQU   *                                                  0655
SAVATTS  MVC   @CTEMP2(1),TESTBIT+1                               0655
         NC    @CTEMP2(1),31(@6)                                  0655
         CLC   @CTEMP2(1),TESTBIT+1                               0655
         BC    07,@999                                            0655
*                   /* CHECK FOR AOS LINKAGE EDITOR PROCESSING        *
*                   IF AOSLKED='1'B     /* AOS LINKAGE EDITOR?        *
*                      THEN DO;         /* INDICATE AOS LINKAGE EDITOR*
         TM    40(@6),B'10000000'                                 0657
         BC    12,@998                                            0657
*                           SW8='1'B;   /* AOS LINKAGE EDITOR USED    *
         OI    SWITCHES,B'00000001'                               0659
*                           /* CHECK FOR PAGE ALIGNMENT               *
*                           IF PAGALGN='1'B/* PAGE ALIGNMENT NEEDED?  *
*                              THEN SW9='1'B;/* INDICATE PAGE ALIGN.  *
         TM    40(@6),B'00100000'                                 0660
         BC    12,@997                                            0660
         OI    SWITCHES+1,B'10000000'                             0661
*                           /* APF DATA PRESENT?                      *
*                           IF APFBIT='1'B/* APF DATA?                *
*                              THEN SW10='1'B;/* INDICATE APF DATA    *
@997     TM    40(@6),B'00001000'                                 0662
         BC    12,@996                                            0662
         OI    SWITCHES+1,B'01000000'                             0663
*                           END;
@996     EQU   *                                                  0664
*                   END;
@998     EQU   *                                                  0665
*           /* CHECK FOR LENGTH OF PDS ENTRY IF IT IS SCATTER         *
*           IF TESTBIT(6)=(MODATTR&TESTBIT(6))/* SCATTER ATTRIBUTE?   *
*              THEN DO;                 /* PROCESS SCATTER DATA       *
@999     MVC   @CTEMP2(1),TESTBIT+5                               0666
         NC    @CTEMP2(1),30(@6)                                  0666
         CLC   @CTEMP2(1),TESTBIT+5                               0666
         BC    07,@995                                            0666
*                   SCATLEN=SCATDATA;   /* SAVE SCATTER DATA FOR
*                                         HMBLKLDM                    *
         MVC   PARMLIST+28(4),43(@6)                              0668
*                   /* CHECK IF SCATTER, REENTRANT  & ALIAS           *
*                   IF TESTBIT(1)=(MODATTR&TESTBIT(1))/* REENTRANT?   *
*                      & ALIAS='1'B     /* IS IT AN ALIAS?            *
*                      THEN GOTO SAVLEN;/* GET PDS ENTRY LENGTH       *
         MVC   @CTEMP2(1),TESTBIT                                 0669
         NC    @CTEMP2(1),30(@6)                                  0669
         CLC   @CTEMP2(1),TESTBIT                                 0669
         BC    07,@994                                            0669
         TM    21(@6),B'10000000'                                 0669
         BC    03,SAVLEN                                          0670
*                   /* CHECK IF IT IS SCATTER,REUSABLE AND AN ALIAS   *
*                   IF TESTBIT(2)=(MODATTR&TESTBIT(2))/* REUSABLE?    *
*                      & ALIAS='1'B       /* AND AN ALIAS?            *
*                      THEN DO;         /* PROCESS SCATTER WITH ALIAS *
@993     EQU   *                                                  0671
@994     MVC   @CTEMP2(1),TESTBIT+1                               0671
         NC    @CTEMP2(1),30(@6)                                  0671
         CLC   @CTEMP2(1),TESTBIT+1                               0671
         BC    07,@992                                            0671
         TM    21(@6),B'10000000'                                 0671
         BC    12,@991                                            0671
* SAVLEN:
*                           ACCUM=52;   /* LENGTH OF PDS ENTRY        *
SAVLEN   LA    @F,52                                              0673
         STH   @F,ACCUM                                           0673
*                           GOTO SSITEST;/* CHECK FOR SSI DATA        *
         BC    15,SSITEST                                         0674
*                           END;
*                      ELSE DO;         /* PROCESS SCATTER ONLY       *
@991     EQU   *                                                  0676
*                      /* CHECK IF AOS CREATED                        *
*                      IF AOSLKED='1'B  /* AOS-EDITOR USED?           *
*                         & ALIAS='1'B  /* ALIAS?                     *
*                         THEN ACCUM=52;/* YES- ALIAS                 *
@992     TM    40(@6),B'10000000'                                 0677
         BC    12,@98F                                            0677
         TM    21(@6),B'10000000'                                 0677
         BC    12,@98E                                            0677
         LA    @F,52                                              0678
         STH   @F,ACCUM                                           0678
*                      IF AOSLKED='1'B  /* AOS-EDITOR USED?           *
*                         & SSIBIT^='1'B/* NO SSI DATA?               *
*                         THEN ACCUM=41;/* AOS LENGTH                 *
@98E     EQU   *                                                  0679
@98F     TM    40(@6),B'10000000'                                 0679
         BC    12,@98D                                            0679
         TM    40(@6),B'00010000'                                 0679
         BC    01,@98C                                            0679
         LA    @F,41                                              0680
         STH   @F,ACCUM                                           0680
         BC    15,@98B                                            0681
*                         ELSE ACCUM=42;/* OS LENGTH                  *
@98C     EQU   *                                                  0681
@98D     LA    @F,42                                              0681
         STH   @F,ACCUM                                           0681
*                           GOTO SSITEST;/* CHECK FOR SSI DATA        *
         BC    15,SSITEST                                         0682
*                           END;
*                   END;
@990     EQU   *                                                  0684
*           /* CHECK IF ENTRY IS REENTRANT  AND ALIAS                 *
*           IF TESTBIT(1)=(MODATTR&TESTBIT(1))/* IS IT REENTRANT?     *
*              & ALIAS='1'B             /* IS IT AN ALIAS?            *
*              THEN DO;                 /* PROCESS REUSABLE ALIAS     *
@995     MVC   @CTEMP2(1),TESTBIT                                 0685
         NC    @CTEMP2(1),30(@6)                                  0685
         CLC   @CTEMP2(1),TESTBIT                                 0685
         BC    07,@98A                                            0685
         TM    21(@6),B'10000000'                                 0685
         BC    12,@989                                            0685
*                   ACCUM=44;           /* GET PDS ENTRY LENGTH       *
         LA    @F,44                                              0687
         STH   @F,ACCUM                                           0687
*                   GOTO SSITEST;       /* CHECK FOR SSI DATA         *
         BC    15,SSITEST                                         0688
*                   END;
*           /* CHECK IF IT IS REUSABLE AND AN ALIAS                   *
*           IF TESTBIT(2)=(MODATTR&TESTBIT(2))/* IS IT REUSABLE?      *
*              & ALIAS='1'B             /* AND AN ALIAS?              *
*              THEN ACCUM=44;           /* LENGTH OF PDS ENTRY        *
@989     EQU   *                                                  0690
@98A     MVC   @CTEMP2(1),TESTBIT+1                               0690
         NC    @CTEMP2(1),30(@6)                                  0690
         CLC   @CTEMP2(1),TESTBIT+1                               0690
         BC    07,@988                                            0690
         TM    21(@6),B'10000000'                                 0690
         BC    12,@987                                            0690
         LA    @F,44                                              0691
         STH   @F,ACCUM                                           0691
         BC    15,@986                                            0692
*              /* CHECK FOR AOS CREATION                              *
*             ELSE DO;
@987     EQU   *                                                  0692
*                  IF AOSLKED='1'B      /* AOS-EDITOR USED?           *
*                      & ALIAS='1'B     /* ALIAS?                     *
*                      THEN ACCUM=44;   /* AOS LENGTH                 *
@988     TM    40(@6),B'10000000'                                 0693
         BC    12,@985                                            0693
         TM    21(@6),B'10000000'                                 0693
         BC    12,@984                                            0693
         LA    @F,44                                              0694
         STH   @F,ACCUM                                           0694
*                  IF AOSLKED='1'B      /* AOS EDITOR USED?           *
*                     & SSIBIT^='1'B    /* NO SSI DATA?               *
*                     THEN ACCUM=33;    /* AOS LENGTH                 *
@984     EQU   *                                                  0695
@985     TM    40(@6),B'10000000'                                 0695
         BC    12,@983                                            0695
         TM    40(@6),B'00010000'                                 0695
         BC    01,@982                                            0695
         LA    @F,33                                              0696
         STH   @F,ACCUM                                           0696
         BC    15,@981                                            0697
*                     ELSE ACCUM=34;    /* OS LENGTH                  *
@982     EQU   *                                                  0697
@983     LA    @F,34                                              0697
         STH   @F,ACCUM                                           0697
*                  IF ALIAS='1'B        /* ALIAS?              OY09530*
*                     THEN ACCUM=44;    /* AOS LENGTH          OY09530*
@981     TM    21(@6),B'10000000'                                 0698
         BC    12,@980                                            0698
         LA    @F,44                                              0699
         STH   @F,ACCUM                                           0699
*                  END;
@980     EQU   *                                                  0700
* SSITEST:
*           /* CHECK FOR SSI DATA BY COMPARING LENGTH CALCULATED WITH
*             USER DATA COUNT WITH LENGTH FOUND BY CHECKING ATTRIBUTES*
*           /* CHECK FOR AOS LOAD MODULE                              *
*           IF SW8='1'B                 /* AOS LOAD MODULE?           *
*              /* CHECK FOR SSI CODE                                  *
*              THEN IF SSIBIT='1'B      /* SSI DATA PRESENT?          *
@986     EQU   *                                                  0701
SSITEST  TM    SWITCHES,B'00000001'                               0701
         BC    12,@97F                                            0701
*                      THEN GOTO COLLECT;/* PROCESS SSI               *
         TM    40(@6),B'00010000'                                 0702
         BC    01,COLLECT                                         0703
*                      /* CHECK IF APF DATA PRESENT                   *
*                      ELSE IF SW10='1'B/* APF DATA PRESENT?          *
*                              THEN DO; /* START PROCESSING IT        *
         TM    SWITCHES+1,B'01000000'                             0704
         BC    12,@97E                                            0704
*                                   ACCUM=ACCUM+10;/* ADJUST PTR FOR
*                                                    DIRECTORY KEY    *
         LA    @F,10                                              0706
         AH    @F,ACCUM                                           0706
         STH   @F,ACCUM                                           0706
*                                   R6=R6+ACCUM;/* POINT TO APF LENGTH*
         AH    @6,ACCUM                                           0707
*                                   GOTO GETAPF;/* CONVERT TO PRINT   *
         BC    15,GETAPF                                          0708
*                                   END;
*           IF USER > ACCUM             /* IS SSI DATA IN ENTRY       *
*              THEN DO;                 /* GET SSI DATA               *
@97E     EQU   *                                                  0710
@97F     LH    @F,ACCUM                                           0710
         CH    @F,USER                                            0710
         BC    10,@97D                                            0710
* COLLECT:
*                   SW6='1'B;           /* TURN ON SSI SWITCH         *
COLLECT  OI    SWITCHES,B'00000100'                               0712
*                   ACCUM=ACCUM+10;     /* ADJUST POINTER             *
         LA    @F,10                                              0713
         AH    @F,ACCUM                                           0713
         STH   @F,ACCUM                                           0713
*                   R6=R6+ACCUM;        /* SET UP POINTER TO SSI DATA *
         AH    @6,ACCUM                                           0714
*                   SSI(5:8)=R6->SSIDATA;/* SAVE SSI DATA             *
         MVC   SSI+4(4),0(@6)                                     0715
*                   /* CHECK FOR APF DATA                             *
*                   IF SW8='1'B         /* AOS LOAD MODULE?           *
*                      & SW10='1'B      /* APF DATA PRESENT?          *
*                      THEN DO;         /* PROCESS APF DATA           *
         TM    SWITCHES,B'00000001'                               0716
         BC    12,@97C                                            0716
         TM    SWITCHES+1,B'01000000'                             0716
         BC    12,@97B                                            0716
*                           R6=R6+4;    /* POINT TO APF LENGTH IF THER*
         AH    @6,@D14                                            0718
* GETAPF:
*                           WORKAREA=' ';/* BLANK OUT WORKAREA        *
GETAPF   MVI   WORKAREA,C' '                                      0719
         MVC   WORKAREA+1(7),WORKAREA                             0719
*                           WORKAREA(7)=APFCODE;/* GET APF CODE       *
         MVC   WORKAREA+6(1),1(@6)                                0720
*                           GENERATE;
         UNPK  HEXDATA(9),WORKAREA+6(2) UNPACK APF CODE
         NC    HEXDATA(8),ZONEOFF
         TR    HEXDATA(8),HEXCHAR      TRANSLATE TO EBCIDIC
         DS    0H
*                           SW10='1'B;  /* TURN ON APF INDICATOR      *
         OI    SWITCHES+1,B'01000000'                             0722
*                           APFDATA=HEXDATA;/* SAVE APF DATA TO PRINT *
         MVC   APFDATA(8),HEXDATA                                 0723
*                           IF SW6='1'B /* SSI DATA PRESENT?          *
*                              THEN R6=R6-4;/* MINUS SSI LENGTH       *
         TM    SWITCHES,B'00000100'                               0724
         BC    12,@97A                                            0724
         SH    @6,@D14                                            0725
*                           END;
@97A     EQU   *                                                  0726
*                   R6=R6-ACCUM;        /* RESET R6 ADDRESS TO BUFF   *
@97B     EQU   *                                                  0727
@97C     SH    @6,ACCUM                                           0727
*                   END;
* STORIT:
*           /* CHECK TO SEE IF AN ENTRY SHOULD BE MADE TO ALIAS LIST  *
*           IF SW5='1'B                 /* SHOULD PDSNAME BE PUT IN
*                                         ALIASLST?                   *
*              THEN DO;                 /* ENTER ALIAS DATA           *
@97D     EQU   *                                                  0729
STORIT   TM    SWITCHES,B'00001000'                               0729
         BC    12,@979                                            0729
*                   ALNAME(ALCNT)=PDSNAME;/* SAVE ALIAS NAME          *
         LH    @1,ALCNT                                           0731
         SLA   @1,3                                               0731
         LA    @A,ALIASLST-8(@1)                                  0731
         MVC   0(8,@A),10(@6)                                     0731
*                   ALEPADDR(ALCNT,2:4)=EPADDR;/* SAVE ALIAS ENTRY
*                                         ADDRESS                     *
         LA    @A,ALIASLST+153(@1)                                0732
         MVC   0(3,@A),37(@6)                                     0732
*                   ALCNT=ALCNT+1;      /* POINT TO NEXT  AVAILABLE
*                                         ENTRY IN ARRAY              *
         LA    @F,1                                               0733
         AH    @F,ALCNT                                           0733
         STH   @F,ALCNT                                           0733
*                   SW5='0'B;           /* TURN OFF SWITCH 5          *
         NI    SWITCHES,B'11110111'                               0734
*                   END;
* BUMP:
*           /* CHECK FOR END OF DIRECTORY BLOCK                       *
*           IF KEYNAME=PDSNAME          /* IS IT LAST ENTRY?          *
*              THEN DO;                 /* REPOSITION DIRECTORY FOR
@979     EQU   *                                                  0736
BUMP     L     @1,PARMLIST+24                                     0736
         CLC   0(8,@1),10(@6)                                     0736
         BC    07,@978                                            0736
*                                         ANOTHER READ                *
*                   R6=BUFF;            /* RESET DIRECTORY POINTER    *
         L     @6,PARMLIST+24                                     0738
*                   GOTO SKIP;          /* READ ANOTHER DIRECTORY BLK *
         BC    15,SKIP                                            0739
*                   END;
*              ELSE R6=R6+USER;         /* POSITION DIRECTORY POINTER *
@978     AH    @6,USER                                            0741
*           GOTO PDSREAD;               /* PROCESS ANOTHER ENTRY      *
         BC    15,PDSREAD                                         0742
*           END;
*   /******************************************************************
*   /*  B E G I N   L I S T O B J  O P E R A T I O N                  *
*   /******************************************************************
*   /* CHECK TO SEE IF OBJECT MODULE DATA SET IS PARTITIONED          *
*     IF PO='1'B                        /* IS IT A PARTITIONED DATA   *
*        THEN GOTO OBJPDS;              /* SET                        *
@9A6     TM    OPTNMAP+1,B'00100000'                              0744
         BC    01,OBJPDS                                          0745
* OBJSEQ:
*     DCBDSORG='40'X;                   /* MAKE PODCB SEQUENTIAL      *
OBJSEQ   MVI   DCBDSORG,X'40'                                     0746
*     GEN;                        /* ISSUE OPEN AND GETBUF      */
         NI    DCBMACR1,X'FF'-DCBMRPT1 TURN OFF POINT  OPTION    YM5740
*                                      BIT IN DCB MACRF FIELD    YM5740
         OPEN  PODCB,MF=(E,OPEN2)      OPEN PODCB SEQUENTIAL
         TM    DCBOFLGS,X'10'          CHECK FOR SUCCESSFUL OPEN
         BZ    NOOPEN                  ISSUE ERROR MESSAGE
         GETBUF PODCB,R6               GET A WORK BUFFER
         LTR   R6,R6                   SET CONDITION CODE ON
         BZ    ERRMSG                  SET UP ERROR MESSAGE
         ST    R6,BUFF                 SAVE BUFFER ADDRESS
         DS    0H
*     BLKCNT=(DCBBLKSI/DCBLRECL);       /* GET BLOCKING FACTOR        *
         LH    @E,DCBBLKSI                                        0748
         SRDA  @E,32                                              0748
         LH    @0,DCBLRECL                                        0748
         DR    @E,@0                                              0748
         STH   @F,PARMLIST+22                                     0748
*     DCBKEYLE='00'X;                   /* ZERO OUT KEY LENGTH        *
         MVI   DCBKEYLE,X'00'                                     0749
*   /* CHECK IF LOGICAL RECORD LENGTH IS 80                     M1204 *
*     IF DCBLRECL^=80                   /* IS LRECL = 80?       M1204 *
*        THEN DO;                       /* NO                   M1204 *
         LA    @F,80                                              0750
         CH    @F,DCBLRECL                                        0750
         BC    08,@976                                            0750
*             ERRORS=ERRORS×'0040'X;    /* TURN ON ERROR BIT    M1204 *
         OC    PARMLIST+32(2),@X90                                0752
*             R1=ADDR(PARMLIST);        /* PASS PARMLIST ADDR   M1204 *
         LA    @1,PARMLIST                                        0753
*             CALL HMBLKERR;            /* PROCESS ANY ERR MSGS M1204 *
         L     @F,@V2              ADDRESS OF HMBLKERR            0754
         BALR  @E,@F                                              0754
*             GOTO CLOSEIT;             /* TERMINATE THIS CARD  M1204 *
         BC    15,CLOSEIT                                         0755
*             END;
*     R1=ADDR(PARMLIST);                /* SET UP PARMLIST TO PASS    *
@976     LA    @1,PARMLIST                                        0757
*     CALL HMBLKOBJ;                    /* PROCESS OBJECT MODULE      *
         L     @F,@V3              ADDRESS OF HMBLKOBJ            0758
         BALR  @E,@F                                              0758
*     R1=ADDR(PARMLIST);                /* SET UP PARMLIST TO PASS    *
         LA    @1,PARMLIST                                        0759
*     CALL HMBLKERR;                    /* PROCESS ANY ERRORS         *
         L     @F,@V2              ADDRESS OF HMBLKERR            0760
         BALR  @E,@F                                              0760
*     DCBKEYLE='08'X;                   /* RESET KEY LENGTH           *
         MVI   DCBKEYLE,X'08'                                     0761
*     GOTO CLOSEIT;                     /* CLOSE DCB                  *
         BC    15,CLOSEIT                                         0762
* ALL:
*   /******************************************************************
*   /* PROCESS DEFAULT OF ALL MEMBERS ON A LISTLOAD OR LISTIDR OPTION *
*   /******************************************************************
*   GEN;
ALL      EQU   *                                                  0763
         NOTE  PODCB                   GET ADDR OF MEMBER
         ST    1,ALLADDR               SAVE TTR OF LAST MEM PROCESSED
         DS    0H
*   LISTCNT=0;                          /* INIT. POINTER TO MEMBER
*                                          IN LIST BEING PROCESSED    *
         SR    @F,@F                                              0764
         STH   @F,LISTCNT                                         0764
*   NUMENTS=0;                          /* INIT. NUMBER OF ENTRIES    *
         STH   @F,BLDLIST                                         0765
* GETMEMS:
*    TEMPCNT=INDICATR;                  /* SAVE USER COUNT FIELD      *
GETMEMS  MVC   TEMPCNT(1),21(@6)                                  0766
*    GEN;
         XC    USER(2),USER            ZERO OUT USER FIELD
         MVC   USER+1(1),TEMPCNT       MOVE IN USER COUNT FIELD
         NI    USER+1,B'00011111'      TURN OFF HIGH ORDER 3 BYTES
         DS    0H
*   USER=(USER * 2)+12;                 /* CALC LENGTH OF DIRC ENTRY  *
         LA    @E,2                                               0768
         MH    @E,USER                                            0768
         AH    @E,@D25                                            0768
         STH   @E,USER                                            0768
*   /* CHECK FOR MEMBER AND IF LAST ENTRY IN DIRECTORY BLOCK          *
*   IF ALIAS='0'B &                     /* IS IT A MEMBER?            *
*      PDSNAME^= ENDNAME                /* NOT END OF DIRECTORY       *
*      THEN DO;                         /* PROCESS MEMBER             *
         TM    21(@6),B'10000000'                                 0769
         BC    05,@975                                            0769
         CLC   10(8,@6),ENDNAME                                   0769
         BC    08,@974                                            0769
*           /* CHECK FOR FIRST ENTRY IN BLDLIST                       *
*           IF NUMENTS=0                /* ARE THERE ENTRIES IN LIST? *
*              THEN LISTCNT=LISTCNT+1;  /* POINT INDEX TO FIRST ENTRY *
         SR    @F,@F                                              0771
         CH    @F,BLDLIST                                         0771
         BC    07,@973                                            0771
         LA    @F,1                                               0772
         AH    @F,LISTCNT                                         0772
         STH   @F,LISTCNT                                         0772
*           NUMENTS=NUMENTS+1;          /* KEEP COUNT OF TOTAL AMOUNT
*                                         OF ENTRIES IN BLDLIST       *
@973     LA    @F,1                                               0773
         AH    @F,BLDLIST                                         0773
         STH   @F,BLDLIST                                         0773
*           LISTNAME(NUMENTS)=PDSNAME;  /* SAVE MEMBER NAME           *
         LR    @1,@F                                              0774
         MH    @1,@D24                                            0774
         LA    @A,BLDLIST-10(@1)                                  0774
         MVC   0(8,@A),10(@6)                                     0774
*           END;
*   /* CHECK IF IT IS LAST ENTRY IN DIRECTORY BLOCK                   *
*   IF KEYNAME=PDSNAME                  /* IS IT LAST ENTRY IN BLOCK  *
*      /* CHECK IF THERE WERE ANY ENTRIES IN BLDLIST                  *
*      THEN IF NUMENTS=0                /* WAS A MEMBER ENTERED IN
@974     EQU   *                                                  0776
@975     L     @1,PARMLIST+24                                     0776
         CLC   0(8,@1),10(@6)                                     0776
         BC    07,@972                                            0776
*                                         BLDLIST?                    *
*              THEN DO;                 /* PROCESS NO ENTRIES         *
         SR    @F,@F                                              0777
         CH    @F,BLDLIST                                         0777
         BC    07,@971                                            0777
*                   /* CHECK FOR END OF ACTIVE DIRECTORY BLOCKS       *
*                   IF KEYNAME=ENDNAME  /* END OF ACTIVE DIRECTORY?   *
*                      THEN GOTO CLOSEIT;/* CLOSE DCB                 *
         CLC   0(8,@1),ENDNAME                                    0779
         BC    08,CLOSEIT                                         0780
*                   R6=BUFF;            /* RESET DIRECTORY POINTER    *
         L     @6,PARMLIST+24                                     0781
*                   ALLADDR(4)='01'X;   /* POINT TO NEXT DIRECTORY BLK*
         MVI   ALLADDR+3,X'01'                                    0782
*                   GEN(POINT  PODCB,ALLADDR    POSITION R/W HEAD);
         POINT  PODCB,ALLADDR    POSITION R/W HEAD
         DS    0H
*                   GOTO SKIP;          /* READ A DIRECTORY BLOCK     *
         BC    15,SKIP                                            0784
*                   END;
*              ELSE DO;                 /* MEMBERS WERE ENTERED       *
*                   /* CHECK FOR END OF ACTIVE DIRECTORY BLOCKS       *
*                   IF KEYNAME=ENDNAME  /* IS IT LAST ACTIVE BLOCK?   *
*                      THEN SW7='1'B;   /* INDICATE NO MORE BLOCKS    *
@971     L     @1,PARMLIST+24                                     0787
         CLC   0(8,@1),ENDNAME                                    0787
         BC    07,@96F                                            0787
         OI    SWITCHES,B'00000010'                               0788
*                   SW1='0'B;           /*TURN OFF  ALL OF DIRECTORY  *
@96F     NI    SWITCHES,B'01111111'                               0789
*                   R6=BUFF;            /* RESET DIRECTORY POINTER    *
         L     @6,PARMLIST+24                                     0790
*                   NUMBER=NUMENTS;     /* SAVE NUMBER OF MEMBERS     *
         MVC   NUMBER(2),BLDLIST                                  0791
*                   GEN(POINT  PODCB,DIRORG);/* POSITION R/W HEAD TO
*                                         BEGINNING OF DIRECTORY      *
         POINT  PODCB,DIRORG
         DS    0H
*                   GEN;
         BLDL  PODCB,BLDLIST           CREATE BLDL LIST
         POINT PODCB,DIRORG            POSITION R/W HEAD TO BEGINNING
         DS    0H
*                   GOTO SKIP;          /* READ A DIRECTORY BLOCK     *
         BC    15,SKIP                                            0794
*                   END;
*      ELSE DO;                         /* PROCESS NEXT ENTRY         *
*           R6=R6+USER;                 /* BUMP ENTRY POINTER         *
@972     AH    @6,USER                                            0797
*           GOTO GETMEMS;               /* PROCESS ANOTHER ENTRY      *
         BC    15,GETMEMS                                         0798
*           END;
* ERRMSG:
*   ERRORS=ERRORS × '0002'X;            /* SET UP ERROR MESSAGE       *
@96E     EQU   *                                                  0800
ERRMSG   OC    PARMLIST+32(2),@X91                                0800
*   R1=ADDR(PARMLIST);                  /* SET UP PARMLIST TO PASS    *
         LA    @1,PARMLIST                                        0801
*   CALL HMBLKERR;                      /* PROCESS ERROR MESSAGE      *
         L     @F,@V2              ADDRESS OF HMBLKERR            0802
         BALR  @E,@F                                              0802
*   GOTO CLOSEIT;                       /* CLOSE DCB AND TERMINATE    *
         BC    15,CLOSEIT                                         0803
* ENDOFILE:
*   /******************************************************************
*   /* END OF FILE ON DIRECTORY, PRINT OUT MODULE SUMMARY             *
*   /******************************************************************
*   /* IF MODLIB SPECIFIED IN LISTIDR THEN BYPASS MODULE SUMMARY      *
*   IF MDLB='1'B                        /* MODLIB SPECIFIED           *
*     THEN                              /* YES                        *
ENDOFILE TM    PARMLIST+20,B'00001000'                            0804
*       GO TO FINDIT;                   /* GO POSITION READ WRITE HEAD*
         BC    01,FINDIT                                          0805
*     ELSE;                             /* NULL ELSE                  *
*
*   /* CHECK TO SEE IF ANY SYSTEM STATUS INDEX WAS ENCOUNTERED        *
*   IF SW6='1'B                         /* SSI DATA PRESENT           *
*      THEN DO;                         /* CONVERT TO PRINTABLE HEX   *
         TM    SWITCHES,B'00000100'                               0807
         BC    12,@96D                                            0807
*           GEN;
         UNPK  HEXDATA(9),SSI+4(5)     ZONE SSI DATA
         NC    HEXDATA(8),ZONEOFF      TURN OFF ALL ZONES
         TR    HEXDATA(8),HEXCHAR      GET PRINTABLE HEX CHARACTERS
         DS    0H
*           SSI=HEXDATA;                /* SAVE PRINTABLE SSI DATA    *
         MVC   SSI(8),HEXDATA                                     0810
         BC    15,@96C                                            0812
*           END;
*      ELSE SSI='NONE';                 /* INDICATE NO SSI DATA       *
@96D     MVC   SSI(4),@C51                                        0812
         MVI   SSI+4,C' '                                         0812
         MVC   SSI+5(3),SSI+4                                     0812
*   ALCNT=ALCNT-1;                      /* ADJUST ALCNT TO PROPER
*                                         COUNT IN ARRAY              *
@96C     LH    @F,ALCNT                                           0813
         BCTR  @F,0                                               0813
         STH   @F,ALCNT                                           0813
         BC    15,@DO96A                                          0814
*   DO A=ALCNT TO 1 BY -1;
*      WORKAREA=' ';                    /* BLANKOUT WORKAREA          *
@DO96B   MVI   WORKAREA,C' '                                      0815
         MVC   WORKAREA+1(7),WORKAREA                             0815
*      WORKAREA(5:7)=ALEPADDR(A,2:4);   /* PUT ALIAS ADDR IN WORKAREA *
         L     @1,A                                               0816
         SLA   @1,3                                               0816
         LA    @E,ALIASLST+153(@1)                                0816
         MVC   WORKAREA+4(3),0(@E)                                0816
*      GEN;
         UNPK  HEXDATA(8),WORKAREA+4(4) ZONE ALIAS ENTRY POINT
         NC    HEXDATA(7),ZONEOFF      TURN OFF ZONES
         TR    HEXDATA+1(6),HEXCHAR    SAVE PRINTABLE DATA
         DS    0H
*      ALEPADDR(A,3:8)=HEXDATA(2:7);    /* SAVE PRINTABLE ADDRESS     *
         L     @1,A                                               0818
         SLA   @1,3                                               0818
         LA    @A,ALIASLST+154(@1)                                0818
         MVC   0(6,@A),HEXDATA+1                                  0818
*   END;
*   LINE(1:120)=' ';                    /* CLEAR OUTPUT LINE          *
         L     @F,A                                               0819
         BCTR  @F,0                                               0819
@DO96A   ST    @F,A                                               0819
         CH    @F,@D7                                             0819
         BC    10,@DO96B                                          0819
         MVI   OUTLINE+1,C' '                                     0820
         MVC   OUTLINE+2(119),OUTLINE+1                           0820
*   ASCII='1';                          /* SKIP TO NEXT PAGE          *
         MVI   OUTLINE,C'1'                                       0821
*   LINE(35:75)=MODULE;                 /* SET UP MODULE HEADING      *
         MVC   OUTLINE+35(41),MODULE                              0822
*   GEN(PUT   OUTDCB,OUTLINE);          /* PRINT HEADING              *
         PUT   OUTDCB,OUTLINE
         DS    0H
*
*   /* CONVERT ENTRY POINT TO ZONE THEN TO PRINTABLE CHARACTERS       *
*   GEN;
         UNPK  HEXDATA(8),HEADEP+4(4)  ZONE ENTRY POINT FOR MEMBER
         NC    HEXDATA(7),ZONEOFF      TURN OFF ZONES
         TR    HEXDATA+1(6),HEXCHAR    GET PRINTABLE CHARACTERS
         DS    0H
*   HEADEP(3:8)=HEXDATA(2:7);           /* SAVE PRINTABLE ADDR        *
         MVC   HEADEP+2(6),HEXDATA+1                              0825
*   LINE(1:120)=' ';                    /* BLANK OUTPUT LINE          *
         MVI   OUTLINE+1,C' '                                     0826
         MVC   OUTLINE+2(119),OUTLINE+1                           0826
*   ASCII='0';                          /* SKIP 2 LINES BEFORE PRINT  *
         MVI   OUTLINE,C'0'                                       0827
*   LINE(10:22)=NAME;                   /******************************
         MVC   OUTLINE+10(12),NAME                                0828
         MVI   OUTLINE+22,C' '                                    0828
*   LINE(24:31)=HEADNAME;               /* SET UP MEMBER NAME AND     *
         MVC   OUTLINE+24(8),HEADNAME                             0829
*   LINE(61:77)=MAIN;                   /* ENTRY POINT FOR PRINT      *
         MVC   OUTLINE+61(17),MAIN                                0830
*   LINE(79:84)=HEADEP(3:8);            /******************************
         MVC   OUTLINE+79(6),HEADEP+2                             0831
*   GEN(PUT   OUTDCB,OUTLINE);          /* PRINT MEMBER               *
         PUT   OUTDCB,OUTLINE
         DS    0H
*   LINE(1:120)=' ';                    /* BLANK OUTPUT LINE          *
         MVI   OUTLINE+1,C' '                                     0833
         MVC   OUTLINE+2(119),OUTLINE+1                           0833
*   LINE(19:31)=ALIASES;                /* SET UP ALIAS HEADING       *
         MVC   OUTLINE+19(13),ALIASES                             0834
*   LINE(51:106)=SECOND;                /* ALIAS ENTRY POINT HEADING  *
         MVC   OUTLINE+51(56),SECOND                              0835
*   GEN(PUT   OUTDCB,OUTLINE);          /* PRINT ALIAS HEADING        *
         PUT   OUTDCB,OUTLINE
         DS    0H
*   LINE(1:120)=' ';                    /* BLANK OUTPUT LINE          *
         MVI   OUTLINE+1,C' '                                     0837
         MVC   OUTLINE+2(119),OUTLINE+1                           0837
*   DO B=1 TO ALCNT;                    /* PROCESS ALIASES            *
         LA    @F,1                                               0838
         BC    15,@DO966                                          0838
*      LINE(21:28)=ALNAME(B);           /* PUT OUT ALIAS NAME         *
@DO967   L     @1,B                                               0839
         SLA   @1,3                                               0839
         LA    @E,ALIASLST-8(@1)                                  0839
         MVC   OUTLINE+21(8),0(@E)                                0839
*      LINE(29:30)=ASTERISK(B);         /* PRINT OUT MEMBER MARKER    *
         L     @3,B                                               0840
         SLA   @3,1                                               0840
         LA    @E,ALIASLST+126(@3)                                0840
         MVC   OUTLINE+29(2),0(@E)                                0840
*      LINE(68:73)=ALEPADDR(B,3:8);     /* ALIAS ENTRY POINT          *
         LA    @E,ALIASLST+154(@1)                                0841
         MVC   OUTLINE+68(6),0(@E)                                0841
*      GEN(PUT   OUTDCB,OUTLINE);       /* PRINT ALIAS                *
         PUT   OUTDCB,OUTLINE
         DS    0H
*      ASCII=' ';                       /* SKIP ONE LINE              *
         MVI   OUTLINE,C' '                                       0843
*      ALNAME(B)=' ';                   /* BLANK OUT ALIAS NAME       *
         L     @1,B                                               0844
         SLA   @1,3                                               0844
         LA    @A,ALIASLST-8(@1)                                  0844
         MVI   0(@A),C' '                                         0844
         MVC   1(7,@A),0(@A)                                      0844
*      ALEPADDR(B)=' ';                 /* BLANK OUT ENTRY ADDR       *
         LA    @A,ALIASLST+152(@1)                                0845
         MVI   0(@A),C' '                                         0845
         MVC   1(7,@A),0(@A)                                      0845
*      ASTERISK(B)=' ';                 /* BLANK OUT ASTERISK         *
         LA    @A,ALIASLST+126(@3)                                0846
         MVI   0(@A),C' '                                         0846
         MVI   1(@A),C' '                                         0846
*   END;
*   ALCNT=1;                            /* POINT TO BEGINNING OF LIST *
         L     @F,B                                               0847
         AH    @F,@D7                                             0847
@DO966   ST    @F,B                                               0847
         CH    @F,ALCNT                                           0847
         BC    12,@DO967                                          0847
         LA    @F,1                                               0848
         STH   @F,ALCNT                                           0848
*   ASCII='-';                          /* SKIP THREE LINES           *
         MVI   OUTLINE,C'-'                                       0849
*   LINE='-';                           /* SET UP SEPARATOR LINE      *
         MVI   OUTLINE+1,C'-'                                     0850
         MVI   OUTLINE+2,C' '                                     0850
         MVC   OUTLINE+3(118),OUTLINE+2                           0850
*   LINE(2:120)=LINE(1:119);            /* CREATE LINE OF DASHES      *
         MVC   OUTLINE+2(119),OUTLINE+1                           0851
*   GEN(  PUT   OUTDCB,OUTLINE);        /* PRINT A LINE               *
           PUT   OUTDCB,OUTLINE
         DS    0H
*   ASCII='0';                          /* SKIP TWO LINES             *
         MVI   OUTLINE,C'0'                                       0853
*   LINE(1:120)=' ';                    /* BLANK OUTPUT LINE          *
         MVI   OUTLINE+1,C' '                                     0854
         MVC   OUTLINE+2(119),OUTLINE+1                           0854
*   LINE(24:27)='****';                 /* SET UP ASTERISKS           *
         MVC   OUTLINE+24(4),@C93                                 0855
*   LINE(31:65)=LINKAGE;                /* SET UP ATTRIBUTE HEADING   *
         MVC   OUTLINE+31(35),LINKAGE                             0856
*   LINE(69:72)='****';                 /* SET UP ASTERISKS           *
         MVC   OUTLINE+69(4),@C93                                 0857
*   GEN(  PUT   OUTDCB,OUTLINE);        /* PRINT A LINE               *
           PUT   OUTDCB,OUTLINE
         DS    0H
*   LINE(1:120)=' ';                    /* BLANK OUTPUT LINE          *
         MVI   OUTLINE+1,C' '                                     0859
         MVC   OUTLINE+2(119),OUTLINE+1                           0859
*   LINE(17:18)='**';                   /* SET UP ASTERISKS           *
         MVC   OUTLINE+17(2),@C93                                 0860
*   LINE(96:97)='**';                   /* SET UP BIT HEADING         *
         MVC   OUTLINE+96(2),@C93                                 0861
*   DO D=22 TO 82 BY 20;                /* SET UP BIT HEADING         *
         LA    @F,22                                              0862
         ST    @F,D                                               0862
*      LINE(D:D+11)='BIT  STATUS';      /* PUT BIT HEADING OUT        *
@DO963   L     @1,D                                               0863
         LA    @A,OUTLINE(@1)                                     0863
         MVC   0(11,@A),@C94                                      0863
         MVI   11(@A),C' '                                        0863
*   END;
*   GEN(  PUT   OUTDCB,OUTLINE);        /* PRINT A LINE               *
         L     @F,D                                               0864
         AH    @F,@D26                                            0864
@DO962   ST    @F,D                                               0864
         CH    @F,@D27                                            0864
         BC    12,@DO963                                          0864
           PUT   OUTDCB,OUTLINE
         DS    0H
*   LINE(1:120)=' ';                    /* BLANK OUTPUT LINE          *
         MVI   OUTLINE+1,C' '                                     0866
         MVC   OUTLINE+2(119),OUTLINE+1                           0866
*   ASCII='0';                          /* SKIP TWO LINES             *
         MVI   OUTLINE,C'0'                                       0867
*   LINE(23)='0';                       /* PUT OUT BIT ZERO           *
         MVI   OUTLINE+23,C'0'                                    0868
*   LINE(43)='1';                       /* PUT OUT BIT ONE            *
         MVI   OUTLINE+43,C'1'                                    0869
*   LINE(63)='2';                       /* PUT OUT BIT TWO            *
         MVI   OUTLINE+63,C'2'                                    0870
*   LINE(83)='3';                       /* PUT OUT BIT THREE          *
         MVI   OUTLINE+83,C'3'                                    0871
*   LINPTR=26;                          /* SET UP LINE POINTER        *
         LA    @F,26                                              0872
         STH   @F,LINPTR                                          0872
*   DO D=1 TO 4;                        /* PUT OUT FIRST FOUR
*                                         ATTRIBUTES                  *
         LA    @F,1                                               0873
         ST    @F,D                                               0873
*      /* CHECK FOR MODULE ATTRIBUTE AND TAKE PROPER DESCRIPTION      *
*      IF TESTBIT(D)=(ATTRIB1&TESTBIT(D))/* WHAT IS MODULE ATTRIBUTE? *
*         THEN LINE(LINPTR:LINPTR+8)=ATON(D);/* GET ON ATTRIBUTE      *
@DO95F   L     @1,D                                               0874
         LA    @E,TESTBIT-1(@1)                                   0874
         MVC   @CTEMP2(1),0(@E)                                   0874
         NC    @CTEMP2(1),ATTRIBUT                                0874
         CLC   @CTEMP2(1),0(@E)                                   0874
         BC    07,@95B                                            0874
         L     @3,D                                               0875
         MH    @3,@D5                                             0875
         LA    @E,ATNAME-9(@3)                                    0875
         LH    @4,LINPTR                                          0875
         LA    @A,OUTLINE(@4)                                     0875
         MVC   0(9,@A),0(@E)                                      0875
         BC    15,@95A                                            0876
*         ELSE LINE(LINPTR:LINPTR+9)=ATOFF(D);/* GET OFF ATTRIBUTE    *
@95B     L     @1,D                                               0876
         MH    @1,@D5                                             0876
         LA    @E,ATNAME+63(@1)                                   0876
         LH    @3,LINPTR                                          0876
         LA    @A,OUTLINE(@3)                                     0876
         MVC   0(9,@A),0(@E)                                      0876
         MVI   9(@A),C' '                                         0876
*      LINPTR=LINPTR+20;                /* BUMP OUTPUT POINTER BY 20  *
@95A     LA    @F,20                                              0877
         AH    @F,LINPTR                                          0877
         STH   @F,LINPTR                                          0877
*   END;
*   GEN(  PUT   OUTDCB,OUTLINE);        /* PRINT A LINE               *
         L     @F,D                                               0878
         AH    @F,@D7                                             0878
@DO95E   ST    @F,D                                               0878
         CH    @F,@D14                                            0878
         BC    12,@DO95F                                          0878
           PUT   OUTDCB,OUTLINE
         DS    0H
*   ASCII=' ';                          /* SKIP ONE LINE              *
         MVI   OUTLINE,C' '                                       0880
*   LINE(23)='4';                       /* PUT OUT BIT FOUR           *
         MVI   OUTLINE+23,C'4'                                    0881
*   LINE(43)='5';                       /* PUT OUT BIT FIVE           *
         MVI   OUTLINE+43,C'5'                                    0882
*   LINE(63)='6';                       /* PUT OUT BIT SIX            *
         MVI   OUTLINE+63,C'6'                                    0883
*   LINE(83)='7';                       /* PUT OUT BIT SEVEN          *
         MVI   OUTLINE+83,C'7'                                    0884
*   LINPTR=26;                          /* SET UP LINE POINTER        *
         LA    @F,26                                              0885
         STH   @F,LINPTR                                          0885
*   DO D=5 TO 8;                        /* FIND NEXT FOUR  ATTRIBUTES *
         LA    @F,5                                               0886
         ST    @F,D                                               0886
*      /* CHECK FOR MODULE ATTRIBUTE AND TAKE PROPER DESCRIBTION      *
*      IF TESTBIT(D)=(ATTRIB1&TESTBIT(D))/* WHAT IS MODULE ATTRIBUTE? *
*         THEN LINE(LINPTR:LINPTR+8)=ATON(D);/* GET ON ATTRIBUTE      *
@DO959   L     @1,D                                               0887
         LA    @E,TESTBIT-1(@1)                                   0887
         MVC   @CTEMP2(1),0(@E)                                   0887
         NC    @CTEMP2(1),ATTRIBUT                                0887
         CLC   @CTEMP2(1),0(@E)                                   0887
         BC    07,@955                                            0887
         L     @3,D                                               0888
         MH    @3,@D5                                             0888
         LA    @E,ATNAME-9(@3)                                    0888
         LH    @4,LINPTR                                          0888
         LA    @A,OUTLINE(@4)                                     0888
         MVC   0(9,@A),0(@E)                                      0888
         BC    15,@954                                            0889
*         ELSE LINE(LINPTR:LINPTR+9)=ATOFF(D);/* GET OFF ATTRIBUTE    *
@955     L     @1,D                                               0889
         MH    @1,@D5                                             0889
         LA    @E,ATNAME+63(@1)                                   0889
         LH    @3,LINPTR                                          0889
         LA    @A,OUTLINE(@3)                                     0889
         MVC   0(9,@A),0(@E)                                      0889
         MVI   9(@A),C' '                                         0889
*      LINPTR=LINPTR+20;                /* BUMP OUTPUT POINTER BY 20  *
@954     LA    @F,20                                              0890
         AH    @F,LINPTR                                          0890
         STH   @F,LINPTR                                          0890
*   END;
*   GEN(  PUT   OUTDCB,OUTLINE);        /* PRINT A LINE               *
         L     @F,D                                               0891
         AH    @F,@D7                                             0891
@DO958   ST    @F,D                                               0891
         CH    @F,@D6                                             0891
         BC    12,@DO959                                          0891
           PUT   OUTDCB,OUTLINE
         DS    0H
*   LINE(23)='8';                       /* PUT OUT BIT EIGHT          *
         MVI   OUTLINE+23,C'8'                                    0893
*   LINE(43)='9';                       /* PUT OUT BIT NINE           *
         MVI   OUTLINE+43,C'9'                                    0894
*   LINE(63:64)='10';                   /* PUT OUT BIT TEN            *
         MVC   OUTLINE+63(2),@C103                                0895
*   LINE(83:84)='11';                   /* PUT OUT BIT ELEVEN         *
         MVC   OUTLINE+83(2),@C104                                0896
*   LINPTR=26;                          /* SET UP LINE POINTER        *
         LA    @F,26                                              0897
         STH   @F,LINPTR                                          0897
*   DO E=1 TO 4;                        /* FIND SECOND BYTE FIRST
*                                         FOUR ATTRIBUTES             *
         LA    @F,1                                               0898
         ST    @F,E                                               0898
*      /* CHECK FOR MODULE ATTRIBUTE AND TAKE PROPER DESCRIPTION      *
*      IF TESTBIT(E)=(ATTRIB2&TESTBIT(E))/* WHAT IS MODULE ATTRIBUTE? *
*         THEN LINE(LINPTR:LINPTR+8)=SECATON(E);/* GET ON ATTRIBUTE   *
@DO953   L     @1,E                                               0899
         LA    @E,TESTBIT-1(@1)                                   0899
         MVC   @CTEMP2(1),0(@E)                                   0899
         NC    @CTEMP2(1),ATTRIBUT+1                              0899
         CLC   @CTEMP2(1),0(@E)                                   0899
         BC    07,@94F                                            0899
         L     @3,E                                               0900
         MH    @3,@D5                                             0900
         LA    @E,ATNAME+135(@3)                                  0900
         LH    @4,LINPTR                                          0900
         LA    @A,OUTLINE(@4)                                     0900
         MVC   0(9,@A),0(@E)                                      0900
         BC    15,@94E                                            0901
*         ELSE LINE(LINPTR:LINPTR+9)=SECATOFF(E);/* GET OFF ATTRIBUTE *
@94F     L     @1,E                                               0901
         MH    @1,@D5                                             0901
         LA    @E,ATNAME+207(@1)                                  0901
         LH    @3,LINPTR                                          0901
         LA    @A,OUTLINE(@3)                                     0901
         MVC   0(9,@A),0(@E)                                      0901
         MVI   9(@A),C' '                                         0901
*      LINPTR=LINPTR+20;                /* BUMP OUTPUT POINTER BY 20  *
@94E     LA    @F,20                                              0902
         AH    @F,LINPTR                                          0902
         STH   @F,LINPTR                                          0902
*   END;
*   GEN(  PUT   OUTDCB,OUTLINE);        /* PRINT A LINE               *
         L     @F,E                                               0903
         AH    @F,@D7                                             0903
@DO952   ST    @F,E                                               0903
         CH    @F,@D14                                            0903
         BC    12,@DO953                                          0903
           PUT   OUTDCB,OUTLINE
         DS    0H
*   LINE(23:24)='12';                   /* PUT OUT BIT TWELVE         *
         MVC   OUTLINE+23(2),@C105                                0905
*   LINE(43:44)='13';                   /* PUT OUT BIT THIRTEEN       *
         MVC   OUTLINE+43(2),@C106                                0906
*   LINE(63:64)='14';                   /* PUT OUT BIT FOURTEEN       *
         MVC   OUTLINE+63(2),@C107                                0907
*   LINE(83:84)='15';                   /* PUT OUT BIT FIFTEEN        *
         MVC   OUTLINE+83(2),@C108                                0908
*   LINPTR=26;                          /* SET UP LINE POINTER        *
         LA    @F,26                                              0909
         STH   @F,LINPTR                                          0909
*   DO E=5 TO 8;                        /*FIND LAST FOUR ATTRIBUTES   *
         LA    @F,5                                               0910
         ST    @F,E                                               0910
*      /* CHECK FOR MODULE ATTRIBUTE AND TAKE PROPER DESCRIPTION      *
*      IF TESTBIT(E)=(ATTRIB2&TESTBIT(E))/* WHAT IS MODULE ATTRIBUTE? *
*         THEN LINE(LINPTR:LINPTR+8)=SECATON(E);/* GET ON ATTRIBUTE   *
@DO94D   L     @1,E                                               0911
         LA    @E,TESTBIT-1(@1)                                   0911
         MVC   @CTEMP2(1),0(@E)                                   0911
         NC    @CTEMP2(1),ATTRIBUT+1                              0911
         CLC   @CTEMP2(1),0(@E)                                   0911
         BC    07,@949                                            0911
         L     @3,E                                               0912
         MH    @3,@D5                                             0912
         LA    @E,ATNAME+135(@3)                                  0912
         LH    @4,LINPTR                                          0912
         LA    @A,OUTLINE(@4)                                     0912
         MVC   0(9,@A),0(@E)                                      0912
         BC    15,@948                                            0913
*         ELSE LINE(LINPTR:LINPTR+9)=SECATOFF(E);/* GET OFF ATTRIBUTE *
@949     L     @1,E                                               0913
         MH    @1,@D5                                             0913
         LA    @E,ATNAME+207(@1)                                  0913
         LH    @3,LINPTR                                          0913
         LA    @A,OUTLINE(@3)                                     0913
         MVC   0(9,@A),0(@E)                                      0913
         MVI   9(@A),C' '                                         0913
*      LINPTR=LINPTR+20;                /* BUMP OUTPUT POINTER BY 20  *
@948     LA    @F,20                                              0914
         AH    @F,LINPTR                                          0914
         STH   @F,LINPTR                                          0914
*   END;
*   GEN(  PUT   OUTDCB,OUTLINE);        /* PRINT A LINE               *
         L     @F,E                                               0915
         AH    @F,@D7                                             0915
@DO94C   ST    @F,E                                               0915
         CH    @F,@D6                                             0915
         BC    12,@DO94D                                          0915
           PUT   OUTDCB,OUTLINE
         DS    0H
*   ASCII='0';                          /* SKIP ONE LINE              *
         MVI   OUTLINE,C'0'                                       0917
*   LINE='-';                           /* SET UP SEPARATOR LINE      *
         MVI   OUTLINE+1,C'-'                                     0918
         MVI   OUTLINE+2,C' '                                     0918
         MVC   OUTLINE+3(118),OUTLINE+2                           0918
*   LINE(2:120)=LINE(1:119);            /* CREATE LINE OF DASHES      *
         MVC   OUTLINE+2(119),OUTLINE+1                           0919
*   GEN(  PUT   OUTDCB,OUTLINE);        /* PRINT A LINE               *
           PUT   OUTDCB,OUTLINE
         DS    0H
*   ASCII='-';                          /* SKIP 3 LINES               *
         MVI   OUTLINE,C'-'                                       0921
*   LINE(1:120)=' ';                    /* BLANK OUTPUT LINE          *
         MVI   OUTLINE+1,C' '                                     0922
         MVC   OUTLINE+2(119),OUTLINE+1                           0922
*   LINE(37:47)=MODSSI;                 /* PUT OUT SSI HEADING        *
         MVC   OUTLINE+37(11),MODSSI                              0923
*   LINE(50:57)=SSI;                    /* PUT OUT SSI                *
         MVC   OUTLINE+50(8),SSI                                  0924
*   GEN(PUT   OUTDCB,OUTLINE);          /* PRINT SSI INFORMATION      *
         PUT   OUTDCB,OUTLINE
         DS    0H
*   LINE(1:120)=' ';                    /* BLANK OUTPUT LINE          *
         MVI   OUTLINE+1,C' '                                     0926
         MVC   OUTLINE+2(119),OUTLINE+1                           0926
*   LINE(37:43)='APFCODE';              /* SET UP HEADING             *
         MVC   OUTLINE+37(7),@C109                                0927
*   LINE(50:57)=APFDATA;                /* SET UP APF CODE            *
         MVC   OUTLINE+50(8),APFDATA                              0928
*   ASCII=' ';                          /* SKIP ONE LINE              *
         MVI   OUTLINE,C' '                                       0929
*   GEN(  PUT   OUTDCB,OUTLINE);        /* PRINT APF DATA             *
           PUT   OUTDCB,OUTLINE
         DS    0H
*   /* CHECK IF ANY AOS MESSAGES ARE REQUIRED                         *
*   IF SW8='1'B                         /* AOS LINKAGE EDITOR USED    *
*      THEN DO;                         /* PUT OUT ADDITIONAL MESSAGES*
         TM    SWITCHES,B'00000001'                               0931
         BC    12,@947                                            0931
*           ASCII='0';                  /* SKIP TWO LINES             *
         MVI   OUTLINE,C'0'                                       0933
*           LINE(20:60)='*****LOAD MODULE PROCESSED BY VS LINKAGE';
         MVC   OUTLINE+20(40),@C110                               0934
         MVI   OUTLINE+60,C' '                                    0934
*                                       /*                     YM3474 *
*           LINE(61:66)='EDITOR';       /* SET UP MESSAGE             *
         MVC   OUTLINE+61(6),@C111                                0935
*           GEN(PUT   OUTDCB,OUTLINE);  /* PRINT OUT MESSAGE          *
         PUT   OUTDCB,OUTLINE
         DS    0H
*           /* CHECK FOR ADDITIONAL MESSAGES                          *
*           IF SW9='1'B                 /* PAGE MESSAGE NEEDED        *
*              THEN DO;                 /* SET UP PAGE BOUNDARY MESS. *
         TM    SWITCHES+1,B'10000000'                             0937
         BC    12,@946                                            0937
*                   ASCII=' ';          /* SPACE 1 LINE               *
         MVI   OUTLINE,C' '                                       0939
*                   LINE(20:67)='***PAGE ALIGNMENT REQUIRED';
         MVC   OUTLINE+20(26),@C112                               0940
         MVI   OUTLINE+46,C' '                                    0940
         MVC   OUTLINE+47(21),OUTLINE+46                          0940
*                   GEN(PUT   OUTDCB,OUTLINE);/* PRINT PAGE MESSAGE   *
         PUT   OUTDCB,OUTLINE
         DS    0H
*                   END;
*           END;
@946     EQU   *                                                  0943
*   RESTRICT (R4);
@947     EQU   *                                                  0944
* FINDIT:
*   /******************************************************************
*   /* POSITION READ/WRITE HEAD AND PASS CONTROL TO PROCESSING ROUTINE*
*   /******************************************************************
*   R4=(LISTCNT-1)*14;                  /* POSITIONING FOR R/W HEAD   *
FINDIT   LH    @F,LISTCNT                                         0945
         BCTR  @F,0                                               0945
         MH    @F,@D24                                            0945
         LR    @4,@F                                              0945
*   GEN(FIND  PODCB,LTTR(R4),C);        /* POSITION R/W HEAD FOR      *
         FIND  PODCB,LTTR(R4),C
         DS    0H
*   RELEASE (R4);
*                                       /* NEXT ROUTINE               *
*   MEMNAME=LISTNAME(LISTCNT,1:8);      /* PASS MEMBER NAME FOR TITLE *
         LH    @1,LISTCNT                                         0948
         MH    @1,@D24                                            0948
         LA    @E,BLDLIST-10(@1)                                  0948
         MVC   PARMLIST+36(8),0(@E)                               0948
*   /* CHECK FOR LISTIDR OPTION IN ORDER TO CALL HMBLKIDR             *
*   IF LISTIDR='1'B                     /* IS IT IDR OPERATION?       *
*      THEN GOTO IDRCHK;                /* CALL HMBLKIDR              *
         TM    OPTNMAP,B'00100000'                                0949
         BC    01,IDRCHK                                          0950
*   /* CHECK IF MODLIST OUTPUT WAS SPECIFIED AND CALL HMBLKLDM        *
*   IF MODLIST='0'B                     /* IS IT A MODLIST OPERATION? *
*      & SW2='0'B                       /* IS BYPASS HMBLKLDM ON?     *
*      THEN DO;                         /* GOTO HMBLKLDM              *
         TM    OPTNMAP,B'00000001'                                0951
         BC    05,@945                                            0951
         TM    SWITCHES,B'01000000'                               0951
         BC    05,@944                                            0951
*           R1=ADDR(PARMLIST);          /* STORE PARAMETER ADDRESS    *
         LA    @1,PARMLIST                                        0953
*           CALL HMBLKLDM;              /* GOTO MODLIST ROUTINE       *
         L     @F,@V4              ADDRESS OF HMBLKLDM            0954
         BALR  @E,@F                                              0954
*           SW2='1'B;                   /* INDICATES MODLIST OUTPUT   *
         OI    SWITCHES,B'01000000'                               0955
*           R1=ADDR(PARMLIST);          /* SAVE PARMLIST ADDR TO PASS *
         LA    @1,PARMLIST                                        0956
*           CALL HMBLKERR;              /* PROCESS ANY ERROR MSGS     *
         L     @F,@V2              ADDRESS OF HMBLKERR            0957
         BALR  @E,@F                                              0957
*           GOTO FINDIT;                /* REPOSITION R/W HEAD        *
         BC    15,FINDIT                                          0958
*           END;
*   /* CHECK IF XREF OUTPUT WAS SPECIFIED AND CALL HMBLKXRF           *
*   IF XREF='0'B                        /* SHOULD HMBLKXRF BE CALLED? *
*      & SW3='0'B                       /* IS HMBLKXRF BYPASS ON?     *
*      THEN DO;                         /* GOTO HMBLKXRF              *
@944     EQU   *                                                  0960
@945     TM    OPTNMAP+1,B'10000000'                              0960
         BC    05,@943                                            0960
         TM    SWITCHES,B'00100000'                               0960
         BC    05,@942                                            0960
*           R1=ADDR(PARMLIST);          /* STORE PARMLIST ADDR        *
         LA    @1,PARMLIST                                        0962
*           CALL HMBLKXRF;              /* GOTO XREF ROUTINE          *
         L     @F,@V5              ADDRESS OF HMBLKXRF            0963
         BALR  @E,@F                                              0963
*           GOTO BITCHK;                /* PROCESS ERROR MESSAGES     *
         BC    15,BITCHK                                          0964
*           END;
*   GOTO BITCHK;                        /* CHECK FOR ERRORS           *
* IDRCHK:
*   /* CHECK IF IDENT OUTPUT FOT LISTIDR WAS SPECIFIED                *
*   IF IDENT='1'B                       /* IS IT AN IDENT OPERATION   *
*      THEN IDRFLAG='1'B;               /* INDICATE IDENT OUTPUT      *
IDRCHK   TM    OPTNMAP+1,B'01000000'                              0967
         BC    12,@941                                            0967
         OI    PARMLIST+20,B'10000000'                            0968
*   R1=ADDR(PARMLIST);                  /* STORE PARMLIST ADDR        *
@941     LA    @1,PARMLIST                                        0969
*   CALL  HMBLKIDR;                     /* GOTO IDR ROUTINE           *
         L     @F,@V6              ADDRESS OF HMBLKIDR            0970
         BALR  @E,@F                                              0970
*   IDRFLAG='0'B;                       /* TURN OFF IDENT OUTPUT      *
         NI    PARMLIST+20,B'01111111'                            0971
* BITCHK:
*   R1=ADDR(PARMLIST);                  /* SAVE PARMLIST ADDR TO PASS *
BITCHK   LA    @1,PARMLIST                                        0972
*   CALL HMBLKERR;                      /* PROCESS ANY ERROR MSGS     *
         L     @F,@V2              ADDRESS OF HMBLKERR            0973
         BALR  @E,@F                                              0973
* OUT:
*   SCATLEN=0;                          /* ZERO OUT SCATTER DATA      *
OUT      SR    @F,@F                                              0974
         ST    @F,PARMLIST+28                                     0974
*   OVLYFLAG='0'B;                      /* TURN OFF OVERLAY BIT       *
         NI    PARMLIST+20,B'10111111'                            0975
*   SSI='NONE';                         /* INITIALIZE SSI TO NONE     *
         MVC   SSI(4),@C51                                        0976
         MVI   SSI+4,C' '                                         0976
         MVC   SSI+5(3),SSI+4                                     0976
*   SW6='0'B;                           /* TURN OFF SSI DATA SWITCH   *
         NI    SWITCHES,B'10011010'                               0977
*   SW3='0'B;                           /* TURN OFF HMBLKXRF BYPASS   *
*   SW2='0'B;                           /* TURN OFF MODLIST BYPASS    *
*   SW8='0'B;                           /* TURN OFF AOS-EDITOR SWITCH *
*   SW9='0'B;                           /* TURN OFF PAGE ALIGNMENT    *
         NI    SWITCHES+1,B'00111111'                             0981
*   SW10='0'B;                          /* TURN OFF APF INDICATOR     *
*   /* CHECK IF ALL OF DIRECTORY IS TO BE PROCESSED                   *
*   IF MEMBER^='1'B                     /* PROCESS ALL OF DIRECTORY?  *
*      THEN DO;                         /* ALL OF DIRECTORY           *
         TM    OPTNMAP,B'00000010'                                0983
         BC    01,@940                                            0983
*           HEADNAME(1:8)=' ';          /* BLANK OUT ENTRY NAME       *
         MVI   HEADNAME,C' '                                      0985
         MVC   HEADNAME+1(7),HEADNAME                             0985
*           HEADEP(1:8)=' ';            /* BLANK OUT ENTRY POINT      *
         MVI   HEADEP,C' '                                        0986
         MVC   HEADEP+1(7),HEADEP                                 0986
*           LISTCNT=LISTCNT+1;          /* BUMP BLDLIST POINTER       *
         LA    @F,1                                               0987
         AH    @F,LISTCNT                                         0987
         STH   @F,LISTCNT                                         0987
*           /* WAS ALL ENTRIES IN BLDLIST PROCESSED?                  *
*           IF LISTCNT>NUMENTS          /* DO WE NEED ANOTHER BLDLIST *
*              THEN DO;                 /* CHECK FURTHER              *
         LH    @F,BLDLIST                                         0988
         CH    @F,LISTCNT                                         0988
         BC    10,@93F                                            0988
*                   /* WAS ALL DIRECTORY BLOCKS PROCESSED?            *
*                   IF SW7='1'B         /* LAST DIRECTORY PROCESSED?  *
*                      THEN GOTO CLOSEIT;/* CLOSE DCB                 *
         TM    SWITCHES,B'00000010'                               0990
         BC    01,CLOSEIT                                         0991
*                   SW1='1'B;           /* INDICATE ALL OF DIRECTORY  *
         OI    SWITCHES,B'10000000'                               0992
*                   R6=BUFF;            /* RESET REGISTER 6           *
         L     @6,PARMLIST+24                                     0993
*                   ALLADDR(4)='01'X;   /* SET UP POINT MACRO         *
         MVI   ALLADDR+3,X'01'                                    0994
*                   GEN(POINT  PODCB,ALLADDR);/* PNT TO NEXT DIRECTORY*
         POINT  PODCB,ALLADDR
         DS    0H
*                   GOTO SKIP;          /* READ A DIRECTORY BLOCK     *
         BC    15,SKIP                                            0996
*                   END;
*           END;
*      ELSE  LISTCNT=LISTCNT+1;         /* POINT TO NEXT ENTRY IN
*                                         MEMLIST                     *
@940     LA    @F,1                                               0999
         AH    @F,LISTCNT                                         0999
         STH   @F,LISTCNT                                         0999
*   /* WERE ALL ENTRIES IN BLDLIST PROCESSED                          *
*   IF NUMBER<LISTCNT                   /* ARE ALL MEMBERS IN MEMLIST
*                                         PROCESSED?                  *
*      THEN GOTO CLOSEIT;               /* CLOSE DCB                  *
@93E     LH    @F,LISTCNT                                         1000
         CH    @F,NUMBER                                          1000
         BC    02,CLOSEIT                                         1001
*   HEADNAME(1:8)=' ';                  /* CLEAR OUT MEMBER NAME      *
         MVI   HEADNAME,C' '                                      1002
         MVC   HEADNAME+1(7),HEADNAME                             1002
*   HEADEP(1:8)=' ';                    /* CLEAR OUT ENTRY ADDRESS    *
         MVI   HEADEP,C' '                                        1003
         MVC   HEADEP+1(7),HEADEP                                 1003
*   GEN(  POINT PODCB,DIRORG);          /* REPOSITION TO BEGINNING OF
*                                         DIRECTORY                   *
           POINT PODCB,DIRORG
         DS    0H
*   R6=BUFF;                            /* RESET BUFFER ADDRESS       *
         L     @6,PARMLIST+24                                     1005
*   GOTO BLDCH;                         /* READ DIRECTORY             *
         BC    15,BLDCH                                           1006
* OBJPDS:
*   /* CHECK IF LOGICAL RECORD LENGTH IS 80                           *
*   IF DCBLRECL^=80 × DCBRECFM='C0'X    /* IS LRECL=80 OR    @ZA15060 *
*      THEN DO;                         /* RECFM UNDEFINED   @ZA15060 *
OBJPDS   LA    @F,80                                              1007
         CH    @F,DCBLRECL                                        1007
         BC    07,@93D                                            1007
         CLI   DCBRECFM,X'C0'                                     1007
         BC    07,@93C                                            1007
*           ERRORS=ERRORS×'0040'X;      /* TURN ON ERROR BIT          *
@93D     OC    PARMLIST+32(2),@X90                                1009
*           R1=ADDR(PARMLIST);          /* SAVE PARMLIST ADDR TO PASS *
         LA    @1,PARMLIST                                        1010
*           CALL HMBLKERR;              /* PROCESS ANY ERROR MSGS     *
         L     @F,@V2              ADDRESS OF HMBLKERR            1011
         BALR  @E,@F                                              1011
         BC    15,@93B                                            1013
*           END;
*      ELSE                             /* LOGICAL RECORD LENGTH GOOD *
*           DO;                     /* AND RECFM MUST BE FB  @ZA15060 *
*           BLKCNT=(DCBBLKSI/DCBLRECL); /* RECORDS PER BLOCK @ZA33776 *
@93C     LH    @E,DCBBLKSI                                        1014
         SRDA  @E,32                                              1014
         LH    @0,DCBLRECL                                        1014
         DR    @E,@0                                              1014
         STH   @F,PARMLIST+22                                     1014
*              SW4='1'B;                /* TURN ON BLDL SWITCH        *
         OI    SWITCHES,B'00010000'                               1015
*              GOTO SORT;               /* SORT MEMBERS FOR BLDL      *
         BC    15,SORT                                            1016
*           END;
* CLOSEIT:  /* TERMINATE PROCESSING OF CONTROL CARD                   *
*         R6=BUFF;                      /* BUFFER ADDR                *
@93B     EQU   *                                                  1018
CLOSEIT  L     @6,PARMLIST+24                                     1018
*           GEN;
         FREEBUF PODCB,R6              FREE BUFFER
         CLOSE PODCB,MF=(E,CLOSR2)     CLOSE PODCB
         FREEPOOL PODCB                RELEASE BUFFER STORAGE
         DS    0H
*         DCBDSORG='02'X;               /* MAKE PODCB PARTITIONED     *
         MVI   DCBDSORG,X'02'                                     1020
*           /* CHECK TO SEE IF FREEMAIN SHOULD BE BYPASSED            *
*           IF PO='0'B &                /* IS IT OBJECT SEQUENTIAL?   *
*              LISTOBJ='1'B             /* LISTOBJ OPERATION?         *
*              THEN GOTO AAB1;          /* READ ANOTHER CONTROL CARD  *
         TM    OPTNMAP+1,B'00100000'                              1021
         BC    05,@93A                                            1021
         TM    OPTNMAP,B'01000000'                                1021
         BC    03,AAB1                                            1022
*           GEN;                        /* ISSUE FREEMAIN FOR SP22    *
@939     EQU   *                                                  1023
@93A     EQU   *                                                  1023
         FREEMAIN V,A=AREAGET,SP=22,MF=(E,SPFREE) FREE WORKING STORAGE
         DS    0H
*           GOTO AAB1;                  /* READ ANOTHER CONTROL CARD  *
         BC    15,AAB1                                            1024
*   /******************************************************************
*   /* PROCESS MEMBERS OF AN OBJECT MODULE PARTITIONED DATA SET       *
*   /******************************************************************
*  OBJCALL:
*   DCBKEYLE='00'X;                     /* ZERO OUT KEY LENGTH        *
OBJCALL  MVI   DCBKEYLE,X'00'                                     1025
*   DCBBUFL=DCBLRECL;                   /* SET BUFFER LENGTH          *
         MVC   DCBBUFL(2),DCBLRECL                                1026
*   MEMNAME=LISTNAME(LISTCNT,1:8);      /* PASS MEMBER NAME           *
         LH    @1,LISTCNT                                         1027
         MH    @1,@D24                                            1027
         LA    @E,BLDLIST-10(@1)                                  1027
         MVC   PARMLIST+36(8),0(@E)                               1027
*   RESTRICT (R4);
*   R4=(LISTCNT-1)*14;                  /* GET TTR                    *
         LH    @F,LISTCNT                                         1029
         BCTR  @F,0                                               1029
         MH    @F,@D24                                            1029
         LR    @4,@F                                              1029
*   GEN(FIND  PODCB,LTTR(R4),C);        /* POSITION R/W HEAD          *
         FIND  PODCB,LTTR(R4),C
         DS    0H
*   RELEASE (R4);                       /* RELEASE REGISTER 4         *
*   R1=ADDR(PARMLIST);                  /* STORE PARMLIST ADDR        *
         LA    @1,PARMLIST                                        1032
*   CALL  HMBLKOBJ;                     /* PROCESS OBJECT MODULE      *
         L     @F,@V3              ADDRESS OF HMBLKOBJ            1033
         BALR  @E,@F                                              1033
*   R1=ADDR(PARMLIST);                  /* SAVE PARMLIST ADDR TO PASS *
         LA    @1,PARMLIST                                        1034
*   CALL HMBLKERR;                      /* PROCESS ANY ERROR MSGS     *
         L     @F,@V2              ADDRESS OF HMBLKERR            1035
         BALR  @E,@F                                              1035
*   DCBBUFL='0000'X;                    /* RESET BUFFER LENGTH        *
         MVC   DCBBUFL(2),@X49+2                                  1036
*   DCBKEYLE='08'X;                     /* RESET KEY LENGTH           *
         MVI   DCBKEYLE,X'08'                                     1037
*   /* CHECK IF ALL MEMBERS HAVE BEEN PROCESSED                       *
*   IF LISTCNT=NUMBER                   /* ARE ALL MEMBERS PROCESSED? *
*      THEN GOTO CLOSEIT;               /* CLOSE DCB                  *
         LH    @F,NUMBER                                          1038
         CH    @F,LISTCNT                                         1038
         BC    08,CLOSEIT                                         1039
*   LISTCNT=LISTCNT+1;                  /* POINT TO NEXT MEMBER       *
         LA    @F,1                                               1040
         AH    @F,LISTCNT                                         1040
         STH   @F,LISTCNT                                         1040
*   GOTO BLDCH;                         /* CHECK IF MEMBER FOUND      *
         BC    15,BLDCH                                           1041
* ENDIT:
* /* CHECK IF EOF OCCURED WHEN A CONTINUATION CARD WAS EXPECTED M1204 *
*   IF CONTINUE='1'B                    /* CONTIN EXPECTED?     M1204 *
*      THEN DO;                         /* YES                  M1204 *
ENDIT    TM    CONTINUE,B'10000000'                               1042
         BC    12,@938                                            1042
*           ERRORS=ERRORS×'00001000'X;  /* SET ERR MSG BIT      M1204 *
         OC    PARMLIST+32(4),@X59                                1044
* ENDITA:   R1=ADDR(PARMLIST);          /* POINT TO PARMLIST    M1204 *
ENDITA   LA    @1,PARMLIST                                        1045
*           CALL HMBLKERR;              /* PRINT ERRORS         M1204 *
         L     @F,@V2              ADDRESS OF HMBLKERR            1046
         BALR  @E,@F                                              1046
*           END;
*   ENDITB: /* CLOSE DATA SETS                                        *
*   GEN (CLOSE  (INDCB,,OUTDCB),MF=(E,CLOSR1));/* CLOSE DCB'S         *
@938     EQU   *                                                  1048
ENDITB   CLOSE  (INDCB,,OUTDCB),MF=(E,CLOSR1)
         DS    0H
*           IF ECD12 = '1'B             /* ANY RETURN CODE 12 ERRORS  *
*             THEN                      /* YES                        *
         TM    PARMLIST+68,B'00100000'                            1049
         BC    12,@937                                            1049
*               DO;
*               RCODE = 12;             /* SET RETURN CODE            *
         LA    @F,12                                              1051
         ST    @F,RCODE                                           1051
*               GO TO ENDITC;           /* RETURN TO USER             *
         BC    15,ENDITC                                          1052
*               END;
*             ELSE;                     /* NULL ELSE                  *
@937     EQU   *                                                  1054
*           IF ECD8 = '1'B              /* ANY RETURN CODE 8 ERRORS   *
*             THEN                      /* YES                        *
@936     TM    PARMLIST+68,B'01000000'                            1055
         BC    12,@935                                            1055
*               DO;
*               RCODE = 8;              /* SET RETURN CODE            *
         LA    @F,8                                               1057
         ST    @F,RCODE                                           1057
*               GO TO ENDITC;           /* RETURN TO USER             *
         BC    15,ENDITC                                          1058
*               END;
*             ELSE;                     /* NULL ELSE                  *
@935     EQU   *                                                  1060
*           IF ECD4 = '1'B              /* ANY RETURN CODE 4 ERRORS   *
*             THEN                      /* YES                        *
@934     TM    PARMLIST+68,B'10000000'                            1061
         BC    12,@933                                            1061
*               DO;
*               RCODE = 4;              /* SET RETURN CODE            *
         LA    @F,4                                               1063
         ST    @F,RCODE                                           1063
*               GO TO ENDITC;           /* RETURN TO USER             *
         BC    15,ENDITC                                          1064
*               END;
*             ELSE;                     /* NULL ELSE                  *
@933     EQU   *                                                  1066
*
*           /**********************************************************
*           /* IF NO RETURN CODE ERRORS THEN SET RETURN CODE TO 0     *
*           /**********************************************************
*           RCODE = 0;                  /* SET RETURN CODE            *
@932     SR    @F,@F                                              1067
         ST    @F,RCODE                                           1067
*   ENDITC: RETURN CODE(RCODE);         /* RETURN WITH CODE 0         *
ENDITC   L     @D,4(0,@D)                                         1068
         L     @F,RCODE                                           1068
         ST    @F,16(0,@D)                                        1068
         LR    @1,@C                                              1068
         L     @0,@SIZ001                                         1068
         FREEMAIN R,LV=(0),A=(1)                                  1068
         LM    @E,@C,12(@D)                                       1068
         BCR   15,@E                                              1068
*   END HMBLKCTL;
@EL01    L     @D,4(0,@D)                                         1069
         LR    @1,@C                                              1069
         L     @0,@SIZ001                                         1069
         FREEMAIN R,LV=(0),A=(1)                                  1069
         L     @E,12(0,@D)                                        1069
         LM    @0,@C,20(@D)                                       1069
         BCR   15,@E                                              1069
@DATA1   EQU   *
@0       EQU   00                  EQUATES FOR REGISTERS 0-15
@1       EQU   01
@2       EQU   02
@3       EQU   03
@4       EQU   04
@5       EQU   05
@6       EQU   06
@7       EQU   07
@8       EQU   08
@9       EQU   09
@A       EQU   10
@B       EQU   11
@C       EQU   12
@D       EQU   13
@E       EQU   14
@F       EQU   15
@D1      DC    F'12288'
@D2      DC    F'9437184'
@D3      DC    F'49152'
@D4      DC    H'-1'
@D5      DC    H'9'
@D6      DC    H'8'
@D7      DC    H'1'
@D8      DC    H'64'
@D9      DC    H'71'
@D10     DC    H'6'
@D11     DC    H'7'
@D12     DC    H'0'
@D13     DC    H'16'
@D14     DC    H'4'
@D15     DC    H'5'
@D16     DC    H'3'
@D17     DC    H'70'
@D18     DC    H'2'
@D19     DC    H'39'
@D20     DC    H'240'
@D21     DC    H'100'
@D22     DC    H'10'
@D23     DC    H'-240'
@D24     DC    H'14'
@D25     DC    H'12'
@D26     DC    H'20'
@D27     DC    H'82'
@MVC     MVC   0(1,@A),0(@E)
@V1      DC    V(HMBLKLPA)
@V2      DC    V(HMBLKERR)
@V3      DC    V(HMBLKOBJ)
@V4      DC    V(HMBLKLDM)
@V5      DC    V(HMBLKXRF)
@V6      DC    V(HMBLKIDR)
         DS    0F
@SIZ001  DC    AL1(&SPN)
         DC    AL3(@DATEND-@DATD)
         DS    0F
@C5      DC    C'MAIN ENTRY POINT'
@C7      DC    C'SECONDARY ENTRY '
@C8      DC    C'POINT ADDRESSES ASSOCIATED WITH ALIASES:'
@C10     DC    C'LINKAGE EDITOR ATTRIBUTES OF MODULE:'
@C11     DC    C'RENT'
@C12     DC    C'NOT-RENT'
@C13     DC    C'REUS'
@C14     DC    C'NOT-REUS'
@C15     DC    C'OVLY'
@C16     DC    C'NOT-OVLY'
@C17     DC    C'TEST'
@C18     DC    C'NOT-TEST'
@C21     DC    C'SCTR'
@C23     DC    C'EXEC'
@C24     DC    C'NOT-EXEC'
@C29     DC    C'ZERO-ORG'
@C30     DC    C'NOT-ZERO'
@C35     DC    C'NOT-EDIT'
@C36     DC    C'EDIT'
@C37     DC    C'SYMS'
@C41     DC    C'REFR'
@C42     DC    C'NOT-REFR'
@C43     DC    C'SYSLIB  '
@X44     DC    X'FFFFFFFFFFFFFFFF'
@C45     DC    C'0123456789ABCDEF'
@X46     DC    X'0F0F0F0F0F0F0F0F'
@X47     DC    X'00000100'
@X49     DC    X'00000000'
@C51     DC    C'NONE'
@C54     DC    C'LISTOBJ '
@C55     DC    C'LISTIDR '
@C56     DC    C'LISTLPA '
@X57     DC    X'00000800'
@X59     DC    X'00001000'
@C70     DC    C'DDN='
@C73     DC    C'XREF'
@C74     DC    C'BOTH'
@X76     DC    X'00000040'
@X79     DC    X'00000400'
@X80     DC    X'00000080'
@X81     DC    X'00000200'
@X87     DC    X'00008000'
@C93     DC    C'****'
@C110    DC    C'*****LOAD MODULE PROCESSED BY VS LINKAGE'
@C20     DC    C'NOT-OL'
@C27     DC    C'NOT-DC'
@C28     DC    C'DC'
@C33     DC    C'NO-RLD'
@X48     DC    X'0020'
@C60     DC    C'MODLIB'
@C61     DC    C'TITLE='
@C65     DC    C'RELOC='
@C82     DC    C''''''
@C83     DC    C', '
@X85     DC    X'0100'
@X86     DC    X'0800'
@X90     DC    X'0040'
@X91     DC    X'0002'
@C103    DC    C'10'
@C104    DC    C'11'
@C105    DC    C'12'
@C106    DC    C'13'
@C107    DC    C'14'
@C108    DC    C'15'
@C111    DC    C'EDITOR'
@C112    DC    C'***PAGE ALIGNMENT REQUIRED'
@C3      DC    C'*****  M O D U L E   S U M M A R Y  *****'
@C4      DC    C'MEMBER NAME'
@C6      DC    C'** ALIASES **'
@C9      DC    C'MODULE SSI:'
@C19     DC    C'ONLY-LOAD'
@C22     DC    C'BLOCK'
@C25     DC    C'1-TXT'
@C26     DC    C'MULTI-RCD'
@C31     DC    C'EP-ZERO'
@C32     DC    C'EP > ZERO'
@C34     DC    C'RLD'
@C38     DC    C'NO-SYMS'
@C39     DC    C'F-LEVEL'
@C40     DC    C'E-LEVEL'
@C53     DC    C'LISTLOAD '
@C58     DC    C'               '
@C64     DC    C'MEMBER='
@C71     DC    C'OUTPUT='
@C72     DC    C'MODLIST'
@C77     DC    C'IDENT'
@C78     DC    C'ALL'
@C94     DC    C'BIT  STATUS'
@C109    DC    C'APFCODE'
         DS    0D
@DATA    EQU   *
COL      EQU   00000009            FULLWORD POINTER REGISTER
OVERHEAD EQU   *                   FULLWORD INTEGER
         DC    FL4'8192'
PRNTEXT  EQU   @DATA+00000004      4 BYTE(S) ON WORD
A00002   EQU   *                   1 BYTE(S)
         DC    X'85'
EXAD     EQU   *                   3  BYTE  POINTER ON WORD+1
         DC    VL3(HMBLKSZE)
R1       EQU   00000001            FULLWORD POINTER REGISTER
R5       EQU   00000005            FULLWORD POINTER REGISTER
R6       EQU   00000006            FULLWORD POINTER REGISTER
R4       EQU   00000004            FULLWORD POINTER REGISTER
PDS      EQU   00000010            37 BYTE(S) ON WORD
PDSNAME  EQU   PDS+00000000        8 BYTE(S)
PDSTTR   EQU   PDS+00000008        3 BYTE(S)
INDICATR EQU   PDS+00000011        8 BIT(S)
ALIAS    EQU   PDS+00000011        1 BIT(S)
USERTTR  EQU   PDS+00000011        2 BIT(S)
USERLNTH EQU   PDS+00000011        5 BIT(S)
TTRTEXT  EQU   PDS+00000012        3 BYTE(S)
A00003   EQU   PDS+00000015        1 BYTE(S)
NOTESCAT EQU   PDS+00000016        3 BYTE(S)
NOENTRY  EQU   PDS+00000019        1 BYTE(S)
MODATTR  EQU   PDS+00000020        2 BYTE(S)
MAINSTOR EQU   PDS+00000022        3 BYTE(S)
FSTXTLEN EQU   PDS+00000025        2 BYTE(S)
EPADDR   EQU   PDS+00000027        3 BYTE(S)
FSTXTORG EQU   PDS+00000030        3 BYTE(S)
AOSLKED  EQU   PDS+00000030        1 BIT(S)
A00004   EQU   PDS+00000030        1 BIT(S)
PAGALGN  EQU   PDS+00000030        1 BIT(S)
SSIBIT   EQU   PDS+00000030        1 BIT(S)
APFBIT   EQU   PDS+00000030        1 BIT(S)
A00005   EQU   PDS+00000030        19 BIT(S)
SCATDATA EQU   PDS+00000033        4 BYTE(S)
KEYNAME  EQU   00000000            8 BYTE(S)
TESTBIT  EQU   *                   8*1 BYTE(S)
         DC    X'80'
         DC    X'40'
         DC    X'20'
         DC    X'10'
         DC    X'08'
         DC    X'04'
         DC    X'02'
         DC    X'01'
SSIDATA  EQU   00000000            4 BYTE(S)
APF      EQU   00000000            2 BYTE(S) ON WORD
APFLEN   EQU   APF+00000000        1  BYTE  POINTER
APFCODE  EQU   APF+00000001        1 BYTE(S)
MAINT    EQU   *                   400 BYTE(S)
         DC    C'HMBLKCTL MAINT AREA'
         DC    00381C' '
         ORG   @DATA
         DS    00000416C
@L       EQU   1
@DATD    DSECT
@SAV001  EQU   @DATD+00000000      72 BYTE(S) ON WORD
PARMLIST EQU   @DATD+00000072      77 BYTE(S) ON WORD
DCBIN    EQU   PARMLIST+00000000   FULLWORD POINTER
DCBOUT   EQU   PARMLIST+00000004   FULLWORD POINTER
TITLINE  EQU   PARMLIST+00000008   FULLWORD POINTER
AREAGET  EQU   PARMLIST+00000012   FULLWORD POINTER
GMLENGTH EQU   PARMLIST+00000016   FULLWORD INTEGER
FLAGS    EQU   PARMLIST+00000020   16 BIT(S)
IDRFLAG  EQU   PARMLIST+00000020   1 BIT(S)
OVLYFLAG EQU   PARMLIST+00000020   1 BIT(S)
NOTEDIT  EQU   PARMLIST+00000020   1 BIT(S)
NORLD    EQU   PARMLIST+00000020   1 BIT(S)
MDLB     EQU   PARMLIST+00000020   1 BIT(S)
A00000   EQU   PARMLIST+00000020   11 BIT(S)
BLKCNT   EQU   PARMLIST+00000022   HALFWORD INTEGER
BUFF     EQU   PARMLIST+00000024   FULLWORD POINTER
SCATLEN  EQU   PARMLIST+00000028   FULLWORD INTEGER
ERRORS   EQU   PARMLIST+00000032   32 BIT(S)
MEMNAME  EQU   PARMLIST+00000036   8 BYTE(S)
DDNAME   EQU   PARMLIST+00000044   8 BYTE(S)
TXTTR    EQU   PARMLIST+00000052   3 BYTE(S)
TXTLEN   EQU   PARMLIST+00000055   2 BYTE(S)
RELOCX   EQU   PARMLIST+00000060   FULLWORD INTEGER
MODSIZE  EQU   PARMLIST+00000064   4 BYTE(S)
NFLGS    EQU   PARMLIST+00000068   32 BIT(S)
ECD4     EQU   PARMLIST+00000068   1 BIT(S)
ECD8     EQU   PARMLIST+00000068   1 BIT(S)
ECD12    EQU   PARMLIST+00000068   1 BIT(S)
SWITCH   EQU   PARMLIST+00000072   32 BIT(S)
NUMO     EQU   PARMLIST+00000076   1  BYTE  POINTER
OPTNMAP  EQU   @DATD+00000149      32 BIT(S) ON BYTE
LISTLOAD EQU   OPTNMAP+00000000    1 BIT(S)
LISTOBJ  EQU   OPTNMAP+00000000    1 BIT(S)
LISTIDR  EQU   OPTNMAP+00000000    1 BIT(S)
LISTLPA  EQU   OPTNMAP+00000000    1 BIT(S)
TITLE    EQU   OPTNMAP+00000000    1 BIT(S)
DDN      EQU   OPTNMAP+00000000    1 BIT(S)
MEMBER   EQU   OPTNMAP+00000000    1 BIT(S)
MODLIST  EQU   OPTNMAP+00000000    1 BIT(S)
XREF     EQU   OPTNMAP+00000001    1 BIT(S)
IDENT    EQU   OPTNMAP+00000001    1 BIT(S)
PO       EQU   OPTNMAP+00000001    1 BIT(S)
LASTMEM  EQU   OPTNMAP+00000001    1 BIT(S)
LIMIT    EQU   OPTNMAP+00000001    1 BIT(S)
MCONTIN  EQU   OPTNMAP+00000001    1 BIT(S)
RELOC    EQU   OPTNMAP+00000001    1 BIT(S)
LPAREN   EQU   @DATD+00000153      1 BIT(S) ON BYTE
CONTINUE EQU   @DATD+00000154      1 BIT(S) ON BYTE
BCARD    EQU   @DATD+00000155      121 BYTE(S)
CBLANK   EQU   BCARD+00000000      1 BYTE(S)
CARD     EQU   BCARD+00000001      80 BYTE(S)
A00001   EQU   BCARD+00000081      40 BYTE(S)
ECARD    EQU   @DATD+00000276      121 BYTE(S)
BLINE    EQU   @DATD+00000397      121 BYTE(S)
TBLANK   EQU   BLINE+00000000      1 BYTE(S)
TTLINE   EQU   BLINE+00000001      120 BYTE(S)
RELCHAR  EQU   @DATD+00000132      4 BYTE(S)
TCOL1    EQU   @DATD+00000518      HALFWORD INTEGER
TCOL2    EQU   @DATD+00000520      HALFWORD INTEGER
TITLECOL EQU   @DATD+00000522      HALFWORD INTEGER
TEMP     EQU   @DATD+00000524      HALFWORD INTEGER
NUMBER   EQU   @DATD+00000526      HALFWORD INTEGER
HIGHLOW  EQU   @DATD+00000528      8 BYTE(S) ON WORD
LOW      EQU   HIGHLOW+00000000    FULLWORD INTEGER
HIGH     EQU   HIGHLOW+00000004    FULLWORD INTEGER
HILOLPA  EQU   @DATD+00000536      8 BYTE(S) ON WORD
NLOW     EQU   HILOLPA+00000000    FULLWORD INTEGER
NHIGH    EQU   HILOLPA+00000004    FULLWORD INTEGER
STORAGE  EQU   @DATD+00000544      8 BYTE(S) ON WORD
MAINADDR EQU   STORAGE+00000000    FULLWORD INTEGER
MAINLEN  EQU   STORAGE+00000004    FULLWORD INTEGER
TEMPCNT  EQU   @DATD+00000552      1 BYTE(S)
ENDNAME  EQU   @DATD+00000553      8 BYTE(S)
FMEMNAME EQU   @DATD+00000568      8 BYTE(S) ON DWORD
HEXCHAR  EQU   @DATD+00000576      16 BYTE(S) ON DWORD
ZONEOFF  EQU   @DATD+00000592      8 BYTE(S)
HEXDATA  EQU   @DATD+00000600      9 BYTE(S)
SYSLIB   EQU   @DATD+00000609      8 BYTE(S)
BLDLIST  EQU   @DATD+00000620      452 BYTE(S) ON WORD
NUMENTS  EQU   BLDLIST+00000000    HALFWORD INTEGER
LENGTH   EQU   BLDLIST+00000002    HALFWORD INTEGER
ENTRIES  EQU   BLDLIST+00000004    32*14 BYTE(S)
LISTNAME EQU   BLDLIST+00000004    8 BYTE(S)
LTTR     EQU   BLDLIST+00000012    4 BYTE(S)
LISTTR   EQU   BLDLIST+00000012    3 BYTE(S)
K        EQU   BLDLIST+00000015    1 BYTE(S)
LIB      EQU   BLDLIST+00000016    1 BYTE(S)
C        EQU   BLDLIST+00000017    8 BIT(S)
SWITCHES EQU   @DATD+00001072      16 BIT(S) ON BYTE
SW1      EQU   SWITCHES+00000000   1 BIT(S)
SW2      EQU   SWITCHES+00000000   1 BIT(S)
SW3      EQU   SWITCHES+00000000   1 BIT(S)
SW4      EQU   SWITCHES+00000000   1 BIT(S)
SW5      EQU   SWITCHES+00000000   1 BIT(S)
SW6      EQU   SWITCHES+00000000   1 BIT(S)
SW7      EQU   SWITCHES+00000000   1 BIT(S)
SW8      EQU   SWITCHES+00000000   1 BIT(S)
SW9      EQU   SWITCHES+00000001   1 BIT(S)
SW10     EQU   SWITCHES+00000001   1 BIT(S)
USER     EQU   @DATD+00001074      HALFWORD INTEGER
ACCUM    EQU   @DATD+00001076      HALFWORD POINTER
SSI      EQU   @DATD+00001080      8 BYTE(S) ON DWORD
DIRORG   EQU   @DATD+00001088      FULLWORD INTEGER
LISTCNT  EQU   @DATD+00001092      HALFWORD INTEGER
ALIASLST EQU   @DATD+00001096      288 BYTE(S) ON WORD
ALNAME   EQU   ALIASLST+00000000   16*8 BYTE(S)
ASTERISK EQU   ALIASLST+00000128   16*2 BYTE(S)
ALEPADDR EQU   ALIASLST+00000160   16*8 BYTE(S)
BLNKALAS EQU   @DATD+00001096      288 BYTE(S)
BLANK1   EQU   BLNKALAS+00000000   256 BYTE(S)
BLANK2   EQU   BLNKALAS+00000256   32 BYTE(S)
ALCNT    EQU   @DATD+00001384      HALFWORD INTEGER
HEADNAME EQU   @DATD+00001386      8 BYTE(S)
HEADEP   EQU   @DATD+00001400      8 BYTE(S) ON DWORD
OUTLINE  EQU   @DATD+00001408      121 BYTE(S) ON WORD
ASCII    EQU   OUTLINE+00000000    1 BYTE(S)
LINE     EQU   OUTLINE+00000001    120 BYTE(S)
ATTRIBUT EQU   @DATD+00001529      16 BIT(S) ON BYTE
ATTRIB1  EQU   ATTRIBUT+00000000   8 BIT(S)
ATTRIB2  EQU   ATTRIBUT+00000001   8 BIT(S)
ALLADDR  EQU   @DATD+00001532      4 BYTE(S) ON WORD
MODULE   EQU   @DATD+00001536      41 BYTE(S)
NAME     EQU   @DATD+00001577      12 BYTE(S)
MAIN     EQU   @DATD+00001589      17 BYTE(S)
ALIASES  EQU   @DATD+00001606      13 BYTE(S)
SECOND   EQU   @DATD+00001619      56 BYTE(S)
MODSSI   EQU   @DATD+00001675      11 BYTE(S)
LINKAGE  EQU   @DATD+00001686      36 BYTE(S)
RELFAC   EQU   @DATD+00001722      6 BYTE(S)
ATNAME   EQU   @DATD+00001728      288 BYTE(S) ON WORD
ATON     EQU   ATNAME+00000000     8*9 BYTE(S)
ATOFF    EQU   ATNAME+00000072     8*9 BYTE(S)
SECATON  EQU   ATNAME+00000144     8*9 BYTE(S)
SECATOFF EQU   ATNAME+00000216     8*9 BYTE(S)
LINPTR   EQU   @DATD+00002016      HALFWORD INTEGER
APFDATA  EQU   @DATD+00002018      8 BYTE(S)
A        EQU   @DATD+00002028      FULLWORD INTEGER
B        EQU   @DATD+00002032      FULLWORD INTEGER
D        EQU   @DATD+00002036      FULLWORD INTEGER
E        EQU   @DATD+00002040      FULLWORD INTEGER
I        EQU   @DATD+00002044      FULLWORD INTEGER
X        EQU   @DATD+00002048      FULLWORD INTEGER
WORKAREA EQU   @DATD+00002056      8 BYTE(S) ON DWORD
F        EQU   @DATD+00002064      HALFWORD INTEGER
G        EQU   @DATD+00002066      HALFWORD INTEGER
H        EQU   @DATD+00002068      HALFWORD INTEGER
J        EQU   @DATD+00002070      HALFWORD INTEGER
L        EQU   @DATD+00002072      HALFWORD INTEGER
LOCLEN   EQU   @DATD+00002076      FULLWORD INTEGER
RCODE    EQU   @DATD+00002080      FULLWORD INTEGER
INDCB    EQU   @DATD+00002088      96 BYTE(S) ON DWORD
OUTDCB   EQU   @DATD+00002184      96 BYTE(S) ON DWORD
PODCB    EQU   @DATD+00002280      88 BYTE(S) ON DWORD
OPEN1    EQU   @DATD+00002368      8 BYTE(S) ON WORD
OPEN2    EQU   @DATD+00002376      4 BYTE(S)
CLOSR1   EQU   @DATD+00002380      8 BYTE(S) ON WORD
CLOSR2   EQU   @DATD+00002388      4 BYTE(S)
READIR   EQU   @DATD+00002392      24 BYTE(S) ON WORD
SPGET    EQU   @DATD+00002416      10 BYTE(S) ON WORD
SPFREE   EQU   @DATD+00002428      10 BYTE(S) ON WORD
         DS    00002438C
@TEMPS   DS    0F
         DS    C
@CTEMP2  DS    CL001
HMBLKCTL CSECT
***********************************************************************
*      D A T A  C O N T R O L  B L O C K S                            *
***********************************************************************
INPUT    DCB   DSORG=PS,MACRF=GM,LRECL=80,DDNAME=SYSIN,EODAD=ENDIT,    X
               EROPT=SKP
INLEN    EQU   *-INPUT                 LENGTH OF INPUT
OUTPUT   DCB   DSORG=PS,MACRF=PM,LRECL=121,RECFM=FBA,EXLST=PRNTEXT,    X
               DDNAME=SYSPRINT,EROPT=SKP
OUTLEN   EQU   *-OUTPUT                LENGTH OF OUTPUT
PDSDCB   DCB   DDNAME=XXXXXXXX,DSORG=PO,MACRF=R,                       X
               BUFNO=1,SYNAD=SYSIOPDS,KEYLEN=8,                        X
               EODAD=PDSEOD                              /* @ZA05200 */
PDSLEN   EQU   *-PDSDCB                LENGTH OF PDS DCB
READ1    READ  DECB,SF,MF=L
RLEN     EQU   *-READ1                 LENGTH OF READ1
OP1      OPEN  (INPUT,,OUTPUT,(OUTPUT)),MF=L
OP2      OPEN  PDSDCB,MF=L
CL1      CLOSE (INPUT,,OUTPUT),MF=L
CL2      CLOSE PDSDCB,MF=L
         DCBD  DSORG=PO
HMBLKCTL CSECT
@DATD    DSECT
@DATEND  EQU   *
HMBLKCTL CSECT ,
@9F8     EQU   @9F7
@9F3     EQU   AEC1
@9EF     EQU   PROCESS
@9EE     EQU   PROCESS
@9ED     EQU   ABA2
@9F0     EQU   ABB1
@9E7     EQU   ABA2
@9E3     EQU   AEB1
@9DD     EQU   @9DC
@9DF     EQU   @9DC
@9DE     EQU   @9DC
@9E0     EQU   INCREM
@9CC     EQU   @9CB
@9CF     EQU   ABF4
@9C5     EQU   ABA6
@9C4     EQU   ACG4
@9C3     EQU   ABA9
@9C0     EQU   ACB1
@9B9     EQU   @9B8
@9BB     EQU   ABA2
@9B7     EQU   ACG2
@9B6     EQU   ACH2
@98B     EQU   SSITEST
@977     EQU   PDSREAD
@970     EQU   @96E
@943     EQU   BITCHK
@942     EQU   BITCHK
@93F     EQU   @93E
         END   HMBLKCTL,(C'PL/S',1400,78206)
