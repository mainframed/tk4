         TITLE '**********  ICKSA10:  USTAE MACRO (SYSTEM ADAPTER)  ****
               *********'
        MACRO
        GETMAIN &R,&LV=
        L     REG15,0(REG1)           GDTTBL ADDRESS
        L     REG15,GDTPRL(REG15)     PROL ROUTINE ADDRESS
        CNOP  2,4                     BOUNDARY ALIGNMENT
        LA    REG14,*+14              RETURN ADDRESS
        BALR  REG1,REG15              LINKAGE TO PROL ROUTINE
        DC    A(MODID)                MODULE ID ADDRESS
        DC    A(@SIZDATD)             AUTOMATIC STORAGE SIZE ADDRESS
        MEND
ICKSA10  CSECT ,                                                   0002
@MAINENT DS    0H                                                  0002
         USING *,@15                                               0002
         B     @PROLOG                                             0002
         DC    AL2(@EP00002-@MAINENT)
         DC    AL1(16)                                             0002
         DC    C'ICKSA10   78.192'                                 0002
ICKSAST  DS    0H                                                  0002
         USING *,@15                                               0002
         B     @PROLOG                                             0002
         DC    AL2(@EP00003-ICKSAST)
         ENTRY ICKSAST
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                     0002
         BALR  @12,0                                               0002
@PSTART  DS    0H                                                  0002
         USING @PSTART,@12                                         0002
         L     @00,@SIZDATD                                        0002
         GETMAIN  R,LV=(0)
         LR    @11,@01                                             0002
         USING @DATD,@11                                           0002
         ST    @13,@SA00001+4                                      0002
         LM    @15,@01,16(@13)                                     0002
         ST    @11,8(,@13)                                         0002
         LR    @13,@11                                             0002
         XC    @ZTEMPS(@ZLEN),@ZTEMPS
         AH    @15,4(,@15)                                         0002
         BR    @15                                                 0002
@EP00002 DS    0H                                                  0003
*ICKSAST:  ENTRY                                                   0003
*  (GDTTBL                                                         0003
*  ,STAETYPE                                                       0003
*  ,BLOCKPTR);                                                     0003
         B     @EC00003                                            0003
@EP00003 MVC   @PC00001(12),0(@01)                                 0003
@EC00003 DS    0H                                                  0004
*        /************************************************************/
*        /*                                                          */
*        /*  DMS GLOBAL DATA AREA :                5/10/78           */
*        /*     (1) PLS/2 MACRO DEFINITIONS                          */
*        /*     (2) GLOBAL DATA TABLE                                */
*        /*     (3) SYSTEM ADAPTER DECLARATIONS                      */
*        /*         A) ENTRY POINTS                                  */
*        /*         B) DATA STRUCTURES                               */
*        /*         C) SYMBOLIC RETURN CODES                         */
*        /*     (4) INPUT/OUTPUT ADAPTER DECLARATIONS                */
*        /*         A) ENTRY POINTS                                  */
*        /*         B) DATA STRUCTURES                               */
*        /*         C) SYMBOLIC RETURN CODES                         */
*        /*     (5) DEVICE ADAPTER DECLARATIONS                      */
*        /*         A) ACTION KEYS                                   */
*        /*         B) INFORMATION KEYS                              */
*        /*         C) ENTRY POINTS                                  */
*        /*     (6) TEXT OUTPUT PROCESSOR DECLARATIONS               */
*        /*         A) ENTRY POINTS                                  */
*        /*         B) DATA STRUCTURES                               */
*        /*     (7) DEBUGGING AIDS DECLARATIONS                      */
*        /*         A) ENTRY POINTS                                  */
*        /*     (8) CONVENTIONALIZED NAMED VALUES DECLARATIONS       */
*        /*                                                          */
*        /************************************************************/
*                                                                  0004
*        /************************************************************/
*        /* THE MACRO VARIABLE 'OPERSYS' IS SET HERE (IN DMSDF00)    */
*        /* TO CONTROL MACRO PHASE LOGIC TO GENERATE THE CORRECT     */
*        /* SYSTEM DEPENDENT CODE FOR THE OPERATING SYSTEM UNDER     */
*        /* WHICH DMS EXECUTION IS TO TAKE PLACE.                    */
*        /* THE VARIABLE MUST BE SET TO ONE OF THE FOLLOWING:        */
*        /* %OPERSYS = 'VS1'   - OS/VS1 OPERATING SYSTEM             */
*        /* %OPERSYS = 'MVS'   - OS/VS2 RELEASE 3 AND FOLLOWING      */
*        /* %OPERSYS = 'NONE'  - 'STAND ALONE' EXECUTION ENVIRONMENT */
*        /************************************************************/
*        /* THE CURRENT SETTING IS   %OPERSYS = 'MVS'                */
*        /************************************************************/
*                                                                  0004
*                                                                  0004
*        /************************************************************/
*        /*                                                          */
*        /*  GLOBAL DATA TABLE (GDT)                                 */
*        /*                                                          */
*        /************************************************************/
*        DCL 1 GDTTBL   BOUNDARY(DWORD),                           0004
*              2 GDTHDR CHAR(4),       /*GDT HEADER (CONTAINS 'GDT ')*/
*              2 GDTPRM PTR(31),       /*INVOKER'S PARAMETER LIST PTR*/
*              2 GDTTR1 PTR(31),       /*INTER-MODULE TRACE TABLE PTR*/
*              2 GDTTR2 PTR(31),       /*INTRA-MODULE TRACE TABLE PTR*/
*              2 GDTDBH PTR(31),       /*DEBUGGING AIDS     DATA  PTR*/
*              2 GDTSTH PTR(31),       /*DMS STATISTICS     DATA  PTR*/
*              2 GDTRIH PTR(31),       /*READER/INTERPRETER DATA  PTR*/
*              2 GDTTPH PTR(31),       /*TEXT PROCESSOR     DATA  PTR*/
*              2 GDTSAH PTR(31),       /*SYSTEM ADAPTER     DATA  PTR*/
*              2 GDTIOH PTR(31),       /*I/O ADAPTER        DATA  PTR*/
*              2 GDTDVH PTR(31),       /*DEVICE ADAPTER     DATA  PTR*/
*              2 GDTDIN PTR(31),       /*UDEVINFO ENTRY POINT ADDRESS*/
*              2 GDTDOP PTR(31),       /*UDEVOP   ENTRY POINT ADDRESS*/
*              2 GDTDBG PTR(31),       /*UDUMP    ENTRY POINT ADDRESS*/
*              2 GDTDVO PTR(31),       /*UDEVOPEN ENTRY POINT ADDRESS*/
*              2 GDTPRT PTR(31),       /*UPRINT   ENTRY POINT ADDRESS*/
*              2 GDTESS PTR(31),       /*UESTS    ENTRY POINT ADDRESS*/
*              2 GDTESA PTR(31),       /*UESTA    ENTRY POINT ADDRESS*/
*              2 GDTRST PTR(31),       /*UREST    ENTRY POINT ADDRESS*/
*              2 GDTRES PTR(31),       /*URESET   ENTRY POINT ADDRESS*/
*              2 GDTCAL PTR(31),       /*UCALL    ENTRY POINT ADDRESS*/
*              2 GDTGSP PTR(31),       /*UGSPACE  ENTRY POINT ADDRESS*/
*              2 GDTFSP PTR(31),       /*UFSPACE  ENTRY POINT ADDRESS*/
*              2 GDTGPL PTR(31),       /*UGPOOL   ENTRY POINT ADDRESS*/
*              2 GDTFPL PTR(31),       /*UFPOOL   ENTRY POINT ADDRESS*/
*              2 GDTLOD PTR(31),       /*ULOAD    ENTRY POINT ADDRESS*/
*              2 GDTDEL PTR(31),       /*UDELETE  ENTRY POINT ADDRESS*/
*              2 GDTPRL PTR(31),       /*PROL ENTRY POINT ADDRESS    */
*              2 GDTEPL PTR(31),       /*UEPIL ENTRY POINT ADDRESS   */
*              2 GDTTIM PTR(31),       /*UTIME    ENTRY POINT ADDRESS*/
*              2 GDTIIO PTR(31),       /*UIOINIT  ENTRY POINT ADDRESS*/
*              2 GDTTIO PTR(31),       /*UIOTERM  ENTRY POINT ADDRESS*/
*              2 GDTRIP PTR(31),       /*READER/INTERPRETER          */
*                                      /*  NAME ADDRESS              */
*              2 GDTTOH PTR(31),       /*I/O ADAPTER  MVM            */
*                                      /*  DATA ADDRESS              */
*              2 GDTOPN PTR(31),       /*UOPEN    ENTRY POINT ADDRESS*/
*              2 GDTCLS PTR(31),       /*UCLOSE   ENTRY POINT ADDRESS*/
*              2 GDTGET PTR(31),       /*UGET     ENTRY POINT ADDRESS*/
*              2 GDTPUT PTR(31),       /*UPUT     ENTRY POINT ADDRESS*/
*              2 GDTABT PTR(31),       /*UABORT   ROUTINE     ADDRESS*/
*              2 GDTABH PTR(31),       /*UABORT   ROUTINE    REGISTER*/
*                                      /*        RESTORE AREA ADDRESS*/
*              2 GDTSNP PTR(31),       /*USNAP   ENTRY POINT ADDRESS */
*              2 GDTSPR PTR(31),       /*ICKSA03 AUTOMATIC STORAGE   */
*              2 GDTWTO PTR(31),       /*UWTO ENTRY POINT ADDRESS    */
*              2 GDTSCR PTR(31),       /*USCRATCH ENTRY POINT ADDRESS*/
*              2 GDTVCK PTR(31),       /*UVOLCHK ENTRY POINT ADDRESS */
*              2 GDTDVC PTR(31),       /*UDEVCLSE ENTRY POINT ADDRESS*/
*              2 GDTCVR PTR(31),       /*ADDRESS OF COVER TABLE      */
*              2 GDTSTE PTR(31);       /*USTAE ENTRY POINT ADDRESS   */
*                                                                  0004
*                                                                  0004
*        /************************************************************/
*        /*                                                          */
*        /*  ENTRY POINT DECLARATIONS FOR SYSTEM ADAPTER             */
*        /*                                                          */
*        /************************************************************/
*                                                                  0005
*                                                                  0005
*        DCL ICKSACL0 ENTRY BASED(GDTCAL) VALUERANGE(*)            0005
*                     OPTIONS(VLIST);  /*UCALL    ADAPTER ENTRY POINT*/
*        DCL ICKSALD0 ENTRY BASED(GDTLOD) VALUERANGE(*);           0006
*                                      /*ULOAD    ADAPTER ENTRY POINT*/
*        DCL ICKSADE0 ENTRY BASED(GDTDEL) VALUERANGE(*);           0007
*                                      /*UDELETE  ADAPTER ENTRY POINT*/
*        DCL ICKSAPR0 ENTRY BASED(GDTPRL) VALUERANGE(*);           0008
*                                      /*PROL ADAPTER ENTRY POINT    */
*        DCL ICKSAEP0 ENTRY BASED(GDTEPL) VALUERANGE(*)            0009
*                     OPTIONS(VLIST);  /*UEPIL    ADAPTER ENTRY POINT*/
*        DCL ICKSAGS0 ENTRY BASED(GDTGSP) VALUERANGE(*)            0010
*                     OPTIONS(VLIST);  /*UGSPACE  ADAPTER ENTRY POINT*/
*        DCL ICKSAFS0 ENTRY BASED(GDTFSP) VALUERANGE(*);           0011
*                                      /*UFSPACE  ADAPTER ENTRY POINT*/
*        DCL ICKSAGP0 ENTRY BASED(GDTGPL) VALUERANGE(*)            0012
*                     OPTIONS(VLIST);  /*UGPOOL   ADAPTER ENTRY POINT*/
*        DCL ICKSAFP0 ENTRY BASED(GDTFPL) VALUERANGE(*)            0013
*                     OPTIONS(VLIST);  /*UFPOOL   ADAPTER ENTRY POINT*/
*        DCL ICKSATI0 ENTRY BASED(GDTTIM) VALUERANGE(*)            0014
*                     OPTIONS(VLIST);  /*UTIME    ADAPTER ENTRY POINT*/
*        DCL ICKSASN0 ENTRY BASED(GDTSNP) VALUERANGE(*);           0015
*                                      /*USNAP    ADAPTER ENTRY POINT*/
*        DCL ICKSAWO0 ENTRY BASED(GDTWTO) VALUERANGE(*)            0016
*                     OPTIONS(VLIST);  /*UWTO     ADAPTER EP         */
*        DCL ICKSASC0 ENTRY BASED(GDTSCR) VALUERANGE(*)            0017
*                     OPTIONS(VLIST);  /*USCRATCH ADAPTER EP         */
*        DCL ICKSAVC0 ENTRY BASED(GDTVCK) VALUERANGE(*)            0018
*                     OPTIONS(VLIST);  /*UVOLCHK  ADAPTER EP         */
*        DCL ICKSAST0  ENTRY BASED(GDTSTE) VALUERANGE(*);          0019
*                                      /*USTAE ADAPTER EP            */
*                                                                  0020
*                                                                  0020
*        /************************************************************/
*        /*                                                          */
*        /*  DATA STRUCTURE DECLARATIONS FOR SYSTEM ADAPTER          */
*        /*                                                          */
*        /************************************************************/
*                                                                  0020
*        /*  INTER-MODULE TRACE TABLE                                */
*        /*  (UPDATED BY THE PROL AND UEPIL ROUTINES)                */
*        DCL 1 TRACE1       CHAR(100) BASED(GDTTR1),               0020
*              2 OLDERID1   CHAR(95),  /*ALL BUT THE LATEST TRACE IDS*/
*                3 *        CHAR(90),  /*  OLDER TRACE IDENTIFIERS   */
*                3 CALLID   CHAR(2),   /*  TRACE ID OF CALLING MODULE*/
*              2 NEWID1     CHAR(4);   /*THE MOST RECENT TRACE ID    */
*                                                                  0020
*        DCL NEWERID1       CHAR(95)  BASED(GDTTR1) POSITION(6);   0021
*                                      /*ALL BUT THE OLDEST TRACE IDS*/
*                                                                  0022
*        /*  INTRA-MODULE TRACE TABLE (UPDATED BY TRACE MACRO)       */
*        DCL 1 TRACE2       CHAR(100) BASED(GDTTR2),               0022
*              2 OLDERID2   CHAR(95),  /*ALL BUT THE LATEST TRACE IDS*/
*              2 NEWID2     CHAR(4);   /*THE MOST RECENT TRACE ID    */
*                                                                  0022
*        DCL NEWERID2       CHAR(95)  BASED(GDTTR2) POSITION(6);   0023
*                                      /*ALL BUT THE OLDEST TRACE IDS*/
*                                                                  0024
*        /* CONTROL BLOCK STRUCTURE FOR USTAE MACRO INVOCATION       */
*                                                                  0024
*        DECLARE                                                   0024
*          1 STAEPARM            BDY(WORD) BASED,                  0024
*                                                                  0024
*            2 STAEPFX,          /* STAE PREFIX                      */
*                                                                  0024
*              3 STAFPTR         /* FORWARD CHAIN POINTER            */
*                                POINTER (31),                     0024
*              3 STABPTR         /* BACKWARD CHAIN POINTER           */
*                                POINTER (31),                     0024
*              3 STAGDT          /* POINTER TO THE GDT               */
*                                POINTER(31),                      0024
*              3 STAEPA          /* ENTRY POINT ADDRESS OF RECOVERY  */
*                                /* ROUTINE                          */
*                                POINTER (31),                     0024
*              3 STAID           /* CONTROL BLOCK IDENTIFIER UNIQUE  */
*                                /* TO INVOKER                       */
*                                CHAR (4),                         0024
*              3 STALEN          /* LENGTH OF THE INVOKERS CONTROL   */
*                                /* BLOCK                            */
*                                FIXED (31),                       0024
*              3 STASPTR         /* POINTER TO SYSTEM DIAGNOSTIC WORK*/
*                                /* AREA                             */
*                                POINTER (31) BDY (WORD),          0024
*              3 STARPTR         /* POINTER TO SAVED REGISTERS       */
*                                POINTER (31) BDY (WORD),          0024
*            2 STAEWORK          /* CONTROL BLOCK WORK AREA TO BE    */
*                                /* USED AT INVOKERS DISCRETION      */
*                                CHAR(*);                          0024
*                                                                  0024
*        /************************************************************/
*        /*                                                          */
*        /* KEYWORD-ARGUMENT DECLARATIONS FOR SYSTEM ADAPTOR         */
*        /*                                                          */
*        /************************************************************/
*        DCL ALL      CHAR(3) CONSTANT('ALL');                     0025
*                                      /*'ALL'    ARGUMENT FOR UFPOOL*/
*        DCL FORMAT   CHAR(4) CONSTANT('FORM');                    0026
*                                      /*'FORMAT' ARGUMENT FOR UTIME */
*        DCL HSECOND  CHAR(4) CONSTANT('HSEC');                    0027
*                                      /*'HSECOND' ARGUMENT FOR UTIME*/
*        DCL CLOCK    CHAR(4) CONSTANT('KLOK');                    0028
*                                      /*'CLOCK'  ARGUMENT FOR UTIME */
*        DCL SETZERO  CHAR(4) CONSTANT('ZERO');                    0029
*                                      /*UGSPACE & UGPOOL 'ZERO'  ARG*/
*        DCL SETBLANK CHAR(4) CONSTANT('BLNK');                    0030
*                                      /*UGSPACE & UGPOOL 'BLANK' ARG*/
*        DCL NOSET    CHAR(4) CONSTANT('NSET');                    0031
*                                      /*UGSPACE  'NOSET' ARGUMENT   */
*                                                                  0032
*        DCL OVERRIDE CHAR(4) CONSTANT('OVRD');                    0032
*                                      /*'PURGE' ARGUMNT FOR USCRATCH*/
*                                                                  0033
*        DCL READ     CHAR(4) CONSTANT('READ');                    0033
*                                      /*'READ' ATTRIBUTE FOR UVOLCHK*/
*        DCL ALTER    CHAR(4) CONSTANT('ALTR');                    0034
*                                      /*UVOLCHK 'ALTER' ATTRIBUTE   */
*        DCL UPDATE   CHAR(4) CONSTANT('UPDT');                    0035
*                                      /*UVOLCHK 'UPDATE' ATTRIBUTE  */
*        DCL CONTROL  CHAR(4) CONSTANT('CNTL');                    0036
*                                      /*UVOLCHK 'CONTROL' ATTRIBUTE */
*                                                                  0037
*        DCL LISTLN   FIXED(8);        /*NUMBER OF ARGUMENTS IN LIST */
*        DCL LISTPTR  PTR(31);         /*PARM LIST ADDRESS (ULISTLN) */
*        DCL LISTSCAN PTR(31);         /*ULISTLN SCAN POINTER        */
*        DCL LISTTEST BIT(1) BASED(LISTSCAN);                      0040
*                                      /*ULISTLN LIST END BIT TEST   */
*                                                                  0041
*        /************************************************************/
*        /*                                                          */
*        /*  SYMBOLIC RETURN CODE DECLARATIONS FOR SYSTEM ADAPTER    */
*        /*                                                          */
*        /************************************************************/
*                                                                  0041
*                                      /* RETURN CODE                */
*                                                                  0041
*        DCL SETRC    FIXED(15);       /*RETURN CODE FOR SETTING     */
*        DCL TESTRC   FIXED(15);       /*RETURN CODE FOR TESTING     */
*                                                                  0042
*        DCL RTNREG   REG(15);         /*DMS RETURN CODE REGISTER    */
*                                                                  0043
*                                                                  0043
*        /************************************************************/
*        /*                                                          */
*        /*  ENTRY POINT DECLARATIONS FOR INPUT/OUTPUT ADAPTER       */
*        /*                                                          */
*        /************************************************************/
*                                                                  0044
*                                                                  0044
*        DCL ICKIOIT0 ENTRY BASED(GDTIIO) VALUERANGE(*)            0044
*                     OPTIONS(VLIST);  /*UIOINIT  ADAPTER ENTRY POINT*/
*        DCL ICKIOOP0 ENTRY BASED(GDTOPN) VALUERANGE(*)            0045
*                     OPTIONS(VLIST);  /*UOPEN    ADAPTER ENTRY POINT*/
*        DCL ICKIOTM0 ENTRY BASED(GDTTIO) VALUERANGE(*)            0046
*                     OPTIONS(VLIST);  /*UIOTERM  ADAPTER ENTRY POINT*/
*        DCL ICKIOCL0 ENTRY BASED(GDTCLS) VALUERANGE(*)            0047
*                     OPTIONS(VLIST);  /*UCLOSE   ADAPTER ENTRY POINT*/
*        DCL ICKIOGT0 ENTRY BASED(GDTGET) VALUERANGE(*)            0048
*                     OPTIONS(VLIST);  /*UGET     ADAPTER ENTRY POINT*/
*        DCL ICKIOPT0 ENTRY BASED(GDTPUT) VALUERANGE(*)            0049
*                     OPTIONS(VLIST);  /*UPUT     ADAPTER ENTRY POINT*/
*                                                                  0049
*                                                                  0049
*        /************************************************************/
*        /*                                                          */
*        /*  DATA STRUCTURE DECLARATIONS FOR INPUT/OUTPUT ADAPTER    */
*        /*                                                          */
*        /************************************************************/
*        DCL IOCSPTR  PTR(31);         /*ADDRESS OF THE IOCS         */
*                                                                  0050
*        /*INPUT/OUTPUT CONTROL STRUCTURE (IOCS)                     */
*        DCL 1 IOCSTR   BOUNDARY(WORD) BASED(IOCSPTR),             0051
*              2 IOCDAD     PTR(31),   /*ADDRESS OF DATA             */
*              2 IOCDLN     FIXED(31), /*LENGTH OF DATA              */
*              2 IOCTRN     FIXED(31), /*LENGTH OF TRANSMISSION      */
*              2 IOCKYL     FIXED(8),  /*KEY LENGTH                  */
*              2 IOCDSO     BIT(8),    /*DATA SET ORGANIZATION       */
*                3 IOCDSOPS BIT(1),    /*  SEQUENTIAL                */
*                3 *        BIT(7),    /*  RESERVED                  */
*              2 IOCRFM     BIT(8),    /*RECORD FORMAT FLAG          */
*                3 IOCRFMFX BIT(1),    /*  FIXED LENGTH RECORDS      */
*                3 IOCRFMVR BIT(1),    /*  VARIABLE (NOT SPANNED)    */
*                3 IOCRFMUN BIT(1),    /*  UNDEFINED LENGTH RECORDS  */
*                3 IOCRFMSF BIT(1),    /*  SPANNED RECORD FORMAT     */
*                3 IOCRFMBK BIT(1),    /*  BLOCKED RECORDS           */
*                3 *        BIT(3),    /*  RESERVED                  */
*              2 IOCMAC     BIT(8),    /*MACRO FORM FLAG             */
*                3 IOCMACIN BIT(1),    /*  INPUT DATA SET            */
*                3 IOCMACOT BIT(1),    /*  OUTPUT DATA SET           */
*                3 IOCMACUP BIT(1),    /*  OPEN FOR UPDATE           */
*                3 IOCMACBK BIT(1),    /* BLOCK PROCESSING           */
*                3 *        BIT(3),    /*  RESERVED                  */
*                3 IOCMACPA BIT(1),    /* REPROCESSING FLAG          */
*              2 IOCMSG     BIT(8),    /*MESSAGE FLAGS               */
*                3 IOCMSGOP BIT(1),    /*  DATA SET IS OPEN          */
*                3 *        BIT(7),    /*  RESERVED                  */
*              2 *          CHAR(3),   /*RESERVED                    */
*              2 IOCDSN     PTR(31),   /*ADDRESS OF DATA SET NAME    */
*              2 IOCCBP     PTR(31),   /*RETURN BLOCK ADDRESS AREA   */
*              2 IOCPNM     FIXED(15), /*NUMBER OF RECORDS TO        */
*                                      /*  PUT (NOT REQUIRED         */
*                                      /*  FOR ONE RECORD)           */
*              2 *          FIXED(15), /*RESERVED                    */
*              2 IOCRRN     FIXED(31), /*RECORD SEQ NUMBER           */
*              2 IOCEXT     PTR(31);   /*IOCS EXTENSION ADDRESS      */
*                                                                  0051
*        DCL OPNPTR   PTR(31);         /*OPEN ARGUMENT LIST ADDRESS  */
*                                                                  0052
*        /*OPEN ARGUMENT LIST                                        */
*        DCL 1 OPNAGL   BOUNDARY(WORD) BASED(OPNPTR) CHAR(32),     0053
*              2 OPNOPT     BIT(8),    /*OPEN OPTIONS                */
*                3 OPNOPTIN BIT(1),    /*  INPUT  DATA SET           */
*                3 OPNOPTOT BIT(1),    /*  OUTPUT DATA SET           */
*                3 OPNOPTUP BIT(1),    /*  UPDATE MODE   PROCESSING  */
*                3 OPNOPTBK BIT(1),    /*  BLOCK         PROCESSING  */
*                3 OPNOPTKS BIT(1),    /*  KEYED         PROCESSING  */
*                3 OPNOPTJM BIT(1),    /*  MODIFY JFCB               */
*                3 *        BIT(2),    /*  RESERVED                  */
*              2 OPNRFM     BIT(8),    /*RECORD FORMAT               */
*                3 OPNRFMFX BIT(1),    /*  FIXED     RECORDS         */
*                3 OPNRFMVR BIT(1),    /*  VARIABLE  (NOT SPANNED)   */
*                3 OPNRFMUN BIT(1),    /*  UNDEFINED RECORDS         */
*                3 OPNRFMSF BIT(1),    /*  SPANNED   RECORDS         */
*                3 OPNRFMBK BIT(1),    /*  BLOCKED   RECORDS         */
*                3 *        BIT(3),    /*  RESERVED                  */
*              2 OPNTYP     BIT(8),    /*DATA SET TYPE               */
*                3 OPNTYPSI BIT(1),    /*  SYSTEM  INPUT             */
*                3 OPNTYPSO BIT(1),    /*  SYSTEM  OUTPUT            */
*                3 *        BIT(6),    /*  RESERVED                  */
*              2 OPNMOD     BIT(8),    /*OPEN MODIFIERS              */
*                3 OPNMODAC BIT(1),    /*  ASA CARRIAGE CONTROL CHAR */
*                3 OPNMODRC BIT(1),    /*  RETURN CONTROL BLOCK ADDR */
*                3 *        BIT(6),    /*  RESERVED                  */
*              2 OPNIOC     PTR(31),   /*PTR TO LOCATION IN WHICH  0053
*                                        TO RETURN IOCS ADDRESS      */
*              2 OPNDDN     PTR(31),   /*ADDRESS OF 8-BYTE DDNAME    */
*              2 OPNDSN     PTR(31),   /*ADDRESS OF 44-BYTE DSNAME   */
*              2 OPNREC     FIXED(31), /*LOGICAL RECORD LENGTH       */
*              2 OPNBLK     FIXED(31), /*BLOCKSIZE                   */
*              2 OPNVOL     PTR(31),   /*PTR TO VOL SERIAL           */
*              2 OPNRSVD    FIXED(31); /* RESERVED                   */
*                                                                  0053
*                                                                  0053
*        /************************************************************/
*        /*                                                          */
*        /* USCRATCH VOLUME LIST MAPPING STRUCTURE                   */
*        /*                                                          */
*        /************************************************************/
*        DCL 1 UVOLLIST BASED,                                     0054
*              2 UVOLCNT FIXED(15),    /*NUMBER OF ENTRIES           */
*              2 UVOLENT (*) CHAR(10), /*ONE PER VOLUME              */
*                3 UVOLDEV   CHAR(4) , /*DEVICE TYPE                 */
*                3 UVOLVOL   CHAR(6) ; /*VOLUME SERIAL               */
*                                                                  0054
*                                                                  0054
*                                                                  0054
*                                                                  0054
*        /************************************************************/
*        /*                                                          */
*        /* KEYWORD-ARGUMENT DECLARATIONS FOR DEVICE ADAPTER         */
*        /* ACTION KEYS                                              */
*        /*                                                          */
*        /************************************************************/
*        DCL ACTLOW      /* MINIMUM OF ACTION-KEY VALUES             */
*                        FIXED (31) CONSTANT (1);                  0055
*                                                                  0055
*        DCL ACTRDHA     /* READ HOME ADDRESS                        */
*                        FIXED (31) CONSTANT (1);                  0056
*        DCL ACTRDRZ     /* READ RECORD ZERO                         */
*                        FIXED (31) CONSTANT (2);                  0057
*        DCL ACTWPHAD    /* WRITE PRI. HA WITH DEFECT-FLAG ON        */
*                        FIXED (31) CONSTANT (3);                  0058
*        DCL ACTWPHA     /* WRITE PRI. HA WITH DEFECT-FLAG OFF       */
*                        FIXED (31) CONSTANT (4);                  0059
*        DCL ACTWAHAD    /* WRITE ALT. HA WITH DEFECT-FLAG ON        */
*                        FIXED (31) CONSTANT (5);                  0060
*        DCL ACTWAHA     /* WRITE ALT. HA WITH DEFECT-FLAG OFF       */
*                        FIXED (31) CONSTANT (6);                  0061
*        DCL ACTWRRZM    /* WRITE/READ R0 MAXIMUM LENGTH             */
*                        FIXED (31) CONSTANT (7);                  0062
*        DCL ACTWRZS     /* WRITE STD. LENGTH RO                     */
*                        FIXED (31) CONSTANT (8);                  0063
*        DCL ACTWCKDN    /* WRITE RECORD 'N' (COUNT,KEY AND DATA)    */
*                        FIXED (31) CONSTANT (9);                  0064
*        DCL ACTRCKDN    /* READ RECORD 'N' (COUNT,KEY AND DATA)     */
*                        FIXED (31) CONSTANT (10);                 0065
*        DCL ACTRKDN     /* READ RECORD 'N' (KEY AND DATA)           */
*                        FIXED (31) CONSTANT (11);                 0066
*        DCL ACTRDN      /* READ RECORD 'N' (DATA ONLY)              */
*                        FIXED (31) CONSTANT (12);                 0067
*        DCL ACTVPHA     /* VALIDATE PRIMARY HOME ADDRESS            */
*                        FIXED (31) CONSTANT (13);                 0068
*        DCL ACTVALRZ    /* VALIDATE RECORD ZERO                     */
*                        FIXED (31) CONSTANT (14);                 0069
*        DCL ACTSENOP    /* READ DEVICE OPTIONS (3340 ONLY)          */
*                        FIXED (31) CONSTANT (15);                 0070
*        DCL ACTRRZM     /* READ MAXIMUM LENGTH RECORD ZERO          */
*                        FIXED (31) CONSTANT (16);                 0071
*        DCL ACTVAHA     /* VALIDATE ALTERNATE HOME ADDRESS          */
*                        FIXED (31) CONSTANT (17);                 0072
*        DCL ACTWRZSL    /* WRITE R0 TO LINK PRI. AND ALT. TRACKS    */
*                        FIXED (31) CONSTANT (18);                 0073
*        DCL ACTSCKDN    /* WRITE SPECIAL COUNT/KEY/DATA             */
*                        FIXED (31) CONSTANT (19);                 0074
*        DCL ACTXXXA     /* (RESERVED)                               */
*                        FIXED (31) CONSTANT (20);                 0075
*        DCL ACTRWHA     /* RECOVER WRITE HA                         */
*                        FIXED (31) CONSTANT (21);                 0076
*        DCL ACTXXXB     /* (RESERVED)                               */
*                        FIXED (31) CONSTANT (22);                 0077
*        DCL ACTXXXC     /* (RESERVED)                               */
*                        FIXED (31) CONSTANT (23);                 0078
*        DCL ACTXXXD     /* (RESERVED)                               */
*                        FIXED (31) CONSTANT (24);                 0079
*        DCL ACTXXXE     /* (RESERVED)                               */
*                        FIXED (31) CONSTANT (25);                 0080
*        DCL ACTXXXF     /* (RESERVED)                               */
*                        FIXED (31) CONSTANT (26);                 0081
*        DCL ACTXXXG     /* (RESERVED)                               */
*                        FIXED (31) CONSTANT (27);                 0082
*        DCL ACTWKDN     /* WRITE RECORD 'N' (KEY AND DATA)          */
*                        FIXED (31) CONSTANT (28);                 0083
*        DCL ACTWDN      /* WRITE RECORD 'N' (DATA ONLY)             */
*                        FIXED (31) CONSTANT (29);                 0084
*        DCL ACTXXXH     /* (RESERVED)                               */
*                        FIXED (31) CONSTANT (30);                 0085
*        DCL ACTRRHA     /* RECOVER READ-HOME-ADDRESS                */
*                        FIXED (31) CONSTANT (31);                 0086
*        DCL ACTRRRZ     /* RECOVER READ-RECORD-ZERO                 */
*                        FIXED (31) CONSTANT (32);                 0087
*        DCL ACTXXXJ     /* (RESERVED)                               */
*                        FIXED (31) CONSTANT (33);                 0088
*        DCL ACTRERZ     /* RECOVER STANDARD R-ZERO                  */
*                        FIXED (31) CONSTANT (34);                 0089
*                                                                  0089
*        DCL ACTHIGH     /* MAXIMUM NUMBER OF ACTION-KEYS            */
*                        FIXED (31) CONSTANT (34);                 0090
*                                                                  0090
*        /************************************************************/
*        /*                                                          */
*        /* DEVICE ADAPTER VOLIB INFORMATION REQUEST KEYS            */
*        /*                                                          */
*        /************************************************************/
*        DCL VOLLOW      /* MINIMUM VALUE FOR VOLIB INFO-KEYS        */
*                        FIXED (31) CONSTANT (1);                  0091
*        DCL VOLDNAME    /* DD-NAME                                  */
*                        FIXED (31) CONSTANT (1);                  0092
*        DCL VOLCUU      /* CUU OF VOLUME                            */
*                        FIXED (31) CONSTANT (2);                  0093
*        DCL VOLNTYP     /* VOLUME TYPE - DD-NAME OR CUU             */
*                        FIXED (31) CONSTANT (3);                  0094
*        DCL VOLSTATE    /* ON/OFF LINE STATE                        */
*                        FIXED (31) CONSTANT (4);                  0095
*        DCL VOLAMAPF    /* ACCESS PTR TO FIRST MAP DATA ENTRY       */
*                        FIXED (31) CONSTANT (5);                  0096
*        DCL VOLAMAPL    /* ACCESS PTR TO LAST MAP DATA ENTRY        */
*                        FIXED (31) CONSTANT (6);                  0097
*        DCL VOLIOB      /* ADDRESS OF ASSOCIATED IOB                */
*                        FIXED (31) CONSTANT (7);                  0098
*        DCL VOLPRVOL    /* VOLUME IS MAOUNTED PRIVATELY             */
*                        FIXED (31) CONSTANT (8);                  0099
*        DCL VOLFINIT    /* FIRST TIME INIT. FLAG                    */
*                        FIXED (31) CONSTANT (9);                  0100
*        DCL VOLDTYP4    /* 4 BYTE UCB DEVICE TYPE                   */
*                        FIXED (31) CONSTANT (10);                 0101
*        DCL VOLDTYP     /* 1 BYTE UCB DEVICE TYPE                   */
*                        FIXED (31) CONSTANT (11);                 0102
*        DCL VOLHIGH     /* MAXIMUM VALUE FOR VOLIB INFO-KEYS        */
*                        FIXED (31) CONSTANT (11);                 0103
*        /************************************************************/
*        /*                                                          */
*        /* DEVICE ADAPTER VOLIB UPDATE REQUEST KEYS                 */
*        /*                                                          */
*        /************************************************************/
*        DCL VOLSLOW     /* MINIMUM VALUE FOR VOLIB STORE KEYS       */
*                        FIXED (31) CONSTANT (105);                0104
*        DCL VOLSMAPF    /* STORE PTR TO FIRST MAP DATA ENTRY        */
*                        FIXED (31) CONSTANT (105);                0105
*        DCL VOLSMAPL    /* STORE PTR TO LAST MAP DATA ENTRY         */
*                        FIXED (31) CONSTANT (106);                0106
*        DCL VOLSHIGH    /* MAXIMUM VALUE FOR VOLIB STORE KEYS       */
*                        FIXED (31) CONSTANT (106);                0107
*        /************************************************************/
*        /*                                                          */
*        /* DEVICE INFORMATION TABLE DATA REQUEST KEYS               */
*        /*                                                          */
*        /************************************************************/
*        DCL DEVLOW      /* MINIMUM VALUE FOR DEV KEYS               */
*                        FIXED (31) CONSTANT (201);                0108
*        DCL DEVPTRKS    /* NUMBER OF PRIMARY TRACKS ON PACK         */
*                        FIXED (31) CONSTANT (201);                0109
*        DCL DEVATRKS    /* NUMBER OF ALTERNATE TRACKS ON PACK       */
*                        FIXED (31) CONSTANT (202);                0110
*        DCL DEVNUMSD    /* NUMBER OF SD BYTES IN HA                 */
*                        FIXED (31) CONSTANT (203);                0111
*        DCL DEVTKCYL    /* TRACKS PER CYLINDER                      */
*                        FIXED (31) CONSTANT (204);                0112
*        DCL DEVLPADD    /* ADDRESS OF LAST PRIMARY TRACK            */
*                        FIXED (31) CONSTANT (205);                0113
*        DCL DEVFAADD    /* ADDRESS OF FIRST ALTERNATE TRACK         */
*                        FIXED (31) CONSTANT (206);                0114
*        DCL DEVLAADD    /* ADDRESS OF LAST ALTERNATE TRACK          */
*                        FIXED (31) CONSTANT (207);                0115
*        DCL DEVTHOLD    /* THRESHOLD OF UNRECOVERABLE TRACKS        */
*                        FIXED (31) CONSTANT (208);                0116
*        DCL DEVBSRS1    /* IPL BOOTSTRAP PROGRAM RECORD 1           */
*                        FIXED (31) CONSTANT (209);                0117
*        DCL DEVBSRS2    /* IPL BOOTSTRAP PROGRAM RECORD 2           */
*                        FIXED (31) CONSTANT (210);                0118
*        DCL DEVIPLPL    /* MAX. IPL PGM. LENGTH                     */
*                        FIXED (31) CONSTANT (211);                0119
*        DCL DEVMSSID    /* MSS VOLUME IN EFFECT                     */
*                        FIXED (31) CONSTANT (212);                0120
*        DCL DEVVTOCL    /* DEFAULT VTOC LOCATION                    */
*                        FIXED (31) CONSTANT (213);                0121
*        DCL DEVVTOCE    /* DEFAULT VTOC EXTENTS                     */
*                        FIXED (31) CONSTANT (214);                0122
*        DCL DEVDSCBF    /* FORMAT 4 DACB DEVICE CONSTANTS           */
*                        FIXED (31) CONSTANT (215);                0123
*        DCL DEVTRKCP    /* TRACK CAPACITY - (HA AND R0)             */
*                        FIXED (31) CONSTANT (216);                0124
*        DCL DEVRECOH    /* RECORD OVERHEAD                          */
*                        FIXED (31) CONSTANT (217);                0125
*        DCL DEVMRTRK    /* MAXIMUM NUMBER OF RECORDS PER TRACK      */
*                        FIXED (31) CONSTANT (218);                0126
*        DCL DEVBSRW1    /* SPECIAL BOOTSTRAP: FORCES WAIT STATE     */
*                        FIXED (31) CONSTANT (219);                0127
*        DCL DEVHIGH     /* MAXIMUM VALUE FOR DEV KEY                */
*                        FIXED (31) CONSTANT (219);                0128
*        /************************************************************/
*        /*                                                          */
*        /* ENTRY POINT DECLARATIONS FOR THE DEVICE ADAPTER          */
*        /*                                                          */
*        /************************************************************/
*                                                                  0129
*        DCL ICKDVON0 ENTRY BASED(GDTDVO) VALUERANGE(*);           0129
*                                     /* UDEVOPEN ENTRY POINT        */
*        DCL ICKDVIN0 ENTRY BASED(GDTDIN) VALUERANGE(*);           0130
*                                     /* UDEVINFO ENTRY POINT        */
*        DCL ICKDVOP0 ENTRY BASED(GDTDOP) VALUERANGE(*);           0131
*                                     /* UDEVOP   ENTRY POINT        */
*        DCL ICKDVCL0 ENTRY BASED(GDTDVC) VALUERANGE(*);           0132
*                                     /* UDEVCLSE ENTRY POINT        */
*                                                                  0133
*                                                                  0133
*                                                                  0133
*        /************************************************************/
*        /*                                                          */
*        /*  ENTRY POINT DECLARATIONS FOR TEXT OUTPUT PROCESSOR      */
*        /*                                                          */
*        /************************************************************/
*                                                                  0133
*                                                                  0133
*        DCL ICKTPPR0 ENTRY BASED(GDTPRT) VALUERANGE(*)            0133
*                     OPTIONS(VLIST);  /*UPRINT   MACRO ENTRY POINT  */
*        DCL ICKTPES0 ENTRY BASED(GDTESS) VALUERANGE(*);           0134
*                                      /*UESTS    MACRO ENTRY POINT  */
*        DCL ICKTPEA0 ENTRY BASED(GDTESA) VALUERANGE(*);           0135
*                                      /*UESTA    MACRO ENTRY POINT  */
*        DCL ICKTPRS0 ENTRY BASED(GDTRST) VALUERANGE(*)            0136
*                     OPTIONS(VLIST);  /*UREST    MACRO ENTRY POINT  */
*        DCL ICKTPRE0 ENTRY BASED(GDTRES) VALUERANGE(*)            0137
*                     OPTIONS(VLIST);  /*URESET   MACRO ENTRY POINT  */
*                                                                  0137
*                                                                  0137
*        /************************************************************/
*        /*                                                          */
*        /*  DATA STRUCTURE DECLARATIONS FOR TEXT OUTPUT PROCESSOR   */
*        /*                                                          */
*        /************************************************************/
*        DCL DDSTRU   PTR(31);         /*DYNAMIC DATA STRUCTURE PTR  */
*                                                                  0138
*        /*DYNAMIC DATA STRUCTURE ARGUMENT LIST                      */
*        DCL 1 DARGLIST BOUNDARY(WORD) BASED(DDSTRU),              0139
*              2 DARGDBP     PTR(31),  /*DATA BLOCK POINTER          */
*              2 DARGRETP    PTR(31),  /*RETURN AREA POINTER         */
*              2 DARGSTID    FIXED(31),/*STATIC TEXT IDENTIFIER      */
*                3 DARGSMOD  CHAR(3),  /*  STATIC TEXT MODULE        */
*                3 DARGSENT  PTR(8),   /*  STATIC TEXT ENTRY         */
*              2 DARGILP     FIXED(15),/*INPUT BLOCK LENGTH          */
*              2 DARGCNT     FIXED(15),/*COUNT OF REF GROUPS         */
*              2 DARGRETL    FIXED(15),/*RETURN AREA LENGTH          */
*              2 DARGIND     FIXED(8), /*PRINT LINE INDENT FACTOR    */
*              2 *           FIXED(8), /*RESERVED                    */
*              2 DARGARY(*)  BOUNDARY(WORD),                       0139
*                3 DARGINS   FIXED(15),/*INSERT REFERENCE NUMBER     */
*                  4 DARGREP FIXED(15),/*REPLICATION REFERENCE NUMBER*/
*                3 DARGINL   FIXED(15),/*INPUT DATA LENGTH           */
*                  4 DARGPCT FIXED(15),/*REDO REPLICATION COUNT      */
*                3 DARGDTM   FIXED(31);/*DYNAMIC DATA POINTER        */
*                                                                  0139
*        DCL FSADDR PTR(31);           /*FORMAT STRUCTURE POINTER    */
*                                                                  0140
*        /*FORMAT STRUCTURE ARGUMENT LIST                            */
*        DCL 1 FMTLIST  BOUNDARY(WORD) BASED(FSADDR),              0141
*              2 FMTFLGS     BIT(16),  /*FLAG BYTES                  */
*                3 FMTEOLF   BIT(1),   /*  END OF STRUCTURE FLAG     */
*                3 FMTSCF    BIT(1),   /*  SPACE CONTROL    FLAG     */
*                3 FMTIDF    BIT(1),   /*  INSERT DATA      FLAG     */
*                3 FMTBDF    BIT(1),   /*  BLOCK  DATA      FLAG     */
*                3 FMTREPF   BIT(1),   /*  REDO             FLAG     */
*                3 FMTSTF    BIT(1),   /*  STATIC TEXT      FLAG     */
*                3 FMTDFF    BIT(1),   /*  DEFAULT DATA     FLAG     */
*                3 FMTHDF    BIT(1),   /*  HEADER           FLAG     */
*                3 *         BIT(8),   /*  RESERVED                  */
*              2 FMTSPF      FIXED(15),/*SPACING FACTOR              */
*                3 FMTRFNO   FIXED(15),/*INSERT REFERENCE NUMBER     */
*                  4 FMTILEN FIXED(15),/*BLOCK INPUT LENGTH          */
*                    5 FMTSTL FIXED(15),/*STATIC TEXT LENGTH         */
*              2 FMTIOFF     FIXED(15),/*BLOCK INPUT OFFSET          */
*                3 FMTTRBC   FIXED(15),/*REPLICATION STRUCTURE COUNT */
*                  4 FMTSTO  FIXED(15),/*STATIC TEXT OFFSET          */
*                    5 FMTSPT CHAR(1), /*SPACING TYPE                */
*              2 FMTOCOL     FIXED(15),/*PRINT COLUMN                */
*                3 FMTRIO    FIXED(15),/*REPLICATION INPUT OFFSET    */
*              2 FMTOLEN     FIXED(15),/*PRINT FIELD LENGTH          */
*              2 FMTCNVF     BIT(16),  /*CONVERSION FLAGS            */
*                3 FMTBH     BIT(1),   /*  BINARY TO HEX             */
*                3 FMTBHA    BIT(1),   /*  BINARY TO HEX APOSTROPHE  */
*                3 FMTBHD    BIT(1),   /*  BINARY TO HEX DUMP        */
*                3 FMTBD     BIT(1),   /*  BINARY TO DECIMAL         */
*                3 FMTPU     BIT(1),   /*  PACKED TO UNPACKED        */
*                3 *         BIT(3),   /*  RESERVED                  */
*                3 FMTZS     BIT(1),   /*  ZERO  SUPPRESSION         */
*                3 FMTAL     BIT(1),   /*  ALIGN LEFT                */
*                3 FMTSS     BIT(1),   /*  SIGN  SUPPRESSION         */
*                3 FMTBS     BIT(1),   /*  BLANK SUPPRESSION         */
*                3 *         BIT(4);   /*  RESERVED                  */
*                                                                  0141
*                                                                  0141
*        /************************************************************/
*        /*                                                          */
*        /*  ENTRY POINT DECLARATIONS FOR DEBUGGING AIDS             */
*        /*                                                          */
*        /************************************************************/
*                                                                  0142
*                                                                  0142
*                                                                  0142
*        DCL ICKDB010 ENTRY BASED(GDTDBG) VALUERANGE(*)            0142
*                     OPTIONS(VLIST);  /*DMS  DUMP  ROUTINE ENTRY PT */
*                                                                  0142
*                                                                  0142
*        /************************************************************/
*        /*                                                          */
*        /*  DATA STRUCTURE DECLARATIONS FOR DEBUGGING AIDS          */
*        /*                                                          */
*        /************************************************************/
*                                                                  0143
*        /*  DATA ITEM DECLARATIONS FOR SYMBOLIC DUMP MACROS         */
*                                                                  0143
*        DCL DMPINDEX     PTR(31);     /*DUMP LIST PROCESSING POINTER*/
*                                                                  0143
*        /*DUMP LIST INDIVIDUAL ELEMENT FORMAT                       */
*        DCL 1 DMPITM     CHAR(16)  BOUNDARY(WORD) BASED(DMPINDEX),
*              2 DMPITMNM CHAR(8),     /*DUMP ELEMENT SYMBOLIC NAME  */
*              2 DMPITMPT PTR(31),     /*DUMP ELEMENT ADDRESS        */
*              2 DMPITMLN FIXED(15),   /*DUMP ELEMENT LENGTH         */
*              2 DMPITMTP CHAR(1),     /*DUMP ELEMENT TYPE           */
*              2 *        CHAR(1);     /*RESERVED                    */
*                                                                  0144
*        /*DUMP LIST ARRAY HEADER FORMAT                             */
*        DCL 1 DMPARY     CHAR(16)  BOUNDARY(WORD) BASED(DMPINDEX),
*              2 DMPARYNM CHAR(8),     /*DUMP ARRAY   SYMBOLIC NAME  */
*              2 DMPARYSZ FIXED(15),   /*DUMP ARRAY   SIZE           */
*              2 DMPARYIC FIXED(15),   /*DUMP ARRAY   ITEM COUNT     */
*              2 DMPARYEX FIXED(15),   /*DUMP ARRAY   EXTENT         */
*              2 DMPARYTP CHAR(1),     /*DUMP ARRAY   TYPE           */
*              2 *        CHAR(1);     /*RESERVED                    */
*                                                                  0145
*        /*DUMP LIST TERMINATOR FORMAT                               */
*        DCL DMPTRM       CHAR(1)   BOUNDARY(WORD) BASED(DMPINDEX);
*                                                                  0146
*        DCL DMPTRMVL     BIT(8)    CONSTANT('FF'X);               0147
*                                      /*DUMP LIST TERMINATION FLAG  */
*                                                                  0148
*        DCL DMPELEMT     FIXED(15) CONSTANT(16);                  0148
*                                      /*DUMP LIST ITEM SIZE         */
*                                                                  0149
*                                                                  0149
*        /************************************************************/
*        /*                                                          */
*        /*  DECLARATIONS FOR CONVENTIONALIZED NAMED VALUES          */
*        /*                                                          */
*        /************************************************************/
*                                                                  0149
*        DCL REG0  REGISTER(0);        /*REGISTER  0 SPECIFICATION   */
*        DCL REG1  REGISTER(1);        /*REGISTER  1 SPECIFICATION   */
*        DCL REG2  REGISTER(2);        /*REGISTER  2 SPECIFICATION   */
*        DCL REG3  REGISTER(3);        /*REGISTER  3 SPECIFICATION   */
*        DCL REG4  REGISTER(4);        /*REGISTER  4 SPECIFICATION   */
*        DCL REG5  REGISTER(5);        /*REGISTER  5 SPECIFICATION   */
*        DCL REG6  REGISTER(6);        /*REGISTER  6 SPECIFICATION   */
*        DCL REG7  REGISTER(7);        /*REGISTER  7 SPECIFICATION   */
*        DCL REG8  REGISTER(8);        /*REGISTER  8 SPECIFICATION   */
*        DCL REG9  REGISTER(9);        /*REGISTER  9 SPECIFICATION   */
*        DCL REG10 REGISTER(10);       /*REGISTER 10 SPECIFICATION   */
*        DCL REG11 REGISTER(11);       /*REGISTER 11 SPECIFICATION   */
*        DCL REG12 REGISTER(12);       /*REGISTER 12 SPECIFICATION   */
*        DCL REG13 REGISTER(13);       /*REGISTER 13 SPECIFICATION   */
*        DCL REG14 REGISTER(14);       /*REGISTER 14 SPECIFICATION   */
*        DCL REG15 REGISTER(15);       /*REGISTER 15 SPECIFICATION   */
*                                                                  0164
*        DCL LASTCC00 FIXED(15) CONSTANT(0);                       0165
*                                      /*FSR LAST CONDITION CODE =  0*/
*        DCL LASTCC04 FIXED(15) CONSTANT(4);                       0166
*                                      /*FSR LAST CONDITION CODE =  4*/
*        DCL LASTCC08 FIXED(15) CONSTANT(8);                       0167
*                                      /*FSR LAST CONDITION CODE =  8*/
*        DCL LASTCC12 FIXED(15) CONSTANT(12);                      0168
*                                      /*FSR LAST CONDITION CODE = 12*/
*        DCL LASTCC16 FIXED(15) CONSTANT(16);                      0169
*                                      /*FSR LAST CONDITION CODE = 16*/
*                                                                  0170
*        DCL NULLPTR  PTR(31)   CONSTANT(0);                       0170
*                                      /*NULL POINTER VALUE          */
*        DCL ON       BIT(1)    CONSTANT('1'B);                    0171
*                                      /*BIT SWITCH/FLAG 'ON'  VALUE */
*        DCL OFF      BIT(1)    CONSTANT('0'B);                    0172
*                                      /*BIT SWITCH/FLAG 'OFF' VALUE */
*        DCL YES      BIT(1)    CONSTANT('1'B);                    0173
*                                      /*BIT SWITCH/FLAG 'YES' VALUE */
*        DCL NO       BIT(1)    CONSTANT('0'B);                    0174
*                                      /*BIT SWITCH/FLAG 'NO'  VALUE */
*        DCL PRTFILE  FIXED(31) CONSTANT(0);                       0175
*                                      /*SYSPRINT OUTPUT FILE NAME   */
*                                                                  0176
*/********************************************************************/
*/*                                                                  */
*/*          END OF DMS GLOBAL DECLARATIONS                          */
*/*                                                                  */
*/********************************************************************/
*                                                                  0176
*                                                                  0176
*                                                                  0176
*                                                                  0176
*                                                                  0176
*        /************************************************************/
*        /*                                                          */
*        /* SYSTEM ADAPTER HISTORICAL DATA TABLE                     */
*        /*                                                          */
*        /************************************************************/
*                                                                  0176
*        DCL 1 SAHIST BASED(GDTSAH),                               0176
*              2 GPFIRST PTR(31),      /* FIRST UGPOOL AREA POINTER  */
*              2 GPLAST  PTR(31),      /* LAST UGPOOL AREA POINTER   */
*              2 AUTOPTR PTR(31),      /* AUTOTBL TABLE POINTER      */
*              2 SAHSTA  PTR(31),      /* ADDR OF STAE PARM LIST     */
*              2 LLBLKPTR PTR(31);     /* LOADLIST BLOCK PTR         */
*                                                                  0176
*        /************************************************************/
*        /*                                                          */
*        /* STORAGE TABLE (SHARED) FOR THE ITERATIVELY CALLED        */
*        /* MODULE'S FROZEN AUTOMATIC STORAGE                        */
*        /*                                                          */
*        /************************************************************/
*                                                                  0177
*        DCL 1 AUTOTBL CHAR(72) BDY(WORD) BASED(AUTOPTR),          0177
*              2 AUTOARAY(6) CHAR(12) BDY(WORD),                   0177
*                                      /* AUTOMATIC STORAGE ENTRY    */
*                3 AREAID CHAR(4),     /* IDENTIFIER OF ENTRY        */
*                3 STATUS FIXED(15),   /* USAGE COUNT OF ENTRY       */
*                3 ASIZE  FIXED(15),   /* FIRST AREA SIZE            */
*                3 PTR1   PTR(31);     /* FIRST AREA POINTER         */
*                                                                  0177
*                                                                  0177
*                                                                  0177
*        /************************************************************/
*        /*                                                          */
*        /*       DECLARES USED BY UDELETE FUNCTION                  */
*        /*                                                          */
*        /************************************************************/
*                                                                  0178
*        DCL   LLSLTCNT FIXED(15) CONSTANT(24);                    0178
*                                                                  0178
*        /************************************************************/
*        /*                                                          */
*        /*       LLBLK DEFINATION FOR SYSTEM ADAPTER                */
*        /*                                                          */
*        /************************************************************/
*                                                                  0179
*        DCL 1 LLBLK BASED(LLBLKPTR) BDY(WORD),                    0179
*                                      /* LLBLK DISCRIPTION          */
*              2 LLHDR CHAR(8) BDY(WORD),                          0179
*                                      /* LLBLK HEADER PTRS          */
*                3 LLFSTSLT POINTER(31),                           0179
*                                      /* ADDR OF 1ST AVAILABLE SLOT */
*                3 LLNXTBLK POINTER(31),                           0179
*                                      /* ADDR OF NEXT LLBLK         */
*              2 LLSLOT(LLSLTCNT) CHAR(16) BDY(WORD),              0179
*                                      /* LOAD MODULE SLOTS          */
*                3 LLNAME CHAR(8) BDY(WORD),                       0179
*                                      /* LOAD MODULE NAME           */
*                  4 LLNXTSLT POINTER(31),                         0179
*                                      /* ADDR OF NXT AVAILABLE SLOT */
*                  4 LLNOMOD POINTER(31),                          0179
*                                      /* NO MODULE LOAD INDICATOR   */
*                3 LLADDR POINTER(31), /* ADDR OF LOAD MOD ENTRY PT  */
*                3 LLUSECTR FIXED(8),  /* MODULE IN USE CTR          */
*                3 LLMODSZ FIXED(24);  /* SIZE OF LOADED MODULE      */
*                                                                  0179
* /*******************************************************************/
* /*                                                                 */
* /* THE SDWA (SYSTEM DIAGNOSTIC WORK AREA) IS USED BY BOTH (E)STA   */
* /* EXIT ROUTINES AND FRR ROUTINES AS THE COMMUNICATION AREA        */
* /* BETWEEN THE RTM AND THE (E)STA OR FRR WHEN ERRORS OCCUR.        */
* /* IT IS ALSO REFERRED TO AS THE RTCA (RECOVERY TERMINATION        */
* /* COMMUNICATION AREA). IT CONTAINS DATA CONCERNING THE ORIGINAL   */
* /* ERROR AND ALSO CONCERNING ACTIONS OF PREVIOUSLY ENTERED         */
* /* RECOVERY ROUTINES.                                              */
* /*                                                                 */
* /* METHOD OF ACCESS                                                */
* /* BAL                                                             */
* /*             IHASDWA DSECT =  YES                                */
* /*                              NO                                 */
* /* DSECT = YES IS THE DEFAULT AND WILL PRODUCE THE SDWA            */
* /*            AS A DSECT.                                          */
* /* DSECT = NO WILL PRODUCE THE SDWA AS A CONTINUATION OF           */
* /*            DEFINED STORAGE. (NO DSECT CARD PRODUCED)            */
* /* PLS                                                             */
* /*   IF MACRO VARIABLE %SDWA9999 IS NOT EQUAL TO ','               */
* /*   AND %SDWALVL IS NULL, THE SDWA WILL BE INCLUDED               */
* /*   AS A LEVEL 1 STRUCTURE BASED ON SDWAPTR.                      */
* /*                                                                 */
* /*   IF %SDWALVL IS SPECIFIED AS A NUMBER FROM 1 TO 4              */
* /*   THE SDWA WILL BE A NON-BASED STRUCTURE WITH THE               */
* /*   TOP LEVEL EQUAL TO %SDWALVL.                                  */
* /*                                                                 */
* /*   IF SDWA9999 IS EQUAL TO ',' THE SDWA WILL                     */
* /*   TERMINATE WITH A COMMA RATHER THAN A                          */
* /*   SEMI-COLON.                                                   */
* /*                                                                 */
* /*                                                                 */
* /* MACMEAN SDWA MEANS SYSTEM DIAGNOSTIC WORK AREA                  */
* /* MACCOMP Y-1 SC1C5/PZD81                                         */
* /* MACSTAT Y-1 72318/Y02703,Y02704                                 */
* /*                                                                 */
* /*******************************************************************/
*DECLARE                                                           0180
*  1 SDWA    BASED(SDWAPTR),                                       0180
*   6 SDWAPARM    PTR(31),              /* PARAMETER LIST ADDRESS  0180
*                                          IF (E)STA MACRO         0180
*                                          SPECIFIED PARAM OPTION  0180
*                                          OR 0. FOR FRRS THIS IS THE
*                                          ADDRESS OF THE 6 WORD PARM
*                                          AREA RETURNED BY THE SETFRR
*                                          MACRO WHEN THE PARMAD   0180
*                                          KEYWORD IS SPECIFIED ON THE
*                                          ON THE SETFRR MACRO       */
*   6 SDWAFIOB    PTR(31),              /* ADDRESS OF PURGE I/O    0180
*                                          REQUEST LIST (PIRL),    0180
*                                          OR 0 IF HALT I/O IS     0180
*                                          REQUESTED ON ENTRY TO   0180
*                                          RETRY ROUTINE FOR (E)STA. */
*    7 SDWAABCC   CHAR(4),              /* ABEND COMPLETION CODE   0180
*                                          ON ENTRY TO EXIT ROUTINE  */
*     8 SDWACMPF   CHAR(1),             /* FLAG BITS IN COMPLETION 0180
*                                          CODE.                     */
*      9 SDWAREQ    BIT(1),             /* ON, DUMP TO BE GIVEN.   0180
*                                          SET IF DUMP REQUESTED   0180
*                                          BY ABEND, CALLRTM, OR   0180
*                                          SETRP MACRO.              */
*      9 SDWASTEP   BIT(1),             /* ON, JOBSTEP TO BE       0180
*                                          TERMINATED.SET IF       0180
*                                          STEP OPTION SPECIFIED   0180
*                                          ON ABEND MACRO.           */
*      9 *          BIT(1),             /* RESERVED                  */
*      9 SDWASTCC   BIT(1),             /* ON, DON'T STORE         0180
*                                          COMPLETION CODE.        0180
*                                          NOT USED IN OS/VS2 REL. 2 */
*      9 *          BIT(4),             /* RESERVED                  */
*     8 SDWACMPC   CHAR(3),             /* SYSTEM COMPLETION CODE  0180
*                                          (FIRST 12 BITS) AND USER
*                                          COMPLETION CODE (SECOND 0180
*                                          12 BITS).                 */
*   6 SDWACTL1     CHAR(8) BDY(WORD),   /* BC MODE PSW AT TIME OF  0180
*                                          ERROR. NOT INITIALIZED  0180
*                                          FOR FRRS.                 */
*    7 SDWACMKA     CHAR(1),            /* CHANNEL INTERRUPTS MASKS  */
*     8 SDWAIOA     BIT(7),             /* I/O INTERRUPTS (ALL     0180
*                                          ZEROS OR ALL ONES).       */
*     8 SDWAEXTA    BIT(1),             /* EXTERNAL INTERRUPT.       */
*    7 SDWAMWPA    CHAR(1),             /* PSW KEY AND 'M-W-P'.      */
*     8 SDWAKEYA    BIT(4),             /* PSW KEY                   */
*     8 *           BIT(1),             /* RESERVED                  */
*     8 SDWAMCKA    BIT(1),             /* MACHINE CHECK INTERRUPT   */
*     8 SDWAWATA    BIT(1),             /* WAIT STATE.               */
*     8 SDWASPVA    BIT(1),             /* SUPERVISOR/PROBLEM-     0180
*                                          PROGRAM MODE.             */
*    7 SDWAINTA    CHAR(2),             /* INTERRUPT CODE (LAST 2  0180
*                                          BYTES OF INTERRUPT CODE 0180
*                                          IF I/O INTERRUPT).        */
*    7 SDWAPMKA    CHAR(1),             /* INSTRUCTION LENGTH CODE,
*                                          CONDITION CODE, AND     0180
*                                          PROGRAM MASKS.            */
*     8 SDWAILA     BIT(2),             /* INSTRUCTION LENGTH CODE   */
*     8 SDWACCA     BIT(2),             /* LAST CONDITION CODE       */
*     8 SDWAFPA     BIT(1),             /* FIXED-POINT OVERFLOW      */
*     8 SDWADOA     BIT(1),             /* DECIMAL OVERFLOW          */
*     8 SDWAEUA     BIT(1),             /* EXPONENT UNDERFLOW        */
*     8 SDWASGA     BIT(1),             /* SIGNIFANCE                */
*    7 SDWANXTA    PTR(24),             /* ADDRESS OF NEXT         0180
*                                          INSTRUCTION             0180
*                                          TO BE EXECUTED            */
*   6 SDWACTL2    CHAR(8) BDY(WORD),    /* BC MODE PSW FROM LAST   0180
*                                          PRB ON RB CHAIN.        0180
*                                          ZERO FOR FRRS.            */
*    7 SDWACMKP    CHAR(1),             /* CHANNEL INTERRUPTS MASKS  */
*     8 SDWAIOP     BIT(7),             /* I/O INTERRUPTS (ALL     0180
*                                          ZEROS OR ALL ONES).       */
*     8 SDWAEXTP    BIT(1),             /* EXTERNAL INTERRUPT.       */
*    7 SDWAMWPP    CHAR(1),             /* PSW KEY AND 'M-W-P'.      */
*     8 SDWAKEYP    BIT(4),             /* PSW KEY                   */
*     8 *           BIT(1),             /* RESERVED                  */
*     8 SDWAMCKP    BIT(1),             /* MACHINE CHECK INTERRUPT   */
*     8 SDWAWATP    BIT(1),             /* WAIT STATE.               */
*     8 SDWASPVP    BIT(1),             /* SUPERVISOR/PROBLEM-     0180
*                                          PROGRAM MODE.             */
*    7 SDWAINTP    CHAR(2),             /* INTERRUPT CODE (LAST 2  0180
*                                          BYTES OF INTERRUPT CODE 0180
*                                          IF I/O INTERRUPT).        */
*    7 SDWAPMKP    CHAR(1),             /* INSTRUCTION LENGTH CODE,
*                                          CONDITION CODE, AND     0180
*                                          PROGRAM MASKS.            */
*     8 SDWAILP     BIT(2),             /* INSTRUCTION LENGTH CODE   */
*     8 SDWACCP     BIT(2),             /* LAST CONDITION CODE       */
*     8 SDWAFPP     BIT(1),             /* FIXED-POINT OVERFLOW      */
*     8 SDWADOP     BIT(1),             /* DECIMAL OVERFLOW          */
*     8 SDWAEUP     BIT(1),             /* EXPONENT UNDERFLOW        */
*     8 SDWASGP     BIT(1),             /* SIGNIFICANCE              */
*    7 SDWANXTP    PTR(24),             /* ADDRESS OF NEXT         0180
*                                          INSTRUCTION             0180
*                                          TO BE EXECUTED            */
*   6 SDWAGRSV    CHAR(64) BDY(WORD),   /* GENERAL PURPOSE         0180
*                                          REGISTERS AT TIME OF    0180
*                                          ERROR                     */
*    7 SDWAGR00    FIXED(31),           /* GPR 0.                    */
*    7 SDWAGR01    FIXED(31),           /* GPR 1.                    */
*    7 SDWAGR02    FIXED(31),           /* GPR 2.                    */
*    7 SDWAGR03    FIXED(31),           /* GPR 3.                    */
*    7 SDWAGR04    FIXED(31),           /* GPR 4.                    */
*    7 SDWAGR05    FIXED(31),           /* GPR 5.                    */
*    7 SDWAGR06    FIXED(31),           /* GPR 6.                    */
*    7 SDWAGR07    FIXED(31),           /* GPR 7.                    */
*    7 SDWAGR08    FIXED(31),           /* GPR 8.                    */
*    7 SDWAGR09    FIXED(31),           /* GPR 9.                    */
*    7 SDWAGR10    FIXED(31),           /* GPR 10.                   */
*    7 SDWAGR11    FIXED(31),           /* GPR 11.                   */
*    7 SDWAGR12    FIXED(31),           /* GPR 12.                   */
*    7 SDWAGR13    FIXED(31),           /* GPR 13.                   */
*    7 SDWAGR14    FIXED(31),           /* GPR 14.                   */
*    7 SDWAGR15    FIXED(31),           /* GPR 15.                   */
*   6 SDWANAME    CHAR(8) BDY(WORD),    /* IF PROBLEM PROGRAM MODE 0180
*                                          NAME OF ABENDING        0180
*                                          PROGRAM, OR ZERO IF NO  0180
*                                          NAME IS AVAILABLE.      0180
*                                          ZERO IF NOT RUNNING     0180
*                                          UNDER AN RB.              */
*    7 SDWARBAD    PTR(31),             /* RB ADDRESS OF ABENDING  0180
*                                          PROGRAM. (IF SUPERVISOR 0180
*                                          MODE PROGRAM RUNNING UNDER
*                                          AN RB)                    */
*    7 *           CHAR(4),             /* CONTAINS ZEROS IF       0180
*                                          SUPERVISOR MODE PROGRAM 0180
*                                          RUNNING UNDER AN RB.    0180
*                                          OR IF PROGRAM NOT       0180
*                                          RUNNING UNDER AN RB.      */
*   6 SDWAEPA    PTR(31),               /* ENTRY POINT ADDRESS OF  0180
*                                          ABENDING PROGRAM.       0180
*                                          ZERO IF NOT RUNNING     0180
*                                          UNDER AN RB.              */
*   6 SDWAIOBR   PTR(31),               /* POINTER TO SDWAFIOB FIELD,
*                                          OR 0 IF NO RETRY,       0180
*                                          OR 0 IF HALT I/O        0180
*                                          IS REQUESTED FOR (E)STA 0180
*                                          EXITS. ZERO FOR FRRS.   0180
*                                                           ICB3777  */
*   6 SDWAEC1   CHAR(8) BDY(WORD),      /* EXTENDED CONTROL PSW  AT
*                                          TIME OF ERROR(ABEND)      */
*     7 SDWAEMK1    CHAR(1),            /* INTERRUPT INFORMATION   0180
*                                          MASKS                     */
*       8 *         BIT(1),             /* RESERVED                  */
*       8 SDWAPER1   BIT(1),            /* ON,PROGRAM EVENT RECORD-
*                                          ING INTERRUPTS CAN OCCUR
*                                          OFF,PROGRAM EVENT RECORD-
*                                          ING INTERRUPTS CANNOT   0180
*                                          OCCUR                     */
*       8 *           BIT(3),           /* RESERVED                  */
*       8  SDWATRM1   BIT(1),           /* ON,ADDRESS TRANSLATION  0180
*                                          ACTIVE                    */
*       8 SDWAIO1    BIT(1),            /* OFF,I/O INTERRUPTIONS   0180
*                                          CANNOT OCCUR            0180
*                                          ON,I/O INTERRUPTIONS CAN
*                                          OCCUR SUBJECT TO CHANNEL
*                                          MASK BITS IN CONTROL REGS
*                                          2 AND 3                   */
*       8 SDWAEXT1    BIT(1),           /* OFF,EXTERNAL INTERRUPTIONS
*                                          CANNOT OCCUR            0180
*                                          ON,EXTERNAL INTERRUPTIONS
*                                          CAN OCCUR SUBJECT TO    0180
*                                          EXTERNAL SUBCLASS MASK  0180
*                                          BITS OF CONTROL REGISTER 0*/
*     7 SDWAMWP1    CHAR(1),            /* PSW KEY AND 'M-W-P'       */
*       8 SDWAKEY1   BIT(4),            /* PSW KEY                   */
*       8 SDWAECT1   BIT(1),            /* EXTENDED CONTROL MODE BIT */
*       8 SDWAMCK1   BIT(1),            /* OFF,MACHINE CHECKS CANNOT
*                                          OCCUR                   0180
*                                          ON,MACHINE CHECKS DUE TO
*                                          SYSTEM DAMAGE AND       0180
*                                          INSTRUCTION-PROCESSING  0180
*                                          DAMAGE CAN OCCUR.  OTHER
*                                          MACHINE CHECKS SUBJECT TO
*                                          MASK BITS IN CONTROL    0180
*                                          REGISTER 14               */
*       8 SDWAWAT1     BIT(1),          /* ON,CPU IN WAIT STATE      */
*       8 SDWAPGM1     BIT(1),          /* ON,PROBLEM STATE        0180
*                                          OFF,SUPERVISOR STATE      */
*     7 SDWAINT1     CHAR(1),           /* CONDITION CODE AND      0180
*                                          PROGRAM MASK              */
*       8 *           BIT(2),           /* RESERVED                  */
*       8 SDWACC1     BIT(2),           /* CONDITION CODE            */
*       8 SDWAFPO1    BIT(1),           /* FIXED POINT OVERFLOW      */
*       8 SDWADEC1    BIT(1),           /* DECIMAL OVERFLOW          */
*       8 SDWAEXP1    BIT(1),           /* EXPONENT UNDERFLOW        */
*       8 SDWASGN1    BIT(1),           /* SIGNIFICANCE              */
*     7 *            CHAR(1),           /* RESERVED                  */
*     7 SDWANXT1     PTR(31),           /* ADDRESS OF NEXT         0180
*                                          INSTRUCTION TO BE       0180
*                                          EXECUTED                  */
*       8 *             PTR(8),         /* RESERVED                  */
*       8 SDWAADD1     PTR(24),         /* INSTRUCTION ADDRESS       */
*   6 SDWAAEC1       CHAR(8) BDY(WORD), /* ADDITIONAL EC MODE      0180
*                                          INFORMATION               */
*     7 *              CHAR(1),         /* RESERVED                  */
*     7 SDWAILC1        PTR(8),         /* INSTRUCTION LENGTH CODE 0180
*                                          FOR PSW DEFINED BY SDWAEC1*/
*       8 *             BIT(5),         /* RESERVED  ALWAYS ZERO     */
*       8 SDWAIL1       BIT(2),         /* INSTRUCTION LENGTH CODE   */
*       8 *             BIT(1),         /* RESERVED  ALWAYS ZERO     */
*     7 SDWAINC1     FIXED(16),         /* INTERRUPT CODE. IF PROGRAM
*                                          CHECK OCCURRED          0180
*                                          THE SUBFIELDS ARE       0180
*                                          FURTHER DIVIDED           */
*       8 *            CHAR(1),         /* RESERVED FOR IMPRECISE  0180
*                                          INTERRUPTS              0180
*                                          IF PROGRAM CHECK          */
*       8 SDWAICD1      PTR(8),         /* 8 BIT INTERRUPT CODE    0180
*                                          IF PROGRAM CHECK          */
*         9 SDWAIPR1   BIT(1),          /* PER INTERRUPT OCCURRED    */
*         9 SDWAIMC1   BIT(1),          /* MONITOR CALL INTERRUPT  0180
*                                          OCCURRED                  */
*         9 SDWAIPC1   BIT(6),          /* AN UNSOLICITED PROGRAM  0180
*                                          CHECK HAS OCCURRED        */
*     7 SDWATRAN   PTR(31),             /* VIRTUAL ADDRESS CAUSING 0180
*                                          TRANSLATION EXCEPTION     */
*   6 SDWAEC2    CHAR(8) BDY(WORD),     /* EC MODE PSW OF THE RB   0180
*                                          WHICH CREATED THE ESTAE 0180
*                                          EXIT AT THE TIME IT LAST
*                                          INCURRED AN INTERRUPT   0180
*                                          OR 0 FOR ESTAI.         0180
*                                          OR PSW USED TO GIVE FRR 0180
*                                          CONTROL                   */
*     7 SDWAEMK2        CHAR(1),        /* INTERRUPT INFORMATION   0180
*                                          MASKS                     */
*       8 *           BIT(1),           /* RESERVED                  */
*       8 SDWAPER2    BIT(1),           /* ON,PROGRAM EVENT RECORD-
*                                          ING INTERRUPTS CAN OCCUR
*                                          OFF,PROGRAM EVENT RECORD-
*                                          ING INTERRUPTS CANNOT   0180
*                                          OCCUR                     */
*       8 *           BIT(3),           /* RESERVED                  */
*       8 SDWATRM2    BIT(1),           /* ON,ADDRESS TRANSLATION  0180
*                                          ACTIVE                    */
*       8 SDWAIO2     BIT(1),           /* OFF,I/O INTERRUPTIONS   0180
*                                          CANNOT OCCUR            0180
*                                          ON,I/O INTERRUPTIONS CAN
*                                          OCCUR SUBJECT TO CHANNEL
*                                          MASK BITS IN CONTROL REGS
*                                          2 AND 3                   */
*       8 SDWAEXT2    BIT(1),           /* OFF,EXTERNAL INTERRUPTIONS
*                                          CANNOT OCCUR            0180
*                                          ON,EXTERNAL INTERRUPTIONS
*                                          CAN OCCUR SUBJECT TO    0180
*                                          EXTERNAL SUBCLASS MASK  0180
*                                          BITS OF CONTROL REGISTER 0*/
*     7 SDWAMWP2    CHAR(1),            /* PSW KEY AND 'M-W-P'       */
*       8 SDWAKEY2   BIT(4),            /* PSW KEY                   */
*       8 SDWAECT2   BIT(1),            /* EXTENDED CONTROL MODE BIT */
*       8 SDWAMCK2   BIT(1),            /* OFF,MACHINE CHECKS CANNOT
*                                          OCCUR                   0180
*                                          ON,MACHINE CHECKS DUE TO
*                                          SYSTEM DAMAGE AND       0180
*                                          INSTRUCTION-PROCESSING  0180
*                                          DAMAGE CAN OCCUR.  OTHER
*                                          MACHINE CHECKS SUBJECT TO
*                                          MASK BITS IN CONTROL    0180
*                                          REGISTER 14               */
*       8 SDWAWAT2     BIT(1),          /* ON,CPU IN WAIT STATE      */
*       8 SDWAPGM2     BIT(1),          /* ON,PROBLEM STATE        0180
*                                          OFF,SUPERVISOR STATE      */
*     7 SDWAINT2     CHAR(1),           /* CONDITION CODE AND      0180
*                                          PROGRAM MASK              */
*       8 *           BIT(2),           /* RESERVED                  */
*       8 SDWACC2     BIT(2),           /* CONDITION CODE            */
*       8 SDWAFPO2    BIT(1),           /* FIXED POINT OVERFLOW      */
*       8 SDWADEC2    BIT(1),           /* DECIMAL OVERFLOW          */
*       8 SDWAEXP2    BIT(1),           /* EXPONENT UNDERFLOW        */
*       8 SDWASGN2    BIT(1),           /* SIGNIFICANCE              */
*     7 *            CHAR(1),           /* RESERVED                  */
*     7 SDWANXT2     PTR(31),           /* ADDRESS OF NEXT         0180
*                                          INSTRUCTION TO BE       0180
*                                          EXECUTED                  */
*       8 *            PTR(8),          /* RESERVED                  */
*       8 SDWAADD2    PTR(24),          /* INSTRUCTION ADDRESS       */
*   6 SDWAAEC2     CHAR(8) BDY(WORD),   /* ADDITIONAL EC MODE      0180
*                                          INFORMATION               */
*     7 *             CHAR(1),          /* RESERVED                  */
*     7 SDWAILC2       CHAR(1),         /* INSTRUCTION LENGTH CODE 0180
*                                          FOR PSW DEFINED BY SDWAEC2*/
*       8 *             BIT(5),         /* RESERVED ALWAYS ZERO      */
*       8 SDWAIL2       BIT(2),         /* INSTRUCTION LENGTH CODE   */
*       8 *             BIT(1),         /* RESERVED ALWAYS ZERO      */
*     7 SDWAINC2  FIXED(16),            /* INTERRUPT CODE. IF PROGRAM
*                                          CHECK OCCURRED          0180
*                                          THE SUBFIELDS ARE       0180
*                                          FURTHER DIVIDED           */
*       8 *            CHAR(1),         /* RESERVED FOR IMPRECISE  0180
*                                          INTERRUPTS              0180
*                                          ON PROGRAM CHECK INTERRUPT*/
*       8 SDWAICD2      PTR(8),         /* 8 BIT INTERRUPT CODE    0180
*                                          IF PROGRAM CHECK          */
*         9 SDWAIPR2      BIT(1),       /* PER INTERRUPT OCCURRED    */
*         9 SDWAIMC2      BIT(1),       /* MONITOR CALL INTERRUPT  0180
*                                          OCCURRED                  */
*         9 SDWAIPC2      BIT(6),       /* AN UNSOLICITED PROGRAM  0180
*                                          CHECK OCCURRED            */
*     7 SDWATRN2   PTR(31),             /* VIRTUAL ADDRESS CAUSING 0180
*                                          TRANSLATION EXCEPTION     */
*   6 SDWASRSV  CHAR(64) BDY(WORD),     /* GENERAL PURPOSE         0180
*                                          REGISTERS OF THE RB     0180
*                                          LEVEL WHICH CREATED THE 0180
*                                          ESTAE EXIT AT THE TIME  0180
*                                          IT LAST INCURRED        0180
*                                          AN INTERRUPT            0180
*                                          OR 0 FOR ESTAI.         0180
*                                          FOR FRRS INITIALIZED TO 0180
*                                          REGISTERS AT TIME OF    0180
*                                          ERROR.  THIS            0180
*                                          REGISTER AREA IS USED TO
*                                          UPDATE REGISTER CONTENTS
*                                          FOR RETRY IF REQUESTED    */
*     7 SDWASR00    FIXED(31),          /* GPR 0.                    */
*     7 SDWASR01    FIXED(31),          /* GPR 1.                    */
*     7 SDWASR02    FIXED(31),          /* GPR 2.                    */
*     7 SDWASR03    FIXED(31),          /* GPR 3.                    */
*     7 SDWASR04    FIXED(31),          /* GPR 4.                    */
*     7 SDWASR05    FIXED(31),          /* GPR 5.                    */
*     7 SDWASR06    FIXED(31),          /* GPR 6.                    */
*     7 SDWASR07    FIXED(31),          /* GPR 7.                    */
*     7 SDWASR08    FIXED(31),          /* GPR 8.                    */
*     7 SDWASR09    FIXED(31),          /* GPR 9.                    */
*     7 SDWASR10    FIXED(31),          /* GPR 10,                   */
*     7 SDWASR11    FIXED(31),          /* GPR 11.                   */
*     7 SDWASR12    FIXED(31),          /* GPR 12.                   */
*     7 SDWASR13    FIXED(31),          /* GPR 13.                   */
*     7 SDWASR14    FIXED(31),          /* GPR 14.                   */
*     7 SDWASR15    FIXED(31),          /* GPR 15.                   */
*   6 SDWAIDNT       CHAR(4),           /* SDWA IDENTIFICATION     0180
*                                          AND ATTRIBUTES            */
*     7 SDWASPID     CHAR(1),           /* SUBPOOL ID OF STORAGE   0180
*                                          CONTAINING THIS SDWA      */
*     7 SDWALNTH     CHAR(3),           /* LENGTH OF THIS SDWA IN  0180
*                                          BYTES                     */
*   6 SDWAMCH        CHAR(28) BDY(WORD), /*CONTAINS MACHINE CHECK  0180
*                                          DATA IF SDWAMCHK IS ON    */
*     7 SDWASTCK       CHAR(8) BDY(WORD),/*BEGINNING AND ENDING    0180
*                                          STORAGE CHECK ADDRESSES.
*                                          FILLED IN DUE TO        0180
*                                          STORAGE ERROR (SDWASCK) 0180
*                                          OR A KEY FAILURE (SDWASKYF)
*                                          THESE ADDRESSES ARE VALID
*                                          ONLY IF INDICATED BY THE
*                                          SDWASRVL FLAG.            */
*       8 SDWASCKB      PTR(31),        /* BEGINNING VIRTUAL ADDRESS
*                                          OF STORAGE CHECK          */
*       8 SDWASCKE      PTR(31),        /* ENDING VIRTUAL ADDRESS  0180
*                                          OF STORAGE CHECK          */
*     7 SDWAMCHI       CHAR(2),         /* ADDITIONAL MCH INFORMATION
*                                          FLAGS                     */
*       8 SDWAMCHS      CHAR(1),        /* MCH FLAG BYTE             */
*         9 SDWASRVL     BIT(1),        /* ON,STORAGE ADDRESS      0180
*                                          SUPPLIED (SDWASTCK,     0180
*                                          SDWARFSA) ARE VALID.      */
*         9 SDWARCDF     BIT(1),        /* ON,MACHINE CHECK RECORD 0180
*                                          NOT RECORDED              */
*         9 SDWATSVL     BIT(1),        /* ON,TIME STAMP VALID       */
*         9 SDWAINVP     BIT(1),        /* ON,STORAGE IS RECONFIGURED,
*                                          PAGE IS INVALIDATED.      */
*         9 SDWARSRC     BIT(1),        /* ON,STORAGE RECONFIGURATION
*                                          STATUS AVAILABLE        0180
*                                          (SDWARSR1,SDWARSR2)       */
*         9 SDWARSRF     BIT(1),        /* ON,STORAGE RECONFIGURATION
*                                          NOT ATTEMPTED (SDWARSR1,
*                                          SDWARSR2 ARE INVALID )    */
*         9 *            BIT(2),        /* RESERVED                  */
*       8 SDWAMCHD     CHAR(1),         /* INPUT INFORMATION       0180
*                                          TO RECOVERY ROUTINE CON-
*                                          CERNING A MACHINE CHECK 0180
*                                          ERROR                     */
*         9 SDWASKYF    BIT(1),         /* ON,STORAGE KEY FAILURE    */
*         9 SDWAREGU    BIT(1),         /* ON,GENERAL PURPOSE REGISTER
*                                          CONTENTS AT TIME OF MACHINE
*                                          CHECK UNPREDICTABLE       */
*         9 SDWAPSWU    BIT(1),         /* ON,PSW AND-OR CONTROL   0180
*                                          REGISTERS AT TIME OF MACHINE
*                                          CHECK UNPREDICTABLE       */
*         9 SDWASCK     BIT(1),         /* ON,STORAGE DATA CHECK     */
*         9 SDWAACR     BIT(1),         /* ON,INDICATES ACR REQUEST  */
*         9 SDWAINSF    BIT(1),         /* ON,INSTRUCTION FAILURE    */
*         9 SDWAFPRX    BIT(1),         /* ON, CONTENTS OF FLOATING
*                                          POINT REGISTERS         0180
*                                          AT TIME OF MACHINE CHECK
*                                          ARE UNPREDICTABLE         */
*         9 SDWATERR    BIT(1),         /* ON,TIMER ERROR - CAUSES 0180
*                                          ENTRY TO RECOVERY ROUTINES
*                                          ONLY IF LOGOUT FAILED     */
*     7 SDWACPID     CHAR(2),           /* ID OF FAILING CPU CAUSING
*                                          ACR                       */
*     7 SDWARSR1     CHAR(1),           /* ADDITIONAL STORAGE FRAME
*                                          ERROR INDICATORS AS     0180
*                                          RETURNED FROM REAL STORAGE
*                                          RECONFIGURATION           */
*       8 *               BIT(6),       /* RESERVED                  */
*       8 SDWAMSER        BIT(1),       /* STORAGE ERROR ALREADY   0180
*                                          SET IN FRAME              */
*       8 SDWACHNG        BIT(1),       /* CHANGE INDICATOR WAS    0180
*                                          ON IN FRAME               */
*     7 SDWARSR2        CHAR(1),        /* ADDITIONAL STORAGE      0180
*                                          ERROR INDICATORS.         */
*       8 SDWAOFLN        BIT(1),       /* FRAME OFFLINE OR        0180
*                                          SCHEDULED TO GO OFFLINE 0180
*                                          IF SDWAINTC IS ON         */
*       8 SDWAINTC        BIT(1),       /* INTERCEPT               0180
*                                          THE FRAME IS SCHEDULED  0180
*                                          TO GO OFFLINE           0180
*                                                OR                0180
*                                          THE FRAME HAS INCURRED  0180
*                                          A STORAGE ERROR         0180
*                                          OR IS V=R                 */
*       8 SDWASPER        BIT(1),       /* STORAGE ERROR PERMANENT 0180
*                                          ON FRAME                  */
*       8 SDWANUCL        BIT(1),       /* FRAME CONTAINS PERMANENT
*                                          RESIDENT STORAGE,I.E.   0180
*                                          NUCLEUS.                  */
*       8 SDWAFSQA        BIT(1),       /* FRAME IN SQA              */
*       8 SDWAFLSQ        BIT(1),       /* FRAME IN LSQA             */
*       8 SDWAPGFX        BIT(1),       /* FRAME IS PAGE FIXED       */
*       8 SDWAVEQR        BIT(1),       /* FRAME IS VIRTUAL=REAL   0180
*                                          OR SCHEDULED FOR VIRTUAL=
*                                          REAL. IF SDWAINTC IS ON   */
*     7 *               CHAR(2),        /* RESERVED                  */
*     7 SDWARFSA        PTR(31),        /* REAL STORAGE FAILING    0180
*                                          ADDRESS. ( VALID ONLY IF
*                                          INDICATED BY SDWASRVL )   */
*     7 SDWATIME        CHAR(8),        /* TIME STAMP OF ASSOCIATED
*                                          MACHINE CHECK RECORD.     */
*   6 SDWAFLGS        CHAR(4),          /* INPUT FLAGS DESCRIBING  0180
*                                          REASONS AND CONDITIONS  0180
*                                          FOR ENTERING A RECOVERY 0180
*                                          EXIT ROUTINE              */
*     7 SDWAERRA     CHAR(1),           /* ERROR TYPE CAUSING ENTRY
*                                          TO RECOVERY ROUTINE       */
*       8 SDWAMCHK    BIT(1),           /* ON,MACHINE CHECK          */
*       8 SDWAPCHK    BIT(1),           /* ON,PROGRAM CHECK          */
*       8 SDWARKEY    BIT(1),           /* ON,INDICATES CONSOLE    0180
*                                          RESTART KEY DEPRESSED     */
*       8 SDWASVCD    BIT(1),           /* ON,INDICATES TASK ISSUED
*                                          SVC 13                    */
*       8 SDWAABTM    BIT(1),           /* ON,INDICATES SYSTEM FORCED
*                                          SVC 13(ABTERM)            */
*       8 SDWASVCE    BIT(1),           /* ON,INDICATES AN SVC WAS 0180
*                                          ISSUED BY A LOCKED OR   0180
*                                          SRB ROUTINE               */
*       8 SDWATEXC    BIT(1),           /* ON,INDICATES AN         0180
*                                          UNRECOVERABLE TRANSLATION
*                                          FAILURE                   */
*       8 SDWAPGIO    BIT(1),           /* ON,INDICATES A PAGE     0180
*                                          I/O ERROR                 */
*     7 SDWAERRB     CHAR(1),           /* ADDITIONAL ERROR ENTRY  0180
*                                          INFORMATION               */
*       8 *           BIT(4),           /* RESERVED                  */
*       8 SDWATYP1    BIT(1),           /* ON,TYPE1 SVC IN CONTROL AT
*                                          TIME OF ERROR             */
*       8 SDWAENRB    BIT(1),           /* ON,ENABLED RB IN CONTROL
*                                           AT TIME OF ERROR         */
*       8 SDWALDIS    BIT(1),           /* ON,A LOGICALLY OR PHYSICALLY
*                                          DISABLED ROUTINE WAS IN 0180
*                                          CONTROL AT TIME OF ERROR. */
*       8 SDWASRBM   BIT(1),            /* SYSTEM IN SRB MODE AT TIME
*                                          OF ERROR                  */
*     7 SDWAERRC     CHAR(1),           /* ADDITIONAL ERROR ENTRY  0180
*                                          INFORMATION               */
*       8 SDWASTAF    BIT(1),           /* ON,A PREVIOUS (E)STA EXIT
*                                          OR FRR FAILED             */
*       8 SDWASTAI    BIT(1),           /* ON, A (E)STAI EXIT      0180
*                                          PREVIOUSLY RECEIVED     0180
*                                          CONTROL                   */
*       8 SDWAIRB    BIT(1),            /* ON,AN IRB PRECEDED THE RB
*                                          THAT IS ASSOCIATED WITH 0180
*                                          THIS EXIT                 */
*       8 SDWAPERC    BIT(1),           /* ON,THIS RECOVERY ROUTINE
*                                          IS BEING PERCOLATED TO    */
*       8 SDWAEAS    BIT(1),            /* ON INDICATES A LOWER LEVEL
*                                          EXIT HAS RECOGNIZED AN  0180
*                                          ERROR AND PROVIDED SERVICE-
*                                          ABILITY INFORMATION       */
*       8 *           BIT(3),           /* RESERVED.                 */
*     7 SDWAERRD     CHAR(1),           /* ADDITIONAL ERROR ENTRY  0180
*                                          INFORMATION.              */
*       8 SDWACLUP    BIT(1),           /* ON,INDICATES RECOVERY   0180
*                                          ROUTINE ONLY TO CLEANUP 0180
*                                          AND NOT RETRY (IF ESTA  0180
*                                          EXIT AND 33E            0180
*                                          COMPLETION CODE THE DUMP
*                                          IS TAKEN AFTER ENTRY TO 0180
*                                          THE RECOVERY ROUTINE,IF 0180
*                                          THE COMPLETION CODE IS OTHER
*                                          THAN 33E AND IT IS AN   0180
*                                          ESTA EXIT THE           0180
*                                          DUMP IS TAKEN BEFORE    0180
*                                          ENTRY TO THE RECOVERY   0180
*                                          ROUTINE)                  */
*       8 SDWANRBE    BIT(1),           /* ON,RB ASSOCIATED WITH THIS
*                                          ESTA EXIT WAS NOT IN CONTROL
*                                          AT TIME OF ERROR          */
*       8 SDWASTAE    BIT(1),           /* ON,THIS ESTA EXIT HAS   0180
*                                          BEEN ENTERED FOR A PREVIOUS
*                                          ABEND. NEVER ON FOR FRRS. */
*       8 SDWACTS     BIT(1),           /* ON,THIS TASK WAS NOT IN 0180
*                                          CONTROL AT TIME OF ERROR
*                                          BUT A TASK WITHIN THE SAME
*                                          JOBSTEP TREE REQUESTED A
*                                          'STEP' ABEND. ONLY 'ON' 0180
*                                          IF SDWACLUP IS 'ON'.      */
*       8 SDWAMABD    BIT(1),           /* ON,THIS TASK WAS NOT IN 0180
*                                          CONTROL AT TIME OF ERROR
*                                          BUT AN ANCESTOR OF THIS 0180
*                                          TASK HAS ABENDED. ONLY  0180
*                                          'ON' IF SDWACLUP IS 'ON'  */
*       8 SDWARPIV    BIT(1),            /* ON, THE REGISTERS AND PSW
*                                          AT TIME OF ERROR ARE    0180
*                                          UNAVAILABLE               */
*       8 SDWAMCIV    BIT(1),           /* ON, MACHINE CHECK ERROR 0180
*                                          INFORMATION IS          0180
*                                          UNAVAILABLE.              */
*       8 *           BIT(1),           /* RESERVED                  */
*    6 SDWAFMID     CHAR(2),            /* ASID OF MEMORY IN WHICH 0180
*                                          ERROR OCCURRED          0180
*                                          =0, IF MEMORY IS CURRENT
*                                          NOT=0, IF OTHER MEMORY  0180
*                                          IS CURRENT.             0180
*                                            FOR FRRS-             0180
*                                          IF THE VALUE IS NON ZERO
*                                          THE FRR IS RECEIVING    0180
*                                          CONTROL IN THE MASTER   0180
*                                          SCHEDULER ADDRESS SPACE 0180
*                                          AND CANNOT ADDRESS THE  0180
*                                          PRIVATE AREA OF THE     0180
*                                          FAILING ADDRESS SPACE.  0180
*                                            FOR ESTA-             0180
*                                          IF THE VALUE IS NON ZERO
*                                          ENTRY IS DUE TO CROSS   0180
*                                          MEMORY ABTERM.            */
*    6 SDWAIOFS     CHAR(1),            /* THIS IS THE CURRENT I/O 0180
*                                          STATUS.(THE I/O         0180
*                                          PROCESSING REQUESTED BY 0180
*                                          THE FIRST (E)STA EXIT   0180
*                                          IS THE ONLY REQUEST     0180
*                                          HONORED )                 */
*       8 SDWAIOQR    BIT(1),           /*  ON,I/O FOR FAILING     0180
*                                          PROGRAM HAS BEEN QUIESCED
*                                          AND IS RESTOREABLE        */
*       8 SDWAIOHT    BIT(1),           /* ON,I/O FOR FAILING      0180
*                                          PROGRAM IS HALTED AND IS
*                                          NOT RESTOREABLE           */
*       8 SDWANOIO    BIT(1),           /* ON,FAILING PROGRAM HAS NO
*                                          I/O OUTSTANDING           */
*       8 SDWANIOP    BIT(1),           /* ON,USER REQUESTED NO I/O
*                                          PROCESSING                */
*      8 *            BIT(4),           /* RESERVED                  */
*   6 *              CHAR(1),           /* RESERVED                  */
*   6 SDWARTYA        PTR(31),          /* ADDRESS OF RETRY ROUTINE  */
*   6 SDWARECA        PTR(31),          /* ADDRESS OF VARIABLE     0180
*                                          RECORDING AREA WITHIN SDWA*/
*   6 SDWACPUA        CHAR(4) BDY(WORD),/* ADDRESS OF CPU HOLDING  0180
*                                          RESOURCE WHICH CAUSES   0180
*                                          VALID SPIN ON CURRENT   0180
*                                          CPU-USED WITH RESTART KEY
*                                          ERROR TYPE.IF THIS FIELD
*                                          IS VALIDLY FILLED IN BY AN
*                                          FRR THE FRRS MAINLINE   0180
*                                          PROGRAM WILL BE RESUMED AT
*                                          THE NEXT SEQUENTIAL     0180
*                                          INSTRUCTION. NOT VALID FOR
*                                          ESTAE EXITS.              */
*     7 *             CHAR(2),          /* RESERVED                  */
*     7 SDWALCPU     PTR(15) BDY(HWORD),/* LOGICAL ADDRESS OF CPU  0180
*                                          HOLDING RESOURCE          */
*   6 SDWAPARQ        CHAR(4),          /* FLAGS SET BY RECOVERY   0180
*                                          ROUTINE TO REQUEST FUR- 0180
*                                          THEIR PROCESSING ACTION   */
*     7  SDWARCDE     CHAR(1),          /* RETURN CODE FROM RECOVERY
*                                          ROUTINE TO INDICATE RETRY
*                                          OR TERMINATION ACTIONS :
*                                          0, CONTINUE WITH TERMINATION
*                                          THIS INDICATION IMPLIES 0180
*                                          PERCOLATION             0180
*                                          4, RETRY                0180
*                                          16, PREVENT FURTHER (E)STAI
*                                              PROCESSING            */
*     7 SDWAACF2      CHAR(1),          /* FLAGS TO INDICATE ADDITIO-
*                                          NAL PROCESSING REQUESTS   */
*       8 SDWARCRD     BIT(1),          /* ON,RECORDING REQUESTED    */
*       8 *            BIT(1),          /* RESERVED                  */
*       8 SDWASPIN     BIT(1),          /* ON,PROGRAM INTERRUPTED  0180
*                                          VIA THE RESTART KEY WAS 0180
*                                          IN A VALID SPIN(SET BY  0180
*                                          THE SETRP MACRO WHEN CPU
*                                          ADDRESS IS SPECIFIED ALONG
*                                          WITH CPU ADDRESS IN SDWACPUA
*                                          FIELD TO ALLOW RESTART  0180
*                                          OF ALTERNATE CPU)         */
*       8 *            BIT(1),          /* RESERVED                  */
*       8 SDWAUPRG     BIT(1),          /* ON,UPDATED REGISTERS    0180
*                                          STARTING WITH SDWASR00  0180
*                                          ARE TO BE USED FOR RETRY  */
*       8 SDWAFREE     BIT(1),          /* ON,SDWA/RTCA TO BE FREED
*                                          PRIOR TO RETRY          0180
*                                          ONLY VALID FOR ESTA EXITS */
*       8 *            BIT(2),          /* RESERVED                  */
*     7 SDWAACF3      CHAR(1),          /* FLAGS INDICATING WHAT   0180
*                                          GLOBAL LOCKS ARE TO BE  0180
*                                          FREED (KEY 0 SUPERVISOR 0180
*                                          ONLY.)                  0180
*                                          ONLY VALID FOR FRRS       */
*       8 *           BIT(3),           /* RESERVED                  */
*       8 SDWADISP    BIT(1),           /* ON THE DISPATCHER LOCK    */
*       8 SDWAASMP    BIT(1),           /* ON, THE ASMPAT LOCK       */
*       8 SDWASALL    BIT(1),           /* ON, THE SALLOC LOCK       */
*       8 SDWAIPRG    BIT(1),           /* ON, THE IOSYNCH LOCK      */
*       8 SDWAICAT    BIT(1),           /* ON,THE IOSCAT LOCK        */
*     7 SDWAACF4    CHAR(1),            /* ADDITIONAL LOCKS TO BE  0180
*                                          FREED                     */
*       8 SDWAIUCB    BIT(1),           /* ON,THE IOSUCB LOCK        */
*       8 SDWAILCH    BIT(1),           /* ON, THE IOSLCH LOCK       */
*       8 SDWATNCB    BIT(1),           /* ON,THE NCB LOCK           */
*       8 SDWATDNB    BIT(1),           /* ON,THE DNCB LOCK          */
*       8 SDWATADB    BIT(1),           /* ON,THE ACBDEBS LOCK       */
*       8 SDWAOPTM    BIT(1),           /* ON,THE SYSTEM RESOURCE  0180
*                                          MGR(SRM) LOCK             */
*       8 SDWACMS     BIT(1),           /* ON,THE CMS LOCK           */
*       8 SDWAFLLK    BIT(1),           /* ON,THE LOCAL LOCK         */
*   6 SDWALKWA    CHAR(36) BDY(WORD),   /* LOCK AREA                 */
*     7 SDWALKWS    CHAR(32) BDY(WORD), /* LOCKWORDS REQUIRED TO FREE
*                                          THE GLOBAL LOCKS        0180
*                                          ONLY USED FOR FRRS        */
*       8 SDWAICLW     PTR(31),         /* LOCKWORD FOR THE IOSCAT 0180
*                                          LOCK                      */
*       8 SDWAIULW      PTR(31),        /* LOCKWORD FOR THE IOSUCB 0180
*                                          LOCK                      */
*       8 SDWAILLW      PTR(31),        /* LOCKWORD FOR THE IOSLCH 0180
*                                          LOCK                      */
*       8 SDWAIPLW      PTR(31),        /* LOCKWORD FOR THE IOSYNCH
*                                          LOCK                      */
*       8 SDWAAPLW      PTR(31),        /* LOCKWORD FOR THE ASMPAT 0180
*                                          LOCK                      */
*       8 SDWATNLW      PTR(31),        /* LOCKWORD FOR THE NCB    0180
*                                          LOCK                      */
*       8 SDWATDLW      PTR(31),        /* LOCKWORD FOR THE DNCB   0180
*                                          LOCK                      */
*       8 SDWATALW      PTR(31),        /* LOCKWORD FOR THE ACBDEBS
*                                          LOCK                      */
*     7 *             PTR(31),          /* RESERVED                  */
*   6 SDWARECP        CHAR(24),         /* RECORDING PARAMETERS    0180
*                                          (MODULE ,CSECT,AND RECOVERY
*                                          ROUTINE NAME-RESPECTIVELY)*/
*     7 SDWAMODN      CHAR(8),          /* THE MODULE NAME         0180
*                                          INVOLVED IN THE ERROR   0180
*                                          (SUPPLIED BY THE RECOVERY
*                                          ROUTINE)                  */
*     7 SDWACSCT      CHAR(8),          /* THE CSECT NAME INVOLVED 0180
*                                          IN THE ERROR(SUPPLIED   0180
*                                          BY THE RECOVERY ROUTINE)  */
*     7 SDWAREXN      CHAR(8),          /* THE RECOVERY ROUTINE NAME
*                                          HANDLING THE ERROR        */
*   6 SDWADPLA        PTR(31),          /* POINTER TO DUMP         0180
*                                          PARAMETER LIST RESIDING 0180
*                                          IN SDWA.                  */
*   6 SDWASNPA        CHAR(8),          /* SNAP PARAMETER LIST FLAGS */
*     7 SDWADUMP        CHAR(4),        /* DUMP CHARACTERISTICS      */
*       8 SDWADPID      CHAR(1),        /* ID OF DUMP REQUESTED      */
*       8 SDWADPFS      CHAR(1),        /* DUMP FLAGS                */
*         9 SDWADPT      BIT(1),        /* ALWAYS  OFF,INDICATES SNAP
*                                          DUMP  REQUEST             */
*         9 SDWADLST     BIT(1),        /* ALWAYS ON, INDICATES OS/VS2
*                                          REL. 2 DUMP  PARAMETER LIST
*                                          SUPPLIED. USED BY RTM TO
*                                          INDICATE DUMP OPTIONS   0180
*                                          ARE AVAILABLE IN THE SDWA */
*         9 *            BIT(4),        /* RESERVED.                 */
*         9  SDWASLST    BIT(1),        /* ON,STORAGE LIST SUPPLIED
*                                          FOR DUMP                  */
*         9 *            BIT(1),        /* RESERVED                  */
*       8 *             CHAR(2),        /* RESERVED                  */
*     7 SDWADDAT        CHAR(4),        /* SDATA/PDATA OPTIONS       */
*       8 SDWASDAT      CHAR(1),        /* SDATA OPTIONS             */
*         9 SDWANUC      BIT(1),        /* DISPLAY NUCLEUS           */
*         9 SDWASQA      BIT(1),        /* DISPLAY SQA               */
*         9 SDWALSQA     BIT(1),        /* DISPLAY LSQA              */
*         9 SDWASWA      BIT(1),        /* DISPLAY SWA               */
*         9 SDWAGTF      BIT(1),        /* DISPLAY GTF INCORE TRACE
*                                          TABLE                     */
*         9 SDWACBS      BIT(1),        /* FORMAT AND DISPLAY CONTROL
*                                          BLOCKS                    */
*         9 SDWAQQS      BIT(1),        /* FORMAT AND DISPLAY QCBS/
*                                          QELS                      */
*         9 *            BIT(1),        /* RESERVED                  */
*       8 *             CHAR(1),        /* RESERVED                  */
*       8 SDWAPDAT      CHAR(1),        /* PDATA OPTIONS             */
*         9 SDWADSAS     BIT(1),        /* DISPLAY SAVE AREAS        */
*         9 SDWADSAH     BIT(1),        /* DISPLAY SAVE AREA HEADER  */
*         9 SDWADREG     BIT(1),        /* DISPLAY REGISTERS         */
*         9 SDWATLPA     BIT(1),        /* DISPLAY LPA MODULES OF  0180
*                                          TASK                      */
*         9 SDWATJPA     BIT(1),        /* DISPLAY JPA MODULES OF  0180
*                                          TASK                      */
*         9 SDWADPSW     BIT(1),        /* DISPLAY PSW               */
*         9 SDWAUSPL     BIT(1),        /* DISPLAY USER SUBPOOLS     */
*         9 *            BIT(1),        /* RESERVED                  */
*       8 *             CHAR(1),        /* RESERVED                  */
*   6 SDWADPSA     CHAR(36) BDY(WORD),  /* DUMP RANGES AREA          */
*     7 SDWADPSL    CHAR(32) BDY(WORD), /* DUMP STORAGE LISTS(MAX 4
*                                          RANGES AVAILABLE)         */
*       8 SDWAFRM1      PTR(31),        /* BEGINNING ADDRESS FOR   0180
*                                          STORAGE RANGE 1           */
*       8 SDWATO1       PTR(31),        /* ENDING ADDRESS FOR STORAGE
*                                          RANGE 1                   */
*       8 SDWAFRM2      PTR(31),        /* BEGINNING ADDRESS FOR   0180
*                                          STORAGE RANGE 2           */
*       8 SDWATO2       PTR(31),        /* ENDING ADDRESS FOR STORAGE
*                                          RANGE 2                   */
*       8 SDWAFRM3      PTR(31),        /* BEGINNING ADDRESS FOR   0180
*                                          STORAGE RANGE 3           */
*       8 SDWATO3       PTR(31),        /* ENDING ADDRESS FOR STORAGE
*                                          RANGE 3                   */
*       8 SDWAFRM4      PTR(31),        /* BEGINNING ADDRESS FOR   0180
*                                          STORAGE RANGE 4           */
*       8 SDWATO4       PTR(31),        /* ENDING ADDRESS FOR STORAGE
*                                          RANGE 4                   */
*     7 *               PTR(31),        /* RESERVED                  */
*   6 SDWARCPL    CHAR(28) BDY(WORD),   /* RESERVED FOR RTM USE      */
*   6 SDWACOMP       PTR(31),           /* THIS WORD IS PROVIDED FOR
*                                          COMMUNICATION OF ADDITIONAL
*                                          RECOVERY DATA ON A PER  0180
*                                          COMPONENT BASIS (FOR    0180
*                                          OS/VS2 RELEASE 2 THIS   0180
*                                          FIELD IS ONLY USED BY   0180
*                                          DATA MANAGER).            */
*   6 *                PTR(31),         /* RESERVED                  */
*   6 SDWARA         CHAR(112),         /* VARIABLE RECORDING AREA 0180
*                                          PREFIXED BY TWO BYTE    0180
*                                          LENGTH FIELD OF AREA    0180
*                                          AND A TWO BYTE FIELD WITH
*                                          LENGTH OF USER SUPPLIED 0180
*                                          INFORMATION               */
*     7 SDWAVRAL      CHAR(2),          /* LENGTH OF VARIABLE RECORD-
*                                          ING AREA                  */
*     7 SDWADPVA      CHAR(1),          /* DEFINES DUMPING OF DATA IN
*                                          VARIABLE AREA.            */
*       8 SDWAHEX      BIT(1),          /* DATA TO BE DUMPED BY EREP
*                                          IN HEX.                   */
*       8 SDWAEBC      BIT(1),          /* DATA TO BE DUMPED BY EREP
*                                          EBCDIC.                   */
*        8 *           BIT(6),          /* RESERVED                  */
*     7 SDWAURAL      CHAR(1),          /* LENGTH OF USER SUPPLIED 0180
*                                          INFORMATION               */
*     7 SDWAVRA       CHAR(108),        /* VARIABLE RECORDING AREA   */
*   6 *        CHAR(0) BDY(DWORD) ;        /*ROUND UP TO DOUBLE WORD */
*/* THESE CONSTANTS MAP RETURN CODES FROM AN EXIT IN FIELD           */
*/* SDWARCDE                                                         */
*DECLARE                                                           0181
*  SDWACWT  CONSTANT(0),                /* CONTINUE WITH TERMINATION.
*                                          THIS INDICATION IMPLIES 0181
*                                          PERCOLATION               */
*  SDWARETY CONSTANT(4),                /* RETRY USING RETRY ADDRESS
*                                          IN SDWARTYA FIELD         */
*  SDWAPSTI CONSTANT(16);               /* PREVENT FURTHER (E)STAI 0181
*                                          PROCESSING                */
*    DECLARE  /*****  P A R A M E T E R S  ***************************/
*                                                                  0182
*      STAETYPE              /*  TYPE OF CALL (SET OR CANCEL)        */
*                            CHAR (8),                             0182
*      BLOCKPTR              /* POINTER TO CONTROL BLOCK SET UP BY   */
*                            /* CALLER                               */
*                            POINTER (31),                         0182
*                                                                  0182
*      BLOCKID               /* CONTROL BLOCK IDENTIFIER             */
*                            CHAR (4) DEFINED (BLOCKPTR);          0182
*                                                                  0182
*    DECLARE  /*****  I N T E R N A L S  *****************************/
*                                                                  0183
*      POOLID                /*  SUB POOL IDENTIFIER                 */
*                            CHAR (4) INIT ('SA10'),               0183
*                                                                  0183
*      MODID                 /*  INTER-MODULE TRACE IDENTIFIER       */
*                            CHAR(4) INIT('SA10'),                 0183
*                                                                  0183
*      /***** LOCAL VARIABLES AND CONSTANTS **************************/
*                                                                  0183
*      SAVEREGS              /* SAVEAREA FOR REGISTERS FOR ABEND     */
*                            /* PROCESSING                           */
*                            CHAR (64),                            0183
*                                                                  0183
*      BADARG                /* UABORT CODE                          */
*                            FIXED (8) CONSTANT (40),              0183
*                                                                  0183
*      STAEPTR               /* POINTER TO COPY OF CONTROL BLOCK     */
*                            /* BUILT IN THIS PROGRAM                */
*                            POINTER (31),                         0183
*                                                                  0183
*      STAWORK              /* CONTROL BLOCK BUILT IN THIS PROGRAM   */
*                            CHAR (*) BASED (STAEPTR),             0183
*                                                                  0183
*      CSTAID                /* IDENTIFIER PICKED UP FROM THE        */
*                            /* CONTROL BLOCK BEING EXAMINED         */
*                            CHAR(4),                              0183
*                                                                  0183
*      CBLKFLG               /* FLAG TO INDICATE IF CONTROL BLOCK    */
*                            /* OF INTEREST WAS FOUND                */
*                            BIT (1),                              0183
*                                                                  0183
*      FOUND                 /* FLAG TO INDICATE CONTROL BLOCK       */
*                            /* OF INTEREST WAS FOUND                */
*                            BIT (1) CONSTANT ('1'B),              0183
*                                                                  0183
*      NOTFOUND              /* FLAG TO INDICATE CONTROL BLOCK       */
*                            /* OF INTEREST WAS NOT FOUND            */
*                            BIT (1) CONSTANT ('0'B),              0183
*                                                                  0183
*      /***** MODULE PATCH AREA DECLARATIONS *************************/
*                                                                  0183
*      1 FIXAREA  STATIC,    /*  MODULE PATCH AREA                   */
*        2 * (256)           CHAR(1) INIT((256) '00'X);            0183
*                                                                  0183
         EJECT
*                                                                  0184
*/*****  B E G I N    E X E C U T I O N  *****************************/
*                                                                  0184
*    IF GDTDBG = NULLPTR                                           0184
*      THEN;                                                       0184
         L     @10,@PC00001                                        0184
         L     @10,GDTDBG(,@10)                                    0184
         LTR   @10,@10                                             0184
         BZ    @RT00184                                            0184
*      ELSE                                                        0186
*        CALL ICKDB010 (GDTTBL, 'SA10');                           0186
*                                                                  0186
         L     @10,@PC00001                                        0186
         ST    @10,@AL00001                                        0186
         LA    @15,@CC00858                                        0186
         ST    @15,@AL00001+4                                      0186
         MVI   @AL00001+4,X'80'                                    0186
         L     @15,GDTDBG(,@10)                                    0186
         LA    @01,@AL00001                                        0186
         BALR  @14,@15                                             0186
*/* INDICATE INITIALLY A SUCCESSFUL COMPLETION                       */
*   TESTRC = 0;                                                    0187
@RT00184 SLR   TESTRC,TESTRC                                       0187
*/* IF A STAE ENVIRONMENT IS TO BE SET UP                            */
*   IF STAETYPE = 'SET'                                            0188
*/*   THEN SET_STAE_ENVIRONMENT                                      */
*     THEN CALL SETSTAE;                                           0188
         L     @10,@PC00001+4                                      0188
         CLC   STAETYPE(3,@10),@CC00873                            0188
         BNE   @RF00188                                            0188
         BAL   @14,SETSTAE                                         0189
*/*   ELSE                                                           */
*     ELSE DO;                                                     0190
         B     @RC00188                                            0190
@RF00188 DS    0H                                                  0191
*/*     IF A STAE ENVIRONMENT IS TO BE CLEANED UP                    */
*       IF STAETYPE = 'CANCEL'                                     0191
*/*       THEN CANCEL_STAE_ENVIRONMENT                               */
*         THEN CALL CANSTAE;                                       0191
         L     @10,@PC00001+4                                      0191
         CLC   STAETYPE(6,@10),@CC00875                            0191
         BNE   @RF00191                                            0191
         BAL   @14,CANSTAE                                         0192
*/*       ELSE ABORT                                                 */
*         ELSE DO;                                                 0193
         B     @RC00191                                            0193
@RF00191 DS    0H                                                  0194
*                   DO;                                            0194
*                     RESPECIFY(REG13,REG14,REG15) RSTD;           0195
*                     REG15 = BADARG;                              0196
         LA    REG15,40                                            0196
*                     REG14 = GDTABT;                              0197
         L     @10,@PC00001                                        0197
         L     REG14,GDTABT(,@10)                                  0197
*                     REG13 = GDTABH;                              0198
         L     REG13,GDTABH(,@10)                                  0198
*                     GEN(BR    REG14);                            0199
         BR    REG14
*                     RESPECIFY(REG13,REG14,REG15)UNRSTD;          0200
*                   END; END;                                      0201
*/*     END-ELSE                                                     */
*       END;                                                       0203
@RC00191 DS    0H                                                  0204
*/*  END-PROCEDURE USTAE                                             */
*    IF GDTDBG = NULLPTR                                           0204
*      THEN;                                                       0204
@RC00188 L     @10,@PC00001                                        0204
         L     @10,GDTDBG(,@10)                                    0204
         LTR   @10,@10                                             0204
         BZ    @RT00204                                            0204
*      ELSE                                                        0206
*        CALL ICKDB010 (GDTTBL,'SA19');                            0206
         L     @10,@PC00001                                        0206
         ST    @10,@AL00001                                        0206
         LA    @15,@CC00877                                        0206
         ST    @15,@AL00001+4                                      0206
         MVI   @AL00001+4,X'80'                                    0206
         L     @15,GDTDBG(,@10)                                    0206
         LA    @01,@AL00001                                        0206
         BALR  @14,@15                                             0206
*    CALL ICKSAEP0(GDTTBL,MODID);                                  0207
@RT00204 L     @10,@PC00001                                        0207
         ST    @10,@AL00001                                        0207
         LA    @15,MODID                                           0207
         ST    @15,@AL00001+4                                      0207
         MVI   @AL00001+4,X'80'                                    0207
         L     @15,GDTEPL(,@10)                                    0207
         LA    @01,@AL00001                                        0207
         BALR  @14,@15                                             0207
         EJECT
*/*****  START OF SPECIFICATIONS  ************************************/
*/*                                                                  */
*/*  SUB-PROCEDURE NAME:  SETSTAE                                    */
*/*                                                                  */
*/*  DESCRIPTIVE NAME:  SET_STAE_ENVIRONMENT                         */
*/*                                                                  */
*/*  FUNCTION:                                                       */
*/*                                                                  */
*/*    THE FUNCTION OF THIS PROCEDURE IS TO SET UP A STAE            */
*/*    ENVIRONMENT AS PER THE CALLERS REQUEST. THE CALLERS           */
*/*    CONTROL BLOCK IS CHAINED TO ANY PRECEDING CALLERS             */
*/*    CONTROL BLOCKS. THE PRIMARY ANCHOR TO THESE CONTROL           */
*/*    BLOCKS EXISTS IN THE GDT HISTORICAL DATA AREA. THIS           */
*/*    PROGRAM HAS NO KNOWLEDGE OF THE ACTUAL INFORMATION            */
*/*    THAT THE CALLER WISHES TO SAVE IN HIS OWN PRIVATE             */
*/*    CONTROL BLOCK. HOWEVER, THE CALLER WILL BE PASSED             */
*/*    A POINTER TO THE SYSTEM DIAGNOSTIC WORK AREA (SDWA),          */
*/*    WHEN AN ABEND SITUATION OCCURS.                               */
*/*    NOTE THAT ANY CALLER IN DMS CAN REQUEST A STAE                */
*/*    ENVIRONMENT. THIS PROGRAM WILL NOT ISSUE A STAE               */
*/*    MACRO EVERYTIME. INSTEAD IT WILL ADD THE CALLERS              */
*/*    CONTROL BLOCK TO THE CHAIN WHOSE ORIGIN EXISTS                */
*/*    IN THE GDT HISTORICAL DATA AREA.                              */
*/*                                                                  */
*/*****  END OF SPECIFICATIONS  **************************************/
*                                                                  0208
*                                                                  0208
*/*  SUB-PROCEDURE SET_STAE_ENVIRONMENT                              */
*    SETSTAE:                                                      0208
*      PROCEDURE;                                                  0208
         B     @PB00002                                            0208
SETSTAE  STM   @14,@12,@SA00002                                    0208
*      /*****  LOCAL DECLARATIONS ************************************/
*          GENERATE DATA DEFS(STAELIST);/*LIST FORM ESTAE            */
*            /*DEFINE STAE ARGUMENT LIST                             */
*DCL     STAELIST  CHAR(20) GEND STATIC LOCAL;                     0210
*                                   /*DEF STAELIST TO PLS            */
*DCL     STAEARG   CHAR(20) BDY(WORD);                             0211
*    OLDERID2 = NEWERID2;                                          0212
         L     @10,@PC00001                                        0212
         L     @04,GDTTR2(,@10)                                    0212
         MVC   @TS00001(95),NEWERID2(@04)                          0212
         MVC   OLDERID2(95,@04),@TS00001                           0212
*    NEWID2 =  'STSS';                                             0213
         MVC   NEWID2(4,@04),@CC00884                              0213
*/*  ESTABLISH ADDRESSABILITY TO INVOKERS CONTROL BLOCK              */
*    RESPECIFY STAEPARM BASED (BLOCKPTR);                          0214
*/*  GET SPACE FOR CONTROL BLOCK COPY TO BE PLACED ON CHAIN          */
*    CALL ICKSAGS0 (GDTTBL                                         0215
*            ,STALEN                                               0215
*            ,STAEPTR                                              0215
*            ,SETZERO);                                            0215
         ST    @10,@AL00001                                        0215
         L     @04,@PC00001+8                                      0215
         L     @04,BLOCKPTR(,@04)                                  0215
         LA    @04,STALEN(,@04)                                    0215
         ST    @04,@AL00001+4                                      0215
         LA    @04,STAEPTR                                         0215
         ST    @04,@AL00001+8                                      0215
         LA    @04,@CC00145                                        0215
         ST    @04,@AL00001+12                                     0215
         MVI   @AL00001+12,X'80'                                   0215
         L     @15,GDTGSP(,@10)                                    0215
         LA    @01,@AL00001                                        0215
         BALR  @14,@15                                             0215
*/*  COPY THE CONTROL BLOCK AS SET UP BY INVOKER INTO WORK AREA      */
*    STAWORK (1:STALEN) = STAEPARM (1:STALEN);                     0216
         L     @10,STAEPTR                                         0216
         L     @04,@PC00001+8                                      0216
         L     @04,BLOCKPTR(,@04)                                  0216
         L     @15,STALEN(,@04)                                    0216
         BCTR  @15,0                                               0216
         EX    @15,@SM00916                                        0216
*/*  MAKE THE WORK AREA COPY MAP INTO PARM LIST STRUCTURE            */
*    RESPECIFY STAEPARM BASED (STAEPTR);                           0217
*/*  IF THIS IS THE FIRST REQUEST FOR A STAE ENVIRONMENT             */
*    IF SAHSTA = NULLPTR                                           0218
*/*    THEN                                                          */
*      THEN DO;                                                    0218
         SLR   @04,@04                                             0218
         L     @15,@PC00001                                        0218
         L     @14,GDTSAH(,@15)                                    0218
         C     @04,SAHSTA(,@14)                                    0218
         BNE   @RF00218                                            0218
*/*      SET POINTER OF CONTROL BLOCK IN HISTORICAL DATA AREA        */
*        SAHSTA = STAEPTR;                                         0220
         ST    @10,SAHSTA(,@14)                                    0220
*/*      SET FORWARD POINTER IN THE CONTROL BLOCK TO NULL            */
*        STAFPTR = NULLPTR;                                        0221
         ST    @04,STAFPTR(,@10)                                   0221
*/*      SET BACKWARD POINTER TO POINT TO THE HISTORICAL DATA AREA   */
*        STABPTR = ADDR(SAHSTA);                                   0222
         LA    @14,SAHSTA(,@14)                                    0222
         ST    @14,STABPTR(,@10)                                   0222
*/*      PLACE THE POINTER TO THE GDT IN THE CONTROL BLOCK           */
*        STAGDT = ADDR(GDTTBL);                                    0223
         ST    @15,STAGDT(,@10)                                    0223
*/*      SAVE THE REGISTERS TO BE USED BY EXIT ROUTINE               */
*        RFY (REG1) RSTD;                                          0224
*        REG1 = ADDR(SAVEREGS);                                    0225
         LA    REG1,SAVEREGS                                       0225
*        GEN (STM REG0,REG15,0(REG1));                             0226
         STM REG0,REG15,0(REG1)
*        RFY (REG1) UNRSTD;                                        0227
*        STARPTR = ADDR (SAVEREGS);                                0228
         L     @10,STAEPTR                                         0228
         LA    @15,SAVEREGS                                        0228
         ST    @15,STARPTR(,@10)                                   0228
*/*      ISSUE THE STAE OR ESTAE MACRO                               */
*        RESPECIFY (REG2,REG3,REG4) RESTRICTED;                    0229
*        STAEARG = STAELIST;                                       0230
         MVC   STAEARG(20),STAELIST                                0230
*        REG2 = ADDR(EXITSTAE);                                    0231
         LA    REG2,EXITSTAE                                       0231
*        REG3 = ADDR(STAEPARM);                                    0232
         LR    REG3,@10                                            0232
*        REG4 = ADDR(STAEARG);                                     0233
         LA    REG4,STAEARG                                        0233
*LSTAE1: GEN(ESTAE   (REG2),PARAM=(REG3),TERM=YES,MF=(E,(REG4)));  0234
LSTAE1   ESTAE   (REG2),PARAM=(REG3),TERM=YES,MF=(E,(REG4))
*        RESPECIFY (REG2,REG3,REG4) UNRESTRICTED;                  0235
*        RESPECIFY RTNREG RSTD;                                    0236
*        TESTRC = RTNREG;                                          0237
         LR    TESTRC,RTNREG                                       0237
*        RESPECIFY RTNREG UNRSTD;                                  0238
*/*      IF SET UP OF THE STAE ENVIRONMENT NOT SUCCESSFUL            */
*        IF TESTRC ^= 0                                            0239
*/*        THEN                                                      */
*          THEN DO;                                                0239
         SLR   @10,@10                                             0239
         CR    TESTRC,@10                                          0239
         BE    @RF00239                                            0239
*/*          NULLIFY THE POINTER IN THE HISTORICAL DATA AREA         */
*            SAHSTA = NULLPTR;                                     0241
         L     @04,@PC00001                                        0241
         L     @01,GDTSAH(,@04)                                    0241
         ST    @10,SAHSTA(,@01)                                    0241
*/*          ABORT                                                   */
*                                                                  0242
*             DO;                                                  0242
*               RESPECIFY(REG13,REG14,REG15) RSTD;                 0243
*               REG15 = 28;                                        0244
         LA    REG15,28                                            0244
*               REG14 = GDTABT;                                    0245
         L     REG14,GDTABT(,@04)                                  0245
*               REG13 = GDTABH;                                    0246
         L     REG13,GDTABH(,@04)                                  0246
*               GEN(BR    REG14);                                  0247
         BR    REG14
*               RESPECIFY(REG13,REG14,REG15)UNRSTD;                0248
*             END;                                                 0249
*/*          END-THEN                                                */
*            END;                                                  0250
*/*      END-THEN                                                    */
*        END;                                                      0251
*/*    ELSE (THIS IS NOT THE FIRST REQUEST)                          */
*      ELSE DO;                                                    0252
         B     @RC00218                                            0252
@RF00218 DS    0H                                                  0253
*/*      INSERT THE NEW CONTROL BLOCK POINTER IN BACKWARDS CHAIN     */
*        SAHSTA -> STABPTR = STAEPTR;                              0253
         L     @10,STAEPTR                                         0253
         L     @04,@PC00001                                        0253
         L     @04,GDTSAH(,@04)                                    0253
         L     @15,SAHSTA(,@04)                                    0253
         ST    @10,STABPTR(,@15)                                   0253
*/*      INSERT THE NEW CONTROL BLOCK POINTER IN BEGINNING OF CHAIN  */
*        STAFPTR = SAHSTA;                                         0254
         ST    @15,STAFPTR(,@10)                                   0254
*        SAHSTA = STAEPTR;                                         0255
         ST    @10,SAHSTA(,@04)                                    0255
*        STABPTR = ADDR (SAHSTA);                                  0256
         LA    @04,SAHSTA(,@04)                                    0256
         ST    @04,STABPTR(,@10)                                   0256
*/*      END-ELSE                                                    */
*        END;                                                      0257
*    RETURN CODE(TESTRC);                                          0258
@RC00218 LR    @15,TESTRC                                          0258
         L     @14,@SA00002                                        0258
         LM    @00,@12,@SA00002+8                                  0258
         BR    @14                                                 0258
*/*  END-SUB-PROCEDURE SET_STAE_ENVIRONMENT                          */
*    END SETSTAE;                                                  0259
*                                                                  0259
         EJECT
*/*****  START OF SPECIFICATIONS  ************************************/
*/*                                                                  */
*/*  SUB-PROCEDURE NAME:  CANSTAE                                    */
*/*                                                                  */
*/*  DESCRIPTIVE NAME:  CANCEL_STAE_ENVIRONMENT                      */
*/*                                                                  */
*/*  FUNCTION:                                                       */
*/*                                                                  */
*/*    THIS PROCEDURE WILL ELIMINATE A STAE ENVIRONMENT              */
*/*    THAT WAS ORIGINALLY SET UP BY THE SAME CALLER.                */
*/*    IN THE EVENT THAT MORE THAN ONE CALLER HAS REQUESTED          */
*/*    THE SETUP OF A STAE ENVIRONMENT IN THE FIRST PLACE            */
*/*    THE ONLY ACTION TAKEN BY THIS PROGRAM IS TO                   */
*/*    ELIMINATE THE SPECIFIC CALLERS CONTROL BLOCK FROM             */
*/*    THE CHAIN WHOSE ORIGIN EXISTS IN THE GDT HISTORICAL           */
*/*    AREA. THIS MEANS THAT TO COMPLETELY ELIMINATE THE             */
*/*    STAE ENVIRONMENT FROM THE SYSTEM ALL THE CALLERS              */
*/*    WHO REQUESTED THE SETUP IN THE FIRST PLACE MUST               */
*/*    EVENTUALLY CALL THIS PROGRAM TO CANCEL THEIR                  */
*/*    INDIVIDUAL STAE ENVIRONMENTS. NOTE HOWEVER, THAT              */
*/*    AS FAR AS THE SYSTEM IS CONCERNED THERE EXISTS                */
*/*    ONLY A SINGLE STAE ENVIRONMENT.                               */
*/*                                                                  */
*/*****  END OF SPECIFICATIONS  **************************************/
*                                                                  0260
*                                                                  0260
*/*  SUB-PROCEDURE CANCEL_STAE_ENVIRONMENT                           */
*    CANSTAE:                                                      0260
*      PROCEDURE;                                                  0260
CANSTAE  STM   @14,@12,@SA00003                                    0260
*    OLDERID2 = NEWERID2;                                          0261
         L     @10,@PC00001                                        0261
         L     @04,GDTTR2(,@10)                                    0261
         MVC   @TS00001(95),NEWERID2(@04)                          0261
         MVC   OLDERID2(95,@04),@TS00001                           0261
*    NEWID2 = 'STCS';                                              0262
         MVC   NEWID2(4,@04),@CC00894                              0262
*/*  IF THE POINTER IN THE HISTORICAL DATA AREA IS NULL              */
*    IF SAHSTA = NULLPTR                                           0263
*/*    THEN ABORT                                                    */
*      THEN DO;                                                    0263
         L     @04,GDTSAH(,@10)                                    0263
         L     @04,SAHSTA(,@04)                                    0263
         LTR   @04,@04                                             0263
         BNZ   @RF00263                                            0263
*                DO;                                               0265
*                  RESPECIFY(REG13,REG14,REG15) RSTD;              0266
*                  REG15 = 33;                                     0267
         LA    REG15,33                                            0267
*                  REG14 = GDTABT;                                 0268
         L     REG14,GDTABT(,@10)                                  0268
*                  REG13 = GDTABH;                                 0269
         L     REG13,GDTABH(,@10)                                  0269
*                  GEN(BR    REG14);                               0270
         BR    REG14
*                  RESPECIFY(REG13,REG14,REG15)UNRSTD;             0271
*                END; END;                                         0272
*/*  IF NO ERRORS FOUND SO FAR                                       */
*    IF TESTRC = 0                                                 0274
*/*    THEN                                                          */
*      THEN DO;                                                    0274
@RF00263 LTR   TESTRC,TESTRC                                       0274
         BNZ   @RF00274                                            0274
*/*      SEARCH THE CHAIN FOR THE PROPER CONTROL BLOCK               */
*        RESPECIFY STAEPARM BASED(STAEPTR);                        0276
*        CBLKFLG = NOTFOUND;                                       0277
         NI    CBLKFLG,B'01111111'                                 0277
*        STAEPTR = SAHSTA;                                         0278
         L     @10,@PC00001                                        0278
         L     @10,GDTSAH(,@10)                                    0278
         MVC   STAEPTR(4),SAHSTA(@10)                              0278
*        DO WHILE CBLKFLG = NOTFOUND & STAEPTR ^= NULLPTR ;        0279
         B     @DE00279                                            0279
@DL00279 DS    0H                                                  0280
*          IF STAID = BLOCKID                                      0280
*            THEN CBLKFLG = FOUND;                                 0280
         L     @10,@PC00001+8                                      0280
         L     @04,STAEPTR                                         0280
         CLC   STAID(4,@04),BLOCKID(@10)                           0280
         BNE   @RF00280                                            0280
         OI    CBLKFLG,B'10000000'                                 0281
*            ELSE STAEPTR = STAFPTR;                               0282
         B     @RC00280                                            0282
@RF00280 L     @10,STAEPTR                                         0282
         L     @10,STAFPTR(,@10)                                   0282
         ST    @10,STAEPTR                                         0282
*        END;                                                      0283
@RC00280 DS    0H                                                  0283
@DE00279 TM    CBLKFLG,B'10000000'                                 0283
         BNZ   @DC00279                                            0283
         L     @10,STAEPTR                                         0283
         LTR   @10,@10                                             0283
         BNZ   @DL00279                                            0283
@DC00279 DS    0H                                                  0284
*/*      IF THE PROPER CONTROL BLOCK WAS NOT FOUND                   */
*        IF CBLKFLG = NOTFOUND                                     0284
*/*        THEN ABORT                                                */
*          THEN DO;                                                0284
         TM    CBLKFLG,B'10000000'                                 0284
         BNZ   @RF00284                                            0284
*                    DO;                                           0286
*                      RESPECIFY(REG13,REG14,REG15) RSTD;          0287
*                      REG15 = 33;                                 0288
         LA    REG15,33                                            0288
*                      REG14 = GDTABT;                             0289
         L     @10,@PC00001                                        0289
         L     REG14,GDTABT(,@10)                                  0289
*                      REG13 = GDTABH;                             0290
         L     REG13,GDTABH(,@10)                                  0290
*                      GEN(BR    REG14);                           0291
         BR    REG14
*                      RESPECIFY(REG13,REG14,REG15)UNRSTD;         0292
*                    END; END;                                     0293
*/*        ELSE (PROPER CONTROL BLOCK FOUND)                         */
*          ELSE DO;                                                0295
         B     @RC00284                                            0295
@RF00284 DS    0H                                                  0296
*/*          REMOVE THE CONTROL BLOCK POINTER FROM THE CHAIN         */
*            STABPTR -> STAFPTR = STAFPTR;                         0296
         L     @10,STAEPTR                                         0296
         L     @04,STABPTR(,@10)                                   0296
         L     @10,STAFPTR(,@10)                                   0296
         ST    @10,STAFPTR(,@04)                                   0296
*            IF STAFPTR ^= NULLPTR                                 0297
*              THEN STAFPTR -> STABPTR = STABPTR;                  0297
         LTR   @10,@10                                             0297
         BZ    @RF00297                                            0297
         ST    @04,STABPTR(,@10)                                   0298
*/*          END-ELSE                                                */
*            END;                                                  0299
@RF00297 DS    0H                                                  0300
*/*      END-THEN (NO ERRORS)                                        */
*        END;                                                      0300
@RC00284 DS    0H                                                  0301
*/*  IF NO ERRORS FOUND AS YET                                       */
*    IF TESTRC = 0                                                 0301
*/*    THEN                                                          */
*      THEN DO;                                                    0301
@RF00274 SLR   @10,@10                                             0301
         CR    TESTRC,@10                                          0301
         BNE   @RF00301                                            0301
*/*      IF THE DECHAINED CONTROL BLOCK IS THE LAST                  */
*        IF SAHSTA = NULLPTR                                       0303
*/*        THEN ISSUE MACRO TO CANCEL STAE ENVIRONMENT               */
*          THEN DO;                                                0303
         L     @04,@PC00001                                        0303
         L     @04,GDTSAH(,@04)                                    0303
         C     @10,SAHSTA(,@04)                                    0303
         BNE   @RF00303                                            0303
*LSTAE2:     GEN(ESTAE 0);                                         0305
LSTAE2   ESTAE 0
*/*          END-THEN                                                */
*            END;                                                  0306
*/*      FREE THE SPACE OCCUPIED BY THE UNCHAINED CONTROL BLOCK      */
*        CALL ICKSAFS0 (GDTTBL,STAEPTR);                           0307
@RF00303 L     @10,@PC00001                                        0307
         ST    @10,@AL00001                                        0307
         LA    @04,STAEPTR                                         0307
         ST    @04,@AL00001+4                                      0307
         L     @15,GDTFSP(,@10)                                    0307
         LA    @01,@AL00001                                        0307
         BALR  @14,@15                                             0307
*/*      END-THEN                                                    */
*        END;                                                      0308
*    RETURN CODE(TESTRC);                                          0309
@RF00301 LR    @15,TESTRC                                          0309
         L     @14,@SA00003                                        0309
         LM    @00,@12,@SA00003+8                                  0309
         BR    @14                                                 0309
*/*  END-SUB-PROCEDURE CANCEL_STAE_ENVIRONMENT                       */
*    END CANSTAE;                                                  0310
         EJECT
*/*****  START OF SPECIFICATIONS  ************************************/
*/*                                                                  */
*/*  SUB-PROCEDURE NAME:  EXITSTAE                                   */
*/*                                                                  */
*/*  DESCRIPTIVE NAME:  EXIT ROUTINE                                 */
*/*                                                                  */
*/*  FUNCTION:                                                       */
*/*                                                                  */
*/*    THIS PROCEDURE IS THE CONTROLLING PROGRAM THAT PASSES         */
*/*    CONTROL BACK TO THE CALLERS ROUTINES THAT SET UP THE          */
*/*    STAE ENVIRONMENT IN THE FIRST PLACE. IF THE CALLER            */
*/*    REQUESTED ACCESS TO THE SDWA THIS PROGRAM WILL                */
*/*    PASS BACK TO THE CALLER A POINTER TO THE SDWA.                */
*/*                                                                  */
*/*    IT IS NOT THE RESPONSIBILITY OF THIS ROUTINE TO SET UP THE    */
*/*    ENVIRONMENT FOR A RETRY PROCESS. THIS PROGRAM WILL POST       */
*/*    THE RIGHT RETURN CODE FOR A RETRY BUT IT IS THE CALLERS       */
*/*    RESPONSIBILITY TO SET UP THE ENVIRONMENT FOR A RETRY AND      */
*/*    PASS TO THIS ROUTINE THE ENTRY POINT ADDRESS OF THE RETRY     */
*/*    ROUTINE. ADDITIONALLY FOR ALL THE DMS CALLERS THERE CAN       */
*/*    BE ONLY ONE RETRY ROUTINE ENTRY POINT ADDRESS.                */
*/*                                                                  */
*/*****  END OF SPECIFICATIONS  **************************************/
*                                                                  0311
*                                                                  0311
*/*  SUB-PROCEDURE EXIT_ROUTINE                                      */
*  EXITSTAE:                                                       0311
*    PROCEDURE OPTIONS (NOSAVEAREA,NOSAVE);                        0311
EXITSTAE DS    0H                                                  0312
*      /***** LOCAL DECLARATIONS *************************************/
*      DCL NOSDWA FIXED (8) CONSTANT (12);                         0312
*      DCL RCVRROUT BASED;                                         0313
*      DCL RETCODE  FIXED (31);                                    0314
*      DCL RTNPTR   POINTER (31);                                  0315
*      DCL RETRYPTR POINTER (31);                                  0316
*      DCL SRETPTR  POINTER (31);                                  0317
*      DCL SDWAPTR  POINTER (31) REG(3) RSTD;                      0318
*      DCL HISTPTR  POINTER (31) BASED (STABPTR);                  0319
*      DCL TBLGDT   CHAR (*) BASED (STAGDT);                       0320
*      DCL SAVAREA(3) POINTER(31);                                 0321
*/*  ESTABLISH ADDRESSABILTY TO THE FIRST CONTROL BLOCK              */
*    RFY (REG0,REG1,REG2,REG14,REG15) RSTD;                        0322
*    RFY STAEPARM BASED (REG1);                                    0323
*/*  USE REGISTER 15 AS THE BASE REGISTER                            */
*    GEN SETS(REG15);                                              0324
    USING *,REG15
*/*  IF AN SDWA WAS CREATED                                          */
*    IF REG0 ^= NOSDWA                                             0325
*/*    THEN                                                          */
*      THEN DO;                                                    0325
         CH    REG0,@CH00265                                       0325
         BE    @RF00325                                            0325
*/*      PICK UP THE CURSOR TO THE SDWA                              */
*        SDWAPTR = REG1;                                           0327
         LR    SDWAPTR,REG1                                        0327
*/*      PICK UP THE CURSOR TO THE FIRST CONTROL BLOCK               */
*        REG1 = SDWAPARM;                                          0328
         L     REG1,SDWAPARM(,SDWAPTR)                             0328
*/*      END-THEN                                                    */
*        END;                                                      0329
*/*    ELSE PICK UP THE CURSOR TO THE FIRST CONTROL BLOCK FROM REG 2 */
*      ELSE REG1 = REG2;                                           0330
         B     @RC00325                                            0330
@RF00325 LR    REG1,REG2                                           0330
*/*  PICK UP THE CURSOR TO THE SAVED REGISTERS                       */
*    REG2 = STARPTR;                                               0331
@RC00325 L     REG2,STARPTR(,REG1)                                 0331
*/*  RESTORE THE REGISTERS                                           */
*    GEN (LM REG4,REG13,16(REG2));                                 0332
         LM REG4,REG13,16(REG2)
*    GEN (LM REG1,REG2,4(REG2));                                   0333
         LM REG1,REG2,4(REG2)
*/*  DO NOT USE REGISTER 15 AS THE BASE REGISTER ANYMORE             */
*    GEN (DROP REG15);                                             0334
         DROP REG15
*/*  PICK UP THE OLD BASE REGISTER AGAIN                             */
*    GEN (USING @PSTART,REG12);                                    0335
         USING @PSTART,REG12
*/*  FORCE SAVE AREA CHAIN TO END AT CURRENT SAVE AREA               */
*    SAVAREA (1) = 'SA10';                                         0336
         MVC   SAVAREA(4),@CF00858                                 0336
*    SAVAREA (2) = NULLPTR;                                        0337
         SLR   @10,@10                                             0337
         ST    @10,SAVAREA+4                                       0337
*    SAVAREA (3) = REG13;                                          0338
         ST    REG13,SAVAREA+8                                     0338
*    RFY (REG6) RSTD;                                              0339
*    REG6 = ADDR (SAVAREA (1));                                    0340
         LA    REG6,SAVAREA                                        0340
*    GEN (ST REG6,4(REG13));                                       0341
         ST REG6,4(REG13)
*    RFY (REG6) UNRSTD;                                            0342
*/*  PICK UP THE CURSOR FROM THE HISTORICAL DATA AREA                */
*    STAEPTR = SAHSTA;                                             0343
         L     @10,@PC00001                                        0343
         L     @10,GDTSAH(,@10)                                    0343
         L     @10,SAHSTA(,@10)                                    0343
         ST    @10,STAEPTR                                         0343
*/*  ESTABLISH ADDRESSABILITY TO THE FIRST CONTROL BLOCK AGAIN       */
*    RESPECIFY STAEPARM BASED (STAEPTR);                           0344
*/*  SAVE THE RETURN ADDRESS                                         */
*    RTNPTR = REG14;                                               0345
         LR    RTNPTR,REG14                                        0345
*    RFY (REG1,REG2,REG14,REG15) UNRSTD;                           0346
*/*  IF AN SDWA WAS CREATED                                          */
*    IF REG0 ^= NOSDWA                                             0347
*/*    THEN SAVE THE ADDRESS OF THE SDWA IN THE CONTROL BLOCK        */
*      THEN STASPTR = SDWAPTR;                                     0347
         CH    REG0,@CH00265                                       0347
         BE    @RF00347                                            0347
         ST    SDWAPTR,STASPTR(,@10)                               0348
*/*  ESTABLISH ADDRESSABILITY TO FIRST CALLERS ROUTINE               */
*    RFY RCVRROUT BASED (STAEPA);                                  0349
@RF00347 DS    0H                                                  0350
*/*  INITIALIZE THE RETURN CODE TO MINIMUM                           */
*    RETCODE = 0;                                                  0350
         SLR   @10,@10                                             0350
         ST    @10,RETCODE                                         0350
*/*  PASS CONTROL TO THE FIRST CALLERS RECOVERY ROUTINE              */
*    OLDERID2 = NEWERID2;                                          0351
         L     @10,@PC00001                                        0351
         L     @10,GDTTR2(,@10)                                    0351
         MVC   @TS00001(95),NEWERID2(@10)                          0351
         MVC   OLDERID2(95,@10),@TS00001                           0351
*    NEWID2 = 'STX1';                                              0352
         MVC   NEWID2(4,@10),@CC00913                              0352
*    CALL RCVRROUT                                                 0353
*         (TBLGDT                                                  0353
*         ,STAEPTR                                                 0353
*         ,RETRYPTR                                                0353
*         ,RETCODE);                                               0353
         L     @10,STAEPTR                                         0353
         L     @01,STAGDT(,@10)                                    0353
         ST    @01,@AL00001                                        0353
         LA    @04,STAEPTR                                         0353
         ST    @04,@AL00001+4                                      0353
         LA    @04,RETRYPTR                                        0353
         ST    @04,@AL00001+8                                      0353
         LA    @04,RETCODE                                         0353
         ST    @04,@AL00001+12                                     0353
         L     @15,STAEPA(,@10)                                    0353
         LA    @01,@AL00001                                        0353
         BALR  @14,@15                                             0353
*/*  IF A RETRY ROUTINE WAS SPECIFIED                                */
*    IF RETRYPTR ^= NULLPTR                                        0354
*/*    THEN SAVE THE ENTRY POINT ADDRESS OF THE RETRY ROUTINE        */
*      THEN SRETPTR = RETRYPTR;                                    0354
         L     @10,RETRYPTR                                        0354
         LTR   @10,@10                                             0354
         BZ    @RF00354                                            0354
         ST    @10,SRETPTR                                         0355
*    RETCODE = MAX(RETCODE,0);                                     0356
@RF00354 L     @10,RETCODE                                         0356
         SLR   @04,@04                                             0356
         CR    @10,@04                                             0356
         BNL   *+6
         LR    @10,@04                                             0356
         ST    @10,RETCODE                                         0356
*/*  GO TO THE NEXT CALLERS CONTROL BLOCK                            */
*    STAEPTR = STAFPTR;                                            0357
         L     @10,STAEPTR                                         0357
         L     @10,STAFPTR(,@10)                                   0357
         ST    @10,STAEPTR                                         0357
*/*  DO-WHILE THERE ARE CONTROL BLOCKS ON CHAIN                      */
*    DO WHILE STAEPTR ^= NULLPTR;                                  0358
         B     @DE00358                                            0358
@DL00358 DS    0H                                                  0359
*      IF REG0 ^= NOSDWA                                           0359
*        THEN STASPTR = SDWAPTR;                                   0359
         CH    REG0,@CH00265                                       0359
         BE    @RF00359                                            0359
         L     @10,STAEPTR                                         0360
         ST    SDWAPTR,STASPTR(,@10)                               0360
*      CALL RCVRROUT                                               0361
*           (TBLGDT                                                0361
*           ,STAEPTR                                               0361
*           ,RETRYPTR                                              0361
*           ,RETCODE);                                             0361
@RF00359 L     @10,STAEPTR                                         0361
         L     @01,STAGDT(,@10)                                    0361
         ST    @01,@AL00001                                        0361
         LA    @04,STAEPTR                                         0361
         ST    @04,@AL00001+4                                      0361
         LA    @04,RETRYPTR                                        0361
         ST    @04,@AL00001+8                                      0361
         LA    @04,RETCODE                                         0361
         ST    @04,@AL00001+12                                     0361
         L     @15,STAEPA(,@10)                                    0361
         LA    @01,@AL00001                                        0361
         BALR  @14,@15                                             0361
*/*    IF A RETRY ROUTINE WAS SPECIFIED                              */
*      IF RETRYPTR ^= NULLPTR                                      0362
*/*      THEN SAVE THE ENTRY POINT ADDRESS OF THE RETRY ROUTINE      */
*        THEN SRETPTR = RETRYPTR;                                  0362
         L     @10,RETRYPTR                                        0362
         LTR   @10,@10                                             0362
         BZ    @RF00362                                            0362
         ST    @10,SRETPTR                                         0363
*      RETCODE = MAX (RETCODE,0);                                  0364
@RF00362 L     @10,RETCODE                                         0364
         SLR   @04,@04                                             0364
         CR    @10,@04                                             0364
         BNL   *+6
         LR    @10,@04                                             0364
         ST    @10,RETCODE                                         0364
*      STAEPTR = STAFPTR;                                          0365
         L     @10,STAEPTR                                         0365
         L     @10,STAFPTR(,@10)                                   0365
         ST    @10,STAEPTR                                         0365
*/*  END-WHILE                                                       */
*    END;                                                          0366
@DE00358 L     @10,STAEPTR                                         0366
         LTR   @10,@10                                             0366
         BNZ   @DL00358                                            0366
*    RFY (REG14) RSTD;                                             0367
*/*  IF RETURN CODE WAS 4                                            */
*    IF RETCODE = 4                                                0368
*/*    THEN PLACE RETRY ROUTINE POINTER IN REGISTER 14               */
*      THEN REG14 = SRETPTR;                                       0368
         CLC   RETCODE(4),@CF00044                                 0368
         BNE   @RF00368                                            0368
         L     REG14,SRETPTR                                       0369
*      ELSE REG14 = RTNPTR;                                        0370
         B     @RC00368                                            0370
@RF00368 LR    REG14,RTNPTR                                        0370
*    RFY (REG14) UNRSTD;                                           0371
@RC00368 DS    0H                                                  0372
*/*  PLACE THE RETURN CODE IN REGISTER 15                            */
*    TESTRC = RETCODE;                                             0372
         L     TESTRC,RETCODE                                      0372
*/*  RETURN                                                          */
*    OLDERID2 = NEWERID2;                                          0373
         L     @10,@PC00001                                        0373
         L     @10,GDTTR2(,@10)                                    0373
         MVC   @TS00001(95),NEWERID2(@10)                          0373
         MVC   OLDERID2(95,@10),@TS00001                           0373
*    NEWID2 = 'STX2';                                              0374
         MVC   NEWID2(4,@10),@CC00915                              0374
*    RETURN CODE(TESTRC);                                          0375
         LR    @15,TESTRC                                          0375
@EL00004 DS    0H                                                  0375
@EF00004 DS    0H                                                  0375
@ER00004 BR    @14                                                 0375
*/*  END-SUB-PROCEDURE EXIT_ROUTINE                                  */
*    END EXITSTAE;                                                 0376
*                                                                  0376
@PB00004 DS    0H                                                  0376
*/*  THE FOLLOWING DATUM IS FOR USE BY THE SYSTEM ADAPTER:           */
*/*  IT SPECIFIES THE SIZE OF THIS MODULE'S AUTOMATIC STORAGE,       */
*/*  SUCH THAT THE SYSTEM ADAPTER CAN ALLOCATE IT ONCE AND ONCE      */
*/*  ONLY, DURING DMS INITIALIZATION.                                */
*                                                                  0377
*    GENERATE DATA;                                                0377
*                                                                  0377
*/*  END-PROCEDURE USTAE                                             */
*    END ICKSA10                                                   0378
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.      *
*/*%INCLUDE SYSLIB  (DMSDF01 )                                        *
*/*%INCLUDE SYSLIB  (DMSDF00 )                                        *
*/*@INCLUDE SYSLIB  (DMSDF02 )                                        *
*/*%INCLUDE SYSLIB  (DMSDF09 )                                        *
*/*%INCLUDE SYSLIB  (IHASDWA )                                        *
*;                                                                 0378
@DATA    DS    0H
@CH00265 DC    H'12'
@SM00916 MVC   STAWORK(0,@10),STAEPARM(@04)
@DATD    DSECT
         DS    0F
@SA00001 DS    18F
@PC00001 DS    3F
@SA00002 DS    15F
@SA00003 DS    15F
@AL00001 DS    4A
@ZTEMPS  DS    C
@ZTEMPND EQU   *
@ZLEN    EQU   @ZTEMPND-@ZTEMPS
ICKSA10  CSECT
         DS    0F
@CF00044 DC    F'4'
@CF00858 DC    C'SA10'
@DATD    DSECT
         DS    0D
LISTSCAN DS    A
IOCSPTR  DS    A
OPNPTR   DS    A
DDSTRU   DS    A
FSADDR   DS    A
DMPINDEX DS    A
STAEPTR  DS    A
RETCODE  DS    F
RETRYPTR DS    A
SRETPTR  DS    A
LISTPTR  DS    A
SETRC    DS    H
LISTLN   DS    FL1
@TS00001 DS    CL95
SAVEREGS DS    CL64
CBLKFLG  DS    BL1
         DS    CL1
STAEARG  DS    CL20
CSTAID   DS    CL4
SAVAREA  DS    3A
ICKSA10  CSECT
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
         DS    0D
@CC00875 DC    C'CANCEL'
@CC00145 DC    C'ZERO'
@CC00858 DC    C'SA10'
@CC00877 DC    C'SA19'
@CC00884 DC    C'STSS'
@CC00894 DC    C'STCS'
@CC00913 DC    C'STX1'
@CC00915 DC    C'STX2'
@CC00873 DC    C'SET'
POOLID   DC    CL4'SA10'
MODID    DC    CL4'SA10'
FIXAREA  DS    CL256
         ORG   FIXAREA
@NM00066 DC    256X'00'
         ORG   FIXAREA+256
ICKSA10  CSECT
ICKSA10  CSECT
STAELIST  ESTAE   MF=L
@DATD    DSECT
ICKSA10  CSECT
         ENTRY ICKSAS10
ICKSAS10 DC A(@SIZDATD)
@DATD    DSECT
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
ICKSA10  CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
RTNPTR   EQU   @05
TESTRC   EQU   @05
REG12    EQU   @12
RTNREG   EQU   @15
REG0     EQU   @00
REG1     EQU   @01
REG2     EQU   @02
REG3     EQU   @03
REG4     EQU   @04
REG6     EQU   @06
REG13    EQU   @13
REG14    EQU   @14
REG15    EQU   @15
SDWAPTR  EQU   @03
REG10    EQU   @10
REG11    EQU   @11
REG5     EQU   @05
REG7     EQU   @07
REG8     EQU   @08
REG9     EQU   @09
ICKSAEP0 EQU   0
ICKSAGS0 EQU   0
ICKSAFS0 EQU   0
TRACE1   EQU   0
OLDERID1 EQU   TRACE1
TRACE2   EQU   0
OLDERID2 EQU   TRACE2
NEWID2   EQU   TRACE2+95
NEWERID2 EQU   5
STAEPARM EQU   0
STAEPFX  EQU   STAEPARM
STAFPTR  EQU   STAEPFX
STABPTR  EQU   STAEPFX+4
STAGDT   EQU   STAEPFX+8
STAEPA   EQU   STAEPFX+12
STAID    EQU   STAEPFX+16
STALEN   EQU   STAEPFX+20
STASPTR  EQU   STAEPFX+24
STARPTR  EQU   STAEPFX+28
IOCSTR   EQU   0
IOCDSO   EQU   IOCSTR+13
IOCRFM   EQU   IOCSTR+14
IOCMAC   EQU   IOCSTR+15
IOCMSG   EQU   IOCSTR+16
OPNAGL   EQU   0
OPNOPT   EQU   OPNAGL
OPNRFM   EQU   OPNAGL+1
OPNTYP   EQU   OPNAGL+2
OPNMOD   EQU   OPNAGL+3
UVOLLIST EQU   0
UVOLENT  EQU   UVOLLIST+2
DARGLIST EQU   0
DARGSTID EQU   DARGLIST+8
DARGARY  EQU   DARGLIST+20
DARGINS  EQU   DARGARY
DARGINL  EQU   DARGARY+2
FMTLIST  EQU   0
FMTFLGS  EQU   FMTLIST
FMTSPF   EQU   FMTLIST+2
FMTRFNO  EQU   FMTSPF
FMTILEN  EQU   FMTRFNO
FMTIOFF  EQU   FMTLIST+4
FMTTRBC  EQU   FMTIOFF
FMTSTO   EQU   FMTTRBC
FMTOCOL  EQU   FMTLIST+6
FMTCNVF  EQU   FMTLIST+10
ICKDB010 EQU   0
DMPITM   EQU   0
DMPARY   EQU   0
SAHIST   EQU   0
AUTOPTR  EQU   SAHIST+8
SAHSTA   EQU   SAHIST+12
LLBLKPTR EQU   SAHIST+16
AUTOTBL  EQU   0
AUTOARAY EQU   AUTOTBL
LLBLK    EQU   0
LLHDR    EQU   LLBLK
LLSLOT   EQU   LLBLK+8
LLNAME   EQU   LLSLOT
SDWA     EQU   0
SDWAPARM EQU   SDWA
SDWAFIOB EQU   SDWA+4
SDWAABCC EQU   SDWAFIOB
SDWACMPF EQU   SDWAABCC
SDWACTL1 EQU   SDWA+8
SDWACMKA EQU   SDWACTL1
SDWAMWPA EQU   SDWACTL1+1
SDWAPMKA EQU   SDWACTL1+4
SDWACTL2 EQU   SDWA+16
SDWACMKP EQU   SDWACTL2
SDWAMWPP EQU   SDWACTL2+1
SDWAPMKP EQU   SDWACTL2+4
SDWAGRSV EQU   SDWA+24
SDWANAME EQU   SDWA+88
SDWAEC1  EQU   SDWA+104
SDWAEMK1 EQU   SDWAEC1
SDWAMWP1 EQU   SDWAEC1+1
SDWAINT1 EQU   SDWAEC1+2
SDWANXT1 EQU   SDWAEC1+4
SDWAAEC1 EQU   SDWA+112
SDWAILC1 EQU   SDWAAEC1+1
SDWAINC1 EQU   SDWAAEC1+2
SDWAICD1 EQU   SDWAINC1+1
SDWAEC2  EQU   SDWA+120
SDWAEMK2 EQU   SDWAEC2
SDWAMWP2 EQU   SDWAEC2+1
SDWAINT2 EQU   SDWAEC2+2
SDWANXT2 EQU   SDWAEC2+4
SDWAAEC2 EQU   SDWA+128
SDWAILC2 EQU   SDWAAEC2+1
SDWAINC2 EQU   SDWAAEC2+2
SDWAICD2 EQU   SDWAINC2+1
SDWASRSV EQU   SDWA+136
SDWAIDNT EQU   SDWA+200
SDWAMCH  EQU   SDWA+204
SDWASTCK EQU   SDWAMCH
SDWAMCHI EQU   SDWAMCH+8
SDWAMCHS EQU   SDWAMCHI
SDWAMCHD EQU   SDWAMCHI+1
SDWARSR1 EQU   SDWAMCH+12
SDWARSR2 EQU   SDWAMCH+13
SDWAFLGS EQU   SDWA+232
SDWAERRA EQU   SDWAFLGS
SDWAERRB EQU   SDWAFLGS+1
SDWAERRC EQU   SDWAFLGS+2
SDWAERRD EQU   SDWAFLGS+3
SDWAIOFS EQU   SDWA+238
SDWACPUA EQU   SDWA+248
SDWAPARQ EQU   SDWA+252
SDWAACF2 EQU   SDWAPARQ+1
SDWAACF3 EQU   SDWAPARQ+2
SDWAACF4 EQU   SDWAPARQ+3
SDWALKWA EQU   SDWA+256
SDWALKWS EQU   SDWALKWA
SDWARECP EQU   SDWA+292
SDWASNPA EQU   SDWA+320
SDWADUMP EQU   SDWASNPA
SDWADPFS EQU   SDWADUMP+1
SDWADDAT EQU   SDWASNPA+4
SDWASDAT EQU   SDWADDAT
SDWAPDAT EQU   SDWADDAT+2
SDWADPSA EQU   SDWA+328
SDWADPSL EQU   SDWADPSA
SDWARA   EQU   SDWA+400
SDWADPVA EQU   SDWARA+2
STAWORK  EQU   0
RCVRROUT EQU   0
TBLGDT   EQU   0
DMPTRM   EQU   0
HISTPTR  EQU   0
ICKDVCL0 EQU   0
ICKDVIN0 EQU   0
ICKDVON0 EQU   0
ICKDVOP0 EQU   0
ICKIOCL0 EQU   0
ICKIOGT0 EQU   0
ICKIOIT0 EQU   0
ICKIOOP0 EQU   0
ICKIOPT0 EQU   0
ICKIOTM0 EQU   0
ICKSACL0 EQU   0
ICKSADE0 EQU   0
ICKSAFP0 EQU   0
ICKSAGP0 EQU   0
ICKSALD0 EQU   0
ICKSAPR0 EQU   0
ICKSASC0 EQU   0
ICKSASN0 EQU   0
ICKSAST0 EQU   0
ICKSATI0 EQU   0
ICKSAVC0 EQU   0
ICKSAWO0 EQU   0
ICKTPEA0 EQU   0
ICKTPES0 EQU   0
ICKTPPR0 EQU   0
ICKTPRE0 EQU   0
ICKTPRS0 EQU   0
LISTTEST EQU   0
NEWERID1 EQU   5
GDTTBL   EQU   0
GDTTR1   EQU   GDTTBL+8
GDTTR2   EQU   GDTTBL+12
GDTSAH   EQU   GDTTBL+32
GDTDIN   EQU   GDTTBL+44
GDTDOP   EQU   GDTTBL+48
GDTDBG   EQU   GDTTBL+52
GDTDVO   EQU   GDTTBL+56
GDTPRT   EQU   GDTTBL+60
GDTESS   EQU   GDTTBL+64
GDTESA   EQU   GDTTBL+68
GDTRST   EQU   GDTTBL+72
GDTRES   EQU   GDTTBL+76
GDTCAL   EQU   GDTTBL+80
GDTGSP   EQU   GDTTBL+84
GDTFSP   EQU   GDTTBL+88
GDTGPL   EQU   GDTTBL+92
GDTFPL   EQU   GDTTBL+96
GDTLOD   EQU   GDTTBL+100
GDTDEL   EQU   GDTTBL+104
GDTPRL   EQU   GDTTBL+108
GDTEPL   EQU   GDTTBL+112
GDTTIM   EQU   GDTTBL+116
GDTIIO   EQU   GDTTBL+120
GDTTIO   EQU   GDTTBL+124
GDTOPN   EQU   GDTTBL+136
GDTCLS   EQU   GDTTBL+140
GDTGET   EQU   GDTTBL+144
GDTPUT   EQU   GDTTBL+148
GDTABT   EQU   GDTTBL+152
GDTABH   EQU   GDTTBL+156
GDTSNP   EQU   GDTTBL+160
GDTWTO   EQU   GDTTBL+168
GDTSCR   EQU   GDTTBL+172
GDTVCK   EQU   GDTTBL+176
GDTDVC   EQU   GDTTBL+180
GDTSTE   EQU   GDTTBL+188
STAETYPE EQU   0
BLOCKPTR EQU   0
BLOCKID  EQU   BLOCKPTR
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
GDTCVR   EQU   GDTTBL+184
GDTSPR   EQU   GDTTBL+164
GDTTOH   EQU   GDTTBL+132
GDTRIP   EQU   GDTTBL+128
GDTDVH   EQU   GDTTBL+40
GDTIOH   EQU   GDTTBL+36
GDTTPH   EQU   GDTTBL+28
GDTRIH   EQU   GDTTBL+24
GDTSTH   EQU   GDTTBL+20
GDTDBH   EQU   GDTTBL+16
GDTPRM   EQU   GDTTBL+4
GDTHDR   EQU   GDTTBL
@NM00065 EQU   SDWA+512
SDWAVRA  EQU   SDWARA+4
SDWAURAL EQU   SDWARA+3
@NM00064 EQU   SDWADPVA
SDWAEBC  EQU   SDWADPVA
SDWAHEX  EQU   SDWADPVA
SDWAVRAL EQU   SDWARA
@NM00063 EQU   SDWA+396
SDWACOMP EQU   SDWA+392
SDWARCPL EQU   SDWA+364
@NM00062 EQU   SDWADPSA+32
SDWATO4  EQU   SDWADPSL+28
SDWAFRM4 EQU   SDWADPSL+24
SDWATO3  EQU   SDWADPSL+20
SDWAFRM3 EQU   SDWADPSL+16
SDWATO2  EQU   SDWADPSL+12
SDWAFRM2 EQU   SDWADPSL+8
SDWATO1  EQU   SDWADPSL+4
SDWAFRM1 EQU   SDWADPSL
@NM00061 EQU   SDWADDAT+3
@NM00060 EQU   SDWAPDAT
SDWAUSPL EQU   SDWAPDAT
SDWADPSW EQU   SDWAPDAT
SDWATJPA EQU   SDWAPDAT
SDWATLPA EQU   SDWAPDAT
SDWADREG EQU   SDWAPDAT
SDWADSAH EQU   SDWAPDAT
SDWADSAS EQU   SDWAPDAT
@NM00059 EQU   SDWADDAT+1
@NM00058 EQU   SDWASDAT
SDWAQQS  EQU   SDWASDAT
SDWACBS  EQU   SDWASDAT
SDWAGTF  EQU   SDWASDAT
SDWASWA  EQU   SDWASDAT
SDWALSQA EQU   SDWASDAT
SDWASQA  EQU   SDWASDAT
SDWANUC  EQU   SDWASDAT
@NM00057 EQU   SDWADUMP+2
@NM00056 EQU   SDWADPFS
SDWASLST EQU   SDWADPFS
@NM00055 EQU   SDWADPFS
SDWADLST EQU   SDWADPFS
SDWADPT  EQU   SDWADPFS
SDWADPID EQU   SDWADUMP
SDWADPLA EQU   SDWA+316
SDWAREXN EQU   SDWARECP+16
SDWACSCT EQU   SDWARECP+8
SDWAMODN EQU   SDWARECP
@NM00054 EQU   SDWALKWA+32
SDWATALW EQU   SDWALKWS+28
SDWATDLW EQU   SDWALKWS+24
SDWATNLW EQU   SDWALKWS+20
SDWAAPLW EQU   SDWALKWS+16
SDWAIPLW EQU   SDWALKWS+12
SDWAILLW EQU   SDWALKWS+8
SDWAIULW EQU   SDWALKWS+4
SDWAICLW EQU   SDWALKWS
SDWAFLLK EQU   SDWAACF4
SDWACMS  EQU   SDWAACF4
SDWAOPTM EQU   SDWAACF4
SDWATADB EQU   SDWAACF4
SDWATDNB EQU   SDWAACF4
SDWATNCB EQU   SDWAACF4
SDWAILCH EQU   SDWAACF4
SDWAIUCB EQU   SDWAACF4
SDWAICAT EQU   SDWAACF3
SDWAIPRG EQU   SDWAACF3
SDWASALL EQU   SDWAACF3
SDWAASMP EQU   SDWAACF3
SDWADISP EQU   SDWAACF3
@NM00053 EQU   SDWAACF3
@NM00052 EQU   SDWAACF2
SDWAFREE EQU   SDWAACF2
SDWAUPRG EQU   SDWAACF2
@NM00051 EQU   SDWAACF2
SDWASPIN EQU   SDWAACF2
@NM00050 EQU   SDWAACF2
SDWARCRD EQU   SDWAACF2
SDWARCDE EQU   SDWAPARQ
SDWALCPU EQU   SDWACPUA+2
@NM00049 EQU   SDWACPUA
SDWARECA EQU   SDWA+244
SDWARTYA EQU   SDWA+240
@NM00048 EQU   SDWA+239
@NM00047 EQU   SDWAIOFS
SDWANIOP EQU   SDWAIOFS
SDWANOIO EQU   SDWAIOFS
SDWAIOHT EQU   SDWAIOFS
SDWAIOQR EQU   SDWAIOFS
SDWAFMID EQU   SDWA+236
@NM00046 EQU   SDWAERRD
SDWAMCIV EQU   SDWAERRD
SDWARPIV EQU   SDWAERRD
SDWAMABD EQU   SDWAERRD
SDWACTS  EQU   SDWAERRD
SDWASTAE EQU   SDWAERRD
SDWANRBE EQU   SDWAERRD
SDWACLUP EQU   SDWAERRD
@NM00045 EQU   SDWAERRC
SDWAEAS  EQU   SDWAERRC
SDWAPERC EQU   SDWAERRC
SDWAIRB  EQU   SDWAERRC
SDWASTAI EQU   SDWAERRC
SDWASTAF EQU   SDWAERRC
SDWASRBM EQU   SDWAERRB
SDWALDIS EQU   SDWAERRB
SDWAENRB EQU   SDWAERRB
SDWATYP1 EQU   SDWAERRB
@NM00044 EQU   SDWAERRB
SDWAPGIO EQU   SDWAERRA
SDWATEXC EQU   SDWAERRA
SDWASVCE EQU   SDWAERRA
SDWAABTM EQU   SDWAERRA
SDWASVCD EQU   SDWAERRA
SDWARKEY EQU   SDWAERRA
SDWAPCHK EQU   SDWAERRA
SDWAMCHK EQU   SDWAERRA
SDWATIME EQU   SDWAMCH+20
SDWARFSA EQU   SDWAMCH+16
@NM00043 EQU   SDWAMCH+14
SDWAVEQR EQU   SDWARSR2
SDWAPGFX EQU   SDWARSR2
SDWAFLSQ EQU   SDWARSR2
SDWAFSQA EQU   SDWARSR2
SDWANUCL EQU   SDWARSR2
SDWASPER EQU   SDWARSR2
SDWAINTC EQU   SDWARSR2
SDWAOFLN EQU   SDWARSR2
SDWACHNG EQU   SDWARSR1
SDWAMSER EQU   SDWARSR1
@NM00042 EQU   SDWARSR1
SDWACPID EQU   SDWAMCH+10
SDWATERR EQU   SDWAMCHD
SDWAFPRX EQU   SDWAMCHD
SDWAINSF EQU   SDWAMCHD
SDWAACR  EQU   SDWAMCHD
SDWASCK  EQU   SDWAMCHD
SDWAPSWU EQU   SDWAMCHD
SDWAREGU EQU   SDWAMCHD
SDWASKYF EQU   SDWAMCHD
@NM00041 EQU   SDWAMCHS
SDWARSRF EQU   SDWAMCHS
SDWARSRC EQU   SDWAMCHS
SDWAINVP EQU   SDWAMCHS
SDWATSVL EQU   SDWAMCHS
SDWARCDF EQU   SDWAMCHS
SDWASRVL EQU   SDWAMCHS
SDWASCKE EQU   SDWASTCK+4
SDWASCKB EQU   SDWASTCK
SDWALNTH EQU   SDWAIDNT+1
SDWASPID EQU   SDWAIDNT
SDWASR15 EQU   SDWASRSV+60
SDWASR14 EQU   SDWASRSV+56
SDWASR13 EQU   SDWASRSV+52
SDWASR12 EQU   SDWASRSV+48
SDWASR11 EQU   SDWASRSV+44
SDWASR10 EQU   SDWASRSV+40
SDWASR09 EQU   SDWASRSV+36
SDWASR08 EQU   SDWASRSV+32
SDWASR07 EQU   SDWASRSV+28
SDWASR06 EQU   SDWASRSV+24
SDWASR05 EQU   SDWASRSV+20
SDWASR04 EQU   SDWASRSV+16
SDWASR03 EQU   SDWASRSV+12
SDWASR02 EQU   SDWASRSV+8
SDWASR01 EQU   SDWASRSV+4
SDWASR00 EQU   SDWASRSV
SDWATRN2 EQU   SDWAAEC2+4
SDWAIPC2 EQU   SDWAICD2
SDWAIMC2 EQU   SDWAICD2
SDWAIPR2 EQU   SDWAICD2
@NM00040 EQU   SDWAINC2
@NM00039 EQU   SDWAILC2
SDWAIL2  EQU   SDWAILC2
@NM00038 EQU   SDWAILC2
@NM00037 EQU   SDWAAEC2
SDWAADD2 EQU   SDWANXT2+1
@NM00036 EQU   SDWANXT2
@NM00035 EQU   SDWAEC2+3
SDWASGN2 EQU   SDWAINT2
SDWAEXP2 EQU   SDWAINT2
SDWADEC2 EQU   SDWAINT2
SDWAFPO2 EQU   SDWAINT2
SDWACC2  EQU   SDWAINT2
@NM00034 EQU   SDWAINT2
SDWAPGM2 EQU   SDWAMWP2
SDWAWAT2 EQU   SDWAMWP2
SDWAMCK2 EQU   SDWAMWP2
SDWAECT2 EQU   SDWAMWP2
SDWAKEY2 EQU   SDWAMWP2
SDWAEXT2 EQU   SDWAEMK2
SDWAIO2  EQU   SDWAEMK2
SDWATRM2 EQU   SDWAEMK2
@NM00033 EQU   SDWAEMK2
SDWAPER2 EQU   SDWAEMK2
@NM00032 EQU   SDWAEMK2
SDWATRAN EQU   SDWAAEC1+4
SDWAIPC1 EQU   SDWAICD1
SDWAIMC1 EQU   SDWAICD1
SDWAIPR1 EQU   SDWAICD1
@NM00031 EQU   SDWAINC1
@NM00030 EQU   SDWAILC1
SDWAIL1  EQU   SDWAILC1
@NM00029 EQU   SDWAILC1
@NM00028 EQU   SDWAAEC1
SDWAADD1 EQU   SDWANXT1+1
@NM00027 EQU   SDWANXT1
@NM00026 EQU   SDWAEC1+3
SDWASGN1 EQU   SDWAINT1
SDWAEXP1 EQU   SDWAINT1
SDWADEC1 EQU   SDWAINT1
SDWAFPO1 EQU   SDWAINT1
SDWACC1  EQU   SDWAINT1
@NM00025 EQU   SDWAINT1
SDWAPGM1 EQU   SDWAMWP1
SDWAWAT1 EQU   SDWAMWP1
SDWAMCK1 EQU   SDWAMWP1
SDWAECT1 EQU   SDWAMWP1
SDWAKEY1 EQU   SDWAMWP1
SDWAEXT1 EQU   SDWAEMK1
SDWAIO1  EQU   SDWAEMK1
SDWATRM1 EQU   SDWAEMK1
@NM00024 EQU   SDWAEMK1
SDWAPER1 EQU   SDWAEMK1
@NM00023 EQU   SDWAEMK1
SDWAIOBR EQU   SDWA+100
SDWAEPA  EQU   SDWA+96
@NM00022 EQU   SDWANAME+4
SDWARBAD EQU   SDWANAME
SDWAGR15 EQU   SDWAGRSV+60
SDWAGR14 EQU   SDWAGRSV+56
SDWAGR13 EQU   SDWAGRSV+52
SDWAGR12 EQU   SDWAGRSV+48
SDWAGR11 EQU   SDWAGRSV+44
SDWAGR10 EQU   SDWAGRSV+40
SDWAGR09 EQU   SDWAGRSV+36
SDWAGR08 EQU   SDWAGRSV+32
SDWAGR07 EQU   SDWAGRSV+28
SDWAGR06 EQU   SDWAGRSV+24
SDWAGR05 EQU   SDWAGRSV+20
SDWAGR04 EQU   SDWAGRSV+16
SDWAGR03 EQU   SDWAGRSV+12
SDWAGR02 EQU   SDWAGRSV+8
SDWAGR01 EQU   SDWAGRSV+4
SDWAGR00 EQU   SDWAGRSV
SDWANXTP EQU   SDWACTL2+5
SDWASGP  EQU   SDWAPMKP
SDWAEUP  EQU   SDWAPMKP
SDWADOP  EQU   SDWAPMKP
SDWAFPP  EQU   SDWAPMKP
SDWACCP  EQU   SDWAPMKP
SDWAILP  EQU   SDWAPMKP
SDWAINTP EQU   SDWACTL2+2
SDWASPVP EQU   SDWAMWPP
SDWAWATP EQU   SDWAMWPP
SDWAMCKP EQU   SDWAMWPP
@NM00021 EQU   SDWAMWPP
SDWAKEYP EQU   SDWAMWPP
SDWAEXTP EQU   SDWACMKP
SDWAIOP  EQU   SDWACMKP
SDWANXTA EQU   SDWACTL1+5
SDWASGA  EQU   SDWAPMKA
SDWAEUA  EQU   SDWAPMKA
SDWADOA  EQU   SDWAPMKA
SDWAFPA  EQU   SDWAPMKA
SDWACCA  EQU   SDWAPMKA
SDWAILA  EQU   SDWAPMKA
SDWAINTA EQU   SDWACTL1+2
SDWASPVA EQU   SDWAMWPA
SDWAWATA EQU   SDWAMWPA
SDWAMCKA EQU   SDWAMWPA
@NM00020 EQU   SDWAMWPA
SDWAKEYA EQU   SDWAMWPA
SDWAEXTA EQU   SDWACMKA
SDWAIOA  EQU   SDWACMKA
SDWACMPC EQU   SDWAABCC+1
@NM00019 EQU   SDWACMPF
SDWASTCC EQU   SDWACMPF
@NM00018 EQU   SDWACMPF
SDWASTEP EQU   SDWACMPF
SDWAREQ  EQU   SDWACMPF
LLMODSZ  EQU   LLSLOT+13
LLUSECTR EQU   LLSLOT+12
LLADDR   EQU   LLSLOT+8
LLNOMOD  EQU   LLNAME+4
LLNXTSLT EQU   LLNAME
LLNXTBLK EQU   LLHDR+4
LLFSTSLT EQU   LLHDR
PTR1     EQU   AUTOARAY+8
ASIZE    EQU   AUTOARAY+6
STATUS   EQU   AUTOARAY+4
AREAID   EQU   AUTOARAY
GPLAST   EQU   SAHIST+4
GPFIRST  EQU   SAHIST
@NM00017 EQU   DMPARY+15
DMPARYTP EQU   DMPARY+14
DMPARYEX EQU   DMPARY+12
DMPARYIC EQU   DMPARY+10
DMPARYSZ EQU   DMPARY+8
DMPARYNM EQU   DMPARY
@NM00016 EQU   DMPITM+15
DMPITMTP EQU   DMPITM+14
DMPITMLN EQU   DMPITM+12
DMPITMPT EQU   DMPITM+8
DMPITMNM EQU   DMPITM
@NM00015 EQU   FMTCNVF+1
FMTBS    EQU   FMTCNVF+1
FMTSS    EQU   FMTCNVF+1
FMTAL    EQU   FMTCNVF+1
FMTZS    EQU   FMTCNVF+1
@NM00014 EQU   FMTCNVF
FMTPU    EQU   FMTCNVF
FMTBD    EQU   FMTCNVF
FMTBHD   EQU   FMTCNVF
FMTBHA   EQU   FMTCNVF
FMTBH    EQU   FMTCNVF
FMTOLEN  EQU   FMTLIST+8
FMTRIO   EQU   FMTOCOL
FMTSPT   EQU   FMTSTO
FMTSTL   EQU   FMTILEN
@NM00013 EQU   FMTFLGS+1
FMTHDF   EQU   FMTFLGS
FMTDFF   EQU   FMTFLGS
FMTSTF   EQU   FMTFLGS
FMTREPF  EQU   FMTFLGS
FMTBDF   EQU   FMTFLGS
FMTIDF   EQU   FMTFLGS
FMTSCF   EQU   FMTFLGS
FMTEOLF  EQU   FMTFLGS
DARGDTM  EQU   DARGARY+4
DARGPCT  EQU   DARGINL
DARGREP  EQU   DARGINS
@NM00012 EQU   DARGLIST+19
DARGIND  EQU   DARGLIST+18
DARGRETL EQU   DARGLIST+16
DARGCNT  EQU   DARGLIST+14
DARGILP  EQU   DARGLIST+12
DARGSENT EQU   DARGSTID+3
DARGSMOD EQU   DARGSTID
DARGRETP EQU   DARGLIST+4
DARGDBP  EQU   DARGLIST
UVOLVOL  EQU   UVOLENT+4
UVOLDEV  EQU   UVOLENT
UVOLCNT  EQU   UVOLLIST
OPNRSVD  EQU   OPNAGL+28
OPNVOL   EQU   OPNAGL+24
OPNBLK   EQU   OPNAGL+20
OPNREC   EQU   OPNAGL+16
OPNDSN   EQU   OPNAGL+12
OPNDDN   EQU   OPNAGL+8
OPNIOC   EQU   OPNAGL+4
@NM00011 EQU   OPNMOD
OPNMODRC EQU   OPNMOD
OPNMODAC EQU   OPNMOD
@NM00010 EQU   OPNTYP
OPNTYPSO EQU   OPNTYP
OPNTYPSI EQU   OPNTYP
@NM00009 EQU   OPNRFM
OPNRFMBK EQU   OPNRFM
OPNRFMSF EQU   OPNRFM
OPNRFMUN EQU   OPNRFM
OPNRFMVR EQU   OPNRFM
OPNRFMFX EQU   OPNRFM
@NM00008 EQU   OPNOPT
OPNOPTJM EQU   OPNOPT
OPNOPTKS EQU   OPNOPT
OPNOPTBK EQU   OPNOPT
OPNOPTUP EQU   OPNOPT
OPNOPTOT EQU   OPNOPT
OPNOPTIN EQU   OPNOPT
IOCEXT   EQU   IOCSTR+36
IOCRRN   EQU   IOCSTR+32
@NM00007 EQU   IOCSTR+30
IOCPNM   EQU   IOCSTR+28
IOCCBP   EQU   IOCSTR+24
IOCDSN   EQU   IOCSTR+20
@NM00006 EQU   IOCSTR+17
@NM00005 EQU   IOCMSG
IOCMSGOP EQU   IOCMSG
IOCMACPA EQU   IOCMAC
@NM00004 EQU   IOCMAC
IOCMACBK EQU   IOCMAC
IOCMACUP EQU   IOCMAC
IOCMACOT EQU   IOCMAC
IOCMACIN EQU   IOCMAC
@NM00003 EQU   IOCRFM
IOCRFMBK EQU   IOCRFM
IOCRFMSF EQU   IOCRFM
IOCRFMUN EQU   IOCRFM
IOCRFMVR EQU   IOCRFM
IOCRFMFX EQU   IOCRFM
@NM00002 EQU   IOCDSO
IOCDSOPS EQU   IOCDSO
IOCKYL   EQU   IOCSTR+12
IOCTRN   EQU   IOCSTR+8
IOCDLN   EQU   IOCSTR+4
IOCDAD   EQU   IOCSTR
STAEWORK EQU   STAEPARM+32
NEWID1   EQU   TRACE1+95
CALLID   EQU   OLDERID1+90
@NM00001 EQU   OLDERID1
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RF00239 EQU   @RC00218
@PB00003 EQU   @PB00004
@PB00002 EQU   @PB00003
@ENDDATA EQU   *
         END   ICKSA10,(C'PLS1748',0701,78192)
