         MACRO
&ID      XDICT &DUMMY,&TESTRAN=NO,&DIAG=NO,&LEVEL=1
         GBLC  &COMPNM                  COMPONENT NAME
         LCLC  &NM                      MODULE NAME
         JHEAD 'EXTERNAL SYMBOL DICTIONARY SUBROUTINES',               ,
               PHASEID=&ID,LEVEL=&LEVEL
&NM      SETC  '&COMPNM&ID'
*                                                                     *
*TITLE-  EXTERNAL SYMBOL DICTIONARY ROUTINES                          *
*                                                                     *
*FUNCTION/OPERATION-                                                  *
*        BUILD AND MAINTAIN THE EXTERNAL SYMBOL DICTIONARY            *
*        PRINT AND PUNCH THE EXTERNAL SYMBOL DICTIONARY               *
*        BUILD THE EXTERNAL SYMBOL DICTIONARY ADJUSTMENT TABLE        *
*                                                                     *
*ENTRY POINT-                                                         *
         ENTRY &NM.01
*                                                                     *
*INPUT-                                                               *
*        REGISTERS-                                                   *
*             R4-       REGISTER CONTAINING THE ADDRESS OF THE        *
*                       RECORD BEING PROCESSED                        *
*             R5-       REGISTER CONTAINING THE ADDRESS OF THE        *
*                       OPERAND BEING PROCESSED                       *
*             R6-       REGISTER CONTAINING THE ADDRESS OF THE        *
*                       CURRENT CONTROL SECTION ESD ENTRY             *
*                                                                     *
*OUTPUT-                                                              *
*        REGISTERS-                                                   *
*             R10       REGISTER CONTAINING THE ADDRESS OF THE        *
*                       NEW CURRENT CONTROL SECTION ESD ENTRY, IF     *
*                       CHANGED                                       *
*                                                                     *
*EXITS, NORMAL-                                                       *
*        EXITS TO THE CALLING ROUTINE                                 *
*                                                                     *
*EXITS, ERROR-                                                        *
*        EXITS TO THE CALLING ROUTINE                                 *
*                                                                     *
*TABLES/WORK AREAS-                                                   *
*        ESDBLK1-  A BLOCK IN STORAGE TO CONTAIN A MAXMI              *
*        ESDBLK1-  A BLOCK OF STORAGE TO CONTAIN A MAXIMUM OF 16 ESD  *
*                  ENTRIES, ALSO SERVES AS AN INPUT/OUTPUT BUFFER     *
*                  FOR THE OVERFLOW FILE (FILE2) WHEN NECESSARY       *
*        ESDBLK2-  SAME FUNCTION AS ESDBLK1 ABOVE                     *
*        NOTELIST- A LIST OF NOTE PARAMETERS OF OVERFLOWED ESD BLOCKS *
*                  WHEN NOT IN CORE                                   *
*                                                                     *
*ATTRIBUTES-                                                          *
*        REFRESHABLE                                                  *
*                                                                     *
*NOTES                                                                *
*                                                                     *
         EJECT
         COPY  JCOMMON
         EJECT
         COPY  JTEXT
         EJECT
         COPY  ICOMMON
         EJECT
JTEXT    DSECT ,
         ORG   JTEXT
         COPY  RSYMRCD
         EJECT
&NM.00   CSECT
* VS1 REL 2.6 CHANGES
*C221000                                                        OX00106
*A246500,430500,481500                                          OX00106
*C430500,481500                                                @OY08064
         JMODID
&NM.01   CONTENTS
         USING &NM.01,R8                BASE REGISTER
         EJECT
*TITLE-  BLDESD                                                       *
*                                                                     *
*FUNCTION/OPERATION-                                                  *
*        BUILD OR RESUME AN ESD ENTRY                                 *
*                                                                     *
*INPUT-  R4 CONTAINS A POINTER TO THE RECORD BEING PROCESSED          *
*        R10 CONTAINS A POINTER TO A PARAMETER LIST                   *
*                                                                     *
*OUTPUT- R10 CONTAINS A POINTER TO THE ESD ENTRY                      *
*                                                                     *
         SPACE
BLDESD   BALR  R14,R7                   SAVE REGISTERS IN STACK
         LR    R8,R12                   SET UP BASE REGISTER
         LA    R2,D1                    INCREMENT IN
         LR    R3,R2                    TWO REGISTER
         LR    R5,R10                   SAVE POINTER
         AH    R2,D0(,R5)               ESDID
         AH    R3,HIESDNR               ESD NUMBER
         STH   R2,XESDI                 ESDID
         STH   R3,XLNGQ                 ESD NUMBER
         MVC   XFLGB,XPARM              FLAGS
         SR    R0,R0                    ZERO
         ST    R0,XLCTR                 INITIAL VALUE
         OC    XESDI(D1),XPARM+D3       FLAG FOR DSECT OR COM
BLDESD1  MVC   XTYPE,XPARM+D1           TYPE
         MVC   XNAME,=8AL1(JBLANK)      PAD
         MVC   XNAME(D1),XTYPE          NAME
         GOIF  RFIELDN,OFF=BLDESD2      SKIP IF NO NAME
         MVC   RLNGQ,=H'1'              LENGTH ATTRIBUTE
         GOIF  PRIORDEF,ON=BLDESD2      SKIP IF PREVIOUSLY DEFINED
         MVC   XNAME,RNAME              GET NAME
         MVC   XTYPE,XPARM+D2           TYPE
BLDESD2  LA    R10,XWORK                PASS RECORD POINTER
         GOTO  ENTER                    TRY TO ENTER IN SYMBOL TABLE
         BNE   BLDESD5                  ALREADY IN SYMBOL TABLE
         STH   R2,D0(,R5)               SAVE ESDID
         STH   R3,HIESDNR               SAVE ESD NUMBER
         TM    XESDI,CSW2+DSW2          COM OR DSECT
         BNE   BLDESD4                  SKIP IF SO
         NC    FSTCSECT,FSTCSECT        SEE IF FIRST CSECT
         BNE   BLDESD3                  SKIP IF NOT
         STH   R3,FSTCSECT              FIRST CSECT ESD NUMBER
BLDESD3  CLI   XTYPE,ETYPEPC            PRIVATE CODE
         BNE   BLDESD4                  SKIP IF NOT
         STH   R2,JESDID                ESDID OF PRIVATE CODE
BLDESD4  LR    R10,R3                   ESD NUMBER
         GOTO  GETESD                   GET ESD ENTRY
         LM    R2,R3,XTYPE              TYPE, ESDID, ADDRESS
         SR    R4,R4                    INITIALIZE
         LM    R5,R6,XNAME              NAME
         STM   R2,R6,ETYPE-ETYPE(R10)   CREATE ESD ENTRY
         B     EXIT                     EXIT
BLDESD5  CLC   SFLGS,XFLGB              SEE IF SAME TYPE SECTION
         BE    BLDESD6                  RESUME SECTION IF SAME
         NI    XPARM,BITFF-(XDUMMY)     DISCOUNT EXTERNAL DUMMYS
         CLC   SFLGS,XPARM              GIVE IT ANOTHER CHANCE
         BE    BLDESD6                  LET THIS ONE GO
         SET   PRIORDEF,ON              INDICATE PREVIOUSLY DEFINED
         B     BLDESD1                  IGNORE NAME
BLDESD6  LH    R10,SLNGQ                ESD ASCENDSION NUMBER
         GOTO  GETESD                   RESUME ESD ENTRY
         SET   DEFINED,ON               INDICATE RESUMED SECTION
         B     EXIT                     EXIT
         EJECT
*TITLE-  GETESD                                                       *
*                                                                     *
*FUNCTION/OPERATION-                                                  *
*        GET AN ESD ENTRY                                             *
*                                                                     *
*INPUT-  R10 CONTAINS THE ESD NUMBER                                  *
*                                                                     *
*OUTPUT- R10 CONTAINS A POINTER TO THE ENTRY                          *
*                                                                     *
         SPACE
GETESD   BALR  R14,R7                   SAVE REGISTER IN STACK
         LR    R8,R12                   SET UP BASE REGISTER
         LR    R2,R10                   INTO WORK REGISTER
         LA    R10,D16*D25              MAXIMUM ESD ENTRIES
         CR    R10,R2                   SEE IF EXCEEDED
         BNL   GETESD0                  NOPE
         BAL   R9,GETESD                RECURSIVE CALL
         SET   JESDOFLO,ON              INDICATE ESD OVERFLOW
         MVI   D0(R10),D3               OVERFLOW ENTRY
         XC    D1(D19,R10),D1(R10)      INITIALIZE
         B     EXIT                     RETURN
GETESD0  BCTR  R2,D0                    ESD NUMBER
         SRDL  R2,D4                    BLOCK NUMBER
         LR    R4,R2                    NOTE/POINT ADDRESS FOR BLOCK
         MH    R4,=H'9'                 X
         LA    R4,NOTELIST(R4)          X
         SRL   R3,D28                   DISPLACEMENT
         MH    R3,=H'20'                DISPLACEMENT
         TM    D8(R4),BIT7              SEE IF THIS A NEW BLOCK
         BO    GETESD4                  NO
         TM    FILELAST+D8,BIT7         SEE IF FLIE POSITIONED TO WRITE
         BZ    GETESD1                  YES
         JPOINT  FILE=FILE2,ADDR=FILELAST,NEXT=WRITE   POSITION FILE
GETESD1  LA    R5,ESDBLK2               POINT TO SECOND BLOCK
         CR    R5,R6                    SEE IF BLOCK CURRENTLY IN USE
         BH    GETESD2                  NO
         LA    R5,ESDBLK1               POINT TO FIRST BLOCK
GETESD2  JWRITE  FILE=FILE2,PARM=(R5)   WRITE DESIGNATED BLOCK
         MVI   FILELAST+D8,D0           INDICATE FILE POSITIONED TO END
         JCHECK  FILE=FILE2             CHECK WRITE OPERATION
         JNOTE   FILE=FILE2             NOTE ADDRESS OF BLOCK ON FILE
         LH    R1,D6(,R5)               BLOCK NUMBER OF BLOCK WRITTEN
         MH    R1,=H'9'                 NOTE/POINT ADDRESS FOR BLOCK
         LA    R1,NOTELIST(R1)          X
         MVI   D8(R1),BIT6              INDICATE BLOCK ON FILE
         MVC   D0(D8,R1),JNOTEVAL       SAVE BLOCK NOTE/POINT ADDRESS
         MVC   FILELAST(D8),JNOTEVAL    NOTE/POINT ADDRESS OF FILE END
         TM    D8(R4),BIT6              SEE IF BLOCK ON FILE
         BZ    GETESD3                  NOPE
         JPOINT  FILE=FILE2,ADDR=(R4),NEXT=READ   POINT TO BLOCK
         JREAD   FILE=FILE2,PARM=(R5)   BRING IN BLOCK
         MVI   FILELAST+D8,BIT7         INDICATE FILE NOT POSITIONED
         JCHECK  FILE=FILE2             CHECK READ OPERATION
GETESD3  ST    R5,JFWORD1               ADDRESS OF BLOCK
         MVI   D8(R4),BIT7              INDICATE BLOCK IS IN CORE
         MVC   D0(D4,R4),JFWORD1        SAVE ADDRESS OF BLOCK IN CORE
GETESD4  MVC   JFWORD1,D0(R4)           ADDRESS TO FULLWORD BOUNDARY
         L     R5,JFWORD1               ADDRESS OF BLOCK IN CORE
         STH   R2,D6(,R5)               BLOCK NUMBER
         LA    R10,D8(R3,R5)            POINT TO ENTRY REQUESTED
         B     EXIT                     RETURN
         EJECT
*TITLE-  MAKESD                                                       *
*                                                                     *
*FUNCTION/OPERATION-                                                  *
*        CREATE THE ESD ADJUSTMENT TABLE                              *
*        ESD FINISHING AND OUTPUT                                     *
*                                                                     *
*INPUT-  THE EXTERNAL SYMBOL DICTIONARY (ESD).                        *
*                                                                     *
*OUTPUT- THE ESD ADJUSTMENT TABLE.                                    *
*        THE EXTERNAL SYMBOL DICTIONARY ON THE SYSTEM OUTPUT FILES.   *
*                                                                     *
         SPACE
ENTRY    BALR  R14,R7                  SAVE REGISTERS IN STACK
         LR    R8,R12                  SET UP BASE REGISTER
         LR    R10,R4                  PASS RECORD POINTER
         MVI   RFLGB,ESDNRSW+ENTRYSW    SET FLAGS
         GOTO  FIND                     LOOKUP IN SYMBOL TABLE
         BZ    ENTRY2                   ERROR
         GOIF  (MODE1,MODE2),ANY=EXIT   SUSPEND ACTION IF NOT MODE IA
         GOTO  ENTER                    ENTER IN SYMBOL TABLE
         LH    R10,HIESDNR              GET HIGHEST ESD NUMBER
         LA    R10,D1(,R10)             GET NEXT ESD NUMBER
         STH   R10,HIESDNR              SAVE
         STH   R10,SLNGQ                ESD ASCENDSION NUMBER
         GOTO  GETESD                   FIND ROOM IN ESD
         MVI   ETYPE-EITEM(R10),ETYPELX PRIME ESD ENTRY
ENTRY1   MVI   RTYPE,JTSYMBL            CHECK BACK IN PASS 2
         B     EXIT                     FINIS
ENTRY2   GOIF  (ESDNRSW,XENTRY,CSECTSW,DSECTSW),ALL=ENTRY1,MIX=ENTRY3
         GOIF  (CSW,DSW,ESW),ANY=ENTRY3 INVALID                 OX00106
         SR    R0,R0                    SEE IF
         CH    R0,SESDI                 ABSOLUTE
         BZ    ENTRY3                   BAD
         SET   XENTRY,ON                INDICATE VALID ENTRY
         OI    RFLGB,XENTRY             INDICATE VALID ENTRY
         MVC   RESDI(D6),SESDI          ESDID AND ADDRESS
         LH    R10,HIESDNR              GET HIGHERS ESD NUMBER
         LA    R10,D1(,R10)             GET NEXT ESD NUMBER
         STH   R10,HIESDNR              SAVE
         GOTO  GETESD                   GET ESD ENTRY
         MVI   ETYPE-EITEM(R10),ETYPELD ESD ENTRY TYPE
         MVC   EESDI-EITEM(D6,R10),RESDI     ESDID AND VALUE
         MVC   ENAME-EITEM(D8,R10),RNAME     NAME
         MVI   RTYPE,JTADJII            ADJUST VALUE IN IIA
         B     EXIT                     FINIS
ENTRY3   MVI   RTYPE,JTPASS             INVALID ENTRY
         B     EXIT                     FINIS
EXTRN    BALR  R14,R7                   SAVE REGISTERS IN STACK
         LR    R8,R12                   SET UP BASE REGISTER
         LA    R2,D1                    INCREMENT
         LR    R3,R2                    IN TWO REGISTERS
         STH   R2,RLNGQ                 LENGTH ATTRIBUTE OF SYMBOL
         AH    R2,HICESDID              NEXT ESDID
         AH    R3,HIESDNR               NEXT ESD NUMBER
EXTRN1   STH   R2,RESDI                 ESDID
         SET   ESW1,ON                  SET EXTRN/EQU FLAG      OX00106
EXTRN2   XI    RNAME,BIT0               UNIQUE NAME
         LR    R10,R4                   PASS RECORD POINTER
         GOTO  ENTER                    ENTER INTO SYMBOL TABLE
         BNE   EXTRN5                   ALREADY IN SYMBOL TABLE
         TM    RNAME,BIT0               SEE IF FIRST TIME AROUND
         BNE   EXTRN2                   ENTER SECOND TIME IF FIRST
         CH    R3,HIESDNR               SEE IF NEW ENTRY
         BNH   EXTRN3                   SKIP IF NOT NEW
         STH   R2,HICESDID              SAVE NEW ESDID
         STH   R3,HIESDNR               SAVE NEW0ESD NUMBER
EXTRN3   LR    R10,R3                   PASS ESD NUMBER
         GOTO  GETESD                   GET ESD ENTRY
         MVC   ETYPE-EITEM(D8,R10),RTYPE
         MVC   ENAME-EITEM(D8,R10),RNAME
EXTRN4   MVI   RTYPE,JTPASS             NO PROCESS RECORD IN PASS 2
         B     EXIT
EXTRN5   LH    R2,SESDI                 GET ESDID OF PREVIOUS ENTRY
         LH    R3,SLNGQ                 GET ESD ASCENDSION NUMBER
         TM    RNAME,BIT0               SEE IF FIRST TIME AROUND
         BNE   EXTRN1                   GO AGAIN IF FIRST
         SET   PRIORDEF,ON              INDICATE PREVIOUSLY DEFINED
         B     EXTRN4                   EXIT
VCON     BALR  R14,R7                   SAVE REGISTERS IN STACK
         LR    R8,R12                   SET UP BASE REGISTER
         LR    R3,R2                    IN TWO REGISTERS
         AH    R2,HICESDID              GET NEXT ESDID
         AH    R3,HIESDNR               GET NEXT ESD NUMBER
         STH   R2,XESDI                 ESDID
         STH   R3,XLNGQ                 ESD NUMBER
         MVI   XTYPE,ETYPEER            TYPE
         MVI   XFLGB,ESDNRSW            FLAGS
         OI    XNAME,BIT0               EXTERNAL NAME
         SR    R0,R0                    ZERO
         STH   R0,XLCTR                 VALUE
         LA    R10,XWORK                POINTER TO ENTRY
         GOTO  ENTER                    ENTER IN SYMBOL TABLE
         BNZ   EXIT                     ALREADY IN SYMBOL TABLE
         STH   R2,HICESDID              SAVE ESDID
         STH   R3,HIESDNR               SAVE ESD NUMBER
         XI    XNAME,BIT0               RESET
         LR    R10,R3                   GET ESD NUMBER
         GOTO  GETESD                   GET ESD ENTRY
         MVC   ETYPE-EITEM(D8,R10),XTYPE     TYPE, FLAGS, ESDID, VALUE
         MVC   ENAME-EITEM(D8,R10),XNAME     NAME
         B     EXIT                     RETURN
QCON     BALR  R14,R7                   SAVE REGISTERS IN STACK
         LR    R8,R12                   SET UP BASE REGISTER
         LA    R10,XWORK                PASS POINTER TO WORK AREA
         GOTO  FIND                     LOOKUP IN SYMBOL TABLE
         BNE   EXIT                     NOT IN SYMBOL TABLE
         GOIF  (ESDNRSW,DSECTSW,DSCOMSW,XDUMMY),NOTALL=EXIT VALID NAME
         SET   XDUMMY,OFF               ONE TIME ONLY PER DSECT NAME
         LR    R10,R2                   INCREMENT IN TWO REGISTERS
         AH    R2,HICESDID              NEXT ESDID
         STH   R2,HICESDID              SAVE ESDID
         LH    R3,SLNGQ                 ESD ASCENDSION NUMBER
         AH    R10,HIESDNR              NEXT ESD NUMBER
         STH   R10,HIESDNR              SAVE ESD NUMBER
         GOTO  GETESD                   GET ESD ENTRY
         MVC   ENAME-EITEM(D8,R10),XNAME     NAME
         STH   R2,EESDI-EITEM(,R10)     ESDID
         OI    ESWTS-EITEM(R10),QDSW2   INDICATE XD ENTRY
         STH   R3,EHILC-EITEM(,R10)     ESD ASCENDSION NUMBER
         MVI   ETYPE-EITEM(R10),ETYPEDX TYPE
         B     EXIT                     EXIT
SUMESD   BALR  R14,R7                   PUSH DOWN ONE MORE LEVEL
SUMGET   LR    R10,R4                   PASS
         BAL   R2,GOTESD                GET ESD ITEM
         SR    R2,R2                    ZERO FUNCTION BYTE REGISTER
         TRT   ETYPE,SUMTBL             GET ROUTINE ADDRESS
         B     SUMGET(R2)               GO TO ROUTINE
SUMCST   LM    R14,R15,ELCTR            GET CURRENT AND HIGH ADDRESS
         CR    R14,R15                  SEE IF CURRENT IS ALSO HIGH
         BNH   SUMCST1                  SKIP IF NOT
         LR    R15,R14                  SAVE HIGH
SUMCST1  SR    R14,R14                  ASSUME NO OFFSET
         GOIF  (CSW2,DSW2),ANY=SUMCST3  NO OFFSET FOR DSECTS OR COMS
         L     R14,STARTLOC             GET START ADDRESS
         NR    R14,R5                   ROUND TO SECTION ALIGNMENT
         LA    R0,D7                    INCREMENT
         AR    R0,R14                   COMPUTE NEXT START ADDRESS
         AR    R0,R15                   COMPUTE NEXT START ADDRESS
         ST    R0,STARTLOC              SAVE
         LTR   R14,R14                  SEE IF ADJUSTMENT REQUIRED
         BZ    SUMCST3                  NOPE
         ST    R14,D4(,R4)              ADJUSTMENT FACTOR
         MVC   D0(D2,R4),EESDI          ARGUMENT ESDID
SUMCST2  MVC   D2(D2,R4),EESDI          TARGET ESDID
         SR    R4,R5                    POINT TO NEXT ADJUSTMENT ENTRY
SUMCST3  STM   R14,R15,ELCTR            ADDRESS AND LENGTH
         B     SUMGET                   CONTINUE WITH NEXT ENTRY
SUMDXD   LM    R15,R0,ELCTR             GET LENGTH AND ALIGNMENT FACTOR
         LR    R14,R0                   REORDER
         B     SUMCST3                  SKIP
SUMDSD   MVI   ETYPE,ETYPEXD            CHANGE TYPE
         LH    R10,EHILC                GET ESD ASCENDSION NUMBER
         GOTO  GETESD                   GET ESD ENTRY
         LA    R14,D7                   ALIGNMENT FACTOR
         L     R15,EHILC-EITEM(,R10)    LENGTH
         XC    D4(D4,R4),D4(R4)
         MVC   D0(D2,R4),EESDI-EITEM(R10)
         B     SUMCST2
GOTESD   LA    R3,D1(,R3)               GET NEXT ESD NUMBER
         CH    R3,HIESDNR               SEE IF ALL THROUGH
         BH    EXIT                     FINIS
         LR    R10,R3                   PASS ESD NUMBER
         GOTO  GETESD                   GET ESD ENTRY
         LR    R6,R10                   RETURN POINTER
         BR    R2                       RETURN
MAKESD   BALR  R14,R7                   SAVE REGISTERS IN STACK
         LR    R8,R12                   SET UP BASE REGISTER
         L     R4,LATEND                ESD ADJUSTMENT TABLE POINTER
         LH    R5,=H'-8'                INCREMENT
         MVI   CARDADDR+D3,48           FLUSH CARD PUNCH BUFFER
         SR    R3,R3                    ESD NUMBER INITIALIZED
         BAL   R9,SUMESD                SUM CONTROL SECTIONS
         S     R10,LATEND               LENGTH OF ESD ADJUSTMENT TABLE
         LR    R11,R5                   INCREMENT
         STM   R10,R11,ADJINDEX         SAVE FOR PASS TWO
MAKGET   BAL   R2,GOTESD                GET NEXT SEQUENTIAL ESD ENTRY
         SR    R2,R2                    ZERO FUNCTION BYTE REGISTER
         LR    R10,R2                   CLEAR REGISTER
         TRT   ETYPE,MAKTBL             GET ROUTINE ADDRESS
         B     MAKGET(R2)               GO TO ROUTINE
MAKCST   SET   (QDSW2,DSW2,CSW2),OFF    RESET XD DSECT OR COM BITS
         CLI   ENAME,J9                 SEE IF NAMED
         BH    PRTESD                   SKIP IF NAMED
MAKPVT   MVI   ENAME,JBLANK             FAKE THE BLANK
         B     PRTESD                   PRINT ESD ITEM
MAKTRY   LM    R14,R1,ADJINDEX          ESD ADJUSTMENT INDEX
         LH    R10,EESDI                GET ESDID
MAKTRY1  BXLE  R14,R15,PRTESD           SEE IF ADJUSTMENT REQUIRED
         CH    R10,D0(R1,R14)           SEE IF THIS IS THE ENTRY
         BNE   MAKTRY1                  NO, KEEP LOOKING
         L     R10,D4(R1,R14)           GET ADJUSTMENT FACTOR
         A     R10,ELCTR                ADD OFFSET
MAKEXT   ST    R10,ELCTR                SAVE
         EJECT
*TITLE-  PRTESD                                                       *
*                                                                     *
*FUNCTION/OPERATION-                                                  *
*        PRINT AN ITEM IN THE EXTERNAL SYMBOL DICTIONARY              *
*                                                                     *
*INPUT-  REGISTER R10 IS A POINTER TO AN ESD ENTRY                    *
*                                                                     *
*OUTPUT- THE EXTERNAL SYMBOL DICTIONARY                               *
*                                                                     *
         SPACE
PRTESD   EQU   *
         GOIF  (JESD,JLIST),NOTALL=PCHESD    SKIP IF NOT OPTIONED
         LH    R5,LINECNT               GET LINE COUNT
         GOIF  (R5),POS=PRTESD2         SKIP IF NOT END OF PAGE
         JPRINT                         GET PRINT BUFFER
         SET   EJECT                    CARRIAGE CONTROL FOR TITLE LINE
         MVC   DECKID,JDECKID           DECK IDENTIFIER
         MVC   TITLE,ZTITLE             SET TITLE
         MVC   PAGE,ZPAGEZ              SET PAGE NUMBER DESIGNATOR
         LH    R14,JPAGENO              GET OLD PAGE NUMBER
         LA    R14,1(,R14)              INCREMENT BY 1
         STH   R14,JPAGENO              SAVE PAGE NUMBER
         CVD   R14,JDWORD               CONVERT PAGE NUMBER TO DECIMAL
         UNPK  PAGENO,JDWORD+6(2)       UNPACK TO EBCDIC CODE
         NC    PAGENO,DIGMASK           CONVERT TO INTERNAL CHARACTERS
         GOIF  PAGENO,J0,NOTEQ=PRTESD1  SKIP IF NOT A LEADING ZERO
         MVI   PAGENO,JBLANK            FORCE TO A BLANK
         GOIF  PAGENO+1,J0,NOTEQ=PRTESD1     SKIP IF NOT A LEADING ZERO
         MVI   PAGENO+1,JBLANK          FORCE TO A BLANK
PRTESD1  JPRINT                         GET PRINT BUFFER
         MVC   HEADING,ZHEADING         SET SUBTITLE
         MVC   LVTMDT,JLVTMDT           SET ASSEMBLER LEVEL, TIME, DATE
         LH    R5,JLNCT                 GET MAXIMUM LINE COUNT
PRTESD2  JPRINT                         GET PRINT BUFFER
         SET   SPACE1                   CARRIAGE CONTROL FOR LINE
         CH    R5,JLNCT                 COMPARE TO MAXIMUM LINE COUNT
         BL    PRTESD3                  SKIP IF NOT REACHED
         SET   SPACE2                   CARRIAGE CONTROL FOR FIRST LINE
PRTESD3  BCTR  R5,0                     DECREMENT LINE COUNT
         STH   R5,LINECNT               SAVE LINE COUNT
         MVC   ZSYMBOL,ENAME            SET NAME
         TRT   ETYPE,ZTYPESZ            TRANSLATE FIRST CHARACTER
         STC   R2,ZTYPE                 TO OUTPUT ITEM
         TRT   ETYPE,ZTYPESZ+D7         TRANSLATE SECOND CHARACTER
         STC   R2,ZTYPE+D1              TO OUTPUT ITEM
         UNPK  ZID(L'ZID+1),EESDI(L'EESDI+1) UNPACK WITH ROOM TO SPARE
         NC    ZID,DIGMASK              CONVERT TO INTERNAL CHARACTERS
         MVI   ZID+L'ZID,JBLANK         REPAIR DAMAGE
         NI    ZID+1,BITFF-ESW-EQUF                            @OY08064
         GOIF  ETYPEER,EQUAL=PCHESD     FINIS FOR EXTERNAL REFERENCE
         GOIF  ETYPEWX,EQUAL=PCHESD     FINIS FOR EXTERNAL REFERENCE
         UNPK  ZADDR(L'ZADDR+1),ELCTR(L'ELCTR+1)  UNPACK WITH EXCESS
         NC    ZADDR,DIGMASK            CONVERT TO INTERNAL CHARACTERS
         MVI   ZADDR+L'ZADDR,JBLANK     REPAIR DAMAGE
         GOIF  ETYPELD,NOTEQ=PRTESD4    SKIP IF NOT LD TYPE
         MVC   ZLDID,ZID                PUT IN PROPER PERSPECTIVE
         MVC   ZID,ZID-1                REPAIR
         B     PCHESD                   FINISHED IF LD TYPE
PRTESD4  UNPK  ZLENGTH(L'ZLENGTH+1),EHILC(L'EHILC+1)   UNPACK
         NC    ZLENGTH,DIGMASK          CONVERT TO INTERNAL CHARACTERS
         MVI   ZLENGTH+L'ZLENGTH,JBLANK REPAIR
         EJECT
*TITLE-  PCHESD                                                       *
*                                                                     *
*FUNCTION/OPERATION-                                                  *
*        PUNCH ONE ITEM IN THE EXTERNAL SYMBOL DICTIONARY.            *
*                                                                     *
*INPUT-  REGISTER R6 IS A POINTER TO ONE ITEM IN THE EXTERNAL SYMBOL  *
*   DICTIONARY.                                                       *
*                                                                     *
*OUTPUT- THE EXTERNAL SYMBOL DICTIONARY ON THE PUNCH AND LINK FILES.  *
*                                                                     *
         SPACE
PCHESD   GOIF  (JDECK,JLINK),NONE=MAKGET     RETURN IF NOT OPTIONED
         LM    R10,R11,CARDADDR         GET ADDRESS OF CARD
         CLI   CARDADDR+D3,48           SEE IF ANOTHER CARD NEEDED
         BL    PCHESD1                  NOT NECESSARILY
         JPUNCH  SEQ=YES                GET ANOTHER CARD BUFFER
         SET   JENDCHK,ON               PUNCH END CARD WHEN TIME COMES
         MVC   CARDID,ZESDZ             CARD IDENTIFIER
         TR    CARDID+D1(71),JTRTABLE   TRANSLATE TO EXTERNAL CODE
         MVI   DATALN,D0                HIGH ORDER BYTE OF FIELD ZEROED
         SR    R10,R10                  NEW CARD BUFFER INDICATION
PCHESD1  LA    R10,NEXTITEM             POINT TO NEXT ENTRY SPACE
         STM   R10,R11,CARDADDR         SAVE ADDRESS OF CARD
         STC   R10,DATALN+1             LENGTH OF DATA
         ALR   R10,R11                  POINTER TO ESD DATA ITEM IN R3
         MVC   ZZSYMBOL,ENAME           SET NAME
         TR    ZZSYMBOL,JTRTABLE        CONVERT TO EXTERNAL CHARACTERS
         MVC   ZZTYPE,ETYPE             SET TYPE
         MVC   ZZADDR,ELCTR+L'ELCTR-L'ZZADDR SET ADDRESS
         GOIF  ETYPEXD,NOTEQ=PCHESD3    SKIP IF NOT XD TYPE
         MVC   ZZADDR(L'ZZADDR+L'ZZALGN),ELCTR    SET ALIGNMENT FACTOR
PCHESD3  GOIF  ETYPELD,NOTEQ=PCHESD4    SKIP IF NOT LD TYPE
         MVC   ZZLENGTH+L'ZZLENGTH-L'EESDI(L'EESDI),EESDI   LDID
         MVI   ZZLENGTH,X'00'           PAD WITH LEADING ZEROS
         B     MAKGET                   FINIS
PCHESD4  TM    FIRSTID,X'F0'            SEE IF ESDID SET
         BZ    PCHESD5                  SKIP IF ALREADY SET
         MVC   FIRSTID,EESDI            SET ESDID OF FIRST NON LD ITEM
         NI    FIRSTID,BITFF-BIT4-EQUF                         @OY08064
PCHESD5  GOIF  ETYPEER,EQUAL=MAKGET     FINIS FOR EXTERNAL REFERENCE
         GOIF  ETYPEWX,EQUAL=MAKGET     FINIS FOR EXTERNAL REFERENCE
         MVC   ZZLENGTH,EHILC+L'EHILC-L'ZZLENGTH  SET LENGTH
         B     MAKGET                   FINIS
         EJECT
REFER    BALR  R14,R7                   SAVE REGISTERS IN STACK
         LR    R8,R12                   SET UP BASE REGISTER
         MVC   XWORK(D12),=AL1(0,24,JPSOP,0,JTSYMBL,0,0,0,0,0,0,0)
         LA    R10,XWORK                SYMBOL POINTER
         GOTO  FIND                     LOOK UP IN SYMBOL TABLE
         BZ    REFER2                   FIND IN SYMBOL TABLE
REFER1   GOIF  MODE2,ON=EXIT            DUMPING LITERALS ON OVERFLOW
         B     REFER4                   UNDEFINED AS YET
REFER2   GOIF  ENTRYSW,ON=REFER1        NOT A DEFINED SYMBOL
         MVC   XTYPE(D2),=AL1(JTADJII,DEFINED+PRIORDEF)
         GOIF  MODE2,OFF=REFER3         SKIP IF NOT OVERFLOW
         MVI   XTYPE,JTSYMII            REHASH IN PASS TWO
REFER3   MVC   XFLGB,SFLGS              SYMBOL FLAGS
         MVC   XESDI(D6),SESDI          ESDID AND VALUE
         LH    R15,SLNGQ                LENGTH ATTRIBUTE
         GOIF  ESDNRSW,OFF=REFER5       EXTERNAL SYMBOL
REFER4   LA    R15,D1                   LENGTH ATTRIBUTE
REFER5   STH   R15,XLNGQ                SET LENGTH ATTRIBUTE
         LR    R11,R10
         LH    R10,JOUTFILE             OUTPUT FILE ADDRESS
         JPUTM FILE=(R10),ADDR=(R11)
         B     EXIT                     FINIS
         EJECT
*                        CONSTANTS                                    *
         SPACE
OIINST   OI    D0(R15),D0               EXECUTED INSTRUCTION
DIGMASK  JGENIN  'FFFFFF'               DIGIT MASK
ZTYPESZ  JGENIN  'SLEXPCXDDRWCMDXXXX'   TYPES
SUMTBL   DC    AL1(SUMCST-SUMGET)       00 - (SD) CONTROL SECTION
         DC    AL1(SUMGET-SUMGET)       01 - (LD) LABEL DEFINITION
         DC    AL1(SUMGET-SUMGET)       02 - (ER) EXTERNAL REFERENCE
         DC    AL1(SUMGET-SUMGET)       03        OVERFLOW ENTRY
         DC    AL1(SUMCST-SUMGET)       04 - (PC) PRIVATE CODE
         DC    AL1(SUMCST-SUMGET)       05 - (CM) COMMON
         DC    AL1(SUMDXD-SUMGET)       06 - (XD) EXTERNAL DUMMY
         DC    AL1(SUMDSD-SUMGET)       07 -      EXTERNAL DUMMY
         DC    AL1(SUMCST-SUMGET)       08 -      DUMMY CONTROL SECTION
         DC    AL1(SUMGET-SUMGET)       09        UNDEFINED ENTRY
         DC    AL1(SUMGET-SUMGET)       0A - (WX) EXTERNAL REFERENCE
MAKTBL   DC    AL1(PRTESD-MAKGET)       00 - (SD) CONTROL SECTION
         DC    AL1(MAKTRY-MAKGET)       01 - (LD) LABEL DIFINITION
         DC    AL1(MAKEXT-MAKGET)       02 - (ER) EXTERNAL REFERENCE
         DC    AL1(MAKGET-MAKGET)       03        OVERFLOW ENTRY
         DC    AL1(MAKPVT-MAKGET)       04 - (PC) PRIVATE CODE
         DC    AL1(MAKCST-MAKGET)       05 - (CM) COMMON
         DC    AL1(MAKCST-MAKGET)       06 - (XD) EXTERNAL DUMMY
         DC    AL1(MAKGET-MAKGET)       07 -      NOT USED
         DC    AL1(MAKGET-MAKGET)       08 -      DSECT
         DC    AL1(MAKGET-MAKGET)       09 -      UNDEFINED ENTRY
         DC    AL1(MAKEXT-MAKGET)       0A - (WX) EXTERNAL REFERENCE
ZESDZ    DC    B'00000010'              12-9-2 CARD IDENTIFIER
         JGENIN  'ESD'                  ESD CARD IDENTIFIER
ZPAGEZ   JGENIN  'PAGE'                 PAGE NUMBER DESIGNATOR
ZTITLE   JGENIN  'EXTERNAL SYMBOL DICTIONARY'     ESD TITLE
ZHEADING DC    YL1(SPACE3)              CARRIAGE CONTROL CHARACTER
         JGENIN  'SYMBOL   TYPE  ID   ADDR  LENGTH LDID'    SUBTITLE
         EJECT
DSECT10  DSECT  ,
         ORG   DSECT10
         SPACE
ZZSYMBOL DS    C'XXXXXXXX'              NAME, BLANK FOR PC OR BLANK CM
ZZTYPE   DS    C'X'                     TYPE
ZZADDR   DS    C'XXX'                   ADDRESS
ZZALGN   DS    C'X'                     ALIGNMENT FACTOR FOR SC TYPE
ZZLENGTH DS    C'XXX'                   LENGTH
NEXTITEM EQU   *                        NEXT ITEM FOLLOWS IMMEDIATELY
         SPACE
         SPACE
DSECT11  DSECT ,
         ORG   DSECT11
         SPACE
CARD     DS    0CL72
CARDID   DS    C' ESD'                  CARD IDENTIFIER
         DS    C'      '                BLANK
DATALN   DS    H                        NUMBER OF BYTES OF ESD DATA
         DS    C'  '                    BLANK
FIRSTID  DS    H                        ESDID OF FIRST NON LD TYPE ITEM
DATAITEM DS    CL16
         SPACE
         SPACE
         ORG   DSECT11
         SPACE
LINE     DS    0CL121
CTLCHAR  DBV   EJECT(0),SPACE1(1),SPACE2(2),SPACE3(3)  CARRIAGE CONTROL
DECKID   DS    CL8                      DECK IDENTIFIER
         ORG   LINE+48
TITLE    DS    C'EXTERNAL SYMBOL DICTIONARY' ESD TITLE
         ORG   LINE+112
PAGE     DS    C'PAGE'                  PAGE NUMBER DESIGNATOR
         ORG   LINE+118
PAGENO   DS    C'000'                   PAGE NUMBER
         ORG   LINE
HEADING  DS    C'3SYMBOL   TYPE  ID   ADDR  LENGTH LDID'
         ORG   LINE+L'LINE-L'JLVTMDT
LVTMDT   DS    CL(L'JLVTMDT)            ASSEMBLER LEVEL, TIME, DATE
         ORG   LINE+1
ZSYMBOL  DS    C'XXXXXXXX'              NAME, BLANK FOR PC OR BLANK CM
         DS    C'  '                    SPACES
ZTYPE    DS    C'XX'                    ESD ITEM TYPE
         DS    C'  '                    SPACES
ZID      DS    C'XXXX'                  ESD IDENTIFIER, IF NON LD TYPE
         DS    C' '                     SPACE
ZADDR    DS    C'XXXXXX'                ADDRESS, IF TYPE SD, PC, LD
         DS    C' '                     SPACE
ZLENGTH  DS    C'XXXXXX'                LENGTH, IF TYPE SD, PC, CM, SC
         DS    C' '                     SPACE
ZLDID    DS    C'XXXX'                  ESD IDENTIFIER OF SD ENTRY
         MEND
