         TITLE 'IFDOLT41 CONVERT MODULE'
         TITLE 'IFDOLT41 CONVERT MODULE'
         LCLA  &T,&SPN                                            0002
.@001    ANOP                                                     0002
IFDOLT41 CSECT ,                                                  0002
         ST    @E,12(0,@D)                                        0002
         ST    @0,20(0,@D)                                        0002
         STM   @2,@C,28(@D)                                       0002
         BALR  @4,0                                               0002
@PSTART  DS    0H                                                 0002
         USING @PSTART+00000,@4                                   0002
*         GEN(USING CONVMAP,1);
         USING CONVMAP,1
         DS    0H
*         GENERATE DATA;
*         /************************************************************
*         /*                        REGISTERS                         *
*         /************************************************************
*         DCL PL REG(1) PTR(31);         /* REGISTER 1.               *
*         DCL ENDADDR REG(2) PTR(31);    /* REGISTER 2.               *
*         DCL R3 REG(3) PTR(24);         /* REGISTER 3.               *
*         DCL R5 REG(5) PTR(24);         /* REGISTER 5.               *
*         DCL R6 REG(6) PTR(24);         /* REGISTER 6.               *
*         DCL AXTBLPTR REG(7) PTR(31);   /* REGISTER 7.               *
*         DCL R7 REG(7) PTR(31);         /* REGISTER 7.               *
*         DCL R8 REG(8) PTR(31);         /* REGISTER 8.               *
*         DCL I REG(9) PTR(24);          /* REGISTER 9.               *
*         DCL R9 REG(9) PTR(31);         /* REGISTER 9.               *
*         DCL R11 REG(11) PTR(31);       /* REGISTER 11.              *
*         DCL R12 REG(12) PTR(31);       /* REGISTER 12.              *
*         DCL RC REG(15) PTR(24);        /* REGISTER 15.              *
*         DCL LOW15 CHAR(4) BDY(WORD) INIT('00007FFF'X);
*         DCL MACROLVL CHAR(1) GENERATED;
*         DCL FROMADDR PTR(31) GENERATED;
*         DCL TOADDR PTR(31) GENERATED;
*         DCL FLGCOUNT PTR(16) GENERATED;
*         DCL 1 CNVCT BASED(ADDR(FLGCOUNT)),
*               3 HEXBIT BIT(1),         /* TYPE OF CONVERSION FLAG.  *
*               3 * BIT(14),             /* COUNT.                    *
*               3 LSTCNT BIT(1);         /* ODD OR EVEN COUNT.        *
*         DCL AXATBL CHAR(16) INIT('0123456789ABCDEF');
*         DCL AXFLGA CHAR(1);
*         DCL INBUF CHAR(1) BASED(R5);
*         DCL 1 OUTAREA CHAR(2) BASED(R6),
*               3 OUTBUF CHAR(1),
*               3 OUTBUF1 CHAR(1);
*         DCL AXATBLEL CHAR(1) BASED(AXTBLPTR);
*         RESTRICT(1,2,3,5,6,7,9,11,12);
*         IF MACROLVL='02'X THEN    /* IS THIS MACRO LEVEL SUPPORTED*/
         CLI   MACROLVL,X'02'                                     0030
*           GO TO CNVERT00;         /* YES, CONTINUE.               */
         BC    08,CNVERT00                                        0031
*         RC=4;                     /* NO, SET REG. 15 TO 04 AND    */
         LA    @F,4                                               0032
*         GO TO CNVERT07;           /* RETURN TO CALLER.            */
         BC    15,CNVERT07                                        0033
* CNVERT00:
*         /************************************************************
*         /*               SETUP TO PERFORM CONVERSION                *
*         /************************************************************
*         R5=FROMADDR;              /* GET FROM ADDRESS INTO REG. 5.*/
CNVERT00 L     @5,FROMADDR                                        0034
*         R6=TOADDR;                /* GET TO ADDRESS INTO REG. 6.  */
         L     @6,TOADDR                                          0035
*         R7=FLGCOUNT;              /* GET COUNT IN REG. 7.         */
         MVC   @TEMP2+2(2),FLGCOUNT                               0036
         L     @7,@TEMP2                                          0036
*         R7=R7&LOW15;
         N     @7,LOW15                                           0037
*         IF R7=0 THEN              /* IF COUNT IS ZERO, RETURN TO  */
         LTR   @7,@7                                              0038
*           GO TO CNVERT06;         /* CALLER. OTHERWISE CONVERT.   */
         BC    08,CNVERT06                                        0039
*         AXFLGA='00'X;             /* CLEAR FLAG.                  */
         MVI   AXFLGA,X'00'                                       0040
*         ENDADDR=R5+R7;            /* FIND END OF CONVERSION DATA. */
         LR    @2,@7                                              0041
         AR    @2,@5                                              0041
*         R3=ADDR(AXATBL);          /* SET POINTER TO CHAR TABLE.   */
         LA    @3,AXATBL                                          0042
*         IF HEXBIT='1'B THEN       /* IS CONVERSION HEX TO EBCDIC. */
         TM    CNVCT,B'10000000'                                  0043
*           GO TO CNVERT05;         /* YES, GO TO HEX TO EBCDIC     */
         BC    01,CNVERT05                                        0044
*                                   /* ROUTINE.                     */
* CNVERT01:
*         /************************************************************
*         /*                                                          *
*         /*                EBCDIC TO HEX CONVERSION                  *
*         /*                                                          *
*         /************************************************************
*         DO I=16 TO 1 BY -1;       /* SEE IF INPUT CHAR HAS A VALID*/
CNVERT01 LA    @9,16                                              0045
*         IF INBUF=AXATBL(I) THEN   /* HEX NUMBER EQUIVALENT.       */
@DO9FF   LR    @8,@9                                              0046
         LA    @E,AXATBL-1(@8)                                    0046
         CLC   0(1,@5),0(@E)                                      0046
*           GO TO CNVERT02;         /* YES, CONVERT IT.             */
         BC    08,CNVERT02                                        0047
*         END;
*         RC=8;                     /* NO, SET RETURN CODE TO       */
         BCT   @9,@DO9FF                                          0048
         LA    @F,8                                               0049
*         PL=R5;                    /* INDICATE FAILURE OCCURED     */
         LR    @1,@5                                              0050
*                                   /* DURING AN EH CONVERSION AND  */
*                                   /* PLACE ADDRESS OF FAILING     */
*                                   /* CHARACTER IN REGISTER 1 AND  */
*         GO TO CNVERT07;           /* RETURN TO CALLER             */
         BC    15,CNVERT07                                        0051
* CNVERT02:
*         R11=I-1;                  /* SAVE EQUIVALENT HEX CHAR.    */
CNVERT02 LH    @B,@D1                                             0052
         AR    @B,@9                                              0052
*         IF AXFLGA^='00'X THEN     /* IF 2ND BYTE, GO TO ROUTINE   */
         CLI   AXFLGA,X'00'                                       0053
*           GO TO CNVERT03;         /* THAT WILL OUTPUT HEX EQUIV.  */
         BC    07,CNVERT03                                        0054
*         R12=R11*16;               /* PUT FIRST HEX CHAR IN REG. 12*/
         LR    @F,@B                                              0055
         SLA   @F,4                                               0055
         LR    @C,@F                                              0055
*         AXFLGA='F0'X;             /* SET FLAG TO NON-ZERO TO      */
         MVI   AXFLGA,X'F0'                                       0056
*                                   /* INDICATE ONLY ONE CHARACTER  */
*                                   /* HAS BEEN CONVERTED.          */
*         GO TO CNVERT04;           /* GO TO ROUTINE THAT DETERMINES*/
         BC    15,CNVERT04                                        0057
*                                   /* IF MORE CONVERSION MUST BE   */
*                                   /* DONE.                        */
* CNVERT03:
*         /************************************************************
*         /*       OUTPUT ROUTINE FOR EBCDIC TO HEX CONVERSION        *
*         /************************************************************
*         R12=R12×R11;              /* COMBINE TWO HEX CHARACTERS.  */
CNVERT03 OR    @C,@B                                              0058
*         GEN(STC   R12,0(R6));     /* PUT CHAR IN OUTPUT AREA      */
         STC   R12,0(R6)
         DS    0H
*         R6=R6+1;                  /* STEP TO ADDRESS BY 1         */
         LA    @6,1(0,@6)                                         0060
*         AXFLGA='00'X;             /* SET FLAG TO ZERO             */
         MVI   AXFLGA,X'00'                                       0061
* CNVERT04:
*         /************************************************************
*         /*             IS MORE CONVERSION NECESSARY                 *
*         /************************************************************
*         R5=R5+1;                  /* STEP FROM ADDRESS BY 1       */
CNVERT04 LA    @5,1(0,@5)                                         0062
*         IF R5<ENDADDR THEN        /* IS CONVERSION DONE. NO, GO   */
         CR    @5,@2                                              0063
*           GO TO CNVERT01;         /* AND DO IT.                   */
         BC    04,CNVERT01                                        0064
*         IF LSTCNT='1'B THEN       /* YES, WAS CONVERSION FROM EH  */
         TM    CNVCT+1,B'00000001'                                0065
         BC    12,@9FB                                            0065
*           GEN(STC   R12,0(R6));   /* FOR AN ODD NUMBER OF CHAR.   */
         STC   R12,0(R6)
         DS    0H
*         GO TO CNVERT06;           /* NO, GO TO FINISH ROUTINE.    */
         BC    15,CNVERT06                                        0067
*                                   /* YES, PUT CONVERTED CHAR      */
*                                   /* IN OUTPUT AREA.              */
* CNVERT05:
*         /************************************************************
*         /*                                                          *
*         /*                HEX TO EBCDIC CONVERSION                  *
*         /*                                                          *
*         /************************************************************
*         R9=INBUF;                 /* GET INPUT CHAR. INTO REG. 9. */
CNVERT05 SR    @9,@9                                              0068
         IC    @9,0(0,@5)                                         0068
*         R11=R9/16;                /* GET BITS 0-3 OF INPUT CHAR   */
         LR    @E,@9                                              0069
         SRA   @E,4                                               0069
         LR    @B,@E                                              0069
*                                   /* INTO REG. 11.                */
*         R9=R9&15;                 /* GET BITS 4-7 OF INPUT CHAR   */
         N     @9,@D2                                             0070
*                                   /* INTO REG. 9.                 */
*         AXTBLPTR=R3+R11;          /* SET POINTER TO CHAR TABLE.   */
         LR    @7,@B                                              0071
         AR    @7,@3                                              0071
*         OUTBUF=AXATBLEL;          /* STORE FIRST EBCDIC CHAR IN   */
         MVC   0(1,@6),0(@7)                                      0072
*                                   /* OUTPUT AREA.                 */
*         AXTBLPTR=R3+R9;           /* SET POINTER TO CHAR TABLE.   */
         LR    @7,@9                                              0073
         AR    @7,@3                                              0073
*         OUTBUF1=AXATBLEL;         /* STORE SECOND EBCDIC CHAR IN  */
         MVC   1(1,@6),0(@7)                                      0074
*                                   /* OUTPUT AREA.                 */
*         R6=R6+2;                  /* STEP TO ADDRESS BY 2.        */
         LA    @6,2(0,@6)                                         0075
*         R5=R5+1;                  /* STEP FROM ADDRESS BY 1.      */
         LA    @5,1(0,@5)                                         0076
*         IF R5<ENDADDR THEN        /* IS CONVERSION DONE. NO, GO   */
         CR    @5,@2                                              0077
*           GO TO CNVERT05;         /* AND DO IT. YES, EXIT.        */
         BC    04,CNVERT05                                        0078
* CNVERT06:
*         /************************************************************
*         /*         FINISH ROUTINE FOR SUCCESSFUL CONVERSION         *
*         /************************************************************
*         RC=0;                     /* SET RETURN CODE TO ZERO TO   */
CNVERT06 SR    @F,@F                                              0079
*                                   /* INDICATE SUCCESSFUL CONVERT  */
* CNVERT07:
*         /************************************************************
*         /*                                                          *
*         /*              RESTORE REGISTERS AND RETURN                *
*         /*                                                          *
*         /************************************************************
*         RETURN;                   /* RETURN TO CALLER             */
*         END;
@EL01    L     @E,12(0,@D)                                        0081
         L     @0,20(0,@D)                                        0081
         LM    @2,@C,28(@D)                                       0081
         BCR   15,@E                                              0081
@DATA1   EQU   *
@0       EQU   00                  EQUATES FOR REGISTERS 0-15
@1       EQU   01
@2       EQU   02
@3       EQU   03
@4       EQU   04
@5       EQU   05
@6       EQU   06
@7       EQU   07
@8       EQU   08
@9       EQU   09
@A       EQU   10
@B       EQU   11
@C       EQU   12
@D       EQU   13
@E       EQU   14
@F       EQU   15
@D2      DC    F'15'
@D1      DC    H'-1'
         DS    0F
         DS    0D
@DATA    EQU   *
PL       EQU   00000001            FULLWORD POINTER REGISTER
ENDADDR  EQU   00000002            FULLWORD POINTER REGISTER
R3       EQU   00000003            3  BYTE  POINTER REGISTER
R5       EQU   00000005            3  BYTE  POINTER REGISTER
R6       EQU   00000006            3  BYTE  POINTER REGISTER
AXTBLPTR EQU   00000007            FULLWORD POINTER REGISTER
R7       EQU   00000007            FULLWORD POINTER REGISTER
R8       EQU   00000008            FULLWORD POINTER REGISTER
I        EQU   00000009            3  BYTE  POINTER REGISTER
R9       EQU   00000009            FULLWORD POINTER REGISTER
R11      EQU   00000011            FULLWORD POINTER REGISTER
R12      EQU   00000012            FULLWORD POINTER REGISTER
RC       EQU   00000015            3  BYTE  POINTER REGISTER
LOW15    EQU   *                   4 BYTE(S) ON WORD
         DC    X'00007FFF'
AXATBL   EQU   *                   16 BYTE(S)
         DC    C'0123456789ABCDEF'
AXFLGA   EQU   @DATA+00000020      1 BYTE(S)
INBUF    EQU   00000000            1 BYTE(S)
OUTAREA  EQU   00000000            2 BYTE(S)
OUTBUF   EQU   OUTAREA+00000000    1 BYTE(S)
OUTBUF1  EQU   OUTAREA+00000001    1 BYTE(S)
AXATBLEL EQU   00000000            1 BYTE(S)
         ORG   @DATA
         DS    00000021C
@TEMPS   DS    0F
@TEMP2   DC    F'0'
CNVPATCH DC    7XL2'0700'
CONVMAP  DSECT
$CNVTRMG DC    XL1'0' .            CONTROL PROGRAM FLAGS
$CNVLEVL DC    XL1'0' .            MACRO LEVEL
$CNVIDNT DC    XL2'0' .            MACRO ID
$CNVFROM DC    A(0) .              FROM ADDRESS
$CNVTO   DC    A(0) .              TO ADDRESS
$CNVCT   DC    XL2'0' .            TYPE & COUNT
FROMADDR EQU   $CNVFROM
TOADDR   EQU   $CNVTO
FLGCOUNT EQU   $CNVCT
MACROLVL EQU   $CNVLEVL
CNVCT    EQU   FLGCOUNT+00000000   2 BYTE(S) ON WORD
HEXBIT   EQU   CNVCT+00000000      1 BIT(S)
A00000   EQU   CNVCT+00000000      14 BIT(S)
LSTCNT   EQU   CNVCT+00000001      1 BIT(S)
@DATEND  EQU   *
@9FB     EQU   CNVERT06
CNVERT07 EQU   @EL01
         END
