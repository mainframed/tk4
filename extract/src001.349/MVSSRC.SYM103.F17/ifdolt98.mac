         TITLE 'IFDOLT98  *** OLTEP OLT PUNCH ***'
IFDOLT98 CSECT
* TITLE: IFDOLT98 - OLT PUNCH FOR OLTEP                               *
*                                                                     *
* STATUS: CHANGE LEVEL  000                                           *
*                                                                     *
* FUNCTION: THIS MODULE IS USED BY OLTEP USERS TO PUNCH OLT'S AND/OR  *
*        CDS'S FROM THE TEST LIBRARY CREATED WITH THE OLTEP GEN       *
*        FUNCTION.                                                    *
*           INPUT IS FROM PUNCHED CARDS DEFINED IN THE OLTEP SRL.     *
*        EACH OLT/CDS TO BE PUNCHED IS NAMED BY THE USER. UPON        *
*        READING THIS INPUT,THIS MODULE WILL SEARCH THE LIBRARY       *
*        DEFINED ON THE INPUT JCL AND PUNCH THE OLT/CDS ONTO THE CARD *
*        PUNCH ALSO DEFINED BY THE INPUT JCL. THE PUNCHED OUTPUT IS   *
*        IN 80 BYTE-CARD IMAGE,OBJECT DECK FORMAT.                    *
*                                                                     *
* ENTRY POINT: THE MAIN AND ONLY ENTRY POINT IS AT IFDOLT98 CSECT.    *
*                                                                     *
* INPUT: 1. CARDS NAMING OLT'S/CDS'S TO BE FOUND AND PUNCHED;OBTAINED *
*           FROM DDNAME 'CNTRLIN'.                                    *
*        2. OLT/LOCAL CDS DATASET FROM WHICH SELECTED OLT'S/CDS'S     *
*           ARE PUNCHED;OBTAINED FROM DDNAME 'INDASD'.                *
*        3. REMOTE CDS DATASET FROM WHICH SELECTED REMOTE CDS'S ARE   *
*           PUNCHED;OBTAINED FROM DDNAME 'INDASD2'.                   *
*                                                                     *
* OUTPUT: 1. OBJECT DECKS FOR THE SELECTED OLT'S/CDS'S;OUTPUTTED TO   *
*        THE DATASET DEFINED BY THE DDNAME 'PUNCHDD'.                 *
*         2. DIAGNOSTIC MESSAGES INDICATING STATUS OF THE RUN; OUTPUT-*
*        TED TO THE DATA SET DEFINED BY THE DDNAME 'DIAGMSG'.         *
*                                                                     *
* EXTERNAL ROUTINES: NONE                                             *
*                                                                     *
* EXITS - NORMAL: SYSTEM MACRO'S; OPEN,GET,FIND,CHECK,NOTE,POINT,PUT. *
*            NORMAL RETURN TO SYSTEM AT END-OF-FILE FROM 'CNTRLIN'.   *
*                                                                     *
*       - ABNORMAL: FAILURE TO OPEN A REQUIRED DATASET.               *
*                                                                     *
* TABLES AND WORK AREAS: NO EXTERNAL ONES USED.                       *
*                                                                     *
* ATTRIBUTES: SERIALLY REUSEABLE                                      *
*                                                                     *
* MESSAGES: 1. IFD900I - OUTPUTTED WHEN AN INVALID INPUT CARD IS      *
*        READ.                                                        *
*           2. IFD901I - OUTPUTTED WHEN A DATASET CANNOT BE OPENED.   *
*           3. IFD902I - OUTPUTTED FOR EACH SUCCESSFULLY PUNCHED      *
*        OLT/CDS.                                                     *
*           4. IFD905I - OUTPUTTED FOR ANY OLT/CDS NOT FOUND.         *
*                                                                     *
***********************************************************************
         EJECT
***********************************************************************
*                                                                     *
*                   EQUATES AND MASKS                                 *
*                                                                     *
***********************************************************************
         SPACE 2
R0       EQU   0                   GENERAL RESISTERS
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
BASEREG  EQU   12
SAVEREG  EQU   13
WKREG1   EQU   1
SW1ON    EQU   X'80'               SWITCH MASKS TO SET SWITCH ON (1)
SW2ON    EQU   X'40'
SW3ON    EQU   X'20'
SW4ON    EQU   X'10'
SW5ON    EQU   X'08'
SW6ON    EQU   X'04'
SW7ON    EQU   X'02'
SW8ON    EQU   X'01'
SW1OFF   EQU   X'7F'               SWITCH MASKS TO SET SWITCH OFF (0)
SW2OFF   EQU   X'BF'
SW3OFF   EQU   X'CF'
SW4OFF   EQU   X'EF'
SW5OFF   EQU   X'F7'
SW6OFF   EQU   X'F8'
SW7OFF   EQU   X'FC'
SW8OFF   EQU   X'FE'
D12      EQU   12                  DECIMAL CONSTANT  12
D4       EQU   4                   DECIMAL CONSTANT  4
D17      EQU   17                  DECIMAL CONSTANT OF 17
D240     EQU   240                 DECIMAL CONSTANT OF 240
L8       EQU   8                   LENGTH CONSTANT OF 8
D8       EQU   8                   DECIMAL CONSTANT  8
L5       EQU   5                   LENGTH CONSTANT   5
RCREG    EQU   15                  RETURN CODE REG
WORKREG1 EQU   1                   WORK REG GPR #1
SWBYTAOF EQU   X'00'               MASK SWITCH BYTE A OFF
SWBYTAON EQU   X'FF'               MASK SWITCH BYTE A ON
DCBREG   EQU   5                   REG USED IN OPEN CHECKS
LINKREG1 EQU   4                   LINKAGE REG FOR INTERNAL ROUTINES
*                                  SWITCH A BIT DEFINITIONS
DCBOFLGS EQU   X'30'               DISPLACEMENT INTO UCB FOR OPEN FLAGS
OPENOK   EQU   X'10'               MASK TO CHECK IF OPEN WAS SUCCESSFUL
CHARREG  EQU   6                   CHARACTER POINTER REG
CHAREND  EQU   3                   NAME FIELD END REG
TRTCODE  EQU   2                   TRT INSTR RETURN CODE REG
DATAAREA EQU   7
D0       EQU   0                   DECIMAL CONSTANT OF 0
D193     EQU   193                 DECIMAL CONSTANT OF 193
D1       EQU   1                   DECIMAL CONSTANT OF 1
LGNTHREG EQU   8                   REG 8 TO HOLD DATA LENGTH FOR READ
D80      EQU   80                  ESD,END,RLD,TXTHDR DATA LENGTH CONST
NOTEREG  EQU   1                   NOTE SYS MACRO RETURNS DATA IN REG 1
TXTHDRON EQU   X'80'               TXTHDR SWITCH BIT IN SWITCH BYTE A
D2       EQU   2                   DECIMAL CONSTANT OF 2
D3       EQU   3                   DECIMAL CONSTANT OF 3
NXTRECUP EQU   X'01'               USED TO UPDATE TTRZ FROM NOTE FOR
*                                  POINT TO NEXT RECORD
DATACNT  EQU   21                  OFSET INTO TXTHDR FOR TXT DATA SIZE
L3       EQU   3                   DECIMAL CONSTANT OF 3
L4       EQU   4                   LENGTH CONSTANT OF 4
D76      EQU   76                  DECIMAL CONSTANT OF 76-START OF SEQ#
WORKREG9 EQU   9                   WORKREG 9
ASMADREG EQU   3                   REG TO HOLD ASSEMBLED ADDR
L1       EQU   1                   LENGTH CONSTANT OF 1
L2       EQU   2                   LENGTH CONSTANT OF 2
D25      EQU   25                  DISPLACEMENT INTO TXTHDR FOR TXT ID
OBJREG   EQU   11                  POINTS TO TXT CARD FOR A DSECT
D32      EQU   32                  DECIMAL CONSTANT OF 32
D56      EQU   56                  DECIMAL CONSTANT OF 56 (TXT DATA CT)
WORKREGA EQU   10                  WORK REG 10
TXTOUTCT EQU   9                   COUNT OF MAX TXT CARDS TO OUTPUT PER
*                                   BLOCKED TXT DATA RECORD READ
L56      EQU   56                  LENGTH OF 56
REMANDER EQU   8                   REMAINDER REG FOR DIVISION OF TXT/56
D255     EQU   255                 DECIMAL CONSTANT 255 TO TURN SW OFF
WORKREG2 EQU   2                   WORK REG # 2
RESTORE  EQU   X'8B'               PRINTER RESTORE COMMAND CODE
LINECTR  EQU   3                   PRINTER OUTPUT LINE COUNTER REG
D59      EQU   59                  59 LINES PER PAGE
WRTSP1   EQU   X'09'               PRINTER COMMAND WRITE AND SPACE 1
L80      EQU   80                  DECIMAL CONSTANE OF 80
D40      EQU   40                  DECIMAL CONSTANT OF 40
         EJECT
***********************************************************************
*                        INITIALIZATION                               *
*        FIRST PERFORM LINKAGE CONVENTIONS THEN INITIALIZE SWITCHES   *
*                                                                     *
*                                                                     *
***********************************************************************
         SPACE 3
         SAVE  (14,12),,IFDOLT98&SYSDATE  SAVE THE SYSTEM'S REGS
         BALR  BASEREG,R0          ESTABLISH ADDRESSABILITY
         USING *,BASEREG
         ST    SAVEREG,SAVEAREA+D4 SAVE SYSTEM SAVEAREA POINTER
         LA    WORKREG1,SAVEAREA   PUT POINTER TO MY SAVE AREA
         ST    WORKREG1,D8(SAVEREG)   INTO SYSTEM'S SAVE AREA
         LR    SAVEREG,WORKREG1    SET UP SAVE REG TO POINT TO MY SAVE
         MVI   SWITCHA,SWBYTAOF    SET SWITCH BYTE A TO ZEROES (OFF)
         USING OBJCRDM,OBJREG      SET ADDRESSABILITY TO OBJECT DSECT
         LA    OBJREG,DASDAREA
         SPACE 5
***********************************************************************
*                                                                     *
*                        PERFORM OPENS TO NECESSARY DATA SETS         *
*        END JOB IF A NECESSARY DATASET FAILS TO OPEN                 *
***********************************************************************
         SPACE 2
         OPEN  (INCARD,INPUT,OUTCARD,(OUTPUT),INDASD,INPUT,PRINTER,    X
               (OUTPUT))
         SPACE
*  CHECK IF OPENS ARE SUCCESSFUL
         SPACE
         LA    DCBREG,PRINTER      SET UP TO CHECK PRINTER DCB
         TM    DCBOFLGS(DCBREG),OPENOK  DID IT OPEN?
         BO    OPEN0090            YES-GO CK ON.IF NOT ISSUE MSG 901
         WTO   'IFD901I DIAGMSG  DDCARD FAILED TO OPEN ****ERROR****'
         B     PCH00980            NOW GO END RUN
         SPACE
OPEN0090 EQU   *
         LA    DCBREG,INCARD       SET   DCB FOR CARD INPUT
         BAL   LINKREG1,OPEN0100   GO CHECK IT
         LA    DCBREG,OUTCARD      SET   DCB FOR PUNCHED OUTPUT
         BAL   LINKREG1,OPEN0100   GO CHECK IT
         LA    DCBREG,INDASD       SET   DCB FOR OLT/CDS LIBRARY
         LA    LINKREG1,PCH00200   SET LINKREG TO PROCESS LOOP
         SPACE 2
OPEN0100 EQU   *                   ROUTINE TO TEST OPEN SUCCESSFUL FLAG
         TM    DCBOFLGS(DCBREG),OPENOK  FLAGS IN DCB OK?
         BNO   PCHER900            NO - GO GIVE MSG AND ABORT
         BR    LINKREG1            OK-RESUME.
         SPACE 3
***********************************************************************
*                                                                     *
*                   MAIN PROCESS ROUTINE                              *
*      1. READ CONTROL CARD AND VERIFY IT, ISSUE MSG IF BAD.          *
*      2. ISSUE SYSTEM FIND MACRO TO LOCATE SELECTED OLT/CDS.         *
*      3. READ THE OLT/CDS RECORDS INTO MAIN STOREAGE                 *
*      4. DEBLOCK ANY TXT RECORDS                                     *
*      5. OUTPUT 80 BYTE OBJECT DECK FORMAT RECORDS TO PUNCHED        *
*                                                                     *
***********************************************************************
         SPACE 2
PCH00200 EQU   *
         GET   INCARD,INAREA1      READ A CONTROL RECORD
         CLC   CTRLID(L'CTRLID),CTRLCON   THIS A CONTROL CARD
         BE    PCH00210            YES- GO VERIFY IT
         CLC   CTRLID(L'SYMBOLIC),SYMBOLIC  THIS A SYMBOLIC CDS BREAK
         BNE   PCHER910            NO-GO GIVE INVALID CARD MSG.
         OPEN  (SYMCDSDD,INPUT)    OPEN SYMBOLIC CDS DATASET
         LA    LINKREG1,PCH00200   SET UP TO START PROCESSING
         LA    DCBREG,SYMCDSDD     SET DCB ADDRESS
         B     OPEN0100            GO SET IF OPEN OK
         SPACE 3
* VERIFY OLT/CDS ID ON CONTROL CARD
         SPACE
PCH00210 EQU   *
         LA    CHARREG,CTRLINFO    GET OLT/CDS NAME START
         LA    CHAREND,CTRLPAD     SET NAME FIELD END POINT
PCH00211 CLI   D0(CHARREG),C'$'    THIS CHAR A '$'
         BE    PCH00213            YES-GO UPDATE TO NEXT CHAR
         CLI   D0(CHARREG),C'#'    THIS CHAR A '#'
         BE    PCH00213            YES-UPDATE
         CLI   D0(CHARREG),C'@'    THIS A '@'
         BE    PCH00213            YES-UPDATE
         CLI   D0(CHARREG),C' '    THIS A BLCNK
         BE    PCH00216            YES-GO VERIFY IT'S OK
         CLI   D0(CHARREG),C'A'    IS CHAR LESS THAN 'A'
         BL    PCHER910            YES-GO OUTPUT BAD INPUT CARD MSG
         SR    TRTCODE,TRTCODE     CLEAR TRT RETURN CODE REG
         TRT   D0(1,CHARREG),TRTTABLE-D193   TEST CHAR AND BRANCH
         B     *(TRTCODE)          WHAT IS IT
         B     PCH00213            IT'S ALPHA-GO UPDATE
         B     PCH00219            IT'S NUMERIC-GO SEE IF OK
         B     PCHER910            IT'S BAD-GO GIVE MSG
         SPACE
PCH00213 EQU   *                   UPDATE AND CHECK LENGTH
         LA    CHARREG,D1(CHARREG) POINT TO NEXT CHARACTER
         CR    CHARREG,CHAREND     HAVE 8 CHARACTERS BEEN CHECKED
         BL    PCH00211            NO- RESUME CHECKING
         CLI   D0(CHARREG),C' '    YES-IS NAME FOLLOWED BY A BLANK
         BNE   PCHER910            NO-GO GIVE BAD INPUT MSG
*                                  NAME OK-NOW SET CHAR COUNT FOR FIND
         SPACE
PCH00216 EQU   *                   PROCESS BLANK
         LA    WORKREG1,CTRLINFO   GET 1ST CHAR ADDR
         CR    CHARREG,WORKREG1    IS FIRST CHAR A BLANK
         BE    PCHER910            YES-GO GIVE BAD INPUT MSG
         SR    CHARREG,WORKREG1    NAME OK-SET CHAR COUNT FOR FIND MVC
         B     PCH00300
         SPACE
PCH00219 EQU   *                   THIS ROUTINE INSURES A NUMERIC ISN'T
         LA    WORKREG1,CTRLINFO   THE FIRST CHAR. GET 1ST CHAR ADDRESS
         CR    CHARREG,WORKREG1    IS IT THE 1ST CHAR
         BE    PCHER910            YES-GO GIVE ERROR MSG
         B     PCH00213            OK-GO UPDATE
         EJECT
PCH00300 EQU   *                   SET UP FIND MACRO
         MVI   FINDLIST,C' '       CLEAR FINDLIST
         MVC   FINDLIST+D1(L'FINDLIST-D1),FINDLIST
         BCTR  CHARREG,R0          SUBTRACT 1 FROM CHAR REG
         EX    CHARREG,MVC1        MOVE OLT/CDS NAME TO FIND LIST
         FIND  (DCBREG),FINDLIST,D DOES OLT/CDS EXIST
         LTR   RCREG,RCREG         OLT/CDS FOUND (R15=0)?
         BNZ   PCHER920            NO-GO GIVE MSG IFD905I-MODULE NOT
*                                   FOUND.
         SPACE 2
*  MODULE FOUND AND READY
         SPACE
PCH00305 EQU   *
         LA    DATAAREA,DASDAREA   SET INPUT OLT/CDS DATA ADDR FOR READ
         LA    LGNTHREG,080        SET MIN REC LENGTH-NOT TXT LENGTH
PCH00310 EQU   *
         READ  DASDECB,SF,(DCBREG),(DATAAREA),(LGNTHREG) GO READ A REG
         CHECK DASDECB             WAIT FOR EVENT COMPLETE
         NOTE  (DCBREG)            GET DASD ADDR OF RECORD JUST READ
         ST    NOTEREG,RECRELAD
         MVI   RECRELAD+D3,NXTRECUP  POINT TO NEXT RECORD
         POINT (DCBREG),RECRELAD   POINT TO NEXT RECORD
         TM    TXTHDRSW,TXTHDRON   WAS A TXT RECORD READ
         BO    PCH00350
         CLC   D0(L'TXTHDRDC,DATAAREA),TXTHDRDC IS THIS A TXTHDR
         BNE   PCH00320            NO-GO PROCESS OTHER RECORD TYPES
         OI    TXTHDRSW,TXTHDRON   YES-SET TXTHDR SWITCH ON
         XC    WRKAREA1,WRKAREA1   CLEAR WORK AREA 1
         MVC   WRKAREA1+D1(L3),DATACNT(DATAAREA)  GET SIZE OF TXT DATA
*                                  RECORD FROM TXTHDR RECORD
         L     LGNTHREG,WRKAREA1   SET TXT COUNT FOR READ
         LA    DATAAREA,TXTBFR     GET TXT BFR ADDEESS FOR REAR
         B     PCH00310            GO REAR THE TXT RECORD
         SPACE 3
*  ROUTINE TO PROCESS ESD,RLD,END,AND REP CARDS/RECORDS
PCH00320 EQU   *
         CLC   OBJCRDID(L4),ESDCON IS THIS AN ESD CARD
         BE    PCH00321            YES- GO SAVE SEQ #
         CLC   OBJCRDID(L4),REPCON IS THIS AN RLD CARD
         BE    PCH00322            YES-GO PUNCH IT-NO SEQ #'S IN REP'S
         CLC   SEQBFR(L4),BLANKS   DOES SEQ BFR HAVE BLANKS
         BE    PCH00322            YES - DON'T UPDATE SEQ #
         BAL   LINKREG1,PCH00700   GO UPDATE THE SEQ #
         MVC   OBJSEQ#(L4),SEQBFR  MOVE SEQ #'S INTO TXT,RLD,AND END
         B     PCH00322            GO PUNCH IT
         SPACE 2
PCH00321 EQU   *
         MVC   SEQBFR(L4),OBJSEQ#  SAVE THE SEQ NUMBER
PCH00322 EQU   *
         PUT   OUTCARD,DASDAREA    OUTPUT RECORD TO PUNCH
         TM    TXTHDRSW,TXTHDRON   IS TXTHDR SW ON
         BO    PCH00360            GO CONTINUE TXT DEBLOCK LOOP
         CLC   DASDAREA(L4),ENDCON WAS AN END REC PROCESSED
         BNE   PCH00310            NO-GO READ NEXT RECORD
         LA    WORKREG9,D4         SET UP TO PUNCH 4 BLANK CARDS
         MVI   DASDAREA,C' '       CLEAR OUTPUT BFR
         MVC   DASDAREA+D1(L'DASDAREA-D1),DASDAREA
PCH00323 EQU   *
         TM    OUTCARD+17,X'40'    ONLY PUT OUT BLANK CARDS      X03008
         BNO   PCH00330            TO A PUNCH.                   X03008
         PUT   OUTCARD,DASDAREA    OUTPUT A BLANK CARD
         BCT   WORKREG9,PCH00323   PUT OUT 4 BLANK CARDS THEN
PCH00330 EQU   *                                                 X03008
         LA    WORKREG9,PCHOKMSG   OUTPUT MSG IFD902I FOR SUCCESSFOL
         MVC   MODOKNAM(L'FINDLIST),FINDLIST NOVE NAME TO MSG IFD902I
         BAL   LINKREG1,PCH00800   GO PUT OUT MSG
         B     PCH00200            GO GET NEXT CONTOLL CARD
         EJECT
*
*  ROUTINE TO DEBLOCK TXT RECORDS INTO 80 BYTE OBJECT DECK FORMAT CARDS
*
PCH00350 EQU   *
         XC    WRKAREA1,WRKAREA1   ZERO WORK AREA 1
         MVC   WRKAREA1+D1(L3),DASDAREA+D17  GET ASSEMBLED ADDRESS
         L     ASMADREG,WRKAREA1   INTO ASM ADDR REG
         MVC   TXTIDBFR(L'TXTIDBFR),DASDAREA+D25 SAVE TXT RECORD ID
         MVC   DASDAREA(L'DASDAREA),TXTCONST INITIALIZE TXT RECORD CARD
         SRDL  LGNTHREG,D32        SET UP TO DIVIDE TXT REC DATA CNT
         LA    WORKREGA,D56         BY MAX TXT DATA COUNT OF 56
         DR    LGNTHREG,WORKREGA   DIVIDE
PCH00353 EQU   *
         LTR   TXTOUTCT,TXTOUTCT   IS QUOTIENT = 0
         BZ    PCH00355            YES- GO MOVE REMAINDER OF TXT DATA
         MVC   TXTDATA(L'TXTDATA),D0(DATAAREA)  MOVE 56 BYTES OF TXT
         MVC   TXTDATCT(L'TXTDATCT),CON56  MOVE TXT CARD DATA COUNT
         B     PCH00359            GO COMPLETE TXT CARD
         SPACE 5
PCH00355 EQU   *
         LTR   REMANDER,REMANDER   ANY REMAINDER OF TXT DATA
         BNZ   PCH00357            GO CREATE LAST TXT CARD FOR THIS REC
         NI    TXTHDRSW,D255-TXTHDRON  TURN TXT HDR SW OFF (0)
         B     PCH00305            GO SET UP TO READ NEXT RECORD
         SPACE 2
PCH00357 EQU   *
         MVC   DASDAREA(L'DASDAREA),TXTCONST INITIALIZE BASIC TXT CARD
         ST    REMANDER,WRKAREA1   STORE REMAINING BYTE COUNT OF TXT
         MVC   TXTDATCT(L'TXTDATCT),WRKAREA1+D2  MOVE TXT BYTE COUNT
         BCTR  REMANDER,R0         SUBTRACT 1 FROM BYTE COUNT FOR MVC
         EX    REMANDER,MVC2       MOVE REMAINING TXT DATA
         LA    TXTOUTCT,D1         SET QUOTIENT TO 1 TO CONTROL LOOP
         SR    REMANDER,REMANDER   CLEAR REMAINDER
PCH00359 EQU   *
         MVC   TXTESDID(L'TXTESDID),TXTIDBFR MOVE TXT DATA ESDID
         ST    ASMADREG,WRKAREA1   SET ASM ADDRESS FOR MOVE
         MVC   TXTASMAD(L'TXTASMAD),WRKAREA1+1 MOVE REL ASM ADR TO TXT
         LA    ASMADREG,D56(ASMADREG)   UPDATE REL ASM ADDR
         LA    DATAAREA,D56(DATAAREA)   UPDATE TXT DATA PTR
         B     PCH00320            GO OUTPUT CARD
         SPACE 5
PCH00360 EQU   *                   CONTINUE TXT DEBLOCK PROCESS LOOP
         BCTR  TXTOUTCT,R0         SUBTRACT 1 FROM QUOTIENT
         B     PCH00353            CONTINUE
         EJECT
*  THIS ROUTINE IS USED TO UPDATE THE OBJECT CARD SEQUENCE NUMBER TO
*  THE NEXT HIGHER NUMBER
         SPACE
PCH00700 EQU   *
         LA    WORKREG1,D4         SET NUMBER OF CHARS TO UPDATE
PCH00701 EQU   *
         LA    WORKREG2,SEQBFR-D1(WORKREG1)  POINT TO CAAR TO UPDATE
         TR    D0(L1,WORKREG2),SEQUPCHR-D240 ADD EBCDIC 1 TO SEQ #
         CLI   D0(WORKREG2),C'0'   DID IT GO TO A ZERO
         BNE   PCH00702            NO - RETURN
         BCT   WORKREG1,PCH00701   YES - GO UPDATE NEXT CHAR
PCH00702 EQU   *
         BR    LINKREG1            RETURN - NO MORE CHARS TO UPDATE
         EJECT
*  THIS IS THE PRINTING ROUTINE. IT CONTROLS THE PRINTER CARRIAGE
*  AND OUTPUTS MESSAGES PASSED TO IT IN (ADDRESSED BY) REGISTER 9
         SPACE
PCH00800 EQU   *                   PRINT OUT MSG AND CONTROL PRINTER
         MVI   PRTBFR,C' '         CLEAR OUT PRINT BFR
         MVC   PRTBFR+D1(L'PRTBFR-D1),PRTBFR
         MVI   PRTBFR,RESTORE      SET TO EJECT IF NEW PAGE NEEDED
         L     LINECTR,LINECNT     GET LINE COUNT
         BCT   LINECTR,PCH00810    IS IT TIME TO EJECT
         PUT   PRINTER,PRTBFR      YES EJECT
         LA    LINECTR,D59         SET CTR FOR NEW PAGE
         ST    LINECTR,LINECNT     SAVE IT
PCH00810 EQU   *
         MVI   PRTBFR,WRTSP1       SET CNTRL CMD TO WRITE AND SPACE 1
         IC    WORKREG2,D0(WORKREG9)  GET MSG SIZE
         BCTR  WORKREG2,D0         SUBTRACT 1 FOR MSG LENGTH BYTE
         BCTR  WORKREG2,D0         SUBTRACT 1 FOR EXECUTE MVC3
         EX    WORKREG2,MVC3       MOVE MSG TO BFR
         PUT   PRINTER,PRTBFR      PRINT IT
         BR    LINKREG1            RETURN
         EJECT
*  HERE IF DATASET FAILED TO OPEN. GIVES MSG IFD901I WITH DDNAME THEN
*  END RUN
         SPACE
PCHER900 EQU   *
         LA    WORKREG9,OPENFAIL   GET MSG ADDRESS
         MVC   OPENNAME(L8),D40(DCBREG) GET DD NAME THAT FAILED TO OPEN
         BAL   LINKREG1,PCH00800   GO GIVE MSG
         B     PCH00980            RETURN TO SYSTEM
         SPACE 3
*  HERE IF AN INVALID INPUT CONTROL CARD WAS READ. GIVE MSG IFD900I
*  THEN GO READ NEXT CONTROL CARD
         SPACE
PCHER910 EQU   *
         LA    WORKREG9,NVALINPT   GET MSG ADDR OF IFD900I
         MVC   NVALCARD(L80),INAREA1  MOVE INVALID CARD TO MSG
         BAL   LINKREG1,PCH00800   GO GIVE MSG
         B     PCH00200            GO GET NEXT INPUT CARD
         SPACE 5
*  HERE IF THE OLT DOES NOT EXIST ON THE ACCESSED DATASET
         SPACE
PCHER920 EQU   *
         LA    WORKREG9,OLTNOTON   GET MSG ADDR FOR OLT NOT FOUND MSG
         MVC   NOOLTNAM(L8),FINDLIST   MOVE OLT/CDS NAME TO MSG
         BAL   LINKREG1,PCH00800   GO GIVE MSG
         B     PCH00200            GO GET NEXT CONTROL CARD
         EJECT
*  ROUTINE TO END THIS RUN
PCH00980 EQU   *
         CLOSE (SYMCDSDD,,PRINTER,,INCARD,,INDASD,,OUTCARD)
         L     SAVEREG,D4(SAVEREG)      RETURN TO SYSTEM
         LM    R14,R12,D12(SAVEREG)
         BR    R14
         EJECT
***********************************************************************
*                                                                     *
*                        CONSTANTS                                    *
*                                                                     *
***********************************************************************
MVC1     MVC   FINDLIST(D0),CTRLINFO   MOVE INSTR FOR AN EXECUTE
MVC2     MVC   TXTDATA(D0),D0(DATAAREA) MVC FOR EXECUTE TXT DATA MOVE
MVC3     MVC   PRTBFR+D1(D0),D1(WORKREG9)   MOVE MSG TO PRT BFR
SAVEAREA DC    18F'0'              MY SAVE AREA
RECRELAD DC    F'00'               TRACK ADDRESS OF RECORD TO READ NEXT
SWITCHA  DC    XL1'00'             SWITCH BYTE A
TXTHDRSW EQU   SWITCHA
SWCH2    EQU   SWITCHA
SWCH3    EQU   SWITCHA
SWCH4    EQU   SWITCHA
SWCH5    EQU   SWITCHA
SWCH6    EQU   SWITCHA
SWCH7    EQU   SWITCHA
SWCH8    EQU   SWITCHA
INAREA1  DS    0CL80               CONTRL INPUT BFR
CTRLID   DC    CL5' '              CONTRL IDENT
CTRLINFO DC    CL8' '              OLT/CDS NAME
CTRLPAD  DC    CL67' '             PADDING AREA NOT USED
FINDLIST DC    CL8' '              LIST FOR FIND MACRO
DASDAREA DC    CL80' '             READ IN AREA FOR ALL OLT/CDS NON TXT
TXTHDRDC DS    0CL7                TEXT HDR RECORD IDENTERFIER
         DC    XL1'02'
         DC    CL6'TXTHDR'
CTRLCON  DC    CL5'NAME '
SYMBOLIC DC    C'SYMBOLIC CDS'
TRTTABLE EQU   *                   TABLE FOR TRANSLATE AND TEST
         DC    9X'04'              CHARACTERS 'A' TO 'I'
         DC    7X'0C'              CHARACTERS BETWEEN 'I' AND 'J'
         DC    9X'04'              CHARACTERS 'J' TO 'R'
         DC    8X'0C'              CHARACTERS BETWEEN 'R' AND 'S'
         DC    8X'04'              CHARACTERS 'S' TO 'Z'
         DC    6X'0C'              CHARACTERS BETWEEN 'Z' AND '0'
         DC    10X'08'             CHARACTERS '0' TO '9'
         DC    6X'0C'              CHARACTERS AFTER '9'
WRKAREA1 DC    F'0'                A WORK AREA
TXTIDBFR DC    XL2'0000'           TXT ID SAVE AREA
SEQBFR   DC    CL4' '              BUFFER FOR SAVING SEQ NUMS
SEQUPCHR DC    C'1234567890'       CHARACTERS TO UPDATE SEQ #
ENDCON   DS    0CL4                CONSTANT FOR FIRST 4 CHARS OF END
         DC    X'02'                 RECORD
         DC    C'END'
TXTCONST DS    0CL80               BASIC TXT RECORD FORMAT-OBJECT CARD
         DC    XL1'02'              PUNCHED BY THIS MODULE
         DC    CL4'TXT '           CARD IDENTIFIER
         DC    XL3'000000'         LOC FOR RELATIVE ASM ADDR
         DC    CL2'  '             BLANKS
         DC    XL2'0000'           BYTE COUNT OF DATA ON THIS CARD
         DC    CL2'  '             BLANKS
         DC    XL2'0000'           ESDID (TXTID)
         DC    CL56' '             TXT DATA FIELD
         DC    CL8' '              COL 73-80 SEQ #
         SPACE 2
CON56    DC    XL2'0038'           CONSTANT OF DEC 56 FOR MAX TXT DATA
         SPACE 3
PCHOKMSG DC    C' IFD902I XXXXXXXX WAS CORRECTLY PUNCHED'
         ORG   PCHOKMSG
         DC    AL1(L'PCHOKMSG)
         ORG   PCHOKMSG+L'PCHOKMSG
MODOKNAM EQU   PCHOKMSG+9
         SPACE 3
OPENFAIL DC    C' IFD901I XXXXXXXX DDCARD FAILED TO OPEN ****ERROR****'
         ORG   OPENFAIL
         DC    AL1(L'OPENFAIL)
         ORG   OPENFAIL+L'OPENFAIL
OPENNAME EQU   OPENFAIL+9
         SPACE 3
OLTNOTON DC    C' IFD905I XXXXXXXX MODULE NOT ON DATASET, PUNCH BYPASSEX
               D'
         ORG   OLTNOTON
         DC    AL1(L'OLTNOTON)
         ORG   OLTNOTON+L'OLTNOTON
NOOLTNAM EQU   OLTNOTON+9
         SPACE 3
NVALINPT DC    C' IFD900I INVALID INPUT, REJECTED -                    X
                                                                       X
                   '
         ORG   NVALINPT
         DC    AL1(L'NVALINPT)
         ORG   NVALINPT+L'NVALINPT
NVALCARD EQU   NVALINPT+35
         EJECT
PRTBFR   DC    CL121' '            THE PRINT BUFFER
LINECNT  DC    F'1'                PRINTER LINE COUNTER
BLANKS   DC    CL4' '              4 BLANKS FOR A COMPARE
ESDCON   DS    0CL4
         DC    XL1'02'
         DC    CL3'ESD'
REPCON   DS    0CL4
         DC    XL1'02'
         DC    CL3'REP'
         EJECT
SYMCDSDD DCB   LRECL=80,DDNAME=SYMSYM,DSORG=PO,BLKSIZE=3600,MACRF=R,   X
               RECFM=UT
INCARD   DCB   DDNAME=CNTRLIN,BLKSIZE=80,RECFM=F,LRECL=80,DSORG=PS,    X
               MACRF=GM,EODAD=PCH00980
OUTCARD  DCB   DDNAME=PUNCHDD,BLKSIZE=80,RECFM=FB,LRECL=80,DSORG=PS,   X
               MACRF=PM
INDASD   DCB   LRECL=80,DDNAME=OLTCDSDD,MACRF=R,RECFM=UT,BLKSIZE=3600, X
               DSORG=PO
PRINTER  DCB   DDNAME=DIAGMSG,DSORG=PS,MACRF=PM,BLKSIZE=121,RECFM=FBM, X
               LRECL=121
         IFDPATCH
TXTBFR   DS    100CL36             BFR TO HOLD MAX TXT DATA BLOCK
         EJECT
         DSECT
OBJCRDM  DS    0CL80               BASIC OBJECT CARD FORMAT
OBJCRDID DC    XL1'02'
         DC    CL3'XXX'
         DS    CL72
OBJSEQ#  DC    CL4' '
         SPACE 5
         ORG   OBJCRDM
         DSECT
TXTCARDM DC    XL1'02'             MAP OF A TXT CARD
         DC    CL4'TXT '
TXTASMAD DC    XL3'000000'         REL ASSEMBLED ADDRESS
         DC    CL2'  '
TXTDATCT DC    XL2'0000'           TXT DATA COUNT
         DC    CL2'  '
TXTESDID DC    XL2'0000'           TXT ESD IDENT (CSECT NUMBER)
TXTDATA  DC    CL56' '             TXT DATA
         DC    CL4' '
TXTSEQ#  DC    CL4' '              SEQ NUMBER
         END
