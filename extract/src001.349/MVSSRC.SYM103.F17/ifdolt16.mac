         TITLE 'IFDOLT16 GETCONFIG'
         TITLE 'IFDOLT16 GETCONFIG'                          /*X03906*/
         LCLA  &T,&SPN                                            0002
.@001    ANOP                                                     0002
IFDOLT16 CSECT ,                                                  0002
         BC    15,24(0,@F)
         DC    C'IFDOLT16 17 SEP 73'                             0002
         ST    @E,12(0,@D)                                        0002
         STM   @0,@C,20(@D)                                       0002
         BALR  @B,0                                               0002
@PSTART  DS    0H                                                 0002
         USING @PSTART+00000,@B                                   0002
         ST    @D,@SAV001+4                                       0002
         LA    @F,@SAV001                                         0002
         ST    @F,8(0,@D)                                         0002
         LR    @D,@F                                              0002
*         GEN( USING CHASCT,2);
          USING CHASCT,2
         DS    0H
*         GENERATE DATA;
*         DCL CESWT3 CHAR(1) GENERATED;     /*OLTEP SWITCHES*/
*         DCL 1 SWITCHES CHAR(1) BASED(ADDR(CESWT3)),
*           2 * BIT(6),
*           2 CDSEXIST BIT(1),
*           2 * BIT(1);
*         DCL PRIDVPTR PTR GENERATED;     /*PRIMARY DEVICE PTR*/
*         DCL 1 * BASED(PRIDVPTR),  /* PRIMARY DEVICE TABLE STRUCT21051
*           3 * CHAR(1),            /* DEVICE NAME IN EBCDIC     21051*
*           3 EBNAME CHAR(7),       /* DEVICE MAME IN EBCDIC.    21051*
*           3 * CHAR(24),           /* CDS IN DEVTABLE           21051*
*           3 DVTABCDS CHAR(20),    /*CDS ENTRY IN DEVTABLE.     21051*
*             5 * CHAR(9),
*             5   DVCDSFLG CHAR(1), /* CDS FLAG BYTE.            21051*
*               7 * BIT(4),
*               7 SYMEXIST BIT(1),  /* SET IF SYM NAME EXISTS    21051*
*               7 * BIT(1),
*               7 REMCDS BIT(1),    /* SET IF CDS IS IN REMOTE FIL21051
*             5 * CHAR(2),
*             5 DEVSYMNM CHAR(8);   /* SYMBOLIC NAME OF DEVICE.  21051*
*         DCL 1 * BASED(ADDR(NAME)) CHAR(8),
*           2 PFIRST CHAR(1),
*           2 PRIMENM CHAR(7);
*         DCL CESWT7 CHAR(1) GENERATED;  /*---CESWT7 FORMAT------21050*
*         DCL  1 OLTEPSW7 BASED(ADDR(CESWT7)), /* C E SWT FORMAT.21050*
*               3 INCLST BIT(1),   /* INCLUSIVE SERIES OF DEVICES21050*
*           3 RETTO31 BIT(1),      /* NEED TO RET TO IFDOLT31.   21050*
*               3 REMOTE BIT(1),   /* REMOTE TERMINAL IN SYSTEM. 21051*
*           3 LOADCDS BIT(1);            /* LOAD CDS FROM REM FILE21050
*         PARMFLGS='60'X;               /* CDS LOAD,COMPUTE     X02008*
         MVI   LOADLIST+12,X'60'                                  0038
*         PARMPTR=R1;                   /*PUT PTR TO PARMLIST IN REG 5*
         LR    @5,@1                                              0039
*         IF MACROLEV < '02'X THEN      /* CHECK MACRO LEVEL*/
         CLI   1(@5),X'02'                                        0040
         BC    10,@9FF                                            0040
*           DO;
*           CODE=4;                     /*RETURN CODE FOR WRONG MACRO
*                                         LEVEL*/
         LA    @4,4                                               0042
*           GOTO RTRN;
         BC    15,RTRN                                            0043
*           END;
*         IF MODLEV < MACROLEV THEN     /*COMPARE MACRO LEVEL WITH
*                                         MODULE LEVEL*/
@9FF     CLC   MODLEV(1),1(@5)                                    0045
         BC    10,@9FE                                            0045
*           DO;
*           CODE=4;                     /*RETURN CODE FOR WRONG MACRO
*                                         LEVEL*/
         LA    @4,4                                               0047
*           GOTO RTRN;
         BC    15,RTRN                                            0048
*           END;
*         IF CDSEXIST='0'B THEN         /*IS CDS AVAILABLE?*/
@9FE     TM    SWITCHES,B'00000010'                               0050
         BC    05,@9FD                                            0050
*           DO;
*           CODE=4;                     /*RETURN CODE FOR CDS NOT
*                                         AVAILABLE*/
         LA    @4,4                                               0052
*           GOTO RTRN;                  /*BRANCH IF CDS NOT AVAILABLE*/
         BC    15,RTRN                                            0053
*           END;
*         IF SIZE=0 THEN                /* IS SIZE 0           OX01385*
@9FD     CLI   12(@5),0                                           0055
         BC    07,@9FC                                            0055
*           DO;                         /* YES,                OX01385*
*           CODE=8;                     /* RETURN CODE 8       OX01385*
         LA    @4,8                                               0057
*           GO TO RTRN;                 /* EXIT                OX01385*
         BC    15,RTRN                                            0058
*           END;                        /*                     OX01385*
*         IF CDSADR=0 THEN
@9FC     SR    @F,@F                                              0060
         C     @F,4(0,@5)                                         0060
         BC    07,@9FB                                            0060
*           DO;                         /*PRIMARY DEVICE */
*           IF SYMEXIST='1'B THEN  /* IS A SYMBOLIC NAME FOR THES21050*
         L     @1,PRIDVPTR                                        0062
         TM    41(@1),B'00001000'                                 0062
         BC    12,@9FA                                            0062
*             DO;                  /* DEVICE EXIST IN  THE SCT?  21050*
*       NAME=DEVSYMNM;              /* PREPARE TO LOAD SYM ENTRY 21051*
         MVC   NAME(8),44(@1)                                     0064
*         IF REMCDS='1'B THEN      /* CDS IN REMOTE FILE?        21051*
         TM    41(@1),B'00000010'                                 0065
*             GO TO CHEKFILE;      /* LOAD IN CDS ENTRY.         21051*
         BC    01,CHEKFILE                                        0066
*         GO TO LOADENT;           /* LOAD ENTRY FROM LOCAL FILE.21051*
         BC    15,LOADENT                                         0067
*             END;                 /*                            21050*
*          PFIRST='G';
@9FA     MVI   A00018,C'G'                                        0069
*           PRIMENM=EBNAME;
         L     @1,PRIDVPTR                                        0070
         MVC   A00018+1(7),1(@1)                                  0070
*           GOTO LOADENT;
         BC    15,LOADENT                                         0071
*           END;
*         IF NAMEBIT='1'B THEN
@9FB     L     @1,4(0,@5)          
         TM    9(@1),B'00001000'                                  0073
         BC    12,@9F9                                            0073
*           DO;
*           NAME=SYMNAME;                /*USE SYMBOLIC NAME          *
         MVC   NAME(8),12(@1)                                     0075
*         IF REMFILE='1'B THEN
         TM    9(@1),B'00000010'                                  0076
*             GO TO CHEKFILE;      /* LOAD IN CDS ENTRY.         21051*
         BC    01,CHEKFILE                                        0077
*         GO TO LOADENT;           /* LOAD ENTRY FROM LOCAL FILE.21051*
         BC    15,LOADENT                                         0078
*           END;
*     /* THE FOLLOWING SECTION OF CODE TRANSLATES THE DEVICE ADDRESS
*        FROM HEX TO EBCDIC*/
*         WORK2=UNITAD;                  /*PUT DEV ADDR IN REG */
@9F9     L     @1,4(0,@5)          
         MVC   @TEMP4(4),0(@1)                                    0080
         L     @9,@TEMP4                                          0080
*         DO I = 1 TO 8;
         LA    @7,1                                               0081
*         WORK1=0;                       /*CLEAR INDEX REGISTER */
@DO9F8   SR    @8,@8                                              0082
*         GEN(SLDL WORK1,4);             /*PUT NUMBER IN REG */
         SLDL WORK1,4
         DS    0H
*         WORK1=WORK1+1;
         AH    @8,@D1                                             0084
*         IF I=1 THEN
         CH    @7,@D1                                             0085
         BC    07,@9F4                                            0085
*           ADD(1)=TAB1(WORK1);          /*1ST CHAR*/
         LR    @1,@8                                              0086
         LA    @E,TAB1-1(@1)                                      0086
         MVC   NAME(1),0(@E)                                      0086
         BC    15,@9F3                                            0087
*         ELSE ADD(I)=TAB(WORK1);
@9F4     LR    @1,@8                                              0087
         LA    @E,TAB-1(@1)                                       0087
         LR    @C,@7                                              0087
         LA    @A,NAME-1(@C)                                      0087
         MVC   0(1,@A),0(@E)                                      0087
*         END;
*         GO TO LOADENT;           /* LOAD IN CDS ENTRY.         21051*
@9F3     AH    @7,@D1                                             0088
@DO9F7   CH    @7,@D2                                             0088
         BC    12,@DO9F8                                          0088
         BC    15,LOADENT                                         0089
*     /* END OF TRANSLATE ROUTINE*/
* CHEKFILE:
*         PARMFLGS='68'X;               /* SYMBOLIC,CDS,COMPUTE X02008*
CHEKFILE MVI   LOADLIST+12,X'68'                                  0090
*  LOADENT:
*         CDSNAME=NAME;                 /* NAME OF CDS TO LOAD  Y01008*
LOADENT  MVC   LOADLIST(8),NAME                                   0091
*         LOADADDR=ADDR(CDSENTRY);      /* WHERE CDS LOADED     Y01008*
         LA    @F,CDSENTRY                                        0092
         ST    @F,LOADLIST+8                                      0092
*         CDSLNGTH='FF'X;               /* LOAD 255 BYTES       Y01008*
         LA    @F,X'FF'                                           0093
         STH   @F,LOADLIST+14                                     0093
*
*         /* ISSUE CALL TO LOADER TO LOAD CDS FOR THIS DEVICE   Y01008*
*
*         GEN(IFDMOD CALL='12',LIST=LOADLIST);
         IFDMOD CALL='12',LIST=LOADLIST
         DS    0H
*         LOADRTRN=R15;                 /* SAVE LOADER RETURNCD X02906*
         STH   @F,LOADRTRN                                        0095
* CHEKLOAD:
*         IF LOADRTRN>0 THEN            /* CDS NOT LOADED,RC>0  X02906*
CHEKLOAD SR    @F,@F                                              0096
         CH    @F,LOADRTRN                                        0096
         BC    10,@9F2                                            0096
*           DO;
*  RTRN12:
*           CODE=12;                    /*RETURN CODE FOR NO RECORD
*                                         FOUND*/
RTRN12   LA    @4,12                                              0098
*           GOTO RTRN;
         BC    15,RTRN                                            0099
*           END;
*  CONTIN:
*         IF COUNT=<SIZE THEN           /* IS COUNT WITHIN SIZEOX01385*
@9F2     EQU   *                                                  0101
CONTIN   CLC   CDSENTRY+8(1),12(@5)                               0101
         BC    02,@9F1                                            0101
*           DO;                         /* YES, RETURN CODE 0  OX01385*
*           CODE=0;                     /*                     OX01385*
         SR    @4,@4                                              0103
*           COUNTR=COUNT;               /* USE COUNT FOR MOVE  OX01385*
         SR    @6,@6                                              0104
         IC    @6,CDSENTRY+8                                      0104
*           GO TO CONTIN1;              /* MOVE CDS INFO       OX01385*
         BC    15,CONTIN1                                         0105
*           END;                        /*                     OX01385*
*         CODE=8;                       /* COUNT > SIZE REQUESTED01385*
@9F1     LA    @4,8                                               0107
*                                       /* RETURN CODE 8.      OX01385*
*         COUNTR=SIZE;                  /* USE SIZE FOR MOVE   OX01385*
         SR    @6,@6                                              0108
         IC    @6,12(0,@5)                                        0108
* CONTIN1:                              /*                     OX01385*
*         BUFFER(1:COUNTR)=CDSENTRY(1:COUNTR);   /*MOVE ENTRY INTO
*                                                  BUFFER*/
CONTIN1  LA    @E,CDSENTRY                                        0109
         LR    @1,@6                                              0109
         BCTR  @1,0                                               0109
         L     @C,8(0,@5)          
         LR    @A,@C                                              0109
         EX    @1,@MVC                                            0109
*  DELEET:
*         GEN(ANYMOD DELETE=NAME);      /*DELETE ENTRY*/
DELEET   ANYMOD DELETE=NAME
         DS    0H
*  RTRN:
*         RTRNCODE = CODE;              /*PUT RETURN CODE IN REG 15*/
RTRN     LR    @F,@4                                              0111
*  END;
@EL01    L     @D,4(0,@D)                                         0112
         L     @E,12(0,@D)                                        0112
         LM    @0,@C,20(@D)                                       0112
         BCR   15,@E                                              0112
@DATA1   EQU   *
@0       EQU   00                  EQUATES FOR REGISTERS 0-15
@1       EQU   01
@2       EQU   02
@3       EQU   03
@4       EQU   04
@5       EQU   05
@6       EQU   06
@7       EQU   07
@8       EQU   08
@9       EQU   09
@A       EQU   10
@B       EQU   11
@C       EQU   12
@D       EQU   13
@E       EQU   14
@F       EQU   15
@D1      DC    H'1'
@D2      DC    H'8'
@MVC     MVC   0(1,@A),0(@E)
         DS    0F
         DS    0D
@DATA    EQU   *
@SAV001  EQU   @DATA+00000000      72 BYTE(S) ON WORD
R1       EQU   00000001            FULLWORD POINTER REGISTER
P        EQU   00000002            FULLWORD POINTER REGISTER
ADENTRY  EQU   00000003            FULLWORD POINTER REGISTER
CODE     EQU   00000004            FULLWORD INTEGER REGISTER
PARMPTR  EQU   00000005            FULLWORD POINTER REGISTER
LOADRTRN EQU   @DATA+00000072      HALFWORD INTEGER
COUNTR   EQU   00000006            FULLWORD INTEGER REGISTER
I        EQU   00000007            FULLWORD INTEGER REGISTER
WORK1    EQU   00000008            FULLWORD INTEGER REGISTER
WORK2    EQU   00000009            FULLWORD INTEGER REGISTER
R14      EQU   00000014            FULLWORD INTEGER REGISTER
R15      EQU   00000015            FULLWORD INTEGER REGISTER
RTRNCODE EQU   00000015            FULLWORD INTEGER REGISTER
         ORG   @DATA+00000074
MODLEV   EQU   *                   1 BYTE(S)
         DC    X'02'
PARMLIST EQU   00000000            13 BYTE(S) ON WORD
A00000   EQU   PARMLIST+00000000   1 BYTE(S)
MACROLEV EQU   PARMLIST+00000001   1 BYTE(S)
A00001   EQU   PARMLIST+00000002   2 BYTE(S)
CDSADR   EQU   PARMLIST+00000004   FULLWORD POINTER
ADBUF    EQU   PARMLIST+00000008   FULLWORD POINTER
SIZE     EQU   PARMLIST+00000012   1 BYTE(S)
LOADLIST EQU   @DATA+00000076      16 BYTE(S) ON WORD
CDSNAME  EQU   LOADLIST+00000000   8 BYTE(S)
LOADADDR EQU   LOADLIST+00000008   FULLWORD POINTER
PARMFLGS EQU   LOADLIST+00000012   1 BYTE(S)
A00002   EQU   LOADLIST+00000013   1 BYTE(S)
CDSLNGTH EQU   LOADLIST+00000014   HALFWORD INTEGER
BUFFER   EQU   00000000            256 BYTE(S)
CDSENTRY EQU   @DATA+00000092      256 BYTE(S)
A00003   EQU   CDSENTRY+00000000   8 BYTE(S)
COUNT    EQU   CDSENTRY+00000008   1 BYTE(S)
A00004   EQU   CDSENTRY+00000009   247 BYTE(S)
NAME     EQU   @DATA+00000348      8 BYTE(S)
ADD      EQU   NAME+00000000       8*1 BYTE(S)
CDSDATA  EQU   00000000            20 BYTE(S)
UNITAD   EQU   CDSDATA+00000000    4 BYTE(S)
DEVDESC  EQU   CDSDATA+00000004    4 BYTE(S)
A00005   EQU   CDSDATA+00000008    1 BYTE(S)
FLGBYTE  EQU   CDSDATA+00000009    1 BYTE(S)
A00006   EQU   CDSDATA+00000009    4 BIT(S)
NAMEBIT  EQU   CDSDATA+00000009    1 BIT(S)
A00007   EQU   CDSDATA+00000009    1 BIT(S)
REMFILE  EQU   CDSDATA+00000009    1 BIT(S)
A00008   EQU   CDSDATA+00000010    2 BYTE(S)
SYMNAME  EQU   CDSDATA+00000012    8 BYTE(S)
         ORG   @DATA+00000356
TAB      EQU   *                   16*1 BYTE(S)
         DC    X'F0'
         DC    X'F1'
         DC    X'F2'
         DC    X'F3'
         DC    X'F4'
         DC    X'F5'
         DC    X'F6'
         DC    X'F7'
         DC    X'F8'
         DC    X'F9'
         DC    X'C1'
         DC    X'C2'
         DC    X'C3'
         DC    X'C4'
         DC    X'C5'
         DC    X'C6'
TAB1     EQU   *                   16*1 BYTE(S)
         DC    C'G'
         DC    C'H'
         DC    C'I'
         DC    C'J'
         DC    C'K'
         DC    C'L'
         DC    C'M'
         DC    C'N'
         DC    C'O'
         DC    C'P'
         DC    C'Q'
         DC    C'R'
         DC    C'S'
         DC    C'T'
         DC    C'U'
         DC    C'V'
A00011   EQU   00000000            52 BYTE(S) ON WORD
A00012   EQU   A00011+00000000     1 BYTE(S)
EBNAME   EQU   A00011+00000001     7 BYTE(S)
A00013   EQU   A00011+00000008     24 BYTE(S)
DVTABCDS EQU   A00011+00000032     20 BYTE(S)
A00014   EQU   A00011+00000032     9 BYTE(S)
DVCDSFLG EQU   A00011+00000041     1 BYTE(S)
A00015   EQU   A00011+00000041     4 BIT(S)
SYMEXIST EQU   A00011+00000041     1 BIT(S)
A00016   EQU   A00011+00000041     1 BIT(S)
REMCDS   EQU   A00011+00000041     1 BIT(S)
A00017   EQU   A00011+00000042     2 BYTE(S)
DEVSYMNM EQU   A00011+00000044     8 BYTE(S)
A00018   EQU   @DATA+00000348      8 BYTE(S)
PFIRST   EQU   A00018+00000000     1 BYTE(S)
PRIMENM  EQU   A00018+00000001     7 BYTE(S)
         ORG   @DATA
         DS    00000388C
@TEMPS   DS    0F
@TEMP4   DC    F'0'
COMAREA  IFDCOM
SWITCHES EQU   CESWT3+00000000     1 BYTE(S)
A00009   EQU   SWITCHES+00000000   6 BIT(S)
CDSEXIST EQU   SWITCHES+00000000   1 BIT(S)
A00010   EQU   SWITCHES+00000000   1 BIT(S)
OLTEPSW7 EQU   CESWT7+00000000     1 BYTE(S) ON WORD
INCLST   EQU   OLTEPSW7+00000000   1 BIT(S)
RETTO31  EQU   OLTEPSW7+00000000   1 BIT(S)
REMOTE   EQU   OLTEPSW7+00000000   1 BIT(S)
LOADCDS  EQU   OLTEPSW7+00000000   1 BIT(S)
@DATEND  EQU   *
         END
