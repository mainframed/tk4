         TITLE 'IGE0119I - SECOND ERP MODULE FOR THE 2955'
         TITLE 'IGE0119I - SECOND ERP MODULE FOR THE 2955'
*
***********************************************************************
***********************************************************************
*
*        ABBREVIATIONS USED PERTAINING TO IOB
*
*        ATT            ATTENTION
*        BCI            BLOCK COUNT INCREMENT AMOUNT
*        BOC            BUS OUT CHECK
*        BUS            BUSY
*        CAD            COMMAND ADDRESS
*        CC             CONDITION CODE (SIO)
*        CCC            CHANNEL CONTROL CHECK
*        CCH            CCHH UPDATE FLAG
*        CDC            CHANNEL DATA CHECK
*        CED            CHANNEL END
*        CHC            CHAINING CHECK
*        CPD            CHANNEL PROGRAM DESCRIPTION
*        CRT            COMMAND REJECT
*        CSW            CHANNEL STATUS WORD
*        CUE            CONTROL UNIT END
*        DCA            DCB ADDRESS
*        DCK            DATA CHECK
*        DED            DEVICE END
*        DEF            DEVICE END POST FLAG
*        ECA            ECB ADDRESS
*        ECD            ECB CODE
*        ECI            IOB ERROR CORRECTION INDICATOR
*        ECK            EQUIPMENT CHECK
*        ECT            ERROR COUNT
*        EXC            IOB EXCEPTION
*        HIO            HIO ISSUED FLAG
*        ICC            INTERFACE CONTROL CHECK
*        ILH            INCORRECT LENGTH
*        IRD            INTERVENTION REQUIRED
*        LDA            LOST DATA
*        MEX            M EXTENT
*        MF1            MODIFIER FLAG 1
*        MF2            MODIFIER FLAG 2
*        OEF            NO TEST FOR OUT OF EXTENT FLAG
*        OVR            OVERRUN
*        PCI            PROGRAM CONTROLED INTERRUPTION
*        PCK            PROGRAM CHECK
*        PFL            PURGE FLAG
*        PRK            PROTECTION CHECK
*        QSF            IOB QSAM FLAG
*        RCT            RESIDUAL COUNT
*        RHA            READ HOME ADDRESS R0 FLAG
*        RPM            REPOSITION MODIFIER
*        RTA            RESTART ADDRESS
*        SEA            SEEK ADDRESS
*        SFL            SENSE FLAG
*        SIO            START I/O
*        SRS            START RE-START
*        STA            START ADDRESS
*        STM            STATUS MODIFIER
*        TOT            TIME OUT
*        UCK            UNIT CHECK
*        UEX            UNIT EXCEPTION
*        UKN            UNKNOWN BITS
*        UNR            UNRELATED
*        UNS            UNUSED SIO BITS
*        UNT            UNUSED SIO BITS
*        USB            UNUSED SENSE BITS
*
***********************************************************************
         LCLA  &T,&SPN                                            0003
.@001    ANOP                                                     0003
IGE0119I CSECT ,                                                  0003
         BALR  @B,0                                               0003
@PSTART  DS    0H                                                 0003
         USING @PSTART+00000,@B                                   0003
         LR    @C,@1                                              0003
         L     @0,@SIZ001                                         0003
         GETMAIN  R,LV=(0)                                        0003
         XR    @C,@1                                              0003
         XR    @1,@C                                              0003
         XR    @C,@1                                              0003
         USING @DATD+00000,@C                                     0003
         XC    @TEMPS(@L),@TEMPS                                  0003
*         R3=R1;                         /* PARAMETER LIST            *
         LR    @3,@1                                              0042
*         R6=RQEIOB;                     /* GET IOB PTR               *
         L     @6,4(0,@3)                                         0043
*         R9=MHRCCWS;
         MVC   @TEMP4(4),32(@6)                                   0044
         L     @9,@TEMP4                                          0044
*         R7=CAD-8;                      /* CCW PTR                   *
         LH    @7,@D1                                             0045
         MVC   @TEMP3+1(3),9(@6)                                  0045
         A     @7,@TEMP3                                          0045
* SECTION1:
* /*      THIS SECTION IS USED TO TEST FOR INITIAL SELECTION          *
* /*      ERRORS. AN SIO CONDITION CODE OF '01' INDICATES             *
* /*      STATUS STORED. ANY STATUS AND SENSE INFORMATION OTHER       *
* /*      THAN UNIT CHECK (UCK) WITH SENSE INDICATING BUS OUT         *
* /*      CHECK (BOC) OR COMMAND REJECT (CRT) IS TREATED AS A         *
* /*      "SHOULD NOT OCCUR" (SNO) TYPE ERROR CONDITION               *
*                                                                  /* *
*         IF SIO^='10'X THEN             /* DOES SIO CODE!'01'        *
SECTION1 CLI   16(@6),X'10'                                       0046
*           GOTO ERP2001;                /* NO. BRANCH TO NEXT SECTION*
         BC    07,ERP2001                                         0047
*                                                                  /* *
*         IF UCK = '0'B THEN                 /*UNIT CHECK ?           *
         TM    12(@6),B'00000010'                                 0048
*              GO TO ERRORSNO;               /*IF NEG THEN BRANCH     *
         BC    08,ERRORSNO                                        0049
*                                                                  /* *
*         IF BOC = '1'B THEN                 /*BUS OUT CHECK ?        *
         TM    2(@6),B'00100000'                                  0050
*              GO TO ERRORA2X;               /*IF POS THEN BRANCH     *
         BC    01,ERRORA2X                                        0051
*                                                                  /* *
*         IF CRT = '1'B THEN                 /*COMMAND REJECT ?       *
         TM    2(@6),B'10000000'                                  0052
*              GO TO ERRORA3X;               /*IF POS THEN BRANCH     *
         BC    01,ERRORA3X                                        0053
*                                                                  /* *
*         GO TO ERRORSNO;                    /*SHOULD NOT OCCUR       *
         BC    15,ERRORSNO                                        0054
*  ERP2001:
*         IF UCK='0'B THEN
ERP2001  TM    12(@6),B'00000010'                                 0055
*           GOTO SECTION4;
         BC    08,SECTION4                                        0056
* /*      THIS SECTION TESTS FOR DATA CHECK (DCK) IF UNIT CHECK       *
* /*      (UCK) HAS BEEN INDICATED. DEPENDING UPON THE PRESENT        *
* /*      CCW BEING EXECUTED AND THE CHAINED COMMAND IF ANY           *
*                                                                  /* *
* DATCHECK:
*                                                                  /* *
*         IF DCK = '0'B THEN                 /*DATA CHECK ?           *
DATCHECK TM    2(@6),B'00001000'                                  0057
*              GO TO OVERRUN;                /*IF NEGATIVE BRANCH     *
         BC    08,OVERRUN                                         0058
*                                            /*    TO OVER RUN        *
*         IF COCO = '02'X THEN GOTO TESTNEX0; /* READ COMMAND         *
         CLI   0(@7),X'02'                                        0059
         BC    08,TESTNEX0                                        0060
*         IF COCO='01'X THEN
         CLI   0(@7),X'01'                                        0061
         BC    07,@9FF                                            0061
*         DO;
*         IF WR='1'B THEN                /* WRITE EOT,READ RESP       *
         TM    32(@6),B'00001000'                                 0063
*               GOTO ERRORIWC;
         BC    01,ERRORIWC                                        0064
*         GOTO ERRORRFW;
         BC    15,ERRORRFW                                        0065
*         END;
*         GO TO ERRORSNO;                    /*BRANCH TO RECOVERY     *
*                                                                  /* *
*                                                                  /* *
* TESTNEX0:
*                                                                  /* *
*         IF R='1'B THEN                 /* READ SEQUENCE             *
TESTNEX0 TM    32(@6),B'10000000'                                 0068
*               GOTO ERRORIRR;
         BC    01,ERRORIRR                                        0069
*         IF WR='1'B THEN                /* WRITE EOT,READ RESP       *
         TM    32(@6),B'00001000'                                 0070
*           GOTO ERRORIWC;
         BC    01,ERRORIWC                                        0071
*         GOTO ERRORRFW;
         BC    15,ERRORRFW                                        0072
* /*      THIS SECTION TESTS FOR OVER RUN (OVR) IF UNIT CHECK         *
* /*      (UCK) HAS BEEN INDICATED. DEPENDING UPON CURRENT CCW        *
* /*      RECOVERY PROCEDURES ARE DEFINED                             *
*                                                                  /* *
* OVERRUN:
*                                                                  /* *
*         IF OVR = '0'B THEN             /* OVER RUN ?                *
OVERRUN  TM    2(@6),B'00000100'                                  0073
*              GO TO COMANREJ;               /*IF NEGATIVE BRANCH     *
         BC    08,COMANREJ                                        0074
*                                            /*    TO COMMAND REJECT  *
*         IF COCO ='CA'X                 /* INHIBIT COMMAND           *
*               × COCO='02'X THEN        /* READ COMMAND              *
         CLI   0(@7),X'CA'                                        0075
         BC    08,@9FE                                            0075
         CLI   0(@7),X'02'                                        0075
         BC    07,@9FD                                            0075
*               GOTO ERRORIRR;
         BC    08,ERRORIRR                                        0076
*                                                                  /* *
*         GO TO ERRORSNO;                    /*SHOULD NOT OCCUR       *
         BC    15,ERRORSNO                                        0077
* /*      THIS SECTION TESTS FOR COMMAND REJECT (CRT) IF UNIT         *
* /*      CHECK (UCK) HAS BEEN INDICATED. ERROR RECOVERY              *
* /*      PROCEDURES ARE DEFINED                                      *
*                                                                  /* *
* COMANREJ:
*                                                                  /* *
*         IF CRT = '1'B THEN                 /*COMMAND REJECT         *
COMANREJ TM    2(@6),B'10000000'                                  0078
*               GOTO ERRORA2X;
         BC    01,ERRORA2X                                        0079
* /*      THIS SECTION TEST FOR THE CHANNEL STATUS ERRORS PROGRAM     *
* /*      CHECK, PROTECTION CHECK, OR CHAINING CHECK. ERROR           *
* /*      RECOVERY PROCEDURES ARE DEFINED                             *
*                                                                  /* *
*  SECTION4:
*         IF PCK = '1'B                      /*PROGRAM CHECK ?        *
*             × PRK = '1'B                   /*PROTECTION CHECK ?     *
*                × CHC = '1'B THEN           /*CHAINING CHECK ?       *
SECTION4 TM    13(@6),B'00100000'                                 0080
         BC    01,@9FC                                            0080
         TM    13(@6),B'00010000'                                 0080
         BC    01,@9FB                                            0080
         TM    13(@6),B'00000001'                                 0080
         BC    12,@9FA                                            0080
*                    GO TO ERRORA3X;         /*IF POSITIVE BRANCH     *
         BC    03,ERRORA3X                                        0081
*                                            /*    TO RECOVERY        *
* /*      THIS SECTION TESTS FOR THE CHANNEL STATUS ERROR UNIT        *
* /*      EXCEPTION (UEX). DEPENDING UPON THE PRESENT CCW AND         *
* /*      PRESENT COMMAND CHAIN, IF ANY, RECOVERY PROCEDURES ARE      *
* /*      DEFINED                                                     *
*                                                                  /* *
*         IF UEX = '0'B THEN                 /*UNIT EXCEPTION ?       *
@9FA     TM    12(@6),B'00000001'                                 0082
*               GOTO CKPREP;             /* CHECK IF PREPARE COMMAND  *
         BC    08,CKPREP                                          0083
*         IF COCO='02'X THEN             /* READ COMMAND              *
         CLI   0(@7),X'02'                                        0084
*               GOTO CHECKER0;
         BC    08,CHECKER0                                        0085
*         IF COCO='01'X THEN             /* WRITE COMMAND             *
         CLI   0(@7),X'01'                                        0086
*               GOTO ERRORRFW;
         BC    08,ERRORRFW                                        0087
*                                                                  /* *
*         GO TO NOERITOK;                    /*NO ERROR CONDITION  -  *
         BC    15,NOERITOK                                        0088
*                                            /*    RETURN             *
* CHECKER0:
*                                                                  /* *
*         IF R='1'B THEN                 /* READ SEQUENCE             *
CHECKER0 TM    32(@6),B'10000000'                                 0089
*               GOTO ERRORRCP;
         BC    01,ERRORRCP                                        0090
*         IF W='1'B THEN                 /* WRITE SEQUENCE            *
         TM    32(@6),B'01000000'                                 0091
         BC    12,@9F9                                            0091
*           DO;
*           IF WR='1'B THEN              /* WRITE EOT, READ RESP M4502*
         TM    32(@6),B'00001000'                                 0093
*               GOTO NOERITOK;           /* NO ERROR CONDITION   M4502*
         BC    01,NOERITOK                                        0094
*           RTA=STA;
         MVC   25(3,@6),17(@6)                                    0095
*           GOTO RETRY1;
         BC    15,RETRY1                                          0096
*           END;
*         GO TO NOERITOK;                    /*NO ERROR CONDITION  -  *
*                                            /*    RETURN             *
*  CKPREP:
*         IF COCO='06'X THEN             /* PREPARE COMMAND           *
CKPREP   CLI   0(@7),X'06'                                        0099
*               GOTO ERRORRFW;
         BC    08,ERRORRFW                                        0100
* /*      THIS SECTION TESTS FOR INCORRECT LENGTH (ILH) BUT           *
* /*      THIS CONDITION IS NOT TREATED AS AN ERROR CONDITION         *
* INCORLGH:
*         IF ILH = '1'B THEN                 /*INCORRECT LENGTH ?     *
INCORLGH TM    13(@6),B'01000000'                                 0101
*              GO TO NOERITOK;               /*NO ERROR CONDITION  -  *
         BC    01,NOERITOK                                        0102
*                                            /*    RETURN             *
* /*      THIS SECTION TESTS FOR BUSY (BUS), ATTENTION (ATT),         *
* /*      CONTROL UNIT END (CUE), STATUS MODIFIER (STM) AND           *
* /*      BRANCHES TO RECOVERY FOR THREE RETRYS                       *
*                                                                  /* *
*         IF BUS = '1'B THEN                 /*BUSY ?                 *
         TM    12(@6),B'00010000'                                 0103
*              GO TO ERRORA3X;               /*IF POSITIVE BRANCH     *
         BC    01,ERRORA3X                                        0104
*                                            /*    TO RECOVERY        *
*         IF ATT = '1'B THEN                 /*ATTENTION ?            *
         TM    12(@6),B'10000000'                                 0105
*              GO TO ERRORA3X;               /*IF POSITIVE BRANCH     *
         BC    01,ERRORA3X                                        0106
*                                            /*    TO RECOVERY        *
*         IF CUE = '1'B THEN                 /*CONTROL UNIT END ?     *
         TM    12(@6),B'00100000'                                 0107
*              GO TO ERRORA3X;               /*IF POSITIVE BRANCH     *
         BC    01,ERRORA3X                                        0108
*                                            /*    TO RECOVERY        *
*         IF STM = '1'B THEN                 /*STATUS MODIFIER ?      *
         TM    12(@6),B'01000000'                                 0109
*              GO TO ERRORA3X;               /*IF POSITIVE BRANCH     *
         BC    01,ERRORA3X                                        0110
*                                            /*    TO RECOVERY        *
*
*
*         GOTO NOERITOK;                 /*                      M4502*
         BC    15,NOERITOK                                        0111
*
*
*  ERRORA2X:
*         IF FECT ='03'X THEN            /* IS THIS A PERMANENT ERROR *
ERRORA2X CLI   30(@6),X'03'                                       0112
*            GOTO PERR;
         BC    08,PERR                                            0113
*         ELSE GOTO RETRY;               /* RETRY CHAN PROGRAM        *
         BC    15,RETRY                                           0114
*
*
*  ERRORA3X:
*         IF FECT ='04'X THEN            /* IS THIS A PERM ERROR ?    *
ERRORA3X CLI   30(@6),X'04'                                       0115
*            GOTO PERR;                  /* GO SET UP FOR RETURN      *
         BC    08,PERR                                            0116
*         ELSE
*            GOTO RETRY;                 /* RETRY CHAN PROGRAM        *
         BC    15,RETRY                                           0117
*
*
*  ERRORRFW:
*         CCWA(1:8)=CCWRDSKP(1:8);      /* MOVE IN READ SKIP CCW      *
ERRORRFW MVC   0(8,@9),CCWRDSKP                                   0118
*         CCWADAT=DAT1;
         MVC   1(3,@9),45(@6)                                     0119
*         CCWB(1:8)=CCWWREOT(1:8);      /* MOVE IN WRITE EOT          *
         MVC   8(8,@9),CCWWREOT                                   0120
*         CCWBDAT=EOT;
         MVC   9(3,@9),37(@6)                                     0121
*         CCWC(1:8)=CCWRDEOT(1:8);      /* MOVE IN READ EOT           *
         MVC   16(8,@9),CCWRDEOT                                  0122
*         CCWCDAT=DAT1;
         MVC   17(3,@9),45(@6)                                    0123
*         DISP=25;                      /* POINT TO NEXT AVAILABLE SP *
         LA    @4,25                                              0124
*         GOTO MOVECHN;                  /* MOVE IN CHAIN & RETRY     *
         BC    15,MOVECHN                                         0125
*
*
*  ERRORIRR:
*         CCWA(1:8)=CCWWRNEG(1:8);      /* MOVE WRITE NEGATIVE IN WORK*
ERRORIRR MVC   0(8,@9),CCWWRNEG                                   0126
*         CCWADAT=NEG;
         MVC   1(3,@9),41(@6)                                     0127
*         R5=STA;                       /* POINT TO USERS CCW CHAIN   *
         MVC   @TEMP3+1(3),17(@6)                                 0128
         L     @5,@TEMP3                                          0128
*    IRR1:IF OP1 = '02'X THEN DO;       /* SEARCH FOR A READ CCW      *
IRR1     CLI   0(@5),X'02'                                        0129
         BC    07,@9F8                                            0129
*         CCWB(1:8)=CCWCHAIN(1:8);      /* WHEN FOUND MOVE IN WORK AR *
         MVC   8(8,@9),0(@5)                                      0131
*         RTA=R9;
         ST    @9,@TEMP4                                          0132
         MVC   25(3,@6),@TEMP4+1                                  0132
*         GOTO RETRY;                   /* RETRY IT                   *
         BC    15,RETRY                                           0133
*         END;
*           ELSE;
@9F8     EQU   *                                                  0135
*         R5=R5+8;
@9F7     AH    @5,@D2                                             0136
*         GOTO IRR1;                    /* LOOP                       *
         BC    15,IRR1                                            0137
*
*
*  ERRORIWC:
*  ERRORRCP:
*         RTA=STA;                      /* RETRY ENTIRE CHANNEL PROG  *
ERRORIWC EQU   *                                                  0138
ERRORRCP MVC   25(3,@6),17(@6)                                    0138
*         GOTO RETRY;                   /* DO IT                      *
         BC    15,RETRY                                           0139
*
*
*
* ERRORSNO:
*         IF FECT ='04'X THEN            /* IS THIS A PERM ERROR ?    *
ERRORSNO CLI   30(@6),X'04'                                       0140
*            GOTO PERR;                  /* GO SET UP FOR ERR RETURN  *
         BC    08,PERR                                            0141
*         ELSE GOTO RETRY;               /* SET UP FOR CHAN PROG RETRY*
         BC    15,RETRY                                           0142
*
*
*  /*THIS PROCEDURE MOVES CCWS FROM USERS "HAIN TO ERP WORK AREA      *
*
*  MOVECHN:
*         R5=STA;                             /* USERS CCW START ADDR *
MOVECHN  MVC   @TEMP3+1(3),17(@6)                                 0143
         L     @5,@TEMP3                                          0143
*    NEXT:CCWWORK(DISP:DISP+7)=CCWCHAIN(1:8); /* MOVE IN CCW          *
NEXT     LR    @2,@4                                              0144
         LA    @A,0(@2,@9)                                        0144
         BCTR  @A,0                                               0144
         MVC   0(8,@A),0(@5)                                      0144
*         IF CHN1 = '1'B THEN DO;             /* IS IT CHAINED? IF YES*
         TM    4(@5),B'01000000'                                  0145
         BC    12,@9F6                                            0145
*         R5=R5+8;                            /* SET UP TO MOVE IN    *
         AH    @5,@D2                                             0147
*         DISP=DISP+8;                        /* NEXT CCW             *
         AH    @4,@D2                                             0148
*         GOTO NEXT;                          /* GO DO IT             *
         BC    15,NEXT                                            0149
*         END;
*         RTA=R9;
@9F6     ST    @9,@TEMP4                                          0151
         MVC   25(3,@6),@TEMP4+1                                  0151
*         GOTO RETRY;                         /* TRY IT AGAIN         *
         BC    15,RETRY                                           0152
*
*
*  NOERITOK:
*         SENSBYTE='0000'X;
NOERITOK MVC   2(2,@6),@X10                                       0153
*         SWITCHES='00'X;
         MVI   32(@6),X'00'                                       0154
*         SRS='0'B;
         NI    0(@6),B'11111110'                                  0155
*         IOBENT='0'B;
         NI    8(@6),B'10111111'                                  0156
*         FECT='00'X;
         MVI   30(@6),X'00'                                       0157
*         ECI ='0'B;                     /* SET IOBERR TO ZERO        *
         NI    0(@6),B'11011011'                                  0158
*         EXC ='0'B;                     /* SET IOBEX BIT TO ZERO     *
*         CSWFLAGS='0C00'X;              /* SET CSWFLAGS TO NORMAL    *
         MVC   12(2,@6),@X11                                      0160
*         GEN(SVC 15);
         SVC 15
         DS    0H
*         GEN(SVC 3);                    /* RETURN TO IOS             *
         SVC 3
         DS    0H
*
*
*  RETRY:
*         IF FECT='04'X THEN
RETRY    CLI   30(@6),X'04'                                       0163
*           GOTO PERR;
         BC    08,PERR                                            0164
*         FECT=FECT+1;                   /* UPDATE IOB ERROR COUNT    *
         LA    @F,1                                               0165
         SR    @0,@0                                              0165
         IC    @0,30(0,@6)                                        0165
         AR    @F,@0                                              0165
         STC   @F,30(0,@6)                                        0165
*  RETRY1:
*         SWITCHES='00'X;
RETRY1   MVI   32(@6),X'00'                                       0166
*         GEN(SVC 15);
         SVC 15
         DS    0H
*         GEN(SVC 3);                    /* RETURN TO IOS             *
         SVC 3
         DS    0H
*
*
*  PERR:
*         ECI ='0'B;                     /* SET IOBERR BIT TO ZERO    *
PERR     NI    0(@6),B'11011111'                                  0169
*         SWITCHES='00'X;
         MVI   32(@6),X'00'                                       0170
*         GEN(SVC 15);
         SVC 15
         DS    0H
*         GEN(SVC 3);                    /* RETURN TO IOS             *
         SVC 3
         DS    0H
*
*
*         RETURN;
*  END;
@EL01    LR    @1,@C                                              0174
         L     @0,@SIZ001                                         0174
         FREEMAIN R,LV=(0),A=(1)                                  0174
         BCR   15,@E                                              0174
@DATA1   EQU   *
@0       EQU   00                  EQUATES FOR REGISTERS 0-15
@1       EQU   01
@2       EQU   02
@3       EQU   03
@4       EQU   04
@5       EQU   05
@6       EQU   06
@7       EQU   07
@8       EQU   08
@9       EQU   09
@A       EQU   10
@B       EQU   11
@C       EQU   12
@D       EQU   13
@E       EQU   14
@F       EQU   15
@D1      DC    H'-8'
@D2      DC    H'8'
         DS    0F
@SIZ001  DC    AL1(&SPN)
         DC    AL3(@DATEND-@DATD)
         DS    0F
@X10     DC    X'0000'
@X11     DC    X'0C00'
         DS    0D
@DATA    EQU   *
P        EQU   00000000            FULLWORD INTEGER
R0       EQU   00000000            FULLWORD POINTER REGISTER
R1       EQU   00000001            FULLWORD POINTER REGISTER
R2       EQU   00000002            FULLWORD POINTER REGISTER
R3       EQU   00000003            FULLWORD POINTER REGISTER
R4       EQU   00000004            FULLWORD INTEGER REGISTER
R5       EQU   00000005            FULLWORD POINTER REGISTER
R6       EQU   00000006            FULLWORD POINTER REGISTER
R7       EQU   00000007            3  BYTE  POINTER REGISTER
R8       EQU   00000008            FULLWORD POINTER REGISTER
R9       EQU   00000009            3  BYTE  POINTER REGISTER
R10      EQU   00000010            FULLWORD INTEGER REGISTER
R11      EQU   00000011            FULLWORD INTEGER REGISTER
R12      EQU   00000012            FULLWORD INTEGER REGISTER
R13      EQU   00000013            FULLWORD INTEGER REGISTER
R14      EQU   00000014            FULLWORD INTEGER REGISTER
R15      EQU   00000015            FULLWORD INTEGER REGISTER
DISP     EQU   00000004            FULLWORD INTEGER REGISTER
REQUEL   EQU   00000000            16 BYTE(S) ON WORD
RQELNK   EQU   REQUEL+00000000     2 BYTE(S)
RQEUCB   EQU   REQUEL+00000002     HALFWORD POINTER
RQEIOB   EQU   REQUEL+00000004     FULLWORD POINTER
RQEPRI   EQU   REQUEL+00000008     1 BYTE(S)
RQEDEB   EQU   REQUEL+00000009     3  BYTE  POINTER ON WORD+1
PROTKEY  EQU   REQUEL+00000012     1 BYTE(S)
RQETCB   EQU   REQUEL+00000013     3  BYTE  POINTER ON WORD+1
IOB      EQU   00000000            320 BIT(S) ON BYTE
FLAGS1   EQU   IOB+00000000        8 BIT(S)
CPD      EQU   IOB+00000000        2 BIT(S)
ECI      EQU   IOB+00000000        1 BIT(S)
MF1      EQU   IOB+00000000        1 BIT(S)
MF2      EQU   IOB+00000000        1 BIT(S)
EXC      EQU   IOB+00000000        1 BIT(S)
UNR      EQU   IOB+00000000        1 BIT(S)
SRS      EQU   IOB+00000000        1 BIT(S)
FLAGS2   EQU   IOB+00000001        8 BIT(S)
HIO      EQU   IOB+00000001        1 BIT(S)
SFL      EQU   IOB+00000001        1 BIT(S)
PFL      EQU   IOB+00000001        1 BIT(S)
RHA      EQU   IOB+00000001        1 BIT(S)
OEF      EQU   IOB+00000001        1 BIT(S)
CCH      EQU   IOB+00000001        1 BIT(S)
DEF      EQU   IOB+00000001        1 BIT(S)
QSF      EQU   IOB+00000001        1 BIT(S)
SENSBYTE EQU   IOB+00000002        16 BIT(S)
CRT      EQU   IOB+00000002        1 BIT(S)
IRD      EQU   IOB+00000002        1 BIT(S)
BOC      EQU   IOB+00000002        1 BIT(S)
ECK      EQU   IOB+00000002        1 BIT(S)
DCK      EQU   IOB+00000002        1 BIT(S)
OVR      EQU   IOB+00000002        1 BIT(S)
LDA      EQU   IOB+00000002        1 BIT(S)
TOT      EQU   IOB+00000002        1 BIT(S)
USB      EQU   IOB+00000003        8 BIT(S)
ECD      EQU   IOB+00000004        8 BIT(S)
ECA      EQU   IOB+00000005        24 BIT(S)
FLAGS3   EQU   IOB+00000008        8 BIT(S)
A00000   EQU   IOB+00000008        1 BIT(S)
IOBENT   EQU   IOB+00000008        1 BIT(S)
A00001   EQU   IOB+00000008        6 BIT(S)
CSW      EQU   IOB+00000009        56 BIT(S)
CAD      EQU   IOB+00000009        24 BIT(S)
ATT      EQU   IOB+00000012        1 BIT(S)
STM      EQU   IOB+00000012        1 BIT(S)
CUE      EQU   IOB+00000012        1 BIT(S)
BUS      EQU   IOB+00000012        1 BIT(S)
CED      EQU   IOB+00000012        1 BIT(S)
DED      EQU   IOB+00000012        1 BIT(S)
UCK      EQU   IOB+00000012        1 BIT(S)
UEX      EQU   IOB+00000012        1 BIT(S)
PCI      EQU   IOB+00000013        1 BIT(S)
ILH      EQU   IOB+00000013        1 BIT(S)
PCK      EQU   IOB+00000013        1 BIT(S)
PRK      EQU   IOB+00000013        1 BIT(S)
CDC      EQU   IOB+00000013        1 BIT(S)
CCC      EQU   IOB+00000013        1 BIT(S)
ICC      EQU   IOB+00000013        1 BIT(S)
CHC      EQU   IOB+00000013        1 BIT(S)
RCT      EQU   IOB+00000014        16 BIT(S)
SIO      EQU   IOB+00000016        8 BIT(S)
UNS      EQU   IOB+00000016        2 BIT(S)
CC       EQU   IOB+00000016        2 BIT(S)
UNT      EQU   IOB+00000016        4 BIT(S)
STA      EQU   IOB+00000017        24 BIT(S)
UKN      EQU   IOB+00000020        8 BIT(S)
DCA      EQU   IOB+00000021        24 BIT(S)
RPM      EQU   IOB+00000024        8 BIT(S)
RTA      EQU   IOB+00000025        3  BYTE  POINTER
BCI      EQU   IOB+00000028        16 BIT(S)
FECT     EQU   IOB+00000030        1 BYTE(S)
SECT     EQU   IOB+00000031        1 BYTE(S)
MHRCCWS  EQU   IOB+00000032        4  BYTE  POINTER
SWITCHES EQU   IOB+00000032        1 BYTE(S)
R        EQU   IOB+00000032        1 BIT(S)
W        EQU   IOB+00000032        1 BIT(S)
E        EQU   IOB+00000032        1 BIT(S)
FTRS     EQU   IOB+00000032        1 BIT(S)
WR       EQU   IOB+00000032        1 BIT(S)
A00002   EQU   IOB+00000033        3  BYTE  POINTER
EOT      EQU   IOB+00000036        4  BYTE  POINTER
NEG      EQU   IOB+00000040        4  BYTE  POINTER
DAT1     EQU   IOB+00000044        4  BYTE  POINTER
CSWFLAGS EQU   00000012            2 BYTE(S)
CCW      EQU   00000000            64 BIT(S) ON BYTE
COCO     EQU   CCW+00000000        8 BIT(S)
DAD      EQU   CCW+00000001        24 BIT(S)
FLAG12   EQU   CCW+00000004        8 BIT(S)
A00003   EQU   CCW+00000004        3 BIT(S)
SKIP     EQU   CCW+00000004        1 BIT(S)
FLOBS    EQU   CCW+00000004        4 BIT(S)
BLA      EQU   CCW+00000005        8 BIT(S)
COU      EQU   CCW+00000006        16 BIT(S)
CCWCHAIN EQU   00000000            8 BYTE(S)
CCW1     EQU   CCWCHAIN+00000000   8 BYTE(S)
OP1      EQU   CCWCHAIN+00000000   1 BYTE(S)
BUFADR1  EQU   CCWCHAIN+00000001   3  BYTE  POINTER
FLAGS0   EQU   CCWCHAIN+00000004   8 BIT(S)
A00004   EQU   CCWCHAIN+00000004   1 BIT(S)
CHN1     EQU   CCWCHAIN+00000004   1 BIT(S)
A00005   EQU   CCWCHAIN+00000004   6 BIT(S)
A00006   EQU   CCWCHAIN+00000005   1 BYTE(S)
CNT1     EQU   CCWCHAIN+00000006   2 BYTE(S)
CCWWORK  EQU   00000000            40 BYTE(S) ON DWORD
CCWA     EQU   CCWWORK+00000000    8 BYTE(S)
A00007   EQU   CCWWORK+00000000    1 BYTE(S)
CCWADAT  EQU   CCWWORK+00000001    3  BYTE  POINTER
A00008   EQU   CCWWORK+00000004    4 BYTE(S)
CCWB     EQU   CCWWORK+00000008    8 BYTE(S)
A00009   EQU   CCWWORK+00000008    1 BYTE(S)
CCWBDAT  EQU   CCWWORK+00000009    3  BYTE  POINTER
A00010   EQU   CCWWORK+00000012    4 BYTE(S)
CCWC     EQU   CCWWORK+00000016    8 BYTE(S)
A00011   EQU   CCWWORK+00000016    1 BYTE(S)
CCWCDAT  EQU   CCWWORK+00000017    3  BYTE  POINTER
A00012   EQU   CCWWORK+00000020    4 BYTE(S)
CCWD     EQU   CCWWORK+00000024    8 BYTE(S)
CCWF     EQU   CCWWORK+00000032    8 BYTE(S)
WRITEBUF EQU   00000000            120 BYTE(S)
DADBUF   EQU   00000000            1 BYTE(S)
         DS    00000000C
@L       EQU   3
@DATD    DSECT
         DS    00000000C
@TEMPS   DS    0F
@TEMP3   DC    F'0'
@TEMP4   DC    F'0'
IGE0119I CSECT                                                   XM4924
*
ERPATCH  DC    20XL2'0700'
***********************************************************************
*        READ SKIP AND READ REPEAT
CCWRDSKP CCW   2,*,X'30',80             READ SKIP                 M4502
CCWWRNEG CCW   1,*,X'60',5             WRTIE N                    M4502
*        FTR'S SEQUENCE
CCWWREOT CCW   1,*,X'60',5              WRITE EOT                 M4502
CCWRDEOT CCW   2,*,X'60',5              READ                      M4502
*        ENABLE
CCWENABL CCW   X'27',0,X'60',1          ENABLE                    M4502
***********************************************************************
*
*
***********************************************************************
***********************************************************************
*
@DATD DSECT                                                      XM4924
@DATD    DSECT
@DATEND  EQU   *
IGE0119I CSECT ,
@9FF     EQU   ERRORSNO
@9FE     EQU   ERRORIRR
@9FD     EQU   ERRORSNO
@9FC     EQU   ERRORA3X
@9FB     EQU   ERRORA3X
@9F9     EQU   NOERITOK
         END
