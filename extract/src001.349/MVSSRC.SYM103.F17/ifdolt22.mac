         TITLE 'IFDOLT22 ALLOCATE MODULE'
         TITLE 'IFDOLT22 ALLOCATE MODULE'
         PRINT OFF
         MACRO
&NAME   ALOCAT &CDSADR=0,&TYPE=,&SCRATCH=,&MF=,&MAP=NO,&LSTNAME=
.*
         GBLB  &EXECUTV,&E536454
         LCLA  &A,&B,&COUNT
         LCLB  &SWITCH,&B1,&B2,&B3
         LCLC  &F,&Z,&CHAR
.*
         AIF   ('&MAP' EQ 'YES').MAP1
         AIF   (T'&MF EQ 'O').STD
         AIF   ('&MF' EQ 'L' OR '&MF' EQ 'S').STD
         AIF   ('&MF'(1,3) NE '(E,').MFERROR
&CHAR    SETC  '&NAME'
         AIF   ('&MF'(4,3) EQ '(1)').RG1
         AIF   ('&MF'(4,1) EQ '(').RG2
&CHAR    LA    R1,&MF(2) .         ADDRESS OF PARAMETER LIST
&CHAR    SETC  ' '
         AGO   .RG1
.RG2     ANOP
&COUNT   SETA  K'&MF(2)-2
&F       SETC  '&MF(2)'(2,&COUNT)
         AIF   ('&F'(1,1) EQ 'R').C724
&CHAR    LR    R1,R&F .            ADDRESS OF PARAMETER LIST
&CHAR    SETC  ' '
         AGO   .RG1
.C724    ANOP
&CHAR    LR    R1,&F .             ADDRESS OF PARAMETER LIST
&CHAR    SETC  ' '
.RG1     ANOP
&CHAR    BAL   R14,#EXIT .        BRANCH TO LINKAGE SUBROUTINE
         MEXIT
.MFERROR MNOTE 8,'MF VALUE (&MF) INCORRECT, NO STATEMENTS GENERATED.'
         MEXIT
.STD     ANOP
&B1      SETB  (N'&TYPE GT 0)
&B2      SETB  (T'&SCRATCH NE 'O')
         AIF   (&B1+&B2 EQ 2).ERR
         AIF   (&B1).ALO
         AIF   (&B2).ALO2
         AGO   .ALO3
.ALO     ANOP
         AIF   (N'&TYPE NE 3).ERR1
&A       SETA  1
.TST1    ANOP
         AIF   (K'&TYPE(2) EQ 0).ERR2
.TST2    ANOP
         AIF   (K'&TYPE(3) EQ 0).ERR3
         AIF   (&B3).EXIT
         AIF   ('&TYPE(1)' NE 'CYL').ALO1
&B       SETA  200
         AGO   .ALO3
.ALO1    ANOP
         AIF   (K'&TYPE(1) EQ 0 OR '&TYPE(1)' EQ 'TRK').ALO1A
         MNOTE 8,'TYPE= PARAMETER INCORRECTLY SPECIFIED.'
&B3      SETB  1
.ALO1A   ANOP
&B       SETA  136
         AGO   .ALO3
.ALO2    ANOP
&A       SETA  2
.ALO3    ANOP
         AIF   ('&MF' EQ 'L').LIST
&NAME    LA    R14,R&SYSNDX .     RETURN ADDRESS
         CNOP  0,4
         BAL   R1,#EXIT .          BRANCH TO LINKAGE SUBROUTINE
&CHAR    SETC  '&LSTNAME'
         AGO   .STD1
.LIST    ANOP
&CHAR    SETC  '&NAME'
.STD1    ANOP
         AIF   (&EXECUTV).OLTSEP
&CHAR    DC    B'00000000' .       CONTROL PROGRAM FLAGS
         AGO   .OLTSEP1
.OLTSEP  ANOP
&CHAR    DC    B'00000001' .       CONTROL PROGRAM FLAGS
.OLTSEP1 ANOP
         DC    AL1(2) .            MACRO LEVEL
         DC    CL2'22' .           MACRO ID
         DC    A(&CDSADR) .        ADDRESS OF CDS INFO
         AIF   (&B1).ALO4
         DC    A(0) .              ADDRESS OF EXTENTS
         AGO   .ALO5
.ALO4    ANOP
         DC    A(&TYPE(3)) .       ADDRESS OF EXTENTS
.ALO5    ANOP
         AIF   (&B1).ALO6
         DC    AL3(0)              AMOUNT OF SPACE REQUIRED
         AGO   .ALO7
.ALO6    ANOP
         DC    AL3(&TYPE(2)) .     AMOUNT OF SPACE REQUIRED
.ALO7    ANOP
         DC    AL1(&B) .           TYPE
*
*                                  TYPE FLAGS DEFINITION:
*                                  200  CYL
*                                  136  TRK
*
         DC    AL1(&A) .           FUNCTION FLAGS
*
*                                  FUNCTION FLAGS DEFINITION:
*                                  0  DEMOUNTABLE ALLOCATION
*                                  1  ALLOCATE
*                                  2  SCRATCH
         AIF   ('&MF' EQ 'L').EXIT
R&SYSNDX DS    0H .                RETURN ON HALFWORD BOUNDARY
         AGO   .EXIT
.ERR     MNOTE 8,'TYPE= AND SCRATCH= MAY NOT BE USED TOGETHER.'
&B3      SETB  1
         AGO   .ALO
.ERR1    MNOTE 8,'TYPE= PARAMETER INCORRECTLY SPECIFIED.'
&B3      SETB  1
         AGO   .TST1
.ERR2    MNOTE 8,'AMOUNT MUST BE SPECIFIED WHEN USING TYPE=.'
&B3      SETB  1
         AGO   .TST2
.ERR3    MNOTE 8,'EXTENT ADDRESS MUST BE SPECIFIED WHEN USING TYPE=.'
         MEXIT
.MAP1    ANOP
ALOMAP   DSECT
&Z       SETC  '$'
         AIF   (&E536454).ZIPPER
         DC    XL1'0' .            CONTROL PROGRAM FLAGS
         DC    XL1'0' .            MACROL LEVEL
         DC    XL2'0' .            MACROL ID
         AGO   .ZIPPED
.ZIPPER  ANOP
&Z.ALTORMG DC  XL1'0' .            CONTROL PROGRAM FLAGS
&Z.ALOLEVL DC  XL1'0' .            MACRO LEVEL
&Z.ALOIDNT DC  XL2'0' .            MACRO ID
.ZIPPED  ANOP
&Z.ALOCDSA DC  A(0) .              ADDRESS OF CDS INFO
&Z.ALOCADR DC  A(0) .              ADDRESS OF EXTENTS
&Z.ALOAMT  DC  XL3'0' .            AMOUNT OF SPACE REQUIRED
&Z.ALOFLGT DC  XL1'0' .            TYPE
&Z.ALOFLAG DC  XL1'0' .            FUNCTION FLAGS
.EXIT    MEND
         EJECT
         PRINT ON
         LCLA  &T,&SPN                                            0003
.@001    ANOP                                                     0003
IFDOLT22 CSECT ,                                                  0003
         BC    15,24(0,@F)
         DC    C'IFDOLT22 29 MAR 74'                             0003
         ST    @E,12(0,@D)                                        0003
         STM   @0,@C,20(@D)                                       0003
         BALR  @B,0                                               0003
@PSTART  DS    0H                                                 0003
         USING @PSTART+00000,@B                                   0003
         ST    @D,@SAV001+4                                       0003
         LA    @F,@SAV001                                         0003
         ST    @F,8(0,@D)                                         0003
         LR    @D,@F                                              0003
DIAG     EQU   59
THREETWO EQU   32
         USING ALOMAP,5
         USING CHASCT,2
         DS    0H
*         R5=R1;                    /* SAVE REG. 1 IN REG. 5.         *
         LR    @5,@1                                              0073
*         R9=ADDR(IFDMSG22);        /* POINTER TO MESSAGE MODULE 21050*
         L     @C,@V1              ADDRESS OF IFDMSG22            0074
         LR    @9,@C                                              0074
*         R7=UNICTR;                /* GET NUMBER OF DEVICES UNDER TST*
         SR    @7,@7                                              0075
         IC    @7,UNICTR                                          0075
*         R3=DEVTBPTR;              /* INITIALIZE DEVTAB POINTER      *
         L     @3,DEVTBPTR                                        0076
*         ALOCATSW='00'X;           /* CLEAR IFDOLT22'S FLAGS AND     *
         MVI   ALOCATSW,X'00'                                     0077
*                                   /* DECODE PARAMETERS.             *
*         IF RETAINAC='1'B THEN          /* IS REI ACTIVE?      S20203*
         TM    A00019,B'10000000'                                 0078
         BC    12,@9FF                                            0078
*         DPMSGREI='1'B;                /* REM SITE GETS MSG    XM0097*
         OI    A00022,B'00000001'                                 0079
* ALOCAT05:
*         IF STAEXIT='1'B THEN      /* IS STAE EXIT IN CONTROL.       *
@9FF     EQU   *                                                  0080
ALOCAT05 TM    OLTEPSW6,B'00000001'                               0080
         BC    12,@9FE                                            0080
*           DO;                     /* YES,                           *
*           IF NDR='1'B THEN        /* ARE THERE DEVICES ENTERED.     *
         TM    OLTEPSW2,B'00000100'                               0082
*             GO TO ALOCAT50;       /* NO, RETURN TO STAE EXIT ROUTINE*
         BC    01,ALOCAT50                                        0083
*           IF ALLOCATE='0'B THEN   /* WAS THIS DEVICE ALLOCATED.     *
         TM    12(@3),B'00001000'                                 0084
         BC    05,@9FD                                            0084
*             DO;                   /* NO,                            *
*             R7=R7-1;              /* DECREMENT NUMBER OF DEVICES.   *
         BCTR  @7,0                                               0086
*             R3=R3+56;             /* POINT TO NEXT DEVICE      21050*
         AH    @3,@D1                                             0087
*                                   /* IN TABLE.                 21050*
*             IF R7=0 THEN          /* ARE ALL DEVICES CHECKED.       *
         LTR   @7,@7                                              0088
*               GO TO ALOCAT50;     /* YES, RETURN TO STAE EXIT.      *
         BC    08,ALOCAT50                                        0089
*             GO TO ALOCAT05;       /* CHECK NEXT DEVICE.             *
         BC    15,ALOCAT05                                        0090
*             END;
*             UNUNIT1(5:14)=DDNAME(ALCINDEX); /* PUT DDNAME     YM7637*
@9FD     SR    @C,@C                                              0092
         IC    @C,54(0,@3)                                        0092
         MH    @C,@D2                                             0092
         LA    @E,DDNAME-10(@C)                                   0092
         MVC   UNTUNIT+4(10),0(@E)                                0092
*                                        /* IN DYN UNALLOC PLISTYM7637*
*           GO TO ALOCAT10;         /* DEVICE WAS ALLOCATED.          *
         BC    15,ALOCAT10                                        0093
*           END;
*         IF ALOLEVL^='02'X×        /* IS THIS MACRO LEVEL SUPPORTED. *
*           NDR='1'B THEN           /* NO, RETURN CODE 04. ARE DEVICES*
@9FE     CLI   ALOLEVL,X'02'                                      0095
         BC    07,@9FC                                            0095
         TM    OLTEPSW2,B'00000100'                               0095
         BC    12,@9FB                                            0095
*             GO TO ALOCAT52;       /* ENTERED. NO, RETURN CODE 04.   *
         BC    03,ALOCAT52                                        0096
*         IF ALOCDSA=0 THEN         /* FIND THE DEVICE ADDRESS THAT   *
@9FB     SR    @F,@F                                              0097
         C     @F,ALOCDSA                                         0097
         BC    07,@9FA                                            0097
*           DO;                     /* WANTS ALLOCATION.              *
*           R3=PRIDVPTR;            /* PRIMARY ALLOCATION, GET POINTER*
         L     @3,PRIDVPTR                                        0099
*           GO TO ALOCAT10;         /* FROM COMMON AREA.              *
         BC    15,ALOCAT10                                        0100
*           END;
*         DO I=R7 TO 1 BY -1;       /* SECONDARY ALLOCATION, FIND21050*
@9FA     LR    @4,@7                                              0102
         LTR   @4,@4                                              0102
         BC    12,@DO9F8                                          0102
*         IF CDSDEVAD=DEVAD THEN    /* ENTRY IN DEVTABLE THAT MATCHES *
@DO9F9   L     @C,ALOCDSA                                         0103
         CLC   0(4,@C),32(@3)                                     0103
         BC    07,@9F5                                            0103
*           DO;                     /* DEVICE REQUESTING THE          *
*           IF GRABBED='1'B×        /* ALLOCATION. IS IT THE     21050*
*              PRIMARY='1'B THEN    /* RIGHT MATCH. YES,         21050*
         TM    12(@3),B'00000100'                                 0105
         BC    01,@9F4                                            0105
         TM    12(@3),B'01000000'                                 0105
         BC    12,@9F3                                            0105
*                GO TO ALOCAT10;    /* CONTINUE. NO, FIND RIGHT  21050*
         BC    03,ALOCAT10                                        0106
*           END;                    /* DEVICE.                   21050*
@9F3     EQU   *                                                  0107
*         R3=R3+56;                 /* CHECK NEXT DEVICE IN      21050*
@9F5     AH    @3,@D1                                             0108
*                                   /* DEVICE TABLE.             21050*
*         END;
*         GO TO ALOCAT52;           /* RETURN CODE 04.                *
         BCT   @4,@DO9F9                                          0109
         BC    15,ALOCAT52                                        0110
* ALOCAT10:
*         /************************************************************
*         /*             ROUTINE TO CHECK DEVICE STATUS               *
*         /************************************************************
*         R8=UCBPTR;                /* GET POINTER TO UCB.       21050*
ALOCAT10 L     @8,8(0,@3)                                         0111
*         ROPTMIN2='22';            /* SET UP TO PASS SVC SECURITY.   *
         MVC   ROPTMIN2(2),@C5                                    0112
*         UCBADDRS=UCBADDR;         /* PUT DEVICE REQUESTING          *
         MVC   SVCPLIST(4),8(@3)                                  0113
*                                   /* ALLOCATION UCB ADDRESS IN FIRST*
*                                   /* WORD OF SVC PARAMETER LIST.    *
*         R0=ADDR(ROPT);            /* INITIALIZE POINTER TO SVCPLIST.*
         LA    @0,ROPT                                            0114
*         R1='003C'X;               /* PUT PROPER CALL CODE IN  YM7282*
         L     @1,@X6                                             0115
*                                   /* REG. 1 FOR SVC CALL.           *
*         GEN(SVC   DIAG);          /* ISSUE SVC FOR DEVICE STATUS.   *
         SVC   DIAG
         DS    0H
*         IF STAEXIT='1'B THEN      /* IS STAE EXIT IN CONTROL.       *
         TM    OLTEPSW6,B'00000001'                               0117
*           GO TO ALOCAT42;         /* YES, PERFORM SCRATCH.          *
         BC    01,ALOCAT42                                        0118
*         IF STATUS='1'B&           /* CHECK TO MAKE SURE DEVICE 21050*
*           DEVSTAT='1'B THEN       /* STATUS HAS NOT CHANGED,   21050*
         TM    3(@8),B'10000000'                                  0119
         BC    12,@9F2                                            0119
         TM    12(@3),B'10000000'                                 0119
*             GO TO ALOCAT20;       /* SINCE TEST RUN DEFINITION 21050*
         BC    03,ALOCAT20                                        0120
*         IF STATUS='0'B&           /* TIME.                     21050*
*           DEVSTAT='0'B THEN       /*                           21050*
@9F1     EQU   *                                                  0121
@9F2     TM    3(@8),B'10000000'                                  0121
         BC    05,@9F0                                            0121
         TM    12(@3),B'10000000'                                 0121
*             GO TO ALOCAT20;       /*                           21050*
         BC    10,ALOCAT20                                        0122
*         /************************************************************
*         /*     PWTO MESSAGE INDICATING DEVICE STATUS CHANGED.       *
*         /************************************************************
*         R1=MSGPTR56;              /* GET POINTER TO MESSAGE IFD156I.*
@9EF     EQU   *                                                  0123
@9F0     L     @1,8(0,@9)                                         0123
*         MSG56I(16:23)=EBCDICAD;   /* PUT EBCDIC DEVICE ADDR IN 21050*
         MVC   19(8,@1),0(@3)                                     0124
*                                   /* MESSAGE.                       *
*         GEN(PWTO  REG=(1));       /* PRINT MESSAGE.                 *
         PWTO  REG=(1)
         DS    0H
*         BYPTST='1'B;              /* SET FLAG TO BYPASS TESTS.      *
         OI    OLTEPSW3,B'00100000'                               0126
*         SAVE4=SCHEDSA;            /* GET SET TO RETURN TO SCHEDULER.*
         MVC   4(4,@D),SCHEDSA                                    0127
*         GO TO ALOCAT60;           /* RETURN TO SCHEDULER.           *
         BC    15,ALOCAT60                                        0128
* ALOCAT20:
*         /************************************************************
*         /*            DETERMINE WHAT IS REQUESTED BY USER           *
*         /************************************************************
*         IF CLASS^='20'X THEN      /* IS DEVICE DASD. NO, RETURN21050*
ALOCAT20 CLI   18(@8),X'20'                                       0129
*           GO TO ALOCAT52;         /* CODE 04.                  21050*
         BC    07,ALOCAT52                                        0130
*         IF TYPE>'05'X&            /* LEGAL DEVICE              01906*
*           TYPE<'10'X THEN         /*                           21050*
         CLI   19(@8),X'05'                                       0131
         BC    12,@9EE                                            0131
         CLI   19(@8),X'10'                                       0131
*             GO TO ALOCAT22;       /*                           21050*
         BC    05,ALOCAT22                                        0132
*         GO TO ALOCAT52;           /*                           21050*
         BC    15,ALOCAT52                                        0133
* ALOCAT22:
*         IF ALCINDEX='00'X THEN    /* HAS THIS BEEN ALLOCATED  YM7282*
ALOCAT22 CLI   54(@3),X'00'                                       0134
*           GO TO ALOCAT34;         /* PREVIOUSLY. NO, CONTINUE YM7282*
         BC    08,ALOCAT34                                        0135
*                                   /* YES, PLACE DDNAME IN SVC YM7282*
*                                   /* 99 PLIST FOR UNALLOC     YM7282*
*         UNUNIT1(5:14)=DDNAME(ALCINDEX); /*                    YM7282*
         SR    @C,@C                                              0136
         IC    @C,54(0,@3)                                        0136
         MH    @C,@D2                                             0136
         LA    @E,DDNAME-10(@C)                                   0136
         MVC   UNTUNIT+4(10),0(@E)                                0136
* ALOCAT34:                         /*                          YM7282*
*         IF ALOFLAG='02'X THEN     /* IS A SCRATCH REQUESTED.        *
ALOCAT34 CLI   ALOFLAG,X'02'                                      0137
*           GO TO ALOCAT40;         /* YES, GO TO SCRATCH ROUTINE.    *
         BC    08,ALOCAT40                                        0138
*         IF ALOFLAG='01'X THEN     /* IS ALLOCATION FOR NON-DEMOUNT- *
         CLI   ALOFLAG,X'01'                                      0139
*           GO TO ALOCAT30;         /* ABLES. YES, GO TO ROUTINE FOR  *
         BC    08,ALOCAT30                                        0140
*                                   /* NON-DEMOUNTABLE ALLOCATION.    *
*         IF ALOFLAG^='00'X THEN    /* IS REQUEST FOR FULL EXTENTS    *
         CLI   ALOFLAG,X'00'                                      0141
*           GO TO ALOCAT52;         /* DEMOUNTABLE ALLOCATION. NO,    *
         BC    07,ALOCAT52                                        0142
*                                   /* RETURN CODE 04.                *
*         /************************************************************
*         /*                                                          *
*         /*                 DEMOUNTABLE ALLOCATION                   *
*         /*                                                          *
*         /************************************************************
* ALOCAT21:
*         IF FPMODE='0'B THEN       /* IS FILE PROTECT MODE PRESENT.  *
ALOCAT21 TM    12(@3),B'00000010'                                 0143
*           GO TO ALOCAT50;         /* RETURN CODE 00 TO INDICATE ALL *
         BC    08,ALOCAT50                                        0144
*                                   /* OF VOLUME AVAILABLE AND NOT    *
*                                   /* FILE PROTECTED.                *
*         IF DEVSTAT='1'B THEN      /* IS VOLUME ON-LINE. YES, RETURN *
         TM    12(@3),B'10000000'                                 0145
*           GO TO ALOCAT58;         /* CODE 10 TO INDICATE SPACE NOT  *
         BC    01,ALOCAT58                                        0146
*                                   /* ALLOCATED AND VOLUME FILE      *
*                                   /* PROTECTED.                     *
* ALOCAT25:
*         IF FEATURES(3)='1'B THEN  /* IS DEVICE BEING SHARED.   21050*
ALOCAT25 TM    17(@8),B'00100000'                                 0147
         BC    12,@9EC                                            0147
*                                   /* YES,                      21050*
*           DO;                     /* FIND OUT IF IT IS OFF-LINE IN  *
*           RESPAREA=RESPAREA&&RESPAREA; /* OTHER SYSTEMS. CLEAR 21050*
         XC    RESPAREA(7),RESPAREA                               0149
*                                        /* THE ECB AND REPBUF.  21050*
*           R1=MSGPTR45;            /* GET POINTER TO MESSAGE IFD145D.*
         L     @1,4(0,@9)                                         0150
*           WTORPRF2=WTORLIST;      /* PUT NECESSARY INFORMATION IN   *
         MVC   0(8,@1),WTORLIST                                   0151
*                                   /* WTOR EXPANSION.                *
*           MSG45D(12:19)=EBCDICAD; /* PUT EBCDIC DEVICE ADDR IN 21050*
         MVC   23(8,@1),0(@3)                                     0152
*                                   /* MESSAGE.                       *
*           GEN(PWTOR REG=(1),WAIT=YES);
         PWTOR REG=(1),WAIT=YES
         DS    0H
*           IF REPBUF(1)='N' THEN   /* WAS DEV OFFLINE EVERYWHERE21050*
         CLI   RESPAREA+4,C'N'                                    0154
*             GO TO ALOCAT58;       /* NO, RETURN CODE 10.            *
         BC    08,ALOCAT58                                        0155
*           IF REPBUF(1)^='Y' THEN  /* WAS REPLY YES. NO, REPEAT21050*/
         CLI   RESPAREA+4,C'Y'                                    0156
*             GO TO ALOCAT25;       /* THE MESSAGE. YES, CONTINUE.    *
         BC    07,ALOCAT25                                        0157
*           END;
*         /************************************************************
*         /*         CAN DATA ON THIS DEVICE BE DESTROYED.            *
*         /************************************************************
* ALOCAT28:
*         RESPAREA=RESPAREA&&RESPAREA; /* CLEAR ECB AND REPBUF.  21050*
@9EC     EQU   *                                                  0159
ALOCAT28 XC    RESPAREA(7),RESPAREA                               0159
*         R1=MSGPTR20;              /* GET POINTER TO MESSAGE IFD120D.*
         L     @1,0(0,@9)                                         0160
*         WTORPRF1=WTORLIST;        /* PUT NECESSARY INFORMATION IN   *
         MVC   0(8,@1),WTORLIST                                   0161
*                                   /* WTOR EXPANSION.                *
*         MSG20D(25:32)=EBCDICAD;   /* PUT EBCDIC DEVICE ADDR IN 21050*
         MVC   36(8,@1),0(@3)                                     0162
*                                   /* MESSAGE.                       *
*         GEN(PWTOR REG=(1),WAIT=YES);
         PWTOR REG=(1),WAIT=YES
         DS    0H
*         IF REPBUF(1)='N' THEN     /* CAN DATA BE DESTROYED. NO,21050*
         CLI   RESPAREA+4,C'N'                                    0164
*           GO TO ALOCAT58;         /* RETURN CODE 10.                *
         BC    08,ALOCAT58                                        0165
*         IF REPBUF(1)^='Y' THEN    /* WAS REPLY YES. NO,REPEAT  21050*
         CLI   RESPAREA+4,C'Y'                                    0166
*           GO TO ALOCAT28;         /* MESSAGE. YES, CONTINUE.        *
         BC    07,ALOCAT28                                        0167
*         FPMODE='0'B;              /* TURN OFF FILE-PROTECT FLAG IN  *
         NI    12(@3),B'11111101'                                 0168
*                                   /* DEVTABLE ENTRY.                *
*         CDSFPM='0'B;              /* TURN OFF FPM FLAG IN CDS. 21050*
         NI    41(@3),B'01111111'                                 0169
*         IF PRIMARY='1'B THEN      /* IS ALLOCATION FOR PRIMARY      *
         TM    12(@3),B'01000000'                                 0170
         BC    12,@9EB                                            0170
*           DO;                     /* DEVICE. YES, TURN FILE PROTECT *
*           FILEPROT='0'B;          /* FLAGS OFF IN THE SCT.          *
         NI    SCT+10,B'10111111'                                 0172
*           FPMODCDS='0'B;
         NI    SCT+11,B'01111111'                                 0173
*           END;
*                                   /* FLAG OFF IN THE SCT.           *
*         GO TO ALOCAT50;           /* RETURN CODE 00 INDICATING ALL  *
         BC    15,ALOCAT50                                        0175
*                                   /* OF VOLUME AVAILABLE AND NOT    *
*                                   /* FILE PROTECTED.                *
* ALOCAT30:
*         /************************************************************
*         /*                                                          *
*         /*               NON-DEMOUNTABLE ALLOCATION                 *
*         /*                                                          *
*         /************************************************************
*         IF TYPE='08'X  ×          /* CAN ALLOCATE ON 2314 DEV X03008*
*            TYPE='09'X  ×          /* ON A 3330 DEVICE         X30008*
*            TYPE='0A'X  ×          /* ON A WINCHESTER DEV    XL030130*
*            TYPE='0D'X             /* ON AN ICEBERG DEVICE     X03008*
*             THEN                  /* NO, CANNOT ALLOCATE      X03008*
ALOCAT30 CLI   19(@8),X'08'                                       0176
         BC    08,@9EA                                            0176
         CLI   19(@8),X'09'                                       0176
         BC    08,@9E9                                            0176
         CLI   19(@8),X'0A'                                       0176
         BC    08,@9E8                                            0176
         CLI   19(@8),X'0D'                                       0176
         BC    07,@9E7                                            0176
*              GO TO ALOCAT52;      /* ON THIS DEVICE TYPE.     X03008*
         BC    08,ALOCAT52                                        0177
* ALOCAT32:
*         IF DEVSTAT='0'B THEN      /* IS DEVICE OFFLINE        YM7282*
@9E7     EQU   *                                                  0178
ALOCAT32 TM    12(@3),B'10000000'                                 0178
*           GO TO ALOCAT58;         /* YES, SPACE NOT ALLOCATED YM7282*
         BC    08,ALOCAT58                                        0179
*         IF FPMODE='0'B THEN       /* IS DEVICE FILE PROTECTED. NO,  *
         TM    12(@3),B'00000010'                                 0180
         BC    05,@9E6                                            0180
*           DO;                     /* HAS IT ALREADY BEEN ALLOCATED. *
*           IF ALLOCATE='0'B THEN   /* NO, RETURN CODE 00. YES, SET   *
         TM    12(@3),B'00001000'                                 0182
*             GO TO ALOCAT50;       /* BIT IN ALLOCATE FLAGS TO SAY   *
         BC    08,ALOCAT50                                        0183
*           REALOCAT='1'B;          /* RE-ALLOCATION IS NECESSARY.    *
         OI    ALOCATSW,B'10000000'                               0184
*           END;
*         /************************************************************
*         /*               BUILD DYN ALLOC TEXT UNITS           YM7282*
*         /************************************************************
*         IF ALOAMT=ZERO THEN       /* IS AMOUNT OF SPACE REQUIRED 0. *
@9E6     CLC   ALOAMT(3),FULL                                     0186
*           GO TO ALOCAT52;         /* YES, RETURN CODE 04. NO, BUILD *
         BC    08,ALOCAT52                                        0187
*                                   /* SVC 99 PARMLIST.         YM7282*
*         ALCU6PRM=ALOAMT;          /* PUT AMOUNT OF SPACE      YM7282*
         MVC   ALCTUNIT+81(3),ALOAMT                              0188
*                                   /* REQUESTED IN SVC 99 PLISTYM7282*
*         ALCU8PRM=EBCDICAD(6:8);   /* PLACE EBCDIC DEVICE ADDR YM7282*
         MVC   ALCTUNIT+97(3),5(@3)                               0189
*                                   /* IN SVC 99 PLIST          YM7282*
*         ALCU8PRM(3)=ALCU8PRM(3)&'F8'X; /* MAKE SURE EBCDIC    YM7282*
         NI    ALCTUNIT+99,X'F8'                                  0190
*                                   /* ADDR IS BASE ADDR        YM7282*
*         ALCTYPE(2)='07'X;         /* ASSUME TRK ALLOCATION    YM7282*
         MVI   ALCTUNIT+72,X'07'                                  0191
*         IF ALOFLGT^='88'X THEN    /* IS IT TRK REQUEST        YM7282*
         CLI   ALOFLGT,X'88'                                      0192
         BC    08,@9E5                                            0192
*           ALCTYPE(2)='08'X;       /* NO, INDICATE CYL ALLOC   YM7282*
         MVI   ALCTUNIT+72,X'08'                                  0193
*         ALCU9LNG(2)='08'X;        /* INSURE RETURN OF DDNAME  YM7282*
@9E5     MVI   ALCTUNIT+105,X'08'                                 0194
*         ALCU9PRM=ALCU9PRM&&ALCU9PRM; /* FROM SVC 99.          YM7282*
         XC    ALCTUNIT+106(8),ALCTUNIT+106                       0195
*         ALCU1PRM(8)='1';          /* DSNAME FOR THIS ALLOCATE YM7282*
         MVI   ALCTUNIT+13,C'1'                                   0196
*         IF REALOCAT='1'B&         /* IF THIS IS A REQUEST FOR RE-   *
*           DSNAMEFF='1'B THEN      /* ALLOCATION AND EXISTING DSNAME *
         TM    ALOCATSW,B'10000000'                               0197
         BC    12,@9E4                                            0197
         TM    13(@3),B'10000000'                                 0197
         BC    12,@9E3                                            0197
*             ALCU1PRM(8)='2';      /* WAS OSOLTEP1, USE DSN=   YM7282*
         MVI   ALCTUNIT+13,C'2'                                   0198
*                                   /* TO OSOLTEP2.                   *
* ALOCAT35:
*         /************************************************************
*         /*         ISSUE SVC 99 FOR DYNAMIC ALLOCATION        YM7282*
*         /************************************************************
*         S99RBPTR=ADDR(S99RBALC);  /* SET UP S99RBPTR          YM7282*
@9E3     EQU   *                                                  0199
@9E4     EQU   *                                                  0199
ALOCAT35 LA    @F,S99RBALC                                        0199
         ST    @F,S99RB                                           0199
*         S99RB(1)='80'X;           /* INSURE HIGH ORDER BIT    YM7282*
         MVI   S99RB,X'80'                                        0200
*                                   /* OF S99RBPTR IS ON.       YM7282*
*         R1=ADDR(S99RB);           /* INITIALIZE R1 TO POINT TOYM7282*
         LA    @1,S99RB                                           0201
*                                   /* RB PTR WORD.             YM7282*
*         GEN(SVC   99);            /* ATTEMPT ALLOCATION       YM7282*
         SVC   99
         DS    0H
*         IF RC^=0 THEN             /* WAS ALLOC SUCCESSFUL     YM7282*
         LTR   @F,@F                                              0203
*           GO TO ALOCAT58;         /* NO, RETURN CODE 10, SPACEYM7282*
         BC    07,ALOCAT58                                        0204
*                                   /* REQUESTED NOT AVAILABLE  YM7282*
*         IF ALCINDEX^='00'X THEN   /* IS THERE AN ENTRY IN     YM7282*
         CLI   54(@3),X'00'                                       0205
         BC    08,@9E2                                            0205
*                                   /* INDEX FLD OF DEVTAB      YM7282*
*           DO;                     /* YES, USE IT AS INDEX     YM7282*
*           R6=ALCINDEX;            /* PREPARE TO USE INDEX     YM7282*
         SR    @6,@6                                              0207
         IC    @6,54(0,@3)                                        0207
*           GO TO ALOCAT36;         /* SAVE NEW DDNAME          YM7282*
         BC    15,ALOCAT36                                        0208
*           END;                    /*                          YM7282*
*         DO R6=1 TO 16 BY +1;      /* FIND AVAILABLE SLOT IN   YM7282*
@9E2     LA    @6,1                                               0210
*         IF DDNAME(R6,2)='00'X THEN /* DDNAME SAVE AREA        YM7282*
@DO9E1   LR    @C,@6                                              0211
         MH    @C,@D2                                             0211
         LA    @A,DDNAME-9(@C)                                    0211
         CLI   0(@A),X'00'                                        0211
*           GO TO ALOCAT36;         /* SLOT FOUND, USE IT       YM7282*
         BC    08,ALOCAT36                                        0212
*         END;                      /* TRY AGAIN                YM7282*
*         GO TO ALOCAT58;           /* EXIT NO SLOT AVAILABLE   YM7282*
         AH    @6,@D3                                             0213
@DO9E0   CH    @6,@D4                                             0213
         BC    12,@DO9E1                                          0213
         BC    15,ALOCAT58                                        0214
* ALOCAT36:                         /*                          YM7282*
*         DDNAME(R6)=ALCUNIT9(5:14);/* SAVE DDNAME              YM7282*
ALOCAT36 LR    @C,@6                                              0215
         MH    @C,@D2                                             0215
         LA    @A,DDNAME-10(@C)                                   0215
         MVC   0(10,@A),ALCTUNIT+104                              0215
*         ALCINDEX=R6;              /* SAVE INDEX               YM7282*
         STC   @6,54(0,@3)                                        0216
*         /************************************************************
*         /*         READ DATA SET CONTROL BLOCK INTO CORE            *
*         /************************************************************
*         GEN(OBTAIN ALOCDSCB);     /* ISSUE OBTAIN MACRO.            *
         OBTAIN ALOCDSCB
         DS    0H
*         IF RC^=0 THEN             /* WAS OBTAIN SUCCESSFUL. NO,     *
         LTR   @F,@F                                              0218
*           GO TO ALOCAT58;         /* RETURN CODE 10.                *
         BC    07,ALOCAT58                                        0219
*         R4=ALOCADR;               /* PREPARE TO PUT EXTENTS IN U.T..*
         L     @4,ALOCADR                                         0220
*         BBSTRT=BBSTRT&&BBSTRT;    /* ZERO BIN ADDRESS, BOTH START   *
         XC    0(2,@4),0(@4)                                      0221
*         BBEND=BBSTRT;             /* AND END ADDRESS.               *
         MVC   8(2,@4),0(@4)                                      0222
*         CCHHSTRT=LOWLIMIT;        /* PUT START ADDRESS OF ALLOCATED *
         MVC   2(4,@4),WORKAREA+63                                0223
*                                   /* EXTENTS IN UNIT TEST AREA.     *
*         CCHHEND=UPLIMIT;          /* PUT END ADDRESS OF ALLOCATED   *
         MVC   10(4,@4),WORKAREA+67                               0224
*                                   /* EXTENTS IN UNIT TEST AREA.     *
*         STARTAD=STRTAD;           /* PUT START ADDRESS IN DEVTAB.   *
         MVC   16(6,@3),0(@4)                                     0225
*         ENDAD=CCHHEND;            /* PUT END ADDRESS IN DEVTAB.     *
         MVC   22(4,@3),10(@4)                                    0226
*         IF ALOFLGT='88'X THEN     /* WAS REQUEST FOR TRKS. YES, PUT *
         CLI   ALOFLGT,X'88'                                      0227
         BC    07,@9DD                                            0227
*           NOTRKS=ALOAMT(2:3);     /* AMOUNT IN DEVTAB. NO, REQUEST  *
         MVC   26(2,@3),ALOAMT+1                                  0228
         BC    15,@9DC                                            0229
*         ELSE                      /* WAS FOR CYLS. CALCULATE NUMBER *
*           DO;                     /* OF TRKS PER CYLINDER AND PUT   *
*           IF TYPE='02'X THEN      /* THAT IN DEVTAB.                *
@9DD     CLI   19(@8),X'02'                                       0230
         BC    07,@9DB                                            0230
*             DO;                   /*  2301 -- 1 CYL OF 200 TRKS.    *
*             NOTRKS='00C8'X;       /*  2303 -- 80 CYL OF 10 TRKS EACH*
         MVC   26(2,@3),@X22                                      0232
*             GO TO ALOCAT37;
         BC    15,ALOCAT37                                        0233
*             END;
*           R4=ALOAMT(3)*10;        /* TAKE NUMBER OF CYL AND MULTIPLY*
@9DB     LA    @F,10                                              0235
         SR    @0,@0                                              0235
         IC    @0,ALOAMT+2                                        0235
         MR    @E,@0                                              0235
         LR    @4,@F                                              0235
*           NUMTRKS=R4;             /* BY TEN TO FIND NUMBER OF TRKS. *
         STH   @4,26(0,@3)                                        0236
*           END;                    /* PUT AMOUNT IN DEVTAB.          *
* ALOCAT37:
*         IF REALOCAT='1'B THEN     /* IF THIS WAS REALLOCATION,      *
@9DC     EQU   *                                                  0238
ALOCAT37 TM    ALOCATSW,B'10000000'                               0238
*           GO TO ALOCAT40;         /* SCRATCH OTHER DSNAME.          *
         BC    01,ALOCAT40                                        0239
* ALOCAT38:
*         DSNAMEFF='1'B;            /* FIRST ALLOCATE, TURN ON DSNAME *
ALOCAT38 OI    13(@3),B'10000000'                                 0240
*                                   /* ALLOCATE BIT IN DEVTAB.        *
*         FPMODE='0'B;              /* TURN OFF FILE PROTECT BITS.    *
         NI    12(@3),B'11111101'                                 0241
*         CDSFPM='0'B;              /*                           21050*
         NI    41(@3),B'01111111'                                 0242
*         IF PRIMARY='1'B THEN
         TM    12(@3),B'01000000'                                 0243
         BC    12,@9DA                                            0243
*           DO;
*           FILEPROT='0'B;
         NI    SCT+10,B'10111111'                                 0245
*           FPMODCDS='0'B;
         NI    SCT+11,B'01111111'                                 0246
*           END;
*         ALLOCATE='1'B;            /* TURN ALLOCATE BIT ON IN DEVTAB.*
@9DA     OI    12(@3),B'00001000'                                 0248
*         GO TO ALOCAT56;           /* RETURN CODE 0C.                *
         BC    15,ALOCAT56                                        0249
* ALOCAT40:
*         /************************************************************
*         /*                                                          *
*         /*                        SCRATCH                           *
*         /*                                                          *
*         /************************************************************
*         IF TYPE='08'X  ×          /* CAN ALLOCATE ON 2314 DEV X03008*
*            TYPE='09'X  ×          /* ON A 3330 DEVICE         X30008*
*            TYPE='0A'X  ×          /* ON A WINCHESTER DEV    XL030130*
*            TYPE='0D'X             /* ON AN ICEBERG DEVICE     X03008*
*             THEN                  /* NO, CANNOT ALLOCATE      X03008*
ALOCAT40 CLI   19(@8),X'08'                                       0250
         BC    08,@9D9                                            0250
         CLI   19(@8),X'09'                                       0250
         BC    08,@9D8                                            0250
         CLI   19(@8),X'0A'                                       0250
         BC    08,@9D7                                            0250
         CLI   19(@8),X'0D'                                       0250
         BC    07,@9D6                                            0250
*              GO TO ALOCAT51;      /* ON THIS DEVICE TYPE.     X03008*
         BC    08,ALOCAT51                                        0251
* ALOCAT42:
*         IF ALLOCATE='0'B THEN     /* HAS DRUM BEEN ALLOCATED. NO,   *
@9D6     EQU   *                                                  0252
ALOCAT42 TM    12(@3),B'00001000'                                 0252
*  GO TO ALOCAT50;                 /* SET RETURN CODE = '00'          *
         BC    08,ALOCAT50                                        0253
* ALOCAT45:
*         /************************************************************
*         /*             ATTEMPT DYNAMIC UNALLOCATION           YM7282*
*         /************************************************************
*         DO R6=3 TO 1 BY -1;       /* PERFORM SCRATCH.               *
ALOCAT45 LA    @6,3                                               0254
*         S99RBPTR=ADDR(S99RBUNA);  /* SET UP S99RBPTR          YM7282*
@DO9D5   LA    @F,S99RBUNA                                        0255
         ST    @F,S99RB                                           0255
*         S99RB(1)='80'X;           /* INSURE HIGH ORDER BIT    YM7282*
         MVI   S99RB,X'80'                                        0256
*                                   /* OF S99RBPTR IS ON.       YM7282*
*         R1=ADDR(S99RB);           /* INITIALIZE R1 TO POINT TOYM7282*
         LA    @1,S99RB                                           0257
*                                   /* RB PTR WORD.             YM7282*
*         GEN(SVC   99);            /* ATTEMPT UNALLOCATION     YM7282*
         SVC   99
         DS    0H
*         IF RC=0 THEN              /* WAS SCRATCH SUCCESSFUL. NO,    *
         LTR   @F,@F                                              0259
*           GO TO ALOCAT47;         /* REPEAT IT AT LEAST TWICE. IF   *
         BC    08,ALOCAT47                                        0260
*         END;                      /* IT CANNOT BE SCRATCHED, PRINT  *
*                                   /* ERROR MESSAGE.            21050*
*         R1=MSGPTR62;              /* GET POINTER TO MESSAGE IFD162I.*
         BCT   @6,@DO9D5                                          0261
         L     @1,12(0,@9)                                        0262
*         MSG62I(14:21)=EBCDICAD;   /* PUT DEVICE ADDR IN MESSAGE21050*
         MVC   17(8,@1),0(@3)                                     0263
*         MSG62I(31:37)=ALCU1PRM(1:7); /* DSN COMMON PART TO MSGYM7282*
         MVC   34(7,@1),ALCTUNIT+6                                0264
*         MSG62I(38)='1';           /* ASSUME OSOLTEP1          YM7282*
         MVI   41(@1),C'1'                                        0265
*         IF DSNAMEFF='0'B THEN     /* IS IT OSOLTEP1           YM7282*
         TM    13(@3),B'10000000'                                 0266
         BC    05,@9D1                                            0266
*           MSG62I(38)='2';         /* NO, SET UP OSOLTEP2      YM7282*
         MVI   41(@1),C'2'                                        0267
*         DPMSGREI='0'B;                /* TURN OFF REM MSG FLG XM0097*
@9D1     NI    A00022,B'11111110'                                 0268
*         GEN(PWTO  REG=(1));       /* PRINT MESSAGE.                 *
         PWTO  REG=(1)
         DS    0H
*         IF REALOCAT='1'B THEN     /* WAS THIS RE-ALLOCATION. YES,   *
         TM    ALOCATSW,B'10000000'                               0270
         BC    12,@9D0                                            0270
*           DO;
*           MARK='1'B;              /* SET MARK ON WALL.              *
         OI    ALOCATSW,B'00100000'                               0272
*           IF DUPLICTE='1'B THEN   /* IS THIS A DUP REQUEST.         *
         TM    ALOCATSW,B'01000000'                               0273
*             GO TO ALOCAT49;       /* YES, PREPARE TO EXIT.          *
         BC    01,ALOCAT49                                        0274
*           GO TO ALOCAT48;         /* CHANGE STATUS OF DSNAME   21050*
         BC    15,ALOCAT48                                        0275
*                                   /* FLIP-FLOP AND RETURN CODE 21050*
*                                   /* 0C.                       21050*
*           END;
*         IF STAEXIT='1'B THEN      /* IS STAE EXIT IN CONTROL.       *
@9D0     TM    OLTEPSW6,B'00000001'                               0277
*           GO TO ALOCAT05;         /* YES, CHECK NEXT DEVICE.        *
         BC    01,ALOCAT05                                        0278
*         GO TO ALOCAT54;           /* RETURN CODE 08.                *
         BC    15,ALOCAT54                                        0279
* ALOCAT47:
*         IF DUPLICTE='1'B THEN     /* WAS SCRATCH DONE BECAUSE OF    *
ALOCAT47 TM    ALOCATSW,B'01000000'                               0280
*           GO TO ALOCAT35;         /* DUPLICATE DSNAME. YES, GO BACK *
         BC    01,ALOCAT35                                        0281
*                                   /* AND TRY NEW ALLOCATE.          *
*         IF REALOCAT='1'B THEN     /* WAS THIS SCRATCH CAUSED BY     *
         TM    ALOCATSW,B'10000000'                               0282
         BC    12,@9CF                                            0282
*           DO;                     /* REQUEST FOR REALLOCATION. YES, *
* ALOCAT48:
*           FLAG2=FLAG2&&'80'X;     /* CHANGE STATUS OF DSNAME FLIP-  *
ALOCAT48 XI    13(@3),X'80'                                       0284
*           GO TO ALOCAT56;         /* FLOP AND RETURN CODE 0C.       *
         BC    15,ALOCAT56                                        0285
*           END;
* ALOCAT49:
*         ALLOCATE='0'B;            /* TURN ALLOCATE BIT OFF IN DEVTAB*
@9CF     EQU   *                                                  0287
ALOCAT49 NI    12(@3),B'11110111'                                 0287
*         EXTENTS=FULL;             /* MOVE FULL EXTENTS TO DEVTAB.   *
         MVC   16(12,@3),FULL                                     0288
*         FPMODE='1'B;              /* TURN FILE PROTECT BIT ON IN    *
         OI    12(@3),B'00000010'                                 0289
*                                   /* DEVTAB ENTRY.                  *
*         CDSFPM='1'B;              /* TURN FPM FLAG ON IN CDS   21050*
         OI    41(@3),B'10000000'                                 0290
*                                   /* FLAG BYTE.                21050*
*         DDNAME(ALCINDEX)=DDNAME(ALCINDEX)&&DDNAME(ALCINDEX);/*YM7282*
         SR    @C,@C                                              0291
         IC    @C,54(0,@3)                                        0291
         MH    @C,@D2                                             0291
         LA    @E,DDNAME-10(@C)                                   0291
         LA    @A,DDNAME-10(@C)                                   0291
         XC    0(10,@A),0(@E)                                     0291
*         ALCINDEX='00'X;           /* CLEAR INDEX IN DEVTAB    YM7282*
         MVI   54(@3),X'00'                                       0292
*         IF PRIMARY='1'B THEN      /* IF THIS IS PRIMARY DEVICE, TURN*
         TM    12(@3),B'01000000'                                 0293
         BC    12,@9CE                                            0293
*           DO;                     /* FILE PROTECT BITS ON IN SCT.   *
*           FILEPROT='1'B;
         OI    SCT+10,B'01000000'                                 0295
*           FPMODCDS='1'B;
         OI    SCT+11,B'10000000'                                 0296
*           END;
*         IF MARK='1'B THEN         /* IS MARK ON WALL.               *
@9CE     TM    ALOCATSW,B'00100000'                               0298
*           GO TO ALOCAT54;         /* YES, RETURN 08.                *
         BC    01,ALOCAT54                                        0299
*         IF STAEXIT='1'B THEN      /* IS STAE EXIT IN CONTROL.       *
         TM    OLTEPSW6,B'00000001'                               0300
*           GO TO ALOCAT05;         /* YES, CHECK NEXT DEVICE.        *
         BC    01,ALOCAT05                                        0301
* ALOCAT50:
*         /************************************************************
*         /*                      RETURN CODES                        *
*         /************************************************************
*         R15=0;                    /* SET RETURN CODE REGISTER TO 00 *
ALOCAT50 SR    @F,@F                                              0302
*                                   /* INDICATING ALL OF VOLUME       *
*                                   /* AVAILABLE AND NOT FILE PROT,   *
*                                   /* OR SCRATCH WAS SUCCESSFUL.     *
*         GO TO ALOCAT60;           /* RETURN.                        *
         BC    15,ALOCAT60                                        0303
* ALOCAT51:
*         IF FPMODE='0'B THEN       /* WAS ALLOCATE DONE         01906*
ALOCAT51 TM    12(@3),B'00000010'                                 0304
*           GO TO ALOCAT50;         /* YES                       01906*
         BC    08,ALOCAT50                                        0305
* ALOCAT52:
*         R15=4;                    /* SET RETURN CODE REGISTER TO 04 *
ALOCAT52 LA    @F,4                                               0306
*                                   /* INDICATING FACILITY NOT        *
*                                   /* AVAILABLE.                     *
*         GO TO ALOCAT60;           /* RETURN.                        *
         BC    15,ALOCAT60                                        0307
* ALOCAT54:
*         R15=8;                    /* SET RETURN CODE REGISTER TO 08 *
ALOCAT54 LA    @F,8                                               0308
*                                   /* INDICATING SPACE NOT ALLOCATED *
*                                   /* AND VOLUME FILE PROTECTED, OR  *
*                                   /* SCRATCH NOT SUCCESSFUL.        *
*         GO TO ALOCAT60;           /* RETURN.                        *
         BC    15,ALOCAT60                                        0309
* ALOCAT56:
*         R15=12;                   /* SET RETURN CODE REGISTER TO 0C *
ALOCAT56 LA    @F,12                                              0310
*                                   /* INDICATING REQUESTED SPACE     *
*                                   /* ALLOCATED,EXTENTS AT ADDRESS   *
*                                   /* PROVIDED,VOLUME NOT FILE       *
*                                   /* PROTECTED.                     *
*         GO TO ALOCAT60;           /* RETURN.                        *
         BC    15,ALOCAT60                                        0311
* ALOCAT58:
*         R15=16;                   /* SET RETURN CODE REGISTER TO 10 *
ALOCAT58 LA    @F,16                                              0312
*                                   /* INDICATING AMOUNT OF SPACE     *
*                                   /* REQUESTED NOT AVAILABLE.       *
* ALOCAT60:
*         DPMSGREI='0'B;                /* TURN OFF REM MSG FLG XM0097*
ALOCAT60 NI    A00022,B'11111110'                                 0313
*         RETURN;                   /* RETURN TO CALLER.              *
*         END;
@EL01    L     @D,4(0,@D)                                         0315
         L     @E,12(0,@D)                                        0315
         LM    @0,@C,20(@D)                                       0315
         BCR   15,@E                                              0315
@DATA1   EQU   *
@0       EQU   00                  EQUATES FOR REGISTERS 0-15
@1       EQU   01
@2       EQU   02
@3       EQU   03
@4       EQU   04
@5       EQU   05
@6       EQU   06
@7       EQU   07
@8       EQU   08
@9       EQU   09
@A       EQU   10
@B       EQU   11
@C       EQU   12
@D       EQU   13
@E       EQU   14
@F       EQU   15
@D1      DC    H'56'
@D2      DC    H'10'
@D3      DC    H'1'
@D4      DC    H'16'
@V1      DC    V(IFDMSG22)
         DS    0F
@X6      DC    X'0000003C'
@C5      DC    C'22'
@X22     DC    X'00C8'
         DS    0D
@DATA    EQU   *
@SAV001  EQU   @DATA+00000000      72 BYTE(S) ON WORD
R0       EQU   00000000            FULLWORD POINTER REGISTER
R1       EQU   00000001            FULLWORD POINTER REGISTER
R2       EQU   00000002            FULLWORD POINTER REGISTER
R3       EQU   00000003            FULLWORD POINTER REGISTER
I        EQU   00000004            3  BYTE  POINTER REGISTER
R4       EQU   00000004            FULLWORD POINTER REGISTER
RETCODE  EQU   00000004            FULLWORD POINTER REGISTER
R5       EQU   00000005            FULLWORD POINTER REGISTER
R6       EQU   00000006            FULLWORD POINTER REGISTER
R7       EQU   00000007            FULLWORD POINTER REGISTER
R8       EQU   00000008            FULLWORD POINTER REGISTER
R9       EQU   00000009            FULLWORD POINTER REGISTER
R13      EQU   00000013            FULLWORD POINTER REGISTER
R14      EQU   00000014            FULLWORD POINTER REGISTER
R15      EQU   00000015            FULLWORD POINTER REGISTER
RC       EQU   00000015            FULLWORD POINTER REGISTER
S99RBALC EQU   @DATA+00000072      20 BYTE(S) ON WORD
         ORG   S99RBALC+00000000
ALCRBLN  EQU   *                   1 BYTE(S)
         DC    X'14'
ALCVERB  EQU   *                   1 BYTE(S)
         DC    X'01'
ALCFLAG1 EQU   *                   2 BYTE(S)
         DC    X'0000'
ALCERROR EQU   *                   2 BYTE(S)
         DC    X'0000'
ALCINFO  EQU   *                   2 BYTE(S)
         DC    X'0000'
ALCTXTPP EQU   *                   FULLWORD POINTER
         DC    AL4(ALCTUPL)
A00003   EQU   *                   4 BYTE(S)
         DC    X'00000000'
ALCFLAG2 EQU   *                   4 BYTE(S)
         DC    X'00000000'
ALCTUPL  EQU   @DATA+00000092      40 BYTE(S) ON WORD
ALCTXTP1 EQU   *                   FULLWORD POINTER
         DC    AL4(ALCUNIT1)
ALCTXTP2 EQU   *                   FULLWORD POINTER
         DC    AL4(ALCUNIT2)
ALCTXTP3 EQU   *                   FULLWORD POINTER
         DC    AL4(ALCUNIT3)
ALCTXTP4 EQU   *                   FULLWORD POINTER
         DC    AL4(ALCUNIT4)
ALCTXTP5 EQU   *                   FULLWORD POINTER
         DC    AL4(ALCUNIT5)
ALCTXTP6 EQU   *                   FULLWORD POINTER
         DC    AL4(ALCUNIT6)
ALCTXTP7 EQU   *                   FULLWORD POINTER
         DC    AL4(ALCUNIT7)
ALCTXTP8 EQU   *                   FULLWORD POINTER
         DC    AL4(ALCUNIT8)
ALCTXTP9 EQU   *                   FULLWORD POINTER
         DC    AL4(ALCUNIT9)
ALCTXTPA EQU   ALCTUPL+00000036    4 BYTE(S)
A00004   EQU   *                   1 BYTE(S)
         DC    X'80'
A00005   EQU   *                   3  BYTE  POINTER
         DC    AL3(ALCUNITA)
ALCTUNIT EQU   @DATA+00000132      126 BYTE(S) ON WORD
ALCUNIT1 EQU   ALCTUNIT+00000000   50 BYTE(S)
DALDSNAM EQU   *                   2 BYTE(S)
         DC    X'0002'
ALCU1NUM EQU   *                   2 BYTE(S)
         DC    X'0001'
ALCU1LNG EQU   *                   2 BYTE(S)
         DC    X'002C'
ALCU1PRM EQU   ALCTUNIT+00000006   44 BYTE(S)
A00006   EQU   *                   7 BYTE(S)
         DC    C'OSOLTEP'
A00007   EQU   *                   37*1 BYTE(S)
         DC    00037X'40'
ALCUNIT2 EQU   ALCTUNIT+00000050   7 BYTE(S)
DALSTATS EQU   *                   2 BYTE(S)
         DC    X'0004'
ALCU2NUM EQU   *                   2 BYTE(S)
         DC    X'0001'
ALCU2LNG EQU   *                   2 BYTE(S)
         DC    X'0001'
ALCU2PRM EQU   *                   1 BYTE(S)
         DC    X'04'
ALCUNIT3 EQU   ALCTUNIT+00000057   7 BYTE(S)
DALNDISP EQU   *                   2 BYTE(S)
         DC    X'0005'
ALCU3NUM EQU   *                   2 BYTE(S)
         DC    X'0001'
ALCU3LNG EQU   *                   2 BYTE(S)
         DC    X'0001'
ALCU3PRM EQU   *                   1 BYTE(S)
         DC    X'04'
ALCUNIT4 EQU   ALCTUNIT+00000064   7 BYTE(S)
DALCDISP EQU   *                   2 BYTE(S)
         DC    X'0006'
ALCU4NUM EQU   *                   2 BYTE(S)
         DC    X'0001'
ALCU4LNG EQU   *                   2 BYTE(S)
         DC    X'0001'
ALCU4PRM EQU   *                   1 BYTE(S)
         DC    X'04'
ALCUNIT5 EQU   ALCTUNIT+00000071   4 BYTE(S)
ALCTYPE  EQU   *                   2 BYTE(S)
         DC    X'0000'
ALCU5NUM EQU   *                   2 BYTE(S)
         DC    X'0000'
ALCUNIT6 EQU   ALCTUNIT+00000075   9 BYTE(S)
DALPRIME EQU   *                   2 BYTE(S)
         DC    X'000A'
ALCU6NUM EQU   *                   2 BYTE(S)
         DC    X'0001'
ALCU6LNG EQU   *                   2 BYTE(S)
         DC    X'0003'
ALCU6PRM EQU   *                   3 BYTE(S)
         DC    X'000000'
ALCUNIT7 EQU   ALCTUNIT+00000084   7 BYTE(S)
DALSPFRM EQU   *                   2 BYTE(S)
         DC    X'000E'
ALCU7NUM EQU   *                   2 BYTE(S)
         DC    X'0001'
ALCU7LNG EQU   *                   2 BYTE(S)
         DC    X'0001'
ALCU7PRM EQU   *                   1 BYTE(S)
         DC    X'08'
ALCUNIT8 EQU   ALCTUNIT+00000091   9 BYTE(S)
DALUNIT  EQU   *                   2 BYTE(S)
         DC    X'0015'
ALCU8NUM EQU   *                   2 BYTE(S)
         DC    X'0001'
ALCU8LNG EQU   *                   2 BYTE(S)
         DC    X'0003'
ALCU8PRM EQU   *                   3 BYTE(S)
         DC    X'000000'
ALCUNIT9 EQU   ALCTUNIT+00000100   14 BYTE(S)
DALRTDDN EQU   *                   2 BYTE(S)
         DC    X'0055'
ALCU9NUM EQU   *                   2 BYTE(S)
         DC    X'0001'
ALCU9LNG EQU   *                   2 BYTE(S)
         DC    X'0008'
ALCU9PRM EQU   *                   8 BYTE(S)
         DC    X'0000000000000000'
ALCUNITA EQU   ALCTUNIT+00000114   12 BYTE(S)
DALRTVOL EQU   *                   2 BYTE(S)
         DC    X'005D'
ALCUANUM EQU   *                   2 BYTE(S)
         DC    X'0001'
ALCUALNG EQU   *                   2 BYTE(S)
         DC    X'0006'
ALCUAPRM EQU   *                   6 BYTE(S)
         DC    X'000000000000'
S99RBUNA EQU   @DATA+00000260      20 BYTE(S) ON WORD
         ORG   S99RBUNA+00000000
UNRBLN   EQU   *                   1 BYTE(S)
         DC    X'14'
UNVERB   EQU   *                   1 BYTE(S)
         DC    X'02'
UNFLAG1  EQU   *                   2 BYTE(S)
         DC    X'0000'
UNERROR  EQU   *                   2 BYTE(S)
         DC    X'0000'
UNINFO   EQU   *                   2 BYTE(S)
         DC    X'0000'
UNTXTPP  EQU   *                   FULLWORD POINTER
         DC    AL4(UNTUPL)
A00008   EQU   *                   4 BYTE(S)
         DC    X'00000000'
UNFLAG2  EQU   *                   4 BYTE(S)
         DC    X'00000000'
UNTUPL   EQU   @DATA+00000280      4 BYTE(S) ON WORD
UNTXTP1  EQU   UNTUPL+00000000     4 BYTE(S)
A00009   EQU   *                   1 BYTE(S)
         DC    X'80'
A00010   EQU   *                   3  BYTE  POINTER
         DC    AL3(UNUNIT1)
UNTUNIT  EQU   @DATA+00000284      14 BYTE(S) ON WORD
UNUNIT1  EQU   UNTUNIT+00000000    14 BYTE(S)
DUNDDNAM EQU   *                   2 BYTE(S)
         DC    X'0001'
UNU1NUM  EQU   *                   2 BYTE(S)
         DC    X'0001'
UNU1LNG  EQU   *                   2 BYTE(S)
         DC    X'0000'
UNU1PRM  EQU   *                   8 BYTE(S)
         DC    X'0000000000000000'
S99RB    EQU   @DATA+00000300      4 BYTE(S) ON WORD
S99RBPTR EQU   S99RB+00000000      FULLWORD POINTER
ALOCATSW EQU   @DATA+00000304      1 BYTE(S)
REALOCAT EQU   ALOCATSW+00000000   1 BIT(S)
DUPLICTE EQU   ALOCATSW+00000000   1 BIT(S)
MARK     EQU   ALOCATSW+00000000   1 BIT(S)
RESPAREA EQU   @DATA+00000308      7 BYTE(S) ON WORD
ECB      EQU   RESPAREA+00000000   4 BYTE(S)
REPBUF   EQU   RESPAREA+00000004   3 BYTE(S)
SAVE4    EQU   00000004            FULLWORD POINTER
         ORG   @DATA+00000315
FULL     EQU   *                   12 BYTE(S)
         DC    X'000000000000FFFFFFFFFFFF'
ZEROES   EQU   FULL+00000000       6 BYTE(S)
ZERO     EQU   FULL+00000000       3 BYTE(S)
MSGPTR   EQU   00000000            16 BYTE(S) ON WORD
MSGPTR20 EQU   MSGPTR+00000000     FULLWORD POINTER
MSGPTR45 EQU   MSGPTR+00000004     FULLWORD POINTER
MSGPTR56 EQU   MSGPTR+00000008     FULLWORD POINTER
MSGPTR62 EQU   MSGPTR+00000012     FULLWORD POINTER
MSSGE20D EQU   00000000            70 BYTE(S) ON WORD
WTORPRF1 EQU   MSSGE20D+00000000   8 BYTE(S)
A00011   EQU   MSSGE20D+00000008   4 BYTE(S)
MSG20D   EQU   MSSGE20D+00000012   58 BYTE(S)
MSSGE45D EQU   00000000            76 BYTE(S) ON WORD
WTORPRF2 EQU   MSSGE45D+00000000   8 BYTE(S)
A00012   EQU   MSSGE45D+00000008   4 BYTE(S)
MSG45D   EQU   MSSGE45D+00000012   64 BYTE(S)
MSSGE56I EQU   00000000            51 BYTE(S) ON WORD
A00013   EQU   MSSGE56I+00000000   4 BYTE(S)
MSG56I   EQU   MSSGE56I+00000004   47 BYTE(S)
MSSGE62I EQU   00000000            60 BYTE(S) ON WORD
A00014   EQU   MSSGE62I+00000000   4 BYTE(S)
MSG62I   EQU   MSSGE62I+00000004   56 BYTE(S)
WTORLIST EQU   @DATA+00000328      8 BYTE(S) ON WORD
         ORG   WTORLIST+00000000
REPLYLEN EQU   *                   1 BYTE(S)
         DC    X'03'
REPLYADR EQU   *                   3  BYTE  POINTER ON WORD+1
         DC    AL3(REPBUF)
ECBADDR  EQU   *                   FULLWORD POINTER
         DC    AL4(ECB)
DDNAME   EQU   *                   16*10 BYTE(S)
         DC    00016X'00000000000000000000'
WORKAREA EQU   @DATA+00000496      140 BYTE(S) ON DWORD
DSCBDATA EQU   WORKAREA+00000000   96 BYTE(S)
A00015   EQU   WORKAREA+00000000   63 BYTE(S)
LOWLIMIT EQU   WORKAREA+00000063   4 BYTE(S)
UPLIMIT  EQU   WORKAREA+00000067   4 BYTE(S)
DEVENTRY EQU   00000000            56 BYTE(S) ON WORD
EBCDICAD EQU   DEVENTRY+00000000   8 BYTE(S)
UCBADDR  EQU   DEVENTRY+00000008   4 BYTE(S)
UCBPTR   EQU   DEVENTRY+00000008   4  BYTE  POINTER
FLAG1    EQU   DEVENTRY+00000012   1 BYTE(S)
DEVSTAT  EQU   DEVENTRY+00000012   1 BIT(S)
PRIMARY  EQU   DEVENTRY+00000012   1 BIT(S)
DPDONE   EQU   DEVENTRY+00000012   1 BIT(S)
EXIOACT  EQU   DEVENTRY+00000012   1 BIT(S)
ALLOCATE EQU   DEVENTRY+00000012   1 BIT(S)
GRABBED  EQU   DEVENTRY+00000012   1 BIT(S)
FPMODE   EQU   DEVENTRY+00000012   1 BIT(S)
LSTACSEC EQU   DEVENTRY+00000012   1 BIT(S)
FLAG2    EQU   DEVENTRY+00000013   1 BYTE(S)
DSNAMEFF EQU   DEVENTRY+00000013   1 BIT(S)
SHARED   EQU   DEVENTRY+00000013   1 BIT(S)
CEVOLUME EQU   DEVENTRY+00000013   1 BIT(S)
STDLABEL EQU   DEVENTRY+00000013   1 BIT(S)
A00024   EQU   DEVENTRY+00000013   1 BIT(S)
BYPASSFI EQU   DEVENTRY+00000013   1 BIT(S)
CEDEFI   EQU   DEVENTRY+00000013   1 BIT(S)
ATTNINFI EQU   DEVENTRY+00000013   1 BIT(S)
FLAG3    EQU   DEVENTRY+00000014   1 BYTE(S)
FLAG4    EQU   DEVENTRY+00000015   1 BYTE(S)
EXTENTS  EQU   DEVENTRY+00000016   12 BYTE(S)
STARTAD  EQU   DEVENTRY+00000016   6 BYTE(S)
ENDAD    EQU   DEVENTRY+00000022   4 BYTE(S)
NOTRKS   EQU   DEVENTRY+00000026   2 BYTE(S)
NUMTRKS  EQU   DEVENTRY+00000026   2  BYTE  INTEGER
A00025   EQU   DEVENTRY+00000028   2 BYTE(S)
MSSAVE   EQU   DEVENTRY+00000030   1 BYTE(S)
EXPOSURE EQU   DEVENTRY+00000031   1 BYTE(S)
DEVAD    EQU   DEVENTRY+00000032   4 BYTE(S)
CDSDSCRP EQU   DEVENTRY+00000036   4 BYTE(S)
CDSBYCNT EQU   DEVENTRY+00000040   1 BYTE(S)
CDSFLAGS EQU   DEVENTRY+00000041   1 BYTE(S)
CDSFPM   EQU   DEVENTRY+00000041   1 BIT(S)
CDSEXTMK EQU   DEVENTRY+00000042   2 BYTE(S)
SYMNAME  EQU   DEVENTRY+00000044   8 BYTE(S)
A00026   EQU   DEVENTRY+00000052   2 BYTE(S)
ALCINDEX EQU   DEVENTRY+00000054   1  BYTE  POINTER
A00027   EQU   DEVENTRY+00000055   1 BYTE(S)
CNFGDATA EQU   00000000            4 BYTE(S) ON WORD
CDSDEVAD EQU   CNFGDATA+00000000   4 BYTE(S)
EXTNTS   EQU   00000000            16 BYTE(S) ON WORD
BEGINAD  EQU   EXTNTS+00000000     8 BYTE(S)
STRTAD   EQU   EXTNTS+00000000     6 BYTE(S)
BBSTRT   EQU   EXTNTS+00000000     2 BYTE(S)
CCHHSTRT EQU   EXTNTS+00000002     4 BYTE(S)
ENDADDR  EQU   EXTNTS+00000008     8 BYTE(S)
BBEND    EQU   EXTNTS+00000008     2 BYTE(S)
CCHHEND  EQU   EXTNTS+00000010     4 BYTE(S)
UCBFRMAT EQU   00000000            34 BYTE(S) ON WORD
A00028   EQU   UCBFRMAT+00000000   3 BYTE(S)
UCBFLAGS EQU   UCBFRMAT+00000003   1 BYTE(S)
STATUS   EQU   UCBFRMAT+00000003   1 BIT(S)
A00029   EQU   UCBFRMAT+00000004   12 BYTE(S)
DESCRPTR EQU   UCBFRMAT+00000016   4 BYTE(S)
A00030   EQU   UCBFRMAT+00000016   1 BYTE(S)
FEATURES EQU   UCBFRMAT+00000017   8 BIT(S)
CLASTYPE EQU   UCBFRMAT+00000018   2 BYTE(S)
CLASS    EQU   UCBFRMAT+00000018   1 BYTE(S)
TYPE     EQU   UCBFRMAT+00000019   1 BYTE(S)
A00031   EQU   UCBFRMAT+00000020   8 BYTE(S)
UCBVSER  EQU   UCBFRMAT+00000028   6 BYTE(S)
         ORG   @DATA
         DS    00000636C
@TEMPS   DS    0F
ALOCDSCB CAMLST SEARCH,ALCU1PRM,ALCUAPRM,WORKAREA                YM7282
ALOCAT   IFDCOM
         GLOBAL
         ALOCAT MAP=YES
ALOLEVL  EQU   $ALOLEVL
ALOCADR  EQU   $ALOCADR
ALOCDSA  EQU   $ALOCDSA
ALOAMT   EQU   $ALOAMT
ALOFLGT  EQU   $ALOFLGT
ALOFLAG  EQU   $ALOFLAG
ROPTMIN2 EQU   ROPT-00000002       2 BYTE(S)
SVCPLIST EQU   ROPT+00000000       8 BYTE(S) ON WORD
UCBADDRS EQU   SVCPLIST+00000000   4 BYTE(S)
VOLSERPT EQU   SVCPLIST+00000004   FULLWORD POINTER
SCT      EQU   CHASCT+00000000     12 BYTE(S) ON WORD
A00000   EQU   SCT+00000000        10 BYTE(S)
FLAGS    EQU   SCT+00000010        1 BYTE(S)
A00001   EQU   SCT+00000010        1 BIT(S)
FILEPROT EQU   SCT+00000010        1 BIT(S)
A00002   EQU   SCT+00000011        1 BYTE(S)
FPMODCDS EQU   SCT+00000011        1 BIT(S)
OLTEPSW2 EQU   CESWT2+00000000     1 BYTE(S)
A00016   EQU   OLTEPSW2+00000000   5 BIT(S)
NDR      EQU   OLTEPSW2+00000000   1 BIT(S)
OLTEPSW3 EQU   CESWT3+00000000     1 BYTE(S)
A00017   EQU   OLTEPSW3+00000000   2 BIT(S)
BYPTST   EQU   OLTEPSW3+00000000   1 BIT(S)
OLTEPSW6 EQU   CESWT6+00000000     1 BYTE(S)
A00018   EQU   OLTEPSW6+00000000   7 BIT(S)
STAEXIT  EQU   OLTEPSW6+00000000   1 BIT(S)
A00019   EQU   CESWTR+00000000     1 BYTE(S)
RETAINAC EQU   A00019+00000000     1 BIT(S)
A00020   EQU   A00019+00000000     1 BIT(S)
REMNOMSG EQU   A00019+00000000     1 BIT(S)
A00021   EQU   A00019+00000000     5 BIT(S)
A00022   EQU   CESWTR2+00000000    1 BYTE(S) ON WORD
A00023   EQU   A00022+00000000     7 BIT(S)
DPMSGREI EQU   A00022+00000000     1 BIT(S)
@DATEND  EQU   *
@9FC     EQU   ALOCAT52
@9F4     EQU   ALOCAT10
@DO9F8   EQU   ALOCAT52
@9EE     EQU   ALOCAT52
@9ED     EQU   ALOCAT52
@9EB     EQU   ALOCAT50
@9EA     EQU   ALOCAT52
@9E9     EQU   ALOCAT52
@9E8     EQU   ALOCAT52
@9D9     EQU   ALOCAT51
@9D8     EQU   ALOCAT51
@9D7     EQU   ALOCAT51
         END
