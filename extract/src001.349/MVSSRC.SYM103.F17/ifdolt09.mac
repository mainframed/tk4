         LCLA  &T,&SPN                                            0001
.@001    ANOP                                                     0001
IFDOLT09 CSECT ,                                                  0001
         BC    15,24(0,@F)
         DC    C'IFDOLT09 14 SEP 73'                             0001
         ST    @E,12(0,@D)                                        0001
         STM   @0,@C,20(@D)                                       0001
         BALR  @B,0                                               0001
@PSTART  DS    0H                                                 0001
         USING @PSTART+00000,@B                                   0001
         ST    @D,@SAV001+4                                       0001
         LA    @F,@SAV001                                         0001
         ST    @F,8(0,@D)                                         0001
         LR    @D,@F                                              0001
*         R5 = CHKFLD;                   /* SET REG 5 TO CHECKFLD PTR *
         L     @5,0(0,@1)                                         0018
*         R6 = TECBAD;                   /* SET REG 6 TO TECB PTR.    *
         L     @6,4(0,@5)                                         0019
*         ERRFLG = '00'X;                /* CLEAR ERROR FLAG FIELD    *
         MVI   ERRFLG,X'00'                                       0020
*   GENERATE;
         TM    0(5),X'FC'
         BZ    CMP006
         DS    0H
*         IF RELVT2 = '0'B THEN          /* CONDITION CODE TEST       *
         TM    0(@5),B'01000000'                                  0022
*           GO TO CMP001;                /* NO-BRANCH TO COMMAND      *
         BC    08,CMP001                                          0023
*                                        /* ADDRESS TEST.             *
*         IF EXPCC = TRECC THEN          /* VALID CONDITION CODE      *
         CLC   8(1,@5),4(@6)                                      0024
*           GO TO CMP001;                /* YES-BRANCH TO COMMAND     *
         BC    08,CMP001                                          0025
*                                        /* ADDRESS TEST              *
*         ERRFLG = ERRFLG × '40'X;       /* NO-SET ERROR FLAG         *
         OI    ERRFLG,X'40'                                       0026
* CMP001:
*         IF RELVT1 = '0'B THEN          /* COMMAND ADDRESS TEST      *
CMP001   TM    0(@5),B'10000000'                                  0027
*           GO TO CMP002;                /* NO-BRANCH TO 1ST CSW      *
         BC    08,CMP002                                          0028
*                                        /* STATUS TEST.              *
*         IF ADDR1 = TRECSW1 THEN        /* VALID COMMAND ADDRESS     *
         MVC   @TEMP3+1(3),5(@6)                                  0029
         L     @F,@TEMP3                                          0029
         MVC   @TEMP3+1(3),9(@5)                                  0029
         C     @F,@TEMP3                                          0029
*           GO TO CMP002;                /* YES-BRANCH TO 1ST CSW     *
         BC    08,CMP002                                          0030
*                                        /* STATUS TEST               *
*         ERRFLG = ERRFLG × '80'X;       /* NO-SET ERROR FLAG         *
         OI    ERRFLG,X'80'                                       0031
* CMP002:
*         IF RELVT3 = '0'B THEN          /* 1ST CSW STATUS TEST       *
CMP002   TM    0(@5),B'00100000'                                  0032
*           GO TO CMP003;                /* NO-BRANCH TO 2ND CSW      *
         BC    08,CMP003                                          0033
*                                        /* STATUS TEST.              *
*         IF STATUS1 = RESTAT1 THEN      /* VALID CSW STATUS          *
         CLC   12(1,@5),8(@6)                                     0034
*           GO TO CMP003;                /* YES-BRANCH TO 2ND CSW     *
         BC    08,CMP003                                          0035
*                                        /* STATUS TEST.              *
*         ERRFLG = ERRFLG × '20'X;       /* NO-SET ERROR FLAG         *
         OI    ERRFLG,X'20'                                       0036
* CMP003:
*         IF RELVT4 = '0'B THEN          /* 2ND CSW STATUS TEST       *
CMP003   TM    0(@5),B'00010000'                                  0037
*           GO TO CMP004;                /* NO-BRANCH TO CSW COUNT    *
         BC    08,CMP004                                          0038
*                                        /* TEST.                     *
*         IF STATUS2 = RESTAT2 THEN      /* VALID CSW STATUS          *
         CLC   13(1,@5),9(@6)                                     0039
*           GO TO CMP004;                /* YES-BRANCH TO CSW COUNT   *
         BC    08,CMP004                                          0040
*                                        /* TEST.                     *
*         ERRFLG = ERRFLG × '10'X;       /* NO-SET ERROR FLAG         *
         OI    ERRFLG,X'10'                                       0041
* CMP004:
*         IF RELVT5 = '0'B THEN          /* CSW COUNT TEST            *
CMP004   TM    0(@5),B'00001000'                                  0042
*           GO TO CMP005;                /* NO-BRANCH TO SENSE DATA   *
         BC    08,CMP005                                          0043
*                                        /* TEST.                     *
*         IF COUNT = RECNT THEN          /* VALID CSW COUNT           *
         CLC   14(2,@5),10(@6)                                    0044
*           GO TO CMP005;                /* YES-BRANCH TO SENSE DATA  *
         BC    08,CMP005                                          0045
*                                        /* TEST.                     *
*         ERRFLG = ERRFLG × '08'X;       /* NO-SET ERROR FLAG         *
         OI    ERRFLG,X'08'                                       0046
* CMP005:
*         IF RELVT6 = '0'B THEN          /* SENSE DATA TEST           *
CMP005   TM    0(@5),B'00000100'                                  0047
*           GO TO CMP006;                /* NO-BRANCH TO DATA COMPARE *
         BC    08,CMP006                                          0048
*                                        /* TEST.                     *
*         IF EXPSNS(1:SNSCNT) = RECSNS(1:SNSCNT) THEN  /* VALID SENSE *
         LA    @E,12(0,@6)                                        0049
         SR    @4,@4                                              0049
         IC    @4,3(0,@5)                                         0049
         BCTR  @4,0                                               0049
         LA    @A,16(0,@5)                                        0049
         EX    @4,@CLC                                            0049
*           GO TO CMP006;                /* DATA-YES-BRANCH TO DATA   *
         BC    08,CMP006                                          0050
*                                        /* COMPARE TEST.             *
*         ERRFLG = ERRFLG × '04'X;       /* NO-SET ERROR FLAG         *
         OI    ERRFLG,X'04'                                       0051
*
*         IF SNSERR ^= 'FF'X THEN        /* ERROR SENSE TEST VALID    *
         CLI   12(@6),X'FF'                                       0052
*           GO TO CMP006;                /* YES-BRANCH TO DATA COMPARE*
         BC    07,CMP006                                          0053
*                                        /* TEST.                     *
*         ERRFLG = ERRFLG × '02'X;       /* NO-SET ERROR FLAG.        *
         OI    ERRFLG,X'02'                                       0054
* CMP006:
*         IF RELVT8 = '0'B THEN          /* DATA COMPARE TEST         *
CMP006   TM    0(@5),B'00000001'                                  0055
*           GO TO CMP007;                /* NO-BRANCH TO EXIT ROUTINE *
         BC    08,CMP007                                          0056
*         IF RECEIV(1:CNT) = EXPECT(1:CNT) THEN       /* VALID DATA   *
         L     @4,28(0,@5)         
         LR    @E,@4                                              0057
         SR    @7,@7                                              0057
         IC    @7,2(0,@5)                                         0057
         BCTR  @7,0                                               0057
         L     @C,24(0,@5)         
         LR    @A,@C                                              0057
         EX    @7,@CLC                                            0057
*           GO TO CMP007;                /* COMPARE-YES-BRANCH TO     *
         BC    08,CMP007                                          0058
*                                        /* EXIT ROUTINE              *
*         ERRFLG = ERRFLG × '01'X;       /* NO-SET ERROR FLAG         *
         OI    ERRFLG,X'01'                                       0059
* CMP007:
*         IF ERRFLG = '00'X THEN         /* IF NO ERRORS OCCURRED     *
CMP007   CLI   ERRFLG,X'00'                                       0060
*           GO TO CMP008;                /* BRANCH TO NORMAL RETURN   *
         BC    08,CMP008                                          0061
*         SAVRTN = ERRTNAD;              /* ELSE-SET ERROR RETURN ADR.*
         L     @4,4(0,@D)          
         MVC   12(4,@4),4(@1)                                     0062
*         R15 = ERRFLG;             /* SET ERROR RETURN FLAGS         *
         SR    @F,@F                                              0063
         IC    @F,ERRFLG                                          0063
*           GO TO CMP009;                /* BRANCH TO RETURN          *
         BC    15,CMP009                                          0064
* CMP008:
*         R15 = '00'X;                   /* SET NORMAL RETURN CODE    *
CMP008   LA    @F,X'00'                                           0065
* CMP009:
*         RETURN;                        /* RETURN TO CALLER          *
*         END   IFDOLT09;                /* END OF COMPARE MODULE     *
@EL01    L     @D,4(0,@D)                                         0067
         L     @E,12(0,@D)                                        0067
         LM    @0,@C,20(@D)                                       0067
         BCR   15,@E                                              0067
@DATA1   EQU   *
@0       EQU   00                  EQUATES FOR REGISTERS 0-15
@1       EQU   01
@2       EQU   02
@3       EQU   03
@4       EQU   04
@5       EQU   05
@6       EQU   06
@7       EQU   07
@8       EQU   08
@9       EQU   09
@A       EQU   10
@B       EQU   11
@C       EQU   12
@D       EQU   13
@E       EQU   14
@F       EQU   15
@CLC     CLC   0(1,@A),0(@E)
         DS    0F
         DS    0D
@DATA    EQU   *
@SAV001  EQU   @DATA+00000000      72 BYTE(S) ON WORD
X        EQU   00000000            FULLWORD INTEGER
R1       EQU   00000001            FULLWORD POINTER REGISTER
R5       EQU   00000005            FULLWORD POINTER REGISTER
R6       EQU   00000006            FULLWORD POINTER REGISTER
R13      EQU   00000013            FULLWORD POINTER REGISTER
R14      EQU   00000014            FULLWORD POINTER REGISTER
R15      EQU   00000015            FULLWORD POINTER REGISTER
A00000   EQU   00000000            8 BYTE(S) ON WORD
A00001   EQU   A00000+00000000     FULLWORD POINTER
CALLSA   EQU   A00000+00000004     FULLWORD POINTER
A00002   EQU   00000000            16 BYTE(S) ON WORD
A00003   EQU   A00002+00000000     12 BYTE(S)
SAVRTN   EQU   A00002+00000012     FULLWORD POINTER
A00004   EQU   00000000            8 BYTE(S) ON WORD
CHKFLD   EQU   A00004+00000000     FULLWORD POINTER
ERRTNAD  EQU   A00004+00000004     FULLWORD POINTER
A00005   EQU   00000000            32 BYTE(S) ON WORD
A00006   EQU   A00005+00000000     4 BYTE(S)
RELVT    EQU   A00005+00000000     1 BYTE(S)
RELVT1   EQU   A00005+00000000     1 BIT(S)
RELVT2   EQU   A00005+00000000     1 BIT(S)
RELVT3   EQU   A00005+00000000     1 BIT(S)
RELVT4   EQU   A00005+00000000     1 BIT(S)
RELVT5   EQU   A00005+00000000     1 BIT(S)
RELVT6   EQU   A00005+00000000     1 BIT(S)
RELVT7   EQU   A00005+00000000     1 BIT(S)
RELVT8   EQU   A00005+00000000     1 BIT(S)
A00007   EQU   A00005+00000001     1 BYTE(S)
CNT      EQU   A00005+00000002     1 BYTE(S)
SNSCNT   EQU   A00005+00000003     1 BYTE(S)
TECBAD   EQU   A00005+00000004     FULLWORD POINTER
A00008   EQU   A00005+00000008     4 BYTE(S)
EXPCC    EQU   A00005+00000008     1 BYTE(S)
ADDR1    EQU   A00005+00000009     3  BYTE  POINTER
STATUS1  EQU   A00005+00000012     1 BYTE(S)
STATUS2  EQU   A00005+00000013     1 BYTE(S)
COUNT    EQU   A00005+00000014     2 BYTE(S)
EXPSNS   EQU   A00005+00000016     8 BYTE(S)
RECDATA  EQU   A00005+00000024     FULLWORD POINTER
EXPDATA  EQU   A00005+00000028     FULLWORD POINTER
RECEIV   EQU   00000000            256 BYTE(S)
EXPECT   EQU   00000000            256 BYTE(S)
A00009   EQU   00000000            20 BYTE(S) ON WORD
A00010   EQU   A00009+00000000     4 BYTE(S)
A00011   EQU   A00009+00000004     4 BYTE(S)
TRECC    EQU   A00009+00000004     1 BYTE(S)
TRECSW1  EQU   A00009+00000005     3 BYTE(S)
RESTAT1  EQU   A00009+00000008     1 BYTE(S)
RESTAT2  EQU   A00009+00000009     1 BYTE(S)
RECNT    EQU   A00009+00000010     2 BYTE(S)
RECSNS   EQU   A00009+00000012     8 BYTE(S)
SNSERR   EQU   A00009+00000012     1 BYTE(S)
A00012   EQU   A00009+00000013     7 BYTE(S)
ERRFLG   EQU   @DATA+00000072      1 BYTE(S)
         DS    00000073C
@TEMPS   DS    0F
@TEMP3   DC    F'0'
         IFDPATCH                      PATCH AREA
@DATEND  EQU   *
CMP009   EQU   @EL01
         END   IFDOLT09
