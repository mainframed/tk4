         TITLE '        NEW CECOM WTO/R INTERFACE--IFDOLT37.'
         PRINT OFF
         MACRO
&NAME    CECOM &OUTMSG=,&INMSG=,&OUTSD=,&FREE=,&POLL=,&MF=,            X
               &MAP=NO,&LSTNAME=
.*
         GBLB  &EXECUTV,&E536454
         LCLA  &A,&COUNT
         LCLC  &F,&Z,&CHAR
.*
         AIF   ('&MAP' EQ 'YES').MAP1
         AIF   (T'&MF EQ 'O').STD
         AIF   ('&MF' EQ 'L' OR '&MF' EQ 'S').STD
         AIF   ('&MF'(1,3) NE '(E,').MFERROR
&CHAR    SETC  '&NAME'
         AIF   ('&MF'(4,3) EQ '(1)').RG1
         AIF   ('&MF'(4,1) EQ '(').RG2
&CHAR    LA    R1,&MF(2) .         ADDRESS OF PARAMETER LIST
&CHAR    SETC  ' '
         AGO   .RG1
.RG2     ANOP
&COUNT   SETA  K'&MF(2)-2
&F       SETC  '&MF(2)'(2,&COUNT)
         AIF   ('&F'(1,1) EQ 'R').C724
&CHAR    LR    R1,R&F .            ADDRESS OF PARAMETER LIST
&CHAR    SETC  ' '
         AGO   .RG1
.C724    ANOP
&CHAR    LR    R1,&F .             ADDRESS OF PARAMETER LIST
&CHAR    SETC  ' '
.RG1     ANOP
&CHAR    BAL   R14,#EXIT .         BRANCH TO LINKAGE SUBROUTINE
         MEXIT
.MFERROR MNOTE 8,'MF VALUE (&MF) INCORRECT, NO STATEMENTS GENERATED.'
         MEXIT
.STD     ANOP
         AIF   (T'&FREE NE 'O').FREE
         AIF   (T'&POLL NE 'O').POLL
         AIF   (T'&OUTMSG EQ 'O').ERR1
         AIF   (N'&OUTMSG EQ 1).ERR2
         AGO   .NO3
.FREE    ANOP
         AIF   (T'&OUTMSG NE 'O' OR T'&INMSG NE 'O').ERR4
         AIF   (T'&POLL NE 'O' OR T'&OUTSD NE 'O').ERR4
&A       SETA  64
         AGO   .NO3
.POLL    ANOP
         AIF   (T'&OUTMSG NE 'O' OR T'&INMSG NE 'O').ERR4
         AIF   (T'&FREE NE 'O' OR T'&OUTSD NE 'O').ERR4
&A       SETA  32
.NO3     ANOP
         AIF   (T'&INMSG EQ 'O').NO3A
         AIF   (N'&INMSG NE 2).ERR3
.NO3A    ANOP
         AIF   (T'&OUTSD EQ 'O').NO5A
         AIF   (T'&OUTMSG NE 'O' AND T'&INMSG NE 'O').NO5
         MNOTE 8,'OUTSD WITHOUT BOTH OUTMSG AND INMSG INVALID'
         MEXIT
.NO5     ANOP
&A       SETA  128
.NO5A    ANOP
         AIF   ('&MF(1)' EQ 'L').LST
&NAME    LA    R14,R&SYSNDX        RETURN ADDRESS
         CNOP  0,4
         BAL   R1,#EXIT .          BRANCH TO LINKAGE SUBROUTINE
&CHAR    SETC  '&LSTNAME'
         AGO   .STD1
.LST     ANOP
&CHAR    SETC  '&NAME'
.STD1    ANOP
         AIF   (&EXECUTV).OLTSEP
&CHAR    DC    B'00000000' .       CONTROL PROGRAM FLAGS
         AGO   .OLTSEP1
.OLTSEP  ANOP
&CHAR    DC    B'00000001' .       CONTROL PROGRAM FLAGS
.OLTSEP1 ANOP
         DC    AL1(2) .            MACRO LEVEL
         DC    CL2'37' .           MACRO ID
         AIF   (T'&OUTMSG NE 'O').NO6
         DC    A(0) .              OUTMSG ADDRESS
         DC    A(0) .              OUTMSG COUNT
         AGO   .NO6A
.NO6     ANOP
         DC    A(&OUTMSG(1)) .     OUTMSG ADDRESS
         DC    A(&OUTMSG(2)) .     OUTMSG COUNT
.NO6A    ANOP
         AIF   (T'&INMSG NE 'O').NO7
         DC    A(0) .              INMSG ADDRESS
         DC    A(0) .              INMSG COUNT
         AGO   .NO9
.NO7     ANOP
         DC    A(&INMSG(1)) .      INMSG ADDRESS
         DC    A(&INMSG(2)) .      INMSG COUNT
.NO9     ANOP
         DC    AL1(&A) .           FLAGS
** FLAGS
** POLL  32
** FREE  64
** OUTSD 128
         AIF   ('&MF' EQ 'L').EXIT
R&SYSNDX DS    0H
         MEXIT
.ERR1    MNOTE 8,'NO OUTMSG OPERAND'
         MEXIT
.ERR2    MNOTE 8,'INVALID OUTMSG PARAMETER'
         MEXIT
.ERR3    ANOP
         MNOTE 8,'INVALID INMSG OPERAND'
         MEXIT
.ERR4    ANOP
         MNOTE 8,'FREE OR POLL OPERAND MUST BE ALONE'
         MEXIT
.MAP1    ANOP
CECOMMAP DSECT
&Z       SETC  '$'
         AIF   (&E536454).ZIPPER
           DC  XL1'0' .            CONTROL PROGRAM FLAGS
           DC  XL1'0' .            MACRO LEVEL
           DC  XL2'0' .            MACRO ID
         AGO   .ZIPPED
.ZIPPER  ANOP
&Z.CECTRMG DC  XL1'0' .            CONTROL PROGRAM FLAGS
&Z.CECLEVL DC  XL1'0' .            MACRO LEVEL
&Z.CECIDNT DC  XL2'0' .            MACRO ID
.ZIPPED  ANOP
&Z.CEOUTAD DC  A(0) .              ADDRESS OF OUTPUT MESSAGE
&Z.CEOUTCT DC  A(0) .              LENGTH  OF OUTPUT MESSAGE
&Z.CEINADR DC  A(0) .              ADDRESS OF INPUT  MESSAGE
&Z.CEINCT  DC  A(0) .              LENGTH  OF INPUT  MESSAGE
&Z.CECFLAG DC  XL1'0' .            FLAGS
.EXIT    MEND
         EJECT
         PRINT ON
         LCLA  &T,&SPN                                            0002
.@001    ANOP                                                     0002
IFDOLT37 CSECT ,                                                  0002
         BC    15,24(0,@F)
         DC    C'IFDOLT37 14 SEP 73'                             0002
         ST    @E,12(0,@D)                                        0002
         STM   @0,@C,20(@D)                                       0002
         BALR  @B,0                                               0002
@PSTART  DS    0H                                                 0002
         USING @PSTART+00000,@B                                   0002
         ST    @D,@SAV001+4                                       0002
         LA    @F,@SAV001                                         0002
         ST    @F,8(0,@D)                                         0002
         LR    @D,@F                                              0002
*         GEN   (USING CHASCT,2);
         USING CHASCT,2
         DS    0H
*         GENERATE DATA;
*         RESTRICT(2,6);                 /* REGISTERS USED BY PROGRAM *
*         DCL R0 REG(0) PTR;             /* CONTAINS ADDRESS OF ROPT  *
*         DCL R1 REG(1) PTR;             /* ADDRESS OF PARAMETER LIST *
*         DCL R4 REG(4) PTR;             /* REPLY COUNT               *
*         DCL R6 REG(6) PTR;             /* ADDRESS OF PARAMETER LIST *
*         DCL R14 REG(14) PTR;           /* RETURN REGISTER           *
*         DCL R15 REG(15) PTR;           /* RETURN CODE REGISTER      *
*         DCL ECBCE37 FIXED INIT(0);     /* ECB USED BY WTOR AND WAIT *
*   GEN(EJECT);
         EJECT
         DS    0H
*         /************************************************************
*         /* THE FOLLOWING LABELS DEFINE IFDOLT37 REFERENCES TO THE   *
*         /* CECOM PARAMETER LIST. THEY ARE FOLLOWED BY THE MAP       *
*         /* SUPPLIED BY DIAGNOSTIC ENGINEERING WITH EQUATED LABELS.  *
*         /************************************************************
*         DCL TRNMGR CHAR(1) GENERATED;  /* INDICATORS                *
*         DCL LEVEL CHAR(1) GENERATED;   /* MACRO LEVEL               *
*         DCL MACID CHAR(2) GENERATED;   /* MACRO ID                  *
*         DCL OUTMSGAD PTR GENERATED;    /* ADDRESS OF OUTPUT MESSAGE *
*         DCL OUTCNT FIXED GENERATED;    /* LENGTH OF OUTPUT MESSAGE  *
*         DCL INMSGAD PTR GENERATED;     /* ADDRESS OF INPUT MESSAGE  *
*         DCL INCNT FIXED GENERATED;     /* IN MESSAGE COUNT          *
*         DCL FLAGS CHAR(1) GENERATED;   /* FLAG AREA-OUTSD,FREE,POLL *
*         DECLARE
*             1 * BASED(ADDR(INCNT)),    /* IN MESSAGE COUNT AREA     *
*               2 * CHAR(3),             /* NOT USED                  *
*               2 INCNT3 CHAR(1);        /* IN MESSAGE LENGTH         *
*   GEN(  USING CECOMMAP,6);             /* PARAMETER LIST POINTER    *
           USING CECOMMAP,6
         DS    0H
*   GENERATE DATA;
*         DCL IFDMSG37 EXT ENTRY;         /* IFDOLT37 MESSAGE MODULE  *
*         DCL   MSGMOD37 PTR INIT(ADDR(IFDMSG37)); /* ADDRESS OF      *
*                                                  /* MESSAGE MODULE  *
*   GEN(EJECT);
         EJECT
         DS    0H
*         /************************************************************
*         /* THE FOLLOWING MAP DESCRIBES THE POINTERS TO THE LIST     *
*         /* FORM OF WTO'S AND WTOR'S IN MESSAGE MODULE IFDMSG37.     *
*         /************************************************************
*         DECLARE
*             1 * BASED(MSGMOD37),       /* MESSAGE MODULE ADDRESS    *
*               2 WTOPTR PTR,            /* ADDRESS OF WTO IFD100I    *
*               2 WTORPTR PTR;           /*ADDRESS WTOR IFD101D X02008*
*         DECLARE
*             1 * BASED(WTOPTR),         /* LIST FORM OF WTO          *
*               2 WTOLEN PTR(15),        /* MESSAGE LENGTH            *
*               2 * CHAR(10),            /* MESSAGE ID                *
*               2 MSAGE CHAR(63);        /* MESSAGE AREA              *
*         DECLARE
*             1 * BASED(WTORPTR),        /* LIST FORM OF WTOR         *
*               2 REPLYCNT CHAR(1),      /* WTOR REPLY COUNT          *
*               2 INBUFRAD PTR(24),      /* REPLY BUFFER ADDRESS      *
*               2 ECBCE37A PTR,          /* REPLY ECB ADDRESS         *
*               2 WTORLEN PTR(15),       /* MESSAGE LENGTH            *
*               2 * CHAR(10),            /* MESSAGE ID                *
*               2 WRMSAGE CHAR(63);      /* MESSAGE AREA              *
*   GEN(EJECT);
         EJECT
         DS    0H
*         /************************************************************
*         /* THE FOLLOWING MAP DESCRIBES THE AREA'S GENERATED BY      *
*         /* OLTEP'S COMMON AREA DSECT MAPPING.                       *
*         /************************************************************
*         DCL INBUFR CHAR(72) GENERATED;      /* INPUT BUFFER         *
*         DECLARE
*             1 * BASED(INMSGAD),
*               2 INRPCNT CHAR(1),       /* REPLY LENGTH RECEIVED     *
*               2 UTINMSG CHAR(61);      /* OLT REPLY BUFFER AREA     *
*         DCL UTOUTMSG CHAR(61) BASED(OUTMSGAD); /* OUT MESSAGE AREA  *
*         DCL   RESCNT37 CHAR(1);        /* ACTUAL REPLY LENGTH       *
*         DCL   OUTMSCNT FIXED;          /* ACTUAL MESSAGE LENGTH     *
*   GEN(EJECT);
         EJECT
         DS    0H
*  /* THE FOLLOWING BITS ARE OLTEP'S ROUTING & DESCRIPTOR CODES       *
*         DCL ROUTCD BIT(32) INIT('00000010000000000000000001000000'B);
*   GEN(EJECT);
         EJECT
         DS    0H
*         /************************************************************
*         /* THE FOLLOWING CODE WILL TAKE CARE OF EVERYTHING.         *
*         /************************************************************
*         R6 = R1;                       /* POINT REG 6 TO PARM LIST  *
         LR    @6,@1                                              0040
*         IF LEVEL ^= '02'X THEN         /* NOT A LEVEL 2 MACRO       *
         CLI   LEVEL,X'02'                                        0041
         BC    08,@9FF                                            0041
*           DO;
*           R15 = '04'X;                 /* SET RETURN CODE HEX 4     *
         LA    @F,X'04'                                           0043
*           GO TO FINISH;                /* BRANCH TO EXIT ROUTINE    *
         BC    15,FINISH                                          0044
*           END;                         /* END-NOT LEVEL 2 MACRO RTN *
*       IF OUTMSGAD = 0 THEN             /* NON-MESSAGE REQUEST       *
@9FF     SR    @F,@F                                              0046
         C     @F,OUTMSGAD                                        0046
*           GO TO RTRN8;                 /* ERROR RETURN POINT. X02008*
         BC    08,RTRN8                                           0047
*         IF OUTCNT < '01'X THEN        /* IF COUNT IS ZERO           *
         LA    @F,X'01'                                           0048
         C     @F,OUTCNT                                          0048
         BC    12,@9FE                                            0048
*           DO;                         /* DO THE FOLLOWING:          *
* RTRN8:                                 /* LABEL               X02008*
*           R15 = '08'X;                /* SET ERROR RETURN CODE 8    *
RTRN8    LA    @F,X'08'                                           0050
*           GO TO FINISH;               /* BRANCH TO EXIT ROUTINE     *
         BC    15,FINISH                                          0051
*           END;                        /* END OF OUT COUNT CHECK     *
*         IF OUTCNT > 61 THEN            /* IF OUT MESSAGE LENGTH IS  *
@9FE     LA    @F,61                                              0053
         C     @F,OUTCNT                                          0053
         BC    10,@9FD                                            0053
*           OUTMSCNT = 61;               /* GREATER THAN 61-SET TO 61 *
         ST    @F,OUTMSCNT                                        0054
         BC    15,@9FC                                            0055
*         ELSE                           /* IF NOT GREATER            *
*           OUTMSCNT = OUTCNT;           /* SET ACTUAL LENGTH         *
@9FD     MVC   OUTMSCNT(4),OUTCNT                                 0055
*         IF INMSGAD = 0 THEN            /* IS WTOR REQUESTED         *
@9FC     SR    @F,@F                                              0056
         C     @F,INMSGAD                                         0056
*           GO TO SETWTO;                /* NO-BRANCH TO WTO ROUTINE  *
         BC    08,SETWTO                                          0057
*         IF INCNT < '01'X THEN          /* IF INCOUNT IS ZERO   M1005*
         LA    @F,X'01'                                           0058
         C     @F,INCNT                                           0058
         BC    12,@9FB                                            0058
*           DO;                          /* DO THE FOLLOWING:         *
*           R15 = '08'X;                 /* SET ERROR RETURN CODE 8   *
         LA    @F,X'08'                                           0060
*           GO TO FINISH;                /* BRANCH TO EXIT ROUTINE    *
         BC    15,FINISH                                          0061
*           END;                         /* END OF IN COUNT CHECK     *
*         IF INCNT> 61 THEN              /* IF IN MSG LENGTH IS  M1005*
@9FB     LA    @F,61                                              0063
         C     @F,INCNT                                           0063
         BC    10,@9FA                                            0063
*           RESCNT37 = '3D'X;            /* GREATER THAN 61-SET TO 61 *
         MVI   RESCNT37,X'3D'                                     0064
         BC    15,@9F9                                            0065
*         ELSE                           /* IF NOT GREATER            *
*           RESCNT37 = INCNT3;           /* SET LENGTH           M1005*
@9FA     MVC   RESCNT37(1),A00000+3                               0065
*         GO TO SETWTOR;                 /* GO TO WTOR ROUTINE  X02008*
         BC    15,SETWTOR                                         0066
*   GEN(EJECT);
         EJECT
         DS    0H
*         /************************************************************
*         /* THE FOLLOWING CODE WILL HANDLE WTO REQUESTS.             *
*         /************************************************************
* SETWTO:
*         WTOLEN = OUTMSCNT+12;          /* SET OUT MESSAGE LENGTH    *
SETWTO   LA    @F,12                                              0068
         A     @F,OUTMSCNT                                        0068
         L     @3,MSGMOD37                                        0068
         L     @3,0(0,@3)          A00002                         0068
         STH   @F,0(0,@3)                                         0068
*         MSAGE(OUTMSCNT+1:OUTMSCNT+5)=ROUTCD; /* SET ROUTING & DESC  *
         LA    @E,ROUTCD                                          0069
         LA    @7,5                                               0069
         A     @7,OUTMSCNT                                        0069
         LA    @C,1                                               0069
         A     @C,OUTMSCNT                                        0069
         SR    @7,@C                                              0069
         LA    @A,11(@C,@3)                                       0069
         EX    @7,@MVC                                            0069
*         MSAGE(1:OUTMSCNT) = UTOUTMSG(1:OUTMSCNT); /* SETUP MESSAGE  *
         L     @7,OUTMSGAD                                        0070
         LR    @E,@7                                              0070
         L     @8,OUTMSCNT                                        0070
         BCTR  @8,0                                               0070
         LA    @A,12(0,@3)                                        0070
         EX    @8,@MVC                                            0070
*         R1 = WTOPTR;                   /* SET POINTER TO WTO        *
         L     @8,MSGMOD37                                        0071
         L     @1,0(0,@8)                                         0071
*   GEN(  PWTO  REG=(1));                /* INVOKE PARALLEL PRINT RTN *
           PWTO  REG=(1)
         DS    0H
*         R15 = '00'X;                   /* SET NORMAL RETURN CODE    *
         LA    @F,X'00'                                           0073
*         GO TO FINISH;                  /* BRANCH TO EXIT ROUTINE    *
         BC    15,FINISH                                          0074
*         /*                *** END OF WTO ROUTINE ***                *
*   GEN(EJECT);
         EJECT
         DS    0H
*         /************************************************************
*         /* THE FOLLOWING CODE WILL HANDLE WTOR REQUESTS.            *
*         /************************************************************
* SETWTOR:
*         REPLYCNT = RESCNT37;           /* SET ACTUAL REPLY LENGTH   *
SETWTOR  L     @3,MSGMOD37                                        0076
         L     @3,4(0,@3)          A00002                         0076
         MVC   0(1,@3),RESCNT37                                   0076
*         INBUFRAD = ADDR(INBUFR);       /* SET REPLY BUFFER ADDRESS  *
         LA    @F,INBUFR                                          0077
         ST    @F,@TEMP4                                          0077
         MVC   1(3,@3),@TEMP4+1                                   0077
*         ECBCE37A = ADDR(ECBCE37);      /* SET REPLY ECB ADDRESS     *
         LA    @F,ECBCE37                                         0078
         ST    @F,4(0,@3)                                         0078
*         WTORLEN = OUTMSCNT+12;         /* SET OUT MESSAGE LENGTH    *
         LA    @F,12                                              0079
         A     @F,OUTMSCNT                                        0079
         STH   @F,8(0,@3)                                         0079
*       WRMSAGE(OUTMSCNT+1:OUTMSCNT+5)=ROUTCD; /* SET ROUTING & DESC  *
         LA    @E,ROUTCD                                          0080
         LA    @7,5                                               0080
         A     @7,OUTMSCNT                                        0080
         LA    @C,1                                               0080
         A     @C,OUTMSCNT                                        0080
         SR    @7,@C                                              0080
         LA    @A,19(@C,@3)                                       0080
         EX    @7,@MVC                                            0080
*         WRMSAGE(1:OUTMSCNT) = UTOUTMSG(1:OUTMSCNT);/* SETUP MESSAGE *
         L     @7,OUTMSGAD                                        0081
         LR    @E,@7                                              0081
         L     @8,OUTMSCNT                                        0081
         BCTR  @8,0                                               0081
         LA    @A,20(0,@3)                                        0081
         EX    @8,@MVC                                            0081
*         INBUFR = INBUFR && INBUFR;     /* ZERO OUT REPLY BUFFER.    *
         XC    INBUFR(72),INBUFR                                  0082
*         ECBCE37 = 0;                   /* ZERO OUT REPLY ECB        *
         SR    @F,@F                                              0083
         ST    @F,ECBCE37                                         0083
*         R1 = WTORPTR;                  /* SET WTOR POINTER          *
         L     @8,MSGMOD37                                        0084
         L     @1,4(0,@8)                                         0084
*   GENERATE;
         PWTOR REG=(1)             INVOKE PARALELL PRINT ROUNTINE
         DS    0H
*         RESTRICT(R4);
*         DO R4 = 1 BY 1 TO RESCNT37;    /* SCAN REPLY BUFFER FOR CNT *
         LA    @4,1                                               0087
         BC    15,@DO9F7                                          0087
*            IF INBUFR(R4) = '00'X THEN  /* SHORT RESPONSE WILL BE    *
@DO9F8   LR    @3,@4                                              0088
         LA    @A,INBUFR-1(@3)                                    0088
         CLI   0(@A),X'00'                                        0088
*             GO TO SHRTRPLY;            /* PADDED WITH HEX ZERO'S    *
         BC    08,SHRTRPLY                                        0089
*         END;
*         INRPCNT = RESCNT37;            /* SET CNT IN 1ST BYTE OF    *
         AH    @4,@D1                                             0090
@DO9F7   SR    @0,@0                                              0090
         IC    @0,RESCNT37                                        0090
         CR    @4,@0                                              0090
         BC    12,@DO9F8                                          0090
         L     @3,INMSGAD                                         0091
         MVC   0(1,@3),RESCNT37                                   0091
*         GO TO SKIPSHRT;                /* CALLER'S REPLY BUFFER     *
         BC    15,SKIPSHRT                                        0092
* SHRTRPLY:
*         INRPCNT = R4-1;                /* SET CNT IN OLT BUFFER     *
SHRTRPLY LR    @F,@4                                              0093
         BCTR  @F,0                                               0093
         L     @3,INMSGAD                                         0093
         STC   @F,0(0,@3)                                         0093
* SKIPSHRT:
*         RELEASE(4);
*         UTINMSG(1:RESCNT37) = INBUFR(1:RESCNT37); /* MOVE REPLY     *
SKIPSHRT LA    @E,INBUFR                                          0095
         SR    @3,@3                                              0095
         IC    @3,RESCNT37                                        0095
         BCTR  @3,0                                               0095
         L     @7,INMSGAD                                         0095
         LA    @A,1(0,@7)                                         0095
         EX    @3,@MVC                                            0095
*                                                   /* TO OUT AREA    *
*         R15 = '00'X;                   /* SET NORMAL RETURN CODE    *
         LA    @F,X'00'                                           0096
* FINISH:                                /* EXIT ROUTINE              *
*         RETURN;                        /* RETURN TO CALLER          *
*         END   IFDOLT37;                /* END OF IFDOLT37           *
@EL01    L     @D,4(0,@D)                                         0098
         L     @E,12(0,@D)                                        0098
         LM    @0,@C,20(@D)                                       0098
         BCR   15,@E                                              0098
@DATA1   EQU   *
@0       EQU   00                  EQUATES FOR REGISTERS 0-15
@1       EQU   01
@2       EQU   02
@3       EQU   03
@4       EQU   04
@5       EQU   05
@6       EQU   06
@7       EQU   07
@8       EQU   08
@9       EQU   09
@A       EQU   10
@B       EQU   11
@C       EQU   12
@D       EQU   13
@E       EQU   14
@F       EQU   15
@D1      DC    H'1'
@MVC     MVC   0(1,@A),0(@E)
         DS    0F
         DS    0D
@DATA    EQU   *
@SAV001  EQU   @DATA+00000000      72 BYTE(S) ON WORD
X        EQU   00000000            FULLWORD INTEGER
R0       EQU   00000000            FULLWORD POINTER REGISTER
R1       EQU   00000001            FULLWORD POINTER REGISTER
R4       EQU   00000004            FULLWORD POINTER REGISTER
R6       EQU   00000006            FULLWORD POINTER REGISTER
R14      EQU   00000014            FULLWORD POINTER REGISTER
R15      EQU   00000015            FULLWORD POINTER REGISTER
         ORG   @DATA+00000072
ECBCE37  EQU   *                   FULLWORD INTEGER
         DC    FL4'0'
MSGMOD37 EQU   *                   FULLWORD POINTER
         DC    VL4(IFDMSG37)
A00002   EQU   00000000            8 BYTE(S) ON WORD
WTOPTR   EQU   A00002+00000000     FULLWORD POINTER
WTORPTR  EQU   A00002+00000004     FULLWORD POINTER
A00003   EQU   00000000            75 BYTE(S) ON WORD
WTOLEN   EQU   A00003+00000000     HALFWORD POINTER
A00004   EQU   A00003+00000002     10 BYTE(S)
MSAGE    EQU   A00003+00000012     63 BYTE(S)
A00005   EQU   00000000            83 BYTE(S) ON WORD
REPLYCNT EQU   A00005+00000000     1 BYTE(S)
INBUFRAD EQU   A00005+00000001     3  BYTE  POINTER ON WORD+1
ECBCE37A EQU   A00005+00000004     FULLWORD POINTER
WTORLEN  EQU   A00005+00000008     HALFWORD POINTER
A00006   EQU   A00005+00000010     10 BYTE(S)
WRMSAGE  EQU   A00005+00000020     63 BYTE(S)
A00007   EQU   00000000            62 BYTE(S) ON WORD
INRPCNT  EQU   A00007+00000000     1 BYTE(S)
UTINMSG  EQU   A00007+00000001     61 BYTE(S)
UTOUTMSG EQU   00000000            61 BYTE(S)
RESCNT37 EQU   @DATA+00000080      1 BYTE(S)
OUTMSCNT EQU   @DATA+00000084      FULLWORD INTEGER
         ORG   @DATA+00000088
ROUTCD   EQU   *                   32 BIT(S) ON BYTE
         DC    B'00000010000000000000000001000000'
         ORG   @DATA
         DS    00000092C
@TEMPS   DS    0F
@TEMP4   DC    F'0'
DSECT37  IFDCOM
         GLOBAL
         CECOM MAP=YES
TRNMGR   EQU   $CECTRMG            LABEL FOR TRANSIENT MANAGER FLAGS
LEVEL    EQU   $CECLEVL            LABEL FOR MACRO LEVEL
MACID    EQU   $CECIDNT            LABEL FOR MACRO ID
OUTMSGAD EQU   $CEOUTAD            LABEL FOR OUT MESSAGE ADDRESS
OUTCNT   EQU   $CEOUTCT            LABEL FOR OUT MESSAGE COUNT
INMSGAD  EQU   $CEINADR            LABEL FOR IN MESSAGE ADDRESS
INCNT    EQU   $CEINCT             LABEL FOR IN MESSAGE COUNT
FLAGS    EQU   $CECFLAG            LABEL FOR FLAGS
A00000   EQU   INCNT+00000000      4 BYTE(S) ON WORD
A00001   EQU   A00000+00000000     3 BYTE(S)
INCNT3   EQU   A00000+00000003     1 BYTE(S)
@DATEND  EQU   *
@9F9     EQU   SETWTOR
FINISH   EQU   @EL01
         END   IFDOLT37
