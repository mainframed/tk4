         TITLE 'IFDOLTAJ--CUTEST MODULE'
         LCLA  &T,&SPN                                            0001
.@001    ANOP                                                     0001
IFDOLTAJ CSECT ,                                                  0001
         BC    15,24(0,@F)
         DC    C'IFDOLTAJ 10 DEC 74'                             0001
         ST    @E,12(0,@D)                                        0001
         STM   @0,@C,20(@D)                                       0001
         BALR  @B,0                                               0001
@PSTART  DS    0H                                                 0001
         USING @PSTART+00000,@B                                   0001
         ST    @D,@SAV001+4                                       0001
         LA    @F,@SAV001                                         0001
         ST    @F,8(0,@D)                                         0001
         LR    @D,@F                                              0001
         TITLE 'IFDOLTAJ CUTEST MODULE'
         DS    0H
         USING CHASCT,2                ADDRESS COMMON AREA
         DS    0H
*         R7=R1;                        /* ADDRESS PARAMETER LIST     *
         LR    @7,@1                                              0074
*         R5=ADDR(IFDMSGAJ);            /* SET POINTER TO MSG MOD     *
         L     @C,@V1              ADDRESS OF IFDMSGAJ            0075
         LR    @5,@C                                              0075
*         MODFLAGS='00'X;               /* CLEAR OUT FLAG BYTE.       *
         MVI   MODFLAGS,X'00'                                     0076
*         MYCUTEXT=CUTEXT;             /* COPY EXTPTR IN OLT  @Y30LPAW*
         MVC   MYCUTEXT(4),4(@7)                                  0077
*         EXTLIMIT='01'X;              /* INIT CNTR TO 1 EXT  @Y30LPAW*
         MVI   EXTLIMIT,X'01'                                     0078
*  IF RESENTB='1'B THEN                  /* CHECK INDICATOR     XM0088*
         TM    A00030,B'01000000'                                 0079
         BC    12,@9FF                                            0079
*    DO;                                 /* CDS EQUATE          XM0088*
*      R1=MSG399;                        /* MESSAGE ADDRESS     XM0088*
         L     @1,20(0,@5)                                        0081
*      GEN(PWTO  REG=(1));               /* ISSUE WTO           XM0088*
         PWTO  REG=(1)
         DS    0H
*      GOTO CUTEST1A;                    /* SET RETURN CODE     XM0088*
         BC    15,CUTEST1A                                        0083
*    END;                                /* END INDICATOR TEST  XM0088*
*
* CUTEST00:
*
*         NEWBASE=CUBASE;               /* EXTENT UPDATE AREA         *
@9FF     EQU   *                                                  0085
CUTEST00 L     @C,MYCUTEXT                                        0085
         MVC   NEWBASE(4),0(@C)                                   0085
*         CULAST=CUBASE+CUFINISH-1;     /* LAST DEV ON CNTRL UNIT     *
         LH    @F,@D1                                             0086
         SR    @0,@0                                              0086
         IC    @0,4(0,@C)                                         0086
         AR    @F,@0                                              0086
         A     @F,0(0,@C)                                         0086
         ST    @F,CULAST                                          0086
*         BUFCOUNT='00'X;               /* CLEAR BUFR COUNTER         *
         LA    @F,X'00'                                           0087
         STH   @F,BUFCOUNT                                        0087
*         ENDOFTAB=DEVTBPTR+(TABLNGTH*(UNICTR-1));
         SR    @F,@F                                              0088
         IC    @F,UNICTR                                          0088
         BCTR  @F,0                                               0088
         MH    @F,TABLNGTH                                        0088
         A     @F,DEVTBPTR                                        0088
         ST    @F,ENDOFTAB                                        0088
*
*         IF RETAINAC='1'B THEN         /* IF RETAIN ACTIVE           *
         TM    A00020,B'10000000'                                 0089
         BC    12,@9FE                                            0089
*           DPMSGREI='1'B;              /* D P MSG TO REMOTE   OY00427*
         OI    A00021,B'00000001'                                 0090
*
* CUTEST01:
*
*
*         /*          CHECK CUTEST MACRO LEVEL PARAMETER              *
*         IF CUTLEVL<'02'X ×           /* MACRO LVL 2 OR MORE @Y30LPAW*
*           CUTLEVL>'03'X THEN           /* MAC LEVEL 2 OR 3  @Y30LPAW*
@9FE     EQU   *                                                  0091
CUTEST01 CLI   1(@7),X'02'                                        0091
         BC    04,@9FD                                            0091
         CLI   1(@7),X'03'                                        0091
         BC    12,@9FC                                            0091
*          DO;                          /* ERROR IN MACRO CALL.       *
@9FD     EQU   *                                                  0092
* CUTEST1A:                              /* LABEL               XM0088*
*           RETCODE='04'X;              /* SET RETURN CODE TO 04.     *
CUTEST1A LA    @F,X'04'                                           0093
*           GO TO CUTEST09;             /* NO, ERROR, SET RC=04.      *
         BC    15,CUTEST09                                        0094
*          END;
*         GO TO CUTEST2A;               /* CHECK CUTEST CU DEVSSA53534*
*
* CUTEST02:
*
*          DO;                          /* SET RC FOR CUTEST NOT      *
*           RETCODE='0C'X;              /* AVAILABLE. RETURN TO       *
CUTEST02 LA    @F,X'0C'                                           0098
*           GO TO CUTEST09;             /* OLT.                       *
         BC    15,CUTEST09                                        0099
*          END;
*
* CUTEST2A:
*
*
*         /*          ARE ZERO  DEVICES SPECIFIED ON CONTROL UNIT     *
*         IF CUFINISH='00'X THEN        /* ZERO DEVICES ON CU.        *
CUTEST2A L     @C,MYCUTEXT                                        0101
         CLI   4(@C),X'00'                                        0101
*          GO TO CUTEST02;              /* YES, SET ERROR RETCOD      *
         BC    08,CUTEST02                                        0102
*
*
*         /*      CHECK CODE PARAMETER FOR 0,1 OR 2 VALUE     @Y30LPAW*
*         IF CUCODE^<'03'X THEN     /* IF CODE PARM IS NOT    @Y30LPAW*
         CLI   8(@7),X'03'                                        0103
*          GO TO CUTEST02;              /* DEFINED SET RC=0C.         *
         BC    10,CUTEST02                                        0104
*         IF CUCODE='02'X &         /*   ALLOWED ONLY         @Y30LPAW*
*            CUTLEVL^='03'X THEN    /* WITH LEVEL 3 MACRO     @Y30LPAW*
         CLI   8(@7),X'02'                                        0105
         BC    07,@9FB                                            0105
         CLI   1(@7),X'03'                                        0105
*            GOTO CUTEST02;         /*                        @Y30LPAW*
         BC    07,CUTEST02                                        0106
*
*         /*          CHECK IF BASE ADDRESS IS LEGITIMATE      Y02008*/
*
*         IF CUBASE>'0000FFFF'X ×        /* BASE ADDRESS VALID Y02008*/
*          CUBASE<'00000000'X            /* BOTH HI AND LOW ?  Y02008*/
*           THEN                         /* ERROR, NO SVC CALL Y02008*/
@9FA     EQU   *                                                  0107
@9FB     L     @F,@X8                                             0107
         L     @C,MYCUTEXT                                        0107
         C     @F,0(0,@C)                                         0107
         BC    04,@9F9                                            0107
         L     @F,@X9                                             0107
         C     @F,0(0,@C)                                         0107
         BC    12,@9F8                                            0107
*            GO TO CUTEST08;             /* ATTEMPT LOCATE CDS Y02008*/
         BC    03,CUTEST08                                        0108
*
*         IF CUTLEVL='03'X &             /* LEVL 3 MACRO AND  @Y30LPAW*
*           NUMEXTS='00'X              /* ZERO EXTENTS ON CU  @Y30LPAW*
*           THEN                       /* INVALID CUTEST RQST @Y30LPAW*
@9F8     CLI   1(@7),X'03'                                        0109
         BC    07,@9F7                                            0109
         CLI   9(@7),X'00'                                        0109
*           GOTO CUTEST02;             /* ISSUE 04 RET CODE   @Y30LPAW*
         BC    08,CUTEST02                                        0110
*
*         /*          SET UP FOR SVC 59 FUNCTION                      *
*
*         MODNUM='AJ';                  /* MOD ID IN SVC PLIST        *
@9F6     EQU   *                                                  0111
@9F7     MVC   A00010+2(2),@C10                                   0111
*         CUBASEAD=CUBASE;              /* BASE CU ADDRESS.           *
         L     @C,MYCUTEXT                                        0112
         MVC   A00010+4(4),0(@C)                                  0112
*         CURANGE=CUFINISH;             /* NUM OF DEVS ON CU.         *
         MVC   A00010+9(1),4(@C)                                  0113
         MVI   A00010+8,X'00'                                     0113
*         CUTCODE=CUCODE;               /* CU CODE .                  *
         MVC   A00010+11(1),8(@7)                                 0114
         MVI   A00010+10,X'00'                                    0114
*         MSGMODAJ=R5;                  /* PTR TO IFDMSGAJ.           *
         ST    @5,A00010+12                                       0115
*
*
* CUTEST06:
*
*         R0=ADDR(ROPT);                /* ADDRESS SVC PARM LIST.     *
CUTEST06 LA    @0,ROPT                                            0116
*         R1='04'X;                     /* SVC CALLING CODE.   XA     *
         LA    @1,X'04'                                           0117
*         /*          ISSUE SUC59 TO TEST DEV STATUS,CUCODE,RTAM CNTRL*
*         GEN(SVC 59);                  /* SVC FOR CUTEST MACRO       *
         SVC 59
         DS    0H
*
*
*         /*          TEST SVC 59 FOR RET CODE. RC^=0 MEANS DEV ERROR *
*         IF RC^='00'X THEN             /* RC MEANS ONLINE DEVS       *
         LA    @0,X'00'                                           0119
         CR    @0,@F                                              0119
         BC    08,@9F5                                            0119
*          DO;                          /* OUTPUT ONLINE DEVICES      *
*
*           /*        CHECK TO DETERMINE IF HEADER MESSAGE OUTPUT     *
*           IF ONLHEADR='0'B THEN       /* HEADR MSG OUTPUT YET?      *
         TM    MODFLAGS,B'01000000'                               0121
         BC    05,@9F4                                            0121
*            DO;                        /* NO, PRINT IT.              *
*             R3=ADONLHDR;              /* IN HEADR MSG,FOLLOWED      *
         L     @3,8(0,@5)                                         0123
*             GEN(PWTO REG=(R3));       /* BY ONLINE DEVS             *
         PWTO REG=(R3)
         DS    0H
*             ONLHEADR='1'B;            /* SET FLG, HEADR OUTPUT      *
         OI    MODFLAGS,B'01000000'                               0125
*            END;
*
*          /*         OUTPUT ONLINE DEVICES FOUND BY SVC 59           *
*
*          R3=ADMSG244;                 /* SVC ONLINE BUFFER MSG      *
@9F4     L     @3,0(0,@5)                                         0127
*          GEN(PWTO REG=(R3));          /* OUTPUT ONLINE DEVS         *
         PWTO REG=(R3)
         DS    0H
*          SHARDBUF=SHARDBUF&&SHARDBUF; /* CLEAR BUFFER FOR SVC       *
         XC    12(60,@3),12(@3)                                   0129
*
*
*          /*         MORE DEVICES FOR SVC 59 TO LOOK AT?             *
*          IF CURANGE>'00'X THEN        /* MORE DEVS TO CHECK?        *
         LA    @F,X'00'                                           0130
         CH    @F,A00010+8                                        0130
*           GO TO CUTEST06;             /* YES, REISSUE SVC 59        *
         BC    04,CUTEST06                                        0131
*
*
* CUTEST07:
*
*          DO;                          /* OR DATA SET ON CU. SET     *
*           RETCODE='08'X;              /* RET CODE=08. RETURN TO     *
CUTEST07 LA    @F,X'08'                                           0133
*           GO TO CUTEST09;             /* OLT.                       *
         BC    15,CUTEST09                                        0134
*          END;
*          END;
*
*         /*          HAVE ONLINE DEVICES BEEN OUTPUT?          XM5092*
*
*         IF ONLHEADR='1'B THEN         /* IF HEADR MSG OUTPUT  XM5089*
@9F5     TM    MODFLAGS,B'01000000'                               0137
*           GO TO CUTEST07;             /* HAVE ERROR COND. RTRNXM5089*
         BC    01,CUTEST07                                        0138
*
*
* CUTEST08:
*
*
*         /*          SET UP FOR CONVERSION FROM HEX TO EBCDIC        *
*         HEXADDR=NEWBASE;              /* ADDRESS C U LINE.          *
CUTEST08 MVC   HEXADDR(4),NEWBASE                                 0139
*         FROMADDR=ADDR(HEXADDR);   /*                        @Y30LPAW*
         LA    @F,HEXADDR                                         0140
         ST    @F,CONVERT+4                                       0140
*         TOADDR=ADDR(EBCDICAD);    /*                        @Y30LPAW*
         LA    @F,EBCDICAD                                        0141
         ST    @F,CONVERT+8                                       0141
*         FLGCNT='8004'X;      /* SET FLAG AND COUNT          @Y30LPAW*
         MVC   CONVERT+12(2),@X13                                 0142
*         R1=ADDR(CONVERT);             /* CONVERT PARM LIST.         *
         LA    @1,CONVERT                                         0143
*         R15=TAB28;                    /* TRANS MNGR FOR BRANCH.     *
         L     @F,TAB28                                           0144
*         GENERATE;
         BALR  R14,R15                 CONVERT, HEX TO EBCDIC
         DS    0H
*         CDSNAME=EBCDICA7;             /* PREPARE FOR CDS LOAD.      *
         MVC   PARMLIST+1(7),EBCDICAD+1                           0146
*         LOADADDR=ADDR(CDSENTRY);      /* WHERE CDS LOADED     Y01008*
         LA    @F,CDSENTRY                                        0147
         ST    @F,PARMLIST+8                                      0147
*         PARMFLGS='60'X;               /* CDS LOAD, COMPUTE.   X02008*
         MVI   PARMLIST+12,X'60'                                  0148
*         CDSLNGTH='14'X;               /* SET TO 20 BYTES LNGTHY01008*
         LA    @F,X'14'                                           0149
         STH   @F,PARMLIST+14                                     0149
*
*         /* ISSUE CALL TO LOADER TO LOAD CDS FOR THIS DEVICE   Y01008*
*
*         GEN(IFDMOD CALL='12',LIST=PARMLIST);
         IFDMOD CALL='12',LIST=PARMLIST
         DS    0H
*
*         RESTRICT(R1);
*
*
*         /*          CHECK ENTRY POINT ADDR, MAKE SURE CDS LOADED    *
*         IF RC^='00'X THEN             /* IF CDS NOT LOADED    Y02008*
         LA    @0,X'00'                                           0152
         CR    @0,@F                                              0152
         BC    08,@9F3                                            0152
*          DO;                          /* NO CDS , OUTPUT MSG  X01906*
*           R3=ADMSG127;                /* ADDRESS MSG IFD127I  X01906*
         L     @3,12(0,@5)                                        0154
*           MSG127I(12:19)=CDSNAME;     /* PLACE CDS NAME IN BUFX01906*
         MVC   23(7,@3),PARMLIST+1                                0155
         MVI   30(@3),C' '                                        0155
*           GEN(PWTO REG=(3));          /* OUTPUT MESSAGE.      X01906*
         PWTO REG=(3)
         DS    0H
*           GO TO CUTEST8A;             /* DEV ASSUMMED SHARED  Y02008*
         BC    15,CUTEST8A                                        0157
*          END;
*
*
*         /*          CDS LOADED, CHECK DEV SHARED STATUS             *
*
*         IF DEVSHARD='1'B THEN         /* IS DEVICE SHARED           *
@9F3     TM    9(@1),B'01000000'                                  0159
         BC    12,@9F2                                            0159
*
*         /*          OUTPUT SHARED DEVICE HEADER MESSAGE.            *
*
*          DO;                          /* YES,                       *
* CUTEST8A:
*          IF SHRHEADR='0'B THEN        /* IF SHARE BIT IS ON IN      *
CUTEST8A TM    MODFLAGS,B'10000000'                               0161
         BC    05,@9F1                                            0161
*           DO;
*            R3=ADSHRHDR;               /* ADDRESS MESSAGE FORMAT     *
         L     @3,4(0,@5)                                         0163
*            GEN(PWTO REG=(R3));        /* OUTPUT HEADER MESSAGE.     *
         PWTO REG=(R3)
         DS    0H
*            SHRHEADR='1'B;             /* SET FLAG, HDR OUTPUT       *
         OI    MODFLAGS,B'10000000'                               0165
*            R3=ADMSG244;               /* ADDRESS SHARED DEV MSG     *
         L     @3,0(0,@5)                                         0166
*            SHARDBUF=SHARDBUF&&SHARDBUF;
         XC    12(60,@3),12(@3)                                   0167
*            SHARPTR=ADDR(SHARDBUF);    /* ADDR SHARD MSG BUFR.       *
         LA    @F,12(0,@3)                                        0168
         ST    @F,SHARPTR                                         0168
*           END;                        /* END HEADR OUTPUT CODE.     *
*
*
*           DO;                         /* FILL SHARD BUFFER          *
*            SHARDDEV=EBCDICA7(5:7);
@9F1     L     @C,SHARPTR                                         0171
         MVC   0(3,@C),EBCDICAD+5                                 0171
         MVI   3(@C),C' '                                         0171
*            SHARDDEV(4)=',';           /* PUT DELIMETER IN BUFR      *
         MVI   3(@C),C','                                         0172
*            SHARPTR=SHARPTR+4;         /* UPDATE BUFR PTR.           *
         LA    @F,4                                               0173
         A     @F,SHARPTR                                         0173
         ST    @F,SHARPTR                                         0173
*            BUFCOUNT=BUFCOUNT+4;       /* UPDATE BUFR CNTR.          *
         LA    @F,4                                               0174
         AH    @F,BUFCOUNT                                        0174
         STH   @F,BUFCOUNT                                        0174
*           END;
*          END;
*
*         NEWBASE=NEWBASE+'01'X;        /* NEXT DEV ON C U            *
@9F2     LA    @F,X'01'                                           0177
         A     @F,NEWBASE                                         0177
         ST    @F,NEWBASE                                         0177
*
*
*         /*          OUTPUT SHARED DEVICES IF BUFFR IS FULL OR AT END*
*         IF NEWBASE>CULAST ×           /* LAST DEV LOOKED AT OR      *
*          BUFCOUNT>=BUFMAX THEN        /* BUFR IS FULL,OUTPUT  XM5092*
         L     @F,CULAST                                          0178
         C     @F,NEWBASE                                         0178
         BC    04,@9F0                                            0178
         LH    @F,BUFMAX                                          0178
         CH    @F,BUFCOUNT                                        0178
         BC    02,@9EF                                            0178
*
*         /*          OUTPUT SHARED DEVICES IN MESSAGE BUFFER.        *
*
*          DO;
*          IF SHRHEADR='1'B THEN        /* SHARED DEVS IF THEY        *
@9F0     TM    MODFLAGS,B'10000000'                               0180
         BC    12,@9EE                                            0180
*           DO;                         /* EXIST                      *
*            R3=ADMSG244;               /* ADDRESS MESSAGE            *
         L     @3,0(0,@5)                                         0182
*            GEN(PWTO REG=(R3));        /* OUTPUT SHARED DEVICES.     *
         PWTO REG=(R3)
         DS    0H
*            BUFCOUNT=0;                /* REINIT BUFR COUNTR         *
         SR    @F,@F                                              0184
         STH   @F,BUFCOUNT                                        0184
*            SHARDBUF=SHARDBUF&&SHARDBUF;
         XC    12(60,@3),12(@3)                                   0185
*            SHARPTR=ADDR(SHARDBUF);    /* ADDR SHARD MSG BUFR.       *
         LA    @F,12(0,@3)                                        0186
         ST    @F,SHARPTR                                         0186
*           END;
*          END;
@9EE     EQU   *                                                  0188
*
*
*         /*          ALL DEVICES ON CONTROL UNIT CHECKED?            *
*         IF NEWBASE<=CULAST THEN       /* AT END OF EXTENT? NO,      *
@9EF     L     @F,CULAST                                          0189
         C     @F,NEWBASE                                         0189
*          GO TO CUTEST08;              /* LOOK AT NEXT DEVICE.       *
         BC    10,CUTEST08                                        0190
*
*         IF CUTLEVL='03'X &           /* LEVEL 3 MACRO       @Y30LPAW*
*           NUMEXTS>'01'X              /* MULTIPLE EXTENTS    @Y30LPAW*
*           THEN                       /* SET UP FOR NEXT     @Y30LPAW*
         CLI   1(@7),X'03'                                        0191
         BC    07,@9ED                                            0191
         CLI   9(@7),X'01'                                        0191
         BC    12,@9EC                                            0191
*           DO;                        /* EXTENT ON CU        @Y30LPAW*
*
*         IF NUMEXTS>EXTLIMIT       /* ALL EXTENTS CHECKED    @Y30LPAW*
*           THEN                       /* NO,PROCESS NEXT EXT @Y30LPAW*
         CLC   9(1,@7),EXTLIMIT                                   0193
         BC    12,@9EB                                            0193
*           DO;                        /* SETUP BASE AND CNT  @Y30LPAW*
*
*              EXTLIMIT=EXTLIMIT+'01'X; /* UPDATE CNTR        @Y30LPAW*
         LA    @F,X'01'                                           0195
         SR    @0,@0                                              0195
         IC    @0,EXTLIMIT                                        0195
         AR    @F,@0                                              0195
         STC   @F,EXTLIMIT                                        0195
*              MYCUTEXT=MYCUTEXT+'05'X; /* LOOK AT NEXT EXT   @Y30LPAW*
         LA    @F,X'05'                                           0196
         A     @F,MYCUTEXT                                        0196
         ST    @F,MYCUTEXT                                        0196
*              GOTO CUTEST00;           /* RET TO MAIN FLOW   @Y30LPAW*
         BC    15,CUTEST00                                        0197
*              END;
*
*           END;
@9EB     EQU   *                                                  0199
*
*         /*          OUTPUT PWTOR IF SHARED DEVICES ARE ON C U       *
*         IF SHRHEADR='1'B THEN         /* SHARD DEVS PRESENT         *
@9EC     EQU   *                                                  0200
@9ED     TM    MODFLAGS,B'10000000'                               0200
         BC    12,@9EA                                            0200
*          DO;                          /* YES, ASK OPERATOR IF       *
*           R3=ADMSG243;                /* ITS OK TO CONTINUE.        *
         L     @3,16(0,@5)                                        0202
*           ECB=ECB&&ECB;               /* CLEAR ECB FOR REPLY.       *
         XC    ECB(4),ECB                                         0203
*           INBUFAD=ADDR(INBUFR);       /* LOCATE REPLY BUFFER.       *
         LA    @F,INBUFR                                          0204
         ST    @F,WTORLIST                                        0204
*            WTORLNGT='03'X;            /* REPLY LENGTH.              *
         MVI   WTORLIST,X'03'                                     0205
*         ECBPTR=ADDR(ECB);             /* ADDRESS ECB FOR REPLY      *
         LA    @F,ECB                                             0206
         ST    @F,WTORLIST+4                                      0206
*            WTORPRFX=WTORLIST;         /* PLACE WTOR INFO IN MSG     *
         MVC   0(8,@3),WTORLIST                                   0207
*            REPLY=REPLY&&REPLY;        /* CLEAR REPLY BUFFER    M5092*
         XC    REPLY(3),REPLY                                     0208
*
*
*            /*            OUTPUT MESSAGE                             *
*            GEN(PWTOR REG=(R3),WAIT=YES);
         PWTOR REG=(R3),WAIT=YES
         DS    0H
*
*
*            /*       CHECK REPLY FROM OPERATOR                       *
*            IF REPLY ='YES' THEN       /* DEVS SHARD ARE NOT DIS     *
         CLC   REPLY(3),@C18                                      0210
*             GO TO CUTEST07;           /* CONNECTED. RC=08.          *
         BC    08,CUTEST07                                        0211
*           END;
*         RETCODE='00'X;                /* CU TEST REQMNTS MET        *
@9EA     LA    @F,X'00'                                           0213
*         IF CUCODE^='02'X THEN     /* IF REQUEST IS NOT      @Y30LPAW*
         CLI   8(@7),X'02'                                        0214
*           GOTO CUTEST09;          /*   CODE 2, RETURN       @Y30LPAW*
         BC    07,CUTEST09                                        0215
* CUTEST8B:                    /*                             @Y30LPAW*
*         R3=ADMSG469;              /* POINT TO DSID MSG      @Y30LPAW*
CUTEST8B L     @3,28(0,@5)                                        0216
*         ECB=ECB&&ECB;             /* CLEAR ECB              @Y30LPAW*
         XC    ECB(4),ECB                                         0217
*         INBUFAD=ADDR(INBUFR);     /* SET UP                 @Y30LPAW*
         LA    @F,INBUFR                                          0218
         ST    @F,WTORLIST                                        0218
*         WTORLNGT='06'X;           /* PARM LIST              @Y30LPAW*
         MVI   WTORLIST,X'06'                                     0219
*         ECBPTR=ADDR(ECB);         /*    FOR REPLY           @Y30LPAW*
         LA    @F,ECB                                             0220
         ST    @F,WTORLIST+4                                      0220
*         WTORPRFX=WTORLIST;        /*                        @Y30LPAW*
         MVC   0(8,@3),WTORLIST                                   0221
*         REPLYID=REPLYID&&REPLYID;   /* CLEAR IT             @Y30LPAW*
         XC    REPLYID(6),REPLYID                                 0222
*         GEN(PWTOR REG=(R3),WAIT=YES);  /* ISSUE WTOR        @Y30LPAW*
         PWTOR REG=(R3),WAIT=YES
         DS    0H
*         DSID=REPLYID;        /* SAVE REPLY                  @Y30LPAW*
         MVC   DSID(6),REPLYID                                    0224
*         IF DSID='CANCEL' THEN          /* REPLIED CANCEL?   @Y30LPAW*
         CLC   DSID(6),@C20                                       0225
         BC    07,@9E9                                            0225
*            DO;                    /* IF SO-DO THIS          @Y30LPAW*
*               RETCODE='08'X;           /* SET RETCODE 08    @Y30LPAW*
         LA    @F,X'08'                                           0227
*               GOTO CUTEST09;      /* AND GET OUT            @Y30LPAW*
         BC    15,CUTEST09                                        0228
*            END;                   /*                        @Y30LPAW*
*         DO ICALL=1 TO 3 BY 1;     /* LOOK FOR S8            @Y30LPAW*
@9E9     LA    @F,1                                               0230
         ST    @F,ICALL                                           0230
*            IF DSID(ICALL:ICALL+1)='S8' THEN  /* IN REPLY    @Y30LPAW*
@DO9E8   L     @C,ICALL                                           0231
         LA    @A,DSID-1(@C)                                      0231
         CLC   0(2,@A),@C21                                       0231
*            GO TO L1;              /*                        @Y30LPAW*
         BC    08,L1                                              0232
*         END;                      /*                        @Y30LPAW*
* L1:                               /*                        @Y30LPAW*
*         IF ICALL>3 THEN           /* IF NOT THERE,GO ISSUE  @Y30LPAW*
         L     @F,ICALL                                           0233
         AH    @F,@D2                                             0233
@DO9E7   ST    @F,ICALL                                           0233
         CH    @F,@D3                                             0233
         BC    12,@DO9E8                                          0233
L1       LA    @F,3                                               0234
         C     @F,ICALL                                           0234
*            GOTO CUTEST8B;         /* AGAIN                  @Y30LPAW*
         BC    04,CUTEST8B                                        0235
*         IDNUM(1:2)=DSID(ICALL+2:ICALL+3);  /* SAVE THE ID   @Y30LPAW*
         LR    @C,@F                                              0236
         A     @C,ICALL                                           0236
         LA    @8,2                                               0236
         A     @8,ICALL                                           0236
         SR    @C,@8                                              0236
         LA    @E,DSID-1(@8)                                      0236
         LA    @A,IDNUM                                           0236
         MVI   0(@A),C' '                                         0236
         MVC   1(001,@A),0(@A)                                    0236
         EX    @C,@MVC                                            0236
*         FROMADDR=ADDR(IDNUM);     /* IF IT IS,              @Y30LPAW*
         LA    @F,IDNUM                                           0237
         ST    @F,CONVERT+4                                       0237
*         TOADDR=ADDR(DSIDHEX2);    /*  SET UP TO CONVERT     @Y30LPAW*
         LA    @F,DSIDHEX+1                                       0238
         ST    @F,CONVERT+8                                       0238
*         FLGCNT='0002'X;           /*  THE ID FROM           @Y30LPAW*
         MVC   CONVERT+12(2),@X22                                 0239
*         R1=ADDR(CONVERT);         /* EBCDIC TO HEX          @Y30LPAW*
         LA    @1,CONVERT                                         0240
*         R15=TAB28;                /* GET CONVERT ADDR       @Y30LPAW*
         L     @F,TAB28                                           0241
*         GEN(BALR  R14,R15);       /*  AND GO THERE          @Y30LPAW*
         BALR  R14,R15
         DS    0H
*         IF R15^='00'X THEN        /*   IF CONVERT FAILS,    @Y30LPAW*
         LA    @0,X'00'                                           0243
         CR    @0,@F                                              0243
*            GO TO CUTEST8B;        /*   REISSUE MESSSAGE     @Y30LPAW*
         BC    07,CUTEST8B                                        0244
*         HEXDSID=DSIDHEX;          /* PUT DSID INTO SVC      @Y30LPAW*
         MVC   SVC59LST+4(2),DSIDHEX                              0245
*         EBCDSID=IDNUM;            /*   PARMLIST             @Y30LPAW*
         MVC   SVC59LST+6(2),IDNUM                                0246
*         MODID='AJ';                    /* MOVE IN ID        @Y60LPAW*
         MVC   SVC59LST+2(2),@C10                                 0247
*         R0=ADDR(ROPT);            /* SVC PARM LIST ADDR     @Y30LPAW*
         LA    @0,ROPT                                            0248
*         R1='0C'X;                 /* SVC CALL CODE          @Y30LPAW*
         LA    @1,X'0C'                                           0249
*         /*  ISSUE SVC 59 TO VARY OFF DSID                   @Y30LPAW*
*         GEN(SVC 59);              /*                        @Y30LPAW*
         SVC 59
         DS    0H
*         /*  TEST RETURN FROM SVC 59                         @Y30LPAW*
*         /*  R15='00'X MEANS OK                              @Y30LPAW*
*         /*  R15='04'X MEANS ONE DSID ALREADY VARIED OFF     @Y30LPAW*
*         /* OTHERWISE R15 HAS VARY ERROR CODE                @Y30LPAW*
*          IF R15=0 ×            /*IF NO ERROR                @Y03LPMY*
*             R15='78'X THEN     /*OR ALREADY OFF THEN        @Y03LPMY*
         LTR   @F,@F                                              0251
         BC    08,@9E4                                            0251
         LA    @0,X'78'                                           0251
         CR    @0,@F                                              0251
         BC    07,@9E3                                            0251
*            GOTO CUTEST09;         /* IF 0 GO AROUND         @Y30LPAW*
         BC    08,CUTEST09                                        0252
*         IF R15='04'X THEN         /* IS RETURN 04           @Y30LPAW*
@9E3     LA    @0,X'04'                                           0253
         CR    @0,@F                                              0253
         BC    07,@9E2                                            0253
*            DO;                    /* IF 04 DO THIS          @Y30LPAW*
*               R3=ADMSG472;        /* POINT TO MSG472I       @Y30LPAW*
         L     @3,36(0,@5)                                        0255
*               GEN(PWTO REG=(R3));   /* GO WRITE IT          @Y30LPAW*
         PWTO REG=(R3)
         DS    0H
*               RETCODE='08'X;      /*  SET RETURN CODE 08    @Y30LPAW*
         LA    @F,X'08'                                           0257
*               GOTO CUTEST09;      /* AND RETURN             @Y30LPAW*
         BC    15,CUTEST09                                        0258
*            END;                   /*                        @Y30LPAW*
*         /*     R15=VARY ERROR CODE--PUT IT IN MSG           @Y30LPAW*
*         /*         IFD470I AND PRINT IT                     @Y30LPAW*
*         SVCRCODE=R15;             /* SAVE RETURN CODE       @Y30LPAW*
@9E2     ST    @F,SVCRCODE                                        0260
*         FROMADDR=ADDR(VARYCODE);  /* SET UP TO              @Y30LPAW*
         LA    @F,SVCRCODE+2                                      0261
         ST    @F,CONVERT+4                                       0261
*         TOADDR=ADDR(EBCCODE);          /* CONVERT CODE TO   @Y30LPAW*
         LA    @F,EBCCODE                                         0262
         ST    @F,CONVERT+8                                       0262
*         FLGCNT='8002'X;           /*  EBCDIC                @Y30LPAW*
         MVC   CONVERT+12(2),@X24                                 0263
*         R1=ADDR(CONVERT);         /* POINT TO PARMLIST      @Y30LPAW*
         LA    @1,CONVERT                                         0264
*         R15=TAB28;                /* POINT TO CONVERT       @Y30LPAW*
         L     @F,TAB28                                           0265
*         GEN(BALR  R14,R15);       /* AND GO CONVERT         @Y30LPAW*
         BALR  R14,R15
         DS    0H
*         ERRCODE=EBCCODE3;              /* PUT IT IN MSG     @Y30LPAW*
         L     @C,32(0,@5)         
         MVC   31(3,@C),EBCCODE+1                                 0267
*         R3=ADMSG470;              /* POINT TO MSG 470I      @Y30LPAW*
         L     @3,32(0,@5)                                        0268
*         GEN(PWTO REG=(R3));       /*  AND GO WRITE IT       @Y30LPAW*
         PWTO REG=(R3)
         DS    0H
*         RETCODE='08'X;            /* SET RERURN CODE 08     @Y30LPAW*
         LA    @F,X'08'                                           0270
*                                   /*  AND RETURN            @Y30LPAW*
*
*
* CUTEST09:
*         DPMSGREI='0'B;                /* TURN OFF REM MSG FLGOY00427*
CUTEST09 NI    A00021,B'11111110'                                 0271
*
*         RETURN;                       /* RETURN TO OLT              *
*         END;                          /* END CU TEST MODULE         *
@EL01    L     @D,4(0,@D)                                         0273
         L     @E,12(0,@D)                                        0273
         LM    @0,@C,20(@D)                                       0273
         BCR   15,@E                                              0273
@DATA1   EQU   *
@0       EQU   00                  EQUATES FOR REGISTERS 0-15
@1       EQU   01
@2       EQU   02
@3       EQU   03
@4       EQU   04
@5       EQU   05
@6       EQU   06
@7       EQU   07
@8       EQU   08
@9       EQU   09
@A       EQU   10
@B       EQU   11
@C       EQU   12
@D       EQU   13
@E       EQU   14
@F       EQU   15
@D1      DC    H'-1'
@D2      DC    H'1'
@D3      DC    H'3'
@MVC     MVC   0(1,@A),0(@E)
@V1      DC    V(IFDMSGAJ)
         DS    0F
@X8      DC    X'0000FFFF'
@X9      DC    X'00000000'
@C10     DC    C'AJ'
@X13     DC    X'8004'
@C20     DC    C'CANCEL'
@C21     DC    C'S8'
@X22     DC    X'0002'
@X24     DC    X'8002'
@C18     DC    C'YES'
         DS    0D
@DATA    EQU   *
@SAV001  EQU   @DATA+00000000      72 BYTE(S) ON WORD
R0       EQU   00000000            FULLWORD POINTER REGISTER
R1       EQU   00000001            FULLWORD POINTER REGISTER
R2       EQU   00000002            FULLWORD POINTER REGISTER
R3       EQU   00000003            FULLWORD POINTER REGISTER
R4       EQU   00000004            FULLWORD POINTER REGISTER
R5       EQU   00000005            FULLWORD POINTER REGISTER
DEVTABPT EQU   00000006            FULLWORD POINTER REGISTER
R7       EQU   00000007            FULLWORD POINTER REGISTER
R14      EQU   00000014            FULLWORD POINTER REGISTER
R15      EQU   00000015            FULLWORD POINTER REGISTER
RC       EQU   00000015            FULLWORD POINTER REGISTER
RETCODE  EQU   00000015            FULLWORD POINTER REGISTER
DEVTABLE EQU   00000000            36 BYTE(S) ON WORD
A00000   EQU   DEVTABLE+00000000   12 BYTE(S)
FLAG1    EQU   DEVTABLE+00000012   1 BYTE(S)
A00001   EQU   DEVTABLE+00000012   1 BIT(S)
PRIMDEV  EQU   DEVTABLE+00000012   1 BIT(S)
A00002   EQU   DEVTABLE+00000012   3 BIT(S)
GRABDEV  EQU   DEVTABLE+00000012   1 BIT(S)
A00003   EQU   DEVTABLE+00000013   19 BYTE(S)
DVHEXAD  EQU   DEVTABLE+00000032   FULLWORD INTEGER
A00006   EQU   00000000            16 BYTE(S) ON WORD
A00007   EQU   A00006+00000000     1 BYTE(S)
CUTLEVL  EQU   A00006+00000001     1 BYTE(S)
A00008   EQU   A00006+00000002     2 BYTE(S)
CUTEXT   EQU   A00006+00000004     FULLWORD POINTER
CUCODE   EQU   A00006+00000008     1 BYTE(S)
NUMEXTS  EQU   A00006+00000009     1 BYTE(S)
A00009   EQU   A00006+00000010     2 BYTE(S)
CUDSMS   EQU   A00006+00000012     FULLWORD POINTER
SVCRCODE EQU   @DATA+00000072      4 BYTE(S)
A00014   EQU   SVCRCODE+00000000   2 BYTE(S)
VARYCODE EQU   SVCRCODE+00000002   2 BYTE(S)
CONVERT  EQU   @DATA+00000076      14 BYTE(S) ON WORD
         ORG   CONVERT+00000000
A00015   EQU   *                   2 BYTE(S)
         DC    X'0002'
A00016   EQU   *                   2 BYTE(S)
         DC    C'41'
FROMADDR EQU   CONVERT+00000004    FULLWORD POINTER
TOADDR   EQU   CONVERT+00000008    FULLWORD POINTER
FLGCNT   EQU   CONVERT+00000012    2 BYTE(S)
MYCUTEXT EQU   @DATA+00000092      FULLWORD POINTER
A00017   EQU   00000000            5 BYTE(S) ON WORD
CUBASE   EQU   A00017+00000000     FULLWORD INTEGER
CUFINISH EQU   A00017+00000004     1 BYTE(S)
CDSENTRY EQU   @DATA+00000096      20 BYTE(S) ON WORD
PARMLIST EQU   @DATA+00000116      16 BYTE(S) ON WORD
         ORG   PARMLIST+00000000
CDS1     EQU   *                   1 BYTE(S)
         DC    C'G'
CDSNAME  EQU   PARMLIST+00000001   7 BYTE(S)
LOADADDR EQU   PARMLIST+00000008   FULLWORD POINTER
PARMFLGS EQU   PARMLIST+00000012   1 BYTE(S)
A00018   EQU   PARMLIST+00000013   1 BYTE(S)
CDSLNGTH EQU   PARMLIST+00000014   HALFWORD INTEGER
DEVCDS   EQU   00000000            20 BYTE(S)
CDSDEVAD EQU   DEVCDS+00000000     4 BYTE(S)
CDSDVDSC EQU   DEVCDS+00000004     4 BYTE(S)
CDSSIZE  EQU   DEVCDS+00000008     1 BYTE(S)
CDSFLAGS EQU   DEVCDS+00000009     1 BYTE(S)
A00019   EQU   DEVCDS+00000009     1 BIT(S)
DEVSHARD EQU   DEVCDS+00000009     1 BIT(S)
MSGAJPTR EQU   00000000            40 BYTE(S) ON WORD
ADMSG244 EQU   MSGAJPTR+00000000   FULLWORD POINTER
ADSHRHDR EQU   MSGAJPTR+00000004   FULLWORD POINTER
ADONLHDR EQU   MSGAJPTR+00000008   FULLWORD POINTER
ADMSG127 EQU   MSGAJPTR+00000012   FULLWORD POINTER
ADMSG243 EQU   MSGAJPTR+00000016   FULLWORD POINTER
ADMSG399 EQU   MSGAJPTR+00000020   FULLWORD POINTER
ADVARYMS EQU   MSGAJPTR+00000024   FULLWORD POINTER
ADMSG469 EQU   MSGAJPTR+00000028   FULLWORD POINTER
ADMSG470 EQU   MSGAJPTR+00000032   FULLWORD POINTER
ADMSG472 EQU   MSGAJPTR+00000036   FULLWORD POINTER
MSG244   EQU   00000000            72 BYTE(S) ON WORD
A00023   EQU   MSG244+00000000     12 BYTE(S)
SHARDBUF EQU   MSG244+00000012     60 BYTE(S)
MSG127   EQU   00000000            31 BYTE(S) ON WORD
A00024   EQU   MSG127+00000000     12 BYTE(S)
MSG127I  EQU   MSG127+00000012     19 BYTE(S)
MSG243   EQU   00000000            72 BYTE(S) ON WORD
WTORPRFX EQU   MSG243+00000000     8 BYTE(S)
A00025   EQU   MSG243+00000008     12 BYTE(S)
A00026   EQU   MSG243+00000020     52 BYTE(S)
MSG140   EQU   00000000            44 BYTE(S)
MSG140I  EQU   MSG140+00000000     44 BYTE(S)
A00027   EQU   MSG140+00000000     12 BYTE(S)
VARYDEV  EQU   MSG140+00000012     8 BYTE(S)
A00028   EQU   MSG140+00000020     24 BYTE(S)
MSG470   EQU   00000000            34 BYTE(S) ON WORD
A00029   EQU   MSG470+00000000     31 BYTE(S)
ERRCODE  EQU   MSG470+00000031     3 BYTE(S)
WTORLIST EQU   @DATA+00000132      8 BYTE(S) ON WORD
INBUFAD  EQU   WTORLIST+00000000   FULLWORD POINTER
WTORLNGT EQU   WTORLIST+00000000   1 BYTE(S)
ECBPTR   EQU   WTORLIST+00000004   FULLWORD POINTER
MSG399   EQU   00000020            FULLWORD POINTER
MODFLAGS EQU   @DATA+00000140      1 BYTE(S)
SHRHEADR EQU   MODFLAGS+00000000   1 BIT(S)
ONLHEADR EQU   MODFLAGS+00000000   1 BIT(S)
SHARPTR  EQU   @DATA+00000144      FULLWORD POINTER
SHARDDEV EQU   00000000            4 BYTE(S)
BUFCOUNT EQU   @DATA+00000148      HALFWORD INTEGER
         ORG   @DATA+00000150
BUFMAX   EQU   *                   HALFWORD INTEGER
         DC    FL2'60'
NEWBASE  EQU   @DATA+00000152      FULLWORD INTEGER
CULAST   EQU   @DATA+00000156      FULLWORD INTEGER
ENDOFTAB EQU   @DATA+00000160      FULLWORD INTEGER
HEXADDR  EQU   @DATA+00000164      4 BYTE(S)
EXTLIMIT EQU   @DATA+00000168      1 BYTE(S)
ECB      EQU   @DATA+00000172      4 BYTE(S) ON WORD
EBCDICAD EQU   @DATA+00000176      8 BYTE(S)
A00032   EQU   EBCDICAD+00000000   1 BYTE(S)
EBCDICA7 EQU   EBCDICAD+00000001   7 BYTE(S)
DSID     EQU   @DATA+00000184      6 BYTE(S)
IDNUM    EQU   @DATA+00000190      2 BYTE(S)
DSIDHEX  EQU   @DATA+00000192      2 BYTE(S)
         ORG   DSIDHEX+00000000
DSIDHEX1 EQU   *                   1 BYTE(S)
         DC    X'08'
DSIDHEX2 EQU   DSIDHEX+00000001    1 BYTE(S)
EBCCODE  EQU   @DATA+00000194      4 BYTE(S)
A00033   EQU   EBCCODE+00000000    1 BYTE(S)
EBCCODE3 EQU   EBCCODE+00000001    3 BYTE(S)
ICALL    EQU   @DATA+00000200      FULLWORD INTEGER
         ORG   @DATA
         DS    00000204C
@TEMPS   DS    0F
AJCOM    IFDCOM
OLTEPSW3 EQU   CESWT3+00000000     1 BYTE(S)
A00004   EQU   OLTEPSW3+00000000   4 BIT(S)
SUSDEL   EQU   OLTEPSW3+00000000   1 BIT(S)
OLTEPSW7 EQU   CESWT7+00000000     1 BYTE(S) ON WORD
A00005   EQU   OLTEPSW7+00000000   7 BIT(S)
CUTSTFLG EQU   OLTEPSW7+00000000   1 BIT(S)
REPLY    EQU   INBUFR+00000000     3 BYTE(S)
REPLYID  EQU   INBUFR+00000000     6 BYTE(S)
A00010   EQU   ROPT-00000004       16 BYTE(S) ON WORD
A00011   EQU   A00010+00000000     2 BYTE(S)
MODNUM   EQU   A00010+00000002     2 BYTE(S)
CUBASEAD EQU   A00010+00000004     FULLWORD INTEGER
CURANGE  EQU   A00010+00000008     HALFWORD INTEGER
CUTCODE  EQU   A00010+00000010     HALFWORD INTEGER
A00012   EQU   A00010+00000010     1 BYTE(S)
CDE      EQU   A00010+00000011     1 BYTE(S)
MSGMODAJ EQU   A00010+00000012     FULLWORD POINTER
SVC59LST EQU   ROPT-00000004       8 BYTE(S) ON WORD
A00013   EQU   SVC59LST+00000000   2 BYTE(S)
MODID    EQU   SVC59LST+00000002   2 BYTE(S)
HEXDSID  EQU   SVC59LST+00000004   2 BYTE(S)
EBCDSID  EQU   SVC59LST+00000006   2 BYTE(S)
A00020   EQU   CESWTR+00000000     1 BYTE(S) ON WORD
RETAINAC EQU   A00020+00000000     1 BIT(S)
A00021   EQU   CESWTR2+00000000    1 BYTE(S) ON WORD
A00022   EQU   A00021+00000000     7 BIT(S)
DPMSGREI EQU   A00021+00000000     1 BIT(S)
A00030   EQU   TABLNGTH+00000002   1 BYTE(S)
CDSEQU   EQU   A00030+00000000     1 BIT(S)
RESENTB  EQU   A00030+00000000     1 BIT(S)
A00031   EQU   A00030+00000000     1 BIT(S)
@DATEND  EQU   *
@9FC     EQU   CUTEST2A
@9F9     EQU   CUTEST08
@9E4     EQU   CUTEST09
         END    ,(C'PL/S',1400,74344)
