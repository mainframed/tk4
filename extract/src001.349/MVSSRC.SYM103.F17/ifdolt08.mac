         TITLE '     IFDOLT08--OLD DPRINT  WRITE INTERFACE.'
         MACRO
&NAME    OLDCONV &TYPE,&FROM,&TO,&CNT
         LCLA  &FLAG
&NAME    LA    R14,R&SYSNDX .              RETURN ADDRESS
         L     R15,OLTTAB+12 .          TRANSIENT MANAGER ENTRY POINT
         CNOP  2,4 .                    BOUNDARY ALIGNMENT
         BALR  R1,R15  .                LINK TO TRANSIENT MANAGER
         DC    A(&FROM) .               FROM ADDRESS
         DC    A(&TO) .                 TO ADDRESS
         DC    A(*+4) .                 ADDRESS OF TYPE AND COUNT
         DC    XL2'00' .                BULL BYTES
         AIF   ('&TYPE' EQ 'EH').SKP1
&FLAG    SETA  32768
.SKP1    ANOP
         DC    AL2(&CNT+&FLAG) .        TYPE AND COUNT
R&SYSNDX DS    0H .                     RETURN POINT
         MEND
         TITLE '              IFDOLT08--OLD DPRINT  WRITE INTERFACE.'
         LCLA  &T,&SPN                                            0003
.@001    ANOP                                                     0003
IFDOLT08 CSECT ,                                                  0003
         BC    15,24(0,@F)
         DC    C'IFDOLT08 06 JUN 76'                             0003
         ST    @E,12(0,@D)                                        0003
         STM   @0,@C,20(@D)                                       0003
         BALR  @B,0                                               0003
@PSTART  DS    0H                                                 0003
         USING @PSTART+00000,@B                                   0003
         ST    @D,@SAV001+4                                       0003
         LA    @F,@SAV001                                         0003
         ST    @F,8(0,@D)                                         0003
         LR    @D,@F                                              0003
*   GEN(  USING CHASCT,2);               /* SET REG. 2 FOR DSECT      *
           USING CHASCT,2
         DS    0H
*   GENERATE DATA;
*         RESTRICT(2,3,5,6,7);           /* REGISTERS USED BY PROGRAM *
*         DCL R0 REG(0) PTR;
*         DCL R1 REG(1) PTR;             /* PARM LIST POINTER RECEIVED*
*         DCL R2 REG(2) PTR;             /* DSECT BASE REGISTER       *
*         DCL R3 REG(3) PTR;             /* ID AND ROUTINE NUMBER PTR *
*         DCL R4 REG(4) PTR;             /* CONTAIN SENSE COUNT       *
*         DCL R5 REG(5) PTR;             /* PRINT BUFFER POINTER      *
*         DCL R6 REG(6) PTR;             /* PARAMETER LIST POINTER    *
*         DCL R7 REG(7) PTR;                  /* WORK AREA POINTER    *
*         DCL R12 REG(12) PTR;
*         DCL R13 REG(13) PTR;           /* SAVE AREA POINTER         *
*         DCL R14 REG(14) PTR;                /* RETURN ADDR REGISTER *
*         DCL R15 REG(15) PTR;                /* RETURN CODE REGISTER *
*         DCL R9 REG(9) PTR;                  /* WORK REGISTER        *
*   GEN(EJECT);
         EJECT
         DS    0H
*         /************************************************************
*         /* THE FOLLOWING DEFINES AREAS REFERENCED EXTERNAL TO THIS  *
*         /* MODULE.                                                  *
*         /************************************************************
*
*         DCL CESWT2 CHAR(1) GENERATED;  /* INTERNAL SWITCHES         *
*         DCL TAB28 PTR GENERATED;       /* LINK POINTER              *
*         DCL DEVDEPAD PTR GENERATED;         /* DEVICE ADDRESS       *
*         DCL CESWT CHAR(1) GENERATED;        /* FLAG AREA            *
*         DCL PRTBUFR CHAR(124) GENERATED;    /* PRINT BUFFER         *
*         DECLARE
*             1 * BASED(ADDR(CESWT2)),
*               2 * BIT(2),
*               2 FECOND BIT(1);         /* FIRST ERROR CONDITION     *
*         DECLARE
*             1 * BASED(ADDR(CESWT)),    /* FLAG AREA                 *
*               2 * BIT(6),              /* NOT REFERENCED            *
*               2 FERINT BIT(1);         /* FIRST ERROR SWITCH        *
*         DCL CESWT6 CHAR(1) GENERATED;  /*                      M4504*
*         DECLARE
*             1 * BASED(DEVDEPAD),       /* DEVDEPAD POINTER TO AREA  *
*               2 * CHAR(6),             /* NOT REFERENCED            *
*               2 UNIT CHAR(2);          /* UNIT ADDRESS              *
*         DCL CHASCT CHAR(88) GENERATED; /* SECTION CONTROL TABLE     *
*         DECLARE
*             1 * BASED(ADDR(CHASCT)),   /* SECTION CONTROL TABLE ADR.*
*               2 * CHAR(2),             /* NOT REFERENCED            *
*               2 * CHAR(1),
*                 3 * BIT(7),            /* NOT REFERENCED            *
*                 3 FERCOM BIT(1),       /* FIRST ERROR FLAG          *
*               2 CHASCT3 CHAR(1),       /* FIRST ERROR SWITCH        *
*                 3 CHASCTB BIT(1),
*                 3 * BIT(5),            /* NOT REFERENCED            *
*                 3 ERRLPB BIT(1);       /* ERROR LOOP FLAG           *
*         DCL COMMINT PTR GENERATED;     /* ADDRESS OF COMMUNICATIONS *
*         DECLARE
*             1 BUFFERS BDY(DWORD),
*               2 * PTR,                 /* NOT USED                  *
*               2 FRMCON CHAR(1),        /* FORMS CONTROL CHARACTER   *
*               2 PRTBUFR1 CHAR(79),     /* BUFFER AREA               *
*               2 BUFFER2 CHAR(80);      /* BUFFER WORK AREA          *
*         DCL BUFR CHAR(79) BASED(R5);   /* BUFFER AREA               *
*  DCL CESWT5 CHAR(1) GENERATED;         /* OLTEP SWITCHES       M1390*
*  DCL 1 * BASED(ADDR(CESWT5)),          /* NA                   M1390*
*         2 * BIT(2),                    /* NA                   M1390*
*         2 FFEFLG BIT(1);               /* FIRST FIRST ERROR    M1390*
*   GEN(EJECT);
         EJECT
         DS    0H
*         /************************************************************
*         /* THE FOLLOWING MAP DESCRIBES THE PARAMETER LIST RECEIVED. *
*         /************************************************************
*
*         DECLARE
*             1 * BASED(R6),             /* REGISTER 6 CONTAINS THE   *
*               2 * CHAR(1),             /* ADDRESS OF THIS AREA.     *
*                 3 LASTFLG BIT(1),      /* LAST MESSAGE FLAG         *
*                 3 HEADFLG BIT(1),      /* HEADER REQUEST FLAG       *
*                 3 RSLTFLG BIT(1),      /* RESULT REQUEST FLAG       *
*                 3 OVRDFLG BIT(1),      /* OVER-RIDE REQUEST FLAG    *
*                 3 COMFLG BIT(1),       /* COMMENT REQUEST FLAG      *
*                 3 ERRFLG BIT(1),       /* ERROR MESSAGE FLAG        *
*                 3 * BIT(2),
*               2 FRMCNTL CHAR(1),       /* FORM CONTROL BYTE         *
*               2 * CHAR(1),
*               2 COUNT CHAR(1),         /* MESSAGE LENGTH            *
*               2 SUBCHK PTR;            /* POINTER TO SUBTASK OR     *
*                                        /* CHECKFIELDS               *
*   GEN(EJECT);
         EJECT
         DS    0H
*         /************************************************************
*         /* THE FOLLOWING MAP DESCRIBES THE SUBTASK AREA.            *
*         /************************************************************
*
*         DECLARE
*             1 * BASED(SUBCHK),         /* SUBCHK POINTS TO AREA.    *
*               2 * CHAR(1),             /* CONTAINS THE FOLLOWING    *
*                                        /* FLAGS:                    *
*                 3 DEVFLG BIT(1),       /* DEVICE INDICATOR          *
*                 3 LSTFLG BIT(1),       /* LAST PRINT INDICATOR      *
*                 3 * BIT(1),            /* NOT REFERENCED            *
*                 3 CCWFLG BIT(1),       /* CCW INDICATOR             *
*               2 LSTCCW CHAR(7);        /* CCW AREA                  *
*         DCL AREA CHAR(80) BASED(SUBCHK); /* COMMENT AREA            *
*   GEN(EJECT);
         EJECT
         DS    0H
*         /************************************************************
*         /* THE FOLLOWING MAP DESCRIBES THE CHECKFIELD AREA.         *
*         /************************************************************
*
*         DECLARE
*             1 * BASED(SUBCHK),
*               2 * CHAR(4),
*                 3 RELIF CHAR(1),       /* FLAG FIELDS INDICATING    *
*                                        /* AREAS TO BE PRINTED.      *
*                   4 RELAD BIT(1),      /* CSW COMMAND ADDRESS       *
*                   4 CC BIT(1),         /* CONDITION CODE            *
*                   4 CSWS1 BIT(1),      /* 1ST BYTE OF CSW STATUS    *
*                   4 CSWS2 BIT(1),      /* 2ND BYTE OF CSW STATUS    *
*                   4 CSWC BIT(1),       /* CSW COUNT                 *
*                   4 SNS BIT(1),        /* SENSE DATA                *
*                   4 * BIT(1),          /* NOT REFERENCED            *
*                   4 DATA BIT(1),       /* DATA FLAG                 *
*                 3 SNGLFLG BIT(1),      /* SINGLE LINE OF PRINT      *
*                 3 * BIT(7),            /* NOT USED                  *
*                 3 DTACNT CHAR(1),      /* DATA COUNT                *
*                 3 SCOUNT CHAR(1),      /* SENSE COUNT         Y02906*
*               2 TECBAD PTR,            /* TECB ADDRESS              *
*               2 EXPDINFO CHAR(16),     /* THIS FIELD CONTAINS       *
*                                        /* EXPECTED - CONDITION CODE *
*                                        /* CSW AND SENSE.            *
*               2 REDTADR PTR,           /* POINTER TO RECEIVED DATA  *
*               2 EXPDTADR PTR;          /* POINTER TO EXPECTED DATA  *
*         DCL RECEIV CHAR(256) BASED(REDTADR);  /* RECEIVED DATA AREA *
*         DCL EXPECT CHAR(256) BASED(EXPDTADR); /* EXPECTED DATA AREA *
*   GEN(EJECT);
         EJECT
         DS    0H
*         /************************************************************
*         /* THE FOLLOWING DEFINES INTERNAL WORK AREAS.               *
*         /************************************************************
*
*         DCL WKARA1 CHAR(96);           /* WORK AREA                 *
*         DCL WKAREA CHAR(96) BASED(R7); /* REGISTER 7 POINTS TO AREA *
*         DECLARE
*             1 * BASED(R13),            /* REG.13 POINTS TO SAVE AREA*
*               2 * PTR,                 /* NOT REFERENCED            *
*               2 OLTSVAD PTR;           /* POINTER TO OLT            *
*         DECLARE
*             1 * BASED(OLTSVAD),
*               2 * CHAR(32),            /* NOT REFERENCED            *
*               2 IDAD PTR;              /* POINTER TO OLT ID         *
*         DECLARE
*             1 * BASED(IDAD),
*               2 * CHAR(76),            /* NOT REFERENCED            *
*               2 ID CHAR(8),            /* OLT ID                    *
*               2 ROUTINE CHAR(1);       /* OLT ROUTINE NUMBER        *
*         DCL XLATE1 CHAR(10) INIT('0123456789');  /* TRANSLATE TABLE *
*   GEN(EJECT);
         EJECT
         DS    0H
*         /************************************************************
*         /* THE FOLLOWING MAPS DESCRIBE AREA'S REFERENCED FOR OPER-  *
*         /* ATOR COMMUNICATIONS                                      *
*         /************************************************************
*
*         DCL IFDMSG08 EXT ENTRY;        /* IFDOLT08'S MESSAGE MODULE *
*         DCL MSGMOD08 PTR INIT(ADDR(IFDMSG08)); /* PTR. TO IFDMSG08  *
*         DECLARE
*             1 * BASED(MSGMOD08),
*               2 MSG129 PTR;            /* ADDR OF MESSAGE IFD129I   *
*         DECLARE
*             1 * BASED(MSG129),         /* MESSAGE IFD129I           *
*               2 * CHAR(39),            /* MESSAGE                   *
*               2 MSGID CHAR(6),         /* OLT ID                    *
*               2 * CHAR(1),             /* BLANK                     *
*               2 MSGRTN CHAR(2),        /* OLT ROUTINE NUMBER        *
*               2 * CHAR(6),             /* MESSAGE                   *
*               2 MSGUNIT CHAR(3);       /* UNIT ADDRESS              *
*   GEN(EJECT);
         EJECT
         DS    0H
*         /************************************************************
*         /* THE FOLLOWING MAP DESCRIBES THE TECB AREA                *
*         /************************************************************
*
*         DECLARE
*             1 * BASED(TECBAD),         /* TECB PTR IN CHECKFLD AREA *
*               2 * CHAR(4),             /* NOT REFERENCED            *
*               2 RCVDINFO CHAR(16);     /* THIS FIELD CONTAINS       *
*                                        /* RECEIVED - CONDITION CODE *
*                                        /* CSW AND SENSE.            *
*   GEN(EJECT);
         EJECT
         DS    0H
*         /************************************************************
*         /* THE FOLLOWING CODE WILL INITIALIZE REGISTERS AND DETER-  *
*         /* MINE THE FUNCTION OR FUNCTIONS TO BE PERFORMED.          *
*         /************************************************************
*
*         R6 = R1;                       /* SET PARAMETER LIST PTR.   *
         LR    @6,@1                                              0061
* PRT000:
*         R5 = ADDR(PRTBUFR1);           /* SET PRINT BUFFER PTR.     *
PRT000   LA    @5,BUFFERS+5                                       0062
*         R7 = ADDR(WKARA1);             /* SET WORK AREA PTR.        *
         LA    @7,WKARA1                                          0063
*          PRTBUFR(1:1)=' ';    /* CLEAR BUFFER               @ZA08978*
         MVI   PRTBUFR,C' '                                       0064
*          PRTBUFR(2:124)=PRTBUFR(1:123);                   /*@ZA08978*
         MVC   PRTBUFR+1(123),PRTBUFR                             0065
*          BUFFERS(1:1)=' ';    /* CLEAR BUFFERS              @ZA08978*
         MVI   BUFFERS,C' '                                       0066
*          BUFFERS(2:164)=BUFFERS(1:163);                   /*@ZA08978*
         MVC   BUFFERS+1(163),BUFFERS                             0067
*         IF FRMCNTL = 'D9'X THEN        /* FORMS CONTROL - RESTORE   *
         CLI   1(@6),X'D9'                                        0068
         BC    07,@9FF                                            0068
*           DO;                          /* DO THE FOLLOWING:         *
*           PRTBUFR(1:1) = '1B'X;        /* SET RESTORE CONTROL       *
         MVI   PRTBUFR,X'1B'                                      0070
*   GEN(  PWRT  SIZE=80);                /* INVOKE PRINT ROUTINE      *
           PWRT  SIZE=80
         DS    0H
*           GO TO PRT0002;
         BC    15,PRT0002                                         0072
*           END;                         /* END OF RESTORE ROUTINE    *
*         IF FRMCNTL = 'F3'X THEN        /* FORMS CONTROL - SPACE 3   *
@9FF     CLI   1(@6),X'F3'                                        0074
         BC    07,@9FE                                            0074
*           DO;                          /* DO THE FOLLOWING:         *
*           FRMCON = '19'X;              /* SET SPACE 3 CONTROL       *
         MVI   BUFFERS+4,X'19'                                    0076
*           GO TO PRT0001;
         BC    15,PRT0001                                         0077
*           END;                         /* END OF SPACE 3 ROUTINE    *
*         IF FRMCNTL = 'F2'X THEN        /* FORMS CONTROL - SPACE 2   *
@9FE     CLI   1(@6),X'F2'                                        0079
         BC    07,@9FD                                            0079
*           DO;                          /* DO THE FOLLOWING:         *
*           FRMCON = '11'X;              /* SET SPACE 2 CONTROL       *
         MVI   BUFFERS+4,X'11'                                    0081
*           GO TO PRT0001;
         BC    15,PRT0001                                         0082
*           END;                         /* END OF SPACE 2 ROUTINE    *
* PRT0002:
*         FRMCON = '09'X;                /* SET DEFAULT OF SPACE 1    *
@9FD     EQU   *                                                  0084
PRT0002  MVI   BUFFERS+4,X'09'                                    0084
* PRT0001:
*         IF HEADFLG = '1'B THEN         /* REQUEST FOR HEADER PRINT  *
PRT0001  TM    0(@6),B'01000000'                                  0085
*           GO TO PRT003;                /* YES-GO TO HEADER ROUTINE  *
         BC    01,PRT003                                          0086
*         IF RSLTFLG = '1'B THEN         /* REQUEST FOR RESULT PRINT  *
         TM    0(@6),B'00100000'                                  0087
*           GO TO PRT010;                /* YES-GO TO RESULT ROUTINE  *
         BC    01,PRT010                                          0088
*         IF COMFLG = '1'B THEN          /* REQUEST FOR COMMENT PRINT *
         TM    0(@6),B'00001000'                                  0089
*           GO TO PRT022;                /* YES-GO TO COMMENT ROUTINE *
         BC    01,PRT022                                          0090
*         BUFR(2:4) = 'BUG';             /* NO- INDICATE ERROR        *
         MVC   1(3,@5),@C10                                       0091
*         PRTBUFR(1:80) = BUFFERS(5:84); /* SET PRINT BUFFER          *
         MVC   PRTBUFR(80),BUFFERS+4                              0092
*   GEN(  PWRT  SIZE=80);                /* INVOKE PRINT ROUTINE      *
           PWRT  SIZE=80
         DS    0H
*
* PRT001:
*  IF FFEFLG='1'B THEN                   /* CHECK SWITCH         M1390*
PRT001   TM    A00012,B'00100000'                                 0094
*    GOTO PRT002;                        /* PREVIOUS FIRST ERROR M1390*
         BC    01,PRT002                                          0095
*         IF FERCOM = '0'B THEN          /* 1ST ERROR COMMUNICATION   *
         TM    A00006+2,B'00000001'                               0096
*           GO TO PRT002;                /* GO CHECK ERROR LOOP       *
         BC    08,PRT002                                          0097
*         IF CHASCTB = '0'B THEN         /* FIRST ERROR COMMUNICATION *
         TM    A00006+3,B'10000000'                               0098
*           GO TO PRT002;                /* GO CHECK ERROR LOOP       *
         BC    08,PRT002                                          0099
* PRT001C:
*         FERINT = '1'B;                 /* SET FIRST ERROR SWITCH    *
PRT001C  OI    A00002,B'00000010'                                 0100
*         MSGID = ID(1:6);               /* SET OLT ID IN MESSAGE     *
         L     @4,4(0,@D)          
         L     @4,32(0,@4)         A00027                         0101
         L     @C,MSGMOD08                                        0101
         L     @C,0(0,@C)          A00031                         0101
         MVC   39(6,@C),76(@4)                                    0101
*         R9 = ROUTINE;                  /* SETUP FOR TRANSLATE       *
         SR    @9,@9                                              0102
         IC    @9,84(0,@4)                                        0102
*   GENERATE;
         CVD   R9,BUFFER2+4
         UNPK  BUFFER2(2),BUFFER2+10(2)
         NI    BUFFER2+1,X'0F'
         TR    BUFFER2+1(1),XLATE1
         DS    0H
*         MSGRTN = BUFFER2(1:2);         /* SET OLT ROUTINE IN MESSAGE*
         MVC   46(2,@C),BUFFERS+84                                0104
*         BUFFER2(9:10) = UNIT;          /* SET UNIT ADDRESS IN BUFFER*
         L     @8,DEVDEPAD                                        0105
         MVC   BUFFERS+92(2),6(@8)                                0105
*         R9 = ADDR(LINK1);              /* SET LINK ADDRESS POINTER  *
         LA    @9,LINK1                                           0106
*         GO TO CONVERT1;                /* GO TO CONVERT ROUTINE     *
         BC    15,CONVERT1                                        0107
* LINK1:
*         MSGUNIT = BUFFER2(28:30);      /* SET UNIT ADDRESS IN MSG.  *
LINK1    L     @4,MSGMOD08                                        0108
         L     @4,0(0,@4)          A00031                         0108
         MVC   54(3,@4),BUFFERS+111                               0108
*         R9 = MSG129;                   /* SET MESSAGE POINTER       *
         L     @C,MSGMOD08                                        0109
         L     @9,0(0,@C)                                         0109
*   GEN(  PWTO  REG=(R9));               /* INVOKE PARALLEL PRINT RTN *
           PWTO  REG=(R9)
         DS    0H
*  FFEFLG='1'B;                          /* FIRST FIRST ERROR    M1390*
         OI    A00012,B'00100000'                                 0111
* PRT001B:
*         FECOND = '1'B;                 /* SET FIRST ERROR CONDITION *
PRT001B  OI    A00000,B'00100000'                                 0112
*  CESWT6=CESWT6&'7F'X;                  /* CLEAR 1ST BIT IN SW  M4504*
         NI    CESWT6,X'7F'                                       0113
*         R15 = TAB28;                   /* SET LINK POINTER          *
         L     @F,TAB28                                           0114
*   GEN;
         L     R13,4(R13)          RESTORE REGISTERS
         L     R14,12(R13)         FOR RETURN TO TRANS. MANAGER
         LM    R0,R12,20(R13)
         DS    0H
*         GOTO R15;                      /* RETURN TO TRANS. MANAGER  *
         BCR   15,@F                                              0116
*
* PRT002:
*         IF ERRLPB = '0'B THEN          /* IF ERROR LOOP IS NOT ON   *
PRT002   TM    A00006+3,B'00000010'                               0117
*           GO TO FINISH;                /* GO TO EXIT ROUTINE        *
         BC    08,FINISH                                          0118
*         CHASCT3 = CHASCT3 & 'DF'X;     /* RESET CATASTROPHIC FLAG   *
         NI    A00006+3,X'DF'                                     0119
*         GO TO FINISH;             /* GO TO EXIT ROUTINE             *
         BC    15,FINISH                                          0120
*   GEN(EJECT);
         EJECT
         DS    0H
*         /************************************************************
*         /* THE FOLLOWING ROUTINE WILL PRINT HEADING REQUESTS        *
*         /************************************************************
* PRT003:
*         IF OVRDFLG = '1'B THEN         /* OVER-RIDE REQUEST         *
PRT003   TM    0(@6),B'00010000'                                  0122
*           GO TO PRT009;                /* YES - GO CHECK LAST ENTRY *
         BC    01,PRT009                                          0123
*         IF ERRFLG = '0'B THEN          /* ERROR PRINT REQUEST       *
         TM    0(@6),B'00000100'                                  0124
*           GO TO PRT004;                /* NO- GO TO HEADER SETUP    *
         BC    08,PRT004                                          0125
*         BUFR(1:1) = '*';               /* INDICATE ERROR MESSAGE    *
         MVI   0(@5),C'*'                                         0126
*         R5 = R5 + 1;                   /* INCREMENT PRT BUFFER PTR  *
         AH    @5,@D1                                             0127
* PRT004:
*         BUFR(1:8) = ID;                /* SET ID IN HEADER          *
PRT004   L     @4,4(0,@D)          
         L     @4,32(0,@4)         A00027                         0128
         MVC   0(8,@5),76(@4)                                     0128
*         R5 = R5 + 9;                   /* INCREMENT PRT BUFFER PTR  *
         AH    @5,@D2                                             0129
*         R9 = ROUTINE;                  /* SETUP FOR TRANSLATE       *
         SR    @9,@9                                              0130
         IC    @9,84(0,@4)                                        0130
*   GENERATE;
         CVD   R9,BUFFER2+4
         UNPK  BUFFER2(2),BUFFER2+10(2)
         NI    BUFFER2+1,X'0F'
         TR    BUFFER2+1(1),XLATE1
         DS    0H
*         BUFR(1:2) = BUFFER2(1:2);      /* SET ROUTINE NUMBER IN MSG.*
         MVC   0(2,@5),BUFFERS+84                                 0132
*         R5 = R5 + 3;                   /* INCREMENT PRT BUFFER PTR  *
         AH    @5,@D3                                             0133
*         BUFFER2(2:8) = LSTCCW;         /* GET LISTING & CCW ADDRESS *
         L     @C,4(0,@6)          
         MVC   BUFFERS+85(7),1(@C)                                0134
*         BUFFER2(9:10) = UNIT;          /* GET UNIT ADDRESS          *
         L     @8,DEVDEPAD                                        0135
         MVC   BUFFERS+92(2),6(@8)                                0135
*         R9 = ADDR(LINK2);              /* SET LINK ADDRESS POINTER  *
         LA    @9,LINK2                                           0136
*         GO TO CONVERT1;                /* GO TO CONVERT ROUTINE     *
         BC    15,CONVERT1                                        0137
* LINK2:
*         IF LSTFLG = '0'B THEN          /* IS LISTING ADDRESS PRESENT*
LINK2    L     @4,4(0,@6)          
         TM    0(@4),B'01000000'                                  0138
*           GO TO PRT005;                /* NO-GO CHECK FOR CCW       *
         BC    08,PRT005                                          0139
*         BUFR(1:3) = 'IC-';             /* SET PREFIX IN MESSAGE     *
         MVC   0(3,@5),@C15                                       0140
*         BUFR(4:8) = BUFFER2(14:18);    /* SET LISTING ADDRESS IN MSG*
         MVC   3(5,@5),BUFFERS+97                                 0141
*         R5 = R5 + 9;                   /* INCREMENT PRT BUFFER PTR  *
         AH    @5,@D2                                             0142
* PRT005:
*         IF CCWFLG = '0'B THEN          /* CCW PRESENT               *
PRT005   L     @4,4(0,@6)          
         TM    0(@4),B'00010000'                                  0143
*           GO TO PRT006;                /* NO-GO CHECK FOR DEVICE    *
         BC    08,PRT006                                          0144
*         BUFR(1:4) = 'CCW-';            /* SET PREFIX IN MESSAGE     *
         MVC   0(4,@5),@C16                                       0145
*         BUFR(5:9) = BUFFER2(22:26);    /* SET CCW IN MESSAGE        *
         MVC   4(5,@5),BUFFERS+105                                0146
*         R5 = R5 + 10;                  /* INCREMENT PRT BUFFER PTR  *
         AH    @5,@D4                                             0147
* PRT006:
*         IF DEVFLG = '0'B THEN          /* DEVICE PRESENT            *
PRT006   L     @4,4(0,@6)          
         TM    0(@4),B'10000000'                                  0148
*           GO TO PRT008;                /* NO-GO CHECK               *
         BC    08,PRT008                                          0149
*         BUFR(1:9) = 'I/O ADDR-';       /* SET I/O ADDRESS PREFIX    *
         MVC   0(9,@5),@C17                                       0150
*         BUFR(10:12) = BUFFER2(28:30);  /* SET UNIT ID               *
         MVC   9(3,@5),BUFFERS+111                                0151
*         R5 = R5+13;                    /* INCREMENT PRT BUFFER PTR. *
         AH    @5,@D5                                             0152
* PRT008:
*         PRTBUFR(1:80) = BUFFERS(5:84); /* SET PRINT BUFFER          *
PRT008   MVC   PRTBUFR(80),BUFFERS+4                              0153
*   GEN(  PWRT  SIZE=80);                /* INVOKE PRINT ROUTINE      *
           PWRT  SIZE=80
         DS    0H
* PRT009:
*         IF LASTFLG = '1'B THEN         /* LAST ENTRY                *
PRT009   TM    0(@6),B'10000000'                                  0155
*           GO TO PRT001;                /* YES-GO CHECK FIRST ERROR  *
         BC    01,PRT001                                          0156
*         R6 = R6 + 8;                   /* SET POINTER TO NEXT ENTRY *
         AH    @6,@D6                                             0157
*           GO TO PRT000;                /* GO BACK TO THE BEGINNING  *
         BC    15,PRT000                                          0158
*   GEN(EJECT);
         EJECT
         DS    0H
*         /************************************************************
*         /* THE FOLLOWING ROUTINE WILL PRINT RESULT REQUESTS         *
*         /************************************************************
* PRT010:
*         IF OVRDFLG = '1'B THEN         /* OVER-RIDE ON              *
PRT010   TM    0(@6),B'00010000'                                  0160
*           GO TO PRT009;                /* YES-CHECK FOR LAST ENTRY  *
         BC    01,PRT009                                          0161
*         R5 = ADDR(PRTBUFR1);           /* SET PRINT BUFFER POINTER  *
         LA    @5,BUFFERS+5                                       0162
*         BUFR(1:5) = 'RCVD ';           /* SET RECEIVED PREFIX       *
         MVC   0(5,@5),@C18                                       0163
*         BUFFER2(1:5) = 'XPCTD';        /* SET EXPECTED PREFIX       *
         MVC   BUFFERS+84(5),@C19                                 0164
*         R5 = R5+6;                     /* INCREMENT PRT BUFFER PTR  *
         AH    @5,@D7                                             0165
*         WKAREA(1:16) = RCVDINFO;       /* SET RECEIVED CONDITION    *
         L     @4,4(0,@6)          
         L     @4,4(0,@4)          A00021                         0166
         MVC   0(16,@7),4(@4)                                     0166
*                                        /* CODE,CSW AND SENSE IN     *
*                                        /* WORK AREA.                *
*         WKAREA(17:32) = EXPDINFO;      /* SET EXPECTED CONDITION    *
         L     @C,4(0,@6)          
         MVC   16(16,@7),8(@C)                                    0167
*                                        /* CODE,CSW AND SENSE IN     *
*                                        /* WORK AREA.                *
*         R9 = ADDR(LINK3);              /* SET LINK ADDRESS POINTER  *
         LA    @9,LINK3                                           0168
*         GO TO CONVERT2;                /* GO TO CONVERT ROUTINE 2   *
         BC    15,CONVERT2                                        0169
* LINK3:
*         IF CC = '0'B THEN              /* CONDITION CODE RELEVANT   *
LINK3    L     @4,4(0,@6)          
         TM    0(@4),B'01000000'                                  0170
*           GO TO PRT011;                /* NO-GO CHECK CSW           *
         BC    08,PRT011                                          0171
*         BUFR(1:3) = 'CC-';             /* SET CONDITION CODE PREFIX *
         MVC   0(3,@5),@C20                                       0172
*         BUFR(4:4) = WKAREA(33:33);     /* RECEIVED AND EXPECTED IN  *
         MVC   3(1,@5),32(@7)                                     0173
*         BUFR(83:83) = WKAREA(66:66);   /* PRINT BUFFER              *
         MVC   82(1,@5),65(@7)                                    0174
*         R5 = R5+5;                     /* INCREMENT PRT BUFFER PTR  *
         AH    @5,@D8                                             0175
* PRT011:
*         R9 = ADDR(RELIF);              /* SET FLAG FIELD ADDRESS    *
PRT011   L     @4,4(0,@6)          
         LR    @9,@4                                              0176
*   GEN;
         TM    0(R9),X'B8'              CSW RELEVANT
         BZ    PRT016                      GO CHECK SENSE
         DS    0H
*         BUFR(1:6) = 'CSW-XX';          /* SET CSW RECEIVED AND      *
         MVC   0(6,@5),@C21                                       0178
*         BUFR(80:85) = 'CSW-XX';        /* EXPECTED PREFIX IN BUF    *
         MVC   79(6,@5),@C21                                      0179
*
* PRT012:
*         R5 = R5+7;                     /* INCREMENT PRT BUFFER PTR  *
PRT012   AH    @5,@D9                                             0180
*         BUFR(80:96)='XXXXXX XXXX XXXX '; /* ASSUME TEMPORARY FIELDS *
         MVC   79(17,@5),@C22                                     0181
*         BUFR(1:6) = WKAREA(35:40);     /* SET ADDRESS IN PRT BUFFER *
         MVC   0(6,@5),34(@7)                                     0182
*         BUFR(8:11) = WKAREA(41:44);    /* SET STATUS IN PRT BUFFER  *
         MVC   7(4,@5),40(@7)                                     0183
*         BUFR(13:16) = WKAREA(45:48);   /* SET COUNT IN PRT BUFFER   *
         MVC   12(4,@5),44(@7)                                    0184
*         IF SNGLFLG = '1'B THEN         /* SINGLE LINE PRINT         *
         L     @4,4(0,@6)          
         TM    1(@4),B'10000000'                                  0185
*           GO TO PRT015;                /* YES-GO CHECK SENSE        *
         BC    01,PRT015                                          0186
*         IF RELAD = '0'B THEN           /* CSW ADDRESS RELEVANT      *
         TM    0(@4),B'10000000'                                  0187
*           GO TO PRT013;                /* YES-GO CHECK STATUS       *
         BC    08,PRT013                                          0188
*         BUFR(80:85) = WKAREA(67:72);   /* SET ADDRESS IN PRT BUFFER *
         MVC   79(6,@5),66(@7)                                    0189
* PRT013:
*         IF CSWS1 = '0'B &              /* STATUS RELEVANT           *
*           CSWS2 = '0'B THEN
PRT013   L     @4,4(0,@6)          
         TM    0(@4),B'00100000'                                  0190
         BC    05,@9FC                                            0190
         TM    0(@4),B'00010000'                                  0190
*             GO TO PRT014;              /* YES-GO CHECK COUNT        *
         BC    10,PRT014                                          0191
*         BUFR(87:90) = WKAREA(73:76);   /* SET STATUS IN PRT BUFFER  *
@9FB     EQU   *                                                  0192
@9FC     MVC   86(4,@5),72(@7)                                    0192
* PRT014:
*         IF CSWC = '0'B THEN            /* CSW COUNT RELEVANT        *
PRT014   L     @4,4(0,@6)          
         TM    0(@4),B'00001000'                                  0193
*           GO TO PRT015;                /* YES-GO CHECK SENSE        *
         BC    08,PRT015                                          0194
*         BUFR(92:95) = WKAREA(77:80);   /* SET COUNT IN PRT BUFFER   *
         MVC   91(4,@5),76(@7)                                    0195
* PRT015:
*         R5 = R5+17;                    /* INCREMENT PRT BUFFER PTR  *
PRT015   AH    @5,@D10                                            0196
* PRT016:
*         IF SNS = '0'B THEN             /* SENSE RELEVANT            *
PRT016   L     @4,4(0,@6)          
         TM    0(@4),B'00000100'                                  0197
*           GO TO PRT018;                /* YES-GO CHECK DATA         *
         BC    08,PRT018                                          0198
*         BUFR(1:4) = 'SNS-';            /* SET SENSE PREFIX IN BUFFER*
         MVC   0(4,@5),@C23                                       0199
*         R5 = R5+4;                     /* INCREMENT PRT BUFFER PTR  *
         AH    @5,@D11                                            0200
* PRT017:
*         RESTRICT(R4);                  /* RESTRICT SENSE COUNT REG. *
*         DO
*           R4 = SCOUNT TO 1             /* SET SENSE COUNT     Y02906*
*           BY - 1;
PRT017   L     @C,4(0,@6)          
         SR    @F,@F                                              0202
         IC    @F,3(0,@C)                                         0202
         LTR   @4,@F                                              0202
         BC    12,@DO9F9                                          0202
*           BUFR(1:2) = WKAREA(49:50);   /* MOVE SENSE RECEIVED       *
@DO9FA   MVC   0(2,@5),48(@7)                                     0203
*           BUFR(80:81) = WKAREA(81:82); /* MOVE SENSE EXPECTED       *
         MVC   79(2,@5),80(@7)                                    0204
*           R5 = R5+3;                   /* STEP PRINT BUFFER POINTER *
         AH    @5,@D3                                             0205
*           R7 = R7+2;                   /* STEP WORK AREA POINTER    *
         AH    @7,@D12                                            0206
*         END;                           /* END OF SENSE FORMAT RTN.  *
*         RELEASE(R4);                   /* RELEASE SENSE COUNT REG.  *
         BCT   @4,@DO9FA                                          0207
@DO9F9   EQU   *                                                  0207
* PRT018:
*         IF DATA = '0'B THEN            /* DATA RELEVANT             *
PRT018   L     @4,4(0,@6)          
         TM    0(@4),B'00000001'                                  0209
*           GO TO PRT021;                /* YES-GO TO PRINT ROUTINE   *
         BC    08,PRT021                                          0210
*         BUFR(1:5) = 'DATA-';           /* SET DATA PREFIX           *
         MVC   0(5,@5),@C24                                       0211
*         R5 = R5+5;                     /* INCREMENT PRT BUFFER PTR  *
         AH    @5,@D8                                             0212
*         RESTRICT(R4,R9);
*         R4 = ADDR(BUFFER2);            /* SET MAXIMUM BUFFER SIZE   *
         LA    @4,BUFFERS+84                                      0214
*         R4 = R4-(R5);                  /* SET BUFFER RESIDUE        *
         LR    @F,@5                                              0215
         LCR   @F,@F                                              0215
         AR    @4,@F                                              0215
*         R4 = (R4-8)/2;                 /* DIVIDE RESIDUE BY 2       *
         LR    @E,@4                                              0216
         SH    @E,@D6                                             0216
         SRDA  @E,32                                              0216
         LA    @0,2                                               0216
         DR    @E,@0                                              0216
         LR    @4,@F                                              0216
*         R9 = DTACNT;                   /* SET DATA CNT              *
         L     @8,4(0,@6)          
         SR    @9,@9                                              0217
         IC    @9,2(0,@8)                                         0217
*         IF R4 ^< R9 THEN               /* DATA COUNT > RESIDUE      *
         CR    @4,@9                                              0218
*           GO TO PRT019;                /* NO-GO TO DATA CONVERT     *
         BC    10,PRT019                                          0219
*         R9 = R4;                       /* USED RESIDUE AS DATA CNT  *
         LR    @9,@4                                              0220
* PRT019:
*         R9 = R9 + R9;                  /* DOUBLE COUNT              *
PRT019   AR    @9,@9                                              0221
*         WKAREA(1:30) = RECEIV(1:30);   /* GET RECEIVED DATA         *
         L     @8,4(0,@6)          
         L     @8,24(0,@8)         A00021                         0222
         MVC   0(30,@7),0(@8)                                     0222
*         R4 = R9;
         LR    @4,@9                                              0223
*         R9 = ADDR(LINK4);              /* SET LINK POINTER          *
         LA    @9,LINK4                                           0224
*         GO TO CONVERT2;                /* GO TO CONVERT ROUTINE     *
         BC    15,CONVERT2                                        0225
* LINK4:
*         BUFR(1:R4) = WKAREA(33:R4);    /* SET DATA IN PRINT BUFFER  *
LINK4    LA    @E,32(0,@7)                                        0226
         LR    @8,@4                                              0226
         BCTR  @8,0                                               0226
         LR    @A,@5                                              0226
         EX    @8,@MVC                                            0226
*         IF SNGLFLG = '1'B THEN         /* SINGLE LINE OF PRINT      *
         L     @8,4(0,@6)          
         TM    1(@8),B'10000000'                                  0227
*           GO TO PRT020;                /* YES-GO PRINT LINE         *
         BC    01,PRT020                                          0228
*         WKAREA(1:30) = EXPECT(1:30);   /* SET EXPECTED DATA IN WKARA*
         L     @C,28(0,@8)         A00021                         0229
         MVC   0(30,@7),0(@C)                                     0229
*         R9 = ADDR(LINK5);              /* SET LINK ADDRESS          *
         LA    @9,LINK5                                           0230
*         GO TO CONVERT2;                /* GO TO CONVERT ROUTINE     *
         BC    15,CONVERT2                                        0231
* LINK5:
*         R5 = R5+79;                    /* SET DATA MOVE POINTER     *
LINK5    AH    @5,@D13                                            0232
*         BUFR(1:R4) = WKAREA(33:R4);    /* SET EXPECTED DATA IN BUFR *
         LA    @E,32(0,@7)                                        0233
         LR    @8,@4                                              0233
         BCTR  @8,0                                               0233
         LR    @A,@5                                              0233
         EX    @8,@MVC                                            0233
*         R5 = R5-(79);                  /* RESET DATA MOVE POINTER   *
         LA    @F,79                                              0234
         LCR   @F,@F                                              0234
         AR    @5,@F                                              0234
* PRT020:
*         R5 = R4+R5+1;                  /* AJUST PRINT BUFFER POINTER*
PRT020   LA    @F,1                                               0235
         AR    @F,@5                                              0235
         AR    @F,@4                                              0235
         LR    @5,@F                                              0235
* PRT021:
*         PRTBUFR(1:80) = BUFFERS(5:84); /* SET PRINT BUFFER          *
PRT021   MVC   PRTBUFR(80),BUFFERS+4                              0236
*   GEN(  PWRT  SIZE=80);                /* INVOKE PRINT ROUTINE      *
           PWRT  SIZE=80
         DS    0H
*         IF SNGLFLG = '1'B THEN         /* SINGLE LINE PRINT         *
         L     @8,4(0,@6)          
         TM    1(@8),B'10000000'                                  0238
*           GO TO PRT009;                /* YES-CHECK LAST ENTRY      *
         BC    01,PRT009                                          0239
*         BUFFERS(6:77) = BUFFER2(1:72); /* SET NEXT LINE OF PRINT    *
         MVC   BUFFERS+5(72),BUFFERS+84                           0240
*         GO TO PRT008;                  /* GO PROCESS                *
         BC    15,PRT008                                          0241
*   GEN(EJECT);
         EJECT
         DS    0H
*         /************************************************************
*         /* THE FOLLOWING ROUTINE WILL PRINT COMMENT REQUESTS        *
*         /************************************************************
* PRT022:
*         IF OVRDFLG = '1'B THEN         /* OVER-RIDE ON              *
PRT022   TM    0(@6),B'00010000'                                  0243
*           GO TO PRT009;                /* YES-GO CHECK LAST ENTRY   *
         BC    01,PRT009                                          0244
*         IF COUNT ^> '50'X THEN         /* COUNT > 80                *
         CLI   3(@6),X'50'                                        0245
*           GO TO PRT023;                /* NO-SETUP FOR PRINT        *
         BC    12,PRT023                                          0246
*         COUNT = '50'X;                 /* SET COUNT TO 80           *
         MVI   3(@6),X'50'                                        0247
* PRT023:
*         R9 = COUNT;                    /* SET NEEDED COUNT          *
PRT023   SR    @9,@9                                              0248
         IC    @9,3(0,@6)                                         0248
*         BUFR(1:R9) = AREA(1:R9);         /* SET PRINT BUFFER        *
         L     @8,4(0,@6)          
         LR    @E,@8                                              0249
         LR    @C,@9                                              0249
         BCTR  @C,0                                               0249
         LR    @A,@5                                              0249
         EX    @C,@MVC                                            0249
*         GO TO PRT008;                    /* GO TO PRINT ROUTINE     *
         BC    15,PRT008                                          0250
*   GEN(EJECT);
         EJECT
         DS    0H
*         /************************************************************
*         /* THE FOLLOWING ROUTINE CONTAIN COMMON CONVERT MACRO'S     *
*         /* REFERENCED BY THIS MODULE.                               *
*         /************************************************************
* CONVERT1:                                   /* CONVERT BUFFER2 FROM *
*   GEN(  OLDCONV HE,BUFFER2,BUFFER2+10,10);
CONVERT1   OLDCONV HE,BUFFER2,BUFFER2+10,10
         DS    0H
*         GO TO R9;
         BCR   15,@9                                              0253
*
* CONVERT2:                                   /*CONVERT WKAREA FROM   *
*   GEN(  OLDCONV HE,WKARA1,WKARA1+32,32);
CONVERT2   OLDCONV HE,WKARA1,WKARA1+32,32
         DS    0H
*         GO TO R9;
         BCR   15,@9                                              0255
* FINISH:
*         RETURN;                        /* RETURN TO CALLER          *
*         END   IFDOLT08;
@EL01    L     @D,4(0,@D)                                         0257
         L     @E,12(0,@D)                                        0257
         LM    @0,@C,20(@D)                                       0257
         BCR   15,@E                                              0257
@DATA1   EQU   *
@0       EQU   00                  EQUATES FOR REGISTERS 0-15
@1       EQU   01
@2       EQU   02
@3       EQU   03
@4       EQU   04
@5       EQU   05
@6       EQU   06
@7       EQU   07
@8       EQU   08
@9       EQU   09
@A       EQU   10
@B       EQU   11
@C       EQU   12
@D       EQU   13
@E       EQU   14
@F       EQU   15
@D1      DC    H'1'
@D2      DC    H'9'
@D3      DC    H'3'
@D4      DC    H'10'
@D5      DC    H'13'
@D6      DC    H'8'
@D7      DC    H'6'
@D8      DC    H'5'
@D9      DC    H'7'
@D10     DC    H'17'
@D11     DC    H'4'
@D12     DC    H'2'
@D13     DC    H'79'
@MVC     MVC   0(1,@A),0(@E)
         DS    0F
@C16     DC    C'CCW-'
@C23     DC    C'SNS-'
@C21     DC    C'CSW-XX'
@C10     DC    C'BUG'
@C15     DC    C'IC-'
@C17     DC    C'I/O ADDR-'
@C18     DC    C'RCVD '
@C19     DC    C'XPCTD'
@C20     DC    C'CC-'
@C22     DC    C'XXXXXX XXXX XXXX '
@C24     DC    C'DATA-'
         DS    0D
@DATA    EQU   *
@SAV001  EQU   @DATA+00000000      72 BYTE(S) ON WORD
X        EQU   00000000            FULLWORD INTEGER
R0       EQU   00000000            FULLWORD POINTER REGISTER
R1       EQU   00000001            FULLWORD POINTER REGISTER
R2       EQU   00000002            FULLWORD POINTER REGISTER
R3       EQU   00000003            FULLWORD POINTER REGISTER
R4       EQU   00000004            FULLWORD POINTER REGISTER
R5       EQU   00000005            FULLWORD POINTER REGISTER
R6       EQU   00000006            FULLWORD POINTER REGISTER
R7       EQU   00000007            FULLWORD POINTER REGISTER
R12      EQU   00000012            FULLWORD POINTER REGISTER
R13      EQU   00000013            FULLWORD POINTER REGISTER
R14      EQU   00000014            FULLWORD POINTER REGISTER
R15      EQU   00000015            FULLWORD POINTER REGISTER
R9       EQU   00000009            FULLWORD POINTER REGISTER
A00004   EQU   00000000            8 BYTE(S) ON WORD
A00005   EQU   A00004+00000000     6 BYTE(S)
UNIT     EQU   A00004+00000006     2 BYTE(S)
BUFFERS  EQU   @DATA+00000072      164 BYTE(S) ON DWORD
A00011   EQU   BUFFERS+00000000    FULLWORD POINTER
FRMCON   EQU   BUFFERS+00000004    1 BYTE(S)
PRTBUFR1 EQU   BUFFERS+00000005    79 BYTE(S)
BUFFER2  EQU   BUFFERS+00000084    80 BYTE(S)
BUFR     EQU   00000000            79 BYTE(S)
A00014   EQU   00000000            8 BYTE(S) ON WORD
A00015   EQU   A00014+00000000     1 BYTE(S)
LASTFLG  EQU   A00014+00000000     1 BIT(S)
HEADFLG  EQU   A00014+00000000     1 BIT(S)
RSLTFLG  EQU   A00014+00000000     1 BIT(S)
OVRDFLG  EQU   A00014+00000000     1 BIT(S)
COMFLG   EQU   A00014+00000000     1 BIT(S)
ERRFLG   EQU   A00014+00000000     1 BIT(S)
A00016   EQU   A00014+00000000     2 BIT(S)
FRMCNTL  EQU   A00014+00000001     1 BYTE(S)
A00017   EQU   A00014+00000002     1 BYTE(S)
COUNT    EQU   A00014+00000003     1 BYTE(S)
SUBCHK   EQU   A00014+00000004     FULLWORD POINTER
A00018   EQU   00000000            8 BYTE(S) ON WORD
A00019   EQU   A00018+00000000     1 BYTE(S)
DEVFLG   EQU   A00018+00000000     1 BIT(S)
LSTFLG   EQU   A00018+00000000     1 BIT(S)
A00020   EQU   A00018+00000000     1 BIT(S)
CCWFLG   EQU   A00018+00000000     1 BIT(S)
LSTCCW   EQU   A00018+00000001     7 BYTE(S)
AREA     EQU   00000000            80 BYTE(S)
A00021   EQU   00000000            32 BYTE(S) ON WORD
A00022   EQU   A00021+00000000     4 BYTE(S)
RELIF    EQU   A00021+00000000     1 BYTE(S)
RELAD    EQU   A00021+00000000     1 BIT(S)
CC       EQU   A00021+00000000     1 BIT(S)
CSWS1    EQU   A00021+00000000     1 BIT(S)
CSWS2    EQU   A00021+00000000     1 BIT(S)
CSWC     EQU   A00021+00000000     1 BIT(S)
SNS      EQU   A00021+00000000     1 BIT(S)
A00023   EQU   A00021+00000000     1 BIT(S)
DATA     EQU   A00021+00000000     1 BIT(S)
SNGLFLG  EQU   A00021+00000001     1 BIT(S)
A00024   EQU   A00021+00000001     7 BIT(S)
DTACNT   EQU   A00021+00000002     1 BYTE(S)
SCOUNT   EQU   A00021+00000003     1 BYTE(S)
TECBAD   EQU   A00021+00000004     FULLWORD POINTER
EXPDINFO EQU   A00021+00000008     16 BYTE(S)
REDTADR  EQU   A00021+00000024     FULLWORD POINTER
EXPDTADR EQU   A00021+00000028     FULLWORD POINTER
RECEIV   EQU   00000000            256 BYTE(S)
EXPECT   EQU   00000000            256 BYTE(S)
WKARA1   EQU   @DATA+00000236      96 BYTE(S)
WKAREA   EQU   00000000            96 BYTE(S)
A00025   EQU   00000000            8 BYTE(S) ON WORD
A00026   EQU   A00025+00000000     FULLWORD POINTER
OLTSVAD  EQU   A00025+00000004     FULLWORD POINTER
A00027   EQU   00000000            36 BYTE(S) ON WORD
A00028   EQU   A00027+00000000     32 BYTE(S)
IDAD     EQU   A00027+00000032     FULLWORD POINTER
A00029   EQU   00000000            85 BYTE(S) ON WORD
A00030   EQU   A00029+00000000     76 BYTE(S)
ID       EQU   A00029+00000076     8 BYTE(S)
ROUTINE  EQU   A00029+00000084     1 BYTE(S)
         ORG   @DATA+00000332
XLATE1   EQU   *                   10 BYTE(S)
         DC    C'0123456789'
         ORG   @DATA+00000344
MSGMOD08 EQU   *                   FULLWORD POINTER
         DC    VL4(IFDMSG08)
A00031   EQU   00000000            4 BYTE(S) ON WORD
MSG129   EQU   A00031+00000000     FULLWORD POINTER
A00032   EQU   00000000            57 BYTE(S) ON WORD
A00033   EQU   A00032+00000000     39 BYTE(S)
MSGID    EQU   A00032+00000039     6 BYTE(S)
A00034   EQU   A00032+00000045     1 BYTE(S)
MSGRTN   EQU   A00032+00000046     2 BYTE(S)
A00035   EQU   A00032+00000048     6 BYTE(S)
MSGUNIT  EQU   A00032+00000054     3 BYTE(S)
A00036   EQU   00000000            20 BYTE(S) ON WORD
A00037   EQU   A00036+00000000     4 BYTE(S)
RCVDINFO EQU   A00036+00000004     16 BYTE(S)
         ORG   @DATA
         DS    00000368C
@TEMPS   DS    0F
DSECT08  IFDCOM
A00000   EQU   CESWT2+00000000     1 BYTE(S) ON WORD
A00001   EQU   A00000+00000000     2 BIT(S)
FECOND   EQU   A00000+00000000     1 BIT(S)
A00002   EQU   CESWT+00000000      1 BYTE(S) ON WORD
A00003   EQU   A00002+00000000     6 BIT(S)
FERINT   EQU   A00002+00000000     1 BIT(S)
A00006   EQU   CHASCT+00000000     4 BYTE(S) ON WORD
A00007   EQU   A00006+00000000     2 BYTE(S)
A00008   EQU   A00006+00000002     1 BYTE(S)
A00009   EQU   A00006+00000002     7 BIT(S)
FERCOM   EQU   A00006+00000002     1 BIT(S)
CHASCT3  EQU   A00006+00000003     1 BYTE(S)
CHASCTB  EQU   A00006+00000003     1 BIT(S)
A00010   EQU   A00006+00000003     5 BIT(S)
ERRLPB   EQU   A00006+00000003     1 BIT(S)
A00012   EQU   CESWT5+00000000     1 BYTE(S) ON WORD
A00013   EQU   A00012+00000000     2 BIT(S)
FFEFLG   EQU   A00012+00000000     1 BIT(S)
@DATEND  EQU   *
FINISH   EQU   @EL01
         END   IFDOLT08,(C'PL/S',1400,76158)
