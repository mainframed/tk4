         TITLE 'IFDOLT24 READD'
         TITLE 'IFDOLT24 - READD'
         LCLA  &T,&SPN                                            0002
.@001    ANOP                                                     0002
IFDOLT24 CSECT ,                                                  0002
         BC    15,24(0,@F)
         DC    C'IFDOLT24 18 MAY 76'                             0002
         ST    @E,12(0,@D)                                        0002
         STM   @0,@C,20(@D)                                       0002
         BALR  @B,0                                               0002
@PSTART  DS    0H                                                 0002
         USING @PSTART+00000,@B                                   0002
         ST    @D,@SAV001+4                                       0002
         LA    @F,@SAV001                                         0002
         ST    @F,8(0,@D)                                         0002
         LR    @D,@F                                              0002
*         GEN(USING CHASCT,2);
         USING CHASCT,2
         DS    0H
*         GENERATE DATA;
*         DCL MODLEV CHAR(1) INIT('02'X);  /*MODULE LEVEL*/
*         DCL 1 PARMLIST BASED(R3),      /*PARAMETER LIST*/
*           3 * CHAR(1),
*           3 MACROLEV CHAR(1),          /*MACRO LEVEL*/
*           3 * CHAR(2),                 /*MACRO ID*/
*           3 ADINAREA PTR,              /*ADDRESS OF INPUT AREA*/
*           3 SIZE FIXED,                /*SIZE OF INPUT AREA*/
*           3 VOLSERNO CHAR(6),          /*VOLUME SERIAL NUMBER OF
*                                          DATASET TO BE READ*/
*           3 FLAGS CHAR(1),
*             5 * BIT(6),
*             5 BKSPACE BIT(1),          /*BACKSPACE REQUIRED IF ON*/
*             5 RESETB BIT(1),           /*RESET REQUIRED IF ON */
*           3 NUMB CHAR(1);              /*NUMBER OF RECORDS TO
*                                          BACKSPACE*/
*         DCL RDCBPTR PTR GENERATED;     /*PTR TO DCB*/
*         DCL 1 * BASED(DCBPTR),
*           3 * CHAR(17),
*           3 DEVTYPE CHAR(1),           /*DEVICE TYPE*/
*             5 * BIT(2),
*             5 DASDKEY BIT(1),          /*DASD INDICATOR*/
*             5 * BIT(5),
*           3 * CHAR(19),
*           3 DXLST PTR(24),             /*SPACE FOR EXIT LIST ADDR*/
*           3 * CHAR(8),
*           3 * CHAR(1),
*             5 * BIT(3),
*             5 OPENFLG BIT(1),          /*INDICATES SUCCESSFUL OPEN*/
*             5 * BIT(4),
*           3 * CHAR(43),
*             5 * CHAR(1),
*             5 DMACRF CHAR(1),          /*MACRO FORM                 *
*             5 * CHAR(41);
*         DCL CESWT8 CHAR(1) GENERATED;  /*CE SWITCHES         SA54318*
*         DCL 1 * CHAR(1) BASED(ADDR(CESWT8)), /*CE SWITCH8    SA54318*
*           2 * BIT(3),                  /*  N/A               SA54318*
*           2 READDCHK BIT(1),           /* NEW SECT FLG       SA54318*
*             3 * BIT(1);                /*  N/A               SA54318*
*         DCL READDSV CHAR(6) GENERATED; /*SAVE VOLUME SERIAL NUMBER
*                                          HERE*/
*         DCL JFCBAREA CHAR(176) BDY(WORD);   /*SPACE FOR JFCB*/
*         DCL 1 * BASED(ADDR(JFCBAREA)),  /*DSECT OF JFCB*/
*         3 DATASNM CHAR(44),
*         3 * CHAR(22),
*             5 * CHAR(8),
*             5 * CHAR(1),
*               7 * BIT(2),
*               7 SYSINBIT BIT(1),       /* INDICATES CARD INPUT      *
*               7 * BIT(5),
*             5 * CHAR(13),
*           3 * CHAR(1),
*             5 * BIT(6),
*             5 SLABEL BIT(1),           /*STANDARD LABEL FLAG*/
*             5 * BIT(1),
*           3 * CHAR(27),
*             5 * CHAR(20),
*             5 JINDBIT CHAR(1),         /* DATA SET INDICATOR        *
*             5 JBUFNO CHAR(1),          /* NUMBER OF BUFFERS         *
*             5 * CHAR(1),
*             5 JBUFL CHAR(2),           /*LENGTH OF BUFFERS          *
*             5 * CHAR(1),
*             5 JMODE CHAR(1),           /* MODE,STACKER BYTE         *
*           3 TAPEDEN CHAR(1),           /* TAPE DENSITY              *
*           3 * CHAR(23),
*             5 * CHAR(5),
*             5 JRECFM CHAR(1),          /* RECORD FORMAT             *
*             5 * CHAR(1),
*             5 JBLKSZ CHAR(2),          /* BLOCK SIZE                *
*             5 JRECL  CHAR(2),          /* RECORD LENGTH             *
*             5 * CHAR(11),
*           5 JVOLNUM CHAR(1),           /* NUMBER OF VOLUMES         *
*           3 VOLSERL CHAR(6),           /*VOLUME SERIAL NUMBER*/
*           3 * CHAR(53);
*         DCL 1 XITLIST BDY(WORD),
*           3 * CHAR(1) INIT('87'X),    /* OPEN FLAGS          YM3407*/
*           3 * PTR(24) INIT(ADDR(JFCBAREA));
*         DCL CKEND CHAR(5) BASED(BUFREG);
*         DCL 1 LABEL1 CHAR(80),
*           3 VOLAB CHAR(4),
*           3 LABELNUM CHAR(6),
*           3 * CHAR(70);
*         DCL READDMOD PTR GENERATED;
*         DCL 1 INTFLAG CHAR(1)          /* INTERNAL FLAGS            *
*               INIT('00'X),             /* INITIAL VALUE             *
*           2 FIRSTRD BIT(1),            /* FIRST READ THIS DATASET   *
*           2 * BIT(1);                  /* N/A                       *
*         DCL PATCH CHAR(80) BDY(HWORD) INIT(' ');
*         R3=R1;                         /*SAVE PARAMETER LIST PTR*/
         LR    @3,@1                                              0033
*         IF MACROLEV < '02'X            /*CHECK MACRO LEVEL AND MODULE
*                                          LEVEL FOR COMPATIBILITY*/
*              × MODLEV < MACROLEV THEN
         CLI   1(@3),X'02'                                        0034
         BC    04,@9FF                                            0034
         CLC   MODLEV(1),1(@3)                                    0034
         BC    10,@9FE                                            0034
*           GO TO RTRN4;
         BC    05,RTRN4                                           0035
*         READAD=READDMOD;
@9FE     L     @8,READDMOD                                        0036
*         DCBPTR=RDCBPTR;                /*PUT PTR TO DCB IN R7*/
         L     @7,RDCBPTR                                         0037
*         DXLST=ADDR(XITLIST);           /*PUT EXIT LIST ADDR IN DCB*/
         LA    @F,XITLIST                                         0038
         ST    @F,@TEMP4                                          0038
         MVC   37(3,@7),@TEMP4+1                                  0038
*         IF OPENFLG = '0'B THEN         /* IF THE DATASET IS @ZA08983*
         TM    48(@7),B'00010000'                                 0039
*            GO TO NOCLOSE;              /* NOT OPEN, DONT    @ZA08983*
         BC    08,NOCLOSE                                         0040
*                                        /* CLOSE IT.         @ZA08983*
*         IF READDSV='000000000000'X THEN
         CLC   READDSV(6),@X3                                     0041
*           GOTO NOCLOSE;
         BC    08,NOCLOSE                                         0042
*         IF READDSV=VOLSERNO THEN
         CLC   READDSV(6),12(@3)                                  0043
*           GOTO CKRESET;                /*SAME DATASET-NO CLOSE
*                                          NEEDED*/
         BC    08,CKRESET                                         0044
*         GEN(CLOSE   ((DCBPTR)));       /*CLOSE DATA SET*/
         CLOSE   ((DCBPTR))
         DS    0H
*  NOCLOSE:
*         READDSV=VOLSERNO;              /*SAVE VOL SERIAL NUMBER IN
*                                          COMMON AREA*/
NOCLOSE  MVC   READDSV(6),12(@3)                                  0046
*         READDCHK = '0'B;               /* FIRST READD CALL   SA54318*
         NI    A00015,B'11101111'                                 0047
*         GEN(RDJFCB  ((DCBPTR),(INPUT))); /*READ THE JFCB*/
         RDJFCB  ((DCBPTR),(INPUT))
         DS    0H
*           IF SYSINBIT='1'B THEN
         TM    A00018+52,B'00100000'                              0049
*           GOTO SKIPCHG;                /* CARD INPUT                *
         BC    01,SKIPCHG                                         0050
*         IF JVOLNUM='01'X THEN
         CLI   A00018+117,X'01'                                   0051
*           GOTO TAPEIN;                 /*BRANCH FOR TAPE INPUT      *
         BC    08,TAPEIN                                          0052
*           JBUFNO='01'X;                /*NUMBER OF BUFFERS          *
         MVI   A00018+88,X'01'                                    0053
*           JBUFL='0050'X;               /*BUFFER LENGTH              *
         MVC   A00018+90(2),@X6                                   0054
*         JMODE='41'X;                   /* EBCDIC MODE,STACKER 1     *
         MVI   A00018+93,X'41'                                    0055
*           JRECFM='80'X;                /*RECORD FORMAT              *
         MVI   A00018+100,X'80'                                   0056
*           JBLKSZ='0050'X;              /*BLOCK SIZE                 *
         MVC   A00018+102(2),@X6                                  0057
*           JRECL='0050'X;               /*RECORD LENGTH              *
         MVC   A00018+104(2),@X6                                  0058
*         DMACRF='20'X;                  /*NO CNTRL                   *
         MVI   50(@7),X'20'                                       0059
*           GOTO SKIPCHG;
         BC    15,SKIPCHG                                         0060
*  TAPEIN:
*         DMACRF='22'X;                  /* CNTRL USED                *
TAPEIN   MVI   50(@7),X'22'                                       0061
*         VOLSERL=VOLSERNO;              /*PUT VOLUME SERIAL NUMBER IN
*                                          JFCB*/
         MVC   A00018+118(6),12(@3)                               0062
*         DATASNM='OLT.READD.DATASET';
         MVC   A00018(17),@C11                                    0063
         MVI   A00018+17,C' '                                     0063
         MVC   A00018+18(26),A00018+17                            0063
*  SKIPCHG:
*         GEN(OPEN  ((DCBPTR),(INPUT)),TYPE=J);  /*OPEN DATA SET*/
SKIPCHG  OPEN  ((DCBPTR),(INPUT)),TYPE=J
         DS    0H
*         IF OPENFLG ='0'B THEN
         TM    48(@7),B'00010000'                                 0065
         BC    05,@9FD                                            0065
*           DO;                          /*ERROR IN OPEN*/
*           RTRNCODE=4;                  /* RETURN 04                 *
         LA    @F,4                                               0067
*           READDSV=READDSV && READDSV;  /* CLEAR COMMON AREA    M1371*
         XC    READDSV(6),READDSV                                 0068
*           FIRSTRD='0'B;                /* RESET FLAG                *
         NI    INTFLAG,B'01111111'                                0069
*           RETURN;
         BC    15,@EL01                                           0070
*           END;
*         FIRSTRD='1'B;                  /* SET FIRST READ FLAG       *
@9FD     OI    INTFLAG,B'10000000'                                0072
*         IF SLABEL^='1'B THEN
         TM    A00018+66,B'00000010'                              0073
*           GOTO RTRN4;                 /* NONSTANDARD LABEL RETURN 4 *
         BC    12,RTRN4                                           0074
*         IF DEVTYPE^='81'X & DEVTYPE ^= '83'X THEN         /* OX01064*
         CLI   17(@7),X'81'                                       0075
         BC    08,@9FC                                            0075
         CLI   17(@7),X'83'                                       0075
         BC    08,@9FB                                            0075
*           DO;                          /*CARD OR DASD INPUT*/
*           READDSV= READDSV && READDSV; /* ZERO VOL SER SAVE AREA    *
         XC    READDSV(6),READDSV                                 0077
*           COUNT=80;                    /*SIZE OF INPUT AREA*/
         LA    @4,80                                              0078
*           BUFREG=ADDR(LABEL1);         /*ADDR OF INPUT AREA*/
         LA    @6,LABEL1                                          0079
*         GEN(BALR  14,8);
         BALR  14,8
         DS    0H
*           SAVE15=8;               /*COMPARE VALUE FOR RTRNCODE */
         LA    @5,8                                               0081
*           IF RTRNCODE=SAVE15 THEN
         CR    @F,@5                                              0082
*             RETURN;               /*ERROR RETURN */
         BC    08,@EL01                                           0083
*           IF RTRNCODE^=0 THEN
@9FA     LTR   @F,@F                                              0084
*             GOTO RTRN4;                /* WRONG DATA SET            *
         BC    07,RTRN4                                           0085
*           IF VOLAB^='VOL1' THEN
         CLC   LABEL1(4),@C14                                     0086
*             GOTO RTRN4;                /* WRONG DATA SET            *
         BC    07,RTRN4                                           0087
*           IF LABELNUM^= VOLSERNO THEN  /* CHECK DSNAME              *
         CLC   LABEL1+4(6),12(@3)                                 0088
*             GOTO RTRN4;                /* WRONG DATA SET            *
         BC    07,RTRN4                                           0089
*         GEN(BALR  14,8);
         BALR  14,8
         DS    0H
*           SAVE15=8;               /*COMPARE VALUE FOR RTRNCODE */
         LA    @5,8                                               0091
*           IF RTRNCODE=SAVE15 THEN
         CR    @F,@5                                              0092
*             RETURN;               /*ERROR RETURN */
         BC    08,@EL01                                           0093
*           IF RTRNCODE^=0 THEN
@9F9     LTR   @F,@F                                              0094
*             GOTO RTRN4;                /* WRONG DATA SET            *
         BC    07,RTRN4                                           0095
*           IF VOLAB^='HDR1' THEN
         CLC   LABEL1(4),@C15                                     0096
*             GOTO RTRN4;                /* WRONG DATA SET            *
         BC    07,RTRN4                                           0097
*           READDSV=VOLSERNO;            /* SAVE VOL SER NO.          *
         MVC   READDSV(6),12(@3)                                  0098
*           GOTO CKRESET;
         BC    15,CKRESET                                         0099
*           END;
*         IF SLABEL ='0'B THEN
@9FB     EQU   *                                                  0101
@9FC     TM    A00018+66,B'00000010'                              0101
*           GOTO RTRN4;                  /*NOT A STANDARD LABEL*/
         BC    08,RTRN4                                           0102
*  CKRESET:
*         IF RESETB= '1'B ×              /*RESET CALL OR NEW   SA54318*
*            READDCHK = '1'B THEN        /* SECTION CALL       SA54318*
CKRESET  TM    18(@3),B'00000001'                                 0103
         BC    01,@9F8                                            0103
         TM    A00015,B'00010000'                                 0103
         BC    12,@9F7                                            0103
*           DO;
*           IF DEVTYPE='81'X × DEVTYPE = '83'X THEN     /*     0X01064*
@9F8     CLI   17(@7),X'81'                                       0105
         BC    08,@9F6                                            0105
         CLI   17(@7),X'83'                                       0105
         BC    07,@9F5                                            0105
*             DO;
@9F6     EQU   *                                                  0106
*             GEN(CLOSE  ((DCBPTR),REREAD),TYPE=T); /*RESET TO BEGINNIN
*                                                     OF TAPE*/
         CLOSE  ((DCBPTR),REREAD),TYPE=T
         DS    0H
*         RTRNCODE=0;
         SR    @F,@F                                              0108
*         READDCHK = '0'B;               /* RESET NEW SECT FLAGSA54318*
         NI    A00015,B'11101111'                                 0109
*             GOTO PROCESS;              /*CONTINUE WITH READ*/
         BC    15,PROCESS                                         0110
*             END;
*  RTRN4:
*           RTRNCODE=4;                  /*NOT TAPE OR DASD-RETURN*/
@9F5     EQU   *                                                  0112
RTRN4    LA    @F,4                                               0112
*         FIRSTRD='0'B;                  /* RESET FLAG                *
         NI    INTFLAG,B'01111111'                                0113
*           RETURN;
         BC    15,@EL01                                           0114
*           END;
*         IF BKSPACE='1'B THEN           /*CHECK BACKSPACE PARAMETER*/
@9F7     TM    18(@3),B'00000010'                                 0116
         BC    12,@9F4                                            0116
*           DO;
*           IF DEVTYPE='81'X × DEVTYPE = '83'X THEN     /*     0X01064*
         CLI   17(@7),X'81'                                       0118
         BC    08,@9F3                                            0118
         CLI   17(@7),X'83'                                       0118
         BC    07,@9F2                                            0118
*             DO;
*         SAVE15=0;                      /* ZERO SAVE15 */
@9F3     SR    @5,@5                                              0120
*         COUNT=NUMB;
         SR    @4,@4                                              0121
         IC    @4,19(0,@3)                                        0121
*             GEN(CNTRL  (DCBPTR),BSR,(COUNT));    /*BACKSPACE */
         CNTRL  (DCBPTR),BSR,(COUNT)
         DS    0H
*             IF SAVE15 ^=0 THEN
         LTR   @5,@5                                              0123
         BC    08,@9F1                                            0123
*               DO;
* RTRN8:                                 /* ERROR RETURN              *
*         FIRSTRD='0'B;                  /* RESET FLAG                *
RTRN8    NI    INTFLAG,B'01111111'                                0125
*               RTRNCODE=8;
         LA    @F,8                                               0126
*               RETURN;
         BC    15,@EL01                                           0127
*               END;
*             RTRNCODE=0;
@9F1     SR    @F,@F                                              0129
*             GOTO PROCESS;              /*CONTINUE WITH READ*/
*             END;
*           GOTO RTRN4;                  /*NOT TAPE OR DASD-RETURN*/
*           END;
*  PROCESS:
*         BUFREG=ADINAREA;               /*PUT BUFFER ADDR IN R6*/
@9F4     EQU   *                                                  0134
PROCESS  L     @6,4(0,@3)                                         0134
*         IF BUFREG=0 THEN RETURN;
         LTR   @6,@6                                              0135
         BC    08,@EL01                                           0136
*         COUNT=SIZE;                    /*PUT SIZE OF BUFFER IN R4*/
@9F0     L     @4,8(0,@3)                                         0137
*         IF COUNT =0 THEN               /* IF BUFFER SIZE =0         *
         LTR   @4,@4                                              0138
*           GOTO RTRN8;                  /* THEN ERROR RETURN         *
         BC    08,RTRN8                                           0139
*         GEN(BALR  14,8);
         BALR  14,8
         DS    0H
*         SAVE15=RTRNCODE;               /*SAVE REGISTER 15*/
         LR    @5,@F                                              0141
*         IF SAVE15=0 THEN
         LTR   @5,@5                                              0142
         BC    07,@9EF                                            0142
*           DO;
*         IF DEVTYPE^='81'X & DEVTYPE ^= '83'X THEN         /* OX01064*
         CLI   17(@7),X'81'                                       0144
         BC    08,@9EE                                            0144
         CLI   17(@7),X'83'                                       0144
         BC    08,@9ED                                            0144
*             DO;                        /*CARD OR DASD INPUT*/
*             IF CKEND='//END' THEN
         CLC   0(5,@6),@C16                                       0146
         BC    07,@9EC                                            0146
*               DO;                      /* CHECK FOR EMPTY           *
*               IF FIRSTRD='1'B THEN     /* DATA SET                  *
         TM    INTFLAG,B'10000000'                                0148
         BC    12,@9EB                                            0148
*                 RTRNCODE=16;           /* RETURN 16                 *
         LA    @F,16                                              0149
         BC    15,@9EA                                            0150
*               ELSE RTRNCODE=12;        /* END OF DATA               *
@9EB     LA    @F,12                                              0150
*               END;                     /* END OF DO GROUP           *
@9EA     EQU   *                                                  0151
*             FIRSTRD='0'B;              /* RESET FLAG                *
@9EC     NI    INTFLAG,B'01111111'                                0152
*             RETURN;
         BC    15,@EL01                                           0153
*             END;
*           FIRSTRD='0'B;                /* RESET FLAG                *
@9ED     EQU   *                                                  0155
@9EE     NI    INTFLAG,B'01111111'                                0155
*           RETURN;                      /*NORMAL RETURN-CODE=0*/
         BC    15,@EL01                                           0156
*           END;
*         IF SAVE15=8 THEN
@9EF     CH    @5,@D1                                             0158
*           GOTO RTRN8;                  /* ERROR RETURN              *
         BC    08,RTRN8                                           0159
*         IF FIRSTRD='1'B THEN           /* FIRST READ                *
         TM    INTFLAG,B'10000000'                                0160
*             GOTO RTRN4;                /* EMPTY DATA SET            *
         BC    01,RTRN4                                           0161
*           IF DEVTYPE='81'X × DEVTYPE = '83'X THEN     /*     0X01064*
         CLI   17(@7),X'81'                                       0162
         BC    08,@9E9                                            0162
         CLI   17(@7),X'83'                                       0162
         BC    07,@9E8                                            0162
*           GEN(CLOSE ((DCBPTR),REREAD),TYPE=T);   /*RESET TO BEGINNING
*                                                    OF DATA SET*/
@9E9     EQU   *                                                  0163
         CLOSE ((DCBPTR),REREAD),TYPE=T
         DS    0H
*         RTRNCODE=SAVE15;               /*SET RETURN CODE-END OF DATA*
@9E8     LR    @F,@5                                              0164
*         END;
@EL01    L     @D,4(0,@D)                                         0165
         L     @E,12(0,@D)                                        0165
         LM    @0,@C,20(@D)                                       0165
         BCR   15,@E                                              0165
@DATA1   EQU   *
@0       EQU   00                  EQUATES FOR REGISTERS 0-15
@1       EQU   01
@2       EQU   02
@3       EQU   03
@4       EQU   04
@5       EQU   05
@6       EQU   06
@7       EQU   07
@8       EQU   08
@9       EQU   09
@A       EQU   10
@B       EQU   11
@C       EQU   12
@D       EQU   13
@E       EQU   14
@F       EQU   15
@D1      DC    H'8'
         DS    0F
@C14     DC    C'VOL1'
@C15     DC    C'HDR1'
@X3      DC    X'000000000000'
@X6      DC    X'0050'
@C11     DC    C'OLT.READD.DATASET'
@C16     DC    C'//END'
         DS    0D
@DATA    EQU   *
@SAV001  EQU   @DATA+00000000      72 BYTE(S) ON WORD
R1       EQU   00000001            FULLWORD POINTER REGISTER
R2       EQU   00000002            FULLWORD POINTER REGISTER
R3       EQU   00000003            FULLWORD POINTER REGISTER
COUNT    EQU   00000004            FULLWORD INTEGER REGISTER
SAVE15   EQU   00000005            FULLWORD INTEGER REGISTER
BUFREG   EQU   00000006            FULLWORD POINTER REGISTER
DCBPTR   EQU   00000007            FULLWORD POINTER REGISTER
READAD   EQU   00000008            FULLWORD POINTER REGISTER
R14      EQU   00000014            FULLWORD POINTER REGISTER
R15      EQU   00000015            FULLWORD INTEGER REGISTER
RTRNCODE EQU   00000015            FULLWORD INTEGER REGISTER
         ORG   @DATA+00000072
MODLEV   EQU   *                   1 BYTE(S)
         DC    X'02'
PARMLIST EQU   00000000            20 BYTE(S) ON WORD
A00000   EQU   PARMLIST+00000000   1 BYTE(S)
MACROLEV EQU   PARMLIST+00000001   1 BYTE(S)
A00001   EQU   PARMLIST+00000002   2 BYTE(S)
ADINAREA EQU   PARMLIST+00000004   FULLWORD POINTER
SIZE     EQU   PARMLIST+00000008   FULLWORD INTEGER
VOLSERNO EQU   PARMLIST+00000012   6 BYTE(S)
FLAGS    EQU   PARMLIST+00000018   1 BYTE(S)
A00002   EQU   PARMLIST+00000018   6 BIT(S)
BKSPACE  EQU   PARMLIST+00000018   1 BIT(S)
RESETB   EQU   PARMLIST+00000018   1 BIT(S)
NUMB     EQU   PARMLIST+00000019   1 BYTE(S)
A00003   EQU   00000000            92 BYTE(S) ON WORD
A00004   EQU   A00003+00000000     17 BYTE(S)
DEVTYPE  EQU   A00003+00000017     1 BYTE(S)
A00005   EQU   A00003+00000017     2 BIT(S)
DASDKEY  EQU   A00003+00000017     1 BIT(S)
A00006   EQU   A00003+00000017     5 BIT(S)
A00007   EQU   A00003+00000018     19 BYTE(S)
DXLST    EQU   A00003+00000037     3  BYTE  POINTER ON WORD+1
A00008   EQU   A00003+00000040     8 BYTE(S)
A00009   EQU   A00003+00000048     1 BYTE(S)
A00010   EQU   A00003+00000048     3 BIT(S)
OPENFLG  EQU   A00003+00000048     1 BIT(S)
A00011   EQU   A00003+00000048     4 BIT(S)
A00012   EQU   A00003+00000049     43 BYTE(S)
A00013   EQU   A00003+00000049     1 BYTE(S)
DMACRF   EQU   A00003+00000050     1 BYTE(S)
A00014   EQU   A00003+00000051     41 BYTE(S)
JFCBAREA EQU   @DATA+00000076      176 BYTE(S) ON WORD
A00018   EQU   @DATA+00000076      177 BYTE(S) ON WORD
DATASNM  EQU   A00018+00000000     44 BYTE(S)
A00019   EQU   A00018+00000044     22 BYTE(S)
A00020   EQU   A00018+00000044     8 BYTE(S)
A00021   EQU   A00018+00000052     1 BYTE(S)
A00022   EQU   A00018+00000052     2 BIT(S)
SYSINBIT EQU   A00018+00000052     1 BIT(S)
A00023   EQU   A00018+00000052     5 BIT(S)
A00024   EQU   A00018+00000053     13 BYTE(S)
A00025   EQU   A00018+00000066     1 BYTE(S)
A00026   EQU   A00018+00000066     6 BIT(S)
SLABEL   EQU   A00018+00000066     1 BIT(S)
A00027   EQU   A00018+00000066     1 BIT(S)
A00028   EQU   A00018+00000067     27 BYTE(S)
A00029   EQU   A00018+00000067     20 BYTE(S)
JINDBIT  EQU   A00018+00000087     1 BYTE(S)
JBUFNO   EQU   A00018+00000088     1 BYTE(S)
A00030   EQU   A00018+00000089     1 BYTE(S)
JBUFL    EQU   A00018+00000090     2 BYTE(S)
A00031   EQU   A00018+00000092     1 BYTE(S)
JMODE    EQU   A00018+00000093     1 BYTE(S)
TAPEDEN  EQU   A00018+00000094     1 BYTE(S)
A00032   EQU   A00018+00000095     23 BYTE(S)
A00033   EQU   A00018+00000095     5 BYTE(S)
JRECFM   EQU   A00018+00000100     1 BYTE(S)
A00034   EQU   A00018+00000101     1 BYTE(S)
JBLKSZ   EQU   A00018+00000102     2 BYTE(S)
JRECL    EQU   A00018+00000104     2 BYTE(S)
A00035   EQU   A00018+00000106     11 BYTE(S)
JVOLNUM  EQU   A00018+00000117     1 BYTE(S)
VOLSERL  EQU   A00018+00000118     6 BYTE(S)
A00036   EQU   A00018+00000124     53 BYTE(S)
XITLIST  EQU   @DATA+00000252      4 BYTE(S) ON WORD
         ORG   XITLIST+00000000
A00037   EQU   *                   1 BYTE(S)
         DC    X'87'
A00038   EQU   *                   3  BYTE  POINTER ON WORD+1
         DC    AL3(JFCBAREA)
CKEND    EQU   00000000            5 BYTE(S)
LABEL1   EQU   @DATA+00000256      80 BYTE(S)
VOLAB    EQU   LABEL1+00000000     4 BYTE(S)
LABELNUM EQU   LABEL1+00000004     6 BYTE(S)
A00039   EQU   LABEL1+00000010     70 BYTE(S)
         ORG   @DATA+00000336
INTFLAG  EQU   *                   1 BYTE(S)
         DC    X'00'
FIRSTRD  EQU   INTFLAG+00000000    1 BIT(S)
A00040   EQU   INTFLAG+00000000    1 BIT(S)
         ORG   @DATA+00000338
PATCH    EQU   *                   80 BYTE(S) ON HWORD
         DC    C' '
         DC    00079C' '
         ORG   @DATA
         DS    00000418C
@TEMPS   DS    0F
@TEMP4   DC    F'0'
COMAREA  IFDCOM
A00015   EQU   CESWT8+00000000     1 BYTE(S)
A00016   EQU   A00015+00000000     3 BIT(S)
READDCHK EQU   A00015+00000000     1 BIT(S)
A00017   EQU   A00015+00000000     1 BIT(S)
@DATEND  EQU   *
@9FF     EQU   RTRN4
@9F2     EQU   RTRN4
         END    ,(C'PL/S',1400,76139)
