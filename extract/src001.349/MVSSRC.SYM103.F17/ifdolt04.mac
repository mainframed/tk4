         TITLE 'IFDOLT04 - DRUM DATA PROTECTION'
         LCLA  &T,&SPN                                            0001
.@001    ANOP                                                     0001
IFDOLT04 CSECT ,                                                  0001
         BC    15,24(0,@F)
         DC    C'IFDOLT04 14 SEP 73'                             0001
         STM   @E,@C,12(@D)                                       0001
         BALR  @B,0                                               0001
@PSTART  DS    0H                                                 0001
         USING @PSTART+00000,@B                                   0001
         ST    @D,@SAV001+4                                       0001
         LA    @F,@SAV001                                         0001
         ST    @F,8(0,@D)                                         0001
         LR    @D,@F                                              0001
         TITLE 'IFDOLT04 - DRUM DATA PROTECTION'
         DS    0H
*         GEN(USING CHASCT,2);           /*COMMON AREA BASE REGISTER  *
         USING CHASCT,2
         DS    0H
*         GEN DATA;                      /*OLTEP COMMON AREA          *
*         /************************************************************
*         /*                                                          *
*         /*         DECLARED REGISTERS                               *
*         /*                                                          *
*         /************************************************************
*         DCL R0 REG(0) PTR;             /* REGISTER ZERO             *
*         DCL R1 REG(1) PTR;             /* REGISTER 1                *
*         DCL R2 REG(2) PTR;             /* REGISTER 2                *
*         DCL R3 REG(3) PTR;             /*REGISTER 3                 *
*         DCL R4 REG(4) PTR;             /* REGISTER 4                *
*         DCL R5 REG(5) PTR;             /* REGISTER 5                *
*         DCL R6 REG(6) PTR;             /* REGISTER 6                *
*         DCL R7 REG(7) PTR;             /* REGISTER 7                *
*         DCL R8 REG(8) PTR;             /* REGISTER 8                *
*         DCL R9 REG(9) PTR;             /* REGISTER 9                *
*         DCL R10 REG(10) PTR;           /* REGISTER 10               *
*         DCL R11 REG(11) PTR;           /* REGISTER 11               *
*         DCL R12 REG(12) PTR;           /* REGISTER 12               *
*         DCL R13 REG(13) PTR;           /* REGISTER 13               *
*         DCL R14 REG(14) PTR;           /* REGISTER 14               *
*         DCL R15 REG(15) PTR;           /* REGISTER 15               *
*         RESTRICT(R1,R2,R3,R7);         /* RESTRICT REGISTERS        *
*         DCL IFDMSG04 EXT ENTRY;        /* MSG MODULE                *
*         DCL MSGPTR PTR                 /* PTR TO MESSAGE MODULE     *
*               INIT(ADDR(IFDMSG04));    /* INITIALIZE MSG PTR        *
*         /************************************************************
*         /*    POINTERS TO MESSAGES                                  *
*         /************************************************************
*         DCL 1 * BASED(R3),
*           3 IFD120 PTR,                /* PTR TO MSG IFD120D        *
*           3 IFD145 PTR,                /* PTR TO MSG IFD145D        *
*           3 IFD212 PTR;                /* PTR TO MSG IFD212I        *
*         DCL CESWT1 CHAR(1) GENERATED;  /* OLTEP SWITCHES            *
*         /************************************************************
*         /*    SWITCH STRUCTURE FOR CESWT1                           *
*         /************************************************************
*         DCL 1 * CHAR(1)
*               BASED(ADDR(CESWT1)),     /* FOR CESWT1                *
*           3 * BIT(4),                  /* N/A                       *
*           3 FILMSK BIT(1),             /* ALLOW FILMSK CHANGES      *
*           3 * BIT(1),                  /* N/A                       *
*           3 ONLINEOK BIT(1),           /* ONLINE FLAG               *
*           3 * BIT(1);                  /* N/A                       *
*         DCL CESWT3 CHAR(1) GENERATED;  /* OLTEP SWITCHES            *
*         /************************************************************
*         /*    SWITCH STRUCTURE FOR CESWT3                           *
*         /************************************************************
*         DCL 1 * CHAR(1)
*               BASED(ADDR(CESWT3)),     /* FOR CESWT3                *
*           3 * BIT(2),                  /* N/A                       *
*           3 NUDEV BIT(1),              /* BYPASS TESTS THIS DEVICE  *
*           3 * BIT(4),                  /* N/A                       *
*           3 NODP BIT(1);               /* NO DATA PROTECTION        *
*         DCL CHASCT  CHAR(88) GENERATED;/* SCT                       *
*         /************************************************************
*         /*    SCT FLAG BYTE - OFFSET 10                             *
*         /************************************************************
*         DCL 1 * CHAR(1)
*               BASED(ADDR(CHASCT)+10),  /* OFFSET 10                 *
*            3  * BIT(1),                /* N/A                       *
*            3  FPM BIT(1);              /* FILE PROTECT MODE BIT     *
*         /************************************************************
*         /*    SCT FLAG BYTE - OFFSET 11                             *
*         /************************************************************
*         DCL 1 * CHAR(1)
*               BASED(ADDR(CHASCT)+11),  /* OFFSET 11                 *
*            3 CDSFPM BIT(1),            /* FILE PROTECT FLAG         *
*            3 * BIT(7);                 /* N/A                       *
*         /************************************************************
*         /* MAP OF DEVTAB - EACH ENTRY = 56 BYTES                    *
*         /************************************************************
*         DCL 1 * BASED(R7),
*           3 DEVADEB CHAR(8),           /* DEV ADDR IN EBCDIC        *
*           3 DUCBA PTR(31),             /* UCB ADDR (TWO BYTE ADDR)  *
*           3 DEVFL1 CHAR(1),            /* FIRST FLAG BYTE IN DEVTAB *
*             5 ONLNE BIT(1),            /* DEVICE ON/OFF LINE STATUS *
*             5 PRIME BIT(1),            /* PRIMARY DEVICE INDICATOR  *
*             5 DPDONE BIT(1),           /* DATA PROTECTION COMPLETE  *
*             5 ACTVE BIT(1),            /* ACTIVE DEVICE             *
*             5 ALLCT BIT(1),            /* ALLOCATED DEVICE          *
*             5 GRBED BIT(1),            /* GRADDED (SECONDARY) DEV   *
*             5 FLPRT BIT(1),            /* FILE PROTECT MODE DEVICE  *
*             5 ACTSC BIT(1),            /* LAST ACTIVE SECONDARY DEV *
*           3 DEVFL2 CHAR(1),            /* SECOND FLAG BYTE IN DEVTAB*
*             5 DSNAME BIT(1),           /* DSNAME FLIP-FLOP          *
*             5 * BIT(1),                /* N/A                       *
*             5 CEVOL BIT(1),            /* C.E. VOLUME               *
*             5 STDLBL BIT(1),           /* STANDARD LABELED TAPE     *
*             5 CHANFUNC BIT(1),         /* CHANNEL FUNCTION          *
*             5 BYPS BIT(1),             /* BYPASS FUNCTION INVOKED   *
*             5 CEDE BIT(1),             /* CE-DE FUNCTION INVOKED    *
*             5 ATTN BIT(1),             /* ATTNIN FUNCTION INVOKED   *
*           3 DEVFL3 CHAR(1),            /* THIRD FLAG BYTE IN DEVTAB *
*             5 SPECEXP BIT(1),          /* SPECIFIC EXPOSURE FUNCTION*
*             5 * BIT(7),                /* EXPANSION                 *
*           3 DEVFL4 CHAR(1),            /* FOURTH FLAG BYTE IN DEVTAB*
*             5 RMTLNDAB BIT(1),         /* REMOTE LINE DISABLED      *
*             5 RMTLNENA BIT(1),         /* REMOTE LINE ENABLED       *
*             5 FRSTEXIO BIT(1),         /* FIRST EXIO ISSUED         *
*             5 * BIT(5),                /* EXPANSION                 *
*           3 DVEXT1 CHAR(6),            /* LOW DASD EXTENT           *
*           3 DVEXT2 CHAR(6),            /* HIGH DASD EXTENT          *
*             5 DVCCHH2 CHAR(4),         /* CC HH OF 2ND EXTENT       *
*           3 * CHAR(2),                 /* N/A                       *
*           3 MODESET CHAR(1),           /* MODE SET SAVE AREA        *
*           3 EXPOSURE CHAR(1),          /* EXPOSURE # FOR ZUES TYPE  *
*           3 DEHAD CHAR(4),             /* DEVICE ADDR IN HEX        *
*           3 CDSINFOR CHAR(16),         /* CDS INFO FOR THIS DEV     *
*             5 MODEL CHAR(1),           /* MODEL #                   *
*             5 FEATURES CHAR(1),        /* FEATURES ON THIS MODEL    *
*             5 CLASS  CHAR(1),          /* CLASS                     *
*             5 TYPE CHAR(1),            /* TYPE                      *
*             5 CDSCNT CHAR(1),          /* CDS BYTE COUNT            *
*             5 CDSFLAGS CHAR(1),        /* CDS FLAGS                 *
*               7 DVCDSFPM BIT(1),       /* FILE PROTECT FLAG   S21052*
*               7 * BIT(1),              /* -/A                 S21052*
*               7 DVCDECEV BIT(1),       /* CE VOLUME           S21052*
*             5 EXTSGMSK CHAR(2),        /* EXTERNAL SIGNAL MASK      *
*             5 SYMNAME CHAR(8),         /* SYMBOLIC NAME             *
*           3 * CHAR(4);                 /* EXPANSION                 *
*         /************************************************************
*         /*    UCB                                                   *
*         /************************************************************
*         DCL 1 * BASED(DUCBA),
*           3 *(4) FIXED,                /* N/A                       *
*           3 * CHAR(1),                 /* N/A                       *
*           3 * CHAR(1),                 /* N/A                       *
*             5 * BIT(2),                /* N/A                       *
*             5 SHARED BIT(1);           /* SHARED FLAG               *
*         /************************************************************
*         /*    WTOR PARAMETER LIST                                   *
*         /************************************************************
*         DCL 1 MSGPARM BASED(R1),
*           3 LENGTH CHAR(1),            /* LENGTH OF RESPONSE        *
*           3 BUFAD PTR(24),             /* BUFFER FOR RESPONSE       *
*           3 MSGECB PTR;                /* ECB ADDRESS               *
*         DCL DRUMECB FIXED INIT(0);     /* ECB                       *
*         DCL INBUFR CHAR(3) GENERATED;  /* BUFFER FOR RESPONSE       *
*         DCL MSGDVAD1 CHAR(8)           /* AREA FOR DEV ADDR IN MSG  *
*               BASED(R1+36);            /* OFFSET 36                 *
*         DCL MSGDVAD2 CHAR(8)           /* AREA FOR DEV ADDR IN MSG  *
*               BASED(R1+23);            /* OFFSET 23                 *
*         DCL MSGDVAD3 CHAR(8)           /* AREA FOR DEV ADDR IN MSG  *
*               BASED(R1+39);            /* OFFSET 39                 *
*         DCL BLANKS CHAR(3) INIT('   ');/* 3 BLANKS TO CLEAR INBUFR  *
*         DCL NOANS CHAR(3) INIT('NO '); /* CONSTANT ' NO '           *
*         DCL YANS CHAR(3) INIT('YES');  /* CONSTANT 'YES'            *
*         R3=MSGPTR;                     /* PTR TP MSG MOD            *
         L     @3,MSGPTR                                          0043
*         /* CHECK FOR NO DATA PROTECTION DONE                        *
*         IF NODP= '1'B THEN             /* ONLY PUT OUT MSG 120      *
         TM    A00005,B'00000001'                                 0044
*           GOTO DRUM00;                 /* GO PRINT MSG 212I         *
         BC    01,DRUM00                                          0045
*         /* CHECK FOR CE VOLUME ON DISK                              *
*         IF CEVOL = '1'B &              /* CE VOLUME ON DISK         *
*           SHARED='1'B THEN             /* SHARED DEVICE             *
         TM    13(@7),B'00100000'                                 0046
         BC    12,@9FF                                            0046
         L     @6,8(0,@7)          
         TM    17(@6),B'00100000'                                 0046
*               GOTO DRUM02;             /* OFFLINE IN ALL SYS MSG    *
         BC    03,DRUM02                                          0047
*         /* CHECK TO SEE IF DATA PROTECTION HAS BEEN DONE       M1468*
*         IF DPDONE='1'B THEN            /* IS DP DONE           M1468*
@9FE     EQU   *                                                  0048
@9FF     TM    12(@7),B'00100000'                                 0048
*           RETURN;                      /* YES, RETURN TO CALLERM1468*
         BC    03,@EL01                                           0049
*         /* CHECK FOR ONLINE DRUM                                    *
*         IF ONLNE= '1'B THEN            /* IS DEVICE ONLINE          *
@9FD     TM    12(@7),B'10000000'                                 0050
         BC    12,@9FC                                            0050
*           DO;                          /* SET ONLINE OK FLAGS       *
*             ONLINEOK='1'B;             /* YES SET FLAG              *
         OI    A00001,B'00000010'                                 0052
*             GOTO SETBITS;              /*GO SET OTHER BITS          *
         BC    15,SETBITS                                         0053
*           END;                         /* END OF DO GROUP           *
*         ONLINEOK='0'B;                 /* ZERO ONLINEOK FLAG        *
@9FC     NI    A00001,B'11111101'                                 0055
*         /* CHECK FOR SHARED DRUM                                    *
*         IF SHARED='1'B THEN            /* IS DEVICE SHARED          *
         L     @6,8(0,@7)          
         TM    17(@6),B'00100000'                                 0056
         BC    12,@9FB                                            0056
*           DO;                          /* SHARED DEVICE             *
* DRUM02:                                /* PUT OUT MSG  IFD145D      *
*             R1=IFD145;                 /* GET PTR TO MSG            *
DRUM02   L     @1,4(0,@3)                                         0058
*             BUFAD=ADDR(INBUFR);        /* ADDR OF RESPONSE BUFFER   *
         LA    @F,INBUFR                                          0059
         ST    @F,@TEMP4                                          0059
         MVC   1(3,@1),@TEMP4+1                                   0059
*             LENGTH='03'X;              /* LENGTH OF RESPONSE        *
         MVI   0(@1),X'03'                                        0060
*             DRUMECB=0;                 /* CLEAR ECB                 *
         SR    @F,@F                                              0061
         ST    @F,DRUMECB                                         0061
*             MSGECB=ADDR(DRUMECB);      /* GET ADDR OF ECB           *
         LA    @F,DRUMECB                                         0062
         ST    @F,4(0,@1)                                         0062
*             MSGDVAD2=DEVADEB;          /* PUT DEV ADDR IN MSG       *
         MVC   23(8,@1),0(@7)                                     0063
*             INBUFR=BLANKS;             /* CLEAR RESPONSE BUFFER     *
         MVC   INBUFR(3),BLANKS                                   0064
*             GEN(PWTOR  REG=(1));       /* PRINT MESSAGE             *
         PWTOR  REG=(1)
         DS    0H
*             /* CHECK FOR 'NO ' ANSWER                               *
*             IF INBUFR=NOANS THEN       /* NOT OFFLINE IN ALL SYS    *
         CLC   INBUFR(3),NOANS                                    0066
*                 GOTO SETBITS;          /* NOT OFFLINE  IN ALL SYSTEM*
         BC    08,SETBITS                                         0067
*             /* CHECK FOR NOT 'YES' ANSWER                           *
*             IF INBUFR ^= YANS THEN     /* GO REPEAT MESSAGE         *
         CLC   INBUFR(3),YANS                                     0068
*               GOTO DRUM02;             /* IF ANSWER NOT YES OR NO   *
         BC    07,DRUM02                                          0069
*             /* CHECK FOR CEVOL                                      *
*             IF CEVOL = '1'B THEN       /* CEVOL                     *
         TM    13(@7),B'00100000'                                 0070
*               RETURN;                  /* RETURN TO CALLER          *
         BC    03,@EL01                                           0071
*           END;                         /* END OF DO GROUP           *
@9FA     EQU   *                                                  0072
* DRUM01:                                /* PUT OUT MESSAGE IFD120D   *
*         R1=IFD120;                     /* GET PTR TO MSG            *
@9FB     EQU   *                                                  0073
DRUM01   L     @1,0(0,@3)                                         0073
*         BUFAD=ADDR(INBUFR);            /* ADDR OF RESPONSE BUFFER   *
         LA    @F,INBUFR                                          0074
         ST    @F,@TEMP4                                          0074
         MVC   1(3,@1),@TEMP4+1                                   0074
*         LENGTH='03'X;                  /* LENGTH OF RESPONSE        *
         MVI   0(@1),X'03'                                        0075
*         DRUMECB=0;                     /* CLEAR ECB                 *
         SR    @F,@F                                              0076
         ST    @F,DRUMECB                                         0076
*         MSGECB=ADDR(DRUMECB);          /* GET ADDR OF ECB           *
         LA    @F,DRUMECB                                         0077
         ST    @F,4(0,@1)                                         0077
*         MSGDVAD1=DEVADEB;              /* PUT DEV ADDR IN MSG       *
         MVC   36(8,@1),0(@7)                                     0078
*         INBUFR=BLANKS;                 /* CLEAR BUFFER              *
         MVC   INBUFR(3),BLANKS                                   0079
*         GEN(PWTOR  REG=(1));           /* PRINT MSG                 *
         PWTOR  REG=(1)
         DS    0H
*         /* CHECK FOR 'NO ' ANSWER                                   *
*         IF INBUFR = NOANS THEN         /* ANSWER EQUALS NO          *
         CLC   INBUFR(3),NOANS                                    0081
         BC    07,@9F9                                            0081
*           DO;                          /* DO                        *
*             /* CHECK FOR NO DATA PROTECTION                         *
*             IF NODP= '1'B THEN         /* IF ON BYPASS TESTS ON DEV *
         TM    A00005,B'00000001'                                 0083
*               GOTO TSTPRIM;            /* GO TEST FOR PRIME DEV     *
         BC    01,TSTPRIM                                         0084
*             GOTO SETBITS;              /* ALLOW TO CONTINUE IN FPM  *
         BC    15,SETBITS                                         0085
*           END;                         /* END OF DO GROUP           *
*         /* CHECK FOR NOT 'YES' ANSWER                               *
*         IF INBUFR ^= YANS THEN         /* ERROR - REPEAT MESSAGE    *
@9F9     CLC   INBUFR(3),YANS                                     0087
*           GOTO DRUM01;                 /* REPEAT MESSAGE            *
         BC    07,DRUM01                                          0088
*         /* CHECK FOR NO DATA PROTECTION                             *
*         IF NODP = '1'B THEN            /* IF ON RETURN TO SCHEDULER *
         TM    A00005,B'00000001'                                 0089
*           RETURN;                      /* RETURN TO CALLER          *
         BC    03,@EL01                                           0090
*         FPM='0'B;                      /* CLEAR FPM IN SCT    A48714*
@9F8     NI    A00008,B'10111111'                                 0091
*         FLPRT='0'B;                    /* CLEAR FPM IN DEVTAB A48714*
         NI    12(@7),B'11111101'                                 0092
*         DVCDSFPM='0'B;                 /* CLEAR DEVTAB FPM FLGA48714*
         NI    41(@7),B'01111111'                                 0093
*         CDSFPM='0'B;                   /* CLEAR CDSFPM IN SCT A48714*
         NI    A00010,B'01111111'                                 0094
*         GOTO DRUM03;                   /* BRANCH AROUND CODE        *
         BC    15,DRUM03                                          0095
* SETBITS:                               /* SET FILE PROTECT BITS     *
*         FPM='1'B;                      /* SET FPM BIT IN SCT        *
SETBITS  OI    A00008,B'01000000'                                 0096
*         FLPRT='1'B;                    /* SET FPM IN DEVTAB         *
         OI    12(@7),B'00000010'                                 0097
*         DVCDSFPM='1'B;                 /* SET DEVTAB FPM FLAG       *
         OI    41(@7),B'10000000'                                 0098
*         CDSFPM='1'B;                   /* SET CDSFPM BIT IN SCT     *
         OI    A00010,B'10000000'                                 0099
* DRUM03:                                /* SET OTHER BITS            *
*         FILMSK='1'B;                   /* ALLOW MODE SET CHGS       *
DRUM03   OI    A00001,B'00001000'                                 0100
*         DPDONE = '1'B;                 /* SET DP DONE FLAG          *
         OI    12(@7),B'00100000'                                 0101
*         RETURN;                        /* RETURN TO CALLER          *
         BC    15,@EL01                                           0102
* DRUM00:                                /* PUT OUT MESSAGE IFD212I   *
*         R1=IFD212;                     /* POINTER TO MESSAGE        *
DRUM00   L     @1,8(0,@3)                                         0103
*         MSGDVAD3=DEVADEB;              /* PUT DEV ADDR IN MSG       *
         MVC   39(8,@1),0(@7)                                     0104
*         GEN(PWTO  REG=(1));            /* PRINT MESSAGE             *
         PWTO  REG=(1)
         DS    0H
*         GOTO DRUM01;                   /* GO PRINT MSG 120          *
         BC    15,DRUM01                                          0106
* TSTPRIM:                               /* TEST IF PRIME DEV         *
*         /* CHECK FOR PRIMARY DEVICE                                 *
*         IF PRIME='1'B THEN             /* IF PRIMARY DEV SET        *
TSTPRIM  TM    12(@7),B'01000000'                                 0107
         BC    12,@9F7                                            0107
*           NUDEV='1'B;                  /* BYPASS BIT                *
         OI    A00005,B'00100000'                                 0108
*         RETURN;                        /* RETURN TO CALLER          *
*         END IFDOLT04;                  /* END OF IFDOLT04 MODULE    *
@EL01    L     @D,4(0,@D)                                         0110
         LM    @E,@C,12(@D)                                       0110
         BCR   15,@E                                              0110
@DATA1   EQU   *
@0       EQU   00                  EQUATES FOR REGISTERS 0-15
@1       EQU   01
@2       EQU   02
@3       EQU   03
@4       EQU   04
@5       EQU   05
@6       EQU   06
@7       EQU   07
@8       EQU   08
@9       EQU   09
@A       EQU   10
@B       EQU   11
@C       EQU   12
@D       EQU   13
@E       EQU   14
@F       EQU   15
         DS    0F
         DS    0D
@DATA    EQU   *
@SAV001  EQU   @DATA+00000000      72 BYTE(S) ON WORD
R0       EQU   00000000            FULLWORD POINTER REGISTER
R1       EQU   00000001            FULLWORD POINTER REGISTER
R2       EQU   00000002            FULLWORD POINTER REGISTER
R3       EQU   00000003            FULLWORD POINTER REGISTER
R4       EQU   00000004            FULLWORD POINTER REGISTER
R5       EQU   00000005            FULLWORD POINTER REGISTER
R6       EQU   00000006            FULLWORD POINTER REGISTER
R7       EQU   00000007            FULLWORD POINTER REGISTER
R8       EQU   00000008            FULLWORD POINTER REGISTER
R9       EQU   00000009            FULLWORD POINTER REGISTER
R10      EQU   00000010            FULLWORD POINTER REGISTER
R11      EQU   00000011            FULLWORD POINTER REGISTER
R12      EQU   00000012            FULLWORD POINTER REGISTER
R13      EQU   00000013            FULLWORD POINTER REGISTER
R14      EQU   00000014            FULLWORD POINTER REGISTER
R15      EQU   00000015            FULLWORD POINTER REGISTER
         ORG   @DATA+00000072
MSGPTR   EQU   *                   FULLWORD POINTER
         DC    VL4(IFDMSG04)
A00000   EQU   00000000            12 BYTE(S) ON WORD
IFD120   EQU   A00000+00000000     FULLWORD POINTER
IFD145   EQU   A00000+00000004     FULLWORD POINTER
IFD212   EQU   A00000+00000008     FULLWORD POINTER
A00012   EQU   00000000            56 BYTE(S) ON WORD
DEVADEB  EQU   A00012+00000000     8 BYTE(S)
DUCBA    EQU   A00012+00000008     FULLWORD POINTER
DEVFL1   EQU   A00012+00000012     1 BYTE(S)
ONLNE    EQU   A00012+00000012     1 BIT(S)
PRIME    EQU   A00012+00000012     1 BIT(S)
DPDONE   EQU   A00012+00000012     1 BIT(S)
ACTVE    EQU   A00012+00000012     1 BIT(S)
ALLCT    EQU   A00012+00000012     1 BIT(S)
GRBED    EQU   A00012+00000012     1 BIT(S)
FLPRT    EQU   A00012+00000012     1 BIT(S)
ACTSC    EQU   A00012+00000012     1 BIT(S)
DEVFL2   EQU   A00012+00000013     1 BYTE(S)
DSNAME   EQU   A00012+00000013     1 BIT(S)
A00013   EQU   A00012+00000013     1 BIT(S)
CEVOL    EQU   A00012+00000013     1 BIT(S)
STDLBL   EQU   A00012+00000013     1 BIT(S)
CHANFUNC EQU   A00012+00000013     1 BIT(S)
BYPS     EQU   A00012+00000013     1 BIT(S)
CEDE     EQU   A00012+00000013     1 BIT(S)
ATTN     EQU   A00012+00000013     1 BIT(S)
DEVFL3   EQU   A00012+00000014     1 BYTE(S)
SPECEXP  EQU   A00012+00000014     1 BIT(S)
A00014   EQU   A00012+00000014     7 BIT(S)
DEVFL4   EQU   A00012+00000015     1 BYTE(S)
RMTLNDAB EQU   A00012+00000015     1 BIT(S)
RMTLNENA EQU   A00012+00000015     1 BIT(S)
FRSTEXIO EQU   A00012+00000015     1 BIT(S)
A00015   EQU   A00012+00000015     5 BIT(S)
DVEXT1   EQU   A00012+00000016     6 BYTE(S)
DVEXT2   EQU   A00012+00000022     6 BYTE(S)
DVCCHH2  EQU   A00012+00000022     4 BYTE(S)
A00016   EQU   A00012+00000028     2 BYTE(S)
MODESET  EQU   A00012+00000030     1 BYTE(S)
EXPOSURE EQU   A00012+00000031     1 BYTE(S)
DEHAD    EQU   A00012+00000032     4 BYTE(S)
CDSINFOR EQU   A00012+00000036     16 BYTE(S)
MODEL    EQU   A00012+00000036     1 BYTE(S)
FEATURES EQU   A00012+00000037     1 BYTE(S)
CLASS    EQU   A00012+00000038     1 BYTE(S)
TYPE     EQU   A00012+00000039     1 BYTE(S)
CDSCNT   EQU   A00012+00000040     1 BYTE(S)
CDSFLAGS EQU   A00012+00000041     1 BYTE(S)
DVCDSFPM EQU   A00012+00000041     1 BIT(S)
A00017   EQU   A00012+00000041     1 BIT(S)
DVCDECEV EQU   A00012+00000041     1 BIT(S)
EXTSGMSK EQU   A00012+00000042     2 BYTE(S)
SYMNAME  EQU   A00012+00000044     8 BYTE(S)
A00018   EQU   A00012+00000052     4 BYTE(S)
A00019   EQU   00000000            18 BYTE(S) ON WORD
A00020   EQU   A00019+00000000     4*FULLWORD INTEGER
A00021   EQU   A00019+00000016     1 BYTE(S)
A00022   EQU   A00019+00000017     1 BYTE(S)
A00023   EQU   A00019+00000017     2 BIT(S)
SHARED   EQU   A00019+00000017     1 BIT(S)
MSGPARM  EQU   00000000            8 BYTE(S) ON WORD
LENGTH   EQU   MSGPARM+00000000    1 BYTE(S)
BUFAD    EQU   MSGPARM+00000001    3  BYTE  POINTER ON WORD+1
MSGECB   EQU   MSGPARM+00000004    FULLWORD POINTER
DRUMECB  EQU   *                   FULLWORD INTEGER
         DC    FL4'0'
MSGDVAD1 EQU   00000036            8 BYTE(S)
MSGDVAD2 EQU   00000023            8 BYTE(S)
MSGDVAD3 EQU   00000039            8 BYTE(S)
BLANKS   EQU   *                   3 BYTE(S)
         DC    C'   '
NOANS    EQU   *                   3 BYTE(S)
         DC    C'NO '
YANS     EQU   *                   3 BYTE(S)
         DC    C'YES'
         ORG   @DATA
         DS    00000089C
@TEMPS   DS    0F
@TEMP4   DC    F'0'
DSECT04  IFDCOM
A00001   EQU   CESWT1+00000000     1 BYTE(S)
A00002   EQU   A00001+00000000     4 BIT(S)
FILMSK   EQU   A00001+00000000     1 BIT(S)
A00003   EQU   A00001+00000000     1 BIT(S)
ONLINEOK EQU   A00001+00000000     1 BIT(S)
A00004   EQU   A00001+00000000     1 BIT(S)
A00005   EQU   CESWT3+00000000     1 BYTE(S)
A00006   EQU   A00005+00000000     2 BIT(S)
NUDEV    EQU   A00005+00000000     1 BIT(S)
A00007   EQU   A00005+00000000     4 BIT(S)
NODP     EQU   A00005+00000000     1 BIT(S)
A00008   EQU   CHASCT+00000010     1 BYTE(S)
A00009   EQU   A00008+00000000     1 BIT(S)
FPM      EQU   A00008+00000000     1 BIT(S)
A00010   EQU   CHASCT+00000011     1 BYTE(S)
CDSFPM   EQU   A00010+00000000     1 BIT(S)
A00011   EQU   A00010+00000000     7 BIT(S)
@DATEND  EQU   *
@9F7     EQU   @EL01
         END   IFDOLT04
