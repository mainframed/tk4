         TITLE 'IFDOLT42  MORECORE MODULE'
IFDOLT42 CSECT          ENTRY POINT
***********************************************************************
*                            PROLOGUE                                 *
*                                                                     *
*                                                                     *
*   STATUS:                                                           *
*           CHANGE LEVEL 002                      OCT 4, 1971         *
*           THIS IS A RE-WRITE OF THE MORECORE MODULE AND IS          *
*           APPLICABLE TO RELEASES AFTER                              *
*                 1. RELEASE 21 OF OS                                 *
*                    AND TO ALL RELEASES OF VS1 AFTER REL 1          *
*                    AND VS2 REL 1..                                 *
*                                                                     *
*                                                                     *
*                                                                     *
*   FUNCTION:                                                         *
*           THE FUNCTION OF THIS MODULE IS TO ALLOCATE MAIN STORAGE   *
*           SPACE TO THE OLT  VIA THE MORECORE MACRO INSTRUCTION.     *
*           THIS MODULE WILL LOCATE THE MORECORE AREA AND THE TOTAL   *
*           NUMBER OF BYTES AVAILABLE TO THE OLT FOR MORECORE         *
*           REQUESTS FROM THE COMMON AREA.                            *
*                                                                     *
*           THE REQUESTOR CAN REQUEST CORE IN THREE FORMATS,          *
*           THEY ARE AS FOLLOWS.                                      *
*                                                                     *
*             A. BY SPECIFYING ONLY ONE PARAMETER , THAT IS,          *
*                THE MAXIMUM NUMBER OF BYTES THE OLT  MUST            *
*                HAVE TO CONTINUE.                                    *
*                                                                     *
*                                                                     *
*             B. BY SPECIFYING A MAXIMUM  AND A MINIMUM               *
*                NUMBER OF BYTES THE OLT MUST  HAVE  TO               *
*                CONTINUE                                             *
*                                                                     *
*                                                                     *
*             C. BY SPECIFYING THE MAXIMUM, THE MINIMUM AND           *
*                SETTING AN INDICATOR SPECIFYING  THAT IF THE         *
*                MAXIMUM CANNOT BE ALLOCATED, TO ALLOCATE THE LARGEST *
*                VALUE BETWEEN MAXIMUM AND MINIMUM. THIS              *
*                IS FOR LEVEL THREE CALLS ONLY                        *
*                                                                     *
*           TO QUALIFY FOR A MORECORE ALLOCATION THE OLT MOST         *
*           HAVE SPECIFAED 1T LEAST 24  (TWENTY FOUR) BYTES           *
*           OF MORE-CORE SPACE IN THE INITIALIZE PORTION OF           *
*           THE OLT. ALSO, NO LESS THAN A DOUBLE WORD OF              *
*           MAIN STORAGE SPACE WILL BE ALLOCATED.                     *
*                                                                     *
*                                                                     *
*           THIS MODULE WILL, ON THE FIRST CALL BULID THE             *
*           NECESSARY CONTROL BLOCKS TO INDICATE THE BEGINNING        *
*           AND END OF THE MORECORE AREA. EACH SUBSEQUENT CALL        *
*           WILL MERGE ALL CONSECTIVE FREE AREAS BEFORE               *
*           ATTEMPTING TO ALLOCATE MAIN STORAGE SPACE.                *
*                                                                     *
*                                                                     *
*   ENTRY POINT:                                                      *
*           IFDOLT42 IS THE MAIN AND OLNY ENTRY POINT TO              *
*           THIS MODULE.                                              *
*                                                                     *
*                                                                     *
*   INPUT:                                                            *
*           REGISTER TWO WILL POINT TO THE OLTEP COMMON AREA          *
*           REGISTER ONE WILL POINT TO THE OLTS PARAMETER LIST        *
*           REGISTER THIRTEEN WILL POINT TO THE OLTS SAVE AREA        *
*           REGISTER FOURTEEN WILL POINT TO THE RETURN ADDRESS        *
*                                                                     *
*   OUTPUT:                                                           *
*           IF UNSUCCESSFUL REGISTER FIFTEEN WILL BE AS FOLLOWS:      *
*                                                                     *
*              R15 = 04  FOR FUNCTION NOT AVAILABLE, THAT IS          *
*                     A. THE MACRO LEVEL IS INCORRECT                 *
*                     B. THE OLT REQUESTED A NEGITIVE AMOUNT          *
*                        OF CORE, OR A ZERO AMOUNT OF CORE.           *
*              R15 = 08 WHEN CORE COULD NOT BE ALLOTTED TO THE        *
*                    OLT.                                             *
*                                                                     *
*           IF SUCCESSFUL R15 WILL ALWAYS CONTAIN 00.                 *
*              ALSO R1 = ADDRESS OF MORECORE AREA USEABLE BY          *
*                        THE OLT                                      *
*                                                                     *
*                   R0 = THE NUMBER OF BYTES AVAILABLE TO THE         *
*                        OLT FOR MORECORE USEAGE.                     *
*                                                                     *
*                                                                     *
*   EXTERNAL ROUTINES:                                                *
*           THERE ARE NO EXTERNAL ROUTINES.                           *
*                                                                     *
*                                                                     *
*   EXITS NORMAL:                                                     *
*           NORMAL EXITS ARE MADE AT THE LABEL EXIT00                 *
*                                                                     *
*                                                                     *
*   EXITS ERROR:                                                      *
*           ERROR EXITS ARE MADE AT THE LABELS EXIT04                 *
*           AND EXIT08.                                               *
*                                                                     *
*                                                                     *
*   TABLES AND WORK AREAS:                                            *
*           A. OLTEPS COMMON AREA                                     *
*           B. OLTS MORECORE AREA WHICH IS ZERO UPON ENTRY            *
*                                                                     *
***********************************************************************
         EJECT
***********************************************************************
*                           GENERAL PURPOSE
*                           REGISTER EQUATES
***********************************************************************
WORKREG1 EQU   15                 USED FOR ARITWMETICS.
PARMREG  EQU   1                  POINTS TO OLTS PARMETER LIST.
COMMON   EQU   2                  POINTS TO OLTEP COMMON AREA.
MAX      EQU   3                  CONTAINS MAXIMUM CORE OLT REQS
MIN      EQU   4                  CONTAINS MINIMUM CORE OLT REQS
HEAD     EQU   5                  POINTS TO BEGIN OF MORECORE
*                                 SPACE.
TOTAL    EQU   6                  CONTAIN TOTAL NUMBER OF BYTES
*                                 AVAIL. TO OLT-OLTEP MORECORE
*                                 WORKINGS.
NEWHEAD  EQU   7                  POINTS TO NEXT SLOT OF AVAIL.
*                                 CORE WHEN A SPLIT OF A LARGE
*                                 BLOCK OF CORE IS IN PROCESS.
SIZE     EQU     8                CONTAINS NUMBER OF BYTES AVAIL
*                                 FOR A BLOCK OF MORECORE SPACE.
NEXT     EQU   9                  POINTS TO NEXT AREA OF MORE-
*                                 CORE SPACE.
NEWSIZE  EQU   10                 CONTAINS SIZE OF SPLIT BLOCK
*                                 DURING SPLIT PROCESSING
NEWNEXT  EQU   12                 POINTS TO SPLIT BLOCK DURIN
*                                 SPLIT PROCESSING
BASEREG  EQU   11                 BASE REGISTER FOR IFDOLT42
SAVE     EQU   13                 SAVE AREA POINTER
EXIT     EQU   14                 RETURN POINT IN OLT
MINPASS  EQU   14                 CONTAINS MIN ON SECOND PASS
RETURNRG EQU   15               RETURN CODE REGISTER
         EJECT
***********************************************************************
*                                                                     *
*  DISPLACEMENTS, LENGTH CODES, RETURN CODES, MASKS, AND LOAD         *
*  ADDRESS CONSTANTS                                                  *
*                                                                     *
***********************************************************************
ZERO     EQU   0                  REGISTER ZERO AND CONSTANT ZERO
D0       EQU   0                  DISPLACEMENT OF ZERO
D1       EQU   1                  DISPLACEMENT OF ONE
TWO      EQU   2                  DISPLACEMENT OF TWO
THREE    EQU   3                  DISPLACEMENT OF THREE
L4       EQU   4                  LENGTH OF FOUR
D4       EQU   4                  DISPLACEMENT OF FOUR
D7       EQU   7                  DISPLACEMENT OF SEVEN
D8       EQU   8                  DISPLACEMENT OF EIGHT
EIGHT    EQU   8                  DISPLACEMENT OF EIGHT
D12      EQU   12                 DISPLACEMENT OF 12
TWELVE   EQU   12                 DISPLACEMENT VALUE
COND12   EQU   12                 BRANCH MASK
D20      EQU   20                 DISPLACEMENT OF 20
D28      EQU   28                 DISPLACEMENT OF 28
HEX00    EQU   X'00'              MASK FIELD OF 00
HEX03    EQU   X'03'              MASK FIELD OF 03
HEX04    EQU   X'04'              MASK FIELD OF 04
HEX08    EQU   X'08'              MASK FIELD OF 08
HEX10    EQU   X'10'              MASK FIELD OF 10
HEX18    EQU   X'18'              MASK FIELD OF 18
HEX80    EQU   X'80'              MASK FIELD OF 80
HEXEF    EQU   X'EF'              MASK FIELD OF EF
***********************************************************************
*                STANDARD  LINKAGE  CONVENTIONS  FOLLOW               *
***********************************************************************
         SAVE  (14,12),,IFDOLT42&SYSDATE SAVE MODID, DATE & REGS
*                                 SAVE REGISTERS IN OLT SAVE
*                                 AREA
         BALR  BASEREG,ZERO       ESTABLISH ADDRESSABILITY
         USING *,BASEREG          OBTAIN ADDR OF BASE
         USING AAAAA,COMMON
         SPACE 2
         MVC   SAVE1(72),D0(SAVE) SAVE HIS REGISERS IN MY AREA
         LM    MAX,MIN,D4(PARMREG)
*                                 OBTAIN PARMETES PASSED FOR
*                                 SIZE OF CORE REQUIRED
         CLI   D1(PARMREG),HEX03  IS MACRO LEVEL OK
         BH    EXIT04             NO, RETURN CODE 04 ***ERROR***
         LTR   MAX,MAX            IS AMOUNT NEEDED FOR MAX ZERO
*                                 OR MINUS
         BC    COND12,EXIT04      YES, RETURN CODE 04 **ERROR***
         SPACE 2
*                                 MACRO LEVEL IS OK AS IS AMOUNT
*                                 OF CORE REQUESTED.
         SPACE 2
*                                 OBTAIN MORCORE PARAMETRS
         LM    HEAD,TOTAL,PLKMOR+D8
*                                 ADDRESS OF MORECORE AREA
*                                 AND THE NUMBER OF BYTES
*                                 AVAILABLE.
         LTR   HEAD,HEAD          IS THIS THE FIRST PASS THRU
         BNZ   MERGE01            IF THIS IS NOT THE FIRST PASS
*                                 SKIP THE FOLLOWING SET UP SECTION
         LM    HEAD,TOTAL,PARTITEM GET OLT AREA POINTER
*                                 AND AND OLT PARTITION SIZE
         A     HEAD,PARTITEM+D8 ADD IN ROOT +PLINK SIZE
*                                 TO GET MORECORE AREA ADDRESS
         S     TOTAL,PARTITEM+D8 GET NO. OF MORECORE BYTES AVAIL BY
*                                 TAKING OLT SIZE FROM GETMAIN AND
*                                 SUBTRACTING OUT THE ROOT + PLINK SIZE
         LA    WORKREG1,HEX18     SET MINIMUM CORE SIZE OLTEP CAN
*                                 OPERATE IN
         CR    TOTAL,WORKREG1     IS THERE ENOUGH ROOM FOR
*                                 MORECORE REQUESTS
         BL    EXIT08A            NO, RETURN CODE 08
         ST    TOTAL,PLKMOR+D12   SAVE BYTE COUNT OF MORE CORE AREA
*                                                               YM04752
         ST    HEAD,PLKMOR+D8     SAVE MORECORE BEGIN ADDRESS
*                                 FIRST PASS.                   YM04752
         EJECT
         SPACE 2
*                                 PROCEED TO SET UP PRIMARY
*                                 CONTROL BLOCKS USED DURING
*                                 MORECORE REQUESTS
         SPACE 2
         LA    WORKREG1,HEX08     OBTAIN MORECORE ENDING ADDRESS
         SR    TOTAL,WORKREG1
*                                 OBTAIN END ADDR FOR CONTROL
         LA    WORKREG1,D0(HEAD,TOTAL) BLOCK AT MORECORE END
         MVI   D0(WORKREG1),HEXEF SET END ID AT MORE CORE AREA END
*                                 ENDING ADDRESS.
         ST    WORKREG1,D4(HEAD)  STORE POINTER TO NEXT M.C.AREA
         LA    WORKREG1,HEX08     GET CONSTANT TO  OBTAIN
         SR    TOTAL,WORKREG1     REAL AVAILABLE CORE FOR MORE CORE
         ST    TOTAL,D0(HEAD)     STORE NUMBER OF BYTES AVAIL.
         OI    PLKMOR+D8,HEX80    SET FLAG TO BYPASS BUILD OF HEAD
*                                 ROUTINE.
         XR    TOTAL,TOTAL        ZERO OUT REG FOR MAX AVAIL PASS
         ST    TOTAL,PLKMOR+D12   SAVE MAX AMOUNT AVAIL IN
*                                 OLTEP COMMON AREA
         EJECT
*                                 THIS SECTION OF CODE WILL MERGE
*                                 ALL FREE CONTIGOUS BLOCK OF
*                                 MORECORE SPACE
         SPACE 2
MERGE00  CLI   D0(HEAD),HEXEF     IS THE END OF MORECORE AREA
         BE    MAXAVL00           GO TO ROUTINT TO GET MAX AVAIL
         SPACE 1
MERGE01  EQU   *                  GET SIZE AND POINTER TO NEXT
         LM    SIZE,NEXT,D0(HEAD) AVAILABLE MC AREA
         LTR   SIZE,SIZE          IS SPACE ALLOCATED
         BNM   MERGE03            NO, GO CHECK FOR AVAIL.
MERGE02  LR    HEAD,NEXT          YES, SET POINTER NEXT
         B     MERGE00            GO CHECK FOR M.C. END
MERGE03  CLI   D0(NEXT),HEX00     IS NEXT BLOCK ELIGIBLE FOR
         BNE   MERGE02            MERGING., NO, GET NEXT
         MVC   D4(L4,HEAD),D4(NEXT)
*                                 UPDATE POINT TO MERGE TWO
*                                 BLOCKS
         L     NEWSIZE,D0(NEXT)   OBTAIN NEW SIZE BY ADDING
         LA    NEWSIZE,D8(SIZE,NEWSIZE)
*                                 BOTH BLOCK SIZES AND EIGHT
*                                 BYTES FOR CONTROL BLOCK WHICH
*                                 WAS PURGED.
         ST    NEWSIZE,D0(HEAD)   SAVE NEW SIZE OF TWO MERGED
*                                 BLOCKS.
*                                 GO CONTINUE SCANNING FOR MORE
*                                 FREE CONTIGOUS BLOCKS
         CL    NEWSIZE,PLKMOR+D12   IS NEWSIZE GREATER THAN OLD
*                                 GREATER SAVE AREA SIZE
         BNH   MERGE04            NO,DO NOT RESTORE MAX AVAIL AREA
         ST    NEWSIZE,PLKMOR+D12  YES, SAVE LAGREST AVAIL IN OLTEP
         SPACE  2
MERGE04  EQU   *                  CONTINUE PROCESSING MERGE ROUTINE
         L     WORKREG1,D4(HEAD)  GET POINTER TO NEXT AVAIL
         CLI   D0(WORKREG1),HEXEF BLOCK. IS THIS THE END
         BNE   MERGE01            GO GET PTR TO NEXT AREA
*                                 END- OF MERGE ROUTINE
         EJECT
*                                 THIS SECTION OF CODE WILL CALCULATE
*                                 THE SIZE OF THE LARGEST AVAILABLE
*                                 BLOCK OF MORECORE AND STORE IT INTO
*                                 OLTEPS COMMON AREA.
MAXAVL00 EQU   *                  BEGIN PROCESSING LARGEST AVAILABLE
         L     HEAD,PLKMOR+D8     GET POINTER TO MORECORE AREA FROM
         XC    PLKMOR+D12(4),PLKMOR+D12
*                                 COMMON AREA
MAXAVL01 CLI D0(HEAD),HEXEF       IS THIS THE LAST BLOCK MORECORE
*                                 SPACE
         BE    BOUNDRY            YES, GO PROCESS REQUEST
         LM    SIZE,NEXT,D0(HEAD) OBTAIN SIZE AND NUMBER OF BYTES
*                                 FOR THIS BLOCK OF MORECORE SPACE
         LTR   SIZE,SIZE          IS THIS BLOCK AVAILABLE FOR MORE
*                                 CORE REQUESTS
         BM    MAXAVL02
         CL    SIZE,PLKMOR+D12    YES IS THIS BLOCK SIZE GREATER THAN
*                                 PREVIOUS AVAL BLK SIZE
         BNH   MAXAVL02           NO, USE OLD VALUE FOR THE MAXIMUM
*                                 AVAILABLE BLOCK SIZE
         ST    SIZE,PLKMOR+D12    YES, SAVE THIS BLOCK SIZE AS
*                                 LARGEST AVAILABLE BLOCK SIZE
MAXAVL02 LR    HEAD,NEXT          GET POINTER TO NEXT AVAIL BLOCK
*                                 FOR THIS PASS
         B     MAXAVL01           GO PROCESS NEXT BLOCK OF CORE
         EJECT
BOUNDRY  EQU   *                  SAVE REAL SIZE REQUETED
         ST    MAX,MAXSAVE        SAVE BYTE COUNT REQUESTED
*                                 THIS SECTION OF CODE WILL ROUND
*                                 THE OLTS REQUEST TO THE
         LA    MAX,D7(MAX)        NEAREST DOUBLE WORD
         SRL   MAX,THREE          ROUND OFF THE
         SLL   MAX,THREE          SIZE THE OLT REQUEST FOR
         LTR   MAX,MAX            CORE TO THE NEAREST UPWARD
         BNZ   ASSIGN00           BOUNDRY ON A DOUBLE WORD.
         LA    MAX,EIGHT          INSURE NON-ZERO
ASSIGN00 EQU   *                  IF THIS POINT IS REACHED AN
*                                 ATTEMPT TO ASSIGN THE OLT CORE
*                                 WILL BE MADE. OBTAIN FROM COMMO
*                                 AREA POINTR TO M.C. AREA AND
*                                 NUMBER OF BYTES AVAIL.
         L     HEAD,PLKMOR+D8     GET MORECORE POINTER
ASSIGN01 LM    SIZE,NEXT,D0(HEAD) GET SIZE, FLAG, AND PTR TO
         CLI   D0(HEAD),HEXEF     NEXT AVAIL. IS THIS END
         BE    EXIT08             YES, RETURN CODE = 08 **ERROR**
         LTR   SIZE,SIZE          IS THIS BLOCK AVAIL
         BP    ASSIGN03           YES, GO CHECK SIZE REQ.0
ASSIGN02 LR    HEAD,NEXT          NO, GET NEXT POINTER TO HEAD
         B     ASSIGN01           CONTINUE SCANNING
ASSIGN03 CR    MAX,SIZE           IS THIS SLOT LARGE ENOUGH
         BH    ASSIGN02           NO, GET NEXT POINTER
         EJECT
*                                 DETERMINE IF A SPLIT OF
*                                 BLOCKS IS POSSIBLE SINCE
*                                 MAX IS NOT GREATER THAN
*                                 AVAIL SIZE
SPLIT00  LA    WORKREG1,HEX10(MAX) IS THERE ROOM FOR TWO WORD
         CR    SIZE,WORKREG1      CONTROL BLOCKS AND EIGHT
         BL    RETURN00           BYTES OF MORECORE SPACE.
*                                 YES, SET UP NEW CTL WORDS
SPLIT01  LA    NEWHEAD,D8(HEAD,MAX) GET PTR TO NEW CTL WORD
         ST    NEXT,D4(NEWHEAD)    SAVE PTR TO NEXT IN NEW
*                                  CTL WORD
         ST    NEWHEAD,D4(HEAD)    SAVE PTR TO NEW CTL WD IN
*                                  OLD CTL WORD
         ST    MAX,D0(HEAD)        SAVE MAX IN SIZE SLOT OF
*                                  OLD CTL WORD
         SR    NEXT,NEWHEAD        CAL. USABLE SIZE OF NEW
*                                  BLOCK AFTER SPLIT
         LA    WORKREG1,HEX08      SET SUBTRAHAND
         SR    NEXT,WORKREG1       NEXT EQUALS SIZE OF NEW
         ST    NEXT,D0(NEWHEAD)    BLOCK. SAVE SIZE IN NEW
RETURN00 OI    D0(HEAD),HEX80      CTR WORD. SET ACTIVE ID
         XR    RETURNRG,RETURNRG   SET SUCCESSFUL RETURN
         LA    PARMREG,D8(HEAD)   SET RETURN ADDR FOR OLTS USE
         L     ZERO,MAXSAVE       RETURN NUMBER OF BYTES REQUESTED
         B     EXIT00             GO RESTORE  G. P. REGISTERS
*                                 AND EXIT.
         EJECT
EXIT04   LA    RETURNRG,HEX04     SET ERROR RETURN CODE
         B     EXIT00             GO RESTORE G. P. REGISTERS
*                                 AND EXIT.
EXIT08   EQU   *
*                                 THIS SECTION HANDLES MORECORE
*                                 BETWEEN AND MORECORE MIN-PASS-
*                                 ES THRU THIS MODULE.
         LTR   MIN,MIN            WAS THE MIN PARAMETER SUPPLIED
         BNZ   MINPAS00           YES, GO PROCESS IT
         SPACE 2
EXIT08A  EQU   *                  ENTER HERE ON NO CORE SITUATIONS
         LA    RETURNRG,HEX08     SET RETURN CODE
         B     EXIT00             GO EXIT MODULE
         SPACE 2
MINPAS00 EQU   *                  HANDLE MIN PASS SUBROUTINE
         L     MINPASS,PLKMOR+D12 GET SIZE OF LARGEST AVAIL BLOCK
         LR    MAX,MIN            SET MAX TO MIN FOR NEXT
         XR    MIN,MIN            PASS AND SET MIN TO ZERO
         CLI   D1(PARMREG),HEX03  WAS THE BETWEEN  PARM GIVEN
         BNE   BOUNDRY            NO GO HANDLE THIS WITH MIN
         CR    MINPASS,MAX        IS OUR MAX AVAIL LESS
*                                 THAN OLTS MIN RETURN
         BL    EXIT08             A CODE 08          *** ERROR ***
*                                 IF EQUAL OR GREATER USE OUR
*                                 MAX AVAIL FROM SAVE REGISTER
         LR    MAX,MINPASS        USE OLTEPS LARGER SIZE FOR
*                                 SEAREC ARGUMENT ON MIN PASS
         B     BOUNDRY            GO ATTEMPT TO ALLOCATE
EXIT00   EQU   *                  BEGIN EXTI OF MORECORE MODULE
         L     EXIT,D12(SAVE)     GET RETURN POINT REGISTERS
         LM    TWO,TWELVE,D28(SAVE) RESTORE OLT REGISTER 2
         BR    EXIT               THRU 12 AND EXIT
SAVE1    DC    18F'0'             TEMP A SAVE AREA
MAXSAVE  DC    F'0'               SAVE AREA FOR ACTUAL BYTE COUNT
DC       DC    C'IFDOLT42 PATCH AREA ' DUMP PATCH ID
AAAAA     IFDCOM
         END
