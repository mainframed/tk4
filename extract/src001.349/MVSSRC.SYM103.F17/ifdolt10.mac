         TITLE 'IFDOLT10 CONVERT MODULE'
         TITLE 'IFDOLT10 CONVERT MODULE'
         LCLA  &T,&SPN                                            0002
.@001    ANOP                                                     0002
IFDOLT10 CSECT ,                                                  0002
         ST    @E,12(0,@D)                                        0002
         STM   @0,@C,20(@D)                                       0002
         BALR  @4,0                                               0002
@PSTART  DS    0H                                                 0002
         USING @PSTART+00000,@4                                   0002
*         R5=FROMADDR;              /* GET FROM ADDRESS INTO REG. 5.*/
         L     @5,0(0,@1)                                         0024
*         R6=TOADDR;                /* GET TO ADDRESS INTO REG. 6.  */
         L     @6,4(0,@1)                                         0025
*         R7=FLGCOUNT;              /* GET COUNT IN REG. 7.         */
         MVC   @TEMP2+2(2),14(@1)                                 0026
         L     @7,@TEMP2                                          0026
*         R7=R7&LOW15;
         N     @7,LOW15                                           0027
*         IF R7=0 THEN              /* IF COUNT IS ZERO, RETURN TO  */
         LTR   @7,@7                                              0028
*           GO TO CNVERT06;         /* CALLER. OTHERWISE CONVERT.   */
         BC    08,CNVERT06                                        0029
*         AXFLGA='00'X;             /* CLEAR FLAG.                  */
         MVI   AXFLGA,X'00'                                       0030
*         ENDADDR=R5+R7;            /* FIND END OF CONVERSION DATA. */
         LR    @2,@7                                              0031
         AR    @2,@5                                              0031
*         R3=ADDR(AXATBL);          /* SET POINTER TO CHAR TABLE.   */
         LA    @3,AXATBL                                          0032
*         IF HEXBIT='1'B THEN       /* IS CONVERSION HEX TO EBCDIC. */
         TM    14(@1),B'10000000'                                 0033
*           GO TO CNVERT05;         /* YES, GO TO HEX TO EBCDIC     */
         BC    01,CNVERT05                                        0034
*                                   /* ROUTINE.                     */
* CNVERT01: /* EBCDIC TO HEX CONVERSION */
*         DO I=16 TO 1 BY -1;       /* SEE IF INPUT CHAR HAS A VALID*/
CNVERT01 LA    @9,16                                              0035
*         IF INBUF=AXATBL(I) THEN   /* HEX NUMBER EQUIVALENT.       */
@DO9FF   LR    @8,@9                                              0036
         LA    @E,AXATBL-1(@8)                                    0036
         CLC   0(1,@5),0(@E)                                      0036
*           GO TO CNVERT02;         /* YES, CONVERT IT.             */
         BC    08,CNVERT02                                        0037
*         END;
*         RC=INBUF;                 /* PUT BAD CHARACTER IN REG. 15 */
         BCT   @9,@DO9FF                                          0038
         SR    @F,@F                                              0039
         IC    @F,0(0,@5)                                         0039
*         GO TO CNVERT07;           /* AND RETURN TO CALLER.        */
         BC    15,CNVERT07                                        0040
* CNVERT02:
*         R11=I-1;                  /* SAVE EQUIVALENT HEX CHAR.    */
CNVERT02 LH    @B,@D1                                             0041
         AR    @B,@9                                              0041
*         IF AXFLGA^='00'X THEN     /* IF 2ND BYTE, GO TO ROUTINE   */
         CLI   AXFLGA,X'00'                                       0042
*           GO TO CNVERT03;         /* THAT WILL OUTPUT HEX EQUIV.  */
         BC    07,CNVERT03                                        0043
*         R12=R11*16;               /* PUT 1ST HEX CHAR IN R12  TFF001*
         LR    @F,@B                                              0044
         SLA   @F,4                                               0044
         LR    @C,@F                                              0044
*         AXFLGA='F0'X;             /* SET FLAG TO NON-ZERO TO      */
         MVI   AXFLGA,X'F0'                                       0045
*                                   /* INDICATE ONLY ONE CHARACTER  */
*                                   /* HAS BEEN CONVERTED.          */
*         GO TO CNVERT04;           /* GO TO ROUTINE THAT DETERMINES*/
         BC    15,CNVERT04                                        0046
*                                   /* IF MORE CONVERSION MUST BE   */
*                                   /* DONE                         */
* CNVERT03: /* OUTPUT ROUTINE FOR EBCDIC TO HEX CONVERSION  */
*         R12=R12×R11;              /* COMBINE TWO HEX CHARACTERS.  */
CNVERT03 OR    @C,@B                                              0047
*         GEN(STC   R12,0(R6));     /* PUT CHAR IN OUTPUT AREA.     */
         STC   R12,0(R6)
         DS    0H
*         R6=R6+1;                  /* STEP TO ADDRESS BY 1.        */
         LA    @6,1(0,@6)                                         0049
*         AXFLGA='00'X;             /* SET FLAG TO ZERO.            */
         MVI   AXFLGA,X'00'                                       0050
* CNVERT04: /* IS MORE CONVERSION NECESSARY */
*         R5=R5+1;                  /* STEP FROM ADDRESS BY 1.      */
CNVERT04 LA    @5,1(0,@5)                                         0051
*         IF R5<ENDADDR THEN        /* IS CONVERSION DONE. NO, GO   */
         CR    @5,@2                                              0052
*           GO TO CNVERT01;         /* AND DO IT.                   */
         BC    04,CNVERT01                                        0053
*         IF LSTCNT='1'B THEN       /* YES, WAS CONVERSION FROM EH  */
         TM    15(@1),B'00000001'                                 0054
         BC    12,@9FB                                            0054
*           GEN(STC   R12,0(R6));   /* FOR AN ODD NUMBER OF CHAR.   */
         STC   R12,0(R6)
         DS    0H
*         GO TO CNVERT06;           /* NO, GO TO FINISH ROUTINE.    */
         BC    15,CNVERT06                                        0056
*                                   /* YES, PUT CONVERTED CHAR IN   */
*                                   /* OUTPUT  AREA.                */
* CNVERT05: /* HEX TO EBCDIC ROUTINE */
*         R9=INBUF;                 /* GET INPUT CHAR. INTO REG. 9. */
CNVERT05 SR    @9,@9                                              0057
         IC    @9,0(0,@5)                                         0057
*         R11=R9/16;                /* GET BIT3 0-3 OF INPUT CHAR   */
         LR    @E,@9                                              0058
         SRA   @E,4                                               0058
         LR    @B,@E                                              0058
*                                   /* INTO REG. 11.                */
*         R9=R9&15;                 /* GET BITS 4-7 OF INPUT CHAR   */
         N     @9,@D2                                             0059
*                                   /* INTO REG. 9.                 */
*         AXTBLPTR=R3+R11;          /* SET POINTER TO CHAR TABLE.   */
         LR    @7,@B                                              0060
         AR    @7,@3                                              0060
*         OUTBUF=AXATBLEL;          /* STORE FIRST EBCDIC CHAR IN   */
         MVC   0(1,@6),0(@7)                                      0061
*                                   /* OUTPUT AREA.                 */
*         AXTBLPTR=R3+R9;           /* SET POINTER TO CHAR TABLE.   */
         LR    @7,@9                                              0062
         AR    @7,@3                                              0062
*         OUTBUF1=AXATBLEL;         /* STORE SECOND EBCDIC CHAR IN  */
         MVC   1(1,@6),0(@7)                                      0063
*                                   /* OUTPUT AREA.                 */
*         R6=R6+2;                  /* STEP TO ADDRESS BY 2.        */
         LA    @6,2(0,@6)                                         0064
*         R5=R5+1;                  /* STEP FROM ADDRESS BY 1.      */
         LA    @5,1(0,@5)                                         0065
*         IF R5<ENDADDR THEN        /* IS CONVERSION DONE. NO, GO   */
         CR    @5,@2                                              0066
*           GO TO CNVERT05;         /* AND DO IT. YES, EXIT.        */
         BC    04,CNVERT05                                        0067
* CNVERT06: /* FINISH ROUTINE FOR SUCCESSFUL CONVERSION */
*         RC=0;                     /* SET RETURN CODE TO ZERO TO   */
CNVERT06 SR    @F,@F                                              0068
*                                   /* INDICATE SUCCESSFUL CONVERT. */
* CNVERT07: /* RESTORE REGISTERS AND RETURN */
*         RETURN;                   /* RETURN TO CALLER             */
*         END;
@EL01    L     @E,12(0,@D)                                        0070
         LM    @0,@C,20(@D)                                       0070
         BCR   15,@E                                              0070
@DATA1   EQU   *
@0       EQU   00                  EQUATES FOR REGISTERS 0-15
@1       EQU   01
@2       EQU   02
@3       EQU   03
@4       EQU   04
@5       EQU   05
@6       EQU   06
@7       EQU   07
@8       EQU   08
@9       EQU   09
@A       EQU   10
@B       EQU   11
@C       EQU   12
@D       EQU   13
@E       EQU   14
@F       EQU   15
@D2      DC    F'15'
@D1      DC    H'-1'
         DS    0F
         DS    0D
@DATA    EQU   *
PL       EQU   00000001            FULLWORD POINTER REGISTER
ENDADDR  EQU   00000002            FULLWORD POINTER REGISTER
R3       EQU   00000003            3  BYTE  POINTER REGISTER
R5       EQU   00000005            3  BYTE  POINTER REGISTER
R6       EQU   00000006            3  BYTE  POINTER REGISTER
AXTBLPTR EQU   00000007            FULLWORD POINTER REGISTER
R7       EQU   00000007            FULLWORD POINTER REGISTER
R8       EQU   00000008            FULLWORD POINTER REGISTER
I        EQU   00000009            3  BYTE  POINTER REGISTER
R9       EQU   00000009            FULLWORD POINTER REGISTER
R11      EQU   00000011            FULLWORD POINTER REGISTER
R12      EQU   00000012            FULLWORD POINTER REGISTER
RC       EQU   00000015            3  BYTE  POINTER REGISTER
LOW15    EQU   *                   4 BYTE(S) ON WORD
         DC    X'00007FFF'
PARMLIST EQU   00000000            16 BYTE(S) ON WORD
FROMADDR EQU   PARMLIST+00000000   FULLWORD POINTER
TOADDR   EQU   PARMLIST+00000004   FULLWORD POINTER
A00000   EQU   PARMLIST+00000008   FULLWORD POINTER
A00001   EQU   PARMLIST+00000012   2 BYTE(S)
FLGCOUNT EQU   PARMLIST+00000014   HALFWORD POINTER
HEXBIT   EQU   PARMLIST+00000014   1 BIT(S)
A00002   EQU   PARMLIST+00000014   14 BIT(S)
LSTCNT   EQU   PARMLIST+00000015   1 BIT(S)
AXATBL   EQU   *                   16 BYTE(S)
         DC    C'0123456789ABCDEF'
AXFLGA   EQU   @DATA+00000020      1 BYTE(S)
INBUF    EQU   00000000            1 BYTE(S)
OUTAREA  EQU   00000000            2 BYTE(S)
OUTBUF   EQU   OUTAREA+00000000    1 BYTE(S)
OUTBUF1  EQU   OUTAREA+00000001    1 BYTE(S)
AXATBLEL EQU   00000000            1 BYTE(S)
         ORG   @DATA
         DS    00000021C
@TEMPS   DS    0F
@TEMP2   DC    F'0'
@DATEND  EQU   *
@9FB     EQU   CNVERT06
CNVERT07 EQU   @EL01
         END
