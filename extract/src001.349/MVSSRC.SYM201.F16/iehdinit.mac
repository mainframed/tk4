         TITLE 'IEHDINIT -- INITIALIZATION MODULE FOR IEHDREST'
         COPY  LCGASMSW
IEHDINIT CSECT
*                                                                     *
*D 185600-900                                                  @ZM42083
*STATUS CHANGE LEVEL 001                                              *
*                                                                     *
*A111230                                                       @ZM40088
*A111214-111222                                                @ZM40425
*D111230                                                       @ZM40425
*FUNCTION/OPERATION- THIS ROUTINE WILL INITIALIZE THE CONTROL BLOCKS  *
*   AND WORK AREAS FOR THE RESTORE FUNCTION. THE DATA CONTROL BLOCKS  *
*   ARE OPENED AND THE 'TO' DEVICE IS TESTED FOR UNEXPIRED AND/OR     *
*   PASSWORD PROTECTED DATA SETS.                                     *
*                                                                     *
*ENTRY POINTS-  THE ONLY ENTRY POINT IS -IEHDINIT-, AND CONTROL IS    *
*   ALWAYS RECEIVED FROM THE MONITOR ROUTINE(IEHDASDS).               *
*                                                                     *
*INPUT-  POINTERS TO A WORKAREA(REGISTER 12) AND TO A CONTROL         *
*   BLOCK(REGISTER 10).                                               *
*                                                                     *
*EXITS-NORMAL- A SUCCESSFUL RESTORE RESULTS IN A RETURN TO THE        *
*   MONITOR(IEHDASDS) WITH A RETURN CODE OF 0. A RESTORE COMPLETE     *
*   MESSAGE IS ALSO PLACED IN THE MESSAGE DATA SET.                   *
*                                                                     *
*EXITS-ERROR-  ANY ERROR ENCOUNTERED IS DESCRIBED BY AN APPROP-       *
*   IATE MESSAGE TO THE MESSAGE DATA SET. A RETURN CODE GREATER       *
*   THAN ZERO WILL ALSO BE PASSED BACK TO THE MONITOR.                *
*                                                                     *
*EXTERNAL ROUTINES-  THIS ROUTINE IS ALWAYS ENTERED FROM THE          *
*   MONITOR ROUTINE (IEHDASDS). ALL MESSAGES ARE BUILT BY -IEHDMSGB-  *
*   AND WRITTEN OUT BY -IEHDPRNT-. ALL DEVICE CONSTANTS REFERENCED    *
*   ARE IN -IEHDCONS-. EXPIRATION DATE AND SECURITY TESTS ARE MADE    *
*   BY -IEHDPASS-. THE ACTUAL RESTORE FUNCTION IS EXECUTED IN         *
*   MODULE -IEHDREST-.                                                *
*                                                                     *
*TABLES/WORK AREAS-  UPON ENTRY, REGISTERS 10 AND 12 POINT TO A       *
*   FUNCTION BLOCK AND WORK AREA RESPECTIVELY. THEY ARE DESCRIBED     *
*   IN THE DSECTS CALLED -FUNCBLK- AND -WORK-.                        *
*   THIS ROUTINE MUST ALSO SECURE BUFFER SPACE FOR READING IN TAPE    *
*   RECORDS. THE PROGRAM ATTEMPTS TO GET TWO BUFFERS BUT CAN GET      *
*   BY WITH ONE.                                                      *
*   IF COPIES ARE BEING MADE FROM THE RESTORE TAPE, THERE WILL ALSO   *
*   BE ONE OR MORE COPY BLOCKS CHAINED FROM THE FUNCTION BLOCK. SEE   *
*   THE -COPYBLK- DSECT FOR A DESCRIPTION.                            *
*                                                                     *
*ATTRIBUTES- SERIALLY REUSABLE,RELOCATABLE                            *
*                                                                     *
***********************************************************************
         EJECT
***********************************************************************
*                                                                     *
*   THE FOLLOWING ARE REGISTER ASSIGNMENTS.                           *
*                                                                     *
***********************************************************************
         SPACE
GR0      EQU   0
GR1      EQU   1
GR2      EQU   2
GR3      EQU   3
GR4      EQU   4
GR5      EQU   5
GR6      EQU   6
GR7      EQU   7
GR8      EQU   8
GR9      EQU   9
GR10     EQU   10
GR11     EQU   11
GR12     EQU   12
GR13     EQU   13
GR14     EQU   14
GR15     EQU   15
UCBPTR   EQU   9
BASEREG  EQU   11
K0       EQU   0                       DISPLACEMENT CONSTANT.
         SPACE 3
***********************************************************************
*                                                                     *
*   MESSAGE REFERENCES.                                               *
*                                                                     *
***********************************************************************
         SPACE
MESS5    EQU   5                       MESSAGE IEH805
MESS10   EQU   10                      MESSAGE IEH810
MESS11   EQU   11                      MESSAGE IEH811
MESS13   EQU   13                      MESSAGE IEH813
MESS14   EQU   14                      MESSAGE IEH814
MESS21   EQU   21                      MESSAGE IEH821
MESS30   EQU   30                      MESSAGE IEH830
         EJECT
         USING FUNCBLK,GR10
         USING IEHINIT,BASEREG
         USING WORK,GR12
         SPACE 1
IEHINIT  SAVE  (14,12),T               SAVE THE REGISTERS.
         LR    BASEREG,GR15            LOAD THE BASE REGISTER.
         LA    GR7,INITSAVE            SAVE AREA ADDRESS.
         ST    GR7,8(GR13)             ADDRESS OF NEW AREA TO OLD.
         ST    GR13,4(GR7)             ADDRESS OF OLD AREA TO NEW.
         LR    GR13,GR7                LOAD SAVE AREA ADDRESS.
         SPACE 2
         L     GR3,PTRCFUNC            POINTER TO CURRENT FUNCTION.
         TM    0(GR3),PROCESS          PREVIOUSLY UNDER WAY?
         BZ    START2                  NO--START FROM THE BEGINNING.
         B     CALLREST                RETURN TO IEHDREST.
         EJECT
***********************************************************************
*                                                                     *
*   ESTABLISH ADDRESSABILITY TO PROPER DEVICE CONSTANTS.              *
*                                                                     *
***********************************************************************
START2   L     UCBPTR,TUCBPTR          TO-UCB ADDRESS.
         USING UCB,9
         LA    GR8,DDNAME2             USED ON ERROR ONLY.
         TM    UCBTBYT3,UCB3DACC       IS THIS A DIRECT ACCESS DEVICE.
         BZ    BADPARM                 NO--MUST BE BAD PARAMETER.
         TM    SRTESTAT,SRTESYSR       THIS A SYSTEMS RESIDENCE VOLUME.
         BO    BADDEV                  YES-THIS IS NOT ALLOWED.
         SR    GR3,GR3                 CLEAR.
         AIF   ('&LIB' EQ 'LIB1').WIN01 BRCH IF OS ASSEM
         CLI   UCBTBYT4,WINCH           WINCHESTER DEVICE ?
         BNE   WINNO                    NO, BRCH
         IC    GR3,ODEVMOD              INSERT WINCH. MODEL NO.
         B     WINYES                   CONTINUE
WINNO    EQU   *
.WIN01   ANOP                          BRCH POINT FOR OS ASSEM
         IC    GR3,UCBTBYT4            UCB DEVICE TYPE CODE.
WINYES   EQU   *
         LA    GR5,KDEVSIZE            SIZE OF EACH DEVICE ENTRY.
         BCTR  GR3,0                   DECREMENT FOR PROPER INDEX.
         MR    GR4,GR3                 ENTRY SIZE TIMES INDEX VALUE.
         L     GR4,IODEVCON            BEGIN ADDRESS OF DEVICE CONSTANT
         AR    GR4,GR5                 ADDRESS OF CONSTANTS THIS DEVICE
         ST    GR4,IODEVCON            SAVE IN FUNCTION BLOCK.
         MVC   IODEVCON(1),UCBTBYT4    UCB DEVICE TYPE CODE.
         TM    UCBTBYT2,RPS            TODD HAVE RPS
         BZ    STARTIO                 NO
         OI    SEQSW+D1,RPSFEAT        YES SET RPS SWITCH
STARTIO  EQU   *
         OC    COPYPTR(4),COPYPTR      ARE THERE COPIES.
         BZ    START5                  NO--GO GET BUFFER SPACE.
         L     GR8,COPYPTR             YES-COPY BLOCK ADDRESS.
         USING COPYBLK,GR8
START9   L     UCBPTR,CUCBPTR          ADDRESS OF COPY UCB.
         TM    UCBTBYT3,UCB3DACC       IS THIS A DIRECT ACCESS DEVICE.
         BZ    BADPARM                 NO--INVALID PARAMETER.
         TM    SRTESTAT,SRTESYSR       IS THIS SYSTEMS RESIDENCE.
         BO    BADDEV                  YES-NOT ALLOWED.
         CLC   IODEVCON(1),UCBTBYT4    SAME DEVICE TYPE AS PRIMARY.
         BNE   BADCOPY                 NO--INCONSISTANT
         OC    CCOPYPTR(4),CCOPYPTR    ARE THERE MORE COPIES.
         BZ    START5                  NO--GO START PROCESSING.
         L     GR8,CCOPYPTR            ADDRESS OF NEXT COPY.
         B     START9                  GO PROCESS THIS COPY.
         DROP  8,9
         EJECT
***********************************************************************
*                                                                     *
*   THIS SECTION ATTEMPTS TO OBTAIN CORE BUFFERS FOR READING IN THE   *
*     RECORDS FROM THE RESTORE TAPE. IF TWO BUFFERS ARE OBTAINED, A   *
*     SWITCH IS SET TO INDICATE THIS. IF NO BUFFERS ARE OBTAINED,     *
*     THE 'NOCORE SWITCH IS SET FOR THAT FUNCTION.                    *
*                                                                     *
***********************************************************************
         SPACE 1
         USING CONSTANT,9
START5   L     GR9,IODEVCON            ADDRESSING FOR DEVICE CONSTANTS.
         LH    GR2,RBUFSIZE            SIZE PER BUFFER/THIS DEVICE.
         LA    GR3,BUFFPTR1            SAVE ADDRESS OF BUFFER 1 HERE.
         BAL   GR14,GETBUFF            GO GET 1ST BUFFER.
         DROP  9
         SPACE 1
         LTR   GR15,GR15               WAS CORE AVAILABLE FOR BUFFER.
         BZ    TRYTWO                  YES--SEE IF SECOND BUFFER AVAIL.
         SPACE 1
         L     GR3,PTRCFUNC            NO--POINTER TO CURRENT FUNCTION.
         OI    0(GR3),NOCORE           INDICATE NO CORE AVAILABLE.
         LA    GR15,4                  SET RETURN CODE.
         B     FINAL3                  RETURN TO MONITOR.
         SPACE 1
GETBUFF  GETMAIN EC,LV=(2),A=(3)       GET CORE FOR A BUFFER.
         BR    GR14                    RETURN.
         SPACE 1
TRYTWO   LA    GR3,BUFFPTR2            SAVE ADDRESS OF BUFFER 2 HERE.
         BAL   GR14,GETBUFF            GO TRY TO GET A 2ND BUFFER.
         LTR   GR15,GR15               WAS CORE AVAILABLE FOR SECOND.
         BP    SETUPBLK                GO SET UP THE CONTROL BLOCKS.
         MVI   BUFFSW,X'FF'            SET SWITCH TO SHOW TWO BUFFERS.
         EJECT
***********************************************************************
*                                                                     *
*   THIS ROUTINE MOVES THE NECESSARY I/O CONTROL BLOCKS INTO THE      *
*     SPECIFIED BUFFER. IT ALSO MODIFIES THE NECESSARY POINTERS AND   *
*     MOVES IN THE DDNAMES TO THE DCBS.                               *
*                                                                     *
***********************************************************************
         SPACE 1
SETUPBLK MVC   BLOCKS(RBLKSIZE),RDECB  I/O BLOCKS TO FUNCTION BLOCK.
         LA    GR9,BLOCKS              ADDRESS OF I/O BLOCKS.
         USING IOBLOCKS,9
         LA    GR3,TAPEECB             ADDRESS OF ECB.
         ST    GR3,TECBAD              SAVE IN IOB.
         LA    GR3,TAPEDCB             ADDRESS OF DCB.
         ST    GR3,TDCBAD              SAVE IN IOB.
         USING IHADCB,GR3
         MVC   DCBDDNAM(8),DDNAME1     MOVE TAPE DDNAME TO DCB.
         LA    GR3,DISKECB             ADDRESS OF DISK ECB.
         ST    GR3,DECBAD              SAVE IN IOB.
         LA    GR3,DISKDCB             ADDRESS OF DISK DCB.
         ST    GR3,DDCBAD              SAVE IN IOB.
         MVC   DCBDDNAM(8),DDNAME2     MOVE DIRECT ACCESS DDNAME TO DCB
         ST    GR10,DCBIOBAD           FUNCTION BLOCK ADDRESS TO DCB.
         L     GR3,BUFFPTR1            ADDRESS OF BUFFER 1.
         USING RBUFFER,3
         AGO   .SPEED1
         LA    GR3,CCWBUFF             SLOT TO READ IN CCW RECORD.
.SPEED1  ANOP
         LA    GR3,CCWBUFF             CLEAR HI BYTE.          @ZM00000
         ST    GR3,RDVDATA             SET ADDRESS IN READ DSCB CCW.
         MVI   RDVDATA,X'06'           RESET THE OP CODE.
         ST    GR3,TAPECCW1            SET ADDRESS IN TAPE CCW.
         MVI   TAPECCW1,2              RESET THE OP CODE.
         L     GR15,IODEVCON           ADDRESSING FOR DEVICE CONSTANTS.
         USING CONSTANT,15
         AH    GR3,CCWSIZE             ADDRESS TO READ IN DATA.
         ST    GR3,TAPEDAT1            SET ADDRESS IN TAPE CCW.
         MVI   TAPEDAT1,2              RESET THE OP CODE.
         MVC   TAPECCW1+6(2),CCWSIZE   SET TAPE CCW COUNT FOR MAXIMUM.
         MVC   TAPEDAT1+6(2),DATASIZE  SET TAPE CCW COUNT FOR MAXIMUM.
         CLI   BUFFSW,ON               THIS A BUFFERED OPERATION.
         BNE   TESTCOPY                NO--GO CHECK FOR COPIES.
         L     GR3,BUFFPTR2            YES-BUFFER 2 ADDRESS.
         USING RBUFFER,3
         ST    GR3,TAPECCW2            SET UP TAPE READ CCW.
         MVI   TAPECCW2,2              RESET THE OP CODE.
         AH    GR3,CCWSIZE             SLOT TO READ IN DATA.
         ST    GR3,TAPEDAT2            SET UP TAPE READ CCW.
         MVI   TAPEDAT2,2              RESET THE OP CODE.
         MVC   TAPECCW2+6(2),CCWSIZE   SET TAPE CCW COUNT FOR MAXIMUM.
         MVC   TAPEDAT2+6(2),DATASIZE  SET TAPE CCW COUNT FOR MAXIMUM.
         EJECT
TESTCOPY EQU   *
         OC    COPYPTR(4),COPYPTR      ARE THERE COPIES.
         BZ    TESTTAPE                NO--GO START ON THE TAPE.
         DROP  9
         L     GR9,COPYPTR             YES-POINTER TO FIRST COPY BLOCK.
         USING COPYBLK,GR9
MORE2    MVC   CIOBLOCK(116),RDECB     MOVE IN THE I/O CONTROL BLOCKS.
         LA    GR7,CIOBLOCK            ADDRESS OF COPY I/O BLOCKS.
         USING IOBLOCKS,GR7
         LA    GR3,DISKECB             COPY ECB ADDRESS.
         ST    GR3,DECBAD              STORE IN COPY IOB.
         LA    GR3,DISKDCB             COPY DCB ADDRESS.
         USING IHADCB,GR3
         ST    GR3,DDCBAD              DCB ADDRESS TO IOB.
         MVC   DCBDDNAM(8),DDNAME3     DDNAME TO DCB.
         ST    GR10,DCBIOBAD           FUNCTION BLOCK ADDRSS TO DCB.
         OC    CCOPYPTR(4),CCOPYPTR    ARE THERE MORE COPIES.
         BZ    TESTTAPE                NO--GO START ON THE TAPE.
         L     GR9,CCOPYPTR            YES-ADDRSSS OF NEXT COPY BLOCK.
         B     MORE2                   GO PROCESS MORE COPIES.
         DROP  3,7,9,15
         EJECT
***********************************************************************
*                                                                     *
*   THIS ROUTINE OPENS THE DATA CONTROL BLOCKS FOR ALL DIRECT         *
*     ACCESS DEVICES INVOLVED. OPEN IS ALWAYS PERFORMED ON THE        *
*     FORMAT 4 DSCB OF THE VTOC.                                      *
*                                                                     *
*        REGISTERS 2,5,8,9 ARE WORK REGISTERS.                        *
*        REGISTER  14 IS THE RETURN REGISTER.                         *
*                                                                     *
***********************************************************************
         SPACE 2
OPENJ    MVC   LIST+1(3),BUFFPTR1+1    BUFFER ADDRESS TO READ JFCB LIST
         OC    COPYPTR(4),COPYPTR      COPIES//MORE THAN ONE TO OPEN.
         BZ    OPEN3                   NO--JUST OPEN ON ONE DEVICE.
         L     GR9,COPYPTR             ADDRESS OF 1ST OR ONLY COPY.
         USING COPYBLK,GR9
OPEN2    LA    GR8,CIOBLOCK            I/O BLOCKS//THIS DEVICE.
         BAL   GR2,OPEN1               GO OPEN THE DCB FOR THIS DEVICE.
         OC    CCOPYPTR(4),CCOPYPTR    ARE THERE MORE COPIES.
         BZ    OPEN3                   NO--GO OPEN THE FIRST DEVICE.
         L     GR9,CCOPYPTR            ADDRESS OF NEXT COPY BLOCK.
         B     OPEN2                   REPEAT OPENJ ON OTHER DEVICES.
OPEN3    LA    GR8,BLOCKS              I/O BLOCKS FOR UNIT DEVICE.
         BAL   GR2,OPEN1               GO OPEN DCB FOR UNIT DEVICE.
         BR    GR14                    RETURN.
         DROP  GR9
         SPACE
         USING IOBLOCKS,GR8
OPEN1    MVC   OPENLD+1(3),DDCBAD+1    DA DCB ADDRESS FOR OPEN LIST.
         RDJFCB MF=(E,OPENLD)
         L     GR5,BUFFPTR1            ADDRESS JFCB WAS READ INTO.
         USING JFCB,GR5
         MVI   JFCBDSNM,X'04'          SET DSNAME FIELD FOR
         MVC   JFCBDSNM+1(43),JFCBDSNM   FORMAT 4 DSCB.
         MVI   JFCBTSDM,X'08'          PREVENT WRITE-BACK OF JFCB.
         OPEN  MF=(E,OPENLD),TYPE=J
         L     GR5,OPENLD              DIRECT ACCESS DCB ADDRESS.
         USING IHADCB,5
         TM    DCBOFLGS,X'10'          WAS THERE A SUCCESSFUL OPEN.
         BZ    NOOPEN                  NO--GIVE AN ERROR MESSAGE.
         NI    DCBMACRF+1,X'F3'        SET BITS OFF TO PREVENT CLOSE
*                                        FROM WRITING AN EOF RECORD
*                                        AND UPDATING THE DSCB.
         BR    GR2                     RETURN.
         DROP  GR5,GR8
         EJECT
***********************************************************************
*                                                                     *
*   THIS ROUTINE OPENS THE TAPE FOR INPUT.                            *
*                                                                     *
***********************************************************************
         SPACE
TESTTAPE L     UCBPTR,FUCBPTR          FROM UCB ADDRESS.
         USING UCB,9
         TM    UCBTBYT3,UCB3TAPE       IS THIS A TAPE DEVICE.
         BZ    BADTAP                  NO--MUST BE BAD PARAMETER.
         LH    GR8,SRTEFSCT            TAPE DATA SET SEQ. COUNT.
         LA    GR9,BLOCKS              ADDRESS OF I/O BLOCKS.
         USING IOBLOCKS,9
         SPACE 1
         L     GR5,TDCBAD              TAPE DCB ADDRESS.
         OPEN  ((5),(INPUT))           OPEN TAPE DCB.
         L     GR5,TDCBAD              TAPE DCB ADDRESS.
         USING IHADCB,GR5
         TM    DCBOFLGS,X'10'          WAS THERE A SUCCESSFUL OPEN.
         BZ    NOOPEN                  NO--GIVE AN ERROR MESSAGE.
         MVC   LIST+1(3),BUFFPTR1+1    BUFFER ADDRESS TO DCB LIST.
         L     GR5,TDCBAD              TAPE DCB ADDRESS.
         RDJFCB ((5))                  READ JFCB FOR TAPE.
         L     GR3,BUFFPTR1            ADDRESS OF JFCB.
         USING JFCB,3
         MVC   VOLNUMB,JFCBVLCT        MOVE VOL CNT TO WORKAREA SA65804
         OC    VOLNUMB,JFCBNVOL        ALSO VOL SER COUNT.       YM7437
         TM    JFCBLTYP,X'11'          UNLABELED OR BLP TAPE.
         BC    5,PROCDA                YES--MUST BE SOME KIND OF LABEL.
         OI    SWITCH,STDLABEL         INDICATE USING NL TAPE(S).
         DROP  3
PROCDA   BAL   GR14,OPENJ              GO OPEN ON DIRECT ACCESS DEVICE.
         LA    GR9,BLOCKS              I/O CONTROL BLOCKS.
         BAL   GR14,FORMAT4            GO READ IN THE FORMAT 4.
         MVC   ALTDATA(6),0(GR3)       SAVE THE ALTERNATE DATA.
         OC    COPYPTR(4),COPYPTR      ARE THERE COPIES.
         BZ    CALLREST               NO--GO MAKE SECURITY TEST.
         L     GR7,COPYPTR             YES-POINTER TO FIRST COPY.
         USING COPYBLK,GR7
MORE4    EQU   *                                                OX03063
         LTR   GR7,GR7                 COPIES ?                 OX03063
         BZ    CALLREST                NO, CALL IEHDREST        OX03063
         LA    GR9,CIOBLOCK            ADDRESS OF I/O BLOCKS.   OX03063
         BAL   GR14,FORMAT4            GO READ IN THE FORMAT4.
         MVC   CALTDATA(6),0(GR3)      SAVE THE ALTERNATE DATA.
         OC    CCOPYPTR(4),CCOPYPTR    ARE THERE MORE COPIES.
         BZ    CALLREST               NO--GO MAKE SECURITY TEST OX03063
         L     GR7,CCOPYPTR            YES-POINTER TO NEXT COPY.
         B     MORE4                   GO READ IN THE FORMAT FOUR.
         EJECT
***********************************************************************
*                                                                     *
*        IEHDREST IS CALLED AT THIS POINT                             *
*                                                                     *
***********************************************************************
         SPACE 2
CALLREST EQU   *
VOLRST   CALL  IEHDREST                 GO TO RESTORE MODULE   @ZM00000
         SPACE 2
RSTRTN   ST    GR15,RETCODE             SAVE RETURN CODE       @ZM00000
         L     GR3,PTRCFUNC             POINTER TO CURRENT FUNCTION.
         TM    0(GR3),COMPLETE          IS FUNCTION COMPLETE?
         BO    CLOSE                    YES, CLOSE DCB AND FREE CORE.
         SPACE
         LA    GR15,0                   NO, SET RETURN CODE FOR MONITOR
         B     FINAL3                   RETURN TO MONITOR.
         EJECT
***********************************************************************
*                                                                     *
*   THIS SECTION READS IN THE FORMAT 4 DSCB FROM THE VTOC.            *
*   THE ALTERNATE TRACK INFORMATION IS SAVED FOR THAT VOLUME.         *
*                                                                     *
*   REGISTER 3 WILL RETURN A POINTER TO THE 6 BYTES OF ALTERNATE DATA.*
*   REGISTER 9 MUST POINT TO THE I/O CONTROL BLOCKS FOR THIS DEVICE.  *
*   REGISTER 14 IS THE RETURN REGISTER.                               *
***********************************************************************
         SPACE 1
         USING IOBLOCKS,9
         USING IHADCB,GR8
FORMAT4  LA    GR8,DISKDCB             ADDRESS FOR DCB.
         L     GR1,DCBDEBAD            ADDRESS OF DEB.
         MVC   CCHH(4),38(GR1)         CCHH OF VTOC TO IOB.
* GET THE ADDRESS OF THE VTOC  THE FOLLOWING NECESSARY CCHH UNALIGNED
         MVI   R,1                     SET SEARCH FOR RECORD ONE.
         LA    GR3,DSEEK+3             SEARCH ADDRESS.
         ST    GR3,READVTOC            SEARCH ADDRESS TO SEARCH CCW.
         MVI   READVTOC,X'31'          RESET THE CCW OP CODE.
         LA    GR3,READVTOC            CCW ADDRESS//READ VTOC.
         TM    SEQSW+D1,RPSFEAT        TODD HAVE RPS?
         BZ    SETRR                   NO.
         LA    GR3,SETCCW              YES,SETUP ADDR OF
*                                      SET SECTOR CCW FOR IOB.
         LA    GR1,READVTOC            GET TIC ADDRESS.
         ST    GR1,SECTIC              PUT IN TIC.
         MVI   SECTIC,X'08'            RESTORE TIC CMD.
SETRR    EQU   *
         ST    GR3,DCCWAD              SET UP IOB.
         EXCP  DISKIOB                 READ IN THE FORMAT 4 DSCB.
         WAIT  ECB=DISKECB             AWAIT COMPLETION.
         CLI   DISKECB,GOOD            ANY ERRORS.
         BNE   IOERR                   NO--I/O ERROR.
         MVI   R,0                     RESET RECORD NO. TO ZERO.
         L     GR3,RDVDATA             ADDRESS OF FORMAT 4 DATA.
         LA    GR3,8(GR3)              ADDRESS OF ALTERNATE DATA.
         BR    GR14                    RETURN.
         DROP  8,9
         EJECT
***********************************************************************
*                                                                     *
*                ALL MESSAGES ARE BUILT HERE.                         *
*                                                                     *
***********************************************************************
         SPACE
BADDEV   LA    GR1,MESS14              MESSAGE 814.
         BAL   GR9,BUILD               GO MOVE MESSAGE TO BUFFER.
         MVC   MESS+8(10),FUNCTION     FUNTION TYPE TO MESSAGE.
BADDEV1  MVC   0(8,GR1),0(GR8)         DDNAME TO MESSAGE.
         B     MSGWRT                  GO WRITE OUT THE MESSAGE.
         SPACE 1
BADPARM  LA    GR1,MESS10              MESSAGE 810.
         BAL   GR9,BUILD               GO MOVE MESSAGE TO BUFFER.
         B     BADDEV1                 COMPLETE MESSAGE AND WRITE OUT.
         SPACE
BADCOPY  LA    GR1,MESS21              MESSAGE 821.
         BAL   GR9,BUILD               PLACE MESSSAGE IN BUFFER.
         USING COPYBLK,GR8
         MVC   0(8,GR1),DDNAME3        PLACE DDNAME IN MESSAGE.
         B     MSGWRT                  GO WRITE OUT THE MESSAGE.
         DROP  GR8
         SPACE
         USING IOBLOCKS,GR9
IOERR    LA    GR3,DISKIOB             IOB ADDRESS.
         DROP  9
         LA    GR1,MESS13              MESSAGE 813.
         BAL   GR9,BUILD               PLACE MESSAGE HEADING IN BUFFER.
         LR    GR1,GR3                 IOB ADDRESS.
         SYNADAF ACSMETH=EXCP,PARM1=(1)
         MVC   MESS+22(78),49(GR1)     MOVE SYNAD MESS TO BUFFER SM4350
         SYNADRLS
         BAL   GR9,MSGWRT1             WRITE OUT I/O ERROR MSG.
UNUSABLE LA    GR3,DDNAME2             DDNAME FOR MESSAGE.
         BAL   GR4,MSGWRTA             GO TO SET UP AND PRINT MESSAGE.
         OC    COPYPTR(4),COPYPTR      ANY COPIES.
         BZ    FINAL4                  NO--BRANCH.
         USING COPYBLK,GR3
         L     GR3,COPYPTR             PTR TO 1ST OR ONLY COPY BLK.
UNUSE    BAL   GR4,MSGWRTA             GO TO SET UP AND PRINT MSG.
         OC    CCOPYPTR(4),CCOPYPTR    MORE COPIES.
         BZ    FINAL4                  NO--BRANCH.
         L     GR3,CCOPYPTR            YES-PTR TO NEXT COPY BLK.
         B     UNUSE                   CONTINUE PROCESSING.
         SPACE
BUILD    LINK  EP=IEHDMSGB
         BR    GR9                     RETURN.
         SPACE
MSGWRT1  EQU   *
         LINK  EP=IEHDPRNT             WRITE OUT THE MESSAGE.
         BR    GR9                     RETURN.
         SPACE
MSGWRTA  LA    GR1,MESS30              MESSAGE 830.
         BAL   GR9,BUILD               GO TO SET UP MSG.
         MVC   0(8,GR1),0(GR3)         DDNAME TO MESSAGE.
         BAL   GR9,MSGWRT1             GO TO PRINT MSG.
         BR    GR4                     RETURN TO CALLER.
         SPACE
BADTAP   LA    GR1,MESS11              MESSAGE 811.
         BAL   GR9,BUILD               PLACE MESSAGE IN BUFFER.
         MVC   0(8,GR1),DDNAME1        DDNAME TO MESSAGE.
         B     MSGWRT                  GO WRITE OUT THE MESSAGE.
         SPACE
NOOPEN   LA    GR1,MESS5               MESSAGE 805.
         BAL   GR9,BUILD               PLACE MESSAGE IN BUFFER.
         USING IHADCB,GR5
         MVC   0(8,GR1),DCBDDNAM       MOVE DDNAME TO MESSAGE.
         DROP  GR5
         SPACE
MSGWRT   EQU   *
         BAL   GR9,MSGWRT1              GO WRITE ERROR MESSAGE.
FINAL4   EQU   *
         LA    GR15,8                   SET UP THE RETURN CODE.
         ST    GR15,RETCODE             SAVE THE RETURN CODE.
         EJECT
***********************************************************************
*                                                                     *
*   THIS ROUTINE CLOSES THE DATA CONTROL BLOCKS FOR ALL DIRECT        *
*     ACCESS DEVICES AND THE ONE TAPE DEVICE USED BY RESTORE. IF      *
*     THE DCBS HAD NOT BEEN OPENED WHEN THIS ROUTINE IS CALLED,       *
*     NO ACTION IS PERFORMED.                                         *
*                                                                     *
*        REGISTERS 2,5,8,9 ARE WORK REGISTERS.                        *
*                                                                     *
***********************************************************************
         SPACE 2
         USING IHADCB,GR5
         USING IOBLOCKS,GR9
CLOSE    LA    GR9,BLOCKS              ADDR PRIMARY I/O BLOCKS.
         L     GR5,DDCBAD              ADDR. UNIT DCB.
         BAL   GR2,CLOSE1              GO TO CLOSE THIS DEVICE.
         L     GR5,TDCBAD              FROM DCB.
         TM    DCBOFLGS,X'10'          DEVICE EVER OPENED.
         BZ    FINALR1                 NO, GO FREE CORE.
         OI    DCBOFLGS,X'04'          INDICATE TAPE MARK READ.
         BAL   GR2,CLOSE2              GO TO CLOSE THIS DCB.
         OC    COPYPTR(4),COPYPTR      COPIES REQUESTED.
         BZ    FINALR1                 NO, GO FREE CORE.
         L     GR8,COPYPTR             PTR. TO FIRST COPY BLOCK.
         USING COPYBLK,GR8
CLOSEA   LA    GR9,CIOBLOCK            ADDR COPY I/O BLOCK.
         L     GR5,DDCBAD              ADDR. OF COPY DCB.
         BAL   GR2,CLOSE1              GO TO CLOSE THIS DCB.
         OC    CCOPYPTR(4),CCOPYPTR    MORE COPIES?
         BZ    FINALR1                 NO, GO FREE CORE.
         L     GR8,CCOPYPTR            PTR. TO NEXT COPY BLOCK.
         B     CLOSEA                  CONTINUE TILL ALL DCBS CLOSED.
         SPACE
CLOSE1   TM    DCBOFLGS,X'10'          DEVICE EVER OPENED.
         BCR   8,GR2                   NO--RETURN.
CLOSE2   CLOSE ((5))                   CLOSE THIS DCB.
         BR    GR2                     RETURN.
         DROP  GR5,GR8,GR9
         EJECT
***********************************************************************
*                                                                     *
*   THIS SECTION FREES THE CORE THAT WAS USED FOR BUFFERS, IF ANY.    *
*                                                                     *
***********************************************************************
         SPACE
FINALR1  CLC   BUFFPTR1(4),ZERO        ARE THERE ANY BUFFERS ASSIGNED.
         BE    FINALR2                 NO--RETURN TO MONITOR.
         L     GR1,BUFFPTR1            ADDRESS OF FIRST BUFFER.
         BAL   GR8,FREEBUF             GO FREE BUFFER ONE.
         CLI   BUFFSW,ON               IS THIS A BUFFERED OPERATION.
         BNE   FINALR2                 NO--GO RETURN TO MONITOR.
         L     GR1,BUFFPTR2            ADDRESS OF 2ND BUFFER.
         BAL   GR8,FREEBUF             GO FREE SECOND BUFFER.
         B     FINALR2                 RETURN TO MONITOR
         USING CONSTANT,9
FREEBUF  L     GR9,IODEVCON            ADDRESS OF DEVICE CONSTANTS.
         LA    GR1,0(GR1)              INSURE HIGH ORDER BYTE CLEARED.
         LH    GR0,RBUFSIZE            PICK UP BUFFER SIZE.
         FREEMAIN R,LV=(0),A=(1)       FREE CORE.
         BR    GR8                     RETURN.
         DROP  GR9
         SPACE 1
FINALR2  EQU   *
         L     GR15,RETCODE            LOAD RETURN CODE
         SPACE
FINAL3   L     GR13,INITSAVE+4         RESTORE REGISTER 13.
         RETURN (14,12),T,RC=(15)      RESTORE/RETURN W/PROPER CODE.
         EJECT
***********************************************************************
*                                                                     *
*                         DEFINED CONSTANTS                           *
*                                                                     *
***********************************************************************
         SPACE
OPENLD  RDJFCB (,(OUTPUT)),MF=L        PARAMETER LIST FOR OPEN DA.
LIST     DS    0F                      FOR READ IN OF JFCB.
         DC    X'87'
         DC    AL3(0)
F1       DC    F'1'                    USED TO INCREMENT TRACK ADDRESS.
ZERO     DC    F'0'
RETCODE  DC    F'0'
GOOD     EQU   X'7F'                   NO ERRORS ON I/O.
ON       EQU   X'FF'                   SWITCH ON.
RPS      EQU   X'10'                   TEST FOR UCB RPS FEATURE
RPSFEAT  EQU   X'40'                   RPS FEATURE SWITCH
WINCH    EQU   X'0A'                   UCB DEVICE TYPE
FUNCTION DC    C'RESTORE TO'           MESSAGE FILL IN.
SETCCW   CCW   X'23',F1,X'40',1        SET SECTOR ZERO
SECTIC   CCW   8,0,0,0
         SPACE
READVTOC CCW   X'31',0,X'60',5         SEARCH ON RECORD 1 OF VTOC.
         CCW   8,READVTOC,0,0          REPEAT UNTIL FOUND.
RDVDATA  CCW   6,0,X'20',96            READ FORMAT 4 DATA.
         EJECT
***********************************************************************
*                                                                     *
*                          CONTROL BLOCKS                             *
*                                                                     *
***********************************************************************
         SPACE
*   RESTORE DA WRITE-OUT ECB.                                         *
         DS    0D                      NECESSARY ALIGNMENT.
RDECB    DC    F'0'                    WAIT//COMPLETE BITS
*   RESTORE DA WRITE-OUT IOB.
RDIOB    DS    0F
RDFLAGS  DC    XL2'4200'               FLAG1 AND FLAG2.
RDSENSE  DC    H'0'                    SENSE BYTES.
RDECBAD  DC    A(RDECB)                ECB ADDRESS.
RDSTATUS DC    2F'0'                   CHANNEL STATUS.
RDCCWAD  DC    A(0)                    CCW ADDRESS.
RDDCBAD  DC    A(RDDCB)                DCB ADDRESS.
RDRESAD  DC    F'0'                    RESTART ADDRESS.
RDBLKCT  DC    H'1'                    BLOCK COUNT INCREMENT.
RDERROR  DC    H'0'                    ERROR COUNT.
RDSEEK   DC    2F'0'                   MBBCCHHR.
*   RESTORE DA WRITE-OUT DCB.
         AIF   ('&LIB' EQ 'LIB1').OSDCB
RDDCB    DCB   DSORG=PS,MACRF=(E),DEVD=DA,EXLST=LIST,EOEA=P8,          C
               XENDA=P9,SIOA=P7,PGFX=YES
         AGO   .C1
.OSDCB   ANOP
RDDCB    DCB   DSORG=PS,MACRF=(E),DEVD=DA,EXLST=LIST,EOEA=P8
.C1      ANOP
*   RESTORE TAPE READ-IN ECB.
RTECB    DS    1F                      WAIT//COMPLETE BITS PLUS CODE.
*   RESTORE TAPE READ-IN IOB.
RTIOB    DS    0F                      RESTORE.
FLAGS    DC    XL2'4200'               FLAG1 AND FLAG2.
SENSE    DC    H'0'                    SENSE BYTES.
ADECB    DC    A(RTECB)                ECB ADDRESS.
STATUS   DC    2F'0'                   CHANNEL STATUS.
CCWS     DC    A(0)                    ADDRESS OF CCWS.
DCBAD    DC    A(RTDCB)                DCB ADDRESS
RESTART  DC    F'0'                    RESTART ADDRESS.
BLKCT    DC    H'1'                    BLOCK COUNT INCREMENT.
TERROR1  DC    H'0'                    ERROR COUNT.
         SPACE 1
         SPACE 1
RTDCB    DCB   DSORG=PS,MACRF=(E),DEVD=TA,EXLST=LIST,TRTCH=C
R1CCW    CCW   2,0,X'60',X'FFFF'       READ CCWS INTO BUFFER ONE.
R1DATA   CCW   2,0,X'20',X'FFFF'       READ DATA INTO BUFFER ONE.
         SPACE
R2CCW    CCW   2,0,X'60',X'FFFF'       READ CCWS INTO BUFFER TWO.
R2DATA   CCW   2,0,X'20',X'FFFF'       READ DATA INTO BUFFER TWO.
RDLSTBLK DS    0H                      END OF CONTROL BLOCKS
RBLKSIZE EQU   RDLSTBLK-RDECB          SIZE OF I/O BLOCKS--RESTORE.
INITSAVE DC    18F'0'                  REG SAVE AREA FOR IEHDINIT
D1       EQU   1                       DISP OF 1
MAINT    DS    100X                    ZAP FIX AREA.
         EJECT
IOBLOCKS DSECT
*   RESTORE DA WRITE-OUT ECB.
DISKECB  DS    1F                      WAIT//COMPLETE BITS PLUS CODE.
         SPACE 1
*   RESTORE DA WRITE-OUT IOB.
DISKIOB  DS    0F
DISKFLG  DS    CL2                     FLAGS 1 AND 2.
DSENSE   DS    CL2                     SENSE BYTES.
DECBAD   DS    1F                      ECB ADDRESS.
DSTATUS  DS    2F                      CHANNEL STATUS.
DCCWAD   DS    1F                      CCW LIST ADDRESS.
DDCBAD   DS    1F                      DCB ADDRESS.
DRESAD   DS    1F                      RESTART ADDRESS.
DBLKCT   DS    CL2                     BLOCK COUNT INCREMENT.
DERROR1  DS    CL2                     ERROR COUNT
DSEEK    DS    2F                      MBBCCHHR.
BB       EQU   DSEEK+1                 BIN ADDRESS.
CCHH     EQU   DSEEK+3                 CYLINDER-HEAD ADDRESS.
R        EQU   DSEEK+7                 RECORD NUMBER.
         SPACE 1
*   RESTORE DA WRITE-OUT DCB.
DISKDCB  DS    18F
         SPACE 2
*   RESTORE TAPE READ-IN ECB.
TAPEECB  DS    1F                      WAIT//COMPLETE BITS PLUS CODE.
         SPACE 1
*   RESTORE TAPE READ-IN IOB.
TAPEIOB  DS    0F
TAPEFLG  DS    CL2                     FLAGS 1 AND 2.
TSENSE   DS    CL2                     SENSE BYTES.
TECBAD   DS    1F                      ECB ADDRESS
TSTATUS  DS    2F                      CHANNEL STATUS.
TCCWAD   DS    1F                      CCW LIST ADDRESS.
TDCBAD   DS    1F                      DCB ADDRESS.
TRESAD   DS    1F                      RESTART ADDRESS.
TBLKCT   DS    CL2                     BLOCK COUNT INCREMENT.
TERROR   DS    CL2                     ERROR COUNT
         SPACE 1
*   RESTORE TAPE READ-IN DCB NUMBER ONE.
TAPEDCB  DS    13F
         SPACE 1
*   CCWS TO READ-IN RESTORE TAPE.
         DS    0D                      ALIGNMENT.
TAPECCW1 DS    CL8                     USED TO READ CCW RECORD.
TAPEDAT1 DS    CL8                     USED TO READ DATA RECORD.
TAPECCW2 DS    CL8                     USED TO READ CCW RECORD.
TAPEDAT2 DS    CL8                     USED TO READ DATA RECORD.
IOBLKEND DS    0H                      END OF IOBLOCKS DSECT.
          EJECT
         IEHDBLKS
         EJECT
         IEHDWORK
         SPACE
VLABEL   DSECT
VOLUME   DS    CL3                     LABEL IDENTIFIER.
VOLNO    DS    CL1                     LABEL NUMBER.
SERIAL   DS    CL6                     LABEL SERIAL NUMBER.
SECURITY DS    CL1                     VOLUME SECURITY.
VTOCPTR  DS    CL10                    POINTER TO VTOC
         DS    CL20                    RESERVED.
OWNER    DS    CL10                    OWNER IDENTIFICATION.
         DS    CL29                    BLANK.
         SPACE
RBUFFER  DSECT
ZERO1    DS    CL8                     WILL CONTAIN 8 BYTES OF ZEROS.
CCWBUFF  EQU   ZERO1
TICSW    DS    CL1                     'FF' INDICATES PREVIOUS CCW=TIC.
         DS    CL3                     NOT USED.
ADDRESS  DS    CL4                     TEMPORARY ADDRESS HOLDER.
SEEKCCW  DS    CL8                     SEEK CCW FOR STAND-ALONE.
SETMASK  DS    CL8                     SET FILE MASK FOR STAND-ALONE.
SEARIDE  DS    CL8                     SEARCH EQUAL ID CCW.
*   VARIOUS CCW COMBINATIONS CAN FOLLOW FROM THIS POINT ON.
         EJECT
CVT      DSECT
         CVT   SYS=MIN
         EJECT
UCB      DSECT
         IEFUCBOB
         EJECT
JFCB     DSECT
         IEFJFCBN
         EJECT
         DCBD  DSORG=PS
         END
