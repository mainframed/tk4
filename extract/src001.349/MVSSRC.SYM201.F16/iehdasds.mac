 TITLE 'IEHDASDS --- MONITOR FOR IEHDASDR UTILITY PROGRAM'
         COPY  LCGASMSW                                          X02912
IEHDASDS CSECT
***********************************************************************
*                  FIXES THIS MODULE
*                     LATEST FIRST
***********************************************************************
*
*C 39800,563300                     ONLY MVS                   @ZA27199
*A 563110-563120,563210,            ONLY MVS                   @ZA27199
*A 702400,880330                    ONLY MVS                   @ZA27199
*
*C 39800,768307                     ONLY MVS                   @ZA26352
*A 768303-768304                    ONLY MVS                   @ZA26352
*
*C 39800,752005,752025              ONLY MVS                   @ZA26120
*
*  DUE TO CHANGE OF MACRO IEHDBLKS  @XA16072=@YA18844=@ZA24409=@SA79773
*C 902500                           @XA16072=@YA18844=@ZA24409=@SA79773
*
*D 752180                           ONLY MVS                   @ZA11946
*C 39800,752220                     ONLY MVS                   @ZA11946
*A 752035-752100                    ONLY MVS                   @ZA11946
*
*C 39800,636240,752126              ONLY MVS                   @ZA03380
*
*C 39800,836550-836600              @SA74491=@XA10393=@YA10560=@ZA04422
*
*C 767700,768317                                               @VS40035
*A 538510,520                                                  @VS40035
*C 538600,620                                                  @Z30RSAG
*C 538788                                                      @Z30RSAG
*
*D 768387-768419,768318             @SA73428=@YA08028=@XA08859=@ZA03352
*C 39800                            @SA73428=@YA08028=@XA08859=@ZA03352
*A 768327-768351,768358,768365      @SA73428=@YA08028=@XA08859=@ZA03352
*
*C 40000,768317                     @SA73414=@XA07276=@YA07985=@ZA01705
*A 39700,39800,767720               @SA73414=@XA07276=@YA07985=@ZA01705
*
*C 768996-769000   MVS 3.0 CHANGES   16-BITS UCB SUPPORT       @30AAAG
*
*                  MVS 3.0 CHANGES   MSS SUPPORT               @Y30LSFY
*
*C 26560                                                       @ZA01214
*A 752112,752217                                               @ZA01214
*
*A768301-768302,C768812                                         YM08503
*                                       YM01130
*                                                               STAEFIX
*                                                               OX01789
*                                                               YL02912
*                                                              YM01130
* 76500016,76590016,76680016                     SA68162=XA03918=YM5770
*STATUS CHANGE LEVEL 004
*
***********************************************************************
         EJECT
*FUNCTION/OPERATION- THIS ROUTINE IS THE SECOND LOAD MODULE OF THE    *
*   IEHDASDR SYSTEM UTILITY PROGRAM AND IS IN CORE FOR THE ENTIRE     *
*   EXECUTION TIME. AFTER RECEIVING CONTROL FROM THE -IEHDASDR-       *
*   ROUTINE, THIS ROUTINE WILL ATTEMPT TO OPEN THE SYSOUT AND         *
*   SYSIN DATA SETS. IF SUCCESSFUL, IT WILL LINK TO -IEHDPRNT- TO     *
*   FORMAT AND PRINT THE HEADING, AND THEN CALL -IEHDSCAN- TO         *
*   SCAN AND SYNTAX CHECK THE SYSIN DATA SET. FOR EACH VALID REQUEST  *
*   AN ENTRY IS MADE IN THE FUNCTION QUEUE(FIFO SCHEDULING), MAIN     *
*   STORAGE ACQUIRED FOR THE FUNCTION BLOCK AND COPY BLOCKS, IF ANY,  *
*   AND CONTROL IS THEN PASSED TO THE APPROPRIATE FUNCTIONAL ROUTINE. *
*   WHEN AN ERROR IS DETECTED IN THE SYSIN DATA SET, THIS ROUTINE     *
*   WILL PLACE THE APPROPRIATE DIAGNOSTIC MESSAGE IN THE MESSAGE      *
*   DATA SET, STORE A RETURN CODE OF EIGHT, AND CONTINUE THE SCAN.    *
*                                                                     *
*   THE -IEHDASDS- ROUTINE WILL ATTEMPT TO INITIATE EXECUTION OF UP   *
*   TO SIX LIKE FUNCTIONS IF DEVICES AND CORE ARE AVAILABLE. THE      *
*   INDIVIDUAL FUNCTIONAL ROUTINES, FOR CERTAIN WAITS ON I/O          *
*   OPERATIONS, WILL RETURN CONTROL TO THE MONITOR ALLOWING THIS      *
*   ROUTINE TO INITIATE ANOTHER LIKE FUNCTION-CONCURRENT PROCESSING.  *
*                                                                     *
*   WHEN A FUNCTION COMPLETES, ITS ENTRY IS REMOVED FROM THE QUEUE,   *
*   AND ALL SUBSEQUENT ENTRIES MOVED UP. UPON COMPLETION OF ALL       *
*   REQUESTS, -IEHDASDS- FREES ALL MAIN STORAGE IT OBTAINED,          *
*   CLOSES THE SYSIN, SYSOUT DATA SETS, AND RETURNS TO THE CALLER     *
*   WITH THE HIGHEST RETURN CODE ENCOUNTERED DURING EXECUTION.        *
*                                                                     *
*ENTRY POINTS- THE ONLY ENTRY POINT IS -IEHDASDS-, AND CONTROL IS     *
*   ALWAYS RECEIVED FROM -IEHDASDR-.                                  *
*                                                                     *
*INPUT- REGISTER 1 WILL POINT TO THE WORK AREA IN WHICH THE SYSIN     *
*   AND SYSOUT DDNAMES, LINE COUNT, AND FUNCTION QUEUE SIZE ARE       *
*   ALREADY SET UP.                                                   *
*                                                                     *
*EXITS-NORMAL- SUCCESSFUL COMPLETION OF ALL REQUESTED FUNCTIONS       *
*   RESULTS IN A RETURN TO THE CALLER WITH A RETURN CODE OF ZERO.     *
*                                                                     *
*EXITS-ERROR- ANY ERRORS ENCOUNTERED ARE DESCRIBED BY APPROPRIATE     *
*   MESSAGES IN THE MESSAGE DATA SET AND A RETURN TO THE CALLER WITH  *
*   THE HIGHEST RETURN CODE ENCOUNTERED.                              *
*                                                                     *
*EXTERNAL ROUTINES- THIS ROUTINE ALWAYS RECEIVES CONTROL FROM THE     *
*   -IEHDASDR- ROUTINE. THREE CSECTS ARE USED AS UTILITY ROUTINES.    *
*   THE HEADING AND ANY MESSAGES USSUED WILL BE WRITTEN OUT BY        *
*   -IEHDPRNT- WITH MESSAGES BEING SET UP BY -IEHDMSGB-.              *
*   THE -IEHDSCAN- ROUTINE IS USED TO READ IN AND SCAN THE SYSIN      *
*   DATA SET. ALL DEVICE DEPENDENT INFORMATION IS CONTAINED IN THE    *
*   -IEHDCONS- CSECT. A POINTER TO THIS CSECT IS PROVIDED IN EACH     *
*   FUNCTION BLOCK BUILT. THE FOLLOWING ARE THE ENTRY POINTS FOR      *
*   THE FUNCTIONAL ROUTINES, LOADED INTO CORE FOR EXECUTION AND       *
*   THEN DELETED UPON COMPLETION, WHICH RECEIVE CONTROL FROM          *
*   -IEHDASDS-                                                        *
*              IEHDREST                                               *
*              IEHDANAL                                               *
*              IEHDLABL                                               *
*              IEHDGETA                                               *
*              IEHDDUMP.                                              *
*                                                                     *
*TABLES/WORK AREAS- BEFORE PASSING CONTROL TO A FUNCTIONAL ROUTINE,   *
*   -IEHDASDS- WILL POINT TO THE FUNCTION BLOCK AND THE WORK          *
*   AREA IN REGISTERS 10 AND 12 RESPECTIVELY. THEY ARE DESCRIBED      *
*   IN THE DSECTS CALLED -FUNCBLK- AND -WORK-.                        *
*                                                                     *
*ATTRIBUTES- SERIALLY REUSABLE, RELOCATABLE.                          *
*                                                                     *
*NOTE- THE VERSION LEVEL FOR THE IEHDASDR SYSTEM UTILITY              *
*   PROGRAM IS MAINTAINED IN THE -IEHDPRNT- ROUTINE AND SHOULD BE     *
*   UPDATED AS RELEASE LEVELS AND VERSIONS CHANGE.                    *
*                                                                     *
*   THE FOLLOWING ARE REGISTER ASSIGNMENTS.
GR0      EQU   0
GR1      EQU   1
GR2      EQU   2
GR3      EQU   3
GR4      EQU   4
GR5      EQU   5
GR6      EQU   6
GR7      EQU   7
GR8      EQU   8
GR9      EQU   9
GR10     EQU   10
GR11     EQU   11
GR12     EQU   12
GR13     EQU   13
GR14     EQU   14
GR15     EQU   15
SCANADR  EQU   1
LENGTH   EQU   2
ROOTBASE EQU   11
WORKBASE EQU   12
         SPACE 1
         SPACE 1
*   MESSAGE REFERENCES.
***********************************************************************
MESS0    EQU   0                       MESSAGE NUMBER(800).
MESS1    EQU   1                       MESSAGE NUMBER(801).
MESS2    EQU   2                       MESSAGE NUMBER(802).
MESS3    EQU   3                       MESSAGE NUMBER(803).
MESS4    EQU   4                       MESSAGE NUMBER(804).
MESS5    EQU   5                       MESSAGE NUMBER(805).
MESS12   EQU   12                      MESSAGE NUMBER(812).
MESS13   EQU   13                      MESSAGE NUMBER(813).
MESS18   EQU   18                      MESSAGE NUMBER(818).
MESS20   EQU   20                      MESSAGE NUMBER(820).     YM5582
MESS24   EQU   24                      MESSAGE NUMBER(824).
MESS26   EQU   26                      MESSAGE NUMBER(826).
MESS33   EQU   33                      MESSAGE NUMBER(833).    @Y30LSFY
MESS39   EQU   39                      MESSAGE NUMBER(839).
MESS51   EQU   51                      MESSAGE NUMBER(851).     XM7053
MESS54   EQU   54                      MESSAGE NUMBER(854).     YL02912
MESS55   EQU   55                      MESSAGE NUMBER(855).     YL02912
MESS59   EQU   59                      MESSAGE NUMBER(859).     YM01130
***********************************************************************
         EJECT
SENS     EQU   X'F1'                    SVC 82 FUNCTION BYTE    XL03130
DA2321   EQU   X'05'                   2321 DEVICE TYPE CODE.
BLANK    EQU   C' '
L4       EQU   4                        LENGTH CONSTANT         YL02912
L0       EQU   0                        LENGTH CONSTANT         YL02912
ENQ      EQU   X'04'                    INDIC ENQUEUE ON UCB    YL02912
DEDEB    EQU   X'F8'                    DEB TO BE DELETED      YM01130
ENQDEQ   EQU   82                       SVC 82 NUMBER           YL02912
DEBOFF   EQU   8                        OFFSET TO TCB DEBPTR    YM01130
UCBOFF   EQU   32                       OFFSET TO DEB UCBPTR   @ZA01214
ONE      EQU   X'01'                    UCB USER COUNT          XM7053
SYSINOUT EQU   X'C0'                    SYSIN/SYSOUT UCBWGT VAL YM5582
L8       EQU   8                        DDNAME LENGTH           YM5582
K0       EQU   0                        DISPL CONSTANT          YM5582
DASDI    EQU   X'20'                    UCB BYTE 3 TYPE CODE    XM7053
COND0    EQU   8                        CONDITION ZERO           YM5770
DISP0    EQU   0                        AT THE ORIGAN            YM5770
LASTCTCB EQU   4                        LAST CURRENT TCB         YM5770
ADD1     EQU   1                        INCREMENT BY ONE         YM5770
SS1VAL   EQU   X'01'                    SS/1 ANALIZE           @Y30LSFY
ON       EQU   X'FF'                    ALL FLAGS ON           @Y30LSFY
SS1VTOC  EQU   C'2'                     SS/1 VTOC START        @Y30LSFY
SS1EXT   EQU   C'1'                     SS/1 VTOC EXTENT       @Y30LSFY
L10      EQU   10                       LENGTH CONSTANT        @Y30LSFY
         AIF  ('&LIB' EQ 'LIB1').ARONDA   THIS ASSEM FOR OS      X02912
IPLSIZE  EQU   6496                     VS IPLTXT BUFFER SIZE    X02912
         AGO   .ARONDB                  BRCH AROUND OS VALUE     X02912
.ARONDA  ANOP                           BRCH POINT FOR OS CODE   X02912
IPLSIZE  EQU   3640                    BUFFER SIZE FOR IPL PROGRAM.
.ARONDB  ANOP                           BRCH POINT FOR VS CODE   X02912
         SPACE 1
         USING WORK,12                 SET UP BASE FOR WORK AREA
         USING COPYBLK,GR8
         USING IEHROOT,ROOTBASE
         USING FUNCBLK,GR10
         SPACE 1
IEHROOT  LR    GR0,GR1                 WORKAREA ADDRESS.
         L     GR1,PRINT1-WORK(GR1)    PARM  LIST POINTER.
         SAVE  (14,12),T
         LR    GR12,GR0                WORKAREA ADDRESS.
         LR    ROOTBASE,GR15           LOAD THE BASE REGISTER.
         SPACE
         LA    GR7,ROOTSAVE            SAVE AREA ADDRESS.
         ST    GR7,8(GR13)             ADDRESS OF NEW AREA TO OLD.
         ST    GR13,4(GR7)             ADDRESS OF OLD AREA TO NEW.
         LR    GR13,GR7                SAVE AREA ADDRESS.
         B     APARNO                  BRANCH AROUND APAR NO   @ZA01705
         DC    C'IEHDASDS OZ27199'     LAST APAR FIX THIS MOD  @ZA27199
APARNO   MVI   RETCODE,0               INSURE RETURN CODE ZERO.@ZA01705
         EJECT
***********************************************************************
*   THIS SECTION OPENS SYSIN AND SYSOUT DCBS.                         *
*     AND THEN LINKS TO THE PRINT ROUTINE TO                          *
*     WRITE OUT A HEADER RECORD.                                      *
***********************************************************************
HEADPRIN EQU   *
         USING IHADCB,GR4
         LA    GR4,PRINT               SYSOUT DCB ADDRESS.
         ST    GR4,PRINT1              DCB ADDRESS TO WORK AREA.
         MVC   DCBDDNAM(8),SYSOUTDD    SYSPRINT DDNAME TO DCB.
         MVI   PRNTSW,0                CLEAR EXIT ROUTINE SWITCH.
         LA    GR1,OPNLST1             ADDRESS OF OPEN LIST.
         BAL   GR9,OPENDATA            OPEN SYSPRINT.
         TM    DCBOFLGS,X'10'          WAS OPEN SUCCESSFUL.
         BZ    SETCODE                 NO--GO SET RETURN CODE.
         BAL   GR9,ERRPRINT            GO WRITE OUT HEADER MESSAGE.
         TM    PRNTSW,X'01'            YES-IS BLOCKSIZE VALID.
         BZ    HEADP2                  YES-GO OPEN SYSIN.
         LA    GR1,38                  NO--ERROR MESSAGE NUMBER.
         BAL   GR9,BUILD               LOAD BUFFER WITH ERROR MESSAGE.
         MVC   0(8,GR1),SYSOUTDD       PLACE DDNAME INTO MESSAGE.
         BAL   GR9,ERRPRINT            WRITE OUT ERROR MESSAGE.
         MVI   RETCODE,4               SET RETURN CODE.
         SPACE
HEADP2   EQU   *
         LA    GR4,READ                SYSIN DCB ADDRESS.
         ST    GR4,READ1               DCB ADDRESS TO WORK AREA.
         MVC   DCBDDNAM(8),SYSINDD     SYSIN DDNAME TO DCB.
         MVI   PRNTSW,0                CLEAR EXIT ROUTINE SWITCH.
         LA    GR1,OPNLST2             ADDRESS OF OPEN LIST.
         BAL   GR9,OPENDATA            OPEN SYSIN.
         TM    DCBOFLGS,X'10'          WAS OPEN SUCCESSFUL.
         BZ    DCBERROR                NO--GO PRINT ERROR MESSAGE.
         TM    PRNTSW,X'01'            YES-IS BLOCKSIZE VALID.
         BZ    SCANA                   YES-BEGIN SCANNING CARDS.
         LA    GR1,38                  NO--ERROR MESSAGE NUMBER.
         BAL   GR9,BUILD               PLACE MESSAGE IN BUFFER.
         MVC   0(8,GR1),SYSINDD        PLACE DDNAME IN MESSAGE.
         BAL   GR9,ERRPRINT            PRINT OUT THE MESSAGE.
         MVI   RETCODE,16              SET RETURN CODE.
         B     ENDALL                  RETURN CONTROL TO CALLLER.
         EJECT
***********************************************************************
*   THIS SECTION ISSUES THE ESTAE MACRO TO EFFECT ERROR RECOVERY      *
*   IF IEHDASDR SHOULD ABEND OR BE CANCELED BEFORE TURNING OFF THE    *
*   'SPELL BINDING' BIT: UCBNALOC. THIS BIT IS TURNED ON FOR OFFLINE  *
*   PROCESSING ONLY.                                                  *
***********************************************************************
ESTAE    EQU   *
         LA    GR4,STAESIZE       GET LIST SIZE                YM01130
         GETMAIN R,LV=(GR4)
         USING STAELIST,GR1
*
         LR    GR4,GR1                  SAVE AREA ADDR          YM01130
         L     GR9,CVTPTR              ADDRESS OF COMM. VECTOR TABL).
         USING CVT,GR9                                         YM01130
         L     GR15,CVTTCBP            TCB WORD.               YM01130
         L     GR15,D4(GR15)            PICK UP TCB ADDRESS.   YM01130
         ST    GR15,STAELIST           STORE TCB ADDR          YM01130
         ST    GR12,STAEND             SAVE IEHDWORK ADDR       STAEFIX
         MVI   STAEND,ENDPL            SET END OF P.L.          STAEFIX
         ESTAE ABNDCODE,CT,PARAM=(GR4),XCTL=NO,PURGE=NONE,             *
               ASYNCH=NO,ESTAR=NO,TERM=YES,RECORD=NO
         BR    GR7                      RETURN TO CALLER        YM01130
         DROP 1,9
         EJECT
OPENDATA EQU   *
         OPEN  MF=(E,(1))              OPEN SPECIFIED DATA SET.
         BR    GR9                     RETURN TO CALLLER.
         SPACE 2
OPNLST1  OPEN  (PRINT,(OUTPUT)),MF=L
OPNLST2  OPEN  (READ,(INPUT)),MF=L
         SPACE 2
DCBEXIT1 EQU   *
         SR    GR0,GR0                 CLEAR TEST REGISTER.
         LH    GR1,DCBBLKSI            PICK UP BLOCKSIZE.
         LH    GR2,DCBLRECL            GET LOGICAL RECORD SIZE.
         CLR   GR0,GR1                 WAS BLOCKSIZE SPECIFIED.
         BE    DCBEX2                  NO--GO MOVE IN BLOCKSIZE.
         DR    GR0,GR2                 YES-IS BLOCKSIZE VALID.
         LTR   GR0,GR0                 ANY REMAINDER.
         BCR   8,GR14                  A OK/RETURN TO OPEN.
         STH   GR2,DCBBLKSI            NO--OVERRIDE BLKSIZE FOR SYSPRIN
         OI    PRNTSW,X'01'            INDICATE INVALID BLKSIZE.
         BR    GR14                    RETURN TO OPEN.
DCBEX2   STH   GR2,DCBBLKSI            PLACE LRECL IN BLOCKSIZE.
         BR    GR14                    RETURN TO OPEN.
         DROP  GR4
         EJECT
SCANA    MVI   SWITCHRD,0         RESET CONTROL SWITCH
         SR    GR10,GR10               INDICATE NO FUNCTION BLOCK BUILT
SCAN     EQU   *                        GO SCAN CARD IMAGE
         XC    GOTOBR,GOTOBR            CLEAR GO TO BRANCH VALUE
         LINK  EP=IEHDSCAN             GO SCAN A CARD IMAGE.
         SPACE 1
* ADDITIONAL INSTRUCTIONS TO HANDLE THE REPACK FROM DASDS TO DSCAN
         LA    GR3,GOTAB                GET BRANCH TABLE ADDRESS
         A     GR3,GOTOBR               ADD VALUE DETERMINED BY DSCAN
         BR    GR3                      BRANCH TO LOCATION SPECIFIED
* THE SEQUENCE OF THIS TABLE ID DEPENDENT ON VALUES SET BY DSCAN
GOTAB    EQU   *                        START OF TABLE
         B     NORM                     GO TO OLD DASDS CODE
         B     CHECK                    GO SEE IF FINISHED
         B     SCAN1                    START PROCESSING
         B     OPRLUP                   TEST COMMAND VALIDITY
         B     GETCOPY                  PROCESS TODD COPIES
         B     MSGWRT2                  GO WRITE MESSAGE
* END OF TABLE
NORM     EQU   *                        END OF TABLE.RESUME NORMAL
         TM    SWITCHRD,ERROR          WAS THERE AN ERROR.
         BO    MSGPRT                  YES,GO GIVE A MESSAGE.
         SPACE 1
         TM    SWITCHRD,COMD           IS THIS A COMMAND.
         BO    OPRLUP                   YES-TEST VALIDITY & PROCESS
         SPACE
         TM    SWITCHRD,EOF            WAS AN EOF READ.
         BO    CHECK                   YES-GO SEE IF FINISHED.
         SPACE
SCAN2    TM    SWITCHRD,PARM           THIS A PARAMETER.
         BC    8,SCAN3                 NO--GO MAKE MORE TESTS.
         TM    SW1,DD1OK               MULTIPLE PARMS ALLOWED.
         BCR   1,GR9                   YES-PROCESS PARAMETER.
         TM    SW1,PARMXY              NO--ANY PREVIOUS PARMS.
         BO    INVALP1                 YES-THEN THIS PARAMETER INVALID.
         OI    SW1,PARMXY              REMEMBER THIS PARAMETER.
         BR    GR9                     PROCESS THIS PARAMETER.
         SPACE
SCAN3    TM    SWITCHRD,BYPASS         IS THIS CARD FINISHED.
         BZ    SCAN                    NO--CONTINUE SCAN//THIS CARD.
         SPACE 1                                               @Y30LSFY
SCAN1    TM    SEQSW+L1,SS1VAL          SS/1 ANALYSIS          @Y30LSFY
         BZ    SCAN1C                   NO                     @Y30LSFY
*        SS/1 ANALYSIS REQUESTED. FORCE PASSES=1,FLAGTEST=YES, @Y30LSFY
*        VTOC=2,EXTENT=1. ADJUST I/O DEVICE CONSTANTS POINTER. @Y30LSFY
         L     GR7,IODEVCON             DEVICE CONSTANTS PTR   @Y30LSFY
         A     GR7,SS1OFFST             ADJUST FOR SS/1        @Y30LSFY
         ST    GR7,IODEVCON             SAVE NEW PTR           @Y30LSFY
         OI    SEQSW,PASSES+VTOC+EXTENT FORCE NEEDED OPTIONS   @Y30LSFY
         NI    SEQSW,ON-FLAGTEST        FLAGTEST=YES           @Y30LSFY
         MVI   PASSCNT+L1,ONE           SET PASSES             @Y30LSFY
         XC    FVTOCPTR(L10),FVTOCPTR   CLEAR VTOC, EXTENT     @Y30LSFY
         MVI   FVTOCPTR+D4,SS1VTOC      SET VTOC START         @Y30LSFY
         MVI   FEXTENT+D4,SS1EXT        SET VTOC EXTENT        @Y30LSFY
SCAN1C   EQU   *                                               @Y30LSFY
         SPACE
         SR    GR7,GR7                 CLEAR.
         IC    GR7,FUNCSW              FUNCTION CODE AS MULTIPLE OF 16.
         SRA   GR7,4                   CODE AS MULTIPLE OF 1.
         LA    GR3,KCODES              ADDRESS OF KEYWORD TABLE
         LA    GR3,0(GR7,GR3)          INDEX TO PROPER SLOT IN TABLE.
         IC    GR7,0(GR3)              PICK UP PROPER VALUE FROM TABLE.
         SR    GR8,GR8                 CLEAR.
         IC    GR8,SEQSW               CURRENT KEYWORD SEQUENCE SWITCH.
         NR    GR8,GR7                 'AND' KEYWORD CODE INTO SEQSW.
         CR    GR8,GR7                 ARE REQUIRED KEYWORDS PRESENT.
         BNE   KEYMISS                 NO--GO GIVE A MESSAGE.
         CLI   DDNAME2,BLANK           IS THIS AN UNLABELED VOLUME.
         BC    7,CHECK2                NO--MAKE MORE CHECKS.
         TM    SEQSW,NEWVOLID          YES-WAS NEW SERIAL GIVEN.
         BZ    KEYMISS                 NO--REQUIRED KEYWORDS MISSING.
         SPACE
CHECK2   CLI   FUNCSW,ANALYSIS          THIS ANALYSIS?
         BE    CHECK2A                  YES, BRANCH.
         CLI   FUNCSW,FORMAT            THIS FORMAT?
         BNE   CHECK1                   NO - START PROCESSING.
CHECK2A  TM    SEQSW,IPLDD              WAS IPL TEXT REQUESTED?
         BZ    CHECK1                  NO--START PROCESSING.
         CLC   DDNAME1(8),SYSINDD      INPUT VIA SYSIN.
         BNE   CHECK1                  NO--START PROCESSING.
         OC    WIPLPTR+1(3),WIPLPTR+1  IPLTEXT POSSIBLY IN CORE ALREADY
         BC    7,CHECK1                YES-GO SET UP THIS FUNCTION.
         OI    SW1,TEXTIN              INDICATE LOOKING FOR TEXT/SYSIN.
         B     SCAN                    GO GET IPL PROGRAM.
         SPACE
CHECK    TM    SW1,TEXTIN              ARE WE LOOKING FOR IPL TEXT.
         BO    NOIPLMSG                YES-GO GIVE ERROR MESSAGE.
         CLI   QCOUNT+1,0              MORE ON QUEUE YET.
         BH    MORE                    YES-GO START  AT TOP OF QUEUE.
         B     ENDALL                  NO--GO CLOSE ALL-FREE ALL.
         EJECT
*   COMMAND LOOKUP ROUTINE
         SPACE 1
OPRLUP   LA    GR3,COMDTABL            START OF COMMAND TABLE.
         LA    GR5,COMDEND             END OF COMMAND TABLE.
         OI    SW1,COMMAND             INDICATE LOOKING FOR COMMAND.
SCANTBL  STC   LENGTH,SAVLGTH          STORE LENGTH.
         CLI   SAVLGTH,8               IS LENGTH EIGHT OR LESS.
         BH    MSGPRT                  YES-CONTROL STATEMENT ERROR.
         LA    GR4,12                  TABLE INCREMENTING VALUE.
         MVI   WURK,C' '               CLEAR SEARCH AREA.
         MVC   WURK+1(7),WURK          CLEAR REMAINING ARGUMENT AREA.
         BCTR  LENGTH,0                DECREMENT LENGTH FOR EXECUTE.
         EX    LENGTH,OPRLUP3          MOVE PARAMETER TO STORAGE AREA.
OPRCMP   CLC   WURK(8),0(GR3)          CHK IF SEARCH ARGUMENT IN TABLE.
         BNE   OPRLUP2                 NO--CONTINUE SCAN OF TABLE.
         LA    GR3,8(GR3)              POINT TO BRANCH ADDRESS.
         NI    SW1,X'FF'-COMMAND-SPEC1   RESET INDICATORS.
         BR    GR3                     ENTER PROPER ROUTINE.
OPRLUP2  BXLE  GR3,GR4,OPRCMP          LOOP TO CONTINUE SEARCH.
         TM    SW1,COMMAND             ERROR WHILE LOOKING FOR COMMAND.
         BZ    INVALKEY                YES--INVALID KEYWORD.
         NI    SW1,X'FF'-COMMAND       RESET COMMAND INDICATOR.
         B     INVALCOM                MUST BE INVALID COMMAND.
OPRLUP3  MVC   WURK(1),0(SCANADR)      MOVE IN ARGUMENT.
         SPACE 1
         EJECT
*   COMMAND LOOKUP TABLE
         SPACE
         DS    0F
COMDTABL DC    C'DUMP    '             START OF COMMAND WORD TABLE.
         B     DUMPCOMD                ADDRESS OF COMMAND ANALYSIS.
         DC    C'RESTORE '
         B     RESTCOMD
         DC    C'ANALYZE '
         B     ANALCOMD
         DC    C'FORMAT  '
         B     FORMCOMD
         DC    C'LABEL   '
         B     LABLCOMD
         DC    C'IPLTXT  '
         B     TEXTCOMD
         DC    C'PUTIPL  '
         B     IPLPCOMD
COMDEND  DC    C'GETALT  '             END OF COMMAND WORD TABLE.
         B     GETLCOMD
         SPACE 3
DUMPCOMD LA    GR0,DFUNSIZE            DUMP FUNCTION BLOCK SIZE.
         LA    GR5,DUMP                DUMP FUNCTION CODE.
         B     BUILDF                  GO BUILD A FUNCTION BLOCK.
         SPACE 1
RESTCOMD LA    GR0,RFUNSIZE            RESTORE FUNCTION BLOCK SIZE.
         LA    GR5,RESTORE             RESTORE FUNCTION CODE
         B     BUILDF                  GO BUILD A FUNCTION BLOCK.
         SPACE 1
ANALCOMD LA    GR0,AFUNSIZE            ANALYSIS FUNCTION BLOCK SIZE.
         LA    GR5,ANALYSIS            ANALYSIS FUNCTION CODE.
         B     BUILDF                  GO BUILD A FUNCTION BLOCK.
         SPACE 1
FORMCOMD LA    GR0,FFUNSIZE            FORMAT FUNCTION BLOCK SIZE.
         LA    GR5,FORMAT              FORMAT FUNCTION CODE.
         B     BUILDF                  GO BUILD A FUNCTION BLOCK.
         SPACE 1
LABLCOMD LA    GR0,LFUNSIZE            LABEL FUNCTION BLOCK SIZE.
         LA    GR5,LABEL               LABEL FUNCTION CODE.
         B     BUILDF                  GO BUILD A FUNCTION BLOCK.
         SPACE 1
GETLCOMD LA    GR0,GFUNSIZE            GETALT FUNCTION BLOCK SIZE.
         LA    GR5,GETALT              GETALT FUNCTION CODE
         B     BUILDF                  GO BUILD A FUNCTION BLOCK.
IPLPCOMD LA    GR0,IFUNSIZE            IPLPROG FUNCTION SIZE
         LA    GR5,IPLPROG             IPLPROG FUNCTION CODE
         B     BUILDF                  GO BUILD A FUNCTION BLOCK
         EJECT
TEXTCOMD CLI   FUNCSW,ANALYSIS         THIS FOLLOW FORMAT OR ANALYZE.
         BL    INVALCOM                NO--INVALID COMMAND.
         TM    SEQSW,IPLDD             WAS THERE A DDNAME GIVEN.
         BZ    INVALCOM                NO--INVALID COMMAND.
         SPACE
         CLC   DDNAME1(8),SYSINDD      THIS DDNAME SAME AS FOR SYSIN.
         BNE   INVALCOM                NO--ERROR.
         SPACE
         GETMAIN R,LV=0+IPLSIZE        GET CORE TO STORE TEXT DATA.
         LR    GR4,GR1                 SAVE BUFFER ADDRESS.
         AIF  ('&LIB' EQ 'LIB1').ARONDC  THIS ASSEM FOR OS, BRCH X02912
         L     GR3,IPLMAX               GET MAX BUFFER SIZE      X02912
         AGO   .ARONDD                  BRCH AROUND OS VALUE     X02912
.ARONDC  ANOP                           BRCH POINT FOR OS CODE   X02912
         LA    GR3,IPLSIZE             SIZE OF BUFFER.
.ARONDD  ANOP                           BRCH POINT FOR VS CODE   X02912
         BAL   GR14,CLEAR              CLEAR BUFFER TO ZERO.
         LA    GR9,CARDBUFF            ADDRESS OF IPL PROGRAM CARDS.
         USING IPLCARD,GR9
         LA    GR7,READ                DCB ADDRESS.
         USING IHADCB,GR7
         LA    GR2,NOIPL               RETURN IF EOF ENCOUNTERED.
         ST    GR2,DCBEODAD            SET IN QSAM DCB.
         DROP  GR7
         SR    GR2,GR2                 CLEAR BYTE COUNT REGISTER.
         LR    GR5,GR4                 BUFFER ADDRESS.
         LA    GR4,8(GR4)              SAVE ROOM FOR COUNT FIELD.
         AIF  ('&LIB' EQ 'LIB1').ARONDE  THIS ASSEM FOR OS, BRCH X02912
         LR    GR8,GR5                  GET BUFFER ADDR          X02912
         LA    GR8,0(GR8)               CLEAR HIGH BYTE          X02912
         A     GR8,IPLMAX               ADD BUFFER SIZE          X02912
         AGO   .ARONDF                  BRCH AROUND OS VALUE     X02912
.ARONDE  ANOP                           BRCH POINT FOR OS CODE   X02912
         LA    GR8,IPLSIZE(GR5)        END OF BUFFER.
.ARONDF  ANOP                           BRCH POINT FOR VS CODE   X02912
         EJECT
REREAD   GET   (GR7),(GR9)             READ IN AN IPL PROGRAM.
         SPACE
         CLC   CARDTYPE,END1           THIS AN END CARD.
         BE    THEEND                  YES-DO FINAL WIND-UP.
         CLC   CARDTYPE,TXT            THIS A TEXT CARD.
         BNE   REREAD                  NO--GET NEXT CARD.
         SPACE
         IC    GR2,CARDBYTE+1          BYTES//THIS CARD.
         LR    GR3,GR2                 SAVE BYTE COUNT.
         MVC   WURK(4),CARDADDR-1      MOVE FOR ALIGNMENT.
         L     GR4,WURK                DATA ADDRESS//THIS CARD.
         AR    GR4,GR5                 ADD TO BUFFER START.
         LA    GR4,8(GR4)              COUNT FIELD LENGTH.
         AR    GR4,GR3                 UPDATE BUFFER PTR.          5567
         CLR   GR4,GR8                 END OF BUFFER REACHED.      5567
         BH    NOIPLMSG                YES-MSG/IPLTXT NO GOOD.     5567
         SR    GR4,GR3                 DECREMENT BUFF PTR FOR MOVE.5567
         BCTR  GR2,0                   DECREMENT FOR EXECUTE.
         EX    GR2,TXTMOVE             MOVE DATA TO BUFFER AREA.
         AR    GR4,GR3                 UPDATE MOVE-TO ADDRESS.
         B     REREAD                  GO GET NEXT TXT CARD.       5567
         SPACE
THEEND   ST    GR5,WIPLPTR             TEXT ADDRESS TO WORK AREA.
         ST    GR5,FIPLPTR             TEXT ADDRESS TO FUNCTION BLOCK.
         NI    SW1,X'FF'-TEXTIN        SWITCH OFF//TEXT FOUND.
         B     CHECK1                  START PROCESSING THIS FUNCTION.
         SPACE
TXTMOVE  MVC   0(1,GR4),CARDTEXT       USED TO MOVE IPL TEXT TO BUFFER.
         EJECT
***********************************************************************
*                                                                     *
*   THE FOLLOWING TABLE IS A LIST OF THE REQUIRED KEYWORDS            *
*     FOR EACH FUNCTION.                                              *
*                                                                     *
***********************************************************************
KCODES   EQU   *
         DC    AL1(0)                  DUMMY
         DC    AL1(FROMDD+TODD)        DUMP
         DC    AL1(FROMDD+TODD)        RESTORE
         DC    AL1(TRACK+TODD)         GETALT
         DC    AL1(NEWVOLID+TODD)      LABEL
         DC    AL1(TODD+EXTENT+VTOC)   ANALYZE
         DC    AL1(TODD+EXTENT+VTOC)   FORMAT
         DC    AL1(FROMDD+TODD)        IPLPROG
         DC    AL1(0)
         SPACE 3
***********************************************************************
*                                                                     *
*   THE FOLLOWING TABLE INDICATES THE BIT SWITCH SETTINGS FOR THE     *
*     -SEQSW-. ALL THE VARIOUS KEYWORDS ARE LISTED WITH THE           *
*     SUPPORTED FUNCTIONS.                                            *
*                                                                     *
***********************************************************************
****                                                               ****
* (BITS) *   0    .  1 .   2    .  3  .  4  .   5   .   6    .  7     *
* DUMP   * FROMDD .TODD.CPYVOLID.BEGIN. END .       .        .        *
*        *        .    .        .     .     .       .        .        *
* RESTORE* FROMDD .TODD.CPYVOLID.     .     .       .        .        *
*        *        .    .        .     .     .       .        .        *
* GETALT * TRACK  .TODD.        .     .     .       .        .        *
*        *        .    .        .     .     .       .        .        *
* LABEL  *NEWVOLID.TODD.        .     .     .OWNERID.        .        *
*        *        .    .        .     .     .       .        .        *
* ANALYZE*NEWVOLID.TODD.EXTENT  .VTOC .IPLDD.OWNERID.FLAGTEST.PASSES  *
*        *        .    .        .     .     .       .        .        *
* FORMAT *NEWVOLID.TODD.EXTENT  .VTOC .IPLDD.OWNERID.        .        *
*        *        .    .        .     .     .       .        .        *
* IPLPROG* FROMDD .TODD.        .     .     .       .        .        *
*        *        .    .        .     .     .       .        .        *
***********************************************************************
         EJECT
         SPACE
         DS    0H                       FORCE ALIGNMENT
GETCOPY  EQU   *                       PROCESS TODD COPIES HERE.
         CLI   FUNCSW,RESTORE          THIS DUMP OR RESTORE.
         BNH   GETCOPY2                YES-COPIES ALLOWED.
         CLI   FUNCSW,ANALYSIS         THIS FORMAT OR ANALYZE.
         BL    MSGPRT                  NO--MUST BE ERROR.
GETCOPY2 LA    GR0,COPYSIZE            SIZE OF COPY BLOCK.
        LR     GR5,GR1                 SAVE POINTER TO PARAMETER.
         B     GETCOPY1                GO BUILD A COPY BLOCK.
         SPACE
*   GET CORE FOR A FUNCTION BLOCK AND INITIALIZE IT TO ZERO HERE.
BUILDF   LA    GR6,PTRFUNC1            ADDRESS OF FIRST FUNCTION.
         TM    SW1,TEXTIN              WERE WE LOOKING FOR IPL TEXT.
         BO    NOIPLMSG                YES--MUST BE ERROR.
         SPACE 1
BUILDF1 TM     0(GR6),ACTIVE           IS THIS SLOT AVAILABLE.
         BZ    BUILDF2                 YES-NOT ACTIVE OR WAITING.
         LA    GR6,CSIZE(GR6)          POINT TO NEXT ENTRY.
         B     BUILDF1                 GO FIND AN EMPTY SLOT.
         SPACE 1
BUILDF2  LR    GR3,GR0                 FUNCTION BLOCK SIZE.
         GETMAIN R,LV=(0)
         LR    GR10,GR1                FUNCTION BLOCK ADDRESS.
         ST    GR1,0(GR6)              FUNCTION BLOCK ADDRESS TO LIST.
         LR    GR4,GR3                 SAVE THE FUNCTION BLOCK SIZE.
         BAL   GR14,CLEAR              CLEAR FUNCTION BLOCK TO ZERO.
         STH   GR4,FSIZE               SAVE SIZE OF FUNCTION BLOCK.
         MVI   DDNAME1,BLANK           BLANK 1ST BLANK OF DDNAME SLOTS.
         MVC   DDNAME1+1(15),DDNAME1   BLANK REMAINING PORTION.
         MVI   0(GR6),ACTIVE           SET ACTIVE STATUS THIS FUNCTION.
         SPACE 1
         STC   GR5,FUNCSW              INDICATE WHICH FUNCTION THIS IS.
         L     GR5,KONSTANT            ADDRESS OF DEVICE CONSTANTS.
         ST    GR5,IODEVCON            INSERT ADDRESS IN FUNCTION BLOCK
         LH    GR5,QCOUNT              CURRENT QUEUE COUNT
         LA    GR5,1(GR5)              INCREMENT BY ONE.
         STH   GR5,QCOUNT              SAVE THIS VALUE.
         B     SCAN3                   COMPLETE SCAN OF CARD.
         EJECT
* GET CORE FOR A COPY BLOCK AND INITIALIZE IT TO ZERO
         SPACE 1
GETCOPY1 GETMAIN R,LV=(0)
         LR    GR8,GR1                 POINTER TO COPY BLOCK.
         LA    GR3,COPYSIZE            SIZE OF COPY BLOCK.
         LR    GR4,GR2                 SAVE CONTENTS OF GR2.
         BAL   GR14,CLEAR              CLEAR COPY BLOCK TO ZERO.
        LR     GR1,GR5                 RESTORE POINTER TO PARAMETER.
         LR    GR2,GR4                 RESTORE REGISTER.
         SPACE 1
         L     GR5,COPYPTR             ADDRESS OF COPY BLOCK, IF ANY.
         LTR   GR5,GR5                 IS THERE A PREVIOUS COPY BLOCK.
         BZ    NOCOPY                  NO--THIS IS THE FIRST COPY BLOCK
TESTCOPY CLC   CDISP(4,GR5),ZERO       THIS LAST COPY BLOCK IN CHAIN.
         BE    OKCOPY                  YES-GO SET UP POINTERS.
         L     GR5,CDISP(GR5)          NO--STEP TO NEXT COPY BLOCK.
         B     TESTCOPY                REPEAT UNTIL LAST IS FOUND.
         SPACE 1
OKCOPY   ST    GR8,CDISP(GR5)          ADDRESS OF NEXT COPY TO PRIOR.
         ST    GR5,CFUNPTR-COPYBLK(GR8) ADDRESS OF PRIOR TO NEXT.
OKCOPY1  OI    0(GR6),COPIES           INDICATE COPIES INVOLVED.
         MVI   DDNAME3,BLANK           BLANK 1ST BYTE DDNAME SLOT.
         MVC   DDNAME3+1(7),DDNAME3    BLANK REMAINING PORTION.
         LA    GR4,DDNAME3             DDNAME SLOT ADDRESS.
         TM    SW1,SPEC1               THIS AN SPECIAL REQUEST.
         BO    ALLSET1                 YES--MOVE IN ON OFF-SET.
         B     MOVEP                   GO MOVE IN THE DDNAME.
         SPACE
NOCOPY   ST    GR8,COPYPTR             COPY ADDRESS TO FUNCTION BLOCK.
         ST    GR10,CFUNPTR            FUNCTION BLOCK ADDRESS/1ST COPY.
         B     OKCOPY1                 GO COMPLETE COPY BLOCK.
         SPACE 1
ALLSET1  LA    GR4,1(GR4)               PARAMETER MOVE TO ADDRESS
MOVEP    EX    GR2,PMOVE                MOVE DDNAME TO FUNCTION BLOCK
         B     SCAN3                    CONTINUE SCAN
         EJECT
CHECK1   TM    SW1,TEXTIN              WAS REQUIRED IPL TEXT FOUND.
         BO    NOIPLMSG                NO--GO GIVE ERROR MESSAGE.
         CLI   FUNCSW,RESTORE          IS THERE A FROM DDNAME.
         BNH   TESTFROM                 YES, GET FROMDD INFORMATION
         CLI   FUNCSW,IPLPROG           IS THERE A FROMDD?
         BNE   TODEVICE                 NO- GO CHECK TODD
TESTFROM LA    GR3,DDNAME1              YES-ADDRESS OF FROM-DDNAME.
         BAL   GR14,UCBFIND            FIND THE UCB ADDRESS.
         AIF   ('&LIB' EQ 'LIB1').WIN01 BRCH IF OS ASSEM        XL03130
         BAL   GR14,DEVTST              TEST UCB DEV TYPE       XL03130
         STC   GR3,IDEVMOD              STORE WINCHESTR MOD NO. XL03130
.WIN01   ANOP                           BRCH POINT FOR OS ASSEM XL03130
         ST    GR9,FUCBPTR             SAVE IT IN THE FUNCTION BLOCK.
         SPACE
TODEVICE LA    GR3,DDNAME2             ADDRESS OF TO-DDNAME.
         BAL   GR14,UCBFIND            FIND THE UCB ADDRESS.
         USING UCB,GR9                                          XL03130
         AIF   ('&LIB' EQ 'LIB1').WIN02 BRCH IF OS ASSEM        XL03130
         TM    SEQSW+L1,SS1VAL          SS/1 ANALYSIS          @Y30LSFY
         BZ    NOTSS1E                  NO                     @Y30LSFY
*        SS/1 ANALYSIS CAN ONLY BE PERFORMED ON 3330 OR        @Y30LSFY
*        3330-1.                                               @Y30LSFY
         CLI   UCBTBYT4,MERLIN          3330?                  @Y30LSFY
         BE    NOTSS1E                  YES - OK               @Y30LSFY
         CLI   UCBTBYT4,ICEBERG         3330-1?                @Y30LSFY
         BE    NOTSS1E                  YES - OK               @Y30LSFY
*        PRINT MESSAGE IEH833I.                                @Y30LSFY
         LA    GR1,MESS33               LOAD ERR NO.           @Y30LSFY
         BAL   GR9,BUILD                GO BUILD MESSAGE       @Y30LSFY
         MVC   D0(L3,GR1),DDNAME2+L1    FILL IN CUU            @Y30LSFY
         B     MSGWRT                   GO WRITE MESSAGE       @Y30LSFY
NOTSS1E  EQU   *                                               @Y30LSFY
         BAL   GR14,DEVTST              TEST UCB DEV TYPE       XL03130
         STC   GR3,ODEVMOD              STORE WINCHESTR MOD NO. XL03130
.WIN02   ANOP                           BRCH POINT FOR OS ASSEM XL03130
         ST    GR9,TUCBPTR             SAVE IT IN THE FUNCTION BLOCK.
         LA   GR3,DDNAME2               LOAD ADDR OF TODD-NAME  XL03130
         BAL   GR14,TESTUSR             TEST IF OTHER USERS     XM7053
         TM    0(GR6),COPIES           ARE THERE COPIES INVOLVED.
         BZ    TOD2                    NO--NO NEED TO LOOK UP UCB'S.
         L     GR8,COPYPTR             COPY BLOCK ADDRESS.
TOD1     LA    GR3,DDNAME3             COPY DDNAME ADDRESS.
         BAL   GR14,UCBFIND            LOCATE ADDRESS OF UCB.
         AIF   ('&LIB' EQ 'LIB1').WIN03 BRCH IF OS ASSEM        XL03130
         BAL   GR14,DEVTST              TEST UCB DEV TYPE       XL03130
         STC   GR3,CDEVMOD              STORE WINCHESTR MOD NO. XL03130
.WIN03   ANOP                           BRCH POINT FOR OS ASSEM XL03130
         ST    GR9,CUCBPTR             SAVE ADDRESS IN COPY BLOCK.
         LA    GR3,DDNAME3              COPY DDNAME ADDR        XL03130
         BAL   GR14,TESTUSR             TEST IF OTHER USERS     XM7053
         OC    CCOPYPTR(4),CCOPYPTR    ARE THERE MORE COPIES.
         BZ    TOD2                    NO--GO START PROCESSING.
         L     GR8,CCOPYPTR            YES-ADDRESS OF NEXT COPY.
         B     TOD1                    REPEAT COPY UCB LOOK UP.
         AIF   ('&LIB' EQ 'LIB1').WIN04 BRCH IF OS ASSEM        XL03130
         EJECT                                                  XL03130
DEVTST   EQU   *                                                XL03130
         CLC   SYSOUTDD,D0(GR3)        SYSPRINT D/S ?          @VS40035
         BE    NOWINC                  YES, EXIT               @VS40035
         CLI   UCBTBYT4,MERLIN          CAN THIS DEV BE EMU ?  @Z30RSAG
         BL    NOWINC                   NO, ZERO ODEVMOD       @Z30RSAG
         TM    UCBFL1,UCBNRY            THIS UNIT READY?        VS06562
         BNO   ISSUSVC                  NO, ISSUE SVC 82        VS06562
         CLI   D0(GR3),BLANK            OFFLINE FUNCTION?       VS06562
         BNE   RDJOPEN                  NO, READ JFCB + OPEN    VS06562
*                                       TO FORCE MOUNT MSG.     VS06562
ISSUSVC  EQU   *                                                VS06562
         SR   GR3,GR3                   ZERO REG FOR NON-WINCH  XM3782
         LA    GR1,WURK                 LOAD SVC P.L. ADDR      XL03130
         XC    WURK,WURK                ZERO PARAM LIST         XL03130
         ST    GR9,WURK                 STORE UCB ADDR          XL03130
         MVI   WURK,SENS                SET P.L. FUNCTION TYPE  XL03130
         ST    GR10,WURK+D4            SAVE FUNCBLK ADDR       @Z30RSAG
         MVI   WURK+D4,ENDPL            SET END OF P.L.         XL03130
         SVC   82                       ISSUE SENSE FOR WINCH.  XL03130
         LTR   GR15,GR15                GOOD RETURN             XL03130
         BNZ   WINERR                   NO, PRINT SVC ERROR MSG XL03130
         L     GR3,WURK+D4              GET MODEL NO. FROM P.L. XL03130
         LA    GR3,D0(GR3)              CLEAR HIGH BYTE         XL03130
NOWINC   EQU   *                                                XL03130
         BR    GR14                     EXIT THIS RTNE.         XL03130
WINERR   EQU   *                                                XL03130
         LA    GR1,MESS13               LOAD ERR NO.            XL03130
         BAL   GR9,BUILD                GO BUILD MESSAGE        XL03130
         MVC   0(2,GR1),SVCTYP          MOVE SVC NO. TO MSG     XL03130
         B     MSGWRT                   GO WRITE MSG            XL03130
         EJECT
         USING IHADCB,GR5                                       VS06562
RDJOPEN  EQU   *                                                VS06562
         LA    GR5,OUTDCB               PT TO DUMMY DCB         VS06562
         MVC   DCBDDNAM(L8),D0(GR3)     MOVE IN DDNAME          VS06562
         LA    GR4,JFCBEND-JFCB         COMPUTE JFCB LENGTH     VS06562
         GETMAIN R,LV=(GR4)
         LR    GR4,GR1                  SAVE BUFF PTR           VS06562
         ST    GR4,LIST                 STORE PTR TO LIST       VS06562
         MVI   LIST,X'87'               RESET FLAG              VS06562
         RDJFCB MF=(E,OPENLD)
         SPACE
         USING JFCB,GR4
         MVI   JFCBDSNM,FORMAT4         SETUP DSN FOR F4 DSCB   VS06562
         MVC   JFCBDSNM+L1(L43),JFCBDSNM MOVE 04 THRU NAME FLD VS06562
         OI    JFCBTSDM,JFCNWRIT        DONT REWRITE JFCB       VS06562
*
         OPEN  MF=(E,OPENLD),TYPE=J                             VS06562
         NI    DCBMACRF+L1,X'F3'        DONT WRITE EOF AT CLOSE VS06562
         CLOSE MF=(E,OPENLD)                                    VS06562
         LA    GR5,JFCBEND-JFCB         COMPUTE AREA SIZE       VS06562
         FREEMAIN R,LV=(GR5),A=(GR4)                            VS06562
         B     ISSUSVC                  GO ISSUE SVC 82         VS06562
         DROP  GR4,GR5                                          VS06562
         SPACE
LIST     DS    0F
         DC    X'87'
         DC    AL3(0)
         SPACE
OPENLD   RDJFCB (OUTDCB,(OUTPUT)),MF=L                          VS06562
         EJECT
.WIN04   ANOP                                                   XL03130
TESTUSR  EQU   *                                                XM7053
         CLI   UCBTBYT3,DASDI           IS TODD A DASD?         XM7053
         BCR   7,GR14                   NO, RETURN              XM7053
         CLC   SYSOUTDD(8),DDNAME2      TODD=SYSPRINT ?         YM01130
         BCR   8,GR14                   BRCH IF YES             YM01130
         BAL   GR7,SERIALZ              GET EXCLUSIVE CTL.      YM01130
         AIF   ('&LIB' EQ 'LIB1').OSCODE   BRCH IF OS ASSEM     XM7053
         CLI   FUNCSW,IPLPROG           THIS PUTIPL FUNCTION ?  XM0148
         BCR   8,GR14                   BRCH IF YES             XM7053
.OSCODE  ANOP                                                   XM7053
         CLI   FUNCSW,LABEL             THIS LABEL FUNCTION ?   XM7053
         BCR   8,GR14                   BRCH IF YES             XM7053
         CLC   SRTEUSER,ALLOCNT         ARE THERE OTHER SYSTEM  YM5770
*                                       USERS ON THIS PACK?     XM7053
         BCR   13,GR14                  BRCH IF NO OTHERS       XM7053
         DROP GR9                                               XM7053
MSG851   EQU   *                                                YL02912
         LA    GR1,MESS51               LOAD ERROR MSG NUMBER   XM7053
         B     BLDMSG                   GO BUILD MSG            YL02912
         EJECT
**********************************************************************
*        THE FOLLOWING ROUTINE WILL CAUSE 'DASDR TO GET         YL02912
*        EXCLUSIVE CONTROL OF THE TODD= UCB.                    YL02912
**********************************************************************
SERIALZ  EQU   *                                                YL02912
         CLI   0(GR3),BLANK             OFFLINE REQUEST ?       YL02912
         BCR   8,GR7                    YES, BRCH               YM01130
         ST    GR9,WORKD8               LOAD UCB ADDR IN P.L.   YL02912
         MVI   WORKD8,ENQ               SET ONLINE P.L. FLAG    YL02912
         MVI   WORKD8+L4,ENDPL          SET END OF P.L. FLAG    YL02912
         LA    GR1,WORKD8               LOAD P.L. PTR           YL02912
         SVC   ENQDEQ                   GO ENQ ON VOLID         YL02912
         LTR   GR15,GR15                GOOD RETURN FROM ENQ ?  YL02912
         BCR   8,GR7                    YES, BRCH               YM01130
         LA    GR1,MESS54               SET 'ALREADY ENQED' MSG YL02912
         B     BLDMSG                  SOMEONE ELSE HAS DEVICE  YL02912
         EJECT                                                  YL02912
TOD2     LA    GR6,PTRFUNC1            POINT TO FIRST FUNCTION ON Q.
         SPACE
START1   OI    SW1,MULTIPLE            TRY FOR CONCURRENT PROCESSING.
START2   L     GR10,0(GR6)             ADDRESS OF FUNCTION BLOCK.
         LA    GR10,0(GR10)            INSURE HIGH ORDER BYTE CLEAR.
         IC    GR5,SW1                 TEMPORARY STORAGE OF SWITCH.
         ST    GR6,PTRCFUNC            ADDRESS OF CURRENT FUNCTION.
         STC   GR5,SW1                 RESTORE SWITCH SETTING.
         SR    GR7,GR7                 CLEAR.
         IC    GR7,FUNCSW              INDICATE LOAD MODULES
         SRA   GR7,1                   MULTIPLE OF 8.
         LA    GR8,LINKADDR            BRANCH TABLE MINUS 8.
         LA    GR8,0(GR7,GR8)          ADDRESS OF MODULE NAME.
         CLC   0(8,GR8),LINKADDR       PREVIOUSLY LOADED?
         BNE   MUSTLOAD                NO--ROUTINE NOT IN CORE YET.
         L     GR15,LOADADDR           PICK UP ADDRESS OF ROUTINE.
         B     GOTO                    START PROCESSING OF FUNCTION.
         SPACE
MUSTLOAD CLI   LINKADDR,0              NO--ANOTHER LOADED?
         BE    LOAD                    NO--GO LOAD DESIRED ROUTINE.
         SPACE
         DELETE EPLOC=LINKADDR         YES-FREE THE SPACE.
LOAD     MVC   LINKADDR(8),0(GR8)      SET UP LOAD ADDRESS.
         LOAD  EPLOC=LINKADDR
         ST    GR0,LOADADDR            SAVE ADDRESS OF ROUTINE.
         LR    GR15,GR0                ADDRESS OF DESIRED LOAD.
GOTO     EQU   *                                                YM01130
         CLI   DDNAME2,BLANK            OFFLINE FUNCTION ?      YM01130
         BNE   NOESTAE                  NO, DONOT ISSUE ESTAE   YM01130
         TM    DONESTAE,X'FF'           ESTAE DONE?            @ZA27199
         BO    ESTAEDON                 YES, THEN DONT MORE    @ZA27199
         BAL   GR7,ESTAE                GO ISSUE ESTAE          YM01130
         MVI   DONESTAE,X'FF'           INDICATE ESTAE DONE    @ZA27199
ESTAEDON L     GR15,LOADADDR            RELOAD GR15            @ZA27199
NOESTAE  EQU   *                                                YM01130
         BALR  GR14,GR15
         SPACE
         LTR   GR15,GR15               RETURN CODE EQUAL ZERO.
         BC    7,FERROR                NO--MUST BE SOMETHING UNUSUAL.
         SPACE
         L     GR6,PTRCFUNC            POINTER TO QUEUE ENTRY.
        LA     GR6,0(GR6)              CLEAR HIGH ORDER BYTE.
         TM    0(GR6),COMPLETE         DID WE COMPLETE THIS FUNCTION.
         BZ    TESTMORE                NO--BETTER TEST FOR MORE ON Q.
         SPACE
ENDFUNC1 EQU   *                                                YL02912
         SR    GR14,GR14               CLEAR.
         IC    GR14,RETCODE            CURRENT HIGH RETURN CODE.
         CLR   GR14,GR15               IS OLD HIGHER THAN NEW.
         BNL   ENDFUNC                 YES-NO NEED TO SAVE.
         STC   GR15,RETCODE            SAVE RETURN CODE.
ENDFUNC  BAL   GR14,FREECORE           YES-FREE CORE ASSIGNED FUNCTION.
         SPACE
         CLI   QCOUNT+1,0              MORE ON THE QUEUE
         BE    TESTEOF                 NO--GO TEST FOR END-OF-FILE.
         SPACE
PUSHUP   CL    GR6,ENDCLIST            ARE THERE MORE ENTRIES.
         BE    TESTEOF1                NO--NO NEED TO UPDATE THE QUEUE.
         SPACE
         TM    CSIZE(GR6),ACTIVE       ACTIVE FUNCTION ON NEXT SLOT.
         BZ    TESTEOF1                NO--NO NEED TO UPDATE THE QUEUE.
         MVC   0(CSIZE,GR6),CSIZE(GR6) SLIDE EVERYTHING ON THE QUEUE UP
*                                        ONE SLOT.
         NI    0(GR6),X'FF'-NOCORE-WAITING  CLEAR ANY WAIT SWITCHES.
         LA    GR6,CSIZE(GR6)          INCREMENT TO THE NEXT ENTRY.
         B     PUSHUP                  GO TEST FOR MORE ENTRIES.
         SPACE
TESTEOF  TM    SWITCHRD,EOF            PREVIOUS END-OF-FILE.
         BO    ENDALL                  YES-MUST BE ALL WOUND-UP.
         B     SCANA                   GO SCAN MORE CARDS.
         SPACE
TESTMORE TM    CSIZE(GR6),ACTIVE       IS THE NEXT SLOT ACTIVE.
         BZ    CKSPACE                 NO--GO TEST FOR MORE SPACE.
         SPACE
         TM    CSIZE(GR6),PROCESS      NEXT FUNCTION ALREADY IN PROCESS
         LA    GR6,CSIZE(GR6)          STEP TO NEXT QUEUE SLOT.
         BO    NEXTPROC                YES-GET READY TO CONTINUE IT.
         SPACE
         TM    0(GR6),NOCORE           NEXT FUNCTION PREVIOUSLY
*                                        TERMINATED BECAUSE OF
*                                        INSUFFICIENT CORE.
         L     GR10,0(GR6)             POINTER TO NEXT FUNCTION BLOCK.
         BO    SETWAIT                 YES-DON'T TRY TO RESTART NOW.
         SPACE
NOTFIRST LA    GR5,PTRFUNC1            ADDDRESS OF FIRST SLOT IN QUEUE.
REPEAT   L     GR3,0(GR5)              POINTER TO NEXT FUNCTION BLOCK.
         CLC   FUNCSW(1),FUNCSW-FUNCBLK(GR3)  NEXT FUNCTION SAME.
         BNE   SETWAIT                 NO--GO BACK TO TOP OF QUEUE.
*   CHECK FOR DEVICES BEING AVAILABLE HERE.
*     IF YES, SET UP FOR NEXT FUNCTION AT 'NEXTPROC'.
*     IF NOT, GO TO 'SETWAIT'.
         SPACE
         L     GR4,FUCBPTR             NEXT 'FROM' DEVICE.
         LTR   GR4,GR4                 IS THERE ONE.
         BZ    TESTTO                  NO--DO NOT COMPARE.
         BAL   GR14,TESTDEV            'FROM' VERSUS ALL OTHERS.
         SPACE
TESTTO   L     GR4,TUCBPTR             NEXT 'TO' DEVICE
         BAL   GR14,TESTDEV            TEST AVAILABILITY.
         SPACE
         TM    0(GR6),COPIES           THIS NEXT FUNCTION HAVE COPIES.
         BZ    TESTEND1                NO--GO SEE IF ALL COMPARES DONE.
         SPACE
         L     GR8,COPYPTR             ADDDRESS OF COPY BLOCK.
REPEAT1  L     GR4,CUCBPTR             'COPY' UCB ADDRESS.
         BAL   GR14,TESTDEV            GO TEST AVAILABILITY.
         L     GR8,CCOPYPTR            ADDRESS OF NEXT COPY BLOCK,
         LTR   GR8,GR8                 IS THERE A COPY.
         BNZ   REPEAT1                 YES-REPEAT TESTS.
         SPACE
TESTEND1 LA    GR5,CSIZE(GR5)          STEP TO NEXT QUEUE SLOT.
         CLR   GR5,GR6                 ALL DEVICES TESTED.
         BNE   REPEAT                  NO--REPEAT TESTS VS NEXT SLOT.
         SPACE
BYTES0   EQU   10000                   BUFFER SIZES//CONTROL BLOCKS.
         GETMAIN EC,LV=BYTES0,A=ANSWER
         LTR   GR15,GR15               IS THERE SUFFICIENT CORE.
         BNE   SETWAIT                 NO--CANN'T START NEXT FUNCTION.
         FREEMAIN  E,LV=BYTES0,A=ANSWER
NEXTPROC EQU   *                       OKAY TO START NEXT FUNCTION.
         B     START1                  GO START NEXT FUNCTION.
         EJECT
         SPACE
DELDEB   EQU   *                                                DELEDEB
         ST    GR5,WORKD8+L4            STORE DEB ADDR IN PL    DELEDEB
         MVI   WURK,DEDEB               SET FUNC BYTE           DELEDEB
         MVI   WORKD8+L4,ENDPL          SET END OF PL           DELEDEB
         LA    GR1,WURK                 LOAD P.L. ADDR          DELEDEB
         SVC   ENQDEQ                   ISSUE SVC 82            DELEDEB
         BR    GR2                     RETURN                  @ZA03380
         SPACE
FERROR   TM    0(GR6),NOCORE           INSUFFICIENT CORE FOR PREVIOUS
*                                        FUNCTION.
         BZ    ENDFUNC1                NO--MUST HAVE ERROR CONDITION.
         LA    GR7,PTRFUNC1            ADDRESS OF FIRST QUEUE SLOT.
         CLR   GR6,GR7                 IS THIS FIRST FUNCTION OF QUEUE.
         BE    COREMSG                 YES-NO HOPE FOR THIS FUNCTION.
MORE     CLI   QCOUNT+1,1              MORE THAN ONE ON QUEUE.
         BH    STARTTOP                YES-GO START AT TOP OF QUEUE.
MORE1    NI    SW1,X'FF'-MULTIPLE      NO--ONLY ONE/TURN OFF MULTIPLE
*                                        SWITCH.
STARTTOP LA    GR6,PTRFUNC1            TOP OF QUEUE ADDRESS.
         OC    PTRFUNC1(4),PTRFUNC1     IS THIS FUNCTION         A42499
*                                          SET TO ZERO
         BZ    PUSHUP                   YES, GO TO PUSH UP QUEUE A42499
         B     START2                  GO START PROCESSING.
SETWAIT  OI    0(GR6),WAITING          SET EAIT FOR THIS FUNCTION.
        LA     GR7,PTRFUNC1            ADDRESS OF FIRST ENTRY ON QUEUE.
        CLR    GR6,GR7                 PREVIOUS FUNCTION THE ONLY ONE.
        BE     MORE1                   YES-CANNOT DO MORE THAN ONE NOW.
        B      MORE                 NO--GO START AT TOP OF QUEUE.
CKSPACE  L     GR7,ENDCLIST            END OF QUEUE POINTER.
         CLR   GR6,GR7                 IS THIS THE LAST SLOT.
         BE    MORE                    YES-CANNOT QUEUE UP ANY MORE.
         B     TESTEOF2                GO TEST FOR PREVIOUS END-OF-FILE
         SPACE
TESTEOF1 XC    0(4,GR6),0(GR6)         INSURE THIS ENTRY CLEAR.
TESTEOF2 TM    SWITCHRD,EOF            EOF YET ON SYSIN.
         BZ    SCANA                   NO--GET NEXT CONTROL STATEMENT
*                                        AND PLACE IT ON THE QUEUE.
         B     MORE                    YES--GO FINISH THE FUNCTION WE
*                                        ARE WORKING ON.
*        TEST FOR SAME DEVICE AS PREVIOUSLY IN USE.
TESTDEV  CL    GR4,FUCBPTR-FUNCBLK(GR3)  COMPARE 'NEW' FROM VS OLD FROM
         BE    SETWAIT                 SAME//CAN'T START FUNCTION NOW.
         CL    GR4,TUCBPTR-FUNCBLK(GR3)  COMPARE NEW VS PREVIOUS 'TO'.
         BE    SETWAIT                 SAME//CAN'T START FUNCTION NOW.
         SPACE
         L     GR1,COPYPTR-FUNCBLK(GR3)  POINTER TO COPY BLOCK.
         DROP  8
         USING COPYBLK,GR1
TESTCPYY LTR   GR1,GR1                 WAS THERE A COPY.
         BCR   8,GR14                  NO--RETURN.
         SPACE
         CL    GR4,CUCBPTR             COMPARE NEW DEVICE VS OLD COPY.
         BE    SETWAIT                 SAME//CAN'T START FUNCTION NOW.
         L     GR1,CCOPYPTR            POINTER TO NEXT COPY, IF ANY.
         DROP  1
         USING COPYBLK,GR8
         B     TESTCPYY                REPEAT COMPARES.
         SPACE 1
ENDALL   LA    GR1,MESS39              MESSAGE NUMBER 839.
         BAL   GR9,BUILD               PLACE MESSAGE IN BUFFER.
         SR    GR15,GR15               CLEAR.
         IC    GR15,RETCODE            RETURN CODE.
         CVD   GR15,WORKD8             CONVERT TO DECIMAL.
         UNPK  1(2,GR1),WORKD8+6(2)    CONVERT TO GRAPHICS AND MOVE.
         OI    2(GR1),X'F0'            RESET ZONE.
         BAL   GR9,ERRPRINT            GO WRITE OUT THE MESSAGE.
         CLOSE (READ,,PRINT)           CLOSE INPUT AND OUTPUT DATA SETS
         LA    GR1,READ                SYSIN DCB ADDRESS.
         BAL   GR9,FREEPOOL            FREE THE SYSIN BUFFER POOLS.
         LA    GR1,PRINT               SYSOUT DCB ADDRESS.
         BAL   GR9,FREEPOOL            FREE THE SYSOUT BUFFER POOLS.
         L     GR1,WIPLPTR             POINTER TO IPL BUFFER, IF ANY.
         LTR   GR1,GR1                 IS THERE AN IPL BUFFER.
         BZ    FREEWORK                NO--
         AIF  ('&LIB' EQ 'LIB1').ARONDG  THIS ASSEM FOR OS, BRCH X02912
         L     GR0,IPLMAX               GET MAX BUFFER SIZE      X02912
         AGO   .ARONDH                  BRCH AROUND OS VALUE     X02912
.ARONDG  ANOP                           BRCH POINT FOR OS CODE   X02912
         LA    GR0,IPLSIZE             SIZE OF BUFFER.
.ARONDH  ANOP                           BRCH POINT FOR VS CODE   X02912
         BAL   GR9,FREEBUFF            RELEASE THE CORE.
         SPACE 1
FREEWORK EQU   *                       FREE WORK AREA//EXIT HERE.
         L     GR13,ROOTSAVE+4         RESTORE REGISTER 13.
         CLI   PAGESW,X'FF'            WAS PAGE NO. PASSED TO ROUTINE.
         BNE   RETURN1                 NO--RESTORE/RETURN.
         L     GR1,24(GR13)            YES-POINTER TO PASSED PARAMETERS
         L     GR1,8(GR1)              POINTER TO PAGE NUMBER.
         LH    GR6,PAGENO              CURRENT PAGE NO.
         CVD   GR6,WORKD8              CONVERT TO DECIMAL.
         UNPK  3(3,GR1),WORKD8+6(2)    CONVERT TO GRAPHICS AND MOVE.
         OI    5(GR1),X'F0'            RESET ZONE.
RETURN1  EQU   *                       EXIT FROM THE PROGRAM HERE.
         CLI   LINKADDR,0              ANY MODULES LOADED        A53137
         BE    RETURN2                 NO, GO RETURN             A53137
         DELETE EPLOC=LINKADDR         DELETE LAST MODULE        A53137
         MVI   LINKADDR,0              SET 'NO MODULES LOADED'.  A59759
         XC    LOADADDR(4),LOADADDR    CLEAR LOAD ADDRESS.       A59759
RETURN2  LR    GR1,WORKBASE            ADDRESS OF WORKAREA.      A53137
         LA    GR0,WORKSIZE            SIZE OF WORKAREA.
         BAL   GR9,FREEBUFF            FREE THE WORK AREA CORE.
         SR    GR15,GR15               CLEAR.
         IC    GR15,RETCODE            HIGHEST RETURN CODE.
         MVI   DONESTAE,X'00'          RESET DONESTAE SWITCH   @ZA27199
         RETURN (14,12),T,RC=(15)      RESTORE/RETURN W/PROPER CODE.
         SPACE 1
         EJECT
***********************************************************************
*   THIS SECTION FREES THE CORE OF THE FUNTION BLOCK AND COPY BLOCKS,
*     IF ANY, FOR THE JUST COMPLETED FUNCTION.
*                                                                     *
*   REGISTER 6 MUST POINT TO THE PROPER CONTROL LIST FOR THIS         *
*     FUNCTION UPON ENTRY.                                            *
*   REGISTER 14 IS THE RETURN REGISTER.                               *
***********************************************************************
FREECORE LTR   GR10,GR10               IS THERE A FUNCTION BLOCK.
         BCR   8,GR14                  NO--RETURN.
         TM    0(GR6),COPIES           ARE THERE COPIES INVOLVED.
         BZ    FREEFUNC                NO--GO FREE THE FUNCTION BLOCK.
BEGIN1   L     GR8,COPYPTR             POINTER TO COPY BLOCK.
TESTEND  CLC   CCOPYPTR(4),ZERO        IS THERE ANOTHER COPY BLOCK.
         BNE   TESTAGIN                YES-GO FIND THE LAST IN CHAIN.
         XC    COPYPTR(4),COPYPTR      NO--CLEAR POINTER TO FIRST COPY.
         BAL   GR9,FREECOPY            RELEASE COPY BLOCK CORE.
         B     FREEFUNC                GO FREE THE FUNCTION BLOCK.
FREECOPY LR    GR1,GR8                 ADDRESS OF COPY BLOCK.
         LA    GR0,COPYSIZE            SIZE OF COPY BLOCK.
FREEBUFF FREEMAIN R,LV=(0),A=(1)       RELEASE SOME CORE.
         BR    GR9                     RETURN.
TESTAGIN LR    GR7,GR8                 SAVE POINTER TO CURRENT COPY.
         L     GR8,CCOPYPTR            ADDRESSING FOR NEXT COPY BLOCK.
         CLC   CCOPYPTR(4),ZERO        DOES IT POINT TO ANOTHER.
         BNE   TESTAGIN                YES-GO FIND LAST IN CHAIN.
         BAL   GR9,FREECOPY            NO--GO FREE LAST IN CHAIN.
         LR    GR8,GR7                 RESTORE POINTER TO PREVIOUS.
         XC    CCOPYPTR(4),CCOPYPTR    ZERO POINTER TO RELEASED BLOCK.
         B     BEGIN1                  REPEAT UNTIL ALL COPIES RELEASED
FREEFUNC CLI   FUNCSW,ANALYSIS          THIS ANALYZE ?
         BE    FREEB                    YES-BRANCH.
         CLI   FUNCSW,FORMAT            THIS FORMAT?
         BNE   FREEF                    NO - GO FREE FUNCTION BLOCK
FREEB    L     GR1,FIPLPTR              IPL BUFFER ADDRESS
         LTR   GR1,GR1                 WAS THERE AN IPL BUFFER.
         BZ    FREEF                   NO--GO FREE FUNCTIOM BLOCK.
         CLC   FIPLPTR+1(3),WIPLPTR+1  ONLY ONE IPL BUFFER.
         BE    FREEF                   YES-WE WILL FREE IT LATER.
         AIF   ('&LIB' EQ 'LIB1').ARONDI THIS ASSEM FOR OS, BRCH X02912
         L     GR0,IPLMAX               GET MAX BUFFER SIZE      X02912
         AGO   .ARONDJ                  BRCH AROUND OS VALUE     X02912
.ARONDI  ANOP                           BRCH POINT FOR OS CODE   X02912
         LA    GR0,IPLSIZE             SIZE OF BUFFER.
.ARONDJ  ANOP                           BRCH POINT FOR VS CODE   X02912
         BAL   GR9,FREEBUFF            GO FREE THE IPL BUFFER.
FREEF    LR    GR1,GR10                FUNCTION BLOCK ADDRESS.
         LH    GR0,FSIZE               SIZE OF FUNCTION BLOCK.
         BAL   GR9,FREEBUFF            RELEASE FUNCTION BLOCK CORE.
         XC    0(4,GR6),0(GR6)         CLEAR POINTER TO FUNCTION BLOCK.
         LH    GR9,QCOUNT              CURRENT NO.ENTRIES ON QUEUE.
         BCTR  GR9,0                   DECREMENT BY ONE.
         STH   GR9,QCOUNT              RESET SAVED VALUE.
         SR    GR10,GR10               CLEAR POINTER TO FUNCTION BLOCK.
         BR    GR14                    RETURN.
         EJECT
***********************************************************************
*   THIS SECTION RECEIVES CONTROL FROM THE ESTAE MACRO TO EFFECT      *
*   ERROR RECOVERY IF IEHDASDR SHOULD ABEND OR BE CANCELED BEFORE     *
*   TURNING OFF THE DEVICE-LOCKING' BIT: UCBNALOC.                    *
*   THIS BIT IS TURNED ON FOR OFFLINE PROCESSING ONLY.                *
***********************************************************************
         USING STAELIST,GR1
ABNDCODE EQU   *                                                YM01130
         BALR  11,0                    GET CURRENT ADDR         STAEFIX
         LA    GR6,*-IEHROOT           COMPUTE RTN OFFSET      @ZA26120
         SR    GR11,GR6                RELOAD BASE REG.        @ZA26120
         LA    GR6,12                  LOAD REG6 WITH 12       @ZA11946
         CR    GR0,GR6                 CONDITION CODE 12?      @ZA11946
         BNE   SDWAOK                  NO THEN SDWA            @ZA11946
         LR    GR1,GR2                 LOAD ADDR OF PARM LIST  @ZA11946
         B     CONTABND                CONTINUE ABEND          @ZA11946
SDWAOK   L     GR1,L0(GR1)             GET STAE LIST ADDR      @ZA11946
CONTABND L     GR4,STAELIST            GET TCB ADDR            @ZA11946
         L     GR12,STAEND             RELOAD IEHDWORK ADDR     STAEFIX
         L     GR5,DEBOFF(GR4)          GET TCBDEB PTR          YM01130
LOADUCB  EQU   *                                                YM01130
         L     GR6,UCBOFF(GR5)          GET UCB ADDR            YM01130
         LA    GR6,0(GR6)              CLEAR HIGH ORDER BYTE   @ZA01214
         USING UCB,GR6
         TM    UCBFL5,UCBNALOC          DID WE TURN BIT ON ?    YM01130
         BNO   LOOPBK                   NO, CHK NEXT DEB        YM01130
         BAL   GR2,DELDEB               DELETE DEB VIA SVC 82  @ZA03380
LOOPBK   EQU   *                                                YM01130
         L     GR5,L4(GR5)              GET NEXT DEB ADDR       YM01130
         LA    GR5,0(GR5)              CLEAR HIGH ORDER BYTE   @ZA01214
         LTR   GR5,GR5                  END OF DEB-CHAIN ?      YM01130
         BNZ   LOADUCB                  BRCH IF MORE DEBS       YM01130
         SR    GR15,GR15                TERMINATION IS TO       YM01130
         BR    GR14                     CONTINUE                YM01130
         DROP 6                                                YM01182
         EJECT
UCBFIND  EQU   *
         L     GR9,CVTPTR              ADDRESS OF COMM. VECTOR TABL).
         USING CVT,GR9
         CLI   0(GR3),BLANK            THIS A LEGIT DDNAME.
         BE    NEEDUCB                 NO--SPAECIAL CASE.
         L     GR4,CVTTCBP             TCB WORKD8 WORD.          YM5770
         L     GR4,LASTCTCB(GR4)       PICK UP TCB ADDRESS.      YM5770
         USING TCB,GR4                                           YM5770
         L     GR4,TCBTIO              PICK UP TIOT ADDRESS.     YM5770
         DROP  GR4                                               YM5770
         USING TIOT1,GR4                                         YM5770
         LA    GR15,TIOELNGH           PICK UP DD ENTRY ADDRESS. YM5770
         SR    GR1,GR1
FINDNAME IC    GR1,0(GR15)             LOAD DD ENTRY LENGTH.
         LTR   GR1,GR1                 TEST FOR END OF TIOT.
         BZ    BADCARD                 END OF TABLE/NO DDNAME.
         CLC   4(8,GR15),0(GR3)        CHECK DD ENTRY FOR NAME MATCH.
         LR    GR2,GR15                SAVE POINTER.
         LA    GR15,0(GR1,GR15)        SET UP FOR NEXT ENTRY.
         BNE   FINDNAME                NO MATCH-RETURN TO CHECK MORE.
         ICM   GR9,M7,17(GR2)          GET UCBPTR              @VS40035
         USING UCB,GR9                                          YL02912
         BZ    CHKPRINT                 GO GHK SYSPRINT          YM5770
         TM    UCBJBNR,UCBVRDEV         THIS A VIRTUAL UCB ?    YM08503
         BO    ERR855                   YES, GO ISSUE ERR MSG   YM08503
         TM    UCBTBYT3,UCB3DACC        DASD DEV?              @ZA26352
         BZ    NODASD                   NO THEN DONT TST NXT   @ZA26352
         TM    UCBTBYT2,UCB2OPT4        THIS A VIRTUAL UCB ?   @Y30LSFY
         BO    ERR855                   YES, GO ISSUE ERR MSG  @Y30LSFY
NODASD   LR    GR15,GR4                 GET TIOT               @ZA26352
         DROP  GR4                                               YM5770
         USING TIOT1,GR15                                        YM5770
         SR    GR4,GR4                  CLEAR                    YM5770
         LR    GR1,GR4                  *                        YM5770
TRYAGAIN EQU   *                                                 YM5770
         IC    GR1,TIOELNGH             GET ENTRY LENGTH       @ZA03352
         LTR   GR1,GR1                  IS IT END OF TIOT ?    @ZA03352
         BCR   COND0,GR14               YES, RETURN            @ZA03352
         CLM   GR9,7,TIOESTTB+1         IS IT SAME UCB         @ZA01705
         LA    GR15,DISP0(GR1,GR15)     GET NEXT ENT           @ZA03352
         BNE   TRYAGAIN                 NO, GET NEXT ENT       @ZA03352
         LA    GR4,ADD1(GR4)            ADD 1 TO UCB COUNT       YM5770
         STC   GR4,ALLOCNT              SAVE ALLOCATION COUNT    YM5770
         B     TRYAGAIN                 CHK NEXT ENT             YM5770
CHKPRINT EQU   *                                                 YM5770
         CLC   SYSOUTDD,0(GR3)          DDNAME=SYSPRINT ?       OX01789
         BCR   8,GR14                   YES, EXIT               OX01789
         SPACE 2
ZEROUCB  EQU   *                                                YM5582
         LA    GR1,MESS20               LOAD MSG NO.            YM5582
BLDMSG   EQU   *                                                YL02912
         BAL   GR9,BUILD                BRING MSG INTO BUFFER   YM5582
         MVC   K0(L8,GR1),K0(GR3)       MOVE DDNAME TO MSG      YM5582
         B     MSGWRT2                  GO PRINT MSG            YM5582
ERR855   EQU   *                                                YL02912
         LA    GR1,MESS55               VIRTUAL UCB ERROR MSG   YL02912
         B     BLDMSG                   GO PRINT MSG            YM08503
         DROP 9                                                YM01182
         USING CVT,GR9                  RESTORE USING           YL02912
NEEDUCB  EQU   *
         L     GR15,CVTILK2            UCB ADDRESS TABLE.
STARTEST EQU   *                                               @30AAAG
         SLR   GR1,GR1                 CLEAR REGISTER          @30AAAG
         ICM   GR1,3,0(GR15)           INSERT UCB ADDR-16 BITS @30AAAG
         BZ    UPUCBPTR                NO--GO SEE IF MORE ENTRIES.
         USING UCB,GR1
         TM    UCBTBYT3,UCB3DACC       THIS A DIRECT ACCESS DEVICE.
         BZ    UPUCBPTR                 NO--GO SEE IF MORE ENTRIES.
         CLC   1(3,GR3),UCBNAME         THIS THE DESIRED UCB.
         BNE   UPUCBPTR                 NO--GO SEE IF MORE ENTRIES.
         AIF  ('&LIB' EQ 'LIB2').NODC1  BRCH IF VS ASSEM        XL03912
         CLI   UCBTBYT4,DA2321          THIS A 2321
         BE    PROC2321                 YES-SPECIAL CASE.
.NODC1   ANOP                                                   XL03912
UCBRET   LR    GR9,GR1                  ADDDRESS OF UCB.
         TM    UCBTBYT2,UCB2OPT4        THIS A VIRTUAL UCB ?   @Y30LSFY
         BO    ERR855                   YES, GO ISSUE ERR MSG  @Y30LSFY
         TM    UCBFL5,UCBNALOC          THIS DEVICE IN USE ?    YM01130
         BO    NEWMSG                   YES, ISSUE IEH859 MSG   YM01130
         BR    GR14                     RETURN.
NEWMSG   EQU   *                                                YM01130
         LA    GR1,MESS59               LOAD MSG NO.            YM01130
         B     BLDMSG                   GO PRINT MSG            YM01130
         AIF  ('&LIB' EQ 'LIB2').NODC2  BRCH IF VS ASSEM        XL03912
         SPACE
PROC2321 SR    GR4,GR4                  CLEAR.
         IC    GR4,5(GR3)               PICK UP BIN NO.
         N     GR4,MASK                 CLEAR ZONE BITS.
         SLA   GR4,4                    BIN NO. TIMES 16.
         LA    GR1,DATACELL(GR4)        SUB-UCB ADDRESS.
         B     UCBRET                   EXIT NOW.
.NODC2   ANOP                                                   XL03912
         DROP  1,9
UPUCBPTR LA    GR15,2(GR15)             STEP TO NEXT TABLE ENTRY.
         CLC   0(2,GR15),UCBLAST        ANY MORE ENTRIES.
         BNE   STARTEST                 YES--KEEP LOOKING.
         B     RMESS24                  NO--THIS UCB NOT IN SYSTEM.
         EJECT
MSGPRT   EQU   *
         TM    SW1,TEXTIN              ARE WE LOOKING FOR IPL TEXT.
         BO    NOIPLMSG                YES-GIVE PROPER MESSSAGE.
         LA    GR1,MESS0               MESSAGE NUMBER.
         BAL   GR9,BUILD               GO MOVE MESSAGE TO BUFFER.
         L     GR3,STORGR3             LAST ADDRESS SCANNED.
         LA    GR4,CARDBUFF            START OF CONTROL STATEMENT.
         SR    GR3,GR4                 NO. OF COLUMNS SCANNED.
         CVD   GR3,WURK                CONVERT TO DECIMAL
         UNPK  WURK(2),WURK+6(2)       UNPACK FOR PRINTING.
         OI    WURK+1,X'F0'            SET PROPER ZONE.
         TR    WURK(2),IOTAB-240       CONVERT TO EBCDIC FOR PRINTING.
         MVC   0(2,GR1),WURK           PLACE ANSWER IN MESSAGE.
         B     MSGWRT2                 GO WRITE OUT THE MESSAGE.
         SPACE
INVALCOM LA    GR1,MESS1               MESSAGE NUMBER 801.
INV1     BAL   GR9,BUILD               GO MOVE MESSAGE TO BUFFER.
         MVC   0(8,GR1),WURK           MOVE INVALID PORTION TO MESSAGE.
         B     MSGWRT2                 GO WRITE OUT THE MESSAGE.
INVALKEY LA    GR1,MESS2               MESSAGE NUMBER 802.
         B     INV1                    BUILD AND WRITE OUT THE MESSAGE.
INVALP1  BCTR  GR2,0                   DECREMENT LENGTH FOR EXECUTE.
INVALPAR LR    GR5,GR1                 SAVE ADDRESS OF PARAMETER.
         LA    GR1,MESS3               MESSAGE NUMBER 803.
         BAL   GR9,BUILD               GO BUILD THE MESSAGE.
         LR    GR4,GR1                 ADDRESS TO MOVE IN PARAMETER.
         LR    GR1,GR5                 ADDRESS OF PARAMETER.
         EX    GR2,PMOVE               PARAMETER TO OUTPUT BUFFER.
         B     MSGWRT2                 GO WRITE OUT THE MESSAGE.
         SPACE
KEYMISS  LA    GR1,MESS4               MESSAGE NUMBER 804.
         BAL   GR9,BUILD               GO MOVE MESSAGE TO BUFFER.
         B     MSGWRT2                 GO WRITE OUT THE MESSAGE.
         SPACE
DCBERROR LA    GR1,MESS5               MESSAGE NUMBER 805.
         BAL   GR9,BUILD               GO MOVE MESSAGE TO BUFFER.
         LA    GR4,READ                SYSIN DCB ADDRESS.
         USING IHADCB,GR4
         MVC   0(8,GR1),DCBDDNAM       DDNAME TO MESSAGE.
         BAL   GR9,ERRPRINT            WRITE OUT THE MESSAGE.
         MVI   RETCODE,8               SET RETURN CODE.
         B     ENDALL                  GO TERMINATE.
         SPACE
         SPACE
BADCARD  LA    GR1,MESS12              MESSAGE NUMBER.
BADCARD1 BAL   GR9,BUILD               GO MOVE MESSAGE TO BUFFER.
         MVC   0(8,GR1),0(GR3)         DDNAME TO MESSAGE
         B     MSGWRT                  GO WRITE OUT THE MESSAGE.
MSGWRT2  OI    SWITCHRD,BYPASS         INSURE SCAN KNOWS OF ERROR.
         SPACE
MSGWRT   BAL   GR14,FREECORE           FREE CORE ASSIGNED THIS FUNCTION
MSGWRT1  BAL   GR9,ERRPRINT            GO WRITE OUT THE MESSAGE.
         MVI   RETCODE,8               SET RETURN CODE.
         TM    SWITCHRD,EOF            PREVIOUS EOF.
         BO    CHECK                   YES-GO SEE IF FINISHED.
         B     SCAN                    RESUME SCAN OF CARDS,
         SPACE
*   WRITE OUT ALL MESSAGES HERE.
ERRPRINT EQU   *
         LINK  EP=IEHDPRNT
         BR    GR9                     RETURN.
         SPACE
*   BUILD ALL MESSAGES HERE.
BUILD    LINK  EP=IEHDMSGB
         BR    GR9                     RETURN.
         SPACE
SETCODE  MVI   RETCODE,16              SET RETURN CODE.
         B     FREEWORK                GO FREE THE WORK AREA.
         SPACE
COREMSG  LA    GR1,MESS18              MESSAGE NUMBER 818.
         BAL   GR9,BUILD               GO MOVE MESSAGE TO BUFFER.
         B     MSGWRT                  GO WRITE OUT THE MESSAGE.
         SPACE
NOIPL    MVI   SWITCHRD,EOF            INDICATE EOF ENCOUNTERED.
NOIPLMSG LA    GR1,MESS26              MESSAGE NUMBER 826.
         NI    SW1,X'FF'-TEXTIN        INSURE SWITCH IS OFF.
         BAL   GR9,BUILD               PLACE MESSAGE IN BUFFER.
         MVC   0(8,GR1),WORKD8         DDNAME TO MESSAGE.        A32162
         B     MSGWRT2                 GO WRITE OUT THE MESSAGE.
         SPACE
RMESS24  LA    GR1,MESS24              MESSAGE NUMBER.
         MVI   SWITCHRD,0              RESET CONTROL SWITCH      M2385
         B     BADCARD1                GO BUILD AND WRITE OUT MESSA^E.
         EJECT
FREEPOOL TM    23(GR1),1               ARE THERE BUFFERS.      @ZA04422
         BO    0(GR9)                  NO--RETURN.             @ZA04422
         FREEPOOL (1)                  FREE QSAM BUFFER POOLS.
         BR    GR9                     RETURN.
***********************************************************************
*                                                                     *
*   THIS ROUTINE WILL CLEAR ANY BLOCK OF CORE TO ZERO.                *
*                                                                     *
*     REGISTER 1 MUST CONTAIN THE STARTING ADDRESS UPON ENTRY.        *
*     REGISTER 2 IS A WORK REGISTER.                                  *
*     REGISTER 3 MUST CONTAIN THE SIZE UPON ENTRY.                    *
*     REGISTER 14 IS THE RETURN REGISTER.                             *
*                                                                     *
***********************************************************************
         SPACE
CLEAR    LA    GR2,255                 SET FOR EXECUTE.
         MVI   0(GR1),X'00'            PRIME FIRST BYTE FOR EXEC.
EXEC     CH    GR3,TWO56               WILL THIS BE THE LAST PASS.
         BNH   LASTTIME                YES-DO ONE MORE MOVE.
         EX    GR2,MVZO                CLEAR 256 BYTES.
         LA    GR1,256(GR1)            INCREMENT ADDRESS.
         SH    GR3,TWO56               UPDATE BYTE COUNT.
         B     EXEC                    RETURN TO CHECKPOINT.
         SPACE 1
LASTTIME BCTR  GR3,0                   DECREMENT FOR MVC.
         EX    GR3,MVZO                CLEAR REMAINING PORTION.
         BR    GR14                    RETURN.
         EJECT
LOADADDR DC    F'0'                    FUNCTION ROUTINE ADDRESS.
         DS    0F
EXITLST1 DC    X'85'         SYSIN DCB EXIT LIST
         DC    AL3(DCBEXIT1)
LINKADDR DC    1D'0'                   NAME OF ROUTINE TO LOAD.
         DC    C'IEHDDUMP'             DUMP MODULE.
         DC    C'IEHDREST'             RESTORE MODULE.
         DC    C'IEHDGETA'             GETALT MODULE.
         DC    C'IEHDLABL'             LABEL MODULE.
         DC    C'IEHDANAL'             ANALYZE MODULE.
          DC    C'IEHDANAL'            FORMAT MODULE.
         DC    C'IEHDIPLI'             IPLPROG MODULE
         SPACE 1
         AIF   ('&LIB' EQ 'LIB1').WIN05 BRCH IF OS ASSEM        XL03130
ENDPL    EQU   X'80'                    END OF PARAM. LIST FLG  XL03130
L3       EQU   3                        LENGTH OF 3            @Y30LSFY
L1       EQU   1                                                VS06562
M7       EQU   7                       USED IN ICM/STCM INSTR  @VS40035
L43      EQU   43                                               VS06562
OPENED   EQU   X'10'                    DCBOFLG FOR OPEN DS     VS06562
FORMAT4  EQU   X'04'                    DSN KEY FOR F4 DSCB     VS06562
WINC     EQU   X'0A'                    WINCHESTER UCB TYPE     XL03130
MERLIN   EQU   X'09'                    MERLIN UCB TYPE        @Y30LSFY
ICEBERG  EQU   X'0D'                    ICEBERG UCB TYPE       @Y30LSFY
OUTDCB   DCB   DSORG=PS,MACRF=(E),DEVD=DA,EOEA=P8,XENDA=P9,EXLST=LIST
SVCTYP   DC    C'82'                    DEVTYPE SVC NO.         XL03130
         DS    H                        UNUSED
.WIN05   ANOP                                                   XL03130
D4       EQU   4                        DISPLACEMENT OF 4       XL03130
D0       EQU   0                        DISPLACEMENT OF 0       XL03130
ZERO     DC    F'0'
ROOTSAVE DS    18F                     SAVE AREA FOR CALLED ROUTINES.
KONSTANT DC    V(IEHDCONS)             DEVICE CONSTANT MODULE ADDRESS.
SS1OFFST DC    F'832'                  OFFSET - SS/1 CONSTANTS @Y30LSFY
ANSWER   DS    1F                      USED BY CONDITIONAL GETMAIN.
         SPACE 1
MVZO     XC    0(1,GR1),0(GR1)         EXECUTED TO CLEAR CORE.
PMOVE    MVC   0(1,GR4),0(GR1)         USED TO MOVE DDNAME PARAMETERS.
CHKTODD  CLC   4(0,GR15),0(GR1)         EXECUTED COMPARE OF DDN  A50288
TWO56    DC    H'256'                  COMPARE CONSTANT.
EIGHT    DC    H'8'
THREE    DC    H'3'                    COMPARE CONSTANT.
FIVE     DC    H'5'                     LENGTH OF TODD FOR 2321  A50288
*                                       OFFLINE                  A50288
DONESTAE DC    X'00'                   IF FF THEN ESTAE DONE   @ZA27199
         DS    0F
         AIF   ('&LIB' EQ 'LIB1').ARONDK THIS ASSEM FOR OS, BRCH X02912
IPLMAX   DC    F'6496'                  MAX IPLTXT RECORD SIZE   X02912
.ARONDK  ANOP                                                    X02912
MASK     DC    X'0000000F'             MASK FOR 'AND'.
UCBLAST  DC    XL2'FFFF'               LAST UCB IDENTIFIER.
RETCODE  DC    X'00'                   HIGHEST RETURN CODE, IF ANY.
SAVLGTH  DS    1C                      LENGTH SAVE AREA.
YES      DC    C'YES'                  PARAMETER COMPARISON.
NO       DC    C'NO'                   PARAMETER COMPARISON.
TXT      DC    C'TXT'                  TEXT CARD COMPARE.
END1     DC    C'END'                  END CARD COMPARE.
ALLOCNT  DC    XL1'0'                   UCB ALLOCATION COUNT     YM5770
CTOEMASK DC    X'2020202020202020'     USED TO CHANGE ZONES.
ALTTT    DC    X'0A0B0C0D0E0FDDDDDD'   TABLE FOR CONVERSION TO HEX.
         DC    X'DDDDDDDDDDDD'
         DC    X'00010203040506070809'
IOTAB    DC    C'0123456789ABCDEF'     TRANSLATE TABLE.
         SPACE 1
         EJECT
PRINT    DCB   DSORG=PS,MACRF=PM,RECFM=FBSA,BFTEK=S,BFALN=F,           X
               DDNAME=SYSPRINT,LRECL=121,EXLST=EXITLST1
         SPACE
READ     DCB   DSORG=PS,MACRF=GM,RECFM=FB,LRECL=80,BFTEK=S,            X
               BUFNO=2,BFALN=F,DDNAME=SYSIN,EXLST=EXITLST1,EROPT=SKP
MAINT    DS    50F                     PATCH AREA.              US02496
         EJECT
         IEHDWORK
         SPACE
         SPACE 1
         IEHDBLKS
         SPACE
STAELIST DSECT                                                  YM01130
         DS    F                        TCB ADDRESS             YM01130
STAEND   DS    F                        HEX 80 IN HIGH BYTE     YM01130
STAEX    DS    0F                                               STAEFIX
STAESIZE EQU   STAEX-STAELIST           LENGTH OF STAE LIST     STAEFIX
         SPACE
DEVMSK   DSECT                          MASKS DEVTYPE MACRO O/P XL03130
         DS    2F                                               XL03130
NOFCYL   DS    H                        NO. OF CYLINDERS       @ZA24409
IPLCARD  DSECT                         CARD FORMAT//IPL PROGRAM.
CARDID   DS    CL1
CARDTYPE DS    CL3                     TYPE OF CARD.
         DS    CL1
CARDADDR DS    CL3
         DS    CL2
CARDBYTE DS    CL2                     NO. OF BYTES//THIS CARD.
         DS    CL2
         DS    CL2
CARDTEXT DS    CL56                    TEXT DATA PORTION.
         DS    CL8
         EJECT
UCB      DSECT
         IEFUCBOB LIST=YES
         EJECT
         DCBD  DSORG=PS
         EJECT
CVT      DSECT
         CVT   SYS=MIN
         EJECT
         IKJTCB SYS=AOS2,DSECT=YES,LIST=YES                      YM5770
         EJECT
TIOT     DSECT                                                   YM5770
         IEFTIOT1                                                YM5770
         EJECT                                                  VS06562
JFCB     DSECT                                                  VS06562
         IEFJFCBN                                               VS06562
         END
