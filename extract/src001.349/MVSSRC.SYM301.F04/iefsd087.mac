         TITLE 'IEFSD087 - VMS SYSOUT STANDARD DATASET OUTPUT WRITER'
*
*          RELEASE 22 DELETIONS/CHANGES
*          RELEASE 21 DELETIONS/CHANGES
*1123083600                                                      A51944
*1123                                                            A39229
*1123                                                            A41000
*1123                                                            A42459
*          RELEASE 20 DELETIONS/CHANGES
*1043060240-060280,060360,063000                                 M5878
*1043004260                                                      20202
* 011200-032200,039200-046992,047122-047742                      MAPMAC
* 068720                                                         A34036
* 084243-084246                                                  A33218
*1043064200                                                      A35780
 TITLE 'IEFSD087' - STANDARD DATASET OUTPUT WRITER
***********************************************************************
*                                                                     *
* STATUS CHANGE LEVEL 008
*                                                                     *
*FUNCTION OF THIS MODULE:                                             *
*                                                                     *
*    0. DETERMINE IF THE OUTPUT DEVICE IS A 3211 PRINTER AND     20202
*       CHANGES HAVE BEEN REQUESTED TO THE UCS/FCB ENVIRONMENT.  20202
*       THEN LINK TO MODULE IEFSDTTE TO LOAD THE UCS/FCB BUFFERS.20202
*    1. GET THE INDIVIDUAL RECORDS FROM THE DATASET.                  *
*    2. WRITE TO THE SYSTEM OUTPUT DEVICE ERROR MESSAGES IF THE DCB   *
*       IS NOT SATISFACTORY FOR QSAM PROCESSING OR IF THE IS AN       *
*       UNRECOVERABLE INPUT ERROR.                                    *
*    3. IF INPUT DATASET IS SPANNED AND OUTPUT IS NOT LOADS THE    VS0H
*       VARIABLE SPANNED ROUTINE (IEFSDXXX) AND DELETES IT WHEN    VS0H
*       THE INPUT DATASET IS DONE. IF EITHER INPUT OR OUTPUT IS    VS0H
*       SPANNED IEFSDXXX IS ENTERED TO INITIALIZE THE SPAN CONTROL VS0H
*       AREA AND GET CORE FOR AN AREA TO BUILD THE SPANNED RECORD  VS0H
*       IN IF NECESSARY. IT WILL FREE THIS AREA WHEN THE INPUT     VS0H
*       IS DONE .                                                  VS0H
*                                                                     *
*OPERATION OF THIS MODULE:                                            *
*                                                                     *
*    ENTRY POINT 1 - IEFSD087 WHICH IS LINKED TO FROM IEFSD070 WHEN   *
*        THIS MODULE IS TO BE USER TO PUT OUT DATASETS.               *
*    INPUT AT ENTRY POINT 1:                                          *
*        REGISTER 1 POINTS TO THE WORK LIST USED BY DSB AND SMB       *
*        ROUTINE.                                                     *
*                                                                20202
*    EXIT POINT 0.2 - LINK TO IEFSDTTE TO LOAD THE UCS/FCB BUFFER 20202
*    OUTPUT AT EXIT POINT 0.2:                                   20202
*        REGISTER 6 POINTS TO THE INPUT DCB.                     20202
*        REGISTER 7 POINTS TO THE WORK LIST USED BY DSB AND SMB  20202
*        ROUTINE.                                                20202
*        REGISTER 8 POINTS TO THE WORK AREA FOR STANDARD OUTPUT  20202
*        ROUTINE.                                                20202
*                                                                     *
*    EXIT POINT 0.5 - BRANCH TO IEFSDXXX TO INITIALIZE THE SPAN    VS0H
*        CONTROL AREA IF INPUT OR OUTPUT IS VARIABLE SPANNED.      VS0H
*    OUTPUT AT EXIT POINT 0.5:                                   20202
*        REGISTER 7 POINTS TO THE WORK LIST USED BY DSB AND SMB    VS0H
*        ROUTINE.                                                  VS0H
*        REGISTER 8 POINTS TO THE PARAMETER LIST GIVEN TO SMB AND  VS0H
*        DSB PROCESSING ROUTINES.                                  VS0H
*                                                                  VS0H
*    EXIT POINT 1 - BRANCH TO IEFSD088 TO DO THE START TRANSITION     *
*        ROUTINE.                                                     *
*    OUTPUT AT EXIT POINT 1:                                          *
*        REGISTER 7 POINTS TO THE WORK LIST USED BY DSB AND SMB       *
*        ROUTINE.                                                     *
*        REGISTER 8 POINTS TO THE WORK AREA FOR STANDARD OUTPUT       *
*        ROUTINE.                                                     *
*                                                                     *
*    EXIT POINT 2 - BRANCH TO IEFSD089 TO DO THE PUT FOR EACH RECORD. *
*    OUTPUT AT EXIT POINT 2:                                          *
*        REGISTER 7 POINTS TO THE WORK LIST USED BY DSB AND SMB       *
*        ROUTINE.                                                     *
*        REGISTER 8 POINTS TO THE PARAMETER LIST GIVEN TO SMB AND     *
*        DSB PROCESSING ROUTINES.                                     *
*                                                                     *
*    EXIT POINT 3 - BRANCH TO IEFSD088 TO DO THE END TRANSITION       *
*        ROUTINE.                                                     *
*    OUTPUT AT EXIT POINT 3:                                          *
*        REGISTER 7 POINTS TO THE WORK LIST USED BY DSB AND SMB       *
*        ROUTINE.                                                     *
*        REGISTER 8 POINTS TO THE WORK AREA FOR STANDARD OUTPUT       *
*        ROUTINE.                                                     *
*                                                                     *
*    EXIT POINT 4- RETURN TO IEFSD078 IF SYSOUT WORK DONE.            *
*        THE REGISTERS ARE RESTORED TO AS THEY WERE ON LEAVING        *
*        IEFSD078.                                                    *
*                                                                     *
*EXTERNAL ROUTINES:                                                   *
*                                                                     *
*    IEFSD088  THE TRANSITION ROUTINE                                 *
*    IEFSD089  THE OUTPUT ROUTINE                                     *
*   IEFSDXXX   SPANNED DATASETS ROUTINE                            VS0H
*    IEFSD078  SYSOUT WRITER LINK-TO-DSB/SMB                          *
*    IEFSD87M  MESSAGES FOR IEFSD087                                  *
*    IEFSDTTE  THE 3211 PRINTER SUPPORT ROUTINE
*                                                                     *
*                                                                     *
*                                                                     *
*ATTRIBUTES - REENTRANT                                               *
*                                                                     *
***********************************************************************
*                        NEEDED DSECTS
*
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
*
*        ESSENTIAL EQUATES
******************************************************************
*3211 SUPPORT
DEBUCBAD EQU   32                       UCB ADDR OFFSET IN DEB   M5878
FLAGF    EQU   X'FF'                    ONE BYTE FLAG            M5878
FOUR     EQU   4                        LENGTH OF FOUR           M5878
JFCBFAL  EQU   X'08'                    JFCB FCB ALIGN REQUEST   M5878
JFCBFVR  EQU   X'04'                    JFCB FCB VERIFY REQUEST  M5878
JFCBUBLK EQU   X'40'                    JFCB UNBLK ALLOW DATA CK M5878
JFCBUF   EQU   X'40'                    JFCB UCS FOLD REQUEST    M5878
JFCBUVR  EQU   X'10'                    JFCB UCS VERIFY REQUEST  M5878
RETCODE  EQU   19                       REG 15 RETURN CODE       M5878
TTETYPE  EQU   X'09'                    3211 UNIT TYPE           M5878
UCBFDF   EQU   X'80'                    UCB FCB ID IS DEFAULT ID M5878
UCBUDF   EQU   X'80'                    UCB UCS ID IS DEFAULT ID M5878
ZERO     EQU   0                        ZERO CONSTANT            M5878
UCBUPE   EQU   X'01'                    UCB UCS PARITY ERROR     M5878
*
******************************************************************
*
*DEFINE JFCB
IEFJFCBN DSECT
         IEFJFCBN
IEFUCBOB DSECT
         IEFUCBOB
*
******************************************************************
*
*DEFINE DCB LABELS FOR DCB OF MAXIMUM SIZE
         DCBD  DSORG=PS
*DEFINE DCB AND OPEN AND CLOSE. (EODAD,SYNAD,OPEN,AND CLOSE TO ADD)
TODCB    DSECT
         DCB   DSORG=PS,                                               *
               MACRF=GL,                                               *
               BUFNO=2
SPOPN    OPEN  (0,INPUT),MF=L
SPCLO    CLOSE (0),MF=L
SPEXL    DC    F'0'                     DCB EXIT LIST
SPEXL1   DC    F'0'                    DCB EXIT LIST
BODCB    EQU   *
         IEFSDWKT                                                MAPMAC
         IEFSDSDR                                                MAPMAC
         IEFSDWKX                                                MAPMAC
*EQUATES
ASASW    EQU   4                        ASA CONTROL CHARACTER
MACSW    EQU   2                        MACHINE CONTROL CHARACTER
NOTLA    EQU   X'1'                     NOT LAST SEGMENT           VS0H
NOTFI    EQU   X'2'                     NOT FIRST SEGMENT          VS0H
VARSP    EQU   X'48'                    VARIABLE SPANNED RECFM     VS0H
CVT      EQU   16                                                  000F
MFTWO    EQU   X'74'                                               000F
MFTBT    EQU   X'20'                                               000F
VARSW    EQU   64                       VARIABLE SWITCH WHEN NOT FIXED
FIXSW    EQU   128                      FIXED SWITCH WHEN NOT VARIABLE
UNKSW    EQU   VARSW+FIXSW              UNKNOWN SWITCH
         IEFSDPAR                                                MAPMAC
         IEFSDSMF                                                MAPMAC
*                                                                     *
*                   THIS ROUTINE IS THE STANDARD SYSOUT WRITER        *
*                   ROUTINE WHICH MAY BE USED TO WRITE OUT            *
*                   DATASETS INSTEAD OF ONE SUPPLIED BY THE           *
*                   USER. IT RECEIVES A 3 WORD REGISTER SAVE          *
*                   AREA THE ADDRESS OF WHICH IS IN REGISTER          *
*                   1. THE AREA HAS THE FOLLOWING APPEARANCE:         *
*                                                                     *
*                    *************************************            *
*                    *        *        *        *        *            *
*                    *SWITCHES*        *        *        *            *
*                    *        *        *        *        *            *
*                    *************************************            *
*                    *                                   *            *
*                    *         ADDRESS OF OUTPUT DCB     *            *
*                    *                                   *            *
*                    *************************************            *
*                    *                                   *            *
*                    *         ADDRESS OF INPUT DCB      *            *
*                    *                                   *            *
*                    *************************************            *
*                                                                     *
*                   SWITCHES ARE AS FOLLOWS:                          *
*                                                                     *
*                    LEFT MOST BIT (128) IS ON IF THE OUTPUT          *
*                    UNIT IS A 1442 PUNCH                             *
*                                                                     *
*                    NEXT BIT (64)  IS ON IF THE OUTPUT UNIT          *
*                    IS A PUNCH OR IF IT IS TAPE WHICH HAS A          *
*                    PUNCH AS ITS ULTIMATE DESTINATION                *
*                                                                     *
*                    NEXT BIT (32) IS ON IF THE OUTPUT UNIT           *
*                    IS A PRINTER OR A PUNCH.                         *
*                                                                     *
*                                                                     *
*                   A USER MAY WRITE A ROUTINE TO USE INSTEAD         *
*                   OF THIS. HE WILL HAVE THE ROUTINE IN THE          *
*                   LINK LIBRARY AND THE PROGRAM NAME IN THE          *
*                   SYSOUT FIELD OF THE DD STATEMENT. SEE JCL         *
*                   PUBLICATION.                                      *
*                                                                     *
*                   THE USERS PROGRAM WILL GET CONTROL WITH           *
*                   THE OUTPUT FILE OPEN AND THE INPUT FILE           *
*                   NOT OPENED.                                       *
*                                                                     *
*                   AT THE END OF HIS ROUTINE HE WILL CLOSE           *
*                   THE INPUT FILE AND RETURN. THE INPUT FILE         *
*                   WILL THEN BE DELETED FOR HIM.                     *
*                                                                     *
*INITIALIZE
IEFSD087 CSECT
*3412047000-048000,058300,065800,078800,079008-079200,079400,      SM0I
*084270                                                            SM0I
*                                                                A17618
*067050-067150                                                   F40172
         SAVE  (14,12)                  SAVE REGISTERS
         BALR  R9,0                     SET BASE REGISTER
         USING *,R9
         LR    R7,R1                    SAVE PARAM REGISTERS
         USING WORKLST,R7
*GET CORE FOR WORK AREA
         LA    R0,WKSOE-WKSOR           GET SIZE OF WORK AREA
         GETMAIN R,LV=(0)               GET CORE FOR IT
         LR    R8,R1                    SET REGISTER TO WORK AREA
         USING WKSOR,R8
         L     R4,WOSPS                 GET ADDRESS OF PARLIST   M5878
         USING PARLIST,R4               ESTABLISH ADDRESSABILITY M5878
         ST    R8,PARWKSOR              SAVE WKSOR ADDRESS       A35780
         ST    R13,SRETR                SAVE RETURN REGISTER
         LA    R13,SMSVA                GET SAVE AREA ADDRESS
*CLEAR TRANSITION WRITE SWITCH
         MVI   BCTSW,X'00'              PUT COUNT TO 0
*                                                                F40172
*         INITIALIZE CONTROL CHARACTERS                          F40172
*                                                                F40172
         MVI   SAVEC,X'09'        INITIALIZE SAVEC               F40172
         MVI   SAVED,X'09'        INITIALIZE SAVED               F40172
*TURN OFF SWITCHES
         MVI   SORS1,0
         MVI   SORS2,0                  TURN OFF SWITCH          A35780
         MVI   SEGIN,0                  MAKE SEGMENT 0             VS0H
*PUT IN EXLST ROUTINE
         L     R6,DCBIN                 GET ADDRESS OF DCB
         USING IHADCB,R6
         LA    R10,SPEXL-TODCB(0,R6)    GET ADDRESS OF DCB EXIT LIST
         ST    R10,SPEXL-TODCB(0,R6)    SAVE IT
         MVC   DCBEXLST+1(3),SPEXL+1-TODCB(R6)
         MVC   SPEXL-TODCB(4,R6),WJFCB  PUT IN JFCB ADDRESS
         MVI   SPEXL-TODCB(R6),X'07'    SET HIGH ORDER BYTE AT 7
         MVC   SPEXL-TODCB+4(4,R6),ADING   PUT IN OPEN EXIT LIST ADDR
*3211 PRINTER SUPPORT
         ST    R13,PARSAP               SAVE POINTER TO SAVE     M5878
*                                       AREA                     M5878
         LA    R13,PARSAV               ADDR OF SAVE AR IN       M5878
*                                       PARLIST                  M5878
         TM    PARSWCH,PARDUMMY         IS OUTPUT DUMMY DATA SET M5878
         BO    OPENIN                   YES, NORMAL OPERATIONS   M5878
         L     R5,PARUCB                GET OUTPUT UCB ADDRESS   M5878
         USING UCBOB,R5                 ESTABLISH ADDRESSIBILITY M5878
*IS OUTPUT DEVICE 3211 PRINTER
         TM    UCBTBYT3,UCB3UREC        IS DEVICE CLASS UNIT REC M5878
         BNO   OPENIN                   NO, NORMAL OPERATION     M5878
         TM    UCBTBYT4,TTETYPE         IS UNIT TYPE 3211 PTR    M5878
         BNO   OPENIN                   NO, NORMAL OPERATION     M5878
*CONTINUE TEST FOR CHANGE REQUEST BEFORE LOADING 3211 PROCESSOR
         L     R10,WJFCB                ESTABLISH                M5878
         USING INFMJFCB,R10               INPUT JFCB BASE        M5878
         L     R5,UCBXTADR              SHIFT TO UCB/UCS         M5878
*                                       EXTENSION                M5878
         DROP  R5                                                A42459
         USING UCBUCS,R5                BASE FOR UCS EXTENSION   A42459
         CLC   JFCFCBID(FOUR),INVALADR  FCB IMAGE-ID SPECIFIED   M5878
         BNE   TTENT                    YES, GO TO IEFSDTTE      M5878
         TM    UCBFCBOP,UCBFDF          PRESENT IMAGE-ID A       M5878
*                                       DEFAULT                  M5878
         BO    CHKVER                   YES, GO TO CHECK VER REQ M5878
         CLI   PARFCBID,ZERO            WAS FCB SAVED            M5878
         BNE   TTENT                    YES, GO TO IEFSDTTE      M5878
CHKVER   EQU   *                                                 M5878
         TM    JFCUCSOP,JFCBFVR         FCB IMAGE-ID VERIFY REQ  M5878
         BO    TTENT                    YES, GO TO IEFSDTTE      M5878
         TM    JFCUCSOP,JFCBFAL         FCB IMAGE-ID ALIGNMENT   M5878
*                                       REQ                      M5878
         BO    TTENT                    YES, GO TO IEFSDTTE      M5878
         CLC   JFCUCSID(FOUR),INVALADR  UCS IMAGE-ID SPECIFIED   M5878
         BNE   TTENT                    YES, GO TO IEFSDTTE      M5878
         TM    UCBUCSOP,UCBUPE          RELOAD REQUEST FROM OPEN M5878
         BO    TTENT                    YES, GO TO IEFSDTTE      M5878
         TM    UCBUCSOP,UCBUDF          PRESENT IMAGE-ID A       M5878
*                                       DEFAULT                  M5878
         BO    UCSVER                   YES, GO TO CHECK VER REQ M5878
         CLI   PARUCSID,ZERO            WAS UCS ID SAVED         M5878
         BNE   TTENT                    YES, GO TO IEFSDTTE      M5878
UCSVER   EQU   *                                                 M5878
         TM    JFCUCSOP,JFCBUVR         UCB IMAGE-ID VERIFY REQ  M5878
         BO    TTENT                    YES, GO TO IEFSDTTE      M5878
         TM    JFCUCSOP,JFCBUF          UCS FOLD MODE REQUEST    M5878
         BO    TTENT                    YES, GO TO IEFSDTTE      M5878
         TM    JFCOPTCD,JFCBUBLK        ALLOW DATA CK,-UNBLOCK   M5878
*                                       REQ                      M5878
         BZ    OPENIN                   NO, NORMAL OPERATION     M5878
TTENT    EQU   *                                                 M5878
*
         DROP  R5                                                M5878
         L     R1,SD89EXIT              PASS 089 ADDR TO         M5878
*                                       IEFSDTTE                 M5878
*                                         FOR OUTPUT MSG WRITE
*LINK TO THE 3211 SUPPORT MODULE
         LINK  EP=IEFSDTTE,MF=(E,(1))   LINK TO 3211 PROCESSOR   M5878
         DROP  R10                                               M5878
         L     R13,PARSAP               RESTORE SAVE AREA ADDR   M5878
***********************************************************************
*                                                                     *
*ON RETURN FROM THE 3211 PROCESSOR MODULE, REGISTER 15 WILL           *
*  CONTAIN A RETURN CODE INDICATING UCS/FCB ENVIRONMENTAL CONDI-      *
*  TIONS.  REG15 RC=00 - SUCCESSFUL COMPLETION                        *
*        REG15 RC<0C AND SORS1=INERS - INPUT ERROR                    *
*        REG15 RC>08 - OUTPUT ERROR                                   *
*                                                                     *
***********************************************************************
         TM    SORS1,INERS              TEST FOR IO ERROR. IF SO M5878
         BO    FREEWORK                 BRANCH TO SKIP INPUT     M5878
         L     R10,WOSAP                GET ADDR ERROR RET PUT   M5878
*                                       AT                       M5878
         TM    RETCODE(R10),FLAGF       TEST FOR ERROR- IF ANY   M5878
         BNZ   FREEWORK                 TERM PRESENT OPERATION   M5878
OPENIN   EQU   *                                                 M5878
*OPEN INPUT
         LA    R1,SPOPN-TODCB(0,R6)     GET ADDRESS OF OPEN
         OPEN  ((R6),INPUT),TYPE=J,MF=(E,(1))
*PUT IN INPUT SYNAD AND EODAD ROUTINES
         MVC   DCBSYNAD+1(3),ADINE+1    PUT IN INPUT ERROR ROUTINE
         MVC   DCBEODAD+1(3),ADINF+1    PUT IN INPUT END OF FILE ROUT.
* SET SWITCH TO INDICATE INPUT CONTROL CHARACTER TYPE
         TM    DCBRECFM,ASASW           ASA CNTRL CHAR ON INPUT  A35780
         BZ    MACTEST                  NO, TEST FOR MACH CC     A35780
         OI    SORS2,ASACC              TURN ON ASA SWITCH       A35780
MACTEST  EQU   *                                                 A35780
         TM    DCBRECFM,MACSW           TEST FOR MACHINE CNTRL CHAR
         BZ    VSPST                    BRANCH TO TEST SPAN IF NOT VS0H
         OI    SORS1,MACHS              TURN ON MACHINE SWITCH
*IS VARIABLE SPANNED OUTPUT                                        VS0H
VSPST    L     R15,WOXXX                GET SPANNED MODULE ADDRESS VS0H
         LTR   R15,R15                  IF A MODULE PRESENT        VS0H
         BNZ   SPANM                    THEN ENTER IT              VS0H
*IS VARIABLE SPANNED INPUT                                         VS0H
         TM    DCBRECFM,VARSP           IF NOT VS INPUT THEN       VS0H
         BNO   DTRRO                    BRANCH TO AVOID SPANNING   VS0H
*LOAD THE SPANNING MODULE                                          VS0H
         LOAD  EP=IEFSDXXX                                         VS0H
*SAVE THIS ADDRESS                                                 VS0H
         ST    R0,WOXXX                                            VS0H
*GET CORE FOR SPANNING WORK AREA                                   VS0H
         LA    R0,WORKFEND-WORKFXXX     GET SIZE                   VS0H
         GETMAIN R,LV=(0)               GET CORE                   VS0H
*SAVE THE GOT CORE OF SPANNING MODULE                              VS0H
         ST    R1,WOXXA                                            VS0H
*BRANCH TO THE SPANNING MODULE                                     VS0H
SPANM    L     R15,WOXXX                GET SPAN MODULE ADDRESS    VS0H
         O     R15,BATEY                USE 8 TO INDICATE DATASET  VS0H
         BALR  R14,R15                  GO TO SPANNING MODULE      VS0H
*DO TRANSITION ROUTINE
DTRRO    L     R15,SD88EXIT             GET ADDRESS FOR EXIT
         BALR  R14,R15
         L     R14,WOSPS           GET ADDRESS OF PARLIST          SM0I
         USING  PARLIST,R14                                        SM0I
         CLI   PARSMF+3,X'FF'      CHECK FOR SMF PROCESSING        SM0I
         BE    CONTUE1             IF NONE-SKIP SMF PROCESSING     SM0I
         L     R15,PARSMF          GET ADDRESS OF SMFREC           SM0I
         DROP   R14                                                SM0I
         USING  SMFREC,R15                                         SM0I
         XC    SMFDYCNT(4),SMFDYCNT  ZERO OUT TRANSITION COUNT     SM0I
         DROP  R15                                                 SM0I
*IS THERE AN UNRECOVERABLE ERROR
CONTUE1  L     R10,WOSAP           GET ADDRESS ERROR RETURN PUT AT SM0I
         TM    19(R10),X'FF'            TEST FOR ERROR IF SO
         BNE   CLIDS                    BRANCH TO CLOSE INPUT
*IS THERE AN UNOPENED DATASET
         TM    SORS1,LRERS+INERS        TEST FOR UNOPENED DATASET
         BO   SD87EOFX                  IF SO BRANCH TO END OF FILE
*WAS CORE NEEDED FOR WORK AREA THAT WASNT AVAILABLE                VS0H
         TM    SORS1,OVERT+CNTGE        IF CANT GET NEEDED CORE    VS0H
         BNZ   SD87EREX                 GO TO WRITE MESSAGE        VS0H
*GET NEXT LOGICAL RECORD
GLOGR    EQU   *                                                 F40172
         L     R1,WOTIQ                 SEE IF CANCEL              000F
         TM    0(R1),X'40'                                         000F
         BO    SD87EOFX           CANCEL MFT-2                     000F
GLOGS    LR    R1,R6                    GET ADDRESS OF DCB         000F
         MVI   SEGIN,0                  GET 0 SEGMENT INDICATION   VS0H
         GET   (1)                      GET NEXT RECORD
*IS THERE A PERMANENT IO INPUT ERROR
         TM    SORS1,INERS              TEST FOR IO ERROR IF SO
         BO    PTICC                    BRANCH TO PUT MESSAGE CNTR CHAR
*GET LENGTH AND BEGINNING OF INPUT RECORD
         LH    R11,DCBLRECL             GET LENGTH
         LR    R12,R1                   GET BEGINNING
*GET SEGMENT INDICATION                                            VS0H
         TM    DCBRECFM,VARSP           IF NOT SPANNING THEN       VS0H
         BNO   SEGDN                    AVOID SAVING SEGMENT       VS0H
         MVC   SEGIN(1),2(R12)          GET SEGMENT INDICATION     VS0H
*IS SEGMENT O.K.                                                   VS0H
         L     R3,WOXXA                 GET PREVIOUS SEGMENT BASE  VS0H
         IC    R3,INSEG-ATENW(R3)       GET PREVIOUS SEGMENT       VS0H
         IC    R10,SEGIN                GET PRESENT SEGMENT        VS0H
         SRL   R10,1                    SHIFT TO ALIGN             VS0H
         XR    R10,R3                   IF SEG OK THE LOW BIT 0    VS0H
         N     R10,ONELY                ONLY LOW BIT LEFT. IF IT 1 VS0H
         BNZ   SEGER                    THEN BRANCH TO SEG. BAD  A34036
SEGDN    EQU   *                        SAVE SEGMENT               VS0H
*IS THE INPUT RECORD IN VARIABLE FORMAT
         TM    DCBRECFM,FIXSW           TEST FOR NON VARIABLE IF SO
         BO    TFCCH                    BRANCH AROUND MODIFICATION
*MODIFY LENGTH AND BEGINNING LOCATION BY 4
         LA    R10,4                    MODIFY BY 4
         SR    R11,R10                  SUBTRACTED FROM LENGTH
         BM    SD87EREX                 ERROR AS RECORD TOO SHORT   076
         AR    R12,R10                  ADDED TO BEGINNING LOCATION
*IS THIS A SUBSEQUENT SEGMENT                                      VS0H
         TM    SEGIN,NOTFI              IF SUBSEQUENT SEGMENT THEN VS0H
         BO    TOOLD                    AVOID C.C. FIX             VS0H
*IS THERE A CONTROL CHARACTER
TFCCH    TM    DCBRECFM,ASASW+MACSW     TEST FOR NO CONTROL CHAR. IF SO
         BZ    ASPOC                    BRANCH TO PUT STANDARD ONE IN
*GET CONTROL CHARACTER
         MVC   CONCH,0(R12)             SAVE CONTROL CHARACTER
*MODIFY LENGTH AND BEGINNING LOCATION BY 1
         LA    R10,1                    MODIFY BY 1
         SR    R11,R10                  SUBTRACTED FROM LENGTH
         BM    SD87EREX                 ERROR AS RECORD TOO SHORT   076
         AR    R12,R10                  ADDED TO BEGINNING LOCATION
         B     TOOLD                    BRANCH TO TURN ON OLD SWITCH
*MAKE ASA SPACE 1 THE CONTROL CHARACTER
ASPOC    MVI   CONCH,C' '
*IS PRINTER OVERFLOWED
         L     R3,DCBOT                 GET DCB ADDRESS
         PRTOV (3),12,MASCH             IF OVER FLOWED BRANCH TO SKIP
*IS OLD SWITCH ON
         TM    SORS1,OLDSW              TEST FOR OLD SWITCH ON IF SO
         BO    TOOLD                    BRANCH TO DO OUTPUT ROUTINE
*MAKE ASA SKIP TO CHANNEL 1 THE CONTROL CHARACTER
MASCH    MVI   CONCH,C'1'
*TURN ON OLD SWITCH
TOOLD    OI    SORS1,OLDSW
*DO OUTPUT ROUTINE
         STM   R11,R12,INLSF            SAVE LOCATION AND BEGINNING
         L     R15,SD89EXIT             GET ADDRESS FOR EXIT
         BALR  R14,R15
*IS THERE AN UNRECOVERABLE ERROR
         L     R10,WOSAP                GET ADDRESS ERROR RETURN PUT AT
         TM    19(R10),X'FF'            TEST FOR ERROR IF SO
         BNE   CLIDS                    BRANCH TO CLOSE INPUT
*IS PERMANENT IO INPUT ERROR SWITCH ON
         TM    SORS1,INERS+OVERT+CNTGE+ERRSW IF IO CORRECT THEN    VS0H
         BZ    GLOGR                    BRANCH TO GET NEXT RECORD
*TURN ON OLD SWITCH
SD87EOFX OI    SORS1,OLDSW
*FIX NUMBER OF TRANSITION WRITES
         MVI   BCTSW,1                  PUT IN 1 FOR PAINTER
         TM    VARBA,PUNSH              TEST FOR PUNCH IF NOT
         BZ    DTRAN                    BRANCH TO DO TRANSITION
         MVI   BCTSW,3                  PUT IN 3 FOR PUNCH
*DO TRANSITION ROUTINE
DTRAN    LA    R1,DTRAN1           GET ADDRESS TO RETURN TO        SM0I
         BAL   R1,SMFPROC          GO CHECK FOR SMF PROCESSING     SM0I
DTRAN1   L     R15,SD88EXIT        GET ADDRESS FOR EXIT            SM0I
         BALR  R14,R15
*IS THERE A SPANNED MODULE                                         VS0H
CLIDS    L     R3,WOXXA                 GET SPANNING WORK AREA     VS0H
         LTR   R3,R3                    IF IT IS O THEN            VS0H
         BZ    CLIDU                    AVOID CLEAN UP             VS0H
*IS THERE A SPECIAL SPAN WORK AREA                                 VS0H
         USING WORKFXXX,R3                                         VS0H
         LM    R0,R1,WOKRL              GET SIZE AND ADDRESS       VS0H
         C     R0,ONSXA                 IF NOT OVER 168 THEN       VS0H
         BNH   TFSPO                    BRANCH AS NO CORE GOT      VS0H
*FREE SPECIAL SPAN WORK AREA                                       VS0H
         FREEMAIN R,LV=(0),A=(1)        FREE CORE                  VS0H
* IS THERE SPANNED OUTPUT                                          VS0H
TFSPO    L     R1,DCBOT                 GET DCB OUTPUT ADDRESS     VS0H
         TM    DCBRECFM-IHADCB(R1),VARSP  IF SPANNED THEN          VS0H
         BO    CLIDU                    AVOID DELETING SPAN MODULE VS0H
*FREE SPAN WORK AREA                                               VS0H
         LA    R0,WORKFEND-WORKFXXX     GET SIZE                   VS0H
         LR    R1,R3                    GET CORE                   VS0H
         FREEMAIN R,LV=(0),A=(1)        FREE CORE                  VS0H
*DELETE THE SPANNING MODULE                                        VS0H
         DELETE EP=IEFSDXXX                                        VS0H
         DROP  R3                                                  VS0H
*INDICATE SPANNING CODE NOT PRESENT                                VS0H
         XC    WOXXX(8),WOXXX                                      VS0H
*CLOSE INPUT
         L     R14,WOSPS           GET ADDRESS OF PARLIST          SM0I
         USING  PARLIST,R14                                        SM0I
         CLI   PARSMF+3,X'FF'      CHECK FOR SMF PROCESSING        SM0I
         BE    CLIDS               IF NONE-SKIP SMF PROCESSING     SM0I
         L     R15,PARSMF          GET ADDRESS OF SMFREC           SM0I
         DROP   R14                                                SM0I
         USING  SMFREC,R15                                         SM0I
         XC    SMFDYCNT(4),SMFDYCNT  ZERO OUT TRANSITION COUNT     SM0I
         DROP  R15                                                 SM0I
CLIDU    L     R10,WOSAP           GET ADDRESS ERROR RETURN PUT AT SM0I
         TM    19(R10),X'FF'       TEST FOR ERROR-IF NONE          SM0I
         BE    CLIDS1              SKIP SMF PROCESSING             SM0I
         LA    R1,CLIDS1           GET ADDRESS TO RETURN TO        SM0I
         BAL   R1,SMFPROC          GO CHECK FOR SMF PROCESSING     SM0I
CLIDS1   LA    R1,SPCLO-TODCB(0,R6)    GET ADDRESS OF CLOSE        SM0I
         CLOSE ((R6)),MF=(E,(1))
*FREE INPUT POOLS
         LR    R1,R6                    GET ADDRESS OF DCB
         FREEPOOL (1)
*FREE WORK AREA
FREEWORK EQU   *                                                 M5878
         L     R13,SRETR                GET RETURN REGISTER
         LA    R0,WKSOE-WKSOR           GET SIZE OF WORK AREA
         LR    R1,R8                    GET START OF IT
         FREEMAIN R,LV=(0),A=(1)
*SAVE RETURN INDICATION
         L     R10,WOSAP                GET ADDRESS ERROR RETURN PUT AT
         MVC   16(4,R13),16(R10)        PUT IT WHERE REG. 15 GETS IT
*INDICATE NO SYNAD ROUTINE
         L     R6,DCBOT                 GET OUTPUT DCB ADDRESS   A41000
         MVC   DCBSYNAD+1(3),ONELY+1    PUT ONE IN SYNAD ADDRESS A41000
         RETURN (14,12)                 RETURN TO IEFSD070       A32638
*DOES DATASET HAVE FIELDS WHICH ARE NEEDED TO OPEN
SD87EXLS NI    DCBBFTEK,X'7F'           SET HIER. BIT TO ZERO    A32638
         OI    DCBBFTEK,X'04'           TURN HIERARCHY=0 BIT ON  A32638
         TM    DCBRECFM,UNKSW           IS INPUT RECFM=U         A39229
         BNO   PCIOK                    NO, DON'T TURN OFF PCI   A39229
         NI    DCBOPTCD,X'DF'           TURN OFF PCI BIT         A39229
PCIOK    EQU   *                                                 A39229
         CLC   DCBBLKSI(2),BBLK         TEST FOR LARGE BLOCKSIZE A32638
         BNH   SDBLK                    NOT TOO LARGE            A17618
         MVI   DCBBUFNO,X'01'           USE ONE BUFFER           A17618
SDBLK    CLC   DCBBLKSI(2),FOURY        TEST FOR ZERO IF NOT     A17618
         BCR   7,R14                    BRANCH TO FINISH OPEN
         CLC   DCBBUFL(2),FOURY         TEST FOR ZERO IF NOT
         BCR   7,R14                    BRANCH TO FINISH OPEN
*FIX SO DATASET CAN COMPLETE OPEN
         LA    R10,18                   GET SMALLEST LENGTH
         STH   R10,DCBLRECL            PUT IN LRECL FOR OPEN     000G
         OI    SORS1,LRERS+INERS        TURN ON NO LRECL AND IO ERROR
         TM    DCBRECFM,X'40'           CHECK FOR VARIABLE FMT   A51944
         BNO   NOTVAR                   BRANCH IF NOT VARIABLE   A51944
*                                       FMT                      A51944
         LA    R10,4(R10)               ADJUST FOR BDW           A51944
NOTVAR   STH   R10,DCBBLKSI             MINIMUM BLOCKSIZE        A51944
         BR    R14                      BRANCH TO ALLOW OPEN
*INPUT ERROR ROUTINE
SD87EREX L     R14,WOSPS           GET ADDRESS OF PARLIST          SM0I
         USING  PARLIST,R14                                        SM0I
         CLI   PARSMF+3,X'FF'      CHECK FOR SMF PROCESSING        SM0I
         BE    CONTUE3             IF NONE-SKIP SMF PROCESSING     SM0I
         L     R14,PARSMF              GET ADDRESS OF SMF REC    A33218
         DROP  R14                                               A33218
         USING  SMFREC,R14                                         SM0I
         OI    SMFERIN,X'04'       SET GET INPUT ERROR INDICATOR ONSM0I
         OI    SMFERINJ,X'04'      SET JOB ERROR INDICATOR         SM0I
         DROP  R14                                                 SM0I
CONTUE3  L     R10,IEFSDM87        SET UP MESSAGE BASE             SM0I
         USING IEFSD87M,R10                                        VS0H
         LA    R12,MS32K                GET START OF MESSAGE       VS0H
         LA    R11,MS32E-MS32K          GET LENGTH OF MESSAGE      VS0H
         TM    SORS1,OVERT              IF OVER 32K ERROR THEN     VS0H
         BO    PTICC                    BRANCH TO GET C.C.         VS0H
         LA    R12,MSGET                GET START OF MESSAGE       VS0H
         LA    R11,MSGEE-MSGET          GET LENGTH OF MESSAGE      VS0H
         TM    SORS1,CNTGE              IF COULDNT GET CORE THEN   VS0H
         BO    PTICC                    BRANCH TO GET C.C.         VS0H
         OI    SORS1,INERS              TURN ON IO ERROR           VS0H
         LA    R12,FIRLN                GET START OF MESSAGE
         LA    R11,ENDLN-FIRLN          GET LENGTH OF MESSAGE
         B     PTICC                    BRANCH TO GET CONTROL CHARACTER
SEGER    L     R10,IEFSDM87             SET UP MESSAGE BASE        VS0H
         LA    R12,MSSEG                GET LOCATION OF MESSAGE    VS0H
         LA    R11,MSSEE-MSSEG          GET LENGTH OF MESSAGE      VS0H
         OI    SORS1,ERRSW              TURN ON BAD SEGMENT SW.    VS0H
*PUT IN THE ERROR CONTROL CHARACTER
PTICC    MVI   CONCH,C' '               GET ASA SPACE 1 OR POCKET 1
         MVI   SEGIN,0                  CLEAR SEGMENT              VS0H
         TM    SORS1,MACHS              TEST FOR MACHINE CNTRL CHAR.
         BZ    TOOLD                    BRANCH TO PUT MESSAGE IF NOT
         MVI   CONCH,X'09'              GET MACHINE SPACE 1
         TM    VARBA,PUNSH              TEST FOR PUNCH TYPE OUTPUT
         BZ    TOOLD                    BRANCH TO PUT MESSAGE IF NOT
         MVI   CONCH,X'01'              GET MACHINE POCKET 1
         TM    VARBA,FTFTW              TEST FOR 1442 PUNCH IF NOT
         BZ    TOOLD                    BRANCH TO PUT MESSAGE
         MVI   CONCH,X'81'              GET 1442 POCKET 1
         B     TOOLD                    BRANCH TO PUT MESSAGE
SMFPROC  L     R14,WOSPS           GET ADDRESS OF PARLIST          SM0I
         USING  PARLIST,R14                                        SM0I
         CLI   PARSMF+3,X'FF'      CHECK FOR SMF PROCESSING        SM0I
         BE    CONTUE4             IF NONE-SKIP SMF PROCESSING     SM0I
         L     R15,PARSMF          GET ADDRESS OF SMFREC           SM0I
         DROP   R14                                                SM0I
         USING  SMFREC,R15                                         SM0I
         L     R14,SMFDYCNT        GET SYSOUT COUNT ADDITION       SM0I
         MVC   SMFWORKA(4),SMFSOCTF   GET OLD SYSOUT COUNT-FORM    SM0I
         A     R14,SMFWORKA        UPDATE COUNT                    SM0I
         ST    R14,SMFWORKA        SAVE NEW COUNT                  SM0I
         MVC   SMFSOCTF(4),SMFWORKA   STORE NEW COUNT-FORM         SM0I
         XC    SMFDYCNT(4),SMFDYCNT    CLEAR SYSOUT COUNTER        SM0I
         DROP  R15                                                 SM0I
CONTUE4  BR    R1                  RETURN TO CALLER                SM0I
*CONSTANTS
BBLK     DC    H'3000'                                           A17618
         DS    0F
FOURY    DC    X'00000004'
BATEY    DC    X'08000000'              TO INDICATE DATASET INPUT  VS0H
ONSXA    DC    F'168'                   MINIMUM GOT CORE           VS0H
ADINE    DC    A(SD87EREX)
ADINF    DC    A(SD87EOFX)
ADING    DC    X'85'                    LAST ENTRY, DATA CONTROL BLOCK
         DC    AL3(SD87EXLS)            ADDRESS OF ROUTINE
SD88EXIT DC    V(IEFSD088)              TRANSITION ROUTINE
SD89EXIT DC    V(IEFSD089)              OUTPUT ROUTINE
IEFSDM87 DC    V(IEFSD87M)              MESSAGE CONSTANTS
INVALADR DC    1F'0'                    INVALID ADDR CONSTANT    M5878
ONELY    DC    X'00000001'                                         VS0H
         DC    C'ZAPSZAPSZAPSZAPS'                                 VS0H
         DC    C'ZAPSZAPSZAPSZAPS'                                 VS0H
         DC    C'ZAPSZAPSZAPSZAPS'                                 VS0H
         DC    C'ZAPSZAPSZAPSZAPS'                                 VS0H
         DC    C'ZAPSZAPSZAPSZAPS'                                 VS0H
***********************************************************************
*                                                                     *
*TITLE         IEFSD87M   MESSAGES FOR IEFSD087                       *
*                                                                     *
***********************************************************************
IEFSD87M CSECT
         DS    0F
FIRLN    DC    C'IEF314I SYSIO'
ENDLN    EQU   *
MS32K    DC    C'IEF229I LRECL EXCEEDS 32K'                        VS0H
MS32E    EQU   *                                                   VS0H
MSGET    DC    C'IEF32OI STORAGE NOT AVAILABLE'                    VS0H
MSGEE    EQU   *                                                   VS0H
MSSEG    DC    C'IEF321I SEGMENT INVALID'                          VS0H
MSSEE    EQU   *                                                   VS0H
         END
