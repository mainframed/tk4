         TITLE 'IEFSD089 - VMS SYSOUT OUTPUT ROUTINE'
*
*          RELEASE 22 DELETIONS/CHANGES
*          RELEASE 21 DELETIONS/CHANGES
*          RELEASE 20 DELETIONS/CHANGES
*1043088840,089008,089016,089040,089070                          A38032
* 008400-029400,036600-044189                                    MAPMAC
*1043                                                            A35780
*1043087060-087240                                               A35926
 TITLE 'IEFSD089' - THE OUTPUT ROUTINE
***********************************************************************
*                                                                     *
*STATUS CHANGE LEVEL 005
*                                                                     *
*FUNCTION OF THIS MODULE:                                             *
*                                                                     *
*    1. PUT THE RECORD TO BE OUTPUT INTO THE CORRECT FORM FOR THIS    *
*       SYSOUT WRITER AND PUT IT OUT.                                 *
*    2. MAKE UP AN ERROR RECORD IF A CONTROL CHARACTER IN AN INPUT    *
*       RECORD CAN NOT BE TRANSLATED INTO A MEANINGFUL CONTROL        *
*       CHARACTER FOR THE OUTPUT WRITER. THEN PUT IT OUT AND PASS     *
*       OVER THE INPUT DATASET THAT CONTAINED IT.                     *
*    3. IN CASE OF SYSOUT WRITER UNIT FAILURE REENQUEUE THE REST OF   *
*       THE JOB TO BE DONE SO THAT ANOTHER WRITER CAN FINISH IT AND   *
*       PASS ON AN INDICATION OF THE KIND OF ERROR THAT OCCURRED.     *
*    4. IN CASE THERE IS VARIABLE SPANNED INPUT OR OUTPUT          VS0H
*       THE SPAN ROUTINE (IEFSDXXX) IS USED TO MAKE UP THE         VS0H
*       RECORD TO BE PUT RATHER THAN THIS ROUTINE                  VS0H
*                                                                     *
*OPERATION OF THIS MODULE:                                            *
*                                                                     *
*    ENTRY POINT 1 - IEFSD089 WHICH IS BRANCHED TO FROM IEFSD086,     *
*        IEFSD087, AND IEFSD088.                                      *
*    INPUT AT ENTRY POINT 1:                                          *
*        REGISTER 7 POINTS TO THE WORK LIST USED BY DSB AND SMB       *
*        ROUTINE.                                                     *
*        REGISTER 8 POINTS TO THE WORK AREA FOR STANDARD OUTPUT       *
*        ROUTINE.                                                     *
*                                                                     *
*    EXIT POINT 0.5 - BRANCH TO IEFSDXXX TO HANDLE THE RECORD      VS0H
*       OBTAINED BY GET. IT WILL BE MOVED INTO THE PUT AREA.       VS0H
*    INPUT AT EXIT POINT 0.5:                                      VS0H
*        REGISTER 7 POINTS TO THE WORK LIST USED BY DSB AND SMB    VS0H
*        ROUTINE.                                                  VS0H
*        REGISTER 8 POINTS TO THE PARAMETER LIST GIVEN TO SMB AND  VS0H
*        DSB PROCESSING ROUTINES.                                  VS0H
*                                                                  VS0H
*    EXIT POINT 0.7 - BRANCH TO IEFSDXXX TO HANDLE THE AREA        VS0H
*       OBTAINED BY PUT. THE OUTPUT RECORDS WILL BE PUT            VS0H
*       FROM HERE.                                                 VS0H
*    EXIT POINT 0.5 - BRANCH TO IEFSDXXX TO INITIALIZE THE SPAN    VS0H
*        CONTROL AREA IF OUTPUT IS VARIABLE SPANNED.               VS0H
*    INPUT AT EXIT POINT 0.7:                                      VS0H
*        REGISTER 7 POINTS TO THE WORK LIST USED BY DSB AND SMB    VS0H
*        ROUTINE.                                                  VS0H
*        REGISTER 8 POINTS TO THE PARAMETER LIST GIVEN TO SMB AND  VS0H
*        DSB PROCESSING ROUTINES.                                  VS0H
*                                                                  VS0H
*    EXIT POINT 1 - BRANCH TO IEFSD088 TO MAKE MORE BLANK RECORDS FOR *
*        OUTPUT IN ORDER TO CLEAR OUT THE PUNCH.                      *
*    OUTPUT AT EXIT POINT 1:                                          *
*        REGISTER 7 POINTS TO THE WORK LIST USED BY DSB AND SMB       *
*        ROUTINE.                                                     *
*        REGISTER 8 POINTS TO THE WORK AREA FOR STANDARD OUTPUT       *
*        ROUTINE.                                                     *
*                                                                     *
*EXTERNAL ROUTINES:                                                   *
*                                                                     *
*    IEFSD088  THE TRANSITION ROUTINE                                 *
*    IEFSD89M  MESSAGES FOR IEFSD089                                  *
*   IEFSDXXX   SPANNED DATASETS ROUTINE                            VS0H
*                                                                     *
*                                                                     *
*                                                                     *
*ATTRIBUTES - REENTRANT                                               *
*                                                                     *
***********************************************************************
*
*                        NEEDED DSECTS
*
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
*DEFINE DCB LABELS FOR DCB OF MAXIMUM SIZE
         DCBD  DSORG=PS
*DEFINE DCB AND OPEN AND CLOSE. (EODAD,SYNAD,OPEN,AND CLOSE TO ADD)
TODCB    DSECT
         DCB   DSORG=PS,                                               *
               MACRF=GL,                                               *
               BUFNO=2
SPOPN    OPEN  (0,INPUT),MF=L
SPCLO    CLOSE (0),MF=L
SPEXL    DC    F'0'                     DCB EXIT LIST
BODCB    EQU   *
         IEFSDWKT                                                MAPMAC
         IEFSDSDR                                                MAPMAC
         IEFSDPAR                                                MAPMAC
         IEFSDSMF                                                MAPMAC
*EQUATES
ASASW    EQU   4                        ASA CONTROL CHARACTER
MACSW    EQU   2                        MACHINE CONTROL CHARACTER
NOTLA    EQU   X'1'                     NOT LAST SEGMENT           VS0H
NOTFI    EQU   X'2'                     NOT FIRST SEGMENT          VS0H
VARSP    EQU   X'48'                    VARIABLE SPANNED RECFM     VS0H
VARSW    EQU   64                       VARIABLE SWITCH WHEN NOT FIXED
FIXSW    EQU   128                      FIXED SWITCH WHEN NOT VARIABLE
UNKSW    EQU   VARSW+FIXSW              UNKNOWN SWITCH
*
*                   THIS ROUTINE HAS TWO PARTS. THE FIRST
*                   TRANSLATES THE CONTROL CHARACTER IF REQUIRED
*                   AND PUTS IT WHERE NEEDED. THE SECOND TAKES
*                   THE INPUT INFORMATION AND MAKES AN OUTPUT
*                   RECORD FROM IT.
*
*INITIALIZE
IEFSD089 CSECT
*3289047100-047150,089400                                          SM0I
*                                                                A20574
*                                                                 M2323
*                                                                 M2380
         BALR  R10,0                    SET BASE REGISTER
         USING *,R10
         USING WORKLST,R7               SET PARAMETER BASE
         USING WKSOR,R8                 SET WORK AREA BASE
         USING IHADCB,R5                SET OUTPUT DCB BASE
         ST    R14,BALRG                SAVE RETURN REGISTER
*PUT IN OUTPUT SYNAD ROUTINE ADDRESS
         L     R5,DCBOT                 GET OUTPUT DCB
         MVC   DCBSYNAD+1(3),ADOUE+1    MOVE IN OUTPUT ERROR ROUTINE
*IS A SUBSEQUENT SEGMENT BEING HANDLED                             VS0H
         TM    SEGIN,NOTFI              IF SUBSEQUENT SEGMENT THEN VS0H
         BO    OUTPT                    AVOID C.C. FIX             VS0H
*DOES THE OUTPUT RECORD REQUIRE A CONTROL CHARACTER
         TM    DCBRECFM,ASASW+MACSW     TEST FOR NO CONTROL CHAR.
         BZ    OUTPT                    BRANCH TO OUTPUT RECORD
*
*                        FIRST PART OF IEFSD089
*                   IF THE INPUT DATASET HAS MACHINE TYPE
*                   CONTROL CHARACTERS AND THE OUTPUT DATASET
*                   HAS ASA CONTROL CHARACTERS, OR VICA VERSA,
*                   THEN THE INPUT TYPE MUST BE TRANSLATED
*                   TO THE OUTPUT TYPE. THERE ARE TWO KINDS
*                   OF TRANSLATIONS, THOSE FOR PRINTER AND
*                   THOSE FOR PUNCHES. THERE ARE TWO DIFFERENT
*                   KINDS OF MACHINE CONTROL CHARACTERS FOR
*                   PUNCHES SO IF THE WRITER IS A 1442 PUNCH
*                   A SOMEWHAT DIFFERENT TRANSLATION IS USED.
*
*IS THE OUTPUT UNIT OF PRINTER TYPE
         SR    R4,R4              CLEAR FOR C/C                   M2380
         IC    R4,CONCH                 GET CONTROL CHARACTER
         TM    VARBA,PUNSH              TEST FOR PUNCH TYPE IF NOT
         BZ    TTAMC                    BRANCH TO TRANSLATE FOR PRINTER
*
*                   AFTER THE CONTROL CHARACTER IS OBTAINED
*                   IT MUST BE PUT IN THE CORRECT RECORD.
*                   MACHINE CONTROL CHARACTER FOR THE PRINTER
*                   ARE USED TO COMMAND SPACING OR SKIPPING
*                   AFTER THE LINE IS PRINTED. ASA CONTROL
*                   CHARACTERS FOR THE PRINTER ARE USED TO
*                   COMMAND SPACING OR SKIPPING BEFORE THE
*                   LINE IS PRINTED.
*                   SO IF THE INPUT FORMAT IS MACHINE AND THE
*                   OUTPUT IS ASA THE CONTROL CHARACTER FROM
*                   A RECORD MUST BE ATTACHED TO THE FOLLOWING
*                   RECORD IN ORDER TO MAKE ITS SPACING OCCUR
*                   BETWEEN THE RECORD AND THE FOLLOWING ONE.
*                   ON THE OTHER HAND, IF THE INPUT FORMAT IS
*                   ASA AND THE OUTPUT IS MACHINE THE CONTROL
*                   CHARACTER FROM A RECORD MUST BE ATTACHED
*                   TO THE PREVIOUS RECORD IN ORDER TO MAKE
*                   ITS SPACING OCCUR BEFORE THE RECORD.
*                   WHEN INPUT RECORDS HAVE NO CONTROL CHARACTERS
*                   ASA CHARACTERS ARE MADE FOR THEM. THESE
*                   ARE TREATED JUST AS REGULAR ASA CHARACTERS.
*
*IS THERE A TRANSLATION FROM ASA TO MACHINE
         TM    DCBRECFM,ASASW           TEST FOR ASA CNTRL CHAR. OUTPUT
         BO    TFOAS                    BRANCH TO OUTPUT ASA IF SO
         TM    SORS1,MACHS              TEST FOR MACH CNTRL CHAR INPUT
         BO    PCHTEST            GO VALIDITY-CHECK C/C          A20574
*TRANSLATE ASA TO MACHINE FOR PUNCH
         LA    R4,X'01'                 GET 2540 STACKER 1
         CLI   CONCH,C'W'               COMPARE C.C. TO W
         BNE   TFORT                    BRANCH AS STACKER 1 IS COMMAND
         LA    R4,X'41'                 GET 2540 STACKER 2
TFORT    TM    VARBA,FTFTW              TEST FOR 1442 IF NOT
         BZ    CCTTR                    BRANCH AROUND GETTING 1442 C.C.
         LA    R4,X'80'(R4)             CHANGE 2540 CHAR. TO 1442 FORM
         B     CCTTR                    BRANCH OUT AS TRANSLATE DONE
*IS THERE A TRANSLATION FROM MACHINE TO ASA
TFOAS    TM    SORS1,MACHS              TEST FOR MACH CNTRL CHAR INPUT
         BZ    CCTTR                    BRANCH OUT BOTH C.C. ASA
*IS THE MACHINE CHARACTER LEGITIMATE
         LA    R4,C'V'                  GET ASA POCKET 1
         TM    CONCH,X'1E'              TEST FOR ILLEGAL BITS IF SO
         BNE   BCCCO                    BRANCH TO CORRECTIVE
         TM    CONCH,X'01'              TEST FOR NECESSARY BIT IF NOT
         BZ    BCCCO                    BRANCH TO CORRECTIVE
         TM    VARBA,FTFTW              TEST FOR 1442 IF NOT
         BZ    TESPU                    BRANCH TO 2540 TESTING
         TM    CONCH,X'80'              TEST FOR NECESSARY BIT IF NOT
         BZ    BCCCO                    BRANCH TO CORRECTIVE
         B     TFOMC                    BRANCH TO TRANSLATE
TESPU    TM    CONCH,X'C0'              TEST FOR ILLEGAL PATTERN IF SO
         BO    BCCCO                    BRANCH TO CORRECTIVE
*TRANSLATE MACHINE TO ASA FOR PUNCH
TFOMC    LA    R4,C'V'                  GET POCKET 1
         TM    CONCH,X'40'              TEST FOR POCKET 2 IF NOT
         BZ    CCTTR                    BRANCH OUT AS TRANSLATE DONE
         LA    R4,C'W'                  GET POCKET 2
*SAVE CONTROL CHARACTER FOR THIS RECORD
CCTTR    STC   R4,SAVEC
         B     OUTPT                    BRANCH TO OUTPUT
*BAD CONTROL CHARACTER CORRECTIVE
BCCCO    STC   R4,SAVEC                 WILL SPACE 1 BEFORE LINE
         MVI   SEGIN,0                  MAKE INPUT SEGMENT 0       VS0H
         L     R11,IEFSDM89             SET UP MESSAGE BASE
         USING IEFSD89M,R11
*SET UP MESSAGE
         LA    R12,FIRLN                GET START OF MESSAGE
         LA    R11,ENDLN-FIRLN          GET LENGTH OF MESSAGE
         STM   R11,R12,INLSF            SAVE MESSAGE PARAMETERS
*TURN ON PERMANENT IO INPUT ERROR SWITCH
         OI    SORS1,INERS
         B     OUTPT                    BRANCH TO PUT OUT MESSAGE
*             THIS ROUTINE TESTS TO SEE IF THE 'ONE' BIT IS
*             ON IN THE CONTROL CHARACTER.  IF IT IS NOT, THE
*             CHARACTER IS INVALID.  IF THE 'ONE' BIT IS ON,
*             THE CHARACTER IS DIVIDED BY TWO AND TESTED FOR
*             VALIDITY.  THE FUNCTION BYTES IN THE TRANSLATE
*             TABLE REFLECT THE FACT THAT THE ARGUMENT BYTE HAS
*             BEEN SHIFTED RIGHT ONE POSITION.
PTRTEST  TM    CONCH,X'01'        DOES C/C HAVE NECESSARY BIT    A20574
         BZ    ERRTNE1            ILLEGAL C/C                    A20574
         SRL   R4,1               DIVIDE C/C BY 2                A20574
         STC   R4,SAVEC           PREPARE FOR TEST               A20574
         TRT   SAVEC(1),PRINTRT   IS C/C VALID                   A20574
         BNZ   ERRTNE1            INVALID                        A20574
         MVC   SAVEC(1),CONCH     SAVE GOOD C/C                  A20574
         B     OUTPT              GO TO PUT OUT RECORD           A20574
ERRTNE1  MVI   SAVEC,X'09'        MAKE SPACE 1 THE C/C           A20574
         B     OUTPT              GO PUT OUT RECORD              A20574
PCHTEST  TM    CONCH,X'01'        TEST FOR NECESSARY C/C BIT     A20574
         BZ    ERRTNE2            ILLEGAL MACHINE C/C            A20574
         SRL   R4,1               DIVIDE C/C BY 2                A20574
         STC   R4,SAVEC           PREPARE FOR VALIDITY CHECK     A20574
         TM    VARBA,FTFTW        TEST FOR 1442 PUNCH            A20574
         BO    TST1442            GO TO VALIDITY CHECK           A20574
         TRT   SAVEC(1),TR2540    IS C/C VALID FOR 2540          A20574
         BNZ   SS2540             GO TO ERROR RTNE               A20574
MOVECC   MVC   SAVEC(1),CONCH     SAVE GOOD C/C                  A20574
         B     OUTPT              GO TO PUT OUT RECORD           A20574
ERRTNE2  TM    VARBA,FTFTW        TEST FOR 1442 PUNCH            A20574
         BZ    SS2540             NOT 1442                       A20574
SS1442   MVI   SAVEC,X'81'        SELECT STACKER 1 FOR 1442      A20574
         B     OUTPT              GO TO PUT OUT RECORD           A20574
SS2540   MVI   SAVEC,X'01'        SELECT STACKER 1 FOR 2540      A20574
         B     OUTPT              GO TO PUT OUT RECORD           A20574
TST1442  TRT   SAVEC(1),TR1442    IS C/C VALID FOR 1442          A20574
         BNZ   SS1442             INVALID-GO TO ERROR RTNE       A20574
         B     MOVECC             GO SAVE THE C/C                A20574
*IS THERE A TRANSLATION FROM ASA TO MACHINE
TTAMC    TM    DCBRECFM,ASASW           TEST FOR ASA CNTRL CHAR. OUTPUT
         BO    TFIMA                    BRANCH TO OUTPUT ASA IF SO
         TM    SORS1,MACHS              TEST FOR MACH CNTRL CHAR INPUT
         BO    PTRTEST            GO TEST C/C FOR PRINTER        A20574
*TRANSLATE ASA TO MACHINE FOR PRINTER
         LA    R4,X'09'                 PUT IN ASA SPACE1
         CLI   CONCH,C' '               TEST FOR IT IF SO
         BE    CCTPR                    BRANCH OUT AS DONE
         LA    R4,X'11'                 SPACE 2
         CLI   CONCH,C'0'
         BH    SKICH                    BRANCH TO SEE IF SKIP 1 TO 9
         BE    CCTPR
         LA    R4,X'19'                 SPACE 3
         CLI   CONCH,C'-'
         BE    CCTPR
         LA    R4,X'01'                 SPACE 0
         CLI   CONCH,C'+'
         BE    CCTPR
         LA    R4,X'D1'                 SKIP TO CHANNEL 10
         CLI   CONCH,C'A'
         BE    CCTPR
         LA    R4,X'D9'                 SKIP TO CHANNEL 11
         CLI   CONCH,C'B'
         BE    CCTPR
         LA    R4,X'E1'                 SKIP TO CHANNEL 12
         CLI   CONCH,C'C'
         BE    CCTPR
DEFLT    LA    R4,X'09'                 PUT IN ASA SPACE 1 AS DEFAULT
         B     CCTPR                    BRANCH OUT AS DONE
SKICH    CLI   CONCH,C'9'               TEST FOR CHARACTER IS DEFAULT
         BH    DEFLT                    BRANCH TO SPACE 1 CHAR. IF SO
         LA    R4,X'01'                 PUT IN BASIC SKIP CHARACTER
         IC    R3,CONCH                 GET ASA CHARACTER
         SLL   R3,3                     ALIGN THEM TO MAKE MACH. CHAR.
         OR    R4,R3                    MAKE MACHINE CHARACTER
*PUT CONTROL CHARACTER IN PREVIOUS RECORD
CCTPR    L     R3,LOCAT                 GET C.C. POSITION FROM PREVIOUS
         STC   R4,0(R3)                 PUT CONTROL CHARACTER THERE
         B     OUTPT                    BRANCH TO OUTPUT RECORD
*IS THERE A TRANSLATE FROM MACHINE TO ASA
TFIMA    TM    SORS1,MACHS              TEST FOR MACH CNTRL CHAR INPUT
         BZ    CCTTR                    BRANCH OUT BOTH C.C. ASA
*IS THE MACHINE CHARACTER LEGITIMATE
         LA    R4,C' '                  GET ASA SPACE 1
         STC   R4,SAVED                 USE IT AS GUIDE
         IC    R3,CONCH                 GET OFFSET FROM MACH CNTRL CHAR
         N     R3,ONETW                 SAVE -1111--- BITS ONLY
         SRL   R3,3                     PUT THESE IN OFFSETTING FORM
         TM    CONCH,X'02'                 TEST FOR ______1_ IF NOT
         BZ    REGTS                       BRANCH TO NORMAL TEST
         NI    CONCH,X'FD'                 TURN OFF IMMEDIATE BIT
         L     R12,INLOC                   FIND LOCATION OF RECORD
         L     R15,WOXXX                IF SPANNING USED           VS0H
         LTR   R15,R15                                             VS0H
         BNZ   REGTS                    THEN DONT SUPRESS PRINT    VS0H
         MVI   0(R12),X'40'                PUT IN ONE BLANK
         MVC   INLSF(4),ONELY              MAKE LENGTH OF RECORD 1
REGTS    TM    CONCH,X'06'                 TEST FOR _____00_ IF NOT
         BNE   BCCCO                    BRANCH TO CORRECTIVE
         TM    CONCH,X'01'              TEST FOR -----001 IF NOT
         BZ    BCCCO                    BRANCH TO CORRECTIVE
         TM    CONCH,X'E0'              TEST FOR 000--001 IF SO
         BZ    TMAPR                    BRANCH TO TRANSLATE
         CLI   CONCH,X'89'              TEST FOR 10001001 OR HIGHER
         BL    BCCCO                    BRANCH TO CORRECTIVE IF NOT
         CLI   CONCH,X'E1'              TEST FOR 1110001 OR LOWER
         BH    BCCCO                    BRANCH TO CORRECTIVE IF NOT
         LA    R3,3(R3)                 FIX OFFSETTING ADDRESS
*TRANSLATE MACHINE TO ASA FOR PRINT
TMAPR    IC    R4,TRMAT(R3)             GET THE ASA CHARACTER
*SAVE CONTROL CHARACTER FOR FOLLOWING RECORD
         STC   R4,SAVED
*
*                        SECOND PART OF IEFSD089
*                   THE INPUT RECORD IS IN STANDARD FORM WITH
*                   CONTROL CHARACTER TAKEN CARE OF, LENGTH
*                   SAVED AND START OF THE RECORD PROPER SAVED.
*                   THIS WILL BE PUT IN THE FORM NECESSARY FOR
*                   OUTPUT; VARIABLE OR FIXED, WITH CONTROL
*                   CHARACTER OR NOT AS REQUIRED BY THE FORMAT
*                   OF THE OUTPUT DATASET.
*
*IS THERE A SPANNING MODULE                                        VS0H
OUTPT    L     R15,WOXXX                GET ADDRESS OF SPANNING MODVS0H
         LTR   R15,R15                  IF IT IS 0 THEN            VS0H
         BZ    OUTPX                    AVOID SPANNING             VS0H
         BALR  R14,R15                  GO TO SPANNING MODULE      VS0H
         B     *+4(R15)                 USE RETURN CODE FOR BRANCH VS0H
         B     PUTLG                    BRANCH TO PUT FOR SPANNING VS0H
         B     TBCTS                    BRANCH TO GET FOR SPANNING VS0H
*IS THIS FIXED OUTPUT
OUTPX    TM    DCBRECFM,UNKSW           IF UNKNOWN OUTPUT THEN     VS0H
         BO    GSNFR                    BRANCH TO NON FIXED ROUTINE
         TM    DCBRECFM,FIXSW           TEST FOR FIXED OUTPUT IF SO
         BO    GSOFX                    BRANCH TO MAKE FIXED OUTPUT
*GET SIZE OF OUTPUT RECORD AND ITS SIZE WITHOUT CONTROL INFORMATION
GSNFR    L     R2,INLSF                 GET INPUT SIZE FOR START
         LR    R3,R2
         SR    R1,R1                    GET 0 TO MODIFY WITH       VS0H
         TM    DCBRECFM,ASASW+MACSW     TEST FOR OUTPUT HAS NO C.C.
         BZ    TFVAR                    BRANCH AROUND CHANGING LENGTH
         LA    R2,1(R2)                 MAKE FULL LENTH 1 MORE
TFVAR    TM    DCBRECFM,UNKSW           TEST FOR UNKNOWN OUTPUT IF SO
         BNM   TFSMR                    BRANCH AROUND FIX LENGTH   VS0H
         S     R1,FOURY                 GET -4 TO MODIFY WITH      VS0H
         LA    R2,4(R2)                 MAKE FULL LENGTH 4 MORE
TFSMR    C     R2,ATEEN                 TEST FOR RECORDS UNDER 18 LONG
         BNL   TFOBS                    BRANCH AROUND CHANGING LENGTH
         SR    R3,R2
         LA    R2,18                    MAKE FULL LENGTH 18 AND
         AR    R3,R2                    ADJUST LENGTH PROPER
TFOBS    TM    DCBBLKSI,X'F0'           IS BLOCKSIZE IN DCB      A35926
         BO    TFBUF                    IF NOT USE BUFFER SIZE   A35926
         AH    R1,DCBBLKSI              GET BLOCKSIZE TO COMPARE A35926
         B     TFOBT                    BYPASS BUFFER SIZE       A35926
TFBUF    AH    R1,DCBBUFL               GET BUFFER LENGTH        A35926
TFOBT    CR    R2,R1                    TEST REC. TOO BIG FOR BUFF VS0H
         BNH   SVRLP                    BRANCH AROUND CHANGING LENGTH
         SR    R3,R2
         LR    R2,R1                    MAKE FULL LENGTH BUFF. SIZEVS0H
         AR    R3,R2                    ADJUST LENGTH PROPER
SVRLP    STH   R2,DCBLRECL              SAVE RECORD LENGTH FOR PUT
*PUT LOGICAL WITH RECORD SIZE
PUTLG    LR    R1,R5                    GET OUTPUT DCB ADDRESS
         PUT   (1)
         B     REGPT                    GO TO SMF ROUTINE        A38032
*IS THERE SPANNING TO BE DONE                                      VS0H
CHKSPAN  EQU   *                                                 A38032
         L     R15,WOXXX                GET ADDRESS OF SPANNING    VS0H
         LTR   R15,R15                  IF IT IS ZERO, THEN        VS0H
         BZ    CONTIN                   AVOID SPANNING           A38032
*BRANCH TO SPANNING ROUTINE                                        VS0H
         O     R15,BFOUR                IND. BRANCH TO AFTER PUT   VS0H
         BALR  R14,R15                                             VS0H
         B     *+4(R15)                 USE RETURN CODE FOR BRANCH VS0H
         B     PUTLG                    BRANCH TO PUT FOR SPANNING VS0H
         B     TBCTS                    BRANCH TO TRANSITION ROUT. VS0H
*NORMAL ROUTINE USED WHEN NO SPANNING                              VS0H
REGPT    EQU   *                                                   VS0H
         LR    R4,R1                    SAVE OUTPUT LOCATION
         LR    R11,R0                   SAVE REM BUF LEN         A38032
* IS THIS PCP                                                     M0023
         L     R1,16               GET CVT ADDRESS                M0023
         TM    116(R1),X'40'       IF PCP THEN                    M0023
         BO    BYPSMF                   BYPASS SMF               A38032
         L     R1,WOSPS            GET ADDRESS OF PARLIST          SM0I
         LTR   R1,R1               TEST FOR DIRECT WRITER          O099
         BNP   BYPSMF                   YES, BYPASS SMF          A38032
         USING  PARLIST,R1                                         SM0I
         CLI   PARSMF+3,X'FF'      CHECK FOR SMF PROCESSING        SM0I
         BE    BYPSMF                   BYPASS SMF               A38032
         L     R14,PARSMF          GET ADDRESS OF SMFREC           SM0I
         LTR   R14,R14                                             SM0I
         BZ    BYPSMF                   BYPASS SMF               A38032
         DROP  R1                                                  SM0I
         USING  SMFREC,R14                                         SM0I
         L     R15,SMFDYCNT        GET SYSOUT COUNTER              SM0I
         A     R15,ONELY           ADD ONE TO SYSOUT COUNTER       SM0I
         ST    R15,SMFDYCNT        STORE NEW COUNT IN SMFREC       SM0I
         DROP  R14                                                 SM0I
BYPSMF   LR    R0,R11                   RESTORE BUF LEN          A38032
         LR    R1,R4                    RESTORE OUTPUT LOCTN     A38032
         B     CHKSPAN                  CHECK FOR SPANNED RCDS   A38032
*IS THIS VARIABLE OUTPUT
CONTIN   TM    DCBRECFM,FIXSW      TEST FOR FIXED OUTPUT-IF SO     SM0I
         BO    TFOCC                    BRANCH AROUND MAKE LENGTH FIELD
         TM    DCBRECFM,VARSW           TEST FOR VARIABLE OUTPUT   8162
         BZ    TFOCC                    DO NOT CHANGE LENGTH       8162
*PUT LENGTH INTO OUTPUT RECORD
         ST    R2,OTLWR                 SAVE LENGTH FOR 4 BYTE HEADER
         MVC   0(2,R4),OTLWR+2          PUT IN LENGTH
         MVC   2(2,R4),BLANS            PUT IN BLANKS
         LA    R4,4(R4)                 FIX LOCATION WHERE RECORD MOVED
*IS THERE AN OUTPUT CONTROL CHARACTER
TFOCC    TM    DCBRECFM,ASASW+MACSW     TEST FOR CONTROL CHARACTER
         BZ    MRBTR                    BRANCH AROUND C.C. FIX IF NOT
*FIX CONTROL CHARACTER
         ST    R4,LOCAT                 SAVE LOCATION OF CONTROL CHAR.
         MVC   0(1,R4),SAVEC            PUT CONTROL CHAR. IN RECORD285
         MVC   SAVEC(1),SAVED           GET NEXT CONTROL CHAR.
         LA    R4,1(R4)            FIX LOCATION WHERE RECORD MOVED 285
*MUST RECORD BE TRUNCATED
MRBTR    LM    R11,R12,INLSF            GET INPUT INFORMATION
         LR    R1,R11                   INPUT LENGTH MADE AMOUNT MOVED
         CR    R3,R11                   TEST FOR INPUT RECORD TOO LONG
         BNL   MVIRC                    BRANCH AROUND USE OUTPUT LENGTH
*TRUNCATE RECORD
         LR    R1,R3                    OUTPUT LENGTH MADE AMOUNT MOVED
*MOVE IN RECORD
MVIRC    BCT   R1,*+4              REDUCE LENGTH BY 1 FOR MOVE     4997
         LTR   R1,R1               TEST FOR NEG LNGTH RECORD       4997
         BM    MVRRI+4             PROVIDE A BLANK RECORD          4997
TFOTF    C     R1,TWFIS                 TEST FOR OVER 256 TO BE MOVED
         BL    MVRRI                    BRANCH TO MOVE REST OF BYTES
         MVC   0(256,R4),0(R12)         MOVE IN 256 BYTES
         S     R1,TWFIS                 SUBTRACT FROM AMOUNT TO MOVE
         A     R4,TWFIS                 ADD TO LOCATION MOVED TO
         A     R12,TWFIS                ADD TO LOCATION MOVED FROM
         B     TFOTF                    BRANCH TO MOVE MORE
MVRRI    EX    R1,MVCHR                 MOVE LAST INFORMATION
*MUST RECORD BE PADDED
         CR    R3,R11                   TEST FOR INPUT RECORD TOO SHORT
         BNH   TBCTS                    BRANCH IF NO PADDING
*PUT IN PADDING
         LA    R4,1(R1,R4)              FIND LOCATION TO BLANK
         LR    R1,R3                    FIND NUMBER OF BLANKS TO MOVE
         SR    R1,R11
         BCT   R1,*+4                   REDUCE LENGTH BY 1
         MVI   0(R4),X'40'              PUT IN 1 BLANK
         S     R1,ONELY                 REDUCE LENGTH BY 1
         BM    TBCTS                    BRANCH TO DONE IF MINUS
TFVTF    C     R1,TWFIS                 TEST FOR OVER 256 BLANKS
         BL    PIRBL                    BRANCH TO PUT IN REST OF BLANKS
         MVC   1(256,R4),0(R4)          MOVE IN 256 BLANKS
         S     R1,TWFIS                 SUBTRACT FROM AMOUNT OF BLANKS
         A     R4,TWFIS                 ADD TO LOCATION BLANKED
         B     TFVTF                    BRANCH TO PUT IN MORE BLANKS
PIRBL    EX    R1,BLKAR                 PUT IN LAST BLANKS
*IS THE TRANSITION WRITE SWITCH ON
TBCTS    L     R14,BALRG                RESTORE RETURN ADDRESS
         SR    R2,R2                    GET BUFFER COUNT
         IC    R2,BCTSW
         LTR   R2,R2                    TEST FOR SWITCH ON IF NOT
         BCR   8,R14                    BRANCH OUT AS DONE
*HAVE ALL TRANSITION WRITES BEEN DONE
         L     R15,SD88EXIT             GET ADDRESS FOR EXIT
         S     R2,ONELY                 REDUCE COUNT BY 1
         STC   R2,BCTSW                 SAVE REDUCED COUNT
         BCR   2,R15                    BRANCH TO PUT AGAIN IF NOT 0
         BR    R14                      BRANCH OUT AS DONE
*GET SIZE OF OUTPUT RECORD FOR FIXED OUTPUT
GSOFX    LH    R2,DCBLRECL              GET FIXED RECORD SIZE FOR START
         LR    R3,R2
         TM    DCBRECFM,ASASW+MACSW     TEST FOR OUTPUT HAS NO C.C.
         BZ    PUTLG                    BRANCH AROUND CHANGING LENGTH
         BCT   R3,PUTLG                 MAKE LENGTH PROPER 1 LESS
         B     PUTLG                    BRANCH TO PUT
*TURN ON UNRECOVERABLE ERROR SWITCH
SD89EREX L     R1,WOSAP                 GET ADDRESS ERROR RETURN PUT AT
         MVI   19(R1),8                 INDICATE IO OUTPUT ERROR
         L     R14,BALRG                RESTORE RETURN ADDRESS
         BR    R14                      BRANCH BACK
*CONSTANTS
PRINTRT  DC    4XL4'00000101'     TRANSLATE TABLE FOR PRINTER    A20574
         DC    10XL4'01010101'                                   A20574
         DC    2XL4'01000101'                                    A20574
         DC    XL4'01010101'                                     A20574
         DC    12XL4'00000101'                                    M2323
         DC    3XL4'01000101'                                    A20574
         DS    0F
TR1442   DC    4XL32'00000101010101010101010101010101000101010101010101X
               01010101010101'
TR2540   DC    6XL16'00010101000101010101010101010101'
         DC    2XL16'01010101010101010101010101010101'
         DS    0F
ONELY    DC    X'00000001'              ONE
ATEEN    DC    X'00000012'              EIGHTEEN
TWFIS    DC    X'00000100'              HIGHEST AMOUNT TO MOVE
ONETW    DC    X'00000078'              CONSTANT FOR TRANSLATING
BFOUR    DC    X'04000000'              INDICATE GO TO AFTER PUT   VS0H
FOURY    DC    X'00000004'              FOUR                       VS0H
ADOUE    DC    A(SD89EREX)              OUTPUT ERROR ROUTINE ADDRESS
SD88EXIT DC    V(IEFSD088)              TRANSITIONAL ROUTINE
IEFSDM89 DC    V(IEFSD89M)              MESSAGE CONSTANTS
TRMAT    DC    C'+ 0-'                  TABLE USED WHEN TRANSLATING
         DC    C'1234'                  MACHINE
         DC    C'5678'                  TO
         DC    C'9ABC'                  ASA
BLANS    DC    C'00'                    TWO ZEROS                  VS0H
MVCHR    MVC   0(1,R4),0(R12)           INSTRUCTION USED TO MOVE RECORD
BLKAR    MVC   1(1,R4),0(R4)            INSTRUCTION USED TO BLANK OUT
***********************************************************************
*                                                                     *
*TITLE         IEFSD89M   MESSAGES FOR IEFSD089                       *
*                                                                     *
***********************************************************************
IEFSD89M CSECT
         DS    0F
FIRLN    DC    C'IEF316I CCBAD'
ENDLN    EQU   *
         END
