         TITLE 'IEFSDXXX - SYSOUT WRITER SPANNED DATASETS'
*
*          RELEASE 22 DELETIONS/CHANGES
*          RELEASE 21 DELETIONS/CHANGES
*3200117000,133000-135000                                        A46610
*          RELEASE 20 DELETIONS/CHANGES
* 433000-512000                                                  MAPMAC
*2438                                                            A35780
*
***********************************************************************
*                                                                     *
*TITLE-- IEFSDXXX - SYSOUT WRITER SPANNED DATASETS                    *
*                                                                     *
*STATUS CHANGE LEVEL 001
*                                                                     *
*FUNCTION/OPERATION-- THIS MODULE IS USED TO HANDLE VARIABLE SPANNED  *
*   DATASETS. IF EITHER INPUT OR OUTPUT DATASETS ARE VARIABLE SPANNED *
*   THIS MODULE WILL BE ENTERED. IN MOST CASES THERE IS NO BUILDING   *
*   OF THE COMPLETE LOGICAL RECORD FROM THE INPUT SEGMENTS BEFORE     *
*   THE RECORD IS BROKEN UP INTO SEGMENTS TO OUTPUT. RATHER, THE      *
*   INPUT SEGMENTS ARE MOVED INTO THE OUTPUT SEGMENTS DYNAMICALLY     *
*   AND GET AND PUT OF SEGMENTS IS DONE AS NEEDED. THE EXCEPTION TO   *
*   THIS IS WHEN THE WRITER OUTPUTS MACHINE CONTROL CHARACTERS AND    *
*   THE INPUT DOES NOT HAVE MACHINE CONTROL CHARACTERS. IN THIS CASE  *
*   THE WHOLE RECORD MUST BE BUILT BEFORE IT IS PUT OUT BECAUSE THE   *
*   CONTROL CHARACTER FROM THE FOLLOWING RECORD IS NEEDED TO GENERATE *
*   THE CONTROL CHARACTER FOR THIS RECORD.                            *
*   WHEN THE OUTPUT IS IN VARIABLE SPAN FORMAT AS MANY LINES OF       *
*   OUTPUT WILL BE GENERATED AS IS NEEDED TO PROCESS THE WHOLE        *
*   RECORD. IN THIS WAY A COMPLETE RECORD CAN BE PRINTED OR PUNCHED   *
*   NO MATTER HOW LONG IT MAY BE.                                     *
*                                                                     *
*ENTRY POINT-- IEFSDXXX - FROM THE IEFSD086, IEFSD087, IEFSD094 AND   *
*   IEFSD089 MODULES. THE ENTRY FROM EACH OF THESE EXCEPT IEFSD089    *
*   IS TO SET UP THE CONTROL AREAS THAT CONTAIN INFORMATION NEEDED    *
*   TO GET AND PUT VARIABLE SPANNED RECORDS AND TO GET THE AREA       *
*   NEEDED TO BUILD THE WHOLE RECORD IF THAT IS NEEDED (SEE           *
*   FUNCTION/OPERATION ABOVE). THERE ARE TWO ENTRIES FROM IEFSD089.   *
*   ONE ENTRY WHICH GOES TO IEFSDXXX TO HANDLE THE SEGMENT JUST       *
*   OBTAINED BY A GET AND THE OTHER WHICH GOES TO IEFSDXXX TO FIX     *
*   UP THE AREA JUST OBTAINED BY PUT.                                 *
*                                                                     *
*INPUT-- THE TOP BYTE OF REGISTER 15 CONTAINS:                        *
*   0 WHICH INDICATES A SEGMENT OBTAINED BY GET IS TO BE PROCESSED    *
*   4 WHICH INDICATES AN AREA JUST OBTAINED BY PUT IS TO BE FIXED     *
*   8 WHICH INDICATES THE SPANNED CONTROL AREA IS TO BE SET UP FOR    *
*      MESSAGES OR JOB SEPARATOR.                                     *
*  12 WHICH INDICATES THE SPANNED CONTROL AREA IS TO BE SET UP FOR    *
*      A DATASET.                                                     *
*   REGISTER 7  CONTAINS THE WORK LIST USED BY DSB AND SMB ROUTINE    *
*   REGISTER 8  CONTAINS THE WORK AREA FOR STANDARD OUTPUT ROUTINE    *
*   REGISTER 6  CONTAINS THE INPUT DCB OR MESSAGE.                    *
*                                                                     *
*OUTPUT-- WHEN ENTRY IS FROM IEFSD086, IEFSD087, OR IEFSD094 THE      *
*   SAME MODULE IS RETURNED TO WITH THE SPANNING CONTROL AREA SET UP. *
*   WHEN ENTRY IS FROM IEFSD089 RETURN IS TO THIS MODULE WITH A       *
*   CODE IN REGISTER 15:                                              *
*   0 GO TO PUT                                                       *
*   4 GO TO GET                                                       *
*                                                                     *
*EXTERNAL ROUTINES-- NONE                                             *
*                                                                     *
*EXIT-- RETURNS TO THE INSTRUCTION FOLLOWING THE ONE WHICH BRANCHED   *
*   TO THIS ROUTINE.                                                  *
*                                                                     *
*TABLES/WORK AREAS-- THE CONTROL AREA FOR SPANNING, ANY AREA GOT TO   *
*   BUILD THE COMPLETE RECORD IN IF SUCH AREA IS OVER 168 BYTES, THE  *
*   CONDITIONAL GETMAIN LIST, THE DCB, THE WORKLIST USED BY DSB AND   *
*   SMB ROUTINE, AND THE WORK AREA FOR STANDARD OUTPUT ROUTINE.       *
*                                                                     *
*ATTRIBUTES-- THIS ROUTINE IS REENTRANT AND REFRESHABLE.              *
*                                                                     *
*NOTES-- THE CONDITIONAL GETMAIN AND RETURN MACROS ARE USED.          *
*                                                                     *
***********************************************************************
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
IEFSDXXX CSECT
*THE FOLLOWING AND R5 ARE BUSY
         USING WORKLST,R7
         USING WKSOR,R8
         USING IHADCB,R6                INPUT DCB OR MESSAGE LOC.
*INITIALIZATION
         SAVE  (14,12)                  SAVE REGISTERS
         BALR  R9,0                     ESTABLISH BASE
         USING *,R9
         L     R1,WOXXA                 GET ADDR. OF CONTROL AREA
         ST    R13,4(R1)                PRESERVE OLD SAVE AREA
         LR    R13,R1                   GET NEW SAVE AREA
         USING WORKFXXX,R13             GET WORK AREA BASE
*BRANCH TO THE ROUTINE DESIRED
         SRL   R15,24                   GET WHERE TO BRANCH TO
         B     *+4(R15)                 BRANCH TO TABLE
         B     MAINR                    BRANCH TO INPUT RECORD
         B     AFPUT                    BRANCH TO PUT DONE
         B     SUDTA                    BRANCH TO DATASET SET UP
*SET UP CONSTANTS FOR INPUT NOT DATA SET
         XC    SWXXX(WORKEEND-SWXXX),SWXXX  CLEAR WORK AREA
         LA    R12,168                  GET MAXIMUM INPUT SIZE
         ST    R12,MAXI1                SAVE IT
         B     SUOUC                    BRANCH TO DO OUTPUT CONST.
*SET UP CONSTANTS FOR DATASET INPUT
SUDTA    XC    SWXXX(WORKEEND-SWXXX),SWXXX  CLEAR WORK AREA
         OI    SWXXX,DTASW              TURN ON DATASET SWITCH
         SR    R4,R4                    CLEAR REG 4
         TM    DCBRECFM,ASASW+MACSW     IF NOT CONTROL CHAR. THEN
         BZ    INLTE                    GO TO GET MAX. IN  LENGTH
         LA    R4,1                     PUT 1 TO SUBTRACT FOR C.C.
INLTE    LH    R12,DCBBLKSI             GET BLOCK SIZE
         TM    DCBRECFM,UNKSW           IF UNKNOWN TYPE THEN
         BO    SAIMA                    GO SAVE MAX LENGTH       A46610
         LH    R12,DCBLRECL             GET MAX. RECORD SIZE
         LTR   R12,R12                  IF NOT OVER 32K THEN
         BP    INLTD                    BRANCH AS HAVE LENGTH
         L     R12,MXSIZ                GET MAXIMUM SIZE
INLTD    TM    DCBRECFM,FIXSW           IF FIXED TYPE THEN
         BO    SAIMA                    GO SAVE MAX. IN LENGTH
         LA    R4,4(R4)                 ADD 4 TO SUBTRACT FOR V TYPE
SAIMA    SR    R12,R4                   GET REAL MAX. IN
         ST    R12,MAXI1                SAVE IT
*SET UP CONSTANTS FOR OUTPUT
         DROP  R6
         USING IHADCB,R5                ESTABLISH OUTPUT DCB BASE
SUOUC    SR    R4,R4                    CLEAR REG 4
         MVI   SEGIN,0                  INDICATE 0
         L     R5,DCBOT                 GET OUTPUT DCB
INLTF    LA    R3,LENLO+4               GET LOCATION OF LENGTH
         TM    DCBRECFM,UNKSW           IF NOT UNKNOWN TYPE THEN
         BM    INLTG                    GO TO TEST FOR FIXED
         LH    R1,DCBBLKSI              GET BLOCK SIZE
         LTR   R1,R1                    IF A BLOCK SIZE THEN
         BNZ   INTLI                    GO TO USE IT
         LH    R1,DCBBUFL               GET BUFFER LENGTH
INTLI    LR    R11,R1                   HAVE MIN. LENGTH
         SR    R11,R4                   GET ACTUAL LENGTH
         CR    R11,R12                  IF OUTPUT SHORTER THEN
         BNH   USEOT                    GO SAVE MIN. OUTPUT LENGTH
         LR    R11,R12                  GET SMALLER LENGTH
USEOT    STH   R11,DCBLRECL             USE IT AS RECORD SIZE
         LR    R12,R1                   GET MAXIMUM LENGTH
         B     SAOMK                    GO SAVE MIN. OUTPUT LENGTH
INLTG    LH    R12,DCBLRECL             GET MAX. RECORD SIZE
         LTR   R12,R12                  IF NOT OVER 32K THEN
         BP    INLTH                    BRANCH AS HAVE LENGTH
         L     R12,MXSIZ                GET MAXIMUM SIZE
INLTH    LR    R11,R12                  GET MIN. OUT FOR F TYPE
         TM    DCBRECFM,FIXSW           IF FIXED TYPE THEN
         BO    SAOMI                    GO SAVE MIN. OUTPUT LENGTH
         LA    R4,4(R4)                 ADD 4 TO SUBTRACT FOR V TYPE
         LA    R11,18                   GET MIN. OUT FOR V NOT SPANNED
         TM    DCBRECFM,VARSP           IF SPANNED TYPE THEN
         BO    SAOMA                    GO TO FIX FOR SPANNED
SAOMI    SR    R11,R4                   GET ACTUAL MIN. OUT LENGTH
SAOMK    ST    R11,MINO1                SAVE IT
SAOMA    SR    R12,R4                   GET REAL MAX. OUT
         ST    R12,MAXO1                SAV IT
         ST    R3,LENLO                 SAVE IT AS WHERE LENGTH SAVED
*GET SPECIAL WORK AREA IF ASA INPUT AND VARIABLE SPANNED MACH. OUT
         TM    DCBRECFM,VARSP+MACSW     IF NOT VS MACH. OUTPUT THEN
         BNO   XXXRT                    GO TO RETURN
         TM    DCBRECFM,UNKSW           IF UNKNOWN OUTPUT THEN
         BO    XXXRT                    GO TO RETURN
         TM    SORS1,MACHS              IF MACHINE INPUT THEN
         BO    XXXRT                    GO TO RETURN
         TM    SWXXX,DTASW              IF NOT DATASET INPUT THEN
         BZ    VALES                    GO TO USE AREA WE HAVE
         C     R12,MAXI1                COMPARE OUT AND IN MAXIMUM
         BNH   CMPTH                    IF HAVE SMALLER THEN BRANCH
         L     R12,MAXI1                GET SMALLER
CMPTH    C     R12,THTOK                COMPARE TO 32K IF SMALLER
         BL    GCORM                    THEN GO TO GET WORK AREA
         OI    SORS1,OVERT              TURN ON CANT HANDLE IT SW
         B     VALES                    GO TO SET UP FAKE AREA
GCORM    C     R12,ONSXA                COMPARE TO 168 IF NOT HIGH
         BNH   VALES                    USE THE AREA AVAILABLE
         MVC   WOKRL(GETME-GETMC),GETMC PUT IN GETMAIN LIST
         ST    R12,WOKRL                PUT LENGTH IN LIST
         LA    R12,WOKRA                GET WHERE TO SAVE SIZE
         ST    R12,WOKRA                SAVE IT IN ITSELF
         LA    R1,WOKRL                 GET ADDRESS OF LIST
         GETMAIN EC,MF=(E,(1))          GET MAIN CONDITIONALLY
         LTR   R15,R15                  IS THE CORE GOT
         BZ    XXXRT                    THEN GO TO RETURN
         OI    SORS1,CNTGE              TURN ON CANT GET CORE SW.
*USE AREA ALREADY SET UP AS WORK AREA
VALES    LA    R11,168                  GET 168
         ST    R11,WOKRL                MAKE IT LENGTH
         LA    R11,BSKWA                GET ADDRESS OF AREA
         ST    R11,WOKRA                SAVE IT AS WORK AREA ADD.
XXXRT    L     R13,4(R13)               GET SAVE AREA
         RETURN (14,12)                 RETURN
********
*
* THE FOLLOWING IS THE BASIC ROUTINE WHICH HANDLES THE SPANNING
* FOR PUT. THIS IS BRANCHED TO FROM IEFSD089 AND RETURNS TO THERE.
*
********
*SAVE SEGMENT AND CHECK IT
MAINR    MVC   INSEG(1),SEGIN           SAVE NEW SEGMENT
         MVI   SEGIN,0                  CLEAR SEGMENT IND.
*IS THIS A FIRST SEGMENT
         TM    INSEG,NOTFI              IF NOT FIRST SEGMENT THEN
         BO    CNTRT                    BRANCH TO DO SUBSEQUENT SEG.
*IS THERE A RECORD TO BE PUT FROM WORK AREA
         TM    SWXXX,WATPT              IF 'TO BE PUT' SWITCH ON THEN
         BO    MVFWA                    BRANCH TO SET UP TO PUT
*INITIALIZE FOR RECORD JUST GOT
RECJG    MVC   MAXI2(12),MAXI1          INITIALIZE MAX. + MIN. COUNTS
*RETURN TO PUT
RETPU    L     R15,LENLO                GET SEGMENTS LOCATION
         MVC   WOLCL+2(1),2(R15)        SAVE SEGMENT INDICATION
         SR    R15,R15                  MAKE R15 ZERO AS RETURN CODE
RETAC    L     R13,4(R13)               GET WHERE R13 POINTED
         RETURN (14,12),RC=(15)
*AFTER PUT WHEN THERE IS SPANNING BRANCH BACK TO HERE
         USING IHADCB,R5                MAKE OUTPUT BASE FOR DATASET
*GET LENGTH AND LOCATION OF PUT
AFPUT    L     R1,ATENW+4               GET REG. SAVE AREA
         LM    R0,R1,20(R1)             GET LENGTH AND LOC.
*IS THE OUTPUT VARIABLE SPANNED
         TM    DCBRECFM,VARSP           IF OUTPUT IS SPANNED THEN
         BO    LLOUT                    BRANCH AS R0 HAS LENGTH
*GET LENGTH AVAILABLE WHEN NOT SPANNED
         L     R0,MAXO1
*SAVE LENGTH AND LOCATION TO MOVE OUTPUT RECORD INTO
LLOUT    ST    R0,SOUTL
         ST    R1,SOUTL+4
*IS THE OUTPUT VARIABLE
         TM    DCBRECFM,VARSW           IF OUTPUT ISNT VARIABLE
         BZ    FLNVA                    BRANCH TO AVOID V FIX
         TM    DCBRECFM,FIXSW           IF OUTPUT ISNT VARIABLE
         BO    FLNVA                    BRANCH TO AVOID V FIX
*FIX HEADER FOR VARIABLE TYPE OUTPUT
         ST    R1,LENLO                 SAVE HEADER ADDR AS LENGTH LOC.
         XC    0(4,R1),0(R1)            ZERO OUT HEADER
         TM    INSEG,NOTFI              IF FIRST SEGMENT THEN
         BZ    GSGLT                    BRANCH TO NOT CHANGE SEGMENT
         MVI   2(R1),NOTFI              INDICATE CONTINUING SEG.
GSGLT    LA    R2,4                     GET SEGMENT LENGTH
         BAL   R14,MODOD                BRANCH TO FIX OUTPUT COUNT
         B     FIRSG                    BRANCH TO TEST FOR FIRST SEG.
*FIX LENGTH FOR NON-VARIABLE OUTPUT
FLNVA    L     R12,LENLO                GET LENGTH LOCATION
         XC    0(2,R12),0(R12)          MAKE LENGTH 0
*IS THIS A FIRST SEGMENT
FIRSG    TM    INSEG,NOTFI              IF NOT FIRST SEG. THEN
         BO    CNTRT                    BRANCH TO AVOID INITIALIZING
*INITIALIZE OUTPUT FOR FIRST SEGMENT
         OI    INSEG,NOTFI              FIX INPUT SEG. TO NOT FIRST
         TM    DCBRECFM,ASASW+MACSW     IF NO CONTROL CHAR. THEN
         BNM   CNTRT                    BRANCH TO NOT PUT IT IN
         L     R12,SOUTL+4              GET C.C. LOCATION
         ST    R12,LOCAT                AND SAVE IT
         MVC   0(1,R12),SAVEC           PUT C.C. IN IT
         MVC   SAVEC,SAVED              SAVE NEXT C.C. IF ONE EXISTS
         LA    R2,1                     GET LENGTH OF C.C.
         BAL   R14,MODOD                BRANCH TO FIX OUTPUT COUNT
*CONTROL ROUTINE TO DECIDE WHAT TO DO NEXT
CNTRT    LM    R3,R4,MAXI2              GET MAX. IN AND OUT LEFT
         L     R11,INLSF                GET INPUT LENGTH LEFT
         L     R12,SOUTL                GET OUTPUT LENGTH LEFT
         LTR   R2,R4                    GET MAX. OUT LENGTH. IF 0 THEN
         BZ    RECAP                    BRANCH TO NO MORE OUTPUT
         CR    R2,R3                    IF MAX. IN LENGTH NOT LESS THEN
         BNH   CMP11                    KEEP THE LOW NUMBER
         LTR   R2,R3                    GET MAX. IN LENGTH. IF 0 THEN
         BZ    FIMIN                    BRANCH TO NO MORE INPUT
CMP11    CR    R2,R11                   IF IN LENGTH NOT LESS THEN
         BNH   CMP12                    KEEP THE LOW NUMBER
         LTR   R2,R11                   GET IN LENGTH. IF 0 THEN
         BZ    LSTES                    BRANCH TO INPUT USED UP
CMP12    CR    R2,R12                   IF OUT LENGTH NOT LESS THEN
         BNH   NTDON                    KEEP THE LOW NUMBER. GO TO MOVE
         LTR   R2,R12                   GET OUT LENGTH. IF 0 THEN
         BZ    FIXLT                    BRANCH TO OUTPUT USED UP
NTDON    BAL   R14,MOVCH                BRANCH TO MOVE
*FIX OUTPUT LENGTH. REG 2 HAS MODIFYING NUMBER
         LM    R3,R4,MAXO2              GET MAX. AND MIN. OUTPUT
         SR    R3,R2                    SUBTRACT FROM MAX. OUTPUT
         SR    R4,R2                    SUBTRACT FROM MIN. OUTPUT
         STM   R3,R4,MAXO2              RESTORE
         BAL   R14,MODOD                BRANCH TO FIX OTHER OUT COUNT
*FIX INPUT LENGTH. REG 2 HAS MODIFYING NUMBER
         LM    R3,R4,INLSF              GET IN LENGTH AND LOCATION
         SR    R3,R2                    SUBTRACT FROM LENGTH
         AR    R4,R2                    ADD TO LOCATION
         STM   R3,R4,INLSF              RESTORE
         L     R4,MAXI2                 GET MAX. INPUT
         SR    R4,R2                    SUBTRACT FROM MAX. INPUT
         ST    R4,MAXI2                 RESTORE
         B     CNTRT                    BRANCH TO DECIDE WHAT NEXT
*IS THIS THE LAST OUTPUT SEGMENT
LSTES    TM    INSEG,NOTLA              IF NOT LAST THEN
         BO    RTGET                    GO TO GET NEXT
*IS THERE MORE TO BE MOVED TO GET MINIMUM OUTPUT
FIMIN    L     R12,MINO2                GET MIN. OUTPUT
         C     R12,MAXO2                IF CAN MOVE IT ALL THEN
         BL    MOVNO                    BRANCH TO MOVE IT
         L     R12,MAXO2                GET MAXIMUM OUTPUT
MOVNO    LTR   R12,R12                  IF NOTHING MORE NEEDED THEN
         BNP   RECAP                    BRANCH TO RECORD ALL PUT
*MOVE ENOUGH TO MAKE MINIMUM. (NOTE SPANNING OUTPUT CANT COME HERE)
         L     R2,SOUTL+4               GET OUTPUT LOCATION
         MVI   0(R2),C' '               MOVE IN 1 BLANK
         ST    R2,INLSF+4               WILL MOVE FROM BLANK
         LA    R2,1(R2)                 WILL MOVE TOO NEXT
         ST    R2,SOUTL+4
         LR    R2,R12                   GET AMOUNT TO MOVE
         S     R2,ONELY                 SUBTRACT 1 ALREADY MOVED
         BZ    PCTFI                    BRANCH IF ALL MOVED
         BAL   R14,MOVCH                BRANCH TO FIX OUT DONE
PCTFI    A     R2,ONELY                 GET ACTUAL NUMBER MOVED
         BAL   R14,MODCO                BRANCH TO MODIFY COUNTS
         B     RTGET                    BRANCH AS ARE DONE
*IS THE WORK AREA RECORD BEING PUT
RECAP    TM    SWXXX,WABPT              IF WORK AREA BEING PUT THEN
         BO    RSTGT                    BRANCH TO START NEXT RECORD
*RETURN TO GET
RTGET    LA    R15,4                    MAKE R15 FOUR AS RETURN CODE
         B     RETAC                    BRANCH TO ACTUAL RETURN
*IS THE OUTPUT SPANNED
FIXLT    TM    DCBRECFM,VARSP           IF NOT SPANNED TYPE
         BNO   RTGET                    GO TO GET
*INDICATE OUTPUT RECORD SEGMENT IS NOT LAST. (ONLY USED IF SPAN OUTPUT)
         L     R12,LENLO                GET HEADER ADDRESS
         OI    2(R12),NOTLA
*IS WORK AREA RECORD BEING PUT
         TM    SWXXX,WABPT              IF WORK AREA BEING PUT THEN
         BO    RETPU                    BRANCH TO PUT
*IS WORK AREA TO BE USED TO BUILD RECORD
         L     R12,WOKRL                GET LENGTH OF WORK AREA
         LTR   R12,R12                  IF NONE THEN
         BZ    RETPU                    BRANCH TO PUT
********
*
* THE FOLLOWING TAKES CARE OF CASES WHERE A WORK AREA IS USED TO BUILD
* RECORD IN.
*
********
*SET UP WORK AREA TO CONTINUE BUILDING RECORD FROM INPUT
         MVC   MAXI3(12),MAXI2          SAVE CURRENT MAX. + MIN. COUNTS
         LA    R12,LENLO+4              GET LENGTH LOCATION
         ST    R12,LENLO                SAVE IT
         XC    LENLO+4(4),LENLO+4       MAKE LENGTH 0
         MVC   SOUTL(4),MAXO2           MAKE MAX. OUT LEFT THE OUT SIZE
         MVC   SOUTL+4(4),WOKRA         MAKE WORK AREA THE OUT LOC.
         MVC   WOKRA+6(2),WOLCL         SAVE LENGTH FOR PUT
         OI    SWXXX,WATPT              TURN ON WORK AREA TO BE PUT SW
         B     CNTRT                    BRANCH TO DECIDE WHAT TO DO
*HAVE MOVED INPUT RECORD INTO WORK AREA. PREPARE TO MOVE FROM WORK AREA
MVFWA    MVC   MAXI2(12),MAXI3          RESTORE OLD MAX. + MIN. COUNTS
         MVC   INLSW(8),INLSF           SAVE INPUT INFORMATION
         MVC   INSEW(1),INSEG           SAVE INPUT SEGMENT
         MVI   INSEG,NOTFI              MAKE INPUT SEGMENT NOT FIRST
         MVC   INLSF+2(2),LENLO+4       MAKE INPUT LENGTH THE MAX. OUT
         MVC   INLSF+4(4),WOKRA         MAKE WORK AREA THE IN LOC.
         MVC   WOLCL(2),WOKRA+6         RESTORE LENGTH FOR PUT
         NI    SWXXX,255-WATPT          TURN OFF WORK AREA TO BE PUT SW
         OI    SWXXX,WABPT              TURN ON WORK AREA BEING PUT SW
         B     RETPU                    BRANCH TO PUT
*RESTORE INFORMATION FROM LAST GET TO PREPARE TO MOVE IT
RSTGT    NI    SWXXX,255-WABPT          TURN OFF WORK AREA BEING PUT SW
         MVC   INLSF(8),INLSW           RESTORE INPUT INFORMATION
         MVC   INSEG(1),INSEW           RESTORE INPUT SEGMENT
         B     RECJG                    GO TO SET UP FOR MOVING INPUT
********
*
* SUBROUTINES
*
********
*SUBROUTINE TO MOVE  FROM THE INPUT TO THE OUTPUT. REG 2 HAS MOVE AMT.
MOVCH    L     R3,INLSF+4               GET LOCATION TO MOVE FROM
         L     R4,SOUTL+4               GET LOCATION TO MOVE TO
         LR    R11,R2                   SAVE AMOUNT TO MOVE
MOVLO    LR    R12,R11
         BCTR  R12,0                    SAVE MOVING CONSTANT
         N     R12,TWFIF                WILL MOVE ONLY UP TO 256
         BZ    MOVST                    IF ONLY 1 GO TO MOVE ONLY 1
         EX    R12,MOVST                EXECUTE MOVE OF CURRENT AMOUNT
MOVST    MVC   0(0,R4),0(R3)            MOVE 1
         A     R12,ONELY                GET AMOUNT MOVED CORRECTED
         AR    R3,R12                   ADD TO FROM  LOC.
         AR    R4,R12                   ADD TO TO LOC.
         SR    R11,R12                  SUBTRACT AMOUNT MOVED
         BNZ   MOVLO                    IF NOT DONE THEN MOVE MORE
         BR    R14                      RETURN
*SUBROUTINE TO FIX OUTPUT COUNT. REG. 2 HAS MODIFYING NUMBER
MODOD    LM    R3,R4,SOUTL              GET OUTPUT LENGTH AND LOC
         SR    R3,R2                    SUBTRACT FROM LENGTH
         AR    R4,R2                    ADD TO LOCATION
         STM   R3,R4,SOUTL              RESTORE THEM
MODCO    L     R4,LENLO                 GET LOCATION OF LENGTH
         MVC   WOLCL(2),0(R4)           MOVE TO BOUNDRY
         LH    R3,WOLCL                 GET LENGTH
         AR    R3,R2                    ADD TO LENGTH
         STH   R3,WOLCL                 RESTORE LENGTH
         MVC   0(2,R4),WOLCL            MOVE FROM BOUNDRY
         BR    R14                      RETURN
*CONSTANTS
         DS    0F
MXSIZ    DC    X'7FFFFFFF'              MAXIMUM NUMBER TO USE FOR SIZE
THTOK    DC    X'00008000'              32,768 TOO BIG FOR SET SIZE
TWFIF    DC    X'000000FF'              255
FOURY    DC    X'00000004'
TWOLY    DC    X'00000002'
ONELY    DC    X'00000001'
ONSXA    DC    F'168'
*GETMAIN LIST
GETMC    GETMAIN EC,LV=168,MF=L
GETME    EQU   *
         DC    C'ZAPSZAPSZAPSZAPS'
         DC    C'ZAPSZAPSZAPSZAPS'
         DC    C'ZAPSZAPSZAPSZAPS'
         DC    C'ZAPSZAPSZAPSZAPS'
         DC    C'ZAPSZAPSZAPSZAPS'
*EQUATES
ASASW    EQU   4                        ASA CONTROL CHARACTER
MACSW    EQU   2                        MACHINE CONTROL CHARACTER
VARSW    EQU   64                       VARIABLE SWITCH WHEN NOT F
FIXSW    EQU   128                      FIXED SWITCH WHEN NOT V
NOTLA    EQU   X'1'                     NOT LAST SEGMENT
NOTFI    EQU   X'2'                     NOT FIRST SEGMENT
VARSP    EQU   X'48'                    VARIABLE SPANNED SWITCH
UNKSW    EQU   VARSW+FIXSW              UNKNOWN SWITCH
*CONTROL AREA FOR SPANNING
*DEFINE DCB
         DCBD  DSORG=PS
         IEFSDWKT                                                MAPMAC
         IEFSDSDR                                                MAPMAC
         IEFSDWKX                                                MAPMAC
         END
