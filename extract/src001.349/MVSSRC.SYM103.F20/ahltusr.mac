         TITLE 'GTF USR BUILD ROUTINE                                  *
                        '
AHLTUSR  CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'AHLTUSR   76.282'                                 0001
         DROP  @15
@PROLOG  DS    0H                                                  0002
   USING AHLTUSR,REG15      TEMPORARY ADDRESSIBILITY
   L  BASEREG,BASE          ENTRY POINT ADDRESS TO BASE REG
   USING AHLTUSR,BASEREG    ADDRESSIBLITY SET UP TO MODULE
   DROP REG15
   USING @DATD-MCAWORK,AWSAPTR SET UP ADDRESSIBLITY TO COMPILER WORK
*   RTNADSV=RTNADDR;                /* SAVE RTN ADDR                 */
         LR    RTNADSV,RTNADDR                                     0076
*   MCATRAIL=DEBUGFLG;              /* SET ON MCAUSR                 */
         MVC   MCATRAIL(8,AWSAPTR),@CB01633                        0077
*   REG8=ADDR(AHLTUSRE);            /* SET UP FOR SETFRR             */
         LA    REG8,AHLTUSRE                                       0078
*   GEN(SETFRR A,FRRAD=(8),WRKREGS=(7,9));/* ERROR RECOVERY          */
         SETFRR A,FRRAD=(8),WRKREGS=(7,9)
*   RFY                                                            0080
*     REG8 UNRSTD;                                                 0080
*   PMLSTPTR=LCCAPGR2(2);           /* INITIALIZE THE ADDRESS OF PARM
*                                      LIST POINTED TO BY THE USER'S
*                                      REG 1                         */
*                                                                  0081
         L     @08,LCCAPTR                                         0081
         L     PMLSTPTR,LCCAPGR2+4(,@08)                           0081
*   /*****************************************************************/
*   /*                                                               */
*   /* FOLLOWING SECTION VALIDITY CHECKS THE FID, EID, AND LENGTH OF */
*   /* THE DATA                                                      */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0082
*   IF USRFID<0×USRFID>255          /* IS FID VALID                  */
*     THEN                                                         0082
         LH    @08,USRFID(,PMLSTPTR)                               0082
         LTR   @08,@08                                             0082
         BM    @RT00082                                            0082
         C     @08,@CF01706                                        0082
         BNH   @RF00082                                            0082
@RT00082 DS    0H                                                  0083
*     DO;                                                          0083
*       USRRC=RCFID;                /* RETURN CODE INVALID FID       */
         L     @08,LCCAPTR                                         0084
         MVC   USRRC(4,@08),@CF00043                               0084
*       GOTO AHLTUSR1;              /* RETURN WITHOUT TRACE ENTRY    */
         B     AHLTUSR1                                            0085
*     END;                                                         0086
*   IF USRLNG<1                     /* IS USER LENGTH VALID          */
*       ×USRLNG>256                 /* MINLEN < USRLNG < MAXLEN      */
*     THEN                                                         0087
@RF00082 LH    @08,USRLNG(,PMLSTPTR)                               0087
         LTR   @08,@08                                             0087
         BNP   @RT00087                                            0087
         C     @08,@CF00699                                        0087
         BNH   @RF00087                                            0087
@RT00087 DS    0H                                                  0088
*     DO;                                                          0088
*       USRRC=RCLNGTH;              /* RC INVALID DATA LNGHT         */
         L     @08,LCCAPTR                                         0089
         MVC   USRRC(4,@08),@CF00052                               0089
*       GOTO AHLTUSR1;              /* RETURN WITHOUT TRACE ENTRY    */
         B     AHLTUSR1                                            0090
*     END;                                                         0091
*                                                                  0091
*/********************************************************************/
*/*  SEE PROLOGUE NOTE FOR ABSENCE EID VALIDITY CHECK        @AZ13027*/
*/********************************************************************/
*                                                                  0092
*                                                                  0092
*   /*****************************************************************/
*   /*                                                               */
*   /* GET INTO USERS PROTECT KEY TO SECURITY CHECK ADDRESSES        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0092
*   GENERATE;                                                      0092
*                                                                  0092
@RF00087 DS    0H                                                  0092
    IC REG8,FLCPOPSW+1    MOVE PROTECT KEY TO REG 8
    SPKA 0(REG8)          GET INTO USERS PROTECT KEY
*   /*****************************************************************/
*   /*                                                               */
*   /* SECURITY CHECK THE ADDRESS OF THE PARMLIST                    */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0093
*   RFY                                                            0093
*     PLINDREG RSTD;                                               0093
*   PLINDREG=PARMREF;               /* INDICATE USER PARMLIST REF    */
         L     PLINDREG,PARMREF                                    0094
*   GEN(CLC 0(8,PMLSTPTR),0(PMLSTPTR));/* REFERENCE USR PARMLIST     */
         CLC 0(8,PMLSTPTR),0(PMLSTPTR)
*   PLINDREG=0;                     /* REMOVE USER PARMLIST REF      */
*                                                                  0096
         SLR   PLINDREG,PLINDREG                                   0096
*   /*****************************************************************/
*   /*                                                               */
*   /* SECURITY CHECK THE DATA ADDRESS                               */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0097
*   REG15=DATAPTR;                  /* REG15 CONTAINS DATA ADDRESS   */
         L     REG15,DATAPTR(,PMLSTPTR)                            0097
*   GENERATE;                                                      0098
   TM 0(REG15),X'FF'             REFERENCE FIRST BYTE
   AH REG15,USRLNG(0,PMLSTPTR)   LOCATE END OF DATA
   BCTR REG15,0                  FIND LAST BYTE
   TM 0(REG15),X'FF'             REFERENCE LAST BYTE
*   SPKA(ZEROPK);                                                  0099
         SLR   @15,@15                                             0099
         SPKA  0(@15)                                              0099
*   RFY                                                            0100
*     PLINDREG UNRSTD;                                             0100
*                                                                  0101
*   /*****************************************************************/
*   /*                                                               */
*   /* GATHER ASCB ADDRESS AND INSERT IN TRACE ENTRY                 */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0101
*   TRCASCB=PSAAOLD;                /* PICK UP ASCB ADDR             */
*                                                                  0101
         L     @08,PSAAOLD                                         0101
         ST    @08,TRCASCB(,AWSAPTR)                               0101
*   /*****************************************************************/
*   /*                                                               */
*   /* GATHER THE JOBNAME AND INSERTS IT IN TRACE ENTRY              */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0102
*   IF ASCBJBNI^=0                  /* PTR TO INITIATOR JOBNAME ZERO
*                                      ?                             */
*     THEN                                                         0102
         L     @08,ASCBPTR                                         0102
         L     @08,ASCBJBNI(,@08)                                  0102
         CR    @08,@15                                             0102
         BE    @RF00102                                            0102
*     IF JI^=0                      /* INITIATOR JOBNAME ZERO ?      */
*       THEN                                                       0103
         C     @15,JI(,@08)                                        0103
         BE    @RF00103                                            0103
*       TRCJOBN=JBNI;               /* IF NOT ZERO, JOBNAME IS VALID */
         MVC   TRCJOBN(8,AWSAPTR),JBNI(@08)                        0104
*     ELSE                                                         0105
*       TRCJOBN=NOTAPP;             /* IF ZERO, JOBNAME NOT        0105
*                                      APPLICALBLE                   */
         B     @RC00103                                            0105
@RF00103 MVC   TRCJOBN(8,AWSAPTR),@CC01639                         0105
*   ELSE                                                           0106
*     IF ASCBJBNS^=0                /* PTR TO START/MOUNT/LOGON    0106
*                                      JOBNAME ZERO ?                */
*       THEN                                                       0106
         B     @RC00102                                            0106
@RF00102 SLR   @08,@08                                             0106
         L     @15,ASCBPTR                                         0106
         L     @15,ASCBJBNS(,@15)                                  0106
         CR    @15,@08                                             0106
         BE    @RF00106                                            0106
*       IF JS^=0                    /* START/MOUNT/LOGON JOBNAME   0107
*                                      ZERO?                         */
*         THEN                                                     0107
         C     @08,JS(,@15)                                        0107
         BE    @RF00107                                            0107
*         TRCJOBN=JBNS;             /* IF NOT, JOBNAME VALID         */
         MVC   TRCJOBN(8,AWSAPTR),JBNS(@15)                        0108
*       ELSE                                                       0109
*         TRCJOBN=NOTAPP;           /* IF ZERO , JOBNAME NOT       0109
*                                      APPLICALBLE                   */
         B     @RC00107                                            0109
@RF00107 MVC   TRCJOBN(8,AWSAPTR),@CC01639                         0109
*     ELSE                                                         0110
*       TRCJOBN=NOTAPP;             /* IF ASCBJBNS IS ZERO THEN    0110
*                                      JOBNAME IS NOT APPLICABLE     */
         B     @RC00106                                            0110
@RF00106 MVC   TRCJOBN(8,AWSAPTR),@CC01639                         0110
*                                                                  0111
*   /*****************************************************************/
*   /*                                                               */
*   /* GATHER THE USER DATA AND MOVES INTO TRC ENTRY                 */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0111
*   TRCDATA(1:USRLNG)=USRDATA(1:USRLNG);/* MOVE USR DATA TO ENTRY    */
@RC00106 DS    0H                                                  0111
@RC00102 LH    @08,USRLNG(,PMLSTPTR)                               0111
         LR    @15,@08                                             0111
         BCTR  @15,0                                               0111
         L     @14,DATAPTR(,PMLSTPTR)                              0111
         EX    @15,@SM02174                                        0111
*   RFY                                                            0112
*     ULENGTH RSTD;                                                0112
*   ULENGTH=USRLNG+12;              /* ADD JOBNAME AND ASCB LENGTHS  */
         AL    @08,@CF01576                                        0113
         LR    ULENGTH,@08                                         0113
*                                                                  0114
*   /*****************************************************************/
*   /*                                                               */
*   /* ISSUE STACK MACRO TO MOVE TRACE ENTRY TO GTF BUFFERS          */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0114
*   DO;                             /* AHLSTACK DLENGTH(ULENGTH)AID('
*                                      FF'X)FID(USRFID)              */
*                                                                  0114
*     /***************************************************************/
*     /*                                                             */
*     /* THE FOLLOWING CODE IS GENERATED BY THE AHLSTACK MACRO. THIS */
*     /* CODE BUILDS THE GTF RECORD PREFIX AND THEN CALLS AHLSBLOK TO*/
*     /* STACK THE RECORD.                                           */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0115
*     DCL                                                          0115
*       1 AHLGREC INT BASED(AHLRECPR) BDY(WORD),/* MAPPING FOR RECORD
*                                      PREFIX                        */
*        2 AHLGLGTH PTR(16),        /* LENGTH OF RECORD PLUS PREFIX  */
*        2 AHLGRES PTR(16),         /* FOR COMPATIBILITY TO QSAM     */
*        2 AHLGAID PTR(8),          /* APPLICATION ID                */
*        2 AHLGFID PTR(8),          /* FORMAT APPENDAGE ID           */
*        2 AHLGTST CHAR(8),         /* TIMESTAMP IF SPECIFIED        */
*         3 AHLGEIDS PTR(16) BDY(BYTE),/* RECORD EVENT IDENTIFIER IF
*                                      NO TIMESTAMP                  */
*        2 AHLGEIDL PTR(16);        /* RECORD EVENT IDENTIFIER WITH
*                                      TIMESTAMP                     */
*     DCL                                                          0116
*       AHLRECPR PTR(31) REG(1),    /* USED AS POINTER TO RECORD   0116
*                                      PREFIX AREA                   */
*       AHLSBREG PTR(31) REG(14),   /* USED TO HOLD A STABLE COPY OF
*                                      THE SBLOKRTN FIELD IN THE   0116
*                                      GTFPCT                        */
*       AHLRETCD PTR(31) REG(15);   /* USED TO PASS RETURN CODE TO 0116
*                                      INVOKER                       */
*     DCL                                                          0117
*       AHLSBLOK ENTRY OPTIONS(NOEXIT,SEQFLOW,REFS(MCAWSA),SETS(   0117
*           AHLRETCD),NOFLOWS) BASED(AHLSBREG) VALRG(0);/* ENTRY FOR
*                                      AHLSBLOK                      */
*     RFY                                                          0118
*      (AHLRECPR,                                                  0118
*       AHLSBREG,                                                  0118
*       AHLRETCD) RSTD;                                            0118
*     IF OPTTIME='1'B THEN          /* CHECK FOR TIMESTAMP REQUESTED */
         TM    OPTTIME(PCTPTR),B'00000001'                         0119
         BNO   @RF00119                                            0119
*       DO;                         /* YES, TIMESTAMP                */
*         AHLRECPR=ADDR(MCARECPR);  /* SETUP ADDRESSIBILITY TO PREFIX
*                                      FOR PREFIX WITH TIMESTAMP     */
         LA    AHLRECPR,MCARECPR(,AWSAPTR)                         0121
*         AHLGLGTH=ULENGTH+16;      /* SET LENGTH TO INCLUDE ***   0122
*                                      DLENGTH *** PLUS TIMESTAMP  0122
*                                      PREFIX                        */
         LA    @08,16                                              0122
         ALR   @08,ULENGTH                                         0122
         STH   @08,AHLGLGTH(,AHLRECPR)                             0122
*         GEN(STCK AHLGTST(AHLRECPR) PUT TOD CLOCK VALUE INTO PREFIX )
*         SETS(AHLGTST) NOEXIT SEQFLOW NOFLOWS;                    0123
         STCK AHLGTST(AHLRECPR) PUT TOD CLOCK VALUE INTO PREFIX
*         AHLGEIDL=MCAMCR->MCREID;  /* *** EID *** NOT SPECIFIED PUT
*                                      DEFAULT INTO PREFIX           */
         L     @08,MCAMCR(,AWSAPTR)                                0124
         LH    @08,MCREID(,@08)                                    0124
         N     @08,@CF01631                                        0124
         STH   @08,AHLGEIDL(,AHLRECPR)                             0124
*       END;                                                       0125
*     ELSE                          /* NO TIMESTAMP TO BE DONE, BUILD
*                                      SHORT PREFIX                  */
*       DO;                                                        0126
         B     @RC00119                                            0126
@RF00119 DS    0H                                                  0127
*         AHLRECPR=ADDR(MCARECPR)+8;/* SETUP ADDRESSIBILITY TO FOR 0127
*                                      SHORT PREFIX WITHOUT TIMESTAMP*/
         LA    @08,8                                               0127
         LA    AHLRECPR,MCARECPR(,AWSAPTR)                         0127
         ALR   AHLRECPR,@08                                        0127
*         AHLGLGTH=ULENGTH+8;       /* PUT TOTAL RECORD LENGTH INTO
*                                      PREFIX *** DLENGTH *** PLUS 0128
*                                      PREFIX LENGTH                 */
         ALR   @08,ULENGTH                                         0128
         STH   @08,AHLGLGTH(,AHLRECPR)                             0128
*         AHLGEIDS=MCAMCR->MCREID;  /* *** EID *** NOT SPECIFIED PUT
*                                      DEFAULT INTO PREFIX           */
         L     @08,MCAMCR(,AWSAPTR)                                0129
         LH    @08,MCREID(,@08)                                    0129
         N     @08,@CF01631                                        0129
         STH   @08,AHLGEIDS(,AHLRECPR)                             0129
*       END;                                                       0130
*     AHLGRES=0;                    /* ZERO OUT FOR QSAM           0131
*                                      COMPATIBILITY                 */
@RC00119 SLR   @08,@08                                             0131
         STH   @08,AHLGRES(,AHLRECPR)                              0131
*     AHLGAID='FF'X;                /* PUT *** AID *** INTO PREFIX   */
         MVI   AHLGAID(AHLRECPR),X'FF'                             0132
*     AHLGFID=USRFID;               /* PUT *** FID *** INTO PREFIX   */
         LH    @04,USRFID(,PMLSTPTR)                               0133
         STC   @04,AHLGFID(,AHLRECPR)                              0133
*     AHLRETCD=4;                   /* SET DEFAULT RETURN CODE       */
         LA    AHLRETCD,4                                          0134
*     AHLSBREG=SBLOKRTN;            /* GET A STABLE COPY OF AHLSBLOK
*                                      ADDR                          */
         L     AHLSBREG,SBLOKRTN(,PCTPTR)                          0135
*     IF AHLSBREG^=0 THEN           /* CHECK TO SEE IF AHLSBLOK IS 0136
*                                      AVAILABLE                     */
         CR    AHLSBREG,@08                                        0136
         BE    @RF00136                                            0136
*       CALL AHLSBLOK;              /* YES, SO CALL AHLSBLOK TO BLOCK
*                                      RECORD                        */
         LR    @15,AHLSBREG                                        0137
         BALR  @14,@15                                             0137
*     RFY                                                          0138
*      (AHLRECPR,                                                  0138
*       AHLSBREG,                                                  0138
*       AHLRETCD) UNRSTD;                                          0138
@RF00136 DS    0H                                                  0139
*   END;                                                           0139
*   RFY                                                            0140
*     RCREG RSTD;                                                  0140
*   RFY                                                            0141
*     ULENGTH UNRSTD;                                              0141
*   IF RCREG=0                      /* STACK WENT OK                 */
*     THEN                                                         0142
         SLR   @14,@14                                             0142
         CR    RCREG,@14                                           0142
         BNE   @RF00142                                            0142
*     USRRC=RCOK;                   /* INDICATE OK TO USER.          */
         L     @08,LCCAPTR                                         0143
         ST    @14,USRRC(,@08)                                     0143
*   ELSE                                                           0144
*     USRRC=RCBUFFL;                /* INDICATE BUFFERS FULL TO USER */
         B     @RC00142                                            0144
@RF00142 L     @14,LCCAPTR                                         0144
         MVC   USRRC(4,@14),@CF00091                               0144
*   RFY                                                            0145
*     RCREG UNRSTD;                                                0145
@RC00142 DS    0H                                                  0146
*                                                                  0146
*   /*****************************************************************/
*   /*                                                               */
*   /* EXIT CODE                                                     */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0146
*AHLTUSR1:                                                         0146
*   MCATRAIL=CLEAR;                 /* CLEAR DEBUG BITS              */
AHLTUSR1 MVC   MCATRAIL(8,AWSAPTR),@CB01636                        0146
*   GEN(SETFRR D,WRKREGS=(7,9));    /* REMOVE FRR                    */
         SETFRR D,WRKREGS=(7,9)
*   BC(15,RTNADSV);                 /* RETURN TO AHLMCIH             */
         BCR   15,RTNADSV                                          0148
*AHLTUSRE:                                                         0149
*                                                                  0149
*   /*****************************************************************/
*   /*                                                               */
*   /* SET UP ADDRESSIBILITY FOR THIS FRR ROUTINE                    */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0149
*   GEN;                                                           0149
*                                                                  0149
AHLTUSRE DS    0H                                                  0149
               USING AHLTUSRE,REG15        SET UP TEMP ADDRESSIBILITY
               L BASEREG,BASE              ENTRY POINT ADDR TO BASEREG
               DROP REG15
               USING AHLTUSR,BASEREG      SET UP ADDRESSIBILITY IN FRR
*/* ******************************************************************/
*/*                                                                  */
*/*  THE SDWA (SYSTEM DIAGNOSTIC WORK AREA) IS USED BY BOTH (E)STA   */
*/*  EXIT ROUTINES AND FRR ROUTINES AS THE COMMUNICATION AREA        */
*/*  BETWEEN THE RTM AND THE (E)STA OR FRR WHEN ERRORS OCCUR.        */
*/*  IT IS ALSO REFERRED TO AS THE RTCA (RECOVERY TERMINATION        */
*/*  COMMUNICATION AREA). IT CONTAINS DATA CONCERNING THE ORIGINAL   */
*/*  ERROR AND ALSO CONCERNING ACTIONS OF PREVIOUSLY ENTERED         */
*/*  RECOVERY ROUTINES.                                              */
*/*                                                                  */
*/*  METHOD OF ACCESS                                                */
*/*  BAL                                                             */
*/*              IHASDWA DSECT =  YES                                */
*/*                               NO                                 */
*/*  DSECT = YES IS THE DEFAULT AND WILL PRODUCE THE SDWA            */
*/*             AS A DSECT.                                          */
*/*  DSECT = NO WILL PRODUCE THE SDWA AS A CONTINUATION OF           */
*/*             DEFINED STORAGE. (NO DSECT CARD PRODUCED)            */
*/*  PLS                                                             */
*/*    IF MACRO VARIABLE %SDWA9999 IS NOT EQUAL TO ','               */
*/*    AND %SDWALVL IS NULL, THE SDWA WILL BE INCLUDED               */
*/*    AS A LEVEL 1 STRUCTURE BASED ON SDWAPTR.                      */
*/*                                                                  */
*/*    IF %SDWALVL IS SPECIFIED AS A NUMBER FROM 1 TO 4              */
*/*    THE SDWA WILL BE A NON-BASED STRUCTURE WITH THE               */
*/*    TOP LEVEL EQUAL TO %SDWALVL.                                  */
*/*                                                                  */
*/*    IF SDWA9999 IS EQUAL TO ',' THE SDWA WILL                     */
*/*    TERMINATE WITH A COMMA RATHER THAN A                          */
*/*    SEMI-COLON.                                                   */
*/*                                                                  */
*/*                                                                  */
*/*  MACMEAN SDWA MEANS SYSTEM DIAGNOSTIC WORK AREA                  */
*/*  MACCOMP Y-1 SC1C5/PZD81                                         */
*/*  MACSTAT Y-1 72318/Y02703,Y02704                                 */
*/*                                                                  */
*/* ******************************************************************/
*                                                                  0150
*   DECLARE                                                        0150
*     1 SDWA BASED(SDWAPTR),                                       0150
*          6 SDWAPARM PTR(31),      /* PARAMETER LIST ADDRESS IF   0150
*                                      (E)STA MACRO SPECIFIED PARAM
*                                      OPTION OR 0. FOR FRRS THIS IS
*                                      THE ADDRESS OF THE 6 WORD PARM
*                                      AREA RETURNED BY THE SETFRR 0150
*                                      MACRO WHEN THE PARMAD KEYWORD
*                                      IS SPECIFIED ON THE ON THE  0150
*                                      SETFRR MACRO                  */
*          6 SDWAFIOB PTR(31),      /* ADDRESS OF PURGE I/O REQUEST
*                                      LIST (PIRL), OR 0 IF HALT I/O
*                                      IS REQUESTED ON ENTRY TO RETRY
*                                      ROUTINE FOR (E)STA.           */
*           7 SDWAABCC CHAR(4),     /* ABEND COMPLETION CODE ON ENTRY
*                                      TO EXIT ROUTINE               */
*            8 SDWACMPF CHAR(1),    /* FLAG BITS IN COMPLETION CODE. */
*             9 SDWAREQ BIT(1),     /* ON, DUMP TO BE GIVEN. SET IF
*                                      DUMP REQUESTED BY ABEND,    0150
*                                      CALLRTM, OR SETRP MACRO.      */
*             9 SDWASTEP BIT(1),    /* ON, JOBSTEP TO BE           0150
*                                      TERMINATED.SET IF STEP OPTION
*                                      SPECIFIED ON ABEND MACRO.     */
*             9 * BIT(1),           /* RESERVED                      */
*             9 SDWASTCC BIT(1),    /* ON, DON'T STORE COMPLETION  0150
*                                      CODE. NOT USED IN OS/VS2 REL.
*                                      2                             */
*             9 * BIT(4),           /* RESERVED                      */
*            8 SDWACMPC CHAR(3),    /* SYSTEM COMPLETION CODE (FIRST
*                                      12 BITS) AND USER COMPLETION
*                                      CODE (SECOND 12 BITS).        */
*          6 SDWACTL1 CHAR(8) BDY(WORD),/* BC MODE PSW AT TIME OF  0150
*                                      ERROR. NOT INITIALIZED FOR  0150
*                                      FRRS.                         */
*           7 SDWACMKA CHAR(1),     /* CHANNEL INTERRUPTS MASKS      */
*            8 SDWAIOA BIT(7),      /* I/O INTERRUPTS (ALL ZEROS OR
*                                      ALL ONES).                    */
*            8 SDWAEXTA BIT(1),     /* EXTERNAL INTERRUPT.           */
*           7 SDWAMWPA CHAR(1),     /* PSW KEY AND 'M-W-P'.          */
*            8 SDWAKEYA BIT(4),     /* PSW KEY                       */
*            8 * BIT(1),            /* RESERVED                      */
*            8 SDWAMCKA BIT(1),     /* MACHINE CHECK INTERRUPT       */
*            8 SDWAWATA BIT(1),     /* WAIT STATE.                   */
*            8 SDWASPVA BIT(1),     /* SUPERVISOR/PROBLEM- PROGRAM 0150
*                                      MODE.                         */
*           7 SDWAINTA CHAR(2),     /* INTERRUPT CODE (LAST 2 BYTES
*                                      OF INTERRUPT CODE IF I/O    0150
*                                      INTERRUPT).                   */
*           7 SDWAPMKA CHAR(1),     /* INSTRUCTION LENGTH CODE,    0150
*                                      CONDITION CODE, AND PROGRAM 0150
*                                      MASKS.                        */
*            8 SDWAILA BIT(2),      /* INSTRUCTION LENGTH CODE       */
*            8 SDWACCA BIT(2),      /* LAST CONDITION CODE           */
*            8 SDWAFPA BIT(1),      /* FIXED-POINT OVERFLOW          */
*            8 SDWADOA BIT(1),      /* DECIMAL OVERFLOW              */
*            8 SDWAEUA BIT(1),      /* EXPONENT UNDERFLOW            */
*            8 SDWASGA BIT(1),      /* SIGNIFANCE                    */
*           7 SDWANXTA PTR(24),     /* ADDRESS OF NEXT INSTRUCTION TO
*                                      BE EXECUTED                   */
*          6 SDWACTL2 CHAR(8) BDY(WORD),/* BC MODE PSW FROM LAST PRB
*                                      ON RB CHAIN. ZERO FOR FRRS.   */
*           7 SDWACMKP CHAR(1),     /* CHANNEL INTERRUPTS MASKS      */
*            8 SDWAIOP BIT(7),      /* I/O INTERRUPTS (ALL ZEROS OR
*                                      ALL ONES).                    */
*            8 SDWAEXTP BIT(1),     /* EXTERNAL INTERRUPT.           */
*           7 SDWAMWPP CHAR(1),     /* PSW KEY AND 'M-W-P'.          */
*            8 SDWAKEYP BIT(4),     /* PSW KEY                       */
*            8 * BIT(1),            /* RESERVED                      */
*            8 SDWAMCKP BIT(1),     /* MACHINE CHECK INTERRUPT       */
*            8 SDWAWATP BIT(1),     /* WAIT STATE.                   */
*            8 SDWASPVP BIT(1),     /* SUPERVISOR/PROBLEM- PROGRAM 0150
*                                      MODE.                         */
*           7 SDWAINTP CHAR(2),     /* INTERRUPT CODE (LAST 2 BYTES
*                                      OF INTERRUPT CODE IF I/O    0150
*                                      INTERRUPT).                   */
*           7 SDWAPMKP CHAR(1),     /* INSTRUCTION LENGTH CODE,    0150
*                                      CONDITION CODE, AND PROGRAM 0150
*                                      MASKS.                        */
*            8 SDWAILP BIT(2),      /* INSTRUCTION LENGTH CODE       */
*            8 SDWACCP BIT(2),      /* LAST CONDITION CODE           */
*            8 SDWAFPP BIT(1),      /* FIXED-POINT OVERFLOW          */
*            8 SDWADOP BIT(1),      /* DECIMAL OVERFLOW              */
*            8 SDWAEUP BIT(1),      /* EXPONENT UNDERFLOW            */
*            8 SDWASGP BIT(1),      /* SIGNIFICANCE                  */
*           7 SDWANXTP PTR(24),     /* ADDRESS OF NEXT INSTRUCTION TO
*                                      BE EXECUTED                   */
*          6 SDWAGRSV CHAR(64) BDY(WORD),/* GENERAL PURPOSE REGISTERS
*                                      AT TIME OF ERROR              */
*           7 SDWAGR00 FIXED(31),   /* GPR 0.                        */
*           7 SDWAGR01 FIXED(31),   /* GPR 1.                        */
*           7 SDWAGR02 FIXED(31),   /* GPR 2.                        */
*           7 SDWAGR03 FIXED(31),   /* GPR 3.                        */
*           7 SDWAGR04 FIXED(31),   /* GPR 4.                        */
*           7 SDWAGR05 FIXED(31),   /* GPR 5.                        */
*           7 SDWAGR06 FIXED(31),   /* GPR 6.                        */
*           7 SDWAGR07 FIXED(31),   /* GPR 7.                        */
*           7 SDWAGR08 FIXED(31),   /* GPR 8.                        */
*           7 SDWAGR09 FIXED(31),   /* GPR 9.                        */
*           7 SDWAGR10 FIXED(31),   /* GPR 10.                       */
*           7 SDWAGR11 FIXED(31),   /* GPR 11.                       */
*           7 SDWAGR12 FIXED(31),   /* GPR 12.                       */
*           7 SDWAGR13 FIXED(31),   /* GPR 13.                       */
*           7 SDWAGR14 FIXED(31),   /* GPR 14.                       */
*           7 SDWAGR15 FIXED(31),   /* GPR 15.                       */
*          6 SDWANAME CHAR(8) BDY(WORD),/* IF PROBLEM PROGRAM MODE 0150
*                                      NAME OF ABENDING PROGRAM, OR
*                                      ZERO IF NO NAME IS AVAILABLE.
*                                      ZERO IF NOT RUNNING UNDER AN
*                                      RB.                           */
*           7 SDWARBAD PTR(31),     /* RB ADDRESS OF ABENDING      0150
*                                      PROGRAM. (IF SUPERVISOR MODE
*                                      PROGRAM RUNNING UNDER AN RB)  */
*           7 * CHAR(4),            /* CONTAINS ZEROS IF SUPERVISOR
*                                      MODE PROGRAM RUNNING UNDER AN
*                                      RB. OR IF PROGRAM NOT RUNNING
*                                      UNDER AN RB.                  */
*          6 SDWAEPA PTR(31),       /* ENTRY POINT ADDRESS OF      0150
*                                      ABENDING PROGRAM. ZERO IF NOT
*                                      RUNNING UNDER AN RB.          */
*          6 SDWAIOBR PTR(31),      /* POINTER TO SDWAFIOB FIELD, OR
*                                      0 IF NO RETRY, OR 0 IF HALT 0150
*                                      I/O IS REQUESTED FOR (E)STA 0150
*                                      EXITS. ZERO FOR FRRS. ICB3777 */
*          6 SDWAEC1 CHAR(8) BDY(WORD),/* EXTENDED CONTROL PSW AT  0150
*                                      TIME OF ERROR(ABEND)          */
*           7 SDWAEMK1 CHAR(1),     /* INTERRUPT INFORMATION MASKS   */
*            8 * BIT(1),            /* RESERVED                      */
*            8 SDWAPER1 BIT(1),     /* ON,PROGRAM EVENT RECORD- ING
*                                      INTERRUPTS CAN OCCUR        0150
*                                      OFF,PROGRAM EVENT RECORD- ING
*                                      INTERRUPTS CANNOT OCCUR       */
*            8 * BIT(3),            /* RESERVED                      */
*            8 SDWATRM1 BIT(1),     /* ON,ADDRESS TRANSLATION ACTIVE */
*            8 SDWAIO1 BIT(1),      /* OFF,I/O INTERRUPTIONS CANNOT
*                                      OCCUR ON,I/O INTERRUPTIONS CAN
*                                      OCCUR SUBJECT TO CHANNEL MASK
*                                      BITS IN CONTROL REGS 2 AND 3  */
*            8 SDWAEXT1 BIT(1),     /* OFF,EXTERNAL INTERRUPTIONS  0150
*                                      CANNOT OCCUR ON,EXTERNAL    0150
*                                      INTERRUPTIONS CAN OCCUR     0150
*                                      SUBJECT TO EXTERNAL SUBCLASS
*                                      MASK BITS OF CONTROL REGISTER
*                                      0                             */
*           7 SDWAMWP1 CHAR(1),     /* PSW KEY AND 'M-W-P'           */
*            8 SDWAKEY1 BIT(4),     /* PSW KEY                       */
*            8 SDWAECT1 BIT(1),     /* EXTENDED CONTROL MODE BIT     */
*            8 SDWAMCK1 BIT(1),     /* OFF,MACHINE CHECKS CANNOT   0150
*                                      OCCUR ON,MACHINE CHECKS DUE TO
*                                      SYSTEM DAMAGE AND           0150
*                                      INSTRUCTION-PROCESSING DAMAGE
*                                      CAN OCCUR. OTHER MACHINE    0150
*                                      CHECKS SUBJECT TO MASK BITS IN
*                                      CONTROL REGISTER 14           */
*            8 SDWAWAT1 BIT(1),     /* ON,CPU IN WAIT STATE          */
*            8 SDWAPGM1 BIT(1),     /* ON,PROBLEM STATE            0150
*                                      OFF,SUPERVISOR STATE          */
*           7 SDWAINT1 CHAR(1),     /* CONDITION CODE AND PROGRAM  0150
*                                      MASK                          */
*            8 * BIT(2),            /* RESERVED                      */
*            8 SDWACC1 BIT(2),      /* CONDITION CODE                */
*            8 SDWAFPO1 BIT(1),     /* FIXED POINT OVERFLOW          */
*            8 SDWADEC1 BIT(1),     /* DECIMAL OVERFLOW              */
*            8 SDWAEXP1 BIT(1),     /* EXPONENT UNDERFLOW            */
*            8 SDWASGN1 BIT(1),     /* SIGNIFICANCE                  */
*           7 * CHAR(1),            /* RESERVED                      */
*           7 SDWANXT1 PTR(31),     /* ADDRESS OF NEXT INSTRUCTION TO
*                                      BE EXECUTED                   */
*            8 * PTR(8),            /* RESERVED                      */
*            8 SDWAADD1 PTR(24),    /* INSTRUCTION ADDRESS           */
*          6 SDWAAEC1 CHAR(8) BDY(WORD),/* ADDITIONAL EC MODE      0150
*                                      INFORMATION                   */
*           7 * CHAR(1),            /* RESERVED                      */
*           7 SDWAILC1 PTR(8),      /* INSTRUCTION LENGTH CODE FOR 0150
*                                      PSW DEFINED BY         SDWAEC1*/
*            8 * BIT(5),            /* RESERVED ALWAYS ZERO          */
*            8 SDWAIL1 BIT(2),      /* INSTRUCTION LENGTH CODE       */
*            8 * BIT(1),            /* RESERVED ALWAYS ZERO          */
*           7 SDWAINC1 FIXED(16),   /* INTERRUPT CODE. IF PROGRAM  0150
*                                      CHECK OCCURRED THE SUBFIELDS
*                                      ARE FURTHER DIVIDED           */
*            8 * CHAR(1),           /* RESERVED FOR IMPRECISE      0150
*                                      INTERRUPTS IF PROGRAM CHECK   */
*            8 SDWAICD1 PTR(8),     /* 8 BIT INTERRUPT CODE IF     0150
*                                      PROGRAM CHECK                 */
*             9 SDWAIPR1 BIT(1),    /* PER INTERRUPT OCCURRED        */
*             9 SDWAIMC1 BIT(1),    /* MONITOR CALL INTERRUPT      0150
*                                      OCCURRED                      */
*             9 SDWAIPC1 BIT(6),    /* AN UNSOLICITED PROGRAM CHECK
*                                      HAS OCCURRED                  */
*           7 SDWATRAN PTR(31),     /* VIRTUAL ADDRESS CAUSING     0150
*                                      TRANSLATION EXCEPTION         */
*          6 SDWAEC2 CHAR(8) BDY(WORD),/* EC MODE PSW OF THE RB WHICH
*                                      CREATED THE ESTAE EXIT AT THE
*                                      TIME IT LAST INCURRED AN    0150
*                                      INTERRUPT OR 0 FOR ESTAI. OR
*                                      PSW USED TO GIVE FRR CONTROL  */
*           7 SDWAEMK2 CHAR(1),     /* INTERRUPT INFORMATION MASKS   */
*            8 * BIT(1),            /* RESERVED                      */
*            8 SDWAPER2 BIT(1),     /* ON,PROGRAM EVENT RECORD- ING
*                                      INTERRUPTS CAN OCCUR        0150
*                                      OFF,PROGRAM EVENT RECORD- ING
*                                      INTERRUPTS CANNOT OCCUR       */
*            8 * BIT(3),            /* RESERVED                      */
*            8 SDWATRM2 BIT(1),     /* ON,ADDRESS TRANSLATION ACTIVE */
*            8 SDWAIO2 BIT(1),      /* OFF,I/O INTERRUPTIONS CANNOT
*                                      OCCUR ON,I/O INTERRUPTIONS CAN
*                                      OCCUR SUBJECT TO CHANNEL MASK
*                                      BITS IN CONTROL REGS 2 AND 3  */
*            8 SDWAEXT2 BIT(1),     /* OFF,EXTERNAL INTERRUPTIONS  0150
*                                      CANNOT OCCUR ON,EXTERNAL    0150
*                                      INTERRUPTIONS CAN OCCUR     0150
*                                      SUBJECT TO EXTERNAL SUBCLASS
*                                      MASK BITS OF CONTROL REGISTER
*                                      0                             */
*           7 SDWAMWP2 CHAR(1),     /* PSW KEY AND 'M-W-P'           */
*            8 SDWAKEY2 BIT(4),     /* PSW KEY                       */
*            8 SDWAECT2 BIT(1),     /* EXTENDED CONTROL MODE BIT     */
*            8 SDWAMCK2 BIT(1),     /* OFF,MACHINE CHECKS CANNOT   0150
*                                      OCCUR ON,MACHINE CHECKS DUE TO
*                                      SYSTEM DAMAGE AND           0150
*                                      INSTRUCTION-PROCESSING DAMAGE
*                                      CAN OCCUR. OTHER MACHINE    0150
*                                      CHECKS SUBJECT TO MASK BITS IN
*                                      CONTROL REGISTER 14           */
*            8 SDWAWAT2 BIT(1),     /* ON,CPU IN WAIT STATE          */
*            8 SDWAPGM2 BIT(1),     /* ON,PROBLEM STATE            0150
*                                      OFF,SUPERVISOR STATE          */
*           7 SDWAINT2 CHAR(1),     /* CONDITION CODE AND PROGRAM  0150
*                                      MASK                          */
*            8 * BIT(2),            /* RESERVED                      */
*            8 SDWACC2 BIT(2),      /* CONDITION CODE                */
*            8 SDWAFPO2 BIT(1),     /* FIXED POINT OVERFLOW          */
*            8 SDWADEC2 BIT(1),     /* DECIMAL OVERFLOW              */
*            8 SDWAEXP2 BIT(1),     /* EXPONENT UNDERFLOW            */
*            8 SDWASGN2 BIT(1),     /* SIGNIFICANCE                  */
*           7 * CHAR(1),            /* RESERVED                      */
*           7 SDWANXT2 PTR(31),     /* ADDRESS OF NEXT INSTRUCTION TO
*                                      BE EXECUTED                   */
*            8 * PTR(8),            /* RESERVED                      */
*            8 SDWAADD2 PTR(24),    /* INSTRUCTION ADDRESS           */
*          6 SDWAAEC2 CHAR(8) BDY(WORD),/* ADDITIONAL EC MODE      0150
*                                      INFORMATION                   */
*           7 * CHAR(1),            /* RESERVED                      */
*           7 SDWAILC2 CHAR(1),     /* INSTRUCTION LENGTH CODE FOR 0150
*                                      PSW DEFINED BY         SDWAEC2*/
*            8 * BIT(5),            /* RESERVED ALWAYS ZERO          */
*            8 SDWAIL2 BIT(2),      /* INSTRUCTION LENGTH CODE       */
*            8 * BIT(1),            /* RESERVED ALWAYS ZERO          */
*           7 SDWAINC2 FIXED(16),   /* INTERRUPT CODE. IF PROGRAM  0150
*                                      CHECK OCCURRED THE SUBFIELDS
*                                      ARE FURTHER DIVIDED           */
*            8 * CHAR(1),           /* RESERVED FOR IMPRECISE      0150
*                                      INTERRUPTS ON PROGRAM CHECK 0150
*                                      INTERRUPT                     */
*            8 SDWAICD2 PTR(8),     /* 8 BIT INTERRUPT CODE IF     0150
*                                      PROGRAM CHECK                 */
*             9 SDWAIPR2 BIT(1),    /* PER INTERRUPT OCCURRED        */
*             9 SDWAIMC2 BIT(1),    /* MONITOR CALL INTERRUPT      0150
*                                      OCCURRED                      */
*             9 SDWAIPC2 BIT(6),    /* AN UNSOLICITED PROGRAM CHECK
*                                      OCCURRED                      */
*           7 SDWATRN2 PTR(31),     /* VIRTUAL ADDRESS CAUSING     0150
*                                      TRANSLATION EXCEPTION         */
*          6 SDWASRSV CHAR(64) BDY(WORD),/* GENERAL PURPOSE REGISTERS
*                                      OF THE RB LEVEL WHICH CREATED
*                                      THE ESTAE EXIT AT THE TIME IT
*                                      LAST INCURRED AN INTERRUPT OR
*                                      0 FOR ESTAI. FOR FRRS       0150
*                                      INITIALIZED TO REGISTERS AT 0150
*                                      TIME OF ERROR. THIS REGISTER
*                                      AREA IS USED TO UPDATE      0150
*                                      REGISTER CONTENTS FOR RETRY IF
*                                      REQUESTED                     */
*           7 SDWASR00 FIXED(31),   /* GPR 0.                        */
*           7 SDWASR01 FIXED(31),   /* GPR 1.                        */
*           7 SDWASR02 FIXED(31),   /* GPR 2.                        */
*           7 SDWASR03 FIXED(31),   /* GPR 3.                        */
*           7 SDWASR04 FIXED(31),   /* GPR 4.                        */
*           7 SDWASR05 FIXED(31),   /* GPR 5.                        */
*           7 SDWASR06 FIXED(31),   /* GPR 6.                        */
*           7 SDWASR07 FIXED(31),   /* GPR 7.                        */
*           7 SDWASR08 FIXED(31),   /* GPR 8.                        */
*           7 SDWASR09 FIXED(31),   /* GPR 9.                        */
*           7 SDWASR10 FIXED(31),   /* GPR 10,                       */
*           7 SDWASR11 FIXED(31),   /* GPR 11.                       */
*           7 SDWASR12 FIXED(31),   /* GPR 12.                       */
*           7 SDWASR13 FIXED(31),   /* GPR 13.                       */
*           7 SDWASR14 FIXED(31),   /* GPR 14.                       */
*           7 SDWASR15 FIXED(31),   /* GPR 15.                       */
*          6 SDWAIDNT CHAR(4),      /* SDWA IDENTIFICATION AND     0150
*                                      ATTRIBUTES                    */
*           7 SDWASPID CHAR(1),     /* SUBPOOL ID OF STORAGE       0150
*                                      CONTAINING THIS SDWA          */
*           7 SDWALNTH CHAR(3),     /* LENGTH OF THIS SDWA IN BYTES  */
*          6 SDWAMCH CHAR(28) BDY(WORD),/* CONTAINS MACHINE CHECK  0150
*                                      DATA IF SDWAMCHK IS ON        */
*           7 SDWASTCK CHAR(8) BDY(WORD),/* BEGINNING AND ENDING   0150
*                                      STORAGE CHECK ADDRESSES.    0150
*                                      FILLED IN DUE TO STORAGE ERROR
*                                      (SDWASCK) OR A KEY FAILURE  0150
*                                      (SDWASKYF) THESE ADDRESSES ARE
*                                      VALID ONLY IF INDICATED BY THE
*                                      SDWASRVL FLAG.                */
*            8 SDWASCKB PTR(31),    /* BEGINNING VIRTUAL ADDRESS OF
*                                      STORAGE CHECK                 */
*            8 SDWASCKE PTR(31),    /* ENDING VIRTUAL ADDRESS OF   0150
*                                      STORAGE CHECK                 */
*           7 SDWAMCHI CHAR(2),     /* ADDITIONAL MCH INFORMATION  0150
*                                      FLAGS                         */
*            8 SDWAMCHS CHAR(1),    /* MCH FLAG BYTE                 */
*             9 SDWASRVL BIT(1),    /* ON,STORAGE ADDRESS SUPPLIED 0150
*                                      (SDWASTCK, SDWARFSA) ARE    0150
*                                      VALID.                        */
*             9 SDWARCDF BIT(1),    /* ON,MACHINE CHECK RECORD NOT 0150
*                                      RECORDED                      */
*             9 SDWATSVL BIT(1),    /* ON,TIME STAMP VALID           */
*             9 SDWAINVP BIT(1),    /* ON,STORAGE IS RECONFIGURED, 0150
*                                      PAGE IS INVALIDATED.          */
*             9 SDWARSRC BIT(1),    /* ON,STORAGE RECONFIGURATION  0150
*                                      STATUS AVAILABLE            0150
*                                      (SDWARSR1,SDWARSR2)           */
*             9 SDWARSRF BIT(1),    /* ON,STORAGE RECONFIGURATION NOT
*                                      ATTEMPTED (SDWARSR1, SDWARSR2
*                                      ARE INVALID )                 */
*             9 * BIT(2),           /* RESERVED                      */
*            8 SDWAMCHD CHAR(1),    /* INPUT INFORMATION TO RECOVERY
*                                      ROUTINE CON- CERNING A MACHINE
*                                      CHECK ERROR                   */
*             9 SDWASKYF BIT(1),    /* ON,STORAGE KEY FAILURE        */
*             9 SDWAREGU BIT(1),    /* ON,GENERAL PURPOSE REGISTER 0150
*                                      CONTENTS AT TIME OF MACHINE 0150
*                                      CHECK UNPREDICTABLE           */
*             9 SDWAPSWU BIT(1),    /* ON,PSW AND-OR CONTROL       0150
*                                      REGISTERS AT TIME OF MACHINE
*                                      CHECK UNPREDICTABLE           */
*             9 SDWASCK BIT(1),     /* ON,STORAGE DATA CHECK         */
*             9 SDWAACR BIT(1),     /* ON,INDICATES ACR REQUEST      */
*             9 SDWAINSF BIT(1),    /* ON,INSTRUCTION FAILURE        */
*             9 SDWAFPRX BIT(1),    /* ON, CONTENTS OF FLOATING POINT
*                                      REGISTERS AT TIME OF MACHINE
*                                      CHECK ARE UNPREDICTABLE       */
*             9 SDWATERR BIT(1),    /* ON,TIMER ERROR - CAUSES ENTRY
*                                      TO RECOVERY ROUTINES ONLY IF
*                                      LOGOUT FAILED                 */
*           7 SDWACPID CHAR(2),     /* ID OF FAILING CPU CAUSING ACR */
*           7 SDWARSR1 CHAR(1),     /* ADDITIONAL STORAGE FRAME ERROR
*                                      INDICATORS AS RETURNED FROM 0150
*                                      REAL STORAGE RECONFIGURATION  */
*            8 * BIT(6),            /* RESERVED                      */
*            8 SDWAMSER BIT(1),     /* STORAGE ERROR ALREADY SET IN
*                                      FRAME                         */
*            8 SDWACHNG BIT(1),     /* CHANGE INDICATOR WAS ON IN  0150
*                                      FRAME                         */
*           7 SDWARSR2 CHAR(1),     /* ADDITIONAL STORAGE ERROR    0150
*                                      INDICATORS.                   */
*            8 SDWAOFLN BIT(1),     /* FRAME OFFLINE OR SCHEDULED TO
*                                      GO OFFLINE IF SDWAINTC IS ON  */
*            8 SDWAINTC BIT(1),     /* INTERCEPT THE FRAME IS      0150
*                                      SCHEDULED TO GO OFFLINE OR THE
*                                      FRAME HAS INCURRED A STORAGE
*                                      ERROR OR IS V=R               */
*            8 SDWASPER BIT(1),     /* STORAGE ERROR PERMANENT ON  0150
*                                      FRAME                         */
*            8 SDWANUCL BIT(1),     /* FRAME CONTAINS PERMANENT    0150
*                                      RESIDENT STORAGE,I.E. NUCLEUS.*/
*            8 SDWAFSQA BIT(1),     /* FRAME IN SQA                  */
*            8 SDWAFLSQ BIT(1),     /* FRAME IN LSQA                 */
*            8 SDWAPGFX BIT(1),     /* FRAME IS PAGE FIXED           */
*            8 SDWAVEQR BIT(1),     /* FRAME IS VIRTUAL=REAL OR    0150
*                                      SCHEDULED FOR VIRTUAL= REAL.
*                                      IF SDWAINTC IS ON             */
*           7 * CHAR(2),            /* RESERVED                      */
*           7 SDWARFSA PTR(31),     /* REAL STORAGE FAILING ADDRESS.
*                                      ( VALID ONLY IF INDICATED BY
*                                      SDWASRVL )                    */
*           7 SDWATIME CHAR(8),     /* TIME STAMP OF ASSOCIATED    0150
*                                      MACHINE CHECK RECORD.         */
*          6 SDWAFLGS CHAR(4),      /* INPUT FLAGS DESCRIBING REASONS
*                                      AND CONDITIONS FOR ENTERING A
*                                      RECOVERY EXIT ROUTINE         */
*           7 SDWAERRA CHAR(1),     /* ERROR TYPE CAUSING ENTRY TO 0150
*                                      RECOVERY ROUTINE              */
*            8 SDWAMCHK BIT(1),     /* ON,MACHINE CHECK              */
*            8 SDWAPCHK BIT(1),     /* ON,PROGRAM CHECK              */
*            8 SDWARKEY BIT(1),     /* ON,INDICATES CONSOLE RESTART
*                                      KEY DEPRESSED                 */
*            8 SDWASVCD BIT(1),     /* ON,INDICATES TASK ISSUED SVC
*                                      13                            */
*            8 SDWAABTM BIT(1),     /* ON,INDICATES SYSTEM FORCED SVC
*                                      13(ABTERM)                    */
*            8 SDWASVCE BIT(1),     /* ON,INDICATES AN SVC WAS ISSUED
*                                      BY A LOCKED OR SRB ROUTINE    */
*            8 SDWATEXC BIT(1),     /* ON,INDICATES AN UNRECOVERABLE
*                                      TRANSLATION FAILURE           */
*            8 SDWAPGIO BIT(1),     /* ON,INDICATES A PAGE I/O ERROR */
*           7 SDWAERRB CHAR(1),     /* ADDITIONAL ERROR ENTRY      0150
*                                      INFORMATION                   */
*            8 * BIT(4),            /* RESERVED                      */
*            8 SDWATYP1 BIT(1),     /* ON,TYPE1 SVC IN CONTROL AT  0150
*                                      TIME OF ERROR                 */
*            8 SDWAENRB BIT(1),     /* ON,ENABLED RB IN CONTROL AT 0150
*                                      TIME OF ERROR                 */
*            8 SDWALDIS BIT(1),     /* ON,A LOGICALLY OR PHYSICALLY
*                                      DISABLED ROUTINE WAS IN     0150
*                                      CONTROL AT TIME OF ERROR.     */
*            8 SDWASRBM BIT(1),     /* SYSTEM IN SRB MODE AT TIME OF
*                                      ERROR                         */
*           7 SDWAERRC CHAR(1),     /* ADDITIONAL ERROR ENTRY      0150
*                                      INFORMATION                   */
*            8 SDWASTAF BIT(1),     /* ON,A PREVIOUS (E)STA EXIT OR
*                                      FRR FAILED                    */
*            8 SDWASTAI BIT(1),     /* ON, A (E)STAI EXIT PREVIOUSLY
*                                      RECEIVED CONTROL              */
*            8 SDWAIRB BIT(1),      /* ON,AN IRB PRECEDED THE RB THAT
*                                      IS ASSOCIATED WITH THIS EXIT  */
*            8 SDWAPERC BIT(1),     /* ON,THIS RECOVERY ROUTINE IS 0150
*                                      BEING PERCOLATED TO           */
*            8 SDWAEAS BIT(1),      /* ON INDICATES A LOWER LEVEL  0150
*                                      EXIT HAS RECOGNIZED AN ERROR
*                                      AND PROVIDED SERVICE- ABILITY
*                                      INFORMATION                   */
*            8 * BIT(3),            /* RESERVED.                     */
*           7 SDWAERRD CHAR(1),     /* ADDITIONAL ERROR ENTRY      0150
*                                      INFORMATION.                  */
*            8 SDWACLUP BIT(1),     /* ON,INDICATES RECOVERY ROUTINE
*                                      ONLY TO CLEANUP AND NOT RETRY
*                                      (IF ESTA EXIT AND 33E       0150
*                                      COMPLETION CODE THE DUMP IS 0150
*                                      TAKEN AFTER ENTRY TO THE    0150
*                                      RECOVERY ROUTINE,IF THE     0150
*                                      COMPLETION CODE IS OTHER THAN
*                                      33E AND IT IS AN ESTA EXIT THE
*                                      DUMP IS TAKEN BEFORE ENTRY TO
*                                      THE RECOVERY ROUTINE)         */
*            8 SDWANRBE BIT(1),     /* ON,RB ASSOCIATED WITH THIS  0150
*                                      ESTA EXIT WAS NOT IN CONTROL
*                                      AT TIME OF ERROR              */
*            8 SDWASTAE BIT(1),     /* ON,THIS ESTA EXIT HAS BEEN  0150
*                                      ENTERED FOR A PREVIOUS ABEND.
*                                      NEVER ON FOR FRRS.            */
*            8 SDWACTS BIT(1),      /* ON,THIS TASK WAS NOT IN     0150
*                                      CONTROL AT TIME OF ERROR BUT A
*                                      TASK WITHIN THE SAME JOBSTEP
*                                      TREE REQUESTED A 'STEP' ABEND.
*                                      ONLY 'ON' IF SDWACLUP IS 'ON'.*/
*            8 SDWAMABD BIT(1),     /* ON,THIS TASK WAS NOT IN     0150
*                                      CONTROL AT TIME OF ERROR BUT
*                                      AN ANCESTOR OF THIS TASK HAS
*                                      ABENDED. ONLY 'ON' IF SDWACLUP
*                                      IS 'ON'                       */
*            8 SDWARPIV BIT(1),     /* ON, THE REGISTERS AND PSW AT
*                                      TIME OF ERROR ARE UNAVAILABLE */
*            8 SDWAMCIV BIT(1),     /* ON, MACHINE CHECK ERROR     0150
*                                      INFORMATION IS UNAVAILABLE.   */
*            8 * BIT(1),            /* RESERVED                      */
*          6 SDWAFMID CHAR(2),      /* ASID OF MEMORY IN WHICH ERROR
*                                      OCCURRED =0, IF MEMORY IS   0150
*                                      CURRENT NOT=0, IF OTHER MEMORY
*                                      IS CURRENT. FOR FRRS- IF THE
*                                      VALUE IS NON ZERO THE FRR IS
*                                      RECEIVING CONTROL IN THE    0150
*                                      MASTER SCHEDULER ADDRESS SPACE
*                                      AND CANNOT ADDRESS THE PRIVATE
*                                      AREA OF THE FAILING ADDRESS 0150
*                                      SPACE. FOR ESTA- IF THE VALUE
*                                      IS NON ZERO ENTRY IS DUE TO 0150
*                                      CROSS MEMORY ABTERM.          */
*          6 SDWAIOFS CHAR(1),      /* THIS IS THE CURRENT I/O     0150
*                                      STATUS.(THE I/O PROCESSING  0150
*                                      REQUESTED BY THE FIRST (E)STA
*                                      EXIT IS THE ONLY REQUEST    0150
*                                      HONORED )                     */
*            8 SDWAIOQR BIT(1),     /* ON,I/O FOR FAILING PROGRAM HAS
*                                      BEEN QUIESCED AND IS        0150
*                                      RESTOREABLE                   */
*            8 SDWAIOHT BIT(1),     /* ON,I/O FOR FAILING PROGRAM IS
*                                      HALTED AND IS NOT RESTOREABLE */
*            8 SDWANOIO BIT(1),     /* ON,FAILING PROGRAM HAS NO I/O
*                                      OUTSTANDING                   */
*            8 SDWANIOP BIT(1),     /* ON,USER REQUESTED NO I/O    0150
*                                      PROCESSING                    */
*            8 * BIT(4),            /* RESERVED                      */
*          6 * CHAR(1),             /* RESERVED                      */
*          6 SDWARTYA PTR(31),      /* ADDRESS OF RETRY ROUTINE      */
*          6 SDWARECA PTR(31),      /* ADDRESS OF VARIABLE RECORDING
*                                      AREA WITHIN SDWA              */
*          6 SDWACPUA CHAR(4) BDY(WORD),/* ADDRESS OF CPU HOLDING  0150
*                                      RESOURCE WHICH CAUSES VALID 0150
*                                      SPIN ON CURRENT CPU-USED WITH
*                                      RESTART KEY ERROR TYPE.IF THIS
*                                      FIELD IS VALIDLY FILLED IN BY
*                                      AN FRR THE FRRS MAINLINE    0150
*                                      PROGRAM WILL BE RESUMED AT THE
*                                      NEXT SEQUENTIAL INSTRUCTION.
*                                      NOT VALID FOR ESTAE EXITS.    */
*           7 * CHAR(2),            /* RESERVED                      */
*           7 SDWALCPU PTR(15) BDY(HWORD),/* LOGICAL ADDRESS OF CPU
*                                      HOLDING RESOURCE              */
*          6 SDWAPARQ CHAR(4),      /* FLAGS SET BY RECOVERY ROUTINE
*                                      TO REQUEST FUR- THEIR       0150
*                                      PROCESSING ACTION             */
*           7 SDWARCDE CHAR(1),     /* RETURN CODE FROM RECOVERY   0150
*                                      ROUTINE TO INDICATE RETRY OR
*                                      TERMINATION ACTIONS : 0,    0150
*                                      CONTINUE WITH TERMINATION THIS
*                                      INDICATION IMPLIES PERCOLATION
*                                      4, RETRY 16, PREVENT FURTHER
*                                      (E)STAI PROCESSING            */
*           7 SDWAACF2 CHAR(1),     /* FLAGS TO INDICATE ADDITIO- NAL
*                                      PROCESSING REQUESTS           */
*            8 SDWARCRD BIT(1),     /* ON,RECORDING REQUESTED        */
*            8 * BIT(1),            /* RESERVED                      */
*            8 SDWASPIN BIT(1),     /* ON,PROGRAM INTERRUPTED VIA THE
*                                      RESTART KEY WAS IN A VALID  0150
*                                      SPIN(SET BY THE SETRP MACRO 0150
*                                      WHEN CPU ADDRESS IS SPECIFIED
*                                      ALONG WITH CPU ADDRESS IN   0150
*                                      SDWACPUA FIELD TO ALLOW     0150
*                                      RESTART OF ALTERNATE CPU)     */
*            8 * BIT(1),            /* RESERVED                      */
*            8 SDWAUPRG BIT(1),     /* ON,UPDATED REGISTERS STARTING
*                                      WITH SDWASR00 ARE TO BE USED
*                                      FOR RETRY                     */
*            8 SDWAFREE BIT(1),     /* ON,SDWA/RTCA TO BE FREED PRIOR
*                                      TO RETRY ONLY VALID FOR ESTA
*                                      EXITS                         */
*            8 * BIT(2),            /* RESERVED                      */
*           7 SDWAACF3 CHAR(1),     /* FLAGS INDICATING WHAT GLOBAL
*                                      LOCKS ARE TO BE FREED (KEY 0
*                                      SUPERVISOR ONLY.) ONLY VALID
*                                      FOR FRRS                      */
*            8 * BIT(3),            /* RESERVED                      */
*            8 SDWADISP BIT(1),     /* ON THE DISPATCHER LOCK        */
*            8 SDWAASMP BIT(1),     /* ON, THE ASMPAT LOCK           */
*            8 SDWASALL BIT(1),     /* ON, THE SALLOC LOCK           */
*            8 SDWAIPRG BIT(1),     /* ON, THE IOSYNCH LOCK          */
*            8 SDWAICAT BIT(1),     /* ON,THE IOSCAT LOCK            */
*           7 SDWAACF4 CHAR(1),     /* ADDITIONAL LOCKS TO BE FREED  */
*            8 SDWAIUCB BIT(1),     /* ON,THE IOSUCB LOCK            */
*            8 SDWAILCH BIT(1),     /* ON, THE IOSLCH LOCK           */
*            8 SDWATNCB BIT(1),     /* ON,THE NCB LOCK               */
*            8 SDWATDNB BIT(1),     /* ON,THE DNCB LOCK              */
*            8 SDWATADB BIT(1),     /* ON,THE ACBDEBS LOCK           */
*            8 SDWAOPTM BIT(1),     /* ON,THE SYSTEM RESOURCE      0150
*                                      MGR(SRM) LOCK                 */
*            8 SDWACMS BIT(1),      /* ON,THE CMS LOCK               */
*            8 SDWAFLLK BIT(1),     /* ON,THE LOCAL LOCK             */
*          6 SDWALKWA CHAR(36) BDY(WORD),/* LOCK AREA                */
*           7 SDWALKWS CHAR(32) BDY(WORD),/* LOCKWORDS REQUIRED TO 0150
*                                      FREE THE GLOBAL LOCKS ONLY  0150
*                                      USED FOR FRRS                 */
*            8 SDWAICLW PTR(31),    /* LOCKWORD FOR THE IOSCAT LOCK  */
*            8 SDWAIULW PTR(31),    /* LOCKWORD FOR THE IOSUCB LOCK  */
*            8 SDWAILLW PTR(31),    /* LOCKWORD FOR THE IOSLCH LOCK  */
*            8 SDWAIPLW PTR(31),    /* LOCKWORD FOR THE IOSYNCH LOCK */
*            8 SDWAAPLW PTR(31),    /* LOCKWORD FOR THE ASMPAT LOCK  */
*            8 SDWATNLW PTR(31),    /* LOCKWORD FOR THE NCB LOCK     */
*            8 SDWATDLW PTR(31),    /* LOCKWORD FOR THE DNCB LOCK    */
*            8 SDWATALW PTR(31),    /* LOCKWORD FOR THE ACBDEBS LOCK */
*           7 * PTR(31),            /* RESERVED                      */
*          6 SDWARECP CHAR(24),     /* RECORDING PARAMETERS (MODULE
*                                      ,CSECT,AND RECOVERY ROUTINE 0150
*                                      NAME-RESPECTIVELY)            */
*           7 SDWAMODN CHAR(8),     /* THE MODULE NAME INVOLVED IN 0150
*                                      THE ERROR (SUPPLIED BY THE  0150
*                                      RECOVERY ROUTINE)             */
*           7 SDWACSCT CHAR(8),     /* THE CSECT NAME INVOLVED IN THE
*                                      ERROR(SUPPLIED BY THE RECOVERY
*                                      ROUTINE)                      */
*           7 SDWAREXN CHAR(8),     /* THE RECOVERY ROUTINE NAME   0150
*                                      HANDLING THE ERROR            */
*          6 SDWADPLA PTR(31),      /* POINTER TO DUMP PARAMETER LIST
*                                      RESIDING IN SDWA.             */
*          6 SDWASNPA CHAR(8),      /* SNAP PARAMETER LIST FLAGS     */
*           7 SDWADUMP CHAR(4),     /* DUMP CHARACTERISTICS          */
*            8 SDWADPID CHAR(1),    /* ID OF DUMP REQUESTED          */
*            8 SDWADPFS CHAR(1),    /* DUMP FLAGS                    */
*             9 SDWADPT BIT(1),     /* ALWAYS OFF,INDICATES SNAP DUMP
*                                      REQUEST                       */
*             9 SDWADLST BIT(1),    /* ALWAYS ON, INDICATES OS/VS2 0150
*                                      REL. 2 DUMP PARAMETER LIST  0150
*                                      SUPPLIED. USED BY RTM TO    0150
*                                      INDICATE DUMP OPTIONS ARE   0150
*                                      AVAILABLE IN THE SDWA         */
*             9 * BIT(4),           /* RESERVED.                     */
*             9 SDWASLST BIT(1),    /* ON,STORAGE LIST SUPPLIED FOR
*                                      DUMP                          */
*             9 * BIT(1),           /* RESERVED                      */
*            8 * CHAR(2),           /* RESERVED                      */
*           7 SDWADDAT CHAR(4),     /* SDATA/PDATA OPTIONS           */
*            8 SDWASDAT CHAR(1),    /* SDATA OPTIONS                 */
*             9 SDWANUC BIT(1),     /* DISPLAY NUCLEUS               */
*             9 SDWASQA BIT(1),     /* DISPLAY SQA                   */
*             9 SDWALSQA BIT(1),    /* DISPLAY LSQA                  */
*             9 SDWASWA BIT(1),     /* DISPLAY SWA                   */
*             9 SDWAGTF BIT(1),     /* DISPLAY GTF INCORE TRACE TABLE*/
*             9 SDWACBS BIT(1),     /* FORMAT AND DISPLAY CONTROL  0150
*                                      BLOCKS                        */
*             9 SDWAQQS BIT(1),     /* FORMAT AND DISPLAY QCBS/ QELS */
*             9 * BIT(1),           /* RESERVED                      */
*            8 * CHAR(1),           /* RESERVED                      */
*            8 SDWAPDAT CHAR(1),    /* PDATA OPTIONS                 */
*             9 SDWADSAS BIT(1),    /* DISPLAY SAVE AREAS            */
*             9 SDWADSAH BIT(1),    /* DISPLAY SAVE AREA HEADER      */
*             9 SDWADREG BIT(1),    /* DISPLAY REGISTERS             */
*             9 SDWATLPA BIT(1),    /* DISPLAY LPA MODULES OF TASK   */
*             9 SDWATJPA BIT(1),    /* DISPLAY JPA MODULES OF TASK   */
*             9 SDWADPSW BIT(1),    /* DISPLAY PSW                   */
*             9 SDWAUSPL BIT(1),    /* DISPLAY USER SUBPOOLS         */
*             9 * BIT(1),           /* RESERVED                      */
*            8 * CHAR(1),           /* RESERVED                      */
*          6 SDWADPSA CHAR(36) BDY(WORD),/* DUMP RANGES AREA         */
*           7 SDWADPSL CHAR(32) BDY(WORD),/* DUMP STORAGE LISTS(MAX 4
*                                      RANGES AVAILABLE)             */
*            8 SDWAFRM1 PTR(31),    /* BEGINNING ADDRESS FOR STORAGE
*                                      RANGE 1                       */
*            8 SDWATO1 PTR(31),     /* ENDING ADDRESS FOR STORAGE  0150
*                                      RANGE 1                       */
*            8 SDWAFRM2 PTR(31),    /* BEGINNING ADDRESS FOR STORAGE
*                                      RANGE 2                       */
*            8 SDWATO2 PTR(31),     /* ENDING ADDRESS FOR STORAGE  0150
*                                      RANGE 2                       */
*            8 SDWAFRM3 PTR(31),    /* BEGINNING ADDRESS FOR STORAGE
*                                      RANGE 3                       */
*            8 SDWATO3 PTR(31),     /* ENDING ADDRESS FOR STORAGE  0150
*                                      RANGE 3                       */
*            8 SDWAFRM4 PTR(31),    /* BEGINNING ADDRESS FOR STORAGE
*                                      RANGE 4                       */
*            8 SDWATO4 PTR(31),     /* ENDING ADDRESS FOR STORAGE  0150
*                                      RANGE 4                       */
*           7 * PTR(31),            /* RESERVED                      */
*          6 SDWARCPL CHAR(28) BDY(WORD),/* RESERVED FOR RTM USE     */
*          6 SDWACOMP PTR(31),      /* THIS WORD IS PROVIDED FOR   0150
*                                      COMMUNICATION OF ADDITIONAL 0150
*                                      RECOVERY DATA ON A PER      0150
*                                      COMPONENT BASIS (FOR OS/VS2 0150
*                                      RELEASE 2 THIS FIELD IS ONLY
*                                      USED BY DATA MANAGER).        */
*          6 * PTR(31),             /* RESERVED                      */
*          6 SDWARA CHAR(112),      /* VARIABLE RECORDING AREA     0150
*                                      PREFIXED BY TWO BYTE LENGTH 0150
*                                      FIELD OF AREA AND A TWO BYTE
*                                      FIELD WITH LENGTH OF USER   0150
*                                      SUPPLIED INFORMATION          */
*           7 SDWAVRAL CHAR(2),     /* LENGTH OF VARIABLE RECORD- ING
*                                      AREA                          */
*           7 SDWADPVA CHAR(1),     /* DEFINES DUMPING OF DATA IN  0150
*                                      VARIABLE AREA.                */
*            8 SDWAHEX BIT(1),      /* DATA TO BE DUMPED BY EREP IN
*                                      HEX.                          */
*            8 SDWAEBC BIT(1),      /* DATA TO BE DUMPED BY EREP   0150
*                                      EBCDIC.                       */
*            8 * BIT(6),            /* RESERVED                      */
*           7 SDWAURAL CHAR(1),     /* LENGTH OF USER SUPPLIED     0150
*                                      INFORMATION                   */
*           7 SDWAVRA CHAR(108),    /* VARIABLE RECORDING AREA       */
*          6 * CHAR(0) BDY(DWORD);  /* ROUND UP TO DOUBLE WORD       */
*/* THESE CONSTANTS MAP RETURN CODES FROM AN EXIT IN FIELD           */
*/* SDWARCDE                                                         */
*                                                                  0151
*   DECLARE                                                        0151
*     SDWACWT CONSTANT(0),          /* CONTINUE WITH TERMINATION.  0151
*                                      THIS INDICATION IMPLIES     0151
*                                      PERCOLATION                   */
*     SDWARETY CONSTANT(4),         /* RETRY USING RETRY ADDRESS IN
*                                      SDWARTYA FIELD                */
*     SDWAPSTI CONSTANT(16);        /* PREVENT FURTHER (E)STAI     0151
*                                      PROCESSING                    */
*                                                                  0152
*/*  MACMEAN FRRS MEANS FUNCTIONAL RECOVERY ROUTINE STACK            */
*/*  MACCOMP Y-1 SC1C5/PZD81                                         */
*/*  MACSTAT Y-1 72137/DCR20412                                      */
*                                                                  0152
*   DECLARE                                                        0152
*     1 FRRS BASED(FRRSPTR),                                       0152
*      2 FRRSHEAD CHAR(16) BDY(WORD),/* THE HEADER OF THE FRR STACK  */
*       3 FRRSEMP PTR(31),          /* ADDRESS WHICH INDICATES AN  0152
*                                      EMPTY STACK                   */
*       3 FRRSLAST PTR(31),         /* ADDRESS OF LAST ENTRY IN STACK*/
*       3 FRRSELEN FIXED(31),       /* LENGTH OF EACH ENTRY IN THE 0152
*                                      STACK                         */
*       3 FRRSCURR PTR(31),         /* ADDRESS OF CURRENT FRR ENTRY
*                                      IN THE STACK                  */
*      2 FRRSRTMW CHAR(68) BDY(WORD),/* THE RTM1 WORK AREA PORTION OF
*                                      THE FRR STACK                 */
*      2 FRRSENTS CHAR(512);        /* THE FRR ENTRIES IN THE STACK
*                                                            @ZM02352*/
*   DECLARE                                                        0153
*     1 FRRSENTR BASED(FRREPTR),    /* THE MAPPING OF A FRR ENTRY    */
*      2 FRRSFRRA PTR(31),          /* THE ADDRESS OF THE FRR        */
*      2 FRRSFLGS CHAR(4),          /* FLAGS USED BY RTM DURING FRR
*                                      PROCESSING                    */
*       3 FRRSFLG1 CHAR(1),         /* RECURSION USED BY RTM         */
*        4 FRRSRCUR BIT(1),         /* RECURSION FLAG USED WHEN    0153
*                                      GIVING CONTROL TO FRR AND WHEN
*                                      RECEIVING CONTROL BACK FROM 0153
*                                      FRR                           */
*        4 FRRSNEST BIT(1),         /* FLAG INDICATING A NESTED FRR
*                                      ENTRY                         */
*        4 * BIT(6),                /* RESERVED                      */
*       3 * CHAR(3),                /* RESERVED                      */
*      2 FRRSPARM CHAR(24);         /* PARAMETER AREA PASSED TO FRR  */
*   DCL                                                            0154
*     FRRSESZE FIXED(31) CONSTANT(32);/* LENGTH OF EACH FRR ENTRY    */
*   DCL                                                            0155
*     FRRSFENT FIXED(31) CONSTANT(84);/* DISPLACEMENT INTO FRR STACK
*                                      OF FIRST FRR ENTRY            */
*   DCL                                                            0156
*     FRRSNENT FIXED(31) CONSTANT(16);/* NUMBER OF FRR ENTRIES IN THE
*                                      STACK                 @ZM02352*/
*   DCL                                                            0157
*     FRRSTLEN FIXED(31) CONSTANT(596);/* TOTAL LENGTH OF NORMAL FRR
*                                      STACK                 @ZM02352*/
*                                                                  0158
*/*   FRRSPTR AND FRREPTR ARE REFERENCED BY IHAFRRS BUT THIS MAPPING IS
*NEVER USED IN THIS MODULE                                           */
*                                                                  0158
*   DCL                                                            0158
*     FRRSPTR PTR(31) BASED;                                       0158
*   DCL                                                            0159
*     FRREPTR PTR(31) BASED;                                       0159
*                                                                  0159
*   /*****************************************************************/
*   /*                                                               */
*   /* REGISTER DECLARES FOR FRR RTN                                 */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0160
*   DCL                                                            0160
*     RTNSAVE PTR(31) REG(10) RESTRICTED;/* RTN ADDR SAVE            */
*   DCL                                                            0161
*     RTNREG PTR(31) REG(14);       /* RTN ADDR REG                  */
*   DCL                                                            0162
*     R14 PTR(31) REG(14);          /* RTN ADDR REG                  */
*   DCL                                                            0163
*     R8FRRWRK FIXED(31) REG(8);                                   0163
*   DCL                                                            0164
*     R10WORK FIXED(31) REG(10);                                   0164
*   DCL                                                            0165
*     R10MOVE FIXED(31) REG(10);                                   0165
*   DCL                                                            0166
*     R11MOVE FIXED(31) REG(11);                                   0166
*   DCL                                                            0167
*     R4MOVE FIXED(31) REG(4);                                     0167
*   DCL                                                            0168
*     R5MOVE FIXED(31) REG(5);                                     0168
*   DCL                                                            0169
*     RTCAPTR PTR(31) REG(1);       /* PTR TO SDWA ON ENTRY TO FRR   */
*   DCL                                                            0170
*     SDWAPTR PTR(31) REG(1) RESTRICTED;/* PTR TO IHASDWA            */
*   DCL                                                            0171
*     REG7 REG(7);                  /* REG USED IN C & S             */
*   DCL                                                            0172
*     R0 PTR(31) REG(0);                                           0172
*                                                                  0172
*   /*****************************************************************/
*   /*                                                               */
*   /* CONSTANTS IN FRR RTN                                          */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0173
*   DCL                                                            0173
*     OFF BIT(1) CONSTANT('0'B);    /* TO TURN BIT OFF               */
*   DCL                                                            0174
*     ON BIT(1) CONSTANT('1'B);     /* TO TURN BIT ON                */
*   DCL                                                            0175
*     PGFLT BIT(16) CONSTANT('0011'X);/* PAGE FAULT CONSTANT         */
*   DCL                                                            0176
*     PROTECT BIT(16) CONSTANT('0004'X);/* FETCH PROTECT CONSTANT    */
*                                                                  0176
*   /*****************************************************************/
*   /*                                                               */
*   /* WORK AREA USED IN COMPARE AND SWAP LOGIC TO TURN OFF CURRENT  */
*   /* ACTIVE FUNCTION BIT                                           */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0177
*   DCL                                                            0177
*     1 WKAREA PTR(31) AUTOMATIC,                                  0177
*      2 * BIT(7),                  /* RESERVED                      */
*      2 WUSR BIT(1),               /* CORRESPONDS TO USR BIT IN   0177
*                                      PCTCATF                       */
*      2 * BIT(23);                 /* RESERVED                      */
*   DCL                                                            0178
*     MCIHPTR LABEL BASED(SDWAGR10);/* RETURN ADDRESS OF AHLMCIH     */
*   DCL                                                            0179
*     MCHKRTY LABEL BASED(SDWANXT1);/* RETURN ON MACHINE CHECK       */
*   DCL                                                            0180
*     1 MCRREGS DEFINED(MCROUTSA),                                 0180
*      2 MCRREG0 CHAR(4),           /* ADDR OF MCQE                  */
*      2 MCRREG1 CHAR(4);           /* ADDR OD RTCA ON FRR HOOK      */
*                                                                  0181
*   /*****************************************************************/
*   /*                                                               */
*   /* SET UP FUNCTIONS FOR FRR RTN                                  */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0181
*   RFY                                                            0181
*     RTNADDR RSTD;                                                0181
*   R9PARM=SDWAPARM;                /* PTR TO USER PARM AREA         */
         L     R9PARM,SDWAPARM(,SDWAPTR)                           0182
*   RTNSAVE=RTNADDR;                /* SAVE RETURN ADDR TO RTM       */
         LR    RTNSAVE,RTNADDR                                     0183
*   RFY                                                            0184
*     RTNADDR UNRSTD;                                              0184
*   RFY                                                            0185
*     R0 RSTD;                                                     0185
*   RFY                                                            0186
*     MCQE BASED(R0);                                              0186
*   RFY                                                            0187
*     MCRWSA BASED(WSACGTF);                                       0187
*   AWSAPTR=MCRMCA;                 /* GET ADDR OF MCAWSA AT ERROR 0188
*                                      FROM MCRWSA                   */
         L     @08,LCCAPTR                                         0188
         L     @08,LCCACPUS(,@08)                                  0188
         L     @08,WSACGTF(,@08)                                   0188
         L     AWSAPTR,MCRMCA(,@08)                                0188
*   RFY                                                            0189
*     MCRWSA BASED(MCAMCR);                                        0189
*   MCAERROR=ON;                    /* FLAG ERROR RECOVERY IN CONTROL*/
         OI    MCAERROR(AWSAPTR),B'00000100'                       0190
*   R0=MCRREG0;                     /* MCQE AT TIME OF ERROR         */
         L     @08,MCAMCR(,AWSAPTR)                                0191
         L     R0,MCRREG0(,@08)                                    0191
*   PCTPTR=MCQEAT;                  /* PCT AT TIME OF ERROR          */
         LR    @08,R0                                              0192
         L     PCTPTR,MCQEAT(,@08)                                 0192
*   DO;                             /* SETRP RECPARM(RECID)          */
*     RESPECIFY                                                    0194
*      (GPR00P,                                                    0194
*       GPR01P,                                                    0194
*       GPR14P,                                                    0194
*       GPR15P) RSTD;                                              0194
*     GPR01P->SDWARCDE=0;           /* SAVE RC VALUE                 */
         MVI   SDWARCDE(GPR01P),X'00'                              0195
*     GPR15P=ADDR(RECID);           /* ACCESS RECORD PARAMETER LIST  */
         LA    GPR15P,RECID                                        0196
*     GPR01P->SDWARECP=GPR15P->I256C(1:24);/* COPY RECORD PARAMETERS */
         MVC   SDWARECP(24,GPR01P),I256C(GPR15P)                   0197
*     RESPECIFY                                                    0198
*      (GPR00P,                                                    0198
*       GPR01P,                                                    0198
*       GPR14P,                                                    0198
*       GPR15P) UNRSTD;                                            0198
*   END;                                                           0199
*   WTOLIST=WTONAMES;               /* SET UP WTO LIST               */
         MVC   WTOLIST(16,AWSAPTR),WTONAMES                        0200
*   IF SDWAMCHK=ON THEN             /* A MACHINE CHECK OCCURRED      */
         TM    SDWAMCHK(SDWAPTR),B'10000000'                       0201
         BNO   @RF00201                                            0201
*     IF SDWAINSF=ON&               /* INSTRUCTION FAILURE           */
*         SDWAREGU=OFF&             /* REGISTERS IN SDWA ARE VALID   */
*         SDWAPSWU=OFF THEN         /* PSW IS VALID TOO              */
         TM    SDWAINSF(SDWAPTR),B'00000100'                       0202
         BNO   @RF00202                                            0202
         TM    SDWAREGU(SDWAPTR),B'01100000'                       0202
         BNZ   @RF00202                                            0202
*       DO;                         /* RETRY MAY BE ATTEMPTED        */
*         DO;                       /* SETRP                       0204
*                                      RETADDR(MCHKRTY)RC(SDWARETY)  */
*           RESPECIFY                                              0205
*            (GPR00P,                                              0205
*             GPR01P,                                              0205
*             GPR14P,                                              0205
*             GPR15P) RSTD;                                        0205
*           GPR01P->SDWARCDE=SDWARETY;/* STORE RC INTO SDWA          */
         MVI   SDWARCDE(GPR01P),X'04'                              0206
*           GPR01P->SDWARTYA=ADDR(MCHKRTY);/* SAVE RETRY ADDRESS     */
         L     @08,SDWANXT1(,SDWAPTR)                              0207
         ST    @08,SDWARTYA(,GPR01P)                               0207
*           RESPECIFY                                              0208
*            (GPR00P,                                              0208
*             GPR01P,                                              0208
*             GPR14P,                                              0208
*             GPR15P) UNRSTD;                                      0208
*         END;                                                     0209
*       END;                                                       0210
*     ELSE                                                         0211
*       DO;                         /* RETRY NOT POSSIBLE            */
         B     @RC00202                                            0211
@RF00202 DS    0H                                                  0212
*         MCQESAV=R0;               /* SAVE R0                       */
         ST    R0,MCQESAV(,AWSAPTR)                                0212
*         SDWASAV=SDWAPTR;          /* SAVE R1                       */
         ST    SDWAPTR,SDWASAV(,AWSAPTR)                           0213
*         R0=ADDR(DMPLIST);         /* PARM TO DUMP                  */
         LA    R0,DMPLIST                                          0214
*         CALL DMPMOD;                                             0215
         L     @15,PCTDMPMD(,PCTPTR)                               0215
         BALR  @14,@15                                             0215
*         WTOUN=R15RC;              /* SET TO BLANKS OR UN           */
         STH   R15RC,WTOUN(,AWSAPTR)                               0216
*         R1PARM=ADDR(WTOLIST);                                    0217
         LA    R1PARM,WTOLIST(,AWSAPTR)                            0217
*         CALL AHLWTO;              /* ISSUE WTO                     */
         L     @15,PCTWTOMD(,PCTPTR)                               0218
         BALR  @14,@15                                             0218
*         R0=MCQESAV;               /* RESTORE R0                    */
         L     R0,MCQESAV(,AWSAPTR)                                0219
*         SDWAPTR=SDWASAV;          /* RESTORE R1                    */
         L     SDWAPTR,SDWASAV(,AWSAPTR)                           0220
*         DO;                       /* SETRP RC(SDWACWT)             */
*           RESPECIFY                                              0222
*            (GPR00P,                                              0222
*             GPR01P,                                              0222
*             GPR14P,                                              0222
*             GPR15P) RSTD;                                        0222
*           GPR01P->SDWARCDE=SDWACWT;/* SAVE RC VALUE                */
         MVI   SDWARCDE(GPR01P),X'00'                              0223
*           RESPECIFY                                              0224
*            (GPR00P,                                              0224
*             GPR01P,                                              0224
*             GPR14P,                                              0224
*             GPR15P) UNRSTD;                                      0224
*         END;                                                     0225
*       END;                                                       0226
*   ELSE                            /* CHECK IF THIS ROUTINE WAS   0227
*                                      PERCOLATED TO                 */
*     IF SDWAPERC=ON THEN           /* YES, PERCOLATED TO            */
         B     @RC00201                                            0227
@RF00201 TM    SDWAPERC(SDWAPTR),B'00010000'                       0227
         BNO   @RF00227                                            0227
*       IF SDWAEAS=ON THEN          /* PREVIOUS FRR WAS SUCCESSFUL   */
         TM    SDWAEAS(SDWAPTR),B'00001000'                        0228
         BNO   @RF00228                                            0228
*         DO;                       /* SO CONTINUE PERCOLATION       */
*           DO;                     /* SETRP RC(SDWACWT)             */
*             RESPECIFY                                            0231
*              (GPR00P,                                            0231
*               GPR01P,                                            0231
*               GPR14P,                                            0231
*               GPR15P) RSTD;                                      0231
*             GPR01P->SDWARCDE=SDWACWT;/* SAVE RC VALUE              */
         MVI   SDWARCDE(GPR01P),X'00'                              0232
*             RESPECIFY                                            0233
*              (GPR00P,                                            0233
*               GPR01P,                                            0233
*               GPR14P,                                            0233
*               GPR15P) UNRSTD;                                    0233
*           END;                                                   0234
*         END;                                                     0235
*       ELSE                                                       0236
*         DO;                       /* PREVIOUS FRR HAD A PROBLEM    */
         B     @RC00228                                            0236
@RF00228 DS    0H                                                  0237
*           DO;                     /* SETRP RC(SDWACWT)             */
*             RESPECIFY                                            0238
*              (GPR00P,                                            0238
*               GPR01P,                                            0238
*               GPR14P,                                            0238
*               GPR15P) RSTD;                                      0238
*             GPR01P->SDWARCDE=SDWACWT;/* SAVE RC VALUE              */
         MVI   SDWARCDE(GPR01P),X'00'                              0239
*             RESPECIFY                                            0240
*              (GPR00P,                                            0240
*               GPR01P,                                            0240
*               GPR14P,                                            0240
*               GPR15P) UNRSTD;                                    0240
*           END;                                                   0241
*           CALL DMPMOD;            /* TAKE A DUMP                   */
         L     @15,PCTDMPMD(,PCTPTR)                               0242
         BALR  @14,@15                                             0242
*         END;                                                     0243
*     ELSE                                                         0244
*       GO TO PFCHK;                /* CONTINUE CHECKS               */
*/*   RETURN TO RTM. SDWA IS SET UP FOR RETURN                       */
*                                                                  0245
*   RTNADDR=SVR14FRR;               /* SET UP RETURN TO RTM          */
@RC00227 DS    0H                                                  0245
@RC00201 L     RTNADDR,SVR14FRR(,R9PARM)                           0245
*   BC(15,RTNADDR);                 /* RETURN                        */
         BCR   15,RTNADDR                                          0246
*   GEN(EJECT);                                                    0247
*                                                                  0247
         EJECT
*   /*****************************************************************/
*   /*                                                               */
*   /* TEST IF THIS ENTRY IS FROM PAGE FAULT                         */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0248
*PFCHK:                                                            0248
*   IF SDWAPCHK=ON THEN                                            0248
PFCHK    TM    SDWAPCHK(SDWAPTR),B'01000000'                       0248
         BNO   @RF00248                                            0248
*     DO;                           /* ENTRY ON PROGRAM CHECK        */
*       IF SDWAINC1=PGFLT THEN                                     0250
         CLC   SDWAINC1(2,SDWAPTR),@CH02122                        0250
         BNE   @RF00250                                            0250
*         DO;                                                      0251
*           USRRC=RCPGFLT;          /* RETURN TO USER CODE OF 20.    */
         L     @08,LCCAPTR                                         0252
         MVC   USRRC(4,@08),@CF00790                               0252
*           GPR01P=SDWAPTR;         /* SET UP REG 1                  */
*           DO;                     /* SETRP                       0254
*                                      RETADDR(AHLTUSR1)RC(SDWARETY) */
*             RESPECIFY                                            0255
*              (GPR00P,                                            0255
*               GPR01P,                                            0255
*               GPR14P,                                            0255
*               GPR15P) RSTD;                                      0255
*             GPR01P->SDWARCDE=SDWARETY;/* STORE RC INTO SDWA        */
         MVI   SDWARCDE(GPR01P),X'04'                              0256
*             GPR01P->SDWARTYA=ADDR(AHLTUSR1);/* SAVE RETRY ADDRESS  */
         LA    @08,AHLTUSR1                                        0257
         ST    @08,SDWARTYA(,GPR01P)                               0257
*             RESPECIFY                                            0258
*              (GPR00P,                                            0258
*               GPR01P,                                            0258
*               GPR14P,                                            0258
*               GPR15P) UNRSTD;                                    0258
*           END;                                                   0259
*           BC(15,RTNSAVE);                                        0260
         BCR   15,RTNSAVE                                          0260
*         END;                                                     0261
*     END;                                                         0262
*                                                                  0262
@RF00250 DS    0H                                                  0263
*   /*****************************************************************/
*   /*                                                               */
*   /* TEST IF THIS ENTRY ON FETCH PROTECT                           */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0263
*   IF SDWAINC1=PROTECT THEN                                       0263
@RF00248 CLC   SDWAINC1(2,SDWAPTR),@CH02124                        0263
         BNE   @RF00263                                            0263
*     DO;                                                          0264
*       IF SDWAGR08=PARMREF THEN                                   0265
         CLC   SDWAGR08(4,SDWAPTR),PARMREF                         0265
         BNE   @RF00265                                            0265
*         USRRC=RCPLIST;            /* RETURN TO USER CODE OF 28.    */
         L     @08,LCCAPTR                                         0266
         MVC   USRRC(4,@08),@CF01701                               0266
*       ELSE                                                       0267
*         USRRC=RCADDR;             /* RETURN TO USER CODE OF 12.    */
*                                                                  0267
         B     @RC00265                                            0267
@RF00265 L     @08,LCCAPTR                                         0267
         MVC   USRRC(4,@08),@CF01576                               0267
*       /*************************************************************/
*       /*                                                           */
*       /* ISSUE SETRP TO RETURN TO EXIT CODE IN AHLTUSR             */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0268
*       DO;                                                        0268
@RC00265 DS    0H                                                  0269
*         GPR01P=SDWAPTR;           /* SET UP REG 1                  */
*         DO;                       /* SETRP RETADDR(AHLTUSR1)RC(4)  */
*           RESPECIFY                                              0271
*            (GPR00P,                                              0271
*             GPR01P,                                              0271
*             GPR14P,                                              0271
*             GPR15P) RSTD;                                        0271
*           GPR01P->SDWARCDE=4;     /* STORE RC INTO SDWA            */
         MVI   SDWARCDE(GPR01P),X'04'                              0272
*           GPR01P->SDWARTYA=ADDR(AHLTUSR1);/* SAVE RETRY ADDRESS    */
         LA    @08,AHLTUSR1                                        0273
         ST    @08,SDWARTYA(,GPR01P)                               0273
*           RESPECIFY                                              0274
*            (GPR00P,                                              0274
*             GPR01P,                                              0274
*             GPR14P,                                              0274
*             GPR15P) UNRSTD;                                      0274
*         END;                                                     0275
*         BC(15,RTNSAVE);           /* RETURN TO RTM                 */
         BCR   15,RTNSAVE                                          0276
*       END;                                                       0277
*     END;                                                         0278
*                                                                  0278
*   /*****************************************************************/
*   /*                                                               */
*   /* TEST FOR UNKNOWN ERRORS IN THE REST OF MODULE                 */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0279
*   IF GTFDEBUG=ON×SDWACLUP=ON      /* NO RETRY DESIRED OR ALLOWED   */
*     THEN                                                         0279
@RF00263 TM    GTFDEBUG(PCTPTR),B'01000000'                        0279
         BO    @RT00279                                            0279
         TM    SDWACLUP(SDWAPTR),B'10000000'                       0279
         BNO   @RF00279                                            0279
@RT00279 DS    0H                                                  0280
*     DO;                                                          0280
*                                                                  0280
*       /*************************************************************/
*       /*                                                           */
*       /* ISSUE SDUMP                                               */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0281
*       MCQESAV=R0;                 /* SAVE R0                       */
         ST    R0,MCQESAV(,AWSAPTR)                                0281
*       SDWASAV=SDWAPTR;            /* SAVE R1                       */
         ST    SDWAPTR,SDWASAV(,AWSAPTR)                           0282
*       R0=ADDR(DMPLIST);           /* PARM TO DUMP                  */
         LA    R0,DMPLIST                                          0283
*       CALL DMPMOD;                                               0284
         L     @15,PCTDMPMD(,PCTPTR)                               0284
         BALR  @14,@15                                             0284
*       WTOUN=R15RC;                /* SET TO BLANKS OR UN           */
         STH   R15RC,WTOUN(,AWSAPTR)                               0285
*       R1PARM=ADDR(WTOLIST);                                      0286
         LA    R1PARM,WTOLIST(,AWSAPTR)                            0286
*       CALL AHLWTO;                /* ISSUE WTO                     */
         L     @15,PCTWTOMD(,PCTPTR)                               0287
         BALR  @14,@15                                             0287
*       R0=MCQESAV;                 /* RESTORE R0                    */
         L     R0,MCQESAV(,AWSAPTR)                                0288
*       SDWAPTR=SDWASAV;            /* RESTORE R1                    */
         L     SDWAPTR,SDWASAV(,AWSAPTR)                           0289
*EXITERM:                                                          0290
*       GEN(SETFRR D,WRKREGS=(7,9));/* REMOVE FRR                    */
EXITERM  SETFRR D,WRKREGS=(7,9)
*       DO;                                                        0291
*         GPR01P=SDWAPTR;           /* SET UP REG 1                  */
*         DO;                       /* SETRP RC(SDWACWT)             */
*           RESPECIFY                                              0294
*            (GPR00P,                                              0294
*             GPR01P,                                              0294
*             GPR14P,                                              0294
*             GPR15P) RSTD;                                        0294
*           GPR01P->SDWARCDE=SDWACWT;/* SAVE RC VALUE                */
         MVI   SDWARCDE(GPR01P),X'00'                              0295
*           RESPECIFY                                              0296
*            (GPR00P,                                              0296
*             GPR01P,                                              0296
*             GPR14P,                                              0296
*             GPR15P) UNRSTD;                                      0296
*         END;                      /* PERCOLATE TO AHLMCIH FRR      */
*         BC(15,RTNSAVE);           /* RETURN TO RTM                 */
         BCR   15,RTNSAVE                                          0298
*       END;                                                       0299
*     END;                                                         0300
*                                                                  0300
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS SECTION PERFORMS ERROR RECOVERY IN NON-DEBUG MODE        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0301
*   RFY                                                            0301
*    (REG7,                                                        0301
*     REG8) RSTD;                                                  0301
@RF00279 DS    0H                                                  0302
*   REG8=PCTCATF;                   /* INITIAL VALUE TO REG8         */
         L     REG8,PCTCATF(,PCTPTR)                               0302
*USRETST:                                                          0303
*   WKAREA=REG8;                    /* PRESENT VALUE                 */
USRETST  ST    REG8,WKAREA                                         0303
*   IF PCTUSR=OFF                   /* ALREADY DISABLED GET OUT      */
*     THEN                                                         0304
         TM    PCTUSR(PCTPTR),B'00000001'                          0304
         BZ    @RT00304                                            0304
*     GOTO USREOUT;                                                0305
*   WUSR=OFF;                       /* TURN OFF USR CURRENT ACTIVE 0306
*                                      FUNCTION                      */
         NI    WUSR,B'11111110'                                    0306
*   REG7=WKAREA;                    /* NEW VALUE CATF TO REG 7       */
         L     REG7,WKAREA                                         0307
*   CS(REG8,REG7,PCTCATF);          /* UPDATE CATF FIELD             */
         CS    REG8,@07,PCTCATF(PCTPTR)                            0308
*   BC(4,USRETST);                  /* REPEAT SEQUENCE IF FAIL       */
         BC    4,USRETST                                           0309
*   RFY                                                            0310
*    (REG7,                                                        0310
*     REG8) UNRSTD;                                                0310
*                                                                  0310
*   /*****************************************************************/
*   /*                                                               */
*   /* TAKE A DUMP                                                   */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0311
*   MCQESAV=R0;                     /* SAVE R0                       */
         ST    R0,MCQESAV(,AWSAPTR)                                0311
*   SDWASAV=SDWAPTR;                /* SAVE R1                       */
         ST    SDWAPTR,SDWASAV(,AWSAPTR)                           0312
*   R0=ADDR(DMPLIST);               /* PARM TO DUMP                  */
         LA    R0,DMPLIST                                          0313
*   CALL DMPMOD;                                                   0314
         L     @15,PCTDMPMD(,PCTPTR)                               0314
         BALR  @14,@15                                             0314
*   WTOUN=R15RC;                    /* SET TO BLANKS OR UN           */
         STH   R15RC,WTOUN(,AWSAPTR)                               0315
*   R1PARM=ADDR(WTOLIST);                                          0316
         LA    R1PARM,WTOLIST(,AWSAPTR)                            0316
*   CALL AHLWTO;                    /* ISSUE WTO                     */
         L     @15,PCTWTOMD(,PCTPTR)                               0317
         BALR  @14,@15                                             0317
*   R0=MCQESAV;                     /* RESTORE R0                    */
*                                                                  0318
         L     R0,MCQESAV(,AWSAPTR)                                0318
*   /*****************************************************************/
*   /*                                                               */
*   /* DISABLE USR EVENT                                             */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0319
*   DO;                             /* SETEVENT NAME('GTF ')MCQE(MCQE
*                                      )EIDAD(MCREID)ACTION(DISABLE)M
*                                      F(E,MCAWTO,COMPLETE)          */
*                                                                  0319
*     /***************************************************************/
*     /*                                                             */
*     /* THE FOLLOWING SECTION OF CODE IS GENERATED BY THE SETEVENT  */
*     /* MACRO. THIS CODE WILL BE EITHER AN INITIALIZED PARAMETER    */
*     /* LIST, OR IF IT IS THE RESULT OF STANDARD OR EXECUTE FORM IT */
*     /* WILL FILL in the list, GENERATE ALL LINKAGES AND CALL THE   */
*     /* PROPER sERVICE, EITHER AHLSETEV OR AHLSETD                  */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0320
*     DCL                                                          0320
*       AHLPPTR REG(1) PTR(31) RSTD;/* PARAMETER LIST ADDRESS        */
*     DCL                                                          0321
*       AHLSETEV ENTRY OPTIONS(EXIT,SEQFLOW) BASED(MCHSETE) VALRG(0);
*                                   /* ENTRY FOR ADD ACTIVAT,FREE    */
*     DCL                                                          0322
*       AHLSETD ENTRY OPTIONS(EXIT,SEQFLOW) BASED(MCHSETD) VALRG(0);
*                                   /* ENTRY FOR DISABLE AND CHANGE  */
*     DCL                                                          0323
*       1 SEPL BASED(AHLPPTR) BDY(WORD),/* DSECT PARAMETER LIST      */
*        2 SEFG PTR(8),             /* ACTION GLAGS                  */
*        2 * PTR(8),                                               0323
*        2 SEEN PTR(8),             /* EID COUNT                     */
*        2 SECN PTR(8),             /* CLASS COUNT                   */
*        2 SENM CHAR(8),            /* APPLICATION NMAE              */
*        2 SEEL PTR(31),            /* ADDRESS OF LIST OF EIDS       */
*        2 SECL PTR(31),            /* ADDRESS OF LIST OF CLASSES    */
*        2 SEMC PTR(31);            /* MCQE ADDRESS                  */
*     AHLPPTR=ADDR(MCAWTO);         /* SET UP PLIST PTR              */
         LA    AHLPPTR,MCAWTO(,AWSAPTR)                            0324
*     SEPL=SEPL&&SEPL;              /* INIT PLIST TO ZERO            */
         XC    SEPL(24,AHLPPTR),SEPL(AHLPPTR)                      0325
*     SEMC=ADDR(MCQE);              /* SET UP MCQE ADDRESS           */
         ST    R0,SEMC(,AHLPPTR)                                   0326
*     SENM='GTF     ';              /* MOVE NAME INTO PLIST          */
         MVC   SENM(8,AHLPPTR),@CC02163                            0327
*     SEFG=32;                      /* MOVE FLAGS INTO PLIST         */
         MVI   SEFG(AHLPPTR),X'20'                                 0328
*     SEEL=ADDR(MCREID);            /* SET TO VALUE SPECIFIED        */
         L     @08,MCAMCR(,AWSAPTR)                                0329
         LA    @08,MCREID(,@08)                                    0329
         ST    @08,SEEL(,AHLPPTR)                                  0329
*     IF SEFG=32×SEFG=8 THEN        /* CHECK FOR DISABLE OR * CHANGE */
         CLI   SEFG(AHLPPTR),32                                    0330
         BE    @RT00330                                            0330
         CLI   SEFG(AHLPPTR),8                                     0330
         BNE   @RF00330                                            0330
@RT00330 DS    0H                                                  0331
*       CALL AHLSETD;               /* YES                           */
         L     @08,CVTPTR                                          0331
         L     @08,CVTGTF(,@08)                                    0331
         L     @15,MCHSETD(,@08)                                   0331
         BALR  @14,@15                                             0331
*     ELSE                          /* NO                            */
*       CALL AHLSETEV;                                             0332
         B     @RC00330                                            0332
@RF00330 L     @08,CVTPTR                                          0332
         L     @08,CVTGTF(,@08)                                    0332
         L     @15,MCHSETE(,@08)                                   0332
         BALR  @14,@15                                             0332
*   END;                                                           0333
@RC00330 DS    0H                                                  0334
*   SDWAPTR=SDWASAV;                /* RESTORE R1                    */
*                                                                  0334
         L     SDWAPTR,SDWASAV(,AWSAPTR)                           0334
*   /*****************************************************************/
*   /*                                                               */
*   /* TEST IF ALL THE FUNCTIONS HAVE BEEN DISABLED IN WHICH CASE    */
*   /* GOTO EXITERM RTN WHICH PERCOLATES TO AHLMCIH FRR              */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0335
*USREOUT:                                                          0335
*   IF PCTCATF=0                    /* ALL FUNCTIONS DISABLED?       */
*     THEN                                                         0335
USREOUT  L     @08,PCTCATF(,PCTPTR)                                0335
         LTR   @08,@08                                             0335
         BZ    @RT00335                                            0335
*     GOTO EXITERM;                 /* RTN WHICH TERMINATES          */
*/*  IF NOT LAST FUNCTION DISABLED JUST RETURN TO AHLMCIH TO       0337
*  CONTINUE GTF PROCESSING                                           */
*                                                                  0337
*   GEN(SETFRR D,WRKREGS=(7,9));                                   0337
         SETFRR D,WRKREGS=(7,9)
*   DO;                                                            0338
*     GPR01P=SDWAPTR;               /* SET UP REG 1                  */
*     DO;                           /* SETRP                       0340
*                                      RETADDR(MCIHPTR)RC(SDWARETY)  */
*       RESPECIFY                                                  0341
*        (GPR00P,                                                  0341
*         GPR01P,                                                  0341
*         GPR14P,                                                  0341
*         GPR15P) RSTD;                                            0341
*       GPR01P->SDWARCDE=SDWARETY;  /* STORE RC INTO SDWA            */
         MVI   SDWARCDE(GPR01P),X'04'                              0342
*       GPR01P->SDWARTYA=ADDR(MCIHPTR);/* SAVE RETRY ADDRESS         */
         L     @08,SDWAGR10(,SDWAPTR)                              0343
         ST    @08,SDWARTYA(,GPR01P)                               0343
*       RESPECIFY                                                  0344
*        (GPR00P,                                                  0344
*         GPR01P,                                                  0344
*         GPR14P,                                                  0344
*         GPR15P) UNRSTD;                                          0344
*     END;                          /* RTM RETURNS TO MCIH           */
*     BC(15,RTNSAVE);               /* RETURN TO RTM                 */
         BCR   15,RTNSAVE                                          0346
*   END;                                                           0347
*   DECLARE                         /* GENERAL PURPOSE REGISTERS     */
*     GPR00P PTR(31) REG(0),                                       0348
*     GPR01P PTR(31) REG(1),                                       0348
*     GPR14P PTR(31) REG(14),                                      0348
*     GPR15P PTR(31) REG(15);                                      0348
*   DECLARE                         /* COMMON VARIABLES              */
*     I256C CHAR(256) BASED,                                       0349
*     I031F FIXED(31) BASED,                                       0349
*     I031P PTR(31) BASED,                                         0349
*     I015F FIXED(15) BASED,                                       0349
*     I015P PTR(15) BASED,                                         0349
*     I008P PTR(8) BASED,                                          0349
*     I001C CHAR(1) BASED;                                         0349
*AHLTEND:                                                          0350
*   END                                                            0350
*                                                                  0350
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (IHASRB  )                                       */
*/*%INCLUDE SYSLIB  (CVT     )                                       */
*/*%INCLUDE SYSLIB  (IHAPSA  )                                       */
*/*%INCLUDE SYSLIB  (IHALCCA )                                       */
*/*%INCLUDE SYSLIB  (IHAWSAVT)                                       */
*/*%INCLUDE SYSLIB  (IHAASCB )                                       */
*/*%INCLUDE SYSLIB  (GTFPCT  )                                       */
*/*%INCLUDE SYSLIB  (MCAWSA  )                                       */
*/*%INCLUDE SYSLIB  (MCRWSA  )                                       */
*/*%INCLUDE SYSLIB  (MCHEAD  )                                       */
*/*%INCLUDE SYSLIB  (MCQE    )                                       */
*/*%INCLUDE SYSLIB  (IHASDWA )                                       */
*/*%INCLUDE SYSLIB  (IHAFRRS )                                       */
*                                                                  0350
*       ;                                                          0350
AHLTEND  DS    0H                                                  0350
@DATA    DS    0H
@CH02122 DC    XL2'0011'
@CH02124 DC    XL2'0004'
@SM02174 MVC   TRCDATA(0,AWSAPTR),USRDATA(@14)
@DATD    DSECT
         DS    0F
AHLTUSR  CSECT
         DS    0F
@CF00052 DC    F'8'
@CF01576 DC    F'12'
@CF00043 DC    F'16'
@CF00091 DC    F'24'
@CF01701 DC    F'28'
@CF00790 DC    F'32'
@CF01706 DC    F'255'
@CF00699 DC    F'256'
@CF01631 DC    XL4'0000FFFF'
@DATD    DSECT
         DS    0D
WKAREA   DS    AL4
         ORG   WKAREA
@NM00099 DS    BL1
WUSR     EQU   WKAREA+0
@NM00100 DS    BL3
         ORG   WKAREA+4
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
AHLTUSR  CSECT
         NOPR  ((@ENDDATD-@DATD)/61*16)
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
         DS    0D
BASE     DC    AL4(AHLTUSR)
PARMREF  DC    XL4'0000FFFF'
@CC01639 DC    C'N/A     '
@CC02163 DC    C'GTF     '
@CB01633 DC    X'0100000000000000'
@CB01636 DC    X'0000000000000000'
RECID    DC    CL24'ahltUSR ahltUSR ahltUSR '
DMPHDR   DS    CL27
         ORG   DMPHDR
@NM00046 DC    AL1(26)
@NM00047 DC    CL26'DUMP OF GTF MODULE AHLTUSR'
         ORG   DMPHDR+27
WTONAMES DC    CL16'USR  USR  TRAC  '
         DS    CL1
DMPLIST  DS    CL12
         ORG   DMPLIST
HDRPTR   DC    AL4(DMPHDR)
USRSTRT  DC    AL4(AHLTUSR)
USREND   DC    AL4(AHLTEND)
         ORG   USREND
EOL      DC    X'80'
         ORG   DMPLIST+12
USRPTCH  DC    100X'00'
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
SRBPTR   EQU   @00
PCTPTR   EQU   @02
AWSAPTR  EQU   @03
MCQEPSAV EQU   @00
R1PARM   EQU   @01
PMLSTPTR EQU   @11
RTNADSV  EQU   @10
RTNADDR  EQU   @14
PLINDREG EQU   @08
ULENGTH  EQU   @05
REG8     EQU   @08
R9PARM   EQU   @09
RCREG    EQU   @15
R15RC    EQU   @15
REG15    EQU   @15
BASEREG  EQU   @12
AHLRECPR EQU   @01
AHLSBREG EQU   @14
AHLRETCD EQU   @15
SDWAPTR  EQU   @01
RTNSAVE  EQU   @10
REG7     EQU   @07
R0       EQU   @00
GPR00P   EQU   @00
GPR01P   EQU   @01
GPR14P   EQU   @14
GPR15P   EQU   @15
AHLPPTR  EQU   @01
RTCAPTR  EQU   @01
RTNREG   EQU   @14
R10MOVE  EQU   @10
R10WORK  EQU   @10
R11MOVE  EQU   @11
R14      EQU   @14
R4MOVE   EQU   @04
R5MOVE   EQU   @05
R8FRRWRK EQU   @08
         ENTRY USRPTCH
CVTPTR   EQU   16
PSA      EQU   0
FLCRNPSW EQU   PSA
FLCROPSW EQU   PSA+8
FLCICCW2 EQU   PSA+16
PSAEEPSW EQU   PSA+132
PSAESPSW EQU   PSA+136
FLCSVILC EQU   PSAESPSW+1
PSAEPPSW EQU   PSA+140
FLCPIILC EQU   PSAEPPSW+1
FLCPICOD EQU   PSAEPPSW+2
PSAPICOD EQU   FLCPICOD+1
FLCTEA   EQU   PSAEPPSW+4
FLCPER   EQU   PSA+152
FLCMCLA  EQU   PSA+168
FLCIOEL  EQU   FLCMCLA+4
FLCIOA   EQU   FLCMCLA+16
FLCFSA   EQU   FLCMCLA+80
PSALCCAV EQU   PSA+528
PSAAOLD  EQU   PSA+548
PSASUPER EQU   PSA+552
PSASUP1  EQU   PSASUPER
PSASUP2  EQU   PSASUPER+1
PSASUP3  EQU   PSASUPER+2
PSASUP4  EQU   PSASUPER+3
PSACLHT  EQU   PSA+640
PSALKSA  EQU   PSA+696
PSAHLHI  EQU   PSA+760
PSADSSFL EQU   PSA+836
PSADSSF1 EQU   PSADSSFL
PSADSSF3 EQU   PSADSSFL+2
PSADSSF4 EQU   PSADSSFL+3
PSARSVT  EQU   PSA+896
SRBSECT  EQU   0
SRB      EQU   SRBSECT
SRBFLC   EQU   SRB+12
CVTMAP   EQU   0
CVTDAR   EQU   CVTMAP+72
CVTFLGS1 EQU   CVTDAR
CVTDCB   EQU   CVTMAP+116
CVTIERLC EQU   CVTMAP+144
CVTOPTA  EQU   CVTMAP+182
CVTOPTB  EQU   CVTMAP+183
CVTGTF   EQU   CVTMAP+236
CVTGTFST EQU   CVTGTF
CVTGTFS  EQU   CVTGTFST
CVTSTATE EQU   CVTGTFST
CVTTMODE EQU   CVTGTFST
CVTFORM  EQU   CVTGTFST
CVTAQAVT EQU   CVTMAP+240
CVTTCMFG EQU   CVTAQAVT
CVTVOLM2 EQU   CVTMAP+244
CVTTATA  EQU   CVTVOLM2
CVTTSKS  EQU   CVTTATA
CVTVOLF2 EQU   CVTTSKS
CVTTAT   EQU   CVTTATA+1
CVTATER  EQU   CVTMAP+248
CVTEXT1  EQU   CVTMAP+252
CVTPURG  EQU   CVTMAP+260
CVTQMSG  EQU   CVTMAP+268
CVTDMSR  EQU   CVTMAP+272
CVTRSV37 EQU   CVTDMSR
CVTDMSRF EQU   CVTRSV37
CVTERPV  EQU   CVTMAP+316
CVTINTLA EQU   CVTMAP+320
CVTAPF   EQU   CVTMAP+324
CVTEXT2  EQU   CVTMAP+328
CVTHJES  EQU   CVTMAP+332
CVTPGSIA EQU   CVTMAP+348
CVTA1F1  EQU   CVTMAP+356
CVTSYSK  EQU   CVTMAP+357
CVTVOLM1 EQU   CVTMAP+380
CVTVOLF1 EQU   CVTVOLM1
CVTATMCT EQU   CVTMAP+388
CVTXTNT1 EQU   0
CVTXTNT2 EQU   0
CVTDSSV  EQU   CVTXTNT2
CVTFLGBT EQU   CVTXTNT2+5
CVTQID   EQU   CVTXTNT2+24
CVTRV400 EQU   CVTXTNT2+52
CVTRV409 EQU   CVTXTNT2+53
CVTATCVT EQU   CVTXTNT2+64
CVTRV429 EQU   CVTXTNT2+84
CVTRV438 EQU   CVTXTNT2+85
CVTRV457 EQU   CVTXTNT2+112
CVTRV466 EQU   CVTXTNT2+113
CVTFIX   EQU   0
CVTRELNO EQU   CVTFIX+252
LCCA     EQU   0
LCCAPGR2 EQU   LCCA+72
LCCAIHRC EQU   LCCA+520
LCCAIHR1 EQU   LCCAIHRC
LCCAIHR2 EQU   LCCAIHRC+1
LCCAIHR3 EQU   LCCAIHRC+2
LCCAIHR4 EQU   LCCAIHRC+3
LCCASPIN EQU   LCCA+524
LCCASPN1 EQU   LCCASPIN
LCCASPN2 EQU   LCCASPIN+1
LCCASPN3 EQU   LCCASPIN+2
LCCASPN4 EQU   LCCASPIN+3
LCCACPUS EQU   LCCA+536
LCCADSF1 EQU   LCCA+540
LCCADSF2 EQU   LCCA+541
LCCASPSA EQU   LCCA+544
LCCACRFL EQU   LCCA+692
LCCACREX EQU   LCCA+693
LCCALKFG EQU   LCCA+694
LCCASRBF EQU   LCCA+720
WSAG     EQU   0
WSAC     EQU   0
WSACGTF  EQU   WSAC+4
ASCB     EQU   0
ASCBFW1  EQU   ASCB+100
ASCBRCTF EQU   ASCBFW1+2
ASCBFLG1 EQU   ASCBFW1+3
ASCBDSP1 EQU   ASCB+114
ASCBFLG2 EQU   ASCB+115
ASCBJBNI EQU   ASCB+172
ASCBJBNS EQU   ASCB+176
GTFPCT   EQU   0
GTFSTAT  EQU   GTFPCT+8
GTFDEBUG EQU   GTFSTAT
GTFOPTS  EQU   GTFPCT+12
GTFOPTS1 EQU   GTFOPTS
GTFOPTS2 EQU   GTFOPTS+1
GTFOPTS3 EQU   GTFOPTS+2
GTFOPTS4 EQU   GTFOPTS+3
OPTTIME  EQU   GTFOPTS4
PCTCATF  EQU   GTFPCT+16
PCTUSR   EQU   PCTCATF
NEXTBLOK EQU   GTFPCT+180
SBLOKRTN EQU   GTFPCT+188
WRTRCOM  EQU   GTFPCT+204
TRMWRIT  EQU   GTFPCT+212
WRTRERR  EQU   GTFPCT+216
GTFSSRB  EQU   GTFPCT+220
QLOCKWRD EQU   GTFPCT+236
QLOCKECB EQU   GTFPCT+240
AUDITFLG EQU   GTFPCT+296
PCTDMPMD EQU   GTFPCT+308
PCTWTOMD EQU   GTFPCT+312
MCAWSA   EQU   0
MCATRAIL EQU   MCAWSA+256
MCATRL1  EQU   MCATRAIL
MCATRL2  EQU   MCATRAIL+1
MCAERROR EQU   MCATRL2
MCATRL3  EQU   MCATRAIL+2
MCATRL4  EQU   MCATRAIL+3
MCATRL5  EQU   MCATRAIL+4
MCATRL6  EQU   MCATRAIL+5
MCATRL7  EQU   MCATRAIL+6
MCATRL8  EQU   MCATRAIL+7
MCAMCR   EQU   MCAWSA+264
MCARECPR EQU   MCAWSA+268
MCAREC   EQU   MCAWSA+284
MCAWORK  EQU   MCAWSA+584
MCRWSA   EQU   0
MCROUTSA EQU   MCRWSA+64
MCRMCA   EQU   MCRWSA+128
MCRWSAF  EQU   MCRWSA+132
MCREID   EQU   MCRWSA+134
MCHEAD   EQU   0
MCHFLGS  EQU   MCHEAD+24
MCHFLG1  EQU   MCHFLGS
MCHSETE  EQU   MCHEAD+28
MCHSETD  EQU   MCHEAD+32
MCQE     EQU   0
MCQEAT   EQU   MCQE+32
MCQEFLGS EQU   MCQE+41
DMPMOD   EQU   0
AHLWTO   EQU   0
PARMLIST EQU   0
USRLNG   EQU   PARMLIST
USRFID   EQU   PARMLIST+2
DATAPTR  EQU   PARMLIST+4
USRDATA  EQU   0
JBNI     EQU   0
JBNS     EQU   0
FRRPARM  EQU   0
SVR14FRR EQU   FRRPARM+12
AHLGREC  EQU   0
AHLGLGTH EQU   AHLGREC
AHLGRES  EQU   AHLGREC+2
AHLGAID  EQU   AHLGREC+4
AHLGFID  EQU   AHLGREC+5
AHLGTST  EQU   AHLGREC+6
AHLGEIDS EQU   AHLGTST
AHLGEIDL EQU   AHLGREC+14
AHLSBLOK EQU   0
SDWA     EQU   0
SDWAPARM EQU   SDWA
SDWAFIOB EQU   SDWA+4
SDWAABCC EQU   SDWAFIOB
SDWACMPF EQU   SDWAABCC
SDWACTL1 EQU   SDWA+8
SDWACMKA EQU   SDWACTL1
SDWAMWPA EQU   SDWACTL1+1
SDWAPMKA EQU   SDWACTL1+4
SDWACTL2 EQU   SDWA+16
SDWACMKP EQU   SDWACTL2
SDWAMWPP EQU   SDWACTL2+1
SDWAPMKP EQU   SDWACTL2+4
SDWAGRSV EQU   SDWA+24
SDWAGR08 EQU   SDWAGRSV+32
SDWAGR10 EQU   SDWAGRSV+40
SDWANAME EQU   SDWA+88
SDWAEC1  EQU   SDWA+104
SDWAEMK1 EQU   SDWAEC1
SDWAMWP1 EQU   SDWAEC1+1
SDWAINT1 EQU   SDWAEC1+2
SDWANXT1 EQU   SDWAEC1+4
SDWAAEC1 EQU   SDWA+112
SDWAILC1 EQU   SDWAAEC1+1
SDWAINC1 EQU   SDWAAEC1+2
SDWAICD1 EQU   SDWAINC1+1
SDWAEC2  EQU   SDWA+120
SDWAEMK2 EQU   SDWAEC2
SDWAMWP2 EQU   SDWAEC2+1
SDWAINT2 EQU   SDWAEC2+2
SDWANXT2 EQU   SDWAEC2+4
SDWAAEC2 EQU   SDWA+128
SDWAILC2 EQU   SDWAAEC2+1
SDWAINC2 EQU   SDWAAEC2+2
SDWAICD2 EQU   SDWAINC2+1
SDWASRSV EQU   SDWA+136
SDWAIDNT EQU   SDWA+200
SDWAMCH  EQU   SDWA+204
SDWASTCK EQU   SDWAMCH
SDWAMCHI EQU   SDWAMCH+8
SDWAMCHS EQU   SDWAMCHI
SDWAMCHD EQU   SDWAMCHI+1
SDWAREGU EQU   SDWAMCHD
SDWAPSWU EQU   SDWAMCHD
SDWAINSF EQU   SDWAMCHD
SDWARSR1 EQU   SDWAMCH+12
SDWARSR2 EQU   SDWAMCH+13
SDWAFLGS EQU   SDWA+232
SDWAERRA EQU   SDWAFLGS
SDWAMCHK EQU   SDWAERRA
SDWAPCHK EQU   SDWAERRA
SDWAERRB EQU   SDWAFLGS+1
SDWAERRC EQU   SDWAFLGS+2
SDWAPERC EQU   SDWAERRC
SDWAEAS  EQU   SDWAERRC
SDWAERRD EQU   SDWAFLGS+3
SDWACLUP EQU   SDWAERRD
SDWAIOFS EQU   SDWA+238
SDWARTYA EQU   SDWA+240
SDWACPUA EQU   SDWA+248
SDWAPARQ EQU   SDWA+252
SDWARCDE EQU   SDWAPARQ
SDWAACF2 EQU   SDWAPARQ+1
SDWAACF3 EQU   SDWAPARQ+2
SDWAACF4 EQU   SDWAPARQ+3
SDWALKWA EQU   SDWA+256
SDWALKWS EQU   SDWALKWA
SDWARECP EQU   SDWA+292
SDWASNPA EQU   SDWA+320
SDWADUMP EQU   SDWASNPA
SDWADPFS EQU   SDWADUMP+1
SDWADDAT EQU   SDWASNPA+4
SDWASDAT EQU   SDWADDAT
SDWAPDAT EQU   SDWADDAT+2
SDWADPSA EQU   SDWA+328
SDWADPSL EQU   SDWADPSA
SDWARA   EQU   SDWA+400
SDWADPVA EQU   SDWARA+2
FRRS     EQU   0
FRRSHEAD EQU   FRRS
FRRSPTR  EQU   0
FRRSENTR EQU   0
FRRSFLGS EQU   FRRSENTR+4
FRRSFLG1 EQU   FRRSFLGS
FRREPTR  EQU   0
MCIHPTR  EQU   0
MCHKRTY  EQU   0
I256C    EQU   0
AHLSETEV EQU   0
AHLSETD  EQU   0
SEPL     EQU   0
SEFG     EQU   SEPL
SENM     EQU   SEPL+4
SEEL     EQU   SEPL+12
SEMC     EQU   SEPL+20
I001C    EQU   0
I008P    EQU   0
I015F    EQU   0
I015P    EQU   0
I031F    EQU   0
I031P    EQU   0
CVTS01   EQU   CVTPGSIA
CVTLPDIA EQU   CVTS01+12
CVTDIRST EQU   CVTLPDIA
CVTSLIDA EQU   CVTS01+24
CVTCTLFG EQU   CVTS01+50
CVTSPSA  EQU   CVTS01+336
CVTRV210 EQU   CVTS01+424
CVTRV219 EQU   CVTS01+425
CVTRV228 EQU   CVTS01+426
CVTRV237 EQU   CVTS01+427
CVTMFRTR EQU   CVTS01+452
CVTRV262 EQU   CVTS01+468
CVTRV271 EQU   CVTS01+469
CVTRV280 EQU   CVTS01+470
CVTRV289 EQU   CVTS01+471
CVTGSDA  EQU   CVTS01+600
PSARSVTE EQU   PSARSVT
LCCAPTR  EQU   PSALCCAV
ASCBPTR  EQU   PSAAOLD
USRRC    EQU   LCCAPGR2+60
JI       EQU   JBNI
JS       EQU   JBNS
WORKAREA EQU   MCAWORK
MCQESAV  EQU   WORKAREA
SDWASAV  EQU   WORKAREA+4
MCAWTO   EQU   WORKAREA+8
WTOLIST  EQU   MCAWTO
WTOUN    EQU   WTOLIST+14
TRCENTRY EQU   MCAREC
TRCASCB  EQU   TRCENTRY
TRCJOBN  EQU   TRCENTRY+4
TRCDATA  EQU   TRCENTRY+12
MCRREGS  EQU   MCROUTSA
MCRREG0  EQU   MCRREGS
FLC      EQU   PSA
*                                      START UNREFERENCED COMPONENTS
MCRREG1  EQU   MCRREGS+4
WTOMODE  EQU   WTOLIST+8
WTOFUNC  EQU   WTOLIST+4
WTOMOD   EQU   WTOLIST
PSARSAV  EQU   PSARSVTE+60
PSARSTK  EQU   PSARSVTE+56
PSAESAV3 EQU   PSARSVTE+52
PSAESTK3 EQU   PSARSVTE+48
PSAESAV2 EQU   PSARSVTE+44
PSAESTK2 EQU   PSARSVTE+40
PSAESAV1 EQU   PSARSVTE+36
PSAESTK1 EQU   PSARSVTE+32
PSAPSAV  EQU   PSARSVTE+28
PSAPSTK  EQU   PSARSVTE+24
PSAMSAV  EQU   PSARSVTE+20
PSAMSTK  EQU   PSARSVTE+16
PSASSAV  EQU   PSARSVTE+12
PSASSTK  EQU   PSARSVTE+8
PSANSTK  EQU   PSARSVTE+4
PSACSTK  EQU   PSARSVTE
CVTRV628 EQU   CVTS01+728
CVTRV627 EQU   CVTS01+724
CVTRV626 EQU   CVTS01+720
CVTRV625 EQU   CVTS01+716
CVTRV624 EQU   CVTS01+712
CVTRV623 EQU   CVTS01+708
CVTRV622 EQU   CVTS01+704
CVTRV621 EQU   CVTS01+700
CVTIHASU EQU   CVTS01+696
CVTSUSP  EQU   CVTS01+692
CVTT6SVC EQU   CVTS01+688
CVTCDAL  EQU   CVTS01+684
CVTTCTL  EQU   CVTS01+680
CVTRSUME EQU   CVTS01+676
CVTJTERM EQU   CVTS01+672
CVTASMRM EQU   CVTS01+668
CVTTCASP EQU   CVTS01+664
CVT0PT03 EQU   CVTS01+660
CVT0PT0E EQU   CVTS01+656
CVTRV609 EQU   CVTS01+652
CVTCGK   EQU   CVTS01+648
CVTRAC   EQU   CVTS01+644
CVTRV606 EQU   CVTS01+640
CVTRV605 EQU   CVTS01+636
CVTRV604 EQU   CVTS01+632
CVTEFF02 EQU   CVTS01+628
CVTCBBR  EQU   CVTS01+624
CVTSSCR  EQU   CVTS01+620
CVTEVENT EQU   CVTS01+616
CVTCRCA  EQU   CVTS01+612
CVTTPIO  EQU   CVTS01+608
CVTADV   EQU   CVTS01+604
CVTGSDAB EQU   CVTGSDA
CVTQV3   EQU   CVTS01+596
CVTQV2   EQU   CVTS01+592
CVTQV1   EQU   CVTS01+588
CVTRPT   EQU   CVTS01+584
CVTSSRB  EQU   CVTS01+580
CVTCSDRL EQU   CVTS01+576
CVTEXP1  EQU   CVTS01+572
CVTRMPMT EQU   CVTS01+568
CVTRMPTT EQU   CVTS01+564
CVTVPSA  EQU   CVTS01+560
CVTVSTOP EQU   CVTS01+556
CVTGTFR8 EQU   CVTS01+552
CVTQUIT  EQU   CVTS01+548
CVTVACR  EQU   CVTS01+544
CVTWTCB  EQU   CVTS01+540
CVTSTPRS EQU   CVTS01+536
CVT0PT02 EQU   CVTS01+532
CVTDARCM EQU   CVTS01+528
CVTIRECM EQU   CVTS01+524
CVTJRECM EQU   CVTS01+520
CVTVEMS0 EQU   CVTS01+516
CVTSPFRR EQU   CVTS01+512
CVTRLSTG EQU   CVTS01+508
CVT0TC0A EQU   CVTS01+504
CVTGMBR  EQU   CVTS01+500
CVTLFRM  EQU   CVTS01+496
CVTRMBR  EQU   CVTS01+492
CVTVIOP  EQU   CVTS01+488
CVTRV307 EQU   CVTS01+486
CVTRV306 EQU   CVTS01+484
CVTRV305 EQU   CVTS01+482
CVTRV304 EQU   CVTS01+480
CVTRV303 EQU   CVTS01+478
CVTRV302 EQU   CVTS01+476
CVTTRCA  EQU   CVTS01+472
CVTRV297 EQU   CVTRV289
CVTRV296 EQU   CVTRV289
CVTRV295 EQU   CVTRV289
CVTRV294 EQU   CVTRV289
CVTRV293 EQU   CVTRV289
CVTRV292 EQU   CVTRV289
CVTRV291 EQU   CVTRV289
CVTRV290 EQU   CVTRV289
CVTRV288 EQU   CVTRV280
CVTRV287 EQU   CVTRV280
CVTRV286 EQU   CVTRV280
CVTRV285 EQU   CVTRV280
CVTRV284 EQU   CVTRV280
CVTRV283 EQU   CVTRV280
CVTRV282 EQU   CVTRV280
CVTRV281 EQU   CVTRV280
CVTRV279 EQU   CVTRV271
CVTRV278 EQU   CVTRV271
CVTRV277 EQU   CVTRV271
CVTRV276 EQU   CVTRV271
CVTRV275 EQU   CVTRV271
CVTRV274 EQU   CVTRV271
CVTRV273 EQU   CVTRV271
CVTRV272 EQU   CVTRV271
CVTRV270 EQU   CVTRV262
CVTRV269 EQU   CVTRV262
CVTRV268 EQU   CVTRV262
CVTRV267 EQU   CVTRV262
CVTRV266 EQU   CVTRV262
CVTRV265 EQU   CVTRV262
CVTRV264 EQU   CVTRV262
CVTRV263 EQU   CVTRV262
CVTVFP   EQU   CVTS01+464
CVTVSI   EQU   CVTS01+460
CVTVPSIB EQU   CVTS01+456
CVTMFACT EQU   CVTMFRTR
CVTMFCTL EQU   CVTS01+448
CVTPVBP  EQU   CVTS01+444
CVTPWI   EQU   CVTS01+440
CVTRV254 EQU   CVTS01+438
CVTRV253 EQU   CVTS01+436
CVTRV252 EQU   CVTS01+434
CVTRV251 EQU   CVTS01+433
CVTRV250 EQU   CVTS01+432
CVTRV249 EQU   CVTS01+431
CVTRV248 EQU   CVTS01+430
CVTRV247 EQU   CVTS01+429
CVTRV246 EQU   CVTS01+428
CVTRV245 EQU   CVTRV237
CVTRV244 EQU   CVTRV237
CVTRV243 EQU   CVTRV237
CVTRV242 EQU   CVTRV237
CVTRV241 EQU   CVTRV237
CVTRV240 EQU   CVTRV237
CVTRV239 EQU   CVTRV237
CVTRV238 EQU   CVTRV237
CVTRV236 EQU   CVTRV228
CVTRV235 EQU   CVTRV228
CVTRV234 EQU   CVTRV228
CVTRV233 EQU   CVTRV228
CVTRV232 EQU   CVTRV228
CVTRV231 EQU   CVTRV228
CVTRV230 EQU   CVTRV228
CVTRV229 EQU   CVTRV228
CVTRV227 EQU   CVTRV219
CVTRV226 EQU   CVTRV219
CVTRV225 EQU   CVTRV219
CVTRV224 EQU   CVTRV219
CVTRV223 EQU   CVTRV219
CVTRV222 EQU   CVTRV219
CVTRV221 EQU   CVTRV219
CVTRV220 EQU   CVTRV219
CVTRV218 EQU   CVTRV210
CVTRV217 EQU   CVTRV210
CVTRV216 EQU   CVTRV210
CVTRV215 EQU   CVTRV210
CVTRV214 EQU   CVTRV210
CVTRV213 EQU   CVTRV210
CVTRV212 EQU   CVTRV210
CVTRV211 EQU   CVTRV210
CVTLCCAT EQU   CVTS01+420
CVTPCCAT EQU   CVTS01+416
CVTIPCRP EQU   CVTS01+412
CVTIPCRI EQU   CVTS01+408
CVTIPCDS EQU   CVTS01+404
CVTAIDVT EQU   CVTS01+400
CVTSSAP  EQU   CVTS01+396
CVTEHCIR EQU   CVTS01+392
CVTEHDEF EQU   CVTS01+388
CVTDAIR  EQU   CVTS01+384
CVTPERFM EQU   CVTS01+380
CVT044R2 EQU   CVTS01+376
CVTFETCH EQU   CVTS01+372
CVTRSTWD EQU   CVTS01+368
CVTSPOST EQU   CVTS01+364
CVTIOBP  EQU   CVTS01+360
CVTASMVT EQU   CVTS01+356
CVTRECRQ EQU   CVTS01+352
CVTWSAC  EQU   CVTS01+348
CVTRV149 EQU   CVTS01+344
CVTWSAL  EQU   CVTS01+340
CVTGLMN  EQU   CVTS01+332
CVTVEAC0 EQU   CVTS01+328
CVT062R1 EQU   CVTS01+324
CVTRPOST EQU   CVTS01+320
CVTDQIQE EQU   CVTS01+316
CVTCSD   EQU   CVTS01+312
CVTLKRMA EQU   CVTS01+308
CVTRSPIE EQU   CVTS01+304
CVTRENQ  EQU   CVTS01+300
CVTLQCB  EQU   CVTS01+296
CVTFQCB  EQU   CVTS01+292
CVTQCS01 EQU   CVTS01+288
CVTAPFT  EQU   CVTS01+284
CVTPARRL EQU   CVTS01+280
CVTVWAIT EQU   CVTS01+276
CVTGSPL  EQU   CVTS01+272
CVTLSMQ  EQU   CVTS01+268
CVTGSMQ  EQU   CVTS01+264
CVTEXPRO EQU   CVTS01+260
CVTOPCTP EQU   CVTS01+256
CVTSIC   EQU   CVTS01+252
CVTTPIOS EQU   CVTS01+248
CVTRTMS  EQU   CVTS01+244
CVTSDBF  EQU   CVTS01+240
CVTSCBP  EQU   CVTS01+236
CVTSDMP  EQU   CVTS01+232
CVTSV60  EQU   CVTS01+228
CVTRTMCT EQU   CVTS01+224
CVTASCBL EQU   CVTS01+220
CVTASCBH EQU   CVTS01+216
CVTGDA   EQU   CVTS01+212
CVTASVT  EQU   CVTS01+208
CVTVVMDI EQU   CVTS01+204
CVTAQTOP EQU   CVTS01+200
CVTIOSCS EQU   CVTS01+196
CVTSDRM  EQU   CVTS01+192
CVTOPTE  EQU   CVTS01+188
CVTSTXU  EQU   CVTS01+184
CVTQUIS  EQU   CVTS01+180
CVTPARS  EQU   CVTS01+176
CVTS1EE  EQU   CVTS01+172
CVTFRAS  EQU   CVTS01+168
CVTQSAS  EQU   CVTS01+164
CVTCRAS  EQU   CVTS01+160
CVTCRMN  EQU   CVTS01+156
CVTDELCP EQU   CVTS01+152
CVTFRECL EQU   CVTS01+148
CVTGETCL EQU   CVTS01+144
CVTBLDCP EQU   CVTS01+140
CVTAUTHL EQU   CVTS01+136
CVTSCAN  EQU   CVTS01+132
CVTRV144 EQU   CVTS01+130
CVTMAXMP EQU   CVTS01+128
CVTSTCK  EQU   CVTS01+124
CVTRV139 EQU   CVTS01+123
CVTDSSAC EQU   CVTS01+122
CVTRV513 EQU   CVTS01+121
CVTIOSPL EQU   CVTS01+120
CVTPTGT  EQU   CVTS01+116
CVTCSPIE EQU   CVTS01+112
CVTSMFEX EQU   CVTS01+108
CVTOLT0A EQU   CVTS01+104
CVTSRBRT EQU   CVTS01+100
CVTPUTL  EQU   CVTS01+96
CVTASCRL EQU   CVTS01+92
CVTASCRF EQU   CVTS01+88
CVTRV326 EQU   CVTS01+84
CVTRV325 EQU   CVTS01+80
CVTRV324 EQU   CVTS01+76
CVT0VL01 EQU   CVTS01+72
CVTSHRVM EQU   CVTS01+68
CVTRV332 EQU   CVTS01+64
CVTTAS   EQU   CVTS01+60
CVTRSCN  EQU   CVTS01+56
CVTTRAC2 EQU   CVTS01+54
CVTTRACE EQU   CVTS01+52
CVTAPG   EQU   CVTS01+51
CVTSDTRC EQU   CVTCTLFG
CVTGTRCE EQU   CVTCTLFG
CVTNOMP  EQU   CVTCTLFG
CVTRSV79 EQU   CVTCTLFG
CVTDSTAT EQU   CVTCTLFG
CVTRSV78 EQU   CVTCTLFG
CVTRV333 EQU   CVTCTLFG
CVTRV323 EQU   CVTCTLFG
CVTSPVLK EQU   CVTS01+49
CVTRSV77 EQU   CVTS01+48
CVTRV331 EQU   CVTS01+44
CVTRV330 EQU   CVTS01+40
CVTRV329 EQU   CVTS01+36
CVTRV328 EQU   CVTS01+32
CVTRV322 EQU   CVTS01+28
CVTSLID  EQU   CVTSLIDA+1
CVTSYLK  EQU   CVTSLIDA
CVTRV321 EQU   CVTS01+20
CVTRV320 EQU   CVTS01+16
CVTLPDIR EQU   CVTLPDIA+1
CVTRSV69 EQU   CVTDIRST
CVTRSV68 EQU   CVTDIRST
CVTRSV67 EQU   CVTDIRST
CVTRSV66 EQU   CVTDIRST
CVTRSV65 EQU   CVTDIRST
CVTRSV64 EQU   CVTDIRST
CVTRSV63 EQU   CVTDIRST
CVTDICOM EQU   CVTDIRST
CVTPVTP  EQU   CVTS01+8
CVTLPDSR EQU   CVTS01+4
CVTGETL  EQU   CVTS01
SECL     EQU   SEPL+16
SECN     EQU   SEPL+3
SEEN     EQU   SEPL+2
@NM00101 EQU   SEPL+1
FRRSPARM EQU   FRRSENTR+8
@NM00098 EQU   FRRSFLGS+1
@NM00097 EQU   FRRSFLG1
FRRSNEST EQU   FRRSFLG1
FRRSRCUR EQU   FRRSFLG1
FRRSFRRA EQU   FRRSENTR
FRRSENTS EQU   FRRS+84
FRRSRTMW EQU   FRRS+16
FRRSCURR EQU   FRRSHEAD+12
FRRSELEN EQU   FRRSHEAD+8
FRRSLAST EQU   FRRSHEAD+4
FRRSEMP  EQU   FRRSHEAD
@NM00096 EQU   SDWA+512
SDWAVRA  EQU   SDWARA+4
SDWAURAL EQU   SDWARA+3
@NM00095 EQU   SDWADPVA
SDWAEBC  EQU   SDWADPVA
SDWAHEX  EQU   SDWADPVA
SDWAVRAL EQU   SDWARA
@NM00094 EQU   SDWA+396
SDWACOMP EQU   SDWA+392
SDWARCPL EQU   SDWA+364
@NM00093 EQU   SDWADPSA+32
SDWATO4  EQU   SDWADPSL+28
SDWAFRM4 EQU   SDWADPSL+24
SDWATO3  EQU   SDWADPSL+20
SDWAFRM3 EQU   SDWADPSL+16
SDWATO2  EQU   SDWADPSL+12
SDWAFRM2 EQU   SDWADPSL+8
SDWATO1  EQU   SDWADPSL+4
SDWAFRM1 EQU   SDWADPSL
@NM00092 EQU   SDWADDAT+3
@NM00091 EQU   SDWAPDAT
SDWAUSPL EQU   SDWAPDAT
SDWADPSW EQU   SDWAPDAT
SDWATJPA EQU   SDWAPDAT
SDWATLPA EQU   SDWAPDAT
SDWADREG EQU   SDWAPDAT
SDWADSAH EQU   SDWAPDAT
SDWADSAS EQU   SDWAPDAT
@NM00090 EQU   SDWADDAT+1
@NM00089 EQU   SDWASDAT
SDWAQQS  EQU   SDWASDAT
SDWACBS  EQU   SDWASDAT
SDWAGTF  EQU   SDWASDAT
SDWASWA  EQU   SDWASDAT
SDWALSQA EQU   SDWASDAT
SDWASQA  EQU   SDWASDAT
SDWANUC  EQU   SDWASDAT
@NM00088 EQU   SDWADUMP+2
@NM00087 EQU   SDWADPFS
SDWASLST EQU   SDWADPFS
@NM00086 EQU   SDWADPFS
SDWADLST EQU   SDWADPFS
SDWADPT  EQU   SDWADPFS
SDWADPID EQU   SDWADUMP
SDWADPLA EQU   SDWA+316
SDWAREXN EQU   SDWARECP+16
SDWACSCT EQU   SDWARECP+8
SDWAMODN EQU   SDWARECP
@NM00085 EQU   SDWALKWA+32
SDWATALW EQU   SDWALKWS+28
SDWATDLW EQU   SDWALKWS+24
SDWATNLW EQU   SDWALKWS+20
SDWAAPLW EQU   SDWALKWS+16
SDWAIPLW EQU   SDWALKWS+12
SDWAILLW EQU   SDWALKWS+8
SDWAIULW EQU   SDWALKWS+4
SDWAICLW EQU   SDWALKWS
SDWAFLLK EQU   SDWAACF4
SDWACMS  EQU   SDWAACF4
SDWAOPTM EQU   SDWAACF4
SDWATADB EQU   SDWAACF4
SDWATDNB EQU   SDWAACF4
SDWATNCB EQU   SDWAACF4
SDWAILCH EQU   SDWAACF4
SDWAIUCB EQU   SDWAACF4
SDWAICAT EQU   SDWAACF3
SDWAIPRG EQU   SDWAACF3
SDWASALL EQU   SDWAACF3
SDWAASMP EQU   SDWAACF3
SDWADISP EQU   SDWAACF3
@NM00084 EQU   SDWAACF3
@NM00083 EQU   SDWAACF2
SDWAFREE EQU   SDWAACF2
SDWAUPRG EQU   SDWAACF2
@NM00082 EQU   SDWAACF2
SDWASPIN EQU   SDWAACF2
@NM00081 EQU   SDWAACF2
SDWARCRD EQU   SDWAACF2
SDWALCPU EQU   SDWACPUA+2
@NM00080 EQU   SDWACPUA
SDWARECA EQU   SDWA+244
@NM00079 EQU   SDWA+239
@NM00078 EQU   SDWAIOFS
SDWANIOP EQU   SDWAIOFS
SDWANOIO EQU   SDWAIOFS
SDWAIOHT EQU   SDWAIOFS
SDWAIOQR EQU   SDWAIOFS
SDWAFMID EQU   SDWA+236
@NM00077 EQU   SDWAERRD
SDWAMCIV EQU   SDWAERRD
SDWARPIV EQU   SDWAERRD
SDWAMABD EQU   SDWAERRD
SDWACTS  EQU   SDWAERRD
SDWASTAE EQU   SDWAERRD
SDWANRBE EQU   SDWAERRD
@NM00076 EQU   SDWAERRC
SDWAIRB  EQU   SDWAERRC
SDWASTAI EQU   SDWAERRC
SDWASTAF EQU   SDWAERRC
SDWASRBM EQU   SDWAERRB
SDWALDIS EQU   SDWAERRB
SDWAENRB EQU   SDWAERRB
SDWATYP1 EQU   SDWAERRB
@NM00075 EQU   SDWAERRB
SDWAPGIO EQU   SDWAERRA
SDWATEXC EQU   SDWAERRA
SDWASVCE EQU   SDWAERRA
SDWAABTM EQU   SDWAERRA
SDWASVCD EQU   SDWAERRA
SDWARKEY EQU   SDWAERRA
SDWATIME EQU   SDWAMCH+20
SDWARFSA EQU   SDWAMCH+16
@NM00074 EQU   SDWAMCH+14
SDWAVEQR EQU   SDWARSR2
SDWAPGFX EQU   SDWARSR2
SDWAFLSQ EQU   SDWARSR2
SDWAFSQA EQU   SDWARSR2
SDWANUCL EQU   SDWARSR2
SDWASPER EQU   SDWARSR2
SDWAINTC EQU   SDWARSR2
SDWAOFLN EQU   SDWARSR2
SDWACHNG EQU   SDWARSR1
SDWAMSER EQU   SDWARSR1
@NM00073 EQU   SDWARSR1
SDWACPID EQU   SDWAMCH+10
SDWATERR EQU   SDWAMCHD
SDWAFPRX EQU   SDWAMCHD
SDWAACR  EQU   SDWAMCHD
SDWASCK  EQU   SDWAMCHD
SDWASKYF EQU   SDWAMCHD
@NM00072 EQU   SDWAMCHS
SDWARSRF EQU   SDWAMCHS
SDWARSRC EQU   SDWAMCHS
SDWAINVP EQU   SDWAMCHS
SDWATSVL EQU   SDWAMCHS
SDWARCDF EQU   SDWAMCHS
SDWASRVL EQU   SDWAMCHS
SDWASCKE EQU   SDWASTCK+4
SDWASCKB EQU   SDWASTCK
SDWALNTH EQU   SDWAIDNT+1
SDWASPID EQU   SDWAIDNT
SDWASR15 EQU   SDWASRSV+60
SDWASR14 EQU   SDWASRSV+56
SDWASR13 EQU   SDWASRSV+52
SDWASR12 EQU   SDWASRSV+48
SDWASR11 EQU   SDWASRSV+44
SDWASR10 EQU   SDWASRSV+40
SDWASR09 EQU   SDWASRSV+36
SDWASR08 EQU   SDWASRSV+32
SDWASR07 EQU   SDWASRSV+28
SDWASR06 EQU   SDWASRSV+24
SDWASR05 EQU   SDWASRSV+20
SDWASR04 EQU   SDWASRSV+16
SDWASR03 EQU   SDWASRSV+12
SDWASR02 EQU   SDWASRSV+8
SDWASR01 EQU   SDWASRSV+4
SDWASR00 EQU   SDWASRSV
SDWATRN2 EQU   SDWAAEC2+4
SDWAIPC2 EQU   SDWAICD2
SDWAIMC2 EQU   SDWAICD2
SDWAIPR2 EQU   SDWAICD2
@NM00071 EQU   SDWAINC2
@NM00070 EQU   SDWAILC2
SDWAIL2  EQU   SDWAILC2
@NM00069 EQU   SDWAILC2
@NM00068 EQU   SDWAAEC2
SDWAADD2 EQU   SDWANXT2+1
@NM00067 EQU   SDWANXT2
@NM00066 EQU   SDWAEC2+3
SDWASGN2 EQU   SDWAINT2
SDWAEXP2 EQU   SDWAINT2
SDWADEC2 EQU   SDWAINT2
SDWAFPO2 EQU   SDWAINT2
SDWACC2  EQU   SDWAINT2
@NM00065 EQU   SDWAINT2
SDWAPGM2 EQU   SDWAMWP2
SDWAWAT2 EQU   SDWAMWP2
SDWAMCK2 EQU   SDWAMWP2
SDWAECT2 EQU   SDWAMWP2
SDWAKEY2 EQU   SDWAMWP2
SDWAEXT2 EQU   SDWAEMK2
SDWAIO2  EQU   SDWAEMK2
SDWATRM2 EQU   SDWAEMK2
@NM00064 EQU   SDWAEMK2
SDWAPER2 EQU   SDWAEMK2
@NM00063 EQU   SDWAEMK2
SDWATRAN EQU   SDWAAEC1+4
SDWAIPC1 EQU   SDWAICD1
SDWAIMC1 EQU   SDWAICD1
SDWAIPR1 EQU   SDWAICD1
@NM00062 EQU   SDWAINC1
@NM00061 EQU   SDWAILC1
SDWAIL1  EQU   SDWAILC1
@NM00060 EQU   SDWAILC1
@NM00059 EQU   SDWAAEC1
SDWAADD1 EQU   SDWANXT1+1
@NM00058 EQU   SDWANXT1
@NM00057 EQU   SDWAEC1+3
SDWASGN1 EQU   SDWAINT1
SDWAEXP1 EQU   SDWAINT1
SDWADEC1 EQU   SDWAINT1
SDWAFPO1 EQU   SDWAINT1
SDWACC1  EQU   SDWAINT1
@NM00056 EQU   SDWAINT1
SDWAPGM1 EQU   SDWAMWP1
SDWAWAT1 EQU   SDWAMWP1
SDWAMCK1 EQU   SDWAMWP1
SDWAECT1 EQU   SDWAMWP1
SDWAKEY1 EQU   SDWAMWP1
SDWAEXT1 EQU   SDWAEMK1
SDWAIO1  EQU   SDWAEMK1
SDWATRM1 EQU   SDWAEMK1
@NM00055 EQU   SDWAEMK1
SDWAPER1 EQU   SDWAEMK1
@NM00054 EQU   SDWAEMK1
SDWAIOBR EQU   SDWA+100
SDWAEPA  EQU   SDWA+96
@NM00053 EQU   SDWANAME+4
SDWARBAD EQU   SDWANAME
SDWAGR15 EQU   SDWAGRSV+60
SDWAGR14 EQU   SDWAGRSV+56
SDWAGR13 EQU   SDWAGRSV+52
SDWAGR12 EQU   SDWAGRSV+48
SDWAGR11 EQU   SDWAGRSV+44
SDWAGR09 EQU   SDWAGRSV+36
SDWAGR07 EQU   SDWAGRSV+28
SDWAGR06 EQU   SDWAGRSV+24
SDWAGR05 EQU   SDWAGRSV+20
SDWAGR04 EQU   SDWAGRSV+16
SDWAGR03 EQU   SDWAGRSV+12
SDWAGR02 EQU   SDWAGRSV+8
SDWAGR01 EQU   SDWAGRSV+4
SDWAGR00 EQU   SDWAGRSV
SDWANXTP EQU   SDWACTL2+5
SDWASGP  EQU   SDWAPMKP
SDWAEUP  EQU   SDWAPMKP
SDWADOP  EQU   SDWAPMKP
SDWAFPP  EQU   SDWAPMKP
SDWACCP  EQU   SDWAPMKP
SDWAILP  EQU   SDWAPMKP
SDWAINTP EQU   SDWACTL2+2
SDWASPVP EQU   SDWAMWPP
SDWAWATP EQU   SDWAMWPP
SDWAMCKP EQU   SDWAMWPP
@NM00052 EQU   SDWAMWPP
SDWAKEYP EQU   SDWAMWPP
SDWAEXTP EQU   SDWACMKP
SDWAIOP  EQU   SDWACMKP
SDWANXTA EQU   SDWACTL1+5
SDWASGA  EQU   SDWAPMKA
SDWAEUA  EQU   SDWAPMKA
SDWADOA  EQU   SDWAPMKA
SDWAFPA  EQU   SDWAPMKA
SDWACCA  EQU   SDWAPMKA
SDWAILA  EQU   SDWAPMKA
SDWAINTA EQU   SDWACTL1+2
SDWASPVA EQU   SDWAMWPA
SDWAWATA EQU   SDWAMWPA
SDWAMCKA EQU   SDWAMWPA
@NM00051 EQU   SDWAMWPA
SDWAKEYA EQU   SDWAMWPA
SDWAEXTA EQU   SDWACMKA
SDWAIOA  EQU   SDWACMKA
SDWACMPC EQU   SDWAABCC+1
@NM00050 EQU   SDWACMPF
SDWASTCC EQU   SDWACMPF
@NM00049 EQU   SDWACMPF
SDWASTEP EQU   SDWACMPF
SDWAREQ  EQU   SDWACMPF
SVR14CAL EQU   FRRPARM+16
SVR14NRM EQU   FRRPARM+8
TRAILSAV EQU   FRRPARM+4
@NM00048 EQU   FRRPARM+2
RECURCTR EQU   FRRPARM
MCQESRB  EQU   MCQE+44
@NM00045 EQU   MCQE+42
@NM00044 EQU   MCQEFLGS
MCQEACT  EQU   MCQEFLGS
MCQESCHE EQU   MCQE+40
MCQETECB EQU   MCQE+36
MCQEMCCL EQU   MCQE+28
MCQEMCEE EQU   MCQE+24
MCQEMCQE EQU   MCQE+20
MCQEASCB EQU   MCQE+16
MCQENAME EQU   MCQE+8
MCQEIDEN EQU   MCQE
MCHEADTR EQU   MCHEAD+48
MCHEADRD EQU   MCHEAD+44
MCHFRRAD EQU   MCHEAD+40
MCHMCER  EQU   MCHEAD+36
@NM00043 EQU   MCHFLGS+1
@NM00042 EQU   MCHFLG1
MCHTERM  EQU   MCHFLG1
MCHACT   EQU   MCHFLG1
MCHDIS   EQU   MCHEAD+20
MCHCTL   EQU   MCHEAD+16
MCHCNT   EQU   MCHEAD+12
MCHCUR   EQU   MCHEAD+8
MCHIDEN  EQU   MCHEAD
MCRRESV  EQU   MCRWSAF
MCRBRENT EQU   MCRWSAF
MCERROR  EQU   MCRWSAF
MCINFGBR EQU   MCRWSAF
MCINCTL  EQU   MCRWSAF
MCRMCIH  EQU   MCRWSA
MCASWORK EQU   MCAWSA+644
@NM00041 EQU   MCATRL8
@NM00040 EQU   MCATRL8
@NM00039 EQU   MCATRL8
@NM00038 EQU   MCATRL8
MCAFRECT EQU   MCATRL7
MCAFRECC EQU   MCATRL7
MCAFRESP EQU   MCATRL7
MCAFREXJ EQU   MCATRL7
MCAFRSBR EQU   MCATRL6
MCAFRDMJ EQU   MCATRL6
MCAFRDPC EQU   MCATRL6
MCAFRPIC EQU   MCATRL6
MCAFRPIJ EQU   MCATRL6
@NM00037 EQU   MCATRL5
MCADREGS EQU   MCATRL5
MCAFRRB  EQU   MCATRL5
MCAFRRJ  EQU   MCATRL5
MCAFRRA  EQU   MCATRL5
MCAFRERT EQU   MCATRL5
MCAFREPC EQU   MCATRL5
MCAMJOBN EQU   MCATRL4
MCAMSDWA EQU   MCATRL4
MCAMBTU  EQU   MCATRL4
MCAMIOSB EQU   MCATRL4
MCAMTCB  EQU   MCATRL4
MCAMASCB EQU   MCATRL4
MCAMUCB  EQU   MCATRL4
MCAMEXT  EQU   MCATRL4
MCAFRFRT EQU   MCATRL3
MCAFRFA  EQU   MCATRL3
MCAFRSJ  EQU   MCATRL3
MCAFRSA  EQU   MCATRL3
MCAPIF   EQU   MCATRL3
MCASIOF  EQU   MCATRL3
MCAIOF   EQU   MCATRL3
MCASVCF  EQU   MCATRL3
MCATDIR  EQU   MCATRL2
MCALSR   EQU   MCATRL2
MCAUIO   EQU   MCATRL2
MCASTA   EQU   MCATRL2
MCAFRR   EQU   MCATRL2
MCASRM   EQU   MCATRL2
MCARNIO  EQU   MCATRL2
MCAUSR   EQU   MCATRL1
MCAPI    EQU   MCATRL1
MCASRB   EQU   MCATRL1
MCADSP   EQU   MCATRL1
MCASIO   EQU   MCATRL1
MCAIO    EQU   MCATRL1
MCAEXT   EQU   MCATRL1
MCASVC   EQU   MCATRL1
MCAMSG   EQU   MCAWSA+192
MCASETEV EQU   MCAWSA+128
MCAFWORK EQU   MCAWSA+112
MCASFEOB EQU   MCAWSA+56
MCASBLOK EQU   MCAWSA
TRANSMAX EQU   GTFPCT+304
GTFASCB  EQU   GTFPCT+300
@NM00036 EQU   AUDITFLG+3
AFSLEBLD EQU   AUDITFLG+3
WSERFG06 EQU   AUDITFLG+3
WSERFG05 EQU   AUDITFLG+3
WSERFG04 EQU   AUDITFLG+3
WSERFG03 EQU   AUDITFLG+3
WSERFG02 EQU   AUDITFLG+2
WSERFLAG EQU   AUDITFLG+2
TERMFLAG EQU   AUDITFLG+2
AFXWRIT  EQU   AUDITFLG+2
AFQLWAIT EQU   AUDITFLG+2
AFSLEGET EQU   AUDITFLG+2
AFBUFGET EQU   AUDITFLG+2
AFFEOB   EQU   AUDITFLG+2
AFBLKFIX EQU   AUDITFLG+1
AFEQFIX  EQU   AUDITFLG+1
AFPGRLSE EQU   AUDITFLG+1
AFWRAP   EQU   AUDITFLG+1
AFBUFOFF EQU   AUDITFLG+1
AFLDFX   EQU   AUDITFLG+1
AFCLOSE  EQU   AUDITFLG+1
AFOPEN   EQU   AUDITFLG+1
AFGMBLOK EQU   AUDITFLG
AFGMSRB  EQU   AUDITFLG
AFWAIT   EQU   AUDITFLG
AFTERM   EQU   AUDITFLG
AFINIT   EQU   AUDITFLG
AFWWRIT  EQU   AUDITFLG
AFCWRIT  EQU   AUDITFLG
AFIWRIT  EQU   AUDITFLG
EQSHORT  EQU   GTFPCT+292
SLEMAX   EQU   GTFPCT+288
SLECNT   EQU   GTFPCT+284
RQPURGE  EQU   GTFPCT+280
RQTOTAL  EQU   GTFPCT+276
WRTDLST  EQU   GTFPCT+272
NUMOFBUF EQU   GTFPCT+268
SBUFDISA EQU   GTFPCT+264
SLESUSED EQU   GTFPCT+260
EQMIN    EQU   GTFPCT+256
EQLENGTH EQU   GTFPCT+252
WQMAX    EQU   GTFPCT+248
WQLENGTH EQU   GTFPCT+244
QLECBP   EQU   QLOCKECB
@NM00035 EQU   QLOCKECB
@NM00034 EQU   QLOCKWRD+3
SCHEDBUF EQU   QLOCKWRD+2
POSTWRIT EQU   QLOCKWRD+1
QLOCK    EQU   QLOCKWRD
WRITERDD EQU   GTFPCT+228
GTFLOSTR EQU   GTFPCT+224
SRBAVAIL EQU   GTFSSRB
WRTRERRP EQU   WRTRERR
@NM00033 EQU   WRTRERR
TRMWRITP EQU   TRMWRIT
@NM00032 EQU   TRMWRIT
GTFCMECB EQU   GTFPCT+208
WRTRCOMP EQU   WRTRCOM
@NM00031 EQU   WRTRCOM
TRANSCNT EQU   GTFPCT+200
AHLRDPLQ EQU   GTFPCT+196
SFEOBRTN EQU   GTFPCT+192
CURRBLOK EQU   GTFPCT+184
GBCDS    EQU   NEXTBLOK
WSMODEND EQU   GTFPCT+176
WSMODBEG EQU   GTFPCT+172
BCBPAGE  EQU   GTFPCT+156
SLEPAGE  EQU   GTFPCT+152
SAVECNT  EQU   GTFPCT+148
SLQHEAD  EQU   GTFPCT+144
HQLENGTH EQU   GTFPCT+140
QTAIL    EQU   GTFPCT+136
HQHEAD   EQU   GTFPCT+132
WQHEAD   EQU   GTFPCT+128
RQHEAD   EQU   GTFPCT+124
EQHEAD   EQU   GTFPCT+120
WPOSTSRB EQU   GTFPCT+116
WTSKTCBA EQU   GTFPCT+112
WRTRTCBA EQU   GTFPCT+108
TRMWTASK EQU   GTFPCT+104
WTSKATTH EQU   GTFPCT+100
WTSKINIT EQU   GTFPCT+96
WTASKECB EQU   GTFPCT+92
WMTABPTR EQU   GTFPCT+88
ATTCHECB EQU   GTFPCT+84
AHLECB   EQU   GTFPCT+80
STOPECBA EQU   GTFPCT+76
ECBADRLT EQU   GTFPCT+72
FIXLEN   EQU   GTFPCT+68
FIXPTR   EQU   GTFPCT+64
INITPTR  EQU   GTFPCT+60
MCQEPTR  EQU   GTFPCT+56
GTFEIDL  EQU   GTFPCT+52
GTFPIBL  EQU   GTFPCT+48
GTFPIFT  EQU   GTFPCT+44
GTFSVCBL EQU   GTFPCT+40
GTFSVCFT EQU   GTFPCT+36
GTFIOBL  EQU   GTFPCT+32
GTFIOFT  EQU   GTFPCT+28
GTFSIOBL EQU   GTFPCT+24
GTFSIOFT EQU   GTFPCT+20
@NM00030 EQU   PCTCATF+1
PCTPIF   EQU   PCTCATF+1
PCTSIOF  EQU   PCTCATF+1
PCTIOF   EQU   PCTCATF+1
PCTSVCF  EQU   PCTCATF+1
PCTRR    EQU   PCTCATF+1
PCTSRM   EQU   PCTCATF+1
PCTRNIO  EQU   PCTCATF+1
PCTPI    EQU   PCTCATF
@NM00029 EQU   PCTCATF
PCTDSP   EQU   PCTCATF
PCTSIO   EQU   PCTCATF
PCTIO    EQU   PCTCATF
PCTEXT   EQU   PCTCATF
PCTSVC   EQU   PCTCATF
OPTRES3  EQU   GTFOPTS4
OPTIOSIO EQU   GTFOPTS3
OPTRES2  EQU   GTFOPTS3
OPTRR    EQU   GTFOPTS3
OPTSRM   EQU   GTFOPTS3
OPTRNIO  EQU   GTFOPTS3
OPTEXT   EQU   GTFOPTS3
OPTIOP   EQU   GTFOPTS2
OPTIO    EQU   GTFOPTS2
OPTPIP   EQU   GTFOPTS2
OPTPI    EQU   GTFOPTS2
OPTSIOP  EQU   GTFOPTS2
OPTSIO   EQU   GTFOPTS2
OPTSVCP  EQU   GTFOPTS2
OPTSVC   EQU   GTFOPTS2
OPTPCI   EQU   GTFOPTS1
OPTRES1  EQU   GTFOPTS1
OPTDSP   EQU   GTFOPTS1
OPTTRC   EQU   GTFOPTS1
OPTUSR   EQU   GTFOPTS1
OPTSYS   EQU   GTFOPTS1
OPTSYSP  EQU   GTFOPTS1
OPTSYSM  EQU   GTFOPTS1
GTFRESV  EQU   GTFSTAT
GTFMODE  EQU   GTFSTAT
GTFPCTID EQU   GTFPCT
ASCBEND  EQU   ASCB+208
ASCBSRBT EQU   ASCB+200
ASCBSWTL EQU   ASCB+196
ASCBRS14 EQU   ASCB+195
ASCBSMCT EQU   ASCB+194
ASCBRS12 EQU   ASCB+192
ASCBPCTT EQU   ASCB+188
ASCBVGTT EQU   ASCB+184
ASCBLGCB EQU   ASCB+180
ASCBMCC  EQU   ASCB+168
ASCBRTWA EQU   ASCB+164
ASCBIQEA EQU   ASCB+160
ASCBXMPQ EQU   ASCB+156
ASCBRS01 EQU   ASCB+154
ASCBFMCT EQU   ASCB+152
ASCBOUXB EQU   ASCB+148
ASCBOUCB EQU   ASCB+144
ASCBMECB EQU   ASCB+140
ASCBQECB EQU   ASCB+136
ASCBCMSB EQU   ASCB+132
ASCBCMSF EQU   ASCB+128
ASCBTCBS EQU   ASCB+124
ASCBNVSC EQU   ASCB+122
ASCBVSC  EQU   ASCB+120
ASCBSRBS EQU   ASCB+118
ASCBSSRB EQU   ASCB+116
ASCBRV06 EQU   ASCBFLG2
ASCBRV05 EQU   ASCBFLG2
ASCBRV04 EQU   ASCBFLG2
ASCBSNQS EQU   ASCBFLG2
ASCBS2S  EQU   ASCBFLG2
ASCBCEXT EQU   ASCBFLG2
ASCBPXMT EQU   ASCBFLG2
ASCBXMPT EQU   ASCBFLG2
ASCBRF07 EQU   ASCBDSP1
ASCBRF06 EQU   ASCBDSP1
ASCBRF05 EQU   ASCBDSP1
ASCBRF04 EQU   ASCBDSP1
ASCBRF03 EQU   ASCBDSP1
ASCBRF02 EQU   ASCBDSP1
ASCBFAIL EQU   ASCBDSP1
ASCBNOQ  EQU   ASCBDSP1
ASCBSWCT EQU   ASCB+112
ASCBASXB EQU   ASCB+108
ASCBTMCH EQU   ASCB+104
ASCBNSWP EQU   ASCBFLG1
ASCBTYP1 EQU   ASCBFLG1
ASCBSTND EQU   ASCBFLG1
ASCBABNT EQU   ASCBFLG1
ASCBTERM EQU   ASCBFLG1
ASCBS3S  EQU   ASCBFLG1
ASCBCMSH EQU   ASCBFLG1
ASCBTOFF EQU   ASCBFLG1
ASCBRF01 EQU   ASCBRCTF
ASCBTMLW EQU   ASCBRCTF
ASCBOUT  EQU   ASCBRCTF
ASCBWAIT EQU   ASCBRCTF
ASCBRV08 EQU   ASCBRCTF
ASCBFQU  EQU   ASCBRCTF
ASCBFRS  EQU   ASCBRCTF
ASCBTMNO EQU   ASCBRCTF
ASCBAFFN EQU   ASCBFW1
ASCBDUMP EQU   ASCB+96
ASCBQSVC EQU   ASCB+92
ASCBUBET EQU   ASCB+88
ASCBECB  EQU   ASCB+84
ASCBJSTL EQU   ASCB+80
ASCBEWST EQU   ASCB+72
ASCBEJST EQU   ASCB+64
ASCBTSB  EQU   ASCB+60
ASCBCSCB EQU   ASCB+56
ASCBRSM  EQU   ASCB+52
ASCBLDA  EQU   ASCB+48
ASCBSTOR EQU   ASCB+44
ASCBDP   EQU   ASCB+43
ASCBRV07 EQU   ASCB+42
ASCBIOSM EQU   ASCB+40
ASCBSEQN EQU   ASCB+38
ASCBASID EQU   ASCB+36
ASCBCPUS EQU   ASCB+32
ASCBSPL  EQU   ASCB+28
ASCBLSLQ EQU   ASCB+24
ASCBFSLQ EQU   ASCB+20
ASCBIOSP EQU   ASCB+16
ASCBLOCK EQU   ASCB+12
ASCBBWDP EQU   ASCB+8
ASCBFWDP EQU   ASCB+4
ASCBASCB EQU   ASCB
ASCBEGIN EQU   ASCB
WSACCCH  EQU   WSAC+52
WSACRRSA EQU   WSAC+48
WSACREST EQU   WSAC+44
WSACRSTI EQU   WSAC+40
WSACABTM EQU   WSAC+36
WSACMF1  EQU   WSAC+32
WSACEDS0 EQU   WSAC+28
WSACIOS  EQU   WSAC+24
WSACRTMK EQU   WSAC+20
WSACACR  EQU   WSAC+16
WSACTIME EQU   WSAC+12
WSACOPTM EQU   WSAC+8
WSACCWSA EQU   WSAC
WSAGSCHE EQU   WSAG+40
WSAGREST EQU   WSAG+36
WSAGNQDQ EQU   WSAG+32
WSAGMEMT EQU   WSAG+28
WSAGOPTM EQU   WSAG+24
WSAGSTAT EQU   WSAG+20
WSAGEMS0 EQU   WSAG+16
WSAGSSRS EQU   WSAG+12
WSAGRSM  EQU   WSAG+8
WSAGGMFM EQU   WSAG+4
WSAGPGIO EQU   WSAG
LCCAR125 EQU   LCCA+964
LCCAR124 EQU   LCCA+960
LCCASGPR EQU   LCCA+896
LCCADRT2 EQU   LCCA+888
LCCADRT1 EQU   LCCA+880
LCCAR103 EQU   LCCA+876
LCCAESS2 EQU   LCCA+872
LCCASPLJ EQU   LCCA+868
LCCASMQJ EQU   LCCA+864
LCCAIRT  EQU   LCCA+736
LCCAASID EQU   LCCA+732
LCCARV89 EQU   LCCA+728
LCCAPGTA EQU   LCCASRBF+2
LCCASAFN EQU   LCCASRBF
LCCAECSA EQU   LCCA+716
LCCAICR0 EQU   LCCA+712
LCCALWTM EQU   LCCA+704
LCCARV78 EQU   LCCA+700
LCCAPINV EQU   LCCA+696
LCCARV88 EQU   LCCA+695
LCCARV87 EQU   LCCALKFG
LCCARV86 EQU   LCCALKFG
LCCARV85 EQU   LCCALKFG
LCCARV84 EQU   LCCALKFG
LCCALKRD EQU   LCCALKFG
LCCALKAQ EQU   LCCALKFG
LCCALKSA EQU   LCCALKFG
LCCALKDP EQU   LCCALKFG
LCCACRST EQU   LCCACREX
LCCACRDP EQU   LCCACREX
LCCACRLM EQU   LCCACREX
LCCACRIN EQU   LCCACREX
LCCACRRT EQU   LCCACREX
LCCACRLE EQU   LCCACREX
LCCACRRM EQU   LCCACREX
LCCACREF EQU   LCCACREX
LCCAVARY EQU   LCCACRFL
LCCARV73 EQU   LCCACRFL
LCCARV72 EQU   LCCACRFL
LCCARV71 EQU   LCCACRFL
LCCARV70 EQU   LCCACRFL
LCCARV69 EQU   LCCACRFL
LCCACLMS EQU   LCCACRFL
LCCACRTM EQU   LCCACRFL
LCCALCR0 EQU   LCCA+688
LCCACRLC EQU   LCCA+684
LCCARCPU EQU   LCCA+680
LCCADCPU EQU   LCCA+676
LCCASRBJ EQU   LCCA+672
LCCADSSR EQU   LCCA+668
LCCADSSC EQU   LCCA+660
LCCADSS3 EQU   LCCA+648
LCCADSS2 EQU   LCCA+636
LCCADSS1 EQU   LCCA+624
LCCAWTIM EQU   LCCA+616
LCCAITOD EQU   LCCA+608
LCCADTOD EQU   LCCA+600
LCCASTOD EQU   LCCA+592
LCCARIR5 EQU   LCCASPSA+44
LCCARIR4 EQU   LCCASPSA+40
LCCARIR3 EQU   LCCASPSA+36
LCCARIR2 EQU   LCCASPSA+32
LCCARPR5 EQU   LCCASPSA+28
LCCARPR4 EQU   LCCASPSA+24
LCCARPR3 EQU   LCCASPSA+20
LCCARPR2 EQU   LCCASPSA+16
LCCADSR5 EQU   LCCASPSA+12
LCCADSR4 EQU   LCCASPSA+8
LCCADSR3 EQU   LCCASPSA+4
LCCADSR2 EQU   LCCASPSA
LCCARV68 EQU   LCCA+543
LCCAPSMK EQU   LCCA+542
LCCARV67 EQU   LCCADSF2
LCCARV66 EQU   LCCADSF2
LCCARV65 EQU   LCCADSF2
LCCARV64 EQU   LCCADSF2
LCCADSRW EQU   LCCADSF2
LCCADSPL EQU   LCCADSF2
LCCAGSRB EQU   LCCADSF2
LCCASRBM EQU   LCCADSF2
LCCARV61 EQU   LCCADSF1
LCCARV60 EQU   LCCADSF1
LCCARV59 EQU   LCCADSF1
LCCARV58 EQU   LCCADSF1
LCCATIMR EQU   LCCADSF1
LCCADSS  EQU   LCCADSF1
LCCAVCPU EQU   LCCADSF1
LCCAACR  EQU   LCCADSF1
LCCAASCP EQU   LCCA+532
LCCAESSA EQU   LCCA+528
LCCARV55 EQU   LCCASPN4
LCCARV54 EQU   LCCASPN4
LCCARV53 EQU   LCCASPN4
LCCARV52 EQU   LCCASPN4
LCCARV51 EQU   LCCASPN4
LCCARV50 EQU   LCCASPN4
LCCARV49 EQU   LCCASPN4
LCCARV48 EQU   LCCASPN4
LCCARV47 EQU   LCCASPN3
LCCARV46 EQU   LCCASPN3
LCCARV45 EQU   LCCASPN3
LCCARV44 EQU   LCCASPN3
LCCARV43 EQU   LCCASPN3
LCCARV42 EQU   LCCASPN3
LCCARV41 EQU   LCCASPN3
LCCARV40 EQU   LCCASPN3
LCCARV39 EQU   LCCASPN2
LCCARV38 EQU   LCCASPN2
LCCARV37 EQU   LCCASPN2
LCCARV36 EQU   LCCASPN2
LCCARV35 EQU   LCCASPN2
LCCARV34 EQU   LCCASPN2
LCCARV33 EQU   LCCASPN2
LCCARV32 EQU   LCCASPN2
LCCARV31 EQU   LCCASPN1
LCCARV30 EQU   LCCASPN1
LCCAMFIO EQU   LCCASPN1
LCCARSTR EQU   LCCASPN1
LCCATSPN EQU   LCCASPN1
LCCALOCK EQU   LCCASPN1
LCCASIGP EQU   LCCASPN1
LCCAPTLB EQU   LCCASPN1
LCCARV27 EQU   LCCAIHR4
LCCARV26 EQU   LCCAIHR4
LCCARV25 EQU   LCCAIHR4
LCCARV24 EQU   LCCAIHR4
LCCARV23 EQU   LCCAIHR4
LCCARV22 EQU   LCCAIHR4
LCCARV21 EQU   LCCAIHR4
LCCARV20 EQU   LCCAIHR4
LCCARV19 EQU   LCCAIHR3
LCCARV18 EQU   LCCAIHR3
LCCARV17 EQU   LCCAIHR3
LCCARV16 EQU   LCCAIHR3
LCCARV15 EQU   LCCAIHR3
LCCARV14 EQU   LCCAIHR3
LCCARV13 EQU   LCCAIHR3
LCCARV12 EQU   LCCAIHR3
LCCARV11 EQU   LCCAIHR2
LCCARV10 EQU   LCCAIHR2
LCCARV09 EQU   LCCAIHR2
LCCARV08 EQU   LCCAIHR2
LCCARV07 EQU   LCCAIHR2
LCCARV06 EQU   LCCAIHR2
LCCARV05 EQU   LCCAIHR2
LCCARV04 EQU   LCCAIHR2
LCCARV03 EQU   LCCAIHR1
LCCARV02 EQU   LCCAIHR1
LCCARV01 EQU   LCCAIHR1
LCCAPPIE EQU   LCCAIHR1
LCCAPSG1 EQU   LCCAIHR1
LCCAPDAT EQU   LCCAIHR1
LCCAXRC2 EQU   LCCAIHR1
LCCAXRC1 EQU   LCCAIHR1
LCCAIOPS EQU   LCCA+512
LCCAGPGR EQU   LCCA+448
LCCAR133 EQU   LCCA+444
LCCAR132 EQU   LCCA+440
LCCAR131 EQU   LCCA+436
LCCAR130 EQU   LCCA+432
LCCAR129 EQU   LCCA+428
LCCAR128 EQU   LCCA+424
LCCAR127 EQU   LCCA+420
LCCAR126 EQU   LCCA+416
LCCARSGR EQU   LCCA+352
LCCAXGR3 EQU   LCCA+288
LCCAXGR2 EQU   LCCA+224
LCCAXGR1 EQU   LCCA+160
LCCACR0  EQU   LCCA+156
LCCAMCR1 EQU   LCCA+152
LCCAPVAD EQU   LCCA+148
LCCAPINT EQU   LCCA+144
LCCAPPSW EQU   LCCA+136
LCCAPGR1 EQU   LCCA+8
LCCARV77 EQU   LCCA+6
LCCACPUA EQU   LCCA+4
LCCALCCA EQU   LCCA
CVTLEVL  EQU   CVTRELNO+2
CVTNUMB  EQU   CVTRELNO
CVTMDL   EQU   CVTFIX+250
@NM00004 EQU   CVTFIX+248
@NM00003 EQU   CVTFIX
CVTRV482 EQU   CVTXTNT2+128
CVTRV481 EQU   CVTXTNT2+124
CVTRV480 EQU   CVTXTNT2+120
CVTRV479 EQU   CVTXTNT2+118
CVTRV478 EQU   CVTXTNT2+117
CVTRV477 EQU   CVTXTNT2+116
CVTRV476 EQU   CVTXTNT2+115
CVTRV475 EQU   CVTXTNT2+114
CVTRV474 EQU   CVTRV466
CVTRV473 EQU   CVTRV466
CVTRV472 EQU   CVTRV466
CVTRV471 EQU   CVTRV466
CVTRV470 EQU   CVTRV466
CVTRV469 EQU   CVTRV466
CVTRV468 EQU   CVTRV466
CVTRV467 EQU   CVTRV466
CVTRV465 EQU   CVTRV457
CVTRV464 EQU   CVTRV457
CVTRV463 EQU   CVTRV457
CVTRV462 EQU   CVTRV457
CVTRV461 EQU   CVTRV457
CVTRV460 EQU   CVTRV457
CVTRV459 EQU   CVTRV457
CVTRV458 EQU   CVTRV457
CVTRV456 EQU   CVTXTNT2+108
CVTRV455 EQU   CVTXTNT2+104
CVTRV454 EQU   CVTXTNT2+100
CVTRV453 EQU   CVTXTNT2+96
CVTRV452 EQU   CVTXTNT2+94
CVTRV451 EQU   CVTXTNT2+92
CVTRV450 EQU   CVTXTNT2+90
CVTRV449 EQU   CVTXTNT2+88
CVTRV448 EQU   CVTXTNT2+87
CVTRV447 EQU   CVTXTNT2+86
CVTRV446 EQU   CVTRV438
CVTRV445 EQU   CVTRV438
CVTRV444 EQU   CVTRV438
CVTRV443 EQU   CVTRV438
CVTRV442 EQU   CVTRV438
CVTRV441 EQU   CVTRV438
CVTRV440 EQU   CVTRV438
CVTRV439 EQU   CVTRV438
CVTRV437 EQU   CVTRV429
CVTRV436 EQU   CVTRV429
CVTRV435 EQU   CVTRV429
CVTRV434 EQU   CVTRV429
CVTRV433 EQU   CVTRV429
CVTRV432 EQU   CVTRV429
CVTRV431 EQU   CVTRV429
CVTRV430 EQU   CVTRV429
CVTRV428 EQU   CVTXTNT2+80
CVTRV427 EQU   CVTXTNT2+76
CVTRV426 EQU   CVTXTNT2+72
CVTRV425 EQU   CVTXTNT2+68
CVTATACT EQU   CVTATCVT
CVTRV423 EQU   CVTXTNT2+62
CVTRV422 EQU   CVTXTNT2+60
CVTRV421 EQU   CVTXTNT2+58
CVTRV420 EQU   CVTXTNT2+56
CVTRV419 EQU   CVTXTNT2+55
CVTRV418 EQU   CVTXTNT2+54
CVTRV417 EQU   CVTRV409
CVTRV416 EQU   CVTRV409
CVTRV415 EQU   CVTRV409
CVTRV414 EQU   CVTRV409
CVTRV413 EQU   CVTRV409
CVTRV412 EQU   CVTRV409
CVTRV411 EQU   CVTRV409
CVTRV410 EQU   CVTRV409
CVTRV408 EQU   CVTRV400
CVTRV407 EQU   CVTRV400
CVTRV406 EQU   CVTRV400
CVTRV405 EQU   CVTRV400
CVTRV404 EQU   CVTRV400
CVTRV403 EQU   CVTRV400
CVTRV402 EQU   CVTRV400
CVTRV401 EQU   CVTRV400
CVTICB   EQU   CVTXTNT2+48
CVTSKTA  EQU   CVTXTNT2+44
CVTRSV99 EQU   CVTXTNT2+40
CVTRSV98 EQU   CVTXTNT2+36
CVTRSV97 EQU   CVTXTNT2+34
CVTRSV96 EQU   CVTXTNT2+32
CVTOLTEP EQU   CVTXTNT2+28
CVTQIDA  EQU   CVTQID+1
CVTRSV95 EQU   CVTQID
CVTRSV94 EQU   CVTXTNT2+20
CVTRSV93 EQU   CVTXTNT2+16
CVTRSV92 EQU   CVTXTNT2+12
CVTDEBVR EQU   CVTXTNT2+8
CVTRSV91 EQU   CVTXTNT2+6
CVTRSV9H EQU   CVTFLGBT
CVTRSV9G EQU   CVTFLGBT
CVTRSV9F EQU   CVTFLGBT
CVTRSV9E EQU   CVTFLGBT
CVTRSV9D EQU   CVTFLGBT
CVTRSV9C EQU   CVTFLGBT
CVTVME   EQU   CVTFLGBT
CVTNPE   EQU   CVTFLGBT
CVTNUCLS EQU   CVTXTNT2+4
CVTDSSVA EQU   CVTDSSV+1
CVTRSV89 EQU   CVTDSSV
CVTRSV88 EQU   CVTXTNT1+8
CVTRSV87 EQU   CVTXTNT1+4
CVTFACHN EQU   CVTXTNT1
CVTRV488 EQU   CVTMAP+412
CVTRV487 EQU   CVTMAP+408
CVTRV486 EQU   CVTMAP+404
CVTRV485 EQU   CVTMAP+400
CVTACTAP EQU   CVTMAP+396
CVTAUTH  EQU   CVTMAP+392
CVTATMCA EQU   CVTATMCT+1
CVTATMST EQU   CVTATMCT
CVTRSV61 EQU   CVTMAP+384
CVTVOLT1 EQU   CVTVOLM1+1
CVTVOLI1 EQU   CVTVOLF1
CVTSTOA  EQU   CVTMAP+376
CVTRSV58 EQU   CVTMAP+374
CVTRSV57 EQU   CVTMAP+372
CVTDDCE  EQU   CVTMAP+368
CVTPNWFR EQU   CVTMAP+364
CVTSMF   EQU   CVTMAP+360
CVTSULK  EQU   CVTMAP+358
CVTSLKO  EQU   CVTSYSK
CVTSLKP  EQU   CVTSYSK
CVTSLKQ  EQU   CVTSYSK
CVTSLKR  EQU   CVTSYSK
CVTRSV56 EQU   CVTSYSK
CVTRSV55 EQU   CVTSYSK
CVTRSV54 EQU   CVTSYSK
CVTRSV53 EQU   CVTSYSK
CVTRSV52 EQU   CVTA1F1
CVTRSV51 EQU   CVTA1F1
CVTRSV50 EQU   CVTA1F1
CVTRSV49 EQU   CVTA1F1
CVTRSV48 EQU   CVTA1F1
CVTRSV47 EQU   CVTA1F1
CVTSRSW  EQU   CVTA1F1
CVTPFSW  EQU   CVTA1F1
CVTPCVT  EQU   CVTMAP+352
CVTRSV46 EQU   CVTMAP+344
CVTRSV45 EQU   CVTMAP+340
CVTRSV44 EQU   CVTMAP+338
CVTRSV43 EQU   CVTMAP+336
CVTHJESA EQU   CVTHJES+1
CVTRSV42 EQU   CVTHJES
CVTEXT2A EQU   CVTEXT2+1
CVTRSV41 EQU   CVTEXT2
CVTAPFA  EQU   CVTAPF+1
CVTRSV40 EQU   CVTAPF
CVTRV518 EQU   CVTINTLA
CVTRV517 EQU   CVTERPV
CVTEORM  EQU   CVTMAP+312
CVTMCHPR EQU   CVTMAP+308
CVTTZ    EQU   CVTMAP+304
CVTJEPS  EQU   CVTMAP+300
CVTJESCT EQU   CVTMAP+296
CVTMODE  EQU   CVTMAP+292
CVTPTRV  EQU   CVTMAP+288
CVTREAL  EQU   CVTMAP+284
CVTRSV39 EQU   CVTMAP+280
CVTRSV38 EQU   CVTMAP+276
CVTDMSRA EQU   CVTDMSR+1
CVTRV634 EQU   CVTDMSRF
CVTRV633 EQU   CVTDMSRF
CVTRV632 EQU   CVTDMSRF
CVTRV631 EQU   CVTDMSRF
CVTRV630 EQU   CVTDMSRF
CVTRV629 EQU   CVTDMSRF
CVTUDUMP EQU   CVTDMSRF
CVTSDUMP EQU   CVTDMSRF
CVTQMSGA EQU   CVTQMSG+1
CVTRSV36 EQU   CVTQMSG
CVTAMFF  EQU   CVTMAP+264
CVTPURGA EQU   CVTPURG+1
CVTRSV35 EQU   CVTPURG
CVTCBSP  EQU   CVTMAP+256
CVTATERA EQU   CVTATER+1
CVTSYST  EQU   CVTATER
CVTVOLT2 EQU   CVTTAT
CVTVOLI2 EQU   CVTVOLF2
CVTAQAVB EQU   CVTAQAVT+1
CVTRSV34 EQU   CVTTCMFG
CVTRSV33 EQU   CVTTCMFG
CVTRSV32 EQU   CVTTCMFG
CVTRSV31 EQU   CVTTCMFG
CVTRSV30 EQU   CVTTCMFG
CVTRSV29 EQU   CVTTCMFG
CVTLDEV  EQU   CVTTCMFG
CVTTCRDY EQU   CVTTCMFG
CVTGTFA  EQU   CVTGTF+1
CVTRSV27 EQU   CVTGTFST
CVTRNIO  EQU   CVTGTFST
CVTUSR   EQU   CVTGTFST
CVTRV318 EQU   CVTFORM
CVTRV317 EQU   CVTTMODE
CVTRV316 EQU   CVTSTATE
CVTRV315 EQU   CVTGTFS
CVTGTFAV EQU   CVTGTFS
CVT0SCR1 EQU   CVTMAP+232
CVTRV515 EQU   CVTMAP+228
CVTRMS   EQU   CVTMAP+224
CVTPATCH EQU   CVTMAP+220
CVTTSCE  EQU   CVTMAP+216
CVTLNKSC EQU   CVTMAP+214
CVTQABST EQU   CVTMAP+212
CVTMDLDS EQU   CVTMAP+208
CVTUSER  EQU   CVTMAP+204
CVTABEND EQU   CVTMAP+200
CVTSMCA  EQU   CVTMAP+196
CVTRSV18 EQU   CVTMAP+192
CVTQLPAQ EQU   CVTMAP+188
CVTQCDSR EQU   CVTMAP+184
CVTRSV17 EQU   CVTOPTB
CVTRSV16 EQU   CVTOPTB
CVTFP    EQU   CVTOPTB
CVTAPTHR EQU   CVTOPTB
CVTNLOG  EQU   CVTOPTB
CVTTOD   EQU   CVTOPTB
CVTCTIMS EQU   CVTOPTB
CVTPROT  EQU   CVTOPTB
CVTXPFP  EQU   CVTOPTA
CVTASCII EQU   CVTOPTA
CVTRSV13 EQU   CVTOPTA
CVTRSV12 EQU   CVTOPTA
CVTNIP   EQU   CVTOPTA
CVTDDR   EQU   CVTOPTA
CVTAPR   EQU   CVTOPTA
CVTCCH   EQU   CVTOPTA
CVTSNCTR EQU   CVTMAP+180
CVTQMWR  EQU   CVTMAP+176
CVTQOCR  EQU   CVTMAP+172
CVT1EF00 EQU   CVTMAP+168
CVTMZ00  EQU   CVTMAP+164
CVTHEAD  EQU   CVTMAP+160
CVTRSV11 EQU   CVTMAP+156
CVT0PT01 EQU   CVTMAP+152
CVTMSER  EQU   CVTMAP+148
CVTRV516 EQU   CVTIERLC
CVTILCH  EQU   CVTMAP+140
CVT0DS   EQU   CVTMAP+136
CVTFBOSV EQU   CVTMAP+132
CVTNUCB  EQU   CVTMAP+128
CVTIXAVL EQU   CVTMAP+124
CVTIOQET EQU   CVTMAP+120
CVTDCBA  EQU   CVTMAP+117
CVTMVS2  EQU   CVTDCB
CVT6DAT  EQU   CVTDCB
CVT4MPS  EQU   CVTDCB
CVTRSV09 EQU   CVTDCB
CVT4MS1  EQU   CVTDCB
CVT2SPS  EQU   CVTDCB
CVT1SSS  EQU   CVTDCB
CVTRSV08 EQU   CVTDCB
CVTSTB   EQU   CVTMAP+112
CVTQTD00 EQU   CVTMAP+108
CVTQTE00 EQU   CVTMAP+104
CVTCUCB  EQU   CVTMAP+100
CVTSJQ   EQU   CVTMAP+96
CVTPBLDL EQU   CVTMAP+92
CVTTPC   EQU   CVTMAP+88
CVTSVDCB EQU   CVTMAP+84
CVTBRET  EQU   CVTMAP+82
CVTEXIT  EQU   CVTMAP+80
CVT0FN00 EQU   CVTMAP+76
CVTDARA  EQU   CVTDAR+1
CVTRSV07 EQU   CVTFLGS1
CVTRSV06 EQU   CVTFLGS1
CVTRSV05 EQU   CVTFLGS1
CVTRSV04 EQU   CVTFLGS1
CVTRSV03 EQU   CVTFLGS1
CVTRSV02 EQU   CVTFLGS1
CVTRSV01 EQU   CVTFLGS1
CVTDMPLK EQU   CVTFLGS1
CVTXITP  EQU   CVTMAP+68
CVTZDTAB EQU   CVTMAP+64
CVTMSLT  EQU   CVTMAP+60
CVTDATE  EQU   CVTMAP+56
CVTBTERM EQU   CVTMAP+52
CVTSYSAD EQU   CVTMAP+48
CVTXTLER EQU   CVTMAP+44
CVTILK2  EQU   CVTMAP+40
CVTILK1  EQU   CVTMAP+36
CVTPRLTV EQU   CVTMAP+32
CVTPCNVT EQU   CVTMAP+28
CVT0VL00 EQU   CVTMAP+24
CVTXAPG  EQU   CVTMAP+20
CVTBUF   EQU   CVTMAP+16
CVTJOB   EQU   CVTMAP+12
CVTLINK  EQU   CVTMAP+8
CVT0EF00 EQU   CVTMAP+4
CVTTCBP  EQU   CVTMAP
CVT      EQU   CVTMAP
@NM00002 EQU   SRB+40
@NM00001 EQU   SRB+38
SRBPRIOR EQU   SRB+37
SRBPKF   EQU   SRB+36
SRBSAVE  EQU   SRB+32
SRBPARM  EQU   SRB+28
SRBRMTR  EQU   SRB+24
SRBEP    EQU   SRB+20
SRBPTCB  EQU   SRBFLC+4
SRBPASID EQU   SRBFLC+2
SRBCPAFF EQU   SRBFLC
SRBASCB  EQU   SRB+8
SRBFLNK  EQU   SRB+4
SRBID    EQU   SRB
@NM00028 EQU   PSA+3668
PSASTAK  EQU   PSA+3072
@NM00027 EQU   PSA+1040
PSAUSEND EQU   PSA+1040
PSAWTCOD EQU   PSA+1036
PSAATCVT EQU   PSA+1032
PSAPCPSW EQU   PSA+1024
PSAPIR2  EQU   PSA+1020
PSARV059 EQU   PSA+1018
PSASVC13 EQU   PSA+1016
PSALSFCC EQU   PSA+1012
PSASFACC EQU   PSA+1008
PSASTOP  EQU   PSA+992
PSASTART EQU   PSA+976
PSARSPSW EQU   PSA+968
PSASRPSW EQU   PSA+960
PSARV045 EQU   PSA+892
PSARV044 EQU   PSA+888
PSARV043 EQU   PSA+884
PSARV042 EQU   PSA+880
PSARV041 EQU   PSA+876
PSARV040 EQU   PSA+872
PSARV025 EQU   PSA+868
PSADSSED EQU   PSA+868
PSADSSPR EQU   PSA+864
PSADSSFW EQU   PSA+860
PSADSS14 EQU   PSA+856
PSADSSPP EQU   PSA+848
PSADSSRP EQU   PSA+840
PSADSS05 EQU   PSADSSF4
PSADSS10 EQU   PSADSSF4
PSADSSVE EQU   PSADSSF4
PSADSSDE EQU   PSADSSF4
PSADSSC0 EQU   PSADSSF4
PSADSSIE EQU   PSADSSF4
PSADSS12 EQU   PSADSSF4
PSADSSRC EQU   PSADSSF4
PSARV057 EQU   PSADSSF3
PSARV056 EQU   PSADSSF3
PSARV055 EQU   PSADSSF3
PSADSSMC EQU   PSADSSF3
PSADSSRW EQU   PSADSSF3
PSADSSNM EQU   PSADSSF3
PSADSSES EQU   PSADSSF3
PSADSSGP EQU   PSADSSF3
PSADSSF2 EQU   PSADSSFL+1
PSADSSPI EQU   PSADSSF1
PSADSSOI EQU   PSADSSF1
PSADSSSP EQU   PSADSSF1
PSADSSTP EQU   PSADSSF1
PSADSSDW EQU   PSADSSF1
PSADSSDD EQU   PSADSSF1
PSADSSDM EQU   PSADSSF1
PSADSSMV EQU   PSADSSF1
PSADSSTS EQU   PSA+816
PSADSSWK EQU   PSA+812
PSADSSR3 EQU   PSA+808
PSADSSR2 EQU   PSA+804
PSADSSRS EQU   PSA+800
PSASTOR  EQU   PSA+796
PSACPUSA EQU   PSA+794
PSAVSTAP EQU   PSA+792
PSAWKVAP EQU   PSA+788
PSAWKRAP EQU   PSA+784
PSAMCHIC EQU   PSA+783
PSARV061 EQU   PSA+782
PSASYMSK EQU   PSA+781
PSAMCHFL EQU   PSA+780
PSACR0   EQU   PSA+776
PSAPSWSV EQU   PSA+768
PSALITA  EQU   PSA+764
PSACLHS  EQU   PSAHLHI
PSALKR15 EQU   PSALKSA+60
PSALKR14 EQU   PSALKSA+56
PSALKR13 EQU   PSALKSA+52
PSALKR12 EQU   PSALKSA+48
PSALKR11 EQU   PSALKSA+44
PSALKR10 EQU   PSALKSA+40
PSALKR9  EQU   PSALKSA+36
PSALKR8  EQU   PSALKSA+32
PSALKR7  EQU   PSALKSA+28
PSALKR6  EQU   PSALKSA+24
PSALKR5  EQU   PSALKSA+20
PSALKR4  EQU   PSALKSA+16
PSALKR3  EQU   PSALKSA+12
PSALKR2  EQU   PSALKSA+8
PSALKR1  EQU   PSALKSA+4
PSALKR0  EQU   PSALKSA
PSARV023 EQU   PSACLHT+52
PSALOCAL EQU   PSACLHT+48
PSACMSL  EQU   PSACLHT+44
PSAOPTL  EQU   PSACLHT+40
PSATPACL EQU   PSACLHT+36
PSATPDNL EQU   PSACLHT+32
PSATPNCL EQU   PSACLHT+28
PSAIOSLL EQU   PSACLHT+24
PSAIOSUL EQU   PSACLHT+20
PSAIOSCL EQU   PSACLHT+16
PSAIOSSL EQU   PSACLHT+12
PSASALCL EQU   PSACLHT+8
PSAASML  EQU   PSACLHT+4
PSADISPL EQU   PSACLHT
PSASRSA  EQU   PSA+636
PSARV050 EQU   PSA+634
PSADSSGO EQU   PSA+633
PSARECUR EQU   PSA+632
PSAHLHIS EQU   PSA+628
PSAIPCSA EQU   PSA+624
@NM00026 EQU   PSA+621
PSAIPCDM EQU   PSA+620
PSAIPCD  EQU   PSA+616
@NM00025 EQU   PSA+613
PSAIPCRM EQU   PSA+612
PSAIPCR  EQU   PSA+608
PSAMCHEX EQU   PSA+600
PSAMPSW  EQU   PSA+592
PSAEXPS2 EQU   PSA+584
PSAEXPS1 EQU   PSA+576
PSAPIREG EQU   PSA+572
PSARSREG EQU   PSA+568
PSAGPREG EQU   PSA+556
PSARV022 EQU   PSASUP4
PSARV021 EQU   PSASUP4
PSARV020 EQU   PSASUP4
PSARV019 EQU   PSASUP4
PSARV018 EQU   PSASUP4
PSARV017 EQU   PSASUP4
PSARV016 EQU   PSASUP4
PSARV015 EQU   PSASUP4
PSARV014 EQU   PSASUP3
PSARV013 EQU   PSASUP3
PSARV012 EQU   PSASUP3
PSARV011 EQU   PSASUP3
PSASPR   EQU   PSASUP3
PSAPSREG EQU   PSASUP3
PSAPI2   EQU   PSASUP3
PSAIOSUP EQU   PSASUP3
PSALCR   EQU   PSASUP2
PSARTM   EQU   PSASUP2
PSAACR   EQU   PSASUP2
PSAIPCE2 EQU   PSASUP2
PSAIPCES EQU   PSASUP2
PSAIPCEC EQU   PSASUP2
PSAGTF   EQU   PSASUP2
PSAIPCRI EQU   PSASUP2
PSAIPCRP EQU   PSASUP1
PSAIPCDR EQU   PSASUP1
PSADISP  EQU   PSASUP1
PSALOCK  EQU   PSASUP1
PSAPI    EQU   PSASUP1
PSAEXT   EQU   PSASUP1
PSASVC   EQU   PSASUP1
PSAIO    EQU   PSASUP1
PSAANEW  EQU   PSA+544
PSATOLD  EQU   PSA+540
PSATNEW  EQU   PSA+536
PSALCCAR EQU   PSA+532
PSAPCCAR EQU   PSA+524
PSAPCCAV EQU   PSA+520
PSACPULA EQU   PSA+518
PSACPUPA EQU   PSA+516
PSAPSA   EQU   PSA+512
FLCHDEND EQU   PSA+512
FLCCRSAV EQU   FLCMCLA+280
FLCGRSAV EQU   FLCMCLA+216
FLCFPSAV EQU   FLCMCLA+184
FLCFLA   EQU   FLCMCLA+88
FLCRGNCD EQU   FLCMCLA+84
FLCFSAA  EQU   FLCFSA+1
@NM00024 EQU   FLCFSA
@NM00023 EQU   FLCMCLA+72
FLCMCIC  EQU   FLCMCLA+64
@NM00022 EQU   FLCMCLA+20
FLCIOAA  EQU   FLCIOA+1
@NM00021 EQU   FLCIOA
@NM00020 EQU   FLCMCLA+15
@NM00019 EQU   FLCMCLA+14
@NM00018 EQU   FLCMCLA+12
FLCLCL   EQU   FLCMCLA+8
FLCIOELA EQU   FLCIOEL+1
@NM00017 EQU   FLCIOEL
FLCCHNID EQU   FLCMCLA
@NM00016 EQU   PSA+160
FLCMTRCD EQU   PSA+157
@NM00015 EQU   PSA+156
FLCPERA  EQU   FLCPER+1
@NM00014 EQU   FLCPER
@NM00013 EQU   PSA+151
FLCPERCD EQU   PSA+150
FLCMCNUM EQU   PSA+149
@NM00012 EQU   PSA+148
FLCTEAA  EQU   FLCTEA+1
@NM00011 EQU   FLCTEA
PSAPIPC  EQU   PSAPICOD
PSAPIMC  EQU   PSAPICOD
PSAPIPER EQU   PSAPICOD
PSARV049 EQU   FLCPICOD
FLCPILCB EQU   FLCPIILC
@NM00010 EQU   FLCPIILC
@NM00009 EQU   PSAEPPSW
FLCSVCN  EQU   PSAESPSW+2
FLCSILCB EQU   FLCSVILC
@NM00008 EQU   FLCSVILC
@NM00007 EQU   PSAESPSW
FLCEICOD EQU   PSAEEPSW+2
PSASPAD  EQU   PSAEEPSW
@NM00006 EQU   PSA+128
FLCINPSW EQU   PSA+120
FLCMNPSW EQU   PSA+112
FLCPNPSW EQU   PSA+104
FLCSNPSW EQU   PSA+96
FLCENPSW EQU   PSA+88
FLCTRACE EQU   PSA+84
FLCTIMER EQU   PSA+80
FLCCVT2  EQU   PSA+76
FLCCAW   EQU   PSA+72
FLCCSW   EQU   PSA+64
FLCIOPSW EQU   PSA+56
FLCMOPSW EQU   PSA+48
FLCPOPSW EQU   PSA+40
FLCSOPSW EQU   PSA+32
FLCEOPSW EQU   PSA+24
@NM00005 EQU   FLCICCW2+4
FLCCVT   EQU   FLCICCW2
FLCICCW1 EQU   FLCROPSW
FLCIPPSW EQU   FLCRNPSW
*                                      END UNREFERENCED COMPONENTS
@RC00103 EQU   @RC00102
@RC00107 EQU   @RC00106
@RC00202 EQU   @RC00201
@RC00228 EQU   @RC00227
@RF00227 EQU   PFCHK
@RT00304 EQU   USREOUT
@RT00335 EQU   EXITERM
@ENDDATA EQU   *
         END   AHLTUSR,(C'PLS1937',0701,76282)
