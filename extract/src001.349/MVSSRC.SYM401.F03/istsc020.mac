         TITLE 'ISTSC020 - CECOM                                       *
                        '
ISTSC020 CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL2(@EP00001-@MAINENT)
         DC    AL1(16)                                             0001
         DC    C'ISTSC020  75.177'                                 0001
S20CEC03 DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL2(@EP00181-S20CEC03)
         ENTRY S20CEC03
         DROP  @15
@PROLOG  ST    @14,12(,@13)                                        0001
         STM   @00,@12,20(@13)                                     0001
         BALR  @11,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,@11                                         0001
         AH    @15,4(,@15)                                         0001
         BR    @15                                                 0001
@EP00001 DS    0H                                                  0002
         EJECT
*        SVESC020(2) = R13;             /* SET UP BACK PTR           */
         ST    R13,SVESC020+4(,WAPTR)                              0065
*        BACKSAVE(3) = ADDR(SVESC020);  /* PUT FORWARD CHAIN IN LAST */
         LA    @12,SVESC020(,WAPTR)                                0066
         ST    @12,BACKSAVE+8(,R13)                                0066
*        R13 = ADDR(SVESC020);          /* POINT TO SAVE AREA FOR MOD*/
         LR    R13,@12                                             0067
*        $C2WAY='0'B;                   /* SET 2 WAY SWITCH OFF      */
         NI    $C2WAY(WAPTR),B'01111111'                           0068
*        $CINCT=ZERO;                   /* ZERO OUT IN COUNT PARAM   */
         L     @12,ZERO                                            0069
         ST    @12,$CINCT(,WAPTR)                                  0069
*        $CINADR=ZERO;                  /* ZERO OUT IN ADDR PARAM    */
         ST    @12,$CINADR(,WAPTR)                                 0070
*        IF $TCECM = '1'B               /* IF IT IS A TCEC CALL      */
*          THEN GOTO S20CEC2;           /* THEN GO TO PROCESS IT     */
         TM    $TCECM(WAPTR),B'00000001'                           0071
         BO    @RT00071                                            0071
*          ELSE GOTO S20CEC1;           /* ELSE PROCESS CECOM CALL   */
         B     S20CEC1                                             0073
*/********************************************************************/
*/*                           C E C O M                              */
*/*                                                                  */
*/*  THIS SECTION HANDLES ALL 'CECOM' CALLS. IT VERIFIES THE VALIDITY*/
*/*  OF THE INPUT PARMMETER FOR BOTH 1-WAY AND 2-WAY COMMUNICATIONS. */
*/*  IT ALSO TACKS ON THE PROPER ID TO THE MESSAGE                   */
*/********************************************************************/
*S20CEC1:                               /* START OF $CCOM CALL       */
*        CECMAP=R1;                     /* SET UP PARM PTR           */
S20CEC1  LR    CECMAP,R1                                           0074
*        IF $CEINADR ^=0                /* TWO WAY COMMUNICATION?    */
*              THEN                     /* YES - CONTINUE BELOW      */
         SLR   @12,@12                                             0075
         L     @10,$CEINADR(,CECMAP)                               0075
         CR    @10,@12                                             0075
         BE    @RF00075                                            0075
*/***************************************/                         0076
*/* CK FOR VALID 'IN' COUNT.            */                         0076
*/*  IN CNT > 61 = ERROR (RET CODE=8)   */                         0076
*/*  SET 2WAY COMMUNICATION SW          */                         0076
*/*  ZERO OUT READ (IN) BUFFER          */                         0076
*/***************************************/                         0076
*                DO;                                               0076
*                  $C2WAY='1'B;         /* TURN ON TWO WAY SWITCH    */
         OI    $C2WAY(WAPTR),B'10000000'                           0077
*                  IF $CEINCT < 0       /* IF 'IN' CNT IS LT ZERO    */
*                    THEN GOTO S20CRC08; /* ERR RET WITH RET CODE=8  */
         L     @09,$CEINCT(,CECMAP)                                0078
         CR    @09,@12                                             0078
         BL    @RT00078                                            0078
*                  IF $CEINCT > 61 THEN /* IF 'IN' CNT IS GT 61 THEN */
         C     @09,@CF00726                                        0080
         BH    @RT00080                                            0080
*                    GOTO S20CRC08;     /*  RET TO CALLER W RC=8     */
*                  $CINADR=$CEINADR;    /* PASS 'IN' ADDR TO MSG I/O */
         ST    @10,$CINADR(,WAPTR)                                 0082
*                  R14=$CINADR;         /* PUT BUFFER ADDR INTO REG14*/
         LR    R14,@10                                             0083
*                  $CINCT=$CEINCT;      /* PASS 'IN' CNT TO MSG I/O  */
         ST    @09,$CINCT(,WAPTR)                                  0084
*                  R15=$CEINCT;         /* LNGTH OF BUF - 1 IN REG15 */
         LR    R15,@09                                             0085
*            GEN REFS(R15,S20CEC1A) ( EX R15,S20CEC1A);  /* ZERO OUT */
          EX R15,S20CEC1A
*                  $CINADR=$CINADR+1;   /* ALLOW 1 BYTE FOR LNGTH FLD*/
         LA    @12,1                                               0087
         AL    @12,$CINADR(,WAPTR)                                 0087
         ST    @12,$CINADR(,WAPTR)                                 0087
*                END;                                              0088
*/***************************************/                         0089
*/* VERIFY 'OUT' MSG DATA.              */                         0089
*/*  OUT CNT < 1 = ERROR (RET CDE=8)    */                         0089
*/*  OUT CNT > 61 ITS RESET TO 61       */                         0089
*/***************************************/                         0089
*        IF $CEOUTCT<'01'X THEN         /* IF OUT CNT IS LT ONE      */
@RF00075 L     @12,$CEOUTCT(,CECMAP)                               0089
         LTR   @12,@12                                             0089
         BNP   @RT00089                                            0089
*          GOTO S20CRC08;               /*  THEN GO SET RET CODE     */
*        $COUTAD=ADDR($WORK);           /* SET UP 'OUT' MSG PARAMETER*/
         LA    @10,$WORK(,WAPTR)                                   0091
         ST    @10,$COUTAD(,WAPTR)                                 0091
*        IF $CEOUTCT > 61               /* IF PARM CNT       @YA04062*/
*             THEN                     /* GTR THAN 61        @YA04062*/
         LA    @10,61                                              0092
         CR    @12,@10                                             0092
         BNH   @RF00092                                            0092
*               $COUTCT=61;            /* TRUNCATE TO        @YA04062*/
         ST    @10,$COUTCT(,WAPTR)                                 0093
*                ELSE                  /* 61 ELSE USE CNT    @YA04062*/
*        $COUTCT=$CEOUTCT;              /* FOR MSG I/O MODULE        */
         B     @RC00092                                            0094
@RF00092 L     @12,$CEOUTCT(,CECMAP)                               0094
         ST    @12,$COUTCT(,WAPTR)                                 0094
*        CECOMSW='1'B;                  /* SET CECOM SW ON           */
@RC00092 OI    CECOMSW,B'10000000'                                 0095
*        GEN  (BAL RETR,S20C01);        /* SET UP MSG PREFIX         */
         BAL RETR,S20C01
*        $WORK(I:I+$COUTCT-1)=CEOUTMSG; /* MOVE MSG TO $WORK + PREFIX*/
         LH    @12,I(,WAPTR)                                       0097
         N     @12,@CF00786                                        0097
         ALR   @12,WAPTR                                           0097
         L     @10,$COUTCT(,WAPTR)                                 0097
         LR    @09,@10                                             0097
         BCTR  @09,0                                               0097
         L     @08,$CEOUTAD(,CECMAP)                               0097
         EX    @09,@SM00787                                        0097
*        $COUTCT = $COUTCT+I-1;         /* ADD PREFIX LEN TO OUT CNT */
         LH    @12,I(,WAPTR)                                       0098
         N     @12,@CF00786                                        0098
         ALR   @10,@12                                             0098
         BCTR  @10,0                                               0098
         ST    @10,$COUTCT(,WAPTR)                                 0098
*        GOTO S20CEC2D;                 /* GO TO COMMON EXIT TO MSGIO*/
         B     S20CEC2D                                            0099
*S20CEC1A: GEN REFS(R14) ( XC 0(0,R14),0(R14));  /* ZERO OUT READ BUF*/
S20CEC1A  XC 0(0,R14),0(R14)
*        GEN   (EJECT);                                            0101
         EJECT
*/********************************************************************/
*/*                           T C E C                                */
*/*                                                                  */
*/*  THIS SECTION HANDLES ALL 'TCEC' CALLS. IT TAKES A MSG NUMBER AND*/
*/*  USES IT AS AN INDEX TO A MSG TABLE. IT WILL ALSO SUBSTITUTE ANY */
*/*  DATA FROM $INBUFR INTO THE MSG AND DELETE EXTRA BLANKS FROM THE */
*/*  SUBSTITUTED LINE UNLESS REQUESTED NOT TO.                       */
*/*      R1=PARAMETER LIST POINTER                                   */
*/********************************************************************/
*S20CEC2:                                                          0102
*        $TCECM='0'B;                   /* RESET TCEC SW IN RCA      */
S20CEC2  NI    $TCECM(WAPTR),B'11111110'                           0102
*        IF $MULLNSW='1'B THEN          /* IF MULTIPLE LINE CALL     */
         TM    $MULLNSW(WAPTR),B'00100000'                         0103
         BO    @RT00103                                            0103
*            GOTO S20CEC2A;             /* BR TO CHK IF SUBSTITUTION */
*        SUBINDX='1'X;                  /* INITIALIZE $INBUFR INDEX  */
         LA    @12,1                                               0105
         STH   @12,SUBINDX(,WAPTR)                                 0105
*        MSG#=$TCMSG#;                  /* GET CALLER'S MSG NUMBER   */
         L     @12,$TCMSG#(,R1)                                    0106
         STH   @12,MSG#(,WAPTR)                                    0106
*        IF $TCWTO='1'B THEN            /*IF THE WRT TO OPER SW IS ON*/
         TM    $TCWTO(R1),B'00001000'                              0107
         BNO   @RF00107                                            0107
*          $CNSLFG='1'B;                /* TURN ON CONSOLE FLG-MSG IO*/
         OI    $CNSLFG(WAPTR),B'01000000'                          0108
*        $COUTAD=ADDR($WORK);           /* SET UP PTR TO 'OUT' MSG   */
@RF00107 LA    @12,$WORK(,WAPTR)                                   0109
         ST    @12,$COUTAD(,WAPTR)                                 0109
*        CECOMSW='0'B;                  /* SET CECOM SW OFF          */
         NI    CECOMSW,B'01111111'                                 0110
*        GEN  (BAL RETR,S20C01);        /* GO SET UP PREFIX ID'S     */
         BAL RETR,S20C01
*        IF $TCLOCM='1'B THEN           /* IF WE DO NOT HAVE TO LOC  */
         TM    $TCLOCM(R1),B'00010000'                             0112
         BO    @RT00112                                            0112
*          GOTO S20CEC2A;               /* MSG IN TBL THEN BR AROUND */
*        $COUTCT=ZERO;                  /* ZERO OUT 'OUT' COUNT AREA */
         L     @12,ZERO                                            0114
         ST    @12,$COUTCT(,WAPTR)                                 0114
*        GEN  (BAL RETR,S20CMLOC);      /* LOCATE MSG IN MSG TBL     */
         BAL RETR,S20CMLOC
*        IF Y=ZERO THEN                 /* IF NO MSG TEXT WAS FOUND  */
         SLR   @12,@12                                             0116
         IC    @12,Y(,WAPTR)                                       0116
         CL    @12,ZERO                                            0116
         BNE   @RF00116                                            0116
*          DO;                                                     0117
*            $COUTCT=I-1;               /* SET OUT CNT = PREFIX LNGTH*/
         LH    @12,I(,WAPTR)                                       0118
         N     @12,@CF00786                                        0118
         BCTR  @12,0                                               0118
         ST    @12,$COUTCT(,WAPTR)                                 0118
*            GOTO S20CEC2C;             /* BRANCH AROUND SUBSTITUTION*/
         B     S20CEC2C                                            0119
*          END;                                                    0120
*        $WORK(I:I+Y)=MSGDAT  ;         /* MOVE MSG TO $WORK+PREFIX  */
@RF00116 LH    @12,I(,WAPTR)                                       0121
         N     @12,@CF00786                                        0121
         ALR   @12,WAPTR                                           0121
         SLR   @10,@10                                             0121
         IC    @10,Y(,WAPTR)                                       0121
         EX    @10,@SM00791                                        0121
*        $COUTCT=$COUTCT+I-1;           /* ADD PREFIX LEN TO OUT CNT */
         LH    @12,I(,WAPTR)                                       0122
         N     @12,@CF00786                                        0122
         AL    @12,$COUTCT(,WAPTR)                                 0122
         BCTR  @12,0                                               0122
         ST    @12,$COUTCT(,WAPTR)                                 0122
*/***************************************/                         0123
*/* SUBSTITUTION CHECK                  */                         0123
*/***************************************/                         0123
*S20CEC2A:                                                         0123
*        IF $TCSUBDA^='1'B THEN         /* IF NO SUBSTITUTION        */
S20CEC2A TM    $TCSUBDA(R1),B'10000000'                            0123
         BNO   @RT00123                                            0123
*          GO TO S20CEC2B;              /* THEN BR AROUND            */
*        DO X=I TO $COUTCT BY 1;        /* LOOP UNTIL SUBSTITION DONE*/
         LH    @12,I(,WAPTR)                                       0125
         N     @12,@CF00786                                        0125
         ST    @12,X                                               0125
         B     @DE00125                                            0125
@DL00125 DS    0H                                                  0126
*          IF $WORK(X)=DELMTR THEN      /* IF ITS A SUB CHAR THEN    */
         ALR   @12,WAPTR                                           0126
         CLC   $WORK-1(1,@12),DELMTR                               0126
         BNE   @RF00126                                            0126
*            IF SUBINDX<81              /* CHK IF SUB DATA AVAILABLE */
*              THEN DO;                                            0127
         LH    @12,SUBINDX(,WAPTR)                                 0127
         N     @12,@CF00786                                        0127
         C     @12,@CF00736                                        0127
         BNL   @RF00127                                            0127
*                $WORK(X)=$INBUFR(SUBINDX);   /* MOVE SUB DATA TO MSG*/
         L     @10,X                                               0129
         ALR   @10,WAPTR                                           0129
         ALR   @12,WAPTR                                           0129
         MVC   $WORK-1(1,@10),$INBUFR-1(@12)                       0129
*                SUBINDX=SUBINDX+1;     /* UPDATE INDEX              */
         LH    @12,SUBINDX(,WAPTR)                                 0130
         N     @12,@CF00786                                        0130
         AL    @12,@CF00103                                        0130
         STH   @12,SUBINDX(,WAPTR)                                 0130
*                   END;                                           0131
*              ELSE                     /* IF SUB DATA NOT AVAILABLE */
*                $WORK(X)=BLANK;        /*  MOVE BLANK TO MSG        */
         B     @RC00127                                            0132
@RF00127 LR    @12,WAPTR                                           0132
         AL    @12,X                                               0132
         MVC   $WORK-1(1,@12),BLANK                                0132
*        END;                                                      0133
@RC00127 DS    0H                                                  0133
@RF00126 LA    @12,1                                               0133
         AL    @12,X                                               0133
         ST    @12,X                                               0133
@DE00125 CL    @12,$COUTCT(,WAPTR)                                 0133
         BNH   @DL00125                                            0133
* S20CEC2B:                                                        0134
*        IF $MULLNSW='1'B THEN          /* IF MULTIPLE LINE CALL     */
S20CEC2B TM    $MULLNSW(WAPTR),B'00100000'                         0134
         BNO   @RF00134                                            0134
*          DO;                                                     0135
*            $MULLNSW='0'B;             /* TURN OFF MULT LINE SW     */
         NI    $MULLNSW(WAPTR),B'11011111'                         0136
*            IF $LSTLNSW='1'B           /* IF LAST LINE OF MULT CALL */
*              THEN DO;                                            0137
         TM    $LSTLNSW(WAPTR),B'00010000'                         0137
         BNO   @RF00137                                            0137
*                $LSTLNSW='0'B;         /*  TURN OFF LAST LINE SW    */
         NI    $LSTLNSW(WAPTR),B'11101111'                         0139
*                GOTO S20CEC2C;         /*  BR TO CHK IF 2-WAY       */
         B     S20CEC2C                                            0140
*                   END;                                           0141
*              ELSE                     /* IF NOT LAST LINE          */
*                GOTO S20CEC2D;         /*  BR AROUND 2-WAY CHK      */
*          END;                                                    0143
*/***************************************/                         0144
*/* TWO-WAY MESSAGE CHECK               */                         0144
*/***************************************/                         0144
*S20CEC2C:                                                         0144
*        IF $TC2WAY='1'B THEN           /* IF IT IS A 2-WAY CALL THEN*/
@RF00134 DS    0H                                                  0144
S20CEC2C TM    $TC2WAY(R1),B'01000000'                             0144
         BNO   @RF00144                                            0144
*          DO;                                                     0145
*            $CINCT=$TCINCT;            /* SET UP 'IN' COUNT         */
         L     @12,$TCINCT(,R1)                                    0146
         ST    @12,$CINCT(,WAPTR)                                  0146
*            $CINADR=ADDR($INBUFR);     /* SET UP 'IN' ADDR          */
         LA    @10,$INBUFR(,WAPTR)                                 0147
         ST    @10,$CINADR(,WAPTR)                                 0147
*            R14=$CINADR;               /* PUT BUFFER ADDR INTO REG14*/
         LR    R14,@10                                             0148
*            R15=$CINCT;                /* PUT BUF LNGTH - 1 IN REG15*/
         LR    R15,@12                                             0149
*      GEN REFS(R15,S20CEC1A) ( EX R15,S20CEC1A);  /* ZERO OUT IN BUF*/
          EX R15,S20CEC1A
*            $CINADR=$CINADR+1;         /* ALLOW 1 BYTE FOR LNGTH FLD*/
         LA    @12,1                                               0151
         AL    @12,$CINADR(,WAPTR)                                 0151
         ST    @12,$CINADR(,WAPTR)                                 0151
*            $C2WAY='1'B;               /* INDICATE TO MSGI/O 2-WAY  */
         OI    $C2WAY(WAPTR),B'10000000'                           0152
*          END;                                                    0153
*/***************************************/                         0154
*/* CALLING MESSAGE I/O                 */                         0154
*/***************************************/                         0154
*S20CEC2D:                                                         0154
*        R4=R1;                         /* SAVE INPUT PARM PTR       */
@RF00144 DS    0H                                                  0154
S20CEC2D LR    R4,R1                                               0154
*        IF $TCNOID='1'B                /* IS MSG PREFIX TO BE DRPD  */
*              THEN                     /* IF YES DO THE FOLLOWING   */
         TM    $TCNOID(R1),B'00100000'                             0155
         BNO   @RF00155                                            0155
*                  DO;                                             0156
*                      $COUTAD=$COUTAD+7;   /* ADD PTR PAST PREFIX   */
         LA    @12,7                                               0157
         L     @10,$COUTAD(,WAPTR)                                 0157
         ALR   @10,@12                                             0157
         ST    @10,$COUTAD(,WAPTR)                                 0157
*                      $COUTCT=$COUTCT-7;   /* REDUCE MSG COUNT      */
         LCR   @12,@12                                             0158
         AL    @12,$COUTCT(,WAPTR)                                 0158
         ST    @12,$COUTCT(,WAPTR)                                 0158
*                  END;                                            0159
*        R1=ADDR($CCOMDAT);             /* SET POINTER TO PARM       */
@RF00155 LA    R1,$CCOMDAT(,WAPTR)                                 0160
*        CALL ISTCC011;                 /* CALL MESSAGE I/O          */
         L     @15,@CV00132                                        0161
         BALR  @14,@15                                             0161
*        R1=R4;                         /* RESTORE INPUT PARM        */
         LR    R1,R4                                               0162
*        IF $TCNOID='1'B                /* WAS ID DROPPED            */
*              THEN                     /* IF YES DO THE FOLLOWING   */
         TM    $TCNOID(R1),B'00100000'                             0163
         BNO   @RF00163                                            0163
*                  DO;                                             0164
*                      $COUTAD=$COUTAD-7;   /* RESET ADDRESS         */
         LA    @12,7                                               0165
         L     @10,$COUTAD(,WAPTR)                                 0165
         SLR   @10,@12                                             0165
         ST    @10,$COUTAD(,WAPTR)                                 0165
*                      $COUTCT=$COUTCT+7;   /* RESET COUNT           */
         AL    @12,$COUTCT(,WAPTR)                                 0166
         ST    @12,$COUTCT(,WAPTR)                                 0166
*                  END;                                            0167
*/***************************************/                         0168
*/* CHECK IF NECESARY TO WAIT ON I/O    */                         0168
*/***************************************/                         0168
*S20CEC2E:     ;                                                   0168
@RF00163 DS    0H                                                  0168
S20CEC2E DS    0H                                                  0169
*                                       /* WAS CALL DIRECT & MUST    */
*           IF $POSTFLG='1'B &          /* WE WAIT TILL I/O COMPLETE */
*           $TCKABND='1'B & $ABTERM='1'B                           0169
*              THEN                     /* DO THE FOLLOWING          */
         TM    $POSTFLG(WAPTR),B'01000000'                         0169
         BNO   @RF00169                                            0169
         TM    $TCKABND(R1),B'00000100'                            0169
         BNO   @RF00169                                            0169
         TM    $ABTERM(WAPTR),B'00000010'                          0169
         BNO   @RF00169                                            0169
*                  DO;                                             0170
*                       RCAPTR=$RCA;    /* GET PTR TO R. C. AREA     */
         L     RCAPTR,$RCA(,WAPTR)                                 0171
*                       R1=ADDR($TLTECB2);  /* SET UP REG 1          */
         LA    R1,$TLTECB2(,RCAPTR)                                0172
*    CALL I00C1002;     /* WAIT   @D32JPPW*/                       0173
         L     @15,@CV00742                                        0173
         BALR  @14,@15                                             0173
*                       GOTO S20CEC2E;  /* LOOP BACK FOR CHECK       */
         B     S20CEC2E                                            0174
*                  END;                                            0175
*        GOTO S20CEXIT;                 /* RETURN TO CALLER          */
         B     S20CEXIT                                            0176
*/***************************************/                         0177
*/* EXIT - RETURN TO CALLER             */                         0177
*/***************************************/                         0177
*S20CRC08:                                                         0177
*        R15=RC08;                      /* SET ERR RETURN CODE       */
S20CRC08 SLR   R15,R15                                             0177
         IC    R15,RC08                                            0177
*S20CEXIT:                                                         0178
*        R13 = SVESC020(2);             /* PICK UP PREVIOUS SAVE AREA*/
S20CEXIT L     R13,SVESC020+4(,WAPTR)                              0178
*        RETURN;                        /* RETURN TO CALLER          */
@EL00001 DS    0H                                                  0179
@EF00001 DS    0H                                                  0179
@ER00001 L     @14,12(,@13)                                        0179
         LM    @00,@12,20(@13)                                     0179
         BR    @14                                                 0179
*        GEN  (EJECT);                                             0180
         EJECT
*/********************************************************************/
*/*                         T C E C  2                               */
*/*                                                                  */
*/*  THIS SECTION HANDLES ALL 'TCEC' CALLS FOR MULTIPLE LINE OUTPUT  */
*/*  REQUESTS. IT WILL PRINT ALL MESSAGES WITH THE SAME MESSAGE #    */
*/*  IF ITS CORRESPONDING 'MASK' BIT IS O  IN THE '$TCMASK' PARAMETER*/
*/*  OF THE 'TCEC' MACRO CALL.                                       */
*/********************************************************************/
*S20CEC03:  ENTRY;                      /* ENTRY POINT FOR MUL-LN    */
@EP00181 DS    0H                                                  0182
*        SVESC120(2) = R13;             /* SET UP BACK PTR           */
         ST    R13,SVESC120+4(,WAPTR)                              0182
*        BACKSAVE(3)  = ADDR(SVESC120); /* PUT FORWARD CHAIN IN LAST */
         LA    @12,SVESC120(,WAPTR)                                0183
         ST    @12,BACKSAVE+8(,R13)                                0183
*        R13 = ADDR(SVESC120);          /* POINT TO SAVE AREA FOR MOD*/
         LR    R13,@12                                             0184
*        PTRSAV=R1;                     /* SAVE PTR TO ORIG PARM LST */
         ST    R1,PTRSAV(,WAPTR)                                   0185
*        SUBINDX='1'X;                  /* INITIALIZE $INBUFR INDEX  */
         LA    @12,1                                               0186
         STH   @12,SUBINDX(,WAPTR)                                 0186
*        IF $TCWTO='1'B THEN            /* IF WRT TO OPER SW IS ON   */
         TM    $TCWTO(R1),B'00001000'                              0187
         BNO   @RF00187                                            0187
*            $CNSLFG='1'B;              /* TURN ON CONSOL FLG-MSG I/O*/
         OI    $CNSLFG(WAPTR),B'01000000'                          0188
*        MSG#=$TCMSG#;                  /* GET CALLER'S MSG NUMBER   */
@RF00187 L     @12,$TCMSG#(,R1)                                    0189
         STH   @12,MSG#(,WAPTR)                                    0189
*        $COUTAD=ADDR($WORK);           /* SET UP OUT ADDR           */
         LA    @12,$WORK(,WAPTR)                                   0190
         ST    @12,$COUTAD(,WAPTR)                                 0190
*        CECOMSW='0'B;                  /* SET CECOM SW OFF          */
         NI    CECOMSW,B'01111111'                                 0191
*        GEN   (BAL RETR,S20C01);       /* GO SET UP MSG PREFIX      */
         BAL RETR,S20C01
*        GEN   (BAL RETR,S20CMLOC);     /* GO LOCATE MSG IN TBL      */
         BAL RETR,S20CMLOC
*        IF Y=ZERO THEN                 /* IF NO MSG TEXT WAS FOUND  */
         L     @12,ZERO                                            0194
         SLR   @10,@10                                             0194
         IC    @10,Y(,WAPTR)                                       0194
         CLR   @12,@10                                             0194
         BNE   @RF00194                                            0194
*          DO;                                                     0195
*            $COUTCT=I-1;               /* SET OUT CNT = PREFIX LNGTH*/
         LH    @10,I(,WAPTR)                                       0196
         N     @10,@CF00786                                        0196
         BCTR  @10,0                                               0196
         ST    @10,$COUTCT(,WAPTR)                                 0196
*            $CINADR=ZERO;              /* ZERO OUT IN ADR FIELD     */
         ST    @12,$CINADR(,WAPTR)                                 0197
*            $CINCT=ZERO;               /* ZERO OUT IN COUNT FIELD   */
         ST    @12,$CINCT(,WAPTR)                                  0198
*            $LSTLNSW='1'B;             /* TURN ON LAST LINE SW      */
         OI    $LSTLNSW(WAPTR),B'00010000'                         0199
*            GOTO S20CEC3F;             /* BR TO PRT LINE            */
         B     S20CEC3F                                            0200
*          END;                                                    0201
*        MMSG#=MSGDAT(1:3);             /* SAVE MSG NO. (EBCDIC)     */
@RF00194 MVC   MMSG#(3,WAPTR),MSGDAT(MSGPTR)                       0202
*        MSKBIT=0;                      /* INITIALIZE CTR TO ZERO    */
         MVI   MSKBIT(WAPTR),X'00'                                 0203
*/***************************************/                         0204
*/* SEARCH FOR FIRST LINE TO BE PRINTED */                         0204
*/***************************************/                         0204
*S20CEC3A:                                                         0204
*        CNTSAV=ZERO;                   /* ZERO OUT SAVE AREA        */
S20CEC3A L     @12,ZERO                                            0204
         ST    @12,CNTSAV(,WAPTR)                                  0204
*        CNTSAV(4:4)=Y;                 /* SAVE MSG LENGTH           */
         MVC   CNTSAV+3(1,WAPTR),Y(WAPTR)                          0205
*        MB1=(MSKBIT/8)+1;              /* SET UP TO COMP EACH BYTE  */
         LA    @12,1                                               0206
         SLR   @10,@10                                             0206
         IC    @10,MSKBIT(,WAPTR)                                  0206
         LR    @00,@10                                             0206
         SRL   @00,3                                               0206
         ALR   @00,@12                                             0206
         ST    @00,MB1                                             0206
*        MB2=(MSKBIT//8)+1;             /* GET REMAINDER             */
         LR    @06,@10                                             0207
         SRDA  @06,32                                              0207
         D     @06,@CF00040                                        0207
         ALR   @06,@12                                             0207
         ST    @06,MB2                                             0207
*        R1=PTRSAV;                     /* SET UP BASE REG           */
         L     R1,PTRSAV(,WAPTR)                                   0208
*        IF (($TCMASK(MB1)) & (MSKTBL(MB2)))^=0 THEN /*BIT ON-PRT MSG*/
         LR    @07,@00                                             0209
         SLR   @00,@00                                             0209
         IC    @00,$TCMASK-1(@07,R1)                               0209
         SLR   @07,@07                                             0209
         IC    @07,MSKTBL-1(@06)                                   0209
         NR    @00,@07                                             0209
         LTR   @00,@00                                             0209
         BNZ   @RT00209                                            0209
*          GOTO S20CEC3C;               /* BR AROUND                 */
*        MSKBIT=MSKBIT+1;               /* UPDATE TO NXT BIT         */
         ALR   @10,@12                                             0211
         STC   @10,MSKBIT(,WAPTR)                                  0211
*        MSGPTR=MSGPTR+CNTSAV;          /* UPDATE MSG PTR TO NXT MSG */
         AL    MSGPTR,CNTSAV(,WAPTR)                               0212
*        Y = MSGDAT;                    /* GET LEN OF THAT MSG       */
         MVC   Y(1,WAPTR),MSGDAT(MSGPTR)                           0213
*        MSGPTR=MSGPTR+1;               /* UPDATE PTR TO MSG TXT     */
         ALR   MSGPTR,@12                                          0214
*        IF MMSG#=MSGDAT(1:3)           /* IF PRESENT=LST MSG NUMBER */
*          THEN GOTO S20CEC3A;          /* BR BACK AND TEST MASK BIT */
         CLC   MMSG#(3,WAPTR),MSGDAT(MSGPTR)                       0215
         BE    @RT00215                                            0215
*          ELSE GOTO S20CEC3H;          /* ELSE RETURN TO CALLER     */
         B     S20CEC3H                                            0217
*S20CEC3B:                                                         0218
*        R1=PTRSAV;                     /* SET UP BASE REG           */
S20CEC3B L     R1,PTRSAV(,WAPTR)                                   0218
*/***************************************/                         0219
*/* FORMAT LINE                         */                         0219
*/***************************************/                         0219
*S20CEC3C:                                                         0219
*        GEN   (BAL RETR,S20C01);                                  0219
S20CEC3C BAL RETR,S20C01
*        GEN   (BAL RETR,S20C01);                                  0220
         BAL RETR,S20C01
*        $WORK(I)=BLANK;                /* BLANK OUT                 */
         LH    @12,I(,WAPTR)                                       0221
         N     @12,@CF00786                                        0221
         ALR   @12,WAPTR                                           0221
         MVC   $WORK-1(1,@12),BLANK                                0221
*        $WORK(I+1:N)=$WORK(I:N-1);     /* $WORK BUFFER              */
         LH    @12,I(,WAPTR)                                       0222
         N     @12,@CF00786                                        0222
         ALR   @12,WAPTR                                           0222
         LH    @10,I(,WAPTR)                                       0222
         N     @10,@CF00786                                        0222
         LH    @09,N                                               0222
         N     @09,@CF00786                                        0222
         SLR   @09,@10                                             0222
         BCTR  @09,0                                               0222
         ALR   @10,WAPTR                                           0222
         MVC   @TS00001(256),$WORK-1(@10)                          0222
         EX    @09,@SM00796                                        0222
*        $WORK(I:I+Y)=MSGDAT;           /* MOVE MSG TO $WORK+PREFIX  */
         LH    @12,I(,WAPTR)                                       0223
         N     @12,@CF00786                                        0223
         ALR   @12,WAPTR                                           0223
         SLR   @10,@10                                             0223
         IC    @10,Y(,WAPTR)                                       0223
         EX    @10,@SM00791                                        0223
*        $COUTCT = CNTSAV+I-1;          /* ADD PREFIX LEN TO OUT CNT */
         LH    @12,I(,WAPTR)                                       0224
         N     @12,@CF00786                                        0224
         AL    @12,CNTSAV(,WAPTR)                                  0224
         BCTR  @12,0                                               0224
         ST    @12,$COUTCT(,WAPTR)                                 0224
*        $CINADR=ZERO;                  /* ZERO OUT IN ADDR FLD      */
         L     @12,ZERO                                            0225
         ST    @12,$CINADR(,WAPTR)                                 0225
*        $CINCT=ZERO;                   /* ZERO OUT IN COUNT FLD     */
         ST    @12,$CINCT(,WAPTR)                                  0226
*/***************************************/                         0227
*/* SEARCH FOR NEXT LINE TO BE PRINTED  */                         0227
*/* IN ORDER TO KNOW WHETHER THE LINE   */                         0227
*/* FORMATTED ABOVE IS THE LAST LINE    */                         0227
*/***************************************/                         0227
*S20CEC3D:                                                         0227
*        MSKBIT=MSKBIT+1;               /* UPDATE TO NXT BIT         */
S20CEC3D LA    @12,1                                               0227
         SLR   @10,@10                                             0227
         IC    @10,MSKBIT(,WAPTR)                                  0227
         ALR   @10,@12                                             0227
         STC   @10,MSKBIT(,WAPTR)                                  0227
*        MSGPTR=MSGPTR+CNTSAV;          /* UPDATE MSG PTR TO NXT MSG */
         AL    MSGPTR,CNTSAV(,WAPTR)                               0228
*        Y = MSGDAT;                    /* GET LEN OF THAT MSG       */
         MVC   Y(1,WAPTR),MSGDAT(MSGPTR)                           0229
*        CNTSAV=ZERO;                   /* ZERO OUT SAVE AREA        */
         L     @10,ZERO                                            0230
         ST    @10,CNTSAV(,WAPTR)                                  0230
*        CNTSAV(4:4)=Y;                 /* SAVE MSG LENGTH           */
         MVC   CNTSAV+3(1,WAPTR),Y(WAPTR)                          0231
*        MSGPTR=MSGPTR+1;               /* UPDATE PTR TO MSG TXT     */
         ALR   MSGPTR,@12                                          0232
*        IF MMSG#^=MSGDAT(1:3) THEN     /* CHK IF THE MSG NUM CHANGED*/
         CLC   MMSG#(3,WAPTR),MSGDAT(MSGPTR)                       0233
         BE    @RF00233                                            0233
*          DO;                                                     0234
*            $LSTLNSW='1'B;             /*  TURN ON LAST LINE SW     */
         OI    $LSTLNSW(WAPTR),B'00010000'                         0235
*            GOTO S20CEC3F;             /*  BR TO PRT LAST LINE      */
         B     S20CEC3F                                            0236
*          END;                                                    0237
*        MB1=(MSKBIT/8)+1;              /* SET UP TO COMP EACH BYTE  */
@RF00233 LA    @12,1                                               0238
         SLR   @10,@10                                             0238
         IC    @10,MSKBIT(,WAPTR)                                  0238
         LR    @00,@10                                             0238
         SRL   @00,3                                               0238
         ALR   @00,@12                                             0238
         ST    @00,MB1                                             0238
*        MB2=(MSKBIT//8)+1;             /* GET REMAINDER             */
         LR    @06,@10                                             0239
         SRDA  @06,32                                              0239
         D     @06,@CF00040                                        0239
         ALR   @06,@12                                             0239
         ST    @06,MB2                                             0239
*        IF (($TCMASK(MB1)) & (MSKTBL(MB2)))=0 THEN /*BIT OFF-BR     */
         LR    @12,@00                                             0240
         SLR   @10,@10                                             0240
         IC    @10,$TCMASK-1(@12,R1)                               0240
         SLR   @12,@12                                             0240
         IC    @12,MSKTBL-1(@06)                                   0240
         NR    @10,@12                                             0240
         LTR   @10,@10                                             0240
         BZ    @RT00240                                            0240
*          GOTO S20CEC3D;               /* CK NXT BIT                */
*/***************************************/                         0242
*/* CALLING CECOM (TCEC)                */                         0242
*/***************************************/                         0242
*S20CEC3F:                                                         0242
*        $MULLNSW='1'B;                 /* TURN ON MULTIPLE LINE SW  */
S20CEC3F OI    $MULLNSW(WAPTR),B'00100000'                         0242
*        $TCECM='1'B;                   /* TURN ON TCEC SW           */
         OI    $TCECM(WAPTR),B'00000001'                           0243
*        GEN   (MVC MYPARM(9,WAPTR),0(R1));                        0244
         MVC MYPARM(9,WAPTR),0(R1)
*        R1=ADDR(MYPARM);               /* SET UP ADDRESSABILITY     */
         LA    R1,MYPARM(,WAPTR)                                   0245
*        IF $TCKABND='1'B & $ABTERM='1'B      /* IF BOTH ABENDS ON   */
*          THEN                                                    0246
         TM    $TCKABND(R1),B'00000100'                            0246
         BNO   @RF00246                                            0246
         TM    $ABTERM(WAPTR),B'00000010'                          0246
         BNO   @RF00246                                            0246
*            CALL ISTSC020;             /* CALL TCEC DIRECTLY        */
         L     @15,@CA00028                                        0247
         BALR  @14,@15                                             0247
*          ELSE                         /* IF NOT ABENDING           */
*            CALL #EXIT;                /* CALL TCEC VIA RESOURCE MGR*/
         B     @RC00246                                            0248
@RF00246 L     @15,#EXITA(,WAPTR)                                  0248
         BALR  @14,@15                                             0248
*        IF Y=ZERO THEN                 /* IF LINE PRINTED WAS NULL  */
@RC00246 SLR   @12,@12                                             0249
         IC    @12,Y(,WAPTR)                                       0249
         CL    @12,ZERO                                            0249
         BE    @RT00249                                            0249
*          GOTO S20CEC3H;               /* THEN RETURN               */
*        IF MMSG#=MSGDAT(1:3) THEN      /* CHECK IF LAST LINE        */
         CLC   MMSG#(3,WAPTR),MSGDAT(MSGPTR)                       0251
         BE    @RT00251                                            0251
*          GOTO S20CEC3B;               /*  NO, BR FOR NEXT MSG      */
*/***************************************/                         0253
*/* EXIT - RETURN TO CALLER             */                         0253
*/***************************************/                         0253
*S20CEC3H:                                                         0253
*        R13=SVESC120(2);               /* PICK UP PREVIOUS SAVE AREA*/
S20CEC3H L     R13,SVESC120+4(,WAPTR)                              0253
*        RETURN;                        /* RETURN TO CALLER          */
         B     @EL00001                                            0254
*        GEN  (EJECT);                                             0255
         EJECT
*/********************************************************************/
*/* THIS SUBROUTINE TAKES CARE OF PUTTING THE PREFIX ID ON THE MSG.  */
*/* IF THE PREFIX IS FOR A TOLTEP MSG THEN                           */
*/*      'ITAXXXX' WHERE XXXX IS INCLUDED AS PART OF EACH MSG TEXT   */
*/*   IN DOS 'FXXXX' WHERE XXXX IS AS ABOVE                          */
*/* IF THE PREFIX IS FOR AN OLT MSG THEN                             */
*/*      'IXXNNNZ' WHERE XX  = COMPONENT NAME SUPPLIED BY THE OLT    */
*/*                      NNN = MSG NUMBER SUPPLIED BY THE OLT        */
*/*                      Z   = 'I' OR 'D' INDICATING 1-WAY OR 2-WAY  */
*/*      'ITA100I' OR 'ITA101D' IS USED WHEN THE OLT FAILS TO SUPPLY */
*/*                             THE COMPONENT NAME                   */
*/*   IN DOS THE COMPONENT NAME IS NOT USED                          */
*/*      'F100I' OR 'F101D'                                          */
*/********************************************************************/
*S20C01:                                                           0256
*        RETSAV=R14;                    /* SAVE RETURN ADDRESS       */
S20C01   ST    R14,RETSAV(,WAPTR)                                  0256
*        I='0'X;                        /* ZERO OUT INDEX VALUE      */
         SLR   @12,@12                                             0257
         STH   @12,I(,WAPTR)                                       0257
*        IF $TCKIDON='1'B THEN          /* IF ID ON BIT SET THEN     */
         TM    $TCKIDON(R1),B'00000010'                            0258
         BO    @RT00258                                            0258
*          GOTO S20C03;                 /* RETURN TO THE CALLER      */
*        $WORK(1)=BLANK;                /* BLANK OUT                 */
         MVC   $WORK(1,WAPTR),BLANK                                0260
*        $WORK(2:N)=$WORK(1:N-1);       /* $WORK BUFFER              */
         LH    @12,N                                               0261
         N     @12,@CF00786                                        0261
         BCTR  @12,0                                               0261
         BCTR  @12,0                                               0261
         MVC   @TS00001(256),$WORK(WAPTR)                          0261
         EX    @12,@SM00800                                        0261
*        IF CECOMSW='1'B THEN           /* IF PREFIX IS FOR OLT MSG  */
         TM    CECOMSW,B'10000000'                                 0262
         BO    @RT00262                                            0262
*          GOTO S20C02;                 /*   THEN BR                 */
*        IF $DRIVER = DOS87             /* IF SYSTEM IS DOS          */
*          THEN DO;                                                0264
         CLC   $DRIVER(1,WAPTR),DOS87                              0264
         BNE   @RF00264                                            0264
*            I=1;                       /* GET LENGTH OF INT PREFIX  */
         MVC   I(2,WAPTR),@CH00103                                 0266
*            $WORK(1)=DOSPREFX;         /* MOVE PREFIX TO MSG        */
         MVC   $WORK(1,WAPTR),DOSPREFX                             0267
*               END;                                               0268
*          ELSE DO;                     /*IF SYSTEM IS OTHER THAN DOS*/
         B     @RC00264                                            0269
@RF00264 DS    0H                                                  0270
*            I=LENGTH(ITA);             /* GET LENGTH OF INT PREFIX  */
         LA    @12,3                                               0270
         STH   @12,I(,WAPTR)                                       0270
*            $WORK(1:I)=ITA;            /* MOVE PREFIX TO MSG        */
         BCTR  @12,0                                               0271
         EX    @12,@SM00802                                        0271
*               END;                                               0272
*        GOTO S20C03;                   /* BR AROUND                 */
         B     S20C03                                              0273
*S20C02:                                                           0274
*        IF #MSGIDAC^='0000'X & $DRIVER^=DOS87 /*IF OLT GAVE A MSGID */
*          THEN GOTO S20C02A;           /* AND SYSTEM NOT DOS, BR    */
S20C02   CLC   #MSGIDAC(2,WAPTR),@CB00767                          0274
         BE    @RF00274                                            0274
         CLC   $DRIVER(1,WAPTR),DOS87                              0274
         BNE   @RT00274                                            0274
*        IF $DRIVER = DOS87             /* IF SYSTEM IS DOS          */
*          THEN                                                    0276
@RF00274 CLC   $DRIVER(1,WAPTR),DOS87                              0276
         BNE   @RF00276                                            0276
*          IF $C2WAY='1'B               /*  IF ITS A 2-WAY REQUEST   */
*            THEN DO;                                              0277
         TM    $C2WAY(WAPTR),B'10000000'                           0277
         BNO   @RF00277                                            0277
*              I=LENGTH(DOS2WAY);       /*  GET LENGTH OF PREFIX     */
         LA    @12,6                                               0279
         STH   @12,I(,WAPTR)                                       0279
*              $WORK(1:I)=DOS2WAY;      /*  MOVE PREFIX TO MSG       */
         BCTR  @12,0                                               0280
         EX    @12,@SM00804                                        0280
*                 END;                                             0281
*            ELSE DO;                   /*  IF ITS A 1-WAY REQUEST   */
         B     @RC00277                                            0282
@RF00277 DS    0H                                                  0283
*              I=LENGTH(DOS1WAY);       /*  GET LENGTH OF PREFIX     */
         LA    @12,6                                               0283
         STH   @12,I(,WAPTR)                                       0283
*              $WORK(1:I)=DOS1WAY;      /*  MOVE PREFIX TO MSG       */
         BCTR  @12,0                                               0284
         EX    @12,@SM00806                                        0284
*                 END;                                             0285
*          ELSE                         /*IF SYSTEM IS OTHER THAN DOS*/
*          IF $C2WAY='1'B               /* IF ITS A 2-WAY MSG        */
*            THEN DO;                                              0286
         B     @RC00276                                            0286
@RF00276 TM    $C2WAY(WAPTR),B'10000000'                           0286
         BNO   @RF00286                                            0286
*              I=LENGTH(TWOWAY);        /* GET LENGTH OF PREFIX      */
         LA    @12,8                                               0288
         STH   @12,I(,WAPTR)                                       0288
*              $WORK(1:I)=TWOWAY;       /* MOVE PREFIX TO MSG        */
         BCTR  @12,0                                               0289
         EX    @12,@SM00808                                        0289
*                 END;                                             0290
*            ELSE DO;                   /* IF ITS A 1-WAY REQUEST    */
         B     @RC00286                                            0291
@RF00286 DS    0H                                                  0292
*              I=LENGTH(ONEWAY);        /* GET LENGTH OF PREFIX      */
         LA    @12,8                                               0292
         STH   @12,I(,WAPTR)                                       0292
*              $WORK(1:I)=ONEWAY;       /* MOVE PREFIX TO MSG        */
         BCTR  @12,0                                               0293
         EX    @12,@SM00810                                        0293
*                 END;                                             0294
*        GOTO S20C03;                   /* BR AROUND                 */
         B     S20C03                                              0295
*S20C02A:                                                          0296
*        $WORK(1)=LETTERI;              /* BUILDING MSGID -FIRST LET */
S20C02A  MVC   $WORK(1,WAPTR),LETTERI                              0296
*        $WORK(2:3)=#MSGIDAC;           /*  -COMPONENT NAME          */
         MVC   $WORK+1(2,WAPTR),#MSGIDAC(WAPTR)                    0297
*        $WORK(4:6)=CEOUTMSG(1:3);      /*  -MSG NUMBER              */
         L     @12,$CEOUTAD(,CECMAP)                               0298
         MVC   $WORK+3(3,WAPTR),CEOUTMSG(@12)                      0298
*        $CEOUTAD=$CEOUTAD+3;           /* REMOVE MSG# FROM MSG TEXT */
         LA    @10,3                                               0299
         ALR   @12,@10                                             0299
         ST    @12,$CEOUTAD(,CECMAP)                               0299
*        $COUTCT=$COUTCT-3;             /* CORRECT MSG LENGTH CTR    */
         LCR   @10,@10                                             0300
         AL    @10,$COUTCT(,WAPTR)                                 0300
         ST    @10,$COUTCT(,WAPTR)                                 0300
*        IF $C2WAY='1'B                 /* CHK IF 2-WAY REQUESTED    */
*          THEN $WORK(7)=LETTERD;       /*  YES, RESPONSE REQUESTED  */
         TM    $C2WAY(WAPTR),B'10000000'                           0301
         BNO   @RF00301                                            0301
         MVC   $WORK+6(1,WAPTR),LETTERD                            0302
*          ELSE $WORK(7)=LETTERI;       /*  NO, INFORMATIONAL        */
         B     @RC00301                                            0303
@RF00301 MVC   $WORK+6(1,WAPTR),LETTERI                            0303
*        I=8;                           /* SET INDEX 1ST BYTE PAST ID*/
@RC00301 LA    @12,8                                               0304
         STH   @12,I(,WAPTR)                                       0304
*        $WORK(I)=BLANK;                /* PUT BLANK BETWEEN ID & MSG*/
         ALR   @12,WAPTR                                           0305
         MVC   $WORK-1(1,@12),BLANK                                0305
*S20C03:                                                           0306
*        I=I+1;                         /* UPDATE INDEX VALUE        */
S20C03   LA    @12,1                                               0306
         LH    @10,I(,WAPTR)                                       0306
         N     @10,@CF00786                                        0306
         ALR   @12,@10                                             0306
         STH   @12,I(,WAPTR)                                       0306
*        RETR=RETSAV;                   /* RELOAD RETURN ADDRESS     */
         L     RETR,RETSAV(,WAPTR)                                 0307
*        GEN  (BR R14);                 /* RETURN TO CALLER          */
         BR R14
*        GEN  (EJECT);                                             0309
         EJECT
* /*******************************************************************/
*/* S20CMLOC: THIS SUBROUTINE  LOCATES THE MSG BY DETERMINING WHICH  */
*/* GROUP ITS IN (100-199,200-299,ETC) IT THEN CALL THAT MODULE PASS-*/
*/* ING IT THE 'MSG#' IN '$BUFFER' (WITHIN RCA).                     */
*/********************************************************************/
*        GEN   (SPACE);                                            0310
         SPACE
*S20CMLOC:                                                         0311
*        RETSAV=RETR;                   /* SAVE RETURN ADDR          */
S20CMLOC ST    RETR,RETSAV(,WAPTR)                                 0311
*        MSGNUM=ZERO;                   /* ZERO OUT WORK AREA        */
         L     @12,ZERO                                            0312
         ST    @12,MSGNUM(,WAPTR)                                  0312
*        MSGNUM(3:4)=MSG#;              /* SET UP MSG NO. FOR CALL   */
         LH    @12,MSG#(,WAPTR)                                    0313
         N     @12,@CF00786                                        0313
         STCM  @12,3,MSGNUM+2(WAPTR)                               0313
*        IF MSG# >99 & MSG# <400 THEN   /* IF MSG# BETWEEN 99-400    */
         C     @12,@CF00774                                        0314
         BNH   @RF00314                                            0314
         C     @12,@CF00775                                        0314
         BL    @RT00314                                            0314
*          GOTO CALL123;                /* GO CALL ISTEC123          */
*        IF MSG# >399 & MSG# <700 THEN  /* IF MSG# BETWEEN 399-700   */
@RF00314 CLC   MSG#(2,WAPTR),@CH00777                              0316
         BNH   @RF00316                                            0316
         CLC   MSG#(2,WAPTR),@CH00778                              0316
         BL    @RT00316                                            0316
*          GOTO CALL456;                /* GO CALL ISTEC456          */
*        GEN(SPACE);                                               0318
@RF00316 DS    0H                                                  0318
         SPACE
*        CALL  ISTEC789;                /* GO FIND MSG (700-999)     */
         L     @15,@CV00137                                        0319
         BALR  @14,@15                                             0319
*        GOTO CALLRET;                                             0320
         B     CALLRET                                             0320
*CALL456:                                                          0321
*        CALL  ISTEC456;                /* GO FIND MSG (400-699)     */
CALL456  L     @15,@CV00136                                        0321
         BALR  @14,@15                                             0321
*        GOTO CALLRET;                  /* RETURN TO TCEC            */
         B     CALLRET                                             0322
*CALL123:                                                          0323
*        CALL  ISTEC123;                /* GO FIND MSG (100-399)     */
CALL123  L     @15,@CV00135                                        0323
         BALR  @14,@15                                             0323
*CALLRET:                                                          0324
*        Y=$COUTCT(4:4);                /* PUT MSG LENGTH IN Y       */
CALLRET  MVC   Y(1,WAPTR),$COUTCT+3(WAPTR)                         0324
*        MSGPTR=MSGNUM;                 /* GET PTR TO MSG TXT        */
         L     MSGPTR,MSGNUM(,WAPTR)                               0325
*        RETR=RETSAV;                   /* RESTORE RETURN ADDR       */
         L     RETR,RETSAV(,WAPTR)                                 0326
*        GEN   (BR RETR);               /* RETURN TO CALLER          */
         BR RETR
*        GEN   (EJECT);                                            0328
         EJECT
*                                                                  0329
*/* ATDSPLY   INVOKED. */                                          0329
*/********************************************************************/
*/* THERE HAVE BEEN NO ATBUILD INCLUSIONS IN THIS COMPILATION.       */
*/********************************************************************/
*/* END OF ATDSPLY. */                                             0329
*  END;                                                            0329
         B     @EL00001                                            0329
@DATA    DS    0H
@CH00777 DC    H'399'
@CH00778 DC    H'700'
@SM00787 MVC   $WORK-1(0,@12),CEOUTMSG(@08)
@SM00791 MVC   $WORK-1(0,@12),MSGDAT(MSGPTR)
@SM00796 MVC   $WORK(0,@12),@TS00001
@SM00800 MVC   $WORK+1(0,WAPTR),@TS00001
@SM00802 MVC   $WORK(0,WAPTR),ITA
@SM00804 MVC   $WORK(0,WAPTR),DOS2WAY
@SM00806 MVC   $WORK(0,WAPTR),DOS1WAY
@SM00808 MVC   $WORK(0,WAPTR),TWOWAY
@SM00810 MVC   $WORK(0,WAPTR),ONEWAY
         DS    0F
         DS    0F
@CF00103 DC    F'1'
@CH00103 EQU   @CF00103+2
@CF00040 DC    F'8'
@CF00726 DC    F'61'
@CF00736 DC    F'81'
@CF00774 DC    F'99'
@CF00775 DC    F'400'
@CF00786 DC    XL4'0000FFFF'
@CA00028 DC    A(ISTSC020)
@CV00132 DC    V(ISTCC011)
@CV00135 DC    V(ISTEC123)
@CV00136 DC    V(ISTEC456)
@CV00137 DC    V(ISTEC789)
@CV00742 DC    V(I00C1002)
         DS    0D
X        DC    F'0'
MB1      DC    F'0'
MB2      DC    F'0'
ZERO     DC    XL4'0'
N        DC    AL2(100)
@TS00001 DS    CL256
@CB00767 DC    X'0000'
ONEWAY   DC    CL8'ITA100I '
TWOWAY   DC    CL8'ITA101D '
ITA      DC    CL3'ITA'
DOS1WAY  DC    CL6'F100I '
DOS2WAY  DC    CL6'F101D '
DOSPREFX DC    CL1'F'
DOS87    DC    X'87'
BLANK    DC    CL1' '
RC08     DC    X'08'
DELMTR   DC    CL1'%'
LETTERI  DC    CL1'I'
LETTERD  DC    CL1'D'
SW037    DS    BL1
         ORG   SW037
CECOMSW  DS    BL1
SPARESW  EQU   SW037+0
         ORG   SW037+1
MSKTBL   DC    XL1'80'
         DC    XL1'40'
         DC    XL1'20'
         DC    XL1'10'
         DC    XL1'08'
         DC    XL1'04'
         DC    XL1'02'
         DC    XL1'01'
         DS    8XL1
         DS    CL1
PATCH    DC    40F'0'
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
CECMAP   EQU   @04
MSGPTR   EQU   @05
R14      EQU   @14
R15      EQU   @15
R1       EQU   @01
R4       EQU   @04
RCAPTR   EQU   @03
R13      EQU   @13
RETR     EQU   @14
WAPTR    EQU   @02
TCECMAP  EQU   0
$TCMSG#  EQU   TCECMAP
$TCINCT  EQU   TCECMAP+4
$TCFLG   EQU   TCECMAP+8
$TCSUBDA EQU   $TCFLG
$TC2WAY  EQU   $TCFLG
$TCNOID  EQU   $TCFLG
$TCLOCM  EQU   $TCFLG
$TCWTO   EQU   $TCFLG
$TCKABND EQU   $TCFLG
$TCKIDON EQU   $TCFLG
$TCMASK  EQU   TCECMAP+9
CEOUTMSG EQU   0
BACKSAVE EQU   0
MSGDAT   EQU   0
$RCAAREA EQU   0
$POINTER EQU   $RCAAREA+100
$TLTECB2 EQU   $POINTER+28
$TRTBLA  EQU   $POINTER+124
$CONSTNT EQU   $RCAAREA+244
$RCAFLG  EQU   $RCAAREA+604
TOLTEPWA EQU   0
$SCTTBLE EQU   TOLTEPWA
$TESTOPT EQU   $SCTTBLE+2
$ERROPT  EQU   $SCTTBLE+3
$DRIVER  EQU   $SCTTBLE+6
$PDEVFLG EQU   $SCTTBLE+10
$CDSFLGS EQU   $SCTTBLE+11
$CDS8T19 EQU   $SCTTBLE+20
$EXECFLG EQU   $SCTTBLE+33
$OLTFLGS EQU   $SCTTBLE+36
$OLTFLG2 EQU   $SCTTBLE+37
$TOTFLG1 EQU   $SCTTBLE+38
$ROUTMSK EQU   $SCTTBLE+40
#MSGIDAC EQU   $SCTTBLE+78
$CDA     EQU   TOLTEPWA+100
$RCA     EQU   $CDA+44
$OLTPTR  EQU   $CDA+52
$HIMOREC EQU   $CDA+60
$COMMFLG EQU   TOLTEPWA+224
$FLAG1   EQU   $COMMFLG
$CNSLFG  EQU   $FLAG1
$FLAG2   EQU   $COMMFLG+1
$FLAG3   EQU   $COMMFLG+2
$FLAG4   EQU   $COMMFLG+3
$FLAG5   EQU   $COMMFLG+4
$EOJ     EQU   $FLAG5
$CANCEL  EQU   $EOJ
$FLAG6   EQU   $COMMFLG+5
$ABNDBIT EQU   $FLAG6
$ABTERM  EQU   $ABNDBIT
$FLAG7   EQU   $COMMFLG+6
$FLAG8   EQU   $COMMFLG+7
$TCECM   EQU   $FLAG8
$FLAG9   EQU   $COMMFLG+8
$MULLNSW EQU   $FLAG9
$LSTLNSW EQU   $FLAG9
$FLAG10  EQU   $COMMFLG+9
$FLAG11  EQU   $COMMFLG+10
$FLAG12  EQU   $COMMFLG+11
$POSTFLG EQU   $FLAG12
$FLAG13  EQU   $COMMFLG+12
$DEVTBLE EQU   TOLTEPWA+240
$DEVCDS  EQU   $DEVTBLE
$DEVUNAD EQU   $DEVCDS
@NM00044 EQU   $DEVUNAD+2
$DEVFEAT EQU   $DEVCDS+4
$DEVCDSF EQU   $DEVCDS+9
$DEVSDCF EQU   $DEVCDS+10
$$SYMNME EQU   $DEVCDS+12
$DEVFLG1 EQU   $DEVTBLE+20
$EVNCPLT EQU   $DEVFLG1
$ATTNEXP EQU   $DEVFLG1
$INTOCC  EQU   $DEVFLG1
$DEVFLG2 EQU   $DEVTBLE+21
$DEVTECB EQU   $DEVTBLE+22
$OPIS    EQU   $DEVTECB
$OPND    EQU   $DEVTECB+2
$DEVFLG3 EQU   $DEVTBLE+27
$SIOFLG  EQU   $DEVFLG3
$IFTOUT  EQU   $DEVTBLE+36
$DEVSESP EQU   $IFTOUT
$SSCPDAF EQU   $IFTOUT+6
$LDNCBPT EQU   $DEVTBLE+48
$RNINFO  EQU   $DEVTBLE+56
$DEVFLG5 EQU   $RNINFO+8
$DEVFLG4 EQU   $DEVTBLE+65
$SLTBL   EQU   TOLTEPWA+1468
$RUNTEST EQU   $SLTBL+13
$TESTFLG EQU   $SLTBL+21
$SECLST  EQU   $SLTBL+22
$BUFFER  EQU   TOLTEPWA+1976
$INBUFR  EQU   TOLTEPWA+2104
$WORK    EQU   TOLTEPWA+2376
#EXITA   EQU   TOLTEPWA+2632
$CCOMDAT EQU   TOLTEPWA+2644
$COUTAD  EQU   $CCOMDAT
$COUTCT  EQU   $CCOMDAT+4
$CINADR  EQU   $CCOMDAT+8
$CINCT   EQU   $CCOMDAT+12
$CFLGS   EQU   $CCOMDAT+16
$C2WAY   EQU   $CFLGS
$24FEMSG EQU   TOLTEPWA+2681
$24CATMG EQU   $24FEMSG+11
@NM00053 EQU   TOLTEPWA+2776
$OUNTPTR EQU   @NM00053+4
$NSPTR   EQU   $OUNTPTR
$NSCNT   EQU   @NM00053+10
$ENXX    EQU   @NM00053+15
$IMITX   EQU   $ENXX
SVECC013 EQU   TOLTEPWA+3232
SVESC120 EQU   TOLTEPWA+3304
SVEIC003 EQU   TOLTEPWA+3592
SVESC020 EQU   TOLTEPWA+3664
SVESC022 EQU   TOLTEPWA+3736
SVECC011 EQU   TOLTEPWA+4024
#EXIT    EQU   0
CECOMMAP EQU   0
$CEOUTAD EQU   CECOMMAP+4
$CEOUTCT EQU   CECOMMAP+8
$CEINADR EQU   CECOMMAP+12
$CEINCT  EQU   CECOMMAP+16
$TRTBL   EQU   0
@NM00001 EQU   $BUFFER
MSGNUM   EQU   @NM00001
RETSAV   EQU   @NM00001+4
PTRSAV   EQU   @NM00001+8
CNTSAV   EQU   @NM00001+12
MMSG#    EQU   @NM00001+16
MSG#     EQU   @NM00001+20
I        EQU   @NM00001+22
SUBINDX  EQU   @NM00001+24
MSKBIT   EQU   @NM00001+26
Y        EQU   @NM00001+27
MYPARM   EQU   @NM00001+28
SVECC012 EQU   SVESC022
SVEIC00A EQU   SVEIC003
SVEIC004 EQU   SVEIC003
SVEIC005 EQU   SVEIC003
SVESC02A EQU   SVESC022
SVESC02B EQU   SVESC022
SVESC02D EQU   SVESC022
SVESC02E EQU   SVESC022
SVESC02F EQU   SVECC013
SVESC024 EQU   SVESC022
SVESC025 EQU   SVESC022
SVESC027 EQU   SVESC022
SVESC029 EQU   SVESC022
SVESC031 EQU   SVECC013
SVESC032 EQU   SVECC011
SVETC037 EQU   SVEIC003
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
@NM00004 EQU   MYPARM+8
@NM00003 EQU   MYPARM+4
@NM00002 EQU   MYPARM
$CECFLAG EQU   CECOMMAP+20
$CECIDNT EQU   CECOMMAP+2
$CECLEVL EQU   CECOMMAP+1
$CECTRMG EQU   CECOMMAP
SVECC010 EQU   TOLTEPWA+3952
SVETC035 EQU   TOLTEPWA+3880
SVESC030 EQU   TOLTEPWA+3808
SVEIC002 EQU   TOLTEPWA+3520
SVECC014 EQU   TOLTEPWA+3376
SVESC033 EQU   TOLTEPWA+3160
@NM00055 EQU   TOLTEPWA+2980
$RPLERR  EQU   TOLTEPWA+2977
@NM00054 EQU   TOLTEPWA+2976
$R13PR3  EQU   TOLTEPWA+2972
$CEINT2  EQU   TOLTEPWA+2968
$CEINT1  EQU   TOLTEPWA+2964
$MSGGET  EQU   TOLTEPWA+2960
$ACQLIST EQU   TOLTEPWA+2956
$R4SAVE1 EQU   TOLTEPWA+2952
$CLSISS  EQU   TOLTEPWA+2950
$CLSCNT  EQU   TOLTEPWA+2948
$CUTABLE EQU   TOLTEPWA+2868
$BUFSZ2  EQU   TOLTEPWA+2864
$RESID2  EQU   TOLTEPWA+2860
$OLTCCW2 EQU   TOLTEPWA+2856
$ENDBFR2 EQU   TOLTEPWA+2852
$1STBFR2 EQU   TOLTEPWA+2848
$TECB2   EQU   TOLTEPWA+2844
$BUFSZ1  EQU   TOLTEPWA+2840
$RESID1  EQU   TOLTEPWA+2836
$OLTCCW1 EQU   TOLTEPWA+2832
$ENDBFR1 EQU   TOLTEPWA+2828
$1STBFR1 EQU   TOLTEPWA+2824
$TECB1   EQU   TOLTEPWA+2820
$WAITIME EQU   TOLTEPWA+2816
$TRTN#   EQU   TOLTEPWA+2815
$WIODEV  EQU   TOLTEPWA+2814
$RQSTSZE EQU   TOLTEPWA+2812
$RQSTPTR EQU   TOLTEPWA+2808
$R4SAVE  EQU   TOLTEPWA+2804
$PARTADR EQU   TOLTEPWA+2800
$TBSDATA EQU   TOLTEPWA+2796
$CTWIDTH EQU   TOLTEPWA+2795
$CTLINE  EQU   TOLTEPWA+2794
$APWIDTH EQU   TOLTEPWA+2793
$APLINE  EQU   TOLTEPWA+2792
$INDEX   EQU   $IMITX
$UMXX    EQU   @NM00053+14
$NSXX    EQU   @NM00053+12
$ATACNT  EQU   $NSCNT
$CTR     EQU   @NM00053+8
$ATAPTR  EQU   $NSPTR
$DDRPTR  EQU   @NM00053
$DTORESP EQU   TOLTEPWA+2712
$APNAME  EQU   TOLTEPWA+2704
$24SYMNE EQU   $24CATMG+4
$24DEVAD EQU   $24CATMG
$24RTN#  EQU   $24FEMSG+8
$ESECTID EQU   $24FEMSG
$24FLGS  EQU   TOLTEPWA+2680
$24SAVE2 EQU   TOLTEPWA+2676
$24SAVE1 EQU   TOLTEPWA+2672
$24UNADR EQU   TOLTEPWA+2668
$24SAV13 EQU   TOLTEPWA+2664
$24RETCD EQU   TOLTEPWA+2663
$MACID   EQU   TOLTEPWA+2661
$CSPARE  EQU   $CFLGS
ROOTLOC  EQU   TOLTEPWA+2640
$RETREG  EQU   TOLTEPWA+2636
$EXTA    EQU   TOLTEPWA+2320
$PASSONA EQU   TOLTEPWA+2264
$TRMINPT EQU   TOLTEPWA+2184
$TLTRPL3 EQU   TOLTEPWA+1856
$TLTRPL2 EQU   TOLTEPWA+1736
$TLTRPL1 EQU   TOLTEPWA+1616
@NM00052 EQU   $SLTBL+135
$HIGHRTN EQU   $SLTBL+134
$PRIMADR EQU   $SLTBL+130
$CTSTPT  EQU   $SLTBL+128
$TSTCNT  EQU   $SLTBL+126
$SECFLGS EQU   $SECLST+3
$SECTION EQU   $SECLST
$SECACT  EQU   $TESTFLG
$CANTRUN EQU   $TESTFLG
$FINAL   EQU   $TESTFLG
$TESTSUF EQU   $RUNTEST+5
$TESTNUM EQU   $RUNTEST+1
$LETPRF  EQU   $RUNTEST
$SYMBOLC EQU   $SLTBL+5
$FAMILY  EQU   $SLTBL
$CDEVPT  EQU   TOLTEPWA+1466
$DEVCNTS EQU   TOLTEPWA+1464
$FEEDBCK EQU   $DEVTBLE+66
$WTISUED EQU   $DEVFLG4
$EXIOISD EQU   $DEVFLG4
$REMWRIT EQU   $DEVFLG4
$REMDONE EQU   $DEVFLG4
$2NDUSED EQU   $DEVFLG4
$1STUSED EQU   $DEVFLG4
$IGLXIFB EQU   $DEVFLG4
$EXIOLV3 EQU   $DEVFLG4
@NM00051 EQU   $DEVFLG5
$ASCII   EQU   $DEVFLG5
$DEVLU   EQU   $DEVFLG5
$OPNDFAL EQU   $DEVFLG5
$ACQNCB  EQU   $DEVFLG5
$REMOTE  EQU   $DEVFLG5
$ENDNODE EQU   $DEVFLG5
$LINENME EQU   $RNINFO
$CID     EQU   $DEVTBLE+52
$DVCOL   EQU   $LDNCBPT+2
$DVROW   EQU   $LDNCBPT
$NCSPLP  EQU   $DEVTBLE+44
$DVLN    EQU   $SSCPDAF
$DAF     EQU   $DEVSESP+4
$VARYPAB EQU   $DEVSESP
$SYSMN   EQU   $DEVTBLE+28
@NM00050 EQU   $DEVFLG3
$CLRSNT  EQU   $DEVFLG3
$OLTERR  EQU   $DEVFLG3
$SRTEST  EQU   $DEVFLG3
$DVSNDOK EQU   $SIOFLG
$POLLREQ EQU   $DEVFLG3
$ACQRED  EQU   $DEVFLG3
$NOTDEV  EQU   $DEVFLG3
$DVINCT  EQU   $DEVTBLE+26
$DVBRKST EQU   $OPND+1
$DVBRKSN EQU   $OPND
$DVSEQNO EQU   $OPIS
$CEINTRP EQU   $DEVFLG2
$TESTMDE EQU   $DEVFLG2
$DEVALOC EQU   $DEVFLG2
$ALLDATA EQU   $DEVFLG2
$ENDCNTL EQU   $DEVFLG2
$CTLDEV  EQU   $DEVFLG2
$NOCDS   EQU   $DEVFLG2
$DATAIN  EQU   $DEVFLG2
$PRIMARY EQU   $DEVFLG1
$DVCTBYT EQU   $INTOCC
$DEVACT  EQU   $DEVFLG1
$DVLGMDE EQU   $ATTNEXP
$DVSPRM  EQU   $EVNCPLT
$GRABBED EQU   $DEVFLG1
$CATASTR EQU   $DEVFLG1
$LETGO   EQU   $DEVFLG1
$CURELEM EQU   $$SYMNME+4
$MSGOTSD EQU   $$SYMNME
$EXTDEV  EQU   $DEVCDS+11
@NM00049 EQU   $DEVSDCF
$NOTPRIM EQU   $DEVSDCF
@NM00048 EQU   $DEVCDSF
@NM00047 EQU   $DEVCDSF
@NM00046 EQU   $DEVCDSF
$CDSNAME EQU   $DEVCDSF
$EXTRN   EQU   $DEVCDSF
$CEVOLUM EQU   $DEVCDSF
$SHARD   EQU   $DEVCDSF
$DEVFPM  EQU   $DEVCDSF
$DEVCNT  EQU   $DEVCDS+8
$DEVTYPE EQU   $DEVFEAT+3
$DEVCLAS EQU   $DEVFEAT+2
$DEVFRRS EQU   $DEVFEAT+1
$DEVMOD  EQU   $DEVFEAT
$DEVRDGT EQU   @NM00044+1
$DEVCTLU EQU   @NM00044+1
$DEVCHAN EQU   @NM00044
@NM00045 EQU   @NM00044
$CTINDX  EQU   $DEVUNAD
$FLAG16  EQU   $COMMFLG+15
$FLAG15  EQU   $COMMFLG+14
$FLAG14  EQU   $COMMFLG+13
$TEP2ND  EQU   $FLAG13
$TEP1ST  EQU   $FLAG13
$CATMSG  EQU   $FLAG13
$PRMPTSW EQU   $FLAG13
$DEVENT  EQU   $FLAG13
$OLTMACC EQU   $FLAG13
$LGON    EQU   $FLAG13
$CTLOGON EQU   $FLAG13
@NM00043 EQU   $FLAG12
$VARYINP EQU   $FLAG12
$ENDTEST EQU   $FLAG12
$VRYHRD  EQU   $FLAG12
$VRYSFT  EQU   $FLAG12
$OPTMSG  EQU   $FLAG12
$FEORCAT EQU   $FLAG11
@NM00042 EQU   $FLAG11
@NM00041 EQU   $FLAG10
$INBND   EQU   $FLAG10
$WAITFLG EQU   $FLAG10
$DPRINT  EQU   $FLAG10
$HOLD    EQU   $FLAG9
$NOTRRCH EQU   $FLAG9
@NM00040 EQU   $FLAG9
$COPY    EQU   $FLAG9
$REMSW   EQU   $FLAG9
$IGRES   EQU   $FLAG9
$VS2     EQU   $FLAG8
$VS1     EQU   $FLAG8
$EDOS    EQU   $FLAG8
@NM00039 EQU   $FLAG8
$TWOWAY  EQU   $FLAG8
@NM00038 EQU   $FLAG8
$RCVMSG  EQU   $FLAG7
$RCVRFLG EQU   $FLAG7
$SNDRFLG EQU   $FLAG7
$LDOIS   EQU   $FLAG7
$DCONTCT EQU   $FLAG7
$EXIOWAT EQU   $FLAG7
$2NDDATA EQU   $FLAG7
$1STDATA EQU   $FLAG7
$CIREQ   EQU   $FLAG6
$FSTMCIS EQU   $FLAG6
$DISCREQ EQU   $FLAG6
$DISCISS EQU   $FLAG6
$CHANGE  EQU   $FLAG6
$CTERROR EQU   $FLAG6
$RECAL11 EQU   $FLAG6
@NM00037 EQU   $FLAG5
$PROGCK  EQU   $CANCEL
$PRINTAP EQU   $FLAG5
@NM00036 EQU   $FLAG5
$MSG922  EQU   $FLAG5
$CT924   EQU   $FLAG5
$FSTCAT  EQU   $FLAG5
$FSTFE   EQU   $FLAG5
$ACTOPND EQU   $FLAG4
$ACQCUTT EQU   $FLAG4
$CLSSACT EQU   $FLAG4
$BACKINT EQU   $FLAG4
$DMSGSW  EQU   $FLAG4
$TSTDEVP EQU   $FLAG4
$APRQPER EQU   $FLAG4
$OPCOM   EQU   $FLAG4
$NEWAP   EQU   $FLAG3
$ALTPRTR EQU   $FLAG3
$OPTERR  EQU   $FLAG3
$PRTONLY EQU   $FLAG3
$REQSTOR EQU   $FLAG3
$LOGOFFE EQU   $FLAG3
$TSTERR  EQU   $FLAG3
$DEVERR  EQU   $FLAG3
$PARTIAL EQU   $FLAG2
$NRMTERM EQU   $FLAG2
$VALDTST EQU   $FLAG2
$VALDDEV EQU   $FLAG2
$DBLSLSH EQU   $FLAG2
$NDR     EQU   $FLAG2
@NM00035 EQU   $FLAG2
$OLTACT  EQU   $FLAG1
$NORELDV EQU   $FLAG1
@NM00034 EQU   $FLAG1
$OPTCHNG EQU   $FLAG1
$DEVCHNG EQU   $FLAG1
$TESTCNG EQU   $FLAG1
$TEP3RD  EQU   $FLAG1
@NM00033 EQU   $CDA+120
$CUCNT   EQU   $CDA+118
@NM00032 EQU   $CDA+117
$PRTFORM EQU   $CDA+116
$OPISCNT EQU   $CDA+114
$OPNDCNT EQU   $CDA+112
$GETMSZE EQU   $CDA+110
$GRCNTS  EQU   $CDA+108
$CTLCNT  EQU   $CDA+106
$ACTLVL  EQU   $CDA+105
$PRNTLVL EQU   $CDA+104
$ERRCNTA EQU   $CDA+102
$TLCNT   EQU   $CDA+100
$TIMEALW EQU   $CDA+96
$PTRAREA EQU   $CDA+92
$GETMPTR EQU   $CDA+88
$R13PTRT EQU   $CDA+84
$R13PTR  EQU   $CDA+80
$TEPEND  EQU   $CDA+76
$PLINKDL EQU   $CDA+72
$TEPBEGN EQU   $CDA+68
$FRELPTR EQU   $CDA+64
$HIGHADR EQU   $HIMOREC
$LOMOREC EQU   $CDA+56
$LOWADDR EQU   $OLTPTR
$ENDCOMM EQU   $CDA+48
$COMMON  EQU   $RCA
$SLASHAD EQU   $CDA+32
$PASSON  EQU   $CDA+28
$TOLBRTB EQU   $CDA+24
$SCTPTR8 EQU   $CDA+20
$SCTPTR  EQU   $CDA+16
$TBWDPTR EQU   $CDA+12
$TFWDPTR EQU   $CDA+8
@NM00031 EQU   $CDA
@NM00030 EQU   $SCTTBLE+98
$SCTLWTC EQU   $SCTTBLE+96
$SCTLWTA EQU   $SCTTBLE+92
#EXT     EQU   $SCTTBLE+88
#PASS    EQU   $SCTTBLE+84
#TABLE   EQU   $SCTTBLE+80
@NM00029 EQU   $SCTTBLE+71
$RETMASK EQU   $SCTTBLE+70
$R249255 EQU   $ROUTMSK+29
$R241248 EQU   $ROUTMSK+28
$R233240 EQU   $ROUTMSK+27
$R225232 EQU   $ROUTMSK+26
$R217224 EQU   $ROUTMSK+25
$R209216 EQU   $ROUTMSK+24
$R201208 EQU   $ROUTMSK+23
$R193200 EQU   $ROUTMSK+22
$R185192 EQU   $ROUTMSK+21
$R177184 EQU   $ROUTMSK+20
$R169176 EQU   $ROUTMSK+19
$R161168 EQU   $ROUTMSK+18
$R153160 EQU   $ROUTMSK+17
$R145152 EQU   $ROUTMSK+16
$R137144 EQU   $ROUTMSK+15
$R129136 EQU   $ROUTMSK+14
$R121128 EQU   $ROUTMSK+13
$R113120 EQU   $ROUTMSK+12
$R105112 EQU   $ROUTMSK+11
$R097104 EQU   $ROUTMSK+10
$R089096 EQU   $ROUTMSK+9
$R081088 EQU   $ROUTMSK+8
$R073080 EQU   $ROUTMSK+7
$R065072 EQU   $ROUTMSK+6
$R057064 EQU   $ROUTMSK+5
$R049056 EQU   $ROUTMSK+4
$R041048 EQU   $ROUTMSK+3
$R033040 EQU   $ROUTMSK+2
$R025032 EQU   $ROUTMSK+1
$R017024 EQU   $ROUTMSK
$TOTFLG2 EQU   $SCTTBLE+39
@NM00028 EQU   $TOTFLG1
@NM00027 EQU   $TOTFLG1
@NM00026 EQU   $TOTFLG1
$CURELOD EQU   $TOTFLG1
$CTEQTT  EQU   $TOTFLG1
@NM00025 EQU   $TOTFLG1
@NM00024 EQU   $TOTFLG1
$LINESHR EQU   $TOTFLG1
@NM00023 EQU   $OLTFLG2
@NM00022 EQU   $OLTFLG2
@NM00021 EQU   $OLTFLG2
@NM00020 EQU   $OLTFLG2
@NM00019 EQU   $OLTFLG2
@NM00018 EQU   $OLTFLG2
@NM00017 EQU   $OLTFLG2
$TALK    EQU   $OLTFLG2
$DYCOM   EQU   $OLTFLGS
@NM00016 EQU   $OLTFLGS
$TRACE   EQU   $OLTFLGS
$RETCODE EQU   $OLTFLGS
$CONTCB  EQU   $OLTFLGS
$RETAIN  EQU   $OLTFLGS
$CLEANRT EQU   $OLTFLGS
$MANINTV EQU   $OLTFLGS
$OLTSIZE EQU   $SCTTBLE+34
$QSCTMOD EQU   $EXECFLG
$CTRLMOD EQU   $EXECFLG
$CLEANUP EQU   $EXECFLG
$LSTPDEV EQU   $EXECFLG
$ERRCNT  EQU   $EXECFLG
$RTNSLCT EQU   $EXECFLG
$MULTDEV EQU   $EXECFLG
@NM00015 EQU   $EXECFLG
$RMSKCNT EQU   $SCTTBLE+32
$SYNAME  EQU   $CDS8T19+4
$EXTSIG  EQU   $CDS8T19+3
$CDFLGS  EQU   $CDS8T19+1
$CDSCNT  EQU   $CDS8T19
$PDEVDSC EQU   $SCTTBLE+16
$PDEVADR EQU   $SCTTBLE+12
$COMMCN  EQU   $CDSFLGS
$CUSTSYM EQU   $CDSFLGS
$TWOCHSW EQU   $CDSFLGS
$SYMNAME EQU   $CDSFLGS
$EXTINTC EQU   $CDSFLGS
$CEVOL   EQU   $CDSFLGS
$SHARED  EQU   $CDSFLGS
$FPM     EQU   $CDSFLGS
$LASTSUB EQU   $PDEVFLG
@NM00014 EQU   $PDEVFLG
@NM00013 EQU   $PDEVFLG
@NM00012 EQU   $PDEVFLG
$LASTDEV EQU   $PDEVFLG
@NM00011 EQU   $PDEVFLG
$EXFILPT EQU   $PDEVFLG
$FPMOLD  EQU   $PDEVFLG
$TSSSYM  EQU   $SCTTBLE+8
$SCTLEVL EQU   $SCTTBLE+7
$RT0916  EQU   $SCTTBLE+5
$RT0108  EQU   $SCTTBLE+4
$LOOPTST EQU   $ERROPT
$LOOPERR EQU   $ERROPT
$NERRPRT EQU   $ERROPT
$NOCNTRL EQU   $ERROPT
$ALTPRNT EQU   $ERROPT
$CATERR  EQU   $ERROPT
$ASTERIK EQU   $ERROPT
$TESTERR EQU   $ERROPT
$FSTCOMM EQU   $TESTOPT
$INDEFLP EQU   $TESTOPT
$NOPRT   EQU   $TESTOPT
$PARAPRT EQU   $TESTOPT
@NM00010 EQU   $TESTOPT
$ERRLPCT EQU   $SCTTBLE
$TLTEND  EQU   $RCAAREA+936
$EXITSAV EQU   $RCAAREA+864
$TRASCII EQU   $RCAAREA+608
@NM00009 EQU   $RCAAREA+605
$VTAMEND EQU   $RCAFLG
$TPPOSTD EQU   $RCAFLG
$NEWCT   EQU   $RCAFLG
$ABNDALL EQU   $RCAFLG
$CUTESTB EQU   $RCAFLG
$CONSOLE EQU   $RCAFLG
$TPLOGON EQU   $RCAFLG
$UPDATE  EQU   $RCAFLG
$DEVAREA EQU   $RCAAREA+600
$CTDVAR  EQU   $RCAAREA+596
$BUFFS   EQU   $RCAAREA+464
$TLTNIB  EQU   $CONSTNT+140
$TLTPRPL EQU   $CONSTNT+20
@NM00008 EQU   $CONSTNT+4
@NM00007 EQU   $CONSTNT+2
$USECNT  EQU   $CONSTNT
$CURRTWA EQU   $POINTER+140
$CTNAME  EQU   $POINTER+132
$CTARGX  EQU   $POINTER+128
$COMINT  EQU   $POINTER+120
$QUEHNDL EQU   $POINTER+116
@NM00006 EQU   $POINTER+36
$RTNPTR  EQU   $POINTER+32
$TLTECB1 EQU   $POINTER+24
$CLEANP  EQU   $POINTER+20
$ABEND   EQU   $POINTER+16
$LSTAREA EQU   $POINTER+12
$FSTAREA EQU   $POINTER+8
$CVTSAVE EQU   $POINTER+4
$TOLTEP  EQU   $POINTER
$TLTACB  EQU   $RCAAREA
@NM00005 EQU   $TCFLG
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RT00071 EQU   S20CEC2
@RF00071 EQU   S20CEC1
@RT00078 EQU   S20CRC08
@RT00080 EQU   S20CRC08
@RT00089 EQU   S20CRC08
@RT00103 EQU   S20CEC2A
@RT00112 EQU   S20CEC2A
@RT00123 EQU   S20CEC2B
@RF00137 EQU   S20CEC2D
@RF00169 EQU   S20CEXIT
@RT00209 EQU   S20CEC3C
@RT00215 EQU   S20CEC3A
@RF00215 EQU   S20CEC3H
@RT00240 EQU   S20CEC3D
@RT00249 EQU   S20CEC3H
@RT00251 EQU   S20CEC3B
@RT00258 EQU   S20C03
@RT00262 EQU   S20C02
@RC00264 EQU   S20C03
@RT00274 EQU   S20C02A
@RC00286 EQU   S20C03
@RC00276 EQU   S20C03
@RT00314 EQU   CALL123
@RT00316 EQU   CALL456
@RC00277 EQU   @RC00276
@ENDDATA EQU   *
         END   ISTSC020,(C'PLS2003',0701,75177)
