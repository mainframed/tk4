         TITLE 'ISTIC00A,PROMPT - IT PROMPTS USER FOR CDS INFO         *
                        '
ISTIC00A CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'ISTIC00A  75.190'                                 0001
         DROP  @15
@PROLOG  ST    @14,12(,@13)                                        0001
         STM   @00,@12,20(@13)                                     0001
         BALR  @11,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,@11                                         0001
         ST    @13,@SA00001+4                                      0001
         LA    @12,@SA00001                                        0001
         ST    @12,8(,@13)                                         0001
         LR    @13,@12                                             0001
         EJECT
         EJECT
         EJECT
I00AC01  DS    0H                                                  0095
*   I00ACWK=$LOWADDR;               /* SET UP BASE FOR SWITHES       */
         L     @15,$LOWADDR(,WAPTR)                                0095
         ST    @15,I00ACWK                                         0095
*   CDSWKPTR=I00ACWK+80;            /* SET UP BASE FOR CDS WK        */
         AL    @15,@CF00050                                        0096
         ST    @15,CDSWKPTR                                        0096
*   TOADRPTR=ADDR(CDSEXARA)+256;    /* SET UP TOADDR BASE            */
         LA    @15,CDSEXARA(,@15)                                  0097
         AL    @15,@CF00084                                        0097
         ST    @15,TOADRPTR                                        0097
*   $INBUFR(1:1+LENGTH($INBUFR)-1)='';/* BLANK OUT IN BUFFER ENTER 0098
*                                      CDS PARM OR PROMPT            */
         MVI   $INBUFR(WAPTR),C' '                                 0098
         MVC   $INBUFR+1(79,WAPTR),$INBUFR(WAPTR)                  0098
*   IF $COPY='1'B THEN              /* IF THIS IS A COPY REQUEST     */
         TM    $COPY(WAPTR),B'00001000'                            0099
         BO    @RT00099                                            0099
*     GOTO I00AC01C;                /* THEN BR AROUND                */
*                                                                  0100
*   /*****************************************************************/
*   /*                                                               */
*   /* TCEC MSGN(580)INCT(61)MSGMSK('80000000'X) INVOKED             */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0101
*   $TCECM='1'B;                    /* SET TCEC SW IN RCA            */
         OI    $TCECM(WAPTR),B'00000001'                           0101
*   R1=ADDR($TCA09);                /* SET UP PARM LIST $TR          */
         LA    R1,$TCA09                                           0102
*   CALL S20CEC03;                  /* CALL TCEC-MULTIPLE LN         */
         L     @15,@CV00777                                        0103
         BALR  @14,@15                                             0103
*   DCL                                                            0104
*     1 $TCA09,                     /* TCEC PARM LIST                */
*      2 $TCB09 FIXED(32) INIT(580),/* MSG NUMBER                    */
*      2 $TCC09 FIXED(32) INIT(61), /* INCT LEN                      */
*      2 $TCD09 BIT(8) INIT('01000000'B),/* FLAG                     */
*      2 $TCE09 CHAR(4) INIT('80000000'X);/* MSSAGE MASK             */
*   IF PROMPT^=$INBUFR(2:2) THEN    /* IF PROMPT WAS NOT REQUESTED   */
         CLC   PROMPT(1),$INBUFR+1(WAPTR)                          0105
         BNE   @RT00105                                            0105
*     GOTO I00AC03;                 /* THEN BR AROUND PROMPT RTN     */
*   IF $REMSW='1'B                  /* IF THIS IS A REMOTE ADD       */
*     THEN                          /* REQUEST THEN PRINT PROMPT     */
         TM    $REMSW(WAPTR),B'01000000'                           0107
         BNO   @RF00107                                            0107
*     DO;                           /* MESSAGES MINUS THE SYMB NME   */
*                                                                  0108
*       /*************************************************************/
*       /*                                                           */
*       /* TCEC MSGN(580)MSGMSK('3FDFFC00'X) INVOKED                 */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0109
*       $TCECM='1'B;                /* SET TCEC SW IN RCA            */
         OI    $TCECM(WAPTR),B'00000001'                           0109
*       R1=ADDR($TCA10);            /* SET UP PARM LIST $TR          */
         LA    R1,$TCA10                                           0110
*       CALL S20CEC03;              /* CALL TCEC-MULTIPLE LN         */
         L     @15,@CV00777                                        0111
         BALR  @14,@15                                             0111
*       DCL                                                        0112
*         1 $TCA10,                 /* TCEC PARM LIST                */
*          2 $TCB10 FIXED(32) INIT(580),/* MSG NUMBER                */
*          2 $TCC10 FIXED(32) INIT(0),/* INCT LEN                    */
*          2 $TCD10 BIT(8) INIT('00000000'B),/* FLAG                 */
*          2 $TCE10 CHAR(4) INIT('3FDFFC00'X);/* MSSAGE MASK         */
*     END;                                                         0113
*   ELSE                            /* OTHERWISE PRINT THE PROMPT    */
*     DO;                           /* MSG MINUS THE LINE ADR MSG    */
*                                                                  0114
         B     @RC00107                                            0114
@RF00107 DS    0H                                                  0115
*       /*************************************************************/
*       /*                                                           */
*       /* TCEC MSGN(580)MSGMSK('3FBFFC00'X) INVOKED                 */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0115
*       $TCECM='1'B;                /* SET TCEC SW IN RCA            */
         OI    $TCECM(WAPTR),B'00000001'                           0115
*       R1=ADDR($TCA11);            /* SET UP PARM LIST $TR          */
         LA    R1,$TCA11                                           0116
*       CALL S20CEC03;              /* CALL TCEC-MULTIPLE LN         */
         L     @15,@CV00777                                        0117
         BALR  @14,@15                                             0117
*       DCL                                                        0118
*         1 $TCA11,                 /* TCEC PARM LIST                */
*          2 $TCB11 FIXED(32) INIT(580),/* MSG NUMBER                */
*          2 $TCC11 FIXED(32) INIT(0),/* INCT LEN                    */
*          2 $TCD11 BIT(8) INIT('00000000'B),/* FLAG                 */
*          2 $TCE11 CHAR(4) INIT('3FBFFC00'X);/* MSSAGE MASK         */
*     END;                                                         0119
*I00AC01B:                                                         0120
*   INDX1=HWONE;                    /* SET UP INDEX VALUE            */
@RC00107 DS    0H                                                  0120
I00AC01B MVC   INDX1(2),HWONE                                      0120
*   GOTO I00AC01;                   /* GO GET CDS PARAMETERS         */
         B     I00AC01                                             0121
*I00AC01C:                                                         0122
*                                                                  0122
*   /*****************************************************************/
*   /*                                                               */
*   /* TCEC MSGN(582)INCT(61)MSGMSK('80000000'X) INVOKED             */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0122
*   $TCECM='1'B;                    /* SET TCEC SW IN RCA            */
I00AC01C OI    $TCECM(WAPTR),B'00000001'                           0122
*   R1=ADDR($TCA12);                /* SET UP PARM LIST $TR          */
         LA    R1,$TCA12                                           0123
*   CALL S20CEC03;                  /* CALL TCEC-MULTIPLE LN         */
         L     @15,@CV00777                                        0124
         BALR  @14,@15                                             0124
*   DCL                                                            0125
*     1 $TCA12,                     /* TCEC PARM LIST                */
*      2 $TCB12 FIXED(32) INIT(582),/* MSG NUMBER                    */
*      2 $TCC12 FIXED(32) INIT(61), /* INCT LEN                      */
*      2 $TCD12 BIT(8) INIT('01000000'B),/* FLAG                     */
*      2 $TCE12 CHAR(4) INIT('80000000'X);/* MSSAGE MASK ENTER SYM 0125
*                                      NME OR CUA                    */
*I00AC01D:                                                         0126
*   INDX1=HWONE;                    /* GET PTR TO ENTRY              */
I00AC01D SLR   @15,@15                                             0126
         ICM   @15,3,HWONE                                         0126
         STH   @15,INDX1                                           0126
*   IF $REMSW='1'B                  /* IF THIS IS A REMOTE REQUEST   */
*     THEN                                                         0127
         TM    $REMSW(WAPTR),B'01000000'                           0127
         BNO   @RF00127                                            0127
*     DO;                           /* THEN VALIDITY CK ENTRY        */
*       IF $INBUFR(INDX1+1:INDX1+LENGTH(SYMNME))=SYMNME THEN       0129
         ALR   @15,WAPTR                                           0129
         CLC   $INBUFR(3,@15),SYMNME                               0129
         BE    @RT00129                                            0129
*         GOTO I00AC09A;                                           0130
*                                                                  0130
*       /*************************************************************/
*       /*                                                           */
*       /* TCEC MSGN(581)MSGMSK('02000000'X) INVOKED                 */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0131
*       $TCECM='1'B;                /* SET TCEC SW IN RCA            */
         OI    $TCECM(WAPTR),B'00000001'                           0131
*       R1=ADDR($TCA13);            /* SET UP PARM LIST $TR          */
         LA    R1,$TCA13                                           0132
*       CALL S20CEC03;              /* CALL TCEC-MULTIPLE LN         */
         L     @15,@CV00777                                        0133
         BALR  @14,@15                                             0133
*       DCL                                                        0134
*         1 $TCA13,                 /* TCEC PARM LIST                */
*          2 $TCB13 FIXED(32) INIT(581),/* MSG NUMBER                */
*          2 $TCC13 FIXED(32) INIT(0),/* INCT LEN                    */
*          2 $TCD13 BIT(8) INIT('00000000'B),/* FLAG                 */
*          2 $TCE13 CHAR(4) INIT('02000000'X);/* MSSAGE MASK INVALID
*                                      ENTRY                         */
*       GOTO I00AC01;               /* BR BACK AND TRY AGAIN         */
         B     I00AC01                                             0135
*     END;                                                         0136
*   ELSE                                                           0137
*     DO;                           /* VALIDITY CK CUA ENTRY         */
@RF00127 DS    0H                                                  0138
*       IF $INBUFR(INDX1+1:INDX1+LENGTH(UADR))=UADR THEN           0138
         LH    @15,INDX1                                           0138
         N     @15,@CF00960                                        0138
         ALR   @15,WAPTR                                           0138
         CLC   $INBUFR(3,@15),UADR                                 0138
         BE    @RT00138                                            0138
*         GOTO I00AC08A;            /* IF OK THEN BR AROUND          */
*                                                                  0139
*       /*************************************************************/
*       /*                                                           */
*       /* TCEC MSGN(581)MSGMSK('04000000'X) INVOKED                 */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0140
*       $TCECM='1'B;                /* SET TCEC SW IN RCA            */
         OI    $TCECM(WAPTR),B'00000001'                           0140
*       R1=ADDR($TCA14);            /* SET UP PARM LIST $TR          */
         LA    R1,$TCA14                                           0141
*       CALL S20CEC03;              /* CALL TCEC-MULTIPLE LN         */
         L     @15,@CV00777                                        0142
         BALR  @14,@15                                             0142
*       DCL                                                        0143
*         1 $TCA14,                 /* TCEC PARM LIST                */
*          2 $TCB14 FIXED(32) INIT(581),/* MSG NUMBER                */
*          2 $TCC14 FIXED(32) INIT(0),/* INCT LEN                    */
*          2 $TCD14 BIT(8) INIT('00000000'B),/* FLAG                 */
*          2 $TCE14 CHAR(4) INIT('04000000'X);/* MSSAGE MASK INVALID
*                                      ENTRY                         */
*       GOTO I00AC01;               /* BR BACK AND TRY AGAIN         */
         B     I00AC01                                             0144
*     END;                                                         0145
*   GEN(EJECT);                                                    0146
         EJECT
*I00AC02:                           /* CONTINUE ENTER'G CDS DATA     */
*   $INBUFR(1:1+LENGTH($INBUFR)-1)='';/* ZERO OUT BUFFER             */
*                                                                  0147
I00AC02  MVI   $INBUFR(WAPTR),C' '                                 0147
         MVC   $INBUFR+1(79,WAPTR),$INBUFR(WAPTR)                  0147
*   /*****************************************************************/
*   /*                                                               */
*   /* TCEC MSGN(580)INCT(61)MSGMSK('40000000'X) INVOKED             */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0148
*   $TCECM='1'B;                    /* SET TCEC SW IN RCA            */
         OI    $TCECM(WAPTR),B'00000001'                           0148
*   R1=ADDR($TCA15);                /* SET UP PARM LIST $TR          */
         LA    R1,$TCA15                                           0149
*   CALL S20CEC03;                  /* CALL TCEC-MULTIPLE LN         */
         L     @15,@CV00777                                        0150
         BALR  @14,@15                                             0150
*   DCL                                                            0151
*     1 $TCA15,                     /* TCEC PARM LIST                */
*      2 $TCB15 FIXED(32) INIT(580),/* MSG NUMBER                    */
*      2 $TCC15 FIXED(32) INIT(61), /* INCT LEN                      */
*      2 $TCD15 BIT(8) INIT('01000000'B),/* FLAG                     */
*      2 $TCE15 CHAR(4) INIT('40000000'X);/* MSSAGE MASK             */
*I00AC03:                                                          0152
*   INDX1=HWONE;                    /* SET UP INDEX VALUE            */
I00AC03  MVC   INDX1(2),HWONE                                      0152
*I00AC03A:                                                         0153
*   IF $INBUFR(INDX1+1:INDX1+LENGTH(MODEL))^=MODEL THEN            0153
I00AC03A LH    @15,INDX1                                           0153
         N     @15,@CF00960                                        0153
         ALR   @15,WAPTR                                           0153
         CLC   $INBUFR(2,@15),MODEL                                0153
         BNE   @RT00153                                            0153
*     GOTO I00AC04;                 /* IF NOT MODEL ENTRY-BR         */
*   GEN(BAL LINKR,I00ACLEN);        /* GO GET LENGTH OF MODEL I/P    */
         BAL LINKR,I00ACLEN
*   IF IPLEN^=MLNGTH THEN           /* IF IT DOESN'T = EXPECTED      */
         CLC   IPLEN(1),MLNGTH                                     0156
         BNE   @RT00156                                            0156
*     GOTO I00AC03B;                /* THEN BR AND PRINT ERROR       */
*   GEN(BAL LINKR,I00ACONV);        /* OTHERWISE CONVERT IT          */
         BAL LINKR,I00ACONV
*   IF R15^=0 THEN                  /* IF IT DID NOT CNV OK THEN     */
         LTR   R15,R15                                             0159
         BNZ   @RT00159                                            0159
*     GOTO I00AC03B;                /* WE MUST HAVE INVALID I/P-BR   */
*   CDSMODEL=TOADR(1:1);            /* SET UP MODEL FLD-CNV OK       */
         L     @15,TOADRPTR                                        0161
         IC    @12,TOADR(,@15)                                     0161
         L     @15,CDSWKPTR                                        0161
         STC   @12,CDSMODEL(,@15)                                  0161
*   IF CONTSCAN='0'B THEN           /* IF CONT SCAN SW IS NOT ON     */
         L     @15,I00ACWK                                         0162
         TM    CONTSCAN(@15),B'10000000'                           0162
         BZ    @RT00162                                            0162
*     GOTO I00AC02;                 /* THEN GO GET NXT LINE DATA     */
*   CONTSCAN='0'B;                  /* OTHERWISE RESET SWITCH AND    */
         NI    CONTSCAN(@15),B'01111111'                           0164
*   GOTO I00AC03A;                  /* CONTINUE ON                   */
         B     I00AC03A                                            0165
*I00AC03B:                                                         0166
*                                                                  0166
*   /*****************************************************************/
*   /*                                                               */
*   /* TCEC MSGN(581)MSGMSK('80000000'X) INVOKED                     */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0166
*   $TCECM='1'B;                    /* SET TCEC SW IN RCA            */
I00AC03B OI    $TCECM(WAPTR),B'00000001'                           0166
*   R1=ADDR($TCA16);                /* SET UP PARM LIST $TR          */
         LA    R1,$TCA16                                           0167
*   CALL S20CEC03;                  /* CALL TCEC-MULTIPLE LN         */
         L     @15,@CV00777                                        0168
         BALR  @14,@15                                             0168
*   DCL                                                            0169
*     1 $TCA16,                     /* TCEC PARM LIST                */
*      2 $TCB16 FIXED(32) INIT(581),/* MSG NUMBER                    */
*      2 $TCC16 FIXED(32) INIT(0),  /* INCT LEN                      */
*      2 $TCD16 BIT(8) INIT('00000000'B),/* FLAG                     */
*      2 $TCE16 CHAR(4) INIT('80000000'X);/* MSSAGE MASK INVALID   0169
*                                      MODEL FLD                     */
*   GOTO I00AC01;                   /* GO GET ENTIRE LAST LINE       */
         B     I00AC01                                             0170
*I00AC04:                                                          0171
*   IF $INBUFR(INDX1+1:INDX1+LENGTH(FEAT))^=FEAT THEN              0171
I00AC04  LH    @15,INDX1                                           0171
         N     @15,@CF00960                                        0171
         ALR   @15,WAPTR                                           0171
         CLC   $INBUFR(2,@15),FEAT                                 0171
         BNE   @RT00171                                            0171
*     GOTO I00AC05;                 /* IF NOT FEAT ENTRY BE          */
*   GEN(BAL LINKR,I00ACLEN);        /* GO GET LENGTH OF FEAT I/P     */
         BAL LINKR,I00ACLEN
*   IF IPLEN^=FLNGTH THEN           /* IF IT DOESN'T = EXPECTED      */
         CLC   IPLEN(1),FLNGTH                                     0174
         BNE   @RT00174                                            0174
*     GOTO I00AC04A;                /* THEN BR AND PRINT ERROR       */
*   GEN(BAL LINKR,I00ACONV);        /* OTHERWISE CONVERT IT          */
         BAL LINKR,I00ACONV
*   IF R15^=0 THEN                  /* IF IT DID NOT CNV OK THEN     */
         LTR   R15,R15                                             0177
         BNZ   @RT00177                                            0177
*     GOTO I00AC04A;                /* WE MUST HAVE INVALID I/P-BR   */
*   CDSFEAT=TOADR(1:1);             /* SET UP REATURE FLD-CNV OK     */
         L     @15,TOADRPTR                                        0179
         IC    @12,TOADR(,@15)                                     0179
         L     @15,CDSWKPTR                                        0179
         STC   @12,CDSFEAT(,@15)                                   0179
*   IF CONTSCAN='0'B THEN           /* IF CONT SCAN SW IS NOT ON     */
         L     @15,I00ACWK                                         0180
         TM    CONTSCAN(@15),B'10000000'                           0180
         BZ    @RT00180                                            0180
*     GOTO I00AC02;                 /* THEN GO GET NXT LINE DATA     */
*   CONTSCAN='0'B;                  /* OTHERWISE RESET SWITCH AND    */
         NI    CONTSCAN(@15),B'01111111'                           0182
*   GOTO I00AC03A;                  /* CONTINUE ON                   */
         B     I00AC03A                                            0183
*I00AC04A:                                                         0184
*                                                                  0184
*   /*****************************************************************/
*   /*                                                               */
*   /* TCEC MSGN(581)MSGMSK('40000000'X) INVOKED                     */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0184
*   $TCECM='1'B;                    /* SET TCEC SW IN RCA            */
I00AC04A OI    $TCECM(WAPTR),B'00000001'                           0184
*   R1=ADDR($TCA17);                /* SET UP PARM LIST $TR          */
         LA    R1,$TCA17                                           0185
*   CALL S20CEC03;                  /* CALL TCEC-MULTIPLE LN         */
         L     @15,@CV00777                                        0186
         BALR  @14,@15                                             0186
*   DCL                                                            0187
*     1 $TCA17,                     /* TCEC PARM LIST                */
*      2 $TCB17 FIXED(32) INIT(581),/* MSG NUMBER                    */
*      2 $TCC17 FIXED(32) INIT(0),  /* INCT LEN                      */
*      2 $TCD17 BIT(8) INIT('00000000'B),/* FLAG                     */
*      2 $TCE17 CHAR(4) INIT('40000000'X);/* MSSAGE MASK INVALID FEAT
*                                      FLD                           */
*   GOTO I00AC01;                   /* GO GET ENTIRE LAST LINE       */
         B     I00AC01                                             0188
*I00AC05:                                                          0189
*   IF $INBUFR(INDX1+1:INDX1+LENGTH(CLASS))^=CLASS THEN            0189
I00AC05  LH    @15,INDX1                                           0189
         N     @15,@CF00960                                        0189
         ALR   @15,WAPTR                                           0189
         CLC   $INBUFR(2,@15),CLASS                                0189
         BNE   @RT00189                                            0189
*     GOTO I00AC06;                 /* IF NOT CLASS ENTRY - BR       */
*   GEN(BAL LINKR,I00ACLEN);        /* GO GET LENGTH OF FEAT I/P     */
         BAL LINKR,I00ACLEN
*   IF IPLEN^=CLNGTH THEN           /* IF IT DOESN'T = EXPECTED      */
         CLC   IPLEN(1),CLNGTH                                     0192
         BNE   @RT00192                                            0192
*     GOTO I00AC05A;                /* THEN BR AND PRINT ERROR       */
*   GEN(BAL LINKR,I00ACONV);        /* OTHERWISE CONVERT IT          */
         BAL LINKR,I00ACONV
*   IF R15^=0 THEN                  /* IF IT DID NOT CNV OK THEN     */
         LTR   R15,R15                                             0195
         BNZ   @RT00195                                            0195
*     GOTO I00AC05A;                /* WE MUST HAVE INVALID I/P-BR   */
*   CDSCLASS=TOADR(1:1);            /* SET UP CLASS FLD-CONV OK      */
         L     @15,TOADRPTR                                        0197
         IC    @12,TOADR(,@15)                                     0197
         L     @15,CDSWKPTR                                        0197
         STC   @12,CDSCLASS(,@15)                                  0197
*   CLASSSW='1'B;                   /* TURN ON CLASS SW              */
         L     @15,I00ACWK                                         0198
         OI    CLASSSW(@15),B'01000000'                            0198
*   IF CONTSCAN='0'B THEN           /* IF CONT SCAN SW IS NOT ON     */
         TM    CONTSCAN(@15),B'10000000'                           0199
         BZ    @RT00199                                            0199
*     GOTO I00AC02;                 /* THEN GO GET NXT LINE DATA     */
*   CONTSCAN='0'B;                  /* OTHERWISE RESET SWITCH AND    */
         NI    CONTSCAN(@15),B'01111111'                           0201
*   GOTO I00AC03A;                  /* CONTINUE ON                   */
         B     I00AC03A                                            0202
*I00AC05A:                                                         0203
*                                                                  0203
*   /*****************************************************************/
*   /*                                                               */
*   /* TCEC MSGN(581)MSGMSK('20000000'X) INVOKED                     */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0203
*   $TCECM='1'B;                    /* SET TCEC SW IN RCA            */
I00AC05A OI    $TCECM(WAPTR),B'00000001'                           0203
*   R1=ADDR($TCA18);                /* SET UP PARM LIST $TR          */
         LA    R1,$TCA18                                           0204
*   CALL S20CEC03;                  /* CALL TCEC-MULTIPLE LN         */
         L     @15,@CV00777                                        0205
         BALR  @14,@15                                             0205
*   DCL                                                            0206
*     1 $TCA18,                     /* TCEC PARM LIST                */
*      2 $TCB18 FIXED(32) INIT(581),/* MSG NUMBER                    */
*      2 $TCC18 FIXED(32) INIT(0),  /* INCT LEN                      */
*      2 $TCD18 BIT(8) INIT('00000000'B),/* FLAG                     */
*      2 $TCE18 CHAR(4) INIT('20000000'X);/* MSSAGE MASK INVALID   0206
*                                      CLASS FLD                     */
*   GOTO I00AC01;                   /* GO GET ENTIRE LAST LINE       */
         B     I00AC01                                             0207
*I00AC06:                                                          0208
*   IF $INBUFR(INDX1+1:INDX1+LENGTH(TYPE))^=TYPE THEN              0208
I00AC06  LH    @15,INDX1                                           0208
         N     @15,@CF00960                                        0208
         ALR   @15,WAPTR                                           0208
         CLC   $INBUFR(2,@15),TYPE                                 0208
         BNE   @RT00208                                            0208
*     GOTO I00AC07;                 /* IF NOT TYPE ENTRY - BR        */
*   GEN(BAL LINKR,I00ACLEN);        /* GO GET LENGTH OF TYPE I/P     */
         BAL LINKR,I00ACLEN
*   IF IPLEN^=TLNGTH THEN           /* IF IT DOESN'T = EXPECTED      */
         CLC   IPLEN(1),TLNGTH                                     0211
         BNE   @RT00211                                            0211
*     GOTO I00AC06A;                /* THEN BR AND PRINT ERROR       */
*   GEN(BAL LINKR,I00ACONV);        /* OTHERWISE CONVERT IT          */
         BAL LINKR,I00ACONV
*   IF R15^=0 THEN                  /* IF IT DID NOT CNV OK THE      */
         LTR   R15,R15                                             0214
         BNZ   @RT00214                                            0214
*     GOTO I00AC06A;                /* WE MUST HAVE INVALID I/P-BR   */
*   CDSTYPE=TOADR(1:1);             /* SET UP TYPE FLD-CONV OK       */
         L     @15,TOADRPTR                                        0216
         IC    @12,TOADR(,@15)                                     0216
         L     @15,CDSWKPTR                                        0216
         STC   @12,CDSTYPE(,@15)                                   0216
*   TYPESW='1'B;                    /* TURN ON TYPE SW               */
         L     @15,I00ACWK                                         0217
         OI    TYPESW(@15),B'00100000'                             0217
*   IF CONTSCAN='0'B THEN           /* IF CONT SCAN SW IS NOT ON     */
         TM    CONTSCAN(@15),B'10000000'                           0218
         BZ    @RT00218                                            0218
*     GOTO I00AC02;                 /* THEN GO GET NXT LINE DATA     */
*   CONTSCAN='0'B;                  /* OTHERWISE RESET SWITCH AND    */
         NI    CONTSCAN(@15),B'01111111'                           0220
*   GOTO I00AC03A;                  /* CONTINUE ON                   */
         B     I00AC03A                                            0221
*I00AC06A:                                                         0222
*                                                                  0222
*   /*****************************************************************/
*   /*                                                               */
*   /* TCEC MSGN(581)MSGMSK('10000000'X) INVOKED                     */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0222
*   $TCECM='1'B;                    /* SET TCEC SW IN RCA            */
I00AC06A OI    $TCECM(WAPTR),B'00000001'                           0222
*   R1=ADDR($TCA19);                /* SET UP PARM LIST $TR          */
         LA    R1,$TCA19                                           0223
*   CALL S20CEC03;                  /* CALL TCEC-MULTIPLE LN         */
         L     @15,@CV00777                                        0224
         BALR  @14,@15                                             0224
*   DCL                                                            0225
*     1 $TCA19,                     /* TCEC PARM LIST                */
*      2 $TCB19 FIXED(32) INIT(581),/* MSG NUMBER                    */
*      2 $TCC19 FIXED(32) INIT(0),  /* INCT LEN                      */
*      2 $TCD19 BIT(8) INIT('00000000'B),/* FLAG                     */
*      2 $TCE19 CHAR(4) INIT('10000000'X);/* MSSAGE MASK INVALID TYPE
*                                      FLD                           */
*   GOTO I00AC01;                   /* GO GET ENTIRE LAST LINE       */
         B     I00AC01                                             0226
*I00AC07:                                                          0227
*   IF $INBUFR(INDX1+1:INDX1+LENGTH(FLAGS))^=FLAGS THEN            0227
I00AC07  LH    @15,INDX1                                           0227
         N     @15,@CF00960                                        0227
         ALR   @15,WAPTR                                           0227
         CLC   $INBUFR(3,@15),FLAGS                                0227
         BNE   @RT00227                                            0227
*     GOTO I00AC08;                 /* IF NOT FLAG ENTRY BR          */
*   GEN(BAL LINKR,I00ACLEN);        /* GO GET LENGTH OF FLAG ENTRY   */
         BAL LINKR,I00ACLEN
*   IF IPLEN^=FLGLNGTH THEN         /* IF IT DOESN'T EQ EXPECTED     */
         CLC   IPLEN(1),FLGLNGTH                                   0230
         BNE   @RT00230                                            0230
*     GOTO I00AC07A;                /* THEN BR AND PRINT ERROR       */
*   GEN(BAL LINKR,I00ACONV);        /* OTHERWISE CONVERT IT          */
         BAL LINKR,I00ACONV
*   IF R15^=0 THEN                  /* IF IT DID NOT CONV OK THEN    */
         LTR   R15,R15                                             0233
         BNZ   @RT00233                                            0233
*     GOTO I00AC07A;                /* WE MUST HAVE INVALID I/P-BR   */
*   CDSFLAG=TOADR(1:3);             /* CONV OK-SET UP FLAG FLO       */
         L     @15,CDSWKPTR                                        0235
         L     @12,TOADRPTR                                        0235
         MVC   CDSFLAG(3,@15),TOADR(@12)                           0235
*   FLAGSW='1'B;                    /* TURN ON FLAG SW               */
         L     @15,I00ACWK                                         0236
         OI    FLAGSW(@15),B'00010000'                             0236
*   IF CONTSCAN='0'B THEN           /* IF CONT SCAN SW IS NOT ON     */
         TM    CONTSCAN(@15),B'10000000'                           0237
         BZ    @RT00237                                            0237
*     GOTO I00AC02;                 /* THEN GO GET NXT LINE DATA     */
*   CONTSCAN='0'B;                  /* OTHERWISE RESET SWITCH AND    */
         NI    CONTSCAN(@15),B'01111111'                           0239
*   GOTO I00AC03A;                  /* CONTINUE ON                   */
         B     I00AC03A                                            0240
*I00AC07A:                                                         0241
*                                                                  0241
*   /*****************************************************************/
*   /*                                                               */
*   /* TCEC MSGN(581)MSGMSK('08000000'X) INVOKED                     */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0241
*   $TCECM='1'B;                    /* SET TCEC SW IN RCA            */
I00AC07A OI    $TCECM(WAPTR),B'00000001'                           0241
*   R1=ADDR($TCA20);                /* SET UP PARM LIST $TR          */
         LA    R1,$TCA20                                           0242
*   CALL S20CEC03;                  /* CALL TCEC-MULTIPLE LN         */
         L     @15,@CV00777                                        0243
         BALR  @14,@15                                             0243
*   DCL                                                            0244
*     1 $TCA20,                     /* TCEC PARM LIST                */
*      2 $TCB20 FIXED(32) INIT(581),/* MSG NUMBER                    */
*      2 $TCC20 FIXED(32) INIT(0),  /* INCT LEN                      */
*      2 $TCD20 BIT(8) INIT('00000000'B),/* FLAG                     */
*      2 $TCE20 CHAR(4) INIT('08000000'X);/* MSSAGE MASK INVALID FLAG
*                                      FLD                           */
*   GOTO I00AC01;                   /* GO GET ENTIRE LAST LINE       */
         B     I00AC01                                             0245
*I00AC08:                                                          0246
*   IF $INBUFR(INDX1+1:INDX1+LENGTH(UADR))^=UADR THEN              0246
I00AC08  LH    @15,INDX1                                           0246
         N     @15,@CF00960                                        0246
         ALR   @15,WAPTR                                           0246
         CLC   $INBUFR(3,@15),UADR                                 0246
         BNE   @RT00246                                            0246
*     GOTO I00AC09;                 /* IF NOT UNIT ADR ENTRY-BR      */
*   IF $REMSW='0'B THEN             /* IF NOT A REMOTE REQUEST       */
         TM    $REMSW(WAPTR),B'01000000'                           0248
         BZ    @RT00248                                            0248
*     GOTO I00AC08B;                /* THEN PRINT INVALID ENTRY      */
*I00AC08A:                                                         0250
*   GEN(BAL LINKR,I00ACLEN);        /* GO GET LENGTH OF UA ENTRY     */
I00AC08A BAL LINKR,I00ACLEN
*   IF IPLEN=UALNGTH                /* IF 4 DIGITS INPUT             */
*     THEN                          /* THEN                          */
         CLC   IPLEN(1),UALNGTH                                    0251
         BE    @RT00251                                            0251
*     GOTO I00AC081;                /* GO CONVERT IT AS IS           */
*   IF IPLEN^=3                     /* IF NOT 3 OR 4 CHAR ENTERED    */
*     THEN                          /* THEN                          */
         CLI   IPLEN,3                                             0253
         BNE   @RT00253                                            0253
*     GOTO I00AC08B;                /* PRINT ERROR                   */
*   IPLEN=4;                        /* SET LENGTH FOR 4 CHARS      0255
*                                                            @OX05734*/
         MVI   IPLEN,X'04'                                         0255
*   FRADRPTR=FRADRPTR-1;            /* ELSE BACK UP PTR TO = SIGN    */
         L     @15,FRADRPTR                                        0256
         BCTR  @15,0                                               0256
         ST    @15,FRADRPTR                                        0256
*   FRADR(1:1)='F0'X;               /* OVERLAY EQU SIGN WITH 0     0257
*                                                            @OX05734*/
         MVI   FRADR(@15),X'F0'                                    0257
*I00AC081:                                                         0258
*   GEN(BAL LINKR,I00ACONV);        /* OTHERWISE CONVERT IT          */
I00AC081 BAL LINKR,I00ACONV
*   IF R15^=0 THEN                  /* IF IT DID NOT CNV OK THEN     */
         LTR   R15,R15                                             0259
         BNZ   @RT00259                                            0259
*     GOTO I00AC08B;                /* WE MUST HAVE INVALID I/P-BR   */
*   GEN(XC CDSWORK,CDSWORK);        /* ZERO OUT CDS WORK AREA        */
         XC CDSWORK,CDSWORK
*   CDSWORK(3:4)=TOADR(1:2);        /* GET CONVERTED 2-BYTE ADDR     */
         L     @15,TOADRPTR                                        0262
         MVC   CDSWORK+2(2),TOADR(@15)                             0262
*   CDSUA=CDSWORK(1:4);             /* SET UP 4-BYTE ADDR            */
         L     @15,CDSWKPTR                                        0263
         MVC   CDSUA(4,@15),CDSWORK                                0263
*   IF $COPY='1'B                   /* IF THIS IS A COPY REQUEST     */
*     THEN                          /* THEN DO THE FOLLOWING         */
         TM    $COPY(WAPTR),B'00001000'                            0264
         BNO   @RF00264                                            0264
*     DO;                                                          0265
*       R1=ADDR(VERYTBL);           /* SET UP PARM LIST PTR          */
         LA    R1,VERYTBL                                          0266
*       CDSPTR=ADDR(CDSUA);         /* GET PTR TO CDS DATA           */
         ST    @15,CDSPTR                                          0267
*       CALL ISTSC030;              /* GO VERIFY CDS ADDR-VTAM       */
         L     @15,@CV00892                                        0268
         BALR  @14,@15                                             0268
*       IF R15^=0 THEN              /* IF RET CODE DOESN'T EQ ZERO   */
         LTR   R15,R15                                             0269
         BNZ   @RT00269                                            0269
*         GOTO I00AC08B;            /* INVALID ENTRY - ERROR         */
*       RETURN;                     /* RETURN TO CALLER              */
@EL00001 L     @13,4(,@13)                                         0271
@EF00001 DS    0H                                                  0271
@ER00001 L     @14,12(,@13)                                        0271
         LM    @00,@12,20(@13)                                     0271
         BR    @14                                                 0271
*     END;                                                         0272
*   UASW='1'B;                      /* TURN ON UNIT ADR SW           */
@RF00264 L     @15,I00ACWK                                         0273
         OI    UASW(@15),B'00001000'                               0273
*   IF CONTSCAN='0'B THEN           /* IF CONT SCAN SWITCH IS OFF    */
         TM    CONTSCAN(@15),B'10000000'                           0274
         BZ    @RT00274                                            0274
*     GOTO I00AC02;                 /* THEN GO GET NXT LINE          */
*   CONTSCAN='0'B;                  /* OTHERWISE RESET IT AND        */
         NI    CONTSCAN(@15),B'01111111'                           0276
*   GOTO I00AC03A;                  /* CONTINUE ON                   */
         B     I00AC03A                                            0277
*I00AC08B:                                                         0278
*                                                                  0278
*   /*****************************************************************/
*   /*                                                               */
*   /* TCEC MSGN(581)MSGMSK('04000000'X) INVOKED                     */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0278
*   $TCECM='1'B;                    /* SET TCEC SW IN RCA            */
I00AC08B OI    $TCECM(WAPTR),B'00000001'                           0278
*   R1=ADDR($TCA21);                /* SET UP PARM LIST $TR          */
         LA    R1,$TCA21                                           0279
*   CALL S20CEC03;                  /* CALL TCEC-MULTIPLE LN         */
         L     @15,@CV00777                                        0280
         BALR  @14,@15                                             0280
*   DCL                                                            0281
*     1 $TCA21,                     /* TCEC PARM LIST                */
*      2 $TCB21 FIXED(32) INIT(581),/* MSG NUMBER                    */
*      2 $TCC21 FIXED(32) INIT(0),  /* INCT LEN                      */
*      2 $TCD21 BIT(8) INIT('00000000'B),/* FLAG                     */
*      2 $TCE21 CHAR(4) INIT('04000000'X);/* MSSAGE MASK INVALID UNIT
*                                      ADR FLD                       */
*   IF $COPY='1'B THEN              /* IF THIS IS A COPY REQUEST     */
         TM    $COPY(WAPTR),B'00001000'                            0282
         BO    @RT00282                                            0282
*     GOTO I00AC01C;                /* THEN GO GET NAME AGAIN        */
*   GOTO I00AC01;                   /* GO GET ENTIRE LAST LINE       */
         B     I00AC01                                             0284
*I00AC09:                                                          0285
*   IF $INBUFR(INDX1+1:INDX1+LENGTH(SYMNME))^=SYMNME THEN          0285
I00AC09  LH    @15,INDX1                                           0285
         N     @15,@CF00960                                        0285
         ALR   @15,WAPTR                                           0285
         CLC   $INBUFR(3,@15),SYMNME                               0285
         BNE   @RT00285                                            0285
*     GOTO I00AC0A;                 /* IF NOT SYMB NEM ENTRY-BR      */
*   IF $REMSW='1'B THEN             /* IF ITS A REMOTE REQUEST       */
         TM    $REMSW(WAPTR),B'01000000'                           0287
         BO    @RT00287                                            0287
*     GOTO I00AC09B;                /* THEM PRINT INVALID ENTRY      */
*I00AC09A:                                                         0289
*   GEN(BAL LINKR,I00ACLEN);        /* GO GET LENGTH OF SYM NAME     */
I00AC09A BAL LINKR,I00ACLEN
*   IF IPLEN>SNLNGTH THEN           /* IF I/P LEN IS GREATER THAN    */
         CLC   IPLEN(1),SNLNGTH                                    0290
         BH    @RT00290                                            0290
*     GOTO I00AC09B;                /* EXPECTED THEN PRINT ERROR     */
*   CDSSYMBN(1:IPLEN)=FRADR(1:IPLEN);/* SET UP SYMBOLIC NAME         */
         L     @15,CDSWKPTR                                        0292
         SLR   @12,@12                                             0292
         IC    @12,IPLEN                                           0292
         BCTR  @12,0                                               0292
         L     @10,FRADRPTR                                        0292
         EX    @12,@SM00965                                        0292
*   IF $COPY='1'B                   /* IF THIS IS A COPY REQUEST     */
*     THEN                          /* THEN DO THE FOLLOWING         */
         TM    $COPY(WAPTR),B'00001000'                            0293
         BNO   @RF00293                                            0293
*     DO;                                                          0294
*       R1=ADDR(VERYTBL);           /* SET UP PARM LIST PTR          */
         LA    R1,VERYTBL                                          0295
*       CDSPTR=ADDR(CDSUA);         /* GET PTR TO CDS DATA           */
         ST    @15,CDSPTR                                          0296
*       CALL ISTSC030;              /* GO VERIFY CDS EXIST TO VTAM   */
         L     @15,@CV00892                                        0297
         BALR  @14,@15                                             0297
*       IF R15^=0 THEN              /* IF RET CODE ^= ZERO-ERROR     */
         LTR   R15,R15                                             0298
         BNZ   @RT00298                                            0298
*         GOTO I00AC09B;            /* INVALID ENTRY                 */
*       RETURN;                     /* RETURN TO CALLER              */
         B     @EL00001                                            0300
*     END;                                                         0301
*   IF CONTSCAN='0'B THEN           /* IF CONT SCAN SWITCH IS OFF    */
@RF00293 L     @15,I00ACWK                                         0302
         TM    CONTSCAN(@15),B'10000000'                           0302
         BZ    @RT00302                                            0302
*     GOTO I00AC02;                 /* THEN GO GET NXT LINE          */
*   CONTSCAN='0'B;                  /* OTHERWISE RESET IT AND        */
         NI    CONTSCAN(@15),B'01111111'                           0304
*   GOTO I00AC03A;                  /* CONTINUE ON                   */
         B     I00AC03A                                            0305
*I00AC09B:                                                         0306
*                                                                  0306
*   /*****************************************************************/
*   /*                                                               */
*   /* TCEC MSGN(581)MSGMSK('02000000'X) INVOKED                     */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0306
*   $TCECM='1'B;                    /* SET TCEC SW IN RCA            */
I00AC09B OI    $TCECM(WAPTR),B'00000001'                           0306
*   R1=ADDR($TCA22);                /* SET UP PARM LIST $TR          */
         LA    R1,$TCA22                                           0307
*   CALL S20CEC03;                  /* CALL TCEC-MULTIPLE LN         */
         L     @15,@CV00777                                        0308
         BALR  @14,@15                                             0308
*   DCL                                                            0309
*     1 $TCA22,                     /* TCEC PARM LIST                */
*      2 $TCB22 FIXED(32) INIT(581),/* MSG NUMBER                    */
*      2 $TCC22 FIXED(32) INIT(0),  /* INCT LEN                      */
*      2 $TCD22 BIT(8) INIT('00000000'B),/* FLAG                     */
*      2 $TCE22 CHAR(4) INIT('02000000'X);/* MSSAGE MASK INVALID SYM
*                                      NAME FLD                      */
*   IF $COPY='1'B THEN              /* IF THIS IS A COPY REQUEST     */
         TM    $COPY(WAPTR),B'00001000'                            0310
         BO    @RT00310                                            0310
*     GOTO I00AC01C;                /* THEN GO GET NAME AGAIN        */
*   GOTO I00AC01;                   /* GO GET ENTIRE LAST LINE       */
         B     I00AC01                                             0312
*I00AC0A:                                                          0313
*   IF $INBUFR(INDX1+1:INDX1+LENGTH(DB))^=DB THEN                  0313
I00AC0A  LH    @15,INDX1                                           0313
         N     @15,@CF00960                                        0313
         ALR   @15,WAPTR                                           0313
         CLC   $INBUFR(2,@15),DB                                   0313
         BNE   @RT00313                                            0313
*     GOTO I00AC0B;                 /* IF NOT A DATA GROUP THEN BR   */
*   DBCOUNT=0;                      /* INITIALIZE DATA BYTE CT       */
         MVI   DBCOUNT,X'00'                                       0315
*   IF $INBUFR(INDX1+LENGTH(DB)+3:INDX1+LENGTH(DB)+3)=EQSIGN THEN  0316
         LH    @15,INDX1                                           0316
         N     @15,@CF00960                                        0316
         ALR   @15,WAPTR                                           0316
         CLC   $INBUFR+4(1,@15),EQSIGN                             0316
         BE    @RT00316                                            0316
*     GOTO I00AC0AA;                /* IF ITS -DBXX=-ITS OK          */
*   IF $INBUFR(INDX1+LENGTH(DB)+4:INDX1+LENGTH(DB)+4)^=EQSIGN THEN 0318
         LH    @15,INDX1                                           0318
         N     @15,@CF00960                                        0318
         ALR   @15,WAPTR                                           0318
         CLC   $INBUFR+5(1,@15),EQSIGN                             0318
         BNE   @RT00318                                            0318
*     GOTO I00AC0AC;                                               0319
*I00AC0AA:                                                         0320
*   DBSW='1'B;                      /* TURN ON DATA BYTE SW          */
I00AC0AA DS    0H                                                  0321
*   DATASW='1'B;                    /* SET DATA SW                   */
         L     @15,I00ACWK                                         0321
         OI    DBSW(@15),B'00000011'                               0321
*   GEN(BAL LINKR,I00ACLEN);        /* GO GET LENGTH OF DATA BYTES   */
         BAL LINKR,I00ACLEN
*   IF ERROR=ON                     /* IF NOT NUMERICAL DISPLACEMENT */
*     THEN                          /* THEN                          */
         L     @15,I00ACWK                                         0323
         TM    ERROR(@15),B'10000000'                              0323
         BO    @RT00323                                            0323
*     GOTO I00AC0AC;                /* REJECT ENTRY                  */
*   IF $REMSW=OFF                   /* IF LOCAL CDS                  */
*     THEN                          /* THEN                          */
         TM    $REMSW(WAPTR),B'01000000'                           0325
         BNZ   @RF00325                                            0325
*     INDX2=DB#-12;                 /* START EXTRA DATA IN BYTE 12   */
         LH    @15,DB#                                             0326
         N     @15,@CF00960                                        0326
         SL    @15,@CF00135                                        0326
         STC   @15,INDX2                                           0326
*   ELSE                            /* ELSE FOR REMOTE BYTE 20       */
*     INDX2=DB#-20;                 /* SET UP CDSEXARA OFFSET        */
         B     @RC00325                                            0327
@RF00325 LH    @15,DB#                                             0327
         N     @15,@CF00960                                        0327
         SL    @15,@CF00376                                        0327
         STC   @15,INDX2                                           0327
*   IF EBCDICSW='1'B THEN                                          0328
@RC00325 L     @15,I00ACWK                                         0328
         TM    EBCDICSW(@15),B'00000100'                           0328
         BNO   @RF00328                                            0328
*     DO;                           /* IF IT WAS EBCDIC CHAR THEN    */
*       EBCDICSW='0'B;              /* RESET SW AND                  */
         NI    EBCDICSW(@15),B'11111011'                           0330
*       IF(DB#+IPLEN)>255 THEN                                     0331
         SLR   @15,@15                                             0331
         IC    @15,IPLEN                                           0331
         LH    @12,DB#                                             0331
         N     @12,@CF00960                                        0331
         ALR   @12,@15                                             0331
         C     @12,@CF00914                                        0331
         BH    @RT00331                                            0331
*         GOTO I00AC0AC;            /*                       @YA04053*/
*       IF $REMSW=OFF THEN                                         0333
         TM    $REMSW(WAPTR),B'01000000'                           0333
         BNZ   @RF00333                                            0333
*         CDSSYMBN(INDX2+1:INDX2+IPLEN)=FRADR;                     0334
         SLR   @12,@12                                             0334
         IC    @12,INDX2                                           0334
         L     @10,CDSWKPTR                                        0334
         ALR   @10,@12                                             0334
         BCTR  @15,0                                               0334
         L     @12,FRADRPTR                                        0334
         EX    @15,@SM00968                                        0334
*       ELSE                                                       0335
*         CDSEXARA(INDX2+1:INDX2+IPLEN)=FRADR;/* MOVE IN EBCDIC      */
         B     @RC00333                                            0335
@RF00333 SLR   @15,@15                                             0335
         IC    @15,INDX2                                           0335
         L     @12,CDSWKPTR                                        0335
         ALR   @12,@15                                             0335
         SLR   @15,@15                                             0335
         IC    @15,IPLEN                                           0335
         BCTR  @15,0                                               0335
         L     @10,FRADRPTR                                        0335
         EX    @15,@SM00970                                        0335
*     END;                                                         0336
*   ELSE                                                           0337
*     DO;                                                          0337
         B     @RC00328                                            0337
@RF00328 DS    0H                                                  0338
*       GEN(BAL  LINKR,I00ACONV);   /* GO CONVERT DATA TO HEX        */
         BAL  LINKR,I00ACONV
*       IF R15^=ZERO THEN           /* FI IT DID NOT CONV OK THEN    */
         SLR   @12,@12                                             0339
         IC    @12,ZERO                                            0339
         CR    R15,@12                                             0339
         BNE   @RT00339                                            0339
*         GOTO I00AC0AC;            /* WE MUST HAVE INV I/P          */
*       I=IPLEN/2;                  /* DIVIDE INPUT LENGTH IN HALF   */
         SLR   @15,@15                                             0341
         IC    @15,IPLEN                                           0341
         LR    @12,@15                                             0341
         SRL   @12,1                                               0341
         STC   @12,I                                               0341
*       R=IPLEN//2;                 /* GET REMAINDER                 */
         LR    @00,@15                                             0342
         SRDA  @00,32                                              0342
         D     @00,@CF00138                                        0342
         STC   @00,R                                               0342
*       IF R^=ZERO THEN             /* IF THERE WAS A REMAINDER      */
         CLC   R(1),ZERO                                           0343
         BNE   @RT00343                                            0343
*         GOTO I00AC0AC;            /* THEN ITS INVALID ENTRY        */
*       IPLEN=I;                    /* SET UP NEW INPUT LENGTH       */
         MVC   IPLEN(1),I                                          0345
*       IF(DB#+IPLEN)>255 THEN      /* IF 255 LIMIT EXCEEDED @YA04053*/
         SLR   @15,@15                                             0346
         IC    @15,IPLEN                                           0346
         LH    @12,DB#                                             0346
         N     @12,@CF00960                                        0346
         ALR   @12,@15                                             0346
         C     @12,@CF00914                                        0346
         BH    @RT00346                                            0346
*         GOTO I00AC0AC;            /* CDS LIMIT THEN BR-INVALID     */
*       IF $REMSW=OFF               /* IF LOCAL                      */
*         THEN                      /* THEN                          */
         TM    $REMSW(WAPTR),B'01000000'                           0348
         BNZ   @RF00348                                            0348
*         CDSSYMBN(INDX2+1:INDX2+IPLEN)=TOADR;                     0349
         SLR   @12,@12                                             0349
         IC    @12,INDX2                                           0349
         L     @10,CDSWKPTR                                        0349
         ALR   @10,@12                                             0349
         BCTR  @15,0                                               0349
         L     @12,TOADRPTR                                        0349
         EX    @15,@SM00972                                        0349
*       ELSE                                                       0350
*         CDSEXARA(INDX2+1:INDX2+IPLEN)=TOADR;/* MIVE IN DATA BYTE   */
         B     @RC00348                                            0350
@RF00348 SLR   @15,@15                                             0350
         IC    @15,INDX2                                           0350
         L     @12,CDSWKPTR                                        0350
         ALR   @12,@15                                             0350
         SLR   @15,@15                                             0350
         IC    @15,IPLEN                                           0350
         BCTR  @15,0                                               0350
         L     @10,TOADRPTR                                        0350
         EX    @15,@SM00974                                        0350
*     END;                                                         0351
@RC00348 DS    0H                                                  0352
*I00AC0AB:                                                         0352
*   IF DBCOUNT<DB#+IPLEN            /* IF THE LAST DATA COUNT IS   0352
*                                                            @YA04053*/
*     THEN                          /* LESS THAN THE PRESENT ONE     */
@RC00328 DS    0H                                                  0352
I00AC0AB LH    @15,DB#                                             0352
         N     @15,@CF00960                                        0352
         SLR   @12,@12                                             0352
         IC    @12,IPLEN                                           0352
         ALR   @15,@12                                             0352
         SLR   @12,@12                                             0352
         IC    @12,DBCOUNT                                         0352
         CR    @15,@12                                             0352
         BNH   @RF00352                                            0352
*     DO;                           /* THEN UPDATE THAT COUNT BY     */
*       DBCOUNT=DB#+IPLEN;          /* ADDING THE DB # TO THE I/P  0354
*                                                            @YA04053*/
         STC   @15,DBCOUNT                                         0354
*     END;                          /* LENGTH                        */
*   IF CONTSCAN='0'B THEN                                          0356
@RF00352 L     @15,I00ACWK                                         0356
         TM    CONTSCAN(@15),B'10000000'                           0356
         BZ    @RT00356                                            0356
*     GOTO I00AC02;                                                0357
*   CONTSCAN='0'B;                                                 0358
         NI    CONTSCAN(@15),B'01111111'                           0358
*   GOTO I00AC03A;                                                 0359
         B     I00AC03A                                            0359
*I00AC0AC:                                                         0360
*                                                                  0360
*   /*****************************************************************/
*   /*                                                               */
*   /* TCEC MSGN(581)MSGMSK('01000000'X) INVOKED                     */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0360
*   $TCECM='1'B;                    /* SET TCEC SW IN RCA            */
I00AC0AC OI    $TCECM(WAPTR),B'00000001'                           0360
*   R1=ADDR($TCA23);                /* SET UP PARM LIST $TR          */
         LA    R1,$TCA23                                           0361
*   CALL S20CEC03;                  /* CALL TCEC-MULTIPLE LN         */
         L     @15,@CV00777                                        0362
         BALR  @14,@15                                             0362
*   DCL                                                            0363
*     1 $TCA23,                     /* TCEC PARM LIST                */
*      2 $TCB23 FIXED(32) INIT(581),/* MSG NUMBER                    */
*      2 $TCC23 FIXED(32) INIT(0),  /* INCT LEN                      */
*      2 $TCD23 BIT(8) INIT('00000000'B),/* FLAG                     */
*      2 $TCE23 CHAR(4) INIT('01000000'X);/* MSSAGE MASK INVALID DATA
*                                      FLD                           */
*   GOTO I00AC01;                   /* GO GET ENTIRE LAST LINE       */
         B     I00AC01                                             0364
*I00AC0B:                                                          0365
*   IF $INBUFR(INDX1+1:INDX1+LENGTH(ENDATA))=ENDATA THEN           0365
I00AC0B  LH    @15,INDX1                                           0365
         N     @15,@CF00960                                        0365
         ALR   @15,WAPTR                                           0365
         CLC   $INBUFR(3,@15),ENDATA                               0365
         BE    @RT00365                                            0365
*     GOTO I00ACRET;                /* IF EOD THEN RETURN TO CALL    */
*                                                                  0366
*   /*****************************************************************/
*   /*                                                               */
*   /* TCEC MSGN(581)MSGMSK('00800000'X) INVOKED                     */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0367
*   $TCECM='1'B;                    /* SET TCEC SW IN RCA            */
         OI    $TCECM(WAPTR),B'00000001'                           0367
*   R1=ADDR($TCA24);                /* SET UP PARM LIST $TR          */
         LA    R1,$TCA24                                           0368
*   CALL S20CEC03;                  /* CALL TCEC-MULTIPLE LN         */
         L     @15,@CV00777                                        0369
         BALR  @14,@15                                             0369
*   DCL                                                            0370
*     1 $TCA24,                     /* TCEC PARM LIST                */
*      2 $TCB24 FIXED(32) INIT(581),/* MSG NUMBER                    */
*      2 $TCC24 FIXED(32) INIT(0),  /* INCT LEN                      */
*      2 $TCD24 BIT(8) INIT('00000000'B),/* FLAG                     */
*      2 $TCE24 CHAR(4) INIT('00800000'X);/* MSSAGE MASK INVALID PARM*/
*   GOTO I00AC01;                   /* RE-ENTER LAST LINE            */
         B     I00AC01                                             0371
*I00ACRET:                                                         0372
*   IF DATASW='1'B                  /* IF THE DATA SW IS ON          */
*     THEN                          /* THEN DO THE FOLLOWING         */
I00ACRET L     @15,I00ACWK                                         0372
         TM    DATASW(@15),B'00000001'                             0372
         BNO   @RF00372                                            0372
*     DO;                                                          0373
*       DATASW='0'B;                /* TURN OF DATA SW               */
         NI    DATASW(@15),B'11111110'                             0374
*       IF $CHANGE^='1'B            /* IF THIS IS NOT A CHANGE       */
*         THEN                      /* THEN DO THE FOLLOWING         */
         TM    $CHANGE(WAPTR),B'00100000'                          0375
         BO    @RF00375                                            0375
*         DO;                                                      0376
*           CDSBYTCT=DBCOUNT;       /* SET UP NEW BYTE COUNT         */
         IC    @15,DBCOUNT                                         0377
         L     @12,CDSWKPTR                                        0377
         STC   @15,CDSBYTCT(,@12)                                  0377
*         END;                                                     0378
*       ELSE                        /* IF IT IS A CHANGE REQ         */
*         DO;                       /* THEN DO THE FOLLOWING         */
         B     @RC00375                                            0379
@RF00375 DS    0H                                                  0380
*           IF CDSBYTCT<DBCOUNT     /* IF ORIG COUNT IS LESS         */
*             THEN                  /* THEN DO THE FOLLOWING         */
         L     @15,CDSWKPTR                                        0380
         CLC   CDSBYTCT(1,@15),DBCOUNT                             0380
         BNL   @RF00380                                            0380
*             DO;                                                  0381
*               CDSBYTCT=DBCOUNT;   /* SET UP NEW BYTE COUNT         */
         IC    @12,DBCOUNT                                         0382
         STC   @12,CDSBYTCT(,@15)                                  0382
*             END;                                                 0383
*         END;                                                     0384
*     END;                                                         0385
*   ELSE                            /* IF THE DATA SW WAS OFF        */
*     DO;                           /* DO THE FOLLOWING              */
         B     @RC00372                                            0386
@RF00372 DS    0H                                                  0387
*       IF $CHANGE^='1'B&$COPY^='1'B/* IF NOT CHNG OR COPY           */
*         THEN                      /* THEN DO THE FOLLOWING         */
         TM    $CHANGE(WAPTR),B'00100000'                          0387
         BO    @RF00387                                            0387
         TM    $COPY(WAPTR),B'00001000'                            0387
         BO    @RF00387                                            0387
*         DO;                                                      0388
*           CDSBYTCT=20;            /* SET MINIMUM BYTE COUNT        */
         L     @15,CDSWKPTR                                        0389
         MVI   CDSBYTCT(@15),X'14'                                 0389
*         END;                                                     0390
*     END;                                                         0391
*   RETURN;                         /* RETURN TO CALLER              */
         B     @EL00001                                            0392
*   GEN(EJECT);                                                    0393
*                                                                  0393
         EJECT
*/********************************************************************/
*/*  THIS ROUTINE DETERMINES THE LENGTH OF THE ACTUAL INPUT WHICH    */
*/*  IS TO BE PLACED IN THE CDS. IT USES THE EQUAL (=) SIGN AS IT    */
*/*  STARTING DELIMETER AND EITHER A BLANK OR A COMMA AS ITS ENDING  */
*/*  DELIMETER                                                       */
*/********************************************************************/
*                                                                  0394
*I00ACLEN:                                                         0394
*   RETSAV1=LINKR;                  /* SAVE RET ADR PTR              */
I00ACLEN ST    LINKR,RETSAV1                                       0394
*   EBCDICSW=OFF;                   /* RESET EBCDIC INPUT FLAG       */
         L     @15,I00ACWK                                         0395
         NI    EBCDICSW(@15),B'11111011'                           0395
*   ERROR=OFF;                      /* RESET ERROR FLAG              */
         NI    ERROR(@15),B'01111111'                              0396
*   IPLEN='0'X;                     /* ZERO OUT INPUT LEN FLD        */
         MVI   IPLEN,X'00'                                         0397
*   IF DBSW='1'B THEN               /* IF THIS IS A DATA REQ         */
         TM    DBSW(@15),B'00000010'                               0398
         BO    @RT00398                                            0398
*     GOTO I00ACL02;                /* THEN BR AND HANDLE            */
*   DO WHILE($INBUFR(INDX1+1:INDX1+1)^=EQSIGN);                    0400
         B     @DE00400                                            0400
@DL00400 DS    0H                                                  0401
*     INDX1=INDX1+1;                /* UPDATE INDEX PTR              */
         LH    @15,INDX1                                           0401
         LA    @15,1(,@15)                                         0401
         STH   @15,INDX1                                           0401
*   END;                                                           0402
@DE00400 LH    @15,INDX1                                           0402
         N     @15,@CF00960                                        0402
         ALR   @15,WAPTR                                           0402
         CLC   $INBUFR(1,@15),EQSIGN                               0402
         BNE   @DL00400                                            0402
*   INDX1=INDX1+1;                  /* GET PAST EQ SIGN              */
         LH    @15,INDX1                                           0403
         N     @15,@CF00960                                        0403
         LA    @15,1(,@15)                                         0403
         STH   @15,INDX1                                           0403
*I00ACL01:                                                         0404
*   FRADRPTR=ADDR($INBUFR)+INDX1;   /* SET UP FROM ADDR FOR ITACONV  */
I00ACL01 LA    @15,$INBUFR(,WAPTR)                                 0404
         LH    @12,INDX1                                           0404
         N     @12,@CF00960                                        0404
         ALR   @15,@12                                             0404
         ST    @15,FRADRPTR                                        0404
*   DO WHILE(($INBUFR(INDX1+1:INDX1+1)^=BLANK)&($INBUFR(INDX1+1:INDX1+1
*         )^=COMMA)&($INBUFR(INDX1+1:INDX1+1)^='00'X));            0405
         B     @DE00405                                            0405
@DL00405 DS    0H                                                  0406
*     INDX1=INDX1+1;                /* UPDATE INDEX PTR              */
         LA    @15,1                                               0406
         LH    @12,INDX1                                           0406
         N     @12,@CF00960                                        0406
         ALR   @12,@15                                             0406
         STH   @12,INDX1                                           0406
*     IPLEN=IPLEN+1;                /* ADD ONE TO I/P LENGTH CTR     */
         SLR   @12,@12                                             0407
         IC    @12,IPLEN                                           0407
         ALR   @15,@12                                             0407
         STC   @15,IPLEN                                           0407
*   END;                                                           0408
@DE00405 LH    @15,INDX1                                           0408
         N     @15,@CF00960                                        0408
         ALR   @15,WAPTR                                           0408
         CLC   $INBUFR(1,@15),BLANK                                0408
         BE    @DC00405                                            0408
         LH    @15,INDX1                                           0408
         N     @15,@CF00960                                        0408
         ALR   @15,WAPTR                                           0408
         CLC   $INBUFR(1,@15),COMMA                                0408
         BE    @DC00405                                            0408
         LH    @15,INDX1                                           0408
         N     @15,@CF00960                                        0408
         ALR   @15,WAPTR                                           0408
         CLI   $INBUFR(@15),X'00'                                  0408
         BNE   @DL00405                                            0408
@DC00405 DS    0H                                                  0409
*   GOTO I00ACL03;                  /* BR AROUND                     */
         B     I00ACL03                                            0409
*I00ACL02:                                                         0410
*   DBSW='0'B;                      /* RESET DATA BYTE SW            */
I00ACL02 L     @15,I00ACWK                                         0410
         NI    DBSW(@15),B'11111101'                               0410
*   INDX1=INDX1+2;                  /* GET PAST 'DB'                 */
         LH    @15,INDX1                                           0411
         N     @15,@CF00960                                        0411
         LA    @15,2(,@15)                                         0411
         STH   @15,INDX1                                           0411
*   DB#='0000'X;                    /* ZERO OUT DATA BYTE NUMBER     */
         SLR   @12,@12                                             0412
         STH   @12,DB#                                             0412
*   DB#LEN='0'X;                    /* ZERO OUT DATA BYTE # LEN      */
         MVI   DB#LEN,X'00'                                        0413
*   FRADRPTR=ADDR($INBUFR)+INDX1;   /* SET UP FROM ADDR FOR ITACONV  */
         LA    @12,$INBUFR(,WAPTR)                                 0414
         ALR   @12,@15                                             0414
         ST    @12,FRADRPTR                                        0414
*   INPTR=FRADRPTR;                 /* POINT TO DISPLACEMNT          */
         ST    @12,INPTR                                           0415
*   DO WHILE($INBUFR(INDX1+1:INDX1+1)^=EQSIGN);                    0416
         B     @DE00416                                            0416
@DL00416 DS    0H                                                  0417
*     INDX1=INDX1+1;                /* UPDATE INDEX PTR              */
         LA    @15,1                                               0417
         LH    @12,INDX1                                           0417
         N     @12,@CF00960                                        0417
         ALR   @12,@15                                             0417
         STH   @12,INDX1                                           0417
*     DB#LEN=DB#LEN+1;              /* ADD ONE TO DATA BYTE # LEN    */
         SLR   @12,@12                                             0418
         IC    @12,DB#LEN                                          0418
         ALR   @15,@12                                             0418
         STC   @15,DB#LEN                                          0418
*   END;                                                           0419
@DE00416 LH    @15,INDX1                                           0419
         N     @15,@CF00960                                        0419
         ALR   @15,WAPTR                                           0419
         CLC   $INBUFR(1,@15),EQSIGN                               0419
         BNE   @DL00416                                            0419
*   DO INPTR=INPTR TO FRADRPTR+DB#LEN-1;/* LOOK AT DISPLACEMNT       */
         L     @15,INPTR                                           0420
         B     @DE00420                                            0420
@DL00420 DS    0H                                                  0421
*     IF INPUT(1:4)^='1111'B        /* IF INPUT NOT NUMBERS          */
*       THEN                        /* THEN                          */
         TM    INPUT(@15),B'11110000'                              0421
         BO    @RF00421                                            0421
*       DO;                                                        0422
*         ERROR=ON;                 /* ERROR FLAG SET                */
         L     @15,I00ACWK                                         0423
         OI    ERROR(@15),B'10000000'                              0423
*         GOTO I00ACL04;            /* RETURN                        */
         B     I00ACL04                                            0424
*       END;                                                       0425
*   END;                                                           0426
@RF00421 LA    @15,1                                               0426
         AL    @15,INPTR                                           0426
         ST    @15,INPTR                                           0426
@DE00420 SLR   @12,@12                                             0426
         IC    @12,DB#LEN                                          0426
         AL    @12,FRADRPTR                                        0426
         BCTR  @12,0                                               0426
         CR    @15,@12                                             0426
         BNH   @DL00420                                            0426
*   IF DB#LEN=2                     /* IF DB# IS 20 TO 99            */
*     THEN                                                         0427
         CLI   DB#LEN,2                                            0427
         BNE   @RF00427                                            0427
*     DO;                                                          0428
*       PACK(PKTO(1:2),FRADR(1:2)); /* PACK DB NUMBER                */
         L     @15,FRADRPTR                                        0429
         PACK  PKTO(2),FRADR(2,@15)                                0429
*     END;                                                         0430
*   ELSE                            /* IF DB# IS 100-255 THEN DO     */
*     DO;                                                          0431
         B     @RC00427                                            0431
@RF00427 DS    0H                                                  0432
*       PACK(PKTO(1:2),FRADR(1:3)); /* PACK 3-BYTE ENTRY             */
         L     @15,FRADRPTR                                        0432
         PACK  PKTO(2),FRADR(3,@15)                                0432
*     END;                                                         0433
*   CVB(DB#,PKTO(1:2));             /* CONVERT DB# TO BINARY         */
@RC00427 XC    @TS00001(8),@TS00001                                0434
         MVC   @TS00001+6(2),PKTO                                  0434
         CVB   @15,@TS00001                                        0434
         STH   @15,DB#                                             0434
*   INDX1=INDX1+1;                  /* GET PAST EQUAL SIGN           */
         LH    @15,INDX1                                           0435
         N     @15,@CF00960                                        0435
         LA    @15,1(,@15)                                         0435
         STH   @15,INDX1                                           0435
*   IF $INBUFR(INDX1+1:INDX1+LENGTH(EBCDICEN))^=EBCDICEN THEN      0436
         ALR   @15,WAPTR                                           0436
         CLC   $INBUFR(2,@15),EBCDICEN                             0436
         BNE   @RT00436                                            0436
*     GOTO I00ACL01;                /* IF NOT EBCDIC THEN BR         */
*   EBCDICSW='1'B;                  /* TURN ON EBCDIC SW             */
         L     @15,I00ACWK                                         0438
         OI    EBCDICSW(@15),B'00000100'                           0438
*   INDX1=INDX1+2;                  /* GET TO FIRST EBCDIC CHAR      */
         LH    @15,INDX1                                           0439
         N     @15,@CF00960                                        0439
         LA    @15,2(,@15)                                         0439
         STH   @15,INDX1                                           0439
*   FRADRPTR=ADDR($INBUFR)+INDX1;   /* GET STARTING ADDR OF EBCDIC   */
         LA    @12,$INBUFR(,WAPTR)                                 0440
         ALR   @12,@15                                             0440
         ST    @12,FRADRPTR                                        0440
*   DO WHILE($INBUFR(INDX1+1:INDX1+1)^=SINSLASH);                  0441
         B     @DE00441                                            0441
@DL00441 DS    0H                                                  0442
*     INDX1=INDX1+1;                /* UPDATE INDEX PTR              */
         LA    @15,1                                               0442
         LH    @12,INDX1                                           0442
         N     @12,@CF00960                                        0442
         ALR   @12,@15                                             0442
         STH   @12,INDX1                                           0442
*     IPLEN=IPLEN+1;                /* ADD ONE TO I/P LENGTH CTR     */
         SLR   @12,@12                                             0443
         IC    @12,IPLEN                                           0443
         ALR   @15,@12                                             0443
         STC   @15,IPLEN                                           0443
*   END;                                                           0444
@DE00441 LH    @15,INDX1                                           0444
         N     @15,@CF00960                                        0444
         ALR   @15,WAPTR                                           0444
         CLC   $INBUFR(1,@15),SINSLASH                             0444
         BNE   @DL00441                                            0444
*   INDX1=INDX1+1;                  /* GET PAST SINGLE SLASH         */
         LH    @15,INDX1                                           0445
         N     @15,@CF00960                                        0445
         LA    @15,1(,@15)                                         0445
         STH   @15,INDX1                                           0445
*   GOTO I00ACL03;                                                 0446
         B     I00ACL03                                            0446
*I00ACL03:                                                         0447
*   IF $INBUFR(INDX1+1:INDX1+1)=COMMA THEN                         0447
I00ACL03 LH    @15,INDX1                                           0447
         N     @15,@CF00960                                        0447
         ALR   @15,WAPTR                                           0447
         CLC   $INBUFR(1,@15),COMMA                                0447
         BNE   @RF00447                                            0447
*     DO;                                                          0448
*       INDX1=INDX1+1;              /* UPDATE INDEX PTR              */
         LH    @15,INDX1                                           0449
         N     @15,@CF00960                                        0449
         LA    @15,1(,@15)                                         0449
         STH   @15,INDX1                                           0449
*       CONTSCAN='1'B;              /* SET THE CONTINUE SCAN SW      */
         L     @15,I00ACWK                                         0450
         OI    CONTSCAN(@15),B'10000000'                           0450
*     END;                                                         0451
*I00ACL04:                                                         0452
*   LINKR=RETSAV1;                  /* GET RET ADDR                  */
@RF00447 DS    0H                                                  0452
I00ACL04 L     LINKR,RETSAV1                                       0452
*   GEN(BR LINKR);                  /* RETURN TO CALLER              */
         BR LINKR
*   GEN(EJECT);                                                    0454
*                                                                  0454
         EJECT
*/********************************************************************/
*/*                  C O N V E R T  R O U T I N E                    */
*/********************************************************************/
*                                                                  0455
*I00ACONV:                                                         0455
*   RETSAV1=LINKR;                  /* SAVE RETURN ADDR              */
*                                                                  0455
I00ACONV ST    LINKR,RETSAV1                                       0455
*   /*****************************************************************/
*   /*                                                               */
*   /* ITACONV FROM(FRADR)TO(TOADR)COUNT(IPLEN)TYPE(EH) INVOKED      */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0456
*   DCL                                                            0456
*     1 ITATCPRM BDY(WORD),         /* CONVERT PARAMETER LIST        */
*      2 * CHAR(4) INIT('0102F4F1'X),                              0456
*      2 ITATCFR PTR,               /* ADDRESS OF FROM FIELD         */
*      2 ITATCTO PTR,               /* ADDRESS OF TO FIELD           */
*      2 * BIT(8) INIT(0),          /* FLAGS FOR CONVERT MODULE      */
*       3 ITATCTP BIT(1),           /* TYPE OF CONVERT REQUIRED      */
*      2 ITATCNT FIXED(8);          /* NUMBER OF BYTES TO CONVERT    */
*   ITATCFR=ADDR(FRADR);            /* SET THE FROM ADDRESS          */
         L     @15,FRADRPTR                                        0457
         ST    @15,ITATCFR                                         0457
*   ITATCTO=ADDR(TOADR);            /* SET THE TO ADDRESS            */
         L     @15,TOADRPTR                                        0458
         ST    @15,ITATCTO                                         0458
*   ITATCTP='0'B;                   /* SET THE TYPE OF CONVERT BIT   */
         NI    ITATCTP,B'01111111'                                 0459
*   ITATCNT=IPLEN;                  /* GIVE THE CONVERT BYTE COUNT   */
         IC    @15,IPLEN                                           0460
         STC   @15,ITATCNT                                         0460
*   R1=ADDR(ITATCPRM);              /* POINT TO CONVERT PARM LIST    */
         LA    R1,ITATCPRM                                         0461
*   CALL ISTSC021;                  /* CALL CONVERT DIRECTLY         */
         L     @15,@CV00956                                        0462
         BALR  @14,@15                                             0462
*   LINKR=RETSAV1;                  /* GET RETURN ADDR               */
         L     LINKR,RETSAV1                                       0463
*   GEN(BR LINKR);                  /* RETURN TO CALLER              */
         BR LINKR
*/* ATDSPLY   INVOKED.                                               */
*/********************************************************************/
*/* THERE HAVE BEEN NO ATBUILD INCLUSIONS IN THIS COMPILATION.       */
*/********************************************************************/
*/* END OF ATDSPLY.                                                  */
*                                                                  0465
*   END ISTIC00A;                                                  0465
         B     @EL00001                                            0465
@DATA    DS    0H
@SM00965 MVC   CDSSYMBN(0,@15),FRADR(@10)
@SM00968 MVC   CDSSYMBN(0,@10),FRADR(@12)
@SM00970 MVC   CDSEXARA(0,@12),FRADR(@10)
@SM00972 MVC   CDSSYMBN(0,@10),TOADR(@12)
@SM00974 MVC   CDSEXARA(0,@12),TOADR(@10)
         DS    0F
@SA00001 DS    18F
         DS    0F
@CF00138 DC    F'2'
@CF00135 DC    F'12'
@CF00376 DC    F'20'
@CF00050 DC    F'80'
@CF00914 DC    F'255'
@CF00084 DC    F'256'
@CF00960 DC    XL4'0000FFFF'
@CV00777 DC    V(S20CEC03)
@CV00892 DC    V(ISTSC030)
@CV00956 DC    V(ISTSC021)
         DS    0D
RCAPTR   DS    A
CECMAP   DS    A
CDSWKPTR DS    A
FRADRPTR DS    A
TOADRPTR DS    A
INPTR    DS    A
I00ACWK  DS    A
DB#      DC    XL2'0000'
INDX1    DS    H
INDX2    DC    XL1'00'
MLNGTH   DC    XL1'2'
FLNGTH   DC    XL1'2'
CLNGTH   DC    XL1'2'
TLNGTH   DC    XL1'2'
FLGLNGTH DC    XL1'6'
UALNGTH  DC    XL1'4'
SNLNGTH  DC    XL1'8'
DBLNGTH  DC    XL1'EB'
         DS    0D
@TS00001 DS    CL8
BLANK    DC    CL1' '
HWONE    DC    X'0001'
ZERO     DC    X'00'
I        DC    X'00'
R        DC    X'00'
         DS    CL2
RETSAV1  DS    CL4
PROMPT   DC    CL1'P'
EQSIGN   DC    CL1'='
COMMA    DC    CL1','
MODEL    DC    CL2'M='
FEAT     DC    CL2'F='
CLASS    DC    CL2'C='
TYPE     DC    CL2'T='
FLAGS    DC    CL3'FL='
UADR     DC    CL3'UA='
SYMNME   DC    CL3'SN='
DB       DC    CL2'DB'
CDSWORK  DS    CL20
DB#LEN   DS    CL1
DBCOUNT  DC    X'00'
EBCDICEN DC    CL2'E/'
ENDATA   DC    CL3'END'
IPLEN    DS    CL1
PKTO     DS    CL2
SINSLASH DC    CL1'/'
         DS    CL3
VERYTBL  DS    CL5
         ORG   VERYTBL
CDSPTR   DS    AL4
@NM00053 DC    X'00'
         ORG   VERYTBL+5
         DS    CL3
$TCA09   DS    CL13
         ORG   $TCA09
$TCB09   DC    A(580)
$TCC09   DC    A(61)
$TCD09   DC    B'01000000'
$TCE09   DC    X'80000000'
         ORG   $TCA09+13
         DS    CL3
$TCA10   DS    CL13
         ORG   $TCA10
$TCB10   DC    A(580)
$TCC10   DC    A(0)
$TCD10   DC    B'00000000'
$TCE10   DC    X'3FDFFC00'
         ORG   $TCA10+13
         DS    CL3
$TCA11   DS    CL13
         ORG   $TCA11
$TCB11   DC    A(580)
$TCC11   DC    A(0)
$TCD11   DC    B'00000000'
$TCE11   DC    X'3FBFFC00'
         ORG   $TCA11+13
         DS    CL3
$TCA12   DS    CL13
         ORG   $TCA12
$TCB12   DC    A(582)
$TCC12   DC    A(61)
$TCD12   DC    B'01000000'
$TCE12   DC    X'80000000'
         ORG   $TCA12+13
         DS    CL3
$TCA13   DS    CL13
         ORG   $TCA13
$TCB13   DC    A(581)
$TCC13   DC    A(0)
$TCD13   DC    B'00000000'
$TCE13   DC    X'02000000'
         ORG   $TCA13+13
         DS    CL3
$TCA14   DS    CL13
         ORG   $TCA14
$TCB14   DC    A(581)
$TCC14   DC    A(0)
$TCD14   DC    B'00000000'
$TCE14   DC    X'04000000'
         ORG   $TCA14+13
         DS    CL3
$TCA15   DS    CL13
         ORG   $TCA15
$TCB15   DC    A(580)
$TCC15   DC    A(61)
$TCD15   DC    B'01000000'
$TCE15   DC    X'40000000'
         ORG   $TCA15+13
         DS    CL3
$TCA16   DS    CL13
         ORG   $TCA16
$TCB16   DC    A(581)
$TCC16   DC    A(0)
$TCD16   DC    B'00000000'
$TCE16   DC    X'80000000'
         ORG   $TCA16+13
         DS    CL3
$TCA17   DS    CL13
         ORG   $TCA17
$TCB17   DC    A(581)
$TCC17   DC    A(0)
$TCD17   DC    B'00000000'
$TCE17   DC    X'40000000'
         ORG   $TCA17+13
         DS    CL3
$TCA18   DS    CL13
         ORG   $TCA18
$TCB18   DC    A(581)
$TCC18   DC    A(0)
$TCD18   DC    B'00000000'
$TCE18   DC    X'20000000'
         ORG   $TCA18+13
         DS    CL3
$TCA19   DS    CL13
         ORG   $TCA19
$TCB19   DC    A(581)
$TCC19   DC    A(0)
$TCD19   DC    B'00000000'
$TCE19   DC    X'10000000'
         ORG   $TCA19+13
         DS    CL3
$TCA20   DS    CL13
         ORG   $TCA20
$TCB20   DC    A(581)
$TCC20   DC    A(0)
$TCD20   DC    B'00000000'
$TCE20   DC    X'08000000'
         ORG   $TCA20+13
         DS    CL3
$TCA21   DS    CL13
         ORG   $TCA21
$TCB21   DC    A(581)
$TCC21   DC    A(0)
$TCD21   DC    B'00000000'
$TCE21   DC    X'04000000'
         ORG   $TCA21+13
         DS    CL3
$TCA22   DS    CL13
         ORG   $TCA22
$TCB22   DC    A(581)
$TCC22   DC    A(0)
$TCD22   DC    B'00000000'
$TCE22   DC    X'02000000'
         ORG   $TCA22+13
         DS    CL3
$TCA23   DS    CL13
         ORG   $TCA23
$TCB23   DC    A(581)
$TCC23   DC    A(0)
$TCD23   DC    B'00000000'
$TCE23   DC    X'01000000'
         ORG   $TCA23+13
         DS    CL3
$TCA24   DS    CL13
         ORG   $TCA24
$TCB24   DC    A(581)
$TCC24   DC    A(0)
$TCD24   DC    B'00000000'
$TCE24   DC    X'00800000'
         ORG   $TCA24+13
         DS    CL3
ITATCPRM DS    CL14
         ORG   ITATCPRM
@NM00057 DC    X'0102F4F1'
ITATCFR  DS    AL4
ITATCTO  DS    AL4
@NM00058 DC    AL1(0)
         ORG   @NM00058
ITATCTP  DS    BL1
         ORG   ITATCPRM+13
ITATCNT  DS    FL1
         ORG   ITATCPRM+14
         DS    CL2
PATCH    DC    40F'0'
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
WAPTR    EQU   @02
R1       EQU   @01
R15      EQU   @15
LINKR    EQU   @14
R0       EQU   @00
R10      EQU   @10
R11      EQU   @11
R12      EQU   @12
R13      EQU   @13
R14      EQU   @14
R2       EQU   @02
R3       EQU   @03
R4       EQU   @04
R5       EQU   @05
R6       EQU   @06
R7       EQU   @07
R8       EQU   @08
R9       EQU   @09
$RCAAREA EQU   0
$POINTER EQU   $RCAAREA+100
$TRTBLA  EQU   $POINTER+124
$CONSTNT EQU   $RCAAREA+244
$RCAFLG  EQU   $RCAAREA+604
TOLTEPWA EQU   0
$SCTTBLE EQU   TOLTEPWA
$TESTOPT EQU   $SCTTBLE+2
$ERROPT  EQU   $SCTTBLE+3
$PDEVFLG EQU   $SCTTBLE+10
$CDSFLGS EQU   $SCTTBLE+11
$CDS8T19 EQU   $SCTTBLE+20
$EXECFLG EQU   $SCTTBLE+33
$OLTFLGS EQU   $SCTTBLE+36
$OLTFLG2 EQU   $SCTTBLE+37
$TOTFLG1 EQU   $SCTTBLE+38
$ROUTMSK EQU   $SCTTBLE+40
$CDA     EQU   TOLTEPWA+100
$RCA     EQU   $CDA+44
$OLTPTR  EQU   $CDA+52
$LOWADDR EQU   $OLTPTR
$HIMOREC EQU   $CDA+60
$COMMFLG EQU   TOLTEPWA+224
$FLAG1   EQU   $COMMFLG
$FLAG2   EQU   $COMMFLG+1
$FLAG3   EQU   $COMMFLG+2
$FLAG4   EQU   $COMMFLG+3
$FLAG5   EQU   $COMMFLG+4
$EOJ     EQU   $FLAG5
$CANCEL  EQU   $EOJ
$FLAG6   EQU   $COMMFLG+5
$CHANGE  EQU   $FLAG6
$ABNDBIT EQU   $FLAG6
$FLAG7   EQU   $COMMFLG+6
$FLAG8   EQU   $COMMFLG+7
$TCECM   EQU   $FLAG8
$FLAG9   EQU   $COMMFLG+8
$REMSW   EQU   $FLAG9
$COPY    EQU   $FLAG9
$FLAG10  EQU   $COMMFLG+9
$FLAG11  EQU   $COMMFLG+10
$FLAG12  EQU   $COMMFLG+11
$FLAG13  EQU   $COMMFLG+12
$DEVTBLE EQU   TOLTEPWA+240
$DEVCDS  EQU   $DEVTBLE
$DEVUNAD EQU   $DEVCDS
@NM00039 EQU   $DEVUNAD+2
$DEVFEAT EQU   $DEVCDS+4
$DEVCDSF EQU   $DEVCDS+9
$DEVSDCF EQU   $DEVCDS+10
$$SYMNME EQU   $DEVCDS+12
$DEVFLG1 EQU   $DEVTBLE+20
$EVNCPLT EQU   $DEVFLG1
$ATTNEXP EQU   $DEVFLG1
$INTOCC  EQU   $DEVFLG1
$DEVFLG2 EQU   $DEVTBLE+21
$DEVTECB EQU   $DEVTBLE+22
$OPIS    EQU   $DEVTECB
$OPND    EQU   $DEVTECB+2
$DEVFLG3 EQU   $DEVTBLE+27
$SIOFLG  EQU   $DEVFLG3
$IFTOUT  EQU   $DEVTBLE+36
$DEVSESP EQU   $IFTOUT
$SSCPDAF EQU   $IFTOUT+6
$LDNCBPT EQU   $DEVTBLE+48
$RNINFO  EQU   $DEVTBLE+56
$DEVFLG5 EQU   $RNINFO+8
$DEVFLG4 EQU   $DEVTBLE+65
$SLTBL   EQU   TOLTEPWA+1468
$RUNTEST EQU   $SLTBL+13
$TESTFLG EQU   $SLTBL+21
$SECLST  EQU   $SLTBL+22
$INBUFR  EQU   TOLTEPWA+2104
#EXITA   EQU   TOLTEPWA+2632
$CCOMDAT EQU   TOLTEPWA+2644
$CFLGS   EQU   $CCOMDAT+16
$24FEMSG EQU   TOLTEPWA+2681
$24CATMG EQU   $24FEMSG+11
@NM00048 EQU   TOLTEPWA+2776
$OUNTPTR EQU   @NM00048+4
$NSPTR   EQU   $OUNTPTR
$NSCNT   EQU   @NM00048+10
$ENXX    EQU   @NM00048+15
$IMITX   EQU   $ENXX
SVECC013 EQU   TOLTEPWA+3232
SVEIC003 EQU   TOLTEPWA+3592
SVESC022 EQU   TOLTEPWA+3736
SVECC011 EQU   TOLTEPWA+4024
CECOMMAP EQU   0
CDSMAP   EQU   0
CDSUA    EQU   CDSMAP
CDSMFCT  EQU   CDSMAP+4
CDSMODEL EQU   CDSMFCT
CDSFEAT  EQU   CDSMFCT+1
CDSCLASS EQU   CDSMFCT+2
CDSTYPE  EQU   CDSMFCT+3
CDSBYTCT EQU   CDSMAP+8
CDSFLAG  EQU   CDSMAP+9
CDSSYMBN EQU   CDSMAP+12
CDSEXARA EQU   CDSMAP+20
FRADR    EQU   0
TOADR    EQU   0
INPUT    EQU   0
@NM00054 EQU   0
I00ACSW  EQU   @NM00054
CONTSCAN EQU   I00ACSW
CLASSSW  EQU   I00ACSW
TYPESW   EQU   I00ACSW
FLAGSW   EQU   I00ACSW
UASW     EQU   I00ACSW
EBCDICSW EQU   I00ACSW
DBSW     EQU   I00ACSW
DATASW   EQU   I00ACSW
@NM00055 EQU   @NM00054+1
ERROR    EQU   @NM00055
$TRTBL   EQU   0
#EXIT    EQU   0
SVECC012 EQU   SVESC022
SVEIC00A EQU   SVEIC003
SVEIC004 EQU   SVEIC003
SVEIC005 EQU   SVEIC003
SVESC02A EQU   SVESC022
SVESC02B EQU   SVESC022
SVESC02D EQU   SVESC022
SVESC02E EQU   SVESC022
SVESC02F EQU   SVECC013
SVESC024 EQU   SVESC022
SVESC025 EQU   SVESC022
SVESC027 EQU   SVESC022
SVESC029 EQU   SVESC022
SVESC031 EQU   SVECC013
SVESC032 EQU   SVECC011
SVETC037 EQU   SVEIC003
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
@NM00056 EQU   @NM00055
CDSEXTM  EQU   CDSFLAG+2
CDSEXTB  EQU   CDSFLAG+2
CDSTMERB EQU   CDSFLAG+2
@NM00052 EQU   CDSFLAG+1
CDSDVPRO EQU   CDSFLAG+1
CDSNTPRI EQU   CDSFLAG+1
CDSLINCN EQU   CDSFLAG
CDSREMSY EQU   CDSFLAG
CDS2CHAN EQU   CDSFLAG
CDSSYMB  EQU   CDSFLAG
CDSEXTPR EQU   CDSFLAG
CDSFEVOL EQU   CDSFLAG
CDSSHAR  EQU   CDSFLAG
CDSFPMD  EQU   CDSFLAG
@NM00051 EQU   CDSFEAT
CDSDEVM  EQU   CDSFEAT
CDSDEVT  EQU   CDSFEAT
CDSASCII EQU   CDSFEAT
$CECFLAG EQU   CECOMMAP+20
$CEINCT  EQU   CECOMMAP+16
$CEINADR EQU   CECOMMAP+12
$CEOUTCT EQU   CECOMMAP+8
$CEOUTAD EQU   CECOMMAP+4
$CECIDNT EQU   CECOMMAP+2
$CECLEVL EQU   CECOMMAP+1
$CECTRMG EQU   CECOMMAP
SVECC010 EQU   TOLTEPWA+3952
SVETC035 EQU   TOLTEPWA+3880
SVESC030 EQU   TOLTEPWA+3808
SVESC020 EQU   TOLTEPWA+3664
SVEIC002 EQU   TOLTEPWA+3520
SVECC014 EQU   TOLTEPWA+3376
SVESC120 EQU   TOLTEPWA+3304
SVESC033 EQU   TOLTEPWA+3160
@NM00050 EQU   TOLTEPWA+2980
$RPLERR  EQU   TOLTEPWA+2977
@NM00049 EQU   TOLTEPWA+2976
$R13PR3  EQU   TOLTEPWA+2972
$CEINT2  EQU   TOLTEPWA+2968
$CEINT1  EQU   TOLTEPWA+2964
$MSGGET  EQU   TOLTEPWA+2960
$ACQLIST EQU   TOLTEPWA+2956
$R4SAVE1 EQU   TOLTEPWA+2952
$CLSISS  EQU   TOLTEPWA+2950
$CLSCNT  EQU   TOLTEPWA+2948
$CUTABLE EQU   TOLTEPWA+2868
$BUFSZ2  EQU   TOLTEPWA+2864
$RESID2  EQU   TOLTEPWA+2860
$OLTCCW2 EQU   TOLTEPWA+2856
$ENDBFR2 EQU   TOLTEPWA+2852
$1STBFR2 EQU   TOLTEPWA+2848
$TECB2   EQU   TOLTEPWA+2844
$BUFSZ1  EQU   TOLTEPWA+2840
$RESID1  EQU   TOLTEPWA+2836
$OLTCCW1 EQU   TOLTEPWA+2832
$ENDBFR1 EQU   TOLTEPWA+2828
$1STBFR1 EQU   TOLTEPWA+2824
$TECB1   EQU   TOLTEPWA+2820
$WAITIME EQU   TOLTEPWA+2816
$TRTN#   EQU   TOLTEPWA+2815
$WIODEV  EQU   TOLTEPWA+2814
$RQSTSZE EQU   TOLTEPWA+2812
$RQSTPTR EQU   TOLTEPWA+2808
$R4SAVE  EQU   TOLTEPWA+2804
$PARTADR EQU   TOLTEPWA+2800
$TBSDATA EQU   TOLTEPWA+2796
$CTWIDTH EQU   TOLTEPWA+2795
$CTLINE  EQU   TOLTEPWA+2794
$APWIDTH EQU   TOLTEPWA+2793
$APLINE  EQU   TOLTEPWA+2792
$INDEX   EQU   $IMITX
$UMXX    EQU   @NM00048+14
$NSXX    EQU   @NM00048+12
$ATACNT  EQU   $NSCNT
$CTR     EQU   @NM00048+8
$ATAPTR  EQU   $NSPTR
$DDRPTR  EQU   @NM00048
$DTORESP EQU   TOLTEPWA+2712
$APNAME  EQU   TOLTEPWA+2704
$24SYMNE EQU   $24CATMG+4
$24DEVAD EQU   $24CATMG
$24RTN#  EQU   $24FEMSG+8
$ESECTID EQU   $24FEMSG
$24FLGS  EQU   TOLTEPWA+2680
$24SAVE2 EQU   TOLTEPWA+2676
$24SAVE1 EQU   TOLTEPWA+2672
$24UNADR EQU   TOLTEPWA+2668
$24SAV13 EQU   TOLTEPWA+2664
$24RETCD EQU   TOLTEPWA+2663
$MACID   EQU   TOLTEPWA+2661
$CSPARE  EQU   $CFLGS
$C2WAY   EQU   $CFLGS
$CINCT   EQU   $CCOMDAT+12
$CINADR  EQU   $CCOMDAT+8
$COUTCT  EQU   $CCOMDAT+4
$COUTAD  EQU   $CCOMDAT
ROOTLOC  EQU   TOLTEPWA+2640
$RETREG  EQU   TOLTEPWA+2636
$WORK    EQU   TOLTEPWA+2376
$EXTA    EQU   TOLTEPWA+2320
$PASSONA EQU   TOLTEPWA+2264
$TRMINPT EQU   TOLTEPWA+2184
$BUFFER  EQU   TOLTEPWA+1976
$TLTRPL3 EQU   TOLTEPWA+1856
$TLTRPL2 EQU   TOLTEPWA+1736
$TLTRPL1 EQU   TOLTEPWA+1616
@NM00047 EQU   $SLTBL+135
$HIGHRTN EQU   $SLTBL+134
$PRIMADR EQU   $SLTBL+130
$CTSTPT  EQU   $SLTBL+128
$TSTCNT  EQU   $SLTBL+126
$SECFLGS EQU   $SECLST+3
$SECTION EQU   $SECLST
$SECACT  EQU   $TESTFLG
$CANTRUN EQU   $TESTFLG
$FINAL   EQU   $TESTFLG
$TESTSUF EQU   $RUNTEST+5
$TESTNUM EQU   $RUNTEST+1
$LETPRF  EQU   $RUNTEST
$SYMBOLC EQU   $SLTBL+5
$FAMILY  EQU   $SLTBL
$CDEVPT  EQU   TOLTEPWA+1466
$DEVCNTS EQU   TOLTEPWA+1464
$FEEDBCK EQU   $DEVTBLE+66
$WTISUED EQU   $DEVFLG4
$EXIOISD EQU   $DEVFLG4
$REMWRIT EQU   $DEVFLG4
$REMDONE EQU   $DEVFLG4
$2NDUSED EQU   $DEVFLG4
$1STUSED EQU   $DEVFLG4
$IGLXIFB EQU   $DEVFLG4
$EXIOLV3 EQU   $DEVFLG4
@NM00046 EQU   $DEVFLG5
$ASCII   EQU   $DEVFLG5
$DEVLU   EQU   $DEVFLG5
$OPNDFAL EQU   $DEVFLG5
$ACQNCB  EQU   $DEVFLG5
$REMOTE  EQU   $DEVFLG5
$ENDNODE EQU   $DEVFLG5
$LINENME EQU   $RNINFO
$CID     EQU   $DEVTBLE+52
$DVCOL   EQU   $LDNCBPT+2
$DVROW   EQU   $LDNCBPT
$NCSPLP  EQU   $DEVTBLE+44
$DVLN    EQU   $SSCPDAF
$DAF     EQU   $DEVSESP+4
$VARYPAB EQU   $DEVSESP
$SYSMN   EQU   $DEVTBLE+28
@NM00045 EQU   $DEVFLG3
$CLRSNT  EQU   $DEVFLG3
$OLTERR  EQU   $DEVFLG3
$SRTEST  EQU   $DEVFLG3
$DVSNDOK EQU   $SIOFLG
$POLLREQ EQU   $DEVFLG3
$ACQRED  EQU   $DEVFLG3
$NOTDEV  EQU   $DEVFLG3
$DVINCT  EQU   $DEVTBLE+26
$DVBRKST EQU   $OPND+1
$DVBRKSN EQU   $OPND
$DVSEQNO EQU   $OPIS
$CEINTRP EQU   $DEVFLG2
$TESTMDE EQU   $DEVFLG2
$DEVALOC EQU   $DEVFLG2
$ALLDATA EQU   $DEVFLG2
$ENDCNTL EQU   $DEVFLG2
$CTLDEV  EQU   $DEVFLG2
$NOCDS   EQU   $DEVFLG2
$DATAIN  EQU   $DEVFLG2
$PRIMARY EQU   $DEVFLG1
$DVCTBYT EQU   $INTOCC
$DEVACT  EQU   $DEVFLG1
$DVLGMDE EQU   $ATTNEXP
$DVSPRM  EQU   $EVNCPLT
$GRABBED EQU   $DEVFLG1
$CATASTR EQU   $DEVFLG1
$LETGO   EQU   $DEVFLG1
$CURELEM EQU   $$SYMNME+4
$MSGOTSD EQU   $$SYMNME
$EXTDEV  EQU   $DEVCDS+11
@NM00044 EQU   $DEVSDCF
$NOTPRIM EQU   $DEVSDCF
@NM00043 EQU   $DEVCDSF
@NM00042 EQU   $DEVCDSF
@NM00041 EQU   $DEVCDSF
$CDSNAME EQU   $DEVCDSF
$EXTRN   EQU   $DEVCDSF
$CEVOLUM EQU   $DEVCDSF
$SHARD   EQU   $DEVCDSF
$DEVFPM  EQU   $DEVCDSF
$DEVCNT  EQU   $DEVCDS+8
$DEVTYPE EQU   $DEVFEAT+3
$DEVCLAS EQU   $DEVFEAT+2
$DEVFRRS EQU   $DEVFEAT+1
$DEVMOD  EQU   $DEVFEAT
$DEVRDGT EQU   @NM00039+1
$DEVCTLU EQU   @NM00039+1
$DEVCHAN EQU   @NM00039
@NM00040 EQU   @NM00039
$CTINDX  EQU   $DEVUNAD
$FLAG16  EQU   $COMMFLG+15
$FLAG15  EQU   $COMMFLG+14
$FLAG14  EQU   $COMMFLG+13
$TEP2ND  EQU   $FLAG13
$TEP1ST  EQU   $FLAG13
$CATMSG  EQU   $FLAG13
$PRMPTSW EQU   $FLAG13
$DEVENT  EQU   $FLAG13
$OLTMACC EQU   $FLAG13
$LGON    EQU   $FLAG13
$CTLOGON EQU   $FLAG13
@NM00038 EQU   $FLAG12
$VARYINP EQU   $FLAG12
$ENDTEST EQU   $FLAG12
$VRYHRD  EQU   $FLAG12
$VRYSFT  EQU   $FLAG12
$POSTFLG EQU   $FLAG12
$OPTMSG  EQU   $FLAG12
$FEORCAT EQU   $FLAG11
@NM00037 EQU   $FLAG11
@NM00036 EQU   $FLAG10
$INBND   EQU   $FLAG10
$WAITFLG EQU   $FLAG10
$DPRINT  EQU   $FLAG10
$HOLD    EQU   $FLAG9
$NOTRRCH EQU   $FLAG9
@NM00035 EQU   $FLAG9
$LSTLNSW EQU   $FLAG9
$MULLNSW EQU   $FLAG9
$IGRES   EQU   $FLAG9
$VS2     EQU   $FLAG8
$VS1     EQU   $FLAG8
$EDOS    EQU   $FLAG8
@NM00034 EQU   $FLAG8
$TWOWAY  EQU   $FLAG8
@NM00033 EQU   $FLAG8
$RCVMSG  EQU   $FLAG7
$RCVRFLG EQU   $FLAG7
$SNDRFLG EQU   $FLAG7
$LDOIS   EQU   $FLAG7
$DCONTCT EQU   $FLAG7
$EXIOWAT EQU   $FLAG7
$2NDDATA EQU   $FLAG7
$1STDATA EQU   $FLAG7
$CIREQ   EQU   $FLAG6
$ABTERM  EQU   $ABNDBIT
$FSTMCIS EQU   $FLAG6
$DISCREQ EQU   $FLAG6
$DISCISS EQU   $FLAG6
$CTERROR EQU   $FLAG6
$RECAL11 EQU   $FLAG6
@NM00032 EQU   $FLAG5
$PROGCK  EQU   $CANCEL
$PRINTAP EQU   $FLAG5
@NM00031 EQU   $FLAG5
$MSG922  EQU   $FLAG5
$CT924   EQU   $FLAG5
$FSTCAT  EQU   $FLAG5
$FSTFE   EQU   $FLAG5
$ACTOPND EQU   $FLAG4
$ACQCUTT EQU   $FLAG4
$CLSSACT EQU   $FLAG4
$BACKINT EQU   $FLAG4
$DMSGSW  EQU   $FLAG4
$TSTDEVP EQU   $FLAG4
$APRQPER EQU   $FLAG4
$OPCOM   EQU   $FLAG4
$NEWAP   EQU   $FLAG3
$ALTPRTR EQU   $FLAG3
$OPTERR  EQU   $FLAG3
$PRTONLY EQU   $FLAG3
$REQSTOR EQU   $FLAG3
$LOGOFFE EQU   $FLAG3
$TSTERR  EQU   $FLAG3
$DEVERR  EQU   $FLAG3
$PARTIAL EQU   $FLAG2
$NRMTERM EQU   $FLAG2
$VALDTST EQU   $FLAG2
$VALDDEV EQU   $FLAG2
$DBLSLSH EQU   $FLAG2
$NDR     EQU   $FLAG2
@NM00030 EQU   $FLAG2
$OLTACT  EQU   $FLAG1
$NORELDV EQU   $FLAG1
@NM00029 EQU   $FLAG1
$OPTCHNG EQU   $FLAG1
$DEVCHNG EQU   $FLAG1
$TESTCNG EQU   $FLAG1
$CNSLFG  EQU   $FLAG1
$TEP3RD  EQU   $FLAG1
@NM00028 EQU   $CDA+120
$CUCNT   EQU   $CDA+118
@NM00027 EQU   $CDA+117
$PRTFORM EQU   $CDA+116
$OPISCNT EQU   $CDA+114
$OPNDCNT EQU   $CDA+112
$GETMSZE EQU   $CDA+110
$GRCNTS  EQU   $CDA+108
$CTLCNT  EQU   $CDA+106
$ACTLVL  EQU   $CDA+105
$PRNTLVL EQU   $CDA+104
$ERRCNTA EQU   $CDA+102
$TLCNT   EQU   $CDA+100
$TIMEALW EQU   $CDA+96
$PTRAREA EQU   $CDA+92
$GETMPTR EQU   $CDA+88
$R13PTRT EQU   $CDA+84
$R13PTR  EQU   $CDA+80
$TEPEND  EQU   $CDA+76
$PLINKDL EQU   $CDA+72
$TEPBEGN EQU   $CDA+68
$FRELPTR EQU   $CDA+64
$HIGHADR EQU   $HIMOREC
$LOMOREC EQU   $CDA+56
$ENDCOMM EQU   $CDA+48
$COMMON  EQU   $RCA
$SLASHAD EQU   $CDA+32
$PASSON  EQU   $CDA+28
$TOLBRTB EQU   $CDA+24
$SCTPTR8 EQU   $CDA+20
$SCTPTR  EQU   $CDA+16
$TBWDPTR EQU   $CDA+12
$TFWDPTR EQU   $CDA+8
@NM00026 EQU   $CDA
@NM00025 EQU   $SCTTBLE+98
$SCTLWTC EQU   $SCTTBLE+96
$SCTLWTA EQU   $SCTTBLE+92
#EXT     EQU   $SCTTBLE+88
#PASS    EQU   $SCTTBLE+84
#TABLE   EQU   $SCTTBLE+80
#MSGIDAC EQU   $SCTTBLE+78
@NM00024 EQU   $SCTTBLE+71
$RETMASK EQU   $SCTTBLE+70
$R249255 EQU   $ROUTMSK+29
$R241248 EQU   $ROUTMSK+28
$R233240 EQU   $ROUTMSK+27
$R225232 EQU   $ROUTMSK+26
$R217224 EQU   $ROUTMSK+25
$R209216 EQU   $ROUTMSK+24
$R201208 EQU   $ROUTMSK+23
$R193200 EQU   $ROUTMSK+22
$R185192 EQU   $ROUTMSK+21
$R177184 EQU   $ROUTMSK+20
$R169176 EQU   $ROUTMSK+19
$R161168 EQU   $ROUTMSK+18
$R153160 EQU   $ROUTMSK+17
$R145152 EQU   $ROUTMSK+16
$R137144 EQU   $ROUTMSK+15
$R129136 EQU   $ROUTMSK+14
$R121128 EQU   $ROUTMSK+13
$R113120 EQU   $ROUTMSK+12
$R105112 EQU   $ROUTMSK+11
$R097104 EQU   $ROUTMSK+10
$R089096 EQU   $ROUTMSK+9
$R081088 EQU   $ROUTMSK+8
$R073080 EQU   $ROUTMSK+7
$R065072 EQU   $ROUTMSK+6
$R057064 EQU   $ROUTMSK+5
$R049056 EQU   $ROUTMSK+4
$R041048 EQU   $ROUTMSK+3
$R033040 EQU   $ROUTMSK+2
$R025032 EQU   $ROUTMSK+1
$R017024 EQU   $ROUTMSK
$TOTFLG2 EQU   $SCTTBLE+39
@NM00023 EQU   $TOTFLG1
@NM00022 EQU   $TOTFLG1
@NM00021 EQU   $TOTFLG1
$CURELOD EQU   $TOTFLG1
$CTEQTT  EQU   $TOTFLG1
@NM00020 EQU   $TOTFLG1
@NM00019 EQU   $TOTFLG1
$LINESHR EQU   $TOTFLG1
@NM00018 EQU   $OLTFLG2
@NM00017 EQU   $OLTFLG2
@NM00016 EQU   $OLTFLG2
@NM00015 EQU   $OLTFLG2
@NM00014 EQU   $OLTFLG2
@NM00013 EQU   $OLTFLG2
@NM00012 EQU   $OLTFLG2
$TALK    EQU   $OLTFLG2
$DYCOM   EQU   $OLTFLGS
@NM00011 EQU   $OLTFLGS
$TRACE   EQU   $OLTFLGS
$RETCODE EQU   $OLTFLGS
$CONTCB  EQU   $OLTFLGS
$RETAIN  EQU   $OLTFLGS
$CLEANRT EQU   $OLTFLGS
$MANINTV EQU   $OLTFLGS
$OLTSIZE EQU   $SCTTBLE+34
$QSCTMOD EQU   $EXECFLG
$CTRLMOD EQU   $EXECFLG
$CLEANUP EQU   $EXECFLG
$LSTPDEV EQU   $EXECFLG
$ERRCNT  EQU   $EXECFLG
$RTNSLCT EQU   $EXECFLG
$MULTDEV EQU   $EXECFLG
@NM00010 EQU   $EXECFLG
$RMSKCNT EQU   $SCTTBLE+32
$SYNAME  EQU   $CDS8T19+4
$EXTSIG  EQU   $CDS8T19+3
$CDFLGS  EQU   $CDS8T19+1
$CDSCNT  EQU   $CDS8T19
$PDEVDSC EQU   $SCTTBLE+16
$PDEVADR EQU   $SCTTBLE+12
$COMMCN  EQU   $CDSFLGS
$CUSTSYM EQU   $CDSFLGS
$TWOCHSW EQU   $CDSFLGS
$SYMNAME EQU   $CDSFLGS
$EXTINTC EQU   $CDSFLGS
$CEVOL   EQU   $CDSFLGS
$SHARED  EQU   $CDSFLGS
$FPM     EQU   $CDSFLGS
$LASTSUB EQU   $PDEVFLG
@NM00009 EQU   $PDEVFLG
@NM00008 EQU   $PDEVFLG
@NM00007 EQU   $PDEVFLG
$LASTDEV EQU   $PDEVFLG
@NM00006 EQU   $PDEVFLG
$EXFILPT EQU   $PDEVFLG
$FPMOLD  EQU   $PDEVFLG
$TSSSYM  EQU   $SCTTBLE+8
$SCTLEVL EQU   $SCTTBLE+7
$DRIVER  EQU   $SCTTBLE+6
$RT0916  EQU   $SCTTBLE+5
$RT0108  EQU   $SCTTBLE+4
$LOOPTST EQU   $ERROPT
$LOOPERR EQU   $ERROPT
$NERRPRT EQU   $ERROPT
$NOCNTRL EQU   $ERROPT
$ALTPRNT EQU   $ERROPT
$CATERR  EQU   $ERROPT
$ASTERIK EQU   $ERROPT
$TESTERR EQU   $ERROPT
$FSTCOMM EQU   $TESTOPT
$INDEFLP EQU   $TESTOPT
$NOPRT   EQU   $TESTOPT
$PARAPRT EQU   $TESTOPT
@NM00005 EQU   $TESTOPT
$ERRLPCT EQU   $SCTTBLE
$TLTEND  EQU   $RCAAREA+936
$EXITSAV EQU   $RCAAREA+864
$TRASCII EQU   $RCAAREA+608
@NM00004 EQU   $RCAAREA+605
$VTAMEND EQU   $RCAFLG
$TPPOSTD EQU   $RCAFLG
$NEWCT   EQU   $RCAFLG
$ABNDALL EQU   $RCAFLG
$CUTESTB EQU   $RCAFLG
$CONSOLE EQU   $RCAFLG
$TPLOGON EQU   $RCAFLG
$UPDATE  EQU   $RCAFLG
$DEVAREA EQU   $RCAAREA+600
$CTDVAR  EQU   $RCAAREA+596
$BUFFS   EQU   $RCAAREA+464
$TLTNIB  EQU   $CONSTNT+140
$TLTPRPL EQU   $CONSTNT+20
@NM00003 EQU   $CONSTNT+4
@NM00002 EQU   $CONSTNT+2
$USECNT  EQU   $CONSTNT
$CURRTWA EQU   $POINTER+140
$CTNAME  EQU   $POINTER+132
$CTARGX  EQU   $POINTER+128
$COMINT  EQU   $POINTER+120
$QUEHNDL EQU   $POINTER+116
@NM00001 EQU   $POINTER+36
$RTNPTR  EQU   $POINTER+32
$TLTECB2 EQU   $POINTER+28
$TLTECB1 EQU   $POINTER+24
$CLEANP  EQU   $POINTER+20
$ABEND   EQU   $POINTER+16
$LSTAREA EQU   $POINTER+12
$FSTAREA EQU   $POINTER+8
$CVTSAVE EQU   $POINTER+4
$TOLTEP  EQU   $POINTER
$TLTACB  EQU   $RCAAREA
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RT00099 EQU   I00AC01C
@RT00105 EQU   I00AC03
@RT00129 EQU   I00AC09A
@RT00138 EQU   I00AC08A
@RT00153 EQU   I00AC04
@RT00156 EQU   I00AC03B
@RT00159 EQU   I00AC03B
@RT00162 EQU   I00AC02
@RT00171 EQU   I00AC05
@RT00174 EQU   I00AC04A
@RT00177 EQU   I00AC04A
@RT00180 EQU   I00AC02
@RT00189 EQU   I00AC06
@RT00192 EQU   I00AC05A
@RT00195 EQU   I00AC05A
@RT00199 EQU   I00AC02
@RT00208 EQU   I00AC07
@RT00211 EQU   I00AC06A
@RT00214 EQU   I00AC06A
@RT00218 EQU   I00AC02
@RT00227 EQU   I00AC08
@RT00230 EQU   I00AC07A
@RT00233 EQU   I00AC07A
@RT00237 EQU   I00AC02
@RT00246 EQU   I00AC09
@RT00248 EQU   I00AC08B
@RT00251 EQU   I00AC081
@RT00253 EQU   I00AC08B
@RT00259 EQU   I00AC08B
@RT00269 EQU   I00AC08B
@RT00274 EQU   I00AC02
@RT00282 EQU   I00AC01C
@RT00285 EQU   I00AC0A
@RT00287 EQU   I00AC09B
@RT00290 EQU   I00AC09B
@RT00298 EQU   I00AC09B
@RT00302 EQU   I00AC02
@RT00310 EQU   I00AC01C
@RT00313 EQU   I00AC0B
@RT00316 EQU   I00AC0AA
@RT00318 EQU   I00AC0AC
@RT00323 EQU   I00AC0AC
@RT00331 EQU   I00AC0AC
@RC00333 EQU   @RC00328
@RT00339 EQU   I00AC0AC
@RT00343 EQU   I00AC0AC
@RT00346 EQU   I00AC0AC
@RT00356 EQU   I00AC02
@RT00365 EQU   I00ACRET
@RC00372 EQU   @EL00001
@RF00387 EQU   @EL00001
@RT00398 EQU   I00ACL02
@RT00436 EQU   I00ACL01
@RC00375 EQU   @RC00372
@RF00380 EQU   @RC00372
@ENDDATA EQU   *
         END   ISTIC00A,(C'PLS1744',0701,75190)
