         TITLE 'READ WRITE EXIT - ISTCC016                             *
                        '
ISTCC016 CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'ISTCC016  76.244'                                 0001
         DROP  @15
@PROLOG  DS    0H                                                  0002
*                                    /* SET UP BASE AND SCR @ZD10878*/
         LR    R12,R15             GET THE ENTRY ADDRESS
         USING ISTCC016,R12
         LA    R9,C16CBUF1   POINT TO EXIT WORK AREA           @ZD10878
         USING @DATD,R9      SET UP ADDRESSABILITY FOR SCRTCH  @ZD10878
*   RPLPTR=R1;                      /* SAVE POINTER TO RPL           */
         LR    RPLPTR,R1                                           0152
*   WAPTR=RPLUSFLD;                                                0153
         L     WAPTR,RPLUSFLD(,RPLPTR)                             0153
*   R13=ADDR($EXITSAV);             /* SET UP PTR TO MY SAVEAREA     */
         L     R13,RCAPTR(,WAPTR)                                  0154
         LA    R13,$EXITSAV(,R13)                                  0154
*   C16EXSAV=R14;                   /* SAVE R14 FOR RET TO VTAM      */
*                                                                  0155
         ST    R14,C16EXSAV                                        0155
*   /*****************************************************************/
*   /*                                                               */
*   /* CHECK THE RPL SO IT IS NOT ACTIVE                             */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0156
*   GEN(CHECK RPL=(RPLPTR));        /* CLEAR UP RPL BEFORE PROCESSING*/
         CHECK RPL=(RPLPTR)
*   INDX=AP;                        /* FEEDBACK FOR AP               */
         LA    INDX,2                                              0157
*   IF RPLPTR=ADDR($TLTRPL1) THEN   /* SET UP INDEX INTO TABLE     0158
*                                                            @D32JPGH*/
         LA    @00,$TLTRPL1(,WAPTR)                                0158
         CR    RPLPTR,@00                                          0158
         BNE   @RF00158                                            0158
*     INDX=CT;                      /* FEEDBACK FOR CT               */
*                                                                  0159
         LA    INDX,1                                              0159
*   /*****************************************************************/
*   /*                                                               */
*   /* CHK FOR TEMP ERRORS RETRY IF POSSIBLE                         */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0160
*   IF(RPLRTNCD='08'X&RPLFDB2='00'X)×(RPLRTNCD='0C'X&(RPLFDB2='03'X×
*       RPLFDB2='05'X)) THEN                                       0160
@RF00158 CLI   RPLRTNCD(RPLPTR),8                                  0160
         BNE   @GL00001                                            0160
         CLI   RPLFDB2(RPLPTR),0                                   0160
         BE    @RT00160                                            0160
@GL00001 CLI   RPLRTNCD(RPLPTR),12                                 0160
         BNE   @RF00160                                            0160
         CLI   RPLFDB2(RPLPTR),3                                   0160
         BE    @RT00160                                            0160
         CLI   RPLFDB2(RPLPTR),5                                   0160
         BE    @RT00160                                            0160
*     GOTO C16C0225;                                               0161
*   IF RPLRTNCD^='00'X              /* IF THERE WAS AN ERROR         */
*     THEN                                                         0162
@RF00160 CLI   RPLRTNCD(RPLPTR),0                                  0162
         BE    @RF00162                                            0162
*     DO;                                                          0163
*       IF RPLRTNCD='0C'X&(RPLFDB2>='0A'X&RPLFDB2<='0C'X)/* CHECK TO
*                                      SEE IF WE SHOULD STOP @D32JPGH*/
*         THEN                                                     0164
         CLI   RPLRTNCD(RPLPTR),12                                 0164
         BNE   @RF00164                                            0164
         CLI   RPLFDB2(RPLPTR),10                                  0164
         BL    @RF00164                                            0164
         CLI   RPLFDB2(RPLPTR),12                                  0164
         BH    @RF00164                                            0164
*         DO;                       /* NOT ERROR, BUT GET OUT NOW    */
*           CALL C16C0910;          /* FREE CURRENT ELEMENT          */
         BAL   @14,C16C0910                                        0166
*           GOTO C16C0251;          /* EXIT FROM THIS MODULE         */
         B     C16C0251                                            0167
*         END;                      /* END OF NOT ERROR,BUT STOP CODE*/
*       IF RPLRTNCD<=4&$DEVLU(INDX)=ON THEN/* IF LU STATUS PASSED  0169
*                                      BACK                  @DM00895*/
@RF00164 CLI   RPLRTNCD(RPLPTR),4                                  0169
         BH    @RF00169                                            0169
         LR    @11,INDX                                            0169
         MH    @11,@CH00335                                        0169
         ALR   @11,WAPTR                                           0169
         TM    $DEVLU-68(@11),B'00001000'                          0169
         BO    @RT00169                                            0169
*         GO TO C16C0253;           /* PROCESS THE FEEDBACK          */
*       IF RPLRTNCD='0C'X&          /* WAS IT AN RFT RECEIVED        */
*           RPLFDB2='02'X&INDX=CT   /* FROM THE CT                   */
*         THEN                                                     0171
@RF00169 CLI   RPLRTNCD(RPLPTR),12                                 0171
         BNE   @RF00171                                            0171
         CLI   RPLFDB2(RPLPTR),2                                   0171
         BNE   @RF00171                                            0171
         C     INDX,@CF00072                                       0171
         BNE   @RF00171                                            0171
*         DO;                       /* IF YES DO THE FOLLOWING       */
*           $RETREG=0;                                             0173
         SLR   @11,@11                                             0173
         ST    @11,$RETREG(,WAPTR)                                 0173
*           IF RPLAARLN=0 THEN                                     0174
         C     @11,RPLAARLN(,RPLPTR)                               0174
         BE    @RT00174                                            0174
*             GOTO C16C0100;                                       0175
*           ELSE                                                   0176
*             GOTO C16C0225;        /* GO & RETRY ORIG REQ           */
         B     C16C0225                                            0176
*         END;                                                     0177
*       IF RPLRTNCD='04'X&          /* WAS AN ATTENTION RECEIVED     */
*           RPLFDB2='01'X&INDX=CT   /* FROM CT                       */
*         THEN                      /* THEN DO THE FOLLOWING         */
@RF00171 CLI   RPLRTNCD(RPLPTR),4                                  0178
         BNE   @RF00178                                            0178
         CLI   RPLFDB2(RPLPTR),1                                   0178
         BNE   @RF00178                                            0178
         C     INDX,@CF00072                                       0178
         BNE   @RF00178                                            0178
*         DO;                                                      0179
*           $CIREQ=ON;              /* SET C. I. REQ ON              */
         OI    $CIREQ(WAPTR),B'00000001'                           0180
*           $RETREG=0;              /* SET ZERO RETURN CODE          */
         SLR   @00,@00                                             0181
         ST    @00,$RETREG(,WAPTR)                                 0181
*           GOTO C16C0100;                                         0182
         B     C16C0100                                            0182
*         END;                                                     0183
*       $RETREG=8;                  /* SET ERROR RC = 8              */
@RF00178 MVC   $RETREG(4,WAPTR),@CF00054                           0184
*C16C0075:                                                         0185
*       CALL C16C0920;              /* SET ERROR STATUS              */
C16C0075 BAL   @14,C16C0920                                        0185
*       GO TO C16C0251;             /* EXIT FROM THE MODULE          */
         B     C16C0251                                            0186
*     END;                                                         0187
*   ELSE                                                           0188
*     $RETREG=0;                    /* SET GOOD RC OF 00             */
@RF00162 SLR   @00,@00                                             0188
         ST    @00,$RETREG(,WAPTR)                                 0188
*C16C0100:                                                         0189
*   ;                                                              0189
C16C0100 DS    0H                                                  0190
*   IF $DEVLU(INDX)=ON              /* IF DEVICE IS AN LU            */
*     THEN                                                         0190
         LR    @11,INDX                                            0190
         MH    @11,@CH00335                                        0190
         ST    @11,@TF00001                                        0190
         ALR   @11,WAPTR                                           0190
         TM    $DEVLU-68(@11),B'00001000'                          0190
         BO    @RT00190                                            0190
*     GOTO C16C0253;                /* THIS CODE HANDLES LU        0191
*                                      INFORMATION                   */
*   IF INCT^=0                      /* ONE WAY MSG?                  */
*     THEN                                                         0192
         L     @11,@TF00001                                        0192
         L     @11,$CURELEM-68(@11,WAPTR)                          0192
         CLI   INCT(@11),0                                         0192
         BE    @RF00192                                            0192
*     DO;                                                          0193
*       IF RPLREQ='11'X×(RPLREQ='1D'X&RPLREOT=OFF)/* IF WRITE OR READ
*                                      FOR EOT                       */
*         THEN                                                     0194
         CLI   RPLREQ(RPLPTR),17                                   0194
         BE    @RT00194                                            0194
         CLI   RPLREQ(RPLPTR),29                                   0194
         BNE   @RF00194                                            0194
         TM    RPLREOT(RPLPTR),B'00001000'                         0194
         BNZ   @RF00194                                            0194
@RT00194 DS    0H                                                  0195
*         DO;                       /* READING DATA FROM CT          */
*           IF $DVINCT(1)^=0 THEN                                  0196
         CLI   $DVINCT(WAPTR),0                                    0196
         BE    @RF00196                                            0196
*             DO;                                                  0197
*               RPLBUFL=$DVINCT(1); /* SET READ COUNT                */
         SLR   @00,@00                                             0198
         IC    @00,$DVINCT(,WAPTR)                                 0198
         ST    @00,RPLBUFL(,RPLPTR)                                0198
*               RPLAREA=ADDR($TRMINPT);/* POINT TO BUFFER            */
         LA    @00,$TRMINPT(,WAPTR)                                0199
         ST    @00,RPLAREA(,RPLPTR)                                0199
*             END;                                                 0200
*           ELSE                                                   0201
*             DO;                                                  0201
         B     @RC00196                                            0201
@RF00196 DS    0H                                                  0202
*               RPLBUFL=LENGTH(SCRATCH);                           0202
         MVC   RPLBUFL(4,RPLPTR),@CF00072                          0202
*               RPLAREA=ADDR(SCRATCH);                             0203
         LA    @00,SCRATCH                                         0203
         ST    @00,RPLAREA(,RPLPTR)                                0203
*             END;                                                 0204
*           GEN REFS(RPLPTR,ARG,ISTCC016);                         0205
@RC00196 DS    0H                                                  0205
*                                 /* READ DATA */
 READ RPL=(RPLPTR),EXIT=ISTCC016,OPTCD=(ASY,TRUNC)
*           IF R15^=0 THEN          /* IF ERROR, GET OUT FAST        */
         LTR   R15,R15                                             0206
         BNZ   @RT00206                                            0206
*             GO TO C16C0075;       /* EXIT THE MODULE               */
*           $DVINCT(1)=0;           /* READ NO MORE DATA             */
         MVI   $DVINCT(WAPTR),X'00'                                0208
*           GOTO C16C0251;          /* EXIT                          */
         B     C16C0251                                            0209
*         END;                      /* END OF READ FOR DATA          */
*       CALL C16C0900;              /* PUT DATA IN CALLERS BUFFER    */
@RF00194 BAL   @14,C16C0900                                        0211
*     END;                          /* END OF GETTING DATA FOR     0212
*                                      TERMINAL                      */
*C16C0200:                                                         0213
*   IF INDX=CT&                     /* CHECK FOR LOGOFF RECEIVED     */
*       RPLFDB3='04'X               /* IF YES                        */
*     THEN                                                         0213
@RF00192 DS    0H                                                  0213
C16C0200 C     INDX,@CF00072                                       0213
         BNE   @RF00213                                            0213
         CLI   RPLFDB3(RPLPTR),4                                   0213
         BNE   @RF00213                                            0213
*     $EOJ=ON;                      /* SET EOJ FLAG TO FORCE CANCEL  */
         OI    $EOJ(WAPTR),B'00000010'                             0214
*C16C0250:                                                         0215
*   RPLSAVE=$CURELEM(INDX);         /* SAVE PTR TO CURRENT ELEM      */
@RF00213 DS    0H                                                  0215
C16C0250 LR    @11,INDX                                            0215
         MH    @11,@CH00335                                        0215
         L     @00,$CURELEM-68(@11,WAPTR)                          0215
         ST    @00,RPLSAVE                                         0215
*   RESPECIFY                                                      0216
*     PTR1 RESTRICTED;              /* DONT LET THIS REG GET ALTERED */
*   PTR1=INDX;                      /* POINT TO PARTICULAR ENTRY     */
         LR    PTR1,INDX                                           0217
*   CALL C16C0265;                  /* START THE NEXT RPL            */
         BAL   @14,C16C0265                                        0218
*   RESPECIFY                                                      0219
*     PTR1 UNRESTRICTED;            /* RELEASE THIS REGISTER FOR USE */
*   RPLPTR=RPLSAVE;                 /* RESTORE ELEM PTR              */
         L     RPLPTR,RPLSAVE                                      0220
*   IF RPLPTR^=0 THEN               /* ONLY RELEASE IF THERE IS    0221
*                                      SOMETHING TO RELEASE          */
         LTR   RPLPTR,RPLPTR                                       0221
         BZ    @RF00221                                            0221
*     CALL C16C0270;                /* FREE LAST RPL WE ARE DONE     */
         BAL   @14,C16C0270                                        0222
*C16C0251:                                                         0223
*   ;                                                              0223
@RF00221 DS    0H                                                  0223
C16C0251 DS    0H                                                  0224
*   R14=C16EXSAV;                   /* RESTORE RET REG               */
         L     R14,C16EXSAV                                        0224
*   RETURN;                         /* RETURN TO VTAM                */
@EL00001 DS    0H                                                  0225
@EF00001 DS    0H                                                  0225
@ER00001 BR    @14                                                 0225
*C16C0225:                                                         0226
*   GEN SETS(RPLPTR);                                              0226
C16C0225 DS    0H                                                  0226
         EXECRPL RPL=(RPLPTR)
*   IF R15^=0 THEN                  /* CHECK FOR AN ERROR            */
         LTR   R15,R15                                             0227
         BNZ   @RT00227                                            0227
*     GO TO C16C0075;               /* ERROR, GET OUT                */
*   GOTO C16C0251;                                                 0229
         B     C16C0251                                            0229
*                                                                  0230
*   /*****************************************************************/
*   /*                                                               */
*   /* CODE TO HANDLE RECORD MODE                                    */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0230
*C16C0253:                                                         0230
*   R6=0;                           /* SET FLAG FOR STARTING QUEUE 0230
*                                      AFTER RESPONSE OR NOT         */
C16C0253 SLR   R6,R6                                               0230
*   IF RPLRRESP=OFF                 /* IF IT IS A RESPONSE           */
*     THEN                                                         0231
         LA    @11,16                                              0231
         ALR   @11,RPLPTR                                          0231
         TM    RPLRRESP(@11),B'00001000'                           0231
         BNZ   @RF00231                                            0231
*     DO;                                                          0232
*                                                                  0232
*       /*************************************************************/
*       /*                                                           */
*       /* NOT A RESPONSE,EITHER NORMAL OR EXPIDITED FLOW            */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0233
*       IF RPLNFSYN=OFF             /* IF IT IS NOT SYNCHRONEOUS     */
*         THEN                                                     0233
         TM    RPLNFSYN(@11),B'00000100'                           0233
         BNZ   @RF00233                                            0233
*         DO;                                                      0234
*           IF RPLSEQNO^=$DVSEQNO(INDX)/* CHECK FOR SEQ ERRORS       */
*             THEN                                                 0235
         LR    @11,INDX                                            0235
         MH    @11,@CH00335                                        0235
         ALR   @11,WAPTR                                           0235
         CLC   RPLSEQNO+60(2,RPLPTR),$DVSEQNO-68(@11)              0235
         BE    @RF00235                                            0235
*             DO;                                                  0236
*               RPLSSNSO='0201'X;   /* SET ERROR STATUS              */
         MVC   RPLSSNSO(2,RPLPTR),@CB01698                         0237
*               GOTO C16C0300;      /* SEND RESPONSE                 */
         B     C16C0300                                            0238
*             END;                                                 0239
*           $DVSEQNO(INDX)=$DVSEQNO(INDX)+1;/* INCREMENT SEQ # BY 1  */
@RF00235 LR    @11,INDX                                            0240
         MH    @11,@CH00335                                        0240
         LA    @00,1                                               0240
         LH    @10,$DVSEQNO-68(@11,WAPTR)                          0240
         N     @10,@CF01772                                        0240
         ALR   @00,@10                                             0240
         STH   @00,$DVSEQNO-68(@11,WAPTR)                          0240
*         END;                                                     0241
*       IF BINBRAK=ON               /* IF BOUND WITH BRACKETS        */
*         THEN                                                     0242
@RF00233 LR    @11,INDX                                            0242
         MH    @11,@CH00335                                        0242
         LA    @10,$DEVSESP-68(@11,WAPTR)                          0242
         TM    BINBRAK-1(@10),B'00100000'                          0242
         BNO   @RF00242                                            0242
*         DO;                                                      0243
*           IF RPLBB=ON             /* IF BEGIN BRACKET ON           */
*             THEN                                                 0244
         TM    RPLBB+16(RPLPTR),B'10000000'                        0244
         BNO   @RF00244                                            0244
*             $DVBRKST(INDX)=INB;   /* GOING INTO BRACKET            */
         LA    @00,1                                               0245
         STC   @00,$DVBRKST-68(@11,WAPTR)                          0245
*           IF RPLEB=ON             /* IF END BRACKET ON             */
*             THEN                                                 0246
@RF00244 TM    RPLEB+16(RPLPTR),B'01000000'                        0246
         BNO   @RF00246                                            0246
*             $DVBRKST(INDX)=BETB;  /* GOING TO BETWEEN BRACKETS     */
         LR    @11,INDX                                            0247
         MH    @11,@CH00335                                        0247
         SLR   @00,@00                                             0247
         STC   @00,$DVBRKST-68(@11,WAPTR)                          0247
*         END;                                                     0248
@RF00246 DS    0H                                                  0249
*       N=MIN(RPLBUFL,RPLRLEN);     /* GET NUMBER OF BYTES GIVEN BY
*                                      VTAM                          */
@RF00242 L     @00,RPLBUFL(,RPLPTR)                                0249
         L     @11,RPLRLEN(,RPLPTR)                                0249
         CR    @00,@11                                             0249
         BNH   *+6
         LR    @00,@11                                             0249
         STH   @00,N                                               0249
*       IF $ASCII(INDX)=ON&RPLCSI=ON/* IF ASCII                      */
*         THEN                                                     0250
         LR    @11,INDX                                            0250
         MH    @11,@CH00335                                        0250
         ALR   @11,WAPTR                                           0250
         TM    $ASCII-68(@11),B'00000100'                          0250
         BNO   @RF00250                                            0250
         TM    RPLCSI+16(RPLPTR),B'00001000'                       0250
         BNO   @RF00250                                            0250
*         DO I=1 TO N;              /* TRANSLATE EACH CHARACTER TO 0251
*                                      ASCII                         */
         LA    @00,1                                               0251
         B     @DE00251                                            0251
@DL00251 DS    0H                                                  0252
*           DO M=1 TO LENGTH($TRASCII);/* SEARCH FOR ASCII MATCH     */
         LA    @00,1                                               0252
         STH   @00,M                                               0252
@DL00252 DS    0H                                                  0253
*             IF $TRMINPT(I)=$TRASCII(M)/* IF CHAR FOUND IN TABLE    */
*               THEN                                               0253
         LH    @11,I                                               0253
         L     @10,RCAPTR(,WAPTR)                                  0253
         ALR   @11,WAPTR                                           0253
         ALR   @10,@00                                             0253
         CLC   $TRMINPT-1(1,@11),$TRASCII-1(@10)                   0253
         BNE   @RF00253                                            0253
*               DO;                                                0254
*                 $TRMINPT(I)=M-1;  /* SET TO EBCDIC VALUE           */
         LH    @11,I                                               0255
         BCTR  @00,0                                               0255
         STC   @00,$TRMINPT-1(@11,WAPTR)                           0255
*                 GOTO C16C0254;                                   0256
         B     C16C0254                                            0256
*               END;                                               0257
*           END;                                                   0258
@RF00253 LA    @00,1                                               0258
         AH    @00,M                                               0258
         STH   @00,M                                               0258
         C     @00,@CF00083                                        0258
         BNH   @DL00252                                            0258
*           RPLSSNSO='1001'X;       /* SET ERROR STATUS              */
         MVC   RPLSSNSO(2,RPLPTR),@CB01702                         0259
*           GOTO C16C0300;          /* SEND RESPONSE                 */
         B     C16C0300                                            0260
*C16C0254:                                                         0261
*         END;                                                     0261
C16C0254 LA    @00,1                                               0261
         AH    @00,I                                               0261
@DE00251 STH   @00,I                                               0261
         CH    @00,N                                               0261
         BNH   @DL00251                                            0261
*       IF RPLDATA=OFF              /* IF NO DATA RECEIVED           */
*         THEN                                                     0262
@RF00250 LA    @11,16                                              0262
         ALR   @11,RPLPTR                                          0262
         TM    RPLDATA(@11),B'10000000'                            0262
         BNZ   @RF00262                                            0262
*         DO;                       /* THIS IS A CONTROL FUNCTION    */
*                                                                  0263
*           /*********************************************************/
*           /*                                                       */
*           /* PROCESSING A FUNCTION NOT DATA                        */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0264
*           IF RPLCNCEL=ON          /* WAS CANCEL REQUESTED          */
*             THEN                                                 0264
         TM    RPLCNCEL(@11),B'01000000'                           0264
         BNO   @RF00264                                            0264
*             DO;                                                  0265
*               $DVINCT(INDX)=LENGTH($TRMINPT);/* READ A NEW MESSAGE */
         LR    @11,INDX                                            0266
         MH    @11,@CH00335                                        0266
         LA    @00,80                                              0266
         STC   @00,$DVINCT-68(@11,WAPTR)                           0266
*               $TRMINPT=$TRMINPT&&$TRMINPT;/* SCRATCH OLD MSG       */
         XC    $TRMINPT(80,WAPTR),$TRMINPT(WAPTR)                  0267
*               GOTO C16C0300;                                     0268
         B     C16C0300                                            0268
*             END;                  /* SEND RESPONSE                 */
*           IF RPLSIGNL=ON          /* IS IT A SIGNAL                */
*             THEN                                                 0270
@RF00264 TM    RPLSIGNL+16(RPLPTR),B'00010000'                     0270
         BNO   @RF00270                                            0270
*             DO;                                                  0271
*               $CIREQ=ON;          /* COMMUNICATION INTERVAL      0272
*                                      REQUIRED                      */
         OI    $CIREQ(WAPTR),B'00000001'                           0272
*               GOTO C16C0300;      /* SEND RESPONSE                 */
         B     C16C0300                                            0273
*             END;                                                 0274
*           IF RPLCHASE=ON          /* IS IT A CHASE                 */
*             THEN                                                 0275
@RF00270 LA    @11,16                                              0275
         ALR   @11,RPLPTR                                          0275
         TM    RPLCHASE(@11),B'00001000'                           0275
         BO    @RT00275                                            0275
*             GOTO C16C0300;        /* SEND RESPONSE                 */
*           IF RPLLUS=ON            /* IS LU STATU BEING SENT        */
*             THEN                                                 0277
         TM    RPLLUS(@11),B'00100000'                             0277
         BNO   @RF00277                                            0277
*             IF RPLSSEI=0          /* IS ERROR STATUS ZERO          */
*               THEN                                               0278
         CLI   RPLSSEI(RPLPTR),0                                   0278
         BE    @RT00278                                            0278
*               GOTO C16C0300;      /* SEND RESPONSE                 */
*             ELSE                                                 0280
*               GOTO C16C0075;                                     0280
         B     C16C0075                                            0280
*           IF RPLSHUTD=ON×RPLSHUTC=ON×RPLRSHUT=ON/* IF ANY SHUTDOWN
*                                      REQUESTS ARE ON               */
*             THEN                                                 0281
@RF00277 LA    @11,16                                              0281
         ALR   @11,RPLPTR                                          0281
         TM    RPLSHUTD(@11),B'00011010'                           0281
         BNZ   @RT00281                                            0281
*             GOTO C16C0075;                                       0282
*           IF RPLRTR=ON            /* IS TERMINAL READY TO RECEIVE
*                                      DATA                          */
*             THEN                                                 0283
         TM    RPLRTR(@11),B'01000000'                             0283
         BNO   @RF00283                                            0283
*             RPLSSNSO='0819'X;     /* SET ERROR STATUS              */
         MVC   RPLSSNSO(2,RPLPTR),@CB01704                         0284
*           ELSE                                                   0285
*             RPLSSNSO='1007'X;     /* SET ERROR STATUS              */
         B     @RC00283                                            0285
@RF00283 MVC   RPLSSNSO(2,RPLPTR),@CB01705                         0285
*           GOTO C16C0300;          /* SEND RESPONSE                 */
         B     C16C0300                                            0286
*         END;                                                     0287
*       IF RPLFMHDR=ON              /* IS THERE AN FM HEADER @DM00898*/
*         THEN                      /*                       @DM00898*/
@RF00262 TM    RPLFMHDR(RPLPTR),B'00000001'                        0288
         BNO   @RF00288                                            0288
*         DO;                       /*                       @DM00898*/
*           RPLSSNSO='1008'X;       /* SET ERROR STATUS      @DM00898*/
         MVC   RPLSSNSO(2,RPLPTR),@CB01706                         0290
*           GOTO C16C0300;          /* SEND RESPONSE         @DM00898*/
         B     C16C0300                                            0291
*         END;                      /*                       @DM00898*/
*                                                                  0292
*       /*************************************************************/
*       /*                                                           */
*       /* DATA RECEIVED,CHECK IF WE MUST WAIT FOR MORE              */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0293
*       IF RPLONLY^=ON&RPLLAST^=ON  /* IS IT END OF CHAIN            */
*         THEN                                                     0293
@RF00288 TM    RPLONLY+16(RPLPTR),B'00110000'                      0293
         BNZ   @RF00293                                            0293
*         DO;                                                      0294
*           $DVINCT(INDX)=0;        /* DON'T READ ANYMORE DATA FROM
*                                      TERMINAL                      */
         LR    @11,INDX                                            0295
         MH    @11,@CH00335                                        0295
         SLR   @00,@00                                             0295
         STC   @00,$DVINCT-68(@11,WAPTR)                           0295
*           GOTO C16C0300;          /* SEND RESPONSE                 */
         B     C16C0300                                            0296
*         END;                                                     0297
*       IF $CURELEM(INDX)=0×INCT=0×$DVSNDOK(INDX)='0'B/* IF NO     0298
*                                      ELEMENTS                      */
*         THEN                                                     0298
@RF00293 LR    @11,INDX                                            0298
         MH    @11,@CH00335                                        0298
         L     @10,$CURELEM-68(@11,WAPTR)                          0298
         LTR   @10,@10                                             0298
         BZ    @RT00298                                            0298
         CLI   INCT(@10),0                                         0298
         BE    @RT00298                                            0298
         ALR   @11,WAPTR                                           0298
         TM    $DVSNDOK-68(@11),B'00010000'                        0298
         BNZ   @RF00298                                            0298
@RT00298 DS    0H                                                  0299
*         $CIREQ=ON;                /* COMMUNICATION INTERVAL      0299
*                                      REQUIRED                      */
         OI    $CIREQ(WAPTR),B'00000001'                           0299
*       ELSE                                                       0300
*         DO;                       /* DATA RECEIVED FROM CT, PASS IT
*                                      BACK                          */
         B     @RC00298                                            0300
@RF00298 DS    0H                                                  0301
*           CALL C16C0900;          /* PASS BACK RESPONSE TO CALLER  */
         BAL   @14,C16C0900                                        0301
*           R6=1;                   /* START NEXT ELEMENT ON QUEUE   */
         LA    R6,1                                                0302
*         END;                      /* END OF DATA RECEIVED FROM CT  */
*C16C0300:                                                         0304
*       IF(RPLNFME=OFF×RPLRRN=ON)&  /* IF RESP TYPE 1 OR 2   @DM00899*/
*           (RPLEX=OFF×RPLSSEO^=0) THEN/* AND NORMAL OR ECEPTION   0304
*                                                            @DM00899*/
@RC00298 DS    0H                                                  0304
C16C0300 TM    RPLRRN+16(RPLPTR),B'00000001'                       0304
         BNZ   @GL00018                                            0304
         TM    RPLNFME+16(RPLPTR),B'00000010'                      0304
         BO    @RF00304                                            0304
@GL00018 TM    RPLEX+16(RPLPTR),B'00000100'                        0304
         BZ    @RT00304                                            0304
         CLI   RPLSSEO(RPLPTR),0                                   0304
         BE    @RF00304                                            0304
@RT00304 DS    0H                                                  0305
*         DO;                       /* RESPONSE REQUIRED TO INBOUND
*                                      REQUEST               @DM00899*/
*           IF RPLSSEO^=0 THEN      /* EXCEPTION RESPONSE    @DM00899*/
         CLI   RPLSSEO(RPLPTR),0                                   0306
         BE    @RF00306                                            0306
*             RPLEX=ON;             /* YES,SET EXCEPTION BIT @DM00899*/
         OI    RPLEX+16(RPLPTR),B'00000100'                        0307
*           ARG=$CID(INDX);         /* PICK UP THE CID               */
@RF00306 LR    @11,INDX                                            0308
         MH    @11,@CH00335                                        0308
         ALR   @11,WAPTR                                           0308
         ICM   ARG,15,$CID-68(@11)                                 0308
*           GEN REFS(RPLPTR,ARG);                                  0309
*                        /* SEND RESPONSE */
 SEND RPL=(RPLPTR),POST=SCHED,STYPE=RESP,OPTCD=SYN,ARG=(ARG)
*           IF R15^=0 THEN          /* CHECK FOR ERROR RETURN CODE   */
         LTR   R15,R15                                             0310
         BNZ   @RT00310                                            0310
*             GO TO C16C0075;       /* ERROR, GET OUT                */
*         END;                                                     0312
*       IF R6^=0×$CURELEM(INDX)=0   /* SHOULD WE FREE THIS ELEMENT 0313
*                                      AND START ANEW        @DM00899*/
*         THEN                                                     0313
@RF00304 SLR   @11,@11                                             0313
         CR    R6,@11                                              0313
         BNE   @RT00313                                            0313
         LR    @10,INDX                                            0313
         MH    @10,@CH00335                                        0313
         C     @11,$CURELEM-68(@10,WAPTR)                          0313
         BE    @RT00313                                            0313
*         GOTO C16C0250;            /* GET NEXT MESSAGE              */
*C16C0256:                                                         0315
*       RPLAREA=ADDR($TRMINPT);     /* POINT TO THE BUFFER           */
C16C0256 LA    @00,$TRMINPT(,WAPTR)                                0315
         ST    @00,RPLAREA(,RPLPTR)                                0315
*       RPLBUFL=$DVINCT(INDX);      /* SET FOR NUMBER OF BYTES TO  0316
*                                      READ                          */
         LR    @11,INDX                                            0316
         MH    @11,@CH00335                                        0316
         SLR   @00,@00                                             0316
         IC    @00,$DVINCT-68(@11,WAPTR)                           0316
         ST    @00,RPLBUFL(,RPLPTR)                                0316
*       ARG=$CID(INDX);             /* PICK UP THE CID               */
         ALR   @11,WAPTR                                           0317
         ICM   ARG,15,$CID-68(@11)                                 0317
*       GEN REFS(RPLPTR,ARG);                                      0318
*                      /* DO A RECEIVE */
 RECEIVE RPL=(RPLPTR),ARG=(ARG),EXIT=ISTCC016,                         X
               OPTCD=(ASY,TRUNC,Q),RTYPE=(DFSYN,DFASY,RESP)
*       IF R15^=0 THEN              /* CHECK FOR ERROR RETURN CODE   */
         LTR   R15,R15                                             0319
         BNZ   @RT00319                                            0319
*         GO TO C16C0075;           /* IF ERROR,EXIT                 */
*       GOTO C16C0251;              /* EXIT                          */
         B     C16C0251                                            0321
*     END;                                                         0322
*                                                                  0322
*   /*****************************************************************/
*   /*                                                               */
*   /* RESPONSE RECEIVED FROM OUR REQUEST                            */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0323
*   IF RPLEX=ON                     /* DID REQUEST TERMINATE WITH  0323
*                                      EXCEPTION                     */
*     THEN                                                         0323
@RF00231 TM    RPLEX+16(RPLPTR),B'00000100'                        0323
         BNO   @RF00323                                            0323
*     DO;                           /* YES IT TERMINATED WITH AN   0324
*                                      EXCEPTION                     */
*       IF RPLSSEI='08'X&(RPLSSMI='13'X×RPLSSMI='14'X×RPLSSMI='1B'X)
*                                   /* IS IT A TEMPORARY ERROR       */
*         THEN                                                     0325
         CLI   RPLSSEI(RPLPTR),X'08'                               0325
         BNE   @RF00325                                            0325
         CLI   RPLSSMI(RPLPTR),19                                  0325
         BE    @RT00325                                            0325
         CLI   RPLSSMI(RPLPTR),20                                  0325
         BE    @RT00325                                            0325
         CLI   RPLSSMI(RPLPTR),27                                  0325
         BNE   @RF00325                                            0325
@RT00325 DS    0H                                                  0326
*         DO;                                                      0326
*           CALL C16C0280;          /* ADD ELEMENT BACK ON QUE       */
         BAL   @14,C16C0280                                        0327
*           IF $DVSNDOK(INDX)=ON    /* IF OK TO SEND NEXT MSG        */
*             THEN                                                 0328
         LR    @11,INDX                                            0328
         MH    @11,@CH00335                                        0328
         ALR   @11,WAPTR                                           0328
         TM    $DVSNDOK-68(@11),B'00010000'                        0328
         BO    @RT00328                                            0328
*             GOTO C16C0250;        /* GET ELEMENT OFF QUE AND START
*                                      IT                            */
*           ELSE                                                   0330
*             GOTO C16C0256;        /* GOTO RECEIVE INPUT            */
         B     C16C0256                                            0330
*         END;                                                     0331
*       ELSE                                                       0332
*         GOTO C16C0075;            /* FLAG CT OR AP AS AN ERROR     */
*     END;                                                         0333
*   $DVSNDOK(INDX)=ON;                                             0334
@RF00323 LR    @11,INDX                                            0334
         MH    @11,@CH00335                                        0334
         ST    @11,@TF00001                                        0334
         ALR   @11,WAPTR                                           0334
         OI    $DVSNDOK-68(@11),B'00010000'                        0334
*   IF BINBRAK=ON                   /* IF BOUND WITH BRACKETS        */
*     THEN                                                         0335
         L     @11,@TF00001                                        0335
         LA    @11,$DEVSESP-68(@11,WAPTR)                          0335
         BCTR  @11,0                                               0335
         TM    BINBRAK(@11),B'00100000'                            0335
         BNO   @RF00335                                            0335
*     IF BINBKTR=ON&$DVBRKSN(INDX)=SNDEB/* CHECK BRACKET             */
*       THEN                                                       0336
         TM    BINBKTR(@11),B'00010000'                            0336
         BNO   @RF00336                                            0336
         L     @11,@TF00001                                        0336
         SLR   @00,@00                                             0336
         IC    @00,$DVBRKSN-68(@11,WAPTR)                          0336
         C     @00,@CF00137                                        0336
         BNE   @RF00336                                            0336
*       $DVBRKST(INDX)=BETB;        /* NOW BETWEEN BRACKETS          */
         SLR   @00,@00                                             0337
         L     @11,@TF00001                                        0337
         STC   @00,$DVBRKST-68(@11,WAPTR)                          0337
*     ELSE                                                         0338
*       IF $DVBRKSN(INDX)=SNDBB     /* WAS BEGIN BRACKET SUCCESSFUL  */
*         THEN                                                     0338
         B     @RC00336                                            0338
@RF00336 LA    @11,1                                               0338
         LR    @10,INDX                                            0338
         MH    @10,@CH00335                                        0338
         SLR   @00,@00                                             0338
         IC    @00,$DVBRKSN-68(@10,WAPTR)                          0338
         CR    @11,@00                                             0338
         BNE   @RF00338                                            0338
*         $DVBRKST(INDX)=INB;       /* NOW IN BRACKET                */
         STC   @11,$DVBRKST-68(@10,WAPTR)                          0339
*   IF $CURELEM(INDX)->INCT^=0      /* POINT TO CURRENT ELEMENT AND
*                                      CHECK FOR INPUT               */
*     THEN                                                         0340
@RF00338 DS    0H                                                  0340
@RC00336 DS    0H                                                  0340
@RF00335 LR    @11,INDX                                            0340
         MH    @11,@CH00335                                        0340
         L     @11,$CURELEM-68(@11,WAPTR)                          0340
         CLI   INCT(@11),0                                         0340
         BNE   @RT00340                                            0340
*     GOTO C16C0256;                /* GOTO RECEIVE INPUT            */
*   GOTO C16C0250;                  /* GET ELEMENT OFF QUE AND START
*                                      IT                            */
         B     C16C0250                                            0342
*   RESPECIFY                                                      0343
*    (R0,                                                          0343
*     R1) RESTRICTED;               /* DONT LET THESE REGISTERS GET
*                                      ALTRED                        */
*C16C1000:                                                         0344
*   GEN REFS(C16C1000,BASE,R12,R13,R14,R15,C16CBUF2);              0344
C16C1000 DS    0H                                                  0344
*                                                 /*SETUP @ZD10878*/
         USING C16C1000,R15
         STM   R14,R12,12(R13)     SAVE CALLERS REGISTERS
         L     R12,BASE            PICK UP COMMON BASE ADDRESS
         DROP  R15
         LA    R9,C16CBUF2 POINT TO MAINLINE WORK AREA         @ZD10878
*   SAVEA(2)=R13;                   /* SAVE ADDRESS OF CALLERS     0345
*                                      SAVEAREA                      */
         ST    R13,SAVEA+4                                         0345
*   BACKSAVE(3)=ADDR(SAVEA);        /* POINT TO MY SAVEAREA          */
         LA    @11,SAVEA                                           0346
         ST    @11,BACKSAVE+8(,R13)                                0346
*   R13=ADDR(SAVEA);                /* GET ADDRESS OF MY SAVEAREA    */
         LR    R13,@11                                             0347
*   INDX=R1;                        /* POINT TO ENTRY IN DEV TABLE   */
         LR    INDX,R1                                             0348
*   IF R0=0 THEN                    /* IF CALLED TO START A QUE      */
         LTR   R0,R0                                               0349
         BNZ   @RF00349                                            0349
*     DO;                           /* THEN START THE QUEUE PASSED IN
*                                      R1                            */
*       CALL C16C0265;              /* START THE QUEUE POINTED TO BY
*                                      R1                            */
         BAL   @14,C16C0265                                        0351
*       GO TO C16C1050;             /* EXIT THE MODULE               */
         B     C16C1050                                            0352
*     END;                          /* END OF ROUTINE TO START QUEUE */
*   IF R0=4 THEN                    /* IF CALLED TO PURGE A QUEUE    */
@RF00349 C     R0,@CF00068                                         0354
         BNE   @RF00354                                            0354
*     DO;                           /* PURGE QUEUE POINTED TO BY RU  */
*       RESPECIFY                                                  0356
*        (PTR1,                                                    0356
*         PTR2) RESTRICTED;         /* DONT ALTER REGISTERS          */
*       PTR2=PTR1;                  /* SAVE ADDRESS OF QUEUE         */
         LR    PTR2,PTR1                                           0357
*       R0=0;                       /* INDICATE NO ELEMENTS ON CHAIN */
         SLR   R0,R0                                               0358
*C16C1005:                                                         0359
*       PTR1=LASTCHN;               /* GET CHAIN PTR                 */
C16C1005 L     PTR1,LASTCHN(,PTR2)                                 0359
*       CS(PTR1,R0,LASTCHN);        /* REMOVE ALL ELEMENTS FROM QUEUE*/
         CS    PTR1,@00,LASTCHN(PTR2)                              0360
*       BC(4,C16C1005);             /* COMPARE AND SWAP FAILED, TRY
*                                      AGAIN                         */
         BC    4,C16C1005                                          0361
*       IF((PTR1&GATEBIT0)^=0) THEN /* CHECK FOR ANYTHING ON QUE   0362
*                                                            @ZD10874*/
         LR    @11,PTR1                                            0362
         N     @11,@CF00617                                        0362
         LTR   @11,@11                                             0362
         BZ    @RF00362                                            0362
*         DO;                                                      0363
*           R8=PTR1;                /* POINT TO NEXT ELEMENT @DA04688*/
         LR    R8,PTR1                                             0364
*C16C1025:                                                         0365
*           RPLPTR=R8;              /* POINT TO ELE TO BE FREED    0365
*                                                            @ZD10874*/
C16C1025 LR    RPLPTR,R8                                           0365
*           R8=RPLPTR->CHAIN&GATEBIT0;/* POINT TO NEXT ELE   @ZD10874*/
         L     R8,CHAIN(,RPLPTR)                                   0366
         N     R8,@CF00617                                         0366
*           CALL C16C0270;          /* FREE THIS ELEMENT     @ZD10874*/
         BAL   @14,C16C0270                                        0367
*           IF R8^=0 THEN           /* ANY ELEMENTS LEFT ON QUE    0368
*                                                            @ZD10874*/
         LTR   R8,R8                                               0368
         BNZ   @RT00368                                            0368
*             GOTO C16C1025;        /* YES FREE IT           @ZD10874*/
*         END;                      /* END OF LOOPING THOOUGHT THE 0370
*                                      ELEMENTS                      */
*       GO TO C16C1050;             /* EXIT THE MODULE               */
         B     C16C1050                                            0371
*     END;                          /* END OF FREEING HE QUE CODE    */
*C16C1050:                                                         0373
*   GEN REFS(R13,R12,R14);                                         0373
@RF00354 DS    0H                                                  0373
C16C1050 DS    0H                                                  0373
         L     R13,4(R13)          PICK UP LAST SAVE AREA ADDRESS
         LM    R14,R12,12(R13)     RESTORE REGISTERS
         BR    R14                 RETURN TO CALLER
*   RESPECIFY                                                      0374
*    (PTR1,                                                        0374
*     PTR2) UNRESTRICTED;           /* REGISTERS ARE FREE AGAIN      */
*   RESPECIFY                                                      0375
*    (R0,                                                          0375
*     R1) UNRESTRICTED;             /* RELEASE THESE REGISTERS FOR 0375
*                                      USE                           */
*C16C0255:                                                         0376
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0376
         B     @PB00002                                            0376
C16C0255 DS    0H                                                  0377
*   RESPECIFY                                                      0377
*    (PTR1,                                                        0377
*     PTR2) RESTRICTED;             /* DONT ALTER REGISTERS          */
*   R7=R14;                         /* SAVE R14 FOR RETRUN           */
         LR    R7,R14                                              0378
*   PTR2=ADDR($MSGOTSD(INDX));      /* SAVE PTR1                     */
         LR    @11,INDX                                            0379
         MH    @11,@CH00335                                        0379
         LA    PTR2,$MSGOTSD-68(@11,WAPTR)                         0379
*   PTR1=LASTCHN&GATEBIT0;          /* PTR TO 1ST ELEMENT            */
         L     PTR1,LASTCHN(,PTR2)                                 0380
         N     PTR1,@CF00617                                       0380
*   IF PTR1=0 THEN                  /* IF NO OUTSTANDING MESSAGES    */
         LTR   PTR1,PTR1                                           0381
         BNZ   @RF00381                                            0381
*     DO;                           /* HANDLE AS SPECIAL CASE        */
*       LASTCHN=PTR1;               /* SET MESSAGES OUTSTANDING TO 0383
*                                      ZERO                          */
         ST    PTR1,LASTCHN(,PTR2)                                 0383
*       R1=ADDR($TLTECB2);          /* POINT TO ECB TO BE POSTED   0384
*                                                            @ZD10879*/
         L     R1,RCAPTR(,WAPTR)                                   0384
         LA    R1,$TLTECB2(,R1)                                    0384
*       IF $CTEQTT='1'B&($SNDRFLG='1'B×$EXIOWAT='1'B)/* POST ECB   0385
*                                                            @ZD10879*/
*         THEN                                                     0385
         TM    $CTEQTT(WAPTR),B'00010000'                          0385
         BNO   @RF00385                                            0385
         TM    $SNDRFLG(WAPTR),B'00100100'                         0385
         BZ    @RF00385                                            0385
*         CALL I00C1001;            /* POST ECB              @ZD10879*/
         L     @15,@CV01727                                        0386
         BALR  @14,@15                                             0386
*       PTR1=0;                     /* SHOW NO ELEMENT FOUND @ZD10879*/
@RF00385 SLR   PTR1,PTR1                                           0387
*       GO TO C16C0260;             /* EXIT FROM THE FUNCTION        */
         B     C16C0260                                            0388
*     END;                          /* END OF THE SPECIAL CASE       */
*   DO WHILE((PTR1->CHAIN&GATEBIT0)^=0);/* LOOP UNTIL LAST ELEMENT   */
@RF00381 B     @DE00390                                            0390
@DL00390 DS    0H                                                  0391
*     PTR2=PTR1;                    /* ADDR OF PTR TO NEXT ELEMENT   */
         LR    PTR2,PTR1                                           0391
*     PTR1=PTR2->CHAIN;             /* ADDR OF NEXT ELEMENT          */
         L     PTR1,CHAIN(,PTR2)                                   0392
*   END;                            /* END OF LOOP LOOKING FOR LAST
*                                      ELEMENT                       */
@DE00390 L     @00,CHAIN(,PTR1)                                    0393
         N     @00,@CF00617                                        0393
         LTR   @00,@00                                             0393
         BNZ   @DL00390                                            0393
*   PTR2->LASTCHN=GATEBIT1;         /* ZERO LAST CHAIN PTR           */
         MVC   LASTCHN(4,PTR2),@CF00619                            0394
*C16C0260:                                                         0395
*   R14=R7;                         /* RETURN TO THE CALLER          */
C16C0260 LR    R14,R7                                              0395
*   END C16C0255;                   /* END OF SUBROUTINE TO REMOVE 0396
*                                      ELEMENT FROM QUEUE            */
@EL00002 DS    0H                                                  0396
@EF00002 DS    0H                                                  0396
@ER00002 BR    @14                                                 0396
*   RESPECIFY                                                      0397
*    (PTR1,                                                        0397
*     PTR2) UNRESTRICTED;           /* REGISTERS ARE FREE AGAIN      */
*   RESPECIFY                                                      0398
*     R1 RESTRICTED;                /* DONT LET THIS REG GET ALTERED */
*C16C0265:                                                         0399
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0399
C16C0265 DS    0H                                                  0400
*   R8=R14;                         /* SAVE THE RETURN ADDRESS       */
         LR    R8,R14                                              0400
*   CALL C16C0255;                  /* GET AN RPL TO PROCESS         */
         BAL   @14,C16C0255                                        0401
*   $CURELEM(INDX)=PTR1;                                           0402
         LR    @11,INDX                                            0402
         MH    @11,@CH00335                                        0402
         ST    PTR1,$CURELEM-68(@11,WAPTR)                         0402
*   RPLPTR=ADDR($TLTRPL1);          /* POINT TO THE CT RPL           */
         LA    RPLPTR,$TLTRPL1(,WAPTR)                             0403
*   IF INDX=2 THEN                  /* CHECK TO SEE WHICH RPL IS   0404
*                                      CORRECT                       */
         C     INDX,@CF00137                                       0404
         BNE   @RF00404                                            0404
*     RPLPTR=ADDR($TLTRPL2);        /* MUST BE AN AP                 */
         LA    RPLPTR,$TLTRPL2(,WAPTR)                             0405
*   ARG=$CID(INDX);                 /* PICK UP THE CID               */
@RF00404 LR    @11,INDX                                            0406
         MH    @11,@CH00335                                        0406
         ST    @11,@TF00001                                        0406
         ALR   @11,WAPTR                                           0406
         ICM   ARG,15,$CID-68(@11)                                 0406
*   IF R1^=0 THEN                   /* CHECK FOR ELEMENT TO PROCESS  */
         LTR   R1,R1                                               0407
         BZ    @RF00407                                            0407
*     DO;                           /* IF THER WAS A RETURNED      0408
*                                      ELEMENT, START IT             */
*       RESPECIFY                                                  0409
*         R1 UNRESTRICTED;          /* RELEASE THIS REGISTER FOR USE */
*       R7=ADDR(MSG);               /* POINT TO MSG TO BE SENT       */
         L     @11,@TF00001                                        0410
         L     @11,$CURELEM-68(@11,WAPTR)                          0410
         LA    R7,MSG(,@11)                                        0410
*       R6=OUTCT;                   /* SET UP LENGTH OF OUTBOUND MSG */
         SLR   R6,R6                                               0411
         IC    R6,OUTCT(,@11)                                      0411
*       IF $DEVLU(INDX)=OFF         /* IF NOT AN LU                  */
*         THEN                                                     0412
         LR    @11,WAPTR                                           0412
         AL    @11,@TF00001                                        0412
         TM    $DEVLU-68(@11),B'00001000'                          0412
         BNZ   @RF00412                                            0412
*         DO;                                                      0413
*           IF $DVCTBYT(INDX)=OFF   /* IF NO CONTROL BYTE PRESENT    */
*             THEN                                                 0414
         LR    @11,WAPTR                                           0414
         AL    @11,@TF00001                                        0414
         TM    $DVCTBYT-68(@11),B'00000010'                        0414
         BNZ   @RF00414                                            0414
*             GEN REFS(RPLPTR,ISTCC016,ARG,R6,R7);                 0415
 WRITE RPL=(RPLPTR),OPTCD=ASY,EXIT=ISTCC016,ARG=(ARG),                 X
               AREA=(R7),RECLEN=(R6)
*           ELSE                                                   0416
*             DO;                                                  0416
         B     @RC00414                                            0416
@RF00414 DS    0H                                                  0417
*               R7=R7+1;            /* SKIP OVER CONTROL BYTE        */
         AL    R7,@CF00072                                         0417
*               R6=R6-1;            /* REDUCE THE COUNT              */
         BCTR  R6,0                                                0418
*               IF MSG(1)='1'       /* SHOULD SCREEN BE ERASED       */
*                 THEN                                             0419
         LR    @11,INDX                                            0419
         MH    @11,@CH00335                                        0419
         L     @11,$CURELEM-68(@11,WAPTR)                          0419
         CLI   MSG(@11),C'1'                                       0419
         BNE   @RF00419                                            0419
*                 GEN REFS(RPLPTR,ISTCC016,ARG,R6,R7);             0420
 WRITE RPL=(RPLPTR),EXIT=ISTCC016,ARG=(ARG),RECLEN=(R6),               X
               AREA=(R7),OPTCD=(ASY,LBT,NERASE)
*               ELSE                                               0421
*                 GEN REFS(RPLPTR,ISTCC016,ARG,R6,R7);             0421
         B     @RC00419                                            0421
@RF00419 DS    0H                                                  0421
 WRITE RPL=(RPLPTR),EXIT=ISTCC016,ARG=(ARG),RECLEN=(R6),               X
               AREA=(R7),OPTCD=(ASY,LBT,ERASE)
*             END;                                                 0422
*         END;                                                     0423
*       ELSE                        /* PROCESS AN LU         @D32JPGH*/
*         DO;                                                      0424
         B     @RC00412                                            0424
@RF00412 DS    0H                                                  0425
*           IF BINBRAK=ON           /* DID WE BIND TO USE BRACKETS 0425
*                                                            @D32JPGH*/
*             THEN                                                 0425
         LR    @11,INDX                                            0425
         MH    @11,@CH00335                                        0425
         LA    @10,$DEVSESP-68(@11,WAPTR)                          0425
         TM    BINBRAK-1(@10),B'00100000'                          0425
         BNO   @RF00425                                            0425
*             DO;                                                  0426
*               RPLBB=OFF;                                         0427
*               RPLEB=OFF;                                         0428
         LA    @10,16                                              0428
         ALR   @10,RPLPTR                                          0428
         NI    RPLBB(@10),B'00111111'                              0428
*               $DVBRKSN(INDX)=0;   /* RESET BRACKET TO ZERO @D32JPGH*/
         SLR   @00,@00                                             0429
         STC   @00,$DVBRKSN-68(@11,WAPTR)                          0429
*               IF $DVBRKST(INDX)^=INB/* NOT IN BRACKET STATE      0430
*                                                            @D32JPGH*/
*                 THEN              /* THEN                  @D32JPGH*/
         SLR   @00,@00                                             0430
         IC    @00,$DVBRKST-68(@11,WAPTR)                          0430
         C     @00,@CF00072                                        0430
         BE    @RF00430                                            0430
*                 RPLBB=ON;         /* SET BEGIN BRACKET     @D32JPGH*/
         OI    RPLBB(@10),B'10000000'                              0431
*               IF($MSGOTSD(INDX)&GATEBIT0)=0&INCT=0/* IF NO MORE  0432
*                                      ELEMENTS AND DON'T NEED DATA  */
*                 THEN                                             0432
@RF00430 LR    @11,INDX                                            0432
         MH    @11,@CH00335                                        0432
         L     @00,$MSGOTSD-68(@11,WAPTR)                          0432
         N     @00,@CF00617                                        0432
         LTR   @00,@00                                             0432
         BNZ   @RF00432                                            0432
         L     @11,$CURELEM-68(@11,WAPTR)                          0432
         CLI   INCT(@11),0                                         0432
         BNE   @RF00432                                            0432
*                 RPLEB=ON;         /* END BRACKET           @D32JPGH*/
         OI    RPLEB+16(RPLPTR),B'01000000'                        0433
*               IF RPLBB=ON THEN    /* IF SENDING A BB               */
@RF00432 LA    @11,16                                              0434
         ALR   @11,RPLPTR                                          0434
         TM    RPLBB(@11),B'10000000'                              0434
         BNO   @RF00434                                            0434
*                 IF RPLEB=ON THEN  /* AND IF SENDING AN EB          */
         TM    RPLEB(@11),B'01000000'                              0435
         BNO   @RF00435                                            0435
*                   $DVBRKST(INDX)=BETB;/* THEN GOING BETEWEEN     0436
*                                      BRACKET                       */
         LR    @11,INDX                                            0436
         MH    @11,@CH00335                                        0436
         SLR   @00,@00                                             0436
         STC   @00,$DVBRKST-68(@11,WAPTR)                          0436
*                 ELSE              /* IF BB AND NOT EB              */
*                   $DVBRKSN(INDX)=SNDBB;/* OTHERWISE, ONLY SENDING
*                                      BB                            */
         B     @RC00435                                            0437
@RF00435 LR    @11,INDX                                            0437
         MH    @11,@CH00335                                        0437
         LA    @00,1                                               0437
         STC   @00,$DVBRKSN-68(@11,WAPTR)                          0437
*               ELSE                /* IF NOT SENDING BB             */
*                 IF RPLEB=ON THEN  /* IF AN EB WITHOUT A BB         */
         B     @RC00434                                            0438
@RF00434 TM    RPLEB+16(RPLPTR),B'01000000'                        0438
         BNO   @RF00438                                            0438
*                   IF BINBKTR=ON THEN/* AND IF CONDITIONAL        0439
*                                      TERMINATION                   */
         LR    @11,INDX                                            0439
         MH    @11,@CH00335                                        0439
         LA    @10,$DEVSESP-68(@11,WAPTR)                          0439
         TM    BINBKTR-1(@10),B'00010000'                          0439
         BNO   @RF00439                                            0439
*                     $DVBRKSN(INDX)=SNDEB;/* ONLY SENDING AN EB     */
         LA    @00,2                                               0440
         STC   @00,$DVBRKSN-68(@11,WAPTR)                          0440
*                   ELSE            /* SENDING EB ONLY,NO CONDITIONAL
*                                      TERMINATION                   */
*                     $DVBRKST(INDX)=BETB;/* GO TO BETWEEN BRACKETS  */
         B     @RC00439                                            0441
@RF00439 LR    @11,INDX                                            0441
         MH    @11,@CH00335                                        0441
         SLR   @00,@00                                             0441
         STC   @00,$DVBRKST-68(@11,WAPTR)                          0441
*             END;                  /* END OF BRACKET STATE MANAGER  */
@RC00439 DS    0H                                                  0442
@RF00438 DS    0H                                                  0442
@RC00434 DS    0H                                                  0443
*           IF $ASCII(INDX)=ON THEN /* IF ASCII, SET ALTERNATE CODE
*                                      BIT                   @ZD10887*/
@RF00425 LR    @11,INDX                                            0443
         MH    @11,@CH00335                                        0443
         ALR   @11,WAPTR                                           0443
         TM    $ASCII-68(@11),B'00000100'                          0443
         BNO   @RF00443                                            0443
*             RPLCSI=ON;            /* ITS ASCII, SET BIT            */
         OI    RPLCSI+16(RPLPTR),B'00001000'                       0444
*           $DVSNDOK(INDX)=OFF;     /* DONT SEND ANOTHER MSG         */
@RF00443 LR    @11,INDX                                            0445
         MH    @11,@CH00335                                        0445
         ST    @11,@TF00001                                        0445
         ALR   @11,WAPTR                                           0445
         NI    $DVSNDOK-68(@11),B'11101111'                        0445
*           IF INCT^=0&BINFMTRM=BINHDXFF THEN/* IF ANSWER EXPECTED 0446
*                                      AND HALF- DUPLEX FF CHANGE  0446
*                                      DIRECTION             @AX11982*/
         L     @11,@TF00001                                        0446
         L     @11,$CURELEM-68(@11,WAPTR)                          0446
         CLI   INCT(@11),0                                         0446
         BE    @RF00446                                            0446
         L     @11,@TF00001                                        0446
         LA    @11,$DEVSESP-68(@11,WAPTR)                          0446
         TM    BINFMTRM-1(@11),B'10000000'                         0446
         BNO   @RF00446                                            0446
         TM    BINFMTRM-1(@11),B'01000000'                         0446
         BNZ   @RF00446                                            0446
*             RPLCMD='1'B;                                         0447
         OI    RPLCMD+16(RPLPTR),B'00100000'                       0447
*           GEN REFS(RPLPTR,ARG,R6,R7);                            0448
@RF00446 DS    0H                                                  0448
 SEND RPL=(RPLPTR),ARG=(ARG),AREA=(R7),RECLEN=(R6),                    X
               STYPE=REQ,CONTROL=DATA,POST=SCHED,CHAIN=ONLY,           X
               OPTCD=(SYN,NFMHDR),RESPOND=(NEX,FME,NRRN)
*         END;                      /* END OF LU(RECORD) PROCESSING  */
*       IF R15^=0 THEN              /* CHECK TO SEE THE I/O WENT O.K */
@RC00412 LTR   R15,R15                                             0450
         BZ    @RF00450                                            0450
*         DO;                       /* BAD R.C., PROCESS             */
*           CALL C16C0920;          /* IF ERROR, FREE STORAGE        */
         BAL   @14,C16C0920                                        0452
*           GO TO C16C0266;         /* IF ERROR,GET OUT NOW          */
         B     C16C0266                                            0453
*         END;                      /* END OF BAD R.C, PROCESSING    */
*     END;                          /* END OF STARTING A NEW ELEMENT
*                                      OPERATION                     */
@RF00450 DS    0H                                                  0456
*   IF $DEVLU(INDX)='1'B THEN       /* IF THIS IS AN LU, RECEIVE RESP*/
@RF00407 LR    @11,INDX                                            0456
         MH    @11,@CH00335                                        0456
         ST    @11,@TF00001                                        0456
         ALR   @11,WAPTR                                           0456
         TM    $DEVLU-68(@11),B'00001000'                          0456
         BNO   @RF00456                                            0456
*     DO;                           /* LU, GET THE DATA              */
*       RPLBUFL=$DVINCT(INDX);      /* POINT TO BUFFER TO READ INTO  */
         L     @11,@TF00001                                        0458
         SLR   @00,@00                                             0458
         IC    @00,$DVINCT-68(@11,WAPTR)                           0458
         ST    @00,RPLBUFL(,RPLPTR)                                0458
*       RPLAREA=ADDR($TRMINPT);     /* LOCATION                      */
         LA    @00,$TRMINPT(,WAPTR)                                0459
         ST    @00,RPLAREA(,RPLPTR)                                0459
*       GEN REFS(RPLPTR,ARG);                                      0460
 RECEIVE RPL=(RPLPTR),ARG=(ARG),EXIT=ISTCC016,                         X
               OPTCD=(ASY,TRUNC,Q),RTYPE=(DFSYN,DFASY,RESP)
*       IF R15^=0 THEN              /* IF ERROR DURING RECEIVE       */
         LTR   R15,R15                                             0461
         BZ    @RF00461                                            0461
*         CALL C16C0920;            /* ERROR, GET RID OF EVERYTHING  */
         BAL   @14,C16C0920                                        0462
*     END;                          /* END OF LU RECEIVE FOR RESPONSE*/
@RF00461 DS    0H                                                  0464
*C16C0266:                                                         0464
*   R14=R8;                         /* RESTORE REG 14                */
@RF00456 DS    0H                                                  0464
C16C0266 LR    R14,R8                                              0464
*   END C16C0265;                   /* END OF ROUTINE TO START AN  0465
*                                      ELEMENT ON QUEUE              */
@EL00003 DS    0H                                                  0465
@EF00003 DS    0H                                                  0465
@ER00003 BR    @14                                                 0465
*C16C0270:                                                         0466
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0466
C16C0270 DS    0H                                                  0467
*   RESPECIFY                                                      0467
*     R5 RESTRICTED;                /* RESTRICT RETURN SAVE REGISTER */
*   R5=R14;                         /* SAVE REG 14                   */
         LR    R5,R14                                              0468
*   RESPECIFY                                                      0469
*    (R0,                                                          0469
*     R1) RESTRICTED;               /* DONT LET THESE REGISTERS GET
*                                      ALTRED                        */
*   R0=RPLPTR->OUTCT+10;            /* GET LENGTH OF GETMAINED AREA  */
         LA    R0,10                                               0470
         SLR   @11,@11                                             0470
         IC    @11,OUTCT(,RPLPTR)                                  0470
         ALR   R0,@11                                              0470
*   R1=RPLPTR;                      /* PTR TO AREA TO BE FREED       */
         LR    R1,RPLPTR                                           0471
*/*VFRMAIN  SIZE((0))STORAGE((1))SUBPOOL(0)                          */
*                                                                  0472
*   DO;                                                            0472
*     DCL                                                          0473
*       GPR00F FIXED(31) REG(00);                                  0473
*     DCL                                                          0474
*       GPR00P PTR(31) REG(00);                                    0474
*     DCL                                                          0475
*       GPR15F FIXED(31) REG(15);                                  0475
*     DCL                                                          0476
*       GPR15P PTR(31) REG(15);                                    0476
*     RFY                                                          0477
*      (GPR00P,                                                    0477
*       GPR15P) RSTD;               /* PUT SUBPOOL PARM IN HIGH-   0477
*                                      ORDER BYTE OF REG 15          */
*     GPR15F=0;                                                    0478
         SLR   GPR15F,GPR15F                                       0478
*     SLL(GPR15P,24);               /* COMBINE SUBPOOL AND SIZE IN 0479
*                                      REGISTER 0                    */
         SLL   GPR15P,24                                           0479
*     GPR00P=GPR00P×GPR15P;                                        0480
         OR    GPR00P,GPR15P                                       0480
*     RFY                                                          0481
*      (GPR00P,                                                    0481
*       GPR15P) UNRSTD;             /* DECLARE AND RESTRICT REG 1    */
*     DCL                                                          0482
*       GPR01F FIXED(31) REG(01);                                  0482
*     DCL                                                          0483
*       GPR01P PTR(31) REG(01);                                    0483
*     RFY                                                          0484
*      (GPR01P) RSTD;               /* INVOKE XREGSET MACRO TO CHECK
*                                      STORAGE PARM AND PUT ADDR IN
*                                      REGISTER 1                    */
*/*XREGSET  PID('STORAGE')PPARM((1))RREG(1,GPR01P)                   */
*                                                                  0485
*     DO;                                                          0485
*                                                                  0485
*/*PARM ALREADY IN PROPER REGISTER                                   */
*                                                                  0486
*     END;                          /* XREGSET INVOKE FREEMAIN MACRO */
*     GEN;                                                         0487
         FREEMAIN R,LV=(0),A=(1)
*                                   /* UNRESTRICT REG 1              */
*     RFY                                                          0488
*      (GPR01P) UNRSTD;                                            0488
*   END;                            /* VFRMAIN                       */
*   RESPECIFY                                                      0490
*    (R0,                                                          0490
*     R1) UNRESTRICTED;             /* RELEASE THESE REGISTERS FOR 0490
*                                      USE                           */
*   R14=R5;                         /* RESTORE REG 14                */
         LR    R14,R5                                              0491
*   END C16C0270;                   /* END OF ROUTINE TO FREE ELEMENT
*                                      FROM QUEUE                    */
@EL00004 DS    0H                                                  0492
@EF00004 DS    0H                                                  0492
@ER00004 BR    @14                                                 0492
*C16C0280:                                                         0493
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0493
C16C0280 DS    0H                                                  0494
*   R5=R14;                         /* SAVE THE RETURN ADDRESS     0494
*                                                            @D32JPGH*/
         LR    R5,R14                                              0494
*   RESPECIFY                                                      0495
*     LASTCHN BASED(PTR1);                                         0495
*   PTR1=ADDR($MSGOTSD(INDX));      /* PTR TO 1ST ELEMENT    @D32JPGH*/
         LR    @11,INDX                                            0496
         MH    @11,@CH00335                                        0496
         LA    PTR1,$MSGOTSD-68(@11,WAPTR)                         0496
*   DO WHILE((PTR1->CHAIN&GATEBIT0)^=0);/* LOOP TILL LAST ELEMENT    */
         B     @DE00497                                            0497
@DL00497 DS    0H                                                  0498
*     PTR1=PTR1->CHAIN;             /* ADDR OF NEXT ELEMENT  @D32JPGH*/
         L     PTR1,CHAIN(,PTR1)                                   0498
*   END;                            /* END OF LOOP           @D32JPGH*/
@DE00497 SLR   @11,@11                                             0499
         L     @00,CHAIN(,PTR1)                                    0499
         N     @00,@CF00617                                        0499
         CR    @00,@11                                             0499
         BNE   @DL00497                                            0499
*   PTR1->CHAIN=$CURELEM(INDX);     /* PUT PTR INTO LAST ELEMENT     */
         LR    @10,INDX                                            0500
         MH    @10,@CH00335                                        0500
         L     @00,$CURELEM-68(@10,WAPTR)                          0500
         ST    @00,CHAIN(,PTR1)                                    0500
*   $CURELEM(INDX)=0;               /* SHOW NO CURRENT INDX          */
         ST    @11,$CURELEM-68(@10,WAPTR)                          0501
*   R14=R5;                         /* RETURN TO THE CALLER  @D32JPGH*/
         LR    R14,R5                                              0502
*   END C16C0280;                   /* END OF SUBROUTINE TO ADD    0503
*                                      ELEMENT TO QUE        @D32JPGH*/
@EL00005 DS    0H                                                  0503
@EF00005 DS    0H                                                  0503
@ER00005 BR    @14                                                 0503
*C16C0900:                                                         0504
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);/* MOVE DATA TO CALLER           */
C16C0900 DS    0H                                                  0505
*   R5=R14;                         /* SAVE RETURN POINT             */
         LR    R5,R14                                              0505
*   IF INADR^=0 THEN                /* BUFFER AVAILABLE              */
         SLR   @11,@11                                             0506
         LR    @10,INDX                                            0506
         MH    @10,@CH00335                                        0506
         ST    @10,@TF00001                                        0506
         L     @10,$CURELEM-68(@10,WAPTR)                          0506
         C     @11,INADR(,@10)                                     0506
         BE    @RF00506                                            0506
*     DO;                           /* YES, PASSBACK DATA            */
*       M=0;                                                       0508
         STH   @11,M                                               0508
*       I=1;                        /* INITIAL COUNTERS              */
         MVC   I(2),@CH00072                                       0509
*       IF $DEVFRRS(INDX)='19'X×$DEVFRRS(INDX)='1C'X THEN/* 3270     */
         LR    @11,WAPTR                                           0510
         AL    @11,@TF00001                                        0510
         CLI   $DEVFRRS-68(@11),X'19'                              0510
         BE    @RT00510                                            0510
         LR    @11,WAPTR                                           0510
         AL    @11,@TF00001                                        0510
         CLI   $DEVFRRS-68(@11),X'1C'                              0510
         BNE   @RF00510                                            0510
@RT00510 DS    0H                                                  0511
*         I=7;                      /* YES, SKIP CURSOR ADDR         */
         MVC   I(2),@CH00213                                       0511
*       DO I=I TO LENGTH($TRMINPT); /* MOVE DATA BACK TO CALLER      */
@RF00510 LH    @00,I                                               0512
         B     @DE00512                                            0512
@DL00512 DS    0H                                                  0513
*         IF $TRMINPT(I)>=' ' THEN  /* DATA                          */
         LR    @11,@00                                             0513
         ALR   @11,WAPTR                                           0513
         CLI   $TRMINPT-1(@11),C' '                                0513
         BL    @RF00513                                            0513
*           DO;                     /* YES, PASS IT BACK             */
*             M=M+1;                /* INCREASE BYTES PASSED         */
         LA    @11,1                                               0515
         AH    @11,M                                               0515
         STH   @11,M                                               0515
*             CARRAY(M)=$TRMINPT(I)×' ';/* MOVE DATA, PUT IN UPPER 0516
*                                      CASE                          */
         LR    @10,INDX                                            0516
         MH    @10,@CH00335                                        0516
         L     @10,$CURELEM-68(@10,WAPTR)                          0516
         ST    @10,@TF00001                                        0516
         L     @10,INADR(,@10)                                     0516
         ALR   @10,@11                                             0516
         BCTR  @10,0                                               0516
         LR    @11,@00                                             0516
         ALR   @11,WAPTR                                           0516
         MVC   CARRAY(1,@10),$TRMINPT-1(@11)                       0516
         OI    CARRAY(@10),C' '                                    0516
*             IF M=INCT THEN        /* MORE ROOM IN THE BUFFER       */
         LH    @11,M                                               0517
         L     @10,@TF00001                                        0517
         SLR   @00,@00                                             0517
         IC    @00,INCT(,@10)                                      0517
         CR    @11,@00                                             0517
         BE    @RT00517                                            0517
*               GO TO C16C0905;     /* NO, LEAVE                     */
*           END;                    /* END, OF PASS BACK DATA        */
*         ELSE                      /* NOT DATA, CONTROL INFO        */
*           IF $TRMINPT(I)='11'X THEN/* 3270, IS IT A SBA CHARACTER  */
         B     @RC00513                                            0520
@RF00513 LH    @11,I                                               0520
         ALR   @11,WAPTR                                           0520
         CLI   $TRMINPT-1(@11),X'11'                               0520
         BNE   @RF00520                                            0520
*             I=I+2;                /* YES, SKIP ADDR CHARACTERS     */
         LH    @11,I                                               0521
         LA    @11,2(,@11)                                         0521
         STH   @11,I                                               0521
*       END;                        /* END OF MOVING BACK DATA       */
@RF00520 DS    0H                                                  0522
@RC00513 LA    @00,1                                               0522
         AH    @00,I                                               0522
         STH   @00,I                                               0522
@DE00512 C     @00,@CF00048                                        0522
         BNH   @DL00512                                            0522
*C16C0905:                                                         0523
*       MSGCOUNT=M;                 /* RETURN COUNT                  */
C16C0905 LR    @11,INDX                                            0523
         MH    @11,@CH00335                                        0523
         L     @11,$CURELEM-68(@11,WAPTR)                          0523
         L     @11,INADR(,@11)                                     0523
         LH    @00,M                                               0523
         BCTR  @11,0                                               0523
         STC   @00,MSGCOUNT(,@11)                                  0523
*       IF $ALTPRTR=ON THEN         /* IF AP PRESENT                 */
         TM    $ALTPRTR(WAPTR),B'00000010'                         0524
         BNO   @RF00524                                            0524
*         $TWOWAY=ON;               /* PUT REPLY THERE               */
         OI    $TWOWAY(WAPTR),B'01000000'                          0525
*       $POSTFLG=OFF;               /* RESET WAITING FLAG            */
@RF00524 NI    $POSTFLG(WAPTR),B'10111111'                         0526
*       R1=ADDR($TLTECB2);          /* POINT TO THE ECB TO POST      */
         L     R1,RCAPTR(,WAPTR)                                   0527
         LA    R1,$TLTECB2(,R1)                                    0527
*       CALL I00C1001;              /* POST THE ECB                  */
         L     @15,@CV01727                                        0528
         BALR  @14,@15                                             0528
*     END;                          /* END USE OF BUFFER TRMINPT     */
*   $TRMINPT=$TRMINPT&&$TRMINPT;                                   0530
@RF00506 XC    $TRMINPT(80,WAPTR),$TRMINPT(WAPTR)                  0530
*   $DVINCT(1)=LENGTH($TRMINPT);                                   0531
         MVI   $DVINCT(WAPTR),X'50'                                0531
*   R14=R5;                         /* RESTORE RETURN POINTER        */
         LR    R14,R5                                              0532
*   END C16C0900;                                                  0533
@EL00006 DS    0H                                                  0533
@EF00006 DS    0H                                                  0533
@ER00006 BR    @14                                                 0533
*C16C0910:                                                         0534
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0534
C16C0910 DS    0H                                                  0535
*   R7=R14;                         /* SAVE RETURN POINT             */
         LR    R7,R14                                              0535
*   RPLPTR=$CURELEM(INDX);          /* POINT TO ELEMENT BEING      0536
*                                      PROCESSED                     */
         LR    @11,INDX                                            0536
         MH    @11,@CH00335                                        0536
         L     RPLPTR,$CURELEM-68(@11,WAPTR)                       0536
*   $CURELEM(INDX)=0;               /* ZERO OUT CURRENT ELEMENT    0537
*                                      POINTER                       */
         SLR   @10,@10                                             0537
         ST    @10,$CURELEM-68(@11,WAPTR)                          0537
*   IF RPLPTR^=0 THEN               /* ONLY CALL IF THERE IS AN    0538
*                                      ELEMENT TO FREE               */
         CR    RPLPTR,@10                                          0538
         BE    @RF00538                                            0538
*     CALL C16C0270;                /* FREE THE ELEMENT              */
         BAL   @14,C16C0270                                        0539
*   R14=R7;                         /* RESTORE THE RETURN POINT      */
@RF00538 LR    R14,R7                                              0540
*   END C16C0910;                   /* END OF ROUTINE TO FREE CURRENT
*                                      ELEMENT                       */
@EL00007 DS    0H                                                  0541
@EF00007 DS    0H                                                  0541
@ER00007 BR    @14                                                 0541
*C16C0920:                                                         0542
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0542
C16C0920 DS    0H                                                  0543
*   R6=R14;                         /* SAVE THE RETURN POINT         */
         LR    R6,R14                                              0543
*   IF $ALTPRTR=ON&                 /* IF THERE IS AN AP             */
*       INDX=AP                     /* AND THIS IS A TEST TERMINAL   */
*     THEN                                                         0544
         TM    $ALTPRTR(WAPTR),B'00000010'                         0544
         BNO   @RF00544                                            0544
         C     INDX,@CF00137                                       0544
         BNE   @RF00544                                            0544
*     $ALTPRTR=OFF;                 /* DITCH THE AP                  */
         NI    $ALTPRTR(WAPTR),B'11111101'                         0545
*   ELSE                            /* THE ERROR WAS ON THE CT       */
*     DO;                                                          0546
         B     @RC00544                                            0546
@RF00544 DS    0H                                                  0547
*       IF $RPLERR=0 THEN                                          0547
         L     @00,$RPLERR-1(,WAPTR)                               0547
         ICM   @00,8,@CB01266                                      0547
         LTR   @00,@00                                             0547
         BNZ   @RF00547                                            0547
*         $RPLERR=RPLFDBK;          /* SET FIRST ERROR FEEDBACK      */
         MVC   $RPLERR(3,WAPTR),RPLFDBK(RPLPTR)                    0548
*       $CANCEL=ON;                 /* CANCEL THIS LOGON             */
@RF00547 OI    $CANCEL(WAPTR),B'00000010'                          0549
*       $CTERROR=ON;                /* CANCEL BECAUSE OF CT ERR      */
         OI    $CTERROR(WAPTR),B'01000000'                         0550
*       $POSTFLG=OFF;               /* STOP WAITING FOR DATA         */
         NI    $POSTFLG(WAPTR),B'10111111'                         0551
*     END;                                                         0552
*   CALL C16C0910;                  /* FREE THE CURRENT ELEMENT      */
@RC00544 BAL   @14,C16C0910                                        0553
*   R14=R6;                         /* RESTORE THE RETURN POINT      */
         LR    R14,R6                                              0554
*   END C16C0920;                   /* END OF SETTING ERROR STATUS   */
@EL00008 DS    0H                                                  0555
@EF00008 DS    0H                                                  0555
@ER00008 BR    @14                                                 0555
@PB00008 DS    0H                                                  0556
*/* TPEPILOG                                                         */
*                                                                  0556
*   GEN(PRINT OFF);                                                0556
         PRINT OFF
*   GEN(PRINT ON);                                                 0557
*                                                                  0557
         PRINT ON
*/* END OF TPEPILOG                                                  */
*/* ATDSPLY   INVOKED.                                               */
*/********************************************************************/
*/* THE FOLLOWING ATBUILD INCLUSIONS HAVE BEEN MADE IN THIS          */
*/* COMPILATION:                                                     */
*/*             ISTAVT                                               */
*/*             ISTPAB                                               */
*/*             ISTLOK                                               */
*/*             ISTDYPAB                                             */
*/*             ISTRPH                                               */
*/*             ISTATCVT                                             */
*/*             ISTTIE                                               */
*/*             ISTBIND                                              */
*/********************************************************************/
*/* END OF ATDSPLY.                                                  */
*                                                                  0558
*   END ISTCC016                                                   0558
*                                                                  0558
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (IFGRPL  )                                       */
*/*%INCLUDE SYSLIB  (IFGRPLVT)                                       */
*/*%INCLUDE SYSLIB  (ISTRPLFB)                                       */
*                                                                  0558
*       ;                                                          0558
         B     @EL00001                                            0558
@DATA    DS    0H
@CH00213 DC    H'7'
@CH00335 DC    H'68'
@DATD    DSECT
         DS    0F
@TF00001 DS    F
ISTCC016 CSECT
         DS    0F
@CF00072 DC    F'1'
@CH00072 EQU   @CF00072+2
@CF00137 DC    F'2'
@CF00068 DC    F'4'
@CF00054 DC    F'8'
@CF00048 DC    F'80'
@CF00083 DC    F'256'
@CF00617 DC    XL4'7FFFFFFF'
@CF00619 DC    XL4'80000000'
@CF01772 DC    XL4'0000FFFF'
@DATD    DSECT
         DS    0D
RPLSAVE  DS    A
I        DS    H
M        DS    H
N        DS    H
SCRATCH  DS    CL1
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
ISTCC016 CSECT
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
@CV01727 DC    V(I00C1001)
         DS    0D
C16EXSAV DC    F'0'
BASE     DC    AL4(ISTCC016)
@CB01698 DC    X'0201'
@CB01702 DC    X'1001'
@CB01704 DC    X'0819'
@CB01705 DC    X'1007'
@CB01706 DC    X'1008'
@CB01266 DC    X'00'
         DS    CL1
C16CBUF1 DC    CL52' '
C16CBUF2 DC    CL52' '
SAVEA    DC    18F'0'
PATCH    DC    25F'0'
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
WAPTR    EQU   @02
RPLPTR   EQU   @04
RPHPTR   EQU   @01
R1       EQU   @01
R14      EQU   @14
R15      EQU   @15
R0       EQU   @00
R13      EQU   @13
R5       EQU   @05
R8       EQU   @08
R6       EQU   @06
R7       EQU   @07
R9       EQU   @09
R12      EQU   @12
PTR2     EQU   @15
PTR1     EQU   @01
INDX     EQU   @03
ARG      EQU   @05
GPR00P   EQU   @00
GPR15F   EQU   @15
GPR15P   EQU   @15
GPR01P   EQU   @01
GPR00F   EQU   @00
GPR01F   EQU   @01
         ENTRY C16C1000
ATCLCPTR EQU   1032
$RCAAREA EQU   0
$POINTER EQU   $RCAAREA+100
$TLTECB2 EQU   $POINTER+28
$TRTBLA  EQU   $POINTER+124
$CONSTNT EQU   $RCAAREA+244
$RCAFLG  EQU   $RCAAREA+604
$TRASCII EQU   $RCAAREA+608
$EXITSAV EQU   $RCAAREA+864
TOLTEPWA EQU   0
$SCTTBLE EQU   TOLTEPWA
$TESTOPT EQU   $SCTTBLE+2
$ERROPT  EQU   $SCTTBLE+3
$PDEVFLG EQU   $SCTTBLE+10
$CDSFLGS EQU   $SCTTBLE+11
$CDS8T19 EQU   $SCTTBLE+20
$EXECFLG EQU   $SCTTBLE+33
$OLTFLGS EQU   $SCTTBLE+36
$OLTFLG2 EQU   $SCTTBLE+37
$TOTFLG1 EQU   $SCTTBLE+38
$CTEQTT  EQU   $TOTFLG1
$ROUTMSK EQU   $SCTTBLE+40
$CDA     EQU   TOLTEPWA+100
$RCA     EQU   $CDA+44
$OLTPTR  EQU   $CDA+52
$HIMOREC EQU   $CDA+60
$COMMFLG EQU   TOLTEPWA+224
$FLAG3   EQU   $COMMFLG+2
$ALTPRTR EQU   $FLAG3
$FLAG4   EQU   $COMMFLG+3
$FLAG5   EQU   $COMMFLG+4
$EOJ     EQU   $FLAG5
$CANCEL  EQU   $EOJ
$FLAG6   EQU   $COMMFLG+5
$CTERROR EQU   $FLAG6
$ABNDBIT EQU   $FLAG6
$CIREQ   EQU   $FLAG6
$FLAG7   EQU   $COMMFLG+6
$EXIOWAT EQU   $FLAG7
$SNDRFLG EQU   $FLAG7
$FLAG8   EQU   $COMMFLG+7
$TWOWAY  EQU   $FLAG8
$FLAG12  EQU   $COMMFLG+11
$POSTFLG EQU   $FLAG12
$DEVTBLE EQU   TOLTEPWA+240
$DEVCDS  EQU   $DEVTBLE
$DEVUNAD EQU   $DEVCDS
@NM00043 EQU   $DEVUNAD+2
$DEVFEAT EQU   $DEVCDS+4
$DEVFRRS EQU   $DEVFEAT+1
$DEVCDSF EQU   $DEVCDS+9
$DEVSDCF EQU   $DEVCDS+10
$$SYMNME EQU   $DEVCDS+12
$MSGOTSD EQU   $$SYMNME
$CURELEM EQU   $$SYMNME+4
$DEVFLG1 EQU   $DEVTBLE+20
$EVNCPLT EQU   $DEVFLG1
$ATTNEXP EQU   $DEVFLG1
$INTOCC  EQU   $DEVFLG1
$DVCTBYT EQU   $INTOCC
$DEVFLG2 EQU   $DEVTBLE+21
$DEVTECB EQU   $DEVTBLE+22
$OPIS    EQU   $DEVTECB
$DVSEQNO EQU   $OPIS
$OPND    EQU   $DEVTECB+2
$DVBRKSN EQU   $OPND
$DVBRKST EQU   $OPND+1
$DVINCT  EQU   $DEVTBLE+26
$DEVFLG3 EQU   $DEVTBLE+27
$SIOFLG  EQU   $DEVFLG3
$DVSNDOK EQU   $SIOFLG
$IFTOUT  EQU   $DEVTBLE+36
$DEVSESP EQU   $IFTOUT
$SSCPDAF EQU   $IFTOUT+6
$LDNCBPT EQU   $DEVTBLE+48
$CID     EQU   $DEVTBLE+52
$RNINFO  EQU   $DEVTBLE+56
$DEVFLG5 EQU   $RNINFO+8
$DEVLU   EQU   $DEVFLG5
$ASCII   EQU   $DEVFLG5
$DEVFLG4 EQU   $DEVTBLE+65
$TLTRPL1 EQU   TOLTEPWA+1616
$TLTRPL2 EQU   TOLTEPWA+1736
$TRMINPT EQU   TOLTEPWA+2184
#EXITA   EQU   TOLTEPWA+2632
$RETREG  EQU   TOLTEPWA+2636
$CCOMDAT EQU   TOLTEPWA+2644
$CFLGS   EQU   $CCOMDAT+16
$24FEMSG EQU   TOLTEPWA+2681
$24CATMG EQU   $24FEMSG+11
@NM00051 EQU   TOLTEPWA+2776
$OUNTPTR EQU   @NM00051+4
$NSPTR   EQU   $OUNTPTR
$NSCNT   EQU   @NM00051+10
$ENXX    EQU   @NM00051+15
$IMITX   EQU   $ENXX
$RPLERR  EQU   TOLTEPWA+2977
SVESC033 EQU   TOLTEPWA+3160
SVECC013 EQU   TOLTEPWA+3232
SVEIC003 EQU   TOLTEPWA+3592
SVESC022 EQU   TOLTEPWA+3736
SVECC011 EQU   TOLTEPWA+4024
IFGRPL   EQU   0
RPLCOMN  EQU   IFGRPL
RPLIDWD  EQU   RPLCOMN
RPLREQ   EQU   RPLIDWD+2
RPLLEN   EQU   RPLIDWD+3
RPLECB   EQU   RPLCOMN+8
RPLFDBWD EQU   RPLCOMN+12
RPLFDBK  EQU   RPLFDBWD+1
RPLRTNCD EQU   RPLFDBK
RPLCNDCD EQU   RPLFDBK+1
RPLCMPON EQU   RPLCNDCD
RPLFDB2  EQU   RPLCMPON
RPLERRCD EQU   RPLCNDCD+1
RPLFDB3  EQU   RPLERRCD
RPLREOT  EQU   RPLFDB3
RPLKEYLE EQU   RPLCOMN+16
RPLAREA  EQU   RPLCOMN+32
RPLARG   EQU   RPLCOMN+36
RPLOPTCD EQU   RPLCOMN+40
RPLOPT1  EQU   RPLOPTCD
RPLECBSW EQU   RPLOPT1
RPLOPT2  EQU   RPLOPTCD+1
RPLADR   EQU   RPLOPT2
RPLOPT3  EQU   RPLOPTCD+2
RPLOPT4  EQU   RPLOPTCD+3
RPLNXTRP EQU   RPLCOMN+44
RPLRLEN  EQU   RPLCOMN+48
RPLBUFL  EQU   RPLCOMN+52
RPLOPTC2 EQU   RPLCOMN+56
RPLOPT5  EQU   RPLOPTC2
RPLWRTYP EQU   RPLOPT5
RPLOPT6  EQU   RPLOPTC2+1
RPLUNTYP EQU   RPLOPT6
RPLOPT7  EQU   RPLOPTC2+2
RPLCNOPT EQU   RPLOPT7
RPLOPT8  EQU   RPLOPTC2+3
RPLRBAR  EQU   RPLCOMN+60
RPLAIXID EQU   RPLRBAR+2
RPLEXTDS EQU   RPLCOMN+68
RPLEXTD1 EQU   RPLEXTDS
RPLVTEXT EQU   IFGRPL+76
RPLAARLN EQU   RPLVTEXT+4
RPLFDBK2 EQU   RPLVTEXT+12
RPLSSNSI EQU   RPLFDBK2
RPLDSB   EQU   RPLSSNSI
RPLDSB1  EQU   RPLDSB
RPLSSEI  EQU   RPLDSB1
RPLDSB2  EQU   RPLDSB+1
RPLSSMI  EQU   RPLDSB2
RPLUSNSI EQU   RPLFDBK2+2
RPLUSFLD EQU   RPLVTEXT+16
RPLOPTC3 EQU   RPLVTEXT+20
RPLOPT9  EQU   RPLOPTC3
RPLOPT10 EQU   RPLOPTC3+1
RPLOPT11 EQU   RPLOPTC3+2
RPLOPT12 EQU   RPLOPTC3+3
RPLFMHDR EQU   RPLOPT12
RPLOSENS EQU   RPLVTEXT+24
RPLSSNSO EQU   RPLOSENS
RPLSSEO  EQU   RPLSSNSO
ISTAVT   EQU   0
ISTAS49  EQU   ISTAVT+4
ISTPAB   EQU   0
PABWQCHN EQU   ISTPAB
PABWEQA  EQU   PABWQCHN
PABCHAIN EQU   PABWQCHN+4
PABRPHFG EQU   ISTPAB+12
PABFLAGS EQU   PABRPHFG
PABERLCK EQU   PABFLAGS
PABERRLK EQU   PABERLCK
ISTLOK   EQU   0
LOKCHN   EQU   ISTLOK+1
LOKCHNG  EQU   LOKCHN
@NM00055 EQU   LOKCHNG+2
ISTDYPAB EQU   0
ISTRPH   EQU   0
RPHCNTL  EQU   ISTRPH
RPHFLAGS EQU   RPHCNTL+2
RPHAPTYP EQU   RPHFLAGS
RPHFSTLC EQU   RPHFLAGS
RPHFLGB  EQU   RPHCNTL+3
RPHRPHA  EQU   ISTRPH+4
RPHTSKID EQU   ISTRPH+8
RPHRESMA EQU   ISTRPH+16
RPHWPFLG EQU   RPHRESMA
RPHWEA   EQU   ISTRPH+24
RPHCSPA  EQU   RPHWEA
RPHSRPRM EQU   ISTRPH+28
RPHPABQA EQU   ISTRPH+36
RPHWORK  EQU   ISTRPH+40
RPHSAVE1 EQU   RPHWORK
RPHSBITS EQU   RPHSAVE1+1
ISTATCVT EQU   0
ATCCOM   EQU   ISTATCVT
ATCSTAT  EQU   ATCCOM
ATCSTAT1 EQU   ATCSTAT
ATCSTFLG EQU   ATCSTAT+1
ATCPOFLG EQU   ATCSTAT+2
ATCSTAT4 EQU   ATCSTAT+3
ATCIOTRC EQU   ATCCOM+140
ATCTHTRC EQU   ATCIOTRC
ATCCSMR  EQU   ISTATCVT+296
ATCSHRFG EQU   ISTATCVT+316
ATCHPGM  EQU   ISTATCVT+384
ATCVLCNT EQU   ISTATCVT+772
ATCRNO   EQU   ISTATCVT+788
ATCSOPD  EQU   ISTATCVT+792
ATCSIPD  EQU   ISTATCVT+800
ATCSECST EQU   ISTATCVT+812
ATCSTAT2 EQU   ISTATCVT+818
ATCVTBAM EQU   ISTATCVT+908
@NM00066 EQU   ATCVTBAM+3
ATCAOSM  EQU   ISTATCVT+912
ATCGSRBQ EQU   ATCAOSM+4
ATCGSRBG EQU   ATCGSRBQ
ATCICAPP EQU   ATCAOSM+100
ATCLDAPP EQU   ATCAOSM+120
ATCDAPVT EQU   ATCAOSM+140
ATCCRA   EQU   ATCAOSM+280
ATCCRACN EQU   ATCCRA+4
ATCSRB   EQU   ATCAOSM+288
ATCSRBCN EQU   ATCSRB+4
ATCCRPL  EQU   ATCAOSM+296
ATCRPLCN EQU   ATCCRPL+4
ATCVTFLG EQU   ATCAOSM+392
ATCZFLAG EQU   ATCAOSM+588
ISTTIE   EQU   0
TIETIEA  EQU   ISTTIE+4
TIESNA   EQU   ISTTIE+8
TIERPHA  EQU   ISTTIE+12
ISTBIND  EQU   0
BINFMTY  EQU   ISTBIND
BINPRIP  EQU   ISTBIND+3
BINSECP  EQU   ISTBIND+4
BINCMNP  EQU   ISTBIND+5
BINBRAK  EQU   BINCMNP
BINBKTR  EQU   BINCMNP
BINCMNP2 EQU   ISTBIND+6
BINFMTRM EQU   BINCMNP2
BINTSU   EQU   ISTBIND+7
BINRPACE EQU   BINTSU+1
BINRUSZ  EQU   BINTSU+2
BINSRUSZ EQU   BINRUSZ
BINPRUSZ EQU   BINRUSZ+1
BINPRSVC EQU   ISTBIND+13
BINLUP   EQU   BINPRSVC
BINPSCHR EQU   BINPRSVC+1
RPLOF16  EQU   0
RPLRH3   EQU   RPLOF16
RPLBB    EQU   RPLRH3
RPLEB    EQU   RPLRH3
RPLCMD   EQU   RPLRH3
RPLCSI   EQU   RPLRH3
RPLSRTYP EQU   RPLOF16+1
RPLSTYPE EQU   RPLSRTYP
RPLRTYPE EQU   RPLSRTYP
RPLRRESP EQU   RPLRTYPE
RPLNFSYN EQU   RPLRTYPE
RPLCHN   EQU   RPLOF16+2
RPLLAST  EQU   RPLCHN
RPLONLY  EQU   RPLCHN
RPLVTFL1 EQU   RPLOF16+3
RPLVTFL2 EQU   RPLOF16+4
RPLPOSTV EQU   RPLVTFL2
RPLRESP  EQU   RPLVTFL2
RPLEX    EQU   RPLRESP
RPLNFME  EQU   RPLRESP
RPLRRN   EQU   RPLRESP
RPLCNTRL EQU   RPLOF16+5
RPLCNTDF EQU   RPLCNTRL
RPLDATA  EQU   RPLCNTDF
RPLCNCEL EQU   RPLCNTDF
RPLCHASE EQU   RPLCNTDF
RPLCNTDC EQU   RPLCNTRL+1
RPLRTR   EQU   RPLCNTDC
RPLLUS   EQU   RPLCNTDC
RPLSIGNL EQU   RPLCNTDC
RPLCNTSC EQU   RPLCNTRL+2
RPLSHUTD EQU   RPLCNTSC
RPLSHUTC EQU   RPLCNTSC
RPLRSHUT EQU   RPLCNTSC
RPLOF60  EQU   0
RPLOBSQ  EQU   RPLOF60+4
RPLIBSQ  EQU   RPLOF60+5
RPLSEQNO EQU   RPLOF60+6
CARRAY   EQU   0
MSGCOUNT EQU   0
ELEMENT  EQU   0
CHAIN    EQU   ELEMENT
INADR    EQU   ELEMENT+4
OUTCT    EQU   ELEMENT+8
INCT     EQU   ELEMENT+9
MSG      EQU   ELEMENT+10
BACKSAVE EQU   0
LASTCHN  EQU   0
$TRTBL   EQU   0
#EXIT    EQU   0
ISTRPL   EQU   0
RCAPTR   EQU   $RCA
BINLUP1  EQU   BINPSCHR
BINLUS   EQU   BINPSCHR
BINFMF1  EQU   BINLUS
BINRSV09 EQU   BINFMF1
BINDSPF1 EQU   BINLUS+2
BINMEDIA EQU   BINLUS+4
BINLUP2  EQU   BINPSCHR
BINLUP3  EQU   BINPSCHR
SVECC012 EQU   SVESC022
SVEIC00A EQU   SVEIC003
SVEIC004 EQU   SVEIC003
SVEIC005 EQU   SVEIC003
SVESC02A EQU   SVESC022
SVESC02B EQU   SVESC022
SVESC02D EQU   SVESC022
SVESC02E EQU   SVESC022
SVESC02F EQU   SVECC013
SVESC024 EQU   SVESC022
SVESC027 EQU   SVESC022
SVESC029 EQU   SVESC033
SVESC031 EQU   SVECC013
SVESC032 EQU   SVECC011
SVETC037 EQU   SVEIC003
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
BINRSV26 EQU   BINLUP3
BINRSV15 EQU   BINLUP2+10
BINPRESZ EQU   BINLUP2+9
BINRSV14 EQU   BINLUP2
BINRSV13 EQU   BINMEDIA
BINDISK  EQU   BINMEDIA
BINXCHNG EQU   BINMEDIA
BINCARD  EQU   BINMEDIA
BINDOCMT EQU   BINMEDIA
BINRSV17 EQU   BINDSPF1+1
BINTRNDS EQU   BINDSPF1
BINRSV12 EQU   BINDSPF1
BINVSDS  EQU   BINDSPF1
BINVTDS  EQU   BINDSPF1
BINHFDS  EQU   BINDSPF1
BININTR  EQU   BINDSPF1
BINRSV11 EQU   BINRSV09+1
BINXFPD  EQU   BINRSV09+1
BINCSDS  EQU   BINRSV09+1
BINQDSI  EQU   BINRSV09+1
BINRSV16 EQU   BINRSV09+1
BINARRR  EQU   BINRSV09
BINSIDS  EQU   BINRSV09
BINSAI   EQU   BINRSV09
BINSDSI  EQU   BINRSV09
BINKDDSI EQU   BINRSV09
BINPDIR  EQU   BINFMF1
BINCMPCT EQU   BINFMF1
BINDESTS EQU   BINFMF1
BINSLUS1 EQU   BINLUP1+6
BINPLUS1 EQU   BINLUP1+1
BINDSP1  EQU   BINLUP1
BINFMHS1 EQU   BINLUP1
@NM00094 EQU   RPLIBSQ
RPLIINV  EQU   RPLIBSQ
RPLINEG  EQU   RPLIBSQ
RPLIPOS  EQU   RPLIBSQ
RPLIIGN  EQU   RPLIBSQ
RPLIRSET EQU   RPLIBSQ
RPLITST  EQU   RPLIBSQ
RPLISET  EQU   RPLIBSQ
@NM00093 EQU   RPLOBSQ
RPLOINV  EQU   RPLOBSQ
RPLONEG  EQU   RPLOBSQ
RPLOPOS  EQU   RPLOBSQ
RPLOIGN  EQU   RPLOBSQ
RPLORSET EQU   RPLOBSQ
RPLOTST  EQU   RPLOBSQ
RPLOSET  EQU   RPLOBSQ
RPLIBSQV EQU   RPLOF60+2
RPLOBSQV EQU   RPLOF60
@NM00092 EQU   RPLCNTSC
RPLRQR   EQU   RPLCNTSC
RPLSTSN  EQU   RPLCNTSC
RPLCLEAR EQU   RPLCNTSC
RPLSDT   EQU   RPLCNTSC
@NM00091 EQU   RPLCNTDC
RPLBID   EQU   RPLCNTDC
@NM00090 EQU   RPLCNTDF
RPLQI    EQU   RPLCNTDF
RPLRELQ  EQU   RPLCNTDF
RPLQEC   EQU   RPLCNTDF
RPLQC    EQU   RPLCNTDF
@NM00089 EQU   RPLRESP
@NM00088 EQU   RPLPOSTV
RPLSCHED EQU   RPLPOSTV
@NM00087 EQU   RPLVTFL1
RPLAUTUS EQU   RPLVTFL1
RPLVTUSE EQU   RPLVTFL1
@NM00086 EQU   RPLVTFL1
@NM00085 EQU   RPLCHN
RPLMIDLE EQU   RPLCHN
RPLFIRST EQU   RPLCHN
@NM00084 EQU   RPLRTYPE
RPLDFASY EQU   RPLRTYPE
@NM00083 EQU   RPLSTYPE
RPLSRESP EQU   RPLSTYPE
@NM00082 EQU   RPLRH3
RPLCHREQ EQU   RPLRH3
BINUSE   EQU   ISTBIND+36
BINUSEL  EQU   ISTBIND+35
BINPRIM  EQU   ISTBIND+27
BINPRIML EQU   ISTBIND+26
BINRSV05 EQU   ISTBIND+25
BINLUTYP EQU   BINLUP
BINRSV27 EQU   BINLUP
BINRSV08 EQU   BINTSU+4
BINPRUSE EQU   BINPRUSZ
BINPRUSM EQU   BINPRUSZ
BINSRUSE EQU   BINSRUSZ
BINSRUSM EQU   BINSRUSZ
BINRPACM EQU   BINRPACE
BINRSV07 EQU   BINRPACE
BINRSV06 EQU   BINTSU
BINCONR  EQU   BINCMNP2
BINRCHN  EQU   BINCMNP2
BINMDIBK EQU   BINCMNP2
BINBKFS  EQU   BINCMNP2
BINRCVR  EQU   BINCMNP2
BINRSV04 EQU   BINCMNP
BINALT   EQU   BINCMNP
BINFMHD  EQU   BINCMNP
BINRSV03 EQU   BINCMNP
BINSSEB  EQU   BINSECP
BINSCMP  EQU   BINSECP
BINRSV02 EQU   BINSECP
BINSCHNR EQU   BINSECP
BINSMCH  EQU   BINSECP
BINSCHN  EQU   BINSECP
BINPSEB  EQU   BINPRIP
BINPCMP  EQU   BINPRIP
BINRSV01 EQU   BINPRIP
BINPCHNR EQU   BINPRIP
BINPMCH  EQU   BINPRIP
BINPCHN  EQU   BINPRIP
BINTS    EQU   ISTBIND+2
BINFM    EQU   ISTBIND+1
BINTYPE  EQU   BINFMTY
BINFMT   EQU   BINFMTY
TIEPTR2  EQU   TIERPHA
TIEPTR1  EQU   TIESNA
TIEGATE  EQU   TIETIEA
TIEREQ   EQU   ISTTIE+3
TIERETCD EQU   ISTTIE+2
TIELNGTH EQU   ISTTIE+1
TIETYPE  EQU   ISTTIE
ATCAOS   EQU   ISTATCVT+1584
ATCPOPAB EQU   ATCAOSM+640
ATCVIOPM EQU   ATCAOSM+636
ATCTPMMI EQU   ATCAOSM+632
ATCTPMPB EQU   ATCAOSM+600
ATCRSV88 EQU   ATCAOSM+596
ATCRPLCT EQU   ATCAOSM+594
ATCCRACT EQU   ATCAOSM+592
ATCSRBCT EQU   ATCAOSM+590
ATCRSV75 EQU   ATCAOSM+589
ATCRSV66 EQU   ATCZFLAG
ATCZF001 EQU   ATCZFLAG
ATCTPCP1 EQU   ATCAOSM+584
ATCTPCP0 EQU   ATCAOSM+580
ATCAICTN EQU   ATCAOSM+576
ATCZR01  EQU   ATCAOSM+572
ATCMPLTA EQU   ATCAOSM+568
ATCASCB  EQU   ATCAOSM+564
ATCAP86  EQU   ATCAOSM+560
ATCAP85  EQU   ATCAOSM+556
ATCAP84  EQU   ATCAOSM+552
ATCAP83  EQU   ATCAOSM+548
ATCAP82  EQU   ATCAOSM+544
ATCAP69  EQU   ATCAOSM+540
ATCAP66  EQU   ATCAOSM+536
ATCAP62  EQU   ATCAOSM+532
ATCAPC59 EQU   ATCAOSM+528
ATCAP56  EQU   ATCAOSM+524
ATCAP55  EQU   ATCAOSM+520
ATCRCFY0 EQU   ATCAOSM+516
ATCAP41  EQU   ATCAOSM+512
ATCAPC25 EQU   ATCAOSM+508
ATCAP23  EQU   ATCAOSM+504
ATCTPSPB EQU   ATCAOSM+472
ATCTRMPB EQU   ATCAOSM+440
ATCAPBE  EQU   ATCAOSM+436
ATCPSTA  EQU   ATCAOSM+432
ATCSMABF EQU   ATCAOSM+428
ATCSMAPR EQU   ATCAOSM+424
ATCTPWQA EQU   ATCAOSM+420
ATCSMAID EQU   ATCAOSM+416
ATCSMARA EQU   ATCAOSM+412
ATCCACXA EQU   ATCAOSM+408
ATCZLAAB EQU   ATCAOSM+404
ATCATA10 EQU   ATCAOSM+400
ATCHLTCB EQU   ATCAOSM+396
@NM00068 EQU   ATCVTFLG
ATCVTACT EQU   ATCVTFLG
ATCRPT40 EQU   ATCAOSM+388
ATCRPT39 EQU   ATCAOSM+384
ATCRPT38 EQU   ATCAOSM+380
ATCRPT37 EQU   ATCAOSM+376
ATCRPT36 EQU   ATCAOSM+372
ATCRPT35 EQU   ATCAOSM+368
ATCRPT34 EQU   ATCAOSM+364
ATCRPT33 EQU   ATCAOSM+360
ATCRPT32 EQU   ATCAOSM+356
ATCRPT31 EQU   ATCAOSM+352
ATCRPT30 EQU   ATCAOSM+348
ATCRPT29 EQU   ATCAOSM+344
ATCRPT28 EQU   ATCAOSM+340
ATCRPT27 EQU   ATCAOSM+336
ATCRPT26 EQU   ATCAOSM+332
ATCRPT25 EQU   ATCAOSM+328
ATCRPT24 EQU   ATCAOSM+324
ATCRPT23 EQU   ATCAOSM+320
ATCRPT22 EQU   ATCAOSM+316
ATCRPT21 EQU   ATCAOSM+312
ATCRPT20 EQU   ATCAOSM+308
ATCRPT19 EQU   ATCAOSM+304
ATCRPLAC EQU   ATCRPLCN+2
ATCRPLRC EQU   ATCRPLCN
ATCCRPLQ EQU   ATCCRPL
ATCSRBAC EQU   ATCSRBCN+2
ATCSRBRC EQU   ATCSRBCN
ATCSRBQ  EQU   ATCSRB
ATCCRAAC EQU   ATCCRACN+2
ATCCRARC EQU   ATCCRACN
ATCCRAQ  EQU   ATCCRA
ATCRPT12 EQU   ATCAOSM+276
ATCDMAPP EQU   ATCAOSM+272
ATCAP38  EQU   ATCAOSM+268
ATCAP37  EQU   ATCAOSM+264
ATCZDFJ0 EQU   ATCAOSM+260
ATCAP51  EQU   ATCAOSM+256
ATCZPAB2 EQU   ATCAOSM+224
ATCZPAB1 EQU   ATCAOSM+192
ATCZLFVT EQU   ATCAOSM+188
ATCZLPVT EQU   ATCAOSM+184
ATCZDVTX EQU   ATCAOSM+180
ATCZDVTA EQU   ATCAOSM+176
ATCZDVT9 EQU   ATCAOSM+172
ATCZDVT8 EQU   ATCAOSM+168
ATCZDVT7 EQU   ATCAOSM+164
ATCRSV56 EQU   ATCDAPVT+22
ATCDAPDG EQU   ATCDAPVT+20
ATCDXCEA EQU   ATCDAPVT+16
ATCDCEA  EQU   ATCDAPVT+12
ATCDPCIA EQU   ATCDAPVT+8
ATCDSIOA EQU   ATCDAPVT+4
ATCDEOEA EQU   ATCDAPVT
ATCZLAEA EQU   ATCLDAPP+16
ATCZLCEA EQU   ATCLDAPP+12
ATCRSV17 EQU   ATCLDAPP+8
ATCSMFRR EQU   ATCLDAPP+4
ATCCDTID EQU   ATCLDAPP
ATCZAEA  EQU   ATCICAPP+16
ATCZCEA  EQU   ATCICAPP+12
ATCCDTCB EQU   ATCICAPP+8
ATCZSIOA EQU   ATCICAPP+4
ATCCDRPH EQU   ATCICAPP
ATCAP65  EQU   ATCAOSM+96
ATCZDVT6 EQU   ATCAOSM+92
ATCZDVT4 EQU   ATCAOSM+88
ATCZDVT3 EQU   ATCAOSM+84
ATCZDVT1 EQU   ATCAOSM+80
ATCICNCB EQU   ATCAOSM+76
ATCZPSVT EQU   ATCAOSM+72
ATCZFSVT EQU   ATCAOSM+68
ATCAP64  EQU   ATCAOSM+64
ATCAP63  EQU   ATCAOSM+60
ATCAP61  EQU   ATCAOSM+56
ATCAP58  EQU   ATCAOSM+52
ATCAP57  EQU   ATCAOSM+48
ATCAP54  EQU   ATCAOSM+44
ATCAP53  EQU   ATCAOSM+40
ATCAP52  EQU   ATCAOSM+36
ATCAP34  EQU   ATCAOSM+32
ATCAP32  EQU   ATCAOSM+28
ATCAP31  EQU   ATCAOSM+24
ATCAP12  EQU   ATCAOSM+20
ATCAP11  EQU   ATCAOSM+16
ATCCMTCB EQU   ATCAOSM+12
ATCPRPH  EQU   ATCAOSM+8
ATCGSRBF EQU   ATCGSRBG
ATCSRBRT EQU   ATCAOSM
@NM00067 EQU   @NM00066
ATCVTMAB EQU   @NM00066
@NM00065 EQU   ATCVTBAM
ATCVDLOK EQU   ISTATCVT+904
ATCVFPAB EQU   ISTATCVT+872
ATCVDPAB EQU   ISTATCVT+840
ATCIOECB EQU   ISTATCVT+836
ATCINCW3 EQU   ISTATCVT+832
ATCMODTB EQU   ISTATCVT+828
ATCUSSPT EQU   ISTATCVT+824
ATCSRTAB EQU   ISTATCVT+820
@NM00064 EQU   ISTATCVT+819
@NM00063 EQU   ATCSTAT2
ATCTRSMS EQU   ATCSTAT2
ATCTRLOK EQU   ATCSTAT2
ATCTRPSS EQU   ATCSTAT2
ATCTRESC EQU   ATCSTAT2
ATCTRAPI EQU   ATCSTAT2
ATCNMCTR EQU   ISTATCVT+816
ATCSEC51 EQU   ATCSECST
ATCSEC40 EQU   ATCSIPD+8
ATCSEC30 EQU   ATCSIPD+4
ATCSEC21 EQU   ATCSIPD
ATCSEC10 EQU   ATCSOPD+4
ATCSEC01 EQU   ATCSOPD
ATCPOIA  EQU   ATCRNO+1
@NM00062 EQU   ATCRNO
ATCPODVT EQU   ISTATCVT+784
ATCS49XL EQU   ISTATCVT+780
ATCS49XI EQU   ISTATCVT+776
ATCLCLCT EQU   ATCVLCNT+2
ATCRNCNT EQU   ATCVLCNT
ATCCFEAD EQU   ISTATCVT+768
ATCPTR00 EQU   ISTATCVT+736
ATCRSV10 EQU   ISTATCVT+704
ATCTACB  EQU   ISTATCVT+700
ATCVTINM EQU   ISTATCVT+696
ATCTCLIM EQU   ISTATCVT+692
ATCTCLOM EQU   ISTATCVT+688
ATCVTIPB EQU   ISTATCVT+656
ATCTCIPB EQU   ISTATCVT+624
ATCTIPAB EQU   ISTATCVT+592
ATCOCCCB EQU   ISTATCVT+588
ATCOCCOB EQU   ISTATCVT+584
ATCCDLAD EQU   ISTATCVT+580
ATCCCLAD EQU   ISTATCVT+576
ATCDLRPB EQU   ISTATCVT+544
ATCPGPAB EQU   ISTATCVT+512
ATCVPAB1 EQU   ISTATCVT+480
ATCRSV97 EQU   ISTATCVT+476
ATCRDTLK EQU   ISTATCVT+472
ATCVOCLK EQU   ISTATCVT+468
ATCCDFDN EQU   ISTATCVT+464
ATCCDFIN EQU   ISTATCVT+460
ATCDVTLK EQU   ISTATCVT+456
ATCAP36  EQU   ISTATCVT+452
ATCAP35  EQU   ISTATCVT+448
ATCAP33  EQU   ISTATCVT+444
ATCRSV99 EQU   ISTATCVT+440
ATCONFIG EQU   ISTATCVT+432
ATCNODDS EQU   ISTATCVT+428
ATCNODEL EQU   ISTATCVT+420
ATCRSV69 EQU   ISTATCVT+416
ATCAPCR5 EQU   ISTATCVT+412
ATCLDECB EQU   ISTATCVT+408
ATCLDNCS EQU   ISTATCVT+404
ATCCDPTR EQU   ISTATCVT+400
ATCADEL  EQU   ISTATCVT+396
ATCTODVT EQU   ISTATCVT+392
ATCDEBCH EQU   ISTATCVT+388
ATCHBSIZ EQU   ATCHPGM+2
ATCHBFNO EQU   ATCHPGM
ATCCRME  EQU   ISTATCVT+380
ATCRVCHS EQU   ISTATCVT+372
ATCECTLP EQU   ISTATCVT+368
ATCZDVTB EQU   ISTATCVT+364
ATCECPRT EQU   ISTATCVT+360
ATCVTLOD EQU   ISTATCVT+356
ATCTRPAB EQU   ISTATCVT+352
ATCMSGM  EQU   ISTATCVT+348
ATCMSGP  EQU   ISTATCVT+344
ATCEPT   EQU   ISTATCVT+340
ATCDVT   EQU   ISTATCVT+336
ATCTRCPT EQU   ISTATCVT+332
ATCDVLOD EQU   ISTATCVT+328
ATCALERT EQU   ISTATCVT+324
ATCEPA   EQU   ISTATCVT+320
ATCSAF   EQU   ISTATCVT+318
ATCXRANG EQU   ISTATCVT+317
ATCLAST  EQU   ATCSHRFG
ATCSHRTN EQU   ISTATCVT+308
ATCUEP   EQU   ISTATCVT+304
ATCOCRT  EQU   ISTATCVT+300
ATCCSMA  EQU   ATCCSMR
ATCESC02 EQU   ISTATCVT+292
ATCESC01 EQU   ISTATCVT+288
ATCCDFND EQU   ISTATCVT+284
ATCCDDEL EQU   ISTATCVT+280
ATCCDADD EQU   ISTATCVT+276
ATCMNT   EQU   ISTATCVT+272
ATCRSV16 EQU   ISTATCVT+270
ATCMAXID EQU   ISTATCVT+269
ATCMSGSP EQU   ATCCOM+268
ATCCIDM  EQU   ATCCOM+266
ATCACTRM EQU   ATCCOM+264
ATCNERAP EQU   ATCCOM+260
ATCNESAL EQU   ATCCOM+256
ATCRCC65 EQU   ATCCOM+252
ATCRCC26 EQU   ATCCOM+248
ATCRCC63 EQU   ATCCOM+244
ATCRSV11 EQU   ATCCOM+242
ATCVTMID EQU   ATCCOM+240
ATCAPOST EQU   ATCCOM+236
ATCNERFN EQU   ATCCOM+232
ATCNERNE EQU   ATCCOM+228
ATCNERCV EQU   ATCCOM+224
ATCNERST EQU   ATCCOM+220
ATCDCC61 EQU   ATCCOM+216
ATCDCC60 EQU   ATCCOM+212
ATCSRTDF EQU   ATCCOM+208
ATCSRTAD EQU   ATCCOM+204
ATCFIRA  EQU   ATCCOM+200
ATCSMBQ  EQU   ATCCOM+196
ATCSMRC  EQU   ATCCOM+192
ATCSMRS  EQU   ATCCOM+188
ATCSMQU  EQU   ATCCOM+184
ATCSMRQ  EQU   ATCCOM+180
ATCACDA  EQU   ATCCOM+176
ATCSTMA  EQU   ATCCOM+172
ATCFRSTR EQU   ATCCOM+168
ATCGTSTR EQU   ATCCOM+164
ATCREADA EQU   ATCCOM+160
ATCALOAD EQU   ATCCOM+156
ATCBLDLA EQU   ATCCOM+152
ATCFBRPH EQU   ATCCOM+148
ATCBFTRC EQU   ATCCOM+144
ATCTPBUF EQU   ATCTHTRC
ATCREMOV EQU   ATCCOM+136
ATCADD   EQU   ATCCOM+132
ATCBPDA  EQU   ATCCOM+128
ATCDVTPT EQU   ATCCOM+124
ATCFEPT  EQU   ATCCOM+120
ATCFDVT  EQU   ATCCOM+116
ATCCONFT EQU   ATCCOM+112
ATCPTCHA EQU   ATCCOM+108
ATCAUTHA EQU   ATCCOM+104
ATCACCTA EQU   ATCCOM+100
ATCRDTH  EQU   ATCCOM+96
ATCFRSCH EQU   ATCCOM+92
ATCFSB   EQU   ATCCOM+88
ATCHLTMS EQU   ATCCOM+84
ATCECPRM EQU   ATCCOM+80
ATCECNET EQU   ATCCOM+76
ATCECOPC EQU   ATCCOM+72
ATCVPARM EQU   ATCCOM+68
ATCECVRQ EQU   ATCCOM+64
ATCECSES EQU   ATCCOM+60
ATCOCHA  EQU   ATCCOM+56
ATCDSPLQ EQU   ATCCOM+52
ATCECDSP EQU   ATCCOM+48
ATCVARYQ EQU   ATCCOM+44
ATCECVRY EQU   ATCCOM+40
ATCHALTQ EQU   ATCCOM+36
ATCECHLT EQU   ATCCOM+32
ATCMODQ  EQU   ATCCOM+28
ATCECMOD EQU   ATCCOM+24
ATCASCHD EQU   ATCCOM+20
ATCSRT   EQU   ATCCOM+16
ATCRDT   EQU   ATCCOM+12
ATCDCFRR EQU   ATCCOM+8
ATCAPI   EQU   ATCCOM+4
ATCRSV04 EQU   ATCSTAT4
ATCVTTRC EQU   ATCSTAT4
ATCNCSD  EQU   ATCSTAT4
ATCMTST  EQU   ATCSTAT4
ATCTPRT  EQU   ATCSTAT4
ATCPRTAT EQU   ATCSTAT4
@NM00061 EQU   ATCPOFLG
ATCPOUNS EQU   ATCPOFLG
ATCHSDMF EQU   ATCSTFLG
@NM00060 EQU   ATCSTAT1
ATCMDHLT EQU   ATCSTAT1
ATCINHLT EQU   ATCSTAT1
ATCNETSL EQU   ATCSTAT1
ATCQKHLT EQU   ATCSTAT1
ATCSNHLT EQU   ATCSTAT1
ATCACTIV EQU   ATCSTAT1
ATCSTART EQU   ATCSTAT1
RPHNEXPO EQU   ISTRPH+104
RPHSAV16 EQU   RPHWORK+60
RPHSAV15 EQU   RPHWORK+56
RPHSAV14 EQU   RPHWORK+52
RPHSAV13 EQU   RPHWORK+48
RPHSAV12 EQU   RPHWORK+44
RPHSAV11 EQU   RPHWORK+40
RPHSAV10 EQU   RPHWORK+36
RPHSAVE9 EQU   RPHWORK+32
RPHSAVE8 EQU   RPHWORK+28
RPHSAVE7 EQU   RPHWORK+24
RPHSAVE6 EQU   RPHWORK+20
RPHSAVE5 EQU   RPHWORK+16
RPHSAVE4 EQU   RPHWORK+12
RPHSAVE3 EQU   RPHWORK+8
RPHSAVE2 EQU   RPHWORK+4
RPHSHALF EQU   RPHSAVE1+2
RPHSBIT8 EQU   RPHSBITS
RPHSBIT7 EQU   RPHSBITS
RPHSBIT6 EQU   RPHSBITS
RPHSBIT5 EQU   RPHSBITS
RPHSBIT4 EQU   RPHSBITS
RPHSBIT3 EQU   RPHSBITS
RPHSBIT2 EQU   RPHSBITS
RPHSBIT1 EQU   RPHSBITS
RPHSBYTE EQU   RPHSAVE1
RPHPABQP EQU   RPHPABQA+1
RPHPABFG EQU   RPHPABQA
RPHCRR   EQU   ISTRPH+32
RPHSRP34 EQU   RPHSRPRM+2
RPHSRP12 EQU   RPHSRPRM
RPHWEGT  EQU   RPHCSPA
RPHMAJCB EQU   ISTRPH+21
RPHPABOF EQU   ISTRPH+20
RPHRESUM EQU   RPHRESMA+1
RPHRSV01 EQU   RPHWPFLG
RPHPURGE EQU   RPHWPFLG
RPHPT    EQU   RPHWPFLG
RPHWT    EQU   RPHWPFLG
RPHRSKEY EQU   RPHWPFLG
RPHDVTA  EQU   ISTRPH+12
RPHTIK   EQU   RPHTSKID+3
@NM00059 EQU   RPHTSKID
RPHRPHAP EQU   RPHRPHA+1
@NM00058 EQU   RPHRPHA
RPHGATE  EQU   RPHRPHA
@NM00057 EQU   RPHFLGB
RPHRLCRA EQU   RPHFLGB
RPHNRSAV EQU   RPHFLGB
RPHPGCMP EQU   RPHFLGB
RPHFBAPS EQU   RPHFLGB
RPHBSSP  EQU   RPHFLGB
RPHLOCK  EQU   RPHFLGB
RPHFNFLG EQU   RPHFSTLC
RPHMLTCP EQU   RPHFLAGS
RPHSMCLR EQU   RPHFLAGS
RPHSMTYP EQU   RPHFLAGS
RPHSMQ   EQU   RPHFLAGS
RPHAUTEX EQU   RPHAPTYP
RPHSPGIN EQU   RPHFLAGS
RPHOGIND EQU   RPHFLAGS
RPHLNGTH EQU   RPHCNTL+1
RPHTYPE  EQU   RPHCNTL
DYPPAB   EQU   ISTDYPAB+16
DYPRSV01 EQU   ISTDYPAB+12
DYPTSKID EQU   ISTDYPAB+8
DYPCHAIN EQU   ISTDYPAB+4
DYPFLGS  EQU   ISTDYPAB+2
DYPLNGTH EQU   ISTDYPAB+1
DYPTYPE  EQU   ISTDYPAB
LOKXCL   EQU   @NM00055
LOKPRY   EQU   @NM00055
@NM00056 EQU   @NM00055
@NM00054 EQU   LOKCHNG
LOKCT    EQU   ISTLOK
PABRPHA  EQU   PABRPHFG+1
PABNODQ  EQU   PABFLAGS
PABINHBT EQU   PABFLAGS
PABERLOK EQU   PABERRLK
PABSSN   EQU   PABFLAGS
PABDYNAM EQU   PABFLAGS
PABNORPR EQU   PABFLAGS
PABPRIOR EQU   PABFLAGS
PABAPYP  EQU   PABFLAGS
PABDVTA  EQU   ISTPAB+9
PABOFFST EQU   ISTPAB+8
PABCHNGP EQU   PABCHAIN+1
PABRSV02 EQU   PABCHAIN
PABDELAY EQU   PABCHAIN
PABRUNNG EQU   PABCHAIN
PABRESET EQU   PABCHAIN
PABUNCON EQU   PABCHAIN
PABCDP   EQU   PABCHAIN
PABRESCH EQU   PABCHAIN
PABCHNG  EQU   PABCHAIN
PABWEQP  EQU   PABWEQA+1
PABRSV01 EQU   PABWEQA
PABWEQG  EQU   PABWEQA
ISTPDAVP EQU   ISTAVT+40
ISTAVR01 EQU   ISTAVT+38
ISTVTTP  EQU   ISTAVT+36
ISTAGTWT EQU   ISTAVT+34
ISTATRT  EQU   ISTAVT+32
ISTARID  EQU   ISTAVT+30
ISTX1    EQU   ISTAVT+29
ISTPHNM  EQU   ISTAVT+24
ISTAPSEX EQU   ISTAVT+20
ISTVTTIK EQU   ISTAVT+18
AVTASID  EQU   ISTAVT+16
ISTAPSTA EQU   ISTAVT+12
ISTAS53  EQU   ISTAVT+8
ISTAHIP  EQU   ISTAS49
ISTACVT  EQU   ISTAVT
RPLSIGDA EQU   RPLVTEXT+32
RPLSAV13 EQU   RPLVTEXT+28
RPLUSNSO EQU   RPLOSENS+2
RPLSSMO  EQU   RPLSSNSO+1
@NM00081 EQU   RPLSSEO
RPLRRO   EQU   RPLSSEO
RPLFIO   EQU   RPLSSEO
RPLSTATO EQU   RPLSSEO
RPLCPMO  EQU   RPLSSEO
@NM00080 EQU   RPLSSEO
@NM00079 EQU   RPLOPT12
@NM00078 EQU   RPLOPT12
@NM00077 EQU   RPLOPT12
RPLNIBTK EQU   RPLOPT12
RPLTRUNC EQU   RPLOPT12
RPLKEEP  EQU   RPLOPT12
@NM00076 EQU   RPLOPT12
RPLRSVE8 EQU   RPLOPT11
RPLRSVE7 EQU   RPLOPT11
RPLRSVE6 EQU   RPLOPT11
RPLRSVE5 EQU   RPLOPT11
RPLRSVE4 EQU   RPLOPT11
RPLSTOP  EQU   RPLOPT11
RPLSTART EQU   RPLOPT11
RPLQUIES EQU   RPLOPT11
RPLRSVI6 EQU   RPLOPT10
RPLRSVI5 EQU   RPLOPT10
RPLRSVI4 EQU   RPLOPT10
RPLRSVI3 EQU   RPLOPT10
RPLRSVI2 EQU   RPLOPT10
RPLSPARM EQU   RPLOPT10
RPLDSPLY EQU   RPLOPT10
RPLBSCID EQU   RPLOPT10
RPLTOPL  EQU   RPLOPT9
RPLCIDE  EQU   RPLOPT9
RPLRNNM  EQU   RPLOPT9
RPLAPPST EQU   RPLOPT9
RPLCOUNT EQU   RPLOPT9
RPLTERMS EQU   RPLOPT9
RPLDEVCH EQU   RPLOPT9
RPLLOGON EQU   RPLOPT9
RPLESR2  EQU   RPLUSNSI+1
RPLESR1  EQU   RPLUSNSI
@NM00075 EQU   RPLSSEI
RPLRRI   EQU   RPLSSEI
RPLFII   EQU   RPLSSEI
RPLSTATI EQU   RPLSSEI
RPLCPMI  EQU   RPLSSEI
RPLPATHI EQU   RPLSSEI
RPLARCLN EQU   RPLVTEXT+8
RPLAAREA EQU   RPLVTEXT
RPLERMSA EQU   RPLCOMN+72
RPLEMLEN EQU   RPLCOMN+70
RPLACTIV EQU   RPLCOMN+69
RPLBRANC EQU   RPLEXTD1
RPLNIB   EQU   RPLEXTD1
@NM00074 EQU   RPLEXTD1
RPLEXIT  EQU   RPLEXTD1
RPLNEXIT EQU   RPLEXTD1
RPLEXSCH EQU   RPLEXTD1
RPLDDDD  EQU   RPLRBAR+4
@NM00073 EQU   RPLRBAR+3
@NM00072 EQU   RPLAIXID
RPLAXPKP EQU   RPLAIXID
RPLAIXPC EQU   RPLRBAR
RPLRSV88 EQU   RPLOPT8
RPLUNCON EQU   RPLOPT8
RPLACTV  EQU   RPLOPT8
RPLSESS  EQU   RPLOPT8
RPLPEND  EQU   RPLOPT8
RPLODPRM EQU   RPLOPT8
RPLODACP EQU   RPLOPT8
RPLODACQ EQU   RPLOPT8
RPLRSV78 EQU   RPLOPT7
RPLTCRNO EQU   RPLOPT7
RPLRLSOP EQU   RPLOPT7
RPLTPOST EQU   RPLOPT7
RPLQOPT  EQU   RPLOPT7
RPLCNIMM EQU   RPLCNOPT
RPLCNANY EQU   RPLCNOPT
RPLCNALL EQU   RPLCNOPT
RPLRSV68 EQU   RPLOPT6
RPLRSV67 EQU   RPLOPT6
RPLLOCK  EQU   RPLOPT6
RPLNCOND EQU   RPLOPT6
RPLCOND  EQU   RPLOPT6
RPLEOT   EQU   RPLUNTYP
RPLEOM   EQU   RPLUNTYP
RPLEOB   EQU   RPLUNTYP
RPLWROPT EQU   RPLOPT5
RPLNODE  EQU   RPLOPT5
RPLERACE EQU   RPLWRTYP
RPLEAU   EQU   RPLWRTYP
RPLNERAS EQU   RPLWRTYP
RPLPSOPT EQU   RPLOPT5
@NM00071 EQU   RPLOPT5
RPLDLGIN EQU   RPLOPT5
RPLCHAIN EQU   RPLNXTRP
RPLBOP   EQU   RPLOPT4
@NM00070 EQU   RPLOPT4
RPLMKFRM EQU   RPLOPT4
RPLENDTR EQU   RPLOPT4
RPLALIGN EQU   RPLOPT3
RPLFMT   EQU   RPLOPT3
RPLFLD   EQU   RPLOPT3
RPLVFY   EQU   RPLOPT3
RPLBLK   EQU   RPLOPT3
RPLSFORM EQU   RPLOPT3
RPLEODS  EQU   RPLOPT3
RPLNSP   EQU   RPLOPT2
RPLUPD   EQU   RPLOPT2
@NM00069 EQU   RPLOPT2
RPLLRD   EQU   RPLOPT2
RPLBWD   EQU   RPLOPT2
RPLCNV   EQU   RPLOPT2
RPLADD   EQU   RPLADR
RPLKEY   EQU   RPLOPT2
RPLECBIN EQU   RPLECBSW
RPLGEN   EQU   RPLOPT1
RPLKGE   EQU   RPLOPT1
RPLASY   EQU   RPLOPT1
RPLSKP   EQU   RPLOPT1
RPLSEQ   EQU   RPLOPT1
RPLDIR   EQU   RPLOPT1
RPLLOC   EQU   RPLOPT1
RPLDAF   EQU   RPLARG+2
RPLSAF   EQU   RPLARG
RPLTCBPT EQU   RPLCOMN+28
RPLDACB  EQU   RPLCOMN+24
RPLCCHAR EQU   RPLCOMN+20
RPLSTRID EQU   RPLCOMN+18
RPLKEYL  EQU   RPLKEYLE
RPLRDSOH EQU   RPLFDB3
RPLRLG   EQU   RPLFDB3
RPLLGFRC EQU   RPLFDB3
RPLREOM  EQU   RPLFDB3
RPLREOB  EQU   RPLFDB3
RPLSV32  EQU   RPLFDB3
RPLUINPT EQU   RPLFDB3
RPLSTSAV EQU   RPLFDB2
RPLCUERR EQU   RPLFDB2
RPLDLGFL EQU   RPLFDB2
RPLIOERR EQU   RPLFDB2
RPLDVUNS EQU   RPLFDB2
RPLATND  EQU   RPLFDB2
RPLRVID  EQU   RPLFDB2
RPLERLK  EQU   RPLFDB2
RPLERREG EQU   RPLRTNCD
RPLSTAT  EQU   RPLFDBWD
RPLPOST  EQU   RPLECB
RPLWAIT  EQU   RPLECB
RPLPLHPT EQU   RPLCOMN+4
RPLLEN2  EQU   RPLLEN
RPLSTYP  EQU   RPLIDWD+1
RPLID    EQU   RPLIDWD
SVECC010 EQU   TOLTEPWA+3952
SVETC035 EQU   TOLTEPWA+3880
SVESC030 EQU   TOLTEPWA+3808
SVESC020 EQU   TOLTEPWA+3664
SVEIC002 EQU   TOLTEPWA+3520
SVECC014 EQU   TOLTEPWA+3376
SVESC120 EQU   TOLTEPWA+3304
SVESC025 EQU   TOLTEPWA+3088
@NM00053 EQU   TOLTEPWA+2980
@NM00052 EQU   TOLTEPWA+2976
$R13PR3  EQU   TOLTEPWA+2972
$CEINT2  EQU   TOLTEPWA+2968
$CEINT1  EQU   TOLTEPWA+2964
$MSGGET  EQU   TOLTEPWA+2960
$ACQLIST EQU   TOLTEPWA+2956
$R4SAVE1 EQU   TOLTEPWA+2952
$CLSISS  EQU   TOLTEPWA+2950
$CLSCNT  EQU   TOLTEPWA+2948
$CUTABLE EQU   TOLTEPWA+2868
$BUFSZ2  EQU   TOLTEPWA+2864
$RESID2  EQU   TOLTEPWA+2860
$OLTCCW2 EQU   TOLTEPWA+2856
$ENDBFR2 EQU   TOLTEPWA+2852
$1STBFR2 EQU   TOLTEPWA+2848
$TECB2   EQU   TOLTEPWA+2844
$BUFSZ1  EQU   TOLTEPWA+2840
$RESID1  EQU   TOLTEPWA+2836
$OLTCCW1 EQU   TOLTEPWA+2832
$ENDBFR1 EQU   TOLTEPWA+2828
$1STBFR1 EQU   TOLTEPWA+2824
$TECB1   EQU   TOLTEPWA+2820
$WAITIME EQU   TOLTEPWA+2816
$TRTN#   EQU   TOLTEPWA+2815
$WIODEV  EQU   TOLTEPWA+2814
$RQSTSZE EQU   TOLTEPWA+2812
$RQSTPTR EQU   TOLTEPWA+2808
$R4SAVE  EQU   TOLTEPWA+2804
$PARTADR EQU   TOLTEPWA+2800
$TBSDATA EQU   TOLTEPWA+2796
$CTWIDTH EQU   TOLTEPWA+2795
$CTLINE  EQU   TOLTEPWA+2794
$APWIDTH EQU   TOLTEPWA+2793
$APLINE  EQU   TOLTEPWA+2792
$INDEX   EQU   $IMITX
$UMXX    EQU   @NM00051+14
$NSXX    EQU   @NM00051+12
$ATACNT  EQU   $NSCNT
$CTR     EQU   @NM00051+8
$ATAPTR  EQU   $NSPTR
$DDRPTR  EQU   @NM00051
$DTORESP EQU   TOLTEPWA+2712
$APNAME  EQU   TOLTEPWA+2704
$24SYMNE EQU   $24CATMG+4
$24DEVAD EQU   $24CATMG
$24RTN#  EQU   $24FEMSG+8
$ESECTID EQU   $24FEMSG
$24FLGS  EQU   TOLTEPWA+2680
$24SAVE2 EQU   TOLTEPWA+2676
$24SAVE1 EQU   TOLTEPWA+2672
$24UNADR EQU   TOLTEPWA+2668
$24SAV13 EQU   TOLTEPWA+2664
$24RETCD EQU   TOLTEPWA+2663
$MACID   EQU   TOLTEPWA+2661
$CSPARE  EQU   $CFLGS
$C2WAY   EQU   $CFLGS
$CINCT   EQU   $CCOMDAT+12
$CINADR  EQU   $CCOMDAT+8
$COUTCT  EQU   $CCOMDAT+4
$COUTAD  EQU   $CCOMDAT
ROOTLOC  EQU   TOLTEPWA+2640
$WORK    EQU   TOLTEPWA+2376
$EXTA    EQU   TOLTEPWA+2320
$PASSONA EQU   TOLTEPWA+2264
$INBUFR  EQU   TOLTEPWA+2104
$BUFFER  EQU   TOLTEPWA+1976
$TLTRPL3 EQU   TOLTEPWA+1856
$SLTBL   EQU   TOLTEPWA+1468
$CDEVPT  EQU   TOLTEPWA+1466
$DEVCNTS EQU   TOLTEPWA+1464
$FEEDBCK EQU   $DEVTBLE+66
$WTISUED EQU   $DEVFLG4
$EXIOISD EQU   $DEVFLG4
$REMWRIT EQU   $DEVFLG4
$REMDONE EQU   $DEVFLG4
$2NDUSED EQU   $DEVFLG4
$1STUSED EQU   $DEVFLG4
$IGLXIFB EQU   $DEVFLG4
$EXIOLV3 EQU   $DEVFLG4
@NM00050 EQU   $DEVFLG5
$OPNDFAL EQU   $DEVFLG5
$ACQNCB  EQU   $DEVFLG5
$REMOTE  EQU   $DEVFLG5
$ENDNODE EQU   $DEVFLG5
$LINENME EQU   $RNINFO
$DVCOL   EQU   $LDNCBPT+2
$DVROW   EQU   $LDNCBPT
$NCSPLP  EQU   $DEVTBLE+44
$DVLN    EQU   $SSCPDAF
$DAF     EQU   $DEVSESP+4
$VARYPAB EQU   $DEVSESP
$SYSMN   EQU   $DEVTBLE+28
@NM00049 EQU   $DEVFLG3
$CLRSNT  EQU   $DEVFLG3
$OLTERR  EQU   $DEVFLG3
$SRTEST  EQU   $DEVFLG3
$POLLREQ EQU   $DEVFLG3
$ACQRED  EQU   $DEVFLG3
$NOTDEV  EQU   $DEVFLG3
$CEINTRP EQU   $DEVFLG2
$TESTMDE EQU   $DEVFLG2
$DEVALOC EQU   $DEVFLG2
$ALLDATA EQU   $DEVFLG2
$ENDCNTL EQU   $DEVFLG2
$CTLDEV  EQU   $DEVFLG2
$NOCDS   EQU   $DEVFLG2
$DATAIN  EQU   $DEVFLG2
$PRIMARY EQU   $DEVFLG1
$DEVACT  EQU   $DEVFLG1
$DVLGMDE EQU   $ATTNEXP
$DVSPRM  EQU   $EVNCPLT
$GRABBED EQU   $DEVFLG1
$CATASTR EQU   $DEVFLG1
$LETGO   EQU   $DEVFLG1
$EXTDEV  EQU   $DEVCDS+11
@NM00048 EQU   $DEVSDCF
$NOTPRIM EQU   $DEVSDCF
@NM00047 EQU   $DEVCDSF
@NM00046 EQU   $DEVCDSF
@NM00045 EQU   $DEVCDSF
$CDSNAME EQU   $DEVCDSF
$EXTRN   EQU   $DEVCDSF
$CEVOLUM EQU   $DEVCDSF
$SHARD   EQU   $DEVCDSF
$DEVFPM  EQU   $DEVCDSF
$DEVCNT  EQU   $DEVCDS+8
$DEVTYPE EQU   $DEVFEAT+3
$DEVCLAS EQU   $DEVFEAT+2
$DEVMOD  EQU   $DEVFEAT
$DEVRDGT EQU   @NM00043+1
$DEVCTLU EQU   @NM00043+1
$DEVCHAN EQU   @NM00043
@NM00044 EQU   @NM00043
$CTINDX  EQU   $DEVUNAD
@NM00042 EQU   $COMMFLG+15
@NM00041 EQU   $COMMFLG+14
@NM00040 EQU   $COMMFLG+13
@NM00039 EQU   $COMMFLG+12
@NM00038 EQU   $FLAG12
$VARYINP EQU   $FLAG12
$ENDTEST EQU   $FLAG12
$VRYHRD  EQU   $FLAG12
$VRYSFT  EQU   $FLAG12
$OPTMSG  EQU   $FLAG12
@NM00037 EQU   $COMMFLG+10
@NM00036 EQU   $COMMFLG+9
@NM00035 EQU   $COMMFLG+8
$TCECM   EQU   $FLAG8
$VS2     EQU   $FLAG8
$VS1     EQU   $FLAG8
$EDOS    EQU   $FLAG8
@NM00034 EQU   $FLAG8
@NM00033 EQU   $FLAG8
$RCVMSG  EQU   $FLAG7
$RCVRFLG EQU   $FLAG7
$LDOIS   EQU   $FLAG7
$DCONTCT EQU   $FLAG7
$2NDDATA EQU   $FLAG7
$1STDATA EQU   $FLAG7
$ABTERM  EQU   $ABNDBIT
$FSTMCIS EQU   $FLAG6
$DISCREQ EQU   $FLAG6
$DISCISS EQU   $FLAG6
$CHANGE  EQU   $FLAG6
$RECAL11 EQU   $FLAG6
@NM00032 EQU   $FLAG5
$PROGCK  EQU   $CANCEL
$PRINTAP EQU   $FLAG5
@NM00031 EQU   $FLAG5
$MSG922  EQU   $FLAG5
$CT924   EQU   $FLAG5
$FSTCAT  EQU   $FLAG5
$FSTFE   EQU   $FLAG5
$ACTOPND EQU   $FLAG4
$ACQCUTT EQU   $FLAG4
$CLSSACT EQU   $FLAG4
$BACKINT EQU   $FLAG4
$DMSGSW  EQU   $FLAG4
$TSTDEVP EQU   $FLAG4
$APRQPER EQU   $FLAG4
$OPCOM   EQU   $FLAG4
$NEWAP   EQU   $FLAG3
$OPTERR  EQU   $FLAG3
$PRTONLY EQU   $FLAG3
$REQSTOR EQU   $FLAG3
$LOGOFFE EQU   $FLAG3
$TSTERR  EQU   $FLAG3
$DEVERR  EQU   $FLAG3
@NM00030 EQU   $COMMFLG+1
@NM00029 EQU   $COMMFLG
@NM00028 EQU   $CDA+120
$CUCNT   EQU   $CDA+118
@NM00027 EQU   $CDA+117
$PRTFORM EQU   $CDA+116
$OPISCNT EQU   $CDA+114
$OPNDCNT EQU   $CDA+112
$GETMSZE EQU   $CDA+110
$GRCNTS  EQU   $CDA+108
$CTLCNT  EQU   $CDA+106
$ACTLVL  EQU   $CDA+105
$PRNTLVL EQU   $CDA+104
$ERRCNTA EQU   $CDA+102
$TLCNT   EQU   $CDA+100
$TIMEALW EQU   $CDA+96
$PTRAREA EQU   $CDA+92
$GETMPTR EQU   $CDA+88
$R13PTRT EQU   $CDA+84
$R13PTR  EQU   $CDA+80
$TEPEND  EQU   $CDA+76
$PLINKDL EQU   $CDA+72
$TEPBEGN EQU   $CDA+68
$FRELPTR EQU   $CDA+64
$HIGHADR EQU   $HIMOREC
$LOMOREC EQU   $CDA+56
$LOWADDR EQU   $OLTPTR
$ENDCOMM EQU   $CDA+48
$COMMON  EQU   $RCA
$SLASHAD EQU   $CDA+32
$PASSON  EQU   $CDA+28
$TOLBRTB EQU   $CDA+24
$SCTPTR8 EQU   $CDA+20
$SCTPTR  EQU   $CDA+16
$TBWDPTR EQU   $CDA+12
$TFWDPTR EQU   $CDA+8
@NM00026 EQU   $CDA
@NM00025 EQU   $SCTTBLE+98
$SCTLWTC EQU   $SCTTBLE+96
$SCTLWTA EQU   $SCTTBLE+92
#EXT     EQU   $SCTTBLE+88
#PASS    EQU   $SCTTBLE+84
#TABLE   EQU   $SCTTBLE+80
#MSGIDAC EQU   $SCTTBLE+78
@NM00024 EQU   $SCTTBLE+71
$RETMASK EQU   $SCTTBLE+70
$R249255 EQU   $ROUTMSK+29
$R241248 EQU   $ROUTMSK+28
$R233240 EQU   $ROUTMSK+27
$R225232 EQU   $ROUTMSK+26
$R217224 EQU   $ROUTMSK+25
$R209216 EQU   $ROUTMSK+24
$R201208 EQU   $ROUTMSK+23
$R193200 EQU   $ROUTMSK+22
$R185192 EQU   $ROUTMSK+21
$R177184 EQU   $ROUTMSK+20
$R169176 EQU   $ROUTMSK+19
$R161168 EQU   $ROUTMSK+18
$R153160 EQU   $ROUTMSK+17
$R145152 EQU   $ROUTMSK+16
$R137144 EQU   $ROUTMSK+15
$R129136 EQU   $ROUTMSK+14
$R121128 EQU   $ROUTMSK+13
$R113120 EQU   $ROUTMSK+12
$R105112 EQU   $ROUTMSK+11
$R097104 EQU   $ROUTMSK+10
$R089096 EQU   $ROUTMSK+9
$R081088 EQU   $ROUTMSK+8
$R073080 EQU   $ROUTMSK+7
$R065072 EQU   $ROUTMSK+6
$R057064 EQU   $ROUTMSK+5
$R049056 EQU   $ROUTMSK+4
$R041048 EQU   $ROUTMSK+3
$R033040 EQU   $ROUTMSK+2
$R025032 EQU   $ROUTMSK+1
$R017024 EQU   $ROUTMSK
$TOTFLG2 EQU   $SCTTBLE+39
@NM00023 EQU   $TOTFLG1
@NM00022 EQU   $TOTFLG1
@NM00021 EQU   $TOTFLG1
$CURELOD EQU   $TOTFLG1
@NM00020 EQU   $TOTFLG1
@NM00019 EQU   $TOTFLG1
$LINESHR EQU   $TOTFLG1
@NM00018 EQU   $OLTFLG2
@NM00017 EQU   $OLTFLG2
@NM00016 EQU   $OLTFLG2
@NM00015 EQU   $OLTFLG2
@NM00014 EQU   $OLTFLG2
@NM00013 EQU   $OLTFLG2
@NM00012 EQU   $OLTFLG2
$TALK    EQU   $OLTFLG2
$DYCOM   EQU   $OLTFLGS
@NM00011 EQU   $OLTFLGS
$TRACE   EQU   $OLTFLGS
$RETCODE EQU   $OLTFLGS
$CONTCB  EQU   $OLTFLGS
$RETAIN  EQU   $OLTFLGS
$CLEANRT EQU   $OLTFLGS
$MANINTV EQU   $OLTFLGS
$OLTSIZE EQU   $SCTTBLE+34
$QSCTMOD EQU   $EXECFLG
$CTRLMOD EQU   $EXECFLG
$CLEANUP EQU   $EXECFLG
$LSTPDEV EQU   $EXECFLG
$ERRCNT  EQU   $EXECFLG
$RTNSLCT EQU   $EXECFLG
$MULTDEV EQU   $EXECFLG
@NM00010 EQU   $EXECFLG
$RMSKCNT EQU   $SCTTBLE+32
$SYNAME  EQU   $CDS8T19+4
$EXTSIG  EQU   $CDS8T19+3
$CDFLGS  EQU   $CDS8T19+1
$CDSCNT  EQU   $CDS8T19
$PDEVDSC EQU   $SCTTBLE+16
$PDEVADR EQU   $SCTTBLE+12
$COMMCN  EQU   $CDSFLGS
$CUSTSYM EQU   $CDSFLGS
$TWOCHSW EQU   $CDSFLGS
$SYMNAME EQU   $CDSFLGS
$EXTINTC EQU   $CDSFLGS
$CEVOL   EQU   $CDSFLGS
$SHARED  EQU   $CDSFLGS
$FPM     EQU   $CDSFLGS
$LASTSUB EQU   $PDEVFLG
@NM00009 EQU   $PDEVFLG
@NM00008 EQU   $PDEVFLG
@NM00007 EQU   $PDEVFLG
$LASTDEV EQU   $PDEVFLG
@NM00006 EQU   $PDEVFLG
$EXFILPT EQU   $PDEVFLG
$FPMOLD  EQU   $PDEVFLG
$TSSSYM  EQU   $SCTTBLE+8
$SCTLEVL EQU   $SCTTBLE+7
$DRIVER  EQU   $SCTTBLE+6
$RT0916  EQU   $SCTTBLE+5
$RT0108  EQU   $SCTTBLE+4
$LOOPTST EQU   $ERROPT
$LOOPERR EQU   $ERROPT
$NERRPRT EQU   $ERROPT
$NOCNTRL EQU   $ERROPT
$ALTPRNT EQU   $ERROPT
$CATERR  EQU   $ERROPT
$ASTERIK EQU   $ERROPT
$TESTERR EQU   $ERROPT
$FSTCOMM EQU   $TESTOPT
$INDEFLP EQU   $TESTOPT
$NOPRT   EQU   $TESTOPT
$PARAPRT EQU   $TESTOPT
@NM00005 EQU   $TESTOPT
$ERRLPCT EQU   $SCTTBLE
$TLTEND  EQU   $RCAAREA+936
@NM00004 EQU   $RCAAREA+605
$VTAMEND EQU   $RCAFLG
$TPPOSTD EQU   $RCAFLG
$NEWCT   EQU   $RCAFLG
$ABNDALL EQU   $RCAFLG
$CUTESTB EQU   $RCAFLG
$CONSOLE EQU   $RCAFLG
$TPLOGON EQU   $RCAFLG
$UPDATE  EQU   $RCAFLG
$DEVAREA EQU   $RCAAREA+600
$CTDVAR  EQU   $RCAAREA+596
$BUFFS   EQU   $RCAAREA+464
$TLTNIB  EQU   $CONSTNT+140
$TLTPRPL EQU   $CONSTNT+20
@NM00003 EQU   $CONSTNT+4
@NM00002 EQU   $CONSTNT+2
$USECNT  EQU   $CONSTNT
$CURRTWA EQU   $POINTER+140
$CTNAME  EQU   $POINTER+132
$CTARGX  EQU   $POINTER+128
$COMINT  EQU   $POINTER+120
$QUEHNDL EQU   $POINTER+116
@NM00001 EQU   $POINTER+36
$RTNPTR  EQU   $POINTER+32
$TLTECB1 EQU   $POINTER+24
$CLEANP  EQU   $POINTER+20
$ABEND   EQU   $POINTER+16
$LSTAREA EQU   $POINTER+12
$FSTAREA EQU   $POINTER+8
$CVTSAVE EQU   $POINTER+4
$TOLTEP  EQU   $POINTER
$TLTACB  EQU   $RCAAREA
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RT00160 EQU   C16C0225
@RT00169 EQU   C16C0253
@RT00174 EQU   C16C0100
@RF00174 EQU   C16C0225
@RT00190 EQU   C16C0253
@RT00206 EQU   C16C0075
@RT00227 EQU   C16C0075
@RT00275 EQU   C16C0300
@RT00278 EQU   C16C0300
@RF00278 EQU   C16C0075
@RT00281 EQU   C16C0075
@RC00283 EQU   C16C0300
@RT00310 EQU   C16C0075
@RT00313 EQU   C16C0250
@RT00319 EQU   C16C0075
@RT00328 EQU   C16C0250
@RF00328 EQU   C16C0256
@RF00325 EQU   C16C0075
@RT00340 EQU   C16C0256
@RT00368 EQU   C16C1025
@RF00362 EQU   C16C1050
@RC00414 EQU   @RC00412
@RC00419 EQU   @RC00412
@RC00435 EQU   @RC00434
@RT00517 EQU   C16C0905
@PB00007 EQU   @PB00008
@PB00006 EQU   @PB00007
@PB00005 EQU   @PB00006
@PB00004 EQU   @PB00005
@PB00003 EQU   @PB00004
@PB00002 EQU   @PB00003
@ENDDATA EQU   *
         END   ISTCC016,(C'PLS0850',0701,76244)
