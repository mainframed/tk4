         TITLE 'AMDPRREC -TIMESTAMP, LOST DATA RECORDS && HEX DUMP     *
                         '
AMDPRCON CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL2(@EP00001-@MAINENT)
         DC    AL1(16)                                             0001
         DC    C'AMDPRCON  76.159'                                 0001
AMDPRHEX DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL2(@EP00124-AMDPRHEX)
         ENTRY AMDPRHEX
         DROP  @15
@PROLOG  ST    @14,12(,@13)                                        0001
         STM   @00,@12,20(@13)                                     0001
         BALR  @11,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,@11                                         0001
         ST    @13,@SA00001+4                                      0001
         LA    @14,@SA00001                                        0001
         ST    @14,8(,@13)                                         0001
         LR    @13,@14                                             0001
         AH    @15,4(,@15)                                         0001
         BR    @15                                                 0001
@EP00001 DS    0H                                                  0002
          EQUATES                      AMDPRDMP EQU MACRO
          COMMON                       EXPANDS TO AMDPRCOM TABLE
AMDPRCON  CSECT                        RE-ESTABLISH AMDPRCON CSECT
          USING COMMON,COMBASE         SET UP DSECT FOR AMDPRCOM
*   AEDITCBR=AEDITCB;               /* INITIALIZE AMDPRTAB PTR       */
         L     AEDITCBR,AEDITCB                                    0074
*   CON='1'B;                       /* INDICATE AMDPRCON PROCESS     */
         OI    CON(AEDITCBR),B'00010000'                           0075
*   IF RECFID='01'X THEN                                           0076
         L     @10,CURREC(,AEDITCBR)                               0076
         CLI   RECFID(@10),X'01'                                   0076
         BE    @RT00076                                            0076
*     GOTO AMDPRTS;                 /* TIME STAMP RECORD             */
*   IF RECFID='02'X THEN            /* LOST DATA REC           Y02014*/
         CLI   RECFID(@10),X'02'                                   0078
         BE    @RT00078                                            0078
*     GOTO AMDPRLD;                 /* FORMAT LOST DATA REC    Y02014*/
*   IF RECFID='03'X THEN            /* LOST BLOK RECORD        Y02014*/
         CLI   RECFID(@10),X'03'                                   0080
         BE    @RT00080                                            0080
*     GOTO AMDPRLB;                 /* FORMAT LOST BLK REC     Y02014*/
*/********************************************************************/
*/*                                                                  */
*/* LOST DATA RECORD ROUTINE                                         */
*/*                                                                  */
*/********************************************************************/
*                                                                  0082
*AMDPRLD:                                                          0082
*   PARMREG=ADDR(LDPLST);           /* ADDRS LOST DATA FORMAT PTRN   */
AMDPRLD  LA    PARMREG,LDPLST                                      0082
*   CALL AMDTMCHK;                  /* SEE IF TIME STAMP PENDING     */
         BAL   @14,AMDTMCHK                                        0083
*   CALL AMDPRGFR;                  /* FORMAT LOST DATA OUTPUT BUF   */
         L     @15,AFMTLINE                                        0084
         BALR  @14,@15                                             0084
*   WREG2=RECLSTEV&'7FFFFFFF'X;     /* LOW ORDER 31 BITS             */
         L     @10,CURREC(,AEDITCBR)                               0085
         ICM   WREG2,15,RECLSTEV(@10)                              0085
         N     WREG2,@CF00347                                      0085
*   GEN;                                                           0086
         CVD   WREG2,WORK1             LOST EVENT COUNT TO DECIMAL
         UNPK  SUBBUF(10),WORK1+2(6)   CONVERT TO PRINTABLE FORM
*   SUBBUF(10)=SUBBUF(10)×'F0'X;    /* FIX THE SIGN                  */
         OI    SUBBUF+9,X'F0'                                      0087
*/*                                                                  */
*/* LEFT JUSTIFY THE NUMBER OF LOST EVENTS IN THE OUTPUT BUFFER      */
*/*                                                                  */
*                                                                  0088
*   DO I=1 TO 10-1;                 /* CHECK UP TO TENS DIGIT        */
         LA    I,1                                                 0088
@DL00088 DS    0H                                                  0089
*     IF SUBBUF(I)^='0' THEN        /* IS IT A LEADING ZERO ?        */
         LA    @10,SUBBUF-1(I)                                     0089
         CLI   0(@10),C'0'                                         0089
         BNE   @RT00089                                            0089
*       GOTO AMDLJUST;              /* NO- MOVE STRING               */
*   END;                                                           0091
         AL    I,@CF00045                                          0091
         C     I,@CF00167                                          0091
         BNH   @DL00088                                            0091
*AMDLJUST:                                                         0092
*   NUMLEBUF(1:10+1-I)=             /* LEFT JUSTIFY                  */
*       SUBBUF(I:10);                                              0092
AMDLJUST L     @10,CURBUF                                          0092
         LA    @08,11                                              0092
         SLR   @08,I                                               0092
         BCTR  @08,0                                               0092
         LA    @15,SUBBUF-1(I)                                     0092
         EX    @08,@SM00429                                        0092
*   GOTO AMDPTIM;                   /* TIME CONVERT ROUTINE          */
         B     AMDPTIM                                             0093
*/********************************************************************/
*/*    LOST BLOK RECORD ROUTINE                                Y02014*/
*/********************************************************************/
*                                                                  0094
*AMDPRLB:                                                          0094
*   PARMREG=ADDR(LBPLST);           /* ADDR FORMAT PATTERN     Y02014*/
AMDPRLB  LA    PARMREG,LBPLST                                      0094
*   CALL AMDTMCHK;                  /* SEE IF TIME STAMP PENDING   0095
*                                                              Y02014*/
         BAL   @14,AMDTMCHK                                        0095
*   CALL AMDPRGFR;                  /* FORMAT BUFFER           Y02014*/
         L     @15,AFMTLINE                                        0096
         BALR  @14,@15                                             0096
*   GOTO AMDPTIM;                   /* TIME CONVERT RTN        Y02014*/
         B     AMDPTIM                                             0097
*                                                                  0098
*/********************************************************************/
*/*                                                                  */
*/* TIME STAMP RECORD ROUTINE                                        */
*/*                                                                  */
*/********************************************************************/
*                                                                  0098
*AMDPRTS:                                                          0098
*   PARMREG=ADDR(TSPLST);           /* ADDRS TIME STAMP FORMAT PTR   */
AMDPRTS  LA    PARMREG,TSPLST                                      0098
*   SAVEBUF=CURBUF;                 /* SAVE CURBUF POINTER           */
         L     @10,CURBUF                                          0099
         ST    @10,SAVEBUF                                         0099
*   CURBUF=ADDR(TSBUF);             /* SET PTR TO TIME STMP BUF      */
         LA    @10,TSBUF                                           0100
         ST    @10,CURBUF                                          0100
*   ADTSBUF=CURBUF;                 /* MAKE AVAILBL TIME BUF PTR     */
         ST    @10,ADTSBUF(,AEDITCBR)                              0101
*   TSBUF=' ';                      /* INIT TSBUF TO BLANKS          */
         MVI   TSBUF+1,C' '                                        0102
         MVC   TSBUF+2(131),TSBUF+1                                0102
         MVI   TSBUF,C' '                                          0102
*   TS='1'B;                        /* TURN ON TIME REC PENDING SW   */
         OI    TS(AEDITCBR),B'10000000'                            0103
*   CALL AMDPRGFR;                  /* FORMAT TIME STAMP BUFFER      */
         L     @15,AFMTLINE                                        0104
         BALR  @14,@15                                             0104
*/********************************************************************/
*/*                                                                  */
*/* TIME CONVERSION ROUTINE                                          */
*/*                                                                  */
*/********************************************************************/
*                                                                  0105
*AMDPTIM:                                                          0105
*   TIMEBUF='00.00.00.000000';      /* INITIALIZE TIME BUFFER        */
AMDPTIM  L     @10,CURBUF                                          0105
         MVC   TIMEBUF(15,@10),@CC00355                            0105
*   ADCVTTZ=ADDR(RECVTTZ);          /* ADDR CVT TIME ZONE VALUE      */
         L     @10,CURREC(,AEDITCBR)                               0106
         LA    @08,RECVTTZ(,@10)                                   0106
         ST    @08,ADCVTTZ                                         0106
*   ADTODCLK=ADDR(RECTOD);          /* ADDR TOD VALUE                */
         LA    @10,RECTOD(,@10)                                    0107
         ST    @10,ADTODCLK                                        0107
*   ADTMEBUF=ADDR(TMEBUF);          /* ADDR OUTPUT AREA              */
         LA    @10,TMEBUF                                          0108
         ST    @10,ADTMEBUF                                        0108
*   PARMREG=ADDR(TIMEPARM);         /* ADDR PARM LIST IN R 1         */
         LA    PARMREG,TIMEPARM                                    0109
*   WREG2=1;                        /* CONVERT TO FULL TIME          */
         LA    WREG2,1                                             0110
*   CALL TODCNVRT;                  /* CALL TOD CONVERSION RTN       */
         L     @15,QATMERTN                                        0111
         BALR  @14,@15                                             0111
*/********************************************************************/
*/*                                                                  */
*/* PRINT LOST DATA RECORD AND TERMINATE - TIME STAMP, REINIT BUF PTR*/
*/*                                                                  */
*/********************************************************************/
*                                                                  0112
*AMDPRIT:                                                          0112
*   IF RECFID='01'X THEN            /* IF TIME STAMP RECORD          */
AMDPRIT  L     @10,CURREC(,AEDITCBR)                               0112
         CLI   RECFID(@10),X'01'                                   0112
         BNE   @RF00112                                            0112
*     DO;                           /* THEN DO THE FOLLOWING         */
*                                                                  0113
*       /*************************************************************/
*       /*                                                           */
*       /* INSERT RESULTS IN OUTPUT BUFFER                           */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0114
*       DAYBUF=DAYYR;               /* DAY TO OUTPUT BUF             */
         L     @10,CURBUF                                          0114
         MVC   DAYBUF(3,@10),DAYYR                                 0114
*       YRBUF=YEAR;                 /* YEAR TO OUT BUF               */
         MVC   YRBUF(4,@10),YEAR                                   0115
*       TIMEBUF=TOD;                /* TIME TO OUT BUF               */
         MVC   TIMEBUF(15,@10),TOD                                 0116
*       CURBUF=SAVEBUF;             /* REINITIALIZE CURBUF           */
         L     @10,SAVEBUF                                         0117
         ST    @10,CURBUF                                          0117
*       GOTO AMDRET;                /* RETURN TO AMDPRFRM            */
         B     AMDRET                                              0118
*     END;                                                         0119
*   TIMEBUF=TOD;                    /* TIME TO BUFFER          Y02014*/
@RF00112 L     @10,CURBUF                                          0120
         MVC   TIMEBUF(15,@10),TOD                                 0120
*   GEN(BRWRITE 2);                 /* PRINT OUTPUT BUFFER     Y02014*/
         BRWRITE 2
*AMDRET:                                                           0122
*   CON='0'B;                       /* INDICATE AMDPRCON TERM        */
AMDRET   NI    CON(AEDITCBR),B'11101111'                           0122
*   RETURN;                         /* RETURN TO AMDPRFRM            */
@EL00001 L     @13,4(,@13)                                         0123
@EF00001 DS    0H                                                  0123
@ER00001 L     @14,12(,@13)                                        0123
         LM    @00,@12,20(@13)                                     0123
         BR    @14                                                 0123
*AMDPRHEX:                                                         0124
*   ENTRY;                          /* ENTRY FOR HEX DUMP            */
@EP00124 DS    0H                                                  0125
*   RFY                                                            0125
*    (RECPTR2) RSTD;                /* REG2 FOR RECORD STRUCTURE   0125
*                                                              Y02014*/
*   AEDITCBR=AEDITCB;               /* PUT ADDR OF AMDPRTAB IN BASE  */
         L     AEDITCBR,AEDITCB                                    0126
*   HEX='1'B;                       /* INDICATE AMDPRHEX IN PROCESS  */
         OI    HEX(AEDITCBR),B'00001000'                           0127
*   CALL AMDTMCHK;                  /* PRINT TIME STMP, IF PENDING   */
         BAL   @14,AMDTMCHK                                        0128
*   IF GET='1'B THEN                /* CONTROL FROM GET        Y02014*/
         TM    GET(AEDITCBR),B'00100000'                           0129
         BNO   @RF00129                                            0129
*     DO;                           /* YES                     Y02014*/
*       IF FIRSTHSW='0'B THEN       /* FIRST CALL              Y02014*/
         TM    FIRSTHSW(AEDITCBR),B'00010000'                      0131
         BNZ   @RF00131                                            0131
*         DO;                       /* YES                     Y02014*/
*           OFFSET=0;               /* BEGINNING OFFSET        Y02014*/
         SLR   @10,@10                                             0133
         STH   @10,OFFSET                                          0133
*           GEN(BRWRITE SKIP);      /* SKIP TO NEW PAGE        Y02014*/
         BRWRITE SKIP
*           FIRSTHSW='1'B;          /* FIRST PASS DONE         Y02014*/
         OI    FIRSTHSW(AEDITCBR),B'00010000'                      0135
*         END;                      /*                         Y02014*/
*       ELSE                                                       0137
*         OFFSET=OFFSET+32;         /* INCREMENT OFFSET        Y02014*/
         B     @RC00131                                            0137
@RF00131 LA    @10,32                                              0137
         AH    @10,OFFSET                                          0137
         STH   @10,OFFSET                                          0137
*       CALL CONVRT;                /* DO CONVERSION           Y02014*/
@RC00131 BAL   @14,CONVRT                                          0138
*       GOTO HEXDONE;               /* PREPARE FOR RETURN      Y02014*/
         B     HEXDONE                                             0139
*     END;                          /* END OF GET PROCESSING   Y02014*/
*   TIMEADJ=0;                      /* SET TIME-STAMP ADJUSTMENT     */
*                                                                  0141
@RF00129 SLR   TIMEADJ,TIMEADJ                                     0141
*   /*****************************************************************/
*   /*                                                               */
*   /* SET THE POINTER TO THE EID FIELD OF CURRENT RECORD            */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0142
*   IF OPTTIME='1'B THEN            /* IS TIME-STAMP IN REC    Y02014*/
         L     @10,GTFWDPTR(,AEDITCBR)                             0142
         TM    OPTTIME(@10),B'00000001'                            0142
         BNO   @RF00142                                            0142
*     DO;                                                          0143
*       RECPTR2=CURREC+14;          /* YES, INCLUDE TIME-STAMP REC 0144
*                                      LENGTH FOR EID PTR      Y02014*/
         LA    RECPTR2,14                                          0144
         AL    RECPTR2,CURREC(,AEDITCBR)                           0144
*       TIMEADJ=8;                  /* LENGTH OF TIME DATA RECORD    */
         LA    TIMEADJ,8                                           0145
*     END;                          /*                         Y02014*/
*   ELSE                                                           0147
*     RECPTR2=CURREC+6;             /* OTHERWISE OMIT TIME LENGTH    */
         B     @RC00142                                            0147
@RF00142 LA    RECPTR2,6                                           0147
         AL    RECPTR2,CURREC(,AEDITCBR)                           0147
*   IF EIDFRST^='1110'B THEN        /* IF EID DOES NOT BEGIN WITH    */
@RC00142 TM    EIDFRST(RECPTR2),B'11100000'                        0148
         BNO   @RT00148                                            0148
         TM    EIDFRST(RECPTR2),B'00010000'                        0148
         BZ    @RF00148                                            0148
@RT00148 DS    0H                                                  0149
*     DMPLABEL=SYSTEM;              /* HEX E THEN A SYSTEM LABEL IS
*                                      PUT ON THE OUTPUT             */
         MVI   DMPLABEL+6,C' '                                     0149
         MVC   DMPLABEL+7(2),DMPLABEL+6                            0149
         MVC   DMPLABEL(6),SYSTEM                                  0149
*   ELSE                                                           0150
*                                                                  0150
*     /***************************************************************/
*     /*                                                             */
*     /* MUST TEST FID TO DETERMINE FORMAT OUTPUT LABEL              */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0150
*     IF HEXFID='00'X THEN          /* DO FID INDICATE HEX FORMAT    */
         B     @RC00148                                            0150
@RF00148 L     @10,CURREC(,AEDITCBR)                               0150
         CLI   HEXFID(@10),X'00'                                   0150
         BNE   @RF00150                                            0150
*       DMPLABEL=HEXFORMT;          /* YES, MOVE TITLE FOR PATTERN   */
         MVC   DMPLABEL(9),HEXFORMT                                0151
*     ELSE                                                         0152
*       IF HEXFID<='50'X            /* IS IT A USER FORMAT ?         */
*         THEN                      /* YES, PUT IN THE USER LABEL    */
         B     @RC00150                                            0152
@RF00150 L     @10,CURREC(,AEDITCBR)                               0152
         CLI   HEXFID(@10),X'50'                                   0152
         BH    @RF00152                                            0152
*         DMPLABEL=USER;                                           0153
         MVI   DMPLABEL+4,C' '                                     0153
         MVC   DMPLABEL+5(4),DMPLABEL+4                            0153
         MVC   DMPLABEL(4),USER                                    0153
*       ELSE                                                       0154
*         DMPLABEL=SUBSYS;          /* IT MUST BE A SUBSYS FORMAT    */
*                                                                  0154
         B     @RC00152                                            0154
@RF00152 MVI   DMPLABEL+6,C' '                                     0154
         MVC   DMPLABEL+7(2),DMPLABEL+6                            0154
         MVC   DMPLABEL(6),SUBSYS                                  0154
*   /*****************************************************************/
*   /*                                                               */
*   /* PUT THE ADDRESS OF ID FEILDS IN THE FORMAT PATTERN            */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0155
*   DATAPTR=ADDR(HEXAID);           /* PUT IN AID DATA ADDRESS       */
@RC00152 DS    0H                                                  0155
@RC00150 DS    0H                                                  0155
@RC00148 L     @10,CURREC(,AEDITCBR)                               0155
         LA    @10,HEXAID(,@10)                                    0155
         ST    @10,DATAPTR                                         0155
*   EIDPTR=ADDR(HEXEID);            /* PUT IN EID DATA ADDRESS       */
*                                                                  0156
         ST    RECPTR2,EIDPTR                                      0156
*   /*****************************************************************/
*   /*                                                               */
*   /* GO FORMAT THE ID AND LABEL FIELDS OF FIRST LINE               */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0157
*   RFY                                                            0157
*    (PARMREG) RSTD;                /* USED FOR CALLS          Y02014*/
*   PARMREG=ADDR(LINEONE);          /* POINT TO LINE ONE PATTERN     */
         LA    PARMREG,LINEONE                                     0158
*   CALL AMDPRGFR;                  /* GO FORMAT LINE ONE            */
*                                                                  0159
         L     @15,AFMTLINE                                        0159
         BALR  @14,@15                                             0159
*   /*****************************************************************/
*   /*                                                               */
*   /* THE FOLLOWING CODE WILL DETERMINE THE NO. OF LINES NEEDED TO  */
*   /* FORMAT THE CURRENT RECORD AND LOOPS VIA NUMBER OF LINES       */
*   /* CONTROL, PRINTING THE HEX DATA AND THE EBCDIC TRANSLATION     */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0160
*   OFFSET=0;                       /* INITIALIZE DATA OFFSET CNTR   */
*                                                                  0160
         SLR   @10,@10                                             0160
         STH   @10,OFFSET                                          0160
*   /*****************************************************************/
*   /*                                                               */
*   /* GET NUMBER OF LINES TO PRINT                                  */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0161
*   LINES=(LENGTH-(TIMEADJ+8))/24;                                 0161
*                                                                  0161
         LA    @10,24                                              0161
         L     @08,CURREC(,AEDITCBR)                               0161
         LA    @07,8                                               0161
         ALR   @07,TIMEADJ                                         0161
         LCR   @07,@07                                             0161
         SLR   @00,@00                                             0161
         ICM   @00,3,LENGTH(@08)                                   0161
         ALR   @07,@00                                             0161
         LR    @14,@07                                             0161
         SRDA  @14,32                                              0161
         DR    @14,@10                                             0161
         STH   @15,LINES                                           0161
*   /*****************************************************************/
*   /*                                                               */
*   /* NUMBER OF BYTES IN SHORT LINE IF THERE IS ONE                 */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0162
*   PARTLN=(LENGTH-(TIMEADJ+8))//24;                               0162
*                                                                  0162
         LR    @14,@07                                             0162
         SRDA  @14,32                                              0162
         DR    @14,@10                                             0162
         STH   @14,PARTLN                                          0162
*   /*****************************************************************/
*   /*                                                               */
*   /* LOOP FROM HERE IF MORE THAN ONE LINE IS TO BE PRINTED         */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0163
*AMDCKLN:                                                          0163
*   IF LINES=0 THEN                                                0163
AMDCKLN  LH    @06,LINES                                           0163
         LTR   @06,@06                                             0163
         BZ    @RT00163                                            0163
*     GOTO AMDSHORT;                /* GO SEE IF THERE IS A SHORT  0164
*                                      LINE TO PRINT                 */
*   CONVAMT=24;                     /* SET AMOUNT TO 24 FOR CONVRT   */
         MVC   CONVAMT(2),@CH00101                                 0165
*   CALL CONVRT;                    /* GO CONVERT AND PRINT A LINE   */
         BAL   @14,CONVRT                                          0166
*   LINES=LINES-1;                  /* DECREMENT LINE COUNT BY ONE   */
         LH    @10,LINES                                           0167
         BCTR  @10,0                                               0167
         STH   @10,LINES                                           0167
*   OFFSET=OFFSET+24;               /* SET OFFSET TO NEXT LINE       */
         LA    @10,24                                              0168
         LH    @08,OFFSET                                          0168
         ALR   @08,@10                                             0168
         STH   @08,OFFSET                                          0168
*   IF OFFSET=24&                   /* IF THIS IS SECOND LINE        */
*       OPTTIME='1'B                /* AND TIME STAMPING OF EACH   0169
*                                      RECORD                  Y02014*/
*     THEN                                                         0169
         CR    @08,@10                                             0169
         BNE   @RF00169                                            0169
         L     @10,GTFWDPTR(,AEDITCBR)                             0169
         TM    OPTTIME(@10),B'00000001'                            0169
         BNO   @RF00169                                            0169
*     CALL PRTME;                   /* GO FORMAT TIME VALUE          */
         L     @10,AFRMAD(,AEDITCBR)                               0170
         L     @15,ATME(,@10)                                      0170
         BALR  @14,@15                                             0170
*   GOTO AMDCKLN;                   /* GO SET-UP NEXT LINE TO PRINT  */
         B     AMDCKLN                                             0171
*AMDSHORT:                          /* COME HERE WHEN LINES = ZERO   */
*   IF PARTLN^=0 THEN               /* PART LINE IS TO BE PRINTED    */
AMDSHORT LH    @10,PARTLN                                          0172
         LTR   @10,@10                                             0172
         BZ    @RF00172                                            0172
*     DO;                                                          0173
*       CONVAMT=PARTLN;             /* SET AMOUNT TO CONVERT EQUAL TO
*                                      LENGTH OF PARTIAL LINE        */
         STH   @10,CONVAMT                                         0174
*       CALL CONVRT;                /* GO SET UP PARTIAL LINE        */
         BAL   @14,CONVRT                                          0175
*     END;                                                         0176
*   IF OPTTIME='1'B THEN            /* TEST FOR USER TIME-STAMP-N    */
@RF00172 L     @10,GTFWDPTR(,AEDITCBR)                             0177
         TM    OPTTIME(@10),B'00000001'                            0177
         BNO   @RF00177                                            0177
*     DO;                           /*                         Y02014*/
*       IF OFFSET=0 THEN            /* ONLY ONE LINE PRINTED M4466   */
         LH    @10,OFFSET                                          0179
         SLR   @08,@08                                             0179
         CR    @10,@08                                             0179
         BE    @RT00179                                            0179
*         GO TO PRINTTME;           /* PRINT TIMESTAMP REC M4466     */
*       IF OFFSET=24&               /* CATCH CASE - EXACTLY 1 LN     */
*           PARTLN=0 THEN           /* OCCURS WITH SYSM REC M4466    */
         C     @10,@CF00101                                        0181
         BNE   @RF00181                                            0181
         CH    @08,PARTLN                                          0181
         BNE   @RF00181                                            0181
*PRINTTME:                                                         0182
*         DO;                       /* YES, PRINT T-STAMP M4466      */
PRINTTME DS    0H                                                  0183
*           CALL AMDPRTME;          /* GO FORMAT TIME STAMP M4466    */
         BAL   @14,AMDPRTME                                        0183
*           GEN(BRWRITE  1);        /* PRINT TIMESTAMP REC M4466     */
         BRWRITE  1
*         END PRINTTME;                                            0185
*     END;                                                         0186
@RF00181 DS    0H                                                  0187
*HEXDONE:                                                          0187
*   HEX='0'B;                       /* INDICATE AMDPRHEX FINISHED    */
@RF00177 DS    0H                                                  0187
HEXDONE  NI    HEX(AEDITCBR),B'11110111'                           0187
*   RTNCODE=8;                      /* RETURN CODE IS ALWAYS EIGHT   */
         LA    RTNCODE,8                                           0188
*   RETURN;                                                        0189
         B     @EL00001                                            0189
*                                                                  0190
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS ROUTINE USES HEXCNVT MACRO TO CONVERT TO PRINTABLE HEX   */
*   /* THE LINE AS ADDRESS BY THE OFFSET VALUE. IT USES THE EBCDIC   */
*   /* TRANSLATION TABLE IN IMPRCOM TO TRANSLATE THE LINE TO EBCDIC  */
*   /* AND USES BRWRITE TO PRINT THE LINE                            */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0190
*CONVRT:                                                           0190
*   PROC;                           /* COME HERE TO CONVERT A LINE   */
CONVRT   STM   @14,@12,@SA00002                                    0190
*   RFY                                                            0191
*    (CONOUTA,                                                     0191
*     REG3,                                                        0191
*     CONDATA,                                                     0191
*     CONLNTH,                                                     0191
*     REG9,                                                        0191
*     REG12);                       /*                         Y02014*/
*   DCL                                                            0192
*     CONOUTA REG(2) PTR(31);       /* OUTPUT BUFFER DISPLACEMENT    */
*   DCL                                                            0193
*     CONDATA REG(4) PTR(31);       /* ADDR OF DATA TO CONVERT       */
*   DCL                                                            0194
*     CONLNTH REG(5) PTR(31);       /* LENGTH OF DATA TO CONVERT     */
*   DCL                                                            0195
*     REG3 REG(3) PTR(31);          /* NEEDED FOR CONVERSION   Y02014*/
*   DCL                                                            0196
*     REG9 REG(9) PTR(31);          /* NEEDED FOR CONVERSION   Y02014*/
*   DCL                                                            0197
*     REG12 REG(12) PTR(31);        /* NEEDED FOR CONVERSION   Y02014*/
*   DCL                                                            0198
*     1 * CHAR(26) BASED(CURBUF)    /* OUTPUT EBCDIC MAP       Y02014*/
*           POSITION(95),                                          0198
*      2 AST1 CHAR(1),              /* FIRST ASTERISK                */
*      2 EBCDIC CHAR(24),           /* TRANSLATE DATA                */
*      2 AST2 CHAR(1);              /* LAST ASTERISK                 */
*   DCL                                                            0199
*     1 * CHAR(34) BASED(CURBUF)    /* OUTPUT EBCDIC MAP       Y02014*/
*           POSITION(87),           /* FOR DUMPING BUFFER      Y02014*/
*      2 AST1LONG CHAR(1),          /* FIRST ASTERISK          Y02014*/
*      2 EBCDICL CHAR(32),          /* TRANSLATE DATA          Y02014*/
*      2 AST2LONG CHAR(1);          /* LAST ASTERISK           Y02014*/
*   IF GET='1'B THEN                /* CALLED FROM GET         Y02014*/
         TM    GET(AEDITCBR),B'00100000'                           0200
         BNO   @RF00200                                            0200
*     DO;                                                          0201
*       AST1LONG='*';               /* MOVE IN FIRST ASTERISK  Y02014*/
         L     @10,CURBUF                                          0202
         MVI   AST1LONG(@10),C'*'                                  0202
*       AST2LONG='*';               /* MOVE IN SECOND ASTERISK Y02014*/
         MVI   AST2LONG(@10),C'*'                                  0203
*       CONOUTA=CURBUF+5;           /* POINT TO OFFSET OUT AREA    0204
*                                                              Y02014*/
         AL    @10,@CF00086                                        0204
         LR    CONOUTA,@10                                         0204
*       CONDATA=ADDR(OFFSET);       /* POINT TO OFFSET BYTE    Y02014*/
         LA    CONDATA,OFFSET                                      0205
*       CONLNTH=2;                  /* LENGTH TO CONVERT IS TWO    0206
*                                                              Y02014*/
         LA    CONLNTH,2                                           0206
*       GEN(HEXCNVT   (2),(4),(5)); /* CONVERT OFFSET BYTE     Y02014*/
         HEXCNVT   (2),(4),(5)
*       CONOUTA=CONOUTA+6;          /* BUMP OUT AREA TO DATA AREA    */
         AL    CONOUTA,@CF00110                                    0208
*       CONDATA=CURREC;             /* POINT TO DATA TO CONVERT    0209
*                                                              Y02014*/
         L     CONDATA,CURREC(,AEDITCBR)                           0209
*       CONLNTH=32;                 /* GET AMOUNT TO CONVERT   Y02014*/
         LA    CONLNTH,32                                          0210
*       GEN(HEXCNVT   (2),(4),(5)); /* CONVERT DATA            Y02014*/
         HEXCNVT   (2),(4),(5)
*       CONOUTA=ADDR(EBCDICL);      /* POINT TO EBCDIC DATA AREA   0212
*                                                              Y02014*/
         L     @10,CURBUF                                          0212
         LA    CONOUTA,EBCDICL(,@10)                               0212
*       EBCDICL=DATA(1:32);         /* MOVE UNTRANSLATED DATA  Y02014*/
*                                                                  0213
         L     @08,CURREC(,AEDITCBR)                               0213
         MVC   EBCDICL(32,@10),DATA(@08)                           0213
*       /*************************************************************/
*       /*                                                           */
*       /* TRANSLATE THE HEX TO EBCDIC AND PRINT THE LINE      Y02014*/
*       /*                                                           */
*       /*************************************************************/
*                                                                  0214
*       GEN(TR 0(32,CONOUTA),TABLE);/* TRANSLATE USING AMDPRCOM TAB  */
         TR 0(32,CONOUTA),TABLE
*       GEN(BRWRITE   1);           /* PRINT THE LINE          Y02014*/
         BRWRITE   1
*     END;                                                         0216
*   ELSE                                                           0217
*     DO;                           /* DUMPING RECORD IN HEX   Y02014*/
         B     @RC00200                                            0217
@RF00200 DS    0H                                                  0218
*       AST1='*';                   /* MOVE IN FIRST ASTERISK        */
         L     @10,CURBUF                                          0218
         MVI   AST1(@10),C'*'                                      0218
*       AST2='*';                   /* MOVE IN SECOND ASTERISK       */
         MVI   AST2(@10),C'*'                                      0219
*       CONOUTA=CURBUF+35;          /* POINT TO OFFSET OUT AREA      */
         AL    @10,@CF00402                                        0220
         LR    CONOUTA,@10                                         0220
*       CONDATA=ADDR(OFFSET);       /* POINT TO OFFSET BYTE          */
         LA    CONDATA,OFFSET                                      0221
*       CONLNTH=2;                  /* LENGTH TO CONVERT IS ONE      */
         LA    CONLNTH,2                                           0222
*       GEN(HEXCNVT   (2),(4),(5)); /* CONVERT OFFSET BYTE           */
         HEXCNVT   (2),(4),(5)
*       CONOUTA=CONOUTA+5;          /* BUMP OUT AREA TO DATA AREA    */
         AL    CONOUTA,@CF00086                                    0224
*       CONDATA=ADDR(HEXDATA)+OFFSET;/* POINT TO DATA TO CONVERT     */
         LA    CONDATA,HEXDATA(,RECPTR2)                           0225
         AH    CONDATA,OFFSET                                      0225
*       CONLNTH=CONVAMT;            /* GET AMOUNT TO CONVERT         */
         LH    CONLNTH,CONVAMT                                     0226
*       GEN(HEXCNVT   (2),(4),(5)); /* CONVERT DATA                  */
         HEXCNVT   (2),(4),(5)
*       CONOUTA=ADDR(EBCDIC);       /* POINT TO EBCDIC DATA AREA     */
*                                                                  0228
         L     @10,CURBUF                                          0228
         LA    CONOUTA,EBCDIC(,@10)                                0228
*       /*************************************************************/
*       /*                                                           */
*       /* RESET DATA POINTER                                        */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0229
*       CONDATA=ADDR(HEXDATA)+OFFSET-2;                            0229
         LA    CONDATA,HEXDATA(,RECPTR2)                           0229
         AH    CONDATA,OFFSET                                      0229
         BCTR  CONDATA,0                                           0229
         BCTR  CONDATA,0                                           0229
*       CONLNTH=CONVAMT;            /* RESET AMOUNT TO CONVERT       */
         LH    CONLNTH,CONVAMT                                     0230
*       EBCDIC=CONDATA->HEXDATA(1:CONLNTH);/* MOVE UNTRANSLATED DATA
*                                      SO IT CAN BE TRANSLATED       */
*                                                                  0231
         MVI   EBCDIC+1(@10),C' '                                  0231
         MVC   EBCDIC+2(22,@10),EBCDIC+1(@10)                      0231
         LR    @08,CONLNTH                                         0231
         BCTR  @08,0                                               0231
         EX    @08,@SM00435                                        0231
*       /*************************************************************/
*       /*                                                           */
*       /* TRANSLATE THE HEX TO EBCDIC AND PRINT THE LINE            */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0232
*       GEN(TR 0(24,CONOUTA),TABLE);/* TRANSLATE USING AMDPRCOM TAB  */
         TR 0(24,CONOUTA),TABLE
*       GEN(BRWRITE   1);           /* PRINT THE LINE                */
         BRWRITE   1
*     END;                                                         0234
*   END CONVRT;                                                    0235
@EL00002 DS    0H                                                  0235
@EF00002 DS    0H                                                  0235
@ER00002 LM    @14,@12,@SA00002                                    0235
         BR    @14                                                 0235
*                                                                  0236
*/********************************************************************/
*/* THIS SUBROUTINE DETERMINES IF A TIME STAMP RECORD IS TO BE       */
*/*  OUTPUTTED BEFORE THE CURRENT TRACE RECORD.                Y02014*/
*/********************************************************************/
*                                                                  0236
*AMDTMCHK:                                                         0236
*   PROC;                           /* STANDARD LINKAGE        Y02014*/
AMDTMCHK STM   @14,@12,@SA00003                                    0236
*   DCL                                                            0237
*     TEMPBUF REG(2) PTR(31);       /* TIME STAMP RECORD BUF   Y02014*/
*   IF TS='0'B THEN                 /* TS RECORD PENDING       Y02014*/
         TM    TS(AEDITCBR),B'10000000'                            0238
         BZ    @RT00238                                            0238
*     GOTO AMDEND;                  /* NO RETURN               Y02014*/
*   GEN(BRWRITE 2,IMM);             /* 2 BLANK LINES NEEDED    Y02014*/
         BRWRITE 2,IMM
*   TEMPBUF=CURBUF;                 /* SAVE CURBUF VALUE       Y02014*/
         L     TEMPBUF,CURBUF                                      0241
*   CURBUF=ADTSBUF;                 /* POINT TO TS RECORD      Y02014*/
         L     @10,ADTSBUF(,AEDITCBR)                              0242
         ST    @10,CURBUF                                          0242
*   GEN(BRWRITE 2);                 /* OUTPUT TS AND BLANK     Y02014*/
         BRWRITE 2
*   TS='0'B;                        /* NO TS PENDING INDICATOR Y02014*/
         NI    TS(AEDITCBR),B'01111111'                            0244
*   CURBUF=TEMPBUF;                 /* RESTORE CURBUF PTR      Y02014*/
         ST    TEMPBUF,CURBUF                                      0245
*AMDEND:                                                           0246
*   RETURN;                         /* RETURN TO USER          Y02014*/
@EL00003 DS    0H                                                  0246
@EF00003 DS    0H                                                  0246
@ER00003 LM    @14,@12,@SA00003                                    0246
         BR    @14                                                 0246
*   END;                            /* END OF PROCEDURE        Y02014*/
         B     @EL00003                                            0247
*                                                                  0248
*/*AMDPRTME:  CHART (AMODE)                                          */
*/*AMDPRTME:  HEADER                                               0248
*/*      AMDPRTME - USER TIME STAMP CONVERSION SUBROUTINE            */
*/*AMDPRTME: E ENTRY                                                 */
*/*      P MOVE TIME LABEL TO BUFFER                                 */
*/*      D (YES,TMETOD,NO,) GTF OPTS INDICATE TOD?                   */
*/*      N TIME VALUE IS TIMER UNITS                                 */
*/*      P (,%DIV) MULTIPLY BY 26.04 TO GET U-SECS                   */
*/*TMETOD:  N TOD - RIGTH 12 BITS ARE UNUSED                         */
*/*      P SHIFT CLOCK VALUE RIGHT 12 BITS                           */
*/*%DIV:  P DIVIDE BY 6.0 * (10 EXP 7)                               */
*/*      N QUOTIENT - MIN SINCE BEGIN OF EPOCH                       */
*/*      N REMAINDER - SECOND, IN U-SECS SINCE BEGIN EPOCH           */
*/*      P DIVIDE REMAINDER BY (10 EXP 6) TO GET SECS                */
*/*      P SAVE QUOTIENT (SECONDS)                                   */
*/*      P CONVERT REMAINDER FOR OUTPUT (U-SECONDS)                  */
*/*      P MOVE '.' TO OUTPUT VALUE                                  */
*/*      P DIVIDE MINUTES BY 1440                                    */
*/*      N DISCARD QUOTIENT                                          */
*/*      P MULTI BY 60 TO CONVERT TO SECONDS                         */
*/*      P ADD QUOTIENT FOR U-SEC CALCULATION                        */
*/*      P CONVERT SECOND FOR OUTPUT                                 */
*/*      R RETURN                                                    */
*                                                                  0248
*AMDPRTME:                                                         0248
*   PROC OPTIONS(NOSAVEAREA);                                      0248
*                                                                  0248
AMDPRTME STM   @14,@12,12(@13)                                     0248
*/********************************************************************
*                                                                    */
*/*                                                                  */
*/*                  CONSTANTS USED ONLY BY AMDPRTME                 */
*/*                                                                  */
*/********************************************************************
*                                                                    */
*/* MAP OF TME OUTPUT IN CURRENT OUTPUT BUFFER                       */
*                                                                  0249
*   DCL                                                            0249
*     1 TMEMAP BASED(CURBUF) POSITION(12),                         0249
*      2 TMELAB CHAR(4),                                           0249
*      2 * CHAR(4),                                                0249
*      2 TMEVAL CHAR(12);                                          0249
*                                                                  0249
*   /*****************************************************************/
*   /*                                                               */
*   /* PREFIX OF TRACE REC WITH TIMESTAMPING                         */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0250
*   DCL                                                            0250
*     1 PREFIX BASED(CURREC),                                      0250
*      2 * CHAR(6),                 /* LL, AID, FID                  */
*      2 TODA CHAR(4),              /* TOD VALUE                     */
*      2 TODB BIT(32);              /* TOD VALUE                     */
*/* CONSTANT - 60 MILLION                                            */
*                                                                  0251
*   DCL                                                            0251
*     SIXTMIL FIXED(31) INIT(60000000);                            0251
*   RFY                                                            0252
*    (WREG2,                                                       0252
*     EVEN,                                                        0252
*     ODD,                                                         0252
*     COMMONRG) RSTD;               /* NEEDED FOR CONVERSIONS  Y02014*/
*   GEN;                                                           0253
         ENTRY AMDPRTME                GET NAME IN ESD - THIS CAN-T BE
*                                     DONE THROUGH PLS BECAUSE PROC
*                                     STMT OVERRIDES DCL
         BALR  BASE1,0
         USING *,BASE1
*   TMELAB='TIME';                  /* SET TIME LABEL IN OUTPUT    0254
*                                      BUFFER                        */
         L     @10,CURBUF                                          0254
         MVC   TMELAB(4,@10),@CC00422                              0254
*   EVEN=TODA;                      /* LOAD EVEN-ODD REGISTER PAIR   */
         L     @10,CURREC(,AEDITCBR)                               0255
         ICM   EVEN,15,TODA(@10)                                   0255
*   EVEN=EVEN+CVTTZONE;             /* WITH DOUBLE WORD TOD VALUE  0256
*                                                              Y02014*/
         ICM   @08,15,CVTTZONE(AEDITCBR)                           0256
         ALR   EVEN,@08                                            0256
*   ODD=TODB;                       /* CONVERT TO GMT                */
         ICM   ODD,15,TODB(@10)                                    0257
*   GEN(SRDL  EVEN,12);             /* SHIFT OUT LOW ORDER 12 BITS 0258
*                                      WHICH ARE UNUSED              */
         SRDL  EVEN,12
*   GEN(D  EVEN,SIXTMIL);           /* DIVIDE BY 6.0 * (10 EXP 7) TO
*                                      GET: Q - MINUTES SINCE BEGIN
*                                      OF EPOCH R - SECONDS, IN MICRO
*                                      SECS SINCE BEGIN OF EPOCH     */
         D  EVEN,SIXTMIL
*   SECONDS=EVEN/1000000;           /* SAVE SECONDS TO BE ADDED INTO
*                                      SECONDS SINCE MIDNITE         */
         L     @10,@CF00423                                        0260
         LR    @14,EVEN                                            0260
         SRDA  @14,32                                              0260
         DR    @14,@10                                             0260
         LR    SECONDS,@15                                         0260
*   EVEN=EVEN//1000000;             /* MICRO-SECONDS VALUE FOR OUTPUT*/
         LR    @14,EVEN                                            0261
         SRDA  @14,32                                              0261
         DR    @14,@10                                             0261
         LR    EVEN,@14                                            0261
*   WREG2=ADDR(TMEVAL(7));          /* POINT OT OUTPUT AREA          */
         L     WREG2,CURBUF                                        0262
         LA    WREG2,TMEVAL+6(,WREG2)                              0262
*   GEN;                                                           0263
         CVD   EVEN,WORK1              CONVERT TO DECIMAL
         UNPK  0(6,WREG2),WORK1+4(4)
         OI    5(WREG2),X'F0'          SET SIGN
*   TMEVAL(6)='.';                  /* DOT TO SEPARATE SECONDS FROM
*                                      MICRO-SECONDS                 */
*                                                                  0264
         L     @10,CURBUF                                          0264
         MVI   TMEVAL+5(@10),C'.'                                  0264
*   /*****************************************************************/
*   /*                                                               */
*   /* COMPUTE SECONDS VALUE USING MINUTES SINCE BEGINNING OF EPOCH  */
*   /* FROM ODD REGISTER                                             */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0265
*   EVEN=((ODD//1440)*60)+SECONDS;                                 0265
         LR    @14,ODD                                             0265
         SRDA  @14,32                                              0265
         D     @14,@CF00425                                        0265
         MH    @14,@CH00426                                        0265
         ALR   @14,SECONDS                                         0265
         LR    EVEN,@14                                            0265
*   WREG2=ADDR(TMEVAL(1));          /* POINT TO OUTPUT AREA          */
         LA    WREG2,TMEVAL(,@10)                                  0266
*   GEN;                                                           0267
         CVD   EVEN,WORK1              CONVERT TO DECIMAL
         UNPK  0(5,WREG2),WORK1+4(4)
         OI    4(WREG2),X'F0'          SET SIGN
*   END AMDPRTME;                                                  0268
@EL00004 DS    0H                                                  0268
@EF00004 DS    0H                                                  0268
@ER00004 LM    @14,@12,12(@13)                                     0268
         BR    @14                                                 0268
*   GEN(USING @PSTART,11);          /* RESET BASE REGISTER     Y02014*/
         USING @PSTART,11
*   END AMDPRCON                                                   0270
*                                                                  0270
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (AMDPRTAB)                                       */
*/*%INCLUDE SYSLIB  (AMDOPTWD)                                       */
*/*%INCLUDE SYSLIB  (RECMAP  )                                       */
*                                                                  0270
*       ;                                                          0270
         B     @EL00001                                            0270
@DATA    DS    0H
@CH00426 DC    H'60'
@SM00429 MVC   NUMLEBUF(0,@10),0(@15)
@SM00435 MVC   EBCDIC(0,@10),HEXDATA(CONDATA)
         DS    0F
@SA00001 DS    18F
@SA00002 DS    15F
@SA00003 DS    15F
         DS    0F
@CF00045 DC    F'1'
@CF00086 DC    F'5'
@CF00110 DC    F'6'
@CF00167 DC    F'9'
@CF00101 DC    F'24'
@CH00101 EQU   @CF00101+2
@CF00402 DC    F'35'
@CF00425 DC    F'1440'
@CF00423 DC    F'1000000'
@CF00347 DC    XL4'7FFFFFFF'
         DS    0D
UNIT     DC    F'2604'
HIGH     DC    F'1302'
FACTOR   DC    F'100000000'
SAVEBUF  DS    A
SIXTMIL  DC    F'60000000'
HOURS    DS    F
MINUTES  DS    F
OFFSET   DC    H'0'
LINES    DC    H'0'
PARTLN   DC    H'0'
CONVAMT  DC    H'0'
@CC00355 DC    C'00.00.00.000000'
@CC00422 DC    C'TIME'
SUBBUF   DS    CL10
         DS    CL3
TIMEPARM DS    CL12
         ORG   TIMEPARM
ADCVTTZ  DS    AL4
ADTODCLK DS    AL4
ADTMEBUF DS    AL4
         ORG   TIMEPARM+12
TMEBUF   DS    CL22
         ORG   TMEBUF
YEAR     DS    CL4
DAYYR    DS    CL3
TOD      DS    CL15
         ORG   TMEBUF+22
TSBUF    DS    CL133
LABAREA  DS    CL18
         ORG   LABAREA
DMPLABEL DC    CL9' '
@NM00003 DC    CL3'AID'
@NM00004 DC    CL3'FID'
@NM00005 DC    CL3'EID'
         ORG   LABAREA+18
HEXFORMT DC    CL9'HEXFORMAT'
USER     DC    CL4'USR'
SYSTEM   DC    CL6'SYSTEM'
SUBSYS   DC    CL6'SUBSYS'
RECPTCH  DC    CL200'RECPTCH'
AMDPRCON CSECT
TSPLST    FMTPTRN (LBL,LBLP),14,0,0,0,TSLABS
          FMTPTRN (LBL),4,0,22,0
          FMTPTRN (LBL),4,0,43,0
          FMTPTRN (LBL),3,0,117,0,,,LAST
TSLABS    DC    CL25'*** DATE   DAYYEARTIME***'
LDPLST    FMTPTRN (LBL,LBLP),15,0,0,0,LDLABS
          FMTPTRN (LBL),3,0,18,0
          FMTPTRN (LBL,LBLP),4,0,43,0,TSLABS+18
          FMTPTRN (LBL),3,0,117,0,,,LAST
LBPLST    FMTPTRN (LBL,LBLP),15,0,0,0,LBLABS                     Y02014
          FMTPTRN (LBL),15,0,15,0                                Y02014
          FMTPTRN (LBL),5,0,30,0                                 Y02014
          FMTPTRN (LBL,LBLP),4,0,43,0,TSLABS+18                  Y02014
          FMTPTRN (LBL),3,0,117,0,,,LAST                         Y02014
LDLABS    DC    CL21'*** LOST EVENTSNUM'
LBLABS    DC    CL35'*** ONE 4096 BYTE TRACE BUFFER LOST'        Y02014
AMDPRCON CSECT
LINEONE  FMTPTRN (LBL,LBLP),9,,0,,(LABAREA)      HEAD LABEL
* AID FIELD PATTERN
          FMTPTRN (LBL,DTA,DTAP,DTAC),3,1,10,14,,(DATAPTR,0)
* FID FIELD PATTERN
          FMTPTRN (LBL,DTA,DTAC),3,1,17,21
* EID FIELD PATTERN
          FMTPTRN (LBL,DTA,DTAP,DTAC),3,2,24,29,,(EIDPTR,0),LAST
AMDPRCON CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
TIMEADJ  EQU   @06
SECONDS  EQU   @06
I        EQU   @03
COMMONRG EQU   @12
AEDITCBR EQU   @09
PARMREG  EQU   @01
WREG2    EQU   @02
EVEN     EQU   @04
ODD      EQU   @05
RECPTR2  EQU   @03
RTNCODE  EQU   @15
CONOUTA  EQU   @02
REG3     EQU   @03
CONDATA  EQU   @04
CONLNTH  EQU   @05
REG9     EQU   @09
REG12    EQU   @12
TEMPBUF  EQU   @02
RECPTR1  EQU   @02
         ENTRY RECPTCH
AMDPRTAB EQU   0
CURREC   EQU   AMDPRTAB+4
DEBGFLGS EQU   AMDPRTAB+8
PTHFLGS1 EQU   DEBGFLGS
GET      EQU   PTHFLGS1
CON      EQU   PTHFLGS1
HEX      EQU   PTHFLGS1
PTHFLGS2 EQU   DEBGFLGS+1
INRFCFGS EQU   DEBGFLGS+2
IOFLGS   EQU   DEBGFLGS+3
GTFWDPTR EQU   AMDPRTAB+20
STARTIME EQU   AMDPRTAB+40
STOPTIME EQU   AMDPRTAB+52
NAMES    EQU   AMDPRTAB+64
ADS      EQU   AMDPRTAB+104
AADS     EQU   ADS
SIF      EQU   AMDPRTAB+124
SIOFLGS  EQU   SIF
DVADS1   EQU   AMDPRTAB+128
IO       EQU   AMDPRTAB+228
IOFLGS2  EQU   IO
DVADS2   EQU   AMDPRTAB+232
VCF      EQU   AMDPRTAB+332
SVCFLGS  EQU   VCF
USR      EQU   AMDPRTAB+368
USRFLGS  EQU   USR
USRTAB   EQU   AMDPRTAB+372
PI       EQU   AMDPRTAB+452
PIFLGS   EQU   PI
PGMNGEN  EQU   AMDPRTAB+456
GENFLAGS EQU   PGMNGEN+3
GENFLGS1 EQU   AMDPRTAB+460
TS       EQU   GENFLGS1
FIRSTHSW EQU   GENFLGS1
AFRMAD   EQU   AMDPRTAB+488
ADTSBUF  EQU   AMDPRTAB+496
ESTARTME EQU   AMDPRTAB+500
ESTOPTME EQU   AMDPRTAB+509
CVTTZONE EQU   AMDPRTAB+518
AMDOPTWD EQU   0
OPTS1    EQU   AMDOPTWD
OPTS2    EQU   AMDOPTWD+1
OPTS3    EQU   AMDOPTWD+2
OPTS4    EQU   AMDOPTWD+3
OPTTIME  EQU   OPTS4
FRMATAB  EQU   0
AGET     EQU   FRMATAB
AHEX     EQU   FRMATAB+4
ACON     EQU   FRMATAB+8
AFLT     EQU   FRMATAB+12
AAPP     EQU   FRMATAB+16
AEXT     EQU   FRMATAB+20
ASPI     EQU   FRMATAB+28
ATME     EQU   FRMATAB+32
PRTME    EQU   0
RECMAP   EQU   0
RECFID   EQU   RECMAP+5
RECTIME  EQU   RECMAP+6
RECVTTZ  EQU   RECTIME
RECTOD   EQU   RECTIME+4
RECGTFOP EQU   RECMAP+18
RECLSTEV EQU   RECGTFOP
SVHKREC  EQU   0
SVHKDATA EQU   SVHKREC+6
AMDPRGFR EQU   0
NUMLEBUF EQU   23
DAYBUF   EQU   16
YRBUF    EQU   28
TIMEBUF  EQU   49
TODCNVRT EQU   0
RECPART1 EQU   0
LENGTH   EQU   RECPART1
HEXAID   EQU   RECPART1+4
HEXFID   EQU   RECPART1+5
RECPART2 EQU   0
HEXEID   EQU   RECPART2
EIDFRST  EQU   HEXEID
HEXDATA  EQU   RECPART2+2
DATA     EQU   0
@NM00007 EQU   94
AST1     EQU   @NM00007
EBCDIC   EQU   @NM00007+1
AST2     EQU   @NM00007+25
@NM00008 EQU   86
AST1LONG EQU   @NM00008
EBCDICL  EQU   @NM00008+1
AST2LONG EQU   @NM00008+33
TMEMAP   EQU   11
TMELAB   EQU   TMEMAP
TMEVAL   EQU   TMEMAP+8
PREFIX   EQU   0
TODA     EQU   PREFIX+6
TODB     EQU   PREFIX+10
BLDBUF   EQU   1
PRAPP    EQU   0
PRCON    EQU   0
PREXT    EQU   0
PRFLT    EQU   0
PRGET    EQU   0
PRHEX    EQU   0
PRSPI    EQU   0
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
@NM00010 EQU   PREFIX
@NM00009 EQU   TMEMAP+4
HEXTIME  EQU   RECPART1+6
@NM00006 EQU   RECPART1+2
SVHKTCB  EQU   SVHKDATA+4
SVHKASID EQU   SVHKDATA+2
SVHKEID  EQU   SVHKDATA
SVHKAFID EQU   SVHKREC+4
@NM00002 EQU   SVHKREC+2
SVHKLEN  EQU   SVHKREC
RECAID   EQU   RECMAP+4
RECRES1  EQU   RECMAP+2
RECLL    EQU   RECMAP
FRMRES1  EQU   FRMATAB+36
APRFMG   EQU   FRMATAB+24
OPTRES3  EQU   OPTS4
OPTIOSIO EQU   OPTS3
OPTRES2  EQU   OPTS3
OPTRR    EQU   OPTS3
OPTSRM   EQU   OPTS3
OPTRNIO  EQU   OPTS3
OPTEXT   EQU   OPTS3
OPTIOP   EQU   OPTS2
OPTIO    EQU   OPTS2
OPTPIP   EQU   OPTS2
OPTPI    EQU   OPTS2
OPTSIOP  EQU   OPTS2
OPTSIO   EQU   OPTS2
OPTSVCP  EQU   OPTS2
OPTSVC   EQU   OPTS2
OPTPCI   EQU   OPTS1
OPTRES1  EQU   OPTS1
OPTDSP   EQU   OPTS1
OPTTRC   EQU   OPTS1
OPTUSR   EQU   OPTS1
OPTSYS   EQU   OPTS1
OPTSYSP  EQU   OPTS1
OPTSYSM  EQU   OPTS1
RESERVED EQU   AMDPRTAB+522
ESPSEC   EQU   ESTOPTME+7
ESPMIN   EQU   ESTOPTME+5
ESPHR    EQU   ESTOPTME+3
ESPDAY   EQU   ESTOPTME
ESSEC    EQU   ESTARTME+7
ESMIN    EQU   ESTARTME+5
ESHR     EQU   ESTARTME+3
ESDAY    EQU   ESTARTME
OFSTDATA EQU   AMDPRTAB+494
OFSTEID  EQU   AMDPRTAB+492
REENTWKA EQU   AMDPRTAB+484
PRFMTADD EQU   AMDPRTAB+480
AEIOCT   EQU   AMDPRTAB+476
EXITADDR EQU   AMDPRTAB+472
EXITNM   EQU   AMDPRTAB+464
RECDLL   EQU   AMDPRTAB+461
@NM00001 EQU   GENFLGS1
TSFOUND  EQU   GENFLGS1
EOFINPRO EQU   GENFLGS1
EOF      EQU   GENFLAGS
RR       EQU   GENFLAGS
SRM      EQU   GENFLAGS
RNIO     EQU   GENFLAGS
SYSM     EQU   GENFLAGS
SYS      EQU   GENFLAGS
DSP      EQU   GENFLAGS
EXT      EQU   GENFLAGS
PICODEA  EQU   PGMNGEN+2
PICODES  EQU   PGMNGEN
Q        EQU   PI+1
P01R     EQU   PIFLGS
SELP     EQU   PIFLGS
ALLP     EQU   PIFLGS
USRNGTAB EQU   USRTAB
O        EQU   USR+1
N01R     EQU   USRFLGS
SELU     EQU   USRFLGS
ALLU     EQU   USRFLGS
SVCNUMS  EQU   AMDPRTAB+336
M        EQU   VCF+1
L        EQU   SVCFLGS
SELV     EQU   SVCFLGS
ALLV     EQU   SVCFLGS
IODVADS  EQU   DVADS2
K01RES   EQU   IO+1
JJ       EQU   IOFLGS2
SELI     EQU   IOFLGS2
ALLI     EQU   IOFLGS2
SIODVADS EQU   DVADS1
II       EQU   SIF+1
H        EQU   SIOFLGS
NOEQU    EQU   SIOFLGS
EQUIV    EQU   SIOFLGS
SELS     EQU   SIOFLGS
ALLS     EQU   SIOFLGS
ASCBADDR EQU   AADS
JOBNAMES EQU   NAMES
DAY2     EQU   STOPTIME+10
F        EQU   STOPTIME+8
TIME2    EQU   STOPTIME
DAY      EQU   STARTIME+10
D        EQU   STARTIME+8
TIME     EQU   STARTIME
DDNAME   EQU   AMDPRTAB+32
USEREXIT EQU   AMDPRTAB+24
C        EQU   DEBGFLGS+4
B        EQU   IOFLGS
GETEOF   EQU   IOFLGS
DMDFMT   EQU   INRFCFGS
EDITSTOP EQU   INRFCFGS
EXTTRC   EQU   INRFCFGS
RET      EQU   INRFCFGS
FMT      EQU   INRFCFGS
SPIE     EQU   INRFCFGS
TERM     EQU   INRFCFGS
FLMODE   EQU   INRFCFGS
REMAIN   EQU   PTHFLGS2
APP      EQU   PTHFLGS2
REXT     EQU   PTHFLGS1
FRM      EQU   PTHFLGS1
FLT      EQU   PTHFLGS1
SCN      EQU   PTHFLGS1
ROOT     EQU   PTHFLGS1
AFMG     EQU   AMDPRTAB
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RT00076 EQU   AMDPRTS
@RT00078 EQU   AMDPRLD
@RT00080 EQU   AMDPRLB
@RT00089 EQU   AMDLJUST
@RT00163 EQU   AMDSHORT
@RF00169 EQU   AMDCKLN
@RT00179 EQU   PRINTTME
@RC00200 EQU   @EL00002
AMDEND   EQU   @EL00003
@RT00238 EQU   AMDEND
@ENDDATA EQU   *
         END   AMDPRCON,(C'PLS1856',0603,76159)
