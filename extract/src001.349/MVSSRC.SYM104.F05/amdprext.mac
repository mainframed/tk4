         TITLE 'AMDPREXT - EDIT USER EXIT INTERFACE MODULE             *
                        '
AMDPREXT CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'AMDPREXT  75.049'                                 0001
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                     0001
         BALR  @11,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,@11                                         0001
         ST    @13,@SA00001+4                                      0001
         LA    @14,@SA00001                                        0001
         ST    @14,8(,@13)                                         0001
         LR    @13,@14                                             0001
         EQUATES                        AMDPRDMP EQU MACRO
         COMMON                         EXPANDS TO AMDPRCOM TABLE
         USING COMMON,COMBASE           SET UP DSECT FOR AMDPRCOM
         SYNEPS                         EP MAP OF AMDPRSYN
AMDPREXT CSECT                          RE-ESTABLISH AMDPREXT CSECT
         USING SYNTAX,R15               ESTABLISH SYNEPS ADDRESSING
*   AEDITCBR=AEDITCB;               /* SET BASE FOR AMDPRTAB         */
         L     AEDITCBR,AEDITCB                                    0054
*   REXT='1'B;                      /* INDICATE AMDPREXT NOW       0055
*                                      PROCESSING                    */
         OI    REXT(AEDITCBR),B'00000001'                          0055
*   SPIESAVE=SVAREA;                /* FOR SPIE RECOVERY             */
         L     @14,@CA00211                                        0056
         L     @10,SVAREA(,AREAPTR)                                0056
         ST    @10,SPIESAVE-SPIESAVE(,@14)                         0056
*   NSISAVE=COMPTR;                 /* SAVE ADDRS OF AMDPRCOM        */
         L     @14,@CA00212                                        0057
         ST    COMPTR,NSISAVE-NSISAVE(,@14)                        0057
*   PARMREG=ADDR(USEREXIT);         /* COMPLIMENT ADDRS OF USER EXIT
*                                      NAME                          */
         LA    PARMREG,USEREXIT(,AEDITCBR)                         0058
*   PARMREG=PARMREG×'80000000'X;    /* TURN ON HIGH ORDER BIT        */
         O     PARMREG,@CF00262                                    0059
*   CALL AMDPRSEG;                  /* ATTEMPT TO HAVE USER EXIT   0060
*                                      LOADED                        */
         L     @15,ALOADER                                         0060
         BALR  @14,@15                                             0060
*   CODESAVE=RCREG;                 /* SAVE RETURN CODE FROM SEG     */
         ST    RCREG,CODESAVE                                      0061
*   IF CODESAVE=4 THEN                                             0062
         L     @14,CODESAVE                                        0062
         C     @14,@CF00097                                        0062
         BNE   @RF00062                                            0062
*     DO;                           /* SEG - NOT 10 K AVAILIBLE      */
*       SYNMSGA=ADDR(AMDPRE12);     /* ADDR OF MSG AMD229I           */
         L     @14,AFMG(,AEDITCBR)                                 0064
         LA    @14,AMDPRE12(,@14)                                  0064
         ST    @14,SYNMSGA                                         0064
*       ERRBUF(20:27)=USEREXIT;     /* MOVE IN RTN NAME              */
         L     @14,MSGADDR(,@14)                                   0065
         MVC   ERRBUF+19(8,@14),USEREXIT(AEDITCBR)                 0065
*       GEN(OI SWD,NOSTDMG);        /* TURN ON NO STND MSG BIT       */
         OI SWD,NOSTDMG
*       RCREG=ASYNTAX;              /* POINT TO MSG WRITER -SYN      */
         L     RCREG,ASYNTAX                                       0067
*       CALL SYNTAXA;               /* OUTPUT 10 K MSG               */
         BAL   @14,SYNTAXA                                         0068
*     END;                                                         0069
*   SYNMSGA=ADDR(AMDPRE03);         /* INIT MESSAGE POINTER - SET UP
*                                      AFTER CALL TO SEG WILL CLOBBER
*                                      SYNMSGA                       */
@RF00062 L     @14,AFMG(,AEDITCBR)                                 0070
         LA    @14,AMDPRE03(,@14)                                  0070
         ST    @14,SYNMSGA                                         0070
*   IF CODESAVE^=0 THEN             /* UNSUCCESSFUL LOAD- BRANCH     */
         L     @14,CODESAVE                                        0071
         LTR   @14,@14                                             0071
         BNZ   @RT00071                                            0071
*     GOTO AMDEXT01;                /* TO TERMINATION ROUTINE        */
*/********************************************************************/
*/*                                                                  */
*/* USER EXIT SUCCESSFULLY LOADED OR ALREADY IN CORE                 */
*/*                                                                  */
*/********************************************************************/
*                                                                  0073
*   EXITADDR=PARMREG;               /* SAVE USER EXIT ENTRY POINT  0073
*                                      ADDRESS                       */
         ST    PARMREG,EXITADDR(,AEDITCBR)                         0073
*   EXITNM=USEREXIT;                /* SAVE USER EXIT NAME           */
         MVC   EXITNM(8,AEDITCBR),USEREXIT(AEDITCBR)               0074
*AMDPNLOD:                                                         0075
*   IF EOFINPRO='1'B THEN           /* EOF IN PROCESS          Y02014*/
AMDPNLOD TM    EOFINPRO(AEDITCBR),B'01000000'                      0075
         BNO   @RF00075                                            0075
*     DO;                           /* YES                     Y02014*/
*       RECPTR=0;                   /* NO INPUT RECORD         Y02014*/
         SLR   @14,@14                                             0077
         ST    @14,RECPTR                                          0077
*       BUFPTR=CURBUF+1;            /* ADDR OUTPUT BUFF        Y02014*/
         LA    @10,1                                               0078
         AL    @10,CURBUF                                          0078
         ST    @10,BUFPTR                                          0078
*       GTFOPTR=0;                  /* ADDR GTF OPT WD         Y02014*/
         ST    @14,GTFOPTR                                         0079
*       EIDPTR=0;                   /* NO EID PTR              Y02014*/
         ST    @14,EIDPTR                                          0080
*       DATAPTR=0;                  /* NO DATA PTR             Y02014*/
         ST    @14,DATAPTR                                         0081
*       GO TO AMDPCAL;              /* GO CALL USER            Y02014*/
         B     AMDPCAL                                             0082
*     END;                          /* END OF DO               Y02014*/
*   TEMPREC(1:256)='';              /* CLEAR TEMPORARY BUF     Y02014*/
@RF00075 MVI   TEMPREC,C' '                                        0084
         MVC   TEMPREC+1(255),TEMPREC                              0084
*   TEMPREC(257:284)='';            /* CLEAR REMAINDER         Y02014*/
         MVI   TEMPREC+256,C' '                                    0085
         MVC   TEMPREC+257(27),TEMPREC+256                         0085
*   IF RECDLL<=256 THEN             /* NEED 2 MOVES            Y02014*/
         L     @14,RECDLL-1(,AEDITCBR)                             0086
         LA    @14,0(,@14)                                         0086
         C     @14,@CF00119                                        0086
         BH    @RF00086                                            0086
*     TEMPREC(1:RECDLL)=RECBASE(1:RECDLL);/* NO                Y02014*/
         BCTR  @14,0                                               0087
         L     @10,CURREC(,AEDITCBR)                               0087
         EX    @14,@SM00313                                        0087
*   ELSE                                                           0088
*     DO;                           /* YES                     Y02014*/
         B     @RC00086                                            0088
@RF00086 DS    0H                                                  0089
*       TEMPREC(1:256)=RECBASE(1:256);/* MOVE IN 256 BYTES     Y02014*/
         L     @14,CURREC(,AEDITCBR)                               0089
         MVC   TEMPREC(256),RECBASE(@14)                           0089
*       TEMPREC(257:RECDLL)=RECBASE(257:RECDLL);/* MOVE REMAINDER    */
         L     @10,RECDLL-1(,AEDITCBR)                             0090
         LA    @10,0(,@10)                                         0090
         SL    @10,@CF00270                                        0090
         EX    @10,@SM00315                                        0090
*     END;                          /*                         Y02014*/
*/********************************************************************/
*/*                                                                  */
*/* CONSTRUCT PARAMETER LIST                                         */
*/*                                                                  */
*/********************************************************************/
*                                                                  0092
*   RECPTR=ADDR(TEMPREC);           /* WORD 1- ADDRS INPUT REC       */
@RC00086 LA    @14,TEMPREC                                         0092
         ST    @14,RECPTR                                          0092
*   BUFPTR=CURBUF+1;                /* WORD 2- ADDRS OUTPUT BUF      */
         LA    @10,1                                               0093
         AL    @10,CURBUF                                          0093
         ST    @10,BUFPTR                                          0093
*   GTFOPTR=GTFWDPTR;               /* WORD 3- ADDRS GTF OPTIONS   0094
*                                                              Y02014*/
         L     @10,GTFWDPTR(,AEDITCBR)                             0094
         ST    @10,GTFOPTR                                         0094
*   EIDPTR=RECPTR+OFSTEID-1;        /* WORD 4- ADDRS EID INP REC     */
         LH    @10,OFSTEID(,AEDITCBR)                              0095
         LR    @08,@14                                             0095
         ALR   @08,@10                                             0095
         BCTR  @08,0                                               0095
         ST    @08,EIDPTR                                          0095
*   IF(INREC(OFSTEID)&'F0'X)='E0'X THEN/*                    @YM07434*/
         L     @08,CURREC(,AEDITCBR)                               0096
         ALR   @08,@10                                             0096
         AL    @08,@CF00317                                        0096
         MVC   @TS00001(1),INREC(@08)                              0096
         NI    @TS00001,X'F0'                                      0096
         CLI   @TS00001,X'E0'                                      0096
         BNE   @RF00096                                            0096
*     DATAPTR=RECPTR+OFSTDATA+11;   /* WORD 5-ADDRS DATA INP REC   0097
*                                                            @YM07434*/
         AH    @14,OFSTDATA(,AEDITCBR)                             0097
         AL    @14,@CF00273                                        0097
         ST    @14,DATAPTR                                         0097
*   ELSE                                                           0098
*     DATAPTR=RECPTR+OFSTDATA-1;    /* WORD 5 DATA @ INP REC @ZA02752*/
         B     @RC00096                                            0098
@RF00096 LH    @14,OFSTDATA(,AEDITCBR)                             0098
         AL    @14,RECPTR                                          0098
         BCTR  @14,0                                               0098
         ST    @14,DATAPTR                                         0098
*/********************************************************************/
*/*                                                                  */
*/* PREPARE TO CALL USER EXIT                                        */
*/*                                                                  */
*/********************************************************************/
*                                                                  0099
*AMDPCAL:                                                          0099
*   IF EDITER^=3 THEN                                              0099
@RC00096 DS    0H                                                  0099
AMDPCAL  CLI   EDITER,3                                            0099
         BE    @RF00099                                            0099
*     DO;                           /* ISSUE INCLUSIVE SPIE TO MASK
*                                      OUT USER PROGRAM CHECKS       */
*       WREG2=ASPI;                 /* ADDRS OF AMDPRSPI             */
         L     @14,AFRMAD(,AEDITCBR)                               0101
         L     WREG2,ASPI(,@14)                                    0101
*       GEN(SPIE  (R2),((1,15)));   /* SPIE FOR ALL PROG CHECKS      */
         SPIE  (R2),((1,15))
*       PICASAVE=PARMREG;           /* SAVE ADDRS OF PREV PICA       */
         L     @14,@CA00214                                        0103
         ST    PARMREG,PICASAVE-PICASAVE(,@14)                     0103
*     END;                                                         0104
*   IF EOFINPRO='1'B THEN           /* EOF IN PROCESS          Y02014*/
@RF00099 TM    EOFINPRO(AEDITCBR),B'01000000'                      0105
         BNO   @RF00105                                            0105
*     WREG2=4;                      /* INDICATE EOF            Y02014*/
         LA    WREG2,4                                             0106
*   ELSE                                                           0107
*     WREG2=0;                      /* INDICATE NO EOF         Y02014*/
         B     @RC00105                                            0107
@RF00105 SLR   WREG2,WREG2                                         0107
*   PARMREG=ADDR(PARMLIST);         /* REG1 POINTS TO PARMLIST       */
@RC00105 LA    PARMREG,PARMLIST                                    0108
*   GEN(STM R0,R14,LOCAREA);        /* SAVE OWN REGISTERS            */
         STM R0,R14,LOCAREA
*   CALL EXITRTN;                   /* CALL USER EXIT                */
         L     @15,EXITADDR(,AEDITCBR)                             0110
         BALR  @14,@15                                             0110
*/********************************************************************/
*/*                                                                  */
*/* RETURN FROM USER EXIT- ANALYZE RESULTS                           */
*/*                                                                  */
*/********************************************************************/
*                                                                  0111
*   GEN;                                                           0111
         BALR  R2,R0                    ESTABLISH TEMP ADDRESSABILITY
         USING *,R2                     IN CASE USEREXIT DESTROYED REGS
         LM    R0,R14,LOCAREA           RESTORE REGS
         DROP  R2                       RE-ESTABLISH ORIG BASE REG
*   WREG2=RCREG;                    /* SAVE EXIT RETURN CODE         */
         LR    WREG2,RCREG                                         0112
*   IF EDITER^=3 THEN               /* ISSUED SPIE             Y02014*/
         CLI   EDITER,3                                            0113
         BE    @RF00113                                            0113
*     DO;                           /* YES                     Y02014*/
*       PARMREG=PICASAVE;           /* PREVIOUS PICA ADDRESS         */
         L     @14,@CA00214                                        0115
         L     PARMREG,PICASAVE-PICASAVE(,@14)                     0115
*       GEN(SPIE  MF=(E,(R1)));     /* RESTORE PREVIOUS PICA         */
         SPIE  MF=(E,(R1))
*     END;                                                         0117
*   CODESAVE=WREG2;                 /* SAVE FOR FUTURE USE           */
@RF00113 ST    WREG2,CODESAVE                                      0118
*/********************************************************************/
*/*                                                                  */
*/* CHECK FOR VALID EXIT RETURN CODE AND SERVICE REQUEST             */
*/*                                                                  */
*/********************************************************************/
*                                                                  0119
*   IF WREG2>28 THEN                /* RETURN CODE INVALID-          */
         C     WREG2,@CF00275                                      0119
         BH    @RT00119                                            0119
*     GOTO AMDPRCIV;                /* ISSUE DIAGNOSTIC              */
*   WREG3=WREG2//4;                 /* A VALID RETURN CODE     SHOULD*/
         LR    @04,WREG2                                           0121
         SRDA  @04,32                                              0121
         D     @04,@CF00097                                        0121
         LR    WREG3,@04                                           0121
*   IF WREG3^=0 THEN                /* BE DIVISIBLE BY FOUR          */
         SLR   @14,@14                                             0122
         CR    WREG3,@14                                           0122
         BNE   @RT00122                                            0122
*     GOTO AMDPRCIV;                /* INVALID RETURN CODE           */
*   IF EOFINPRO='1'B THEN           /* EOF IN PROCESS          Y02014*/
         TM    EOFINPRO(AEDITCBR),B'01000000'                      0124
         BNO   @RF00124                                            0124
*     DO;                           /* YES                     Y02014*/
*       IF WREG2^=0&WREG2^=4&WREG2^=8 THEN/* RC=0 OR 4 OR 8    Y02014*/
         CR    WREG2,@14                                           0126
         BE    @RF00126                                            0126
         C     WREG2,@CF00097                                      0126
         BE    @RF00126                                            0126
         C     WREG2,@CF00041                                      0126
         BNE   @RT00126                                            0126
*         GO TO AMDPRCIV;           /* NO                      Y02014*/
*       IF WREG2=8 THEN             /* RC=8                    Y02014*/
@RF00126 C     WREG2,@CF00041                                      0128
         BNE   @RF00128                                            0128
*         WREG2=12;                 /* CONVERT RC FOR CODE     Y02014*/
         LA    WREG2,12                                            0129
*       IF(FIRSTME='0'B)&(WREG2=0×WREG2=4) THEN                    0130
@RF00128 TM    FIRSTME,B'10000000'                                 0130
         BNZ   @RF00130                                            0130
         LTR   WREG2,WREG2                                         0130
         BZ    @RT00130                                            0130
         C     WREG2,@CF00097                                      0130
         BNE   @RF00130                                            0130
@RT00130 DS    0H                                                  0131
*         DO;                       /* NEED TO SKIP PAGE       Y02014*/
*           GEN(BRWRITE SKIP);      /* SKIP PAGE               Y02014*/
         BRWRITE SKIP
*           FIRSTME='1'B;           /* INDICATE PAGE SKIPED    Y02014*/
         OI    FIRSTME,B'10000000'                                 0133
*         END;                                                     0134
*     END;                                                         0135
*                                                                  0135
@RF00130 DS    0H                                                  0136
*/* RETURN CODE IS VALID- SERVICE REQUEST                            */
*                                                                  0136
*   GENERATE;                                                      0136
*                                                                  0136
@RF00124 DS    0H                                                  0136
AMDPCOD  B     BRTAB(R2)                SELECT APPROPRIATE BRANCH
BRTAB    B     AMDPRC0                  RETURN CODE = 0
         B     AMDPRC4                  RETURN CODE = 4
         B     AMDPRC8                  RETURN CODE = 8
         B     AMDPRC12                 RETURN CODE = 12
         B     AMDPRC16                 RETURN CODE = 16
         B     AMDPRC20                 RETURN CODE = 20
         B     AMDPRC24                 RETURN CODE = 24
         B     AMDPRC28                 RETURN CODE = 28
*/********************************************************************/
*/*                                                                  */
*/* FOLLOWING ROUTINES SERVICE USER REQUESTS UPON RETURN FROM        */
*/* USER EXIT ROUTINE                                                */
*/*                                                                  */
*/********************************************************************/
*                                                                  0137
*AMDPRC0:                           /* RETURN CODE 0 ROUTINE         */
*   CALL AMDTMCHK;                  /* OUTPUT TIME STMP, IF NEC      */
AMDPRC0  BAL   @14,AMDTMCHK                                        0137
*   GEN(BRWRITE 1);                 /* PRINT OUTPUT BUFFER           */
         BRWRITE 1
*   BUFPTR=CURBUF+1;                /* UPDATE CURRENT OUTPUT BUFFER
*                                      IN PARM LIST                  */
         LA    @14,1                                               0139
         AL    @14,CURBUF                                          0139
         ST    @14,BUFPTR                                          0139
*   GOTO AMDPCAL;                   /* RE-CALL USER EXIT             */
         B     AMDPCAL                                             0140
*AMDPRC4:                           /* RETURN CODE 4 ROUTINE         */
*   CALL AMDTMCHK;                  /* OUTPUT TIME STMP, IF NEC      */
AMDPRC4  BAL   @14,AMDTMCHK                                        0141
*   GEN(BRWRITE 1);                 /* PRINT OUTPUT BUFFER           */
         BRWRITE 1
*AMDPRC12:                          /* RETURN CODE 12 ROUTINE        */
*   OUTBUF=' ';                     /* CLEAR OUTPUT BUFFER IN CASE 0143
*                                      EXIT HAS ENTERED DATA WHICH 0143
*                                      HAS NOT BEEN PRINTED          */
AMDPRC12 L     @14,CURBUF                                          0143
         MVI   OUTBUF+1(@14),C' '                                  0143
         MVC   OUTBUF+2(118,@14),OUTBUF+1(@14)                     0143
         MVI   OUTBUF(@14),C' '                                    0143
*   REXT='0'B;                      /* INDICATE EXT TERMINATION      */
         NI    REXT(AEDITCBR),B'11111110'                          0144
*   RETURN;                         /* RETURN TO CALLER              */
@EL00001 L     @13,4(,@13)                                         0145
@EF00001 DS    0H                                                  0145
@ER00001 LM    @14,@12,12(@13)                                     0145
         BR    @14                                                 0145
*AMDPRC8:                           /* RETURN CODE 8 ROUTINE         */
*   FMT='1'B;                       /* INDICATE FORMAT REQUIRED      */
AMDPRC8  OI    FMT(AEDITCBR),B'00010000'                           0146
*   GOTO AMDPRC12;                  /* RETURN PROCEDURES             */
         B     AMDPRC12                                            0147
*AMDPRC16:                          /* RETURN CODE 16 ROUTINE        */
*   CALL AMDTMCHK;                  /* OUTPUT TIME STMP, IF NEC      */
AMDPRC16 BAL   @14,AMDTMCHK                                        0148
*   GEN(BRWRITE 1);                 /* PRINT OUTPUT BUFFER           */
         BRWRITE 1
*AMDPR16A:                                                         0150
*   USEREXIT=' ';                   /* DELETE USER EXIT              */
AMDPR16A MVI   USEREXIT+1(AEDITCBR),C' '                           0150
         MVC   USEREXIT+2(6,AEDITCBR),USEREXIT+1(AEDITCBR)         0150
         MVI   USEREXIT(AEDITCBR),C' '                             0150
*   OUTBUF(1:33)=UNUMMSG2;          /* EXIT DELETED MSG INTO OUTPUT
*                                      BUFFER                        */
         L     @14,CURBUF                                          0151
         MVC   OUTBUF(33,@14),UNUMMSG2                             0151
*   GEN(BRWRITE 1);                 /* PRINT MESSAGE                 */
         BRWRITE 1
*   GOTO AMDPRC12;                  /* RETURN PROCEDURES             */
         B     AMDPRC12                                            0153
*AMDPRC20:                          /* RETURN CODE 20 ROUTINE        */
*   FMT='1'B;                       /* INDICATE FORMAT REQUIRED      */
AMDPRC20 OI    FMT(AEDITCBR),B'00010000'                           0154
*   GOTO AMDPR16A;                  /* DELETE EXIT AND RETURN        */
         B     AMDPR16A                                            0155
*AMDPRC24:                          /* RETURN CODE 24 ROUTINE        */
*   OUTBUF(1:36)=UNUMMSG1;          /* EDIT TERMINATED MSG INTO    0156
*                                      OUTPUT BUFFER                 */
AMDPRC24 L     @14,CURBUF                                          0156
         MVC   OUTBUF(36,@14),UNUMMSG1                             0156
*   GEN(BRWRITE 1);                 /* PRINT MESSAGE                 */
         BRWRITE 1
*   GOTO AMDEX01A;                  /* TERMINATE EDIT                */
         B     AMDEX01A                                            0158
*AMDPRC28:                          /* RETURN CODE 28, EXIT WANTS  0159
*                                      TRACE RECORD FORMATED       0159
*                                      REGARDLESS OF SELECTIVITY     */
*   DMDFMT='1'B;                    /* SET DEMAND FORMAT SW          */
AMDPRC28 OI    DMDFMT(AEDITCBR),B'00000001'                        0159
*   GOTO AMDPRC12;                  /* GO RETURN TO APP              */
         B     AMDPRC12                                            0160
*AMDEXT01:                                                         0161
*   GEN(OI    SWD,NOSTDMG);         /* SET NO STANDARD MESSAGE SW    */
AMDEXT01 OI    SWD,NOSTDMG
*   RCREG=ASYNTAX;                  /* POINT TO MSG WRITER - SYN     */
         L     RCREG,ASYNTAX                                       0162
*   CALL SYNTAXC;                   /* ISSUE EDIT TERM MESSAGE       */
         BAL   @14,SYNTAXC                                         0163
*AMDEX01A:                                                         0164
*   IF EOFINPRO^='1'B THEN          /* EOF IN PROCESS          Y02014*/
AMDEX01A TM    EOFINPRO(AEDITCBR),B'01000000'                      0164
         BO    @RF00164                                            0164
*     TERM='1'B;                    /* TERMINATE EDIT                */
         OI    TERM(AEDITCBR),B'01000000'                          0165
*   GOTO AMDPRC12;                  /* RETURN PROCEDURES             */
         B     AMDPRC12                                            0166
*AMDPRCIV:                                                         0167
*   OUTBUF=' ';                     /* BLANK OUTPUT BUFFER           */
AMDPRCIV L     @14,CURBUF                                          0167
         MVI   OUTBUF+1(@14),C' '                                  0167
         MVC   OUTBUF+2(118,@14),OUTBUF+1(@14)                     0167
         MVI   OUTBUF(@14),C' '                                    0167
*   GEN(BRWRITE SKIP);              /* SKIP TO NEW PAGE              */
         BRWRITE SKIP
*   WREG2=ADDR(CODESAVE);           /* REG 2 POINTS TO EXIT RC       */
         LA    WREG2,CODESAVE                                      0169
*   WREG3=ADDR(M212COD);            /* REG 3 POINTS TO MESSAGE CODE
*                                      FIELD                         */
         L     @14,SYNMSGA                                         0170
         L     WREG3,MSGPTR1(,@14)                                 0170
         LA    WREG3,M212COD(,WREG3)                               0170
*   GEN(HEXCNVT (3),(2),4);         /* RET CODE TO PRINTABLE HEX     */
         HEXCNVT (3),(2),4
*   M212MOD=USEREXIT;               /* EXIT NAME TO MESSAGE FIELD    */
         L     @14,SYNMSGA                                         0172
         L     @14,MSGPTR1(,@14)                                   0172
         MVC   M212MOD(8,@14),USEREXIT(AEDITCBR)                   0172
*   M212PAG=PAGENO;                 /* MOVE IN PAGE NO FROM COM      */
         MVC   M212PAG(4,@14),PAGENO                               0173
*   GEN(OI    SWD,NOSTDMG);         /* INDICATE MSG AMD165I NOT    0174
*                                      REQUIRED                      */
         OI    SWD,NOSTDMG
*   RCREG=ASYNTAX;                  /* POINT TO MSG WRITER - SYN     */
         L     RCREG,ASYNTAX                                       0175
*   CALL SYNTAXA;                   /* ISSUE BAD RET CODE MESSAGE    */
         BAL   @14,SYNTAXA                                         0176
*   IF EOFINPRO='1'B THEN           /* EOF IN PROCESS          Y02014*/
         TM    EOFINPRO(AEDITCBR),B'01000000'                      0177
         BO    @RT00177                                            0177
*     GO TO AMDPRC12;               /* RETURN PROCEDURE        Y02014*/
*   IF EDITER=0×EDITER=1            /* TERMINATION REQUIRED?         */
*     THEN                                                         0179
         CLI   EDITER,0                                            0179
         BE    @RT00179                                            0179
         CLI   EDITER,1                                            0179
         BE    @RT00179                                            0179
*     GOTO AMDEXT02;                /* NOT TO BE TERMINATED          */
*/* TERMINATE EDIT DUE TO INVALID RETURN CODE FROM EXIT ROUTINE      */
*                                                                  0181
*   GEN(OI    SWD,NOSTDMG);         /* SET NO STANDARD MESSAGE SW    */
         OI    SWD,NOSTDMG
*   RCREG=ASYNTAX;                  /* POINT TO MSG WRITER - SYN     */
         L     RCREG,ASYNTAX                                       0182
*   CALL SYNTAXC;                   /* ISSUE EDIT TERM MESSAGE       */
         BAL   @14,SYNTAXC                                         0183
*   TERM='1'B;                      /* EDIT TERMINATION SW           */
         OI    TERM(AEDITCBR),B'01000000'                          0184
*   GOTO AMDEX02A;                  /* TO RETURN PROCEDURES          */
         B     AMDEX02A                                            0185
*AMDEXT02:                                                         0186
*   M213MOD=USEREXIT;               /* EXIT NAME TO MESSAGE FIELD    */
AMDEXT02 L     @14,SYNMSGA                                         0186
         L     @14,MSGPTR2(,@14)                                   0186
         MVC   M213MOD(8,@14),USEREXIT(AEDITCBR)                   0186
*   GEN(OI    SWD,NOSTDMG);         /* SET NO STANDARD MESSAGE SW    */
         OI    SWD,NOSTDMG
*   RCREG=ASYNTAX;                  /* POINT TO MSG WRITER - SYN     */
         L     RCREG,ASYNTAX                                       0188
*   CALL SYNTAXB;                   /* ISSUE INTERFACE IGNORED     0189
*                                      MESSAGE                       */
         BAL   @14,SYNTAXB                                         0189
*AMDEX02A:                                                         0190
*   USEREXIT=' ';                   /* DELETE USER EXIT              */
AMDEX02A MVI   USEREXIT+1(AEDITCBR),C' '                           0190
         MVC   USEREXIT+2(6,AEDITCBR),USEREXIT+1(AEDITCBR)         0190
         MVI   USEREXIT(AEDITCBR),C' '                             0190
*   CALL PRHEX;                     /* DUMP CURRENT TRACE RECORD     */
         L     @10,AFRMAD(,AEDITCBR)                               0191
         L     @15,AHEX(,@10)                                      0191
         BALR  @14,@15                                             0191
*   OUTBUF=' ';                     /* BLANK OUTPUT BUFFER           */
         L     @14,CURBUF                                          0192
         MVI   OUTBUF+1(@14),C' '                                  0192
         MVC   OUTBUF+2(118,@14),OUTBUF+1(@14)                     0192
         MVI   OUTBUF(@14),C' '                                    0192
*   GEN(BRWRITE SKIP);              /* SKIP TO NEW PAGE              */
         BRWRITE SKIP
*   GOTO AMDPRC12;                  /* RETURN PROCEDURES             */
         B     AMDPRC12                                            0194
*/****************************************************************** */
*/*    DETERMINES IF A TIME STAMP RECORD IS TO BE OUTPUTTED          */
*/*    BEFORE THE CURRENT TRACE RECORD.IF SO THE CURRENT OUTPUT      */
*/*    BUFFER POINTER MUST BE MODIFIED TO ADDRESS                    */
*/*    THE TIME STAMP BUFFER (THIS ADDRESS IS CONTAINED IN ADTSBUF)  */
*/*    THE TIME STAMP NEEDED SWITCH IS TURNED OFF BEFORE RETURN.     */
*/********************************************************************/
*                                                                  0195
*AMDTMCHK:                                                         0195
*   PROC;                                                          0195
AMDTMCHK STM   @14,@12,@SA00002                                    0195
*   DCL                                                            0196
*     TEMPBUF REG(2) PTR(31);       /* T S RECORD BUFFER       Y02014*/
*   IF EOFINPRO='1'B THEN           /* EOF IN PROCESS          Y02014*/
         TM    EOFINPRO(AEDITCBR),B'01000000'                      0197
         BO    @RT00197                                            0197
*     RETURN;                       /* YES RETURN              Y02014*/
*   IF TS='0'B THEN                 /* NO TS RECORD TO PRNT    Y02014*/
         TM    TS(AEDITCBR),B'10000000'                            0199
         BZ    @RT00199                                            0199
*     GOTO AMDEND;                  /* RETURN TO CALLER        Y02014*/
*   GEN(BRWRITE 2,IMM);             /* 2 BLNK LINES NEEDED     Y02014*/
         BRWRITE 2,IMM
*   TEMPBUF=CURBUF;                 /* SAVE CURBUF PTR         Y02014*/
         L     TEMPBUF,CURBUF                                      0202
*   CURBUF=ADTSBUF;                 /* PTR TO TS BUFFER        Y02014*/
         L     @14,ADTSBUF(,AEDITCBR)                              0203
         ST    @14,CURBUF                                          0203
*   GEN(BRWRITE 2);                 /* OUTPUT TS AND SPACE     Y02014*/
         BRWRITE 2
*   TS='0'B;                        /* TS PENDING SWITCH OFF   Y02014*/
         NI    TS(AEDITCBR),B'01111111'                            0205
*   CURBUF=TEMPBUF;                 /* REINIT CURBUF           Y02014*/
         ST    TEMPBUF,CURBUF                                      0206
*AMDEND:                                                           0207
*   RETURN;                         /* RETURN TO CALLER        Y02014*/
@EL00002 DS    0H                                                  0207
@EF00002 DS    0H                                                  0207
@ER00002 LM    @14,@12,@SA00002                                    0207
         BR    @14                                                 0207
*   END;                                                           0208
         B     @EL00002                                            0208
*   END AMDPREXT                                                   0209
*                                                                  0209
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (AMDPRTAB)                                       */
*                                                                  0209
*       ;                                                          0209
@DATA    DS    0H
@SM00313 MVC   TEMPREC(0),RECBASE(@10)
@SM00315 MVC   TEMPREC+256(0),RECBASE+256(@14)
         DS    0F
@SA00001 DS    18F
@SA00002 DS    15F
         DS    0F
@CF00097 DC    F'4'
@CF00041 DC    F'8'
@CF00273 DC    F'11'
@CF00275 DC    F'28'
@CF00119 DC    F'256'
@CF00270 DC    F'257'
@CF00317 DC    F'-1'
@CF00262 DC    XL4'80000000'
@CA00211 DC    A(SPIESAVE)
@CA00212 DC    A(NSISAVE)
@CA00214 DC    A(PICASAVE)
         DS    0D
CODESAVE DS    F
@TS00001 DS    CL1
         DS    CL3
PARMLIST DS    CL20
         ORG   PARMLIST
RECPTR   DS    AL4
BUFPTR   DS    AL4
GTFOPTR  DS    AL4
EIDPTR   DS    AL4
DATAPTR  DS    AL4
         ORG   PARMLIST+20
TEMPREC  DS    CL284
UNUMMSG1 DC    CL36'EDIT TERMINATED UPON USER''S REQUEST'
UNUMMSG2 DC    CL33'EXIT DELETED UPON USER''S REQUEST'
EXTSWITS DC    B'00000000'
         ORG   EXTSWITS
FIRSTME  DS    BL1
@NM00002 EQU   EXTSWITS+0
         ORG   EXTSWITS+1
EXTPTCH  DC    CL100'EXTPTCH'
         DS    CL6
DECAREA  DS    CL8
LOCAREA  DS    CL64
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
AEDITCBR EQU   @09
PARMREG  EQU   @01
WREG2    EQU   @02
WREG3    EQU   @03
COMPTR   EQU   @12
AREAPTR  EQU   @13
RCREG    EQU   @15
TEMPBUF  EQU   @02
         ENTRY EXTPTCH
         EXTRN SPIESAVE
         EXTRN NSISAVE
         EXTRN PICASAVE
AMDPRTAB EQU   0
AFMG     EQU   AMDPRTAB
CURREC   EQU   AMDPRTAB+4
DEBGFLGS EQU   AMDPRTAB+8
PTHFLGS1 EQU   DEBGFLGS
REXT     EQU   PTHFLGS1
PTHFLGS2 EQU   DEBGFLGS+1
INRFCFGS EQU   DEBGFLGS+2
TERM     EQU   INRFCFGS
FMT      EQU   INRFCFGS
DMDFMT   EQU   INRFCFGS
IOFLGS   EQU   DEBGFLGS+3
GTFWDPTR EQU   AMDPRTAB+20
USEREXIT EQU   AMDPRTAB+24
STARTIME EQU   AMDPRTAB+40
STOPTIME EQU   AMDPRTAB+52
NAMES    EQU   AMDPRTAB+64
ADS      EQU   AMDPRTAB+104
AADS     EQU   ADS
SIF      EQU   AMDPRTAB+124
SIOFLGS  EQU   SIF
DVADS1   EQU   AMDPRTAB+128
IO       EQU   AMDPRTAB+228
IOFLGS2  EQU   IO
DVADS2   EQU   AMDPRTAB+232
VCF      EQU   AMDPRTAB+332
SVCFLGS  EQU   VCF
USR      EQU   AMDPRTAB+368
USRFLGS  EQU   USR
USRTAB   EQU   AMDPRTAB+372
PI       EQU   AMDPRTAB+452
PIFLGS   EQU   PI
PGMNGEN  EQU   AMDPRTAB+456
GENFLAGS EQU   PGMNGEN+3
GENFLGS1 EQU   AMDPRTAB+460
TS       EQU   GENFLGS1
EOFINPRO EQU   GENFLGS1
RECDLL   EQU   AMDPRTAB+461
EXITNM   EQU   AMDPRTAB+464
EXITADDR EQU   AMDPRTAB+472
AFRMAD   EQU   AMDPRTAB+488
OFSTEID  EQU   AMDPRTAB+492
OFSTDATA EQU   AMDPRTAB+494
ADTSBUF  EQU   AMDPRTAB+496
ESTARTME EQU   AMDPRTAB+500
ESTOPTME EQU   AMDPRTAB+509
FRMATAB  EQU   0
AGET     EQU   FRMATAB
AHEX     EQU   FRMATAB+4
ASPI     EQU   FRMATAB+28
PRHEX    EQU   0
AMDPRSEG EQU   0
EXITRTN  EQU   0
SVAREA   EQU   4
MSGADDR  EQU   0
ERRBUF   EQU   0
AMDPRE12 EQU   56
AMDPRE03 EQU   32
MSGPTR1  EQU   0
MSGPTR2  EQU   4
M212MOD  EQU   63
M212COD  EQU   39
M212PAG  EQU   23
M213MOD  EQU   53
RECBASE  EQU   0
OUTBUF   EQU   1
INREC    EQU   0
PRGET    EQU   0
PRSPI    EQU   0
PAGENO   EQU   TITLEPGE+5
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
FRMRES1  EQU   FRMATAB+36
ATME     EQU   FRMATAB+32
APRFMG   EQU   FRMATAB+24
AEXT     EQU   FRMATAB+20
AAPP     EQU   FRMATAB+16
AFLT     EQU   FRMATAB+12
ACON     EQU   FRMATAB+8
RESERVED EQU   AMDPRTAB+522
CVTTZONE EQU   AMDPRTAB+518
ESPSEC   EQU   ESTOPTME+7
ESPMIN   EQU   ESTOPTME+5
ESPHR    EQU   ESTOPTME+3
ESPDAY   EQU   ESTOPTME
ESSEC    EQU   ESTARTME+7
ESMIN    EQU   ESTARTME+5
ESHR     EQU   ESTARTME+3
ESDAY    EQU   ESTARTME
REENTWKA EQU   AMDPRTAB+484
PRFMTADD EQU   AMDPRTAB+480
AEIOCT   EQU   AMDPRTAB+476
@NM00001 EQU   GENFLGS1
FIRSTHSW EQU   GENFLGS1
TSFOUND  EQU   GENFLGS1
EOF      EQU   GENFLAGS
RR       EQU   GENFLAGS
SRM      EQU   GENFLAGS
RNIO     EQU   GENFLAGS
SYSM     EQU   GENFLAGS
SYS      EQU   GENFLAGS
DSP      EQU   GENFLAGS
EXT      EQU   GENFLAGS
PICODEA  EQU   PGMNGEN+2
PICODES  EQU   PGMNGEN
Q        EQU   PI+1
P01R     EQU   PIFLGS
SELP     EQU   PIFLGS
ALLP     EQU   PIFLGS
USRNGTAB EQU   USRTAB
O        EQU   USR+1
N01R     EQU   USRFLGS
SELU     EQU   USRFLGS
ALLU     EQU   USRFLGS
SVCNUMS  EQU   AMDPRTAB+336
M        EQU   VCF+1
L        EQU   SVCFLGS
SELV     EQU   SVCFLGS
ALLV     EQU   SVCFLGS
IODVADS  EQU   DVADS2
K01RES   EQU   IO+1
JJ       EQU   IOFLGS2
SELI     EQU   IOFLGS2
ALLI     EQU   IOFLGS2
SIODVADS EQU   DVADS1
II       EQU   SIF+1
H        EQU   SIOFLGS
NOEQU    EQU   SIOFLGS
EQUIV    EQU   SIOFLGS
SELS     EQU   SIOFLGS
ALLS     EQU   SIOFLGS
ASCBADDR EQU   AADS
JOBNAMES EQU   NAMES
DAY2     EQU   STOPTIME+10
F        EQU   STOPTIME+8
TIME2    EQU   STOPTIME
DAY      EQU   STARTIME+10
D        EQU   STARTIME+8
TIME     EQU   STARTIME
DDNAME   EQU   AMDPRTAB+32
C        EQU   DEBGFLGS+4
B        EQU   IOFLGS
GETEOF   EQU   IOFLGS
EDITSTOP EQU   INRFCFGS
EXTTRC   EQU   INRFCFGS
RET      EQU   INRFCFGS
SPIE     EQU   INRFCFGS
FLMODE   EQU   INRFCFGS
REMAIN   EQU   PTHFLGS2
APP      EQU   PTHFLGS2
FRM      EQU   PTHFLGS1
FLT      EQU   PTHFLGS1
HEX      EQU   PTHFLGS1
CON      EQU   PTHFLGS1
GET      EQU   PTHFLGS1
SCN      EQU   PTHFLGS1
ROOT     EQU   PTHFLGS1
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RT00071 EQU   AMDEXT01
@RT00119 EQU   AMDPRCIV
@RT00122 EQU   AMDPRCIV
@RT00126 EQU   AMDPRCIV
@RF00164 EQU   AMDPRC12
@RT00177 EQU   AMDPRC12
@RT00179 EQU   AMDEXT02
@RT00197 EQU   @EL00002
AMDEND   EQU   @EL00002
@RT00199 EQU   AMDEND
@ENDDATA EQU   *
         END   AMDPREXT,(C'PLS1249',0603,75049)
