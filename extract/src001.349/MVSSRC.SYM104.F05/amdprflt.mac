         TITLE 'AMDPRFLT-EDIT FILTER MODULE                            *
                       '
AMDPRFLT CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'AMDPRFLT  73.240'                                 0001
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                     0001
         BALR  @11,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,@11                                         0001
         ST    @13,@SA00001+4                                      0001
         LA    @14,@SA00001                                        0001
         ST    @14,8(,@13)                                         0001
         LR    @13,@14                                             0001
         EQUATES                        AMDPRDMP EQU MACRO
         COMMON                         EXPANDS TO AMDPRCOM TABLE
AMDPRFLT CSECT                          RE-ESTABLISH AMDPRFLT CSECT
         USING COMMON,COMBASE           SET UP DSECT FOR AMDPRCOM
*   FLT='1'B;                       /* SET ON AMDPRFLT DEBUG FLAG    */
         OI    FLT(AEDITCBR),B'00000100'                           0027
*   IF OPTTIME='1'B THEN            /* IF USR TIME STAMP OPTION,     */
         L     @10,GTFWDPTR(,AEDITCBR)                             0028
         TM    OPTTIME(@10),B'00000001'                            0028
         BNO   @RF00028                                            0028
*     DO;                           /* DO THE FOLLOWING        Y02014*/
*       OFSTEID=7+8;                /* EID OFST=PREFIX + T.S. LEN    */
         MVC   OFSTEID(2,AEDITCBR),@CH00162                        0030
*       GOTO AMDPFLT1;              /* CONTINUE CALCULATIONS         */
         B     AMDPFLT1                                            0031
*     END;                                                         0032
*   OFSTEID=7;                      /* NO T.S., SO BASIC EID OFST    */
@RF00028 MVC   OFSTEID(2,AEDITCBR),@CH00054                        0033
*AMDPFLT1:                                                         0034
*   OFSTDATA=OFSTEID+2;             /* DATA OFST=EID OFST+EID LEN    */
AMDPFLT1 LA    @10,2                                               0034
         AH    @10,OFSTEID(,AEDITCBR)                              0034
         STH   @10,OFSTDATA(,AEDITCBR)                             0034
*   IF USEREXIT^=BLANK1 THEN        /* IF EXIT SLOT BLANK, THEN      */
         CLC   USEREXIT(8,AEDITCBR),BLANK1                         0035
         BE    @RF00035                                            0035
*     DO;                                                          0036
*       CALL PREXT;                 /* IF NON-BLANK, CALL PREXT      */
         L     @10,AFRMAD(,AEDITCBR)                               0037
         L     @15,AEXT(,@10)                                      0037
         BALR  @14,@15                                             0037
*       IF DMDFMT='1'B THEN         /* IF REC TO BE UNCOND FMTTED    */
         TM    DMDFMT(AEDITCBR),B'00000001'                        0038
         BNO   @RF00038                                            0038
*         DO;                       /* DO THE FOLLOWING              */
*           IF SYS='1'B             /* IF SYS ALREADY SPECIFIED      */
*               ×SYSM='1'B THEN     /* OR SYSM ALREADY SPECIFIED     */
         TM    SYS(AEDITCBR),B'00110000'                           0040
         BZ    @RF00040                                            0040
*             DMDFMT='0'B;          /* NO NEED TO KEEP DMDFMT ON     */
         NI    DMDFMT(AEDITCBR),B'11111110'                        0041
*           ELSE                    /* OTHERWISE, SYS MUST BE TURNED
*                                      ON SO NO SELECT.              */
*             DO;                   /* SYSM MUST ALSO BE ON          */
         B     @RC00040                                            0042
@RF00040 DS    0H                                                  0043
*               SYS='1'B;           /* SET ON SYS BIT                */
*               SYSM='1'B;          /* SET ON SYSM BIT               */
         OI    SYS(AEDITCBR),B'00110000'                           0044
*             END;                                                 0045
*           GOTO AMDPBRH;           /* NO SELECTIVITY NECESSARY      */
         B     AMDPBRH                                             0046
*         END;                                                     0047
*       IF FMT='0'B THEN            /* UPON RETURN, CHK FMT BIT--    */
@RF00038 TM    FMT(AEDITCBR),B'00010000'                           0048
         BZ    @RT00048                                            0048
*         GOTO AMDPJAT;             /* IF OFF, PREPARE FOR RETURN    */
*       ELSE                                                       0050
*         FMT='0'B;                 /* IF ON, TURN IT OFF AND      0050
*                                      CONTINUE WITH FILTERING       */
         NI    FMT(AEDITCBR),B'11101111'                           0050
*     END;                                                         0051
*   JOBOFST=OFSTDATA+6;             /* CALCULATE LOC OF JOBNAME      */
@RF00035 LH    @10,OFSTDATA(,AEDITCBR)                             0052
         LA    JOBOFST,6                                           0052
         AR    JOBOFST,@10                                         0052
*   COUNT=1;                        /* INITIALIZE INDEX TO ONE       */
         LA    COUNT,1                                             0053
*   IF(INREC(OFSTEID)&'F0'X)        /* IF FIRST CHAR OF EID IS       */
*       ='E0'X THEN                 /* EQUAL TO X'E', THEN           */
         LH    @08,OFSTEID(,AEDITCBR)                              0054
         L     @01,CURREC(,AEDITCBR)                               0054
         ALR   @01,@08                                             0054
         AL    @01,@CF00382                                        0054
         MVC   @TS00001(1),INREC(@01)                              0054
         NI    @TS00001,X'F0'                                      0054
         CLI   @TS00001,X'E0'                                      0054
         BNE   @RF00054                                            0054
*     DO;                           /* YES USR EID             Y02014*/
*       JOBOFST=OFSTDATA+4;         /* HAVE USR EID NO CPUID         */
         AH    @10,@CH00097                                        0056
         LR    JOBOFST,@10                                         0056
*       GO TO JNCHK;                /* CHECK FOR JOBNAMES      Y02014*/
         B     JNCHK                                               0057
*     END;                                                         0058
*   IF INREC(6)='03'X               /* IF FID INDICATES SYSM REC,    */
*     THEN                          /* THEN                          */
@RF00054 L     @10,CURREC(,AEDITCBR)                               0059
         CLI   INREC+5(@10),X'03'                                  0059
         BE    @RT00059                                            0059
*     GOTO AMDPFLT4;                /* BYPASS JOBN CHECK       Y02014*/
*JNCHK:                                                            0061
*   IF JOBNAMES(COUNT)=BLANK1       /* IF NO JOBNAMES SPECIFIED,     */
*     THEN                          /* THEN                          */
JNCHK    LR    @10,COUNT                                           0061
         SLA   @10,3                                               0061
         ALR   @10,AEDITCBR                                        0061
         CLC   JOBNAMES-8(8,@10),BLANK1                            0061
         BE    @RT00061                                            0061
*     GOTO AMDPFLT4;                /* CHECK ASCB ADDRESSES          */
*AMDPFLT2:                                                         0063
*   IF INREC(JOBOFST:JOBOFST        /* Q/DOES JOBN IN REC MATCH      */
*       +7)=JOBNAMES(COUNT)THEN     /* JOBN IN TABLE--IF SO, NOW     */
AMDPFLT2 L     @10,CURREC(,AEDITCBR)                               0063
         LR    @08,COUNT                                           0063
         SLA   @08,3                                               0063
         ALR   @10,JOBOFST                                         0063
         AL    @10,@CF00382                                        0063
         ALR   @08,AEDITCBR                                        0063
         CLC   INREC(8,@10),JOBNAMES-8(@08)                        0063
         BE    @RT00063                                            0063
*     GOTO AMDPFID;                 /* CHECK FIDS & SYS BIT          */
*   COUNT=COUNT+1;                  /* UPDATE INDEX                  */
         AH    COUNT,@CH00043                                      0065
*   IF COUNT>5 THEN                 /* IF BEYOND JOBN TABLE, THEN    */
         CH    COUNT,@CH00084                                      0066
         BNH   @RF00066                                            0066
*     DO;                           /* DO THE FOLLOWING              */
*AMDPFLT3:                                                         0068
*       COUNT=1;                    /* RE-INITIALIZE INDEX TO ONE    */
AMDPFLT3 LA    COUNT,1                                             0068
*       GOTO AMDPASCB;              /* CHECK FOR ASCB ADDR     Y02014*/
         B     AMDPASCB                                            0069
*     END;                                                         0070
*   IF JOBNAMES(COUNT)=BLANK1       /* IF NEXT SLOT BLANK,           */
*     THEN                          /* THEN                          */
@RF00066 LR    @10,COUNT                                           0071
         SLA   @10,3                                               0071
         ALR   @10,AEDITCBR                                        0071
         CLC   JOBNAMES-8(8,@10),BLANK1                            0071
         BE    @RT00071                                            0071
*     GOTO AMDPFLT3;                /* CHECK ASCB ADDRESSES          */
*   GOTO AMDPFLT2;                  /* IF NON-BLANK, CHK FOR MTCH    */
         B     AMDPFLT2                                            0073
*AMDPFLT4:                                                         0074
*   IF ASCBADDR(COUNT)=0            /* IF ASCB ADDRS NOT SPECIFIED   */
*     THEN                          /* THEN                    Y02014*/
AMDPFLT4 LR    @10,COUNT                                           0074
         SLA   @10,2                                               0074
         L     @10,ASCBADDR-4(@10,AEDITCBR)                        0074
         LTR   @10,@10                                             0074
         BZ    @RT00074                                            0074
*     GOTO AMDPFID;                 /* SIMPLY CHECK FIDS & SYS BT    */
*AMDPFL41:                                                         0076
*   IF INREC(OFSTDATA:OFSTDATA      /* Q/DOES ASCBADDRS IN REC       */
*       +3)=ASCBADDR                /* MATCH ASCB ADDRS IN TABLE-    */
*       (COUNT)THEN                 /* IF SO, NOW              Y02014*/
AMDPFL41 LH    @10,OFSTDATA(,AEDITCBR)                             0076
         L     @08,CURREC(,AEDITCBR)                               0076
         LR    @03,COUNT                                           0076
         SLA   @03,2                                               0076
         AL    @08,@CF00382                                        0076
         L     @10,INREC(@10,@08)                                  0076
         CL    @10,ASCBADDR-4(@03,AEDITCBR)                        0076
         BE    @RT00076                                            0076
*     GOTO AMDPFID;                 /* CHECK FIDS & SYS BIT          */
*   COUNT=COUNT+1;                  /* UPDATE INDEX                  */
         AH    COUNT,@CH00043                                      0078
*   IF COUNT>5 THEN                 /* IF BEYOND END OF ASCB TABLE   */
         CH    COUNT,@CH00084                                      0079
         BNH   @RF00079                                            0079
*     DO;                           /* DO THE FOLLOWING              */
*AMDPJAT:                                                          0081
*       FLT='0'B;                   /* SET OFF AMDPRFLT DEBUG FLG    */
AMDPJAT  NI    FLT(AEDITCBR),B'11111011'                           0081
*       RETURN;                     /* RETURN TO AMDPRFRM            */
@EL00001 L     @13,4(,@13)                                         0082
@EF00001 DS    0H                                                  0082
@ER00001 LM    @14,@12,12(@13)                                     0082
         BR    @14                                                 0082
*     END;                                                         0083
*AMDPASCB:                                                         0084
*   IF ASCBADDR(COUNT)=0            /* IF CURRENT SLOT EQUAL TO      */
*     THEN                          /* ZERO, THEN              Y02014*/
@RF00079 DS    0H                                                  0084
AMDPASCB LR    @10,COUNT                                           0084
         SLA   @10,2                                               0084
         L     @10,ASCBADDR-4(@10,AEDITCBR)                        0084
         LTR   @10,@10                                             0084
         BZ    @RT00084                                            0084
*     GOTO AMDPJAT;                 /* PREPARE FOR RETURN            */
*   GOTO AMDPFL41;                  /* IF NOT, CHECK FOR MATCH       */
         B     AMDPFL41                                            0086
*AMDPFID:                                                          0087
*   IF(INREC(OFSTEID)&'F0'X)        /* IF FIRST CHAR OF EID IS       */
*       ='E0'X THEN                 /* EQUAL TO X'E', THEN     Y02014*/
AMDPFID  LH    @10,OFSTEID(,AEDITCBR)                              0087
         L     @08,CURREC(,AEDITCBR)                               0087
         ALR   @08,@10                                             0087
         AL    @08,@CF00382                                        0087
         MVC   @TS00001(1),INREC(@08)                              0087
         NI    @TS00001,X'F0'                                      0087
         CLI   @TS00001,X'E0'                                      0087
         BE    @RT00087                                            0087
*     GOTO AMDPUSR;                 /* HAVE USR EID            Y02014*/
*   IF SYS='1'B THEN                /* IS ALL SYSTEM EVENTS TO BE    */
         TM    SYS(AEDITCBR),B'00100000'                           0089
         BO    @RT00089                                            0089
*     GOTO AMDPBRH;                 /* EDITED, NOW CHK EXIT SLOT     */
*AMDPFLT5:                                                         0091
*   IF INREC(6)='03'X THEN          /* SYSM RECORD             Y02014*/
AMDPFLT5 L     @10,CURREC(,AEDITCBR)                               0091
         CLI   INREC+5(@10),X'03'                                  0091
         BE    @RT00091                                            0091
*     GO TO SYSMCHK;                /* FILTER FOR SYSM         Y02014*/
*   IF INREC(6)='00'X               /* IF FID IS FOR IO OR SIO       */
*     THEN                          /* THEN                          */
         CLI   INREC+5(@10),X'00'                                  0093
         BE    @RT00093                                            0093
*     GOTO AMDPIO1;                 /* CHECK IO AND SIO FLAGS        */
*   IF INREC(6)='01'X               /* IF FID IS FOR SVC             */
*     THEN                          /* THEN                          */
         CLI   INREC+5(@10),X'01'                                  0095
         BNE   @RF00095                                            0095
*     DO;                           /* DO THE FOLLOWING              */
*       IF ALLV='1'B                /* CHECK SVC FLAGS               */
*           ×SELV='1'B THEN         /* IF 'ALL' OR 'SEL' ON,         */
         TM    ALLV(AEDITCBR),B'11000000'                          0097
         BNZ   @RT00097                                            0097
*         GOTO AMDPBRH;             /* CHECK EXIT SLOT               */
*       GOTO AMDPJAT;               /* IF NOT, PREPARE TO RETURN     */
         B     AMDPJAT                                             0099
*     END;                                                         0100
*   IF INREC(6)='02'X               /* IF FID IS '02'X         Y02014*/
*     THEN                                                         0101
@RF00095 L     @10,CURREC(,AEDITCBR)                               0101
         CLI   INREC+5(@10),X'02'                                  0101
         BNE   @RF00101                                            0101
*     DO;                           /*                         Y02014*/
*       IF DSP='1'B×ALLP='1'B       /* MUST BE DSP OR PI       Y02014*/
*           ×SELP='1'B THEN         /*                         Y02014*/
         TM    DSP(AEDITCBR),B'01000000'                           0103
         BO    @RT00103                                            0103
         TM    ALLP(AEDITCBR),B'11000000'                          0103
         BNZ   @RT00103                                            0103
*         GOTO AMDPBRH;             /* CHECK EXIT SLOT         Y02014*/
*       GOTO AMDPJAT;               /* PREPARE FOR RETURN      Y02014*/
         B     AMDPJAT                                             0105
*     END;                          /*                         Y02014*/
*   IF INREC(6)='04'X               /* IS FID 04               Y02014*/
*     THEN                                                         0107
@RF00101 L     @10,CURREC(,AEDITCBR)                               0107
         CLI   INREC+5(@10),X'04'                                  0107
         BNE   @RF00107                                            0107
*     DO;                           /*                         Y02014*/
*       IF RNIO='1'B×SRM='1'B       /* MUST BE RNIO OR RR      Y02014*/
*           ×RR='1'B THEN           /* OR SRM                  Y02014*/
         TM    RNIO(AEDITCBR),B'00001110'                          0109
         BNZ   @RT00109                                            0109
*         GOTO AMDPBRH;             /* CHECK OUT SLOT          Y02014*/
*       GOTO AMDPJAT;               /* PREPARE FOR RETURN      Y02014*/
         B     AMDPJAT                                             0111
*     END;                          /*                         Y02014*/
*   IF INREC(6)^='05'X              /* IF FID IS NOT '05'X     Y02014*/
*     THEN                                                         0113
@RF00107 L     @10,CURREC(,AEDITCBR)                               0113
         CLI   INREC+5(@10),X'05'                                  0113
         BNE   @RT00113                                            0113
*     GOTO AMDPJAT;                 /* PREPARE FOR RETURN      Y02014*/
*   IF EXT='1'B                     /* MUST BE EXT             Y02014*/
*     THEN                                                         0115
         TM    EXT(AEDITCBR),B'10000000'                           0115
         BO    @RT00115                                            0115
*     GOTO AMDPBRH;                 /* CHECK EXIT SLOT         Y02014*/
*   GOTO AMDPJAT;                   /* PREPARE FOR RETURN      Y02014*/
         B     AMDPJAT                                             0117
*AMDPIO1:                                                          0118
*   IF ALLS='1'B                    /* IF EDITING ALL SIO,           */
*       ×SELS='1'B                  /* OR SEL SIO,                   */
*       ×ALLI='1'B                  /* OR ALL IO,                    */
*       ×SELI='1'B THEN             /* OR SEL IO, THEN               */
AMDPIO1  TM    ALLS(AEDITCBR),B'11000000'                          0118
         BNZ   @RT00118                                            0118
         TM    ALLI(AEDITCBR),B'11000000'                          0118
         BNZ   @RT00118                                            0118
*     GOTO AMDPBRH;                 /* CHECK EXIT SLOT               */
*   GOTO AMDPJAT;                   /* IF NOT, PREPARE FOR RETURN    */
         B     AMDPJAT                                             0120
*AMDPBRH:                                                          0121
*   CALL PRAPP;                     /* CALL AMDPRAPP                 */
AMDPBRH  L     @10,AFRMAD(,AEDITCBR)                               0121
         L     @15,AAPP(,@10)                                      0121
         BALR  @14,@15                                             0121
*   IF DMDFMT='1'B THEN             /* IF DMDFMT BIT STILL ON        */
         TM    DMDFMT(AEDITCBR),B'00000001'                        0122
         BNO   @RF00122                                            0122
*     DO;                           /* DO THE FOLLOWING              */
*       SYS='0'B;                   /* TURN OFF SYS BIT              */
*       SYSM='0'B;                  /* TURN OFF SYSM BIT             */
         NI    SYS(AEDITCBR),B'11001111'                           0125
*       DMDFMT='0'B;                /* TURN OFF DMDFMT BIT           */
         NI    DMDFMT(AEDITCBR),B'11111110'                        0126
*     END;                                                         0127
*   GOTO AMDPJAT;                   /* THEN PREPARE FOR RETURN       */
         B     AMDPJAT                                             0128
*AMDPUSR:                                                          0129
*   IF ALLU='1'B THEN               /* IF EDITING ALL USR, THEN      */
AMDPUSR  TM    ALLU(AEDITCBR),B'10000000'                          0129
         BO    @RT00129                                            0129
*     GOTO AMDPBRH;                 /* CHECK EXIT SLOT               */
*   USRVAL=INREC(OFSTEID:           /* STRIP OFF X'E' IN USR EID     */
*       OFSTEID+1)&'0FFF'X;                                        0131
         LH    @10,OFSTEID(,AEDITCBR)                              0131
         L     @08,CURREC(,AEDITCBR)                               0131
         ALR   @08,@10                                             0131
         AL    @08,@CF00382                                        0131
         MVC   USRVAL(2),INREC(@08)                                0131
         NC    USRVAL(2),@CB00368                                  0131
*AMDPUSR1:                                                         0132
*   IF USRNGTAB(COUNT)=BLANK1       /* IF NO USR EIDS SPECIFIED,     */
*     THEN                          /* THEN                          */
AMDPUSR1 LR    @10,COUNT                                           0132
         SLA   @10,2                                               0132
         ST    @10,@TF00001                                        0132
         ALR   @10,AEDITCBR                                        0132
         CLC   USRNGTAB-4(4,@10),BLANK1                            0132
         BE    @RT00132                                            0132
*     GOTO AMDPJAT;                 /* PREPARE FOR RETURN            */
*   IF USRVAL=>USRNGTAB(COUNT,      /* IF CURRENT EID IS EQUAL TO    */
*       1:2)                        /* OR GTR THAN LOWER EID RNG     */
*       &USRVAL=<USRNGTAB(COUNT,    /* AND EQUAL TO OR LESS THAN     */
*       3:4)THEN                    /* UPPER EID RANGE, THEN         */
         LR    @10,AEDITCBR                                        0134
         AL    @10,@TF00001                                        0134
         CLC   USRVAL(2),USRNGTAB-4(@10)                           0134
         BL    @RF00134                                            0134
         LR    @10,AEDITCBR                                        0134
         AL    @10,@TF00001                                        0134
         CLC   USRVAL(2),USRNGTAB-2(@10)                           0134
         BNH   @RT00134                                            0134
*     GOTO AMDPBRH;                 /* CHECK EXIT SLOT               */
*   COUNT=COUNT+1;                  /* IF NOT, UPDATE INDEX          */
@RF00134 AH    COUNT,@CH00043                                      0136
*   IF COUNT>20 THEN                /* IF BEYOND USR EID TABLE,      */
         CH    COUNT,@CH00128                                      0137
         BH    @RT00137                                            0137
*     GOTO AMDPJAT;                 /* PREPARE FOR RETURN            */
*   GOTO AMDPUSR1;                  /* IF NOT, CONTINUE TABL SRCH    */
         B     AMDPUSR1                                            0139
*SYSMCHK:                                                          0140
*   EIDPTR=ADDR(INREC(OFSTEID));    /* SET UP EID ADDR               */
SYSMCHK  LH    @10,OFSTEID(,AEDITCBR)                              0140
         L     EIDPTR,CURREC(,AEDITCBR)                            0140
         AL    EIDPTR,@CF00382                                     0140
         LA    EIDPTR,INREC(@10,EIDPTR)                            0140
*   IF EIDFLD=IMDMSIO THEN                                         0141
         CLC   EIDFLD(2,EIDPTR),@CB00219                           0141
         BNE   @RF00141                                            0141
*     DO;                           /* SIO EID                 Y02014*/
*       IF ALLS='1'B×SELS='1'B THEN /* EDITING SIO             Y02014*/
         TM    ALLS(AEDITCBR),B'11000000'                          0143
         BNZ   @RT00143                                            0143
*         GO TO AMDPBRH;            /* CHECK EXIT SLOT         Y02014*/
*       GO TO AMDPJAT;              /* PREPARE FOR RETURN      Y02014*/
         B     AMDPJAT                                             0145
*     END;                                                         0146
*   IF EIDFLD=IMDMIO1×EIDFLD=IMDMIO2×/* IO EID                 Y02014*/
*       EIDFLD=IMDMEOS×EIDFLD=IMDMPCI THEN                         0147
@RF00141 CLC   EIDFLD(2,EIDPTR),@CB00215                           0147
         BE    @RT00147                                            0147
         CLC   EIDFLD(2,EIDPTR),@CB00217                           0147
         BE    @RT00147                                            0147
         CLC   EIDFLD(2,EIDPTR),@CB00231                           0147
         BE    @RT00147                                            0147
         CLC   EIDFLD(2,EIDPTR),@CB00209                           0147
         BNE   @RF00147                                            0147
@RT00147 DS    0H                                                  0148
*     DO;                                                          0148
*       IF ALLI='1'B×SELI='1'B THEN /* EDITING IO              Y02014*/
         TM    ALLI(AEDITCBR),B'11000000'                          0149
         BNZ   @RT00149                                            0149
*         GO TO AMDPBRH;            /* CHECK EXIT SLOT         Y02014*/
*       GO TO AMDPJAT;              /* PREPARE FOR RETURN      Y02014*/
         B     AMDPJAT                                             0151
*     END;                                                         0152
*   IF EIDFLD=IMDMSVC THEN                                         0153
@RF00147 CLC   EIDFLD(2,EIDPTR),@CB00211                           0153
         BNE   @RF00153                                            0153
*     DO;                           /* SVC EID                 Y02014*/
*       IF ALLV='1'B×SELV='1'B THEN /* EDITING SVC             Y02014*/
         TM    ALLV(AEDITCBR),B'11000000'                          0155
         BNZ   @RT00155                                            0155
*         GO TO AMDPBRH;            /* CHECK EXIT SLOT         Y02014*/
*       GO TO AMDPJAT;              /* PREPARE FOR RETURN      Y02014*/
         B     AMDPJAT                                             0157
*     END;                                                         0158
*   IF EIDFLD=IMDMPI×EIDFLD=IMDMTINT/* PI EID                  Y02014*/
*     THEN                                                         0159
@RF00153 CLC   EIDFLD(2,EIDPTR),@CB00225                           0159
         BE    @RT00159                                            0159
         CLC   EIDFLD(2,EIDPTR),@CB00229                           0159
         BNE   @RF00159                                            0159
@RT00159 DS    0H                                                  0160
*     DO;                                                          0160
*       IF ALLP='1'B×SELP='1'B THEN /* EDITING PI              Y02014*/
         TM    ALLP(AEDITCBR),B'11000000'                          0161
         BNZ   @RT00161                                            0161
*         GO TO AMDPBRH;            /* CHECK EXIT SLOT         Y02014*/
*       GO TO AMDPJAT;              /* PREPARE FOR RETURN      Y02014*/
         B     AMDPJAT                                             0163
*     END;                                                         0164
*   IF EIDFLD=IMDMEXT THEN                                         0165
@RF00159 CLC   EIDFLD(2,EIDPTR),@CB00227                           0165
         BNE   @RF00165                                            0165
*     DO;                           /* EXT EID                 Y02014*/
*       IF EXT='1'B THEN            /* EDITING EXT             Y02014*/
         TM    EXT(AEDITCBR),B'10000000'                           0167
         BO    @RT00167                                            0167
*         GO TO AMDPBRH;            /* CHECK EXIT SLOT         Y02014*/
*       GO TO AMDPJAT;              /* PREPARE FOR RETURN      Y02014*/
         B     AMDPJAT                                             0169
*     END;                                                         0170
*   IF EIDFLD=IMDMSRM THEN                                         0171
@RF00165 CLC   EIDFLD(2,EIDPTR),@CB00250                           0171
         BNE   @RF00171                                            0171
*     DO;                           /* SRM EID                 Y02014*/
*       IF SRM='1'B THEN            /* EDITING SRM             Y02014*/
         TM    SRM(AEDITCBR),B'00000100'                           0173
         BO    @RT00173                                            0173
*         GO TO AMDPBRH;            /* CHECK EXIT SLOT         Y02014*/
*       GO TO AMDPJAT;              /* PREPARE FOR RETURN      Y02014*/
         B     AMDPJAT                                             0175
*     END;                                                         0176
*   IF EIDFLD=IMDMSTAE×EIDFLD=IMDMFRR/* RR EID                 Y02014*/
*     THEN                                                         0177
@RF00171 CLC   EIDFLD(2,EIDPTR),@CB00233                           0177
         BE    @RT00177                                            0177
         CLC   EIDFLD(2,EIDPTR),@CB00235                           0177
         BNE   @RF00177                                            0177
@RT00177 DS    0H                                                  0178
*     DO;                                                          0178
*       IF RR='1'B THEN             /* EDITING RR              Y02014*/
         TM    RR(AEDITCBR),B'00000010'                            0179
         BO    @RT00179                                            0179
*         GO TO AMDPBRH;            /* CHECK EXIT SLOT         Y02014*/
*       GO TO AMDPJAT;              /* PREPARE FOR RETURN      Y02014*/
         B     AMDPJAT                                             0181
*     END;                                                         0182
*   IF EIDFLD=IMDMTP1×EIDFLD=IMDMTP2/* RNIO EID                Y02014*/
*     THEN                                                         0183
@RF00177 CLC   EIDFLD(2,EIDPTR),@CB00237                           0183
         BE    @RT00183                                            0183
         CLC   EIDFLD(2,EIDPTR),@CB00239                           0183
         BNE   @RF00183                                            0183
@RT00183 DS    0H                                                  0184
*     DO;                                                          0184
*       IF RNIO='1'B THEN           /* EDITING RNIO            Y02014*/
         TM    RNIO(AEDITCBR),B'00001000'                          0185
         BO    @RT00185                                            0185
*         GO TO AMDPBRH;            /* CHECK EXIT SLOT         Y02014*/
*       GO TO AMDPJAT;              /* PREPARE FOR RETURN      Y02014*/
         B     AMDPJAT                                             0187
*     END;                                                         0188
*   IF EIDFLD=IMDMDSP1×EIDFLD=IMDMDSP2×/* DSP EID              Y02014*/
*       EIDFLD=IMDMDSP3×EIDFLD=IMDMDSP4 THEN                       0189
@RF00183 CLC   EIDFLD(2,EIDPTR),@CB00241                           0189
         BE    @RT00189                                            0189
         CLC   EIDFLD(2,EIDPTR),@CB00243                           0189
         BE    @RT00189                                            0189
         CLC   EIDFLD(2,EIDPTR),@CB00213                           0189
         BE    @RT00189                                            0189
         CLC   EIDFLD(2,EIDPTR),@CB00246                           0189
         BNE   @RF00189                                            0189
@RT00189 DS    0H                                                  0190
*     DO;                                                          0190
*       IF DSP='1'B THEN            /* EDITING DSP             Y02014*/
         TM    DSP(AEDITCBR),B'01000000'                           0191
         BO    @RT00191                                            0191
*         GO TO AMDPBRH;            /* CHECK EXIT SLOT         Y02014*/
*       GO TO AMDPJAT;              /* PREPARE FOR RETURN      Y02014*/
         B     AMDPJAT                                             0193
*     END;                                                         0194
*   GO TO AMDPJAT;                  /* PREPARE FOR RETURN      Y02014*/
         B     AMDPJAT                                             0195
*   END AMDPRFLT                                                   0196
*                                                                  0196
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (AMDPRTAB)                                       */
*/*%INCLUDE SYSLIB  (AMDOPTWD)                                       */
*/*%INCLUDE SYSLIB  (IMDMEDIT)                                       */
*                                                                  0196
*       ;                                                          0196
@DATA    DS    0H
@CH00043 DC    H'1'
@CH00097 DC    H'4'
@CH00084 DC    H'5'
@CH00054 DC    H'7'
@CH00162 DC    H'15'
@CH00128 DC    H'20'
         DS    0F
@SA00001 DS    18F
@TF00001 DS    F
         DS    0F
@CF00382 DC    F'-1'
         DS    0D
@TS00001 DS    CL1
@CB00209 DC    X'2100'
@CB00211 DC    X'1000'
@CB00213 DC    X'0003'
@CB00215 DC    X'5201'
@CB00217 DC    X'5200'
@CB00219 DC    X'5100'
@CB00225 DC    X'6101'
@CB00227 DC    X'6201'
@CB00229 DC    X'6200'
@CB00231 DC    X'5101'
@CB00233 DC    X'4002'
@CB00235 DC    X'4003'
@CB00237 DC    X'8100'
@CB00239 DC    X'8200'
@CB00241 DC    X'0001'
@CB00243 DC    X'0002'
@CB00246 DC    X'0004'
@CB00250 DC    X'4001'
@CB00368 DC    X'0FFF'
USRVAL   DS    CL2
BLANK1   DC    CL8'        '
FLTPTCH  DC    CL100'FLTPTCH'
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
JOBOFST  EQU   @03
EIDPTR   EQU   @02
COUNT    EQU   @02
AEDITCBR EQU   @09
REG12    EQU   @12
         ENTRY FLTPTCH
AMDPRTAB EQU   0
CURREC   EQU   AMDPRTAB+4
DEBGFLGS EQU   AMDPRTAB+8
PTHFLGS1 EQU   DEBGFLGS
FLT      EQU   PTHFLGS1
PTHFLGS2 EQU   DEBGFLGS+1
INRFCFGS EQU   DEBGFLGS+2
FMT      EQU   INRFCFGS
DMDFMT   EQU   INRFCFGS
IOFLGS   EQU   DEBGFLGS+3
GTFWDPTR EQU   AMDPRTAB+20
USEREXIT EQU   AMDPRTAB+24
STARTIME EQU   AMDPRTAB+40
STOPTIME EQU   AMDPRTAB+52
NAMES    EQU   AMDPRTAB+64
JOBNAMES EQU   NAMES
ADS      EQU   AMDPRTAB+104
AADS     EQU   ADS
ASCBADDR EQU   AADS
SIF      EQU   AMDPRTAB+124
SIOFLGS  EQU   SIF
ALLS     EQU   SIOFLGS
SELS     EQU   SIOFLGS
DVADS1   EQU   AMDPRTAB+128
IO       EQU   AMDPRTAB+228
IOFLGS2  EQU   IO
ALLI     EQU   IOFLGS2
SELI     EQU   IOFLGS2
DVADS2   EQU   AMDPRTAB+232
VCF      EQU   AMDPRTAB+332
SVCFLGS  EQU   VCF
ALLV     EQU   SVCFLGS
SELV     EQU   SVCFLGS
USR      EQU   AMDPRTAB+368
USRFLGS  EQU   USR
ALLU     EQU   USRFLGS
USRTAB   EQU   AMDPRTAB+372
USRNGTAB EQU   USRTAB
PI       EQU   AMDPRTAB+452
PIFLGS   EQU   PI
ALLP     EQU   PIFLGS
SELP     EQU   PIFLGS
PGMNGEN  EQU   AMDPRTAB+456
GENFLAGS EQU   PGMNGEN+3
EXT      EQU   GENFLAGS
DSP      EQU   GENFLAGS
SYS      EQU   GENFLAGS
SYSM     EQU   GENFLAGS
RNIO     EQU   GENFLAGS
SRM      EQU   GENFLAGS
RR       EQU   GENFLAGS
GENFLGS1 EQU   AMDPRTAB+460
AFRMAD   EQU   AMDPRTAB+488
OFSTEID  EQU   AMDPRTAB+492
OFSTDATA EQU   AMDPRTAB+494
ESTARTME EQU   AMDPRTAB+500
ESTOPTME EQU   AMDPRTAB+509
AMDOPTWD EQU   0
OPTS1    EQU   AMDOPTWD
OPTS2    EQU   AMDOPTWD+1
OPTS3    EQU   AMDOPTWD+2
OPTS4    EQU   AMDOPTWD+3
OPTTIME  EQU   OPTS4
FRMATAB  EQU   0
AGET     EQU   FRMATAB
AHEX     EQU   FRMATAB+4
ACON     EQU   FRMATAB+8
AFLT     EQU   FRMATAB+12
AAPP     EQU   FRMATAB+16
AEXT     EQU   FRMATAB+20
ASPI     EQU   FRMATAB+28
ATME     EQU   FRMATAB+32
PRAPP    EQU   0
PREXT    EQU   0
EIDFLD   EQU   0
INREC    EQU   0
PRCON    EQU   0
PRFLT    EQU   0
PRGET    EQU   0
PRHEX    EQU   0
PRSPI    EQU   0
PRTME    EQU   0
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
FRMRES1  EQU   FRMATAB+36
APRFMG   EQU   FRMATAB+24
OPTRES3  EQU   OPTS4
OPTIOSIO EQU   OPTS3
OPTRES2  EQU   OPTS3
OPTRR    EQU   OPTS3
OPTSRM   EQU   OPTS3
OPTRNIO  EQU   OPTS3
OPTEXT   EQU   OPTS3
OPTIOP   EQU   OPTS2
OPTIO    EQU   OPTS2
OPTPIP   EQU   OPTS2
OPTPI    EQU   OPTS2
OPTSIOP  EQU   OPTS2
OPTSIO   EQU   OPTS2
OPTSVCP  EQU   OPTS2
OPTSVC   EQU   OPTS2
OPTPCI   EQU   OPTS1
OPTRES1  EQU   OPTS1
OPTDSP   EQU   OPTS1
OPTTRC   EQU   OPTS1
OPTUSR   EQU   OPTS1
OPTSYS   EQU   OPTS1
OPTSYSP  EQU   OPTS1
OPTSYSM  EQU   OPTS1
RESERVED EQU   AMDPRTAB+522
CVTTZONE EQU   AMDPRTAB+518
ESPSEC   EQU   ESTOPTME+7
ESPMIN   EQU   ESTOPTME+5
ESPHR    EQU   ESTOPTME+3
ESPDAY   EQU   ESTOPTME
ESSEC    EQU   ESTARTME+7
ESMIN    EQU   ESTARTME+5
ESHR     EQU   ESTARTME+3
ESDAY    EQU   ESTARTME
ADTSBUF  EQU   AMDPRTAB+496
REENTWKA EQU   AMDPRTAB+484
PRFMTADD EQU   AMDPRTAB+480
AEIOCT   EQU   AMDPRTAB+476
EXITADDR EQU   AMDPRTAB+472
EXITNM   EQU   AMDPRTAB+464
RECDLL   EQU   AMDPRTAB+461
@NM00001 EQU   GENFLGS1
FIRSTHSW EQU   GENFLGS1
TSFOUND  EQU   GENFLGS1
EOFINPRO EQU   GENFLGS1
TS       EQU   GENFLGS1
EOF      EQU   GENFLAGS
PICODEA  EQU   PGMNGEN+2
PICODES  EQU   PGMNGEN
Q        EQU   PI+1
P01R     EQU   PIFLGS
O        EQU   USR+1
N01R     EQU   USRFLGS
SELU     EQU   USRFLGS
SVCNUMS  EQU   AMDPRTAB+336
M        EQU   VCF+1
L        EQU   SVCFLGS
IODVADS  EQU   DVADS2
K01RES   EQU   IO+1
JJ       EQU   IOFLGS2
SIODVADS EQU   DVADS1
II       EQU   SIF+1
H        EQU   SIOFLGS
NOEQU    EQU   SIOFLGS
EQUIV    EQU   SIOFLGS
DAY2     EQU   STOPTIME+10
F        EQU   STOPTIME+8
TIME2    EQU   STOPTIME
DAY      EQU   STARTIME+10
D        EQU   STARTIME+8
TIME     EQU   STARTIME
DDNAME   EQU   AMDPRTAB+32
C        EQU   DEBGFLGS+4
B        EQU   IOFLGS
GETEOF   EQU   IOFLGS
EDITSTOP EQU   INRFCFGS
EXTTRC   EQU   INRFCFGS
RET      EQU   INRFCFGS
SPIE     EQU   INRFCFGS
TERM     EQU   INRFCFGS
FLMODE   EQU   INRFCFGS
REMAIN   EQU   PTHFLGS2
APP      EQU   PTHFLGS2
REXT     EQU   PTHFLGS1
FRM      EQU   PTHFLGS1
HEX      EQU   PTHFLGS1
CON      EQU   PTHFLGS1
GET      EQU   PTHFLGS1
SCN      EQU   PTHFLGS1
ROOT     EQU   PTHFLGS1
AFMG     EQU   AMDPRTAB
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RC00040 EQU   AMDPBRH
@RT00048 EQU   AMDPJAT
@RT00059 EQU   AMDPFLT4
@RT00061 EQU   AMDPFLT4
@RT00063 EQU   AMDPFID
@RT00071 EQU   AMDPFLT3
@RT00074 EQU   AMDPFID
@RT00076 EQU   AMDPFID
@RT00084 EQU   AMDPJAT
@RT00087 EQU   AMDPUSR
@RT00089 EQU   AMDPBRH
@RT00091 EQU   SYSMCHK
@RT00093 EQU   AMDPIO1
@RT00097 EQU   AMDPBRH
@RT00103 EQU   AMDPBRH
@RT00109 EQU   AMDPBRH
@RT00113 EQU   AMDPJAT
@RT00115 EQU   AMDPBRH
@RT00118 EQU   AMDPBRH
@RF00122 EQU   AMDPJAT
@RT00129 EQU   AMDPBRH
@RT00132 EQU   AMDPJAT
@RT00134 EQU   AMDPBRH
@RT00137 EQU   AMDPJAT
@RT00143 EQU   AMDPBRH
@RT00149 EQU   AMDPBRH
@RT00155 EQU   AMDPBRH
@RT00161 EQU   AMDPBRH
@RT00167 EQU   AMDPBRH
@RT00173 EQU   AMDPBRH
@RT00179 EQU   AMDPBRH
@RT00185 EQU   AMDPBRH
@RT00191 EQU   AMDPBRH
@RF00189 EQU   AMDPJAT
@ENDDATA EQU   *
         END   AMDPRFLT,(C'PL/S-II',0502,73240)
