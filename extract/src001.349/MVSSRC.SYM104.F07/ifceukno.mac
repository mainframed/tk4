         TITLE 'IFCEUKNO-EDIT TABLE-LINKNAME IFCEUKNO'
***************************************************************  S21021
*
************             ENTIRE MODULE REPLACED UNDER CODE S21021
*
         SPACE 2
*  LINE MACRO     LINE MACRO     LINE MACRO     LINE MACRO            *
         MACRO
&NAME    LINE  &DATA,&LABEL,&SKIP=
.*                            THIS MACRO ESTABLISHES THE MARGINS OR
.*                                 COLUMN SETTINGS FOR EACH LINE. IT
.*                                 GENERATES NECESSARY CARRIAGE CONTROL
.*                                 ENTRIES. LASTLY IT DETERMINES THE
.*                                 NUMBER OF ENTRIES ASSOCIATED WITH
.*                                 THE PREVIOUS LINE AND STORES THAT #
.*                                 INTO THE APPROPRIATE BYTE.
.*                            &DATA(1) - CHARACTER POSITION TO BEGIN
.*                                 DATA.
.*                            &DATA(2) - # OF SPACES BETWEEN SUCCESSIVE
.*                                 DATA COLUMN STARTING CHARACTERS.
.*                            &LABEL(1) - CHAR. POS. TO BEGIN LABELS.
.*                            &LABEL(2) - # SPACES BETWEEN LINE'S LABEL
.*                                 STARTING CHARACTERS.
.*                            &SKIP= - # OF LINES TO ADVANCE CARRIAGE
.*                                 TO BEGIN NEXT PRINTED LINE.
.*                            NEW ENTRIES ARE GENERATED ONLY WHEN
.*                                 NECESSARY. OMISSION OF ITEMS MEANS
.*                                 THEY HAVE NOT CHANGED SINCE PREVIOUS
.*                                 SETTINGS. A LINE MACRO IS REQUIRED
.*                                 FOR EACH PRINTED LINE. IF NO SETTING
.*                                 CHANGES ARE REQUIRED ALL OPERANDS
.*                                 ARE OMITTED IN WHICH CASE ONLY THE
.*                                 # OF ENTRIES FOR THE PREVIOUS LINE
.*                                 IS COMPUTED. THIS MACRO MUST BE THE
.*                                 FIRST MACRO INSTRUCTION ISSUED FOR
.*                                 THE SUBJECT LINE
         GBLA  &DB,&DT,&LB,&LT,&NRENTS
         GBLA  &LASTCC,&INITIAL
         GBLC  &NRENTSX
         GBLC  &CARRCON
         GBLB  &TEST
         LCLA  &S
&NAME    DS    0C
         AIF   (&INITIAL EQ 0).FIRSTLN
         LINEND
         AGO   .NTFIRST
.FIRSTLN ANOP
&NRENTSX SETC  'N&SYSNDX'
&INITIAL SETA  1
N&SYSNDX EQU   *
.NTFIRST ANOP
         DC    AL1(0)
         AIF   ('&DATA(1)' EQ '').CKDTABS
         AIF   (&DATA(1) EQ &DB).CKDTABS
&DB      SETA  &DATA(1)
         AGO   .AA
.CKDTABS AIF   ('&DATA(2)' EQ '').NCDATA
         AIF   (&DATA(2) EQ &DT).NCDATA
         AGO   .CC
.AA      AIF   ('&DATA(2)' EQ '').BB
         AIF   (&DATA(2) EQ &DT).BB
.CC      ANOP
&DT      SETA  &DATA(2)
.BB      DC    XL2'FFFE'
         DC    FL1'&DB'
         DC    FL1'&DT'
&NRENTS  SETA  &NRENTS+1
.NCDATA  ANOP
         AIF   ('&LABEL(1)' EQ '').CKLTABS
         AIF   (&LABEL(1) EQ &LB).CKLTABS
&LB      SETA  &LABEL(1)
         AGO   .AAA
.CKLTABS AIF   ('&LABEL(2)' EQ '').NCLABEL
         AIF   (&LABEL(2) EQ &LT).NCLABEL
         AGO   .CCC
.AAA     AIF   ('&LABEL(2)' EQ '').BBB
         AIF   (&LABEL(2) EQ &LT).BBB
.CCC     ANOP
&LT      SETA  &LABEL(2)
.BBB     DC    XL2'FFFF'
         DC    FL1'&LB'
         DC    FL1'&LT'
&NRENTS  SETA  &NRENTS+1
.NCLABEL ANOP
         AIF   ('&SKIP' NE '').CONT
         AIF   (&TEST EQ 0).NOCHANG
&S       SETA  &LASTCC
         AGO   .DEFAULT
.CONT    ANOP
         AIF   (&TEST EQ 0).AB
&S       SETA  &SKIP
.DEFAULT ANOP
         ORG   &CARRCON+3
         DC    AL.3(0),AL.2(&S),AL.3(1)
         ORG
&LASTCC  SETA  &S
&TEST    SETB  0
         AGO   .DD
.AB      AIF   (&SKIP EQ &LASTCC).NOCHANG
A&SYSNDX DC    XL2'FFFB'
         DC    AL.3(0),AL.2(&SKIP),AL.3(1)
         DC    FL1'9'
&LASTCC  SETA  &SKIP
&TEST    SETB  1
&CARRCON SETC  'A&SYSNDX'
&NRENTS  SETA  &NRENTS+1
.DD      ANOP
.NOCHANG ANOP
         MEND
         EJECT
         SPACE 2
*  ROUTINE MACRO     ROUTINE MACRO     ROUTINE MACRO     ROUTINE MACRO*
         MACRO
&NAME    ROUTINE &LOGITEM,&RNAME
         GBLC  &DSECT,&CSECT
         GBLC  &ITEM(1000)
         GBLA  &SHIFT(1000),&ITEMNBR
         GBLA  &NRENTS
         LCLA  &ISHIFT,&NDX
.LOOP    ANOP
&NDX     SETA  &NDX+1
         AIF   ('&ITEM(&NDX)' EQ '&LOGITEM').FOUND
         AIF   (&NDX LT &ITEMNBR).LOOP
         MNOTE *,'LOG ITEM NOT DEFINED'
         MEXIT
.FOUND   ANOP
&ISHIFT  SETA  &SHIFT(&NDX)
&NAME    DC    AL.12(&LOGITEM-&DSECT),XL.4'D'
         DC    AL.4(&ISHIFT),AL.12(&RNAME-&CSECT)
&NRENTS  SETA  &NRENTS+1
         MEND
*  DSGEN MACRO     DSGEN MACRO     DSGEN MACRO     DSGEN MACRO        *
         SPACE 2
         MACRO
&NAME    DSGEN &X1,&X2,&X3,&X4,&X5,&X6,&X7,&X8,&X9,&X10,&X11,&X12,&X13,X
               &X14,&X15,&X16,&X17,&X18,&X19,&X20,&X21,&X22,&X23,&X24, X
               &X25,&X26,&X27,&X28,&X29,&X30,&X31,&X32
.*                            THIS MACRO GENERATES ONE DSECT WORD
.*                                 FORMATTED FOR THE SUBJECT LOG RECORD
.*                                 EACH OPERAND HAS TWO SUB LISTS. THE
.*                                 FIRST IS THE NAME OF THE LOG ITEM
.*                                 WHILE THE SECOND IS THE # OF BITS TO
.*                                 ALLOCATE FOR THIS ITEM. ITEMS MUST
.*                                 BE DEFINED CONTIGUOUSLY WITHOUT GAPS
.*                                 UNUSED BIT GROUPS MUST BE GIVEN
.*                                 DUMMY NAMES. THE NAMES PROVIDED FOR
.*                                 THE LOG ITEMS MAY THEN BE USED IN
.*                                 THE CONVERSION MACRO INSTRUCTIONS.
         GBLC &ITEM(1000)
         GBLA &ITEMNBR,&BITS(1000),&SHIFT(1000)
         LCLC  &SYMBOL
         LCLA  &OP,&COUNT,&BYTE
.LOOP    ANOP
&OP      SETA  &OP+1
&ITEMNBR SETA  &ITEMNBR+1
&SYMBOL  SETC  '&SYSLIST(&OP,1)'
         AIF   ('&SYSLIST(&OP,2)' NE '').OK1
         MNOTE *,'NULL BIT COUNT FIELD'
         MEXIT
.OK1     ANOP
         AIF   ('&SYMBOL' NE '').OK
         MNOTE 'LOG ITEM SYMBOL NOT PROVIDED'
         AGO   .CNT
.OK      ANOP
         AIF   ('&SYMBOL'(1,1) EQ '''').CNT                *TEMP*
&SYMBOL  EQU   *+&BYTE
&ITEM(&ITEMNBR)  SETC '&SYSLIST(&OP,1)'
&BITS(&ITEMNBR) SETA &SYSLIST(&OP,2)
&SHIFT(&ITEMNBR) SETA &COUNT-&BYTE*8
.CNT     ANOP
&COUNT   SETA  &COUNT+&SYSLIST(&OP,2)
&BYTE    SETA  &COUNT/8
         AIF (&OP LT N'&SYSLIST).LOOP
         AIF   (&COUNT NE 32).NOT32
&NAME    DS    4C
         MEXIT
.NOT32   AIF   (&COUNT NE 64).ERR
&NAME    DS    8C
         MEXIT
.ERR     MNOTE '**BIT COUNT FIELDS DO NOT TOTAL 32 OR 64**'
         MEND
         MACRO
         LINEND
.*                            THIS MACRO IS USED ONLY BY THE LINE
.*                                 MACRO TO SET THE NUMBER OF ENTRIES
.*                                 ASSOCIATED WITH EACH LINE.
         GBLA  &NRENTS
         GBLC &NRENTSX
         ORG   &NRENTSX
         DC    FL1'&NRENTS'
         ORG
&NRENTS  SETA  0
B&SYSNDX EQU   *
&NRENTSX SETC  'B&SYSNDX'
         MEND
         SPACE 2
         EJECT
*  LABEL MACRO     LABEL MACRO     LABEL MACRO     LABEL MACRO        *
         SPACE 2
         MACRO
&NAME    LABEL &LABEL1,&LABEL2,&LABEL3,&LABEL4,&LABEL5,&LABEL6,        C
               &LABEL7,&LABEL8
.*                            THIS MACRO ALLOWS UP TO ACHT LABELS TO
.*                                 BE SPECIFIED FOR A GIVEN LINE. THE
.*                                 LABELS SHOULD BE ENCLOSED IN QUOTA-
.*                                 TION MARKS. THE COLUMN AND LINE END
.*                                 CONTROLS WILL BE INSERTED BY THE
.*                                 MACRO. OMITTED OPERANDS MEAN NO
.*                                 LABEL REQUIRED FOR RESPECTIVE
.*                                 COLUMN. THIS MACRO WILL ALSO ALERT
.*                                 THE PROGRAMMER TO EXACTLY WHERE THE
.*                                 TABLE MUST BE BROKEN IF NECESSARY
.*                                 TO AVOID EXCEEDING THE MAXIMUM LIMIT
         GBLC &LABELS(2000)
         GBLC  &LBL(100)
         GBLA  &LBLCTR(100)
         GBLA  &LABELNR
         GBLA  &NRENTS,&LPTR
         LCLC  &MARGIN,&TACK
         LCLC  &TEXT
         LCLA  &OP,&K,&START,&NRCHAR,&REMAIN
&MARGIN  SETC  '*'
         AIF   ('&NAME' EQ '').LOOPOUT
&LPTR    SETA  &LPTR+1
&LBL(&LPTR) SETC '&NAME'
&LBLCTR(&LPTR) SETA &LABELNR+1
.LOOPOUT ANOP
&OP      SETA  &OP+1
&K       SETA  K'&SYSLIST(&OP)
         AIF (&K GE 2).NORM
&K       SETA  2
.NORM    ANOP
&START   SETA  2
         AIF (&OP LT N'&SYSLIST).NOTLAST
&MARGIN  SETC  '$'
.NOTLAST ANOP
&NRCHAR  SETA  8
&TACK    SETC  ''
.LOOPIN  ANOP
&REMAIN  SETA  &K-&START
         AIF (&REMAIN GE 8).MORE
&TACK    SETC  '&MARGIN'
&NRCHAR  SETA  &REMAIN
.MORE    ANOP
&TEXT    SETC  ''
         AIF (&REMAIN EQ 0).ENDTEXT
&TEXT    SETC  '&SYSLIST(&OP)'(&START,&NRCHAR)
.ENDTEXT ANOP
&LABELNR SETA  &LABELNR+1
&LABELS(&LABELNR) SETC '&TEXT'.'&TACK'
&START   SETA  &START+8
         AIF ('&TACK' EQ '').LOOPIN
         AIF ('&TACK' EQ '*').LOOPOUT
         MEND
         SPACE 2
         MACRO
         LSTART
.*                            THIS MACRO IS ISSUED WHEN THE LABEL AREA
.*                                 OF THE TABLE IS TO BEGIN.
         GBLC &LABELS(2000)
         GBLA  &LABELNR
         GBLC  &LBL(100)
         GBLA  &LBLCTR(100)
         LCLA  &NDX,&CTR
         LINEND
&CTR     SETA  1
.LOOP    ANOP
&NDX     SETA  &NDX+1
         AIF   (&LBLCTR(&CTR) NE &NDX).NOLBL
&LBL(&CTR) DC  C'&LABELS(&NDX)'
&CTR     SETA  &CTR+1
         AGO   .LOOPCTL
.NOLBL   ANOP
         DC    C'&LABELS(&NDX)'
.LOOPCTL AIF   (&NDX LT &LABELNR).LOOP
         MEND
         SPACE 2
*  BIN MACRO     BIN MACRO     BIN MACRO     BIN MACRO     BIN MACRO  *
         SPACE 2
         MACRO
         BIN   &LOGITEM,&SKIP$OR
.*                                 &LOGITEM - NAME OF ITEM IN LOG
.*                                      RECORD DSECT
.*                                 &SKIP$OR - NBR OF SPACES TO SKIP ON
.*                                 MULTIPLE PRINT OR NBR OF SPACES
.*                                      TO BACK UP FROM COLUMN FOR
.*                                      START OF PRINTING. THE LETTER
.*                                      B PRECEEDS THE NUMBER (B5) IF
.*                                      THE LATTER IS DESIRED. OMISSION
.*                                      OF THIS OPERAND FORCES OPTION 2
.*                                      WITH BACKUP SPACING EQUAL TO
.*                                 THE NUMBER OF BITS IN THE ITEM
.*                                 DEFINITION (VIA MACRO 'DSGEN').
.*                            A LIMIT OF 15 BITS IS IMPOSED FOR THE
.*                                 TOTAL NUMBER OF BITS TO PRINT.
         GBLC &ITEM(1000)
         GBLA &ITEMNBR,&BITS(1000),&SHIFT(1000),&NRENTS
         GBLC  &DSECT
         LCLB  &B
         LCLA  &IBITS,&NDX,&ISHIFT,&K
         LCLA  &TEMP,&T
         LCLC  &S
.LOOP    ANOP
&NDX     SETA  &NDX+1
         AIF   ('&ITEM(&NDX)' EQ '&LOGITEM').FOUND
         AIF   (&NDX LT &ITEMNBR).LOOP
         MNOTE *,'YOU BLEW IT'
         ROUTINE DUM,SKIPPER
         MEXIT
.FOUND   ANOP
&ISHIFT  SETA  &SHIFT(&NDX)
&IBITS   SETA  &BITS(&NDX)
&T       SETA  &IBITS-1
&B       SETB  0
         AIF   ('&SKIP$OR' EQ '').BACKUP
&K       SETA  K'&SKIP$OR
&B       SETB  ('&SKIP$OR'(1,1) EQ 'B')
&S       SETC  '&SKIP$OR'(&B+1,&K-&B)
&T       SETA  &S
.BACKUP  ANOP
&NRENTS  SETA  &NRENTS+1
&TEMP    SETA  &ISHIFT
A&SYSNDX DC    AL.12(&LOGITEM-&DSECT),XL.4'&TEMP'
         AIF (&IBITS EQ 1 AND &B EQ 0).OUT
         ROUTINE    YVOL5,CHKVOL
         ORG   A&SYSNDX
&B       SETB  1
         DC    AL.12(&LOGITEM-&DSECT),XL.4'C'
         DC    BL.1'&B',AL.7(&T),AL.4(&IBITS),FL.4'&ISHIFT'
.OUT     ANOP
         MEND
         EJECT
*  HEX MACRO     HEX MACRO     HEX MACRO    HEXN MACRO     HEX MACRO  *
         SPACE 2
         MACRO
         HEX   &LOGITEM,&SKIP$OR,&BYTES
.*                                 CONVERSIONS.
.*                            &LOGITEM - NAME OF DATA ITEM TO BE
.*                                 CONVERTED
.*                            &SKIP$OR - NUMBER OF SPACES TO SKIP ON
.*                                 MULTIPLE PRINT OR NBR OF SPACES TO
.*                                 BACK UP FROM COLUMN FOR START OF
.*                                 PRINTING. THE LETTER B PRECEEDS THE
.*                                 NUMBER (B8) IF THE LATTER OPTION IS
.*                                 DESIRED. OMISSION OF THIS OPERAND
.*                                 FORCES OPTION 2 WITH BACKUP SPACING
.*                                 EQUAL TO THE NUMBER OF BYTES SPECI-
.*                                 FIED BY THE NEXT OPERAND (TWICE THIS
.*                                 NUMBER IF SUFFIX IS EXPLICITLY OR
.*                                 IMPLICITLY B).
.*                            &BYTES - NUMBER OF TOTAL INPUT BYTES TO
.*                                 PROCESS. THIS NUMBER IS SUFFIXED
.*                                 WITH AN L,R, OR B TO STIPULATE
.*                                 PRINTING OF THE LEFT HALF, RIGHT
.*                                 HALF, OR BOTH HALVES OF THE BYTE
.*                                 RESPECTIVELY. OMISSION OF THIS
.*                                 OPERAND DEFAULTS TO B WITH THE NUM-
.*                                 BER OF BYTES EQUAL TO THE ITEM LNGTH
.*                            A NEW ENTRY IS GENERATED ONLY WHEN NECES-
.*                                 SARY. THIS MACRO MUST BE THE FIRST
.*                                 MACRO INSTRUCTION ISSUED FOR THE
.*                                 SUBJECT LINE(S).
         GBLC &ITEM(1000),&DSECT
         GBLA &ITEMNBR,&BITS(1000),&SHIFT(1000),&NRENTS
         LCLB  &B
         LCLA  &IBITS,&NDX,&ISHIFT,&K,&T,&CODE,&BYTESP
         LCLC  &S,&LETTER
.LOOP    ANOP
&NDX     SETA  &NDX+1
         AIF   ('&ITEM(&NDX)' EQ '&LOGITEM').FOUND
         AIF   (&NDX LT &ITEMNBR).LOOP
         MNOTE *,'LOG ITEM NOT DEFINED'
         MEXIT
.FOUND   ANOP
&ISHIFT  SETA  &SHIFT(&NDX)
&IBITS   SETA  &BITS(&NDX)
&CODE    SETA  1
&K       SETA  K'&BYTES
         AIF   (&IBITS-(&IBITS/4)*4 EQ 0).OK
         MNOTE *,'BIT LENGTH SPECIFICATION INCONSISTENT WITH CONTROL'
         MEXIT
.OK      AIF   ('&BYTES' EQ '').USEDEFN
&LETTER  SETC  '&BYTES'(&K,1)
&S       SETC  '&BYTES'(1,&K-1)
&BYTESP  SETA  &S
         AIF   ('&LETTER' EQ 'B').BOTH
         AIF   (&ISHIFT EQ 0 OR &ISHIFT EQ 4).OK2
.ERR     MNOTE *,'DATA NOT ALLIGNED ON HEX OR BYTE BOUNDARY'
         MEXIT
.USEDEFN ANOP
&BYTESP  SETA  &IBITS/8
.BOTH    AIF   (&ISHIFT NE 0).ERR
&CODE    SETA  3
&T       SETA  &BYTESP*2-1
&S       SETC  '&T'
.OK2     AIF   (&ISHIFT EQ 0).L
&CODE    SETA  2
.L       ANOP
&B       SETB  1
         AIF   ('&SKIP$OR' EQ '').BACKUP
&K       SETA  K'&SKIP$OR
&B       SETB  ('&SKIP$OR'(1,1) EQ 'B')
&S       SETC  '&SKIP$OR'(&B+1,&K-&B)
.BACKUP  ANOP
&NRENTS  SETA  &NRENTS+1
         DC    AL.12(&LOGITEM-&DSECT),XL.4'A'
         DC    BL.1'&B',FL.7'&S',FL.4'&BYTESP',FL.4'&CODE'
.OUT     ANOP
         MEND
         MACRO
         SPECIAL  &ROUTINE,&PARAM,&SPACE=
.*                            THIS MACRO GENERATES A SPECIAL ROUTINE
.*                                 ENTRY TO BE PROCESSED BY THE SUM. M.
.*                            &ROUTINE - SYMBOL ON SPECIAL ROUTINE EWT.
.*                            &PARAM - AN 8 BIT BINARY REPRESENTATION
.*                                 TO OCCUPY THE 'MASK' FIELD BUT TO BE
.*                                 INTERPRETED AS AN ARGUMENT OF THE
.*                                 SPECIAL ROUTINE.
.*                            &SPACE - THE NUMBER OF 2BYTE COUNTERS TO
.*                                 ALLOCATE FOR REQUIRED PROCESSING.
         GBLC  &CSECT
         GBLA  &COUNTR
         LCLA  &ADD
         DC    AL1(128)
         DC    BL.8'&PARAM'
         DC    AL2(&ROUTINE-&CSECT)
         DC    AL2(&COUNTR)
&ADD     SETA  1
         AIF   ('&SPACE' EQ '').NORM
&ADD     SETA  &SPACE
.NORM    ANOP
&COUNTR  SETA  &COUNTR+&ADD
         MEND
         MACRO
         SUM   &LOGITEM,&MASK
.*                            THIS MACRO GENERATES A NORMAL EDIT ENTRY
.*                                 FOR PROCESSING BY THE SUMMARY MODULE
.*                            &LOGITEM - NAME OF DATA ITEM TO BE SUMMED
.*                            &MASK - BYTE MASK FOR BITS TO BE TESTED.
.*                                 THIS OPERAND SHOULD BE OMITTED FOR
.*                                 SINGLE BIT ITEMS IN WHICH CASE THE
.*                                 MASK WILL BE SET ACCORDING TO THE
.*                                 OFF BYTE BIT DISPLACEMENT OF THE
.*                                ITEM AS DEFINED BY THE MACRO 'DSGEN'
         GBLA  &COUNTR,&ITEMNBR,&BITS(1000),&SHIFT(1000)
         GBLC  &ITEM(1000),&DSECT
         LCLA  &IBITS,&NDX,&ISHIFT,&M,&BITNBR
.LOOP    ANOP
&NDX     SETA  &NDX+1
         AIF   ('&ITEM(&NDX)' EQ '&LOGITEM').FOUND
         AIF   (&NDX LT &ITEMNBR).LOOP
         MNOTE *,'LOGITEM NOT FOUND'
         MEXIT
.FOUND   ANOP
         DC    AL1(0)
&ISHIFT  SETA  &SHIFT(&NDX)
&IBITS   SETA  &BITS(&NDX)
         AIF   ('&MASK' EQ '').FORM
         DC    B'&MASK'
         AGO   .ITEM
.FORM    ANOP
&BITNBR  SETA  &ISHIFT-7
&BITNBR  SETA  0-&BITNBR
&M       SETA  1
.LOOP2   ANOP
         AIF   (&BITNBR EQ 0).GOTIT
&M       SETA  &M*2
&BITNBR  SETA  &BITNBR-1
         AGO   .LOOP2
.GOTIT   ANOP
         DC    AL1(&M)
.ITEM    DC    AL2(&LOGITEM-&DSECT)
         DC    AL2(&COUNTR)
&COUNTR  SETA  &COUNTR+1
         MEND
         GBLC  &DSECT,&CSECT
&CSECT   SETC       'IFCEUKNO'
&DSECT   SETC       'COMMON'
IFCEUKNO CSECT
*
*
         USING      COMMON,R2
         USING      *,R9
         DC         A(ENTRIES)
         DC         CL8'IFCEUKNO'
R9PTR    DS         2F
*
         EJECT
*
*        COMMON DSECT
COMMON   DSECT
         DSGEN (CLASS,8),(RELNO,8),(SW1,8),(SW2,8),(SW3,8),(DUMM1,24)
         DSGEN (DATE,32),(TIME,32)
         DSGEN (DUMM2,8),(SER,24),(CPUID,24),(DUMM4,8)
*
         EJECT
MCHDSECT DSECT
         DSGEN (MCLASS,64)
         DSGEN (MDUM1,64)
         DSGEN (MDUM2,64)
         DSGEN (MPGMID,64)
         DSGEN (MJOBID,64)
         DSGEN (MPSW,64)
         EJECT
CCHDSECT DSECT
         DSGEN (CCLASS,64)
         DSGEN (CDUMM1,64)
         DSGEN (CDUMM2,64)
         DSGEN (CJOBID,64)
         DSGEN (CDUMM3,64)
         DSGEN (CDUMM4,64)
         DSGEN (CFCCW,64)
         DSGEN (CCSW,64)
*
         EJECT
OBRDSECT DSECT
         DSGEN (OCLASS,64)
         DSGEN (ODUMM1,64)
         DSGEN (ODUMM2,64)
         DSGEN (OJOBID,64)
         DSGEN (OFCCW,64)
         DSGEN (OCSW,64)
         DSGEN (ODUM1,8),(O2CUA,24),(ODEVT,32)
         DSGEN (ODUM2,8),(O1CUA,24)
*
         EJECT
SOBRDSCT DSECT
         DSGEN (SOCLASS,64)
         DSGEN (SODUMM1,64)
         DSGEN (SODUMM2,64)
         DSGEN (SODEVT,32),(SODUM1,8),(SO1CUA,24)
*
         EJECT
TPRDSECT DSECT
         DSGEN (TCLASS,32),(TTID,8),(TSW3,8),(TDUM1,16)
         DSGEN (TDUMM1,64)
         DSGEN (TDUMM2,64)
         DSGEN (T1CUA,16),(TID,16)
*
         EJECT
DISMDSCT DSECT
         DSGEN (DCLASS,64)
         DSGEN (DDUMM1,64)
         DSGEN (DDUMM2,64)
         DSGEN (DDUMM3,64)
         DSGEN (DDEVT,32),(DDUM1,8),(DCUA,24)
*
         EJECT
IFCEUKNO CSECT
*        SPECIAL ROUTINE SECTION
*
MOVE8    MVC        L0(L8,R3),L0(R4)    MOVE 8 CHARS TO LINE
SKIPPER  BR         R14                 RETURN
*
SAVE3    ST         R3,SAVER3           SAVE R3
         BR         R14
SETDATE  CLC        L1(L3,R4),ZERO      IS THERE A DATE
         BE         SETNONE             BR-NO
         UNPK       XSAVE(L8),L1(L3,R4) UNPACL DATE
         MVC        L5(L2,R3),XSAVE+L3  MOVE YEAR
         MVC        L0(L3,R3),XSAVE+L5  MOVE DAYS
         BR         R14                 RETURN
SETNONE  MVC        L0(L4,R3),NONE      MOVE IN NONE CONST
         BR         R14                 RETURN
*
SETCLASS STM        R5,R8,XSAVE         SAVE WORK R%GS
         SR         R5,R5
         IC         R5,CLASS            PICK UP CLASS
         SRL        R5,L4               DROP OFF LOW 4 BITS
         SLL        R5,L2               MULTIPLY BY 4
         LA         R5,TABLE(R5)        INDEX INTO TABLE
         MVC        L0(L4,R3),L0(R5)    MOVE IN CLASS
RETURN   LM         R5,R8,XSAVE         RESTORE REGS
         BR         R14
*
SETSOURC STM        R5,R8,XSAVE
         SR         R5,R5
         IC         R5,RELNO            PICK UP RELEASE NUMBER
         LA    R6,HEX1F                 DROP OFF SYSTEM BITS IF ANY
         NR    R5,R6                    BY ANDING WITH '1F'X
HEX1F    EQU   X'1F'
         LTR        R5,R5               IS IT ZERO
         BZ    SETNONEA                 BR ZERO
         CVD        R5,WORK
         UNPK       L0(L2,R3),WORK+L6(L2)    UNPACK IT INTO LINE
         MVZ        L1(L1,R3),L0(R3)    PUT ON ZONE
         B          RETURN
SETNONEA EQU   *
         MVC   L0(L4,R3),NONE           SET IN NONE
         B    RETURN
*
TESTC    STM        R5,R8,XSAVE         SAVE WORK REGS
         L          R5,SAVER3           PICK UP SAVED ADDRESS
         CLC        L3(L2,R4),ZERO      MODEL NUMBER OK
         BNE        TESTC1              BR OK
         MVC        L0(L4,R5),NONE      PUT IN NONE
TESTC1   LA         R5,L26(R5)          BUMP TO SERIAL NUMB
         CLC        L0(L2,R4),ZERO      IS IT ZERO
         BNE        RETURN              BR-NO
         MVC   L0(L6,R5),NONE             SET IN NONE
         B          RETURN
*
TESTCONV TM         L0(R4),HEX02        HAS REC BEEN CONVERTED
         BO         SKIPPER             BR-YES
         SR         R15,R15             STOP PRINTING OF LINE
         BR         R14
TESTTYP  STM        R5,R8,XSAVE         SAVE WORK REGS
         LA         R6,L2               SET UP FOR SIZE DETRMIN
         LR         R5,R2               POINTER TO REC
         SR         R5,R6               POINT TO SIZE
         MVC        CSIZEA(L2),L0(R5)   MOVE IN SIZE
         MVC        CSIZEB(L2),L0(R5)   MOVE IN SIZE
         MVC        SOSIZE(L2),L0(R5)   MOVE IN SIZE
         MVC         MSIZE(L2),L0(R5)   MOVE IN SIZE
         MVC         OSIZE(L2),L0(R5)   MOVE IN SIZE
         MVC         TSIZE(L2),L0(R5)   MOVE IN SIZE
         MVC         DSIZE(L2),L0(R5)   MOVE IN SIZE
         SR         R5,R5
         IC         R5,CLASS            PICK UP CLASS
         SRL        R5,L4               DROP OFF LOW 4 BITS
         TM    SW1,HEX20               IS THIS A TRUNCATED REC  YM7627P
         BNO   CKOBR                   NO - CONTINUE            YM7627P
         MVC   L0(L37,R3),TREC         TRUN REC TO PRINT LINE   YM7627P
         B     RETURN                  RETURN                   YM7627P
CKOBR    DS    0H                                               YM7627P
         CH         R5,H3               IS IT AN OBR
         BE         TESTTYPC            BR-YES
TESTTYPA SLL        R5,L3               MULTIPLY BY 3
         LA         R7,ADCONS(R5)       INDEX INTO TABLE
         LM         R5,R6,L0(R7)        PICK UP ADCONS
TESTTYPB STM        R5,R6,R9PTR         SET ADDRESSES INTO SAVE
         B          RETURN
TESTTYPC TM         SW2,HEX04           IS IT A DISMOUNT
         BO         TESTTYPD            BR-YES
         TM         SW2,HEX20           IS IT A SHORT OBR
         BZ         TESTTYPA            BR-NO
         LA         R5,SOBRSTRT-L4      SET POINTER
         LA         R6,SOBRLBEL
         B          TESTTYPB
TESTTYPD LA         R5,DISSTART-L4
         LA         R6,DISLABEL
         B          TESTTYPB
*
HEX8     STM   R5,R8,XSAVE
         MVC   WORK(L8),L0(R4)          BRING IN 8 BYTES
         LA    R5,L8                    SET LOOP COUNT
         LR    R8,R3                    SET OUTPUT ADDRESS
HEX8A    SR    R6,R6
         IC    R7,WORK                  PICK UP 1ST ONE
         MVC   WORK(L7),WORK+L1         SWAP CHARS
         SLL   R7,L24                   MOVE IT TO HI SIDE
         SLDL  R6,L4                    GET FOUR BITS
         LA    R6,CHARS(R6)
         MVC   L0(L1,R8),L0(R6)         MOVE IN INDEXED CGAR
         SR    R6,R6
         SLDL  R6,L4                    MOVE OVER LAST 4 BITS
         LA    R6,CHARS(R6)             INDEX
         MVC   L1(L1,R8),L0(R6)         MOVE OVER CHAR
         LA    R8,L3(R8)                BUMP OUTPUT ADDRESS
         BCT   R5,HEX8A
         B     RETURN
         USING TCLASS,R2
SETSUBID TM    TSW3,HEX80               IS SUB ID VARIABLE
         BZ    SKIPPER                  NOT VARIABLE ONLY TWO BYTES
         STM   R5,R8,XSAVE              SAVE REGS
         LR    R5,R3                    SET WORK REG TO PRINT POS
         LA    R6,L20                   DROPP BACK TO 2 BYTE DATA IN
         SR    R5,R6                    PRINT BUFFER
         IC    R6,TSW3                  PICK UP VARIABLE SUBID SIZE
         LA    R7,L15                   DROP OFF FLAG BIT
         NR    R6,R7                    LEAVING NO. TO MOVE - 1
         EX    R6,TSUBMOVE              MOVE SUBID TO PRINT LINE
         B     RETURN
TSUBMOVE MVC   L0(L0,R5),TID
*
*                   EQUATES
*
R0       EQU        0
R1       EQU        1
R2       EQU        2
R3       EQU        3
R4       EQU        4
R5       EQU        5
R6       EQU        6
R7       EQU        7
R8       EQU        8
R9       EQU        9
R10      EQU        10
R11      EQU        11
R12      EQU        12
R13      EQU        13
R14      EQU        14
R15      EQU        15
*
L0       EQU        0
L1       EQU        1
L2       EQU        2
L3       EQU        3
L4       EQU        4
L5       EQU        5
L6       EQU        6
L7       EQU        7
L8       EQU        8
L9       EQU        9
L10      EQU        10
L15      EQU   15
L20      EQU   20
L24      EQU   24
L26      EQU        26
HEX02    EQU        X'02'
HEX04    EQU        X'04'
HEX20    EQU        X'20'
HEX80    EQU   X'80'
*
*                   CONSTANTS
*
WORK     DS         D
XSAVE    DS         5F
SAVER3   DS         F
ZERO     DC         F'0'
NONE     DC    CL6'NONE'
TREC     DC    CL37' TRUNCATED RECORD - HEX DUMP FOLLOWS '      YM7627P
L37      EQU   37                                               YM7627P
TABLE    DC         C'NONE'             CODE=00
         DC         C'MCH '             CODE=10
         DC         C'CCH '             CODE=20
         DC         C'OBR '             CODE=30
         DC         C'ABND'             CODE=40
         DC         C'IPL '             CODE=50
         DC         C'NONE'             CODE=60
         DC         C'NONE'             CODE=70
         DC         C'EOD '             CODE=80
         DC         C'TPER'             CODE=90
         DC         C'NONE'             CODE=A0
         DC         C'NONE'             CODE=B0
         DC         C'NONE'             CODE=C0
         DC         C'NONE'             CODE=D0
         DC         C'NONE'             CODE=E0
         DC         C'NONE'             CODE=F0
ADCONS   DC         A(COMEND-L4)
         DC         A(COMLABEL)
         DC         A(MCHSTART-L4)
         DC         A(MCHLABEL)
         DC         A(CCHSTART-L4)
         DC         A(CCHLABEL)
         DC         A(OBRSTART-L4)
         DC         A(OBRLABEL)
         DC         A(COMEND-L4)
         DC         A(COMLABEL)
         DC         A(COMEND-L4)
         DC         A(COMLABEL)
         DC         A(COMEND-L4)
         DC         A(COMLABEL)
         DC         A(COMEND-L4)
         DC         A(COMLABEL)
         DC         A(COMEND-L4)
         DC         A(COMLABEL)
         DC         A(TPRSTART-L4)
         DC         A(TPRLABEL)
         DC         A(COMEND-L4)
         DC         A(COMLABEL)
         DC         A(COMEND-L4)
         DC         A(COMLABEL)
         DC         A(COMEND-L4)
         DC         A(COMLABEL)
         DC         A(COMEND-L4)
         DC         A(COMLABEL)
         DC         A(COMEND-L4)
         DC         A(COMLABEL)
         DC         A(COMEND-L4)
         DC         A(COMLABEL)
H3       DC         H'3'
CHARS    DC    C'0123456789ABCDEF'
         EJECT
*
*        EDIT ENTRIES
*
*
ENTRIES  DS         0F
         DC         F'0'
         DC         F'0'
         DC         A(LABELS)
         DC         H'0'
*
         DC         X'01'
         DC         X'000B8B00'         SKIP TO CHANNEL 1
         LABEL      ''
*
         LINE       (7,26),(1,20),SKIP=2
         ROUTINE    CLASS,SAVE3
         LABEL      'RECORD TYPE UNKNOWN OR UNSUPPORTED'
         LINE
         HEX        CPUID,0,2B
         HEX        SER,0,3B
         ROUTINE    SER,TESTC
         LABEL      'MODEL-','SERIAL NO-'
*
         LINE
         ROUTINE    CLASS,TESTCONV
         LABEL      'RECORD CONVERTED TO THE STANDARD FORMAT'
*
         LINE       (27,21),(1,37)
         ROUTINE    CLASS,SETCLASS
         ROUTINE    RELNO,SETSOURC
         LABEL      '--- RECORD ENTRY SOURCE -','RELEASE'
*
         LINE       ,(8,39),SKIP=1
         ROUTINE    CLASS,SKIPPER
         LABEL      'DAY YEAR','HH MM SS.TH'
         LINE       (8,39),(1,39),SKIP=2
         ROUTINE    DATE,SETDATE
         HEX        TIME,1,4B
         LABEL      'DATE-','TIME-'
*
         LINE       (1,1),(1,1),SKIP=1
         ROUTINE    CLASS,TESTTYP
COMLABEL LABEL      ''
COMEND   DC         X'FF'
CSIZEA   DC         X'0000'
         DC         X'0018'
         DC         X'0018'
         LINE
         ROUTINE    CLASS,SKIPPER
         LABEL      ''
         EJECT
MCHLABEL LABEL      ''
&DSECT   SETC       'MCHDSECT'
MCHSTART LINE       (19,1),(1,1),SKIP=2
         ROUTINE    MPGMID,MOVE8
         LABEL      'PROGRAM IDENTITY-'
*
         LINE
         ROUTINE    MJOBID,MOVE8
         LABEL      'JOB     IDENTITY-'
*
         LINE       (25,1),,SKIP=1
         ROUTINE    MPSW,HEX8
         LABEL      'OLD MACHINE CHECK PSW -'
*
         LINE
         ROUTINE    MCLASS,SKIPPER
         DC         X'FF'
MSIZE    DC         X'0000'
         DC         X'0030'
         DC         X'0030'
         EJECT
CCHLABEL LABEL      ''
&DSECT   SETC       'CCHDSECT'
CCHSTART LINE       (19,1),(1,1),SKIP=2
         ROUTINE    CJOBID,MOVE8
         LABEL      'JOB     IDENTITY-'
*
         LINE
         ROUTINE    CFCCW,HEX8
         LABEL      'FAILING CCW -'
*
         LINE       ,,SKIP=1
         ROUTINE    CCSW,HEX8
         LABEL      'CSW'
*
         LINE
         ROUTINE    CCLASS,SKIPPER
         LABEL      ''
         DC         X'FF'
CSIZEB   DC         X'0000'
         DC         X'0020'
         DC         X'0020'
         LINE       (72,72),(72,72)
         LABEL      ''
         EJECT
OBRLABEL LABEL      ''
&DSECT   SETC       'OBRDSECT'
OBRSTART LINE       (19,1),(1,1),SKIP=2
         ROUTINE    OJOBID,MOVE8
           LABEL      'JOB     IDENTITY-'
*
         LINE
         ROUTINE    OFCCW,HEX8
         LABEL      'FAILING CCW -'
*
         LINE
         ROUTINE    OCSW,HEX8
         LABEL      'CSW'
*
         LINE
         HEX        ODEVT,0,4B
         LABEL      'DEVICE TYPE CODE-'
*
         LINE       (15,22),(1,22),SKIP=1
         HEX        O1CUA,0,3B
         HEX        O2CUA,0,3B
         LABEL      'PRIMARY CUA','SECONDARY CUA'
*
         LINE
         ROUTINE    OCLASS,SKIPPER
         LABEL      ''
         DC         X'FF'
OSIZE    DC         X'0000'
         DC         X'0018'
         DC         X'0018'
         EJECT
SOBRLBEL LABEL      ''
&DSECT   SETC       'SOBRDSCT'
SOBRSTRT LINE       (19,1),(1,1),SKIP=2
         HEX        SODEVT,0,4B
         LABEL      'DEVICE TYPE CODE-'
*
         LINE       (15,20),(1,20),SKIP=1
         HEX        SO1CUA,0,3B
         LABEL      'PRIMARY CUA'
*
         LINE
         ROUTINE    SOCLASS,SKIPPER
         LABEL      ''
         DC         X'FF'
SOSIZE   DC         X'0000'
         DC         X'0018'
         DC         X'0018'
         EJECT
TPRLABEL LABEL      ''
&DSECT   SETC       'TPRDSECT'
TPRSTART LINE       (16,1),(1,1),SKIP=2
         HEX        T1CUA,0,2B
         LABEL      'PRIMARY CUA  00'
*
         LINE       (12,20),(1,20),SKIP=1
         HEX        TTID,0,1B
         HEX        TID,0,2B
         ROUTINE    TCLASS,SETSUBID
         LABEL      'RECORD ID -','SUB ID'
*
         LINE
         ROUTINE    TCLASS,SKIPPER
         LABEL      ''
         DC         X'FF'
TSIZE    DC         X'0000'
         DC         X'0018'
         DC         X'0018'
         EJECT
DISLABEL LABEL      ''
&DSECT   SETC       'DISMDSCT'
DISSTART LINE       (19,1),(1,1),SKIP=2
         HEX        DDEVT,0,4B
         LABEL      'DEVICE TYPE CODE-'
*
         LINE       (15,1),,SKIP=1
         HEX        DCUA,0,3B
         LABEL      'PRIMARY CUA'
*
         LINE
         ROUTINE    DCLASS,SKIPPER
         LABEL      ''
         DC         X'FF'
DSIZE    DC         X'0000'
         DC         X'0018'
         DC         X'0018'
         EJECT
LABELS   EQU        *
         LSTART
         END
