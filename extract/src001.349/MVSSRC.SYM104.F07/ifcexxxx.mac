         TITLE 'IFCEXXXX - EDIT TABLE - LINKNAME=IFCEXXXX'
         EJECT
*  DSGEN MACRO     DSGEN MACRO     DSGEN MACRO     DSGEN MACRO        *
         SPACE 2
*  DSGEN MACRO     DSGEN MACRO     DSGEN MACRO     DSGEN MACRO        *
         SPACE 2
         MACRO
&NAME    DSGEN
.*                            THIS MACRO GENERATES ONE DSECT WORD
.*                                 FORMATTED FOR THE SUBJECT LOG RECORD
.*                                 EACH OPERAND HAS TWO SUB LISTS. THE
.*                                 FIRST IS THE NAME OF THE LOG ITEM
.*                                 WHILE THE SECOND IS THE # OF BITS TO
.*                                 ALLOCATE FOR THIS ITEM. ITEMS MUST
.*                                 BE DEFINED CONTIGUOUSLY WITHOUT GAPS
.*                                 UNUSED BIT GROUPS MUST BE GIVEN
.*                                 DUMMY NAMES. THE NAMES PROVIDED FOR
.*                                 THE LOG ITEMS MAY THEN BE USED IN
.*                                 THE CONVERSION MACRO INSTRUCTIONS.
         GBLC &ITEM(1000)
         GBLA &ITEMNBR,&BITS(1000),&SHIFT(1000)
         LCLB  &ONLY1,&CTIND
         LCLA  &START1,&START2,&END1,&END2
         LCLC  &SYMBOL,&EQUSYM
         LCLA  &OP,&COUNT,&BYTE,&EQUCNT
         ACTR  100000
.START   AIF   (N'&SYSLIST(&OP+1) LT 3).LOOP
         AIF   ('&SYSLIST(&OP+1,3)' EQ 'EQU').LOOP     TEST FOR EQU
  AIF   ('&SYSLIST(&OP+1,3)' EQ '' OR '&SYSLIST(&OP+1,4)' EQ '').ERR1
         AIF   ('&SYSLIST(&OP+1,3)' GT '&SYSLIST(&OP+1,4)').ERR3
&START1  SETA  &SYSLIST(&OP+1,3)        GET START COUNT OF 1
&START2  SETA  &SYSLIST(&OP+1,4)        GET FIRST END COUNT
         AGO   .SET2A                   BRANCH AROUND
.ERR1    MNOTE '**FIRST SYMBOL CONCATENATION INCOMPLETE**'
         MEXIT
.SET2A   AIF   ('&SYSLIST(&OP+1,5)' EQ ''AND '&SYSLIST(&OP+1,6)' EQ '' X
               ).SET2                   TEST FOR NO SECOND
  AIF   ('&SYSLIST(&OP+1,5)' EQ '' OR '&SYSLIST(&OP+1,6)' EQ '').ERR2
         AIF   ('&SYSLIST(&OP+1,5)' GT '&SYSLIST(&OP+1,6)').ERR3
&END1    SETA  &SYSLIST(&OP+1,5)        GET START COUNT OF 2
&END2    SETA  &SYSLIST(&OP+1,6)        GET END COUNT OF 2
         AGO   .LOOP
.SET2    ANOP
&ONLY1   SETB  1                        INDICATE ONLY ONE CONCATENATION
         AGO   .LOOP
.ERR2    MNOTE '**SECOND SYMBOL CONCATENATION INCOMPLETE**'
         MEXIT
.ERR3    MNOTE '**START GREATER THAN END CONCATENATION**'
         MEXIT
.LOOP    ANOP
&OP      SETA  &OP+1
         AIF   (&OP GT N'&SYSLIST).DONE      TEST IF ALL DONE
&ITEMNBR SETA  &ITEMNBR+1
         AIF   ('&SYSLIST(&OP,2)' NE '').OK1
         MNOTE '**NULL BIT COUNT FIELD**'
         MEXIT
.OK1     ANOP
&SYMBOL  SETC  '&SYSLIST(&OP,1)'
         AIF   ('&SYMBOL' NE '').OK
*              *****     LOG ITEM SYMBOL NOT PROVIDED     *****
         AIF   ('&SYSLIST(&OP,3)' NE 'EQU').CNT
         AGO   .START                   GET NEXT
.OK      AIF   (N'&SYSLIST(&OP) LT 3).NO3    TEST FOR OLD FORMAT
         AIF   ('&SYSLIST(&OP,3)' EQ 'EQU').EQU   TEST FOR EQU
         AIF   (&ONLY1).OK2             TEST FOR ONLY ONE CONCAT
&SYMBOL  SETC  '&SYMBOL.&START1.&END1'       GET 1 AND 2 CONCAT
         AGO   .NO3                     BRANCH AROUND
.OK2     ANOP
&SYMBOL  SETC  '&SYMBOL.&START1'        GET 1 CONCATENATED
.NO3     ANOP
&SYMBOL  EQU   *+&BYTE
&ITEM(&ITEMNBR) SETC '&SYMBOL'          GET LABEL IN GLOBAL
&BITS(&ITEMNBR) SETA &SYSLIST(&OP,2)
&SHIFT(&ITEMNBR) SETA &COUNT-&BYTE*8
.CNT     ANOP
&CTIND   SETB  1                        SET COUNT INDICATOR
&COUNT   SETA  &COUNT+&SYSLIST(&OP,2)
&BYTE    SETA  &COUNT/8
         AIF   (N'&SYSLIST(&OP) LT 3).START  TEST FOR OLD FORMAT
         AIF   (&ONLY1).TSTST           TEST FOR ONLY ONE CONCAT
         AIF   (&END1 EQ &END2).TSTST   TEST FOR SECOND END
&END1    SETA  &END1+1                  INCREMENT COUNT
&OP      SETA  &OP-1                    DECREMENT INCREMENT
         AGO   .LOOP                    GENERATE NEXT
.TSTST   ANOP
         AIF   (&START1 EQ &START2).LPDONE   TEST FOR END
         AIF   (&ONLY1).NSET1           TEST FOR ONLY ONE CONCAT
&END1    SETA  &SYSLIST(&OP,5)          RE-INIT SECOND START COUNT
.NSET1   ANOP
&OP      SETA  &OP-1                    DECREMENT INDEX
&START1  SETA  &START1+1                INCREMENT FIRST COUNT
         AGO   .LOOP                    GO DO NEXT
.LPDONE  ANOP
&ONLY1   SETB  0                        CLEAR INDICATOR
         AGO   .START                   GO TEST FOR MORE SUB-LISTS
.DONE    AIF   (&COUNT-&COUNT/8*8 NE 0).ERR  TEST FOR MULTIPLE OF EIGHT
         AIF   (&CTIND EQ 0).END        NO DS IF NO COUNT
&COUNT   SETA  &COUNT/8                 GET NUMBER OF BYTES
&NAME    DS    &COUNT.C
.END     MEXIT
.ERR     MNOTE '**BIT COUNT FLDS DO NOT TOTAL MULTIPLE OF 8**'
         MEXIT
.EQU     AIF   ('&SYSLIST(&OP,4)' NE '').EQU1     TEST FOR NULL LABEL
.ERR4    MNOTE '**EQU OPERAND OMITTED OR NOT FOUND**'
         MEXIT
.EQU1    AIF   (&SYSLIST(&OP,2) LT 16).EQU2  COUNT OVER FIFTEEN
*****               THE FOLLOWING STATEMENT                *****
*****     NUMBER OF BITS EXCEED 15 - DO NOT USE AS BIN     *****
.EQU2    ANOP
&EQUCNT  SETA  0                        CLEAR COUNTER
&EQUSYM  SETC  '&SYSLIST(&OP,4)'        GET EQU OPERAND
.EQULOP  ANOP
&EQUCNT  SETA  &EQUCNT+1                INCREMENT INDEX
         AIF   ('&ITEM(&EQUCNT)' EQ '&EQUSYM').EQUOUT  LABEL FOUND?
         AIF   (&EQUCNT EQ &ITEMNBR).ERR4    ALL TESTED?
         AGO   .EQULOP                  NO-GET NEXT
.EQUOUT  ANOP
&ITEM(&ITEMNBR) SETC '&SYMBOL'          GET LABEL NAME
&BITS(&ITEMNBR) SETA &SYSLIST(&OP,2)    GET NUMBER OF BITS
&SHIFT(&ITEMNBR) SETA &SHIFT(&EQUCNT)   GET SHIFT COUNT
&SYMBOL  EQU   &EQUSYM                  THIS SYMBOL EQUATED
         AGO   .START                   RETURN FOR NEXT
         MEND
         EJECT
         MACRO
         LINEND
.*                            THIS MACRO IS USED ONLY BY THE LINE
.*                                 MACRO TO SET THE NUMBER OF ENTRIES
.*                                 ASSOCIATED WITH EACH LINE.
         GBLA  &NRENTS
         GBLC &NRENTSX
         AIF   (&NRENTS EQ 0).NORENTS   TEST FOR NO COUNT
         ORG   &NRENTSX
         DC    FL1'&NRENTS'
         ORG
&NRENTS  SETA  0
.NORENTS ANOP
B&SYSNDX EQU   *
&NRENTSX SETC  'B&SYSNDX'
         MEND
         EJECT
         MACRO
         BIN
.*                                 &SYSLIST(&OP,1) - NAME OF LOG ITEM
.*                                      RECORD DSECT
.*                                 $SYSLIST(&OP,2) - NBR OF SPACES
.*                                      TO SKIP ON MULTIPLE
.*                                      PRINT OR NBR OF SPACES
.*                                      TO BACK UP FROM COLUMN FOR
.*                                      START OF PRINTING. THE LETTER
.*                                      B PRECEEDS THE NUMBER (B5) IF
.*                                      THE LATTER IS DESIRED. OMISSION
.*                                      OF THIS OPERAND FORCES OPTION 2
.*                                      WITH BACKUP SPACING EQUAL TO
.*                                 THE NUMBER OF BITS IN THE ITEM
.*                                 DEFINITION (VIA MACRO 'DSGEN').
.*                            A LIMIT OF 15 BITS IS IMPOSED FOR THE
.*                                 TOTAL NUMBER OF BITS TO PRINT.
         GBLA  &INITIAL
         GBLB  &DIAGTST,&DIAGSET,&DIAGLIN
         GBLC &ITEM(1000)
         GBLA &ITEMNBR,&BITS(1000),&SHIFT(1000),&NRENTS
         GBLC  &DSECT
         LCLB  &B,&SUB
         LCLA  &IBITS,&NDX,&ISHIFT,&K
         LCLA  &TEMP,&T,&OP
         LCLC  &S
         AIF   (&DIAGTST EQ 0).NOMSG
         AIF   (&INITIAL EQ 0).NOMSG
         AIF   (&DIAGLIN EQ 1).NOMSG
         MNOTE '**NO LINE ASSOCIATED WITH THIS DATA**'
*****THE FOLLOWING GENERATED FOR TEST PURPOSES*****
*        LINE
         LINE
.NOMSG   ANOP
         AIF   (K'&SYSLIST(1) EQ K'&SYSLIST(1,1)).LOOP
&SUB     SETB  1
.LOOP    ANOP
&OP      SETA  &OP+1
.LOOP1   ANOP
&NDX     SETA  &NDX+1
         AIF   ('&ITEM(&NDX)' EQ '&SYSLIST(&OP,1)').FOUND
         AIF   (&NDX LT &ITEMNBR).LOOP1
         MNOTE '**LOG ITEM NOT DEFINED**'
         MEXIT
.FOUND   ANOP
&ISHIFT  SETA  &SHIFT(&NDX)
&IBITS   SETA  &BITS(&NDX)
&T       SETA  &IBITS-1
&B       SETB  0
         AIF   (&IBITS GT 0 AND &IBITS LT 16).SUB0
         MNOTE '**NO. OF BITS OUTSIDE RANGE OF 1-15**'
         MEXIT
.SUB0    AIF   (&SUB EQ 1).SUBA
         AIF   ('&SYSLIST(2)' EQ '').BACKUP
&K       SETA  K'&SYSLIST(2)
&B       SETB  ('&SYSLIST(2)'(1,1) EQ 'B')
&S       SETC  '&SYSLIST(2)'(&B+1,&K-&B)
         AGO   .SUBB
.SUBA    ANOP
         AIF   ('&SYSLIST(&OP,2)' EQ '').BACKUP
&K       SETA  K'&SYSLIST(&OP,2)
&B       SETB  ('&SYSLIST(&OP,2)'(1,1) EQ 'B')
&S       SETC  '&SYSLIST(&OP,2)'(&B+1,&K-&B)
.SUBB    ANOP
&T       SETA  &S
.BACKUP  ANOP
&NRENTS  SETA  &NRENTS+1
&TEMP    SETA  &ISHIFT
         AIF   (&IBITS NE 1 OR &B NE 0).BIN2
         DC    AL.12(&SYSLIST(&OP,1)-&DSECT),XL.4'&TEMP'
         AGO   .OUT
.BIN2    AIF   ('&SYSLIST(&OP,2)' NE '').BIN3
&B       SETB  1
.BIN3    ANOP
         DC    AL.12(&SYSLIST(&OP,1)-&DSECT),XL.4'C'
         DC    BL.1'&B',AL.7(&T),AL.4(&IBITS),FL.4'&ISHIFT'
.OUT     ANOP
&NDX     SETA  0
         AIF   (&SUB EQ 0).OUTA
         AIF   (&OP LT N'&SYSLIST).LOOP
.OUTA    ANOP
         MEND
         EJECT
         MACRO
         LSTART
.*                            THIS MACRO IS ISSUED WHEN THE LABEL AREA
.*                                 OF THE TABLE IS TO BEGIN.
         GBLA  &LABELNR
         GBLC  &LBL(100)
         GBLC &LABELS(2000)
         GBLA  &LBLCTR(100)
         GBLB  &DIAGTST,&DIAGSET,&DIAGLIN
         LCLA  &NDX,&CTR
         AIF   (&DIAGTST EQ 0).NODIAG
         AIF   (&DIAGSET EQ 0).NODIAG
         MNOTE '**NO LABEL ASSOCIATED WITH LAST SET**'
***** THE FOLLOWING GENERATED FOR TEST PURPOSES *****
*        LABEL '%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%'
               LABEL '%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%'
.NODIAG  ANOP
         LINEND
&CTR     SETA  1
.LOOP    ANOP
&NDX     SETA  &NDX+1
         AIF   (&LBLCTR(&CTR) NE &NDX).NOLBL
&LBL(&CTR) DC  C'&LABELS(&NDX)'
&CTR     SETA  &CTR+1
         AGO   .LOOPCTL
.NOLBL   ANOP
         DC    C'&LABELS(&NDX)'
.LOOPCTL AIF   (&NDX LT &LABELNR).LOOP
         MEND
         EJECT
         MACRO
&NAME    ROUTINE &LOGITEM,&RNAME
         GBLA  &NRENTS
         GBLC  &DSECT,&CSECT
         GBLA  &INITIAL
         GBLB  &DIAGTST,&DIAGSET,&DIAGLIN
         AIF   (&DIAGTST EQ 0).NOMSG
         AIF   (&INITIAL EQ 0).NOMSG
         AIF   (&DIAGLIN EQ 1).NOMSG
         MNOTE '**NO LINE ASSOCIATED WITH THIS ROUTINE**'
*****THE FOLLOWING GENERATED FOR TEST PURPOSES*****
*        LINE
         LINE
.NOMSG   ANOP
&NAME    DC    AL.12(&LOGITEM-&DSECT),XL.4'D'
         DC    AL2(&RNAME-&CSECT)
&NRENTS  SETA  &NRENTS+1
         MEND
         EJECT
         MACRO
&NAME    LINE  &DATA,&LABEL,&SKIP=
.*                            THIS MACRO ESTABLISHES THE MARGINS OR
.*                                 COLUMN SETTINGS FOR EACH LINE. IT
.*                                 GENERATES NECESSARY CARRIAGE CONTROL
.*                                 ENTRIES. LASTLY IT DETERMINES THE
.*                                 NUMBER OF ENTRIES ASSOCIATED WITH
.*                                 THE PREVIOUS LINE AND STORES THAT #
.*                                 INTO THE APPROPRIATE BYTE.
.*                            &DATA(1) - CHARACTER POSITION TO BEGIN
.*                                 DATA.
.*                            &DATA(2) - # OF SPACES BETWEEN SUCCESSIVE
.*                                 DATA COLUMN STARTING CHARACTERS.
.*                            &LABEL(1) - CHAR. POS. TO BEGIN LABELS.
.*                            &LABEL(2) - # SPACES BETWEEN LINE'S LABEL
.*                                 STARTING CHARACTERS.
.*                            &SKIP= - # OF LINES TO ADVANCE CARRIAGE
.*                                 TO BEGIN NEXT PRINTED LINE.
.*                            NEW ENTRIES ARE GENERATED ONLY WHEN
.*                                 NECESSARY. OMISSION OF ITEMS MEANS
.*                                 THEY HAVE NOT CHANGED SINCE PREVIOUS
.*                                 SETTINGS. A LINE MACRO IS REQUIRED
.*                                 FOR EACH PRINTED LINE. IF NO SETTING
.*                                 CHANGES ARE REQUIRED ALL OPERANDS
.*                                 ARE OMITTED IN WHICH CASE ONLY THE
.*                                 # OF ENTRIES FOR THE PREVIOUS LINE
.*                                 IS COMPUTED. THIS MACRO MUST BE THE
.*                                 FIRST MACRO INSTRUCTION ISSUED FOR
.*                                 THE SUBJECT LINE
         GBLA  &DB,&DT,&LB,&LT,&NRENTS
         GBLA  &LASTCC,&INITIAL
         GBLC  &NRENTSX
         GBLC  &CARRCON
         GBLB  &TEST
         GBLB  &DIAGTST,&DIAGSET,&DIAGLIN
         LCLA  &S
         AIF   (&INITIAL EQ 0 OR &DIAGTST EQ 0).DIAGSET
         AIF   (&DIAGSET EQ 0).DIAGSET
         MNOTE '**NO LABEL ASSOCIATED WITH LAST SET**'
***** THE FOLLOWING GENERATED FOR TEST PURPOSES *****
*        LABEL '%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%'
               LABEL '%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%'
.DIAGSET ANOP
&DIAGSET SETB  1
&DIAGLIN SETB  1
&NAME    DS    0C
         AIF   (&INITIAL EQ 0).FIRSTLN
         LINEND
         AGO   .NTFIRST
.FIRSTLN ANOP
&NRENTSX SETC  'N&SYSNDX'
&INITIAL SETA  1
N&SYSNDX EQU   *
.NTFIRST ANOP
         DC    AL1(0)
         AIF   ('&DATA(1)' EQ '').CKDTABS
         AIF   (&DATA(1) EQ &DB).CKDTABS
&DB      SETA  &DATA(1)
         AGO   .AA
.CKDTABS AIF   ('&DATA(2)' EQ '').NCDATA
         AIF   (&DATA(2) EQ &DT).NCDATA
         AGO   .CC
.AA      AIF   ('&DATA(2)' EQ '').BB
         AIF   (&DATA(2) EQ &DT).BB
.CC      ANOP
&DT      SETA  &DATA(2)
.BB      DC    XL2'FFFE'
         DC    FL1'&DB'
         DC    FL1'&DT'
&NRENTS  SETA  &NRENTS+1
.NCDATA  ANOP
         AIF   ('&LABEL(1)' EQ '').CKLTABS
         AIF   (&LABEL(1) EQ &LB).CKLTABS
&LB      SETA  &LABEL(1)
         AGO   .AAA
.CKLTABS AIF   ('&LABEL(2)' EQ '').NCLABEL
         AIF   (&LABEL(2) EQ &LT).NCLABEL
         AGO   .CCC
.AAA     AIF   ('&LABEL(2)' EQ '').BBB
         AIF   (&LABEL(2) EQ &LT).BBB
.CCC     ANOP
&LT      SETA  &LABEL(2)
.BBB     DC    XL2'FFFF'
         DC    FL1'&LB'
         DC    FL1'&LT'
&NRENTS  SETA  &NRENTS+1
.NCLABEL ANOP
         AIF   ('&SKIP' NE '').CONT
         AIF   (&TEST EQ 0).NOCHANG
         AGO   .DEFALTA
.CONT    ANOP
         AIF   (&TEST EQ 0).AB
         AIF   ('&SKIP' EQ 'E').AB
&S       SETA  &SKIP
.DEFAULT ANOP
         AIF   (&SKIP EQ &LASTCC).DEFALTA
         ORG   &CARRCON+3
         DC    AL.3(0),AL.2(&S),AL.3(1)
         ORG
&LASTCC  SETA  &S
.DEFALTA ANOP
&TEST    SETB  0
         AGO   .DD
.AB      AIF   ('&SKIP' NE 'E').ABB
A&SYSNDX DC    X'FFFB8B00'              EJECT
         AGO   .ABC
.ABB     AIF   (&SKIP EQ &LASTCC).NOCHANG
A&SYSNDX DC    XL2'FFFB'
         DC    AL.3(0),AL.2(&SKIP),AL.3(1)
         DC    AL.3(0),AL.2(&SKIP),AL.3(1)
&LASTCC  SETA  &SKIP
&TEST    SETB  1
.ABC     ANOP
&CARRCON SETC  'A&SYSNDX'
&NRENTS  SETA  &NRENTS+1
.DD      ANOP
.NOCHANG ANOP
         MEND
         EJECT
         MACRO
         HEX
.*                            THIS MACRO FACILITATES GENERATION OF THE
.*                                 TABLE ENTRIES SPECIFYING HEX TYPE
.*                                 CONVERSIONS.
.*                            &SYSLIST(&OP,1) - NAME OF DATA ITEM TO BE
.*                                 CONVERTED
.*                            &SYSLIST(&OP,2) - # OF SPACES TO SKIP ON
.*                                 MULTIPLE PRINT OR NBR OF SPACES TO
.*                                 BACK UP FROM COLUMN FOR START OF
.*                                 PRINTING. THE LETTER B PRECEEDS THE
.*                                 NUMBER (B8) IF THE LATTER OPTION IS
.*                                 DESIRED. OMISSION OF THIS OPERAND
.*                                 FORCES OPTION 2 WITH BACKUP SPACING
.*                                 EQUAL TO THE NUMBER OF BYTES SPECI-
.*                                 FIED BY THE NEXT OPERAND (TWICE THIS
.*                                 NUMBER IF SUFFIX IS EXPLICITLY OR
.*                                 IMPLICITLY B).
.*                            &SYSLIST(&OP,3) - NUMBER OF BYTES TO
.*                                 PROCESS. THIS NUMBER IS SUFFIXED
.*                                 WITH AN L,R, OR B TO STIPULATE
.*                                 PRINTING OF THE LEFT HALF, RIGHT
.*                                 HALF, OR BOTH HALVES OF THE BYTE
.*                                 RESPECTIVELY. OMISSION OF THIS
.*                                 OPERAND DEFAULTS TO B WITH THE NUM-
.*                                 BER OF BYTES EQUAL TO THE ITEM LNGTH
.*                            A NEW ENTRY IS GENERATED ONLY WHEN NECES-
.*                                 SARY. THIS MACRO MUST BE THE FIRST
.*                                 MACRO INSTRUCTION ISSUED FOR THE
.*                                 SUBJECT LINE(S).
         GBLC &ITEM(1000),&DSECT
         GBLA &ITEMNBR,&BITS(1000),&SHIFT(1000),&NRENTS
         GBLA  &INITIAL
         GBLB  &DIAGTST,&DIAGSET,&DIAGLIN
         LCLB  &B,&SUB
         LCLA  &IBITS,&NDX,&ISHIFT,&K,&T,&CODE,&BYTESP,&OP
         LCLC  &S,&LETTER
         AIF   (&DIAGTST EQ 0).NOMSG
         AIF   (&INITIAL EQ 0).NOMSG
         AIF   (&DIAGLIN EQ 1).NOMSG
         MNOTE '**NO LINE ASSOCIATED WITH THIS DATA**'
*****THE FOLLOWING GENERATED FOR TEST PURPOSES*****
*        LINE
         LINE
.NOMSG   ANOP
         AIF   (K'&SYSLIST(1) EQ K'&SYSLIST(1,1)).LOOP
&SUB     SETB  1
.LOOP    ANOP
&OP      SETA  &OP+1
.LOOP1   ANOP
&NDX     SETA  &NDX+1
         AIF   ('&ITEM(&NDX)' EQ '&SYSLIST(&OP,1)').FOUND
         AIF   (&NDX LT &ITEMNBR).LOOP1
         MNOTE '**LOG ITEM NOT DEFINED**'
         MEXIT
.FOUND   ANOP
&ISHIFT  SETA  &SHIFT(&NDX)
&IBITS   SETA  &BITS(&NDX)
         AIF   (&ISHIFT EQ 0 OR &ISHIFT EQ 4).ALIGN
.ERR     MNOTE '**DATA NOT ALLIGNED ON HEX OR BYTE BOUNDARY**'
         MEXIT
.ALIGN   ANOP
&CODE    SETA  1
         AIF   (&SUB EQ 1).SUBA
&K       SETA  K'&SYSLIST(3)
         AGO   .SUBB
.SUBA    ANOP
&K       SETA  K'&SYSLIST(&OP,3)
.SUBB    ANOP
         AIF   (&IBITS-(&IBITS/4)*4 EQ 0).OK
         MNOTE '**BIT LENGTH SPECIFICATION INCONSISTENT WITH CONTROL**'
         MEXIT
.OK      AIF   (&SUB EQ 1).SUBC
         AIF   ('&SYSLIST(3)' EQ '').USEDEFN
&LETTER  SETC  '&SYSLIST(3)'(&K,1)
&S       SETC  '&SYSLIST(3)'(1,&K-1)
         AGO   .SUBD
.SUBC    ANOP
         AIF   ('&SYSLIST(&OP,3)' EQ '').USEDEFN
&LETTER  SETC  '&SYSLIST(&OP,3)'(&K,1)
&S       SETC  '&SYSLIST(&OP,3)'(1,&K-1)
.SUBD    ANOP
&BYTESP  SETA  &S
         AIF   ('&LETTER' EQ 'B').BOTH
         AIF   ('&LETTER' EQ 'L').LEFT
&CODE    SETA  2
         AGO   .L
.LEFT    ANOP
&CODE    SETA  1
         AGO   .L
.USEDEFN ANOP
&BYTESP  SETA  &IBITS/8
.BOTH    AIF   (&ISHIFT NE 0).ERR
&CODE    SETA  3
&T       SETA  &BYTESP*2-1
&S       SETC  '&T'
.OK2     AIF   (&ISHIFT EQ 0).L
&CODE    SETA  2
.L       ANOP
&B       SETB  1
         AIF   (&SUB EQ 1).SUBE
         AIF   ('&SYSLIST(2)' EQ '').BACKUP
&K       SETA  K'&SYSLIST(2)
&B       SETB  ('&SYSLIST(2)'(1,1) EQ 'B')
&S       SETC  '&SYSLIST(2)'(&B+1,&K-&B)
         AGO   .SUBF
.SUBE    ANOP
         AIF   ('&SYSLIST(&OP,2)' EQ '').BACKUP
&K       SETA  K'&SYSLIST(&OP,2)
&B       SETB  ('&SYSLIST(&OP,2)'(1,1) EQ 'B')
&S       SETC  '&SYSLIST(&OP,2)'(&B+1,&K-&B)
.SUBF    ANOP
.BACKUP  ANOP
&NRENTS  SETA  &NRENTS+1
         AIF   (&BYTESP GT 0 AND &BYTESP LT 16).SUB0
         MNOTE '**NO. OF BYTES OUTSIDE RANGE OF 1-15**'
         MEXIT
.SUB0    AIF   (&SUB EQ 1).SUBG
         DC    AL.12(&SYSLIST(1)-&DSECT),XL.4'A'
         AGO   .SUBH
.SUBG    ANOP
         DC    AL.12(&SYSLIST(&OP,1)-&DSECT),XL.4'A'
.SUBH    ANOP
         DC    BL.1'&B',FL.7'&S',AL.4(&BYTESP),FL.4'&CODE'
.OUT     ANOP
&NDX     SETA  0
         AIF   (&SUB EQ 0).OUTA
         AIF   (&OP LT N'&SYSLIST).LOOP
.OUTA    ANOP
         MEND
         EJECT
         MACRO
&NAME    LABEL &LABEL1,&LABEL2,&LABEL3,&LABEL4,&LABEL5,&LABEL6,        C
               &LABEL7,&LABEL8
.*                                 THIS MACRO ALLOWS LABELS TO
.*                                 BE SPECIFIED FOR A GIVEN LINE. THE
.*                                 LABELS SHOULD BE ENCLOSED IN QUOTA-
.*                                 TION MARKS. THE COLUMN AND LINE END
.*                                 CONTROLS WILL BE INSERTED BY THE
.*                                 MACRO. OMITTED OPERANDS MEAN NO
.*                                 LABEL REQUIRED FOR RESPECTIVE
.*                                 COLUMN.
         GBLC &LABELS(2000)
         GBLC  &LBL(100)
         GBLA  &LBLCTR(100)
         GBLA  &LABELNR
         GBLA  &NRENTS,&LPTR,&INITIAL
         GBLB  &DIAGTST,&DIAGSET,&DIAGLIN
         LCLC  &MARGIN,&TACK
         LCLC  &TEXT
         LCLA  &OP,&K,&START,&NRCHAR,&REMAIN
         AIF   (&INITIAL EQ 0).DIAGCLR
         AIF   (&DIAGTST EQ 0).DIAGCLR
         AIF   (&DIAGLIN EQ 1).DIAGCLR
         MNOTE '**NO LINE ASSOCIATED WITH PREVIOUS LABEL**'
***** THE FOLLOWING GENERATED FOR TEST PURPOSES *****
*        LINE
         LINE
.DIAGCLR ANOP
&DIAGSET SETB  0
&DIAGLIN SETB  0
&MARGIN  SETC  '*'
         AIF   ('&NAME' EQ '').LOOPOUT
&LPTR    SETA  &LPTR+1
&LBL(&LPTR) SETC '&NAME'
&LBLCTR(&LPTR) SETA &LABELNR+1
.LOOPOUT ANOP
&OP      SETA  &OP+1
&K       SETA  K'&SYSLIST(&OP)
         AIF (&K GE 2).NORM
&K       SETA  2
.NORM    ANOP
&START   SETA  2
         AIF (&OP LT N'&SYSLIST).NOTLAST
&MARGIN  SETC  '$'
.NOTLAST ANOP
&NRCHAR  SETA  8
&TACK    SETC  ''
.LOOPIN  ANOP
&REMAIN  SETA  &K-&START
         AIF (&REMAIN GE 8).MORE
&TACK    SETC  '&MARGIN'
&NRCHAR  SETA  &REMAIN
.MORE    ANOP
&TEXT    SETC  ''
         AIF (&REMAIN EQ 0).ENDTEXT
&TEXT    SETC  '&SYSLIST(&OP)'(&START,&NRCHAR)
.ENDTEXT ANOP
&LABELNR SETA  &LABELNR+1
&LABELS(&LABELNR) SETC '&TEXT'.'&TACK'
&START   SETA  &START+8
         AIF ('&TACK' EQ '').LOOPIN
         AIF ('&TACK' EQ '*').LOOPOUT
         MEND
         EJECT
         SPACE 2
         GBLC  &DSECT,&CSECT
IFCEXXXX CSECT
&CSECT   SETC  'IFCEXXXX'
&DSECT   SETC  'XXXX'
*
*                   EDIT TABLE FOR  T C A M  OBR RECORDS
*
*        DEVICE CODE= 4000    DEVICE TYPE= 7770      TERMINAL TYPE
*                     4001                 2702     IBM 1050  IBM 1030
*                     4002                 2701     ATT 83B3  CC TWX
*                     4003                 2703     WTTA      IBM 2260
*                     4005                 3705     S/360     IBM 1060
*                                                   WU 115A   IBM 1130
*                                                   IBM 2780  IBM 2740
*                                                   2741C     2741P
*
*
XXXX     DSECT
         DSGEN (CLASRC,8),(SYSREL,8),(SWITCHES,16)
         DSGEN (SPARE1,32)
         DSGEN (DAY,32)
         DSGEN (HOUR,32)
         DSGEN (SPARE2,8),(CPUSERL,24)
         DSGEN (CPUID,16),(SPARE3,16)
         DSGEN (JOBID1,32)
         DSGEN (JOBID2,32)
         DSGEN (FCCWCC,8),(FCCWDA,24)
         DSGEN (FCCWFL,8),(FCCW,8),(FCCWCT,16)
         DSGEN (CSWK,8),(CSWCA,24)
         DSGEN (CSWUS1,1),(CSWUS2,1),(CSWUS3,1),(CSWUS4,1),(CSWUS5,1), C
               (CSWUS6,1),(CSWUS7,1),(CSWUS8,1),(CSWCS1,1),(CSWCS2,1), C
               (CSWCS3,1),(CSWCS4,1),(CSWCS5,1),(CSWCS6,1),(CSWCS7,1), C
               (CSWCS8,1),(CSWCT,16)
         DSGEN (DEVDPD,8),(SECCUA,24)                            S21926
         DSGEN (DEVTYP1,8),(DEVTYP1A,8),(DEVTYP2,16)             S21926
         DSGEN (SPARE4,8),(CUA,24)
         DSGEN (IORET,24),(SBCNT,8)                              S21926
         DSGEN (SIOCNT,16),(TEMPER,8),(MASK,8)
         DSGEN (OP1,8),(OP2,8),(TCAMFL,8),(LDGRAPH,8)
         DSGEN (TERMNM1,32)
         DSGEN (TERMNM2,32)
         DSGEN (SNB01,1),(SNB02,1),(SNB03,1),(SNB04,1),(SNB05,1),      C
               (SNB06,1),(SNB07,1),(SNB08,1),(SNB11,1),(SNB12,1),      C
               (SNB13,1),(SNB14,1),(SNB15,1),(SNB16,1),(SNB17,1),      C
               (SNB18,1),(SPARE8,16)                             S21926
IFCEXXXX CSECT
         USING *,R9
         USING XXXX,R2                                           S21926
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
*
L0       EQU   0
L1       EQU   1
L2       EQU   2
L3       EQU   3
L4       EQU   4
L5       EQU   5
L6       EQU   6
L7       EQU   7
L8       EQU   8
L9       EQU   9
L10      EQU   10
L11      EQU   11
L12      EQU   12
L13      EQU   13
L14      EQU   14
L15      EQU   15
L16      EQU   16
L17      EQU   17
L18      EQU   18
L19      EQU   19
L20      EQU   20
L23      EQU   23
L24      EQU   24
L26      EQU   26
L29      EQU   29                                                S21926
L36      EQU   36                                                S21926
L46      EQU   46                                                S21926
L49      EQU   49
H0F      EQU   X'0F'
HE0      EQU   X'E0'
H80      EQU   X'80'
H40      EQU   X'40'
H20      EQU   X'20'
H10      EQU   X'10'
H21      EQU   X'21'
H23      EQU   X'23'
H25      EQU   X'25'
H29      EQU   X'29'
CLRSGN   EQU   X'F0'
NORCE    EQU   X'60'
         DC    A(ENTRIES)
         DC    CL8'IFCEXXXX'
XR9PTR   DC    F'0'
XLABELP  DC    F'0'
*
*        RESTORE REGISTERS USED BY ROUTINES IN THIS MODULE
*
RETURN   LM    R5,R8,XSAVE             RESTORE REGS
         BR    R14                     RETURN
*                                                                S21926
*        SET OS RELEASE NUMBER                                   S21926
*                                                                S21926
CONVREL  STM   R5,R8,XSAVE              SAVE WORK REGS
         SR    R6,R6                    CLEAR R6
         IC    R6,L0(R4)                PICK UP REL & SYS VALUES
         SRDL  R6,L5                    SAVE REL NO IN R7
        SLL   R6,L2                    MULTIPLY SYS VALUE BY 4
         L     R8,XLABELP               PICK UP LABEL POINTER
         LA    R6,RELTAB(R6)            INDEX INTO TABLE OF SYSTEMS
         MVC   L0(L4,R8),L0(R6)         MOVE SYSTEM NAME INTO LABEL
         SR    R6,R6                    CLEAR R6
         SLDL  R6,L5                    RETREIVE REL NO.
         LTR   R6,R6                    IS IT ZERO
         BZ    NOREL                    BR-YES
         CVD   R6,WORK                  CONVERT IT
         UNPK  L0(L2,R3),WORK+L6(L2)    UNPACK IT INTO PRINT BUFF
         MVZ   L1(L1,R3),L0(R3)         MOVE ON PROPER ZONE
         B     RETURN                   EXIT
NOREL    MVC   L0(L4,R3),NONE           MOVE IN NONE FOR REL
         B     RETURN
*
U3705    STM   R5,R8,XSAVE
         MVC   HSAVE,L1(R4)
         NI    L1(R4),H0F
         CLC   L0(L2,R4),UNIT05
         BNE   CHK3270                                         @YA02789
         SR    R5,R5
         LA    R5,LAB05
         ST    R5,XLABELP
         B     RETURN
*
CHK3270  CLC   L0(L2,R4),T3270L         CHECK FOR A 3270       @YA02789
         BNE   RETURN                                          @YA02789
         LA    R5,LAB3270               ADDRESS OF 3270 LABELS @YA02789
         ST    R5,XLABELP               CHANGE LABEL POINTER   @YA02789
         B     RETURN                                          @YA02789
*                                                              @YA02789
RSET05   STM   R5,R8,XSAVE
         SR    R5,R5
         LA    R5,LABLIN
         ST    R5,XLABELP
         B     RETURN
*
*
*        SET THE DATE READY FOR PRINT
*
SETDATE  UNPK  XSAVE(L8),L1(L3,R4)     UNPACK THE DATE
         MVC   L0(L3,R3),XSAVE+L5      MOVE DAY
         MVC   L6(L2,R3),XSAVE+L3      MOVE YEAR
         BR    R14
*
*        SET THE DEVICE TYPE READY FOR PRINT
*
SETDEVT  STM   R5,R8,XSAVE             SAVE REGS
         LA    R5,L8                   8 DEVICES IN TABLE      @XA20610
         LA    R6,DEVTABLE             POIT TO DEVICE TYPES
         MVC   HSAVE,L1(R4)
         NI    L1(R4),H0F
SETDEVLP CLC   L0(L2,R4),L0(R6)        COMPARE TYPES
         BE    SDEVFND                 FOUND ONE SO BRANCH
         LA    R6,L6(R6)               MOVE POINTER TO LOOK AT NEXT T
         BCT   R5,SETDEVLP             BRANCH IF THERE ARE MORE
         MVC   L0(L4,R3),NONE          NO DEV TYPE MOVE IN NONE
         MVC   L1(L1,R4),HSAVE
         B     RETURN
SDEVFND  MVC   L0(L4,R3),L2(R6)        MOVE DEV NAME TO PRINT LINE
         MVC   L1(L1,R4),HSAVE
         B     RETURN
************************************************************** @XA20610
* PRINT THIS LINE IF DEVICE TYPE = X'100B' (3286)              @XA20610
************************************************************** @XA20610
P3286    CLC   L0(L2,R4),DEV3286       IS THIS D/T 3286        @XA20610
         BCR   8,R14                   YES, PRINT THIS LINE    @XA20610
         SR    R15,R15                 NO, SO DO NOT PRINT     @XA20610
         BR    R14                     RETURN                  @XA20610
DEV3286  DC    X'100B'                                         @XA20610
************************************************************** @XA20610
* PRINT THIS LINE IF DEVICE TYPE NOT = X'100B' (3286)          @XA20610
************************************************************** @XA20610
N3286    CLC   L0(L2,R4),DEV3286       IS THIS D/T 3286        @XA20610
         BCR   7,R14                   NO, SO PRINT THIS LINE  @XA20610
         SR    R15,R15                 YES, SO DO NOT PRINT    @XA20610
         BR    R14                     RETURN                  @XA20610
*
*        CHECK FOR CPU AND SERIAL NUMBER
*
SETCPUNO STM   R5,R8,XSAVE             SAVE REGS
         SR    R5,R5                   CLEAR R5
         IC    R5,L0(R4)               PICK UP MODEL NO
         SLL   R5,L8                   IN TO
         IC    R5,L1(R4)               R5
         LTR   R5,R5                   TEST FOR ZERO
         LR    R5,R3                   PUT LINE ADDRESS IN R5    S21926
         BNZ   SETSER                  NON ZERO BRANCH           S21926
         LA    R6,L46                  OFFSET IN REG SIX         S21926
         SR    R5,R6                                             S21926
         MVC   L0(L29,R5),UNIVERS      PUT IN UNIVERSAL NONE     S21926
         B     RETURN                                            S21926
*                                                                S21926
SETSER   LA    R6,L36                  OFFSET IN REG 6           S21926
         SR    R5,R6                   SUBTRACT OFFSET           S21926
         MVC   L0(L10,R5),SERNO        MOVE IN SERIAL NO.        S21926
         B     RETURN
*
*        SET PROGRAM NAME TO PRINT LINE
*
SETPGMN  MVC   L0(L8,R3),L0(R4)        MOVE 8 CHARS TO LINE
         BR    R14                     RETURN
*
*        SET BINARY WITH R4 POINTING TO THE CHAR
*
SETBIN   STM   R5,R8,XSAVE             SAVE REGS
         IC    R7,L0(R4)               PICK UP CHAR TO PRINT
         SLL   R7,L24                  MOVE IT TO HI OF R7
         LR    R8,R3                   PRINT POS POINTER TO REG8
         LA    R5,L8                   LOOP COUNT
SETBINA  SR    R6,R6                   CLEAR REG 6
         SLDL  R6,L1                   MOVE BIT TO R6
         STC   R6,L0(R8)               PUT IT INTO PRINT LINE
         MVZ   L0(L1,R8),CHAR0
         LA    R8,L1(R8)               MOVE POINTER TO NEXT POS
         BCT   R5,SETBINA              LOOP TILL 8 PRINTED
         B     RETURN
*
*        SET HEX -PRINTS 1 CHAR HEX
*
SETHEX   STM   R5,R8,XSAVE             SAVE REGS
         LA    R8,CHARS                CHARACTER TABLE POINTER
         IC    R7,L0(R4)               PICK UP CHARACTER
         SLL   R7,L24                  MOVE TO HI R7
         SR    R6,R6                   CLEAR REGS
         SLDL  R6,L4                   MOVE FOUR BITS
         AR    R6,R8                   ADD OFFSET AND POINTER
         MVC   L0(L1,R3),L0(R6)        MOVE CHARACTER TO LINE
         SR    R6,R6                   CLEAR AGAIN
         SLDL  R6,L4                   MOVE LAST 4 BITS
         AR    R6,R8                   COMPUTE OFFSET
         MVC   L1(L1,R3),L0(R6)        MOVE LAST CHARACTER
         B     RETURN
*
*        TEST TO SEE IF RECORD IS IN AR-149 FORMAT
*
SETCONV  STM   R5,R8,XSAVE             SAVE REGS                 S21926
         TM    L0(R4),HEX02            HAS RECORD BEEN CONVERTED S21926
         BO    SETCONV1                                          S21926
         SR    R15,R15                 NO,CLEAR PRINT LINE       S21926
         B     RETURN                                            S21926
SETCONV1 IC    R5,SBCNTL               GET SENSE BYTE COUNT      S21926
         STC   R5,SBCNT                                          S21926
         MVC   SNB01(L2),SNB01+L17      MOVE SENSE OVER SDR      P4954
         B     RETURN                                            S21926
SBCNTL   DC    X'02'                                             S21926
ON       EQU   1
HEX02    EQU   X'02'
*
*        NO OP RETURN
*
SKIPPER  BR    R14
*
*        TO ADD SPACES ON LINE
*
SPACER1  LA    R3,L1(R3)
         BR    R14
SPACER2  LA    R3,L2(R3)
         BR    14
SPACER19 LA    R3,L19(R3)
         BR    R14
*
*        DEFINE THE MODE IN WHICH TCAM RECORD WAS RECORDED
*
RECMODE  TM    L0(R4),HE0              TEST FOR UNRECOVERABLE
         BNZ   INTEST                  NO
         MVC   L0(L15,R3),UNREC        MOVE IN MODE
         BR    R14                     RETURN
INTEST   TM    L0(R4),H80              TEST FOR UNINTENSIVE
         BNO   OVERTST                 NO
         MVC   L0(L15,R3),INTEN        MOVE IN MODE
         BR    R14                     RETURN
OVERTST  TM    L0(R4),H40              TEST FOR OVERFLOW
         BNO   EODTST                  NO
         MVC   L0(L15,R3),OVERF        MOVE IN MODE
         BR    R14                     RETURN
EODTST   MVC   L0(L15,R3),EOD          MOVE IN MODE
         BR    R14
*
*        CONVERT COUNTERS FROM HEX TO DECIMAL READY FOR PRINT
*
CONV1    STM   R5,R8,XSAVE             SAVE REGISTERS
         XC    READYP(L8),READYP       CLEAR UNPACK BUFFER
         SR    R6,R6                   ZERO REG
         MVC   READYP(L2),L0(R4)        ALIGN DATA             @YA02789
         LH    R6,READYP                LOAD DATA TO BE CONVERTED
         XC    READYP(L8),READYP        CLEAR BUCKET           @YA02789
         CVD   R6,READYP               CONVERT ERROR COUNTER TO DECI
         UNPK  READYP(L5),READYP+L5(L3)  UNPACK DECI COUNT
         OI    READYP+L4,CLRSGN        CLEAR SIGN
         MVC   L0(L5,R3),READYP         MOVE COUNTER READY TO PRINT
         SR    R7,R7
         IC    R7,L2(R4)
         CVD   R7,READYP
         UNPK  READYP(L5),READYP+L5(L3)
         OI      READYP+L4,CLRSGN
         MVC   L49(L4,R3),READYP+L1
         B     RETURN
*
*        TEST FOR INITIAL SELECTION ERROR  ENTER 1 IF YES, 0 IF NO
*
RECMODE1 TM    L0(R4),H10              IS INITIAL SELECTION ON
         BZ    NOTON                   NO
         MVC   L0(L1,R3),ONE           YES MOVE IN ONE
         BR    R14                     RETURN
NOTON    MVC   L0(L1,R3),ZERO          NO MOVE IN ZERO
         BR    R14                     RETURN
*
*        TEST FOR A GRAPHIC ERROR FROM A TERMINAL, OR AN END OF DAY OR
*        COUNTER OVER FLOW RECORD. IF YES LINE AND LABEL POINTERS GET
*        SET PAST THOSE THAT PRINT CCW AND SENSE.
*
CHECKMOD STM   R5,R8,XSAVE
         TM    L1(R4),H21              IS THIS A GRAPHIC ERROR
         BO    RIGHTON                 YES
         TM    L0(R4),NORCE            NO- IS THE EOD OR CNTR OVERFLOW
         BNZ   RIGHTON                 YES
         B     RETURN
*
RIGHTON  LA    R5,LINES1
         SH    R5,FOUR                 SUBTRACT FOUR FROM ADDRESS TO PR
         ST    R5,XR9PTR
         LA    R5,LSTLINE
         ST    R5,XLABELP
         B     RETURN
*
*        TEST FOR GRAPHIC ERROR. IF YES FIND THE TYPE AND PRINT.
*        IF NO SKIP THAT PRINT LINE.
*
CHKGRAP  TM    L0(R4),H21              IS THIS A GRAPHIC ERROR
         BZ    NOTGRAP                 NO-DONT PRINT THIS LINE
         TM    L0(R4),H23              YES - IS IT THE CHARACTER /
         BNO   CH1                     NO
         MVC   L0(L26,R3),TERM1        YES-MOVE IN ERROR INDICATION
         BR    R14
CH1      TM    L0(R4),H25              IS IT THE CHARACTER S
         BNO   CH2                     NO
         MVC   L0(L23,R3),TERM2        YES-MOVE IN ERROR INDICATION
         BR    R14                     RETURN
CH2      TM    L0(R4),H29              IS IT THE CHARACTER U
         BNO   CH3                     NO
         MVC   L0(L23,R3),TERM3        YES-MOVE IN ERROR INDICATION
         BR    R14                     RETURN
CH3      MVC   L0(L24,R3),TERM4
         BR    R14                     RETURN
NOTGRAP  SR    R15,R15                 ZERO REG 15 TO INDICATE NO PRINT
         BR    R14                     RETURN
*
*
*
*        GET COMMUNICATION ADAPTER TYPE AND MOVE IN READY FOR PRINT
*
*
*
SETADPT  STM   R5,R8,XSAVE             SAVE REGISTERS
         SR    R6,R6                   ZERO REG
         CLI   L0(R4),H40              COMPARE FOR COMUNICATIONS TYPE
         BNE   NOPRTRET                NO-FIX TO NO PRINT
         IC    R6,L1(R4)               YES-PICK UP CHARACTER DEVICE TYP
         SRL   R6,L4                   DROP OFF LOW 4 BITS
         MH    R6,HALF13               COMPUTE INDEX
         LA    R5,ADPTYPE              PICK UP TABLE ADDRESS
         AR    R5,R6                   SET ADDRESS TO LABEL
         MVC   L0(L13,R3),L0(R5)       MOVE IN TYPE DEVICE
         B     RETURN
NOPRTRET SR    R15,R15
         B     RETURN
*
*        GET TERMINAL TYPE AND MOVE IN READY FOR PRINT
*
SETTERM  STM   R5,R8,XSAVE             SAVE REGISTERS
         CLI   L2(R4),H40              COMPARE FOR COMUNICATIONS TYPE
         BNE   NOPRTRET                NO-FIX TO NO PRINT OF TERM TYPE
         SR    R6,R6                   YES-CLEAR REGS
         SR    R7,R7
         IC    R7,L3(R4)               PICK UP CHARS FROM DEVICE TYPE
         IC    R6,L0(R4)               TO DETERMINE TERMINAL TYPE
         SRL   R7,L4                   DROP OFF LOW 4 BITS
         SLL   R7,L4
         SLL   R6,L8                   MOVE IT OVER ONE BYTE
         OR    R6,R7                   SET UP KEY HALF
         LA    R7,L15                  SET UP LOOP COUNT
         LA    R8,COMMTAB              SET PTR TO TERM TYPE TAB
COMLOOP  CH    R6,L0(R8)               IS IT THIS TYPE
         BE    COMFND                  BR-YES
         LA    R8,L10(R8)              UP POINTER TO NEXT
         BCT   R7,COMLOOP              LOOP
         MVC   L0(L6,R3),ADPTYPE       MOVE IN NONE
         B     RETURN
COMFND   MVC   L0(L8,R3),L2(R8)        MOVE IN TERM NAME
         B     RETURN
         DS    0F
XSAVE    DC    5F'0'
NONE     DC    CL8'NONE    '
CHARS    DC    C'0123456789ABCDEF'
CHAR0    DC    C'0'
UNIVERS  DC    C'UNIVERSAL   SERIAL NO. NONE  '                  S21926
SERNO    DC    C'SERIAL NO.'                                     S21926
UNREC    DC    C'*UNRECOVERABLE*'
INTEN    DC    C'*INTENSIFIED*  '
OVERF    DC    C'*OVERFLOW*     '
EOD      DC    C'*END OF DAY*   '
ONE      DC    C'1'
ZERO     DC    C'0'
FIVETWO  DC    H'52'
HSAVE    DC    CL1' '
LSTLINE  DC    C' $'
         DC    C'TERMINAL NAME*'
         DC    C'RECORDING MODE$'
         DC    C'SIO CNTR*'
         DC    C'TEMPORARY ERR CNTR$'
         DC    C'MASK*'
         DC    C'INITIAL SELECTION$'                             S21926
         DC    C'2740 - II LEADING GRAPHIC$'
         DC    C' $'
LAB05    DC    C'N/A*'
         DC    C'N/A$'
         DC    C'N/A*'
         DC    C'N/A$'
         DC    C'IPL REQST*'
         DC    C'IPL REQST$'
         DC    C'ABORT*'
         DC    C'ABORT$'
         DC    C' $'
LAB3270  DC    C'DATA CHK*DATA CHK$'                           @YA02789
         DC    C'UNIT SPEC*UNIT SPEC$'                         @YA02789
         DC    C'CNTL CHK*CNTL CHK$'                           @YA02789
         DC    C'OPRTN*OPRTN$$$'                               @YA02789
TERM1    DC    C'/  (TERM ELECTRONIC ERROR)'
TERM2    DC    C'S  (TERM I/O ERROR)       '
TERM3    DC    C'U  (REC. PARITY ERROR)    '
TERM4    DC    C'Y  (TRANS. PARITY ERROR)  '
HALF13   DC    H'13'
FOUR     DC    X'0004'
         DS    0D
READYP   DC    CL8' '
*
RELTAB   DS    0C                                              @L03976
         DC    C'OS  '                                         @L03976
         DC    C'DOS '                                         @L03976
         DC    C'VS 1'                                         @L03976
         DC    C'V370'                                         @L03976
         DC    C'VS 2'                                         @L03976
         DC    C'    '                                         @L03976
         DC    C'    '                                         @L03976
         DC    C'    '                                         @L03976
WORK     EQU   READYP
XRELN    EQU   SYSREL
*        DEVICE TYPES SUPPORTED BY THIS TABLE
*
DEVTABLE DC    X'4001'
         DC    C'2702'
         DC    X'4002'
         DC    C'2701'
         DC    X'4003'
         DC    C'2703'
         DC    X'4000'
         DC    C'7770'
         DC    X'1003'
         DC    C'2848'
T3270L   DC    X'1009'                                         @YA02789
         DC    C'3270'                                         @YA02789
UNIT05   DC    X'4005'
         DC    C'3705'
         DC    X'100B'                                         @XA20610
         DC    C'3286'                                         @XA20610
*
*        COMMUNICATION ADAPTER TYPES SUPPORTED BY THIS TABLE
*
ADPTYPE  DC    CL13'NONE'
         DC    CL13'IBM TERM I'
         DC    CL13'IBM TERM II'
         DC    CL13'IBM TELEGRAPH'
         DC    CL13'TELEGRAPH I'
         DC    CL13'TELEGRAPH II'
         DC    CL13'WT TELEGRAPH'
         DC    CL13'SYNCH I'
         DC    CL13'IBM TERM III'
         DC    CL13'SYNCH II'
*
*        TERMINAL TYPES SUPPORTED BY THIS TABLE
*
COMMTAB  DS    0F
         DC    X'0110'
         DC    C'IBM 1050'
         DC    X'0120'
         DC    C'IBM 1030'
         DC    X'0130'
         DC    C'IBM 1050'
         DC    X'0140'
         DC    C'ATT 83B3'
         DC    X'0150'
         DC    C'CC TWX  '
         DC    X'0160'
         DC    C'WTTA    '
         DC    X'0170'
         DC    C'IBM 2260'
         DC    X'0190'
         DC    C'S/360   '
         DC    X'0210'
         DC    C'IBM 1060'
         DC    X'0240'
         DC    C'WU 115A'
         DC    X'0290'
         DC    C'IBM 1130'
         DC    X'0390'
         DC    C'IBM 2780'
         DC    X'0410'
         DC    C'IBM 2740'
         DC    X'0510'
         DC    C'2741C   '
         DC    X'0610'
         DC    C'2741P   '
ENTRIES  DS    0F
         DC    XL4'00010001'           FORMAT 1
         DC    XL4'00010001'           FORMAT 2
         DC    A(LABELS)               LABEL POINTER
         DC    H'0'                    DISP
*
*        SKIP TO CHANNEL  1
*
         DC    X'01'
         DC    X'000B8B00'
*
STERTM   LINE  (78,23),(1,35),SKIP=1                             S21926
         HEX   CPUID,0,2B                                        S21926
         HEX   CPUSERL,0,3B                                      S21926
         ROUTINE   CPUID,SETCPUNO                                S21926
         LABEL '---RECORD ENTRY TYPE - UNIT CHECK','   SOURCE - TCAM OUC
               TBOARD','MODEL-'
*
         LINE  (16,38),(4,42)                                    S21926
         ROUTINE    SYSREL,CONVREL
         LABEL      'XXXX REL.'
*                                                                S21926
         LINE  (98,1),(27,29)                                    S21926
         ROUTINE   JOBID1,SETPGMN                                S21926
         LABEL 'DAY YEAR','HH MM SS.TH','JOB IDENTITY'           S21926
*                                                                S21926
         LINE  (27,29),(21,30),SKIP=2                            S21926
         ROUTINE   DAY,SETDATE                                   S21926
         HEX   HOUR,1,4B                                         S21926
         ROUTINE   SPARE1,SKIPPER                                S21926
         HEX   JOBID1,B16,4B                                     S21926
         HEX   JOBID2,B37,4B                                     S21926
         LABEL 'DATE-','TIME'                                    S21926
*                                                                S21926
         LINE  ,(1,1),SKIP=2                                     S21926
         ROUTINE   CLASRC,SETCONV                                S21926
         LABEL 'OBR RECORD CONVERTED TO THE STANDARD FORMAT'     S21926
*                                                                S21926
         LINE  (34,1),(2,32),SKIP=1                              S21926
         ROUTINE   DEVTYP2,SETDEVT                               S21926
         LABEL 'DEVICE TYPE'                                     S21926
         LINE
         HEX   CUA,B0,3B                                         S21926
         LABEL 'PRIMARY   CHANNEL UNIT ADDRESS'                  S21926
         LINE
         HEX   SECCUA,B0,3B                                      S21926
         LABEL 'ALTERNATE CHANNEL UNIT ADDRESS'                  S21926
         LINE
         ROUTINE   DEVTYP2,SETADPT                               S21926
         LABEL 'COMMUNICATION ADAPTER TYPE'                      S21926
         LINE  ,,SKIP=2                                          S21926
         ROUTINE   DEVTYP1,SETTERM                               S21926
         LABEL 'TERMINAL TYPE'                                   S21926
         LINE  ,,SKIP=1
         ROUTINE   TCAMFL,CHECKMOD
         LABEL ' '
         LINE  ,(14,41),SKIP=1
         ROUTINE   SPARE1,SKIPPER
         LABEL 'CC   CA   FL     CT','K    CA    US CS  CT'
*
         LINE  (14,3),(1,49),SKIP=2
         HEX   FCCWCC,0,1B
         HEX   FCCWDA,0,3B
         ROUTINE   SPARE1,SPACER1
         HEX   FCCWFL,0,1B
         HEX   FCCW,0,1B
         HEX   FCCWCT,0,2B
         ROUTINE   SPARE1,SPACER19
         HEX   CSWK,0,1B
         HEX   CSWCA,0,3B
         ROUTINE   SPARE1,SPACER2
         ROUTINE   CSWUS1,SETHEX
         ROUTINE   CSWCS1,SETHEX
         HEX   CSWCT,0,2B
         LABEL 'FAILING CCW','CSW'
*
         LINE  ,(1,38),SKIP=1
         ROUTINE   SPARE1,SKIPPER
         LABEL 'UNIT STATUS','CHANNEL STATUS'
*
*        UNIT STATUS AND CHANNEL STATUS FIELDS IN DETAIL
*
         LINE  (21,38),(2,39)
         BIN   CSWUS1
         BIN   CSWCS1
         LABEL 'ATTENTION','PRGM-CTLD JRPT'
         LINE
         BIN   CSWUS2
         BIN   CSWCS2
         LABEL 'STATUS MODIFIER','INCORRECT LENGTH'
         LINE
         BIN   CSWUS3
         BIN   CSWCS3
         LABEL 'CONTROL UNIT END','PROGRAM CHECK'
         LINE
         BIN   CSWUS4
         BIN   CSWCS4
         LABEL 'BUSY','PROTECTION CHECK'
         LINE
         BIN   CSWUS5
         BIN   CSWCS5
         LABEL 'CHANNEL END','CHAN DATA CHECK'
         LINE
         BIN   CSWUS6
         BIN   CSWCS6
         LABEL 'DEVICE END','CHAN CTL CHECK'
         LINE
         BIN   CSWUS7
         BIN   CSWCS8
         LABEL 'UNIT CHECK','I/F CTL CHECK'
         LINE  (21,38),(2,39),SKIP=2
         BIN   CSWUS8
         BIN   CSWCS8
         LABEL 'UNIT EXCEPTION','CHAINING CHECK'
         LINE  ,(1,1),SKIP=1
         ROUTINE   SPARE1,SKIPPER
         LABEL 'SENSE BYTE DATA'
         LINE  ,(2,38),SKIP=2
         ROUTINE   SPARE1,SKIPPER
         LABEL 'INITIAL FAILURE','FINAL RETRY'
         LINE  (11,39),(3,37),SKIP=1
         ROUTINE   SNB11,SETBIN
         ROUTINE   SNB01,SETBIN
         LABEL 'BYTE 0','BYTE 0'
*
*        SENSE BYTE DATA IN DETAIL
*
         LINE  (15,39),(4,37)
         BIN   SNB11
         BIN   SNB01
         LABEL 'CMND REJ','CMND REJ'
         LINE
         BIN   SNB12
         BIN   SNB02
         LABEL 'INTV REQD','INTV REQD'
         LINE
         BIN   SNB13
         BIN   SNB03
         LABEL 'BUS O CHK','BUS O CHK'
         LINE
         BIN   SNB14
         BIN   SNB04
         LABEL 'EQUIP CHK','EQUIP CHK'
         LINE
         BIN   SNB15
         BIN   SNB05
         ROUTINE    DEVTYP2,U3705
         LABEL 'DATA CHK','DATA CHK'
         LINE
         BIN   SNB16
         BIN   SNB06
         ROUTINE DEVTYP2,N3286                                 @XA20610
         LABEL 'OVERRUN','OVERRUN'
         LINE  ,                                               @XA20610
         BIN   SNB16                                           @XA20610
         BIN   SNB06                                           @XA20610
         ROUTINE DEVTYP2,P3286                                 @XA20610
         LABEL 'UNIT SPCFY','UNIT SPCFY'                       @XA20610
         LINE
         BIN   SNB17
         BIN   SNB07
         ROUTINE DEVTYP2,N3286                                 @XA20610
         LABEL 'LOST DATA','LOST DATA'
         LINE  ,                                               @XA20610
         BIN   SNB17                                           @XA20610
         BIN   SNB07                                           @XA20610
         ROUTINE DEVTYP2,P3286                                 @XA20610
         LABEL 'CNTRL CHK','CNTRL CHK'                         @XA20610
         LINE
         BIN   SNB18
         BIN   SNB08
         ROUTINE DEVTYP2,N3286                                 @XA20610
         LABEL 'TIME OUT','TIME OUT'
         LINE  ,                                               @XA20610
         BIN   SNB18                                           @XA20610
         BIN   SNB08                                           @XA20610
         ROUTINE DEVTYP2,P3286                                 @XA20610
         LABEL 'OPRTN CHK','OPRTN CHK'                         @XA20610
*
         LINE
         ROUTINE    SPARE1,RSET05
LABLIN   LABEL ' '
*                                                                S21926
LINES1   LINE  (15,41),(1,39),SKIP=2
         ROUTINE   TERMNM1,SETPGMN
         ROUTINE   TCAMFL,RECMODE
         LABEL 'TERMINAL NAME','RECORDING MODE'
*
         LINE  (11,49),(1,39),SKIP=2
         ROUTINE   SIOCNT,CONV1
         LABEL 'SIO CNTR','TEMPORARY ERR CNTR'
*
         LINE  (7,52),(1,39),SKIP=2
         ROUTINE   MASK,SETBIN
         ROUTINE   TCAMFL,RECMODE1
         LABEL 'MASK','INITIAL SELECTION'
*
*
         LINE  (27,1),(1,1),SKIP=1
         ROUTINE   LDGRAPH,CHKGRAP
         LABEL '2740 -II LEADING GRAPHIC'
*
         LINE  ,,SKIP=1
         ROUTINE   SPARE1,SKIPPER
         LABEL ' '
         DC    X'FF'
         DC    XL2'0052'                                         P4954
         DC    X'0018'
         DC    XL2'0000'
LABELS   DS    0F
         DC    C'$'
         LSTART
       END
