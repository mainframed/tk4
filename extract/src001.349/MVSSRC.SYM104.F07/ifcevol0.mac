         TITLE 'IFCEVOL0  MES DATA EDIT BY VOLUME'
         MACRO
&NAME    DSGEN
.*                            THIS MACRO GENERATES ONE DSECT WORD
.*                                 FORMATTED FOR THE SUBJECT LOG RECORD
.*                                 EACH OPERAND HAS TWO SUB LISTS. THE
.*                                 FIRST IS THE NAME OF THE LOG ITEM
.*                                 WHILE THE SECOND IS THE # OF BITS TO
.*                                 ALLOCATE FOR THIS ITEM. ITEMS MUST
.*                                 BE DEFINED CONTIGUOUSLY WITHOUT GAPS
.*                                 UNUSED BIT GROUPS MUST BE GIVEN
.*                                 DUMMY NAMES. THE NAMES PROVIDED FOR
.*                                 THE LOG ITEMS MAY THEN BE USED IN
.*                                 THE CONVERSION MACRO INSTRUCTIONS.
         GBLC &ITEM(1000)
         GBLA &ITEMNBR,&BITS(1000),&SHIFT(1000)
         LCLB  &ONLY1,&CTIND
         LCLA  &START1,&START2,&END1,&END2
         LCLC  &SYMBOL,&EQUSYM
         LCLA  &OP,&COUNT,&BYTE,&EQUCNT
         ACTR  100000
.START   AIF   (N'&SYSLIST(&OP+1) LT 3).LOOP
         AIF   ('&SYSLIST(&OP+1,3)' EQ 'EQU').LOOP     TEST FOR EQU
  AIF   ('&SYSLIST(&OP+1,3)' EQ '' AND '&SYSLIST(&OP+1,4)' EQ '').ERR1
  AIF   ('&SYSLIST(&OP+1,3)' EQ '' OR '&SYSLIST(&OP+1,4)' EQ '').ERR1
         AIF   ('&SYSLIST(&OP+1,3)' GT '&SYSLIST(&OP+1,4)').ERR3
&START1  SETA  &SYSLIST(&OP+1,3)        GET START COUNT OF 1
&START2  SETA  &SYSLIST(&OP+1,4)        GET FIRST END COUNT
         AGO   .SET2A                   BRANCH AROUND
.ERR1    MNOTE '**FIRST SYMBOL CONCATENATION INCOMPLETE**'
         MEXIT
.SET2A   AIF   ('&SYSLIST(&OP+1,5)' EQ ''AND '&SYSLIST(&OP+1,6)' EQ '' X
               ).SET2                   TEST FOR NO SECOND
  AIF   ('&SYSLIST(&OP+1,5)' EQ '' OR '&SYSLIST(&OP+1,6)' EQ '').ERR2
         AIF   ('&SYSLIST(&OP+1,5)' GT '&SYSLIST(&OP+1,6)').ERR3
&END1    SETA  &SYSLIST(&OP+1,5)        GET START COUNT OF 2
&END2    SETA  &SYSLIST(&OP+1,6)        GET END COUNT OF 2
         AGO   .LOOP
.SET2    ANOP
&ONLY1   SETB  1                        INDICATE ONLY ONE CONCATENATION
         AGO   .LOOP
.ERR2    MNOTE '**SECOND SYMBOL CONCATENATION INCOMPLETE**'
         MEXIT
.ERR3    MNOTE '**START GREATER THAN END CONCATENATION**'
         MEXIT
.LOOP    ANOP
&OP      SETA  &OP+1
         AIF   (&OP GT N'&SYSLIST).DONE      TEST IF ALL DONE
&ITEMNBR SETA  &ITEMNBR+1
         AIF   ('&SYSLIST(&OP,2)' NE '').OK1
         MNOTE '**NULL BIT COUNT FIELD**'
         MEXIT
.OK1     ANOP
&SYMBOL  SETC  '&SYSLIST(&OP,1)'
         AIF   ('&SYMBOL' NE '').OK
*              *****     LOG ITEM SYMBOL NOT PROVIDED     *****
         AIF   ('&SYSLIST(&OP,3)' NE 'EQU').CNT
         AGO   .START                   GET NEXT
.OK      AIF   (N'&SYSLIST(&OP) LT 3).NO3    TEST FOR OLD FORMAT
         AIF   ('&SYSLIST(&OP,3)' EQ 'EQU').EQU   TEST FOR EQU
         AIF   (&ONLY1).OK2             TEST FOR ONLY ONE CONCAT
&SYMBOL  SETC  '&SYMBOL.&START1.&END1'       GET 1 AND 2 CONCAT
         AGO   .NO3                     BRANCH AROUND
.OK2     ANOP
&SYMBOL  SETC  '&SYMBOL.&START1'        GET 1 CONCATENATED
.NO3     ANOP
&SYMBOL  EQU   *+&BYTE
&ITEM(&ITEMNBR) SETC '&SYMBOL'          GET LABEL IN GLOBAL
&BITS(&ITEMNBR) SETA &SYSLIST(&OP,2)
&SHIFT(&ITEMNBR) SETA &COUNT-&BYTE*8
.CNT     ANOP
&CTIND   SETB  1                        SET COUNT INDICATOR
&COUNT   SETA  &COUNT+&SYSLIST(&OP,2)
&BYTE    SETA  &COUNT/8
         AIF   (N'&SYSLIST(&OP) LT 3).START  TEST FOR OLD FORMAT
         AIF   (&ONLY1).TSTST           TEST FOR ONLY ONE CONCAT
         AIF   (&END1 EQ &END2).TSTST   TEST FOR SECOND END
&END1    SETA  &END1+1                  INCREMENT COUNT
&OP      SETA  &OP-1                    DECREMENT INCREMENT
         AGO   .LOOP                    GENERATE NEXT
.TSTST   ANOP
         AIF   (&START1 EQ &START2).LPDONE   TEST FOR END
         AIF   (&ONLY1).NSET1           TEST FOR ONLY ONE CONCAT
&END1    SETA  &SYSLIST(&OP,5)          RE-INIT SECOND START COUNT
.NSET1   ANOP
&OP      SETA  &OP-1                    DECREMENT INDEX
&START1  SETA  &START1+1                INCREMENT FIRST COUNT
         AGO   .LOOP                    GO DO NEXT
.LPDONE  ANOP
&ONLY1   SETB  0                        CLEAR INDICATOR
         AGO   .START                   GO TEST FOR MORE SUB-LISTS
.DONE    AIF   (&COUNT-&COUNT/8*8 NE 0).ERR  TEST FOR MULTIPLE OF EIGHT
         AIF   (&CTIND EQ 0).END        NO DS IF NO COUNT
&COUNT   SETA  &COUNT/8                 GET NUMBER OF BYTES
&NAME    DS    &COUNT.C
.END     MEXIT
.ERR     MNOTE '**BIT COUNT FLDS DO NOT TOTAL MULTIPLE OF 8**'
         MEXIT
.EQU     AIF   ('&SYSLIST(&OP,4)' NE '').EQU1     TEST FOR NULL LABEL
.ERR4    MNOTE '**EQU OPERAND OMITTED OR NOT FOUND**'
         MEXIT
.EQU1    AIF   (&SYSLIST(&OP,2) LT 16).EQU2  COUNT OVER FIFTEEN
*****               THE FOLLOWING STATEMENT                *****
*****     NUMBER OF BITS EXCEED 15 - DO NOT USE AS BIN     *****
.EQU2    ANOP
&EQUCNT  SETA  0                        CLEAR COUNTER
&EQUSYM  SETC  '&SYSLIST(&OP,4)'        GET EQU OPERAND
.EQULOP  ANOP
&EQUCNT  SETA  &EQUCNT+1                INCREMENT INDEX
         AIF   ('&ITEM(&EQUCNT)' EQ '&EQUSYM').EQUOUT  LABEL FOUND?
         AIF   (&EQUCNT EQ &ITEMNBR).ERR3    ALL TESTED?
         AGO   .EQULOP                  NO-GET NEXT
.EQUOUT  ANOP
&ITEM(&ITEMNBR) SETC '&SYMBOL'          GET LABEL NAME
&BITS(&ITEMNBR) SETA &SYSLIST(&OP,2)    GET NUMBER OF BITS
&SHIFT(&ITEMNBR) SETA &SHIFT(&EQUCNT)   GET SHIFT COUNT
&SYMBOL  EQU   &EQUSYM                  THIS SYMBOL EQUATED
         AGO   .START                   RETURN FOR NEXT
         MEND
*  LINE MACRO     LINE MACRO     LINE MACRO     LINE MACRO            *
         SPACE 2
         MACRO
&NAME    LINE  &DATA,&LABEL,&SKIP=
.*                            THIS MACRO ESTABLISHES THE MARGINS OR
.*                                 COLUMN SETTINGS FOR EACH LINE. IT
.*                                 GENERATES NECESSARY CARRIAGE CONTROL
.*                                 ENTRIES. LASTLY IT DETERMINES THE
.*                                 NUMBER OF ENTRIES ASSOCIATED WITH
.*                                 THE PREVIOUS LINE AND STORES THAT #
.*                                 INTO THE APPROPRIATE BYTE.
.*                            &DATA(1) - CHARACTER POSITION TO BEGIN
.*                                 DATA.
.*                            &DATA(2) - # OF SPACES BETWEEN SUCCESSIVE
.*                                 DATA COLUMN STARTING CHARACTERS.
.*                            &LABEL(1) - CHAR. POS. TO BEGIN LABELS.
.*                            &LABEL(2) - # SPACES BETWEEN LINE'S LABEL
.*                                 STARTING CHARACTERS.
.*                            &SKIP= - # OF LINES TO ADVANCE CARRIAGE
.*                                 TO BEGIN NEXT PRINTED LINE.
.*                            NEW ENTRIES ARE GENERATED ONLY WHEN
.*                                 NECESSARY. OMISSION OF ITEMS MEANS
.*                                 THEY HAVE NOT CHANGED SINCE PREVIOUS
.*                                 SETTINGS. A LINE MACRO IS REQUIRED
.*                                 FOR EACH PRINTED LINE. IF NO SETTING
.*                                 CHANGES ARE REQUIRED ALL OPERANDS
.*                                 ARE OMITTED IN WHICH CASE ONLY THE
.*                                 # OF ENTRIES FOR THE PREVIOUS LINE
.*                                 IS COMPUTED. THIS MACRO MUST BE THE
.*                                 FIRST MACRO INSTRUCTION ISSUED FOR
.*                                 THE SUBJECT LINE
         GBLA  &DB,&DT,&LB,&LT,&NRENTS
         GBLA  &LASTCC,&INITIAL
         GBLC  &NRENTSX
         GBLC  &CARRCON
         GBLB  &TEST
         LCLA  &S
&NAME    DS    0C
         AIF   (&INITIAL EQ 0).FIRSTLN
         LINEND
         AGO   .NTFIRST
.FIRSTLN ANOP
&NRENTSX SETC  'N&SYSNDX'
&INITIAL SETA  1
N&SYSNDX EQU   *
.NTFIRST ANOP
         DC    AL1(0)
         AIF   ('&DATA(1)' EQ '').CKDTABS
         AIF   (&DATA(1) EQ &DB).CKDTABS
&DB      SETA  &DATA(1)
         AGO   .AA
.CKDTABS AIF   ('&DATA(2)' EQ '').NCDATA
         AIF   (&DATA(2) EQ &DT).NCDATA
         AGO   .CC
.AA      AIF   ('&DATA(2)' EQ '').BB
         AIF   (&DATA(2) EQ &DT).BB
.CC      ANOP
&DT      SETA  &DATA(2)
.BB      DC    XL2'FFFE'
         DC    FL1'&DB'
         DC    FL1'&DT'
&NRENTS  SETA  &NRENTS+1
.NCDATA  ANOP
         AIF   ('&LABEL(1)' EQ '').CKLTABS
         AIF   (&LABEL(1) EQ &LB).CKLTABS
&LB      SETA  &LABEL(1)
         AGO   .AAA
.CKLTABS AIF   ('&LABEL(2)' EQ '').NCLABEL
         AIF   (&LABEL(2) EQ &LT).NCLABEL
         AGO   .CCC
.AAA     AIF   ('&LABEL(2)' EQ '').BBB
         AIF   (&LABEL(2) EQ &LT).BBB
.CCC     ANOP
&LT      SETA  &LABEL(2)
.BBB     DC    XL2'FFFF'
         DC    FL1'&LB'
         DC    FL1'&LT'
&NRENTS  SETA  &NRENTS+1
.NCLABEL ANOP
         AIF   ('&SKIP' NE '').CONT
         AIF   (&TEST EQ 0).NOCHANG
&S       SETA  &LASTCC
         AGO   .DEFAULT
.CONT    ANOP
         AIF   (&TEST EQ 0).AB
&S       SETA  &SKIP
.DEFAULT ANOP
         ORG   &CARRCON+3
         DC    AL.3(0),AL.2(&S),AL.3(1)
         ORG
&LASTCC  SETA  &S
&TEST    SETB  0
         AGO   .DD
.AB      AIF   (&SKIP EQ &LASTCC).NOCHANG
A&SYSNDX DC    XL2'FFFB'
         DC    AL.3(0),AL.2(&SKIP),AL.3(1)
         DC    FL1'9'
&LASTCC  SETA  &SKIP
&TEST    SETB  1
&CARRCON SETC  'A&SYSNDX'
&NRENTS  SETA  &NRENTS+1
.DD      ANOP
.NOCHANG ANOP
         MEND
         EJECT
*  BIN MACRO     BIN MACRO     BIN MACRO     BIN MACRO     BIN MACRO  *
         SPACE 2
         MACRO
         BIN   &LOGITEM,&SKIP$OR
.*                                 &LOGITEM - NAME OF ITEM IN LOG
.*                                      RECORD DSECT
.*                                 &SKIP$OR - NBR OF SPACES TO SKIP ON
.*                                 MULTIPLE PRINT OR NBR OF SPACES
.*                                      TO BACK UP FROM COLUMN FOR
.*                                      START OF PRINTING. THE LETTER
.*                                      B PRECEEDS THE NUMBER (B5) IF
.*                                      THE LATTER IS DESIRED. OMISSION
.*                                      OF THIS OPERAND FORCES OPTION 2
.*                                      WITH BACKUP SPACING EQUAL TO
.*                                 THE NUMBER OF BITS IN THE ITEM
.*                                 DEFINITION (VIA MACRO 'DSGEN').
.*                            A LIMIT OF 15 BITS IS IMPOSED FOR THE
.*                                 TOTAL NUMBER OF BITS TO PRINT.
         GBLC &ITEM(1000)
         GBLA &ITEMNBR,&BITS(1000),&SHIFT(1000),&NRENTS
         GBLC  &DSECT
         LCLB  &B
         LCLA  &IBITS,&NDX,&ISHIFT,&K
         LCLA  &TEMP,&T
         LCLC  &S
.LOOP    ANOP
&NDX     SETA  &NDX+1
         AIF   ('&ITEM(&NDX)' EQ '&LOGITEM').FOUND
         AIF   (&NDX LT &ITEMNBR).LOOP
         MNOTE *,'YOU BLEW IT'
         ROUTINE DUM,SKIPPER
         MEXIT
.FOUND   ANOP
&ISHIFT  SETA  &SHIFT(&NDX)
&IBITS   SETA  &BITS(&NDX)
&T       SETA  &IBITS-1
&B       SETB  0
         AIF   ('&SKIP$OR' EQ '').BACKUP
&K       SETA  K'&SKIP$OR
&B       SETB  ('&SKIP$OR'(1,1) EQ 'B')
&S       SETC  '&SKIP$OR'(&B+1,&K-&B)
&T       SETA  &S
.BACKUP  ANOP
&NRENTS  SETA  &NRENTS+1
&TEMP    SETA  &ISHIFT
A&SYSNDX DC    AL.12(&LOGITEM-&DSECT),XL.4'&TEMP'
         AIF (&IBITS EQ 1 AND &B EQ 0).OUT
         ORG   A&SYSNDX
&B       SETB  1
         DC    AL.12(&LOGITEM-&DSECT),XL.4'C'
         DC    BL.1'&B',AL.7(&T),AL.4(&IBITS),FL.4'&ISHIFT'
.OUT     ANOP
         MEND
         EJECT
*  HEX MACRO     HEX MACRO     HEX MACRO    HEXN MACRO     HEX MACRO  *
         SPACE 2
         MACRO
         HEX   &LOGITEM,&SKIP$OR,&BYTES
.*                            THIS MACRO FACILITATES GENERATION OF THE
.*                                 TABLE ENTRIES SPECIFYING HEX TYPE
.*                                 CONVERSIONS.
.*                            &LOGITEM - NAME OF DATA ITEM TO BE
.*                                 CONVERTED
.*                            &SKIP$OR - NUMBER OF SPACES TO SKIP ON
.*                                 MULTIPLE PRINT OR NBR OF SPACES TO
.*                                 BACK UP FROM COLUMN FOR START OF
.*                                 PRINTING. THE LETTER B PRECEEDS THE
.*                                 NUMBER (B8) IF THE LATTER OPTION IS
.*                                 DESIRED. OMISSION OF THIS OPERAND
.*                                 FORCES OPTION 2 WITH BACKUP SPACING
.*                                 EQUAL TO THE NUMBER OF BYTES SPECI-
.*                                 FIED BY THE NEXT OPERAND (TWICE THIS
.*                                 NUMBER IF SUFFIX IS EXPLICITLY OR
.*                                 IMPLICITLY B).
.*                            &BYTES - NUMBER OF TOTAL INPUT BYTES TO
.*                                 PROCESS. THIS NUMBER IS SUFFIXED
.*                                 WITH AN L,R, OR B TO STIPULATE
.*                                 PRINTING OF THE LEFT HALF, RIGHT
.*                                 HALF, OR BOTH HALVES OF THE BYTE
.*                                 RESPECTIVELY. OMISSION OF THIS
.*                                 OPERAND DEFAULTS TO B WITH THE NUM-
.*                                 BER OF BYTES EQUAL TO THE ITEM LNGTH
.*                            A NEW ENTRY IS GENERATED ONLY WHEN NECES-
.*                                 SARY. THIS MACRO MUST BE THE FIRST
.*                                 MACRO INSTRUCTION ISSUED FOR THE
.*                                 SUBJECT LINE(S).
         GBLC &ITEM(1000),&DSECT
         GBLA &ITEMNBR,&BITS(1000),&SHIFT(1000),&NRENTS
         LCLB  &B
         LCLA  &IBITS,&NDX,&ISHIFT,&K,&T,&CODE,&BYTESP
         LCLC  &S,&LETTER
.LOOP    ANOP
&NDX     SETA  &NDX+1
         AIF   ('&ITEM(&NDX)' EQ '&LOGITEM').FOUND
         AIF   (&NDX LT &ITEMNBR).LOOP
         MNOTE *,'LOG ITEM NOT DEFINED'
         MEXIT
.FOUND   ANOP
&ISHIFT  SETA  &SHIFT(&NDX)
&IBITS   SETA  &BITS(&NDX)
&CODE    SETA  1
&K       SETA  K'&BYTES
         AIF   (&IBITS-(&IBITS/4)*4 EQ 0).OK
         MNOTE *,'BIT LENGTH SPECIFICATION INCONSISTENT WITH CONTROL'
         MEXIT
.OK      AIF   ('&BYTES' EQ '').USEDEFN
&LETTER  SETC  '&BYTES'(&K,1)
&S       SETC  '&BYTES'(1,&K-1)
&BYTESP  SETA  &S
         AIF   ('&LETTER' EQ 'B').BOTH
         AIF   (&ISHIFT EQ 0 OR &ISHIFT EQ 4).OK2
.ERR     MNOTE *,'DATA NOT ALLIGNED ON HEX OR BYTE BOUNDARY'
         MEXIT
.USEDEFN ANOP
&BYTESP  SETA  &IBITS/8
.BOTH    AIF   (&ISHIFT NE 0).ERR
&CODE    SETA  3
&T       SETA  &BYTESP*2-1
&S       SETC  '&T'
.OK2     AIF   (&ISHIFT EQ 0).L
&CODE    SETA  2
.L       ANOP
&B       SETB  1
         AIF   ('&SKIP$OR' EQ '').BACKUP
&K       SETA  K'&SKIP$OR
&B       SETB  ('&SKIP$OR'(1,1) EQ 'B')
&S       SETC  '&SKIP$OR'(&B+1,&K-&B)
.BACKUP  ANOP
&NRENTS  SETA  &NRENTS+1
         DC    AL.12(&LOGITEM-&DSECT),XL.4'A'
         DC    BL.1'&B',FL.7'&S',FL.4'&BYTESP',FL.4'&CODE'
.OUT     ANOP
         MEND
         SPACE 2
*  ROUTINE MACRO     ROUTINE MACRO     ROUTINE MACRO     ROUTINE MACRO*
         SPACE 2
         MACRO
&NAME    ROUTINE &LOGITEM,&RNAME
         GBLC  &DSECT,&CSECT
         GBLC  &ITEM(1000)
         GBLA  &SHIFT(1000),&ITEMNBR
         GBLA  &NRENTS
         LCLA  &ISHIFT,&NDX
.LOOP    ANOP
&NDX     SETA  &NDX+1
         AIF   ('&ITEM(&NDX)' EQ '&LOGITEM').FOUND
         AIF   (&NDX LT &ITEMNBR).LOOP
         MNOTE *,'LOG ITEM NOT DEFINED'
         MEXIT
.FOUND   ANOP
&ISHIFT  SETA  &SHIFT(&NDX)
&NAME    DC    AL.12(&LOGITEM-&DSECT),XL.4'D'
         DC    AL.4(&ISHIFT),AL.12(&RNAME-&CSECT)
&NRENTS  SETA  &NRENTS+1
         MEND
         EJECT
*  LABEL MACRO     LABEL MACRO     LABEL MACRO     LABEL MACRO        *
         SPACE 2
         MACRO
&NAME    LABEL &LABEL1,&LABEL2,&LABEL3,&LABEL4,&LABEL5,&LABEL6,        C
               &LABEL7,&LABEL8
.*                            THIS MACRO ALLOWS UP TO ACHT LABELS TO
.*                                 BE SPECIFIED FOR A GIVEN LINE. THE
.*                                 LABELS SHOULD BE ENCLOSED IN QUOTA-
.*                                 TION MARKS. THE COLUMN AND LINE END
.*                                 CONTROLS WILL BE INSERTED BY THE
.*                                 MACRO. OMITTED OPERANDS MEAN NO
.*                                 LABEL REQUIRED FOR RESPECTIVE
.*                                 COLUMN. THIS MACRO WILL ALSO ALERT
.*                                 THE PROGRAMMER TO EXACTLY WHERE THE
.*                                 TABLE MUST BE BROKEN IF NECESSARY
.*                                 TO AVOID EXCEEDING THE MAXIMUM LIMIT
         GBLC &LABELS(2000)
         GBLC  &LBL(100)
         GBLA  &LBLCTR(100)
         GBLA  &LABELNR
         GBLA  &NRENTS,&LPTR
         LCLC  &MARGIN,&TACK
         LCLC  &TEXT
         LCLA  &OP,&K,&START,&NRCHAR,&REMAIN
&MARGIN  SETC  '*'
         AIF   ('&NAME' EQ '').LOOPOUT
&LPTR    SETA  &LPTR+1
&LBL(&LPTR) SETC '&NAME'
&LBLCTR(&LPTR) SETA &LABELNR+1
.LOOPOUT ANOP
&OP      SETA  &OP+1
&K       SETA  K'&SYSLIST(&OP)
         AIF (&K GE 2).NORM
&K       SETA  2
.NORM    ANOP
&START   SETA  2
         AIF (&OP LT N'&SYSLIST).NOTLAST
&MARGIN  SETC  '$'
.NOTLAST ANOP
&NRCHAR  SETA  8
&TACK    SETC  ''
.LOOPIN  ANOP
&REMAIN  SETA  &K-&START
         AIF (&REMAIN GE 8).MORE
&TACK    SETC  '&MARGIN'
&NRCHAR  SETA  &REMAIN
.MORE    ANOP
&TEXT    SETC  ''
         AIF (&REMAIN EQ 0).ENDTEXT
&TEXT    SETC  '&SYSLIST(&OP)'(&START,&NRCHAR)
.ENDTEXT ANOP
&LABELNR SETA  &LABELNR+1
&LABELS(&LABELNR) SETC '&TEXT'.'&TACK'
&START   SETA  &START+8
         AIF ('&TACK' EQ '').LOOPIN
         AIF ('&TACK' EQ '*').LOOPOUT
         MEND
         SPACE 2
         MACRO
         LSTART
.*                            THIS MACRO IS ISSUED WHEN THE LABEL AREA
.*                                 OF THE TABLE IS TO BEGIN.
         GBLC &LABELS(2000)
         GBLA  &LABELNR
         GBLC  &LBL(100)
         GBLA  &LBLCTR(100)
         LCLA  &NDX,&CTR
         LINEND
&CTR     SETA  1
.LOOP    ANOP
&NDX     SETA  &NDX+1
         AIF   (&LBLCTR(&CTR) NE &NDX).NOLBL
&LBL(&CTR) DC  C'&LABELS(&NDX)'
&CTR     SETA  &CTR+1
         AGO   .LOOPCTL
.NOLBL   ANOP
         DC    C'&LABELS(&NDX)'
.LOOPCTL AIF   (&NDX LT &LABELNR).LOOP
         MEND
         SPACE 2
         MACRO
         LINEND
.*                            THIS MACRO IS USED ONLY BY THE LINE
.*                                 MACRO TO SET THE NUMBER OF ENTRIES
.*                                 ASSOCIATED WITH EACH LINE.
         GBLA  &NRENTS
         GBLC &NRENTSX
         ORG   &NRENTSX
         DC    FL1'&NRENTS'
         ORG
&NRENTS  SETA  0
B&SYSNDX EQU   *
&NRENTSX SETC  'B&SYSNDX'
         MEND
         GBLC  &DSECT,&CSECT
IFCEVOL0 CSECT
&CSECT   SETC  'IFCEVOL0'
&DSECT   SETC  'M3420'
M3420    DSECT
         DSGEN (CLASSRC,8),(SYSREL,8),(SWITCHES,16),                   C
               (SPARES,32)
         DSGEN (DUM1,8),(YEAR,8),(DAY,16),(TIME,32)
         DSGEN (DUM2,8),(CPUSER,24),(CPUID,16),(DUM3,16)
         DSGEN (JOBNAME,64),(,200)
         DSGEN (PRIMCUA,24),(IORETRY,16),(SNSCNT,16)
         DSGEN (VOLID,48),(BLKLENG,16),(HDRSER,16),(,16),        S99223C
               (TEMPRDS,8),(TEMPWRTS,8),(SIOCNT,16),(PERMRDS,8), S99223C
               (PERMWRTS,8),(NOISEBLK,8),(,8),(ERASEGPS,16),     S99223C
               (CLNRACTS,16)                                     S99223
         DSGEN (SPAR,8),(NOISE,8),(RWVRC,8),(MTELRCR,8)
         DSGEN (EDCCRC,8),(ENVCKVRC,8),(OVERRUN,4),(SKEWCHK,4),        C
               (CCOMPARE,4),(WRTTRVRC,4)
         DSGEN (PEIDCHK,1),(MASKEXP,6),(PARITY,1),(TRKINERR,8),        C
               (WRTTMCHK,4),(STRDCHK,4),(PARTREC,4),(EXCPAMB,4)
         DSGEN  (ORDROP,4),(FEEDTHRU,4),(EXP,4),(EARLBGRD,4),          C
               (EARLNDRD,4),(SLBGRD,4),(SLWNDRD,4),(VELRETRY,4),       C
               (EXP2,4),(VELCHNG,4),(EXP3A,4),(EXP3,4),(BACKWARD,8),   ,
               (BUSOCHK,4),(ALUHRDER,4)
         DSGEN (SNB,1,0,23,0,7)
         DSGEN (TUSERIAL,16,EQU,SNB150)
IFCEVOL0 CSECT
         USING *,R9
         USING M3420,R2
         DC    A(ENTRIES)
         DC    CL8'IFCEVOL0'
NINE     DC    F'0'
LABELPTR DC    F'0'
RETHRE   DC    XL3'000000'         THESE TWO FIELDS MUST BE    @Z40NIVS
WRTHRE   DC    XL3'000000'         CONTIGUOUS DEC 20 FROM BEGIN@Z40NIVS
RETHREH  DC    XL3'000000'         HEX READ THRESHOLD          @Z40NIVS
WRTHREH  DC    XL3'000000'         HEX WRITE THRESHOLD         @Z40NIVS
L0       EQU   0
L1       EQU   1
L2       EQU   2
L3       EQU   3
L4       EQU   4
L6       EQU   6
L8       EQU   8
L28      EQU   28
L49      EQU   49
L72      EQU   72                                              @Z427VLS
L75      EQU   75                                              @Z427VLS
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R14      EQU   14
R15      EQU   15
CHAR0    EQU   X'F0'
DENS16   EQU   X'04'
BIRCH    EQU   X'08'                                             S99223
DISMOUNT EQU   X'84'
LONG     EQU   X'40'
SHORT    EQU   X'30'
WRITE    EQU   X'04'
L5       EQU   5                                               @Z40NIVS
FOXES    EQU   X'FF'                                           @Z40NIVS
ONE      EQU   1                                               @Z40NIVS
FOXEASY  EQU   X'FE'                                           @Z40NIVS
C4       EQU   X'C4'                                           @Z40NIVS
HEX40    EQU   X'40'                                           @Z40NIVS
FIRSTI   EQU   X'0F'                                           @Z40NIVS
FOUR     EQU   4                                               @Z40NIVS
ZERO     DC    X'0000'                                         @Z427VLS
MOVENAME MVC   L6(L8,R3),L0(R4)   MOVE NAME TO PRINT BUFFER      S99223
         LA    R3,14(R3)          CHANGE PRINT BUFFER PTR        S99223
         BR    R14                     RETURN CONTROL
ADD49    LA    R3,L49(R3)              INCREMENT PRINT BUFFER
         BR    R14
SUB7     SH    R3,SEVEN                CHANGE PRINT BUFFER POINTER
         BR    R14                     RETURN CONTROL
SUB11    SH    R3,ELEVEN               CHANGE PRINT BUFFER POINTER
         BR    R14                     RETURN CONTROL
MOVESER  MVC   L0(L6,R3),VOLID         MOVE VOLUME NAME TO BUFFER
         BR    R14
RDORWR   TM    SWITCHES+L1,DISMOUNT    DISMOUNT RECORD?          XM9111
         BZ    PUTR                SENSE IS VALID
         LR    R7,R3               GET PRINT BUFFER PTR
         BCTR  R7,L0               REDUCE PRINT BUFFER PTR
         MVC   L0(L3,R7),BLANKS    MOVE IN BLANKS
         B     MODEL               GO CHECK MODEL NUMBER
PUTR     MVI   L0(R3),C'E'         PUT IN EQUIP CHECK
         TM    L0(R4),X'10'        IS IT EQUIP CHECK?
         BO    MODEL               YES, EXIT
         MVI   L0(R3),C'W'         PUT IN WRITE STATUS
         TM    L1(R4),WRITE        IS WRITE STATUS ON
         BO    MODEL               YES, EXIT
         MVI   L0(R3),C'R'         PUT IN READ STATUS
*                                                                     *
* THIS ROUTINE WILL CHECK THE MODEL BITS IN THE LAST HALF OF BYTE SIX *
* AND PUT THE EBCDIC VALUE ON THE PRINT BUFFER.                       *
*        3410 MODEL BITS           3420 MODEL BITS                    *
*        0000  MODEL 1             0011  MODEL 3                      *
*        0001  MODEL 2             0100  MODEL 5                      *
*        0010  MODEL 3             0101  MODEL 7                      *
*                                  1011  MODEL 4                 S99223
*                                  1100  MODEL 6                 S99223
*                                  1101  MODEL 8                 S99223
*                                                                S99223
MODEL    CLC   TUSERIAL(L2),ZERO   IF ZERO, IT IS OLD STYLE    @Z427VLS
         BH    GETMOD              GO TO GET MODEL NUMBER      @Z427VLS
         MVC   L71(L3,R3),NA       NO SENSE - PUT IN N/A       @Z427VLS
         LA    R3,2(R3)           INCREMENT PRINT BUFFER PTR     S99223
         B     WHATDENS                GO TO GET DENSITY         XM9111
L71      EQU   71                                              @Z427VLS
GETMOD   STM   R6,R7,STOREREG          SAVE THE REGISTERS        XM9111
         SR    R7,R7              CLEAR REGISTER
         IC    R7,SNB60           GET THE MODEL BITS
         SLL   R7,L28             SHIFT OUT UNNEEDED BITS
         SRL   R7,L28             MOVE BACK INTO POSITION
         LA    R6,MODNO(R7)       GET THE ADDRESS OF EBCDIC NUMBER
         MVC   L72(L1,R3),L0(R6)   MOVE THE DIGIT TO THE PRINT BUFFER
         LM    R6,R7,STOREREG     GET THE PREVIOUSLY SAVED REGISTERS
         LA    R3,2(R3)           CHANGE PRINT BUFFER PTR        S99223
         B     WHATDENS           GO PUT OUT DENSITY
MODNO    DC    X'F1F2F3F3F5F76060606060F4F6F8'                   S99223
WHATDENS CLC   TUSERIAL(L2),ZERO   IF ZERO, IT IS OLD STYLE    @Z427VLS
         BH    CHKDENS             SENSE VALID - CHK DENSITY   @Z427VLS
         MVC   L75(L3,R3),NA       MOVE NA TO BUFFER           @Z427VLS
         BR    R14                     RETURN CONTROL            XM9111
L68      EQU   68                                                XM9111
CHKDENS  TM    SNB30,DENS16            1600 BITS PER INCH        S99223
         BO    PUT1600                 YES                       S99223
         TM    SNB60,BIRCH             IS THIS A NEW TYPE DRIVE  S99223
         BO    PUT6250                 YES - PUT IN 6250         S99223
         MVC   L75(L3,R3),BPI800   PUT 800 BPI IN BUFFER       @Z427VLS
         BR    R14                     RETURN                    S99223
PUT1600  MVC   L75(L4,R3),BPI1600  PUT 1600 BPI IN BUFFER      @Z427VLS
         BR    R14                     RETURN CONTROL            S99223
PUT6250  MVC   L75(L4,R3),BPI6250  PUT 6250 BPI IN BUFFER      @Z427VLS
         BR    R14                     RETURN CONTROL            S99223
BPI800   DC    CL3'800'
BPI1600  DC    CL4'1600'
BPI6250  DC    CL4'6250'                                         S99223
BLANKS   DC    CL3' '
ELEVEN   DC    H'11'
SEVEN    DC    H'7'
DECBYTES DC    D'0'
DECAREA  EQU   DECBYTES                                        @Z40NIVS
STOREREG DC    6F'0'
HIDATE   DS    F                                               @Z40NIVS
LODATE   DS    F                                               @Z40NIVS
FULLCNTR EQU   STOREREG+20
HALFCNTR EQU   STOREREG+22
NA       DC    CL3'N/A'
SWIND    DC    X'00'
*                                                                     *
DEVICE   LA    R3,6(R3)            CHANGE PRINT BUFFER POINTER @Z427VLS
         CLC   TUSERIAL(L2),ZERO   IF ZERO, IT IS OLD STYLE    @Z427VLS
         BNH   NOTAPP                                          @Z427VLS
         CLC   SNSCNT(L2),NINER        MORE THAN 9 SNS BYTES?   SA55024
         BC    2,TWOBYTES         IF GREATER IT HAS A SERIAL NBR
         B     NOTAPP             IF NOT IT IS NOT APPLICABLE
SERHDR   CLC   HDRSER(L2),ZERO     CHECK IS SERIAL NO IN HDR2  @Z427VLS
         BH    TWOBYTES            YES - GO CONVERT IT         @Z427VLS
         B     NOTAPP              NO - PUT IN NA              @Z427VLS
NINER    DC    H'9'
*                                                                     *
*THIS ROUTINE WILL TAKE A ONE BYTE COUNTER FROM THE LOGREC ENTRY AND  *
* CONVERT IT TO EBCDIC AND PUT IT INTO THE PRINT BUFFER               *
* IT IS ALSO USED TO CONVERT WHATEVER BINARY VALUE THAT IS IN R4 TO   *
* A PRINTABLE FORM.R6 MUST BE SET TO THE LENGTH OF THE RECEIVING FIELD*
* FOR THE EXECUTE INSTRUCTION                                         *
*                                                                     *
ONEBYTE  STM   R5,R8,STOREREG     STORE REGISTERS
         SR    R5,R5              CLEAR REGISTER5
         IC    R5,L0(R4)          GET THE BYTE TO BE CONVERTED
PROCDEC  LA    R8,INLINE          LOAD THE RETURN ADDRESS
         LA    R6,SHORT           GET LENGTH FOR EXECUTE INSTRUCTION
CONVERT  CVD   R5,DECBYTES        CONVERT TO DECIMAL
         EX    R6,UNPACK          UNPACK INTO THE PRINT BUFFER
         BR    R8                 RETURN TO INLINE PROCESSING
INLINE   OI    L3(R3),CHAR0       MAKE THE LAST CHAR A PRINTABLE NBR
         LM    R5,R8,STOREREG     RELOAD REGISTERS
ADD4     LA    R3,4(R3)           CHANGE PRINT BUFFER PTR        S99223
         BR    R14                RETURN
UNPACK   UNPK  L0(L1,R3),DECBYTES(8) UNPACK NUMBER5 TO PRINT LINE
*                                                                     *
* THIS ROUTINE IS USED TO ISOLATE THE RIGHT HALF OF A BYTE AND GOES   *
* TO HAVE IT CONVERTED TO PRINTABLE FORM                              *
*                                                                     *
RGHTHALF STM   R5,R8,STOREREG     STORE REGISTERS
         SR    R5,R5              CLEAR REGISTER
         IC    R5,L0(R4)          GET A BYTE FROM RECORD
         SLL   R5,L28             GET RID OF LOW ORDER BITS
         SRL   R5,L28             MOVE BACK
         B     PROCDEC            GO TO CONVERT IT
*                                                                     *
NOTAPP   MVC   L1(L3,R3),NA       MOVE N/A TO PRINT BUFFER       S99223
         BR    R14                     COUNTER IS NOT VALID
WHERETO  STM   R5,R6,STOREREG          SAVE REGISTERS
         TM    RETHRE+2,FOXES      WAS THRESHOLD SPECIFIED     @Z40NIVS
         BZ    NOTHRES             NOT,  GO CHECK FOR DUMMY    @Z40NIVS
         TM    SWIND,CHAR0             IS THIS FIRST TIME HERE
         BC    R8,CONVTHR          GO CONVERT THRESHOLD TO HEX @Z40NIVS
NOTHRES  BAL   R5,CHKDUM           CHECK FOR DUMMY RECORD      @Z40NIVS
         LA    R5,ONLYENT-4            GO TO PRINT OUT INFORMATION
         ST    R5,NINE                 STORE ADDRESS
         LA    R5,NOLAB-ONE        GET NEW LABEL ADDRESS       @Z40NIVS
         ST    R5,LABELPTR             STORE NEW LABEL ADDRESS
         LM    R5,R6,STOREREG      RESTORE THE REGS            @Z40NIVS
         B     NOPRINT             RETURN WITHOUT PRINTING     @Z40NIVS
DONOTHNG BR       R14                  RETURN CONTROL
NOPRINT  SR    R15,R15            CLEAR REGISTER FOR NO PRINT
         BR    R14                RETURN CONTROL
CHKDUM   CLI   L4(R2),FOXES        IS THIS DUMMY RECORD?       @Z40NIVS
         BE    DUMREC              YES, BRANCH                 @Z40NIVS
         CLI   L4(R2),FOXEASY      DUMMY BREAK RECORD?         @Z40NIVS
         BE    GETEND              YES, SKIP THIS ONE.         @Z40NIVS
FIRST    B     FIRSTIME            GO SET HI AND LO DATE       @Z40NIVS
         CLC   L8(L4,R2),HIDATE    NEW HIGHER THAN OLD HI      @Z40NIVS
         BH    UPHI                YES, GO CHANGE HIDATE       @Z40NIVS
         CLC   L8(L4,R2),LODATE    NEW LOWER THAN OLD LO?      @Z40NIVS
         BL    UPLO                YES, GO CHANGE LODATE       @Z40NIVS
CHKTHR   TM    L3(R2),C4           IS THIS A DISMOUNT,         @Z40NIVS
*                                  OVERFLOW, OR EOD RECORD?    @Z40NIVS
         BZ    OK2PRINT            NO, MUST BE PERMANENT ERROR @Z40NIVS
         TM    L3(R2),HEX40        IS THIS OVERFLOW?           @Z40NIVS
         BO    GETEND              YES, THEN SKIP IT           @Z40NIVS
         CLC   RETHREH+L2(L1),TEMPRDS RDS EXCEED THRESHOLD?    @Z40NIVS
         BNH   OK2PRINT            YES, PRINT THIS RECORD      @Z40NIVS
         CLC   WRTHREH+L2(L1),TEMPWRTS WRTS EXCEED THRESH?     @Z40NIVS
         BNH   OK2PRINT            YES, PRINT THIS RECORD      @Z40NIVS
         B     GETEND              ELSE DONT PRINT THIS  REC   @Z40NIVS
FIRSTIME NI    FIRST+1,FIRSTI      SET OFF FIRST TIME SW       @Z40NIVS
         OI    SWIND,CHAR0         SET FIRST TIME SWITCH       @Z40NIVS
         MVC   HIDATE,L8(R2)       SET NEW HIDATE              @Z40NIVS
UPLO     MVC   LODATE,L8(R2)       SET NEW LODATE              @Z40NIVS
         B     CHKTHR              GO CHECK THRESHOLD          @Z40NIVS
UPHI     MVC   HIDATE,L8(R2)       SET NEW HIDATE              @Z40NIVS
         B     CHKTHR              GO CHECK THRESHOLD          @Z40NIVS
OK2PRINT TM    SWIND,FIRSTI        ANY PRINTED YET             @Z40NIVS
         BOR   R5                  YES, RETURN                 @Z40NIVS
         OI    SWIND,FIRSTI        TURN ON ONE PRINTED SWITCH  @Z40NIVS
         TM    RETHRE+L2,FOXES     THRESHOLD SPECIFIED?        @Z40NIVS
         BZ    GOSKIP              NO, GO SET UP FOR PAGE      @Z40NIVS
         LA    R5,HEADLINE-FOUR    GET ADDRESS OF HEADER LINE  @Z40NIVS
         LA    R6,HEADLABL-ONE     AND HEADER LABEL            @Z40NIVS
         STM   R5,R6,NINE          MAKE THEM CURRENT           @Z40NIVS
         LM    R5,R6,STOREREG      RESTORE THE REGS            @Z40NIVS
         B     NOPRINT             RETURN WITHOUT PRINTING     @Z40NIVS
GOSKIP   LA    R5,HEADSKLI-FOUR    GET SKIP LINE               @Z40NIVS
         LA    R6,HEADSKLA-ONE     AND LABEL                   @Z40NIVS
         STM   R5,R6,NINE          MAKE THEM CURRENT           @Z40NIVS
         B     NOPRINT             RETURN WITHOUT PRINTING     @Z40NIVS
GETENDNT STM   R5,R6,STOREREG      SAVE THE REGS               @Z40NIVS
GETEND   LA    R5,ENDLINE-FOUR     GET FF LINE                 @Z40NIVS
         LA    R6,ENDLABEL-ONE     GET END LABEL               @Z40NIVS
         STM   R5,R6,NINE          MAKE THEM CURRENT           @Z40NIVS
         LM    R5,R6,STOREREG      RESTORE THE REGS            @Z40NIVS
         B     NOPRINT             RETURN WITHOUT PRINT        @Z40NIVS
DUMREC   TM    SWIND,FIRSTI        AT LEAST ONE PRINTED?       @Z40NIVS
         MVI   SWIND,X'00'         RESET ALL SWITCHES          @Z427VLS
         BO    GETEND              YES, EXIT                   @Z40NIVS
         MVC   CLASSRC(L8),HIDATE  MOVE DATES FOR LATER TRANS  @Z40NIVS
         LA    R5,NONELINE-FOUR    MGET 'NONE' MESSAGE         @Z40NIVS
         LA    R6,NONELABL-ONE     GET LABEL FOR SAME          @Z40NIVS
         STM   R5,R6,NINE          MAKE THEM CURRENT           @Z40NIVS
         LM    R5,R6,STOREREG      RESTORE THE REGS            @Z40NIVS
         B     NOPRINT             RETURN WITHOUT PRINT        @Z40NIVS
CONVTHR  OI    SWIND,CHAR0         SET FIRST TIME SWITCH       @Z40NIVS
         PACK  DECBYTES+L6(L2),RETHRE(L3) PACK THRESHOLD       @Z40NIVS
         CVB   R5,DECBYTES         CONVERT TO HEX              @Z40NIVS
         ST    R5,DECBYTES         STORE FOR MOVE              @Z40NIVS
         MVC   RETHREH(L3),DECBYTES+L1 MOVE TO HEX FIELD       @Z40NIVS
         XC    DECBYTES(L8),DECBYTES CLEAR FOR NEXT OP         @Z40NIVS
         PACK  DECBYTES+L6(L2),WRTHRE(L3) PACK THRESHOLD       @Z40NIVS
         CVB   R5,DECBYTES         CONVERT TO HEX              @Z40NIVS
         ST    R5,DECBYTES         STORE FOR MOVE              @Z40NIVS
         MVC   WRTHREH(L3),DECBYTES+L1 MOVE TO HEX FIELD       @Z40NIVS
         XC    DECBYTES(L8),DECBYTES                           @Z40NIVS
         LA    R5,THRLINE-FOUR     GET THRESHOLD LINE          @Z40NIVS
         LA    R6,THRLABEL-ONE     AND LABEL                   @Z40NIVS
         STM   R5,R6,NINE          MAKE THEM CURRENT           @Z40NIVS
         LM    R5,R6,STOREREG      RESTORE THE REGS            @Z40NIVS
         B     NOPRINT             RETURN WITHOUT PRINT        @Z40NIVS
MVDATE   UNPK  DECAREA(L5),L1(L3,R4)  UNPACK THE DATE          @Z40NIVS
         MVC   L0(L5,R3),DECAREA   MOVE IT TO PRINT LINE       @Z40NIVS
         BR    R14                 RETURN                      @Z40NIVS
MVTHRR   MVC   L0(L3,R3),RETHRE    MOVE RD THRESHOLD TO LINE   @Z40NIVS
         BR    R14                 RETURN                      @Z40NIVS
MVTHRW   MVC   L0(L3,R3),WRTHRE    MOVE WRT THRESHOLD TO LINE  @Z40NIVS
         BR    R14                 RETURN                      @Z40NIVS
*                                  *                           @Z40NIVS
* USED TO GET A HALFWORD COUNTER FROM THE RECORD AND GOES TO HAVE IT  *
* CONVERTED TO PRINTABLE FORM.RETURNS TO HAVE THE ZONE CHANGED BECAUSE*
* THIS WILL BE REPRESENTED AS A FIVE DIGIT NUMERAL RATHER THAN A FOUR *
* DIGIT AS THE SINGLE AND HALF BYTE COUNTERS.                         *
*                                                                     *
TWOBYTES STM   R5,R8,STOREREG     STORE REGISTERS
         MVC   HALFCNTR(L2),L0(R4) MOVE THE COUNTER TO STORAGE
         L     R5,FULLCNTR        PUT THE COUNTER INTO A REGISTER
         LA    R6,LONG            GET LENGTH FOR EXECUTE INSTRUCTION
         BAL   R8,CONVERT         GO TO CONVERT THE NUMBER TO EBCDIC
         OI    L4(R3),CHAR0       MAKE LAST CHARACTER PRINTABLE
         LM    R5,R8,STOREREG     RESTORE REGISTERS
         BR    R14                RETURN
*                                                                     *
* THIS CODE WILL TAKE THE DATE FROM THE RECORD UNPACK IT AND PUT IT   *
* IN THE PRINT BUFFER.                                                *
*                                                                     *
SETDATE  UNPK  DECBYTES(5),L0(L3,R4) UNPACK THE DATE
         LA    R3,6(R3)           INCREMENT PRINT POSITION PTR   S99223
         MVC   L0(L3,R3),DECBYTES+L2 MOVE DAY TO PRINT BUFFER
         OI    L2(R3),CHAR0       MAKE LAST DIGIT PRINTABLE
         MVC   L4(L2,R3),DECBYTES MOVE YEAR TO PRINT BUFFER
ADD7     LA    R3,7(R3)           INCREMENT PRINT POSITION PTR   S99223
         BR    R14                  RETURN
*                                                                     *
*                                                                     *
* ROUTINES TO CHANGE PRINT BUFFER POINTER                        S99223
*                                                                S99223
ADD3     LA    R3,3(R3)           CHANGE PRINT BUFFER PTR        S99223
         BR    R14                RETURN                         S99223
ADD11    LA    R3,11(R3)          CHANGE PRINT BUFFER PTR        S99223
         BR    R14                RETURN                         S99223
ADD19    LA    R3,19(R3)          CHANGE PRINT BUFFER PTR        S99223
         BR    R14                RETURN                         S99223
ENTRIES  DS    0F
         DC    XL4'00'
         DC    XL4'00'
         DC    A(LABELS)
         DC    H'0'
         LINE
         ROUTINE DUM1,WHERETO
         LABEL  ''
THRLINE  DC    X'01'                                           @Z40NIVS
         DC    X'000B8B00'                                     @Z40NIVS
THRLABEL LABEL ''                                              @Z40NIVS
         LINE  (41,29),(3,14),SKIP=1                           @Z40NIVS
         ROUTINE SPARES,MVTHRR                                 @Z40NIVS
         ROUTINE SPARES,MVTHRW                                 @Z40NIVS
         LABEL 'VOLUME STATIST','ICS - VOLUMES ',              @Z40NIVSX
               'EXCEEDING','TEMPORARY READ',' ERRORS OR',      @Z427VLSX
               ' TEMPORARY WRI','TE ERRORS OR P','ERM ERRORS'  @Z40NIVS
         LINE  (41,29),(3,14),SKIP=1                           @Z40NIVS
         ROUTINE DUM1,WHERETO                                  @Z40NIVS
         LABEL ''                                              @Z40NIVS
HEADSKLI DC    X'01'                                           @Z40NIVS
         DC    X'000B8B00'                                     @Z40NIVS
HEADSKLA LABEL ''                                              @Z40NIVS
HEADLINE LINE  ,(1,18),SKIP=1                                  @Z40NIVS
         ROUTINE DUM1,DONOTHNG                                 @Z40NIVS
HEADLABL LABEL 'VOLUME  DATE','TIME','TU     RD/ --PERM--  --TEMP--  CLC
               NER ERASE  SIO  BLOCK  PROGRAM  ----CPU----   MOD   DEN-C
                  HDR'                                         @Z427VLS
         LINE  ,(1,),SKIP=1                                    @Z40NIVS
         ROUTINE DUM1,DONOTHNG                                 @Z40NIVS
         LABEL 'SERIAL DAY YR  HH MM SS TH   CUA   SERIAL  WRT RDS  WRTC
               S RDS  WRTS ACTNS GAPS  COUNT LENGTH   ID      ID  SERIAC
               L  NUMBER SITY   SER'                           @Z427VLS
         LINE
         ROUTINE  DUM1,DONOTHNG
NOLAB    LABEL ''
ONLYENT  LINE  (1,1),,SKIP=1                                     S99223
         ROUTINE VOLID,MOVESER                                   S99223
         ROUTINE YEAR,SETDATE                                    S99223
         HEX   TIME,1,4B                                         S99223
         ROUTINE DUM1,ADD11                                      S99223
         HEX   PRIMCUA,0,3B
         ROUTINE TUSERIAL,DEVICE                                 S99223
         ROUTINE DUM1,ADD7                                       S99223
         ROUTINE SNB00,RDORWR                                  @Z40NIVS
         ROUTINE PERMRDS,ONEBYTE
         ROUTINE PERMWRTS,ONEBYTE
         ROUTINE TEMPRDS,ONEBYTE
         ROUTINE TEMPWRTS,ONEBYTE
         ROUTINE CLNRACTS,TWOBYTES                             @Z427VLS
         ROUTINE CLNRACTS,ADD4                                 @Z427VLS
         ROUTINE ERASEGPS,TWOBYTES                             @Z427VLS
         ROUTINE ERASEGPS,ADD4                                 @Z427VLS
         ROUTINE SIOCNT,TWOBYTES
         ROUTINE BLKLENG,ADD4                                    S99223
         ROUTINE BLKLENG,TWOBYTES                                S99223
         ROUTINE JOBNAME,MOVENAME                                S99223
         HEX   CPUID,0,2B                                        S99223
         ROUTINE DUM1,ADD3                                       S99223
         HEX   CPUSER,0,3B                                       S99223
         ROUTINE DUM1,ADD19                                      S99223
         ROUTINE HDRSER,SERHDR                                 @Z427VLS
ENDLABEL LABEL ''                                              @Z40NIVS
ENDLINE  DC    X'FF'                                           @Z40NIVS
         DC    XL2'00'
         DC    XL2'00'
         DC    XL2'00'
NONELINE LINE  (71,9),(40,37),SKIP=1                           @Z40NIVS
         ROUTINE SPARES,MVDATE                                 @Z40NIVS
         ROUTINE CLASSRC,MVDATE                                @Z40NIVS
NONELABL LABEL 'NO VOLUMES EXCEEDED THRESHOLD:','TO'           @Z40NIVS
         LINE  (71,9),(40,37),SKIP=1                           @Z40NIVS
         ROUTINE DUM1,GETENDNT                                 @Z40NIVS
         LABEL ''                                              @Z40NIVS
LABELS   DS    0F
         LSTART
         END
