*  DSGEN MACRO     DSGEN MACRO     DSGEN MACRO     DSGEN MACRO        *
         SPACE 2
         MACRO
&NAME    DSGEN &X1,&X2,&X3,&X4,&X5,&X6,&X7,&X8,&X9,&X10,&X11,&X12,&X13,X
               &X14,&X15,&X16,&X17,&X18,&X19,&X20,&X21,&X22,&X23,&X24, X
               &X25,&X26,&X27,&X28,&X29,&X30,&X31,&X32
.*                            THIS MACRO GENERATES ONE DSECT WORD
.*                                 FORMATTED FOR THE SUBJECT LOG RECORD
.*                                 EACH OPERAND HAS TWO SUB LISTS. THE
.*                                 FIRST IS THE NAME OF THE LOG ITEM
.*                                 WHILE THE SECOND IS THE # OF BITS TO
.*                                 ALLOCATE FOR THIS ITEM. ITEMS MUST
.*                                 BE DEFINED CONTIGUOUSLY WITHOUT GAPS
.*                                 UNUSED BIT GROUPS MUST BE GIVEN
.*                                 DUMMY NAMES. THE NAMES PROVIDED FOR
.*                                 THE LOG ITEMS MAY THEN BE USED IN
.*                                 THE CONVERSION MACRO INSTRUCTIONS.
         GBLC &ITEM(1000)
         GBLA &ITEMNBR,&BITS(1000),&SHIFT(1000)
         LCLC  &SYMBOL
         LCLA  &OP,&COUNT,&BYTE
.LOOP    ANOP
&OP      SETA  &OP+1
&ITEMNBR SETA  &ITEMNBR+1
&SYMBOL  SETC  '&SYSLIST(&OP,1)'
         AIF   ('&SYSLIST(&OP,2)' NE '').OK1
         MNOTE *,'NULL BIT COUNT FIELD'
         MEXIT
.OK1     ANOP
         AIF   ('&SYMBOL' NE '').OK
         MNOTE 'LOG ITEM SYMBOL NOT PROVIDED'
         AGO   .CNT
.OK      ANOP
         AIF   ('&SYMBOL'(1,1) EQ '''').CNT                *TEMP*
&SYMBOL  EQU   *+&BYTE
&ITEM(&ITEMNBR)  SETC '&SYSLIST(&OP,1)'
&BITS(&ITEMNBR) SETA &SYSLIST(&OP,2)
&SHIFT(&ITEMNBR) SETA &COUNT-&BYTE*8
.CNT     ANOP
&COUNT   SETA  &COUNT+&SYSLIST(&OP,2)
&BYTE    SETA  &COUNT/8
         AIF (&OP LT N'&SYSLIST).LOOP
         AIF   (&COUNT NE 32).NOT32
&NAME    DS    4C
         MEXIT
.NOT32   AIF   (&COUNT NE 64).ERR
&NAME    DS    8C
         MEXIT
.ERR     MNOTE '**BIT COUNT FIELDS DO NOT TOTAL 32 OR 64**'
         MEND
         EJECT
*  LINE MACRO     LINE MACRO     LINE MACRO     LINE MACRO            *
         SPACE 2
         MACRO
&NAME    LINE  &DATA,&LABEL,&SKIP=
.*                            THIS MACRO ESTABLISHES THE MARGINS OR
.*                                 COLUMN SETTINGS FOR EACH LINE. IT
.*                                 GENERATES NECESSARY CARRIAGE CONTROL
.*                                 ENTRIES. LASTLY IT DETERMINES THE
.*                                 NUMBER OF ENTRIES ASSOCIATED WITH
.*                                 THE PREVIOUS LINE AND STORES THAT #
.*                                 INTO THE APPROPRIATE BYTE.
.*                            &DATA(1) - CHARACTER POSITION TO BEGIN
.*                                 DATA.
.*                            &DATA(2) - # OF SPACES BETWEEN SUCCESSIVE
.*                                 DATA COLUMN STARTING CHARACTERS.
.*                            &LABEL(1) - CHAR. POS. TO BEGIN LABELS.
.*                            &LABEL(2) - # SPACES BETWEEN LINE'S LABEL
.*                                 STARTING CHARACTERS.
.*                            &SKIP= - # OF LINES TO ADVANCE CARRIAGE
.*                                 TO BEGIN NEXT PRINTED LINE.
.*                            NEW ENTRIES ARE GENERATED ONLY WHEN
.*                                 NECESSARY. OMISSION OF ITEMS MEANS
.*                                 THEY HAVE NOT CHANGED SINCE PREVIOUS
.*                                 SETTINGS. A LINE MACRO IS REQUIRED
.*                                 FOR EACH PRINTED LINE. IF NO SETTING
.*                                 CHANGES ARE REQUIRED ALL OPERANDS
.*                                 ARE OMITTED IN WHICH CASE ONLY THE
.*                                 # OF ENTRIES FOR THE PREVIOUS LINE
.*                                 IS COMPUTED. THIS MACRO MUST BE THE
.*                                 FIRST MACRO INSTRUCTION ISSUED FOR
.*                                 THE SUBJECT LINE
         GBLA  &DB,&DT,&LB,&LT,&NRENTS
         GBLA  &LASTCC,&INITIAL
         GBLC  &NRENTSX
         GBLC  &CARRCON
         GBLB  &TEST
         LCLA  &S
&NAME    DS    0C
         AIF   (&INITIAL EQ 0).FIRSTLN
         LINEND
         AGO   .NTFIRST
.FIRSTLN ANOP
&NRENTSX SETC  'N&SYSNDX'
&INITIAL SETA  1
N&SYSNDX EQU   *
.NTFIRST ANOP
         DC    AL1(0)
         AIF   ('&DATA(1)' EQ '').CKDTABS
         AIF   (&DATA(1) EQ &DB).CKDTABS
&DB      SETA  &DATA(1)
         AGO   .AA
.CKDTABS AIF   ('&DATA(2)' EQ '').NCDATA
         AIF   (&DATA(2) EQ &DT).NCDATA
         AGO   .CC
.AA      AIF   ('&DATA(2)' EQ '').BB
         AIF   (&DATA(2) EQ &DT).BB
.CC      ANOP
&DT      SETA  &DATA(2)
.BB      DC    XL2'FFFE'
         DC    FL1'&DB'
         DC    FL1'&DT'
&NRENTS  SETA  &NRENTS+1
.NCDATA  ANOP
         AIF   ('&LABEL(1)' EQ '').CKLTABS
         AIF   (&LABEL(1) EQ &LB).CKLTABS
&LB      SETA  &LABEL(1)
         AGO   .AAA
.CKLTABS AIF   ('&LABEL(2)' EQ '').NCLABEL
         AIF   (&LABEL(2) EQ &LT).NCLABEL
         AGO   .CCC
.AAA     AIF   ('&LABEL(2)' EQ '').BBB
         AIF   (&LABEL(2) EQ &LT).BBB
.CCC     ANOP
&LT      SETA  &LABEL(2)
.BBB     DC    XL2'FFFF'
         DC    FL1'&LB'
         DC    FL1'&LT'
&NRENTS  SETA  &NRENTS+1
.NCLABEL ANOP
         AIF   ('&SKIP' NE '').CONT
         AIF   (&TEST EQ 0).NOCHANG
&S       SETA  &LASTCC
         AGO   .DEFAULT
.CONT    ANOP
         AIF   (&TEST EQ 0).AB
&S       SETA  &SKIP
.DEFAULT ANOP
         ORG   &CARRCON+3
         DC    AL.3(0),AL.2(&S),AL.3(1)
         ORG
&LASTCC  SETA  &S
&TEST    SETB  0
         AGO   .DD
.AB      AIF   (&SKIP EQ &LASTCC).NOCHANG
A&SYSNDX DC    XL2'FFFB'
         DC    AL.3(0),AL.2(&SKIP),AL.3(1)
         DC    FL1'9'
&LASTCC  SETA  &SKIP
&TEST    SETB  1
&CARRCON SETC  'A&SYSNDX'
&NRENTS  SETA  &NRENTS+1
.DD      ANOP
.NOCHANG ANOP
         MEND
         EJECT
*  BIN MACRO     BIN MACRO     BIN MACRO     BIN MACRO     BIN MACRO  *
         SPACE 2
         MACRO
         BIN   &LOGITEM,&SKIP$OR
.*                                 &LOGITEM - NAME OF ITEM IN LOG
.*                                      RECORD DSECT
.*                                 &SKIP$OR - NBR OF SPACES TO SKIP ON
.*                                 MULTIPLE PRINT OR NBR OF SPACES
.*                                      TO BACK UP FROM COLUMN FOR
.*                                      START OF PRINTING. THE LETTER
.*                                      B PRECEEDS THE NUMBER (B5) IF
.*                                      THE LATTER IS DESIRED. OMISSION
.*                                      OF THIS OPERAND FORCES OPTION 2
.*                                      WITH BACKUP SPACING EQUAL TO
.*                                 THE NUMBER OF BITS IN THE ITEM
.*                                 DEFINITION (VIA MACRO 'DSGEN').
.*                            A LIMIT OF 15 BITS IS IMPOSED FOR THE
.*                                 TOTAL NUMBER OF BITS TO PRINT.
         GBLC &ITEM(1000)
         GBLA &ITEMNBR,&BITS(1000),&SHIFT(1000),&NRENTS
         GBLC  &DSECT
         LCLB  &B
         LCLA  &IBITS,&NDX,&ISHIFT,&K
         LCLA  &TEMP,&T
         LCLC  &S
.LOOP    ANOP
&NDX     SETA  &NDX+1
         AIF   ('&ITEM(&NDX)' EQ '&LOGITEM').FOUND
         AIF   (&NDX LT &ITEMNBR).LOOP
         MNOTE *,'YOU BLEW IT'
         ROUTINE DUM,SKIPPER
         MEXIT
.FOUND   ANOP
&ISHIFT  SETA  &SHIFT(&NDX)
&IBITS   SETA  &BITS(&NDX)
&T       SETA  &IBITS-1
&B       SETB  0
         AIF   ('&SKIP$OR' EQ '').BACKUP
&K       SETA  K'&SKIP$OR
&B       SETB  ('&SKIP$OR'(1,1) EQ 'B')
&S       SETC  '&SKIP$OR'(&B+1,&K-&B)
&T       SETA  &S
.BACKUP  ANOP
&NRENTS  SETA  &NRENTS+1
&TEMP    SETA  &ISHIFT
A&SYSNDX DC    AL.12(&LOGITEM-&DSECT),XL.4'&TEMP'
         AIF (&IBITS EQ 1 AND &B EQ 0).OUT
         ORG   A&SYSNDX
&B       SETB  1
         DC    AL.12(&LOGITEM-&DSECT),XL.4'C'
         DC    BL.1'&B',AL.7(&T),AL.4(&IBITS),FL.4'&ISHIFT'
.OUT     ANOP
         MEND
         EJECT
*  HEX MACRO     HEX MACRO     HEX MACRO    HEXN MACRO     HEX MACRO  *
         SPACE 2
         MACRO
         HEX   &LOGITEM,&SKIP$OR,&BYTES
.*                            THIS MACRO FACILITATES GENERATION OF THE
.*                                 TABLE ENTRIES SPECIFYING HEX TYPE
.*                                 CONVERSIONS.
.*                            &LOGITEM - NAME OF DATA ITEM TO BE
.*                                 CONVERTED
.*                            &SKIP$OR - NUMBER OF SPACES TO SKIP ON
.*                                 MULTIPLE PRINT OR NBR OF SPACES TO
.*                                 BACK UP FROM COLUMN FOR START OF
.*                                 PRINTING. THE LETTER B PRECEEDS THE
.*                                 NUMBER (B8) IF THE LATTER OPTION IS
.*                                 DESIRED. OMISSION OF THIS OPERAND
.*                                 FORCES OPTION 2 WITH BACKUP SPACING
.*                                 EQUAL TO THE NUMBER OF BYTES SPECI-
.*                                 FIED BY THE NEXT OPERAND (TWICE THIS
.*                                 NUMBER IF SUFFIX IS EXPLICITLY OR
.*                                 IMPLICITLY B).
.*                            &BYTES - NUMBER OF TOTAL INPUT BYTES TO
.*                                 PROCESS. THIS NUMBER IS SUFFIXED
.*                                 WITH AN L,R, OR B TO STIPULATE
.*                                 PRINTING OF THE LEFT HALF, RIGHT
.*                                 HALF, OR BOTH HALVES OF THE BYTE
.*                                 RESPECTIVELY. OMISSION OF THIS
.*                                 OPERAND DEFAULTS TO B WITH THE NUM-
.*                                 BER OF BYTES EQUAL TO THE ITEM LNGTH
.*                            A NEW ENTRY IS GENERATED ONLY WHEN NECES-
.*                                 SARY. THIS MACRO MUST BE THE FIRST
.*                                 MACRO INSTRUCTION ISSUED FOR THE
.*                                 SUBJECT LINE(S).
         GBLC &ITEM(1000),&DSECT
         GBLA &ITEMNBR,&BITS(1000),&SHIFT(1000),&NRENTS
         LCLB  &B
         LCLA  &IBITS,&NDX,&ISHIFT,&K,&T,&CODE,&BYTESP
         LCLC  &S,&LETTER
.LOOP    ANOP
&NDX     SETA  &NDX+1
         AIF   ('&ITEM(&NDX)' EQ '&LOGITEM').FOUND
         AIF   (&NDX LT &ITEMNBR).LOOP
         MNOTE *,'LOG ITEM NOT DEFINED'
         MEXIT
.FOUND   ANOP
&ISHIFT  SETA  &SHIFT(&NDX)
&IBITS   SETA  &BITS(&NDX)
&CODE    SETA  1
&K       SETA  K'&BYTES
         AIF   (&IBITS-(&IBITS/4)*4 EQ 0).OK
         MNOTE *,'BIT LENGTH SPECIFICATION INCONSISTENT WITH CONTROL'
         MEXIT
.OK      AIF   ('&BYTES' EQ '').USEDEFN
&LETTER  SETC  '&BYTES'(&K,1)
&S       SETC  '&BYTES'(1,&K-1)
&BYTESP  SETA  &S
         AIF   ('&LETTER' EQ 'B').BOTH
         AIF   (&ISHIFT EQ 0 OR &ISHIFT EQ 4).OK2
.ERR     MNOTE *,'DATA NOT ALLIGNED ON HEX OR BYTE BOUNDARY'
         MEXIT
.USEDEFN ANOP
&BYTESP  SETA  &IBITS/8
.BOTH    AIF   (&ISHIFT NE 0).ERR
&CODE    SETA  3
&T       SETA  &BYTESP*2-1
&S       SETC  '&T'
.OK2     AIF   (&ISHIFT EQ 0).L
&CODE    SETA  2
.L       ANOP
&B       SETB  1
         AIF   ('&SKIP$OR' EQ '').BACKUP
&K       SETA  K'&SKIP$OR
&B       SETB  ('&SKIP$OR'(1,1) EQ 'B')
&S       SETC  '&SKIP$OR'(&B+1,&K-&B)
.BACKUP  ANOP
&NRENTS  SETA  &NRENTS+1
         DC    AL.12(&LOGITEM-&DSECT),XL.4'A'
         DC    BL.1'&B',FL.7'&S',FL.4'&BYTESP',FL.4'&CODE'
.OUT     ANOP
         MEND
         SPACE 2
*  ROUTINE MACRO     ROUTINE MACRO     ROUTINE MACRO     ROUTINE MACRO*
         SPACE 2
         MACRO
&NAME    ROUTINE &LOGITEM,&RNAME
         GBLC  &DSECT,&CSECT
         GBLC  &ITEM(1000)
         GBLA  &SHIFT(1000),&ITEMNBR
         GBLA  &NRENTS
         LCLA  &ISHIFT,&NDX
.LOOP    ANOP
&NDX     SETA  &NDX+1
         AIF   ('&ITEM(&NDX)' EQ '&LOGITEM').FOUND
         AIF   (&NDX LT &ITEMNBR).LOOP
         MNOTE *,'LOG ITEM NOT DEFINED'
         MEXIT
.FOUND   ANOP
&ISHIFT  SETA  &SHIFT(&NDX)
&NAME    DC    AL.12(&LOGITEM-&DSECT),XL.4'D'
         DC    AL.4(&ISHIFT),AL.12(&RNAME-&CSECT)
&NRENTS  SETA  &NRENTS+1
         MEND
         EJECT
*  LABEL MACRO     LABEL MACRO     LABEL MACRO     LABEL MACRO        *
         SPACE 2
         MACRO
&NAME    LABEL &LABEL1,&LABEL2,&LABEL3,&LABEL4,&LABEL5,&LABEL6,        C
               &LABEL7,&LABEL8
.*                            THIS MACRO ALLOWS UP TO ACHT LABELS TO
.*                                 BE SPECIFIED FOR A GIVEN LINE. THE
.*                                 LABELS SHOULD BE ENCLOSED IN QUOTA-
.*                                 TION MARKS. THE COLUMN AND LINE END
.*                                 CONTROLS WILL BE INSERTED BY THE
.*                                 MACRO. OMITTED OPERANDS MEAN NO
.*                                 LABEL REQUIRED FOR RESPECTIVE
.*                                 COLUMN. THIS MACRO WILL ALSO ALERT
.*                                 THE PROGRAMMER TO EXACTLY WHERE THE
.*                                 TABLE MUST BE BROKEN IF NECESSARY
.*                                 TO AVOID EXCEEDING THE MAXIMUM LIMIT
         GBLC &LABELS(2000)
         GBLC  &LBL(100)
         GBLA  &LBLCTR(100)
         GBLA  &LABELNR
         GBLA  &NRENTS,&LPTR
         LCLC  &MARGIN,&TACK
         LCLC  &TEXT
         LCLA  &OP,&K,&START,&NRCHAR,&REMAIN
&MARGIN  SETC  '*'
         AIF   ('&NAME' EQ '').LOOPOUT
&LPTR    SETA  &LPTR+1
&LBL(&LPTR) SETC '&NAME'
&LBLCTR(&LPTR) SETA &LABELNR+1
.LOOPOUT ANOP
&OP      SETA  &OP+1
&K       SETA  K'&SYSLIST(&OP)
         AIF (&K GE 2).NORM
&K       SETA  2
.NORM    ANOP
&START   SETA  2
         AIF (&OP LT N'&SYSLIST).NOTLAST
&MARGIN  SETC  '$'
.NOTLAST ANOP
&NRCHAR  SETA  8
&TACK    SETC  ''
.LOOPIN  ANOP
&REMAIN  SETA  &K-&START
         AIF (&REMAIN GE 8).MORE
&TACK    SETC  '&MARGIN'
&NRCHAR  SETA  &REMAIN
.MORE    ANOP
&TEXT    SETC  ''
         AIF (&REMAIN EQ 0).ENDTEXT
&TEXT    SETC  '&SYSLIST(&OP)'(&START,&NRCHAR)
.ENDTEXT ANOP
&LABELNR SETA  &LABELNR+1
&LABELS(&LABELNR) SETC '&TEXT'.'&TACK'
&START   SETA  &START+8
         AIF ('&TACK' EQ '').LOOPIN
         AIF ('&TACK' EQ '*').LOOPOUT
         MEND
         SPACE 2
         MACRO
         LSTART
.*                            THIS MACRO IS ISSUED WHEN THE LABEL AREA
.*                                 OF THE TABLE IS TO BEGIN.
         GBLC &LABELS(2000)
         GBLA  &LABELNR
         GBLC  &LBL(100)
         GBLA  &LBLCTR(100)
         LCLA  &NDX,&CTR
         LINEND
&CTR     SETA  1
.LOOP    ANOP
&NDX     SETA  &NDX+1
         AIF   (&LBLCTR(&CTR) NE &NDX).NOLBL
&LBL(&CTR) DC  C'&LABELS(&NDX)'
&CTR     SETA  &CTR+1
         AGO   .LOOPCTL
.NOLBL   ANOP
         DC    C'&LABELS(&NDX)'
.LOOPCTL AIF   (&NDX LT &LABELNR).LOOP
         MEND
         SPACE 2
         MACRO
         LINEND
.*                            THIS MACRO IS USED ONLY BY THE LINE
.*                                 MACRO TO SET THE NUMBER OF ENTRIES
.*                                 ASSOCIATED WITH EACH LINE.
         GBLA  &NRENTS
         GBLC &NRENTSX
         ORG   &NRENTSX
         DC    FL1'&NRENTS'
         ORG
&NRENTS  SETA  0
B&SYSNDX EQU   *
&NRENTSX SETC  'B&SYSNDX'
         MEND
         GBLC  &DSECT,&CSECT
         TITLE 'IFCEXXXB-EDIT TABLE FOR 3420 TAPES'
IFCEXXXB CSECT
&CSECT   SETC  'IFCEXXXB'
&DSECT   SETC  'M3420'
M3420    DSECT
         DSGEN (CLASSRC,8),(SYSREL,8),(SWITCHES,16),(SPARES,32)
         DSGEN (DUM1,8),(YEAR,8),(DAY,16),(TIME,32)
         DSGEN (SPARE1,8),(CPUSER,24),(CPUID,16),(SPARE2,16)
         DSGEN (JOBID,64)
         DSGEN (COMMCODE,8),(DATAADDR,24),(FLAGS,8),(RESERVED,8),      C
               (CCWCOUNT,16)
         DSGEN (CSWKEY,8),(COMMADDR,24),(ATTEN,1),(STATMOD,1),         C
               (CONTUEND,1),(BUSY,1),(CHANEND,1),(DEVEND,1),           C
               (UNITCHK,1),(UNITEXEP,1),(CHSTAT,8),(CSWCOUNT,16)
         ORG   ATTEN                                           @XA19935
         DSGEN (ATTENBIT,8),(,24)                              @XA19935
         ORG   CSWKEY+8                                        @XA19935
         DSGEN (DDCOUNT,8),(SECONCUA,24),(DEVTYPE,32)
         DSGEN (SDRCOUNT,8),(PRIMCUA,24),(IORETRYS,16),(SNSBYTES,16)
         DSGEN (VOLID,48),(BLKLENG,16)
         DSGEN (DUM2,32),(TEMPRDS,8),(TEMPWRTS,8),(SIOCNT,16)
         DSGEN (PERMRDS,8),(PERMWRTS,8),(NOISEBLK,8),(MODESET,8)
         DSGEN (ERASEGPS,16),(CLNRACTS,16)
         DSGEN (DUM3,8),(NOISE,8),(RWVRC,8),(MTELRCR,8)
         DSGEN (EDCCRC,8),(ENVCKVRC,8),(OVERRUN,4),(SKEWCHK,4),        C
               (CCOMPARE,4),(WRTTRVRC,4)
         DSGEN (PEIDCHK,1),(MASKEXP,6),(PARITY,1),(TRKINERR,8),        C
               (WRTTMCHK,4),(STRDCHK,4),(PARTREC,4),(EXCPAMB,4)
         DSGEN  (ORDROP,4),(FEEDTHRU,4),(EXP,4),(EARLBGRD,4),          C
               (EARLNDRD,4),(SLBGRD,4),(SLWNDRD,4),(VELRETRY,4),       C
               (EXP2,4),(VELCHNG,4),(EXP3A,4),(EXP3,4),(BACKWARD,8),   C
               (BUSOCHK,4),(ALUHRDER,4)
         DSGEN (SNB000,1),(SNB001,1),(SNB002,1),(SNB003,1),(SNB004,1), C
               (SNB005,1),(SNB006,1),(SNB007,1),(SNB010,1),(SNB011,1), C
               (SNB012,1),(SNB013,1),(SNB014,1),(SNB015,1),(SNB016,1), C
               (SNB017,1),(SNB020,1),(SNB021,1),(SNB022,1),(SNB023,1), C
               (SNB024,1),(SNB025,1),(SNB026,1),(SNB027,1),(SNB030,1), C
               (SNB031,1),(SNB032,1),(SNB033,1),(SNB034,1),(SNB035,1), C
               (SNB036,1),(SNB037,1)
         DSGEN (SNB040,1),(SNB041,1),(SNB042,1),(SNB043,1),(SNB044,1), C
               (SNB045,1),(SNB046,1),(SNB047,1),(SNB050,1),(SNB051,1), C
               (SNB052,1),(SNB053,1),(SNB054,1),(SNB055,1),(SNB056,1), C
               (SNB057,1),(SNB060,1),(SNB061,1),(SNB062,1),(SNB063,1), C
               (SNB064,1),(SNB065,1),(SNB066,1),(SNB067,1),(SNB070,1), C
               (SNB071,1),(SNB072,1),(SNB073,1),(SNB074,1),(SNB075,1), C
               (SNB076,1),(SNB077,1)
         DSGEN (SNB080,1),                                             C
               (SNB081,1),(SNB082,1),(SNB083,1),(SNB084,1),(SNB085,1), C
               (SNB086,1),(SNB087,1),(SNB090,1),(SNB091,1),(SNB092,1), C
               (SNB093,1),(SNB094,1),(SNB095,1),(SNB096,1),(SNB097,1), C
               (SNB100,1),(SNB101,1),(SNB102,1),(SNB103,1),(SNB104,1), C
               (SNB105,1),(SNB106,1),(SNB107,1),(SNB110,1),(SNB111,1), C
               (SNB112,1),(SNB113,1),(SNB114,1),(SNB115,1),(SNB116,1), C
               (SNB117,1)
         DSGEN (SNB120,1),(SNB121,1),(SNB122,1),(SNB123,1),(SNB124,1), C
               (SNB125,1),(SNB126,1),(SNB127,1),(TCSERIAL,16),         C
               (TUSERIAL,16),(SNB170,1),(SNB171,1),                    C
               (SNB172,1),(SNB173,1),(SNB174,1),(SNB175,1),(SNB176,1), C
               (SNB177,1),(SNB180,1),(SNB181,1),(SNB182,1),(SNB183,1), C
               (SNB184,1),(SNB185,1),(SNB186,1),(SNB187,1),(SNB190,1), C
               (SNB191,1),(SNB192,1),(SNB193,1),(SNB194,1),(SNB195,1), C
               (SNB196,1),(SNB197,1)
         DSGEN (SNB200,1),(SNB201,1),(SNB202,1),(SNB203,1),(SNB204,1), C
               (SNB205,1),(SNB206,1),(SNB207,1),(SNB210,1),(SNB211,1), C
               (SNB212,1),(SNB213,1),(SNB214,1),(SNB215,1),(SNB216,1), C
               (SNB217,1),(SNB22,8),(SNB23,8)
IFCEXXXB CSECT
*                                                                     *
*                       EDIT TABLE FOR THE 3420 DEVICE                *
*                                                                     *
         USING *,R9
         USING M3420,R2
         DC    A(ENTRIES)
         DC    CL8'IFCEXXXB'
NINE     DC    F'0'
LABELPTR DC    F'0'
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R14      EQU   14
R15      EQU   15
L0       EQU   0
L1       EQU   1
L2       EQU   2
L3       EQU   3
L4       EQU   4
L5       EQU   5
L6       EQU   6
L7       EQU   7
L8       EQU   8
L9       EQU   9
L10      EQU   10
L11      EQU   11
L13      EQU   13
L20      EQU   20
L21      EQU   21
L24      EQU   24
L27      EQU   27
L28      EQU   28
L88      EQU   88
CHAR0    EQU   X'F0'              ZONE USED IN BIT PRINT
RELONLY  EQU   X'1F'
DENS16   EQU   X'04'
BIRCH    EQU   X'08'                                             S99223
DENS8    EQU   X'10'
DISMOUNT EQU   X'84'                                             XM9111
FE       EQU   X'FE'
LONG     EQU   X'40'
SHORT    EQU   X'30'
ZERO     EQU   X'00'
SHRTRECD EQU   X'20'
ZEROHI   EQU   X'3F'
*                                                                     *
*                         SPECIAL ROUTINE SECTION                     *
*                                                                     *
* UPON ENTRY TO ANY SPECIAL ROUTINE REG4 POINTS TO THE FIELD IN THE   *
* LOGREC RECORD WHICH WILL BE PROCESSED. REG3 POINTS TO THE PRINT     *
* POSITION OF THE PRINT BUFFER WHERE THE DATA SHOULD BE PUT. REG9     *
* IS USED FOR ADDRESSABILITY. THEN REG15 IS ZEROED BEFORE A RETURN    *
* THE BUFFER THAT WAS JUST PROCESSED IS NOT PRINTED.                  *
*                                                                     *
*                                                                     *
CONVREL  STM   R5,R8,XSAVE              SAVE WORK REGS
         SR    R6,R6                    CLEAR R6
         IC    R6,L0(R4)                PICK UP REL & SYS VALUES
         SRDL  R6,L5                    SAVE REL NO IN R7
        SLL   R6,L2                    MULTIPLY SYS VALUE BY 4
         L     R8,XLABELP               PICK UP LABEL POINTER
         LA    R6,RELTAB(R6)            INDEX INTO TABLE OF SYSTEMS
         MVC   L88(L4,R8),L0(R6)        MOVE SYSTEM NAME INTO LABEL
         SR    R6,R6                    CLEAR R6
         SLDL  R6,L5                    RETREIVE REL NO.
         LTR   R6,R6                    IS IT ZERO
         BZ    NOREL                    BR-YES
         CVD   R6,WORK                  CONVERT IT
         UNPK  L0(L2,R3),WORK+L6(L2)    UNPACK IT INTO PRINT BUFF
         MVZ   L1(L1,R3),L0(R3)         MOVE ON PROPER ZONE
         B     RETURN                   EXIT
NOREL    MVC   L0(L4,R3),NONE           MOVE IN NONE FOR REL
RETURN   LM    R5,R8,XSAVE
         BR    R14
*                                                                     *
* THIS ROUTINE WILL CONVERT ONE BYTE OF BITS TO THEIR EBCDIC          *
* EQUIVALENT.                                                         *
*                                                                     *
SETBINA  STM   R5,R8,STOREREG     SAVE REGISTERS
         LR    R8,R3              PUT LINE POINTER TO REGISTER
         LA    R5,L8              PUT COUNTER IN REGISTER
         IC    R7,L0(R4)          GET THE BYTE TO PRINT
         SLL   R7,L24             SHIFT TO LOW BIT POSITIONS
CHNGBITS SR    R6,R6              CLEAR REGISTER
         SLDL  R6,L1              MOVE ONE BIT INTO REG
         STC   R6,L0(R8)          STORE THE BIT ON PRINT LINE
         OI    L0(R8),CHAR0       MOVE ZONE TO MAKE IT A PRINTABLE CHAR
         LA    R8,L1(R8)          INCREMENT PRINT LINE
         BCT   R5,CHNGBITS        ALL BITS BEEN PRINTED
         LM    R5,R8,STOREREG     RESTORE REGISTERS
DONOTHNG BR    R14                RETURN
*                                                                     *
*                                                                     *
*                                                                     *
*THIS ROUTINE WILL TAKE A ONE BYTE COUNTER FROM THE LOGREC ENTRY AND  *
* CONVERT IT TO EBCDIC AND PUT IT INTO THE PRINT BUFFER               *
* IT IS ALSO USED TO CONVERT WHATEVER BINARY VALUE THAT IS IN R4 TO   *
* A PRINTABLE FORM.R6 MUST BE SET TO THE LENGTH OF THE RECEIVING FIELD*
* FOR THE EXECUTE INSTRUCTION                                         *
*                                                                     *
ONEBYTE  STM   R5,R8,STOREREG     STORE REGISTERS
         SR    R5,R5              CLEAR REGISTER5
         IC    R5,L0(R4)          GET THE BYTE TO BE CONVERTED
PROCDEC  LA    R8,INLINE          LOAD THE RETURN ADDRESS
         LA    R6,SHORT           GET LENGTH FOR EXECUTE INSTRUCTION
CONVERT  CVD   R5,DECBYTES        CONVERT TO DECIMAL
         EX    R6,UNPACK          UNPACK INTO THE PRINT BUFFER
         BR    R8                 RETURN TO INLINE PROCESSING
INLINE   OI    L3(R3),CHAR0       MAKE THE LAST CHAR A PRINTABLE NBR
         LM    R5,R8,STOREREG     RELOAD REGISTERS
         BR    R14                RETURN
UNPACK   UNPK  L0(L1,R3),DECBYTES(8) UNPACK NUMBER5 TO PRINT LINE
*                                                                     *
* THIS ROUTINE IS USED TO ISOLATE THE RIGHT HALF OF A BYTE AND GOES   *
* TO HAVE IT CONVERTED TO PRINTABLE FORM                              *
*                                                                     *
RGHTHALF STM   R5,R8,STOREREG     STORE REGISTERS
         SR    R5,R5              CLEAR REGISTER
         IC    R5,L0(R4)          GET A BYTE FROM RECORD
         SLL   R5,L28             GET RID OF LOW ORDER BITS
         SRL   R5,L28             MOVE BACK
         B     PROCDEC            GO TO CONVERT IT
STOREREG DC    6F'0'
FULLCNTR EQU   STOREREG+20
HALFCNTR EQU   STOREREG+22
THOUSAND DC    H'10000'                                        @ZA01048
SERNUMBR DC    H'0'                                            @ZA01048
*                                                                     *
* THIS ROUTINE IS USED TO ISOLATE THE LEFT HALF OF A BYTE AND GOES    *
* TO HAVE IT CONVERTED TO PRINTABLE FORM                              *
*                                                                     *
LEFTHALF STM   R5,R8,STOREREG     STORE REGISTERS
         SR    R5,R5              CLEAR REGISTER
         IC    R5,L0(R4)          GET BYTE FROM THE RECORD
         SRL   R5,L4              GET RID OF HIGH ORDER BITS
         B     PROCDEC            GO TO CONVERT IT
*                                                                     *
* USED TO GET A HALFWORD COUNTER FROM THE RECORD AND GOES TO HAVE IT  *
* CONVERTED TO PRINTABLE FORM.RETURNS TO HAVE THE ZONE CHANGED BECAUSE*
* THIS WILL BE REPRESENTED AS A FIVE DIGIT NUMERAL RATHER THAN A FOUR *
* DIGIT AS THE SINGLE AND HALF BYTE COUNTERS.                         *
*                                                                     *
TWOBYTES STM   R5,R8,STOREREG     STORE REGISTERS
         MVC   HALFCNTR(L2),L0(R4) MOVE THE COUNTER TO STORAGE
         L     R5,FULLCNTR        PUT THE COUNTER INTO A REGISTER
MOVESER1 LA    R6,LONG             GET LENGTH FOR EXEC INST    @XA19935
         BAL   R8,CONVERT         GO TO CONVERT THE NUMBER TO EBCDIC
         OI    L4(R3),CHAR0       MAKE LAST CHARACTER PRINTABLE
         LM    R5,R8,STOREREG     RESTORE REGISTERS
         BR    R14                RETURN
*                                                                  *
* THE HIGH ORDER TWO BITS OF THE TCSERIAL ARE RESERVED FOR FUTURE     *
* USE AND ARE NOT PART OF THE SERIAL NUMBER. THEY HAVE TO CLEARED     *
* TO PUT THE SERIAL NUMBER OUT IN EBCDIC BUT RESTORED FOR THE HEX  *
* DUMP. THAT IS WHAT THESE ROUTINES WILL DO.                       *
*                                                                  *
MOVESER  STM   R5,R8,STOREREG      STORE REGISTERS             @ZA01048
         MVC   SERNUMBR(L2),L0(R4) SAVE SERIAL NO.             @ZA01048
         NI    SERNUMBR,ZEROHI     ZERO THE HI ORDER TWO BITS  @XA19935
         LH    R5,SERNUMBR                                     @XA19935
         AH    R5,THOUSAND         ADD  TEN THOUSAND           @XA19935
         B     MOVESER1            PRINT VALUE                 @XA19935
*                                                                     *
* THIS ROUTINE WILL CHECK THE MODEL BITS IN THE LAST HALF OF BYTE SIX *
* AND PUT THE EBCDIC VALUE ON THE PRINT BUFFER.                       *
*        3410 MODEL BITS           3420 MODEL BITS                    *
*        0000  MODEL 1             0011  MODEL 3                 S99223
*        0001  MODEL 2             0100  MODEL 5                 S99223
*        0010  MODEL 3             0101  MODEL 7                 S99223
*                                  1011  MODEL 4                 S99223
*                                  1100  MODEL 6                 S99223
*                                  1101  MODEL 8                 S99223
*                                                                S99223
MODEL    STM   R6,R7,STOREREG     SAVE THE REGISTERS
         IC    R7,L0(R4)          GET THE MODEL BITS
         SLL   R7,L28             SHIFT OUT UNNEEDED BITS
         SRL   R7,L28             MOVE BACL INTO POSITION
         LA    R6,MODNO(R7)       GET THE ADDRESS OF EBCDIC NUMBER
         MVC   L0(L1,R3),L0(R6)   MOVE THE DIGIT TO THE PRINT BUFFER
         LM    R6,R7,STOREREG     GET THE PREVIOUSLY SAVED REGISTERS
         BR    R14                RETURN
PUTMOD   STM   R5,R8,STOREREG      SAVE THE REGISTERS          @ZA01048
         IC    R7,L0(R4)           GET THE MODEL BITS          @ZA01048
         SLL   R7,L28              SHIFT OUT UNNEEDED BITS     @ZA01048
         SRL   R7,L28              MOVE BACK INTO POSITION     @ZA01048
         LA    R6,MODNO(R7)        GET ADDRESS OF EBCDIC NUMBER
         IC    R5,L0(R6)           PUT MODEL NO IN REG         @ZA01048
         LR    R6,R5               LOAD INTO REGISTER          @ZA01048
         SLL   R6,L28              SHIFT OUT UNNEEDED BITS     @ZA01048
         SRL   R6,L28              MOVE BACK INTO POSITION     @ZA01048
         MH    R6,THOUSAND         MULT BY A THOUSAND          @ZA01048
         SR    R5,R5               CLEAR REG5                  @XA19935
         ICM   R5,3,L9(R4)         PUT TWO BYTES INTO REG5     @XA19935
         AR    R6,R5               ADD MODEL NO.TO SER NO.     @XA19935
         LR    R5,R6               PUT COUNT INTO REGISTER     @ZA01048
         LA    R6,LONG             GET LENGTH FOR EXECUTE      @ZA01048
         BAL   R8,CONVERT          GO TO CONVERT TO EBCDIC     @ZA01048
         OI    L4(R3),CHAR0        MAKE LAST CHARACTER PRINTABLE
         LM    R5,R8,STOREREG      RESTORE REGISTERS           @ZA01048
         BR    R14                                             @ZA01048
MODNO   DC    X'F1F2F3F3F5F76060606060F4F6F8'                    S99223
*                                                                     *
* THIS CODE WILL MOVE THE JOB NAME AND VOLID FROM THE RECORD TO THE   *
* BUFFER                                                              *
*                                                                     *
JOBNAME  MVC   L0(L8,R3),L0(R4)   MOVE THE JOBID TO PRINT LINE
         BR    R14                RETURN
VOLNAME  MVC   L0(L6,R3),L0(R4)   MOVE THE VOLID TO PRINT LINE
         BR    R14                RETURN
*                                                                     *
*                                                                     *
* THIS CODE WILL TAKE THE DATE FROM THE RECORD UNPACK IT AND PUT IT   *
* IN THE PRINT BUFFER.                                                *
*                                                                     *
SETDATE  UNPK  DECBYTES(5),L0(L3,R4) UNPACK THE DATE
         MVC   L0(L3,R3),DECBYTES+L2 MOVE DAY TO PRINT BUFFER
         OI    L2(R3),CHAR0       MAKE LAST DIGIT PRINTABLE
         MVC   L4(L2,R3),DECBYTES MOVE YEAR TO PRINT BUFFER
         BR    R14                  RETURN
*                                                                     *
* USED TO INCREMENT THE PRINT BUFFER BY TWO BYTES                     *
*                                                                     *
SPACE2B  NI    L2(R3),FE  ZERO HIGH ORDER BIT OF COMMAND ADDR  @XA19935
SPACE2   LA    R3,L2(R3)          INCREMENT LINE POINTER BY TWO BYTES
         BR    R14                RETURN
*                                                                     *
*                                                                     *
* THE FOLLOWING ARE ROUTINES TO INCREMENT THE PRINT BUFFER POINTER.   *
*                                                                     *
*                                                                     *
ADD27    LA    R3,L6(R3)                                       @XA19935
ADD21    LA    R3,L8(R3)                                       @XA19935
ADD13    LA    R3,L8(R3)                                       @XA19935
ADD5     LA    R3,L5(R3)          INCREMENT LINE POINTER BY 5
         BR    R14                RETURN
*                                                                     *
*                                                                     *
* IF THE RECORD BEING PROCESSED IS A DISMOUNT RECORD THE HEX DUMP     *
* LENGTH FIELD IS SET TO ZERO FOR NO DUMP. IF IT IS A FULL OBR THE    *
* LENGTH FIELD IS SET FOR A 24 BYTE HEADER AND A 132 BYTE FULL RECORD *
* THE ROUTINE THEN DETERMINES WHAT TYPE OF RECORD FORMAT IS TO        *
* BE PRINTED. IF THERE IS NO DISMOUNT RECORD, ADDRESSES ARE SET TO    *
* PRINT A FULL OBR. IF THE RECORD IS A DISMOUNT RECORD A TEST IS MADE *
* TO SEE IF COLUMN LABELS MUST BE PRINTED. IF THEY MUST THE ROUTINE   *
* SETS THE SWITCH AND RETURNS. IF NOT THE ADDRESSES ARE UPDATED TO    *
* BYPASS PRINTING THE LABELS.                                         *
*                                                                     *
TYPEREC  STM   R6,R8,STOREREG     SAVE REGISTERS
         TM    L1(R4),DISMOUNT    IS THIS A SHORT RECORD
         BC    8,NODIS            BRANCH FOR FULL LENGTH RECORD
         LA    R6,EXIT-4                                       @XA19935
         ST    R6,NINE                                         @XA19935
         B     NOPRINTA                                        @XA19935
NODIS    CLC   SNSBYTES(L2),NINER NINE SENSE BYTES?             SA55024
         BNH   NOPRINTA            GO FOR NORMAL PROCESSING    @XA19935
         LA    R7,LONGLAB2-1                                   @XA19935
         ST    R7,LABELPTR                                     @XA19935
         LA    R7,LONGENT2-4                                   @XA19935
         ST    R7,NINE                                         @XA19935
NOPRINTA LM    R6,R8,STOREREG     RELOAD SAVED REGISTERS
NOPRINT  SR    R15,R15            SET REGISTER FOR NO PRINT
         BR    R14                RETURN CONTROL
XSAVE    EQU   STOREREG                                        @XA19935
NONE     DC    C'NONE'
XLABELP  EQU   LABELPTR
XRELN    EQU   SYSREL
RELTAB   DS    0C
         DC    C'OS  '
         DC    C'DOS '
         DC    C'VS 1'
         DC    C'V370'
         DC    C'VS 2'
         DC    C'    '
         DC    C'    '
         DC    C'    '
TWELVE   DC    H'12'
NINER    DC    H'9'
DECBYTES DC    D'0'               PACKED NUMERIC AREA
WORK     EQU   DECBYTES                                        @XA19935
         EJECT                                                 @XA19935
ENTRIES  DS    0F
         DC    XL4'00'            FORMAT 1
         DC    XL4'00'            FORMAT 2
         DC    A(LABLES)          LABEL POINTER
         DC    H'0'               DISP
         LINE ,(10,55)
         ROUTINE SWITCHES,TYPEREC
         LABEL ''
* THIS IS THE FULL OBR PRINTOUT FOR PERMANENT ERRORS                  *
LONGENT1 DC    X'01'
         DC    X'000B8B01'                                     @XA19935
LONGLAB1 LABEL ''
         LINE  (109,1),(1,76),SKIP=0
         ROUTINE SYSREL,CONVREL
         LABEL '--- RECORD ENTRY SOURCE - OBR          TYPE -OUTBOARD  C
                   MODEL-','SERIAL NO.            XXXX REL.'
         LINE  (67,21),,SKIP=2
         HEX   CPUID,0,2B
         HEX   CPUSER,0,3B
         LABEL ''
         LINE       (67,21),(2,12),SKIP=1
         LABEL 'DEVICE','PRIMARY','SECONDARY','PROGRAM',               C
               'VOLUME','MODE','DATE','TIME'
         LINE  ,(2,12)
         LABEL 'TYPE','CUA','CUA','IDENTITY',                          C
               'SERIAL','SET','DAY YR','HH MM SS.TH'
         LINE  (14,12),(1,),SKIP=2
         HEX   PRIMCUA,0,3B
         HEX   SECONCUA,0,3B
         ROUTINE JOBID,JOBNAME
         ROUTINE VOLID,VOLNAME
         HEX   MODESET,0,1B
         ROUTINE YEAR,SETDATE
         HEX   TIME,1,4B
          LABEL ' 3410'
         LINE  ,(14,50),SKIP=1
         LABEL 'CC   DA    FL     CT','K    CA    US CS  CT'
         LINE  (14,3),(1,57),SKIP=2                            @XA19935
         HEX   COMMCODE,0,1B                                   @XA19935
         HEX   DATAADDR,0,3B                                   @XA19935
         ROUTINE SPARES,SPACE2                                 @XA19935
         HEX   FLAGS,0,1B                                      @XA19935
         HEX   RESERVED,0,1B                                   @XA19935
         HEX   CCWCOUNT,0,2B                                   @XA19935
         ROUTINE SPARES,ADD27                                  @XA19935
         HEX   CSWKEY,0,1B                                     @XA19935
         HEX   COMMADDR,0,3B                                   @XA19935
         ROUTINE SPARES,SPACE2B                                @XA19935
         HEX   ATTENBIT,0,1B                                   @XA19935
         HEX   CHSTAT,0,1B                                     @XA19935
         HEX   CSWCOUNT,0,2B                                   @XA19935
         LABEL 'FAILING CCW','CSW'
         LINE  (15,17),(1,17),SKIP=2
         LABEL 'UNIT STATUS','BYTE 0','BYTE 1','BYTE 2','BYTE 3',      C
               'BYTE 4','BYTE 5'
         LINE   ,,SKIP=1
         BIN   ATTEN
         BIN   SNB000
         BIN   SNB010
         BIN   SNB020
         BIN   SNB030
         BIN   SNB040
         BIN   SNB050
         LABEL 'ATTENTION','CMND REJECT','NOISE','TRK ERR 0',          C
               'VRC','TU POSN CHK','NEW SUBSY'
         LINE
         BIN   STATMOD
         BIN   SNB001
         BIN   SNB011
         BIN   SNB021
         BIN   SNB031
         BIN   SNB041
         BIN   SNB051
         LABEL 'STATUS MODIF','INTV REQUIRED','TU STAT A',       XM1356C
               'TRK ERR 1','MTE/LRCR','TU REJECT','NEW SUBSY'    XM1356
         LINE
         BIN   CONTUEND
         BIN   SNB002
         BIN   SNB012
         BIN   SNB022
         BIN   SNB032
         BIN   SNB042
         BIN   SNB052
         LABEL 'CONT UN END','BUS OUT CHK','TU STAT B','TRK ERR 2',    C
               'SKEW','TAPE IND','WRT TM CHK'                    XM1356
         LINE
         BIN   BUSY
         BIN   SNB003
         BIN   SNB013
         BIN   SNB023
         BIN   SNB033
         BIN   SNB043
         BIN   SNB053
         LABEL 'BUSY','EQUIP CHK','7 TRACK','TRK ERR 3',         S99231C
               'EDC/CRCR','RESERVED','PE ID BUR'                 S99231
         LINE
         BIN   CHANEND
         BIN   SNB004
         BIN   SNB014
         BIN   SNB024
         BIN   SNB034
         BIN   SNB044
         BIN   SNB054
         LABEL 'CHANNEL END','DATA CHECK','LOAD POINT','TRK ERR 4',    C
               'ENV CHECK','RESERVED','P COMP'                   XM1356
         LINE
         BIN   DEVEND
         BIN   SNB005
         BIN   SNB015
         BIN   SNB025
         BIN   SNB035
         BIN   SNB045
         BIN   SNB055
         LABEL 'DEVICE END','OVERRUN','WRITE STA','TRK ERR 5',         C
               '1600 BPI','DIAG TRK ERR','TACH CHK'
         LINE
         BIN   UNITCHK
         BIN   SNB006
         BIN   SNB016
         BIN   SNB026
         BIN   SNB036
         BIN   SNB046
         BIN   SNB056
         LABEL 'UNIT CHECK','WRD COUNT','FL PROT','TRK ERR 6',         C
               'BACKWARD','TU CHECK','FALSE END CHK'
         LINE   ,,SKIP=2
         BIN   UNITEXEP
         BIN   SNB007
         BIN   SNB017
         BIN   SNB027
         BIN   SNB037
         BIN   SNB047
         BIN   SNB057
         LABEL 'UNIT EXCEP','DT CNVTT','NOT CAPABLE',            S99231C
               'TRK ERR 7','RESERVED','ILLEGAL CMND','RPQ'       S99231
         LINE
         LABEL 'BYTE 6','BYTE 7','BYTE 8'
         LINE   ,,SKIP=1
         BIN   SNB060
         BIN   SNB070
         BIN   SNB080
         LABEL '7 TRACK','LAMP FAIL','RESERVED'                  S99231
         LINE
         BIN   SNB061
         BIN   SNB071
         BIN   SNB081
         LABEL 'SHORT GAP','LEFT COL CHK','FEED THRU'
         LINE
         BIN   SNB062
         BIN   SNB072
         BIN   SNB082
         LABEL 'DUAL DEN','RHT COL CHK','RESERVED'
         LINE
         BIN   SNB063
         BIN   SNB073
         BIN   SNB083
         LABEL 'ALT DEN','READY RES','END VEL CHK'               XM1356
         LINE  (32,17),(18,17)
         BIN   SNB074
         BIN   SNB084
         LABEL 'DSE','RDBK NOT DET'                              XM1356
         LINE  (15,17),(1,17)
         ROUTINE SNB060,MODEL
         BIN   SNB075
         BIN   SNB085
         LABEL 'MODEL','RESERVED','ST VEL CHK'
         LINE  (32,17),(18,17)
         BIN   SNB076
         BIN   SNB086
         LABEL 'RESERVED','RESERVED'
         LINE  ,,SKIP=1
         BIN   SNB077
         BIN   SNB087
SDRLAB1  LABEL 'RESERVED','RESERVED'                             XM1356
SDRENT1  LINE  ,(1,92),SKIP=2
         LABEL 'SDR AREA','DEVICE DEPENDENT INFORMATION'
         LINE  (15,23),(1,23),SKIP=1
         ROUTINE NOISE,ONEBYTE
         ROUTINE CCOMPARE,RGHTHALF
         ROUTINE EXP,RGHTHALF
         ROUTINE SPARES,DONOTHNG
         ROUTINE BLKLENG,TWOBYTES
         LABEL 'NOISE','RESERVED','END VEL CHK','',              XM1356C
               'BLOCK LENGTH'                                    XM1356
         LINE
         ROUTINE RWVRC,ONEBYTE
         ROUTINE WRTTMCHK,LEFTHALF
         ROUTINE EARLNDRD,LEFTHALF
         BIN   PEIDCHK,0
         ROUTINE TEMPRDS,ONEBYTE
         LABEL 'VRC','WRT TM CHK','RDBK NOT DET','PE ID CHK',    XM1356C
               'TEMP RDS'
         LINE
         ROUTINE MTELRCR,ONEBYTE
         ROUTINE WRTTMCHK,RGHTHALF
         ROUTINE EARLNDRD,RGHTHALF
         ROUTINE TEMPWRTS,DONOTHNG
         ROUTINE TEMPWRTS,ONEBYTE
         LABEL 'MTE/LRCR','P COMP','ST VEL CHK','','TEMP WRTS'   XM1356
         LINE  (15,1),(1,23)
         ROUTINE EDCCRC,ONEBYTE
         ROUTINE SPARES,ADD21
         ROUTINE PARTREC,LEFTHALF
         ROUTINE SPARES,ADD21
         ROUTINE SLWNDRD,LEFTHALF
         ROUTINE SPARES,ADD13
         ROUTINE SPARES,ADD5
         BIN   PARITY
         ROUTINE TRKINERR,SETBINA
         ROUTINE SPARES,ADD21
         ROUTINE SPARES,DONOTHNG
         ROUTINE SIOCNT,TWOBYTES
         LABEL 'EDC/CRCR','TACH CHK','RESERVED','TRK IN ERR',          C
               'SIO COUNT'
         LINE  (15,23),(1,23)
         ROUTINE ENVCKVRC,ONEBYTE
         ROUTINE PARTREC,RGHTHALF
         ROUTINE SLWNDRD,RGHTHALF
         ROUTINE ERASEGPS,DONOTHNG
         ROUTINE ERASEGPS,TWOBYTES
         LABEL 'ENV CHECK','FALSE END CHK','RESERVED','',        XM1356C
               'ERASE GAPS'                                      XM1356
         LINE
         ROUTINE OVERRUN,LEFTHALF
         ROUTINE ORDROP,LEFTHALF
         ROUTINE EXP2,RGHTHALF
         ROUTINE BACKWARD,ONEBYTE
         ROUTINE CLNRACTS,TWOBYTES
         LABEL 'OVERRUN','RESERVED','RESERVED','BACKWARD',             C
               'CLEAN ACTS'
         LINE
         ROUTINE OVERRUN,RGHTHALF
         ROUTINE ORDROP,RGHTHALF
         ROUTINE EXP3A,LEFTHALF
         ROUTINE BUSOCHK,LEFTHALF
         LABEL 'SKEW','FEED THRU','RESERVED','BUS OUT CHK'
         LINE
         ROUTINE CCOMPARE,LEFTHALF
         ROUTINE EXP,LEFTHALF
         ROUTINE EXP3A,RGHTHALF
         ROUTINE BUSOCHK,RGHTHALF
         LABEL 'RESERVED','RESERVED','RESERVED','TU POSN CHK'
LASTENT  LINE  ,(1,)
         LABEL ' '
         DC    X'FF'
         DC    X'0075'                                         @XA19935
         DC    XL2'0018'
         DC    XL2'0000'
         EJECT                                                 @XA19935
* THIS IS THE FULL OBR PRINTOUT FOR PERMANENT ERRORS                  *
LONGENT2 DC    X'01'
         DC    X'000B8B09'                                     @XA19935
LONGLAB2 LABEL ''
         LINE  (109,1),(1,76),SKIP=0
         ROUTINE SYSREL,CONVREL
         LABEL '--- RECORD ENTRY SOURCE - OBR          TYPE -OUTBOARD  C
                   MODEL-','SERIAL NO.            XXXX REL.'
         LINE  (67,21),,SKIP=2
         HEX   CPUID,0,2B
         HEX   CPUSER,0,3B
         LABEL ''
         LINE       (67,21),(2,12),SKIP=1
         LABEL 'DEVICE','TCU','TU','PRIMARY','SECONDARY','PROGRAM',    C
               'VOLUME','MODE','DATE','TIME'
         LINE  ,(2,12)
         LABEL 'TYPE','SERIAL','SERIAL','CUA','CUA','IDENTITY',        C
               'SERIAL','SET','DAY YR','HH MM SS.TH'
         LINE  (14,12),(1,),SKIP=2                             @XA19935
         ROUTINE TCSERIAL,MOVESER                              @XA19935
         ROUTINE SNB060,PUTMOD                                 @ZA01048
         HEX   PRIMCUA,0,3B
         HEX   SECONCUA,0,3B
         ROUTINE JOBID,JOBNAME
         ROUTINE VOLID,VOLNAME
         HEX   MODESET,0,1B
         ROUTINE YEAR,SETDATE
         HEX   TIME,1,4B
         LABEL ' 3420'
         LINE  ,(14,50),SKIP=1
         LABEL 'CC   DA    FL     CT','K    CA    US CS  CT'
         LINE  (14,3),(1,57),SKIP=2                            @XA19935
         HEX   COMMCODE,0,1B                                   @XA19935
         HEX   DATAADDR,0,3B                                   @XA19935
         ROUTINE SPARES,SPACE2                                 @XA19935
         HEX   FLAGS,0,1B                                      @XA19935
         HEX   RESERVED,0,1B                                   @XA19935
         HEX   CCWCOUNT,0,2B                                   @XA19935
         ROUTINE SPARES,ADD27                                  @XA19935
         HEX   CSWKEY,0,1B                                     @XA19935
         HEX   COMMADDR,0,3B                                   @XA19935
         ROUTINE SPARES,SPACE2B                                @XA19935
         HEX   ATTENBIT,0,1B                                   @XA19935
         HEX   CHSTAT,0,1B                                     @XA19935
         HEX   CSWCOUNT,0,2B                                   @XA19935
         LABEL 'FAILING CCW','CSW'
         LINE  (15,17),(1,17),SKIP=2
         LABEL 'UNIT STATUS','BYTE 0','BYTE 1','BYTE 2','BYTE 3',      C
               'BYTE 4','BYTE 5'
         LINE   ,,SKIP=1
         BIN   ATTEN
         BIN   SNB000
         BIN   SNB010
         BIN   SNB020
         BIN   SNB030
         BIN   SNB040
         BIN   SNB050
         LABEL 'ATTENTION','CMND REJECT','NOISE','TRK ERR 0',          C
               'R/W VRC','ALU CK/MP ERR','NEW SUBSY'             S99223
         LINE
         BIN   STATMOD
         BIN   SNB001
         BIN   SNB011
         BIN   SNB021
         BIN   SNB031
         BIN   SNB041
         BIN   SNB051
         LABEL 'STATUS MODIF','INTV REQUIRED','TU STAT A',       S99223C
               'TRK ERR 1','MTE/LRCR','REJECT TU','NEW SUBSY'    S99223
         LINE
         BIN   CONTUEND
         BIN   SNB002
         BIN   SNB012
         BIN   SNB022
         BIN   SNB032
         BIN   SNB042
         BIN   SNB052
         LABEL 'CONT UN END','BUS OUT CHK','TU STAT B','TRK ERR 2',    C
               'SKEW','TAPE INDICATE','WRT TM CHK'               S99223
         LINE
         BIN   BUSY
         BIN   SNB003
         BIN   SNB013
         BIN   SNB023
         BIN   SNB033
         BIN   SNB043
         BIN   SNB053
         LABEL 'BUSY','EQUIP CHK','7 TRACK','TRK ERR 3','EDC/CRCR',    C
               'WRT TR VRC','ID BURST CHK'                       S99223
         LINE
         BIN   CHANEND
         BIN   SNB004
         BIN   SNB014
         BIN   SNB024
         BIN   SNB034
         BIN   SNB044
         BIN   SNB054
         LABEL 'CHANNEL END','DATA CHECK','LOAD POINT','TRK ERR 4',    C
               'ENV/ECC','U-PGM DET/RES','ST RD CHK'             S99223
         LINE
         BIN   DEVEND
         BIN   SNB005
         BIN   SNB015
         BIN   SNB025
         BIN   SNB035
         BIN   SNB045
         BIN   SNB055
         LABEL 'DEVICE END','OVERRUN','WRITE STATUS',            S99223C
               'TRK ERR 5','1600 BPI TU','LOOP W/R',             S99223C
               'PARTIAL REC'                                     S99223
         LINE
         BIN   UNITCHK
         BIN   SNB006
         BIN   SNB016
         BIN   SNB026
         BIN   SNB036
         BIN   SNB046
         BIN   SNB056
         LABEL 'UNIT CHECK','WORD COUNT','FILE PROTECT',         S99223C
               'TRK ERR 6','BACKWARD','TU CHECK',                S99223C
               'EXC POST OR TM'                                  S99223
         LINE   ,,SKIP=2
         BIN   UNITEXEP
         BIN   SNB007
         BIN   SNB017
         BIN   SNB027
         BIN   SNB037
         BIN   SNB047
         BIN   SNB057
         LABEL 'UNIT EXCEP','DT CNVTT','NOT CAPABLE','TRK ERR 7',      C
               'C/P COMPARE','RES FOR RPQ','RES FOR RPQ'         S99223
         LINE
         LABEL 'BYTE 6','BYTE 7','BYTE 8','BYTE 9','BYTE 10','BYTE 11',C
               'BYTE 12'
         LINE   ,,SKIP=1
         BIN   SNB060
         BIN   SNB070
         BIN   SNB080
         BIN   SNB090
         BIN   SNB100
         BIN   SNB110
         BIN   SNB120
         LABEL '7 TRACK','LAMP FAIL','IBG DROP','6250 CORRECTN', S99223C
               'CMD ST REJ','B BUS LSR/MP1','B BUS LSR/MP2'      S99223
         LINE
         BIN   SNB061
         BIN   SNB071
         BIN   SNB081
         BIN   SNB091
         BIN   SNB101
         BIN   SNB111
         BIN   SNB121
         LABEL 'WRT HD CR','TP BOTTOM LF','FEED THRU/RES',       S99223C
               'VEL CHG','RESERVED','SPARE','SPARE'              S99223
         LINE
         BIN   SNB062
         BIN   SNB072
         BIN   SNB082
         BIN   SNB092
         BIN   SNB102
         BIN   SNB112
         BIN   SNB122
         LABEL 'DUAL DEN','TP BOTTOM RH','RESERVED','CBC',       S99223C
               'CTL ST REJ','XFER/LOIC','XFER/LOIC'              S99223
         LINE
         BIN   SNB063
         BIN   SNB073
         BIN   SNB083
         BIN   SNB093
         BIN   SNB103
         BIN   SNB113
         BIN   SNB123
         LABEL 'NOT 1600','RES-DOOR','EARLY BOR','CRC III',      S99223C
               'NO BOR/WTM','INST/HIIC','INST/HIIC'              S99223
         LINE  (32,17),(18,17)
         BIN   SNB074
         BIN   SNB084
         BIN   SNB094
         BIN   SNB104
         BIN   SNB114
         BIN   SNB124
         LABEL 'DSE','E END/SAGC CK','RLC/3803-2',               S99223C
               'WTM/DRC','U-PGM ERR','U-PGM ERR'                 S99223
         LINE  (15,17),(1,17)
         ROUTINE SNB060,MODEL
         BIN   SNB075
         BIN   SNB085
         BIN   SNB095
         BIN   SNB105
         BIN   SNB115
         BIN   SNB125
         LABEL 'MODEL','ERASE HD','SLOW BOR','RESERVED','TACH FAIL',   C
               'D BUS PTY','D BUS PTY'
         LINE  (32,17),(18,17)
         BIN   SNB076
         BIN   SNB086
         BIN   SNB096
         BIN   SNB106
         BIN   SNB116
         BIN   SNB126
         LABEL 'AIR PRES','SLOW END','RESERVED','RESERVED','RESERVED', C
               'RESERVED'
         LINE  ,,SKIP=2
         BIN   SNB077
         BIN   SNB087
         BIN   SNB097
         BIN   SNB107
         BIN   SNB117
         BIN   SNB127
         LABEL 'LOAD FAIL','VEL RETRY','CNTL UNIT RES','VEL CHK',      C
               'BOC ALU1/MP1','BOC ALU2/MP2'                     S99223
         LINE  ,(1,17)
         LABEL 'BYTE 17','BYTE 18','BYTE 19','BYTE 20','BYTE 21',      C
               'BYTE 22','BYTE 23'
         LINE  (15,17),(1,17),SKIP=1
         BIN   SNB170
         BIN   SNB180
         BIN   SNB190
         BIN   SNB200
         BIN   SNB210
         HEX   SNB22,0,1B
         HEX   SNB23,0,1B
         LABEL '2 CHN SW(MIS)','PWRCHK/AIRFLW','DE DR 7','DE DR F',    C
               'LD BUTTON','FRU ALU 1','FRU ALU 2'
         LINE
         BIN   SNB171
         BIN   SNB181
         BIN   SNB191
         BIN   SNB201
         BIN   SNB211
         LABEL 'FEATURE','RESERVED','DE DR 6','DE DR E','LFT REEL'
         LINE
         BIN   SNB172
         BIN   SNB182
         BIN   SNB192
         BIN   SNB202
         BIN   SNB212
         LABEL 'FEATURE','RESERVED','DE DR 5','DE DR D','RHT REEL'
         LINE
         BIN   SNB173
         BIN   SNB183
         BIN   SNB193
         BIN   SNB203
         BIN   SNB213
         LABEL 'FEATURE','RESERVED','DE DR 4','DE DR C','TAPE PRES'
         LINE
         BIN   SNB174
         BIN   SNB184
         BIN   SNB194
         BIN   SNB204
         BIN   SNB214
         LABEL 'EC OF CU','EC OF DRV','DE DR 3','DE DR B','REELS LDD'
         LINE
         BIN   SNB175
         BIN   SNB185
         BIN   SNB195
         BIN   SNB205
         BIN   SNB215
         LABEL 'EC OF CU','EC OF DRV','DE DR 2','DE DR A','LD RWD'
         LINE
         BIN   SNB176
         BIN   SNB186
         BIN   SNB196
         BIN   SNB206
         BIN   SNB216
         LABEL 'EC OF CU','EC OF DRV','DE DR 1','DE DR 9','LD COMPL'
         LINE   ,,SKIP=2
         BIN   SNB177
         BIN   SNB187
         BIN   SNB197
         BIN   SNB207
         BIN   SNB217
SDRLAB2  LABEL 'EC OF CU','EC OF DRV','DE DR 0','DE DR 8','LD CHK'
SDRENT2  LINE  ,(1,92),SKIP=2
         LABEL 'SDR AREA','DEVICE DEPENDENT INFORMATION'
         LINE  (15,23),(1,23),SKIP=1
         ROUTINE NOISE,ONEBYTE
         ROUTINE CCOMPARE,RGHTHALF
         ROUTINE EXP,RGHTHALF
         ROUTINE EXP3A,RGHTHALF                                  S99223
         ROUTINE BLKLENG,TWOBYTES
         LABEL 'NOISE','WRT TR VRC','EARLY BOR','CRC III',       S99223C
               'BLOCK LENGTH'
         LINE
         ROUTINE RWVRC,ONEBYTE
         ROUTINE WRTTMCHK,LEFTHALF
         ROUTINE EARLNDRD,LEFTHALF
         BIN   PEIDCHK,0
         ROUTINE TEMPRDS,ONEBYTE
         LABEL 'R/W VRC','WRT TM CHK','E END/SAGC CK',           S99223C
               'ID BURST CHK','TEMP RDS'                         S99223
         LINE
         ROUTINE MTELRCR,ONEBYTE
         ROUTINE WRTTMCHK,RGHTHALF
         ROUTINE EARLNDRD,RGHTHALF
         ROUTINE TEMPWRTS,DONOTHNG
         ROUTINE TEMPWRTS,ONEBYTE
         LABEL 'MTE/LRCR','ST RD CHK','SLOW BOR',' ','TEMP WRTS'
         LINE  (15,1),(1,23)
         ROUTINE EDCCRC,ONEBYTE
         ROUTINE SPARES,ADD21
         ROUTINE PARTREC,LEFTHALF
         ROUTINE SPARES,ADD21
         ROUTINE SLWNDRD,LEFTHALF
         ROUTINE SPARES,ADD13
         ROUTINE SPARES,ADD5
         BIN   PARITY
         ROUTINE TRKINERR,SETBINA
         ROUTINE SPARES,ADD21
         ROUTINE SPARES,DONOTHNG
         ROUTINE SIOCNT,TWOBYTES
         LABEL 'EDC/CRCR','PARTIAL REC','SLOW END','TRK IN ERR',       C
               'SIO COUNT'
         LINE  (15,23),(1,23)
         ROUTINE ENVCKVRC,ONEBYTE
         ROUTINE PARTREC,RGHTHALF
         ROUTINE SLWNDRD,RGHTHALF
         ROUTINE ERASEGPS,DONOTHNG
         ROUTINE ERASEGPS,TWOBYTES
         LABEL 'ENV/ECC','EXC POST OR TM','VEL RETRY',' ','ERASE GAPS'
         LINE
         ROUTINE OVERRUN,LEFTHALF
         ROUTINE ORDROP,LEFTHALF
         ROUTINE EXP2,LEFTHALF
         ROUTINE BACKWARD,ONEBYTE
         ROUTINE CLNRACTS,TWOBYTES
         LABEL 'OVERRUN','IBG DROP','6250 CORRECTN','BACKWARD',  S99223C
               'CLEAN ACTS'
         LINE
         ROUTINE OVERRUN,RGHTHALF
         ROUTINE ORDROP,RGHTHALF
         ROUTINE EXP2,RGHTHALF                                   S99223
         ROUTINE BUSOCHK,LEFTHALF
         LABEL 'SKEW','FEED THRU/RES','VEL CHG','BUS OUT CHK'    S99223
         LINE
         ROUTINE CCOMPARE,LEFTHALF
         ROUTINE EXP,LEFTHALF
         ROUTINE EXP3A,LEFTHALF
         ROUTINE BUSOCHK,RGHTHALF
         LABEL 'C/P COMPARE','RESERVED','CBC','ALU CK/MP ERR'    S99223
         LINE  ,(1,)                                           @XA19935
         LABEL ' '                                             @XA19935
         DC    X'FF'                                           @XA19935
         DC    XL2'0084'                                       @XA19935
         DC    XL2'0018'                                       @XA19935
         DC    XL2'0000'                                       @XA19935
EXIT     DC    X'FF'                                           @XA19935
         DC    XL2'0000'                                       @XA19935
         DC    XL2'0000'                                       @XA19935
         DC    XL2'0000'                                       @XA19935
LABLES   DS    0F
         LSTART
         END
