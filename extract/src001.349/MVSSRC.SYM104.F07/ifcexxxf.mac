         TITLE 'I F C E X X X F --- ARGONAUT OBR RECORD SUPPORT'
         MACRO
         BIN   ,
.*                                 &SYSLIST(&OP,1) - NAME OF LOG ITEM
.*                                      RECORD DSECT
.*                                 $SYSLIST(&OP,2) - NBR OF SPACES
.*                                      TO SKIP ON MULTIPLE
.*                                      PRINT OR NBR OF SPACES
.*                                      TO BACK UP FROM COLUMN FOR
.*                                      START OF PRINTING. THE LETTER
.*                                      B PRECEEDS THE NUMBER (B5) IF
.*                                      THE LATTER IS DESIRED. OMISSION
.*                                      OF THIS OPERAND FORCES OPTION 2
.*                                      WITH BACKUP SPACING EQUAL TO
.*                                 THE NUMBER OF BITS IN THE ITEM
.*                                 DEFINITION (VIA MACRO 'DSGEN').
.*                            A LIMIT OF 15 BITS IS IMPOSED FOR THE
.*                                 TOTAL NUMBER OF BITS TO PRINT.
         GBLA  &BITS(3000),&DB,&DT,&INITIAL
         GBLA  &ITEMITR,&ITEMFST(20),&ITEMNBR,&ITEMMDX
         GBLA  &ITEMNDX(3000),&ITEMXPT
         GBLA  &LABELNR,&LASTCC,&LB,&LBLCTR(100),&LPTR,&LT
         GBLA  &NRENTS,&SHIFT(3000)
         GBLB  &DIAGITF,&DIAGLIN,&DIAGSET,&DIAGTST,&FSW,&TEST
         GBLC  &CARRCON,&CSECT,&DSECT,&ITEM(3000)
         GBLC  &LABELS(3000),&LBL(100),&NRENTSX
         LCLB  &B,&SUB
         LCLA  &IBITS,&ISHIFT,&K
         LCLA  &TEMP,&T,&OP
         LCLC  &S,&ARG
          ACTR  500000
         AIF   (&DIAGTST EQ 0).NOMSG
         AIF   (&INITIAL EQ 0).NOMSG
         AIF   (&DIAGLIN EQ 1).NOMSG
         MNOTE '**NO LINE ASSOCIATED WITH THIS DATA**'
*****THE FOLLOWING GENERATED FOR TEST PURPOSES*****
*        LINE
         LINE
.NOMSG   ANOP
         AIF   (K'&SYSLIST(1) EQ K'&SYSLIST(1,1)).LOOP
&SUB     SETB  1
.LOOP    ANOP
&OP      SETA  &OP+1
&ARG     SETC  '&SYSLIST(&OP,1)'
         ITEMFIND &ARG
         AIF   (&ITEMXPT EQ 0).MEXIT
&ISHIFT  SETA  &SHIFT(&ITEMXPT)
&IBITS   SETA  &BITS(&ITEMXPT)
         AIF   (&SUB EQ 1).SUB00
         AIF   ('&SYSLIST(3)' EQ '').SETT
&IBITS   SETA  &SYSLIST(3)
         AGO   .SETT
.SUB00   AIF   ('&SYSLIST(&OP,3)' EQ '').SETT
&IBITS   SETA  &SYSLIST(&OP,3)
.SETT    ANOP
&T       SETA  &IBITS-1
&B       SETB  0
         AIF   (&IBITS GT 0 AND &IBITS LT 16).SUB0
         MNOTE '**NO. OF BITS OUTSIDE RANGE OF 1-15**'
.MEXIT   MEXIT
.SUB0    AIF   (&SUB EQ 1).SUBA
         AIF   ('&SYSLIST(2)' EQ '').BACKUP
&K       SETA  K'&SYSLIST(2)
&B       SETB  ('&SYSLIST(2)'(1,1) EQ 'B')
&S       SETC  '&SYSLIST(2)'(&B+1,&K-&B)
         AGO   .SUBB
.SUBA    ANOP
         AIF   ('&SYSLIST(&OP,2)' EQ '').BACKUP
&K       SETA  K'&SYSLIST(&OP,2)
&B       SETB  ('&SYSLIST(&OP,2)'(1,1) EQ 'B')
&S       SETC  '&SYSLIST(&OP,2)'(&B+1,&K-&B)
.SUBB    ANOP
&T       SETA  &S
.BACKUP  ANOP
&NRENTS  SETA  &NRENTS+1
         AIF   (&IBITS NE 1 OR &B NE 0).BIN2
&TEMP    SETA  &ISHIFT
         DC    AL.12(&SYSLIST(&OP,1)-&DSECT),XL.4'&TEMP'
         AGO   .OUT
         AIF   (&SUB EQ 1).BIN2
         AIF   ('&SYSLIST(2)' NE '').BIN3
         AGO   .BIN2A
.BIN2    AIF   ('&SYSLIST(&OP,2)' NE '').BIN3
.BIN2A   ANOP
&B       SETB  1
.BIN3    ANOP
         DC    AL.12(&SYSLIST(&OP,1)-&DSECT),XL.4'C'
         DC    BL.1'&B',AL.7(&T),AL.4(&IBITS),FL.4'&ISHIFT'
.OUT     ANOP
&ITEMXPT     SETA  0
         AIF   (&SUB EQ 0).OUTA
         AIF   (&OP LT N'&SYSLIST).LOOP
.OUTA    ANOP
         MEND
         MACRO
&NAME    DSGEN ,
.*                            THIS MACRO GENERATES ONE DSECT WORD
.*                                 FORMATTED FOR THE SUBJECT LOG RECORD
.*                                 EACH OPERAND HAS TWO SUB LISTS. THE
.*                                 FIRST IS THE NAME OF THE LOG ITEM
.*                                 WHILE THE SECOND IS THE # OF BITS TO
.*                                 ALLOCATE FOR THIS ITEM. ITEMS MUST
.*                                 BE DEFINED CONTIGUOUSLY WITHOUT GAPS
.*                                 UNUSED BIT GROUPS MUST BE GIVEN
.*                                 DUMMY NAMES. THE NAMES PROVIDED FOR
.*                                 THE LOG ITEMS MAY THEN BE USED IN
.*                                 THE CONVERSION MACRO INSTRUCTIONS.
         GBLA  &BITS(3000),&DB,&DT,&INITIAL
         GBLA  &ITEMITR,&ITEMFST(20),&ITEMNBR,&ITEMMDX
         GBLA  &ITEMNDX(3000),&ITEMXPT
         GBLA  &LABELNR,&LASTCC,&LB,&LBLCTR(100),&LPTR,&LT
         GBLA  &NRENTS,&SHIFT(3000)
         GBLB  &DIAGITF,&DIAGLIN,&DIAGSET,&DIAGTST,&FSW,&TEST
         GBLC  &CARRCON,&CSECT,&DSECT,&ITEM(3000)
         GBLC  &LABELS(3000),&LBL(100),&NRENTSX
         LCLB  &ONLY1,&CTIND
         LCLA  &START1,&START2,&END1,&END2
         LCLC  &SYMBOL,&EQUSYM
         LCLA  &OP,&COUNT,&BYTE,&EQUCNT
         ACTR  100000
         AIF   (&ITEMITR EQ 0).START
 MNOTE   20,'DSGEN MACRO OCCURRS AFTER ITEMSORT MACRO HAS BEEN ISSUED.'
         MEXIT
.START   AIF   (N'&SYSLIST(&OP+1) LT 3).LOOP
         AIF   ('&SYSLIST(&OP+1,3)' EQ 'EQU').LOOP     TEST FOR EQU
  AIF   ('&SYSLIST(&OP+1,3)' EQ '' OR '&SYSLIST(&OP+1,4)' EQ '').ERR1
         AIF   ('&SYSLIST(&OP+1,3)' GT '&SYSLIST(&OP+1,4)').ERR3
&START1  SETA  &SYSLIST(&OP+1,3)        GET START COUNT OF 1
&START2  SETA  &SYSLIST(&OP+1,4)        GET FIRST END COUNT
         AGO   .SET2A                   BRANCH AROUND
         AIF   ('&SYSLIST(&OP+1,5)' GT '&SYSLIST(&OP+1,6)').ERR3
.ERR1    MNOTE '**FIRST SYMBOL CONCATENATION INCOMPLETE**'
         MEXIT
.SET2A   AIF   ('&SYSLIST(&OP+1,5)' EQ ''AND '&SYSLIST(&OP+1,6)' EQ '' X
               ).SET2                   TEST FOR NO SECOND
  AIF   ('&SYSLIST(&OP+1,5)' EQ '' OR '&SYSLIST(&OP+1,6)' EQ '').ERR2
&END1    SETA  &SYSLIST(&OP+1,5)        GET START COUNT OF 2
&END2    SETA  &SYSLIST(&OP+1,6)        GET END COUNT OF 2
         AGO   .LOOP
.SET2    ANOP
&ONLY1   SETB  1                        INDICATE ONLY ONE CONCATENATION
         AGO   .LOOP
.ERR2    MNOTE '**SECOND SYMBOL CONCATENATION INCOMPLETE**'
         MEXIT
.ERR3    MNOTE '**START GREATER THAN END CONCATENATION**'
         MEXIT
.LOOP    ANOP
&OP      SETA  &OP+1
         AIF   (&OP GT N'&SYSLIST).DONE      TEST IF ALL DONE
&ITEMNBR SETA  &ITEMNBR+1
         AIF   ('&SYSLIST(&OP,2)' NE '').OK1
         MNOTE '**NULL BIT COUNT FIELD**'
         MEXIT
.OK1     ANOP
&SYMBOL  SETC  '&SYSLIST(&OP,1)'
         AIF   ('&SYMBOL' NE '').OK
*              *****     LOG ITEM SYMBOL NOT PROVIDED     *****
         AIF   ('&SYSLIST(&OP,3)' NE 'EQU').CNT
         AGO   .START                   GET NEXT
.OK      AIF   (N'&SYSLIST(&OP) LT 3).NO3    TEST FOR OLD FORMAT
         AIF   ('&SYSLIST(&OP,3)' EQ 'EQU').EQU   TEST FOR EQU
         AIF   (&ONLY1).OK2             TEST FOR ONLY ONE CONCAT
&SYMBOL  SETC  '&SYMBOL.&START1.&END1'       GET 1 AND 2 CONCAT
         AGO   .NO3                     BRANCH AROUND
.OK2     ANOP
&SYMBOL  SETC  '&SYMBOL.&START1'        GET 1 CONCATENATED
.NO3     ANOP
&SYMBOL  EQU   *+&BYTE
&ITEM(&ITEMNBR) SETC '&SYMBOL'          GET LABEL IN GLOBAL
&BITS(&ITEMNBR) SETA &SYSLIST(&OP,2)
&SHIFT(&ITEMNBR) SETA &COUNT-&BYTE*8
.CNT     ANOP
&CTIND   SETB  1                        SET COUNT INDICATOR
&COUNT   SETA  &COUNT+&SYSLIST(&OP,2)
&BYTE    SETA  &COUNT/8
         AIF   (N'&SYSLIST(&OP) LT 3).START  TEST FOR OLD FORMAT
         AIF   (&ONLY1).TSTST           TEST FOR ONLY ONE CONCAT
         AIF   (&END1 EQ &END2).TSTST   TEST FOR SECOND END
&END1    SETA  &END1+1                  INCREMENT COUNT
&OP      SETA  &OP-1                    DECREMENT INCREMENT
         AGO   .LOOP                    GENERATE NEXT
.TSTST   ANOP
         AIF   (&START1 EQ &START2).LPDONE   TEST FOR END
         AIF   (&ONLY1).NSET1           TEST FOR ONLY ONE CONCAT
&END1    SETA  &SYSLIST(&OP,5)          RE-INIT SECOND START COUNT
.NSET1   ANOP
&OP      SETA  &OP-1                    DECREMENT INDEX
&START1  SETA  &START1+1                INCREMENT FIRST COUNT
         AGO   .LOOP                    GO DO NEXT
.LPDONE  ANOP
&ONLY1   SETB  0                        CLEAR INDICATOR
         AGO   .START                   GO TEST FOR MORE SUB-LISTS
.DONE    AIF   (&COUNT-&COUNT/8*8 NE 0).ERR  TEST FOR MULTIPLE OF EIGHT
         AIF   (&CTIND EQ 0).END        NO DS IF NO COUNT
&COUNT   SETA  &COUNT/8                 GET NUMBER OF BYTES
&NAME    DS    &COUNT.C
.END     MEXIT
.ERR     MNOTE '**BIT COUNT FLDS DO NOT TOTAL MULTIPLE OF 8**'
         MEXIT
.EQU     AIF   ('&SYSLIST(&OP,4)' NE '').EQU1     TEST FOR NULL LABEL
.ERR4    MNOTE '**EQU OPERAND OMITTED OR NOT FOUND**'
         MEXIT
.EQU1    AIF   (&SYSLIST(&OP,2) LT 16).EQU2  COUNT OVER FIFTEEN
*****               THE FOLLOWING STATEMENT                *****
*****     NUMBER OF BITS EXCEED 15 - DO NOT USE AS BIN     *****
.EQU2    ANOP
&EQUCNT  SETA  0                        CLEAR COUNTER
&EQUSYM  SETC  '&SYSLIST(&OP,4)'        GET EQU OPERAND
.EQULOP  ANOP
&EQUCNT  SETA  &EQUCNT+1                INCREMENT INDEX
         AIF   ('&ITEM(&EQUCNT)' EQ '&EQUSYM').EQUOUT  LABEL FOUND?
         AIF   (&EQUCNT EQ &ITEMNBR).ERR4    ALL TESTED?
         AGO   .EQULOP                  NO-GET NEXT
.EQUOUT  ANOP
&ITEM(&ITEMNBR) SETC '&SYMBOL'          GET LABEL NAME
&BITS(&ITEMNBR) SETA &SYSLIST(&OP,2)    GET NUMBER OF BITS
&SHIFT(&ITEMNBR) SETA &SHIFT(&EQUCNT)   GET SHIFT COUNT
&SYMBOL  EQU   &EQUSYM                  THIS SYMBOL EQUATED
         AGO   .START                   RETURN FOR NEXT
         MEND
         MACRO
         CONVT ,
         GBLA  &BITS(3000),&DB,&DT,&INITIAL
         GBLA  &ITEMITR,&ITEMFST(20),&ITEMNBR,&ITEMMDX
         GBLA  &ITEMNDX(3000),&ITEMXPT
         GBLA  &LABELNR,&LASTCC,&LB,&LBLCTR(100),&LPTR,&LT
         GBLA  &NRENTS,&SHIFT(3000)
         GBLB  &DIAGITF,&DIAGLIN,&DIAGSET,&DIAGTST,&FSW,&TEST
         GBLC  &CARRCON,&CSECT,&DSECT,&ITEM(3000)
         GBLC  &LABELS(3000),&LBL(100),&NRENTSX
         LCLB  &SUB
         LCLA  &OP
         LCLA  &OFFSET,&OUT,&IN,&IND,&IBITS,&ISHIFT
.*
.*       CONVERT BINARY TO DECIMAL
.*             &NAME IS THE REFERENCE INTO THE DSECT RECORD
.*             &OUT    IS THE NUMBER OF CHARS TO BE PUT ONTO PRINT LINE
.*                                      DEFAULT IS FOUR MAXIMUM IS 8
.*             &IN       IS THE NUMBER OF BYTES AS INPUT
.*                                      ERROR DEFAULT IS 2 MAXIMUM IS 4
.*
         AIF   (&DIAGTST EQ 0).NOMSG
         AIF   (&INITIAL EQ 0).NOMSG
         AIF   (&DIAGLIN EQ 1).NOMSG
         MNOTE '**NO LINE ASSOCIATED WITH THIS DATA**'
*****THE FOLLOWING GENERATED FOR TEST PURPOSES*****
*        LINE
         LINE
.NOMSG   ANOP
         AIF   (K'&SYSLIST(1) EQ K'&SYSLIST(1,1)).LLOP
&SUB     SETB  1
.LLOP    ANOP
&OP      SETA  &OP+1
&OUT     SETA  4                        .BR NOT NULL ELSE SET TO 4
         AIF   (&SUB EQ 1).SUBA
         AIF   ('&SYSLIST(3)' EQ '').B  TEST FOR NULL INPUT
&OUT     SETA  &SYSLIST(3)             SET &OUT FROM INPUT
         AGO   .A
.SUBA    AIF   ('&SYSLIST(&OP,3)' EQ '').B
&OUT     SETA  &SYSLIST(&OP,3)          SET &OUT FROM INPUT
.A       AIF   (&OUT GT 0 AND &OUT LT 9).B   TEST RANGE
.AERR    MNOTE '*** BYTES OUT INCORRECTLY SPECIFIED DEFAULT USED ***'
&OUT     SETA  4
.B       AIF   (&SUB EQ 1).SUBB
         AIF   ('&SYSLIST(2)' EQ '').LOOP    BRANCH IF NULL
&IN      SETA  &SYSLIST(2)              .SET &IN FROM INPUT
         AGO   .BB
.SUBB    AIF   ('&SYSLIST(&OP,2)' EQ '').LOOP
&IN      SETA  &SYSLIST(&OP,2)          .SET &IN FROM INPUT
.BB      AIF   (&IN GT 0 AND &IN LT 5).D     TEST RANGE
.BERR    MNOTE '*** BYTES IN INCORRECTLY SPECIFIED DEFAULT USED ***'
&IN      SETA  2
         AGO   .D
.LOOP    ANOP                           .LOOP TO FIND &NAME IN DSECT
&IND     SETA  &IND+1                   .SET UP LOOP COUNTER
         AIF   ('&ITEM(&IND)' EQ '&SYSLIST(&OP,1)').FOUND
         AIF   (&IND LT &ITEMNBR).LOOP  .TEST FOR END OF DSECT
         MNOTE '*** LOG ITEM NOT DEFINED ***'
         MEXIT
.FOUND   ANOP
&IBITS   SETA  &BITS(&IND)              .SET UP NUMBER OF BITS SPEC
         AIF   (&IBITS-((&IBITS/8)*8) EQ 0).C  .TEST FOR MULTIPLE OF 8
         MNOTE '*** DATA NOT DEFINED A MULTIPLE OF 8 BITS ***'
         MEXIT
.C       ANOP
&IN      SETA  &IBITS/8                 .COMPUTE NUMBER OF BYTES
         AIF   (&IN LT 1 OR &IN GT 4).BERR  .TEST RANGE B IF IN ERROR
&ISHIFT  SETA  &SHIFT(&IND)             .SET UP FOR TEST OF BYTE BNDR
         AIF   (&ISHIFT EQ 0).D         .TEST FOR BYTE BNDRY
         MNOTE '*** DATA NOT ALIGNED ON A BYTE BOUNDARY ***'
         MEXIT
.*
.D       ANOP
&NRENTS  SETA  &NRENTS+1
         DC    AL.12(&SYSLIST(&OP,1)-&DSECT),AL.4(9)
         DC    X'&IN',X'&OUT'
&IND     SETA  0
         AIF   (&SUB EQ 0).OUTA
         AIF   (&OP LT N'&SYSLIST).LLOP
.OUTA    ANOP
         MEND
         MACRO
         ITEMFIND &ARG,&ITFDIAG=
         GBLA  &BITS(3000),&DB,&DT,&INITIAL
         GBLA  &ITEMITR,&ITEMFST(20),&ITEMNBR,&ITEMMDX
         GBLA  &ITEMNDX(3000),&ITEMXPT
         GBLA  &LABELNR,&LASTCC,&LB,&LBLCTR(100),&LPTR,&LT
         GBLA  &NRENTS,&SHIFT(3000)
         GBLB  &DIAGITF,&DIAGLIN,&DIAGSET,&DIAGTST,&FSW,&TEST
         GBLC  &CARRCON,&CSECT,&DSECT,&ITEM(3000)
         GBLC  &LABELS(3000),&LBL(100),&NRENTSX
         LCLA  &A,&B,&X,&I
         LCLC  &C1,&C2,&S
         ACTR  100000
&ITEMXPT SETA  0                  INDICATE ITEM NOT FOUND.
         AIF   ('&ARG' NE '').NORM
         AIF   ('&ITFDIAG' EQ 'OFF'  OR  '&ITFDIAG' EQ 'ON').DIAGSET
  MNOTE 0,'ITEMFIND - OPERAND (&ITFDIAG) INVALID FOR ITFDIAG KEYWORD.'
         MEXIT
.DIAGSET ANOP
&DIAGITF SETB  ('&ITFDIAG' EQ 'ON')
         MEXIT
.NORM    AIF   (&ITEMITR GT 0).SORTED
         ITEMSORT
.SORTED  ANOP
&I       SETA  &ITEMITR           COMPUTED ITTERATION COUNT.
&X       SETA  &ITEMMDX           COMPUTED MAXIMUM INDEX.
&C1      SETC  '&ARG'             ISOLATE SEARCH ARGUMENT.
&C1      SETC  '&C1'.'       '(1,8-K'&C1) PAD TO FULL 8 CHARACTERS.
.SRCHUP  ANOP
&A       SETA  &A+&X              CURRENT TABLE SUBSCRIPT + INDEX.
&S       SETC  '+'
         AIF   (&A  GT &ITEMNBR  AND  NOT &DIAGITF).SRCHDN1
         AIF   (&A  LE &ITEMNBR).SRCH00
&C2      SETC  '*-OVER-*'
&I       SETA  &I-1               DECREMENT ITTERATION COUNTER.
&X       SETA  &X/2               HALVE INDEX VALUE.
 MNOTE *,'&ARG - &C2   ITRCTR = &I   PTR = &A&S &X'
         AIF   (&I GE 0).SRCHDWN  IF ITTERATION COUNT NOT EXPIRED.
.NOFIND  MNOTE  20,' ITEMFIND FAILED FOR NAME  &C1  '
         MEXIT
.SRCH00  ANOP
&I       SETA  &I-1               DECREMENT ITTERATION COUNTER.
         AIF   (&I LT 0).NOFIND   IF COUNT HAS GONE TO ZERO.
&X       SETA  &X/2               HALVE INDEX VALUE.
&B       SETA  &ITEMNDX(&A)       GET SUBSCRIPT FROM INDEX TABLE.
&C2      SETC  '&ITEM(&B)'.'       '(1,8-K'&ITEM(&B))  PAD COMPARAND.
         AIF   (NOT &DIAGITF).COMPARE
 MNOTE *,'&ARG - &C2   ITRCTR = &I   PTR = &A&S &X   POS = &B'
.COMPARE AIF   ('&C1' LT '&C2').SRCHDWN   ARGUMENT LOWER, MOVE DOWN.
         AIF   ('&C1' GT '&C2').SRCHUP    ARGUMENT HIGHER, MOVE UP.
&ITEMXPT SETA  &B                 FOUND. SET INDEX POINTER FOR RETURN.
&ITEMFST(&I+1)  SETA  &ITEMFST(&I+1)+1
         MEXIT
.SRCHDWN ANOP
&A       SETA  &A-&X              CURRENT POINTER MINUS INDEX VALUE.
&S       SETC  '-'
         AIF   (&A LE &ITEMNBR).SRCH00    IF WITHIN BOUNDS OF TABLE.
.SRCHDN1 ANOP
&I       SETA  &I-1               DECREMENT ITTERATION COUNTER.
&X       SETA  &X/2               HALVE INDEX VALUE.
         AIF   (&I GE 0).SRCHDWN  IF ITTERATION COUNT NOT EXPIRED.
         MNOTE  20,' ITEMFIND FAILED FOR NAME  &C1  '
         MEND
         MACRO
         ITEMSORT  &DUMMY
         GBLA  &BITS(3000),&DB,&DT,&INITIAL
         GBLA  &ITEMITR,&ITEMFST(20),&ITEMNBR,&ITEMMDX
         GBLA  &ITEMNDX(3000),&ITEMXPT
         GBLA  &LABELNR,&LASTCC,&LB,&LBLCTR(100),&LPTR,&LT
         GBLA  &NRENTS,&SHIFT(3000)
         GBLB  &DIAGITF,&DIAGLIN,&DIAGSET,&DIAGTST,&FSW,&TEST
         GBLC  &CARRCON,&CSECT,&DSECT,&ITEM(3000)
         GBLC  &LABELS(3000),&LBL(100),&NRENTSX
         LCLA  &R,&ZI,&I,&A1,&A2,&TEMP
         LCLB  &SR,&GOTO,&TB
         LCLB   &SW(4000)
         LCLC  &C1,&C2
         ACTR   200000
&A1      SETA  0
         AIF   (&ITEMITR EQ 0).LOOP0   TEST FOR RE-ENTRY.
 MNOTE   0,'ITEMSORT MACRO OCCURRS MORE THAN ONCE. TABLE NOT RESORTED.'
         MEXIT
.LOOP0   ANOP
&A1      SETA  &A1+1
&ITEMNDX(&A1) SETA &A1
         AIF   (&A1 LT &ITEMNBR).LOOP0
         AIF   (&ITEMNBR LT 2).MEXIT
&A1      SETA  &ITEMNBR/2         HALF OF TOTAL ENTRIES.
&A2      SETA  0
.LOOP1   ANOP
&A2      SETA  &A2+1
&SW(&A2) SETB  1                  SET FIRST HALF OF SWITCHES TO 1.
         AIF   (&A2 LT &A1).LOOP1
.LOOP2   ANOP
&A2      SETA  &A2+1
&SW(&A2) SETB  0                  SET SECOND HALF TO ZERO.
         AIF   (&A2 LT &ITEMNBR).LOOP2
&R       SETA  0                  SET R TO FIRST TRIAL ITEM.
&ZI      SETA  &ITEMNBR-1         SET ZI TO LAST ITEM.
&I       SETA  &ZI-1
.T3      ANOP
&SR      SETB  (&SW(&R+1))        GET FLAG, WHICH WAY TO GO?
&R       SETA  (&R*2)+1+&SR       R=2R+(1 OR 2)
         AIF   (&R LE &I).T3
.T4      ANOP
&R       SETA  (&R-1)/2           R=(R-1)/2
&SR      SETB  (&SW(&R+1))        GET SUBTREE SELECT FLAG.
         AIF   (&SR EQ 0).T7
         AIF   (&GOTO EQ 0).T5
.T7      ANOP
&A1      SETA  &ITEMNDX(&R+1)
&A2      SETA  &ITEMNDX(&ZI+1)
&C1      SETC  '&ITEM(&A1)'.'       '(1,8-K'&ITEM(&A1))
&C2      SETC  '&ITEM(&A2)'.'       '(1,8-K'&ITEM(&A2))
         AIF   ('&C1' LT '&C2').T8
.T9      ANOP
&TEMP    SETA  &ITEMNDX(&R+1)     Z(R) TO TEMP.
&TB      SETB  (&SW(&R+1))
&ITEMNDX(&R+1) SETA &ITEMNDX(&ZI+1)    Z(I) TO Z(R)
&SW(&R+1) SETB (&SW(&ZI+1))
&ITEMNDX(&ZI+1) SETA &TEMP        TEMP TO Z(I)
&SW(&ZI+1) SETB (&TB)
&SR      SETB  (&SR EQ 0)
&SW(&R+1) SETB (&SR)
.T8      AIF   (&R GT 0).T4
&GOTO    SETB  1                  SET 'GO TO' T7
&ZI      SETA  &ZI-1
&I       SETA  &I-1
         AIF   (&I GE 0).T3
.MEXIT   ANOP
&ITEMITR SETA 1
&ITEMMDX SETA 1
.ITRLOOP ANOP
&ITEMITR SETA &ITEMITR+1
&ITEMMDX SETA &ITEMMDX+&ITEMMDX
         AIF  (&ITEMMDX LT &ITEMNBR).ITRLOOP
&ITEMITR SETA &ITEMITR-1
&ITEMMDX SETA &ITEMMDX/2
&A1      SETA &ITEMNBR
&A2      SETA &ITEMMDX
&TEMP    SETA &ITEMITR
 MNOTE *,' ITEMS = &A1, MAX INDEX = &A2, ITTERATION COUNT = &TEMP'
         MEXIT
.T5      ANOP
&TEMP    SETA  &ITEMNDX(&R+1)     Z(R) TO TEMP.
&TB      SETB  (&SW(&R+1))
&ITEMNDX(&R+1) SETA &ITEMNDX(&ZI+1)    Z(I) TO Z(R)
&SW(&R+1) SETB (&SW(&ZI+1))
&ITEMNDX(&ZI+1) SETA &TEMP        TEMP TO Z(I)
&SW(&ZI+1) SETB (&TB)
&SR      SETB  (&SR EQ 0)
&SW(&R+1) SETB (&SR)
         AGO   .T3
         MEND
           MACRO
&NAME    LABEL &LABEL1,&LABEL2,&LABEL3,&LABEL4,&LABEL5,&LABEL6,        C
               &LABEL7,&LABEL8
.*                                 THIS MACRO ALLOWS LABELS TO
.*                                 BE SPECIFIED FOR A GIVEN LINE. THE
.*                                 LABELS SHOULD BE ENCLOSED IN QUOTA-
.*                                 TION MARKS. THE COLUMN AND LINE END
.*                                 CONTROLS WILL BE INSERTED BY THE
.*                                 MACRO. OMITTED OPERANDS MEAN NO
.*                                 LABEL REQUIRED FOR RESPECTIVE
.*                                 COLUMN.
         GBLA  &BITS(3000),&DB,&DT,&INITIAL
         GBLA  &ITEMITR,&ITEMFST(20),&ITEMNBR,&ITEMMDX
         GBLA  &ITEMNDX(3000),&ITEMXPT
         GBLA  &LABELNR,&LASTCC,&LB,&LBLCTR(100),&LPTR,&LT
         GBLA  &NRENTS,&SHIFT(3000)
         GBLB  &DIAGITF,&DIAGLIN,&DIAGSET,&DIAGTST,&FSW,&TEST
         GBLC  &CARRCON,&CSECT,&DSECT,&ITEM(3000)
         GBLC  &LABELS(3000),&LBL(100),&NRENTSX
         LCLC  &MARGIN,&TACK
         LCLC  &TEXT
         LCLA  &OP,&K,&START,&NRCHAR,&REMAIN
         AIF   (&INITIAL EQ 0).DIAGCLR
         AIF   (&DIAGTST EQ 0).DIAGCLR
         AIF   (&DIAGLIN EQ 1).DIAGCLR
         MNOTE '**NO LINE ASSOCIATED WITH PREVIOUS LABEL**'
***** THE FOLLOWING GENERATED FOR TEST PURPOSES *****
*        LINE
         LINE
.DIAGCLR ANOP
&DIAGSET SETB  0
&DIAGLIN SETB  0
&MARGIN  SETC  '*'
         AIF   ('&NAME' EQ '').LOOPOUT
&LPTR    SETA  &LPTR+1
&LBL(&LPTR) SETC '&NAME'
&LBLCTR(&LPTR) SETA &LABELNR+1
.LOOPOUT ANOP
&OP      SETA  &OP+1
&K       SETA  K'&SYSLIST(&OP)
         AIF (&K GE 2).NORM
&K       SETA  2
.NORM    ANOP
&START   SETA  2
         AIF (&OP LT N'&SYSLIST).NOTLAST
&MARGIN  SETC  '$'
.NOTLAST ANOP
&NRCHAR  SETA  8
&TACK    SETC  ''
.LOOPIN  ANOP
&REMAIN  SETA  &K-&START
         AIF (&REMAIN GE 8).MORE
&TACK    SETC  '&MARGIN'
&NRCHAR  SETA  &REMAIN
.MORE    ANOP
&TEXT    SETC  ''
         AIF (&REMAIN EQ 0).ENDTEXT
&TEXT    SETC  '&SYSLIST(&OP)'(&START,&NRCHAR)
.ENDTEXT ANOP
&LABELNR SETA  &LABELNR+1
&LABELS(&LABELNR) SETC '&TEXT'.'&TACK'
&START   SETA  &START+8
         AIF ('&TACK' EQ '').LOOPIN
         AIF ('&TACK' EQ '*').LOOPOUT
         MEND
         MACRO
&NAME    LINE  &DATA,&LABEL,&SKIP=
.*                            THIS MACRO ESTABLISHES THE MARGINS OR
.*                                 COLUMN SETTINGS FOR EACH LINE. IT
.*                                 GENERATES NECESSARY CARRIAGE CONTROL
.*                                 ENTRIES. LASTLY IT DETERMINES THE
.*                                 NUMBER OF ENTRIES ASSOCIATED WITH
.*                                 THE PREVIOUS LINE AND STORES THAT #
.*                                 INTO THE APPROPRIATE BYTE.
.*                            &DATA(1) - CHARACTER POSITION TO BEGIN
.*                                 DATA.
.*                            &DATA(2) - # OF SPACES BETWEEN SUCCESSIVE
.*                                 DATA COLUMN STARTING CHARACTERS.
.*                            &LABEL(1) - CHAR. POS. TO BEGIN LABELS.
.*                            &LABEL(2) - # SPACES BETWEEN LINE'S LABEL
.*                                 STARTING CHARACTERS.
.*                            &SKIP= - # OF LINES TO ADVANCE CARRIAGE
.*                                 TO BEGIN NEXT PRINTED LINE.
.*                            NEW ENTRIES ARE GENERATED ONLY WHEN
.*                                 NECESSARY. OMISSION OF ITEMS MEANS
.*                                 THEY HAVE NOT CHANGED SINCE PREVIOUS
.*                                 SETTINGS. A LINE MACRO IS REQUIRED
.*                                 FOR EACH PRINTED LINE. IF NO SETTING
.*                                 CHANGES ARE REQUIRED ALL OPERANDS
.*                                 ARE OMITTED IN WHICH CASE ONLY THE
.*                                 # OF ENTRIES FOR THE PREVIOUS LINE
.*                                 IS COMPUTED. THIS MACRO MUST BE THE
.*                                 FIRST MACRO INSTRUCTION ISSUED FOR
.*                                 THE SUBJECT LINE
         GBLA  &BITS(3000),&DB,&DT,&INITIAL
         GBLA  &ITEMITR,&ITEMFST(20),&ITEMNBR,&ITEMMDX
         GBLA  &ITEMNDX(3000),&ITEMXPT
         GBLA  &LABELNR,&LASTCC,&LB,&LBLCTR(100),&LPTR,&LT
         GBLA  &NRENTS,&SHIFT(3000)
         GBLB  &DIAGITF,&DIAGLIN,&DIAGSET,&DIAGTST,&FSW,&TEST
         GBLC  &CARRCON,&CSECT,&DSECT,&ITEM(3000)
         GBLC  &LABELS(3000),&LBL(100),&NRENTSX
         LCLA  &S
         AIF   (&INITIAL EQ 0 OR &DIAGTST EQ 0).DIAGSET
         AIF   (&DIAGSET EQ 0).DIAGSET
         MNOTE '**NO LABEL ASSOCIATED WITH LAST SET**'
***** THE FOLLOWING GENERATED FOR TEST PURPOSES *****
*        LABEL '%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%'
               LABEL '%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%'
.DIAGSET ANOP
&DIAGSET SETB  1
&DIAGLIN SETB  1
&NAME    DS    0C
         AIF   (&INITIAL EQ 0).FIRSTLN
         LINEND
         AGO   .NTFIRST
.FIRSTLN ANOP
&NRENTSX SETC  'N&SYSNDX'
&INITIAL SETA  1
N&SYSNDX EQU   *
.NTFIRST ANOP
         DC    AL1(0)
         AIF   ('&DATA(1)' EQ '').CKDTABS
         AIF   (&DATA(1) EQ &DB).CKDTABS
&DB      SETA  &DATA(1)
         AGO   .AA
.CKDTABS AIF   ('&DATA(2)' EQ '').NCDATA
         AIF   (&DATA(2) EQ &DT).NCDATA
         AGO   .CC
.AA      AIF   ('&DATA(2)' EQ '').BB
         AIF   (&DATA(2) EQ &DT).BB
.CC      ANOP
&DT      SETA  &DATA(2)
.BB      DC    XL2'FFFE'
         DC    FL1'&DB'
         DC    FL1'&DT'
&NRENTS  SETA  &NRENTS+1
.NCDATA  ANOP
         AIF   ('&LABEL(1)' EQ '').CKLTABS
         AIF   (&LABEL(1) EQ &LB).CKLTABS
&LB      SETA  &LABEL(1)
         AGO   .AAA
.CKLTABS AIF   ('&LABEL(2)' EQ '').NCLABEL
         AIF   (&LABEL(2) EQ &LT).NCLABEL
         AGO   .CCC
.AAA     AIF   ('&LABEL(2)' EQ '').BBB
         AIF   (&LABEL(2) EQ &LT).BBB
.CCC     ANOP
&LT      SETA  &LABEL(2)
.BBB     DC    XL2'FFFF'
         DC    FL1'&LB'
         DC    FL1'&LT'
&NRENTS  SETA  &NRENTS+1
.NCLABEL ANOP
         AIF   ('&SKIP' NE '').CONT
         AIF   (&TEST EQ 0).NOCHANG
         AGO   .DEFALTA
.CONT    ANOP
         AIF   (&TEST EQ 0).AB
         AIF   ('&SKIP' EQ 'E').AB
&S       SETA  &SKIP
.DEFAULT ANOP
         AIF   (&SKIP EQ &LASTCC).DEFALTA
         ORG   &CARRCON+3
         DC    AL.3(0),AL.2(&S),AL.3(1)
         ORG
&LASTCC  SETA  &S
.DEFALTA ANOP
&TEST    SETB  0
         AGO   .DD
.AB      AIF   ('&SKIP' NE 'E').ABB
A&SYSNDX DC    X'FFFB8B00'              EJECT
&LASTCC  SETA  184
&TEST    SETB  1
         AGO   .ABC
.ABB     AIF   (&SKIP EQ &LASTCC).NOCHANG
A&SYSNDX DC    XL2'FFFB'
         DC    AL.3(0),AL.2(&SKIP),AL.3(1)
         DC    AL.3(0),AL.2(&SKIP),AL.3(1)
&LASTCC  SETA  &SKIP
&TEST    SETB  1
.ABC     ANOP
&CARRCON SETC  'A&SYSNDX'
&NRENTS  SETA  &NRENTS+1
.DD      ANOP
.NOCHANG ANOP
         MEND
         MACRO
         LINEND ,
.*                                 THIS MACRO IS USED ONLY BY THE LINE
.*                                 MACRO TO SET THE NUMBER OF ENTRIES
.*                                 ASSOCIATED WITH EACH LINE.
         GBLA  &BITS(3000),&DB,&DT,&INITIAL
         GBLA  &ITEMITR,&ITEMFST(20),&ITEMNBR,&ITEMMDX
         GBLA  &ITEMNDX(3000),&ITEMXPT
         GBLA  &LABELNR,&LASTCC,&LB,&LBLCTR(100),&LPTR,&LT
         GBLA  &NRENTS,&SHIFT(3000)
         GBLB  &DIAGITF,&DIAGLIN,&DIAGSET,&DIAGTST,&FSW,&TEST
         GBLC  &CARRCON,&CSECT,&DSECT,&ITEM(3000)
         GBLC  &LABELS(3000),&LBL(100),&NRENTSX
         ORG   &NRENTSX
         DC    FL1'&NRENTS'
         ORG
&NRENTS  SETA  0
B&SYSNDX EQU   *
&NRENTSX SETC  'B&SYSNDX'
         MEND
         MACRO
         LSTART ,
.*                            THIS MACRO IS ISSUED WHEN THE LABEL AREA
.*                                 OF THE TABLE IS TO BEGIN.
         GBLA  &BITS(3000),&DB,&DT,&INITIAL
         GBLA  &ITEMITR,&ITEMFST(20),&ITEMNBR,&ITEMMDX
         GBLA  &ITEMNDX(3000),&ITEMXPT
         GBLA  &LABELNR,&LASTCC,&LB,&LBLCTR(100),&LPTR,&LT
         GBLA  &NRENTS,&SHIFT(3000)
         GBLB  &DIAGITF,&DIAGLIN,&DIAGSET,&DIAGTST,&FSW,&TEST
         GBLC  &CARRCON,&CSECT,&DSECT,&ITEM(3000)
         GBLC  &LABELS(3000),&LBL(100),&NRENTSX
         LCLA  &NDX,&CTR
         ACTR  500000
         AIF   (&DIAGTST EQ 0).NODIAG
         AIF   (&DIAGSET EQ 0).NODIAG
         MNOTE '**NO LABEL ASSOCIATED WITH LAST SET**'
***** THE FOLLOWING GENERATED FOR TEST PURPOSES *****
*        LABEL '%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%'
               LABEL '%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%'
.NODIAG  ANOP
         LINEND
&CTR     SETA  1
.LOOP    ANOP
&NDX     SETA  &NDX+1
         AIF   (&LBLCTR(&CTR) NE &NDX).NOLBL
&LBL(&CTR) DC  C'&LABELS(&NDX)'
&CTR     SETA  &CTR+1
         AGO   .LOOPCTL
.NOLBL   ANOP
         DC    C'&LABELS(&NDX)'
.LOOPCTL AIF   (&NDX LT &LABELNR).LOOP
         MEND
         MACRO
&NAME    ROUTINE &LOGITEM,&RNAME
         GBLA  &BITS(3000),&DB,&DT,&INITIAL
         GBLA  &ITEMITR,&ITEMFST(20),&ITEMNBR,&ITEMMDX
         GBLA  &ITEMNDX(3000),&ITEMXPT
         GBLA  &LABELNR,&LASTCC,&LB,&LBLCTR(100),&LPTR,&LT
         GBLA  &NRENTS,&SHIFT(3000)
         GBLB  &DIAGITF,&DIAGLIN,&DIAGSET,&DIAGTST,&FSW,&TEST
         GBLC  &CARRCON,&CSECT,&DSECT,&ITEM(3000)
         GBLC  &LABELS(3000),&LBL(100),&NRENTSX
         AIF   (&DIAGTST EQ 0).NOMSG
         AIF   (&INITIAL EQ 0).NOMSG
         AIF   (&DIAGLIN EQ 1).NOMSG
         MNOTE '**NO LINE ASSOCIATED WITH THIS ROUTINE**'
*****THE FOLLOWING GENERATED FOR TEST PURPOSES*****
*        LINE
         LINE
.NOMSG   ANOP
&NAME    DC    AL.12(&LOGITEM-&DSECT),XL.4'D'
         DC    AL2(&RNAME-&CSECT)
&NRENTS  SETA  &NRENTS+1
         MEND
         MACRO
         SPECIAL &ROUTINE,&PARAM,&SPACE=
.*                            THIS MACRO GENERATES A SPECIAL ROUTINE
.*                                 ENTRY TO BE PROCESSED BY THE SUM. M.
.*                            &ROUTINE - SYMBOL ON SPECIAL ROUTINE EWT.
.*                            &PARAM - AN 8 BIT BINARY REPRESENTATION
.*                                 TO OCCUPY THE 'MASK' FIELD BUT TO BE
.*                                 INTERPRETED AS AN ARGUMENT OF THE
.*                                 SPECIAL ROUTINE.
.*                            &SPACE - THE NUMBER OF 2BYTE COUNTERS TO
.*                                 ALLOCATE FOR REQUIRED PROCESSING.
         GBLC  &CSECT
         GBLA  &COUNTR
         LCLA  &ADD
         DC    AL1(128)
         DC    BL.8'&PARAM'
         DC    AL2(&ROUTINE-&CSECT)
         DC    AL2(&COUNTR)
&ADD     SETA  1
         AIF   ('&SPACE' EQ '').NORM
&ADD     SETA  &SPACE
.NORM    ANOP
&COUNTR  SETA  &COUNTR+&ADD
         MEND
         MACRO
         HEX   ,
.*                            THIS MACRO FACILITATES GENERATION OF THE
.*                                 TABLE ENTRIES SPECIFYING HEX TYPE
.*                                 CONVERSIONS.
.*                            &SYSLIST(&OP,1) - NAME OF DATA ITEM TO BE
.*                                 CONVERTED
.*                            &SYSLIST(&OP,2) - # OF SPACES TO SKIP ON
.*                                 MULTIPLE PRINT OR NBR OF SPACES TO
.*                                 BACK UP FROM COLUMN FOR START OF
.*                                 PRINTING. THE LETTER B PRECEEDS THE
.*                                 NUMBER (B8) IF THE LATTER OPTION IS
.*                                 DESIRED. OMISSION OF THIS OPERAND
.*                                 FORCES OPTION 2 WITH BACKUP SPACING
.*                                 EQUAL TO THE NUMBER OF BYTES SPECI-
.*                                 FIED BY THE NEXT OPERAND (TWICE THIS
.*                                 NUMBER IF SUFFIX IS EXPLICITLY OR
.*                                 IMPLICITLY B).
.*                            &SYSLIST(&OP,3) - NUMBER OF BYTES TO
.*                                 PROCESS. THIS NUMBER IS SUFFIXED
.*                                 WITH AN L,R, OR B TO STIPULATE
.*                                 PRINTING OF THE LEFT HALF, RIGHT
.*                                 HALF, OR BOTH HALVES OF THE BYTE
.*                                 RESPECTIVELY. OMISSION OF THIS
.*                                 OPERAND DEFAULTS TO B WITH THE NUM-
.*                                 BER OF BYTES EQUAL TO THE ITEM LNGTH
.*                            A NEW ENTRY IS GENERATED ONLY WHEN NECES-
.*                                 SARY. THIS MACRO MUST BE THE FIRST
.*                                 MACRO INSTRUCTION ISSUED FOR THE
.*                                 SUBJECT LINE(S).
         GBLA  &BITS(3000),&DB,&DT,&INITIAL
         GBLA  &ITEMITR,&ITEMFST(20),&ITEMNBR,&ITEMMDX
         GBLA  &ITEMNDX(3000),&ITEMXPT
         GBLA  &LABELNR,&LASTCC,&LB,&LBLCTR(100),&LPTR,&LT
         GBLA  &NRENTS,&SHIFT(3000)
         GBLB  &DIAGITF,&DIAGLIN,&DIAGSET,&DIAGTST,&FSW,&TEST
         GBLC  &CARRCON,&CSECT,&DSECT,&ITEM(3000)
         GBLC  &LABELS(3000),&LBL(100),&NRENTSX
         LCLB  &B,&SUB
         LCLA  &IBITS,&ISHIFT,&K,&T,&CODE,&BYTESP,&OP
         LCLC  &S,&LETTER,&ARG
       ACTR  500000
         AIF   (&DIAGTST EQ 0).NOMSG
         AIF   (&INITIAL EQ 0).NOMSG
         AIF   (&DIAGLIN EQ 1).NOMSG
         MNOTE '**NO LINE ASSOCIATED WITH THIS DATA**'
*****THE FOLLOWING GENERATED FOR TEST PURPOSES*****
*        LINE
         LINE
.NOMSG   ANOP
         AIF   (K'&SYSLIST(1) EQ K'&SYSLIST(1,1)).LOOP
&SUB     SETB  1
.LOOP    ANOP
&OP      SETA  &OP+1
&ARG     SETC  '&SYSLIST(&OP,1)'
         ITEMFIND  &ARG
         AIF   (&ITEMXPT EQ 0).MEXIT
.FOUND   ANOP
&ISHIFT  SETA  &SHIFT(&ITEMXPT)
&IBITS   SETA  &BITS(&ITEMXPT)
         AIF   (&ISHIFT EQ 0 OR &ISHIFT EQ 4).ALIGN
.ERR     MNOTE '**DATA NOT ALLIGNED ON HEX OR BYTE BOUNDARY**'
.MEXIT   MEXIT
.ALIGN   ANOP
&CODE    SETA  1
         AIF   (&SUB EQ 1).SUBA
&K       SETA  K'&SYSLIST(3)
         AGO   .SUBB
.SUBA    ANOP
&K       SETA  K'&SYSLIST(&OP,3)
.SUBB    ANOP
         AIF   (&K EQ 1).ERR3
         AIF   (&IBITS-(&IBITS/4)*4 EQ 0).OK
         MNOTE '**BIT LENGTH SPECIFICATION INCONSISTENT WITH CONTROL**'
         MEXIT
.OK      AIF   (&SUB EQ 1).SUBC
         AIF   ('&SYSLIST(3)' EQ '').USEDEFN
&LETTER  SETC  '&SYSLIST(3)'(&K,1)
&S       SETC  '&SYSLIST(3)'(1,&K-1)
         AGO   .SUBD
.SUBC    ANOP
         AIF   ('&SYSLIST(&OP,3)' EQ '').USEDEFN
&LETTER  SETC  '&SYSLIST(&OP,3)'(&K,1)
&S       SETC  '&SYSLIST(&OP,3)'(1,&K-1)
.SUBD    ANOP
&BYTESP  SETA  &S
         AIF   ('&LETTER' EQ 'B').BOTH
         AIF   ('&LETTER' EQ 'L').LEFT
         AIF   ('&LETTER' EQ 'R').RIGHT
.ERR3    MNOTE '**PARAMETER 3 INCOMPLETE-DSGEN DEFINITION USED**'
         AGO   .USEDEFN
.RIGHT   ANOP
&CODE    SETA  2
         AGO   .L
.LEFT    ANOP
&CODE    SETA  1
         AGO   .L
.USEDEFN ANOP
&BYTESP  SETA  &IBITS/8
.BOTH    AIF   (&ISHIFT NE 0).ERR
&CODE    SETA  3
&T       SETA  &BYTESP*2-1
&S       SETC  '&T'
.OK2     AIF   (&ISHIFT EQ 0).L
&CODE    SETA  2
.L       ANOP
&B       SETB  1
         AIF   (&SUB EQ 1).SUBE
         AIF   ('&SYSLIST(2)' EQ '').BACKUP
&K       SETA  K'&SYSLIST(2)
&B       SETB  ('&SYSLIST(2)'(1,1) EQ 'B')
&S       SETC  '&SYSLIST(2)'(&B+1,&K-&B)
         AGO   .SUBF
.SUBE    ANOP
         AIF   ('&SYSLIST(&OP,2)' EQ '').BACKUP
&K       SETA  K'&SYSLIST(&OP,2)
&B       SETB  ('&SYSLIST(&OP,2)'(1,1) EQ 'B')
&S       SETC  '&SYSLIST(&OP,2)'(&B+1,&K-&B)
.SUBF    ANOP
.BACKUP  ANOP
&NRENTS  SETA  &NRENTS+1
         AIF   (&BYTESP GT 0 AND &BYTESP LT 16).SUB0
         MNOTE '**NO. OF BYTES OUTSIDE RANGE OF 1-15**'
         MEXIT
.SUB0    AIF   (&SUB EQ 1).SUBG
         DC    AL.12(&SYSLIST(1)-&DSECT),XL.4'A'
         AGO   .SUBH
.SUBG    ANOP
         DC    AL.12(&SYSLIST(&OP,1)-&DSECT),XL.4'A'
.SUBH    ANOP
         DC    BL.1'&B',FL.7'&S',AL.4(&BYTESP),FL.4'&CODE'
.OUT     ANOP
&ITEMXPT     SETA  0
         AIF   (&SUB EQ 0).OUTA
         AIF   (&OP LT N'&SYSLIST).LOOP
.OUTA    ANOP
         MEND
         MACRO
         SUM   &LOGITEM,&MASK
.*                            THIS MACRO GENERATES A NORMAL EDIT ENTRY
.*                                 FOR PROCESSING BY THE SUMMARY MODULE
.*                            &LOGITEM - NAME OF DATA ITEM TO BE SUMMED
.*                            &MASK - BYTE MASK FOR BITS TO BE TESTED.
.*                                 THIS OPERAND SHOULD BE OMITTED FOR
.*                                 SINGLE BIT ITEMS IN WHICH CASE THE
.*                                 MASK WILL BE SET ACCORDING TO THE
.*                                 OFF BYTE BIT DISPLACEMENT OF THE
.*                                 ITEM AS DEFINED BY THE MACRO 'DSGEN'
         GBLA  &COUNTR,&ITEMNBR,&BITS(3000),&SHIFT(3000)
         GBLC  &ITEM(3000),&DSECT
         LCLA  &IBITS,&NDX,&ISHIFT,&M,&BITNBR
.LOOP    ANOP
&NDX     SETA  &NDX+1
         AIF   ('&ITEM(&NDX)' EQ '&LOGITEM').FOUND
         AIF   (&NDX LT &ITEMNBR).LOOP
         MNOTE *,'LOGITEM NOT FOUND'
         MEXIT
.FOUND   ANOP
&ISHIFT  SETA  &SHIFT(&NDX)
&IBITS   SETA  &BITS(&NDX)
         AIF   (&IBITS EQ 1).FORM1      TEST FOR OLD FORM
         AIF   ('&MASK' NE '').FORM1    TEST FOR MASK
         AIF   (&IBITS+&ISHIFT GT 8).MSG     TEST FOR MORE THAN EIGHT
         DC    AL.1(0),AL.3(&ISHIFT),AL.4(&IBITS)
         DC    AL1(0)
         AGO   .ITEM
.MSG     MNOTE '**BITS GREATER THAN 8**'
         MEXIT
.FORM1   ANOP
         DC    AL1(0)
         AIF   ('&MASK' EQ '').FORM
         DC    B'&MASK'
         AGO   .ITEM
.FORM    ANOP
&BITNBR  SETA  &ISHIFT-7
&BITNBR  SETA  0-&BITNBR
&M       SETA  1
.LOOP2   ANOP
         AIF   (&BITNBR EQ 0).GOTIT
&M       SETA  &M*2
&BITNBR  SETA  &BITNBR-1
         AGO   .LOOP2
.GOTIT   ANOP
         DC    AL1(&M)
.ITEM    DC    AL2(&LOGITEM-&DSECT)
         DC    AL2(&COUNTR)
&COUNTR  SETA  &COUNTR+1
         MEND
* THIS MODULE SUPPORTS ARGONAUT DEVICE --- SUPPORT CODE =
         GBLC  &DSECT,&CSECT
&CSECT   SETC  'IFCEXXXF'
&DSECT   SETC  'RECORD'
IFCEXXXF CSECT
*****          D S E C T   G E N E R A T I O N   E N T R I E S    *****
RECORD   DSECT
         DS    0F
         DSGEN (CLASRC,8),              RECORD TYPE                    X
               (SYSREL,8),              SYSTEM & RELEASE LEVEL         X
               (SWITCH,8,0,3),          SWITCHES(4 OF EM)              X
               (RCDCNT,8),              COUNT & MULTI PART INDICATION  X
               (SPARE1,8),              SPARE                          X
               (DATE,32),               DATE OF RECORD                 X
               (TIME,32),               TIME OF RECORD                 X
               (VERNO,8),               MACHINE VERSION                X
               (CPUSER,24),             CPU SERIAL NO.                 X
               (CPUID,16),              CPU IDENTIFIER                 X
               (SPARE2,16),             SPARE                          X
               (JOBID,64),              JOB IDENTIFICATION             X
               (FAILCCW,64)             FAILING CCW
         ORG   FAILCCW
         DSGEN (CCWCC,8),               COMMAND CODE     0-7           X
               (CCWCA,24),              COMMAND ADDRESS  8-31          X
               (CCWFL,8),               FLAGS            32-36         X
               (CCWXX,8),               NOT USED         37-47         X
               (CCWCT,16)               BYTE COUNT       48-63
         DSGEN (CSW,64)                 CSW CONTENTS
         ORG   CSW
         DSGEN (CSWKEY,8),              KEY              0-7           X
               (CSWCA,24),              COMMAND ADDRESS  8-31          X
               (CSWATT,1),              ATTENTION        32            X
               (CSWSTM,1),              STATUS MODIFER   33            X
               (CSWCUE,1),              CTL UNIT END     34            X
               (CSWBSY,1),              BUSY             35            X
               (CSWCE,1),               CHANNEL END      36            X
               (CSWDE,1),               DEVICE END       37            X
               (CSWUC,1),               UNIT CHECK       38            X
               (CSWUE,1),               UNIT EXCEPTION   39            X
               (CSWPCI,1),              PROG CTL INTERRUPTION  40      X
               (CSWSILI,1),             INCORRECT LENGTH 41            X
               (CSWPC,1),               PROG CHECK       42            X
               (CSWPCHK,1),             PROTECTION CHECK 43            X
               (CSWCDC,1),              CHANNEL DATA CHECK     44      X
               (CSWCCC,1),              CHANNEL CONTROL CHECK  45      X
               (CSWICC,1),              INTERFACE CONTROL CHECK 46     X
               (CSWCHC,1),              CHAINING CHECK          47     X
               (CSWCNT,16)              COUNT            48-63
         DSGEN (DEVDEPC,8),             DEV DEPENDENT DATA COUNT       X
               (,8),                                                   X
               (SECUA,16),        SECONDARY CHANNEL & UNIT ADDR        X
               (DEVTYPE,32),            DEVICE TYPE BYTES              X
               (SDRCNT,8),              NUMBER OF SDR BYTES IN RECORD  X
               (,8),                                                   X
               (PCUA,16),         PRIMARY CHANNEL & UNIT ADDR          X
               (IORETRY,16),            NUMBER OF I/O RETRIES ATTEMPTEDX
               (SENSCNT,16),            SENSE BYTE FIELD LENGTH        X
               (SDRCT,4,0,19)         SDR COUNTERS (2)         @ZM40435
         DSGEN (SNS00,1,0,7),           SENSE BYTE  1                  ?
               (SNS01,1,0,7),           SENSE BYTE  2                  ?
               (SNS02,1,0,7),           SENSE BYTE  3                  ?
               (SNS03,1,0,7),           SENSE BYTE  4                  ?
               (SNS04,1,0,7),           SENSE BYTE  5                  ?
               (SNS05,1,0,7),           SENSE BYTE  6                  ?
               (SNS06,1,0,7),           SENSE BYTE  7                  ?
               (SNS07,1,0,7),           SENSE BYTE  8                  ?
               (SNS08,1,0,7),           SENSE BYTE  9                  ?
               (SNS09,1,0,7),           SENSE BYTE 10                  ?
               (SNS10,1,0,7),           SENSE BYTE 11                  ?
               (SNS11,1,0,7),           SENSE BYTE 12                  ?
               (SNS12,1,0,7),           SENSE BYTE 13                  ?
               (SNS13,1,0,7),           SENSE BYTE 14                  ?
               (SNS14,1,0,7),           SENSE BYTE 15                  X
               (SNS15,1,0,7),           SENSE BYTE 16                  X
               (SNS16,1,0,7),           SENSE BYTE 17                  X
               (SNS17,1,0,7),           SENSE BYTE 18                  X
               (SNS18,1,0,7),           SENSE BYTE 19                  X
               (SNS19,1,0,7),           SENSE BYTE 20                  X
               (SNS20,1,0,7),           SENSE BYTE 21                  X
               (SNS21,1,0,7),           SENSE BYTE 22                  X
               (SNS22,1,0,7),           SENSE BYTE 23                  X
               (SNS23,1,0,7)            SENSE BYTE 24
         DSGEN (SNS00,8,EQU,SNS000)
         DSGEN (SNS01,8,EQU,SNS010)
         DSGEN (SNS02,8,EQU,SNS020)
         DSGEN (SNS03,8,EQU,SNS030)
         DSGEN (SERIALNO,16,EQU,SNS180)
         DSGEN (FORMAT,8,EQU,SNS040)
         ORG   JOBID
         DSGEN (SHORTDT,32),            SHORT DEV TYPE                 X
               (SHORTCNT,8),            SHORT SDR COUNT                X
               (,8),                                                   X
               (SHORTCUA,16),     SHORT CHAN & UNIT ADDR               X
               (SSDRCT,4,0,19)        SHORT SDR COUNTERS (20)  @ZM40435
IFCEXXXF CSECT
         USING *,R9                     SET UP BASE REG
         USING RECORD,R2                SET UP DSECT PTR
         DC    A(ENTRY)                 LINE/LABEL SETS ADDR
         DC    C'IFCEXXXF'
R9PTR    DC    F'0'
LABELPTR DC    F'0'
WORK     DC    D'0'                     WORK SPACE
REGSAVE  DC    4F'0'                    REGISTER SAVE AREA
RELTAB   EQU   *                        SYSTEM RELEASE CONVERSION TBL
         DC    CL4'  OS'
         DC    CL4' DOS'
         DC    CL4' VS1'
         DC    CL4'  VM'
         DC    CL4' VS2'
         DC    3CL4'    '
SUPPORT  EQU   1                        COUNT OF DEVICES SUPPORTED
XDEVTBL  EQU   *
         DC    X'080E',C'3800'     ARGONAUT CLASS/TYPE CVT
R0       EQU   0
R1       EQU   1
R2       EQU   2                        DSECT PTR
R3       EQU   3                        PRINT BUFFER PTR
R4       EQU   4                        RECORD PTR
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9                        MODULE BASE REG
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
L0       EQU   0                        ZERO
L1       EQU   1                        ONE
L2       EQU   2                        TWO
L3       EQU   3                        THREE
L4       EQU   4                        FOUR
L5       EQU   5                        FIVE
L6       EQU   6                        SIX
L7       EQU   7                        SEVEN
L8       EQU   8
L9       EQU   9
L16      EQU   16
L23      EQU   23                       TWENTY THREE
L24      EQU   24
L28      EQU   28                       TWENTY EIGHT
X20      EQU   X'20'
X30      EQU   X'30'
L46      EQU   46                       FOURTY SIX
BOP      EQU   X'20'                    BUS OUT PARITY BIT
INTV     EQU   X'40'                    INTERVENTION REQD BIT
EQUIP    EQU   X'10'                    EQUIPMENT CHECK BIT
UC       EQU   X'02'                    CSW UNIT CHECK BIT
X00      EQU   X'00'
X81      EQU   X'81'
X89      EQU   X'89'
X4F      EQU   X'4F'
X8F      EQU   X'8F'
XF0      EQU   X'F0'
TEMP     EQU   X'60'              TEMPORARY UNIT CHECK
X10      EQU   X'10'
X9F      EQU   X'9F'
X8A      EQU   X'8A'
X8C      EQU   X'8C'
X8B      EQU   X'8B'
X8E      EQU   X'8E'
X7F      EQU   X'7F'
BLANK    EQU   C' '               CHARACTER BLANK
ARG1     EQU   C'1'
ARG2     EQU   C'2'
ARG3     EQU   C'3'
ARG4     EQU   C'4'
ARG5     EQU   C'5'
ARG6     EQU   C'6'
ARG7     EQU   C'7'
SHRTLINE DC    A(SHORTLN-4)
SHRTLABL DC    A(SHORTLB-1)
DUMPLNA  DC    A(DUMPLN-4)
DUMPLBA  DC    A(DUMPLB-1)
NONE     DC    C'NONE  '
CHARS    DC    C'0123456789ABCDEF'
UNIV     DC    C'UNIVERSAL'
TEMPY    DC    C'TEMPORARY'
PERM     DC    C'PERMANENT'
UNKWN    DC    C'UNKNOWN'
         EJECT
CONVREL  STM   R5,R8,REGSAVE       SAVE REGS
         SR    R6,R6               CLEAR REG
         IC    R6,L0(R4)           GET REL & SYS VALUES
         SRDL  R6,L5               SAVE REL NO. IN R7
         SLL   R6,L2               MULT SYS VALUE BY 2
         L     R8,LABELPTR         GET LABEL POINTER
         LA    R6,RELTAB(R6)       INDEX INTO TABLE OF SYSTEMS
         MVC   L0(L4,R8),L0(R6)    MOVE SYS NAME INTO LABEL
         SR    R6,R6               CLEAR REG
         SLDL  R6,L5               RETRIEVE REL NO.
         LTR   R6,R6               IS IT ZERO ?
         BZ    NOREL               YES, BRANCH
         CVD   R6,WORK             NO, CONVERT IT
         UNPK  L0(L2,R3),WORK+L6(L2) UNPACK IT INTO PRINT BUFFER
         MVZ   L1(L1,R3),L0(R3)    MOVE IN PROPER ZONE
         B     RETURN              BRANCH
NOREL    MVC   L0(L4,R3),NONE      MOVE IN NONE
         B     RETURN              BRANCH
*
TEMPBIT  TM    SWITCH1,TEMP        TEMPORARY ERROR ?
         MVC   LABEL1+45(9),PERM   NO,MOVE IN PERMANENT
         BZR   R14                RETURN
         MVC   LABEL1+45(9),TEMPY  YES,MOVE IN TEMPORARY
         BR    R14                 RETURN
*
JOBNAME  MVC   L0(L8,R3),L0(R4)    MOVE JOB NAME TO PRT BUFFER
         BR    R14                 RETURN
*
SETDATE  UNPK  WORK(L8),L1(L3,R4)  UNPACK DATE
         MVC   L0(L3,R3),WORK+L5   PUT IT IN THE BUFFER
         MVC   L5(L2,R3),WORK+L3
         BR    R14                 RETURN
*
UNITCK   TM    CSWUC,UC            ANY SENSE INFO PRESENT ?
         BOR   R14                 YES, RETURN
         STM   R5,R8,REGSAVE       NO, SAVE REGS
DUMP     L     R5,DUMPLNA          SET UP POINTERS
         L     R6,DUMPLBA          V
         STM   R5,R6,R9PTR         V
         B     RETURN              AND RETURN
*
CONVTYPE STM   R5,R8,REGSAVE       SAVE REGS
         LA    R5,SUPPORT          BCT COUNT, CONV DEV TYPE TBL
         LA    R4,L2(R4)           R4 POINTS TO CLASS/TYPE 2 BYTES
         LA    R6,XDEVTBL          ADDR OF CLASS/TYPE XLATE TABLE
NEXT     CLC   L0(L2,R4),L0(R6)    IS THIS CLASS/TYPE WE LOOKIN FO
         BNE   BUMP                NO, BRANCH
         MVC   L0(L4,R3),L2(R6)    YES, MOVE CLASS/TYPE TO BUFF
         B     RETURN              RETURN
BUMP     LA    R6,L6(R6)           BUMP CONVERT TBL PTR
         BCT   R5,NEXT             AND KEEP LOOKING
         MVC   L0(L7,R3),UNKWN     ELSE UNKNOWN RECORD TYPE
         B     RETURN              RETURN AND KEEP GOING
*
SPACER1  LA    R3,L1(R3)           BUMP PTR
         BR    R14                 RETURN
SPACER7  LA    R3,L7(R3)           BUMP PTR
         BR    R14                 RETURN
*
*                                  CONVERT S D R COUNTERS
*
CVTLFT   STM   R5,R8,REGSAVE       SAVE REGS
         SR    R6,R6               CLEAR R6
         IC    R6,L0(R4)           GET COUNTER
         SRL   R6,L4               GET RID OF 4 LOW BITS
         B     SDRCVT              GO CONVERT IT
CVTRHT   STM   R5,R8,REGSAVE       SAVE REGS
         IC    R6,L0(R4)           GET COUNTER
         SLL   R6,L28
         SRL   R6,L28              DROP OFF 4 HI BITS
SDRCVT   CVD   R6,WORK             CONVERT TO DECIMAL
         UNPK  L0(L2,R3),WORK+L6(L2) UNPACK IT
         MVZ   L1(L1,R3),L0(R3)    PUT ON ZONE BITS
         LTR   R6,R6               TEST FOR ZERO VALUE         @Y17CSWT
         BNZ   RETURN              (NO - RETURN)               @Y17CSWT
         MVI   L0(R3),BLANK        YES, SUPPRESS 1ST ZERO      @Y17CSWT
         B     RETURN              RETURN
*
SHORT    TM    SWITCH1,X20         SHORT OBR RECORD ?
         BNOR  R14                 NO, BRANCH
         STM   R5,R8,REGSAVE       SAVE REGS
         L     R5,SHRTLINE         YES, SET UP POINTERS
         L     R6,SHRTLABL         V
         STM   R5,R6,R9PTR         V
SKIPIT   SR    R15,R15             INDICATE NO PRINT REQD.
RETURN   LM    R5,R8,REGSAVE       RESTORE REGS
SKIP     BR    R14                 RETURN
*
SETCPUNO STM   R5,R8,REGSAVE       SAVE REGS
         SR    R5,R5               CLEAR R5
         IC    R5,L0(R4)           GET CPU TYPE
         SLL   R5,L8
         IC    R5,L1(R4)
         LTR   R5,R5               IS IT ZERO ?
         BNZ   RETURN              NO, RETURN
         LA    R6,L46              BACK UP POINTER 46 BYTES
         SR    R3,R6
         MVC   L0(L9,R3),UNIV      SAY MODEL=UNIVERSAL
         MVC   L23(L6,R3),NONE     SAY SERIAL=NONE
         B     RETURN
*
SETHEX   STM   R5,R8,REGSAVE       SAVE REGS
         IC    R7,L0(R4)           GET CHAR FROM RECORD
SETHEX1  LA    R8,CHARS            PTR TO CHARACTERS HEX
         SLL   R7,L24              MOVE IT TO HI OF R7
         SR    R6,R6               ZERO R6
         SLDL  R6,L4               MOVE 4 BITS TO R6
         AR    R6,R8               COMPUTE OFFSET
         MVC   L0(L1,R3),L0(R6)    MOVE CHAR TO PRT BUFF
         SR    R6,R6               ZERO R6
         SLDL  R6,L4               MOVE NEXT 4 BITS TO R6
         AR    R6,R8               COMPUTE OFFSET
         MVC   L1(L1,R3),L0(R6)    MOVE CHAR TO PRT BUFF+1
         B     RETURN              EXIT
SETHEX2  IC    R7,WORK             GET UNKNOWN ERR CODE
         B     SETHEX1             GO CONVERT HEX TO EBCDIC
*
RECTYPE  CLI   L0(R2),X30          OBR RECORD
         BER   R14                 YES, EXIT
         STM   R5,R8,REGSAVE       SAVE REGS
         LA    R5,T00CLINE-L4      IFCET00C LINE
         LA    R6,T00CLABL-L1      IFCET00C LINE
         STM   R5,R6,R9PTR         SET TO NEW LINE
         B     RETURN              EXIT
*
LABELTYP STM   R5,R8,REGSAVE       SAVE REGS
         MVI   ARGNO,ARG7          MOVE IN FORMAT 7 NO.
         TM    L0(R4),INTV         INTERVENTION REQD
         BZ    FORMAT20            NO, GO TEST FOR BUS OUT PARITY
         CLI   L4(R4),X9F          SENSE BYTE 4 GT X'9F'
         BH    RETURN              YES, USE FORMAT 7
         MVI   ARGNO,ARG3          FORMAT 3
         CLI   L4(R4),X4F          SENSE BYTE 4 : X'4F'
         BH    RETURN              HIGH, GO OUT FORMAT 3
         MVI   ARGNO,ARG2          FORMAT 2
         TM    L3(R4),EQUIP        BYTE 3/BIT 3 ON?
         BO    RETURN              YES, USE FORMAT 2
         MVI   ARGNO,ARG1          FORMAT1
         B     RETURN              EXIT
*
FORMAT20 LA    R5,F20L             ADDRESS OF BUS OUT LABELS
         ST    R5,LABELPTR         STORE FOR OUTPUT
         TM    L0(R4),BOP          BUS OUT PARITY
         BO    RETURN              YES, USE FORMAT 7
         TM    L0(R4),EQUIP        EQUIPMENT CHECK?
         BZ    DUMP                NO, NO VALID CODE--EXIT
*
**       FORMAT 10 RECORDS
*
         LA    R5,F10L             ADDRESS OF EQUIP CHK LABELS
         ST    R5,LABELPTR         STORE FOR OUTPUT
         CLI   L4(R4),X'9F'        SENSE BYTE 4 GT X'9F'
         BH    RETURN              USE FORMAT 7
         MVI   ARGNO,ARG6          FORMAT 6
         CLI   L4(R4),X8A          '8A' TYPE RECORD
         BE    RETURN              YES, EXIT
         MVI   ARGNO,ARG5          FORMAT 5
         CLI   L4(R4),X89          '89' FORMAT RECORD
         BE    RETURN              YES, EXIT
         MVI   ARGNO,ARG4          FORMAT 4
         CLI   L4(R4),X8C          '8C' FORMAT RECORD?
         BE    RETURN
         MVI   ARGNO,ARG3          FORMAT 3
         CLI   L4(R4),X8B          '8B' FORMAT RECORD?
         BE    RETURN              YES, EXIT
         CLI   L4(R4),X8E          '8E' FORMAT RECORD?
         BNL   RETURN              YES, EXIT
         MVI   ARGNO,ARG7          FORMAT 7
         CLI   L4(R4),X7F          '7F' FORMAT RECORD?
         BH    RETURN              YES, EXIT
         MVI   ARGNO,ARG3          FORMAT 3
         CLI   L4(R4),X4F          '4F' FORMAT RECORD?
         BH    RETURN              YES,EXIT
         MVI   ARGNO,ARG2          FORMAT 2
         TM    L3(R4),EQUIP        BYTE 3/BIT 3 ON?
         BO    RETURN              YES, EXIT
         MVI   ARGNO,ARG1          FORMAT 1
         B     RETURN              EXIT
         EJECT
         DS    0F
ENTRY    EQU   *
         DC    XL4'00'
         DC    XL4'00'
         DC    A(LABELS)
         DC    H'0'
         LINE  (1,1),(1,1),SKIP=1
         ROUTINE SWITCH1,TEMPBIT
         ROUTINE CLASRC,RECTYPE
         LABEL ''
         LINE  SKIP=E                   EJECT
         LABEL ''
         LINE  (115),(1,88),SKIP=0
         HEX   CPUSER,0,3B
         ROUTINE CPUID,SETCPUNO
LABEL1   LABEL '---RECORD ENTRY TYPE - UNIT OR CHANNEL CHECK XXXXXXXXX X
                     SOURCE OUTBOARD        CPU ','MODEL - '
         LINE  (96),(104),SKIP=1
         HEX   CPUID,0,2B
         LABEL 'SERIAL NO.'
         LINE  (17,1),(4,1),SKIP=1
         ROUTINE SYSREL,CONVREL
         LABEL 'XXXX RELEASE'
         LINE  (81),(25,23),SKIP=1
         ROUTINE JOBID,JOBNAME
         ROUTINE SPARE1,SHORT
         LABEL 'DAY YEAR','HH MM SS TH      JOB IDENTITY'
         LINE  (25,23),(18,23),SKIP=2
         ROUTINE DATE,SETDATE
         HEX   TIME,1,4B
         HEX   JOBID,0,8B
         LABEL 'DATE -','TIME -'
         LINE  (33,71),(2,77),SKIP=1
         ROUTINE DEVTYPE,CONVTYPE
         LABEL 'DEVICE TYPE','STATISTICAL DATA COUNTERS'
         LINE  (33),(2),SKIP=1
         HEX   PCUA,0,2B
         LABEL 'PRIMARY CHANNEL UNIT ADDRESS'
         LINE  (33,73),(2,78),SKIP=1
         HEX   SECUA,0,2B
         ROUTINE SDRCT2,CVTLFT     COUNTER NO. 1
         LABEL 'ALTERNATE CHANNEL UNIT ADDRESS','TEMP CHL DATA CK'
         LINE  (106),(80),SKIP=1
         ROUTINE SDRCT3,CVTRHT     COUNTER NO. 2
         LABEL 'TEMP CHL CTL CK'
         LINE  SKIP=0
         ROUTINE SDRCT4,CVTLFT     COUNTER NO. 3
         LABEL 'TEMP INTF CTL CK'
         LINE  ,(19,29),SKIP=1
         LABEL 'CC   DA   FL     CT','K    CA   US CS  CT'
         LINE  (19,3),(5,38),SKIP=1
         HEX   CCWCC,0,1B
         HEX   CCWCA,0,3B
         ROUTINE SPARE1,SPACER1
         HEX   CCWFL,0,1B
         HEX   CCWXX,0,1B
         HEX   CCWCT,0,2B
         ROUTINE SPARE1,SPACER7
         HEX   CSWKEY,0,1B
         HEX   CSWCA,0,03B
         ROUTINE SPARE1,SPACER1
         ROUTINE CSWATT,SETHEX
         ROUTINE CSWPCI,SETHEX
         HEX   CSWCNT,0,2B
         LABEL 'FAILING CCW','CSW'
         LINE (106),(80),SKIP=1
         ROUTINE SDRCT5,CVTRHT     COUNTER NO. 4
         LABEL 'CFS MISFOLD (32)'
         LINE (106),(80),SKIP=1
         ROUTINE SDRCT6,CVTLFT     COUNTER NO. 5
         LABEL 'BUR/TRIM JAM(40)'
         LINE  (106),(80),SKIP=1
         ROUTINE SDRCT7,CVTRHT     COUNTER NO. 6
         LABEL 'NO BURST CK (41)'
         LINE  (106),(80),SKIP=0
         ROUTINE SDRCT8,CVTLFT     COUNTER NO. 7
         LABEL 'BUR/STKR JAM(42)'
         LINE  ,(1),SKIP=2
         ROUTINE CSWUC,UNITCK
         LABEL 'SYSTEM SENSE BYTE DATA'
         LINE  (11,18),(2,18),SKIP=1
         HEX   SNS00,0,1B
         HEX   SNS01,0,1B
         HEX   SNS02,0,1B
         HEX   SNS03,0,1B
         LABEL 'BYTE 0 -','BYTE 1 -','BYTE 2 -','BYTE 3 -'
         LINE  ,(1,18),SKIP=1
         LABEL 'UNIT CHECK','REASON 1','REASON 2','DYNAMIC'
         LINE  SKIP=1
         LABEL ''
         LINE  (14,18),(1,18),SKIP=1
         BIN   (SNS000,,1),(SNS010,,1),(SNS020,,1),(SNS030,,1)
         ROUTINE SNS000,LABELTYP
         LABEL 'CMD REJECT','NOT READY','FO CK','READY'
         LINE  SKIP=1
         BIN   (SNS001,,1),(SNS011,,1),(SNS021,,1),(SNS031,,1)
         LABEL 'INTVN RQD','OPERATION CK','XFR CK','PG BUFF EMPT'
         LINE  SKIP=1
         BIN   (SNS002,,1),(SNS012,,1),(SNS022,,1),(SNS032,,1)
         LABEL 'BUS OUT PE','TNR COLL FUL','FUSER CK','BLK DATA CK'
         LINE  SKIP=1
         BIN   (SNS003,,1),(SNS013,,1),(SNS023,,1),(SNS033,,1)
         LABEL 'EQUIP CHK','TNR EMPTY','CFS CHK','BTS THREADED'
         LINE  SKIP=1
         BIN   (SNS004,,1),(SNS014,,1),(SNS024,,1),(SNS034,,1)
         LABEL 'DATA CK','DEV REPL RQD','PRCS CK','SYS RSTRT RQ'
         LINE  SKIP=1
         BIN   (SNS005,,1),(SNS015,,1),(SNS025,,1),(SNS035,,1)
         LABEL 'RESERVED','END OF FORMS','BTS CK','PC ADV ENBL'
         LINE  SKIP=1
         BIN   (SNS006,,1),(SNS016,,1),(SNS026,,1),(SNS036,,1)
         LABEL 'LOAD CK','OUTPUT FULL','RESERVED','RESERVED'
         LINE  SKIP=1
         BIN   (SNS007,,1),(SNS017,,1),(SNS027,,1),(SNS037,,1)
         LABEL 'CHANNEL 9','RESERVED','LINE OVERRUN','RESERVED'
         LINE  SKIP=1
         LABEL ' '
         DC    X'FE'
         DC    C'IFCEARG'
ARGNO    DC    C' '
*
SHORTLN  LINE  (81),(25,23),SKIP=1
SHORTLB  LABEL 'DAY YEAR','HH MM SS TH'
         LINE  (25,23),(18,23),SKIP=2
         ROUTINE DATE,SETDATE
         HEX   TIME,1,4B
         LABEL 'DATE -','TIME -'
         LINE  (33),(2,77),SKIP=1
         ROUTINE SHORTDT,CONVTYPE
         LABEL 'DEVICE TYPE','STATISTICAL DATA COUNTERS'
         LINE  (33),(2),SKIP=1
         HEX   SHORTCUA,0,2B
         LABEL 'PRIMARY CHANNEL UNIT ADDRESS'
         LINE  (106),(80),SKIP=1
         ROUTINE SSDRCT2,CVTLFT    COUNTER NO. 1
         LABEL 'TEMP CHL DATA CK'
         LINE  (106),(80),SKIP=1
         ROUTINE SSDRCT3,CVTRHT    COUNTER NO. 2
         LABEL 'TEMP CHL CTL CK'
         LINE  SKIP=1
         ROUTINE SSDRCT4,CVTLFT    COUNTER NO. 3
         LABEL 'TEMP INTF CTL CK'
         LINE  SKIP=1
         LABEL ' '
         LINE  SKIP=1
         ROUTINE SSDRCT5,CVTRHT    COUNTER NO. 4
         LABEL 'CFS MISFOLD (32)'
         LINE  SKIP=1
         ROUTINE SSDRCT6,CVTLFT    COUNTER NO. 5
         LABEL 'BUR/TRIM JAM(40)'
         LINE  SKIP=1
         ROUTINE SSDRCT7,CVTRHT    COUNTER NO. 6
         LABEL 'NO BURST CK (41)'
         LINE  SKIP=1
         ROUTINE SSDRCT8,CVTLFT    COUNTER NO. 7
         LABEL 'BUR/STKR JAM(42)'
         DC    X'FF'                   BAIL OUT
         DC    X'002A'                 LOGOUT SIZE
         DC    X'0018'                 OFFSET IH THE RECORD
         DC    X'0018'            START ADDR OF DUMP
DUMPLN   LINE  ,,SKIP=1
DUMPLB   LABEL ''
         DC    X'FF'                   BAIL OUT
         DC    X'0062'                 LOGOUT SIZE
         DC    X'0018'                 OFFSET IN THE RECORD
         DC    X'0018'            START ADDR OF DUMP
T00CLINE LINE  SKIP=1
T00CLABL LABEL ' '
         DC    X'FE'
         DC    C'IFCET00C'
LABELS   DS    0F
         LSTART
F10L     DC    C'CMD REJECT*'
         DC    C'HARDWARE ER*'
         DC    C'RESERVED*'
         DC    C'READY$'
         DC    C'INTVN RQD*'
         DC    C'PERMANENT ER*'
         DC    C'RESERVED*'
         DC    C'PG BUFF EMPT$'
         DC    C'BUS OUT PE*'
         DC    C'ER LOG FULL*'
         DC    C'RESERVED*'
         DC    C'BLK DATA CK$'
         DC    C'EQUIP CK*'
         DC    C'CANCEL KEY*'
         DC    C'RESERVED*'
         DC    C'BTS THREADED$'
         DC    C'DATA CK*'
         DC    C'RESERVED*'
         DC    C'RESERVED*'
         DC    C'SYS RSTRT RQ$'
         DC    C'RESERVED*'
         DC    C'RESERVED*'
         DC    C'RESERVED*'
         DC    C'PC ADV ENBL$'
         DC    C'LOAD CK*'
         DC    C'RESERVED*'
         DC    C'RESERVED*'
         DC    C'RESERVED$'
         DC    C'CHANNEL 9*'
         DC    C'RESERVED*'
         DC    C'RESERVED*'
         DC    C'RESERVED$'
         DC    C' $'
F20L     DC    C'CMD REJECT*'
         DC    C'COMMAND CODE*'
         DC    C'RESERVED*'
         DC    C'READY$'
         DC    C'INTVN RQD*'
         DC    C'DATA BYTE*'
         DC    C'RESERVED*'
         DC    C'PG BUFF EMPT$'
         DC    C'BUS OUT PE*'
         DC    C'RESERVED*'
         DC    C'RESERVED*'
         DC    C'BLK DATA CK$'
         DC    C'EQUIP CK*'
         DC    C'RESERVED*'
         DC    C'RESERVED*'
         DC    C'BTS THREADED$'
         DC    C'DATA CK*'
         DC    C'RESERVED*'
         DC    C'RESERVED*'
         DC    C'SYS RSTRT RQ$'
         DC    C'RESERVED*'
         DC    C'RESERVED*'
         DC    C'RESERVED*'
         DC    C'PC ADV ENBL$'
         DC    C'LOAD CK*'
         DC    C'RESERVED*'
         DC    C'RESERVED*'
         DC    C'RESERVED$'
         DC    C'CHANNEL 9*'
         DC    C'RESERVED*'
         DC    C'RESERVED*'
         DC    C'RESERVED$'
         DC    C' $'
         END
