         TITLE 'IFCESUMS-SUMMARY MODULE FOR IFCEREP0                   *
                        '
IFCESUMS CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'IFCESUMS  78.146'                                 0001
         DROP  @15
@PROLOG  ST    @14,12(,@13)                                        0001
         STM   @00,@04,20(@13)                                     0001
         STM   @06,@12,44(@13)                                     0001
         BALR  @11,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,@11                                         0001
         ST    @13,@SA00001+4                                      0001
         LA    @14,@SA00001                                        0001
         ST    @14,8(,@13)                                         0001
         LR    @13,@14                                             0001
*/********************************************************************/
*/*                                                          @Z427VLS*/
*/*      SECTION CONSTRUCTS A PART OF THE HEADER FROM THE RECORD     */
*/*      AND CCHHR TABLE TO DETERMINE IF ANOTHER REC HAS BEEN SUMMED */
*/*      AND MATCHES THIS REC. IF SO NO NEW AREA IS GOTTEN. IF NO    */
*/*      MATCH A NEW AREA IS GOTTEN AND CHAINED TO THIS ONE  @Z427VLS*/
*/*                                                          @Z427VLS*/
*/********************************************************************/
*RETCODE = ZERO;                                           /*@Z427VLS*/
         SLR   @12,@12                                             0081
         STH   @12,RETCODE                                         0081
* SWES = '00'X;                                            /*@Z427VLS*/
         MVI   SWES,X'00'                                          0082
* IF LRTTYP = '34'X × LRTTYP = '32'X THEN  /* TCAM OR CONVERTED REC  */
         CLI   LRTTYP(REG7),X'34'                                  0083
         BE    @RT00083                                            0083
         CLI   LRTTYP(REG7),X'32'                                  0083
         BNE   @RF00083                                            0083
@RT00083 DS    0H                                                  0084
*   IF LRDISMNT = OFF &                 /* MUST BE AN OBR(30) WITH   */
*      SHRTSW  = OFF &                  /* SHORT SW & DISMOUNT SW OFF*/
*      (LRTCAMID & '0F'X)='0F'X THEN    /* AND TCAM ID SW EQUAL TO 0F*/
         TM    LRDISMNT(REG7),B'00100100'                          0084
         BNZ   @RF00084                                            0084
         MVC   @TS00001(1),LRTCAMID(REG7)                          0084
         NI    @TS00001,X'0F'                                      0084
         CLI   @TS00001,X'0F'                                      0084
         BNE   @RF00084                                            0084
*         TCAMSWIT = ON;                /* THEN TCAM SW IS SET       */
         OI    TCAMSWIT,B'10000000'                                0085
* IF  LRTTYP='36'X THEN                 /* SEE IF VTAM       @Z427VLS*/
@RF00084 DS    0H                                                  0086
@RF00083 CLI   LRTTYP(REG7),X'36'                                  0086
         BNE   @RF00086                                            0086
*   TCAMSWIT = ON;                      /* IF YES, TURN ON TCAM SWITC*/
         OI    TCAMSWIT,B'10000000'                                0087
* SAVERTYP = LRTTYP & FOXZERO;                             /*@Z427VLS*/
@RF00086 MVC   SAVERTYP(1),LRTTYP(REG7)                            0088
         NI    SAVERTYP,X'F0'                                      0088
* IF SAVERTYP = '90'X THEN              /* TEST FOR T-TYPE RECORD    */
         CLI   SAVERTYP,X'90'                                      0089
         BNE   @RF00089                                            0089
*   DO;                                                    /*@Z427VLS*/
*     /*                                                     @Z427VLS*/
*     /* IF DEVICE ID IS ANY OF THE FOLLOWING, THEN THE RECORD IS    */
*     /* TREATED AS AN OBR AND THE EXTRA 8 BYTES IS NOT NEEDED.      */
*     /* OTHERWISE THE MDR-TYPE SWITCH IS SET.               @Z427VLS*/
*     /*                                                     @Z427VLS*/
*     IF LRTRECID ^= '01'X &            /* 3330              @Z427VLS*/
*        LRTRECID ^= '05'X &                                       0091
*        LRTRECID ^= '15'X &                                       0091
*        LRTRECID ^= '02'X &            /* OR A 2305-2       @Z427VLS*/
*        LRTRECID ^= '04'X &            /* OR A 3211         @Z427VLS*/
*        LRTRECID ^= '12'X &            /* OR A 2305-1       @Z427VLS*/
*        LRTRECID ^= '09'X &            /* OR A 3340         @Z427VLS*/
*        LRTRECID ^= '11'X &            /* OR A 3350         @Z427VLS*/
*        LRTRECID ^= '0A'X &            /* OR A 3330-1       @Z427VLS*/
*        LRTRECID ^= '0C'X &            /* OR 3800           @Z427VLS*/
*        LRTRECID ^= '0D'X &            /* OR A 3895         @Z427VLS*/
*        LRTRECID ^= '0E'X  THEN                                   0091
         CLI   LRTRECID(REG7),X'01'                                0091
         BE    @RF00091                                            0091
         CLI   LRTRECID(REG7),X'05'                                0091
         BE    @RF00091                                            0091
         CLI   LRTRECID(REG7),X'15'                                0091
         BE    @RF00091                                            0091
         CLI   LRTRECID(REG7),X'02'                                0091
         BE    @RF00091                                            0091
         CLI   LRTRECID(REG7),X'04'                                0091
         BE    @RF00091                                            0091
         CLI   LRTRECID(REG7),X'12'                                0091
         BE    @RF00091                                            0091
         CLI   LRTRECID(REG7),X'09'                                0091
         BE    @RF00091                                            0091
         CLI   LRTRECID(REG7),X'11'                                0091
         BE    @RF00091                                            0091
         CLI   LRTRECID(REG7),X'0A'                                0091
         BE    @RF00091                                            0091
         CLI   LRTRECID(REG7),X'0C'                                0091
         BE    @RF00091                                            0091
         CLI   LRTRECID(REG7),X'0D'                                0091
         BE    @RF00091                                            0091
         CLI   LRTRECID(REG7),X'0E'                                0091
         BE    @RF00091                                            0091
*          TTYPSWIT = ON;                                  /*@Z427VLS*/
         OI    TTYPSWIT,B'01000000'                                0092
*   END;                                                   /*@Z427VLS*/
@RF00091 DS    0H                                                  0094
* IF TTYPSWIT = ON ×                    /* TEST FOR T TYPE OR TCAM   */
*    TCAMSWIT = ON THEN                 /* RECORDS           @Z427VLS*/
@RF00089 TM    TTYPSWIT,B'11000000'                                0094
         BZ    @RF00094                                            0094
*      IF TTYPSWIT = ON &               /* TEST FOR T TYPE & VAR SUB */
*         LRVARIDS = ON THEN            /* ID FIELD.  IF VAR SUB ID  */
         TM    TTYPSWIT,B'01000000'                                0095
         BNO   @RF00095                                            0095
         TM    LRVARIDS(REG7),B'10000000'                          0095
         BNO   @RF00095                                            0095
*           HDRBUMP=16;                 /* SET BUMP VALUE TO 16      */
         MVC   HDRBUMP(4),@CF00086                                 0096
*      ELSE                             /* IF IT IS T TYPE OR TCAM   */
*           HDRBUMP=8;                  /* SET VALUE TO 8    @Z427VLS*/
         B     @RC00095                                            0097
@RF00095 MVC   HDRBUMP(4),@CF00063                                 0097
* ELSE                                  /* IF IT NEITHER T TYPE OR   */
*    HDRBUMP = ZERO;                    /* TCAM SET VALUE TO ZERO    */
         B     @RC00094                                            0098
@RF00094 SLR   @12,@12                                             0098
         ST    @12,HDRBUMP                                         0098
* HOLDTYPE=SMACCTAB;                    /* BUILD COMPARE VALUE FROM  */
@RC00094 MVC   HOLDTYPE(5),SMACCTAB(REG4)                          0099
* HOLDCPUN=LRCPUNOS;               /* CCHHR TABLE(R4) AND CPUSER (R2)*/
         MVC   HOLDCPUN(5),LRCPUNOS(REG7)                          0100
* /*                                                         @Z427VLS*/
* /* CHECK FOR SHARED I/O AND CHANGE CUA AND CPU IF REQUIRED @Z427VLS*/
* /*                                                         @Z427VLS*/
* IF SHAREPTR ^= ZERO & (SAVERTYP = '30'X × SAVERTYP = '90'X) THEN 0101
         L     @12,SHAREPTR(,R2)                                   0101
         LTR   @12,@12                                             0101
         BZ    @RF00101                                            0101
         CLI   SAVERTYP,X'30'                                      0101
         BE    @RT00101                                            0101
         CLI   SAVERTYP,X'90'                                      0101
         BNE   @RF00101                                            0101
@RT00101 DS    0H                                                  0102
*   DO;                                                    /*@Z427VLS*/
*     VALIDSHR = OFF;                        /* TURN OFF FOR SEARCH  */
         NI    VALIDSHR,B'11101111'                                0103
*     IF SAVERTYP = '90'X THEN               /* MDR RECORD   @Z427VLS*/
         CLI   SAVERTYP,X'90'                                      0104
         BNE   @RF00104                                            0104
*       SHR34CUA = LRTMCUA;                                /*@Z427VLS*/
         MVC   SHR34CUA(2),LRTMCUA(REG7)                           0105
*     ELSE                                                         0106
*       IF SHRTSW = ON THEN                                        0106
         B     @RC00104                                            0106
@RF00104 TM    SHRTSW(REG7),B'00100000'                            0106
         BNO   @RF00106                                            0106
*         SHR34CUA = LRTSCUA;                /* CUA FOR SHORT OBR    */
         MVC   SHR34CUA(2),LRTSCUA(REG7)                           0107
*       ELSE                                                       0108
*         SHR34CUA = LRTCUA;                 /* CUA FOR LONG OBR     */
         B     @RC00106                                            0108
@RF00106 MVC   SHR34CUA(2),LRTCUA(REG7)                            0108
*     SHR34CPU = LRCPUNOS(1:3);              /* CPU FOR COMPARISON   */
@RC00106 DS    0H                                                  0109
@RC00104 MVC   SHR34CPU(3),LRCPUNOS(REG7)                          0109
*     SHR34XXD = SHR34XXX;                   /* FOR CONTROLLER COMPR */
         MVC   SHR34XXD(5),SHR34XXX                                0110
*     SHR34CUX = SHR34CUX & FOXZERO;                       /*@Z427VLS*/
         NI    SHR34CUX,X'F0'                                      0111
*     SHR34XDD = ON;                                       /*@Z427VLS*/
         OI    SHR34XDD,B'10000000'                                0112
*     DO J = 1 TO SHARENUM BY 1 WHILE(VALIDSHR = OFF);     /*@Z427VLS*/
         LA    @12,1                                               0113
         STH   @12,J                                               0113
         B     @DE00113                                            0113
@DL00113 TM    VALIDSHR,B'00010000'                                0113
         BNZ   @DC00113                                            0113
*       IF SHAREDX(J) = ON THEN                                    0114
         MH    @12,@CH00592                                        0114
         L     @10,SHAREPTR(,R2)                                   0114
         ST    @12,@TF00001                                        0114
         ALR   @12,@10                                             0114
         AL    @12,@CF00598                                        0114
         TM    SHAREDX-2(@12),B'10000000'                          0114
         BNO   @RF00114                                            0114
*         DO;                                /* CHECK FOR CONTROLLER */
*           IF SHR34XXD = SHRCUCPU(J) THEN                         0116
         LR    @12,@10                                             0116
         AL    @12,@TF00001                                        0116
         AL    @12,@CF00598                                        0116
         CLC   SHR34XXD(5),SHRCUCPU-2(@12)                         0116
         BNE   @RF00116                                            0116
*             DO;                                          /*@Z427VLS*/
*               /*                                           @Z427VLS*/
*               /* PUT IN CUA FROM SHARE TABLE WITH RECORD UNITS ADDR*/
*               /*                                           @Z427VLS*/
*               HOLDCPUN(4:5) = HOLDCPUN(4:5) && HOLDCPUN(4:5);    0118
         XC    HOLDCPUN+3(2),HOLDCPUN+3                            0118
*               HOLDCPUN(1:3) = SHARSERB(J);               /*@Z427VLS*/
         LR    @12,@10                                             0119
         AL    @12,@TF00001                                        0119
         BCTR  @12,0                                               0119
         BCTR  @12,0                                               0119
         MVC   HOLDCPUN(3),SHARSERB-9(@12)                         0119
*               VALIDSHR = ON;                             /*@Z427VLS*/
         OI    VALIDSHR,B'00010000'                                0120
*               SHR34CUA = SHR34CUA & ZZZF;  /* KEEP ONLY UNITS BITS*/
         NC    SHR34CUA(2),@CB00503                                0121
*               SHR34CUA = SHR34CUA × SHARECUB(J); /*SHARED ADDRESS */
         AL    @10,@TF00001                                        0122
         AL    @10,@CF00600                                        0122
         OC    SHR34CUA(2),SHARECUB-7(@10)                         0122
*             END;                                         /*@Z427VLS*/
*         END;                                             /*@Z427VLS*/
*       ELSE                                                       0125
*         IF SHR34XXX = SHRCUCPU(J) THEN                           0125
         B     @RC00114                                            0125
@RF00114 LH    @12,J                                               0125
         MH    @12,@CH00592                                        0125
         L     @10,SHAREPTR(,R2)                                   0125
         ST    @12,@TF00001                                        0125
         ALR   @12,@10                                             0125
         AL    @12,@CF00598                                        0125
         CLC   SHR34XXX(5),SHRCUCPU-2(@12)                         0125
         BNE   @RF00125                                            0125
*           DO;                              /* CUA ONLY.    @Z427VLS*/
*             HOLDCPUN(4:5) = HOLDCPUN(4:5) && HOLDCPUN(4:5);      0127
         XC    HOLDCPUN+3(2),HOLDCPUN+3                            0127
*             HOLDCPUN(1:3) = SHARSERB(J);                 /*@Z427VLS*/
         LR    @12,@10                                             0128
         AL    @12,@TF00001                                        0128
         BCTR  @12,0                                               0128
         BCTR  @12,0                                               0128
         MVC   HOLDCPUN(3),SHARSERB-9(@12)                         0128
*             VALIDSHR = ON;                               /*@Z427VLS*/
         OI    VALIDSHR,B'00010000'                                0129
*             SHR34CUA = SHARECUB(J);        /*SHARED ADDRESS       */
         AL    @10,@TF00001                                        0130
         AL    @10,@CF00600                                        0130
         MVC   SHR34CUA(2),SHARECUB-7(@10)                         0130
*           END;                                           /*@Z427VLS*/
*     END;                                                 /*@Z427VLS*/
@RF00125 DS    0H                                                  0132
@RC00114 LA    @12,1                                               0132
         AH    @12,J                                               0132
         STH   @12,J                                               0132
@DE00113 L     @10,SHAREPTR(,R2)                                   0132
         CH    @12,SHARENUM(,@10)                                  0132
         BNH   @DL00113                                            0132
@DC00113 DS    0H                                                  0133
*     IF VALIDSHR = ON THEN                                        0133
         TM    VALIDSHR,B'00010000'                                0133
         BNO   @RF00133                                            0133
*       DO;                                                /*@Z427VLS*/
*         IF SAVERTYP = '90'X THEN                                 0135
         CLI   SAVERTYP,X'90'                                      0135
         BNE   @RF00135                                            0135
*           LRTMCUA = SHR34CUA;           /* REPLACE IN RECORD       */
         MVC   LRTMCUA(2,REG7),SHR34CUA                            0136
*         ELSE                                                     0137
*           IF SHRTSW = ON THEN                                    0137
         B     @RC00135                                            0137
@RF00135 TM    SHRTSW(REG7),B'00100000'                            0137
         BNO   @RF00137                                            0137
*             LRTSCUA = SHR34CUA;         /* REPLACE IN RECORD       */
         MVC   LRTSCUA(2,REG7),SHR34CUA                            0138
*           ELSE                                                   0139
*             LRTCUA = SHR34CUA;          /* REPLACE IN RECORD       */
         B     @RC00137                                            0139
@RF00137 MVC   LRTCUA(2,REG7),SHR34CUA                             0139
*       END;                                               /*@Z427VLS*/
@RC00137 DS    0H                                                  0140
@RC00135 DS    0H                                                  0141
*   END;                                                   /*@Z427VLS*/
@RF00133 DS    0H                                                  0142
* RESPECIFY (REG4) UNRESTRICTED;                           /*@Z427VLS*/
@RF00101 DS    0H                                                  0143
*/********************************************************************/
*/* SET UP FOR SEARCH ON MATCH.  FOUND SWITCH IS SET OFF.  IF A MATCH*/
*/* IS FOUND THEN IT IS SET ON.  OTHERWISE, THE FORWARD POINTER IS   */
*/* SET TO REG6.  THE SEARCH STOPS WHEN A MATCH IS FOUND OR REG6 = 0.*/
*/********************************************************************/
*RESPECIFY (REG6) RESTRICTED;                              /*@Z427VLS*/
*FOUND = OFF;                                              /*@Z427VLS*/
         NI    FOUND,B'11011111'                                   0144
*REG6 = REG5;                                              /*@Z427VLS*/
         LR    REG6,REG5                                           0145
*DO WHILE (REG6 ^= ZERO & FOUND = OFF);                    /*@Z427VLS*/
         B     @DE00146                                            0146
@DL00146 DS    0H                                                  0147
*  SAVER6 = REG6;                                          /*@Z427VLS*/
         ST    REG6,SAVER6                                         0147
*  IF HOLDID = RECORDID THEN       /* DOES THIS REC MATCH PREV RECS  */
         CLC   HOLDID(10),RECORDID(REG6)                           0148
         BNE   @RF00148                                            0148
*    DO;                                                   /*@Z427VLS*/
*      IF TCAMSWIT = ON & SMCTCAM = ON THEN                        0150
         TM    TCAMSWIT,B'10000000'                                0150
         BNO   @RF00150                                            0150
         TM    SMCTCAM(REG6),B'10000000'                           0150
         BNO   @RF00150                                            0150
*        DO;                                               /*@Z427VLS*/
*           IF (SHRTSW = ON & LRTTYPID ^= X3790) ×                 0152
*              (SHRTSW = OFF & LRDEVTYP ^= X3790) THEN             0152
         TM    SHRTSW(REG7),B'00100000'                            0152
         BNO   @GL00018                                            0152
         CLC   LRTTYPID(2,REG7),X3790                              0152
         BNE   @RT00152                                            0152
@GL00018 TM    SHRTSW(REG7),B'00100000'                            0152
         BNZ   @RF00152                                            0152
         CLC   LRDEVTYP(2,REG7),X3790                              0152
         BE    @RF00152                                            0152
@RT00152 DS    0H                                                  0153
*              IF LRTERMNL = SMTERMNL THEN   /* SAME TERMINAL NAME   */
         CLC   LRTERMNL(8,REG7),SMTERMNL(REG6)                     0153
         BNE   @RF00153                                            0153
*                 FOUND = ON;                              /*@Z427VLS*/
         OI    FOUND,B'00100000'                                   0154
*              ELSE                                                0155
*                 REG6 = FWARDPTR;                         /*@Z427VLS*/
         B     @RC00153                                            0155
@RF00153 L     REG6,FWARDPTR(,REG6)                                0155
*           ELSE                                                   0156
*              FOUND = ON;                                 /*@Z427VLS*/
         B     @RC00152                                            0156
@RF00152 OI    FOUND,B'00100000'                                   0156
*        END;                                              /*@Z427VLS*/
*      ELSE                                                        0158
*        IF TCAMSWIT = ON ×                  /* TCAM OR 8 BYTE SW ON */
*           SMCTCAM  = ON THEN               /* BOTH THEN NEXT AREA  */
         B     @RC00150                                            0158
@RF00150 TM    TCAMSWIT,B'10000000'                                0158
         BO    @RT00158                                            0158
         TM    SMCTCAM(REG6),B'10000000'                           0158
         BNO   @RF00158                                            0158
@RT00158 DS    0H                                                  0159
*             REG6 = FWARDPTR;                             /*@Z427VLS*/
         L     REG6,FWARDPTR(,REG6)                                0159
*        ELSE                                                      0160
*           IF TTYPSWIT = ON &               /* TEST FOR VAR SUB ID  */
*              LRVARIDS = ON THEN                                  0160
         B     @RC00158                                            0160
@RF00158 TM    TTYPSWIT,B'01000000'                                0160
         BNO   @RF00160                                            0160
         TM    LRVARIDS(REG7),B'10000000'                          0160
         BNO   @RF00160                                            0160
*              DO;                           /* TEST VAR SUB ID FLDS */
*                K = (LRVARIDF & '0F'X) + 1; /* PICK UP NO.  @Z427VLS*/
         LA    @12,15                                              0162
         SLR   @10,@10                                             0162
         IC    @10,LRVARIDF(,REG7)                                 0162
         NR    @12,@10                                             0162
         AL    @12,@CF00052                                        0162
         ST    @12,K                                               0162
*                IF SMVARID(1:K) = LRVARID(1:K) THEN               0163
         BCTR  @12,0                                               0163
         EX    @12,@SC00603                                        0163
         BNE   @RF00163                                            0163
*                   FOUND = ON;                            /*@Z427VLS*/
         OI    FOUND,B'00100000'                                   0164
*                ELSE                                              0165
*                   REG6 = FWARDPTR;                       /*@Z427VLS*/
         B     @RC00163                                            0165
@RF00163 L     REG6,FWARDPTR(,REG6)                                0165
*              END;                                        /*@Z427VLS*/
*           ELSE                                                   0167
*              /*                                            @Z427VLS*/
*              /* IF BOTH ARE OFF, TEST FOR T-TYPE SW ON.  IF NOT ON */
*              /* ON, SKIP TO NEXT AREA.  IF BOTH NOT OFF, TEST SUB  */
*              /* IS FOR MATCH.  IF NO MATCH, TRY NEXT AREA. @Z427VLS*/
*              /*                                            @Z427VLS*/
*              IF TTYPSWIT = ON THEN                               0167
         B     @RC00160                                            0167
@RF00160 TM    TTYPSWIT,B'01000000'                                0167
         BNO   @RF00167                                            0167
*                 IF LRTTYPID = SMTTYPID THEN                      0168
         CLC   LRTTYPID(2,REG7),SMTTYPID(REG6)                     0168
         BNE   @RF00168                                            0168
*                    FOUND = ON;                           /*@Z427VLS*/
         OI    FOUND,B'00100000'                                   0169
*                 ELSE                                             0170
*                    REG6 = FWARDPTR;                      /*@Z427VLS*/
         B     @RC00168                                            0170
@RF00168 L     REG6,FWARDPTR(,REG6)                                0170
*              ELSE                                                0171
*                 FOUND = ON;                              /*@Z427VLS*/
         B     @RC00167                                            0171
@RF00167 OI    FOUND,B'00100000'                                   0171
*    END;                                                  /*@Z427VLS*/
*  ELSE                                                            0173
*    REG6 = FWARDPTR;                                      /*@Z427VLS*/
         B     @RC00148                                            0173
@RF00148 L     REG6,FWARDPTR(,REG6)                                0173
*END;                                                      /*@Z427VLS*/
@RC00148 DS    0H                                                  0174
@DE00146 LTR   REG6,REG6                                           0174
         BZ    @DC00146                                            0174
         TM    FOUND,B'00100000'                                   0174
         BZ    @DL00146                                            0174
@DC00146 DS    0H                                                  0175
*/*                                                          @Z427VLS*/
*/*      BUILD A NEW COUNTER AREA, IF ONE DID NOT EXIST      @Z427VLS*/
*/*                                                          @Z427VLS*/
*RESPECIFY (REG3) RESTRICTED;                              /*@Z427VLS*/
*IF REG6 = ZERO THEN                                               0176
         SLR   @12,@12                                             0176
         CR    REG6,@12                                            0176
         BNE   @RF00176                                            0176
*  DO;                                                     /*@Z427VLS*/
*      IF SCNTSIZE ^= ZERO THEN              /* IF NO. CTRS ZERO EXIT*/
         LH    @10,SCNTSIZE(,REG9)                                 0178
         CR    @10,@12                                             0178
         BE    @RF00178                                            0178
*        DO;                                               /*@Z427VLS*/
*          REG3=HEADRLEN+(2*SCNTSIZE)+HDRBUMP; /* COMPUTE AREA SIZE  */
         ALR   @10,@10                                             0180
         AL    @10,@CF00473                                        0180
         AL    @10,HDRBUMP                                         0180
         LR    REG3,@10                                            0180
*          RESPECIFY (REG15) RESTRICTED;                   /*@Z427VLS*/
*          GEN(GETMAIN EC,LV=(REG3),A=SMWHERE); /* GET AREA CONDIT'AL*/
         GETMAIN EC,LV=(REG3),A=SMWHERE
*          RETCODE = REG15;                  /* SAVE RETURN CODE     */
         STH   REG15,RETCODE                                       0183
*          RESPECIFY (REG15) UNRESTRICTED;                 /*@Z427VLS*/
*          IF RETCODE = ZERO THEN            /* IF R15 ZERO BUILD CTR*/
         LH    @12,RETCODE                                         0185
         LTR   @12,@12                                             0185
         BNZ   @RF00185                                            0185
*            DO;                                           /*@Z427VLS*/
*/*  THE FOLLOWING CODE WILL STORE IN THE COMM TABLE THE ADDRESS OF*/
*/*  GETMAIN AND THE LENGTH THES DATA WILL BE USED BY EDSUM TO DUMP*/
*/*  THE COUNTERS TO TOURIST DATA SET JUST PRIOR TO CALL IFCEEDIT TO*/
*/*  PRINT THE RESULTS SIZE SHOULD ALWAYS BE THE SAME IT IS SAVED   */
*/*  FOR EACH GETMAIN IN CASE THIS SHOULD CHANGE WE WILL AVOID A C4 */
*             IF DEBUG14 = ON & DUMPNUM ^= TWELVE THEN             0187
         TM    DEBUG14(R2),B'00000010'                             0187
         BNO   @RF00187                                            0187
         LH    @12,DUMPNUM(,R2)                                    0187
         C     @12,@CF00065                                        0187
         BE    @RF00187                                            0187
*               DO;                                        /*@Z427VLS*/
*                 DUMPADR(DUMPNUM) = SMWHERE;              /*@Z427VLS*/
         LR    @10,@12                                             0189
         SLA   @10,3                                               0189
         L     @08,SMWHERE                                         0189
         ST    @08,DUMPADR-8(@10,R2)                               0189
*                 DUMPSIZE(DUMPNUM) = REG3;                /*@Z427VLS*/
         ST    REG3,DUMPSIZE-8(@10,R2)                             0190
*                 DUMPNUM = DUMPNUM + 1;                   /*@Z427VLS*/
         AL    @12,@CF00052                                        0191
         STH   @12,DUMPNUM(,R2)                                    0191
*               END;                                       /*@Z427VLS*/
*              /******************************************************/
*              /*                                            @Z427VLS*/
*              /*  IF NO CHAIN EXISTS BUILD A CHAIN WITH ONE ELEMENT */
*              /*                                            @Z427VLS*/
*              /******************************************************/
*              IF REG5 = ZERO THEN           /* DOES CHAIN EXIST     */
@RF00187 LTR   REG5,REG5                                           0193
         BNZ   @RF00193                                            0193
*                  REG5 = SMWHERE;           /* BUILD W/PTR TO FIRST */
         L     REG5,SMWHERE                                        0194
*               ELSE                                               0195
*                  SAVER6 -> FWARDPTR = SMWHERE; /* SET FORWARD PTR  */
         B     @RC00193                                            0195
@RF00193 L     @12,SMWHERE                                         0195
         L     @10,SAVER6                                          0195
         ST    @12,FWARDPTR(,@10)                                  0195
*               REG6 = SMWHERE;              /* PTR TO CHAIN AREAS   */
@RC00193 L     REG6,SMWHERE                                        0196
*               EDTABPTR = REG9;             /* INITIALIZING HEADER  */
         ST    REG9,EDTABPTR(,REG6)                                0197
*               FWARDPTR = ZERO;             /* ZERO FWARDPTR TO LAST*/
         SLR   @12,@12                                             0198
         ST    @12,FWARDPTR(,REG6)                                 0198
*               SCCOUNT = ZERO;              /* SET COUNT TO 0       */
         STH   @12,SCCOUNT(,REG6)                                  0199
*               RECORDID = HOLDID;           /* SET UP HEADER AREA   */
         MVC   RECORDID(10,REG6),HOLDID                            0200
*                IF (RECORDID & FOXZERO) = '40'X THEN              0201
         MVC   @TS00001(1),RECORDID(REG6)                          0201
         NI    @TS00001,X'F0'                                      0201
         CLI   @TS00001,X'40'                                      0201
         BNE   @RF00201                                            0201
*                 RECORDID(1) = '40'X;                    /* @ZA17693*/
         MVI   RECORDID(REG6),X'40'                                0202
*               SMCWITCH = SMCWITCH&&SMCWITCH;  /* SET SWITCHES TO 0 */
@RF00201 XC    SMCWITCH(2,REG6),SMCWITCH(REG6)                     0203
*               /*                                           @Z427VLS*/
*               /*      ZERO  COUNTERS. INITIALIZE TERM NAME AND     */
*               /*      TCAM SWITCHES IN COUNTER.            @Z427VLS*/
*               /*                                           @Z427VLS*/
*               REG3 = REG6;                 /* SET WORK REG @Z427VLS*/
         LR    REG3,REG6                                           0204
*               IF TCAMSWIT = ON THEN        /* IF TCAM INITIALIZE AS*/
         TM    TCAMSWIT,B'10000000'                                0205
         BNO   @RF00205                                            0205
*                 DO;                                      /*@Z427VLS*/
*                   SMCTCAM = ON;            /* SET TCAM SWITCH      */
         OI    SMCTCAM(REG6),B'10000000'                           0207
*                   SMTERMNL = LRTERMNL;     /* BRING OVER TERM NAME */
         MVC   SMTERMNL(8,REG6),LRTERMNL(REG7)                     0208
*                   REG3 = REG3+8;                         /*@Z427VLS*/
         AL    REG3,@CF00063                                       0209
*                 END;                                     /*@Z427VLS*/
*               ELSE                                               0211
*                 /*                                         @Z427VLS*/
*                 /*    INITIALIZE FOR T-TYPE RECORD         @Z427VLS*/
*                 /*                                         @Z427VLS*/
*                 IF TTYPSWIT = ON THEN      /* IF T-TYPE REC        */
         B     @RC00205                                            0211
@RF00205 TM    TTYPSWIT,B'01000000'                                0211
         BNO   @RF00211                                            0211
*                   DO;                                    /*@Z427VLS*/
*                     SMTRECID = LRTRECID;   /* SET RECORD ID        */
         MVC   SMTRECID(1,REG6),LRTRECID(REG7)                     0213
*                     SMTTYPID = LRTTYPID;   /* T-TYPE SUB ID        */
         MVC   SMTTYPID(2,REG6),LRTTYPID(REG7)                     0214
*                     SMTTYP0 = SMTTYP0 && SMTTYP0;        /*@Z427VLS*/
         XC    SMTTYP0(5,REG6),SMTTYP0(REG6)                       0215
*                     REG3 = REG3 + 8;                     /*@Z427VLS*/
         LA    @12,8                                               0216
         ALR   REG3,@12                                            0216
*                     IF LRVARIDS = ON THEN   /* VAR SUB ID? @Z427VLS*/
         TM    LRVARIDS(REG7),B'10000000'                          0217
         BNO   @RF00217                                            0217
*                       DO;                                /*@Z427VLS*/
*                         K = (LRVARIDF & '0F'X) + 1; /* SET SIZE    */
         LA    @10,15                                              0219
         SLR   @08,@08                                             0219
         IC    @08,LRVARIDF(,REG7)                                 0219
         NR    @10,@08                                             0219
         AL    @10,@CF00052                                        0219
         ST    @10,K                                               0219
*                         SMVARID(1:K) = LRVARID(1:K);     /*@Z427VLS*/
         BCTR  @10,0                                               0220
         EX    @10,@SM00605                                        0220
*                         REG3 = REG3 + 8;    /* ADJUST CTR PTR      */
         ALR   REG3,@12                                            0221
*                       END;                               /*@Z427VLS*/
*                   END;                                   /*@Z427VLS*/
@RF00217 DS    0H                                                  0224
*                 /*                                         @Z427VLS*/
*                 /*  ZERO COUNTER LOOP                      @Z427VLS*/
*                 /*                                         @Z427VLS*/
*                 DO J=SCNTSIZE TO 1 BY -1 ;     /* ZERO NO. CTRS    */
@RF00211 DS    0H                                                  0224
@RC00205 LH    @12,SCNTSIZE(,REG9)                                 0224
         STH   @12,J                                               0224
         B     @DE00224                                            0224
@DL00224 DS    0H                                                  0225
*                   REG3 -> SCCOUNTR(J) = ZERO;  /* FOUND IN TABLE   */
         LR    @10,@12                                             0225
         ALR   @10,@10                                             0225
         SLR   @08,@08                                             0225
         STH   @08,SCCOUNTR-2(@10,REG3)                            0225
*                 END;                                     /*@Z427VLS*/
         BCTR  @12,0                                               0226
         STH   @12,J                                               0226
@DE00224 LTR   @12,@12                                             0226
         BP    @DL00224                                            0226
*            END;                                          /*@Z427VLS*/
*          ELSE                                                    0228
*            EXIT = ON;                      /* CAN'T BUILD CTRS,EXIT*/
         B     @RC00185                                            0228
@RF00185 OI    EXIT,B'00001000'                                    0228
*        END;                                              /*@Z427VLS*/
*      ELSE                                                        0230
*        DO;                                               /*@Z427VLS*/
         B     @RC00178                                            0230
@RF00178 DS    0H                                                  0231
*           EXIT = ON;                       /* EXIT, NO COUNTERS    */
         OI    EXIT,B'00001000'                                    0231
*           RETCODE = ZERO;                  /* GOOD RETURN CODE     */
         SLR   @12,@12                                             0232
         STH   @12,RETCODE                                         0232
*        END;                                              /*@Z427VLS*/
*  END;                                                    /*@Z427VLS*/
@RC00178 DS    0H                                                  0235
*/********************************************************************/
*/*                                                          @Z427VLS*/
*/*      SUM RECORD SECTION                                  @Z427VLS*/
*/*                                                          @Z427VLS*/
*/********************************************************************/
*IF EXIT = OFF THEN                                                0235
@RF00176 TM    EXIT,B'00001000'                                    0235
         BNZ   @RF00235                                            0235
*  DO;                                                     /*@Z427VLS*/
*    RESPECIFY(REG8) RESTRICTED;                           /*@Z427VLS*/
*    R2 = REG7;   /*SET ADDRESSABILITY FOR SUM TABLE R2 WILL BE      */
         LR    R2,REG7                                             0238
*                 /*RESTORED UPON EXIT FROM ESUMS            @Z427VLS*/
*    SCCOUNT = SCCOUNT + 1;                                /*@Z427VLS*/
         LA    @12,1                                               0239
         AH    @12,SCCOUNT(,REG6)                                  0239
         STH   @12,SCCOUNT(,REG6)                                  0239
*    DO REG8 = CONTRPTR BY 6 WHILE( STFLAG ^= 'FF'X);      /*@Z427VLS*/
         L     REG8,CONTRPTR(,REG9)                                0240
         B     @DE00240                                            0240
@DL00240 DS    0H                                                  0241
*      IF SUMFLAG = ON THEN        /* IS THIS ENTRY A NORMAL SUM     */
         TM    SUMFLAG(REG8),B'10000000'                           0241
         BNO   @RF00241                                            0241
*        DO;                                               /*@Z427VLS*/
*          /*                                                @Z427VLS*/
*          /*      SUM-SPECIAL ROUTINE ENTRY                 @Z427VLS*/
*          /*      SETS REGS AS FOLLOWS                      @Z427VLS*/
*          /*            R3   PTR TO COUNTER TO BE USED      @Z427VLS*/
*          /*            R8   PTR TO CURRENT ELEMENT OF TABLE        */
*          /*            R9   PTR TO SUMMARY TABLE           @Z427VLS*/
*          /*            R14  TRN POINT                      @Z427VLS*/
*          /*            R15  ENTRY POINT                    @Z427VLS*/
*          /*                                                @Z427VLS*/
*          SMTABELM=REG8 ;                   /* SAVE CURR ENTRY PTR  */
         ST    REG8,SMTABELM(,REG9)                                0243
*          REG3=REG6+HEADRLEN+(2*SCOFFSET)+HDRBUMP;        /*@Z427VLS*/
         LA    REG3,22                                             0244
         ALR   REG3,REG6                                           0244
         LH    @12,SCOFFSET(,REG8)                                 0244
         ALR   @12,@12                                             0244
         ALR   REG3,@12                                            0244
         AL    REG3,HDRBUMP                                        0244
*          SUMSPEC = REG9 + STSPCPTR;        /* SET ENTRY PTR R9+    */
         LR    @12,REG9                                            0245
         AH    @12,STSPCPTR(,REG8)                                 0245
         ST    @12,SUMSPEC                                         0245
*          CALL SPECIAL;                     /* OFFSET FROM TAB ENTRY*/
         LR    @15,@12                                             0246
         BALR  @14,@15                                             0246
*          REG8=SMTABELM;                    /* RESET REG 8  @Z427VLS*/
         L     REG8,SMTABELM(,REG9)                                0247
*        END;                                              /*@Z427VLS*/
*      ELSE                                                        0249
*        DO;                                               /*@Z427VLS*/
         B     @RC00241                                            0249
@RF00241 DS    0H                                                  0250
*          /**********************************************************/
*          /*                                                @Z427VLS*/
*          /* NORMAL SUMMARY PROCESSING - A MASK IS USED.  IF THE    */
*          /* FLAG IS OFF, NOTHING WILL BE DONE.  IF IT IS ON, ONE   */
*          /* WILL BE ADDED TO THE INDICATED COUNTER.        @Z427VLS*/
*          /*                                                @Z427VLS*/
*          /**********************************************************/
*          IF STFLAG = '00'X THEN       /* SUM TO ADD > ONE BIT?     */
         CLI   STFLAG(REG8),X'00'                                  0250
         BNE   @RF00250                                            0250
*            DO;                                           /*@Z427VLS*/
*              SUMSPEC = LROFFSET + R2;   /* OFFSET FROM ENTRY       */
         LR    @12,R2                                              0252
         AH    @12,LROFFSET(,REG8)                                 0252
         ST    @12,SUMSPEC                                         0252
*              IF (SUMMARY & STMASK) = STMASK THEN                 0253
         MVC   @TS00001(1),SUMMARY(@12)                            0253
         NC    @TS00001(1),STMASK(REG8)                            0253
         CLC   @TS00001(1),STMASK(REG8)                            0253
         BNE   @RF00253                                            0253
*                DO;                                       /*@Z427VLS*/
*                  REG3=REG6+HDRBUMP;   /* UP PTR BY COMPUTED VALUE  */
         LR    REG3,REG6                                           0255
         AL    REG3,HDRBUMP                                        0255
*                  REG3 -> SCCOUNTR(SCOFFSET+1) =                  0256
*                          REG3 -> SCCOUNTR(SCOFFSET+1) + 1;       0256
         LH    @12,SCOFFSET(,REG8)                                 0256
         ALR   @12,@12                                             0256
         LA    @10,1                                               0256
         AH    @10,SCCOUNTR(@12,REG3)                              0256
         STH   @10,SCCOUNTR(@12,REG3)                              0256
*                END;                                      /*@Z427VLS*/
*            END;                                          /*@Z427VLS*/
*          ELSE                                                    0259
*            DO;                                           /*@Z427VLS*/
         B     @RC00250                                            0259
@RF00250 DS    0H                                                  0260
*              RESPECIFY (REG12) RESTRICTED;               /*@Z427VLS*/
*              SHIFT = REG8 -> SUMMARY; /*GET FIRST BYTE OF SUM ENTRY*/
         SLR   @10,@10                                             0261
         IC    @10,SUMMARY(,REG8)                                  0261
         STH   @10,SHIFT                                           0261
*              SRL(SHIFT,4);            /* ISOLATE SHIFT BITS@XA21975*/
         LR    @04,@10                                             0262
         SRL   @04,4                                               0262
         STH   @04,SHIFT                                           0262
*              SHIFT = SHIFT + 24;      /* INCR TO ISOLATE BITS      */
         LA    @04,24                                              0263
         AH    @04,SHIFT                                           0263
         STH   @04,SHIFT                                           0263
*              REG12 = LROFFSET + REG7; /* POINT TO LOGREC BYTE      */
         LR    REG12,REG7                                          0264
         AH    REG12,LROFFSET(,REG8)                               0264
*              REG12 = REG12->SUMMARY;  /* PUT BYTE FROM LOGREC IN 12*/
         SLR   @15,@15                                             0265
         IC    @15,SUMMARY(,REG12)                                 0265
         LR    REG12,@15                                           0265
*              SLL(REG12,SHIFT);        /* ISOLATE BITS TO BE ADDED  */
         SLL   REG12,0(@04)                                        0266
*              SHIFT = 32 - ((REG8 -> SUMMARY) & '0F'X);   /*@Z427VLS*/
         N     @10,@CF00571                                        0267
         LCR   @10,@10                                             0267
         AL    @10,@CF00591                                        0267
         STH   @10,SHIFT                                           0267
*                                       /* SUBTRACT THE LENGTH OF FLD*/
*              SRL(REG12,SHIFT);        /* RIGHT ALIGN THE BITS      */
         SRL   REG12,0(@10)                                        0268
*              REG3 = REG6 + HDRBUMP;   /* POINT TO CTRS TO BE UPDTED*/
         LR    REG3,REG6                                           0269
         AL    REG3,HDRBUMP                                        0269
*              REG3 -> SCCOUNTR(SCOFFSET+1) =                      0270
*                      REG3 -> SCCOUNTR(SCOFFSET+1) + REG12;       0270
         LH    @10,SCOFFSET(,REG8)                                 0270
         ALR   @10,@10                                             0270
         LR    @04,REG12                                           0270
         AH    @04,SCCOUNTR(@10,REG3)                              0270
         STH   @04,SCCOUNTR(@10,REG3)                              0270
*              RESPECIFY (REG12) UNRESTRICTED;             /*@Z427VLS*/
*            END;                                          /*@Z427VLS*/
*        END;                                              /*@Z427VLS*/
@RC00250 DS    0H                                                  0274
*    END;                                                  /*@Z427VLS*/
@RC00241 AL    REG8,@CF00078                                       0274
@DE00240 CLI   STFLAG(REG8),X'FF'                                  0274
         BNE   @DL00240                                            0274
*    RETCODE = ZERO;                    /* SET RTN CODE SUCCESSFUL   */
         SLR   @12,@12                                             0275
         STH   @12,RETCODE                                         0275
*    RESPECIFY (REG8) UNRESTRICTED;                        /*@Z427VLS*/
*  END;                                                    /*@Z427VLS*/
*RESPECIFY (REG15) RESTRICTED;                             /*@Z427VLS*/
@RF00235 DS    0H                                                  0279
*REG15 = RETCODE;                                          /*@Z427VLS*/
         LH    REG15,RETCODE                                       0279
*RETURN;                                                   /*@Z427VLS*/
@EL00001 L     @13,4(,@13)                                         0280
@EF00001 DS    0H                                                  0280
@ER00001 L     @14,12(,@13)                                        0280
         LM    @00,@04,20(@13)                                     0280
         LM    @06,@12,44(@13)                                     0280
         BR    @14                                                 0280
*RESPECIFY (R2,REG7,REG3,REG5,REG6,REG8,REG9,REG15) UNRESTRICTED;  0281
*END   IFCESUMS                                            /*@Z427VLS*/
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.      *
*/*%INCLUDE SYSLIB  (COMTABLE)                                        *
*;                                                                 0282
@DATA    DS    0H
@CH00592 DC    H'11'
@SC00603 CLC   SMVARID(0,REG6),LRVARID(REG7)
@SM00605 MVC   SMVARID(0,REG6),LRVARID(REG7)
         DS    0F
@SA00001 DS    18F
@TF00001 DS    F
         DS    0F
@CF00052 DC    F'1'
@CF00078 DC    F'6'
@CF00063 DC    F'8'
@CF00065 DC    F'12'
@CF00086 DC    F'16'
@CF00473 DC    F'22'
@CF00591 DC    F'32'
@CF00598 DC    F'-9'
@CF00600 DC    F'-4'
@CF00571 DC    XL4'0F'
         DS    0D
SAVER6   DS    A
K        DS    F
SUMSPEC  DS    A
HDRBUMP  DS    F
SMWHERE  DS    A
J        DS    H
RETCODE  DS    H
SHIFT    DS    H
@TS00001 DS    CL1
@CB00503 DC    X'000F'
SWES     DC    X'00'
         ORG   SWES
TCAMSWIT DS    BL1
TTYPSWIT EQU   SWES+0
FOUND    EQU   SWES+0
VALIDSHR EQU   SWES+0
EXIT     EQU   SWES+0
         ORG   SWES+1
HOLDID   DS    CL10
         ORG   HOLDID
HOLDTYPE DS    CL5
HOLDCPUN DS    CL5
         ORG   HOLDID+10
X3790    DC    X'40F1'
@NM00012 DS    CL10
         ORG   @NM00012
SHR34XXX DS    CL5
         ORG   SHR34XXX
SHR34CUA DS    CL2
SHR34CPU DS    CL3
         ORG   @NM00012+5
SHR34XXD DS    CL5
         ORG   SHR34XXD
@NM00013 DS    CL2
         ORG   @NM00013
SHR34XDD DS    BL1
@NM00014 EQU   @NM00013+0
SHR34CUX DS    BL1
         ORG   SHR34XXD+2
@NM00015 DS    CL3
         ORG   @NM00012+10
SAVERTYP DS    CL1
SAVECUA  DS    CL3
SUPERZAP DC    3CL10'SUPERZAP'
PATCH    DC    20H'0'
IFCESUMS CSECT
         DC    S(SUPERZAP)
IFCESUMS CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
R2       EQU   @02
REG3     EQU   @03
REG4     EQU   @04
REG5     EQU   @05
REG6     EQU   @06
REG7     EQU   @07
REG8     EQU   @08
REG9     EQU   @09
REG12    EQU   @12
REG15    EQU   @15
R0       EQU   @00
R1       EQU   @01
R10      EQU   @10
R11      EQU   @11
R12      EQU   @12
R13      EQU   @13
R14      EQU   @14
R15      EQU   @15
R3       EQU   @03
R4       EQU   @04
R5       EQU   @05
R6       EQU   @06
R7       EQU   @07
R8       EQU   @08
R9       EQU   @09
PARM     EQU   0
RECTYPE  EQU   PARM
SWITCHES EQU   PARM+2
DEBUG    EQU   PARM+4
DEBUG14  EQU   DEBUG+1
DEBUGA   EQU   PARM+8
MISC     EQU   PARM+12
PRINTES  EQU   MISC
OPENCLSE EQU   PARM+13
OPENIO   EQU   OPENCLSE
CLOSEIO  EQU   OPENCLSE+2
DATENOW  EQU   PARM+17
STDT     EQU   PARM+23
STDATE   EQU   STDT
PSTD     EQU   STDATE+1
ENDDT    EQU   PARM+31
ENDDATE  EQU   ENDDT
PEND     EQU   ENDDATE+1
STTIME1  EQU   PARM+39
ENDTIME1 EQU   PARM+43
STTIME2  EQU   PARM+47
ENDTIME2 EQU   PARM+51
STRTDATE EQU   PARM+55
@NM00007 EQU   PARM+75
ERRID    EQU   PARM+92
IDTIMEA  EQU   ERRID+6
IDTIME   EQU   IDTIMEA
CCHHRLNG EQU   PARM+112
ADIOHND  EQU   PARM+124
ADIFCMSG EQU   PARM+128
ADEDITB  EQU   PARM+132
EVPTR    EQU   PARM+136
SORTADR  EQU   PARM+140
CUAPTR   EQU   PARM+152
DEVPTR   EQU   PARM+156
MODPTR   EQU   PARM+160
SERPTR   EQU   PARM+164
VOLPTR   EQU   PARM+168
CPUPTR   EQU   PARM+172
CPCUAPTR EQU   PARM+176
LIBADPTR EQU   PARM+180
SYMCDPTR EQU   PARM+184
SYSUMPTR EQU   PARM+188
TRENPTR  EQU   PARM+192
SHAREPTR EQU   PARM+196
MERDCPTR EQU   PARM+208
DUMPTABL EQU   PARM+228
DUMPNUM  EQU   DUMPTABL
DUMPINFO EQU   DUMPTABL+4
DUMPADR  EQU   DUMPINFO
DUMPSIZE EQU   DUMPINFO+4
TRENDONE EQU   0
TREGEN   EQU   TRENDONE+8
TRECCH0  EQU   TREGEN+8
TREND2   EQU   0
TRENDKEY EQU   TREND2
TRENDRT  EQU   TRENDKEY+1
TRENCPUS EQU   TRENDKEY+3
TRENDITM EQU   TRENDKEY+4
EVTABLE  EQU   0
EVSTOP   EQU   EVTABLE
EVKEY    EQU   EVTABLE+6
SORTABLE EQU   0
SORTKEY  EQU   SORTABLE
SORTCCHR EQU   SORTABLE+5
SYSUMONE EQU   0
SYSUM2   EQU   0
SYSUMKEY EQU   SYSUM2
SYSRT    EQU   SYSUMKEY+1
SYSCPUS  EQU   SYSUMKEY+3
SYSITEM  EQU   SYSUMKEY+4
SHARE    EQU   0
SHARENUM EQU   SHARE
SHAREIO  EQU   SHARE+2
SHRCUCPU EQU   SHAREIO
SHARECUA EQU   SHRCUCPU
SHAREDX  EQU   SHARECUA
SHARECUB EQU   SHAREIO+5
SHARSERB EQU   SHAREIO+7
EDITLOAD EQU   0
EDITABLE EQU   EDITLOAD+4
CUA      EQU   0
CUAVAL   EQU   CUA+2
DEVICE   EQU   0
MODELS   EQU   0
DEVSERAL EQU   0
VOLUME   EQU   0
CPUS     EQU   0
CPUCUAS  EQU   0
CPUCUAV  EQU   CPUCUAS+2
LIBADR   EQU   0
SYMCODE  EQU   0
SYMVAL   EQU   SYMCODE+2
MERIDIAN EQU   0
SPECIAL  EQU   0
SUMMARY  EQU   0
SMCOUNTS EQU   0
EDTABPTR EQU   SMCOUNTS
FWARDPTR EQU   SMCOUNTS+4
SCCOUNT  EQU   SMCOUNTS+8
RECORDID EQU   SMCOUNTS+10
SMCWITCH EQU   SMCOUNTS+20
SMCTCAM  EQU   SMCWITCH
SCCOUNTR EQU   SMCOUNTS+22
@NM00017 EQU   0
SMTERMNL EQU   @NM00017+22
@NM00019 EQU   0
SMVARID  EQU   @NM00019+22
SMTRECID EQU   SMVARID
SMTTYPID EQU   SMVARID+1
SMTTYP0  EQU   SMVARID+3
SMLOGREC EQU   0
@NM00021 EQU   SMLOGREC
LRTTYP   EQU   @NM00021
LRSWITCH EQU   @NM00021+2
LRSWCH2  EQU   LRSWITCH+1
SHRTSW   EQU   LRSWCH2
LRDISMNT EQU   LRSWCH2
LRTRECID EQU   SMLOGREC+4
@NM00026 EQU   SMLOGREC+5
LRVARIDF EQU   @NM00026
LRVARIDS EQU   LRVARIDF
LRCPUNOS EQU   SMLOGREC+17
LRTMCUA  EQU   SMLOGREC+24
LRVARID  EQU   SMLOGREC+26
LRTTYPID EQU   LRVARID
LRTSCUA  EQU   LRVARID+4
LRDEVTYP EQU   SMLOGREC+54
LRTCUA   EQU   SMLOGREC+58
LRTCAMID EQU   SMLOGREC+70
LRTERMNL EQU   SMLOGREC+72
SMACCTAB EQU   0
SMSUMTAB EQU   0
STHEADER EQU   SMSUMTAB
CONTRPTR EQU   STHEADER
SMTABELM EQU   STHEADER+8
SCNTSIZE EQU   STHEADER+12
STCNTROL EQU   0
STFLAG   EQU   STCNTROL
SUMFLAG  EQU   STFLAG
STMASK   EQU   STCNTROL+1
LROFFSET EQU   STCNTROL+2
STSPCPTR EQU   LROFFSET
SCOFFSET EQU   STCNTROL+4
IFCMSG   EQU   0
IOHND    EQU   0
TRECCH   EQU   TRECCH0
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
@NM00033 EQU   STHEADER+4
@NM00032 EQU   SMLOGREC+71
@NM00031 EQU   SMLOGREC+60
@NM00030 EQU   SMLOGREC+56
@NM00029 EQU   SMLOGREC+42
@NM00028 EQU   LRVARID+2
@NM00027 EQU   SMLOGREC+22
@NM00025 EQU   LRSWCH2
@NM00024 EQU   LRSWCH2
@NM00023 EQU   LRSWITCH
@NM00022 EQU   @NM00021+1
@NM00020 EQU   @NM00019
@NM00018 EQU   @NM00017
@NM00016 EQU   SMCWITCH
MODEL    EQU   MERIDIAN+2
MRDNUMBR EQU   MERIDIAN
SYMVAL2  EQU   SYMVAL+2
SYMVAL1  EQU   SYMVAL
SYMCDNUM EQU   SYMCODE
LIBVAL   EQU   LIBADR+2
LIBADNUM EQU   LIBADR
CPUCUX3  EQU   CPUCUAV+5
CPUCUX2  EQU   CPUCUAV+3
CPUCUX1  EQU   CPUCUAV
CPCUANUM EQU   CPUCUAS
CPUVAL   EQU   CPUS+2
CPUNUM   EQU   CPUS
VOLVAL   EQU   VOLUME+2
VOLNUM   EQU   VOLUME
SERVAL   EQU   DEVSERAL+2
SERNUM   EQU   DEVSERAL
MODVAL   EQU   MODELS+2
MODNUM   EQU   MODELS
MDRVAL   EQU   DEVICE+204
MDRNUM   EQU   DEVICE+202
DEVVAL   EQU   DEVICE+2
DEVNUM   EQU   DEVICE
CUA2     EQU   CUAVAL+2
CUA1     EQU   CUAVAL
CUANUM   EQU   CUA
LOADPTR  EQU   EDITABLE+8
LOADNAME EQU   EDITABLE
EDITNUM  EQU   EDITLOAD
SHARLET  EQU   SHAREIO+10
SHARSERA EQU   SHRCUCPU+2
SYSTEMP  EQU   SYSUM2+9
SYSPERM  EQU   SYSUM2+7
SYSDEV   EQU   SYSUM2+5
SYSOLDA  EQU   SYSITEM
SYS3705  EQU   SYSITEM
SYSOLD   EQU   SYSCPUS
SYSCPU   EQU   SYSCPUS
SYSCUA   EQU   SYSRT
SYSGROUP EQU   SYSUMKEY
SYSUMEOD EQU   SYSUMONE+96
SYSUMPER EQU   SYSUMONE+92
SYSUMPEA EQU   SYSUMONE+88
SYSUMPEI EQU   SYSUMONE+84
SYSUMCH  EQU   SYSUMONE+20
SYSUMMCN EQU   SYSUMONE+16
SYSUMMCR EQU   SYSUMONE+12
SYSUMNXT EQU   SYSUMONE+8
SYSUMIPL EQU   SYSUMONE+4
SYSUMNUM EQU   SYSUMONE
SORTCORE EQU   SORTCCHR
SORTTIME EQU   SORTKEY+1
SORTYEAR EQU   SORTKEY
EVLETTER EQU   EVKEY+5
EVSERIAL EQU   EVKEY+2
EVMODEL  EQU   EVKEY
EVNUM    EQU   EVTABLE+4
EVDAY    EQU   EVSTOP+1
EVYEAR   EQU   EVSTOP
TRETMP   EQU   TREND2+10
TREPRM   EQU   TREND2+8
TRENDDEV EQU   TREND2+6
TRENDDAT EQU   TRENDKEY+5
TRENDOD  EQU   TRENDITM
TREND037 EQU   TRENDITM
TRENDOLD EQU   TRENCPUS
TRENDCPU EQU   TRENCPUS
@NM00011 EQU   TRENDRT+1
TRENDCUA EQU   TRENDRT
TRENDGRP EQU   TRENDKEY
TREPRE   EQU   TREGEN+72
TRECCHF  EQU   TREGEN+68
TRECCHE  EQU   TREGEN+64
TRECCHD  EQU   TREGEN+60
TRECCHC  EQU   TREGEN+56
TRECCHB  EQU   TREGEN+52
TRECCHA  EQU   TREGEN+48
TRECCH9  EQU   TREGEN+44
TRECCH8  EQU   TREGEN+40
TRECCH7  EQU   TREGEN+36
TRECCH6  EQU   TREGEN+32
TRECCH5  EQU   TREGEN+28
TRECCH4  EQU   TREGEN+24
TRECCH3  EQU   TREGEN+20
TRECCH2  EQU   TREGEN+16
TRECCH1  EQU   TREGEN+12
TREMCH   EQU   TREGEN+4
TREIPL   EQU   TREGEN
TRENUM   EQU   TRENDONE+4
TRENEXT  EQU   TRENDONE
@NM00010 EQU   PARM+212
RECLNGT1 EQU   PARM+204
FRAMEPTR EQU   PARM+200
PRINTADR EQU   PARM+148
ADCPUT   EQU   PARM+144
LINECT   EQU   PARM+120
RECLNGTH EQU   CCHHRLNG+6
@NM00009 EQU   CCHHRLNG+5
RECCCHHR EQU   CCHHRLNG
USERPGM  EQU   PARM+102
IDTSEC   EQU   IDTIME+3
IDSEC    EQU   IDTIME+2
IDMIN    EQU   IDTIME+1
IDHOUR   EQU   IDTIME
IDASID   EQU   ERRID+4
IDCPU    EQU   ERRID+3
@NM00008 EQU   ERRID+2
IDVALUE  EQU   ERRID
NUMDAYS  EQU   PARM+88
SORTNUM  EQU   PARM+84
TABSIZE  EQU   PARM+80
SYSRETRN EQU   @NM00007
@NM00006 EQU   PARM+72
WRTHRSH  EQU   PARM+69
RDTHRSH  EQU   PARM+66
TERM     EQU   PARM+58
EVSDAY   EQU   STRTDATE+1
EVSYEAR  EQU   STRTDATE
PENSEC2  EQU   ENDTIME2+2
PENMIN2  EQU   ENDTIME2+1
PENHOUR2 EQU   ENDTIME2
PSTSEC2  EQU   STTIME2+2
PSTMIN2  EQU   STTIME2+1
PSTHOUR2 EQU   STTIME2
PENSEC1  EQU   ENDTIME1+2
PENMIN1  EQU   ENDTIME1+1
PENHOUR1 EQU   ENDTIME1
PSTSEC1  EQU   STTIME1+2
PSTMIN1  EQU   STTIME1+1
PSTHOUR1 EQU   STTIME1
@NM00005 EQU   ENDDT+4
PENDY    EQU   PEND+1
PENYR    EQU   PEND
@NM00004 EQU   ENDDATE
@NM00003 EQU   STDT+4
PSTDY    EQU   PSTD+1
PSTYR    EQU   PSTD
@NM00002 EQU   STDATE
YEARNOW  EQU   DATENOW+4
@NM00001 EQU   DATENOW+3
DAYNOW   EQU   DATENOW
CSNAP    EQU   CLOSEIO
CDRCTWRK EQU   CLOSEIO
CSYSIN   EQU   CLOSEIO
CACCDEV  EQU   CLOSEIO
CACCIN   EQU   CLOSEIO
CSERLOG  EQU   CLOSEIO
CEREPPT  EQU   CLOSEIO
CTOURIST EQU   CLOSEIO
OSNAP    EQU   OPENIO
ODRCTWRK EQU   OPENIO
OSYSIN   EQU   OPENIO
OACCDEV  EQU   OPENIO
OACCIN   EQU   OPENIO
OSERLOG  EQU   OPENIO
OEREPPT  EQU   OPENIO
OTOURIST EQU   OPENIO
PASSFLAG EQU   MISC
PLOGREC  EQU   MISC
ERRORID  EQU   MISC
PSUM     EQU   PRINTES
PEDIT    EQU   PRINTES
PHIST    EQU   MISC
PACC     EQU   MISC
PZERO    EQU   MISC
DEBUG63  EQU   DEBUGA+3
DEBUG62  EQU   DEBUGA+3
DEBUG61  EQU   DEBUGA+3
DEBUG60  EQU   DEBUGA+3
DEBUG59  EQU   DEBUGA+3
DEBUG58  EQU   DEBUGA+3
DEBUG57  EQU   DEBUGA+3
DEBUG56  EQU   DEBUGA+3
DEBUG55  EQU   DEBUGA+2
DEBUG54  EQU   DEBUGA+2
DEBUG53  EQU   DEBUGA+2
DEBUG52  EQU   DEBUGA+2
DEBUG51  EQU   DEBUGA+2
DEBUG50  EQU   DEBUGA+2
DEBUG49  EQU   DEBUGA+2
DEBUG48  EQU   DEBUGA+2
DEBUG47  EQU   DEBUGA+1
DEBUG46  EQU   DEBUGA+1
DEBUG45  EQU   DEBUGA+1
DEBUG44  EQU   DEBUGA+1
DEBUG43  EQU   DEBUGA+1
DEBUG42  EQU   DEBUGA+1
DEBUG41  EQU   DEBUGA+1
DEBUG40  EQU   DEBUGA+1
DEBUG39  EQU   DEBUGA
DEBUG38  EQU   DEBUGA
DEBUG37  EQU   DEBUGA
DEBUG36  EQU   DEBUGA
DEBUG35  EQU   DEBUGA
DEBUG34  EQU   DEBUGA
DEBUG33  EQU   DEBUGA
DEBUG32  EQU   DEBUGA
DEBUG31  EQU   DEBUG+3
DEBUG30  EQU   DEBUG+3
DEBUG29  EQU   DEBUG+3
DEBUG28  EQU   DEBUG+3
DEBUG27  EQU   DEBUG+3
DEBUG26  EQU   DEBUG+3
DEBUG25  EQU   DEBUG+3
DEBUG24  EQU   DEBUG+3
DEBUG23  EQU   DEBUG+2
DEBUG22  EQU   DEBUG+2
DEBUG21  EQU   DEBUG+2
DEBUG20  EQU   DEBUG+2
DEBUG19  EQU   DEBUG+2
DEBUG18  EQU   DEBUG+2
DEBUG17  EQU   DEBUG+2
DEBUG16  EQU   DEBUG+2
DEBUG15  EQU   DEBUG+1
DEBUG13  EQU   DEBUG+1
DEBUG12  EQU   DEBUG+1
DEBUG11  EQU   DEBUG+1
DEBUG10  EQU   DEBUG+1
DEBUG9   EQU   DEBUG+1
DEBUG8   EQU   DEBUG+1
DEBUG7   EQU   DEBUG
DEBUG6   EQU   DEBUG
DEBUG5   EQU   DEBUG
DEBUG4   EQU   DEBUG
DEBUG3   EQU   DEBUG
DEBUG2   EQU   DEBUG
DEBUG1   EQU   DEBUG
DEBUG0   EQU   DEBUG
SORTBRK  EQU   SWITCHES+1
COREFAIL EQU   SWITCHES+1
ANALYSIS EQU   SWITCHES+1
SHIFT3RD EQU   SWITCHES+1
DEVEXCL  EQU   SWITCHES+1
ZEROALL  EQU   SWITCHES+1
NOTALL   EQU   SWITCHES+1
NOSDR    EQU   SWITCHES
TIMESEQ  EQU   SWITCHES
SYSUM    EQU   SWITCHES
PARMTHR  EQU   SWITCHES
TREND    EQU   SWITCHES
SHORTOBR EQU   SWITCHES
PARMMES  EQU   SWITCHES
RDESUM   EQU   SWITCHES
PCCHFRAM EQU   RECTYPE+1
PMCHFRAM EQU   RECTYPE+1
PTTYP    EQU   RECTYPE+1
PEOD     EQU   RECTYPE
PMIH     EQU   RECTYPE
PDDR     EQU   RECTYPE
PIPL     EQU   RECTYPE
PSOFT    EQU   RECTYPE
POBR     EQU   RECTYPE
PCHAN    EQU   RECTYPE
PMCH     EQU   RECTYPE
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RC00095 EQU   @RC00094
@RF00116 EQU   @RC00114
@RC00167 EQU   @RC00148
@RC00160 EQU   @RC00148
@RC00158 EQU   @RC00148
@RC00150 EQU   @RC00148
@RC00185 EQU   @RC00178
@RF00253 EQU   @RC00250
@RC00152 EQU   @RC00150
@RC00163 EQU   @RC00160
@RC00168 EQU   @RC00167
@RC00153 EQU   @RC00152
@ENDDATA EQU   *
         END   IFCESUMS
