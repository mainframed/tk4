         TITLE 'IFCE2860 - EDIT TABLE - LINKNAME=IFCE2860'
         TITLE 'IFCE2860 - EDIT TABLE - LINKNAME=IFCE2860'
         MACRO
&NAME    DSGEN ,
.*                            THIS MACRO GENERATES ONE DSECT WORD
.*                                 FORMATTED FOR THE SUBJECT LOG RECORD
.*                                 EACH OPERAND HAS TWO SUB LISTS. THE
.*                                 FIRST IS THE NAME OF THE LOG ITEM
.*                                 WHILE THE SECOND IS THE # OF BITS TO
.*                                 ALLOCATE FOR THIS ITEM. ITEMS MUST
.*                                 BE DEFINED CONTIGUOUSLY WITHOUT GAPS
.*                                 UNUSED BIT GROUPS MUST BE GIVEN
.*                                 DUMMY NAMES. THE NAMES PROVIDED FOR
.*                                 THE LOG ITEMS MAY THEN BE USED IN
.*                                 THE CONVERSION MACRO INSTRUCTIONS.
         GBLC &ITEM(1500)                                      @YM2954P
         GBLA &ITEMNBR,&BITS(1500),&SHIFT(1500)                @YM2954P
         LCLB  &ONLY1,&CTIND                                   @YM2954P
         LCLA  &START1,&START2,&END1,&END2                     @YM2954P
         LCLC  &SYMBOL,&EQUSYM                                 @YM2954P
         LCLA  &OP,&COUNT,&BYTE,&EQUCNT                        @YM2954P
         ACTR  100000                                          @YM2954P
.START   AIF   (N'&SYSLIST(&OP+1) LT 3).LOOP                   @YM2954P
         AIF   ('&SYSLIST(&OP+1,3)' EQ 'EQU').LOOP     TEST FOR EQU
  AIF   ('&SYSLIST(&OP+1,3)' EQ '' OR '&SYSLIST(&OP+1,4)' EQ '').ERR1
         AIF   ('&SYSLIST(&OP+1,3)' GT '&SYSLIST(&OP+1,4)').ERR3
&START1  SETA  &SYSLIST(&OP+1,3)        GET START COUNT OF 1   @YM2954P
&START2  SETA  &SYSLIST(&OP+1,4)        GET FIRST END COUNT    @YM2954P
         AGO   .SET2A                   BRANCH AROUND          @YM2954P
.ERR1    MNOTE '**FIRST SYMBOL CONCATENATION INCOMPLETE**'     @YM2954P
         MEXIT                                                 @YM2954P
.SET2A   AIF   ('&SYSLIST(&OP+1,5)' EQ ''AND '&SYSLIST(&OP+1,6)' EQ '' X
               ).SET2                   TEST FOR NO SECOND     @YM2954P
  AIF   ('&SYSLIST(&OP+1,5)' EQ '' OR '&SYSLIST(&OP+1,6)' EQ '').ERR2
         AIF   ('&SYSLIST(&OP+1,5)' GT '&SYSLIST(&OP+1,6)').ERR3
&END1    SETA  &SYSLIST(&OP+1,5)        GET START COUNT OF 2   @YM2954P
&END2    SETA  &SYSLIST(&OP+1,6)        GET END COUNT OF 2     @YM2954P
         AGO   .LOOP                                           @YM2954P
.SET2    ANOP                                                  @YM2954P
&ONLY1   SETB  1                        INDICATE ONLY ONE CONCATENATION
         AGO   .LOOP                                           @YM2954P
.ERR2    MNOTE '**SECOND SYMBOL CONCATENATION INCOMPLETE**'    @YM2954P
         MEXIT                                                 @YM2954P
.ERR3    MNOTE '**START GREATER THAN END CONCATENATION**'      @YM2954P
         MEXIT                                                 @YM2954P
.LOOP    ANOP                                                  @YM2954P
&OP      SETA  &OP+1                                           @YM2954P
         AIF   (&OP GT N'&SYSLIST).DONE      TEST IF ALL DONE  @YM2954P
&ITEMNBR SETA  &ITEMNBR+1                                      @YM2954P
         AIF   ('&SYSLIST(&OP,2)' NE '').OK1                   @YM2954P
         MNOTE '**NULL BIT COUNT FIELD**'                      @YM2954P
         MEXIT                                                 @YM2954P
.OK1     ANOP                                                  @YM2954P
&SYMBOL  SETC  '&SYSLIST(&OP,1)'                               @YM2954P
         AIF   ('&SYMBOL' NE '').OK                            @YM2954P
*              *****     LOG ITEM SYMBOL NOT PROVIDED     *****
         AIF   ('&SYSLIST(&OP,3)' NE 'EQU').CNT                @YM2954P
         AGO   .START                   GET NEXT               @YM2954P
.OK      AIF   (N'&SYSLIST(&OP) LT 3).NO3    TEST FOR OLD FORMAT
         AIF   ('&SYSLIST(&OP,3)' EQ 'EQU').EQU   TEST FOR EQU @YM2954P
         AIF   (&ONLY1).OK2             TEST FOR ONLY ONE CONCAT
&SYMBOL  SETC  '&SYMBOL.&START1.&END1'       GET 1 AND 2 CONCAT
         AGO   .NO3                     BRANCH AROUND          @YM2954P
.OK2     ANOP                                                  @YM2954P
&SYMBOL  SETC  '&SYMBOL.&START1'        GET 1 CONCATENATED     @YM2954P
.NO3     ANOP                                                  @YM2954P
&SYMBOL  EQU   *+&BYTE                                         @YM2954P
&ITEM(&ITEMNBR) SETC '&SYMBOL'          GET LABEL IN GLOBAL    @YM2954P
&BITS(&ITEMNBR) SETA &SYSLIST(&OP,2)                           @YM2954P
&SHIFT(&ITEMNBR) SETA &COUNT-&BYTE*8                           @YM2954P
.CNT     ANOP                                                  @YM2954P
&CTIND   SETB  1                        SET COUNT INDICATOR    @YM2954P
&COUNT   SETA  &COUNT+&SYSLIST(&OP,2)                          @YM2954P
&BYTE    SETA  &COUNT/8                                        @YM2954P
         AIF   (N'&SYSLIST(&OP) LT 3).START  TEST FOR OLD FORMAT
         AIF   (&ONLY1).TSTST           TEST FOR ONLY ONE CONCAT
         AIF   (&END1 EQ &END2).TSTST   TEST FOR SECOND END    @YM2954P
&END1    SETA  &END1+1                  INCREMENT COUNT        @YM2954P
&OP      SETA  &OP-1                    DECREMENT INCREMENT    @YM2954P
         AGO   .LOOP                    GENERATE NEXT          @YM2954P
.TSTST   ANOP                                                  @YM2954P
         AIF   (&START1 EQ &START2).LPDONE   TEST FOR END      @YM2954P
         AIF   (&ONLY1).NSET1           TEST FOR ONLY ONE CONCAT
&END1    SETA  &SYSLIST(&OP,5)          RE-INIT SECOND START COUNT
.NSET1   ANOP                                                  @YM2954P
&OP      SETA  &OP-1                    DECREMENT INDEX        @YM2954P
&START1  SETA  &START1+1                INCREMENT FIRST COUNT  @YM2954P
         AGO   .LOOP                    GO DO NEXT             @YM2954P
.LPDONE  ANOP                                                  @YM2954P
&ONLY1   SETB  0                        CLEAR INDICATOR        @YM2954P
         AGO   .START                   GO TEST FOR MORE SUB-LISTS
.DONE    AIF   (&COUNT-&COUNT/8*8 NE 0).ERR  TEST FOR MULTIPLE OF EIGHT
         AIF   (&CTIND EQ 0).END        NO DS IF NO COUNT      @YM2954P
&COUNT   SETA  &COUNT/8                 GET NUMBER OF BYTES    @YM2954P
&NAME    DS    &COUNT.C                                        @YM2954P
.END     MEXIT                                                 @YM2954P
.ERR     MNOTE '**BIT COUNT FLDS DO NOT TOTAL MULTIPLE OF 8**' @YM2954P
         MEXIT                                                 @YM2954P
.EQU     AIF   ('&SYSLIST(&OP,4)' NE '').EQU1     TEST FOR NULL LABEL
.ERR4    MNOTE '**EQU OPERAND OMITTED OR NOT FOUND**'          @YM2954P
         MEXIT                                                 @YM2954P
.EQU1    AIF   (&SYSLIST(&OP,2) LT 16).EQU2  COUNT OVER FIFTEEN
*****               THE FOLLOWING STATEMENT                *****
*****     NUMBER OF BITS EXCEED 15 - DO NOT USE AS BIN     *****
.EQU2    ANOP                                                  @YM2954P
&EQUCNT  SETA  0                        CLEAR COUNTER          @YM2954P
&EQUSYM  SETC  '&SYSLIST(&OP,4)'        GET EQU OPERAND        @YM2954P
.EQULOP  ANOP                                                  @YM2954P
&EQUCNT  SETA  &EQUCNT+1                INCREMENT INDEX        @YM2954P
         AIF   ('&ITEM(&EQUCNT)' EQ '&EQUSYM').EQUOUT  LABEL FOUND?
         AIF   (&EQUCNT EQ &ITEMNBR).ERR4    ALL TESTED?       @YM2954P
         AGO   .EQULOP                  NO-GET NEXT            @YM2954P
.EQUOUT  ANOP                                                  @YM2954P
&ITEM(&ITEMNBR) SETC '&SYMBOL'          GET LABEL NAME         @YM2954P
&BITS(&ITEMNBR) SETA &SYSLIST(&OP,2)    GET NUMBER OF BITS     @YM2954P
&SHIFT(&ITEMNBR) SETA &SHIFT(&EQUCNT)   GET SHIFT COUNT        @YM2954P
&SYMBOL  EQU   &EQUSYM                  THIS SYMBOL EQUATED    @YM2954P
         AGO   .START                   RETURN FOR NEXT        @YM2954P
         MEND                                                  @YM2954P
         EJECT
         MACRO
&NAME    LINE  &DATA,&LABEL,&SKIP=
.*                            THIS MACRO ESTABLISHES THE MARGINS OR
.*                                 COLUMN SETTINGS FOR EACH LINE. IT
.*                                 GENERATES NECESSARY CARRIAGE CONTROL
.*                                 ENTRIES. LASTLY IT DETERMINES THE
.*                                 NUMBER OF ENTRIES ASSOCIATED WITH
.*                                 THE PREVIOUS LINE AND STORES THAT #
.*                                 INTO THE APPROPRIATE BYTE.
.*                            &DATA(1) - CHARACTER POSITION TO BEGIN
.*                                 DATA.
.*                            &DATA(2) - # OF SPACES BETWEEN SUCCESSIVE
.*                                 DATA COLUMN STARTING CHARACTERS.
.*                            &LABEL(1) - CHAR. POS. TO BEGIN LABELS.
.*                            &LABEL(2) - # SPACES BETWEEN LINE'S LABEL
.*                                 STARTING CHARACTERS.
.*                            &SKIP= - # OF LINES TO ADVANCE CARRIAGE
.*                                 TO BEGIN NEXT PRINTED LINE.
.*                            NEW ENTRIES ARE GENERATED ONLY WHEN
.*                                 NECESSARY. OMISSION OF ITEMS MEANS
.*                                 THEY HAVE NOT CHANGED SINCE PREVIOUS
.*                                 SETTINGS. A LINE MACRO IS REQUIRED
.*                                 FOR EACH PRINTED LINE. IF NO SETTING
.*                                 CHANGES ARE REQUIRED ALL OPERANDS
.*                                 ARE OMITTED IN WHICH CASE ONLY THE
.*                                 # OF ENTRIES FOR THE PREVIOUS LINE
.*                                 IS COMPUTED. THIS MACRO MUST BE THE
.*                                 FIRST MACRO INSTRUCTION ISSUED FOR
.*                                 THE SUBJECT LINE
         GBLA  &DB,&DT,&LB,&LT,&NRENTS
         GBLA  &LASTCC,&INITIAL
         GBLC  &NRENTSX
         GBLC  &CARRCON
         GBLB  &TEST
         LCLA  &S
&NAME    DS    0C
         AIF   (&INITIAL EQ 0).FIRSTLN
         LINEND
         AGO   .NTFIRST
.FIRSTLN ANOP
&NRENTSX SETC  'N&SYSNDX'
&INITIAL SETA  1
N&SYSNDX EQU   *
.NTFIRST ANOP
         DC    AL1(0)
         AIF   ('&DATA(1)' EQ '').CKDTABS
         AIF   (&DATA(1) EQ &DB).CKDTABS
&DB      SETA  &DATA(1)
         AGO   .AA
.CKDTABS AIF   ('&DATA(2)' EQ '').NCDATA
         AIF   (&DATA(2) EQ &DT).NCDATA
         AGO   .CC
.AA      AIF   ('&DATA(2)' EQ '').BB
         AIF   (&DATA(2) EQ &DT).BB
.CC      ANOP
&DT      SETA  &DATA(2)
.*                                 CONVERSIONS.
.*                            &LOGITEM - NAME OF DATA ITEM TO BE
.BB      DC    XL2'FFFE'
         DC    FL1'&DB'
         DC    FL1'&DT'
&NRENTS  SETA  &NRENTS+1
.NCDATA  ANOP
         AIF   ('&LABEL(1)' EQ '').CKLTABS
         AIF   (&LABEL(1) EQ &LB).CKLTABS
&LB      SETA  &LABEL(1)
         AGO   .AAA
.CKLTABS AIF   ('&LABEL(2)' EQ '').NCLABEL
         AIF   (&LABEL(2) EQ &LT).NCLABEL
         AGO   .CCC
.AAA     AIF   ('&LABEL(2)' EQ '').BBB
         AIF   (&LABEL(2) EQ &LT).BBB
.CCC     ANOP
&LT      SETA  &LABEL(2)
.BBB     DC    XL2'FFFF'
         DC    FL1'&LB'
         DC    FL1'&LT'
&NRENTS  SETA  &NRENTS+1
.NCLABEL ANOP
         AIF   ('&SKIP' NE '').CONT
         AIF   (&TEST EQ 0).NOCHANG
&S       SETA  &LASTCC
         AGO   .DEFAULT
.CONT    ANOP
         AIF   (&TEST EQ 0).AB
&S       SETA  &SKIP
.DEFAULT ANOP
         ORG   &CARRCON+3
         DC    AL.3(0),AL.2(&S),AL.3(1)
         ORG
&LASTCC  SETA  &S
&TEST    SETB  0
         AGO   .DD
.AB      AIF   (&SKIP EQ &LASTCC).NOCHANG
A&SYSNDX DC    XL2'FFFB'
         DC    AL.3(0),AL.2(&SKIP),AL.3(1)
         DC    FL1'9'
&LASTCC  SETA  &SKIP
&TEST    SETB  1
&CARRCON SETC  'A&SYSNDX'
&NRENTS  SETA  &NRENTS+1
.DD      ANOP
.NOCHANG ANOP
         MEND
         EJECT
         MACRO
         BIN   &LOGITEM,&SKIP$OR
.*                                 &LOGITEM - NAME OF ITEM IN LOG
.*                                      RECORD DSECT
.*                                 &SKIP$OR - NBR OF SPACES TO SKIP ON
.*                                 MULTIPLE PRINT OR NBR OF SPACES
.*                                      TO BACK UP FROM COLUMN FOR
.*                                      START OF PRINTING. THE LETTER
.*                                      B PRECEEDS THE NUMBER (B5) IF
.*                                      THE LATTER IS DESIRED. OMISSION
.*                                      OF THIS OPERAND FORCES OPTION 2
.*                                      WITH BACKUP SPACING EQUAL TO
.*                                 THE NUMBER OF BITS IN THE ITEM
.*                                 DEFINITION (VIA MACRO 'DSGEN').
.*                            A LIMIT OF 15 BITS IS IMPOSED FOR THE
.*                                 TOTAL NUMBER OF BITS TO PRINT.
         GBLC  &ITEM(1500)
         GBLA  &ITEMNBR,&BITS(1500),&SHIFT(1500),&NRENTS
         GBLC  &DSECT
         LCLB  &B
         LCLA  &IBITS,&NDX,&ISHIFT,&K
         LCLA  &TEMP,&T
         LCLC  &S
.LOOP    ANOP
&NDX     SETA  &NDX+1
         AIF   ('&ITEM(&NDX)' EQ '&LOGITEM').FOUND
         AIF   (&NDX LT &ITEMNBR).LOOP
         MNOTE *,'YOU BLEW IT'
         ROUTINE DUM,SKIPPER
         MEXIT
.FOUND   ANOP
&ISHIFT  SETA  &SHIFT(&NDX)
&IBITS   SETA  &BITS(&NDX)
&T       SETA  &IBITS-1
&B       SETB  0
         AIF   ('&SKIP$OR' EQ '').BACKUP
&K       SETA  K'&SKIP$OR
&B       SETB  ('&SKIP$OR'(1,1) EQ 'B')
&S       SETC  '&SKIP$OR'(&B+1,&K-&B)
&T       SETA  &S
.BACKUP  ANOP
&NRENTS  SETA  &NRENTS+1
&TEMP    SETA  &ISHIFT
A&SYSNDX DC    AL.12(&LOGITEM-&DSECT),XL.4'&TEMP'
         AIF (&IBITS EQ 1 AND &B EQ 0).OUT
         ORG   A&SYSNDX
&B       SETB  1
         DC    AL.12(&LOGITEM-&DSECT),XL.4'C'
         DC    BL.1'&B',AL.7(&T),AL.4(&IBITS),FL.4'&ISHIFT'
.OUT     ANOP
         MEND
         EJECT
         MACRO                                                 @YL02021
         HEX   ,                                               @YL02021
.*                            THIS MACRO FACILITATES GENERATION OF THE
.*                                 TABLE ENTRIES SPECIFYING HEX TYPE
.*                                 CONVERSIONS.                @YL02021
.*                            &SYSLIST(&OP,1) - NAME OF DATA ITEM TO BE
.*                                 CONVERTED                   @YL02021
.*                            &SYSLIST(&OP,2) - # OF SPACES TO SKIP ON
.*                                 MULTIPLE PRINT OR NBR OF SPACES TO
.*                                 BACK UP FROM COLUMN FOR START OF
.*                                 PRINTING. THE LETTER B PRECEEDS THE
.*                                 NUMBER (B8) IF THE LATTER OPTION IS
.*                                 DESIRED. OMISSION OF THIS OPERAND
.*                                 FORCES OPTION 2 WITH BACKUP SPACING
.*                                 EQUAL TO THE NUMBER OF BYTES SPECI-
.*                                 FIED BY THE NEXT OPERAND (TWICE THIS
.*                                 NUMBER IF SUFFIX IS EXPLICITLY OR
.*                                 IMPLICITLY B).              @YL02021
.*                            &SYSLIST(&OP,3) - NUMBER OF BYTES TO
.*                                 PROCESS. THIS NUMBER IS SUFFIXED
.*                                 WITH AN L,R, OR B TO STIPULATE
.*                                 PRINTING OF THE LEFT HALF, RIGHT
.*                                 HALF, OR BOTH HALVES OF THE BYTE
.*                                 RESPECTIVELY. OMISSION OF THIS
.*                                 OPERAND DEFAULTS TO B WITH THE NUM-
.*                                 BER OF BYTES EQUAL TO THE ITEM LNGTH
.*                            A NEW ENTRY IS GENERATED ONLY WHEN NECES-
.*                                 SARY. THIS MACRO MUST BE THE FIRST
.*                                 MACRO INSTRUCTION ISSUED FOR THE
.*                                 SUBJECT LINE(S).            @YL02021
         GBLC &ITEM(1500),&DSECT                               @YL02021
         GBLA &ITEMNBR,&BITS(1500),&SHIFT(1500),&NRENTS        @YL02021
         GBLA  &INITIAL                                        @YL02021
         GBLB  &DIAGTST,&DIAGSET,&DIAGLIN                      @YL02021
         LCLB  &B,&SUB                                         @YL02021
         LCLA  &IBITS,&NDX,&ISHIFT,&K,&T,&CODE,&BYTESP,&OP     @YL02021
         LCLC  &S,&LETTER                                      @YL02021
         AIF   (&DIAGTST EQ 0).NOMSG                           @YL02021
         AIF   (&INITIAL EQ 0).NOMSG                           @YL02021
         AIF   (&DIAGLIN EQ 1).NOMSG                           @YL02021
         MNOTE '**NO LINE ASSOCIATED WITH THIS DATA**'         @YL02021
*****THE FOLLOWING GENERATED FOR TEST PURPOSES*****            @YL02021
*        LINE                                                  @YL02021
         LINE                                                  @YL02021
.NOMSG   ANOP                                                  @YL02021
         AIF   (K'&SYSLIST(1) EQ K'&SYSLIST(1,1)).LOOP         @YL02021
&SUB     SETB  1                                               @YL02021
.LOOP    ANOP                                                  @YL02021
&OP      SETA  &OP+1                                           @YL02021
.LOOP1   ANOP                                                  @YL02021
&NDX     SETA  &NDX+1                                          @YL02021
         AIF   ('&ITEM(&NDX)' EQ '&SYSLIST(&OP,1)').FOUND      @YL02021
         AIF   (&NDX LT &ITEMNBR).LOOP1                        @YL02021
         MNOTE '**LOG ITEM NOT DEFINED**'                      @YL02021
         MEXIT                                                 @YL02021
.FOUND   ANOP                                                  @YL02021
&ISHIFT  SETA  &SHIFT(&NDX)                                    @YL02021
&IBITS   SETA  &BITS(&NDX)                                     @YL02021
         AIF   (&ISHIFT EQ 0 OR &ISHIFT EQ 4).ALIGN            @YL02021
.ERR     MNOTE '**DATA NOT ALLIGNED ON HEX OR BYTE BOUNDARY**' @YL02021
         MEXIT                                                 @YL02021
.ALIGN   ANOP                                                  @YL02021
&CODE    SETA  1                                               @YL02021
         AIF   (&SUB EQ 1).SUBA                                @YL02021
&K       SETA  K'&SYSLIST(3)                                   @YL02021
         AGO   .SUBB                                           @YL02021
.SUBA    ANOP                                                  @YL02021
&K       SETA  K'&SYSLIST(&OP,3)                               @YL02021
.SUBB    ANOP                                                  @YL02021
         AIF   (&IBITS-(&IBITS/4)*4 EQ 0).OK                   @YL02021
         MNOTE '**BIT LENGTH SPECIFICATION INCONSISTENT WITH CONTROL**'
         MEXIT                                                 @YL02021
.OK      AIF   (&SUB EQ 1).SUBC                                @YL02021
         AIF   ('&SYSLIST(3)' EQ '').USEDEFN                   @YL02021
&LETTER  SETC  '&SYSLIST(3)'(&K,1)                             @YL02021
&S       SETC  '&SYSLIST(3)'(1,&K-1)                           @YL02021
         AGO   .SUBD                                           @YL02021
.SUBC    ANOP                                                  @YL02021
         AIF   ('&SYSLIST(&OP,3)' EQ '').USEDEFN               @YL02021
&LETTER  SETC  '&SYSLIST(&OP,3)'(&K,1)                         @YL02021
&S       SETC  '&SYSLIST(&OP,3)'(1,&K-1)                       @YL02021
.SUBD    ANOP                                                  @YL02021
&BYTESP  SETA  &S                                              @YL02021
         AIF   ('&LETTER' EQ 'B').BOTH                         @YL02021
         AIF   ('&LETTER' EQ 'L').LEFT                         @YL02021
&CODE    SETA  2                                               @YL02021
         AGO   .L                                              @YL02021
.LEFT    ANOP                                                  @YL02021
&CODE    SETA  1                                               @YL02021
         AGO   .L                                              @YL02021
.USEDEFN ANOP                                                  @YL02021
&BYTESP  SETA  &IBITS/8                                        @YL02021
.BOTH    AIF   (&ISHIFT NE 0).ERR                              @YL02021
&CODE    SETA  3                                               @YL02021
&T       SETA  &BYTESP*2-1                                     @YL02021
&S       SETC  '&T'                                            @YL02021
.OK2     AIF   (&ISHIFT EQ 0).L                                @YL02021
&CODE    SETA  2                                               @YL02021
.L       ANOP                                                  @YL02021
&B       SETB  1                                               @YL02021
         AIF   (&SUB EQ 1).SUBE                                @YL02021
         AIF   ('&SYSLIST(2)' EQ '').BACKUP                    @YL02021
&K       SETA  K'&SYSLIST(2)                                   @YL02021
&B       SETB  ('&SYSLIST(2)'(1,1) EQ 'B')                     @YL02021
&S       SETC  '&SYSLIST(2)'(&B+1,&K-&B)                       @YL02021
         AGO   .SUBF                                           @YL02021
.SUBE    ANOP                                                  @YL02021
         AIF   ('&SYSLIST(&OP,2)' EQ '').BACKUP                @YL02021
&K       SETA  K'&SYSLIST(&OP,2)                               @YL02021
&B       SETB  ('&SYSLIST(&OP,2)'(1,1) EQ 'B')                 @YL02021
&S       SETC  '&SYSLIST(&OP,2)'(&B+1,&K-&B)                   @YL02021
.SUBF    ANOP                                                  @YL02021
.BACKUP  ANOP                                                  @YL02021
&NRENTS  SETA  &NRENTS+1                                       @YL02021
         AIF   (&BYTESP GT 0 AND &BYTESP LT 16).SUB0           @YL02021
         MNOTE '**NO. OF BYTES OUTSIDE RANGE OF 1-15**'        @YL02021
         MEXIT                                                 @YL02021
.SUB0    AIF   (&SUB EQ 1).SUBG                                @YL02021
         DC    AL.12(&SYSLIST(1)-&DSECT),XL.4'A'               @YL02021
         AGO   .SUBH                                           @YL02021
.SUBG    ANOP                                                  @YL02021
         DC    AL.12(&SYSLIST(&OP,1)-&DSECT),XL.4'A'           @YL02021
.SUBH    ANOP                                                  @YL02021
         DC    BL.1'&B',FL.7'&S',AL.4(&BYTESP),FL.4'&CODE'     @YL02021
.OUT     ANOP                                                  @YL02021
&NDX     SETA  0                                               @YL02021
         AIF   (&SUB EQ 0).OUTA                                @YL02021
         AIF   (&OP LT N'&SYSLIST).LOOP                        @YL02021
.OUTA    ANOP                                                  @YL02021
         MEND                                                  @YL02021
*  ROUTINE MACRO     ROUTINE MACRO     ROUTINE MACRO     ROUTINE MACRO*
         SPACE 2
         MACRO
&NAME    ROUTINE &LOGITEM,&RNAME
         GBLC  &DSECT,&CSECT
         GBLC  &ITEM(1500)
         GBLA  &SHIFT(1500),&ITEMNBR
         GBLA  &NRENTS
         LCLA  &ISHIFT,&NDX
.LOOP    ANOP
&NDX     SETA  &NDX+1
         AIF   ('&ITEM(&NDX)' EQ '&LOGITEM').FOUND
         AIF   (&NDX LT &ITEMNBR).LOOP
         MNOTE *,'LOG ITEM NOT DEFINED'
         MEXIT
.FOUND   ANOP
&ISHIFT  SETA  &SHIFT(&NDX)
&NAME    DC    AL.12(&LOGITEM-&DSECT),XL.4'D'
         DC    AL.4(&ISHIFT),AL.12(&RNAME-&CSECT)
&NRENTS  SETA  &NRENTS+1
         MEND
         EJECT
*  LABEL MACRO     LABEL MACRO     LABEL MACRO     LABEL MACRO        *
         SPACE 2
         MACRO
&NAME    LABEL &LABEL1,&LABEL2,&LABEL3,&LABEL4,&LABEL5,&LABEL6,        C
               &LABEL7,&LABEL8
.*                            THIS MACRO ALLOWS UP TO ACHT LABELS TO
.*                                 BE SPECIFIED FOR A GIVEN LINE. THE
.*                                 LABELS SHOULD BE ENCLOSED IN QUOTA-
.*                                 TION MARKS. THE COLUMN AND LINE END
.*                                 CONTROLS WILL BE INSERTED BY THE
.*                                 MACRO. OMITTED OPERANDS MEAN NO
.*                                 LABEL REQUIRED FOR RESPECTIVE
.*                                 COLUMN. THIS MACRO WILL ALSO ALERT
.*                                 THE PROGRAMMER TO EXACTLY WHERE THE
.*                                 TABLE MUST BE BROKEN IF NECESSARY
.*                                 TO AVOID EXCEEDING THE MAXIMUM LIMIT
         GBLC &LABELS(2000)
         GBLC  &LBL(100)
         GBLA  &LBLCTR(100)
         GBLA  &LABELNR
         GBLA  &NRENTS,&LPTR
         LCLC  &MARGIN,&TACK
         LCLC  &TEXT
         LCLA  &OP,&K,&START,&NRCHAR,&REMAIN
&MARGIN  SETC  '*'
         AIF   ('&NAME' EQ '').LOOPOUT
&LPTR    SETA  &LPTR+1
&LBL(&LPTR) SETC '&NAME'
&LBLCTR(&LPTR) SETA &LABELNR+1
.LOOPOUT ANOP
&OP      SETA  &OP+1
&K       SETA  K'&SYSLIST(&OP)
         AIF (&K GE 2).NORM
&K       SETA  2
.NORM    ANOP
&START   SETA  2
         AIF (&OP LT N'&SYSLIST).NOTLAST
&MARGIN  SETC  '$'
.NOTLAST ANOP
&NRCHAR  SETA  8
&TACK    SETC  ''
.LOOPIN  ANOP
&REMAIN  SETA  &K-&START
         AIF (&REMAIN GE 8).MORE
&TACK    SETC  '&MARGIN'
&NRCHAR  SETA  &REMAIN
.MORE    ANOP
&TEXT    SETC  ''
         AIF (&REMAIN EQ 0).ENDTEXT
&TEXT    SETC  '&SYSLIST(&OP)'(&START,&NRCHAR)
.ENDTEXT ANOP
&LABELNR SETA  &LABELNR+1
&LABELS(&LABELNR) SETC '&TEXT'.'&TACK'
&START   SETA  &START+8
         AIF ('&TACK' EQ '').LOOPIN
         AIF ('&TACK' EQ '*').LOOPOUT
         MEND
         SPACE 2
         MACRO
         LSTART
.*                            THIS MACRO IS ISSUED WHEN THE LABEL AREA
.*                                 OF THE TABLE IS TO BEGIN.
         GBLC &LABELS(2000)
         GBLA  &LABELNR
         GBLC  &LBL(100)
         GBLA  &LBLCTR(100)
         LCLA  &NDX,&CTR
         LINEND
&CTR     SETA  1
.LOOP    ANOP
&NDX     SETA  &NDX+1
         AIF   (&LBLCTR(&CTR) NE &NDX).NOLBL
&LBL(&CTR) DC  C'&LABELS(&NDX)'
&CTR     SETA  &CTR+1
         AGO   .LOOPCTL
.NOLBL   ANOP
         DC    C'&LABELS(&NDX)'
.LOOPCTL AIF   (&NDX LT &LABELNR).LOOP
         MEND
         SPACE 2
         MACRO
         LINEND
.*                            THIS MACRO IS USED ONLY BY THE LINE
.*                                 MACRO TO SET THE NUMBER OF ENTRIES
.*                                 ASSOCIATED WITH EACH LINE.
         GBLA  &NRENTS
         GBLC &NRENTSX
         ORG   &NRENTSX
         DC    FL1'&NRENTS'
         ORG
&NRENTS  SETA  0
B&SYSNDX EQU   *
&NRENTSX SETC  'B&SYSNDX'
         MEND
         GBLC  &DSECT,&CSECT
IFCE2860 CSECT
&CSECT   SETC  'IFCE2860'
&DSECT   SETC  'C2860'
C2860    DSECT
DUM      EQU   *
         DSGEN (XKEY,8),(XRELN,8),(XSWS8,9),(XSWS9,1),(XSWS10,1),      C
               (XSWS11,1),                                             C
               (XSWS12,1),(XSWS13,1),(XSWS14,1),(XSWS15,1)
         DSGEN (XDUM1,13),(XCRH,1),(XDUM3,18)                  @Z30CIMC
         DSGEN (XDATE,32)
         DSGEN (XTIME,32)
         DSGEN (XDUM2,8),(XSER,24)
         DSGEN (XMOD,16),(MCEL,16)
         DSGEN (XJOBN,64)
         DSGEN (XAIO1,16),(XAIO2,16),(XAIO3,16),(XAIO4,16)
         DSGEN (XAIO5,16),(XAIO6,16),(XAIO7,16),(XAIO8,16)
         DSGEN (XFCCWCC,8),(XFCCWDA,24),(XFCCWFL,8),(XFCCW0,8),        C
               (XFCCWCT,16)
         DSGEN (XCSWK,8),(XCSWCA,24)
         DSGEN (XCSWUS0,1),(XCSWUS1,1),(XCSWUS2,1),(XCSWUS3,1),        *
               (XCSWUS4,1),(XCSWUS5,1),(XCSWUS6,1),(XCSWUS7,1),        *
               (XCSWCS0,1),(XCSWCS1,1),(XCSWCS2,1),(XCSWCS3,1),        *
               (XCSWCS4,1),(XCSWCS5,1),(XCSWCS6,1),(XCSWCS7,1),        *
               (XCSWCT,16)
         DSGEN (XECSW,32)
         DSGEN (XDEVT1,16),(XDEVT2,16)
         DSGEN (XCHID,8),(XCUA,24)
         DSGEN (XMPIN,32)
         ORG   XMPIN                                           @YL02021
         DSGEN (VCUA,16),(VLGSZ,16)                            @YL02021
SL130    DSGEN (CLWKEY1,4),(DUM61,4),(CLWCADR,24)
         SPACE 2
SL130A   DSGEN (DUM62,8),(CLWSTAT,8),(CLWCOUNT,16)
         SPACE 2
SL138    DSGEN (CLWBREG,8),(CLWCREG,8),(CLWFREG,5),(CLWCHAD,3),        X
               (CLWUARG,8)
         SPACE 2
SL138A   DSGEN (CLWDARG,24),(CLWSIMRG,8)
         SPACE 2
SL140    DSGEN (CLWARGFL,1),(CLWBRGFL,1),(CLWCHCML,1),(CLWSEQ1,1),     X
               (CLWSEQ2,1),(CLWSEQ3,1),(CLWSEQ4,1),(CLWSEQ5,1),        X
               (CLWCCWV,1),(CLWREAD,1),(CLWWRITE,1),(CLWSETUP,1),      X
               (CLWTIC,1),(CLWTICHZ,1),(CLWPIRPT,1),(CLWCDALT,1),      X
               (CLWLWT,1),(CLWBCCBT,1),(CLWBCOLT,1),(CLWBCTGR,1),      X
               (CLWBCREG,1),(CLWBIT3,1),(CLWBIT2,1),                   X
               (CLWBIT1,1),(CLWCLOCK,8)
         SPACE 2
SL140A   DSGEN (CLWOPIN,1),(DUM63,1),                                  X
               (CLWADOLT,1),(CLWSLOLT,1),(CLWSEROT,1),(CLWCOMOT,1),    X
               (CLWSTIO,1),(CLWHTIO,1),                        @YM6454PX
               (CLWIDA00,1),(CLWDIN00,1),(CLWSTO00,1),         @YM6454PX
               (DUM64,2),(CLWSTOCK,1),(DUM65,2),               @YM6454PX
               (CLWPSPR,1),(CLWPOCAR,1),(CLWP1CAR,1),(CLWP2CAR,1),     X
               (CLWPDIB,1),(CLWPOCRG,1),(CLWP1CRG,1),(CLWP2CRG,1),     X
               (CLWPUAR,1),(CLWP0DAR,1),(CLWP1DAR,1),(CLWP2DAR,1),     X
               (CLWPMBR,1),(CLWPCOMR,1),(CLWPFLAG,1),(CLWPSIMR,1)
         DSGEN (VCCHPR0,1,1,9),(VCCHPR,1,10,16)                @YM2954P
         DSGEN (VCCHPR1,16,EQU,VCCHPR01)                       @YM2954P
         DSGEN (VDUM,24),(VFLAG,8),(VNOPRO,16)                 @YM2954P
         DSGEN (VPROC01,16),(VCHST01,16),(VPROC02,16),(VCHST02,16),    X
               (VPROC03,16),(VCHST03,16),(VPROC04,16),(VCHST04,16),    X
               (VPROC05,16),(VCHST05,16),(VPROC06,16),(VCHST06,16),    X
               (VPROC07,16),(VCHST07,16),(VPROC08,16),(VCHST08,16),    X
               (VPROC09,16),(VCHST09,16),(VPROC10,16),(VCHST10,16),    X
               (VPROC11,16),(VCHST11,16),(VPROC12,16),(VCHST12,16),    X
               (VPROC13,16),(VCHST13,16),(VPROC14,16),(VCHST14,16),    X
               (VPROC15,16),(VCHST15,16),(VPROC16,16),(VCHST16,16)
         EJECT
*
IFCEP000 DSECT
         DS    CL6
         DS    CL1
         DS    CL1
XPRTBUF  DS    15CL8
         DS    5CL8
         DS    3CL8
         DS    CL8
XSWITCH  DS    CL4
*
*      ROUTINE BRANCH TABLE
*
         DS    CL112
*
*      LOAD MODULE ENTRYPOINT NAMES
*
         DS    CL56
*
*      READ/WRITE BUFFER
*
XMCH     DC    XL2'00'
XCNTBUF  DS    CL8
XKEYBUF  DS    CL2
XDADBUF  DS    197CL8
XDUMMY   DS    CL1
         SPACE 3
ERPIB    DSECT                                                    19032
SOFWFLGS DS    CL1                 PROGRAM FLAGS FIELD IN ERPIB   19032
PROBERR  DS    CL1                 PROBABLE SOURCE OF ERROR FIELD 19032
VALFLAGS DS    CL1                 VALIDITY FLAGS FIELD           19032
CMPLBITS DS    CL1                 TERM AND RETRY CODES FIELD     19032
MPINFOFD DS    CL2                 MULTI-PROCESSING INFO FIELD    19032
CHSMS    DS    CL2                 CHANNEL STATUS FIELD           19032
         EJECT
IFCE2860 CSECT
ENTRYPTR DC    A(FORMAT1)
TABLNAME DC    CL8'IFCE2860'
REG9     DC    F'0'
LP       DS    F
SPCLCODE EQU   *
SKIPPER  EQU   *
         BR    14
         SPACE 2
***********************************************************************
*                                                                     *
*                                                                     *
*    ROUTINE TO PICK UP THE CHANNEL ADDRESS WHICH IS NOT ON A BYTE    *
*   BOUNDRY, CONVERT IT TO HEX AND STORE IT IN THE PRINT BUFFER.      *
*                                                                     *
*                                                                     *
***********************************************************************
         SPACE 2
@CHANADR DS    0F
         USING *,15
         STM   14,12,12(13)        SAVE THE REGS
         MVC   MYWORK(1),0(4)
         NI    MYWORK,X'07'
         OI    MYWORK,X'F0'
         S     R3,ONE                   POSITION PRINT BFR
         MVC   0(1,3),MYWORK
         LM    14,12,12(13)        RESTORE THE REGS
         BR    14                  RETURN
ONE      DC    F'1'
*
         DROP  R15
         USING IFCE2860,R9
         USING C2860,R2
SETSOURC STM   R5,R8,XSAVE              SAVE REGS
         XC    NOPRO(4),NOPRO           CLEAR
         CLI   L0(R4),HEX20             TEST REC SOURCE
         BE    SETCCH                   CCH NORMAL
         CLI   L0(R4),HEX21             TEST SOURCE
         BE    SETCCH                   CCH VS2(MVM)
         CLI   L0(R4),HEX22
         BE    SETCCHC                  CHH CONVERTED
         CLI   L0(R4),HEX28
         BE    SETSER1                  SER1 CHAN REC
         CLI   L0(R4),HEX2A
         BE    SETSER1C                 SER1 CHAN REC CONVERTED
         CLI   L0(R4),HEX29
         BE    SETSER0                  SER0 CHAN REC
SETSER0C MVC   CSER0A(L9),CONVERTD      SET CONVERTED MSG
SETSER0  LA    R5,CSER0                 SET SER0 MSG PTR
         B     SETSRC
SETSER1C MVC   CSER1A(L9),CONVERTD      SET CONVERTED MSG
SETSER1  LA    R5,CSER1                 SET SERC MSG PTR
         B     SETSRC
SETCCHC  MVC   CCCHA(L9),CONVERTD       SET CONV MSG
SETCCH   LA    R5,CCCH                  SET CCH PTR
SETSRC   MVC   L0(L14,R3),L0(R5)        MOVE SOURCE TO LINE
         B     RETURN                   RETURN
*
CONVREL  STM   R5,R8,XSAVE              SAVE WORK REGS
         SR    R6,R6                    CLEAR R6
         IC    R6,L0(R4)                PICK UP REL & SYS VALUES
         SRDL  R6,L5                    SAVE REL NO IN R7
        SLL   R6,L2                    MULTIPLY SYS VALUE BY 4
         L     R8,XLABELP               PICK UP LABEL POINTER
         LA    R6,RELTAB(R6)            INDEX INTO TABLE OF SYSTEMS
         MVC   L0(L4,R8),L0(R6)         MOVE SYSTEM NAME INTO LABEL
         SR    R6,R6                    CLEAR R6
         SLDL  R6,L5                    RETREIVE REL NO.
         LTR   R6,R6                    IS IT ZERO
         BZ    NOREL                    BR-YES
         CVD   R6,WORK                  CONVERT IT
         UNPK  L0(L2,R3),WORK+L6(L2)    UNPACK IT INTO PRINT BUFF
         MVZ   L1(L1,R3),L0(R3)         MOVE ON PROPER ZONE
         B     RETURN                   EXIT
NOREL    MVC   L0(L4,R3),NONE           MOVE IN NONE FOR REL
         B     RETURN
ALLFFF   STM   R5,R8,SSAVE              SAVE REGS                43068
AG       CLC   L0(L4,R4),HFFF           IS WORD ALL FF"S         43068
         BNE   OK                       BR - NO                  43068
         L     R5,NOLOGPTR              POINT AROUND           @YM2954P
         ST    R5,REG9                   LOGOUT LINES          @YM2954P
         L     R5,NOLOGLAB                AND                  @YM2954P
         ST    R5,LP                       LABELS              @YM2954P
         MVC   L0(L21,R3),NOLOG
OK       EQU   *
OV       LM    R5,R8,SSAVE              RESTORE REGS             43068
         BR    R14                      EXIT                     43068
SSAVE    DC    4F'0'                    SMALL SAVE AREA          43068
HFFF     DC    X'FFFFFFFF'                                       43068
*
CRHACT   STM   R5,R8,XSAVE                                     @Z30CIMC
         TM    L0(R4),HEX04        CHANNEL RECONFIG ACTIVE     @Z30CIMC
         BO    RETURN              RETURN IF YES               @Z30CIMC
         L     R5,NOCRH            BYPASS CRH MESSAGE PRINTOUT @Z30CIMC
         ST    R5,REG9                                         @Z30CIMC
         L     R5,NOCRH1                                       @Z30CIMC
         ST    R5,LP                                           @Z30CIMC
         B     RETURN                                          @Z30CIMC
SETPGMN  MVC   L0(L8,R3),L0(R4)         MOVE 8 CHAR NAME TO BUFF
         BR    R14
*
SPACER2  LA    R3,L2(R3)                BUMP R3 PTR BY 2
         BR    R14
*
SETHEX   STM   R5,R8,XSAVE              SAVE REGS
         LA    R8,CHARS                 CHAR TABLE PTR
         IC    R7,L0(R4)                PICK UP CHAR
         SLL   R7,L24                   MOVE IT TO HI POS
         SR    R6,R6
         SLDL  R6,L4                    MOVE 4 BITS TO R6
         AR    R6,R8                    INDEX FOR CHARS
         MVC   L0(L1,R3),L0(R6)         MOVE CHAR TO BUFF
         SR    R6,R6
         SLDL  R6,L4                    MOVE LAST 4 BITS TO R6
         AR    R6,R8                    INDEX INTO TABLE
         MVC   L1(L1,R3),L0(R6)         MOVE CHAR
         B     RETURN
*
*
*
*                              SET ACTIVE  I/O UNITS
SETAIO   STM   R5,R8,XSAVE              SAVE REGS
         LR    R5,R3                    SET R5 TO BUFFER
         SH    R5,H43                   POINT R5 TO BEGGIN OF DATA
         SR    R7,R7
         LA    R6,L8                    LOOP COUNT
SETAIOLP CLC   L0(L4,R5),CZEROS         TEST FOR ALL ZEROS
         BE    BLANKOUT                 BE-TO BLANK OUT ZEROS
SETAIOL1 LA    R5,L5(R5)                BUMP COUNT
         BCT   R6,SETAIOLP              LOOP TILL 8 TESTS
         CH    R7,H8                    ARE ALL ACTIVE IO ZERO
         BNE   RETURN                   NO RETURN
         LR    R5,R3                    YES
         SH    R5,H43                   PUT IN NONE
         MVC   L0(L4,R5),NONE           INTO PRINT BUFF
         B     RETURN
BLANKOUT MVC   L0(L4,R5),BLANKS         MOVE IN BLANKS
         LA    R7,L1(R7)                COUNT # OF ZERO FLDS
         B     SETAIOL1                 LOOP
RETURN   LM    R5,R8,XSAVE
         BR    R14
*
*
CHKSW9   TM    L1(R4),HEX40             TEST SWITCHES
CHECKCC  BZ    NOPRT                    IF SWITCHES OFF
         BR    R14                      DONOT PRINT
CHKSW10  TM    L1(R4),HEX20             R15 RETURNED ZERO
         B     CHECKCC                  STOPS PRINTING
CHKSW11  TM    L1(R4),HEX10
         B     CHECKCC
CHKSW12  TM    L1(R4),HEX08
         B     CHECKCC
CHKSW13  TM    L1(R4),HEX04
         B     CHECKCC
CHKSW14  TM    L1(R4),HEX02
         B     CHECKCC
CHKSW15  TM    L1(R4),HEX01
         B     CHECKCC
NOPRT    SR    R15,R15
         BR    R14
*
SETDATE  UNPK  XWORK(L8),L0(L4,R4)      UNPACL DATE
         MVZ   XWORK+L7(L1),XWORK       SET ZONE
         MVC   L0(L3,R3),XWORK+L5       MOVE DAY
         MVC  L6(L2,R3),XWORK+L3
         BR    R14                      RETURN
*
CONVTIME TM    L0(R4),HEX48             TEST FOR NS/BIN CLOCK
         BZ    BINCLOCK                 ZERO IS BINARY CLOCK
         BO    RETURNB                  ONES IS FOR CONV TIME
         TM    L0(R4),HEX40             IF ON IS N/S CLOCK
         BO    NSCLOCK                  IF OFF TIME OK
RETURNB  BR    R14                      RETURN
*
         USING C2860,R2
ISITVS2  STM   R5,R8,XSAVE             SAVE REGS               @YL02021
         L     R5,DUMPIT                LOCATION OF DUMP PARMS @YM2954P
         MVC   L0(L2,R5),LOGSIZV2       VS 2 RECORD SIZE       @YM2954P
         CLI   XKEY,HEX21              VS2?                    @YL02021
         BE    RETURN                                          @YL02021
         MVC   L0(L2,R5),LOGSIZV1       VS 1 RECORD SIZE       @YM2954P
         SR    R15,R15                 ELIM LABEL              @YL02021
         B     RETURN                                          @YL02021
VS2TEST  STM   R5,R8,XSAVE             SAVE REGS               @YL02021
         CLI   XKEY,HEX21              VS2?                    @YL02021
         BE    RETURN                                          @YL02021
         SR    R5,R5                   CLEAR REG 5             @YL02021
         B     COMPL                    SET UP FOR DUMP AND RET
PROC     STM   R5,R8,XSAVE             SAVE REGS               @YL02021
         SR    R5,R5                   CLEAR REG 5             @YL02021
         L     R5,NOPRO                PLACE THE NO. OF PROC. IN REG 5
         LA    R5,1(R5)                ADD ONE TO REG. 5       @YL02021
         ST    R5,NOPRO                PLACE BACK IN CORE      @YL02021
         CLC   VNOPRO(2),NOPRO+2       COMP. WITH ACTUAL NO. OF PROC.
         BL    COMPL                   FINISHED                @YL02021
         LR    R5,R3                                           @YL02021
         LA    R6,L47                   ADJUST OFFSET          @YM2954P
         SR    R5,R6                                           @YL02021
         MVC   L0(L17,R5),MSGA                                 @YL02021
         MVC   L27(L16,R5),MSGB                                @YM2954P
PROCBIN  LH    R4,L0(R4)           FETCH DATA                  @YM2954P
         SLL   R4,L15                   POSITION DATA
         LA    R6,L46              LENGTH OF LABEL             @YM2954P
         AR    R5,R6               SET UP POINTER              @YM2954P
         LA    R6,L16                   CHANGE COUNT           @YM2954P
TESTIT   SLL   R4,L1                    POSITION CHANNEL IND   @YM2954P
         LTR   R4,R4                    TEST FOR ON LINE       @YM2954P
         BNM   CHANACT                  BRANCH ON LINE         @YM2954P
PRINT    LA    R5,L3(R5)                UP DATE PRINT PTR
         BCT   R6,TESTIT           NEXT CHANNEL                @YM2954P
         B     RETURN                                          @YM2954P
CHANACT  MVI   L0(R5),C'X'         MOVE X TO PRINT             @YM2954P
         B     PRINT                    NEXT CHANNEL           @YM2954P
COMPL    SR    R15,R15                 CLEAR LABEL             @YL02021
         L     R5,DUMP                 LOAD ADDR.              @YL02021
         ST    R5,REG9                                         @YL02021
         L     R5,DUMP1                                        @Z30CIMC
         ST    R5,LP                                           @Z30CIMC
         B     RETURN                                          @YL02021
NOPRO    DC    F'00'                                           @YL02021
MSGA     DC    C'PROCESSOR ADDRESS'                            @YL02021
MSGB     DC    C'CHANNELS ON LINE'                             @YM2954P
LOGSIZV1 DC    XL2'68'                                         @YM2954P
LOGSIZV2 DC    XL2'B0'                                         @YM2954P
DUMPIT   DC    A(DUMPSIZE)                                     @YM2954P
NSCLOCK  STM   R14,R12,L12(R13)         SAVE REGS
         NI    L0(R4),HEXBF
         MVC   XWORK(L8),XDATE          MOVE DATE
         LM    R4,R5,XWORK
         SRDL  R4,L12                   POSITION FOR MICRO SECS
         D     R4,MILLION               CONVERT TO SECONDS
         SRA   R4,L19                   POSITION FOR ROUNDING
         AR    R5,R4                    UP TO NXT SECONDS
         SR    R4,R4
         D     R4,SIXTY                 CONVERT TO NINS
         CVD   R4,XWORK                 CONVERT IT
         LH    R6,XWORK+L6              PICK UP SECONDS
         SRL   R6,L4                    SHIFT OFF ZONE
         STC   R6,XDATE+L6              STORE SECONDS IN  REC
         MVI   XDATE+L7,HEX00           ZERO OUT TH'S
         SR    R4,R4
         D     R4,SIXTY                 CONVERT TO HRS
         CVD   R4,XWORK                 CONVERT REMAINDER MINUTES
         LH    R6,XWORK+L6              PICK UP
         SRL   R6,L4                    DROP ZONE
         STC   R6,XDATE+L5              STORE MINUTES
         SR    R4,R4
         D     R4,T24                   DIVIDE TO GET DAYS
         CVD   R4,XWORK                 CONV REM
         LH    R6,XWORK+L6              PICK UP
         SRL   R6,L4                    DROP ZONE
         STC   R6,XDATE+L4              STORE HRS
         LA    R4,L60                   STARTINY YEAR 1960
         LA    R6,L1                    INC OF 1
LEAPYEAR LA    R7,L3(R4)                ADD 3 YRS
         S     R5,LPYEAR                DAYS IN LEAP YEAR 366
         BZ    THISYEAR                 BR-THIS YR+1
         BM    OVERSHOT                 BR-TOOFAR
         BXLE  R4,R6,REGYEAR            UPDATE YEAR BY ONE
REGYEAR  S     R5,RGYEAR                DAYS IN RG YEAR 365
         BZ    THISYEAR                 BR-YEAR+1
         BM    OVERSHT1                 BR-TOO FAR
         BXLE  R4,R6,REGYEAR            UPDATE AND TRY AGAIN
         B     LEAPYEAR
OVERSHOT A     R5,LPYEAR                ADD BACK LEAP YEAR
         B     THISYEAR                 & USE
OVERSHT1 A     R5,RGYEAR                ADD BACK REG YEAR
         B     THISYER                  & USE
THISYEAR AR    R4,R6                    ADD 1
THISYER  AR    R5,R6                    ADD 1
         CVD   R5,XWORK                 CONVERT DAYS
         MVC   XDATE+L2(L2),XWORK+L6    MOVE DAYS
         CVD   R4,XWORK                 CONVERT YEAR
         LH    R6,XWORK+L6              PICK UP
         SRL   R6,L4                    DROP ZONE
         STC   R6,XDATE+L1              PUT YEAR
         MVI   XDATE,HEX00              SET TO ZERO
RETURNC  OI    XSWS8,HEX08              TURN ON PACKED SWITCH
         LM    R14,R12,L12(R13)         RETURN
         BR    R14
*
*
BINCLOCK STM   R14,R12,L12(R13)         SAVE REGS
         LR    R8,R2                    SAVE RECORD POINTER       P6566
         L     R3,XTIME                 PICK UP TIME IN BIN
         LTR   R3,R3                    TEST FOR ZERO
         BZ    RETURNC                  YES-RETURN
         SRL   R3,L1                    CONVERT
         M     R2,CONSTG                     TO
         D     R2,CONSTH                       DECIMAL
         LA    R4,L32                   BIT COUNTER
         MVI   TIMDIV+L3,DIV1           INITIAL DIVISOR (0A)
BCLOCKA  SR    R2,R2                    CLEAR
         D     R2,TIMDIV                DEVOLP DIGIT-REMAINDER
         LR    R0,R2                    SAVE REM
         SRDL  R0,L4                    SHIFT 4BITS
         SH    R4,H4                    DEC BY 4
         LTR   R3,R3                    DONE
         BZ    BCLOCKB                  BR-YES
         CH    R4,H24                   BITS LESS 24
         BNL   BCLOCKA                  BR-NO
         XI    TIMDIV+L3,DIV2           ALT DIV (0A XI 0C=06)
         B     BCLOCKA
BCLOCKB  SRL   R1,L0(R4)                MOVE TO FINAL POS
         LR    R2,R8                    RESTORE RECORD POINTER    P6566
         ST    R1,XTIME                 STORE BACK
         B     RETURNC
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
L17      EQU   17                                              @YL02021
L12      EQU   12
L14      EQU   14
L27      EQU   27                                              @YM2954P
L46      EQU   46                                              @YM2954P
L47      EQU   47                                              @YM2954P
L19      EQU   19
L24      EQU   24
L25      EQU   25                                              @YL02021
L32      EQU   32
L44      EQU   44                                              @YL02021
L60      EQU   60
L66      EQU   66                                              @YL02021
HEX48    EQU   X'48'
HEXBF    EQU   X'BF'
HEX02    EQU   X'02'
HEX04    EQU   X'04'
HEX08    EQU   X'08'
HEX10    EQU   X'10'
HEX20    EQU   X'20'
HEX21    EQU   X'21'                                           @YL02021
HEX40    EQU   X'40'
HEX22    EQU   X'22'
HEX28    EQU   X'28'
HEX2A    EQU   X'2A'
HEX29    EQU   X'29'
HEX01    EQU   X'01'
HEX00    EQU   X'00'
DIV1     EQU   X'0A'
DIV2     EQU   X'0C'
L0       EQU   0
L1       EQU   1
L2       EQU   2
L3       EQU   3
L4       EQU   4
L5       EQU   5
L6       EQU   6
L7       EQU   7
L8       EQU   8
L9       EQU   9
L10      EQU   10
XWORK    DS    D
XSAVE    DS    4F
CONSTG   DC    X'00030D40'
CONSTH   DC    X'024AE062'
MILLION  DC    F'1000000'
SIXTY    DC    F'60'
T24      DC    F'24'
LPYEAR   DC    F'366'
RGYEAR   DC    F'365'
TIMDIV   DC    F'1'
H4       DC    H'4'
H8       DC    H'8'
H24      DC    H'24'
H43      DC    H'43'
CHARS    DC    C'0123456789ABCDEF'
NONE     DC    C'NONE'
CONVERTD DC    C'CONVERTED'
CZEROS   DC    C'0000'
BLANKS   DC    C'    '
CCCH     DC    CL5'CCH'
CCCHA    DC    CL9' '
CSER1    DC    CL5'SER1'
CSER1A   DC    CL9' '
CSER0    DC    CL5'SER0'
CSER0A   DC    CL9' '
MYWORK   DC    F'0'
VS2FLG   DC    X'00'                                           @YL02021
DUMP     DC    A(DMPSPACE-4)                                   @Z30CIMC
DUMP1    DC    A(DMPSPC1-1)                                    @Z30CIMC
         EJECT
****    NUMERICAL EQUATES
L13      EQU   13
L15      EQU   15
L16      EQU   16
L20      EQU   20
L21      EQU   21
L22      EQU   22
L26      EQU   26
L31      EQU   31
L40      EQU   40
X01      EQU   X'01'
X02      EQU   X'02'
X04      EQU   X'04'
X08      EQU   X'08'
X09      EQU   X'09'
X10      EQU   X'10'
X20      EQU   X'20'
X30      EQU   X'30'
X40      EQU   X'40'
X80      EQU   X'80'
****    ADDRESS EQUATES
AD0      EQU   0
AD4      EQU   4
AD12     EQU   12
AD13     EQU   13
AD14     EQU   14
AD15     EQU   15
AD16     EQU   16
AD20     EQU   20
AD37     EQU   37
AD41     EQU   41
AD45     EQU   45
AD55     EQU   55
AD63     EQU   63
AD69     EQU   69
AD108    EQU   108
****    CONDITION CODE EQUATES
CC1      EQU   1
CC7      EQU   7
CC8      EQU   8
IFCASR01 DS    0H
         USING *,R15
         STM   R14,R12,12(R13)          SAVE REGISTERS
         CLI   XKEY,HEX21                                      @YL02021
         BNE   CONTIN                                          @YL02021
         OI    VS2FLG,X01                                      @YL02021
CONTIN   ST    R13,SVR13               SAVE REG 13             @YL02021
         L     R11,NXENTRY              LOAD SUBROUTINE RETURN ADR
         LTR   R11,R11                  TEST FOR INITIAL ENTRY
         BZ    IFCASR02                 BRANCH IF 0-INITIAL ENTRY
         LM    R12,R10,MYSAVE           RELOAD SUBROUTINE REGS
         BR    R11                      CONTINUE PROCESSING
IFCASR02 DS    0H
         SH    R3,TWOX                  SUBTRACT 2 FROM PRNT BFR ADR
         MVC   L0(L1,R3),L1(R3)         MOVE PRINTER CNTRL CHAR
         LA    R3,L1(R3)                INCREMENT PRNT BFR ADR
         USING XDADBUF,R4
         USING XPRTBUF,R3
         USING XKEYBUF,R2
NEWMOVE  CLI   XKEYBUF+1,REL19          RELEASE 19                19E03
         BE    NEWMOVE1                 BRANCH--YES               19E03
         MVC   CSWORD(8),XDADBUF+54     MOVE CSW                  19E03
         MVC   ERPIBFLD(4),XDADBUF+62   MOVE ERPIB                19E03
         MVC   MULTISYS(4),XDADBUF+74   MOVE CHANSTAT INFO        19E03
         B     CONTINUE                 CONTINUE                  19E03
NEWMOVE1 MVC   CSWORD(8),XDADBUF+46     MOVE CSW                  19E03
         MVC   ERPIBFLD(4),XDADBUF+54   MOVE ERPIB                19E03
         MVC   MULTISYS(4),XDADBUF+66   MOVE CHANSTAT INFO        19E03
CONTINUE LA    R9,ERPIBFLD              DSECT ADDRESSIBILITY      19E03
         USING ERPIB,R9
         MVI   SETUPBFR+1,C'*'                                     MP
         MVC   SETUPBFR+2(78),SETUPBFR+1                           MP
         BAL   BRANPRT,XWRTPRT    MOVE BORDER TO BUFFER AND WRITE  MP
         L     R6,VS2                                          @YL02021
         CLI   0(R6),X'01'                                     @YL02021
         BE    DUMMYTST                                        @YL02021
         MVI   SETUPBFR,C'-'           SKIP TWO SPACES             MP
         TM    MPINFOFD,MSBIT      IS MULTI-SYSTEM BIT SET        19032
         BZ    DUMMYTST      IFNOT,CKECK FOR ENTRANCE FROM ASR01   MP
         LA    SETUPADR,SETUPBFR       ADDRESS OF PRINT BUFFER     MP
         MVC   24(24,SETUPADR),MSHEAD   MOVE MULTI-SYSTEM HDR TO BUFMP
         BAL   BRANPRT,XWRTPRT     WRITE HEADER                    MP
         MVI   SETUPBFR+1,C'*'                                     MP
         MVI   VDSTAR,C'*'                                         MP
         BAL   BRANPRT,XWRTPRT     WRITE LINE DIVIDER              MP
*                                                                  MP
*                                                                  MP
*              THIS ROUTINE FORMATS AND PRINTS A MESSAGE           MP
*              CONTAINING THE ID OF THE FAILING CPU AND            MP
*              THE STATUS OF THE MULTI-PROCESSING SYSTEM           MP
*                                                                  MP
*                                                                  MP
         MVC   10(12,SETUPADR),MSCPUID  MOVE CPUID MESSAGE TO BUFFERMP
         MVC   30(15,SETUPADR),MSCPUST  MOVE CPU STATUS MESSAGE    MP
         MVI   0(SETUPADR),C'-'    SKIP TWO SPACES AFTER LINE      MP
         TM    MPINFOFD,ID         TEST FOR WHICH CPU             19032
         BZ    STATEST       SKIP CPU ID                           MP
         MVI   14(SETUPADR),C'2'   INSERT CPUID=CPU2               MP
STATEST  IC    R1,MPINFOFD         GET MS BYTE IN MPINFO          19032
         SLL   R1,30               CLEAR FOR CPUSTAT               MP
         LTR   R1,R1               TEST FOR ZERO,NEGATIVE OR POSITIVEMP
         BC    12,SHARED           IS STATUS NOT PARTITION         MP
         MVC   45(11,SETUPADR),PART     STATUS WAS PARTITIONED     MP
         B     CHANTEST      GO FOR CHANNEL STATUS                 MP
SHARED   MVC   45(6,SETUPADR),SHAR      SHARED STATUS              MP
         BE    CHANTEST                 WAS CPU RECONFIGURED OUT   MP
         MVC   51(21,SETUPADR),RECON    YES                        MP
         EJECT
*                                                                  MP
*                                                                  MP
*              THIS ROUTINE TESTS A TWO BYTE FIELD                 MP
*              MPINFO FIELD                          TO DETERMINE
*              THE CHANNEL STATUS FOR BOTH CPUS AND FORMAT         MP
*              A MESSAGE TO INDICATE THAT STATUS                   MP
*                                                                  MP
*                                                                  MP
CHANTEST BAL   BRANPRT,XWRTPRT          PRINT INFORMATION          MP
         MVI   0(SETUPADR),C'-'         SKIP TWO SPACES            MP
         MVC   10(27,SETUPADR),CHCNFIG  CHANNEL CONFIGURATION MESSAGEMP
         LA    UPKREG,0                                            MP
         TM    MPINFOFD,ID         WAS CPUID=CPU2                 19032
         BZ    CCHMOVE                 NO                          MP
         MVI   14(SETUPADR),C'2'        YES, ENTER ID 2            MP
CCHMOVE  BAL   BRANPRT,XWRTPRT          PRINT MESSAGE              MP
         LA    R1,7                     LOOP CONTROL               MP
         LA    R2,14(SETUPADR)          PTR TO SLOT FOR 'OFF' MESSAGEMP
         IC    R5,CHSMS(UPKREG)         GET CHANNEL STATUS BYTE    MP
         MVC   10(55,SETUPADR),CHTAB    GET LIST OF CHANNELS       MP
         SLL   R5,24                    POSITION BYTE FOR BIT TESTINGMP
MSLOOP   LTR   R5,R5         IS BIT ON (NEGATIVE REG) OR OFF       MP
         BC    10,MSUPDT                NO                         MP
         MVC   0(3,R2),OFF              CHANNEL OFFLINE            MP
MSUPDT   SLL   R5,1                     MOVE TO NEXT CHANNEL BIT   MP
         LA    R2,8(R2)                 UPDATE MESSAGE POINTER     MP
         BCT   R1,MSLOOP                EXIT AFTER 7-BITS PROCESSED MP
MSREND   BAL   BRANPRT,XWRTPRT          WRITE CHANNEL STATUS MESSAGEMP
         LTR   UPKREG,UPKREG            TEST FOR SECOND TIME THROUGH MP
         BC    7,PRTHD                  BOTH BYTES OF CHANSTAT PRINTED
         LA    UPKREG,1(UPKREG)         PTR TO 2ND.BYTE OF CHANSTATMP
         MVC   10(27,SETUPADR),CHCNFIG  MOVE IN CHANNEL CONFIGURATIONMP
*                                       MESSAGE                    MP
         MVI   0(SETUPADR),C'0'         SKIP SPACE AFTER NEXT MESSAGEMP
         TM    MPINFOFD,ID         ESTABLISH CPUID                19032
         BO    CCHMOVE                  BRANCH IF CPUID=CPU2       MP
         MVI   14(SETUPADR),C'2'        PUT CPU2 IN MESSAGE        MP
         B     CCHMOVE       PRINT MESSAGE                         MP
PRTHD    MVI   SETUPBFR+1,C'*'             SETUP TO PRINT DIVIDER
         MVC   2(78,SETUPADR),1(SETUPADR)
         MVI   SETUPBFR,C'0'               SPACE FIRST
         BAL   BRANPRT,XWRTPRT             PRINT DIVIDER
DUMMYTST LA    SETUPADR,SETUPBFR   GET ADDR OF BUFFER FOR PRINT    MP
         OC    ERPIBFLD+1(3),ERPIBFLD+1  TEST FOR DUMMY ERPIB     19032
         BNE   MSCONT                   CONTINUE IF MEANINGFUL ERPIB MP
         MVI   0(SETUPADR),C'-'         SKIP 2 LINES               MP
         MVC   10(17,SETUPADR),MSNERPIB ERPIB NOT CREATED MESSAGE  MP
         BAL   BRANPRT,XWRTPRT          PRINT INFORMATION          MP
         B     RETCNTL       RETURN CONTROL                        MP
*                                                                  MP
         EJECT
MSCONT   EQU   *                                                   MP
*   *    *    *    *    *    *    *    *    *    *    *    *    *    *
*                          INSTRUCTION ANALYSIS                       *
*        THIS PROGRAM SECTION WILL INSPECT THE FIRST FOUR(4) BITS IN  *
*        THE FIRST BYTE  OF THE              ERPIB AREA, TO DETERMINE *
*        THE INSTRUCTION CAUSING THE ERROR.                           *
         LA    SETUPADR,SETUPBFR       SET UP HEADER BOARDER.
         MVC   SETUPBFR+27(25),HEADER    SET UP HEADER MESSAGE
         MVI   0(SETUPADR),C'0'          SPACE ONE LINE
         BAL   BRANPRT,XWRTPRT
*                                                                     *
*                            TEST FOR INTERRUPT                       *
*                                                                     *
         TM    SOFWFLGS,X'40'          INTERRUPT TEST.
         BZ    INST
         MVC   SETUPBFR(42),ERRINT     BUFFER INTERRUPT MESSAGE.
         B     RITEOUT
*                                                                     *
*   *    *    *    *    *    *    *    *    *    *    *    *    *    *
*                                                                     *
*        BITS 32-35 WILL BE TESTED                                    *
*                                                                     *
INST     MVC   SETUPBFR(33),CAUSERR    TYPE-INST ERROR HEADER.
         TM    SOFWFLGS,X'80'          TEST FOR SIO INSTRUCTION ERROR.
         BO    PRTERSIO                BRANCH TO SETUP PRINT BUFFER.
         TM    SOFWFLGS,X'20'          TEST FOR TIO INSTRUCTION.
         BO    PRTERTIO                BRANCH TO SETUP PRINT BUFFER.
*                                                                     *
PRTERHIO MVC   SET1(3),ERRHIO          MOVE HIO LABEL INTO BUFFER.
         B     RITEOUT                 PREPARE TO WRITE MESSAGE.
*                                                                     *
PRTERSIO MVC   SET1(3),ERRSIO          MOVE SIO LABEL INTO BUFFER.
         B     RITEOUT                 PREPARE TO WRITE MESSAGE.
*                                                                     *
PRTERTIO MVC   SET1(3),ERRTIO          MOVE TIO LABEL INTO BUFFER.
*                                                                     *
RITEOUT  BAL   BRANPRT,XWRTPRT         WRITE OUT APPROPRIATE MESSAGE.
*   *    *    *    *    *    *    *    *    *    *    *    *    *    *
*        THE FOLLOWING PROGRAM SECTION WILL INSPECT THE ERPIBFLD
*        TO DETERMINE IF AN ERPIB IS PRESENT.   IF  ONE IS
*        NOT FOUND, CONTROL WILL BE RETURNED.
*   *    *    *    *    *    *    *    *    *    *    *    *    *    *
         OC    ERPIBFLD+1(3),ERPIBFLD+1  TEST FOR  ERPIB PRESENT  19032
         BZ    NONEXIST                WRITE MSG TO INDICATE NONEXISTS.
         B     TEST1         TEST COMPLETION CODE                  MP
SETVD    EQU   XPRTBUF+33                                          MP
*                         UCB ADDRESS NON-EXISTANT
NONEXIST MVC   SETUPBFR(45),NOUCB        SET UP MSG FOR NO UCB
         BAL   BRANPRT,XWRTPRT         WRITE MESSAGE.
         B     RETCNTL                 RETURN TO CONTROL.
*   *    *    *    *    *    *    *    *    *    *    *    *    *    *
*        THE FOLLOWING PROGRAM SECTION WILL TEST  BYTE 5     OF THE
*        ERPIB FOR A NO RETRY BIT SETTING. IF ON, CONTROL IS RETURNED
*        AFTER MESSAGE IS PRINTED OUT.
*   *    *    *    *    *    *    *    *    *    *    *    *    *    *
*                       OUTPUT RETRY CODE VALUE
*
*   *    *    *    *    *    *    *    *    *    *    *    *    *    *
*                            TEST SOFTWARE FLAGS
TEST     MVC   SETUPBFR(32),RETCDVAL     BUFFER THE BASIC MESSAGE
         IC    REG,CMPLBITS        CONTENTS OF BYTE 8 INTO R3     19032
         TM    VALFLAGS,X'10'            TEST FOR VALID RETRY CODE
         BO    VALFLG              IF VALID, GO SETUP MESSAGE
         MVC   33(43,SETUPADR),NOTVM  SETUP NOT ASSESSABLE MESSAGE
         B     BUFITA           GO PRINT IT
VALFLG   N     REG,MASK            GET RID OF UNNEED BITS
         STC   REG,RCMSG+12        STORE NO. IN RETRY CODE MSG
         OI    RCMSG+12,X'F0'      MAKE PRINTABLE
         MH    REG,CONST
         LA    REG,MSGSTRT(REG)    SET UP MSG INDEX
         MVC   33(44,SETUPADR),0(REG)  MOVE MSG TO BUFFER
BUFIT    BAL   BRANPRT,XWRTPRT     PRINT IT
         MVC   34(14,SETUPADR),RCMSG  MOVE RETRY MSG TO BUFFER
BUFITA   BAL   BRANPRT,XWRTPRT
         TM    CMPLBITS,X'08'      IS DISCONNECT IN SET           19032
         BNO   NOTDISIN            NO, SKIP MSG                   19032
         MVC   SETUPBFR(23),DISCIN SET UP MSG                     19032
         BAL   BRANPRT,XWRTPRT     PRINT MSG                      19032
NOTDISIN EQU   *                                                  19032
*
*                                  TEST NO-RETRY BIT
         TM    SOFWFLGS,X'01'          IF NORETRY BIT IS NOT ON,BRANCH
*                                      TO PRINT VALID INDICATOR MSG.
         BZ    VALIDIND
         MVC   SETUPBFR(28),NORETRY    INDICATES THAT THE BIT WAS ON.
         BAL   BRANPRT,XWRTPRT         WRITE THE MESSAGE.
         B     RETCNTL                 RETURN CONTROL.
VALIDIND MVC   SETUPBFR(29),VALIDITY   RECORDED DATA HEADING TO BUFFER
         BAL   BRANPRT,XWRTPRT         INDICATOR HEADER.
*
*                                  TEST VALID RETRY CODE
*
*
*                            TEST COUNT BIT
         MVC   SETUPBFR(42),VALCOUNT   BUFFER THE BASIC MESSAGE.
         TM    SOFWFLGS,X'02'          TEST COUNT VALIDITY.
         BZ    INVCOUNT                IF OFF, PRINT INVALID MSG.
         MVC   33(9,SETUPADR),37(SETUPADR) MODIFY THE BASIC MESSAGE.
INVCOUNT BAL   BRANPRT,XWRTPRT         WRITE MESSAGE.
*
*                            TEST FOR SENSE DATA STORED
*
         MVC   SETUPBFR(43),SENSDATA   BUFFER THE BASIC MESSAGE.
         TM    SOFWFLGS,X'04'          TEST SENSE BIT.
         BZ    NOSTORE                 IF OFF BRANCH TO WRITE NOSTORE.
         MVC   33(10,SETUPADR),37(SETUPADR) MODIFY THE BASIC MESSAGE.
NOSTORE  BAL   BRANPRT,XWRTPRT         WRITE THE MESSAGE.
*                            TEST UNIT STATUS BIT
         MVC   SETUPBFR(42),INVALUN    BUFFER THE BASIC MESSAGE.
         TM    VALFLAGS,X'08'          TEST FOR VALID UNIT STATUS.
         BZ    WRTOUT                  UNIT STATUS INVALID.
         MVC   33(9,SETUPADR),37(SETUPADR) MODIFY THE BASIC MESSAGE.
WRTOUT   BAL   BRANPRT,XWRTPRT         WRITE MESSAGE.
*
*                            TEST COMMAND ADDRESS BIT
*
         MVC   SETUPBFR(42),INVALCAD   MOVE INVALID COM MSG TO BUFFER.
         TM    VALFLAGS,X'04'          TEST FOR VALID COMMAND ADDRESS.
         BZ    PTOUT                   COMMAND ADDRESS INVALID.
         MVC   33(9,SETUPADR),37(SETUPADR) MODIFY THE BASIC MESSAGE.
PTOUT    BAL   BRANPRT,XWRTPRT         WRITE THE MESSAGE.
*
*                            TEST CHANNEL ADDRESS BIT
*
         MVC   SETUPBFR(42),INVALCHA   MOVE INVALID CHN MSG TO BFR.
         TM    VALFLAGS,X'02'          TEST FOR VALID CHANNEL ADDRESS.
         BZ    OUTWRT                  INVALID CHANNEL ADDRESS.
         MVC   33(9,SETUPADR),37(SETUPADR) MODIFY THE BASIC MESSAGE.
OUTWRT   BAL   BRANPRT,XWRTPRT         WRITE MESSAGE.
*
*                            TEST FOR VALID DEVICE ADDRESS
*
         MVC   SETUPBFR(42),INVALDVA   MOVE INVALID DVC ADDR MSG TO BFR
         TM    VALFLAGS,X'01'          TEST FOR VALID DEVICE ADDRESS.
         BZ    OUTPRT                  INVALID DEVICE ADDRESS.
         MVC   33(9,SETUPADR),37(SETUPADR) MODIFY THE BASIC MESSAGE.
OUTPRT   BAL   BRANPRT,XWRTPRT         WRITE MESSAGE.
*
*        PROBABLE SOURCE OF ERROR
*
         MVC   SETUPBFR(29),PSOERR      INSERT BASE MSG IN BUFFER
         CLI   PROBERR,X'80'            TEST FOR CPU ERROR
         BE    CPUER                    BRANCH TO SET UP CPU ERR MSG
         CLI   PROBERR,X'40'            TEST FOR CHANNEL ERROR
         BE    CHNER                    BRANCH TO SETUP CHANNEL ERROR
         CLI   PROBERR,X'20'       TEST FOR SCU ERROR             19032
         BE    SCUER               YES- GO SET UP FOR SCU ERRMSG  19032
         CLI   PROBERR,X'10'            TEST FOR STORAGE ERROR
         BE    STORGER                  GO SETUP STORAGE ERROR MSG
         CLI   PROBERR,X'08'            TEST FOR I/O INTERFACE ERROR
         BE    INFER                    GO SETUP I/O INTF ERROR MSG
         MVC   30(25,SETUPADR),NOTVM    SETUP NOT ASSESSABLE MESSAGE
         B     WPRMSG                   GO PRINT MSG
CPUER    MVC   30(3,SETUPADR),CPUERMSG  BUFFER CPU ERROR MESSAGE
         B     WPRMSG                   GO PRINT
CHNER    MVC   30(7,SETUPADR),CHANERMS  SETUP CHANNEL ERROR MESSAGE
         B     WPRMSG                   GO PRINT
SCUER    MVC   30(20,SETUPADR),SCUERMS  SET UP SCU MSG            19032
         B     WPRMSG                   GO PRINT IT               19032
STORGER  MVC   30(7,SETUPADR),STOGERMS  SETUP STORAGE ERROR MESSAGE
         B     WPRMSG                   GO PRINT
INFER    MVC   30(13,SETUPADR),IOINFER  SET UP INTERFACE ERROR MESSAGE
WPRMSG   BAL   BRANPRT,XWRTPRT          PRINT MESSAGE
         B     RETCNTL
*
*                            TEST COMPLETION CODE
*
TEST1    MVC   SETUPBFR(23),COMCODE    INSERT COMPLETION CODE MESSAGE
*                                      IN PRINT BUFFER.
         TM    CMPLBITS,X'C0'          TEST FOR COMPLETION CODE '3'.
         BO    SYSRET                  BRANCH FOR SYS RESET MSG OUTPUT.
         TM    CMPLBITS,X'80'          TEST FOR COMPLETION CODE '2'
         BO    SELRET                  BRANCH FOR SEL RESET MSG OUTPUT.
         TM    CMPLBITS,X'40'          TEST FOR COMPLETION CODE '1'
         BO    FORENDSQ                BRANCH FOR FORCED END MSG OUTPUT
*
*                            INTERFACE DISCONNECT
*
         MVC   SET2(29),INTDISCN      SET UP INTERFACE DISCONNECT MSG
         B     WRITER                  MESSAGE AND WRITE IT OUT.
*
*                            SYSTEM RESET
*
SYSRET   MVC   SET2(21),SYSRES        SETUP  THE SYSTEM RESET MSG AND
         B     WRITER                  WRITE IT OUT.
*
*                            SELECTIVE RESET
*
SELRET   MVC   SET2(24),SELRES          SETUP SELECTIVE RESET  MSG AND
         B     WRITER                  AND WRITE IT OUT.
*
*                            FORCED ENDING SEQUENCE
*
FORENDSQ MVC   SET2(31),FORCEND         SETUP FORCE END MESSAGE AND
*                                      WRITE IT OUT.
*
*                            OUTPUT OF COMPLETION
*                              CODE MESSAGES
*
WRITER   BAL   BRANPRT,XWRTPRT
         B     TEST
*
*                                 RETURN CONTROL
*
RETCNTL  EQU   *                                                  19032
         MVI   SETUPBFR+1,C'*'
         MVC   2(78,SETUPADR),1(SETUPADR)
         MVI   0(SETUPADR),C'-'         SETUP TO SPACE TWICE
         BAL   BRANPRT,XWRTPRT
         TM    CSWORD+5,X'06'           TEST FOR CHN OR INTF CTL CHK
         BC    8,MSG                   NO, PRINT LOGOUT MESSAGE.
FIN1     DS    0C
         LA    R0,0                     ZERO WORK REGISTER
         ST    R0,NXENTRY               CLEAR ENTRY POINTER
         L     R13,SVR13                RESTORE REG 13
         LM    R14,R12,12(R13)          RESTORE REGISTERS
         BR    R14                      RETURN
*
*                            PRINT NO-LOGOUT MESSAGE
*
MSG      MVC   SETUPBFR+1(78),ERMSG     MESSAGE IN BUFFER
         BAL   BRANPRT,XWRTPRT
         L     R0,NOLOGPTR              POINT                  @YM2954P
         L     R1,RG9PTR                 AROUND                @YM2954P
         ST    R0,AD0(R1)                 LOGOUT               @YM2954P
         L     R0,NOLOGLAB                 LINES               @YM2954P
         L     R1,LPPTR                     AND                @YM2954P
         ST    R0,AD0(R1)                    LABELS            @YM2954P
         B     FIN1
         SPACE
*                                                                  MP
****    ROUTINE TO RETURN CONTROL TO CONTROL MODULE
XWRTPRT  DS    0C
         ST    BRANPRT,NXENTRY          STORE LINK ADDRESS
         STM   R12,R10,MYSAVE           SAVE SUBROUTINE REGS
         L     R0,RTNPTR                LOAD ADCON FOR RETURN POINTER
         L     R1,RG9PTR                LOAD POINTER TO REG9
         ST    R0,AD0(R1)               STORE RETURN POINTER
         L     R0,LBLPTR                LOAD POINTER TO LABEL
         L     R1,LPPTR                 LOAD POINTER TO LP
         ST    R0,AD0(R1)               STORE LABEL POINTER
         MVI   L0(R3),X09               SET CARRIAGE CTL CHAR
         L     R13,SVR13                RESTORE REG 13
         LM    R14,R12,12(R13)          RESTORE REGISTERS
         BR    R14                      RETURN
*
*                            STORAGE
*
         DS    0F
TYPE     EQU   XDADBUF+5                                           MP
ENVCH    EQU   XDADBUF+56                                          MP
ENVMS    EQU   XDADBUF+63                                          MP
GPRMS    EQU   XDADBUF+248                                         MP
ONEVD    EQU   X'01'                                               MP
TWEN     EQU   X'20'                                               MP
EIGHTY   EQU   X'80'                                               MP
VDSTAR   EQU   XPRTBUF+79                                          MP
PLACE    EQU   ENVCH+32                                            MP
F252     EQU   252                                                 MP
FROMVD   EQU   GPRMS+32                                            MP
OCTVD    EQU     80                                                MP
AREAVD   EQU   GPRMS+92                                            MP
ID       EQU   X'08'                                               MP
MSBIT    EQU   X'10'                                                MP
K0       EQU   0                                                  19E03
K1       EQU   1                                                  19E03
K2       EQU   2                                                  19E03
K4       EQU   4                                                  19E03
K8       EQU   8                                                  19E03
K10      EQU   10                                                 19E03
K20      EQU   20                                                 19E02
K21      EQU   21                                                 19E02
K24      EQU   24                                                 19E03
FOXDOG   EQU   X'FD'                                              19E03
REL19    EQU   19                                                 19E02
XPRTBUF1 EQU   XPRTBUF+1                                          19E03
*
SETUPBFR EQU   XPRTBUF
CSWORD   DC    D'0'                CSW LOCATION                   19032
ERPIBFLD DC    F'0'                LAST HALF ERPIB                19032
MULTISYS DC    F'0'                MULTI-PROCESSING INFO          19032
MASK     DC    F'7'
MYSAVE   DS    15F
SVR13    DS    1F
NXENTRY  DC    F'0'
VS2      DC    A(VS2FLG)                                       @YL02021
RTNPTR   DC    A(PRTERPIB-4)
RG9PTR   DC    A(REG9)
LBLPTR   DC    A(LABELEND-1)
LPPTR    DC    A(LP)
NOLOGPTR DC    A(VS2LINE-4)                                    @YM2954P
NOLOGLAB DC    A(VS2LAB-1)                                     @YM2954P
NOCRH    DC    A(NOTCRH-4)                                     @Z30CIMC
NOCRH1   DC    A(NOTCRH1-1)                                    @Z30CIMC
CONST    DC    H'44'
TWOX     DC    H'2'
SET1     EQU   SETUPBFR+22
SET2     EQU   SETUPBFR+21
*
*                            REGISTERS
REG      EQU   11
UPKREG   EQU   6                       ADDRESSES UNPACK AREA.
SETUPADR EQU   7                       ADDRESSES PRINT BUFFER.
PRTABREG EQU   8                       ADDRESSES CONVERSION TABLE.
BASEREG  EQU   9                       BASE REGISTER.
BRANPRT  EQU   11                      ADDRESSES PRINT ROUTINE.
CLEAREG  EQU   12
SAVADDR  EQU   13                      ADDRESSES REGISTER SAVE AREA.
BRANADDR EQU   14                      BRANCH REGISTER.
*
*                            MESSAGES
*
*
CAUSERR  DC    C'   CSW STORED BY  --             '
ERRINT   DC    C'   CSW STORED BY  INTERRUPT               '
ERRSIO   DC    C'SIO'
ERRTIO   DC    C'TIO'
ERRHIO   DC    C'HIO'
NOUCB    DC    C'   NO ADDITIONAL ERROR INFORMATION AVAILABLE.'
COMCODE  DC    C'   TERMINATION BY  --  '
SYSRES   DC    C' SYSTEM RESET- CODE 3'
SELRES   DC    C' SELECTIVE RESET- CODE 2'
FORCEND  DC    C' FORCED ENDING SEQUENCE- CODE 1'
INTDISCN DC    C' INTERFACE DISCONNECT- CODE 0'
RETCDVAL DC    C'   TIME CHANNEL DETECTED ERROR -'
RCMSG    DC    C'RETRY CODE    '
MSGSTRT  DC    C' WHILE EXECUTING TIO                        '
         DC    C' BETWEEN COMMAND OUT AND UNIT STATUS RETURN '
         DC    C' COMMAND ACCEPTED BUT BEFORE DATA TRANSFER  '
         DC    C' SOME DATA TRANSFER-CSW COMMAND ADR UPDATED '
         DC    C' COMMAND REJECTED OR COMMAND OUT NOT SENT   '
         DC    C' COMMAND ACCEPTED-DATA TRANSFER UNDETERMINED'
         DC    C' COULD NOT BE ASSESSED                      '
NOTVM    DC    C' COULD NOT BE ASSESSED                      '
NORETRY  DC    C'   PROGRAM ASSESSED NO RETRY'
DISCIN   DC    C'   DISCONNECT IN ISSUED'                         19032
VALIDITY DC    C'   VALIDITY OF RECORDED DATA '
VALCOUNT DC    C'            COUNT              = NOT VALID'
SENSDATA DC    C'            SENSE DATA         = NOT STORED'
INVALUN  DC    C'            UNIT STATUS        = NOT VALID'
INVALCAD DC    C'            COMMAND ADDRESS    = NOT VALID'
INVALCHA DC    C'            CHANNEL ADDRESS    = NOT VALID'
INVALDVA DC    C'            DEVICE ADDRESS     = NOT VALID'
PSOERR   DC    C'   PROBABLE SOURCE OF ERROR- '
CPUERMSG DC    C'CPU'
CHANERMS DC    C'CHANNEL'
SCUERMS  DC    C'STORAGE CONTROL UNIT'                            19032
STOGERMS DC    C'STORAGE'
IOINFER  DC    C'CONTROL UNIT '
HEADER   DC    C' CHANNEL  ERROR  ANALYSIS'
ERMSG    DC    C'CHANNEL CTRL OR I/F CTRL CHECK '
         DC    C'NOT INDICATED IN CSW-NO LOGOUT'
         DC    C' WITH THIS RECORD'
NOLOG    DC    C'CHANNEL FAILED TO LOG'
MSHEAD   DC    C'MULTI-SYSTEM INFORMATION'              MESSAGES   MP
MSCPUID  DC    C'CPU 1 FAILED'                           FOR        MP
MSCPUST  DC    C'CPU STATUS WAS '              ONLY THE            MP
PART     DC    C'PARTITIONED'                           M65MP TO BE  MP
SHAR     DC    C'SHARED'                        ONLY                MP
RECON    DC    C' BUT RECONFIGURED OUT'                 WRITTEN ON  MP
CHCNFIG  DC    C'CPU 1 CHANNEL CONFIGURATION'            SEC       MP
CHTAB    DC    C'CH0--ON CH1--ON CH2--ON CH3--ON CH4--ON'  *       MP
         DC    C' CH5--ON CH6--ON'                    STORAGE  FOR   MP
MSNERPIB DC    C'ERPIB NOT CREATED'         EREP RECORDS           MP
OFF      DC    C'OFF'                         CONSTANTS            MP
         DC    C'LINE   '                       MESSAGES            MP
LEVELVD  EQU    3            MODULE LEVEL INDICATOR                MP
RELTAB   DS    0C                                              @L03976
         DC    C'OS  '                                         @L03976
         DC    C'DOS '                                         @L03976
         DC    C'VS 1'                                         @L03976
         DC    C'V370'                                         @L03976
         DC    C'VS 2'                                         @L03976
         DC    C'    '                                         @L03976
         DC    C'    '                                         @L03976
         DC    C'    '                                         @L03976
WORK     EQU   XWORK
XLABELP  EQU   LP
         DROP  R15
         EJECT
FORMAT1  DC    F'0'
         ENTRY FORMAT1
FORMAT2  DC    F'0'
LABELPTR DC    A(LABLAREA)
DISP     DC    FL2'0'
         DC    X'01'
         DC         X'000B8B00'         SKIP TO CHANNEL 1
         LABEL ' '
*
         LINE       (9,40),(1,35),SKIP=2
         HEX        XMOD,0,2B
         HEX        XSER,0,3B
         LABEL      'MODEL','SERIAL NO.'
*
         LINE  (10,)
         ROUTINE    XRELN,CONVREL
         LABEL      'XXXX REL.'
         LINE       (21,40)
         ROUTINE    XKEY,SETSOURC
         LABEL      '--- RECORD SOURCE -','TYPE - INBOARD'
*
         LINE
         ROUTINE    XJOBN,SETPGMN
         LABEL      'JOB NAME'
*
         LINE       ,(8,40),SKIP=1
         ROUTINE    XSWS8,CONVTIME
         LABEL      'DAY  YEAR','HH MM SS.TH'
         LINE       (8,40),(1,40),SKIP=2
         ROUTINE    XDATE,SETDATE
         HEX        XTIME,1,4B
         LABEL      'DATE _','TIME _'
*
         LINE       (23,1),(1,1)
         HEX        XCUA,0,3B
         LABEL      'CHANNEL/UNIT ADDRESS'
*
         LINE  (30,1),(1,1),SKIP=2                             @YL02021
         ROUTINE   XCHID,ISITVS2                               @YL02021
         HEX   VCUA                                            @YL02021
         LABEL     'ADDR.STORED IN LOC 184'                    @YL02021
         LINE       ,(14,1),SKIP=1
         ROUTINE    XKEY,SKIPPER
         LABEL      'CC   DA    FL     CT'
         LINE       (14,3),(1,1),SKIP=2
         HEX        XFCCWCC,0,1B
         HEX        XFCCWDA,0,3B
         ROUTINE    XKEY,SPACER2
         HEX        XFCCWFL,0,1B
         HEX        XFCCW0,0,1B
         HEX        XFCCWCT,0,2B
         LABEL      'FAILING CCW'
*
         LINE       ,(14,1),SKIP=1
         ROUTINE    XKEY,SKIPPER
         LABEL      'K    CA    US CS  CT'
         LINE       (14,3),(1,1),SKIP=2
         HEX        XCSWK,0,1B
         HEX        XCSWCA,0,3B
         ROUTINE    XKEY,SPACER2
         ROUTINE    XCSWUS0,SETHEX
         ROUTINE    XCSWCS0,SETHEX
         HEX        XCSWCT,0,2B
         LABEL      'CSW'
*
         LINE       ,(2,38),SKIP=1
         ROUTINE    XKEY,SKIPPER
         LABEL      'UNIT STATUS','CHANNEL STATUS'
*
         LINE       (21,38),(3,38)
         BIN        XCSWUS0
         BIN        XCSWCS0
         LABEL      'ATTENTION','PRGM-CTLD IRPT'
         LINE
         BIN        XCSWUS1
         BIN        XCSWCS1
         LABEL      'STATUS MODIFIER','INCORRECT LENGTH'
         LINE
         BIN        XCSWUS2
         BIN        XCSWCS2
         LABEL      'CONTROL UNIT END','PROGRAM CHECK'
         LINE
         BIN        XCSWUS3
         BIN        XCSWCS3
         LABEL      'BUSY','PROTECTION CHECK'
         LINE
         BIN        XCSWUS4
         BIN        XCSWCS4
         LABEL      'CHANNEL END','CHAN DATA CHECK'
         LINE
         BIN        XCSWUS5
         BIN        XCSWCS5
         LABEL      'DEVICE END','CHAN CTRL CHECK'
         LINE
         BIN        XCSWUS6
         BIN        XCSWCS6
         LABEL      'UNIT CHECK','I/F CTRL CHECK'
         LINE       ,,SKIP=2
         BIN        XCSWUS7
         BIN        XCSWCS7
         LABEL      'UNIT EXCEPTION','CHAINING CHECK'
*
         LINE       ,(1,1),SKIP=1
         ROUTINE    XKEY,SKIPPER
         LABEL      'I/O UNIT FOUND BUSY'
         LINE       (27,5),(2,1),SKIP=2
         HEX        XAIO1
         HEX        XAIO2
         HEX        XAIO3
         HEX        XAIO4
         HEX        XAIO5
         HEX        XAIO6
         HEX        XAIO7
         HEX        XAIO8
         ROUTINE    XKEY,SETAIO
         LABEL      'CHANNEL/UNIT ADDR'
*
         LINE       ,(1,1),SKIP=1
         LABEL      '--- CHANNEL TYPE ---'
         LINE       ,(8,1),SKIP=2
         LABEL      '2860'
         LINE       ,(1,1),SKIP=1
         LABEL      'HEADER SENSE SWITCHES FOUND ON'
         LINE       ,(2,1)
         ROUTINE    XSWS8,CHKSW9
         LABEL      'RECORD INCOMPLETE'
         LINE
         ROUTINE    XSWS8,CHKSW10
         LABEL      'SYSTEM TERMINATED'
         LINE
         ROUTINE    XSWS8,CHKSW11
         LABEL      'UNSUPPORTED CHANNEL'
         LINE
         ROUTINE    XSWS8,CHKSW12
         LABEL      'CUA ILLEGAL'
         LINE
         ROUTINE    XSWS8,CHKSW13
         LABEL      'PORTION OF RECORD HAS BEEN DESTROYED'
         LINE
         ROUTINE    XSWS8,CHKSW14
         LABEL      'ERP WERE IN PROGRESS'
         LINE
         ROUTINE    XKEY,SKIPPER                                 P0417
         LABEL      ' '                                          P0417
PRTERPIB LINE       (1,1),(1,1),SKIP=1
         ROUTINE    XSWS8,IFCASR01
LABELEND LABEL      ''
         LINE
         ROUTINE CLWKEY1,ALLFFF                                  43068
         LABEL ''
         LINE  ,(1,1),SKIP=2
         LABEL '2860 SEL CHANNEL'
         LINE  (45,),(22,),SKIP=1
         HEX   CLWKEY1,,1L
         LABEL 'KEY'
         LINE
         HEX   CLWCADR,,3B
         LABEL 'COMMAND ADR'
         LINE
         HEX   CLWSTAT,,1B                                     @XA15959
         LABEL 'STATUS'
         LINE
         HEX   CLWCOUNT,,2B
         LABEL 'COUNT'
         LINE
         HEX   CLWBREG,,1B
         LABEL 'MARK B REG'
         LINE
         HEX   CLWCREG,,1B
         LABEL 'COMMAND CODE'
         LINE
         BIN   CLWFREG,,5
         LABEL 'FLAGS'
         LINE
         ROUTINE CLWCHAD,@CHANADR
         LABEL 'CHANNEL ADDRESS'
         LINE
         HEX   CLWUARG,,1B
         LABEL 'UNIT ADDRESS'
         LINE
         HEX   CLWDARG,,3B
         LABEL 'DATA ADDRESS'
         LINE
         HEX   CLWSIMRG,,1B
         LABEL 'SIM IF REG'
         LINE  (45,),(22,),SKIP=2
         HEX   CLWCLOCK,,1B
         LABEL 'CLOCK'
         LINE  ,(2,),SKIP=2
         LABEL 'CONTROL TRIGGERS'
         LINE  (18,20),(1,20),SKIP=1
         BIN   CLWARGFL
         BIN   CLWCCWV
         BIN   CLWLWT
         LABEL 'A REG FULL','CCW VALID','LAST WORD TGR'
         LINE
         BIN   CLWBRGFL
         BIN   CLWREAD
         BIN   CLWBCCBT
         LABEL 'B REG FULL','READ','BC EQ CTB TGR'
         LINE
         BIN   CLWCHCML
         BIN   CLWWRITE
         BIN   CLWBCOLT
         LABEL 'CHAIN CMND LTH','WRITE','BC EQ 0 LATCH'
         LINE
         BIN   CLWSEQ1
         BIN   CLWSETUP
         BIN   CLWBCTGR
         LABEL 'SEQ 1','SET UP','BC EQ 0 TGR'
         LINE
         BIN   CLWSEQ2
         BIN   CLWTIC
         BIN   CLWBCREG
         LABEL 'SEQ 2','TIC','BC REG PTY'
         LINE
         BIN   CLWSEQ3
         BIN   CLWTICHZ
         BIN   CLWBIT3
         LABEL 'SEQ 3','TIC CYCLE','BIT 3 BC REG'
         LINE
         BIN   CLWSEQ4
         BIN   CLWPIRPT
         BIN   CLWBIT2
         LABEL 'SEQ 4','POLLING IRPT','BIT 2 BC REG'
         LINE  (18,20),(1,20),SKIP=2
         BIN   CLWSEQ5
         BIN   CLWCDALT
         BIN   CLWBIT1
         LABEL 'SEQ 5','CDA LATCH','BIT 1 BC REG'
         LINE  ,(2,),SKIP=2
         LABEL 'REGISTER PARITIES'
         LINE  (18,20),(1,20),SKIP=1
         BIN   CLWPSPR
         BIN   CLWPUAR
         LABEL 'STORAGE PROTECT','UNIT ADDRESS'
         LINE
         BIN   CLWPOCAR
         BIN   CLWP0DAR
         LABEL 'P0 COMMAND ADR','P0 DATA ADR'
         LINE
         BIN   CLWP1CAR
         BIN   CLWP1DAR
         LABEL 'P1 COMMAND ADR','P1 DATA ADR'
         LINE
         BIN   CLWP2CAR
         BIN   CLWP2DAR
         LABEL 'P2 COMMAND ADR','P2 DATA ADR'
         LINE
         BIN   CLWPDIB
         BIN   CLWPMBR
         LABEL 'DATA BUS IN','MARK B'
         LINE
         BIN   CLWPOCRG
         BIN   CLWPCOMR
         LABEL 'P0 COUNT','COMMAND'
         LINE
         BIN   CLWP1CRG
         BIN   CLWPFLAG
         LABEL 'P1 COUNT','FLAGS'
         LINE  (18,20),(1,20),SKIP=3
         BIN   CLWP2CRG
         BIN   CLWPSIMR
         LABEL 'P2 COUNT','SIM IF'
         LINE  ,(2,),SKIP=2
         LABEL 'IF TAGS'
         LINE  (18,20),(1,20),SKIP=1
         BIN   CLWOPIN
         BIN   CLWADOLT
         BIN   CLWSLOLT
         BIN   CLWSEROT
         LABEL 'OP-I','AD-O LATCH','SL-O LATCH','SR-O LATCH'
         LINE
         BIN   CLWCOMOT
         BIN   CLWSTIO
         BIN   CLWHTIO
         LABEL 'CM-O LATCH','SIO LATCH','HIO LATCH'
         LINE  ,                                               @YM6454P
         BIN  CLWIDA00                                         @YM6454P
         BIN  CLWDIN00                                         @YM6454P
         BIN  CLWSTO00                                         @YM6454P
         LABEL 'IDA FETCH','DISCONNECT IN','STORAGE TIMEOUT'   @YM6454P
         LINE  (18,20),(1,20),SKIP=2
         BIN   CLWSTOCK
         LABEL 'STO CHECK'
VS2LINE  LINE  ,,SKIP=1                                        @YM2954P
         ROUTINE   XCHID,VS2TEST                               @YL02021
VS2LAB   LABEL ''                                              @YM2954P
         LINE  (30),(1),SKIP=2                                 @YM2954P
         HEX   VCCHPR1                                         @YM2954P
         LABEL 'CCH FOOTPRINTS'                                @YM2954P
         LINE  (50,1),(20,1),SKIP=1                            @YM2954P
         BIN   VCCHPR01                                        @YM2954P
         LABEL 'IOS GPRS SAVED'                                @YM2954P
         LINE  ,                                               @YM2954P
         BIN   VCCHPR02                                        @YM2954P
         LABEL 'UCB ADDRESS ZERO'                              @YM2954P
         LINE  ,                                               @YM2954P
         BIN   VCCHPR03                                        @YM2954P
         LABEL 'ERPIB EXISTS'                                  @YM2954P
         LINE  ,                                               @YM2954P
         BIN   VCCHPR04                                        @YM2954P
         LABEL 'IGFCCHSI ENTERED'                              @YM2954P
         LINE  ,                                               @YM2954P
         BIN   VCCHPR05                                        @YM2954P
         LABEL 'IGFCCHII ENTERED'                              @YM2954P
         LINE  ,                                               @YM2954P
         BIN   VCCHPR06                                        @YM2954P
         LABEL 'IGFCCHFE ENTERED'                              @YM2954P
         LINE  ,                                               @YM2954P
         BIN   VCCHPR07                                        @YM2954P
         LABEL 'IGFC60 ENTERED'                                @YM2954P
         LINE  ,                                               @YM2954P
         BIN   VCCHPR08                                        @YM2954P
         LABEL 'IGFC70 ENTERED'                                @YM2954P
         LINE  ,                                               @YM2954P
         BIN   VCCHPR09                                        @YM2954P
         LABEL 'IGDC80 ENTERED'                                @YM2954P
         LINE  ,                                               @YM2954P
         BIN   VCCHPR10                                        @YM2954P
         LABEL 'IGFCIC ENTERED'                                @YM2954P
         LINE  ,                                               @YM2954P
         BIN   VCCHPR11                                        @YM2954P
         LABEL 'IGFCCHRD ENTERED'                              @YM2954P
         LINE  ,                                               @YM2954P
         BIN   VCCHPR12                                        @YM2954P
         LABEL 'IGFCCHMP ENTERED'                              @YM2954P
         LINE  ,                                               @YM2954P
         BIN   VCCHPR13                                        @YM2954P
         LABEL 'IGFCCHUC ENTERED'                              @YM2954P
         LINE  ,                                               @YM2954P
         BIN   VCCHPR14                                        @YM2954P
         LABEL 'IGFCCHAS ENTERED'                              @YM2954P
         LINE  ,                                               @YM2954P
         BIN   VCCHPR15                                        @YM2954P
         LABEL 'IGFCCHIO ENTERED'                              @YM2954P
         LINE  ,,SKIP=2                                        @YM2954P
         BIN   VCCHPR16                                        @YM2954P
         LABEL 'IGFCCHEX ENTERED'                              @YM2954P
         LINE  ,(30,30),SKIP=2                                 @YM2954P
         ROUTINE    XCHID,SKIPPER                              @YM2954P
         LABEL 'MULTIPROCESSING INFORMATION'                   @YM2954P
         LINE  ,(22,40),SKIP=2                                 @Z30CIMC
         ROUTINE XCRH,CRHACT                                   @Z30CIMC
         LABEL 'CHANNEL RECONFIGURATION HARDWARE IS ACTIVE'    @Z30CIMC
NOTCRH   LINE  ,(49,1),SKIP=1                                  @Z30CIMC
NOTCRH1  LABEL '0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15'
         LINE  (25,25),(30,30),SKIP=1                          @YM2954P
         HEX   (VPROC01)                                       @YM2954P
         ROUTINE    VCHST01,PROC                               @YM2954P
         LABEL ''                                              @YM2954P
         LINE  ,                                               @YM2954P
         HEX   (VPROC02)                                       @YM2954P
         ROUTINE    VCHST02,PROC                               @YM2954P
         LABEL ''                                              @YM2954P
         LINE  ,                                               @YM2954P
         HEX   (VPROC03)                                       @YM2954P
         ROUTINE    VCHST03,PROC                               @YM2954P
         LABEL ''                                              @YM2954P
         LINE  ,                                               @YM2954P
         HEX   (VPROC04)                                       @YM2954P
         ROUTINE    VCHST04,PROC                               @YM2954P
         LABEL ''                                              @YM2954P
         LINE  ,                                               @YM2954P
         HEX   (VPROC05)                                       @YM2954P
         ROUTINE    VCHST05,PROC                               @YM2954P
         LABEL ''                                              @YM2954P
         LINE  ,                                               @YM2954P
         HEX   (VPROC06)                                       @YM2954P
         ROUTINE    VCHST06,PROC                               @YM2954P
         LABEL ''                                              @YM2954P
         LINE  ,                                               @YM2954P
         HEX   (VPROC07)                                       @YM2954P
         ROUTINE    VCHST07,PROC                               @YM2954P
         LABEL ''                                              @YM2954P
         LINE  ,                                               @YM2954P
         HEX   (VPROC08)                                       @YM2954P
         ROUTINE    VCHST08,PROC                               @YM2954P
         LABEL ''                                              @YM2954P
         LINE  ,                                               @YM2954P
         HEX   (VPROC09)                                       @YM2954P
         ROUTINE    VCHST09,PROC                               @YM2954P
         LABEL ''                                              @YM2954P
         LINE  ,                                               @YM2954P
         HEX   (VPROC10)                                       @YM2954P
         ROUTINE    VCHST10,PROC                               @YM2954P
         LABEL ''                                              @YM2954P
         LINE  ,                                               @YM2954P
         HEX   (VPROC11)                                       @YM2954P
         ROUTINE    VCHST11,PROC                               @YM2954P
         LABEL ''                                              @YM2954P
         LINE  ,                                               @YM2954P
         HEX   (VPROC12)                                       @YM2954P
         ROUTINE    VCHST12,PROC                               @YM2954P
         LABEL ''                                              @YM2954P
         LINE  ,                                               @YM2954P
         HEX   (VPROC13)                                       @YM2954P
         ROUTINE    VCHST13,PROC                               @YM2954P
         LABEL ''                                              @YM2954P
         LINE  ,                                               @YM2954P
         HEX   (VPROC14)                                       @YM2954P
         ROUTINE    VCHST14,PROC                               @YM2954P
         LABEL ''                                              @YM2954P
         LINE  ,                                               @YM2954P
         HEX   (VPROC15)                                       @YM2954P
         ROUTINE    VCHST15,PROC                               @YM2954P
         LABEL ''                                              @YM2954P
         LINE  ,                                               @YM2954P
         HEX   (VPROC16)                                       @YM2954P
         ROUTINE    VCHST16,PROC                               @YM2954P
         LABEL ''                                              @YM2954P
DMPSPACE LINE  ,,SKIP=2                                        @Z30CIMC
         ROUTINE XDUM1,SKIPPER                                 @Z30CIMC
DMPSPC1  LABEL ''                                              @Z30CIMC
DUMPCODE DC    XL1'FF'                                         @YM2954P
DUMPSIZE DC    XL2'1E8'                                        @YM2954P
         DC    XL2'18'                                         @YM2954P
ADDRLABL DC    XL2'0'                                          @YM2954P
LABLAREA EQU   *                                               @YM2954P
         LSTART ,                                              @YM2954P
         END   ENTRYPTR                                        @YM2954P
