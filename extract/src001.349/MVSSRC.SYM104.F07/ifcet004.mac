*  DSGEN MACRO     DSGEN MACRO     DSGEN MACRO     DSGEN MACRO        *
         SPACE 2
         MACRO
&NAME    DSGEN
.*                            THIS MACRO GENERATES ONE DSECT WORD
.*                                 FORMATTED FOR THE SUBJECT LOG RECORD
.*                                 EACH OPERAND HAS TWO SUB LISTS. THE
.*                                 FIRST IS THE NAME OF THE LOG ITEM
.*                                 WHILE THE SECOND IS THE # OF BITS TO
.*                                 ALLOCATE FOR THIS ITEM. ITEMS MUST
.*                                 BE DEFINED CONTIGUOUSLY WITHOUT GAPS
.*                                 UNUSED BIT GROUPS MUST BE GIVEN
.*                                 DUMMY NAMES. THE NAMES PROVIDED FOR
.*                                 THE LOG ITEMS MAY THEN BE USED IN
.*                                 THE CONVERSION MACRO INSTRUCTIONS.
         GBLC &ITEM(1000)
         GBLA &ITEMNBR,&BITS(1000),&SHIFT(1000)
         LCLB  &ONLY1,&CTIND
         LCLA  &START1,&START2,&END1,&END2
         LCLC  &SYMBOL,&EQUSYM
         LCLA  &OP,&COUNT,&BYTE,&EQUCNT
         ACTR  100000
.START   AIF   (N'&SYSLIST(&OP+1) LT 3).LOOP
         AIF   ('&SYSLIST(&OP+1,3)' EQ 'EQU').LOOP     TEST FOR EQU
  AIF   ('&SYSLIST(&OP+1,3)' EQ '' AND '&SYSLIST(&OP+1,4)' EQ '').ERR1
  AIF   ('&SYSLIST(&OP+1,3)' EQ '' OR '&SYSLIST(&OP+1,4)' EQ '').ERR1
         AIF   ('&SYSLIST(&OP+1,3)' GT '&SYSLIST(&OP+1,4)').ERR3
&START1  SETA  &SYSLIST(&OP+1,3)        GET START COUNT OF 1
&START2  SETA  &SYSLIST(&OP+1,4)        GET FIRST END COUNT
         AGO   .SET2A                   BRANCH AROUND
.ERR1    MNOTE '**FIRST SYMBOL CONCATENATION INCOMPLETE**'
         MEXIT
.SET2A   AIF   ('&SYSLIST(&OP+1,5)' EQ ''AND '&SYSLIST(&OP+1,6)' EQ '' X
               ).SET2                   TEST FOR NO SECOND
  AIF   ('&SYSLIST(&OP+1,5)' EQ '' OR '&SYSLIST(&OP+1,6)' EQ '').ERR2
         AIF   ('&SYSLIST(&OP+1,5)' GT '&SYSLIST(&OP+1,6)').ERR3
&END1    SETA  &SYSLIST(&OP+1,5)        GET START COUNT OF 2
&END2    SETA  &SYSLIST(&OP+1,6)        GET END COUNT OF 2
         AGO   .LOOP
.SET2    ANOP
&ONLY1   SETB  1                        INDICATE ONLY ONE CONCATENATION
         AGO   .LOOP
.ERR2    MNOTE '**SECOND SYMBOL CONCATENATION INCOMPLETE**'
         MEXIT
.ERR3    MNOTE '**START GREATER THAN END CONCATENATION**'
         MEXIT
.LOOP    ANOP
&OP      SETA  &OP+1
         AIF   (&OP GT N'&SYSLIST).DONE      TEST IF ALL DONE
&ITEMNBR SETA  &ITEMNBR+1
         AIF   ('&SYSLIST(&OP,2)' NE '').OK1
         MNOTE '**NULL BIT COUNT FIELD**'
         MEXIT
.OK1     ANOP
&SYMBOL  SETC  '&SYSLIST(&OP,1)'
         AIF   ('&SYMBOL' NE '').OK
*              *****     LOG ITEM SYMBOL NOT PROVIDED     *****
         AIF   ('&SYSLIST(&OP,3)' NE 'EQU').CNT
         AGO   .START                   GET NEXT
.OK      AIF   (N'&SYSLIST(&OP) LT 3).NO3    TEST FOR OLD FORMAT
         AIF   ('&SYSLIST(&OP,3)' EQ 'EQU').EQU   TEST FOR EQU
         AIF   (&ONLY1).OK2             TEST FOR ONLY ONE CONCAT
&SYMBOL  SETC  '&SYMBOL.&START1.&END1'       GET 1 AND 2 CONCAT
         AGO   .NO3                     BRANCH AROUND
.OK2     ANOP
&SYMBOL  SETC  '&SYMBOL.&START1'        GET 1 CONCATENATED
.NO3     ANOP
&SYMBOL  EQU   *+&BYTE
&ITEM(&ITEMNBR) SETC '&SYMBOL'          GET LABEL IN GLOBAL
&BITS(&ITEMNBR) SETA &SYSLIST(&OP,2)
&SHIFT(&ITEMNBR) SETA &COUNT-&BYTE*8
.CNT     ANOP
&CTIND   SETB  1                        SET COUNT INDICATOR
&COUNT   SETA  &COUNT+&SYSLIST(&OP,2)
&BYTE    SETA  &COUNT/8
         AIF   (N'&SYSLIST(&OP) LT 3).START  TEST FOR OLD FORMAT
         AIF   (&ONLY1).TSTST           TEST FOR ONLY ONE CONCAT
         AIF   (&END1 EQ &END2).TSTST   TEST FOR SECOND END
&END1    SETA  &END1+1                  INCREMENT COUNT
&OP      SETA  &OP-1                    DECREMENT INCREMENT
         AGO   .LOOP                    GENERATE NEXT
.TSTST   ANOP
         AIF   (&START1 EQ &START2).LPDONE   TEST FOR END
         AIF   (&ONLY1).NSET1           TEST FOR ONLY ONE CONCAT
&END1    SETA  &SYSLIST(&OP,5)          RE-INIT SECOND START COUNT
.NSET1   ANOP
&OP      SETA  &OP-1                    DECREMENT INDEX
&START1  SETA  &START1+1                INCREMENT FIRST COUNT
         AGO   .LOOP                    GO DO NEXT
.LPDONE  ANOP
&ONLY1   SETB  0                        CLEAR INDICATOR
         AGO   .START                   GO TEST FOR MORE SUB-LISTS
.DONE    AIF   (&COUNT-&COUNT/8*8 NE 0).ERR  TEST FOR MULTIPLE OF EIGHT
         AIF   (&CTIND EQ 0).END        NO DS IF NO COUNT
&COUNT   SETA  &COUNT/8                 GET NUMBER OF BYTES
&NAME    DS    &COUNT.C
.END     MEXIT
.ERR     MNOTE '**BIT COUNT FLDS DO NOT TOTAL MULTIPLE OF 8**'
         MEXIT
.EQU     AIF   ('&SYSLIST(&OP,4)' NE '').EQU1     TEST FOR NULL LABEL
.ERR4    MNOTE '**EQU OPERAND OMITTED OR NOT FOUND**'
         MEXIT
.EQU1    AIF   (&SYSLIST(&OP,2) LT 16).EQU2  COUNT OVER FIFTEEN
*****               THE FOLLOWING STATEMENT                *****
*****     NUMBER OF BITS EXCEED 15 - DO NOT USE AS BIN     *****
.EQU2    ANOP
&EQUCNT  SETA  0                        CLEAR COUNTER
&EQUSYM  SETC  '&SYSLIST(&OP,4)'        GET EQU OPERAND
.EQULOP  ANOP
&EQUCNT  SETA  &EQUCNT+1                INCREMENT INDEX
         AIF   ('&ITEM(&EQUCNT)' EQ '&EQUSYM').EQUOUT  LABEL FOUND?
         AIF   (&EQUCNT EQ &ITEMNBR).ERR4    ALL TESTED?
         AGO   .EQULOP                  NO-GET NEXT
.EQUOUT  ANOP
&ITEM(&ITEMNBR) SETC '&SYMBOL'          GET LABEL NAME
&BITS(&ITEMNBR) SETA &SYSLIST(&OP,2)    GET NUMBER OF BITS
&SHIFT(&ITEMNBR) SETA &SHIFT(&EQUCNT)   GET SHIFT COUNT
&SYMBOL  EQU   &EQUSYM                  THIS SYMBOL EQUATED
         AGO   .START                   RETURN FOR NEXT
         MEND
         EJECT
*  LINE MACRO     LINE MACRO     LINE MACRO     LINE MACRO            *
         SPACE 2
         MACRO
&NAME    LINE  &DATA,&LABEL,&SKIP=
.*                            THIS MACRO ESTABLISHES THE MARGINS OR
.*                                 COLUMN SETTINGS FOR EACH LINE. IT
.*                                 GENERATES NECESSARY CARRIAGE CONTROL
.*                                 ENTRIES. LASTLY IT DETERMINES THE
.*                                 NUMBER OF ENTRIES ASSOCIATED WITH
.*                                 THE PREVIOUS LINE AND STORES THAT #
.*                                 INTO THE APPROPRIATE BYTE.
.*                            &DATA(1) - CHARACTER POSITION TO BEGIN
.*                                 DATA.
.*                            &DATA(2) - # OF SPACES BETWEEN SUCCESSIVE
.*                                 DATA COLUMN STARTING CHARACTERS.
.*                            &LABEL(1) - CHAR. POS. TO BEGIN LABELS.
.*                            &LABEL(2) - # SPACES BETWEEN LINE'S LABEL
.*                                 STARTING CHARACTERS.
.*                            &SKIP= - # OF LINES TO ADVANCE CARRIAGE
.*                                 TO BEGIN NEXT PRINTED LINE.
.*                            NEW ENTRIES ARE GENERATED ONLY WHEN
.*                                 NECESSARY. OMISSION OF ITEMS MEANS
.*                                 THEY HAVE NOT CHANGED SINCE PREVIOUS
.*                                 SETTINGS. A LINE MACRO IS REQUIRED
.*                                 FOR EACH PRINTED LINE. IF NO SETTING
.*                                 CHANGES ARE REQUIRED ALL OPERANDS
.*                                 ARE OMITTED IN WHICH CASE ONLY THE
.*                                 # OF ENTRIES FOR THE PREVIOUS LINE
.*                                 IS COMPUTED. THIS MACRO MUST BE THE
.*                                 FIRST MACRO INSTRUCTION ISSUED FOR
.*                                 THE SUBJECT LINE
         GBLA  &DB,&DT,&LB,&LT,&NRENTS
         GBLA  &LASTCC,&INITIAL
         GBLC  &NRENTSX
         GBLC  &CARRCON
         GBLB  &TEST
         LCLA  &S
&NAME    DS    0C
         AIF   (&INITIAL EQ 0).FIRSTLN
         LINEND
         AGO   .NTFIRST
.FIRSTLN ANOP
&NRENTSX SETC  'N&SYSNDX'
&INITIAL SETA  1
N&SYSNDX EQU   *
.NTFIRST ANOP
         DC    AL1(0)
         AIF   ('&DATA(1)' EQ '').CKDTABS
         AIF   (&DATA(1) EQ &DB).CKDTABS
&DB      SETA  &DATA(1)
         AGO   .AA
.CKDTABS AIF   ('&DATA(2)' EQ '').NCDATA
         AIF   (&DATA(2) EQ &DT).NCDATA
         AGO   .CC
.AA      AIF   ('&DATA(2)' EQ '').BB
         AIF   (&DATA(2) EQ &DT).BB
.CC      ANOP
&DT      SETA  &DATA(2)
.BB      DC    XL2'FFFE'
         DC    FL1'&DB'
         DC    FL1'&DT'
&NRENTS  SETA  &NRENTS+1
.NCDATA  ANOP
         AIF   ('&LABEL(1)' EQ '').CKLTABS
         AIF   (&LABEL(1) EQ &LB).CKLTABS
&LB      SETA  &LABEL(1)
         AGO   .AAA
.CKLTABS AIF   ('&LABEL(2)' EQ '').NCLABEL
         AIF   (&LABEL(2) EQ &LT).NCLABEL
         AGO   .CCC
.AAA     AIF   ('&LABEL(2)' EQ '').BBB
         AIF   (&LABEL(2) EQ &LT).BBB
.CCC     ANOP
&LT      SETA  &LABEL(2)
.BBB     DC    XL2'FFFF'
         DC    FL1'&LB'
         DC    FL1'&LT'
&NRENTS  SETA  &NRENTS+1
.NCLABEL ANOP
         AIF   ('&SKIP' NE '').CONT
         AIF   (&TEST EQ 0).NOCHANG
&S       SETA  &LASTCC
         AGO   .DEFAULT
.CONT    ANOP
         AIF   (&TEST EQ 0).AB
&S       SETA  &SKIP
.DEFAULT ANOP
         ORG   &CARRCON+3
         DC    AL.3(0),AL.2(&S),AL.3(1)
         ORG
&LASTCC  SETA  &S
&TEST    SETB  0
         AGO   .DD
.AB      AIF   (&SKIP EQ &LASTCC).NOCHANG
A&SYSNDX DC    XL2'FFFB'
         DC    AL.3(0),AL.2(&SKIP),AL.3(1)
         DC    FL1'9'
&LASTCC  SETA  &SKIP
&TEST    SETB  1
&CARRCON SETC  'A&SYSNDX'
&NRENTS  SETA  &NRENTS+1
.DD      ANOP
.NOCHANG ANOP
         MEND
         EJECT
*  BIN MACRO     BIN MACRO     BIN MACRO     BIN MACRO     BIN MACRO  *
         SPACE 2
         MACRO
         BIN   &LOGITEM,&SKIP$OR
.*                                 &LOGITEM - NAME OF ITEM IN LOG
.*                                      RECORD DSECT
.*                                 &SKIP$OR - NBR OF SPACES TO SKIP ON
.*                                 MULTIPLE PRINT OR NBR OF SPACES
.*                                      TO BACK UP FROM COLUMN FOR
.*                                      START OF PRINTING. THE LETTER
.*                                      B PRECEEDS THE NUMBER (B5) IF
.*                                      THE LATTER IS DESIRED. OMISSION
.*                                      OF THIS OPERAND FORCES OPTION 2
.*                                      WITH BACKUP SPACING EQUAL TO
.*                                 THE NUMBER OF BITS IN THE ITEM
.*                                 DEFINITION (VIA MACRO 'DSGEN').
.*                            A LIMIT OF 15 BITS IS IMPOSED FOR THE
.*                                 TOTAL NUMBER OF BITS TO PRINT.
         GBLC &ITEM(1000)
         GBLA &ITEMNBR,&BITS(1000),&SHIFT(1000),&NRENTS
         GBLC  &DSECT
         LCLB  &B
         LCLA  &IBITS,&NDX,&ISHIFT,&K
         LCLA  &TEMP,&T
         LCLC  &S
.LOOP    ANOP
&NDX     SETA  &NDX+1
         AIF   ('&ITEM(&NDX)' EQ '&LOGITEM').FOUND
         AIF   (&NDX LT &ITEMNBR).LOOP
         MNOTE *,'YOU BLEW IT'
         ROUTINE DUM,SKIPPER
         MEXIT
.FOUND   ANOP
&ISHIFT  SETA  &SHIFT(&NDX)
&IBITS   SETA  &BITS(&NDX)
&T       SETA  &IBITS-1
&B       SETB  0
         AIF   ('&SKIP$OR' EQ '').BACKUP
&K       SETA  K'&SKIP$OR
&B       SETB  ('&SKIP$OR'(1,1) EQ 'B')
&S       SETC  '&SKIP$OR'(&B+1,&K-&B)
&T       SETA  &S
.BACKUP  ANOP
&NRENTS  SETA  &NRENTS+1
&TEMP    SETA  &ISHIFT
A&SYSNDX DC    AL.12(&LOGITEM-&DSECT),XL.4'&TEMP'
         AIF (&IBITS EQ 1 AND &B EQ 0).OUT
         ORG   A&SYSNDX
&B       SETB  1
         DC    AL.12(&LOGITEM-&DSECT),XL.4'C'
         DC    BL.1'&B',AL.7(&T),AL.4(&IBITS),FL.4'&ISHIFT'
.OUT     ANOP
         MEND
         EJECT
*  HEX MACRO     HEX MACRO     HEX MACRO    HEXN MACRO     HEX MACRO  *
         SPACE 2
         MACRO
         HEX   &LOGITEM,&SKIP$OR,&BYTES
.*                            THIS MACRO FACILITATES GENERATION OF THE
.*                                 TABLE ENTRIES SPECIFYING HEX TYPE
.*                                 CONVERSIONS.
.*                            &LOGITEM - NAME OF DATA ITEM TO BE
.*                                 CONVERTED
.*                            &SKIP$OR - NUMBER OF SPACES TO SKIP ON
.*                                 MULTIPLE PRINT OR NBR OF SPACES TO
.*                                 BACK UP FROM COLUMN FOR START OF
.*                                 PRINTING. THE LETTER B PRECEEDS THE
.*                                 NUMBER (B8) IF THE LATTER OPTION IS
.*                                 DESIRED. OMISSION OF THIS OPERAND
.*                                 FORCES OPTION 2 WITH BACKUP SPACING
.*                                 EQUAL TO THE NUMBER OF BYTES SPECI-
.*                                 FIED BY THE NEXT OPERAND (TWICE THIS
.*                                 NUMBER IF SUFFIX IS EXPLICITLY OR
.*                                 IMPLICITLY B).
.*                            &BYTES - NUMBER OF TOTAL INPUT BYTES TO
.*                                 PROCESS. THIS NUMBER IS SUFFIXED
.*                                 WITH AN L,R, OR B TO STIPULATE
.*                                 PRINTING OF THE LEFT HALF, RIGHT
.*                                 HALF, OR BOTH HALVES OF THE BYTE
.*                                 RESPECTIVELY. OMISSION OF THIS
.*                                 OPERAND DEFAULTS TO B WITH THE NUM-
.*                                 BER OF BYTES EQUAL TO THE ITEM LNGTH
.*                            A NEW ENTRY IS GENERATED ONLY WHEN NECES-
.*                                 SARY. THIS MACRO MUST BE THE FIRST
.*                                 MACRO INSTRUCTION ISSUED FOR THE
.*                                 SUBJECT LINE(S).
         GBLC &ITEM(1000),&DSECT
         GBLA &ITEMNBR,&BITS(1000),&SHIFT(1000),&NRENTS
         LCLB  &B
         LCLA  &IBITS,&NDX,&ISHIFT,&K,&T,&CODE,&BYTESP
         LCLC  &S,&LETTER
.LOOP    ANOP
&NDX     SETA  &NDX+1
         AIF   ('&ITEM(&NDX)' EQ '&LOGITEM').FOUND
         AIF   (&NDX LT &ITEMNBR).LOOP
         MNOTE *,'LOG ITEM NOT DEFINED'
         MEXIT
.FOUND   ANOP
&ISHIFT  SETA  &SHIFT(&NDX)
&IBITS   SETA  &BITS(&NDX)
&CODE    SETA  1
&K       SETA  K'&BYTES
         AIF   (&IBITS-(&IBITS/4)*4 EQ 0).OK
         MNOTE *,'BIT LENGTH SPECIFICATION INCONSISTENT WITH CONTROL'
         MEXIT
.OK      AIF   ('&BYTES' EQ '').USEDEFN
&LETTER  SETC  '&BYTES'(&K,1)
&S       SETC  '&BYTES'(1,&K-1)
&BYTESP  SETA  &S
         AIF   ('&LETTER' EQ 'B').BOTH
         AIF   (&ISHIFT EQ 0 OR &ISHIFT EQ 4).OK2
.ERR     MNOTE *,'DATA NOT ALLIGNED ON HEX OR BYTE BOUNDARY'
         MEXIT
.USEDEFN ANOP
&BYTESP  SETA  &IBITS/8
.BOTH    AIF   (&ISHIFT NE 0).ERR
&CODE    SETA  3
&T       SETA  &BYTESP*2-1
&S       SETC  '&T'
.OK2     AIF   (&ISHIFT EQ 0).L
&CODE    SETA  2
.L       ANOP
&B       SETB  1
         AIF   ('&SKIP$OR' EQ '').BACKUP
&K       SETA  K'&SKIP$OR
&B       SETB  ('&SKIP$OR'(1,1) EQ 'B')
&S       SETC  '&SKIP$OR'(&B+1,&K-&B)
.BACKUP  ANOP
&NRENTS  SETA  &NRENTS+1
         DC    AL.12(&LOGITEM-&DSECT),XL.4'A'
         DC    BL.1'&B',FL.7'&S',FL.4'&BYTESP',FL.4'&CODE'
.OUT     ANOP
         MEND
         SPACE 2
*  ROUTINE MACRO     ROUTINE MACRO     ROUTINE MACRO     ROUTINE MACRO*
         SPACE 2
         MACRO
&NAME    ROUTINE &LOGITEM,&RNAME
         GBLC  &DSECT,&CSECT
         GBLC  &ITEM(1000)
         GBLA  &SHIFT(1000),&ITEMNBR
         GBLA  &NRENTS
         LCLA  &ISHIFT,&NDX
.LOOP    ANOP
&NDX     SETA  &NDX+1
         AIF   ('&ITEM(&NDX)' EQ '&LOGITEM').FOUND
         AIF   (&NDX LT &ITEMNBR).LOOP
         MNOTE *,'LOG ITEM NOT DEFINED'
         MEXIT
.FOUND   ANOP
&ISHIFT  SETA  &SHIFT(&NDX)
&NAME    DC    AL.12(&LOGITEM-&DSECT),XL.4'D'
         DC    AL.4(&ISHIFT),AL.12(&RNAME-&CSECT)
&NRENTS  SETA  &NRENTS+1
         MEND
         EJECT
*  LABEL MACRO     LABEL MACRO     LABEL MACRO     LABEL MACRO        *
         SPACE 2
         MACRO
&NAME    LABEL &LABEL1,&LABEL2,&LABEL3,&LABEL4,&LABEL5,&LABEL6,        C
               &LABEL7,&LABEL8
.*                            THIS MACRO ALLOWS UP TO ACHT LABELS TO
.*                                 BE SPECIFIED FOR A GIVEN LINE. THE
.*                                 LABELS SHOULD BE ENCLOSED IN QUOTA-
.*                                 TION MARKS. THE COLUMN AND LINE END
.*                                 CONTROLS WILL BE INSERTED BY THE
.*                                 MACRO. OMITTED OPERANDS MEAN NO
.*                                 LABEL REQUIRED FOR RESPECTIVE
.*                                 COLUMN. THIS MACRO WILL ALSO ALERT
.*                                 THE PROGRAMMER TO EXACTLY WHERE THE
.*                                 TABLE MUST BE BROKEN IF NECESSARY
.*                                 TO AVOID EXCEEDING THE MAXIMUM LIMIT
         GBLC &LABELS(2000)
         GBLC  &LBL(100)
         GBLA  &LBLCTR(100)
         GBLA  &LABELNR
         GBLA  &NRENTS,&LPTR
         LCLC  &MARGIN,&TACK
         LCLC  &TEXT
         LCLA  &OP,&K,&START,&NRCHAR,&REMAIN
&MARGIN  SETC  '*'
         AIF   ('&NAME' EQ '').LOOPOUT
&LPTR    SETA  &LPTR+1
&LBL(&LPTR) SETC '&NAME'
&LBLCTR(&LPTR) SETA &LABELNR+1
.LOOPOUT ANOP
&OP      SETA  &OP+1
&K       SETA  K'&SYSLIST(&OP)
         AIF (&K GE 2).NORM
&K       SETA  2
.NORM    ANOP
&START   SETA  2
         AIF (&OP LT N'&SYSLIST).NOTLAST
&MARGIN  SETC  '$'
.NOTLAST ANOP
&NRCHAR  SETA  8
&TACK    SETC  ''
.LOOPIN  ANOP
&REMAIN  SETA  &K-&START
         AIF (&REMAIN GE 8).MORE
&TACK    SETC  '&MARGIN'
&NRCHAR  SETA  &REMAIN
.MORE    ANOP
&TEXT    SETC  ''
         AIF (&REMAIN EQ 0).ENDTEXT
&TEXT    SETC  '&SYSLIST(&OP)'(&START,&NRCHAR)
.ENDTEXT ANOP
&LABELNR SETA  &LABELNR+1
&LABELS(&LABELNR) SETC '&TEXT'.'&TACK'
&START   SETA  &START+8
         AIF ('&TACK' EQ '').LOOPIN
         AIF ('&TACK' EQ '*').LOOPOUT
         MEND
         MACRO
         LSTART
.*                            THIS MACRO IS ISSUED WHEN THE LABEL AREA
.*                                 OF THE TABLE IS TO BEGIN.
         GBLC &LABELS(2000)
         GBLA  &LABELNR
         GBLC  &LBL(100)
         GBLA  &LBLCTR(100)
         LCLA  &NDX,&CTR
         LINEND
&CTR     SETA  1
.LOOP    ANOP
&NDX     SETA  &NDX+1
         AIF   (&LBLCTR(&CTR) NE &NDX).NOLBL
&LBL(&CTR) DC  C'&LABELS(&NDX)'
&CTR     SETA  &CTR+1
         AGO   .LOOPCTL
.NOLBL   ANOP
         DC    C'&LABELS(&NDX)'
.LOOPCTL AIF   (&NDX LT &LABELNR).LOOP
         MEND
         MACRO
         LINEND
.*                            THIS MACRO IS USED ONLY BY THE LINE
.*                                 MACRO TO SET THE NUMBER OF ENTRIES
.*                                 ASSOCIATED WITH EACH LINE.
         GBLA  &NRENTS
         GBLC &NRENTSX
         ORG   &NRENTSX
         DC    FL1'&NRENTS'
         ORG
&NRENTS  SETA  0
B&SYSNDX EQU   *
&NRENTSX SETC  'B&SYSNDX'
         MEND
         GBLC  &DSECT,&CSECT
*        TPER  EDIT  TABLE
IFCET004 CSECT
&CSECT   SETC  'IFCET004'
&DSECT   SETC  'C0145'
C0145    DSECT
         DS    0F
TPOG3211 DSGEN (SWITCH,8),(XRELN,8),(RECLD,8),(SPARE,16),(TYPET,8),    C
               (SPARE1,16)
         DSGEN (DATE,32),(TIME,32)
         DSGEN (SPAR2,8),(CPUSER,24),(MODEL,16),(SPARE3,16)
         DSGEN (CUA,16),(CORRNO,8),(CHAIN,8)
         DSGEN (LOGA1,32),(LOGA2,32)
         DSGEN (LOGA3,32),(LOGA4,32)
         DSGEN (LOGA5,32),(LOGB1,32)
         DSGEN (LOGB2,32),(LOGB3,32)
         DSGEN (LOGB4,32),(LOGB5,32)
         DSGEN (LOGC1,32),(LOGC2,32)
         DSGEN (LOGC3,32),(LOGC4,32)
         DSGEN (LOGC5,32),(LOGD1,32)
         DSGEN (LOGD2,32),(LOGD3,32)
         DSGEN (LOGD4,32),(LOGD5,32)
         DSGEN (LOGE1,32),(LOGE2,32)
         DSGEN (LOGE3,32),(LOGE4,32)
         DSGEN (LOGE5,32),(LOGF1,32)
         DSGEN (LOGF2,32),(LOGF3,32)
         DSGEN (LOGF4,32),(LOGF5,32)
         DSGEN (LOGG1,32),(LOGG2,32)
         DSGEN (LOGG3,32),(LOGG4,32)
         DSGEN (LOGG5,32),(LOGH1,32)
         DSGEN (LOGH2,32),(LOGH3,16),(LOGH30,16)
         DSGEN (LOGH4,32),(LOGH5,32)
IFCET004 CSECT
         USING *,R9
L0       EQU   0
L1       EQU   1
L2       EQU   2
L3       EQU   3
L4       EQU   4
L5       EQU   5
L6       EQU   6
L8       EQU   8
L10      EQU   10
L24      EQU   24
R2       EQU   2                                               @XA15955
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R14      EQU   14
X01      EQU   X'01'
X02      EQU   X'02'
X03      EQU   X'03'
         DC    A(ENTRIES)
         DC    CL8'IFCET004'
XR9PTR   DC    F'0'
XLABELP  DC    F'0'
NONE     DC    C'NONE'
UNIVERS  DC    C'UNIVERSAL'
CHARS    DC    C'0123456789ABCDEF'
XSAVE    DS    5F
RELTAB   DS    0C                                              @L03976
         DC    C'OS  '                                         @L03976
         DC    C'DOS '                                         @L03976
         DC    C'VS 1'                                         @L03976
         DC    C'V370'                                         @L03976
         DC    C'VS 2'                                         @L03976
         DC    C'    '                                         @L03976
         DC    C'    '                                         @L03976
         DC    C'    '                                         @L03976
WORK     DS    D
*
*        RESTORE REGISTERS USED BY ROUTINES IN THIS MODULE
*
*              SPECIAL ROUTINE SECTION
*
SKIPPER  BR    R14                      RETURN
SAVECHAR MVC   SAVECH(L10),L0(R4)       SAVE DATA POINTER
         BR    R14                      RETURN
FINDER STM     R11,R10,SAVEREG          SAVE REGISTERS
         MVC   L0(L8,R3),DOTS           PUT DOTS
         LA    R8,L4                    4-WORD GROUP
         LR    R6,R4                    LOAD R6 WITH R4
         LR    R7,R3                    LOAD R7 WITH R3
FNDBYT0  CLI   SAVECH,DOT              IS LAST CHAR A DOT        PT1403
         BE    FNDBYT2                 YES RETURN                PT1403
         TM    L0(R6),X02              TEST FOR PEC BIT          PT1403
         BZ    FNDBYT1                  NO GO TO END
         IC    R5,SAVECH                PLACE IN REG 5 CHAR TO CONVERT
         SLL   R5,L24                   SHIFT LEFT 24 BITS
         SR    R4,R4                    CLEAR R4
         SLDL  R4,L4                    U
         LA    R4,CHARS(R4)             UPDATE CHAR POINTER
         MVC   L0(L1,R7),L0(R4)
         SR    R4,R4                    CLEAR R4
         SLDL  R4,L4
         LA    R4,CHARS(R4)             UPDATE CONSTANT POINTER
         MVC   L1(L1,R7),L0(R4)         PLACE CONVERTED CHAR IN BUFFEF
         MVC   SAVECH(L10),SAVECH+L1    PLACE NEXT CHARACTER
FNDBYT1  LA    R7,L2(R7)                UPDATE PRINT BUFFER
         LA    R6,L1(R6)                UPDATE DATA ADDRESS
         BCT   R8,FNDBYT0
FNDBYT2  LM    R11,R10,SAVEREG          RESTORE
         BR    R14                      RETURN
BUFTYP   STM   R11,R10,SAVEREG          SAVE REGISTERS
         CLI   L0(R4),X03               IS IT A CHECK READ BUFFER
         BE    PLBROUT                  YES BRANCH
         CLI   L0(R4),X02               IS IT A CAR CTRL BUFFER
         BE    CCARSUB                  YES BRANCH
         CLI   L0(R4),X01               IS IT A UCS BUFFER
         BE    UCSUB                    YES BRANCH
PLBROUT  BR    R14                      RETURN
CCARSUB  LA    R4,CCAROUT-L4            GET ADDRESS LABEL PTR
         ST    R4,XR9PTR                SAVE
         LA    R4,CCAROUTL              LABEL POINTER
         ST    R4,XR9PTR+L4             SAVE
         BR    R14                      RETURN
UCSUB    LA    R4,UCSBUFF-L4            PICK ADDRESS LABEL PTR
         ST    R4,XR9PTR                SAVE
         LA    R4,UCSBUFL               LABEL POINTER
         ST    R4,XR9PTR+L4             SAVE
         BR    R14
SETDATE  CLC   L1(L3,R4),ZERO           IS DATE ZERO
         BE    SETDTE                   BRANCH  YES
         UNPK  XSAVE(L8),L1(L3,R4)      UNPACK DATE
         MVC   L6(L2,R3),XSAVE+L3       MOVE YEAR
         MVC   L0(L3,R3),XSAVE+L5       MOVE TIME
         BR    R14                      RETURN
CONVREL  STM   R5,R8,XSAVE              SAVE WORK REGS
         SR    R6,R6                    CLEAR R6
         IC    R6,L0(R4)                PICK UP REL & SYS VALUES
         SRDL  R6,L5                    SAVE REL NO IN R7
        SLL   R6,L2                    MULTIPLY SYS VALUE BY 4
         L     R8,XLABELP               PICK UP LABEL POINTER
         LA    R6,RELTAB(R6)            INDEX INTO TABLE OF SYSTEMS
         MVC   L0(L4,R8),L0(R6)         MOVE SYSTEM NAME INTO LABEL
         SR    R6,R6                    CLEAR R6
         SLDL  R6,L5                    RETREIVE REL NO.
         LTR   R6,R6                    IS IT ZERO
         BZ    NOREL                    BR-YES
         CVD   R6,WORK                  CONVERT IT
         UNPK  L0(L2,R3),WORK+L6(L2)    UNPACK IT INTO PRINT BUFF
         MVZ   L1(L1,R3),L0(R3)         MOVE ON PROPER ZONE
RETURN   LM    R5,R8,XSAVE         RESTORE WORK REGISTERS
         BR    R14                 RETURN
NOREL    MVC   L0(L4,R3),NONE           MOVE IN NONE FOR REL
         B     RETURN
SETDTE   MVC   L0(L4,R3),NONE           SET DATE TO NONE
         BR    R14
ZERO     DC    XL4'00'
CHKTYP   CLI   L4(R2),X'10'        IS THIS A 3203              @XA15955
         BNER  R14                 NO CONTINUE                 @XA15955
         MVC   TYPLAB1(4),C3203    MOVE 3203 IN LABEL          @XA15955
         MVC   TYPLAB2+12(4),C3203 MOVE 3203 IN OTHER LABEL    @XA15955
         BR    R14                                             @XA15955
C3203    DC    C'3203'                                         @XA15955
**********************************************************************
*              *****     EDIT ENTRIES AREA     *****                  *
**********************************************************************
ENTRIES  DS    0F
         DC    XL4'00'             FORMAT 1
         DC    XL4'00'             FORMAT 2
         DC    A(LABELS)           LABEL PTR
         DC    H'0'                DISP
         DC    X'01'
         DC    X'000B8B00'
         LABEL ' '
START    LINE  ,(1,1),SKIP=2
         ROUTINE TYPET,CHKTYP                                  @XA15955
TYPLAB1  LABEL '3211 ERROR LOG DATA EDITING AND PRINTING SECTION'
         LINE  ,(8,1),SKIP=1
         ROUTINE    SPARE1,SKIPPER
         LABEL 'MODEL UNIVERSAL'
         LINE  ,(1,1),SKIP=1
*                                                                XM0793
         LABEL '---RECORD ENTRY SOURCE -MDR-           TYPE- OUTBOARD'
         LINE  (10,)
         ROUTINE    XRELN,CONVREL
         LABEL      'XXXX REL.'
         LINE      (34,22),(1,20),SKIP=2
         HEX   CUA,0,2B
         HEX   CORRNO,0,1B
TYPLAB2  LABEL 'DEVICE TYPE 3211','UNIT ADDRESS','CORRELATION NO'
         LINE ,(8,39),SKIP=1
         LABEL 'DAY  YEAR','HH MM SS.TH'
         LINE  (8,39),(1,30),SKIP=2
         ROUTINE    DATE,SETDATE
         HEX   TIME,1,4B
         LABEL 'DATE','TIME'
         LINE  ,(1,1),SKIP=1
         ROUTINE    SPARE1,SKIPPER
         ROUTINE    CHAIN,BUFTYP
         LABEL 'DIAGNOSTIC CHECK READ'
         LINE  ,(1,1),SKIP=1
         LABEL     'UP TO 10 ERRORS SHOWN'
         LINE  (22,12),(1,1),SKIP=1
         ROUTINE   LOGH30,SAVECHAR
         LABEL ' '
         LINE
         ROUTINE    LOGA1,FINDER
         ROUTINE    LOGA2,FINDER
         ROUTINE    LOGA3,FINDER
         ROUTINE    LOGA4,FINDER
         ROUTINE    LOGA5,FINDER
         LABEL      'PLB CHAR IN ERROR'
         LINE
         HEX        LOGA1,0,4B
         HEX        LOGA2,0,4B
         HEX        LOGA3,0,4B
         HEX        LOGA4,0,4B
         HEX        LOGA5,0,4B
         LABEL      'CHECK READ BUFFER'
         LINE
         ROUTINE    LOGB1,FINDER
         ROUTINE    LOGB2,FINDER
         ROUTINE    LOGB3,FINDER
         ROUTINE    LOGB4,FINDER
         ROUTINE    LOGB5,FINDER
         LABEL      'PLB CHAR IN ERROR'
         LINE
         HEX        LOGB1,0,4B
         HEX        LOGB2,0,4B
         HEX        LOGB3,0,4B
         HEX        LOGB4,0,4B
         HEX        LOGB5,0,4B
         LABEL      'CHECK READ BUFFER'
         LINE
         ROUTINE    LOGC1,FINDER
         ROUTINE    LOGC2,FINDER
         ROUTINE    LOGC3,FINDER
         ROUTINE    LOGC4,FINDER
         ROUTINE    LOGC5,FINDER
         LABEL      'PLB CHAR IN ERROR'
         LINE
         HEX        LOGC1,0,4B
         HEX        LOGC2,0,4B
         HEX        LOGC3,0,4B
         HEX        LOGC4,0,4B
         HEX        LOGC5,0,4B
         LABEL      'CHECK READ BUFFER'
         LINE
         ROUTINE    LOGD1,FINDER
         ROUTINE    LOGD2,FINDER
         ROUTINE    LOGD3,FINDER
         ROUTINE    LOGD4,FINDER
         ROUTINE    LOGD5,FINDER
         LABEL      'PLB CHAR IN ERROR'
         LINE
         HEX        LOGD1,0,4B
         HEX        LOGD2,0,4B
         HEX        LOGD3,0,4B
         HEX        LOGD4,0,4B
         HEX        LOGD5,0,4B
         LABEL      'CHECK READ BUFFER'
         LINE
         ROUTINE    LOGE1,FINDER
         ROUTINE    LOGE2,FINDER
         ROUTINE    LOGE3,FINDER
         ROUTINE    LOGE4,FINDER
         ROUTINE    LOGE5,FINDER
         LABEL      'PLB CHAR IN ERROR'
         LINE
         HEX        LOGE1,0,4B
         HEX        LOGE2,0,4B
         HEX        LOGE3,0,4B
         HEX        LOGE4,0,4B
         HEX        LOGE5,0,4B
         LABEL      'CHECK READ BUFFER'
         LINE
         ROUTINE    LOGF1,FINDER
         ROUTINE    LOGF2,FINDER
         ROUTINE    LOGF3,FINDER
         ROUTINE    LOGF4,FINDER
         ROUTINE    LOGF5,FINDER
         LABEL      'PLB CHAR IN ERROR'
         LINE
         HEX        LOGF1,0,4B
         HEX        LOGF2,0,4B
         HEX        LOGF3,0,4B
         HEX        LOGF4,0,4B
         HEX        LOGF5,0,4B
         LABEL      'CHECK READ BUFFER'
         LINE
         ROUTINE    LOGG1,FINDER
         ROUTINE    LOGG2,FINDER
         ROUTINE    LOGG3,FINDER
         ROUTINE    LOGG4,FINDER
         ROUTINE    LOGG5,FINDER
         LABEL      'PLB CHAR IN ERROR'
         LINE
         HEX        LOGG1,0,4B
         HEX        LOGG2,0,4B
         HEX        LOGG3,0,4B
         HEX        LOGG4,0,4B
         HEX        LOGG5,0,4B
         LABEL      'CHECK READ BUFFER'
         LINE  ,(1,49)
         ROUTINE    LOGH1,FINDER
         ROUTINE    LOGH2,FINDER
         ROUTINE    LOGH3,FINDER
         ROUTINE    LOGH4,FINDER
         ROUTINE    LOGH5,FINDER
         LABEL 'PLB CHAR IN ERROR','                              '
         LINE   (22,12),(1,1)
         HEX        LOGH1,0,4B
         HEX        LOGH2,0,4B
         HEX   LOGH3,0,2B                                        PT1403
         LABEL      'CHECK READ BUFFER'
         LINE
         ROUTINE    SPARE1,SKIPPER
         LABEL ' '
         DC    X'FF'
         DC    XL2'00BC'
         DC    XL2'001C'
         DC    XL2'00'
CCAROUTL LABEL 'FORMS CONTROL BUFFER'                            PT1403
CCAROUT  LINE  (1,1),(1,1),SKIP=1
         ROUTINE    SPARE1,SKIPPER
         LABEL      ' '
         DC    X'FF'
         DC    XL2'00D4'               RECORD SIZE FOR HEX DUMP  PT1403
         DC    XL2'001C'                HEADER
         DC    XL2'0000'
         DC    X'FF'
UCSBUFL  LABEL 'UNIVERSAL CHARACTER SET'
UCSBUFF  LINE  (1,1),(1,1),SKIP=1
         ROUTINE    SPARE1,SKIPPER
         LABEL      ' '
         DC    X'FF'
         DC    XL2'0220'               RECORD SIZE FOR HEX DUMP  PT1403
         DC    XL2'001C'                SIZE OF HEADER
         DC    XL2'0000'
SAVECH   DS    CL10
         DC    C'.'
SAVEREG  DC    16F'0'
DOTS     DC    C'........'
DOT      EQU   C'.'
DUMPCODE DC    XL1'FF'
DUMPSIZE DC    XL2'02F0'
DUMPBEGN DC    XL2'0'
ADDRLABL DC    XL2'0'
***********************************************************************
*              *****     LABEL AREA     *****
***********************************************************************
LABELS   EQU   *
         LSTART
         END
