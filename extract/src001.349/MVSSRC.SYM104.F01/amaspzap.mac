         TITLE 'AMASPZAP - INSPECTS AND MODIFIES DATA ON DA DEVICES'
***********************************************************************
*
*TITLE - AMASPZAP
*
*STATUS - CHANGE LEVEL 0
*
*FUNCTION - AMASPZAP WILL PERFORM THE FOLLOWING FUNCTIONS:
*              (1) INSPECT AND MODIFY INSTRUCTIONS AND DATA IN ANY
*                  LOAD MODULE THAT EXISTS AS A MEMBER OF A PARTITIONED
*                  DATA SET.
*
*              (2) INSPECT AND MODIFY DATA IN A SPECIFIC DATA RECORD
*                  THAT EXISTS IN A DIRECT ACCESS DATA SET
*
*              (3) DUMP AN ENTIRE D.A. DATA SET, A SPECIFIC MEMBER
*                  OF A PARTITIONED DATA SET, OR ANY PORTION OF A
*                  DATA SET ON A DIRECT ACCESS DEVICE.
*
*              (4) UPDATE THE SYSTEM STATUS INFORMATION (SSI) IN THE
*                  DIRECTORY ENTRY FOR A LOAD MODULE.
*
*              (5) UPDATES THE AMASPZAP CSECT IDENTIFICATIO RECORD
*                  (IDR) IN THE LOAD MODULE
*
*INPUT -    CONTROL STATEMENTS ARE USED TO CONTROL THE FUNCTIONS OF
*           AMASPZAP. THESE STATEMENTS CAN BE PROVIDED VIA SYSIN OR
*           THROUGH THE CONSOLE IF A CONSOLE CONTROL STATEMENT IS
*           INCLUDED IN THE SYSIN INPUT. THE ACCEPTABLE CONTROL
*           STATEMENTS ARE AS FOLLOWS:
*
*        -KEYWORD-  -PARM1-       -PARM2-             -FUNCTION-
*
*        NAME       MEMBER        CSECT     ......IDENTIFIES A CSECT
*        VERIFY     HEX-OFFSET    HEX-DATA  ......INSPECTS DATA
*        REP        HEX-OFFSET    HEX-DATA  ......MODIFIES DATA
*        SETSSI     DATA (4 BYTES)          ......UPDATES SSI INFO
*        IDRDATA    DATA (8 BYTES)          ......SUPPLIES IDR DATA
*        DUMP       MEMBER        CSECT/ALL ......DUMPS CSECT(S)
*        DUMPT      (SAME PARMS AS DUMP)    ......TRANSLATED DUMP
*        CCHHR      DISK-ADDRESS IN HEX     ......IDENTIFIES A RECORD
*        ABSDUMP    START-CCHHR   STOP-CCHHR......DUMPS DATA RECORD(S)
*                       OR
*                   ALL
*                       OR
*                   MEMBER NAME
*        ABSDUMPT   (SAME PARMS AS ABSDUMP) ......TRANSLATED ABSDUMP
*        BASE       HEX-OFFSET              ......SPECIFIES CSECT START
*        CONSOLE    (NONE)                  ......CONSOLE INPUT REQUEST
*        * (ASTERISK)             COMMENTS  ......NO OPERATION
*
*OUTPUT -   AS EACH CONTROL STATEMENT IS READ IT IS WRITTEN TO THE
*           SYSPRINT DEVICE AND THEN THE OPERATION IS PERFORMED
*           BEFORE OBTAINING THE NEXT STATEMENT. WHEN AN ERROR OCCURS
*           DURING AN OPERATION, AN ERROR MESSAGE IS WRITTEN TO THE
*           SYSPRINT DEVICE IMMEDIATELY BELOW THE CONTROL STATEMENT
*           IN ERROR. IF THE CONSOLE OPTION IS IN EFFECT, ERROR MESS-
*           AGES ARE WRITTEN TO THE CONSOLE AS WELL AS THE SYSPRINT
*           DEVICE.
*
*           ALL DATA THAT IS DUMPED IS WRITTEN TO THE SYSPRINT DEVICE
*           IN HEXADECAMAL. IF TRANSLATION WAS SPECIFIED, THE MNEUMONIC
*           REPRESENTATION OF EACH HALFWORD OF DATA IS PRINTED BELOW
*           THE RESPECTIVE TWO BY8TES OF HEX DATA AND THE EBCDIC
*           REPRESENTATION OF THE HEX DATA IS TRANSLATED TO THE RIGHT
*           OF THE HEX DATA IN THE DUMP.
*
*          IF A REP OPERATION IS PERFORMED ON A LOAD MODULE
*          THE SSI AND IDR ARE UPDATED AUTOMATICALLY.
*
*ENTRY POINTS - AMASPZAP IS THE ONLY ENTRY
*
*EXITS - AMASPZAP RETURNS CONTROL TO THE SYSTEM VIA A RETURN MACRO
*        AFTER PROCESSING ALL CONTROL STATEMENTS IN THE SYSIN DATA SET
*        OR WHEN A CRITICAL ERROR IS ENCOUNTERED SO PROCESSING CANNOT
*        CONTINUE.
*
*EXTERNAL REFERENCES - NOT APPLICABLE
*
*TABLES - NOT APPLICABLE
*
*ATTRIBUTES - NONREUSEABLE PROBLEM PROGRAM
*
*NOTES - (1) AMASPZAP UTILIZES SYSTEM OPEN. HENCE AMASPZAP CANNOT
*            MODIFY8 'READ-ONLY' OR INSPECT 'WRITE-ONLY' PASSWORD
*            PROTECTED DATA SETS UNLESS THE CORRECT PASSWORD IS
*            PROVIDED AT OPEN TIME. ALSO UNEXPIRED DATA SETS
*            CANNOT BE MODIFIED UNLESS THE OPERATOR REPLIES R 00,'U'
*            TO THE EXPIRATION MESSAGE THAT OCCURS DURING OPEN.
*
*        (2) AMASPZAP SUPPORTS ONLY THE 2311, 2314, 2301, 2302, 2303
*             2321, 3330, 3340, AND 3350 DASD DEVICES
*             FOR THE SYSLIB DD UNIT.
*
*        (3) THE SYSLIB DD CANNOT SPECIFY A CONCATENATED DATA SET.
*
*        (4) THE SYSLIB DD MUST SPECIFY DSN=FORMAT4.DSCB IF OPERA-
*            TIONS ARE TO BE PERFORMED ON A VTOC.
*
***********************************************************************
         SPACE 3
******************************FL/1*************************************
*/*AMASPZAP: CHART (AMODE,SEQ) */
*/* HEADER
*/*AMASPZAP
*/*                                     PAGE # */
*/*AMASPZAP: E ENTRY */
*/* P INITIALIZATION */
*/* P CHECK INPUT PARAMETER LIST TO SEE IF DDNAMES ARE BEING PASSED */
*/* P IF SO, INSERT THEM INTO APPROPRIATE DCB */
*/* P IF NOT, DDNAMES WILL DEFAULT TO SYSLIB, SYSIN, SYSPRINT */
*/* L OPEN SYSIN, SYSPRINT */
*/* L READJFCB SYSLIB */
*/* D (NO,GETDSCB,YES,) FORMAT 4 DSCB? */
*/* P SET JFCBAREA TO X'04'S */
*/* L (,CKOPEN) OPEN SYSLIB FOR INPUT */
*/*GETDSCB: L OBTAIN FMT1 DSCB */
*/* D (NO,OPEN1,YES,) TRACK OVERFLOW? */
*/* P SET TRK OVRFL BIT IN DCB */
*/*OPEN1: L OPEN SYSLIB FOR INPUT */
*/*CKOPEN: P SET R1 TO LARGEST POSS BLKSIZE */
*/* P R1=R1 + MAX KEYLEN AND COUNT */
*/* P SAVE MAX BLOK SIZE */
*/* P INCREASE GETMAIN SIZE BY TRUE KEYLEN */
*/* L GET MAIN STORAGE FOR MAX SIZE */
*/* P SAVE ADDR OF RDAREA BUFFER */
*/* D (YES,%P2C2,NO,) SYSPRINT OPEN OK? */
*/*WTOA: L  WTO MSG AMA118I */
*/* L (,EXIT) CLOSE FILES */
*/*%P2C2: S WRITE:PRINT AMASPZAP HEADER */
*/* D (YES,%P2F2,NO,) SYSIN OPEN OK? */
*/*CLOSE2: S WRITEO:PRINT APPROPRIATE ERROR MSG */
*/*CLOSE3: L CLOSE ALL DCBS */
*/* P (,EXIT) SET RETURN CODE 16 */
*/*%P2F2: D (NO,CLOSE2,YES,) SYSLIB2 OPEN OK? */
*/* P SET LNKRG3 TO ADDR OF RDCARD1 */
*/*RDCARD: P INITIALIZE CONTROL BYTE */
*/*RDCARD1: P TURN OFF CONSW */
*/* S RDCARD2:GET A CONTROL CARD */
*/* S WRITE:PRINT CONTROL CARD */
*/* S SCANKEY:SCAN FOR BEGIN OF OPERATION */
*/* D (YES,CONRTN,NO,) CONSOLE? */
*/*KEY01: D (NO,%P2F4,YES,) COMMENT CARD? */
*/* R RETURN VIA LNKRG3 */
*/*%P2F4: P INITIALIZE READ AREA */
*/* D (ON,KEY03,OFF,) NAMEERR SW? */
*/* D (YES,SSIRTN,NO,) SSI? */
*/* D (YES,KEY02,NO,) IGNOP? */
*/* D (YES,REPRTN,NO,) REP? */
*/*KEY02: D (YES,VERYRTN,NO,) VERIFY? */
*/* D (YES,IDRRTN,NO,) IDRDATA? */
*/* S INSMDFY:MODIFY SSI IF ANY REPS OCCURRED */
*/*KEY03: D (YES,CCHHRTN,NO,) CCHHR? */
*/* D (YES,NAMERTN,NO,) NAME? */
*/* D (YES,BASERTN,NO,) BASE? */
*/* D (YES,DUMPRTN,NO,) DUMP? */
*/* D (YES,ABDMPRTN,NO,) ABSDUMP? */
*/* D (YES,EOD,NO,) SLASH AST? */
*/*IGNORE: P POINT TO MSG AMA105I */
*/*IGNORE2: S WRITEO:PRINT ERROR MSG */
*/* D (ON,,OFF,%P3E4) CONSW? */
*/* S WTORTN:MESSAGE TO CONSOLE */
*/*%P3E4: P SET RETCODE TO 8 */
*/* P TURN ON IGNOP SW */
*/* R RETURN VIA LNKRG3 */
*/*EOD: S INSMDFY:MODIFY SSI IF ANY REPS OCCURRED */
*/* P POINT TO MSG AMA100I */
*/* S WRITEO:PRINT COMPLETED MSG */
*/* S CLOSE1:CLOSE ALL DCBS */
*/*EXIT: D (YES,,NO,GETOUT) WAS RESERVE ISSUED? */
*/* L DEQUE ON DATA SET */
*/* P TURN OFF RESERVE SW */
*/*GETOUT: P HOUSEKEEPING */
*/* R RETURN TO SYSTEM */
*/*NAMERTN: P SAVE HIGHEST RETURN CODE FOR STEP */
*/* S SCANKEY5:GET MEMBER AND CSECT NAMES */
*/* P SET BASE2 TO ZERO */
*/* P MOVE 'NO IDENT' TO IDR DATA BUFFER */
*/* P TURN OFF IDRDATA 1ST STMT INDICATOR */
*/* P TURN OFF IGNOP AND NAMEERR SW */
*/* S NAME01A:EXAMINE CESDS */
*/* D (VEC1,,VEC2,NAME03B,VEC3,%21A2) RETURN VECTOR? */
*/*NOCSECT: S WRITEO:PRINT ERROR MSG */
*/* D (ON,,OFF,%P4A4) CONSW? */
*/* S WTORTN:MSG TO CONSOLE */
*/*%P4A4: P SET RETCODE TO 8 */
*/* P (,DUMP04) TURN ON IGNOP & NAMEERR SW */
*/*%21A2: D (NO,NAME04AA,YES,) WAS LOAD MOD READ? */
*/* P (,NAME04AB) RESET LOAD MOD READ SW */
*/*NAME04AA: D (YES,NOIDRL,NO,) IS LOAD MOD NE */
*/*NAME04A: S RDDSK2:READ NEXT RECORD */
*/*NAME04AB: D (YES,SPZAPIDR,NO,) IS THIS AN IDR? */
*/* D (YES,NAME04A,NO,) SYM OR CESD? */
*/*NOIDRL: P POINT TO MSG AMA119I */
*/* P TURN OFF NENOIDR SW */
*/* S WRITEO:PRINT MESSAGE */
*/* P INDICATE NO IDR UPDATES REQD */
*/* P (,RDDSK4BB) SET LNKRG2 TO ADDR OF NAME04 + 4 */
*/*SPZAPIDR: D (YES,,NO,NAME04A) AMASPZAP IDR? */
*/* D (YES,SAVELOC,NO,) ANY SPACE LEFT? */
*/* D (YES,NAME04A,NO,) ANY MORE SPZAP IDRS? */
*/* P TURN ON IGNORE OPTION SW- NO REPS */
*/* P POINT TO MSG AMA120I */
*/* S (,NAME04) WRITEO:PRINT MESSAGE */
*/*SAVELOC: S CCHNOTE:NOTE TTR & CONVERT TO MBBCCHHR */
*/* P SAVE TTR IN IDRTTR FIELD */
*/* P SAVE MBBCCHHR IN IDRFSEEK FIELD */
*/* P INDICATE IDR UPDATE REQUIRED */
*/*NAME04: S RDDSK4:SIFT THRU CONTROL RECORDS */
*/* D (VEC1,,VEC2,%P4D5) RETURN VECTOR? */
*/* N INVALID RETURN VECTOR */
*/* P NOP INSTR */
*/*%P4D5: N VECT 2- FOUND CSECT */
*/* P SAVE CSECT TTR */
*/* D (YES,%C13,NO,) ONE RECORD CSECT? */
*/* S CCHNOTE:SET NOTE LIST */
*/* P  SAVE CSECT TTR */
*/*%C13: R RETURN VIA LNKRG3 */
*/*CCHHRTN: P SAVE HIGHEST RETURN CODE FOR STEP */
*/* P TURN OFF IGNORE OPTION & NAMEERR SW */
*/* S CCHHSUB:VERIFY LEGAL ABSOLUTE ADDR */
*/* P ZERO BASE FIELDS */
*/* S OPENLIB:OPEN DS FOR UPDATE */
*/* S RDDISK:READ DESIRED RECORD */
*/* P SUBTRACT RESIDUAL COUNT FROM SIZE */
*/* P SAVE AS MAX INSPECT AREA */
*/* R RETURN VIA LNKRG3 */
*/*VERYRTN: P INDICATE VERIFY PROCESSING */
*/* S SETUP1:DECODE VERIFY CARD */
*/* P VERIFY PATCHES */
*/* D (YES,,NO,%P21E2) SUCCESSFUL VERIFY? */
*/* R RETURN VIA LNKRG3 */
*/*%P21E2: P POINT TO MSG AMA104I */
*/*VERY1: S WRITEO:PRINT ERROR MSG */
*/* D (YES,,NO,%P21H2) CONSOLE OPTION IN EFFECT? */
*/* S WTORTN:WRITE MSG TO CONSOLE */
*/*%P21H2: P SET RETURN CODE OF 8 */
*/* P TURN ON IGNORE OPTION SW */
*/* P BLANK OUT MEMBER & CSECT NAME FIELDS */
*/* S WRITEO:WRITE A BLANK LINE */
*/* P INITIALIZE TO DUMP CSECT OR RECORD */
*/* S (,DUMP09) DUMP01AB:DUMP */
*/*REPRTN: P INDICATE REP OPERATION */
*/* S SETUP1:DECODE REP CARD */
*/* N TAKES THIS PATH IF CCHHR UPDATE */
*/* S UNPATCH: FORMAT UNPATCH MESSAGE */
*/* S WRITE:PRINT MESSAGE */
*/* P BLANK LAST 40 CHAR OF BUFFER */
*/* P MOVE IN REP DATA */
*/* S WRDISK:UPDATE RECORD ON DISK */
*/* P (,RESET) INDICATE CCHHR UPDATE OCCURRED- MODFYREC */
*/*BASERTN: S SCAN:DECODE BASE OFFSET */
*/* P (,RESET) SAVE OFFSET */
*/*IDRRTN: D (YES,%21A1,NO,) 1ST IDRDATA THIS NAME? */
*/* R RETURN VIA LNKRG3 */
*/*%21A1: S SCANKEY1:DECODE IDR STATEMENT */
*/* P SAVE IDR DATA */
*/* P INDICATE 1ST IDRDATA STMT READ */
*/* R RETURN VIA LNKRG3 */
*/*SSIRTN: D (YES,%P23B2,NO,) IS RETURN CODE ZERO? */
*/* P (,SSI2) POINT TO MSG AMA111I */
*/*%P23B2: P INDICATE SSI PROCESSING */
*/* P TURN OFF SSI ERROR FLAGS */
*/* S OPENLIB:CHECK IF LIB OPEN FOR UPDATE */
*/* S SCAN:DECODE SSI CARD */
*/* S INSM1A:GET SSI FIELD */
*/* D (YES,%P23G2,NO,) HAD WE FOUND THE MEMBER */
*/* P (,SSI2) POINT TO MSG AMA112I */
*/*%P23G2: D (YES,SSI1,NO,) SSI MISSING FROM DIRECTORY ? */
*/* S UNPATCH: FORMAT UNPATCH MESSAGE */
*/* S WRITE:PRINT MESSAGE */
*/* P BLANK LAST 40 CHAR OF BUFFER */
*/* P MOVE SSI TO DIRECTORY */
*/* S (,RESET) DIRWRITE:UPDATE DIRECTORY */
*/*SSI1: P POINT TO MSG AMA110I */
*/*SSI2: P SET RETURN CODE OF 8 */
*/* S WRITEO:PRINT ERROR MSG */
*/* D (YES,,NO,RESET) CONSOLE OPTION IN EFFECT? */
*/* S (,RESET) WTORTN:WRITE MSG TO CONSOLE */
*/*DUMPRTN: D (YES,DUMPR1,NO,) TRANSLATED DUMP REQUEST ? */
*/* P INDICATE TRAN DUMP REQUIRED */
*/*DUMPR1: S SCANKEY5:GET MEMBER & CSECT NAME */
*/* P TURN OFF ONE RECORD INDICATOR */
*/* P TURN ON NAMEERR SW- DONT ALLOW VERS OR REPS */
*/* D (YES,DUMP04,NO,) ALL CSECTS REQUIRED ? */
*/*DUMP01A: S NAME01A:FIND CSECT NAME */
*/* D (VEC1,NOCSECT,VEC2,NAME03B,VEC3,DUMP01B) RETURN VECTOR ? */
*/*DUMP01B: S RDDSK4:READ CONTROL RECORD */
*/* D (VEC1,,VEC2,%P28K2) RETURN VECTOR ? */
*/* N (,DUMP09) END OF MODULE */
*/*%P28K2: N FOUND CONTROL RECORD WITH CSECTID */
*/* D (YES,DUMP01D,NO,) ONE RECORD INDIC ON ? */
*/* S DUMP01:TO DUMP CSECT */
*/* D (YES,DUMP09,NO,) DUMP COMPLETED ? */
*/*DUMP01D: S DUMP01AA:DUMP ONE RECORD */
*/* D (YES,DUMP09,NO,) DUMP COMPLETE ? */
*/* D (YES,,NO,DUMP09) MULTIPLE REC INDIC ON ? */
*/* P (,DUMP01B) RESET ONE RECORD INDIC */
*/*DUMP04: P CLEAR CSECT ID SAVE AREA */
*/*DUMP04A: S NAME01A:FIND FIRST CSECT */
*/* D (VEC2,,VEC1,DUMP09,VEC3,%P29D2) RETURN VECTOR ? */
*/* P NOP */
*/*%P29D2: D (YES,DUMP01D,NO,) ONE RECORD DUMP ? */
*/* D (YES,,NO,DUMP09) ANY MORE CSECTS */
*/* D (YES,,NO,NAME03B) HAVE WE FOUND NEXT ESD */
*/* P SAVE NEW ESD ID */
*/* P SAVE CSECT NAME FROM ESD ENTRY */
*/*DUMP06B: S RDDSK4:READ CONTROL RECORD */
*/* D (VEC1,DUMP04A,VEC2,) RETURN VECTOR ? */
*/* S DUMP01:DUMP CSECT */
*/* D (NO,DUMP09:RLL,YES,DUMP04A:RL) LAST TXT REC DUMPED ? */
*/*DUMP09: N DUMP REQUIREMENT COMPLETE */
*/* P POINT TO MSG AMA113I */
*/* S WRITEO:PRINT DUMP COMPLETE MSG */
*/* P RESET TRANS & END OF MOD INDICS */
*/* S WRITEO:SKIP TO NEW PAGE */
*/* R RETURN VIA LNKRG3 */
*/*ABDMP1: P INCR 1 CHAR ON CONTROL CARD BUF */
*/*ABDMPRTN: D (YES,ABDMP1,NO,) CHAR = BLANK ? */
*/* P TURN ON NAMEERR SW- NO VERS OR REPS */
*/* D (YES,,NO,ABDMP1B) TRANSLATE OPT REQUEST ? */
*/* P INDICATE TRANSLATE REQUIRED */
*/*ABDMP1B: P INITIALIZE FOR DUMP */
*/* P GET CONVERT RTN OFFSET */
*/* D (YES,ABDMP3,NO,) DUMP OF ENTIRE PDS ? */
*/* D (YES,,NO,ABDMP6) NUMERIC OPERAND ? */
*/* S CCHHSUB:DECODE LOW CCHHR */
*/* S CHCONV:CONVERT TO TTR */
*/* P SAVE LOW TTR IN TTRSAVE */
*/* S CCHSUB2:DECODE HIGH CCHHR */
*/*ABDMP2: P GET CONVERT ROUTINE OFFSET */
*/* S CHCONV:CONVERT TO TTR */
*/*CONTA: P MOVE LOW TTR TO STCSECT */
*/* P SAVE HIGH TTR IN TTRSAVE */
*/*ABDMP5: P BLANK MEMBER & CSECT NAME FIELDS */
*/* S DUMP01AA:DUMP RECORD */
*/*CONTB: D (YES,DUMP09,NO,)  LO TTR >= HI TTR YET ? */
*/* P RESET IFLAGS IN DCB IF ON DUE TO ERROR */
*/* D (YES,DUMP09,NO,DUMP01) END OF EXTENT ? */
*/*CONT: D (NO,,YES,DUMP09) END OF EXTENT? */
*/* S DUMP01E:WRITE EOD RECORD FOR LIB2 */
*/* D (YES,DUMP09,NO,) IS DUMP OF SEQUENTIAL D.S. */
*/* S WRITEO:SKIP A LINE */
*/* P SET LNKRG2 TO ADDR OF CONTB */
*/* D (YES,,NO,CONTB) WAS IT MEM DUMP ONLY ? */
*/* P (,DUMP09) TURN OFF MEMBDMP INDICATOR */
*/*ABDMP3: P GET DEB ADDR */
*/* P TURN OFF NAMEOP & ONERECORD INICATOR */
*/* S CHCONV:CONVERT TO TTR */
*/* P SAVE TTR IN STCSECT */
*/* P SET READ AREA ADDR FOR JFCB READ */
*/* L READ JFCB */
*/* P GET DEB ADDR AGAIN */
*/* P GET UCB ADDR FROM DEB */
*/* P SAVE ADDR OF VOLSER */
*/* P SET ADDR OF DSNAME IN OBTAIN LIST */
*/* P ESTABLISH WORK AREA FOR OBTAIN */
*/* L OBTAIN- SET DSCB */
*/* M TURN OFF SEQUENTIAL INDICATOR */
*/* D (YES,,NO,TESTPO) IS DATA SET SEQUENTIAL */
*/* M (,MAKEHI2) SET SEQUENTIAL INDICATOR */
*/*TESTPO: D (NO,MAKEHI2,YES,) IS DATA SET PARTITIONED */
*/* P SAVE END OF DATA SET TTR */
*/* D (YES,,NO,ABDMP5) TTR = 0 ? */
*/*MAKEHI2: P (,ABDMP5) SET HIGH TTR TO FOXES & SAVE */
*/*ABDMP6: S SCANKEY5:GET MEMBER NAME */
*/* L FIND MEMBER */
*/* D (YES,,NO,NAME03C) MEMBER FOUND ? */
*/* P BLANK CSECT NAME FIELD */
*/* P INDICATE MEMBER DUMP */
*/* S DUMP01:DUMP MEMBER */
*/* N (,DUMP01) CONTINUE */
*/*SYND: N SYNAD EXIT FOR SYSIN */
*/* L SYNADAF- ANALYZE ERROR */
*/* P SAVE PARAMETER REG */
*/* P MOVE ERROR MSG TO BUFFER */
*/* S IOMSG:PRINT I/O ERROR MSG */
*/* L (,CLOSE3) RELEASE SYNADAF WORK AREA */
*/*ABDMP4: N SYNAD EXIT FOR LIB2 */
*/* P SAVE REGS */
*/* L SYNADAF- ANALYZE ERROR */
*/* P SAVE PARM REG */
*/* P MOVE ERROR MSG TO BUFFER */
*/* S IOMSG:PRINT I/O ERROR MSG */
*/* P RESTORE LINK & PARM REGS */
*/* L RELEASE SYNADAF WORK AREA */
*/* P (,CLOSE3) RESTORE REGS */
*/*RESET: P TURN OFF IGNORE OPTION SW */
*/* N GET NEXT CARD */
*/* R RETURN VIA LNKRG3 */
*/*NAME01A: E SUBROUTINE */
*/* N USED BY NAMERTN & DUMPRTN- FIND MEMBER & CSECT */
*/* P TURN MULREC SW OFF */
*/* L DO BLDL ON MEMBER NAME */
*/* D (YES,%L284,NO,) SUCCESS? */
*/*NAME03C: P TURN ON NAMEERR SW */
*/* P (,IGNORE2) POINT TO MSG AMA102I */
*/*%L284: P SET ESD ID COUNTER TO ZERO */
*/* P SET BASE FOR FIRST CSECT SEARCH */
*/* L ISSUE FIND ON MEMBER NAME */
*/*NAME02: S RDDSK2:SEQUENTIALLY READ ONE REC */
*/* D (YES,NAME02,NO,) IS IT A SYM RECORD? */
*/* D (YES,NAME03,NO,) IS IT A CESD? */
*/* D (YES,NAME03E,NO,) L.E. ATTR+1 = X'08' (NE) */
*/* D (YES,%C11,NO,) WAS SPECIFIC CSECT REQ? */
*/* N USE CSECT FOUND WITH LOWEST DISPLACEMENT */
*/* R RETURN VECTOR 3 */
*/*%C11: P SET LOAD MOD HAS BEEN READ SW */
*/* R RETURN VECTOR 1 */
*/*NAME03: P ESD ID COUNT + 1 */
*/* D (YES,NAME03A,NO,) IS IT A SECT DEF? */
*/* D (YES,NAME03A,NO,) IS IT PRIVATE CODE? */
*/*NAME03B: P INCR TO NEXT ESD */
*/* D (YES,NAME02,NO,NAME03) END OF THIS CESD? */
*/*NAME03E: P SET MULREC SW ON */
*/* P SET NENOIDR SW */
*/*NAME03D: P SET BASE TO L.E. ASSD ORIGN OF 1ST TXT */
*/* P SET START TO BASE */
*/* P SET STCSECT TO TTR OF 1ST TXT */
*/* P SET LENGTH TO LEN OF 1ST TXT */
*/* P SET CSECT FIELD TO BLANK */
*/* P  TURN ON ONEREC SW */
*/* R RETURN VECTOR 3 */
*/*NAME03A: D (YES,,NO,NAME03AA) WAS SPECIFIC CSECT REQ? */
*/* P SAVE DISPLACEMENT AND ESDID */
*/* D (NO,,YES,%P9L10) IS THIS REQ CSECT */
*/* R RETURN VECTOR 2 */
*/*%P9L10: R RETURN VECTOR 3 */
*/*NAME03AB: P SAVE ESDID */
*/* P SAVE CSECT DISPLACEMENT */
*/* R RETURN VECTOR 3 */
*/*NAME03AA: D (YES,,NO,NAME03AC) THIS CSECT DISPLACEMENT ZERO */
*/* P (,NAME03AB) SAVE CSECT NAME */
*/*NAME03AC: D (NO,%C12,YES,) DISPLACEMENT .LT. BASE */
*/* P SAVE CSECT DATA */
*/* R RETURN VECTOR 2 */
*/*%C12: R RETURN VECTOR 2 */
*/*RDDSK3: E SUBROUTINE */
*/* N READ DISK ROUTINES */
*/* S RDDSK2:SEQ READ ONE RECORD */
*/*RDDSK4: D (YES,,NO,%P7D2) ONE REC SW ON? */
*/* R RETURN VIA VECTOR 2 */
*/*%P7D2: S RDDSK2:SEQ READ ONE RECORD */
*/*RDDSK4BB: D (YES,,NO,RDDSK7) CONTROL RECORD? */
*/* P SET STARTINC TO ZERO */
*/* P LOAD PTR TO ID FIELD */
*/* P SAVE STOP ADDR */
*/*RDDSK4C: P LOAD CSECT ID */
*/* D (YES,RDDSK5,NO,) IS IT CSECT WE WANT? */
*/* D (YES,RDDSK5,NO,) MULT TEXT CSECT? */
*/* P ADD CSECT LEN TO STARTINC */
*/* P ADVANCE RECORD PTR */
*/* D (NO,RDDSK4C,YES,) OUTSIDE RECORD LIMIT? */
*/* D (YES,,NO,RDDSK3) IS IT END OF MODULE? */
*/* R RETURN VIA VECTOR 1 */
*/*RDDSK2: E SUBROUTINE */
*/* N BSAM- SEQUENTIAL READ */
*/* P INITIALIZE FOR READ */
*/* L READ RECORD BSAM */
*/* L CHECK READ COMPLETION */
*/* R RETURN */
*/*RDDSK5: P INDICATE END OF MODULE- CTLBTE */
*/* D (YES,RDDSK6,NO,) IS IT REALLY END OF MOD? */
*/* P TURN OFF END MOD IND- CTLBTE */
*/*RDDSK6: P SAVE CSECT LENGTH */
*/* P SAVE START ADDR OF 1ST TEXT */
*/* R RETURN VIA VECTOR 2 */
*/*RDDSK7: D (YES,,NO,RDDSK4) LAST RECORD OF MOD? */
*/* R RETURN VIA VECTOR 1 */
*/*CCHHNOTE: E SUBROUTINE */
*/* N CONVERT TTRS TO CCHHRS */
*/* L ISSUE NOTE ON LIB2 */
*/* P SAVE TTR */
*/* P INITIALIZATION FOR CONVERT ROUTINE */
*/*CHCONV: P SAVE REGS 8 - 13 */
*/* P FURTHER INIT FOR CONVERT ROUTINE */
*/* P GET ADDR CONVERT ROUTIN FROM CVT */
*/* L CONVERT TO CCHHR */
*/* N ABSOLUTE ADDR SAVED IN MBBCCHHR */
*/* P RESTORE REGS 8 - 13 */
*/* R RETURN */
*/*CCHHSUB: E SUBROUTINE */
*/* N CHECK ABSOLUTE ADDR IS WITHIN DATA SET */
*/* P INITIALIZATION */
*/* P TURN OFF NAMEOP & ONEREC SW */
*/*CCHSUB2: S SCAN:DEBLOCK DATA */
*/* P SAVE MBBCCHHR */
*/* D (NO,CONTIN,YES,) MBBCCHHR = RECORD 0? */
*/* P SET MBBCCHHR TO RECORD 1 */
*/*CONTIN: P GET PTR TO DEB EXTENTS */
*/* P GET NO. OF EXTENTS */
*/* P SUBTRACT 1 FROM NO. EXTENTS */
*/* P POINT TO 1ST EXTENT ENTRY */
*/*CCHSUB3: D (YES,CCHSUB4,NO,) MBBCCHHR < THIS EXTENT? */
*/* D (YES,CCHSUB4,NO,) MBBCCHHR > THIS EXTENT? */
*/* P SET BB TO FDAD BB */
*/* R RETURN */
*/*CCHSUB4: D (YES,NAME03C,NO,) OUT OF EXTENTS? */
*/* P INCREMENT EXTENT COUNTER */
*/* P SAVE EXTENT M */
*/* P (,CCHSUB3) INCREMENT TO NEXT EXTENT */
*/*CONRTN: E SUBROUTINE */
*/* N FOR CONSOLE INPUT */
*/* P CLEAR WTOECB */
*/* P CLEAR INPUT BUFFER */
*/* L ISSUE WTOR AMA116A */
*/* L WAIT FOR REPLY */
*/* P INSURE REPLY WAS CAP LETTERS */
*/* S WRITE:PRINT REPLY */
*/* S SCANKEY:GET CONTROL VERB */
*/* D (YES,,NO,%P11J2) IS IT END STMT? */
*/* P SET LNKRG3 TO ADDR OF RDCARD1 */
*/* R RETURN VIA LNKRG3 */
*/*%P11J2: P SET LNKRG3 TO ADDR OF CONRTN */
*/* N (,KEY01) DETERMINE OPERATION */
*/*WTORTN: E SUBROUTINE */
*/* P GET PARMLIST FOR DESIRED MSG */
*/* P SET LEN,  RTE & DESCR CODES FOR THIS MSG */
*/* L WRITE MSG TO OPERATOR */
*/* R RETURN */
*/*SCANKEY: E SUBROUTINE */
*/* N SCAN FREE FORMAT CONTROL CARDS */
*/* P INITIALIZE FOR START OF SCAN */
*/* N ENTRY FOR CONTINUOUS SCAN */
*/*SCANKEY1: P POINT TO BEGIN OF NEXT SCAN */
*/*SCANKEY2: D (NO,SCANKEY3,YES,) CHAR BLANK? */
*/* P INCREMENT POSITION POINTER */
*/* D (YES,,NO,SCANKEY2) END OF CONTROL CARD? */
*/* P SET UP BLANK INPUT DATA */
*/* R RETURN */
*/*SCANKEY3: N FOUND FIELD- LOOK FOR NEXT BLANK */
*/* P SET BEGIN MARKER */
*/*SCANKEY4: P INCREMENT POSITION POINTER */
*/* P DECREMENT COUNTER */
*/* D (YES,,NO,SCANKEY4) CHAR BLANK? */
*/* P GET NO OF CHARS THIS PARM */
*/* D (YES,,NO,%P12G4) WITHIN LEGAL SIZE? */
*/* R RETURN */
*/*%P12G4: P TRUNCATE */
*/* R RETURN */
*/*SCANKEY5: E SUBROUTINE */
*/* N SCAN FOR MEMBER & CSECT NAMES */
*/* P BLANK OUT MEMBER & CSECT NAME BUFFERS */
*/* S SCANKEY1:SCAN FOR MEMBER NAME */
*/* P SAVE MEMBER NAME */
*/* S SCANKEY1:SCAN FOR CSECT NAME */
*/* P SAVE CSECT NAME */
*/* D (YES,NAME03C,NO,) WERE NAMES OVER 8 CHAR */
*/* R RETURN */
*/*SCAN: E SUBROUTINE */
*/* N DECODES NUMERIC FIELDS ON CONTROL CARDS */
*/*%P13B4: D (YES,,NO,%P13C4) CHAR BLANK? */
*/* P INCREMENT POSITION POINTER */
*/* D (YES,IGNORE,NO,%P13B4) REACHED END OF BUFFER? */
*/*%P13C4: P CLEAR BUFFERS */
*/*SCAN4: P SAVE START OF DATA FIELD */
*/*SCAN1: D (YES,SCAN3,NO,) CHAR COMMA? */
*/* D (YES,SCAN3,NO,) CHAR BLANK? */
*/* P (,SCAN1) INCREMENT POSITION POINTER */
*/*SCAN3: P GET NO OF CHARS SCANNED */
*/* P SAVE THE DATA */
*/* D (YES,SCAN5,NO,) END OF DATA YET? */
*/* D (YES,,NO,%P13J3) BLANK FOLLOWING COMMA? */
*/* N (,SCAN5) DISCARD THIS OPERAND */
*/*%P13J3: P (,SCAN4) INCREMENT POSITION POINTER */
*/*SCAN5: D (YES,DIGITERR,NO,) ODD NUM DIGITS? */
*/* D (YES,,NO,IGNORE) WAS ORIGINAL INPUT IN HEX */
*/* P TRANSLATE TO BINARY */
*/* P SAVE START ADDR OF DATA */
*/*SCAN6: P CONVERT TO HEX */
*/* P INCREMENT TEMP & DATA BUF POINTERS */
*/* D (YES,,NO,SCAN6) END OF DATA BLOCK? */
*/* R RETURN */
*/*DIGITERR: S SCANKEY:GET KEY WORD */
*/* D (YES,DIGERR2,NO,) WAS IT A REP CARD? */
*/* P TURN ON IGNOP SW TO IGNORE REPS */
*/*DIGERR2: P POINT TO MSG AMA109I */
*/* S WRITEO:PRINT ERROR MSG */
*/* D (ON,,OFF,%P14H3) CONSW? */
*/* S WTORTN:WRITE MSG TO CONSOLE */
*/*%P14H3: P SET RETURN CODE 8 */
*/* R RETURN VIA LNKRG3 */
*/*OPENLIB: E SUBROUTINE */
*/* D (YES,,NO,%P15C4) D.S. ALREADY OPEN? */
*/* R RETURN */
*/*%P15C4: L READ JFCB FOR LIB */
*/* D (YES,,NO,RSRV) UPDATE TO VTOC? */
*/* S UPVTRTN:ASK OPER TO UPDATE VTOC */
*/* D (YES,,NO,NOF4MOD) IS IT OK WITH HIM? */
*/*RSRV: P GET DEB ADDR FOR SYSLIB */
*/* P SAVE UCB ADDR FROM DEB */
*/* L RESERVE DEVICE WHERE SYSLIB RESIDES */
*/* P TURN ON RSVSW- INDICATE RESV ISSUED */
*/*OPEN2: L OPEN LIB FOR UPDATE */
*/* R RETURN */
*/*NOF4MOD: N DONT ALLOW INSP OR MODIF */
*/* P TURN ON NAMEERR SW */
*/* P POINT TO ERROR MSG AMA114I */
*/* S WRITEO:PRINT ERROR MSG */
*/* D (YES,,NO,%P16H2) CONSOLE OPTION IN EFFECT? */
*/* S WTORTN:WRITE MSG TO CONSOLE */
*/*%P16H2: P SET RETURN CODE 8 */
*/* R RETURN VIA LNKRG3 */
*/*RDDISK: E SUBROUTINE */
*/* N XDAP READS FOR SPECIFIC RECORDS */
*/* P GET MAX SIZE OF RECORD */
*/* L XDAP TO READ RECORD */
*/* L WAIT FOR COMPLETION OF READ */
*/*ERRTST: D (YES,,NO,%P17F2) SUCCESSFUL COMPLETION? */
*/* R RETURN */
*/*%P17F2: N TEST TYPE OF ERROR */
*/* D (YES,,NO,CLOSE2A) PERMANENT ERROR? */
*/* D (YES,,NO,CLOSE2A) WRONG LENGTH RECORD? */
*/* R RETURN */
*/*CLOSE2A: P GET IOB ADDR */
*/* L SYNADAF- ANALYZE PERM I/O ERROR */
*/* P SAVE ADDR OF SYNAD WORK AREA */
*/* P MOVE I/O ERR MSG TO MSG BUFFER */
*/* S IOMSG:PRINT I/O ERROR MSG */
*/* L SYNADRLS- RELEASE SYNADAF WORK AREAS */
*/* P SET RETURN CODE 8 */
*/* P TURN ON IGNORE OPER & NAMEERR SW */
*/* R RETURN */
*/*WRDISK: E SUBROUTINE */
*/* N XDAP WRITES TO UPDATE SPECIFIC RECORDS */
*/* P GET MAX SIZE OF RECORD */
*/* P TURN ON SLI IN XDAP SUPPLIED CH PROG */
*/* L XDAP TO WRITE RECORD */
*/* L (,ERRTST) WAIT FOR COMPLETION OF WRITE */
*/*UPVTRTN: E SUBROUTINE */
*/* N MSG AMA117D TO OPER- PERM TO UPDATE VTOC */
*/* P HOUSEKEEPING */
*/* L EXTRACT ADDR OF TIOT FOR ACT TASK */
*/* P MOVE JOBNAME FROM TIOT TO MSG BUF */
*/* P INCREMENT TO FIRST DD ENTRY */
*/*CHKLIB: D (YES,LIBUCB,NO,) DD ENTRY FOR SYSLIB? */
*/* P (,CHKLIB) INCREMENT TO NEXT DD ENTRY */
*/*LIBUCB: P GET POINTER TO SYSLIB UCB */
*/* P MOVE VOLSER TO MSG BUF */
*/*UNITNAME: P MOVE UNIT ADDR TO MSG BUF */
*/* L WRITE MSG AMA117D TO OPERATOR */
*/* L WAIT FOR HIS REPLY */
*/* P BLANK OUT MSG AREA */
*/* R RETURN */
*/*IOMSG: E SUBROUTINE */
*/* N PRINTS SYNADAF I/O ERROR MSG */
*/* P INITIALIZE MSG BUF WITH SYNADAF ERROR INFO */
*/* L PRINT MSG QSAM*/
*/* L CHECK FOR COMPLETION OF WRITE */
*/* L PRTOV- SPACE TO NEW PAGE IF NECESSARY */
*/* D (NO,,YES,%P20G2) CONSOLE OPTION IN EFFECT? */
*/* R RETURN */
*/*%P20G2: L WRITE MSG TO OPERATOR */
*/* R RETURN */
*/*SETUP1: E SUBROUTINE */
*/* N PREPARE FOR VERYIFY OR REP */
*/* S SCAN:GET OFFSET */
*/* P SAVE OFFSET */
*/* S SCAN:GET PATCHES */
*/* S OPENLIB:OPEN DATA SET FOR UPDATE IF NOT */
*/* P POINT TO OFFSET INTO RECORD */
*/* P SUBTRACT BASE VALUE IF ANY */
*/* D (YES,NAME07,NO,) IS THIS A CSECT OPERATION? */
*/* P CALCULATE END OF PATCH AREA */
*/* D (YES,%P22B4,NO,) DOES IT EXCEED END OF RECORD? */
*/* R RETURN */
*/*%P22B4: P (,VERY1) POINT TO MSG AMA106I */
*/*NAME07: N ENTER HERE AFTER REP CARD WITH NAME OP */
*/* P SET PATCH ADDR */
*/* P RESTORE START ADDR */
*/* L POINT TO RECORD */
*/* D (YES,NAME07A,NO,) MULT TEXT REC SW ON ? */
*/* D (YES,NAME08,NO,) ONE RECORD SW SET ? */
*/*NAME07B: S RDDSK4:READ CONTROL RECORD */
*/* D (VEC1,NAME12B,VEC2,) RETURN VECTOR ? */
*/*NAME08: P POINT TO PATCH ADDR IN CORE */
*/* D (YES,DSERROR,NO,) PATCH ADDR < ADDR TXT REC */
*/* P COMPUTE END ADDR OF TXT REC */
*/* D (YES,NAME09,NO,) PATCH ADDR < END ADDR */
*/* D (YES,NAME12B,NO,) ONE RECORD SW ON ? */
*/*NAME08B: D (YES,NAME12B,NO,) END OF LOAD MODULE */
*/* P SET LNKRG2 TO ADDR VECTOR1 */
*/* N (,RDDSK3) SKIP THIS TXT, READ NEXT CONTROL */
*/*NAME07A: S NAME01A:SET MODULE ATTRIBUTES */
*/* D (VEC1,%P41F5,VEC2,%P41F3,VEC3,%P41G4) RETURN VECTOR  */
*/*%P41F5: P (,%P41G4) NOP */
*/*%P41F3: P NOP */
*/*%P41G4: S RDDSK2:GET 1ST TXT REC */
*/* P TURN OFF ONE RECORD INDIC IF ON */
*/* L (,NAME08) POINT AT START OF TXT */
*/*NAME09: S RDDSK2:GET TXT RECORD */
*/* P GET TXT START ADDR */
*/* P ADD NUM OF PATCH CHARS */
*/* P TURN OFF OVERFLOW SW IF ON */
*/* D (YES,NAME10,NO,) IS END PATCH IN REC */
*/* D (YES,NAME12B,NO,) ONE RECORD SW ON */
*/* P TURN ON OVERFLOW SW */
*/* P DETERMINE NUM OF CHARS OVER */
*/* P DETERMINE NUM OF PATCH CHARS IN THIS TXT */
*/* P DECR BY ONE & SAVE */
*/*NAME10: S CCHNOTE:SET UP CCHHR */
*/* P COMPUTE OFFSET */
*/* D (VER,NAME13,REP,) VERIFY OR REP */
*/* D (NO,,YES,SPLIT) FIRST PASS SW ON? */
*/* P TURN FIRST PASS SW ON */
*/* S (,NAME10A) UNPATCH: FORMAT UNPATCH MESSAGE */
*/*SPLIT: P RESET OFFSET INTO MESSAGE */
*/* S UNPK: COMPLETE UNPATCH MESSAGE */
*/*NAME10A: P SAVE OFFSET OF LAST DATA MOVED */
*/* P MOVE THIS PART OF PATCH TO TXT */
*/*NAME11: S WRDISK:UPDATE DISK */
*/* P INDICATE MODIFICATION- MODIFY SW */
*/*NAME12: D (YES,%P42H4,NO,) MORE PATCH- OVRFL? */
*/*WRITEUN: D (NO,%P42H5,YES,) IS THIS A VERIFY OPERATION */
*/* R RETURN VIA LNKRG3 */
*/*%P42H5: S WRITE:PRINT MESSAGE */
*/* P BLANK LAST 40 CHAR OF BUFFER */
*/* P TURN OFF FIRST PASS SW */
*/* R RETURN VIA LNKRG3 */
*/*%P42H4: P (,NAME07B) UPDATE VARIABLES FOR REST OF PATCH */
*/*NAME12B: P (,NAME14) POINT TO MSG AMA106I */
*/*NAME13: D (YES,NAME12,NO,) DOES PATCH COMPARE */
*/* P POINT TO MSG AMA104I */
*/*NAME14: S WRITEO:PRINT ERROR MSG */
*/* D (YES,,NO,%P43G2) CONSOLE OPT IN EFFECT */
*/* S WTORTN:WRITE MSG TO CONSOLE */
*/*%P43G2: P SET RETURN CODE 8 */
*/* P (,DUMP01A) TURN ON IGNOP SW- IGNORE REPS */
*/*DSERROR: P (,NAME14) POINT TO MSG AMA107I */
*/*INSMDFY: E SUBROUTINE */
*/* N UPDATE SSI TO INDICATE LOCAL MODIFY AFTER SUCCESSFUL REP */
*/* D (YES,CKIDR,NO,) NAME OPT REP- MODIFY?*/
*/* D (YES,%21A6,NO,) CCHHR REP OCCURR? */
*/* R RETURN */
*/*%21A6: L READ JFCB FOR LIB2 */
*/* D (NO,MOVESER,YES,) IS UPDATE FOR VTOC */
*/* P MAKE DSN 'FORMAT4.DSCB' */
*/*MOVESER: P MOVE VOLSER TO MSG BUF */
*/* P MOVE CCHHR TO MSG BUF */
*/* P DETERMINE LENGTH OF DSN */
*/* P MOVE DSN TO MSG BUF */
*/* P MOVE ROUTER/DESCR CODES TO MSG BUF */
*/* P MOVE MSG LEN TO MSG BUF */
*/* L EXTRACT TIOT ADDRESS */
*/* P MOVE JOBNAME TO MSG BUF */
*/*WTO: L WRITE AMA121I TO CONSOLE */
*/* P TURN OFF CCHHR UPDATE SW- MODFYREC */
*/* R RETURN */
*/*CKIDR: D (YES,,NO,INSM1) IDR UPDATE REQUIRED ? */
*/* L POINT TO IDR- IDRTTR */
*/* S RDDSK2:READ IDR RECORD */
*/* P POSITION TO NEXT SPZAP ENTRY IN IDR */
*/* L GET DATE */
*/* P MOVE DATE TO IDR */
*/* P MOVE CSECT ESDID TO IDR */
*/* P MOVE IDR USER DATA TO IDR */
*/* P PREPARE FOR DISK UPDATE- IDRFSEEK */
*/* S WRDISK:UPDATE DISK */
*/* P TURN OFF IDR UPDATE SW */
*/*INSM1: P TURN OFF NAMEOP REP SW- MODIFY */
*/*INSM1A: N INSPECT FOR A PDS REP HAVING OCCURRED */
*/* S DIRREAD:GET DIR BLOCK WHICH SHOULD CONTAIN MEMBER */
*/* P SAVE STOP ADDR OF BLOCK */
*/* P POINT TO FIRST ENTRY */
*/* P TURN ON NO-MEMBER SW */
*/*INSM2: P GET LEN OF USER FIELD */
*/* D (YES,INSM3,NO,) DO WE HAVE THE MEMBER WE WANT? */
*/* P POINT TO NEXT ENTRY */
*/* D (YES,,NO,INSM2) EXCEEDED LEN OF BLOCK? */
*/* R RETURN */
*/*INSM3: P TURN ON SSI MISSING SW */
*/* P TURN OFF MISSING MEMBER SW */
*/* D (NO,,YES,AOSPDS) WAS MODULE PRODUCED BY AOS LKED */
*/* P CONVERT LEN OF USER ENTRY TO NUM OF BYTES */
*/* D (YES,,NO,%P24G4) IS NUM <= 22? */
*/* N USER FIELD CONTAINS NO SSI */
*/* R RETURN */
*/*%P24G4: D (YES,,NO,%P24H4) IS NUM = 30? */
*/* N USER FIELD CONTAINS NO SSI */
*/* R RETURN */
*/*%P24H4: D (YES,,NO,%P24J4) IS NUM = 32? */
*/* N USER FIELD CONTAINS NO SSI */
*/* R RETURN */
*/*%P24J4: D (YES,,NO,%P25A2) IS NUM = 40? */
*/* N USER FIELD CONTAINS NO SSI */
*/* R RETURN */
*/*%P25A2: P POINT TO SSI BYTES */
*/*INSM4: P TURN OFF NO-SSI SW */
*/* D (YES,,NO,%P25D2) SSI OPERATION BEING PERFORMED ? */
*/* R RETURN */
*/*%P25D2: P TURN ON LOCAL MODIFY BITS */
*/* S DIRWRITE:UPDATE DIRECTORY */
*/* S SCANKEY:RESET POINTERS */
*/* R RETURN */
*/*AOSPDS: D (NO,,YES,%HASSSI) IS SSI PRESENT */
*/* R RETURN */
*/*%HASSSI: P SET SSI PTR TO END OF BASIC SECTION */
*/* D (YES,,NO,NOSCTR) IS MEMBER SCATTER LOADABLE */
*/* P ADD 8 TO SSI PTR */
*/*NOSCTR: D (YES,,NO,NOALIAS) IS MEMBER NAME AN ALIAS */
*/* P ADD 11 TO SSI PTR */
*/*NOALIAS: P (,INSM4) PUT SSIPTR IN PROPER REGISTER */
*/*WRITEO: E SUBROUTINE */
*/* N PRINTS INPUT CARD OR ERROR MSGS */
*/* P MOVE MSG TO MSG BUFFER */
*/*WRITE1: P PAD REST OF BUFFER WITH BLANKS */
*/*WRITE: L ISSUE WRITE- QSAM */
*/* L CHECK FOR COMPLETION */
*/* L SPACE TO NEW PAGE IF NECESSARY- PRTOV */
*/* P BLANK OUT END OF BUFFER */
*/* R RETURN VIA LNKRG1 */
*/*RDCARD2: E SUBROUTINE */
*/* N QSAM READS TO CARD READER */
*/* L GET A CARD */
*/* R RETURN */
*/*DIRREAD: E SUBROUTINE */
*/* N SIMULATES BLDL- READ SPECIFIC DIRECTORY BLOCK */
*/* P MOVE IN TIC TO EXTENDED CH PROGM */
*/* P MOVE IN READ AREA ADDRESS */
*/* P GET DEB ADDR */
*/* P SET SEEK ADDR FROM DEB IN 1ST CCW */
*/*UPDATEIO: P SET ADDR IOB FOR EXCP */
*/* N SEARCH FOR DIRECTORY, READ COUNT, */
*/* N SEARCH ON KEY, READ APPR DIR BLOK */
*/* L ISSUE SVC 0- EXCP */
*/* L (,ERRTST) WAIT FOR COMPLETION */
*/*DIRWRITE: E SUBROUTINE */
*/* N SIMULATES STOW- UPDATE DIRECTORY BLOCK */
*/* P EXTEND XDAP CH PROG WITH UPDATE CCW */
*/* P MOVE IN WRITE AREA ADDR */
*/* P (,UPDATEIO) SET SEARCH ARG */
*/*DUMP01AA: E SUBROUTINE */
*/* L POINT AT TEXT RECORD */
*/*DUMP01: S WRITEO:SKIP A LINE */
*/* S RDDSK2:READ TEXT RECORD */
*/*DUMP01E: S CCHNOTE:SET UP CCHHR */
*/* P MOVE HEADER TO MSG BUFFER */
*/* P POINT TO DATA TO BE DUMPED */
*/* P GET KEYLEN FROM DCB */
*/* P ADD MAX SIZE OF RECORD */
*/* P MINUS RESIDUAL = LEN OF DATA */
*/* D (YES,DUMP01AC,NO,) MEMBER DUMP ONLY ? */
*/* D (YES,,NO,DUMP01AB) ABSOLUTE DUMP ? */
*/* P BLANK OUT CSECT LABEL FROM HEADER */
*/*DUMP01AC: P BLANK OUT CSECT NAME FIELD FROM HEADER */
*/* P SAVE LEN OF DATA TO BE DUMPED */
*/*DUMP01AB: P COMPUTE STOP ADDR OF DATA */
*/* P STORE NEW LEN */
*/* P XLATE & MOVE REC ADDR TO MSG BUF */
*/* P XLATE & MOVE REC LEN TO MSG BUF */
*/* S WRITE:PRINT HEADER */
*/* D (YES,,NO,%P30J4) WAS RECORD LEN ZERO ? */
*/* R RETURN VIA LNKRG2 */
*/*%P30J4: N DETERMINE OFFSET OF 1ST LINE OF DUMP */
*/* P SUBTRACT BASE OFFSET FROM START ADDR */
*/*DUMP02: S DUMPCOM1:INITIALIZE FOR DUMP */
*/* P SAVE LOCATION OF LINE START- TBUF */
*/* P SAVE OFFSET THIS LINE- TBUF */
*/*DUMP02B: P INITIALIZE CHAR COUNTER TO 4 */
*/*DUMP02C: P XLATE & MOVE 1 DATA BYTE TO 2 MSG BYTES */
*/* P INCREMENT MSG BUF PTR BY 2 */
*/* D (YES,DUMP08,NO,) END OF DATA ? */
*/* D (YES,DUMP03B,NO,) TRANSLATE OPTION ? */
*/*DUMP03A: P DECR CHAR COUNT BY 1 */
*/* D (YES,,NO,DUMP02C) IS CHAR COUNT ZERO ?*/
*/* D (YES,DUMP03,NO,) WORD COUNT = 5 ? */
*/* P SPACE 3 BLANKS BETWEEN WORDS */
*/* D (YES,,NO,DUMP02D) TRANSLATE OPTION ? */
*/* P CHANGE SPACE BTWN WORDS TO 2 BLNKS */
*/*DUMP02D: P DECR WORD COUNTER BY 1 */
*/* D (YES,,NO,DUMP02B) IS WORD COUNT ZERO ? */
*/* D (YES,GRAP1,NO,) TRANSLATE OPTION ? */
*/* S WRITE:PRINT LINE */
*/*DUMP02E: P ADD 32 TO OFFSET FIELD */
*/* N (,DUMP02) PROCESS NEXT LINE */
*/*DUMP03B: D (YES,,NO,DUMP03A) CHAR COUNT = 3 ? */
*/* P INCR MSG BUF PTR BY 1 */
*/* P DECR CHAR COUNT BY 1 */
*/* D (YES,,NO,DUMP02C) IS CHAR COUNT ZERO ? */
*/*DUMP03: P INCR MSG BUF PTR BY 5- MID PAGE */
*/* P DECR WORD COUNTER BY 1 */
*/* D (YES,,NO,DUMP02B) IS WORD COUNT ZERO ? */
*/*DUMP08: D (YES,GRAP1,NO,) TRANSLATE OPTION ? */
*/* S WRITE:PRINT LAST LINE */
*/* P SET CONDITION CODE TO 3 IF END OF MOD */
*/* R RETURN VIA LNKRG2 */
*/*GRAP1: P SET LNKRG1 TO ADDR OF INSTR0 */
*/* P SET PTR TO BEGIN OF DATA THIS LINE */
*/*GRAP1B: P MOVE LEFT DELIM * TO MSG BUF */
*/* P POINT TO TRANSLATE FIELD OF BUF */
*/* P SET CHAR COUNTER = 16 */
*/*GRAP2: D (YES,GRAP3,NO,) DATA BYTE = BLANK ? */
*/* D (YES,GRAP5,NO,) DATA BYTE <= X'7F' ? */
*/* P LOAD ADDR OF ALPHANUM XLATE TABLE */
*/* D (YES,GRAP6,NO,) DATA BYTE >= C'A' ? */
*/*GRAP3: P MOVE A PERIOD TO MSG BUF FOR THIS BYTE */
*/*GRAP3B: P INCR DATA PTR */
*/* D (YES,GRAP8,NO,) REACHED END DATA YET ? */
*/* P INCR MSG BUF PTR */
*/* P DECR CHAR COUNT BY 1 */
*/* D (YES,,NO,GRAP2) CHAR COUNT = 0 ? */
*/* P (,WRITE) MOVE RIGHT DELIM * TO MSG BUF */
*/*GRAP5: P LOAD ADDR OF SPECIAL SYM XLATE TABLE */
*/*GRAP6: P (,GRAP3B) MOVE & XLATE DATA BYTE TO MSG BUF */
*/*GRAP8: D (YES,,NO,WRITE) DID WE XLATE OPCODS YET */
*/* S WRITE:PRINT LINE */
*/* P SET COND CODE 3 IF END OF MODULE */
*/* R RETURN */
*/*INSTR0: E SUBROUTINE */
*/* N MNEMONIC XLATION PART OF DUMP01 RTN */
*/* S DUMPCOM:INITIALIZATION */
*/*INSTR1: P SET INSTR COUNTER = 2 */
*/*INSTR2: P GET DATA BYTE- OPCODE */
*/* P INCR TO NEXT DATA BYTE */
*/* D (YES,INSTR5,NO,) END OF DATA ? */
*/* P GET INDEX TO XLATE TABLE */
*/* D (YES,TWOBYTES,NO,) LOOK AT 2ND BYTE ? */
*/*TABCHK: D (YES,TRANS5,NO,) FIVE CHAR OPCODE ? */
*/* D (YES,INSTR7,NO,) FOUR CHAR OPCODE ? */
*/* N TWO CHAR OPCODE */
*/* P POINT TO MNEMONIC IN TWO CHAR TABLE */
*/* P MOVE MNEMONIC TO MSG BUF */
*/*INSTR3: P INCR PAST HALFWORD */
*/* D (YES,INSTR5,NO,) END OF DATA ? */
*/* P INCR MSG BUF PTR BY 4 */
*/* P DECR INSTR COUNTER */
*/* D (YES,,NO,INSTR8) INSTR COUNTER = 0 ? */
*/* D (YES,INSTR6,NO,) WORD COUNTER = 5 ? */
*/* P SPACE 3 BETWEEN WORDS */
*/* P DECR WORD COUNTER BY 1 */
*/* D (YES,,NO,INSTR1) WORD COUNTER = 0 ? */
*/*INSTR5: P SET DATA PTR BACK TO BEGIN OF LINE */
*/* P INCR DATA PTR TO SECOND HALF OF LINE */
*/* P (,GRAP1B) SET LNKRG1 TO ADDR OF DUMP02E */
*/*INSTR7: P POINT TO MNEMONIC IN FOUR CHAR TABLE */
*/* P (,INSTR3) MOVE MNEMONIC TO MSG BUF */
*/*TRANS5: P POINT TO MNEMONIC IN FIVE CHAR TABLE */
*/* N IS THIS THE 2ND HWORD OF A PAIR ? */
*/* D (YES,MOVE5,NO,) IS INSTR COUNTER = 1 ? */
*/* N BACK UP ONE POS IN MSG BUF */
*/* P DECR MSG BUF PTR BY 1 */
*/* P MOVE MNEMONIC TO MSG BUF */
*/* P (,INSTR3) RESET MSG BUF PTR  +1 */
*/*MOVE5: P (,INSTR3) MOVE MNEMONIC TO MSG BUF */
*/*INSTR6: P INCR MSG BUF PTR BY 5- MID PAGE */
*/* P DECR WORD COUNTER BY 1 */
*/* D (YES,,NO,INSTR1) IS WORD COUNT = 0 ? */
*/*INSTR8: P (,INSTR2) INCR MSG BUF PTR BY 1- SPACE BTWN HWORDS */
*/*TWOBYTES: P GET 2ND BYTE OF INSTR */
*/* P RESET DATA BUF PTR TO BEGIN OF OPCODE */
*/* D (YES,,NO,BYTE29C) 1ST BYTE = X'B2' ? */
*/* D (YES,DXRCK,NO,) 2ND BYTE TOO HIGH */
*/* P GET INDEX TO B2 XLATE TABLE */
*/*BYTE2EX: P (,TABCHK) INCR DATA BUF PTR BY 1 AGAIN */
*/*DXRCK: D (NO,TOOHI,YES,BYTE2EX) DXR INSTRUCTION ? */
*/*TOOHI: P (,BYTE2EX) NO MNEMONIC - ZERO INDEX */
*/*BYTE29C: D (YES,,NO,BYTE29E) 1ST BYTE = X'9C' ? */
*/* P (,BYTE2EX) GET INDEX TO 9C XLATE TABLE */
*/*BYTE29E: D (YES,,NO,BYTE2XX) 1ST BYTE = X'9E' ? */
*/* P (,BYTE2EX) GET INDEX TO 9E XLATE TABLE */
*/*BYTE2XX: N NO MNEMONIC */
*/* P (,BYTE2EX) ZERO INDEX */
*/*DUMPCOM: E SUBROUTINE */
*/* P GET START LOC OF LINE */
*/*DUMPCOM1: N INITIALIZATION FOR DUMPING */
*/* P BLANK MSG BUFFER */
*/* P LOAD LOC OF MSG BUFFER */
*/* P SET WORD COUNTER TO 8 */
*/* R RETURN */
*/*SETBLKSI: E SUBROUTINE */
*/* N SETS SYSIN BLKSIZE TO 80 IF NOT PROVIDED */
*/* P GET BLKSIZE FROM INPUT DCB */
*/* D (YES,,NO,%P44D1) WAS BLKSIZE PROVIDED */
*/* R RETURN TO OPEN */
*/*%P44D1: P MOVE BLKSIZE OF 80 TO DCB */
*/* R RETURN TO OPEN */
*/*UNPATCH: E SUBROUTINE */
*/* P MOVE UNPATCH MESSAGE TO BUFFER */
*/*UNPK: P TRANSLATE DATA TO BE REPLACED */
*/* R RETURN */
*/*OPTCDCK: E SUBROUTINE */
*/* N SUPPRESS OPTCD FROM SYSLIB DSCB */
*/* R RETURN TO OPEN */
*/*AMASPZAP: END */
AMASPZAP CSECT
*A472300-472420,535300-535420,578800-578920                     YA01766
*A588700-588820,633020-633060                                   YA01766
*C534300                                                        YA01767
*A301000,316300,330300-331034,719100,724000                      Y02160
*A783400-783520,803400,815400,892300-892480,898300-898420        Y02160
*C778900-779400                                                  Y02160
*C888300,888400,888520,888560,888592                             YM5257
*A537000                                                         YM5531
*A714300                                                         YM5532
*C683700-685200,745800,746100,746800,750300,754800,755700,760500,YM5533
*C761100                                                         YM5533
*A685600-685740                                                  YM5533
*D341800-341960,807100-807284                                    YM5534
*C343500                                                         YM5534
*A823300-823760                                                  YM5534
*D418440-418460                                                  YM5148
*A422400-423000,425500                                           YM5148
*A421100,421140,576200-576220,600700,633100,638800,639400,642400 YM5146
*A808300-809020                                                  YM5146
*D848400,848700,896400896700,897000,897300,897600                YM5147
*A848100-848320,848420-848640,848740,848840,896600,897100,897200,YM5147
*A897700,897800                                                  YM5147
*A318700,538200-539400,547500-548700,585300-589200,592800-594300,X01979
*A599700-602700,753900-754800,765900-766800,79770                X01979
*A578200,578300,705100-705248,767800,768400,775300,775400        X01979
*C591300,703800,704200,767700,775800,777900,779100,780900,781200 X01979
         SPACE 1
***********************************************************************
*                  REGISTER DEFINITIONS
***********************************************************************
RG0      EQU   0
RG1      EQU   7
RG2      EQU   2
RG3      EQU   3
RG4      EQU   4
RG5      EQU   5
RG6      EQU   6
WK1      EQU   RG1
WK2      EQU   RG2
WK3      EQU   RG3
WK4      EQU   RG4
WK5      EQU   RG5
WK6      EQU   RG6
WK7      EQU   1                        MISC REGISTER FOR DUMP ROUTINE
R0       EQU   0                                                 Y02160
R1       EQU   1
LNKRG1   EQU   8
LNKRG2   EQU   9
LNKRG3   EQU   13
R13      EQU   13
BASREG3  EQU   10                       RDAREA1 BASE REGISTER
BASREG2  EQU   11
BASREG   EQU   12
R14      EQU   14
R15      EQU   15
*******************
*                  EQUATES
*******************
OPENED   EQU   X'10'                    DCB OPENED BIT
OPENBIT  EQU   48                       OFFSET FOR OPEN BIT
MULTXT   EQU   X'08'                    NOT EDITABLE
MODTTR   EQU   8             .(PDS-DIRECTORY) TTR OF 1ST RECD. @ZA19029
TXTTTR   EQU   14            .(PDS-DIRECTORY) TTR OF 1ST TXT.  @ZA19029
ATTR     EQU   22                       PDS ATTRIBUTE FIELD
AOS      EQU   X'80'                    AOS LKED PDS FLAG        Y01979
SSIB     EQU   X'10'                    SSI PDS FLAG BIT         Y01979
SCTR     EQU   X'04'                    PDS SCTR SECTION FLAG    Y01979
ALIAS    EQU   X'80'                    PDS ALIAS FLAG BIT       Y01979
LNGTH    EQU   27                       POD LENGTH OF TEXT
ORGIN    EQU   32                       POD LOC FOR TEST ORIGIN
NEXTS    EQU   X'10'                    NO. OF EXTENTS IN DATA SET
DEBEXT   EQU   X'20'                    EXTENT FIELD IN DEB
STEXT    EQU   X'26'                    START ADDR IN EXTENT
ENDEXT   EQU   X'0A'                    END ADDR IN EXTENT
COMMA    EQU   X'6B'
BLANK    EQU   X'40'
AST      EQU   X'5C'                    COMMENT KEY WORK
SSIMDFY  EQU   X'01'                    OFFSET IN SSI BYTES FOR MODIFY
SSIOP    EQU   X'80'                    SSI ACTION FLAG
NAMEIDR  EQU   X'40'                    IDR CARD AFTER NAME CARD S21016
IDRRD    EQU   X'20'                    LOAD MOD HAS IDR RECORDS S21016
MODFYREC EQU   X'10'                    CCHHR REP HAS BEEN DONE  S21016
NOSSI    EQU   X'08'                    SSI FIELD MISSING FLAG
NOMEM    EQU   X'04'                    NO MEMBER FOUND FLAG
LMREAD   EQU   X'02'                    NEXT LOAD MOD REC READ   S21016
NENOIDR  EQU   X'01'                    MODULE IS NE SO NO IDR   S21016
MODIFY   EQU   X'01'                    REP ACTION FLAG
TRAN     EQU   X'02'                    TRANSLATE DUMP
FIRSTPCH EQU   X'10'                    UNPATCH FIRST PASS SW    X01979
PSIND    EQU   X'80'                    ON IF DUMP IS OF A SAM D.S.
MEMDMP   EQU   X'08'                    MEMBER DUMP OF DATA SDT
MULREC   EQU   X'04'                    MORE THAN ONE TEXT REC
ONEREC   EQU   X'01'                    INDICATOR FOR ONE RECORD MEM
NAMEOP   EQU   X'02'                    OPERATION USING NAME CARD
IGNOP    EQU   X'04'                    VERIFY OPERATION NEGATIVE
VERYOP   EQU   X'08'                    VERIFY OPTION IN PROGRESS
OVFLOW   EQU   X'10'                    OVERFLOW PATCH
ENDMOD   EQU   X'20'                    END OF MODULE RECORD
NAMEERR  EQU   X'40'                    ERROR IN NAME OR CCHHR OF.
BLKSZE   EQU   X'3E'                    DCB BLKSIZE OFFSET
KEYLEN   EQU   16                       DCB KEYLENGTH OFFSET     A48718
DDNAM    EQU   X'28'                                             Y02160
MAK1     EQU   X'01'                    BYTE UPDATE
CMD      EQU   31                       OFFSET IN XDAP MACRO     S21995
RSVON    EQU   X'FF'
DS1DSORG EQU   82-44                    DISPLACEMENT OF DSORG IN F1DSCB
PO       EQU   X'02'                    DSORG FOR PARTITIONED
PS       EQU   X'40'                    DSORG FOR SEQUENTIAL
OVER8    EQU   X'08'                    NAME OVER 8 CHAR         A48705
OPTCD    EQU   52                       OPTCD OFFSET INTO LIB2   A49131
***********************************************************************
*        THE FOLLOWING ARE INDEX VALUES FOR BRANCHING TO I/O CSCET
***********************************************************************
ARDCARD2 EQU   0                                                 S21995
ACLOSE1  EQU   4                                                 S21995
AWRITEA  EQU   8                                                 S21995
AWRITE0A EQU   12                                                S21995
ADIRREAD EQU   16                                                S21995
ADIRWRIT EQU   20                                                S21995
ARDDSK2  EQU   24                                                S21995
AOPENLIB EQU   28                                                S21995
ARDDISK  EQU   32                                                S21995
AWRDISK  EQU   36                                                S21995
AWTO     EQU   40                                                S21995
ACLOSE2  EQU   44                                                S21995
AEOD     EQU   48                                                S21995
AINSMDFY EQU   52                                                X01979
AINSM1A  EQU   56                                                X01979
ACLOSE4  EQU   60                      .FOR PARM-ERR EXIT.     @ZA06024
ACLOSE5  EQU   64                      .FOR INVAL-RECD EXIT.   @ZA09673
***********************************************************************
*        THE FOLLOWING ARE INDEX VALUES FOR BRANCHING TO DUMP CSECT
***********************************************************************
ADMP1AA  EQU   0                                                 S21995
ADMP01   EQU   4                                                 S21995
ADMP1E   EQU   8                                                 S21995
ADMP1AB  EQU   12                                                S21995
  EJECT
***********************************************************************
         SAVE  (14,12)
         BALR  BASREG,0
         USING *,BASREG
         USING RDAREA1,BASREG3
BEGIN    L     BASREG2,ACONSTS                                   S21995
         USING AMASZCON,BASREG2                                  S21995
         ST    R13,REGSAVE+4
         LR    WK6,R13
         LA    R13,REGSAVE
         ST    R13,8(WK6)
         B     ARROND
IDENT    DC    CL8'REL/03.7'                                   @ZA09683
ACONSTS  DC    V(AMASZCON)             .BASE FOR CONSTS CSECT. @ZA02788
* TEST FOR PARAMETER SPECIFICATIONS.                           @ZA06024
ARROND   LTR   R1,R1                                           @ZA06024
         BZ    OPENUP                  .B IF NO PARAMETERS.    @ZA06024
         L     WK1,0(R1)               .PARAM-LIST POINTER.    @ZA06024
         LA    WK1,0(WK1)              .DROP HIGH BYTE.        @ZA06024
         LTR   WK1,WK1                                         @ZA06024
         BZ    ALTDDNAM                .B IF ADDR-PART ZERO.   @ZA06024
         LH    WK2,0(WK1)              .FIRST COUNT FIELD.     @ZA06024
         LTR   WK2,WK2                                         @ZA06024
         BZ    ALTDDNAM                .B OF ZERO (DYNAM ONLY) @ZA06024
* TEST FOR PARAM TO IGNORE IDR-FULL CONDITION.                 @ZA06024
         CLC   2(ZPRM0LEN,WK1),PARM0STR .TEST PARAM VALUE.     @ZA06024
         BE    IGNIDRFL                .B IF CORRECT.          @ZA06024
* INCORRECT PARAMETER VALUE. SET FLAG FOR MSG AFTER OPEN.      @ZA06024
         OI    PARMBITS,QPARMERR       .SET PARM-ERR FLAG.     @ZA06024
         B     ALTDDNAM                                        @ZA06024
* OPTION TO OVERRIDE IDR-FULL INHIBITION ON CSECT 'REP'S.      @ZA06024
IGNIDRFL OI    PARMBITS,QIGNIDRF       .SET BIT FOR OPTION.    @ZA06024
ALTDDNAM TM    0(R1),X'80'             .ELSE TEST FOR ALT DD.  @ZA06024
         BO    OPENUP                  .B IF NONE.             @ZA06024
* ALTERNATE DDNAMES SPECIFIED (SECND PARAM LIST OF DYNAM INV). @ZA06024
         L     R1,4(R1)          IF 2ND WORD OF PARM LIST IS     Y02160
         LTR   R1,R1               0, THEN NO DDNAMES            Y02160
         BZ    OPENUP                                            Y02160
         LH    WK1,0(R1)         IF LENGTH IS LT 25, THEN        Y02160
         CH    WK1,TWENTY4         NO SPZAP DDNAMES              Y02160
         BNH   OPENUP                                            Y02160
         CLC   24+2(8,R1),ZERO   IF DDNAME IS HEX 00, THEN       Y02160
         BE    SYSINTST          DEFAULT SYSLIB DD TO SYSLIB     Y02160
         MVC   LIB2+DDNAM(8),24+2(R1) ELSE, MOVE DDNAME INTO     Y02160
         MVC   LIB+DDNAM(8),24+2(R1)  LIB2 AND LIB DCBS          Y02160
         MVC   SYSLIB(8),24+2(R1)      .ALSO FOR VTOC UPDATE.  @ZA04271
SYSINTST CH    WK1,THIRTY2       IF LENGTH IS LT 33, THEN        Y02160
         BNH   OPENUP              NO MORE SPZAP DDNAMES         Y02160
         CLC   32+2(8,R1),ZERO   IF DDNAME IS HEX 00, THEN       Y02160
         BE    SYSPNTST          DEFAULT SYSIN TO SYSIN          Y02160
         MVC   INPUT+DDNAM(8),32+2(R1) ELSE, MOVE DDN TO INPUT   Y02160
SYSPNTST CH    WK1,FOURTY        IF LENGTH IS LT 41, THEN        Y02160
         BNH   OPENUP              NO MORE SPZAP DDNAMES         Y02160
         CLC   40+2(8,R1),ZERO   IF DDNAME IS HEX 00, THEN       Y02160
         BE    OPENUP              DEFAULT SYSPRINT TO SYSPRINT  Y02160
         MVC   OUTPUT+DDNAM(8),40+2(R1) ELSE, MOVE DDN TO OUTPUT Y02160
         DROP  BASREG                                          @ZA06024
OPENUP   BALR  BASREG,0             ***.(NEW ADDRESS BASE).*** @ZA06024
         USING *,BASREG                                        @ZA06024
ZAPBASE2 DS    0H                                              @ZA09678
         OPEN (INPUT,(INPUT),OUTPUT,(OUTPUT))                  @ZA06024
         RDJFCB LIB2
         LA    RG4,JFCBAREA             ADDRESS OF JFCB
         CLC   0(12,RG4),F4DSCB         JFCB FOR FORMAT 4 REQUEST
         BC    7,GETDSCB           NO, GO CHECK FOR TRKOVFL
         MVC   0(44,RG4),DSCBDS         MOVE IN 12-9-4 PUNCHES
         MVC    102(2,RG4),F4BLKSZ      MOVE IN NON-0 BLKSIZE    XM5390
         OPEN  (LIB2,(INPUT)),TYPE=J
         BC    15,CKOPEN                CHECK RESULTS OF OPEN
         SPACE 1
***********************************************************************
* THIS IS AN OPEN EXIT ROUTINE TO INVALIDATE THE OPTCD FROM THE DSCB
***********************************************************************
OPTCDCK  MVI   LIB2+OPTCD,X'00'    SUPPRESS OPTCD                A49131
         BR    R14                 RETURN TO OPEN                A49131
         SPACE 1
*******************
*
*  THE FOLLOWING CODE CHECKS IF THE SYSLIB DATA SET HAS TRACK OVERFLOW
*  RECORDS. IF THERE ARE OVERFLOW RECORDS, THE RECFM FIELD IN THE DCB
*  IS SET TO INDICATE TRKIVFL BEFORE OPENING THE DATA SET. TRACK OVER-
*  FLOW DATA SETS ARE SUPPORTED ONLY FOR DUMP OPERATIONS (I.E. ABSDUMP,
*  AND DUMP STATEMENTS).
*
*******************
GETDSCB  MVC   JFCBAREA+44(6),JFCBAREA+118   MOVE VOL SER
         ST    RG4,OBLIST+4        PUT ADDRESS OF DSNAME IN PARMLST
         LA    RG4,JFCBAREA+44     GET ADDRESS OF VOL SER
         ST    RG4,OBLIST+8        PUT ADDRESS OF VOL SER IN PARMLST
         LA    RG4,JFCBAREA+52     GET ADDRESS OF WRKAREA
         ST    RG4,OBLIST+12       PUT ADDRESS IN PARMLST
         OBTAIN OBLIST             GET THE FMT1 DSCB
         TM    84-44(RG4),X'20'    DOES RECFM INDICATE TRKOVFL
         BNO   OPEN1               NO, OPEN SYSLIB
         OI    LIB2+36,X'20'       SET TRKOVFL BIT IN DCBRECFM
*******************
         SPACE 1
OPEN1    OPEN  (LIB2,(INPUT))
CKOPEN   LH    RG1,LIB2+BLKSZE          GET BLKSIZE FROM DCB
         LTR   RG1,RG1                 .TEST FOR ZERO.         @ZA02777
         BNZ   CKOPEN2                 .B IF BLKSIZE IN DCB.   @ZA02777
         DEVTYPE SYSLIB,DEVBUF,DEVTAB                          @ZA02777
         LH    RG1,TRKSIZE             .ELSE                   @ZA02777
         STH   RG1,LIB2+BLKSZE         . SET TO TRACK SIZE.    @ZA02777
CKOPEN2  LA    RG2,X'0C00'             .MIN DASD BLOCKSIZE.    @ZA02777
         CR    RG2,RG1                  IS SPEC LARGER
         BC    4,NRMREC                 SPEC LARGER-SKIP
         LR    RG1,RG2                  USE LARGEST
NRMREC   AR    RG1,RG2
         N     RG1,CLER                 REG. POSITIVE
         LR    0,RG1                    INPUT REGISTER FOR GETMAIN
         SR    RG1,RG1                  CLEAR REGISTER           A48718
         IC    RG1,LIB2+KEYLEN          GET KEYLENGTH            A48718
         AR    RG0,RG1                  INCREASE GETMAIN STORAGE A48718
         ST    RG0,SIZE                .STORE BUFFER SIZE.     @ZM40094
         LA    R1,8                    .EXT FOR UNPK BEY BUFF  @ZM40094
         AR    R0,R1                   . IN CASE BUFF FILLED.  @ZM40094
         GETMAIN     R,LV=(0)
         L     R15,AIORTNS             SET ADDRESS OF IORTN      S21995
         ST    1,RDAREA                 SAVE START OF READ IN AREA
         TM    OUTPUT+OPENBIT,OPENED    OUTPUT DCB
         LA    R1,AWTO                  MSG PRT. ON CONSOLE      S21995
         BCR   8,R15                                             S21995
         BAL   LNKRG1,WRITE             PRINT OUT SUPERZAP MESSAGE
         MVI   CDBUF-1,X'40'            SET FOR NORMAL SKIP
         TM    PARMBITS,QPARMERR        .TEST PARM-ERR FLAG.   @ZA06024
         BZ    NOPARMER                 .B IF NO PARM ERR.     @ZA06024
         MVC   RETCODE(1),RETCOD12      .SET RETURN CODE.      @ZA06024
         LA    RG5,MSGEPARM             .SELECT ERROR MSG.     @ZA06024
         LA    R1,ACLOSE4               .SELECT EXIT ADDR.     @ZA06024
         BR    R15                      .GO TO 'IOR' CSECT.    @ZA06024
* SYSPRINT OPENED AND NO PARAMETER ERROR.                      @ZA06024
NOPARMER LA    RG5,INERR                .ADDR NO-SYSIN MSG.    @ZA06024
         TM    INPUT+OPENBIT,OPENED     INPUT DCB
         LA    R1,ACLOSE2               NOT OPENED-EXIT          S21995
         BCR   8,R15                                             S21995
         TM    LIB2+OPENBIT,OPENED        LIB 2 DCB
         LA    RG5,MSGNOLIB            .NO-SYSLIB MESSAGE.     @ZA06023
         LA    R1,ACLOSE2               BC IF NOT OPENED         S21995
         BCR   8,R15                                             S21995
         LA    LNKRG3,RDCARD1           SET RETURN ADDRESS
RDCARD   NI    CTLBTE,X'FF'-IGNOP       RESET IGNORE OP
RDCARD1  MVI   CONSW,X'00'              CLEAR CONSOLE SWITCH
         MVI   DMPSW,X'00'             .RESET DUMP INDICATOR.  @ZA26077
         LA    R1,ARDCARD2           GET CARD                    S21995
         BALR  R14,R15                                           S21995
         L     BASREG3,ACCISCAN        .ADDR INIT-SCAN RTNE.   @ZA17658
         BALR  LNKRG1,BASREG3          .TEST FOR IMMED PRINT.  @ZA17658
*        (RETURN WITH KEYWORD LOCATED BY 'SCANKEY').           @ZA00409
         CLC   0(7,RG1),CONSOLE         IS CONSOLE TO BE USED
         BC    8,CONRTN                 YES-GO WTO
KEY01    CLI   0(RG1),AST               COMMENT CARD
         BCR   8,LNKRG3                 YES-GET NEXT CARD
         CLC   0(8,RG1),CHECKSUM                               @ZA17660
         BE    CHSUMRTN                .B IF 'CHECKSUM' STMT.  @ZA17660
         L     BASREG3,RDAREA           SET READ AREA BASE
         XC    STARTINC(4),STARTINC     CLEAR IMBEDDED OFFSET
         TM    CTLBTE,NAMEERR           CAN VERIFY BE PERFORMED
         BC    1,KEY03                  NO-SKIP
         CLC   0(6,RG1),SSI              SSI CARD
         BC    8,SSIRTN
         TM    CTLBTE,IGNOP             CHECK FOR PREV.VERIFY ERROR
         BC    1,KEY02                  FLAG SET-SKIP REP CHECK
         CLC   0(3,RG1),REP
         BC    8,REPRTN                 REPCARD
KEY02    CLC   0(3,RG1),VERIFY
         BC    8,VERYRTN                VERIFY OPTION
         CLC   0(7,RG1),IDRDATAC        IDR CARD                 S21016
         BE    IDRRTN                                            S21016
         LA    R1,AINSMDFY              GET INDEX                X01979
         BALR  R14,R15                  INSPECT FOR PROG MODIFY  X01979
         BAL   LNKRG1,SCANKEY           RESET POINTERS
KEY03    CLC   0(5,RG1),CCHHR           ABSOLUTE UPDATE
         BC    8,CCHHRTN                ABSOLUTE UPDATE
         CLC   0(4,RG1),NAME
         BC    8,NAMERTN                CSECT UPDATE
         CLC   0(4,RG1),BASEO
         BC    8,BASERTN                BASE OFFSET
         CLC   0(4,RG1),DUMP            DUMP DISK
         BC    8,DUMPRTN                DUMP DISK
         CLC   0(7,RG1),ABSDUMP         ABSOLUTE DUMP CARD
         BC    8,ABDMPRTN               YES-DUMP RECORDS
         CLC   0(3,RG1),SLAST           END OF INPUT
         BC    7,IGNORE                 NO-IGNORE
         LA    R1,AINSMDFY              GET INDEX                X01979
         BALR  R14,R15                  INSPECT FOR PROG MODIFY  X01979
         LA    R1,AEOD                 YES-END                   S21995
         BR    R15                                               S21995
         SPACE 1
IGNORE   L     RG5,AMSG105I            .SELECT MESSAGE.        @ZA17658
IGNORE2  BAL   LNKRG1,WRITE0            PRINT OUT MESSAGE
         MVC   RETCODE(1),RETCOD08     .INDIC SPZAP-INP ERROR. @ZA06023
         OI    CTLBTE,IGNOP             IGNORE ANY FOLLOWING REPS
         BCR   15,LNKRG3                GET NEXT CARD
         SPACE 1
***********************************************************************
* THIS SUBROUTINE READS AMASPZAP CONTROL STATEMENTS FROM THE CONSOLE
*******************
CONRTN   XC    WTOECB(4),WTOECB         CLEAR ECB
         MVI   DMPSW,X'00'             .RESET DUMP INDICATOR.  @ZA26077
         MVI   CDBUF,C' '               CLEAR INPUT BUFFER
         MVC   CDBUF+1(79),CDBUF
         ST    LNKRG3,LNKSAVE           SAVE LINK REGISTER
         LA    LNKRG3,REGSAVE           ADDR OF REG SAVE AREA
         WTOR  'AMA116A ENTER AMASPZAP CONTROL STATEMENT OR END',CDBUF,X
               80,WTOECB,ROUTCDE=1,DESC=2
         WAIT  ECB=WTOECB
         L     R15,AIORTNS             RESET R15                 S21995
         L     LNKRG3,LNKSAVE           RESTORE LNKRG3
         OC    CDBUF(40),BLANKS    INSURE CAPITAL LETTERS ARE USED
         OC    CDBUF+40(40),BLANKS
         MVI   CONSW,X'FF'              SET CONSOLE SWITCH
         L     BASREG3,ACCISCAN        .ADDR INIT-SCAN RTNE.   @ZA17658
         BALR  LNKRG1,BASREG3          .TEST FOR IMMED PRINT.  @ZA17658
*        (RETURN WITH KEYWORD LOCATED BY 'SCANKEY').           @ZA00409
         CLC   0(3,RG1),END             END OF CONSOLE INPUT
         LA    LNKRG3,RDCARD1
         BC    8,RDCARD1                YES-GET NEXT CARD FROM RDR
         LA    LNKRG3,CONRTN            SET RETURN ADDRESS
         BC    15,KEY01                 GO CHECK KEYWORD
         SPACE 2
WTORTN   LA    WK7,PREFIX          GET PARMLIST FOR WTO
         MVC   CDBUF+40(4),DESCR   MOVE RTE CODE & DESCR INTO WTO BUF
         MVC   PREFIX(2),ERRMGLNG  MOVE IN LENGTH OF WTO MSG
         ST    LNKRG3,LNKSAVE           SAVE LINK REGISTER
         LA    LNKRG3,REGSAVE           ADDR OF REG SAVE AREA
         WTO   MF=(E,(1))
         L     R15,AIORTNS             RESET R15                 S21995
         L     LNKRG3,LNKSAVE           RESTORE LNKRG3
         BR    LNKRG1                  .RETURN TO CALLER.      @ZA17658
         SPACE 4
         SPACE 2
***********************************************************************
* THIS SUBROUTINE SCANS CONTROL CARDS WHICH ARE FREE FORMAT
* SCAN UNTIL FIRST CHAR IS FOUND
*******************
SCANKEY  LA    RG3,CDBUF                INIT START OF SCAN
         LA    RG2,72                    MAX SCAN LENGTH       @YA02260
SCANKEY1 LR    RG1,RG3                  ENTRY FOR CONTIN.SCAN
SCANKEY2 CLI   0(RG1),BLANK             BLANK
* FIRST CHAR ON CARD NOT FOUND
         BC    7,SCANKEY3               NO-SCAN TO NXT BLANK
         LA    RG1,1(RG1)               INC CHAR POS.
         BCT   RG2,SCANKEY2             DECR.ALLOWABLE
         LA    RG1,BLANKS               SET UP BLANK INPUT DATA
         LA    RG4,7                    CHAR-1
         LA    RG3,BLANKS+8
         BCR   15,LNKRG1                RETURN
         SPACE 1
* SCAN   UNTIL FIRST BLANK IS FOUND
SCANKEY3 LR    RG3,RG1
SCANKEY4 LA    RG3,1(RG3)               INC TO NEXT CHAR
         BCTR  RG2,0                    DECR. MAX
         CLI   0(RG3),BLANK             BLANK
         BC    7,SCANKEY4               NO-CONTINUE
* FOUND FIRST BLANK AFTER PARAMETER
         LR    RG4,RG3                  PASS TO WK REG
         SR    RG4,RG1                  GET NO OF CHAR.
         BCTR  RG4,0                    DEC COUNT
         CH    RG4,SEVEN
         BCR   8+4,LNKRG1               OKAY-RETURN
         LA    RG4,7                    SET AS MAX
         OI    SCANSW,OVER8             INDICATE OVER 8 CHAR.    A48705
         BCR   15,LNKRG1                RETURN
         SPACE 1
*  SCAN FOR MEMBER NAME AND CSECT NAME
         SPACE 1
SCANKEY5 MVC   MEMNAME(8),BLANKS        CLEAR KEY WORDS
         MVC   CSECT(8),BLANKS
         NI    SCANSW,X'FF'-OVER8       RESET OVER 8 CHAR SW     A48705
         BAL   LNKRG1,SCANKEY1          TO GET MEMBER NAME
         EX    RG4,SAVE2                SAVE MEMBER NAME
         BAL   LNKRG1,SCANKEY1          TO GET CSECT NAME
         EX    RG4,SAVE3                SAVE CSECT NAME
         TM    SCANSW,OVER8             WAS NAME TOO BIG         A48705
         BCR   8,LNKRG2                 RETURN IF BOTH NAMES OK  A48705
         B     NAME03C                  GO SET UP TO PRINT MSG   A48705
         SPACE 1
SAVE2    MVC   MEMNAME(1),0(RG1)
SAVE3    MVC   CSECT(1),0(RG1)
         SPACE 2
***********************************************************************
* THIS SUBROUTINE DECODE NUMERIC FIELDS ON CONTROL CARDS
*******************
SCAN2    LA    RG1,1(RG1)               ADVANCE PAST BLANK
         C     RG1,CDBUFEND             ARE WE AT END OF BUFFER  A36172
         BNL   IGNORE                   YES - INVALID CARD       A36172
SCAN     CLI   0(RG1),BLANK             IS THIS CHAR BLANK
         BC    8,SCAN2                  YES- ADVANCE
         MVI   TBUF,C'1'               INIT TBUF TO X'F1'        A43687
         MVC   TBUF+1(71),TBUF   FOR TR TABLES ON HEX TEST       A43687
         LA    RG4,TBUF                 INIT STORAGE ADDRESS
SCAN4    LR    RG2,RG1                  START OF DATA FIELD
SCAN1    CLI   0(RG1),COMMA             DELIMITER
         BC    8,SCAN3                  YES-SAVE TEMP
         CLI   0(RG1),BLANK             END OF DATA
         BC    8,SCAN3                  YES-SAVE AND EXIT
         LA    RG1,1(RG1)               NO-INC PTR
         BC    15,SCAN1                 CONTINUE
         SPACE 1
SCAN3    LR    RG5,RG1                  TURN TO WK REG
         SR    RG5,RG2                  GET NO OF CHAR SCANNED
         BZ    SCAN3A                   SKIP MOVE IF ZERO         M2816
         BCTR  RG5,0                    DECR. BY 1
         EX    RG5,SAVE                 STORE IN TEMP BUF
SCAN3A   CLI   0(RG1),BLANK             EXIT ON BLANK             M2816
         BC    8,SCAN5                  YES-RIGHT JUSTIFY
         CLI   1(RG1),BLANK             BLANK FLOOWING COMMA
         BC    8,SCAN5                  YES, DISCARD
         LA    RG1,1(RG1)               INC CDBUF PTR
         LTR   RG5,RG5                  IF MULTIPLE COMMAS     @AZ30821
         BZ    IGNORE                   INVALID CARD           @AZ30821
         LA    RG4,1(RG5,RG4)           ADVANCE TEMP BUFFER
         BC    15,SCAN4                 CONTINUE
         SPACE 1
SCAN5    AR    RG4,RG5                  LAST POSITION TEMP-1
         S     RG4,CON1                 GET NO OF CHAR
         LR    RG2,RG4                  COPY REGISTER
         SRL   RG2,1                    DIVIDE BY 2
         SLL   RG2,1                    MULTIPLY BY 2
         CR    RG4,RG2                  COMPARE WITH ORIGNIAL
         BC    7,DIGITERR               PRINT MSG
         SRL   RG4,1                    DIVIDE BY 2
         MVC   DBUF(72),TBUF           SAVE ORIGINAL HEX INPUT   A43687
         NC    TBUF(72),CON2           NORMALIZE FOR TRANSLATE   A43687
         TR    TBUF(72),TRANTBL        TRANSLATE TO BINARY       A43687
         TR    TBUF(72),TRANTBL2-X'F0'  RETRANSLATE TO HEX       A43687
         CLC   DBUF(72),TBUF           SAME AS ORIGINAL          A43687
         BNE   IGNORE                  NO-IGNORE THIS CARD       A43687
         XC    DBUF(72),DBUF           YES-CLEAR BUFFER          A43687
         NC    TBUF(72),CON2            NORMALIZE FOR TRANSLATE
         TR    TBUF(72),TRANTBL         TRANSLATE TO BINARY
         LA    RG2,TBUF                 POINTER TO TEMP START
         LA    RG5,DBUFEND              DATA BUFFER END
         SR    RG5,RG4                  START OF SAVE DATA
         LR    RG6,RG5                  SAVE START ADDR OF DATA
SCAN6    PACK  0(7,RG5),0(13,RG2)       CONVERT TO HEX
         LA    RG5,6(RG5)               INC DATA STG
         LA    RG2,12(RG2)              INC TEMP STG
         CL    RG5,CON3                 END OF DATA BLOCK
         BC    4,SCAN6                  CONTINUE IF NOT AT END
* ADD TO CHECKSUM.                                             @ZA17660
         L     RG2,CHSUMACC            .PREV CHECKSUM VALUE.   @ZA17660
         LR    RG5,RG6                 .ADDR FIRST DIGIT-PAIR. @ZA17660
         LH    R1,CHSUMSLL             .PREV SHIFT AMOUNT.     @ZA17660
SCAN7    SH    R1,EIGHT                .DECR BY ONE BYTE.      @ZA17660
         BNM   SCAN8                   .B IF NOT NEGATIVE.     @ZA17660
         LH    R1,TWENTY4              .ELSE SET HIGH BYTE.    @ZA17660
SCAN8    SR    R15,R15                 .CLEAR DIGIT-PAIR REG.  @ZA17660
         IC    R15,0(RG5)              .LOAD DIGIT-PAIR.       @ZA17660
         SLL   R15,0(R1)               .SHIFT TO PROPER BYTE.  @ZA17660
         AR    RG2,R15                 .ADD INTO CHECKSUM.     @ZA17660
         LA    RG5,1(RG5)              .ADDR NEXT DIGIT-PAIR.  @ZA17660
         CL    RG5,CON3                . IF ANY.               @ZA17660
         BL    SCAN7                   .B IF MORE.             @ZA17660
         ST    RG2,CHSUMACC            .ELSE STORE CHECKSUM,   @ZA17660
         STH   R1,CHSUMSLL             . SAVE LAST SHIFT AMT.  @ZA17660
         L     R15,AIORTNS             .RESTORE EP FOR 'IOR'.  @ZA17660
         BCR   15,LNKRG1
         SPACE 1
DIGITERR BAL   LNKRG1,SCANKEY           GET DEY WORD
         CLC   0(3,RG1),REP             REP
         BC    8,DIGERR2                YES-DONT SET FLUSH SWITCH
         OI    CTLBTE,IGNOP             SET SWITCH TO IGNORE ANY REPS
DIGERR2  LA    RG5,DGERROR              YES-IGNORE IT
         BAL   LNKRG1,WRITE0            PRINT OUT MESSAGE
         MVC   RETCODE(1),RETCOD08     .INDIC SPZAP-INP ERROR. @ZA06023
         BCR   15,LNKRG3                GET NEXT CARD
         SPACE 1
SAVE     MVC   0(1,RG4),0(RG2)          SAVE DATA IN TBUF
         SPACE 2
***********************************************************************
* SUBROUTINE FOR NAMERTN AND DUMPRTN
* POINT AT MEMBER OF DATA SET
*******************
NAME01A  MVC   LIST+4(8),MEMNAME        SET UP MEMBER NAME
         NI    CTLBTE2,X'FF'-MULREC     RESET INDICATOR FOR MULTIPLE
         ST    LNKRG3,LNKSAVE           SAVE LINK REGISTER
         LA    LNKRG3,REGSAVE           ADDR OF REG SAVE AREA
         BLDL  LIB2,LIST                READ DIRECTORY
         L     LNKRG3,LNKSAVE           RESTORE LNKRG3
         LTR   15,15                    TEST FOR ERROR RETURN CODE
         L     R15,AIORTNS              RESET R15                S21995
         BC    7,NAME03C                YES - EXIT
         NI    LIST+17,X'1F'            0 OUT HIGH ORDER BITS     M5099
         CLI   LIST+17,X'0B'            CHK LNGTH FOR 11 OR MORE  M5099
         BL    NAME03C                 < MEANS NOT LKED OUTPUT    M5099
         SR    RG4,RG4                  ESD ID COUNTER
         MVC   BASE(4),CLER            INIT BASE HIGH FOR        A42310
         MVI   BASE+1,X'FF'             SEARCH FIRST CSECT       A42310
         ST    LNKRG3,LNKSAVE           SAVE LINK REGISTER
         LA    LNKRG3,REGSAVE           ADDR OF REG SAVE AREA
         FIND  LIB2,MEMNAME,D
         L     R15,AIORTNS              RESET R15                S21995
         L     LNKRG3,LNKSAVE           RESTORE LNKRG3
NAME02   LA    R1,ARDDSK2               READ CONTROL RECORD      S21995
         BALR  R14,R15                                           S21995
         CLI   RDAREA1,X'40'            SYM. RECORD
         BC    8,NAME02                 YES-SKIP
         CLI   RDAREA1,X'20'            CESD RECORD
         BE    NAME02A                  YES-GO SEARCH IT         A42310
         TM    LIST+4+ATTR+1,MULTXT    NO ESD BUT MULTI TEXT REC YM5148
         BC    1,NAME03E               SET UP PROPER INDICATORS  YM5148
         CLC   CSECT(8),BLANKS         NO-WANT LOWEST CSECT      A42310
         BCR   7,LNKRG2                NO-RETURN NOT FOUND       A42310
         MVC   CSECT(8),TEMP           YES-MOVE ITS NAME         A42310
         OI    CTLBTE3,LMREAD          SET LOAD MODULE READ      S21016
         B     8(LNKRG2)               RETURN FOUND              A42310
NAME02A  LA    RG3,RDAREA1+8            YES-STARTOFESD
         LH    RG1,RDAREA1+6            BYTES OF ESD DATA
         LA    RG1,0(RG1,RG3)           STOP ADDRESS
         NI    LIST+4+ATTR+1,X'FF'-MULTXT SET NON EDIT BIT OFF   YM5148
NAME03   LA    RG4,1(RG4)               INCR. ESD ID COUNTER
         TM    8(RG3),X'0F'             SECTION DEFN.
         BC    8,NAME03A                YES-EXIT
         NI    8(RG3),X'17'             TURN OFF HI ORDER BITS   A41005
         CLI   8(RG3),X'04'             TEST FOR PRIVATE CODE    A41005
         BC    7,NAME03B                NO-GET NXT ESD           A41005
NAME03A  CLC   CSECT(8),BLANKS         WAS A CSECT SPECIFIED     A42310
         BE    NAME03AA                N0-LOOP FOR LOWEST CSECT  A42310
         MVC   BASE+1(3),9(RG3)        SET CSECTS DISPLACEMENT
         ST    RG4,CSECTID             SAVE ESDID
         CLC   CSECT(8),0(RG3)         YES-IS THIS IT            A42310
         BNE   4(LNKRG2)               N0-RETURN VECTOR2         A42310
         B     8(LNKRG2)               RETURN FOUND
NAME03AA CLC   ZERO(3),9(RG3)          IS THIS FIRST CSECT       A42310
         BNE   NAME03AC                NO-GO TEST FOR SAVING     A42310
         MVC   CSECT(8),0(RG3)         YES-MOVE IN ITS NAME      A42310
NAME03AB MVC   BASE+1(3),9(RG3)        SET CSECTS DISPLACEMENT   A42310
         ST    RG4,CSECTID             SAVE ESDID                A42310
         B     8(LNKRG2)               RETURN FOUND              A42310
NAME03AC CLC   BASE+1(3),9(RG3)        IS THIS LOWEST CSECT YET  A42310
         BL    4(LNKRG2)               NO-RETURN VECTOR2         A42310
         MVC   BASE+1(3),9(RG3)        YES-SAVE ITS DISPLACEMNT  A42310
         ST    RG4,CSECTID             SAVE ESDID                A42310
         MVC   TEMP(8),0(RG3)          SAVE CSECT NAME           A42310
         B     4(LNKRG2)               RETURN VECTOR2            A42310
         SPACE 1
* CONTINUE RETURNS HERE
NAME03B  LA    RG3,16(RG3)              NO-TO NXT ESD
         CR    RG3,RG1                  ANY LEFT IN RECORD
         BC    8+2,NAME02               NO-READ NEXT RECORD
         BC    15,NAME03                CONTINUE
         SPACE 1
NAME03C  OI    CTLBTE,NAMEERR           SET ERROR FLAG
         L     RG5,AMSG102I            .SELECT MESSAGE.        @ZA17658
         BC    15,IGNORE2               TO PRINT MSG
         SPACE 1
NAME03E  OI    CTLBTE3,NENOIDR        .INIDCATE NON-EDITABLITY @ZA19029
         CLC   LIST+4+MODTTR(3),LIST+4+TXTTTR                  @ZA19029
         BE    NAME03D                .B IF NO CESD (ERGO NE). @ZA19029
         OI    CTLBTE2,MULREC         .INIDC MULT-TXT & NO RLD @ZA19029
NAME03D  MVC   BASE+1(3),LIST+4+ORGIN   SET UP BASE ADDR
         MVC   START+1(3),LIST+4+ORGIN
         MVC   STCSECT(4),LIST+4+TXTTTR SAVE TEXT ADDR
         MVC   LENGTH+2(2),LIST+4+LNGTH SET TXT LENGTH
         MVC   CSECT(8),BLANKS          CLEAR FIELD
         OI    CTLBTE,ONEREC            SET INDICATOR
         B     8(LNKRG2)               RETURN FOUND CSECT
         SPACE 2
***********************************************************************
* THESE SUBROUTINES ARE USED BY THE DUMP PROGRAMS.
*******************
RDDSK3   LA    R1,ARDDSK2               READ TEXT                S21995
         BALR  R14,R15                                           S21995
RDDSK4   TM    CTLBTE,ONEREC            SPECIAL RECORD
         BC    1,4(LNKRG2)
RDDSK4B  LA    R1,ARDDSK2               READ CONTROL RECORD      S21995
         BALR  R14,R15                                           S21995
RDDSK4BB TM    RDAREA1,X'01'           .CONTROL-RECD BIT.      @ZA09673
         BZ    RDDSK4BC                .B IF ZERO.             @ZA09673
         TM    RDAREA1,X'F0'           .HIGH 4 BITS OF RECDID. @ZA09673
         BZ    RDDSK4BZ                .B IF ALL ZERO (VALID). @ZA09673
         B     RDDSK4BE                .ELSE INVALID RECORD.   @ZA09673
* NOT A CONTROL RECORD. TEST FOR INVALID ID BYTE.              @ZA09673
RDDSK4BC TM    RDAREA1,X'0F'           .LOW 4 BITS OF RECDID.  @ZA09673
         BZ    RDDSK4BD                .B IF ALL ZERO.         @ZA09673
         TM    RDAREA1,X'F0'           .HIGH 4 BITS OF RECDID. @ZA09673
         BZ    RDDSK7                  .B IF ALL ZERO (VALID). @ZA09673
         B     RDDSK4BE                .ELSE INVALID RECORD.   @ZA09673
RDDSK4BD TM    RDAREA1,X'F0'           .(LOW 4 BITS ZERO).     @ZA09673
         BNZ   RDDSK7                  .B IF HIGH 4 NOT ALL 0. @ZA09673
* INVALID RECORD TYPE. ISSUE MESSAGE AND DUMP RECORD.          @ZA09673
RDDSK4BE MVC   RETCODE(1),RETCOD16     .SET ERROR CODE.        @ZA09673
         L     RG5,AMSG131I            .SELECT MESSAGE.        @ZA09673
         MVC   8(8,RG5),MEMNAME        .INSERT MEMBER NAME.    @ZA09673
         L     R15,AIORTNS             .INVOKE                 @ZA09673
         BAL   LNKRG1,WRITE0           . MESSAGE WRITER.       @ZA09673
* SET UP 'ABSDUMP' COMMAND IN CARD BUFFER FOR DUMPING RECORD.  @ZA09673
         BAL   LNKRG1,CCHNOTE          .GET CCHHR.             @ZA09673
         MVC   CDBUF+0(7),ABSDUMP      .SET KEYWORD            @ZA09673
         MVI   CDBUF+7,BLANK           . FOLL BY BLANK.        @ZA09673
         UNPK  CDBUF+8(11),MBBCCHHR+3(6)  .EDIT AND INSERT     @ZA09673
         TR    CDBUF+8(10),TRANTBL2-X'F0' . START ADDRESS.     @ZA09673
         MVI   CDBUF+18,BLANK          .SEPARATING BLANK.      @ZA09673
         MVC   CDBUF+19(11),CDBUF+8    .SET ENDADDR=STARTADDR. @ZA09673
         BAL   LNKRG1,SCANKEY          .SET REGISTERS AND      @ZA09673
         B     ABDMPRTN                . PROCESS 'ABSDUMP'.    @ZA09673
* CONTROL RECORD FOUND.                                        @ZA09673
RDDSK4BZ DS    0H                                              @ZA09673
         XC    STARTINC(4),STARTINC     ZERO INC AMOUNT
         LH    RG2,RDAREA1+6            GET ID OFFSET
         LA    RG2,RDAREA1+16(RG2)      POINT AT ID FIELD
         LH    RG3,RDAREA1+4            GET LENGTH
         LA    RG3,0(RG3,RG2)           FORM S TO P ADDR
         ST    RG3,TBUF                 SAVE FOR CONPANE
RDDSK4C  LH    RG3,0(RG2)               ESDID
         CL    RG3,CSECTID              ARE THEY EQUAL
         BC    8,RDDSK5                 YES-SET UP SAVE
         TM    CTLBTE2,MULREC           BUT IS IT A MULTIPLE TEXT CSECT
         BC    1,RDDSK5                 YES-ID NOT VALID
         L     RG3,STARTINC             GET INC
         AH    RG3,2(RG2)               ADD LENGTH OF CSECT
         ST    RG3,STARTINC             SAVE NEXT INC
         LA    RG2,4(RG2)               ADVANCE RECORD PTR
         CL    RG2,TBUF                 OUTSIDE RECORD
         BC    4,RDDSK4C                NO-CONTINUE
         TM    RDAREA1,X'0D'            END OF MODULE
         BCR   1,LNKRG2                 YES-VECTOR 1
         BC    15,RDDSK3                CONTINUE
         SPACE 1
RDDSK5   OI    CTLBTE,ENDMOD            SET INDICATOR
         TM    RDAREA1,X'0D'            LAST CONTROL OF MODULE
         BC    1,RDDSK6                 YES-LEAVE ENDMOD SET
         NI    CTLBTE,X'FF'-ENDMOD      RESET INDICATOR
RDDSK6   MVC   LENGTH+2(2),2(RG2)       SAVE CSECT LENGTH
         L     RG3,STARTINC             GET ACC OFFSET
         A     RG3,RDAREA1+8            ADD TO RECORD OFFSET ADDR
         LA    RG3,0(0,RG3)             CLEAR HIGH BYTE
         ST    RG3,START                SET AS CSECT OFFSET
         BC    15,4(LNKRG2)             VECTOR 2-CONTR. RECD FOUND
         SPACE 1
RDDSK7   CLI   RDAREA1,X'0E'            LAST RECORD OF MODULE
         BC    7,RDDSK4                 NO-CONTINUE
         BCR   15,LNKRG2                VECTOR 1 - END RETURN
         SPACE 2
***********************************************************************
* THIS SUBROUTINE OBTAINS THE TEXT TTR AND CONVERTS IT TO CCHHR
*******************
CCHNOTE  ST    LNKRG3,LNKSAVE           SAVE LINK REGISTER
         LA    LNKRG3,REGSAVE           ADDR OF REG SAVE AREA
         NOTE  LIB2
         L     R15,AIORTNS              RESET R15                S21995
         L     LNKRG3,LNKSAVE           RESTORE LNKRG3
         ST    1,STCSECT                SAVE TTR
         LR    0,1                      CONVERT TTR INPUT REG
         LA    14,X'1C'                 TTR CONV RTN OFFSET
CHCONV   STM   8,13,TBUF+32             SAVE REGS THAT GET CLOBBERED
         LA    8,TBUF+32                GET ADDRESSIBILITY
         LA    2,MBBCCHHR               CONVERT STG ADDR.
         L     1,LIB2+44                DEB ADDRESS
         L     15,16                    CVT POINTER
         L     15,0(14,15)              CONVERT RTN ADDR
         BALR  14,15                    TO CONVERT TO CCHHR
         LM    8,13,0(8)                RESTORE REGISTERS
         L     R15,AIORTNS              RESET R15                S21995
         BCR   15,LNKRG1                RETURN
         SPACE 1
CCHHSUB  LR    RG1,RG3                  SET DATA POINTER
         NI    CTLBTE,X'FF'-NAMEOP-ONEREC  RESET INDICATORS
         XC    BASE2(4),BASE2           RESET BASE
CCHSUB2  BAL   LNKRG1,SCAN              DEBLOCK DATA
         MVC   MBBCCHHR(8),DBUFEND-8    SAVE
         CLI   MBBCCHHR+7,X'00'         RECORD ZERO
         BC    7,CONTIN                 NO-DON'T UPDATE
         OI    MBBCCHHR+7,MAK1          CHANGE RECORD TO ONE
CONTIN   L     RG2,LIB2+44              DEB EXTENTS
         SR    RG4,RG4                  CLEAR WK REGS
         SR    RG5,RG5
         IC    RG4,NEXTS(RG2)           GET NO OF EXTENTS
         BCTR  RG4,0                    COMPUTE M
         LA    RG2,DEBEXT(RG2)          POINT AT FIRST EXTENT
CCHSUB3  CLC   MBBCCHHR+3(4),6(RG2)     TEST FOR LOW
         BC    4,CCHSUB4                YES-TEST NEXT EXTENT
         CLC   MBBCCHHR+3(4),10(RG2)    TEST FOR HIGH
         BC    2,CCHSUB4           YES - CHK NEXT EXTENT
         MVC   MBBCCHHR+1(2),LIB2+6 SET BB EQU TO FDAD BB
         BCR   15,LNKRG2           OKAY - EXIT
*   SWITCH TO A DIFFERENT EXTENT
CCHSUB4  CR    RG4,RG5                  TEST FOR NO MORE EXTENTS
         BC    8,NAME03C                YES-ERROR
         LA    RG5,1(RG5)               NO-INCREMENT TO NXT.
         STC   RG5,MBBCCHHR             SAVE EXTENT M
         LA    RG2,16(RG2)              INCR.BY SIZE
         BC    15,CCHSUB3               CONTINUE
         SPACE 2
***********************************************************************
* THIS SUBROUTINE SETS UP MEMBER AND CSECT NAMES.
*******************
NAMERTN  CLC   RETCODE(1),LASTRET       WHICH CODE IS HIGHEST
         BL    CLEAR1                   IF LAST ONE--DON'T CHANGE
         MVC   LASTRET(1),RETCODE       SAVE HIGHEST STEP RET CODE
CLEAR1   MVC   RETCODE(1),RETCOD00     .RESET RETURN CODE.     @ZA06023
         BAL   LNKRG2,SCANKEY5          TO SET UP NAME AND SCECT
         XC    BASE2(4),BASE2           ZERO OUT OFFSET
         MVC   IDRDATA(8),IDRDFLT      PRIME IDR DATA            S21016
         NI    CTLBTE3,X'FF'-NAMEIDR-IDRRD-LMREAD-NENOIDR        S21016
         NI    CTLBTE,X'FF'-ONEREC-IGNOP-NAMEERR
         XC    IDRNRECS(4),IDRNRECS     .INIT # IDR-S.         @ZA00409
         XC    IDRNENTS(4),IDRNENTS     .INIT # IDR ENTRIES.   @ZA00409
         XC    IDRMENTS(4),IDRMENTS     .INIT MAX ENTRIES.     @ZA00409
         OI    CTLBTE,NAMEOP            SET NAME OPTION
         LA    R15,NOCSECT    IN CASE OF BAD INPUT, WE HAVE TO  YA01766
         STM   0,15,DMPSAVE   SAVE THE REGS AND POINT REG15 TO  YA01766
         L     R15,AIORTNS    LABEL 'NOCSECT'                   YA01766
         BAL   LNKRG2,NAME01A           TO EXAMIN CESD'S
* RETURN VECTOR1-ERROR
         BC    15,NOCSECT               ERROR MESSAGE
         SPACE 1
* RETURN VECTOR 2-NOT FOUND
         BC    15,NAME03B               CONTINUE
         SPACE 1
* RETURN VECTOR 3-FOUND CSECT
         TM    CTLBTE3,LMREAD          WAS RECORD READ           S21016
         BZ    NAME04AA                NO-CHECK NONEDITABLE      S21016
         NI    CTLBTE3,X'FF'-LMREAD    YES RESET SW              S21016
         B     NAME04AB                SKIP READ                 S21016
NAME04AA TM    CTLBTE3,NENOIDR         IS MODULE NE              S21016
         BO    NOIDRL                  YES-NO IDR                S21016
NAME04A  LA    R1,ARDDSK2              READ LOAD MODULE          S21016
         BALR  R14,R15                                           S21016
NAME04AB CLI   RDAREA1,X'80'           IDR RECORD                S21016
         BE    SPZAPIDR                YES-CHECK FOR SPZAP       S21016
         CLI   RDAREA1,X'20'           CESD RECORD               S21016
         BE    NAME04A                 YES-SKIP                  S21016
         CLI   RDAREA1,X'40'           SYM RECORD                S21016
         BE    NAME04A                 YES-SKIP                  S21016
         CLI   RDAREA1,X'28'           LAST RECORD OF MODULE?    SM4165
         BCR   8,LNKRG2                YES,RETURN                SM4165
NOIDRL   LA    RG5,NOIDR               PRINT MSG-NO IDR RECORDS  S21016
         NI    CTLBTE3,X'FF'-NENOIDR   RESET SW                  S21016
         MVC   NOIDR+26(8),MEMNAME                               S21016
         BAL   LNKRG1,WRITE0                                     S21016
         NI    CTLBTE3,X'FF'-IDRRD     SET NO IDR RECORDS SW     S21016
         LA    LNKRG2,NAME04+4         SET RETURN REG            S21016
         CLC   LIST+4+MODTTR(3),LIST+4+TXTTTR                  @ZA19029
         BE    4(LNKRG2)              .B IF NO CESD (ERGO NE). @ZA19029
         B     RDDSK4BB                BRANCH INTO RDDSK4        S21016
SPZAPIDR NI    RDAREA1+2,X'0F'         CLEAR HIGH ORDER BITS     S21016
         CLI   RDAREA1+2,X'01'         IS SUBTYPE SPZAP          S21016
         BNE   NAME04A                 NO-READ NEXT RECORD       S21016
         MVC   TEMP(1),RDAREA1+3       SAVE NUMBER OF ENTRIES    S21016
         NI    TEMP,X'3F'              CLEAR HIGH ORDER BITS     S21016
         LA    RG5,1                    .ADD TO                @ZA00409
         A     RG5,IDRNRECS             . # OF                 @ZA00409
         ST    RG5,IDRNRECS             . RECORDS.             @ZA00409
         M     RG4,IDRMENTR             .SET                   @ZA00409
         ST    RG5,IDRMENTS             . MAX ENTS SO FAR.     @ZA00409
         XR    RG5,RG5                                         @ZA00409
         IC    RG5,TEMP                 .ADD  TO               @ZA00409
         A     RG5,IDRNENTS             . # OF                 @ZA00409
         ST    RG5,IDRNENTS             . IDR ENTRIES.         @ZA00409
         CLI   TEMP,19                 IS SPZAP IDR FULL         S21016
         BL    IDRNOTFL                .B IF IDR NOT FULL:     @ZA00409
         TM    RDAREA1+3,X'40'         ANOTHER SPZAP REC?        S21016
         BO    NAME04A                 YES-READ NEXT RECORD      S21016
* SET UP AND ISSUE 'NO IDR SPACE' MESSAGE.                     @ZA00409
         MVC   NOSPACE1(8),MEMNAME     .INSERT NAME.           @ZA00409
         LA    RG5,NOSPACE             SET POINTER               S21016
         BAL   LNKRG1,WRITE0                                     S21016
* TEST FOR OVERRIDE OF INHIBITION ON UPDATES.                  @ZA06024
         TM    PARMBITS,QIGNIDRF                               @ZA06024
         BZ    ERRIDRFL                 .B IF NO OVERRIDE.     @ZA06024
* REP-INHIBITION OVERRIDDEN. SET WARNING AND SELECT MESSAGE.   @ZA06024
         MVC   RETCODE(1),RETCOD04      .SET WARNING RETCODE,  @ZA06024
         LA    RG5,MSGUDACC             . AND SELECT MESSAGE.  @ZA06024
         B     IDRFMSG2                                        @ZA06024
* NO OVERRIDE. SET 'NO GO' AND ISSUE MESSAGE.                  @ZA06024
ERRIDRFL OI    CTLBTE,IGNOP             .SET 'NO GO' SWITCH.   @ZA06024
         MVC   RETCODE(1),RETCOD08      .SET ERROR CODE.       @ZA07967
         LA    RG5,MSGUDINH             . AND SELECT MESSAGE.  @ZA06024
* ISSUE SECOND MESSAGE FOR IDR-SPACE-FOUND-FULL CONDITION.     @ZA06024
IDRFMSG2 BAL   LNKRG1,WRITE0            .MSG TO SYSPRINT.      @ZA06024
         B     NAME04                  CONTINUE PROCESSING       S21016
* CURRENT  IDR HAS SPACE FOR NEW ENTRY.                        @ZA00409
IDRNOTFL TM    CTLBTE3,IDRRD           .IDR BIT.               @ZA00409
         BO    IDRAVAIL                .B IF SPACE ALREADY.    @ZA00409
* FIRST IDR WITH ENPTY ENTRY.                                  @ZA00409
SAVELOC  BAL   LNKRG1,CCHNOTE            GET TTR OF IDR REC    @YA02256
         MVC   IDRTTR(4),STCSECT       SAVE TTR                  S21016
         MVC   IDRFSEEK(8),MBBCCHHR    SAVE MBBCCHHR             S21016
         OI    CTLBTE3,IDRRD           INDICATE IDR RECORD       S21016
IDRAVAIL TM    RDAREA1+3,X'40'                                 @ZA00409
         BO    NAME04A                 .B IF NOT LAST IDR.     @ZA00409
* CSECT FOUND-SIFT THROUGH CONTROL RECORDS
NAME04   BAL   LNKRG2,RDDSK4            READ NXT CTL RECORD
* RETURN VECTOR 1 - NOT VALID
         BC    0,0
* RETURN VECTOR 2 - CONTROL RECORD FOR LSECT FOUND
* RETURN-FOUND CSECT ID
         MVC   IDSAVE(4),STCSECT        SAVE FOR NEXT POINT
         TM    CTLBTE,ONEREC            WAS IT NECESSARY
         BCR   1,LNKRG3                 YES-GET NEXT CARD
         BAL   LNKRG1,CCHNOTE           TO SET NOTE LIST
         MVC   IDSAVE(4),STCSECT        SAVE FOR NEXT POINT
         BCR   15,LNKRG3                GET NEXT CARD
         SPACE 2
***********************************************************************
* THIS SUBROUTINE SETS UP FOR ABSOLUTE UPDATE.
*******************
CCHHRTN  CLC   RETCODE(1),LASTRET       WHICH CODE IS HIGHEST
         BL    CLEAR2                   IF LAST ONE--DON'T CHANGE
         MVC   LASTRET(1),RETCODE       SAVE HIGHEST STEP RET CODE
CLEAR2   MVC   RETCODE(1),RETCOD00     .RESET RETURN CODE.     @ZA06023
         NI    CTLBTE,X'FF'-IGNOP-NAMEERR   RESET CTLBTE
         BAL   LNKRG2,CCHHSUB
         XC    BASE(4),BASE             RESET FIELDS
         XC    BASE2(4),BASE2
         XC    START(4),START           RESET TO ZERO             M2817
         LA    R1,AOPENLIB                                       S21995
         BALR  R14,R15                                           S21995
         LA    R1,ARDDISK               GET RECORD FOR UPDATE    S21995
         BALR  R14,R15                                           S21995
         L     15,SIZE                  CALCULATE RECORD LENGTH
         SH    15,DECB4+X'12'           GET RESIDUAL COUNT
         ST    15,LENGTH                STORE MAX INSPECT AREA
         L     R15,AIORTNS             RESET R15                 S21995
         BCR   15,LNKRG3                    GET NEXT OPERATION
         SPACE 2
***********************************************************************
* THIS SUBROUTINE SETS FOR A VERIFY OPERATION.
*******************
VERYRTN  OI    CTLBTE,VERYOP            SET VERIFY OPTION
         BAL   LNKRG2,SETUP1            DECODE VERIFY CARD
         EX    RG4,VERPTCH
         BCR   8,LNKRG3           GET NEXT CARD.  DON'T RESET IGNORE SW
* VERIFY NOT CONFIRMED
         L     RG5,AMSG104I            .SELECT MESSAGE.        @ZA17658
VERY1    BAL   LNKRG1,WRITE0            SEND ERROR MSG
         MVC   RETCODE(1),RETCOD08     .INDIC SPZAP-INP ERROR. @ZA06023
         TM    CTLBTE,IGNOP             HAS DUMP BEEN DONE?    @YM4508P
         BCR   1,LNKRG3                 YES, GET NEXT CARD     @YM4508P
         OI    CTLBTE,IGNOP             SET INVALID CARD SWITCH
         MVC   MEMNAME(8),BLANKS        CLEAR FIELDS
         MVC   CSECT(8),BLANKS
         LA    RG5,BLANKS               SKIP LINE
         BAL   LNKRG1,WRITE0
         MVC   CDBUF(100),TITLE1        SET-UP TITLE
         LA    WK6,RDAREA1              BUFFER START ADDR
         L     WK1,LENGTH               LENGTH OF SECTION
         LA    R1,ADMP1AB              DUMP FORMATTED            S21995
         L     R15,ADMP                                          S21995
         BALR  R14,R15                                           S21995
         BC    15,DUMP09                EXIT AND SKIP PAGE
         SPACE 1
VERPTCH  CLC   0(1,RG1),0(RG6)          VERIFY PATCHES
         SPACE 2
***********************************************************************
* THIS SUBROUTINE SETS UP FOR A REPLACE OPERATION.
*******************
REPRTN   NI    CTLBTE,X'FF'-VERYOP      REP CARD INDICATE
* IF REP IS FOR NAME CARD, SETUP1 DOES NOT RETURN BUT GOES TO NAME07
         BAL   LNKRG2,SETUP1            DECODE REP CARD
         LR    WK2,RG1                  LOAD ADDRESS OF OLD DATA X01979
         LA    WK5,1(RG4)               LOAD LENGTH OF PATCH     X01979
         BAL   LNKRG2,UNPATCH           FORMAT UNPATCH MESSAGE   X01979
         BAL   LNKRG1,WRITE3           .WRITE 'OLD DATA' MSG.  @ZA17659
         MVC   CDBUF+80(40),BLANKS      CLEAR END OF BUFFER      X01979
         EX    RG4,PATCH                MOVE IN REP DATA
         LA    R1,AWRDISK               UPDATE DISK              S21995
         BALR  R14,R15                                           S21995
         OI    CTLBTE3,MODFYREC        INDICATE CCHHR UPDATE     S21016
         BR    LNKRG3                  . ON TO GET NEXT INPUT. @ZM30902
         SPACE 1
PATCH    MVC   0(1,RG1),0(RG6)          INSERT PATCH DATA
         SPACE 2
***********************************************************************
* THIS SUBROUTINE WILL UPDATE THE SSI ENTRY.
*******************
SSIRTN   LR    RG1,RG3                  POINTER TO END OF KEYWORD
         CLC   RETCODE(1),RETCOD08     .TEST FOR PREV ERROR.   @ZA06023
         LA    RG5,IGNORSSI             ERROR MSG
         BNL   SSI3                    .B IF PREV ERROR.       @ZA06023
         OI    CTLBTE3,SSIOP            SET SSI OPERATION FLAG
         NI    CTLBTE3,X'FF'-NOSSI-NOMEM  RESET SWS              S21995
         LA    R1,AOPENLIB              LIB OPEN FOR UPDATE      S21995
         BALR  R14,R15                                           S21995
         BAL   LNKRG1,SCAN              DECODE SSI CARD
         LA    R1,AINSM1A         GET INDEX                      X01979
         BALR  R14,R15            GET SSI FIELD                  X01979
         TM    CTLBTE3,NOMEM            MEMBER NOT FOUND
         LA    RG5,NONAME               ERROR MSG
         BC    1,SSI2                   YES-SEND ERROR MSG
         TM    CTLBTE3,NOSSI            SSI FIELD MISSING
         BC    1,SSI1                   YES-SEND ERROR MSG
         LR    WK2,RG4                  LOAD ADDRESS OF OLD SSI  X01979
         LA    WK5,4                    LOAD LENGTH OF SSI       X01979
         BAL   LNKRG2,UNPATCH           FORMAT UNPATCH MESSAGE   X01979
         BAL   LNKRG1,WRITE3           .WRITE 'OLD DATA' MSG.  @ZA17659
         MVC   CDBUF+80(40),BLANKS      CLEAR END OF BUFFER      X01979
         MVC   0(4,RG4),0(RG6)          MOVE SSI TO DIRECTROY
         LA    R1,ADIRWRIT              UPDATE DIRECTORY         S21995
         BALR  R14,R15                                           S21995
         BR    LNKRG3                  . ON TO GET NEXT INPUT. @ZM30902
         SPACE 1
SSI1     LA    RG5,SSIERR               ERROR MSG
SSI2     MVC   RETCODE(1),RETCOD04    .ELSE SET RETCODE = 4,   @ZA19023
SSI3     BAL   LNKRG1,WRITE0           .ISSUE ERROR MESSAGE.   @ZA06023
         BR    LNKRG3                  . ON TO GET NEXT INPUT. @ZM30902
         SPACE 2
***********************************************************************
*  THIS SUBROUTINE DECODES & SAVES THE IDRDATA STATEMENT
***********************************************************************
IDRRTN   TM    CTLBTE3,NAMEIDR         FIRST IDR CARD THIS NAME  S21016
         BCR   1,LNKRG3                N0-IGNOR IT               S21016
         BAL   LNKRG1,SCANKEY1         FIND IDR DATA             S21016
         MVC   IDRDATA(8),BLANKS       CLEAR IDR DATA AREA       S21016
         EX    RG4,SAVE4               MOVE IDR DATA TO BEGIN    S21016
         OI    CTLBTE3,NAMEIDR         INDICATE IDR CD THIS NAME S21016
         BR    LNKRG3                  READ NEXT CARD            S21016
         SPACE 1
SAVE4    MVC   IDRDATA(0),0(RG1)       SAVE IDRDATA              S21016
***********************************************************************
SETUP1   LR    RG1,RG3                  KEYWORD END POINTER
         BAL   LNKRG1,SCAN              GET OFFSET
         MVC   OFFSET(4),DBUFEND-4      SAVE OFFSET
         BAL   LNKRG1,SCAN              GET PATCHES
         LA    R1,AOPENLIB                                       S21995
         BALR  R14,R15                                           S21995
         L     RG1,OFFSET
         LA    RG1,RDAREA1(RG1)         PATCH AREA ADDRESS
         S     RG1,BASE2                ADDITIONAL OFFSET SUPPLIED
         BCTR  RG4,0                    DECR. BY 1
         ST    RG4,SVLNGTH              SAVE LENGTH OF FIELD      M0509
         TM    CTLBTE,NAMEOP            CSECT OPERATION
         BC    1,NAME07                 YES-GET PROPER TEXT RECORD
         LA    15,1(RG4,RG1)            CALCULATE END OF INSPECT
         L     14,LENGTH                LENGTH OF RECORD
         LA    14,RDAREA1(14)           POSITION IN CORE
         CR    15,14
         L     R15,AIORTNS              RESET R15                S21995
         BCR   8+4,LNKRG2               CONTINUE PROCESSING
         L     RG5,AMSG106I            .SELECT ERROR MESSAGE.  @ZA09679
         BC    15,VERY1                 SEND MESSAGE AND DUMP
         SPACE 2
***********************************************************************
BASERTN  LR    RG1,RG3                  KEYWORD END PTR
         BAL   LNKRG1,SCAN              DEBLOCK BASE OFFSET
         MVC   BASE2(4),DBUFEND-4       MOVE IN OFFSET
         BCR   15,LNKRG3                RETURN TO CALLER        YA01767
         SPACE 3
***********************************************************************
NAME07A  DS    0C
         LA    R15,NOCSECT    IN CASE OF BAD INPUT, WE HAVE TO  YA01766
         STM   0,15,DMPSAVE   SAVE THE REGS AND POINT REG15 TO  YA01766
         L     R15,AIORTNS    LABEL 'NOCSECT'                   YA01766
         BAL   LNKRG2,NAME01A           SET MODULE ATTRIBUTES
         BC    0,0                      DUMMY VERTOR
         BC    0,0                      DUMMY VERTOR
         LA    R1,ARDDSK2               GET FIRST TEXT RECORD    S21995
         BALR  R14,R15                                           S21995
         NI    CTLBTE,X'FF'-ONEREC-ENDMOD-OVFLOW                 YM5531
         ST    LNKRG3,LNKSAVE           SAVE LINK REGISTER
         LA    LNKRG3,REGSAVE           ADDR OF REG SAVE AREA
         POINT LIB2,STCSECT             REPOSITION AT START OF TXT
         L     R15,AIORTNS              RESET R15                S21995
         L     LNKRG3,LNKSAVE           RESTORE LNKRG3
         BC    15,NAME08                CONTINUE WITH INSPECT
         SPACE 1
* ENTER HERE AFTER REP CARD IS READ AND NAME OPTION SPEC.
NAME07   A     RG1,BASE                 MODULE PATCH ADDRESS
         MVC   STCSECT(4),IDSAVE        RESTORE START ADDR
         ST    LNKRG3,LNKSAVE           SAVE LINK REGISTER
         LA    LNKRG3,REGSAVE           ADDR OF REG SAVE AREA
         POINT LIB2,STCSECT             POSITION TO RECORD
         L     R15,AIORTNS              RESET R15                S21995
         L     LNKRG3,LNKSAVE           RESTORE LNKRG3
         TM    CTLBTE2,MULREC           MULTIPLE TEXT RECORDS
         BC    1,NAME07A                YES-READ FIRST TEXT RECOD
         TM    CTLBTE,ONEREC            SPECIAL RECORD
         BC    1,NAME08                 YES-SKIP
* ENTER HERE IF OVERFLOW IS INDICATED
NAME07B  BAL   LNKRG2,RDDSK4            READ CONTROL RECORD
* VECTOR 1 - PATCH NOT IN MODULE
         BC    15,NAME12B               PRINT ERROR MESSAGE
         SPACE 1
* VECTOR 2 - CSECT CONTROL RECORD READ INTO CORE
NAME08   L     RG2,START                FOLLOWING TEXT START ADDR.
         LA    RG2,RDAREA1(RG2)         PATCH ADDRESS IN CORE
         CR    RG1,RG2                  PATCH WITHIN TEXT RECORD
         BC    4,DSERROR                LOW-DSERROR
         LR    RG3,RG2
         A     RG3,LENGTH               ADD LENGTH TO START
         CR    RG1,RG3                  PATCH IN TEXT
         BC    4,NAME09                 YES-GET TEXT RECORD
         TM    CTLBTE,ONEREC            NO-SPECIAL RECORD
         BC    1,NAME12B                YES-ERROR MSG + DUMP     A41634
* PATCH IN SUCCEEDING TEXT RECORDS
NAME08B  TM    CTLBTE,ENDMOD            HAS END OF MODULE BEEN REACHED
         BO    NAME12B                  YES--PRINT MESSAGE
         LA    LNKRG2,NAME07B+4         SET LINK REGISTER
         BC    15,RDDSK3                 SKIP TEXT AND READ NEXT C+U
         SPACE 1
* PREPARE TO PATCH THE TEXT RECORD
NAME09   LA    R1,ARDDSK2               GET TEXT RECORD          S21995
         BALR  R14,R15                                           S21995
         LR    RG2,RG1                  TEXT START ADDRESS
         L     RG4,SVLNGTH              GET LENGTH OF FIELD       M0509
         LA    RG2,0(RG4,RG2)           ADD NO. OF PATCH CHAR (-1)
         NI    CTLBTE,X'FF'-OVFLOW      RESET OVERFLOW BIT
         CR    RG2,RG3                  END OF PATCH WITHIN RECORD
         BC    4,NAME10                 YES-SKIP
         TM    CTLBTE,ONEREC            SPECIAL RECORD
         BC    1,NAME12B                ERROR MSG + DUMP         A41634
         OI    CTLBTE,OVFLOW            SET OVERFLOW BIT
         SR    RG2,RG3                  NO OF CHAR'S OVER (-1)
         SR    RG4,RG2                  ACTUAL NO IN PATCH
         BCTR  RG4,0                    DECR. BY 1
         LR    RG5,RG2                  SAVE NO. OF CHARS
         ST    RG2,SVLNGTH              SAVE NO. OF CHARS        A51987
NAME10   BAL   LNKRG1,CCHNOTE           TO SET UP CCHHR  ADDR
         A     RG1,STARTINC             RECORD OFFSET
         S     RG1,START                TEXT START -ABS
         TM    CTLBTE,VERYOP            VERY OPTION
         BC    1,NAME13                 YES-COMPARE ONLY
         ST    RG3,TEMPRG3              SAVE RG3                 X01979
         ST    RG5,TEMPRG5              SAVE RG5                 X01979
         LR    WK2,RG1                  LOAD ADDRESS OF OLD DATA X01979
         LA    WK5,1(RG4)               LOAD LENGTH OF PATCH     X01979
         TM    CTLBTE2,FIRSTPCH         IS THIS FIRST PASS       X01979
         BO    SPLIT                    NO-DONT MOVE MESSAGE     X01979
         OI    CTLBTE2,FIRSTPCH         YES-SET FIRST PASS SW    X01979
         BAL   LNKRG2,UNPATCH           FORMAT UNPATCH MESSAGE   X01979
         B     NAME10A                  SKIP                     X01979
SPLIT    L     RG3,MSGOFSET             RESET OFFSET INTO MSG    X01979
         BAL   LNKRG2,UNPK              COMPLETE MESSAGE FORMAT  X01979
NAME10A  ST    RG3,MSGOFSET             SAVE OFFSET INTO MESSAGE X01979
         L     RG3,TEMPRG3              RELOAD RG3               X01979
         L     RG5,TEMPRG5              RELOAD RG5               X01979
         EX    RG4,PATCH                MOVE IN PATCHES
NAME11   LA    R1,AWRDISK               UPDATE DISK              S21995
         BALR  R14,R15                                           S21995
         OI    CTLBTE2,MODIFY           SET MODIFY FLAG ON
         NI    CTLBTE3,X'FF'-SSIOP     TURN OFF SSI OPERATION    S21995
NAME12   TM    CTLBTE,OVFLOW            PATCH SPLIT
         BZ    WRITEUN                  NO-WRITE UNPATCH         X01979
         LA    RG6,1(RG6,RG4)           UPDATE REP DATA
         LR    RG1,RG3                  START OF ADDITIONL PATCH
         LR    RG4,RG5                  NEW NO. OF CHARS
         TM    CTLBTE,ENDMOD            CHECK FOR END OF MODULE  X01979
         BNO   NAME07B                  NO--READ NEXT TEXT REC   X01979
         TM    CTLBTE,VERYOP            IS THIS A VERIFY         X01979
         BO    NAME12B                  YES--UNABLE TO FINISH    X01979
         BAL   LNKRG1,WRITE3           .WRITE 'OLD DATA' MSG.  @ZA17659
         MVC   CDBUF+80(40),BLANKS      CLEAR END OF BUFFER      X01979
         NI    CTLBTE2,X'FF'-FIRSTPCH   TURN OFF FIRST PASS SW   X01979
         B     NAME12B                  NOW ERROR-PATCH OVERLAP  X01979
WRITEUN  TM    CTLBTE,VERYOP            FOR VERIFY OPERATION     X01979
         BCR   1,LNKRG3                 YES-GET NEXT CARD        X01979
         BAL   LNKRG1,WRITE3           .WRITE 'OLD DATA' MSG.  @ZA17659
         MVC   CDBUF+80(40),BLANKS      CLEAR END OF BUFFER      X01979
         NI    CTLBTE2,X'FF'-FIRSTPCH   RESET FIRST PASS SW      X01979
         BR    LNKRG3                   GET NEXT CARD            X01979
         SPACE 2
* PATCH OPERATION INCOMPLETE
NAME12B  L     RG5,AMSG106I            .SELECT ERROR MESSAGE.  @ZA09679
         BC    15,NAME14                PRINT MSG AND DUMP
         SPACE 1
*    VERIFY DATA
NAME13   EX    RG4,VERPTCH              COMPARE PATCH
         BC    8,NAME12                 ALL COMPARE-YES
* VERIFY OPERATION NOT CONFIRMED
         L     RG5,AMSG104I            .SELECT MESSAGE.        @ZA17658
NAME14   BAL   LNKRG1,WRITE0            TO PRINT MESSAGE
         MVC   RETCODE(1),RETCOD08     .INDIC SPZAP-INP ERROR. @ZA06023
         TM    CTLBTE,IGNOP             HAS DUMP BEEN DONE?    @YM4508P
         BCR   1,LNKRG3                 YES, GET NEXT CARD     @YM4508P
         OI    CTLBTE,IGNOP             SET TO IGNORE REP CARD
         B     SETDUMP                 .(ADDRESSING DETOUR).   @ZA09679
         SPACE 3
UNPATCH  MVC   CDBUF(20),UNPATMSG       MOVE UNPATCH MSG         X01979
         MVI   CDBUF+20,C' '            SET BLANK TO CLEAR       X01979
         MVC   CDBUF+21(100),CDBUF+20      TO END OF BUFFER      X01979
         LA    RG3,CDBUF+21             POINT TO REP AREA        X01979
UNPK     UNPK  0(3,RG3),0(2,WK2)        UNPACK OLD REP DATA      X01979
         TR    0(2,RG3),TRANTBL2-X'F0'  AND TRANSLATE TO EBCIDIC X01979
         MVI   2(RG3),BLANK             CLEAR LAST BYTE          X01979
         LA    RG3,2(RG3)               ADVANCE AREA PTR         X01979
         LA    WK2,1(WK2)               ADVANCE DATA PTR         X01979
         BCT   WK5,UNPK                 LOOP FOR LENGTH OF DATA  X01979
         BR    LNKRG2                   DONE-RETURN              X01979
***********************************************************************
DUMPRTN  NI    CTLBTE,X'FF'-NAMEOP      SET NAME OPTION SW OFF   YM5146
         MVI   DMPSW,X'FF'             .SET DUMP INDICATOR.    @ZA26077
        NI    CTLBTE2,X'FF'-TRAN      .RESET 'TRANSLATE' FLAG. @ZA02775
         CLI   4(RG1),C'T'              TRANSLATE MODE
         BC    7,DUMPR1                 NO-SKIP
         OI    CTLBTE2,TRAN             YES-SET CONTROL BIT
DUMPR1   BAL   LNKRG2,SCANKEY5          TO GET MEMBER & CSECT NAME
         NI    CTLBTE,X'FF'-ONEREC  RESET INDICATOR
         OI    CTLBTE,NAMEERR  DON'T ALLOW VER'S AND REPS
         CLC   CSECT(4),ALL           .TEST FOR 'ALL' REQUEST. @ZA19021
         BC    8,DUMP04                 YES-MULTIPLE DUMP
* ENTRY POINT FROM NON-COMPARE ON VERIFY OPERATION
DUMP01A  NI    CTLBTE,X'FF'-ENDMOD           RESET END OF MODULE A42720
         LA    R15,NOCSECT    IN CASE OF BAD INPUT, WE HAVE TO  YA01766
         STM   0,15,DMPSAVE   SAVE THE REGS AND POINT REG15 TO  YA01766
         L     R15,AIORTNS    LABEL 'NOCSECT'                   YA01766
         BAL   LNKRG2,NAME01A           FIND CSECT NAME          A42720
* RETURN VECTOR-ERROR MSG
         BC    15,NOCSECT
         SPACE 1
         BC    15,NAME03B               TRY NEXT ESD
         SPACE 1
* FOUND ESD - CSECT NAME - FIND         CONTROL RECORD WITH ID
DUMP01B  BAL   LNKRG2,RDDSK4            READ CONTROL RECORD
* RETURN VECTOR 1 - END OF MODULE
         BC    15,DUMP09                END OF DUMP
         SPACE 1
* RETURN VECTOR2 - FOUND CONTROL RECORD WITH CSECT ID
         TM    CTLBTE,ONEREC            SPECIAL RECORD
         BC    1,DUMP01D                YES-PREPARE TO POINT
         BAL   LNKRG2,DUMP1             TO DUMP CSECT            S21995
* CONDITION CODE SET FOR LAST RECORD
         BC    1,DUMP09                 TO PRINT COMPLETE MESSAGE
         BC    15,DUMP01B               NO-CONTINUE
         SPACE 1
DUMP01D  LA    R1,ADMP1AA              DUMP CSECT                S21995
         L     R15,ADMP                                          S21995
         BALR  R14,R15                                           S21995
*   CONDITION CODE SET FOR LAST RECORD
         BC    1,DUMP09                 TO PRINT COMPLETE MESSAGE
         TM    CTLBTE2,MULREC           MULTIPLE TEXT
         BC    8,DUMP09                 TO PRINT COMPLETE MESSAGE
         NI    CTLBTE,X'FF'-ONEREC      YES-RESET INDICATORS
         BC    15,DUMP01B               TO CONTINUE DUMP
         SPACE 2
***********************************************************************
* THIS ROUTINE HANDLES DUNPING OF ALL THE CSECTS IN THE MEMBER
*******************
DUMP04   XC    IDSAVE2(4),IDSAVE2       CLEAR SAVE AREA
DUMP04A  L     R15,ACONT      IN CASE OF BAD INPUT, WE HAVE TO  YA01766
         STM   0,15,DMPSAVE   SAVE THE REGS AND POINT REG15 TO  YA01766
         L     R15,AIORTNS    LABEL 'CONT '                     YA01766
         BAL   LNKRG2,NAME01A           TO FIND FIRST CSECT
* RETURN VECTOR - END OF ESD SEARCH
         BC    15,DUMP09                END MSG
         SPACE 1
*   RETURN VECTOR- CSECT NON-COMPARE
         BC    0,0
*   RETURN VECTOR-  CSECT COMPARE
         TM    CTLBTE,ONEREC            IS IT A SPECIAL DUMP
         BC    1,DUMP01D                YES-DUMP ONE RECORD
         CLI   RDAREA1,X'20'           MAY HAVE LOWEST CSECT     A42310
         BNE   DUMP09                  YES-DUMP DOESNOT WANT IT  A42310
         CL    RG4,IDSAVE2              IS IT EQUAL TO LAST
         BC    8+4,NAME03B              SKIP UNTIL EXCEED LAST ID
         ST    RG4,IDSAVE2              SAVE ID FOR COMPARE
         MVC   CSECT(8),0(RG3)          USE AS DUMP NAME
DUMP06B  BAL   LNKRG2,RDDSK4            READ CONTROL RECORD
* RETURN VECTOR 1 - END OF MODULE
         B     DUMP07                  .TO NEXT RECD OF DUMP.  @ZA02788
         SPACE 1
* RETURN VECTOR2 - FOUND CONTROL RECORD WITH CSECT ID
         BAL   LNKRG2,DUMP1             TO DUMP CSECT            S21995
* CONDITION CODE SET FOR LAST RECORD
         BZ    DUMP06B                 .B IF NOT 'ENDMOD'.     @ZA02788
DUMP07   CLC   CSECT(8),BLANKS                                 @ZA02788
         BNE   DUMP04A                 .IF NO CSECT NAME,      @ZA02788
         MVC   CSECT(8),IDRDFLT        . SET TO 'NO IDENT'.    @ZA02788
         B     DUMP04A                 . AND GO TO NEXT CSECT. @ZA02788
         SPACE 1
DUMP09   LA    RG5,DMPCMP
         MVI   DMPSW,X'00'             .ALLOW WRITE TO CONSOLE @ZA26077
         BAL   LNKRG1,WRITE0            WITE OUT COMPLETE MSG
         NI    CTLBTE2,X'FF'-TRAN      RESET IF BIT ON
         NI    CTLBTE,X'FF'-ENDMOD     RESET IF BIT ON
         LA    RG5,BLANKS               SKIP PAGE
         MVI   CDBUF-1,X'F1'            SET TO SKIP TO NEW PAGE
         MVI   DMPSW,X'FF'             .RESTORE DUMP INDICATOR @ZA26077
         BAL   LNKRG1,WRITE0            SKIP LINE
         MVI   CDBUF-1,X'40'            SET TO NORMAL
* ADDRESSABILITY DETOUR.                                       @ZA09673
         B     DUMP09Z                 .TEST FOR RETCODE GE 12 @ZA09673
         SPACE 2
***********************************************************************
ABDMP1   LA    RG3,1(RG3)               INCR. TO NEXT CHAR
ABDMPRTN CLI   1(RG3),BLANK             IS THIS CHAR A BLANK
         BC    8,ABDMP1                 YES-TO INCR.
         MVI   DMPSW,X'FF'             .SET DUMP INDICATOR.    @ZA26077
         OI    CTLBTE,NAMEERR  DON'T ALLOW VER'S AND REPS
         NI    CTLBTE,X'FF'-NAMEOP   TURN OFF NAME OPTION        YM5146
        NI    CTLBTE2,X'FF'-TRAN      .RESET 'TRANSLATE' FLAG. @ZA02775
         CLI   7(RG1),C'T'              TRANSLATE DESIRED
         BC    7,ABDMP1B                NO-SKIP
         OI    CTLBTE2,TRAN             SET TRANSLATE FLAG
ABDMP1B  XC    BASE(4),BASE             RESET FIELDS
         XC    BASE2(4),BASE2
         XC    START(4),START
         LA    14,X'20'                 CONV RTN OFFSET
         CLC   1(4,RG3),ALL           .TEST FOR 'ALL' REQUEST. @ZA19021
         BC    8,ABDMP3                 YES-SKIP TO SET LIMITS
         TM    1(RG3),X'F0'             IS THIS FIRST CHAR NUMERIC
         BC    8+4,ABDMP6               NO-MEMBER DUMP ONLY
         BAL   LNKRG2,CCHHSUB           DECODE INPUT CCHHR
         BAL   LNKRG1,CHCONV            CONVERT TO TTR
         ST    0,TTRSAVE                SAVE TEMP
         BAL   LNKRG2,CCHSUB2           DECODE 2ND CCH
ABDMP2   LA    14,X'20'                 CONVERT RTN OFFSET
         BAL   LNKRG1,CHCONV            CONVERT ABS TO TTR
CONTA    MVC   STCSECT(4),TTRSAVE       EXCHANGE TTR'S
         ST    0,TTRSAVE                SAVE FOR COMPARE
ABDMP5   DS    0C
         MVC   MEMNAME(8),BLANKS        ZERO OUT FIRST LINE INFO
         MVC   CSECT(8),BLANKS
         LA    R1,ADMP1AA              TO DUMP RECORD            S21995
         L     R15,ADMP                                          S21995
         BALR  R14,R15                                           S21995
CONTB    CLC   STCSECT(3),TTRSAVE       COMPLETED
         BC    8+2,DUMP09               YES-PRINT MSG.
         NI    LIB2+44,X'3F'            RESET IFLAGS IF ON DUE TO ERROR
         CLI   DECB5,X'42'              END OF EXTENT
         BC    8,DUMP09                 YES-END OPERATION
         LA    LNKRG2,CONTB             RESET LINK REG           S21995
         BC    15,DUMP1                 PRINT NEXT RECORD        S21995
         SPACE 1
CONT     L     R15,AIORTNS                                       S21995
         CLI   DECB5,X'42'             EOD BECAUSE END OF EXTENT A43688
         BE    DUMP09                  YES-END OPERATION         A43688
         LA    R1,ADMP1E               WRITE EOD RECORD          S21995
         L     R15,ADMP                                          S21995
         BALR  R14,R15                                           S21995
         TM    CTLBTE2,PSIND            IS IT A SEQUENTIAL DUMP
         BO    DUMP09                   YES--DONE
         LA    RG5,BLANKS
         BAL   LNKRG1,WRITE0            TO SKIP LINE
         LA    LNKRG2,CONTB             RESET LINK REGISTER
         TM    CTLBTE2,MEMDMP           BUT WAS IT ONLY ONE MEMBER
         BCR   8,LNKRG2                 NO-FULL DATASET
         NI    CTLBTE2,X'FF'-MEMDMP     REST INDICATOR
         BC    15,DUMP09                TO PRINT ENDING MESSAGE
         SPACE 1
ABDMP3   L     RG2,LIB2+44              GET DEB ADDR
         NI    CTLBTE,X'FF'-NAMEOP-ONEREC  RESET INDICATORS
         XC    MBBCCHHR(8),MBBCCHHR     RESET ADDRESS
         MVC   MBBCCHHR+3(4),STEXT(RG2) SET START ADDR.
         MVI   MBBCCHHR+7,X'01'         SET FOR RECORD ONE READ
         BAL   LNKRG1,CHCONV            CONVERT ABS TO TTR
         ST    0,STCSECT                START ADDR (TTR)
         MVC   JFCB(3),RDAREA+1         SET ADDR OF JFCB READ     M2820
         ST    LNKRG3,LNKSAVE      SAVE LINK REGISTER
         LA    LNKRG3,REGSAVE           ADDR OF REG SAVE AREA
         RDJFCB  (LIB2,(INPUT))         GET DDNAME
         MVC   JFCB(3),JFCBAD+1         RESET EXIT LIST ADDR      M2820
         L     R15,AIORTNS              RESET R15                S21995
         L     RG2,LIB2+44              GET DEB ADDR AGAIN
         L     RG2,X'20'(RG2)           GET UCB ADDR
         LA    RG2,X'1C'(RG2)           POINT AT VOL SER
         ST    RG2,OBLIST+8             SET ADDR IN LIST
         L     RG2,RDAREA               DSNAME POINTER
         ST    RG2,OBLIST+4             SET POINTER
         LA    RG4,160(RG2)             SET WORK AREA
         ST    RG4,OBLIST+12            SET WK AREA IN LIST
         OBTAIN  OBLIST                 SET DSCB
         L     R15,AIORTNS             RESET R15                 S21995
         L     LNKRG3,LNKSAVE      RESTORE LNKRG3
         NI    CTLBTE2,X'FF'-PSIND      RESET PHYSICAL SEQ DUMP
         TM    DS1DSORG(RG4),PS         IS DATA SET SEQUENTIAL
         BNO   TESTPO                   NO--TEST FOR PARTITIONED
         OI    CTLBTE2,PSIND            YES--INDICATE SEQUENTIAL
MAKEHI1  SR    RG5,RG5                  CLEAR REG FRO TTR
         B     MAKEHI2                  GO SAVE TTR
TESTPO   TM    DS1DSORG(RG4),PO         IS DATA SET PARTITIONED
         BNO   MAKEHI1                  NO--DUMP TO END OF EXTENT
         MVC   TTRSAVE(3),98-44(RG4)    SAVE END OF DATA SET
         MVI   TTRSAVE+3,0              ZERO CONC. NO.
         L     RG5,TTRSAVE              GET CONTENTS
         LTR   RG5,RG5                  ZERO
         BC    7,ABDMP5                 NO-USE
MAKEHI2  BCTR  RG5,0               YES - MAKE END TTR HIGH
         ST    RG5,TTRSAVE              YES - MAKE HIGH
         MVI   TTRSAVE+3,0              ZERO OUT CONC NO.
         BC    15,ABDMP5                DUMP ALL OF D.S.
         SPACE 1
ABDMP6   BAL   LNKRG2,SCANKEY5          TO GET MEMBER NAME
         ST    LNKRG3,LNKSAVE           SAVE LINK REGISTER
         LA    LNKRG3,REGSAVE           ADDR OF REG SAVE AREA
         FIND  LIB2,MEMNAME,D           POSITION AT FIRST RECORD
         L     LNKRG3,LNKSAVE           RESTORE LNKRG3
         LTR   15,15                    FOUND MEMBER
         L     R15,AIORTNS             RESET R15                 S21995
         BC    7,NAME03C                NO -TO PRINT MESSAGE
         MVC   CSECT(8),BLANKS          CLDAR FIELD
         OI    CTLBTE2,MEMDMP           SET CONTROL FLAG
         BAL   LNKRG2,DUMP1             TO DUMP                  S21995
         BC    15,DUMP1                 CONTINUE                 S21995
         SPACE 1
DSERROR  LA    RG5,DSMSG                DS NOT IN TEXT
         BC    15,NAME14
         SPACE 1
NOCSECT  L     RG5,AMSG103I            .SELECT MESSAGE.        @ZA17658
         L     R15,ACONT      IN CASE OF BAD INPUT, WE HAVE TO  YA01766
         STM   0,15,DMPSAVE   SAVE THE REGS AND POINT REG15 TO  YA01766
         L     R15,AIORTNS    LABEL 'CONT '                     YA01766
         L     R15,AIORTNS              RESTORE R15              YM5146
         BAL   LNKRG1,WRITE0
         MVC   RETCODE(1),RETCOD08     .INDIC SPZAP-INP ERROR. @ZA06023
         OI    CTLBTE,IGNOP+NAMEERR     IGNORE NXT REP AND VERIFY
         BC    15,DUMP04
         EJECT
AMASZDMP CSECT
         USING AMASZCON,BASREG2                                  S21995
         L     R15,ACONT               PUT RETURN FROM EOF IN 15 YM5146
         STM   0,15,DMPSAVE                                      S21995
         L     R15,AIORTNS             RESET R15                 YM5146
         BALR  BASREG,0                                          S21995
         USING *,BASREG                                          S21995
DMPBASE  DS    0H                      .('SZDMP' BASE ADDR).   @ZA09678
         LA    R13,REGSAVE             SET REG SAVE AREA         S21995
         LA    LNKRG2,GOBACK2          SET DUMP RETURN           S21995
         B     VECTOR2(R1)             BRANCH ON INDEX R1        S21995
VECTOR2  B     DUMP01AA                                          S21995
         B     DUMP01                                            S21995
         B     DUMP01E                                           S21995
         B     DUMP01AB                                          S21995
GOBACK2  LM    0,15,DMPSAVE            RESTORE REGS              S21995
         L     R15,AIORTNS             RESET R15                 YM5146
         BR    R14                     RETURN                    S21995
*      INITIALIZE  REGISTERS  FOR  DUMP  FORMAT  PROGRAMS
DUMPCOM  L     WK6,TBUF+8               INIT TO DATA PTR
DUMPCOM1 MVC   CDBUF(48),BLANKS         CLEAR BUFFER
         MVC   CDBUF+48(32),BLANKS
         LA    WK3,CDBUF+10             SET INITIAL BUFFER PTR
         LA    WK4,8                    SET WORD COUNTER
         BCR   15,LNKRG1                RETURN
         SPACE 1
DUMP01AA POINT LIB2,STCSECT             POSITION AT TXT RECORD
         L     R15,AIORTNS             RESET R15                 S21995
         SPACE 2
***********************************************************************
DUMP01   LA    RG5,BLANKS
         LA    R1,AWRITE0A             TO SKIP LINE              S21995
         BALR  R14,R15                                           S21995
         LA    R1,ARDDSK2               READ TXT RECORD          S21995
         BALR  R14,R15                                           S21995
DUMP01E  BAL   LNKRG1,CCHNOTEA          TO SET UP CCHHR ADDR     S21995
         SPACE 1
         MVC   CDBUF(100),TITLE1
         L     WK6,STARTINC             GET OFFSET
         LA    WK6,RDAREA1(WK6)         ADD TO RDAREA1
         L     RG3,DECB5+16             GET IOB POINTER
         SR    WK2,WK2                  CLEAR REGISTER
         IC    WK2,LIB2+16              GET KEY LENGTH
         L     WK1,SIZE                 GET MAX SIZE OF RECORD
         AR    WK1,WK2                  ADD TO BUFFER ADDR
         XC    TBUF(2),TBUF             SET BEGINNING TO 0       A41640
         MVC   TBUF+2(2),14(RG3)        MOVE RESIDUAL COUNT      A41640
         S     WK1,TBUF                 GET SIZE READ            A41640
         TM    CTLBTE2,MEMDMP           MEMBER DUMP ONLY
         BC    1,DUMP01AC               YES-SKIP AROUND
         CLC   MEMNAME(8),BLANKS        ABSOLUTE DUMP
         BC    7,DUMP01AB               NO -SKIP LENGTH CALC
* ABSDUMP. TEST FOR EXTRA RECD DUE TO ENDADDR RECD# GT LAST    @ZA09678
         CLC   STCSECT(3),TTRSAVE      . RECD OF TRACK.        @ZA09678
         BNH   DUMP01F                 .IF NOT, CONTINUE DUMP. @ZA09678
         LM    0,15,DMPSAVE            .IF SO,                 @ZA09678
         L     R15,AIORTNS             . TERMINATE DUMP.       @ZA09678
         USING ZAPBASE2,BASREG         .('SPZAP' ADDRESSING).  @ZA09678
         B     DUMP09                                          @ZA09678
         DROP  BASREG                  .(END 'SPZAP' ADDRING). @ZA09678
         USING DMPBASE,BASREG          .(RESUME 'DMP' ADDRNG). @ZA09678
DUMP01F  DS    0H                      .(CONTINUE ABSDUMP).    @ZA09678
         MVC   CDBUF+X'32'(37),BLANKS   WIPE OUT CSECT LABEL
DUMP01AC DS    0C
         MVC   CDBUF+X'49'(14),BLANKS    BLANK OUT CSECT TITLE   S21995
         ST    WK1,LENGTH               STORE RECORD COUNT
DUMP01AB LR    WK2,WK6
         A     WK2,LENGTH               STOP ADDRESS
         ST    WK1,LENGTH               STORE NEW COUNT IF ABS DUMP
         UNPK  CDBUF+9(11),MBBCCHHR+3(6)
         TR    CDBUF+9(10),TRANTBL2-X'F0'
         MVI   CDBUF+19,BLANK
         UNPK  CDBUF+37(5),LENGTH+2(3)
         TR    CDBUF+37(4),TRANTBL2-X'F0'
         MVI   CDBUF+41,BLANK
         BAL   LNKRG1,WRITEB            PRINT HEADER             S21995
         OC    LENGTH+2(2),LENGTH+2     END OF FILE
         BCR   8,LNKRG2                 YES- RETURN
         L     WK1,START
         S     WK1,BASE
DUMP02   BAL   LNKRG1,DUMPCOM1          INITIALIZE REGISTERS
         ST    WK6,TBUF+8               SAVE LOC OF LINE START
         ST    WK1,TBUF                 OFFSET ADDRESS
         UNPK  CDBUF+1(7),TBUF+1(4)     CSECT OFFSET
         TR    CDBUF+1(6),TRANTBL2-X'F0'
         MVI   CDBUF+7,BLANK            RESET LAST UNPACK
DUMP02B  LA    WK5,4                    CHAR COUNT
DUMP02C  UNPK  0(3,WK3),0(2,WK6)        UNPACK CHAR.
         TR    0(2,WK3),TRANTBL2-X'F0'
         MVI   2(WK3),BLANK             RESET SIGN OF UNPACK
         LA    WK3,2(WK3)               CDBUF ADDRESS
         LA    WK6,1(WK6)               TEXT ADDRESS
         CR    WK6,WK2                  STOP ADDR
         BC    8+2,DUMP08               DONE-YES EXIT
         TM    CTLBTE2,TRAN             CHECK FOR HALFWORD SEP
         BC    1,DUMP03B                YES-OUT TO CHECK
DUMP03A  BCT   WK5,DUMP02C              CONTINUE WITH FIRST LOOP
         CH    WK4,FIVE                 MIDDLE OF PAGE
         BC    8,DUMP03                 YES - SET ADDRESS IN DUMP
         LA    WK3,3(WK3)               INC PAST BLANKS
         TM    CTLBTE2,TRAN             TRAN DUMP
         BC    8,DUMP02D                NO-LET INCR STAND
         BCTR  WK3,0                    YES-CHANGE FORMAT
DUMP02D  DS    0C
         BCT   WK4,DUMP02B              SECOND LOOP
         TM    CTLBTE2,TRAN             TEST FOR TRANSLATE OPTION
         BC    1,GRAP1                  YES-CONTINIUE WITH LINE
         BAL   LNKRG1,WRITEB            NO-PRINT THIS ONE        S21995
DUMP02E  LA    WK1,32(WK1)              INCR. READ POINTER
         BC    15,DUMP02                NEXT LINE
         SPACE 1
DUMP03B  CH    WK5,THREE                HALFWORD SEPARATOR
         BC    7,DUMP03A                NO-CONTINUE WITH WORD
         LA    WK3,1(WK3)               LEAVE BLANK SEP.
         BCT   WK5,DUMP02C              CONTINUE
         SPACE 1
DUMP03   LA    WK3,5(WK3)               INCR PAST MIDDLE OF PAGE
         BCT   WK4,DUMP02B              DECR. COUNTER
         SPACE 2
DUMP08   TM    CTLBTE2,TRAN             TEST FOR TRANSLATE OPTION
         BC    1,GRAP1                  TO DECODE GRAPHICS
         BAL   LNKRG1,WRITEB            PRINT LAST LINE          S21995
         TM    CTLBTE,ENDMOD            TEST FOR LAST TEXT RECORD
         BCR   15,LNKRG2                END OF SUBROUTINE
*      THIS  SUBROUTINE  TRANSLATES  DATA  INTO  INSTRUCTIONS
         SPACE 1
INSTR7   AR    WK7,WK7                  MULTIPLY AGAIN BY2
         AR    WK7,WK7                  DOUBLE AGAIN =X4
         LA    WK7,FOURC-X'108'(WK7)    GET MNEMONIC
         MVC   0(4,WK3),0(WK7)          MOVE INTO OUTPUT BUFFER
         BC    15,INSTR3                BACK
TRANS5   MH    WK7,FIVE            MULTIPLY OFFSET BY 5           M1148
         LA    WK7,FIVEC-X'410'(WK7)   GET ADDR OF MNEMONIC       M1148
         CH    WK5,ONE             IN MIDDLE OF HALFWORD PAIR     M1148
         BE    MOVE5               YES,RUN MNEMONIC OVER END      M1148
         BCTR  WK3,0               NO,BACK UP POSITION            M1148
         MVC   0(5,WK3),0(WK7)     MOVE MNEMONIC INTO BUFFER      M1148
         LA    WK3,1(WK3)          MOVE BUFFER PTR BACK TO ORIGIN M1148
         B     INSTR3              BACK                           M1148
MOVE5    MVC   0(5,WK3),0(WK7)     MOVE MNEMONIC TO BUFFER        M1148
         B     INSTR3                                             M1148
         SPACE 1
INSTR6   LA    WK3,5(WK3)               INCR BUFFER PTR
         BCT   4,INSTR1                 BAD WITH REST OF PAGE
         SPACE 1
INSTR8   LA    WK3,1(WK3)               SPACE BETWEEN HALF WORDS
         BC    15,INSTR2                CONTINUE WITH WORD
TWOBYTES IC    WK7,0(WK6)          GET 2ND BYTE                   M1148
         BCTR  WK6,0               GET BACK TO OP CODE            M1148
         CLI   0(WK6),X'B2'        IS IT A B2XX OP CODEP          M1148
         BNE   BYTE29C                 NO, TRY ANOTHER TWO BYTER  M1148
         CLC   1(1,WK6),MAXB2          CHECK MAX SIZE OF BYTE 2  S21995
         BH    DXRCK                   CHECK FOR DXR INSTRUCTION X01979
         IC    WK7,B2TAB(WK7)          GET TABLE INCREMENT        M1148
BYTE2EX  LA    WK6,1(WK6)              RESET POINTER              M1148
         B     TABCHK                  GO GET MNEMONIC            M1148
DXRCK    CLI   1(WK6),X'2D'            IS IT A DXR               X01979
         BNE   TOOHI                   NO--2ND BYTE IS TOO BIG   X01979
         LA    WK7,X'AA'               YES--SET OFFSET INTO TABLEX01979
         B     BYTE2EX                 GO GET MNEMONIC           X01979
TOOHI    SR    WK7,WK7                 SET WK7 TO NO OP          S21995
         B     BYTE2EX                 GO GET BLANK MNEMONIC     S21995
BYTE29C  N     WK7,BYTE2MSK            REMOVE 7 HI BITS OF OPCODE BYTE2
         CLI   0(WK6),X'9C'            IS IT 9CXX                 M1148
         BNE   BYTE29D                 NO, TRY NEXT              YM5533
         IC    WK7,TAB9C(WK7)          GET TABLE INCREMENT        M1148
         B     BYTE2EX                 GO GET MNEMONIC            M1148
BYTE29D  CLI   0(WK6),X'9D'            IS IT 9DXX                YM5533
         BNE   BYTE29E                 NO,TRY NEXT               YM5533
         IC    WK7,TAB9D(WK7)          GET TABLE OFFSET          YM5533
         B     BYTE2EX                 GO GET MNEMONIC           YM5533
BYTE29E  CLI   0(WK6),X'9E'            IS IT 9EXX                YM5533
         BNE   BYTE2XX                 NO,TRY NEXT               YM5533
         IC    WK7,TAB9E(WK7)          GET TABLE OFFSET          YM5533
         B     BYTE2EX                 GO GET MNEMONIC           YM5533
BYTE2XX  SR    WK7,WK7                 DEAD END .. NO MNEMONIC    M1148
         B     BYTE2EX                 RETURN                     M1148
         SPACE 1
INSTR0   BAL   LNKRG1,DUMPCOM           INITIALIZE REGISTERS
INSTR1   LA    WK5,2                    INSTR. COUNTER
INSTR2   SR    WK7,WK7                  CLEAR REGISTER
         IC    WK7,0(WK6)               GET INSTR. OP CODE
         LA    WK6,1(WK6)               INCR. DATA LIST
         CR    WK6,WK2                  STOP
         BC    8+2,INSTR5               YES-DONT UNPACK ONE BYTE INSTR.
         IC    WK7,TRAN2(WK7)           GET INDEX TO TABLE
         CH    WK7,TWOBYTOP        SHOULD WE LOOK AT 2ND BYTE     M1148
         BE    TWOBYTES            YES - PROCESS 2ND BYTE         M1148
TABCHK   CH    WK7,FIVECHAR        FIVE CHARACTER OP CODE         M1148
         BC    8+2,TRANS5          YES,MOVE 5 CHARS               M1148
         CH    WK7,TWOHIGH              TEST FOR WHICH TABLE
         BC    8+2,INSTR7               GET FOUR CHARATER TABLE
         AR    WK7,WK7                  DOUBLE INDEX
         LA    WK7,TWOC(WK7)            GET ADDRESS
         MVC   0(2,WK3),0(WK7)          SET IN MNEMONIC
INSTR3   LA    WK6,1(WK6)               INCR. PAST HALF WORD
         CR    WK6,WK2                  END
         BC    8+2,INSTR5               YES - TO PRINT LINE
         LA    WK3,4(WK3)               INCR. OUTPUT BUFFER
         BCT   WK5,INSTR8               SPACE TO SEPR. HALFWORDS
         CH    WK4,FIVE                 MIDDLE OF PAGE
         BC    8,INSTR6                 YES - SET TITLE
         LA    WK3,2(WK3)               NO-INCR TO NXT WORD
         BCT   WK4,INSTR1               END OF LINE - NO NXTWORD
INSTR5   L     WK6,TBUF+8               GET DATA POINTER
         LA    WK6,X'10'(WK6)           INCR BY ONE LINE
         LA    LNKRG1,DUMP02E           RETURN ADDRESS
         CR    WK6,WK2                  STOP ADDRESS           @ZA28392
         BC    8+2,GRAP8                YES, THEN EXIT         @ZA28392
         BC    15,GRAP1B
GRAP1    LA    LNKRG1,INSTR0            INIT. RET REG-2ND LINE
         L     WK6,TBUF+8               INITIAL DATA POINTER
GRAP1B   MVI   CDBUF+102,C'*'           SET DELIMITER
         MVI   CDBUF+119,C'*'    PLACE ASTERISK AT END OF LINE @ZA28392
         LA    WK3,CDBUF+103            INITIALIZE TO BUFFER POSITION
         LA    WK5,16                   CHAR COUNTER
GRAP2    CLI   0(WK6),BLANK             TEST CHARACTER
         BC    4,GRAP3                  INVALID GRAPIC - YES
         CLI   0(WK6),X'7F'             WITHIN SECTION
         BC    8+4,GRAP5                YES - TRANSLATE
         LA    WK7,GRAPT2-C'A'          TRANSLATE TABLE
         CLI   0(WK6),C'A'              NORMAL GRAPHICS
         BC    8+2,GRAP6                YES - TRANSLATE
GRAP3    MVI   0(WK3),C'.'              NO-SET AS INVALID
GRAP3B   LA    WK6,1(WK6)               INCR DATA POINTER
         CR    WK6,WK2                  STOP ADDR
         BC    8+2,GRAP8                DONE - YES EXIT
         LA    WK3,1(WK3)               INCR. BUFFER PTR
         BCT   WK5,GRAP2                CONTINUE WITH LINE
         BC    15,WRITEB                WRITE & RETURN ON LK2    S21995
         SPACE 1
GRAP5    LA    WK7,GRAPT1-BLANK         TRANSLATE TABLE ADDR
GRAP6    MVC   0(1,WK3),0(WK6)          SET IN BUFFER
         TR    0(1,WK3),0(WK7)          SET IN BUFFER
         BC    15,GRAP3B                CONTINE
         SPACE 1
GRAP8    C     LNKRG1,RETAD        TO SEE IF HAVE TO TRANS OP CDS M1149
         BC    8,WRITEB  YES - PRINT LINE AND RETURN ON LKRG1     M1149
         BAL   LNKRG1,WRITEB     NO - PRINT LINE AND RETURN HERE  M1149
         TM    CTLBTE,ENDMOD            TEXT FOR LAST TEXT RECORD
         BCR   15,LNKRG2                RETURN
         SPACE 1
WRITEB   LA    R1,AWRITEA              SET INDEX FOR WRITE       S21995
         LR    R14,LNKRG1              SET RETURN REG            S21995
         BR    R15                     BRANCH TO WRITE           S21995
         SPACE 2
***********************************************************************
* THIS SUBROUTINE OBTAINS THE TEXT TTR AND CONVERTS IT TO CCHHR
***********************************************************************
CCHNOTEA NOTE  LIB2                                              S21995
         L     R15,AIORTNS             RESET R15                 S21995
         ST    1,STCSECT                SAVE TTR                 S21995
         LR    0,1                      CONVERT TTR INPUT REG    S21995
         LA    14,X'1C'                 TTR CONV RTN OFFSET      S21995
         STM   8,13,TBUF+32             SAVE REGS                S21995
         LA    8,TBUF+32                GET ADDRESSIBILITY       S21995
         LA    2,MBBCCHHR               CONVERT STG ADDR.        S21995
         L     1,LIB2+44                DEB ADDRESS              S21995
         L     15,16                    CVT POINTER              S21995
         L     15,0(14,15)              CONVERT RTN ADDR         S21995
         BALR  14,15                    TO CONVERT TO CCHHR      S21995
         LM    8,13,0(8)                RESTORE REGISTERS        S21995
         L     R15,AIORTNS              RESET R15                S21995
         BCR   15,LNKRG1                RETURN                   S21995
         EJECT
***********************************************************************
AMASZCON CSECT
***********************************************************************
TEMPDBLW DC    D'0'                    .(ALIGNED DOUBLEWORD).  @ZA00409
RDAREA   DC    A(0)                     START OF DSECT
SIZE     DC    A(0)                     LENGTH OF RECORD
SCARG    DC    XL8'0'                   SEARCH ARGUMENT
TTRSAVE  DC    F'0'                       SAVE AREA FOR TTR      YM5532
IDSAVE   DC    A(0)                     SECONDARY SAVE FOR ALL DUMP
IDSAVE2  DC    A(0)                     SAVE AREA FOR ALL DUMP
STARTINC DC    A(0)                     ACCM1 OFFSET
BASE2    DC    A(0)                     ADDITIONAL OFFSET SUPPLIED
CSECTID  DC    A(0)                     CSECT IO INDEX
START    DC    A(0)                     TEXT START ADDRESS
LENGTH   DC    A(0)                     LENGTH OF TEXT
BASE     DC    A(0)                     CSECT BASE ADDRESS
STCSECT  DC    A(0)                     CSECT NOTE ADDRESS
AIORTNS  DC    V(AMASZIOR)              ADDR OF I/O SUBRTN CSECT S21995
ACHSUM   DC    A(CHSUM)      .ADDR CHECKSUM-STMT PROCESSOR.    @ZA17660
CON1     DC    A(TBUF-1)                INIT ADDR OF BUF
CON3     DC    A(DBUFEND)               CONST FOR LOOP CONTL.
OFFSET   DC    A(0)                     PATCH OFFSET FROM RECORD START
RETAD    DC    A(INSTR0)                                          M1149
CDBUFEND DC    A(CDBUF+72)              END OF BUFFER          @YA02260
ZERO     DC    2F'0'                                             Y02160
TEMP     DS    2F                      SAVEAREA FOR CSECT NAME   A42310
ADMP     DC    V(AMASZDMP)              ADDRESS OF DUMP CSECT    S21995
ACONT    DC    A(CONT)                 LIB2 EOD IN MAIN CSECT    S21995
AIOBASE  DC    A(IOBASE)               I/O CSECT BASE ADDRESS    S21995
AINSM2   DC    A(INSM2)                 ADDR OF GET SSI RTN      X01979
JFCBAD   DC    A(JFCBAREA)              TO RESET ADDR IN EXITLIST M1733
AWTORTN  DC    A(WTORTN)               .ADDR 'WTO' INTERFACE.  @ZA00409
ACCISCAN DC    A(CCISCAN)    .ADDR INIT-CARD-SCAN SUBROUTINE.  @ZA17658
IDRNRECS DC    F'0'                    .CURR # IDR RECORDS.    @ZA00409
IDRNENTS DC    F'0'                    .CURR # IDR ENTRIES.    @ZA00409
IDRMENTS DC    F'0'                    .MAX # IDR ENTRIES.     @ZA00409
IDRMENTR DC    F'19'                   .MAX ENTS PER RECD.     @ZA00409
         DS    0F
BYTE2MSK DC    X'00000001'             MASK FOR BYTE2 9C 9E OPCD S21995
CLER     DC    X'0000FFFF'
MBBCCHHR DC    XL8'0'                   SEEK ADDRESS
MSK      DC    X'0C40'                  CSW STATUS
ONE      DC    H'1'                                               M1148
THREE    DC    H'3'                     HALFWORD COUNTER
FIVE     DC    H'5'                     MIDDLE OF PAGE COUNTER
EIGHT    DC    H'8'                                            @ZA17660
TW2      DC    H'22'
THIRTY   DC    H'30'
TWENTY4  DC    H'24'                                             Y02160
THIRTY2  DC    H'32'
FOURTY   DC    H'40'
SEVEN    DC    AL2(7)                   CONSTANT
TWOHIGH  DC    X'0042'                  HIGHEST TWO CHAR INDEX
TWOBYTOP DC    X'00FF'                 TWO BYTE OP CODE INDICATOR M1148
DESCR    DC    X'0800'                 DESCR CODE 5 FOR WTORTN
RTCD     DC    X'4000'             ROUTING CODE 2 FOR WTORTN
IOMSGLNG DC    H'64'               LENGTH OF I/O ERROR MSGS
ERRMGLNG DC    H'45'               LENGTH OF OPERATION ERROR MSGS
TITLE1   DC    CL9'**CCHHR-'
CCHHRP   DC    XL10'0'
         DC    CL18'   RECORD LENGTH- '
RCLGTH   DC    XL4'0'
         DC    CL9' '
         DC    CL15'  MEMBER NAME  '
MEMNAME  DC    XL8'0'
         DC    CL14'  CSECT NAME  '
CSECT    DC    XL8'0'
         DC    CL5' '
BLANKS   DC    2CL24' '
IDRSIZE  DC    H'251'                  LENGTH OF SPZAP IDR REC   S21016
IDRDATA  DS    2F                      IDRDATA CARD SAVE AREA    S21016
IDRTTR   DS    F                       IDR REC TTR               S21016
IDRFSEEK DS    2F                      IDR REC MBBCCHHR          S21016
COUNT    DC    XL8'00'            FOR READING COUNT              YM5534
TEMPRG3  DS    F                        TEMPORARY STORAGE FOR RG3X01979
TEMPRG5  DS    F                        TEMPORARY STORAGE FOR RG5X01979
MSGOFSET DC    F'0'                     STORAGE FOR UNPATCH MESSAGE
*                                         OFFSET                 X01979
CON2     DC    18XL4'1F1F1F1F'          MASK FORTRAN
CTLBTE   DC    X'40'         CONTROL  BYTE
CTLBTE2  DC    X'00'                    MODIFY MEMBER BYTE
CTLBTE3  DC    X'00'
PARMBITS DC    X'00'                    .PARM/PARAM BITS.      @ZA06024
QIGNIDRF EQU   X'80'                    .1 = IGNORE FULL IDR.  @ZA06024
QPARMERR EQU   X'01'                    .1 = PARAM-VAL ERROR.  @ZA06024
CONSW    DC    X'00'
CONSW2   DC    X'00'         .X'FF' IF MSG SYSPRINT AND WTO.   @ZA17659
DMPSW    DC    X'00'         .X'FF' TO INHIBIT WTO DUR DUMPS.  @ZA26077
RSVSW    DC    X'00'
SCANSW   DC    X'00'               SW SET IN SCAN MBR/CSECT NAME A48705
* RETURN-CODE STORAGE AND CONSTANTS.                           @ZA06023
RETCODE  DC    X'00'                    .CODE FOR LATEST EVENT @ZA06023
RETCOD00 DC    X'00'                    .(NO ERROR OR WARNING) @ZA06023
RETCOD04 DC    X'04'                    .(WARNING ONLY).       @ZA06023
RETCOD08 DC    X'08'                    .(SPZAP-INPUT ERROR).  @ZA06023
RETCOD12 DC    X'0C'                    .(JCL OR PARAM ERROR). @ZA06023
RETCOD16 DC    X'10'                    .(PERM I/O ERROR).     @ZA06023
LASTRET  DC    X'00'                    STEP RETURN CODE
*  RESERVE PARMLIST                                             A41228*
UCBAD    DS    1F
QNAME    DC    CL8'SYSVTOC '       MAJOR NAME FOR RESERVE        YM5147
RNAME    DS    6C                  MINOR NAME FOR RESERVE        YM5147
         DS    0F
MAJOR    DC    CL8'SPZAPLIB'
JFCBAREA DS    176C                44 BYTE DSNAME USED FOR MINOR
DBUF     DS    CL36
DBUFEND  DS    0C                       END OF DATA BUFFER
         DS    CL36                     PAD
         DS    0F
LIST     DC    H'01'                    NO OF ENTRIES
         DC    H'70'                    MAX LENGTH OF DIR ENTRIES
TBUF     DS    CL72                     TEMP STG OF DATA
         DS    CL7                      OVERLAP AREA FROM MOVE
WTOECB   DC    F'0'
LNKSAVE  DC    F'0'
REGSAVE  DS    18F
DMPSAVE  DS    16F                     DUMP CSECT SAVE AREA      S21995
XFERSAVE DS    16F                     I/O CSECT SAVEAREA        S21995
TEMPSAV  DC    6F'0'               TEMPORARY SAVE AREA           S21995
ADDRSV   DC    F'0'                    TIOT ADDR SAVE AREA       A38645
DEVBUF   DC    5F'0'                   .DATA FROM 'DEVTYPE'.   @ZA02777
TRKSIZE  EQU   DEVBUF+12               .TRACKSIZE.             @ZA02777
LNKSAVE2 DC    F'0'                    TEMP SAVE AREA FOR LNKRG1 A38645
LNKSAVE3 DC    F'0'                    TEMP SAVE AREA FOR LNKRG1 A38645
SVLNGTH  DC    F'0'                    LENGTH OF SCAN FIELD       M0509
CHSUMACC DC    F'0'          .CHECKSUM ACCUMULATOR.            @ZA17660
CHSUMSLL DC    H'0'          .VAR SHIFT AMT FOR CHECKSUM.      @ZA17660
         DS    0F
PREFIX   DC    H'0'                PREFIX FOR WTO BUFFER CDBUF
         DC    X'8000'             ROUTER AND DESCR CODES FOLLOW
         DC    C'1'                     ASA CONTROL CHAR
CDBUF    DC    CL32'AMASPZAP  INSPECTS, MODIFIES, AN'            X01979
         DC    CL32'D DUMPS CSECTS OR SPECIFIC DATA '            X01979
         DC    CL32'RECORDS ON DIRECT ACCESS STORAGE'            X01979
         DC    CL24'.'                                           X01979
         DS    5C
FIVECHAR DC    X'00D0'                 OFFSET FOR 5 CHAR OPS      M1148
B2TAB    DC    X'0000D1D29A9BA7D4A8A9B2B100A50000'               YM5533
         DC    X'ACAFAEA6'             B2XX MNEMONIC OFFSETS     YM5533
*              DXR INSTRUCTION IS VALIDATED AT LABEL 'DXRCK'
TAB9C    DC    X'83AB'                 9CXX MNEMONIC OFFSETS      M1148
TAB9D    DC    X'84D3'                 9DXX MNEMONIC OFFSETS     YM5533
TAB9E    DC    X'85A1'                 9EXX MNEMONIC OFFSETS      M1148
MAXB2    DC    X'13'                   NO OF ENTRIES IN 'B2TAB'  X01979
TRANTBL  DC    X'00FAFBFCFDFEFF'
         DS    9C
TRANTBL2 DC    C'0123456789ABCDEF'
         DS    0H
****  INSTRUCTION MNEMONICS - TWO CHARACTERS
TWOC     DC    C'  NRORXRLRCRARSRMRDRLAICEXBCLHCH'
         DC    C'AHSHMHSTN CLO X L C A S M D ALSL'
         DC    C'LDCDADSDMDDDAWSWLECEAESEMEDEAUSU'
         DC    C'TMTSNIOIXILMNCOCXCTREDCPAPSPMPDP'
         DC    C'MCCS'                                           YM5533
****  INSTRUCTION MNEMONICS - FOUR CHARACTERS
FOURC    DC    C'SPM BALRBCTRBCR SSK ISK SVC LPR '
         DC    C'LNR LTR LCR CLR ALR SLR LPDRLNDR'
         DC    C'LTDRLCDRHDR LDR CDR ADR SDR MDR '                M1148
         DC    C'DDR AWR SWR LPERLNERLTERLCERHER '                M1148
         DC    C'LER CER AER SER MER DER AUR SUR '
         DC    C'STH STC BAL BCT CVD CVB STD STE '
         DC    C'SSM LPSWWRD RDD BXH BXLESRL SLL '
         DC    C'SRA SLA SRDLSLDLSRDASLDASTM MVI '
         DC    C'CLI SIO TIO HIO TCH MVN MVC MVZ '
         DC    C'CLC TRT EDMKMVO PACKUNPKZAP MVCL'                M1148
         DC    C'CLCLLRDRMXR MXDRLRERAXR SXR MXD '                M1148
         DC    C'SCK STCKLCTLCLM STCMICM SRP HDV '                M1148
         DC    C'BAS BASRLRA PTLBRRB SCKCSPT STPT'               X01979
         DC    C'DXR SIOFSPX SIGPSTAPSTPXCDS IPK '               YM5533
         DC    C'SPKA'                                           YM5533
****  INSTRUCTION MNEMONICS - FIVE CHARACTERS
*****    BLANK SLOT IN FIVEC TABLE MAY BE REUSED
FIVEC    DC    C'STCTLSTIDPSTIDCCLRIOSTCKCSTNSMSTOSM'            YM5533
****  INDEXES FOR MNEMONIC TABLES
*        A. 00 IS BLANK MNEMONIC
*        B. 01 TO 40 IS TWO CHARACTER
*        C. 42 TO CF IS FOUR CHARACTER
*        D. D0 TO FE IS FIVE CHARACTER
*        E. FF INDICATES TWO BYTE OP CODE
TRAN2    DC    X'00000000424344454647480000A39192'               X01979
         DC    X'494A4B4C014D02030405060708094E4F'                M1148
         DC    X'505152535493949555565758595A5B5C'                M1148
         DC    X'5D5E5F60619697986263646566676869'                M1148
         DC    X'6A0A6B0B0C6C6D0D0E0F101112A26E6F'               X01979
         DC    X'130000001415161718191A1B1C1D1E1F'
         DC    X'70000000000000992021222324252627'                M1148
         DC    X'710000000000000028292A2B2C2D2E2F'
         DC    X'720073007475767778797A7B7C7D7E7F'
         DC    X'803081313282333435000000FFFFFF86'               YM5533
         DC    X'000000000000000000000000D5D6AD40'               YM5533
         DC    X'00A4FF000000D09C000041B0009D9E9F'               YM5533
         DC    X'00000000000000000000000000000000'
         DC    X'00878889368A373800000000398B3A8C'
         DC    X'00000000000000000000000000000000'
         DC    X'A08D8E8F00000000903B3C3D3E3F0000'                M1148
GRAPT1   DC    X'404B4B4B4B4B4B4B4B4B4A4B4C4D4E4F'
         DC    X'504B4B4B4B4B4B4B4B4B5A5B5C5D5E5F'
         DC    X'60614B4B4B4B4B4B4B4B4B6B6C6D6E6F'
         DC    X'4B4B4B4B4B4B4B4B4B4B7A7B7C7D7E7F'
GRAPT2   DC    C'ABCDEFGHI.......JKLMNOPQR'
         DC    C'........STUVWXYZ......012'
         DC    C'3456789.......'
*                                                              @ZA00409
CARDSAVE DC    CL80' '        .SAVE CARD IMAGE OVER INSMDFY.   @ZA00409
         SPACE 2
***********************************************************************
*                       KEYWORD CONSTANTS
         SPACE 1
ALL      DC    CL4'ALL '     .(DUMP/ABSDUMP) ALL (CSECTS/MEMS) @ZA19021
END      DC    CL3'END'                 END CONSOLE INPUT
REP      DC    CL3'REP'                 REPLACE KEY WORD
SLAST    DC    CL3'/*'                  END OF INPUT KEY WORD
BASEO    DC    CL4'BASE'                BASE KEY WORD
DUMP     DC    CL4'DUMP'                DUMP KEY WORD
NAME     DC    CL4'NAME'                NAME KEY WORD
CCHHR    DC    CL5'CCHHR'               ABSOLUTE UPDATE KEY WORD
SSI      DC    CL6'SETSSI'              SSI KEY WORD
VERIFY   DC    CL6'VERIFY'              VERIFY KEY WORD
ABSDUMP  DC    CL7'ABSDUMP'             ABSOLUTE DUMP KEY WORD
CONSOLE  DC    CL7'CONSOLE'             CONSOLE KEY WORD
CHECKSUM DC    CL8'CHECKSUM'                                   @ZA17660
F4DSCB   DC    CL12'FORMAT4.DSCB'       VTOC KEY WORD
DSCBDS   DC    44XL1'04'                VTOC DSNAME
F4BLKSZ  DC    H'144'                   NON-0 BLKSIZE            XM5390
SYSLIB   DC    CL8'SYSLIB'                                       A38645
IDRDFLT  DC    C'NO IDENT'             DEFAULT IDR DATA          S21016
IDRDATAC DC    C'IDRDATA'              IDRDATA KEYWORD           S21016
* PARAMETER TO OVERRIDE IDR-FULL INHIBITION ON CSECT 'REP'S.   @ZA06024
PARM0STR DC    C'IGNIDRFULL'            .(CODED-VALUE STRING). @ZA06024
PARM0LEN DC    H'10'                    .(LENGTH)              @ZA06024
ZPRM0LEN EQU   10                       .(LENGTH EQUATE).      @ZA06024
         SPACE 2
***********************************************************************
*                       MESSAGES
         SPACE 1
DSMSG    DC    CL40'AMA107I DS AREA NOT INCLUDED IN TEXT'
INERR    DC    CL40'AMA108I SYSIN SPECIFICATION ERROR'           S21995
DGERROR  DC    CL40'AMA109I ERROR - ODD NO. DIGITS - IGNORED'
SSIERR   DC    CL40'AMA110I NO DIRECTORY SSI- SETSSI IGNORED'
IGNORSSI DC    CL40'AMA111I PREVIOUS ERROR - SETSSI IGNORED'
NONAME   DC    CL40'AMA112I MEMBER NOT FOUND- SETSSI IGNORED'
DMPCMP   DC    CL40'AMA113I COMPLETED DUMP REQUIREMENTS'
NOVTOC   DC    CL40'AMA114I PERMISSION TO UPDATE VTOC DENIED'
INPUTERR DC    CL26'AMA115I SYSIN I/O ERROR  '                   S21995
NOIDR    DC    CL40'AMA119I NO IDR FOR MODULE'                   S21016
NOSPACE  DC    CL8'AMA120I '          .'NO IDR SPACE' MESSAGE. @ZA00409
NOSPACE1 DC    CL32'XXXXXXXX NO IDR SPACE - RE-LINK '          @ZA00409
MSGIDRUD DC    CL28'AMA125I XXXXXXXX IDR COUNT ='  .IDR        @ZA00409
IDRNENTZ DC    CL8' NN (MAX'                       . UPDATE    @ZA00409
IDRMENTZ DC    CL4'=MM)'                           . MESSAGE.  @ZA00409
IDRFULL  DC    CL40'AMA126I XXXXXXXX IDR(S) FILLED - RE-LINK'  @ZA00409
UNPATMSG DC    CL20'AMA122I OLD DATA WAS'                        X01979
BLKSZERR DC    CL40'AMA124I INVALID SYSLIB DCB BLOCKSIZE'        SM1465
MSGUDINH DC    CL40'AMA127I UPDATES INHIBITED (NO OVERRIDE) '  @ZA06024
MSGUDACC DC    CL40'AMA128I UPDATES ENABLED BY OVERRIDE PARM'  @ZA06024
MSGEPARM DC    CL40'AMA129I INVALID PARAMETER SPECIFICATION '  @ZA06024
MSGNOLIB DC    CL40'AMA130I SYSLIB DATA SET NOT OPENED      '  @ZA06023
* ADCONS FOR MESSAGES STORED BEYOND AMASZCON ADDRESSABILITY.   @ZA09673
AMSG100I DC    A(COMPMSG)    .(SPZAP COMPLETION).              @ZA17658
AMSG101I DC    A(LIBERR)     .(SYSLIB I/O ERROR).              @ZA17658
AMSG102I DC    A(DDERROR)    .(SYSLIB DD ERROR).               @ZA17658
AMSG103I DC    A(NOCSMSG)    .(CSECT NOT FOUND).               @ZA17658
AMSG104I DC    A(VERYERR)    .(VERIFY REJECT).                 @ZA17658
AMSG105I DC    A(IGNOREM)    .(INV CARD OR NO-GO SET).         @ZA17658
AMSG106I DC    A(PATCHERR)             .DATA OUT OF RANGE.     @ZA09679
AMSG131I DC    A(MSGERECD) 'XXXXXXXX INVALID RECORD-TYPE ID.'  @ZA09673
         SPACE 2
***********************************************************************
INPUT    DCB   DDNAME=SYSIN,DSORG=PS,MACRF=(GM),RECFM=FB,LRECL=80,     X
               EODAD=EODC,SYNAD=SYND,EXLST=XITLIST               S21995
*** OUTPUT DCB HAS BEEN CHANGED TO QSAM                          Y02160
OUTPUT   DCB   DSORG=PS,MACRF=(PM),DDNAME=SYSPRINT,RECFM=FBA,    Y02160X
               LRECL=121,SYNAD=SYNOUT,EXLST=XITLIST1             Y02160
LIB      DCB   DDNAME=SYSLIB,MACRF=(E),EXLST=EXLIST              S21995
LIB2     DCB   DSORG=PO,MACRF=(R),DDNAME=SYSLIB,EODAD=EOD1,            X
               RECFM=U,BLKSIZE=0,SYNAD=ABDMP4,EXLST=EXLIST2      S21995
OBLIST   CAMLST  SEARCH,0,0,0           CONTAINS PTRS TO INFO    S21995
EXLIST   DC    X'87'                    RD JFCB SIST             S21995
         DC     AL3(JFCBAREA)                                    S21995
EXLIST2  DC    X'05'               OPEN EXIT LIST                A49131
         DC    AL3(OPTCDCK)        SUPPRESS OPTCD                A49131
         DC    X'87'               READ JFCB EXIT                A49131
JFCB     DC    AL3(JFCBAREA)       AREA FOR JFCB                  M2820
XITLIST  DS    0F                                                S21995
         DC    X'85'              OPEN EXITLST.                  S21995
         DC    AL3(SETBLKSI)      CHK BLKSIZE.                   S21995
XITLIST1 DS    0F                                                Y02160
         DC    X'85'              SYSPRINT OPEN EXITLIST         Y02160
         DC    AL3(STBLKSI1)      CHECK BLOCK SIZE               Y02160
***********************************************************************
*          **** XDAP CONTROL BLOCK  ****
***********************************************************************
         XDAP  DECB4,RI,LIB,,,,MBBCCHHR,MF=L                     S21995
         SPACE 1                                                 S21995
SCHARG   EQU   DECB4+4+X'20'            SEARCH ARGUMENT - CCHHR  S21995
IOCCW1   EQU   DECB4+4+X'28'            FIRST EXECUTED CCW       S21995
IOCCW3   EQU   DECB4+4+X'38'            UPDATE CCW OR TIC        S21995
         SPACE 1
MTRDCNT  EQU   X'92'                    MULTITRACK READ COUNT    S21995
SKEYGTE  EQU   X'E9'                    SEARCH KEY GT. OR EQUAL  S21995
TIC      EQU   X'08'                    TIC OP CODE              S21995
RDDATA   EQU   X'06'                    READ DATA OP CODE        S21995
WRDATA   EQU   X'05'                    WRITE DATA               S21995
         SPACE 1
* THESE CCW'S EXTEND THE XDAP EXCP CHANNEL PROGRAM FOR DIRECTORY UPDATE
*        THIS SEQUENCE OF CCW'S ARE TIC TO BY PLACING IOCCW6 AT IOCCW3
IOCCW4   CCW   MTRDCNT,TBUF+1,X'60',8   READ COUNT OF RECORD     S21995
IOCCW5   CCW   SKEYGTE,MEMNAME,X'40',8  SEARCH ON KEY            S21995
IOCCW6   CCW   TIC,IOCCW4,0,0           BACK TO COUNT IF LT      S21995
IOCCW7   CCW   RDDATA,0,X'20',256       READ IF CORRECT ENTRY    S21995
         SPACE 1
*             THIS CCW IS EXECUTED AT LOCATION IOCCW3
IOCCW3B  CCW   WRDATA,0,X'20',256       UPDATE DIRECTORY-CMD     S21995
         READ  DECB5,SF,LIB2,0,0,,,,MF=L                         S21995
         EJECT
* ADDRESSABILITY INTERFACES.                                   @ZM40094
WRITE0   LA    R1,AWRITE0A             .OFFSET FOR 'WRITE0A'.  @ZM40094
         B     WRITE2                                          @ZM40094
WRITE3   MVC   CONSW2(1),CONSW         .(FOR 'OLD DATA' MSG).  @ZA17659
WRITE    LA    R1,AWRITEA              .OFFSET FOR 'WRITEA'.   @ZM40094
WRITE2   LR    R14,LNKRG1              .SET RETURN REG.        @ZM40094
         BR    R15                     .TO 'IOR' CSECT.        @ZM40094
DUMP1    LA    R1,ADMP01                                       @ZM40094
         L     R15,ADMP                .ADDR 'DMP' CSECT.      @ZM40094
         LR    R14,LNKRG2                                      @ZM40094
         BR    R15                     .TO 'DMP' CSECT.        @ZM40094
         SPACE 1                                               @ZM40094
* (AFTER DUMP COMPLETION) TERMINATE IF RETCODE GE 12.          @ZA09673
DUMP09Z  CLC   RETCODE(1),RETCOD12     .IF RETCODE LE 8,       @ZA09673
         BCR   4,LNKRG3                . GET NEXT INPUT STMT.  @ZA09673
         L     R15,AIORTNS             .ELSE                   @ZA09673
         LA    R1,ACLOSE5              . SET UP                @ZA09673
         BR    R15                     . SPZAP TERMINATION.    @ZA09673
*                                                              @ZA09673
* SET UP COMMAND TO DUMP CSECT.                                @ZA09679
SETDUMP  MVC   CDBUF+0(4),DUMP         .INSERT KEYWORD         @ZA09679
         MVC   CDBUF+4(19),BLANKS      . AND BLANKS.           @ZA09679
         MVC   CDBUF+5(8),MEMNAME      .INSERT MEMBER NAME     @ZA09679
         MVC   CDBUF+14(8),CSECT       . AND CSECT NAME.       @ZA09679
         USING ZAPBASE2,BASREG                                 @ZA09679
         BAL   LNKRG1,SCANKEY          .SET REGISTERS AND      @ZA09679
         L     BASREG3,RDAREA          .ADDR SYSLIB BUFFER.    @ZA09679
         XC    STARTINC(4),STARTINC    .RESET IMBEDDED OFFSET. @ZA09679
         B     DUMP01A                 .PROCESS 'DUMP' STMT.   @ZA09679
         DROP  BASREG                                          @ZA09679
*                                                              @ZA09679
* INTERFACE WITH CHECKSUM-STATEMENT ROUTINE.                   @ZA17660
CHSUMRTN L     BASREG3,ACHSUM                                  @ZA17660
         BR    BASREG3                                         @ZA17660
*                                                              @ZA17660
* PATCH AREA.                                                  @ZA09673
         SPACE 1                                               @ZA09673
PTCHA    DC    F'0'                    .BEGIN PATCH AREA.      @ZA09673
         ORG   AMASZCON+X'0FFF'                                @ZA09673
         DC    X'00'                   .END PATCH AREA.        @ZA09673
         SPACE 1                                               @ZA09673
*** END OF AMASZCON ADDRESSABILITY ***                         @ZA09673
         SPACE 1                                               @ZA09673
* FOLLOWING MESSAGES BEYOND AMASZCON ADDRESSABILITY.           @ZA09673
         SPACE 1                                               @ZA09673
COMPMSG  DC    CL40'AMA100I AMASPZAP PROCESSING COMPLETED'       S21995
LIBERR   DC    CL26'AMA101I SYSLIB I/O ERROR  '
DDERROR  DC    CL40'AMA102I SYSLIB DD SPECIFICATION ERROR'
NOCSMSG  DC    CL40'AMA103I CSECT ABSENT - ALL CSECTS FOLLOW'
VERYERR  DC    CL40'AMA104I VERIFY REJECT - SET NO GO SWITCH'
IGNOREM  DC    CL40'AMA105I INVALID CARD OR NO GO SWITCH SET'
PATCHERR DC    CL40'AMA106I PATCH OVERLAPS - CHECK DUMP'       @ZA09679
MSGERECD DC    CL40'AMA131I XXXXXXXX INVALID RECORD-TYPE ID.'  @ZA09673
         EJECT
AMASZIOR CSECT
         USING AMASZCON,BASREG2                                  S21995
         STM   0,15,XFERSAVE           SAVE MAIN PROG REGS       S21995
         BALR  BASREG,0                SET BASE REG              S21995
         USING *,BASREG                                          S21995
         LA    R13,REGSAVE             SET REG SAVE AREA         S21995
IOBASE   LA    LNKRG1,GOBACK           SET LINKAGE TO RETURN     S21995
         LA    LNKRG2,GOBACK2A          SET LINKAGE TO RETURN    X01979
         B     VECTOR(R1)              BRANCH INTO BRANCH TABLE  S21995
VECTOR   B     RDCARD2                                           S21995
         B     CLOSE1                                            S21995
         B     WRITEA                                            S21995
         B     WRITE0A                                           S21995
         B     DIRREAD                                           S21995
         B     DIRWRITE                                          S21995
         B     RDDSK2                                            S21995
         B     OPENLIB                                           S21995
         B     RDDISK                                            S21995
         B     WRDISK                                            S21995
         B     WTOA                                              S21995
         B     CLOSE2                                            S21995
         B     EOD                                               S21995
         B     INSMDFY                                           X01979
         B     INSM1A                                            X01979
         B     CLOSE4                   .TO PARM-ERR EXIT.     @ZA06024
         B     CLOSE5                  .TO INVAL-RECD EXIT.    @ZA09673
GOBACK   LM    0,15,XFERSAVE           RESTORE REGS              S21995
         BR    R14                     EXIT                      S21995
GOBACK2A L     BASREG,XFERSAVE+BASREG*4  RELOAD BASE REGISTER
         LM    R13,R15,XFERSAVE+52      RESET RETURN AND ENTRY REGS
         BR    R14                      RETURN WITHOUT DESTROYING REGS
***********************************************************************
* THIS READ USES QSAM TO ACCESS THE CARD READER.
***********************************************************************
RDCARD2  GET   INPUT,CDBUF
         BCR   15,LNKRG1
         SPACE 2
***********************************************************************
*   THIS WRITE SUBROUTINE PRINTS THE INPUT CARD OR A MESSAGE TO THE PRI
*******************
WRITE0A  MVC   CDBUF(40),0(RG5)    MOVE IN MESSAGE               S21995
WRITE1   MVC   CDBUF+40(40),BLANKS FILL WITH BLANKS
         MVC   CDBUF+80(40),BLANKS      RESET REST WITH BLANK    YM1470
         TM    DMPSW,X'FF'             .IF LINE IS FOR DUMP,   @ZA26077
         BO    WRITEA                  . DISALLOW WTO.         @ZA26077
         TM    CONSW,X'FF'             .Q CONSOLE INPUT.       @ZA17659
         BZ    WRITEA                  .B IF NO.               @ZA17659
         MVI   CONSW2,X'FF'            .ELSE SET WTO INDIC.    @ZA17659
* ENTRY POINT IF TEXT ALREADY IN 'CDBUF'.                      @ZA17659
WRITEA   PUT   OUTPUT,CDBUF-1                                    Y02160
         PRTOV OUTPUT,12                CHECK FOR END OF PAGE
         MVC   CDBUF+80(40),BLANKS      RESET REST WITH BLANK
         TM    CONSW2,X'FF'            .Q MESSAGE TO CONSOLE.  @ZA17659
         BCR   8,LNKRG1                .B IF NO.               @ZA17659
         MVI   CONSW2,X'00'            .ELSE RESET 'WTO',      @ZA17659
         L     WK7,AWTORTN             . FIND 'WTORTN',        @ZA17659
         BR    WK7                     . AND ENTER IT.         @ZA17659
         SPACE 2
***********************************************************************
* THIS SUBROUTINE USES BSAM TO SEQ RETRIEVE RECORDS
*******************
RDDSK2   ST    BASREG3,DECB5+12         SET READ IN AREA
         MVC   DECB5+6(2),SIZE+2        SET MAX RECORD
         READ  DECB5,SF,,,,,,,MF=E                               S21995
         CHECK DECB5
         BCR   15,LNKRG1                SUBROUTINE RETURN
***********************************************************************
*        END OF DATA ROUTINE FOR LIB2
***********************************************************************
EOD1     EQU   *                                                 YM5146
         LM    0,15,DMPSAVE            RESTORE REGS              S21995
* REG 15 WILL NOW POINT TO THE CONTINUATION SPOT, EITHER         YM5146
* LABEL  'CONT'  OR LABEL  'NOCSECT'                             YM5146
         BR    R15                                               S21995
         SPACE 1
*  THIS IS THE SYNAD ROUTINE FOR THE LIB2 DCB
ABDMP4   STM   RG0,RG2,TEMPSAV     SAVE PARM REGS
         ST    R14,TEMPSAV+12      SAVE RETIRN REGISTER
         ST    LNKRG1,TEMPSAV+16   SAVE LINK REGISTER
         SYNADAF ACSMETH=BPAM
         LR    RG2,WK7             SAVE PTR TO SYNADAF WRKAREA
         L     LNKRG1,AMSG101I         .SELECT MESSAGE AND     @ZA17658
         MVC   CDBUF(26),0(LNKRG1)     . COPY INTO BUFFER.     @ZA17658
         BAL   LNKRG1,IOMSG        GOTO BLDL AND PRNT ERROR MSG
         L     LNKRG1,TEMPSAV+16   RESTORE LINK REGISTER
         LR    WK7,RG2             RESTORE PARM REGISTER 1
         SYNADRLS                  RELEASE SYNADAF WRKAREA
         L     R14,TEMPSAV+12      RESTORE RETURN REGISTER
         LM    RG0,RG2,TEMPSAV     RESTORE SYNAD PARM REGS
         B     CLOSE3                  GET OUT
IOMSG    MVC   CDBUF+26(4),68(RG2)  MOVE UNIT TO MESSAGE
         MVC   CDBUF+30(23),84(RG2)  MOVE IN ERROR DESCRIPTION
         MVC   CDBUF+53(6),122(RG2)  MOVE IN ACSMETH
         MVC   CDBUF+59(21),BLANKS  PAD REMAINDER OF BUFFER
         MVC   CDBUF+80(40),BLANKS
         PUT   OUTPUT,CDBUF-1                                    Y02160
         PRTOV OUTPUT,12
         TM    CONSW,X'FF'         SHOULD WTO BE ISSUED?
         BCR   14,LNKRG1           NO - RETURN TO SYNAD ROUTINE
         MVC   PREFIX(2),IOMSGLNG  MOVE IN WTO MSG LENGTH
         MVC   CDBUF+59(4),DESCR   MOVE IN DESCR & ROUTE CODES
         LA    WK7,PREFIX
         WTO   MF=(E,(1))
         BCR   15,LNKRG1           RETURN TO SYNAD THET CALLED
**********************************************************************
*  THIS IS THE SYNAD ROUTINE FOR SYSPRINT
**********************************************************************
SYNOUT   SYNADAF ACSMETH=BSAM                                    A45017
         LR    RG2,WK7            SAVE REGISTER 1                A45017
         MVC   WTOOUT+8+27(4),68(RG2)  MOVE UNIT                 A45017
         MVC   WTOOUT+8+31(23),84(RG2) MOVE ERROR DESCRIPTION    A45017
         MVC   WTOOUT+8+54(6),122(RG2) MOVE ACSMETH              A45017
WTOOUT   WTO   'AMA123I SYSPRINT I/O ERROR UUUUDDDDDDDDDDDDDDDDDDDDDDDAX
               AAAAA',ROUTCDE=(2,11),DESC=7                      A45017
         LR    WK7,RG2             RESTORE REGISTER 1            A45017
         SYNADRLS                                                A45017
         B     CLOSE3              CLOSE FILES AND EXIT          A45017
         SPACE 2
*******************
*   THIS WRITE USES XDAP TO UPDATE A SPECIFIC RECORD FOR THE DISK
*******************
WRDISK   SR    R15,R15              PREPARE R15 FOR 'R'          YM5534
         IC    R15,MBBCCHHR+7      VALUE OF MBBCCHHR             YM5534
         SH    R15,ONE             DECREMENT TO PREV. CHR        YM5534
         STC   R15,MBBCCHHR+7      STORE PREV. CCHHR             YM5534
         XDAP  DECB4,RI,LIB,COUNT,8,,MBBCCHHR,MF=E  RD. COUNT    YM5534
         SPACE 1
***********************************************************************
*                                                                     *
*   NOTE- THE FOLLOWING 3 INSTRUCTIONS ARE DEPENDENT ON THE EXPANSION *
*       OF THE XDAP MACRO.  THE OPCODE OF CCW 3 IS CHANGED FROM       *
*       READ KEY,DATA TO READ COUNT,KEY,DATA.                         *
*                                                                     *
***********************************************************************
         SPACE 1
         ORG   *-13               INSERT RD COUNT INTO IOB       YM5534
         DC    XL1'1E'            READ COUNT OPCODE              YM5534
         ORG
         WAIT  1,ECB=DECB4                                       YM5534
         IC    R15,MBBCCHHR+7      VALUE OF MBBCCHHR             YM5534
         AH    R15,ONE             INCREMEMENT TO PRES. CCHHR    YM5534
         STC   R15,MBBCCHHR+7      RESTORE PRES. CCHHR           YM5534
         SR    R15,R15              PREPARE R15 FOR 'COUNT'      YM5534
         IC    R15,COUNT+5         PUT KEYLENG INTO R15          YM5534
         L     RG5,COUNT+4             .COUNT IN LOW HALFWORD. @ZA09683
         N     RG5,CLER                .CLEAR HIGH HALFWORD.   @ZA09683
         AR    R15,RG5                 .ADD TO KEY.            @ZA09683
         L     R14,SIZE                .BUFFER SIZE.           @ZA09683
         CR    R14,R15              COMPARE BLOCKSIZE AND KEY    YM5534
*                                   LENGTH IN DCB TO THAT JUST   YM5534
*                                   READ                         YM5534
         L     R15,AIORTNS        INIT R15                       YM5534
         LA    R1,ACLOSE2         INIT BNCH TABLE ENTRY          YM5534
         LA    RG5,BLKSZERR       ERROR MSG                      YM5534
         BCR   4,R15              EXIT IF SZ GRTR THAN DCB INFO  YM5534
         L     R15,SIZE                .BUFFER SIZE.           @ZA09683
         SPACE 1
***********************************************************************
*                                                                     *
*   NOTE- THE FOLLOWING INSTRUCTION IS DEPENDENT ON THE EXPANSION     *
*       OF THE XDAP MACRO.  THE FLAGS FIELD OF CCW3 IS MODIFIED TO    *
*       SUPPRESS INCORRECT LENGTH INDICATION.                         *
*                                                                     *
***********************************************************************
         SPACE 1
         OI    WRDISK1+CMD,X'20'       SET OFF WLR               S21995
WRDISK1  XDAP  DECB4,WI,LIB,(BASREG3),(15),,MBBCCHHR,MF=E        S21995
         WAIT  1,ECB=DECB4
         BC    15,ERRTST
         SPACE 1
*******************
*   THIS READ USES XDAP TO GET A SPECIFIC RECORD FROM THE DISK
*******************
RDDISK   L     R15,SIZE                .BUFFER SIZE.           @ZA09683
         XDAP  DECB4,RI,LIB,(BASREG3),(15),,MBBCCHHR,MF=E
         WAIT  1,ECB=DECB4
ERRTST   TM    DECB4,X'20'              CHECK ECB PERMANENT
         BCR   1,LNKRG1                 BIT SET-OKAY
         CLI   DECB4,X'41'              TEST TYPE ERROR
         BC    7,CLOSE2A                NOT NORMAL-CLOSE
         CLC   DECB4+X'10'(2),MSK       WRONG LENGTH RECORD
         BCR   8,LNKRG1                 YES-OK
CLOSE2A  STM   RG0,RG2,TEMPSAV                                   S21995
         ST    LNKRG1,TEMPSAV+16   SAVE LINK REGISTER
         LA    WK7,DECB4+4         GET IOB ADDRESS
         SYNADAF ACSMETH=EXCP
         LR    RG2,WK7             SAVE ADDR OF SYNADAF WRKAREAA
         L     LNKRG1,AMSG101I         .SELECT MESSAGE AND     @ZA17658
         MVC   CDBUF(26),0(LNKRG1)     . COPY INTO BUFFER.     @ZA17658
         BAL   LNKRG1,IOMSG        GOTO BLDL AND PRNT ERROR MSG
         SYNADRLS                  RELEASE SYNADAF WRKAREA
         LM    RG0,RG2,TEMPSAV     RESTORE REGISTERS
         L     LNKRG1,TEMPSAV+16
         MVC   RETCODE(1),RETCOD16     .INDIC PERM-I/O ERROR.  @ZA06023
         OI    CTLBTE,IGNOP+NAMEERR  TURN ON NO GO SWITCH
         BCR   15,LNKRG1           RETURN FOR NEXT OPERATION
         SPACE 2
*******************
WTOA     WTO   'AMA118I SYSPRINT DD NOT IN INPUT',                     X
               ROUTCDE=(2,11),DESC=7                             S21995
         MVC   RETCODE(1),RETCOD12     .INDIC JCL-STMT ERROR.  @ZA06023
         B     CLOSE5                                          @ZA06023
*******************
         SPACE 1
*******************
CLOSE2   MVC   RETCODE(1),RETCOD12     .INDIC JCL-STMT ERROR.  @ZA06023
         B     CLOSE4                                          @ZA06023
CLOSE3   MVC   RETCODE(1),RETCOD16     .INDIC PERM-I/O ERROR.  @ZA06023
CLOSE4   BAL   LNKRG1,WRITE0A          .ISSUE MESSAGE.         @ZA06023
CLOSE5   BAL   LNKRG1,CLOSE1                                   @ZA06023
         BC    15,EXIT
         SPACE 1
*******************
*           THIS ROUTINE SIMULATES BLDL. AND STOW USING, EXCP
*              TO READ THE DIRECTORY AND WRITE THE DIRECTORY
*******************
         SPACE 1
*      THIS CODE SETS UP THE CCW'S FOR THE READING OF THE DIRECTORY
DIRREAD  MVC   IOCCW3(4),IOCCW6         SET UP TIC TO RD C.P.
         MVC   IOCCW7+1(3),RDAREA+1     SET INPUT BUFFER
         XC    SCHARG(8),SCHARG         ZERO OUT M AND R
         L     WK7,LIB+44          GET DEB ADDRESS
         MVC   SCHARG+1(6),STEXT-2(WK7)  SET SEEK ADDRESS
         MVC   SCHARG+1(2),LIB2+6  SET BB IN SRCH MBBCCHHR
UPDATEIO LA    1,DECB4+4                IOB ADDR
         SVC   0                        EXCP
         WAIT  1,ECB=DECB4              WAIT ON I/O
         BC    15,ERRTST
         SPACE 1
*        THIS CODE SET UP THE CCW'S FOR THE DIRECTORY UPDATE
DIRWRITE MVC   IOCCW3(8),IOCCW3B        SET UP UPDATE CCW
         MVC   IOCCW3+1(3),RDAREA+1     SET OUTPUT AREA ADDR
         MVC   SCHARG+3(5),TBUF+1       SET SEARCH ARG
         BC    15,UPDATEIO              TO UPDATE DIRECTORY
         SPACE 1
OPENLIB  TM    LIB+OPENBIT,OPENED       HAS IT BEEN OPENED YET   S21995
         BCR   1,LNKRG1                 YES,LNKRG1  RETURN       S21995
         RDJFCB LIB                                              S21995
         LA    RG5,JFCBAREA       GET ADDRESS OF JFCB            S21995
         CLC   0(44,RG5),DSCBDS   JFCB FOR FORMAT4?              S21995
         BC    7,RSRV              NO, ISSUE RESERVE AND OPEN    S21995
ASKOP    ST    LNKRG1,LNKSAVE2         SAVE LINK REGISTER        A38645
         BAL   LNKRG1,UPVTRTN          REQUEST TO UPDATE VTOC    A38645
         L     LNKRG1,LNKSAVE2         RESTORE LINK REGISTER     A38645
         OI    CDBUF,X'40'         INSURE A CAPITAL LETTER       S21995
         MVC   JFCBAREA(12),F4DSCB    MOVE FORMAT4.DSCB INTO DSN S21995
         MVC   JFCBAREA+12(32),BLANKS   PAD REMAINDER OF DSNAME  S21995
         CLI   CDBUF,C'N'               OKAY TO MODIFY           A53326
         BC    8,NOF4MOD                NO-NOTIFY USER           A53326
         CLI   CDBUF,C'Y'          CHECK FOR Y                   A53326
         BC    7,ASKOP             NO, REISSUE MSG               A53326
RSRV     L     RG5,LIB2+44         GET DEB ADDR FOR SYSLIB       S21995
         LA    RG5,0(RG5)          CLEAR HI BYTE                 S21995
         L     RG5,32(RG5)         PUT UCB AD IN RG5             YM5147
         ST    RG5,UCBAD           PUT IN UCBAD FOR RESERVE      YM5147
         MVC   RNAME(6),28(RG5)    MOVE MINOR NAME FROM UCB      YM5147
         CLC   JFCBAREA(12),F4DSCB JFCB FOR FORMAT4?             YM5147
         BE    VTOCRSRV            RESERVE 'SYSVTOC'             YM5147
         RESERVE (MAJOR,JFCBAREA,E,44,SYSTEMS),RET=HAVE,UCB=UCBAD 21995
         B     RESERVED           BRANCH AROUND RESERVE FOR VTOC YM5147
VTOCRSRV RESERVE (QNAME,RNAME,E,6,SYSTEMS),RET=HAVE,UCB=UCBAD    YM5147
RESERVED EQU  *                                                  YM5147
         MVI   RSVSW,X'FF'         INDICATE RESERVE ISSUED       S21995
OPEN2    OPEN  (LIB,(UPDATE))           OPEN                     S21995
         BCR   15,LNKRG1                DONE                     S21995
         SPACE 1
NOF4MOD  OI    CTLBTE,NAMEERR                                    S21995
         LA    RG5,NOVTOC               ERROR MSG                S21995
         BAL   LNKRG1,WRITE0A            PRINT OUT ERROR MSG     S21995
OPENRT   MVC   RETCODE(1),RETCOD08     .INDIC SPZAP-INP ERROR. @ZA06023
         LM    0,15,XFERSAVE           RESTORE REGS              S21995
         BCR   15,LNKRG3               GET NEXT CARD             S21995
         SPACE 2
**********************************************************************
* THIS ROUTINE CHECKS FOR SUCCESSFUL MODIFICATIONS.  IF A NAME
* UPDATE WAS PERFORMED, THE IDR (IF PRESENT) IS UPDATED AND THE
* LOCAL MODIFY FLAG IN THE SSI IS TURNED ON (UNLESS THE LAST OPERATION
* WAS A SETSSI). IF A CCHHR UPDATE WAS PERFORMED THIS ROUTINE ISSUES
* WTO FOR AMA121I.
**********************************************************************
INSMDFY  TM    CTLBTE2,MODIFY           REP OPERATION COMPELETED
         BO    CKIDR                   YES-CHECK IDR UPDATE      S21016
         TM    CTLBTE3,MODFYREC        CCHHR REP COMPLETED       S21016
         BCR   8,LNKRG2                N0-RETURN                 S21016
         RDJFCB LIB2                                              M1733
         CLC   JFCBAREA(44),DSCBDS      JFCB FOR FORMAT4?         M1733
         BC    7,MOVESER                NO-SKIP NAME CHANGE       M1733
         MVC   JFCBAREA(12),F4DSCB    MOVE FORMAT4.DSCB INTO DSN  M1733
         MVC   JFCBAREA+12(32),BLANKS   PAD REMAINDER OF DSNAME   M1733
MOVESER  MVC   WTO+8+36(6),JFCBAREA+118 MOVE VOLSER TO MSG       S21016
         UNPK  WTO+8+43(11),MBBCCHHR+3(6)  MOVE CCHHR TO MSG     S21016
         TR    WTO+8+43(10),TRANTBL2-X'F0'                       S21016
         MVI   WTO+8+53,C','                                     S21016
         LA    RG4,44                  SET MAX FOR DSNAME        S21016
         LA    RG5,JFCBAREA            ADDR OF DSN IN JFCB       S21016
TESTL    CLI   0(RG5),BLANK            END OF DSN                S21016
         BE    PRPMVC                  YES-CALCULATE LENGTH      S21016
         LA    RG5,1(RG5)              NO-ADD ONE                S21016
         BCT   RG4,TESTL               BRANCH BACK               S21016
PRPMVC   LA    RG4,JFCBAREA            START OF DSN              S21016
         SR    RG5,RG4                 GET LENGTH OF DSN         S21016
         LA    RG5,4+54(RG5)           LENGTH FOR WTO            S21016
         STH   RG5,WTO+4               STORE IN WTO              S21016
         LA    RG4,WTO+4(RG5)          ADDR OF ENN OF DSN IN MSG S21016
         MVC   WTO+8+54(44),JFCBAREA   MOVE DSN TO MSG           S21016
         MVC   0(4,RG4),WTO+8+98       MOVE ROUT & DESC TO MSG   S21016
         ST    LNKRG3,LNKSAVE          SAVE LINK REGISTER        S21016
         LA    LNKRG3,REGSAVE          SET SAVE AREA ADDR        S21016
         EXTRACT   TBUF,FIELDS=(TIOT)                            S21016
         L     RG5,TBUF                LOAD ADDR OF TIOT         S21016
         MVC   WTO+8+24(8),0(RG5)      MOVE JOBNAME TO MSG       S21016
WTO      WTO   'AMA121I CCHHR UPDATE BY          ON       ,          , X
                                                          ',           X
               ROUTCDE=(2,9),DESC=3                              S21016
         L     LNKRG3,LNKSAVE          RESTORE LINK REG          S21016
         NI    CTLBTE3,X'FF'-MODFYREC                            S21016
         BR    LNKRG2                   RETURN                   S21016
CKIDR    TM    CTLBTE3,IDRRD           ARE THERE IDR RECORDS     S21016
         BZ    INSM1                   N0-SKIP UPDATE            S21016
         ST    LNKRG3,LNKSAVE          YES-SAVE LINKREG          S21016
         LA    LNKRG3,REGSAVE          SET SAVEAREA              S21016
         POINT LIB2,IDRTTR             POINT TO IDR              S21016
         L     LNKRG3,LNKSAVE          RESTORE LINKREG           S21016
         BAL   LNKRG1,RDDSK2      READ IDR                       X01979
         MVI   TEMP,X'00'              CALC LOC FOR IDR DATA     S21016
         MVC   TEMP+1(1),RDAREA1+3     LOCATION =                S21016
         NI    TEMP+1,X'3F'              (NO. OF ENTRIES)*13+4   S21016
         LA    RG5,13                                            S21016
         MH    RG5,TEMP                                          S21016
         LA    RG5,RDAREA1+4(RG5)                                S21016
         TIME
         ST    R1,TEMP                 STORE TODAYS DATE         S21016
         MVC   2(3,RG5),TEMP+1         MOVE DATE TO IDR          S21016
         MVC   0(2,RG5),CSECTID+2      MOVE ESDID TO IDR         S21016
         MVC   5(8,RG5),IDRDATA        MOVE IDRDATA TO IDR       S21016
         SR    RG5,RG5                                           S21016
         IC    RG5,RDAREA1+3           INSERT NO. OF ENTRIES     S21016
         LA    RG5,1(RG5)              AND INCREASE BY ONE       S21016
         STC   RG5,RDAREA1+3           STORE IN IDR              S21016
         MVC   MBBCCHHR(8),IDRFSEEK    MOVE IDR DISK ADDR        S21016
         MVC   TEMP(2),SIZE+2          SAVE SIZE                 S21016
         MVC   SIZE+2(2),IDRSIZE       SET TO IDR SIZE           S21016
         BAL   LNKRG1,WRDISK      WRITE UPDATED IDR RECORD       X01979
         MVC   SIZE+2(2),TEMP          RESET SIZE                S21016
         NI    CTLBTE3,X'FF'-IDRRD     TURN OFF IDR RECORD SW    S21016
* SET UP AND ISSUE IDR-UPDATE MESSAGE.                         @ZA00409
         MVC   CARDSAVE(80),CDBUF       .SAVE CARD IMAGE.      @ZA00409
         L     RG5,IDRNENTS             .CURR # ENTRIES        @ZA00409
         LA    RG5,1(RG5)               . INCR FOR             @ZA00409
         ST    RG5,IDRNENTS             . ADDED ENTRY.         @ZA00409
         CVD   RG5,TEMPDBLW             .STORE INTO            @ZA00409
         UNPK  IDRNENTZ+1(2),TEMPDBLW+6(2)   . MESSAGE.        @ZA00409
         OI    IDRNENTZ+2,X'F0'              .(SET SIGN).      @ZA00409
         L     RG5,IDRMENTS             .MAX  IDR ENTRIES      @ZA00409
         CVD   RG5,TEMPDBLW                  . INTO            @ZA00409
         UNPK  IDRMENTZ+1(2),TEMPDBLW+6(2)   . MESSAGE.        @ZA00409
         OI    IDRMENTZ+2,X'F0'              .(SET SIGN).      @ZA00409
         MVC   MSGIDRUD+8(8),MEMNAME    .INSERT NAME.          @ZA00409
         LA    RG5,MSGIDRUD             .ISSUE                 @ZA00409
         BAL   LNKRG1,WRITE0A           . MESSAGE.             @ZA00409
         CLC   IDRNENTS(4),IDRMENTS     .CHECK IDR  SPACE.     @ZA00409
         BL    IDRQEOD                 .B IF MORE.             @ZM30901
         MVC   IDRFULL+8(8),MEMNAME     .ELSE                  @ZA00409
         LA    RG5,IDRFULL              . ISSUE                @ZA00409
         BAL   LNKRG1,WRITE0A           . MESSAGE.             @ZA00409
         CLC   RETCODE(1),RETCOD04      .IF RETCODE GE 4,      @ZA07967
         BNL   IDRQEOD                  . LEAVE ALONE.         @ZA07967
         MVC   RETCODE(1),RETCOD04      .ELSE SET IT TO 4.     @ZA07967
IDRQEOD  CLC   CARDSAVE(2),SLAST                               @ZM30901
         BE    INSM1                   .B IF EOD REACHED.      @ZM30901
IDRRESCD MVC   CDBUF(80),CARDSAVE       .RESTORE CARD IMAGE    @ZA00409
         BAL   LNKRG1,WRITEA            . AND PRINT CARD.      @ZA00409
INSM1    NI    CTLBTE2,X'FF'-MODIFY     RESET REP FLAG           S21016
*              THIS PROCEDURE INSPECTS FOR A PDS REP. HAVING OCCURRED
INSM1A   BAL   LNKRG1,DIRREAD     GET DIRECTORY BLOCK            X01979
         LH    RG5,0(0,BASREG3)    GET SIZE OF ENTRY
         LA    RG5,0(RG5,BASREG3)  DETERMINE STOP ADDR
         LR    RG0,RG5             SAVE STOP ADDRESS
         LA    RG4,2(0,BASREG3)         POINT AT FIRST ENTRY
         SR    RG5,RG5                  CLEAR REGISTER
         OI    CTLBTE3,NOMEM
***********************************************************************
* THIS SUBROUTINE WILL UPDATE SSI BYTES TO INDICATE LOCAL MODIFY
* AFTER A SUCCESSFUL REP HAS BEEN COMPLETED.
INSM2    MVC   TBUF(1),11(RG4)          MOVE OUT USER LENGTH
         NI    TBUF,X'1F'               RESET LEADING BITS
         IC    RG5,TBUF                 GET USER LENGTH DW
         CLC   0(8,RG4),MEMNAME         CORRECT MEMBER
         BC    8,INSM3                  YES-SET ON MODIFY
         LA    RG4,12(RG5,RG4)          NO-INCR.
         AR    RG4,RG5                  POINT AT NEXT MEMBER
         CR    RG4,RG0             TOO FAR?
         BCR   8+2,LNKRG2               YES-THE HECK WITH IT
         BC    15,INSM2                 NO-CONTINUE
         SPACE 1
INSM3    OI    CTLBTE3,NOSSI            SET SSI MISSING FLAG
         NI    CTLBTE3,X'FF'-NOMEM      RESET MISSING MEMBER FLAG
         TM    30(RG4),AOS              WAS AOS LKED USED        YM5257
         BO    AOSPDS                   YES--GO TO AOS RTN       Y01979
         AR    RG5,RG5                  DOUBLE TO BYTE SIZE
         CH    RG5,TW2                  22
         BCR   8+4,LNKRG2               YES-EXIT
         CH    RG5,THIRTY               30
         BCR   8,LNKRG2                 YES- NO SSI BYTES
         CH    RG5,THIRTY2              32
         BCR   8,LNKRG2                 YES- NO SSI BYTES
         CH    RG5,FOURTY               40
         BCR   8,LNKRG2                 YES- NO SSI BYTES
         LA    RG4,12-4(RG5,RG4)        POINT AT SSI BYTES
INSM4    NI    CTLBTE3,X'FF'-NOSSI      RESET NO SSI FIELD FLAG  Y01979
         TM    CTLBTE3,SSIOP            SSI OPERATION BEING PERFORMED
         BCR   1,LNKRG2                 YES-RETURN TO SET SSI RTN
         LA    RG4,SSIMDFY(RG4)         NO-POINT AT MODIFY OFFSET
         OI    0(RG4),X'20'             SET ON LOCAL MODIFY BITS
*         UPDATE DIRECTORY ENTRY  SSI  BYTES FOR LOCAL MODIFY
         BAL   LNKRG1,DIRWRITE           UPDATE DIRECTORY
         BCR   15,LNKRG2                RETURN
AOSPDS   TM    30(RG4),SSIB        IS THERE AN SSI               YM5257
         BCR   8,LNKRG2            NO--RETURN                    Y01979
         LA    RG5,34(RG4)         POINT TO END OF BASIC SECTION YM5257
         TM    20(RG4),SCTR        DOES DIR HAVE SCTR SECTION    YM5257
         BZ    NOSCTR              NO--SKIP ADD                  Y01979
         LA    RG5,8(RG5)          YES--UPDATE PTR               Y01979
NOSCTR   TM    11(RG4),ALIAS       IS THERE AN ALIAS             YM5257
         BZ    NOALIAS             NO--SKIP ADD                  Y01979
         LA    RG5,10(RG5)              YES, UPDATE POINTER    @YM4509P
NOALIAS  LR    RG4,RG5             PUT PTR IN PROPER REG         Y01979
         B     INSM4                GO UPDATE SSI
         SPACE 4
SYND     SYNADAF ACSMETH=QSAM
         LR    RG2,WK7             SAVE PARM REG                 S21995
         MVC   CDBUF(26),INPUTERR  MOVE MSG ID TO BUFFER         S21995
         BAL   LNKRG1,IOMSG        GOTO BLDL AND PRNT ERROR MSG  S21995
         SYNADRLS                  FREE SYNADAF  WRKAREA         S21995
         MVC   RETCODE(1),RETCOD16     .INDIC PERM-I/O ERROR.  @ZA06023
         B     CLOSE5                  .GO TO CLOSE.           @ZA06023
SETBLKSI SR    RG4,RG4                                           S21995
         LH    RG4,INPUT+62       GET BLKSIZE FOR SYSIN          S21995
         LTR   RG4,RG4            WAS BLKSIZE PROVIDED?          S21995
         BCR   2+4,R14            YES, RETURN TO OPEN.           S21995
         MVC   INPUT+62(2),INPUT+82  SET BLKSIZE=80.             S21995
         BR    R14                RETURN TO OPEN                 S21995
STBLKSI1 SR    RG4,RG4                                           Y02160
         LH    RG4,OUTPUT+62      GET BLKSIZE FOR SYSPRINT       Y02160
         LTR   RG4,RG4            WAS BLKSIZE PROVIDED?          Y02160
         BCR   2+4,R14            YES, RETURN TO OPEN.           Y02160
         MVC   OUTPUT+62(2),OUTPUT+82  SET BLKSIZE=80.           Y02160
         BR    R14                RETURN TO OPEN                 Y02160
CLOSE1   CLOSE (INPUT,,OUTPUT,,LIB2)
         CLOSE (LIB)
         TM    INPUT+23,X'03'          .LOW BITS BFCB ADDR.    @ZA00408
* FREE BUFFER POOLS.                                           @ZA06027
         BNZ   FPOOLPRT                .IF SYSIN OPENED,       @ZA06027
         FREEPOOL INPUT                . FREE ITS BUFFER POOL. @ZA06027
FPOOLPRT TM    OUTPUT+23,X'03'         .LOW BITS BFCB ADDR.    @ZA06027
         BNZ   CLOSE1ZZ                .IF SYSPRINT OPENED,    @ZA06027
         FREEPOOL OUTPUT               . FREE ITS BUFFER POOL. @ZA06027
* RETURN FROM 'CLOSE1' SUBROUTINE.                             @ZA06027
CLOSE1ZZ BR    LNKRG1                  .LEAVE 'CLOSE1' SUBRTE. @ZA06027
***********************************************************************
* AMASPZAP COMPLETE
***********************************************************************
EODC     MVC   CDBUF(2),SLAST          .INDICATE EOD.          @ZM30901
         BAL   LNKRG2,INSMDFY          .CHECK FOR UPDATE.      @ZM30901
EOD      L     RG5,AMSG100I            .SELECT MESSAGE.        @ZA17658
         BAL   LNKRG1,WRITE0A                                    S21995
         BAL   LNKRG1,CLOSE1                                     S21995
EXIT     CLI   RSVSW,RSVON         WAS RESERVE ISSUED?           S21995
         BNE   GETOUT              NO, EXIT                      S21995
         CLC   JFCBAREA(12),F4DSCB     .IF 'FORMAT4.DSCB',     @ZA02784
         BE    DEQVTOC             DEQ VTOC NAMES                YM5147
         DEQ   (MAJOR,JFCBAREA,44,SYSTEMS),RET=HAVE              YM5147
         B     ENDDEQ              DONE DEQ OF NON-VTOC NAMES    YM5147
DEQVTOC  DEQ   (QNAME,RNAME,6,SYSTEMS),RET=HAVE                  YM5147
ENDDEQ   MVI   RSVSW,X'00'         RESET RESERVE SWITCH          S21995
GETOUT   ST    R13,LNKSAVE                                       S21995
         L     R13,REGSAVE+4                                     S21995
         L     R0,SIZE                 .BUFFER SIZE.           @ZA09683
         LA    R1,8                    .EXT FOR UNPK BEY BUFF  @ZM40094
         AR    R0,R1                   . IN CASE BUFF FILLED.  @ZM40094
         L     R1,RDAREA            LOAD 1R WITH ADDR OF GETMAIN Y02160
         FREEMAIN R,LV=(0),A=(1)    FREE FOR CLEANUP             Y02160
         CLC   RETCODE(1),LASTRET       WHICH CODE IS HIGHEST
         BL    USELAST                  IF LAST ONE--DON'T CHANGE
         MVC   LASTRET(1),RETCODE       SAVE HIGHEST STEP RET CODE
USELAST  SR    R15,R15                  CLEAR RET CODE REG
         IC    R15,LASTRET              LOAD RETURN CODE
         RETURN (14,12),RC=(15)           EXIT FROM AMASPZAP     A35657
***********************************************************************
         SPACE 1
         SPACE 1
***********************************************************************
*                                                                     *
*  THIS ROUTINE WRITES MESSAGE AMA117D TO OPERATOR TO REQUEST         *
*  PERMISSION TO UPDATE VTOC                                          *
*                                                                     *
***********************************************************************
UPVTRTN  ST    LNKRG1,LNKSAVE3         SAVE LINK REGISTER        A38645
         BALR  LNKRG1,0                ESTABLISH                 A38645
         USING *,LNKRG1                 ADDRESSABILITY           A38645
         EXTRACT ADDRSV,'S',FIELDS=(TIOT) GET ADDR ACT TASK      A38645
         L     RG5,ADDRSV              RG5 POINTS TO TIOT        A38645
         MVC   UPVTMSG+66(8),0(RG5)    MOVE JOBNAME TO MSG BUFFERA38645
         LA    RG5,24(RG5)             INCREMENT TO FIRST DD ENT A38645
CHKLIB   CLC   4(6,RG5),SYSLIB         SYSLIB DD                 A38645
         BC    8,LIBUCB                GET SYSLIB UCB ADDR       A38645
         XC    ADDRSV(4),ADDRSV        CLEAR ADDRESS AREA        A38645
         MVC   ADDRSV+3(1),0(RG5)      MOVE LEN OF DD ENTRY      A38645
         A     RG5,ADDRSV              RG5 POINTS TO NEXT DD ENT A38645
         BC    15,CHKLIB               CHECK IF ITS SYSLIB       A38645
LIBUCB   L     RG5,16(RG5)             REL ADDR OF SYSLIBS UCB   A38645
         DEVTYPE SYSLIB,DEVBUF         GET SYSLIB DEVICE TYPE    A38645
         CLI   DEVBUF+3,X'05'          IS IT A 2321 DATA CELL    A38645
         BC    7,NOT2321               NOT 2321                  A38645
*  DEVICE IS A 2321 DATA CELL                                         *
         MVC   UPVTMSG+53(6),4(RG5)    2321 VOLSER TO MSG BUFFER A38645
         MVC   UPVTMSG+64(1),1(RG5)    BIN NUMBER TO MSG BUFFER  A38645
         OI    UPVTMSG+64,X'F0'        CONVERT TO EBCDIC         A38645
         MVI   UPVTMSG+63,C'/'         INSERT DELIMETER          A38645
*  FIND BEGINNING OF 2321 UCB FOR UNIT ADDRESS FIELD                  *
         ST    RG5,ADDRSV              SAVE ADDR OF CELL DESCR   A38645
         LH    RG5,0(RG5)              LOAD BIN NUMBER           A38645
         SLA   RG5,4                   TIMES BYTES/CELL ENTRY    A38645
         LA    RG5,56(RG5)             PLUS DISP TO BIN0 DESCR   A38645
         LCR   RG5,RG5                                           A38645
         A     RG5,ADDRSV              RG5 POINTS TO BEGIN OF UCBA38645
         BC    15,UNITNAME             MOVE UNIT NAME            A38645
NOT2321  MVC   UPVTMSG+53(6),28(RG5)   NON 2321 VOLSER TO MSG BUFA38645
UNITNAME MVC   UPVTMSG+60(3),13(RG5)   MOVE UNIT NAME TO MSG BUF A38645
         XC    WTOECB(4),WTOECB        CLEAR ECB                 A38645
UPVTMSG  WTOR  'AMA117D REPLY Y OR N TO UPDATE VTOC                    X
                  ',CDBUF,1,WTOECB,ROUTCDE=1,DESC=2
         WAIT  ECB=WTOECB                                        A38645
         MVC   UPVTMSG+53(21),UPVTMSG+52 BLANK DYNAM AREA        A38645
         L     LNKRG1,LNKSAVE3         RESTORE LINK REGISTER     A38645
         BR    LNKRG1                  .RETURN TO CALLER.      @ZA17658
         EJECT                                                 @ZA17658
* SUBROUTINES WITH OWN ADDRESSING (OVERFLOW FROM MAIN CSECT).  @ZA17658
         USING ZAPBASE2,BASREG                                 @ZA17658
************************************************************** @ZA00409
* SUBROUTINE TO SCAN CONTROL CARD, PRINT IT UNLESS IT CAUSES * @ZA00409
* AN IDR-UPDATE MESSAGE, AND RETURN TO CALLER WITH KEYWORD   * @ZA00409
* POINTERS (REGISTERS) SET BY 'SCANKEY'.                     * @ZA00409
************************************************************** @ZA00409
         USING CCISCAN,BASREG3                                 @ZA17658
CCISCAN  ST    LNKRG1,CCISSAVE          .SAVE RET REG.         @ZA00409
         TM    CTLBTE2,MODIFY           .PRINT CARD IF         @ZA00409
         BZ    CCISPRNT                 . NO SUCC 'NAME' REP   @ZA00409
         TM    CTLBTE3,IDRRD            . OR                   @ZA00409
         BZ    CCISPRNT                 . NO IDR SPACE.        @ZA00409
         BAL   LNKRG1,SCANKEY           .LOCATE KEYWORD.       @ZA00409
         TM    CTLBTE,IGNOP            .IF 'NO GO' SET,        @ZM30901
         BO    CCISCAN2                . 'REP' IS INVALID.     @ZM30901
         CLC   0(3,RG1),REP            .ELSE                   @ZM30901
         BE    CCISPRNT                . PRINT IF 'REP' CARD.  @ZM30901
* NOT A REJECTED REP AFTER PREV ACCEPTED REP(S).               @ZM30901
CCISCAN2 CLC   0(3,RG1),VERIFY         .PRINT                  @ZM30901
         BE    CCISPRNT                . IF 'VER' CARD,        @ZM30901
         CLC   0(6,RG1),SSI                                    @ZA00409
         BE    CCISPRNT                 . OR 'SETSSI' CARD,    @ZA00409
         CLC   0(7,RG1),IDRDATAC                               @ZA00409
         BE    CCISPRNT                 . OR 'IDRDATA' CARD,   @ZA00409
         CLI   0(RG1),AST                                      @ZA00409
         BE    CCISPRNT                 . OR COMMENT CARD,     @ZA00409
         CLC   0(7,RG1),CONSOLE                                @ZA00409
         BE    CCISPRNT                 . OR 'CONSOLE' CARD,   @ZA00409
         CLC   0(8,RG1),CHECKSUM       .OR 'CHECKSUM' STMT,    @ZA17660
         BE    CCISPRNT                                        @ZA17660
         CLC   0(3,RG1),END                                    @ZA00409
         BNE   CCISEXIT                 . OR 'END' CARD.       @ZA00409
CCISPRNT BAL   LNKRG1,WRITE             .(ELSE DEFER PRINT).   @ZA00409
         BAL   LNKRG1,SCANKEY           .RESTORE KEYWORD PTRS. @ZA00409
CCISEXIT L     LNKRG1,CCISSAVE          .RESTORE RET REG,      @ZA00409
         L     BASREG3,RDAREA          .RESTORE BUFFER BASE.   @ZA17658
         BR    LNKRG1                   . AND RETURN.          @ZA00409
CCISSAVE DC    F'0'                     .(RET-REG SAVE WORD).  @ZA00409
         SPACE 1
         DROP  BASREG3                                         @ZA17658
         SPACE 1                                               @ZA17660
* PROCESS 'CHECKSUM' STATEMENT.                                @ZA17660
         USING CHSUM,BASREG3                                   @ZA17660
CHSUM    UNPK  CHSUMBCD(9),CHSUMACC(5) .UNPACK HEX CHECKSUM.   @ZA17660
         TR    CHSUMBCD(8),TRANTBL2-X'F0' .CONV TO BCD.        @ZA17660
         MVI   CHSUMCMA,COMMA          .RESTORE COMMA AFT VAL. @ZA17660
         XC    CHSUMACC(4),CHSUMACC    .RESET HEX CHECKSUM.    @ZA17660
         XC    CHSUMSLL(2),CHSUMSLL    .RESET CHECKSUM SHIFT.  @ZA17660
         BAL   LNKRG1,SCANKEY1         .GET OPERAND, IF ANY.   @ZA17660
         LTR   RG2,RG2                 .Q ANY OPERAND.         @ZA17660
         BZ    CHSUMWAS                .B OF NONE.             @ZA17660
         SR    RG3,RG1                 .OPERAND LENGTH.        @ZA17660
         CH    RG3,EIGHT               .(MUST BE 8 DIGITS).    @ZA17660
         BNE   CHSUMINV                .B IF NOT 8 DIGITS.     @ZA17660
         CLC   CHSUMBCD(8),0(RG1)      .COMPARE CHECKSUMS.     @ZA17660
         BNE   CHSUMERR                .B IF UNEQUAL.          @ZA17660
         MVC   CHSUMBCD(8),CORRECT     .ELSE INSERT 'CORRECT ' @ZA17660
         B     CHSUMWAS                . INTO MESSAGE.         @ZA17660
* CHECKSUM ERROR.                                              @ZA17660
CHSUMERR OI    CTLBTE,IGNOP            .SET NO=GO SWITCH.      @ZA17660
         MVC   RETCODE(1),RETCOD08     .SET RETURN CODE.       @ZA17660
         LA    RG5,MSGCHERR            .SELECT MESSAGE         @ZA17660
         BAL   LNKRG1,WRITE0           .WRITE MESSAGE.         @ZA17660
         B     CHSUMWAS                                        @ZA17660
* OPERAND ERROR.                                               @ZA17660
CHSUMINV OI    CTLBTE,IGNOP            .SET NO=GO SWITCH.      @ZA17660
         MVC   RETCODE(1),RETCOD08     .SET RETURN CODE.       @ZA17660
         LA    RG5,MSGCHINV            .SELECT MESSAGE         @ZA17660
         BAL   LNKRG1,WRITE0           .WRITE MESSAGE.         @ZA17660
* WRITE CHECKSUM-VALUE MESSAGE.                                @ZA17660
CHSUMWAS LA    RG5,MSGCHWAS            .SELECT MESSAGE.        @ZA17660
         BAL   LNKRG1,WRITE0           .WRITE MESSAGE.         @ZA17660
         L     BASREG3,RDAREA          .RESTORE BUFFER BASE.   @ZA17660
         BR    LNKRG3                  .GO TO NEXT INPUT STMT. @ZA17660
         SPACE 1                                               @ZA17660
CORRECT  DC    CL8'CORRECT '                                   @ZA17660
MSGCHWAS DC    CL40'AMA132I CHECKSUM WAS XXXXXXXX, IS NOW 0.'  @ZA17660
CHSUMBCD EQU   MSGCHWAS+21                                     @ZA17660
CHSUMCMA EQU   CHSUMBCD+8                                      @ZA17660
MSGCHERR DC    CL40'AMA133I CHECKSUM ERROR. NO-GO SWITCH SET.' @ZA17660
MSGCHINV DC    CL40'AMA134I  OPERAND ERROR. NO-GO SWITCH SET.' @ZA17660
         SPACE 1                                               @ZA17660
         DROP  BASREG3                                         @ZA17660
         EJECT                                                 @ZA17658
* DSECT FOR SYSLIB BUFFER.                                     @ZA17658
PROG4    DSECT                                                 @ZA17658
RDAREA1  DS    0C
PCHOFFST EQU   PTCHA-AMASZCON           BASEREG=BASEREG2=11      Y02006
         END
