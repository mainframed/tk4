         TITLE 'ISTTC035,TERMINATION CODE FOR OLT SECTION              *
                        '
ISTTC035 CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'ISTTC035  76.244'                                 0001
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                     0001
         BALR  @12,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,@12                                         0001
*                                                                  0028
*   /*****************************************************************/
*   /*                                                               */
*   /* BEGINNING OF EXECUTABLE CODE FOR MODULE                       */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0029
*   SVETC035(2)=R13;                /* STORE BACK LINK IN MY AREA    */
         ST    R13,SVETC035+4(,WAPTR)                              0029
*   BACKSAVE(3)=ADDR(SVETC035);     /* POINT TO MY SAVEAREA IN CHAN  */
         LA    @03,SVETC035(,WAPTR)                                0030
         ST    @03,BACKSAVE+8(,R13)                                0030
*   R13=ADDR(SVETC035);             /* POINT TO MY SAVEAREA          */
*                                                                  0031
         LR    R13,@03                                             0031
*   /*****************************************************************/
*   /*                                                               */
*   /* IF A TEST DEVICE IS BEING VARIED, TELL USER THAT THE SECTION  */
*   /* IS BEING TERMINATED AND HIS DEVICES ARE BEING RELEASED.       */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0032
*   IF $VARYINP='1'B THEN           /* CHECK FOR DEVICE BEING VARIED
*                                      OFF                           */
         TM    $VARYINP(WAPTR),B'00000100'                         0032
         BNO   @RF00032                                            0032
*     DO;                           /* ISSUE MESSAGE                 */
*                                                                  0033
*       /*************************************************************/
*       /*                                                           */
*       /* TCEC MSGN(466) INVOKED                                    */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0034
*       $TCECM='1'B;                /* SET TCEC SW IN RCA            */
         OI    $TCECM(WAPTR),B'00000001'                           0034
*       R1=ADDR($TCA08);            /* SET UP PARM LIST $TR          */
         LA    R1,$TCA08                                           0035
*       CALL #EXIT;                 /* CALL CECOM                    */
         L     @15,#EXITA(,WAPTR)                                  0036
         BALR  @14,@15                                             0036
*       DCL                                                        0037
*         1 $TCA08,                 /* TCEC PARM LIST                */
*          2 $TCB08 FIXED(32) INIT(466),/* MSG NUMBER                */
*          2 $TCC08 FIXED(32) INIT(0),/* INCT LEN                    */
*          2 $TCD08 BIT(8) INIT('00000000'B),/* FLAG                 */
*          2 $TCE08 CHAR(4) INIT('FFFFFFFF'X);/* MSSAGE MASK         */
*     END;                          /* END OF MESSAGE                */
*                                                                  0038
*   /*****************************************************************/
*   /*                                                               */
*   /* IF NO OLT IS ACTIVE, JUST RELEASE CURRENT DEVICES AND RETURN  */
*   /* TO THE CALLER TO CONTINUE. NO MESSAGES ARE ISSUED.            */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0039
*   IF $OLTACT='0'B THEN            /* IF NO OLT, SKIP CLEANUP       */
@RF00032 TM    $OLTACT(WAPTR),B'00000001'                          0039
         BZ    @RT00039                                            0039
*     GO TO T35C0080;               /* GO TO RELEASE DEVICES         */
*                                                                  0040
*   /*****************************************************************/
*   /*                                                               */
*   /* IF AN OLT IS ACTIVE, CHECK IF IT TERMINATED NORMALLY OR IF IT */
*   /* WAS FORCED TO END. ON A FORCED TERMINATION, THE OLT IS GIVEN  */
*   /* THE OPPORTUNITY TO DO I/O TO BRING THE DEVICES HE WAS USING   */
*   /* BACK INTO A USEABLE STATE.                                    */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0041
*   IF $NRMTERM='0'B THEN           /* DID OLT TERMINATE NORMALLY?   */
         TM    $NRMTERM(WAPTR),B'00000010'                         0041
         BNZ   @RF00041                                            0041
*     DO;                           /* ABNORMAL TERM. OF THE OLT     */
*                                                                  0042
*       /*************************************************************/
*       /*                                                           */
*       /* TURN OFF BITS THAT MIGHT HAVE BEEN LEFT ON BY OLT         */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0043
*       $TEP1ST='0'B;                                              0043
*       $TEP2ND='0'B;                                              0044
*       $OLTMACC='0'B;                                             0045
*                                                                  0045
         NI    $TEP1ST(WAPTR),B'11011100'                          0045
*       /*************************************************************/
*       /*                                                           */
*       /* IF THERE IS A CLEANUP ROUTINE AND IT HAS NOT BEEN ENTERED */
*       /* YET FOR CLEANUP, THE CLEANUP BIT IS SET AS AN INDICATOR   */
*       /* AND THE OLT IS RE-ENTERED. HE IS GIVEN ONLY ONE CHANCE TO */
*       /* CLEANUP, IF HE IS TERMINATED AGAIN, OR THERE WAS NO       */
*       /* CLEANUP ROUTINE IN THE FIRST PLACE, THE DEVICES WITH      */
*       /* ACTIVE I/O ARE GIVEN A DIO REQUEST FOR A HIO.             */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0046
*       IF $CLEANUP='0'B&$CLEANRT='1'B THEN                        0046
         TM    $CLEANUP(WAPTR),B'00000100'                         0046
         BNZ   @RF00046                                            0046
         TM    $CLEANRT(WAPTR),B'01000000'                         0046
         BNO   @RF00046                                            0046
*         DO;                       /* CALL OLT TO CLEANUP           */
*           $CLEANUP='1'B;          /* SHOW OLT ENTERED TO CLEANUP   */
         OI    $CLEANUP(WAPTR),B'00000100'                         0048
*           #MSGIDAC=#MSGIDAC&&#MSGIDAC;/* ZERO OUT THE ACTIVE     0049
*                                      MESSAGE ID                    */
         XC    #MSGIDAC(2,WAPTR),#MSGIDAC(WAPTR)                   0049
*           IF #MSGIDRQ='1'B THEN   /* DET. IF MESSAGE ID FIELD IS 0050
*                                      PRESENT                       */
         L     @03,$LOWADDR(,WAPTR)                                0050
         LH    @15,RTNDISP(,@03)                                   0050
         ALR   @15,@03                                             0050
         TM    #MSGIDRQ(@15),B'00010000'                           0050
         BNO   @RF00050                                            0050
*             #MSGIDAC=#MSGID;      /* STORE FOR CECOM FUNCTIONS     */
         MVC   #MSGIDAC(2,WAPTR),#MSGID(@03)                       0051
*           IF $VRYSFT='1'B THEN    /* CHECK FOR AN NCP BEING      0052
*                                      RELOADED                      */
@RF00050 TM    $VRYSFT(WAPTR),B'00100000'                          0052
         BNO   @RF00052                                            0052
*             $CURELOD='1'B;        /* IF IT WAS RELOADED, INDICATE
*                                      TO OLT                        */
*                                                                  0053
         OI    $CURELOD(WAPTR),B'00001000'                         0053
*           /*********************************************************/
*           /*                                                       */
*           /* POINT TO PARAMETER LIST AND CALL THE OLT SO HE MAY    */
*           /* RESTORE HIS DEVICES TO THEIR ORIGINAL STATUS.         */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0054
*           R1=ADDR($SCTPTR);       /* GET PARAMETER LIST            */
@RF00052 LA    R1,$SCTPTR(,WAPTR)                                  0054
*           CALL OLTENTRY;          /* ENTER THE OLT TO CLEAN UP     */
         L     @03,$LOWADDR(,WAPTR)                                0055
         L     @15,INST(,@03)                                      0055
         BALR  @14,@15                                             0055
*         END;                      /* END CLEANUP ROUTINE FOR OLT   */
*       $ASTERIK='1'B;              /* SET TERMINATED IN ERROR       */
@RF00046 OI    $ASTERIK(WAPTR),B'01000000'                         0057
*     END;                          /* END OF OLT CLEANUP            */
*   $OLTACT='0'B;                   /* SHOW OLT NOLONGER ACTIVE      */
@RF00041 NI    $OLTACT(WAPTR),B'11111110'                          0059
*   $NRMTERM='0'B;                  /* RESET TERMINATION BIT         */
*                                                                  0060
         NI    $NRMTERM(WAPTR),B'11111101'                         0060
*   /*****************************************************************/
*   /*                                                               */
*   /* HALT ANY I/O THAT STILL MAY BE ACTIVE FOR THE OLT. THIS CODE  */
*   /* IS USUALLY NOT EXECUTED, AND IS FOR SAFEGUARD PURPOSES ONLY.  */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0061
*   DO I=3 TO $DEVCNTS;             /* CHECK ALL DEVICES             */
         LA    I,3                                                 0061
         B     @DE00061                                            0061
@DL00061 DS    0H                                                  0062
*     IF $DEVACT(I)='1'B THEN       /* CHECK FOR ACTIVE DEV          */
         LR    @05,I                                               0062
         MH    @05,@CH00267                                        0062
         ST    @05,@TF00001                                        0062
         ALR   @05,WAPTR                                           0062
         TM    $DEVACT-68(@05),B'00000100'                         0062
         BNO   @RF00062                                            0062
*       DO;                         /* IF ACTIVE, PURGE              */
*         $IGLXIFB(I)='1'B;         /* SET THE IGNORE BIT FOR STATUS
*                                      POST                          */
         LR    @05,WAPTR                                           0064
         AL    @05,@TF00001                                        0064
         OI    $IGLXIFB-68(@05),B'01000000'                        0064
*         PURCDS=ADDR($DEVTBLE(I)); /* CDS IN DEV TABLE              */
*                                                                  0065
         L     @05,@TF00001                                        0065
         LA    @05,$DEVTBLE-68(@05,WAPTR)                          0065
         ST    @05,PURCDS                                          0065
*         /***********************************************************/
*         /*                                                         */
*         /* USE THE LAST TECB USED BY THE OLT. SINCE THE STATUS IS  */
*         /* NOT CHECKED, ANY VALID ADDRESS IS GOOD ENOUGH TO USE.   */
*         /*                                                         */
*         /***********************************************************/
*                                                                  0066
*         PURTECB=$DEVTECB(I);      /* TECB POINTER IN TBLE          */
         LR    @05,WAPTR                                           0066
         AL    @05,@TF00001                                        0066
         ICM   @03,15,$DEVTECB-68(@05)                             0066
         ST    @03,PURTECB                                         0066
*         R1=ADDR(PURPARM);         /* POINT TO PARAMETER LST        */
         LA    R1,PURPARM                                          0067
*         CALL ISTSC032;            /* PURGE THE I/O                 */
         L     @15,@CV00578                                        0068
         BALR  @14,@15                                             0068
*       END;                        /* END OF I/O PURGE              */
*   END;                            /* END OF DEVICE LOOP            */
*                                                                  0070
@RF00062 AL    I,@CF00043                                          0070
@DE00061 CH    I,$DEVCNTS(,WAPTR)                                  0070
         BNH   @DL00061                                            0070
*   /*****************************************************************/
*   /*                                                               */
*   /* IF ALL THE ROUTINES WERE NOT RUN, ISSUE A MESSAGE TO THE      */
*   /* OPERATOR TO TELL HIM THAT THINGS HE WANTED TO GET DONE HAVE   */
*   /* NOT BEEN ENTERED. THIS CAN BE CAUSED BY SPECIFYING A ROUTINE  */
*   /* NUMBER HIGHER THAN IS IN THE OLT SECTION.                     */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0071
*   IF $RTNSLCT='1'B&$RTN#<$HIGHRTN THEN/* NOT ALL ROUTINES RUN      */
         TM    $RTNSLCT(WAPTR),B'00100000'                         0071
         BNO   @RF00071                                            0071
         L     @03,$LOWADDR(,WAPTR)                                0071
         LH    @15,RTNDISP(,@03)                                   0071
         ALR   @15,@03                                             0071
         CLC   $RTN#(1,@15),$HIGHRTN(WAPTR)                        0071
         BNL   @RF00071                                            0071
*     DO;                           /* ISSUE MESSAGE 198             */
*                                                                  0072
*       /*************************************************************/
*       /*                                                           */
*       /* USE CECOM TO ISSUE MESSAGE 198 TO INFORM THE OPERATOR NOT */
*       /* ALL SECTIONS WERE RUN TCEC MSGN(198) INVOKED              */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0073
*       $TCECM='1'B;                /* SET TCEC SW IN RCA            */
         OI    $TCECM(WAPTR),B'00000001'                           0073
*       R1=ADDR($TCA09);            /* SET UP PARM LIST $TR          */
         LA    R1,$TCA09                                           0074
*       CALL #EXIT;                 /* CALL CECOM                    */
         L     @15,#EXITA(,WAPTR)                                  0075
         BALR  @14,@15                                             0075
*       DCL                                                        0076
*         1 $TCA09,                 /* TCEC PARM LIST                */
*          2 $TCB09 FIXED(32) INIT(198),/* MSG NUMBER                */
*          2 $TCC09 FIXED(32) INIT(0),/* INCT LEN                    */
*          2 $TCD09 BIT(8) INIT('00000000'B),/* FLAG                 */
*          2 $TCE09 CHAR(4) INIT('FFFFFFFF'X);/* MSSAGE MASK         */
*     END;                          /* END OF MESSAGE 198            */
*                                                                  0077
*   /*****************************************************************/
*   /*                                                               */
*   /* IF THE SECTION INDICATED THAT NO MORE DEVICES SHOULD BE       */
*   /* SCHEDULED AGAINST THIS SECTION IN THIS TEST LOOP, SET THE     */
*   /* $FINAL BIT IN THE TEST WORK AREA WHICH WILL BE MOVED INTO THE */
*   /* SECTION LIST TABLE AT THE END OF EXECUTION.                   */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0078
*   IF $LSTPDEV='1'B THEN           /* SET FINAL BIT FOR SECTION     */
@RF00071 TM    $LSTPDEV(WAPTR),B'00001000'                         0078
         BNO   @RF00078                                            0078
*     $FINAL='1'B;                  /* SHOW SECTION NOT TO BE USED   */
*                                                                  0079
         OI    $FINAL(WAPTR),B'10000000'                           0079
*   /*****************************************************************/
*   /*                                                               */
*   /* IF THE CONTROL PRINT OPTION IS SPECIFIED, TYPE THE TERMINATE  */
*   /* OPTION AND TELL THE OPERATOR THE SECTION IS THROUGH EXECUTING.*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0080
*   IF $NOCNTRL='1'B THEN           /* SKIP IF NO CONTROL PRINT      */
@RF00078 TM    $NOCNTRL(WAPTR),B'00001000'                         0080
         BNO   @RF00080                                            0080
*     DO;                           /* IF CP ON, PRINT MSG 158       */
*       $INBUFR(1:2)=' T';          /* FORMAT FOR TERMINATE MSG      */
         MVC   $INBUFR(2,WAPTR),@CC00585                           0082
*       $INBUFR(3:10)=$RUNTEST;     /* PUT ON SECTION NAME           */
         MVC   $INBUFR+2(8,WAPTR),$RUNTEST(WAPTR)                  0083
*       $INBUFR(11:14)=$PRIMADR;    /* PUT IN UNIT ADDR              */
         MVC   $INBUFR+10(4,WAPTR),$PRIMADR(WAPTR)                 0084
*       $INBUFR(15:22)=$SYMBOLC;    /* ADD SYMBOLIC ADDRESS          */
         MVC   $INBUFR+14(8,WAPTR),$SYMBOLC(WAPTR)                 0085
*       IF $ASTERIK='1'B THEN       /* PUT ON ERROR FLAG             */
         TM    $ASTERIK(WAPTR),B'01000000'                         0086
         BNO   @RF00086                                            0086
*         $INBUFR(1)='*';           /* PUT ON INSTEAD OF BLANK       */
*                                                                  0087
         MVI   $INBUFR(WAPTR),C'*'                                 0087
*       /*************************************************************/
*       /*                                                           */
*       /* TCEC MSGN(158)SUB(YES) INVOKED                            */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0088
*       $TCECM='1'B;                /* SET TCEC SW IN RCA            */
@RF00086 OI    $TCECM(WAPTR),B'00000001'                           0088
*       R1=ADDR($TCA10);            /* SET UP PARM LIST $TR          */
         LA    R1,$TCA10                                           0089
*       CALL #EXIT;                 /* CALL CECOM                    */
         L     @15,#EXITA(,WAPTR)                                  0090
         BALR  @14,@15                                             0090
*       DCL                                                        0091
*         1 $TCA10,                 /* TCEC PARM LIST                */
*          2 $TCB10 FIXED(32) INIT(158),/* MSG NUMBER                */
*          2 $TCC10 FIXED(32) INIT(0),/* INCT LEN                    */
*          2 $TCD10 BIT(8) INIT('10000000'B),/* FLAG                 */
*          2 $TCE10 CHAR(4) INIT('FFFFFFFF'X);/* MSSAGE MASK ISSUE 0091
*                                      MESSAGE 158                   */
*     END;                          /* END OF TERMINATE MESSAGE      */
*                                                                  0092
*   /*****************************************************************/
*   /*                                                               */
*   /* IF THE BIT IS ON TO RELEASE DEVICES OR GENERALLY CLEANUP THIS */
*   /* PARTICULAR LOGON, CALL THE CLEANUP ROUTINE.                   */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0093
*T35C0080:                                                         0093
*   IF $VARYINP='1'B&$LOGOFFE='0'B THEN/* CHECK FOR DEVICE BEING   0093
*                                      VARIED OFF AND CT STILL VALID
*                                                            @AX12741*/
@RF00080 DS    0H                                                  0093
T35C0080 TM    $VARYINP(WAPTR),B'00000100'                         0093
         BNO   @RF00093                                            0093
         L     @03,$LOGOFFE                                        0093
         LTR   @03,@03                                             0093
         BNZ   @RF00093                                            0093
*     DO;                           /* MAKE SPECIAL CALL AND THEN  0094
*                                      EXIT                          */
*       CALL I01C0060;              /* CLEAN UP DEVICES              */
         L     @15,@CV00600                                        0095
         BALR  @14,@15                                             0095
*       $VARYINP='0'B;              /* RESET VARY IN PROGRESS        */
*       $VRYSFT='0'B;               /* RESET SOFT VARY INDICATOR     */
*       $VRYHRD='0'B;               /* RESET HARD VARY PURGE       0098
*                                      INDICATOR                     */
         NI    $VARYINP(WAPTR),B'11001011'                         0098
*       $CURELOD='0'B;              /* RESET SCT INDICATOR ABOUT   0099
*                                      CONTROL UNIT RELOD            */
         NI    $CURELOD(WAPTR),B'11110111'                         0099
*       $NORELDV='0'B;              /* RESET JUST IN CASE IT WAS ON  */
         NI    $NORELDV(WAPTR),B'11111101'                         0100
*       CALL ISTIC002;              /* EXIT TO COMMUNICATION INTERVAL*/
         L     @15,@CV00601                                        0101
         BALR  @14,@15                                             0101
*     END;                          /* END OF SPECIAL VARY CODE      */
*   IF $NORELDV='0'B THEN           /* CLEANUP TOLTEP                */
@RF00093 TM    $NORELDV(WAPTR),B'00000010'                         0103
         BNZ   @RF00103                                            0103
*     CALL I01C0060;                /* RELEASE DEVICES AND CORE      */
         L     @15,@CV00600                                        0104
         BALR  @14,@15                                             0104
*   $NORELDV='0'B;                  /* RESET BIT                     */
@RF00103 NI    $NORELDV(WAPTR),B'11111101'                         0105
*   R13=SVETC035(2);                /* RESTORE CALLERS SAVEAREA PTR  */
         L     R13,SVETC035+4(,WAPTR)                              0106
*/* ATDSPLY   INVOKED.                                               */
*/********************************************************************/
*/* THERE HAVE BEEN NO ATBUILD INCLUSIONS IN THIS COMPILATION.       */
*/********************************************************************/
*/* END OF ATDSPLY.                                                  */
*                                                                  0107
*   END ISTTC035;                   /* END OF DTERM                  */
@EL00001 DS    0H                                                  0107
@EF00001 DS    0H                                                  0107
@ER00001 LM    @14,@12,12(@13)                                     0107
         BR    @14                                                 0107
@DATA    DS    0H
@CH00267 DC    H'68'
         DS    0F
@TF00001 DS    F
         DS    0F
@CF00043 DC    F'1'
@CV00578 DC    V(ISTSC032)
@CV00600 DC    V(I01C0060)
@CV00601 DC    V(ISTIC002)
         DS    0D
$LOGOFFE DS    F
@CC00585 DC    C' T'
         DS    CL2
PURPARM  DS    CL13
         ORG   PURPARM
@NM00057 DS    FL4
PURCDS   DS    AL4
PURTECB  DS    AL4
@NM00058 DC    XL1'01'
         ORG   PURPARM+13
         DS    CL3
$TCA08   DS    CL13
         ORG   $TCA08
$TCB08   DC    A(466)
$TCC08   DC    A(0)
$TCD08   DC    B'00000000'
$TCE08   DC    X'FFFFFFFF'
         ORG   $TCA08+13
         DS    CL3
$TCA09   DS    CL13
         ORG   $TCA09
$TCB09   DC    A(198)
$TCC09   DC    A(0)
$TCD09   DC    B'00000000'
$TCE09   DC    X'FFFFFFFF'
         ORG   $TCA09+13
         DS    CL3
$TCA10   DS    CL13
         ORG   $TCA10
$TCB10   DC    A(158)
$TCC10   DC    A(0)
$TCD10   DC    B'10000000'
$TCE10   DC    X'FFFFFFFF'
         ORG   $TCA10+13
         DS    CL3
PATCH    DC    40F'0'
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
I        EQU   @04
WAPTR    EQU   @02
R1       EQU   @01
R13      EQU   @13
TOLTEPWA EQU   0
$SCTTBLE EQU   TOLTEPWA
$TESTOPT EQU   $SCTTBLE+2
$ERROPT  EQU   $SCTTBLE+3
$ASTERIK EQU   $ERROPT
$NOCNTRL EQU   $ERROPT
$PDEVFLG EQU   $SCTTBLE+10
$CDSFLGS EQU   $SCTTBLE+11
$CDS8T19 EQU   $SCTTBLE+20
$EXECFLG EQU   $SCTTBLE+33
$RTNSLCT EQU   $EXECFLG
$LSTPDEV EQU   $EXECFLG
$CLEANUP EQU   $EXECFLG
$OLTFLGS EQU   $SCTTBLE+36
$CLEANRT EQU   $OLTFLGS
$OLTFLG2 EQU   $SCTTBLE+37
$TOTFLG1 EQU   $SCTTBLE+38
$CURELOD EQU   $TOTFLG1
$ROUTMSK EQU   $SCTTBLE+40
#MSGIDAC EQU   $SCTTBLE+78
$CDA     EQU   TOLTEPWA+100
$SCTPTR  EQU   $CDA+16
$RCA     EQU   $CDA+44
$OLTPTR  EQU   $CDA+52
$LOWADDR EQU   $OLTPTR
$HIMOREC EQU   $CDA+60
$COMMFLG EQU   TOLTEPWA+224
$FLAG1   EQU   $COMMFLG
$NORELDV EQU   $FLAG1
$OLTACT  EQU   $FLAG1
$FLAG2   EQU   $COMMFLG+1
$NRMTERM EQU   $FLAG2
$FLAG8   EQU   $COMMFLG+7
$TCECM   EQU   $FLAG8
$FLAG12  EQU   $COMMFLG+11
$VRYSFT  EQU   $FLAG12
$VRYHRD  EQU   $FLAG12
$VARYINP EQU   $FLAG12
$FLAG13  EQU   $COMMFLG+12
$OLTMACC EQU   $FLAG13
$TEP1ST  EQU   $FLAG13
$TEP2ND  EQU   $FLAG13
$DEVTBLE EQU   TOLTEPWA+240
$DEVCDS  EQU   $DEVTBLE
$DEVUNAD EQU   $DEVCDS
@NM00041 EQU   $DEVUNAD+2
$DEVFEAT EQU   $DEVCDS+4
$DEVCDSF EQU   $DEVCDS+9
$DEVSDCF EQU   $DEVCDS+10
$$SYMNME EQU   $DEVCDS+12
$DEVFLG1 EQU   $DEVTBLE+20
$EVNCPLT EQU   $DEVFLG1
$ATTNEXP EQU   $DEVFLG1
$DEVACT  EQU   $DEVFLG1
$INTOCC  EQU   $DEVFLG1
$DEVFLG2 EQU   $DEVTBLE+21
$DEVTECB EQU   $DEVTBLE+22
$OPIS    EQU   $DEVTECB
$OPND    EQU   $DEVTECB+2
$DEVFLG3 EQU   $DEVTBLE+27
$SIOFLG  EQU   $DEVFLG3
$IFTOUT  EQU   $DEVTBLE+36
$DEVSESP EQU   $IFTOUT
$SSCPDAF EQU   $IFTOUT+6
$LDNCBPT EQU   $DEVTBLE+48
$RNINFO  EQU   $DEVTBLE+56
$DEVFLG5 EQU   $RNINFO+8
$DEVFLG4 EQU   $DEVTBLE+65
$IGLXIFB EQU   $DEVFLG4
$DEVCNTS EQU   TOLTEPWA+1464
$SLTBL   EQU   TOLTEPWA+1468
$SYMBOLC EQU   $SLTBL+5
$RUNTEST EQU   $SLTBL+13
$TESTFLG EQU   $SLTBL+21
$FINAL   EQU   $TESTFLG
$SECLST  EQU   $SLTBL+22
$PRIMADR EQU   $SLTBL+130
$HIGHRTN EQU   $SLTBL+134
$INBUFR  EQU   TOLTEPWA+2104
#EXITA   EQU   TOLTEPWA+2632
$CCOMDAT EQU   TOLTEPWA+2644
$CFLGS   EQU   $CCOMDAT+16
$24FEMSG EQU   TOLTEPWA+2681
$24CATMG EQU   $24FEMSG+11
@NM00050 EQU   TOLTEPWA+2776
$OUNTPTR EQU   @NM00050+4
$NSPTR   EQU   $OUNTPTR
$NSCNT   EQU   @NM00050+10
$ENXX    EQU   @NM00050+15
$IMITX   EQU   $ENXX
SVESC033 EQU   TOLTEPWA+3160
SVECC013 EQU   TOLTEPWA+3232
SVEIC003 EQU   TOLTEPWA+3592
SVESC022 EQU   TOLTEPWA+3736
SVETC035 EQU   TOLTEPWA+3880
SVECC011 EQU   TOLTEPWA+4024
#EXIT    EQU   0
@NM00053 EQU   0
RTNDISP  EQU   @NM00053+10
INST     EQU   @NM00053+12
#MSGID   EQU   @NM00053+16
$NEWSPRF EQU   0
$RTN#    EQU   $NEWSPRF
#FLAGS   EQU   $NEWSPRF+16
#MSGIDRQ EQU   #FLAGS
OLTENTRY EQU   0
BACKSAVE EQU   0
SVECC012 EQU   SVESC022
SVEIC00A EQU   SVEIC003
SVEIC004 EQU   SVEIC003
SVEIC005 EQU   SVEIC003
SVESC02A EQU   SVESC022
SVESC02B EQU   SVESC022
SVESC02D EQU   SVESC022
SVESC02E EQU   SVESC022
SVESC02F EQU   SVECC013
SVESC024 EQU   SVESC022
SVESC027 EQU   SVESC022
SVESC029 EQU   SVESC033
SVESC031 EQU   SVECC013
SVESC032 EQU   SVECC011
SVETC037 EQU   SVEIC003
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
$RME     EQU   $NEWSPRF+36
@NM00056 EQU   $NEWSPRF+35
$ECA     EQU   $NEWSPRF+32
$DCHB    EQU   $NEWSPRF+28
$MOSIZE  EQU   $NEWSPRF+24
$RTSIZE  EQU   $NEWSPRF+20
$COUNT   EQU   $NEWSPRF+18
$REFNUM  EQU   $NEWSPRF+17
@NM00055 EQU   #FLAGS
#PLKMCOR EQU   #FLAGS
@NM00054 EQU   #FLAGS
$VIRTUAL EQU   #FLAGS
$PLINK$  EQU   $NEWSPRF+12
$SCTREQ  EQU   $NEWSPRF+11
$RM      EQU   $NEWSPRF+9
$CTYPE   EQU   $NEWSPRF+8
$CCLASS  EQU   $NEWSPRF+7
$CFEAT   EQU   $NEWSPRF+6
$CMODEL  EQU   $NEWSPRF+5
$TYPE    EQU   $NEWSPRF+4
$CLASS   EQU   $NEWSPRF+3
$FEAT    EQU   $NEWSPRF+2
$MODEL   EQU   $NEWSPRF+1
LEVEL    EQU   @NM00053+8
SECTID   EQU   @NM00053
SVECC010 EQU   TOLTEPWA+3952
SVESC030 EQU   TOLTEPWA+3808
SVESC020 EQU   TOLTEPWA+3664
SVEIC002 EQU   TOLTEPWA+3520
SVECC014 EQU   TOLTEPWA+3376
SVESC120 EQU   TOLTEPWA+3304
SVESC025 EQU   TOLTEPWA+3088
@NM00052 EQU   TOLTEPWA+2980
$RPLERR  EQU   TOLTEPWA+2977
@NM00051 EQU   TOLTEPWA+2976
$R13PR3  EQU   TOLTEPWA+2972
$CEINT2  EQU   TOLTEPWA+2968
$CEINT1  EQU   TOLTEPWA+2964
$MSGGET  EQU   TOLTEPWA+2960
$ACQLIST EQU   TOLTEPWA+2956
$R4SAVE1 EQU   TOLTEPWA+2952
$CLSISS  EQU   TOLTEPWA+2950
$CLSCNT  EQU   TOLTEPWA+2948
$CUTABLE EQU   TOLTEPWA+2868
$BUFSZ2  EQU   TOLTEPWA+2864
$RESID2  EQU   TOLTEPWA+2860
$OLTCCW2 EQU   TOLTEPWA+2856
$ENDBFR2 EQU   TOLTEPWA+2852
$1STBFR2 EQU   TOLTEPWA+2848
$TECB2   EQU   TOLTEPWA+2844
$BUFSZ1  EQU   TOLTEPWA+2840
$RESID1  EQU   TOLTEPWA+2836
$OLTCCW1 EQU   TOLTEPWA+2832
$ENDBFR1 EQU   TOLTEPWA+2828
$1STBFR1 EQU   TOLTEPWA+2824
$TECB1   EQU   TOLTEPWA+2820
$WAITIME EQU   TOLTEPWA+2816
$TRTN#   EQU   TOLTEPWA+2815
$WIODEV  EQU   TOLTEPWA+2814
$RQSTSZE EQU   TOLTEPWA+2812
$RQSTPTR EQU   TOLTEPWA+2808
$R4SAVE  EQU   TOLTEPWA+2804
$PARTADR EQU   TOLTEPWA+2800
$TBSDATA EQU   TOLTEPWA+2796
$CTWIDTH EQU   TOLTEPWA+2795
$CTLINE  EQU   TOLTEPWA+2794
$APWIDTH EQU   TOLTEPWA+2793
$APLINE  EQU   TOLTEPWA+2792
$INDEX   EQU   $IMITX
$UMXX    EQU   @NM00050+14
$NSXX    EQU   @NM00050+12
$ATACNT  EQU   $NSCNT
$CTR     EQU   @NM00050+8
$ATAPTR  EQU   $NSPTR
$DDRPTR  EQU   @NM00050
$DTORESP EQU   TOLTEPWA+2712
$APNAME  EQU   TOLTEPWA+2704
$24SYMNE EQU   $24CATMG+4
$24DEVAD EQU   $24CATMG
$24RTN#  EQU   $24FEMSG+8
$ESECTID EQU   $24FEMSG
$24FLGS  EQU   TOLTEPWA+2680
$24SAVE2 EQU   TOLTEPWA+2676
$24SAVE1 EQU   TOLTEPWA+2672
$24UNADR EQU   TOLTEPWA+2668
$24SAV13 EQU   TOLTEPWA+2664
$24RETCD EQU   TOLTEPWA+2663
$MACID   EQU   TOLTEPWA+2661
$CSPARE  EQU   $CFLGS
$C2WAY   EQU   $CFLGS
$CINCT   EQU   $CCOMDAT+12
$CINADR  EQU   $CCOMDAT+8
$COUTCT  EQU   $CCOMDAT+4
$COUTAD  EQU   $CCOMDAT
ROOTLOC  EQU   TOLTEPWA+2640
$RETREG  EQU   TOLTEPWA+2636
$WORK    EQU   TOLTEPWA+2376
$EXTA    EQU   TOLTEPWA+2320
$PASSONA EQU   TOLTEPWA+2264
$TRMINPT EQU   TOLTEPWA+2184
$BUFFER  EQU   TOLTEPWA+1976
$TLTRPL3 EQU   TOLTEPWA+1856
$TLTRPL2 EQU   TOLTEPWA+1736
$TLTRPL1 EQU   TOLTEPWA+1616
@NM00049 EQU   $SLTBL+135
$CTSTPT  EQU   $SLTBL+128
$TSTCNT  EQU   $SLTBL+126
$SECFLGS EQU   $SECLST+3
$SECTION EQU   $SECLST
$SECACT  EQU   $TESTFLG
$CANTRUN EQU   $TESTFLG
$TESTSUF EQU   $RUNTEST+5
$TESTNUM EQU   $RUNTEST+1
$LETPRF  EQU   $RUNTEST
$FAMILY  EQU   $SLTBL
$CDEVPT  EQU   TOLTEPWA+1466
$FEEDBCK EQU   $DEVTBLE+66
$WTISUED EQU   $DEVFLG4
$EXIOISD EQU   $DEVFLG4
$REMWRIT EQU   $DEVFLG4
$REMDONE EQU   $DEVFLG4
$2NDUSED EQU   $DEVFLG4
$1STUSED EQU   $DEVFLG4
$EXIOLV3 EQU   $DEVFLG4
@NM00048 EQU   $DEVFLG5
$ASCII   EQU   $DEVFLG5
$DEVLU   EQU   $DEVFLG5
$OPNDFAL EQU   $DEVFLG5
$ACQNCB  EQU   $DEVFLG5
$REMOTE  EQU   $DEVFLG5
$ENDNODE EQU   $DEVFLG5
$LINENME EQU   $RNINFO
$CID     EQU   $DEVTBLE+52
$DVCOL   EQU   $LDNCBPT+2
$DVROW   EQU   $LDNCBPT
$NCSPLP  EQU   $DEVTBLE+44
$DVLN    EQU   $SSCPDAF
$DAF     EQU   $DEVSESP+4
$VARYPAB EQU   $DEVSESP
$SYSMN   EQU   $DEVTBLE+28
@NM00047 EQU   $DEVFLG3
$CLRSNT  EQU   $DEVFLG3
$OLTERR  EQU   $DEVFLG3
$SRTEST  EQU   $DEVFLG3
$DVSNDOK EQU   $SIOFLG
$POLLREQ EQU   $DEVFLG3
$ACQRED  EQU   $DEVFLG3
$NOTDEV  EQU   $DEVFLG3
$DVINCT  EQU   $DEVTBLE+26
$DVBRKST EQU   $OPND+1
$DVBRKSN EQU   $OPND
$DVSEQNO EQU   $OPIS
$CEINTRP EQU   $DEVFLG2
$TESTMDE EQU   $DEVFLG2
$DEVALOC EQU   $DEVFLG2
$ALLDATA EQU   $DEVFLG2
$ENDCNTL EQU   $DEVFLG2
$CTLDEV  EQU   $DEVFLG2
$NOCDS   EQU   $DEVFLG2
$DATAIN  EQU   $DEVFLG2
$PRIMARY EQU   $DEVFLG1
$DVCTBYT EQU   $INTOCC
$DVLGMDE EQU   $ATTNEXP
$DVSPRM  EQU   $EVNCPLT
$GRABBED EQU   $DEVFLG1
$CATASTR EQU   $DEVFLG1
$LETGO   EQU   $DEVFLG1
$CURELEM EQU   $$SYMNME+4
$MSGOTSD EQU   $$SYMNME
$EXTDEV  EQU   $DEVCDS+11
@NM00046 EQU   $DEVSDCF
$NOTPRIM EQU   $DEVSDCF
@NM00045 EQU   $DEVCDSF
@NM00044 EQU   $DEVCDSF
@NM00043 EQU   $DEVCDSF
$CDSNAME EQU   $DEVCDSF
$EXTRN   EQU   $DEVCDSF
$CEVOLUM EQU   $DEVCDSF
$SHARD   EQU   $DEVCDSF
$DEVFPM  EQU   $DEVCDSF
$DEVCNT  EQU   $DEVCDS+8
$DEVTYPE EQU   $DEVFEAT+3
$DEVCLAS EQU   $DEVFEAT+2
$DEVFRRS EQU   $DEVFEAT+1
$DEVMOD  EQU   $DEVFEAT
$DEVRDGT EQU   @NM00041+1
$DEVCTLU EQU   @NM00041+1
$DEVCHAN EQU   @NM00041
@NM00042 EQU   @NM00041
$CTINDX  EQU   $DEVUNAD
@NM00040 EQU   $COMMFLG+15
@NM00039 EQU   $COMMFLG+14
@NM00038 EQU   $COMMFLG+13
$CATMSG  EQU   $FLAG13
$PRMPTSW EQU   $FLAG13
$DEVENT  EQU   $FLAG13
$LGON    EQU   $FLAG13
$CTLOGON EQU   $FLAG13
@NM00037 EQU   $FLAG12
$ENDTEST EQU   $FLAG12
$POSTFLG EQU   $FLAG12
$OPTMSG  EQU   $FLAG12
@NM00036 EQU   $COMMFLG+10
@NM00035 EQU   $COMMFLG+9
@NM00034 EQU   $COMMFLG+8
$VS2     EQU   $FLAG8
$VS1     EQU   $FLAG8
$EDOS    EQU   $FLAG8
@NM00033 EQU   $FLAG8
$TWOWAY  EQU   $FLAG8
@NM00032 EQU   $FLAG8
@NM00031 EQU   $COMMFLG+6
@NM00030 EQU   $COMMFLG+5
@NM00029 EQU   $COMMFLG+4
@NM00028 EQU   $COMMFLG+3
@NM00027 EQU   $COMMFLG+2
$PARTIAL EQU   $FLAG2
$VALDTST EQU   $FLAG2
$VALDDEV EQU   $FLAG2
$DBLSLSH EQU   $FLAG2
$NDR     EQU   $FLAG2
@NM00026 EQU   $FLAG2
@NM00025 EQU   $FLAG1
$OPTCHNG EQU   $FLAG1
$DEVCHNG EQU   $FLAG1
$TESTCNG EQU   $FLAG1
$CNSLFG  EQU   $FLAG1
$TEP3RD  EQU   $FLAG1
@NM00024 EQU   $CDA+120
$CUCNT   EQU   $CDA+118
@NM00023 EQU   $CDA+117
$PRTFORM EQU   $CDA+116
$OPISCNT EQU   $CDA+114
$OPNDCNT EQU   $CDA+112
$GETMSZE EQU   $CDA+110
$GRCNTS  EQU   $CDA+108
$CTLCNT  EQU   $CDA+106
$ACTLVL  EQU   $CDA+105
$PRNTLVL EQU   $CDA+104
$ERRCNTA EQU   $CDA+102
$TLCNT   EQU   $CDA+100
$TIMEALW EQU   $CDA+96
$PTRAREA EQU   $CDA+92
$GETMPTR EQU   $CDA+88
$R13PTRT EQU   $CDA+84
$R13PTR  EQU   $CDA+80
$TEPEND  EQU   $CDA+76
$PLINKDL EQU   $CDA+72
$TEPBEGN EQU   $CDA+68
$FRELPTR EQU   $CDA+64
$HIGHADR EQU   $HIMOREC
$LOMOREC EQU   $CDA+56
$ENDCOMM EQU   $CDA+48
$COMMON  EQU   $RCA
$SLASHAD EQU   $CDA+32
$PASSON  EQU   $CDA+28
$TOLBRTB EQU   $CDA+24
$SCTPTR8 EQU   $CDA+20
$TBWDPTR EQU   $CDA+12
$TFWDPTR EQU   $CDA+8
@NM00022 EQU   $CDA
@NM00021 EQU   $SCTTBLE+98
$SCTLWTC EQU   $SCTTBLE+96
$SCTLWTA EQU   $SCTTBLE+92
#EXT     EQU   $SCTTBLE+88
#PASS    EQU   $SCTTBLE+84
#TABLE   EQU   $SCTTBLE+80
@NM00020 EQU   $SCTTBLE+71
$RETMASK EQU   $SCTTBLE+70
$R249255 EQU   $ROUTMSK+29
$R241248 EQU   $ROUTMSK+28
$R233240 EQU   $ROUTMSK+27
$R225232 EQU   $ROUTMSK+26
$R217224 EQU   $ROUTMSK+25
$R209216 EQU   $ROUTMSK+24
$R201208 EQU   $ROUTMSK+23
$R193200 EQU   $ROUTMSK+22
$R185192 EQU   $ROUTMSK+21
$R177184 EQU   $ROUTMSK+20
$R169176 EQU   $ROUTMSK+19
$R161168 EQU   $ROUTMSK+18
$R153160 EQU   $ROUTMSK+17
$R145152 EQU   $ROUTMSK+16
$R137144 EQU   $ROUTMSK+15
$R129136 EQU   $ROUTMSK+14
$R121128 EQU   $ROUTMSK+13
$R113120 EQU   $ROUTMSK+12
$R105112 EQU   $ROUTMSK+11
$R097104 EQU   $ROUTMSK+10
$R089096 EQU   $ROUTMSK+9
$R081088 EQU   $ROUTMSK+8
$R073080 EQU   $ROUTMSK+7
$R065072 EQU   $ROUTMSK+6
$R057064 EQU   $ROUTMSK+5
$R049056 EQU   $ROUTMSK+4
$R041048 EQU   $ROUTMSK+3
$R033040 EQU   $ROUTMSK+2
$R025032 EQU   $ROUTMSK+1
$R017024 EQU   $ROUTMSK
$TOTFLG2 EQU   $SCTTBLE+39
@NM00019 EQU   $TOTFLG1
@NM00018 EQU   $TOTFLG1
@NM00017 EQU   $TOTFLG1
$CTEQTT  EQU   $TOTFLG1
@NM00016 EQU   $TOTFLG1
@NM00015 EQU   $TOTFLG1
$LINESHR EQU   $TOTFLG1
@NM00014 EQU   $OLTFLG2
@NM00013 EQU   $OLTFLG2
@NM00012 EQU   $OLTFLG2
@NM00011 EQU   $OLTFLG2
@NM00010 EQU   $OLTFLG2
@NM00009 EQU   $OLTFLG2
@NM00008 EQU   $OLTFLG2
$TALK    EQU   $OLTFLG2
$DYCOM   EQU   $OLTFLGS
@NM00007 EQU   $OLTFLGS
$TRACE   EQU   $OLTFLGS
$RETCODE EQU   $OLTFLGS
$CONTCB  EQU   $OLTFLGS
$RETAIN  EQU   $OLTFLGS
$MANINTV EQU   $OLTFLGS
$OLTSIZE EQU   $SCTTBLE+34
$QSCTMOD EQU   $EXECFLG
$CTRLMOD EQU   $EXECFLG
$ERRCNT  EQU   $EXECFLG
$MULTDEV EQU   $EXECFLG
@NM00006 EQU   $EXECFLG
$RMSKCNT EQU   $SCTTBLE+32
$SYNAME  EQU   $CDS8T19+4
$EXTSIG  EQU   $CDS8T19+3
$CDFLGS  EQU   $CDS8T19+1
$CDSCNT  EQU   $CDS8T19
$PDEVDSC EQU   $SCTTBLE+16
$PDEVADR EQU   $SCTTBLE+12
$COMMCN  EQU   $CDSFLGS
$CUSTSYM EQU   $CDSFLGS
$TWOCHSW EQU   $CDSFLGS
$SYMNAME EQU   $CDSFLGS
$EXTINTC EQU   $CDSFLGS
$CEVOL   EQU   $CDSFLGS
$SHARED  EQU   $CDSFLGS
$FPM     EQU   $CDSFLGS
$LASTSUB EQU   $PDEVFLG
@NM00005 EQU   $PDEVFLG
@NM00004 EQU   $PDEVFLG
@NM00003 EQU   $PDEVFLG
$LASTDEV EQU   $PDEVFLG
@NM00002 EQU   $PDEVFLG
$EXFILPT EQU   $PDEVFLG
$FPMOLD  EQU   $PDEVFLG
$TSSSYM  EQU   $SCTTBLE+8
$SCTLEVL EQU   $SCTTBLE+7
$DRIVER  EQU   $SCTTBLE+6
$RT0916  EQU   $SCTTBLE+5
$RT0108  EQU   $SCTTBLE+4
$LOOPTST EQU   $ERROPT
$LOOPERR EQU   $ERROPT
$NERRPRT EQU   $ERROPT
$ALTPRNT EQU   $ERROPT
$CATERR  EQU   $ERROPT
$TESTERR EQU   $ERROPT
$FSTCOMM EQU   $TESTOPT
$INDEFLP EQU   $TESTOPT
$NOPRT   EQU   $TESTOPT
$PARAPRT EQU   $TESTOPT
@NM00001 EQU   $TESTOPT
$ERRLPCT EQU   $SCTTBLE
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RT00039 EQU   T35C0080
@ENDDATA EQU   *
         END   ISTTC035,(C'PLS0927',0701,76244)
