         SPACE 3
*
*  MODULE      IHDGSP01
*
*  TITLE       INITIATE GRAPHIC SUBROUTINE PACKAGE
*
*  LEVEL       001
*
*  FUNCTION    INITIALIZES GSPCB, ELIMINATING NEED FOR IFFAAA01
*
*  ENTRY       FROM           COBOL    PROGRAM
*              AT             INGSP
*
*  EXITS       NORMAL         TO CALLER, RETURN CODE = 0
*              ERROR          TO CALLER, ARG 1 SET TO 0.
*
*  EXT REF     MODULES        NONE
*
*              MACROS         GETMAIN            SAVE
*                             FREEMAIN           RETURN
*                             LOAD
*
*  INPUT       REG 1          POINTER TO LIST OF ARGUMENT ADDRESSES
*
*                                 ARG 1 ADDRESS OF FIELD INTO WHICH
*                                       GSPCB ADDRESS IS PLACED
*
*                                 ARG 2 ADDRESS OF NULL VALUE
*
*                                 ARG 3 OPTIONAL, ADDR OF ERROR EXIT
*                                       ROUTINE
*
*              REG 13-15      OS CONVENTIONAL USE OF SAVE,
*                             RETURN, AND ENTRY POINT.
*
*  OUTPUT      TO USER        ADDRESS OF GSPCB PUT INTO ARG 1
*
         EJECT
         SPACE 3
*************************    REGISTERS      **************************
         SPACE 2
R0ADR    EQU   0         ENTRY POINT ADDRESS OF LOADED ROUTINE
R0SIZE   EQU   0         SIZE OF CORE REQUESTED
R1PARM   EQU   1         SYSTEM PARAMETERS
R2GSPCB  EQU   2         ADDRESS OF GSPCB, SEE DSECT DEFINITION
R7PLIST  EQU   7         ADDRESS OF  LIST CONTAINING ADDRESSES OF ARGS
R9BASE   EQU   9         USED DURING MACRO EXPANSIONS
R10WORKA EQU   10        ADDRESS OF ARG 1
R11WORKB EQU   11
R13SAVE  EQU   13        USED BY LINK MACRO
R14BACK  EQU   14
R15EP    EQU   15
         SPACE 2
*************************    CONSTANTS      **************************
         SPACE
ID       EQU   X'01'          GSPCB ID IS F201
F2       EQU   X'F2'
PERMWK   EQU   1024           1K WORK AREA ALLOWS CONTIGUOUS OVERLAP
*                                  FOR SUBROUTINE COMMUNICATION
         SPACE 2
********************    DISPLACEMENT      CONSTANTS   ****************
         SPACE
ARG1     EQU   0         DISPLACEMENT WITHIN ARG 1 FOR GSPCB ADDRESS
ARG1ADR  EQU   0         DISPLACEMENT WITHIN ARG LIST OF ARG 1
ARG2ADR  EQU   4         DISPLACEMENT WITHIN ARG LIST OF ARG 2
ARG3ADR  EQU   8         DISPLACEMEN WITHIN ARG LIST OF ARG 3
HSA      EQU   4         SAVE AREA DISPLACEMENT FOR ADR OF HIGHER SAVE
HYBYTE   EQU   0         DISPLACEMENT FOR ROUTINE ADDR            M1097
WKDISPL  EQU   4         WORK AREA BEGINS AFTER GSPCB
         EJECT
IHDGSP01 CSECT
*A448500,A651500                                                  M1097
         ENTRY INGSP
INGSP    SAVE  (14,12)
         BALR  R9BASE,0                     ESTABLISH BASE FOR MACROS
         USING *,R9BASE
         SPACE
         LR    R7PLIST,R1PARM               SAVE ADDR LIST
         LA    R0SIZE,PERMWK                GET WORK AREA
         SPACE
         GETMAIN R,LV=(0)
         SPACE
         LR    R2GSPCB,R1PARM               GSPCB ESTABLISHED
         USING GSPCB,R2GSPCB
         XC    GSPCB(GSPCBLNG),GSPCB           PRESET TO ZEROS
         SPACE 2
*      PROCESS ARGUMENT 1,GSPCB ADDRESS
         SPACE
         L     R10WORKA,ARG1ADR(R7PLIST)    GET ADR OF ARG 1
         LTR   R10WORKA,R10WORKA               CHECK IF ONLY ARG
         BM    INGSP020                        IF YES, ERROR
         ST    R2GSPCB,ARG1(R10WORKA)          KEEP GSPCB ADR IN ARG 1
         SPACE 2
*      PROCESS ARGUMENT 2, NULL VALUE
         SPACE
         L     R11WORKB,ARG2ADR(R7PLIST)    GET ADR OF ARG 2
         LTR   R11WORKB,R11WORKB               CHECK FOR ARG 3
         LA    R11WORKB,HYBYTE(R11WORKB)     CLEAR HIGH BYTE      M1097
         ST    R11WORKB,GSPNULLV               KEEP ADDR IN GSPCB
         BM    INGSP005                      IF NO ARG 3, SKIP
         SPACE 2
*      PROCESS ARGUMENT 3, OPTIONAL, ADDRESS OF USER ERROR EXIT ROUTINE
         SPACE
         L     R11WORKB,ARG3ADR(R7PLIST)  GET ADR OF ARG 3
         ST    R11WORKB,GSPAEXIT             KEEP ADDR IN GSPCB
         EJECT
*      INITIALIZE GSPCB
*           1. INSERT CONSTANTS
*           2. INSERT ADDRESS OF LOADED ROUTINES
         SPACE
INGSP005 MVI   GSPSYSID,F2
         MVI   GSPCBID,ID
         LA    R10WORKA,GSPAEXIT+WKDISPL     CALC WORKAREA ADDR
         ST    R10WORKA,GSPAWORK             KEEP ADDR IN GSPCB
         ST    R13SAVE,SAVE+HSA             PREPARE FOR OS CONVENTIONS
         LA    R13SAVE,SAVE
         SPACE 2
         LOAD  EP=IFFAHA12
         ST    R0ADR,GSPASTAT               KEEP ADDR IN GSPCB
         SPACE 2
         LOAD  EP=IFFAHA11
         ST    R0ADR,GSPDCTR2               KEEP ADDR IN GSPCB
         SPACE
INGSP010 L     R13SAVE,SAVE+HSA             NORMAL RETURN
         RETURN (14,12)
         SPACE 2
*       ERROR PROCESSING FOR MISSING NULL, ARG 2
         SPACE
INGSP020 XC    ARG1(4,R10WORKA),ARG1(R10WORKA)   SET ARG 1 TO 0.
         B     INGSP010                          RETURN TO USER
         COPY  GSPCB
GSPCBLNG EQU   *-GSPCB             NUMBER OF BYTES IN GSPCB
SAVE     DS    9D                  SAVE AREA FOR SYSTEM
         END
