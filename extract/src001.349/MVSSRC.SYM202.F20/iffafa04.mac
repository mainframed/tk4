         TITLE 'IFFAFA04 -- STPOS/MVPOS MODULE'             D11
*
*        STPOS AND MVPOS ARE ENTERED FROM DIRECTOR PART 2 WITH THE
*        ADDRESS OF A WORK AREA IN REGISTER 1.  THE FIRST WORD OF THE
*        WORK AREA CONTAINS THE ADDRESS OF THE PARAMETER LIST BELOW.
*
*                             STPOS AND MVPOS
*
*                             INPUT PARAMETER LIST
*
*                             +0  A(GDSVAR)
*                             +4  A(X-COORD)
*                             +8  A(Y-COORD)
*                             +12 A(CORVAL)
*                             +16 A(KEY)
*                             +20 A(GENCODE)
*
*        EXTERNAL ROUTINES CALLED:
*
*        SCALE-IFFAHA06
*        SCISSOR-IFFAHA07
*        KEY TABLE MANAGEMENT- IFFAHA03
*        DATA GENERATOR-IFFAHA04
*        UPDATE-IFFAHA13 AND IFFAHA14
*        EXTERNAL MACROS USED:
*
*        LINK
*
         EJECT
*        MVPOS AND STPOS WILL SPEND A GOOD PORTION OF ITS TIME
*        BUILDING A PARAMETER LIST WHICH IS USED AS THE INPUT
*        PARAMETER LIST TO SCALE, SCISSOR, DATA GENERATOR, AND
*        UPDATE.
*
*        WORD 0 IS THE KEY WHICH IS RETURNED TO THE USER.  THE FIRST
*        HALFWORD CONTAINS THE LENGTH OF THE ELEMENT AND THE SECOND
*        HALFWORD CONTAINS THE LOGICAL START ADDRESS OF THE ELEMENT.
*
*        WORD 1 CONTAINS BIT SWITCHES.
*        BIT 0: 0=SINGLE ENTRY/1=MULTIPLE ENTRY
*        BIT 1: INITIALIZED TO ZERO.  SET BY DATA GEN TO SHOW IF
*        FOR A SINGLE ENTRY IF THE DATA CONTAINS A SET MODE ORDER.
*        BITS 2,3,4:
*        000 IS VECTOR INPUT
*        010 IS POINT INPUT
*        BIT 5: 0=OMIT/1=INCLUDE
*        BITS 6&7:
*        00 IS ABSOLUTE OUTPUT
*        01 IS INCREMENTAL OUTPUT
*        11 IS OPTIMIZED OUTPUT
*        BITS 8-15: ARE RESERVED AND INITIALIZED TO ZERO. DATA
*        GEN WILL PLACE THE BYTE OF DATA CONTAINING THE BEAM BIT
*        HERE IF IT IS A SINGLE ENTRY WHICH IS KEYED OR CORRELATED.
*        BITS 16&17:
*        00 IS FIRST PASS
*        01 IS NOT FIRST PASS, NOT LAST PASS
*        11 IS LAST PASS
*        FOR SINGLE ELEMENTS THIS IS SET TO FIRST PASS.
*        BIT 18: 0=DATA NOT KEYED/1=DATA KEYED
*        BIT 19: 0=DATA NOT CORRELATED/1=DATA CORRELATED
*        BIT 20: 0=BEAM OFF/1=BEAM ON
*        BIT 21: 0=REPOSITION/1=NO REPOSITIONING
*        BITS 22&23: RESERVED AND SET TO ZERO
*        BIT 24: 0=NOT PART OF A SUBROUTINE/1:PART OF A SUBROUTINE
*        BIT 25: 0=NOT PART OF A SEQUENCE/1=PART OF A SEQUENCE
*        BITS26-31: RESERVED AND SET TO ZERO
*
*
*
         EJECT
*        WORD 2 CONTAINS THE CORVAL
*
*        WORD 3 CONTAINS THE ADDRESS OF THE KEY.
*
*        WORD 4 CONTAINS THE ADDRESS OF THE GDSCB.
*
*        WORDS5,6,7&8: ARE SET TO ZERO AND IF A POSITIONING
*        VECTOR IS REQUIRED BECAUSE OF PREVIOUS SCISSORING, SCISSOR
*        WILL FILL THE FIELDS IN WITH X ABSOLUTE, Y ABSOLUTE,
*        X INCREMENTAL, AND Y INCREMENTAL FOR THE POSITIONING
*        VECTOR.
*
*        WORD 9 CONTAINS X ABSOLUTE.
*
*        WORD 10 CONTAINS Y ABSOLUTE.
*
*        WORD 11 CONTAINS X INCREMENTAL.
*
*        WORD 12 CONTAINS Y INCREMENTAL.
*
*        THE ABOVE WORDS WILL BE SET FROM THE INPUT PASSED AS EITHER
*        INCREMENTAL OR ABSOLUTE IN USERS UNITS.  SCALE WILL CONVERT
*        TO RASTER UNITS AND FILL IN THE FORM NOT PASSED.
*
*        WORD 13 CONTAINS THE TOTAL X INCREMENT THUS FAR.
*
*        WORD 14 CONTAINS THE TOTAL Y INCREMENT THUS FAR.
*
*        THE ABOVE WORDS ARE USED IF AN INCREMENTAL REPOSITIONING
*        VECTOR IS REQUIRED TO REPOSITION WHEN THE ELEMENT IS IN
*        OMIT STATUS.
*
*        WORD 15 CONTAINS THE ELEMENT COUNT.  IT IS SET TO ZERO
*        ORIGINALLY AND INCREMENTED BY SCALE. IF THERE IS A
*        SCALING OR SCISSORING ERROR THE ELEMENT NUMBER IS PLACED
*        IN THE RETURN ARRAY.
*
*
         EJECT
IFFAFA04 CSECT                     ENTRY FOR STPOS
*0876,230000
*0514,157000-159000                                                000A
*2101                                                              5489
*D308600,D311600                                                 YM1963
*C315000-317000,320000,325000-327000,330000,A497200-497400  D11 ZA15418
*A479100-479800,C480000,C483000                             E12 ZA28573
         ENTRY IFFAFA17
         NOPR  0
IFFAFA17 SAVE  (14,12)             ENTRY FOR MOVPOS
         BALR  BASE,0
         USING *,BASE
         L     REGB,ENTRYADD
         LA    REGFIFTN,0(REGFIFTN)
         SR    REGB,REGFIFTN       REGB=0 ENTRY BY MOVPOS
*                                  REGB=2 ENTRY BY SETPOS
         LR    WORK,PARM           WORK CORE
         USING WORKAREA,WORK
         L     ERRREG,WRKRTNCD
         XC    ZERO(20,ERRREG),ZERO(ERRREG) ZERO RTN ARRAY
         L     PARM,WRKPARM        PARAMETER LIST
         ST    SAVE,WRKSAVE+4
         LA    REGA,WRKSAVE
         ST    REGA,EIGHT(SAVE)    CHAIN SAVE AREAS
         LR    SAVE,REGA
         XC    WRKSPVSR(12),WRKSPVSR ZERO SUPERVISOR PARAMETER LIST
         L     GDSREG,GDSPARM(PARM)
         L     GDSREG,ZERO(GDSREG) REMOVE GDSCB ADDR FROM VARIABLE
         USING GDSCB,GDSREG
         CLI   GDSGDSID,GDSIDSW    GDSCB VALID
         BNE   ERR1
         ST    REGB,WRKSWTCH       ZERO SWITCH EXCEPT SET ENTRY TYPE
         MVC   WRKSWTCH+2(1),GDSDATMD SAVE DATA A MODE SWITCH
         SR    REGA,REGA
         EJECT
*
*              FIRST OF ALL A COUNT OF THE PARAMETERS IS MADE.
*              THE PRESENCE OF THE REQUIRED PARAMETERS IS THEN
*              VERIFIED AND THEY ARE PLACED IN THE DATA ARRAY
*
POS00010 TM    ZERO(PARM),LSTPARM  LOOP TO COUNT PARMS EXCEPT GDS
         BO    POS00020
         LA    REGA,ONE(REGA)      ADD TO COUNT
         LA    PARM,FOUR(PARM)
         B     POS00010
POS00020 C     REGA,REQCT          TOO FEW PARAMETERS
         BL    ERR1A2              YES
         C     REGA,MAXCT          TOO MANY PARMS
         BH    ERR1A2              YES
         L     PARM,WRKPARM        START OF PARM LIST
         L     GTMREG,GDSGTMCB     GTMCB ADDR
         USING GTMCB,GTMREG
         L     REGB,GTMGSPCB       GSPCB ADDR
         USING GSPCB,REGB
         LA    REGB,GSPNULLV       NULL VARIABLE
         DROP  REGB
         LR    COUNT,REGA          CT OF PARMS
         LA    REGA,ONE
         CLC   1(3,REGB),UPARM+1(PARM) UVAL MISSISN
         BE    ERR1A               YES
         CLC   1(3,REGB),VPARM+1(PARM) VVAL MISSISN
         LA    REGA,ONE(REGA)      INCR CT
         BE    ERR1A
         S     COUNT,REQCT         NO OF ADDL PARMS
         XC    WRKADDR(LISTLEN),WRKADDR ZERO OUT DATA LIST
         MVC   WRKRTN,WRKRTNCD     MOVE IN ADDR OF RTN ARRAY
         MVC   WRKBITS(FOUR),BITS  MOVE IN DEFAULT SETTINGS
         L     REGA,UPARM(PARM)    ADDR OF U PARM
         TM    GDSFLAGS,SUBR       IS THIS PART OF A BUFFER SUBR
         BZ    POS00023            YES
         OI    WRKBITS+3,MEMSUB    SET FLAG IN KEY
         B     POS00027
         EJECT
POS00023 TM    GDSFLAGS,SEQ        PART OF A SEQUENCE
         BZ    POS00025            NO
         OI    WRKBITS+3,MEMSEQ    YES SET FLAG IN KEY
POS00025 TM    WRKSWTCH+3,SET      SET POSITION
         BO    POS00330
         TM    GDSDATMD,INCRU      U INCR
         BZ    POS00200            NO
POS00027 MVC   WRKXINCR(FOUR),ZERO(REGA) PLACE IN ARRAY
POS00030 L     REGA,VPARM(PARM)    ADDR OF V PARM
         TM    WRKBITS+3,MEMSUB    IS THIS A SUBROUTINE MEMBER
         BO    POS00035            INCREMENTAL IF YES
         TM    GDSDATMD,INCRV      V INCR
         BZ    POS00210            NO
POS00035 MVC   WRKYINCR(FOUR),ZERO(REGA) PLACE IN ARRAY
         SPACE 3
*
*              THE OPTIONAL PARAMETERS ARE CHECKED NEXT. CORVAL
*              AND KEY IF PRESENT ARE PLACED IN THE KEY.  THE
*              LEVEL 2 KEY IF PASSED WILL NOT SET A FLAG IN THE
*              INPUT PARM LIST BECAUSE THE INCLUDE OMIT STRUCTURE
*              IS NOT DESIRED.
*
POS00040 LTR   COUNT,COUNT         ANY OPTIONAL PARMS
         BZ    POS00100            NO
         CLC   1(3,REGB),CORVAL+1(PARM) CORVAL PASSED
         BE    POS00050            NO
         TM    GDSFLAGS,LEVEL2     LEVEL 2
         BO    POS00050            CORVAL ON LEVEL 2 = IGNORD
         L     REGA,CORVAL(PARM)   ADDR OF CORVAL
         MVC   WRKCORVL(FOUR),ZERO(REGA) MOVE IN CORVAL
         OI    WRKBITS+2,CORV      SET CORVAL SW
POS00050 BCTR  COUNT,0             REDUCE COUNT
         LTR   COUNT,COUNT         ALL CHECKED
         BZ    POS00070
         CLC   1(3,REGB),KEY+1(PARM) KEY PASSED     D
         BE    POS00060
         MVC   WRKKEY(FOUR),KEY(PARM) MOVE IN KEY ADDR
         TM    GDSFLAGS,LEVEL2     LEVEL 2 KEY
         BO    POS00060
         OI    WRKBITS+2,KEYSW     SET KEY PASSED SW
         EJECT
*
*              THE GENCODE IS CHECKED.  A KEY OR CORVAL IS REQUIRED
*              FOR CODES 2 AND 3. CODE 2, OMIT, IS NOT VALID FOR
*              A LEVEL 2 GDS.  FOR UPDATE  THE FOLLOWING CONDITIONS
*              ARE CHECKED. UPDATE CANNOT BE CALLED BETWEEN BEGIN
*              AND END SUBROUTINE BECAUSE OF THE INCREMENTAL INPUT/
*              OUTPUT REQUIREMENT. IF THE UPDATE IS OF AN ELEMENT
*              WHICH IS PART OF A SUBROUTINE, THE INPUT IS EXPECTED
*              TO BE INCREMENTAL AND THE OUTPUT WILL BE INCREMENTAL.
*
POS00060 BCTR  COUNT,0             REDUCE COUNT
         LTR   COUNT,COUNT
         BZ    POS00070
         CLC   1(3,REGB),GENCODE+1(PARM) GENCODE PASSED
         BE    POS00070            NO
         L     REGA,GENCODE(PARM)  ADDR OF GENCODE
         L     REGA,ZERO(REGA)     LOAD CODE
         C     REGA,ZEROFLD        CODE VALID
         BNH   ERR1D               NO
         C     REGA,FOURFLD        CODE VALID
         BNL   ERR1D               NO
         C     REGA,ONEFLD         INCLUDE
         BE    POS00070
         CLC   WRKCORVL(8),ZEROFLD KEY OR CORVAL
         BZ    ERR1D
         C     REGA,TWOFLD         OMIT
         BNE   POS00080
         TM    GDSFLAGS,LEVEL2     LEVEL2
         BO    ERR1D               OMIT INVALID FOR LEVEL 2
         NI    WRKBITS,OMIT        TURN OFF INCLUDE SW
POS00070 TM    WRKBITS+2,CORV      CORVAL
         BZ    POS00100
         CLC   WRKCORVL(FOUR),ZEROFLD CORVAL ZERO?
         BE    ERR1C               INVALID CORVAL
         B     POS00100
POS00080 TM    GDSFLAGS,SUBR       SUBR GEN NOW
         BO    ERR1A2              YES, THIS CALL IS ILLOGICAL
         TM    GDSFLAGS,LEVEL2     LEVEL 2
         BO    POS00220
         TM    WRKBITS+2,KEYSW
         BZ    POS00230
         L     REGA,KEY(PARM)      LOAD KEY ADDR
         EJECT
*//
*//      SEARCH ON KEY IN KEY TABLE
*//
         ST    REGA,WRKKADDR       KEY IN PARM LIST
         ST    GDSREG,WRKGDS1      GDSCB ADDR
         LA    REGA,TWOFLD         CODE TO SEARCH ON KEY
         ST    REGA,WRKCODE
POS00085 LA    PARM,WRKGDS1
         L     REGA,GTMGSPCB       GET POINTER TO GSPCB            000A
         L     REGA,FE(REGA)       GET POINTER TO STATUS TABLE     000A
         L     REGFIFTN,ETE(REGA)  GET A&RS OF KEY TABLE MGMT      000A
         BALR  RETURN,REGFIFTN     BRANCH TO KEY TABLE MGMT        000A
         LTR   REGFIFTN,REGFIFTN   SUCCESS
         BNE   ERR1A2              NO
POS00090 MVC   WRKADDR(FOUR),ZERO(PARM) MOVE IN LOG ADDR & LEN
         OC    WRKBITS+3(1),7(PARM) PICK UP SWITCH FOR PART OF SEQ OR S
         ST    PARM,WRKKEY         SAVE ADDR OF KEY IN KEY TALE
         TM    WRKBITS+3,MEMSUB    PART OF A SUBROUTINE
         BZ    POS00095            NO CONTINUE ON
         XC    WRKXABS(16),WRKXABS SSET DATA ARRAY TO ZERO TO REINIT
         L     PARM,WRKPARM        RESET REG1
         L     REGB,UPARM(PARM)    LOAC ADDR OF U
         MVC   WRKXINCR,0(REGB)    PLACE X IN LOC FOR INCREMENTAL
         L     REGB,VPARM(PARM)    LOAD ADDR OF V
         MVC   WRKYINCR,0(REGB)    MOVE IN Y INCREMENT
POS00095 MVI   WRKSWTCH,UPDATE     SET UPDATE SW
         EJECT
*
*              THE OUTPUT MODE IS NEXT SET.  THE SPECIAL CASES ARE
*              HANDLED SEPARATELY.  BUFFER SUBR- OUTPUT ALWAYS
*              INCREMENTAL.   STPOS (EXCEPT IN A BUFFER SUBR)
*              ALWAYS ABSOLUTE. MVPOS SET AS PER GDSGRMOD.
*
POS00100 TM    WRKBITS+3,MEMSUB    MEMBER OF A SUBROUTINE
         BO    POS00370            YES, CHANGE SW FOR MODE
         TM    GDSCURMD,ABS        OUTPUT ABS
         BO    POS00120            YES-ALREADY SET
         TM    WRKSWTCH+3,SET      SETPOS YES-ABS OUTPUT
         BO    POS00120
         TM    GDSCURMD,OPT        OPTIMIZE
         BZ    POS00110            NO
         OI    WRKBITS,OPTIHALF    SET HALF OF OPT SW
POS00110 OI    WRKBITS,OPTINCR     SET OTHER HALF OR INCRE SW
         SPACE 3
*
*              THE BEAM POSITIONS AND SCISSOR FLAGS ARE SAVED
*              IN CASE OF FAILURE. THEN THE DATA IS SCALED.
*              THE SCALE ROUTINE WILL COMPLETE THE DATA ARRAY
*              AND SET IT UP FOR SCISSOR.
*
POS00120 ST    GDSREG,WRKGDS
         MVC   WRKXCURR,GDSXCURR   SAVE GDSCB FIELDS WHICH SCALE
         MVC   WRKYCURR,GDSYCURR   AND SCISSOR MAY CHANGE SO
         MVC   WRKXLAST,GDSXLAST   THAT IN CASE OF NO GENERATION
         MVC   WRKYLAST,GDSYLAST   THEY MAY BE RESET TO WHAT THEY
         MVC   WRKSWTCH+1(ONE),GDSSCISS WERE BEFORE THE CALL
*//
*//      CALL SCALE
*//
         LA    PARM,WRKGDS         PARM LIST
         L     REGFIFTN,STAT(ERRREG) STATUS TABLE
         L     REGFIFTN,SCALE(REGFIFTN) ADDR OF SCALE
         BALR  RETURN,REGFIFTN
         LTR   REGFIFTN,REGFIFTN   SUCCESS
         BNE   POS00180
         EJECT
*              IF THE NO SCISSORING OPTION IS REQUESTED THE
*              GDSXLAST, YLAST, XCURR, AND YCURR OPTIONS
*              MUST BE UPDATED AND THE LAST ON SCREEN SWITCH
*              MUST BE SET. IF IT IS A BUFFER SUBROUTINE, NO
*              SCISSORING OR FIELD UPDATE WILL TAKE PLACE.
*              ALL OTHER CASES WILL GO TO THE SCISSOR ROUTINE.
*
POS00158 TM    GDSFLAGS,SUBR
         BO    POS00160            SUBR NO SCISS OR PTR UPDATING
         TM    GDSSCISS,NOSCISS
         BO    POS00240
*//
*//      CALL SCISSOR
*//
         LA    PARM,WRKGDS         ADDR OF PARM LIST
         L     REGFIFTN,STAT(ERRREG)    STATUS TABLE
         L     REGFIFTN,SCISS(REGFIFTN) ADDR OF SCISSOR
         BALR  RETURN,REGFIFTN
         LTR   REGFIFTN,REGFIFTN
         BNE   ERR4BTAB(REGFIFTN)      USE BRANCH TABLE            9328
*
*              THE VECTOR THAT MAY HAVE BEEN GENERATED BY
*              SCISSORING AS A POSITIONING VECTOR IS ADDED
*              TO THE ACTUAL VECTOR BECAUSE BOTH ARE BLANKED.
*              THE DATA IS THEN GENERATED.
*
         L     REGA,WRKXINCR
         A     REGA,WRKDATA3       ADD TO  POSITIONING
         ST    REGA,WRKXINCR       NEW X INCR
         L     REGA,WRKYINCR
         A     REGA,WRKDATA4       ADD TO POSITIONING
         ST    REGA,WRKYINCR       NEW Y INCR
         XC    WRKDATA1(16),WRKDATA1 ZERO POSITIONING VECT
         SPACE 3
*
*              IF UPDATE, THE UPDATE MODULE IS CALLED TO SET
*              UP THE OUTPUT AREA FOR THE NEW DATA.
*              IF NOT, THE LOGICAL START ADDRESS IS PLACED IN
*              THE KEY.
*
POS00160 CLI   WRKSWTCH,UPDATE     UPDATE
         BE    POS00280            YES, GO TO SET UP GDOAS
         L     REGA,GDSAOACB
         L     REGB,CURRLOG(REGA)  LOGICAL ADDR OF START OF ELEM
         STH   REGB,WRKADDR+2      STORE IN KEY
         EJECT
POS00170 LA    PARM,WRKADDR
*//
*//      CALL  DATA GENERATOR
*//
         L     REGFIFTN,STAT(ERRREG) STATUS TABLE
         L     REGFIFTN,DGEN(REGFIFTN) DATA GEN
         BALR  RETURN,REGFIFTN
         LTR   REGFIFTN,REGFIFTN   SUCCESS?
         BNE   ERR2A               NO ERROR CODE IN RETURN ARRAY
*                                  ALREADY SET BY ROUTINE DETECTING
*                                  ERROR. GDSCB WILL BE RESET & RETURN
*
*              AFTER GENERATION IF UPDATE THE UPDATED ELEMENT
*              IS WRITTEN OUT. OTHERWISE THE LOGICAL LENGTH
*              IS COMPUTED AND THEN THE ROUTINE KEYS IF NECESSARY
*              AND EXITS.
*
         CLI   WRKSWTCH,UPDATE     UPDATE?
         BE    POS00290            YES, WRITE OUT UPDATE
         L     REGA,GDSAOACB                                       5489
         LH    REGB,WRKADDR+2                                      5489
         L     REGA,CURRLOG(REGA)
         SR    REGA,REGB           LENGTH OF ELEMENT
         STH   REGA,WRKADDR        IN KEY
         L     REGA,WRKKEY
         LTR   REGA,REGA           KEY DESIRED
         BZ    POS00175            NO
         MVC   ZERO(FOUR,REGA),WRKADDR MOVE IN LEVEL2 KEY IN VAR
POS00175 TM    WRKBITS+2,CORKEY    KEYED OR CORRELATED LEVEL ONE
         BNE   POS00300            YES
POS00180 L     SAVE,FOUR(SAVE)     RESET SAVE REG
         MVC   GDSDATMD,WRKSWTCH+2 RESET DATA MODE SWITHC
POS00190 RETURN (14,12),T          RETURN
         EJECT
POS00200 MVC   WRKXABS(FOUR),ZERO(REGA) PLACE IN ARRAY
         B     POS00030
POS00210 MVC   WRKYABS(FOUR),ZERO(REGA) PLACE IN ARRAY
         B     POS00040
POS00220 L     REGA,KEY(PARM)      LOAD KEY ADDR
         MVC   WRKADDR(FOUR),ZERO(REGA) MOVE IN KEY
         B     POS00095
         SPACE 3
POS00230 CLC   WRKCORVL(FOUR),ZEROFLD WAS CORVAL ZERO
         BE    ERR1C               YES, ERROR
*/
*/       SEARCH ON CORVAL
*/       KEY ADDR RET IN REG1
         LA    REGA,WRKCORVL       ADDR OF CORVAL
         ST    REGA,WRKKADDR       IN PARM LIST
         LA    REGA,FIVEFLD        CODE.
         ST    REGA,WRKCODE        SEARCH
         ST    GDSREG,WRKGDS1      GDSCB
         B     POS00085            GO TO LINK KEY TO TBC MGT
         EJECT
POS00240 L     REGA,WRKXABS
         ST    REGA,GDSXLAST       UPDATE GDSCB
         SH    REGA,GDSXCURR       COMPUTE ADJUSTED INCREMENT
         ST    REGA,WRKXINCR
         MVC   GDSXCURR,WRKXABS+2
         L     REGA,WRKYABS        NEW BEAM
         ST    REGA,GDSYLAST       POSITION
         SH    REGA,GDSYCURR       COMPUTE ADJ INCR
         ST    REGA,WRKYINCR
         MVC   GDSYCURR,WRKYABS+2
         NI    GDSSCISS,LASTON     SET SCISSOR FLAGS TO LAST ON SCREEN
         B     POS00160
         SPACE 3
POS00280 LA    PARM,WRKADDR        PARM LIST
         L     REGFIFTN,STAT(ERRREG) POINT TO STATUS TABLE  D11 ZA15418
         L     REGFIFTN,UPDH13(REGFIFTN) AND TO IFFAHA13    D11 ZA15418
         BALR  RETURN,REGFIFTN         GOTO IFFAHA13        D11 ZA15418
*//
*//      CALL UPDATE FOR UPDATE GDOAS
*//IFFAHA13 CALLED VIA GSP LOGIC TO MINIMIZE SYS OVRHD      D11 ZA15418
         LTR   REGFIFTN,REGFIFTN   SUCCESS
         BNE   POS00180            NO
         B     POS00170
         EJECT
POS00290 LA    PARM,WRKADDR        PARM LIST
         L     REGFIFTN,STAT(ERRREG) POINT TO STATUS TABLE  D11 ZA15418
         L     REGFIFTN,UPDH14(REGFIFTN) AND TO IFFAHA14    D11 ZA15418
         BALR  RETURN,REGFIFTN     GOTO IFFAHA14            D11 ZA15418
*//
*//      CALL UPDATE TO WRITE OUT UPDATED DATA
*// IFFAHA14 IS CALLED VIA GSP LOGIC TO MINIMIZE SYS OVRHD  D11 ZA15418
         TM    GDSFLAGS,LEVEL2
         BO    POS00180
         L     REGA,WRKKEY
         MVC   0(8,REGA),WRKADDR   REPLACE KEY
         TM    WRKBITS+2,CORV      IS IT CORRELATED
         BZ    POS00180            NO EXIT
         L     REGA,WRKKEY         LOAD ADDR OF KEY IN KEY TBLE
         MVC   8(4,REGA),WRKCORVL  REPLACE VORVAL IN KEY BALE
         B     POS00180
         SPACE 3
POS00300 ST    GDSREG,WRKGDS1      GDSCB FOR KEY TABLE MGT
         LA    REGA,ONEFLD         CODE
         ST    REGA,WRKCODE
         LA    REGA,WRKADDR        KEY ADDR
         ST    REGA,WRKKADDR       IN PARM LIST
         LA    PARM,WRKGDS1
*//      CALL KEY TABLE TO ADD KEY
         L     REGFIFTN,GDSGTMCB  GET ADDR OF GTMCB         E12 ZA28573
         L     REGFIFTN,4(REGFIFTN) POINTER TO GSPCB        E12 ZA28573
         L     REGFIFTN,FE(REGFIFTN) STAT TBL ADDR          E12 ZA28573
         L     REGFIFTN,ETE(REGFIFTN) ADDR OF KEY TBL MGR   E12 ZA28573
         LTR   REGFIFTN,REGFIFTN  LOADED YET?               E12 ZA28573
         BZ    POSLINK            NO USE LINK               E12 ZA28573
         BALR  RETURN,REGFIFTN    BRANCH TO KEY TABLE MGR   E12 ZA28573
         B     POSRTN             CONTINUE AFTER LINK       E12 ZA28573
POSLINK  L     REGD,16             ADDR OF CVT              E12 ZA28573
         L     REGD,CVTLINK(REGD)  LINK LIBRARY DCB
         LINK  EP=IFFAHA03,MF=(E,(1)),SF=(E,WRKSPVSR)
POSRTN   LTR   REGFIFTN,REGFIFTN   SUCCESSFUL               E12 ZA28573
         BNE   ERR3                NO
         B     POS00180
         EJECT
POS00310 OI    GDSDATMD,XRELINC    SET SW X REAL INCREMENTAL
         B     POS00380
POS00320 OI    GDSDATMD,YRELINC    SET SW Y REAL INCRE
         B     POS00110
         SPACE
POS00330 NI    GDSDATMD,ZERO       ZERO SWITCH FOR RESET
         TM    WRKSWTCH+2,REALX    IS REAL THE X
         BM    POS00350            YES
         OI    GDSDATMD,XINTABS    SET X INTEGER ABSOLUTE
POS00340 TM    WRKSWTCH+2,REALY    IS Y REAL
         BM    POS00360            YES
         OI    GDSDATMD,YINTABS    SET Y INTEGER ABSOLUTE
         B     POS00200
         SPACE
POS00350 OI    GDSDATMD,XRELABS    SET X REAL ABSOLUTE
         B     POS00340
POS00360 OI    GDSDATMD,YRELABS    SET Y REAL ABSOLUTE
         B     POS00200
         SPACE
POS00370 NI    GDSDATMD,ZERO       SET SW TO ZERO FOR TEMP RESET
         TM    WRKSWTCH+2,REALX    IS X REAL
         BM    POS00310            YES
         OI    GDSDATMD,XINTINC    SET SW X INTEGER INCRE
POS00380 TM    WRKSWTCH+2,REALY    IS Y REAL
         BM    POS00320            YES
         OI    GDSDATMD,YINTINC    SET SW Y INTEGER  INCREMENTAL
         B     POS00110
         EJECT
ERR1     MVI   PARMERR+3(ERRREG),BADGDS GDSCB ERROR
         B     ERR1A2
ERR1A    LA    REGA,ONE(REGA)      PARM BAD IN REGA ACTUALLY ONE LESS
ERR1A1   ST    REGA,PARMERR(ERRREG) STORE PARM ERROR
ERR1A2   MVI   RTNCODE(ERRREG),PARMSW  SET ERROR SW
         B     POS00180
ERR1B    L     REGA,MAXCT          MAXCT - TOO MANY GO TO ADD ONE TO IT
         B     ERR1A
ERR1C    LA    REGA,CORNO
         B     ERR1A1
ERR1D    LA    REGA,GENNO
         B     ERR1A1
         SPACE 3
ERR2A    MVC   GDSXLAST,WRKXLAST        RESET GDSCB
         MVC   GDSYLAST,WRKYLAST        TO CONDITION
         MVC   GDSXCURR,WRKXCURR        BEFORE CALL
         MVC   GDSYCURR,WRKYCURR
         MVC   GDSSCISS(ONE),WRKSWTCH+1
         TM    WRKSWTCH,UPDATE     UPDATE
         BO    POS00180            YES NO RESET REQUIRED
*//
*//      RESET TO KEY
*//
         MVC   WRKDATA2(20),0(ERRREG) SAVE RETURN ARRAY
         LA    REGA,GDSGDSCB       VAR CONTAINING ADDR OF GDS
         ST    REGA,WRKGDS         IN PARAMETER LIST
         L     REGA,NULL(ERRREG)   NULL FOR CORVAL
         ST    REGA,WRKRTN         IN PARM LIST
         LA    REGA,WRKADDR        ADDRESS OF KEY
         ST    REGA,WRKDATA1       IN PARAMETER LIST
         OI    WRKDATA1,LAST       LAST PARM SW
         LA    REGA,WRKGDS         ADDR OF PARM LIST
         ST    REGA,WRKGDS1        IN WORK AREA
         ST    ERRREG,WRKCODE      ERROR CODE IN PARM LIST
         LA    PARM,WRKGDS1        ADDR OF WRK AREA IN R1
         LINK  EP=IFFAFA12,MF=(E,(1)),SF=(E,WRKSPVSR)
*        LINK TO RESET ROUTINE
         MVC   0(20,ERRREG),WRKDATA2
*        RESET RETURN ARRAY
         B     POS00180
         EJECT
ERR3     OI    RTNCODE(ERRREG),STRG
         MVC   STOR(4,ERRREG),FOURFLD
ERR4BTAB B     ERR2A              STORAGE EXCEEDED                 9328
         B     POS00180      RC=4, NO ORDERS TO GEN, RETURN NORM   9328
         LH    REGA,WRKXCURR RC=8, STPOS SCISSORED. USE CURRENT    9328
         ST    REGA,WRKXABS        LOCATION TO ESTABLISH BEAM POS  9328
         LH    REGA,WRKYCURR       SO INCREMENTAL ORDERS HAVE A    9328
         ST    REGA,WRKYABS        VALID STARTING POINT.           9328
         B     POS00160      BACK TO MAINLINE FOR ORDER GEN        9328
         EJECT
*        REGISTERS
REGZERO  EQU   0                   ZERO
PARM     EQU   1                   PARAMETER
REGA     EQU   2                   GEN
REGB     EQU   3                   GEN
COUNT    EQU   4                   PARM COUNT
WORK     EQU   5                   WORK AREA
ERRREG   EQU   6
GTMREG   EQU   7                   GTMCB
GDSREG   EQU   8                   GDSCB
BASE     EQU   9                   BASE REG
REGC     EQU   10                  GEN
REGD     EQU   11                  GEN
SAVE     EQU   13                  SAVE AREA
RETURN   EQU   14                  RETURN
REGFIFTN EQU   15                  RTN CODE
         EJECT
*        CONSTANTS
ENTRYADD DC    A(IFFAFA17)
BITS     DC    B'00000100'         SINGLE,VECTOR,INCLUDE,ABSOLUTE
         DC    X'00'               RESERVED
         DC    B'00000100'         FIRST PASS,NO KEY-CORVAL-UPDATE-REPO
         DC    X'00'               RESERVED
ZEROFLD  DC    2F'0'
ONEFLD   DC    F'1'
TWOFLD   DC    F'2'
FOURFLD  DC    F'4'
FIVEFLD  DC    F'5'
REQCT    DC    F'2'
MAXCT    DC    F'5'
PATCH    DC    64X'FF'             PATCH AREA               D11
         EJECT
*        DISPLACEMENTS
GDSPARM  EQU   0                   GDSCB PARM
UPARM    EQU   4                   UVAL PARM
VPARM    EQU   8                   VVAL PARM
CORVAL   EQU   12                  CORVAL PARM
KEY      EQU   16                  KEY PARM
GENCODE  EQU   20                  GENCODE PARM
ZERO     EQU   0
GDSIDSW  EQU   3                   SETTING TO SAY GDSCB IS VALID
EIGHT    EQU   8
LSTPARM  EQU   X'80'               SETTING ON LAST PARAMETER
ONE      EQU   1
FOUR     EQU   4
INCRU    EQU   X'50'               DATA MODE U INCR SW
SET      EQU   2                   SETPOS SW
INCRV    EQU   X'05'               DATA MODE V INCR SW
LEVEL2   EQU   X'10'               LEVEL 2 IN GDSFLAGS
CORV     EQU   X'10'               CORVAL SW IN KEY
KEYSW    EQU   X'20'               KEY SW IN KEY
CORKEY   EQU   X'30'               CORVAL OR KEY IN KEY
OMIT     EQU   X'FB'               OMIT SW TO TURN OFF INCLUDE FLAG
ABS      EQU   X'02'               GRAPHIC MODE ABS
OPT      EQU   X'04'               GRAPHIC MODE OPT
OPTIHALF EQU   X'02'               HALF OF OPT SW IN KEY
OPTINCR  EQU   X'01'               OTHER HALF OR INCR SW
SCALERQD EQU   X'40'               SCALE RQD SW
FLOATX   EQU   X'C0'               X INPUT FLOAT
FLOATY   EQU   X'0C'               Y INPUT FLOAT
NOSCISS  EQU   X'10'               NO SCISSOR
UPDATE   EQU   X'FF'               UPDATE IN WORK FLAGS
PARMERR  EQU   16                  PARM ERROR IN RET ARRAY
RTNCODE  EQU   0                   RETURN CODE IN ARRAY
BADGDS   EQU   1                   GDS IN ERROR
CORNO    EQU   4                   CORVAL PARM NUMBER
GENNO    EQU   6                   GENCODE PARM NUMBER
PARMSW   EQU   X'08'               SW TO SAY PARM ERROR RETURN CODE
LISTLEN  EQU   68                  LENGTH OF PARM LIST FOR DATA GEN
LASTON   EQU   X'1F'               TURNS OFF SCISSOR FLAGS TO SAY LAST
*                                  BEAM ON
CURRLOG  EQU   52
SUBR     EQU   X'02'
STRG     EQU   X'10'
STOR     EQU   12
SEQ      EQU   X'04'
MEMSUB   EQU   X'80'
MEMSEQ   EQU   X'40'
EVENFOUR EQU   X'FC'
NULL     EQU   20
STAT     EQU   24
DGEN     EQU   840
SCISS    EQU   876
SCALE    EQU   864
UPDH13   EQU   936                 STATAB DISPL IFFAHA13    D11 ZA15418
UPDH14   EQU   948                 STATAB DISPL IFFAHA14    D11 ZA15418
CVTLINK  EQU   8
REALX    EQU   X'C0'
REALY    EQU   X'0C'
XINTINC  EQU   X'10'
YINTINC  EQU   X'01'
XRELINC  EQU   X'40'
YRELINC  EQU   X'04'
XINTABS  EQU   X'20'
YINTABS  EQU   X'02'
XRELABS  EQU   X'80'
YRELABS  EQU   X'08'
LAST     EQU   X'80'
FE       EQU   48                                                  000A
ETE      EQU   828                                                 000A
         EJECT
*        WORK AREA
WORKAREA DSECT
WRKPARM  DS    F
WRKRTNCD DS    F
WRKSWTCH DS    F
WRKSPVSR DS    3F
WRKSAVE  DS    18F
WRKXCURR DS    H
WRKYCURR DS    H
WRKXLAST DS    F
WRKYLAST DS    F
WRKKEYAD DS    F
WRKADDR  DS    F
WRKBITS  DS    F
WRKCORVL DS    F
WRKKEY   DS    F
WRKGDS   DS    F
WRKRTN   DS    F
WRKDATA1 DS    F
WRKDATA2 DS    F
WRKDATA3 DS    F
WRKDATA4 DS    F
WRKXABS  DS    F
WRKYABS  DS    F
WRKXINCR DS    F
WRKYINCR DS    F
WRKNTUSD DS    2F
WRKENTCT DS    F
WRKGDS1  DS    F
WRKCODE  DS    F
WRKKADDR DS    F
         COPY  GSPCB
         COPY  GTMCB
         COPY  GDSCB
         END
