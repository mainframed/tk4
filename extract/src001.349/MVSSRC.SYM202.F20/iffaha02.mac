*
*        BUFFER MANAGEMENT IS ENTERED FROM SEVERAL ROUTINES FROM
*        SEVERAL DIFFERENT PURPOSES.  THE BUFFER CONTROL TABLE IS
*        INITIALIZED TO ZERO BY INDEV.
*
*        CODE 1
*        ENTRY IS MADE FROM DATA STORE-IFFAHAO5 REQUESTING 128 BYTES
*        OF BUFFER.  THIS IS THE FIRST BUFFER REQUEST FOR THIS GDS.
*        REGISTER ONE CONTAINS THE ADDRESS OF A WORK AREA.  THE
*        FIRST WORD OF THIS WORK AREA CONTAINS THE ADDRESS OF
*        A PARAMETER LIST:
*
*        +0     A(1)
*        +4     A(GDSCB)
*
*        CODE 2
*        ENTRY IS MADE FROM DATA STORE-IFFAHAO5 REQUESTING BUFFER FOR
*        THE FIRST TIME FOR THIS GDS.  REGISTER ONE CONTAINS THE
*        ADDRESS OF A WORK AREA.  THE FIRST WORD OF THIS WORK AREA
*        CONTAINS THE ADDRESS OF A PARAMETER LIST:
*
*        +0     A(2)
*        +4     A(GDSCB)
*        +8     A(SIZE)
*
*        CODE 3
*        ENTRY IS MADE FROM DATA STORE-IFFAHAO5 REQUESTING ADDITIONAL
*        BUFFER FOR A GDS.  THE AMOUNT OF BUFFER REQUIRED WILL BE
*        TAKEN FROM THE GDSGDOAL FIELD IN THE GDSCB.  THE PARAMETER
*        LIST IS AS FOLLOWS:
*
*        +0     A(3)
*        +4     A(GDSCB)
*
*        CODE 4
*        ENTRY IS MADE FROM TMGDS-IFFAAAO6 REQUESTING THAT THE
*        128 BYTE SUBSEGMENT OBTAINED FOR THIS GDS BE FREED.
*        THE PARAMETER LIST IS AS FOLLOWS:
*
*        +0     A(4)
*        +4     A(GDSCB)
*
*        CODE 5
*        ENTRY IS MADE FROM TMGDS-IFFAAAO6 REQUESTING THAT ALL
*        BUFFER ASSIGNED TO THIS GDS BE FREED.
*        THE PARAMETER LIST IS AS FOLLOWS:
*
*        +0     A(5)
*        +4     A(GDSCB)
*
*        CODE 6
*        ENTRY IS MADE FROM RESET-IFFAFA12 REQUESTING THAT ALL
*        BUFFER BEYOND THE ONE WHOSE DISPLACEMENT IS PASSED BE
*        FREED.  THE PARAMETER LIST CONTAINS THE DISPLACEMENT IN
*        THE BUFFER CONTROL TABLE FOR THE LAST BUFFER SEGMENT
*        TO BE RETAINED.  THE PARAMETER LIST IS AS FOLLOWS:
*
*        +0     A(6)
*        +4     A(GDSCB)
*        +8     A(DISP)
*
*        CODE 7
*        ENTRY IS MADE FROM TMDEV-IFFAAAO4 TO RELEASE ALL BUFFER
*        ASSIGNED TO THIS 2250.  BUFFER MANAGEMENT WILL ISSUE A
*        RLSEBFR-ALL MACRO AND THIS WILL ALSO RELEASE THE BUFFER
*        FLOW CONTROL MANAGEMENT OBTAINED EVEN THOUGH BUFFER MANAGE-
*        MENT DOES NOT KEEP A RECORD OF THAT BUFFER.
*        THE PARAMETER LIST IS AS FOLLOWS:
*
*        +0     A(7)
*        +4     A(GTMCB)
*
*        EXTERNAL MACROS USED ARE:
*
*        ASGNBFR
*        RLSEBFR
*
*
*        THE BUFFER CONTROL TABLE CONTAINS THREE BYTE ENTRIES WHICH
*        VARY DEPENDING ON HOW THE BUFFER IS ASSIGNED.  THE DIFFERENT
*        RECOGNIZEABLE CODES USED ARE AS FOLLOWS:
*        00 IF ALL THREE TYPES CONTAIN ZERO THE SEGMENT IS NOT
*        ASSIGNED.
*        01-7F IF THE FIRST BYTE CONTAINS ONE OF THESE CODES THE
*        SEGMENT IS ASSIGNED TO A GDS WHICH HAS A GDOA LENGTH WHICH
*        IS A MULTIPLE OF 256.
*        80 THIS IS THE CODE WHEN HALF OF A SEGMENT IS NOT ASSIGNED
*        AND THE OTHER HALF IS ASSIGNED TO A 128 GDS.  IT MAY
*        APPEAR IN THE FIRST OR SECOND BYTE OF THE ENTRY BUT IF
*        IT IS IN THE SECOND BYTE, THE FIRST BYTE WILL CONTAIN A
*        NUMBER BETWEEN 81 AND FF.
*        81-FF IF EITHER THE FIRST OR SECOND TYTE OF AN ENTRY
*        CONTAINS ONE OF THESE CODES HALF THE BUFFER IS ASSIGNED TO
*        THE GDS WHICH HAS THIS ID.  IF THE CODE IS IN THE FIRST
*        HALF THE FIRST HALF IS ASSIGNED, IF IN THE SECOND HALF,
*        THE SECOND HALF IS ASSIGNED.
*
*
*        EXAMPLES OF SUBSEGMENTS (128 BYTE GDOA)
*        BYTE 1     BYTE2     BYTE3
*        X'80'      X'92'     X'00' FIRST UNASSIGNED, SECOND ASSIGNED
*        X'87'      X'80'     X'00' FIRST ASSIGNED, SECOND UNASSIGNED
*        X'83'      X'F2'     X'00' BOTH ASSIGNED.
*
*        NOTE THAT BYTE3 IS ALWAYS ZERO. X'80' IN BYTES ONE AND TWO
*        CAN NEVER OCCUR BECAUSE IF BOTH ARE FREE THE SLOT IS SET TO
*        ZERO AND THE BUFFER IS RETURNED TO THE SYSTEM.
*
*        EXAMPLES OF 256 SEGMENTS (256 BYTE GDOA)
* DISP   BYTE1      BYTE2     BYTE3
* +0     X'02'      X'02'     X'00' FIRST ASSIGNED
* +3     X'02'      X'01'     X'02' LAST ON CHAIN
* +6     X'02'      X'01'     X'01' SECOND ASSIGNED
*
*        THE FIRST ASSIGNED GETS THE UNIQUE CODE, X'02' THE COUNT (BYTE
*        3) IS ZERO TO SIGNIFY THIS IS THE FIRST ASSIGNED.  THE SECOND
*        BYTE POINTS TO THE NEXT ON THE CHAIN.  THE SECOND ASSIGNED HAS
*        A COUNT OF ONE AND POINTS TO THE THIRD.  THE THIRD HAS A COUNT
*        OF TWO AND POINTS TO ITSELF TO SIGNIFY LAST ON CHAIN.  THE
*        REASON FOR THE COUNT IS THAT THE LOGICAL ADDRESS DIVIDED BY
*        THE GDOA LENGTH WILL GIVE THE SEGMENT COUNT WHEN CONVERTING
*        FROM LOGICAL TO PHYSICAL BUFFER ADDRESSES
*
*
*        EXAMPLE OF 768 SEGMENT (768 BYTE GDOA)
* DISP   BYTE1      BYTE2     BYTE3
* +0
* +3     X'05'      X'04'     X'00' FIRST ASSIGNED
* +6     X'05'      X'01'     X'FF'
* +9     X'05'      X'01'     X'FF'
* +12    X'05'      X'04'     X'01' SECOND ASSIGNED
* +15    X'05'      X'04'     X'FF'
* +18    X'05'      X'04'     X'FF'
*
*        THE FIRST ASSIGNED HAS THE ID, PTR TO NEXT, AND COUNT IN
*        THE FIRST ENTRY.  FOR THE OTHER TWO WHICH ARE CONTINUOUS
*        WITH THE FIRST AND TOGETHER WITH THE FIRST FORM THE 768
*        BYTES, THE CODE ALSO IS SET.  THE POINTER FIELD POINTS
*        BACK TO THE FIRST SEGMENT AND THE COUNT FIELD IS SET TO
*        X'FF' TO SIGNIFY IT IS A PART OF A LARGER SEGMENT BUT
*        NOT THE TOP.
*
         EJECT
IFFAHA02 CSECT
*2413,299000,300000                                                5858
*
*        ON ENTRY REGARDLESS OF THE REQUEST, BASE REGISTER IS
*        INITIALIZED, THE SAVE AREAS ARE CHAINED, THE FLAGS ARE
*        SET TO ZERO.  IF THE CODE IS NOT 7 (RELEASE ALL) THE
*        GDSCB IS INITIALIZED AND THE GTMCB IS INITIALIZED, AND
*        REGA CONTAINS THE ADDRESS OF THE BUFFER CONTROL TABLE.
*        THEN THE ENTRY REQUEST IS DETERMINED AND THE PROPER
*        LOCATION IN BUFFER MANAGEMENT RECEIVES CONTROL.
*
BUFMGT   SAVE  (14,12)
         BALR  BASE,0
         USING *,BASE
         LR    WORK,PARM           LOAD INTO DSECT REGISTER
         USING WORKAREA,WORK
         L     PARM,WRKPARM        PICK UP PARAMETER LIST
         LA    REGA,WRKSAVE        SET UP SAVE AREA
         ST    SAVE,WRKSAVE+4
         ST    REGA,8(SAVE)
         LR    SAVE,REGA
         XC    WRKFLAGS(4),WRKFLAGS CLEAR FLAGS
         CLI   CODE(PARM),TRMCLS   CODE TO CLOSE TERM
         BE    BUF00260
         L     GDSREG,GDS(PARM)    PICK UP GDS ADDR
         USING GDSCB,GDSREG
         L     GTMREG,GDSGTMCB     GTMCB ADDR
         USING GTMCB,GTMREG
         L     REGA,GTMBCTBL       BCT TABLE ADDR
         CLI   CODE(PARM),SEG128   CODE TO ALLOC 128
         BE    BUF00005
         CLI   CODE(PARM),SEG256   NEW 256 MULTIPLE
         BE    BUF00080
         CLI   CODE(PARM),MORE256  MORE 256 MULT
         BE    BUF00130
         CLI   CODE(PARM),GDSCL128 CLOSE 128
         BE    BUF00160
         CLI   CODE(PARM),GDSCL256 CLOSE MULT 256
         BE    BUF00200
         CLI   CODE(PARM),RESET    RESET
         BE    BUF00250
         WTO   'BUFMGT WRONG CODE'
         EJECT
**
**
**       CODE 1
**       ALLOCATE 128 BYTE BUFFER SEGMENT TO A GDS BEING OPENED
**
**
*
*        THE CODE 1 THE ENTIRE BUFFER CONTROL TABLE IS SEARCHED
*        FOR A FREE SUBSEGMENT.  IF ONE IS NOT FOUND, BUFFER IS
*        ASSIGNED AND THE SECOND HALF OF THE ENTRY FOR THE BUFFER
*        RECEIVED IS SET TO X'80' SIGNIFYING NOT IN USE AND THE
*        FIRST HALF IS USED.  A UNIQUE CODE IS OBTAINED BY ADDING
*        X'81' TO THE GTMBCTSM FIELD OF THE GTMCB OR BY USING
*        THE INTERNAL SUBROUTINE TO FIND A UNIQUE CODE NOT IN
*        USE.  THE UNIQUE CODE IS PLACED IN THE BUFFER CONTROL
*        TABLE AND IN THE GDSCB.  THE ADDRESS OF THE BUFFER
*        OBTAINED IS RETURNED IN REGISTER ONE AND CONTROL IS
*        RETURNED TO THE CALLING PROGRAM
*
BUF00005 LR    REGD,REGA           ADDR OF BCT
         LR    REGB,REGA           ADDR OF BCT
         LA    REGC,3              ENTRY SIZE
         LA    REGD,BCTLEN(REGD)   ADD LENGTH ( FOR LOOP )
BUF00010 CLI   0(REGB),X'80'       IS SEG DIV?
         BNL   BUF00030            YES
BUF00020 BXLE  REGB,REGC,BUF00010  NO LOOK MORE
         L     REGB,GTMGRDCB       ADDR OF DCB
         LA    REGC,256            ASSIGN
         STH   REGC,WRKSPACE+8     BUFFER
         ASGNBFR (REGB),WRKSPACE+8,MF=(E,WRKSPACE) ASSIGN BUFFER
         LTR   15,15
         BNE   ERR1
         LH    REGD,16(REGB)       ADDR OF BUFFER
         ST    REGD,WRKSPACE       SAVE ADDR OF BUFFER
         SRA   REGD,8              DIVIDE BY 256
         STH   REGD,GDSBCTEL        PLACE INDEX IN GDSCB
         M     REGC,=F'3'          MULTIPLY BY 3 FOR DISPLACEMENT
         AR    REGD,REGA
         MVI   1(REGD),X'80'       SET SECOND BYTE=NOT IN USE
         B     BUF00060
BUF00030 CLI   0(REGB),X'80'       IS BYTE IN USE
         BE    BUF00040            NO
         CLI   1(REGB),X'80'       YES, IS SECOND IN USE
         BNE   BUF00020            YES, LOOK SOME MORE
         OI    WRKFLAGS,X'01'      SET SECOND BYTE FLAG
BUF00040 LR    REGD,REGB           COMPUTE DISPLACEMENT
         SR    REGD,REGA
         SR    REGC,REGC           FOR DIVIDE
         D     REGC,=F'3'     BUFFER ADDRESS IN REGD
         STH   REGD,GDSBCTEL       INDEX TO ELEMENT
         SLA   REGD,8              MULTIPLY BY 256
         CLI   WRKFLAGS,X'01'
         BNE   BUF00050
         LA    REGD,128(REGD)
         ST    REGD,WRKSPACE  SAVE BUFFER ADDRESS
         LA    REGB,1(REGB)   UPDATE TO SECOND BYTE
BUF00050 LR    REGD,REGB      SET PTR IN REGD
BUF00060 CLI   GTMBCTSM,X'7E' CAN ID BE OBTAINED EASILY
         BH    BUF00075       LINK TO CODE FINE ROUTINE
         IC    REGC,GTMBCTSM
         LA    REGB,X'81'     COMPUTE NEW ID
         AR    REGB,REGC
         LA    REGC,1(REGC)
         STC   REGC,GTMBCTSM  UPDATE INDEX
BUF00065 STC   REGB,GDSBCTID  PLACE IN GDSCB
         STC   REGB,0(REGD)   PLACE CODE IN BCT
BUF00067 LH    PARM,WRKSPACE+2     SET BUFFER ADDR IN REG 1
BUF00070 L     SAVE,4(SAVE)   RESET SAVE AREA
         LM    14,0,12(SAVE)  RELOAD REGS
         LM    2,12,28(SAVE)
         LA    15,0           SET RETURN = 0
         BR    14             RETURN
BUF00075 LA    RETURN,BUF00065     RETURN ADDRESS
         LA    REGB,X'81'          FIRST CODE
         B     BUF00280            GO TO UNIQUE CODE FIND ROUTINE
         EJECT
**
**
**       CODE 2
**       ALLOCATE 256 BYTE SEGMENT(S) TO A GDS BEING OPENED
**
**
*
*        FOR CODE 2 BUFFER IS ASSIGNED FOR THE LENGTH DESIRED.
*        A UNIQUE CODE IS OBTAINED BY ADDING X'01' TO THE
*        GTMBCTLG FIELD IN THE GTMCB OR BY USING THE INTERNAL
*        SUBROUTINE TO FIND A UNIQUE CODE NOT IN USE.  THE
*        BUFFER CONTROL TABLE ENTRY IS SET UP AND THE UNIQUE
*        CODE, AND THE DISPLACEMENT IN THE BUFFER CONTROL
*        TABLE ARE PLACED IN THE GDSBCTID AND GDSBCTEL FIELDS
*        IN THE GDSCB.  THE ADDRESS OF THE BUFFER OBTAINED IS
*        RETURNED IN REGISTER ONE AND CONTROL IS RETURNED TO
*        THE CALLING PROGRAM.
*
BUF00080 L     REGB,8(PARM)        LENGTH OF BUFFER DESIRED
         STH   REGB,WRKSPACE+8
         L     REGB,GTMGRDCB       ADDR OF DCB
         ASGNBFR (REGB),WRKSPACE+8,MF=(E,WRKSPACE) ASSIGN BUFFER
         LTR   15,15
         BNE   ERR1                NO MORE BUFFER
         LH    REGD,16(REGB)       ADDR OF BUFFER
         ST    REGD,WRKSPACE       SAVE IT
         SRA   REGD,8              DIVIDE BY 256
         STH   REGD,GDSBCTEL       SAVE IN GDS
         LR    REGF,REGD           BCT DISP
         M     REGC,=F'3'
         LR    REGC,REGF                                           5858
         AR    REGD,REGA           DISP IN BCT
         LH    REGA,18(REGB)       LENGTH
         CLI   GTMBCTLG,X'7E'      HAVE ALL LARGE CODES BEEN USED
         BH    BUF00125            YES
         IC    REGB,GTMBCTLG       PICK UP CODE
         LA    REGB,1(REGB)        TO GET ACTUAL CODE
         STC   REGB,GTMBCTLG       FOR NEXT PASS
BUF00090 STC   REGB,GDSBCTID       SAVE ID IN GDS                  5858
         LR    REGF,REGC                                           5858
         SR    REGC,REGC           INDEX                           5858
         SRA   REGA,8              DIVIDE BY 256 TO DET NO OF SEGMENTS
         LR    REGE,REGA           SAVE COUNT OF SEGMENTS
BUF00100 STC   REGB,0(REGC,REGD)   STORE CODE
         LA    REGC,3(REGC)        TO NEXT SEGMENT
         BCT   REGA,BUF00100       ALL DONE
         LR    REGB,REGF           PTR TO SELF
         SR    REGC,REGC           INDEX REG
         LR    REGA,REGE           COUNT
         STC   REGF,1(REGD)        LAST ON CHAIN INDICATOR
         B     BUF00115            BRANCH AROUND FIRST STORE
BUF00110 STC   REGB,1(REGC,REGD)   STORE PTR
BUF00115 LA    REGC,3(REGC)        TO NEXT
         BCT   REGA,BUF00110       ALL DONE
*                                  COUNT IN FIRST SEGMENT IS ZERO THREE
*                                  FORE IT NEED NOT BE SET.
*                                  CODE 3 WILL SET COUNT FIRST
         BCTR  REGE,0              REDUCE CT BY ONE IF ONLY ONE
         LTR   REGE,REGE           ONLY ONE
         BE    BUF00067
         LA    REGB,X'FF'          CODE SAYING PART OF LARGE SEGMENT
BUF00120 LA    REGD,3(REGD)        UPDATE TO NEXT SEGMENT
         STC   REGB,2(REGD)        STORE CODE IN COUNT FIELD
         BCT   REGE,BUF00120       CONTINUE
         B     BUF00067            EXIT
BUF00125 LA    RETURN,BUF00090     RETURN
         LA    REGB,X'01'          FIRST CODE
         B     BUF00280            ROUTINE TO FIND A CODE
         EJECT
**
**
**       CODE 3
**       ALLOCATE AN ADDITIONAL 256 OR MORE TO A GDS ALREADY OPEN
**
**
*
*        FOR CODE 3 A CHECK IS MADE TO SEE IF THE GDS IS NOT
*        A 128 SUBSEGMENT GDS AND IF NOT THE !UFFER IS ASSIGNED
*        FOR THE GDOA LENGTH IN THE GDSCB.  THE ENTRY IS BUILT
*        IN THE BUFFER CONTROL TABLE, THE ENTRY IS CHAINED TO
*        THE PREVIOUS ENTRY AND THE ADDRESS OF THE BUFFER OBTAINED
*        IS RETURNED IN REGISTER ONE.  THIS ENTRY USES PART OF
*        THE CODE FOR CODE 2 ENTRIES.
*
BUF00130 CLI   GDSBCTID,X'80'      WAS A SUBSEGMENT ASSIGNED
         BH    ERR2                YES, NO MORE BUFFER ALLOWED
         TM    GDSFLAGS,EQUIV        IS THIS AN EQUIV
         BO    ERR2                YES NO MORE BUFFER ALLOWED
         L     REGB,GTMGRDCB       PICK UP DCB
         ASGNBFR (REGB),GDSGDOAL,MF=(E,WRKSPACE)
         LTR   15,15
         BNE   ERR1                NO BUFFER
         LH    REGD,16(REGB)       ADDR OF BUFFER
         ST    REGD,WRKSPACE       SAVE ADDR
         SRA   REGD,8              DIVIDE BY 256
         LH    REGC,GDSBCTEL
         MH    REGC,THREE+2
         SR    REGE,REGE
         LA    REGF,1              REGF=1 FOR COUNT
BUF00140 IC    REGE,1(REGC,REGA)   POINTER FIELD
         MH    REGE,THREE+2        DISP IN TABLE
         CR    REGE,REGC           LAST ONE
         BE    BUF00150
         LR    REGC,REGE           PTR TO NEXT
         SR    REGE,REGE
         LA    REGF,1(REGF)        UPDATE COUNT
         B     BUF00140            LOOK SOME MORE
BUF00150 STC   REGD,1(REGC,REGA)   UPDATE PTR
         LR    REGC,REGD           SAVE PTR
         MH    REGD,THREE+2        DISP
         STC   REGF,2(REGD,REGA)   STORE COUNT
         LR    REGF,REGC
         AR    REGD,REGA           DISP & TABLE START
*                                  THE REMAINDER OF CODE 3 IS JUST LIKE
*                                  CODE 2 SO WE WILL USE THAT CODING.
         LH    REGA,18(REGB)       REGA HAS LENGTH
*                                  REGD HAS TABLE LOC OF SEGMENT
         IC    REGB,GDSBCTID       REGB HAS ID CODE
         B     BUF00090            GO TO CODE 2 CODE
         EJECT
**
**
**       CODE 4
**       RELEASE 128 BYTES OF A SEGMENT BEING CLOSED
**
**
*
*        FOR CODE 4 IT IS DETERMINED IF THE OTHER HALF OF THE
*        BUFFER SEGMENT IS ASSIGNED.  IF IT IS THE CODE FOR THIS
*        GDS IS REMOVED FROM THE GDSCB AND THE BUFFER CONTROL
*        TABLE ENTRY AND CONTROL IS RETURNED TO THE CALLING
*        PROGRAM.  IF BOTH SEGMENTS ARE FREE THE BUFFER IS
*        RELEASED AND THE ENTIRE BUFFER CONTROL ENTRY IS SET TO
*        ZERO.  THE ID IS ZEROED IN THE GDSCB AND CONTROL
*        IS RETURNED TO THE CALLING PROGRAM.
BUF00160 L     REGB,THREE
         MH    REGB,GDSBCTEL       DISP IN TABLE
         AR    REGA,REGB           PLUS TABLE ADDR
         CLC   0(1,REGA),GDSBCTID  IS FIRST HALF ASSIGNED
         BE    BUF00180            YES
         MVI   1(REGA),X'80'       SET FREE SWITCH
         CLI   0(REGA),X'80'       IS OTHER HALF FREE
         BE    BUF00190
BUF00170 XC    GDSBCTEL(2),GDSBCTEL ZERO INDEX
         MVI   GDSBCTID,X'00'      ZERO ID
         B     BUF00070            RETURN
BUF00180 MVI   0(REGA),X'80'       SET FREE SWITCH
         CLI   1(REGA),X'80'       SECOND FREE
         BNE   BUF00170            NO
BUF00190 XC    0(3,REGA),0(REGA)   ZERO OUT SLOT
         LH    REGB,GDSBCTEL       DISP IN TABLE
         SLA   REGB,8              ADDR OF BUFFER
         STH   REGB,WRKSPACE+8     STORE IN HALFWORD
         LA    REGB,256            LENGTH
         STH   REGB,WRKSPACE+10    IN OTHER HALFWORD
         L     REGB,GTMGRDCB       DCB
         RLSEBFR (REGB),WRKSPACE+8,MF=(E,WRKSPACE) RELEASE BUFFER
         B     BUF00170
         EJECT
**
**
**       CODE 5
**       RELEASE ALL 256 BYTE SEGMENTS ALLOCATED TO A GDS BEING CLOSED
**
**
*
*        FOR CODE 5 A CHECK IS MADE TO SEE IF ALL BUFFER WAS
*        RELEASED BY THE TMDEV ROUTINE PREVIOUSLY AND IF SO
*        RETURN IS MADE TO THE CALLING PROGRAM.  OTHERWISE THE
*        BUFFER CONTROL TABLE IS CHAINED THROUGH, THE BUFFER
*        IS FREED AND ALL ENTRIES ARE SET TO ZERO.  THE GDSBCTEL
*        AND GDSBCTID FIELDS OF THE GDSCB ARE SET TO ZERO.  WHEN
*        ALL BUFFER IS FREED, RETURN IS MADE TO THE CALLING PROGRAM.
*
BUF00200 CLI   GDSBCTID,X'00'      RELEASED BY TERMINAL
         BE    BUF00070            RETURN
         LH    REGB,GDSBCTEL       DISP
         MH    REGB,THREE+2        DISP IN TBL
         XC    GDSBCTEL(2),GDSBCTEL ZERO OUT FIELD
         MVI   GDSBCTID,X'00'      ZERO ID
BUF00210 L     REGF,GTMGRDCB       LOAD DCB
         MVC   WRKSPACE+10(2),GDSGDOAL LEN OF BUFFER
BUF00215 LR    REGC,REGB           DISP
         SLA   REGC,8              TIMES BUFFER LEN OF 256 = BUF ADDR
         SRDA  REGC,32             SHIFT TO ODD REGISTER FOR DIVIDE
         D     REGC,THREE          DIVIDE BY THREE
         STH   REGD,WRKSPACE+8
         RLSEBFR (REGF),WRKSPACE+8,MF=(E,WRKSPACE)
         SR    REGD,REGD           ZERO REGISTER
         IC    REGD,1(REGB,REGA)   PICK UP NEXT PTR
         MH    REGD,THREE+2        DISP IN TBL
         CR    REGD,REGB           ALL DONE
         BE    BUF00240            YES
BUF00220 LH    REGE,GDSGDOAL       LENGTH DIV BY
         SRA   REGE,8              256 = NO OF SEGMENTS
         AR    REGB,REGA           DISP + BCT ADD
BUF00230 XC    0(3,REGB),0(REGB)   ZERO SLOT
         LA    REGB,3(REGB)        TO NEXT SLOT
         BCT   REGE,BUF00230
         CLI   WRKFLAGS,X'FF'      ALL DONE
         BE    BUF00070            YES, LEAVE
         LR    REGB,REGD           UPDATE REGS
         B     BUF00215            GO RELEASE REST
BUF00240 MVI   WRKFLAGS,X'FF'      SET ALL DONE FLAGS
         B     BUF00220            RETURN TO CLEAR SLOTS
         EJECT
**
**
**       CODE 6
**       RELEASE ONE OR MORE 256 BYTE SEGMENTS RECENTLY ALLOCATED TO A
**       GDS REMAINING OPEN.
**
*
*        FOR CODE 6 A CHECK IS MADE TO SEE IF THE DISPLACEMENT IN
*        THE BUFFER CONTROL TABLE THAT WAS PASSED POINTS TO THE
*        LAST ENTRY IN THE TABLE FOR THAT GDS.  IF SO CONTROL IS
*        RETURNED TO THE CALLING PROGRAM.  OTHERWISE POINTERS ARE
*        SET UP TO THE BUFFER THAT MUST BE RELEASED AND THE CODING
*        FOR CODE 5 IS USED TO FREE THE BUFFER AND ZERO THE BUFFER
*        CONTROL TABLE.  THEN RETURN IS MADE TO THE CALLING PROGRAM.
*
BUF00250 SR    REGB,REGB
         L     REGC,8(PARM)        LOAD BUFFER SEGMENT ADDR
         LR    REGD,REGC           PTR TO SELF
         MH    REGC,THREE+2        DISP IN TBL
         IC    REGB,1(REGC,REGA)   OBTAIN PTR
         MH    REGB,THREE+2
         CR    REGB,REGC           IS THIS THE LAST SEGMENT
         BE    BUF00070            YES
         STC   REGD,1(REGC,REGA)   SET PTRS TO LAST ON CHAIN
         B     BUF00210            NO GO TO CODE 5 TO RELEASE BUFFER.
         EJECT
**
**
**       CODE 7
**       RELEASE ALL BUFFER SEGMENTS CURRENTLY ASSIGNED TO A TERM BEING
**       CLOSED
**
*
*        FOR CODE 7 ALL BUFFER IS RELEASED USING THE ALL PARAMETER
*        IN THE RLSEBFR MACRO.  THE ENTIRE BUFFER CONTROL TABLE IS
*        SET TO ZERO.  ALL GDSS STILL OPEN HAVE THEIR ID BYTES AND
*        DISPLACEMENT FIELDS SET TO ZERO.  CONTROL IS THEN RETURNED
*        TO THE CALLING PROGRAM.
*
BUF00260 L     GTMREG,4(PARM)      LOAD ADDR OF GTMCB
         L     REGB,GTMGRDCB            ADDR OF DCB
         RLSEBFR (REGB),ALL,MF=(E,WRKSPACE) RELEASE ALL BUFFER
         L     REGA,GTMBCTBL       LOAD ADDR OF BCT
         XC    0(256,REGA),0(REGA) ZERO BCT
         XC    256(BCTACTLN-256,REGA),256(REGA)
         L     GDSREG,GTMGDSCB     PICK UP GDS
BUF00270 LTR   GDSREG,GDSREG       ANY THERE
         BE    BUF00070            EXIT
         MVI   GDSBCTID,X'00'       ZERO ID
         XC    GDSBCTEL(2),GDSBCTEL ZERO ELEM
         L     GDSREG,GDSNXGDS     NEXT ON CHAIN
         B     BUF00270
         EJECT
**
**
**       ROUTINE TO FIND A UNIQUE CODE. THERE MUST BE ONE AT LEAST
**       BECAUSE ONLY 24 SEPARATE GDS' ARE ALLOWED
**       USES REGS E AND F RETURNS CODE IN REGB
**
BUF00280 MVI   WRKFLAGS+1,X'00'    ZERO FLAGS TO SAY ONLY ONCE
BUF00290 STC   REGB,WRKSPACE       CODE
         L     REGF,GTMBCTBL       ADDR OF TABLE
BUF00300 LA    REGE,BCTENTRS       LOOP CONTROL (INNER)
BUF00310 CLC   0(1,REGF),WRKSPACE  IS IT USED
         BE    BUF00320            YES
         LA    REGF,3(REGF)        NOT YET
         BCT   REGE,BUF00310
         CLI   WRKSPACE,X'80'      IS IT A LARGE CODE
         BCR   4,RETURN            YES, WE FOUND IT
         CLI   WRKFLAGS+1,X'01'    NO, HAVE WE LOOPED TWICE
         BCR   8,RETURN            YES
         L     REGF,GTMBCTBL
         LA    REGF,1(REGF)        POSITION TO SECOND BYTE
         MVI   WRKFLAGS+1,X'01'    SET FLAG
         B     BUF00300
BUF00320 MVI   WRKFLAGS+1,X'00'    CLEAR FLAGS
         LA    REGB,1(REGB)        UPDATE TO NEXT ID
         B     BUF00290
BUF00330 L     SAVE,4(SAVE)        RESET SAVE AREA
         RETURN (14,12),RC=0       RETURN
ERR1     L     REGB,WRKRTNCD
         MVI   0(REGB),X'10'       STORAGE EXCEEDED
         MVI   15(REGB),X'03'      BUFFER EXCEEDED
BUF00340 L     SAVE,4(SAVE)
         RETURN (14,12),T,RC=4
ERR2     L     REGB,WRKRTNCD
         MVI   0(REGB),X'10'       STORAGE EXCEEDED
         MVI   15(REGB),X'02'      SELF IMPOSED LIMIT
         B     BUF00340            RETURN
         EJECT
REGZERO  EQU   0
PARM     EQU   1
REGA     EQU   2
REGB     EQU   3
REGE     EQU   4
WORK     EQU   5
REGF     EQU   6
GTMREG   EQU   7
GDSREG   EQU   8
BASE     EQU   9
REGC     EQU   10                  EVEN/ODD PAIR
REGD     EQU   11                  EVEN/ODD PAIR
SAVE     EQU   13
RETURN   EQU   14
RLSEBFR  EQU   71
ASGNBFR  EQU   71
BCTLEN   EQU   381                 NOTE: THIS IS LENGTH LESS THREE
BCTACTLN EQU   384
BCTENTRS EQU   128
EQUIV    EQU   X'80'
CODE     EQU   3
GDS      EQU   4
TRMCLS   EQU   7
SEG128   EQU   1
SEG256   EQU   2
MORE256  EQU   3
GDSCL128 EQU   4
GDSCL256 EQU   5
RESET    EQU   6
THREE    DC    F'3'
         EJECT
WORKAREA DSECT
WRKPARM  DS    F
WRKRTNCD DS    F
WRKFLAGS DS    F
WRKSPACE DS    3F
WRKSAVE  DS    18F
         COPY  GSPCB
         COPY  GTMCB
         COPY  GDSCB
         END
