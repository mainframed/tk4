*   NAME
*        ENATN
*   MODULE NAME
*        IFFAC02
*
*   FUNCTION
*        TO ENABLE PROCESSING OF ATTENTION OCCURRENCE(S)
*        ON THE DESIGNATED SOURCE(S) WHEN THE ASSOCIATED
*        ATTENTION LEVEL IS ACTIVE.
*
*   ENTRY
*        CSECT NAME
*
*   INPUT
*        REGISTER 1 CONTAINS THE ADDRESS OF A WORK/SAVE AREA.
*        THE FIRST WORD CONTAINS THE ADDRESS OF A PARAMETER LIST
*        COMPOSED OF.
*              1. ADDRESS OF A VARIABLE CONTAINING THE ATTENTION
*                 TABLE ADDRESS(ATTNLEVEL).
*              2. ADDRESS OF ATTENTION SOURCE(S) (ATTNSOURCE).
*                 1-31   PROGRAM FUNCTION KEYS 1-31
*                 32     END KEY
*                 33     CANCEL KEY
*                 34     LIGHT PEN
*                 35     EOS
*                 36     ASYNCHRONOUS ERROR
*                 TO GIVE INDIVIDUAL SOURCES, GIVE A NUMBER.
*                 TO GIVE SOURCES 5 TO 10, FOR EXAMPLE, 5 IS
*                 POSITIVE AND 10 IS NEGATIVE.
*   OUTPUT
*        ENABLE MASK TO ATTENTION TABLE AND DELETION OF ANY
*        ATTENTIONS FROM THE QUEUE THAT MATCH THOSE ATTENTION
*        TYPES JUST ENABLED.
*   EXIT
*        TO CALLER VIA REGISTER 14
*   RETURN CODES
*        4,1   INVALID ATTENTION LEVEL
*        4,N   INVALID SOURCE CODE
*   ATTRIBUTES
*        REENTRANT, PROBLEM PROGRAM MODE
*   FLOWCHARTS
*        CG, CH, CI
IFFACA02 CSECT
*2101,462000-504000                                                000A
         TITLE  'ENATN - ENABLE ATTENTIONS'
REG0     EQU   0                       PARAM REG 0
REG1     EQU   1                       PARAM REG 1
RLIST    EQU   2                       INPUT PARAM LIST
RPARAM   EQU   3                       USER PARAM LIST
RATL     EQU   4                       ATTENTION LEVEL ADDR
RGTMCB   EQU   5                       GTMCB ADR
RWORKF   EQU   6
RWORKD   EQU   7                       WORK REG
RBASE    EQU   9                       BASE REG
RWORKC   EQU   11                      WORK REG
RSAVE    EQU   13                      SAVE AREA REG
RWORKA   EQU   14                      WORK REG
RWORKB   EQU   15                      WORK REG
RSOURCE  EQU   2             CONVERTA  ATTNSOURCE ADR REG
RFIRST   EQU   3             CONVERTA  FIRST ARG REG
RINFO    EQU   4             CONVERTA  ADD INFO REG
RPFA     EQU   5             CONVERTA  PF REG
RANA     EQU   6             CONVERTA  A/N REG
RA       EQU   7             CONVERTA  WORK REG A
RB       EQU   8             CONVERTA  WORK REG B
* RBASE  EQU   9                       BASEREG DUMMY
RC       EQU   10            CONVERTA  WORK REG C
RD       EQU   11            CONVERTA  WORK REG D
RE       EQU   12            CONVERTA  WORK REG E
ADD0     EQU   0                       ADD INFO 0
ADD1     EQU   1
ADD5     EQU   2                       ADD INFO EQUAL 2 FOR ENATTN
AID      EQU   X'04'                   ATTN LEVEL ID
ANTYPE   EQU   X'01'                   A/N END KEY
ATYPE    EQU   11
BPIND    EQU   19                      BACK POINTER INDICATOR
EGHT     EQU   8
GACBPLUS EQU   8                       OFFSET TO GACB ADDR
HASPFK   EQU   X'10'                   HAS PF KEYBOARD
HEX00    EQU   X'00'
HEX01    EQU   X'01'
HEX03    EQU   X'03'
HEX04    EQU   X'04'
HEXFF    EQU   X'FF'
IOK      EQU   X'7F'                   I/O SUCCESSFULL CODE
KEYNUM   EQU   10
L4       EQU   4
LAST     EQU   X'80'                   LAST PARAMETER
NEG      EQU   X'80'                   NEGATIVE VALUE
NEXT     EQU   4                       NEXT SOURCE
ONE      EQU   1
PFK0     EQU   X'80'                   PFK0 BIT
PFTYPE   EQU   X'02'
RCC4     EQU   X'08'                   RETURN CODE 4
RC4      EQU   16                      OFFSET TO RC4
RC5      EQU   X'04'                   I/O ERROR
TWO      EQU   2
TWLV     EQU   12
ZERO     EQU   0                       ZERO
         SAVE  (14,12)                 SAVE REGISTERS
         BALR  RBASE,0                 SET UP BASE REG
         USING *,RBASE                 DEFINE BASE REG
         LR    RLIST,REG1              SAVE INPUT PARAM
         USING WORKAREA,RLIST          DEFINE DSECT
         L     RPARAM,PARAM            LOAD ADDR USER PARAM LIST
         USING PLIST,RPARAM            DEFINE DSECT
         ST    RSAVE,SAVE+4            MY SAVE ARE ADDR
         LA    RSAVE,SAVE              LOAD ADDR MY SAVE AREA
         ST    RSAVE,SAVE+8            SAVE USERS R13
         L     RWORKA,RCA              LOAD RETURN CODE ARRAY ADDR
         XC    ZERO(20,RWORKA),ZERO(RWORKA)  ZERO ARRAY
         B     AROUND
ERROR    EQU   *
*   RETURN CODE MUST BE LOADED INTO REG RWORKB (15)
*   ADD INFO MUST BE LOADED INTO REG RWORKC (R11)
*   OFFSET MUST BE LOADED INTO REG RWORKD (R12)
*   UPON ENTRY TO ERROR ROUTINE
         L     RWORKA,RCA              LOAD RETURN CODE ARRAY ADDR
         STC   RWORKB,ZERO(RWORKA)     STORE RETURN CODE
         ST    RWORKC,ZERO(RWORKD,RWORKA) STO ADD INFO AT PROPER OFFSET
OUT      L     RSAVE,SAVE+4            RESTABLISH OLD SAVE AREA
         RETURN (14,12),T              RETURN TO CALLER
AROUND   TM    ATNLVL,LAST             LAST PARAM
         BC    14,REQ01                BRANCH IF NO
         LA    RWORKC,ADD0             LOAD ADD INFO
REQ03    LA    RWORKB,RCC4             LOAD RETURN CODE
         LA    RWORKD,RC4              LOAD OFFSET
         B     ERROR
REQ01    L     RATL,ATNLVL             LOAD INDIRECT PTR TO ATTN LEVEL
         L     RATL,ZERO(RATL)         LOAD ATTN LEVEL ADDR
         USING ATTNLEVL,RATL           DEFINE DSECT
         CLI   ATTNLVID+1,AID          IS THIS VALID ATTN LEVEL
         BNE   REQ40                   BRANCH IF NO ADD INFO EQUAL1
*   TEST FOR ANY ATTNSOURCES SPECIFIED
         L     RWORKC,ATNSRCE          LOAD ADDR OF DATA
         LA    RWORKC,ZERO(RWORKC)     ZERO HI ORDER BIT
         LTR   RWORKC,RWORKC           IS THERE AN ADDR THERE
         BZ    INFOADD0                NO
         BAL   RWORKA,CONVERTA         BRANCH TO ATTNSOURCE CONVERSION
         LTR   RWORKB,RWORKB           RC=0
         BZ    GOOD                    YES
         LR    RWORKC,RWORKB           LOAD ADD INFO
         B     REQ03
REQ40    EQU   *
         LA    RWORKC,ADD1             LOAD ADD INFO CODE OF 1
         B     REQ03
INFOADD0 EQU   *
*   NO ATTN SOURCE PARAMETER SPECIFIED
         LA    RWORKC,ADD5             LOAD ADD INFO CODE OF 2
         B     REQ03
GOOD     EQU   *
         ST    REG0,ANMASK             SAVE AN MASK
         ST    REG1,PFMASK             SAVE PF MASK
         OC    ATTNANEN,ANMASK         OR AN MASK TO PERM MASK IN ATLV
         OC    ATTNPFEN,PFMASK         OR PF MASK TO PERM MASK IN ATLV
         CLC   ATTNFWPT(4),ZERO1       IS LEVEL ACTIVE
         BE    ATNQ                    CONSTRUCT ATTNINQ-IF YES
TESTATTN EQU   *
*   TEST ENTRIES ON ATTNMLEN QUEUE FOR MATCH TO NEWLY ENABLED SOURCES
REQ60    CLC   ATTNMLEN,ZERO1          ANY DATA
         BE    TSTATDTA                NO-TEST ATTNDATA QUEU
         L     RWORKA,ATTNMLEN         LOAD ADDR OF FIRST ENTRY
         SR    RWORKF,RWORKF           CLEAR PREVIOUS ENTRY REG
         MVI   ATNFLAG,HEX00           CLEAR ATTNDATA SWITCH
PFATTNKY CLI   ATYPE(RWORKA),PFTYPE    PF ATTN
         BE    PFATTN                  YES
         LA    RWORKB,ONE              PRIME REG WITH VALUE ONE
         CLI   ATYPE(RWORKA),ANTYPE    END KEY ATTN
         BE    ANDREG                  YES
         SR    RWORKC,RWORKC                CLEAR REG
         IC    RWORKC,ATYPE(RWORKA)         INSERT ATTN TYPE
         LA    RWORKD,TWO              LOAD CONSTANT
         SR    RWORKC,RWORKD           DETERMINE SHIFT CONSTANT
         SLL   RWORKB,ZERO(RWORKC)     POSITION BIT
ANDREG   N     RWORKB,ANMASK           DETERMINE IF MATCH
         LTR   RWORKB,RWORKB           WAS THERE A MATCH
         BC    7,MATCH                 WK REG EQUAL NON ZERO - BRANCH
SWPTRS   EQU   *
SAVEADDR EQU   *
*   PRESENT ENTRY TO PREVIOUS REGISTER
         LR    RWORKF,RWORKA           SAVE ADDR IN PREVIOUS ENTRY REG
         L     RWORKA,ZERO(RWORKA)     LOAD PTR TO NEXT ENTRY
         LTR   RWORKA,RWORKA           ANY MORE ENTRIES
         BC    7,PFATTNKY              RWORKA EQUAL NON ZERO-BRANCH
         B     TSTATDTA                NO
MATCH    EQU   *
         CLI   ATNFLAG,HEX01           ENTRY FROM ATTNDATA
         BE    FLAGDEL                      YES
         LTR   RWORKF,RWORKF           FIRST ENTRY
         BZ    DEQENTRY
*   MOVE FP OF ENTRY TO FP OF PREVIOUS
         MVC   ZERO(4,RWORKF),ZERO(RWORKA)  DEQUEUE ENTRY
         B     REQ61
*   MOVE FP OF FIRST TO ATTNMLEN
DEQENTRY MVC   ATTNMLEN(4),ZERO(RWORKA)     DEQUEUE ENTRY
REQ61    MVC   ZERO(4,RWORKA),ATTNAVAL      ADD ENTRY TO TABLE
         ST    RWORKA,ATTNAVAL              AVAILABLE LIST
         B     REQ60
PFATTN   L     RWORKB,PRIME            PRIME PF REG
         SR    RWORKC,RWORKC                CLEAR REG
         IC    RWORKC,KEYNUM(RWORKA)        INSERT KEY NUMBER
         SRL   RWORKB,ZERO(RWORKC)          POSITION BIT
         N     RWORKB,PFMASK                DETERMINE IF A MATCH
         LTR   RWORKB,RWORKB                WAS THERE A MATCH
         BC    7,MATCH                 WK REG EQUAL NON ZERO - BRANCH
         B     SAVEADDR
TSTATDTA EQU   *
         CLI   ATNFLAG,HEX01           BEEN HERE BEFORE
         BE    ACTATNLV                YES
         CLC   ATTNDATA,ZERO1          ANY DATA
         BE    ACTATNLV
         L     RWORKA,ATTNDATA              LOAD ADDR OF FIRST ENTRY
         MVI   ATNFLAG,HEX01           SET ATTNDATA ENTRY SWITCH ON
         SR    RWORKF,RWORKF           CLEAR PREVIOUS ENTRY REG
         B     PFATTNKY
FLAGDEL  EQU   *
*   RWORKA HAS ADDR OF ENTRY ON ATTN QUEU
         MVI   20(RWORKA),HEX01        SET PENDING DELETION FLAG
         B     SWPTRS
ATNQ     EQU   *
         ST    RATL,SAVE1              SAVE ATTN LVL ADDR
AGAIN    CLI   ATTNBPID,HEX01          ATBL BP POINT TO GTMCB
         BE    LBPTR                   YES
         L     RATL,ATTNBKPT           LOAD BACKWARD PTR INTO BASE REG
         B     AGAIN
LBPTR    L     RGTMCB,ATTNBKPT         LOAD BASE
         USING GTMCB,RGTMCB            DEFINE DESECT
         L     RATL,SAVE1              RESTORE ATTN LVL ADDR
*   REPLACE AN AND PF MASKS IN ATTN LVL 3 OF GACB
         L     RWORKA,GTMGACBA         LOAD GACB ADR
         LA    RWORKA,GACBPLUS(RWORKA) LOAD PTR TO TRUE START OF GACB
         MVC   EGHT(L4,RWORKA),PFMASK  PUT NEW PF MASK INTO GACB+8
         MVC   TWLV(L4,RWORKA),ANMASK  PUT NEW AN MASK INTO GACB+12
CR12     EQU   *
         ST    RANA,ATTSAVE                                        000A
         L     RANA,GTMGACBA            GACB ADDR                  000A
         LA    RANA,GACBPLUS(RANA)      TRUE GACB ADDR             000A
         XC    LFORM(64),LFORM          ZERO LIST                  000A
         ATTNINQ (6),MODE=(C,CR12),TYP=ANY,MF=(E,LFORM)            000A
         L     RANA,ATTSAVE                                        000A
*   TEST ENTRIES ON ATTNDATA FOR MATCH TO NEWLY ENABLED SOURCES
         B     TESTATTN
ACTATNLV EQU   *
         CLC   ATTNFWPT(4),ZERO1       IS LEVEL ACTIVE
         BNE   RETCODE0                NO
*   PUT NEW PERM MASKS IN GACB3
         L     RWORKA,GTMGACBA         LOAD GACB ADDR
         LA    RWORKA,GACBPLUS(RWORKA) LOAD PTR TO TRUE START OF GACB
         MVC   8(4,RWORKA),ATTNPFEN    PUT PF ATN LVL MASK INTO GACB
         MVC   12(4,RWORKA),ATTNANEN   PUT AN ATN LVL MASK INTO GACB
         TM    GTMFEATS+1,HASPFK       DOES DEVICE HAVE A PF KEYBOARD
         BC    14,OUT                  BRANCH-NO
         L     RWORKA,ATTNPFEN         LOAD PF MASK
         LTR   RWORKA,RWORKA           ANY PF KEYS ENABLED
         BZ    RETCODE0                NO
         CLI   ATTNLITE,HEX03          ENABLED KEYS USED FOR PF LITES
         BE    TURNONL
*   SET PF LITES ON AS PER ENABLED KEYS
         CLI   ATTNLITE,HEX01          SYS DEFAULT OPTION IN GTMCB
         BNE   RETCODE0
         CLI   GTMLIGHT,HEX03          LIGHT ENABLED KEYS
         BNE   RETCODE0                NO
*   TURN PF LIGHTS ON
TURNONL  EQU   *
         XC    DECB(36),DECB           CLEAR I/O AREA
         L     RWORKD,GTMGRDCB         LOAD DCB ADDR
         LA    RWORKC,DATA             LOAD DATA ADDR
         LA    REG1,DECB               LOAD PARM LIST ADDR
         MVC   DATA(4),ATTNPFEN        PUT KEY MASK INTO DATA (LIGHTS)
         GCNTRL (1),IND,(7),(11),MF=E  TURN LIGHTS ON
         WAIT  ECB=(1)
         CLI   DECB,IOK                I/O SUCCESSFULL
         BE    OUT                     BRANCH- I/O OK
         L     REG1,RCA                LOAD RTN CODE ARRAY ADR
         OI    ZERO(REG1),RC5          INDICATE I/O ERROR
         B     OUT                     RETURN TO CALLER
RETCODE0 EQU   *
         B     OUT                     RETURN TO CALLER
         LA    RWORKC,ADD0             LOAD ADD INFO
         LA    RWORKB,ADD0             LOAD RETURN CODE
         LA    RWORKD,RC4              LOAD OFFSET
         B     ERROR
         EJECT
CONVERTA SAVE  (2,12)                  SAVE REGS
         LA    RSOURCE,ATNSRCE         LOAD ADR OF 1ST ARG
         LA    RFIRST,NEXT             INDICATE 1ST ARG
         SR    RPFA,RPFA               CLEAR PF REG
         SR    RANA,RANA               CLEAR A/N REG
         LA    RINFO,ADD5              LOAD 1ST ADD INFO CODE
         B     REQ18                   BRANCH
REQOK    SR    RWORKB,RWORKB           ZERO RETURN CODE
         LR    REG0,RANA               LOAD A/N MASK
         LR    REG1,RPFA               LOAD P/F MASK
         B     REQ19                   BRANCH
REQERR   LR    RWORKB,RINFO            LOAD RETURN CODE
REQ19    RETURN (2,12)                 RETURN
REQ18    L     RC,ZERO(RSOURCE)        LOAD ADR OF ARG
         TM    ZERO(RC),NEG            ARG NEGATIVE
         BC    1,REQNEG                BRANCH IF NEG
         L     RB,ZERO(RC)             LOAD VALUE OF ARG
REQ24    CL    RB,MAX                  VALUE GREATER THAN ALLOWABLE
         BC    2,REQERR                BRANCH IF YES
REQ23    CL    RB,ANSIZE               VALUE GREATER THAN 31
         BC    2,REQ20                 BRANCH IF YES
         L     RE,PRIME                PRIME REG
         SRL   RE,ZERO(RB)             POSITION BIT
         OR    RPFA,RE                 ADD TO PF MASK
REQ26    TM    ZERO(RC),NEG            ARG NEG
         BC    1,REQ21                 BRANCH IF YES
REQ22    TM    ZERO(RSOURCE),LAST      MORE ARGS
         BC    1,REQOK                 BRANCH IF NO
         L     RA,ZERO(RC)             SAVE VALUE PRESENT ARG
         LA    RSOURCE,NEXT(RSOURCE)   STEP TO NEXT ARG
         SR    RFIRST,RFIRST           INDICATE NOT 1ST ARG
         LA    RINFO,ONE(RINFO)        INCREMENT ADD INFO
         B     REQ18                   BRANCH TO MORE ARGS
REQ21    LA    RE,ONE                  LOAD CONSTANT
         SR    RB,RE                   DECREMENT ARG BY 1
         CLR   RA,RB                   VALUE=PREVIOUS VALUE
         BE    REQ22                   BRANCH IF YES
         B     REQ23                   BRANCH
REQNEG   LTR   RFIRST,RFIRST           FIRST ARG
         BC    7,REQERR                BRANCH IF YES
         LTR   RA,RA                   PREV ARG NEG
         BC    4,REQERR                BRANCH IF YES
         L     RB,ZERO(RC)             LOAD VALUE OF ARG
         LPR   RB,RB                   MAKE ARG POS
         CLR   RB,RA                   VALUE GREATER THAN PREV ARG
         BC    2,REQ24                 BRANCH IF YES
         B     REQERR                  BRANCH
REQ20    LA    RD,END                  LOAD ADR OF CONSTANT
         LA    RE,ONE                  LOAD CONSTANT
REQ27    CL    RB,ZERO(RD)             COMPARE
         BE    REQ25                   BRANCH IF YES
         SLL   RE,ONE                  SHIFT BIT
         LA    RD,NEXT(RD)             LOAD NEXT CONSTANT ADR
         B     REQ27                   BRANCH
REQ25    OR    RANA,RE                 ADD BIT TO MASK
         B     REQ26                   BRANCH
         SPACE 3
*   CONSTANTS
*   END,LP,EOS,CANCEL,MAX,ANSIZE FIELDS MUST BE IN SEQUENCE
END      DC    A(32)
LP       DC    A(34)
EOS      DC    A(35)
CANCEL   DC    A(33)
MAX      DC    A(36)
ANSIZE   DC    A(31)
PRIME    DC    X'80000000'             PF PRIME VALUE
ZERO1    DC    1F'0'
         EJECT
WORKAREA DSECT
PARAM    DS    1F
RCA      DS    1F
ANMASK   DS    1F                      SAVE AREA FOR ANMASK
PFMASK   DS    1F                      SAVE AREA FOR PFMASK
SAVE     DS    18F
DECB     DS    8F                      I/O DECB
SAVE1    DS    1F
*   GACB,TYPE,OPT,TYP,BRANCH,COM FIELDS MUST BE IN SEQUENCE
GACB     DS    1F
TYPE     DS    BL1
OPT      DS    BL1
TYP      DS    1H
BRANCH   DS    1F
COM      DS    3F
DATA     DS    1F                      DATA AREA FOR IO
ATNFLAG  DS    BL1                     ATTNDATA SWITCH
ATTSAVE  DS    F                                                   000A
LFORM    DS    16F                                                 000A
         SPACE 3
PLIST    DSECT
ATNLVL   DS    1F
ATNSRCE  DS    1F
         EJECT
         COPY  ATTNLEVL
         COPY  GTMCB
         COPY  GDSCB
         COPY  GSPCB
         END
