*
*        EXEC IS ENTERED FROM DIRECTOR PART 2 WITH THE ADDRESS OF
*        A WORK AREA IN REGISTER 1.  THE FIRST WORD OF THE WORK AREA
*        CONTAINS THE ADDRESS OF THE PARAMETER LIST BELOW.
*
*                   +0   A(GDSCB)
*
*
*
*
*        EXEC HAS NO EXTERNAL REFERENCES.
*
*        EXTERNAL MACROS USED ARE:
*
*        GWRITE
*        GCNTRL
*        WAIT
*
*
         EJECT
*
*        ON ENTRY THE REGISTERS ARE SAVED, THE SAVE AREAS ARE CHAINED
*        AND THE RETURN ARRAY IS SET TO ZERO. IF THE GDSCB ADDRESS
*        IS FOUND TO BE VALID PROCESSING PROCEEDS.
IFFAFA11 CSECT
* 415000                                                         A25386
         SAVE  (14,12)
         BALR  BASE,0
         USING *,BASE              BASE REGISTER
         LR    WORK,PARM
         USING WORKAREA,WORK       WORK AREA
         L     PARM,WRKPARM
         L     REGC,WRKRTNCD
         XC    0(20,REGC),0(REGC)  ZERO RETURN ARRAY
         LA    REGA,WRKSAVE        CHAIN SAVE AREAS
         ST    REGA,8(SAVE)
         ST    SAVE,4(REGA)
         LR    SAVE,REGA
         L     GDSREG,0(PARM)
         L     GDSREG,0(GDSREG)
         USING GDSCB,GDSREG        GDSCB
         C     GDSREG,GDSGDSCB     IS IT VALID
         BNE   ERR1                NO EXIT
         L     GTMREG,GDSGTMCB     GTMCB
         USING GTMCB,GTMREG
         L     OACB,GDSAOACB       LOAD ADDR OF OACB
         USING OACBAREA,OACB
*
*        EXEC IS CALLED TO WRITE DATA OUT FROM TWO AREAS, THE GDOA
*        AND THE GDSREPDT FIELD IN THE GDSCB.  IT MAY ALSO BE CALLED
*        TO MERELY START REGENERATION. IF INCUR HAD BEEN CALLED TO
*        INSERT A CURSOR INTO DATA THAT WAS IN THE GDOA AT THE TIME
*        THE ADDRESS OF THE CURSOR LOCATION WAS SAVED IN THE GDSCB
*        AND EXEC WILL WRITE THE CURSOR OUT.
*        A CHECK IS MADE TO SEE IF ANY DATA HAD EVER BEEN PLACED IN
*        THE GDS.  IT NOT, THE ROUTINE EXITS WITH A GOOD RETURN CODE.
*        NEXT A CHECK IS MADE TO SEE IF ANY DATA IS IN THE GDOA.  IF
*        NONE EXISTS THE PROGRAM BRANCHES TO SEE IF THERE IS ANY
*        REPLACEMENT DATA IN THE GDSCB OR IF ALL THAT IS REQUIRED
*        IA A RESTART OF THE BUFFER.
*
         TM    STATUS,NOTUSED      HAS ANYTHING EVER BEEN PLACED IN GDS
         BO    EXC00400            NO, EXIT
         CLC   CRSA,OLP            IS THERE ANYTHING IN THE GDOA
         BE    EXC00500            NO
         EJECT
EXC00100 L     REGA,OLP
         L     REGB,GTMGRDCB       LOAD DCB
*
*        A CHECK IS MADE TO SEE IF THERE IS ANY REPLACEMENT DATA IN
*        THE GDSCB.  IF THERE IS IT IS WRITTEN OUT.
         CLC   GDSREPDT,ZERO       ANY REPLACEMENT DATA TO BE WRITTEN
         BE    EXC00200            NO
         L     PARM,GTMDECB1       LOAD DECB
         WAIT  ECB=(1)             WAIT
         L     PARM,GTMDECB1       WRITE OUT OVERLAY DATA
         CLI   0(PARM),X'7F'
         BNE   ERR2
         NI    0(PARM),X'BF'
         GWRITE (PARM),BUF,(REGB),4,GDSREPDT,GDSREPPB,MF=E
         LTR   15,15
         BNZ   ERR2
         EJECT
*
*        NEXT ANY DATA IN THE GDOA IS TO BE WRITTEN OUT. IF THIS IS
*        AN EQUIVALINCE GDS THE GTRU BACK TO THE FLOW CONTROL ENTRY
*        IS PLACED IN THE GDOA AND THE LENGTH OF THIS GWRITE IS
*        INCREASED BY FOUR.  THIS DATA IS THEN WRITTEN OUT.
EXC00200 CLC   CRSA,OLP            ANY DATA TO BE WRITTEN FROM GDOA
         BE    EXC00320            NO
         L     PARM,GTMDECB1       LOAD DECB
         WAIT  ECB=(1)             WAIT
         L     REGC,OLP            CURRENT POS
         S     REGC,CRSA           MINUS START = LENGTH
         L     PARM,GTMDECB1
         TM    GDSFLAGS,EQUIV      IS THIS AN EQUIV
         BO    EXC01000            YES, MOVE IN GTRU TO F/C
EXC00250 ST    REGC,LEN(PARM)      PLACE LENGTH IN DECB
         L     REGD,CRSA
         CLI   0(PARM),X'7F'
         BNE   ERR2
         NI    0(PARM),X'BF'
         GWRITE (PARM),BUF,(REGB),,(REGD),BUFSTART+2,MF=E
         LTR   15,15
         BNZ   ERR2
         EJECT
*
*        IF THIS IS AN EQUIVALENCE GDS NO UPDATE OF THE OACB TAKES
*        PLACE.  OTHERWISE THE CRSA, BLP, BUFFER START, AND THE
*        LOGICAL START ADDRESS ARE UPDATED.
         TM    GDSFLAGS,EQUIV      IS THIS PART OF AN EQUIV
         BO    EXC00340            YES
         CLC   CPU1,ZERO           IS UNRES ADDR IN CORE
         BE    EXC00300            NO
         L     REGA,CPU1           YES SET TO A BUFFER ADDR
         S     REGA,CRSA
         A     REGA,BUFSTART
         ST    REGA,BUF1
         XC    CPU1,CPU1           ZERO CPU ADDR
EXC00300 A     REGC,BUFSTART       ADD LENGTH TO COMPUTE NEW BUFFER ST
         ST    REGC,BLP
         MVC   CRSA,OLP            SET CRSA TO OLP
         MVC   LOGSTART,LOGCURR    SET LOGSTART=LOGCURR
         L     REGA,LENLEFT        BUFFER LENGTH=
         LA    REGA,4(REGA)        LENGTH LEFT+4
         ST    REGA,BUFLEN
EXC00320 OI    STATUS,DATAREP      SET SW TO SAVE 4 BYTES FOR DATA REP
         MVC   GDSREPDT,ZERO       ZERO DATA REP FIELDS IN GDSCB-DATA
         MVC   GDSREPPB,ZERO       PHYS BUFFER
         EJECT
*
*        A TEST IS MADE TO SEE IF THE CURSOR IS IN THIS GDS.  IF IT
*        IA AND IF IT STILL NEEDS TO BE WRITTEN OUT, IT IS WRITTEN
*        OUT AT THIS POINT.
EXC00340 L     PARM,GTMDECB1       GET DECB
         TM    GDSFLAGS,CURSOR     IS THERE A CURSOR IN THIS GDS
         BZ    EXC00350            NO
         CLC   GTMCRLOC,ZERO       MUST IT BE WRITTEN OUT
         BE    EXC00350            NO
         L     PARM,GTMDECB1
         WAIT  ECB=(1)             WAIT
         L     PARM,GTMDECB1       WRITE OUT OVERLAY DATA
         CLI   0(PARM),X'7F'
         BNE   ERR2
         NI    0(PARM),X'BF'
         GCNTRL (PARM),INS,(REGB),GTMCRLOC,MF=E  INSERT CURSOR
         LTR   15,15
         BNZ   ERR2
         EJECT
*
*        AT THIS POINT THE EQUIVALENCE GDS WILL GO EXECUTE A GCNTRL
*        MACRO TO RESTART REGENERATION.  ALL OTHERS WILL WRITE OUT
*        THE GTRU BACK TO FLOW CONTROL INTO THE BUFFER AND EXIT.
*
EXC00350 TM    GDSFLAGS,EQUIV      IS THIS EQUIV
         BO    EXC00600            YEX, WE ARE DONE
         L     PARM,GTMDECB1       LOAD DECB
         WAIT  ECB=(1)             WAIT
         MVC   BUFSTART,BLP
         L     PARM,GTMDECB1       DECB
         CLI   0(PARM),X'7F'
         BNE   ERR2
         NI    0(PARM),X'BF'
         GWRITE (PARM),STR,(REGB),4,GDSOVDAT,BUFSTART+2,GDSFCBUF,MF=E
         LTR   15,15
         BNZ   ERR2
         EJECT
         TM    GDSFLAGS,EQUIV      IS THIS EQUIV GDS
         BO    EXC00600            YES
EXC00400 L     SAVE,4(SAVE)
         TM    GDSFLAGS,CURSOR     IS CURSOR PRESENT
         BZ    EXC00450            NO
         XC    GTMCRLOC,GTMCRLOC   ZERO LOCATION
EXC00450 RETURN (14,12),T,RC=(15)
         EJECT
EXC00500 CLC   GDSREPDT,ZERO       IS ANYTHING IN REP DATA
         BNE   EXC00100            YES, SOMETHING HAS BEEN GEN SINCE
*                                  LAST EXEC
*
*        IF NOTHING HAS BEEN GENERATED SINCE THE LAST CALL TO EXEC
*        AND THIS IS NOT AN EQUIVALENCE GRAPHIC DATA SET, REGENERATION
*        WILL BE STARTED WITH GCNTRL MACRO.
*
         TM    GDSFLAGS,EQUIV      EQUIV
         BO    EXC00200            YES, WRITE TO THE BUFFER
EXC00550 L     PARM,GTMDECB1       RESTART BUFFER REGENERATION
         WAIT  ECB=(1)             WAIT ON I/O
         L     REGA,GTMGRDCB       ADDR OF DCB
         L     PARM,GTMDECB1       ADDR OF DECB
         CLI   0(PARM),X'7F'
         BNE   ERR2
         NI    0(PARM),X'BF'
         GCNTRL (PARM),STR,(REGA),GDSFCBUF,MF=E
         LTR   15,15
         BNZ   ERR2
         B     EXC00400            NO, RETURN
         EJECT
*
*        AT THIS POINT THE EQUIVALENCE GRAPHIC DATA SET HAS TO SHOW
*        THAT IT IS THE ONE IN THE BUFFER.  THIS INVOLVES TURNING OFF
*        THE FLAG IN ALL THE OTHER EQUIVALENCE GRAPHIC DATA SETS
*        ON THE CHAIN AND TURNING ON THE FLAG IN THIS GRAPHIC DATA
*        SET.  AFTER THIS IS DONE REGENERATION IS STARTED.
*
EXC00600 OI    GDSFLAGS,INBUF      SET SW TO SAY THIS EQUIV IN BUFFER
         L     REGA,GDSSHDBK       LOAD SHARED PTR BACK
         LR    REGC,GDSREG    SAVE REGISTER
         L     REGB,GDSSHDFD       LOAD FOREWARD
         LR    GDSREG,REGA
EXC00700 C     GDSREG,ZERO         ANY MORE BACK
         BE    EXC00800            NO
         NI    GDSFLAGS,NOTIN      TURN OFF IN BUFFER FLAG
         L     GDSREG,GDSSHDBK     PICK UP NEXT
         B     EXC00700
EXC00800 LR    GDSREG,REGB         PICK UP FOREWARD
EXC00900 C     GDSREG,ZERO         ANY MORE
         BE    EXC01100       RESET REG AND START REGENERATION
         NI    GDSFLAGS,NOTIN      TURN OFF IN BUFFER FLAG
         L     GDSREG,GDSSHDFD     PICK UP NEXT
         B     EXC00900
EXC01000 A     REGC,FOUR           ADD FOUR TO LENGTH
         L     REGD,OLP            PICK UP OLP
         MVC   0(4,REGD),GDSOVDAT  MOVE IN TO GDOA TEMPORARILY
         B     EXC00250            GO WRITE OUT GDOA
EXC01100 LR    GDSREG,REGC    RESET REG
         B     EXC00550
ERR1     OI    0(REGC),PARERR      SET PARM ERR
         LA    REGB,ONE
         ST    REGB,PARE(REGC)     ON GDSCB
         B     EXC00400            RETURN
ERR2     L     REGC,WRKRTNCD
         OI    0(REGC),IO
         B     EXC00400
         EJECT
* REGISTERS
REGZERO  EQU   0
PARM     EQU   1
REGA     EQU   2
REGB     EQU   3
OACB     EQU   4
WORK     EQU   5
GTMREG   EQU   7
GDSREG   EQU   8
BASE     EQU   9
REGC     EQU   10
REGD     EQU   11
SAVE     EQU   13
RETURN   EQU   14
REGFIFTN EQU   15
         EJECT
ZERO     DC    F'0'
FOUR     DC    F'4'
NOTUSED  EQU   X'80'
EQUIV    EQU   X'08'
DATAREP  EQU   X'40'
INBUF    EQU   X'80'
NOTIN    EQU   X'7F'
PARERR   EQU   X'08'
CURSOR   EQU   X'20'
LEN      EQU   20
ONE      EQU   1
PARE     EQU   16
IO       EQU   X'04'
         EJECT
OACBAREA DSECT
OTHER    DS    F
GDOA     DS    F
STATUS   DS    F
CRSA     DS    F
OLP      DS    F
BLP      DS    F
BUFSTART DS    F
BUFLEN   DS    F
CPU1     DS    F
BUF1     DS    F
CPU2     DS    F
BUF2     DS    F
LOGSTART DS    F
LOGCURR  DS    F
LENLEFT  DS    F
         EJECT
WORKAREA DSECT
WRKPARM  DS    F
WRKRTNCD DS    F
WRKSAVE  DS    18F
         COPY  GDSCB
         COPY  GTMCB
         COPY  GSPCB
         END
