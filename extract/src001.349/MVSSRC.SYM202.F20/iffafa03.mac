     TITLE   'PTEXT - IFFAFA03 '
***********************************************************************
*                                                                     *
*TITLE         PTEXT                                                  *
*                                                                     *
*MODULE NAME   IFFAFA03                                               *
*                                                                     *
*STATUS        CHANGE LEVEL 000                                       *
*                                                                     *
*FUNCTION/OPERATION                                                   *
*  TO PRODUCE CHARACTER TEXT ON THE GRAPHIC OUTPUT MEDIUM USING THE   *
*  CHARACTER GENERATOR. TO UPDATE PREVIOUSLY GENERATED PTEXT GRAPHIC  *
*  DATA.                                                              *
*                                                                     *
*ENTRY POINT   IFFAFA03- CSECT NAME                                   *
*                                                                     *
*INPUT   REGISTER 1 CONTAINS THE ADDRESS OF A WORK SAVE AREA. THE     *
*  FIRST WORD CONTAINS THE ADDRESS OF A VARIABLE LENGTH PARAMETER     *
*  LIST ON A FULL WORD BOUNDARY. THE SECOND WORD CONTAINS THE         *
*  ADDRESS OF THE RETURN ARRAY. THE NULL VARIABLE IS AT AN OFFSET     *
*  OF 20 FROM THE RETURN ARRAY, AND THE ADDRESS OF THE STATUS TABLE   *
*  IS AT AN OFFSET OF 24 FROM THE RETURN ARRAY                        *
*FORMAT OF PARAMETER LIST                                             *
* REQUIRED PARAMETERS                                                 *
*                                                                     *
*  +0    A(VAR)     ADDRESS OF A VARIABLE WHICH CONTAINS THE GDSCB    *
*                   ADDRESS.                                          *
*  +4    A(TEXT)    ADDRESS OF THE TEXT ARRAY WHICH CONTAINS THE      *
*                   CHARACTERS TO BE DISPLAYED, LEFT ADJUSTED AND     *
*                   PACKED FOUR TO THE FULL WORD.                     *
*  +8    A(COUNT)   ADDRESS OF THE COUNT OF THE NUMBER OF ALPHAMERIC  *
*                   CHARACTERS TO BE PLACED ON THE SCREEN.            *
*                                                                     *
* OPTIONAL PARAMETERS                                                 *
*                                                                     *
*  +12   A(CORRVAL) ADDRESS OF A CORRELATION VALUE                    *
*                                                                     *
*  +16   A(KEY)     ADDRESS OF A LOCATION INTO WHICH THE KEY IS TO    *
*                   BE INSERTED ON ORIGINAL GENERATION OR THE         *
*                   ADDRESS OF THE KEY ON UPDATE GENERATION.          *
*  +20   A(GENCODE) ADDRESS OF A CODE                                 *
*                     1 = INCLUDE                                     *
*                     2 = OMIT                                        *
*                     3 = UPDATE                                      *
*  +24   A(UVAL)    THE X VALUE TO WHICH THE CHARACTER STRING IS TO   *
*                   BE POSITIONED                                     *
*  +28   A(VVAL)    THE Y VALUE TO WHICH THE CHARACTER STRING IS TO   *
*                   BE POSITIONED                                     *
*                                                                     *
*OUTPUT                                                               *
*  NONE TO CALLER. THE DATA WILL BE SCISSORED, AND IF IT APPEARS ON   *
*  THE SCREEN, ORDERS WILL BE GENERATED FOR IT IN THE GDOA            *
*                                                                     *
*EXTERNAL ROUTINES                                                    *
*  IFFAFA12 - RESET
*  IFFAFA17 - MVPOS USED TO POSITION BEAM WHEN X AND Y PARAMETERS     *
*             PASSED.                                                 *
*  IFFAHA03   KEY TABLE MANAGEMENT                                    *
*  IFFAHA04   DATA GENERATION                                         *
*  IFFAHA05   DATA STORE                                              *
*  IFFAHA07   SCISSOR                                                 *
*  IFFAHA13   GET GDOA'S FOR UPDATE                                   *
*  IFFAHA14   WRITE OUT UPDATE                                        *
*                                                                     *
*EXITS - BACK TO CALLER VIA REGISTER 14                               *
*  APPROPRIATE CODES ARE SET IN THE RETURN ARRAY- SEE GSPARRAY        *
*                                                                     *
*TABLES/WORKAREAS - SEE WORKAREA DSECT                                *
*                                                                     *
*ATTRIBUTES       - REENTRANT, PROBLEM PROGRAM MODE.                  *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
***********************************************************************
         EJECT
IFFAFA03 CSECT                          PTEXT
*D482300-482600,584000                                           A32072
*                                                                A32087
* 790000                                                         A29414
*2277,320800-322400,589000-590000,852000-853000                    000B
*2277,400000-403000,591000-593000,774000-777000,786000-789000      000C
*2277,601000,855000                                                000D
*D692000-694000                                                  YM1963
*A692000-694400                                                  YM1963
*A163140-163160,399500-400000,C401000,A785300-785600,C786000D11 ZA15418
*A163180,851200-852200,C853000-856000                       D11 ZA15437
         SPACE 2
*REGISTERS
*
EVEN     EQU   0
PARM     EQU   1
REGA     EQU   2
REGB     EQU   3
REGC     EQU   4
WORK     EQU   5
ERRCD    EQU   6
GTMREG   EQU   7
GDSREG   EQU   8
BASE     EQU   9
REGD     EQU   10
COUNT    EQU   11
SAVE     EQU   13
RETREG   EQU   14
BRANCH   EQU   15
         SPACE 2
*PARAMETER LIST EQUATES
GDS      EQU   0                        ADDRESS OF GDS VARIABLE
TXT      EQU   4                        ADDRESS OF TEXT ARRAY
CT       EQU   8                        ADDRESS OF NUMBER OF CHARACTERS
COR      EQU   12                       ADDRESS OF CORRVAL
KEY      EQU   16                       ADDRESS OF KEY
GEN      EQU   20                       ADDRESS OF GENCODE
X        EQU   24                       ADDRESS OF X COORD FOR START
Y        EQU   28                       ADDRESS OF Y COORD FOR START
*
NL       EQU   21
SCERR    EQU   4
MVPOS    EQU   360
DGEN     EQU   840
DSTORE   EQU   852
SCISS    EQU   876
CURRLOG  EQU   52
CVTLINK  EQU   8
LNK      EQU   8
NULL     EQU   20
PARMERR  EQU   16
STAT     EQU   24
STOR     EQU   12
FE       EQU   48                                                  000A
ETE      EQU   828                                                 000A
         SPACE 2
GRBP     EQU   X'80'                    GRAPHIC MODE SWITCH SETTINGS
GRLP     EQU   X'40'                    *
GRBU     EQU   X'20'                    *
GRLU     EQU   X'10'                    *
BP       EQU   X'08'
LP       EQU   X'04'
BU       EQU   X'02'
LU       EQU   X'01'
BASIC    EQU   X'0A'
LARGE    EQU   X'05'
         SPACE 2
CORRE    EQU   X'10'
KEYED    EQU   X'20'
OPT      EQU   X'04'
MULT     EQU   X'80'
OMIT     EQU   X'FB'
INCLUDE  EQU   X'04'
UPDATE   EQU   X'FF'
LASTON   EQU   X'1F'
CONTROL  EQU   X'00'
UNRES    EQU   X'01'
MEMSUB   EQU   X'80'
MEMSEQ   EQU   X'40'
SEQ      EQU   X'04'
OFF      EQU   X'00'
STRG     EQU   X'10'
PRM      EQU   X'08'
NOSCISS  EQU   X'10'
SCISSOR  EQU   X'40'
POS      EQU   X'11'
YCOR     EQU   X'01'
XCOR     EQU   X'10'
SUBR     EQU   X'02'
LEVEL2   EQU   X'10'
LAST     EQU   X'80'
LINKSW   EQU   X'01'
ODD      EQU   X'01'
CHARGEN  EQU   X'08'
RESOL    EQU   X'02'
ALIGN    EQU   X'00'
STOP     EQU   X'01'
SCISSON  EQU   X'40'
WORD1    EQU   0        USE ZERO DISPLACEMENT FOR GSPARRAY       A29414
IOERR    EQU   X'04'    I/O ERROR FLAG, WORD 1, GSPARRAY         A29414
UPDH13   EQU   936                 STATAB DISPL-IFFAHA13    D11 ZA15418
UPDH14   EQU   948                 STATAB DISPL-IFFAHA14    D11 ZA15418
RESET    EQU   468                 STATAB DISPL-IFFAFA12    D11 ZA15437
DSP04    EQU   X'15C'                                              000C
STABADR  EQU   24                      DISPLACEMENT TO GSPASTAT    000C
R14      EQU   14                                                  000C
R15      EQU   15                                                  000C
         EJECT
         USING *,15
         SAVE  (14,12)
         DROP  15
*
*INITIALIZATION
*THIS CODE ESTABLISHED ADDRESSABILITY FOR IFFAFA03, FOR THE GDSCB, AND
*FOR THE WORKAREA. THE RETURN ARRAY IS SET TO ZERO, AND THE SAVE AREAS
*ARE CHAINED.
*
*                                       ESTABLISH BASES FOR
         LR    BASE,15                  IFFAFA03
         USING IFFAFA03,BASE
         LR    WORK,PARM                WORK AREA
         USING WORKAREA,WORK
         L     PARM,WKPARM              LOAD PARAMETER LIST ADDRESS
         L     GDSREG,GDS(PARM)         PCIK UP GDSCB VARIABLE ADDRESS
         L     GDSREG,0(GDSREG)         ESTABLISH BASE FOR GDSCB
         USING GDSCB,GDSREG
         L     ERRCD,WKRTNCD
         XC    0(20,ERRCD),0(ERRCD)     ZERO RETURN ARRAY
         LA    REGA,WKSAVE              CHAIN SAVE AREAS
         ST    REGA,8(SAVE)
         ST    SAVE,4(REGA)
         LR    SAVE,REGA
         EJECT
*PARAMETER LIST SCAN
*
*TEST FOR VALID GDSCB AND CHARACTER GENERATOR PRESENT
*IF THE CHARACTER GENERATOR IS NOT PRESENT, IT IS AN INVALID CALL.
*
         C     GDSREG,GDSGDSCB
         BNE   AFAERR10                 BRANCH IF INVALID GDSCB- ERROR
         L     GTMREG,GDSGTMCB          PICK UP GTMCB ADDRESS
         USING GTMCB,GTMREG
         TM    GTMFEATS+1,CHARGEN
         BZ    AFAERR00                 BRANCH IF NO CHARACTER GENER.
*                                        -INVALID CALL- ERROR
         DROP  GTMREG
*
*PREPARE SKELETON KEY AND PARAMETER LIST
*THE SWITCHES IN THE KEY ARE INITIALIZED AS CHARACTER MODE, AND INCLUDE
*STATUS. APPROPRIATE SWITCHES ARE SET IF THE ELEMENT IS A MEMBER OF A
*SEQUENCE OR SUBROUTINE.
*
         XC    WKSPVSR(12),WKSPVSR     ZERO PARM LIST FOR LINK MACRO
         XC    WKBITSA(8),WKBITSA       ZERO WORK AREA AND
         XC    WKADDR(68),WKADDR         PARAMETER LIST
         MVC   WKBITS,BITS              MOVE SKELETON KEY IN
         TM    GDSFLAGS,SEQ
         BZ    AFAPAR05                 BRANCH IF NOT MEMBER OF SEQ
         OI    WKBITS+3,MEMSEQ          SET SWITCH IN KEY
AFAPAR05 TM    GDSFLAGS,SUBR
         BZ    AFAPAR10                 BRANCH IF NOT SUBROUTINE MEM
         OI    WKBITS+3,MEMSUB          SET SWITCH IN KEY
AFAPAR10 ST    GDSREG,WKGDS             GDSCB ADDRESS
         MVC   WKRTN,WKRTNCD            ADDRESS-OF RETURN ARRAY
*
*                                                                     *
*TEST FOR TEXT AND COUNT PARAMETERS PRESENT. SET UP COUNT IN REGISTER
*FOR LATER USE, AND PLACE THE CHARACTER COUNT IN THE KEY
*                                                                     *
         TM    GDS(PARM),LAST
         BO    AFAERR00                 BRANCH IF REQ PARMS NOT PRESENT
         CLC   NL(3,ERRCD),TXT+1(PARM)
         BE    AFAERR20                 BRANCH IF TEXT NULL - ERROR
         TM    TXT(PARM),LAST
         BO    AFAERR00                 BRANCH IF REQ PARMS NOT PRESENT
         CLC   NL(3,ERRCD),CT+1(PARM)
         BE    AFAERR30                 BRANCH IF COUNT NULL-ERROR
         L     COUNT,CT(PARM)           ADDRESS OF COUNT
         L     COUNT,0(COUNT)           PICK UP COUNT
         LTR   COUNT,COUNT
         BZ    AFARET10                 BRANCH IF COUNT ZERO- RETURN
         BM    AFAERR30                 BRANCH IF COUNT NEGATIVE-ERROR
         STC   COUNT,WKBITS+2           STORE CHARACTER COUNT IN KEY
         SRA   COUNT,8
         STC   COUNT,WKBITS+1
         L     COUNT,CT(PARM)           RESET COUNT REGISTER
         L     COUNT,0(COUNT)
         TM    CT(PARM),LAST
         BO    AFADAT10                 BRANCH IF NO OPTIONAL PARMS
     EJECT
*THIS SECTION EXAMINES THE OPTIONAL PARAMETERS CORRVAL, KEY AND GENCODE
*AND TESTS THEM FOR VALIDITY. IF NECESSARY, THE INCLUDE-OMIT STRUCTURE
*IS BUILT. IF THERE IS A VALID UPDATE, KEY MANAGEMENT IS CALLED. IF
*NECESSARY DATA STORE IS CALLED TO ENTER ORDERS IN THE GDOA.
*
         CLC   NL(3,ERRCD),COR+1(PARM)
         BE    AFAPAR20                 BRANCH IF CORRVAL NULL
         TM    GDSFLAGS,LEVEL2
         BO    AFAPAR20                 BRANCH IF PASSED, BUT LEVEL 2
         L     REGC,COR(PARM)           LOAD ADDRESS OF CORRVAL AND
         MVC   WKCORVL,0(REGC)          PLACE CORRVAL IN KEY AREA
         OI    WKSWITCH+2,CORRE         SET CORRVAL SWITCH
*
AFAPAR20 TM    COR(PARM),LAST
         BO    AFADAT10                 BRANCH IF NO MORE PARAMS
         CLC   NL(3,ERRCD),KEY+1(PARM)
         BE    AFAPAR25                 BRANCH IF KEY NULL
         MVC   WKKEY,KEY(PARM)          SAVE KEY ADDRESS
         TM    GDSFLAGS,LEVEL2
         BO    AFAPAR25                 BRANCH IF LEVEL 2 KEY
         OI    WKSWITCH+2,KEYED         SET KEY SWITCH
AFAPAR25 TM    KEY(PARM),LAST
         BO    AFADAT10                 BRANCH IF NO MORE PARAMETERS
         CLC   NL(3,ERRCD),GEN+1(PARM)
         BE    AFAPAR30                 BRANCH IF GENCODE NULL
         L     REGC,GEN(PARM)           PICK UP ADDRESS OF CODE AND
         L     REGC,0(REGC)             ACTUAL CODE
         C     REGC,ONE
         BE    AFAPAR30                 BRANCH IF 'INCLUDE' - SWITCH
*                                       ALREADY SET
         CLC   WKCORVL(8),ZERO
         BE    AFAERR60                 BRANCH IF NO KEY OR CORRVAL
         C     REGC,TWO
         BNE   AFAPAR50                 BRANCH IF NOT 'OMIT'
         TM    GDSFLAGS,LEVEL2
         BO    AFAERR60                 BRANCH IF LEVEL 2 - ERROR
         NI    WKBITS,OMIT              TURN OFF INCLUDE SWITCH
AFAPAR30 TM    WKSWITCH+2,CORRE
         BZ    AFAPAR35
         CLC   WKCORVL,ZERO
         BE    AFAERR40                 BRANCH IF CORRVAL ZERO - ERROR
         EJECT
*THIS SECTION EXAMINES THE X AND Y COORDINATE PARAMETERS. IF THEY
*ARE PRESENT MVPOS WILL BE CALLED TO POSITION THE BEAM
*
AFAPAR35 TM    GEN(PARM),LAST
         BO    AFADAT10                 BRANCH IF NO MORE PARAMETERS
         CLC   NL(3,ERRCD),X+1(PARM)
         BE    AFAPAR40                 BRANCH IF X NULL
         OI    WKSWITCH+1,XCOR          SET SW&TCH, X PRESENT
AFAPAR40 TM    X(PARM),LAST
         BO    AFAPAR45                 BRANCH IF LAST
         CLC   NL(3,ERRCD),Y+1(PARM)
         BE    AFAPAR45                 BRANCH IF Y NULL
         OI    WKSWITCH+1,YCOR          SET SWITCH, Y PRESENT
AFAPAR45 TM    WKSWITCH+1,POS
         BM    AFAERR00                 ERROR IS ONE COORDINATE PASSED
         B     AFADAT10
         EJECT
*CHECK FOR VALID UPDATE
*
AFAPAR50 C     REGC,THREE
         BNE   AFAERR60                 BRANCH IF INVALID GENCODE
         TM    GDSFLAGS,SUBR
         BO    AFAERR00                 BRANCH IF BUFF SUBR- ERROR
         TM    GDSFLAGS,LEVEL2
         BO    AFAPAR80                 BRANCH IF LEVEL 2 TO SET KEY
         TM    WKSWITCH+2,KEYED
         BZ    AFAPAR85                 BRANCH IF NOT KEYED
*
*PREPARE FOR SEARCH ON KEY              PARAMETERS--
*
         L     REGB,KEY(PARM)           ADDRESS OF KEY IN PARM LIST
         ST    REGB,WKKADDR
         LA    REGB,TWO                 CODE FOR SEARCH ON KEY
AFAPAR55 ST    REGB,WKCODE
         ST    GDSREG,WKGDS1            ADDRESS OF GDSCB
         LA    PARM,WKGDS1
*
*LINK TO KEY TABLE MANAGEMENT FOR SEARCH ON KEY OR CORRVAL
*
         L     REGB,STABADR(ERRCD)      GET STATUS TABLE ADDR      000B
         L     BRANCH,ETE(REGB)    GET ADRS OF KEY TABLE MGMT      000A
         BALR  RETREG,BRANCH       BRANCH TO KEY TABLE MGMT        000A
AFAPAR60 LTR   BRANCH,BRANCH
         BNE   AFAERR00                 BRANCH IF INVALID KEY
         MVC   WKADDR,0(PARM)           MOVE IN KEY START
         OC    WKBITS+3(1),7(PARM)      MOVE IN FLAGS FORM OLD KEY
         TM    4(PARM),INCLUDE
         BO    AFAPAR62
         NI    WKBITS,OMIT              TURN OFF INCLUDE SWITCH
AFAPAR62 TM    WKSWITCH+2,CORRE
         BZ    AFAPAR65                 BRANCH IF NO CORRVAL
         ST    PARM,WKSTORAD            SAVE KEY ADDRESS
AFAPAR65 MVI   WKSWITCH,UPDATE          SET UPDATE SWITCH
         L     PARM,WKPARM              RESET PARAMETER REGISTER
         B     AFAPAR35
         SPACE 2
*
AFAPAR80 L     REGC,KEY(PARM)           LOAD KEY ADDRESS AND
         MVC   WKADDR,0(REGC)            PUT FIRST WORD IN NEW KEY
         B     AFAPAR65
*
*PREPARE FOR SEARCH ON CORRVAL
*
AFAPAR85 CLC   WKCORVL,ZERO
         BE    AFAERR00                 BAD PARAMETER COMBINATION
         LA    REGB,WKCORVL             PREPARE PARAMS FOR SEARCH ON
         ST    REGB,WKKADDR                CORRVAL
         LA    REGB,FIVE                WORK CODE FOR SEARCH ON CORRVAL
         B     AFAPAR55
         EJECT
*
*THIS SECTION INITIALIZES FOR CHARACTER OUTPUT. IF IT IS AN UPDATE,
*GDOA'S ARE OBTAINED. IF THE ELEMENT IS KEYED OR CORRVALED, THE
*INCLUDE OMIT STRUCTURE IS BUILT
AFADAT10 CLI   WKSWITCH,UPDATE
         BE    AFADAT70                 BRANCH IF UPDATE
         L     REGD,GDSAOACB            OACB
         L     REGD,CURRLOG(REGD)       LOGICAL START
         STH   REGD,WKADDR+2            IN ELEMENT
*
*CHECK FOR KEY AND CORRVAL
*
AFADAT25 TM    WKSWITCH+2,KEYED+CORRE
         BZ    AFAPOS10                 BRANCH IF NO KEY OR CORRVAL
*
*SET UP TO CALL DATA STORE
*
         ST    GDSREG,WKGDS1            ADDRESS OF GDSCB
         MVC   WKRTN1,WKRTNCD           ADDRESS OF RETURN ARRAY
         LA    REGC,WKOUTPT+4           ADDRESS OF ORDERS
         XC    WKOUTPT(4),WKOUTPT       ZERO FIRST WORD
         TM    WKBITS,INCLUDE
         BO    AFADAT75                 BRANCH IF INCLUDE STATUS
         MVC   0(4,REGC),GTRUORD        MOVE IN GTRU
AFADAT30 MVI   WKOUTPT,UNRES
         NI    GDSGRMOD,CONTROL         SET TO CONTROL MODE
         LA    REGD,4
         STH   REGD,WKOUTPT+2           SET LENGTH TO 4
         LA    PARM,WKGDS1
*/
*/CALL DATA STORE TO SET UP INCLUDE/OMIT STRUCTURE
*/
         L     BRANCH,STAT(ERRCD)       ADDRESS OF STATUS TABLE
         L     BRANCH,DSTORE(BRANCH)    ADDRESS OF DATA STORE
         BALR  RETREG,BRANCH
*
         LTR   BRANCH,BRANCH
         BNE   AFARES11                                            0544
         L     REGD,GDSAOACB           OACB
         L     REGD,CURRLOG(REGD)      LOGICAL ADDRESS IN BUFFER
         S     REGD,FOUR               POINT TO ELEMENT START
         STH   REGD,WKADDR+2           AND STORE IN KEY
         B     AFAPOS10
         EJECT
*CALL TO GET GDOA'S FOR UPDATE
*
AFADAT70 LA    PARM,WKADDR              PARAMETER LIST ADDRESS
         L     BRANCH,STABADR(ERRCD) POINT TO STATUS TABLE  D11 ZA15418
         L     BRANCH,UPDH13(BRANCH) AND TO IFFAHA13        D11 ZA15418
         BALR  RETREG,BRANCH       GOTO UPDATE              D11 ZA15418
         LTR   BRANCH,BRANCH
         BE    AFADAT25                 BRANCH IS SUCCESSFUL
         B     AFAERR81                                            0544
*
*SET UP INCLUDE-OMIT STRUCTURE FOR INCLUDE
*
AFADAT75 MVC   0(4,REGC),GNOPORD        MOVE IN GNOP
         B     AFADAT30
     EJECT
*THIS SECTION CALLS MVPOS IF THE X AND Y COORDINATES WERE PASSED
*
AFAPOS10 MVC   WKXCURR(4),GDSXCURR      SAVE X-Y CURR
         MVC   WKXLAST(8),GDSXLAST      SAVE X- Y LAST
AFAPOS20 TM    WKSWITCH+1,POS
         BZ    AFASCS30                 BRANCH IF POSITION NOT REQ
*SET UP PARAMETERS FOR MOVE POSITION
*
         MVC   WKSWITCH+3(1),GDSFLAGS
         TM    WKBITS+3,MEMSUB          TEST FOR GENERATING OR UPDATING
         BZ    AFAPOS15                  SUBR- BRANCH IF NOT
         TM    GDSFLAGS,SUBR
         BO    AFAPOS15                 BRANCH IF GENERATING SUBR
*
*IF UPDATING SUBROUTINE, GDSFLAGS MUST BE CHANGED FOR MOVE POSITION
*
         OI    GDSFLAGS,SUBR            SET SWITCH FOR SUBROUTINE
AFAPOS15 L     PARM,WKPARM             RESTORE PARM REGISTER
         LA    REGC,WKGDSADR            ADDRESS OF PARAM LIST
         ST    REGC,WKPARM1
         ST    ERRCD,WKRTN2            ADDRESS OF RETURN ARRAY
         MVC   WKGDSADR(4),GDS(PARM)    ADDRESS OF GDSCB VARIABLE
         MVC   WKUVAL(8),X(PARM)        ADDRESS OF X AND Y PARAMS
         OI    WKVVAL,LAST              SET LAST PARAMETER SWITCH
*/
*/CALL MVPOS TO POSITION BEAM
*/
         LA    PARM,WKPARM1             ADDRESS OF PARAM LIST
         L     REGB,STAT(ERRCD)         ADDRESS OF STATUS TABLE
         L     BRANCH,MVPOS(REGB)       START ADDRESS OF ROUTINE
         LTR   BRANCH,BRANCH            IF ZERO, ROUTINE NOT IN,
         BZ    AFAPOS30                 GO TO LINK OR LOAD
*
*BRANCH AND LINK TO MOVE POSITION
*
AFAPOS16 BALR  RETREG,BRANCH
         SPACE 2
*TEST RETURN ARRAY AFTER CALL TO MVPOS
*
AFAPOS17 MVC   GDSFLAGS(1),WKSWITCH+3   REPLACE GDSFLAGS
         CLI   0(ERRCD),OFF
         BE    AFASCS30                 BRANCH IF CALL TO MVPOS O.K.
         CLI   0(ERRCD),SCISSON
         BNE   AFAERR90
         TM    GDSSCISS,STOP
         BO    AFAERR90                BRANCH IF STOP GENERATION
*                                        OPTION SET.
     EJECT
*WHEN THIS SECTION IS ENTERED, THE BEAM HAS BEEN POSITIONED TO THE
*START OF THE CHARACTER STRING. IF THE SCISSOR OPTION IS IN EFFECT
*A VECTOR THE LENGTH OF THE CHARACTER STRING MUST BE SCISSORED.
*
AFASCS30 TM    WKBITS+3,MEMSUB
         BO    AFASET20                 BRANCH IF SUBROUTINE-NO SCISS,
*                                        NO BEAM REPOSITIONING
         TM    GDSSCISS,NOSCISS
         BO    AFASET10                 BRANCH IF NO SCISSORING.
*
*SCISSORING OPTION IN EFFECT
*IF THE CURRENT BEAM POSITION IS OFF TO THE LEFT OF THE SCREEN, THE
*BEGINNING OF THE TEXT STRING MUST BE SCISSORED.
*
         LH    REGA,GDSXCURR
         S     REGA,GDSXLAST            AMOUNT TO BE SCISSORED FROM
*                                       FRONT OF CHARACTER STRING
         C     REGA,THREE
         BH    AFASCS32                 IF SCISS LESS THAN 3  NO SCISS
         SR    REGA,REGA                IF OFF TO RIGHT, EVERYTHING OFF
*
*THE AMOUNT TO BE SCISSORED FROM LEFT (IN RASTER UNITS) IS SAVED.
*THE CHARACTER COUNT IS MULTIPLIED BY RASTER UNITS/CHARACTER (56 FOR
*BASIC, 84 FOR LARGE) TO DETERMINE THE INCREMENT IN THE X DIRECTION,
*WHICH IS PASSED TO SCISSOR. THE Y COORDINATE REMAINS UNCHANGED
*
AFASCS32 ST    REGA,WKSCI1
         LR    EVEN,COUNT
         TM    GDSCHARS,LARGE
         BM    AFASCS90                 BRANCH IF CHARACTERS LARGE
         MH    EVEN,SMALL+2             56 RASTER UNITS/CHARACTER
*                                        IF CHARACTERS BASIC
*REGISTER 0 CONTAINS LENGTH IN RASTER UNITS OF CHARACTER STRING
*
*SET UP PARAMETERS FOR SCISSOR
AFASCS35 ST    EVEN,WKXINCR
         A     EVEN,GDSXLAST            X ABSOLUTE
         ST    EVEN,WKXABS
         MVC   WKYABS(4),GDSYLAST       X POSITION UNCHANGED
*CALL TO SCISSOR ROUTINE
*
         LA    PARM,WKGDS
         L     BRANCH,STAT(ERRCD)       ADDRESS OF STATUS TABLE
         L     BRANCH,SCISS(BRANCH)     ADDRESS OF SCISSOR
         BALR  RETREG,BRANCH            BRANCH TO SCISSOR
         LTR   BRANCH,BRANCH
         BNE   AFARES05                 BRANCH IF NO DATA GENERATION
*
*ON RETURN FROM THE SCISSOR ROUTINE,THE AMOUNT (IN RASTER UNITS) TO BE
*SCISSORED FROM THE END OF THE TEXT STRING (IF ANY) IS COMPUTED AND
*SAVED.
*
         L     REGA,GDSXLAST
         SH    REGA,GDSXCURR
         BNL   AFASCS37                 BRANCH IF ON SCREEN, OR TO RGHT
         SR    REGA,REGA
AFASCS37 C     REGA,THREE               IF SCISSORED THREE OR LESS
         BH    AFASCS38                  RUS, IT IS IGNORED
         B     AFASC394            GO TO ZERO SCISSOR LENGTH       5962
AFASCS38 TM    GDSCHARS,LARGE      LARGE CHARS                     5962
         BM    AFASCS39            YES                             5962
         S     REGA,HALFSM         SUBTRACT 1/2 CHAR FOR
         B     AFASC392            CHAR GEN OVERLAP OF SCREEN EDGE 5962
AFASCS39 S     REGA,HALFBIG        SUB. 1/2 CHAR FOR CHRGEN
AFASC392 C     REGA,THREE          IF LESS THAN 3 NO SCISS DONE    5962
         BH    AFASC396            NOT LESS                        5962
AFASC394 SR    REGA,REGA           ZERO SCISS REG                  5962
AFASC396 ST    REGA,WKSCI2         SAVE AMNT TO BE SCISSORED       5962
     EJECT
*TEST FOR POSITIONING VECTOR NECESSARY
*IF  POSITIONING VECTOR IS NECESSARY, THE DATA GENERATION ROUTINE IS
*CALLED TO GENERATE THE BLANKED VECTOR.
*
         CLC   WKDATA1(8),ZERO
         BE    AFASCS40                BRANCH IF POSITIONING VECTOR
*                                        UNNECESSARY
         MVC   WKXABS(16),WKDATA1       SET UP PARMS FOR DATA GEN
         MVC   WKBITSA(4),WKBITS        SAVE KEY STRUCTURE
         MVC   WKBITS,BITSA             MOVE IN PARM FOR DATA GEN
         XC    WKDATA1(16),WKDATA1      ZERO POSITIONING VECTOR AREA
*
*CALL TO DATA GENERATION ROUTINE
*
         LA    PARM,WKADDR              ADDRESS OF PARAMETER LIST
         L     BRANCH,STAT(ERRCD)       ADDRESS OF STATUS TABLE
         L     BRANCH,DGEN(BRANCH)      ADDRESS OF DATA GEN
         BALR  RETREG,BRANCH            BRANCH TO DATA GEN
         LTR   BRANCH,BRANCH
         BNE   AFARES10
         MVC   WKBITS(4),WKBITSA        RESET KEY SWITCHES
         EJECT
*THIS SECTION COMPUTES THE SCISSORING NECESSARY FOR CHARACTERS
*REGISTER 1 IS USED AS A WORK REGISTER
*THE TOTAL AMOUNT TO BE SCISSORED (INRASTER UNITS) IS DIVIDED BY
*RASTER UNITS/CHARACTER. IF THERE IS A REMAINDER, 1 IS ADDED TO THE
*NUMBER OF CHARACTERS TO BE SCISSORED. IF THE SCISSORING OCCURS ONLY
*ON THE END OF THE TEXT STRING, THE COUNT IS DECREMENTED BY THE NUMBER
*OF CHARACTERS TO BE SCISSORED. IF SCISSORING OCCURS ONLY AT THE
*START OF THE TEXT STRING, THE POINTER TO THE TEXT ARRAY IS INCREMENTED
*BY THE NUMBER OF CHARACTERS TO BE SCISSORED, AND THE COUNT IS
*DECREMENTED BY THE NUMBER OF CHARACTERS TO BE SCISSORED. IF THERE
*IS SCISSORING AT BOTH START AND END, THE NUMBER OF CHARACTERS
*SCISSORED FROM EACH IS COMPUTED, AND ACTION PROCEEDS AS ABOVE.
*
*INITIALIZE WITH ADDRESS OF TEXT ARRAY
AFASCS40 L     PARM,WKPARM
         L     REGD,TXT(PARM)           PICK UP TEXT ADDRESS
*
         L     PARM,WKSCI1
         A     PARM,WKSCI2              TOTAL AMOUNT TO BE SICSSORED
         BZ    AFAGEN10                 BRANCH IF NOTHING SCISSORED
         SR    EVEN,EVEN                SET UP FOR DIVISION
         TM    GDSCHARS,LARGE
         BM    AFASCS85                 BRANCH IF CHARACTERS LARGE
         D     EVEN,SMALL               NO. CHARS TO BE SCISSORED=
*                                       NO. RASTER UNITS/56
AFASCS45 LTR   EVEN,EVEN
         BZ    AFASCS50                 BRANCH IF NO REMAINDER
         A     PARM,ONE                 OTHERWISE ADD 1 TO QUOTIENT
AFASCS50 LR    REGA,PARM                SAVE NO OF CHARS TO BE SCISS
         CR    REGA,COUNT
         BNL   AFARES05                 BRANCH IF NO DATA WILL BE
*                                        GENERATED
         CLC   WKSCI1(4),ZERO
         BE    AFASCS65                 BRANCH IF NO SCISS AT START
         CLC   WKSCI2(4),ZERO
         BE    AFASCS60                 BRANCH IF NO SCISS AT END
         MVC   SCERR(4,ERRCD),ONE       SET SCISS COUNT TO 1,IF SCISS
*                                       AT START
         L     PARM,WKSCI1              PICK UP RU'S TO BE SICSS FROM
         SR    EVEN,EVEN                 BEGINNING
         TM    GDSCHARS,LARGE
         BM    AFASCS80
         D     EVEN,SMALL               NO. CHARS SCISSORED FROM LEFT
AFASCS55 LTR   PARM,PARM
         BZ    AFASCS65                 BRANCH IF NO FULL CHAR OFF LEFT
AFASCS60 AR    REGD,PARM                UPDATE POINTER TO TEXT ARRAY
*                                        BY NUMBER OF CHARACTERS TO
*                                        BE SCISSORED.
AFASCS65 SR    COUNT,REGA               NUMBER OF CHARACTERS TO BE
*                                        GENERATED
*IF SCISSORING OCCURS, NEW CHARACTER COUNT MUST GO IN KEY
*
         STC   COUNT,WKBITS+2
         SRA   COUNT,8
         STC   COUNT,WKBITS+1
*
*RESTORE COUNT IN REGISTER
         SLA   COUNT,8
         IC    COUNT,WKBITS+2
         CLC   WKSCI1(4),ZERO
         BNE   AFAGEN10                 BRANCH IF SCISS AT START
         LA    COUNT,1(COUNT)
         ST    COUNT,SCERR(ERRCD)       SET CHARACTER SCISSORED NUMBER
*                                        IN RETURN ARRAY
         BCTR  COUNT,0                  RESET COUNT REGISTER
         B     AFAGEN10
*
*
AFASCS80 D     EVEN,BIG                 NO OF CHARACTERS TO BE
         B     AFASCS55                  SCISSORED FROM FRONT
*
*
AFASCS85 D     EVEN,BIG                 NO. CHARS TO BE SICSSORED=
         B     AFASCS45                  NO. RASTER UNITS/84
*
*
AFASCS90 MH    EVEN,BIG+2               LENGTH OF CHARACTER STRING=
*                                  COUNT * 84 RASTER UNITS         5962
         B     AFASCS35            GEN OVERLAP                     5962
*
*
*LINK OR LOAD MOVE POSITION
*
AFAPOS30 TM    MVPOS+LNK(REGB),LINKSW   TEST LINK/LOAD FLAG        000C
         BO    AFAPOS40                 BRANCH IF YES
         LOAD  EP=IFFAFA17
         ST    EVEN,MVPOS(REGB)        STORE ENT PT IN STATAB      5962
         LR    BRANCH,EVEN              PUT ENTRY POINT ADD IN 15
         S     EVEN,TWO                 FIND ENTRY POINT OF FA04   000C
         ST    EVEN,DSP04(REGB)         SAVE ADDR IN STATUS TABLE  000C
         LA    PARM,WKPARM1             RELOAD PARAM REGISTER
         B     AFAPOS16
*
AFAPOS40 LINK  EP=IFFAFA17
         B     AFAPOS17
         EJECT
*THIS SECTION WILL BE ENTERED IF NO SCISSORING OPTION IS SET
*
*RESET BEAM POSITION IN GDSCB
AFASET10 LR    EVEN,COUNT
         TM    GDSCHARS,LARGE
         BM    AFASET50                 BRANCH IF CHARACTERS LARGE
         MH    EVEN,SMALL+2              OTHERWISE 56RU'S/CHARACTER
AFASET15 A     EVEN,GDSXLAST
         ST    EVEN,GDSXLAST
         SRA   EVEN,2                   ROUND X CURRENT FIELD TO
         SLA   EVEN,2                   MULTIPLE OF 4
         STH   EVEN,GDSXCURR            REPOSITION X IN GDSCB
         NI    GDSSCISS,LASTON
*
*
AFASET20 L     PARM,WKPARM
         L     REGD,TXT(PARM)           ADDRESS OF TEXT ARRAY
         B     AFAGEN10
*
*
*
AFASET50 MH    EVEN,BIG+2               IF LARGE CHARS, 84RU'S/CHAR
         B     AFASET15
*
         EJECT
*
*CHARACTER GENERATION
*REGD CONTAINS BEGIN ADDRESS OF TEXT ARRAY
*COUNT CONTAINS NUMBER OF CHARACTERS TO BE GENERATED
*
*SET UP PARAMETERS FOR DATA STORE
*
AFAGEN10 ST    GDSREG,WKGDS1            ADDRESS OF GDSCB
         ST    ERRCD,WKRTN1             ADDRESS OF RETURN ARRAY
         LA    REGC,WKOUTPT+4           ADDRESS OF DATA AREA
         LA    REGB,36                  NUMBER OF BYTES IN OUTPUT AREA
         SR    REGA,REGA               SET WORK COUNT TO 0
*REGC CONTAINS ADDRESS OF OUTPUT AREA
*REGB CONTAINS COUNT OF BYTES REMAINING IN OUTPUT AREA
*REGA CONTAINS A WORK COUNT FIELD
*
         TM    WKBITS+3,MEMSUB
         BZ    AFAGEN15                 BRANCH IF NOT PART OF SUBR
         TM    WKSWITCH+1,POS
         BO    AFAGEN15                 BRANCH IF POSITIONING VECTOR
         MVC   0(2,REGC),GEVI2ORD       OTHERWISE,ENSURE NO WRAP AROUND
         LA    REGC,2(REGC)             UPDATE POINTER AND
         S     REGB,TWO                 DECREMENT COUNT
         A     REGA,TWO                 SET LENGTH TO 2
*SET CHARACTER MODE
*
AFAGEN15 TM    GDSCHARS,LP
         BO    AFAGEN85                 BRANCH IF CHARS LARGE, PROTECT
         TM    GDSCHARS,LU
         BO    AFAGEN90                 BRANCH IF CHARS LARGE, UNPROTEC
         TM    GDSCHARS,BP
         BO    AFAGEN95                 BRANCH IF CHARS BASIC, PROTECT
         MVC   0(2,REGC),CHRBU          SETS MODE-CHARS BASIC, UNPROTEC
         MVI   GDSGRMOD,GRBU            SET CURRENT MODE SW IN GDSCB
*
AFAGEN20 LA    REGC,2(REGC)             UPDATE POINTER AND
         S     REGB,TWO                  DECREMENT COUNT
         A     REGA,TWO
         CR    COUNT,REGB
         BH    AFAGEN70                 BRANCH IF MORE CHARS THAN ROOM
*                                        IN OUTPUT AREA
         AR    REGA,COUNT               COMPUTE LENGTH FOR FIRST TIME
AFAGEN25 ST    REGA,WKOUTPT            LENGTH STORED IN OUTPUT AREA
         LR    REGA,COUNT
         SR    COUNT,REGA               SET COUNT FOR NEXT TIME
AFAGEN27 BCTR  REGA,0                   DECREMENT COUNT BY 1
         EX    REGA,MOVE                MOVE IN CHARACTERS
         LTR   COUNT,COUNT
         BNE   AFAGEN30                 BRANCH IF MORE CALLS NECESSARY
*
         TM    WKOUTPT+3,ODD
         BZ    AFAGEN30                 BRANCH IF LENGTH EVEN
         LA    REGA,1(REGA)             SET UP INDEX
         AR    REGC,REGA                POINTER TO OUTPUT AREA
         MVI   0(REGC),ALIGN            MOVE IN NULL CHARACTER TO ALIGN
         SR    REGA,REGA
         IC    REGA,WKBITS+1           PICK UP CHARACTER COUNT FROM KEY
         SLA   REGA,8
         IC    REGA,WKBITS+2
         LA    REGA,1(REGA)            ADD 1 TO CHAR COUNT FOR NULL CHR
         STC   REGA,WKBITS+2
         SRA   REGA,8
         STC   REGA,WKBITS+1
         LA    REGA,1
         AH    REGA,WKOUTPT+2
         STH   REGA,WKOUTPT+2           RESET LENGTH INDICATOR IN PARM
         EJECT
*CALL DATA STORE
*
AFAGEN30 LA    PARM,WKGDS1
         L     BRANCH,STAT(ERRCD)       ADDRESS OF STATUS TABLE
         L     BRANCH,DSTORE(BRANCH)    ADDRESS OF DATA STORE
         BALR  RETREG,BRANCH            BRANCH TO DATA STORE
         B     RC(BRANCH)               BRANCH ON RETURN CODE    YM1963
RC       B     CHRCNT                   DATA STORE SUCCESSFULLY  YM1963
         B     AFARES10                 DATA STORE FAILED        YM1963
         MVC   GDSXCURR(4),WKXCURR      IF UPDATE OVERFLOW....   YM1963
         MVC   GDSXLAST(8),WKXLAST      RESTORE BEAM POINTERS    YM1963
         B     AFARET20                 RETURN TO CALLER         YM1963
CHRCNT   C     COUNT,ZERO               ANY MORE CHARACTERS??    YM1963
         BE    AFATST10                 BRANCH IF NO MORE CHARACTERS
*                                       TO BE GENERATED.
*REINITIALIZE FOR NEXT PASS
*
*
*ADJUST POINTER TO TEXT ADDRESS
         LA    REGD,1(REGA,REGD)        NEW ADDR= OLD + COUNT OF CHARS
*
*RESET OUTPUT AREA POINTER + COUNT
         LA    REGC,WKOUTPT+4
         LA    REGB,36                  LENGTH OF OUTPUT AREA
         LR    REGA,COUNT
         CR    COUNT,REGB
         BNH   AFAGEN25                 BRANCH IF ALL CHARS WILL GO OUT
         LR    REGA,REGB
         ST    REGA,WKOUTPT             SET LENGTH
         SR    COUNT,REGA               RESET CHARACTER COUNT
         B     AFAGEN27
*
*
*
*
AFAGEN70 SR    COUNT,REGB               SET CHARACTER COUNT
         AR    REGA,REGB
         ST    REGA,WKOUTPT             SET LENGTH PARAMETER
         LR    REGA,REGB                # OF CHARS OUTPUT
         B     AFAGEN27
*
AFAGEN85 MVC   0(2,REGC),CHRLP          CHARS LARGE, PROTECTED
         MVI   GDSGRMOD,GRLP            SET CURRENT MODE SW IN GDSCB
         B     AFAGEN20
*
AFAGEN90 MVC   0(2,REGC),CHRLU          CHARS LARGE, UNPROTECTED
         MVI   GDSGRMOD,GRLU            SET CURRENT MODE SW IN GDSCB
         B     AFAGEN20
*
AFAGEN95 MVC   0(2,REGC),CHRBP          CHARS BASIC, PROTECTED
         MVI   GDSGRMOD,GRBP            SET CURRENT MODE SW IN GDSCB
         B     AFAGEN20
         EJECT
*
*THIS SECTION IS ENTERED AFTER THE CHARACTERS HAVE BEEN GENERATED
*
AFATST10 TM    WKSWITCH+2,KEYED+CORRE
         BZ    AFATST12                BRANCH IF NO KEY OR CORRVAL
         XC    WKOUTPT(4),WKOUTPT       ZERO
         MVI   WKOUTPT,RESOL
         LA    PARM,WKGDS1
         L     BRANCH,STAT(ERRCD)       ADDRESS OF STATUS TABLE
         L     BRANCH,DSTORE(BRANCH)   ADDRESS OF DATA STORE
         BALR  RETREG,BRANCH            BRANCH TO DATA STORE
         LTR   BRANCH,BRANCH
         BNE   AFARES10
AFATST12 CLI   WKSWITCH,UPDATE
         BE    AFATST30                 BRANCH IF UPDATE
*
*PREPARE KEY
*
         L     COUNT,GDSAOACB
         L     COUNT,CURRLOG(COUNT)     GET CURRENT LOGICAL ADDRESS
         SH    COUNT,WKADDR+2           COMPUTE ELEMENT LENGTH
         LTR   COUNT,COUNT
         BZ    AFAERR70                 ERROR IF NO DATA GENERATED
         STH   COUNT,WKADDR             PLACE LENGTH IN KEY
         L     COUNT,WKKEY
         LTR   COUNT,COUNT
         BE    AFATST15                 BRANCH IF NO USER VARIABLE
         MVC   0(4,COUNT),WKADDR        PLACE KEY IN USER VARIABLE
AFATST15 TM    WKSWITCH+2,KEYED+CORRE
         BZ    AFARET10                 BRANCH IF NO KEY OR CORRVAL
*
*CALL KEY TABLE MANAGEMENT TO ADD KEY
*
         LA    REGA,ONE                 CODE FOR ADDING KEY TO TABLE
         ST    REGA,WKCODE
         LA    REGA,WKADDR              ADDRESS OF KEY
         ST    REGA,WKKADDR
         ST    GDSREG,WKGDS1            ADDRESS OF GDSCB
         LA    PARM,WKGDS1
         L     REGA,STABADR(ERRCD)      GET STATUS TABLE ADDR      000C
         L     BRANCH,ETE(REGA)         GET ADDR OF HA03           000C
         BALR  RETREG,BRANCH                                       000C
         LTR   BRANCH,BRANCH
         BNE   AFAERR80                 BRANCH IF NOT ENOUGH STORAGE
*
         B     AFARET10
         EJECT
*CALL UPDATE TO WRITE OUT UPDATE
*
AFATST30 LA    PARM,WKADDR
         L     BRANCH,STABADR(ERRCD) POINT TO STATUS TABLE  D11 ZA15418
         L     BRANCH,UPDH14(BRANCH) AND TO IFFAHA14        D11 ZA15418
         BALR  RETREG,BRANCH       GOTO UPDATE              D11 ZA15418
         LTR   BRANCH,BRANCH       UPDATED OK                    A29414
         BZ    AFARET10              IF YES, CONTINUE            A29414
         OI    WORD1(ERRCD),IOERR    IF NO,  INDICATE I/O ERROR  A29414
         B     AFARET20                                          A29414
       SPACE     4
AFARET10 CLI   WKSWITCH,UPDATE
         BNE   AFARET20                 BRANCH IF NOT UPDATE
         TM    WKSWITCH+2,CORRE
         BZ    AFARET20                 BRANCH IF NOT CORRELATED
         L     PARM,WKSTORAD            PICK UP KEY ADDRESS
         MVC   8(4,PARM),WKCORVL        PUT NEW CORRVAL IN KEY TABLE
AFARET20 L     SAVE,4(SAVE)
         RETURN (14,12),T
         EJECT
AFAERR00 OI    0(ERRCD),PRM             PARAMETER ERROR
         B     AFARET20
*
AFAERR10 MVC   PARMERR(4,ERRCD),ONE     INVALID GDSCB
         B     AFAERR00
*
AFAERR20 MVC   PARMERR(4,ERRCD),TWO     INVALID TEXT-NULL
         B     AFAERR00
*
AFAERR30 MVC   PARMERR(4,ERRCD),THREE   COUNT ERROR-
         B     AFAERR70
*
AFAERR40 MVC   PARMERR(4,ERRCD),FOUR    CORRVAL ERROR
         B     AFAERR00
*
AFAERR60 MVC   PARMERR(4,ERRCD),SIX     GENCODE ERROR
         B     AFAERR00
*
AFAERR70 OI    0(ERRCD),SCISSOR         NO DATA GENERATION
         B     AFARET20
AFAERR80 OI    0(ERRCD),STRG            MAIN STORAGE EXCEEDED
         MVC   STOR(4,ERRCD),FOUR
         B     AFARES11                                            0544
*
AFAERR81 OI    0(ERRCD),STRG            MAIN STORAGE EXCEEDED      0544
*                                       FOR UPDATE                 0544
         MVC   STOR(4,ERRCD),FOUR       SET ERROR CODE             0544
         B     AFARES12                                            0544
*                                                                  0544
AFAERR90 TM    WKSWITCH+2,KEYED+CORRE
         BZ    AFARET20                RETURN IF NOT KEYED+CORRE
         B     AFARES10                OTHERWISE GO TO RESET
         EJECT
*
*CALL RESET IF ERROR RETURN FROM DATA STORE
*
AFARES05 MVC   SCERR(4,ERRCD),ONE       SET SCISS COUNT TO ONE IF
*                                        NO CHARS GENERATED
AFARES10 MVC   GDSXCURR(4),WKXCURR      RESTORE BEAM POINTERS
         MVC   GDSXLAST(8),WKXLAST
AFARES11 EQU   *                                                   0544
         CLI   WKSWITCH,UPDATE
         BE    AFATST30            WRITE UPDATE WITH NO DATA       5962
         MVC   WKDATA2(20),0(ERRCD)     SAVE RETURN ARRAY
AFARES12 EQU   *                                                   0544
         LA    REGA,GDSGDSCB            VAR HOLDING ADDRESS OF GDSCB
         ST    REGA,WKGDS
         LA    REGA,WKGDS               ADDRESS OF PARAMETER LIST
         ST    REGA,WKGDS1               STORED IN WORK AREA
         L     REGA,NULL(ERRCD)         NULL FOR CORRVAL IN PARM LIST
         ST    REGA,WKRTN
         LA    REGA,WKADDR              ADDRESS OF KEY IN PARM LIST
         ST    REGA,WKDATA1
         OI    WKDATA1,LAST             LAST PARM INDICATION
         ST    ERRCD,WKCODE             ERROR CODE IN PARM LIST
         LA    PARM,WKGDS1              ADDRESS OF WORK AREA
         L     BRANCH,STABADR(ERRCD) POINT TO STATUS TABLE  D11 ZA15437
         L     BRANCH,RESET(BRANCH) AND TO IFFAFA12 (RESET) D11 ZA15437
         LTR   BRANCH,BRANCH       RESET SPEC'D BY CALLER?  D11 ZA15437
         BZ    AFALINK1            NO,MUST USE SYSTEM LINK  D11 ZA15437
         BALR  RETREG,BRANCH       GOTO RESET               D11 ZA15437
         B     AFARTN1             RETURN FROM RESET        D11 ZA15437
AFALINK1 LINK  EP=IFFAFA12         LINK TO RESET            D11 ZA15437
AFARTN1  MVC   0(20,ERRCD),WKDATA2 RESTORE RETURN ARRAY     D11 ZA15437
         B     AFARET20
         EJECT
MOVE     MVC   0(0,REGC),0(REGD)
         SPACE 2
ZERO     DC    D'0'
ONE      DC    F'1'
TWO      DC    F'2'
THREE    DC    F'3'
FOUR     DC    F'4'
FIVE     DC    F'5'
SIX      DC    F'6'
SEVEN    DC    F'7'
EIGHT    DC    F'8'
BIG      DC    F'84'
SMALL    DC    F'56'
HALFBIG  DC    F'42'
HALFSM   DC    F'28'
         SPACE 2
BITS     DC    B'10001100'              MULTIPLE,CHARACTER, INCLUDE
         DC    X'00'
         DC    X'00'
         DC    X'00'
*
*BITSA- PASSED TO DATA GENERATION IF POSITIONING VECTOR NECESSARY
*
BITSA    DC    B'10000100'              MULTIPLE, VECTOR, INCLUDE,
         DC    X'00'                    ABSOLUTE
         DC    B'00000000'              FIRST PASS, NO KEY, NO CORRVAL,
         DC    X'00'                    BEAM OFF, NOT UPDATE
*ORDERS
*
         GINIT
GTRUORD  GTRU  0
GNOPORD  GNOP4 0
GEVI2ORD GEVI2
CHRBP    GECP  B
CHRLP    GECP  L
CHRBU    GECF  B
CHRLU    GECF  L
         DS    0F                                           D11
PATCH    DC    40X'FF'             PATCH AREA               D11
         EJECT
WORKAREA DSECT
WKPARM   DS    F
WKRTNCD  DS    F
WKSAVE   DS    18F
WKXCURR  DS    H
WKYCURR  DS    H
WKXLAST  DS    F
WKYLAST  DS    F
WKBITSA  DS    F
WKSWITCH DS    F                        FORMAT
*                                       BYTE 0 -
*                                         UPDATE = X'FF'
*                                       BYTE 1
*                                         X COOR PASSED=X'10'
*                                         Y COOR PASSED=X'01'
*                                       BYTE2
*                                         KEYED= X'20'
*                                         CORRE= X'10'
WKSCI1   DS    F
WKSCI2   DS    F
WKSPVSR  DS    3F
WKTEMP   DS    F
WKSTORAD DS    F
*PARAMETERS PASSED TO DATA GENERATION ROUTINE
WKADDR   DS    F                        *
WKBITS   DS    F                        *KEY
WKCORVL  DS    F                        *
WKKEY    DS    F                        ADDRESS OF USER'S KEY VARIABLE
*PARAMETERS PASSED TO SCISSOR BEGIN HERE
WKGDS    DS    F                        ADDRESS OF GDSCB
WKRTN    DS    F                        ADDRESS OF RETURN ARRAY
WKDATA1  DS    F                        *
WKDATA2  DS    F                        *USED BY SCISSOR IF POSITIONING
WKDATA3  DS    F                        * VECTOR IS NECESSARY
WKDATA4  DS    F                        *
WKXABS   DS    F
WKYABS   DS    F
WKXINCR  DS    F
WKYINCR  DS    F
WKTOTX   DS    F
WKTOTY   DS    F
WKENTCT  DS    F
         EJECT
*PARAMETERS PASSED TO KEY MANAGEMENT, DATA STORE, UPDATE, AND MVPOS
*FOR DATA STORE
WKGDS1   DS    F                        ADDR OF GDSCB
WKRTN1   DS    F                        ADDRESS OF RETURN ARRAY
WKOUTPT  DS    10F
*FOR KEY MANAGEMENT
*WKGDS1  EQU   WKGDS1                   ADDR OF GDSCB
WKCODE   EQU   WKRTN1                   CODE
WKKADDR  EQU   WKOUTPT                  KEY ADDRESS
*
*
*FOR MOVPOS
WKGDSADR EQU   WKGDS1
WKUVAL   EQU   WKRTN1
WKVVAL   EQU   WKOUTPT
WKPARM1  EQU   WKOUTPT+4
WKRTN2   EQU   WKOUTPT+8
         COPY  GDSCB
         COPY  GTMCB
         END
