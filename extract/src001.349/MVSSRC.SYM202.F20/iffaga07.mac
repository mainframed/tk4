         TITLE 'IFFAGA07-ORDER GENERATION MODULE'           D11
*        ORGEN IS ENTERED FROM DIRECTOR PART 2 WITH THE
*        ADDRESS OF A WORK AREA IN REGISTER 1. THE FIRST
*        WORD OF THE WORK AREA CONTAINS THE FOLLOWING PARAMETER LIST:
*
*        +0    A(GDSCBVAR)    GDSCB VAR
*        +4    A(ARRAY)       ARRAY OF ORDERS
*        +8    A(COUNT)       LENGTH OF ARRAY
*        OPTIONAL:
*        +12   A(KEYLIST)     KEYS FOR MISSING ADDRESSES
*        +16   A(CORVAL)      CORRELATION VALUE
*        +20   A(KEY)         KEY
*        +24   A(GENCODE)     GENCODE
*
*
*        EXTERNAL ROUTINES CALLED:
*
*        DATA STORE-IFFAHA05
*        UPDATE-IFFAHA13
*        KEY TABLE MANAGEMENT-IFFAHA03
*
*        EXTERNAL MACROS USED:
*
*        LINK
*        FREEMAIN
*
*
*        ON ENTRY REGISTERS ARE SAVED, WORKAREA DSECT IS INITIALIZED,
*        SAVE AREAS CHAINED, RETURN ARRAY SET TO ZERO, GDSCB INITIAL-
*        IZED.
*
*        NOTE: THE KEYLIST KEYS ARE NOT CHECKED FOR VALIDITY IN
*        THE KEY TABLE.  THIS WILL ALLOW THE PROGRAMMER THAT KNOWS
*        WHAT HE IS DOING TO REFERENCE AN ELEMENT WITH A GSXY FOR
*        EXAMPLE NOT EXACTLY AT THE TOP BY CHANGING THE LOGICAL
*        ADDRESS.
*
         EJECT
IFFAGA07 CSECT
*C820700                                                         A34801
* 511000                                                         A27472
* 797000                                                         A29394
*A294500,A480200-480800,A486500,A863500,A800200-800600       LD YA00806
*A184500,A189500,C364000,A633200-633300,A800800              LD YA00808
*A306200-306600,A800900                                      LD YA00815
* C510200                                                     LD YM5164
*A264500                                                        XA02055
*A184100-184200,C184500                                     D11 ZA05402
*A577200-577600,C578000                                     D11 ZA06414
*C510150                                                    D11 ZA13186
*C184700-188000,C488000,A488010-488020,A803300-803500       D11 ZA15418
*
ORGEN    SAVE  (14,12)
         BALR  BASE,0              ESTABLISH BASE
         USING *,BASE
         LR    WORK,PARM
         USING WORKAREA,WORK       SET UP WORKAREA DSECT
         LA    REGA,WRKSAVE
         ST    REGA,8(SAVE)        CHAIN SAVE AREAS
         ST    SAVE,4(REGA)
         LR    SAVE,REGA
         L     PARM,WRKPARM        PICK UP PARAMETER LIST
         L     ERRCD,WRKRTNCD      PICK UP RETURN ARRAY ADDR
         XC    0(20,ERRCD),0(ERRCD) ZERO RETURN ARRAY
         L     RSTABADR,STAT(ERRCD)    SAVE STATUS TABLE ADDR      000B
         L     GDSREG,GDS(PARM)    GDS VAR
         L     GDSREG,0(GDSREG)    GDSCB ADDR
         USING GDSCB,GDSREG        GDSCB DSECT
         C     GDSREG,GDSGDSCB     GDS VALID
         BNE   ERR1
         L     GTMREG,GDSGTMCB     ADDR OF GTMCB
         USING GTMCB,GTMREG
         TM    GDS(PARM),LAST      LAST ONE
         BO    ERRPRM              YES
         TM    ARRAY(PARM),LAST    LAST ONE
         BO    ERRPRM              YES
*        THE   FIRST THREE PARAMETERS ARE CHECKED FOR PRESENCE
*        AND   VALIDITY
         L     OACB,GDSAOACB
         USING OACBAREA,OACB
         TM    STATUS,NOBUF        MUST BUFFER BE OBTAINED & FLOW CTL
*                                  INITIALIZED?
         BZ    ORG00050            NO
         ST    GDSREG,WRKGDS1
         ST    ERRCD,WRKCODE       CALL DATA STORE
         XC    WRKKADDR,WRKKADDR   WITH NO FLAGS AND A
         LA    PARM,WRKGDS1        LENGTH OF ZERO TO GET
         L     R15,DSTOR(RSTABADR)                                 000B
         BALR  RET,R15
         LTR   R15,R15
         BNE   ORG04600
         L     PARM,WRKPARM        RESET REG
         EJECT
*
*        THE FOLLOWING AREAS ARE SET TO ZERO:
*        SWITCHES
*        KEYLIST PARAMETER LOCATION
*        THREE WORD KEY
*        SUBROUTINE PARAMETER LIST
*        THE INITIAL KEY BIT SETTINGS ARE MOVED INTO THE KEY.
*        SEQUENCE AND SUBROUTINE MEMBER SWITCHES ARE SET IN THE KEY.
*
ORG00050 XC    WRKSW,WRKSW         ZERO SWITCHES
         XC    WRKKYLST,WRKKYLST   ZERO KEYLIST PARM
         XC    WRKADDR(16),WRKADDR ZERO 3 WD KEY & KEY ADDR
         XC    WRKARA(12),WRKARA   ZERO SUB PARM LIST
         MVC   WRKBITS,BITS        MOVE IN INITIAL SETTINGS
         TM    GDSFLAGS,SEQ        PART OF A SEQ
         BZ    ORG00060            NO
         OI    WRKBITS+3,MEMSEQ    SET SW IN KEY
ORG00060 TM    GDSFLAGS,SUB        MEM OF SUBR
         BZ    ORG00070            NO
         OI    WRKBITS+3,MEMSUB    SET SW IN KEY
ORG00070 L     REGC,COUNT(PARM)
         L     REGC,0(REGC)
         ST    REGC,WRKCNT
*
*        THE OPTIONAL PARAMETERS, KEYLIST, CORVAL, KEY, AND GENCODE
*        ARE CHECKED.
         TM    COUNT(PARM),LAST    ANY OPTIONAL PARMS
         BO    ORG00700            NO
         CLC   NULL+1(3,ERRCD),KEYLST+1(PARM) IS KEYLIST NULL
         BE    ORG00100            YES
         MVC   WRKKYLST,KEYLST(PARM) PLACE KEY LIST IN PARM LIST
ORG00100 TM    KEYLST(PARM),LAST   IS THIS LAST
         BO    ORG00700
         CLC   NULL+1(3,ERRCD),CORVAL+1(PARM) IS CORVAL      NULL
         BE    ORG00200            YES
         TM    GDSFLAGS,LEVEL2
         BO    ORG00200
         L     REGA,CORVAL(PARM)   PICK UP CORVAL
         MVC   WRKCORVL,0(REGA)    SAVE CORVAL
         OI    WRKBITS+2,CORRE     SET CORRELATED SW
ORG00200 TM    CORVAL(PARM),LAST   ANY MORE
         BO    ORG00700
         CLC   NULL+1(3,ERRCD),KEY+1(PARM) IS KEY NULL
         BE    ORG00300
         MVC   WRKKEY,KEY(PARM)    SAVE KEY PARM
         TM    GDSFLAGS,LEVEL2
         BO    ORG00300
         OI    WRKBITS+2,KEYED     SET KEY SW
ORG00300 TM    KEY(PARM),LAST      IS KEY LAST
         BO    ORG00700            YES
         CLC   NULL+1(3,ERRCD),GENCDE+1(PARM) IS GENCODE NULL
         BE    ORG00700            YES
         L     REGA,GENCDE(PARM)   LOAD GENCODE VAR
         L     REGA,0(REGA)        LOAD GENCODE VALUE
         C     REGA,ONE            INCL
         BE    ORG00700            YES
         CLC   WRKCORVL(8),ZERO       KEYED OR CORRELATED
         BE    ERR3                NO-BAD GENCODE
         C     REGA,TWO            OMIT
         BNE   ORG00400            NO
         TM    GDSFLAGS,LEVEL2     LEVEL 2
         BO    ERR3                YES-INVALID
         NI    WRKBITS,OMIT        SET OMIT SW
         B     ORG00700
         EJECT
*
*        FOR AN UPDATE THE KEY OR CORVAL IS SEARCHED FOR IF LEVEL 1.
*        NOTE THAT IF THE ELEMENT IS AN UPDATE THE UPDATE GDOAS ARE
*        OBTAINED AND THEN THE INCLUDE/OMIT STRUCTURE IS PLACED IN
*        THE GDOA.  IF THE ELEMENT IS NOT UPDATE, THE INCLUDE/OMIT
*        STRUCTURE IS PLACED IN THE GDOA FIRST AND THEN THE UPDATE
*        MODULE IS CALLED FOR WORK AREA.
*
ORG00400 C     REGA,THREE          UPDATE
         BNE   ERR3                NO-INVALID GENCODE
         OI    WRKSW,UPDT          SET UPDATE SWITCH
         CLC   WRKKEY,ZERO         IS IT KEYED
         BE    ORG00600            NO
         L     REGA,WRKKEY         PICK UP KEY VAR
         MVC   WRKADDR,0(REGA)     PLACE IN KEY VARIABLE
         TM    GDSFLAGS,LEVEL2     LEVEL2
         BO    ORG00800            YES, DO NOT SEARCH KEY TABLE
         ST    REGA,WRKKADDR       ADDR OF KEY VAR
         ST    GDSREG,WRKGDS1      GDSCB
         LA    REGA,TWO
         ST    REGA,WRKCODE        CODE TO SEARCH ON KEY
ORG00500 LA    PARM,WRKGDS1
         L     R15,ETE(RSTABADR)       GET HA03 ADDR               000B
         BALR  RET,R15             BRANCH                          000A
*//
*//      SEARCH FOR KEY/CORVAL
*//
         LTR   R15,R15
         BNE   ERRPRM
         MVC   WRKADDR,0(PARM)
         ST    PARM,WRKKEY         SAVE ADDR OF KEY IN TABLE
         TM    4(PARM),INCL        INCLUDE
         BO    ORG00800            YES
         NI    WRKBITS,OMIT        SET TO OMIT
         B     ORG00800
ORG00600 CLC   WRKCORVL,ZERO       IS CORVAL ZERO
         BE    ERR4                YES
         LA    REGA,WRKCORVL       SET
         ST    REGA,WRKKADDR       UP PARM LIST
         LA    REGA,FIVE           TO SEARCH
         ST    REGA,WRKCODE        KEY TABLE FOR
         ST    GDSREG,WRKGDS1      CORVAL
         B     ORG00500
         EJECT
*
*        IF THIS IS NOT AN UPDATE A LENGTH MUST BE CALCULATED FOR
*        THE DATA GENERATION.
*
ORG00700 L     REGA,WRKCNT         PICK UP LENGTH OF DATA
         SRDA  REGA,32             PLACE IN ODD REGISTER
         LH    REGC,GDSGDOAL
         S     REGC,SIX            GDOA LENGTH MINUS SIX
         DR    REGA,REGC           GET A COUNT OF GDOAS
         LA    REGB,1(REGB)        ADD ONE FOR ANY REMAINDER
         A     REGC,SIX
         MR    REGA,REGC           LENGTH REQUESTED WILL BE MORE THAN
         STH   REGB,WRKADDR        ADEQUATE IN ALL CASES.
         TM    WRKBITS+2,KEYED+CORRE KEYED OR CORRELATED
         BZ    ORG00750            NO
         BAL   RET,ORGGTRU1        GO GET INCL/OMIT
         LTR   R15,R15             SUCCESS
         BNE   ORG04600            NO REUTNR
ORG00750 L     REGA,GDSAOACB
         L     REGA,CURLOG(REGA)   PICK UP CURRENT LOG.
         STH   REGA,WRKADDR+2      AND PLACE IN KEY
ORG00800 ST    GDSREG,WRKGDS       GDSCB ADDR
         ST    ERRCD,WRKRTN        RETURN ADDR
         LA    PARM,WRKADDR
         TM    GDSFLAGS,LEVEL2     LVL2?                    D11 ZA05402
         BO    LINK13              YES,DONT SET ORGEN FLAGS D11 ZA05402
         MVI   ORGFLGS,X'FC'       SET ORGEN CALL FLAGS      LD YA00808
LINK13   L     R15,UPDH13(RSTABADR)  POINT TO UPDATE ADDR   E12 ZA29658
*              ONE LINE DELETED BY APAR---------------->    E12 ZA29658
         BALR  RET,R15             GOTO IFFAHA13            D11 ZA15418
* IFFAHA13 ACCESSED VIA GSP-TYPE LOAD FOR PERFORMANCE' SAKE D11 ZA15418
*//
         MVI   ORGFLGS,X'00'       TURN OFF ORGEN CALL FLAG  LD YA00808
         LTR   R15,R15             SUCCESS
         BNE   ORG04600            ERROR-NO STORE OR SOMETHING
         TM    WRKSW,UPDT          UPDATE
         BO    ORG00820            YES
         TM    WRKBITS+2,KEYED+CORRE KEYED OR CORRELATED
         BZ    ORG00840
         LH    REGA,WRKADDR+2      CORRECT LOGICAL START
         S     REGA,FOUR           ADDR IN KEY TO BEFORE THE GTRU/GNOP
         STH   REGA,WRKADDR+2
         B     ORG00840
         EJECT
ORG00820 TM    GDSFLAGS,LEVEL2     LEVEL 2
         BO    ORG00840            YES
         BAL   RET,ORGGTRU1        GO GENERATE INCL/OMIT STRUCTURE
         LTR   R15,R15             SUCCESS
         BNE   ORG04600            NO REUTRN
*
*        WE WILL NOW BEGIN MOVING THE DATA IN THE OUTPUT AREA
*        WE WILL CHANGE THE LOGICAL ADDRESSES TO ZERO-ON AND THEY
*        WILL BE USED IN COMBINATION WITH THE PHYSICAL BUFFER
*        ADDRESSES FOR RELOCATION.
ORG00840 MVC   WRKSTMD,GNOP2       SET MODE TO CONTROL
         L     R15,ZERO            LOGICAL ADDRESS IS ZERO
         L     OACB,GDSAOACB
         USING OACBAREA,OACB
         L     PARM,WRKPARM
         L     REGA,ARRAY(PARM)    START OF ARRAY
         L     REGB,WRKCNT         LENGTH OF ARRAY
         L     REGC,OLP            ORDER LOAD POINT
         L     REGD,LENLEFT        LENGTH LEFT
         C     REGD,FOUR           ARE THERE AT LEAST 4 BYTES
         BNL   ORG00900            IN THE FIRST GDOA-YES
ORG00860 L     OACB,OTHER          GET NEXT
         LTR   OACB,OACB           IS THERE ANOTHER
         BZ    ERR6                NO
         L     REGD,LENLEFT        LENGTH LEFT
         L     REGC,OLP            OLP
         MVC   0(2,REGC),WRKSTMD   SET SET MODE
         A     REGC,TWO
         ST    REGC,OLP            UPDATE TO BEYOND SET MODE
ORG00900 CR    REGB,REGD           WILL IT FIT IN THIS ONE
         BH    ORG01000            NO
         LR    REGD,REGB           SET LENGTH TO MOVE IN=LENGTH
ORG01000 C     REGD,F256           GR THAN 256
         BH    ORG01500
         BCTR  REGD,0
         EX    REGD,MOVE1          MOVE IN DATA
         LA    REGD,1(REGD)        RESET COUNT
         AR    REGC,REGD           ADD TO OLP
         AR    REGA,REGD           ADD TO ARRAY ADDR
         SR    REGB,REGD           SUBTRACT FROM LENGTH
         EJECT
*
*        WE HAVE MOVED IN AS MUCH AS WE COULD. NOW WE MUST DETERMINE,
*        IF THERE IS MORE DATA TO BE MOVED IN, IF WE HAVE BROKEN ON
*        A PROPER BOUNDARY OR IF WE MUST MODIFY THE BREAK.
*
         ST    R15,LOGCURR         LOGICAL ADDRESS IS SET
         C     REGB,ZERO           HAS ALL THE DATA BEEN MOVED IN
         BE    ORG01800            YES
*
*        WE WILL INDEX THE GDOA  FORWARDS UNTIL WE FIND THE LAST SET
*        MODE.
*
         L     PARM,OLP            ORDER LOAD PT
         L     RET,LENLEFT         LENGTH LEFT
         L     REGZERO,TWO         INCREMENT BY TWO
ORG01100 BAL   ERRCD,ORGSTMD1      GO SEARCH FOR SET MODE
ORG01200 B     ORG01600            1ST RETURN PT
         CLI   1(PARM),SAVEMODE    2ND RTN PT-MUST MODE BE SAVED
         BNH   ORG01400
         MVC   WRKSTMD,GNOP2       SET MODE=CONTROL
         CR    REGZERO,RET         WILL THIS ONE FIR
         BH    ORG01600            NO
         LA    ERRCD,ORG01200      CONTINUE SCAN
         L     REGZERO,TWO         INCREMENT BY TWO             XA02055
         B     ORGSTMDX
ORG01300 LA    ERRCD,ORG01200      SET RETURN
         B     ORGSTMD2            CONTINUE LOOP
ORG01400 MVC   WRKSTMD,0(PARM)     SAVE SET MODE
         LA    PARM,2(PARM)        UPDATE TO BEYOND THE SET MODE
         S     RET,TWO             REDUCE LENGTH BY TWO
         B     ORG01300
ORG01500 L     PARM,F256           MOVE IN 256
         BCTR  PARM,0
         EX    PARM,MOVE1
         S     REGD,F256           REDUCE LENGTH OF GDOA
         S     REGB,F256           REDUCE LENGTH OF ARRAY
         A     REGA,F256           ADD TO ARRAY ADDR
         A     REGC,F256           ADD TO OLP
         B     ORG01000            CONTINUE
         EJECT
ORG01600 A     R15,LENLEFT         UPDATE LOGICAL ADDRESS
         LTR   RET,RET             EVEN FIT
         BE    ORG01700            YES
         SR    REGC,RET            BACK UP OLP
         SR    REGA,RET            BACK UP ARRAY ADDR
         AR    REGB,RET            ADD BACK TO LENGTH
         SR    R15,RET             SUBTRACT FROM LOGICAL
ORG01700 ST    RET,LENLEFT         SET LENGTH LEFT
*
ORG01800 ST    REGC,OLP            SAVE OLP
         L     ERRCD,WRKRTNCD      RESET ERROR REGISTER
         LTR   REGB,REGB           ARE WE DONE
         BNE   ORG00860            NO.PROCEED
         OI    STATUS,LASTGDOA     SET SW THAT THIS IS LAST ONE
         ST    OACB,WRKLSTOA       SAVE LAST OACB ADDRESS    LD YA00806
         L     OACB,GDSAOACB       LOAD FIRST OACB
ORG01900 TM    STATUS,LASTGDOA     IS THIS LAST
         BO    ORG02100            YES
         CLC   LENLEFT,ZERO        DOES THIS NEED TO BE FILLED OUT
         BE    ORG02000            NO
         L     REGD,LENLEFT        PICK UP LENGTH
         BCTR  REGD,0
         L     REGC,OLP
         EX    REGD,ZEROOUT        ZERO THE END OUT
         MVC   0(2,REGC),GNOP2     MOVE IN A NO-OP
         A     REGC,LENLEFT
         ST    REGC,OLP            SET OLP TO POINT TO GTRU TO NEXT
         LA    REGD,RESET(REGD)    RESET LEN-LEFT REGISTER   LD YA00815
         S     REGD,TWO            UPDATE LENGTH LEFT...     LD YA00815
         ST    REGD,LENLEFT        AND STORE INOACB          LD YA00815
ORG02000 L     REGC,OLP
         MVC   0(2,REGC),GTRU      MOVE IN GTRU
         L     OACB,OTHER          GET NEXT
         B     ORG01900
         EJECT
*
*        HERE WE WILL OBTAIN THE BUFFER NEEDED FOR THE ORGEN CALL
*        FOR EACH GDOA USED.  THE FIRST OF COURSE WILL GO INTO THE
*        CURRENT GDOA AND NO BUFFER IS NEEDED.  FOR UPDATE THIS
*        PORTION WILL BE BYPASSED.
*
ORG02100 TM    WRKSW,UPDT          IS THIS UPDATE
         BO    ORG02300            YES, BUFFER ALREADY EXISTS
         MVC   WRKARA,THREE        CODE FOR MORE BUFFER
         ST    GDSREG,WRKARA+4     GDSCB ADDR
         LA    REGA,WRKARA
         ST    REGA,WRKGDS1        PARM LIST SET UP FOR
         ST    ERRCD,WRKCODE       BUFFER MGT
         L     OACB,ORIG           PICK UP ORIGINAL OACB
         L     REGA,BLP
         A     REGA,OLP            COMPUTE PHYSICAL BUFFER ADDR
         S     REGA,CRSA           OF FIRST ONE
         L     OACB,GDSAOACB       GO TO MY FIRST
ORG02200 ST    REGA,BUFSTART       STORE IN START
         ST    REGA,BLP            AND BUFFER LOAD PT
         TM    STATUS,LASTGDOA     ANOTHER GDOA
         BO    ORG02500            NO
         LA    PARM,WRKGDS1        POINT TO PARM LIST,RTN ARRAY, WKAREA
         L     R15,BMGT(RSTABADR)                                  000B
         BALR  RET,R15             CALL BUFFER MFT
         LTR   R15,R15             SUCCESS
         BNE   ERR7                NO
         LR    REGA,PARM           BUFFER ADDRESS
         L     REGB,OLP
         STH   REGA,2(REGB)        PLACE ADDR IN TRANS ORDER
         L     OACB,OTHER
         B     ORG02200
ORG02300 L     OACB,GDSAOACB       OACB
ORG02400 L     REGB,OLP            ADDR OF TRANS TO NEXT
         TM    STATUS,LASTGDOA     IS THIS LAST
         BO    ORG02500            YES
         L     OACB,OTHER          GET NEXT
         MVC   2(2,REGB),BLP+2     MOVE BUFFER ADDR INTO PREV GTRU
         B     ORG02400            CONTINUE
         EJECT
*
*        THE GDOAS ARE SET UP. NOW THE ADDRESS MANIPULATION
*        WILL TAKE PLACE.
*
*
*        PLACE HERE.  FIRST OF ALL IS THE SIMPLE RELOCATION.  THE
*        ADDRESS PASSED IS RELATIVE TO THE ASSEMBLY OF THESE
*        ORDERS AT ZERO AND THEY WILL BE RELOCATED TO THE ACTUAL
*        PHYSICAL BUFFER ADDRESS.  THE OTHER CASE IS WHERE THE
*        ADDRESS FIELD CONTAINS X'FFFF' A KEY WILL BE REMOVED FROM
*        THE KEY LIST, COMPUTED INTO A PHYSICAL BUFFER ADDRESS AND
*        THAT ADDRESS WILL BE PLACED IN THE ORDER.
*
ORG02500 L     REGA,WRKKYLST
         L     REGB,OLP            THE LENGTH OF THE LAST GDOA
         S     REGB,CRSA           IS COMPUTED. IT WILL BE USED TO
         ST    REGB,WRKLEN         INSURE THAT NO RELOCATION WILL
*                                  TAKE PLACE OUTSIDE THIS ORDER SET
         L     OACB,GDSAOACB       PICK UP OACB
         L     REGZERO,BLP         FIRST BUFFER LOAD PT MODIFIED FOR
         S     REGZERO,TWO         THE TWO BYTE SET MODE WHICH OCCURS
         ST    REGZERO,BLP         IN ALL OTHER CASES SO THAT
*        RELOCATION WILL BE CORRECT IN ALL CASES.
         L     REGZERO,TWO         LENGTH OF ORDER=2
ORG02600 L     PARM,CRSA           CRSA- START POINT
         L     RET,OLP
         SR    RET,PARM            LENGTH OF DATA IN GDOA
         BAL   ERRCD,ORGSTMD0      GET ORDERS WITH ADDRS     LD YA00808
ORG02700 B     ORG02900            RETURN IF GDOA IS FINISHED
         CLI   1(PARM),TWO1        IS THIS AN ORDER WITH AN ADDRESS
         BH    ORG03000            YES
ORG02800 LA    ERRCD,ORG02700      NO-
         LA    PARM,2(PARM)        UPDATE BEYOND SET MODE
         S     RET,TWO             REDUCE LENGTH BY TWO
         B     ORGSTMD2            KEEP GOING
ORG02900 TM    STATUS,LASTGDOA     IS THIS ONE LAST
         BO    ORG04400            YES
         L     OACB,OTHER          GET NEXT
         B     ORG02600            CONTINUE SCAN
ORG03000 CLC   2(2,PARM),KEYPASS   IS THIS A KEY ADDRESS
         BE    ORG03800            YES
*
         EJECT
*        WE HAVE A SIMPLE(?) RELOCATION HERE
*
         LR    REGC,OACB           SAVE THE OACB
         L     OACB,GDSAOACB
ORG03100 TM    STATUS,LASTGDOA     IS THIS THE LAST ONE
         BO    ORG03400            YES
         LR    REGB,OACB           SAVE THIS ONE
         L     OACB,OTHER          GET NEXT
         CLC   2(2,PARM),LOGCURR+2 IS THE ADDR IN THE PREVIOUS ONE
         BNL   ORG03100            NO
         LR    OACB,REGB           RESET OACB REGISTER
         LH    REGD,2(PARM)
         S     REGD,LOGCURR        DISPLACEMENT INTO BUFFER
ORG03200 A     REGD,BLP            ADD BUFFER LOAD PT
         A     REGD,TWO            SET MODE--POSITION BEYOND
         STH   REGD,2(PARM)        PLACE INTO ORDERS
         TM    WRKSW,SCNDPASS      IS THIS THE SECOND PASS
         BO    ORG03500            YES WERE DONE
         CLI   1(PARM),GMVA        IS THIS THE ONE WITH TWO ADDRESSES
         BE    ORG03600            YES
ORG03300 LR    OACB,REGC           RESET REGISTER
ORG03350 LA    ERRCD,ORG02700      RETURN POINT
         B     ORGSTMDX            CONTINUE
ORG03400 LH    REGD,2(PARM)
         S     REGD,LOGCURR
         C     REGD,WRKLEN         IS THIS ADDR OUTSIDE THE GDOA
         BH    ERR8                ERRCD NOT SET--
         B     ORG03200
ORG03500 S     PARM,TWO            RESET PARM
         XI    WRKSW,SCNDPASS      TURN OFF SECOND PASS SW
         B     ORG03300
ORG03600 LR    OACB,REGC
ORG03700 LA    PARM,2(PARM)        POINT UP 2 BYTES
         OI    WRKSW,SCNDPASS      SET SECOND PASS SW
         B     ORG03000            PROCESS SECOND
         EJECT
*
*        A KEY WILL BE REMOVED FROM THE KEY LIST, CONVERTED TO A
*        PHYS BUFFER ADDR AND THE ADDR WILL BE PLACED IN THE ORDERS
*
ORG03800 LTR   REGA,REGA           KEYLIST PARM PASSED
         BZ    ERR9                NO
         LH    REGC,2(REGA)        GET LOGICAL ADDR FROM KEY
         LA    REGA,4(REGA)        UPDATE TO NEXT KEY
         SRDA  REGC,32             PLACE IN ODD REG
         LH    REGB,GDSGDOAL
         S     REGB,SIX            DIVIDE BY GDOA-SIX
         DR    REGC,REGB
         A     REGC,TWO            ADD TWO TO REMAINDER FOR SET MODE
         L     R15,GTMBCTBL        BUFFER CONTROL
         SR    REGB,REGB
         ST    REGC,WRKDSP         SAVE DISPL
         LH    REGC,GDSBCTEL       BCT DISP
         MH    REGC,THREE+2
         CLC   GDSGDOAL,SUBSEG     IS THIS A SUBSEG
         BE    ORG04000            YES
ORG03900 IC    REGB,2(REGC,R15)    PICK UP COUNT
         CR    REGB,REGD           IN THIS ONE
         BE    ORG04100            YES
         IC    REGB,1(REGC,R15)    GET PTR
         MH    REGB,THREE+2
         CR    REGB,REGC           ANOTHER ON CHAIN
         BE    ERR9                ERRCD NOT SET
         LR    REGC,REGB           YES
         SR    REGB,REGB
         B     ORG03900
ORG04000 LTR   REGD,REGD           COUNT ZERO
         BNE   ERR9                NO KEY INVALID
*
         AR    R15,REGC            ADD DISP TO TBL
         LR    REGD,REGC
         M     REGC,F256           COMPUTE PHYS ADDR
         D     REGC,THREE
         CLC   0(1,R15),GDSBCTID   IN FIRST HALF
         BE    ORG04200            YES
         AH    REGD,SUBSEG         UPDATE ADDR TO SECOND
         B     ORG04200
         EJECT
ORG04100 LR    REGD,REGC           COMPUTE
         M     REGC,F256           PHYS ADDR
         D     REGC,THREE
ORG04200 A     REGD,WRKDSP         ADD DISP TO PHYS
         STH   REGD,2(PARM)        STORE IN DATA
         TM    WRKSW,SCNDPASS      SECOND PASS
         BO    ORG04300            YES
         CLI   1(PARM),GMVA        IS THIS ONE WITH TWO ADDR
         BE    ORG03700            YES
         B     ORG03350            CONTINUE SCAN
ORG04300 S     PARM,TWO            RESET PARM
         XI    WRKSW,SCNDPASS      TURN OFF SW
         B     ORG03350            CONTINUE SCAN
         EJECT
*
*        NOW EVERYTHING IS RELOCATED.  I WILL NOW SET UP THE ORIGINAL
*
*        OACB AND OVERFLOW,ETC
*
*
*        NOW THAT ALL DATA HAS BEEN RELOCATED IT MUST BE PLACED IN
*        THE ACTUAL GDOA OR WRITTEN OUT.  IF UPDATE THE UPDATE
*        MODULE WILL DO THIS FOR ME SO I WILL COMPLETE THE INCLUDE
*        OMIT STRUCTURE AND CALL UPDATE TO WRITE OUT THE GDOAS.
*
ORG04400 TM    WRKSW,UPDT          UPDATE
         BZ    ORG04700            NO
         TM    GDSFLAGS,LEVEL2
         BO    ORG04450
         L     OACB,GDSAOACB       SAVE PTR TO FIRST OACB    LD YA00806
         L     REGA,WRKLSTOA       GET LAST FOR ADDR RES     LD YA00806
         MVC   LOACPBF2(CPBF2,REGA),CPU2 MOVE TO LAST OACB   LD YA00806
         ST    REGA,GDSAOACB       STORE POINTER TO LAST     LD YA00806
         ST    GDSREG,WRKGDS1      CALL DATA STORE
         MVC   WRKCODE,WRKRTNCD    TO RESOLVE INCLUDE/OMIT
         XC    WRKKADDR,WRKKADDR   ADDRESS
         OI    WRKKADDR,RESOL
         LA    PARM,WRKGDS1       LOAD THE PARAMETER REG           6852
         L     R15,DSTOR(RSTABADR)                                 000B
         BALR  RET,R15
         ST    OACB,GDSAOACB       RESTORE PTR TO 1ST OACB   LD YA00806
ORG04450 LA    PARM,WRKADDR
         L     R15,UPDH14(RSTABADR)  POINT TO UPDATE RTN    E12 ZA29658
*              ONE LINE DELETED BY APAR----------------->   E12 ZA29658
         BALR  RET,R15             GOTO IFFAHA14            D11 ZA15418
         TM    GDSFLAGS,LEVEL2
         BO    ORG04500            LEVEL 2-YES
         L     REGA,WRKKEY
         MVC   0(8,REGA),WRKADDR   REPLACE KEY
         TM    WRKBITS+2,CORRE     CORRELATED
         BZ    ORG04500            NO
         L     REGA,WRKKEY
         MVC   8(4,REGA),WRKCORVL  REPLACE CORVAL
ORG04500 MVI   GDSGRMOD,CNTL       SET CURRENT MODE TO CONTROL
ORG04600 L     SAVE,4(SAVE)
         RETURN (14,12),T          RETURN
         EJECT
*
*
*        IF THE DATA FITS ENTIRELY IN THE CURRENT GDOA WITHOUT
*        OVERFLOW IT IS PLACED THERE, POINTERS ARE UPDATED, AND
*        THE STORAGE OBTAINED IS FREED.  IF KEYED THE ROUTINE
*        COMPLETES THE INCLUDE OMIT STRUCTURE, ADDS THE KEY
*        TO THE KEY TABLE AND RETURNS TO THE CALLING ROUTINE.
*        IF NOT KEYED IT RETURNS AT THIS TIME.
*
ORG04700 L     OACB,GDSAOACB       LOAD FIRST OACB
         TM    STATUS,LASTGDOA     IS THIS FITTING IN THE GDOA
         BZ    ORG05000            NO
         L     REGA,CRSA           START ADDR
         L     REGB,OLP
         S     REGB,CRSA           LENGTH
         L     OACB,ORIG           ORIGINAL
         L     REGD,LENLEFT
         SR    REGD,REGB           UPDATE LENGTH LEFT
         LTR   REGD,REGD           IS ANY ROOM LEFT IN GDOA      A27472
         BNL   ORG04750            IF YES,CONT STORE        D11 ZA13186
         LA    PARM,WRKGDS1          IF NO, GET MORE BUFFER      A27472
         ST    GDSREG,WRKGDS1          SET UP HA05 PLIST         A27472
         XC    WRKKADDR,WRKKADDR                                 A27472
         OI    WRKKADDR,BFOVRFL        SET BUFFER OVERFLOW FLAG  A27472
         L     REGD,GDSAOACB           KEEP ORGEN OACB CHAIN     A27472
         ST    OACB,GDSAOACB           RESTORE ORIG OACB         A27472
         L     R15,DSTOR(RSTABADR)                               A27472
         BALR  RET,R15                                           A27472
         LTR   R15,R15             WAS PROCESSING SUCCESSFUL     A27472
         BNZ   ERR6A                 IF NO, FREE CORE            A27472
         L     OACB,GDSAOACB         IF YES, GET NEW OACB ADDR   A27472
         ST    REGD,GDSAOACB                RESET UPDATE OACB    A27472
         L     REGD,LENLEFT                 CONTINUE STORING     A27472
         SR    REGD,REGB                                         A27472
ORG04750 ST    REGD,LENLEFT                                      A27472
         L     REGC,OLP                                          A27472
         LR    REGD,REGC
         AR    REGD,REGB           UPDATE OLP
         ST    REGD,OLP
         L     REGD,LOGCURR
         AR    REGD,REGB           UPDATE LOGICAL  CURRENT
         ST    REGD,LOGCURR
ORG04800 C     REGB,F256
         BH    ORG04900
         BCTR  REGB,0
         EX    REGB,MOVE1          MOVE ORDERS IN GDOA
         L     REGD,GDSAOACB
         ST    OACB,GDSAOACB       RESET GDOA/OACB ADDR
ORG04850 LR    OACB,REGD
         L     REGZERO,LENGTH
         L     PARM,FIRST
         FREEMAIN R,LV=(0),A=(1)   FREE STORAGE
         L     OACB,GDSAOACB       WEE WILL CONPLETE THE KEY
         L     REGA,LOGCURR
         SH    REGA,WRKADDR+2      LENGTH FOR KEY
         STH   REGA,WRKADDR        IN KEY
         L     REGA,WRKKEY         KEY PARM
         LTR   REGA,REGA           IS THER A KEY PARM
         BZ    ORG04870            NO
         MVC   0(4,REGA),WRKADDR   MOVE KEY IN USER VARIABLE
         EJECT
ORG04870 TM    WRKBITS+2,KEYED+CORRE KEYED OR CORRELATED
         BZ    ORG04500               NO
         ST    GDSREG,WRKGDS1
         MVC   WRKCODE,WRKRTNCD
         XC    WRKKADDR,WRKKADDR   COMPLETE INCL/OMIT
         MVI   WRKKADDR,RESOL
         LA    PARM,WRKGDS1        ADDR OF PARAMETER LIST
         L     R15,DSTOR(RSTABADR)                                 000B
         BALR  RET,R15
         LA    REGA,ONE                 CODE TO ADD A KEY
         ST    REGA,WRKCODE             IN PARM LIST
         ST    GDSREG,WRKGDS1
         LA    REGA,WRKADDR             ADDR OF KEY TO BE ADDED
         ST    REGA,WRKKADDR            IN PARM LIST
         LA    PARM,WRKGDS1        ADDR OF PARM LIST
         L     R15,ETE(RSTABADR)       GET HA03 ADDR               000C
         BALR  RET,R15                                             000C
         B     ORG04500
         EJECT
*
*        IF THE ORGEN GENERATION OVERFLOWS THE CURRENT GDOA
*        AS MUSH AS FITS IN AND DATA STORE IS CALLED
*        TO OVERFLOW ONLY.  THIS IS DONE CONTINUALLY UNTIL THE
*        LAST GDOA ON THE ORGEN WORK CHAIN IS ENCOUNTERED.  THAT
*        ONE IS JUST MOVED INTO THE GDOA AND THE POINTERS ARE
*        UPDATED.  THEN THE STORAGE IS RELEASED, ETC.  JUST
*        AS FOR THE CASE WHERE THE DATA FIT IN THE FIRST GDOA.
*
ORG04900 L     REGD,F256
         SR    REGB,REGD           REDUCE LENGTH
         BCTR  REGD,0
         EX    REGD,MOVE1
         A     REGA,F256           UPDATE
         A     REGC,F256           MOVE ADDRESSES
         B     ORG04800
ORG05000 ST    GDSREG,WRKGDS1
         MVC   WRKCODE,WRKRTNCD    SET UP PARM LIST FOR
         XC    WRKKADDR,WRKKADDR   DATA STORE TO OVERFLOW ONLY
         OI    WRKKADDR,OVERFLOW
         L     OACB,GDSAOACB       MY OACBS
         L     REGA,CRSA           CRSA
         L     REGB,BUFLEN         LENGTH
         LR    REGD,OACB           SAVE MY OACBS
         L     OACB,ORIG           PICK UP ORIGINAL
         ST    OACB,GDSAOACB       RESET PTR
ORG05100 L     REGC,LOGCURR        UPDATE
         A     REGC,LENLEFT        LOGICAL CURRENT
         ST    REGC,LOGCURR
ORG05150 L     REGC,OLP
ORG05200 C     REGB,F256           WILL IT REQUIRE MULTIPLE MOVES
         BH    ORG05300            YES
         BCTR  REGB,0
         C     REGA,4(REGD)        CRSA=START OF GDOA?      D11 ZA06414
         BNE   ORG05225            NO,BR                    D11 ZA06414
         LA    REGB,6(REGB)        ADD SIX TO MOVED LEN     D11 ZA06414
ORG05225 EX    REGB,MOVE1          MOVE DATA IN             D11 ZA06414
         TM    WRKSW,LSTONE
         BO    ORG05500
         LA    PARM,WRKGDS1
         L     R15,DSTOR(RSTABADR)                                 000B
         BALR  RET,R15             GO OVERFLOW
         LR    OACB,REGD           GET NEXT ON MY CHAIN
         L     OACB,OTHER
         LR    REGD,OACB
         TM    STATUS,LASTGDOA     LAST
         BO    ORG05400            YES
         EJECT
ORG05250 L     REGC,BUFSTART       GET BUFFER ADDR
         L     REGB,BUFLEN
         L     REGA,CRSA           AND START LOCATION
         L     R15,OLP             ORDER LOAD PT IF THIS LAST
         L     OACB,GDSAOACB       REGULAR OACB
         ST    REGC,BUFSTART       PUT BUFFER ADDR IN
         ST    REGC,BLP
         TM    WRKSW,LSTONE
         BO    ORG05500
         B     ORG05100            KEEP GOING
ORG05300 L     R15,F256
         BCTR  R15,0               MOVE IN 256
         EX    R15,MOVE1
         S     REGB,F256           AND UPDATE LENGTH
         A     REGA,F256           AND
         A     REGC,F256           PTRS
         B     ORG05200
ORG05400 OI    WRKSW,LSTONE        SET LAST ONE SW
         B     ORG05250
ORG05500 SR    R15,REGA            COMPUTE LENGTH
         LR    REGB,R15            PLACE IN ANOTHER REGISTER
         L     REGC,OLP            OBTAIN OLP
ORG05600 C     R15,F256            WILL ONE MOVE DO IT
         BH    ORG05700            NO
         BCTR  R15,0               SHORTEN LENGTH
         EX    R15,MOVE1           MOVE DATA IN
         L     REGC,OLP            LOAD ORDER LOAD OLP
         AR    REGC,REGB
         ST    REGC,OLP            UPDATE OLP
         L     REGA,LOGCURR        LOAICAL CURRENT ADDRESS
         S     REGB,TWO
         AR    REGA,REGB           UPDATE LOGICAL CURRENT
         ST    REGA,LOGCURR
         L     REGA,LENLEFT
         SR    REGA,REGB           UPDATE LENGTH LEFT
         ST    REGA,LENLEFT
         B     ORG04850
ORG05700 L     RET,F256            LENGTH OF MOVE
         BCTR  RET,0               REDUCE BY ONE FOR EXECUTE
         EX    RET,MOVE1           MOVE PART OF IT IN
         S     R15,F256            REDUCE LENGTH
         A     REGA,F256           ADD TO CRSA IN MY GDOA/OACB
         A     REGC,F256           ADD TO OLP IN GDS OACB/GDOA
         B     ORG05600            KEEP GOING
ORGSTMD0 LTR   RET,RET             CHECK FOR ZERO LGH        LD YA00808
         BCR   BZ,ERRCD            IF YES, RETURN SINCE...   LD YA00808
*                                  ...NO CHECK QS NEEDED     LD YA00808
         EJECT
ORGSTMD1 CLI   0(PARM),STMD        IS THIS A SET MODE
         BE    ORGSTMD3            YES
ORGSTMDX AR    PARM,REGZERO        ADD INCREMENT TO ORDER LOAD POINT
         SR    RET,REGZERO         SUBTRACT INCREMENT FROM LENGTH TO GO
ORGSTMD2 CR    REGZERO,RET         ROOM FOR ANOTHER
         BNH   ORGSTMD1            YES
         BR    ERRCD               NO RETURN TO FIRST EXIT POINT
ORGSTMD3 L     REGZERO,FOUR        SET LENGTH TO FOUR
         LA    ERRCD,4(ERRCD)      SET RETURN REGISTER TO SCND EXIT
*
*        THIS SEQUENCE WILL DETERMINE THE LENGTH OF THE ORDER AND
*        PLACE THAT LENGTH IN REGZERO. PARM WILL POINT TO THE ORDER
*        ON RETURN.
*
         CLI   1(PARM),FOUR1       FOUR BYTE ABS MODE INSTR
         BCR   BNH,ERRCD           YES
         L     REGZERO,TWO         SET TO TWO BYTE
         CLI   1(PARM),TWO1        TWO BYTE ORDER
         BCR   BNH,ERRCD           YES
         L     REGZERO,FOUR        SET TO FOUR BYTE
         CLI   1(PARM),FOUR2       GSXY OR GNOP4
         BCR   BNH,ERRCD           YES
         L     REGZERO,SIX         SET TO SIX BYTE
         CLI   1(PARM),SIX1        GMVD,GMVA
         BCR   BNH,ERRCD           YES
         L     REGZERO,FOUR        SET TO FOUR BYTE
         BR    ERRCD               GTDD,GTND,GTRU
         EJECT
ORGGTRU1 TM    WRKBITS,INCL        INCLUDE
         BZ    ORGGTRU2            NO
         LA    REGA,GNOP4          ADDR OF GNOP
         B     ORGGTRU3
ORGGTRU2 LA    REGA,GTRU           ADDR OF GTRU
ORGGTRU3 ST    GDSREG,WRKGDS1
         ST    ERRCD,WRKCODE
         MVC   WRKKADDR,FOUR       LENGTH OF FOUR
         OI    WRKKADDR,CONTUNRE
         MVC   WRKOUTPT,0(REGA)
         LA    PARM,WRKGDS1
         L     R15,DSTOR(RSTABADR)                                 000B
         BR    R15
*
*        THE INCLUDE OMIT STRUCTURE WILL BE PUT OUT BY DATA
*        STORE BEFORE THE STORAGE ALLOCATION IN THE CASE OF A
*        REGULAR CALL AND AFTER THE STORAGE ALLOCATION IN THE
*        CASE OF AN UPDATE CALL. THE SUBROUTINE USES REGA, AND
*        R15. IT IS CALLED WITH THE RETURN ADDRESS IN REG14
*        AND DATA STORE WILL RETURN CONTROL TO THAT POINT.
*
         EJECT
ERR1     MVC   PRMER(4,ERRCD),ONE  GDSCB
ERRPRM   OI    0(ERRCD),PRM
         B     ORG04600
ERR3     MVC   PRMER(4,ERRCD),SEVEN GENCODE
         B     ERRPRM
ERR4     MVC   PRMER(4,ERRCD),FIVE CORVAL
         B     ERRPRM
ERR5     MVC   STRG(4,ERRCD),FOUR  MAIN STORAGE
ERR5A    OI    0(ERRCD),ST
         B     ORG04600
ERR6     TM    WRKSW,UPDT          UPDATE OVERFLOW
         BO    ERR6A               YES
ERR6A    MVC   STRG(4,ERRCD),ONE   UPDATE OVERFLOW
         OI    0(ERRCD),ST
ERR6B    L     OACB,GDSAOACB
         L     REGZERO,LENGTH
         L     PARM,FIRST
         L     OACB,ORIG
         ST    OACB,GDSAOACB       RESET OACB
         FREEMAIN R,LV=(0),A=(1)   DO FREEMAIN
         B     ORG04600
         EJECT
ERR7     MVC   STRG(4,ERRCD),THREE NO BUFFER
         OI    0(ERRCD),ST
ERR7A    L     OACB,GDSAOACB
         L     OACB,ORIG
         L     REGD,BUFSTART       COMPUTE A DISPLACEMENT FOR BUFFER MG
         M     REGC,THREE
         D     REGC,F256
         ST    REGD,WRKARA+8       IN PARM LIST
         MVC   WRKARA,SIX          CODE TO RESET
         L     R15,BMGT(RSTABADR)                                  000B
         LA    PARM,WRKGDS1        RELEASE BUFFER
         BALR  RET,R15
         B     ERR6B               GO TO RELEASE STORAGE
ERR8     L     ERRCD,WRKRTNCD
         OI    0(ERRCD),PRM
         MVC   PRMER(4,ERRCD),TWO  BAD RELOC IN ARRAY
ERR8A    TM    WRKSW,UPDT
         BO    ERR6B
         B     ERR7A
ERR9     L     ERRCD,WRKRTNCD
         OI    0(ERRCD),PRM
         MVC   PRMER(4,ERRCD),FOUR BAD KEY K IN KEYLIST
         B     ERR8A
         EJECT
* REGISTERS
*
REGZERO  EQU   0
PARM     EQU   1
REGA     EQU   2
REGB     EQU   3
ERRCD    EQU   4
WORK     EQU   5
OACB     EQU   6
GTMREG   EQU   7
GDSREG   EQU   8
BASE     EQU   9
REGC     EQU   10
REGD     EQU   11
RSTABADR EQU   12                      STATUS TABLE ADDR           000B
SAVE     EQU   13
RET      EQU   14
R15      EQU   15
         EJECT
         GINIT
GTRU     GTRU  0
GNOP4    GNOP4 0
GNOP2    GNOP2
         DC    C'40 BYTE PATCH AREA'
PATCH    DC    40X'FF'             PATCH AREA               D11
         EJECT
ZERO     DC    2F'0'
ONE      DC    F'1'
TWO      DC    F'2'
THREE    DC    F'3'
FOUR     DC    F'4'
FIVE     DC    F'5'
SIX      DC    F'6'
SEVEN    DC    F'7'
TWTY     DC    F'20'
F256     DC    F'256'
BITS     DC    B'10111110'
         DC    X'00'
         DC    B'00000000'
         DC    B'00000000'
KEYPASS  DC    X'FFFF'
SUBSEG   DC    H'128'
MOVE1    MVC   0(1,REGC),0(REGA)
ZEROOUT  XC    0(1,REGC),0(REGC)
         EJECT
* PARAMETER LIST EQUATES
*
GDS      EQU   0
ARRAY    EQU   4
COUNT    EQU   8
KEYLST   EQU   12
CORVAL   EQU   16
KEY      EQU   20
GENCDE   EQU   24
LAST     EQU   X'80'
         EJECT
* OTHER EQUATES
NULL     EQU   20
LEVEL2   EQU   X'10'
OMIT     EQU   X'FB'
UPDT     EQU   X'40'
KEYED    EQU   X'20'
INCL     EQU   X'04'
CURLOG   EQU   52
CONTUNRE EQU   X'01'
STAT     EQU   24
DSTOR    EQU   852
STMD     EQU   X'2A'
FOUR1    EQU   X'02'
TWO1     EQU   X'BF'          MAXIMUM VALUE FOR 2 BYTE ORDER     A29394
SIX1     EQU   X'EC'
FOUR2    EQU   X'EA'
BNH      EQU   13
LOACPBF2 EQU   40                  CPU2 AND BUF2 FIELDS      LD YA00806
*                                  ...OF LAST OACB           LD YA00806
CPBF2    EQU   8                   OACB CPU2 AND BUF2        LD YA00806
BZ       EQU   8                   MASK OF ZERO              LD YA00808
RESET    EQU   1                   VALUE USED TO RESET LEN   LD YA00815
SAVEMODE EQU   X'45'
LASTGDOA EQU   X'10'
BMGT     EQU   816
UPDH13   EQU   936                 STATAB DISPL -IFFAHA13-  D11 ZA15418
UPDH14   EQU   948                 STATAB DISPL -IFFAHA14-  D11 ZA15418
NOBUF    EQU   X'80'
SCNDPASS EQU   X'20'
CNTL     EQU   0
RESOL    EQU   X'02'
GMVA     EQU   X'EB'
OVERFLOW EQU   X'20'
LSTONE   EQU   X'10'
BUFLEN1  EQU   28
PRM      EQU   X'08'
PRMER    EQU   16
STRG     EQU   12
ST       EQU   X'10'
CORRE    EQU   X'10'
MEMSUB   EQU   X'80'
MEMSEQ   EQU   X'40'
SEQ      EQU   X'04'
SUB      EQU   X'02'
ETE      EQU   828                                                 000A
BFOVRFL  EQU   X'60'          BUFFER OVERFLOW REQUIRED           A34801
         EJECT
OACBAREA DSECT
OTHER    DS    F
GDOA     DS    F
STATUS   DS    F
CRSA     DS    F
OLP      DS    F
BLP      DS    F
BUFSTART DS    F
BUFLEN   DS    F
FIRST    DS    F
LENGTH   DS    F
CPU2     DS    F
BUF2     DS    F
LOGSTRT  DS    F                   LOGICAL IN RELATION TO GDS
LOGCURR  DS    F                   LOGICAL IN RELATION TO ORGEN
LENLEFT  DS    F
ORIG     DS    F
         EJECT
WORKAREA DSECT
WRKPARM  DS    F
WRKRTNCD DS    F
WRKSAVE  DS    18F
WRKSW    DS    F
WRKKYLST DS    F
WRKARA   DS    3F
WRKCNT   DS    F
WRKDSP   DS    F
WRKLEN   DS    F
WRKGDOA  DS    F
WRKDSTOR DS    F
WRKSTMD  DS    F
WRKBMGT  DS    F
WRKADDR  DS    F
WRKBITS  DS    F
WRKCORVL DS    F
WRKKEY   DS    F
WRKGDS   DS    F
WRKRTN   DS    F
WRKGDS1  DS    F
WRKCODE  DS    F
WRKKADDR DS    F
WRKOUTPT DS    F
WRKLSTOA DS    F                   LAST OACB POINTER         LD YA00806
ORGFLGS  DS    F                   ORGEN FLAGS FOR UPDATE    LD YA00808
         COPY  GTMCB
         COPY  GDSCB
         END
