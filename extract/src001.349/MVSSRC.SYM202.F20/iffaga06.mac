*TITLE         PLSTR- PLOT STROKES                                    *
*                                                                     *
*MODULE NAME   IFFAGA06                                               *
*                                                                     *
*FUNCTION/OPERATION                                                   *
*  TRANSLATES STROKE TABLE ENTRIES INTO CHARACTERS ON THE SCREEN,     *
*  OF A SIZE AND AT AN ORIENTATION DETERMINED BY THE PARAMETERS       *
*  PASSED. THE STROKE TABLE ENTRIES REFERENCED ARE GOVERNED BY THE    *
*  VALUE OF THE EBCDIC TEXT GIVEN AS INPUT.                           *
*                                                                     *
*ENTRY POINT   IFFAGA06 - CSECT NAME                                  *
*                                                                     *
*INPUT  REGISTER 1 CONTAINS THE ADDRESS OF A WORK/SAVE AREA. THE FIRST*
*  WORD CONTAINS THE ADDRESS OF THE PARAMETER LIST ON A FULL WORD     *
*  BOUNDARY. THE NULL VARIABLE IS AT AN OFFSET OF 20 FROM THE RETURN  *
*  ARRAY, AND THE ADDRESS OF THE STATUS TABLE IS AT AN OFFSET OF 24   *
*  FROM THE RETURN ARRAY.                                             *
*FORMAT OF PARAMETER LIST                                             *
* REQUIRED PARAMETERS                                                 *
*                                                                     *
*  +0    A(VAR)          ADDRESS OF A VARIABLE WHICH CONTAINS THE     *
*                        GDSCB ADDRESS                                *
*  +4    A(TABLE ID)     ADDRESS OF AN INTEGER VALUE FROM 1-99 WHICH  *
*                        IDENTIFIES THE STROKE TABLE REFERENCED.      *
*  +8    A(TEXT)         ADDRESS OF AN ARRAY CONTAINING THE           *
*                        CHARACTERS TO BE GENERATED                   *
*  +12   A(COUNT)        ADDRESS OF THE COUNT OF THE NUMBER OF        *
*                        CHARACTERS TO BE GENERATED, THE COUNT IS     *
*                        POSITIVE IF THERE ARE14 CHARACTERS PER WORD  *
*                        IN THE TEXT ARRAY, AND NEGATIVE IS THERE     *
*                        IS 1 CHARACTER/PER WORD (RIGHT ALIGNED).     *
*  +16   A(HEIGHT)       ADDRESS OF HEIGHT IN INCHES OF THE CHARACTERS*
*                        (MINIMUM = 1/8 INCH)                         *
*  OPTIONAL PARAMETERS                                                *
*                                                                     *
*  +20   A(WIDTH)        ADDRESS OF WIDTH IN INCHES OF THE CHARACTERS.*
*                        (MINIMUM = 1/8 INCH)                         *
*  +24   A(SPACING)      ADDRESS OF SPACE IN INCHES FROM CENTER OF    *
*                        ONE CHARACTER TO CENTER OF NEXT.             *
*  +28   A(ORIENTATION)  ADDRESS OF A FOUR WORD ARRAY                 *
*                          WORD 1= SINE OF ANGLE OF ROTATION FROM     *
*                                  POSITIVE X AXIS OF CHARACTER.      *
*                          WORD 2= COSINE OF ANGLE OF ROTATION FROM   *
*                                  POSITIVE X AXIS OF CHARACTER       *
*                          WORD 3= SINE OF ANGLE OF ROTATION FROM     *
*                                  POSITIVE X AXIS OF CHARACTER STRING*
*                          WORD 4= COSINE OF ANGLE OF ROTATION FROM   *
*                                  POSITIVE X AXIS OF CHARACTER STRING*
*  +36   A(CORRVAL)      ADDRESS OF CORRELATION VALUE.                *
*                                                                     *
*  +40   A(KEY)          ADDRESS OF USER KEY VARIABLE.                *
*                                                                     *
*  +44   A(GENCODE)      ADDRESS OF THE CODE WHICH SPECIFIED THE TYPE *
*                        OF OUTPUT - EITHER INCLUDE,OMIT OR UPDATE    *
*  +48   A(X COR)        ADDRESS OF THE X VALUE TO WHICH THE BEAM IS  *
*                        TO BE POSITIONED.                            *
*  +52   A(Y COR)        ADDRESS OF THE Y VALUE TO WHICH THE BEAM IS  *
*                        TO BE POSITIONED.                            *
*                                                                     *
*NOTE: HEIGHT, WIDTH, SPACING, AND THE CONTENTS OF THE ORIENTATION    *
*      ARRAY ARE ALL REAL VALUES.                                     *
*                                                                     *
*OUTPUT  NONE TO CALLER. THE DATA WILL BE SCISSORED AND IF IT APPEARS *
*  ON THE SCREEN ORDERS WILL BE GENERATED FOR IT IN THE GDOA.         *
*                                                                     *
*EXTERNAL ROUTINES                                                    *
*  IFFAFA12 - RESET
*  IFFAHA03    KEY TABLE MANAGEMENT                                   *
*  IFFAHA04    DATA GENERATION                                        *
*  IFFAHA05    DATA STORE                                             *
*  IFFAHA06    SCALE     TO SCALE X,Y PARAMETERS IF PASSED.           *
*  IFFAHA07    SCISSOR                                                *
*  IFFAHA13    GET GDOA'S FOR UPDATE                                  *
*  IFFAHA14    WRITE OUT UPDATE                                       *
*                                                                     *
*EXITS - NORMAL- BACK TO CALLER VIA REGISTER 14                       *
*        ERROR - BACK TO CALLER VIA REGISTER 14                       *
*  APPRORIATE CODES ARE SET IN THE RETURN ARRAY- SEE GSPARRAY         *
*NOTE: IF THE STROKE TABLE REFERENCED CANNOT BE LOCATED, AN ABEND     *
*      WILL BE CAUSED BY THE OPERATING SYSTEM                         *
*                                                                     *
*TABLES/WORKAREAS   - SEE WORKAREA DSECT                              *
*                                                                     *
*ATTRIBUTES         - REENTRANT, PROBLEM PROGRAM MODE                 *
*                                                                     *
***********************************************************************
         EJECT
IFFAGA06 CSECT                          PLSTR
*A779700-779900,946100-946300                                    A29395
*A779904                                                         F40704
*C388800                                                         A30726
*0874,200800                                                       9326
*2239,379200-384800                                                000A
*D792200-792400                                                  YM1963
         SPACE 4
*REGISTERS
RZERO    EQU   0
PARM     EQU   1
REGA     EQU   2
REGB     EQU   3
ERRCD    EQU   4
WORK     EQU   5
GSPREG   EQU   6
REGD     EQU   6
GTMREG   EQU   7
REGE     EQU   7
GDSREG   EQU   8
BASE     EQU   9
REGC     EQU   10
COUNT    EQU   11
SAVE     EQU   13
RETREG   EQU   14
BRANCH   EQU   15
FE       EQU   48                                                  000A
ETE      EQU   828                                                 000A
         SPACE 2
FLT0     EQU   0
FLT2     EQU   2
FLT4     EQU   4
FLT6     EQU   6
         EJECT
*PARAMETER LIST DISPLACEMENTS
*
GDS      EQU   0                        ADDR OF GDSCB VARIABLE
TAB      EQU   4                        ADDR OF TABLE IDENTIFIER
TEXT     EQU   8                        ADDRESS OF ARRAY
CT       EQU   12
HGT      EQU   16
*
*THE FOLLOWING ARE OPTIONAL PARAMETERS
*
WIDTH    EQU   20                       ADDR OF WIDTH OF CHAR
SPACING  EQU   24
ORIENT   EQU   28                       ADDR OF ARRAY
COR      EQU   32                       ADDR OF CORRVAL
KEY      EQU   36
GEN      EQU   40
XCOR     EQU   44
YCOR     EQU   48
STOR     EQU   12
PARMERR  EQU   16
NULL     EQU   20
NL       EQU   21
CURRLOG  EQU   52
STAT     EQU   24
DGEN     EQU   840
CVRT     EQU   924
DSTORE   EQU   852
SCISS    EQU   876
SCALE    EQU   864
CVTLINK  EQU   8
ID       EQU   0                        DISPLACEMENTS FOR STROKE TABLE
NEXTAB   EQU   4                             *
ADDR     EQU   8                             *
         EJECT
*SWITCHES
REPONLY  EQU   X'02'
OPT      EQU   X'04'                    OUTPUT MODE SWITCHES
INC      EQU   X'01'                         *
ABSSW    EQU   X'03'                         *
INCSW    EQU   X'02'                         *
YABS     EQU   X'0A'
XABS     EQU   X'A0'
NOSCISS  EQU   X'10'
LASTON   EQU   X'1F'
NEG      EQU   X'80'
BLANK    EQU   X'80'
RESOL    EQU   X'02'
BEAMON   EQU   X'08'
NFNL     EQU   X'40'
LASTT    EQU   X'C0'
BOFF     EQU   X'F7'
LASSTR   EQU   X'80'
MULT     EQU   X'80'
SWOFF    EQU   X'3F'
OFF      EQU   X'00'
XSIGN    EQU   X'F0'
XFOUR    EQU   X'FC'
*
PRM      EQU   X'08'
LAST     EQU   X'80'
IX       EQU   X'04'
STRG     EQU   X'10'
SCISSOR  EQU   X'40'
LEVEL2   EQU   X'10'
OMIT     EQU   X'FB'
KEYED    EQU   X'20'
CORRE    EQU   X'10'
SUBR     EQU   X'02'
INCLUDE  EQU   X'04'
UPDATE   EQU   X'FF'
MEMSUB   EQU   X'80'
MEMSEQ   EQU   X'40'
SEQ      EQU   X'04'
XREALI   EQU   X'40'
REALX    EQU   X'C0'
REALY    EQU   X'0C'
YREALI   EQU   X'04'
XINTGI   EQU   X'10'
YINTGI   EQU   X'01'
POS      EQU   X'11'
X        EQU   X'01'
Y        EQU   X'10'
*BRANCHING CONDITION
PLUS     EQU   2
ZORM     EQU   12                       BRANCH ON ZERO OR MINUS
         EJECT
*
*THIS CODE ESTABLISHES ADDRESSABILITY FOR IFFAGA06, FOR THE GDSCB AND
*FOR THE WORKAREA. THE RETURN ARRAY IS SET TO ZERO, AND THE SAVE AREAS
*ARE CHAINED.
*
         USING *,15
         SAVE  (14,12)
         DROP  15
         LR    BASE,15                  LOAD CSECT BASE
         USING IFFAGA06,BASE
         LR    WORK,PARM                LOAD WORKAREA BASE
         USING WORKAREA,WORK
         XC    WKSWITCH(4),WKSWITCH
         XC    WKSPVSR(12),WKSPVSR
         L     PARM,WKPARM              LOAD PARAMETER LIST ADDRESS
         L     ERRCD,WKRTNCD            LOAD ADDRESS OF RETURN ARRAY
         XC    0(20,ERRCD),0(ERRCD)     ZERO RETURN ARRAY
         L     GDSREG,GDS(PARM)        GET ADDR OF ARG 1
         L     GDSREG,0(GDSREG)         ADDRESS OF GDSCB
         USING GDSCB,GDSREG
         LA    REGA,WKSAVE              CHAIN SAVE AREAS
         ST    REGA,8(SAVE)
         ST    SAVE,4(REGA)
         LR    SAVE,REGA                REG 13 CONTAINS SAVE AREA ADDR
         EJECT
*
*THE GDSCB PASSED IS CHECKED FOR VALIDITY, AND IF IT IS VALID, A
*SKELETON PARAMETER LIST FOR DATA GENERATION IS SET UP, WITH SWITCHES
*INITIALIZED TO MULTIPLE ENTRY, OUTPUT TYPE=VECTOR, STATUS=INCLUDE,
*OUTPUT=OPTIMIZED, FIRST ENTRY, NOT KEYED, NOT CORRVALLED, BEAM OFF.
*SWITCHES ARE SET IN THE KEY IF ELEMENT IS A SEQUENCE MEMBER AND/OR
*PART OF A BUFFER SUBROUTINE.
*
         C     GDSREG,GDSGDSCB
         BNE   AGAERR10                 BRANCH IF INVALID GDSCB
         MVC   WKSWITCH+2(1),GDSDATMD   SAVE DATA MODE SWITCH
         MVC   WKXLAST(8),GDSXLAST      SAVE X-Y LAST VALUE
         MVC   WKXCURR(4),GDSXCURR
         XC    WKADDR(68),WKADDR        ZERO PARAMETER FIELDS
         MVC   WKBITS,BITS              MOVE IN OPTION SWITCHES,
         ST    GDSREG,WKGDS             GDSCB ADDRESS, AND
         ST    ERRCD,WKRTN              RETURN ARRAY ADDRESS INTO
*                                       PARAMETER LIST
         TM    GDSFLAGS,SUBR
         BZ    AGAREQ05                 BRANCH IF NOT GENERATING SUBR
         OI    WKBITS+3,MEMSUB          SET SWITCH IN KEY
         BAL   RETREG,AGASDM10
AGAREQ05 TM    GDSFLAGS,SEQ
         BZ    AGAREQ07                 BRANCH IF NOT PART OF SEQUENCE
         OI    WKBITS+3,MEMSEQ          SET SWITCH IN KEY          9326
         EJECT
*
*REQUIRED PARAMETERS (TABLE, TEXT, COUNT AND HEIGHT ) ARE CHECKED
*FOR PRESENCE.
AGAREQ07 TM    GDS(PARM),LAST
         BO    AGAERR00                 BRANCH IF REQ PARMS NOT PRESENT
         TM    TAB(PARM),LAST
         BO    AGAERR00                 BRANCH IF REQ PARMS NOT PRESENT
         TM    TEXT(PARM),LAST
         BO    AGAERR00                 BRANCH IF REQ PARMS NOT PRESENT
         TM    CT(PARM),LAST
         BO    AGAERR00                 BRANCH IF REQ PARMS NOT PRESENT
*
*CHECK FOR VALID TABLE IDENTIFIER
*
         CLC   NL(3,ERRCD),TAB+1(PARM)
         BE    AGAERR20                 BRANCH IF TAB NULL- ERROR
         L     REGA,TAB(PARM)
         L     REGA,0(REGA)             PICK UP TABLE IDENT
         LTR   REGA,REGA
         BC    ZORM,AGAERR20            BRANCH IF ZERO OR NEGATIVE
         C     REGA,ONEH
         BNL   AGAERR20                 BRANCH IF GREATER THAN 99
         ST    REGA,WKDBL               SAVE ID
*
*
         CLC   NL(3,ERRCD),TEXT+1(PARM)
         BE    AGAERR30                 BRANCH IF TEXT ARRAY NULL-ERROR
*
*CHECK COUNT
*
         CLC   NL(3,ERRCD),CT+1(PARM)
         BE    AGAERR40                 BRANCH IF COUNT NULL- ERROR
         L     COUNT,CT(PARM)
         L     COUNT,0(COUNT)           PICK UP CHARACTER COUNT
         LTR   COUNT,COUNT
         BZ    AGARET10                 RETURN IF COUNT ZERO
         BM    AGAREQ90                 BRANCH IF COUNT NEG= 1 CHAR
*                                        PER WORD IN TEXT ARRAY
*
*THIS SECTION CHECKS THE PARAMETERS HEIGHT, WIDTH, SPACING, AND
*ORIENTATION.  IF THEY ARE NOT ALL PRESENT, DEFAULT VALUES ARE
*INITIALIZED. THESE PARAMETERS ARE ALL REAL VALUES.
*
AGAREQ10 CLC   NL(3,ERRCD),HGT+1(PARM)
         BE    AGAERR50                 BRANCH IF HEIGHT NULL-ERROR
         L     REGA,HGT(PARM)           ADDRESS OF HEIGHT
         LE    FLT4,0(REGA)             HEIGHT
         CE    FLT4,EIGHTH              MINIMAL VALUE=1/8 INCH
         BL    AGAERR50                 BRANCH IF TOO SMALL-ERROR
         EJECT
*
*FLOATING POINT REGISTER 4 CONTAINS THE HEIGHT IN INCHES
*CONVERT HEIGHT (IN INCHES) OF 8*8 MATRIX INTO DELTAY IN RASTER UNITS
*PER POINT.
         LER   FLT2,FLT4
         ME    FLT2,RAST                MULTIPLY HGT(IN) BY 4096 AND
         DE    FLT2,INCH                 DIVIDE BY 96 TO GET DELTA Y
         STE   FLT2,WKHGT               SAVE DELTA Y / POINT ON MATRIC
         TM    HGT(PARM),LAST
         BO    AGAREQ80                 BRANCH IF NO MORE PARAMETERS
         CLC   NL(3,ERRCD),WIDTH+1(PARM)
         BE    AGAREQ85                 BRANCH IF WIDTH NULL
         L     REGA,WIDTH(PARM)         ADDRESS OF WIDTH
*
*CONVERT WIDTH (IN INCHES) OF 8*8 MATRIX INTO DELTA X IN RASTER UNITS
*PER POINT
*
         LE    FLT2,0(REGA)
         CE    FLT2,EIGHTH
         BL    AGAERR60                 BRANCH IF HGT LESS THAN 1/8 IN
AGAREQ20 ME    FLT2,RAST                MULTIPLY WIDTH(IN) BY 4096 AND
         DE    FLT2,INCH                 DIVIDE BY 96 TO GET DELTA X
         STE   FLT2,WKWIDTH             SAVE DELTA X / POINT ON MATRIC
         TM    WKSWITCH+3,LAST
         BO    AGAREQ75                 BRANCH IF NO PARMS
         TM    WIDTH(PARM),LAST
         BO    AGAREQ70                 BRANCH IF WIDTH=LAST PARM
         CLC   NL(3,ERRCD),SPACING+1(PARM)
         BE    AGAREQ75                 BRANCH IF SPACING NULL
*
*CONVERT SPACING FROM CHARACTER CENTER TO CHARACTER CENTER (IN INCHES)
*INTO SPACING IN RASTER UNITS
         L     REGA,SPACING(PARM)       ADDRESS OF CHARACTER SPACING
         LE    FLT4,0(REGA)
AGAREQ30 ME    FLT4,RAST                MULTIPLY SPACING(IN) BY 4096
         DE    FLT4,ONE2                 AND DIVIDE BY 12 TO GET RUS
         STE   FLT4,WKSPACE             SAVE SPACING
         EJECT
*
*CHECK FOR ORIENTATION PARAMETERS PASSED
*
         TM    WKSWITCH+3,LAST
         BO    AGAREQ65                 BRANCH IF REACHED END OF PARMS
         TM    SPACING(PARM),LAST
         BO    AGAREQ60                 BRANCH IF SPACING WAS LAST PARM
         LA    REGB,4                   SET UP LOOP FOR CHECKING ORIENT
         CLC   NL(3,ERRCD),ORIENT+1(PARM)
         BE    AGAREQ65                 BRANCH IF ORIENTATION NULL
         L     REGA,ORIENT(PARM)        PICK UP ADDR OF ARRAY
AGAREQ40 LE    FLT2,0(REGA)
         CE    FLT2,ONEA
         BH    AGAERR80                 BRANCH IF TOO LARGE-ERROR
         CE    FLT2,ONEB
         BL    AGAERR80                 BRANCH IF TOO LOW-ERROR
         BCT   REGB,AGAREQ50
*
*IF ALL ARE CORRECT, MOVE INTO WORK AREA
*
         L     REGA,ORIENT(PARM)
         MVC   WKSIN(16),0(REGA)
         B     AGAOPT10
AGAREQ50 LA    REGA,4(REGA)             UPDATE POINTER AND
         B     AGAREQ40
         EJECT
*
*SET SINE AND COSINE VALUES FOR CHARACTER AND STRING DEFAULTS
AGAREQ60 OI    WKSWITCH+3,LAST          SET SWITCH- NO MORE PARMS
AGAREQ65 MVC   WKSIN(4),A0             CHARACTER ORIENTATION
         MVC   WKCOS(4),ONEA           *
         MVC   WKSINS(4),A0            STRING ORIENTATION
         MVC   WKCOSS(4),ONEA          *
         B     AGAOPT10
         SPACE 2
*SET SPACE EQUAL TO ONE AND ONE THIRD HEIGHT
*
AGAREQ70 OI    WKSWITCH+3,LAST          SET SWITCH-NO MORE PARAMETERS
AGAREQ75 ME    FLT4,ONEONE3             SPACING DEFAULT=1-1/3 * HEIGHT
         B     AGAREQ30
*
*
         SPACE 2
*
*SET WIDTH = TWO-THIRDS HEIGHT
*
AGAREQ80 OI    WKSWITCH+3,LAST          SET SWITCH SHOWING NO MORE PARM
AGAREQ85 LER   FLT2,FLT4
         ME    FLT2,TWO3RD              WIDTH= 2/3 HEIGHT
         CE    FLT2,EIGHTH
         BNL   AGAREQ20                 BRANCH IF WIDTH AT LEAST 1/8 IN
         LE    FLT2,EIGHTH              SET HEIGHT TO 1/8 INCH
         B     AGAREQ20
         SPACE 2
AGAREQ90 OI    WKSWITCH+3,IX            SET SWITCH FOR 1 CHAR/WORD
         LPR   COUNT,COUNT              SET COUNT POSITIVE
         B     AGAREQ10
         EJECT
*
*WHEN THIS SECTION IS ENTERED THE REQUIRED PARAMETERS HAVE BEEN
*CHECKED AND THE NECESSARY DEFAULT CONDITIONS HAVE BEEN SET UP.
*
*TEST CORRVAL AND KEY FOR VALIDITY
*
AGAOPT10 TM    WKSWITCH+3,LAST
         BO    AGADAT10                 BRANCH IF PARM LIST ENDED
         TM    ORIENT(PARM),LAST
         BO    AGADAT10                 BRANCH IF ORIENT WAS LAST PARM
         CLC   NL(3,ERRCD),COR+1(PARM)
         BE    AGAOPT15                 BRANCH IF CORRVAL NOT PASSED
         TM    GDSFLAGS,LEVEL2
         BO    AGAOPT15                 BRANCH IF LEVEL 2 CORRVAL
         L     REGA,COR(PARM)           LOAD ADDRESS OF CORRVAL
         MVC   WKCORVL,0(REGA)          PLACE CORRVAL IN PARM LIST
         OI    WKBITS+2,CORRE           SET CORRVAL SWITCH IN PARM LIST
AGAOPT15 TM    COR(PARM),LAST
         BO    AGADAT10                 BRANCH IF NO MORE PARAMETERS
         CLC   NL(3,ERRCD),KEY+1(PARM)
         BE    AGAOPT20                 BRANCH IF KEY NOT PASSED
         MVC   WKKEY,KEY(PARM)          PLACE ADDRESS OF KEY IN PARM
*                                        LIST
         TM    GDSFLAGS,LEVEL2
         BO    AGAOPT20                 BRANCH IF LEVEL 2 KEY
         OI    WKBITS+2,KEYED           OTHERWISE SET KEY SWITCH IN
*                                       PARM LIST
AGAOPT20 TM    KEY(PARM),LAST
         BO    AGADAT10                 BRANCH IF NO MORE PARAMETERS
         CLC   NL(3,ERRCD),GEN+1(PARM)
         BE    AGAOPT25                 BRANCH IF GENCODE NOT PASSED
         EJECT
*
*TEST FOR VALID GENCODE       CODE=1    STATUS 'INCLUDE'
*                             CODE=2    STATUS 'OMIT'
*                             CODE=3    STATUS 'UPDAT'
         L     REGA,GEN(PARM)           PICK UP CODE ADDRESS
         L     REGA,0(REGA)             PICK UP ACTUAL CODE
         C     REGA,ONE
         BE    AGAOPT25                 BRANCH IF STATUS 'INCLUDE'
*                                       (SWT ALREADY SET IN PARM LIST)
         CLC   WKCORVL(8),ZERO          CHECK FOR CORRVAL AND/OR KEY
         BZ    AGAERR90                 BRANCH IF STATUS NOT INCLUDE
*                                        AND ELEMENT NOT KEYED OR
*                                        CORRVALLED--ERROR
         C     REGA,TWO
         BNE   AGAOPT30
         TM    GDSFLAGS,LEVEL2          BRANCH IF LEVEL 2 AND 'OMIT'
         BO    AGAERR90
         NI    WKBITS,OMIT               STATUS SPECIFIED-ERROR
AGAOPT25 TM    WKBITS+2,CORRE
         BZ    AGAOPT55                 BRANCH IF NOT CORRELATED
         CLC   WKCORVL,ZERO
         BE    AGAERR95                 BRANCH IF CORRVAL=0 - ERROR
         B     AGAOPT55
         EJECT
*
*THIS SECTION IS ENTERED WHEN STATUS 'UPDATE'  IS SPECIFIED
*
AGAOPT30 C     REGA,THREE
         BNE   AGAERR90                 BRANCH IF NOT 'UPDATE'- ERROR
         TM    GDSFLAGS,SUBR
         BO    AGAERR00                 BRANCH IF UPDATE WHEN GENERAT-
*                                        ING SUBROUTINE- ERROR
         TM    GDSFLAGS,LEVEL2
         BO    AGAOPT45                 BRANCH IF LEVEL 2 TO SET KEY
         TM    WKBITS+2,KEYED
         BZ    AGAOPT50                 BRANCH IF ELEMENT NOT KEYED
*
*PREPARE PARAMETERS FOR KEY SEARCH
*
         L     REGA,KEY(PARM)           LOAD KEY ADDRESS
         ST    REGA,WKKADDR             AND PUT IN PARAMETER LIST
         LA    REGA,TWO                 CODE FOR SEARCH ON KEY
AGAOPT35 ST    REGA,WKCODE
         ST    GDSREG,WKGDS1            ADDRESS OF GDSCB
         LA    PARM,WKGDS1
         L     REGA,GDSGTMCB       GET POINTER TO GTMCB            000A
         L     REGA,4(REGA)        GET POINTER TO GSPCB            000A
         L     REGA,FE(REGA)       GET POINTER TO STATUS TABLE     000A
         L     BRANCH,ETE(REGA)    GET ADRS OF KEY TABLE MGMT      000A
         BALR  RETREG,BRANCH       BRANCH TO KEY TABLE MGMT        000A
*
         LTR   BRANCH,BRANCH            TEST RETURN CODE
         BNE   AGAERR00                 BRANCH IF INVALID KEY
         MVC   WKADDR,0(PARM)           MOVE KEY FIELDS INTO PARM LIST
         OC    WKBITS+3(1),7(PARM) CHECK KEY FOR SUBRTN STATUS   A30726
         BZ    AGAOPT36                 BRANCH IF NOT PART OF SUBROUT
         BAL   RETREG,AGASDM10
AGAOPT36 TM    4(PARM),INCLUDE
         BO    AGAOPT39                 BRANCH IF INCLUDE STATUS
         NI    WKBITS,OMIT              TURN OFF INCLUDE SWITCH
AGAOPT39 ST    PARM,WKSTORAD           SAVE KEY ADDR IN KEY TABLE
AGAOPT43 MVI   WKSWITCH,UPDATE          SET UPDATE SWITCH
         L     PARM,WKPARM              RESTORE PARM REGISTER
         B     AGAOPT55
         EJECT
*
*ENTERED WHEN UPDATE ON LEVEL 2 KEY
*
AGAOPT45 L     REGA,KEY(PARM)           LOAD KEY ADDRESS
         MVC   WKADDR,0(REGD)           PLACE KEY IN PARM LIST
         B     AGAOPT43
*
AGAOPT50 CLC   WKCORVL,ZERO             BAD PARAMETER COMBINATION
         BE    AGAERR00
*
*PREPARE FOR SEARCH ON CORRVAL
         LA    REGA,WKCORVL             LOAD CORRVAL ADDRESS
         ST    REGA,WKKADDR             AND PUT IN PARAMETER LIST
         LA    REGA,FIVE                CODE FOR SEARCH ON CORRVAL
         B     AGAOPT35
         EJECT
*
*THIS SECTION CHECKS FOR THE X AND Y PARAMETERS. AN ERROR RETURN IS
*MADE IF ONLY ONE OF THESE PARAMETERS IS PASSED
*
AGAOPT55 TM    GEN(PARM),LAST
         BO    AGADAT10                 BRANCH IF NO MORE PARAMETERS
         CLC   NL(3,ERRCD),XCOR+1(PARM)
         BE    AGAOPT60                 BRANCH IF X NULL
         OI    WKSWITCH+1,X             SET SWITCH, X PRESENT
AGAOPT60 TM    XCOR(PARM),LAST
         BO    AGAOPT65                 BRANCH IF LAST
         CLC   NL(3,ERRCD),YCOR+1(PARM)
         BE    AGAOPT65                 BRANCH IF Y NULL
         OI    WKSWITCH+1,Y             SET SWITCH, Y PRESENT
AGAOPT65 TM    WKSWITCH+1,POS
         BM    AGAERR00                 ERROR IF ONE COORD PASSED
         B     AGADAT10
         EJECT
*THIS SECTION LOADS THE STROKE TABLE AND SETS UP FOR THE ACTUAL
*GENERATION OF DATA.
*
AGADAT10 L     REGA,WKDBL               PICK UP TABLE ID
         L     GTMREG,GDSGTMCB          PICK UP ADDRESS OF GTMCB
         USING GTMCB,GTMREG
         L     GSPREG,GTMGSPCB          PICK UP ADDRESS OF GSPCB
         DROP  GTMREG
         USING GSPCB,GSPREG
         L     REGB,GSPSTRTB            LOAD ADDRESS OF STROKE TAB
*
*SET UP LOOP TO CHECK WHETHER STROKE TABLE LOADED
*
         SR    REGC,REGC                INITIALIZE REG TO CONTAIN PTR
AGADAT20 LTR   REGB,REGB
         BZ    AGADAT80                 BRANCH IF NO MORE TABLES
         C     REGA,ID(REGB)            CHECK FOR ID EQUAL
         BE    AGAGEN10                 BRANCH IF STROKE TABLE FOUND
         LR    REGC,REGB                SAVE POINTER TO CURRENT TABLE
         L     REGB,NEXTAB(REGB)        PICK UP CHAIN ADDRESS
         B     AGADAT20
*
*LOAD THE STROKE TABLE AND CHAIN IT TO OTHERS
* TABLE CODE CONVERTED TO EBCDIC
*
AGADAT80 MVC   WKNAME(8),FIXNAME        SET UP 'GSP     ' IN WORK AREA
         CVD   REGA,WKDBL               PACKED DECIMAL
         UNPK  WKNAME+3(2),WKDBL+6(2)   STORE EBCIDIC NAME
         OI    WKNAME+4,XSIGN
         LOAD  EPLOC=WKNAME
         LR    REGB,RZERO               ADDRESS OF STROKE TABLE
         ST    REGA,ID(REGB)            PUT ID IN STROKE TABLE
         XC    NEXTAB(4,REGB),NEXTAB(REGB) ZERO CHAIN FIELD
         LTR   REGC,REGC
         BZ    AGADAT90
         ST    REGB,NEXTAB(REGC)        CHAIN STROKE TABLES
         B     AGAGEN10
*
*IF FIRST STROKE TABLE, ADDRESS IS ENTERED IN GSPCB
*
AGADAT90 ST    REGB,GSPSTRTB
         DROP  GSPREG
         EJECT
*AFTER ALL PARAMETERS ARE CHECKED, AND THE STROKE TABLE IS LOCATED,
*THE CONVERT RUUTINE IS LOADED,AND ITS ENTRY POINT ADDRESS IS PLACED
*IN THE STATUS TABLE. IF THE X AND Y COORDINATES HAVE BEEN PASSED,
*THEY ARE SCALED, AND A BLANKED LINE IS GENERATED.
*
*
AGAGEN10 L     REGA,STAT(ERRCD)
         L     REGA,CVRT(REGA)         CHECK IF CNVT ALREADY LOADED
         LTR   REGA,REGA
         BNE   AGAGEN15                BRANCH IF ALREADY LOADED
         L     REGA,16                 CVT
         L     REGA,CVTLINK(REGA)      LINK LIB DCB
*        LOAD EP=IFFAHA15,DCB=(REGA)
         LOAD  EP=IFFAHA15
         L     REGA,STAT(ERRCD)
         ST    RZERO,CVRT(REGA)        STORE ENTRY POINT ADDREXS
*
AGAGEN15 TM    WKBITS+3,MEMSUB
         BO    AGAGEN70                 BRANCH IF PART OF BUFFER SUBR,
*                                        OUTPUT INCREMENAL
*TEST FOR OUTPUT DATA MODE
*
         TM    GDSCURMD,OPT
         BO    AGAGEN20                 BRANCH IF OPTIMIZED OUTPUT-
*                                        SWITCH ALREADY SET
         TM    GDSCURMD,INC
         BO    AGAGEN70                 BRANCH IF INCREMENTAL MODE
         XI    WKBITS,ABSSW             SET SWITCH TO ABSOLUTE
*
*
AGAGEN20 TM    WKBITS+3,MEMSUB
         BO    AGAGEN90                BRANCH IF BUFFER SUBR
AGAGEN22 CLI   WKSWITCH,UPDATE
         BE    AGAGEN75                 BRANCH IF UPDATE
         L     REGD,GDSAOACB            GET OACB ADDRESS
         L     REGD,CURRLOG(REGD)       GET LOGICAL START AND STORE
         STH   REGD,WKADDR+2              IN PARM LIST
         EJECT
*
*REG B CONTAINS POINTER TO STROKE TABLE
*REG COUNT CONTAINS COUNT OF NUMBER OF CHARACTERS
*REG E IS INITIALIZED AS AN INDEX TO THE TEXT ARRAY AND
*REGC IS INITIALIZED TO POINT TO THE FIRST SYMBOL IN THE TEXT ARRAY.
*
AGAGEN25 L     PARM,WKPARM              REINITIALIZE POINTER TO PARM
         L     REGC,TEXT(PARM)         PICK UP POINTER TO TEXT
         LA    REGB,ADDR(REGB)          POINTER TO FIRST ENTRY IN
*                                        STROKE TABLE
         LA    REGE,1                   SET UP INDEX
         TM    WKSWITCH+3,IX
         BZ     AGAGEN29
         LA    REGE,4                   SET INDEX TO 4
         LA    REGC,3(REGC)             POINT TO FIRST CHARACTER
AGAGEN29 TM    WKSWITCH+1,POS
         BZ    AGAGEN65                BRANCH IF NO POSITIONING VECTOR
         L     REGA,XCOR(PARM)          PICK UP X COORDINATE
         L     REGA,0(REGA)
         TM    GDSDATMD,XABS
         BZ    AGAGEN80                 BRANCH IF X INCREMENTAL
         ST    REGA,WKXABS
AGAGEN30 L     REGA,YCOR(PARM)          PICK UP Y COORDINATE
         L     REGA,0(REGA)
         TM    GDSDATMD,YABS
         BZ    AGAGEN85                 BRANCH IF Y INCREMENTAL
         ST    REGA,WKYABS
         EJECT
*
*CALL SCALE TO SCALE THE X AND Y COORDINATES
*
AGAGEN35 LA    PARM,WKGDS
         L     BRANCH,STAT(ERRCD)       ADDRESS OF STATUS TABLE
         L     BRANCH,SCALE(BRANCH)     ADDRESS OF SCALE
         BALR  RETREG,BRANCH
         LTR   BRANCH,BRANCH
         BNE   AGARES10                 BRANCH IF SCALE ERROR-RESET
         LA    PARM,WKXABS
         LA    REGA,WKYABS
         BAL   RETREG,AGAFLT10
         LA    RETREG,AGATXT30
         B     AGAGDO25                CO CALL SCISSOR AND DATA GEN
AGAGEN65 LA    PARM,GDSXLAST
         LA    REGA,GDSYLAST
         BAL   RETREG,AGAFLT10         CONVERT BEAM POS TO REAL NUM
         MVC   WKENTCT(4),ONE           INITIALIZE ENTRY COUNT
         B     AGATXT30
AGAGEN70 XI    WKBITS,INCSW
         B     AGAGEN20
         EJECT
*
*GET GDOA'S FOR UPDATE
*
AGAGEN75 L     REGD,16                  CVT
         L     REGD,CVTLINK(REGD)       LINK LIB DCB
         LA    PARM,WKADDR
*
*        LINK  EP=IFFAHA13,DCB=(REGD),MF=(E,(1)),SF=(E,WKSPVSR)
         LINK  EP=IFFAHA13,MF=(E,(1)),SF=(E,WKSPVSR)
         LTR   BRANCH,BRANCH
         BNE   AGAERR97
         B     AGAGEN25
*
AGAGEN80 ST    REGA,WKXINCR
         B     AGAGEN30
*
AGAGEN85 ST    REGA,WKYINCR
         B     AGAGEN35
*
*SET GDSXLAST,GDSYLAST,GDSXCURR,AND GDSYCURR TO ZERO WHEN GENERATING
*OR UPDATING A BUFFER SUBROUTINE.
AGAGEN90 MVC   GDSXLAST(8),ZERO        SET CURRENT POSITION TO ZERO
         MVC   GDSXCURR(4),ZERO        BEAM POSITION TO ZERO
         B     AGAGEN22
         EJECT
*THIS SECTION IS ENTERED EACH TIME A SYMBOL IS TO BE GENERATED.
*THE SPACE TO THE NEXT CHARACTER IS COMPUTED AND SAVED.
*  SPACE IN THE X DIRECTION= SPACE*COS THETA + CURRENT X
*  SPACE IN THE Y DIRECTION= SPACE*SIN THETA + CURRENT Y
*
AGATXT30 LE    FLT2,WKSPACE
         ME    FLT2,WKCOSS
         AE    FLT2,WKXNOW
         STE   FLT2,WKXNOW              X COR FOR NEXT CHAR
         LE    FLT2,WKSPACE
         ME    FLT2,WKSINS
         AE    FLT2,WKYNOW              Y COR FOR NEXT CHARACTER
         STE   FLT2,WKYNOW
*
*REG D IS INITIALIZED TO POINT TO THE STROKES. IF NO STROKES ARE
*DEFINED FOR THE SYMBOL, NO DATA IS GENERATED, AND THE NEXT
*SYMBOL IS PROCESSED.
*
AGATXT35 SR    REGD,REGD
         IC    REGD,0(REGC)             PICK UP SYMBOL
         SLA   REGD,2                   MULTIPLY BY 4 TO ALIGN TO WORD
         L     REGD,0(REGD,REGB)        PICK UP POINTER TO STROKES
         LTR   REGD,REGD
         BZ    AGAGOT40
*
*FIRST STROKE DETERMINED FROM POINT 63,63 OF 128*128 MATRIX
*
         MVC   WKXLGRID(4),A3           INITIALIZE GRID POSITION
         MVC   WKYLGRID(4),A3
*
*
*THIS SECTION CONVERTS STROKE DEFINITIONS FROM THE STROKE TABLE INTO
*ACTUAL  X AND Y COORDINATES.
*STROKE TABLE FORMAT- 2 BYTES/STROKE
*                     BYTE 0- BIT0 = 1-BLANKED STROKE
*                                  = 0-UNBLANKED STROKE
*                             BITS 1-7= INTEGER FROM 0-127 INDICATING
*                                  X COORD ON 128*128 MATRIX
*                     BYTE 1- BIT0 = 1-LAST STROKE
*                                  = 0-NOT LAST STROKE
*
*REGISTER 0 AND 1 ARE USED AS WORK REGISTERS
*
AGATXT37 LH    RZERO,0(REGD)
         TM    0(REGD),BLANK
         BO    AGATXT90                 BRANCH IF BLANKED STROKE
         OI    WKBITS+2,BEAMON
AGATXT45 N     RZERO,MASK               TURN OFF SWITCHES
         EJECT
*
*CONVERT STROKES TO REAL VALUES
*
         MVC   CONCON2(4),CCON2
         STC   RZERO,CONCON2+1
         CLI   CONCON2+1,OFF
         BE    AGATXT48                 BRANCH IF ZERO
         LE    FLT4,CONCON2
         AE    FLT4,ZERO                NORMALIZE FLOATING PT Y
AGATXT46 SRL   RZERO,8                  MOVE OUT Y COOR
         STC   RZERO,CONCON2+1
         CLI   CONCON2+1,OFF
         BE    AGATXT49
         LE    FLT0,CONCON2
         AE    FLT0,ZERO
AGATXT47 LER   FLT6,FLT4
         LER   FLT2,FLT0                SAVE COPY
         SE    FLT2,WKXLGRID
         STE   FLT0,WKXLGRID           SAVE LAST POINT
         ME    FLT2,WKWIDTH             GET CHANGE IN X IN RASTER UNITS
         SE    FLT4,WKYLGRID
         STE   FLT6,WKYLGRID
         ME    FLT4,WKHGT               GET CHANGE IN Y IN RASTER UNITS
         LER   FLT0,FLT2               X'S IN REGS 0 AND 2
         LER   FLT6,FLT4               Y'S IN REGS 4 AND 6
         EJECT
*
*COMPUTE X INCREMENT IN RASTER UNITS, AND SAVE IT
*
         ME    FLT4,WKSIN
         ME    FLT0,WKCOS
         SER   FLT0,FLT4
         STE   FLT0,WKXINCR
*
*COMPUTE Y INCREMENT IN RASTER UNITS, AND SAVE IT
*
         ME    FLT6,WKCOS
         ME    FLT2,WKSIN
         AER   FLT2,FLT6
         STE   FLT2,WKYINCR
*
*CONVERT X AND Y INCREMENT FROM REAL TO INTEGER VALUES, AND COMPUTE
*THE ABSOLUTE BEAM POSITIONS.
*
         SR    REGA,REGA               SET UP LOOP CONTROL AND INDES
AGATXT50 L     PARM,WKXINCR(REGA)       PICK UP REAL VALUE
         L     BRANCH,STAT(ERRCD)       ADDRESS OF STATUS TABLE
         L     BRANCH,CVRT(BRANCH)      ADDRESS OF CONVERT
         BALR  RETREG,BRANCH
         LTR   BRANCH,BRANCH            BRANCH IF CONVERSION ERROR
         BNE   AGARES10
         ST    PARM,WKXINCR(REGA)      SAVE INTEGER INCREMENT
         A     PARM,GDSXLAST(REGA)     COMPUTE ABSOLUTE VALUE
         ST    PARM,WKXABS(REGA)       AND PUT IN PARAMETER LIST
         LTR   REGA,REGA
         BP    AGATXT65                 BRANCH IF X AND Y FINISHED
         LA    REGA,4                  SET UP NEW INDEX
         B     AGATXT50
         EJECT
*
*CALL SCISSOR AND DATA GENERATOR TO ENTER DATA IN GDOA
*
AGATXT65 BAL   RETREG,AGAGDO25
         TM    1(REGD),LASSTR
         BO    AGAGOT10                BRANCH IF LAST STROKE IN
*                                       SYMBOL JUST GENERATED.
         LA    REGD,2(REGD)             UPDATE POINTER TO NEXT STROKE
         B     AGATXT37
*
*TURN OFF BEAM SWITCH FOR BLANKED LINE
*
AGATXT75 XI    WKBITS,MULT
         B     AGAGOT18
*
AGATXT90 NI    WKBITS+2,BOFF            TURN OFF BEAM SWIT
         B     AGATXT45
*
AGATXT48 LE    FLT4,ZERO
         B     AGATXT46
*
AGATXT49 LE    FLT0,ZERO
         B     AGATXT47
         EJECT
*IF THE LAST STROKE IN A CHARACTER IS GENERATED, A BLANKED VECTOR
*IS GENERATED TO THE CENTER OF THE NEXT CHARACTER, AND THE CHARACTER
*COUNT IS DECREMENTED BY ONE. IF NO MORE SYMBOLS REMAIN TO BE
*GENERATED, THE KEY IS COMPLETED AND CONTROL IS RETURNED TO THE
*CALLING PROGRAM.
*REGC CONTAINS A POINTER TO THE TEXT ARRAY
*REGE CONTAINS THE INDEX TO THE TEXT ARRAY
*
AGAGOT10 SR    REGA,REGA
AGAGOT15 L     PARM,WKXNOW(REGA)
         L     BRANCH,STAT(ERRCD)      ADDRESS OF STATUS TABLE
         L     BRANCH,CVRT(BRANCH)     ADDRESS OF CONVERT
         BALR  RETREG,BRANCH
         LTR   BRANCH,BRANCH
         BNE   AGARES10                BRANCH IF CONVERSION ERROR
         ST    PARM,WKXABS(REGA)       SAVE INTEGER VALUE
         S     PARM,GDSXLAST(REGA)     COMPUTE INCREMENT
         ST    PARM,WKXINCR(REGA)      AND PUT IN PARAMETER LIST
         LTR   REGA,REGA
         BP    AGAGOT17                BRANCH IF FINISHED
         LA    REGA,4                  SET UP NEW INDES
         B     AGAGOT15                CONTINUE LOOP
*
AGAGOT17 NI    WKBITS+2,BOFF           SET BEAM SWITCH OFF
         C     COUNT,ONE
         BNE   AGAGOT18                BRANCH IF NOT LAST
         TM    WKBITS+2,LASTT
         BZ    AGATXT75                 BRANCH IF NO DATA GENERATED YET
         OI    WKBITS+2,LASTT           SET LAST PASS SWITCH ON
*
AGAGOT18 BAL   RETREG,AGAGDO25         GO CALL SCISSOR AND DATA GEN
AGAGOT20 AR    REGC,REGE               UPDATE POINTER TO TEXT
         LA    REGD,1
         A     REGD,WKENTCT
         ST    REGD,WKENTCT             UPDATE ENTRY COUNT
         BCT   COUNT,AGATXT30
         TM    WKBITS+2,LASTT
         BZ    AGAERR98                 NO DATA GENERATION
         BO    AGAGOT50                 LAST ENTRY SCISSORED
         CLI   WKSWITCH,UPDATE
         BE    AGACOM10
         EJECT
*
*PREPARE KEY
         L     COUNT,GDSAOACB
         L     COUNT,CURRLOG(COUNT)     GET CURRENT LOGICAL ADDRESS
         SH    COUNT,WKADDR+2           COMPUTE ELEMENT LENGTH
         LTR   COUNT,COUNT
         BZ    AGAERR98                 ERROR IF NO DATA GENERATED
         STH   COUNT,WKADDR             PLACE LENGTH IN KEY
         L     COUNT,WKKEY
         LTR   COUNT,COUNT
         BZ    AGAEND10                 BRANCH IF NO USER VARIABLE
         MVC   0(4,COUNT),WKADDR        PLACE KEY IN USER VARIABLE
AGAEND10 TM    WKBITS+2,KEYED+CORRE
         BZ    AGARET10                 BRANCH IF NOT KEYED OR CORRE
*
*PREPARE LINK TO KEY MANAGEMENT TO ADD KEY
*
         LA    REGA,ONE                 CODE FOR ADDING KET TO TABLE
         ST    REGA,WKCODE
         LA    REGA,WKADDR              KEY ADDRESS
         ST    REGA,WKKADDR
         ST    GDSREG,WKGDS1            ADD OF GDSCB
         LA    PARM,WKGDS1
         L     REGA,16                  CVT
         L     REGA,CVTLINK(REGA)       LINK LIB DCB
*        LINK  EP=IFFAHA03,DCB=(REGA),MF=(E,(1)),SF=(E,WKSPVSR)
         LINK  EP=IFFAHA03,MF=(E,(1)),SF=(E,WKSPVSR)
         LTR   BRANCH,BRANCH
         BNE   AGAERR97                 BRANCH IF NOT ENOUGH STORAGE
         EJECT
AGARET10 CLI   WKSWITCH,UPDATE
         BNE   AGARET20                 BRANCH IF NOT UPDATE
         TM    GDSFLAGS,LEVEL2
         BO    AGARET20                BRANCH IF LEVEL 2-NO KEY TABLE
         L     PARM,WKSTORAD
         MVC   4(4,PARM),WKBITS        MOVE IN NEW KEY SWITCHES
         TM    WKBITS+2,CORRE
         BZ    AGARET20                 BRANCH IF NOR CORRELATED
         MVC   8(4,PARM),WKCORVL        MOVE NEW CORRVAL INTO KEY
AGARET20 MVC   GDSDATMD(1),WKSWITCH+2   RESTORE DATA MODE SWITCH
         TM    WKBITS+3,MEMSUB
         BZ    AGARET30                BRANCH IF NOT SUBROUTINE
         MVC   GDSXLAST(8),WKXLAST     RESTORE REAM POINTERS
         MVC   GDSXCURR(4),WKXCURR
AGARET30 L     SAVE,4(SAVE)
         RETURN (14,12),T
         EJECT
*
*THIS SECTION IS ENTERED WHEN A SYMBOL IS REFERENCED WHICH HAS NO
*STROKES DEFINING IT.
*
AGAGOT40 C     COUNT,ONE
         BNE   AGAGOT55                 BRANCH IF NOT LAST CHARACTER
         TM    WKBITS+2,LASTT
         BZ    AGAERR98                 ERROR IF NO DATA GENERATED
         OI    WKBITS+2,LASTT           SET SWITCH SO MAKE LAST ENTRY
         B     AGAGOT20
AGAGOT50 OI    WKBITS+2,REPONLY         SET FLAG TO GENERATE REPOS VECT
         XC    WKDATA1(32),WKDATA1
         MVC   WKXABS+2(2),GDSXCURR     PLACE CURRENT BEAM POSITION
         MVC   WKYABS+2(2),GDSYCURR     FROM GDS INTO PARAM LIST
         LA    COUNT,1                  RESET COUNT REG
         LA    RETREG,AGAGOT20
         ST    RETREG,WKTEMP            SET RETURN ADDRESS
         B     AGAGDO40                 CALL DATA GENERATOR
*
AGAGOT55 AR    REGC,REGE               UPDATE POINTR
         S     COUNT,ONE               DECREMENT COUNT
         LA    REGD,1
         A     REGD,WKENTCT
         ST    REGD,WKENTCT             UPDATE ENTRY COUNT
         B     AGATXT35
         EJECT
*
*CALL RESET IF ERROR IN CALL TO SCALE OR DATA GEN
*
*
AGARES10 MVC   GDSXCURR(4),WKXCURR
         MVC   GDSXLAST(8),WKXLAST
         CLI   WKSWITCH,UPDATE
         BE    AGARET20                BRANCH IF UPDATE - RESET NOT
*                                       NECESSARY
         MVC   WKDATA2(20),0(ERRCD)     SAVE RETURN ARRAY
         LA    REGA,GDSGDSCB            VAR HOLDING ADDRESS OF GDSCB
         ST    REGA,WKGDS
         LA    REGA,WKGDS               ADDRESS OF PARAMETER LIST
         ST    REGA,WKGDS1               STORED IN WORK AREA
         L     REGA,NULL(ERRCD)         NULL FOR CORRVAL IN PARM LIST
         ST    REGA,WKRTN
         LA    REGA,WKADDR              ADDRESS OF KEY IN PARM LIST
         ST    REGA,WKDATA1
         OI    WKDATA1,LAST             LAST PARM INDICATION
         ST    ERRCD,WKCODE             ERROR CODE IN PARM LIST
         LA    PARM,WKGDS1              ADDRESS OF WORK AREA
         L     REGA,16
         L     REGA,CVTLINK(REGA)       LINK LIB DCB
*        LINK  EP=IFFAFA12,DCB=(REGA),MF=(E,(1)),SF=(E,WKSPVSR)
         LINK  EP=IFFAFA12,MF=(E,(1)),SF=(E,WKSPVSR)
         MVC   0(20,ERRCD),WKDATA2      RESTORE RETURN ARRAY
         B     AGARET20
         EJECT
*
*THIS ROUTINE CALLS SCISSOR (IF SCISSOR OPTION IS SET) AND DATA
*GENERATION, AND CHECKS THE RETURN CODES.
*
*CALL SCISSOR IF SCISSOR OPTION SET
*
AGAGDO25 ST    RETREG,WKTEMP           SAVE RETURN ADDRESS
         TM    WKBITS+3,MEMSUB          TEST FOR BUFFER SUBROUTINE
         BO    AGAGDO85                BRANCH IF PART OF SUBROUTINE
         TM    GDSSCISS,NOSCISS
         BO    AGAGDO85                BRANCH IF NO SCISSORING
*
         LA    PARM,WKGDS
         L     BRANCH,STAT(ERRCD)       ADDRESS OF STATUS TABLE
         L     BRANCH,SCISS(BRANCH)     ADDRESS OF SCISSOR
         BALR  RETREG,BRANCH
         LTR   BRANCH,BRANCH
         BZ    AGAGDO35                BRANCH IF SCISSOR RETURN OK
         C     BRANCH,FOUR
         BE    AGARES10                 BRANCH IF STOP GENERATION
         B     AGAGDO45                OTHERWISE SKIP CALL TO DATA GEN
AGAGDO35 TM    WKBITS+2,LASTT
         BZ    AGAGDO40                 ALWAYS GENERATE FIRST VECTOR
         CLC   WKXINCR(8),ZERO          IF NO MOVEMENT
         BE    AGAGDO45
         EJECT
*
*CALL DATA GENERATOR
*
AGAGDO40 LA PARM,WKADDR
         L     BRANCH,STAT(ERRCD)
         L     BRANCH,DGEN(BRANCH)
         TM    WKBITS+2,LASTT     CK IF FIRST CALL TO DGEN       A29395
         BNZ   AGAGDO42             IF NO, USE LAST CALC POS     A29395
         MVC   WKXPREV(8),WKXLAST   IF YES, USE LAST BEAM POS    A29395
         OI    WKBITS+3,INC       SET ADJUST INCR FLAG           F40704
AGAGDO42 BALR  RETREG,BRANCH
         LTR   BRANCH,BRANCH
         BNE   AGARES10                BRANCH IF ERROR RETURN
         XC    WKDATA1(16),WKDATA1      ZERO DATA FIELDS
         NI    WKBITS+2,SWOFF           TURN SWITCHES OFF
         OI    WKBITS+2,NFNL           SET NOT FIRST,NOT LAST SW
AGAGDO45 L     RETREG,WKTEMP           LOAD RETURN ADDRESS
         BR    RETREG                  RETURN
*
*
*BEAM POSITION SET IN GDSCB WHEN NO SCISSOR OPTION
*
AGAGDO85 MVC   GDSXLAST,WKXABS         SET XLAST
         L     PARM,WKXABS
         SH    PARM,GDSXCURR            RECOMPUTE INCREMENT AND PUT
         ST    PARM,WKXINCR              IN PARAMETER
         MVC   GDSXCURR,WKXABS+2        *    XCURR
         MVC   GDSYLAST,WKYABS          *    YLAST AND
         L     PARM,WKYABS
         SH    PARM,GDSYCURR            RECOMPUTE INCREMENT AND PUT
         ST    PARM,WKYINCR              IN PARAMETER LIST
         MVC   GDSYCURR,WKYABS+2        *    YCURR IN GDSCB
         NI    GDSSCISS,LASTON
         B     AGAGDO40
         EJECT
*
*THIS ROUTINE CHECKS THE DATA MODE SWITCH IN THE GDSCB WHEN A
*SUBROUTINE IS BEING GENERATED OR UPDATED, AND ENSURES THAT
*THE INPUT MODE IS SET TO INCREMENTAL.
*
*
AGASDM10 MVI   GDSDATMD,X'00'           ZERO SWITCH AREA
         TM    WKSWITCH+2,REALX
         BZ    AGASDM30                 BRANCH IF X VALUE INTEGER
         OI    GDSDATMD,XREALI          SWT SWITCH FOR REAL, INCR X
AGASDM20 TM    WKSWITCH+2,REALY
         BZ    AGASDM40                 BRANCH IF Y VALUE INTEGER
         OI    GDSDATMD,YREALI          SWT SWITCH FOR REAL, INCR Y
         BR    RETREG
*
AGASDM30 OI    GDSDATMD,XINTGI          SET SWITCH FOR INTEGER, INCR X
         B     AGASDM20
*
AGASDM40 OI    GDSDATMD,YINTGI          SET SWITCH FOR INTEGER, INCR Y
         BR    RETREG
         EJECT
*THIS ROUTINE CONVERTS THE BEAM POSITION TO REAL VALUES AND
*STORES THEM IN THE WORK AREA.
*ADDRESS OF X IN REG PARM
*ADDRESS OF Y IN REG A
*
AGAFLT10 SR    REGD,REGD               SET UP LOOP CONTROL AND INDES
AGAFLT15 MVC   WKDBL(4),CONCON         SET UP CONVERSION CONST
         CLC   0(4,PARM),ZERO
         BE    AGAFLT50
         TM    0(PARM),NEG
         BO    AGAFLT40                 BRANCH IF NUMBER NEGATIVE
AGAFLT20 MVC   WKDBL+4(4),0(PARM)       NO, MOVE NUMBER INTO AREA
AGAFLT30 LD    FLT0,WKDBL               GET UNNORMALIZED NUMBER INTO
*                                        FLOATING POINT REGISTER
         AD    FLT0,ZERO               NORMALIZE
AGAFLT35 STE   FLT0,WKXNOW(REGD)
         LTR   REGD,REGD
         BCR   PLUS,RETREG             RETURN IF FINISHED
*
         LR    PARM,REGA
         LA    REGD,4                  SET UP NEW INDEX
         B     AGAFLT15
AGAFLT40 OI    WKDBL,NEG                SET SIGN BIT IN CONVERSION AREA
         CLC   MAXNEG(4),0(PARM)
         BE    AGAFLT20                 IF MAX NEG #, TREAT AS POSIT.
         L     RZERO,0(PARM)            NO,GET MAGNITUDE OF NUMBER
         LPR   RZERO,RZERO
         ST    RZERO,WKDBL+4
         B     AGAFLT30
AGAFLT50 LE    FLT0,A0
         B     AGAFLT35
*
         EJECT
*WRITE OUT UPDATE
AGACOM10 LA    PARM,WKADDR
         L     REGA,16                  CVT
         L     REGA,CVTLINK(REGA)       LINK LIB DCB
*        LINK  EP=IFFAHA14,DCB=(REGA),MF=(E,(1)),SF=(E,WKSPVSR)
         LINK  EP=IFFAHA14,MF=(E,(1)),SF=(E,WKSPVSR)
         B     AGARET10
*
         EJECT
*ERRORS
AGAERR00 OI    0(ERRCD),PRM             PARAMETER ERROR
         B     AGARET20
*
AGAERR10 MVC   PARMERR(4,ERRCD),ONE     GDS INVALID
         OI    0(ERRCD),PRM
         B     AGARET30
*
AGAERR20 MVC   PARMERR(4,ERRCD),TWO     INVALID TABLE ID
         B     AGAERR00
*
AGAERR30 MVC   PARMERR(4,ERRCD),THREE   INVALID TEXT ADDRESS
         B     AGAERR00
*
AGAERR40 MVC   PARMERR(4,ERRCD),FOUR    INVALID COUNT
         B     AGAERR00
*
AGAERR50 MVC   PARMERR(4,ERRCD),FIVE    INVALID HEIGHT
         B     AGAERR00
*
AGAERR60 MVC   PARMERR(4,ERRCD),SIX     INVALID WIDTH
         B     AGAERR00
*
AGAERR80 MVC   PARMERR(4,ERRCD),EIGHT   INVALID ORIENTATION
         B     AGAERR00
*
AGAERR90 MVC   PARMERR(4,ERRCD),ELEVEN  GENCODE ERROR
         B     AGAERR00
*
AGAERR95 MVC   PARMERR(4,ERRCD),NINE    CORRVAL ERROR
         B     AGAERR00
*
AGAERR97 OI    0(ERRCD),STRG            MAIN STORAGE EXCEEDED
         MVC   STOR(4,ERRCD),FOUR
         B     AGARES10
AGAERR98 OI    0(ERRCD),SCISSOR         NO DATA GENERATION
*
         B     AGARES10
         EJECT
*CONSTANTS
ONE      DC    F'1'
TWO      DC    F'2'
THREE    DC    F'3'
FOUR     DC    F'4'
FIVE     DC    F'5'
SIX      DC    F'6'
SEVEN    DC    F'7'
EIGHT    DC    F'8'
ZERO     DC    D'0'
ONEB     DC    E'-1.0'
BITS     DC    B'10000111'              MULTIPLE,VECTOR,INCLUDE,
         DC    X'00'                     OPTIMIZED,FIRST PASS,NO KEY,
         DC    B'00000000'               NO CORRVAL, BEAM OFF
         DC    X'00'
ONEH     DC    F'100'
MASK     DC    X'FFFF7F7F'
EIGHTH   DC    E'0.125'
TWO3RD   DC    E'0.6666667'             2/3
RAST     DC    E'4096.0'
INCH     DC    E'1536.0'
ONEONE3  DC    E'1.333333'
ONE2     DC    E'12.0'
ELEVEN   DC    F'11'
NINE     DC    F'9'
CONCON   DC    XL4'4E000000'            CONVERSION CONSTANT
CCON2    DC    X'42000000'
MAXNEG   DC    XL4'80000000'            MAXIMUM NEGATIVE NUMBER
FIXNAME  DC    C'GSP     '
A0       DC    E'0.0'
ONEA     DC    E'1.0'
A3       DC    E'63.0'
ZAP      DS    10F                  PATCH AREA                   F40704
         EJECT
WORKAREA DSECT
WKPARM   DS    F
WKRTNCD  DS    F
WKSAVE   DS    18F
WKSPVSR  DS    3F
WKXCURR  DS    H
WKYCURR  DS    H
WKXLAST  DS    F
WKYLAST  DS    F
WKXNOW   DS    F
WKYNOW   DS    F
WKSWITCH DS    F
*SWITCH FORMAT
*                                       BYTE 0 - X'FF' = UPDATE
*                                       BYTE 1 - X'10' = X COR PASSED
*                                                X'01' = Y COR PASSED
*                                       BYTE 2 - COPY OF GDSDATMD SW
*                                       BYTE 3 - X'04' = 1 CHAR/WORD
*                                                X'80' = LAST PARM HIT
WKSTORAD DS    F
CONCON2  DS    F
WKSIN    DS    F
WKCOS    DS    F
WKSINS   DS    F
WKCOSS   DS    F
WKSPACE  DS    F
WKHGT    DS    F
WKWIDTH  DS    F
WKNAME   DS    D
WKDBL    DS    D
WKXLGRID DS    F                        LAST X ON 8*8 MATRIX
WKYLGRID DS    F                        LAST Y ON 8*8 MATRIX
WKTEMP   DS    F
*
*PARAMETERS PASSED TO DATA GENERATION ROUTINE
*
WKADDR   DS    F                        KEY
WKBITS   DS    F                         *
WKCORVL  DS    F                         *
WKKEY    DS    F                        ADDR OF USER KEY VARIABLE
*
*PARAMETERS PASSED TO SCALE AND SCISSOR START HERE
WKGDS    DS    F                        ADDRESS OF GDSCB
WKRTN    DS    F                        ADDRESS OF RETURN ARRAY
WKDATA1  DS    F
WKDATA2  DS    F
WKDATA3  DS    F
WKDATA4  DS    F
WKXABS   DS    F
WKYABS   DS    F
WKXINCR  DS    F
WKYINCR  DS    F
WKTOTX   DS    F
WKTOTY   DS    F
WKENTCT  DS    F
WKXPREV  DS    F                  ADDED TO PLIST FOR DATA GEN    A29395
WKYPREV  DS    F                  ADDED TO PLIST FOR DATA GEN    A29395
*
*PARAMETERS PASSED TO KEY TABLE MANAGEMENT START HERE
WKGDS1   DS    F
WKCODE   DS    F
WKKADDR  DS    F
         COPY  GDSCB
         COPY  GTMCB
         COPY  GSPCB
         END
