         TITLE 'REQUEST ATTENTION INFORMATION ROUTINE'      D11
* TITLE:RQATN-REQUEST ATTENTION INFORMATION
* STATUS:CHANGE LEVEL 0
* FUNCTION:TO DETERMINE IF ANY ATTENTION HAS OCCURRED ON ANY DESIGNATED
*          SOURCE WHICH HAD BEEN ENABLED WHILE A SPECIFIED ATTENTION
*          LEVEL WAS ACTIVE.TO DELAY EXECUTION OF THE USER PROGRAM
*          UNTIL AN EXPECTED ATTENTION OCCURS ON ANY ENABLED DESIGNATED
*          SOURCE AT THE CURRENTLY ACTIVE ATTENTION LEVEL.
* ENTRY:ENTERED AT IFFACA08 VIA A CALL TO RQATN.
* INPUT:GR#1 CONTAINS THE ADDRESS OF A WORK/SAVE AREA.THE FIRST WORD
*       CONTAINS THE ADDRESS OF A PARAMETER LIST CONSTRUCTED AS FOLLOWS
*       1.ATTNLEVEL-ADDRESS OF A VARIABLE CONTAINING THE ADDRESS OF AN
*         ATTENTION LEVEL.
*       2.CODELOC-ADDRESS OF A LOCATION INTO WHICH A CODE IS PLACED
*         THAT SPECIFIES THE TYPE OF ATTENTION BEING RETURNED.
*       3.WAIT-ADDRESS OF A VALUE THAT INDICATES :
*         A. 1-IMMEDIATE RETURN IF DATA NOT AVAILABLE
*         B. 2-DO NOT RETURN(WAIT) UNTIL DATA IS AVAILABLE
*       4.ARRAYNAME-ADDRESS OF AN ARRAY WHERE ATTENTION INFORMATION
*         MAY BE RETURNED.
*       5.ATTNSOURCE-ADDRESS(ES) OF A VALUE(S) DESIGNATING ATTENTION
*         TYPES THE INFORMATION IS  DESIRED ABOUT.
* OUTPUT:ATTENTION DATA TO USER AND A UNIQUE CODE SPECIFYING TYPE OF
*        DATA BEING RETURNED.
* EXIT:RETURN TO CALLING PROGRAM
* RETURN CODES: 4,0 INCORRECT NUMBER OF PARAMETERS OR UNABLE TO DETER-
*                   MINE THE SINGLE INDIVIDUAL PARAMETER AT FAULT.
*               4,1 ATTNLEVEL DID NOT REFER TO A VALID OR EXISTING
*                   ATTENTION LEVEL.
*               4,3 VALUE OF WAIT INVALID
*               4,5-N VALUE OF ATTNSOURCE INVALID
*               0,0 SUCCESSFULL EXECUTION
* ATTRIBUTES:RE-ENTRANT,PROBLEM PROGRAM MODE
* NOTES:THIS ROUTINE EXAMINES THE FOLLOWING CONTROL BLOCKS AND TABLES:
*       1.GSPCB
*       2.GTMCB
*       3.GDSCB
*       4.KEY TABLE
*       5.BUFFER CONTROL TABLE
* EXTERNAL ROUTINES:ATTNINQ
*                   GIOCR
*                   CNVRT
         EJECT                                              D11
IFFACA08 CSECT
* A33055 FIXED IN COMPONENT IO523.  GSP BYPASS WITH PTF 40613
*0843,404000-415000,422000-435000                                  000A
*0843,104000                                                       0935
*D710000-711000,D713000,A712020-713920,A136100-137000            A37965
*A68200,69200,75500-75700,A736100-736900,C737000,A738000    D11 ZA15437
*A759500                                                    D11 ZA15437
*
REG0     EQU   0                       PARAM REG 0
REG1     EQU   1                       PARAM REG 1
RLIST    EQU   2                       INPUT PARAM LIST
RSOURCE  EQU   2                       ATTNSOURCE ADR REG
RFIRST   EQU   3                       FIRST ARG REG
RPARAM   EQU   3                       USER PARAM LIST
RATL     EQU   4                       ATTENTION LEVEL ADR
RINFO    EQU   4                       ADD INFO REG
RGTMCB   EQU   5                       GTMCB ADR
RKEY     EQU   5                       KEY TABLE ADR REG
RPFA     EQU   5                       PF REG
RANA     EQU   6                       A/N REG
RGSPCB   EQU   6                       GSPCB ADR
RKEYEN   EQU   6                       PRESENT KEY ENTRY ADR REG
RA       EQU   7                       WORK REG A
RGDSCB   EQU   7                       GDSCB ADR
RB       EQU   8                       WORK REG B
RWORKE   EQU   8                       WORK REG E
RBASE    EQU   9                       BASE REGISTER
RC       EQU   10                      WORK REG C
RWORKF   EQU   10                      WORK REG F
RD       EQU   11                      WORK REG D
RWORKC   EQU   11                      WORK REG
RE       EQU   12                      WORK REG E
RWORKD   EQU   12                      WORK REG
RSAVE    EQU   13                      SAVE AREA REG
RWORKA   EQU   14                      WORK REG
R14      EQU   14                  RETURN REG               D11 ZA15437
RWORKB   EQU   15                      WORK REG
R15      EQU   15                  EP REG                   D11 ZA15437
ADD0     EQU   0                       ADD INFO 0
ADD1     EQU   1                       ADD INFO 1
ADD2     EQU   2                       ADD INFO 2
ADD3     EQU   3                       ADD INFO 3
ADD4     EQU   4                       ADD INFO 4
ADD5     EQU   5                       ADD INFO 5
CNVRT    EQU   X'0264'             CONVERT STATAB DISPL     D11 ZA15437
AEC      EQU   X'06'                   AE
AID      EQU   X'04'                   ATTN LEVEL ID
ANTYPE   EQU   X'01'                   A/N END KEY
ATN99    EQU   99                      SOURCE 99
ATYPE    EQU   11                      ATTN TYPE
BCTFLAG  EQU   4                       BCT FLAGS
BFRLEN   EQU   0                       BFR LENGTH FLD
BFRSUB   EQU   X'28'                   BFR SUBROUTINE FLAG
BPID     EQU   X'01'                   BP ID
CANCELC  EQU   X'05'                   CANCEL
CCTA     EQU   6                       CHARACTER COUNT IN KEY
CCTB     EQU   5                       CHARACTER COUNT IN KEY
CCTC     EQU   8                       COUNT SHIFT VALUE
CNT      EQU   2                       CNT FLD
CNTA     EQU   X'FF'                   COUNT FLD VALUE
CORVAL   EQU   8                       CORVAL FLD
DE       EQU   X'02'                   DIRECT ENTRY FLAG
DEQUEUE  EQU   X'04'                   DEQUEUE DATA OPTION
DIV256   EQU   8                       DIVIDE BY 256
ENDC     EQU   X'01'                   END
ENDTABLE EQU   8                       END OF TABLE
ENTRYLEN EQU   12                      ENTRY LENGTH
EOSC     EQU   X'04'                   EOS
EOSRST   EQU   X'40'                   RESTART OPT FOR EOS
EOSXY    EQU   X'80'                   XY OPT FOR EOS
EQUIV    EQU   X'08'                   EQUIVALENT GDS FALS
FIRSENT  EQU   12                      ADR OF 1ST KEY TBL ENTRY
GACBAN   EQU   12                      OFFSET TO A/N
GACBOFF  EQU   8                       OFFSET TO START OF GACB
GACBPF   EQU   8                       OFFSET TO PF
GACBRST  EQU   45                      OFFSET TO RESTART BYTE
GDOA     EQU   6                       GDOA ADJUSTMENT
HIBIT    EQU   X'20'                   HI ORDER BIT
IDVAL    EQU   X'80'                   FULL SEGMENT ID+1           0935
INBFR    EQU   X'80'                   EQUIV GDS IS IN BUFFER FLAG
IOK      EQU   X'7F'                   I/O SUCCESSFULL
KEYNUM   EQU   10                      KEY NUMBER
LAST     EQU   X'80'                   LAST PARAMETER
LOGSTRT  EQU   2                       LOGICAL START FLD
LPC      EQU   X'03'                   LP
LPCHAR   EQU   X'10'                   LP CHARACTER BIT
LPCHRMD  EQU   X'20'                   CHARACTER MODE
LPSTART  EQU   X'08'                   LP RESTART BIT
LPXY     EQU   X'20'                   LP XY POS BIT
LVL2     EQU   X'10'                   LEVEL 2 GDSCB
MUL256   EQU   8                       MULTIPLY BY 256
NEG      EQU   X'80'                   NEGATIVE VALUE
NEXT     EQU   4                       NEXT SOURCE
NEXTENTY EQU   4                       ADR OF NEXT ENTRY
NEXTKEY  EQU   0                       ADR OF NEXT KET TBL
OFFSAVE  EQU   8                       SAVE AREA CHAIN
ONE      EQU   1                       ONE
ORGEN    EQU   X'38'                   ORGEN KEY CODE
OVLY     EQU   9                       OVERLAY CODE
PENDET   EQU   X'01'                   PEN DETECT BIT
PFC      EQU   X'02'                   RF
PFTYPE   EQU   X'02'                   PF TYPE
PTR      EQU   1                       PTR FLD
RCC4     EQU   X'08'                   RETURN CODE 4
RCC5     EQU   X'04'                   I/O ERROR
RC4      EQU   16                      OFFSET TO RC4
REQSRCH  EQU   X'80'                   REQATN SEARCHING QUEUE
RSTON    EQU   X'01'                   RESTART YES VALUE
RSVDA    EQU   8                       START OF DATA AREA
SCAN1    EQU   1                       VALUE OF 1
SCAN2    EQU   2                       VALUE OF 2
SEQNCE   EQU   X'20'                   SEQUENCE FLAG
SOURCE99 EQU   99                      ATTN SOURCE 99
TOBIT    EQU   X'18'                   SUBROUTINE LINKAGE
TWO      EQU   2                       TWO
ZERO     EQU   0                       ZERO
BSCSPC   EQU   56                  BASIC CHAR SPACING            A37965
LRGSPC   EQU   84                  LARGE CHAR SPACING            A37965
BSCSZE   EQU   X'0A'               MASK FOR BASIC SIZE CHARS     A37965
LRGSZE   EQU   X'05'               MASK FOR LARGE SIZE CHARS     A37965
NOSCISS  EQU   X'10'               MASK FOR 'NO SCISSORING'      A37965
XSCREEN  EQU   4092                MAX X FOR CHAR CENTER         A37965
YSCREEN  EQU   4092                MAX Y FOR CHAR CENTER         A37965
BSCLINE  EQU   80                  BASIC LINE SPACING            A37965
LRGLINE  EQU   120                 LARGE LINE SPACING            A37965
YLOWER   EQU   0                   MIN Y FOR CHAR CENTER         A37965
         SAVE  (14,12)                 SAVE REGISTERS
         BALR  RBASE,0                 SET UP BASE REGISTER
         USING *,RBASE                 DEFINE BASE REG
         LR    RLIST,REG1              SAVE INPUT PARAMETER
         USING WORKAREA,RLIST          DEFINE DSECT
         L     RPARAM,PARAM            LOAD ADR USER PARAM LIST
         USING PLIST,RPARAM            DEFINE DSECT
         ST    RSAVE,SAVE+4            SAVE-SAVE AREA PTR
         LA    RD,SAVE                 LOAD ADR OF MY SAVE AREA
         ST    RD,OFFSAVE(RSAVE)       STORE IN USER SAVE AREA
         LA    RSAVE,SAVE              * AREAS
         L     RWORKA,RCA              LOAD RETURN CODE ARRAY ADR
         XC    ZERO(20,RWORKA),ZERO(RWORKA) ZERO ARRAY
         B     AROUND                  BRANCH
ERROR    L     RWORKA,RCA              LOAD RTN CODE ARRAY ADR
         STC   RWORKB,ZERO(RWORKA)     STORE RETURN CODE
         ST    RWORKC,ZERO(RWORKD,RWORKA) STORE ADD INFO AT PROPER
*                                         OFFSET
OUTRTN   L     RSAVE,SAVE+4            RESTORE OLD SAVE AREA PTR
         RETURN (14,12),T              RETURN TO CALLER
AROUND   TM    ATNLVL,LAST             LAST PARAM
         BC    14,REQ01                BRANCH IF NO
REQ02    LA    RWORKC,ADD0             LOAD ADD INFO
REQ03    LA    RWORKB,RCC4             LOAD RETURN CODE
         LA    RWORKD,RC4              LOAD OFFSET
         B     ERROR                   BRANCH
REQ01    L     RATL,ATNLVL             LOAD INDIRECT PTR TO ATTN LEVEL
         L     RATL,ZERO(RATL)         LOAD ATTN LEVEL ADR
         USING ATTNLEVL,RATL           DEFINE DSECT
         CLI   ATTNLVID+1,AID          IS THIS VALID ATTN LEVEL
         BNE   REQ40                   BRANCH IF NO
         LR    RWORKD,RATL             SAVE REG
REQ06    CLI   ATTNBPID,BPID           THIS LEVEL POINT TO GTMCB
         BNE   REQ04                   BRANCH IF NO
         L     RGTMCB,ATTNBKPT         LOAD GTMCB ADR
         USING GTMCB,RGTMCB            DEFINE DSECT
         LR    RATL,RWORKD             RESTORE REG
         B     REQ05                   BRANCH
REQ04    L     RATL,ATTNBKPT           LOAD ADR NEXT HIGHER LEVEL
         B     REQ06                   BRANCH
REQ05    L     RGSPCB,GTMGSPCB         LOAD GSPCB ADR
         USING GSPCB,RGSPCB            DEFINE DESECT
         TM    CODELOC,LAST            IS THIS LAST PARAM
         BC    1,REQ02                 BRANCH IF YES
         B     REQ07                   BRANCH
REQ08    LA    RWORKC,ADD2             LOAD ADD INFO
         B     REQ03                   BRANCH
REQ07    CLC   CODELOC(4),GSPNULLV     IS THIS ADR OF NULL
         BE    REQ08                   BRANCH IF YES
         CLC   CODELOC(4),ZERO1        CODE LOC ADR = ZERO
         BE    REQ08                   BRNANCH IF YES
         TM    SCANWAIT,LAST           IS THIS THE LAST PARAM
         BC    1,REQ02                 BRANCH IF YES
         B     REQ09                   BRANCH
REQ10    LA    RWORKC,ADD3             LOAD ADR INFO
         B     REQ03                   BRANCH
REQ09    CLC   SCANWAIT(4),GSPNULLV    IS THIS ADR OF NULL
         BE    REQ10                   BRANCH IF YES
         L     RWORKC,SCANWAIT         LOAD ADR OF SCANWAIT
         L     RWORKC,ZERO(RWORKC)     LOAD SCAN WAIT VALUE
         LA    RWORKD,SCAN1            LOAD CONSTANT
         CLR   RWORKC,RWORKD           SCANWAIT=1
         BE    REQ11                   BRANCH IF YES
         LA    RWORKD,SCAN2            LOAD CONSTANT
         CLR   RWORKC,RWORKD           SCAN WAIT=2
         BNE   REQ10                   BRANCH IF NOT=2
REQ11    TM    ARRAY,LAST              LAST PARAMETER
         BC    1,REQ02                 BRANCH IF YES
         B     REQ41                   BRANCH
REQ13    LA    RWORKC,ADD4             LOAD ADD INFO
         B     REQ03                   BRANCH
REQ41    CLC   ARRAY(4),ZERO1          ARRAY ADR ZERO
         BE    REQ13                   BRANCH IF YES
REQ12    L     RWORKC,ATNSRCE          LOAD 1ST ATTN SOURCE ARG ADR
         LA    RWORKC,ZERO(RWORKC)     ZERO HI ORDER BYTE
         L     RWORKC,ZERO(RWORKC)     LOAD 1ST ATTN SOURCE ARG
         LA    RWORKD,SOURCE99         LOAD CONSTANT
         CLR   RWORKC,RWORKD           IS ATTN SOURCE = 99
         BNE   REQ14                   BRANCH IF NO
         TM    ATNSRCE,LAST            ONLY ATTN SOURCE ARG
         BC    1,REQ15                 BRANCH IF YES
REQ16    LA    RWORKC,ADD5             LOAD ADD INFO
         B     REQ03                   BRANCH
REQ15    TM    ATTNFLGA,DE             ARE WE IN DIRECT ENTRY
         BC    1,REQ16                 BRANCH IF YES
         B     ATTN99                  BRANCH TO PROCESS SOURCE 99
REQ14    BAL   RWORKA,CONVERTA         BRANCH TO ATTNSOURCE CONVERSION
         LTR   RWORKB,RWORKB           RC=0
         BC    8,REQ17A                BRANCH IF YES
         LR    RWORKC,RWORKB           LOAD ADD INFO
         B     REQ03                   BRANCH
REQ17A   ST    REG0,ANMASK             SAVE AN MASK
         ST    REG1,PFMASK             SAVE PF MASK
         NC    ANMASK(4),ATTNANEN      DELETE ANY ATTN SOURCES-
         NC    PFMASK(4),ATTNPFEN      NOT PREVIOUSLY ENABLED
         CLC   ANMASK(4),ZERO1         ANY SOURCES ENABLED
         BNE   REQ800                  BRANCH-YES
         CLC   PFMASK(4),ZERO1         ANY SOURCES ENABLED
         BE    REQ62                   BRANCH-NO
REQ800   EQU   *
         L     RGDSCB,GTMGDSCB         LOAD ADR OF 1ST GDSCB
         USING GDSCB,RGDSCB            DEFINE DSECT
REQ17    TM    ATTNFLGA,DE             ARE WE IN DIRECT ENTRY
         BC    1,DIRECT                BRANCH IF YES
         B     NTDIRECT                BRANCH TO NOT DIRECT ENTRY
ATTN99   XC    ATTNAECB(4),ATTNAECB    CLEAR SOURCE 99 ECB
         CLI   ATTNSETA,ATN99          DATA AVAILABLE
         BNE   REQ34                   BRANCH IF NO
REQ39    L     RWORKA,ARRAY            LOAD ARRAY ADR
         L     RWORKB,GSPNULLV         LOAD NULL ADR
         CLR   RWORKA,RWORKB           IS THERE AN ARRAY
         BE    REQ35                   BRANCH IF NO
         MVC   ZERO(8,RWORKA),ATTNSETA+4 MOVE DATA TO ARRAY
REQ35    XC    ATTNSETA(12),ATTNSETA   CLEAR DATA AREA
         LA    RWORKB,ATN99            LOAD VALUE
REQ36    L     RWORKA,CODELOC          LOAD CODELOC ADR
         ST    RWORKB,ZERO(RWORKA)     STORE CODE LOC
         B     OUTRTN                  RETURN TO CALLER
REQ34    L     RWORKA,SCANWAIT         LOAD PTR TO SCAN WAIT
         CLC   SCANTWO(4),ZERO(RWORKA) IS A WAIT REQUESTED
         BE    REQ37                   BRANCH IF YES
         SR    RWORKB,RWORKB           CLEAR REG
         B     REQ36                   BRANCH
REQ37    CLC   ATTNFWPT(4),ZERO1       IS LEVEL ACTIVE
         BE    REQ38                   BRANCH IF YES
         SR    RWORKC,RWORKC           ADD INFO=0
         B     REQ03                   BRANCH
REQ38    LA    REG1,ATTNAECB           LOAD ADR OF ECB
         WAIT  ECB=(1)
         B     REQ39                   BRANCH
REQ40    LA    RWORKC,ADD1             LOAD ADD INFO CODE
         B     REQ03                   BRANCH
CONVERTA SAVE  (2,12)                  SAVE REGS
         LA    RSOURCE,ATNSRCE         LOAD ADR OF 1ST ARG
         LA    RFIRST,NEXT             INDICATE 1ST ARG
         SR    RPFA,RPFA               CLEAR PF REG
         SR    RANA,RANA               CLEAR A/N REG
         LA    RINFO,ADD5              LOAD 1ST ADD INFO CODE
         B     REQ18                   BRANCH
REQOK    SR    RWORKB,RWORKB           ZERO RETURN CODE
         LR    REG0,RANA               LOAD A/N MASK
         LR    REG1,RPFA               LOAD P/F MASK
         B     REQ19                   BRANCH
REQERR   LR    RWORKB,RINFO            LOAD RETURN CODE
REQ19    RETURN (2,12)                 RETURN
REQ18    L     RC,ZERO(RSOURCE)        LOAD ADR OF ARG
         TM    ZERO(RC),NEG            ARG NEGATIVE
         BC    1,REQNEG                BRANCH IF NEG
         L     RB,ZERO(RC)             LOAD VALUE OF ARG
REQ24    CL    RB,MAX                  VALUE GREATER THAN ALLOWABLE
         BC    2,REQERR                BRANCH IF YES
REQ23    CL    RB,ANSIZE               VALUE GREATER THAN 31
         BC    2,REQ20                 BRANCH IF YES
         L     RE,PRIME                PRIME REG
         SRL   RE,ZERO(RB)             POSITION BIT
         OR    RPFA,RE                 ADD TO PF MASK
REQ26    TM    ZERO(RC),NEG            ARG NEG
         BC    1,REQ21                 BRANCH IF YES
REQ22    TM    ZERO(RSOURCE),LAST      MORE ARGS
         BC    1,REQOK                 BRANCH IF NO
         L     RA,ZERO(RC)             SAVE VALUE PRESENT ARG
         LA    RSOURCE,NEXT(RSOURCE)   STEP TO NEXT ARG
         SR    RFIRST,RFIRST           INDICATE NOT 1ST ARG
         LA    RINFO,ONE(RINFO)        INCREMENT ADD INFO
         B     REQ18                   BRANCH TO MORE ARGS
REQ21    LA    RE,ONE                  LOAD CONSTANT
         SR    RB,RE                   DECREMENT ARG BY 1
         CLR   RA,RB                   VALUE=PREVIOUS VALUE
         BE    REQ22                   BRANCH IF YES
         B     REQ23                   BRANCH
REQNEG   LTR   RFIRST,RFIRST           FIRST ARG
         BC    7,REQERR                BRANCH IF YES
         LTR   RA,RA                   PREV ARG NEG
         BC    4,REQERR                BRANCH IF YES
         L     RB,ZERO(RC)             LOAD VALUE OF ARG
         LPR   RB,RB                   MAKE ARG POS
         CLR   RB,RA                   VALUE GREATER THAN PREV ARG
         BC    2,REQ24                 BRANCH IF YES
         B     REQERR                  BRANCH
REQ20    LA    RD,END                  LOAD ADR OF CONSTANT
         LA    RE,ONE                  LOAD CONSTANT
REQ27    CL    RB,ZERO(RD)             COMPARE
         BE    REQ25                   BRANCH IF YES
         SLL   RE,ONE                  SHIFT BIT
         LA    RD,NEXT(RD)             LOAD NEXT CONSTANT ADR
         B     REQ27                   BRANCH
REQ25    OR    RANA,RE                 ADD BIT TO MASK
         B     REQ26                   BRANCH
NTDIRECT CLC   ATTNMLEN,ZERO1          ANY DATA
         BNE   REQ50                   BRANCH IF YES
REQ53    CLC   ATTNFWPT,ZERO1          IS LEVEL ACTIVE
         BE    REQ51                   BRANCH IF YES
         L     RWORKC,SCANWAIT         LOAD PTR TO SCANWAIT
         CLC   SCANTWO(4),ZERO(RWORKC) IMMEDIATE RETURN WANTED
         BNE   REQ52                   BRANCH IF YES
REQ62    LA    RWORKC,ADD0             LOAD ADD INFO
         B     REQ03                   BRANCH
REQ52    L     RWORKC,CODELOC          LOAD ADR OF CODE LOC
         SR    RWORKD,RWORKD           CLEAR REG
         ST    RWORKD,ZERO(RWORKC)     CODE LOC=0
         B     OUTRTN                  BRANCH
REQ50    L     RWORKA,ATTNMLEN         LOAD ADR OF 1ST ENTRY
         SR    RWORKF,RWORKF           ZERO REG
REQ57    CLI   ATYPE(RWORKA),PFTYPE    PF ATTN
         BE    REQ54                   BRANCH IF YES
         LA    RWORKB,ONE              PRIME REG
         CLI   ATYPE(RWORKA),ANTYPE    END KEY ATTN
         BE    REQ55                   BRANCH IF YES
         SR    RWORKC,RWORKC           CLEAR REG
         IC    RWORKC,ATYPE(RWORKA)    INSERT ATTN TYPE
         LA    RWORKD,TWO              LOAD CONSTANT
         SR    RWORKC,RWORKD           DETERMINE SHIFT CONSTANT
         SLL   RWORKB,ZERO(RWORKC)     POSITION BIT
REQ55    N     RWORKB,ANMASK           DETERMINE IF MATCH
         LTR   RWORKB,RWORKB           WAS THERE A MATCH
         BC    7,REQ56                 BRANCH IF YES
REQ58    LR    RWORKF,RWORKA           SAVE ADR
         L     RWORKA,ZERO(RWORKA)     LOAD PTR TO NEXT ENTRY
         LTR   RWORKA,RWORKA           ANY MORE ENTRIES
         BC    7,REQ57                 BRANCH IF YES
         B     REQ53                   BRANCH
REQ54    L     RWORKB,PRIME            PRIME PF REG
         SR    RWORKC,RWORKC           CLEAR REG
         IC    RWORKC,KEYNUM(RWORKA)   INSERT KEY NUMBER
         SRL   RWORKB,ZERO(RWORKC)     POSITION BIT
         N     RWORKB,PFMASK           DETERMINE IF A MATCH
         LTR   RWORKB,RWORKB           WAS THERE A MATCH
         BC    8,REQ58                 BRANCH IF NO
REQ56    MVC   RSVD(12),RSVDA(RWORKA)  MOVE DATA TO WORK AREA
         CLC   ATTNFWPT(4),ZERO1       LEVEL ACTIVE
         BE    REQ1A                   BRANCH IF LEVEL ACTIVE
         LR    REG0,RWORKF             SAVE REG
         LR    REG1,RWORKA             SAVE REG
         TM    ATTNFLGA,DEQUEUE        MAY WE DEQUEUE FROM AN INACTIVE
*                                      LEVEL
         BO    REQ60                   BRANCH IF NO
REQ1A    EQU   *
         LTR   RWORKF,RWORKF           1ST ENTRY
         BC    8,REQ59                 BRANCH IF YES
         MVC   ZERO(4,RWORKF),ZERO(RWORKA) DEQUEUE ENTRY
         B     REQ61                   BRANCH
REQ59    MVC   ATTNMLEN(4),ZERO(RWORKA) DEQUEUE ENTRY
REQ61    MVC   ZERO(4,RWORKA),ATTNAVAL  * ADD ENTRY TO
         ST    RWORKA,ATTNAVAL          * AVAILABLE LIST
         B     REQ60                   BRANCH
REQ51    SR    RWORKC,RWORKC           CLEAR REG
         O     RWORKC,ATTNPFEN         ADD ENABLED PF KEYS FOR LEVEL
         O     RWORKC,PFMASK           ADD REQUESTED SOURCES
         X     RWORKC,ATTNPFEN         TEST IF REQUEST VALID
         LTR   RWORKC,RWORKC           REQUEST VALID
         BC    7,REQ62                 BRANCH IF NO
         O     RWORKC,ATTNANEN         ADD ENABLED A/N SOURCES FOR LVL
         O     RWORKC,ANMASK           ADD REQUESTED SOURCES
         X     RWORKC,ATTNANEN         DETERMINE IF VALID REQUEST
         LTR   RWORKC,RWORKC           VALID REQUEST
         BC    7,REQ62                 BRANCH IF NO
         L     RWORKC,GTMGACBA         LOAD PTR TO GACB
         LA    RWORKC,GACBOFF(RWORKC)  LOAD PTR TO TRUE START OF GACB
         MVC   SAVE1(4),GACBAN(RWORKC) SAVE A/N MASK
         MVC   SAVE2(4),GACBPF(RWORKC) SAVE P/F MASK
         MVC   GACBAN(4,RWORKC),ANMASK MOVE IN A/N REQUEST
         MVC   GACBPF(4,RWORKC),PFMASK MOVE IN PF REQUEST
         XC    GACB(12),GACB           CLEAR MACRO AREA
         L     RWORKA,SCANWAIT         LOAD PTR TO SCAN WAIT
         CLC   SCANTWO(4),ZERO(RWORKA) IMMEDIATE RETURN WANTED
         BNE   REQ63                   BRANCH IF YES
         XC    LFORM(64),LFORM          ZERO LIST                  000A
         ATTNINQ (11),MODE=W,TYP=ANY,MF=(E,LFORM)                  000A
REQ66    MVC   GACBAN(4,RWORKC),SAVE1  RESTORE MASK
         MVC   GACBPF(4,RWORKC),SAVE2  RESTORE MASK
         L     RWORKD,ZERO(RWORKC)     LOAD COMAREA ADR
         MVC   RSVD(12),ZERO(RWORKD)   DATA TO WORK AREA
         B     REQ60                   BRANCH
REQ63    EQU   *
         XC    LFORM(64),LFORM          ZERO LIST                  000A
         ATTNINQ (11),MODE=(C,REQ65),TYP=ANY,MF=(E,LFORM)          000A
         MVC   GACBAN(4,RWORKC),SAVE1  RESTORE MASK
         MVC   GACBPF(4,RWORKC),SAVE2  RESTORE MASK
         B     REQ52                   BRANCH
REQ65    B     REQ66                   BRANCH
REQ60    CLI   TYPE,LPC                LIGHT PEN
         BE    REQ70                   BRANCH IF YES
         CLI   TYPE,EOSC               EOS ATTN
         BNE   REQ100                  BRANCH IF NO
         CLC   ATTNFWPT(4),ZERO1       LEVEL ACTIVE
         BE    REQ71                   BRANCH IF YES
         XC    XPOS(4),XPOS            ENSURE XY=0
         B     REQ101                  BRANCH
REQ71    TM    ATTNFLGA,EOSXY          XY READ OUT WANTED
         BC    1,REQ72                 BRANCH IF YES
REQ73    TM    ATTNFLGA,EOSRST         RESTART WANTED
         BC    1,REQ74                 BRANCH IF YES
         B     REQ101                  BRANCH
REQ72    XC    DECB(36),DECB           CLEAR I/O AREA
         XC    XPOS(4),XPOS            CLEAR DATA AREA
         L     RWORKC,GTMGRDCB         LOAD DCB ADR
         LA    RWORKD,XPOS             LOAD DATA AREA ADR
         LA    REG1,DECB               LOAD ADR OF PARAM LIST
         GREADR (1),XYP,(11),(12),MF=E
         WAIT  ECB=(1)
         BAL   REG1,IOTEST             TO TEST I/O
         B     REQ73                   BRANCH
REQ74    XC    DECB(36),DECB           CLEAR I/O AREA
         LA    RWORKC,SENSE+2          LOAD RESTART ADR
         L     RWORKD,GTMGRDCB         LOAD DCB ADR
         LA    REG1,DECB               LOAD DECB ADR
         GCNTRL (1),STR,(12),(11),MF=E
         WAIT  ECB=(1)
         BAL   REG1,IOTEST             TO TEST I/O
         B     REQ101                  BRANCH
REQ70    SR    RWORKC,RWORKC           CLEAR REG
         LH    RWORKC,SENSE+2          LOAD BFR ADR
         SRL   RWORKC,DIV256           DIVIDE NUMBER BY 256
         SR    RWORKF,RWORKF           CLEAR REG
         M     RWORKF,THREE            MULTIPLY #  BY 3  RESULT=RWORKC
         L     RWORKF,GTMBCTBL         LOAD ADR OF BCT
         LTR   RWORKF,RWORKF           IS THERE A BFR CONTROL TBL
         BC    8,REQ79                 BRANCH IF NO
         AR    RWORKC,RWORKF           DETERMINE ADR OF BCT ENTRY
         LR    RWORKA,RWORKC           LOAD REG
         CLC   ZERO(1,RWORKA),ZERO1    IS AN ID ASSIGNED
         BE    REQ79                   BRANCH IF NO ID
         CLI   ZERO(RWORKA),IDVAL      IS A FULL SEGMENT ASSIGNED
         BC    4,REQ75                 BRANCH IF A FULL SEGMENT
         SR    RWORKC,RWORKC           CLEAR REG
         SR    RWORKF,RWORKF           CLEAR REG
         LH    RWORKC,SENSE+2          LOAD DIVIDEND
         D     RWORKF,DIV256A          DIVIDE BY 256 RWORKF=REMAINDER
         CL    RWORKF,SUBSEG           UPPER OR LOWER HALF
         BC    4,REQ76                 BRANCH LOWER SEGMENT
         CLI   ZERO+ONE(RWORKA),IDVAL  SUB SEG ASSIGNED
         BE    REQ79                   BRANCH IF NO
         MVC   IDBYTE(1),ONE(RWORKA)   SAVE ID
         B     REG755                                              7172
REQ76    CLI   ZERO(RWORKA),IDVAL      SUB REG ASSIGNED
         BE    REQ79                   BRANCH IF NO
REQ75    MVC   IDBYTE(1),ZERO(RWORKA)  SAVE ID
REG755   L     RGDSCB,GTMGDSCB     GET NEXT REQUEST BLOCK          7172
REQ77    CLC   GDSBCTID(1),IDBYTE      GDS=MY ID
         BE    REQ78                   BRANCH IF YES
REQ80    EQU   *
         CLC   GDSNXGDS(4),ZERO1       ANY MORE GDS
         BE    REQ79                   BRANCH IF NO
         L     RGDSCB,GDSNXGDS         LOAD ADR OF NEXT GDS
         B     REQ77                   BRANCH
REQ78    EQU   *
         TM    GDSFLAGS,EQUIV          IS THIS AN EQUIVALENT GDS
         BC    14,REQ81                BRANCH-NO
         TM    GDSFLAGS,INBFR          GDS IN BFR
         BO    REQ81                   BRANCH-YES
         B     REQ80                   BRANCH
REQ81    EQU   *
         TM    GDSFLAGS,PENDET         LIGHT PEN DETECT ENABLED
         BC    1,REQ700                BRANCH IF YES
         CLC   ATTNFWPT(4),ZERO1       LEVEL ACTIVE
         BE    REQ79                   BRANCH IF LEVEL ACTIVE
         TM    ATTNFLGA,DEQUEUE        MAY WE DEQUEUE FROM AN INACTIVE
*                                      LEVEL
         BC    14,NTDIRECT             BRANCH IF YES
         LR    RWORKF,REG0             RESTORE REG
         LR    RWORKA,REG1             RESTORE REG
         LTR   RWORKF,RWORKF           1ST ENTRY
         BZ    REQ59A                  BRANCH IF YES
         MVC   ZERO(4,RWORKF),ZERO(RWORKA) DEQUEUE ENTRY
         B     REQ61A                  BRANCH
REQ59A   MVC   ATTNMLEN(4),ZERO(RWORKA) DEQUEUE ENTRY
REQ61A   MVC   ZERO(4,RWORKA),ATTNAVAL * ADD ENTRY TO
         ST    RWORKA,ATTNAVAL         * AVAILABLE LIST
         B     NTDIRECT                BRANCH
REQ79    L     RWORKD,GTMGACBA         LOAD PTR TO GSP GACB
         LA    RWORKD,GACBOFF(RWORKD)  LOAD TRUE START GACB ADR
         CLI   GACBRST(RWORKD),RSTON   LP RESTART FLAG ON
         BE    NTDIRECT                BRANCH IF YES
         XC    DECB(32),DECB           CLEAR I/O AREA
         LA    REG1,DECB               LOAD ADR OF DECB
         L     RWORKC,GTMGRDCB         LOAD DCB ADR
         LA    RWORKD,SENSE+2          LOAD RESTART ADR PTR
         GCNTRL (1),STR,(11),(12),MF=E
         WAIT  ECB=(1)
         BAL   REG1,IOTEST             TO TEST I/O
         B     NTDIRECT                BRANCH
REQ700   TM    ATTNFLGA,LPCHAR         CHARACTER WANTED
         BC    14,REQ102               BRANCH IF NO
         CLC   ATTNFWPT(4),ZERO1       LEVEL ACTIVE
         BNE   REQ701                  BRANCH IF NOT ACTIVE
         TM    SENSE+1,LPCHRMD         LP IN CHARACTER MODE
         BC    14,REQ701               BRANCH IF NOT CHARACTER MODE
         XC    DECB(32),DECB           CLEAR I/O AREA
         LA    REG1,DECB               LOAD ADR OF I/O AREA
         L     RWORKF,GTMGRDCB         LOAD DCB ADR
         LA    RWORKC,CHARACTR         LOAD ADR OF DATA AREA
         LA    RWORKD,SENSE+2          LOAD ADR OF CHARACTER
         LA    RWORKE,ONE              LOAD NUMBER OF BYTES TO READ
         GREAD (1),BUF,(10),(8),(11),(12),MF=E
         WAIT  ECB=(1)
         BAL   REG1,IOTEST             TO TEST I/O
         TM    ATTNFLGA,LPSTART        RESTART WANTED
         BC    14,REQ102               BRANCH IF NO
         XC    DECB(32),DECB           CLEAR I/O AREA
         LA    REG1,DECB               LOAD ADR OF I/O AREA
         GCNTRL (1),STR,(10),(12),MF=E
         WAIT  ECB=(1)
         BAL   REG1,IOTEST             TO TEST I/O
         B     REQ102                  BRANCH
REQ701   XC    CHARACTR(1),CHARACTR    CLEAR CHARACTER BYTE
         B     REQ102                  BRANCH
REQ102   CLC   ARRAY(4),GSPNULLV       WAS AN ARRAY SPECIFIED
         BE    REQ103                  BRANCH IF NO
         BAL   RWORKA,LPEOS            BRANCH TO ARRAY FILL IN
REQ103   L     RWORKC,CODELOC          LOAD ADR OF CODE LOC
         MVC   ZERO(4,RWORKC),LPD      CODE 34 TO CODE LOC
         B     OUTRTN                  BRANCH
REQ101   CLC   ARRAY(4),GSPNULLV       WAS AN ARRAY SPECIFIED
         BE    REQ104                  BRANCH IF NO
         BAL   RWORKA,LPEOS            BRANCH TO ARRAY FILL IN
REQ104   L     RWORKC,CODELOC          LOAD ADR OF CODE LOC
         MVC   ZERO(4,RWORKC),EOSD     CODE 35 TO CODE LOC
         B     OUTRTN                  BRANCH
REQ100   L     RWORKC,CODELOC          LOAD ADR OF CODELOC
         CLI   TYPE,PFC                PF ATTN
         BE    REQ105                  BRANCH IF YES
         CLI   TYPE,ENDC               END KEY ATTN
         BE    REQ106                  BRANCH IF YES
         CLI   TYPE,AEC                AE ATTN
         BE    REQ107                  BRANCH IF YES
         MVC   ZERO(4,RWORKC),CANCELD  CODE 33 TO CODELOC
         B     OUTRTN                  BRANCH
REQ106   MVC   ZERO(4,RWORKC),END      CODE 32 TO CODELOC
         B     OUTRTN                  BRANCH
REQ107   MVC   ZERO(4,RWORKC),AED      CODE 36 TO CODELOC
         B     OUTRTN                  BRANCH
REQ105   CLC   ARRAY(4),GSPNULLV       ARRAY SPECIFIED
         BE    REQ108                  BRANCH IF NO
         L     RWORKD,ARRAY            LOAD ARRAY ADR
         SR    RWORKF,RWORKF           CLEAR REG
         IC    RWORKF,OVERLAY          LOAD OVERLAY VALUE
         ST    RWORKF,ZERO(RWORKD)     OVERLAY CODE TO ARRAY
REQ108   SR    RWORKF,RWORKF           CLEAR REG
         IC    RWORKF,KEYNO            LOAD KEY #
         LTR   RWORKF,RWORKF            IS ATTN SOURCE PFK0        RSTH
         BNE   REQ109                   NO                         RSTH
         L     RWORKF,MIN1              SET CODE TO -1 FOR PFK0    RSTH
REQ109   ST    RWORKF,ZERO(RWORKC)      KEY= TO CODELOC            RSTH
         B     OUTRTN                  BRANCH
LPEOS    L     RWORKE,ARRAY            LOAD ARRAY ADR
         USING ARRAYUSE,RWORKE
         XC    W1(40),W1               CLEAR ARRAY
         SR    RWORKC,RWORKC           CLEAR REG
         LH    RWORKC,SENSE+2          LOAD BFR ADR
         SRL   RWORKC,DIV256           DIVIDE BY 256
         SR    RWORKF,RWORKF           CLEAR REG
         M     RWORKF,THREE            MULTIPY BY 3
         L     RWORKF,GTMBCTBL         LOAD ADR OF BCT
         LTR   RWORKF,RWORKF           IS THERE A BFR CONTROL TBL
         BC    8,REQ500                BRANCH IF NO
         AR    RWORKC,RWORKF           DETERMINE ADR OF BCT ENTRY
         LR    REG1,RWORKC             SAVE ADR
         CLC   ZERO(1,REG1),ZERO1      IS AN ID ASSIGNED
         BE    REQ500                  BRANCH-NO ID
         CLI   ZERO(REG1),IDVAL        IS A FULL SEGMENT ASSIGNED
         BC    4,REQ200                BRANCH IF YES
         SR    RWORKC,RWORKC           CLEAR REG
         SR    RWORKF,RWORKF           CLEAR REG
         LH    RWORKC,SENSE+2          LOAD DIVIDEND
         D     RWORKF,DIV256A          DIVIDE BY 256
         CL    RWORKF,SUBSEG           UPPER OR LOWER HALF
         BC    4,REQ201                BRANCH LOWER SEGMENT
         CLI   ZERO+ONE(REG1),IDVAL    SUB SEG ASSIGNED
         BE    REQ500                  BRANCH IF NO
         MVC   IDBYTE(1),ONE(REG1)     SAVE ID
         B     REQ202                  BRANCH
REQ201   CLI   ZERO(REG1),IDVAL        SUB SEG ASSIGNED
         BE    REQ500                  BRANCH IF NO
REQ200   MVC   IDBYTE(1),ZERO(REG1)    SAVE ID
REQ202   L     RGDSCB,GTMGDSCB         LOAD ADR OF FIRST GDSCB
REQ204   CLC   GDSBCTID(1),IDBYTE      GDS=MY ID
         BE    REQ203                  BRANCH IF YES
REQ205   EQU   *
         CLC   GDSNXGDS(4),ZERO1       ANY MORE GDS
         BE    REQ500                  BRANCH IF NO
         L     RGDSCB,GDSNXGDS         LOAD ADR OF NEXT GDS
         B     REQ204                  BRANCH
REQ203   EQU   *
         TM    GDSFLAGS,EQUIV          IS THIS AN EQUIVALENT GDS
         BC    14,REQ206               BRANCH-NO
         TM    GDSFLAGS,INBFR          GDS IN BFR
         BO    REQ206                  BRANCH-YES
         B     REQ205                  BRANCH
REQ206   EQU   *
         ST    RGDSCB,W1               GDS ADR TO WORD 1 ARRAY
         CLI   CNT(REG1),CNTA          COUNT FLD IN BCT =FF
         BNE   REQ400                  BRANCH IF NO
         SR    RWORKC,RWORKC           CLEAR REG
         SR    RWORKF,RWORKF           CLEAR REG
         IC    RWORKC,PTR(REG1)        LOAD DIVIDEND
         SLL   RWORKC,MUL256           MULTIPLY BY 256
         SR    RWORKF,RWORKF           CLEAR REG
         LH    RWORKF,SENSE+2          LOAD BFR ADR
         SR    RWORKF,RWORKC           SUBTRACT RESULT FROM BFR ADR
         LA    RWORKC,TWO              LOAD CONSTANT
         SR    RWORKF,RWORKC           DETERMINE LOGICAL DIFFERENCE
         ST    RWORKF,LOGDIF           SAVE VALUE
         SR    RWORKF,RWORKF           CLEAR REG
         IC    RWORKF,PTR(REG1)        LOAD PTR FROM BCT ENTRY
         MH    RWORKF,THREE+2          MULTIPLY BY THREE
         L     REG1,GTMBCTBL           LOAD BCT ADR
         LA    REG1,ZERO(RWORKF,REG1)  HAVE BCT START ADR FOR THIS SEG
REQ402   SR    RWORKB,RWORKB           CLEAR REG
         LH    RWORKB,GDSGDOAL         LOAD GDOA LENGTH
         LA    RWORKC,GDOA             LOAD CONSTANT
         SR    RWORKB,RWORKC           ADJUST GDOA LENGTH
         SR    RWORKC,RWORKC           CLEAR REG
         IC    RWORKC,CNT(REG1)        INSERT COUNT
         SR    RWORKF,RWORKF           CLEAR REG
         MR    RWORKF,RWORKB           MULTIPY VALUES
         A     RWORKC,LOGDIF           ADD LOGICAL DIFFERENCE
         ST    RWORKC,W3               STORE RESULT IN WORD 3 OF ARRAY
         ST    RWORKC,W3A              SAVE VALUE IN WORK AREA
         B     REQ401                  BRANCH
REQ400   LR    RWORKC,REG1             ENTRY ADR TO WORK REG
         L     RWORKD,GTMBCTBL         LOAD ADR START OF BCT
         SR    RWORKC,RWORKD           DETERMINE PTR
         SR    RWORKF,RWORKF           CLEAR REG
         D     RWORKF,THREE            DIVIDE # BY 3
         SLL   RWORKC,MUL256           MULTIPY RESULT BY 256
         SR    RWORKF,RWORKF           CLEAR REG
         LH    RWORKF,SENSE+2          LOAD  BFR ADR
         SR    RWORKF,RWORKC           SUBTRACT RESULT FROM BFR ADR
         LA    RWORKC,TWO              LOAD CONSTANT
         SR    RWORKF,RWORKC           DETERMINE LOGICAL DIFFERENCE
         ST    RWORKF,LOGDIF           SAVE VALUE
         B     REQ402                  BRANCH
REQ401   TM    GDSFLAGS,LVL2           IS THIS A LEVEL 2 GDS
         BC    1,REQ500                BRANCH IF YES
         CLC   GDSKEYTB(4),ZERO1       IS THERE A KEY TABLE
         BE    REQ500                  BRANCH IF NO
REQ300   L     RKEY,GDSKEYTB           LOAD ADR OF FIRST KEY TABLE
REQ302   LA    RKEYEN,FIRSENT(RKEY)    LOAD ADR OF FIRST ENTRY
REQ304   CL    RKEYEN,NEXTENTY(RKEY)   IS SLOT BEING USED
         BNE   REQ301                  BRANCH IF SLOT BEING USED
         CLC   ZERO1(4),NEXTKEY(RKEY)  ANY MORE KEY TABLES
         BE    REQ500                  BRANCH IF NO MORE KEY TABLES
         L     RKEY,NEXTKEY(RKEY)      LOAD ADR OF NEXT KEY TABLE
         B     REQ302                  BRANCH
REQ301   SR    RWORKC,RWORKC           CLEAR REG
         LH    RWORKC,BFRLEN(RKEYEN)   LOAD BFR LENGTH
         AH    RWORKC,LOGSTRT(RKEYEN)  ADD LOGICAL START
         CL    RWORKC,W3A              COMPARE VALUE TO GDS OFFSET VALU
         BC    2,REQ303                BRANCH IF WORD 3 VALUE LESS
         BE    REQ308                  BRANCH IF VALUES EQUAL
REQ305   LA    RKEYEN,ENTRYLEN(RKEYEN) LOAD ADR OF NEXT KEY ENTRY
         B     REQ304                  BRANCH
REQ303   CLC   W3A+2(2),LOGSTRT(RKEYEN) COMPARE GDS OFFSET TO LOG START
         BC    4,REQ500                BRANCH IF WORD 3 LESS
         TM    BCTFLAG(RKEYEN),ORGEN   IS THIS AN ORGEN KEY
         BO    REQ307                  BRANCH-YES
         TM    BCTFLAG(RKEYEN),BFRSUB  IS THIS A BFR SUBRTN KEY
         BC    1,REQ305                BRANCH IF BFR SURRTN KEY
         TM    BCTFLAG(RKEYEN),SEQNCE  IS THIS A SEQUENCE KEY
         BC    1,REQ306                BRANCH IF YES
REQ307   EQU   *
         MVC   W2(4),BFRLEN(RKEYEN)    KEY TO WORD 2 OF ARRAY
         MVC   W4(4),CORVAL(RKEYEN)    CORVAL TO WORD 4 OF ARRAY
         TM    SENSE+1,LPCHRMD         LP IN CHARACTER MODE
         BC    14,REQ309               BRANCH-NOT CHARACTER MODE
         LH    RWORKC,BFRLEN(RKEYEN)   LOAD BUFFER LENGTH
         AH    RWORKC,LOGSTRT(RKEYEN)  ADD LOGICAL START
         S     RWORKC,W3A              SUBTRACT GDS OFFSET
         STH   RWORKC,CCT              SAVE VALUE
         SR    RWORKC,RWORKC           CLEAR REG
         IC    RWORKC,CCTB(RKEYEN)     INSERT CHARACTER COUNT
         SLL   RWORKC,CCTC             SHIFT 1ST HALF OF COUNT
         IC    RWORKC,CCTA(RKEYEN)     INSERT CHARACTER COUNT
         SH    RWORKC,CCT              SUBTRACT SAVED VALUE
         LA    RWORKC,ADD1(RWORKC)     CHANGE OFFSET TO COUNT FOR ARRAY
         ST    RWORKC,W3               STORE RESULT IN ARRAY WORD 3
         B     REQ305                  BRANCH
REQ309   EQU   *
         L     RWORKC,W3A              LOAD GDS OFFSET VALUE
         SH    RWORKC,LOGSTRT(RKEYEN)  SUBTRACT LOGICAL START
         ST    RWORKC,W3               STORE VALUE IN WORD 3 OF ARRAY
         B     REQ305                  BRANCH
REQ308   TM    BCTFLAG(RKEYEN),HIBIT   HIGH ORDER BIT ON
         BO    REQ305                  BRANCH-YES
         TM    BCTFLAG(RKEYEN),TOBIT   LINK TO SUBR
         BO    REQ307                  BRANCH-YES
         B     REQ305                  BRANCH
REQ306   MVC   W5(4),BFRLEN(RKEYEN)    KEY TO WORD5 OF ARRAY
         MVC   W7(4),CORVAL(RKEYEN)    CORVAL TO WORD 7 OF ARRAY
         L     RWORKC,W3A              LOAD GDS OFFSET VALUE
         SH    RWORKC,LOGSTRT(RKEYEN)  SUBTRACT LOGICAL START
         ST    RWORKC,W6               STORE VALUE IN WORD 6  OF ARRAY
         B     REQ305                  BRANCH
REQ500   CLI   TYPE,LPC                LITE PEN ATN
         BE    REQ501                  BRANCH IF YES
         TM    ATTNFLGA,EOSXY          XY WANTED ON EOS
         BC    1,REQ502                BRANCH IF YES
         BR    RWORKA                  RETURN
REQ502   CLC   XPOS(4),ZERO1           XY VALUE ZERO
         BNE   REQ503                  BRANCH IF NO
         BR    RWORKA                  RETURN
REQ503   SR    RWORKC,RWORKC           CLEAR REG
         SR    RWORKD,RWORKD           CLEAR REG
         XC    GDSNAME(24),GDSNAME     CLEAR PARAM LIST
         TM    SENSE+1,X'20'       CHECK IF CHAR ATTN            A37965
         BO    ADJUST              IF YES,ADJUST X,Y COORDS      A37965
         LH    RWORKC,XPOS         IF NO, SKIP ADJUST FIX        A37965
         LH    RWORKD,YPOS                                       A37965
         ST    RWORKC,XINPUT       USE DIRECT INPUT              A37965
         B     OLDCODE                                           A37965
* THE FOLLOWING CODE ADJUSTS THE COORDINATE VALUES RETURNED BY   A37965
* HARDWARE FOLLOWING A DETECT ON A CHARACTER TO THE CENTER OF    A37965
* CHARACTER DETECTED. HARDWARE RETURNS THE CENTER POINT OF THE   A37965
* NEXT CHARACTER GRID.                                           A37965
ADJUST   LH    RWORKC,XPOS         LOAD X FOR CHAR DETECT        A37965
         LA    RWORKD,BSCSPC       BASIC CHAR SPACING            A37965
         LA    RWORKB,BSCLINE      BASIC LINE SPACING            A37965
         TM    GDSCHARS,LRGSZE     CHECK GDS FOR LARGE CHARS     A37965
         BZ    ADJUSTX             BRANCH IF NOT LARGE CHARS     A37965
         LA    RWORKD,LRGSPC       LARGE CHAR SPACING            A37965
         LA    RWORKB,LRGLINE      LARGE LINE SPACING            A37965
ADJUSTX  EQU   *                                                 A37965
         SR    RWORKC,RWORKD       X MINUS CHAR SPACE            A37965
         BNM   XVALID              BRANCH IF X NOW VALID         A37965
         LA    RWORKC,XSCREEN      X=RIGHT LIMIT OF SCREEN       A37965
         TM    GDSSCISS,NOSCISS    CHECK GDS FOR NO SCISSORING   A37965
         BO    ADJUSTY             BRANCH IF NO SCISSORING       A37965
         SR    RWORKC,RWORKD       X=(MAX CHAR CENTER X)-SPACE   A37965
ADJUSTY  EQU   *                                                 A37965
         ST    RWORKC,XINPUT       X POS TO PARM LIST            A37965
         LH    RWORKD,YPOS         LOAD Y FOR CHAR DETECT        A37965
         AR    RWORKD,RWORKB       Y = Y+LINE SPACING            A37965
         LA    RWORKC,YSCREEN      MAX Y VALUE FOR CHAR CENTER   A37965
         CR    RWORKD,RWORKC       COMPARE Y TO SCREEN LIMIT     A37965
         BNH   YVALID              BRANCH IF Y NOW VALID         A37965
         LA    RWORKD,YLOWER       Y = MIN Y  VALUE FOR CHAR     A37965
         B     YVALID              GO SET UP FOR CONVERT RTN     A37965
XVALID   EQU   *                                                 A37965
         ST    RWORKC,XINPUT       X POS TO PARM LIST            A37965
         LH    RWORKD,YPOS         LOAD Y POS                    A37965
YVALID   EQU   *                                                 A37965
OLDCODE  ST    RWORKD,YINPUT       Y POS TO PARM LIST            A37965
         ST    RGDSCB,GDSNAME          ADR OF GDSCB TO PARM LIST
         LA    RWORKC,ONE              LOAD CONSTANT
         ST    RWORKC,CONVERT          STORE IN PARM LIST
         LA    RWORKC,GDSNAME          LOAD PARM ADR
         ST    RWORKC,P1               STORE IN PARM LIST
         LA    RWORKC,CONVERT          LOAD ADR
         ST    RWORKC,P2               STORE IN PARM LIST
         LA    RWORKC,XINPUT           LOAD ADR
         ST    RWORKC,P3               STORE IN PARM LIST
         LA    RWORKC,YINPUT           LOAD ADR
         ST    RWORKC,P4               STORE IN PARM LIST
         LA    RWORKC,XOUTPUT          LOAD ADR
         ST    RWORKC,P5               STORE IN PARM LIST
         LA    RWORKC,YOUTPUT          LOAD ADR
         ST    RWORKC,P6               STORE IN PARM LIST
         MVI   P6,LAST                 INDICATE LAST PARM
         L     RWORKC,RCA              LOAD RTN CODE ARRAY ADR
         ST    RWORKC,RCAB             STORE IN PARM LIST
         LA    RWORKC,P1               LOAD ADR
         ST    RWORKC,PASS             STORE IN PARM LIST
         LA    REG1,PASS               LOAD PLIST ADR
         LR    RGDSCB,RWORKA           SAVE RETN REG
         L     R15,ATTNBKPT        POINT TO PREV ATL OR GTM D11 ZA15437
         DROP  RATL                TEMPORARILY DROP RATL    D11 ZA15437
         USING ATTNLEVL,R15        ADDRESS ATTNLEVEL        D11 ZA15437
ATLAGN   CLC   ATTNLVID(2),GTMID   IS IT A GTMCB?           D11 ZA15437
         BE    GOTGTM              YES,CONTINUE CNVRT LOGIC D11 ZA15437
         L     R15,ATTNBKPT        LOAD A(ATL) OR A(GTM)    D11 ZA15437
         B     ATLAGN              TEST AGAIN               D11 ZA15437
GOTGTM   EQU   *                   GTM FOUND                D11 ZA15437
         USING GTMCB,R15           ADDRESS GTM              D11 ZA15437
         L     R15,GTMGSPCB        POINT TO GSPCB           D11 ZA15437
         USING GSPCB,R15           ADDR GSPCB               D11 ZA15437
         L     R15,GSPASTAT        POINT TO STATUS TABLE    D11 ZA15437
         DROP  R15                                          D11 ZA15437
         USING ATTNLEVL,RATL       RE-ADDRESS ATLVLCB       D11 ZA15437
         L     R15,CNVRT(R15)      AND TO CONVERT           D11 ZA15437
         LTR   R15,R15             CNVRT LOADED?            D11 ZA15437
         BZ    REQLINK1            NO,MUST USE SYSTEM LINK  D11 ZA15437
         BALR  R14,R15             GOTO CONVERT             D11 ZA15437
         B     REQRTN1             RETURN FROM CONVERT      D11 ZA15437
REQLINK1 LINK  EP=IFFAGA08,MF=(E,(1)) LINK TO CONVERT       D11 ZA15437
REQRTN1  MVC   W8(4),XOUTPUT       X POS TO WD 8 OF ARRAY   D11 ZA15437
         MVC   W9(4),YOUTPUT           Y POS TO WORD 9 OF ARRAY
         L     RWORKC,RCA              LOAD RTN CODE ARRAY ADR
         XC    ZERO(20,RWORKC),ZERO(RWORKC) INITIALIZE ARRAY
         BR    RGDSCB                  RETURN
REQ501   TM    ATTNFLGA,LPCHAR         CHARACTER CODE WANTED
         BC    14,REQ504               BRANCH IF NO
         MVC   W10(1),CHARACTR         CHARACTER TO WORD 10 OF ARRAY
REQ504   TM    ATTNFLGA,LPXY           XY POS WANTED
         BC    1,REQ503                BRANCH IF YES
         BR    RWORKA                  RETURN
***********************************************************************
*                  DIRECT ENTRY GOES HERE                             *
*                                                                     *
DIRECT   B     OUTRTN
*                                                                     *
*                                                                     *
***********************************************************************
IOTEST   CLI   DECB,IOK                I/O SUCCESSFULL CODE
         BCR   8,REG1                  BRANCH IF OK
         L     RWORKA,RCA              LOAD RTN CODE ARRAY ADR
         OI    ZERO(RWORKA),RCC5       INDICATE I/O ERROR
         B     OUTRTN                  RETURN TO CALLER
         DS    0F
ZERO1    DC    1F'0'                   ZERO
MIN1     DC    F'-1'                                               RSTH
PRIME    DC    X'80'                   PF PRIME BIT
         DC    AL3(0)
GTMID    DC    X'F202'             IDENTIFIER FOR GTM       D11 ZA15437
ANSIZE   DC    A(31)                   MAX PF SIZE
MAX      DC    A(36)                   MAX ALLOWABLE SOURCE VALUE
END      DC    A(32)                   END
LPD      DC    A(34)                   LP
EOSD     DC    A(35)                   EOS
CANCELD  DC    A(33)                   CANCEL
AED      DC    A(36)                   AE
SCANTWO  DC    A(2)                    SCAN VALUE OF TWO
THREE    DC    A(3)                    3
DIV256A  DC    A(256)                  256
SUBSEG   DC    A(128)                  SUB SEGMENT SPLIT POINT
PATCH    DC    64X'FF'             PATCH AREA               D11
         CNOP  0,8
         COPY  ATTNLEVL
         COPY  GDSCB
         COPY  GTMCB
         COPY  GSPCB
PLIST    DSECT
ATNLVL   DS    1F                      ATTN LEVEL
CODELOC  DS    1F                      CODE LOC
SCANWAIT DS    1F                      SCAN WAIT
ARRAY    DS    1F                      ARRAY
ATNSRCE  DS    1F                      1ST ATTN SOURCE
WORKAREA DSECT
PARAM    DS    1F                      USER PARAM LIST ADR
RCA      DS    1F                      RETURN CODE ARRAY ADR
SAVE     DS    18F                     SAVE AREA
DECB     DS    8F                      I/O AREA DECB
DATA     DS    1F                      I/O DATA AREA
GACB     DS    1F                      *
TYPEA    DS    BL1                     *
OPT      DS    BL1                     ATTNINQ  MACRO AREA
TYP      DS    1H                      *
BRANCH   DS    1F                      *
ANMASK   DS    1F                      SAVE AREA FOR ANMASK
PFMASK   DS    1F                      SAVE AREA FOR PFMASK
RSVD     DS    BL1                     RSVD
OVERLAY  DS    BL1                     OVERLAY CODE
KEYNO    DS    BL1                     KEY NUMBER
TYPE     DS    BL1                     ATTN TYPE
SENSE    DS    1F                      SENSE / MI DATA
XPOS     DS    1H                      X POS VALUE
YPOS     DS    1H                      Y POS VALUE
SAVE1    DS    1F                      GACB A/N MASK SAVE AREA
SAVE2    DS    1F                      GACB P/F MASK SAVE AREA
IDBYTE   DS    BL1                     GDS ID BYTE
CHARACTR DS    BL1                     CHARACTER BYTE
         DS    BL1
         DS    BL1
LOGDIF   DS    1F                      LOGICAL DIFFERENCE
GDSNAME  DS    1F
CONVERT  DS    1F
XINPUT   DS    1F
YINPUT   DS    1F
XOUTPUT  DS    1F
YOUTPUT  DS    1F
P1       DS    1F
P2       DS    1F
P3       DS    1F
P4       DS    1F
P5       DS    1F
P6       DS    1F
         ORG   WORKAREA+216            ALIGN TO A DOUBLE WORD BOUNDRY
PASS     DS    1F
RCAB     DS    1F
W3A      DS    1F
CCT      DS    1H
         DS    0F                                                  000A
LFORM    DS    16F                                                 000A
ARRAYUSE DSECT
W1       DS    1F
W2       DS    1F
W3       DS    1F
W4       DS    1F
W5       DS    1F
W6       DS    1F
W7       DS    1F
W8       DS    1F
W9       DS    1F
W10      DS    1F
         END
