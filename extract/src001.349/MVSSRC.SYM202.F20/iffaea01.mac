         TITLE 'IFFAEA01 - SDATM - SET DATA MODE'
*STATUS: CHANGE LEVEL 000
*
*FUNCTION/OPERATION:  SETS GDSDATMD TO INDICATE MODE AND FORM OF INPUT
*        COORDINATES PASSED FOR A GDS .
*
*        IF THE DATA MODE IS CHANGED BY THE CALL, THE MODE OF THE DATA
*        LIMITS IN THE GDSCB ARE CONVERTED AS NECESSARY.
*
*ENTRY POINTS: IFFAEA01
*
*INPUT:  REGISTER 1 POINTS TO A WORKAREA. THE FIRST WORD CONTAINS THE
*        ADDRESS OF THE PARAMETER LIST. THE SECOND CONTAINS THE ADDRESS
*        OF THE RETURN ARRAY
*
*        REQUIRED PARAMETERS ARE
*     +0 A(POINTER TO GDSCB)
*
*     +4 A(X-MODE CODE)
*
*        AN OPTIONAL PARAMETER IS
*     +8 A(Y-MODE CODE)
*        IF THIS IS NOT PRESENT, THE SAME MODE IS ASSUMED FOR X AND Y
*
*OUTPUT: NONE TO USER. GDSDATMD SWITCH IS SET IN THE GDSCB.
*
*EXTERNAL ROUTINES: IFFAHA15
*
*EXITS-NORMAL: VIA RETURN MACRO TO DIRECTOR
*
*     -ERROR: VIA RETURN MACRO TO DIRECTOR
*
*TABLES/WORKAREA: GSP WORKAREA
*
*ATTRIBUTES: PROBLEM STATE, REENTRANT
*
IFFAEA01 CSECT
         SAVE  (14,12)
         BALR  DAT09,0                 ESTABLISH ADDRESSABILITY
         USING *,DAT09                 FOR CSECT
*
         LR    DAT11,DAT01             ADDRESSABILITY FOR
         USING DATWORK,DAT11           WORKAREA
*
         LA    DAT02,DWKSAVE           CHAIN
         ST    DAT13,HSVA(DAT02)       SAVE AREAS
         ST    DAT02,MSVA(DAT13)       AND ESTABLISH
         LR    DAT13,DAT02             NEW SAVE AREA
         L     DAT10,DWKPARM           ADDRESSABILITY FOR
         USING DATPARM,DAT10           PARAMETER LIST
*
         L     DAT12,DPMGDSCB          ADDRESSABILITY FOR
         L     DAT12,0(DAT12)          GDSCB
         USING GDSCB,DAT12
*
         L     DAT08,DWKRTNA           ADDRESSABILITY FOR RETURN ARRAY
         USING GSPARRAY,DAT08          AND NULL VARIABLE
*
         XC    DWKDAT(4),DWKDAT        CLEAR WORKAREA
         C     DAT12,GDSGDSCB          IS GDSCB OPEN
         BNE   DAT010                  NO, SET RETURN CODE
*
         XC    DWKFIX(4),DWKFIX
         TM    DPMGDSCB,X'80'          UMODE PARAMETER PRESENT
         BO    DAT012                  NO, INVALID
         L     DAT02,DPMUMODE          GET ADDRESS OF UMODE
         CLC   DPMUMODE+1(3),GSPNULLV+1  EQUAL TO NULL VARIABLE
         BE    DAT012                  YES, INVALID CODE
         L     DAT03,0(DAT02)          GET VALUE OF PARAMETER
         C     DAT03,DAT0001           X REAL, ABSOLUTE
         BNE   DAT001                  CHECK FURTHER
         MVI   DWKDATA,XRA
         B     DAT004                  CHECK VMODE
*
DAT001   C     DAT03,DAT0002           X REAL, INCREMENTAL
         BNE   DAT002                  CHECK FURTHER
         MVI   DWKDATA,XRI
         B     DAT004                  CHECK VMODE
*
DAT002   C     DAT03,DAT0003           X INTEGER, ABSOLUTE
         BNE   DAT003                  CHECK FURTHER
         MVI   DWKDATA,XIA
         B     DAT004                  CHECK VMODE
*
DAT003   C     DAT03,DAT0004           X INTEGER, INCREMENTAL
         BNE   DAT012                  INVALID CODE
         MVI   DWKDATA,XII
*
DAT004   TM    DPMUMODE,X'80'          VMODE PASSED
         BO    DAT009                  NO, SET = UMODE
         L     DAT02,DPMVMODE          GET ADDRESS OF VMODE
         CLC   DPMVMODE+1(3),GSPNULLV+1  EUAL TO NULL VARIABLE
         BE    DAT009                  YES, SET = UMODE
*
         L     DAT03,0(DAT02)          GET VALUE OF PARAMETER
         C     DAT03,DAT0001           Y REAL, ABSOLUTE
         BNE   DAT005                  CHECK FURTHER
         OI    DWKDATA,YRA
         B     DAT008                  SET GDSDATMD
*
DAT005   C     DAT03,DAT0002           Y REAL, INCREMENTAL
         BNE   DAT006                  CHECK FURTHER
         OI    DWKDATA,YRI
         B     DAT008                  SET GDSDATMD
*
DAT006   C     DAT03,DAT0003           Y INTEGER, ABSOLUTE
         BNE   DAT007                  CHECK FURTHER
         OI    DWKDATA,YIA
         B     DAT008                  SET GDSDATMD
*
DAT007   C     DAT03,DAT0004           Y INTEGER, INCREMENTAL
         BNE   DAT013                  INVALID CODE
         OI    DWKDATA,YII
*
DAT008   MVC   DWKDLLX(16),GDSUVLLL    GET DATA LIMITS
         TM    GDSDATMD,XREAL          OLD X-MODE IS REAL
         BZ    DAT014                  NO
         TM    DWKDATA,XREAL           YES, NEW X-MODE IS REAL
         BZ    DAT015                  NO, CONVERT
DAT0080  TM    GDSDATMD,YREAL          YES, OLD Y-MODE IS REAL
         BZ    DAT016                  NO
         TM    DWKDATA,YREAL           YES, NEW Y MODE IS REAL
         BZ    DAT017                  NO, CONVERT
DAT0081  MVC   GDSUVLLL(16),DWKDLLX    STORE NEW DATA LIMITS AND
         MVC   GDSDATMD(1),DWKDATA     DATA MODE SWITCH
         MVI   GSPARRAY,X'00'          GOOD RETURN
         L     DAT13,HSVA(DAT13)
         RETURN (14,12)
*
DAT009   L     DAT03,DWKDAT            GET SWITCH SETTING FOR UMODE
         SRL   DAT03,4                 SHIFT INTO POSITION FOR VMODE
         O     DAT03,DWKDAT            ASSEMBLE FULL SWITCH
         ST    DAT03,DWKDAT            AND STORE
         B     DAT008                  SET GDSDATMD
DAT010   MVC   GSPARRAY+16(4),DAT0001  GDSCB NOT OPEN
DAT011   OI    GSPARRAY,BIT4           PARAMETER ERROR
         L     DAT13,HSVA(DAT13)
         RETURN (14,12)
*
DAT012   MVC   GSPARRAY+16(4),DAT0002  UMODE INVALID
         B     DAT011
*
DAT013   MVC   GSPARRAY+16(4),DAT0003  VMODE INVALID
         B     DAT011
*
DAT014   TM    DWKDATA,XREAL           NEW X-MODE IS REAL
         BZ    DAT0080                 NO, NO CONVERSION NECESSARY
         LA    DAT01,DWKDLLX           CONVERT
         BAL   DAT14,DATFLOAT          DLLX AND DURX
         LA    DAT01,DWKDURX           TO REAL VALUES
         BAL   DAT14,DATFLOAT
         B     DAT0080                 TEST Y MODES
*
DAT015   L     DAT02,GSPASTAT          IS CONVERSION ROUTINE IN CORE
         CLC   HA15(4,DAT02),DAT0000D
         BC    7,DAT015A               YES, GET ADDRESS
         LOAD  EP=IFFAHA15             NO, LOAD IT
         ST    DAT00,HA15(DAT02)       STORE ADDRESS IN STAT TAB
DAT015A  MVC   DWKFIX(4),HA15(DAT02)   GET ADDRESS IN WORKAREA
         L     DAT15,DWKFIX                     AND REGISTER 15
         L     DAT01,DWKDLLX           CONVERT
         CALL  (15)                    DLLX
         ST    DAT01,DWKDLLX           AND
         LTR   DAT15,DAT15             DURX
         BP    DAT018                  FROM
         L     DAT01,DWKDURX           REAL
         L     DAT15,DWKFIX            TO
         CALL  (15)                    INTEGER
         LTR   DAT15,DAT15
         BP    DAT018
         ST    DAT01,DWKDURX
         B     DAT0080
*
DAT016   TM    DWKDATA,YREAL           NEW Y MODE IS REAL
         BZ    DAT0081                 NO, NO CONVERSION NECCESSARY
         LA    DAT01,DWKDLLY           CONVERT
         BAL   DAT14,DATFLOAT          DLLY AND DURY
         LA    DAT01,DWKDURY           FROM INTEGER
         BAL   DAT14,DATFLOAT          TO REAL
         B     DAT0081
*
DAT017   CLC   DWKFIX(4),DAT0000D      SEE IF CONVERSION ALREADY IN
         BNE   DAT017B                 HAVE ADDRESS IN WORKAREA
         L     DAT02,GSPASTAT
         CLC   HA15(4,DAT02),DAT0000D  SEE IF IN CORE
         BNE   DAT017A                 YES, PUT ADDRESS IN WORKAREA
         LOAD  EP=IFFAHA15             NO, LOAD IT
         ST    DAT00,HA15(DAT02)       STORE ADDRESS IN STAT TAB
DAT017A  MVC   DWKFIX(4),HA15(DAT02)   GET ADDRESS IN WORKAREA
DAT017B  L     DAT15,DWKFIX            GET ADDRDSS IN REGISTER 15
         L     DAT01,DWKDLLY           CONVERT
         CALL  (15)                    DLLY
         LTR   DAT15,DAT15             AND
         BP    DAT018                  DURY
         ST    DAT01,DWKDLLY           FROM
         L     DAT01,DWKDURY           REAL
         L     DAT15,DWKFIX            TO
         CALL  (15)                    INTEGER
         LTR   DAT15,DAT15
         BP    DAT018
         ST    DAT01,DWKDURY
         B     DAT0081
*
DAT018   OI    GSPARRAY,SCERR          SCALING ERROR IF REAL TO
         XC    GSPARRAY+8(4),GSPARRAY+8
         L     DAT13,HSVA(DAT13)       INTEGER CONVERSION CANNOT
         RETURN (14,12)                BE MADE
*
DATFLOAT CLC   0(4,DAT01),DAT0000D     SEE IF NUMBER TO BE FLOATED
*                                      IS EQUAL TO ZERO
         BCR   8,DAT14                 YES, RETURN
         MVC   DWKDBLE(4),DATCON       SET UP CONVERSION CONSTANT
         TM    0(DAT01),X'80'          NEGATIVE NUMBER
         BO    DATFLT2                 YES, SET SIGN BIT
DATFLT1A MVC   DWKDBLE+4(4),0(DAT01)   NO, MOVE NUMBER INTO AREA
DATFLT1  LD    DAT00F,DWKDBLE          NORMALIZE IT
         AD    DAT00F,DAT0000D
         STE   DAT00F,0(DAT01)         STORE IT
         BR    DAT14                   RETURN
*
DATFLT2  OI    DWKDBLE,X'80'           SET SIGN BIT
         CLC   DATMXNEG(4),0(DAT01)    MAXIMUM NEGATIVE NUMBER
         BE    DATFLT1A
         L     DAT02,0(DAT01)          GET MAGNITUDE
         LPR   DAT02,DAT02             OF NUMBER
         ST    DAT02,DWKDBLE+4
         B     DATFLT1
*
DAT0001  DC    F'1'
DAT0002  DC    F'2'
DAT0003  DC    F'3'
DAT0004  DC    F'4'
         DS    0D
DAT0000D DC    XL8'00'
DATCON   DC    XL4'4E000000'
DATMXNEG DC    XL4'80000000'
HSVA     EQU   4
MSVA     EQU   8
*
*        REGISTER EQUATES
*
DAT00    EQU   0
DAT01    EQU   1                       PARAMETER LIST REGISTER
DAT02    EQU   2                       WORK REGISTERS
DAT03    EQU   3
DAT08    EQU   8                       BASE REGISTER-RETURN ARRAY
*                                           AND NULL VARIABLE
DAT09    EQU   9                       BASE REGISTER-CSECT
DAT10    EQU   10                      BASE REGISTER-PARAMETER LIST
DAT11    EQU   11                      BASE REGISTER-WORKAREA
DAT12    EQU   7                       BASE REGISTER-GDSCB
DAT13    EQU   13
DAT14    EQU   14
DAT15    EQU   15
DAT00F   EQU   0
*
*        SWITCH SETTINGS
*
XRA      EQU   X'80'                   X REAL, ABSOLUTE
XRI      EQU   X'40'                   X REAL, INCREMENTAL
XIA      EQU   X'20'                   X INTEGER, ABSOLUTE
XII      EQU   X'10'                   X INTEGER, INCREMENTAL
YRA      EQU   X'08'                   Y REAL ABSOLUTE
YRI      EQU   X'04'                   Y REAL, INCREMENTAL
YIA      EQU   X'02'                   Y INTEGER, ABSOLUTE
YII      EQU   X'01'                   Y INTEGER, INCREMENTAL
XREAL    EQU   X'C0'
YREAL    EQU   X'0C'
SCERR    EQU   X'20'
BIT4     EQU   X'08'                   INVALID PARAMETER
HA15     EQU   X'39C'                  STAT TAB DISPLACEMENT
DATWORK  DSECT
DWKPARM  DS    F
DWKRTNA  DS    F
DWKDAT   DS    CL3
DWKDATA  DS    C
DWKFIX   DS    F
DWKDLLX  DS    F
DWKDLLY  DS    F
DWKDURX  DS    F
DWKDURY  DS    F
DWKSAVE  DS    18F
DWKDBLE  DS    D
DATPARM  DSECT
DPMGDSCB DS    F
DPMUMODE DS    F
DPMVMODE DS    F
*
         COPY  GDSCB
         COPY  GSPCB
         END
