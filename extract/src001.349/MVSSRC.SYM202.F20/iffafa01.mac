         TITLE 'IFFAFA01 -- PLINE / PPOINT MODULE'          D11
*
*        PLINE AND PPOINT ARE ENTERED FROM DIRECTOR PART 2 WITH THE
*        ADDRESS OF A WORK AREA IN REGISTER 1.  THE FIRST WORD OF THE
*        WORK AREA CONTAINS THE ADDRESS OF THE PARAMETER LIST BELOW.
*
*                             PLINE AND PPOINT
*
*                             INPUT PARAMETER LIST
*
*                             +0  A(GDSVAR)
*                             +4  A(X-COORD)
*                             +8  A(Y-COORD)
*                             +12 A(CORVAL)
*                             +16 A(KEY)
*                             +20 A(GENCODE)
*                             +24 A(COUNT)
*                             +28 A(X-INDEX)
*                             +32 A(Y-INDEX)
*                             +36 A(X-INCR)
*                             +40 A(Y-INCR)
*
*        EXTERNAL ROUTINES CALLED:
*
*        SCALE-IFFAHA06
*        SCISSOR-IFFAHA07
*        KEY TABLE MANAGEMENT- IFFAHA03
*        DATA GENERATOR-IFFAHA04
*        UPDATE-IFFAHA13 AND IFFAHA14
*        EXTERNAL MACROS USED:
*
*        LINK
*
         EJECT
*        PLINE AND PPOINT WILL SPEND A GOOD PORTION OF ITS TIME
*        BUILDING A PARAMETER LIST WHICH IS USED AS THE INPUT
*        PARAMETER LIST TO SCALE, SCISSOR, DATA GENERATOR, AND
*        UPDATE.
*
*        WORD 0 IS THE KEY WHICH IS RETURNED TO THE USER.  THE FIRST
*        HALFWORD CONTAINS THE LENGTH OF THE ELEMENT AND THE SECOND
*        HALFWORD CONTAINS THE LOGICAL START ADDRESS OF THE ELEMENT.
*
*        WORD 1 CONTAINS BIT SWITCHES.
*        BIT 0: 0=SINGLE ENTRY/1=MULTIPLE ENTRY
*        BIT 1: INITIALIZED TO ZERO.  SET BY DATA GEN TO SHOW IF
*        FOR A SINGLE ENTRY IF THE DATA CONTAINS A SET MODE ORDER.
*        BITS 2,3,4:
*        000 IS VECTOR INPUT
*        010 IS POINT INPUT
*        BIT 5: 0=OMIT/1=INCLUDE
*        BITS 6&7:
*        00 IS ABSOLUTE OUTPUT
*        01 IS INCREMENTAL OUTPUT
*        11 IS OPTIMIZED OUTPUT
*        BITS 8-15: ARE RESERVED AND INITIALIZED TO ZERO. DATA
*        GEN WILL PLACE THE BYTE OF DATA CONTAINING THE BEAM BIT
*        HERE IF IT IS A SINGLE ENTRY WHICH IS KEYED OR CORRELATED.
*        BITS 16&17:
*        00 IS FIRST PASS
*        01 IS NOT FIRST PASS, NOT LAST PASS
*        11 IS LAST PASS
*        FOR SINGLE ELEMENTS THIS IS SET TO FIRST PASS.
*        BIT 18: 0=DATA NOT KEYED/1=DATA KEYED
*        BIT 19: 0=DATA NOT CORRELATED/1=DATA CORRELATED
*        BIT 20: 0=BEAM OFF/1=BEAM ON
*        BIT 21: 0=REPOSITION/1=NO REPOSITIONING
*        BITS 22&23: RESERVED AND SET TO ZERO
*        BIT 24: 0=NOT PART OF A SUBROUTINE/1:PART OF A SUBROUTINE
*        BIT 25: 0=NOT PART OF A SEQUENCE/1=PART OF A SWQUEN
*        BIT 25: 0=NOT PART OF A SEQUENCE/1=PART OF A SEQUENCE
*        BITS26-31: RESERVED AND SET TO ZERO
*
*
*
         EJECT
*        WORD 2 CONTAINS THE CORVAL
*
*        WORD 3 CONTAINS THE ADDRESS OF THE KEY.
*
*        WORD 4 CONTAINS THE ADDRESS OF THE GDSCB.
*
*        WORDS5,6,7&8: ARE SET TO ZERO AND IF A POSITIONING
*        VECTOR IS REQUIRED BECAUSE OF PREVIOUS SCISSORING, SCISSOR
*        WILL FILL THE FIELDS IN WITH X ABSOLUTE, Y ABSOLUTE,
*        X INCREMENTAL, AND Y INCREMENTAL FOR THE POSITIONING
*        VECTOR.
*
*        WORD 9 CONTAINS X ABSOLUTE.
*
*        WORD 10 CONTAINS Y ABSOLUTE.
*
*        WORD 11 CONTAINS X INCREMENTAL.
*
*        WORD 12 CONTAINS Y INCREMENTAL.
*
*        THE ABOVE WORDS WILL BE SET FROM THE INPUT PASSED AS EITHER
*        INCREMENTAL OR ABSOLUTE IN USERS UNITS.  SCALE WILL CONVERT
*        TO RASTER UNITS AND FILL IN THE FORM NOT PASSED.
*
*        WORD 13 CONTAINS THE TOTAL X INCREMENT THUS FAR.
*
*        WORD 14 CONTAINS THE TOTAL Y INCREMENT THUS FAR.
*
*        THE ABOVE WORDS ARE USED IF AN INCREMENTAL REPOSITIONING
*        VECTOR IS REQUIRED TO REPOSITION WHEN THE ELEMENT IS IN
*        OMIT STATUS.
*
*        WORD 15 CONTAINS THE ELEMENT COUNT.  IT IS SET TO ZERO
*        ORIGINALLY AND INCREMENTED BY SCALE. IF THERE IS A
*        SCALING OR SCISSORING ERROR THE ELEMENT NUMBER IS PLACED
*        IN THE RETURN ARRAY.
*
*
         EJECT
*
*        PLINE IS ENTERED AT THE TOP OF THE MODULE AND AFTER SAVING
*        REGISTERS A REGISTER IS SET TO ZERO AS A SWITCH TO SAY
*        THAT PLINE WAS CALLED.  PPOINT IS ENTERED AT IFFAFA16 AND
*        A REGISTER IS SET TO ONE TO SAY THAT PPOINT WAS CALLED.
*        ALL FUTURE COMMENTS WILL REFER TO THIS MODULE BY THE NAME
*        PLINE.
*
IFFAFA01 CSECT                     PLINE
*2055,270000-272000                                                000A
*D539500,D541400                                                 YM1963
*A459500-459980,A750600-750920                                LD YM5163
*A468600,A780600                                            D11 ZA04161
*A468300,A480300                                            D11 ZA04162
*C538000-540000,A541000-542050,C577000-580000,542100-542300 D11 ZA15418
*587000-590000,A813200-813400                               D11 ZA15418
*C472000,D474000-482000                                     E12 ZA17700
         ENTRY IFFAFA16
         USING *,15
         SAVE  (14,12)
         LA    REGA,0              SET PLINE FLAG
         B     PLT00100
         DROP  15
IFFAFA16 SAVE  (14,12)             ENTRY-PPOINT
         LA    REGA,1              SET POINT FLAG
*
*        THE BASE REGISTER IS SET UP, THE WORK AREA DSECT IS
*        INITIALIZED, AND THE RETURN ARRAY IS INITIALIZED.  THE GDSCB
*        IS INITIALIZED AND CHECKED FOR VALIDITY.  THE SAVE AREAS
*        ARE CHAINED.  THE INPUT PARAMETER LIST FOR DATA GEN IS
*        SET TO ZERO AND THE SKELETON SWITCHES ARE SET.  THE INITIAL
*        SETTINGS ARE SINGLE ELEMENT, VECTOR, INCLUDE STATUS,
*        OPTIMIZE OUTPUT, FIRST PASS, NOT KEYED, NOT CORRELATED,
*        BEAM ON AND A REPOSITIONING VECTOR REQUIRED.  THE GDSCB
*        ADDRESS AND RETURN ARRAY ADDRESS ARE PLACED IN THE PARAMETER
*        LIST.  GDSDATMD SWITCH IN THE GDSCB IS SAVED IN CASE IT
*        MUST BE CHANGED TEMPORARILY FOR SCALE IN THE CASE OF
*        BUFFER SUBROUTINE MEMBERS REQUIRING INCREMENTAL INPUT.
*
PLT00100 BALR  BASE,0
         USING *,BASE
         LR    WORK,PARM           WORK AREA
         USING WORKAREA,WORK
         ST    REGA,WRKSWTCH       SET SWITCH FOR LINE OR POINT
         L     PARM,WRKPARM        LOAD PARM LIST ADDR
         L     ERRCD,WRKRTNCD
         XC    0(20,ERRCD),0(ERRCD) ZERO RETURN ARRAY
         L     GDSREG,GDS(PARM)    GDS VAR ADDR
         L     GDSREG,0(GDSREG)    GDSCB ADDR
         USING GDSCB,GDSREG
         MVC   WRKSWTCH+2(1),GDSDATMD  TEMP SETTING OF DZT MODE
         LA    REGA,WRKSAVE        CHAIN SAVE AREAS
         ST    REGA,8(SAVE)
         ST    SAVE,4(REGA)
         LR    SAVE,REGA
         C     GDSREG,GDSGDSCB     IS GDSCB VALID
         BNE   ERR1                NO
         XC    WRKSPVSR(12),WRKSPVSR ZERO SUPERVISOR PARAMETER LIST
         XC    WRKADDR(68),WRKADDR ZERO PARM LIST
         MVC   WRKBITS,BITS        MOVE IN SKELETON
         ST    GDSREG,WRKGDS       GDSCB ADDR
         MVC   WRKRTN,WRKRTNCD     RTN CODE ADDR
         TM    GDSFLAGS,SUBR       PART OF SUBR
         BZ    PLT00150            YES,GO CHANGE DATA INPUT SWITCH
         OI    WRKBITS+3,MEMSUB    SET SUBR SW
*
*        THE PRESENCE OF THE X AND Y PARAMETERS IS CHECKED AND THEY
*        ARE PICKED UP IN REGISTERS AND PLACED IN THE DATA ARRAY
*        DEPENDING ON WHETHER THEY ARE INCREMENTAL OR ABSOLUTE.
         EJECT
PLT00150 L     REGE,ONE            SET COUNT TO ONE
         TM    GDS(PARM),LAST      LAST PARM
         BO    ERRPRM              YES-ERROR
         L     REGA,X(PARM)        X ADDR
         L     REGA,0(REGA)        X VALUE
         TM    GDSDATMD,XABS       IS X ABS
         BZ    PLT01600            NO
         ST    REGA,WRKXABS
PLT00200 TM    X(PARM),LAST        LAST PARM
         BO    ERRPRM
         L     REGB,Y(PARM)        Y ADDR
         L     REGB,0(REGB)        Y VALUE
         TM    GDSDATMD,YABS       IS Y ABS
         BZ    PLT01700
         ST    REGB,WRKYABS
*
*        IF THE CORVAL IS PASSED AND THE GDS IS NOT A LEVEL 2 GDS
*        IT IS PLACED IN THE PARAMETER LIST.  IF THE KEY IS PASSED
*        THE ADDRESS OF THE VARIABLE IS PLACED IN THE PARAMETER
*        LIST.  IF THE KEY IS A LEVEL 2 KEY THE SWITCH IN THE PARAMETER
*        LIST IS NOT SET BECAUSE IT WOULD CAUSE THE GENERATION
*        OF THE INCLUDE/OMIT STRUCTURE WHICH IS USELESS IN A LEVEL 2
*        ENVIRONMENT.
PLT00300 TM    Y(PARM),LAST        ANY OPTIONAL PARMS.
         BO    PLT02000            NO
         CLC   NULL+1(3,ERRCD),COR+1(PARM) IS CORVAL NULL
         BE    PLT00400            NO
         TM    GDSFLAGS,LEVEL2
         BO    PLT00400
         L     REGD,COR(PARM)      LOAD ADDR OF CORVAL
         MVC   WRKCORVL,0(REGD)    PLACE CORVAL IN PARM LIST
         OI    WRKBITS+2,CORRE     SET CORVAL SW
PLT00400 TM    COR(PARM),LAST      ANY MORE
         BO    PLT02000            NO
         CLC   NULL+1(3,ERRCD),KEY+1(PARM) IS KEY NULL
         BE    PLT00500            YES
         MVC   WRKKEY,KEY(PARM)    PLACE ADDR OF KEY IN LIST
         TM    GDSFLAGS,LEVEL2     LEVEL 2 KEY
         BO    PLT00500            YES
         OI    WRKBITS+2,KEYED     NO SET KEYED SO IN PRM LST
         EJECT
*
*        THE GENCODE IS CHECKED.  IF ONE THE SWITCH IS ALREADY SET.
*        FOR 2 OR 3 A KEY OR CORVAL MUST BE PRESENT.  A GENCODE OF
*        2 FOR A LEVEL 2 GDS IS INVALID.  IF THE GENCODE IS THREE,
*        AND THIS IS A LEVEL 1 GDS THE KEY OR CORVAL IS SEARCHED
*        FOR IN THE KEY TABLE.
PLT00500 TM    KEY(PARM),LAST      MORE
         BO    PLT02000            NO
         CLC   NULL+1(3,ERRCD),GEN+1(PARM) IS GENCODE NULL
         BE    PLT00600            NO
         L     REGD,GEN(PARM)      ADDR OF CODE
         L     REGD,0(REGD)        CODE
         C     REGD,ONE            INCLUDE
         BE    PLT00600            YES ALREADY SET
         CLC   WRKCORVL(8),ZERO
         BZ    ERR3                NO
         C     REGD,TWO            OMIT
         BNE   PLT00700            NO
         TM    GDSFLAGS,LEVEL2     LEVEL2
         BO    ERR3                YES-ERROR
         NI    WRKBITS,OMIT        TURN OFF INCLUDE SW
PLT00600 TM    WRKBITS+2,CORRE     CORRELATED
         BZ    PLT00950
         CLC   WRKCORVL,ZERO       IS CORVAL ZERO
         BE    ERR4                BAD CORVAL
         B     PLT00950
PLT00620 OI    GDSDATMD,XINTINC    SET X INPUT INTEGER,INC
         B     PLT02870            P
PLT00640 OI    GDSDATMD,YINTINC    Y INPUT INTEGER INC
         B     PLT02880
         EJECT
*
*        THE LOGICAL START ADDRESS AND THE LENGTH OF THE KEY FOR
*        THE UPDATE ELEMENT ARE SAVED.
*
PLT00700 C     REGD,THREE
         BNE   ERR3                BAD GENCODE
         TM    GDSFLAGS,SUBR       ARE WE CURRENTLY GEN A SUBR
         BO    ERRPRM              YES, THIS CALL INVALID
         TM    GDSFLAGS,LEVEL2     LEVEL2
         BO    PLT01800            SET KEY
         TM    WRKBITS+2,KEYED     KEY
         BZ    PLT01900            NO
         L     REGD,KEY(PARM)      LOAD KEY ADDR
*//
*//      SEARCH ON KEY
*//
         ST    REGD,WRKKADDR       ADDR OF KEY
         ST    GDSREG,WRKGDS1      GDSCB
         LA    REGD,TWO            CODE TO SEARCH ON KEY
         ST    REGD,WRKCODE
PLT00800 LA    PARM,WRKGDS1
         L     REGD,GDSGTMCB       GET POINTER TO GTMCB            000A
         L     REGD,4(REGD)        GET POINTER TO GSPCB            000A
         L     REGD,FE(REGD)       GET POINTER TO STATUS TABLE     000A
         L      REGFIFTN,ETE(REGD) GET ADRS OF KEY TABLE MGMT      000A
         BALR  RETURN,REGFIFTN     BRANCH TO KEY TABLE MGMT        000A
         LTR   REGFIFTN,REGFIFTN
         BNE   ERRPRM              INVALID KEY
         MVC   WRKADDR,0(PARM)     MOVE IN KEY START
         TM    4(PARM),INCL        WAS PREVIOUS INCLUDE
         BO    PLT00820            YES
         NI    WRKBITS,OMIT        SET TO OMIT
PLT00820 MVC   WRKBITS+3(1),7(PARM)    MOVE IN SEQ/SUBR MEMBER SW
         ST    PARM,WRKKEY         SAVE ADDR OF KEY IN KEY TABLE
PLT00900 OI    WRKSWTCH,UPDATE     SET UPDATE SWITCH
         L     PARM,WRKPARM        RESET REG
         EJECT
*
*        THE COUNT IS CHECKED AND IF GREATER THAN ONE THE INDEX AND
*        INCREMENT PARAMETERS MUST BE CHECKED FOR. IF NONE ARE
*        PASSED, THE INDEX IS ASSUMED TO BE ONE.  IF BOTH INDEX AND
*        INCREMENT ARE PASSED, IT IS AN ERROR.  THE PRESENCE OF
*        ONE OR THE OTHER IS VERIFIED AND FLAGS ARE SET TO SHOW
*        WHICH ONE WAS PASSED AND THE INCREMENT OR INDEX IS SAVED.
PLT00950 TM    GEN(PARM),LAST      IS THIS LAST
         BO    PLT02000            YES
         CLC   NULL+1(3,ERRCD),CT+1(PARM)  IS COUNT NULL
         L     REGE,ONE            SET CT=1
         BE    PLT02000            YES
         L     REGE,CT(PARM)
         L     REGE,0(REGE)        PLACE COUNT IN REGE
         C     REGE,ZERO           IS COUNT=0
         BE    PLT02700            YES,RETURN
         BL    ERR7                LOWER=ERROR
         C     REGE,ONE            COUNT=1
         BE    PLT02000            YES
         TM    CT(PARM),LAST       LAST
         BO    PLT01300            YES
         CLC   NULL+1(3,ERRCD),XINDEX+1(PARM) IS X INDEX NULL
         BE    PLT01000            YES
         L     REGD,XINDEX(PARM)
         L     REGD,0(REGD)
         ST    REGC,WRKTEMP        SAVE NULL VARIABLE
         M     REGC,FOUR           MULTIPLY INDEX BY FOUR
         L     REGC,WRKTEMP        RELOAD REGISTER
         ST    REGD,WRKXCHNG       PLACE INDEX IN AREA
         OI    WRKSWTCH+1,XINDX
PLT01000 TM    XINDEX(PARM),LAST   IS THIS THE LAST PARAMETER ?
         BO    PLT01300
         CLC   NULL+1(3,ERRCD),YINDEX+1(PARM) IS Y INDEX NULL
         BE    PLT01100            YES
         L     REGD,YINDEX(PARM)
         L     REGD,0(REGD)        PICK UP INDEX
         ST    REGC,WRKTEMP        SAVE NULL VARIABLE
         M     REGC,FOUR           MULTIPLY DISP BY FOUR
         L     REGC,WRKTEMP        LOAC NULL AGAIN
         ST    REGD,WRKYCHNG       PLACE INDEX IN AREA
         OI    WRKSWTCH+1,YINDX
         EJECT
PLT01100 TM    YINDEX(PARM),LAST   IS Y INDEX LAST PARM
         BO    PLT01300
         CLC   NULL+1(3,ERRCD),XINCR+1(PARM) IS X INCR NULL
         BE    PLT01200            YES
         TM    WRKSWTCH+1,XINDX    XINDEX ALSO PASSED
         BO    ERRPRM              YES-ERROR
         L     REGD,XINCR(PARM)
         MVC   WRKXCHNG,0(REGD)    SAVE INCR
         OI    WRKSWTCH+1,XINC     SET SW
PLT01200 TM    XINCR(PARM),LAST    LAST
         BO    PLT01300            YES
         CLC   NULL+1(3,ERRCD),YINCR+1(PARM) IS Y INCR NULL
         BE    PLT01300
         TM    WRKSWTCH+1,YINDX    YINDEX PASSED ALSO
         BO    ERRPRM              YES,ERROR
         L     REGD,YINCR(PARM)
         MVC   WRKYCHNG,0(REGD)    SAVE INCR
         OI    WRKSWTCH+1,YINC
PLT01300 TM    WRKSWTCH+1,XINDX+XINC    IS AN X PASSED
         BZ    PLT01500
PLT01400 TM    WRKSWTCH+1,YINDX+YINC    IS A Y PASSED
         BM    PLT02000
         MVC   WRKYCHNG,FOUR            NO
         OI    WRKSWTCH+1,YINDX         SET INDEX=4
         B     PLT02000
PLT01500 MVC   WRKXCHNG,FOUR
         OI    WRKSWTCH+1,XINDX         SET INDEX=4
         B     PLT01400
PLT01600 ST    REGA,WRKXINCR       STORE X INCR
         B     PLT00200
PLT01700 ST    REGB,WRKYINCR       STORE Y INCR
         B     PLT00300
PLT01800 L     REGD,KEY(PARM)      LOAD KEY ADDR
         MVC   WRKADDR,0(REGD)     PLACE KEY IN PARM LIST
         B     PLT00900
PLT01900 CLC   WRKCORVL,ZERO
         BE    ERRPRM              BAD PARM COMBINATION
*//
*//      SEARCH ON CORVAL KEY RETURNED IN REG1
*//
         LA    REGD,WRKCORVL       ADDR OF CORVAL
         ST    REGD,WRKKADDR       IN PARM LIST
         LA    REGD,FIVE           CODE SEARCH ON CORVAL
         ST    REGD,WRKCODE        IN CODE
         ST    GDSREG,WRKGDS1      GDSCB ADDR
         B     PLT00800
         EJECT
**
**       ALL THE PARAMETERS ARE CHECKED WE WILL NOW GET SOME
**       DATA GENERATED.
**
*
*        THE SWITCH SET ON ENTRY IN THE REGISTER WHICH HAS SINCE
*        BEEN PLACED IN STORAGE IS CHECKED FOR VECTOR OR POINT
*        AND THE SWITCH IS SET IN THE PARAMETER LIST. IF THE
*        CALL IS A MULTIPLE CALL THE SWITCH IS SET. IF IT IS
*        A SEQUENCE MEMBER OR A SUBROUTINE MEMBER THE SWITCH IS
*        SET. THE OUTPUT MODE IS SET TO INCREMENTAL FOR PART
*        OF A SUBROUTINE, OTHERWISE IT IS SET ACCORDING TO THE
*        GDSCURMD.  THE GDSXLAST, GDSYLAST, GDSXCURR, AND GDSYCURR
*        FIELDS ARE SAVED IN CASE THE CALL FAILS AND RESET IS
*        NECESSARY. IF NOT UPDATE THE LOGICAL ADDRESS FROM THE
*        OACB IS PLACED IN THE KEY. IF UPDATE THE UPDATE GDOAS
*        WILL BE OBTAINED NOW.
PLT02000 TM    WRKSWTCH+3,POINT    POINT
         BZ    PLT02100            NO
         OI    WRKBITS,PT          SET SW FOR POINT
PLT02100 C     REGE,ONE            MULTIPLE
         BE    PLT02150
         OI    WRKBITS,MULT        SET SW MULTIPLE ENTRY
PLT02150 TM    WRKSWTCH,UPDATE     IS THIS AN UPDATE
         BO    PLT02200            YES BYPASS CHECK
         TM    GDSFLAGS,SEQ        PART OF A SEQUENCE
         BZ    PLT02200            NO
         OI    WRKBITS+3,MEMSEQ    YES SET SW IN KEY
PLT02200 TM    WRKBITS+3,MEMSUB    PART OF A SUBROUTINE
         BO    PLT02850            YES, INCREMENTAL
         TM    GDSCURMD,OPT        OPTIMIZE
         BO    PLT02300            YES, ALREADY SET
         TM    GDSCURMD,INC        INCR
         BO    PLT02900            YES
         XI    WRKBITS,ABSSW       SET TO ABSOLUTE
PLT02300 MVC   WRKXCURR(4),GDSXCURR SAVE X-Y CURR
         MVC   WRKXLAST(8),GDSXLAST SAVE X-Y LAST
         TM    WRKSWTCH,UPDATE     UPDATE
         BO    PLT03200            YES
         L     REGD,GDSAOACB       OACB
         L     REGD,CURRLOG(REGD)  LOGICAL START
         STH   REGD,WRKADDR+2      IN ELEMENT
*
*        IF THE ELEMENT IS A MULTIPLE ONE THE FUTURE LOOP IS SET
*        UP. THE ADDRESS OF THE GDSCB IN THE PARAMETER LIST
*        WE HAVE BEEN BUILDING IS PLACED IN REGISTER 1 AND THE
*        DATA IS SCALED. IF THE CALL IS TO A BUFFER SUBROUTINE
*        MEMBER NO SCISSORING WILL TAKE PLACE. IF THE OPTION
*        IS NO SCISSORING THE GDSXLAST, GDSYLAST, GDSXCURR,
*        AND GDSYCURR FIELDS IN THE GDSCB ARE UPDATED. THE
*        SCISSORING FLAGS ARE ALSO SET SUCH THAT IT APPEARS AS
*        IF THE LAST CALL WAS ON THE SCREEN AND ON THE GRID.
PLT02350 OI    WRKSWTCH,FIRST      SET FIRST TIME SWITCH SO THAT THE
*        FIRST CALL TO DATA GENERATOR IS NOT BYPASSED BECAUSE OF NO
*        MOVEMENT FROM THE LAST BEAM POSITION
         C     REGE,ONE            MORE THAN ONE
         BH    PLT03400            YES SET UP FUTURE LOOP
         EJECT
*
*        COUNT IN REGE   X IN REGA  Y IN REGB
*
PLT02400 LA    PARM,WRKGDS
*/*
*/*      CALL  SCALE
*/*
         L     REGFIFTN,STAT(ERRCD) ADDR OF STATUS TABLE
         L     REGFIFTN,SCALE(REGFIFTN) ADDRESS OF SCALE
         BALR  RETURN,REGFIFTN     BRANCH TO SCALE
         LTR   REGFIFTN,REGFIFTN   SCALE OK
         BNE   ERR10               RESET AND RETURN
         TM    GDSFLAGS,SUBR       SUBR
         BO    PLT02450            NO SCISS OR CHANGE OF BEAM IN GDSCV
         TM    GDSSCISS,NOSCISS    NO SCISS WANTED
         BO    PLT03000            NONE
         LA    PARM,WRKGDS
*//      CALL SCISSOR
*//
         L     REGFIFTN,STAT(ERRCD)
         L     REGFIFTN,SCISS(REGFIFTN) ADDRESS OF SCISSOR
         BALR  RETURN,REGFIFTN
         LTR   REGFIFTN,REGFIFTN   ERROR
         BNE   PLT03100            YES
         TM    WRKSWTCH,FIRST      FIRST ONE
         BO    PLT02401            YES, GENERATE ANYWAY     L5 @ZA04162
         CLC   WRKXINCR(8),ZERO    ANY MOVEMENT?
         BE    PLT02500            NO-DON'T GENERATE
PLT02401 EQU   *                                            L5 @ZA04162
         EJECT
         L     REGFIFTN,GDSGTMCB        GET POINTER TO GTMCB  LD YM5163
         TM    WRKSWTCH,UPDATE          UPDATE CALL?        L5 @ZA04162
         BNO   PLT02450                 NO,SKIP DGEN FLGS  E12 @ZA17700
         OI    GTMUPDT(REGFIFTN),UPDATE  SET DGEN FLG       L5 @ZA04162
*    THE NEXT SEVEN LINES HAVE BEEN DELETED BY APAR ------>E12 @ZA17700
*PLT02402 EQU   *                                           L5 @ZA04162
*        L     REGFIFTN,GSPPTR(REGFIFTN) GET PTR TO GSPCB     LD YM5163
*        TM    ARRAY(REGFIFTN),SCISORED WAS SCISSORING USED?  LD YM5163
*        BZ    PLT02450                 BRANCH IF NO          LD YM5163
*        TM    WRKSWTCH+3,PLTPTNT       WAS POINT SCISSORED?  LD YM5163
*        BZ    PLT02450                 BRANCH IF NO          LD YM5163
*        NI    WRKBITS+2,BLANK          SET FLAGS SO DATA...  LD YM5163
*                                       GEN WILL BLANK....    LD YM5163
*                                       THE BEAM.             LD YM5163
PLT02450 LA    PARM,WRKADDR
*//
*//      CALL DATA GEN
*//
         L     REGFIFTN,STAT(ERRCD)
         L     REGFIFTN,DGEN(REGFIFTN)  ADDRESS OF DATA GEN
         BALR  RETURN,REGFIFTN
         LTR   REGFIFTN,REGFIFTN   ERROR
         BNE   ERR10               RESET AND RETURN
         L     REGFIFTN,GDSGTMCB   GET GTMCB ADDRESS        L5 @ZA04162
         NI    GTMUPDT(REGFIFTN),UPDTOFF  TURN OFF DGEN FLG L5 @ZA04161
         NI    WRKSWTCH,OFF        TURN OFF FIRST SWITCH
*
*        THE VECTOR OR POINT IS GENERATED BY DATA GEN AND
*        STORED IN THE GDOA BY DATA STORE.  IF THERE ARE NO
*        MORE TO DO THE UPDATE GDOAS ARE WRITTEN OUT IF UPDATE,
*        OR THE KEY IS COMPLETED AND PLACED IN THE KEY TABLE IF
*        NECESSARY AND IN THE USER VARIABLE IF PASSED.  THE
*        SWITCHES IN THE GDSDATMD FIELD ARE RESET AND CONTROL
*        IS RETURNED TO THE CALLING PROGRAM.
*
PLT02500 BCT   REGE,PLT03700       MORE TO DO
         TM    WRKSWTCH,FIRST      HAS ANY DATA BEEN GEN
         BO    ERR8                NO
         TM    WRKSWTCH,LSTONE     WAS LAST ONE GENERATED
         BZ    PLT02550            YES
         OI    WRKBITS+2,REPONLY   SET FLAG TO GEN REPOS VECT
         XC    WRKDATA1(32),WRKDATA1
         MVC   WRKXABS+2(2),GDSXCURR    PLACE CURRENT BEAM POSITION
         MVC   WRKYABS+2(2),GDSYCURR FROM GDS INTO DATA ARRAY
         LA    REGE,1              RESET COUNT TO FALL THROUGH
         B     PLT02450            CALL DATA GEN
PLT02550 TM    WRKSWTCH,UPDATE     UPDATE
         BO    PLT03300            YES
         L     REGE,GDSAOACB       NO
         L     REGE,CURRLOG(REGE)  GET CURR LOG ADDR
         SH    REGE,WRKADDR+2      COMPUTE ELEM LEN
         LTR   REGE,REGE           ANY DATA GENERATED
         BE    ERR8                NO ERROR
         STH   REGE,WRKADDR        PLACE LENGTH IN KEY
         L     REGE,WRKKEY
         LTR   REGE,REGE
         BE    PLT02600
         MVC   0(4,REGE),WRKADDR   PLACE KEY IN USER VARIABLE
PLT02600 TM    WRKBITS+2,KEYED+CORRE KEYED OR CORRELATED
         BZ    PLT02700            NO
*//
*//      CALL KEY TABLE TO ADD KEY
*//
         ST    GDSREG,WRKGDS1      GDSCB FOR KEY TABLE MGT
         LA    REGA,ONE            CODE
         ST    REGA,WRKCODE        IN PARM LIST
         LA    REGA,WRKADDR        ADDR OF KEY
         ST    REGA,WRKKADDR       IN PARM LIST
         LA    PARM,WRKGDS1
         L     REGFIFTN,GDSGTMCB   GET POINTER TO GTMCB     D11 OZ15418
         L     REGFIFTN,4(REGFIFTN) GET POINTER TO GSPCB    D11 OZ15418
         L     REGFIFTN,FE(REGFIFTN) POINT TO STATUS TABLE  D11 ZA15418
         L     REGFIFTN,ETE(REGFIFTN) ADDR OF KEYTBL MGR    D11 ZA15418
         LTR   REGFIFTN,REGFIFTN   LOADED YET ?             D11 ZA15418
         BZ    PLTLINK1            NO,MUST USE SYSTEM LINK  D11 ZA15418
         BALR  RETURN,REGFIFTN     BRANCH TO KEY TABLE MGMT D11 ZA15418
         B     PLTRTN1             RETURN FROM BALR         D11 ZA15418
PLTLINK1 LA    REGA,16             CVT                      D11 ZA15418
         L     REGA,CVTLINK(REGA)  LINKLIB DCB
         LINK  EP=IFFAHA03,MF=(E,(1)),SF=(E,WRKSPVSR)
PLTRTN1  LTR   REGFIFTN,REGFIFTN   SUCCESSFUL               D11 ZA15418
         BNE   ERR9                NO
PLT02700 L     SAVE,4(SAVE)
         MVC   GDSDATMD,WRKSWTCH+2 RESET DATA MODE
PLT02800 RETURN (14,12),T          RETURN
         EJECT
*
*        IF THIS CALL IS TO GENERATE DATA THAT IS TO BE PART OF A
*        BUFFER SUBROUTINE, THE GDSDATMD SWITCH IS CHANGED TO
*        REFLECT EITHER REAL OR INTEGER INCREMENTAL DATA AS INPUT.
PLT02850 XC    GDSDATMD,GDSDATMD   ZERO DATA MODE SW
         TM    WRKSWTCH+2,REALX    REAL
         BZ    PLT00620            NO
         OI    GDSDATMD,XRELINC    SET X INPUT REAL,INC
PLT02870 TM    WRKSWTCH+2,REALY    REAL
         BZ    PLT00640            NO
         OI    GDSDATMD,YRELINC    SET Y INPUT REAL,INC
PLT02880 XC    WRKXABS(16),WRKXABS
         ST    REGA,WRKXINCR      SET X INCREMENTAL
         ST    REGB,WRKYINCR      SET Y INCREMENTAL
PLT02900 XI    WRKBITS,INCSW
         B     PLT02300
PLT03000 L     PARM,WRKXABS        LOAD X
         ST    PARM,GDSXLAST       STORE IN LAST LOC
         SH    PARM,GDSXCURR       COMPUTE NEW INCR
         ST    PARM,WRKXINCR       STORE
         MVC   GDSXCURR,WRKXABS+2      XCURR
         L     PARM,WRKYABS        LOAD Y
         ST    PARM,GDSYLAST       STORE IN LAST LOC
         SH    PARM,GDSYCURR       COMPUTE NEW INCR
         ST    PARM,WRKYINCR       STORE
         MVC   GDSYCURR,WRKYABS+2      YCURR IN GDSCB
         NI    GDSSCISS,LASTON
         B     PLT02450
PLT03100 C     REGFIFTN,FOUR            STOP GENERATION
         BE    ERR10               YES, RESET AND RETURN
         B     PLT02500
*//      GET GDOA'S FOR UPDATE
PLT03200 LA    PARM,WRKADDR        PARMLIST FOR IFFAHA13    D11 ZA15418
         L     REGFIFTN,STAT(ERRCD) POINT TO STATUS TABLE   D11 ZA15418
         L     REGFIFTN,UPDH13(REGFIFTN) AND TO IFFAHA13    D11 ZA15418
         BALR  RETURN,REGFIFTN     GOTO IFFAHA13            D11 ZA15418
         LTR   REGFIFTN,REGFIFTN   SUCCESS
         BNE   PLT02700            NO
         B     PLT02350
         EJECT
*/
*//      WRITE OUT UPDATE
PLT03300 LA    PARM,WRKADDR        PARMLIST ADDRESS FOR H14 D11 ZA15418
         L     REGFIFTN,STAT(ERRCD) POINT TO STATUS TABLE   D11 ZA15418
         L     REGFIFTN,UPDH14(REGFIFTN) AND TO IFFAHA14    D11 ZA15418
         BALR  RETURN,REGFIFTN     GOTO IFFAHA14            D11 ZA15418
         TM    GDSFLAGS,LEVEL2
         BO    PLT02700
         L     REGD,WRKKEY
         MVC   0(8,REGD),WRKADDR   REPLACE KEY
         TM    WRKBITS+2,CORRE     IS IS IT CORRELATED
         BZ    PLT02700            NO EXIT
         L     REGD,WRKKEY         ADDR OF KEY IN KEY TABLE
         MVC   8(4,REGD),WRKCORVL  REPLACE CORVAL
         B     PLT02700
PLT03400 L     PARM,WRKPARM        RESET REG
         TM    WRKSWTCH+1,XINDX    X INDEX
         BO    PLT03600            YES
PLT03500 TM    WRKSWTCH+1,YINDX    Y INDEX
         BZ    PLT02400            NO
         L     REGB,Y(PARM)        REP Y VAL WITH Y ADDR
         B     PLT02400
         EJECT
PLT03600 L     REGA,X(PARM)        REP X VAL WITH X ADDR
         B     PLT03500
*
*        IN ORDER TO GENERATE THE NEXT DATA THE DATA FIELDS IN
*        THE PARAMETER LIST ARE ZEROED.  THE NOT FIRST NOT
*        LAST SWITCH IS SET. IF THIS IS THE LAST TIME THEN THE
*        LAST SWITCH IS SET. THE ARRAY IS INDEXED THROUGH OR
*        THE INCREMENT IS ADDED TO THE PREVIOUS DATA TO FORM
*        THE NEW DATA. THEN SCALE IS CALLED, SCISSOR, ETC.
*
PLT03700 XC    WRKDATA1(32),WRKDATA1 ZERO DATA
         TM    WRKSWTCH,FIRST      HAS ANY DATA BEEN GENERATED YET
         BO    PLT03730            NO SO DONT CHANGE THE FIRST SW IN PL
         OI    WRKBITS+2,NFNL      SET NOT FIRST LAST SWITCH
PLT03730 C     REGE,ONE            IS THIS THE LAST ONE
         BE    PLT04900            LAST TIME
PLT03750 TM    WRKSWTCH+1,XINDX    INDEX X
         BZ    PLT04100            NO
         A     REGA,WRKXCHNG
         TM    GDSDATMD,ABSOLX     X ABS
         BZ    PLT03900
         MVC   WRKXABS,0(REGA)     MOVE IN X ABS
PLT03800 TM    WRKSWTCH+1,YINDX    Y INDEX
         BZ    PLT04300            NO
         A     REGB,WRKYCHNG
         TM    GDSDATMD,ABSOLY     Y ABS
         BZ    PLT04000            NO
         MVC   WRKYABS,0(REGB)     MOVE IN Y ABS
         B     PLT02400
PLT03900 MVC   WRKXINCR,0(REGA)    MOVE IN X INCR
         B     PLT03800
PLT04000 MVC   WRKYINCR,0(REGB)    MOVE IN Y INCR
         B     PLT02400
         EJECT
PLT04100 TM    GDSDATMD,REALX      X IN FLOAT
         BM    PLT04500            YES
         A     REGA,WRKXCHNG       ADD X INCRE
PLT04200 TM    GDSDATMD,ABSOLX     ABSOLUTE
         BZ    PLT04600            NO
         ST    REGA,WRKXABS        STORE IN ABS LOC
         B     PLT03800            CHECK Y
PLT04300 TM    GDSDATMD,REALY      Y REAL
         BM    PLT04700            YES
         A     REGB,WRKYCHNG       ADD Y INCR
PLT04400 TM    GDSDATMD,ABSOLY     Y ABS
         BZ    PLT04800            NO
         ST    REGB,WRKYABS        STORE IN ABS
         B     PLT02400
PLT04500 ST    REGA,WRKTEMP        STORE # IN CORE
         LE    FLT2,WRKTEMP
         AE    FLT2,WRKXCHNG       ADD INCR IN FLOAT INSTR
         STE   FLT2,WRKTEMP
         L     REGA,WRKTEMP        REPLACE IN REG
         B     PLT04200
PLT04600 MVC   WRKXINCR,WRKXCHNG   STORE X IN INCR
         B     PLT03800            CHECK Y
PLT04700 ST    REGB,WRKTEMP        STORE IN CORE
         LE    FLT2,WRKTEMP
         AE    FLT2,WRKYCHNG       ADD Y INCR IN
         STE   FLT2,WRKTEMP        FLOAT INSTR
         L     REGB,WRKTEMP        RELOAD REG
         B     PLT04400
PLT04800 MVC   WRKYINCR,WRKYCHNG   STORE Y INCR
         B     PLT02400
PLT04900 TM    WRKSWTCH,FIRST      ANY GENERATED YET
         BO    PLT05000            NO CHANGE ENTRY TO SINGEL
         OI    WRKBITS+2,LASTIN    SET LAST TIME SWITCH
         OI    WRKSWTCH,LSTONE     SET SWITCH TO SAY LAST TIME IN
         B     PLT03750            CONTINUE ON
PLT05000 XI    WRKBITS,MULT        MULTIPLE ENTRY HAS BECOME A SINGLE
         B     PLT03750            CONTINUE
         EJECT
ERR1     MVC   PARMERR(4,ERRCD),ONE GDS INVALID
ERRPRM   OI    0(ERRCD),PRM        PARM ERROR
         B     PLT02700
ERR3     MVC   PARMERR(4,ERRCD),SIX GENCODE
         B     ERRPRM
ERR4     MVC   PARMERR(4,ERRCD),FOUR CORVAL
         B     ERRPRM
ERR7     MVC   PARMERR(4,ERRCD),SEVEN COUNT
ERR8     OI    0(ERRCD),SCISSOR    NO DATA GEN
         XC    4(4,ERRCD),4(ERRCD) ZERO SCISSOR COUNT
         B     PLT02700
ERR9     OI    0(ERRCD),STRG       MAIN STORAGE EXCEEDED
         MVC   STOR(4,ERRCD),FOUR
ERR10    MVC   GDSXLAST(8),WRKXLAST RESET SYSTEM
         MVC   GDSXCURR(4),WRKXCURR
         TM    WRKSWTCH,UPDATE     UPDATE
         BO    PLT02700            NO RESET RQD
*//
*//      CALL RESET TO RESET SYSTEM
*//
         MVC   WRKDATA2(20),0(ERRCD)   SAVE RETURN ARRAY
         LA    REGA,GDSGDSCB       VAR CONTAINING ADDR OF GDS
         ST    REGA,WRKGDS         IN PARAMETER LIST
         L     REGA,NULL(ERRCD)    NULL FOR CORVAL
         ST    REGA,WRKRTN         IN PARM LIST
         LA    REGA,WRKADDR        ADDRESS OF KEY
         ST    REGA,WRKDATA1       IN PARAMETER LIST
         OI    WRKDATA1,LAST       LAST PARM SW
         LA    REGA,WRKGDS         ADDR OF PARM LIST
         ST    REGA,WRKGDS1        IN WORK AREA
         ST    ERRCD,WRKCODE       ERROR CODE IN PARM LIST
         LA    PARM,WRKGDS1        ADDR OF WRK AREA IN R1
         LINK  EP=IFFAFA12,MF=(E,(1)),SF=(E,WRKSPVSR)
*        LINK TO RESET ROUTINE
         MVC   0(20,ERRCD),WRKDATA2
*        RESET RETURN ARRAY
         B     PLT02700
         EJECT
* REGISTERS
REGZERO  EQU   0
PARM     EQU   1
REGA     EQU   2
REGB     EQU   3
REGE     EQU   4
WORK     EQU   5
ERRCD    EQU   6
GTMREG   EQU   7
GDSREG   EQU   8
BASE     EQU   9
REGC     EQU   10
REGD     EQU   11
SAVE     EQU   13
RETURN   EQU   14
REGFIFTN EQU   15
FLT2     EQU   2                   FLOATING PT REG
         EJECT
ZERO     DC    2F'0'
ONE      DC    F'1'
TWO      DC    F'2'
THREE    DC    F'3'
FOUR     DC    F'4'
BITS     DC    B'00000111'         SINGLE,VECTOR,INCLUDE,OPTIMIZE
         DC    X'00'
         DC    B'00001000'         FIRST PASS,NOT KEY,COR,BEAMON,REPOS
         DC    X'00'
SIX      DC    F'6'
SEVEN    DC    F'7'
PATCH    DC    10F'0'                                       L5 @ZA04162
SCISSOR  EQU   X'40'
FE       EQU   48                                                  000A
ETE      EQU   828                                                 000A
         EJECT
OMIT     EQU   X'FB'
XINDX    EQU   X'C0'
YINDX    EQU   X'0C'
XINC     EQU   X'30'
YINC     EQU   X'03'
MULT     EQU   X'80'
OPT      EQU   X'04'
ABS      EQU   X'02'
ABSSW    EQU   X'03'
INCSW    EQU   X'02'
SUBR     EQU   X'02'
INC      EQU   X'01'
NOSCISS  EQU   X'10'
LASTON   EQU   X'1F'
CURRLOG  EQU   52
ABSOLX   EQU   X'A0'
ABSOLY   EQU   X'0A'
REALX    EQU   X'C0'
REALY    EQU   X'0C'
PT       EQU   X'10'
NULL     EQU   20
LAST     EQU   X'80'
XABS     EQU   X'A0'
YABS     EQU   X'0A'
CORRE    EQU   X'10'
KEYED    EQU   X'20'
LEVEL2   EQU   X'10'
POINT    EQU   X'01'
MEMSUB   EQU   X'80'
MEMSEQ   EQU   X'40'
SEQ      EQU   X'04'
XINTINC  EQU   X'10'
XRELINC  EQU   X'40'
YINTINC  EQU   X'01'
YRELINC  EQU   X'04'
EVENFOUR EQU   X'FC'
ARRAY    EQU   X'18'               OFFSET TO GSPARRAY         LD YM5163
GSPPTR   EQU   4                   OFFSET TO GSPCB IN GTMCB   LD YM5163
SCISORED EQU   X'40'               SCISSOR FLAGS IN ARRAY     LD YM5163
PLTPTNT  EQU   X'01'               PLOT POINT FLAGS           LD YM5163
BLANK    EQU   X'F7'               BLANK BEAM BIT MASK        LD YM5163
* PARM LIST EQUATES
GDS      EQU   0
X        EQU   4
Y        EQU   8
COR      EQU   12
KEY      EQU   16
GEN      EQU   20
CT       EQU   24
XINDEX   EQU   28
YINDEX   EQU   32
XINCR    EQU   36
YINCR    EQU   40
PARMERR  EQU   16
PRM      EQU   X'08'
STRG     EQU   X'10'
STOR     EQU   12
NFNL     EQU   X'40'
LASTIN   EQU   X'C0'
DGEN     EQU   840
SCISS    EQU   876
SCALE    EQU   864
UPDH13   EQU   936               DISPL OF H13 IN STATAB     D11 ZA15418
UPDH14   EQU   948               DISPL OF H14 IN STATAB     D11 ZA15418
STAT     EQU   24
FIVE     DC    F'5'
CVTLINK  EQU   8
INCL     EQU   X'04'
REPONLY  EQU   X'02'
FIRST    EQU   X'02'
LSTONE   EQU   X'01'
OFF      EQU   X'FC'
UPDATE   EQU   X'80'
GTMUPDT  EQU   X'3C'             DISP IN GTMCB FOR DGN FLG  L5 @ZA04162
UPDTOFF  EQU   X'7E'             MASK TO TURN OFF DGEN FLG  L5 @ZA04161
         EJECT
WORKAREA DSECT
WRKPARM  DS    F
WRKRTNCD DS    F
WRKSWTCH DS    F
*        SWITCH SETTINGS FOR WRKSWTCH - PLINE AND PPOINT
*
*        WRKSWTCH+1
*        C0 = X INDEX PASSED
*        30 = X INCREMENT PASSED
*        0C = Y INDEX PASSED
*        03 = Y INCREMENT PASSED
*
*        WRKSWTCH+2
*        80 = X IS REAL,ABSOLUTE
*        40 = X IS REAL,INCREMENTAL
*        20 = X IS INTEGER,ABSOLUTE
*        10 = X IS INTEGER,INCREMENTAL
*        08 = Y IS REAL,ABSOLUTE
*        04 = Y IS REAL,INCREMENTAL
*        02 = Y IS INTEGER,ABSOLUTE
*        01 = Y IS INTEGER,INCREMENTAL
*
*        WRKSWTCH+3
*        00 = PLINE
*        O1 = PPOINT
*
WRKSAVE  DS    18F
WRKSPVSR DS    3F
WRKXCURR DS    H
WRKYCURR DS    H
WRKXLAST DS    F
WRKYLAST DS    F
WRKXCHNG DS    F
WRKYCHNG DS    F
WRKTEMP  DS    F
WRKADDR  DS    F
WRKBITS  DS    F
WRKCORVL DS    F
WRKKEY   DS    F
WRKGDS   DS    F
WRKRTN   DS    F
WRKDATA1 DS    F
WRKDATA2 DS    F
WRKDATA3 DS    F
WRKDATA4 DS    F
WRKXABS  DS    F
WRKYABS  DS    F
WRKXINCR DS    F
WRKYINCR DS    F
WRKTOTX  DS    F
WRKTOTY  DS    F
WRKENTCT DS    F
WRKGDS1  DS    F
WRKCODE  DS    F
WRKKADDR DS    F
         COPY  GDSCB
         COPY  GTMCB
         COPY  GSPCB
         END
