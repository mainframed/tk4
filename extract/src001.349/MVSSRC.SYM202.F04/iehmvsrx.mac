 TITLE 'IEHMVSRX-DCB CONSTRUCTION FOR IEHMOVE LOAD MODULE ESY'
*TITLE -IEHMVSRX
*FUNCTION /OPERATION: THIS ROUTINE HANDLES THE BUILDING OF THE DCB'S  *
*FOR THE FROM AND TO DATA SETS, OPENING THOSE DATA SETS, AND          *
*HANDLING THE FROMDD AND TODD KEYWORDS                                *
*ENTRY POINTS: IEHMVESX                                               *
*INPUT: INFORMATION IN MOVE/COPY COMMUNICATIONS TABLE                 *
*OUTPUT 'FROM' OCB                                                    *
*'TO' DCB                                                             *
*EXTERNAL ROUTINES: MESSAGE WRITER
*EXITS-NORMAL RETURN TO CALLING MODULE-IEHMVSSY                       *
*ERRORS: NONE                                                         *
*TABLES/WORK AREAS: MOVE/COPY COMMUNICATIONS TABLE                    *
*ATTRIBUTES: REUSEABLE                                                *
*NOTES: PART OF LOAD MODULE IEHMVESY                                  *
*
IEHDCBDM CSECT
*A046410-046530,046700,077601-077602                           @ZA09158
*C013400,048600                                                @ZA09158
*A049890-049900                                                @ZA04377
*A049244-049266                                                @ZA01249
*D049244-049264                                                @ZA01249
*C049150,049170                                                @ZA01243
*A043613-043614                                                @ZA01229
*C027400                                                       @ZA01234
*A043680-043686                                                @YA02622
*D043680-043684                                                @YA02622
*D051300-051600                                                @YA02612
*A049150                                                       @YA02545
*C049170                                                       @YA02545
*D049150-049154                                                @YA02545
*D078000                                                        OY01176
*A005560,078000-078185,024930-024960                            OY01176
*A043604-043699                                                  A52003
*A077604-077607                                                  A52003
*A068200                                                         A99999
*A029400                                                         A48772
*A057000,058000                                                  A45188
*A029400,D033200,A045200,D048800                                 A45179
*A017020-017500                                                 OY01174
* 033800,049240                                                  A38744
*A009860-009920,049103-049190,067810-067920,076406-076568        A37919
*C067800,073200,073800,075600,076400,077600                      A37919
* 027640
 TITLE 'IEHMVSRX-IEHMOVE BUILD/OPEN TO/FROM DCB,USE TODD/FROMDD'   1308
* --CODE ADDED BECAUSE OF FIX FOR DATA MANAGEMENT APAR 26725     A26725
*  (OPEN SVC ROUTINE WILL ISSUE TYPE 013 ABEND IF TRACK-OVERFLOW A26725
*   BIT IS ON IN DCB FOR DEVICE WHICH DOESN'T SUPPORT TRACK-     A26725
*   OVERFLOW)                                                    A26725
* 043680-043720                                                 PTM0125
* 065800-066000                                                  A21645
*                                                                  UL0H
*0057023800-024000,024800-025400,027200,041000-042000,043200,      UL0H
*         064600,069200                                            UL0H
*                                                                  UL0H
*0057043600                                                        4128
*0057025600-025800                                                 8461
*031400,047200                                                   A27726
*027800,037400-037600,043800,049720-049920,051700                 19030
*--ANY STATEMENTS FLAGGED 19030 PERTAIN TO VARIABLE SPANNED RECORD--
*--SUPPORT FOR BDAM DATA SETS
*                             REGISTER NOTATION AND USAGE
*
R0       EQU   0                        PARAM REG
R1       EQU   1                        PARAM REG
R3       EQU   3                        WORK REG
R4       EQU   4                        WORK REG
R5       EQU   5                        WORK REG
R6       EQU   6                        WORK REG
R7       EQU   7                        BASE FOR DCB
R2       EQU   2                       WORK REG                    VS0H
R8       EQU   8                       WORK REG                    UL0H
R9       EQU   9                                                OY01176
R10      EQU   10                       BASE FOR JFCB
R11      EQU   11                       BASE FOR IEHMVESX
R12      EQU   12                       BASE FOR COMMUNICATION AREA
R13      EQU   13                      SAVE REG
R14      EQU   14                       RETURN REG
R15      EQU   15                       ENTRY POINT REG
*
*
*                             EQUATES
*
OPEN     EQU   X'10'                                             A38744
SELECT   EQU   X'02'
FROMKEY  EQU   X'02'
LOADUNLD EQU   X'03'
DASD     EQU   X'20'
TOKEYWRD EQU   X'40'
PREALLOC EQU   X'08'
FIVE     EQU   X'05'
ZERO     EQU   X'00'
TRKOFLOW EQU   X'DF'                    MASK TO 'AND' OFF        A26725
*                                        TRACK-OVERFLOW BIT IN   A26725
*                                        DCB RECFM BYTE          A26725
BLANK    EQU   X'40'
CATALOG  EQU   X'04'
LOAD     EQU   X'02'
UNLOAD   EQU   X'01'
RLSE     EQU   X'04'                   DEFAULT RELEASE           A37919
RLSEREQ  EQU   X'80'                   EXPLICIT RELEASE          A37919
TIOTDDNA EQU   X'04'                   TIOT DDNAME              YL026VC
*
*
*                             EXTRN AND ENTRY STATEMENTS
*
         ENTRY IEHMVESX
         EXTRN MSG
         EXTRN PREABORT
*
*
*                             ASSEMBLER USING STATEMENTS
*
         USING IEHMVESX,R11
         USING IEHMVV,R12
         USING IHADCB,R7
         USING JFCBX,R10
         USING IECSDSL1,R12
         USING DEBBASIC,R3                                      YL026VC
         USING DEBAVT,R2                                        YL026VC
         USING DEBXTN,R4                                        YL026VC
         USING DSAB,R5                                          YL026VC
         USING TCB,R6                                           YL026VC
         USING IEZJSCB,R8                                       YL026VC
         USING QDB,R9                                           YL026VC
*
IEHMVESX SAVE  (14,12),T,IEHMVSRX-OZ09158                      @ZA09158
         LR    R11,R15                  SET UP ADDRESSABILITY FOR ESX
         IEHPRE (14,1),TFC
         CLI   IEHMVV22,FIVE            DOES THE FROM VOLUME LIST
*                                       INDICATE THAT MORE THAN 5
*                                       VOLUMES ARE INVOLVED IN THIS
*                                       REQUEST?
         BH    ABORT                    YES. TERMINATE THIS REQUEST,
*                                       PRINT MESSAGE INDICATING
*                                       PROGRAM DOES NOT HANDLE MORE
*                                       THAN 5 VOLUMES AND CAUSE CONTRO
*                                       TO RETURN FOR ANOTHER REQUEST.
         CLI   IEHMVV23,FIVE            DOES THE TO VOLUME LIST
*                                       INDICATE THAT MORE THAN 5
*                                       VOLUMES ARE INVOLVED IN THIS
*                                       REQUEST?
         BH    ABORT                    YES. TERMINATE THIS REQUEST AS
*                                       ABOVE.
*                                       OTHERWISE CONTINUE PROCESSING
*                                       THIS REQUEST
*
*
         TM    IEHMVV20+3,PREALLOC      HAS THE TO DATA SET BEEN
*                                       PREALLOCATED?
         BZ    CONT                     NO.
         MVC    SAVRECFM(1),IEHMVV31
         MVI    IEHMVV31,X'00'
*                                       SET HAS BEEN PREALLOCATED, THE
*                                       DSCB HAS BEEN READ INTO THE
*                                       VOLATILE WORK AREA. IT IS
*                                       NECESSARY TO SAVE THE RECORD
*                                       FORMAT FOR USE BY THE ROUTINE
*                                       GIVEN CONTROL BY OPENJ DURING
*                                       PROCESSING OF THE TO DCB.
CONT     DS    0H                       CONTINUE NORMAL PROCESSING
         L     R4,IEHMVV30
         LTR   R4,R4                    HAS FROM DCB BEEN BUILT?
         BNE   TODCBB                   YES. GO TO BUILD TO DCB
         TM    IEHMVV20,CATALOG         IS THIS A CATALOG FUNCTION?
         BO    CATDCBB                 YES. BUILD SPECIAL DCB
         L     R4,IEHMVV30+8            GET DSCB POINTER
         LH    R0,DS1DSORG-DS1DSNAM(R0,R4)
*                                       GET DSORG FROM DSCB AND PASS
*                                       TO DCBBUILDER
GOCAT    DS    0H
         LA    R1,0                     PASS INPUT CODE TO DCBBUILDER
         L     R15,DCBB
         BALR  R14,R15                  LINK WITH DCBBUILDER
         ST    R7,IEHMVV30              SAVE DCB POINTER
         LA    R10,IEHMVV00             SET UP ADDRESSABILITY FOR JFCB
         L     R4,IEHMVV30+12           GET DDNAME POINTER
         MVC   DCBDDNAM(8),0(R4)        MOVE DDNAME TO DCB
         LA    R4,IEHMVV70              GET EXIT LIST ADDRESS      UL0H
         O     R4,DCBEXLST              PICK UP HIGH ORDER BYTE    UL0H
         ST    R4,DCBEXLST              FROM EXIT LIST FIELD IN
*                                       DCB AND STORE IT WITH EXIT
*                                       LIST ADDRESS IN DCB
         ST    R10,UDCBJFCB             SET UP JFCB EXIT LIST ADDR UL0H
         MVI   UDCBJFCB,X'87'             AND ACTIVATE ENTRY       UL0H
         MVC   UDCBDCBE(4),DCBXX        SET UP DCB EXIT LIST ADDR  UL0H
         MVC   UDCBIHLE(4),ADIHLR ADDR.INPUT HEADER-LABEL ROUT. OY01176
         MVI   UDCBIHLE,X'01'    INDICATE INPUT HEADER LABEL    OY01176
         CLI   UDCBOHLE,X'00'           IS OHLE INACTIVE           UL0H
         BE    SETLABSW                 YES, CONTINUE              UL0H
         MVC   UDCBOHLE(4),XXOHLE       NO, SET UP OHLE LIST ADDR  UL0H
SETLABSW DS    0H                                                  UL0H
         MVI   IEHMVV72+8,X'01'         SET 1ST LABEL SWITCH       UL0H
         XC    IEHMVV72+4(4),IEHMVV72+4 CLEAR CURRENT LABEL POINTERUL0H
         TM    IEHMVV20+3,FROMKEY       WAS FROMDD KEYWORD SPECIFIED?
         BO    FROMDD                   YES. GO TO MOVE FROM DDNAME
*                                       INTO DCB AND READ JFCB
         MVI   IEHMVV00,ZERO            NO. BUILD JFCB
         MVC   IEHMVV00+1(175),IEHMVV00
*
         MVI   JFCBLTYP,X'0A'          INDICATE STAND. USER LBLS   UL0H
         MVI   JFCBIND2,X'40'         AND OLD DATA SET IN JFCB @ZA01234
*
FROMBACK EQU   *
         TM    JFCBLTYP,SL          STANDARD LABEL               A32041
         BNO   BDAMTST            *B IF NOT- USE EXISTING RECFM  A32041
*                                                         BLKSIZEA32041
*                                                    AND LRECL   A32041
*                                                                A32041
         XC    JFCDSORG(1),JFCDSORG   ELSE ZERO OUT JFCB FIELDS  A32041
         XC    JFCRECFM(1),JFCRECFM      SO THE DCB FIELDS       A32041
         XC    JFCLRECL(2),JFCLRECL    WILL BE FILLED FROM THE   A32041
         XC    JFCBLKSI(2),JFCBLKSI    STANDARD LABEL            A32041
*                                                                A32041
BDAMTST  L     R4,IEHMVV30+8         ADDRESS OF FROM DSCB        A32041
         TM    82(R4),X'20'       IS DATA SET BDAM                19030
         BNO   FROMCONT           NO                              19030
         TM    84(R4),X'48'       IS THE RECFM VS                 19030
         BNO   FROMCONT           NO                              19030
         OI    50(R7),X'01'    TURN ON CHECK RTN BIT              19030
         OI    JFCBFTEK,X'20'     SET BUFTEK TO 'R'               19030
FROMCONT L     R4,IEHMVV21        GET DSNAME POINTER              19030
         MVC   JFCBDSNM(44),0(R4)       MOVE DSNAME INTO THE JFCB
         L     R4,IEHMVV30+12
         MVC   DCBDDNAM(8),0(R4)        RELOAD DDNAME TO THE DCB
         MVI   JFCBELNM,BLANK
         MVC   JFCBELNM+1(7),JFCBELNM SET ELEMENT NAME IN JFCB
*                                       TO BLANKS
         LA    R6,JFCBVOLS              GET POINTER TO JFCB
*                                       VOLUME LIST
         MVI   0(R6),X'40'                                       A45179
         MVC   1(29,R6),0(R6)         BLANK JFCBVOLS             A45179
         SR    R5,R5
         IC    R5,IEHMVV22              GET VOLUME COUNT
         LA    R3,5                    LIMIT MOVE TO MAXIMUM OF
*                                       FIVE VOLUMES
         L     R4,IEHMVV22              GET POINTER TO VOLUME LIST
         MVC   JFCBFLSQ(2),10(R4)       MOVE IN FILE SEQUENCE NUMBER
VOLIDLP  DS    0H
         MVC   0(6,R6),4(R4)            MOVE IN VOLUME SERIAL NUMBER
         LA    R6,6(R6)
         LA    R4,17(R4)    ADJUST TO NEXT VOLUME NUMBER IN LIST A27726
         BCT   R3,NVOLIDS               HAVE FIVE VOLUME NUMBERS
*                                       BENN MOVED?
         MVI   JFCBNVOL,FIVE            YES.
         B     FDDRTN
NVOLIDS  BCT   R5,VOLIDLP               HAVE ALL THE VOLUME NUMBERS
*                                       BEEN MOVED?
         MVC   JFCBNVOL(1),IEHMVV22     YES. MOVE IN ACTUAL VOLUME
*                                       COUNT
FDDRTN   DS    0H
         MVI   79(7),X'01'   INITIALIZE DCBEOBR FIELD TO DC A(1)  12574
         MVC   JFCBDSNM+53(3),IEHMVV82        MOVE TTR IN JFCB   S21042
         XC    IEHMVV82(3),IEHMVV82       AFTER THAT, CLEAR FIELDS21042
         OPEN  ((R7),INPUT),TYPE=J
         TM    DCBOFLGS-IHADCB(R7),OPEN SUCCESSFUL OPEN          A38744
         BO    OPENFROM                 YES CONTINUE             A38744
         MVI   IEHMVV61,X'26'           NO INDICATE MSG NUMBER   A38744
         B     ABEND                    AND TERMINATE THE REQ    A38744
OPENFROM OI    IEHMVV10-4,X'80'         INDICATE FROMDCB OPENED  A38744
         CLI   IEHMVV10-5,X'00'         IS THERE A MESSAGE TO BE
*                                       PRINTED?
         BE    NOMSS                    NO. SKIP LINK TO MESSAGE WRITER
         IC    R4,IEHMVV61
         MVC   IEHMVV61(1),IEHMVV10-5   SET MESSAGE CODE
         L     R15,ADMSG
         BALR  R14,R15                  AND LINK TO MSG WRITER
         STC   R4,IEHMVV61              RESET MSG BYTE
NOMSS    DS    0H
         CLI   IEHMVV74+4,X'FF'         I/O ERR IN U.L. EXIT RTN   UL0H
         BE    IOERRMSG                 YES, TELL USER             UL0H
ERMSGRET DS    0H
TODCBB   DS    0H             ENTRY POINT FOR BUILDING TO DCB
         TM    IEHMVV20+1,LOADUNLD      IS THIS BOTH LOAD AND UNLOAD
*                                       CONDITION?
         BO    BBLLUU                   YES. USE SPECIAL DCB
         TM    IEHMVV20+1,UNLOAD        NO. IS THIS UNLOAD CONDITION?
         BO    UNDCBB                   YES
         TM    IEHMVV20,CATALOG         NO. IS THIS CATALOG FUNCTION?
         BO    MYMDCB                   YES.
TODCBB1  DS    0H                                                  VS0H
         L     R4,IEHMVV30+8      ADDR OF 'FROM' DSCB             19030
         TM    82(R4),X'20'       IS THIS A BDAM DATA SET         19030
         BNO   TURNOFF            NO                              19030
         TM    84(R4),X'48'       IS THIS A VS DATA SET           19030
         BNO   TURNOFF            NO                              19030
         TM    IEHMVV20+1,UNLOAD  IS THIS AN UNLOAD SITUATION     19030
         BO    REGSET             YES, ALLOW UNLOAD OF VS DATA    19030
TURNOFF  NI    IEHMVV20+1,X'FE'   TURN OFF UNLOAD SWITCH          19030
         LH    R0,DS1DSORG-DS1DSNAM(R0,R4)
*                                       GET DSORG FROM DSCB
SETUNB   LA    R1,1                     PASS OUTPUT CODE TO
*                                       DCBBUILDER
         L     R15,DCBB
         BALR  R14,R15                  LINK TO DCBBUILDER
         ST    R7,IEHMVV31              SAVE DCB ADDRESS
         TM    IEHMVV20+1,LOADUNLD      LOAD AND UNLOAD CONDITION?
         BO    LLUUBB                   YES. RESOLVE BLOCKSIZES
RLLUUBB  DS    0H
         L     R4,IEHMVV23+4            GET VOLUME LIST POINTER
         CLI   2(R4),DASD               IS TO DEVICE DA?
         BNE   NEDASD                   NO
OKNE     DS    0H
         LA    R10,IEHMVV00             SET UP ADDRESSABILITY FOR JFCB
         L     R4,IEHMVV31+8
         MVC   DCBDDNAM(8),0(R4)        MOVE DDNAME TO THE DCB
         LA    R4,IEHMVV70              GET EXIT LIST ADDRESS      UL0H
         O     R4,DCBEXLST              PICK UP HIGH ORDER BYTE    UL0H
         ST    R4,DCBEXLST                FROM EXIT LIST FIELD     UL0H
         ST    R10,UDCBJFCB             SET UP JFCB EXIT LIST ADDR UL0H
         MVI   UDCBJFCB,X'87'             AND ACTIVATE ENTRY       UL0H
         MVC   UDCBDCBE(4),XXXT         SET UP DCB EXIT LIST ADDR  UL0H
         CLI   UDCBOHLE,X'00'           IS OHLE INACTIVE           UL0H
         BE    LABSWSET                 YES, CONTINUE              UL0H
         MVC   UDCBOHLE(4),XXOHLE       NO, SET UP OHLE LIST ADDR  UL0H
LABSWSET DS    0H                                                  UL0H
         MVI   IEHMVV72+8,X'01'         SET 1ST LABEL SWITCH       UL0H
         XC    IEHMVV72+4(4),IEHMVV72+4 CLEAR CURRENT LABEL POINTERUL0H
         TM    IEHMVV20+3,TOKEYWRD      WAS TODD KEYWORD SPECIFIED?
         BO    TODD                     YES. GO TO READ JFCB
*
         MVI   IEHMVV00,ZERO            NO. BUILD NEW JFCB
         MVC   IEHMVV00+1(175),IEHMVV00
         MVI   JFCBLTYP,X'02'          INDICATE S L              A48589
         TM    UDCBITLE,X'03'          USER LABELS FOUND         A48589
         BNO   NOSUL                   NO  CONTINUE              A48589
         OI    JFCBLTYP,X'08'          YES  INDICATE IT          A48589
NOSUL    DS    0H                                                A48589
         MVI   JFCBIND2,X'40'           AND OLD DATA SET IN JFCB
TOBACK   DS    0H
         ST    R1,SAVEREG1           SAVE REG1 FOR TIME MACRO    A52003
         TM    IEHMVV20,X'80'        MOVE-OPERATION              A52003
         BO    KEEPCDT               BRANCH,IF YES - NO CHANGE   A52003
         TM    IEHMVV20+3,X'08'        PREALLOCATED DATA SET   @ZA01229
         BO    RESET                   YES                     @ZA01229
         TIME  ,                     GET CURRENT CREATION-DATE   A52003
         XC    DW,DW                 CLEAR CONVERSION-AREA       A52003
         LR    R4,R1                 GET DATE IN REG4            A52003
         STH   R1,DW+6               STORE DDDF                  A52003
         CVB   R1,DW                 CONVERT IT TO BINARY        A52003
         STH   R1,DW+6               STORE IT IN ALIGNED AREA    A52003
         MVC   JFCBCRDT+1(2),DW+6    MOVE IT INTO THE JFCB       A52003
         SRDL  R4,4                  PUT X'F' INTO REG5          A52003
         SRL   R4,12                 REMOVE 'DDD'                A52003
         SLDL  R4,4                  PUT YYF IN REG4             A52003
         STH   R4,DW+6               STORE 'YYF' INTO CONV.AREA  A52003
         CVB   R1,DW                 CONVERT IT TO BINARY        A52003
         STC   R1,JFCBCRDT           STORE IT INTO JFCB          A52003
         B     TSTEXPDT              TEST EXPIRATION-DATE        A52003
KEEPCDT  L     R4,IEHMVV30+8         GET ADDR. FROM-DSCB         A52003
         MVC   JFCBCRDT(3),53(R4)    COPY EXISTING CREATIONDATE  A52003
TSTEXPDT CLC   JFCBXPDT(3),ZEROS       EXPDT SPEC IN DD-CARD   @YA02622
         BNE   RESET                   YES KEEP IT             @YA02622
         TM    IEHMVV20+3,X'08'        PREALLOCATED DATA SET   @YA02622
         BO    RESET                   YES KEEP EXPDT          @YA02622
         L     R4,IEHMVV30+8         IF NO, COPY IT FROM DSCB    A52003
         MVC   JFCBXPDT(3),56(R4)                                A52003
RESET    L     R1,SAVEREG1           RESET REG1                  A52003
         XC    JFCRECFM(1),JFCRECFM  CLEAR RECFM OF JFCB         A52003
         XC    JFCBLKSI(4),JFCBLKSI  CLEAR BLOCKSIZE + LRECL     A52003
         L     R4,IEHMVV30+8         GET ADDRESS OF FROM-DSCB    A52003
         TM    82(R4),X'20'       IS THIS A BDAM DATA SET         19030
         BNO   TOCONT             NO                              19030
         TM    84(R4),X'48'       IS THE RECFM VS                 19030
         BNO   TOCONT             NO                              19030
         OI    JFCBFTEK,X'20'     SET BUFTEK TO 'R'               19030
TOCONT   L     R4,IEHMVV31+8      ADDR OF DDNAME                  19030
         MVC   DCBDDNAM(8),0(R4)        MOVE DDNAME TO DCB
         L     R4,IEHMVV21+4
         MVC   JFCBDSNM(44),0(R4)       MOVE DSNAME TO JFCB
         MVI   JFCBELNM,BLANK
         MVC   JFCBELNM+1(7),JFCBELNM SET ELEMENT NAME TO BLANKS
         LA    R6,JFCBVOLS              GET VOLUME LIST POINTER
*                                       IN JFCB
         MVI   0(R6),X'40'                                       A45179
         MVC   1(29,R6),0(R6)         BLANK JFCBVOLS             A45179
         SR    R5,R5
         IC    R5,IEHMVV23+4            GET VOLUME COUNT
         LA    R3,5                     SET MAXIMUM COUNT OF VOLUME
*                                       NUMBERS TO BE MOVED
         L     R4,IEHMVV23+4
         MVC   JFCBFLSQ(2),10(R4)
         CLI   2(R4),X'80'             IS TO VOL TAPE          @ZA09158
         BNE   V1                      NO                      @ZA09158
         CLC   4(6,R4),BLANKS          IS TO VOL SER BLANK     @ZA09158
         BE    V5                      YES                     @ZA09158
         CLC   4(6,R4),SCRTCH          IS TO VOL SER SCRTCH    @ZA09158
         BNE   V1                      NO                      @ZA09158
V5       L     R1,IEHMVV31+8           DDNAME ADDRESS IN TIOT  @ZA09158
         SR    R4,R4                   CLEAR REG4              @ZA09158
         ICM   R4,3,14(R1)             GET UCB ADDRESS         @ZA09158
         CLI   27(R4),X'00' SHOULD FILE ONE BE WRITTEN         @ZA09158
         BE    V1                      YES                     @ZA09158
         MVC   0(6,R6),28(R4)          MOVE VOL SER TO JFCB    @ZA09158
         B     V4                                              @ZA09158
V1       DS    0H
         L     R4,IEHMVV23+4           ACTIVE TO VOLUME        @ZA09158
         MVC   0(6,R6),4(R4)            MOVE VOLUME SERIAL TO JFCB
         LA    R6,6(R6)
         LA    R4,17(R4)    ADJUST TO NEXT VOLUME NUMBER IN LIST A27726
         BCT   R3,V2                    HAVE FIVE VOLUME NUMBERS
*                                       BEEN MOVED?
         MVI   JFCBNVOL,FIVE            YES
         B     V3
V2       BCT   R5,V1                    HAVE ALL VOLUME NUMBERS
*                                       BEEN MOVED?
V4       MVC   JFCBNVOL(1),IEHMVV23+4  MOVE VOL COUNT TO JFCB  @ZA09158
V3       DS    0H
         MVI   79(7),X'01'   INITIALIZE DCBEOBR FIELD TO DC A(1)  12574
         MVC   JFCBDSNM+53(3),IEHMVV82+4 MOVE TTR IN JFCB        S21042
         XC    IEHMVV82+4(3),IEHMVV82+4 AND CLEAR THE FIELD      S21042
         TM    IEHMVV20,X'04'          MOVE/COPY CATALOG         A37919
         BO    NORLSE                  *B IF YES-NO RELEASE      A37919
*                                      (DS1LSTAR IS MEANING-     A37919
*                                      LESS IN A CATALOG DSCB    A37919
         TM    DCBDSORG,X'20'          DSORG=DA                  A37919
         BZ    TESTU                   *B IF NOT                 A37919
         TM    DCBRECFM,X'40'          RECFM=V(B)(S)(T)          A37919
         BZ    TESTU                   *B IF NOT                 A37919
         TM    DCBRECFM,X'80'          SAME QUESTION             A37919
         BZ    NORLSE                  *B IF YES-NO RLSE         A37919
*                                      BECAUSE OF ANY EXISTING   A37919
*                                      RELATIVE TRACK ADDRESSING A37919
*                                      SCHEME)                   A37919
TESTU    TM    IEHMVV10-4,RLSE         DEFAULT ALLOC TO BE     @ZA01243
*                                      RELEASED AT CLOSE         A37919
         BZ    EXPL                    *B IF NOT                 A37919
         TM    IEHMVV20+3,PREALLOC     PREALLOCATION             A37919
         BO    EXPL                    *B IF YES-NO DEFAULT RLSE A37919
         B     SETRLSE                 *B TO APPLY DEFAULT RLSE  A37919
EXPL     TM    IEHMVV20+5,RLSEREQ      RLSE EXPLICITLY           A37919
         BZ    NORLSE                  *B IF NOT                 A37919
SETRLSE  OI    JFCBIND1,JFCRLSE        RELEASE UNUSED SPACE    @ZA01243
*                                      AT CLOSE                  A37919
         B     SETOFF                  *B TO CLEANUP             A37919
NORLSE   NI    JFCBIND1,X'FF'-JFCBRLSE INDIC NO RELEASE          A37919
SETOFF   NI    IEHMVV10-4,X'FF'-RLSE   SETOFF DEFAULT RLSE       A37919
*                                      FOR REUSABILITY           A37919
*                                                                A37919
*        IF THE FROM DATA SET IS A CHECKPOINT DATA SET ON A     YL026VC
*        SECURE VOLUME, THEN INITIALIZE THE TO DATA SET AS A    YL026VC
*        CHECKPOINT DATA SET                                    YL026VC
         STM   R4,R6,SCSV1              SAVE REGS               YL026VC
         STM   R8,R9,SCSV2              SAVE REGS               YL026VC
         L     R7,IEHMVV30              GET FROM DCB ADDRESS    YL026VC
         L     R3,DCBDEBAD              GET DEB ADDRESS         YL026VC
         L     R2,DEBAPPAD              GET DEB AVT ADDRESS     YL026VC
         L     R4,DEBXTNP               GET DEB EXTENSION ADDR  YL026VC
         L     R5,DEBXDSAB              GET DSAB ADDRESS        YL026VC
         TM    DSABFLG4,DSABCKVL        SECURE VOLUME           YL026VC
         BO    CSSEC                    YES                     YL026VC
         NI    IEHMVV30,X'FD'           CLEAR FROM SECURE FLAG  YL026VC
         B     OPNTO                    OPEN TO D/S             YL026VC
CSSEC    OI    IEHMVV30,X'02'           SET FROM SECURE FLAG    YL026VC
         TM    JFCBIND2,X'C0'           TO D/S HAVE DISP OF NEW YL026VC
         BZ    OPNTO                    NO - OPEN TO D/S        YL026VC
         L     R6,DEBTCBAD              GET TCB ADDRESS         YL026VC
         L     R8,TCBJSCB               GET JSCB ADDRESS        YL026VC
         L     R9,JSCDSABQ              GET DSAB QUEUE ADDRESS  YL026VC
         L     R5,QDBFELMP              GET FIRST DSAB ADDRESS  YL026VC
TIENSR   L     R2,DSABTIOT              GET TIOT DD ENTRY       YL026VC
         CLC   TIOTDDNA(8,R2),DCBDDNAM  TO DDNAME               YL026VC
         BE    TIEFND                   YES - THIS IS DSAB      YL026VC
*                                       FOR TO D/S              YL026VC
         L     R5,DSABFCHN              GET NEXT DSAB ADDRESS   YL026VC
         LTR   R5,R5                    LAST DSAB IN QUEUE      YL026VC
         BNZ   TIENSR                   NO - CONTINUE SEARCH    YL026VC
         B     OPNTO                    NO DSAB FOR TO DDNAME   YL026VC
TIEFND   MODESET EXTKEY=SUPR,SAVEKEY=(2) GET INTO DSAB KEY      YL026VC
         OI    DSABFLG4,DSABCKDS        SET CHECKPOINT FLAG     YL026VC
         MODESET KEYADDR=(2)            RESET KEY               YL026VC
OPNTO    TM    IEHMVV20+1,UNLOAD        UNLOAD SITUATION       @ZA01249
         BO    SKPOPTCD                 YES                    @ZA01249
         L     R7,IEHMVV31              GET TO DCB ADDRESS     @ZA01249
         L     R8,IEHMVV30+8            GET ADDR. FROM DSCB    @ZA01249
         MVC   52(1,R7),85(R8)          MOVE THE OPTCD-BYTE    @ZA01249
*                                       TO OUTPUT DCB          @ZA01249
SKPOPTCD L     R7,IEHMVV31             GET TO DCB ADDRESS      @ZA01249
         OPEN  ((R7),OUTPUT),TYPE=J                            @ZA01249
         TM    DCBOFLGS-IHADCB(R7),OPEN OPEN SUCCESSFUL        @ZA01249
         BO    OPENTO                  YES CONTINUE            @ZA01249
         MVI   IEHMVV61,X'28'          NO INDICATE MSG NUMBER  @ZA01249
         B     ABEND                   AND TERMINATE THE REQ   @ZA01249
OPENTO   OI    IEHMVV10-4,X'40'         INDICATE TO  DCB OPENED  A38744
         MVI   UDCBIHLE,X'00'          DEACTIVATE INHDR LBL EXIT   UL0H
         MVI   UDCBOHLE,X'00'          DEACTIVATE OUTHDR LBL EXIT  UL0H
*                                                               YL026VC
*        TERMINATE REQUEST IF FROM ADN TO DATA SETS DO NOT      YL026VC
*        HAVE THE SAME CHECKPOINT SECURE STATUS                 YL026VC
*                                                               YL026VC
         L     R3,DCBDEBAD             GET TO DEB ADDRESS       YL026VC
         L     R2,DEBAPPAD             GET DEB AVT ADDRESS      YL026VC
         L     R4,DEBXTNP              GET DEB EXTENSION ADDR   YL026VC
         L     R5,DEBXDSAB             GET DSAB ADDRESS         YL026VC
         TM    DSABFLG4,DSABCKVL       SECURE VOLUME            YL026VC
         BO    CSSEC2                  YES                      YL026VC
         NI    IEHMVV30,X'FE'          CLEAR TO SECURE FLAG     YL026VC
         B     CSCRTST                 TEST SECURE STATUS       YL026VC
CSSEC2   OI    IEHMVV30,X'01'          SET TO SECURE FLAG       YL026VC
CSCRTST  LM    R4,R6,SCSV1              RESTORE REGS            YL026VC
         LM    R8,R9,SCSV2              RESTORE REGS            YL026VC
         TM    IEHMVV30,X'02'           FROM D/S SECURE         YL026VC
         BO    CSCRT2                  YES                      YL026VC
         TM    IEHMVV30,X'01'          TO D/S SECURE            YL026VC
         BZ    CSCROK                  NO - PROCEED W/REQUEST   YL026VC
         MVI   IEHMVV61,X'2C'          INDICATE MSG NUMBER      YL026VC
         B     ABEND                   TERMINATE REQUEST        YL026VC
CSCRT2   TM    IEHMVV30,X'01'          TO D/S SECURE            YL026VC
         BO    CSCROK                  YES - PROCEED W/REQUEST  YL026VC
         MVI   IEHMVV61,X'2E'          INDICATE MSG NUMBER      YL026VC
         B     ABEND                   TERMINATE REQUEST        YL026VC
CSCROK   NI    IEHMVV30,X'FC'          CLEAR SECURE FLAGS       YL026VC
*                                                                  VS0H
*  THE FOLLOWING CHECKS ARE MADE TO DETERMINE WHETHER A VS OR VBS  VS0H
*  DATA SET CAN BE MOVED/COPIED FROM DA TO TAPE. NORMALLY A DATA   VS0H
*  SET ON DA WITH KEYS IS UNLOADED WHEN 'TO' DEVICE IS TAPE.  VS   VS0H
*  AND VBS DATA SETS MAY NOT BE UNLOADED.  IF THE FROM DATA SET HASVS0H
*  A RECFM=VS OR VBS, IF THE FROM DEVICE IS DA, AND THERE ARE KEYS VS0H
*  PRESENT; AND IF THE TO DEVICE IS TAPE, A MESSAGE WILL BE GIVEN  VS0H
*  TO INDICATE THE DATA SET WILL NOT BE MOVED/COPIED/UNLOADED.     VS0H
*                                                                  VS0H
         L     R1,IEHMVV30             GET FROM DCB ADDRESS        VS0H
         TM    36(R1),X'58'     TEST 'FROM' DCB FOR VBS           19030
         BO    BDAMCHK          VBS DATA SET.GO TEST KEY          19030
BDAMCHK  TM    36(R1),X'48'     TEST 'FROM' DCB FOR VS            19030
         BNO   NORMCODE         NOT A SPANNED DATA SET            19030
         TM    26(R1),X'20'     TES FOR BDAM DSORG                19030
         BO    NORMCODE         ALL BDAM VS PROCESSING            19030
         TM    17(R1),X'80'            FROM TAPE               @ZA04377
         BO    NORMCODE                YES DO NOT CHECK KEY    @ZA04377
TESTKEY  CLI   16(R1),X'00'     FROM DATA SET KEYLEN=0            19030
         BE    NORMCODE                YES, NO PROBLEM             VS0H
         L     R2,IEHMVV31             GET TO DCB ADDRESS          VS0H
         TM    17(R2),X'20'            TO DEVICE DIRECT ACCESS     VS0H
         BC    1,ANYKEYTO              YES, STILL NO PROBLEM       VS0H
         MVI   IEHMVV61,X'0D'          SET CODE TO GIVE MSG, ABORT VS0H
         B     ABEND                   GO GIVE CONTROL TO PREABORT VS0H
ANYKEYTO CLI   16(R2),X'00'            TO DATA SET KEYLEN=0        VS0H
         BE    KEYERR                  ERROR, BOTH DATA SETS       VS0H
*                                      MUST HAVE KEYS              VS0H
         CLC   16(1,R2),16(R1)         TO, FROM KEYLENS EQUAL      VS0H
         BE    NORMCODE                YES                         VS0H
KEYERR   MVI   IEHMVV61,X'0F'          UNEQUAL KEYLENS,ERROR       VS0H
         B     ABEND                   SET  MSG CODE, GIVE MSG     VS0H
NORMCODE B     PROCEED                 NORMAL PROCEDURE            VS0H
MYMDCB   DS    0H
         L     R4,IEHMVV23+4           GET VOLUME LIST POINTER
         CLI   2(R4),DASD              IS TO DEVICE DA
         BE    PROCEED                 YES, EXIT.
         OI    IEHMVV20+1,UNLOAD       SET UNLOAD BIT
UNDCBB   DS    0H                       AND GO TO BUILD DCB FOR
*                                       UNLOAD CONDITION
         TM    IEHMVV20+1,LOADUNLD IS THIS BOTH LOAD AND UNLOAD    3826
         BO    BBLLUU              YES, BUILD SPECIAL DCB          3826
REGSET   LA    R0,1               PASS SPECIAL DSORG TO DCB BLDR  19030
*                                      DCB BUILDER                 VS0H
         B     SETUNB
BBLLUU   SR    R0,R0                    PASS SPECIAL DSORG CODE TO
         B     SETUNB                   DCBBUILDER FOR LOAD/UNLOAD
*                                       SITUATION
LLUUBB   MVI   DCBLRECL+1,X'50'         SET LOGICAL RECORD LENGTH
*                                       IN DCB AT 80
         MVI   DCBRECFM,X'90'           SET RECORD FORMAT TO FIXED
*                                       AND STANDARD
         L     R5,IEHMVV23
         MVI   DCBBLKSI+1,X'50'         MOVE IN BLOCK SIZE OF 80
         CLI   2(R5),X'08'              IS TO DEVICE UNIT RECORD?
         BE    RLLUUBB                  YES. RETURN TO NORMAL FLOW
         MVI   DCBBLKSI+1,X'20'         MOVE IN BLOCKSIZE OF 800
         MVI   DCBBLKSI,X'03'           WHEN TO DEVICE IS NOT
         B     RLLUUBB                  UNIT RECORD
CATDCBB  DS    0H
         LA    R0,2                     GET SPECIAL DSORG CODE FOR
         B     GOCAT                    CATALOG OPERATION AND PASS IT
*                                       TO DCBBUILDER
PROCEED  DS    0H
         IEHPOST  (14,1),TFC
*
*
         RETURN  (14,12), T
FROMDD   DS    0H                       IF FROMDD SPECIFIED MOVE
         L     R1,IEHMVV28              FROMDDNAME TO THE DCB
         MVC   DCBDDNAM(8),0(R1)        SO THAT JFCB CAN BE READ
         BAL   R5,SCANTIOT             RETURN IF DDNAME FOUND    A45188
         RDJFCB ((R7))                  READ FROM JFCB           A45188
         B     FROMBACK                 RETURN TO FILL IN JFCB
TODD     DS    0H                      IF TODD SPECIFIED MOVE
         L     R1,IEHMVV28+4            TODDNAME TO THE DCB SO THAT
         MVC   DCBDDNAM(8),0(R1)        CORRECT JFCB WILL BE READ
         BAL   R5,SCANTIOT             RETURN IF DDNAME FOUND    A45188
         RDJFCB ((R7))
         B     TOBACK                  RETURN TO FILL IN JBCB
SCANTIOT DS    0H                                                A45188
         L     R4,16                    FIND ADDR CVT            A45188
         L     R4,0(R4)                FIND TCB POINTERS         A45188
         L     R4,4(R4)                 FIND TCB ADDR            A45188
         L     R4,12(R4)                FIND TIOT ADDR           A45188
         LA    R4,24(R4)                FIND FIRST DD ENTRY      A45188
NEXTDD2  SR    R6,R6                                             A45188
         IC    R6,0(R4)                 FIND ENTRY LENGTH        A45188
         CLC   4(8,R4),0(R1)            DDNAME FOUND             A45188
         BCR   8,R5                    YES RETURN                A45188
         AR    R4,R6                    NO GO TO NEXT ENTRY      A45188
         L     R6,0(R4)                                          A45188
         LTR   R6,R6                    END OF TIOT              A45188
         BNZ   NEXTDD2                 NO COMPARE NEXT ONE       A45188
         MVI   IEHMVV61,X'2A'           YES INDIC MSG NBR        A45188
         B     ABEND                    AND TERMINATE THE REQ    A45188
RDTOJFCB DS    0H                                                A45188
NEDASD   DS    0H
         TM    IEHMVV20+1,UNLOAD        IS THIS AN UNLOAD SITUATION?
         BO    OKNE                     YES. RETURN TO BUILDING DCB
*
         TM    IEHMVV20+1,LOAD          IS THIS ALOAD SITUATION ?
         BO    XLOADX                   YES. GO TO RESOLVE BLOCKSIZE
*                                       AND RECORD FORMAT FOR LOAD
         L     R4,IEHMVV30
         L     R5,IEHMVV31              GET POINTERS TO FROM AND TO
*                                       DCBS
         MVC   DCBBLKSI-IHADCB(2,R5),DCBBLKSI-IHADCB(R4)
*                                       MAKE BLOCKSIZE OF FROM AND TO
*                                       DCB EQUAL
*                                       MAKE RECORD LENGTH AND FORMAT
*                                       OF BOTH DCBS EQUAL
         MVC   DCBLRECL-IHADCB(2,R5),DCBLRECL-IHADCB(R4)
         MVC   DCBRECFM-IHADCB(1,R5),DCBRECFM-IHADCB(R4)
         NI    DCBRECFM-IHADCB(R5),TRKOFLOW  TURN OFF TRACK-     A26725
*                                        OVERFLOW BIT IN TO      A26725
*                                        DCB'S RECFM BYTE (TAPES A26725
*                                        CANNOT HAVE TRACK-      A26725
*                                        OVERFLOW RECFM)         A26725
         B     OKNE                     RETURN TO BUILDING DCB
XLOADX   DS    0H             THIS ENTRY  POINT IS USED  TO MOVE
*                             BLOCKSIZE, RECORD LENGTH AND FORMAT
*                             FROM  THE  DSCB  TO THE  TO DCB
*                             IN  LOAD  SITUATIONS ONLY
         L     R5,IEHMVV31
         L     R4,IEHMVV30+8            GET POINTERS TO TO DCB AND
*                                       FROM  DSCB
         MVC   DCBBLKSI-IHADCB(2,R5),DS1BLKL-DS1DSNAM(R4)
         MVC   DCBLRECL-IHADCB(2,R5),DS1LRECL-DS1DSNAM(R4)
         MVC   DCBRECFM-IHADCB(1,R5),DS1RECFM-DS1DSNAM(R4)
         NI    DCBRECFM-IHADCB(R5),TRKOFLOW  TURN OFF TRACK-     A26725
*                                        OVERFLOW BIT IN TO      A26725
*                                        DCB'S RECFM BYTE (TAPES A26725
*                                        CANNOT HAVE TRACK-      A26725
*                                        OVERFLOW RECFM)         A26725
         B     OKNE                     RETURN  TO BUILDING DCB
         DS    0F
DCBXX    DC    X'05'                   DCB EXIT LIST ENTRY FOR     UL0H
         DC    AL3(MYEXIT)              FROM DCB
ZZZ      DC    X'0000'
MYEXIT   DS    0H
         CLC   DCBDSORG(2),BDAM
         BNE   CBLK
         TM    DCBRECFM,X'40'    RECFM  U  OR  V                 A21645
         BO    CBLK                                              A21645
         OI    DCBOPTCD,RBA            INDICATE USE OF RELATIVE
*              BLOCK ADDRESSING FOR FIXED LENGTH RECORDS FOR
*              BDAM.    THIS MUST BE USED TO MOVE TRACK OVERFLOW
*              BDAM DATA SETS.
FIXED    EQU   X'80'
RBA      EQU   X'01'
CBLK     CLC   DCBBLKSI(2),ZZZ         IS BLKSIZE ZEROX
         BE    CHBLK                    YES  GO TO CHANGE IT
DCBRTN   RETURN RC=0                    NO  RETURN TO OPEN J
CHBLK    DS    0H
         MVI   IEHMVV10-5,X'05'         SET MESSAGE BYTE
         MVI   DCBBLKSI,X'0A'
         CLI   DCBRECFM,X'00'          RECFM SPECIFIED           A99999
         BNE   DCBRTN                  YES  RETURN TO OPEN       A99999
         MVI   DCBRECFM,X'C0'          NO  MAKE IT UNDEFINED     A99999
         B     DCBRTN                   RETURN TO OPEN J
         DS    0F
XXXT     DC    X'05'                   DCB EXIT LIST ENTRY FOR     UL0H
         DC    AL3(MYTOEXIT)            TO DCB
MYTOEXIT DS    0H             ENTRY POINT GIVEN CONTROL BY OPENJ
*                             FOR PROCESSING THE TO DCB
         L     R4,IEHMVV30
         CLC   DCBBLKSI(2),ZZZ          IS BLOCK SIZE ZERO?
         BNE   AROUND                   NO. GO TO TEST DSORG
         TM    IEHMVV20+1,LOAD         WILL THIS REQUEST RESULT IN A
*                                        LOADED PDS ON THE
*                                        RECEIVING VOLUME
         BNO   MVBLK                                            OY01174
         L     R4,IEHMVV30+8           FROMDSCB ADDR            OY01174
         CLC   DS1BLKL-DS1DSNAM(2,R4),ZZZ  IF BLKSIZE ZERO      OY01174
         BNE   JLDCBSET                GO MOVE DCB PARAMETERS   OY01174
         MVI   DCBBLKSI,X'0A'          ELSE TAKE DEFAULTBLKSI   OY01174
         MVI   DCBRECFM,X'C0'           AND DEFAULT RECFM       OY01174
*                                      FROM THE FROM DSCB       OY01174
         OI    JFCBTSDM,X'01'      INDICATE DSCB COMPLETE       OY01174
         B     DCBRTN              GO RETURN TO OPEN            OY01174
MVBLK    EQU   *                                                OY01174
         MVC   DCBBLKSI(2),DCBBLKSI-IHADCB(R4)
*                                       IF BLOCKSIZE IS ZERO, MOVE
*                                       BLOCKSIZE AND RECORD LENGTH
*                                       FROM THE FROM DCB TO THE TO DCB
         MVC   DCBLRECL(2),DCBLRECL-IHADCB(R4)
AROUND   CLC   DCBDSORG(2),BDAM         IS TO DSORG BDAM?
         BNE   TESTTO                   NO. GO TO TEST FOR PREALLOCATE
DONE     CLC   DCBRECFM(1),ZZZ     IS THE RECFM ZERO               1308
         BNE   DCBRTN              BRANCH IF NOT ZERO
         MVC   DCBRECFM(1),DCBRECFM-IHADCB(R4)
*                                  USE RECORD FORMAT OF FROM DCB
         B     DCBRTN                   RETURN TO OPEN
TESTTO   TM    IEHMVV20+3,PREALLOC      HAS THE TO DATA SET BEEN
*                                       PREALLOCATED?
         BZ    DONE                     NO. GO TO FILL IN RECORD FORMAT
*                                       FIELD AND RETURN TO OPEN
         TM    IEHMVV20,X'08'           CHECK FOR PDS KEYWORD
         BO    DONE                IF YES, GO CHECK FOR RECFM      1308
         MVC   DCBRECFM(1),SAVRECFM   IF NO, USE THE SAVED RECFM   1308
         CLI    DCBRECFM,X'00'             IS NEW RECFM SPECIFIED
         BNE    DCBRTN                  YES USE NEW RECFM
         MVC    DCBRECFM(1),DCBRECFM-IHADCB(R4)   NO MOVE IN OLD RECFM
*                                       SAVED FROM THE TO DSCB TO FILL
*                                       IN THE TO DCB
         B     DCBRTN                   RETURN TO OPEN
JLDCBSET L     R4,IEHMVV30+8           GET PNTR TO FROM DSCB
*                                      AND FILL IN DCB FIELDS
         MVC   DCBBLKSI(2),86(R4)
         MVC   DCBRECFM(1),84(R4)
         MVC   DCBLRECL(2),88(R4)
         B     DCBRTN
BLANKS   DC    CL6'      '                                     @ZA09158
SCRTCH   DC    CL6'SCRTCH'                                     @ZA09158
DW       DS    D                                                 A52003
SAVEREG1 DS    F                                                 A52003
ZEROS    DC    X'000000'                                         A52003
ALLZEROS DC    F'0'                                              A52003
XXOHLE   DC    X'02'                    OUTPUT HEADER LABEL        UL0H
         DC    AL3(OHLR)                  ROUTINE EXIT             UL0H
*                                                                  UL0H
OHLR     DS    0H                                                  UL0H
OFFSET1  EQU   OHLR-IEHMVESX                                       UL0H
* USER OUTPUT HEADER LABEL ROUTINE ENTERED FROM OPENJ OF OUTPUT DCBUL0H
*                                                                  UL0H
         LA    R8,OFFSET1              SET UP                      UL0H
         SR    R15,R8                  ADDRESSABILITY              UL0H
         LR    R11,R15                 FOR EXIT ROUTINE            UL0H
         CLI   IEHMVV72+8,X'01'         FIRST LABEL SWITCH ON      UL0H
         BNE   PROVIDE                  NO, PROVIDE NEXT LABEL     UL0H
         CLC   IEHMVV72(4),ALLZEROS     YES, LABELS IN GOTTEN CORE UL0H
         BE    IGNORE                   NO, IGNORE LABEL REQUEST   UL0H
         MVC   IEHMVV72+4(4),IEHMVV72   INITIALIZE LABEL POINTER   UL0H
         MVI   IEHMVV72+8,X'00'         CLEAR 1ST LABEL SWITCH     UL0H
PROVIDE  DS    0H                                                  UL0H
         TM    8(R1),X'80'             I/O ERROR FLG ON IN PARMLST UL0H
         BO    IOERR                   YES, GIVE MESSAGE           UL0H
         CLI   IEHMVV72+12,X'00'       LABEL COUNT AT ZERO         UL0H
         BE    FRECORE                 YES, NO LABELS, FREE CORE   UL0H
         L     R8,IEHMVV72+4            GET ADDR OF CURRENT LABEL  UL0H
         L     R15,0(R1)               GET ADDR OF OPEN LBL BUFFER UL0H
         MVC   0(80,R15),0(R8)         MOVE LABEL TO OUTPUT BUFFER UL0H
         LA    R8,80(0,R8)              UPDATE POINTER TO NEXT     UL0H
         ST    R8,IEHMVV72+4              LABEL AND SAVE POINTER   UL0H
         SR    R15,R15                  REDUCE                     UL0H
         IC    R15,IEHMVV72+12            USER                     UL0H
         BCTR  R15,R0                       LABEL                  UL0H
         STC   R15,IEHMVV72+12                COUNT                UL0H
*                                                                  UL0H
         LA    R15,8                    RETURN CODE 8 TO OPEN FOR  UL0H
         BR    R14                        ANOTHER LABEL            UL0H
*                                                                  UL0H
FRECORE  DS    0H                                                  UL0H
         L     R8,IEHMVV72              GET ADDR OF GOTTEN CORE    UL0H
         FREEMAIN R,LV=640,A=(R8)       FREE GOTTEN CORE           UL0H
         XC    IEHMVV72(8),IEHMVV72     RESET POINTERS             UL0H
*                                                                  UL0H
IGNORE   DS    0H                                                  UL0H
         SR    R15,R15                  RETURN CODE 0 TO OPEN TO   UL0H
         BR    R14                        IGNORE LABELS            UL0H
*                                                                  UL0H
*                                                                  UL0H
*     GIVE MESSAGE--I/O ERROR WRITING USER OUTPUT HEADER LABELS    UL0H
*                                                                  UL0H
IOERR    DS    0H                                                  UL0H
         OI    IEHMVV74+4,X'FF'         YES, SET FLAG TO OUTPUT    UL0H
*                                        MSG AFTER OPEN/CLOSE/EOV  UL0H
         B     FRECORE                  GO FREE GOTTEN CORE        UL0H
*
IOERRMSG DS    0H                                                  UL0H
         OI    IEHMVV74+4,X'00'         CLEAR I/O ERROR FLAG       UL0H
         SR    R4,R4                    CLEAR REG 4                UL0H
         IC    R4,IEHMVV61             SAVE CURRENT MSG CODE       UL0H
         MVI   IEHMVV61,X'0B'          MOVE IN CODE FOR THIS MSG   UL0H
         L     R15,ADMSG               GET ADDR OF MSG WRITER      UL0H
         BALR  R14,R15                 AND GO GIVE MSG             UL0H
         STC   R4,IEHMVV61             RESTORE TO PREV. VALUE      UL0H
         B     ERMSGRET                 RETURN TO INLINE PROCESSINGUL0H
*
ADIHLR   DC    X'01'             INPUT HEADER LABEL ROUTINE     OY01176
         DC    AL3(IHLR)         DCB-EXLIST ENTRY               OY01176
IHLR     DS    0H                                               OY01176
OFFSET   EQU   IHLR-IEHMVESX                                    OY01176
         LA    R8,OFFSET         SET UP                         OY01176
         SR    R15,R8            ADDRESSABILITY                 OY01176
         LR    R11,R15           FOR EXIT ROUTINE               OY01176
         L     R8,0(R1)          GET ADDR. OF LABEL BUFFERAREA  OY01176
         LTR   R8,R8             ARE USER LABELS PRESENT        OY01176
         BNE   CHKIOERR          YES,IS I/O-ERROR INDICATED     OY01176
NOLABEL  SR    R15,R15           NO,RETURN TO OPEN,RETURNCODE 0 OY01176
         BR    R14                                              OY01176
CHKIOERR DS    0H                                               OY01176
         TM    8(R1),X'80'       PERM.ERROR SHOWN IN PARMLIST   OY01176
         BC    14,CORAVAIL       NO,SEE IF CORE GOTTEN YET      OY01176
LABLERR  DS    0H                                               OY01176
         OI    IEHMVV74+4,X'FF'  YES,SET FLAG TO OUTPUT MSG     OY01176
         MVI   UDCBIHLE,X'00'    DEACTIVATE HEADER LABEL ENTRIES Y01176
         MVI   UDCBOHLE,X'00'    IN DCB-EXIT LIST               OY01176
         OI    IEHMVV20+2,X'40'  TELL ESN TO PUT OUT MSG        OY01176
         BR    R14               RETURN TO OPENJ                OY01176
CORAVAIL DS    0H                                               OY01176
         CLC   IEHMVV72(4),ALLZEROS WAS CORE GOTTEN FOR LABELS  OY01176
         BNE   SAVLABEL          ADDR.NOT ZERO,CORE GOTTEN      OY01176
         GETMAIN R,LV=640        GET CORE IF NECESSARY          OY01176
         ST    R1,IEHMVV72       SAVE ADDR.OF GOTTEN CORE       OY01176
         MVC   IEHMVV72+4(4),IEHMVV72 SAVE PTR TO LABELSAVEAREA OY01176
SAVLABEL DS    0H                                               OY01176
         L     R9,IEHMVV72+4     GET ADDR.CURRENT LBL-SAVEAREA  OY01176
         MVC   0(80,R9),0(R8)    MOVE LBL TO AREA FROM LABELBF  OY01176
         LA    R9,80(R9)         UPDATE PTR TO NEXT AREA        OY01176
         ST    R9,IEHMVV72+4     STORE UPDATED PTR              OY01176
         SR    R9,R9                                            OY01176
         IC    R9,IEHMVV72+12    PICK UP COUNT OF LABELS        OY01176
         LA    R9,1(R9)          INCREMENT COUNT BY 1           OY01176
         STC   R9,IEHMVV72+12    STORE UPDATED COUNT            OY01176
         LA    R15,4             RETCODE 4 TO GET ADDIT.LABELS  OY01176
         BR    R14               RETURN TO OPENJ-ROUTINE        OY01176
ABORT    DS    0H             THIS ENTRY POINT IS USED TO ABNORMALLY
*                             TERMINATE A REQUEST WHICH INVOLVES MORE
*                             THAN 5 VOLUMES.
         MVI   IEHMVV61,X'07'           SET MESSAGE CODE TO PRINT MSG
*                                       INDICATING WHY THIS REQUEST IS
*                                       BEING TERMINATED.
ABEND    L     R14,PREAB
         BR    R14                      GOTO PREABORT ROUTINE WHICH
*                                       PRINTS MSG, CLOSES THE FROM AND
*                                       TO DCBS IF THEY HAVE BEEN
*                                       OPENED, AND RETURNS CONTROL TO
*                                       IEHMVESH IF THERE IS ANOTHER
*                                       REQUEST OR TO IEHMVESK IF THERE
*                                       ARE NO MORE REQUESTS.
*
*
*
*                             DCB BUILDER ROUTINE
***********************************************************************
*    THIS ROUTINE FORMATS A DCB FOR THE FROM AND TO DATA SETS         *
* ACCORDING TO THE DATA SET ORGANIZATION INDICATED IN REGISTER 0      *
*    THE ROUTINE USES THE CODE IN REGISTER 0 TO SEARCH A TABLE        *
* FOR THE APPROPRIATE DCB FORMAT.                                     *
*    IF THE ORGANIZATION REQUESTED IS INVALID, THE REQUEST IS         *
* TERMINATED.  IF THE SOURCE DATA SET IS NOT A PHYSICAL SEQUENTIAL,   *
* PARTITIONED, OR DIRECT ACCESS(BDAM) DATA SET, IT CANNOT BE PROCESSED*
* BY THE UTILITY PROGRAM.                                             *
*                                                                     *
*                                                                     *
* INPUT:            REG 0 CONTAINS DSORG CODE                         *
*                   REG1 INDICATES WHETHER DCB IS FOR                 *
*                          INPUT OR OUTPUT.                           *
*                                                                     *
*                           0 = INPUT                                 *
*                           1 = OUTPUT                                *
*                                                                     *
*                                                                     *
* OUTPUT:           REG7  CONTAINS POINTER TO DCB                     *
*                                                                     *
*                                                                     *
*    DCBS ARE BUILT IN THE PERMANENT WORK AREA AND EACH TIME          *
* A DCB IS BUILT, THE POINTER TO THE BEGINNING OF THE                 *
* PERMANENT WORK AREA IS DISPLACED BY THE LENGTH OF THE DCB           *
*                                                                     *
*                                                                     *
* ERRORS       INVALID DSORG.  REQUEST IS TERMINATED.                 *
*                                                                     *
*                                                                     *
* ENTRY POINT: DCBBUILD                                               *
***********************************************************************
*
*
         ENTRY DCBBUILD
DCBBUILD DS    0H             ENTRY POINT TO DCB BUILDER ROUTINE
         USING DCBBUILD,R15             SET UP ADDRESSABILITY.R15
*                                       LOADED BY CALLING ROUTINE
         LA    R4,SCHTABLE              GET ADDRESS OF DSORG TABLE
*                                       AND FIND DSORG REQUESTED
BBLOOP   CH    R0,0(R4)                 IS THIS THE DSORG NEEDED?
         BE    BBFND                    YES. GO TO FILL IN DCB FIELDS
         CLI   0(R4),X'FF'              NO. IS THIS END OF TABLE?
         BE    BBEND                    YES. GO TO LOAD ERROR CODE
         LA    R4,6(R4)                 NO. INCREMENT TABLE POINTER
         B     BBLOOP                   AND RETURN TO SEARCH AGAIN.
BBEND    DS    0H            ENTRY POINT FOR ABORTING REQUEST IF
*                            DSORG IS INVALID.  FOR THE PURPOSES OF
*                            THIS PROGRAM, THE DSORG IS INVALID IF IT
*                            IS NOT PS, BDAM, OR BPAM.
         MVI   IEHMVV61,X'09'          SET MSG CODE INVALID DSORG AND
*                                      ABORT REQUEST
         B     ABEND
*
*
BBFND    DS    0H             ENTRY POINT WHEN CORRECT DSORG HAS
*                             BEEN FOUND. DCB DISPLACEMENTS ARE
*                             COMPUTED HERE AND DCB FIELDS ARE
*                             FILLED IN.
*
         L     R7,IEHMVV10              GET POINTER TO BEGINNING
*                                       OF PERMANENT WORK AREA
         LH    R5,4(R4)                 GET DCB LENGTH FROM DSORG
*                                       TABLE.
         LA    R10,0(R5,R7)             ADJUST PERMANENT WORK AREA
*                                       POINTER BY DCB LENGTH.
         ST    R10,IEHMVV10
         EX    R5,ZERDCB                ZERO OUT DCB AREA.
         LH    R4,2(R4)                 PICKUP RELATIVE DISPLACEMENT
*                                       OF DCB ENTRY TABLE FROM
*                                       SEARCH TABLE AND
         LA    R5,TOPTAB
         LA    R5,0(R4,R5)              AND USE IT TO CALCULATE
*                                       POINTER TO THE DCB FIELDS
*                                       TO BE FILLED IN.
*
BBGO     DS    0H             ENTRY POINT OF LOOP WHICH FILLS IN
*                             THE DCB FROM CONTROL FIELDS IN
*                             THE DCB ENTRY TABLE.
         CLI   0(R5),X'FF'              IS THIS THE END OF DCB
*                                       ENTRY TABLE?
         BE    BBDONE                   YES. DCB HAS BEEN BUILT.
*                                       RETURN TO CALLING ROUTINE
         SR    R4,R4                    NO.
         IC    R4,0(R5)                 GET RELATIVE POSITION OF DCB
*                                       FIELD TO BE FILLED
         SR    R3,R3                    GET LENGTH OF DCB FIELD
         IC    R3,1(R5)                 TO BE FILLED
*
         LR    R10,R3                   HOLD FIELD LENGTH FOR LATER USE
         BCTR  R10,R0                   REDUCE FIELD LENGTH BY ONE
*                                       FOR CORRECT MOVE LENGTH
         LA    R6,2(R5)                 ADJUST POINTER TO THE DCB
*                                       ENTRY TABLE TO THE FIELD TO
*                                       BE MOVED.
         LTR   R1,R1                    IS THIS DCB FOR INPUT?
         BZ    BBMOVE                   YES.
         LA    R6,0(R3,R6)              NO. ADJUST POINTER TO OUTPUT
*                                       FLAG FIELD
BBMOVE   DS    0H             ENTRY POINT FOR MOVE OPERATION
*                             AND LOOP MODIFICATION.
         LA    R4,0(R4,R7)              CALCULATE POINTER TO FIELD
*                                       TO BE FILLED
         EX    R10,BBM                  MOVE ENTRY FROM DCB ENTRY
*                                       TABLE TO THE DCB
         LA    R5,2(R5,R3)              ADJUST DCB ENTRY TABLE
         LA    R5,0(R5,R3)              POINTER TO NEXT FIELD TO
*                                       BE MOVED.
         B     BBGO                     RETURN TO BEGINNING OF
*                                       LOOP
BBDONE   DS    0H             EXIT LABEL
         BR    R14                      NORMAL RETURN
*
ZERDCB   XC    0(1,R7),0(R7)            ZERO OUT DCB AREA
BBM      MVC   0(1,R4),0(R6)            MOVE FIELD FROM DCB ENTRY
*                                       TABLE TO DCB BEING BUILT.
         DROP  R15
ADMSG    DC    A(MSG)                   EXTERNAL REFERENCE.
PREAB    DC    A(PREABORT)              EXTERNAL REFERENCE
SCSV1    DS    3F                                               YL026VC
SCSV2    DS    2F                                               YL026VC
BDAM     DC    X'2000'
SL       EQU   X'02'       INDICATES STANDARD LABEL              A32041
SAVRECFM DS    CL1
         DS    CL1
         EJECT
SCHTABLE EQU   *
         DC    X'4000'                  PS
         DC    AL2(PSXXX-TOPTAB)
     DC   FL2'120'
         DC    X'2000'                  BDAM
         DC    AL2(BDAMXXX-TOPTAB)
    DC   FL2'120'
         DC    X'0200'                  POS
         DC    AL2(PDSXXX-TOPTAB)
    DC   FL2'120'
         DC    X'0001'                  UNLOAD
         DC    AL2(UNLDXXX-TOPTAB)
    DC  FL2'120'
         DC    X'0000'
         DC    AL2(PSXXX-TOPTAB)
      DC   FL2'120'
         DC    X'0002'
         DC    AL2(CATDCB-TOPTAB)
         DC    FL2'120'
         DC    X'FFFF'
TOPTAB   EQU   *                        TOP OF DCB ENTRY TABLE
CATDCB   EQU   *
         DC    AL1(DCBDSORG-IHADCB)
         DC    X'02'
         DC    X'4000'
         DC    X'4000'
         DC    AL1(DCBOFLGS-IHADCB)
         DC    X'01'
         DC    X'02'
         DC    X'02'
         DC    AL1(DCBMACR-IHADCB)
         DC    X'02'
       DC    X'2400'
         DC    X'0020'
         DC    AL1(DCBBLKSI-IHADCB)
         DC    X'02'
         DC    X'0100'
         DC    X'0100'
         DC    AL1(DCBKEYLE-IHADCB)
         DC    X'01'
         DC    X'08'
         DC    X'08'
         DC    AL1(DCBRECFM-IHADCB)
         DC    X'01'
         DC    X'81'
         DC    X'81'
         DC    X'FF'
PSXXX    EQU   *                        START OF PS DCB ENTRIES
         DC    AL1(DCBDSORG-IHADCB)
         DC    X'02'
         DC    X'4000'
         DC    X'4000'
         DC    AL1(DCBOFLGS-IHADCB)
         DC    X'01'
         DC    X'02'
         DC    X'02'
         DC    AL1(DCBMACR-IHADCB)
         DC    X'02'
         DC    X'2000'
         DC    X'0020'
         DC    X'FF'                    END OF PS DCB ENTRIES
BDAMXXX  EQU   *                        START OF BDAM DCB ENTRIES
         DC    AL1(DCBDSORG-IHADCB)
         DC    X'02'
         DC    X'2000'
         DC    X'4000'
         DC    AL1(DCBMACR-IHADCB)
         DC    X'02'
         DC    X'2800'
         DC    X'0028'
         DC    AL1(DCBOFLGS-IHADCB)
         DC    X'01'
         DC    X'02'
         DC    X'02'
         DC    AL1(DCBOPTCD-IHADCB)
         DC    X'01'
         DC    X'10'
         DC    X'00'
         DC    AL1(DCBDSORG-IHADCB)
         DC    X'02'
         DC    X'2000'
         DC    X'4000'
         DC    AL1(DCBMACR-IHADCB)
         DC    X'02'
         DC    X'2800'
         DC    X'0028'
         DC    AL1(DCBOFLGS-IHADCB)
         DC    X'01'
         DC    X'02'
         DC    X'02'
         DC    AL1(DCBOPTCD-IHADCB)
         DC    X'01'
         DC    X'10'
         DC    X'00'
         DC    X'FF'                    END OF BDAM DCB ENTRIES
UNLDXXX  EQU   *                        START OF UNLOAD DCB ENTRIES
         DC    AL1(DCBDSORG-IHADCB)
         DC    X'02'
         DC    X'4000'
         DC    X'4000'
         DC    AL1(DCBBUFNO-IHADCB)
         DC    X'04'
         DC    X'00000001'
         DC    X'00000001'
         DC    AL1(DCBBUFL-IHADCB)
         DC    X'02'
         DC    X'0000'
         DC    X'0320'
         DC    AL1(DCBBFTEK-IHADCB)
         DC    X'01'
         DC    X'00'
         DC    X'40'
         DC    AL1(DCBBLKSI-IHADCB)
         DC    X'02'
         DC    X'0000'
         DC    X'0320'
         DC    AL1(DCBLRECL-IHADCB)
         DC    X'02'
         DC    X'0000'
         DC    X'0050'
         DC    AL1(DCBRECFM-IHADCB)
         DC    X'01'
         DC    X'C0'
     DC   X'90'
         DC    AL1(DCBMACR-IHADCB)
         DC    X'02'
         DC    X'2000'
         DC    X'4848'
         DC    AL1(DCBOFLGS-IHADCB)
         DC    X'01'
         DC    X'02'
         DC    X'02'
         DC    X'FF'                    END OF UNLOAD DCB ENTRIES
PDSXXX   EQU   *
         DC    AL1(DCBDSORG-IHADCB)          DSORG FIELD
         DC    X'02'                         LENGTH
         DC    X'0200'                       PDS FROM
         DC    X'0200'                       PDS TO
         DC    AL1(DCBMACR-IHADCB)           MACR
         DC    X'02'
         DC    X'2400'
         DC    X'0024'
         DC    AL1(DCBOFLGS-IHADCB)
         DC    X'01'
         DC    X'02'
         DC    X'02'
         DC    X'FF'
DCBB     DC    A(DCBBUILD)
         DCBD  DSORG=(PS,IS,DA,PO)
         EJECT
JFCBX    DSECT
         IEFJFCBN
XLIST    DS    2F
*                             EXIT  LIST  SPACE  ALLOCATION
         IEHMVV
         ORG   IEHMVV70                                            UL0H
         IEHDCBXL                                                  UL0H
         ORG   IEHMVV00
         IECSDSL1 (1)
         IKJTCB LIST=YES                                        YL026VC
         IEZJSCB                                                YL026VC
         IHAQDB                                                 YL026VC
         IHADSAB                                                YL026VC
         IEZDEB LIST=YES                                        YL026VC
         END
