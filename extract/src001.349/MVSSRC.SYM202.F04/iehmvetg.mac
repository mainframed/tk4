 TITLE 'IEHMVETG-HANDLES INCLUDE, REPLACE AND SELECT REQS FOR A PDS'
*        IEHMVETG
*
* FUNCTION
*
*THIS IS THE MODULE THAT WILL HANDLE ALL INCLUDE AND REPLACE REQUESTS
*FOR A  MOVE OR COPY PDS.       THE INCLUDE REPLACE LIST IS PUT ON A
*WORK FILE IN ANY SEQUENCE,JUST THE WAY THEY ARE RECEIVED FROM THE USER
*THE MODULE WILL FIRST CHECK TO SEE IF THERE ARE ANY INC/REP FROM THE
*ORIGINAL VOLUME THAT CONTAINED THE PDS TO BE COPIED OR MOVED.IF NONE
*EXIST, THEN THE PROGRAM WILL READ THE FIRST INC/REP REQUEST FROM THE
*WORKFILE,AND HAVE THAT VOLUME MOUNTED.IT WILL THEN CHECK THE DSCB  TO
*MAKE SURE THE INCLUDE IS COMPATABLE WITH THE DATA SET ALREADY MOVED.
*THE FOLLOWING ARE CHECKED FOR COMPATABILITY
*
* 1)TEST IS MADE TO SEE IF DATA SET IS A PDS
* 2)TEST IS MADE TO INSURE THAT RECORD FORMATS ARE THE SAME
* 3)TEST IF BLKSIZE OF INCLUDE DS FITS ON THE ORIGINAL FROM DS
* 4)TEST TO SEE IF KEY LENGTHS ARE EQUAL
*
*IF ALL THESE TESTS ARE MET, THEN WE CHECK TO SEE IF THE APPROPRIATE
*VOLUME IS MOUNTED. IF NOT, THEN WE GO TO A VOLUME MOUNT ROUTINE  WITH
*REG1 POINTING TO VOLUME INFO. WHICH THEN HAS THE CORRECT VOLUME MOUNTD
*ONCE WE'VE DETERMINED THAT THE CORRECT VOLUME IS MOUNTED,WE ARE READY
*TO OPEN THIS DATA SET. WE USE THE OPENJ MACRO,FOR WHICH WE HAVE TO
*BUILD A MODEL JFCB AND SET IT UP WITH DSNAME, MEMBER NAME, VOLUME
*INFO IN IT. THERE IS ALSO AN EXIT LIST POINTER IN MY DCB TO A LIST FOR
*OPENJ. THIS OPENS OUR DATA SET AND LET'S US  GET THE CORRECT DIRECTRY
*ENTRY BY USING BLDL. ONCE WE HAVE THE DIRECTORY ENTRY WE WRITE IT OUT
*ON A WORK FILE. THE FORMAT OF THIS WORKFILE IS:
*
* 4 BYTE KEY OF  ATTR
*       A=00 IF THE NAME IS A TRUE MEMBER NAME
*       A=80 IF THE NAME IS AN ALIAS
*     TTR=IS THE TTR TAKEN FOLLOWING THE MEMBER NAME IN THE DIR ENTRY
*FOLLOWED BY A VARIABLE SIZE DATA RECORD MAX SIZE OF 87 BYTES
*THE DATA PORTION IS BROKEN DOWN INTO THE FOLLOWING PARTS
*       1)FIRST 5 BYTES IS THE CCHHR OF THE RECORD ITSELF
*       2)THE NEXT (X) BYTES IS THE DIRECTORY ENTRY
*       3)FOLLOWING THE DIR ENTRY WE HAVE AN 8 BYTE FIELD WHICH CON
*         TAINS A MEMBER NAME TO BE USED TO STOW WITH. THIS LAST FIELD
*         IS FOR THE RENAME OPTION.
*
*ONCE WE HAVE PROCESSED ALL THE ENTRIES THAT PERTAIN TO A CERTAIN DATA
*SET ON A CERTAIN VOLUME THEN WE TCLOSE BOTH THE INPUT AND OUTPUT WORK
*FILES AND TRANSFER CONTROL TO THE MOVE/COPY PDS MODULE.
*EVERYTIME AN ENTRY IS PROCESSED AND PUT ON THE OUTPUT WORKFILE THAT
*ENTRY'S KEY IS ZEROED OUT ON THE INPUT WORKFILE WHICH PREVENTS US FROM
*PROCESSING IT AGAIN.
*ONCE EVERYTHING HAS BEEN PROCESSED THE INC/REP BIT ON IEHMVV IS TURNED
*OFF WHICH TELLS THE MOVE/COPY PDS MODULE NOT TO TRANSFER CONTROL TO
*THE INC/REP MODULE
*
*
* INPUT        A WORKFILE AS DESCRIBED IN THE MODULE FUNCTION.
*
* OUTPUT       A WORKFILE OF 4 BYTES OF KEY AND A MAXIMUM DATA PORTION
*              OF 87 BYTES. FIRST FIVE BYTES ARE CCHHR FOLLOWED BY A
*              DIRECTORY ENTRY WHICH CAN BE FOLLOWED BY A RENAME FIELD.
*
* EXTERNAL RTN VOLUME MOUNT ROUTINE
*              WRAP UP MODULE (IEHMVESN)
*
* EXITS        PRINT MSG MODULE(IEHMVESU) VIA LINK
*
* WORK AREA    WORK AREA FOR 'OBTAIN' MACRO
*              WORK AREA FOR I/O BUFFERS
*                                                                     *
* ATTRIBUTES NON-REEENTRANT
*
IEHMVSTG CSECT
*
*A034264-034268                                                @ZA11945
*C035000                                                       @ZA11945
*A034220-034360                                                @ZA07033
*A024210-024260                                                @ZA01247
*C037660,037920,038060,038840,038880,039100,039320,039400      @ZA01247
*C039480,039620,039680,040040,040080,040120,040490,040550      @ZA01247
*C040600,041120,041300,041320,142745,142763                    @ZA01247
*D037740-037796                                                @ZA01247
*A37730-37790                                                   YM00561
*D24210-24260                                                   YM00561
*C37660,37920,38060,38840,38880,39100,39320,39400,39480,39620   YM00561
*C39680,40040,40080,40120,40490,40550,40600,41120,41300,41320   YM00561
*C142745,142763                                                 YM00561
*C040900,041460,046400,107200                                    YM5087
*A109700                                                         YM5086
*A017880-017988,024210-024260,037600-041890,                    YA01217
*A107220-107420,110400,111600,113200,114600,115800,117000,118200YA01217
*A119400,121200-121560,122400,123100,123260-123320,124400,124700YA01217
*A127500,142700-142790,147620-147720,157766-157790              YA01217
*D017840,017880-017940,037600-042000,107220-107600              YA01217
*D108200-108400,110000,110400-110600,111000,111600-111800,112200YA01217
*D113200-113400,113800,114600-114800,115200-116000,116400       YA01217
*D117000-117200,117600,118200-118400,118800,119400-119600,120000YA01217
*D121200-121400,121800,122400-122600,124400,125600,127800,142400YA01217
*D142700                                                        YA01217
*C126000,126400,048400                                          YA01217
*D049060                                                          M0121
*D043000,043200                                                   M2686
*C043400                                                          M2686
*A049000                                                          M2686
*A107264-107268                                                  A45202
*C026300                                                         A38742
*030000-030800,055400-057000,059800,070800-078390,083060-083120, S20201
*135600
* ALL CODE FLAGGED S20201 WAS ADDED OR CHANGED FOR RLSE 20.2     S20201
*   RPS SUPPORT                                                  S20201
* 023800,024400                                                  A27790
* 107226-107232                                                  A25562
REG0     EQU   0
REG1     EQU   1
REG2     EQU   2
REG3     EQU   3
REG4     EQU   4
REG5     EQU   5
REG6     EQU   6
REG7     EQU   7
REG8     EQU   8
REG9     EQU   9
BASE10   EQU   10
REG11    EQU   11
REG12    EQU   12
REG13    EQU   13
REG14    EQU   14
REG15    EQU   15
CCWS     EQU   216                     BYTES IN CCW CHAIN        S20201
RPS      EQU   4                       RECORD READY FEATURE      S20201
PO       EQU   X'02'               DSORG PARTITIONED            YA01217
F        EQU   X'80'               RECFM FIXED                  YA01217
V        EQU   X'40'                     VARIABLE               YA01217
U        EQU   X'C0'                     UNDEFINED              YA01217
T        EQU   X'20'                     TRACK OVERFLOW         YA01217
B        EQU   X'10'                     BLOCKED                YA01217
S        EQU   X'08'                     STANDARD / SPANNED     YA01217
KEYLEN0  EQU   X'01'                     DCB KEYLEN ZERO        YA01217
TFEATURE EQU   X'40'               UCBTYP TRACK OVERFLOW FEATUREYA01217
ALL      EQU   X'FF'                                            YA01217
ZERO     EQU   X'00'                                            YA01217
BLANK    EQU   C' '                                             YA01217
         SPACE 2                                                YA01217
IEHMVETG SAVE  (14,12),T,ETG-SEPT-8/65
         BALR  BASE10,0
         USING *,BASE10
         ENTRY IEHMVETG                 THIS IS MY ENTRY POINT
         USING IEHMVV,REG12             USE REG12 TO GET TO COMTABLE
         USING CORE,REG11
         USING GETCORE,REG9     USING AS A BASE REGISTER
         USING MESSAGES,REG7        BASE FOR MSG CSECT
         TM    IEHMVV20+4,X'10'         IS THIS RET FROM VOL MNT
         BZ    SAVE                           IF NOT ---
         NI    IEHMVV20+4,X'EF'            TURN OFF VOL RET BIT
         B     VOLRET
SAVE EQU *
         IEHPRE ,FT
*
* THIS POINT IS DONE ONCE FOR EVERY TIME THE PROGTAM IS ENTERED
*
         NI    IEHMVV20+2,X'7F'        TURN OFF ALAIS SWITCH       9312
         L     REG1,IEHMVV42    ADDRESS OF SYSUT3 DCB
         LA    REG0,POINT   ADDRESS OF TTR0=0010
         POINT (1),(0)   POINT TO BEG OF SYSUT3
         L     REG2,IEHMVV42        ADDR OF SYSUT3 DCB
         MVI   18(REG2),X'7F'       SET TRK BAL TO MAX
         MVI   19(REG2),X'FF'       SET TRK BAL TO MAX
*NOW WE SET UP THE PROGRAM BASE,DO,SOME GETMAINS AND DO SOME GENERAL
*HOUSEKEEPING AND CLOSE THE OLD INPUT DCB
*
REPEAT   L     REG2,IEHMVV30   ADDRESS OF INPUT DCB
         LA    REG2,0(0,REG2)        CLEAR HIGH ORDER BYTE
         CLOSE ((2),REREAD)             CLOSE THE OLD INPUT DCB  A27790
         L     REG2,IEHMVV31       ADDRESS OF OUTPUT DCB
* THIS RTN SAVES THE VOL SER NBR AND FILE SEQ NBR FOR IEHMVESN   A43752
         TM    IEHMVV82+24,X'80'       VOL SER NBR ALREADY SAVED A43752
         BO    SKIPSAVE                YES SKIP THE SAVE RTN     A43752
         TM    48(REG2),X'10'          DCB OPEN                  A43752
         BNO   SKIPSAVE                NO SKIP THE SAVE RTN      A43752
         L     REG9,44(REG2)           DEB ADDRESS               A43752
         SR    REG2,REG2               CLEAR FOR INSERT          A43752
         IC    REG2,16(REG9)           NBR OF EXTENTS            A43752
         TM    28(REG9),X'04'          TO DEVICE DA              A43752
         BO    OFFS16                  YES FIND LAST EXTENT      A43752
         LA    REG9,28(REG9)           SCAN THE EXTENTS          A43752
NEXTEXT1 LA    REG9,4(REG9)            JUMP TO NEXT EXTENT       A43752
         BCT   REG2,NEXTEXT1           SCAN FURTHER              A43752
         B     SAVEUCB                 STORE UCB ADDR            A43752
OFFS16   DS    0H                                                A43752
         LA    REG9,16(REG9)                                     A43752
NEXTEXT2 LA    REG9,16(REG9)           JUMP TO NEXT EXTENT       A43752
         BCT   REG2,NEXTEXT2           SCAN FURTHER              A43752
SAVEUCB  L     REG9,0(REG9)             GET UCB ADDRESS          A43752
         MVC   IEHMVV82+24(2),38(REG9) SAVE LOG FILE SEQ NBR     A43752
         MVC   IEHMVV82+26(6),28(REG9) SAVE THE VOL SER NBR      A43752
         OI    IEHMVV82+24,X'80'       SET THE SWITCH FOR IEHMVESN
         L     REG2,IEHMVV31           RESTORE THE DCB ADDR      A43752
SKIPSAVE DS    0H                                                A43752
         LA    REG2,0(0,REG2)    CLEAR HIGH ORDER BYTE
         USING IHADCB,REG2             ADDRESS 'TO' DCB        @ZA01247
         MVC   SAVRECFM,DCBRECFM       SAVE 'TO' DCB RECFM     @ZA01247
         MVC   SAVLRECL,DCBLRECL                     LRECL     @ZA01247
         MVC   SAVBLKSI,DCBBLKSI                     BLKSIZE   @ZA01247
         MVC   SAVKEYLE,DCBKEYLE                     KEYLEN    @ZA01247
         DROP  REG2                                            @ZA01247
*                                       CLOSE OUTPUT DCB         A27790
         CLOSE ((2),REREAD)             (WILL BE REOPENED)       A27790
         B     GET
*TN TO TEST FIRST TIME SW, SET UP A CHUNK OF PERM WKAREA,SET UP BASE
*FOR PERM WKAREA,MOVE VOLUME INFO OF PDS PREVIOUSLY MOVED/COPIED
*
GET      TM    IEHMVV61,X'01'      TEST FOR FIRST TIME THRU
         BC    1,BLA
         OI    IEHMVV61,X'01'      SET FIRST TIME THRU SWITCH
         L     REG2,IEHMVV10       ADDR OF BEGNG OF PERMANENT WKAREA
         LR    REG9,REG2     SET UP BASE FOR PERM WKAREA
         LA    REG2,124(0,REG2) INCREMENT BY NO OF BYTES NEEDED A38742
         MVC   IEHMVV61+1(3),IEHMVV10+1    MOVE START ADDRESS
         ST    REG2,IEHMVV10       RESET THE START ADDRESS
         L     REG2,IEHMVV30+12         GET ADDRESS OF FROM DDNAME
         MVC   DDNAME(8),0(REG2)        SAVE FROM DDNAME
         L     REG2,IEHMVV22       ADDRESS OF FROM VOLUME LIST
         MVC   SEARCH(17),0(REG2)      MOVE 17 BYTE ENTRY IN SEARCHDT0I
         L     REG2,IEHMVV40          ADDR OF SYSUT1 DCB
         LA    REG2,0(0,REG2)     CLEAR HIGH ORDER BYTE
         MVC   HOLDTTR(3),IEHMVV26+1     SAVE TTR OF SYSUT1
BLA      EQU   *
         GETMAIN  R,LV=1016                                      S20201
         LR    REG11,REG1
         MVC   PREFACE(4),FORBLDL  SET UP WORD INDICATOR FOR BLDL
NOTFIRST L     REG2,IEHMVV61       ADDRESS OF MY CHUNK OF PERM WKAREA
         LR    REG9,REG2           THIS SETS UP REGISTER 9
         TM    IEHMVV61,X'04'    ANOTHER DS PENDING
         BO    TESTDSCB       IF SO ---
SETEXCP  MVI   INPUT,X'FF'          INDICATE EXIT TYPE FROM EXCP S20201
         BAL   REG7,MYEXCP            GO-EXECUTE CHANNEL PROG    S20201
         CLI   INPUT,X'FF'             ARE FF'S STILL THERE      S20201
         BC    8,NOREAD                IF YES,SEARCH ID= WAS HIT S20201
         B     TESTDSCB                CHECK IF DS OPEN FOR DSCB S20201
*
*ROUTINE WILL CHECK TO SEE IF
*1) A DATA SET IS ALREADY OPEN AND READY TO USE
*2) IF NOT,THEN THE DSCB FOR A DS IS READ INTO CORE AND CHECKED AGAINST
*   THE 'FROM' DSCB
*3) IF ANY DISCREPENCIES ARE DETECTED THE INCLUDE IS DROPPED AND THE
*   NEXT ONE PICKED UP
*4) IF DS IS OPEN, THEN THE DSNAMES ARE CHECKED AND IF THIS INCLUDE
*   BELINGS TO THAT DATA SET AN ENTRY IS MADE ON SYSUT3
*
*
TESTDSCB TM    IEHMVV61,X'20'      IS A DS ALREADY OPEN
         BC    1,TESTDSNM          IF YES,IS THIS INC FORM THIS DS
         TM    IEHMVV61,X'10'        DO ANY VOLUMES HAVE TO BE MNTED
         BC    1,GOTORON
RONRTN   MVC   DSNAME(44),INPUT+6       DSNAME ON INC/REP JUST READ
         GETMAIN R,LV=500          THIS FOR 'OBTAIN'
         L     REG2,IEHMVV31           ADDRESS OF TO DCB       @ZA07033
         LA    REG2,0(0,REG2)          CLEAR HIGH ORDER BYTE   @ZA07033
         USING IHADCB,REG2             ADDRESS TO DCB          @ZA07033
         TM    DCBOFLGS,X'10'          IS TO DCB OPEN          @ZA11945
         BZ    OBLIST                  NO, BRANCH              @ZA11945
         MVC   SAVRECFM,DCBRECFM       SAVE TO DCB RECFM       @ZA07033
         MVC   SAVLRECL,DCBLRECL                   LRECL       @ZA07033
         MVC   SAVBLKSI,DCBBLKSI                   BLKSIZE     @ZA07033
         MVC   SAVKEYLE,DCBKEYLE                   KEYLEN      @ZA07033
         DROP  REG2
*
*WE NOW BUILD A LIST FOR OBTAIN, WHICH GETS THE DSCB FOR US
*
OBLIST   ST    REG1,LIST+12           ADDR OF WKAREA           @ZA11945
         LA    REG1,INPUT+6        ADDRESS OF DSNAME
         ST    REG1,LIST+4         PLUGGED INTO LIST FOR OBTAIN
         MVI   LIST,X'C1'          INDICATES A SEARCH ON DSNAME
         MVC   LIST+1(3),ZEROS     CLEAR OUT OTHER THREE BYTES
         LA    REG1,SEARCH+4       ADDRESS OF VOL SERIAL NUMBER
         ST    REG1,LIST+8      ADDR OF VOL SER
         LA    REG1,LIST           FOR 'OBTAIN'
         OBTAIN (1)                GET ME THE DSCB
         B     *+4(REG15)          TESTING RETURN CODE IN REG15
         B     *+12                NORMAL RETURN
         B     MSG2                VOLUME NOT MOUNTED
         B     MSG3                DSCB NOT FOUND IN VTOC
*                                                               YA01217
*  TEST DATA SET ORGANIZATION, RECORD FORMAT, BLOCKSIZE, RECORD YA01217
*  RECORD LENGTH AND KEYLENGTH OF INCLUDED OR REPLACING DATA SETYA01217
*  COMPATIBLE WITH 'TO' DATA SET                               @ZA01247
*                                                               YA01217
         L     REG2,LIST+12            INC/REP DSCB ADDRESS + 44YA01217
         SH    REG2,LENGTH44           ADJUST DSCB POINTER      YA01217
         USING IECSDSL1,REG2                                    YA01217
         L     REG3,IEHMVV30+8         FROM DSCB ADDRESS        YA01217
*                                                               YA01217
         TM    DS1DSORG,PO             TEST INC/REP DSORG       YA01217
         BNO   MSG4                    IGNORE IF NOT PARTITIONEDYA01217
*                                                               YA01217
         CLC   DS1KEYL,SAVKEYLE        COMPARE KEYLEN INC - TO @ZA01247
         BNE   MSG7                    MUST BE EQUAL            YA01217
*                                                               YA01217
         MVC   TORECFM,SAVRECFM      WORK-COPIES OF TO AND INC @ZA01247
         MVC   INCRECFM,DS1RECFM       RECFM ALLOWING BIT RESET.YA01217
*                                                               YA01217
         TM    INCRECFM,T              TEST INC/REP DS          YA01217
         BNO   CTESTNOT                IF WRITTEN WITH TRACK    YA01217
         TM    SEARCH+1,TFEATURE       OVERFLOW, THE DEVICE     YA01217
         BNO   MSG9                    SHOULD HAVE THIS FEATURE.YA01217
         NI    INCRECFM,ALL-T          T-BITS NOT USED IN OTHER YA01217
CTESTNOT NI    TORECFM,ALL-T-KEYLEN0   TESTS OF THE RECFM.      YA01217
*                                                               YA01217
         TM    TORECFM,U               BRANCH TO ROUTINE FOR:   YA01217
         BO    CTESTU                  RECFM UNDEFINED          YA01217
         TM    TORECFM,F               RECFM FIXED (BLOCKED)    YA01217
         BO    CTESTF                                           YA01217
         TM    TORECFM,V+S             RECFM VARIABLE SPANNED   YA01217
         BO    CTESTVS                                 (BLOCKED)YA01217
         TM    TORECFM,V               RECFM VARIABLE           YA01217
         BO    CTESTV                                           YA01217
*                                      IF NOT SPECIFIED, HANDLE YA01217
*                                      AS UNDEFINED             YA01217
*                                                               YA01217
CTESTU   EQU   *                       - RECFM UNDEFINED.       YA01217
         TM    INCRECFM,U              INCLUDE RECFM HAS TO BE  YA01217
         BM    MSG4A                   UNDEFINED OR NOT SPECIFIDYA01217
         NI    TORECFM,ALL-U           RESET BITS TO COMPARE    YA01217
         NI    INCRECFM,ALL-U          ONLY CONTROL-CHAR-BITS   YA01217
         CLC   INCRECFM,TORECFM        TEST RECFM INC/REP - TO @ZA01247
         BNE   MSG4A                   IF NOT EQUAL INCOMPATIBLEYA01217
         CLC   DS1BLKL,SAVBLKSI        COMPARE BLKSIZE INC -TO @YA03857
         BNH   CTESTETJ                GOOD IF NOT LARGER.      YA01217
         CLC   DS1BLKL,DS1BLKL-DS1DSNAM(REG3)  IF BLKSIZE OF INCYA01217
         BH    MSG5                    NOT LARGER THAN FROM DS, YA01217*
                                       USER RESPONSIBILITY.     YA01217
         B     CTESTETJ                NORMAL COPY (IEHMVETJ)   YA01217
*                                                               YA01217
CTESTF   EQU   *                       - RECFM FIXED (BLOCKED)  YA01217
         CLC   INCRECFM,TORECFM        COMPARE RECFM INC - TO  @ZA01247
         BE    CTESTF1                 IF EQUAL, RECFM OK.      YA01217
         NI    INCRECFM,ALL-B-S        RESET BITS TO COMPARE    YA01217
         NI    TORECFM,ALL-B-S         (BLOCKED AND STANDRD OFF)YA01217
         CLC   INCRECFM,TORECFM        COMPARE REMAINING BITS   YA01217
         BNE   MSG4A                   MUST BE EQUAL            YA01217
         CLC   DS1LRECL,SAVLRECL       COMPARE LRECL INC - TO  @ZA01247
         BNE   MSG6                    MUST BE EQUAL            YA01217
         TM    SAVRECFM,S              TEST TO DS STANDARD     @ZA01247
         BNO   CTESTF2                                          YA01217
         TM    DS1RECFM,S              TEST INC/REP DS STANDARD YA01217
         BO    CTESTF2                                          YA01217
         CLI   DS1KEYL,ZERO            IF TO DS S BUT INC NOT, @ZA01247
         BNE   MSG4A                   REBLOCKING REQUIRED BUT  YA01217
         B     CTESTESL                ONLY POSSIBLE IF KEY ZEROYA01217
CTESTF1  EQU   *                                                YA01217
         CLC DS1LRECL,SAVLRECL         COMPARE LRECL INC - TO  @ZA01247
         BNE   MSG6                    MUST BE EQUAL            YA01217
CTESTF2  EQU   *                                                YA01217
         CLC   DS1BLKL,SAVBLKSI        COMPARE BLKSIZE INC -TO @ZA01247
         BE    CTESTETJ                IF EQAUL, NORMAL COPY    YA01217
         CLI   DS1KEYL,ZERO            IF NOT EQUAL AND KEYLEN  YA01217
         BE    CTESTESL                ZERO, CAN BE REBLOCKED.  YA01217
         CLC   DS1BLKL,SAVBLKSI        NO REBLOCKING POSSIBLE:  YA01217
         BH    MSG5                    IF TO BLKSIZE LARGER AND YA01217
         TM    SAVRECFM,S              NO STANDARD BLOCKS, THE  YA01217
         BO    MSG5                    SMALLER BLOCKS ARE COPIEDYA01217
         B     CTESTETJ                                         YA01217
*                                                               YA01217
CTESTVS  EQU   *                       - RECFM VARIABLE SPANNED YA01217
         CLC   INCRECFM,TORECFM        COMPARE RECFM INC - TO  @ZA01247
         BNE   MSG4A                   MUST BE EQUAL            YA01217
         CLC   DS1BLKL,SAVBLKSI        COMPARE BLKSIZE INC -TO @ZA01247
         BNE   MSG5                    V(B)S CANNOT BE REBLOCKEDYA01217
         CLC   DS1LRECL,SAVLRECL       COMPARE LRECL INC - TO  @ZA01247
         BNH   CTESTETJ                GOOD IF LOW OR EQUAL     YA01217
         CLC   DS1LRECL,DS1LRECL-DS1DSNAM(REG3)  IF HIGH, ALLOW YA01217
         BH    MSG6                    COPY WHEN USER TOOK SAME YA01217
         B     CTESTETJ                IF GOOD, NORMAL COPY     YA01217
*                                                               YA01217
CTESTV   EQU   *                       - RECFM VARIABLE         YA01217
         XC    INCRECFM,TORECFM        SET NOT-MATCHING BITS IN YA01217
         TM    INCRECFM,ALL-B            RECFM, OF WHICH ONLY B YA01217
         BNZ   MSG4A                     (BLOCKED) MAY DIFFER.  YA01217
         XC    INCRECFM,TORECFM        RESET RECFM              YA01217
         TM    TORECFM,B               TEST TO DS BLOCKED      @ZA01247
         BNO   CTESTV3                   BRANCH IF NOT BLOCKED  YA01217
*                                      - TO DS IS BLOCKED      @ZA01247
         CLC   SAVBLKSI,DS1BLKL        COMPARE BLKSIZE TO -INC @ZA01247
         BL    CTESTV1                   LOW                    YA01217
         BH    CTESTV2                   HIGH                   YA01217
*                                        EQUAL                  YA01217
         TM    INCRECFM,B              TEST INC DS BLOCKED      YA01217
         BO    CTESTETJ                IF BLOCKED, NORMAL COPY  YA01217
         B     CTESTV2                 IF NOT, TEST KEY TO REBLKYA01217
CTESTV1  EQU   *                                                YA01217
         TM    INCRECFM,B              TEST INC DS BLOCKED      YA01217
         BO    CTESTV4                 IF YES, TEST KEY TO REBLKYA01217
         TM    DS1RECFM-DS1DSNAM(REG3),B  IF INC NOT BLOCKED ANDYA01217
         BO    MSG5                    FROM-DS BLOCKED, NOT COPDYA01217
         CLC   DS1BLKL,DS1BLKL-DS1DSNAM(REG3)  FROM DS NOT BLKED YM5087
         BL    MSG5                    THEN BLKSIZE MUST BE LOW.YA01217
CTESTV2  EQU   *                                                YA01217
         CLI   DS1KEYL,ZERO            TEST FOR KEY             YA01217
         BZ    CTESTESM                IF NO KEY, REBLOCK       YA01217
         B     CTESTETJ                ELSE, COPY ASIS          YA01217
CTESTV3  EQU   *                       - TO DS IS NOT BLOCKED  @ZA01247
         TM    INCRECFM,B              TEST INC DS BLOCKED      YA01217
         BNO   CTESTV5                   BRANCH IF NOT          YA01217
CTESTV4  EQU   *                       INC DS IS BLOCKED        YA01217
         CLI   DS1KEYL,ZERO            TEST FOR KEY             YA01217
         BZ    CTESTESM                IF NO KEY, REBLOCK       YA01217
         B     MSG5                    ELSE REBLOCKING IMPOSSIBLYA01217
CTESTV5  EQU   *                       INC AND TO DS NOT BLKED @ZA01247
         CLC   SAVBLKSI,DS1BLKL        COMPARE BLKSIZE TO -INC @ZA01247
         BNL   CTESTETJ                IF NOT SMALLER, NORMAL C.YA01217
         TM    DS1RECFM-DS1DSNAM(REG3),B  TEST FROM-DS BLOCKED  YA01217
         BO    MSG5                    IF SO, BLKSIZE TOO LARGE YA01217
         CLC   DS1BLKL,DS1BLKL-DS1DSNAM(REG3)  IF NOT, AND BLKSZ YM5087
         BNL   CTESTETJ                NOT SMALLER, TAKE SAME   YA01217*
                                       RISK AS FOR FROM DS      YA01217
         B     MSG5                    IF SMALLER, NO COPY      YA01217
*                                                               YA01217
CTESTESM MVC   MODULEND,SM             VARIABLE REBLOCKING      YA01217
         B     SETUPDCB                RETURN TO IEHMVESM       YA01217
*                                                               YA01217
CTESTESL MVC   MODULEND,SL             FIXED REBLOCKING         YA01217
         B     SETUPDCB                RETURN TO IEHMVESL       YA01217
*                                                               YA01217
CTESTETJ MVC   MODULEND,TJ             NORMAL MOVE/COPY         YA01217
*                                      RETURN TO IEHMVETJ       YA01217
         DROP  REG2                                             YA01217
*
*THIS ROUTINE WILL SET UP A DCB SO IT CAN BE OPENED AND THE DIRECTORY
*CAN BE ACCESSED BY BLDL
*
SETUPDCB MVI   FAKEDCB,X'00'  THIS WILL CLEAR OUT THE WHOLE       M2686
         MVC   FAKEDCB+1(87),FAKEDCB    DCB AND WE CAN NOW INITIALIZE
         LA    REG1,1                   PUT CONSTANT OF 1 IN REG1
         STC   REG1,FAKEDCB+23           INITIALIZES
         STC   REG1,FAKEDCB+31            PART OF
         STC   REG1,FAKEDCB+55             THE DCB
         STC   REG1,FAKEDCB+59              TO WHAT
         STC   REG1,FAKEDCB+71               IT LOOKS
         STC   REG1,FAKEDCB+75                LIKE
         STC   REG1,FAKEDCB+79                 BEFORE
         STC   REG1,FAKEDCB+87                  OPEN
         LA    REG1,2                   MORE
         STC   REG1,FAKEDCB+48           INITIALIZING
         MVC   FAKEDCB+50(2),MACRF MACRO FORMAT,WE ARE GOING TO READ
         MVC   FAKEDCB+26(2),FILETYPE   THIS A PDS
         MVC   FAKEDCB+36(1),84(REG2) RECFM FROM DSCB OF THIS DS YM5087
         MVC   FAKEDCB+37(3),EXITLST+1  MOVE EXITLIST PTR TO DCB
         MVI   JFCB,X'00'               CLEAR JFCB OUT
         MVC   JFCB+1(175),JFCB
         MVC   JFCB(44),INPUT+6         MOVE DSNAME IN
         MVI   JFCB+44,X'40'      MOVE BL TO MEMBER NAME
         MVI   JFCB+117,X'01'           1 VOL ID TO FOLLOW
         MVC   JFCB+118(6),SEARCH+4     VOL ID
         MVI   JFCB+124,X'40'
         MVC   FAKEDCB+40(8),DDNAME     SET UP DDNAME
         LA    REG1,44(REG2)           RESET PTR TO DSCB        YA01217
         L     REG2,IEHMVV30       ADDRESS OF 'FROM' DCB
         MVC   0(88,REG2),FAKEDCB  MOVE BUILT DCB TO COMTAB
         MVC   62(2,REG2),42(REG1)     MOVE BLKSIZE TO DCB
         FREEMAIN R,LV=500,A=(1) FREE CORE GOTTEN FOR DSCB        M2686
         LA    REG2,0(0,REG2)        CLEAR HIGH ORDER BYTE
         MVC   RENTOPEN(TAG-OPENJ),OPENJ     THIS MAKES
         OPEN  ((2)),TYPE=J,MF=(E,RENTOPEN)  OPEN REENTRANT
         OI    IEHMVV61,X'20'      INDICATE WE HAVE AN OPEN DS
*
*NOW READY TO PASS SOME INFORMATION TO BLDL,SO WE CAN GET A DIRECTORY
*ENTRY ONTO SYSUT3
*
BLDLINFO MVC   BLDL(8),INPUT+50    MOVE MEMBER NAME TO BLDL LIST
         L     REG1,IEHMVV30       ADDRESS OF DCB
         LA    REG1,0(0,REG1)      CLEAR HIGH ORDER BYTE FOR BLDL
         LA    REG0,PREFACE        ADDRESS OF LIST FOR BLDL
         BLDL  (1),(0)
         CLI   BLDL+10,X'00'       CHECKING FOR NOFOUND FROM BLDL
         BC    8,MSG8              IF EQUAL,PRINT MSG
         B     PUTONUT3
*
*IF A DS IS OPEN,WE ENTER THIS ROUTINE WHICH CHECKS TO SEE IF THIS INC
*BELONGS TO THIS DS. IF NOT,THE A SWITCH IS SET THAT SAYS ANOTHER INC
*EXISTS ON THIS VOLUME,SO NO MOUNTING WILL BE REQUIRED TO PRECESS INCL-
*UDES FROM AT LEAST ONE MORE DS.
*
TESTDSNM CLC   DSNAME(44),INPUT+6  THIS INC BELONG TO THIS DS
         BC    8,BLDLINFO     IF YES,GIVE ITS INFO TO BLDL
         OI    IEHMVV61,X'04' SW THAT SAYS ANOTHER INC DS ON THIS VOL
         B     YES1
*
*ROUTINE WILL  PUT DIRECTORY ENTRY ON SYSUT3 WITH A KEY OF ATTR,A BEING
*EQUAL TO 00 IF A TRUE MEMB NAME AND 80 IF AN ALIAS. IT WILL ALSO MAKE
*THE FIRST 5 BYTES OF THE DATA PORTION CCHHR
*
PUTONUT3 L     REG2,IEHMVV42           SYSUT3 DCB ADDRESS        S20201
         USING IHADCB,REG2                                       S20201
         L     REG1,DCBDVTBL           ADDRESS THE DEVICE CHARAC-S20201
*                                      TERISTICS TABLE           S20201
         USING UNITABLE,REG1                                     S20201
         SR    REG3,REG3               TO GET THE DEVICE OVERHEADS20201
         TM    UNITFLAG,X'08'          2-BYTE OVHD FACTOR        S20201
         BZ    OVH1                    *B IF NOT-GET 1 BYTE      S20201
         LH    REG3,UNITOVHI           GET 2-BYTE OVHEAD         S20201
         B     ADD87                   *B TO ADD KEY+DATALENGTH  S20201
OVH1     IC    REG3,UNITOVHL           GET 1-BYTE OVHEAD         S20201
ADD87    LA    REG3,KEYLEN+DATALEN(0,REG3)  TOTAL LENGTH         S20201
         MVC   BLDL+11(63),BLDL+13     WIPE OUT BLDL EXTRA BYTES S20201
         CH    REG3,DCBTRBAL           WILL RECORD FIT ON TRACK  S20201
         BC    2,NEWTRK                NO BUMP TO NEXTTRACK      S20201
         MVC   CCHHR(4),DCBFDAD+3      MOVE CCHH FROM DCB        S20201
         IC    REG1,DCBFDAD+7          INSERT R BYTE OF CCHHR    S20201
         LA    REG1,1(0,REG1)      UP IT BY ONE
         STC   REG1,CCHHR+4        STORE IN OUTPUT AREA
MOVEDIR  MVC   DATA(74),BLDL       MOVE DIREC ENTRY TO OUTPUT AREA
         MVC   KEY+1(3),BLDL+8     MOVE TTR TO KEY AREA
         TM    BLDL+11,X'80'       IS THIS AN ALIAS ENTRY
         BC    1,ALIAS             YES IT IS
         MVI   KEY,X'00'           TRUE MEMBER NAME
         B     *+12
ALIAS    MVI   KEY,X'80'           AN ALIAS ENTRY
         OI    IEHMVV20+2,X'80'        TURN ON ALAIS SWITCH        9312
         L     REG5,IEHMVV42+4   ADDRESS OF DECB FOR WRITE
         LA    REG5,0(0,REG5)      CLEAR HIGH ORDER BYTE
         LA    REG4,KEY            ADDRESS OF OUTPUT AREA
         LA    REG3,DATALEN            GET DATALENGTH FOR WRITE  S20201
KEYLEN   EQU   4                                                 S20201
DATALEN  EQU   87                                                S20201
         LA    REG1,CCHHR+79     WHERE RENAME GOES
         NI    IEHMVV61,X'FB'    TURN OFF DS PENDING BIT
         MVC   0(8,REG1),INPUT+75      MOVE NEW NAME AT END OF UT3 DT0I
*                                      RECORD                      DT0I
         WRITE (5),SF,(2),(4),(3),MF=E     WRITE MACRO
         L     REG1,IEHMVV42+4     ADDRESS OF DECB FOR CHECK
         LA    REG1,0(0,REG1)    CLEAR HIGH ORDER BYTE
         CHECK (1)
         OI    IEHMVV61,X'08'      SHOWS AN ENTRY ON SYSUT3
         B     SETEXCP
*
*ROUTINE TO UP IT OF TTR BY ONE, SET TRACK BALANCE TO ZERO SET R OF TTR
*TO ONE
*
NEWTRK   L     REG1,44(REG2)       ADDRESS OF DEB
         LA    REG2,5(REG2)        ADDR OF MBBCCHHR IN DCB
         LR    REG4,BASE10         SAVE MY BASE REGISTER
         LR    REG5,REG11          SAVE BASE OF MY GOTTEN CORE
         STM   9,13,SAVEREG        SAVE THE OTHERS
         L     REG15,16            16 CONTAINS ADDR OF COM VEC TBL
         L     REG15,32(0,REG15)   ADDRESS OF IECPRLTV
         BALR  REG14,REG15         CONVERT MBBCCHHR TO TTR
         LR    BASE10,REG4         REINSTATE BASE REG
         LR    REG11,REG5          REINSTATE MY GOTTEN CORE BASE REG
         LM    9,13,SAVEREG        RESTORE OTHERS
         SRL   REG0,8              GET R BYTE IN LOW ORDER
         IC    REG0,ZEROS          MAKE R ZERO
         A     REG0,UPTTR          THIS ADDS ONE TO IT PORTION OF TTR
         SLL   REG0,8
         L     REG2,IEHMVV42       ADDRESS OF DCB
         L     REG1,44(REG2)       DEB ADDR
         LA    REG2,DATA      TEMPORARY AREA TO PUT MBBCCHHR
         LR    REG4,BASE10         SAVE MY BASE
         LR    REG5,REG11          SAVE BASE OF MY GOTTEN CORE
         STM   9,13,SAVEREG
         L     REG15,16            16 CONTAINS ADDR OF COM VEC TBL
         L     REG15,28(0,REG15)   ADDRESS OF IEC
         BALR  REG14,REG15         CONVERT TTR TO MBBCCHHR
         LR    BASE10,REG4         REINSTATE MY BASE
         LR    REG11,REG5          REINSTATE MY GOTTEN CORE BASE REG
         LM    9,13,SAVEREG
         MVC   CCHHR(4),DATA+3     MOVES CCHH TO MY OUTPUT AREA
         IC    REG1,DATA+7         INSERT R BYTE OF CCHHR
         LA    REG1,1(0,REG1)      UP THE R BYTE BY ONE
         STC   REG1,CCHHR+4        STORE THIS R BYTE IN OUTPUT AREA
         L     REG2,IEHMVV42       ADDR OF DCB
         MVC   18(2,REG2),ZEROS  ZERO OUT TRACK BALANCE
         B     MOVEDIR
*
*THIS ROUTINE WILL SET UP THE MBBCCHHR FOR THE SEEK(FIRST TIME ONLY)
*AND WILL ISSUE AN EXCP AND WAIT AND THE INTEROGATE THE RETURN BY IOS
*
*
MYEXCP   TM    IEHMVV61,X'02'      FIRST TIME THRU EXCP
         BO    IOERROUT           I/O ERR, TERMINATE               7632
         XC    CCWVOL(CCWS),CCWVOL  CLEAR CHAN PROG AREA         S20201
         LA    REG2,FIRST         PTR TO FIELD THAT WILLCONTAIN  S20201
*                                 CCHHR OF START OF INCL/REPL    S20201
*                                 LIST ON SYSUT1                 S20201
         ST    REG2,CCWVOL        STORE IN 2ND CHAN PROG         S20201
         ST    REG2,CHANPROG      STORE IN 1ST CHAN PROG         S20201
*                                                                S20201
         LA    REG2,CCWVOL        PTR TO SIDEQ OF 2ND CHANPROG   S20201
         ST    REG2,CCWVOL+8      STORE IN SUBSEQUENT TIC        S20201
         ST    REG2,RPSCCW+8      AND IN TIC FOLLOWING SET SECTORS20201
*                                                                S20201
         LA    REG2,IEHMVV39      PTR TO CCHHR OF LAST UT1 REC   S20201
         ST    REG2,ANTHRSRC      STORE IN CCW THAT LOOKS UP END S20201
         ST    REG2,CCWSRCH       SAME FOR 1ST CHANPROG          S20201
*                                                                S20201
         LA    REG2,KEYNZERO      PTR TO CCW THAT LOOKS FOR NON- S20201
*                                 ZERO-ED KEY                    S20201
         ST    REG2,ANTHRSRC+8    STORE IN TIC FOLLOWING SIDEQ   S20201
*                                                                S20201
         LA    REG2,ZEROS         COMPARAND FOR SKH CCW          S20201
         ST    REG2,KEYNZERO      PUT IN 2ND CHANPROG            S20201
         ST    REG2,ZEROOUT+16    ALSO USED TO CLOBBER FOUND REC S20201
         ST    REG2,RPSCCW        AND AS 1ST SECTOR VALUE        S20201
         ST    REG2,RPSCHAN       IN BOTH CHAN PROGS             S20201
*                                                                S20201
         LA    REG2,ANTHRSRC      PTR TO CCW THAT LOOKS FOR      S20201
*                                 END OF UT1                     S20201
         ST    REG2,KEYNZERO+8    STORE IN TIC FOLLOWING SKH CCW S20201
*                                                                S20201
         LA    REG2,INPUT         PTR TO INPUT AREA              S20201
         ST    REG2,KEYNZERO+16   STORE IN READ CCW 2ND CHANPROG S20201
         ST    REG2,SRCHKEY+16    STORE IN READ CCW 1ST CHANPROG S20201
         ST    REG2,ZEROOUT       AND IN SIDEQ OF DESTROYER      S20201
*                                                                S20201
         LA    REG2,CHANPROG      PTR TO SIDEQ OF 1ST CHANPROG   S20201
         ST    REG2,CHANPROG+8    STORE IN SUBSEQUENT TIC        S20201
         ST    REG2,RPSCHAN+8     AND IN TIC FOLLOWING SET SECTORS20201
*                                                                S20201
         LA    REG2,SRCHKEY       PTR TO CCW LOOKING FOR MATCHINGS20201
*                                 VOLUME INFORM (=KEY)           S20201
         ST    REG2,CCWSRCH+8     STORE IN TIC                   S20201
*                                                                S20201
         LA    REG2,SEARCH        PTR TO KEY TO LOOK FOR         S20201
         ST    REG2,SRCHKEY       PUT IN SKEQ CCW                S20201
*                                                                S20201
         LA    REG2,CCWSRCH       PTR TO CCW THAT LOOKS FOR END  S20201
         ST    REG2,SRCHKEY+8     STORE IN TIC AFTER SKEQ CCW    S20201
*                                                                S20201
         LA    REG2,ZEROOUT       PTR TO START OF DESTROYER      S20201
         ST    REG2,ZEROOUT+8     PUT IN SUBSEQUENT TIC          S20201
         ST    REG2,READSEC+16    AND IN TIC FOLLOWING READ/SET  S20201
*                                 SECTOR CCW SEQUENCE            S20201
         LA    REG2,SECTOR        PTR TO FIELD TO CONTAIN SECTOR S20201
         ST    REG2,READSEC       STORE IN READ SECTOR CCW       S20201
         ST    REG2,READSEC+8     AND IN SET SECTOR CCW          S20201
*                                                                S20201
         TM    IEHMVV20+RPS,RPS   SYSUT1 ON RPS DEVICE           S20201
         BZ    NORPS              *B IF NOT                      S20201
         LA    REG2,READSEC       CCW TO TIC TO AFTER SUCCESFULL S20201
*                                 READING DATA                   S20201
         B     *+8                GO TO STORE IN TIC             S20201
NORPS    LA    REG2,ZEROOUT       NO RPS -NEXT SEQ CCW           S20201
         ST    REG2,TIC           STORE IN TIC                   S20201
*                                                                S20201
**  SET COMMAND CODES,FLAGS AND LENGTHS IN CHANNEL PROGRAM ******S20201
*                                                                S20201
         OC    CCWVOL(CCWS),MYCHNLPG                             S20201
*                                                                S20201
**** CHANNEL PROGRAM COMPLETED-NOW TAKE CARE OF IOB ************ S20201
SETIOB   XC    IOB(40),IOB             CLEAR IOB                 S20201
         LA    REG1,ECB    ADDRESS OF MY ECB
         ST    REG1,IOB+4    STICK ECB PTR IN MY IOB
         L     REG1,IEHMVV40      ADDRESS OF SYSUT1 DCN
         ST    REG1,DCBADR     STICK UT1 DCB PTR IN MY IOB
         STM   2,13,SAVEREG        SAVE REGISTERS FOR CONVERT ROUTINE
         LR    REG3,BASE10
         LR    REG4,REG11       SAVE REG11 TO REINSTATE REGISTERS
         L     REG0,HOLDTTR        TTR OF SYSUT1
         IC    REG0,ZEROS          CLEAR OUT TO MAKE TTR0
         L     REG2,IEHMVV40       ADDRESS OF DCB
         L     REG1,44(REG2)       ADDRESS OF DEB IN REG1 FOR CONVERT
         LA    REG2,MBBCCHHR   WHERE ABSOLUTE ADDRESS IS TO GO
         L     REG15,16            ADDRESS OF SYSTEM COMMUNICATION TBL
         L     REG15,28(0,REG15)   ADDRESS OF CONVERT ROUTINE
         BALR  REG14,REG15         GO TO CONVERT ROUTINE
         LR    BASE10,REG3
         LR    REG11,REG4       REINSTATE REG11
         MVC   FIRST(4),MBBCCHHR+3    MOVE CCHHR TO 'FIRST'
         IC    REG3,MBBCCHHR+7     INSERT R IN REG3
         BCTR  REG3,0      REDUCE REG3 BY ONE
         STC   REG3,FIRST+4    START SEARCH AT BEGINNING
         LM    2,13,SAVEREG        RESTORE THE REGISTERS
         TM    IEHMVV20+RPS,RPS        RPS BIT ON TEST           S20201
         BZ    SKPNORM                 NO - BRANCH               S20201
         LA    REG1,RPSCHAN            ADDRESS OF CCW LIST       S20201
         B     NORM1                   CONTINUE                  S20201
SKPNORM  LA    REG1,CHANPROG           S20201
NORM1    ST    REG1,START              STORE IN IOB              S20201
         MVC   ECB(4),ZEROS             CLEAR OUT ECB BEFORE EXCP
         EXCP  IOB            EXECUTE CHANNEL PROGRAM
         L     REG1,IOB+4          ADDRESS OF ECB FOR WAIT
         WAIT  ECB=(1)      W AIT FOR THIS EVENT TO COMPLETE
         L     REG1,IEHMVV40       ADDRESS OF DCB
         TM    44(REG1),X'C0'
         BC    1,MSG1         GO TO A ROUTINE THAT SAYS PERM I/O ERROR
         BR    REG7
*
*THIS THE ROUTINE WE GO TO, TO HAVE A VOLUME MOUNTED. WE BUILD THE
*APPROPRIATE LIST AND PICK UP THE ADDRESS OF VOLUME MOUNT FROM THE COM-
*TAB AND WHEN HE RETURNS, THE REQUIRED VOLUMES SHOULD BE MOUNTED.
*
GOTORON  NI    IEHMVV61,X'EF'      SO WE WONT COME BACK TO VOLUME MOUNT
         LA    REG1,SEARCH     POIMTER TO TYPE,VOL ID, SEQ #
VMGEN    EQU   0
VMINDICA EQU   4
VMIT     EQU   4
VMVMR    EQU   11
VMITC    EQU   10
VMDEV    EQU   12
VMVSN    EQU   16
VMRTA     EQU    22
VMUNIT   EQU   24
*
*                                  TO CALL VOL MOUNT
*                                       NO VALID OLD REQUESTS
*                                  REG 1  POINTS TO
*
*                                       DEVICE TYPE    4 BYTES
*                                       VOL ID         6 BYTES
*
         MVC   IEHMVV00+VMIT(4),IEHMVV50+4   PTR TO IT TABLE
         MVC   IEHMVV00+VMITC(1),IEHMVV50+4  IT ENTRY COUNT
         MVI   IEHMVV00+VMVMR,X'01'          NUMBER OF REQUESTS
         MVI   IEHMVV00+VMINDICA,X'90'       SET UP INDICATOR
         MVC   IEHMVV00+VMDEV(10),0(1)       SET UP DEVICE TYPE
         MVC   IEHMVV00+VMUNIT(5),12(REG1)  SET UP SPEC UNIT       DT0I
         LA    3,IEHMVV00
         L     4,AATG
         XCTL  EP=IEHMVXSF
VOLRET   EQU   *
*
         TM    IEHMVV00+VMIT,X'01'           WAS VOLUME MOUNTED
         BZ    NOMOUNT            NO MOUNTING INITIATED ERROR MSG
         L     1,IEHMVV00+VMIT                    YES
         AH    1,IEHMVV00+VMRTA
         L     1,0(0,1)                      GET POINTER TO DDNAME
*
         MVC   DDNAME(8),0(REG1)        SAVE DDNAME FROM VOL MOUNT
         B     RONRTN         RETURN TO MY PROGRAM
         DS    0F
AATG     DC    CL4'AATG'
*
*THIS ROUTINE WILL CHECK SYSUT1 TO SEE IF ANY MORE INCLUDES ARE PRESENT
*IF SO IF WILL READ THE FIRST NON-ZERO KEY RECORD AND USE IT'S VOLUME
*INFORMATION TO HAVE A NEW VOLUME MOUNTED. IF NO MORE INCLUDES, THEN
*THE INC/REP BIT IS TURNED OFF AND WE GO TO IEHMVETJ FOR THE LAST TIME.
*
VOLEXCP  MVI   INPUT,X'FF'    TO SEE IF I READ ANYTHING
         TM    IEHMVV20+RPS,RPS        RECORD READY FEATURE TEST S20201
         BZ    VOLNORM                 NO-CONTINUE AS USUAL      S20201
         LA    REG1,RPSCCW             ADDRESS OF CCW LIST       S20201
         B     NORM2                   CONTINUE                  S20201
VOLNORM  LA    REG1,CCWVOL            ADDRESS OF CHANNEL PROGRAM S20201
NORM2    ST    REG1,START              STORE ADDRESS IN MY IOB   S20201
         MVC   ECB(4),ZEROS             CLEAR OUT ECB BEFORE EXCP
         EXCP  IOB                 EXECUTE CHANNEL PROGRAM
         L     REG1,IOB+4     ADDRESS OF ECB FOR WAIT MACRO
         WAIT  ECB=(1)      W AIT FOR THIS EVENT TO COMPLETE
         L     REG1,IEHMVV40  ADDRESS OF SYSUT1 DCB
         TM    44(REG1),X'C0' CHECKING FOR PERM I/O ERROR
         BC    1,MSG1         ABDRT AT THIS POINT
         CLI   INPUT,X'FF'    TO SEE IF WE READ SOMETHING
         BC    8,ALLDONE      IF EQUAL, THE NO MORE INCLUDES
         MVC   SEARCH(17),INPUT+58     MOVE VOL INFO TO            DT0I
*                                      SEARCH AREA             O   DT0I
         OI    IEHMVV61,X'10' THIS MEANS VOL MOUNTING REQUIRED
         B     YES1
ALLDONE  TM    IEHMVV61,X'08'     ANYTHING ON UT3                  7632
         BC    1,TRANSFER     IF SO ----
IOERROUT NI    IEHMVV20+2,X'F7'   TURN OFF INC/REP BIT             7632
         NI    IEHMVV61,X'FD'     TURN OFF ERR INDICATOR BIT       7632
         LR    REG1,REG11     ADDR OF GOTTEN CORE
         FREEMAIN  R,LV=1016,A=(1)     FREE DSECT                S20201
         IEHPOST   ,T
         L     14,12(0,13)             PRESERVE REG 14 ACROSS XCTL S
         XCTL   (2,12),EP=IEHMVESN       GO TO WRAP UP
*
*ROUTINE WILL START DOING SOME CHECKING AS TO WHERE WE STAND AS FAR AS
*UT3 IS CONCERNED
*
NOREAD   TM    IEHMVV61,X'08'   ANYTHING ON SYSUT3
         BC    1,YES1         YES
         B     VOLEXCP        NO,CHECK TO SEE IF ANY MORE INCLUDES
YES1     EQU   *
         NI    IEHMVV61,X'DF' TURN OFF ALREADY OPEN BIT
         TM    IEHMVV61,X'08' ANY ENTRIES ON UT3
         BC    1,TRANSFER     TIME TO CLOSE,REINSTATE AND XCTL
         NI    IEHMVV61,X'F7' CLEAR THIS SWITH FOR NEXT RUN
         B     REPEAT         MIGHT NOT HAVE FIT THE ORIGINAL 'FROM' DS
TRANSFER L     REG2,IEHMVV40  ADDRESS OF UT1 DCB
         LA    REG2,0(0,REG2)        CLEAR HIGH ORDER BYTE
         NI    IEHMVV61,X'F7'
         L     REG2,IEHMVV42  ADDRESS OF SYSUT3 DCB
         LA    REG2,0(0,REG2)        CLEAR HIGH ORDER BYTE
         L     REG5,IEHMVV42+4   ADDRESS OF DECB FOR WRITE
         LA    REG5,0(0,REG5)      CLEAR HIGH ORDER BYTE
         WRITE (5),SF,(2),KEY,5,MF=E    WRITE MACRO
         L     REG1,IEHMVV42+4     DECB PTR
         CHECK (1)
         MVC   IEHMVV42+8(5),8(REG2)    MOVE CCHHR TO COMM TAB
         NI    IEHMVV61,X'F7' CLEAR OUT THIS SWITCH
         L     REG2,IEHMVV31        FROM DCB FOR REOPENING
         LA    REG2,0(0,REG2)   CLEAR HIGH ORDER BYTE
         MVC   RENTOPEN(TAG1-OPENJ1),OPENJ1   REOPEN OUTPUT DATA SET
         L     1,IEHMVV21+4     ADDR OF TO DSNAME
         MVC    JFCB(44),0(1)       MOVE DSNAME TO JFCB
         L     1,IEHMVV23       ADDR OF TO VOLID
         MVC   JFCB+118(6),4(1)      MOVE VOL ID TO JFCB
         LA    1,JFCBPTR         ADDR OF EXIT LIST
         ST    1,36(2)         PUT IN DCB
         OPEN  ((2)),TYPE=J,MF=(E,RENTOPEN)   THIS MAKES OPEN REENTRANT
         LR    REG1,REG11          ADDRESS OF SOME GOTTEN CORE
         FREEMAIN R,LV=1016,A=(1)  FREE CORE MAN                 YM5087
         LA    REG2,MODULNAM           ADDRESS OF MODULENAME    YA01217
         IEHPOST ,T                                             YA01217
         L     REG14,12(0,13)
         XCTL  (2,12),EPLOC=(2)     TRANSFER CONTROL TO MOVE/PDS
MIDABORT OI    IEHMVV20+2,X'40'   SET MID-ABORT BIT
         IEHPOST   ,T
         LA    REG2,FINAL     ENTRY POINT TO WRAP UP
         L     REG14,12(0,13)
         XCTL  (2,12),EPLOC=(2)     TRANSFER CONRTOL TO WRAP-UP
MSG1     BAL   REG6,CLEAR
         NI    44(REG1),X'3F'          SET OFF PERM ERROR FLAGS  YM5086
         OI    IEHMVV61,X'02'     TURN ON ERROR INDICATOR          7632
         MVC   PRINT+1(72),M172   ERROR MSG. TO PRINT BUFFER       7632
         B     PRINTMSG                                         YA01217
MSG2     BAL   REG6,CLEAR
         MVC   PRINT+1(80),M173    ERROR MSG TO PRINT BUFFER
         MVC   PRINT+32(6),SEARCH+4 MOVE VOLUME ID TO ERROR MSG
         B     FREEDSCB                                         YA01217
MSG3     BAL   REG6,CLEAR
         MVC   PRINT+1(16),M174         PART OF ERROR MSG TO BUFFER
         MVC   PRINT+17(44),INPUT+6     DSNAME TO PRINT BUFFER
         MVC   PRINT+62(59),M174A       REST OF ERROR MSG TO BUFFER
         MVC   PRINT+79(6),SEARCH+4     VOL ID TO ERROR MSG
         B     FREEDSCB                                         YA01217
MSG4     BAL   REG6,CLEAR
         MVC   PRINT+1(16),M175         PART OF ERROR MSG TO BUFFER
         MVC   PRINT+17(44),INPUT+6     DSNAME TO PRINT BUFFER
         MVC   PRINT+62(55),M175A       REST OF ERROR MSG
         B     FREEDSCB                                         YA01217
MSG4A    BAL   REG6,CLEAR
         MVC   PRINT+1(92),M176         ERROR MSG TO PRINT BUFFER
         MVC   PRINT+48(7),M176A        RECORD FORMAT NOT COMPATIBLE
         B     FREEDSCB                                         YA01217
MSG5     BAL   REG6,CLEAR
         MVC   PRINT+1(92),M176         ERROR MSG TO RPINT BUFFER
         MVC   PRINT+48(7),M176B        BLKSIZE LARGER ON INCLUDE
         B     FREEDSCB                                         YA01217
MSG6     BAL   REG6,CLEAR
         MVC   PRINT+1(92),M176         ERROR MSG TO PRINT BUFFER
         MVC   PRINT+48(7),M176C        LRECL NOT EQUAL
         B     FREEDSCB                                         YA01217
MSG7     BAL   REG6,CLEAR
         MVC   PRINT+1(92),M176         ERROR MSG TO PRINT BUFFER
         MVC   PRINT+48(7),M176D        KEY LENGTHS NOT EQUAL
         B     FREEDSCB                                         YA01217
MSG8     BAL   REG6,CLEAR
         MVC   PRINT+1(15),M180         FIRST PART OF ERROR MSG
         MVC   PRINT+16(8),INPUT+50     MEMBER NAME TO ERROR MSG
         MVC   PRINT+25(21),M180A       SECOND PART OF ERROR MSG
         MVC   PRINT+47(44),INPUT+6     DATA SET NAME TO ERROR MSG
         MVC   PRINT+92(29),M180B       THIRD PART OF ERROR MSG
         B     PRINTMSG                                         YA01217
MSG9     BAL   REG6,CLEAR                                       YA01217
         MVC   PRINT+1(L'M177),M177    ERROR MSG TO PRINT BUFFERYA01217
         MVC   PRINT+2+L'M177(44),INPUT+6 DSNAME TO PRINT BUFFERYA01217
         LA    REG2,PRINT+46+L'M177    PTR BEHIND DSNAME IN BUFFYA01217
MSG9LOOP BCTR  REG2,0                  PTR TO PREVIOUS BYTE     YA01217
         CLI   0(REG2),BLANK           CHECK FOR LAST CHAR IN   YA01217
         BE    MSG9LOOP                DSNAME.                  YA01217
         MVC   2(L'M177A,REG2),M177A   REST OF MSG TO BUFFER    YA01217
         B     FREEDSCB                                         YA01217
NOMOUNT  BAL   REG6,CLEAR
         MVC   PRINT+1(80),M173         ERROR MSG TO PRINT BUFFER
         MVC   PRINT+32(6),SEARCH+4  MOVE VOLUME ID TO ERROR MSG
         B     PRINTMSG                                         YA01217
CLEAR    MVI   PRINT,X'40'    MOVE A BLANK IN FIRST POS OF PRINT AREA
         MVC   PRINT+1(120),PRINT     CLEAR OUT PRINT AREA
         L     REG7,MSGCONST           SET UP BASE FOR MSG CSECTYA01217
         BR    REG6       GO TO APPROPRIATE MSG RTN
FREEDSCB L     REG1,LIST+12            GET ADDRESS OF GETMAIN   YA01217
         FREEMAIN R,LV=500,A=(1)       FREE CORE GOTTEN FOR DSCBYA01217
PRINTMSG ST    REG3,IEHMVV00+128       SAVE REG 3
         LA    REG3,PRINT              LOAD ADDR OF PRINT AREA
         LINK EP=IEHMVESU              GO TO MSG WTR
         L     REG3,IEHMVV00+128        RESTORE REG 3
         B     *+4(REG15)      INTERPRET THE ERROR RETURNS IF ANY
         B     SETEXCP                 NO ERRORS                YA01217
         B     MIDABORT        PERM ERROR ON SYSPRINT
         DS    0F                                               YA01217
UPTTR    DC    X'00000100'         TO UP TTR
JFCBPTR  DC    X'87'                    OPENJ
         DC    AL3(JFCB)                POINTER TO MY JFCB
FORBLDL  DC    X'0001004A'         PUT IN PREFACE ONCE
POINT    DC    X'00000100'          USED TO POINT TO BEG OF UT3
M176A    DC    C' RECFM '                                       YA01217
M176B    DC    C'BLKSIZE'
M176C    DC    C' LRECL '                                       YA01217
M176D    DC    C'KEYLGTH'
FAKEDCB  DC    22F'0'              WHERE PRE-OPEND DCB IS BUILT
JFCB     DS    44F      USED FOR JFCB IN OPENJ
FILETYPE DC    X'0200'             SIGNIFIES A PDS
ZEROS    DC    5F'0'               CONSTANT OF ZEROS
LENGTH44 DC    H'44'                   LENGTH OF DATA SET NAME  YA01217
MACRF    DC    X'2400'             SIGNIFIES A REA
EODADDR  DC    A(NOREAD)           MY EOD ADDRESS
EXITLST  DC    A(JFCBPTR)          ADDCON FOR OPEN WHEN DOING AN OPENJ
MSGCONST DC    A(MESSAGES)
OPENJ    OPEN  (,(INPUT)),MF=L
TAG      DS    F           TO BE ABLE TO GET CORRECT BYTES IN OPEN
OPENJ1   OPEN  (,(OUTPUT)),MF=L        PART OF RE-
TAG1     DS    F                       ENTRANT OPEN
*
*CHANNEL PROGRAM THAT SEARCHES THE SYSUT1 FILE FOR ANY MORE INCLUDES
*IF ANY EXIST THEN VOLUME INFORMATION IS PICKED UP FOR THE NEXT ENTRY
*INTO THE PROGRAM. THIS CODE WILL BE DUMPED IN GOTTEN CORE SO IT CAN BE
*REENTRANT.
*
         DS    0D
MYCHNLPG DC    X'31'               SEARCH ID EQUAL
         DC    AL3(0)             ID OF FIRST SYSUT1 REC         S20201
         DC    X'40000005'
         DC    X'08'
         DC    AL3(0)             TO SIDEQ                       S20201
         DC    X'40000001'
         DC    X'B1'               SEARCH ID EQUAL WITH M/T BIT SET
         DC    AL3(0)             ID OF LAST SYSUT1 REC          S20201
         DC    X'40000005'
         DC    X'08'
         DC    AL3(0)             TO SEARCH KEY HIGHER THAN 0000 S20201
         DC    X'40000001'
         DC    X'03'
         DC    X'000000'           NOP,HIT THE LAST RECORD
         DC    X'00000001'
         DC    X'C9'               SEARCH KEY HIGH WITH M/T BIT SET
         DC    AL3(0)             FOR NON-ZERO-ED KEY            S20201
         DC    X'60000011'        OF 17 BYTES VOL INFO           S20201
         DC    X'08'
         DC    AL3(0)             TO SIDEQ FOR END OF UT1        S20201
         DC    X'40000001'
         DC    X'06'
         DC    AL3(0)             READ DATA INTO INPUT AREA      S20201
         DC    X'00000053'                                         DT0I
         DC    X'31'               SEARCH ID EQUAL
         DC    AL3(0)             OF FIRST SYSUT1 REC            S20201
         DC    X'40000005'
         DC    X'08'
         DC    AL3(0)             TIC TO SIDEQ                   S20201
         DC    X'40000001'
         DC    X'B1'
         DC    AL3(0)             ID OF LAST UT1 REC             S20201
         DC    X'40000005'
         DC    X'08'
         DC    AL3(0)             TIC TO LOOK FOR MATCHING KEY   S20201
         DC    X'40000001'
         DC    X'03'
         DC    X'000000'           NO OPERATION,STOPS THE COMMAND CHAIN
         DC    X'00000001'
         DC    X'29'
         DC    AL3(0)             SEARCH MATCHING KEY            S20201
         DC    X'60000011'        OF 17 BYTES VOL INFO           S20201
         DC    X'08'
         DC    AL3(0)             TIC TO LOOK FOR END OF UT1     S20201
         DC    X'40000001'
         DC    X'06'
         DC    AL3(0)             READ INTO INPUT                S20201
         DC    X'40000053'                                         DT0I
         DC    X'08'                   TIC TO NEXT INSTRUCTION   S20201
         DC    AL3(0)                  OR TO READ SECTOR IF      S20201
         DC    X'40000001'             RPS DEVICE                S20201
         DC    X'31'
         DC    AL3(0)             SIDEQ OF RECORD JUST READ      S20201
         DC    X'40000005'
         DC    X'08'
         DC    X'000000'
         DC    X'00000001'
         DC    X'0D'
         DC    AL3(0)             CLOBBER KEY OF REC JUST READ   S20201
         DC    X'20000011'
         DC    X'23'                   SET SECTOR TO 0           S20201
         DC    AL3(0)                                            S20201
         DC    X'40000001'                                       S20201
         DC    X'08'                   TIC TO CCWVOL             S20201
         DC    AL3(0)                                            S20201
         DC    X'40000001'                                       S20201
         DC    X'23'                   SET SECTOR TO 0           S20201
         DC    AL3(0)                                            S20201
         DC    X'40000001'                                       S20201
         DC    X'08'                   TIC TO CHANPROG           S20201
         DC    AL3(0)                                            S20201
         DC    X'40000001'                                       S20201
         DC    X'22'                   READ SECTOR VALUE INTO    S20201
         DC    AL3(0)                  'SECTOR'                  S20201
         DC    X'40000001'                                       S20201
         DC    X'23'                   SET SECTOR TO THE VALUE   S20201
         DC    AL3(0)                  IN 'SECTOR'               S20201
         DC    X'40000001'                                       S20201
         DC    X'08'                   TIC BACK TO REGULAR CCWS  S20201
         DC    AL3(0)                                            S20201
         DC    X'40000001'                                       S20201
FINAL    DC    C'IEHMVESN'
MODULNAM DC    CL6'IEHMVE'             1ST PART OF MODULE NAME  YA01217
MODULEND DS    CL2                     2ND PART OF MODULE NAME  YA01217
TJ       DC    CL2'TJ'                 END FOR MODULE IEHMVETJ  YA01217
SM       DC    CL2'SM'                 END FOR MODULE IEHMVESM  YA01217
SL       DC    CL2'SL'                 END OF MODULE IEHMVESL   YA01217
TORECFM  DS    C                   WORK COPY OF TO-DS RECFM    @ZA01247
INCRECFM DS    C                   WORK-COPY OF INC/REP-DS RECFMYA01217
SAVRECFM DS    C                       SAVE 'TO' DCB RECFM     @ZA01247
SAVLRECL DS    CL2                                   LRECL      YA01217
SAVBLKSI DS    CL2                                   BLKSIZE    YA01217
SAVKEYLE DS    C                                     KEYLEN     YA01217
*
* THE FOLLOWING CSECT IS FOR ALL ERROR MESSAGES TO BE CONTAINED IN
* THIS LOAD MODULE.  IT ALSO CONTAINS THE ERROR CODES WHICH PRECEDE
* EACH MESSAGE.
*
MESSAGES CSECT
M172     DC    CL8'IEH372I '
         DC    CL32'I/O ERROR IN WORK FILE. SOME SUB'              7632
         DC    CL32'ORDINATE REQUESTS MAY BE IGNORED'              7632
M173     DC    CL8'IEH373I '
         DC    CL32'UNABLE TO MOUNT VOLUME XXXXXX. S'
         DC    CL32'OME INCLUDE OR REPLACE REQUESTS '
         DC    CL8'IGNORED.'
M174     DC    CL8'IEH374I '
         DC    CL8'DATASET '
M174A    DC    CL29'NOT FOUND ON VOL XXXXXX. INCL'
         DC    CL30'UDE OR REPLACE REQUEST IGNORED'
M175     DC    CL8'IEH375I '
         DC    CL8'DATASET '
M175A    DC    CL32'IS NOT PARTITIONED. INCLUDE OR R'
         DC    CL23'EPLACE REQUEST IGNORED.'
M176     DC    CL8'IEH376I '
         DC    CL32'RECORD CHARACTERISTICS NOT COMPA'
         DC    CL32'TIBLE (       ). INCLUDE OR REPL'
         DC    CL20'ACE REQUEST IGNORED.'
M177     DS    0CL16                                            YA01217
         DC    CL8'IEH377I '                                    YA01217
         DC    CL8'DATA SET'                                    YA01217
M177A    DS    0CL58                                            YA01217
         DC    CL33'REQUIRES TRACK OVERFLOW FEATURE. '          YA01217
         DC    CL25'INCL/REPL REQUEST IGNORED'                  YA01217
M180     DC    CL8'IEH380I '
         DC    CL7'MEMBER '
M180A    DC    CL21'NOT FOUND IN DATASET '
M180B    DC    CL29'INCLUDE REPLACE REQUEST IGNRD'
*
* ANOTHER DSECT THAT I GET CORE FOR
*
CORE     DSECT      REG 11 USED AS A BASE
KEY      DS    F       KEY PORTION OF OUTPUT REC
CCHHR    DS    FL5       STUCK IN TO SCRATCH USED RECDS
DATA     DS    FL3        START OF DATA PORTION
         DS    22F     REMAINING DATA PORTION AND RENAME FIELD
FIRST    DS    FL5                 CCHHR OF RECORD PRIOR TO BEGINNING
VOLLIST  DS    5F                  USED BY VOLUME MOUNT ROUTINE
SAVEREG  DS    16F       TO SAVE REGS
LIST     DS    4F        LIST AREA FOR OBTAIN
PREFACE  DS    1F        1 WORD HDR FOR BLDL
BLDL     DS    19F    AREA FOR BLDL
DSNAME   DS    11F       44 BYTE DATA SET NAME IN UT1 REC
PRINT    DS    31F      PRINT BUFFER FOR MSG WRITER
*
*THE IOB I USE WHEN EXECUTING MY CHANNEL PROGRAM
*
         DS    0D                  FORCE TO A DOUBLE WORD  BOUNDRY
IOB      DS    1F                  FLAGS AND STATUS BYTES
         DS    1F                  PTR TO YOUR EVENT CONTROL BLK (ECB)
IOBCSW   DS    2F                  CSW POSTED HERE
START    DS    1F                  PTR TO MY CHANNEL PROGRAM
DCBADR   DS    1F                  ADDRESS OF DCB ASSOCIATED WITH CHAN
         DS    2F
MBBCCHHR DS    2F                  ADDRESS USED TO SEEK BY IOS
ECB      DS    1F                  EVENT CONTROL BLOCK FOR MY EXCP
SECTOR   DS    F                     FIRST BYTE FOR SECTOR VALUE S20201
CCWVOL   DS    2D                  WHERE
ANTHRSRC DS    6F                   MY REENTRANT
KEYNZERO DS    6F                    CHANNEL
CHANPROG DS    4F                     PROGRAM
CCWSRCH  DS    6F                      WILL BE
SRCHKEY  DS    6F                          CONSTRUCTED
TIC      DS    2F                      DUMMY TIC                 S20201
ZEROOUT  DS    6F
RPSCCW   DS    4F                      SET SECTOR AND TIC        S20201
RPSCHAN  DS    4F                      SET SECTOR AND TIC        S20201
READSEC  DS    6F                      READ,SET SECTOR AND TIC   S20201
RENTOPEN DS    6F        WHERE REENTRANT OPEN GOES
*
*DSECT FOR A CHUNK OF PERM WK AREA
*
GETCORE  DSECT      REG 9 USED AS A BASE
HOLDTTR  DS    1F        TTR OF BEG OF SYSUT 1
SEARCH   DS    5F   DEV TYPE,VOLID,SEQ NO, UNIT                    DT0I
IOBADDR  DS    1F        ADDR OF OLD IOB IN UT1 DCB
EODAD    DS    1F        ADDR OF OLD EOD IN UT1 DCB
DDNAME   DS    2F                  DDNAME TO BE REINSTATED
INPUT    DS    21F     UT1 READ IN AREA
*                                                                S20201
** DSECT TO DESCRIBE DEVICE CHARACTERISTICS TABLE ************** S20201
*                                                                S20201
UNITABLE DSECT                                                   S20201
UNITSICC DS    H                                                 S20201
UNITSIHH DS    H                                                 S20201
UNITTRLN DS    H                                                 S20201
UNITOVHI DS    CL1                                               S20201
UNITOVHL DS    CL1                                               S20201
UNITOVHK DS    CL1                                               S20201
UNITFLAG DS    CL1                                               S20201
UNITTOLR DS    CL1                                               S20201
*                                                                S20201
**  DSECT TO DESCRIBE THE DCB ***********************************S20201
*                                                                S20201
         DCBD  DSORG=PS,DEVD=DA                                  S20201
         EJECT                                                  YA01217
DSCBDSEC DSECT                                                  YA01217
         SPACE 1                                                YA01217
         IECSDSL1 (1)                                           YA01217
         SPACE 2                                                YA01217
         IEHMVV
         END
