*TITLE ' IEHMVSSE                                                     *
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*   THIS MODULE WILL GET AND INITIALIZE A WORKING STORAGE AREA        *
*FOR THE USE OF ALL THE MODULES OF THE IEHMOVE PROGRAM.               *
*   THE WORKING STORAGE WILL BE POINTED TO BY REGISTER 12             *
*THROUGHOUT THE COURSE OF THE PROGRAM.                                *
*   THE WORKING STORAGE IS DEFINED BY THE DSECT,IEHMVV.               *
*   THE PARAMETER LIST PASSED IN REGISTER 1 BY THE INVOKING           *
*PROGRAM WILL BE ACTED UPON IN THIS MODULE.                           *
*   CONTROL WILL BE PASSED TO BOTH THE VOLUME MOUNTING ROUT-          *
*INE AND THE MESSAGE WRITER FOR INITIALING PURPOSES.                  *
*   THREE WORK FILES ASSOCIATED WITH THE SYSUT1 DD CARD WILL          *
*BE ALLOCATED INTERNALLY BY THIS MODULE.                              *
*   THEY WILL BE OPENED IN THIS MODULE AND WILL REMAIN                *
*OPEN FOR THE DURATION OF THE IEHMOVE PROGRAM.                        *
*    THIS MODULE WILL PASS CONTROL VIA XCTL TO MODULE                 *
*IEHMVSST AND IT WILL NOT BE ENTERED AGAIN DURING THE COURSE          *
*OF THIS PROGRAM.                                                     *
***********************************************************************
*
*ENTRY POINTS: 1. IEHMVXSE (IEHMVSSD LINKS TO THIS E.P.)              *
*2. IEHMVESE (ALL ENTRYES EXCEPT IEHMVSSD USE THIS ENTRY POINT)       *
*INPUT: POINTER TO IEHMDVE1 WORKAREA IN REG 12 - EXCEPT ENTRY TO      *
*IEHMVXSE                                                             *
*OUTPUT: REGISTER 12 POINTS TO IEHMOVE1 COMM AREA (COMM AREA IS       *
*DESCRIBED BY DSECT IEHMVV IN THIS LISTING)                           *
*EXTERNAL ROUTINES: IEHMVXSF (VOLUME MOUNTING ROUTINE)                *
*IEHMVSSA (MSG. WRITER ROUTINE)                                       *
*EXITS - NORMAL IEHMVSST (CONTROL CARD ANALIZER RIN.)                 *
*TABLES/WORK AREAS: WORK AREA DSECT IEHMVV IS USED THROUGH OUT THE    *
*IEHMOVE1 PROGRAM AS A WORK AREA AND COMMUNICATIONS AREA. A POINTER TO*
*THIS WORK AREA IS MAINTAINED IN REGISTER 12.                         *
IEHMVSSE CSECT
*A104810-104950,121260-121320                                  @ZA07393
*C017000                                                       @ZA07393
*C017000,091000                                                @ZA07392
*A138100,139300,140500                                         @ZA07360
*C017000                                                       @ZA07360
*C106500                                                       @ZA03372
*A044150-044234                                                @ZA01726
*D044150-044250                                                @ZA01726
*C124200,127800                                                @ZM33040
         TITLE 'IEHMVXSE-IEHMOVE WORK AREA SETUP, PARAM ANLYZR'
*A105000-116400,022200,122850,137000,138200,139400             @ZA00101
*D105000-117000,122200-122600,130200-132000,137000-137600      @ZA00101
*D138200-138800,139400-140000                                  @ZA00101
*C093600                                                       @ZM30153
*A082000-082150                                                @ZA01246
*A093700,155408                                                @ZM30153
*D082000                                                       @ZA01246
*A052680-052840,122900                                          YA01194
*D072600,072800,073400,073600                                    A48763
*A073700-073933,155404                                           A48763
*C154800                                                         A48763
*C155000                                                         A44310
* 093200                                                         A38756
* 107200,108600,111000,112400,115400,116800,166000               A37897
* 104060-104120                                                  S20201
*                                                                A30471
* 018600,027400,082000                                             I276
* 081520,082000,083200,083400                                    A24913
* 123600                                                         A23994
* 118800-119200                                                  S21042
*0313-127400                                                       9754
*0313083600,084800,157680-157800,159400-159600                     BS0H
*0313042600,042800,043000,043600,044200,053400,053600-054600       7356
*03130085000-085200                                                7356
* 066000,066400,066600,066800                                    A21460
*0313                                                           PTM663
*113000                                                          A37871
*                             REGISTER NOTATION AND USAGE
R0       EQU   0
DEV0     EQU   0
DEV1     EQU   1
R1       EQU   1
R2       EQU   2
ECR2     EQU   2
DEV2     EQU   2
R3       EQU   3
ECR3     EQU   3
DBR1     EQU   3                        WORK REG
DEV3     EQU   3
DBR3     EQU   4                        WORK REG
DBCOMPR  EQU   5
R6       EQU   6
DADR1    EQU   6
INVOKE1  EQU   6
R7       EQU   7
INVOKE2  EQU   7
BASE     EQU   8                        BASE REG FOR IEHMVXSE
R10      EQU   10
R12      EQU   12
COMMAREA EQU   12                       BASE REG FOR COMMUNICATION AREA
R13      EQU   13
R14      EQU   14
DEV14    EQU   14
DEV15    EQU   15
R15      EQU   15
*
*
*                             ENTRY AND EXTRN STATEMENTS
         ENTRY IEHMVXSE
         ENTRY IEHMVESE
*                             EQUATE STATEMENTS
VOLMNTSW EQU   X'10'
SWTCHOFF EQU   X'EF'
DIGIT    EQU   X'F0'
ZERO     EQU   X'00'
VMIT     EQU   4
VMITC    EQU   10
VMVMR    EQU   11
BLANK    EQU   X'40'
OPEN     EQU   X'10'
DCBFLG   EQU   48
TOLANCE  EQU   X'01'                    DEVICE TOLERANCE MASK.
PARMERR  EQU   X'1FF'
OVHED    EQU   14                      DEVICE OVERHEAD CONSTANT  S20201
OVHED1   EQU   17                      OVERHEAD BIT IF 2-BYTE    S20201
CVTAD    EQU   16                      ADDRESS OF ADDRESS OF CVT S20201
RPS      EQU   1                       DEVICE CHARISTICS BYTE    S20201
LEFTJUS  EQU   24                      BITS IN 3 BYTE SHIFT      S20201
*
*
         USING IEHMVXSE,BASE
         USING IEHMVV,COMMAREA           ADDRESSABILITY TO COMM DSECT
IEHMVXSE SAVE  (14,12),T,IEHMVXSE-OZ07393                      @ZA07393
         LR    BASE,R15                 SET UP ADDRESSABILITY
        IEHPRE (14,1),TFC
         LR    DBR1,R1                 PUT ADDRESS OF STAE EXIT  A30471
*                                      IN REG. FOR STAE MACRO    A30471
*                                                                     *
*              GETMAIN FOR THE WORKING STORAGE TO BE USED             *
*              BY THE IEHMOVE PROGRAM                                 *
*              THE FIRST 2000 BYTES ARE CLEARD TO BINARY ZEROS        *
*
         GETMAIN R,LV=3040                                         I276
         LR    COMMAREA,R1              SET UP ADDRESSABILITY FOR
*                                       MOVE/COPY COMMUNICATION AREA
         LA    R0,2000
         BAL   R14,CLEAR                BRANCH TO CLEAR ROUTINE TO
*                                       CLEAR 2000 BYTE AREA
         STAE  (DBR1),CT,PARAM=(12),XCTL=YES                     A30471
         B     SKIPENTR                BRANCH AROUND ALTERNATE ENTRY
*                                                                     *
*              THIS IS AN ALTERNATE ENTRY POINT THAT IS USED          *
*              WHEN CONTROL IS PASSED TO THIS MODULE FROM THE MESSAGE *
*              WRITER MODULE OR THE VOLUME MOUNTING VOLUME            *
*                                                                     *
         USING *,R15
IEHMVESE S     R15,ACON                 SET UP ADDRESSABILITY FOR
         LR    BASE,R15                 ALTERNATE ENTRY
         DROP  R15
         USING IEHMVXSE,BASE
         BALR  R15,R0
         SAVE  (14,12),T,ESE
        IEHPRE (14),TFC
         TM    IEHMVV20+4,VOLMNTSW      IS RETURN FROM VOLUME MOUNT
*                                       SWITCH ON?
         BZ    TESTENTR
         NI    IEHMVV20+4,SWTCHOFF     TURN SWITCH OFF
         B     MNTIN
TESTENTR DS    0H
         B     FINDUCB
SKIPENTR DS    0H
*                                                                     *
*              INITIALIZATION OF THE WORKING STORAGE BEGINS HERE      *
*                                                                     *
*              GENERALLY THE FOLLOWING THING WILL TAKE PLACE          *
*                                                                     *
*               1   SET UP BEGINNING AND END ADDRESS OF PERMANENT     *
*                   WORK AREA                                         *
*               2   SET ASIDE 144 BYTES FOR THE CARD SCAN MODULE      *
*                   IEHMVSSJ                                          *
*               3   MOVE SYSIN  SYSPRINT AND  THREE WORK FILE DCBS    *
*                   AND ASSOCIATED DECB S TO PERMANENT WORK AREA      *
*              THE ABOVE ITEMS WILL REMAIN IN THE WORKING STORAGE     *
*              DURING THE COURSE OF THE IEHMOVE PROGRAM               *
*                                                                     *
         LA    DBR1,IEHMVV90             INITIALIZE BEGINING AND END
         ST    DBR1,IEHMVV10             ADDRESS OF PERMANENT WORK
         LA    DBR1,IEHMVV00                                       I276
         LA    DBR1,3039(DBR1)         END OF DSECT                I276
         ST    DBR1,IEHMVV10+4
         L     DBR1,IEHMVV10
         LA    DBR1,144(DBR1)           AREA FOR IEHMVESJ CARD SCAN RTN
         ST    DBR1,IEHMVV10
         S     DBR1,DISP1               CALC DCB ADDR ACCORDING TO
         ST    DBR1,IEHMVV32            OFFSET IN MACRO EXPANSION
         L     DBR1,IEHMVV10
         MVC   0(LOC2-LOC1,DBR1),LOC1   MOVE DCB TO PERM WORK AREA
         LA    DBR1,LOC2-LOC1(DBR1)
         LA    DBR1,20(DBR1)
         ST    DBR1,IEHMVV10            UPDATE NEXT AVIL ADDR
         L     DBR1,IEHMVV10             CALC DCB ADDRESS ACCORDING TO
         S     DBR1,DISP2                THE EQU STATEMENT WITHIN THE
         ST    DBR1,IEHMVV33             DCB MACRO EXPANSION
         L     DBR1,IEHMVV10
         MVC   0(LOC3-LOC2,DBR1),LOC2    MOVE DCB TO WORK AREA
         LA    DBR1,LOC3-LOC2(DBR1)
         LA    DBR1,20(DBR1)
         ST    DBR1,IEHMVV10             UPDATE NEXT AVALIBLE ADDR PTR
         L     DBR1,IEHMVV10             CALC DCB ADDRESS ACCORDING TO
         S     DBR1,DISP3                THE EQU STATEMENT IN THE
         ST    DBR1,IEHMVV40             DCB MACRO EXPANSION
         L     DBR1,IEHMVV10
         MVC   0(LOC4-LOC3,DBR1),LOC3    MOVE DCB TO WORK AREA
         LA    DBR1,LOC4-LOC3(DBR1)
         ST    DBR1,IEHMVV40+4           STORE DECB ADDRESS
         LA    DBR1,20(DBR1)
         ST    DBR1,IEHMVV10             UPDATE NEXT AVAILIABE ADDR PTR
         L     DBR1,IEHMVV10           CALC DCB ADDR ACCORDING TO
         S     DBR1,DISP4              THE EQU STSTEMENT IN THE
         ST    DBR1,IEHMVV41           DCB MACRO EXPANSION
         L     DBR1,IEHMVV10
         MVC   0(LOC5-LOC4,DBR1),LOC4  MOVE DCB TO PERM WORK AREA
         LA    DBR1,LOC5-LOC4(DBR1)
         ST    DBR1,IEHMVV41+4         STORE DECB ADDR
         LA    DBR1,20(DBR1)
         ST    DBR1,IEHMVV10           UPD ATE NEXT AVILAB. ADDR
         L     DBR1,IEHMVV10            CALC DCB ADDRESS ACCORDING TO
         S     DBR1,DISP5               THE EQU STATEMENT IN THE
         ST    DBR1,IEHMVV42            DCB MACRO EXPANSION
         L     DBR1,IEHMVV10
         MVC   0(LOC6-LOC5,DBR1),LOC5
         LA    DBR1,LOC6-LOC5(DBR1)
         ST    DBR1,IEHMVV42+4          STORE DECB ADDR
         LA    DBR1,20(DBR1)
         ST    DBR1,IEHMVV10
         LA    DBR1,60                  SET UP LINE COUNT OF 60
         STH   DBR1,IEHMVV51+8
         LA    DBR1,1
         STH   DBR1,IEHMVV51+12        SET PAGE NO. TO 01
         MVC   IEHMVV00+176(24),DDNAMES MOVE KNOWN DDNAMES TO VOLITAL
*                                       WORK AREA
*                                                                     *
*                                                                     *
*              INVOKER PARAMETERS WILL BE CONSIDERED IN THIS SECTION  *
*                                                                     *
*              THE ITEMS THAT WILL BE CONSIDERED ARE                  *
*               1   LINE COUNT                                        *
*               2   SYSIN  SYSPRINT  AND SYSUT1 DD CARD NAME          *
*                   SUBSTITUTIONS                                     *
*               3   PAGE NUMBER                                       *
*                                                                     *
*                                                                     *
         GETMAIN  R,LV=56              GET 56 BYTES OF CORE        VS0H
         USING ECSAVE,R1                USE DSECT,ECSAVE TO ADDRESS
*                                       THIS AREA
         STM   R2,INVOKE2,ECSAVE        SAVE REGISTERS
         L     R2,0(R6)                 GET ADDRESS OF PARM FIELD SET
         LA    DBR1,1             INITIALIZE REG TO DEFAULT        4942
*                                 VALUE OF POWER PARM (1)          4942
*
         AH    R2,0(R2)                 ADDRESS + LENGTH=END OF
         LA    R2,2(R2)       LENG IN LL FIELD DOES NOT INCLUDE LL 4942
*                             LL FIELD, BUMP PTR TO END OF PARM(+2)4942
*                                       PARM LIST
         L     R6,0(0,R6)              POINTER TO PARM LIST        000F
         CLI   1(R6),ZERO    SEE IF LENGTH INDICATER FOR PARM LIST VS0H
*                            IS ZERO                               VS0H
         BE    HERE          IF THERE ARE NO PARMS 20/20/40 IS     VS0H
*                            ASSUMED                               VS0H
         LA    R6,2(R6)       BUMP REG BY 2 TO POINT TO ACTUAL PARM4942
ECLOOP1  CLC   ECKEY(6),0(R6)           CHECK FOR PARMETER POWER=  000F
         BE    CKDIGIT                  NO,UP POINTER              000F
         LA    R6,1(0,R6)                                          000F
         CR    R6,R2                    CHECK FOR END OF PARM      000F
         BNL   HERE     NO MATCH, DEFAULT IS 20/20/40              4942
         B     ECLOOP1
CKDIGIT  LA    R6,6(0,R6)               BUMP PARM POINTER BY SIX   000F
         LR    R7,R6                    POINTER FOR DIGITS TO BE   000F
         CR    R6,R2                    CHECK FOR END OF LIST      000F
         BNL   PARMERR1                ERROR                       7356
         CLI   0(R6),X'F0'             CHECK DIGIT RANGE OF 1-9    000F
         BL    PARMERR1                ERROR                       7356
         CLI   0(R6),X'F9'                                         000F
         BH    PARMERR1                ERROR                       7356
         LA    R6,1(0,R6)               CHECK FOR END OF LIST      000F
         CR    R6,R2                                               000F
         BNL   ECFIND                                              4942
         CLI   0(R6),X'6B'             DELIMITER FOR THIS PARAM    7356
         BE    ECFIND                  IF YES, THEN FINISHED       7356
         LA    DBR1,1(0,DBR1)           UPDATE BYTE COUNTER        000F
         CLI   0(R6),X'F0'              CHECK DIGIT RANGE OF 1-9   000F
         BL    PARMERR1                ERROR                       7356
         CLI   0(R6),X'F9'                                         000F
         BH    PARMERR1                ERROR                       7356
         LA    R6,1(0,R6)               UPDATE PARM POINTER        000F
         CR    R6,R2                    CHECK POINTERS             000F
         BNL   ECFIND                                              000F
         CLI   0(R6),X'6B'            DELIMITER FOR THIS PARAM @ZA01726
         BE    ECFIND                 IF YES, THEN FINISHED    @ZA01726
         LA    DBR1,1(0,DBR1)          UPDATE BYTE COUNTER     @ZA01726
         CLI   0(R6),X'F0'             CHECK DIGIT RANGE 1-9   @ZA01726
         BL    PARMERR1                ERROR                   @ZA01726
         CLI   0(R6),X'F9'                                     @ZA01726
         BH    PARMERR1                ERROR                   @ZA01726
         LA    R6,1(0,R6)              UPDATE PARM POINTER     @ZA01726
         CR    R6,R2                   CHECK POINTERS          @ZA01726
         BNL   ECFIND                                          @ZA01726
         CLI   0(R6),X'6B'            DELIMITER SHOULD BE HERE @ZA01726
         BNE   PARMERR1               AS ONLY THREE DIGITS FOR @ZA01726
*                                     POWER ARA SUPPORTED      @ZA01726
ECFIND   BCTR  DBR1,0                   REDUCE BYTE COUNT BY ONE   000F
*                                          FOREXECUTE OF PACK      000F
         EX    DBR1,ECPACK              PACK THE NUMBER            000F
         CVB   DBR1,ECDBL               AND CONVERT IT             000F
HERE     LA    R2,20      ASSUME 20 TRACKS                         4942
         MR    R2,R2                   INCREASE 20 BY POWER        000F
         B     ECEND
PARMERR1 OI    PARMERR(COMMAREA),X'01' SET PARAM ERROR BIT         7356
         B     ECEND                   SKIP TO PROCESS NEXT PARAM  7356
         SPACE 3
ECPACK   PACK  ECDBL(8),0(R0,R7)   EXECUTED PACK INSTRUCTION       4942
         SPACE 3
ECEND    ST    DBR1,IEHMVV50            PLACE THE ALLOCATION       000F
*                                          AMOUNT IN THE WORK AREA 000F
         LM    R2,R7,ECSAVE             RELOAD REGISTERS
         FREEMAIN  R,LV=56,A=(1)       FREE 56 BYTES OF GOTTEN COREVS0H
         DROP  R1
INVOPT   L     INVOKE2,0(0,INVOKE1)     SET UP POINTER TO BYTE COUNT
         LH    DBR1,0(0,INVOKE2)         BYTE COUNT IN REG
         LTR   DBR1,DBR1                 IS BYTE COUNT ZERO
         BZ    INVOPT1                   BRANCH IF YES
         B     INVOPT2
INVOPT1  MVI   XSEENTRY,ZERO            SET ENTRY SWITCH TO ZERO
         L     INVOKE2,0(0,INVOKE1)
         LTR   INVOKE2,INVOKE2           IS THE POINTER MINOS
         BM    INVEXIT                   BRANCH IF YES
         B     INVDD                     GO TO DD NAME RTN IF NO
INVOPT2  SH    DBR1,DSIX                 SCAN FOR LINECNT=
         AR    INVOKE2,DBR1
INVOPT4  CLC   LINECNT(8),0(INVOKE2)     LOOK FOR LINECNT=
         BE    INVOPT3                   BRANCH IF FOUND
         BCTR  INVOKE2,R0
         BCT   DBR1,INVOPT4              BRANCH IF NOT FOUND
         B     INVOPT1                   LOOP AND LOOK FURTHER
INVOPT3  LA    INVOKE2,8(INVOKE2)        IS PARAM FOLLOWING EQUAL ONE
         CLI   0(INVOKE2),X'EF'          OR TWO BYTES
         BNH   INVOPT5                   BRANCH IF FIRST BYTE IS DELIM
         CLI   1(INVOKE2),X'EF'          IS SECOND BYTE A DELIMITER
         BNH   INVOPT7                   BRANCH IF YES
  LA  DBR1,1  SET  COUNT
         B     INVOPT6
INVOPT7  SR  DBR1,DBR1   SET  COUNT
INVOPT6  EX    DBR1,INVOPT8              MOVE LINE COUNT TO COMM AREA
         B     INVOPT9
INVOPT8  PACK  IEHMVV00(8),0(1,INVOKE2)    PACK  NUMBER
INVOPT9  DS    0H
         CVB   DBR3,IEHMVV00            CONVERT IT TO BINARY
         C     DBR3,FOUR               CHECK IF LINE COUNT IS   YA01194
*                                       EQUAL OR GREATER THAN 4 YA01194
         BL    INVOPT5                 NO , GO TO INVOPT5       YA01194
         STH   DBR3,IEHMVV51+8          STORE IT IN COMM. AREA
         B     INVOPT1
INVOPT5  DS    0H
         OI    PARMERR(COMMAREA),X'01' SET PARAM ERROR BIT         7356
         B     INVEXIT                 GO OPEN SYSPRINT AND ABORT  7356
INVDD    L     INVOKE2,4(INVOKE1)  SET UP POINTER TO DDNAME LIST
         LH    DBR1,0(INVOKE2)     LOAD AREA COUNT IN A REG
         LTR   DBR1,DBR1           IS COUNT ZERO
         BZ    INVDD1              BRANCH IF YES
         B     INVDD2
INVDD1   L     INVOKE2,4(INVOKE1)  SET UP POINTER TO DDNAME LIST
         LTR   INVOKE2,INVOKE2     IS POINTER MINUS
         BM    INVEXIT             EXIT IF YES
         B     INVPG               GO TO PAGE NO. RTN IF NO
INVDD2   EQU *
         LA    DBR3,34             LOAD 34 INTO A REG
         CLR   DBR1,DBR3           COMPARE COUNT TO REG
         BNH   INVDD1              BRANCH IF LOW OR EQUAL
         LA    INVOKE2,2(INVOKE2)
         LM    R14,R15,32(INVOKE2)
         BCTR  INVOKE2,R0
         BCTR  INVOKE2,R0
         LTR   R14,R14                  IS THE NAME ZEROS?
         BZ    INVDD3              BRANCH IF YES
         STM   R14,R15,IEHMVV00+176     REPLACE SYSIN DDNAME
         L     DBR3,IEHMVV32            CHANGE NAME IN SYSIN DCB
         STM   R14,R15,40(DBR3)
INVDD3   LA    DBR3,42             LOAD 40 INTO A REG
         CLR   DBR1,DBR3           COMPARE COUNT TO REG
         BNH   INVDD1              BRANCH IF LOW OR EQUAL
         LA    INVOKE2,2(INVOKE2)
         LM    R14,R15,40(INVOKE2)
         BCTR  INVOKE2,R0
         BCTR  INVOKE2,R0
         LTR   R14,R14                  IS THE NAME ZERO?
         BZ    INVDD4              BRANCH IF YES
         STM   R14,R15,IEHMVV00+184     REPLACE SYSPRINT DDNAME
         L     DBR3,IEHMVV33            CHANGE NAME IN SYSPRINT DCB
         STM   R14,R15,40(DBR3)
INVDD4   LA    DBR3,58                  LOAD REG WITH 58
         CLR   DBR1,DBR3                COMPARE COUNT TO REG
         BNH   INVDD1                   BRANCH IF LOW OR EQUAL
         LA    INVOKE2,2(INVOKE2)
         LM    R14,R15,56(INVOKE2)
         BCTR  INVOKE2,R0
         BCTR  INVOKE2,R0
         LTR   R14,R14                  IS THE NAME ZERO?
         BZ    INVDD1                   BRANCH IF YES
         STM   R14,R15,IEHMVV00+192     REPLACE SYSUT1 DDNAME
         L     DBR3,IEHMVV40            CHANGE NAME IN SYSUT1 DCB
         STM   R14,R15,40(DBR3)
         L     DBR3,IEHMVV41            CHANGE DD NAME IN SYSUT2 DCB
         STM   R14,R15,40(DBR3)
         L     DBR3,IEHMVV42            CHANGE DD NAME IN SYSUT3 DCB
         STM   R14,R15,40(DBR3)
         B     INVDD1
INVPG1   PACK  IEHMVV00(8),2(1,INVOKE2) MOVE PAGE # TO COMM AREA A21460
INVPG    L     INVOKE2,8(INVOKE1)       SET POINTER TO PAGE NO POINTER
         LH    DBR1,0(INVOKE2)          LOAD AREA COUNT
         LTR   DBR1,DBR1                IS COUNT ZERO
         BZ    INVEXIT                  BRANCH IF YES
         BCTR  DBR1,0                   DECREASE COUNT BY 1 FOR  A21460X
                                        EX INSTRUCTION           A21460
         EX    DBR1,INVPG1              MOVE PAGE NO. TO COMM AREA
         CVB   INVOKE2,IEHMVV00         CONVERT IT TO BINARY
         STH   INVOKE2,IEHMVV51+12     STORE BACK IN COMM AREA   A21460
INVEXIT  DS    0H
*                                                                     *
*                                                                     *
*              AT THIS POINT A LIST OF DD NAMES ASSOCIATED WITH       *
*              DATA SETS THAT WILL BE ACTIVE THROUGH OUT THE COURSE   *
*              OF THE IEHMOVE PROGRAM   WORK FILES  ETC WILL BE PASSED*
*              TO THE VOLUME MOUNTING ROUTINE                         *
*              THE VOLUME MOUNTING ROUTINE WILL INITIALIZE ITS SELF   *
*              SO AS TO PREVENT THE VOLUMES ON WHICH THESE DATA SETS  *
*              RESIDE FROM BEING  DISMOUNTED                          *
*                                                                     *
*                                                                     *
         LA    R1,IEHMVV00+176          SET UP VOLUME MOUNTING REQUEST
         ST    R1,IEHMVV00
         LA    R1,3
         STC   R1,IEHMVV00
         MVI   IEHMVV00+VMVMR,X'00'     NUMBER OF REQUESTS
         LA    DBR1,IEHMVV00       PTR TO LIST FOR VOL MNT
         LH    DBR3,SE
       IEHPOST (14),T
         XCTL  EP=IEHMVXSF
MNTIN    DS    0H
         LR    R1,DBR1
         L     R15,VMIT(0,R1)           GET ADDRESS OF INTERNAL TABLE
         SR    R0,R0
         IC    R0,VMITC(R0,R1)          GET NUMBER OF IT ENTRIES
         LH    R14,0(R0,R15)            GET LENGTH OF TABLE
         L     R1,IEHMVV10              POINTER TO PERMANENT WORK AREA
         ST    R1,IEHMVV50+4            SET UP POINTER TO IT TABLE
         STC   R0,IEHMVV50+4            SET UP NUMBER OF IT ENTRIES
         LA    R10,255          TO MOVE 256 BYTES BY EX-INSTR.   A48763
MVCINTBL CH    R14,H256         IS INT. TBL. LONGER THAN 256 BTS A48763
         BNH   LASTMVC          IF NOT, BYPASS LOOP TO MOVE IT   A48763
         EX    R10,ITMOVER      IF YES,MOVE IT IN STEPS OF 256BTSA48763
         SH    R14,H256         ADJUST NR OF BYTES, TO BE MOVED  A48763
         LA    R15,256(R15)     ADJUST ADDRESS,FROM WHICH TO MOVEA48763
         LA    R1,256(R1)       ADJUST ADDRESS,TO WHICH TO MOVE  A48763
         B     MVCINTBL         BRANCH FOR MOVE OF THE REST OF ITA48763
LASTMVC  BCTR  R14,R0           SUBTRACT ONE FOR EX-INSTRUCTION  A48763
         EX    R14,ITMOVER      MOVE REMAINING PART OF INT. TABLEA48763
         LA    R1,1(R1,R14)     ADJUST NEW WORKAREA-POINTER      A48763
         ST    R1,IEHMVV10      SAVE NEW WORKAREA-POINTER        A48763
         LR    R1,DBR1                                           A48763
         L     R15,VMIT(R0,R1)  GET ADDRESS OF I.T. FOR FREEMAIN A48763
         LH    R14,0(R0,R15)    GET LENGTH OF I.T. FOR FREEMAIN  A48763
         LR    R0,R14                                            A48763
         LR    R1,R15
         FREEMAIN R,LV=(0),A=(1)        FREE TABLE AREA
         B     ITMOVEO
ITMOVER  MVC   0(1,R1),0(R15)           USED FOR MOVING INTERNAL TABLE
ITMOVEO  DS    0H
*                                                                     *
*                                                                     *
*              SYSIN  AND  SYSPRINT  DCB S  WILL BE OPENED HERE       *
*                                                                     *
*              AFTER SYSPRINT IS OPENED CONTROL WILL BE PASSED        *
*              TO THE MESSAGE WRITER SO THAT IT CAN INITIALIZE        *
*              ITS SELF   SKIP FORMS                                  *
*                         PRINT HEADER  AND PAGE NUMBER               *
*                         ETC                                         *
*                                                                     *
*                                                                     *
         L     DBR1,IEHMVV32
         L     DBR3,IEHMVV33
         MVC   37(3,DBR1),DCB1+37  UPDATE ADDRESS OF EXITLISTS  PTM663
         MVC   37(3,DBR3),DCB2+37   AFTER XCTLS - ESP FOR MVT   PTM663
         L     DBCOMPR,IEHMVV10
         MVC   0(RENT2-RENT1,DBCOMPR),RENT1
         MVI   IEHMVV20,X'00'          SET SWITCH FOR SYSIN DCB    BS0H
*                                         EXIT                     BS0H
         BALR  R10,DBCOMPR             GO TO OPEN DCBS
*
         TM    PARMERR(COMMAREA),X'01' IS PARAM ERROR BIT ON       7356
         BO    LINKAGE                 IF SO GO TO BAD PARAM ABORT 7356
*
*    THE FOLLOWING CODE CHECKS THE FLAG FIELDS OF THE SYSIN AND
* SYSPRINT DCBS FOR A SUCCESSFUL OPEN.
*
*    IF SYSPRINT HAS NOT BEEN OPENED SUCCESSFULLY, NO SYSPRINT
* DD STATEMENT HAS BEEN SUPPLIED.
*
*    CONSEQUENTLY, NO MESSAGE TO THIS EFFECT CAN BE PRINTED.
* CODE 16 IS RETURNED TO THE SCHEDULER AND THE JOB IS TERMINATED.
*
*    IF SYSIN HAS NOT BEEN OPENED SUCCESSFULLY, NO SYSIN
* DD STATEMENT HAS BEEN SUPPLIED.
*
*    A MESSAGE TO THIS EFFECT IS PRINTED, CODE 16 IS RETURNED
* TO THE SCHEDULER AND THE JOB IS TERMINATED.
*
         CLI   IEHMVV20,X'F0'          BLOCKSIZE CHECK PASSED      BS0H
         BNE   BLKOK                   YES. BLOCKSIZE CHECK PASSED BSOH
         TM    DCBFLG(DBR3),OPEN       HAS SYSPRINT BEEN OPENED OK
         BO    TSTSYSIN                YES. GOTO TEST SYSIN
NOGOOD   TM    DCBFLG(DBR1),OPEN       HAS SYSIN BEEN OPENED   @ZA01246
         BZ    FREE                     NO SKIP CLOSE          @ZA01246
         CLOSE ((DBR1))                 YES CLOSE SYSIN        @ZA01246
FREE     LA R0,3040                    PREPARE TO ABORT        @ZA01246
         LR    R1,COMMAREA             LOAD PARAM REGS TO FREE STORAGE
*                                      ACQUIRED FOR COMMUNICATIONS
*                                      AREA.
         FREEMAIN R,LV=(0),A=(1)       ISSUE FREEMAIN
         IEHPOST (14,1),T              RESTORE PNTR TO SAVE AREA
         LA    R15,8                   LOAD ABORT RETURN CODE    A24913
         RETURN (14,12),RC=(15)        RETURN TO STEM
BLKOK    TM    DCBFLG(DBR3),OPEN       HAS SYSPRINT BEEN OPENED  A24913
         BZ    NOGOOD                  NO. PREPARE TO ABORT      A24913
TSTSYSIN TM    IEHMVV20,X'FF'          CHECK FOR IMPROPER BLKSI    BS0H
         BC    1,LINKAGE               YES, INCOMPLETE OPERN       BS0H
         TM    DCBFLG(DBR1),OPEN       HAS SYSIN BEEN OPENED OK    BS0H
         BO    OKAY                    YES. CONTINUE PROCESSING THIS
*                                      REQUEST.
*                            IF NO, GO TO MESSAGE WRITER TO PRINT
*                            HEADER AND RETURN TO SET UP MESSAGE
*                            UNABLE TO OPEN SYSIN DATA SET.
         B     LINKAGE                                             BS0H
EXITSYS  OC    62(2,DBR1),62(DBR1)     HAS BLOCK SIZE BEEN PROVIDEDBS0H
         BNZ   DIVIDE                  YES, GO TO CHECK FOR A      BS0H
*                                         MULTIPLE OF LRECL        BS0H
         MVC   62(2,DBR1),82(DBR1)     ASSUME BLOCKSIZE=80         BS0H
         RETURN
DIVIDE   SR    R2,R2                                               BS0H
         LH    R15,82(DBR1)            PICK UP LRECL               BS0H
         LR    R1,DBR1                  SAVE REGISTER              BS0H
         LH    R3,62(DBR1)             PICK UP BLOCK SIZE          BS0H
         DR    R2,R15                  DIVIDE BLOCKSIZE BY LRECL   BS0H
         LR    DBR1,R1                                             BS0H
         LTR   R2,R2                    CHECK FOR REMAINDER        BS0H
         BCR   8,R14                   RETURN TO OPERN IF DIVIDE   BS0H
*                                         SUCCESSFUL               BS0H
         MVI   IEHMVV20,X'FF'          SET FOR S\SIN UNOPENED      BS0H
         MVC   62(2,DBR1),82(DBR1)      MOVE LRECL TO BLKSIZE      BS0H
         RETURN
DCBPRTS  OC    62(2,DBR3),62(DBR3)     BLOCKSIZE PROVIDED          BS0H
         BNZ   CHECKD                  YES, BLOCK SIZE PROVIDED    BS0H
         MVC   62(2,DBR3),82(DBR3)     SET BLOCKSIZE = LRECL       BS0H
         RETURN
CHECKD   SR    R2,R2                                               BS0H
         LH    R3,62(DBR3)             PICK UP BLOCKSIZE           BS0H
         LH    R15,82(DBR3)            PICK UP LRECL               BS0H
         DR    R2,R15                  DIVIDE BLOCK SIZE BY LRECL  BS0H
         L     DBR1,IEHMVV32           RESTORE SYSIN DCB POINTER   BS0H
         LTR   R2,R2                                               BS0H
         BCR   8,R14                   NO REMAINDER RETURN TO OPEN BS0H
         MVI   IEHMVV20,X'F0'          SET ERROR CODE              BS0H
         MVC   62(2,DBR3),82(DBR3)      MOVE LRECL TO BLKSIZE      BS0H
         RETURN
LINKAGE  LINK  EP=IEHMVESU                                         BS0H
         TM    PARMERR(COMMAREA),X'01' IS PARAM ERROR BIT ON       7356
         BZ    *+12                    IF NOT SYSIN NOT OPENED     7356
         LA    R3,8                    PARAM ERR MSG CODE FOR ESA  7356
         B     *+8                     SKIP UNOPENED SYSIN CODE    7356
         LA    R3,17                   SET UNOPENED SYSIN CODE     7356
         LA    R2,16                   FORCE ENTRY TO IEHMVESK, THE
*                                      WRAP UP ROUTINE. AFTER IEHMVESA
*                                      HAS CAUSED THE ABOVE MSG TO BE
*                                      PRINTED, IT WILL PASS CONTROL
*                                      TO IEHMVESK ON THE BASIS OF
*                                      THE CODE FOUND IN REGISTER 2.
         OI    IEHMVV41+13,X'08'       SET RETURN CODE BYTE AT 16
*                                      THIS BYTE WILL BE LOADED INTO
*                                      REGISTER 15 BY IEHMVESK PRIOR
*                                      TO RETURNING TO THE STEM.
         B     ESAEXIT                 GO TO IEHMVESA
OKAY     DS    0H
         L     R3,MINUS                 SET CODES FOR REENTRY
         LA    R2,4                     TO IEHMVXSE
ESAEXIT  DS    0H
       IEHPOST (14),T
         XCTL  EP=IEHMVESA
*                                                                     *
*                                                                     *
*              THE THREE WORK FILES WILL BE ALLOCATED BY THIS ROUTINE *
*                                                                     *
*              A JFCB WILL BE CONSTRUCTED AND PASSED TO DADSM FOR     *
*              ALLOCATION OF EACH OF THE UNIQUELY NAMED FILES         *
*                                                                     *
*                                                                     *
FINDUCB  MVI   XSEENTRY,ZERO            SET ENTRY SWITCH TO ZERO
         L     DBR1,16                  LOAD PTR TO CVT
         L     DBR1,0(DBR1)             LOAD POINTER TO TCB POINTE
         L     DBR1,4(DBR1)            LOAD CURRENT TCB        @ZA07392
         L     DBR1,12(DBR1)            LOAD TIOT POINTER
         LA    DBR1,24(DBR1)            ADJ TIOT POINTER TO POINT TO DD
         L     DBCOMPR,IEHMVV40
UCB1     CLC   40(8,DBCOMPR),4(DBR1)
         BE    UCBFOUND                 BRANCH IF YES
     SR   DBR3,DBR3
    IC  DBR3,0(DBR1)
         AR    DBR1,DBR3                BUMP POINTER TO NEXT DD ENTRY
    IC  DBR3,0(DBR1)
         LTR   DBR3,DBR3                IS LENGTH ZERO
         BZ    NOFIND1                 YES NO DD MATCH WAS MADE  A38756
         B     UCB1                     LOOP TO CONTINUE SEARCH
UCBFOUND EQU   *                                               @ZM30153
         SR    R1,R1                    CLEAR REGISTER         @ZM30153
         ICM   R1,3,18(DBR1)            LOAD UCB PTR           @ZM30153
         ST    R1,IEHMVV31
         XC    IEHMVV39+5(3),IEHMVV39+5 CLEAR NAME GENERATEOR COUNTS
         MVI   IEHMVV31,X'80'
*                                       *** BUILD JFCB TO CALL DADSM**
         SPACE 1
*              COMPUTE THE NUMBER OF TRACKS FOR ANY DIRECT ACCESS
*              DEVICE BY USING THE DEVICE CHARACTERISTICS
         SPACE 1
         STM   DEV14,DEV3,DEVSAVE
         L     DEV14,IEHMVV40          GET ADDRESS OF SYSUT1 DDNAME
         LA    DEV1,40(0,DEV14)         FROM SYSUT1 DCB
         DEVTYPE (1),DEVCHAR,DEVTAB     GET DEVICE CHARACTERISTICS
         TM    DEVCHAR+2,X'20'         TEST FOR DIRECT ACCESS
         BZ    DEVCONT                 BRANCH IF NOT D. A.
         TM    DEVCHAR+RPS,X'10'     RECORD READY FEATURE AVAIL. S20201
         BZ    ALLOC                   NO - CONTINUE             S20201
         OI    IEHMVV20+VMIT,X'04'     TURN ON RECORD READY BIT  S20201
ALLOC    L     DEV15,IEHMVV50          GET THE NO. OF TRACKS NOW S20201
         LA    DEV15,0(0,DEV15)        COMPUTED AND PLACE IN REGISTER
         SR    DEV0,DEV0
         LR    DEV2,DEV0
         LA    DEV1,88                  PICK ASSUMED KEYED RECORD
*                                          LENGTH OF 88 BYTES
         TM    DEVCHAR+17,TOLANCE       TEST FOR DEVICE TOLERANCE
         BZ    NOTOL                    BRANCH IF NO TOLERANCE
         MH    DEV1,DEVCHAR+18          MULTIPLY BY TOLERANCE
         SRL   DEV1,9                   DIVIDE RESULT BY 512
NOTOL    LH    DEV3,DEVCHAR+12          PICK UP MAXIMUM TRACK LENGTH
         SR    DEV3,DEV1                SUBTRACT OFF RECORD SIZE TIMES
*                                          TOLERANCE IF ANY
         TM    DEVCHAR+OVHED1,X'08'    2-BYTE COUNT TEST         S20201
         BZ    NOTOL1                  NO - CONTINUE             S20201
         LH    DEV0,DEVCHAR+OVHED      GET OVERHEAD VALUE        S20201
         B     CHANGED                 CONTINUE                  S20201
NOTOL1   IC    DEV0,DEVCHAR+15         PICK UP OVERHEAD FACTOR   S20201
*                                          KEYED LAST RECORD
         SR    DEV3,DEV0                SUBTRACT OFF OVERHEAD FACTOR
         IC    DEV0,DEVCHAR+14          PICK UP OVERHEAD FACTOR FOR
*                                          KEYED NON LAST RECORD
CHANGED  AR    DEV1,DEV0            SUBTRACT OFF OVERHEAD FACTOR S20201
         DR    DEV2,DEV1                DIVIDE TRACK LENGTH MINUS LAST
*                                          RECORD LENGTH BY NON LAST
*                                          RECORD LENGTH
         LA    DEV3,1(DEV3)             INCREMENT RECORD COUNT BY ONE
*                                          FOR LAST RECORD
         LA    DEV14,21                 PICK UP NUMBER OF 88 BYTE
*                                          KEYED RECORDS THAT WILL FIT
*                                          ON ONE TRACK OF A 2311
         MR    DEV14,DEV14              CALCULATE TOTAL NUMBER OF
*                                          RECORDS NEEDED
         DR    DEV14,DEV3               CALCULATE NUMBER OF RECORDS
*                                          BY NUMBER THAT WILL FIT ON
*                                          A TRACK OF DEVICE TO BE
*                                          USED
         ST    DEV15,IEHMVV50           STORE, NUMBER OF TRACKS NEEDED
DEVCONT  LM    DEV14,DEV3,DEVSAVE
         SPACE 1
         MVC   IEHMVV00(176),JFCB1      MOVE SKELETON JFCB TO WORK AREA
         MVC   IEHMVV00+152(3),IEHMVV50+1   NUMBER OF TRKS TO JFCB
         CLI   DEVCHAR+3,X'05'          TEST FOR 2321            S20201
         BC    7,NOT2321                                         S20201
         MVC   IEHMVV00+118(6),4(R1)    IF YES DISPLACEMENT TO VOL
*                                          SER IS DIFFERENT SINCE
*                                          A SUB UCB IS POINTED TO
         B     GO
NOT2321  MVC   IEHMVV00+118(6),28(R1)   MOVE VOL SER FROM UCB TO JFCB
GO       MVI   IEHMVV00+124,X'40'       VOL SER NO DELIMETER
         MVC   IEHMVV00(2),ASTRISK     PROTECT DSNAME WITH PRECEDING
*                                      ASTRISK
         ST    R1,SAVEREG1             SAVE REG1               @ZA07393
         TIME  ,                                               @ZA07393
         XC    DW,DW                   CLEAR CONVERSION AREA   @ZA07393
         LR    R6,R1                   GET DATE IN REG6        @ZA07393
         STH   R1,DW+6                 STORE DAY 'DDC'         @ZA07393
         CVB   R1,DW                   CONVERT TO BINARY       @ZA07393
         STH   R1,DW+6                 STORE IT                @ZA07393
         MVC   IEHMVV00+81(2),DW+6     MOVE DAY INTO JFCB      @ZA07393
         SRDL  R6,4                    PUT 'C' INTO REG7       @ZA07393
         SRL   R6,12                   REMOVE DAY 'DDD'        @ZA07393
         SLDL  R6,4                    PUT BACK 'C'            @ZA07393
         STH   R6,DW+6                 STORE YEAR 'YYC'        @ZA07393
         CVB   R1,DW                   CONVERT TO BINARY       @ZA07393
         STC   R1,IEHMVV00+80          MOVE YEAR INTO JFCB     @ZA07393
         L     R1,SAVEREG1             RESET REG1              @ZA07393
DUPNAME  TIME  ,                       GET TIME                @ZA00101
         ST    R0,DV                   STORE CLOCK TIME        @ZA00101
         OI    DV+3,X'0F'              SET SIGN BYTE           @ZA00101
         UNPK  IEHMVV00+10(7),DV(4)    UNPACK                  @ZA00101
         MVC   IEHMVV00+2(8),DDNAMES+16 MOVE SYSUT1.T TO JFCB  @ZA00101
         MVC   IEHMVV87(8),IEHMVV00+9  SAVE TIME FOR SCRATCH   @ZA03372
         LA    R3,IEHMVV00             ADDRESS OF VOLITAC      @ZA00101
*                                      WORK AREAA              @ZA00101
         ST    R3,IEHMVV31+4           STORE ADDRESS           @ZA00101
         BAL   DBCOMPR,CALLDAD         ALLOCATE **SYSUT1       @ZA00101
         SR    R15,R6                  CHECK RETURN CODE       @ZA00101
         BZ    DUPNAME                 DUPLICATE NAME          @ZA00101
         BM    DAD1                    GOOD ALLOCATE           @ZA00101
NOFIND1  MVC   IEHMVV39+5(3),XFF       INDICATE NONE OF THE    @ZA00101
*                                      WORKFILES WAS ALLOCATED @ZA00101
         B     NOFIND                  AND ABORT               @ZA00101
DAD1     DS    0H                                              @ZA00101
         MVC   TTRSAVE(3),IEHMVV00+53  SAVE TTR FOR OPEN       @ZA00101
         MVI   IEHMVV00+7,X'F2'        MAKE NAME **SYSUT2.T    @ZA00101
         BAL   DBCOMPR,CALLDAD         ALLOCATE **SYSUT2       @ZA00101
         SR    R15,R6                  CHECK RETURN CODE       @ZA00101
         BM    DAD2                    GOOD ALLOCATE           @ZA00101
         MVC   IEHMVV39+6(2),XFF       INDICATE **SYSUT2 AND   @ZA00101
*                                      **SYSUT3 NOT ALLOCATED  @ZA00101
         B     NOFIND                  AND ABORT               @ZA00101
DAD2     DS    0H                                              @ZA00101
         MVC   TTRSAVE+3(3),IEHMVV00+53 SAVE TTR FOR OPEN      @ZA00101
         MVI   IEHMVV00+155,X'44'      PREP JFCBCTRI FOR SLL   @ZA00101
         L     DBCOMPR,IEHMVV00+152    DOUBLE THE ALLOCATION   @ZA00101
         SLL   DBCOMPR,1               FOR SYSUT3 WORK FILE    @ZA00101
         ST    DBCOMPR,IEHMVV00+152    PUT IT IN JFCB          @ZA00101
         MVI   IEHMVV00+7,X'F3'        MAKE NAME **SYSUT3.T    @ZA00101
         BAL   DBCOMPR,CALLDAD         ALLOCATE **SYSUT3       @ZA00101
         SR    R15,R6                  CHECK RETURN CODE       @ZA00101
         BM    DAD3                    GOOD ALLOCATE           @ZA00101
         MVC   IEHMVV39+7(1),XFF       INDICATE **SYSUT3 NOT   @ZA00101
*                                      ALLOCATED               @ZA00101
         B     NOFIND                  AND ABORT               @ZA00101
DAD3     DS    0H                                              @ZA00101
         MVC   TTRSAVE+6(3),IEHMVV00+53    SAVE TTR FOR OPEN     S21042
         B     CALLDAD1
CALLDAD  DS    0H
         LA    R1,IEHMVV31
         L     R0,IEHMVV31+4
         SVC   32                       CALL DADSM
         LA    DADR1,4                  TEST RETURNS FROM DADSM
         SLL   R15,8                    CLEAR LEFTMOST BYTE OF REG 15
         SRL   R15,8
         B     0(DBCOMPR)              RETURN TO CALLER          S21042
*
*                             ASSEMBLER DC STATEMENTS
*
ACON     DC    A(IEHMVESE-IEHMVXSE)     USED TO SET UP ADDRESSABILITY
*                                       FOR ALTERNATE ENTRY,IEHMVESE
ECKEY    DC    C'POWER='
LINECNT  DC    CL8'LINECNT='            USED FOR PAGE CONTROL
DSIX     DC    H'06'
DEVSAVE  DS    6F                       REGISTER SAVE AREA
DEVCHAR  DS    5F                      DEVICE CHARACTERISTICS AREA
DW       DS    D                                               @ZA07393
SAVEREG1 DS    F                                               @ZA07393
*                             FOLLOWING ARE THE DDNAMES NORMALLY USED
*                             BY THE MOVE/COPY PROGRAM
DDNAMES  DC    CL8'SYSIN'
         DC    CL8'SYSPRINT'
         DC    CL8'SYSUT1.T'                                   @ZA00101
TTRSAVE  DS    9X    DSCBTTR SAVE AREA FOR SYSUT WORKFILES       S21042
ASTRISK  DC    C'**'
DV       DS    F                                               @ZA00101
FOUR     DC    F'4'                                             YA01194
JFCB1    DS    0F
JDSNAME  DC    22X'4040'
         DC    8X'40'
JTSDM    DC    1X'08'                  SUPPRESS OPEN FROM        A23994
*                                      PUTTING THE JFCB ON THE Q A23994
         DC    13X'00'
         DC    1X'00'
         DC    1X'00'                                          @ZM33040
         DC    2X'00'
         DC    2X'00'
         DC    8X'00'
         DC    3X'00'
         DC    3X'00'
         DC    1X'00'
         DC    1X'C0'
         DC    24X'00'
         DC    4X'00'
         DC    1X'00'
         DC    1X'01'
JVOLSER  DC    30X'00'
         DC    1X'00'
         DC    3X'00'
JPRIQUAN DC    FL3'20'
JSPACPAR DC    X'88'                                               9754
         DC    XL3'00'
         DC    1X'00'                                          @ZM33040
         DC    3X'00'
         DC    3X'00'
         DC    2X'00'
         DC    3X'00'
         DC    3X'00'
         DC    X'00'
         DC    X'00'
*
*
*                             THIS ROUTINE BUILDS UNIQUE DSNAMES
*                             FOR THE WORK FILES
*                                                                     *
*                                                                     *
*              THE UNIQUE NAME THAT EACH WORK FILE WAS ALLOCATED      *
*              WITH IS AGAIN DEVELOPED AND PLUGGED INTO A JFCB        *
*              AND EACH WORK FILE IS OPENED   USING  OPEN J           *
*                                                                     *
*                                                                     *
CALLDAD1 DS    0H
         L     R6,IEHMVV40
         L     R7,IEHMVV41
         L     R2,IEHMVV42
         L     DBCOMPR,IEHMVV10         LOAD ADDR OF PERM WORK AREA
         LA    DBR1,IEHMVV00+176        LOAD ADDR OF WORD PAST JFCB
         ST    DBR1,IEHMVV00+176        STORE THE ADDR IN THE WORD
         L     DBR1,IEHMVV40            LOAD ADDR OF SYSUT1 DCB
         MVC   37(3,DBR1),IEHMVV00+177  MOVE 3 BYTE --ADDR OF DCB EXLST
         L     DBR1,IEHMVV41           LOAD ADDR SYSUT2 DCB
         MVC   37(3,DBR1),IEHMVV00+177 MOVE EXLIST PTR TO UT2  DCB
         L     DBR1,IEHMVV42           LOAD ADDR OF SYSUT3 DCB
         MVC   37(3,DBR1),IEHMVV00+177 MOVE EXLST PTR INTO UT3 DCB
         LA    DBR1,IEHMVV00            LOAD ADDR OF JFCB FOR OPEN J
         ST    DBR1,IEHMVV00+176        STORE ADDR IN EXIT LIST
         MVI   IEHMVV00+176,X'87'       SET CODE IN LEFT BYTE OF EXLST
         MVC   IEHMVV00(2),ASTRISK      MOVE DSNAME PROTECTION ASTRISK
         MVI   IEHMVV00+7,X'F1'        MAKE NAME **SYSUT1.T    @ZA00101
         MVC   0(RENT3-RENT2,DBCOMPR),RENT2 MOVE OPEN TO WORK AREA
         MVC   IEHMVV00+53(3),TTRSAVE  DSCBTTR IN JFCB FOR OPEN  S21042
         BALR  R10,DBCOMPR             BRANCH TO OPEN DCB
         XC    37(3,R6),37(R6)       CLEAR SYSUT1 DCB EXITLIST @ZA07360
         MVI   IEHMVV00+7,X'F2'        MAKE NAME **SYSUT2.T    @ZA00101
         MVC   0(RENT4-RENT3,DBCOMPR),RENT3 MOVE OPEN TO WORK AREA
         MVC   IEHMVV00+53(3),TTRSAVE+3 DSCBTTR IN JFCB FOR OPEN S21042
         BALR  R10,DBCOMPR              BRAMCH TO OPEN DCB
         XC    37(3,R7),37(R7)       CLEAR SYSUT2 DCB EXITLIST @ZA07360
         MVI   IEHMVV00+7,X'F3'        MAKE NAME **SYSUT3.T    @ZA00101
         MVC   0(RENT5-RENT4,DBCOMPR),RENT4 MOVE OPEN TO WORK AREA
         MVC   IEHMVV00+53(3),TTRSAVE+6 DSCBTTR IN JFCB FOR OPEN S21042
         BALR  R10,DBCOMPR              BRAMCH TO OPEN DCB
         XC    37(3,R2),37(R2)       CLEAR SYSUT3 DCB EXITLIST @ZA07360
         XC    IEHMVV00(200),IEHMVV00   CLEAR VOLITAL WORK AREA
         XC    0(100,DBCOMPR),0(DBCOMPR) CLEAR THE PERM WORK AREA
         MVI   XSEENTRY,ZERO            RESET REENTRY SWITCH
*                                                                     *
*                                                                     *
*              AT THIS POINT CONTROL IS TRANSFERD TO THE IEHMOVE      *
*              REQUEST ANALIZER ROUTINES   THE FIRST MODULE IS        *
*              IEHMVSST                                               *
*                                                                     *
*                                                                     *
      IEHPOST (14),T
         L     R14,12(R0,R13)
         XCTL  (2,12),EP=IEHMVEST
NOFIND   LA    R2,16                    CAUSE RENTRY TO ESK
         LA    R3,16                    MESSAGE NUMBER
         B     ESAEXIT
RENT1    DS    0F
         DROP  BASE
         USING *,DBCOMPR
         OPEN  ((DBR1),INPUT,(DBR3),OUTPUT)
         BR    R10                      RETURN TO MAIN FLOW
         DROP  DBCOMPR
         USING IEHMVXSE,BASE
RENT2    DS    0F
         DROP  BASE
         USING *,DBCOMPR
         OPEN  ((R6),OUTIN),TYPE=J
         BR    R10                      RETURN TO MAIN FLOW
         DROP  DBCOMPR
         USING IEHMVXSE,BASE
RENT3    DS    0F
         DROP  BASE
         USING *,DBCOMPR
         OPEN  ((R7),OUTIN),TYPE=J
         BR    R10                      RETURN TO MAIN FLOW
         DROP  DBCOMPR
         USING IEHMVXSE,BASE
RENT4    DS    0F
         DROP  BASE
         USING *,DBCOMPR
         OPEN  ((R2),OUTIN),TYPE=J
         BR    R10                      RETURN TO MAIN FLOW
         DROP  DBCOMPR
         USING IEHMVXSE,BASE
RENT5    DS    0F
*                             THIS ROUTINE IS USED TO CLEAR 2000 BYTES
*                             OF THE MOVE/COPY COMMUNICATION REGION
*
CLEAR    LTR   R0,R0                    IS LENGTH ZERO?
         BE    0(R0,R14)                YES.RETURN TO MAIN FLOW
         MVI   0(R1),ZERO               SET PROPAGATION BYTE
         BCTR  R0,R0
         LTR   R0,R0                    IS LENGTH ZERO?
         BE    0(R0,R14)                YES.RETURN TO MAIN FLOW
         LA    R15,255                  PUT MAXIMUM PROPAGATION
*                                       FACTOR IN REG 15
CLEAR3   CLR   R0,R15                   IS MAXIMUM LARGER THAN LENGTH
*                                       TO BE CLEARED?
         BNH   CLEAR2                   YES
         EX    R15,CLEAR1               EXECUTE MOVE INSTRUCTION,
         SR    R0,R15                   REDUCT LENGTH TO BE CLEARED,
         AR    R1,R15                   ADJUST POINTER TO NEXT AREA AND
         B     CLEAR3                   LOOP BACK TO EXECUTE MOVE AGAIN
CLEAR2   LTR   R0,R0
         BE    0(R0,R14)                IF FINISHED RETURN
         XR    R15,R0
         XR    R0,R15
         XR    R15,R0                   OTHERWISE, CLEAR REMAINING
         EX    R15,CLEAR1               AREA AND RETURN
         BR    R14
CLEAR1   MVC   1(1,R1),0(R1)
         DS    0F                                                A48763
H37      DC    XL2'13'                 NMBR OF '.*'              A44310
SE       DC    C'SE'
MINUS    DC    X'80000000'
H256     DC    H'256'                                            A48763
FOXES    DC    X'0000FFFF'              ZERO LEFT HALF         @ZM30153
SYSDCB   DS    0F                                                  BS0H
         DC    X'85'                   SYSIN DCB EXIT              BS0H
         DC    AL3(EXITSYS)                                        BS0H
DCBPRT   DS    0F                                                  BS0H
         DC    X'85'                   DCB EXIT FOR SYSPTINT       BS0H
         DC    AL3(DCBPRTS)                                        BS0H
DISP1    DC    A(LOC1-DCB1)
DISP2    DC    A(LOC2-DCB2)
DISP3    DC    A(LOC3-DCB3)
DISP4    DC    A(LOC4-DCB4)
DISP5    DC    A(LOC5-DCB5)
LOC1     DS    0F
DCB1     DCB   DSORG=PS,                                               C
               MACRF=(GM),                                             C
               RECFM=FB,                                               C
               LRECL=80,                                               C
               EXLST=SYSDCB,                                       BS0HC
               BUFNO=1,                                                C
               DDNAME=SYSIN
LOC2     DS    0F
DCB2     DCB   DDNAME=SYSPRINT,                                        C
               DSORG=PS,                                               C
               RECFM=FBA,                                              C
               LRECL=121,                                              C
               EXLST=DCBPRT,                                       BS0HC
               BUFNO=1,                                                C
               MACRF=(PM)
LOC3     DS    0F
DCB3     DCB   DDNAME=SYSUT1,                                          *
               DSORG=PS,                                               *
               MACRF=(RCP,WCP),                                        X
               DEVD=DA,                                                *
               KEYLEN=12,                                              X
               RECFM=U,                                                C
               BLKSIZE=666,                                            C
               BUFNO=1,                                                *
               NCP=1
LOC4     DS    0F
DCB4     DCB   DDNAME=SYSUT1,                                          C
               MACRF=(RCP,WCP),                                        X
               DSORG=PS,                                               X
               DEVD=DA,                                                X
               KEYLEN=8,                                               X
               RECFM=U,                                                C
               BLKSIZE=666,                                            C
               NCP=1
LOC5     DS    0C
DCB5     DCB   DDNAME=SYSUT1,                                          C
               MACRF=(RCP,WCP),                                        C
               DSORG=PS,                                               X
               DEVD=DA,                                                X
               KEYLEN=4,                                               X
               RECFM=U,                                                X
               BLKSIZE=87,                                             C
               NCP=1
LOC6     DS    0C
PRNTAREA DC    15XL8'0'
XFF      DC    XL3'FFFFFF'                                       A37897
ECDSECT  DSECT
ECSAVE   DS    6F                      SAVE AREA FOR 2-7
         DS    D
ECDBL    DS    D                       DBL WORD WORK AREA
         IEHMVV
XSEENTRY EQU   IEHMVV27+4
         END
