 TITLE 'IEHMVSSF-IEHMOVE,IEHLIST,IEHPROGM VOLUME MOUNTER'          1415
***********************************************************************
*                                                                     *
*                                                                     *
*FUNCTION/OPERATION: THE FUNCTION OF IEHMVSSF IS TO HANDLE VOLUME     *
*MOUNTING OPERATIONS. IT DECIDES WHICH DEVICE(S) THE VOLUME MAY BE    *
*MOUNTED ON AND FOR DIRECT ACCESS DEVICES CAUSES (BY USE OF OPEN TYPE *
*=J) THE ACTUAL MOUNTING OF THE VOLUME.                               *
*                                                                     *
*ENTRY POINTS: IEHMVESF                                               *
*                                                                     *
*INPUT: VOLUME ID; VOLUME DEVICE TYPE                                 *
*                                                                     *
*OUTPUT: POINTER TO DD NAME ON WHICH VOLUME IS OR CAN BE MOUNTED      *
*                                                                     *
*EXTERNAL ROUTINES: NONE                                              *
*                                                                     *
*EXITS: NORMAL - RETURN TO CALLING ROUTINE                            *
*                                                                     *
*EXITS: ERROR - RETURN TO CALLING ROUTINE WITH NOMOUNT BIT ON IN      *
*                ITHEADER                                             *
*                                                                     *
*TABLES/WORK AREAS:  INTERNAL TABLE CONTAINING POINTERS TO DD NAMES   *
*     IN TIOT,MASK OF AVAILABLE DEVICES, AND ADDRESS OF DEVICE    I276*
*     MASK TABLE                                                  I276*
*                                                                     *
*ATTRIBUTES: REUSEABLE                                                *
*                                                                     *
*NOTES: USED IN PROGRAMS IEHLIST,IEHPROGM, IEHMOVE                    *
*
*
*
*
*
*
*
*
*
*
*
*
*              PURPOSE   THE VOLUME MOUNTING ROUTINE CAUSES VOLUMES
*                        TO BE MOUNTED ON DEVICES ALLOCATED TO THE
*                        CALLING PROGRAM.  FOR DIRECT ACCESS MOUNTABLE
*                        DEVICES THE ACTUAL MOUNTING IS ACCOMPLISHED.
*                        FOR OTHER DEVICE TYPES THE ROUTINE RETURNS A
*                        POINTER TO A DDNAME WHICH PROVIDES THE
*                        ALLOCATION FOR A DEVICE ON WHICH THE VOLUME
*                        CAN BE MOUNTED.  THE CALLING PROGRAM CAN THEN
*                        EFFECT THE ACTUAL MOUNTING.
*
*
*              CALLING FORMATS
*
*                   THE CALLING SEQUENCE
*
*        L     R1,ADDRESS OF PARAMETER LIST
*        L     R13,ADDRESS OF SAVE AREA
*        L     R15,ADDRESS OF VOLUME MOUNTING ROUTINE
*        BALR  R14,R15
*
*
*                   PARAMETER LIST
*
*        THE PARAMETER LIST IS COMPOSED OF N ENTRIES:
*              THE 12 BYTE INTERNAL TABLE HEADER
*              AND N-1 17 BYTE VOLUME MOUNTING REQUESTS            DT0I
*
*
*              FOR DESCRIPTION OF ENTRIES SEE THE WRITTEN DOCUMENTATION
*              ON VOLUME MOUNTING ROUTINE.
*
*
***********************************************************************
*
IEHVOLMT CSECT
*A100888,C101600,D102600-102800,104200-104800                    A45128
*A134200,134800,136000,136400,137200,152400,164400,165600,C167000A45128
*A134326,134332,136146,136152,137230                              M3250
* 025000                                                          M0313
*058400,110600-111800,113400-113800,145870-146050,146160-146196,  M0313
*147330-147380,147630-147690 MAKE AN 18 FW SAVE AREA AVAILABLE    M0313
* 144450-144460                                                  S20201
*145870-146050,146169-146196,247330-147380,147630-147690,         M0487
* 180820-180840                                                   M0487
*                                                                A31436
*                                                                A32626
* 095600,096000-096800,097400-097600,098000-098800,099600,100000     CT
*  100004,112000,112400-112800                                       CT
*  IMPROVEMENT OF COMMENTS (RELEASE 20)                              CT
* 092680,092920,114600                                           A29718
* 018800-019000,094170-094175,103400-103600                      A25651
* 113000                                                         A27790
*                                                                A27909
* 022400,082000,145600,179600                                      I276
*C144400                                                       @Z30AAAG
*A094032,111,114086900,920,087300,400,100914,944,948,          @ZM30153
*A109220,500,144384,495,160800,900,164424,428,180620           @ZM30153
*C087400,094031,144495086800,164440-660                        @ZM30153
*D087000,094126                                                @ZM30153
*  LOADING THE DEVICE MASK TABLE AND STORING ITS ADDRESS IN THE    I276
*  INTERNAL TABLE                                                  I276
* 056800-057600,058600-058800,060400-061800,069200-070000,       HEADRS
*  073600-077400,094200,108400-108800,114000,114200-114400,      HEADRS
*  117400,117800,179000                                          HEADRS
*  ADDITION OF HEADERS FOR EASE IN FOLLOWING FLOW                HEADRS
* 018600,081800,092800,093200,094160-094165,094660,094720,           CS
*  103000-103200                                                     CS
*  IMPROVEMENT OF COMMENTS                                           CS
* 144420-144480                                                  A23794
*                                                                00GM0I
*0646135200,137400                                                 7296
*0646091200                                                      PTM404
*2018                                                              UL0H
*                                                                  UL0H
*2357054200,068800,094150,094190,103800,106000,115000
*A109210                                                       @ZA25503
*D109500                                                       @ZA25503
*                             REGISTER NOTATION AND USAGE
*
R0       EQU   0
PARAMPTR EQU   1                        PARAM REG
ACCE     EQU   2                        WORK REG
ACCO     EQU   3                        WORK REG
WORK     EQU   4
TIOT     EQU   4
INLOOP   EQU   5                        LOOP CONTROL REG
SEARCH   EQU   6                        SEARCH INDICATOR REG
IT       EQU   7                        INTERNAL TABLE REG
LOOP     EQU   8                        LOOP CONTROL REG
VMREQUST EQU   9                        BASE FOR VOLUME MOUNT REQUEST
BASE     EQU   10                       BASE FOR IEHMVSSF
WORK2    EQU   11
WORK3    EQU   12
R13      EQU   13                       SAVE REG
RETURN   EQU   14                       RETURN REG
LINK     EQU   15                       ENTRY POINT REG
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R11      EQU   11
R12      EQU   12
R14      EQU   14
R15      EQU   15
*
*
*                             EQUATE STATEMENTS
*
OFFSET0  EQU   0                                                 HEADRS
INITTO1  EQU   1                                                 HEADRS
OFFSET1  EQU   1                                                 HEADRS
ONEBIT   EQU   1                                                 HEADRS
ONEBYTE  EQU   1                                                 HEADRS
OFFSET2  EQU   2                                                 HEADRS
TWO      EQU   2                                                 HEADRS
TWOBITS  EQU   2                                                 HEADRS
TWOBYTES EQU   2                                                 HEADRS
OFFSET3  EQU   3                                                     CS
INITTO4  EQU   4                                                 HEADRS
OFFSET4  EQU   4                                                 HEADRS
VALUE4   EQU   4                                                 A23794
FIVEBITS EQU   5                                                 HEADRS
OFFSET6  EQU   6                                                 HEADRS
OFFSET7  EQU   7                                                     CS
OFFSET8  EQU   8                                                 HEADRS
OFFSET31 EQU   31                                                HEADRS
OFFSET32 EQU   32                                                HEADRS
WORDSIZE EQU   32             32 BITS IN A REGISTER              HEADRS
ADD256   EQU   256
HEXFF    EQU   X'FF'          TEST FOR END OF UCB LUT            HEADRS
UCBVSN   EQU   28             OFFSET TO VOLUME SERIAL NUMBER IN UCB
UCBDEVT  EQU   18             OFFSET TO DEVICE TYPE IN UCB
UCBUNIT  EQU   13          OFFSET TO UNIT NAME IN UCB              DT0I
REMOVABL EQU   X'24'          USED TO TEST UCB FOR REMOVABLE VOLUME: CS
*                              NEITHER RESERVED NOR PERMANENTLY      CS
*                              RESIDENT                              CS
TRKOFLOW EQU   X'40'          USED TO TEST DEVICE TYPE FOR       A31436
*                              TRACK-OVERFLOW OPTION             A31436
DASD     EQU   X'20'          USED TO TEST DEVICE TYPE FOR       A31436
*                              DIRECT-ACCESS DEVICE CLASS        A31436
COMTAB   EQU   16             POINTER TO COMMUNICATIONS TABLE
CMTTCB2  EQU   0              TCB POINTER IN COMMUNICATIONS TABLE
TCBTIOT  EQU   12             OFFSET IN TCB FOR POINTER TO TIOT
TIOTFOUN EQU   24             FOUNDATION LENGTH OF TIOT
TIOTLEN  EQU   0              OFFSET TO TIOT LENGTH FIELD
TIOTDDNA EQU   4              OFFSET TO DDNAME FIELD IN TIOT
TIOTUCB  EQU   14             OFFSET FROM DDNAME IN TIOT TO UCB POINTER
TIOTENTR EQU   20             OFFSET TO ENTRY BLOCK LENGTH IN TIOT
IUCB     EQU   40             OFFSET FROM CVT FOR POINTER TO UCB TABLE
ONEVOL   EQU   X'01'          USE TO INDICATE JFCB IS FOR ONE VOLUME CT
MOUNTREQ EQU   17                      SIZE OF VOL MOUNT REQUEST   DT0I
SLASH    EQU   X'61'                                               DT0I
*
*
*                             ENTRY AND EXTRN STATEMENTS
*
         ENTRY IEHMVESF
*
*
*                             ASSEMBLER USING STATEMENTS
*
         USING IEHMVESF,BASE            ADDRESSABILITY FOR THIS PROGRAM
         USING ITHEADER,PARAMPTR        ADDRESSABILITY FOR THE INTERNAL
*                                      TABLE
         USING REQUEST,VMREQUST         ADDRESSABILITY FOR VOLUME
*                                       MOUNTING REQUEST TABLE
*
***********************************************************************
***********************************************************************
**                                                                   **
**                    ENTRY POINT INTO IEHVOLMT                      **
**                           (IEHMVESF)                              **
**                                                                   **
***********************************************************************
***********************************************************************
*
IEHMVESF SAVE  (14,12),T,ESF
         LR    BASE,LINK               SET UP BASE REGISTER       M0313
         LA    R2,SAVE18F              ADDRESS OF NEW SAVE AREA   M0313
         ST    R2,8(R13)               ADDRESS OF NEW SAVE AREA   M0313
         ST    R13,4(R2)               ADDRESS OF CURRENT SAVE AREM0313
         LR    R13,R2                  CURRENT=NEW                M0313
*
*
*                             DSECTS FOR THE INTERNAL TABLE AND FOR
*                             THE VOLUME MOUNTING REQUEST TABLE FOLLOW
*
*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *
*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *
*
*                   DESCRIPTION INTERNAL TABLE HEADER
ITHEADER DSECT
GENERICC DS    CL1                      GENERIC NAME COUNT
GENERICP EQU   GENERICC                 POINTER TO GENERIC DDNAMES
         DS    CL3
INDICATO DS    CL1                      INDICATOR BYTE
MOUNT    EQU   X'80'                         BIT O     MOUNT INDICATION
SELECT   EQU   X'40'                         BIT 1     SELECTIVE
*                                                           DISMOUNT
OLDVALID EQU   X'20'                         BIT 2     IGNORE OLD
*                                                           REQUESTS
TABLE    EQU   X'10'                         BIT 3     INTERNAL TABLE
*
YESMOUNT EQU   X'01'                         BIT 7     MOUNTED A VOLUME
NOMOUNT  EQU   X'02'                         BIT 6     COULD NOT MOUNT
*                                                           A VOLUME
PTRINTAB EQU   INDICATO                 POINTER TO INTERNAL TABLE
         DS    CL3
LENINTAB DS    CL2                      LENGTH OF INTERNAL TABLE
*
CNTINTAB DS    CL1                      COUNT OF INTERNAL TABLE ENTRIES
*
CNTVMR   DS    CL1                      COUNT OF VOLUME MOUNTING
*                                            REQUESTS
*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *
*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *
*
*
*
*                      DIAGRAM OF INTERNAL TABLE
*
*
*        *--------- 2 BYTES -------* *-------- 2 BYTES --------*
*
*
*        *******************************************************
*        *          LENGTH          *         OFFSET TO        *
*        *        (IN BYTES)        *    DEVICE MASK SIZES     *
*        *******************************************************
*        *     USAGE   *              POINTER TO               *
*        *     CODE    *           DD ENTRY IN TIOT            *
*
*        *                          *                          *
*
*        *                          *                          *
*
*        *                          *                          *
*
*        *******************************************************
*        *    SIZE OF DEVICE MASK   *    SIZE OF DEVICE MASK   *
*        *  (WITHOUT 2321 SECTION)  *                          *
*        *******************************************************
*        *                     DEVICE MASK                     *
*        *     (BITS ARE ON FOR VOLUMES MATCHING DD CARDS)     *
*
*        *                          *                          *
*
*        *                          *                          *
*
*        *                          *                          *
*
*        *******************************************************
*        *      ADDRESS OF SCHEDULER'S DEVICE MASK TABLE       *   I276
*        *          (IEHVOLMT DOES A LOAD OF THE DMT)          *   I276
*        *******************************************************   I276
*
*
*
*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *
*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *
*
*                   DESCRIPTION OF A VOLUME MOUNTING REQUEST
*
REQUEST  DSECT
*
DEVICE   DS    CL4                      DEVICE TYPE
VSN      DS    CL6                      VOLUME SERIAL NUMBER
RTA      DS    CL2                      RELATIVE TABLE ADDRESS
UNIT     DS    CL5                                                 DT0I
DISMOUNT EQU   X'80'                    BIT O INDICATES A SELECTIVE
*                                            DISMOUNT ENTRY
USAGE    EQU   X'80'                    USAGE BIT IN INTERNAL TABLE
*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *
*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *
*
*
IEHVOLMT CSECT
*
***********************************************************************
*                                                                     *
*               TEST WHETHER INTERNAL TABLE IS BUILT                  *
*                                                                     *
***********************************************************************
*
*                                  DECISION
         TM    INDICATO,TABLE           DOES INTERNAL TABLE ALREADY
*                                            EXIST?
         BZ    CREATEIT
*                                            WHICH CALLS IEHITGEN TO
*                                            CREATE INTERNAL TABLE
*
*                                       IF YES, PROCEED TO TEST FOR
*                                            ANY MOUNT REQUESTS
*
***********************************************************************
*                                                                     *
*                       TEST FOR VOLUME MOUNT                         *
*                       OR DISMOUNT REQUESTS                          *
*                                                                     *
***********************************************************************
*
MOUNTDEC DS    0H             DECISION
         CLI   CNTVMR,X'00'            ARE THERE ARY VOLUME COUNTINE
*                                            REQUESTS
         BE    RETURNA                  IF NO, BRANCH TO "RETURNA" TO
*                                            RETURN TO CALLING PROGRAM
*                                       IF YES, PROCEED TO TEST WHETHER
*                                            TO HONOR ANY PREVIOUS
*                                            MOUNTS
*
*
***********************************************************************
*                                                                     *
*               TEST WHETHER TO HONOR PREVIOUS MOUNTS                 *
*                                                                     *
***********************************************************************
*
*                                  DECISION
         TM    INDICATO,OLDVALID        ARE ANY OF THE OLD MOUNTS VALID
*
         BZ    NOTVALID                 IF NO, BRANCH TO "NOTVALID" TO
*                                            ZERO OUT THE USAGE BITS
*                                            IN THE INTERNAL TABLE
*                                       IF YES, PROCEED TO TEST FOR
*                                           SELECTIVE DISMOUNTING
*
*
***********************************************************************
*                                                                     *
*              TEST FOR SELECTIVE DISMOUNT REQUESTS                   *
*                                                                     *
***********************************************************************
*
*                                  DECISION
         TM    INDICATO,SELECT          ARE THERE ANY SELECTIVE
*                                            DISMOUNTS?
*
         BZ    VALHOPE
*                                            MOUNT REQUESTS
*                                       IF YES, PROCEED TO HANDLE
*                                            SELECTIVE DISMOUNTS
*
*
*                                       SELECTIVE DISMOUNTING
*
*                                  INITIALIZE LOOP
         LA    VMREQUST,12(0,PARAMPTR)  ESTABLISH POINTER TO FIRST
*                                            VOLUME MOUNTING REQUEST
         SR    LOOP,LOOP                INITIALIZE LOOP CONTROL
         IC    LOOP,CNTVMR                   REGISTER TO THE NUMBER
*                                            OF VOLUME MOUNTING
*                                            REQUESTS
         L     IT,PTRINTAB              INITIALIZE POINTER TO INTERNAL
*                                            TABLE
*
*
*                                  START LOOP
DISMTLP  DS    0H                       LOOP CONTROLLED BY NUMBER OF
*                                            VOLUME MOUNTING REQUESTS
*
*
*                                  DECISION
         TM    RTA,DISMOUNT             IS THIS VOLUME TO BE DISMOUNTED
*
         BZ    NODISMT                  IF NO, BRANCH TO "NODISMT" TO
*                                            INCREMENT LOOP CONDITION
*                                            AND TEST
*                                       IF YES, PROCEED TO DISMOUNT
*                                            VOLUME
*
*
*                                  PROCESS
         NI    RTA,X'7F'                DROP HIGH ORDER BIT OF RELATIVE
         LH    ACCE,RTA                      TABLE ADDRESS AND PLACE
*                                            IN WORK REGISTER
*
*
*                                  DECISION
         LTR   ACCE,ACCE                IS RELATIVE TABLE ADDRESS ZERO
         BZ    SETRTA                   IF YES, BRANCH TO "SETRTA" TO
*                                            PROCEED WITH LOOP
*                                       IF NO, PROCEED TO ZERO USAG
*                                            BIT IN THE INTERNAL TABLE
*
*
*                                  PROCESS
         LA    ACCO,0(ACCE,IT)          ZERO USAGE BIT IN INTERNAL
        NI    0(ACCO),X'7F'                 TABLE
*
*
*                                  PROCESS
SETRTA   DS    0H                       ZERO RELATIVE TABLE ADDRESS
*                                            AND SET HIGH ORDER BIT ON
         SR    ACCE,ACCE
         STH   ACCE,RTA
         OI    RTA,DISMOUNT
*
*
*                                  PROCESS
NODISMT  DS    0H                       INCREMENT TO NEXT VOLUME ENTRY
         LA    VMREQUST,MOUNTREQ(VMREQUST)                         DT0I
*
*
*                                  LOOP CONTROL
         BCT   LOOP,DISMTLP             HAS LAST VOLUME REQUEST BEEN
*                                            INSPECTED FOR DISMOUNTING
*                                       IF NO, BRANCH TO START OF
*                                            LOOP, "DISMTLP"
*
***********************************************************************
*                                                                     *
*           WHEN FINISH DISMOUNTS BRANCH TO DO ANY MOUNTS             *
*                                                                     *
***********************************************************************
*
         B     MTREQUST                 IF YES, BRANCH TO "MTREQUST" TO
*                                            MOUNT ANY REQUESTS
*
*
*
CREATEIT DS    0H                  ************************************
*                                  *                                  *
*                                  *   THIS BRANCH POINT IS ENTERED   *
*                                  *      WHEN THE INTERNAL TABLE     *
*                                  *          IS TO BE BUILT          *
*                                  *                                  *
*                                  ************************************
*
*
         BAL   RETURN,ENTERHER
         L     RETURN,4(R13)           BASE ADDRESS IS OVERLAID   M0313
         L     BASE,16(RETURN)         RESTORE IT WITH EP ADDRESS M0313
*
*
RETURNTG DS    0H                  ************************************
*                                  *                                  *
*                                  *       RETURN FROM BUILDING       *
*                                  *          INTERNAL TABLE          *
*                                  *                                  *
*                                  ************************************
*
*
         B     ERRETURN(LINK)           WAS AN ERROR CONDITION RETURNED
ERRETURN B     MOUNTDEC                 IF NO, CONTINUE WITH ROUTINE
ERROR    DS    0H                       IF YES,EXIT WITH ERROR CODE
         L     R13,4(R13)              CURRENT SA= OLD SA         M0313
         RETURN (14,12),T,RC=4
*
*
*
***********************************************************************
*                                                                     *
*                    ENTRY POINT TO MOUNT VOLUMES                     *
*                   IF OLD MOUNTS ARE TO BE IGNORED                   *
*                                                                     *
***********************************************************************
*
NOTVALID DS    0H                                                HEADRS
*                                  INITIALIZE LOOP
         L     IT,PTRINTAB              INITIALIZE POINTER TO INTERNAL
*                                            TABLE
         SR    LOOP,LOOP
         IC    LOOP,CNTINTAB            INITIALIZE LOOP CONTROL TO
         LTR   LOOP,LOOP     ANY DD CARDS                          8377
         BZ    VALHOPE       NO DD CARDS                           8377
*                                            NUMBER OF ENTRIES IN
*                                            INTERNAL TABLE
*
*
*                                  START LOOP
NOUSELP  DS    0H                       LOOP CONTROLLED BY NUMBER OF
*                                            ENTRIES IN INTERNAL TABLE
*
*
*                                  PROCESS
         NI    4(IT),X'7F'              CLEAR USAGE BIT FROM TABLE
*                                            ENTRY
*
*
*                                  PROCESS
         LA    IT,4(IT)                 INCREMENT TO NEXT TABLE
*                                            ENTRY
*
*
*                                  LOOP CONTROL
         BCT   LOOP,NOUSELP             HAS LAST TABLE ENTRY USAGE BIT
*                                            BEEN CLEARED
*                                       IF NO, BRANCH TO START OF
VALHOPE  LA    VMREQUST,12(0,PARAMPTR)
         SR    LOOP,LOOP
         IC    LOOP,CNTVMR
         SR    ACCO,ACCO
VOMLP    DS    0H
         STH   ACCO,RTA
         LA    VMREQUST,MOUNTREQ(0,VMREQUST)                       DT0I
         BCT   LOOP,VOMLP
*
*
***********************************************************************
*                                                                     *
*                    PROCESS VOLUME MOUNT REQUESTS                    *
*                                                                     *
***********************************************************************
*
MTREQUST DS    0H                                                HEADRS
*                                  INITIALIZE INNER LOOP "B"
         LA    VMREQUST,12(PARAMPTR)    ESTABLISH POINTER TO FIRST
*                                            VOLUME MOUNTING REQUEST
         SR    LOOP,LOOP                INITIALIZE LOOP CONTROL TO
         IC    LOOP,CNTVMR                   COUNT OF VOLUME MOUNTING
*                                            REQUESTS
LOOPB    DS    0H                       START INNER LOOP B
         LA    SEARCH,0                 LOAD SERIAL SEARCH INDICATOR
*                                  DECISION
         OC    RTA(2),RTA              IS RELATIVE TABLE ADDRESS ZERO
         BC    4,STEPVSN                IF NO, BRANCH TO "SETEPUSN" AND
*                                            OMIT INNER LOOP "C" FOR
*                                            THIS VOLUME MOUNTING
*                                            REQUEST
*                                       IF YES, PROCEED TO SET UP INNER
*                                            LOOP "C"
         LR    RETURN,LOOP
*
*
*
*                                  REGISTERS IN SEARCH FOR DEVICE
*                                       HAVE FOLLOWING MEANING
*
*                                       ACCE -    OUR MASK-1 WORD
*                                       IT   -    PTRINTAB, MASK LENGTH
*                                       WORK -    PTR TO OUR MASK
*                                       WORK2-    ENTRY LENGTH AND 32
*                                       INLOOP    PTR DEVICE MASK TABLE
*                                       LOOP -    NUMBER OF DMT ENTRIES
*                                                 RELATIVE TABLE ADDR.
*                                       LINK -    4  DEC. REG
*                                       ACCO -    DMT MASK- 1 WORD
*                                                 AND MASK
*
DEV      DS    0H
         L     IT,PTRINTAB              GET POINTER INTERNAL TABLE
         LH    INLOOP,0(IT)             GET SIZE OF INTERNAL TABLE I276
         S     INLOOP,FOUR              SUBTRACT FOUR              I276
         L     INLOOP,0(INLOOP,IT)      GET ADDRESS OF DMT         I276
*                                        (STORED AS LAST FULLWORD  I276
*                                         IN THE INTERNAL TABLE)   I276
         LH    WORK2,2(IT)              GET MASK DISPLACEMENT
         LA    WORK,4(WORK2,IT)         POINTER TO MASK
         LH    IT,OFFSET2(WORK2,IT)     SIZE OF MASK                 CS
*                                        (IN INTERNAL TABLE)         CS
         LA    WORK2,8(IT)              DMT ENTRY LENGTH
         LH    LOOP,0(INLOOP)           GET DMT NUMBER OF ENTRIES
         LA    INLOOP,4(INLOOP)         UP DMT PTR PAST HEADER
DMTSRCH  DS    0H
*
*
*                   SEARCH THE DEVICE MASK TABLE
*          FOR THE DEVICE TYPE OF THE VOLUME TO BE MOUNTED
*
*
         CLC   4(4,INLOOP),DEVICE       COMPARE DEVICE TYPES
         BE    DMTFOUND                 EQUAL
         LA    INLOOP,0(WORK2,INLOOP)   UP DMT PTR
         BCT   LOOP,DMTSRCH             LAST OF TABLE
*                                       YES, NOT FOUND
*
*
*             IF CAN'T FIND MATCH IN DMT, SEARCH THE UCBS
*
*
         STM   R4,R8,DMTAREA
         LA    ACCE,DMTENTRY
         USING DMTENTRY,ACCE
         L     R4,CVTPTR
         USING CVT,R4
         L     R4,CVTILK2               POINTER TO UCB POINTER LIST
         DROP  R4
         USING UCB,R5
         SR    R6,R6
         SR    R7,R7
         XC    0(40,ACCE),0(ACCE)       CLEAR DMT ENTRY ENTRY
         MVC   DMTETYPE(4),DEVICE       MOVE IN DEVICE TYPE.
         LA    R8,DMTESRTS              POINTER TO FIRST BIT PATTERN WD
*                                       WORD IN NEW DMT ENTRY.
LOOP1    EQU   *                                               @ZM30153
         SR    R5,R5                   ZERO UCB REG            @ZM30153
         ICM   R5,3,0(R4)              GET UCB PTR             @ZM30153
         BZ    LOOP2                    YES
         CLM   R5,3,FOXES+TWO          END OF UCB TABLE ?      @ZM30153
         BE    END                     BRCH IF YES             @ZM30153
*
**********
*
*        SEARCH FOR MATCH OF DEVICE TYPES IN A UCB AND THE
*         VOLUME MOUNT REQUEST
*         (FOR DIRECT-ACCESS DEVICES, ONLY THE TRACK-OVERFLOW    A31436
*          BIT IS CHECKED IN THE OPTIONS BYTE)                   A31436
*
**********
*
         TM    DEVICE+2,DASD            TEST DEVICE CLASS BYTE   A31436
*                                        OF THE VOLUME MOUNT     A31436
*                                        REQUEST'S DEVICE TYPE   A31436
         BO    TESTOPTS                 IF DIRECT ACCESS, BRANCH A31436
*                                        TO DO SPECIAL TESTS     A31436
         CLC   DEVICE(4),UCBTYP         IS THIS THE TYPE WE ARE LOOKING
*                                       FOR
         BNE   LOOP2                    NO
         B     HAVEMTCH                 HAVE FOUND DEVICE TYPE   A31436
*                                        MATCH                   A31436
TESTOPTS EQU   *                        ** DIRECT-ACCESS ONLY ** A31436
         CLC   DEVICE(1),UCBTYP         TEST FIRST BYTE OF THE   A31436
*                                        DEVICE TYPES            A31436
         BNE   LOOP2                    IF NOT EQUAL, BRANCH     A31436
         CLC   DEVICE+2(2),UCBTYP+2     TEST LAST TWO BYTES OF   A31436
*                                        THE DEVICE TYPES        A31436
         BNE   LOOP2                    IF NOT EQUAL, BRANCH     A31436
         TM    UCBTYP+1,TRKOFLOW        TEST TRACK-OVERFLOW BIT  A31436
*                                        IN UCB'S DEVICE MASK    A31436
         BO    TESTON                   IF ON, BRANCH            A31436
         TM    DEVICE+1,TRKOFLOW        TEST TRACK-OVERFLOW BIT  A31436
*                                        IN REQUEST'S MASK       A31436
*                                        (KNOW UCB'S BIT IS OFF) A31436
         BO    LOOP2                    IF ON, BRANCH (NO MATCH) A31436
         B     HAVEMTCH                 IF OFF, BRANCH (MATCH)   A31436
TESTON   EQU   *                                                 A31436
         TM    DEVICE+1,TRKOFLOW        TEST TRACK-OVERFLOW BIT  A31436
*                                        IN REQUEST'S MASK       A31436
*                                        (KNOW UCB'S BIT IS ON)  A31436
         BNO   LOOP2                    IF OFF, BRANCH (NO MATCH)A31436
HAVEMTCH EQU   *                                                 A31436
*
**********
*
*        HAVE FOUND A UCB WITH THE CORRECT DEVICE TYPE. NOW TURN
*         ON THE UCB'S BIT IN THE MASK OF THE DUMMY DMT ENTRY
*
**********
*
         AL    R6,ONE                   PUT A 1 IN THE BIT PATTERN
*                                        OF THE DUMMY DMT ENTRY
         LH    R0,DMTETYNO
         A     R0,ONE                   ADD ONE TO THE NO. OF DEVICES.
*                                        IN THE DUMMY DMT ENTRY
         STH   R0,DMTETYNO
LOOP2    LA    R7,1(0,R7)               COUNT OF UCB'S CHECKED MOD 32
         CH    R7,THIRTY2               IS THIS THE 32ND DEVICE CHECKED
         BE    LOOP3                    YES
         SLL   R6,1(0)
LOOP25   LA    R4,2(0,R4)               GET POINTER TO NEXT UCB
         B     LOOP1
LOOP3    SR    R7,R7
         ST    R6,0(0,R8)
         LA    R8,4(0,R8)               NEXT BIT PATTERN WORD
         SR    R6,R6                    CLEAR BIT PATTERN REG.
         B     LOOP25
END      LA    R3,31    MAX NUMBER PLUS 1 OF POSITIONS TO SHIFT  PTM404
         SR    R3,R7
         SLL   R6,0(R3)
         ST    R6,0(0,R8)
         DROP  ACCE
         DROP R5
         LH    R4,DMTETYNO
         LTR   R4,R4                    ANY DEVICES FOUND
         LM    R4,R8,DMTAREA
         BZ    DTS                      NO MATCH FOUND IN UCB'S  A29718
*                                        - TAKE NOMOUNT EXIT     A29718
         LA    INLOOP,DMTENTRY
         B     DMTFOUND                 HAVE FOUND MATCH IN UCBS     CS
*                                       - GO CHECK WHETHER CAN       CS
*                                         ISSUE MOUNT ON THE DEVICE  CS
*
*
*          (SPECIAL PROCESSING IF HAVE FOUND MATCH FOR 2321)
*
*
MT2321   L     IT,PTRINTAB
         SR    LINK,LINK
         SR    R3,R3
         IC    LINK,CNTINTAB
         LTR   LINK,LINK                TEST FOR ZERO DD CARDS   A29718
         BZ    DTS                      IF ZERO, TAKE NOMOUNT    A29718
*                                        EXIT                    A29718
**********
*
*        2321 LOOP 1 - CHECK WHETHER THE VOLUME REQUESTED IS ALREADY
*                      MOUNTED IN A BIN
*
**********
AGAIN    L     INLOOP,4(IT)             GET FIRST DD POINTER IN I.T.
         ICM   INLOOP,3,TIOTUCB(INLOOP) GET UCB PTR            @ZM30153
         N     INLOOP,FOXES            ZERO LEFT HALF OF REG   @ZM30153
         TM    2(INLOOP),X'FF'
         LA    LOOP,4(LOOP)             UP RTA FOR TABLE
         BC    12,NOWSUB
TRYAGAIN LA    IT,4(IT)                UP PTR TO NXT DDNAME PTR
         BCT   LINK,AGAIN
**********
*
*       2321 LOOP 2 - CHECK WHETHER THE VOLUME REQUESTED CAN BE
*                      MOUNTED IN A BIN
*
**********
         LTR   R3,R3                    TEST FOR SUBS FOUND IN LOOP 1
         BZ    DTS                      NO SUB - CANNOT MOUNT
         SR    LOOP,LOOP
         L     IT,PTRINTAB              MUST DO A DISMOUNT AND MOUNT
         IC    LINK,CNTINTAB            NUMBER OF INT TBL ENTRIES
         LA    LINK,1(LINK)
AGAIN2   LA    IT,4(IT)                 POINT TO DDNAME PTR
         BCTR  LINK,0
         LTR   LINK,LINK
         BZ    DTS
         L     INLOOP,0(IT)             PTR TO DD NAME
         ICM   INLOOP,3,TIOTUCB(INLOOP) GET UCB ADDR           @ZM30153
         N     INLOOP,FOXES            ZERO LEFT HALF OF REG   @ZM30153
         TM    2(INLOOP),X'FF'          TEST FOR SUB UCB
         LA    LOOP,4(LOOP)             UP RTA FOR TABLE
         BC    12,ANYSUB
         B     AGAIN2
NOWSUB   LA    R3,1(R3)                 INDIXATE SUB FOUND
         CLC   4(6,INLOOP),VSN          CHECK IF REQUIRED VOL PRESENT
         BE    CHKUNIT             GO CHECK IF SPECIFIC UNIT       DT0I
*                                  WAS SPECIFIED                   DT0I
         B     TRYAGAIN
ANYSUB   DS    0H
         TM    OFFSET3(INLOOP),REMOVABL IS THIS VOLUME REMOVABLE?    CS
         BM    AGAIN2                   NO. CANNOT DO MOUNT          CS
*                                        (RESERVED AND PERMANENTLY   CS
*                                         RESIDENT BITS MUST BE OFF  CS
*                                         IN UCB)                    CS
         TM    OFFSET2(INLOOP),SRTEBSVL IS THIS VOLUME SHARABLE? A27909
         BZ    AGAIN2                   YES. CANNOT MOUNT.       A27909
*                                        (SHARABLE IF BIT        A27909
*                                         IS OFF IN UCB)         A27909
         TM    INDICATO,MOUNT           MOUNT REQUESTED
         BZ    ONUSE
CKUNIT2  CLI   UNIT,X'00'          WAS SPECIFIC UNIT SPECIFIED     DT0I
         BE    TMNT2321            BRANCH ON NO                    DT0I
         CLI   UNIT+3,SLASH        WAS BIN NUMB SPECIFIED          DT0I
         BNE   GETMAIN             BRANCH ON NO                    DT0I
         CLC   1(1,INLOOP),UNIT+4  CHECK IF CORRECT BIN NUMB       DT0I
         BE    GETMAIN             BRANCH ON YES                   DT0I
         B     AGAIN2              GO GET ANOTHER UCB              DT0I
GETMAIN  SR    R2,R2                                               DT0I
         IC    R2,1(INLOOP)        PICK UP BIN NUMB AND            DT0I
         SLL   R2,4                CALCULATE MAIN UCB ADDR         DT0I
         LA    R2,56(R2)                                           DT0I
         SR    INLOOP,R2                                           DT0I
         CLC   UNIT(3),13(INLOOP)  IS THIS THE UNIT SPECIFIED      DT0I
         BNE   AGAIN2              NO GET ANOTHER UCB              DT0I
         B     TMNT2321            TRY TO MOUNT                    DT0I
CHKUNIT  CLI   UNIT,X'00'          WAS SPECIFIC UNIT SPECIFIED     DTOI
         BE    ONUSE               BRANCH ON NO                    DT0I
         CLI   UNIT+3,SLASH        CHECK IF BIN NUMB WAS SPECIFIED DT0I
         BNE   BACKUP              BRANCH ON NO                    DT0I
         NI    UNIT+4,X'0F'            TURN OFF ZONE BITS          DT0I
         CLC   1(1,INLOOP),UNIT+4  CHECK IF CORRECT BIN NUMB       DT0I
         BE    BACKUP              BRANCH ON YES TO CHECK UNIT     DT0I
         B     TRYAGAIN            GO CHECK ANOTHER UCB            DT0I
BACKUP   SR    R2,R2                                               DTOI
         IC    R2,1(INLOOP)        PICKUP BIN NUMB                 DT0I
         SLL   R2,4                AND CALCULTTE MAIN              DT0I
         LA    R2,56(R2)           UCB ADDR                        DT0I
         SR    INLOOP,R2                                           DT0I
         CLC   UNIT(3),13(INLOOP)  IS THIS THE SPECIFIC UNIT       DT0I
         BE    ONUSE               BRANCH ON YES                   DT0I
         B     TRYAGAIN            GO CHECK NEXT UCB               DT0I
*
*
*
*              HAVE FOUND MATCH FOR VOLUME'S DEVICE TYPE
*
*        NOW SEARCH THROUGH DEVICE MASKS FOR A UNIT MATCHING A DD
*        CARD'S ALLOCATION. (LOOP 1 - CHECK WHETHER VOLUME IS
*         ALREADY MOUNTED. LOOP 2 - LOOK FOR A VOLUME TO DISMOUNT
*         IN ORDER TO MOUNT THE VOLUME REQUESTED.)
*
*
*
DMTFOUND DS    0H                                                HEADRS
         SR    LOOP,LOOP                SET UP FOR RTA
         LA    LINK,4                   SET UP DECREMENT REG
         CLI   OFFSET7(INLOOP),X'05'    CHECK DEVICE TYPE IN DMT     CS
*                                        ENTRY                       CS
         BE    MT2321                   BRANCH IF 2321               CS
GETMSKS  DS    0H
         L     ACCE,0(WORK)             GET A WORD OF OUR MASK
         L     ACCO,8(INLOOP)           GET DMT MASK
         LA    WORK,4(WORK)             UP BOTH MASK POINTERS
         LA    INLOOP,4(INLOOP)          TO NEXT WORD TO CHECK       CT
*
**********
*
*        'AND' A WORD OF INTERNAL TABLE MASK WITH A WORD OF THE
*         DMT MASK TO FIND MATCHING BITS
*
**********
*
         NR    ACCO,ACCE                AND REGS TO FIND MATCHES
         LA    WORK2,32                 CONTROL FOR LOOP THROUGH     CT
*                                        BITS IN REGISTERS           CT
SHIFTBOT DS    0H                                                    CT
         LTR   ACCE,ACCE                TEST AND                     CT
         SLL   ACCE,ONEBIT               SHIFT OUR MASK REGISTER     CT
*                                        ONE BIT                     CT
         BM    UPRTA                    BRANCH IF BIT ON             CT
*                                        (CORRESPONDS TO A DD CARD)  CT
TESTAN   DS    0H
         LTR   ACCO,ACCO                TEST AND
*
**********
*
*        BRANCH OUT OF LOOP THROUGH MASKS WHEN FIND A BIT ON
*         (HAVE FOUND A UCB MATCHING A DD CARD)
*
**********
*
         SLL   ACCO,ONEBIT              SHIFT MATCH REGISTER         CT
*                                        ONE BIT                     CT
         BM    POSMOUNT                 BRANCH IF BIT ON             CT
*                                        (MEANS UCB MATCHES DD CARD) CT
CONSCH1  DS    0H
         BCT   WORK2,SHIFTBOT           LOOP ON 32 BITS OF ANDED     CT
*                                        REGISTER                    CT
         SR    IT,LINK                  CHECK NUMBER OF WORDS LEFT   CT
*                                        TO CHECK IN MASKS           CT
         BP    GETMSKS                  IF GREATER THAN ZERO, BRANCH CT
         B     BB1(SEARCH)
BB1      B     SS1
         L     IT,PTRINTAB
         B     DTS                      HAVE FAILED TO FIND A        CT
*                                        VOLUME TO DISMOUNT          CT
*                                        - TAKE ERROR EXIT           CT
SS1      LA    SEARCH,4                 LOAD DEVICE TYPE SEARCH INDIC
         B     DEV                      START SECOND LOOP THROUGH    CT
*                                        MASKS - THIS TIME LOOK FOR  CT
*                                        A DEVICE TO DISMOUNT        CT
*                                        RATHER THAN FOR A VOLUME    CT
*                                        WHICH IS ALREADY MOUNTED    CT
UPRTA    DS    0H                       INCREMENT RELATIVE TABLE ADDR
         LA    LOOP,4(LOOP)              TO NEXT DD CARD POINTER     CT
*                                        IN INTERNAL TABLE           CT
         B     TESTAN
POSMOUNT EQU   *
         LR    R0,IT                   SAVE REMAINING LENGTH     A45128
         L     IT,PTRINTAB             START OF INT. TABLE       A45128
         LH    WORK3,2(IT)             MASK DISPLACEMENT         A45128
         LH    IT,2(WORK3,IT)          TOTAL MASK LENGTH         A45128
         SR    IT,R0                   DETERMINE F/W FIELD       A45128
         SLL   IT,4                    OFFSET IN UCBLUT          A45128
         LA    LINK,32                 BITS PER F/W              A45128
         SR    LINK,WORK2              OFFSET IN BITS            A45128
         SLL   LINK,1                  OFFSET IN UCBLUT FIELD    A45128
         AR    LINK,IT                 OFFSET IN UCBLUT          A45128
*                                                                A45128
         L     IT,COMTAB               FIND CVT ADDRESS          A45128
         L     IT,IUCB(IT)             POINTER TO UCBLUT         A45128
         AR    IT,LINK                 ADD IN INDEX            @ZM30153
         ICM   IT,3,0(IT)              GET UCB PTR             @ZM30153
         N     IT,FOXES                ZERO LEFT HALF OF REG   @ZM30153
         LA    LINK,4                  RESTORE LINK              A45128
         B     DEVDEC1(SEARCH)
DEVDEC1  B     S1
**********
*
*        MATCH IN LOOP 2 -
*            TEST WHETHER THIS VOLUME CAN BE DISMOUNTED IN ORDER
*             TO MOUNT THE REQUESTED VOLUME
*            (IF NOT, CONTINUE SEARCHING)
*
**********
D1       DS    0H
         LR    WORK3,IT                 POINTER TO UCB           A45128
         L     IT,PTRINTAB              GET TABLE POINTER
         LA    IT,0(LOOP,IT)
         TM    0(IT),USAGE              TEST IF IN USE
         BO    CONSCH                   IF YES CONTINUE SEARCH
         USING UCB,WORK3                                         A27909
         TM    SRTESTAT,REMOVABL        IS THIS VOLUME REMOVABLE?    CS
         BM    CONSCH                   NO. CANNOT DO MOUNT          CS
*                                        (RESERVED AND PERMANENTLY   CS
*                                         RESIDENT BITS MUST BE OFF  CS
*                                         IN UCB)                    CS
         TM    UCBTBYT3,UCB3TAPE        IS THIS VOLUME A TAPE?   A27909
         BO    SKIPTEST                 YES. DON'T TEST WHETHER  A27909
*                                        SHARABLE. (ALL TAPES    A27909
*                                        ARE NON-SHARABLE)       A27909
         TM    SRTESTAB,SRTEBSVL        IS THIS VOLUME SHARABLE? A27909
         BZ    CONSCH                   YES. CANNOT MOUNT.       A27909
*                                        (SHARABLE IF BIT        A27909
*                                         IS OFF IN UCB)         A27909
SKIPTEST DS    0H                                                A27909
         CLI   UNIT,X'00'              WAS A UNIT ADDR SPECIFIED   DT0I
         BE    TMOUNT                  NO, MOUNT VOLUME            DT0I
         CLC   UCBUNIT(3,WORK3),UNIT   IS THIS THE UNIT SPECIFIED  DT0I
         BE    TMOUNT                  BRANCH ON YES               DT0I
         B     CONSCH                                              DT0I
         DROP  WORK3                                             A27909
**********
*
*        MATCH IN LOOP 1 -
*            TEST WHETHER THE REQUESTED VOLUME IS ALREADY MOUNTED
*
**********
S1       DS    0H
*
         CLI   18(IT),X'08'             UNIT RECORD DEVICE
         BE    ONUSE                    YES, INDICATE MOUNTED
*                                       COMPARE VSN S
         CLC   UCBVSN(6,IT),VSN         VOLUME SERIALS EQUAL
         BE    CHKADR                  YES,CHECK IF MOUNTED ON     DT0I
*                                      CORRECT UNIT                DT0I
CONSCH   DS    0H
         LR    IT,R0
         B     CONSCH1
CHKADR   EQU   *                                                   DT0I
         CLI   UNIT,X'00'               WAS UNIT ADDR SPECIFIED    DT0I
         BE    ONUSE                   BRANCH ON NO                DT0I
         CLC   UCBUNIT(3,IT),UNIT      IS THIS THE UNIT SPECIFIED  DT0I
         BE    ONUSE                   BRANCH ON YES               DT0I
         B     CONSCH                                              DT0I
TMOUNT   DS    0H                  DECISION
         TM    INDICATO,MOUNT           IS MOUNTING BIT ON
         BZ    ONUSE                    IF NO, BRANCH TO "ONUSE" TO
*                                            SET UP USAGE BIT AND
*                                            RELATIVE TABLE ADDRESS
*                                       IF YES, PROCEED TO GET VOLUMES
*                                            MOUNTED
*
*
*                   MOUNT VOLUME BY MEANS OF OPENJ
*                   ******************************
*
*               ONLY DIRECT ACCESS DEVICES ARE MOUNTED
*
         L     ACCO,0(IT)
         ICM   ACCO,3,TIOTUCB(ACCO)    GET UCB ADDR            @ZA25503
         N     ACCO,FOXES              ZERO HIGH BYTES         @ZM30153
         CLI   UCBDEVT(ACCO),X'20'
         BNE   ONUSE
TMNT2321 L     ACCE,0(IT)               POINT TO DDNAME FOR MOUNT
*             (IF NOT, CONTINUE SEARCHING)
         STM   RETURN,PARAMPTR,SAVEREG SAVE REGISTERS PRIOR TO    M0313
*                                      OPEN & CLOSE               M0313
         MVI   JFCB+117,ONEVOL          INDICATE JFCB IS FOR ONE     CT
*                                        VOLUME                      CT
         LA    ACCO,OPENJDCB
         MVC   DCBDDNAM-IHADCB(8,ACCO),0(ACCE)  PUT DDNAME IN DCB    CT
*                                                FOR THE OPENJ       CT
         MVC   JFCB+118(6),VSN          PUT VOLSER IN JFCB FOR THE   CT
*                                        OPENJ                       CT
*                                       ISSUE THE OPENJ MACRO (THE   CT
*                                        OPERATOR WILL RECEIVE AN    CT
*                                        IEC101A MESSAGE TO MOUNT    CT
         OPEN  (OPENJDCB,INPUT),TYPE=J   THE VOLUME)                 CT
*                                       CLOSE THE DCB USED TO    A27790
         CLOSE (OPENJDCB,REREAD)         MOUNT THE VOLUME        A27790
*
         LM    RETURN,PARAMPTR,SAVEREG RELOAD REGISTERS           M0313
*
*
*                TURN ON USAGE BIT IN INTERNAL TABLE
*                  AND INDICATE MOUNT IN ITHEADER
*                ***********************************
*
*
ONUSE    STH   LOOP,RTA                                          HEADRS
         L     IT,PTRINTAB                                       HEADRS
         LA    IT,OFFSET0(IT)           GET DD POINTER           HEADRS
         AR    IT,LOOP                  ADD IN RTA               HEADRS
         LR    LOOP,RETURN                                       HEADRS
         OI    OFFSET0(IT),USAGE        TURN ON USAGE BIT IN     HEADRS
*                                        INTERNAL TABLE          HEADRS
         OI    INDICATO,YESMOUNT        CALCULATE RTA AND        HEADRS
*                                        INDICATE A MOUNT        HEADRS
         B     STEPVSN                  BRANCH TO STEPVSN (STEP  HEADRS
*                                        TO NEXT VOLUME SERIAL   HEADRS
*                                        NUMBER)                 HEADRS
*
*
*
*                      INDICATE VOLUME NOT FOUND
*                      *************************
*
DTS      DS    0H                                                HEADRS
         OI    INDICATO,NOMOUNT         TURN ON NOMOUNT BIT IN   A29718
*                                        ITHEADER                A29718
         B     RETURNA                  RETURN TO CALLER         A29718
*                                        (IGNORE ANY OTHER       A29718
*                                         VOLUME MOUNT REQUESTS) A29718
STEPVSN  DS    0H                       GET VOLUME SERIAL NUMBER POINT
         LA    VMREQUST,MOUNTREQ(VMREQUST)                         DT0I
*
*
*                                  LOOP CONTROL  FOR INNER LOOP "B"
         BCT   LOOP,LOOPB               HAS LAST VOLUME SERIAL NUMBER
*                                            BEEN HANDLED
*                                       IF NO, BRANCH TO "LOOPB" TO
*                                            CONTINUE SEARCH ON VOLUME
*                                            SERIAL NUMBERS
*                                       IF YES, PROCEED TO TEST FOR
*                                            COMPLETION OF OUTER LOOP
*
***********************************************************************
***********************************************************************
**                                                                   **
**                     RETURN TO CALLING PROGRAM                     **
**                                                                   **
***********************************************************************
***********************************************************************
*
RETURNA  DS    0H                                                HEADRS
         L     R13,4(R13)              CURRENT SA= OLD SA         M0313
         RETURN (14,12),T,RC=0
*
***********************************************************************
***********************************************************************
**                                                                   **
**                ENTRY POINT TO BUILD INTERNAL TABLE                **
**                                                                   **
***********************************************************************
***********************************************************************
*
ENTERHER DS    0H                                                HEADRS
         BALR  BASE,R0                  SET UP ADDRESSABILITY
         USING *,BASE                   INFORM ASSEMBLER
*
*
*                                  PROCESS
*                                       ESTABLISH POINTER TO TIOT
         L     ACCE,COMTAB              GET ADDRESS OF COMMUNICATIONS
*                                            TABLE
         L     ACCE,CMTTCB2(ACCE)       GET ADDRESS OF DOUBLE WORD
*                                            TCB POINTERS
         L     ACCE,4(ACCE)             GET TCB ADDRESS
         L     TIOT,TCBTIOT(ACCE)       GET TIOT ADDRESS
         LA    TIOT,TIOTFOUN(TIOT)      STEP TIOT ADDRESS PAST
*                                            FOUNDATION
   CLC   41(3,ACCE),Z
     BE   NOTJOBLB
         CLC   TIOTDDNA(8,TIOT),JOBLIB  CHECK WHETHER FIRST TIOT A32626
*                                        ENTRY IS FOR JOBLIB DD  A32626
         BNE   NOTJOBLB                 IF NO, BRANCH (HAD STEP- A32626
*                                        LIB, NOT JOBLIB, ENTRY  A32626
*                                        IN TCB)                 A32626
    LA   TIOT,TIOTENTR(TIOT)
NOTJOBLB DS    0H                  PROCESS
         LA    SEARCH,0                 SET INDEX TO BYPASS TABLE
*                                       BUILDING LOOP
PRESET   DS    0H                  PROCESS
*                                       (ASSUME PARAMPTR, TIOT, AND
*                                        SEARCH REGISTERS ARE PRESET)
         LR    ACCE,TIOT                SET UP POINTERS FOR NOT
         L     IT,PTRINTAB                   BUILD LOOP
*                                       TIOT AND INTERNAL TABLE
*                                            POINTERS
         SR    ACCO,ACCO                ZERO REGISTER TO COUNT NUMBER
*                                       OF ENTRIES NEEDED IN INT. TABLE
*
***********************************************************************
*                                                                     *
*                    TWO-PASS LOOP TO SEARCH TIOT                     *
*                                                                     *
***********************************************************************
*
SCHTIOT  DS    0H                  PROCESS
         SR    LOOP,LOOP                FETCH TIOT ENTRY LENGTH
*
         IC    LOOP,TIOTLEN(ACCE)       LOOP CONTAINS TIOT LENGTH
*
*
*                                  DECISION
         LTR   LOOP,LOOP                IS THIS LAST ENTRY IN TIOT
         BZ    ENDTIOT                  IF YES, BRANCH TO ENDTIOT TO
*                                            DETERMINE RESULTS OF TIOT
*                                           SCAN
*
*
*                                  DECISION
         CLC   TIOTDDNA(8,ACCE),BLANK   IS DDNAME BLANK
         BE    UPTIOT                   IF YES, BRANCH TO UPTIOT TO
         CLC   TIOTDDNA(8,ACCE),SYSAB   IS DDNAME SYSABEND         2711
         BE    UPTIOT                   YES,BRANCH TO EXCLUDE      2711
*                                          THIS DD ENTRY           2711
         CLC   TIOTDDNA(8,ACCE),SYSUDMP  IS DDNAME SYSUDUMP        4919
         BE    UPTIOT                  YES, BRANCH TO EXCLUDE      4919
*                                      THIS DD ENTRY               4919
         CLC   TIOTDDNA(8,ACCE),STPLIB  IS DDNAME STEPLIB          SL0H
         BE    UPTIOT                   YES, BRANCH TO EXCLUDE     SL0H
*                                       THIS DD ENTRY              SL0H
*                                  PROCESS
         SR    LOOP,LOOP
         IC    LOOP,GENERICC
*
*
*                                  DECISION
         LTR   LOOP,LOOP                IS GENERIC COUNT ZERO
         BZ    ISBUILD                  IF YES, BRANCH TO "ISBUILD" TO
*                                            GENERIC NAME SEARCH
*
*
*                                  INITIALIZE LOOP ON GENERIC NAMES
         L     INLOOP,GENERICP          FETCH GENERIC TABLE ADDRESS
*                                  DECISION
GENLOOP  DS    0H                       IS GENERIC NAME EQUAL TO
         CLC   TIOTDDNA(8,ACCE),0(INLOOP)   DDNAME
         BE    UPTIOT                  IF YES, BRANCH TO UPTIOT TO
*                                            OMIT DDNAME FROM INTERNAL
*                                            TABLE
*
*
*                                  PROCESS
         LA    INLOOP,8(INLOOP)         INCREMENT GENERIC NAME POINTER
*
*
*                                  LOOP CONTROL
         BCT   LOOP,GENLOOP             ARE THERE MORE GENERIC NAMES
*                                       IF YES, BRANCH TO START OF
*                                            LOOP "GENLOOP"
*                                       IF NO, PROCEED WITH TABLE
*                                            BUILDING
ISBUILD  DS    0H             BRANCH ENTRY POINT ENTERED AFTER ALLOWING
*                             FOR GENERIC DDNAMES
*                                  DECISION
         B     DECIDEBL(SEARCH)         IS THIS BUILD LOOP
DECIDEBL B     NBLD                     IF NOT BUILD LOOP, BRANCH TO
*                                            NBLD
         B     BLD                      IF BUILD LOOP BRANCH TO BLD
NBLD     DS    0H                  PROCESS
         SR    LOOP,LOOP                                         A45128
         IC    LOOP,2(ACCE)            NBR OF DEVICES            A45128
         LTR   LOOP,LOOP         IS NUMB&R OF DEVICES 0           M3250
         BNP   UPTIOT            IF YES, NO SPACE NEEDED IN I.T.  M3250
NEXTDEV1 DS    0H                                                A45128
         LA    IT,4(IT)                 INCREMENT INTERNAL TABLE
         LA    ACCO,1(ACCO)             TABLE ADDRESS AND COUNT
*                                       OF ENTRIES NEEDED IN INT. TABLE
         BCT   LOOP,NEXTDEV1           MORE DEVICES              A45128
UPTIOT   DS    0H                  PROCESS
         SR    LOOP,LOOP                                           7296
         IC    LOOP,TIOTLEN(ACCE)  PLACE DD ENTRY LENGTH IN LOOP   7296
         LA    ACCE,0(LOOP,ACCE) UP ACCE TO POINT TO NEXT DD ENTRY 7296
*
         B     SCHTIOT                  BRANCH TO SCHTIOT TO INSPECT
*                                            NEXT TIOT ENTRY
BLD      DS    0H             BRANCH POINT FOR BUILD LOOP
         SR    SEARCH,SEARCH                                     A45128
         SR    INLOOP,INLOOP                                     A45128
         IC    INLOOP,2(ACCE)          NBR OF DEVICES            A45128
         LTR   INLOOP,INLOOP     IS NUMBER OF DEVICES 0           M3250
         BNP   SKIP              IF YES, DON'T FILL I. T.         M3250
NEXTDEV2 DS    0H                                                A45128
         LA    LOOP,TIOTDDNA(ACCE)      PLACE DDNAME ADDRESS IN
         ST    LOOP,4(IT)                    INTERNAL TABLE
         STC   SEARCH,4(IT)            INDIC DEV POSITION        A45128
         LA    SEARCH,1(SEARCH)        FOR NEXT POSITION         A45128
*
*
*                                  PROCESS
         LA    IT,4(IT)                 UPDATE INTERNAL TABLE POINTER
         BCT   INLOOP,NEXTDEV2         MORE DEVICES              A45128
SKIP     DS    0H                                                 M3250
         LA    SEARCH,4                RESTORE SEARCH            A45128
         SR    LOOP,LOOP                                           7296
         IC    LOOP,TIOTLEN(ACCE)  PLACE DD ENTRY LENGTH IN LOOP   7296
         LA    ACCE,0(LOOP,ACCE) UP ACCE TO POINT TO NEXT DD ENTRY 7296
*
         B     SCHTIOT                  BRANCH TO  SCHTIOT TO INSPECT
*                                            NEXT TIOT ENTRY
ENDTIOT  DS    0H             BRANCH POINT ENTERED AT END OF TIOT SEARC
         B     DECBUILD(SEARCH)         IS THIS A BUILD LOOP
DECBUILD B     CHKSPCE                  NO
         B     CHKDUP                   YES
*
***********************************************************************
*                                                                     *
*         COMPUTE AMOUNT OF SPACE NEEDED FOR INTERNAL TABLE           *
*                                                                     *
***********************************************************************
*
CHKSPCE  LA    IT,OFFSET4(IT)           IT = SPACE NEEDED FOR DD
*                                        ENTRIES + 4 BYTE HEADER
         L     LOOP,PTRINTAB            GET ADDRESS OF IT (SHOULD
*                                        BE ZEROED)
         LA    LOOP,OFFSET0(LOOP)       ZERO OUT HIGH-ORDER BYTE
         SR    IT,LOOP                  COMPUTE IT LENGTH SO FAR
         STC   ACCO,CNTINTAB            SAVE NUMBER OF DD ENTRIES
*                                        FOR IT IN ITHEADER
         STH   IT,LENINTAB              SAVE LENGTH OF HEADER AND
*                                        DD PORTION OF IT IN
*                                        ITHEADER
*
*
*                     CALCULATE DEVICE MASK SIZE
*                (THIS MASK WILL BE PLACED IN THE IT,
*                  AND USED TO COMPARE WITH DMT ENTRIES)
*
*
         LA    R0,0(IT)                 LOAD AMOUNT OF CORE NEEDED
         L     ACCE,COMTAB              GET POINTER TO COMTAB
         L     ACCE,IUCB(ACCE)          GET UCB TABLE POINTER
         SR    LOOP,LOOP                LOOP WILL HOLD COUNT OF
*                                        ENTRIES IN UCB LOOK-UP TABLE
         LR    ACCO,ACCE                SAVE ADDRESS OF UCB LUT FOR
*                                        LATER USE
UCBLOOK  TM    OFFSET0(ACCE),HEXFF
         BNO   UPPTR
         TM    OFFSET1(ACCE),HEXFF      HAVE FOUND X'FFFF' AT END
*                                        OF UCB LUT?
         BO    ENDUCB                   IF SO, STOP COUNTING ENTRIES
UPPTR    LA    LOOP,ONEBIT(LOOP)        UP COUNT OF ENTRIES IN UCB LUT
         LA    ACCE,OFFSET2(ACCE)       POINT TO NEXT HALFWORD IN LUT
         B     UCBLOOK             BRANCH TO LOOP
*
*
*             ADJUST THE MASK SIZE IF 2321S ARE SYSGENNED
*
*
ENDUCB   DS    0H
         LR    ACCE,LOOP         NO. OF BITS FOR PART ONE OF MASK  1415
*
*
*                                      ACCO HAS ADDRESS OF UCB LUT
*
         SR    SEARCH,SEARCH           USE SEARCH TO KEEP COUNT OF THE
*                                         NUMBER OF 2321
         SR    LOOP,LOOP               USE LOOP FOR THE BASE REG IN
*                                         REFERANCING THE UCB
         SR    R0,R0                   USE R0 TO KEEP NUMBER OF UCB
*                                         PTRS AT END OF TIOT
         USING UCB,LOOP
NEXTUCB  CLC   0(2,ACCO),Z              CHECK FOR 2 BYTES OF ZERO
         BE    NOT2321                    BRANCH ON YES
         SR    LOOP,LOOP               ZERO WORK REG           @ZM30153
         ICM   LOOP,3,0(ACCO)           GET UCB ADDR           @Z30AAAG
         TM    UCBTYP+2,X'20'
         BC    12,NOT2321
         CLI   UCBTYP+3,X'05'          IS THIS A 2321 UCB        S20201
         BNE   NOT2321                  NO,NEXT UCB LUT ENTRY    S20201
****                                                             A23794
*                                                                A23794
*     DON'T COUNT ALTERNATE CHANNEL POINTERS TO UCBS (FOR 2321S) A23794
*                                                                A23794
****                                                             A23794
         LA    WORK2,UCBPTRS            USE WORK2 TO POINT TO    A23794
*                                        2321 POINTERS (KEPT IN  A23794
*                                        WORK SPACE)             A23794
         LTR   SEARCH,SEARCH            TEST NUMBER OF 2321S     A23794
*                                        FOUND                   A23794
         BZ    IS2321                   IF ZERO, COUNT THIS      A23794
*                                        POINTER                 A23794
         LR    WORK3,SEARCH             USE WORK3 TO BCT THROUGH A23794
*                                        2321 POINTERS           A23794
CHKPTR   CLM   LOOP,3,0(WORK2)         TEST UCB POINTERS       @ZM30153
         BE    NOT2321                  IF EQUAL, HAVE AN ALTER- A23794
*                                        NATE CHANNEL POINTER    A23794
*                                        (DON'T COUNT IT)        A23794
         LA    WORK2,TWOBYTES(WORK2)    POINT TO NEXT 2321 PTR.  A23794
         BCT   WORK3,CHKPTR             LOOP THROUGH 2321 PTRS.  A23794
****
*
*                      INCREMENT COUNT OF 2321S
*
****
IS2321   LA    SEARCH,OFFSET1(SEARCH)   ADD ONE TO NUMBER OF 2321S
         CH    SEARCH,MAXCOUNT          TEST NUMBER OF 2321S     A23794
         BH    ITERROR                  IF > 30, DON'T HAVE      A23794
*                                        ENOUGH WORK SPACE       A23794
*                                        (TAKE ERROR EXIT)       A23794
         STH   LOOP,0(WORK2)            SAVE THIS 2321 POINTER   A23794
*                                        IN WORK SPACE           A23794
NOT2321  LA    ACCO,2(ACCO)             UPDATE UCB POINTER
         TM    0(ACCO),X'FF'            IS THIS THE END OF THE UCB
*                                         LOOK UP TABLE
         BC    12,NEXTUCB                IF NO TAKE ONE OF THE BRANCHES
         TM    1(ACCO),X'FF'
         BC    12,NEXTUCB
*                                         FALL THROUGH IF YES
         DROP  LOOP
HAVE2321 LTR   SEARCH,SEARCH           WERE THERE ANY 2321
         BZ    NORMAL
         LA    ACCE,2(ACCE)   2 BYTES SEPARATING 2 PARTS OF MASK   1415
         LR    ACCO,SEARCH
         LR    R0,SEARCH
         LR    SEARCH,ACCE             SAVE PREVIOUSLY CALCULATED VALUE
         SR    ACCE,ACCE                  FOR INTERNAL TABLE
         M     ACCE,TEN                 MULTIPLY NUMBER OF 2321S
*                                        BY 10 TO GET NUMBER OF
*                                        BIN POINTERS (RESULT IS
*                                        IN REGISTER ACCO)
         AR    ACCO,SEARCH              GET TOTAL BITS IN MASK
         A     R0,ONE
         SRL   R0,1                    DIVIDE BY 2
         SLL   R0,2                    MUL BY 4
*                                       (ROUND NUMBER OF 2321S
*                                        TO NEXT MULTIPLE OF 4)
*
         LR    ACCE,ACCO
*
*
*                COMPUTE SIZE OF DEVICE MASK IN BYTES,
*                     ROUNDED TO NEXT FULLWORD
*
*
NORMAL   LA    ACCE,31(ACCE)            ROUND TOTAL MASK LENGTH    1415
         SRL   ACCE,5                    AND CONVERT TO FULL WORDS 1415
         SLL   ACCE,2                    LENGTH                    1415
         LR    ACCO,ACCE
         AR    ACCO,IT
         LA    ACCO,OFFSET8(ACCO)       ADD FOUR BYTES FOR MASK    I276
*                                        LENGTH AND FOUR BYTES     I276
*                                        FOR DMT ADDRESS           I276
*
***********************************************************************
*                                                                     *
*               GET CORE SPACE FOR THE INTERNAL TABLE                 *
*                                                                     *
***********************************************************************
*
         AR    R0,ACCO                  R0 HAS NUMBER OF BYTES TO
*                                      GETMAIN FOR IT             M0313
         LR    LOOP,PARAMPTR           SAVE PTR TO IT HEADER      M0313
         ST    R0,SAVER0               SAVE GETMAIN SIZE          M0313
*                                      ACROSS GETMAIN             M0313
*
         GETMAIN R,LV=(R0)              ISSUE GETMAIN
         L     R0,SAVER0               RESTORE REGISTER           M0313
*
*
*                       ZERO OUT INTERNAL TABLE
*
*
         LR    WORK2,R0                 GET LENGTH OF INTERNAL TABLE
         LR    WORK3,PARAMPTR           GET ADDRESS OF INTERNAL TABLE
         LH    INLOOP,MAXIXC            PUT 255 IN INLOOP - MAXIMUM
*                                        LENGTH FOR EXECUTE INSTRUCTION
ZEROTABL C     WORK2,MAXSIZE
         BNH   LASTXC
         EX    INLOOP,XCINSTR           ZERO OUT 256 BYTES OF INTERNAL
*                                        TABLE
         S     WORK2,MAXSIZE
         LA    WORK3,ADD256(WORK3)
         B     ZEROTABL
LASTXC   BCTR  WORK2,0                  SUBTRACT ONE FROM LENGTH TO
*                                        PREPARE FOR EXECUTE INSTR.
         EX    WORK2,XCINSTR            ZERO OUT INTERNAL TABLE
*
*
*                PUT HEADER VALUES IN INTERNAL TABLE,
*                      LOAD DEVICE MASK TABLE,                     I276
*             AND TURN BIT ON FOR INTERNAL TABLE BUILT
*
*
         STH   R0,OFFSET0(PARAMPTR)     SAVE GETMAIN SIZE IN
*                                        FIRST HALFWORD OF INTER-
*                                        NAL TABLE
         STH   IT,OFFSET2(PARAMPTR)     SAVE ((# OF DDS X 4) + 4)
*                                        IN SECOND HALFWORD
         LA    SEARCH,OFFSET31(SEARCH)  COMPUTE SIZE OF MASK
         SRL   SEARCH,FIVEBITS           WITHOUT BITS FOR 2321
         SLL   SEARCH,TWOBITS            BIN POINTERS (IF NO
*                                        2321S,SEARCH = 0)
         STH   SEARCH,OFFSET0(IT,PARAMPTR)
*                                       SAVE SEARCH AFTER DD PTR.
*                                        SPACE IN INTERNAL TABLE
         STH   ACCE,OFFSET2(IT,PARAMPTR)
*                                       SAVE MASK SIZE IN SECOND
*                                        HALFWORD AFTER DD SPACE
*                                        IN INTERNAL TABLE
         LR    WORK2,R0                 GET SIZE OF INTERNAL TABLE I276
         AR    WORK2,PARAMPTR           ADD ADDRESS OF INTERNAL    I276
*                                        TABLE                     I276
         STM   R0,PARAMPTR,SAVER0      SAVE REGS ACROSS LOAD      M0313
         LOAD  EP=DEVMASKT              LOAD DEVICE MASK TABLE     I276
         S     WORK2,FOUR               GET ADDRESS OF LAST WORD   I276
*                                        IN INTERNAL TABLE         I276
         ST    R0,0(WORK2)              STORE DMT ADDRESS IN LAST  I276
*                                        WORD OF INTERNAL TABLE    I276
         LM    R0,PARAMPTR,SAVER0      RESTORE REGISTERS          M0313
         IC    ACCE,INDICATO-ITHEADER(LOOP)
*                                       TEMPORARILY SAVE INDICATO
         ST    PARAMPTR,PTRINTAB-ITHEADER(LOOP)
*                                       STORE ADDRESS OF INTERNAL
*                                        TABLE IN ITHEADER
         STC   ACCE,INDICATO-ITHEADER(LOOP)
*                                       RESTORE INDICATO BYTE
         LR    PARAMPTR,LOOP            RETURN ITHEADER ADDRESS
*                                        TO REGISTER 1
         LA    SEARCH,INITTO4           SET INDEX TO ENTER TABLE
*                                        BUILDING LOOP (TO PUT
*                                        POINTERS TO DDS IN
*                                        INTERNAL TABLE)
*
         OI    INDICATO,TABLE           INDICATE INTERNAL TABLE
*                                        BUILT
*
***********************************************************************
*                                                                     *
*                        RETURN TO TIOT LOOP                          *
*               TO PUT DD POINTERS IN INTERNAL TABLE                  *
*                                                                     *
***********************************************************************
*
         B     PRESET
*
***********************************************************************
*                                                                     *
*       CHECK DDS IN INTERNAL TABLE FOR DUPLICATE UCB POINTERS        *
*                  (IF FIND DUPLICATE, ADJUST COUNT)                  *
*                                                                     *
***********************************************************************
*
CHKDUP   DS    0H
         L     ACCE,PTRINTAB            SET UP FOR SEARCH OF
         LA    ACCE,4(ACCE)
         SR    LOOP,LOOP                     DUPLICATIONS
         IC    LOOP,CNTINTAB
         LTR   LOOP,LOOP               IF NO DD CARDS OMIT SEARCH
         BZ    JUMPOUT
         BCT   LOOP,LOOPOUT
         B     JUMPOUT
LOOPOUT  DS    0H             START OUTER LOOP
*                                  PROCESS
*                                       SET UP FOR INNER LOOP
         LA    ACCO,4(ACCE)             SET POINTER TO COMPARE DDNAME
         LR    INLOOP,LOOP              SET COUNT FOR NUMBER OF
*                                       ITERATIONS
LOOPIN   DS    0H                  DECISION
         SR    IT,IT                                             A45128
         IC    IT,0(ACCE)              DEV.ENTRY POSITION        A45128
         SLL   IT,2                    MULTIPLY WITH 4           A45128
         A     IT,0(ACCE)              FOR CORRECT UCB           A45128
         SR    VMREQUST,VMREQUST                                 A45128
         IC    VMREQUST,0(ACCO)        DEV.ENTRY POSITION        A45128
         SLL   VMREQUST,2              MULTIPLY WITH 4           A45128
         A     VMREQUST,0(ACCO)        FOR CORRECT UCB           A45128
*
         CLC   TIOTUCB(2,IT),TIOTUCB(VMREQUST)
*
         BE    EQUCB                    IF EQUAL GO TO "EQUCB" TO MOVE
*                                            TABLE UP
*                                       IF NOT EQUAL PROCEED WITH
*                                            SEARCH
*
*
*                                  PROCESS
         LA    ACCO,4(ACCO)             INCREMENT DDNAME POINTER
*
*
*                                  DECISION
         BCT   INLOOP,LOOPIN            WAS THIS LAST COMPARE OF
*                                            INNER LOOP
*                                       YES, LOOP TO LOOPIN TO CONTINUE
*                                            SEARCH
*                                       NO.PROCEED TO TEST OUTER LOOP
X1       DS    0H                  PROCESS
         LA    ACCE,4(ACCE)             INCREMENT DDNAME POINTER
*
*
*                                  DECISION
         BCT   LOOP,LOOPOUT             LAST OUTER LOOP COMPARED
*
*                                       NO, BRANCH TO "LOOPOUT" TO
*                                            CONTINUE SEARCH
*
***********************************************************************
*                                                                     *
*                        BUILD THE DEVICE MASK                        *
*                        IN THE INTERNAL TABLE                        *
*                                                                     *
***********************************************************************
*
JUMPOUT  DS    0H             REGISTER USAGE FOR SETTING UP MASK-
*                                       ACCE IS MASK REG
*                                       LOOP IS UCB POINTER
*                                       INLOOP IS COUNT REG
*                                       LINK CONTAINS A ONE
*                                       ACCO IS MASK POINTER
         SR    R0,R0
         L     IT,PTRINTAB
         SR    ACCE,ACCE
         LA    INLOOP,32
         LA    LINK,1
         SR    ACCO,ACCO               ZERO WORK REG           @ZM30153
         ICM   ACCO,3,2(IT)            GET UCB ADDR            @ZM30153
         L     LOOP,COMTAB              GO TO LOC 16
         L     LOOP,IUCB(LOOP)          GET POINTER TO UCB TABLE
TESTUCBS TM    OFFSET0(LOOP),HEXFF
         BNO   SHIFT
         TM    OFFSET1(LOOP),HEXFF      HAVE FOUND X'FFFF' AT END
*                                        OF UCB LUT?
         BO    ENDMASK                  IF SO, STOP CHECKING ENTRIES
SHIFT    DS    0H
         SLL   ACCE,ONEBIT              SHIFT DEVICE MASK REGISTER
         CLC   OFFSET0(TWOBYTES,LOOP),Z TEST THE UCB POINTER
         BE    NOTEUCB                  IF ZERO, DON'T LOOK FOR MATCH
*
*
         SR    WORK,WORK                GET NUMBER OF TABLE ENTRIES
         IC    WORK,CNTINTAB
      LTR   WORK,WORK            ARE THERE ANY DD  CARDS
     BZ    NOTEUCB           NO  OMIT   TEST
         L     IT,PTRINTAB              POINTER TO INTERNAL TABLE
COMHERE  DS    0H                                                A45128
         TM    4(IT),X'FF'             UCB FOUND BEFORE          A45128
         BO    ANYMORE                 YES  CONTINUE             A45128
         SR    WORK2,WORK2             NO  COMPARE               A45128
         IC    WORK2,4(IT)             DEV.ENTRY POSITION        A45128
         SLL   WORK2,2                 MULTIPLY WITH 4           A45128
         A     WORK2,4(IT)             CORRECT UCB ADDRESS       A45128
         SR    WORK3,WORK3             ZERO WORK REG           @ZM30153
         ICM   WORK3,3,TIOTUCB(WORK2)   GET UCB ADDR           @ZM30153
*        TM    2(WORK3),X'FF'           IS IT A MAIN UCB
*        BC    1,MAIN                     BRANCH ON YES
*        SR    WORK2,WORK2
*        IC    WORK2,1(WORK3)           CALCULATE THE ADDRESS OF THE
*        SLL   WORK2,4                  MAIN UCB
*        LA    WORK2,56(WORK2)
*        SR    WORK3,WORK2
*        CH    WORK3,0(LOOP)            IS THIS UCB PTR EQUAL TO THE
*                                         UCB PTR IN THE UCB LOOK UP
*                                         TABLE
*        BE    EQUCBS                     BRANCH ON YES
*        B ANYMORE                                             @ZM30153
MAIN     CLC   TIOTUCB(2,WORK2),0(LOOP)
         BE    EQUCBS                   EQUAL
ANYMORE  LA    IT,4(IT)
         BCT   WORK,COMHERE             LAST OF UCBS TO COMPARE
         B     NOTEUCB                  NO EQUAL UCBS
EQUCBS   DS    0H                                                A45128
         OR    ACCE,LINK               TURN ON MASK BIT
         L     WORK3,PTRINTAB
         AR    WORK3,R0
         LA    WORK3,0(WORK3)
         LA    IT,0(IT)
         OI    4(IT),X'FF'             THIS UCB HAS BEEN FOUND   A45128
         CR    WORK3,IT
         BE    EQREG
         XC    4(4,WORK3),4(IT)
         XC    4(4,IT),4(WORK3)
         XC    4(4,WORK3),4(IT)
EQREG    DS    0H
         LR    WORK3,R0
         LA    R0,4(WORK3)
NOTEUCB  L     IT,PTRINTAB              RELOAD IT POINTER
*
*
         BCT   INLOOP,UPUCB
         ST    ACCE,4(IT,ACCO)
         LA    ACCO,4(ACCO)
         SR    ACCE,ACCE
         LA    INLOOP,32
UPUCB    LA    LOOP,2(LOOP)
         B     TESTUCBS
ENDMASK  DS    0H
         LA    LINK,32
         CR    LINK,INLOOP
   BE   SKIPST
         SLL   ACCE,0(INLOOP)
         ST    ACCE,4(IT,ACCO)
SKIPST   DS    0H
         LA    LINK,0
         SR    WORK,WORK
         L     IT,PTRINTAB             GET PNTR TO INTERNAL TABLE
         IC    WORK,CNTINTAB           AND NUMBER OF TABLE ENTRIES
         LTR   WORK,WORK               CHECK FOR ZERO
         BZ    GETOUT
REPEAT   NI    4(IT),X'00'             TURN OFF UCB FOUND BIT
         LA    IT,4(IT)                GET NEXT TABLE ENTRY
         BCT   WORK,REPEAT
*
***********************************************************************
*                                                                     *
*                    RETURN TO REGULAR PROCESSING                     *
*                     (INTERNAL TABLE IS BUILT)                       *
*                                                                     *
***********************************************************************
*
GETOUT   DS    0H
*
*
*
         SR    R15,R15
         BR    RETURN
*
***********************************************************************
*                                                                     *
*           ERROR EXIT: ERROR WHILE BUILDING INTERNAL TABLE           *
*                                                                     *
***********************************************************************
*
ITERROR  LA    R15,VALUE4               INDICATE ERROR CONDITION A23794
*                                       - TOO MANY POINTERS TO   A23794
*                                         2321S IN UCB LOOK-UP   A23794
*                                         TABLE (ONLY HAVE WORK  A23794
*                                         SPACE FOR 30)          A23794
         BR    RETURN                                            A23794
EQUCB    DS    0H             BRANCH POINT WHEN TWO UCB POINTERS
*                             ARE EQUAL
         SR    IT,IT
         IC    IT,CNTINTAB
         S     IT,ONE
         STC   IT,CNTINTAB
         LH    IT,LENINTAB
         S     IT,FOUR
         STH   IT,LENINTAB
         LA    IT,0(ACCO)
         LR    VMREQUST,INLOOP
         BCT   VMREQUST,LPHERE
         B     TTOK
LPHERE   DS    0H
         MVC   0(4,IT),4(IT)
         LA    IT,4(IT)
         BCT   VMREQUST,LPHERE
         BCT   INLOOP,TOK
TTOK     BCT   LOOP,X1
         B     JUMPOUT
TOK      BCT   LOOP,LOOPIN
         B     JUMPOUT
*
*
*              ASSEMBLER DC,DS STATEMENTS AND DCB MACROS
*              *****************************************
*
*
Z        DC    X'000000'
         DC    X'00'
*
ONE      DC    F'1'
BLANK    DC    CL8'        '
SYSAB    DC    CL8'SYSABEND'                                       2711
SYSUDMP  DC    CL8'SYSUDUMP'                                       4919
STPLIB   DC    CL8'STEPLIB '                                       SL0H
JOBLIB   DC    CL8'JOBLIB  '                                     A32626
*
FOUR     DC    F'4'
FOXES    DC    X'0000FFFF'             USED TO 'AND' OUT REG   @ZM30153
EIGHT    DC    F'8'
TEN      DC    F'10'
SIXTEEN  DC    F'16'
MAXSIZE  DC    F'256'                   MAXIMUM LENGTH TO USE WITH
*                                        EXECUTE
MAXIXC   DC    H'255'
XCINSTR  XC    OFFSET0(0,WORK3),OFFSET0(WORK3)
THIRTY2  DC    H'32'
MAXCOUNT DC    H'30'                    30 2321 UCB PTRS. MAX.   A23794
*                                                                A23794
*                    15 WORD WORK SPACE FOR 2321S                A23794
*          (HOLDS MAXIMUM OF 30 POINTERS TO UCBS FOR 2321S)      A23794
*                                                                A23794
UCBPTRS  DC    30H'00'                                           A23794
ZAPAREA  DC    5F'0'                    SPACE AVAILABLE FOR
*                                        SUPERZAP FIXES
DMTAREA  DS    5F
SAVER0   EQU   DMTAREA+8                                          M0313
SAVEREG  EQU   DMTAREA                                            M0313
DMTENTRY DS    10F                      DYNAMICALLY BUILT DMT AREA.
DMTETYNO EQU   DMTENTRY+2               NO. OF DEVICES IN BIT PATTERN
DMTETYPE EQU   DMTENTRY+4               DEVICE TYPE CODE
DMTESRTS EQU   DMTENTRY+8               BIT PATTERN
*                                           TABLE
*
*
         DS    0F
JFCB     DC    44X'04'
         DC    8C' '
         DC    12XL10'00'
OPENJDCB DCB   DSORG=PS,MACRF=R,EXLST=VOLMLIST
         DS    0F
VOLMLIST DC    X'87'
         DC    AL3(JFCB)
SAVE18F  DS    18F                                                M0313
         DCBD  DSORG=PS
*
*
*                           DUMMY SECTIONS
*                           **************
*
*
CVT      DSECT
         CVT
UCB      DSECT
         IEFUCBOB
         END
