 TITLE 'IEHMVSRK-READS UNLOADED REC-IEHMOVE LOAD MOD ETA,ETL,ERA,ESX'
*FUNCTION/OPERATION: THIS MODULE READS UNLOADED RECORDS AND           *
*RECONSTRUCTS THE ORIGINAL DATA SET.                                  *
*IF USER LABEL PROCESSING WAS REQUESTED, AT END-OF-DATA OR VOLUME     *
*SWITCH TIME THIS MODULE WILL GETMAIN IF NECESSARY FOR A LABEL        *
*SAVEAREA. THE SAVED LABELS WILL THEN BE PASSED TO IEHMVSSN TO BE     *
*OUTPUT DURING DATA SET WRAP-UP.                                      *
*DATA SET                                                             *
*ENTRY POINTS: IEHMVERK                                               *
*INPUT: ONE PHYSICAL RECORD; OPEN DCB OF UNLOAD DATA SET              *
*OUTPUT: LOGICAL RECORDS IN UNLOADED FORMAT TO UNLOAD DATA SET        *
*EXTERNAL ROUTINES: NONE                                              *
*EXITS-NORMAL RETURN TO CALLING ROUTINE                               *
*ERRORS: I/O ERROR                                                    *
*TABLES/WORK AREAS: BREAD TABLE-CONTAINS POINTERS TO OUTPUT RECORDS.  *
*ATTRIBUTES: REUSEABLE                                                *
*NOTES: NONE                                                          *
*
*
*
*
*                   BREAD
*
*
*
*
IEHMVSRK CSECT
*3050 000200-000400,004600                                         UL0H
*
IEHMVERK SAVE  (14,12),T,SRK-OCT-14
*
         IEHPRE  ,TFC
*
         LR    REG5,REG15               SET UP BASE
         USING IEHMVERK,REG5            INFORM ASSEMBER
         USING IEHMVV,REG12             INFORM ASSEMBER OF IEHMVV DSECT
*
*
         LTR   REG0,REG0           IS THIS FIRST TIME IN
         BM    FIRSTIN             YES
*
*
         EJECT
*
*
*
*                   SECTION FOR EQU'S
*
*
*
*
*                        REGISTERS
REG0     EQU   0                        FIRST TIME IN SWITCH
REG1     EQU   1                        PASSED PARAMETER
REG2     EQU   2                        BREAD DSECT
REG3     EQU   3                        LENGTH
REG4     EQU   4                        POINTER TO OUT AREA
REG5     EQU   5                        BASE REGISTER
REG6     EQU   6
REG7     EQU   7
REG8     EQU   8
REG9     EQU   9         USED MAINLY FOR     B80       IO
REG10    EQU   10                            M80       CUR80
REG11    EQU   11                            L80       ENDIO
REG12    EQU   12
REG13    EQU   13
REG14    EQU   14
REG15    EQU   15
*
*
*
*
         EJECT
*
*
*
*
*                   MAIN STEM
*
*
END      EQU   X'01'               END OF FILE INDICATOR
TTR      EQU   X'80'               TTR INDICATOR
RTNFIRST DS    0H
         L     REG2,IEHMVV60            SET UP PERMANENT WORK AREA
         USING BREAD,REG2                    POINTER
         LR    REG4,REG1                SET UP REG4 AS POINTER TO
*                                            RECORD BUILD AREA TO
*                                            PRESERVE REG1
*
         LA    REG3,3                   GO TO ROUTINE MOVE TO GET
         BAL   REG14,MOVE                    AN  LLI TO KNOW LENGTH
*                                            OF RECORD
         TM    2(REG1),END         IS THIS END OF FILE
         BO    MEOD                    YES RETURN EOF INDICATION
*
*
*
         SR    REG3,REG3           GET LL OF RECORD TO BE MOVED
         IC    REG3,0(REG1)
         SLL   REG3,8
         IC    REG3,1(REG1)
*
         TM    2(REG1),TTR         IS THERE A TTR IN RECORD
         BZ    *+8                      NO, DO NOT ADD 3 TO LENGTH
         LA    REG3,3(0,REG3)           YES, ADD 3 TO LENGTH OF RECORD
*
         BAL   REG14,MOVE               GO TO MOVE ROUTINE TO GET
         SR    REG15,REG15                   BASIC RECORD
THISISRT DS    0H
*
         IEHPOST  ,TFC
*
*
*
         RETURN (14,12),T,RC=(15)
         EJECT
*
*
*
*                   MOVE ROUTINE - TO MOVE NUMBER OF BYTES GIVEN
*                                  IN REG3 TO OUT AREA
*
*
MOVE     DS    0H
         LM    REG9,REG11,B80           GET CURRANT POINTERS FOR
*                                            80 BYTE AREA
*
XX       DS    0H
         SR    REG11,REG10              CALCULATE NUMBER OF BYTES
*                                            LEFT IN THIS 80 BYTE
*                                            BUFFER
         CR    REG11,REG3               ARE THERE ENOUGH BYTES IN BUF
         BL    HAVEGET                    NO, GO TO HAVEGET
*                                         YES, MOVE TO OUT AREA
         LA    REG9,0(REG10,REG3)       SET UP NEXT MID BUFFER POINTER
         ST    REG9,M80
         LA    REG9,0(REG4,REG3)        UP OUTAREA POINTER
*
         BCTR  REG3,0                   SET UP LENGTH FOR MOVE
         EX    REG3,M                   MOVE CARACTERS TO OUT AREA
*
         LR    REG4,REG9                SET UP OUT AREA POINTER
         BR    REG14                    RETURN TO CALLER
*
*
*
*
*
HAVEGET  SR    REG3,REG11               CALCULATE LENGTH TO BE LEFT
*                                            TO MOVE AFTER THIS MOVE
         LA    REG9,0(REG4,REG11)       UP OUTPUT POINTER
         LTR   REG11,REG11
         BZ    NOEX
    BCTR   REG11,0    SET  UP  LENGTH  FOR MOVE
         EX    REG11,M                  MOVE CHARACTERS TO OUT AREA
*
NOEX     LR    REG4,REG9                OUTPUT POINTER
         B     E80                      GO TO ROUTINE TO GET NEXT
*                                            80 BYTE BUFFER
RTF80    DS    0H                  RETURN FROM ROUTINE TO GET AREA
*                                            REG9 CONTAINS BUF POINTER
         LA    REG10,2(0,REG9)          SET UP POINTER TO FIRST
*                                           BYTE TO BE USED IN BUFFER
         LA    REG11,80(0,REG9)         SET UP POINTER TO LAST OF
*                                            BUFFER
         STM   REG9,REG11,B80           STORE POINTERS
         B     XX                       RETURN TO TOP OF ROUTINE
*
*
*
*
*
*
*
*
         EJECT
*
*
*
*                   ROUTINE TO INITIALIZE FOR FIRST ENTRY
*
FIRSTIN  DS    0H
*                                                                  UL0H
* ACTIVATE USER INPUT TRAILER LABEL EXIT IF REQUIRED               UL0H
*                                                                  UL0H
         CLI   UDCBITLE,DEACTIVE        IS ITLE INACTIVE           UL0H
         BE    NEXTCODE                 YES,CONTINUE               UL0H
         MVC   UDCBITLE(4),XXITLE       NO, SET UP ITLE LIST ADDR  UL0H
NEXTCODE DS    0H                                                  UL0H
*                                                                  UL0H
         L     REG2,IEHMVV10            GET POINTER TO WORK AREA
         LA    REG3,1
         STM   REG2,REG3,IEHMVV60       SET UP PS
         LA    REG8,28(0,REG2)
         ST    REG8,IEHMVV10            RESET PERMANENT WORK
         LM    REG8,REG9,IEHMVV30       GET DECB
         L     REG9,12(0,REG9)          GET IO AREA
         LR    REG11,REG9               GET END IO
         LR    REG10,REG9               GET CUR80 POINTER
         AH    REG11,62(0,REG8)              AREA POINTER
         STM   REG9,REG11,IO            SET UP IO AREA POINTERS
         LR    REG11,REG10                   POINTERS
         STM   REG9,REG11,B80
         SR    REG0,REG0                ZERO FIRST TIME IN SWITCH
         B     RTNFIRST                 RETURN
*
*
*
*
*
*
*
*
         EJECT
*
*
*
*                   SECTION TO  GET 80 BYTE AREAS
*
*
*
E80      DS    0H
         LM    REG9,REG11,IO            GET IO AREA POINTERS
*
         LA    REG10,80(0,REG10)        UP CUR80 BUFFER POINTER TO
         ST    REG10,CUR80                   NEXT AREA
         CR    REG10,REG11              ARE THERE MORE 80 BYTE BUFFERS
*
         BL    RT80                     NO, RETURN RECORD
*
         LM    REG10,REG11,IEHMVV30     GET FROM DCB AND DECB
        LA     REG11,0(REG11)   CLEAR HIGH ORDER BYTE
         ST    REG9,CUR80               USE IO AREA AS CUR80 BUFFER
*
         MVC   57(3,REG10),SYNAD        SET UP SYNAD
         MVC   33(3,REG10),EOD               AND EOD
     LR   REG7,REG1
*
    LR   REG6,REG14
         READ  (REG11),SF,(REG10),(REG9),'S',MF=E
         CLI   IEHMVV74+4,X'FF'         I/O ERR IN U.L. EXIT RTN   UL0H
         BE    IOERRMSG                 YES, TELL USER             UL0H
ERMSGRET DS    0H                                                  UL0H
*
         CHECK (REG11)                  CHECK THE READ
*
     LR  REG14,REG6
     LR   REG1,REG7
*
YY       EQU   *
         LH    REG6,0(0,REG9)           GET PS NUMBER
         LH    REG7,IEHMVV60+6
         LA    REG7,1(0,REG7)           PS  OK
         STH   REG7,IEHMVV60+6     IF REG7 OVER X'8000'            7185
         LH    REG7,IEHMVV60+6      SET TO NEGATIVE                7185
         CR    REG7,REG6
         BNE   BOOM
         B     RTF80                    RETURN
*
RT80     LR    REG9,REG10               SET UP CURRANT BUF POINTER
         B     YY
*
BOOM     LA    REG15,12                 INDICATE ERROR IN PS
         B     THISISRT                      AND RETURN
*
*
*
*
MSYNAD   LA    REG15,8                  INDICATE IO ERROR
         B     THISISRT                      AND RETURN
MEOD     LA    REG15,4                  INDICATE EOD
         B     THISISRT                      AND RETURN
         EJECT
*
*
*                   SECTION FOR CONSTANTS
*
*
*
         ENTRY IEHMVERK
M        MVC   0(1,REG4),0(REG10)
*
SYNAD    DC    AL3(MSYNAD)
EOD      DC    AL3(MEOD)
*                                                                  UL0H
XXITLE   DC    X'03'                   INPUT TRAILER LABEL         UL0H
         DC    AL3(ITLR)               EXIT ROUTINE EXLIST ENTRY   UL0H
*                                                                  UL0H
*  USER  INPUT  TRAILER  LABEL  EXIT  ROUTINE                      UL0H
*                                                                  UL0H
ITLR     DS    0H                                                  UL0H
OFFSET1  EQU  ITLR-IEHMVERK                                        UL0H
         LA    REG8,OFFSET1            SET UP                      UL0H
         SR    REG15,REG8              ADDRESSABILITY              UL0H
         LR    REG5,REG15              FOR THE EXIT ROUTINE        UL0H
         L     REG8,0(0,REG1)           GET ADDR OF LABEL READ     UL0H
*                            FOR LATER MOVE TO USER                UL0H
         LTR   REG8,REG8                ARE USER LABELS PRESENT    UL0H
         BNE   IOERR                    YES. CHECK IF OK           UL0H
*                                                                  UL0H
NOLABEL  DS    0H                                                  UL0H
         MVI   UDCBITLE,X'00'           DEACTIVATE LABEL EXIT      UL0H
         MVI   UDCBOTLE,X'00'           DEACTIVATE LABEL EXIT      UL0H
         OI    IEHMVV20+2,X'40'        SET MIDABORT BIT TO TELL    UL0H
*                                      VESN THIS IS END OF ACTION  UL0H
         SR    REG15,REG15              NO, RETURN CODE 0 TO EOV   UL0H
*                                         TO IGNORE ADDITIONAL LAB UL0H
         BR    REG14                    RETURN TO EOV              UL0H
*                                                                  UL0H
IOERR    DS    0H                                                  UL0H
*                                                                  UL0H
*                                                                  UL0H
         TM    8(REG1),X'80'           IO ERR FLAG ON IN PARM LIST UL0H
         BC    14,TRKAVAIL             NO, GO SEE IF HAVE U.L. TRK UL0H
*                                                                  UL0H
LABERR   DS    0H                                                  UL0H
         OI    IEHMVV74+4,X'FF'         YES, SET FLAG TO OUTPUT    UL0H
*                                        MSG AFTER OPEN/CLOSE/EOV  UL0H
         B     NOLABEL                 RETURN TO EOV PROCESSING    UL0H
*                                                                  UL0H
TRKAVAIL DS    0H                                                  UL0H
         CLI   IEHMVV72+10,X'FF'        DA+NLT FLAG ON             UL0H
*                            INDICATES NO U.L. TRACK ALLOCATED     UL0H
         BNE   CORAVAIL                 NO PROCESS LABELS          UL0H
*                                                                  UL0H
*  OUTPUT MESSAGE - NO USER LABELS MOVE/COPIED.  NO LABEL TRACK.   UL0H
*                                                                  UL0H
         MVI   IEHMVV72+14,X'FF'        TELL CLOSE TO OUTPUT MSG   UL0H
         B     NOLABEL                 GO RETURN CODE=ZERO         UL0H
*                                                                  UL0H
CORAVAIL DS    0H                                                  UL0H
         CLC   IEHMVV72(4),ALLZEROS     CORE OBTAINED FOR LABELS   UL0H
         BNE   INITIAL                  YES, INITIALIZE POINTERS   UL0H
         GETMAIN R,LV=640              GET CORE FOR LABELS         UL0H
         ST    REG1,IEHMVV72           SAVE POINTER TO GOTTEN CORE UL0H
INITIAL  DS    0H                                                  UL0H
         CLC   0(4,REG8),UTL1DEF       1ST LABEL IN SET            UL0H
         BNE   SAVLABEL                NO, BYPASS 1ST LABEL SETUP  UL0H
         MVC   IEHMVV72+4(4),IEHMVV72   SET POINTER TO LABEL SAVLOCUL0H
         MVI   IEHMVV72+12,X'00'        CLEAR LABEL COUNTER        UL0H
*                                                                  UL0H
SAVLABEL DS    0H                                                  UL0H
         L     REG1,IEHMVV72+4          GET ADDRESS OF CURRENT     UL0H
*                                         LABEL SAVEAREA           UL0H
         MVC   0(80,REG1),0(REG8)       SAVE LABEL IN GOTTEN CORE  UL0H
         LA    REG1,80(REG0,REG1)       UPDATE POINTER TO NEXT LO- UL0H
         ST    REG1,IEHMVV72+4            CATION IN LABEL SAVEAREA UL0H
         SR    REG8,REG8                 UPDATE                    UL0H
         IC    REG8,IEHMVV72+12           LABEL                    UL0H
         LA    REG8,1(REG8)                COUNTER                 UL0H
         STC   REG8,IEHMVV72+12             BY ONE                 UL0H
         LA    REG15,4                  RETURN CODE OF 4 TO EOV    UL0H
*                                         TO GET ADDITIONAL LABELS UL0H
         BR    REG14                    RETURN TO EOV              UL0H
*                                                                  UL0H
*                                                                  UL0H
MSG01    DS    0H                                                  UL0H
         LINK  EP=IEHMVESU                                         UL0H
         BR    REG9                    RETURN TO ITLR AND EOV      UL0H
*                                                                  UL0H
*                                                                  UL0H
ALLZEROS DC    1F'0'                                               UL0H
UTL1DEF  DC    CL4'UTL1'                                           UL0H
DEACTIVE EQU   X'00'                                               UL0H
SAVE14   DS    F                       AREA TO SAVE EOV RETURN     UL0H
*                                                                  UL0H
MOVER    MVC   1(1,REG1),0(REG3)       EXECUTED MOVE MESSAGE INST  UL0H
*                                                                  UL0H
*                                                                  UL0H
         DS    0F                                                  UL0H
AMSG1    DC    AL1(MSG2-MSG1-1)        INPUT TRLR LBL I/O ERROR    UL0H
         DC    AL3(MSG1)               MESSAGE LENGTH, ADDRESS     UL0H
IOERRMSG DS    0H                                                  UL0H
         NI    IEHMVV74+4,X'00'        RESET I/O ERROR SWITCH      UL0H
         ST    REG14,SAVE14             SAVE EOV RETURN ADDRESS    UL0H
         L     REG3,AMSG1               GET ADDRESS OF MESSAGE     UL0H
         IC    REG2,AMSG1               GET LENGTH OF MESSAGE      UL0H
         LR    REG1,REG12               GET ADDR OF PRINT BUFFER   UL0H
         MVI   0(1),X'40'               BLANK OUT                  UL0H
         MVC   1(120,1),0(1)             PRINT BUFFER          R   UL0H
         EX    2,MOVER                  MOVE MESSAGE TO BUFFER      L0H
         BAL   REG9,MSG01               GO TO MESSAGE WRITER        L0H
         L     REG14,SAVE14             RELOAD EOV RETURN ADDRESS   L0H
         B     ERMSGRET                 RETURN TO INLINE PROCESSINGUL0H
*                            SECTION FOR DSECTS
*
BREAD    DSECT
IO       DS    F                       BEGINNING OF I/O AREA
CUR80    DS    F                       CURRENT 80 BYTE AREA
ENDIO    DS    F                       END OF I/O AREA
B80      DS    F                       START OF CURRENT 80 AREA
M80      DS    F                       RELATIVE POINTER
L80      DS    F                       END OF CURRENT 80 AREA
         IEHMVV
         ORG   IEHMVV70                                            UL0H
         IEHDCBXL                                                  UL0H
IEHMVMRK CSECT                                                     UL0H
*******************************************************************UL0H
*                                                                  UL0H
*                       MESSAGE CSECT FOR IEHMVSRK                 UL0H
*                                                                  UL0H
*******************************************************************UL0H
*                                                                  UL0H
MSG1     DC    CL41'IEH333I PERM I/O ERROR WHILE READING USER'     UL0H
         DC    CL42' INPUT TRAILER LABELS. NO MORE LABELS WILL'    UL0H
         DC    CL14' BE PROCESSED.'                                UL0H
*                                                                  UL0H
MSG2     DC    X'00'                                               UL0H
*                                                                  UL0H
         END
