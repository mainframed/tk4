 TITLE 'IEHMVSSM-VARIABLE REC DEBLOCKING FOR IEHMOVE-LOAD MODULE ESM'
*TITLE -IEHMVSSM
*FUNCTION/OPERATION: THIS MODULE WILL MOVE OR COPY DATASETS WHICH ARE *
*PDS OR PHYSICAL SEQUENTIAL THAT HAVE VARIABLE RECORD FORMAT WITHOUT  *
*KEYS. THIS MODULE READS RECORDS AND BLOCKS OR DEBLOCKS THE RECORDS SO*
*THEY ARE EQUAL TO OR LESS THAN OUTPUT BLOCKSIZE.                     *
*IF USER LABEL PROCESSING WAS REQUESTED, AT END-OF-DATA OR VOLUME     *
*SWITCH TIME THIS MODULE WILL GETMAIN IF NECESSARY FOR A LABEL        *
*SAVEAREA. THE SAVED LABELS WILL THEN BE PASSED TO IEHMVSSN TO BE     *
*OUTPUT DURING DATA SET WRAP-UP.                                      *
*ENTRY POINTS: IEHMVESM ONLY ENTRY POINT                              *
*INPUT: AT ENTRY TO THIS MODULE REG 13 POINTS TO SAVEAREA AND REG 12  *
*POINTS TO COMMUNICATION TABLE                                        *
*OUTPUT: SAME AS INPUT                                                *
*EXTERNAL ROUTINES: IEHMVSSR- PDS SUBROUTINE TO GET DIRECTORY ENTRIES.*
*                   IEHMVLSU- MESSAGE WRITER.                         *
*EXITS - NORMAL IEHMVSSN - IEHMVSTG                                   *
*ERRORS: IEHMVSSN                                                     *
*TABLES/WORK AREAS: IEHMVV - COMMUNICATION TABLE                      *
IEHMVSSM CSECT
*C057000,073800                                                  A48797
*A059210-059320                                                   21919
* 017300-01732                                                   A27711
*1050025800,067400                                                 7615
*1050000200,090400                                                 UL0H
* 021320,028120,028200,035520,038686,091649,091677,091698        A36069
*A086900                                                         A52025
REG0     EQU   0
REG1     EQU   1
REG2     EQU   2
REG3     EQU   3
REG4     EQU   4
REG5     EQU   5
REG6     EQU   6
REG7     EQU   7
REG8     EQU   8
REG9     EQU   9
BAS10    EQU   10
BAS11    EQU   11
BAS12    EQU   12
RETN     EQU   14
LINK     EQU   15
KEY      EQU   16
DSORG    EQU   26
EODAD    EQU   33
RECFM    EQU   36
SYNAD    EQU   57
BLKSZ    EQU   62
LRECL    EQU   82
VARBLK   EQU   X'50'
VARID    EQU   X'40'
IEHMVESM SAVE  (14,12),T,ESM-9-23-65-TEST
         USING PRINT,1
         USING IEHMVESM,BAS10
         USING WORK,BAS11
         USING IEHMVV,BAS12
         ENTRY   IEHMVESM
         SPACE 3
         LR    BAS10,LINK
         IEHPRE (14,1),TF
*                                                                  UL0H
* ACTIVATE USER INPUT TRAILER LABEL EXIT IF REQUIRED               UL0H
*                                                                  UL0H
         CLI   UDCBITLE,DEACTIVE        IS ITLE INACTIVE           UL0H
         BE    NEXTCODE                 YES,CONTINUE               UL0H
         MVC   UDCBITLE(4),XXITLE       NO, SET UP ITLE LIST ADDR  UL0H
NEXTCODE DS    0H                                                  UL0H
*                                                                  UL0H
         LA    REG0,144
         GETMAIN R,LV=(0)               GET CORE FOR WORK AREA
         LR    BAS11,REG1
         MVI   0(BAS11),X'00'           CLEAR WORK AREA TO
         MVC   1(143,BAS11),0(BAS11)      ZEROS
         L     REG2,IEHMVV30
         MVC   SYNAD(3,REG2),BSMSYN+1  MOVE IN FROM SYNAD EXIT ADR VS0H
         L     REG2,IEHMVV31
         MVC   SYNAD(3,REG2),BSMSYN+1  MOVE IN TO SYNAD EXIT ADR   VS0H
         L     REG2,IEHMVV30            PLACE EODAD EXIT ADDR IN DCB
         MVC   EODAD(3,REG2),BPMEOD+1                              VS0H
         L     REG2,IEHMVV30
         LH    REG3,BLKSZ(0,REG2)
         STH   REG3,BSZIN
         L     REG2,IEHMVV31
         LH    REG3,BLKSZ(0,REG2)
         STH   REG3,BSZOUT
*                                  CHECK RECFM BEFORE DSORG
         SR    REG7,REG7
         L     REG2,IEHMVV30
         TM    RECFM(REG2),X'10'        IS INPUT DATA BLOCKED
         BZ    NOBLK                    NO
         OI    SWTH1,X'01'              SET INDICATOR FOR BLOCKED INPUT
NOBLK    L     REG2,IEHMVV31
         TM    RECFM(REG2),X'10'        IS OUTPUT TO BE BLOCKED
         BZ    NBLKOT
         OI    SWTH1,X'10'              SET INDICATOR FOR BLOCK OUTPUT
NBLKOT   TM    DSORG(REG2),X'40'        IS THIS A BSAM DATASET
         BO    NEWMBR
         SPACE 3
PDS      SR    REG2,REG2
GTMBR    LA    REG3,CCHHR               GET NAME OF MEMBER TO BE MOVED
         LINK  EP=IEHMVESR
         B     BACK(15)
BACK     B     ALSCHK                   GO TO CHECK FOR ALIAS NAME
         B     ALDONE
NEWMBR   LH    REG0,BSZIN            COMPUTE THE SIZE OF
         AH    REG0,BSZOUT                BUFFER NEEDED EQUALS BLKSIZE
         ST    REG0,BUFSZ              SAVE BUFFER SIZE (IN+OUT)   VS0H
         L     REG2,IEHMVV30           GET FROM DCB ADDR           VS0H
         CLI   16(REG2),X'00'          KEYLEN=0                    VS0H
         BE    GETIT                   YES, GO GET CORE            VS0H
         SR    REG1,REG1                                           VS0H
         IC    REG1,16(REG2)           INSERT KEYLENGTH            VS0H
         AR    REG0,REG1               ADD INPUT KEYLEN TO BUFLEN  VS0H
         AR    REG0,REG1               ADD OUTPUT KEYLEN TO BUFLEN VS0H
         ST    REG0,BUFSZ              SAVE CALCULATED BUFLEN      VS0H
         LR    REG1,REG0               SET UP EVEN/ODD PAIR        VS0H
         SR    REG0,REG0               FOR DIVISION                VS0H
         LA    REG2,8                  LOAD CONSTANT OF 8          VS0H
         DR    REG0,REG2               DIVIDE BUFSZ BY 8           VS0H
         LTR   REG0,REG0               REMAINDER EQUAL ZERO        VS0H
         BNZ   FIXIT                   NO, GO MAKE SURE IT DOES    VS0H
GETIT    L     REG0,BUFSZ              YES,RELOAD AMT NEEDED     A27711
         GETMAIN R,LV=(0)                                        A27711
         ST    REG1,BUFLOC              SAVE LOCATION OF BUFFER
         ST    REG1,BLKBUF              LL  FOR BLOCKED RECORDS
         TM    IEHMVV30+4,X'01'
         BO    HASBUF
WCHREAD  TM    SWTH1,X'11'        ARE BOTH INPUT AND OUTPUT BLOCKED
         BO    BLKINOUT             YES
         TM    SWTH1,X'01'        IS INPUT BLOCKED
         BO    BLKIN                YES
         TM    SWTH1,X'10'        IS OUTPUT BLOCKED
         BO    BLKOUT               YES
         EX    0,*
FIXIT    LA    REG2,8                  LOAD CONSTANT OF 8          VS0H
         SR    REG2,REG0               FIND DIFF BETW 8 & REMAINDR VS0H
         A     REG2,BUFSZ              ADD DIFF TO BUFSZ TO MAKE   VS0H
         ST    REG2,BUFSZ              MULTIPLE OF 8, & GETMAIN    VS0H
         B     GETIT                   GO TO GET THE CORE          VS0H
         SPACE 3
BLKIN    LA    REG7,4                  THE BLKIN ROUTINE HANDLES
         SR    REG6,REG6           DATA SETS THAT THE INPUT DATA SET
         L     REG8,BLKBUF         HAS BLOCKED RECORDS AND THE OUTPUT
         L     REG2,IEHMVV30       DATA SET HA UNBLOCKED VARIABLE
         L     REG1,IEHMVV30+4     RECORDS
         LA    REG3,0(0,REG8)
         BAL   REG9,READ01
         CLI   IEHMVV74+4,X'FF'         I/O ERR IN U.L. EXIT RTN   UL0H
         BNE   BLKINA                  NOT ON - CONTINUE           UL0H
         BAL   REG5,IOERRMSG      WRITE I/O ERR MSG FOR U.L.     A36069
BLKINA   DS    0H
         L     REG1,IEHMVV30+4
         BAL   REG9,CHECK01
         LH    REG7,0(0,REG3)      TOTAL AMOUNT IN CORE
*                                      BLKIN2 WRITES BLOCKED RECORD OUT
BLKIN2   MVC   LL02(2),4(REG3)     ONE LOGICAL RECORD AT A TIME.
         LH    REG6,LL02           LENGTH OF LOGICAL RECORD
         LA    REG5,4(0,0)
         AH    REG5,LL02           LENGTH OF SINGLE BLOCK RECORD
         STH   REG5,LL01
         MVC   0(2,REG3),LL01
         L     REG2,IEHMVV31
         L     REG1,IEHMVV31+4
         BAL   REG9,WRIT01
         L     REG1,IEHMVV31+4
         BAL   REG9,CHECK01
         AR    REG3,REG6
         SR    REG7,REG6               ROUTINE LOOPS TO BLKIN2 UNTIL
         C     REG7,FOUR           BLOCKED RECORD IS COPIED AND THEN
         BH    BLKIN2              BRACHES TO BLKIN TO READ ANOTHER
         BE    BLKIN               RECORD
         EX    0,*
         SPACE 3
CLEAR    LA    REG1,IEHMVV00   THIS ROUTINE CLEARS THE PRINT       7615
         MVI   0(1),X'40'          BUFFER TO BLANKS SO THE MESSAGE
         MVC   1(120,1),0(1)       MAY BE MOVED INTO THE BUFFER
         BR    REG4
         SPACE 3
BLKOUT   LA    REG7,4                   THE BLKOUT ROUTINE READS
         SR    REG6,REG6            UNBLOCKED LOGICAL RECORDS AND
         L     REG8,BLKBUF          BLOCKS THEM TO THE SIZE SPECIFIED
RDLOOP   L     REG2,IEHMVV30        BY BLOCKSIZE OF THE OUTPUT DCB
         L     REG1,IEHMVV30+4
         LA    REG3,0(REG6,REG8)        THE ROUTINE LOOPS IN RDLOOP
         BAL   REG9,READ01          UNTIL THE MAXIMUM NUMBER OF LOGICAL
         CLI   IEHMVV74+4,X'FF'         I/O ERR IN U.L. EXIT RTN   UL0H
         BNE   SHFTD1             NOT ON? CONTINUE               A36069
         BAL   REG5,IOERRMSG      WRITE I/O ERR MSG FOR U.L.     A36069
SHFTD1   L     REG1,IEHMVV30+4    REC'S THAT 'LL FIT  THE OUTP   A36069
         BAL   REG9,CHECK01         BLOCKSIZE HAVE BEEN READ AND THEN
SHFTD    MVC   LL02(2),4(REG3)      WRITES OUT A BLOCKED RECORD.
         MVC   LL01(4),0(REG3)
         MVC   0(4,REG3),SAVDTA
         LR    REG5,REG7
         AH    REG7,LL02
         AH    REG6,LL02
         CH    REG7,BSZOUT
         BH    SETRITE
         BE    RITAMT
         BAL   REG9,SAVEDATA
         B     RDLOOP
         SPACE 3
SAVEDATA LA    REG3,0(REG6,REG8)        SAVE THE LAST FOUR BYTES OF
         MVC   SAVDTA(4),0(REG3)    RECORD TO BE RESTORED AFTER NEXT
         BR    REG9                 READ
         SPACE 3
SETRITE  STH   REG5,0(0,REG8)           ADJUST THE LENGTH BLOCKS OF
         L     REG2,IEHMVV31        RECORD AND WRITE BLOCKED RECORD
         L     REG1,IEHMVV31+4
         LR    REG4,REG3            SAVE POINTER TO LOGICAL RECORD
         LR    REG3,REG8            NOT WRITTEN
         BAL   REG9,WRIT01
         L     REG1,IEHMVV31+4
         BAL   REG9,CHECK01
         BAL   REG9,SHIFT
         LA    REG7,4
         B     SHFTD
         SPACE 3
BLKINOUT DS    0H                                                  VS0H
         BAL   REG9,CHCKVBS            CHECK FOR VBS DATA SET      VS0H
         L     REG8,BLKBUF             THE BLKINOUT ROUTINE READS  VS0H
         SR    REG6,REG6            BLOCKED VARIABLE RECORDS AND
         LA    REG7,4               REBLOCKS THE RECORDS TO  COMFORM
INOUTLP  L     REG2,IEHMVV30        TO THE BLOCKSIZE OF THE OUTPUT
         L     REG1,IEHMVV30+4      DATA SET
         LA    REG3,0(REG6,REG8)        THE ROUTINE READS RECORS UNTIL
         BAL   REG9,READ01          DATA IN CORE IS GREATER THAN THE
         CLI   IEHMVV74+4,X'FF'         I/O ERR IN U.L. EXIT RTN   UL0H
         BNE   INOUTLP1                NOT ON - BRANCH             UL0H
         BAL   REG5,IOERRMSG      WRITE I/O ERR MSG FOR U.L.     A36069
INOUTLP1 DS    0H                                                  UL0H
         L     REG1,IEHMVV30+4      OUTPUT BLOCKSIZE  ADJUST FOR
         BAL   REG9,CHECK01         MAXIMUM LENGTH TO BE WRITTEN WHICH
SHIFTED  MVC   LL01(4),0(REG3)      IS LESS THAN OUTPUT BLOCKSIZE
         MVC   LL02(2),4(REG3)
         MVC   0(4,REG3),SAVDTA       DATA THAT IS NOT WRITTEN OUT IN
         LR    REG5,REG7           RECORD IS SHIFTED TO THE START OF
         LH    REG6,LL01
         S     REG6,FOUR           IN BACK OF IT
         AR    REG7,REG6
         LR    REG6,REG7               AMOUNT IN CORE
         S     REG6,FOUR               DISPLACEMENT TO NEXT INPUT
         CH    REG7,BSZOUT
         BH    SETUPWRT
         BE    AMTRITE
         BAL   REG9,SAVEDATA
         B     INOUTLP
CHCKVBS  L     REG2,IEHMVV30           GET FROM DCB ADDRESS        VS0H
         TM    36(REG2),X'58'          RECFM=VBS                   VS0H
         BC    14,0(REG9)              NO, RETURN TO BLKINOUT      VS0H
         MVC   EODAD(3,REG2),VBSEOD+1  MOVE IN VRE EODAD RTN ADDR  VS0H
READMORE L     REG3,BLKBUF             YES, LOAD BUFFER ADDRESS    VS0H
         L     REG2,IEHMVV30           GET FROM DCB ADDRESS        VS0H
         L     REG1,IEHMVV30+4         GET FROM DECB ADDRESS       VS0H
         BAL   REG9,READ01             BALR TO READ A BLOCK        VS0H
         CLI   IEHMVV74+4,X'FF'         I/O ERR IN U.L. EXIT RTN   UL0H
         BNE   READMOR1                NOT ON - CONTINUE           UL0H
         BAL   REG5,IOERRMSG      WRITE I/O ERR MSG FOR U.L.     A36069
READMOR1 DS    0H                                                  UL0H
         L     REG1,IEHMVV30+4         GET FROM DECB ADDRESS       VS0H
         BAL   REG9,CHECK01            GO CHECK THE READ           VS0H
WRITEVBS L     REG3,BLKBUF             LOAD BUFFER ADDRESS         VS0H
         L     REG2,IEHMVV31           LOAD TO DCB ADDRESS         VS0H
         L     REG1,IEHMVV31+4         LOAD TO DECB ADDRESS        VS0H
         BAL   REG9,WRIT01             BALR TO WRITE A RECORD      VS0H
         L     REG1,IEHMVV31+4         LOAD TO DECB ADDRESS        VS0H
         BAL   REG9,CHECK01            GO CHECK THE WRITE          VS0H
         B     READMORE                GO READ SOME MORE           VS0H
         SPACE 3
SETUPWRT AH    REG5,LL02
         CH    REG5,BSZOUT
         BH    SETUP01
         AH    REG3,LL02
         SH    REG6,LL02
         MVC   LL02(2),4(REG3)
         B     SETUPWRT
SETUP01  SH    REG5,LL02
         LR    REG4,REG3
         LR    REG3,REG8
         STH   REG5,0(0,REG3)
         L     REG2,IEHMVV31
         L     REG1,IEHMVV31+4
         BAL   REG9,WRIT01
         L     REG1,IEHMVV31+4
         BAL   REG9,CHECK01
         BAL   REG9,SHIFT
         LA    REG7,4
         B     SHIFTED
         SPACE 3
SHIFT    SR    REG7,REG5                THE SHIFT ROUTINE SHIFT DATA
         A     REG7,FOUR            LOCATION OF BUFFER SO THAT THE
         STH   REG7,LL01
         MVC   0(4,REG4),LL01       NOT WRITTEN OVER TO THE START
         LR    REG6,REG7            LOGICAL RECORD WILL BE THE FIRST
SHFT01   LA    REG5,256             RECORD OF THE NEXT BLOCKED RECORD
         CR    REG5,REG6            WRITTEN
         BNH   SHFT02
         LR    REG5,REG6
SHFT02   BCTR  REG5,0
         EX    REG5,MOVEDATA
         LA    REG5,1(0,REG5)
         AR    REG3,REG5
         AR    REG4,REG5
         SR    REG6,REG5
         BP    SHFT01
         SR    REG6,REG6
         LR    REG3,REG8
         LA    REG5,4
         BR    REG9
MOVEDATA MVC   0(1,REG3),0(REG4)
         SPACE 3
AMTRITE  LR    REG3,REG8                SET UP POINTERS FOR WRITE
         STH   REG7,0(0,REG3)       WHEN AMOUNT IN CORE IS EQUAL TO
         L     REG2,IEHMVV31        OUTPUT BLOCKSIZE
         L     REG1,IEHMVV31+4
         BAL   REG9,WRIT01
         L     REG1,IEHMVV31+4
         BAL   REG9,CHECK01
         B     BLKINOUT
RITAMT   LR    REG3,REG8                SET UP POINTERS FOR WRITE
         STH   REG7,0(0,REG3)      WHEN AMOUNT IN CORE IS EQUAL TO
         L     REG2,IEHMVV31       OUTPUT BLOCKSIZE
         L     REG1,IEHMVV31+4
         BAL   REG9,WRIT01
         L     REG1,IEHMVV61+4
         BAL   REG9,CHECK01
         B     BLKOUT
HASBUF   L     REG8,BLKBUF
         L     REG2,IEHMVV30+4
         L     REG3,12(0,REG2)
         ST    REG3,NBLKFB             SAVE ADDR OF PASSED BUFF
         LA    REG5,4                  SET UP REGISTERS FOR SHIFT ROUTI
         L     REG4,NBLKFB             TO MOVE FIRST RECORD INTO MY
         L     REG3,BLKBUF             BUFFER
         LH    REG7,0(0,REG4)
         BAL   REG9,SHIFT
         LA    REG7,4
         TM    SWTH1,X'11'
         BO    SHIFTED
         TM    SWTH1,X'10'
         BO    SHFTD
         LH    REG7,0(0,REG3)
         B     BLKIN2
         SPACE 3
EODRTN   C     REG7,FOUR                END OF DATA ROUTINE  CHECKS
         BE    WCHEND               TO SEE IF ALL DATA IN CORE HAS
         LR    REG3,REG8            BEEN WRITEN OUT IF NOT WRITES THE
         STH   REG7,0(0,REG3)       LAST RECORD OUT
         L     REG2,IEHMVV31
         L     REG1,IEHMVV31+4
         BAL   REG9,WRIT01
         L     REG1,IEHMVV31+4
         BAL   REG9,CHECK01
WCHEND   L     REG2,IEHMVV30            TEST FOR TYPE OF DATA SET BEING
         TM    DSORG(REG2),X'40'    MOVED  IF DSORG IS BPAM  FREES MAIN
         BO    BSAMEND              AND STOWS THE MEMBER JUST MOVED
STOWER   L     REG0,BUFSZ
         L     REG1,BUFLOC              IF DSORG IS BSAM GO TO FREEMAIN
         FREEMAIN  R,LV=(0),A=(1)   AND END OF JOB
STOWALS  LA    REG0,DIRNM                                        A48797
         L     REG1,IEHMVV31
         LA    1,0(0,1)
         MVC   DIRNM(8),RENAM
         STOW  (1),(0),A
         MVC   TTRSAV(4),TTRC
         B     BACK01(15)
BACK01   B     STWMSG                   RETURNS FROM STOW
         B     DUPLC
         EX    0,*
         B     DIRFUL
         B     STOERR
******************************************************************21919
*                                                                *21919
*   NEXT RETURN CODES ALSO GIVE THE MESSAGE:                     *21919
*         IEH326I I/O ERROR ENCOUNTERED IN OUTPUT DATA SET       *21919
*   BUT THESE RETURN CODES ARE CAUSED BY OTHER ERRORS            *21919
*                                                                *21919
******************************************************************21919
         B     STOERR        INDICATES I/O REQUESTS AGAINST THE   21919
*                            DCB ARE STILL OUTSTANDING            21919
         B     STOERR        INDICATES THE DCB IS NOT OPEN        21919
         B     STOERR        INDICATES CONDITIONAL GETMAIN WITHIN 21919
*                            STOW WAS UNSUCCESSFUL                21919
         SPACE 3
GIVBUF   LH    REG0,BSZIN
         L     REG1,NBLKFB
         FREEMAIN  R,LV=(0),A=(1)
         SR     REG1,REG1
         STC    REG1,IEHMVV30+4
BSAMEND  TM    IEHMVV30+4,X'01'        WAS BUFFER PASSED TO ME
         BO     GIVBUF                 YES IT WAS  GIVE IT BACK
         L      REG0,BUFSZ          FREEMAIN  AT END OF JOB
         L     REG1,BUFLOC
         FREEMAIN  R,LV=(0),A=(1)
ALDONE   LA    REG0,144
         LR    REG1,BAS11
         FREEMAIN  R,LV=(0),A=(1)
         IEHPOST  (14,1),T
         SPACE 3
         TM    IEHMVV20+2,X'40'
         BO    WRAPUP
         TM    IEHMVV20+2,X'08'
         BO    INCLUDE
WRAPUP   XCTL  (2,12),EP=IEHMVESN       TRANSFER CONTROL TO WRAPUP
*                                    MODULE
INCLUDE  TM    IEHMVV20,X'10'          DSGROUP OPERATION           VS0H
         BC    1,WRAPUP                YES, TO VESN FOR WRAPUP     VS0H
         XCTL  (2,12),EP=IEHMVETG      NO, XFER CTL TO INCLUDE RTN VS0H
*                                    REPLACE MODULE
         SPACE 3
SINADR   ST    REG1,ERRSAV         I/O ERROR EXIT FROM CHECK
         TM    ERRSAV,X'80'        TEST FOR ERROR DURING READ
         BO    READERR
         TM    ERRSAV,X'40'        TEST FOR ERROR DURING WRITE
         BO    WRTERR
         TM    ERRSAV,X'20'        OTHER ERROR
         BO    FMABORT
         EX    0,*
         SPACE 3
FMABORT  OI    IEHMVV20+2,X'40'    SET ABORT BIT AND FREE MAIN
         B     BSAMEND
ABORT    OI    IEHMVV20+2,X'40'    SET ABORT BIT AND GO TO WRAPUP
         B     ALDONE
         SPACE 3
MESSAGE  BAL   REG4,CLEAR                MESSAGE ROUTINE MOVES
         LA    REG1,IEHMVV00     SPECIFIED MESSAGE AND MOVES IT    7615
         EX    2,MOVMSG             TO BUFFER  INSERT MEMBER NAME
         MVC   NAME2(8),DIRNM       AND/OR DATA SET NAME INTO
         B     MESSAG02             MESSAGE AND LINK TO MESSAGE
MESSAG01 BAL   REG4,CLEAR           WRITER MODULE
         EX    2,MOVMSG
         MVC   NAME3(8),DIRNM
         MVC   DNAM3(44),0(5)
         B     MESSAG02
MESSAG03 BAL   REG4,CLEAR
         EX    2,MOVMSG
         MVC   DNAM2(44),0(5)
MESSAG02 LR    REG3,REG1
         LINK   EP=IEHMVESU           GO TO MESSAGE WRITER
         LTR   15,15
         BP    ABORT
         BR    REG9
MOVMSG   MVC   MSGE(1),0(REG3)
         SPACE 3
ALSCHK   TM    C,X'80'                  TEST FOR ALIAS BIT ON
         BO    STALSR              ON  STOW THE ALIAS MEMBER NAME
         L     REG0,TTRC
         IC    REG0,FOUR
         ST    REG0,PTR
         LA    REG0,PTR
         L     REG1,IEHMVV30
         POINT (1),(0)
         B     NEWMBR              GO  TO SET UP FOR WRITE MEMBER
         SPACE 3
STALSR   TM    SWTH,X'01'          TEST STOWBIT IF ON TRUE MEMBER WAS
         BO    NOSTALR
         MVC   TTRC(3),TTRSAV      ADJUST TTRC OF ALIAS TO CORRECT
         B     STOWALS           TTRC                            A48797
         SPACE 3
DUPLC    TM    C,X'80'
         BO    DUPALS
         OI    SWTH,X'01'
         MVC   RECOVER(3),TTRC
DUPALS   L     REG3,A119
         IC    REG2,A119
         BAL   REG9,MESSAGE
         B     GTMBR
         SPACE 3
READERR  L     REG3,A122                PRINT I/O ERROR ON READ
         IC    REG2,A122              MESSAGE
         L     REG5,IEHMVV21
         BAL   REG9,MESSAG01
         B     FMABORT
         SPACE 3
WRTERR   L     REG3,A123                PRINT I/O ERROR ON WRITE
         IC    REG2,A123              MESSAGE
         L     REG5,IEHMVV21+4
         BAL   REG9,MESSAG01
         B     FMABORT
         SPACE 3
STWMSG   L     REG3,A118                PRINT MESSAGE THAT MEMBER
         IC    REG2,A118             HAS BEEN MOVED
         BAL    REG9,MESSAGE
         B     GTMBR
         SPACE 3
DIRFUL   L     REG3,A121                PRINT MESSAGE THAT DIRECTORY
         IC    REG2,A121             IS  FULL
         BAL   REG9,MESSAGE
         B     ABORT
         SPACE 3
STOERR   L     REG3,A124                PRINT MESSAGE THAT I/O ERROR
         IC    REG2,A124             OCCURED  DURING STOW
         L     REG5,IEHMVV21+4
         BAL   REG9,MESSAG03
         B     ABORT
         SPACE 3
NOSTALR  L     REG3,A125                PRINT MESSAGE THAT ALIAS CANNOT
         IC    REG2,A125            BE  STOWED
         BAL   REG9,MESSAGE
         B     GTMBR
         SPACE 3
WRIT01   LA    2,0(0,2)                 WRITE A RECORD
         LA    1,0(0,1)
         TM    SWTH,X'01'
         BO    RECOVR
WRIT02   WRITE (1),SF,(2),(3),MF=E
         BR    REG9
         SPACE 3
READ01   LA    2,0(0,2)                 READ A RECORD
         LA    1,0(0,1)
         READ  (1),SF,(2),(3),MF=E
         BR    REG9
         SPACE 3
CHECK01  LA    1,0(0,1)
         CHECK (1)
         BR    REG9
         SPACE 3
RECOVR   NI    SWTH,X'00'               RESET STOWBIT
         MVC   PTR(3),RECOVER
         LA    REG0,PTR
         L     REG1,IEHMVV31
         LA    1,0(0,1)
         POINT (1),(0)
         L     REG1,IEHMVV31+4                                   A52025
         B     WRIT02
         SPACE 3
         DS    0F
A118     DC    AL1(B-A-1)
         DC    AL3(A)
A119     DC     AL1(C1-B-1)
         DC    AL3(B)
A120     DC     AL1(D-C1-1)
         DC     AL3(C1)
A121     DC    AL1(E-D-1)
         DC    AL3(D)
A122     DC    AL1(F-E-1)
         DC    AL3(E)
A123     DC    AL1(G-F-1)
         DC    AL3(F)
A124     DC    AL1(H-G-1)
         DC    AL3(G)
A125     DC    AL1(I-H-1)                                          UL0H
         DC    AL3(H)
A126     DC    AL1(J-I-1)                                          UL0H
         DC    AL3(I)                                              UL0H
FOUR     DC    F'4'
BPMEOD   DC    A(EODRTN)                                           UL0H
VBSEOD   DC    A(WCHEND)               EODAD ENTRY FOR VRE DCB     VS0H
BSMSYN   DC    A(SINADR)                                           UL0H
XXITLE   DC    X'03'                                               UL0H
         DC    AL3(ITLR)                                           UL0H
*                                                                  UL0H
*      USER     INPUT     TRAILER     LABEL     ROUTINE            UL0H
*                                                                  UL0H
ITLR     DS    0H                                                  UL0H
         LA    REG4,OFFSET1                                        UL0H
         SR    LINK,REG4                                           UL0H
         LR    BAS10,LINK                                          UL0H
         L     REG4,0(0,REG1)           GET ADDR OF LABEL READ     UL0H
*                            FOR LATER MOVE TO USER                UL0H
         LTR   REG4,REG4                ARE USER LABELS PRESENT    UL0H
         BNE   IOERR                    YES. CHECK IF OK           UL0H
NOLABEL  DS    0H                                                  UL0H
         SR    LINK,LINK                NO, RETURN CODE 0 TO EOV   UL0H
*                                         TO IGNORE ADDITIONAL LAB UL0H
         BR    RETN                     RETURN TO EOV              UL0H
*                                                                  UL0H
IOERR    DS    0H                                                  UL0H
         CLI   8(REG1),X'80'            PERM ERROR FROM PARAM LIST UL0H
         BNE   TRKAVAIL                 NO. CHECK FOR TRACK AVAIL  UL0H
*                                                                  UL0H
LABERR   DS    0H                                                  UL0H
         OI    IEHMVV74+4,X'FF'         YES, SET FLAG TO OUTPUT MSGUL0H
         BR    RETN                     RETURN TO EOV OPERATION    UL0H
TRKAVAIL DS    0H                                                  UL0H
         CLI   IEHMVV72+10,X'FF'        DA+NLT FLAG ON             UL0H
*                                 INDICATES NO U.L. TRK ALLOCATED  UL0H
         BNE   CORAVAIL                 NO PROCESS LABELS          UL0H
*                                                                  UL0H
*  OUTPUT MESSAGE - NO USER LABELS MOVE/COPIED.  NO LABEL TRACK.   UL0H
*                                                                  UL0H
         MVI   IEHMVV72+14,X'FF'        TELL CLOSE TO OUTPUT MSG   UL0H
         MVI   UDCBITLE,X'00'           DEACTIVATE LABEL EXIT      UL0H
         MVI   UDCBOTLE,X'00'           DEACTIVATE LABEL EXIT      UL0H
         B     NOLABEL                 GO SET RC=0,GO TO CLOSE     UL0H
*                                                                  UL0H
CORAVAIL DS    0H                                                  UL0H
         CLC   IEHMVV72(4),ALLZEROS     CORE OBTAINED FOR LABELS   UL0H
         BNE   INITIAL                  YES, INITIALIZE POINTERS   UL0H
         GETMAIN R,LV=640              GET CORE FOR LABELS         UL0H
         ST    REG1,IEHMVV72           SAVE POINTER TO GOTTEN CORE UL0H
INITIAL  DS    0H                                                  UL0H
         CLC   0(4,REG4),UTL1DEF        IS THIS 1ST LABEL IN SET   UL0H
         BNE   SAVLABEL                NO, BYPASS 1ST LABEL SETUP  UL0H
         MVC   IEHMVV72+4(4),IEHMVV72   SET POINTER TO LABEL SAVLOCUL0H
         MVI   IEHMVV72+12,X'00'        CLEAR LABEL COUNTER        UL0H
*                                                                  UL0H
SAVLABEL DS    0H                                                  UL0H
         L     REG1,IEHMVV72+4          GET ADDRESS OF CURRENT     UL0H
*                                         LABEL SAVEAREA           UL0H
         MVC   0(80,REG1),0(REG4)       SAVE LABEL IN GOTTEN CORE  UL0H
         LA    REG1,80(0,REG1)          UPDATE POINTER TO NEXT LO- UL0H
         ST    REG1,IEHMVV72+4            CATION IN LABEL SAVEAREA UL0H
         SR    REG4,REG4                 UPDATE                    UL0H
         IC    REG4,IEHMVV72+12           LABEL                    UL0H
         LA    REG4,1(REG4)                COUNTER                 UL0H
         STC   REG4,IEHMVV72+12             BY ONE                 UL0H
         LA    LINK,4                   RETURN CONDITION CODE 4 TO UL0H
*                                         EOV                      UL0H
*                                         TO GET ADDITIONAL LABELS UL0H
         BR    RETN                     RETURN TO EOV              UL0H
*                                                                  UL0H
ALLZEROS DC    1F'0'                                               UL0H
UTL1DEF  DC    CL4'UTL1'                                           UL0H
DEACTIVE EQU   X'00'                                               UL0H
*                                                                  UL0H
OFFSET1  EQU   ITLR-IEHMVESM                                       UL0H
IOERRMSG DS    0H                                                  UL0H
         MVI   IEHMVV74+4,X'00'   CLEAR I/O ERROR FLAG           A36069
         L     REG3,A126                                           UL0H
         IC    REG2,A126                PROVIDE MSG LENGTH FOR MOVEUL0H
         BAL   REG4,CLEAR               CLEAR PRINT BUFFER        EUL0H
         LA    REG1,IEHMVV00      PRINT BUF ADDR FOR MSG MOVE    A36069
         EX    2,MOVMSG                 MOVE MSG TO PRINT BUF      UL0H
         BAL   REG9,MESSAG02            PRINT MSG                  UL0H
         BR    REG5               RETURN TO INLINE PROCESSING    A36069
WORK     DSECT
PTR      DS    F                   POINTER TO MEMBER FOR POINT
TTSAV    DS    F                   SAVE TTRC FOR POSSIBLE ALIAS
SWTH     DS    CL1                 SWITCHES FOR CONTROL
SWTH1    DS    CL1
SWTH2    DS    CL1
CCHHR    DS    CL5                 START OF DIRENTRY ENTRY
DIRNM    DS    2F
TTRC     DS    CL3
C        DS    CL1
USRDT    DS    CL62                START OF USER DATA IN DIRECTORY
RENAM    DS    CL8                 MEMBER NAME TO BE STOWED WITH
         DS    CL2
SAVDTA   DS    F                   SAVE AREA FOR DATA WHEN BLOCKING REC
BLKBUF   DS    F                   LL   FOR BLOCKED RECORDS
NBLKFB   DS    F                   START OF BUFFER FOR UNBLOCKED RECORD
BUFSZ    DS    F                   AMOUNT OF CORE REQUIRED FOR BUF
BUFLOC   DS    F                   LOCATION OF BUFFER
BSZIN    DS    H
BSZOUT   DS    H
LL01     DS    F
LL02     DS    F
TTRSAV   DS    F
RECOVER  DS    F
ERRSAV   DS    F
         SPACE 3
PRINT    DSECT
CC       DS    CL1
MSGE     DS    CL15
NAME2    DS    CL17
NAME3    DS    CL17
DNAM2    DS    CL11
DNAM3    DS    CL60
         SPACE 3
         IEHMVV
         ORG   IEHMVV70                                            UL0H
         IEHDCBXL                                                  UL0H
         SPACE 3
MESSAGER CSECT
A        DC    CL24'  MEMBER NAMED          '
         DC    CL22'HAS BEEN MOVED/COPIED.'
B        DC    CL30'IEH319I MEMBER          NOT MO'
         DC    CL30'VED/COPIED. DUPLICAT NAME IN '
         DC    CL16'OUTPUT DATA SET.'
C1       DC     X'00'
D        DC    CL30'IEH321I MEMBER          NOT MO'
         DC    CL30'VED/COPIED. OUTPUT DIRECTORY I'
         DC    CL7'S FULL.'
E        DC    CL30'I/O ERROR ENCOUNTERED IN MEMBE'
         DC    CL29'R          OF INPUT DATA SET '
F        DC    CL30'I/O ERROR ENCOUNTERED IN MEMBE'
         DC    CL29'R          OF OUTPUT DATASET '
G        DC    CL30'IEH326I I/O ERROR ENCOUNTERED '
         DC    CL20' IN OUTPUT DATA SET '
H        DC    CL24'  MEMBER NAMED          '
         DC    CL32'IS AN ALIAS AND HAS NOT BEEN STO'
         DC    CL32'WED, TRUE MEMBER WAS NOT STOWED.'
I        DC    CL29'PERM I/O ERROR WHILE READING '                 UL0H
         DC    CL30'USER INPUT TRAILER LABELS. NO '                UL0H
         DC    CL30'MORE LABELS WILL BE PROCESSED.'                UL0H
J        DC    X'00'
         END
