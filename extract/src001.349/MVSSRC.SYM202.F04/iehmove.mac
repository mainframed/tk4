***********************************************************************
*                                                                     *
* NAME                                                                *
*                                                                     *
*    IEHMVSSD CSECT FOR IEHMOVE PROGRAM                               *
*                                                                     *
***********************************************************************
*                                                                     *
* FUNCTION/OPERATION                                                  *
*                                                                     *
*    THIS IS THE ROOT SEGMENT FOR IEHMOVE, THE SYSTEM UTILITY THAT    *
*  MOVES AND COPIES LOGICAL COLLECTIONS OF OPERATING SYSTEM/360 DATA. *
*  ITS FUNCTIONS ARE AS FOLLOWS                                       *
*                                                                     *
*      1.  IT SAVES THE REGISTERS OF THE CALLING PROGRAM              *
*      2.  GETS CORE FOR THE COMMUNICATION REGION OF IEHMOVE          *
*      3.  SETS THE TRACE INDICATORS FOR THE OVERLAY SEGMENTS         *
*      4.  LINKS TO THE FIRST OVERLAY SEGMENT (ENTRY = IEHMVXSE)      *
*      5.  RETURNS CONTROL TO THE CALLING PROGRAM                     *
*                                                                     *
***********************************************************************
*                                                                     *
* ENTRY POINTS                                                        *
*                                                                     *
*    THE ONLY ENTRY POINT TO THE ROOT SEGMENT IS IEHMVSSD, THE CSECT  *
*  NAME, OR IEHMVESD, THE SAME INSTRUCTION.  THIS ENTRY POINT IS THE  *
*  POINT WHERE THE CALLING PROGRAM ENTERS IEHMOVE.                    *
*                                                                     *
***********************************************************************
*                                                                     *
* INPUT                                                               *
*                                                                     *
*    THE ONLY INPUT TO THE ROOT SEGMENT IS THE ADDRESS OF THE         *
*  PARAMETER LIST PASSED TO IT BY THE CALLING PROGRAM.                *
*                                                                     *
***********************************************************************
*                                                                     *
* OUTPUT                                                              *
*                                                                     *
*    THE OUTPUT TO THE FIRST OVERLAY SEGMENT IS TWOFOLD.  FIRST,      *
*  THE PARAMETER LIST ADDRESS FROM THE CALLING PROGRAM IS PASSED TO   *
*  THE OVERLAY SEGMENT IN REGISTER 6, AND THE ADDRESS OF THE          *
*  COMMUNICATION REGION IS PASSED IN REGISTER 13.                     *
*                                                                     *
***********************************************************************
*                                                                     *
* EXTERNAL ROUTINES                                                   *
*                                                                     *
*    AS FAR AS THE ROOT SEGMENT IS CONCERNED THE ONLY EXTERNAL        *
*  ROUTINE IS THE FIRST OVERLAY SEGMENT, IEHMVXSE.                    *
*                                                                     *
***********************************************************************
         EJECT
**********************************************************************
*                                                                     *
* EXITS                                                               *
*                                                                     *
*    THE ONLY EXIT IS A RETURN TO THE CALLING PROGRAM.                *
*                                                                     *
***********************************************************************
*                                                                     *
* TABLES/WORK AREAS                                                   *
*                                                                     *
*    THE ONLY WORK AREA USED IS THE COMMUNICATION REGION ITSELF.      *
*  THERE IS NO SYMBOLIC NAME FOR THIS REGION SINCE THE AREA IS        *
*  OBTAINED BY A GETMAIN MACRO INSTRUCTION.                           *
*                                                                     *
***********************************************************************
*                                                                     *
* ATTRIBUTES                                                          *
*                                                                     *
*    REENTRANT AND REUSEABLE                                          *
*                                                                     *
***********************************************************************
IEHMVSSD CSECT
*A031649                                                       @ZA06531
         EJECT
*C031637                                                       @ZA03372
*A031637                                                       @ZA00101
*D031637-031644,031679-031685,031707-031713,031880-031888      @ZA00101
*D031918-031925                                                @ZA00101
*C031946                                                       @ZA00101
*                                                                A50932
*D023606,023630,023631                                           A99999
* 023631-023954,030212-030460,032007-065007                      A44303
* 032008-032012                                                  I30905
*                                                                A30471
* 030480                                                           I276
* 030600,031600                                                  A29758
* 031890                                                         A36041
* 031491,031617-031624,031736,031771-031778,031813-031827,031862 A36113
* 032016,032032-032132                                           A38736
*C031533,031547,031568,031575,031603,031610,031642,031644,031652,A46081
*C031677,031680,031685,031687,031705,031708,031713,031715,031730,A46081
*C031734,031736,031771,031785,031813,031882,032002               A46081
*D031540,031608,031631,031635,031643,031645,031686,031714,031722,A46081
*D031737-031750,031792,031799,031890-031903                      A46081
*A031535-031545,031605,031607,031615-031630,031646-031650,031654,A46081
*A031656,031689,031691,031717-031723,031741-031751,031789-031801,A46081
*A036002-060002                                                  A46081
*                             REGISTER NOTATION AND USAGE
R0       EQU   0
R1       EQU   1
R2       EQU   2
R6       EQU   6
R7       EQU   7
R13      EQU   13                       SAVE  REG
R14      EQU   14                       RETURN REG
R15      EQU   15                       ENTRY POINT REG
R3       EQU   3                                                 A20878
R4       EQU   4                                                 A20878
R5       EQU   5                                                 A20878
R8       EQU   8                                                 A20878
R9       EQU   9                                                 A20878
R10      EQU   10                                                A20878
R11      EQU   11                                                A20878
R12      EQU   12                                                A20878
*
*                             ENTRY AND EXTRN STATEMENTS
         ENTRY IEHMVESD
*
*                             USING STATEMENTS
         USING IEHMVESD,R11                                      A20878
*
*
IEHMVESD SAVE  (14,12),T,IEHMOVE
         LR    R11,R15       SET UP ADDRESSABILITY               A20878
         LR    R6,R1                    SAVE POINTER TO CALLING
*                                       PROGRAMS PARAMETER LIST
       GETMAIN R,LV=440
*                             ON RETURN FROM GETMAIN, REG 1 CONTAINS
*                             POINTER TO 440 BYTE SAVE AREA  TO BE
*                             USED BY THE MOVE/COPY PROGRAM. REG 13
*                             WILL SUBSEQUENTLY POINT TO THE NEXT
*                             AVAILABLE SAVE AREA WITHIN THIS
*                             440 BYTE EXTENT. CONSEQUENTLY NO
*                             MODULE WITHIN THE MOVE/COPY PROGRAM
*                             SHOULD ALLOCATE ITS OWN SAVE
*                             AREA. 440 BYTES HAS BEEN COMPUTED
*                             AS THE MAXIMUM EXTENT REQUIRED
*                             FOR SAVING REGISTERS WITHIN ANY
*                             GIVEN PATH OF THE MOVE/COPY PROGRAM.
*
*
         ST    R1,8(R0,R13)             SET UP FORWARD AND BACKWARD
         ST    R13,4(R0,R1)             CHAINING TO THE SAVE AREA
         LR    R13,R1
         MVI   12(R13),X'00'           SET TRACE INDICATORS
         MVI   8(R13),X'FF'
         LA    R10,80(R13)        CHAIN SAVE AREAS               A20878
         ST    R10,8(R13)                                        A20878
         ST    R13,4(R10)                                        A20878
         L     R14,12(R13)              RESET REG 14             A20878
         LA    R1,STAEEXIT             PASS EXIT ROUTINE ON      A30471
         LINK  EP=IEHMVXSE    GO TO NEXT MODULE                  A20878
         EJECT
***********************************************************************
*    ON RETURN FROM PROCESSING A MOVE/COPY REQUEST, THE FOLLOWING CODE*
* TESTS IEHMVV41+13, THE RETURN CODE BYTE, AND SETS THE CORRECT CODE  *
* IN REGISTER 15 PRIOR TO RETURNING TO THE INVOKING PROGRAM.          *
*                                                                     *
* THE FORMAT OF IEHMVV41+13 IS AS FOLLOWS                             *
*                                                                     *
*        BITS 0-3  UNUSED                                             *
*        BIT  4    RETURN CODE 16 SHOULD BE RETURNED                  *
*        BIT  5    RETURN CODE 12 SHOULD BE RETURNED                  *
*        BIT  6    RETURN CODE  8 SHOULD BE RETURNED                  *
*        BIT  7    RETURN CODE  4 SHOULD BE RETURNED                  *
*        BITS 4-7 OFF MEANS RETURN CODE ZERO                          *
*                                                                     *
*    PRIOR TO RETURNING TO THIS POINT, IEHMVESK, THE WRAP UP ROUTINE, *
* INSERTS INTO REGISTER 15 THE CONTENTS OF IEHMVV41+13.               *
***********************************************************************
*
*
         BALR  R11,R0                                            A20878
         USING *,R11                                             A20878
         LA    R7,4
         LR    R6,R15                  PUT RETURN CODE IN REG 6
         SLL   R6,28                   SHIFT BITS 4-7 TO HIGH ORDER
*                                      BIT POSITIONS
         LA    R15,16                  SET RETURN CODE AT 16
CHKCODE  LTR   R6,R6                   CHECK HIGH ORDER BIT
         BM    RETURN                  EXIT IF HIGH ORDER BIT ON
         SLL   R6,1                    SET UP TO CHECK NEXT BIT
         SR    R15,R7                  REDUCE RETURN CODE BY 4
         BP    CHKCODE                 CHECK NEXT BIT IF CODE NOT ZERO
RETURN   LR    R9,R15                  SAVE RETURN CODE          A29758
FINISH   DELETE EP=DEVMASKT            DELETE DEVICE MASK TABLE    I276
         L     R6,4(R0,R13)            LOAD SAVE AREA ADDRESS      I276
         LA    R0,440                  RELEASE STORAGE ACQUIRED FOR
*                                      SAVE AREA
         FREEMAIN R,LV=(0),A=(13)
         STAE  0                                                 A30471
         LR     R13,R6       LOAD SAVE AREA ADDRESS
         LR     R15,R9  LOAD RETURN CODE
         RETURN  (14,12),T,RC=(15)     RETURN TO INVOKING PROGRAMA30471
**********************************************************************
*       THIS ROUTINE IS ENTERED ONLY WHEN AN ABEND OCCURS IN IEHMOVE.*
*  REGISTER 12 POINTS TO THE IEHMVV DSECT.  THE DSECT IS USED FOR    *
*  OBTAINING THE SYSUT1 DCB ADDRESS AND DETERMINING IF A TEMPORARY   *
*  DATA SET NAME WAS USED ON A MOVE OPERATION.  THE ROUTINE SCRATCHES*
*  THE WORKFILE AND TEMPORARY DATA SETS ON MOVE.                     *
**********************************************************************
STAEEXIT EQU   *                                                 A30471
         BALR  R10,0                                             A30471
         USING *,R10                                             A30471
         LA    R3,12                                             A36113
         CR    R0,R3                   IS STAE WORK AREA IN CORE A36113
         BNE   IEHSTA01                YES- GET POINTER TO       A30471
*                                      DSECT FROM WORK AREA      A30471
         LR    R12,R2                  GET POINTER TO DSECT      A30471
         B     IEHSTA02                CONTINUE                  A30471
IEHSTA01 L     R12,0(R1)               GET POINTER TO DSECT      A30471
         USING IEHMVV,R12                                        A46081
IEHSTA02 L     R5,IEHMVV40             GET SYSUT1 DCB PTR        A46081
         USING IHADCB,R5                                         A46081
         STM   R13,R14,SAVEDW          SAVE SENSITIVE REGS       A46081
IEHSTA03 L     R3,CVTPTR               GET PTR TO CVT            A46081
         USING IEACVT,R3                                         A46081
         L     R3,CVTTCBP              GET PTR TO NEW/OLD TCB    A46081
         DROP  R3                                                A46081
         L     R4,4(R3)                ADDRESS OF CURRENT TCB    A30471
         L     R3,12(R4)               ADDRESS OF TIOT           A30471
         TM    DCBOFLGS,OPENED         DCB OPENED                A46081
         BZ    SKIP1                   *B IF NOT                 A46081
         LH    R4,40(R5)               OFFSET IN TIOT OF DDNAME  A30471
         AR    R3,R4                   ADDRESS IN TIOT OF DDNAME A30471
PREPARE  L     R4,16(R3)               ADDRESS OF UCB            A30471
         LA    R4,0(,R4)               CLEAR HI-BITS             A46081
         USING IEFUCBOB,R4                                       A46081
         CLI   UCBTYP+2,X'20'          DATACELL                  A46081
         BNE   FOR2321                 YES-BRANCH                A36113
         MVC   DEVAREA(4),UCBTYP       NO-PUT DEVTYPE IN LIST    A46081
         MVC   DEVAREA+4(6),SRTEVOLI   PUT VOLSER IN LIST        A46081
         CLC   DSNAME(8),TEMP          THIS PASS FOR **TEMP      A46081
         BE    SCRATCH                 *B IF YES                 A46081
         CLI   IEHMVV39+5,X'FF'        SYSUT1 ALLOCATED          A46081
         BE    SCRUT2                  NO BYPASS SCRATCH         A44331
         MVC   DSNAME+9(8),IEHMVV87    MOVE TIME TO **SYSUT1   @ZA03372
SCRATCH  TM    DCBOFLGS,OPENED         DCB OPEN                  A46081
         BZ    OVERCLOS                *B IF NOT.SKIP CLOSE      A46081
         OI    0(R12),X'80'            SET UP HIGH ORDER BIT   @ZA06531
         CLOSE ((R5)),MF=(E,(R12))     CLOSE THE DS              A46081
OVERCLOS SR    R0,R0                                             A46081
         SCRATCH DELLIST                                         A46081
         CLC   DSNAME(8),TEMP          SCRATCHED TEMPNAME        A46081
         BE    ENDIT                   FINISHED                  A30471
         CLI   DSNAME+7,X'F1'          WAS THIS SYSUT1?          A30471
         BNE   TESTUT2                 TEST SYSUT2               A30471
SCRUT2   CLI   IEHMVV39+6,X'FF'        WAS SYSUT2 ALLOCATED      A46081
         BE    SCRUT3                  NO BYPASS SCRATCH UT2     A44331
         MVI   DSNAME+7,X'F2'          MAKE NAME = **SYSUT2      A46081
         L     R5,IEHMVV41             GET SYSUT2 DCB PTR        A46081
         B     SCRATCH                 *B TO SCRATCH/CLOSE UT2   A46081
TESTUT2  CLI   DSNAME+7,X'F2'          WAS THIS SYSUT2?          A30471
         BNE   TEMPNAME                IS THERE A **TEMP?        A30471
SCRUT3   CLI   IEHMVV39+7,X'FF'        WAS SYSUT3 ALLOCATED      A46081
         BE    TEMPNAME                NO BYPASS SCRATCH UT3     A44331
         MVI   DSNAME+7,X'F3'          MAKE DSN=UT3              A46081
         L     R5,IEHMVV42             GET SYSUT3 DCB PTR        A46081
         B     SCRATCH                 *B TO CLOSE/SCRATCH UT3   A46081
ENDIT    SR    R15,R15                 RET CODE FOR STAE=DUMP    A46081
         LM    R13,R14,SAVEDW          RELOAD SENSITIVE REGS     A46081
         BR    14                      RETURN TO STAE            A30471
FOR2321  MVC   DEVAREA+4(6),SRTEVOLI   PUT VOLSER IN LIST        A46081
         SR    R3,R3                                             A36113
         LH    R3,0(R4)                GET BIN NUMBER            A36113
         SLL   R3,4                    GET DISPLACEMENT          A36113
         LA    R6,56                   TO START OF UCB           A46081
         SR    R4,R3                   GET ADDRESS               A36113
         SR    R4,R6                   OF UCB                    A46081
         MVC   DEVAREA(4),UCBTYP       PUT DEVTYPE IN LIST       A46081
         B     SCRATCH                 *B TO CLOSE/SCRATCH       A46081
TEMPNAME L     R2,IEHMVV21             PTR TO 'TO' DSNAME        A46081
         CLC   0(8,R2),TEMP            IS IT **TEMP?             A30471
         BNE   ENDIT                   NO - FINISHED             A30471
         TM    IEHMVV20,X'80'          MOVE SPECIFIED ON CC      A46081
         BO    ENDIT                   YES-DO NOT SCRATCH        A36113
         L     R5,IEHMVV31             GET PTR TO 'TO' DCB       A46081
         LA    R5,0(,R5)               CLEAR HIGH BITS           A46081
         MVI   DSNAME,C' '             BLANK                     A46081
         MVC   DSNAME+1(43),DSNAME     DSNAME                    A46081
         MVC   DSNAME(8),TEMP          DSNAME FOR CAMLIST        A46081
         B     IEHSTA03                SCRATCH **TEMP            A30471
SKIP1    MVC   DDNAME(8),DCBDDNAM      GET DDNAME FOR COMPARE    A46081
         LA    R3,24(R3)               POINT TO FIRST DD ENTRY   A36113
LOOPX    CLC   4(8,R3),DDNAME          IS THIS THE DDNAME I WANT A36113
         BE    PREPARE                 YES - BRANCH              A30471
         SR    R4,R4                   PREPARE FOR INCREASE      A30471
         IC    R4,0(R3)                GET LENGTH OF TIOT ENTRY  A30471
         AR    R3,R4                   GET POINTER TO NEXT ENTRY A30471
         CLC   0(4,R3),ZEROS           CHECK END OF TIOT LIST    A36113
         BE    ENDIT                   YES - BRANCH TO CLOSE RTN.A30471
         B     LOOPX                   NO - CONTINUE SEARCH      A30471
ZEROS    DC    1F'0'                                             A30471
DDNAME   DS    2F                                                A30471
TEMP     DC    CL8'**TEMP  '                                     A30471
DELLIST  CAMLST   SCRATCH,DSNAME,,VOLIST                         A30471
DSNAME   DC    CL44'**SYSUT1.'                                 @ZA00101
         DS    0F                                                A30471
         DS    1H                      TO ALIGN ON BOUNDRY       A30471
VOLIST   DC    H'1'                    ONE VOLUME                A30471
DEVAREA  DS    10X                     VOL TYPE                  A30471
         DC    H'0'                    SEQ NO.                   A30471
SAVEDW   DS    D                                                 A46081
OPENED EQU     X'10'                                             A46081
         IEHMVV
         DCBD  DSORG=BS,DEVD=DA
IEFUCBOB DSECT
         IEFUCBOB
IEACVT   DSECT
         CVT
         END
