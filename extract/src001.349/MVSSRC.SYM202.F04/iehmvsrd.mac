 TITLE 'IEHMVSRD - PERFORMS THE UNLOAD FUNCTION FOR IEHMOVE'
*       IEHMVSRD
*THIS MODULE PERFORMS THE UNLOAD FUNCTION FOR THE MOVE/COPY PROGRAM.
*IT WILL UNLOAD BOTH A PARTITIONED DATA SET (PDS) AS WELL AS A SEQUEN-
*TIAL DATA SET. THE UNLOAD FORMAT IS UNIQUE IN THAT ONLY THE LOAD FUNC-
*TION IS CAPABLE OF RECOGNIZING IT AND IN TURN PERFORM THE MOVE/COPY.
*EACH RECORD THAT IS UNLOADED IS PRECEDED BY A THREE OR SIX BYTE CONS-
*TANT DEPENDING ON THE TYPE OF RECORD PASSED. THERE WILL ALWAYS BE
*THREE BYTES OF INFORMATION PRECEDING EVERY UNLOADED RECORD MADE UP OF
*
*        LL = 2 BYTES    LENGTH OF UNLOADED RECORD
*        I  = 1 BYTE     INDICATOR AS TO THE TYPE OF RECORD
*
*THE INDICATOR BYTE BREAKS DOWN INTO THE FOLLOWING
*
*        BIT 0      INDICATES A 3 BYTE TTR FOLLOWS THE LLI BYTES
*        BIT 1      INDICATES THE UNLOADED DATA SET IS A PDS
*        BIT 2      INDICATES THE RECORD IS PART OF A MEMBER
*        BIT 3      INDICATES THE RECORD IS A NOTE LIST
*        BIT 4      INDICATES THE RECORD IS A DIRECTORY RECORD
*        BIT 5      INDICATES THE RECORD IS A DUMMY RECORD
*        BIT 6      NOT USED
*        BIT 7      NOT USED
*
*IF A SEQUENTIAL DATA SET IS UNLOADED THE PROGRAM WILL UNLOAD UP TO THE
*FIRST END OF FILE INDICATOR AND AT THAT POINT, FREE THE CORE THAT IT
*NEEDED AND TRANSFER CONTROL TO ANOTHER MOVE/COPY MODULE THAT WILL
*CLOSE THE DATA SETS AND LOOK FOR ANOTHER REQUEST.
*
*IN THE CASE OF A PDS, THE PROGRAM GOES TO ROUTINE THAT PASSES IT A
*DIRECTORY ENTRY. IT THEN CHECKS FOR THE PRESENCE OF NOTELISTS. IF NOTE
*LISTS ARE PRESENT,THEN THEIR TTR'S ARE SAVED AND THE DIRECTORY INFO IS
*UNLOADED.THE NEXT THING THAT IS UNLOADED IS THE LOWEST SEQUENCED NOTE
*LIST. FOLLOWING THIS WE UNLOAD ALL THE MEMBER RECORDS UP TO THE LAST
*UNLOADED NOTELIST. WHEN THIS POINT IS REACHED THEN THE NEXT LOWEST SE-
*QUENCED NOTELIST IS UNLOADED. IF NO MORE NOTELISTS EXIST A DUMMY REC-
*ORD IS WRITTEN WHICH ENABLES THE LOAD TO PUT OUT THE LAST NOTELIST
*AND LOOK FOR THE END OF DATA MARK. WHEN EOD IS REACHED THE PROCESS IS
*THEN REPEATED UNTIL NO MORE ENTRIES ARE PASSED FROM THE GET MEMBER
*ROUTINE. ON A PDS UNLOAD IF THERE ARE NO NOTELISTS THEN THE WHOLE MEM-
*BER IS UNLOADED SEQUENTIALLY.
*IF USER LABEL PROCESSING WAS REQUESTED, AT END-OF-DATA OR VOLUME     *
*SWITCH TIME THIS MODULE WILL GETMAIN IF NECESSARY FOR A LABEL        *
*SAVEAREA. THE SAVED LABELS WILL THEN BE PASSED TO IEHMVSSN TO BE     *
*OUTPUT DURING DATA SET WRAP-UP.                                      *
*
*
*
*
IEHMVSRD CSECT
*A032800,033000,037400,038800,041200,044400,05400,074200,076200  A44326
*A083600                                                         A44326
*A017600                                                         A44360
*2050012600-012800,078800                                          UL0H
*2050062600-063400,063800-065600,066600                            6810
REG0     EQU   0
REG1     EQU   1
REG2     EQU   2
REG3     EQU   3
REG4     EQU   4
REG5     EQU   5
REG6     EQU   6
REG7     EQU   7
REG8     EQU   8
REG9     EQU   9
BASE10   EQU   10
REG11    EQU   11
REG12    EQU   12
REG13    EQU   13
REG14    EQU   14
REG15    EQU   15
IEHMVERD SAVE  (14,12),T,ERD-SEPT-10-65
         LR    BASE10,REG15            LOAD BASE REG FOR PROGRAM   UL0H
         USING IEHMVERD,BASE10                                     UL0H
         ENTRY IEHMVERD
         USING IEHMVV,REG12
*
         USING MORECORE,REG11
         USING GETCORE,REG9
         USING MESSAGES,REG7      BASE FOR ERROR CSECT
         GETMAIN  R,LV=124
         LR    REG11,REG1     BASE REG FOR MORECORE DSECT          5219
         IEHPRE (0,1),TF
         L     REG1,IEHMVV30      ADDRESS OF FROM DCB
*                                                                  UL0H
* ACTIVATE USER INPUT TRAILER LABEL EXIT IF REQUIRED               UL0H
*                                                                  UL0H
         CLI   UDCBITLE,DEACTIVE        IS ITLE INACTIVE           UL0H
         BE    NEXTCODE                 YES,CONTINUE               UL0H
         MVC   UDCBITLE(4),XXITLE       NO, SET UP ITLE LIST ADDR  UL0H
NEXTCODE DS    0H                                                  UL0H
*                                                                  UL0H
         L     REG2,16(REG1)  KEYLEN FROM DCB IN HIGH ORDER BYTE   5219
         SRL   REG2,24        KEYLEN IN LOW, ZEROES IN HIGN        5219
         AH    REG2,62(REG1)  KEY LENGTH + BLOCKSIZE               5219
         LA    REG1,74        MAXIMUM DIRECTORY ENTRY              5219
         CR    REG2,REG1      IS (KEYLEN + BLKSIZE) > OR = TO      5219
         BC    10,HEREYES1              MAX. DIRECTORY ENTRY LEN   5219
         LA    REG2,74        NO, USE MAX. DIRECTORY ENTRY LEN     5219
HEREYES1 LA    REG2,238(REG2) SIZE OF GETCORE DSECT                5219
         LR    REG0,REG2
*
*
*
*ISSUE A GETMAIN FOR GETCORE DSECT. PART OF DSECT WILL CONTAIN THE 5219
*'FROM' PHYSCICAL RCD OR A DIRECTORY ENTRY IN 'INPUT'.             5219
*
         GETMAIN R,LV=(0)     GET HOWEVER MUCH IS IN REG0
         LR    REG9,REG1      BASE FOR GETCORE DSECT               5219
         ST    REG2,HOWMUCH
         SR    REG2,REG2      CLEAR THIS REGISTER
         STC     REG2,SAMSW       INITIALIZE THIS SWITCH TO ZERO
         XC    LLITTR+3(3),LLITTR+3     INIT THIS FIELD TO ZERO  A44360
RETURN   L     REG8,IEHMVV30      GET ADDRESS OF FROM DCB
         MVC   33(3,REG8),EODAD+1     ADDRESS OF MY EODAD
         MVC   57(3,REG8),SYNAD+1
         MVI   SWITCHES,X'10'          INIT THE SWITCH           A44326
CHUCKRET NI    SWITCHES,X'D8'          RESET EXCEPT BITS 0,1,4,5 A44326
         LA    REG7,AREALIST    ADDRESS OF WHERE NTELSTS ARE STORED
         B     CHARLIE
*
*THIS WILL SET A SWITCH TO INDICATE THAT AN ALIAS ENTRY HAS BEEN PASSED
*AND THAT NO MEMBERS ARE TO BE PASSED.
*
SETSW1   OI    SWITCHES,X'20'
         B     NONTELST
SETSW2   OI    SWITCHES,X'10'   NO NOTE LISTS
         B     NONTELST
CHARLIE  TM    SWITCHES,X'80'      SWITCH,NOP THE FIRST TIME AROUND
         BC    1,JUMP              GO TO JUMP IF NOT FIRST TIME
         OI    SWITCHES,X'80'      SET JUMP SWITCH TO BYPASS THIS CODE
         SR    REG0,REG0           REG0 MUST BE ZERO FIRST TIME THRU
         BAL   REG14,DSORG    GO TO TEST IF IT'S A BSAM DS
         B     *+8                 JUMP OVER NEXT TWO INSTRUCTIONS
JUMP     LR    REG1,REG9           ADDRESS OF INPUT ENTRY AREA IN REG1
         LR    REG0,REG1          ANYTHING BUT ZERO IN REGO
         LA    REG15,IEHCWMGN    ADDRESS OF GET MEMBER NAME ROUTINE
         BALR  REG14,REG15         GO TO GET NAME RTN AND RETURN IN 14
         B     *+4(REG15)          IF REG15 IS ZERO,RETURN IS NORMAL
         B     PROCESS             AND WE GO TO PROCESS.
         B     WRAPUP              NO MORE NAMES, WRAP UP JOB
         B     MSGRTN              PERMANENT I/O ERROR,WRITE OUT MSG
*
*THIS ROUTINE WILL EXAMINE THE DIRECTORY ENTRY PASSED TO FOR NOTE
*LISTS AND TAKE APPROPRIATE MEASURES TO PASS RECORDS TO BWRITE
*
*
PROCESS  MVC   MEMBER(8),5(REG9)   SAVE MEMBER NAME TO PRINT IT LATER
         SR    REG1,REG1      CLEAR THIS REGISTER
         SR    REG2,REG2      FOR THIS ROUTINE
         TM    16(REG9),X'80'    IS THIS DIR ENTRY AN ALIAS?
         BC    1,SETSW1       YES IT IS AN ALIAS
         NI    SWITCHES,X'DF'   SET ALIAS SWITCH OFF IF IT'S ON
PROCESS1 IC    REG1,16(REG9)   ENTER 'C' BYTE OF DIR ENRTY IN REG1
         N     REG1,ANDNTLST  AND OUT EVERYTHING EXCEPT BITS 1 AND 2
         BC    8,SETSW2  RESULT ZERO, NO NOTELISTS
         NI    SWITCHES,X'EF'          INDIC NOTELISTS PRESENT   A44326
         SRL   REG1,5       MOVE NUMBER OF NTELSYS OVER
         STC   REG1,NOTELST   STORE NUMB OF TTRN'S IN DIRECT ENTRY
         SLA   REG1,2         MULT BY 4,NUMB OF BYTS PER NTLST ENTRY
         BCT   REG1,*+4       SUBTRACT 1 FROM REG1 AND GO TO NSI
         EX    REG1,MVNTLIST   MOVE NOTELIST PTRS TO GOTTEN CORE
NONTELST MVC   LLITTR+2(1),ZEROS  CLEAR OUT I BYTE
         OI    LLITTR+2,X'C8'   SET IND FOR DIR ENTRY WITH TTR
         IC    REG1,16(REG9)   ENTER 'C' BYTE OF DIR ENTRY IN REG1
         N     REG1,ANDUSDTA  AND OUT EVERYTHING EXECPT BITS 3 TO 7
         SLA   REG1,1         MULTIPLY BY 2, USER DATA IN HALFWORDS
         LA    REG1,12(REG0,REG1) ADD 12 MORE FOR NAME AND TTRC
         STH   REG1,LLITTR    STORE LGTH IN LL BYTES OF LLITTR
         BCT   REG1,*+4  DECREASE REG1 BY ONE
         EX    REG1,MVDIRTRY    MOVE DIRECTORY ENTRY TO INPUT
         BAL   REG14,WRITE    SET UP TIME FOR BWRITE
         TM    SWITCHES,X'20'      WAS THIS AN ALIAS ENTRY
         BC    1,PRTNAME           YES,PRINT ALIAS OF MEMBER UNLOADED
SWTEST   TM    SWITCHES,X'10'  ANY MORE TTRN'S IN THIS DIR ENTRY
         BC    1,NOTTRNS           NO,START UNLOADING MEMBERS
NEXTTTRN CLC   3(1,REG7),ZEROS   IS THIS A NOTE LIST PTR
         BC    8,CKNEXT    NO, SO CHECK NEXT ONE
WRTNEXT  MVC   LLITTR+3(3),0(REG7) LOAD TTR IN INDICATOR
         L     REG0,0(REG7)   LOAD TTR IN REG0
         LR    REG1,REG8           LOAD ADDRESS OF DCB IN REG1 FOR POIN
         IC    REG0,ZEROS          MAKE N OF TTRN=0 FOR 'POINT'
         ST    REG0,LASTLIST   TTR OF LAST NOTE LIST WRITTEN
         LA    REG0,LASTLIST
         POINT (1),(0)             POINT TO NOTE LIST
         LA    REG5,INPUT   FOR READ MACRO
         MVC   LLITTR+2(1),ZEROS  CLEAR INDICATOE BEFORE NEXT READ
         LH    REG3,62(REG8)   LOAD BLKSIZE FROM DCB FOR READ
         READ  INDECB,SF,(8),(5),(3),MF=E
         BAL   REG14,CHLIOER      TEST FOR I/O ERROR ON LABEL      UL0H
         CHECK INDECB
         SR    REG3,REG3                                         A44326
         IC    REG3,3(REG7)            GET NBR OF PTRS IN NL     A44326
         SLL   REG3,2                  MULTIPLY WITH 4           A44326
         LA    REG3,4(REG3)            ADD 8 FOR LENGTH AND POINTER
         GETMAIN R,LV=(REG3)                                     A44326
         NI    SWITCHES,X'EF'          INDIC NOTELIST PRESENT    A44326
         ST    REG1,NLAREA             SAVE THE ADDRESS          A44326
         MVC   NLAREA(1),3(REG7)       SAVE THE NBR OF POINTERS  A44326
         ST    REG3,0(REG1)            SAVE THE SIZE OF THE AREA A44326
         BAL   REG14,RECLGTH       COMPUTE LGTH OF RECORD READ
         LA    REG4,INPUT              FIND START OF DATA        A44326
         SR    REG2,REG2                                         A44326
         IC    REG2,16(REG8)           FIND  KEYLENGTH           A44326
         AR    REG4,REG2               FIND START OF TTRX'S      A44326
         BAL   REG6,MOVETTRX           SAVE THE TTRX'S           A44326
         OI    SWITCHES,X'01'          INDIC NOTELIST PROCESSED  A44326
         OI    LLITTR+2,X'D0'   NOTELIST POINTER
         BAL   REG14,WRITE         GIVE RECORD TO BWRITE
NOTTRNS  L     REG0,12(REG9)    LOAD LAST BYTE OF NAME AND TTR
         SLL   REG0,8         SHIFT IT OVER 8 BITS TO ZERO OUT C   5219
         IC    REG0,ZEROS          ZERO OUT C OF TTRC
         ST    REG0,HOLDTTR
         LR    REG1,REG8      PUT ADDRESS OF DCB IN REG1
         LA    REG0,HOLDTTR
         POINT (1),(0)        POINT TO START OF MEMBER
NEXTMEMB LA    REG5,INPUT  ADDRESS OF INPUY AREA FOR READ MACRO
         MVC   LLITTR+2(1),ZEROS  CLEAR INDICATOR BYTE FOR NEXT RECORD
         LH    REG3,62(REG8)   LOAD BLKSIZE FROM DCB FOR READ
         READ  INDECB,SF,(8),(5),(3),MF=E
         BAL   REG14,CHLIOER      TEST FOR I/O ERROR ON LABEL      UL0H
         CHECK INDECB
         TM    SAMSW,X'10'     TEST TO SEE IF UNLOAD IS A BSAM DS
         BC    1,BSAMDS      YES IT IS
         L     REG1,IEHMVV30      LOAD ADDR OF FROM DCB
         NOTE  (1)            NOTE WHERE(TTR) RECORD WAS READ FROM
         ST    REG1,LASTNOTE  STORE NOTED TTR IN HOLD AREA
         BAL   REG14,RECLGTH  COMPUTE LENGTH OF RECORD READ
         TM    SWITCHES,X'10' DO WE HAVE TO CHECK FOR NOTELISTS
         BC    1,SETIND       NO,SO GO AND SET INDICATOR BYTE
*                                                                A44326
* CHECK FOR TTRX POINTERS IN THE NOTELIST                        A44326
NLTTR    DS    0H                                                A44326
         SR    REG14,REG14                                       A44326
         IC    REG14,NLAREA            GET NBR OF TTRX'S LEFT    A44326
         LTR   REG14,REG14             ALL TTRX'S CHECKED        A44326
         BZ    NLTTRF                  YES CONTINUE              A44326
         LR    REG2,REG14              SAVE IT                   A44326
         L     REG3,NLAREA             GET ADDR NL AREA          A44326
         LA    REG3,4(REG3)            JUMP PAST LENGTH FIELD    A44326
NLTTRA   DS    0H                                                A44326
         TM    0(REG3),X'80'           TTRX CHECKED              A44326
         BO    NLTTRD                  YES CHECK NEXT TTRX       A44326
         CLI   2(REG3),X'00'           NO  IS TTRX ZERO          A44326
         BE    NLTTRB                  YES FLAG THIS ONE         A44326
         CLC   LASTNOTE(3),0(REG3)     TTRX FOUND                A44326
         BNE   NLTTRC                  NO GO TO NEXT ONE         A44326
NLTTRB   DS    0H                                                A44326
         OI    0(REG3),X'80'           FLAG THIS TTRX            A44326
         BCT   REG2,NLTTRC             GO TO NEXT ONE IF ANY     A44326
NLTTRE   DS    0H                                                A44326
         STC   REG2,NLAREA             SAVE NEW TTRX COUNT       A44326
         B     NLTTRF                  CONTINUE                  A44326
NLTTRC   DS    0H                                                A44326
         BCT   REG14,NLTTRD            GO TO NEXT TTRX           A44326
         B     NLTTRE                  IF ANY                    A44326
NLTTRD   DS    0H                                                A44326
         LA    REG3,4(REG3)            POINT TO NEXT TTRX        A44326
         B     NLTTRA                  AND GO TO CHECK IT        A44326
NLTTRF   DS    0H                                                A44326
         CLC   LASTNOTE(4),LASTLIST IS THIS THE NOTELIST WE POINTED TO
         BC    8,NXTLIST      YES,GO AND GET NEXT NOTELIST IF ANY
SETIND   MVC   LLITTR+3(3),LASTNOTE   STORE LAST NOTED TTR IN INDICATOR
         OI    LLITTR+2,X'E0'   SIGNIFIES A MEMBER BEING PASSED
         BAL   REG14,WRITE    GO TO BWRITE
         B     NEXTMEMB       GO AND GET NEXT MEMBER
*                                                                  UL0H
* THIS ROUTINE CHECKS THE I/O ERROR FLAG IEHMVV74+4  THAT MAY BE   UL0H
* SET IN THE USER TRAILER LABEL EXIT ROUTINE                       UL0H
*                                                                  UL0H
CHLIOER  TM    IEHMVV74+4,X'FF'   TEST I/O ERROR FLAG              UL0H
         BCR   12,REG14           NOT ON - RETURN                  UL0H
         BAL   REG6,CLEAR         BLANK OUT PRINT BUFFER           UL0H
         L     REG7,MSGCONST      SET UP BASE REG FOR MSG          UL0H
         MVC PRINTOUT+1(89),M129  MOVE ERROR MSG TO PRINT BUFFER   UL0H
         BAL   REG6,GOTOMSGW      GO TO MSG WRITER                 UL0H
         BR    REG14              RETURN                           UL0H
*                                                                A44326
* THIS ROUTINE MOVES THE NOTELIST TO A SAVE AREA                 A44326
* AND ZEROES THE FIRST BIT OF EACH TTRX                          A52050
*                                                                A44326
MOVETTRX DS    0H                                                A44326
         IC    REG2,3(REG7)                                      A44326
         SLL   REG2,2                  FIND LENGTH OF TTRX FIELD A44326
         LA    REG3,256                                          A44326
MOVEON   DS    0H                                                A44326
         CR    REG2,REG3               ONE MOVE WILL DO          A44326
         BNH   PREPMOVE                YES MOVE AND RETURN       A44326
         BCTR  REG3,REG0               NO                        A44326
         EX    REG3,MVTTRX             MOVE 256 BYTES            A44326
         LA    REG3,1(REG3)                                      A44326
         SR    REG2,REG3               SUBTRACKT COUNTER         A44326
         AR    REG1,REG3               UPDATE OUTPUT             A44326
         AR    REG4,REG3               AND INPUT ADDRESSES       A44326
         B     MOVEON                  GO TO MOVE AGAIN          A44326
PREPMOVE DS    0H                                                A44326
         BCTR  REG2,REG0                                         A44326
         EX    REG2,MVTTRX             MOVE LAST BYTES           A44326
         IC    REG2,3(REG7)            NBR OF TTRX'S             A52050
         L     REG3,NLAREA             START OF NL               A52050
MAKEZERO DS    0H                                                A52050
         NI    0(REG3),X'7F'           ZERO FIRST BIT            A52050
         LA    REG3,4(REG3)            POINT TO NEXT ONE         A52050
         BCT   REG2,MAKEZERO           IF ANY                    A52050
         BR    REG6                    RETURN                    A52050
*ROUTINE TO CHECK IF MORE NOTELIST ARE PRESENT IN THE DIRECTORY RECORD
*AND IF SO POSITION THE POINTER TO ENABLE US TO GET BACK TO THE CORRECT
*SPOT IN THE MEMBER AFTER GOING OUT TO GET THE NOTELIST.
*
CKNEXT   SR    REG2,REG2
         IC    REG2,NOTELST   NUMBER OF NOTELISTS TO BE PROCESSED PLUS1
         BCT   REG2,NEXT      DO WE HAVE ANY MORE, IF YES GO TO NEXT
         TM    SWITCHES,X'01'          NOTELIST SAVED            A44326
         BO    HOLE                    YES WRITE A HOLE RECORD   A44326
         OI    SWITCHES,X'10'          NO MORE NOTELISTS         A44326
NEXT     LA    REG7,4(REG0,REG7)  POINT TO NEXT TTRN
         STC   REG2,NOTELST  SET NOTELIST COUNT TO ONE MINUS ORIG.
         B     SWTEST  LET'S SEE IF ANY MORE TTRN'S
NXTLIST  SR    REG2,REG2      CLEAR IT OUT
         IC    REG2,NLAREA                                       A44326
         LTR   REG2,REG2               ALL TTRX'S CHECKED        A44326
         BZ    CALLFRMN                YES FREE THE NOTELIST     A44326
         BAL   REG6,CLEAR              NO PREPARE WARNING        A44326
         LR    REG2,REG7               SAVE TTRN POINTER         A44326
         L     REG7,MSGCONST           BASE THE MSG CSECT        A44326
         MVC   PRINTOUT+1(MEND-M329),M329                        A44326
         LR    REG7,REG2               RESTORE THE TTRN PTR      A44326
         BAL   REG6,GOTOMSGW           PRINT THE MSG             A44326
CALLFRMN BAL   REG6,FREENL             GO TO FREEMAIN  NL        A44326
         SR    REG2,REG2                                         A44326
         IC    REG2,NOTELST
REDUCE   BCT   REG2,*+8       ANY MORE TTRW ENTRIES
         B     HOLE           NO MORE, WRITE HOLE RECORD
         STC   REG2,NOTELST  SET NOTELIST COUNT TO ONE MINUS ORIG.
         LA    REG7,4(REG0,REG7)  INCREMENT TO NEXT TTRN
         B     SETUPTTR       YES,FIX TTR AND GO
*
*A HOLE RECORD IS WRITTEN IN PLACE OF THE LAST NOTELIST FOUND IN THE
*DIRECTORY ENTRY. IT WILL BE 20 BYTES LONG WITH THE APPROPRIATE INDICA-
*TOR BYTES SET.
*
HOLE     OI    LLITTR+2,X'C4' THIS SETS INDICATOR FOR HOLE RECORD
         MVC   LLITTR(2),CONS20    NUMBER OF BYTES TRANSFERED
         BAL   REG14,WRITE         WRITE THIS RECORD OUT
         OI    SWITCHES,X'10'      NO MORE TTRN'S FOR THIS MEMBER
         NI    SWITCHES,X'FE'          CLEAR NL SWITCH           A44326
         B     NEXTMEMB            GET NEXT RECORD OF MEMBER
*  THIS ROUTINE FREEMAINS THE SAVED NOTELIST                     A44326
FREENL   DS    0H                                                A44326
         L     REG1,NLAREA             GET ADDR OF AREA          A44326
         LA    REG1,0(REG1)                                      A44326
         L     REG0,0(REG1)            GET THE LENGTH            A44326
         FREEMAIN R,LV=(REG0),A=(REG1)                           A44326
         BR    REG6                    RETURN                    A44326
*
*THIS ROUTINE WILL SET UP THE TTR OF THE NEXT RECORD OF THE MEMBER TO
*BE READ AFTER A POINT AND READ IS GIVEN TO GET A NEW NOTELIST RECORD.
*THIS MECHANISM ENABLES US TO USE THE SAME ROUTINE FOR EVERY SITUATION
*AND WE DON'T HAVE TO GIVE A POINT AND A DUMMY READ.
*
SETUPTTR IC    REG2,LASTNOTE+2     THE R PART OF THE TTR OF THE LST NTE
         LA    REG2,1(REG0,REG2)  UP THE R BY ONE
         STC   REG2,LASTNOTE+2     RETURN THE UPDATED R TO HOLD AREA
         MVC   13(3,REG9),LASTNOTE  MOVE THIS TTR TO DIRECT TTR
         B     NEXTTTRN
*
*ROUTINE TO COMPUTE LENGTH OF RECORD JUS READ
*
RECLGTH  SR    REG4,REG4           CLEAR REG4
         L     REG2,INDECB+16    ADDRESS OF IOB
         LH    REG3,14(REG2)       LOAD RESIDUAL COUNT FROM CSW IN REG3
         IC    REG4,16(REG8)       LOAD KEYLENGTH,MIGHT BE 0, IN REG4
         AH    REG4,62(REG8)       ADD BLOCKSIZE TO KEY LENGTH
         SR    REG4,REG3           HOW MUCH KEY AND DATA TRANSMITTED
         STH   REG4,LLITTR         STORE IN INDICATOR BYTES LL
         LR    REG3,REG14
         LR    REG14,REG3
         BR    REG14               GO BACK TO MAIN LINE
*
*THIS ROUTINE WILL SET UP THE APPROPRIATE REGISTERS FOR THE BWRITE RTN
*
*
WRITE    TM    SWITCHES,X'40' IS THE FIRST TIME SWITCH ON
         BC    1,OTHRTIMS     YES IT IS, BYPASS SOME INSTRUCTIONS
         OI    SWITCHES,X'40' SET THE SWITCH FOR EVERY OTHER TIME THRU
OTHRTIMS SR    REG0,REG0      OTHER CALL INDICATOR REG0=0
         LA    REG1,LLITTR   ADDRESS OF INPUT AREA FOR BWRIET
         L     REG15,BWRITE   BWRITE CONTAINS ADDRESS OF IEHMVERM
         LR    REG5,REG14
         BALR  REG14,REG15
         LR    REG14,REG5
         MVC   LLITTR+2(1),ZEROS  SET UP FOR NEXT RECORD
         B     *+4(REG15)     INTERROGATING THE RETURN CODES IN REG15
         B     0(REG14)       GOOD RETURN
         B     MSGRTN1        PERMANENT I/O ERROR
*
* THIS ROUTINE WILL TAKE CARE OF RECLGTHS ON BSAM SET THE IBDICATOR
*  AND WRITE OUT THE RECORD
*
DSORG    TM    26(REG8),X'02'    IS THIS DS A PDS
         BCR   1,REG14     IF ONES THEN IT IS A PDS
         OI    SAMSW,X'10'   THIS SAYS THAT THE UNLOAD IS A BSAM DS
         OI    SWITCHES,X'10'     INDIC NO NOTELIST              A44326
         B     NEXTMEMB
BSAMDS   BAL   REG14,RECLGTH     GO TO COMPUTE LENGTH OF RECORD READ
         OI    LLITTR+2,X'82'      INDICATOR FOR A BSAM DS
         BAL   REG14,WRITE    GO AND WRITE THIS RECORD
         MVI   LLITTR+2,X'00'    CLEAR INDICATOR BYTE FOR A BSAM DS
         B     NEXTMEMB
*
*THIS ROUTINE WILL LOAD THE MSG NUMBER IN A REGISTER AND GO TO MSGWRTER
*
MSGRTN   BAL   REG6,CLEAR    CLEAR OUT PRINT OUT AREA
         L     REG7,MSGCONST     SET UP BASE REG FOR MSG CSECT
         MVC   PRINTOUT+1(47),M126   ERROR MSG TO PRINT BUFFER
         BAL   REG6,GOTOMSGW             GO TO MESSAGE WRITER
MSGWERR  OI    IEHMVV20+2,X'40'    SET MID-ABORT BIT
         B     SKIPJR
MSGRTN1  BAL   REG6,CLEAR    CLEAR OUT PRINT BUFFER
         L     REG7,MSGCONST     SET UP BASE REG FOR MSG CSECT
         MVC   PRINTOUT+1(49),M127   ERROR MSG TO PRINT BUFFER
         L     REG1,IEHMVV21+4   ADDRESS OF DSNAME
         MVC   PRINTOUT+50(44),0(REG1)   MOVE DSNAME TO ERROR MSG
         BAL   REG6,GOTOMSGW    GO TO MSG WRITER
         B     MSGWERR
SINAD    BAL   REG6,CLEAR   CLEAR OUT PRINT BUFFER
         L     REG7,MSGCONST   SET UP BASE FOR MSG CSECT
         MVC   PRINTOUT+1(48),M189    ERROR MSG TO PRINT BUFFER
         L     REG1,IEHMVV21     ADDRESS OF DSNAME
         MVC   PRINTOUT+49(44),0(REG1)    MOVE DSNAME TO ERROR MSG
         BAL   REG6,GOTOMSGW    GO TO MSG WRITER
         B     MSGWERR
IEHCWMGN TM    SWITCHES,X'08'     FIRST TIME THRU GET MEMBER
         BC    1,SECOND       NO GO TO SECOND
         OI    SWITCHES,X'08'     SET FIRST TIME THRU SWITCH
         SR    REG0,REG0      REQUIREMENT FIRST TIME THRU
         B     SECOND+2
SECOND   LR    REG0,BASE10      LOAD IT POSITIVE
         STM   REG2,REG5,IEHMVV00    SAVE REGISTERS
         LR    REG5,REG14          SAVE RETURN
         IC    REG4,SWITCHES       SAVE SW
         SLL   REG4,8
         IC    REG4,SAMSW
         LA    REG3,IEHMVV00+16
         LR    REG2,REG0           LOAD FIRST TIME IND
         LINK   EP=IEHMVESR        GO TO GET MEMBER
         STC   REG4,SAMSW
         SRL   REG4,8
         STC   REG4,SWITCHES       REINSTATE SW
         LR    REG14,REG5          RESTORE RETURN
         MVC   0(87,REG9),IEHMVV00+16
         LM    REG2,REG5,IEHMVV00  RESET REG
         BR    REG14
*
*ROUTINE THAT WILL PRINT THE NAME OF THE MEMBER THAT WAS UNLOADED
*
PRTNAME  TM    SAMSW,X'10'    IS THIS A BSAM DS
         BC    1,WRAPUP   IF YES GO TO WRAPUP
         BAL   REG6,CLEAR      CLEAR PRINT BUFFER
         L     REG7,MSGCONST     SET UP BASE REG FOR MSG CSECT
         MVC   M128+6(8),MEMBER    MOVE MEMBER NAME TO LOG MSG
         MVC   PRINTOUT+1(32),M128     MOVE ERROR MSG TO PRONT BUFFER
         BAL   REG6,GOTOMSGW             GO TO MESSAGE WRITER
         NI    44(REG8),X'00'   SO I CAN READ AGAIN
         B     CHUCKRET   RETURN TO SET SWITCHES FOR NEXT MEMBER
*
* ROUTINE TO GO TO MESSAGE WRITER AND INTEEROGATE ITS RETURN CODE
*
GOTOMSGW ST    REG3,IEHMVV00+128       SAVE REG 3
         LA    REG3,PRINTOUT           LOAD ADDR OF PRINT AREA
         LINK EP=IEHMVESU              GO TO MSG WTR
         L     REG3,IEHMVV00+128        RESTORE REG 3
         B     *+4(REG15)     INTERROGATE RETURN CODE
         BR    REG6          RETURN CODE OF ZERO EVERYTHING OK
         B     MSGWERR         PERM I/O ERROR ON SYSPRINT
*
*CLEAR RTN TO CLEAR PRINT BUFFER BEFORE MOVUNG MSG IN
*
CLEAR    MVI   PRINTOUT,X'40' MOVE A BLANK IN FIRST POS OF PRNT BUF
         MVC   PRINTOUT+1(120),PRINTOUT  CLEAR OUT THE WHOLE BUFFER
         BR    REG6
*
*THIS ROUTINE WILL WRAPUP THE PROGRAM. THIS WILL TELL BWRITE WE ARE ALL
*DONE AND WILL RETURN CONTROL TO STEM.
*
WRAPUP   LPR   REG0,BASE10  LAST TIME INDICATOR TO BWRITE
         BAL   REG14,OTHRTIMS+2 GO TO BWRITE FOR LAST TIME
SKIPJR   TM    SWITCHES,X'10'          NOTELIST IN CORE          A44326
         BO    SKIPFRM                 NO  SKIP FREEMAIN         A44326
         BAL   REG6,FREENL             YES FREE THE NOTELIST     A44326
SKIPFRM  LR    REG1,REG11              ADDR OF MORECORE          A44326
         FREEMAIN  R,LV=124,A=(1)
         LR    REG1,REG9     ADDRESS OF WHERE TO FREE CORE FROM
         L     REG0,HOWMUCH     # OF BYTES TO FREE
         FREEMAIN R,LV=(0),A=(1)   FREE CORE MAN
         IEHPOST (0,1),T
         LA    REG2,WRAPJR    SET UP XCTL
         L     REG14,12(REG0,REG13)
         XCTL  (2,12),EPLOC=(2)
MVNTLIST MVC   AREALIST(1),17(REG9)   MOVE NOTELISTS
MVDIRTRY MVC   INPUT(1),5(REG9)   MOVE DIRECTORY ENTRY
MVTTRX   MVC   4(1,REG1),0(REG4)       MOVE TTRX'S FROM NOTELIST A44326
ZEROS    DC    F'0'
NUMB     DC    X'00'
CONS4    DC    F'4'
ANDNTLST DC    X'00000060'      USED TO GET NUMBER OF TTRN'S
ANDUSDTA DC    X'0000001F'      USED TO GET AMOUNT OF USER DATA
WRAPJR   DS    0D
         DC    C'IEHMVESN'     ENTRY POINT IN WRAPUP
CONS20   DC    H'20'      PLACED IN LL OF LLITTR FOR HOLE REC.
BWRITE   DC    A(IEHMVERM)    ADDRESS OF BWRITE MODULE
EODAD    DC    A(PRTNAME)    FOR EOD IN DCB
SYNAD    DC    A(SINAD)     FOR SINAD IN DCB
MSGCONST DC    A(MESSAGES)     ADDRESS OF ERROR MSG CSECT
         EXTRN IEHMVERM
XXITLE   DC    X'00'                   INPUT TRAILER LABEL         UL0H
         DC    AL3(ITLR)                    ROUTINE EXIT           UL0H
*                                                                  UL0H
*     USER     INPUT     TRAILER     LABEL     EXIT     ROUTINE    UL0H
*                                                                  UL0H
ITLR     DS    0H                                                  UL0H
OFFSET1  EQU   ITLR-IEHMVERD                                       UL0H
         LA    REG4,OFFSET1            SET UP                      UL0H
         SR    REG15,REG4              ADDRESSABILITY              UL0H
         LR    BASE10,REG15            FOR EXIT ROUTINE            UL0H
         L     REG4,0(0,REG1)           GET ADDR OF LABEL READ     UL0H
*                            FOR LATER MOVE TO USER                UL0H
         LTR   REG4,REG4                ARE USER LABELS PRESENT    UL0H
         BNE   IOERR                    YES. CHECK IF OK           UL0H
NOLABEL  DS    0H                                                  UL0H
         SR    REG15,REG15              NO, RETURN CODE 0 TO EOV   UL0H
*                                         TO IGNORE ADDITIONAL LAB UL0H
         BR    REG14                    RETURN TO EOV              UL0H
*                                                                  UL0H
IOERR    DS    0H                                                  UL0H
         CLI   8(REG1),X'80'            PERM ERROR FROM PARAM LIST UL0H
         BNE   TRKAVAIL                 NO. CHECK FOR TRACK AVAIL  UL0H
LABERR   DS    0H                                                  UL0H
         OI    IEHMVV74+4,X'FF'   SET I/O ERROR FLAG               UL0H
         BR    REG14                    RETURN TO EOV OPERATION    UL0H
TRKAVAIL DS    0H                                                  UL0H
         CLI   IEHMVV72+10,X'FF'        DA+NLT FLAG ON             UL0H
*                            INDICATES NO U.L. TRK ALLOCATED       UL0H
         BNE   CORAVAIL                 NO PROCESS LABELS          UL0H
*  OUTPUT MESSAGE - NO USER LABELS MOVE/COPIED.  NO LABEL TRACK.   UL0H
*                                                                  UL0H
         MVI   IEHMVV72+14,X'FF'        TELL CLOSE TO OUTPUT MSG   UL0H
         MVI   UDCBITLE,X'00'           DEACTIVATE LABEL EXIT      UL0H
         MVI   UDCBOTLE,X'00'           DEACTIVATE LABEL EXIT      UL0H
         B     NOLABEL                 GO RETURN CODE=ZERO TO EOV  UL0H
*                                                                  UL0H
CORAVAIL DS    0H                                                  UL0H
         CLC   IEHMVV72(4),ALLZEROS     CORE OBTAINED FOR LABELS   UL0H
         BNE   INITIAL                  YES, INITIALIZE POINTERS   UL0H
         GETMAIN R,LV=640              GET CORE FOR LABELS         UL0H
         ST    REG1,IEHMVV72           SAVE POINTER TO GOTTEN CORE UL0H
INITIAL  DS    0H                                                  UL0H
         CLC   0(4,REG4),UTL1DEF        IS THIS 1ST LABEL IN SET   UL0H
         BNE   SAVLABEL                NO, GO AROUND 1ST LBL SETUP UL0H
         MVC   IEHMVV72+4(4),IEHMVV72   SET POINTER TO LABEL SAVLOCUL0H
         MVI   IEHMVV72+12,X'00'        CLEAR LABEL COUNTER        UL0H
*                                                                  UL0H
SAVLABEL DS    0H                                                  UL0H
         L     REG6,IEHMVV72+4          GET ADDRESS OF CURRENT     UL0H
*                                         LABEL SAVEAREA           UL0H
         MVC   0(80,REG6),0(REG4)       SAVE LABEL IN GOTTEN CORE  UL0H
         LA    REG6,80(REG0,REG6)       UPDATE POINTER TO NEXT LO- UL0H
         ST    REG6,IEHMVV72+4            CATION IN LABEL SAVEAREA UL0H
         SR    REG4,REG4                 UPDATE                    UL0H
         IC    REG4,IEHMVV72+12           LABEL                    UL0H
         LA    REG4,1(REG4)                COUNTER                 UL0H
         STC   REG4,IEHMVV72+12             BY ONE                 UL0H
         LA    REG15,4                  RETURN CODE OF 4 TO EOV    UL0H
*                                         TO GET ADDITIONAL LABELS UL0H
         BR    REG14                    RETURN TO EOV              UL0H
*                                                                  UL0H
ALLZEROS DC    1F'0'                                               UL0H
UTL1DEF  DC    CL4'UTL1'                                           UL0H
DEACTIVE EQU   X'00'                                               UL0H
MESSAGES CSECT
M126     DC    CL8'IEH372I '
         DC    CL32'I/O ERROR ENCOUNTERED IN WORK DA'
         DC    CL7'TA SET.'
M127     DC    CL8'IEH326I '
         DC    CL32'I/O ERROR ENCOUNTERED IN OUTPUT '
         DC    CL9'DATA SET '
M128     DC    CL32'MEMBR          HAS BEEN UNLOADED'
M129     DC    CL29'PERM I/O ERROR WHILE READING '                 UL0H
         DC    CL30'USER INPUT TRAILER LABELS. NO '                UL0H
         DC    CL30'MORE LABELS WILL BE PROCESSED.'                UL0H
M189     DC    CL8'IEH389I '
         DC    CL32'I/O ERROR ENCOUNTERED IN INPUT D'
         DC    CL8'ATA SET '
M329     DC    CL8'IEH329I'                                      A44326
         DC    C'A TTR IN A NOTELIST CANNOT BE UPDATED'          A44326
MEND     DS    0C                                                A44326
*
*THIS IS THE WAY THE MOVE/COPY COMMUNICATION TABLE WILL LOOK AS FAR AS
*THE UNLOAD PDS IS CONCERNED.
*
*
MORECORE DSECT
SWITCHES DS    CL1                 USED FOR SWITCHES IN THE PROGRAM
INDECB   DS    6F     WHERE INPUT DECB IS TO BE LODGED
NOTELST  DS    FL1     NUMBER OF NOTELISTS OR TTRN'S
LASTNOTE DS    F       TTR OF LAST RECORD READ
LASTLIST DS    F     TTR OF LAST NOTE LIST
AREALIST DS    3F      WHERE TTRN'S ARE TO BE LODGED
HOLDTTR  DS    F
NLAREA   DS    F                       ADDR OF TTRX PTR IN NL    A44326
GETCORE  DSECT
         DS    CL88     WHERE GET MEMBER PUTS DIR ENTRY
TTRNPTR  DS    F    CONTENTS OF REG13 POINTING TO NOTELISTS
HOWMUCH  DS    1F
SAMSW    DS    FL1    BSAM SWITCH
PRINTOUT DS    31F         MSG WRITER BUFFER
MEMBER   DS    2F
LLITTR   DS    CL6                 USED AS AN INDICATOR TO BWRITE
INPUT    DS    1H
         IEHMVV
         ORG   IEHMVV70                                            UL0H
         IEHDCBXL                                                  UL0H
         END
