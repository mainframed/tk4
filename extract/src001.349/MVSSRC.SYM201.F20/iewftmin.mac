         TITLE 'PROGRAM FETCH    IEWFTMIN'
*
*2356 041400-041600                                                2125
*     093000,095800                                                3625
*0931095260                                                      A31918
*0931065000                                                      M6119
*058600-059299                                                   XM6366
*044420-044784,087020-087100                                     XM5009
*STATUS CHANGE LEVEL 003
*
*FUNCTION/OPERATION  PROGRAM FETCH IS PART OF THE RESIDENT NUCLEUS. ITS
*     FUNCTION IS THE LOADING AND RELOCATING OF EXECUTABLE MODULES INTO
*     CORE STORAGE.
*
*ENTRY POINTS  THE ENTRY POINT FOR FINCH (SUPERVISOR) IS IEWMSEPT.  THE
*     ENTRY POINT FOR OVERLAY SUPERVISOR IS IEWFBOSV. BOTH THESE
*     ROUTINES ENTER PROGRAM FETCH VIA A BRANCH AND LINK
*
*INPUT  SEE NOTES
*
*OUTPUT  SEE NOTES
*
*EXTERNAL ROUTINES  SEE NOTES
*
*EXITS  SEE NOTES
*
*TABLES/WORK AREAS  PROGRAM FETCH USES A WORK AREA THAT IS ALLOCATED AS
*     FOLLOWS  56 BYTES   CHANNEL PROGRAM
*               4 BYTES   ECB
*              32 BYTES   IOB
*               8 BYTES   I/O SEEK ADDRESS
*              12 BYTES   FETCH SEEK BUFFER
*              40 BYTES   REGISTER SAVE AREA
*             256 BYTES   RLD BUFFER
*
*ATTRIBUTES  READ ONLY - REENTRANT - PRIVELEGED - ENABLED - RESIDENT
*
*NOTES
*
*              ON ENTERING FETCH FINCH WILL PROVIDE THE FOLLOWING
*              PARAMETERS
*
*                         ADDRESS OF FETCH WORK CORE IN REG 3
*                         ADDRESS OF FETCH PARAMETER LIST IN REG 1
*                         RETURN ADDRESS IN REG 14
*
         EJECT
*              WHEN RETURNING TO FINCH FETCH WILL PROVIDE THE
*              FOLLOWING PARAMETERS
*
*                         REG 6 WILL BE SAVED ACROSS FETCH
*                         RELOCATED ENTRY POINT
*                             (LAST ENTRY IN FETCH PARAMETER LIST)
*                         RETURN CONDITION CODE IN REG 15
*                         IF PROGRAM IS IN OVEFLAY SEGTAB WILL BE
*                         INITIALIZED WITH DCB AND NOTE LIST
*                         ADDRESS AND THE TESTRAN BIT WILL BE SET
*                         IF REQUIRED
*
*
*
*                             FETCH PARAMETER LIST
*
*                   ****************************************
*                   *                                      *
*                0  *           DCB  ADDRESS               *
*                   *                                      *
*                   ****************************************
*                   *                                      *
*                4  *        CORE ADDRESS OF NOTE LIST     *
*                   *                                      *
*                   ****************************************
*                   *                                      *
*                8  *         ADDRESS OF BLDL ENTRY        *
*                   *                                      *
*                   ****************************************
*                   *                                      *
*               12  *       NUMBER OF RELOCATION FACTORS   *
*                   *                                      *
*                   ****************************************
*                   *                                      *
*               16  *       ADDRESS OF PROB PROG CORE      *
*                   *                                      *
*                   ****************************************
*                   *                                      *
*               20  *         RELOCATED ENTRY POINT        *
*                   *                                      *
*                   ****************************************
*
*
         EJECT
*
*
*
*              DURING THE EXECTION OF FETCH THE FOLLOWING ROUTINES
*              ARE REFERENCED
*
*                         TTR CONVERT ROUTINE
*                            CONVERT RELATIVE TRACK ADDRESS
*                            TO ABSOLUTE TRACK ADDRESS
*
*                         SUPERVISOR VALIDITY CHECK ROUTINE
*                            VALIDITY CHECK ADDRESS INTO
*                            WHICH FETCH LOADS A MODULE
*
*                         GETMAIN
*
*                         FREEMAIN
*
*                         EXCP  EXECUTE CHANNEL PROGRAM
*
*                         WAIT
*
*
*
*              THE FOLLOWING TERMINATION CODES ARE RETURNED BY
*              FETCH TO CONTENTS SUPERVISOR AND OVERLAY
*              SUPERVISOR IN REG 15  (LOW ORDER BYTE)
*
*                         X'00'  SUCCESSFUL LOAD
*                         X'0F'  PERMANENT IO ERROR
*                         X'0E'  INVALID ADDRESS
*                         X'0D'  INVALID RECORD TYPE
         EJECT
*              AN ERROR CODE RETURNED BY FETCH TO EITHER THE SUPERVISOR
*              OR OVERLAY SUPERVISOR RESULTS IN AN ABEND. IN THE CASE
*              OF A PERMANENT IO ERROR THE EXACT NATURE OF THE ERROR
*              CAN BE DETERMINED AS FOLLOWS
*
*                         REG 3 OF THE ABEND DUMP WILL CONTAIN THE
*                         ADDRESS OF THE WORK CORE USED BY FETCH
*
*                         60 BYTES FROM THE START OF THIS WORK CORE IS
*                         THE IOB USED BY FETCH
*
*                         IN THE IOB PLUS 8 BYTES IS THE CHANNEL STATUS
*                         WORD STORED BY IOS. AN ANALYSIS OF THE TWO
*                         BYTES OF STATUS INFORMATION WILL REVEAL
*                         THE EXACT NATURE OF THE IO ERROR
*
         EJECT
*
*
WKREGF   EQU   0                             WORK REG
ENDREG EQU   0
WKREGA   EQU   1                             WORK REG
PTRREG   EQU   1
WKREGB   EQU   2                             WORK REG
*MINBASE2 EQU   3                             BASE FOR DSECT
GREG3    EQU   3                       GENERAL REGISTER 3        PREMVM
MINBASE2 EQU   5                             BASE FOR DSECT      PREMVM
MINBASE1 EQU   4                             FETCH BASE REG
*PARREG   EQU   5                             PARAM. LIST ADDR
RELFACRG EQU   7
DCBREG   EQU   7                             DCB ADDR
NOTEREG  EQU   8                             NOTE LIST
PDSREG   EQU   9                             PARTITIONED DATA SET ADDR
CDEREG   EQU   9                       PTR TO CDE (ADDR IS IN    PREMVM
*                                      COMPLIMENT FORM ON ENTRY  PREMVM
*                                      FROM PROGRAM MANAGER)     PREMVM
WKREGD   EQU   10                            WORK REG
WKREGC   EQU   11                            WORK REG
WKREGE   EQU   12                            WORK REG
SEGREG   EQU   13                            SEGMENT NUMBER REG
LINKREG  EQU   14                            LINK/RETURN
CODEREG  EQU   15                            ERROR/TERMINATION CODE
RECONE   EQU   1                       REC NU FOR MBBCCHHR FLD   A31918
RECZERO  EQU   0                       REC NU FOR MBBCCHHR FLD  OS57172
EXCP     EQU   0
CVTPTR   EQU   16                      LOC OF CVT POINTER
CVTTCBP  EQU   0                       OFFSET FROM TCB TO TCB POINTER
CURRENT  EQU   4                       OFFSET FROM TCB PTR TO CURRENT
*                                       TCB POINTER
VEQR     EQU   X'80'                   VIRTUAL=REAL SWITCH
PRIVDCB  EQU   X'40'                    PRIV DCB IN USE SW.
KEYZERO  EQU   X'0F'                   MASK FOR DEB KEY ZERO     PREMVM
ADDR     EQU   B'0111'                  ADDR PART OF REG MASK
*
*
******   FETCH COMPLETION CODE DEFINITIONS                       PREMVM
*
SUCCESS  EQU   X'00'                   SUCCESSFUL FETCH          PREMVM
GMFAIL   EQU   X'0C'                   GETMAIN FAILED            PREMVM
INVREC   EQU   X'0D'                   INVALID CTL/RLD RECORD    PREMVM
INVADDR  EQU   X'0E'                   INVALID ADDRESS           PREMVM
*                  ABOVE RETURN CODE NOT SUPPORTED IN THIS VERSION
PERMIO   EQU   X'0F'                   PERMANENT I/O ERROR       PREMVM
*
         EJECT
*
*        INITIALIZATION ROUTINE
*
IEWFTMIN CSECT
         ENTRY IEWMSEPT
         ENTRY MINAPNDG                      APPENDAGE TABLE ENTRY PT
         SPACE
         SPACE
*IEWMSEPT LR    WKREGB,MINBASE1     CURRENT TCB ADDRESS
IEWMSEPT EQU   *                                                 PREMVM
         BALR  MINBASE1,0          FINCH (SUPERVISOR) ENTRY POINT
         USING MIN004,MINBASE1               FETCH BASE
*        USING WKCORE,MINBASE2               DSECT BASE
         USING WKAREA,MINBASE2               DSECT BASE          PREMVM
*MIN004  LR    PARREG,WKREGA                 PARAM ADDR TO PERM REG
*        LM    DCBREG,PDSREG,0(PARREG)       SET DCB,NOTE LIST + BLDL
MIN004   EQU   *                                                 PREMVM
         LR    MINBASE2,SEGREG         SET WORKAREA BASE         PREMVM
******   GETMAIN FOR EXTENT LIST/NOTE LIST AND PROB PROG SPACE
         LA    WKREGC,EXLSIZE          LENGTH OF EXTENT LIST     PREMVM
         LCR   WKREGB,CDEREG           ADDRESS OF CDE            PREMVM
         USING CDENTRY,WKREGB                                    PREMVM
         TM    CDATTR,CDMIN            MINOR CDE?                PREMVM
         BZ    MIN004B                 BRANCH IF NOT             PREMVM
         L     WKREGB,CDXLMJP          ADDRESS OF MAJOR CDE      PREMVM
MIN004B  EQU   *                                                 PREMVM
         LA    WKREGB,CDXLMJP          PTR TO EXTENT LIST PTR    PREMVM
         DROP  WKREGB                                            PREMVM
         LA    1,XGMLIST               POINT TO GETMAIN PARMLIST PREMVM
         GETMAIN  EC,LV=(WKREGC),A=(WKREGB),SP=255,MF=(E,(1))    PREMVM
         LTR   CODEREG,CODEREG         TEST RETURN CODE          PREMVM
         BZ    MIN004C                 BRANCH IF SUCCESSFUL      PREMVM
         LA    CODEREG,GMFAIL          SET ERROR CODE            PREMVM
         BR    LINKREG                 RETURN                    PREMVM
MIN004C  EQU   *                                                 PREMVM
         L     WKREGB,0(WKREGB)        GET ADDR OF XLIST/NLIST   PREMVM
         USING EXLNL,WKREGB                                      PREMVM
         ST    WKREGC,EXLLNTH          STORE TOTAL LIST LENGTH   PREMVM
         LA    WKREGC,1                NO. OF REL. FACTORS       PREMVM
         ST    WKREGC,EXLRELFC         STORE NO. OF BLOCKS       PREMVM
         SPACE
*    OBTAIN MAIN STORAGE FOR LOAD MODULE
         SPACE
         L     WKREGC,WKLNTH           MODULE LENGTH             PREMVM
         SRL   WKREGC,8                SHIFT OUT EXTRANEOUS BYTE PREMVM
         ST    WKREGC,EXLCORSZ         STORE MODULE SIZE         PREMVM
         MVI   EXLSZIND,SZIND          INDICATE A SIZE FIELD     PREMVM
         NC    WKIOADDR,WKIOADDR       TEST FOR PROBLEM PROGRAM  PREMVM
*                                      SPACE ALREADY ALLOCATED   PREMVM
         BNZ   MIN004D                 IF SO, BRANCH             PREMVM
         LA    WKREGE,EXLCORAD         POINT TO ADDR FIELD       PREMVM
         LA    1,XGMLIST               POINT TO GETMAIN PARMLIST PREMVM
         SPACE
*    TEST IF GETMAIN IS REQUIRED ON A PAGE BOUNDARY
         SPACE
         TM    WKATTR+1,PDS2ORG0       TEXT ORG'ED AT ZERO?      YM4612
         BZ    MIN004C5                NO, SKIP ALIGN TEST       YM4612
         TM    WKTXORG,PDS2PAGA        PAGE ALIGN REQD?          YM4612
         BZ    MIN004C5                GO IF NO                  YM4612
*                                      ELSE ISSUE GM ON PAGE BDY YM4612
         SPACE
         GETMAIN  EC,LV=(WKREGC),A=(WKREGE),SP=(WKREGD),MF=(E,(1)),    X
               BNDRY=PAGE                                        YM4612
         SPACE
         B     MIN004C7                AND CONTINUE              YM4612
         SPACE
MIN004C5 EQU   *
         SPACE
         GETMAIN  EC,LV=(WKREGC),A=(WKREGE),SP=(WKREGD),MF=(E,(1))
         SPACE
MIN004C7 EQU   *
         L     WKREGE,0(WKREGE)        GET P/P RELOC FACTOR      PREMVM
         LTR   CODEREG,CODEREG         TEST RETURN CODE          PREMVM
         BZ    MIN004E                 BRANCH IF SUCCESSFUL      PREMVM
         LA    CODEREG,GMFAIL          SET ERROR CODE            PREMVM
         BR    LINKREG                 RETURN                    PREMVM
MIN004D  EQU   *                                                 PREMVM
         L     WKREGE,WKIOADDR         GET ADDR OF P/P SPACE     PREMVM
         ST    WKREGE,EXLCORAD         STORE IT IN EXTENT LIST   PREMVM
MIN004E  EQU   *                                                 PREMVM
         ST    WKREGE,PPADDR           SAVE P/P RELOC FACTOR     PREMVM
         MVI   EXLADIND,ADIND          INDICATE AN ADDR FIELD    PREMVM
         LA    NOTEREG,NOTELIST        SET NOTELIST POINTER      PREMVM
         ST    NOTEREG,NOTESAVE        SAVE NOTELIST ADDRESS     PREMVM
         DROP  WKREGB                                            PREMVM
         LCR   WKREGB,CDEREG           GET CDE ADDR              PREMVM
         USING CDENTRY,WKREGB                                    PREMVM
         OI    CDATTR2,CDXLE          INDICATE EXTENT LIST BUILT PREMVM
         DROP  WKREGB                                            PREMVM
         LA    PDSREG,WKNAME           SET PTR TO BLDL ENTRY     PREMVM
         LA    SEGREG,1                      SET SEG NO. TO 1
*        TM    31(WKREGB),X'02'    TEST XCTL TO PROBLEM PROGRAM
*        BZ    MIN005
*        NI    31(WKREGB),X'FD'    CLEAR FLAG
         BC    15,MIN005
         EJECT
MIN005   BALR  MINBASE1,0                    RESET BASE
         USING *,MINBASE1
         OI    IOB,X'03'                     INIT IOB FLAGS
         ST    MINBASE2,IOB+16               INIT IOB CHAN PRG POINTER
         ST    DCBREG,IOB+20                 DCB ADDR INIOB
         ST    DCBREG,DCBSAVE          SAVE DCB ADDRESS          PREMVM
         NI    SWITCH,X'00'            INITIALIZE SWITCH TO ZERO PREMVM
MIN0053  L     WKREGA,44(DCBREG)        POINT TO DEB
MIN0053A EQU   *                                                 PREMVM
         USING DEBBASIC,WKREGA         ESTABLISH DSECT BASE      PREMVM
         TM    DEBFLGS1,DEBAPFIN       AUTHORIZED LIBRARY?       PREMVM
         BZ    MIN0053B                IF NOT, BRANCH            PREMVM
         OI    WKFLG1,WKAUTH           SET AUTH. LIBRARY SWITCH  PREMVM
         DROP  WKREGA                  DROP DSECT BASE           PREMVM
MIN0053B EQU   *                                                 PREMVM
         LA    WKREGB,MINAPNDG               GET APENDG. ADDR
         O     WKREGB,MINDBMSK         SET DEBEXSCL TO 04 IN REG 22125
         ST    WKREGB,28(WKREGA)       STOR APNDG ADDR IN DEB    22125
         LA    WKREGA,ECB                    ADDR OF ECB
         ST    WKREGA,IOB+4                  ECB ADDR IN IOB
         XC    IOB+28(2),IOB+28              CLEAR IOB BLOCK COUNT
         LA    WKREGA,IOBSKBUF+3             TO SET  SEARCH ADDR
         ST    WKREGA,CHPG1
         MVI   CHPG1,X'31'                   RESET OP CODE
         ST    MINBASE2,CHPG1+8              SET TIC TO ADDR
         MVC   CHPG1+4(5),CPROG1             SET SRCH FLGS+CNT & TIC OP
         MVC   CHPG1+40(16),CPROG2           SET READ COUNT AND DATA
         MVC   CHPG1+20(4),CHPG1+4            SET CC&COUNT IN T/N
         LA    WKREGA,SEEKBUF+3
         ST    WKREGA,CHPG1+40
         MVI   CHPG1+40,X'9E'
         MVC   CHPG1+24(8),CHPG1+40
MIN0055  LR    WKREGA,SEGREG                 SEG NO. TO WORK REG
*        L     RELFACRG,16(PARREG)           GET REL FAC NON-OVER
         L     RELFACRG,PPADDR         GET REL FAC FOR 1ST LOAD  PREMVM
         LA    RELFACRG,0(RELFACRG)
MIN009   LM    WKREGF,WKREGA,12(PDSREG)      GET TTR FOR TEXT
         SLDL  WKREGF,16                     SET TTR IN REG
         IC    WKREGF,11(PDSREG)             CONCAT. FACTOR
         BAL   WKREGE,MIN0201                TO CONVERT RTN SET UP
         EJECT
*
*        FETCH LOADING ROUTINE
*
         LA    WKREGC,CHPG1+32               ADDR OF TIC TO LOC
         BAL   WKREGE,MIN020+4
         TM    23(PDSREG),X'40'              ED ASSIG ORIGIN IS ZERO
         BC    8,MIN0091
         ST    RELFACRG,CHPG1+32             STOR ADDR FOR FIRST TXT
         BC    15,MIN0092
MIN0091  L     WKREGA,32(PDSREG)             ORIGIN OF FIRST TXT
         SRL   WKREGA,8
         AR    WKREGA,RELFACRG               ADD RELOCATION FAC
         ST    WKREGA,CHPG1+32               STOR IN CHAN PROG
MIN0092  MVI   CHPG1+32,X'06'                RESTOR OP CODE
         MVC   CHPG1+38(2),27(PDSREG)        SET COUNT IN TEXT CCW
         TM    22(PDSREG),X'01'              TEST 1TXT (3 RLD
         BC    8,MIN010
         MVI   CHPG1+36,X'00'                CLEAR CHAIN FLAG
         MVI   RLDBUF,X'FF'                  SET FETCH LAST INDIC
         BC    15,MIN0101
MIN010   MVI   CHPG1+36,X'40'                SET CC BIT IN RD TEXT CCW
         LA    WKREGA,RLDBUF                 ADDR OF RLD BUF
         ST    WKREGA,CHPG1+48               STOR ADDR IN CHAN PROG
         MVI   CHPG1+48,X'06'                RESTOR OP CODE
         MVC   CHPG1+53(3),CPROG3+5          RESET RD DATA COUNT CCW
MIN0101  LA    WKREGE,MIN014                 SET RET FOR EXCP
MIN011   MVC   IOBSKBUF+1(7),SEEKBUF+1       SEEK ADDR TO IOB SEEK BUFF
         MVI   ECB,X'00'                     CLEAR ECB FLAGS
MIN01015 LA    WKREGA,IOB                    SET FOR EXCP
         SVC   EXCP
MIN0121  WAIT  1,ECB=ECB
MIN013   TM    ECB,X'20'                     TEST PERM IO ERROR
         BCR   1,WKREGE                      BRANCH X'20' NO ERROR
         LA    CODEREG,X'0F'
         B     MIN0320                       RETURN IO ERROR
MIN014   TM    RLDBUF,X'FF'                  TEST FETCH LAST INDIC
         BC    1,MIN032                      TO TERM
         BAL   WKREGE,MIN018                 CHK CORR LENGTH
         MVC   CHPG1+52(4),CPROG3+4          RESET CCW
         TM    RLDBUF,X'02'                  TEST FOR RLD TYPE REC
         BC    1,MIN021                      BRANCH RLD TYPE
         TM    RLDBUF,X'01'                  TEST CCW TYPE
         BC    1,MIN016                      BRANCH CCW
         LA    CODEREG,X'0D'
         B     MIN0320                       RETURN INVALID RLD
MIN016   TM    RLDBUF,X'04'                  TEST NEXT REC LAST
         BC    8,MIN017                      BRANCH NEXT NOT LAST
         MVI   CHPG1+36,X'00'                PULL CC BIT
         MVI   RLDBUF,X'FF'                  SET FETCH LAST INDIC
MIN017   L     WKREGA,RLDBUF+8               GET CCW DATA ADDR
         LA    WKREGA,0(RELFACRG,WKREGA)     RELOCATE DATA ADDR
         LR    WKREGB,WKREGA                 SET ADDR TO VAL CHK
         BAL   WKREGE,MIN0202                TO VAL CHK SET-UP
         AH    WKREGB,RLDBUF+14              VAL CHK END TXT ADDR
         BCTR  WKREGB,0            ADJ TO ADDRESS LAST TXT BYTE
         BAL   WKREGE,MIN0202                TO VAL CHK SET-UP
         ST    WKREGA,CHPG1+32               STOR CHKED ADDR IN CCW
         MVI   CHPG1+32,X'06'                RESTOR OP CODE
         MVC   CHPG1+37(3),RLDBUF+13         COUNT TO RD TEXT CCW
         LA    WKREGC,CHPG1+24          TIC TO FIRST '9E'        M6119
         BAL   WKREGE,MIN020+4          IN C. P. CHAIN.          M6119
         BC    15,MIN0101
MIN018   LH    WKREGA,IOB+14                 GET RESID CT FROM IOB
         LTR   WKREGA,WKREGA                 TEST FOR ZERO CT
         BCR   8,WKREGE
         LA    WKREGB,256                    GET MAX COUNT
         SR    WKREGB,WKREGA                 SUB RESID COUNT
         LA    WKREGA,16
         AH    WKREGA,RLDBUF+6               CALC CORR LENGTH
         AH    WKREGA,RLDBUF+4               ADD NO. OF BYTES OF ESDID
         CR    WKREGA,WKREGB                 DO BYTES READ=CALC COUNT
         BCR   8,WKREGE                      READ OK
         LA    WKREGA,0(WKREGA)
         ST    WKREGA,CHPG1+52               PULL SILI+SET EX CNT
         BAL   WKREGE,MIN020                 TO SET CHAN PROG
         BC    15,MIN0101
MIN019   TM    RLDBUF,X'01'                  TEST REC FOR RLD+CCW
         BC    1,MIN016                      BRANCH YES
         TM    RLDBUF,X'04'                  THIS REC LAST
         BC    1,MIN032                      LAST-TO NORMAL TERM
         LA    WKREGC,CHPG1+40
         BAL   WKREGE,MIN020+4
         BC    15,MIN0101
         EJECT
*
*        THIS IS THE SET CHANNEL PROGRAM SUBROUTINE
*
MIN020   LA    WKREGC,CHPG1+48               GET ADDR RD DATA CCW
         ST    WKREGC,CHPG1+16               SET TIC ADDR
         MVI   CHPG1+16,X'08'                RESTOR OP CODE
         BCR   15,WKREGE                     RETURN
*
*        THIS IS THE SUBROUTINE THAT SETS PARAMS. FOR TTR CONVERT RTN
*
MIN0201  STM   PDSREG,CODEREG,REGSAVE+12     SAVE REG 9-15
*   VALIDITY CHECK THE DEB AS WE DIDN'T COPY IT
*        L     WKREGA,44(DCBREG)        R1=DEB FOR TTR CONV
         L     WKREGA,DCBSAVE          GET DCB ADDRESS           PREMVM
         L     WKREGA,44(WKREGA)       GET DEB ADDRESS IN R1     PREMVM
         TM    SWITCH,PRIVDCB           IS IT A PRIVATE DCB?
         BZ    MIN02015                 GO IF NO
*        ST    WKREGF,REGSAVE+4         SAVE R0
*VALIDAT DEBCHK (LINKREG),TYPE=VERIFY        DEBPTR IS RETD IN R1
*        L     WKREGF,REGSAVE+4         RESTORE R0
         L     WKREGA,DEBSAVE          USE VALIDATED DEB PTR     PREMVM
MIN02015 LA    WKREGB,SEEKBUF                ADDR OF SEEK BUF
         L     CODEREG,CVTRTN                ADDR OF CONVERT RTN
         BALR  LINKREG,CODEREG
         MVC   IOBSKBUF(1),SEEKBUF           M TO IOB
         LM    PDSREG,CODEREG,REGSAVE+12     RESTOR REG
         BCR   15,WKREGE                     RETURN
CVTRTN   DC    V(IECPCNVT)
MINDBMSK DC    X'04000000'             MASK FOR DEBEXSCL         22125
*
*        VALIDITY CHECK SET UP ROUTINE
*
*        THIS ROUTINE SAVES AND RESTORES THE REGISTERS USED
*        BY THE VALIDITY CHECK ROUTINE. IT ALSO SETS UP THE
*        REQUIRED PARAMETERS AND TESTS THE CONDITION CODE
*        RETURNED BY THE VALIDITY CHECK ROUTINE
*
*MIN0202 LR    WKREGD,SEGREG                 TEST FOR OVERLAY
*        BCT   WKREGD,MIN02021               OVERLAY VAL CHK
*  TM  16(PARREG),X'FF'           TEST FOR PROG TO PP CORE
*        BCR   8,WKREGE                      NOT PP CORE SKIP VAL CHK
*MIN02021 STM   7,10,REGSAVE+12               SAVE REGS FOR VAL CHK
*        LR    7,WKREGB                      ADDR TO BE VAL CHK'D
*        L     8,16                          ADDR OF CVT
*        L     8,24(8)                       ADDR OF VAL CHK RTN
*        SR    9,9                           NO TCB ADDR
*        BALR  10,8                          TO VAL CHK RTN
*        BC    8,MIN0203                     BRANCH ADDRESS VALID
*        LA    CODEREG,X'0E'
*        B     MIN0320                       RETURN
*MIN0203 LM    7,10,REGSAVE+12               RESTOR REGS
MIN0202  EQU   *                                                 PREMVM
         BCR   15,WKREGE                     RETURN
         EJECT
*
*        FETCH RELOCATION ROUTINE
*
MIN021   LA    PTRREG,RLDBUF+16              SET PTR TO FIRST RPFA
         LR    ENDREG,PTRREG
         AH    ENDREG,RLDBUF+6               CALC SIZE OF BUFF
MIN022 LA    PTRREG,4(PTRREG)              SKIP R+P POINTERS
MIN023 TM    0(PTRREG),X'E0'               TEST RELOCATION REQUIRED
       BC    7,MIN026                      BRANCH NOT REQUIRED
       L     WKREGB,0(PTRREG)              ADDR OF LOAD CONSTANT
         LA    WKREGB,0(RELFACRG,WKREGB)     ADD RELOCATION
         BAL   WKREGE,MIN0202                TO VAL CHK SET-UP
         SR    WKREGD,WKREGD                 CLEAR REG
       ST    WKREGD,REGSAVE                CLEAR REG SAVE AREA
       NI    0(PTRREG),X'0F'               CLEAR UNWANTED FLAGS
       IC    WKREGD,0(PTRREG)              COUNT INTO REG
       SRL   WKREGD,2
       LA    WKREGC,REGSAVE+3              SET ADDR OF BOUNDARY WORD
       SR    WKREGC,WKREGD                 SET BOUND. WORD TO ' BYTES
       EX    WKREGD,MIN027                 MOVE ADCON TO BOUND WRD
       L     WKREGE,REGSAVE                LOAD FROM BUND WRD
         TM    0(PTRREG),X'02'               ADD OR SUB RELOC FACTOR
         BC    8,MIN024                      BRANCH TO ADD
       SR    WKREGE,RELFACRG               SUB RELOCATION FACTOR
         BC    15,MIN025
MIN024   AR    WKREGE,RELFACRG               ADD RELOC FACTOR
MIN025 ST    WKREGE,REGSAVE                RET TO BOUNDARY WORD
       EX    WKREGD,MIN028                 RET ADCON
MIN026 LR    WKREGC,PTRREG                 SAVE POINTER
       LA    PTRREG,4(PTRREG)              ADD 4 TO COUNT
       CR    PTRREG,ENDREG                 DOES PTR =END
       BC    8,MIN019                      COMPLETE  BRANCH OUT
       TM    0(WKREGC),X'01'               TEST TERM FLAG
       BC    1,MIN023                      SAME R++
       BC    15,MIN022                     DIFF R+P POINTERS  INDEX+4
         SPACE
MIN027 MVC   0(1,WKREGC),0(WKREGB)
MIN028 MVC   0(1,WKREGB),0(WKREGC)
         EJECT
*
*        FETCH TERMINATION
*
MIN032   SR    CODEREG,CODEREG               SET SUCCESSFUL LOAD CODE
MIN0320  EQU   *                                                 PREMVM
MIN0320A EQU   *                                                 PREMVM
         LTR   CODEREG,CODEREG          TEST IF ERROR IN FETCH   PREMVM
         BCR   7,LINKREG                AND BR IF YES            XM5009
MIN0321  TM    23(PDSREG),X'20'              ED ASIGN ENT PT = ZERO
         BC    1,MIN033
         L     WKREGA,28(PDSREG)             GET ENTRY POINT
         LA    RELFACRG,0(RELFACRG,WKREGA)   GET RELOCATED EP    PREMVM
*MIN033   ST    RELFACRG,20(PARREG)           REL ENT PT TO FETCH LIST
MIN033   LR    WKREGE,RELFACRG               PASS RELOCATED EP   PREMVM
         BCR   15,LINKREG                    RETURN
         EJECT
*
*    PAGE FIX LIST
*
         CNOP  0,8                     INSURE DBL WRD BOUNDARY   M6455
FIXLIST  DC    X'00'
         DC    AL3(MINAPNDG)           BEGINNING OF FIX AREA
         DC    X'80'                   LAST OF LIST INDICATOR
         DC    AL3(MINAPG02+2)         END OF FIX AREA
*
         SPACE
         SPACE
*
*        END OF EXTENT APPENDAGE
*
*        THIS ROUTINE WILL RECEIVE CONTROL FROM IOS WHEN
*        IOS DETECTS AN END OF EXTENT CONDITION ON AN EXCP
*        BY FETCH. THE FUNCTION OF THIS ROUTINE IS TO UPDATE
*        THE SEEK ADDRESS IN THE IOB AND UCB WITH THE
*        NEXT EXTENT ADDRESS FROM THE DEB.
*
         SPACE
MINAPNDG DC    A(MINAPG00)                   END OF EXTENT
         DC    A(MINAPG02)                   RETURN
         DC    A(MINAPG02)                   RETURN
         DC    A(MINAPG02)             C.E.                      23625
         DC    A(MINAPG02)                   RETURN
         SPACE
MINAPG00 SR    WKREGE,WKREGE                 CLEAR REG FOR M
*        IC    WKREGE,48(7)                  GET M FROM UCB
         IC    WKREGE,0(6)                   GET M FROM MBBCCHHR PREMVM
         LA    WKREGE,1(WKREGE)              INDEX M BY 1
*        STC   WKREGE,48(7)                  STOR NEW M IN UCB
         STC   WKREGE,0(6)                   STOR NEW M IN SEEK@ PREMVM
*        CLC   16(1,3),48(7)                 CHK FOR LAST EXTENT
         CLC   16(1,3),0(6)                  CHK FOR LAST EXTENT PREMVM
         BCR   12,LINKREG                    ERROR RETURN
         SLL   WKREGE,4                      USE M AS INDEX FACTOR
         LA    WKREGE,32(WKREGE,3)           CALC PTR TO NEW EXTENT
*        MVC   49(6,7),4(WKREGE)             BBCCHH TO UCB
         MVC   1(6,6),4(WKREGE)              BBCCHH TO SEEK FLD  PREMVM
*        MVI   55(7),RECONE             R IN CCHHR IN UCB TO ONE A31918
         MVI   7(6),RECZERO          SET R IN CCHHR IN   PREMVM,OS57172
*                                    SEEK ADDR TO ZERO   PREMVM,OS57172
*        MVC   32(8,2),48(7)           SET IOBSEEK = UCB         23625
         MVC   32(8,2),0(6)            SET IOBSEEK = SEEK FIELD  PREMVM
         SPACE
****************
*  SET THE 2ND TIC FOLLOWING THE SEARCH-ID CCW TO POINT TO THE
*  CORRECT READ COUNT CCW IN CASE THE CHANNEL PROGRAM IS RESTARTED
*  BY THE DASD ERP AFTER A CORRECTABLE I/O ERROR ON THE 1ST RECORD
*  OF THE NEW EXTENT. THIS PREVENTS RECROSSING THE END-OF-EXTENT
*  AND TRYING TO UPDATE TO THE NEXT EXTENT PREMATURELY, WHICH
*  WOULD BE DISASTROUS.                                         OS57172
****************
         SPACE
         LR    WKREGE,WKREGB           POINT TO THE IOB         OS57172
         LA    WKREGC,IOB-(CHPG1+17)   OFFSET FROM TIC ADDR FLD OS57172
*                                      TO START OF IOB          OS57172
         SR    WKREGE,WKREGC           POINT TO TIC ADDR FLD    OS57172
         L     WKREGC,8(WKREGB)        GET CURRENT CCW POINTER  OS57172
*                                      FROM CSW IN IOB          OS57172
         LA    WKREGD,8                WIDTH OF ONE CCW         OS57172
         SR    WKREGC,WKREGD           BACK UP CSW PTR TO POINT OS57172
*                                      TO START OF LAST CCW     OS57172
*                                      EXECUTED                 OS57172
         STCM  WKREGC,ADDR,0(WKREGE)   SET TIC-TO ADDRESS       OS57172
         BC    15,8(LINKREG)                 RETURN
         SPACE
         SPACE
MINAPG02 BCR   15,LINKREG                    NORMAL RETURN
         EJECT
*
*        FETCH CHANNEL PROGRAM
*
CPROG1   DC    XL1'60'
         DC    XL3'05'
         DC    XL1'08'
*
*
*
CPROG2   DC    XL1'9E'
         DC    AL3(0)
         DC    XL1'A0'
         DC    XL3'08'
*
*
*
CPROG3   DC    XL1'06'
         DC    XL3'0'
         DC    XL1'20'
         DC    XL3'100'
*
*
*
*        FETCH CONSTANTS
LINKDCB  DC    V(IEFLINK)
SVCDCB   DC    V(IEASVDCB)
         EJECT
*        IKJTCB   SYS=AOS1                                        M6455
         IKJTCB   SYS=AOS2                                       PREMVM
         EJECT
**************************************************************** PREMVM
*
*     COMBINED EXTENT LIST / NOTE LIST CONSTRUCTED BY FETCH
*     WHEN INVOKED BY CONTENTS SUPERVISOR. THE NOTE LIST
*     PORTION EXISTS ONLY FOR MODULES IN OVERLAY STRUCTURE.
*
EXLNL    DSECT
EXLIST   DS    0F        START OF EXTENT LIST
EXLLNTH  DS    F              LENGTH OF EXTENT (PLUS NOTE) LIST
EXLRELFC DS    F              NUMBER OF CORE BLKS FOR MODULE
EXLCORSZ DS    0F             SIZE OF CORE BLK ALLOC TO MODULE
EXLSZIND DS    XL1              - FLAG TO IND A SIZE FIELD
EXLSZBLK DS    FL3              - SIZE IN BYTES
EXLCORAD DS    0F             ADDRESS OF CORE BLOCK ALLOCATED
EXLADIND DS    XL1              - FLAG TO IND AN ADDRESS FIELD
EXLADBLK DS    AL3              - ADDRESS OF FIRST BYTE
*
SZIND    EQU   X'80'          SIZE INDICATOR
ADIND    EQU   X'00'          ADDR INDICATOR
EXLSIZE  EQU   *-EXLIST       LENGTH OF XTENT LIST PORTION
*
*        NOTE LIST FOR OVERLAY MODULES.
*
NOTELIST DS    0F        BEGINNING OF NOTELIST
NLRELFAC DS    F         RELOCATION FACTOR FOR THE MODULE
*                        (ALSO, THE ADDRESSS OF THE SEGTAB)
NLCORSIZ DS    XL3       MS CORE REQUIREMENT OF THE MODULE
NLCONCAT DS    XL1       CONCATENATION NUMBER OF MODULE DATA SET
NLENTRYS DS    0F        NOTELIST ENTRIES(ONE/SEGMENT)...
NLSEGTTR DS    XL3            TTR FOR READING THE SEGMENT
NLZERO   DC    X'00'          ZERO
*--------
NLENTSZ  EQU   2         ENTRY SIZE (FOR SHIFT-MULTIPLY)
NLPFXSZ EQU   8          LENGTH OF NL PREFIX PORTION
         EJECT
         IHACDE
         EJECT
         IEZDEB
**************************************************************** PREMVM
         EJECT
         IHAFETWK
         SPACE
*
*
         ORG   WKFETCH                                           PREMVM
*WKCORE   DSECT
WKCORE   EQU   *                                                 PREMVM
CHPG1    DS    7D                            CHANNEL PROG
ECB      DS    1F                            EVENT CONTROL BLOCK
IOB      DS    8F                            IO BLOCK
IOBSKBUF DS    2F                            IOB SEEK BUFFER
SEEKBUF  DS    3F                            SEEK BUFFER
REGSAVE  DS    10F                           REG SAVE AREA
RLDBUF   DS    64F                           RLD BUFFER
DCBSAVE  DS    1F                      SAVE DCB ADDRESS          PREMVM
NOTESAVE DS    1F                      SAVE NOTELIST ADDRESS     PREMVM
PPADDR   DS    1F                      SAVE P/P RELOC FACTOR     PREMVM
PSDCB    EQU   *-44                    PSEUDO DCB TO LOCATE DEB  PREMVM
*                                      COPY AFTER VALIDATION     PREMVM
DEBSAVE  DS    1F                      ADDRESS OF DEB COPY       PREMVM
DEBLEN   DS    1F                      SIZE OF COPIED DEB        PREMVM
*
*
SWITCH   EQU   CHPG1+13                SWITCH BYTE
*                                       X'80' TASK IS RUNNING V=R
PGFIXECB EQU   REGSAVE                 ECB USED TO FIX THE AVT
*                                       AND EOX APPENDAGE
*
*
*        REGSAVE
*           1-4  BOUNDARY WORD FOR RELOCATION RTN
*           5-8
*           9-12
*          13-40 REG SAVE AREA  9-15
*
         SPACE 3
         ORG   WKNAME                                            PREMVM
         IHAPDS  DSECT=NO                                        PREMVM
         END
