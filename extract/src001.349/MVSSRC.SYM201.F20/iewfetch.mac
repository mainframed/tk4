FCH2   TITLE   'IEWFETCH...PROGRAM LOADING ROUTINE...FETCH WORK AREA.'
         MACRO
&NAME    IHAFETWK  &DSECT=YES
         AIF   ('&DSECT' EQ 'NO').NODSECT
WKAREA   DSECT
.NODSECT ANOP
WKFETCH  EQU   *                  FETCH WORKAREA
*              THE FOLLOWING SEGMENT DESCRIBES THE STRUCTURE OF THE
*              WORK AREA USED BY FETCH.
*
FTIOB    DS    8F                 IOB USED FOR EXCP REQUESTS
FTIOBSK  DS    2F                 IOB SEEK ADDRESS
*********************
XAREA    DS    0F
XKEY     DC    CL4'FTWA'          FETCH IDENTIFICATION KEY
XFLAGS   DS    0XL4               FETCH CONTROL FLAGS            Y02081
XFLAG1   DS    X                  TRANSLATE/FIX CONTROL FLAGS
* ---------- XFLAG1 BIT DEFINITIONS
NEWIOFLG EQU   X'80'              FRESH I/O REQUEST ISSUED
ACTXTFLG EQU   X'40'              READ-TEXT CCW IS ACTIVE IN CURRENT CP
SYNRDFLG EQU   X'20'              SYNC READ ISSUED (NO PCI)
USDEBFLG EQU   X'10'              USERS DEB COPIED INTO GOTTON CORE
TXTREAD  EQU   X'08'          SIO APPENDAGE TXT READ INDICATOR   YM2867
VAMDEV   EQU   X'04'                ** UCB INDICATES A VIRTUAL   Y02081
*                           IF ON  **  DEVICE IS BEING FETCHED   Y02081
*                                   ** FROM (VAM DATA SET)       Y02081
RPSDEV   EQU   X'02'                ** DEVICE BEING FETCHED FROM Y02081
*                           IF ON  **  SUPPORTS ROTATIONAL       Y02081
*                                   ** POSITION SENSING (RPS)    Y02081
RELERR   EQU   X'01'                ** AN INVALID ADCON ADDRESS  Y02081
*                           IF ON  **  WAS ENCOUNTERED IN THE    Y02081
*                                   ** DIE RELOCATE ROUTINE      Y02081
* --------------
XFLAG2   DS    X                       CONTROL FLAGS - BYTE 2    Y02081
* ---------- XFLAG2 BIT DEFINITIONS                              Y02081
BADREC   EQU   X'80'                ** AN INVALID RECORD         Y02081
*                           IF ON  **  TYPE WAS ENCOUNTERED      Y02081
*                                   ** IN THE DIE ROUTINE        Y02081
TXTFIX   EQU   X'40'                ** THE DIE ROUTINE FOUND THE Y02081
*                           IF ON  **  NEXT TEXT RECORD TO BE    Y02081
*                                   ** OUTSIDE THE PGFIX'D AREA  Y02081
ONETXT   EQU   X'20'                ** THE MODULE BEING READ     Y02081
*                           IF ON  **  CONTAINS ONE TEXT RECORD  Y02081
*                                   ** WITH NO RLD RECORDS       Y02081
PRGFREE  EQU   X'10'                ** PURGE SUBROUTINE          Y02081
*                           IF ON  **  HAS ALREADY               Y02081
*                                   ** FREED RESOURCES.          Y02081
ACRRELOC EQU   X'08'                ** WHEN WE BRANCH TO PCI APG Y02081
*                           IF ON  **  AFTER COMMAND RETRY       Y02081
*                                   ** RELOCATION IS REQD        Y02081
CPLOOP   EQU   X'04'                ** CHANNEL PROGRAM LOOP HAS  Y02081
*                           IF ON  **  BEEN DETECTED BY POST     Y02081
*                                   ** STATUS NORMAL EXIT RTN    Y02018
CTLERR   EQU   X'02'                ** AN INVALID ADDRESS WAS    Y02081
*                           IF ON  **  FOUND IN A CONTROL RECORD Y02081
*                                   ** BY THE DIE ROUTINE        Y02018
IOSBFREE EQU   X'01'                ** IOSB/SRB HAS BEEN         YM8279
*                           IF ON  **  FREEMAINED IN  TERMNATION YM8279
* --------------                                                 Y02081
         DS    2X                 - RESERVED -                   Y02081
*********************
FTSKBUF1 DS    2F                                                Y02081
FTSKBUF2 DS    2F                                                Y02081
FTSKBUF3 DS    2F                                                Y02081
FTSKBUF4 DS    2F                                                Y02081
FTCPSRCH DS    4D                 SEARCH AND TIC CCWS            Y02081
FTRBUF1  DS    32D                RLD BUFFER 1                   Y02081
FTCP1    DS    6D                 CHAN PROG 1                    Y02081
FTRBUF2  DS    32D                RLD BUFFER 2                   Y02081
FTCP2    DS    6D                 CHAN PROG 2                    Y02081
FTRBUF3  DS    32D                RLD BUFFER 3                   Y02081
FTCP3    DS    6D                 CHAN PROG 3                    Y02081
FTECB    DS    1F
FTFXECB  DS    1F                 ECB FOR PGFIX REQUESTS         Y02081
FTTBLPTR DS    1F                 POINTER TO CURRENT FTTBL ENTRY Y02081
FTTBL    DS    9F                 BUFFER TABLE
FTTBL2   EQU   FTTBL+12           2ND ENTRY IN BUFFER TABLE      Y02081
FTTBL3   EQU   FTTBL+24           3RD ENTRY IN BUFFER TABLE      Y02081
FTREGSV  DS    16F                REGISTER SAVE AREA
FTRPTR   DS    1F                 ADDR OF R POINTER
FTFLAGS  DS    0FL8               FETCH CONTROL FLAGS            Y02081
FTFLG1   DS    XL1                FLAG BYTE 1                    Y02081
FTFLG2   DS    XL1                FLAG BYTE 2                    Y02081
FTFLG3   DS    XL1                FLAG BYTE 3                    Y02081
FTFLG4   DS    XL1                FLAG BYTE 4                    Y02081
FTRESTRT DS    1F                 ADDR OF PREVIOUS RBUF USED     Y02081
*                                 IN THE DIE ROUTINE TO LOCATE   Y02081
*                                 LAST TIC-TO ADDR TO SET UP     Y02081
*                                 THE TIC IN THE SRCHID CP FOR   Y02081
*                                 RESTART                        Y02081
FTLASTBF DS    1F                 PTR TO PRIOR BUFR TABLE ENTRY
*
*              EXTENSION TO FETCH WORK AREA
*
XSOMAD   DS    F                  LOWER CORE LIMIT FOR LOAD MODULE
XEOMAD   DS    F                  UPPER CORE LIMIT FOR LOAD MODULE
XLOFIX   DS    F                  LOWER BOUND FOR TEXT AREA FIX REQ
XHIFIX   DS    F                  UPPER BOUND FOR TEXT AREA FIX REQ
XNEXTLOC DS    F                  LOCATION OF NEXT TEXT BYTE READ
XTRANTAB DS    0XL8               CCW TRANSLATION DATA --
XCCWAD   DS    F                  POINTER TO CCW REQ TRANSLATION
XTXTAD   DS    F                  VIRTUAL ADDRESS IN THE CCW
XIDALP1  DS    AL4(XALAREA1)      POINTER TO IDAL BUILD AREA
XIDALP2  DS    AL4(XALAREA2)      POINTER TO ALTERNATE IDAL AREA
XALAREA1 DS    10F                IDAL AREA
XALAREA2 DS    10F                IDAL AREA
XGMLIST  DS    4F                 GETMAIN LIST AREA
XORGDCB  DS    1F                 ORIGINAL LOAD DCB ADDRESS
XIOSBAD  DS    1F                 ADDR OF IOSB/SRB TO BE FREED
XDEBLEN  DS    1F                 SIZE OF MS OBTAINED FOR DEB(INC SP)
XRETSAV  DS    1F                      REGISTER 14 SAVE AREA     Y02081
XREGSV3  DS    1F                      REGISTER 3 SAVE AREA      YM1070
XREGSV6  DS    1F                      REGISTER 6 SAVE AREA      YM1070
XSECTAD  DS    1X                      BUFFER FOR READ/SET       Y02081
*                                      SECTOR COMMANDS WHEN      Y02081
*                                      WHEN FETCHING FROM AN RPS Y02081
*                                      DEVICE                    Y02081
         DS    3X                      RESERVED                  Y02081
XFTCBAD  DS    1F                      ADDRESS OF TCB FETCH IS   Y02081
*                                      RUNNING UNDER (SAVED FOR  Y02081
*                                      USE BY PURGE SUBROUTINE)  Y02081
*----PSEUDO DCB DEFINITION (USED WITH THE COPIED DEB).
XDCBDEBO EQU   44             OFFSET OF DEB ADDR IN DCB          Y02081
         ORG   *-XDCBDEBO     ORG BACK OVER UNUSED FIELDS
XDCBCOPY EQU   *              START OF DCB
         ORG   *+XDCBDEBO     RESTORE LOC COUNTER
XDCBDEBA DS    1F             PSEUDO 'DCBDEBAD' FIELD
*----END OF PSEUDO DCB DEFINITION.
XESTAEPT DS    1F                 ADDRESS SAVED IOSB/SDWA        Y02081
XESTLIST DS    1F                 ESTAE MACRO PARAMETER LIST     Y02081
XIOBSEK1 DS    XL5                IOBSEEK SAVE 1                 Y02081
XIOBSEK2 DS    XL5                IOBSEEK SAVE 2                 Y02081
         DS    2X                 RESERVED                       Y02081
*---PSUEDO SVRB FETCH W.A. POINTER USED TO SET UP CORRECTLY IN ESTAE
*    WHEN WE HAVE AN OVERLAY SUPERVISOR REQUEST. THE FOLLOWING WORD
*    POINTS TO THE FETCH WORK AREA AND IS SET UP AT ESTAE MACRO TIME
*    FOR AN OVERLAY SUPERVISOR REQUEST.  THE ORG BEHIND IT MAKES IT
*    LOOK LIKE ITS IN THE SVRB BY ORGING TO THE SAME OFFSET THE
*    WORK AREA POINTER IS STORED AT IN THE SVRB BY CONTENTS
*    SUPERVISOR.
XESTAWKA DS    1F                 ESTAE PTR TO FETCH W.A.        Y02081
XESTAORG EQU   XESTAWKA-X'74'     OV SUPVR ESTAE PTR             Y02081
         SPACE
*---------------MISC. EQUATES
IDALNTRY EQU   4                  SIZE OF EACH IDAL ENTRY
FIXLOENT EQU   0                  OFFSET TO LOW ENTRY PORTION
FIXHIENT EQU   4                  OPPSET TO HIGH ENTRY PORTION
FIXENTSZ EQU   8                  SIZE OF SIX-LIST ENTRY
ECBERRIN EQU   FTFXECB+3          ECB ERROR INDICATOR
********************* PROGRAM MANAGER WORK AREA
PGMMGR   EQU   X'0594'                                           *TEMP*
         ORG   WKFETCH+PGMMGR     OVERLAY PGM MGR WORK AREA AT   *TEMP*
*                                 CORRECT OFFSET                 *TEMP*
WKPGMMGR EQU   *                  PROGRAM MANAGER WORK AREA
WKCDADDR DS    A                  ADDRESS OF CDE
WKIOADDR DS    A                  ADDRESS OF AREA GETMAINED.  FETCH
*                                 WILL DO I/O INTO THIS AREA
WKFLAG   DS    C                  TASKLIB SEARCH INDICATOR
FLAG     EQU   WKFLAG             USED FOR COMPATIBILITY
WKFLG1   DS    C                  FLAGS FIELDS
WKAUTH   EQU   X'80'              FETCH PLACES THE LIBRARY
*                                 AUTHORIZATION FORM THE DEB HERE
WKSYSREQ EQU   X'40'              USER IS SYSTEM REQUEST
WKFLGS2  DS    2C                 RESERVED
WKREGIS  DS    4F                 USED TO SAVE REGISTERS ACROSS BLDL
WKTCBSE  DS    A                  ADDRESS OF TCB CONTAINING LAST DCB
WKDCBSE  DS    A                  ADDRESS OF LAST DCB SEARCH ARGUMENT
********************* BLDL ENTRY AND MASK
WKBLDE   EQU   *                  BLDL LIST
WKPREFX  DS    4C                 MASK FOR BLDL REQUEST
WKNAME   DS    8C                 THIS IS THE BASE
WKTTRN   DS    4C                 AREA OF A
WKZBYTE  DS    1C                 FORMAT 2 PDS
WKCBYTE  DS    1C                 DIRECTORY ENTRY WITH
WKTTESD  DS    8C                 2 BYTE MODIFIED
WKATTR   DS    2C                 BY BLDL
WKLNTH   DS    5C                       *
WKENTPT  DS    3C                       *
WKTXORG  DS    3C                       *
WKAPFSSI DS    CL6                APF AND SSI INFO IF PRESENT
         ORG   WKAPFSSI           OVERLAY FOR ALISA, NO SCATTER
WKENTBK  DS    3C                 USED IF THE MODULE IS AN ALIAS
WKNAMBK  DS    8C                 AND HAS RENT OR REUS ATTRIBUTES
*                                 AND NO SCATTER
         DS    CL6                APF AND SSI INFO IF PRESENT
         ORG   WKAPFSSI           * OVERLAY FOR WKENTBK
WKSCATR  DS    8C                 USED FOR MODULES
WKSCAPSI DS    CL6                APF AND SSI IF SCATTER ONLY
         ORG   WKSCAPSI           OVERLAY FOR SCATTER ALIAS
WKNAMSC  DS    8C                 HAVE RENT OR REUS ATTRIBUTES
WKENTSC  DS    3C                 WHICH ARE SCATTER LOADED
         DS    CL6                APF AND SSI INFO IF PRESENT
WKMAINEP DS    4C                 USED TO MAKE DSECT CONSISTANT
WKMAINAM DS    8C                 REGARDLESS OF ATTRIBUTES
WKEND    EQU   *                  END OF BLDL FETCH WORK AREA
WKSIZE   EQU   WKEND-WKFETCH      SIZE OF WORK AREA
         MEND
        TITLE 'IEWFETCH...PROGRAM LOADING ROUTINE...EQUATES'
IEWFETCH CSECT
         ENTRY IEWFBOSV
         ENTRY IEWMSEPT
         ENTRY IEWFTPRG                                          Y02081
         ENTRY IEWFTXCK                                          Y02081
         SPACE
*------- ID FLAGS FOR MODULE RECORDS.
CTLFLG   EQU   X'01'               CONTROL RECORD
RLDFLG   EQU   X'02'               RLD RECORD
ENDFLG   EQU   X'04'               END OF MODULE OR END OF SEGMENT
CTLCCW   EQU   8                   OFFSET OF RD-TXT CCW IN CONTROL REC
RLDATA   EQU   16                  OFFSET TO START OF RLD DATA   Y02081
*                                  ON AN RLD RECORD              Y02081
RLDLEN   EQU   6                   OFFSET TO RLD DATA BYTE COUNT Y02081
*                                  FIELD ON AN RLD RECORD        Y02081
RELREQ   EQU   X'E0'               MASK FOR BIT PATTERN IN AN    Y02081
*                                  RLD DATA ITEM WHICH MUST BE   Y02081
*                                  ALL ZEROES TO INDICATE THAT   Y02081
*                                  RELOCATION IS REQUIRED        Y02081
ADCLEN   EQU   X'0F'               IMMEDIATE BYTE USED FOR       Y02081
*                                  ISOLATING ADCON LENGTH        Y02081
RELNEG   EQU   X'02'               NEGATIVE RELOCATION INDICATOR Y02081
SAMERP   EQU   X'01'               BIT INDICATING NEXT RLD ITEM  Y02081
*                                  HAS SAME R&P POINTERS AS THE  Y02081
*                                  CURRENT ITEM                  Y02081
TSTBITS  EQU   X'F0'               MASK FOR UNUSED BITS IN 1ST   Y02081
*                                  BYTE OF CTL/RLD RECORDS (MUST Y02081
*                                  BE ZERO -- TESTED TO DETECT   Y02081
*                                  INVALID RECORD TYPES)         Y02081
*
*------- FETCH RETURN CODES.
RCNORMAL EQU   X'00'               SUCCESSFUL LOAD
RCPRGCHK EQU   X'0B'               PROG CHECK OR LOOP IN FETCH   Y02081
RCNOCORE EQU   X'0C'               NOT ENOUGH STOR SPACE FOR MOD Y02081
RCBADREC EQU   X'0D'               INVALID RECORD TYPE ENCOUNTERED
RCBADADR EQU   X'0E'               INVALID ADDRESS ENCOUNTERED
RCIOERR  EQU   X'0F'               PERMANENT I/O ERROR
*
*------- DCB OFFSETS
DCBDEBAD EQU   44                  OFFSET TO DEB ADDRESS FIELD IN DCB
DCBFIX   EQU   4                   SIZE OF FIX REQMNT FOR DCB
AVTPTR   EQU   28                  AVT POINTERS IN DEB           Y02081
*
*------- VOID (VECTOR OF IOS DRIVERS) OFFSETS                    Y02081
VOIDFTPG EQU   84                  OFFSET TO VOID ENTRY FOR      Y02081
*                                  FETCH PURGE RTN ADDR          Y02081
VOIDFTXK EQU   92                  OFFSET TO VOID ENTRY FOR      Y02081
*                                  FETCH EXTENT CHECK RTN ADDR   Y02081
*
*------- STRING LENGTH OF FETCH CHANL PGMS(INTERNAL CCWS ONLY).
CPSRCHCT EQU   4                   SEARCH CCW COUNT
CP1CT    EQU   5                   FIRST CP CCW COUNT
CP2CT    EQU   5                   SECOND CP CCW COUNT
CP3CT    EQU   5                   THIRD CP CCW COUNT
*
*------- EQUATES FOR CCW HANDLING.
CCWOPR   EQU   0                   COMMAND FIELD
CCWADR   EQU   1                   ADDRESS FIELD                 Y02081
CCWFLG   EQU   4                   CCW FLAGS
CCWLEN   EQU   6                   COUNT FIELD
CCWSZ    EQU   8                   SIZE OF CCW
READOP   EQU   X'06'               READ-DATA COMMAND CODE
IDALFLAG EQU   X'04'               IDAL FLAG (BIT 37 OF CCW)
PCI      EQU   X'08'               PCI BIT FOR CCW FLAGS         YM1082
CMCH     EQU   X'40'               CMD CHAIN BIT FOR CCW FLAGS   YM1082
SILI     EQU   X'20'               SILI BIT FOR CCW FLAGS        YM1082
SRCHTIC  EQU   24                  OFFSET TO TIC CCW IN SRCH CP  Y02081
CPRDRLD  EQU   16                  OFFSET TO READ-RLD CCW IN REG CP
TICOFFST EQU   32                  OFFSET TO TIC FROM CCW START  YM2867
RDCT1AD  EQU   9                   OFFSET TO ADDRESS FIELD OF    Y02081
*                                  FIRST READ COUNT CCW          Y02081
RDCT1FL  EQU   12                  OFFSET TO FLAG FIELD OF       Y02081
*                                  FIRST READ COUNT CCW          Y02081
RDCT2AD  EQU   25                  OFFSET TO ADDRESS FIELD OF    Y02081
*                                  SECOND READ COUNT CCW         Y02081
RDCT2FL  EQU   28                  OFFSET TO FLAG FIELD OF       Y02081
*                                  SECOND READ COUNT CCW         Y02081
RDCNT2   EQU   24                  OFFSET TO 2ND READ COUNT CCW  Y02081
RDRLDAD  EQU   17                  OFFSET TO ADDRESS FIELD OF    Y02081
*                                  READ RLD/CTL RECORD CCW       Y02081
RDRLDFL  EQU   20                  OFFSET TO FLAG FIELD OF       Y02081
*                                  READ RLD/CTL RECORD CCW       Y02081
RDSECAD  EQU   41                  OFFSET TO ADDRESS FIELD OF    Y02081
*                                  READ SECTOR CCW               Y02081
SCHTICAD EQU   25                  OFFSET TO ADDRESS FIELD OF    Y02081
*                                  2ND TIC IN SEARCH CH PGM      Y02081
SCHIDAD  EQU   9                   OFFSET TO ADDRESS FIELD OF    Y02081
*                                  SEARCH ID CCW                 Y02081
TIC      EQU   X'08'               TIC-CCW COMMAND CODE          YM2867
RLDTICOF EQU   16                  OFFSET-CTL/RLD TO NOP/TIC     YM2867
NOP      EQU   X'03'               NOP-CCW COMMAND CODE          YM2867
*
*------- EQUATES FOR VAM CHANNEL PROGRAM CCW HANDLING.
VAMRDRLD EQU   8                   OFFSET TO RD RLD IN VAM C.P.  Y02081
VAMNOPTC EQU   16                  OFFSET TO NOP/TIC IN VAM C.P. Y02081
VAMNOPAD EQU   17                  ADDRESS IN NOP/TIC CCW        Y02081
*                                  IN VAM C.P.                   Y02081
VAMFLAGS EQU   4                   OFFSET TO CCW FLAGS           Y02081
*                                  IN VAM C.P.                   Y02081
VAMTXTAD EQU   1                   OFFSET TO ADDRESS IN TXT      Y02081
*                                  RECORD                        Y02081
VAMCNT   EQU   6                   OFFSET TO TXT COUNT           Y02081
*                                  IN VAM C.P.                   Y02081
RDOPMULT EQU   X'86'               OP CODE FOR MULTI-TRACK READ  YM5962
CPADDRES EQU   16                  CHANNEL PGM ADDRESS IN IOB    Y02081
DCBADDRS EQU   20                  DCB ADDRESS IN IOB            Y02081
ECBADDRS EQU   4                   ECB ADDRESS IN ECB            Y02081
SRCHADDR EQU   1                   ADDR PORTION OF SEARCH CCW    Y02081
SRCHCCW  EQU   9                   ADDR PORTION OF 1ST TIC CCW   Y02081
TICTOADD EQU   17                  ADDR PORTION OF 2ND TIC CCW   Y02081
RLDBUFAD EQU   9                   ADDR PORTION OF READ RLD CCW  Y02081
*
*------- MISC DEFINITIONS
ALL      EQU   X'FF'               MASK FOR ALL BITS IN A BYTE
DEBCORE  EQU   254                 SUBPOOL NUMBER FOR DEB CORE
ADDR     EQU   B'0111'             MASK FOR ADDRESS PART OF REGISTER
HIBYT    EQU   B'1000'             REGISTER HIGH-ORDER BYTE MASK Y02081
KEYZERO  EQU   X'0F'               MASK FOR DEB KEY ZERO
TBLBUFAD EQU   8                   OFFSET OF BUFR PTR IN TBL ENTRY
TBLCPAD  EQU   4                   OFFSET OF CH PGM PTR IN TBL ENTRY
MBB      EQU   3                   EXTENT/BIN PART OF DISK ADDRESS
CCHHR    EQU   3                   CYL/HEAD/REC PART OF DISK ADDRESS
SKSIZ    EQU   5                   LNGTH OF A SEEK FIELD (CCHHR) Y02081
ZERO     EQU   0                   ZERO OFFSET                   Y02081
R14      EQU   56                  OFFSET TO REG 14              Y02081
R1OFFSET EQU   4                   OFFSET TO R1 IN SAVEAREA      Y02018
R2OFFSET EQU   8                   OFFSET TO R2 IN SAVEAREA      Y02018
CVTADDR  EQU   16                  PTR TO CVT ADDR.              Y02081
CURRTCB  EQU   4                   CURRENT TCB PTR.              Y02081
EXCP     EQU   0                   SVC NUMBER FOR EXCP
XLISTADR EQU   16                  OFFSET TO EXTENT LIST ADDR IN CDE
REC0     EQU   0                   INIT VALUE OF R IN CCHHR      A34466
TWENTY   EQU   20                  OFFSET OF DCB ADDR IN IOB       7157
SIXTYEG  EQU   X'68'               IMMEDIATE OPERAND               7157
JOBLIBOF EQU   40                  JOBLIB DCB PTR IN TCB         A34037
MRZEUSBT EQU   X'01'               USED IN DEB FILE MASK          M6068
*                                  TO SHOW MER/ZEUS DEVICE        M6068
RETRY    EQU   4                   ESTAE-INDICATE RETRY          Y02081
FLAGBYTE EQU   0                   1ST BYTE(FLAGS) IN SEGTAB     YM4648
LISTSIZ  EQU   16                  LENGTH OF XGMLIST             YM3247
LASTCTL  EQU   X'40'               LAST CTL RECORD IN BUFFER     Y02081
LASTREC  EQU   X'80'               LAST RECORD HAS BEEN READ     Y02081
RLDEND   EQU   X'0F'               LAST RLD HAS BEEN READ        Y02081
FTIOBFL  EQU   X'02'               PCI FETCH FLAG IN IOB         Y02081
SPINBYTE EQU   13                  OFFSET TO BYTE ON WHICH BIT   Y02081
*                                  SPIN IS PERFORMED IN RLD BUF  Y02081
CNTWT    EQU   X'80'               COUNT BUF PSEUDO WAIT
IOERRBT  EQU   X'20'               BIT IN I/O ECB TESTED AFTER   Y02081
*                                  EXCP -- 0=ERROR, 1=NORMAL     Y02081
SGTBNTLS EQU   4                   OFFSET IN SEGTAB FOR NOTELIST Y02081
*                                  ADDRESS                       Y02081
SGTBTST  EQU   X'40'               SEGTAB TEST INDICATOR BIT     Y02081
SVRBWKA  EQU   X'74'               OFFSET TO FETCH WORKAREA      Y02081
*                                  POINTER IN PROG MGR SVRB      Y02081
POSTIOSB EQU   X'7F'               IOSB NORMAL COMP.  @ZA10583   YM8292
DEBFREE  EQU   X'EF'               TURN OFF DEB GM FLAG          ZA0135
PGMASK   EQU   B'0001'             PGFIX RETURN MASK           @ZA07064
         EJECT
*------- GENERAL REGISTER EQUATES
WKREGF   EQU   0                   WORK REGISTER
WKREGA   EQU   1                   WORK REGISTER
WKREGB   EQU   2                   WORK REGISTER
WKREGD   EQU   4                   WORK REGISTER
WKREGC   EQU   5                   WORK REGISTER                 Y02081
DCBREG   EQU   7                   DCB PTR PASSED TO FETCH BY CALLER
LISTREG  EQU   8                   NOTELIST PTR PASSED BY OVLY SUP
SEGREG   EQU   9                   SEGMENT NO. PASSED BY OVLY SUP
FTBASETR EQU   9                   WORK REGISTER
IDREG    EQU   10                  SUBPOOL ID FOR GETMAIN
FTBASE1  EQU   11                  BASE REGISTER FOR MAINLINE
WKREGE   EQU   12                  WORK REGISTER
FTBASE2  EQU   13                  BASE REGISTER FOR WORK AREA
LINKREG  EQU   14                  RETURN ADDR FOR SUBRTN LINKAGE
CODEREG  EQU   15                  ENTRY POINT ADDR REGISTER
*
*        THE FOLLOWING REGISTERS ARE USED BY FETCH APPENDAGE ROUTINES
*
WKRG0    EQU   0                   WORK REGISTER
WKRG1    EQU   1                   WORK REGISTER
IOSREG   EQU   1                   POINTER TO IOSB               Y02081
IOBREG   EQU   2                   IOB PTR ON ENTRY TO APPENDAGES
WKRG2    EQU   2                   WORK REGISTER                 Y02081
DEBREG   EQU   3                   POINTER TO DEB
WKRG3    EQU   3                   WORK REGISTER
WKRG4    EQU   4                   WORK REGISTER
WKRG5    EQU   5                   WORK REGISTER
WKBASE   EQU   6                   WORKAREA BASE IN DIE          Y02081
WKRG6    EQU   6                   WORK REGISTER                 Y02081
UCBREG   EQU   7                   POINTER TO UCB
WKRG7    EQU   7                   WORK REGISTER                 Y02081
WKRG8    EQU   8                   WORK REGISTER                 Y02081
WKRG9    EQU   9                   WORK REGISTER
WKRG10   EQU   10                  WORK REGISTER
WKRG11   EQU   11                  WORK REGISTER
WKRG12   EQU   12                  WORK REGISTER
WKRG13   EQU   13                  WORK REGISTER
WKRG14   EQU   14                  WORK REGISTER
RETURNRG EQU   14                  RETURN ADDR TO IOS FROM APPENDAGES
WKRG15   EQU   15                  WORK REGISTER
        TITLE 'IEWFETCH...PROGRAM LOADING ROUTINE...PROLOGUE'
***********************************************************************
*                      MODULE SPECIFICATIONS                          *
***********************************************************************
*                                                                     *
*        MODULE-NAME = IEWFETCH                                       *
*                                                                     *
*        DESCRIPTIVE-NAME = PROGRAM FETCH                             *
*                                                                     *
*        STATUS = CHANGE-LEVEL 00                                     *
*                                                                     *
*        FUNCTION = THIS MODULE LOADS AND RELOCATES EXECUTABLE        *
*              PROGRAM MODULES AND OVERLAY SEGMENTS INTO VIRTUAL      *
*              STORAGE FOR:                                           *
*                  1) PROGRAM MANAGER                                 *
*                  2) OVERLAY SUPERVISOR                              *
*                                                                     *
*        NOTES =                                                      *
*                                                                     *
*              DEPENDENCIES = N/A                                     *
*                                                                     *
*              RESTRICTIONS = N/A                                     *
*                                                                     *
*              REGISTER-CONVENTIONS = SEE REGISTER EQUATES ABOVE      *
*                                                                     *
*              PATCH-LABEL = THIS MODULE CONTAINS THE FOLLOWING       *
*                  TWO MAINTENANCE AREAS:                             *
*                       1) FETCHPA1  FOR USE IN MAINLINE CODE         *
*                       2) FETCHPA2  FOR APPENDAGE ROUTINES           *
*                                                                     *
*        MODULE-TYPE = PROCEDURE                                      *
*                                                                     *
*              PROCESSOR = SYSTEM/370 OS/VS2 ASSEMBLER                *
*                                                                     *
*              MODULE-SIZE = APPROXIMATELY 6K BYTES                   *
*                                                                     *
*              ATTRIBUTES = REENTRANT, REUSABLE, REFRESHABLE,         *
*                           PRIVILEDGED, SUPERVISOR STATE, KEY ZERO,  *
*                           RESIDENT IN PAGEABLE LINK PACK AREA,      *
*                           DISABLED (IN DIE ROUTINE ONLY)            *
*                                                                     *
*        ENTRY-POINT = IEWMSEPT                                       *
*                                                                     *
*              PURPOSE = TO LOAD A PROGRAM MODULE                     *
*                                                                     *
*              LINKAGE = BRANCH ENTRY FROM PROGRAM MANAGER            *
*                        THE ENTRY SEQUENCE IS:                       *
*                            L     CVTBASE,16(0,0)                    *
*                            L     R15,CVTFETCH(CVTBASE)              *
*                            BALR  R14,R15                            *
*                                                                     *
*        ENTRY-POINT = IEWFBOSV                                       *
*                                                                     *
*              PURPOSE = TO LOAD AN OVERLAY SEGMENT                   *
*                                                                     *
*              LINKAGE = BRANCH ENTRY FROM OVERLAY SUPERVISOR         *
*                        THE ENTRY SEQUENCE IS:                       *
*                            L     CVTBASE,16(0,0)                    *
*                            L     R15,CVTFBOSV(CVTBASE)              *
*                            BALR  R14,R15                            *
*                                                                     *
*        INPUT = 1) PARAMETERS PASSED IN GENERAL REGISTERS            *
*                   (DESCRIBED IN DETAIL BELOW)                       *
*                2) COMBINED FETCH/PROGRAM MANAGER WORK AREA          *
*                   (SEE DSECT GENERATED BY MAPPING MACRO IHAFETWK)   *
*                                                                     *
*        OUTPUT = SEE DETAILED MODULE DESCRIPTION BELOW               *
*                                                                     *
*        EXIT-NORMAL = L    R15,=F'0'                                 *
*                      BR   R14                                       *
*                      SEE BELOW FOR FURTHER DETAIL                   *
*                                                                     *
*        EXIT-ERROR = L    R15,NON-ZERO ERROR CODE                    *
*                     BR   R14                                        *
*                     SEE EQUATES ABOVE FOR FURTHER DETAIL            *
*                                                                     *
*        EXTERNAL-REFERENCES =                                        *
*                                                                     *
*              ROUTINES = PROGRAM FETCH BRANCH ENTERS THE             *
*                         FOLLOWING SUPERVISOR ROUTINES:              *
*                            1) TTR CONVERT ROUTINE                   *
*                            2) ECB POST ROUTINE                      *
*                            3) PURGE/RESTORE IPIB QUIESE COUNT       *
*                               DECREMENT/POST SUBROUTINE             *
*                            4) PGFREE/PGFIX ROUTINES                 *
*                                                                     *
*              DATA-AREAS = THE FOLLOWING DATA AREAS ARE USED AND/OR  *
*                           MODIFIED BY PROGRAM FETCH:                *
*                            1) PROGRAM MANAGER/FETCH WORK AREA       *
*                            2) OVERLAY SEGMENT TABLE (SEGTAB)        *
*                            3) PDS DIRECTORY ENTRY                   *
*                            4) COMMUNICATION VECTOR TABLE (CVT)      *
*                            5) FIXED LOW CORE AREA (PSA)             *
*                                                                     *
*              CONTROL-BLOCKS = THE FOLLOWING CONTROL BLOCKS ARE      *
*                               CREATED, USED, AND/OR MODIFIED BY     *
*                               PROGRAM FTECH:                        *
*                            1) PROGRAM EXTENT LIST/NOTELIST          *
*                            2) DASD ERP WORKAREA                     *
*                            3) DATA EXETENT BLOCK (DEB)              *
*                            4) DATA CONTROL BLOCK (DCB)              *
*                            5) UNIT CONTROL BLOCK (UCB)              *
*                            6) CONTENTS DIRECTORY ENTRY (CDE)        *
*                            7) TASK CONTROL BLOCK (TCB)              *
*                            8) I/O SUPERVISOR BLOCK (IOSB)           *
*                            9) SERVICE REQUEST BLOCK (SRB)           *
*                            10) ADDR SPACE CONTROL BLOCK (ASCB)      *
*                            11) ASCB EXTENSION (ASXB)                *
*                            12) I/O COMMUNICATION AREA (IOCM)        *
*                            13) I/O PURGE INTERFACE BLOCK (IPIB)     *
*                            14) RECOVERY WORKAREA (SDWA)             *
*                            15) SUPERVISOR REQUEST BLOCK (SVRB).     *
*                            16) WINDOW INTERCEPT CONTROL BLOCK(WICB).*
*                                                                     *
*        TABLES = SEE DETAILED DESCRIPTION BELOW                      *
*                                                                     *
*        MACROS = PROGRAM FETCH USES THE FOLLOWING SYSTEM MACROS:     *
*              ESTAE, DEBCHK, GETMAIN, PGFIX, SETLOCK, STARTIO,       *
*              WAIT, FREEMAIN, PGFREE, SETRP, ABEND                   *
*                                                                     *
*        CHANGE-ACTIVITY = SEE FLAGGING IN COL.66 OF AFFECTED LINES   *
*             CHANGES TO VS2 RELEASE 3                                *
* 057567,338700-5,338850-95,339688-98,339728-48,426419,035200  ZA07064*
* 339584-339628,418781-95,429579-91,430624-30,699000-80        ZA05457*
* 561250,78270002                                              ZA06138*
* 728410                                                       ZA08241*
* 404400-404680,745200                                        @ZA10266*
* 067505                                                      @ZA10583*
* 377205                                                      @ZA12206*
* 429510,696600,699080                                        @ZA10542*
* MOVED 430788 AHEAD OF 430740                                @ZA19135*
*429504,429510,430560,430566                                  @ZA19735*
*D067152,161500-161696,421900-422092,426281,C161400           @ZA25996*
*A376448-376464,C376468,A376472                               @ZA26964*
*                                                             @ZA27769*
*                                                             @ZA29550*
*                                                             @ZA29740*
*                                                             @ZA30699*
************************END OF SPECIFICATIONS**************************
         EJECT
******** PROGRAM FETCH DETAILED MODULE DESCRIPTION
*
*        1) ON ENTRY TO FETCH PROGRAM MANAGER WILL PROVIDE THE
*        FOLLOWING PARAMETERS
*
*                        REG  5  ADDRESS OF SVRB FETCH IS RUNNING UNDER
*                        REG  7  ADDRESS OF DCB
*                        REG  9  COMLIMENTED ADDRESS OF THE CONTENTS
*                                DIRECTORY ENTRY FOR THE MODULE TO BE
*                                LOADED (IN WHICH FETCH WILL INSERT
*                                THE LENGTH AND ADDRESS OF THE EXTENT
*                                LIST/NOTE LIST)
*                        REG 10  SUB POOL ID FOR PROB PROG STORAGE
*                        REG 13  ADDR OF THE FETCH WORK AREA
*                        REG 14  RETURN ADDRESS
*                        REG 15  ENTRY POINT ADDRESS INTO FETCH
*
*        WHEN RETURNING TO PROGRAM MANAGER FETCH WILL PROVIDE THE
*        FOLLOWING PARAMETERS:
*
*                        REG  3  SAVED ACROSS FETCH
*                        REG  6  SAVED ACROSS FETCH
*                        REG 12  RELOCATED ENTRY POINT
*                        REG 15  CONDITION CODE
*
*                        AT AN OFFSET OF 32 BYTES FROM THE START OF THE
*                        AREA WHOSE COMPLIMENTED ADDRESS IS IN REG 9
*                        (PROVIDED BY PROGRAM MANAGER ON ENTRY TO
*                        FETCH) THERE IS AN 8 BYTE FIELD WHICH
*                        FETCH WILL INITIALIZE TO CONTAIN THE LENGTH
*                        OF THE EXTENT LIST (INCLUDING THE NOTE LIST
*                        WHEN NEEDED), THE ADDRESS OF THE EXTENT LIST
*                        AND A FLAG BYTE WHICH WHEN BIT 2 IS SET
*                        INDICATES THAT THE EXTENT LIST CONTAINS VALID
*                        INFORMATION. IF THESE 8 BYTES ARE ZERO THEN
*                        BECAUSE OF AN ERROR CONDITION FETCH DID NOT
*                        BUILD AN EXTENT LIST.
*
*        ADDR IN REG 9 ----->**********************
*                            *                    *
*                            *                    *
*                                     ...
*                                     ...
*                            *                    *
*                            **********************
*        ADDR IN REG 9 +32   *    * X LIST SIZE   *
*                            **********************
*                            *FLGS* X LIST ADDR   *
*                            **********************
*
         EJECT
*
*                EXTENT LIST **********************
*                            * TOTAL SIZE OF LIST *
*                            **********************
*                            *NO. OF RELOC FACTORS*
*                            **********************
*                            *                    *
*                            *   LIST OF LENGTHS  *
*                            * OF NON-CONTIGUOUS  *
*                            *     CORE BLOCKS    *
*                            *                    *
*                                     ...
*                                     ...
*                            *                    *
*                            **********************
*                            *                    *
*                            * LIST OF ADDRESSES  *
*                            *  OF CORE BLOCKS    *
*                            *                    *
*                                     ...
*                                     ...
*                            *                    *
*                  NOTE LIST **********************
*    (FOR OVERLAY PGMS ONLY) *     * RELOC FACTOR *
*                            **********************
*                            * PGM CORE SIZE * ID *
*                            **********************
*                            *  T  * T  * R  * 0  * SEG 1
*                            **********************
*                            *  T  * T  * R  * 0  * SEG 2
*                            **********************
*                            *                    *
*                                     ...
*                                     ...
*                            *                    *
*                            **********************
*                            *  T  * T  * R  * 0  * SEG N
*                            **********************
         EJECT
*        2) ON ENTRY TO FETCH OVERLAY SUPERVISOR WILL PROVIDE THE
*        FOLLOWING PARAMETERS
*                        REG  3  ADDRESS OF THE FETCH WORK AREA
*                        REG  7  ADDRESS OF DCB
*                        REG  8  ADDRESS OF NOTE LIST
*                        REG  9  SHIFTED SEGMENT NUMBER
*                        REG 14  RETURN ADDRESS
*
*        WHEN RETURNING TO OVERLAY SUPERVISOR FETCH WILL PROVIDE
*        THE FOLLOWING PARAMETERS
*
*                        REG  3  ADDRESS OF FETCH WORK CORE INITALLY
*                                PROVIDED BY OVERLAY SUPERVISOR
*                        REG  6  SAVED ACROSS FETCH
*                        REG 15  CONDITION CODE
*
         SPACE 5
*
*              FETCH BUFFER TABLE - FTTBL
*
*        **************************************************************
*        * BUF*              *    *              *    *               *
*   1    *    *  PTR TO NEXT * TIC* ADDR OF CHPG2*    * ADDR OF RBUF1 *
*        *CODE*      (2)     *    *              *    *               *
*        **************************************************************
*        * BUF*              *    *              *    *               *
*   2    *    *  PTR TO NEXT * TIC* ADDR OF CHPG3*    * ADDR OF RBUF2 *
*        *CODE*      (3)     *    *              *    *               *
*        **************************************************************
*        * BUF*              *    *              *    *               *
*   3    *    *  PTR TO NEXT * TIC* ADDR OF CHPG1*    * ADDR OF RBUF3 *
*        *CODE*      (1)     *    *              *    *               *
*        **************************************************************
*
*              FTTBLPTR POINTS TO TABLE ENTRY WHOSE RBUF IS CURRENTLY
*                       BEING LOADED
*
         EJECT
*                       FLAGS WHICH ARE SET AND USED BY PROGRAM FETCH
*                            FLAGS ARE AT OFFSET X'488' IN THE WORK
*                            AREA OBTAINED FOR EACH MODULE TO BE LOADED
         SPACE
*        FTFLAG1   = BYTE 1  RESERVED
*
*        FTFLAG2   = BYTE 2  RESERVED
*
*        FTFLAG3   = BYTE 3
*
*                      X'FF' ALL BUFFERS FULL. CHAN PROG REQUIRES
*                            RESTART. SET BY PCI APPENDAGE
*
*                      X'0F' CE APPENDAGE UNABLE TO RESTART BECAUSE
*                            ALL BUFFERS WERE FULL WHEN CE OCCURRED.
*                            RESTART WILL COME FROM MAIN LINE FETCH
*                            VIA EXCPVR AFTER AT LEAST ONE BUFFER IS
*                            EMPTIED. SET BY CE APPENDAGE
*
*                      X'00' NORMAL OPERATING CONDITION. THER IS AT
*                            LEAST ON EMPTY BUFFER
*
*        FTFLAG4   = BYTE 4
*
*                      X'FF' END CONDITION. ONLY TERMINATION PROCESSING
*                            IS REQUIRED IN MAIN LINE FETCH. SET BY
*                            MAIN LINE FETCH
*
*                      X'0F' END CONDITION. BUFFER PROCESSING REQUIRED
*                            BY MAIN LINE FETCH IN ADDITION TO
*                            TERMINATION PROCESSING. SET BY EITHER PCI
*                            OR CE APPENDAGE
*
*        FTRESTRT  = BYTES 5-8
*
*                      SET BY PCI APPENDAGE. IF THERE IS AN ADDRESS
*                      THEN READ JUST COMPLETED WAS AN RLD READ ONLY
*                      AND RESTART SEEK ADDRESS BUFFER IS SAVED TO BE
*                      USED WHEN A RESTART IS NEEDED. IF CONTENTS IS
*                      ZERO THEN READ JUST COMPLETED WAS TEXT/RLD READ
*                      AND RESTART ADDRESS BUFFER IS LAST ONE FILLED
        TITLE 'IEWFETCH...PROGRAM LOADING ROUTINE...INITIALIZATION'
***********************************************************************
*                                                                     *
*              ENTRY POINT TO FETCH FROM PROGRAM MANAGER              *
*                       AND OVERLAY SUPERVISOR                        *
*                                                              Y02081 *
***********************************************************************
         SPACE
IEWMSEPT EQU   *                   ENTRY POINT FOR PROGRAM       Y02081
*                                  MANAGER                       Y02081
IEWFBOSV EQU   *                   ENTRY POINT FOR OVERLAY       Y02081
*                                  SUPERVISOR                    Y02081
         USING *,CODEREG           USE REG 15 FOR TEMPORARY      Y02081
*                                  ADDRESSABILITY                Y02081
         B     FETCH001            BRANCH AROUND MODULE ID       Y02081
FETIDENT DC    C'IEWFETCH '        MODULE NAME                   Y02081
         DC    C'OS/VS2 '          SYSTEM NAME                   Y02081
         DC    C'REL 037 '         RELEASE NUMBER                Y02081
         DC    C'LAST UPDATE 02/02/78'  DATE LAST UPDATED        Y02081
*                                  THE LATEST CODE CHANGE IS --  Y02081
*                                      APAR OZ29740              Y02081
         DROP  CODEREG             DROP TEMP ADDRESSABILITY      Y02081
         SPACE
         DS   0H                   ALIGN TO HALF WORD
FETCH001 BALR  FTBASE1,0           ESTABLISH ADDRESSABILITY      Y02081
         USING FT001,FTBASE1       DEFINE BASE REG FOR CODE      Y02081
         USING WKFETCH,FTBASE2     DSECT BASE FOR WORK AREA      Y02081
         USING FLC,WKREGF          ADDRESSABILITY FOR FIXED      Y02081
*                                  LOCATIONS IN LOW CORE         Y02081
         SPACE 2
FT001    EQU   *                   START OF CODE
         LTR   SEGREG,SEGREG       TEST OVLY OR CONT SUPER
         BM    FT00101             BR NOT OVLY
         LR    FTBASE2,WKRG3       SET WORK BASE FROM OVLY       Y02081
         LPR   DCBREG,DCBREG       MAKE REG 7 POSITIVE IF        YM1070
*                                  SET NEGATIVE TO INDICATE      YM1070
*                                  AN ASYNCHRONOUS SEGLD         YM1070
         LA    WKREGC,XESTAORG     PLACE PSUEDO SVRB ADDR OF     Y02081
*                                  WORKAREA IN REG 5 TO INDICATE Y02081
*                                  OVERLAY SUPV CALL TO ESTAE    Y02081
         ST    FTBASE2,XESTAWKA    SAVE W.A. PTR FOR ESTAE       Y02081
         SPACE
FT00101  EQU   *                   INITIALIZATION
         XC    FTFLAGS,FTFLAGS     CLEAR FLAGS                   Y02081
         XC    XFLAGS,XFLAGS       CLEAR EXTENDED CONTROL FLAGS
         XC    XIOBSEK1(L'XIOBSEK1+L'XIOBSEK2),XIOBSEK1  CLEAR   YM5025
*                                  SEEK ADDRESS SAVEAREAS        YM5025
         XC    XLOFIX,XLOFIX       CLEAR LOW PGFIX ADDRESS       YM6928
         XC    XIOSBAD,XIOSBAD     CLEAR IOSB/SRB ADDRESS FIELD  YM6928
         XC    XESTAEPT,XESTAEPT   CLEAR SAVED IOSB POINTER
         MVC   XKEY,FTKEY          SET FETCH ID KEY IN WORKAREA  YM6928
         ST    RETURNRG,XRETSAV    SAVE RETURN ADDRESS           Y02081
         ST    WKRG3,XREGSV3       SAVE REGISTER 3               YM1070
         ST    WKRG6,XREGSV6       SAVE REGISTER 6               YM1070
         SPACE 2
*   ISSUE ESTAE MACRO TO GIVE FETCH CONTROL IF SYSTEM GOES DOWN.
         SPACE
         L     WKREGB,ESTAEADD     ADDR OF FETCH ESTAE           Y02081
         XC    XGMLIST(LISTSIZ),XGMLIST  CLEAR FOR ESTAE         YM3247
         SPACE
*** IF THE CALLER IS PGM MGR, WKREGC (REG 5) WILL CONTAIN ADDR
*** OF THE PGM MGR SVRB WHICH CONTAINS ADDR OF FETCH WORKAREA
*** AT AN OFFSET OF HEX 74 -- IF THE CALLER IS OVLY SUP, WKREGC
*** WILL CONTAIN THE COMPLEMENTED ADDR OF THE FETCH WORKAREA.
*** IN EITHER CASE, THIS IS THE PARAMETER TO BE PASSED TO THE
*** ESTAE EXIT RTN IN THE EVENT OF ABNORMAL TERMINATION.         Y02081
         SPACE
ESTAELST ESTAE (WKREGB),CT,PARAM=(WKREGC),PURGE=HALT,ASYNCH=NO,        X
               ESTAR=NO,TERM=YES,BRANCH=NO,RECORD=NO,MF=(E,XGMLIST)
         EJECT
*********************************************************************
*   CONSTRUCT A DUPLICATE DEB COPY TO ENSURE FETCH I/O INTEGRITY
*   WHEN THE LOAD DCB IS NOT SYSTEM PROVIDED.  THUS AVOIDS DEB
*   CONTENTION AND ENSURES ENTRY TO THE PROPER APPENDAGES FOR
*   PAGE FIX AND CCW TRANSLATE SERVICES REQUIRED FOR FETCH I/O.
*********************************************************************
         SPACE
*   TEST IF CURRENT REQUEST IS USING A SYSTEM DEB--IF YES WE
*    DON'T NEED TO COPY IT.
         SPACE
         L     WKREGB,CVTPTR       GET CVT PTR                   Y21179
         SPACE
         USING CVT,WKREGB          CVT ADDRESSABILITY            Y21179
         SPACE
         ST    DCBREG,XORGDCB      SAVE ORIGINAL DCB ADDRESS
         CLM   DCBREG,ADDR,CVTSVDCB+1  IS DCB FOR SVCLIB ?       YM6990
         BE    FT002               BR IF SYSTEM SVCLIB DCB
         CLM   DCBREG,ADDR,CVTLINK+1 IS DCB FOR LINKLIB  ?       YM6990
         BE    FT002               BR IF SYSTEM LINKLIB DCB
         SPACE
         DROP  WKREGB              DROP CVT BASE                 Y21179
         SPACE
         LTR   SEGREG,SEGREG       OVLY SUPVR CALL?              Y02081
         BP    FT00102             GO IF OVERLAY SUPVR         @ZA25996
         TM    WKFLG1,WKSYSREQ     IS THIS A SYSTEM REQUEST?     Y02081
         BO    FT002               IF SO, BYPASS DEB COPY        Y02081
FT00102  EQU   *                   JOBLIB TEST                   Y02081
         L     WKREGC,PSATOLD      GET LOCATION OF CURRENT       Y02081
*                                  TCB (FROM FIXED LOW CORE)     Y02081
**     IF THIS IS THE JOBSTEP TCB WE DONT NEED TO CHECK THE DCB IT'S
**       IN PROTECTED CORE
         USING TCB,WKREGC          SET TCB BASE REG
         L     WKREGC,TCBJSTCB     R3=ADDR OF JS TCB OR ITSELF
         CLM   DCBREG,ADDR,TCBJLB+1  IS DCB FOR JOBLIB ?
         BE    FT002               BR IF JOBLIB DCB
         DROP  WKREGC              DROP TCB BASE
         EJECT
***********************************************************************
* FIX FOR REFER BACK OF PROGRAM NAME                           @ZA29550
***********************************************************************
         LTR   SEGREG,SEGREG       OVLY SUPVR CALL?
         BM    RB020               GO IF NOT OVLY SUPVR        @ZA30699
         DROP  FTBASE1
         BALR  WKREGE,0            ESTABLISH ROUTINE BASE
         USING RB001,WKREGE        DEFINE BASE REG FOR CODE
RB001    EQU   *
         STM   0,15,FTREGSV        SAVE REGISTERS
         L     IDREG,PSATOLD       GET CURRENT TCB ADDRESS
         L     WKREGA,X'2C'(DCBREG) GET DEB ADDRESS
         LA    WKREGA,0(WKREGA)     ZERO HIGH BYTE
         CLM   DCBREG,ADDR,X'19'(WKREGA) DOES DEB POINT TO DCB
         BNE   RB008               NO, GO LET DEBCHECK FAIL
         L     CODEREG,X'148'(WKREGB) GET CVT EXT ADDRESS
         L     CODEREG,8(CODEREG)  GET ENTRY POINT TO DEBCHECK
         LR    WKREGC,CODEREG      SAVE ENTRY POINT IN REG 5
         BALR  14,15               GO DO DEBCHECK
         B     RB008              OK FOR USER'S DEB, DO NORMAL DEBCHK
         L     IDREG,PSATOLD       GET CURRENT TCB ADDRESS
         L     IDREG,X'B4'(IDREG)  GET JSCB ADDRESS
         L     IDREG,X'D0'(IDREG)  GET INITIATOR'S TCB ADDRESS
         LR    CODEREG,WKREGC      GET ENTRY POINT TO DEBCHECK
         BALR  14,15               TRY AGAIN
         B     RB009               OK, MUST BE PROGRAM REFER BACK DCB
*
*                                  GO DO DEB CHECK WHICH SHOULD FAIL
*                                  BECAUSE OF AN INVALID DCB/DEB
RB008    EQU   *
         LM    0,15,FTREGSV        RESTORE REGISTERS
         DROP  WKREGE              DROP ROUTINE BASE
         USING FT001,FTBASE1       DEFINE BASE REG FOR CODE
         B     RB020
RB009    EQU   *
         LM    0,15,FTREGSV        RESTORE REGISTERS
         B     FT002               OK, MUST BE PROGRAM REFER BACK DCB
RB020    EQU   *
***********************************************************************
         EJECT
*   NOT A SYSTEM DCB...OBTAIN SPACE AND BUILD A DEB COPY AFTER
*    VALIDATING DEB AND CALCULATING SIZE.
         SPACE
         STM   CODEREG,WKREGA,FTREGSV  SAVE REG 15, 0, 1
         SPACE
VALIDATE DEBCHK (DCBREG),TYPE=VERIFY
         SPACE
         LR    WKREGB,WKREGA       DEB ADDR IS RETURNED IN R1
         LM    CODEREG,WKREGA,FTREGSV  RESTORE REG 15, 0, 1
         SPACE
         USING DEBBASIC,WKREGB     EST DEB BASE REG
         SPACE
         SR    WKREGC,WKREGC       CLEAR WORK REGISTER
         IC    WKREGC,DEBNMEXT     NUMBER OF DEB EXTENTS
         IC    WKREGA,FTDEBMSK     EXTENT SCALE
         SLL   WKREGC,0(WKREGA)    CALC LEN OF EXTENTS SECTION
         LA    WKREGC,DEBBASND-DEBBASIC(WKREGC)  ADD SIZE OF BASE
         SPACE
*   INCREMENT DEB SIZE FOR CONCATENATED PRIVATE DATA SETS-1 BYTE/D.S.
         SPACE
         SR    WKREGF,WKREGF       RESET                         YM0681
         LTR   SEGREG,SEGREG       OVLY SUPVR CALL?              Y02081
         BM    FT00103             IF NOT, BRANCH                Y02081
         SPACE
         USING NOTELIST,LISTREG    NOTELIST ADDRESSABILITY       Y02081
         IC    WKREGF,NLCONCAT     GET CONCATENATION NO.         Y02081
         DROP  LISTREG             DROP NOTELIST BASE            Y02081
         SPACE
         B     FT00104             BYPASS PGM MGR CODE           Y02081
         SPACE
FT00103  EQU   *                   PGM MGR CALL                  Y02081
         IC    WKREGF,WKTTRN+3     GET CONCATENATION NO.         Y02081
         SPACE
FT00104  EQU   *                   SETUP FOR GETMAIN             Y02081
         AR    WKREGC,WKREGF       ADD CONCN COUNT TO TOTAL      Y02081
         ST    WKREGC,XDEBLEN      SAVE TOTAL SIZE OF DEB AND
         MVI   XDEBLEN,DEBCORE     THE SUBPOOL ID FOR FREEMAIN
*                                  AT TERMINATION.
         SPACE
*          --- GET SPACE FOR DEB COPY ---
         SPACE
         GETMAIN  EC,MF=(E,XGMLIST),LV=(WKREGC),A=XDCBDEBA,SP=DEBCORE
         SPACE
         LTR   CODEREG,CODEREG     TEST GETMAIN SUCCESSFUL       Y02081
         BNZ   FT027C              IF NOT, TERMINATE             Y02081
         SPACE
*   COPY DEB IN GETMAIN'ED SPACE
         SPACE
         L     WKREGF,XDCBDEBA     GET NEW DEB ADR IN PSEUDO DCB Y02081
*                                  -- SET UP MOVE REG (TO-LOC)   Y02081
         LR    WKREGA,WKREGC       SET UP MOVE REG (TO-LEN)
         MVCL  WKREGF,WKREGB       COPY OLD DEB TO NEW AREA
         L     WKREGB,XDCBDEBA     RESET DEB BASE REG TO
*                                  ADDRESS THE NEW DEB.
         LA    DCBREG,XDCBCOPY     ADDR OF PSUEDO DCB
         STCM  DCBREG,ADDR,DEBDCBB CHAIN PSEUDO DCB TO NEW DEB
         NI    DEBPROTG,KEYZERO    SET DEB KEY TO ZERO
         XC    DEBQSCNT,DEBQSCNT   CLEAR PURGE COUNT
         XC    DEBUSRPB,DEBUSRPB   CLEAR PURGE CHAIN FIELD
         OI    XFLAG1,USDEBFLG     DENOTE USER DEB COPIED
         SPACE
         DROP  WKREGB              ABANDON TEMP DEB BASE
         EJECT
*********************************************************************
*
*    SET UP THE DEB FILE MASK IF ACR(AUTOMATIC COMMAND RETRY) DEVICES
*      ARE BEING USED AND DETERMINE IF WE ARE USING RPS DEVICES
*      AND/OR VAM DATA SETS AND SET SWITCHES ACCORDINGLY.
*
*********************************************************************
         SPACE
FT002    EQU   *                   DEB PROCESSING                Y02081
         L     WKREGA,DCBDEBAD(DCBREG)  GET DEB ADDR
         SPACE
         USING DEBBASIC,WKREGA     SET DEB ADDRESSABLILITY       Y02081
         TM    DEBFLGS1,DEBAPFIN   LOADING FROM AN APF           YM1088
*                                  AUTHORIZED LIBRARY?           YM1088
         BZ    FT0021              IF NOT, BRANCH                YM1088
         OI    WKFLG1,WKAUTH       SET AUTHORIZED LIBRARY        YM1088
*                                  INDICATOR FOR PROG MGR        YM1088
         SPACE 3
*   GET TO THE FIRST EXTENT IN THE DEB WE WILL BE FETCHING FROM
*     PRIOR TO STARTING TO SCAN THE DEB EXTENTS FOR ACR/RPS DEVICES.
         SPACE
FT0021   EQU   *                   DEB SCAN                      YM1088
         SR    WKREGB,WKREGB       CLEAR WORK REGISTER           Y02081
         STH   WKREGB,XTNTSAVE     INIT STARTING EXTENT NO.      Y02081
         SPACE
         LTR   SEGREG,SEGREG       OVLY SUPVR CALL?              Y02081
         BM    FT0022              IF NOT, BRANCH                Y02081
         SPACE
         USING NOTELIST,LISTREG    NOTELIST ADDRESSABILITY       Y02081
         IC    WKREGB,NLCONCAT     GET CONCATENATION NO.         Y02081
         DROP  LISTREG             DROP NOTELIST BASE            Y02081
         SPACE
         B     FT0023              BYPASS PGM MGR CODE           Y02081
         SPACE
FT0022   EQU   *                   USE BLDL ENTRY                Y02081
         IC    WKREGB,WKTTRN+3     GET CONCATENATION NO.         Y02081
         SPACE
FT0023   EQU   *                   TEST CONCATENATION NO.        Y02081
         LTR   WKREGB,WKREGB       IS IT 1ST CONCATENATION?      Y02081
         BNZ   FT00235             GO IF CONCATENATION           YM1172
         SPACE
         MVC   NMEXTSV(L'DEBNMEXT),DEBNMEXT  SAVE THE NUMBER     YM3984
*                                  OF EXTENTS IN THE DEB         YM3984
         B     FT0024              CONTINUE IF NON-COCATN D.S.   YM1172
         SPACE
FT00235  EQU   *                   CONTINUE                      YM1172
         BCTR  WKREGB,0            SUBTRACT 1 FOR INDEX          Y02081
         SR    WKREGF,WKREGF       CLEAR WORK REGISTER           Y02081
         IC    WKREGF,DEBNMEXT     GET NUM OF EXTENTS IN DEB     Y02081
         STC   WKREGF,NMEXTSV      SAVE NO.OF DEB EXTENTS        Y02081
         SLL   WKREGF,4            MULT. BY ENTRY SIZE           Y02081
         AR    WKREGA,WKREGF       INDEX TO END OF EXT SECT      Y02081
         SR    WKREGF,WKREGF       ZERO WORK REGISTER            Y02081
         IC    WKREGF,DEBBASND-DEBBASIC(WKREGA,WKREGB)  GET THE  Y02081
*                                  STARTING M-VALUE FOR THIS     Y02081
*                                  CONCATENATION NUMBER          Y02081
         STH   WKREGF,XTNTSAVE     SAVE STARTING EXTENT NO.      Y02081
         SLL   WKREGF,4            INDEX TO THAT EXTENT          Y02081
         L     WKREGA,DCBDEBAD(DCBREG)  POINT TO START OF DEB    Y02081
         AR    WKREGA,WKREGF       POINT TO CORRECT EXTENT       Y02081
         SPACE
FT0024   EQU   *                   SETUP FOR DEB SCAN            Y02081
         SR    WKREGB,WKREGB       ZERO WORK REGISTER            Y02081
         IC    WKREGB,DEBBASND     GET DEB FILE MASK             Y02081
         STC   WKREGB,FMSKSAVE     SAVE FILE MASK FOR IOSB       Y02081
         ICM   WKREGB,ADDR,(DEBBASND+L'DEBDVMOD)  GET UCB ADDR   Y02081
         USING UCBOB,WKREGB        SET UCB ADDRESSABILITY        Y02081
         TM    UCBJBNR,UCBVRDEV    IS THE LIBRARY BEING          Y02081
*                                  FETCHED FROM ON A VIRTUAL     Y02081
*                                  DEVICE?                       Y02081
         BO    FT0028              IF SO, BRANCH (DO NOT ALTER   Y02081
*                                  FILE MASK)                    Y02081
         SR    WKREGF,WKREGF       CLEAR WORK REG AND GET        M60688
         IC    WKREGF,NMEXTSV      NUM OF EXTENTS IN DEB         M60688
         SH    WKREGF,XTNTSAVE     SUBTRACT STARTING EXT.NO.     Y02081
         MVC   UCBSAVE(L'DEBUCBA),(DEBBASND+L'DEBDVMOD)  SAVE    Y02081
*                                  THE UCB ADDRESS               Y02081
         SPACE
*   SCAN THE DEB EXTENTS FOR RPS DEVICE.
         SPACE
FT0025   ICM   WKREGB,ADDR,(DEBBASND+L'DEBDVMOD)  GET UCB ADDR   Y02081
         CLI   UCBTBYT4,X'06'      TEST UCB FOR DEVICE TYPE      M60688
         BL    FT0029              IF NOT MER OR ZEUS DO         M60688
         CLI   UCBTBYT4,X'08'      NOT ALTER FILE MASK           M60688
         BE    FT0029              FIELDS IN DEB                 M60688
         OI    DEBBASND,MRZEUSBT   ALTER FILE MASK IN DEB        M60688
         OI    FMSKSAVE,MRZEUSBT   ALTER FILE MASK FOR IOSB      Y02081
         SPACE
         CLI   UCBTBYT4,X'0A'      IS IT A 3340?                 ZA3192
         BNE   FT0026              GO IF NOT 3340                ZA3192
         TM    UCBTBYT2,UCBRPS     DOES THIS 3340 HAVE RPS?      ZA3192
         BNO   FT00265             GO IF NOT RPS                 ZA3192
         SPACE
FT0026   EQU   *                   RPS ON                        ZA3192
         OI    XFLAG1,RPSDEV       INDICATE AN RPS DEVICE IS     Y02081
*                                  BEING FETCHED FROM            Y02081
         SPACE 2
FT00265  EQU   *                   CONTINUE                      ZA3192
         USING DEBDASD,WKREGA      SET BASE REG FOR DEB          YM1172
         LA    WKREGA,EXTVALUE     POINT TO NEXT POTENTIAL       YM1172
*                                  EXTENT AREA IN DEB            YM1172
         SPACE
         BCT   WKREGF,FT0025       BR IF ANOTHER EXTENT          M60688
         SPACE
         B     FT0029              SINCE THIS IS NOT A VAM       Y02081
*                                  DATA SET, DO NOT USE IOB      Y02081
         DROP  WKREGA              DROP DEB BASE                 M60688
         DROP  WKREGB              DROP UCB BASE                 Y02081
         EJECT
***********************************************************************
*                                                                     *
*                   INIALIZATION FOR VAM DATA SETS                    *
*                                                              Y02081 *
***********************************************************************
         SPACE 2
FT0028   EQU   *                   BEGIN VAM INITIALIZATION      Y02081
         OI    XFLAG1,VAMDEV       INDICATE A VIRTUAL DEVICE IS  Y02081
*                                  BEING FETCHED FROM            Y02081
         LA    WKREGB,FTAPNDG      ADDR OF APPENDAGE
         O     WKREGB,FTDEBMSK     SET FILE MASK                  22125
         L     WKREGA,DCBDEBAD(DCBREG)  POINT TO START OF DEB    Y02081
         ST    WKREGB,AVTPTR(WKREGA)  STORE AVT POINTERS          22125
         OI    FTIOB,FTIOBFL       INIT IOB FLAGS
         LA    WKREGA,FTCPSCH2     ADDR OF CHAN PROG
         ST    WKREGA,FTIOB+CPADDRES  ADDR OF CHANNL PGM TO IOB  Y02081
         ST    DCBREG,FTIOB+DCBADDRS  DCB ADDR TO IOB
         LA    WKREGA,FTECB        GET ECB ADDRESS               Y02081
         ST    WKREGA,FTIOB+ECBADDRS  ECB ADDR TO IOB
*
*------ SET UP VAM CHANNEL PROGRAM                               Y02081
*
         MVC   FTCPSCH2(VAMSCHLN),FTCCW2  SET SEARCH CHAN.PROG.  Y02081
         LA    WKREGB,FTIOBSK+CCHHR  GET SEARCH ADDRESS          Y02081
         STCM  WKREGB,ADDR,FTCPSCH2+SRCHADDR  SEARCH ADDR.IN CP  Y02081
         LA    WKREGA,FTCPSCH2     ADDRESS OF CHANEL PROG.       Y02081
         STCM  WKREGA,ADDR,FTCPSCH2+SRCHCCW  1ST TIC-TO COMMAND  Y02081
         LA    WKREGA,FTCP1        GET ADDR OF READ TEXT CCW     Y02081
         STCM  WKREGA,ADDR,FTCPSCH2+TICTOADD  2ND TIC-TO ADDRESS Y02081
         MVC   FTCP1(VAMCPLN),FTCCW4  SET VAM CHANNEL PROGRAM    Y02081
         LA    WKREGA,FTRBUF1      GET ADDR OF RLD BUFFER        Y02081
         STCM  WKREGA,ADDR,FTCP1+RLDBUFAD  STORE IN READ RLD CCW Y02081
         SPACE
         LTR   SEGREG,SEGREG       OVERLAY SUPERVISOR REQUEST?   Y02081
         BM    FT004               GO IF PROGRAM MANAGER         Y02081
         B     FT003               GO IF OVERLAY SUPERVISOR      Y02081
         EJECT
***********************************************************************
*                                                                     *
*        INITIALIZE THE I/O CONTROL BLOCKS (SRB AND IOSB) REQUIRED    *
*        FOR FETCH'S INTERFACE WITH IOS THROUGH THE 'STARTIO'         *
*        FUNCTION AND THE VSL TO BE USED FOR INTERFACING WITH         *
*        THE SYSTEM PGFIX AND PGFREE FUNCTIONS.                       *
*                                                              Y02081 *
***********************************************************************
FT0029   EQU   *                   BEGIN IOSB INITIALIZATION     Y02081
*            --- GET IOSB/SRB STORAGE ---                        Y02081
         GETMAIN  EC,MF=(E,XGMLIST),LV=GLOBREQ,A=XIOSBAD,SP=SQASP
         LTR   CODEREG,CODEREG     TEST GETMAIN SUCCESSFUL       Y02081
         BNZ   FT027C              IF NOT, TERMINATE             Y02081
         L     WKREGA,XIOSBAD      GET ADDR OF IOSB/SRB          Y02081
         USING IOSB,WKREGA         ADDRESSABILITY FOR IOSB       Y02081
         XC    IOSB(GLOBREQ),IOSB  INITIALIZE ENTIRE IOSB AND    Y02081
*                                  SRB TO ZEROES                 Y02081
         OI    IOSFLA,IOSCCHN+IOSSMDB  SET COMMAND CHAINING AND  Y02081
*                                  PCI FETCH INDICATORS ON       Y02081
         OI    IOSDVRID,IOSFCHID   SET FETCH VOID INDEX          Y02081
         MVC   IOSUCB+1(L'DEBUCBA),UCBSAVE  MOVE THE UCB ADDRESS Y02081
*                                  (SAVED PREVIOUSLY) INTO THE   Y02081
*                                  IOSB                          Y02081
         L     WKREGB,PSAAOLD      GET ASCB POINTER              Y02081
         USING ASCB,WKREGB         ADDRESSABILITY FOR ASCB       Y02081
         LH    WKREGB,ASCBASID     GET OUR ADDR SPACE ID         Y02081
         DROP  WKREGB              DROP ASCB BASE                Y02081
         STH   WKREGB,IOSASID      SET ASID IN IOSB              Y02081
         LA    WKREGB,IEWFTSRB     GET ADDRESS OF FETCH SRB      Y02081
*                                  COMPLETION ROUTINE            Y02081
         ST    WKREGB,IOSPGAD      SET SRB EXIT ROUTINE POINTER  Y02081
*                                  IN IOSB                       Y02081
*------ PROTECT KEY OF SRB COMPLETION RTN IN IOSPKEY = 0         Y02081
         LA    WKREGB,FTCE01       GET ADDRESS OF THE FETCH      Y02081
*                                  POST STATUS NORMAL            Y02081
*                                  SUBROUTINE (CHANNEL END)      Y02081
         ST    WKREGB,IOSNRM       SET POST STATUS NORMAL        Y02081
*                                  ROUTINE POINTER IN IOSB       Y02081
         LA    WKREGB,FTRETURN     GET ADDR OF BR 14 INSTRUCTION Y02081
         ST    WKREGB,IOSABN       USE AS FETCH POST STATUS      Y02081
*                                  ABNORMAL END EXIT ROUTINE     Y02081
         L     WKREGB,FTPCIADD     GET ADDRESS OF THE FETCH      Y02081
*                                  DISABLED INTERUPT EXIT        Y02081
*                                  SUBROUTINE (PCI PROCESSOR)    Y02081
         ST    WKREGB,IOSDIE       SET DIE RTN PTR IN IOSB       Y02081
         L     WKREGB,DCBDEBAD(DCBREG)  GET DEB ADDRESS          Y02081
         ST    WKREGB,IOSDSID      SET DEB ADR AS DSID FOR PURGE Y02081
         MVC   IOSFMSK,FMSKSAVE    SET DEB FILE MASK IN IOSB     Y02081
*------ CHANNEL PROGRAM PROTECT KEY IN IOSCKEY = 0               Y02081
         ST    FTBASE2,IOSUSE      SAVE POINTER TO FETCH WORK    Y02081
*                                  AREA IN IOSB USER FIELD FOR   Y02081
*                                  USE IN I/O SUBROUTINES        Y02081
*
*------ INITIALIZE SRB WITH POINTER TO IOSB FOR 'STARTIO'        Y02081
*
         LA    WKREGB,SRBSTART     GET ADDRESS OF FETCH SRB      Y02081
         USING SRBSECT,WKREGB      ADDRESSABILITY FOR SRB        Y02081
         ST    WKREGB,IOSSRB       SET SRB POINTER IN IOSB       Y02081
         ST    WKREGA,SRBPARM      SET PTR TO IOSB IN SRB        Y02081
*                                  PARAMETER FIELD               Y02081
         DROP  WKREGA              DROP IOSB BASE                Y02081
         DROP  WKREGB              DROP SRB BASE                 Y02081
         SPACE
         MVC   XFTCBAD,PSATOLD     SAVE ADDR OF CURRENT TCB TO   Y02081
*                                  BE TESTED FOR APPLICABILITY   Y02081
*                                  FOR A TCB PURGE BY THE PURGE  Y02081
*                                  SUBROUTINE                    Y02081
         EJECT
*
*------ INIALIZE FETCH CHANNEL PROGRAM
*
         SPACE
         MVC   FTCPSRCH(FTSCHLN),FTCCW1 SET SEARCH CHAN PROG     Y02081
         LA    WKREGB,XSECTAD      GET ADDR. FOR SET SECTOR      Y02081
         STCM  WKREGB,ADDR,FTCPSRCH+CCWADR  STORE IN SEARCH      Y02081
*                                  CHANNEL PROGRAM               Y02081
         LA    WKREGB,FTIOBSK+CCHHR  GET SEARCH ADDR             Y02081
         STCM  WKREGB,ADDR,FTCPSRCH+SRCHCCW  STORE SEARCH        Y02081
*                                  ADDRESS IN CHANNEL PROGRAM    Y02081
         LA    WKREGA,FTCPSRCH+CCWSZ  ADDR OF SEARCH ID COMMAND  Y02081
         STCM  WKREGA,ADDR,FTCPSRCH+TICTOADD  STORE IN 1ST TIC   Y02081
         MVC   FTCP1(FTCPLN),FTCCW3  SET CHAN PROG1              Y02081
         LA    WKREGA,FTSKBUF1     ADDR OF FETCH SEEK BUF1       Y02081
         STCM  WKREGA,ADDR,FTCP1+RDCT1AD  STORE IN 1ST RD COUNT  Y02081
         LA    WKREGA,FTSKBUF2     ADDR OF FETCH SEEK BUF2       Y02081
         STCM  WKREGA,ADDR,FTCP1+RDCT2AD  STORE IN 2ND RD COUNT  Y02081
         LA    WKREGA,FTRBUF1      ADDR OF RLD BUFFER 1          Y02081
         STCM  WKREGA,ADDR,FTCP1+RDRLDAD  STORE IN RD DATA CCW   Y02081
         ST    WKREGA,FTTBL+TBLBUFAD  STOR BUF1 ADDR IN BUF TBL  Y02081
         LA    WKREGA,XSECTAD      GET SET SECTOR BUF ADDR       Y02081
         STCM  WKREGA,ADDR,FTCP1+RDSECAD  STORE IN RD SECTOR CCW Y02081
         MVC   FTCP2(FTCPLN),FTCP1 SET CHAN PROG2                Y02081
         LA    WKREGA,FTRBUF2      ADDR OF RLD BUFFER2           Y02081
         STCM  WKREGA,ADDR,FTCP2+RDRLDAD  STORE IN RD DATA CCW   Y02081
         ST    WKREGA,FTTBL2+TBLBUFAD  STOR BUF2 ADDR IN BUF TBL Y02081
         LA    WKREGA,FTSKBUF3     2ND COUNT BUF                 Y02081
         STCM  WKREGA,ADDR,FTCP2+RDCT2AD  TO 2ND CHAN PROG       Y02081
         MVC   FTCP3(FTCPLN),FTCP2 SET CHAN PROG3                Y02081
         LA    WKREGA,FTRBUF3      ADDR OF RLD BUFFER3           Y02081
         STCM  WKREGA,ADDR,FTCP3+RDRLDAD  STOR IN RD DATA CCW    Y02081
         ST    WKREGA,FTTBL3+TBLBUFAD  STOR BUF3 ADDR IN BUF TBL Y02081
         LA    WKREGA,FTSKBUF4     3RD COUNT BUF                 Y02081
         STCM  WKREGA,ADDR,FTCP3+RDCT2AD  FOR 3RD CHAN PROG      Y02081
*        MVI   FTREGSV+39,X'00'    INIT EOX FLAG FOR C.E.          5758
**********************************************************************
         XC    FTLASTBF,FTLASTBF   INIT LAST BUF PTR TO ZERO     Y02081
         MVI   FTRBUF1+SPINBYTE,ALL  INIT 1ST BUF TO PSEUDO WT
         MVI   FTSKBUF1+CCHHR,CNTWT  SET CNT PSEUDO WT    S20201,Y02081
**********************************************************************
         TM    XFLAG1,RPSDEV       FETCH ON AN RPS DEVICE?       Y02081
         BO    FT029A              IF SO, BRANCH                 Y02081
         NI    FTCP1+36,ALL-CMCH   TURN OFF COMMAND      OY03649,Y02081
         NI    FTCP2+36,ALL-CMCH   CHAINING BETWEEN      OY03649,Y02081
         NI    FTCP3+36,ALL-CMCH   NOP CCW'S AND READ    OY03649,Y02081
*                                  SECTOR CCW'S          OY03649,Y02081
FT029A   EQU   *                   IF RPS, CONTINUE              Y02081
         EJECT
***********************************************************************
*                                                                     *
*              INITIALIZATION OF FETCH BUFFER TABLE                   *
*                                                                     *
***********************************************************************
         SPACE 2
         LA    WKREGA,FTTBL        ADDR OF BUFFER TABLE
         ST    WKREGA,FTTBLPTR     INIT TABL POINTER
         ST    WKREGA,FTTBL3       LAST TBL ENT PTS TO FIRST
         LA    WKREGA,FTCP1        ADDR OF FIRST CHAN PROG
         ST    WKREGA,FTTBL3+TBLCPAD  LAST ENT PTS TO FIRST CP
         MVI   FTTBL3+4,TIC        SET TIC OP CODE IN TABLE
         LA    WKREGA,FTTBL2       ADDR OF 2ND ENT IN BUFTBL
         ST    WKREGA,FTTBL        FIRST TBL ENT PTS TO 2ND
         LA    WKREGA,FTCP2        ADDR OF 2ND CHAN PROG
         ST    WKREGA,FTTBL+TBLCPAD  1ST ENT PTS TO 2ND CP
         MVI   FTTBL+TBLCPAD,TIC   SET TIC OP CODE IN TABLE
         LA    WKREGA,FTTBL3       ADDR OF 3RD ENT IN BUFTBL
         ST    WKREGA,FTTBL2       2ND TBL ENT POINTS TO 3RD
         LA    WKREGA,FTCP3        ADDR OF 3RD CHAN PROG
         ST    WKREGA,FTTBL2+TBLCPAD  2ND ENT PTS TO 3RD CP
         MVI   FTTBL2+TBLCPAD,TIC  SET TIC OP CODE IN TABLE
         EJECT
*
*              INITIALIZATION OF FETCH WORK AREA EXTENSION.
*
         LA    WKREGA,XALAREA1     ADDR OF IDAL BUILD AREA
         ST    WKREGA,XIDALP1      SAVE AS PTR TO PRIMARY IDAL
         LA    WKREGA,XALAREA2     ADDR OF IDAL BUILD AREA
         ST    WKREGA,XIDALP2      SAVE AS PTR TO AUX IDAL
         SPACE
*              END OF COMMON INITIALIZATION...
*                   IDENTIFY CALLER AND PROVIDE INITIALIZATION
*                   UNIQUE TO THAT REQUESTER.
         LTR   SEGREG,SEGREG       CALLED BY OVLY SUPVR?         Y02081
         BM    FT004               BRANCH IF NOT (CALLED BY      Y02081
*                                  PROGRAM MANAGER)              Y02081
         EJECT
*
*        THIS REQUEST IS FROM OVERLAY SUPERVISOR
*
         USING  NOTELIST,LISTREG
         SPACE
FT003    L     WKREGA,NLRELFAC     GET MODULE RELOCATION FACTOR
         LA    WKREGA,0(WKREGA)    CLEAR THE HIGH BYTE
         ST    WKREGA,FTRPTR       SAVE FOR RELOCATION USE
         ST    WKREGA,XSOMAD       ALSO USE AS MODULE START ADDR
         L     WKREGF,NLCORSIZ     GET MODULE CORE SIZE
         SRL   WKREGF,8            SHIFT OUT CONCAT NUMBER
         AR    WKREGF,WKREGA       ADD START ADDR TO MODULE SIZE
         ST    WKREGF,XEOMAD       SAVE END-OF-MODULE LOCATION
         ST    WKREGF,XNEXTLOC     USE EOM AS DEFAULT TXT PTR
*                                  TO BYPASS PAGE FIX FOR TEXT
*                                  ON FIRST READ SINCE TEXT LOC
*                                  IS NOT KNOWN UNTIL THE FIRST
*                                  CONTROL RECORD HAS BEEN READ.
         XC    XTRANTAB,XTRANTAB   CLEAR CCW XLATE TABLE FOR SIO
         NI    XFLAG1,ALL-ACTXTFLG TURN OFF ACTIVE TEXT-READ FLG
         SPACE
         DROP  LISTREG
         SPACE
         L     WKREGF,4(SEGREG,LISTREG)  SEG TTR FROM NOTE LIST
         LTR   WKREGF,WKREGF       TEST ZERO TTR
*
         BC    8,FT027             0 TTR TO NORMAL COMPLETE
*
         IC    WKREGF,NLCONCAT-NOTELIST(LISTREG)  INSERT CONCAT FACTOR
         SPACE
         TM    XFLAG1,VAMDEV       VIRTUAL DEVICE?               Y02081
         BO    FTVAM04             GO IF VAM                     Y02081
         SPACE
         BAL   WKREGE,CVRTSET      TO CONVERT RTN SET UP
         L     WKREGA,XIOSBAD      GET IOSB ADDRESS              Y02081
         USING IOSB,WKREGA         ADDRESSABILITY FOR IOSB       Y02081
         MVC   IOSEEK,FTIOBSK      SET IOSB STATIC SEEK ADDR     Y02081
         DROP  WKREGA              DROP IOSB BASE                Y02081
         LA    WKREGA,FTCP1+CPRDRLD  SET FOR FIRST OVERLY RD
         STCM  WKREGA,ADDR,FTCPSRCH+SCHTICAD  POINT TO READ      Y02081
*                                  CTL/RLD RECORD CCW            Y02081
         MVC   FTSKBUF1(8),FTIOBSK SET IOBSEEK                   Y02081
         MVI   FTCP1+RDRLDFL,CMCH+SILI+PCI  SET PCI IN RD-CTL    Y02081
         B     FT010               BRANCH AROUND PROG MGR INIT
*
*------- END OF INITIALIZATION FOR OVERLAY SUPERVISOR.
         EJECT
*
*        THIS REQUEST IS FROM PROGRAM MANAGER.
*
         SPACE
*   OBTAIN MAIN STORAGE FOR EXTENT/NOTE LIST-
FT004    LA    WKREGB,EXLSIZE      EXTENT LIST SIZE (BYTES)
         TM    WKATTR,PDS2OVLY     IS MODULE IN OVERLAY ?        Y02081
         BZ    FT005               BRANCH NOT OVERLAY
         SR    WKREGD,WKREGD       CLEAR WORK REGISTER
         IC    WKREGD,WKTTESD+7    NUMBER OF NOTE ENTRIES        Y02081
         SLL   WKREGD,NLENTSZ      GET NOTE ENTRY SIZE (BYTES)
         LA    WKREGB,NLPFXSZ(WKREGD,WKREGB)  COMPUTE TOTAL CORE
*                                  REQD FOR XLIST+NOTELIST
FT005    LA    WKREGE,FTREGSV      LOC FOR GM TO PLACE ADDR
         GETMAIN EC,MF=(E,XGMLIST),LV=(WKREGB),A=(WKREGE),SP=255
         LTR   CODEREG,CODEREG     TEST GETMAIN SUCCESSFUL       Y02081
         BNZ   FT027C              IF NOT, RETURN WITH RC=12     Y02081
         SPACE
*  INITIALIZE CDE+EXTENT LIST-
         LPR   WKREGE,SEGREG       ESTABLISH CDE BASE REG
         USING CDENTRY,WKREGE      SET CDE ADDRESSABILITY
         L     LISTREG,FTREGSV     ESTABLISH EXTENT LIST BASE
         USING EXLIST,LISTREG      SET EXT LIST ADDRESSABILITY
         SPACE
         ST    WKREGB,EXLLNTH      SAVE LIST SIZE IN XLIST
         LA    WKREGA,1            CORE BLK COUNT
         ST    WKREGA,EXLRELFC     STORE BLOCK COUNT IN XLIST
         MVI   EXLSZIND,SZIND      SET BLK SIZE FLAG
         MVC   EXLSZBLK,WKLNTH     MOVE BLK SIZE INTO XLIST      Y02081
*  CLEAR EXLCORAD IN CASE GETMAIN FAILS-ALLOWS ABEND CLEANUP
         XC    EXLCORAD,EXLCORAD   CLEAR ADDR OF CORE BLOCK      YM2608
         MVC   CDENTPT,EXLLNTH+1   COPY XLIST SIZE INTO CDE
         MVC   CDXLMJP,FTREGSV     SAVE XLIST ADDR IN CDE        YM2078
         OI    CDATTR2,CDXLE       TURN ON XLIST CREATED BIT
         SPACE
         DROP  WKREGE              DROP CDE BASE
         SPACE
*   OBTAIN MAIN STORAGE FOR LOAD MODULE-
         L     WKREGB,WKIOADDR     GET ADDR OF MODULE FOR        YM1088
*                                  EXPLICIT LOAD, IF ANY         YM1088
         LTR   WKREGB,WKREGB       IS IT EXPLICIT LOAD?          YM1088
         BZ    FT0055              IF NOT, BRANCH                YM1088
         ST    WKREGB,EXLCORAD     SET MODULE ADDR IN XLIST      YM1088
         B     FT00601             BRANCH AROUND GETMAIN         YM1088
FT0055   EQU   *                   PREPARE FOR GETMAIN           YM1088
         L     WKREGB,EXLCORSZ     CORE SIZE OF MODULE
         LA    WKREGB,0(WKREGB)    CLEAR HIGH BYTE
         LA    WKREGC,EXLCORAD     LOC FOR GM TO STORE CORE ADDR
         TM    WKATTR+1,PDS2ORG0   IS TXT ORG AT ZERO ?          Y02081
         BZ    FT006               NO, SKIP PAGE ALIGN TEST
         TM    WKTXORG,PDS2PAGA    IS PAGE ALIGNMENT REQ'D ?     Y02081
         BZ    FT006               NO,BRANCH FOR NORMAL GM
*                                  YES,GM ON A PAGE BOUNDARY
         GETMAIN EC,MF=(E,XGMLIST),LV=(WKREGB),A=(WKREGC),             *
               SP=(IDREG),BNDRY=PAGE
         LTR   CODEREG,CODEREG     TEST GETMAIN SUCCESSFUL       Y02081
         BNZ   FT027C              IF NOT, RETURN WITH RC=12     Y02081
         SPACE
         B     FT00601             BYPASS NORMAL GETMAIN
         SPACE
FT006    EQU   *                   PERFORM NON-PAGE BOUNDARY GETMAIN
         GETMAIN EC,MF=(E,XGMLIST),LV=(WKREGB),A=(WKREGC),             *
               SP=(IDREG),BNDRY=DBLWD
         LTR   CODEREG,CODEREG     TEST GETMAIN SUCCESSFUL       Y02081
         BNZ   FT027C              IF NOT, RETURN WITH RC=12     Y02081
         SPACE
FT00601  EQU   *                   CONTINUE INITIALIZATION
         MVI   EXLADIND,ADIND      SET ADDR FLAG IN XLIST
         MVC   FTRPTR,EXLCORAD     SAVE CORE ADDR AS THE RELOC
*                                  FACTOR FOR LOAD MODULE.
*   INITIALIZE THE NOTE LIST PREFIX-
         TM    WKATTR,PDS2OVLY     IS MODULE IN OVERLAY ?        Y02081
         BZ    FT00701             BRANCH NOT OVLY TO FIRST READ
         MVC   NLRELFAC,FTRPTR     MOVE RELOC FACTOR INTO NL
         MVC   NLCORSIZ,WKLNTH     SAVE MOD CORE SIZE IN NL      Y02081
         MVC   NLCONCAT,WKTTRN+3   SAVE CONCAT NUMBER IN NL      Y02081
         SPACE
*   PREPARE FOR READING NOTE LIST TTR ENTRIES-
         STH   WKREGD,FTCPSRCH+SRCHTIC+CCWLEN  PUT NL SIZE INTO
*                                  CCW FOR NL READ
         LA    WKREGA,NLENTRYS     LOC OF NL
         ST    WKREGA,FTCPSRCH+SRCHTIC  NL ADDR INTO READ CCW
         MVI   FTCPSRCH+SRCHTIC,READOP  SET READ COMMAND CODE
         SPACE
         XC    XLOFIX,XLOFIX       CLEAR PAGE-FIX REQUIREMENTS
         ST    WKREGA,XTXTAD       SET READ LOC FOR CCW XLATE FN
         AR    WKREGA,WKREGD       ADD LENGTH TO START OF NL     Y02081
         ST    WKREGA,XNEXTLOC     SAVE AS HIGH ADDR FOR FIX     Y02081
         LA    WKREGA,FTCPSRCH+SRCHTIC  LOC OF READ CCW
         ST    WKREGA,XCCWAD       SAVE FOR CCW XLATE FN
*        OI    XFLAG1,SYNRDFLG     DENOTE SYNC-READ AND
*                                  NEW I/O FOR XLATE FN.
         ICM   WKREGF,B'1110',WKTTESD+4  EXTRACT TTR FOR NL      Y02081
         IC    WKREGF,WKTTRN+3     INCLUDE CONCAT NUMBER         Y02081
         TM    XFLAG1,VAMDEV       IS THIS A VAM DS?
         BO    FTVAM01             YES GO ISSUE I/O FOR VAM
         BAL   WKREGE,CVRTSET      GO CONVERT TTRC TO ABSOLUTE
         MVC   FTSKBUF1+CCHHR(5),FTIOBSK+CCHHR  MOVE CCHHR FOR   Y02081
*                                  NOTELIST READ                 Y02081
         L     WKREGA,XIOSBAD      GET IOSB ADDRESS              Y02081
         USING IOSB,WKREGA         ADDRESSABILITY FOR IOSB       Y02081
         MVC   IOSEEK,FTIOBSK      SET IOSB STATIC SEEK ADDR     Y02081
         DROP  WKREGA              DROP IOSB BASE                Y02081
         LA    WKREGA,FTSKBUF1+CCHHR  GET ADDR OF CCHHR FOR NL   Y02081
         STCM  WKREGA,ADDR,FTCPSRCH+SRCHCCW  SET SRCH ADR FOR NL Y02081
         SPACE
*        NI    XFLAG1,ALL-SYNRDFLG CLEAR SYNC-READ CONDITION
         DROP  LISTREG             DROP EXTENT LIST BASE
*
*   PREPARE TO READ FIRST MODULE RECORD.
*
FT00701  EQU   *                   CHANNEL PROGRAM SETUP
         TM    XFLAG1,VAMDEV       IS THIS A VAM DS?
         BO    FTVAM021            YES GET TTR FOR VAM DS
         ICM   WKREGF,B'1110',WKTTESD  TTR FOR FIRST TEXT        Y02081
         IC    WKREGF,WKTTRN+3     CONCAT FACTOR                 Y02081
         BAL   WKREGE,CVRTSET      TO CONVERT RTN SET UP
         CLI   FTCPSRCH+SRCHTIC,READOP  READING THE NOTELIST?    Y02081
         BE    FT00702             IF SO, BYPASS TIC SETUP       Y02081
         LA    WKREGA,FTCP1        POINT TO 1ST CHAN PROG        Y02081
         STCM  WKREGA,ADDR,FTCPSRCH+SCHTICAD  STORE TIC TO LOC   Y02081
         L     WKREGA,XIOSBAD      GET IOSB ADDRESS              Y02081
         USING IOSB,WKREGA         ADDRESSABILITY FOR IOSB       Y02081
         MVC   IOSEEK,FTIOBSK      SET IOSB STATIC SEEK ADDR     Y02081
         DROP  WKREGA              DROP IOSB BASE                Y02081
FT00702  EQU   *                   CONTINUE SETUP FOR 1ST READ   Y02081
         L     WKREGA,FTRPTR       POINT TO START OF MOD IN CORE
         TM    WKATTR+1,PDS2ORG0   TEST ED ASSIG ORIGN FOR 0     Y02081
         BC    1,FT008             BRANCH NOT ZERO
         L     WKREGB,WKTXORG      ORIGN OF FIRST TEXT           Y02081
         SRL   WKREGB,8            SHIFT OUT EXTRA BYTE
         AR    WKREGA,WKREGB       ADD RELOC FACTOR TO ORIGIN
FT008    STCM  WKREGA,ADDR,FTCP1+CCWADR  RELOC ORIGIN TO CH PGM  Y02081
         MVC   FTCP1+6(2),WKLNTH+3 COUNT OF FIRST TEXT TO CP     Y02081
         SPACE
*  PLACE TEXT-READ DATA IN THE SIO TRANSLATE TABLE.
*  (BYPASS IF WE ARE GOING TO READ THE NOTELIST)                 Y02081
*
         CLI   FTCPSRCH+SRCHTIC,READOP  READING THE NOTELIST?    Y02081
         BE    FT00801             IF SO, BYPASS TRANS SETUP     Y02081
         ST    WKREGA,XTXTAD       ADDRESS OF DATA READ
         LA    WKREGB,FTCP1        GET TXT-READ CCW
         ST    WKREGB,XCCWAD       ADDRESS OF CCW TO XLATE
         AH    WKREGA,FTCP1+CCWLEN ADD READ COUNT TO READ LOC
         ST    WKREGA,XNEXTLOC     SAVE AS DEFAULT TEXT POINTER
FT00801  EQU   *                   CONTINUE SETUP FOR 1ST READ   Y02081
         SPACE
*  INITIALIZE MODULE LIMIT VALUES FOR VALIDITY CHECKING.
         MVC   XSOMAD,FTRPTR       SAVE START-OF-MODULE LOC
         L     WKREGB,WKLNTH       GET MODULE SIZE
         SRL   WKREGB,8            SHIFT TO RIGHT JUSTIFY
         A     WKREGB,FTRPTR       ADD START-OF-MODULE LOC
         ST    WKREGB,XEOMAD       SAVE AS END-OF-MODULE LOC
*  DENOTE AN ACTIVE READ-TEXT CCW IS IN CURRENT CHANL PGM.
         OI    XFLAG1,ACTXTFLG     SET ON TXT-RD INDICATOR
*
*        TEST MODULE ATTRIBUTES FOR ONLY ONE TEXT RECORD
*        AND NO RLD.
*
         TM    WKATTR,PDS21BLK     TEST 1 TXT NO RLDS
         BZ    FT009               BRANCH MULTI RECS
         MVI   FTCP1+CCWFLG,ALL-ALL  CLEAR CC
         MVI   FTFLG4,ALL          SET LAST INDICATOR
*        OI    XFLAG1,SYNRDFLG     TURN ON SYNC READ FLAG
         OI    XFLAG2,ONETXT       SET 1 TXT NO RLD FLAG         Y02081
FT009    EQU   *                   CONTINUE WITH MAINLINE CODE
         SPACE
*
*-------- END OF INITIALIZATION FOR PROGRAM MANAGER.
        TITLE 'IEWFETCH...PROGRAM LOADING ROUTINE...MAIN LINE'
*
*        MAINLINE ROUTINE FOR LOADING MODULE RECORDS.
*
         SPACE
FT010    EQU   *                   START OF MAINLINE CODE        Y02081
*
*  PREPARE PAGE FIX LIMITS FOR I/O REQUEST.
*
         CLI   FTCPSRCH+SRCHTIC,READOP  READING THE NOTELIST?    Y02081
         BNE   FT010A1             BRANCH IF NOT                 Y02081
         L     WKREGA,XTXTAD       GET NOTELIST START ADDR       Y02081
         ST    WKREGA,XLOFIX       USE AS START ADDR FOR FIX     Y02081
         L     WKREGA,XNEXTLOC     GET NOTELIST END ADDR         Y02081
         B     FT010D              BYPASS VALIDITY CHECK         Y02081
FT010A1  EQU   *                   CONTINUE SETUP FOR PGFIX      Y02081
         TM    XFLAG1,ACTXTFLG     IS A TXT-READ ACTIVE IN CP ?
         BO    FT010B              IF SO, GO BUILD FIX UPON IT
         L     WKREGA,XNEXTLOC     BASE FIX REQ ON DEFAULT PTR
         C     WKREGA,XEOMAD       IS DEFAULT PTR WITHIN MODULE
         BNL   FT010A              BRANCH IF NOT
         ST    WKREGA,XLOFIX       SET LOWER BNDRY
         A     WKREGA,FIXLIMTM     ADD LIMIT TO GE UPPER BNDRY
         B     FT010C              GO ADJUST UPPER BNDRY TO PG
*  SET UP FOR NO FIX IN TEXT AREA.
FT010A   XC    XLOFIX,XLOFIX       CLEAR FIX REQUIREMENTS
         XC    XHIFIX,XHIFIX       CLEAR FIX REQUIREMENTS
         B     FT010Z              GO REQUEST I/O
         SPACE
*  SET UP FIX BASED ON CURRENT TEXT RECORD (IN TRANSLATE TABLE).
FT010B   L     WKREGA,XTXTAD       TEXT RECORD ADDRESS
         C     WKREGA,XSOMAD       IS IT WITHIN MODULE LIMITS ?
         BL    FT027E              BRANCH IF NOT VALID
         C     WKREGA,XEOMAD       ADDR IN MODULE LIMITS ?
         BNL   FT027E              BRANCH NOT VALID
         ST    WKREGA,XLOFIX       SAVE LOWER FIX BNDRY
         L     WKREGA,XNEXTLOC     GET END OF REC ADDR
         C     WKREGA,XEOMAD       IS IT WITHIN MODULE ?
         BNH   FT010B5             BRANCH IF VALID               ZM0130
*    INVALID ADDRESS-GO GIVE 106E
         XC    XLOFIX,XLOFIX       CLEAR PGFIX REQMENTS          ZM0130
         B     FT027E              GO GIVE 106E                  ZM0130
FT010B5  EQU   *
         L     WKREGA,XTXTAD       GET RECORD ADDR
         A     WKREGA,FIXLIMTM     ADD MAX FIX RANGE
         C     WKREGA,XNEXTLOC     DOES MAX RANGE COVER THE REC ?
         BH    FT010C              IF YES,BRANCH
         L     WKREGA,XNEXTLOC     IF NOT,USE END OF REC INSTEAD
         SPACE
*  ADJUST UPPER BOUNDARY TO NEXT PAGE ADDRESS.
FT010C   BCTR  WKREGA,0            POINT TO ACTUAL LAST BYTE
         A     WKREGA,PAGESIZM     BUMP TO NEXT PAGE LOC
         N     WKREGA,PAGEMSKM     TRUNC TO PRIOR PAGE BNDRY
         C     WKREGA,XEOMAD       DOES RESULT EXCEED END OF MOD
         BL    FT010D              BRANCH IF WITHIN MODULE
         L     WKREGA,XEOMAD       EOM IS EXCEEDED SO USE EOM
FT010D   ST    WKREGA,XHIFIX       STORE UPPER FIX BOUNDARY
*
*   INITIATE THE I/O REQUEST.
*
FT010Z   EQU   *                   SETUP FOR STARTIO
*        OI    XFLAG1,NEWIOFLG     SET FRESH I/O INDICATOR
         L     WKREGA,XLOFIX       GET START ADDR FOR FIX        Y02081
         L     WKREGB,XHIFIX       GET END ADDR FOR TEXT FIX     Y02081
         LTR   WKREGA,WKREGA       ANYTHING TO FIX?              Y02081
         BZ    FT010E              IF NOT, BRANCH AROUND         Y02081
         XC    FTFXECB,FTFXECB     CLEAR ECB FOR PGFIX           Y02081
         LA    WKREGF,FTFXECB      POINT TO ECB FOR PGFIX        Y02081
         PGFIX R,A=(1),EA=(2),ECB=(0),LONG=N  FIX TEXT PAGES     Y02081
         CLM   CODEREG,PGMASK,PGFXDONE  PGFIX COMPLETE?        @ZA07064
         BNE   FT010Z1             BRANCH IF PGFIX COMP        @ZA07064
         WAIT  1,ECB=FTFXECB       WAIT FOR PGFIX COMPLETION     Y02081
*           TEST IF PAGES REALLY FIXED                         @ZA07064
FT010Z1  TM    ECBERRIN,X'04'      ERROR BIT ON IN ECB         @ZA07064
         BO    FT027E              BRANCH IF ERROR             @ZA07064
         SPACE
FT010E   EQU   *                   CONTINUE I/O SETUP            Y02081
         SPACE
**********************************************************************
*                                                                    *
*        FIX THE ROUTINE USED AS THE DISABLED                        *
*        INTERRUPT EXIT FROM IOS.
*                                                                    *
         L     WKREGA,FTPCIADD     GET START ADDR FOR FIX        Y21179
         L     WKREGB,FTFXADDR     GET END ADDR FOR FIX          Y21179
         L     WKREGC,CVTPTR       GET CVT ADDRESS             @ZA05457
         USING CVT,WKREGC          CVT ADDRESSABILITY          @ZA05457
         CLM   WKREGB,B'0111',CVTNUCB+1 DIE RTN IN FIXED LPA?  @ZA05457
         DROP  WKREGC                                          @ZA05457
         BNH   FT010F              BRANCH IF IN FIXED LPA      @ZA05457
         SPACE
         XC    FTFXECB,FTFXECB     CLEAR ECB FOR FIX             Y21179
         LA    WKREGF,FTFXECB      POINT TO ECB FOR FIX          Y21179
         SPACE
         PGFIX  R,A=(1),EA=(2),ECB=(0),LONG=N  FIX DIE ROUTINE   Y21179
         CLM   CODEREG,PGMASK,PGFXDONE  IS PGFIX COMP?         @ZA07064
         BNE   FT010E1             BRANCH IF PGFIX COMP        @ZA07064
         SPACE 2
         WAIT  1,ECB=FTFXECB       WAIT FOR PGFIX TO COMPLETE
*               TEST IF PAGES REALLY FIXED                     @ZA07064
FT010E1  TM    ECBERRIN,X'04'      ERROR BIT ON IN ECB?        @ZA07064
         BO    FT027E              BRANCH IF ERROR             @ZA07064
         SPACE 2
******                                                           ******
*        THE LOCAL LOCK IS OBTAINED AT THIS POINT TO GUARANTEE        *
*        THAT THE MEMORY FETCH IS RUNNING UNDER CANNOT BE SWAPPED     *
*        OUT. IF THIS WERE NOT DONE THE REAL ADDRESSES OF THE         *
*        DATA AREAS REFERENCED BY THE FETCH CHANNEL PROGRAMS COULD    *
*        CHANGE BECAUSE OF A SWAP-OUT BEFORE THE I/O WAS INIATED      *
*        AND THE CHANNEL PROGRAMS WOULD BE IN ERROR.           Y02081 *
******                                                           ******
         SPACE
FT010F   LR    WKREGD,FTBASE1      SAVE FETCH BASE REG           Y02081
         LR    WKREGC,FTBASE2      SAVE WORK AREA BASE           Y02081
GETLCK   SETLOCK  OBTAIN,TYPE=LOCAL,MODE=UNCOND,                       X
               RELATED=(FTLOCLK,IEWFETCH(FREELCK))               Y02081
         LR    FTBASE1,WKREGD      RESTORE FETCH BASE REG        Y02081
         LR    FTBASE2,WKREGC      RESTORE WORK AREA BASE        Y02081
         SPACE
******                                                           ******
*        AT THIS POINT THE VIRTUAL ADDRESSES IN THE FETCH CHANNEL     *
*        PROGRAMS CAN SAFELY BE TRANSLATED TO REAL ADDRESSES. THE     *
*        PAGES REFERENCED HAVE ALL BEEN FIXED AND THE LOCAL LOCK      *
*        IS HELD TO PREVENT SWAP-OUTS.                         Y02081 *
******                                                           ******
         LA    WKREGA,FTCPSRCH     POINT TO THE SEARCH CP        Y02081
         LA    WKREGB,CPSRCHCT     SET CCW COUNT FOR TRANS       Y02081
         BAL   WKRG12,FTINTRN      GO TO TRANSLATE IT            Y02081
         LA    WKREGA,FTCP1+CCWSZ  POINT TO 2ND CCW IN CP1       Y02081
         LA    WKREGB,CP1CT        SET CCW COUNT FOR CP1         Y02081
         BAL   WKRG12,FTINTRN      GO TO TRANSLATE IT            Y02081
         LA    WKREGA,FTCP2+CCWSZ  POINT TO 2ND CCW IN CP2       Y02081
         LA    WKREGB,CP2CT        SET CCW COUNT FOR CP2         Y02081
         BAL   WKRG12,FTINTRN      GO TO TRANSLATE IT            Y02081
         LA    WKREGA,FTCP3+CCWSZ  POINT TO 2ND CCW IN CP3       Y02081
         LA    WKREGB,CP3CT        SET CCW COUNT FOR CP3         Y02081
         BAL   WKRG12,FTINTRN      GO TO TRANSLATE IT            Y02081
         STM   WKRG7,WKRG10,FTREGSV  SAVE REGISTERS 7 - 10       Y02081
         BAL   WKRG12,FTTRN01      TRANSLATE THE READTXT CCW     Y02081
         LM    WKRG7,WKRG10,FTREGSV  RESTORE REGISTERS 7 - 10    Y02081
         SPACE 2
         EJECT
**********************************************************************
*        INITIALIZE THE PURGE AND END OF EXTENT ROUTINE              *
*        ADDRESSES IN THE VOID.                                      *
**********************************************************************
         SPACE
         L     WKREGB,CVTPTR       GET CVT ADDR                  Y21179
         USING CVT,WKREGB          CVT ADDRESSABILITY            Y21179
         L     WKREGA,CVTIXAVL     GET POINTER TO IOSCOM         Y21179
         LA    WKREGA,0(WKREGA)    CLEAR HI ORDER BYTE           Y21179
         DROP  WKREGB              DROP CVT BASE                 Y21179
         USING IOCOM,WKREGA        IOSCOM ADDRESSABILITY         Y21179
         L     WKREGB,IOCVOID      GET ADDRESS OF VOID           Y21179
         LA    WKREGB,0(WKREGB)    CLEAR HI ORDER BYTE           Y21179
         DROP  WKREGA              DROP IOCOM BASE
         L     WKREGA,PURGERTN     GET ADDR OF PURGE             Y21179
         ST    WKREGA,VOIDFTPG(WKREGB)  INIT VOID PURGE ADDR     Y21179
         L     WKREGA,EOXRTN       GET ADDR OF EOX RTN           Y21179
         ST    WKREGA,VOIDFTXK(WKREGB)  INIT VOID EOX ADDR       Y21179
         EJECT
***********************************************************************
*        ISSUE THE STARTIO MACRO TO INITIATE IOS PROCESSING OF THE    *
*        FETCH I/O REQUEST AS A SYSTEM EVENT (DRIVEN BY AN SRB)       *
*                                                              Y02081 *
***********************************************************************
         SPACE
         XC    FTECB,FTECB         CLEAR FETCH I/O ECB           Y02081
         L     WKREGA,XIOSBAD      GET IOSB ADDRESS              Y02081
         USING IOSB,WKREGA         IOSB ADDRESSABILITY           Y02081
         MVC   IOSEEKA,IOSEEK      SET IOSB DYNAMIC SEEK         Y02081
*
*------ PLACE REAL AND VIRTUAL POINTERS TO THE FETCH CHANNEL     Y02081
*                     PROGRAM IN THE IOSB                        Y02081
*
         LRA   WKREGB,FTCPSRCH+CCWSZ  REAL ADDR OF CHAN PROG     Y02081
         ST    WKREGB,IOSRST       SET CP REAL ADDR IN IOSB      Y02081
         LA    WKREGB,FTCPSRCH+CCWSZ  VIRTUAL ADDR OF CHAN PROG  Y02081
         ST    WKREGB,IOSVST       SET CP VIRT ADDR IN IOSB      Y02081
         DROP  WKREGA              DROP IOSB BASE                Y02081
         LA    WKREGA,IOSBSIZE(WKREGA)  GET SRB POINTER          Y02081
         LR    WKREGB,FTBASE2      SAVE WORK AREA BASE           Y02081
         L     FTBASE2,PSAAOLD     GET ASCB POINTER              Y02081
         L     FTBASE2,ASCBASXB-ASCB(FTBASE2)  GET ASXB POINTER  Y02081
         USING ASXB,FTBASE2        ADDRESSABILITY FOR ASXB       Y02081
         STM   WKRG14,WKRG12,ASXBFLSA+12  SAVE REGISTERS IN THE  Y02081
*                                  ASXB SAVE AREA ACROSS STARTIO Y02081
*                                  CALL SO THERE IS NO CONFLICT  Y02081
*                                  WITH THE USE OF THE SAVE AREA Y02081
*                                  IN THE FETCH WORK AREA BY THE Y02081
*                                  ASYNCHRONOUS I/O APPENDAGE    Y02081
*                                  ROUTINES                      Y02081
         STARTIO   SRB=(1),TCB=0   INITIATE I/O                  Y02081
*
         LM    WKRG14,WKRG12,ASXBFLSA+12  RESTORE REGISTERS      Y02081
         SPACE
******                                                           ******
*        THE LOCAL LOCK CAN NOW BE RELEASED BECAUSE THE I/O HAS       *
*        BEEN SCHEDULED UNDER AN SRB AND, AS SUCH, THE MEMORY CANNOT  *
*        BE SWAPPED OUT UNTIL THE I/O IS COMPLETE AND THE SRB HAS     *
*        BEEN TERMINATED.                                      Y02081 *
******                                                           ******
         SPACE
         LR    WKREGA,FTBASE1      SAVE FETCH BASE REG           Y02081
FREELCK  SETLOCK  RELEASE,TYPE=LOCAL,                                  X
               RELATED=(FTLOCLK,IEWFETCH(GETLCK))                Y02081
         LR    FTBASE1,WKREGA      RESTORE FETCH BASE REG        Y02081
         LR    FTBASE2,WKREGB      RESTORE WORK AREA BASE        Y02081
         USING WKFETCH,FTBASE2     RESET WORK AREA BASE REG      Y02081
         SPACE
         WAIT  1,ECB=FTECB         WAIT FOR I/O COMPLETION       Y02081
*                                  (POSTED BY SRB EXIT RTN)      Y02081
*
         TM    XFLAG2,CPLOOP       WAS CHAN PROG LOOP DETECTED   Y02081
*                                  IN NORMAL END EXIT?           Y02081
         BZ    FT011               IF NOT, CONTINUE              Y02081
*  IF A CHANNEL PROGRAM LOOP HAS BEEN DETECTED, ISSUE A C0D      Y02081
*  ABEND TO CAUSE INVOKATION OF FETCH'S ESTAE EXIT ROUTINE       Y02081
         ABEND X'C0D',,STEP,SYSTEM  ISSUE THE ABEND              Y02081
FT011    EQU   *                   CONTINUE TESTING FOR ERRORS   Y02081
         TM    XFLAG2,BADREC       WAS AN INVALID RECORD         Y02081
*                                  TYPE FOUND?                   Y02081
         BO    FT027D              IF SO, TERMINATE              Y02081
         TM    XFLAG1,RELERR       WAS AN INVALID RLD            Y02081
*                                  ADDRESS FOUND?                Y02081
         BO    FT027E              IF SO, TERMINATE              Y02081
         TM    XFLAG2,CTLERR       WAS A BAD CTL REC ADDR FOUND? Y02081
         BO    FT027E              IF SO, TERMINATE              Y02081
*
         CLI   FTECB,X'7F'         TEST I/O COMPLETION CODE      Y02081
         BNE   FT027F              BRANCH ON ANY ERROR           Y02081
         TM    XFLAG2,ONETXT       1 TXT NO RLDS?                Y02081
         BO    FT027               IF SO, TERMINATE              Y02081
         L     WKRG3,FTLASTBF      POINT TO LAST TABLE ENTRY     Y02081
         LTR   WKRG3,WKRG3         WAS THERE ANY?                Y02081
         BZ    FT027               IF NOT, TERMINATE             Y02081
         L     WKREGA,TBLBUFAD(WKRG3)  POINT TO LAST BUFFER      Y02081
         TM    0(WKREGA),TSTBITS   TEST INVALID RECORD TYPE      Y02081
         BNZ   FT027D              IF FOUND, BRANCH              Y02081
         STM   WKRG0,WKRG15,FTREGSV  SAVE REGISTERS              Y02081
         LR    WKBASE,FTBASE2      SET WORKAREA BASE FOR         Y02081
*                                  THE RELOCATE SUBROUTINE       Y02081
         L     CODEREG,RELOCAD     POINT TO RELOCATE SUBRTN      Y02081
         BALR  LINKREG,CODEREG     LINK TO RELOCATE SUBRTN       Y02081
         LM    WKRG0,WKRG15,FTREGSV-WKFETCH(WKBASE)  RESTOR REGS Y02081
         TM    XFLAG1,RELERR       BAD ADDR FOUND BY RELOC?      Y02081
         BO    FT027E              IF SO, BRANCH                 Y02081
         B     FT027               IF NOT, GO TO NORMAL          Y02081
*                                  FETCH TERMINATION             Y02081
         SPACE 2
RELOCAD  DC    A(DIERELOC)         ADDR OF RELOCATE SUBRTN       Y02081
PURGERTN DC    A(IEWFTPRG)         ADDR OF PURGE ROUTINE         Y21179
EOXRTN   DC    A(IEWFTXCK)         ADDR OF EOX ROUTINE           Y21179
FTFXADDR DC    A(FTFXEND)          ADDR OF DIE FIX END           Y21179
FTPCIADD DC    A(FTPCI01)          ADDR OF DIE FIX START         Y21179
         EJECT
***********************************************************************
*
*        THIS ROUTINE WILL ISSUE THE I/O FOR VAM DATA SETS.  IT WILL
*        ISSUE AN EXCP TO READ THE NOTE LIST AND ANOTHER EXCP FOR
*        THE READING OF THE MODULE TEXT.  THE I/O OPERATION FOR
*        VAM DATA SETS APPEARS NAD ACTS JUST AS A REGULAR EXCP.
*                                                                Y02081
         SPACE
FTVAM01  EQU   *                   START OF VAM MAINLINE CODE    Y02081
         SPACE
*     SET UP FOR AND GO TO TTR CONVERT FOR NOTELIST CONVERT.
         SPACE
         L     WKREGA,FTIOB+TWENTY GET THE DCB ADDRESS           Y02081
         L     WKREGA,DCBDEBAD(WKREGA)  GET THE DEB ADDRESS      Y02081
         LA    WKREGA,0(WKREGA)    CLEAR HI BYTE                 Y02081
         SPACE
         BAL   WKREGE,CVRTSET1     GO CONVERT TTR                Y02081
         SPACE
*     READ THE NOTELIST
         SPACE
         XC    FTECB,FTECB         CLEAR ECB                     Y02081
         LA    WKREGA,FTIOB        ADDRESS OF IOB                Y02081
         SPACE
         SVC   EXCP                ISSUE I/O FOR NOTE LIST       Y02081
         SPACE 2
         WAIT  1,ECB=FTECB         WAIT ON I/O COMPLETION        Y02081
         SPACE 2
         TM    FTECB,IOERRBT       I/O ERROR OCCUR?              Y02081
         BZ    FT027F              BR TO INDICATE I/O ERROR      Y02081
         SPACE
*     UPDATE THE CHANNEL PROGRAM FROM READ THE NOTELIST TO READ
*      A TEXT RECORD.
         SPACE
         LA    WKREGA,FTCP1        ADDRESS OF READ TEXT CCW      Y02081
         STCM  WKREGA,ADDR,FTCPSRCH+SRCHTIC+CCWADR  UPDATE       Y02081
*                                  SEARCH CHAN PROG TO READ TEXT Y02081
         MVI   FTCPSRCH+SRCHTIC,TIC  MAKE IT 31-08-08            Y02081
FTVAM021 EQU   *                   SETUP FOR 1ST TEXT READ       Y02081
         L     WKREGA,FTRPTR       GET RELOC FACTOR              Y02081
         ST    WKREGA,XSOMAD       SET UP MODULE START           Y02081
         SR    WKREGB,WKREGB       RESET                         Y02081
         ICM   WKREGB,ADDR,WKLNTH  GET MODULE SIZE               Y02081
         AR    WKREGB,WKREGA       GET END OF MODULE             Y02081
         ST    WKREGB,XEOMAD       AND SET UP MODULE END         Y02081
         SPACE
         TM    WKATTR+1,PDS2ORG0   TEST ED ASSIGN ORIG FOR 0     Y02081
         BO    FTVAM03             BRANCH IF ZERO                Y02081
         L     WKREGB,WKTXORG      ORIGIN OF FIRST TEXT          Y02081
         SRL   WKREGB,8            SHIFT OUT EXTRANEOUS BYTE     Y02081
         AR    WKREGA,WKREGB       ADD RELOCATION FACTOR         Y02081
         SPACE
FTVAM03  EQU   *                                               @ZA26964
         CLM   WKREGA,ADDR,XSOMAD+VAMTXTAD WITHIN LOWER LIMIT  @ZA26964
         BL    FT027E                      BRANCH IF NOT       @ZA26964
         CLM   WKREGA,ADDR,XEOMAD+VAMTXTAD WITHIN UPPER LIMIT  @ZA26964
         BNL   FT027E                      BRANCH IF NOT       @ZA26964
         STCM  WKREGA,ADDR,FTCP1+VAMTXTAD  RELOC ORIGIN        @ZA26964
*                                          TO CH PGM           @ZA26964
         MVC   FTCP1+VAMCNT(L'PDS2FTBL),WKLNTH+3  COUNT OF       Y02081
*                                  FIRST TEXT BLOCK TO CH PGM    Y02081
         SPACE
*     SET UP AND GO TO CONVERT THE FIRST RECORD TTR
         SPACE
         ICM   WKREGF,B'1110',WKTTESD  GET TTR FOR RD TXT        Y02081
         IC    WKREGF,WKTTRN+3     CONCAT FACTOR                 Y02081
         TM    WKATTR,PDS21BLK     IS MODULE SINGLE TEXT RECORD  Y02081
*                                  WITH NO RLD'S?                Y02081
         BZ    FTVAM04A            IF NOT, BRANCH AROUND         Y02081
         MVI   FTCP1+VAMFLAGS,ALL-ALL  TURN OFF COMMAND CHAINING Y02081
*                                  IN READ TEXT CCW FLAGS        Y02081
         B     FTVAM04A            BRANCH AROUND OVLY SUP SETUP  Y02081
FTVAM04  EQU   *                   CALLER IS OVLY SUPV           Y02081
         LA    WKREGA,FTCP1+VAMRDRLD  POINT TO READ RLD CCW      Y02081
         STCM  WKREGA,ADDR,FTCPSRCH+SRCHTIC+CCWADR  SET TO READ  Y02081
*                                  A CONTROL RECORD FIRST WHEN   Y02081
*                                  LOADING AN OVERLAY SEGMENT    Y02081
FTVAM04A EQU   *                   GET SEEK ADDR FOR 1ST READ    Y02081
         L     WKREGA,FTIOB+TWENTY GET DCB ADDR                  Y21179
         L     WKREGA,DCBDEBAD(WKREGA)  GET DEB ADDR             Y21179
         LA    WKREGA,0(WKREGA)    CLEAR HI ORDER BYTE           Y21197
         BAL   WKREGE,CVRTSET1     TO CONVERT ROUTINE FOR VAM    Y02081
         SPACE
*     READ THE FIRST RECORD.
         SPACE
         MVI   FTECB,REC0          INITIALIZE ECB                Y02081
         LA    WKREGA,FTIOB        GET IOB ADDRESS               Y02081
         SPACE
         SVC   EXCP                ISSUE I/O FOR READ TEXT       Y02081
         SPACE 2
         TM    FTECB,X'40'         ECB POSTED COMP?            @ZA12206
         BC    1,FTVAM04B          BRANCH IF YES               @ZA12206
         WAIT  1,ECB=FTECB         WAIT ON I/O COMPLETION        Y02081
         SPACE
FTVAM04B TM    FTECB,IOERRBT       I/O ERROR OCCUR?              Y02081
         BZ    FT027F              YES GO TO ERROR               Y02081
         TM    XFLAG2,BADREC       INVALIK REC TYPE?             Y02081
         BC    1,FT027D            YES, ISSUE CODE               Y02081
         TM    XFLAG1,RELERR       INVALID ADDRESS?              Y02081
         BO    FT027E              ISSUE INVLD ADDR CODE         Y02081
         B     FT027               POST SUCCESSFUL LOAD          Y02081
         EJECT
***********************************************************************
*                SUBROUTINE TO TRANSLATE TEXT READ CCW                *
*        TEST THE TEXT READ CCW TO DETERMINE IF AN INDIRECT ADDRESS   *
*        LIST IS REQUIRED (TEXT WILL CROSS PAGE BOUNDARIES WHEN READ) *
*        IF SO, BUILD THE IDAL AND POINT THE CCW TO IT; IF NOT, SET   *
*        THE REAL ADDRESS OF THE TEXT READ-IN AREA INTO THE CCW.      *
*                  REGISTER USAGE:                                    *
*                            REGS 7 - 10 USED AS WORK REGISTERS       *
*                            REG 11 IS BASE REGISTER  =A(FT001)       *
*                            REG 12 IS RETURN REGISTER                *
*                            REG 13 IS WORK AREA BASE REGISTER        *
*                                                              Y02081 *
***********************************************************************
         SPACE 2
FTTRN01  L     WKRG9,XCCWAD        LOAD CCW PTR FROM TRN TBL     Y02081
         L     WKRG10,XTXTAD       LOAD TXT PTR FROM TRN TBL     Y02081
         LTR   WKRG7,WKRG10        TEST NO CCW TO PROCESS        Y02081
         BZ    FTTRN06             BRNCH NO CCW TO TRANSLATE     Y02081
         AH    WKRG7,CCWLEN(WKRG9) POINT TO END OF TEXT LOC      Y02081
         BCTR  WKRG7,0             POINT TO LAST BYTE OF TXT     Y02081
         N     WKRG7,PAGEMSKM      ADJST TO PRIOR PAGE BNDRY     Y02081
         CR    WKRG7,WKRG10        IS TXT REC IN ONE PAGE?       Y02081
         BH    FTTRN04             BRNCH IF PAGE IS CROSSED      Y02081
         SPACE
*    SET UP CCW WITH ACTUAL DATA ADDRESS.
         LRA   WKRG7,0(WKRG10)     GET REAL ADDR OF TEXT         Y02081
         STCM  WKRG7,ADDR,CCWADR(WKRG9)  STORE IN CCW            Y02081
         NI    CCWFLG(WKRG9),ALL-IDALFLAG  TURN OFF IDAL BIT     Y02081
         B     FTTRN06             GO TO RETURN                  Y02081
         SPACE
*   SET UP CCW WITH IDAL ADDRESS.
FTTRN04  L     WKRG8,XIDALP1       GET IDAL POINTER              Y02081
         LRA   WKRG8,0(WKRG8)      CONVERT POINTER TO REAL       Y02081
         STCM  WKRG8,ADDR,CCWADR(WKRG9)  STORE IN TEXT CCW       Y02081
         OI    CCWFLG(WKRG9),IDALFLAG  TURN ON IDAL BIT IN CCW   Y02081
         SPACE
*   BUILD THE IDAL.
         LR    WKRG7,WKRG10        LOC OF TEXT RECORD            Y02081
         AH    WKRG7,CCWLEN(WKRG9) ADD TXT SIZE FOR REC END      Y02081
         BCTR  WKRG7,0             DECR TO LAST BYTE             Y02081
         N     WKRG7,BLOKMSKM      TRUNC TO GET LST 2K BNDRY     Y02081
         L     WKRG8,XIDALP1       SET IDAL AREA POINTER         Y02081
         LRA   WKRG9,0(WKRG10)     READ ADDR OF TEXT RECORD      Y02081
         N     WKRG10,BLOKMSKM     ADJUST TO PRIOR 2K BNDRY      Y02081
FTTRN05  ST    WKRG9,0(WKRG8)      STORE REAL ADDR IN IDAL       Y02081
         A     WKRG10,BLOKSIZM     INCR TO NEXT 2K BLOCK         Y02081
         CR    WKRG10,WKRG7        IS IT PAST LST PAGE ADDR?     Y02081
         BH    FTTRN06             IF SO, RETURN                 Y02081
         LA    WKRG8,IDALNTRY(WKRG8)  BUMP TO NEXT IDAL WORD     Y02081
         LRA   WKRG9,0(WKRG10)     GET REAL ADR OF DATA PAGE     Y02081
         B     FTTRN05             CONTINUE IDAL BUILD           Y02081
FTTRN06  BR    WKRG12              RETURN TO CALLER              Y02081
         EJECT
***********************************************************************
*                SUBROUTINE TO TRANSLATE INTERNAL CCW'S               *
*        TRANSLATES VIRTUAL ADDRESSES IN CCW'S TO REAL ADDRESSES --   *
*        ONLY FOR CCW'S WHICH REFERENCE ADDRESSES WITHIN THE FETCH    *
*        WORK AREA (NO TEST IS MADE FOR CCW'S REQUIRING IDAL'S)       *
*              REGISTER USAGE:                                        *
*                  REG 1 POINTS TO 1ST CCW TO BE TRANSLATED           *
*                  REG 2 = NUMBER OF CCW'S TO BE TRANSLATED           *
*                  REG 5 USED AS A WORK REGISTER                      *
*                  REG 12 IS THE RETURN REGISTER                      *
*                                                              Y02081 *
***********************************************************************
         SPACE 2
FTINTRN  EQU   *                   START OF CCW TRANSLATE SUBRTN Y02081
         ICM   WKREGC,ADDR,CCWADR(WKREGA)  GET CCW ADDRESS       Y02081
         LRA   WKREGC,0(WKREGC)    TRANSLATE VIRTUAL TO REAL     Y02081
         STCM  WKREGC,ADDR,CCWADR(WKREGA)  SET REAL ADDR IN CCW  Y02081
         LA    WKREGA,CCWSZ(WKREGA)  POINT TO NEXT CCW           Y02081
         BCT   WKREGB,FTINTRN      LOOP UNTIL CCW COUNT IS       Y02081
*                                  EXHAUSTED                     Y02081
         BR    WKRG12              RETURN TO CALLER              Y02081
         EJECT
**********************************************************************
*
*        SUBROUTINE TO SET PARAMS. FOR TTR CONVERT RTN
*
**********************************************************************
         SPACE
CVRTSET  STM   FTBASETR,CODEREG,FTREGSV  SAVE REGS FOR CONVERT RTN
         L     WKREGA,XIOSBAD      GET IOSB ADDRESS              Y02081
         USING IOSB,WKREGA         IOSB ADDRESSABILITY           Y02081
         L     WKREGA,IOSDSID      GET DEB ADDR FROM IOSB        Y02081
         DROP  WKREGA              DROP IOSB BASE                Y02081
         SPACE
         B     CVRTSET3            CONTINUE AROUND STORE         YM5763
CVRTSET1 EQU   *                   ENTRY FROM VAM MAINLINE       YM5763
         STM   FTBASETR,CODEREG,FTREGSV  SAVE VAM REGS           YM5763
CVRTSET3 EQU   *                   CONTINUE NON-VAM LOGIC        YM5763
         XC    FTIOBSK(8),FTIOBSK  ZERO IOB SEEK BUF
         LA    WKREGB,FTIOBSK      IOB SEEK TO CONVERT RTN
         L     CODEREG,CVTPTR      GET CVT PTR                   Y21179
         USING CVT,CODEREG         CVT ADDRESSABILITY            Y21179
         L     CODEREG,CVTPCNVT    ADDR OF CONVERT RTN           Y21179
         DROP  CODEREG             DROP CVT BASE                 Y21179
         LR    WKREGD,FTBASE2      SAVE WORKAREA BASE
         BALR  LINKREG,CODEREG     TO CONVERT RTN
         LTR   CODEREG,CODEREG     TEST SUCCESSFUL CONVERT       Y02081
         LM    FTBASETR,CODEREG,FTREGSV-WKFETCH(WKREGD)  RESTORE M022
         BNZ   FT027E              IF NOT, TERMINATE FETCH WITH  Y02081
*                                  RC=14 (I/O ERROR WOULD RESULT Y02081
*                                  FROM BAD SEEK ADDRESS)        Y02081
*
*  IF FIRST READ NOT FROM 1ST EXTENT, MUST UPDATE FILE MASK    @ZA10266
*
         CLC   FTIOBSK(1),XTNTSAVE+1  CURRENT M VALUE = FIRST? @ZA10266
         BE    CVRTSET4               YES--BRANCH--FILE MASK OK@ZA10266
         L     WKREGA,XIOSBAD         GET IOSB ADDRESS         @ZA10266
         USING IOSB,WKREGA            IOSB ADDRESSABILITY      @ZA10266
         L     WKREGB,IOSDSID         DEB ADDRESS FROM IOSB    @ZA10266
         USING DEBBASIC,WKREGB        DEB ADDRESSABILITY       @ZA10266
         SR    WKREGD,WKREGD          CLEAR REGISTER           @ZA10266
         IC    WKREGD,FTIOBSK         GET CURRENT M VALUE      @ZA10266
         SLL   WKREGD,4               INDEX TO CURRENT EXTENT  @ZA10266
         LA    WKREGC,DEBBASND-DEBBASIC(WKREGD,WKREGB)         @ZA10266
         USING DEBDASD,WKREGC         ADDRESSABILITY CURR EXT  @ZA10266
         MVC   IOSFMSK(1),DEBDVMOD    UPDATE FILE MASK         @ZA10266
         DROP  WKREGA                 DROP IOSB BASE           @ZA10266
         DROP  WKREGB                 DROP DEB BASE            @ZA10266
         DROP  WKREGC                 DROP EXTENT BASE         @ZA10266
CVRTSET4 MVC   FTREGSV+36(1),FTIOBSK  INIT EXT SAVEAREA FOR C.E@ZA10266
         BR    WKREGE              RETURN TO CALLER
        TITLE 'IEWFETCH...PROGRAM LOADING ROUTINE...TERMINATION'
*********************************************************************
*
*        FETCH TERMINATION ROUTINE
*
*********************************************************************
         SPACE 3
*********************************************************************
*   CONTROL IS RECEIVED AT FT027BAA FROM THE ESTAE SUBROUTINE TO ALLOW
*     FETCH TO TERMINATE ITSELF.  WHEN ENTERED HERE ESTAE HAS PASSED
*     R1 POINTING TO THE FETCH WORK AREA AND R15 IS BASE FOR FT027BAA.
         SPACE
         USING FT027BAA,CODEREG    R15=BASE                      Y02081
         SPACE
FT027BAA EQU   *                   ENTRY FROM ESTAE ROUTINE      Y02081
         LR    FTBASE2,WKREGA      R13=FETCH WORK AREA           Y02081
         L     FTBASE1,BASEMAIN    MAINLINE ADDRESSABILITY       Y02081
         SPACE
         DROP  CODEREG             RETURN R15 TO ASSEMBLER       Y02081
         USING FT001,FTBASE1       RESET MAINLINE BASE           Y02081
         SPACE 3
FT027B   LA    CODEREG,RCPRGCHK    PROG CHK OR LOOP IN FETCH     Y02081
         B     FT02701             BR TO RESUME TERMINATION      Y02081
FT027C   LA    CODEREG,RCNOCORE    NOT ENOUGH STORAGE SPACE      Y02081
         B     FT02701             BR TO RESUME TERMINATION      Y02081
FT027D   LA    CODEREG,RCBADREC    INVALID RECORD TYPE FOUND
         B     FT02701             BR TO RESUME TERMINATION
FT027E   LA    CODEREG,RCBADADR    INVALID ADDRESS ENCOUNTERED
         B     FT02701             BR TO RESUME TERMINATION
FT027F   LA    CODEREG,RCIOERR     PERMANENT I/O ERROR
         SPACE
FT02701  EQU   *                   CONTINUE TERMINATION PROCESS
         STC   CODEREG,XKEY        DENOTE WORK AREA NO LONGER
*                                  UNDER FETCH CONTROL.  USE
*                                  RETURN CODE TO INVALIDATE
*                                  THE FETCH ID KEY.
         SPACE
*    SAVE A COPY OF THE IOSB/SRB FOR DEBUGGING PURPOSES WHEN WE HAVE
*     AN ABNORMAL TERMINATION.
         SPACE
         L     CODEREG,XESTAEPT    GET IOSB/SRB COPY POINTER
         LTR   CODEREG,CODEREG     IOSB COPIED ALREADY
         BNZ   FT027017            GO IF IOSB ALREADY COPIED
         L     CODEREG,XIOSBAD     GET IOSB ADDRESS
         LTR   CODEREG,CODEREG     IOSB CREATED YET?
         BZ    FT027017            GO IF NO IOSB
         SPACE
         GETMAIN EC,MF=(E,XGMLIST),LV=IOSBSIZE,A=XESTAEPT,SP=230
         SPACE 2
         LTR   CODEREG,CODEREG     SUCCESSFUL GETMAIN
         BZ    FT02701E            GO IF SUCCESSFUL GETMAIN
         XC    XESTAEPT,XESTAEPT   ELSE INDICATE UNSUCCESSFUL G'M
         B     FT027017
         SPACE
FT02701E EQU   *                   SAVE IOSB
         L     WKRG2,XESTAEPT      POINT TO COPY AREA
         L     WKRG3,XIOSBAD       POINT TO IOSB
         MVC   0(IOSBSIZE,WKRG2),0(WKRG3)   COPY IOSB
         B     FT027017            AND CONTINUE
         SPACE
FT027    EQU   *                   NORMAL TERMINATION....        Y02081
         LA    CODEREG,RCNORMAL    SET NORMAL-END CODE
         STC   CODEREG,XKEY        DENOTE WORK AREA NO LONGER
*                                  UNDER FETCH CONTROL.  USE
*                                  RETURN CODE TO INVALIDATE
*                                  THE FETCH ID KEY.
FT027017 EQU   *                   CONTINUE
         L     RETURNRG,XRETSAV    RESTORE RETURN ADDRESS        Y02081
         L     WKRG3,XREGSV3       RESTORE REGISTER 3            YM1070
         L     WKRG6,XREGSV6       RESTORE REGISTER 6            YM1070
         L     DCBREG,XORGDCB      RESTORE ORIGINAL DCB POINTER
         TM    XFLAG1,USDEBFLG     WAS A DEB COPY USED ?
         BZ    FT02702             BRANCH IF NO COPIED DEB
         L     WKREGF,XDEBLEN      SIZE OF DEB COPY CORE
         L     WKREGA,XDCBDEBA     ADDR OF DEB COPY CORE
         NI    XFLAG1,DEBFREE      INDICATE DEB FREED            ZA0135
         FREEMAIN R,LV=(0),A=(1)   FREE DEB COPY CORE
         SPACE
FT02702  EQU   *                   CONTINUE TERMINATION          Y02081
         TM    XFLAG1,VAMDEV       WAS FETCH FROM A VAM D/S?     Y02081
         BO    FT02703             IF SO, BRANCH AROUND          Y02081
         TM    XFLAG2,PRGFREE      RESOURCES ALREADY FREED?      Y02081
         BO    FT02703             GO IF ALREADY FREED           Y02081
         L     WKREGF,IOBLKS       GET SUBPOOL ID AND SIZE OF    Y02081
*                                  GLOBAL STORAGE BLOCKS         Y02081
*                                  (IOSB AND SRB)                Y02081
         TM    XFLAG2,IOSBFREE     FREED YET?                  @ZA29740
         BO    FT02702A            GO IF ALREADY FREED         @ZA29740
         L     WKREGA,XIOSBAD      GET ADDR OF IOSB AND SRB      Y02081
         LTR   WKREGA,WKREGA       IS THERE ANY IOSB AND SRB?    YM6928
         BZ    FT02702A            IF NOT, DON'T TRY TO FREE IT  YM6928
         SPACE
*    INDICATE IOSB/SRB FREEMAINED IN CASE WE GET CONTROL
*     IN ESTAE
         SPACE
         OI    XFLAG2,IOSBFREE     IOSB/SRB FREED                YM8279
         FREEMAIN R,LV=(0),A=(1)   FREE FETCH GLOBAL STORAGE     Y02081
FT02702A EQU   *                   CLEANUP PAGEFIXED STORAGE     YM6928
         L     WKREGA,XLOFIX       GET STARTING ADDR OF FIXED    Y02081
*                                  TEXT AREA FOR PGFREE          Y02081
         LTR   WKREGA,WKREGA       ANYTHING FIXED?               Y02081
         BZ    FT02703             IF NOT, BYPASS PGFREE         Y02081
         SPACE
*    INDICATE PAGE FREE ISSUED IN CASE OF ESTAE.
         SPACE
         XC    XLOFIX,XLOFIX       INDICATE PAGEFREE             YM8279
         L     CODEREG,XHIFIX      GET END ADDR OF FIX AREA      Y02081
         PGFREE  R,A=(1),EA=(15)   FREE THE FIXED AREA           Y02081
         SPACE
*
*        UNFIX THE DISABLE INTERRUPT ROUTINE
*
         L     WKREGA,FTPCIADD     GET START ADDR TO UNFIX       Y21179
         L     WKREGB,FTFXADDR     GET END ADDR TO UNFIX         Y21179
*  IF DIE ROUTINE IS IN FIXED LPA, PAGES WERE NOT FIXED--THEREFORE
*  BRANCH AROUND PGFREE
         SPACE
         L      WKREGE,CVTPTR      GET CVT ADDRESS             @ZA05457
         USING  CVT,WKREGE         CVT ADDRESSABILITY          @ZA05457
         CLM    WKREGB,B'0111',CVTNUCB+1 DIE RTN IN FIXED LPA? @ZA05457
         DROP   WKREGE                                         @ZA05457
         BNH    FT02703            BRANCH IF IN FIXED LPA      @ZA05457
         SPACE
         PGFREE R,A=(1),EA=(2)     UNFIX DIE ROUTINE
         SPACE
*** REG 15 IS DESTROYED BY FREEMAIN AND PGFREE
FT02703  EQU   *                   CONTINUE TERMINATION          Y02081
         SPACE
*    ISSUE ESTAE TO CANCEL ESTAE ISSUANCE AT START OF THIS MODULE LOAD
         ESTAE 0                   CANCEL ESTAE                  Y02081
         SPACE
         SR    CODEREG,CODEREG     RESET                         YM0697
         IC    CODEREG,XKEY        REINSERT COMPLETION CODE      YM0697
         LTR   CODEREG,CODEREG     TEST COMPLETION CODE
         BNZ   FT029               BRANCH IF ERROR CONDITION
         L     WKREGE,FTRPTR       BLK RELOC FACTOR
         LTR   SEGREG,SEGREG       TEST FETCH'S CALLER
         BP    FT029               BRANCH ENTRY FROM OVERLAY
         TM    WKATTR,PDS2OVLY     TEST PROG IN OVERLAY
         BZ    FT028               BRANCH NOT IN OVERLAY
         ST    DCBREG,0(WKREGE)    DCB ADDR TO SEGTAB
         LA    WKREGA,EXLSIZE(LISTREG)  POINT TO NOTELIST
         ST    WKREGA,SGTBNTLS(WKREGE)  PLACE NOTELIST ADDR IN SEGTAB
         TM    WKATTR,PDS2TEST     PROG IN TEST
         BZ    FT028               BRANCH NOT IN TEST
         OI    0(WKREGE),SGTBTST   SET TEST BIT IN SEGTAB
FT028    TM    WKATTR+1,PDS2EP0    ED ASSIG ENT PT = ZERO
         BCR   1,LINKREG           RETURN
         L     WKREGA,WKENTPT-1    ED ASSIG ENT PT
         LA    WKREGE,0(WKREGA,WKREGE)  DETERMINE RELOCATED EPA
FT029    EQU   *                   TERMINATION IS COMPLETE       YM1070
         RETURN
         DROP  FTBASE1             DROP MAINLINE BASE REGISTER   Y02081
         DROP  FTBASE2             DROP WORKAREA BASE REGISTER   Y02081
         TITLE 'IEWFETCH...PROGRAM LOADING ROUTINE...FETCH MAINLINE    C
               CONSTANTS.'
*
*        FETCH CONSTANTS
*
         DS    0F                  FORCE FULLWORD ALIGNMENT      247
FTDEBMSK DC    X'04000000'         PCI FETCH MODE FILEMASK BIT   22125
BASEMAIN DC    A(FT001)            MAINLINE ADDRESS              Y02081
ESTAEADD DC    A(IEWFTSTA)         ESTAE ROUTINE ADDRESS         Y02081
FTKEY    DC    CL4'FTWA'           FETCH ID KEY
PGFXDONE DC    X'08'               INDICATES PGFIX IN PROCESS  @ZA07064
         SPACE 2
*------- THE FOLLOWING FETCH CONSTANTS PRESUME
*        PAGE SIZE FOR THE SYSTEM IS 4K.
*
PAGESIZM DC    F'4096'             SYSTEM PAGE SIZE
PAGEMSKM DC    XL4'FFFFF000'       MASK FOR REMOVING THE BYTE
*                                  PORTION OF AN ADDRESS.
*                                  (IE. ADJUSTS TO A PAGE BNDRY)
*----------------------------------
         SPACE 2
*------- THE FOLLOWING CONSTANT DEFINES THE
*        MAXIMUM NUMBER OF BYTES FETCH MAY FIX
*        FOR AN I/O OPERATION DURING THE LOAD.
*
FIXLIMTM DC    F'18432'            18K BYTE FIX LIMIT
*----------------------------------
         SPACE 2
*-------- THE FOLLOWING CONSTANTS FOR IDAL CONSTRUCTION
*        ARE BASED ON 2K LIST ENTRIES USED BY CHANNEL.
*
BLOKSIZM DC    F'2048'             2K BLOCK LENGTH
BLOKMSKM DC    XL4'FFFFF800'       MASK FOR TRUNC TO 2K BNDRY
         EJECT
*
*        FETCH CHANNEL PROGRAM
*
FTCCW1   CCW   X'23',X'00',X'40',1 SET SECTOR (RPS DEVICES)   CC Y02081
FTCCW2   CCW   X'31',X'00',X'40',5 SEARCH ON ID EQUAL   CC
         CCW   X'08',FTCCW1,X'00',1  TIC TO SEARCH ID CCW
         CCW   X'08',FTCCW3,X'00',1  TIC TO A READ DATA CCW
FTSCHLN  EQU   *-FTCCW1            LENGTH OF SEARCH CHAN PROG    Y02081
VAMSCHLN EQU   *-FTCCW2            LENGTH OF VAM SEARCH CH PROG  Y02081
FTCCW3   CCW   X'06',X'00',X'40',1024  RD TEXT DATA   CC
         CCW   X'92',X'00',X'48',8 READ COUNT MULTI-TRACK   CC,PCI
         CCW   X'06',X'00',X'60',256  READ RLD/CTL DATA   CC,SILI
         CCW   X'92',X'00',X'40',8 READ COUNT MULTI-TRACK   CC
         CCW   X'03',X'00',X'60',1 TIC/NOP SWITCH   CC(RPS ONLY),SILI
*                                  ABOVE LINE CHANGED FOR  --   OY03649
         CCW   X'22',X'00',X'00',1 READ SECTOR (RPS DEVICES)     Y02081
FTCPLN   EQU   *-FTCCW3            LENGTH OF FETCH CHANNEL PROG  Y02081
         SPACE 2
*
*        CHANNEL PROGRAM USED WHEN FETCHING FROM A VAM DATA SET  Y02081
*
*  CCW'S MUST BE MULTI-TRACK READS SINCE MULTI-TRACK READ-COUNT
*  CCW'S ARE NOT USED AND FILE PROTECT UNIT CHECK WILL NOT OCCUR
*  IF THE VAM DATA SET HAS BEEN ALLOCATED IN CYLINDERS; THEREFORE
*  THE DASD ERP WILL NOT BE INVOKED TO UPDATE THE TRACK ADDRESS
*  WHEN WE CROSS A TRACK BOUNDARY AND WE WILL RE-READ THE FIRST
*  RECORD ON THE SAME TRACK AND CAUSE AN I/O ERROR               YM5962
FTCCW4   CCW   X'86',X'00',X'40',1024  READ TEXT CCW             Y02081
*                                  (READ DATA MULTI-TRACK)       YM5962
         CCW   X'86',X'00',X'68',256   READ CONTROL/RLD CCW      Y02081
*                                  (READ DATA MULTI-TRACK)       YM5962
         CCW   X'08',X'00',X'00',1 TRANSFER IN CHANNEL CCW       Y02081
VAMCPLN  EQU   *-FTCCW4            LENGTH OF VAM CHANNEL PROGRAM Y02081
         SPACE 2
IOBLKS   DS    0A                  STORAGE REQUIREMENT FOR       Y02081
*                                  FIXED GLOBAL STORAGE          Y02081
         DC    AL1(SQASP)          SUBPOOL ID (FOR SQA)          Y02081
         DC    AL3(GLOBREQ)        TOTAL REQUIREMENT FOR         Y02081
*                                  FETCH IOSB AND SRB            Y02081
         SPACE 3
         DC    CL8'FETCHPA1'       PATCH AREA 1 ID               Y02081
FTPATCH  DC    25F'0'              MAINLINE FETCH PATCH AREA     Y02081
         TITLE 'IEWFETCH...PROGRAM LOADING ROUTINE...ESTAE EXIT.'
*********************************************************************
*
*  FETCH ESTAE SUBROUTINE.
*
*    ESTAE IS ENTERED BY RECOVERY MANAGEMENT TO ALLOW EXTENDED
*     PROCESSING BY FETCH DURING ABNORMAL TERMINATION.  ESTAE IS
*     MADE ACTIVE FOR THE DURATION OF A FETCH REQUEST BY THE ISSUANCE
*     OF THE ESTAE MACRO AT FETCH INITIALIZATION AND IS DISCONTINUED
*     BY THE ISSUANCE OF THE ESTAE MACRO DURING FETCH TERMINATION.
*
*
*    THERE ARE TWO MAIN PROCESSING PATHS THRU ESTAE DEPENDENT UPON
*     THE PRESENCE OR ABSENCE OF THE SDWA WHEN FETCH IS ENTERED IN
*     ESTAE.
*      1. IF AN SDWA IS AVAILABLE AT ESTAE TIME, THE REGISTERS ARE
*         SAVED IN THE SAVEAREA PROVIDED BY RECOVERY MANAGEMENT.  IF
*         RETRY IS POSSIBLE(I.E. CONTINUE PROCESSING AFTER COMPLETING
*         ESTAE PROCESSING) THE IOSB AND SDWA ARE SAVED IN A GETMAINED
*         AREA AND ESTAE SETS UP TO RETURN CONTROL TO FETCH MAINLINE
*         IN IT'S TERMINATION ROUTINE(FT027B).
*
*           IF RETRY IS NOT POSSIBLE(I.E. WE ARE TERMINATING IN ESTAE
*         AND CONTROL MUST BE RETURNED TO RECOVERY MANAGEMENT) FETCH'S
*         RESOURCES ARE FREED(IF NOT PREVIOUSLY FREED) AND RETURN IS
*         MADE TO RECOVERY MANAGEMENT TO CONTINUE TERMINATION.
*
*      2. IF THERE IS NO SDWA AVAILABLE, THE REGISTERS ARE SAVED IN
*         THE FETCH WORK AREA.  IF RETRY IS POSSIBLE(I.E. PROCESSING
*         MAY CONTINUE AFTER ESTAE) ESTAE SETS UP TO GIVE CONTROL
*         TO FETCH MAINLINE IN IT'S TERMINATION ROUTINE(FT027BAA).
*
*           IF RETRY IS NOT POSSIBLE(I.E. CONTROL MUST BE RETURNED
*         TO RECOVERY MANAGEMENT) FETCH'S RESOURCES ARE FREED(IF
*         NOT PREVIOUSLY FREED) AND RETURN IS MADE TO RECOVERY
*         MANAGEMENT INDICATING CONTINUE TERMINATION.
*
*********************************************************************
         SPACE
         USING *,WKRG15            ESTABLISH ADDRESSABILITY      Y02081
         USING SDWA,WKRG1          SET BASE REG FOR SDWA         Y02081
         USING WKFETCH,WKRG2       SET WORKAREA BASE REG         Y02081
         SPACE
IEWFTSTA EQU   *                   START OF ESTAE ROUTINE        Y02081
         SPACE
         LR    WKRG11,WKRG15       SET NORMAL FETCH BASE         Y02081
         SPACE
         DROP WKRG15               CHANGE ASSEMBLER BASE         Y02081
         USING IEWFTSTA,WKRG11     NOTIFY ASSEMBLER              Y02081
         SPACE
         SPACE
*   TEST IF THE SDWA WORK AREA WAS OBTAINED.  R0=12 INDICATES NO SDWA
*     WORK AREA OBTAINED.
         SPACE
         C     WKRG0,F12           ANY WORK AREA?                Y02081
         BE    FTSTA200            GO IF NO SDWA W. A.           Y02081
         SPACE
**********************************************************************
*   WE HAVE THE SDWA AVAILABLE TO US.  AFTER SAVING REGISTERS IN
*     RECOVERY MGT SAVE AREA, PROCESS AS FOLLOWS.
*      1
*       IF WE HAVE BEEN ENTERED FOR TERMINATION ONLY, FREE OUR
*        RESOURCES IF PURGE HAS NOT ALREADY FREED THEM AND CONTINUE
*        WITH TERMINATION.
*      2
*       IF RETRY IS POSSIBLE WE WILL SET UP THE SDWA TO GIVE CONTROL
*        TO FETCH IN IT'S MAINLINE TERMINATION BY SETTING UP IT'S
*        BASE REGISTER AND PASSING THE FETCH WORK AREA ADDRESS.
*        WE WILL ALSO SAVE THE SDWA AND THE IOSB IN A GETMAIN'ED
*        AREA FOR DEBUGGING PURPOSES.
**********************************************************************
         SPACE
         STM   WKRG0,WKRG15,ZERO(WKRG13)  SAVE REGS              Y02081
         SPACE
*   R1 POINTS TO THE SDWA AND THE FIRST WORD OF THE SDWA POINTS TO
*     THE SVRB(CONTENTS SUPERVISOR) OR PSUEDO SVRB(OVERLAY SUPERVISOR)
         SPACE
         L     WKRG2,ZERO(WKRG1)   GET ESTAE PARAMETER           Y02081
         SPACE
*    LOAD FETCH WORK AREA ADDRESS FROM PSUEDO SVRB IF OVERLAY
*     SUPERVISOR, OR REAL SVRB IF CONTENTS SUPERVISOR.
         SPACE
         L     WKRG2,SVRBWKA(WKRG2)  GET FETCH W.A. ADDRESS      Y02081
         SPACE
*   TEST IF WE ARE IN ESTAE FOR A TERMINATING CONDITION ONLY,
*     OR IF WE CAN RETRY.
         SPACE
         TM    SDWAERRD,SDWACLUP   TERMINATING?                  Y02081
         BO    FTSTA100            GO IF TERMINATION             Y02081
         SPACE
*   TEST IF ITS REALLY FETCH WHICH IS CAUSING THE PROBLEM BY SEEING
*    IF ESTAE IS RUNNING UNDER FETCH'S RB
         SPACE
         TM    SDWAERRD,SDWANRBE   RUNNING UNDER OUR RB?         ZA2508
         BO    FTSTA100            GO IF NOT FETCH'S RB          ZA2508
         SPACE
*   SET UP TO RETRY BY UPDATING THE REGISTERS IN THE SDWA SAVEAREA
*     TO POINT TO FETCH WORK AREA AND FETCH MAINLINE.
         SPACE
         L     WKRG3,FTMAIN        R3=FETCH BASE ADDRESS         Y02081
         ST    WKRG3,SDWASR11      AND STORE IN SDWA             Y02081
         ST    WKRG2,SDWASR13      AND SAVE FETCH W.A.           Y02081
         SPACE
*   SAVE A COPY OF THE IOSB AND THE SDWA FOR DEBUGGING PURPOSES.  ISSUE
*     A GETMAIN FROM SBPOOL 230(SYSTEM,TASK RELATED,PAGEABLE,SWAPPABLE)
*     AND PUT A POINTER TO THIS AREA IN THE FETCH WORK AREA.
         SPACE
FTSTA050 EQU   *                   OBTAIN TASK-RELATED STORAGE   Y02081
         SPACE
         GETMAIN EC,MF=(E,XGMLIST),LV=IOSBSDWA,A=XESTAEPT,SP=230 Y02081
         SPACE
         LTR   WKRG15,WKRG15       SUCCESSFUL GETMAIN?           Y02081
         BZ    FTSTA060            GO IF SUCCESSFUL              Y02081
         XC    XESTAEPT,XESTAEPT   INDICATE UNSUCCESSFUL         Y02081
         B     FTSTA070            AND CONTINUE                  Y02081
         SPACE
*   SAVE IOSB AND SDWA IN GETMAIN'ED AREA.
         SPACE
FTSTA060 EQU   *                   COPY IOSB AND SDWA            Y02081
         SPACE
         L     WKRG8,XESTAEPT      POINT TO SAVE AREA            Y02081
         L     WKRG4,XIOSBAD       POINT TO IOSB                 Y02081
         MVC   0(IOSBSIZE,WKRG8),0(WKRG4)  SAVE IOSB             YM6761
         SPACE
         LA    WKRG8,IOSBSIZE(WKRG8)  INCREMENT SAVE AREA        Y02081
         LA    WKRG9,SDWALEN       SET THE -TO- LENGTH           Y02081
         LA    WKRG5,SDWALEN       SET THE -FROM- LEN            Y02081
         L     WKRG4,R1OFFSET(WKRG13)  POINT TO THE SDWA         Y02081
         SPACE
         MVCL  WKRG8,WKRG4         SAVE THE SDWA                 Y02081
         SPACE
         L     WKRG1,R1OFFSET(WKRG13)  RESET SDWA BASE FOR SETRP YM5739
         SPACE
*   ISSUE SETRP MACRO TO GIVE CONTROL AT FETCH TERMINATION TO ALLOW
*     RETRY(RC=4).  INDICATE WE HAVE UPDATED THE REGISTERS IN THE SDWA
*     TO ALLOW USE OF THESE REGISTERS UPON ENTRY TO MAINLINE.  INDICATE
*     FREE THE SDWA.
         SPACE
FTSTA070 EQU   *                   CONTINUE SETUP FOR RETRY      Y02081
         SPACE
         L     WKRG1,R1OFFSET(WKRG13)  RESTORE R1 AFTER G'MAIN   Y02081
         L     WKRG3,PROGCHK       ADDRESS OF FT027B             Y02081
         SPACE
         SETRP RETADDR=(WKRG3),RETREGS=YES,RC=4,FRESDWA=YES
         SPACE
         LM    WKRG0,WKRG15,ZERO(WKRG13)  RESTORE                Y02081
         SPACE
         BR    RETURNRG            RETURN                        Y02081
         SPACE 6
*********************************************************************
*   NO RETRY POSSIBLE SO FREE OUR RESOURCES.  FREEMAIN THE IOSB AND
*     SRB AND PAGEFREE THE TEXT READ-IN AREA (IF REQUIRED) PRIOR TO
*     ISSUEING THE SETRP MACRO AND RETURNING.
         SPACE
FTSTA100 EQU   *                   PRE-TERMINATION CLEANUP       Y02081
         SPACE
         TM    XFLAG2,PRGFREE      RESOURCES ALREADY FREED?      Y02081
         BO    FTSTA120            GO IF FREED                   Y02081
         SPACE
         TM    XFLAG1,VAMDEV       VAM DATA SET?                 Y02081
         BO    FTSTA120            GO IF YES-NO FREEING          Y02081
         SPACE
*    TEST IF IOSB/SRB ALREADY FREED IN TERMINATION.
         SPACE
         TM    XFLAG2,IOSBFREE     PREVIOUSLY FREED?             YM8279
         BO    FTSTA110            GO IF ALREADY FREED           YM8279
         SPACE
*   FREE THE IOSB AND SRB FROM SQA STORAGE
         SPACE
         L     WKRG1,XIOSBAD       R1=ADDRESS OF IOSB AND SRB    Y02081
         LTR   WKRG1,WKRG1         TEST IF ANY IOSB              ZA1345
         BZ    FTSTA110            GO IF NO IOSB                 ZA1345
         SPACE
* INDICATE IOSB/SRB FREEMAINED IN CASE WE GET CONTROL IN TERMINATION
         SPACE
         OI    XFLAG2,IOSBFREE     IOSB/SRB FREED              @ZA29740
         FREEMAIN  R,LV=GLOBREQ,A=(1),SP=SQASP  ISSUE FREEMAIN   YM7587
         SPACE 2
*   PAGE FREE THE TEXT READ-IN AREA.
         SPACE
FTSTA110 EQU   *                                                 YM8279
         SPACE
         L     WKRG1,XLOFIX        START ADDR OF FIXED           Y02081
         LTR   WKRG1,WKRG1         ANYTHING FIXED?               Y02081
         BZ    FTSTA120            GO IF NOTHING FIXED           Y02081
         SPACE
         XC    XLOFIX,XLOFIX       INDICATE TEST FREED         @ZA10542
         L     WKRG2,XHIFIX        END OF FIXED AREA             Y02081
         SPACE
         PGFREE  R,A=(WKRG1),EA=(WKRG2)  ISSUE PAGEFREE          Y02081
         SPACE 2
*     PAGE FREE THE DIE APPENDAGE
*     IF DIE ROUTINE IS IN FIXED LPA, PAGES WERE NOT FIXED--
*     THEREFORE, BRANCH AROUND PAGEFREE
         SPACE
         L     WKRG1,FTSTASTT      FIX START ADDRESS             Y02081
         L     WKRG2,FTSTAEND      FIX END ADDRESS               Y02081
         L     WKRG12,CVTPTR       GET CVT ADDRESS             @ZA05457
         USING CVT,WKRG12          CVT ADDRESSABILITY          @ZA05457
         CLM   WKRG2,B'0111',CVTNUCB+1 DIE RTN IN FIXED LPA?   @ZA05457
         DROP  WKRG12                                          @ZA05457
         BNH   FTSTA120            BRANCH IF IN FIXED LPA      @ZA05457
         SPACE
         PGFREE  R,A=(WKRG1),EA=(WKRG2)  FREE THE DIE APPENDAGE  Y02081
         SPACE 2
*   ISSUE SETRP MACRO-INDICATE CONTINUE WITH TERMINATION.
         SPACE
FTSTA120 EQU   *                   COMMUNICATE WITH RECOVERY MGR Y02081
         SPACE
         LM    WKRG0,WKRG15,ZERO(WKRG13)  RESTORE REGS           Y02081
         SPACE
         SETRP RC=0                CONTINUE TERMINATION          Y02081
         SPACE 2
*   RETURN TO CALLER
         SPACE
         BR    RETURNRG            RETURN                        Y02081
         SPACE 6
*********************************************************************
*   NO SDWA WAS SUPPLIED BY THE CALLER-WE HAVE TWO OPTIONS
*     1
*      WE HAVE BEEN CALLED FOR TERMINATION ONLY--IN THIS CASE
*       WE WILL FREE OUR CURRENT RESOURCES AND RETURN.
*     2
*      RETRY IS POSSIBLE-SET REGISTERS TO GIVE CONTROL TO FETCH IN
*       IT'S TERMINATION ROUTINE BY PASSING THE ADDRESS OF THE
*       FETCH WORK AREA AND THE ADDRESS OF THE ROUTINE TO GAIN CONTROL
*       (FETCH TERMINATION).
*********************************************************************
         SPACE 2
*   SAVE REGISTERS IN FETCH'S WORK AREA.
         SPACE
FTSTA200 EQU   *                   START OF LOGIC FOR NO SDWA    Y02081
         SPACE
*                                  REG 2 CONTAINS ESTAE PARAM    Y02081
         SPACE
*    LOAD FETCH WORK AREA ADDRESS FROM THE SVRB IF A CONTENTS
*     SUPERVISOR REQUEST OR FROM THE PSUEDO SVRB IF AN OVERLAY
*     SUPERVISOR REQUEST.
         SPACE
         L     WKRG2,SVRBWKA(WKRG2)  GET FETCH W.A. ADDRESS      Y02081
         SPACE
         STM   WKRG0,WKRG15,FTREGSV  SAVE REGS                   Y02081
         SPACE
*   TEST IF WE ARE IN A TERMINATING CONDITION.
         SPACE
         L     WKRG1,XFTCBAD       R1=CURRENT TCB                Y02081
         SPACE
         USING TCB,WKRG1           GAIN ADDRESSABILITY           Y02081
         SPACE
         TM    TCBESTRM,TCBETERM   TERMINATING?                  Y02081
         BO    FTSTA250            GO IF NOT TERMINATING         Y02081
         SPACE
         TM    TCBNSTAE,TCB33E     TERMINATING?                  Y02081
         BZ    FTSTA250            GO IF NOT TERMINATING         Y02081
         SPACE
*   TERMINATING CONDITION--FREE RESOURCES AND RETURN
         SPACE
         TM    XFLAG2,PRGFREE      RESOURCES FREED?              Y02081
         BO    FTSTA220            GO IF ALREADY FREED           Y02081
         SPACE
         TM    XFLAG1,VAMDEV       VAM DATA SET?                 Y02081
         BO    FTSTA220            GO IF VAM D.S.                Y02081
         SPACE
*    TEST IF IOSB/SRB ALREADY FREED IN TERMINATION.
         SPACE
         TM    XFLAG2,IOSBFREE     FREED BY TERMINATION          YM8279
         BO    FTSTA210            GO IF ALREADY FREED           YM8279
         SPACE
*   FREE THE IOSB AND SRB FROM SQA STORAGE
         SPACE
         L     WKRG1,XIOSBAD       R1=ADDRESS OF IOSB AND SRB    Y02081
         LTR   WKRG1,WKRG1         TEST IF ANY IOSB              ZA1345
         BZ    FTSTA210            GO IF NO IOSB                 ZA1345
         SPACE
* INDICATE IOSB/SRB FREEMAINED IN CASE WE GET CONTROL IN TERMINATION
         SPACE
         OI    XFLAG2,IOSBFREE     IOSB/SRB FREED              @ZA29740
         FREEMAIN R,LV=GLOBREQ,A=(1),SP=SQASP  ISSUE FREEMAIN    YM7587
         SPACE
*   PAGE FREE THE TEXT RECORD READ-IN AREA.
         SPACE
FTSTA210 EQU   *                                                 YM8279
         SPACE
         L     WKRG1,XLOFIX        START ADDR OF FIXED           Y02081
         LTR   WKRG1,WKRG1         ANYTHING FIXED?               Y02081
         BZ    FTSTA220            GO IF NOTHING FIXED           Y02081
         SPACE
         XC    XLOFIX,XLOFIX       INDICATE PAGE FREED         @ZA10542
         L     WKRG2,XHIFIX        ENDING ADDR OF FIXED          Y02081
         SPACE
         PGFREE  R,A=(WKRG1),EA=(WKRG2)  ISSUE PAGE FREE         Y02081
         SPACE 2
*    PAGE FREE THE DIE APPENDAGE.
         SPACE
         L     WKRG1,FTSTASTT      FIX START ADDRESS
         L     WKRG2,FTSTAEND      FIX END ADDRESS
         L     WKRG12,CVTPTR       GET CVT ADDRESS             @ZA05457
         USING CVT,WKRG12          CVT ADDRESSABILITY          @ZA05457
         CLM   WKRG2,B'0111',CVTNUCB+1 DIE RTN IN FIXED LPA?   @ZA05457
         DROP  WKRG12                                          @ZA05457
         BNH   FTSTA220                                        @ZA05457
         SPACE
         PGFREE  R,A=(WKRG1),EA=(WKRG2)  FREE THE TEXT RECORD    Y02081
         SPACE 2
*    SET RETURN CODE IN R15 TO INDICATE CONTINUE TERMINATION.
         SPACE
FTSTA220 EQU   *                   CLEANUP COMPLETE              Y02081
         SPACE
         SR    WKRG15,WKRG15       ZERO=CONTINUE TERMINATION     Y02081
         SPACE 2
*   RETURN
         SPACE
         LM    WKRG0,WKRG14,FTREGSV  RESET REURN ADDRESS         Y02081
         BR    RETURNRG            RETURN                        Y02081
         SPACE 4
*********************************************************************
*   TERMINATION NOT FORCED IN ESTAE--SET UP THE REGISTERS TO GIVE
*     CONTROL TO FETCH MAINLINE TO ALLOW TERMINATION FROM FETCH.
*     INDICATE RETRY REQUESTED(RETURN CODE=4).
*
*       R1=FETCH WORK AREA.
*       R0=FETCH MAINLINE-ESTAE TERMINATION.
         SPACE
FTSTA250 EQU   *                   SETUP FOR RETRY               Y02081
         SPACE
         LR    WKRG1,WKRG2         R1=FETCH WORK AREA            Y02081
         L     WKRG0,FT027BST      R0=FETCH MAINLINE ADDR        Y02081
         LA    WKRG15,RETRY        INDICATE RETRY REQUESTED      Y02081
         SPACE
*    RETURN
         SPACE
         LM    WKRG2,WKRG14,FTREGSV+R2OFFSET  RESTORE            Y02081
         SPACE
         BR    RETURNRG            RETURN                        Y02081
         SPACE
         DROP  WKRG1               SDWA OR TCB                   Y02081
         DROP  WKRG2               FETCH WORK AREA               Y02081
         SPACE 6
*   ESTAE CONSTANTS.
         SPACE
PROGCHK  DC    A(FT027B)           ADDR TO GET CTL-MAINLINE      Y02081
F12      DC    F'12'               SDWA-NO SDWA CONSTANT         Y02081
FT027BST DC    A(FT027BAA)         ADDR TO GET CTL-MAINLINE      Y02081
FTSTASTT DC    A(FTPCI01)          DIE START ADDRESS             Y02081
FTSTAEND DC    A(FTFXEND)          DIE END ADDRESS               Y02081
         SPACE 3
   TITLE 'IEWFETCH...PROGRAM LOADING ROUTINE...SRB COMPLETION ROUTINE'
***********************************************************************
*               ----- FETCH SRB COMPLETION ROUTINE -----              *
*        RECEIVES CONTROL WHEN ALL FETCH I/O IS COMPLETE (END OF      *
*        MODULE HAS BEEN FOUND OR AN ERROR HAS OCCURRED) AND THE      *
*        FETCH REQUEST IS TO BE TERMINATED. IT OBTAINS THE LOCAL      *
*        LOCK, POSTS THE ECB THAT MAINLINE FETCH IS WAITING ON,       *
*        GOES TO THE PURGE/RESTORE SUBROUTINE WHICH HANDLES THE       *
*        PURGE QUIESE COUNT IN THE IPIB, IF ANY, RELEASES THE LOCAL   *
*        LOCK AND RETURNS TO THE SRB DISPATCHER.                      *
*                                                              Y02081 *
***********************************************************************
         SPACE
IEWFTSRB EQU   *                   START OF SRB EXIT ROUTINE     Y02081
         LR    WKRG9,CODEREG       SET UP BASE REGISTER          Y02081
         USING IEWFTSRB,WKRG9      SET ADDRESSABILITY            Y02081
         LR    WKRG4,WKREGA        RESET IOSB BASE REG           Y02081
         USING IOSB,WKRG4          ADDRESSABILITY FOR IOSB       Y02081
         L     WKREGB,IOSUSE       GET WORK AREA POINTER         Y02081
         USING WKFETCH,WKREGB      WORKAREA ADDRESSABILITY       Y02081
         LR    WKRG3,LINKREG       SAVE RETURN ADDRESS           Y02081
GETLOCK  SETLOCK  OBTAIN,TYPE=LOCAL,MODE=UNCOND,                       X
               RELATED=(FTPOST,IEWFETCH(FREELOCK))               Y02081
         LA    WKRG11,FTECB        POINT TO ECB FOR POST         Y02081
         SR    WKRG10,WKRG10       SET ECB COMPLETION CODE       Y02081
         ICM   WKRG10,B'1000',IOSCOD  IN HI BYTE OF REG 10       Y02081
         L     CODEREG,CVTPTR      GET CVT PTR                   Y21179
         USING CVT,CODEREG         CVT ADDRESSABILITY            Y21179
         L     CODEREG,CVT0PT02    GET POST RTN ADDR             Y21179
         DROP  CODEREG             DROP CVT BASE                 Y21179
         BALR  LINKREG,CODEREG     LINK TO POST ROUTINE          Y02081
         L     WKREGA,IOSIPIB      GET IOSB IPIB POINTER         Y02081
         LTR   WKREGA,WKREGA       IS THERE AN IPIB?             Y02081
         BZ    FTSRB05             IF NOT, BRANCH                Y02081
         SR    WKREGF,WKREGF       INDICATE LOCAL LOCK HELD      Y02081
         L     CODEREG,CVTPTR      GET CVT PTR                   Y21179
         USING CVT,CODEREG         CVT ADDRESSABILITY            Y21179
         L     CODEREG,CVTIXAVL    IOCOM ADDRESS                 Y21179
         USING IOCOM,CODEREG       IOCOM ADDRESSABILITY          Y21179
         L     CODEREG,IOCQCNT     PURGE/RESTORE ADDR            Y21179
         DROP  CODEREG             DROP CVT/IOCOM BASE
*                                  POINT TO PURGE RESTORE        Y02081
*                                  ROUTINE TO DECREMENT/POST     Y02081
*                                  THE IPIB QUIESE COUNT/ECB     Y02081
         BALR  LINKREG,CODEREG     CALL THE IPIB ROUTINE         Y02081
FTSRB05  EQU   *                   RELEASE THE LOCAL LOCK        Y02081
FREELOCK SETLOCK  RELEASE,TYPE=LOCAL,                                  X
               RELATED=(FTPOST,IEWFETCH(GETLOCK))                Y02081
         LR    LINKREG,WKRG3       RESTORE RETURN ADDRESS        Y02081
         BR    LINKREG             RETURN TO DISPATCHER          Y02081
         SPACE 2
         DROP  WKRG9               DROP SRB BASE                 Y02081
         DROP  WKRG4               DROP IOSB BASE                Y02081
         DROP  WKREGB              DROP FETCH WORKAREA BASE      Y02081
         EJECT
*
*        PROGRAM FETCH APPENDAGE VECTOR TABLE (VAM DATA SETS ONLY)
*                                                                Y02081
FTAPNDG  DC    A(FTRETURN)         END OF EXTENT   ******************
         DC    A(FTRETURN)         START I/O       * ALL APPENDAGES *
         DC    A(VPCI01)           PCI APPENDAGE   * EXCEPT PCI ARE *
         DC    A(FTRETURN)         CHANNEL END     *     BR 14      *
         DC    A(FTRETURN)         ABNORMAL END    ******************
*                                                                Y02081
         SPACE
FTRETURN BR    RETURNRG            RETURN TO IOS
         SPACE
*
*        THE FOLLOWING REGISTER SETTINGS EXIST WHEN IOS TURNS CONTROL
*        OVER TO AN APPENDAGE ROUTINE
*
*              GEN REG    1                  ADDRESS OF 12*
*              GEN REG    2                  ADDRESS OF IOB
*              GEN REG    3                  ADDRESS OF DEB
*              GEN REG    4                  ADDRESS OF DCB
*              GEN REG    7                  ADDRESS OF UCB (IN DIE)
*              GEN REG    9                  MUST BE CLEARED IF USED
*              GEN REGS  10-13               SUGGESTED WORK REGISTERS
*              GEN REG   14                  RETURN REGISTER
*              GEN REG   15                  ADDRESS OF APPENDAGE RTN
*
  TITLE 'IEWFETCH...PROGRAM LOADING ROUTINE...POST STATUS NORMAL EXIT'
***********************************************************************
*                                                                     *
*        POST STATUS NORMAL EXIT ROUTINE (CHANNEL END PROCESSING)     *
*                                                                     *
*        POST STATUS WILL PASS CONTROL TO THIS ROUTINE AT NORMAL      *
*        CHANNEL END TIME. WHEN CONTROL IS RECEIVED BY THIS ROUTINE   *
*        IT WILL: (1) CHECK FOR A WRONG LENGTH RECORD OR UNIT         *
*        EXCEPTION CONDITION AND, IF FOUND, RETURN TO IOS FOR NORMAL  *
*        PROCESSING. (2) TEST IF CHANNEL END IS THE RESULT OF A NOTE  *
*        LIST READ AND, IF SO, SET UP THE CHANNEL PROGRAM TO BEGIN    *
*        READING TEXT AND TAKE THE RETURN TO IOS WHICH WILL CAUSE A   *
*        RESTART OF THE CHANNEL PROGRAM. (3) TEST IF AN ERROR FLAG    *
*        HAS BEEN SET BY THE DIE ROUTINE (INVALID RECORD TYPE OR      *
*        INVALID ADDRESS IN AN RLD RECORD) AND, IF SO, RETURN TO IOS  *
*        FOR NORMAL PROCESSING. (4) TEST IF THE DIE ROUTINE FOUND THE *
*        NEXT TEXT RECORD TO BE READ TO BE OUTSIDE OF THE AREA FIXED  *
*        FOR IT AND, IF SO, FREE THE CURRENTLY FIXED AREA, FIX AS     *
*        MUCH AS POSSIBLE OF THE REMAINING TEXT AREA AND TAKE THE     *
*        RETURN TO IOS WHICH WILL CAUSE A RESTART OF THE CHANNEL      *
*        PROGRAM. (5) CHECK FOR END CONDITION AND IF FLAG IS SET      *
*        RETURN TO IOS FOR NORMAL PROCESSING. (6) TEST IF CHANNEL END *
*        IS DUE TO AUTOMATIC COMMAND RETRY AND, IF SO AND IF THE      *
*        RETRY OCCURRED ON A READ CONTROL RECORD CCW, BRANCH TO THE   *
*        DIE ROUTINE TO RE-PROCESS THE CONTROL RECORD SINCE ERRONEOUS *
*        DATA MAY HAVE BEEN PROCESSED THE FIRST TIME. (7) IF NONE OF  *
*        THE ABOVE CONDITIONS ARE MET, THE ASSUMPTION IS MADE THAT    *
*        PCI PROCESSING ON THE CURRENT CHANNEL PROGRAM WAS TOO LATE   *
*        IN SETTING THE TIC CCW TO SUCCESSFULLY COMPLETE THE CCW      *
*        CHAIN AND THE POST STATUS NORMAL ROUTINE WILL TAKE THE       *
*        RETURN TO IOS WHICH WILL CAUSE A RESTART OF THE CHANNEL      *
*        PROGRAM.                                                     *
*                                                              Y02081 *
***********************************************************************
         SPACE
         USING IOSB,WKRG1          ADDRESSABILITY FOR IOSB       Y02081
FTCE01   EQU   *                   START OF POST STATUS          Y02081
*                                  NORMAL EXIT ROUTINE           Y02081
         TM    IOSFLA,IOSEX        IS THE EXCEPTION FLAG ON?     Y02081
*                                  (UNIT EXCEPTION OR WRONG      Y02081
*                                  LENGTH RECORD PRESENT)        Y02081
         BCR   1,WKRG14            IF SO, RETURN TO IOS          Y02081
         STM   WKRG0,WKRG15,0(WKRG13)  SAVE REGISTERS            Y02081
         BALR  WKRG11,0            ESTABLISH ADDRESSABILITY      Y02081
         USING *,WKRG11            SET LOCAL BASE REGISTER       Y02081
FTCE0101 L     WKRG6,IOSUSE        GET FETCH WORKAREA BASE       Y02081
         USING WKFETCH,WKRG6       WORKAREA ADDRESSABILITY       Y02081
         CLI   FTCPSRCH+SRCHTIC,READOP  IS THE CURRENT CHANNEL   Y02081
*                                  PROGRAM READING THE NOTE      Y02081
*                                  LIST FOR AN OVLY MODULE?      Y02081
         BE    FTCE030             IF SO, BRANCH                 Y02081
         CLI   IOSCOD,IOSFTCHC     IS THIS A COMMAND      S20201,Y02081
*                                  RETRY (ECF)?           S20201,Y02081
         BE    FTCE020             IF SO, BRANCH                 S20201
         TM    XFLAG2,BADREC       INVALID REC FOUND IN DIE?     Y02081
         BO    NRMEXIT             IF SO, EXIT NORMALLY          Y02081
         TM    XFLAG1,RELERR       INVALID RLD ADDR FOUND?       Y02081
         BO    NRMEXIT             IF SO, EXIT NORMALLY          Y02081
         TM    XFLAG2,CTLERR       INVALID CTL REC ADDR FOUND?   Y02081
         BO    NRMEXIT             IF SO, EXIT NORMALLY          Y02081
         TM    XFLAG2,TXTFIX       PGFIX NEEDED FOR TEXT?        Y02081
         BO    FTCE040             IF SO, BRANCH TO PROCESS      Y02081
         TM    FTFLG4,RLDEND       TEST FOR RLD END
         BO    NRMEXIT             IF SO, EXIT NORMALLY          Y02081
         TM    FTFLG4,LASTREC      TEST PCI END
         BO    NRMEXIT             NO TO SIO                     YM2881
         SPACE
*             ***   ***   ***   ***   ***   ***   ***   ***
*          ***      BY PROCESS OF ELIMINATION IT IS        ***
*       ***      ASSUMED THAT POST STATUS NORMAL HAS BEEN     ***
*          ***      ENTERED BECAUSE THE CCWS WERE NOT       ***
*             ***    CHAINED IN TIME TO CONTINUE         ***
*               ***      THEIR EXECUTION              ***
*             ***   ***   ***   ***   ***   ***   ***   ***      Y02081
         SPACE
         SR    WKRG7,WKRG7         CLEAR WORK REGISTER           Y02081
         ICM   WKRG7,ADDR,IOSCSWCA GET ADDRESS OF THE LAST READ  Y02081
*                                  COUNT CCW EXECUTED            Y02081
         TM    XFLAG1,RPSDEV       RPS CHANNEL PROGRAM?          Y02081
         BZ    FTCE010A            BRANCH IF NOT                 Y02081
         SPACE
*    RESET TO POINT TO THE SET SECTOR
         SPACE
         LRA   WKREGB,FTCPSRCH     REAL ADDR OF CH. PROG         Y02081
         ST    WKREGB,IOSRST       STORE IN IOSB                 Y02081
         LA    WKREGB,FTCPSRCH     VIRTUAL ADDR OF CH. PROG      Y02081
         ST    WKREGB,IOSVST       SAVE IN IOSB                  Y02081
         SPACE
         S     WKRG7,F24           POINT TO READ COUNT CCW       Y02081
         B     FTCE010B            BYPASS NEXT SUBTRACT          Y02081
FTCE010A S     WKRG7,F16           POINT TO READ COUNT CCW       Y02081
       SPACE
*  DONT UPDATE THE 31-08-08 IF WE MISSED THE PCI APPENDAGE UPDATING.
       SPACE
FTCE010B EQU   *                   TEST IF CP WAS UPDATED
         CLI   CCWSZ(WKRG7),TIC    NOP UPDATED TO A TIC?         YM1078
         BNE   RESTRT              GO IF NO-REEXECUTE PCI        YM1078
         SPACE
*  WE CAN UPDATE THE 31-08-08 AT THIS TIME TO POINT TO THE NEXT
*   CHANNEL PROGRAM STRING TO SAVE US RE-EXECUTING THE CURRENT
*   STRING OF CHANNEL PROGRAMS.
         SPACE
         ICM   WKRG8,ADDR,CCWSZ+CCWADR(WKRG7)  GET LAST CHANNEL  Y02081
*                                  PROGRAM TIC-TO ADDRESS        Y02081
         STCM  WKRG8,ADDR,FTCPSRCH+SCHTICAD  UPDATE SRCH TIC CP  Y02081
         L     WKRG10,0(WKRG7)     GET ADDR OF COUNT BUFFER      Y02081
         SPACE
* CONVERT THE REAL ADDRESS OF THE COUNT BUFFER TO VIRTUAL
* SO IT CAN BE REFERENCED.
         LA    WKRG9,WKFETCH       GET VIRT ADDR OF WORKAREA     Y02081
         N     WKRG9,PAGEMASK      TRUNC TO PRIOR PAGE BNDRY     Y02081
         N     WKRG10,STRIPMSK     GET BYTE ADDR OF CNT BUFF     Y02081
         OR    WKRG10,WKRG9        ADD SEG/PAGE TO GET FULL      Y02081
*                                  VIRTUAL ADDRESS.
         MVC   IOSEEK+CCHHR(SKSIZ),0(WKRG10)  SET IOSB    A43723,Y02081
*                                  RESTART ADDRESS
         MVC   FTIOBSK+CCHHR(SKSIZ),IOSEEK+CCHHR  UPDATE         Y02081
*                                  SEARCH-ID SEEK ADDRESS        Y02081
         MVC   IOSEEKA+CCHHR(SKSIZ),IOSEEK+CCHHR  UPDATE IOSB    Y02081
*                                  DYNAMIC SEEK ADDRESS          Y02081
         SPACE
*    CHECK IF WE ARE IN A CHANNEL PROGRAM LOOP BY SEEING IF WE
*     REITERATIVELY KEEP ISSUING THE SAME IOBSEEK ADDRESS
         SPACE
         CLC   FTIOBSK+3(SKSIZ),XIOBSEK2  SAME IOBSEEK ADDRESS?  Y02018
         BNE   FTCE010F            GO IF NO LOOP                 Y02081
         SPACE
*     SET ON INDICATOR IN WORK AREA TO CAUSE MAINLINE CODE TO
*    ISSUE ABEND X'COD' TO GIVE CONTROL TO FETCH ESTAE ROUTINE
*     WHEN FETCH IS IN A LOOP AND TERMINATE.
         SPACE
         OI    XFLAG2,CPLOOP       SET LOOP INDICATOR            Y02081
         B     NRMEXIT             ACCEPT CH END (TERMINATE I/O) Y02081
         SPACE
FTCE010F EQU   *                   SETUP FOR LOOP DETECTION      Y02018
         MVC   XIOBSEK2,XIOBSEK1   UPDATE SAVED IOBSEEK          Y02018
         MVC   XIOBSEK1,FTIOBSK+3  SAVE CURRENT IOBSEEK          Y02018
         SPACE
RESTRT   LM    WKRG0,WKRG15,0(WKRG13)  RESTORE REGISTERS         Y02081
         B     8(RETURNRG)         RETURN TO RESTART REQUEST     YM2881
NRMEXIT  EQU   *                   ACCEPT CHANNEL END
         LM    WKRG0,WKRG15,0(WKRG13)  RESTORE REGISTERS         Y02081
         BR    RETURNRG            RETURN TO IOS FOR NORMAL      Y02081
*                                  COMPLETION OF THE I/O         Y02081
         SPACE 2
*    ACR(AUTOMATIC COMMAND  RETRY).
*      ACR HAS OCCURED.  WE HAVE TO DETERMINE IF ACR OCCURRED ON THE
*       CCW WHICH WAS READING THE CONTROL/RLD RECORD.  IF THIS
*       CONDITION IS TRUE, THEN WE HAVE TO GO BACK TO THE PCI APPENDAGE
*       AND REUPDATE THE NEXT CCW STRING AS WE MAY HAVE UPDATED DURING
*       OUR PCI PROCESSING WHILE COMMAND RETRY WAS OCCURRING.  THE
*       CONTROL/RLD DATA AT THAT TIME MAY HAVE BEEN BAD CAUSING US TO
*       UPDATE OUR NEXT CHANNEL PROGRAM INCORRECTLY.
         SPACE
FTCE020  EQU   *                   START OF ACR LOGIC
         TM    XFLAG1,RELERR       RELOCATE ERROR?               Y02081
         BCR   1,RETURNRG          GO IF RELOCATE ERROR          Y02081
         SPACE
         SR    WKRG7,WKRG7         CLEAR WORK REGISTER           Y02081
         ICM   WKRG7,ADDR,IOSCSWCA LOAD CSW CCW PTR       A45572,Y02081
         LRA   WKRG8,0(WKRG7)      REAL ADDR FOR TIC CCW
         STCM  WKRG8,ADDR,FTCPSRCH+SRCHTIC+1  STORE IN CHAN PGM  Y02081
         SPACE
*     UPDATE THE SEEK ADDRESS TO CORRESPOND TO THE 31-08-08 TIC ADDRESS
         SPACE
         L     WKRG9,IOSERP        POINT TO ERP WORK AREA        Y02081
         SPACE
         USING EWA,WKRG9           SET ERP WORKAREA BASE
         SPACE
         MVC   IOSEEK+CCHHR(SKSIZ),EWDSNS8  UPDATE SEEK ADDRESS  Y02081
         MVC   FTIOBSK+CCHHR(SKSIZ),EWDSNS8  UPDATE SEEK ADDRESS Y02081
         MVC   IOSEEKA+CCHHR(SKSIZ),EWDSNS8  UPDATE SEEK ADDRESS Y02081
         MVC   XSECTAD,EWDSNS13    UPDATE SECTOR ADDRESS         Y02081
         SPACE
         DROP  WKRG9               DROP ERP WORKAREA BASE        Y02081
         SPACE
*        LH    WKRG11,2(WKRG1)     ACTIVE UCB FROM RQE           A45572
*        L     WKRG11,24(WKRG11)   GET SEEK ADDRESS AND          A45572
*        MVC   35(5,IOBREG),8(WKRG11)  STORE IN IOB              A45572
         L     WKRG9,FTTBLPTR      LOAD TBL POINTER              A45572
         L     WKRG12,TBLBUFAD(WKRG9)  LOAD LOC OF CURR RLD BUF  A45572
         LA    WKRG12,(FTCP1+RDCNT2)-FTRBUF1(WKRG12)  GET A45572,Y02081
*                                  LOCATION OF LAST READ  A45572,Y02081
*                                  COUNT CCW              A45572,Y02081
         CR    WKRG12,WKRG7        TEST IF RETRY ON LAST RD RLD  A45572
         BNE   FTCE021             AND BR IF NOT                 A45572
         ST    WKRG9,FTLASTBF      UPDATE BUFFER POINTER         Y02081
         OI    XFLAG2,ACRRELOC     INDICATE RELOCATE REQD        Y02081
         B     FTCE022             GO REDO PCI PROCESSING Y02081,A45572
         SPACE
FTCE021  L     WKRG9,FTLASTBF      LOAD LAST TBL POINTER         A45572
         L     WKRG12,TBLBUFAD(WKRG9)  LOAD LOC OF LAST RLD BUF  A45572
         LA    WKRG12,(FTCP1+RDCNT2)-FTRBUF1(WKRG12)  GET A45572,Y02081
*                                  LOCATION OF LAST       A45572,Y02081
*                                  READ COUNT CCW         A45572,Y02081
         CR    WKRG12,WKRG7        TEST IF RETRY ON RD RLD       A45572
         BE    FTCE022             AND BR IF YES                 A45572
         TM    FTFLG4,LASTREC      AS MODULE END BEEN FOUND?    OS69131
         BZ    RESTRT              NO,RETURN ON RETRY VECTOR     Y02081
         SPACE
*   POST IOSB WITH NORMAL COMPLETION.  THIS IS INSTEAD OF
*    PSNE POSTING.  THEY DIDN'T WANT TO ADD CODE TO TEST
*    FOR FETCH RETURNING FROM HERE.  RETURN ON +0 VECTOR
*     TO GET CONTROL IN MAINLINE AS FETCH IS FINISHED.
         SPACE
         MVI   IOSCOD,POSTIOSB     NORMAL COMPLETION CODE        YM8292
         B     NRMEXIT             IF SO, TAKE CHANNEL END      OS69131
         SPACE
FTCE022  EQU   *                   SET TO RE-EXEC PCI UPDATING   Y02081
         LA    WKRG15,FTPCI01      PCI APPENDAGE ADDRESS         A45572
         LM    WKRG10,WKRG12,0(WKRG9)  SET REGS FOR PCI APPNDAGE A45572
         NI    XFLAG2,ALL-(TXTFIX+BADREC+CTLERR)  RESET ALL BIT  Y02081
*                                  SWITCHES WHICH MIGHT HAVE     Y02081
*                                  BEEN SET INCORRECTLY DUE TO   Y02081
*                                  A COMMAND RETRY DATA ERROR    Y02081
         SPACE
         DROP  WKRG11              DROP PSNE BASE                YM6999
         USING FTPCI01,CODEREG     SET BASE TO PCI               YM6999
         SPACE
         B     FTPCI014            GO TO PCI APPENDAGE           A45572
         SPACE
         DROP  CODEREG             DROP PCI BASE REGISTER        YM6999
         SPACE 2
         USING FTCE0101,WKRG11     RESET ADDRESSABILITY          Y02081
         SPACE 3
*********************************************************************
*---- CHANNEL END OCCURRED ON A NOTELIST READ...SET TO READ TEXT Y02081
         SPACE
FTCE030  EQU   *                   START OF NOTELIST READ LOGIC  Y02081
         ST    WKRG1,FTREGSV       SAVE REG 1 (IOSB PTR)         Y02081
         LRA   WKRG7,FTCP1         POINT TO 1ST CHAN PROG        Y02081
         ST    WKRG7,FTCPSRCH+SRCHTIC  SET TIC ADDR IN SEARCH CP Y02081
         MVI   FTCPSRCH+SRCHTIC,TIC  SET TIC OP CODE             Y02081
         LRA   WKRG7,FTIOBSK+3     POINT TO TEXT SEEK ADDR       Y02081
         STCM  WKRG7,ADDR,FTCPSRCH+SCHIDAD  SET SEARCH ID ADDR   Y02081
FTCE030A L     WKRG1,XLOFIX        POINT TO START OF FIX         Y02081
         L     WKRG2,XHIFIX        POINT TO END OF FIX           Y02081
         LTR   WKRG1,WKRG1         ANYTHING TO FREE?             Y02081
         BZ    FTCE030C            IF NOT, BRANCH                Y02081
         LA    WKRG0,FTFXECB       POINT TO ECB                  YM1726
         L     WKRG4,XFTCBAD       POINT TO TCB                  YM1726
         L     WKRG15,CVTPTR       GET CVT PTR                   Y21179
         USING CVT,WKRG15          CVT ADDRESSABILITY            Y21179
         L     WKRG15,CVTVPSIB     PAGE SERVICE RTN EP           Y21179
         DROP  WKRG15              DROP CVT BASE
         ICM   WKRG1,HIBYT,PGFREE  SET PGFREE INDICATOR          Y02081
         BALR  WKRG14,WKRG15       GO TO PGFREE ROUTINE TO FREE  Y02081
*                                  THE NOTELIST                  Y02081
FTCE030C TM    XFLAG2,TXTFIX       HANDLING TXT OUT OF FIX?      Y02081
         BO    FTCE030B            IF SO, BRANCH                 Y02081
         L     WKRG1,FTCP1         POINT TO START OF TEXT        Y02081
         LA    WKRG1,0(WKRG1)      CLEAR HIGH-ORDER BYTE         Y02081
         ST    WKRG1,XTXTAD        SAVE ADDR FOR TRANSLATE       Y02081
         LH    WKRG7,FTCP1+CCWLEN  GET LENGTH OF TXT TO READ     Y02081
         AR    WKRG7,WKRG1         GET ADDR OF NEXT TEXT LOC     Y02081
         ST    WKRG7,XNEXTLOC      SAVE FOR CCW TRANSLATE        Y02081
         LA    WKRG7,FTCP1         POINT TO READ TEXT CCW        Y02081
         ST    WKRG7,XCCWAD        SAVE ADDR FOR TRANSLATE       Y02081
FTCE030B L     WKRG1,XTXTAD        RESET TXT START ADDR          Y02081
         LR    WKRG2,WKRG1         GET TEXT START ADDRESS        Y02081
         A     WKRG2,FIXLIMIT      ADD MAX AMOUNT TO FIX         Y02081
         C     WKRG2,XEOMAD        COMPARE TO END OF MODULE      Y02081
         BNH   FTCE031             IF HIGH, USE EOM AS LIMIT     Y02081
         L     WKRG2,XEOMAD        POINT TO END OF MODULE        Y02081
FTCE031  EQU   *                   CONTINUE                      Y02081
         C     WKRG2,XNEXTLOC      WILL FIX COVER THE REC?       Y02081
         BNL   FTCE032             IF SO, BRANCH                 Y02081
         L     WKRG2,XNEXTLOC      IF NOT, USE REC SIZE FIX      Y02081
FTCE032  EQU   *                   CONTINUE                      Y02081
         ST    WKRG1,XLOFIX        SAVE FIX START ADDR           Y02081
         ST    WKRG2,XHIFIX        SAVE FIX END ADDR             Y02081
FTCE033  NI    0(WKRG1),ALL        FORCE A PAGE REFERENCE        Y02081
         A     WKRG1,PAGESIZE      POINT TO NEXT PAGE            Y02081
         CR    WKRG1,WKRG2         END OF FIX AREA?              Y02081
         BL    FTCE033             IF NOT, CONTINUE LOOP         Y02081
         BCTR  WKRG2,0             POINT TO LAST BYTE            Y02081
         NI    0(WKRG2),ALL        REFERENCE THE LAST BYTE       Y02081
         LA    WKRG2,1(WKRG2)      RESET FIX AREA END PTR        Y02081
         L     WKRG1,XLOFIX        RESET START OF FIX AREA       Y02081
         XC    FTFXECB,FTFXECB     SET ECB TO ZEROES             YM1726
         LA    WKRG0,FTFXECB       POINT TO ECB                  YM1726
         L     WKRG4,XFTCBAD       POINT TO TCB                  YM1726
         L     WKRG15,CVTPTR       GET CVT PTR                   Y21179
         USING CVT,WKRG15          CVT ADDRESSABILITY            Y21179
         L     WKRG15,CVTVPSIB     PAGE SERVICE RTN EP           Y21179
         DROP  WKRG15              DROP CVT BASE                 Y21179
         ICM   WKRG1,HIBYT,PGFIX   SET PGFIX INDICATOR           Y02081
         BALR  WKRG14,WKRG15       GO TO PGFIX ROUTINE TO        Y02081
*                                  FIX THE TEXT AREA             Y02081
         LA    WKRG1,0(WKRG1)      CLEAR HIGH-ORDER BYTE         YM1795
         LTR   WKRG15,WKRG15       TEST PGFIX COMPLETE           Y02081
         BZ    FTCE035             IF SO, BRANCH                 Y02081
*                                  IF NOT, REFERENCE ALL THE     Y02081
*                                  PAGES AGAIN TO FORCE THE      Y02081
*                                  PGFIX TO COMPLETE (TO RESOLVE Y02081
*                                  THE PAGE FAULTS)              Y02081
FTCE034  NI    0(WKRG1),ALL        FORCE A PAGE REFERENCE        Y02081
         A     WKRG1,PAGESIZE      POINT TO NEXT PAGE            Y02081
         CR    WKRG1,WKRG2         END OF FIX AREA?              Y02081
         BL    FTCE034             IF NOT, CONTINUE LOOP         Y02081
         BCTR  WKRG2,0             POINT TO LAST BYTE            Y02081
         NI    0(WKRG2),ALL        REFERENCE THE LAST BYTE       Y02081
FTCE035  LR    WKRG1,FTBASE2       SAVE REGISTER 13              Y02081
         LR    FTBASE2,WKBASE      SET WORK AREA BASE FOR MAIN   Y02081
*                                  LINE SUBROUTINE               Y02081
         LR    WKRG2,FTBASE1       SAVE REGISTER 11              Y02081
         L     FTBASE1,FTMAIN      SET MAINLINE BASE REG         Y02081
         USING FT001,FTBASE1       MAINLINE ADDRESSABILITY       Y02081
         BAL   WKRG12,FTTRN01      TRANSLATE THE RDTEXT CCW      Y02081
         LR    FTBASE2,WKRG1       RESTORE REGISTER 13           Y02081
         LR    FTBASE1,WKRG2       RESTORE REGISTER 11           Y02081
         DROP  FTBASE1             DROP MAINLINE BASE            Y02081
         USING FTCE0101,WKRG11     RESET ADDRESSABILITY          Y02081
         SPACE
         TM    XFLAG2,TXTFIX       HANDLING TXT OUT OF FIX?      Y02081
         BO    FTCE043             IF SO, BRANCH                 Y02081
         L     WKRG1,FTREGSV       RESTORE IOSB POINTER          Y02081
         MVC   IOSEEK,FTIOBSK      UPDATE IOSB STATIC SEEK       Y02081
         MVC   IOSEEKA,IOSEEK      UPDATE IOSB DYNAMIC SEEK      Y02081
         LM    WKRG0,WKRG15,0(WKRG13)  RESTORE IOS REGISTERS     Y02081
         B     8(RETURNRG)         RETURN TO RESTART CHN PGM     Y02081
         SPACE
*---- CHANNEL END OCCURRED AFTER THE DIE ROUTINE DISCOVERED THAT THE
*---- NEXT TEXT RECORD WILL NOT FIT WITHIN THE AREA CURRENTLY FIXED
*------ SET UP NEW FIX, RESET CHANNEL PROGRAM, AND RE-DRIVE      Y02081
         SPACE
FTCE040  STM   WKRG0,WKRG15,FTREGSV  SAVE REGISTERS              Y02081
         L     WKRG1,FTRESTRT      GET ADDR OF LAST RLD BUF      Y02081
         LA    CODEREG,DIERELOC    POINT TO RELOCATE RTN         Y02081
         LTR   WKRG1,WKRG1         ANYTHING TO RELOCATE?         Y02081
         BZ    FTCE041             IF NOT, BRANCH                Y02081
         BALR  LINKREG,CODEREG     RELOCATE THE BUFFER           Y02081
         LM    WKRG0,WKRG14,FTREGSV  RESTORE REGISTERS           Y02081
         TM    XFLAG1,RELERR       ERROR FOUND?                  Y02081
         BZ    FTCE041             IF NOT, BRANCH                Y02081
         B     NRMEXIT             TOWARD TERMINATION            Y02081
FTCE041  L     WKRG2,FTTBLPTR      POINT TO CURRENT TAB ENT      Y02081
         L     WKRG1,TBLBUFAD(WKRG2)  POINT TO CURRENT RLD BUF   Y02081
         TM    0(WKRG1),ENDFLG     IS NEXT TXT LAST OF MOD?      Y02081
         BZ    FTCE042             IF NOT, BRANCH                Y02081
         L     WKRG2,TBLCPAD(WKRG2)  POINT TO NEXT CHAN PROG     Y02081
         MVI   RDCT1FL(WKRG2),PCI  SET NEXT RDCNT CCW TO PCI     Y02081
*                                  WITH NO COMMAND CHAINING      Y02081
         MVI   FTFLG4,LASTCTL      SET PCI END FLAG ON           Y02081
FTCE042  BALR  LINKREG,CODEREG     PROCESS CURRENT BUFFER        Y02081
         LM    WKRG0,WKRG15,FTREGSV  RESTORE REGISTERS           Y02081
         TM    XFLAG1,RELERR       RELOCATE ERROR FOUND?         Y02081
         BO    NRMEXIT             IF SO, GO RETURN              Y02081
         B     FTCE030A            GO TO RESET FIX AND           Y02081
*                                  TRANSLATE RDTXT CCW           Y02081
FTCE043  L     WKRG1,FTTBLPTR      POINT TO CURRENT TAB ENT      Y02081
         LM    WKRG2,WKRG4,0(WKRG1)  LOAD CURRENT TABLE ENTRY    Y02081
         TM    FTFLG4,LASTCTL      END OF MODULE FOUND?          Y02081
         BO    FTCE043A            IF SO, BRANCH                 Y02081
         MVI   RDCT1FL(WKRG3),CMCH+PCI  SET PCI IN NEXT CH PGM   Y02081
         MVI   TICOFFST(WKRG3),NOP SET NOP IN NEXT CHAN PROG     Y02081
FTCE043A LRA   WKRG5,0(WKRG3)      REAL ADDR OF NEXT CHN PGM     Y02081
         STCM  WKRG5,ADDR,FTCPSRCH+SCHTICAD  UPDATE SRCH CH PGM  Y02081
         OI    XFLAG1,ACTXTFLG     SET ACTIVE TXT READ FLAG      Y02081
         ST    WKRG2,FTTBLPTR      UPDATE CURRENT TAB PTR        Y02081
         MVI   (FTCP1+RDCT1FL)-FTRBUF1(WKRG4),CMCH  TURN OFF     Y02081
*                                  PCI IN LAST CHAN PROG         Y02081
         MVI   (FTCP1+20)-FTRBUF1(WKRG4),CMCH+SILI  TURN OFF     Y02081
*                                  PCI IN LAST CHAN PROG         Y02081
         L     WKRG5,(FTCP1+RDCNT2)-FTRBUF1(WKRG4)  GET REAL     Y02081
*                                  ADDR OF THE LAST RDCNT BUFFER Y02081
         LR    WKRG7,WKBASE        GET VIRT ADDR OF WORKAREA     Y02081
         N     WKRG7,PAGEMASK      TRUNCATE TO PAGE START        Y02081
         N     WKRG5,STRIPMSK      BYTE ADDR OF RDCNT BUFFER     Y02081
         OR    WKRG5,WKRG7         VIRTUAL ADDR OF RDCNT BUF     Y02081
         L     WKRG1,FTREGSV+4     RESTORE IOSB POINTER          Y02081
         MVC   FTIOBSK+CCHHR(SKSIZ),0(WKRG5)  RESET SEARCH-ID    Y02081
*                                         SEEK ADDRESS           Y02081
         MVC   IOSEEK+CCHHR(SKSIZ),FTIOBSK+CCHHR  RESET IOSB     Y02081
*                                         STATIC SEEK ADDRESS    Y02081
         MVC   IOSEEKA+CCHHR(SKSIZ),IOSEEK+CCHHR  RESET IOSB     Y02081
*                                         DYNAMIC SEEK ADDRESS   Y02081
         XC    FTRESTRT,FTRESTRT   CLEAR RESTART POINTER         Y02081
         XC    FTLASTBF,FTLASTBF   CLEAR LAST BUFFER PTR         Y02081
         NI    XFLAG2,ALL-TXTFIX   CLEAR TXT OUT OF FIX FLAG     Y02081
         LM    WKRG0,WKRG15,0(WKRG13)  RESTORE IOS REGISTERS     Y02081
         B     8(RETURNRG)         GO TO RE-DRIVE CHAN PROG      Y02081
         SPACE
FTMAIN   DC    A(FT001)            MAINLINE FETCH BASE ADDR      Y02081
PGFIX    DC    B'01000000'         FLAG BYTE FOR A PGFIX         Y02081
PGFREE   DC    B'00100000'         FLAG BYTE FOR A PGFREE        Y02081
         SPACE
         DROP  WKRG1               DROP IOSB BASE                Y02081
         DROP  WKRG6               DROP FETCH WORKAREA BASE      Y02081
        TITLE 'IEWFETCH...PROGRAM LOADING ROUTINE...DISABLED INTERRUPT X
               EXIT(DIE) ROUTINE  (PCI PROCESSING)'
***********************************************************************
*                                                                     *
*        DISABLED INTERUPT EXIT (DIE) ROUTINE (PCI PROCESSING)        *
*                                                                     *
*        IOS WILL GIVE CONTROL TO THIS ROUTINE EACH TIME AN INTERUPT  *
*        IS FIELDED WHICH IS ASSOCIATED WITH A FETCH CHANNEL PROGRAM  *
*        (I.E. AN INTERUPT ASSOCIATED WITH AN IOSB GENERATED BY       *
*        FETCH). THE DIE ROUTINE WILL IMMEDIATELY RETURN TO IOS FOR   *
*        NORMAL PROCESSING TO CONTINUE ON ALL INTERUPT CONDITIONS     *
*        OTHER THAN A FETCH GENERATED PCI INTERRUPT. WHEN ENTERED     *
*        THIS ROUTINE WILL FIRST ASCERTAIN THAT REQUIRED PORTION OF   *
*        CONTROL/RLD RECORD CURRENTLY BEING READ IS PRESENT IN THE    *
*        BUFFER. THIS IS DONE BY PRIMING THE THIRTEENTH BYTE OF THE   *
*        BUFFER WITH X'FF'. THE THIRTEENTH BYTE OF A CONTROL/RLD      *
*        RECORD WILL ALWAYS CONTAIN X'00'. THE DIE ROUTINE USES A     *
*        DISABLED BIT SPIN (FOR WHICH A PERMANENT STANDARDS DEVIATION *
*        EXISTS) TO WAIT UNTIL X'FF' IS NO LONGER FOUND IN THAT BYTE  *
*        POSITION OF THE BUFFER. AT THIS POINT, THE FIRST BYTE OF THE *
*        BUFFER WHICH WAS JUST FILLED WILL INDICATE THE TYPE OF THE   *
*        NEXT RECORD. IF THE NEXT RECORD IS A TEXT RECORD THEN THE    *
*        NEXT CHANNEL PROGRAM WILL BE INITIALIZED WITH THE SIZE AND   *
*        ADDRESS AT WHICH THE RECORD WILL BE READ AND THE NOP IN THIS *
*        CHANNEL PROGRAM WILL BE ALTERED TO TIC TO THE READ TEXT CCW  *
*        IN THE NEXT CHANNEL PROGRAM. IF THE NEXT RECORD IS AN RLD    *
*        RECORD THEN THE NOP IN THIS CHANNEL PROGRAM WILL BE ALTERED  *
*        TO TIC TO THE READ RLD CCW IN THE NEXT CHANNEL PROGRAM.      *
*        BEFORE RETURNING TO IOS THE RLD RECORD, IF ANY, READ BY THE  *
*        PREVIOUS CHANNEL PROGRAM IS RELOCATED BY THE DIE RELOCATE    *
*        ROUTINE AND THE TIC TO ADDRESS IN THE SEARCH ID CHANNEL      *
*        PROGRAM IS RE-INITIALIZED (FOR RESTART).                     *
*                                                              Y02081 *
***********************************************************************
         USING *,CODEREG           ESTABLISH ADDRESSABILITY      Y02081
FTPCI01  EQU   *                   START OF THE DIE ROUTINE      Y02081
         USING IOSB,IOBREG         ESTABLISH ADDRESSABILITY      Y02081
*                                  FOR THE IOSB                  Y02081
         TM    IOSTSB,PCIFLG       DETERMINE IF THE DIE HAS      Y02081
*                                  BEEN ENTERED FOR A PCI        Y02081
         BCR   8,RETURNRG          IF NOT, RETURN TO IOS         Y02081
         STM   WKRG0,WKRG15,0(WKRG13)  SAVE REGISTERS FOR IOS    Y02081
         L     WKBASE,IOSUSE       GET ADDRESS OF FETCH WORK     Y02081
*                                  AREA (SAVED IN IOSB)          Y02081
         USING WKFETCH,WKBASE      ESTABLISH ADDRESSABILITY      Y02081
*                                  FOR THE FETCH WORK AREA       Y02081
         TM    XFLAG1,RELERR       WAS AN INVALID ADDR FOUND     Y02081
*                                  ON THE LAST DIE ENTRY?        Y02081
         BO    FTPCI015            IF SO, GO RETURN TO IOS       Y02081
         L     WKRG8,FTTBLPTR      LOAD TABLE ENTRY PTR          Y02081
         LM    WKRG10,WKRG12,0(WKRG8)  LOAD TABLE ENTRY          Y02081
         SPACE
**********************************************************************
         NI    (FTCP1+RDCT2FL)-FTRBUF1(WKRG12),ALL-PCI    YM1209,YM1082
*                                  TURN OFF PCI BIT IN 2ND       YM1082
*                                  RD-CNT CCW (MAY BE SET BY     YM1082
*                                  EXTENT VERIFICATION ROUTINE)  YM1082
         SPACE
         USING UCB,UCBREG          SET ADDRESSABILITY FOR UCB    Y02081
*                                                               ZA06138
         LH    WKRG9,UCBCHAN       GET CHAN ADDRESS FROM UCB     Y02081
         DROP  UCBREG              DROP UCB BASE                 Y02081
FTPCI011 TM    SPINBYTE(WKRG12),ALL  PSEUDO WAIT                 Y02081
         BZ    FTPCI012            BR  REC IN CORE
         BM    FTPCI021            IF MIXED, BRANCH TO INDICATE OS57077
*                                  AN INVALID RECORD            OS57077
         TM    FTFLG4,LASTCTL      TEST LAST TXT INDIC
         BZ    FTPCI013            IF NOT ON, CONTINUE BIT SPIN
         MVI   FTFLG4,LASTREC      IF LST-TXT SW ON, SET END PCI
FTPCI015 LM    WKRG0,WKRG15,0(WKRG13)  RESTORE IOS REGISTERS     Y02081
         BR    RETURNRG            AND RETURN TO IOS             Y02081
FTPCI013 TCH   0(WKRG9)            TEST FOR CHANNEL BUSY         Y02081
         BC    2,FTPCI011          BRANCH IF CHAN STILL BUSY
         TM    SPINBYTE(WKRG12),ALL  HAS RECORD COME IN WHILE    YM1082
*                                  WE WERE GOING TO TSTCHN?      YM1082
         BZ    FTPCI012            IF SO, PROCESS IT             YM1082
         BM    FTPCI021            IF MIXED, BRANCH TO INDICATE OS57077
*                                  AN INVALID RECORD            OS57077
         LM    WKRG0,WKRG15,0(WKRG13)  RESTORE IOS REGISTERS     Y02081
         BR    RETURNRG            AND RETURN TO IOS             Y02081
FTPCI012 EQU   *                   BEGIN PROCESSING CTL/RLD DATA Y02081
         ST    WKRG8,FTLASTBF      SAVE THIS BUF AS LAST   M6068,Y02081
         SPACE
FTPCI014 EQU   *                   ENTER HERE FROM CHAN END FOR ACR
         L     WKRG9,TBLBUFAD(WKRG10)  ADDRESS OF NEXT RLD       Y02081
*                                  BUFFER FROM NEXT TBL ENTRY
         MVI   SPINBYTE(WKRG9),ALL SET PSEUDO WAIT FLAG          Y02081
**********************************************************************
         SPACE
*FTPCI019 EQU   *
         TM    0(WKRG12),TSTBITS   TEST FOR INVALID RECORD       Y02081
         BZ    FTPCI02             GO IF VALID                   Y02081
FTPCI021 OI    XFLAG2,BADREC       INDICATE INVALID RECORD       Y02081
FTPCI022 EQU   *                   TERMINATE FETCH I/O
         LM    WKRG0,WKRG15,0(WKRG13)  RESTORE IOS REGISTERS     Y02081
         BR    RETURNRG            AND RETURN TO IOS             Y02081
FTPCI02  TM    0(WKRG12),CTLFLG    TEST BUF FOR CONTROL REC      Y02081
         BZ    FTPCI05             IF NOT, GO TO PROCESS AS RLD  A43723
*
*   VERIFY THE NEW TEXT RECORD IS WITHIN THE CURRENT FIXED AREA
*   BEFORE CHAINING THE NEXT CHANNEL PROGRAM TO READ IT.
*
         LM    WKRG8,WKRG9,CTLCCW(WKRG12)  GET CCW FROM CTL REC  Y02081
         ST    WKRG9,CCWFLG(WKRG11)  STORE FLAGS/COUNT IN CCW    Y02081
         LA    WKRG8,0(WKRG8)      CLEAR HIGH BYTE               Y02081
         A     WKRG8,FTRPTR        RELOCATE TEXT DATA ADDR       Y02081
         C     WKRG8,XLOFIX        TEST RECORD LOCATION          Y02081
         BNL   FTPCI023            BRANCH IF TXT NOT BELOW       Y02081
*                                  LOWER FIX BOUNDARY            Y02081
FTPCI028 OI    XFLAG2,TXTFIX       SET INDICATOR THAT TEXT TO BE Y02081
*                                  READ IS OUTSIDE FIXED AREA    Y02081
         ST    WKRG8,XTXTAD        UPDATE TEXT TRANSLATE PTR     Y02081
         ST    WKRG11,XCCWAD       UPDATE CCW TRANSLATE PTR      Y02081
         AH    WKRG8,CCWLEN(WKRG11)  ADD TEXT LEN TO TEXT ADDR   Y02081
         ST    WKRG8,XNEXTLOC      SAVE AS NEXT TEXT LOC PTR     Y02081
         B     FTPCI042            GO TO RETURN                  Y02081
FTPCI023 LR    WKRG9,WKRG8         GET TEXT START ADDRESS        Y02081
         AH    WKRG9,CCWLEN(WKRG11)  ADD TXT LEN TO TXT ADDR     Y02081
         SPACE
*    TEST IF NEXT TEXT RECORD EXCEEDS END OF MODULE.
         SPACE
         C     WKRG9,XEOMAD        GREATER THAN MODULE?          Y02081
         BNH   FTPCI02D            GO IF WITHIN MODULE           Y02081
         SPACE
         OI    XFLAG2,CTLERR       ELSE INDICATE ERROR           Y02081
         B     FTPCI022            GO TAKE ERROR IN MAINLINE     Y02081
         SPACE
FTPCI02D EQU   *                   TEST IF CURRENTLY FIXED AREA
*                                  WILL HOLD THE TEXT TO BE READ
         C     WKRG9,XHIFIX        TEST END OF RECORD LOC        Y02081
         BH    FTPCI028            BRANCH IF BEYOND FIX          Y02081
         ST    WKRG9,XNEXTLOC      SAVE TEXT POINTER             Y02081
*
*   TRANSLATE THE NEW TEXT-READ CCW.
*
         BCTR  WKRG9,0             POINT TO LAST BYTE OF RECORD  Y02081
         N     WKRG9,PAGEMASK      ADJUST TO PRIOR PAGE BOUNDARY Y02081
         CR    WKRG9,WKRG8         COMPARE LAST PAGE ADDR TO THE Y02081
*                                  FIRST DATA BYTE ADDRESS       Y02081
         BH    FTPCI024            BRANCH IF A PAGE IS CROSSED
         SPACE
*     RECORD IS CONTAINED IN A SINGLE PAGE...NO IDAL REQ'D.
         LRA   WKRG9,0(WKRG8)      GET REAL TEXT ADDRESS         Y02081
         STCM  WKRG9,ADDR,CCWADR(WKRG11)  STORE READ ADDR IN CCW Y02081
         NI    CCWFLG(WKRG11),ALL-IDALFLAG  CLEAR IDAL INDICATOR Y02081
         B     FTPCI027            GO SET UP REST OF NEXT CP
         SPACE
*     PREPARE CCW FOR IDAL USE.
FTPCI024 STM   WKRG3,WKRG4,FTREGSV SAVE REGS NEEDED FOR XLATE    Y02081
         L     WKRG3,XIDALP2       GET AUX IDAL BUILD AREA
         MVC   XIDALP2,XIDALP1     EXCHANGE IDALS FOR NEXT PCI
         ST    WKRG3,XIDALP1       EXCHANGE IDALS FOR NEXT PCI
         LRA   WKRG4,0(WKRG3)      GET IDAL REAL ADDRESS
         STCM  WKRG4,ADDR,CCWADR(WKRG11)  REAL ADDR IN RDTXT CCW Y02081
         OI    CCWFLG(WKRG11),IDALFLAG  TURN ON IDAL FLAG IN CCW Y02081
*     BUILD IDAL ENTRIES
         LR    WKRG9,WKRG8         LOC OF TEXT RECORD            Y02081
         AH    WKRG9,CCWLEN(WKRG11)  ADD SIZE OF TEXT RECORD     Y02081
         BCTR  WKRG9,0             DECR TO ADDRESS LAST BYTE     Y02081
         N     WKRG9,BLOKMASK      TRUNCATE TO GET LAST 2K       Y02081
*                                  BOUNDARY                      Y02081
         LRA   WKRG4,0(WKRG8)      GET REAL ADDRESS OF 1ST       Y02081
*                                  TEXT BYTE                     Y02081
         N     WKRG8,BLOKMASK      ADJUST DATA POINTER TO NEXT   Y02081
*                                  LOWER 2K BOUNDARY             Y02081
FTPCI025 ST    WKRG4,0(WKRG3)      STORE REAL ADDR IN IDAL
         A     WKRG8,BLOKSIZE      ADDRESS OF NEXT 2K BLOCK      Y02081
         CR    WKRG8,WKRG9         IS NEXT PAGE BEYOND LAST      Y02081
*                                  PAGE OF TEXT ?                Y02081
         BH    FTPCI026            BRANCH IF TRANSLATE DONE
         LA    WKRG3,IDALNTRY(WKRG3)  INDEX TO NEXT IDAL ENTRY
         LRA   WKRG4,0(WKRG8)      OBTAIN REAL ADDRESS OF PAGE   Y02081
         B     FTPCI025            CONTINUE LIST CREATION
*     END OF TRANSLATION
FTPCI026 LM    WKRG3,WKRG4,FTREGSV RESTORE TRANSLATE REGS        Y02081
FTPCI027 EQU   *                   UPDATE FETCH CHANNEL PROGRAM
         SPACE
         MVI   RDCT1FL(WKRG11),CMCH+PCI  SET NEXT PCI            Y02081
         MVI   TICOFFST(WKRG11),NOP  NXT CH PRG TO NOP           Y02081
         SPACE
*    BUFFER HAS CONTROL DATA..CHAIN THE NEXT CP TO READ TXT+RLD.
         LRA   WKRG8,0(WKRG11)     GET REAL ADDR FOR TIC CCW     Y02081
         O     WKRG8,FTPCIMSK      INCLUDE TIC COMMAND CODE      Y02081
         ST    WKRG8,(FTCP1+TICOFFST)-FTRBUF1(WKRG12)  PLACE     Y02081
*                                  REAL TIC ADDR IN CHANNEL PROG Y02081
         OI    XFLAG1,ACTXTFLG     SET ACTIVE TXT CCW FLAG ON
         SPACE
         ST    WKRG10,FTTBLPTR     UPDATE TABLE PTR              Y02081
         TM    0(WKRG12),ENDFLG    TEST END                      Y02081
         BZ    FTPCI032            BRANCH NOT END                S20201
         MVI   RDCT1FL(WKRG11),PCI PCI WITH NO CC                Y02081
         MVI   FTFLG4,LASTCTL      SET LAST TXT INDIC
*
*        INTERFACE TO DIE RELOCATE ROUTINE
*
FTPCI032 CLI   IOSCOD,IOSFTCHC     TEST FOR COMMAND RETRY A45572,Y02081
         BNE   FTPCI033            BRANCH IF NOT ACR             A45572
         SPACE
         TM    XFLAG2,ACRRELOC     ALREADY RELOCATED?            Y02081
         BZ    FTPCI04             GO IF PREV RELOCATED          Y02081
         SPACE
         NI    XFLAG2,ALL-ACRRELOC RELOCATE SWITCH OFF           Y02081
         SPACE
FTPCI033 EQU   *                   SETUP FOR RELOCATION
         STM   WKRG0,WKRG15,FTREGSV  SAVE REGS ACROSS POST       A45572
         L     WKRG1,FTRESTRT      POINT TO LAST RLD OR CONTROL  Y02081
*                                  RECORD READ                   Y02081
         LTR   WKRG1,WKRG1         WAS THERE A PREVIOUS RLD?     Y02081
         BZ    FTPCI034            IF NOT, BRANCH                Y02081
         LA    CODEREG,DIERELOC    POINT TO RELOCATE ROUTINE     Y02081
         BALR  LINKREG,CODEREG     LINK TO RELOCATE ROUTINE      Y02081
FTPCI034 EQU   *                   CONTINUE CHAN PROG UPDATING   Y02081
         LM    WKRG0,WKRG15,FTREGSV  RESTORE REGS AFTER RELOCATE
         TM    XFLAG1,RELERR       WAS AN ERROR ENCOUNTERED?     Y02081
         BO    FTPCI022            IF SO, BRANCH                 Y02081
FTPCI04  MVI   (FTCP1+RDCT1FL)-FTRBUF1(WKRG12),CMCH  CLEAR PCI   Y02081
         MVI   (FTCP1+RDRLDFL)-FTRBUF1(WKRG12),CMCH+SILI  CLEAR  Y02081
*                                  PCI ON READ RLD CCW           Y02081
         L     WKRG9,FTRESTRT      GET ADDRESS OF LAST CHANNEL   Y02081
*                                  PROGRAM RESTART               Y02081
         LTR   WKRG9,WKRG9         0=1ST RD NO RESTART SETUP     Y02081
         BZ    FTPCI041            IF ZERO, BYPASS               Y02081
         CLI   IOSCOD,IOSFTCHC     IS THIS AN ECF ERROR?  S20201,Y02081
         BE    FTPCI041            IF SO, BYPASS RESET           A45572
         L     WKRG10,(FTCP1+TICOFFST)-FTRBUF1(WKRG9)     S20201,Y02081
*                                  LAST TIC ADDRESS FOR RESTART  Y02081
         SPACE
*  IF AN EXTENT HAS BEEN CROSSED IN THE CURRENT CHANNEL PROGRAM,
*   THE RESTART SEQUENCE WILL HAVE BEEN SET TO TIC DIRECTLY TO
*   THE READ COUNT CCW WHICH RECEIVED THE UNIT CHECK AND THE
*   ARGUMENT OF THE SEARCH-ID CCW WILL BE CORRECT FOR THE NEW
*   EXTENT.  IN THIS CASE, THE FOLLOWING CODE SHOULD BE BYPASSED
*   TO AVOID RESETTING THE SEARCH-ID AND TIC SEQUENCE TO RE-READ
*   THE LAST RECORD OF THE OLD EXTENT ON A RESTART AND CAUSE THE
*   UNIT CHECK TO RE-APPEAR IN A LOOP.                           YM1209
         A     WKRG10,F8           POINT TO RDCNT CCW            YM1209
         C     WKRG10,FTCPSRCH+SRCHTIC  IS RESTART ALREADY SET   YM1209
*                                  TO GO TO THE RDCNT IN THE     YM1209
*                                  CURRENT CHANNEL PROGRAM?      YM1209
         BE    FTPCI041            IF SO, BYPASS RESET           YM1209
         A     WKRG10,F16          POINT TO 2ND RDCNT CCW        YM1209
         C     WKRG10,FTCPSRCH+SRCHTIC  IS RESTART SET TO GO TO  YM1209
*                                  2ND RDCNT IN CURRENT CP?      YM1209
         BE    FTPCI041            IF SO, BYPASS RESET           YM1209
         S     WKRG10,F24          POINT BACK TO RD DATA CCW     YM1209
         ST    WKRG10,FTCPSRCH+SRCHTIC  STORE FOR RESTART        Y02081
         L     WKRG10,(FTCP1+RDCNT2)-FTRBUF1(WKRG9)  ADDRESS OF  Y02081
*                                  SEEK ADDRESS BUFFER           Y02081
         SPACE
* CONVERT THE REAL ADDRESS OF THE COUNT BUFFER TO VIRTUAL
* SO IT CAN BE REFERENCED.
         LA    WKRG9,WKFETCH       GET VIRT ADDR OF WORKAREA     Y02081
         N     WKRG9,PAGEMASK      TRUNC TO PRIOR PAGE BNDRY     Y02081
         N     WKRG10,STRIPMSK     GET BYTE ADDR OF CNT BUFF     Y02081
         OR    WKRG10,WKRG9        ADD SEG/PAGE TO GET FULL      Y02081
*                                  VIRTUAL ADDRESS.
         MVC   IOSEEK+CCHHR(SKSIZ),0(WKRG10)  SET IOSB    A43723,Y02081
*                                  RESTART ADDRESS               Y02081
         MVC   FTIOBSK+CCHHR(SKSIZ),IOSEEK+CCHHR  UPDATE         Y02081
*                                  SEARCH-ID SEEK ADDRESS        Y02081
         MVC   IOSEEKA+CCHHR(SKSIZ),IOSEEK+CCHHR  UPDATE IOSB    YM1082
*                                  DYNAMIC SEEK ADDR             Y02081
FTPCI041 ST    WKRG12,FTRESTRT     SAV ADR FOR NXT PCI RESTR     Y02081
FTPCI042 LM    WKRG0,WKRG15,0(WKRG13)  RESTORE IOS REGISTERS     Y02081
         CLI   IOSCOD,IOSFTCHC     TEST FOR COMMAND RETRY        Y02081
         BE    8(RETURNRG)         IF SO, RETRN ON RESTRT VECTOR Y02081
         RETURN
*
*    BUFFER HAS RLD DATA ONLY...CHAIN THE NEXT CP TO READ RLD.
*
FTPCI05  TM    0(WKRG12),RLDFLG    DOES BUFFR HAVE RLD DATA?     Y02081
         BZ    FTPCI021            IF NOT,BRANCH-INVALID REC     Y02081
         ST    WKRG10,FTTBLPTR     UPDATE CURRENT TABLE PTR      Y02081
FTPCI05A TM    0(WKRG12),ENDFLG    TEST FOR END OF MODULE        Y02081
         BZ    FTPCI06             IF NOT, BRANCH
         MVI   FTFLG4,LASTREC      IF SO, SET END COND
         B     FTPCI032            GO TO RELOCATE INTERFACE      S20201
FTPCI06  LA    WKRG9,CPRDRLD(WKRG11)  POINT TO NEXT RD-RLD CCW   Y02081
         MVI   TICOFFST(WKRG11),NOP  SET NOP IN NEXT CHAN PROG   Y02081
         MVI   RDRLDFL(WKRG11),CMCH+SILI+PCI  SET NEXT PCI       Y02081
         NI    XFLAG1,ALL-ACTXTFLG TURN OFF ACTIVE TXT FLAG
         LRA   WKRG9,0(WKRG9)      GET REAL ADDR FOR TIC CCW     Y02081
         O     WKRG9,FTPCIMSK      SET OP CODE               247,Y02081
         ST    WKRG9,(FTCP1+TICOFFST)-FTRBUF1(WKRG12)  UPDATE    Y02081
*                                  NOP CCW TO A TIC          247,Y02081
         B     FTPCI032            GO TO RELOCATE INTERFACE      S20201
         SPACE
         DROP  IOBREG              DROP IOSB BASE                Y02081
         DROP  CODEREG             DROP APPENDAGE BASE           Y02081
         DROP  WKBASE              DROP FETCH WORKAREA BASE      Y02081
         TITLE 'IEWFETCH...PROGRAM LOADING ROUTINE...APPENDAGES        C
               CONSTANTS.'
*
*        APPENDAGE CONSTANTS
*
         DS    0F                  FORCE FULLWORD ALIGNMENT         247
FTPCIMSK DC    X'08000000'         MASK FOR TIC OP-CODE             247
F8       DC    F'8'                USED FOR SUBTRACT             YM1209
F16      DC    F'16'               USED FOR SUBTRACT             Y02081
F24      DC    F'24'               USED FOR SUBTRACT             Y02081
         SPACE 2
*------- THE FOLLOWING FETCH CONSTANTS PRESUME
*        PAGE SIZE FOR THE SYSTEM IS 4K.
*
PAGESIZE DC    F'4096'             SYSTEM PAGE SIZE
PAGEMASK DC    XL4'FFFFF000'       MASK FOR REMOVING THE BYTE
*                                  PORTION OF AN ADDRESS.
*                                  (IE. ADJUSTS TO A PAGE BNDRY)
STRIPMSK DC    XL4'FF000FFF'       MASK FOR REMOVING THE SEG/PG
*                                  PORTION OF AN ADDRESS.
*                                  (IE. YIELDS THE BYTE ADDRESS)
*----------------------------------
         SPACE 2
*------- THE FOLLOWING CONSTANT DEFINES THE
*        MAXIMUM NUMBER OF BYTES FETCH MAY FIX
*        FOR AN I/O OPERATION DURING THE LOAD.
*
FIXLIMIT DC    F'18432'            18K BYTE FIX LIMIT
*----------------------------------
         SPACE 2
*-------- THE FOLLOWING CONSTANTS FOR IDAL CONSTRUCTION
*        ARE BASED ON 2K LIST ENTRIES USED BY CHANNEL.
*
BLOKSIZE DC    F'2048'             2K BLOCK LENGTH
BLOKMASK DC    XL4'FFFFF800'       MASK FOR TRUNC TO 2K BNDRY
         EJECT
***********************************************************************
*                        DIE RELOCATE ROUTINE                         *
*        THE FOLLOWING SUBROUTINE PERFORMS ADCON RELOCATION IN A      *
*        DISABLED STATE IN THE DISABLED INTERUPT EXIT (DIE) ROUTINE   *
*        OF PRGRAM FETCH. WHEN A PCI CAUSES THE DIE ROUTINE TO        *
*        RECEIVE CONTROL, THE RLD OR CONTROL RECORD READ BY THE       *
*        PREVIOUS SUB-CHANNEL PROGRAM (THE ONE PRIOR TO THE ONE       *
*        GENERATING THE PCI) IS NECESSARILY COMPLETELY READ INTO      *
*        THE APPROPRIATE RLD BUFFER AND THERFORE READY TO BE          *
*        PROCESSED. THIS IS DONE IN THE DIE ROUTINE BECAUSE IT IS     *
*        IMPOSSIBLE TO OBTAIN IN A DISABLED STATE THE LOCK REQUIRED   *
*        TO BE HELD IN ORDER TO POST TO MAIN LINE FETCH AND           *
*        THEREFORE NO PRACTICAL MEANS OF SUB-PROGRAM COMMUNICATION    *
*        EXISTS TO ALLOW ENABLED RLD PROCESSING TO HAVE ANY           *
*        LIKELIHOOD OF BEING COMPLETED IN TIME TO FREE THE BUFFER     *
*        FOR THE NEXT TIME IT IS NEEDED.                              *
*                                                              Y02081 *
*          REGISTER USAGE.
*
*        0=END OF RLD RECORD.
*        1=RELOCATION ADDRESS(MODULE START ADDRESS)
*        2=INTERNAL BRANCH LABEL
*        3=INTERNAL BRANCH LABEL
*        4=INTERNAL BRANCH LABEL
*        5=INTERNAL BRANCH LABEL
*        6=FETCH WORK AREA BASE
*        7=START OF MODULE ADDRESS FOR RLD VALIDATION(XSOMAD)
*        8=END OF MODULE ADDRESS FOR RLD VALIDATION(XEOMAD)
*        9=ADCON MANIPULATION
*        10=ADCON MANIPULATION
*        11=ADCON MANIPULATION
*        12=RLD SIZE FOR STEPPING ACROSS RLD RECORDS
*        13=USED TO POINT TO EACH RLD ITEM IN RLD RECORD
*        14=RETURN ADDRESS
*        15=DIE RELOCATE BASE
*
***********************************************************************
         SPACE 2
         USING *,CODEREG           SET ADDRESSABILITY            Y02081
         USING WKFETCH,WKBASE      WORK AREA ADDRESSABILITY      Y02081
DIERELOC EQU   *                   REG 1 POINTS TO THE RLD       Y02081
*                                  BUFFER TO BE PROCESSED        Y02081
         TM    0(WKRG1),RLDFLG     DOES IT CONTAIN RLD'S?        Y02081
         BCR   8,WKRG14            IF NOT, RETURN TO CALLER      Y02081
         LA    WKRG13,RLDATA(WKRG1)  POINT TO 1ST RLD ITEM       Y02081
         LR    WKRG0,WKRG13        POINT TO START OF RLD'S       Y02081
         AH    WKRG0,RLDLEN(WKRG1) ADD LENGTH OF RLD DATA        Y02081
*                                  TO POINT TO END OF RLD'S      Y02081
         LA    WKRG2,RELOC02       POINT TO RELOC02 FOR BCR      Y02081
         LA    WKRG3,RELOC03       POINT TO RELOC03 FOR BCR      Y02081
         LA    WKRG4,RELOC04       POINT TO RELOC04 FOR BCR      Y02081
         LA    WKRG5,RELOC05       POINT TO RELOC05 FOR BCR      Y02081
         L     WKRG1,FTRPTR        GET MODULE RELOCATION FACTOR  Y02081
         LA    WKRG12,4            SET INCREMENT FOR SCANNING    Y02081
*                                  THE RLD RECORD                Y02081
         SR    WKRG9,WKRG9         CLEAR WORK REGISTER           Y02081
         SR    WKRG10,WKRG10       CLEAR WORK REGISTER           Y02081
         L     WKRG7,XSOMAD        POINT TO START OF MODULE      Y02081
*                                  FOR RLD VALIDATION            Y02081
         L     WKRG8,XEOMAD        POINT TO END OF MODULE        Y02081
*                                                                Y02081
*              THE MAIN PROCESSING LOOP BEGINS HERE              Y02081
*                                                                Y02081
RELOC02  AR    WKRG13,WKRG12       POINT TO FLAG/ADDR FIELD      Y02081
         CR    WKRG13,WKRG0        END OF THE RLD'S?             Y02081
         BCR   10,WKRG14           IF SO, RETURN                 Y02081
         TM    0(WKRG13),RELREQ    RELOCATION REQUIRED?          Y02081
         BCR   7,WKRG5             IF NOT, GO TO RELOC05         Y02081
         ICM   WKRG9,ADDR,1(WKRG13)  GET ADDR OF ADCON           Y02081
         AR    WKRG9,WKRG1         RELOCATE ADDR OF ADCON        Y02081
         CR    WKRG9,WKRG7         IS ADCON WITHIN MODULE?       Y02081
         BL    RELOCERR            IF NOT, RETURN WITH AN        Y02081
*                                  INDICATION THAT AN INVALID    Y02081
*                                  ADDRESS WAS ENCOUNTERED       Y02081
         NI    0(WKRG13),ADCLEN    ISOLATE LENGTH BITS OF        Y02081
         IC    WKRG10,0(WKRG13)    RLD FLAG FIELD                Y02081
         SRL   WKRG10,2            SHIFT LENGTH TO LOW ORDER     Y02081
         LA    WKRG11,0(WKRG9,WKRG10)  POINT TO END OF ADCON     Y02081
         CR    WKRG11,WKRG8        IS ADCON WITHIN MODULE?       Y02081
         BNL   RELOCERR            IF NOT, RETURN WITH ERROR     Y02081
         IC    WKRG10,BITMSK(WKRG10)  GET MASK FOR ICM INSTRCTN  Y02081
         EX    WKRG10,GETADCN      LOAD THE ADCON                Y02081
         TM    0(WKRG13),RELNEG    POSITIVE RELOCATION?          Y02081
         BCR   8,WKRG3             IF SO, GO TO RELOC03          Y02081
         SR    WKRG11,WKRG1        SUBTRACT RELOC FACTOR         Y02081
         BR    WKRG4               GO TO RELOC04                 Y02081
RELOC03  AR    WKRG11,WKRG1        ADD RELOCATION FACTOR         Y02081
RELOC04  EX    WKRG10,STRADCN      STORE THE RELOCATED ADCON     Y02081
RELOC05  TM    0(WKRG13),SAMERP    SAME R&P POINTERS?            Y02081
         BCR   1,WKRG2             IF SO, GO TO RELOC02          Y02081
         AR    WKRG13,WKRG12       IF NOT, ADD LENGTH OF R&P     Y02081
*                                  POINTER FIELD                 Y02081
         BR    WKRG2               AND GO TO RELOC02             Y02081
RELOCERR OI    XFLAG1,RELERR       INDICATE THAT AN INVALID      Y02081
*                                  ADCON ADDRESS WAS FOUND       Y02081
*                                  IN THE RLD RECORD BEING       Y02081
*                                  PROCESSED                     Y02081
         BR    WKRG14              AND RETURN TO CALLER          Y02081
         SPACE 2
BITMSK   DC    B'00000000',B'00000011',B'00000111',B'00001111'   Y02081
*              MASKS FOR ICM INSTRUCTIONS TO LOAD 2,3 OR 4 BYTE  Y02081
*                            ADCONS                              Y02081
         SPACE
GETADCN  ICM   WKRG11,B'0000',0(WKRG9)  EXECUTED INSTRUCTION TO  Y02081
*                                  LOAD AN ADCON                 Y02081
STRADCN  STCM  WKRG11,B'0000',0(WKRG9)  EXECUTED INSTRUCTION TO  Y02081
*                                  STORE A RELOCATED ADCON       Y02081
FTFXEND  EQU   *                   LAST BYTE FOR DIE FIX         Y21179
         DROP  WKBASE              DROP FETCH WORKAREA BASE      Y02081
         DROP  CODEREG             DROP SUBROUTINE BASE          Y02081
        TITLE 'IEWFETCH...PROGRAM LOADING ROUTINE...PURGE SUBROUTINE'
***********************************************************************
*                                                                     *
*              IEWFTPRG -- PURGE SUBROUTINE FOR FETCH                 *
*                                                                     *
*        THIS SUBROUTINE RECEIVES CONTROL FROM IOS WHENEVER THE       *
*        SYSTEM IS UNDERGOING A PURGE.  IF ANY SRB/IOSB'S WHICH       *
*        BELONG TO FETCH ARE FOUND ON ANY OF IOS'S QUEUES, THEY       *
*        ARE PASSED TO THE PURGE SUBROUTINE CHAIED TO THE IPIB.       *
*        IF THE PURGE IS A QUIESE REQUEST, FETCH DOES NOTHING AND     *
*        IMMEDIATELY RETURNS (BR 14).  IF IT IS A HALT REQUEST,       *
*        THE SUBROUTINE SEARCHES THE CHAIN OF SRB/IOSB'S TO FIND      *
*        ANY WHICH BELONG TO AN ACTIVE FETCH REQUEST AND MATCH THE    *
*        ARGUMENT OF THE PUGE (MEMORY, DATA SET OR TASK).  ALL        *
*        MATCHING SRB/IOSB'S ARE FREED AND DELETED FROM THE CHAIN     *
*        BEFORE RETURNING.                                            *
*                                                              Y02081 *
***********************************************************************
         SPACE 2
         USING *,CODEREG           TEMPORARY ADDRESSABILITY      Y02081
         USING IPIB,WKREGA         SET IPIB BASE REGISTER        Y02081
         USING SRB,WKREGB          SET SRB BASE REGISTER         Y02081
IEWFTPRG EQU   *                   START OF PURGE LOGIC          Y02081
         TM    IPIBOPT,IPIBHALT    IS THIS A HALT REQUEST?       Y02081
         BCR   8,RETURNRG          IF NOT, RETURN                Y02081
         STM   WKREGF,CODEREG,0(WKRG13)  SAVE REGISTERS          Y02081
         SPACE 2
         LR    WKRG11,WKRG15       RESET BASE                    Y02081
         DROP  WKRG15              NOTIFY ASSEMBLER              Y02081
         SPACE
         USING IEWFTPRG,WKRG11     TELL ASSEMBLER NEW BASE       Y02081
         LR    WKREGD,WKREGA       RESET IPIB POINTER REG        Y02081
         DROP  WKREGA              DROP CURRENT IPIB BASE        Y02081
         USING IOSB,WKREGA         SET IOSB BASE REGISTER        Y02081
         USING IPIB,WKREGD         RESET IPIB BASE REGISTER      Y02081
         LA    WKRG6,IPIBSRB       POINT TO IPIB CHAIN FIELD     Y02081
         L     WKREGB,IPIBSRB      POINT TO 1ST SRB IN CHAIN     Y02081
         LTR   WKREGB,WKREGB       IS CHAIN EMPTY?               Y02081
         BNZ   FTPRG20             IF NOT, BRANCH                Y02081
FTPRG10  LM    WKREGF,CODEREG,0(WKRG13)  RESTORE REGISTERS       Y02081
         BR    RETURNRG            AND RETURN                    Y02081
FTPRG20  L     WKREGA,SRBPARM      POINT TO IOSB                 Y02081
         CLI   IOSDVRID,IOSFCHID   DOES IT BELONG TO FETCH?      Y02081
         BE    FTPRG40             IF SO, BRANCH                 Y02081
FTPRG30  LA    WKRG6,SRBFLNK       POINT TO LAST CHAIN PTR       Y02081
         L     WKREGB,SRBFLNK      POINT TO NEXT SRB             Y02081
         LTR   WKREGB,WKREGB       END OF CHAIN?                 Y02081
         BNZ   FTPRG20             IF NOT, BRANCH                Y02081
         B     FTPRG10             GO TO RETURN IF END           Y02081
FTPRG40  L     WKRG7,IOSUSE        POINT TO FETCH WORKAREA       Y02081
         USING WKFETCH,WKRG7       WORKAREA ADDRESSABILITY       Y02081
         TM    IPIBOPT,IPIBMEM     IS IT A MEMORY PURGE?         Y02081
         BZ    FTPRG50             IF NOT, BRANCH                Y02081
         LH    WKRG5,IOSASID       GET IOSB MEMORY ID            Y02081
         CH    WKRG5,IPIBARG+2     SAME AS MEMORY PURGED?        Y02081
         BNE   FTPRG30             IF NOT, GO TO CONTINUE        Y02081
*                                  SEARCHING THE CHAIN           Y02081
FTPRG45  EQU   *                   REMOVE I/O REQUEST FROM CHAIN Y02081
         LR    WKRG9,WKREGA        SAVE IOSB POINTER             Y02081
         L     WKREGA,IOSIPIB      POINT TO IPIB               @ZA27769
         LTR   WKREGA,WKREGA       TEST FOR ZERO               @ZA27769
         BZ    FTPRG46             NOT HERE SO BRANCH          @ZA27769
         LA    WKREGF,1(0)         MAKE REG O NONZERO          @ZA27769
         L     CODEREG,CVTPTR      GET CVT PTR                 @ZA27769
         USING CVT,CODEREG         CVT ADDRESSABILITY          @ZA27769
         L     CODEREG,CVTIXAVL    IOCOM ADDRESS               @ZA27769
         USING IOCOM,CODEREG       IOCOM ADDRESSABILITY        @ZA27769
         L     CODEREG,IOCQCNT     PURGE/RESTORE ADDR          @ZA27769
         DROP  CODEREG             DROP CVT/IOCOM BASE         @ZA27769
*                                  POINT TO PURGE RESTORE      @ZA27769
*                                  ROUTINE TO DECREMENT/POST   @ZA27769
*                                  THE IPIB QUIESE COUNT/ECB   @ZA27769
         BALR  LINKREG,CODEREG     CALL THE IPIB ROUTINE       @ZA27769
FTPRG46  EQU   *                                               @ZA27769
         L     WKREGB,SRBFLNK      POINT TO NEXT SRB             Y02081
         ST    WKREGB,0(WKRG6)     RESET CHAIN POINTER IN        Y02081
*                                  PREVIOUS SRB (OR IPIB)        Y02081
*                                  TO POINT AROUND SRB TO        Y02081
*                                  BE FREED                      Y02081
         L     WKRG1,XLOFIX        GET START ADDR OF FIXED       Y02081
*                                  TEXT READ-IN AREA             Y02081
         LTR   WKRG1,WKRG1         ANY TEXT FIXED?               Y02081
         BZ    FTPRG45A            IF NOT, DON'T FREE ANY        Y02081
         L     WKRG15,XHIFIX       GET END ADDR FOR PGFREE       Y02081
*------ NOTE -- ABOVE INSTRUCTION DESTROYS WORKAREA PTR          Y02081
         SPACE
*    FREE THE TEXT FIXED AREA.
         SPACE
         PGFREE  R,A=(WKRG1),EA=(WKRG15)  FREE THE TEXT AREA     Y02081
         SPACE 2
*       FREEING OF DIE ROUTINE MOVED TO THIS LOCATION BY APAR  @ZA10542
*    FREE THE DIE ROUTINE. BRANCH AROUND PGFREE IF DIE RTN WAS
*    NOT FIXED.
         SPACE
         L     WKRG1,FTPRGFXS      POINT TO START ADDRESS        Y02081
         L     WKRG15,FTPRGFXE     POINT TO END ADDRESS          Y02081
         L     WKRG5,CVTPTR        GET CVT ADDRESS             @ZA05457
         USING CVT,WKRG5           CVT ADDRESSABILITY          @ZA05457
         CLM   WKRG15,B'0111',CVTNUCB+1  DIE RTN IN FIXED LPA? @ZA05457
         DROP  WKRG5                                           @ZA05457
         XC    XLOFIX,XLOFIX        INIDCATE TEXT UNFIXED
         BNH   FTPRG45A             BRANCH IF IN FIXED LPA     @ZA05457
         SPACE
         PGFREE R,A=(WKRG1),EA=(WKRG15)  LET IT GO               Y02081
         SPACE 2
FTPRG45A EQU   *                   CONTINUE
         LR    WKRG1,WKRG9         RESTORE REGISTER 1            Y02081
         SPACE
*    FREE THE SRB/IOSB.
         SPACE
         FREEMAIN  R,LV=GLOBREQ,A=(WKRG1),SP=SQASP FREE SRB/IOSB Y02081
         SPACE 2
         OI    XFLAG2,PRGFREE      INDICATE RESOURCES FREED      Y02081
         LTR   WKREGB,WKREGB       END OF THE CHAIN FOUND?       Y02081
         BZ    FTPRG10             IF SO, RETURN                 Y02081
         SPACE
FTPRG51  B     FTPRG20             IF NOT, CONTINUE SEARCH       Y02081
FTPRG50  TM    IPIBOPT,IPIBTASK    IS IT TCB OR DSID PURGE?      Y02081
         BO    FTPRG60             IF TCB PURGE, BRANCH          Y02081
         SPACE
         L     WKRG5,XORGDCB       GET ORIGINAL DCB ADDRESS      Y02081
         L     WKRG5,DCBDEBAD(WKRG5)  GET ORIGINAL DEB ADDRESS   Y02081
         C     WKRG5,IPIBARG       SAME AS DSID PURGED?          Y02081
         BNE   FTPRG30             IF NOT, GO TO CONTINUE        Y02081
         B     FTPRG45             IF SO, GO TO FREE THE SRB     Y02081
FTPRG60  L     WKRG5,XFTCBAD       GET FETCH TCB ADDRESS         Y02081
         C     WKRG5,IPIBARG       SAME AS TCB PURGED?           Y02081
         BNE   FTPRG30             IF NOT, GO TO CONTINUE        Y02081
         B     FTPRG45             IF SO, GO TO FREE THE SRB     Y02081
         SPACE
FTPRGFXS DC    A(FTPCI01)          ADDRESS OF DIE START          Y02081
FTPRGFXE DC    A(FTFXEND)          ADDRESSOF DIE END             Y02081
         SPACE 2
         DROP  WKRG11              DROP BASE                     Y02081
         SPACE
         DROP  WKREGA              DROP IOSB BASE                Y02081
         DROP  WKREGB              DROP SRB BASE                 Y02081
         DROP  WKREGD              DROP IPIB BASE                Y02081
         DROP  WKRG7               DROP FETCH WORKAREA BASE      Y02081
  TITLE 'IEWFETCH...PROGRAM LOADING ROUTINE...EXTENT CHECK SUBROUTINE'
***********************************************************************
*                                                                     *
*        EXTENT VERIFICATION ROUTINE (END-OF-EXTENT PROCESSING)       *
*                                                                     *
*        THIS ROUTINE WILL RECEIVE CONTROL FROM THE DIRECT ACCESS     *
*        ERROR RECOVERY PROCEDURE WHENEVER THE DYNAMIC SEEK ADDRESS   *
*        (CCHH) CHANGES (I.E. AN END-OF-TRACK OR END-OF-CYLINDER      *
*        CONDITION IS ENCOUNTERED). THE FUNCTION OF THIS ROUTINE IS   *
*        FIRST TO DETERMINE IF THE CCHH ADDRESS OF THE NEXT RECORD    *
*        IS WITHIN THE CURRENT EXTENT BOUNDARIES. IF SO, CONTROL IS   *
*        RETURNED TO THE ADDRESS IN REGISTER 14 (NORMAL RETURN). IF   *
*        NOT, THE BOUNDARIES OF THE NEXT EXTENT, IF ONE EXITS, ARE    *
*        DETERMINED AND THE LOWER EXTENT BOUNDARY IS STORED IN THE    *
*        DYNAMIC SEEK ADDRESS FIELD OF THE IOSB. IF THE CURRENT EXTENT*
*        WAS THE LAST EXTENT OF THE DATA SET, AN ABNORMAL RETURN IS   *
*        INDICATED BY RETURNING CONTROL TO THE ADDRESS IN REGISTER    *
*        14 PLUS AN OFFSET OF 4.                                      *
*                                                                     *
*        THE ROUTINE STARTS BY DETERMINING THE EXTENT, OR -M-         *
*        NUMBER, OF THE OLD EXTENT. THE UPDATED -M- NUMBER, M+1, IS   *
*        ALSO STORED IN THE DYNAMIC SEEK ADDRESS FIELD OF THE IOSB.   *
*                                                              Y02081 *
***********************************************************************
         SPACE
         USING *,CODEREG           ESTABLISH ADDRESSABILITY      A34466
         SPACE 2
IEWFTXCK EQU   *                   FETCH EXTENT CHECK EP         Y02081
FTEOX01  EQU   *                   START OF EXTENT CHECK RTN     Y02081
         USING IOSB,IOSREG         ESTABLISH ADDRESSABILITY      Y02081
*                                  FOR THE IOSB                  Y02081
         L     IOBREG,IOSUSE       GET THE ADDRESS OF THE        Y02081
*                                  FETCH WORK AREA FROM THE      Y02081
*                                  IOSB USER FIELD               Y02081
         USING WKFETCH,IOBREG      ESTABLISH ADDRESSABILITY      Y02081
*                                  FOR THE FETCH WORK AREA       Y02081
         L     DEBREG,IOSDSID      GET DEB ADDRESS FROM IOSB     Y02081
         USING DEBBASIC,DEBREG     ESTABLISH ADDRESSABILITY      Y02081
*                                  FOR THE DEB                   Y02081
         STM   WKRG10,WKRG12,FTREGSV  SAVE WORK REGISTERS        Y02081
         SR    WKRG11,WKRG11       CLEAR WORK REGISTER           Y02081
         IC    WKRG11,IOSEEKA      GET CURRENT M VALUE           Y02081
         SLL   WKRG11,4            MULTIPLY BY FIELD SIZE        Y02081
         LA    WKRG10,DEBBASND-DEBBASIC(WKRG11,DEBREG)  POINT    Y02081
*                                  TO CURRENT DEB EXTENT FIELD   Y02081
         USING DEBDASD,WKRG10      ESTABLISH ADDRESSABILITY      Y02081
*                                  FOR THE DEB EXTENT DSECT      Y02081
         CLC   IOSSKCC(L'DEBENDCC+L'DEBENDHH),DEBENDCC  COMPARE  Y02081
*                                  CCHH OF NEXT RECORD TO UPPER  Y02081
*                                  BOUNDARY OF THE CURRENT DEB   Y02081
*                                  EXTENT
         BH    FTEOX05             IF NEXT RECORD IS OUTSIDE     Y02081
*                                  THE EXTENT, CONTINUE          Y02081
         B     FTEOX10             GO TO ADJUST CHAN PROG AND    YM1082
*                                  TAKE THE NORMAL RETURN IF     Y02081
*                                  THE NEXT RECORD IS WITHIN     Y02081
*                                  CURRENT EXTENT BOUNDARIES     Y02081
FTEOX05  EQU   *                   GO TO NEXT EXTENT (IF ANY)    Y02081
         SR    WKRG12,WKRG12       CLEAR REG USED TO DETERMINE   A34466
*                                  EXTENT NUMBER                 A34466
         SR    WKRG11,WKRG11       SAVE QTY OF EXTENTS IN DEB    A34466
*        ERROR IN THE EOX APPENDAGE WAS CORRECTED IN              M3979
*        PTM 3545.  THIS PTM REMOVED A LINE OF BAD CODE.          M3979
         IC    WKRG12,IOSSKM       GET LAST M VALUE        M3545,Y02081
         LA    WKRG12,1(WKRG12)    INCREMENT TO NEW VALUE        M3545
         IC    WKRG11,DEBNMEXT     GET TOTAL NUMBER OF EXTENTS   M3545
         CR    WKRG12,WKRG11       IS THERE ANOTHER EXTENT       M3545
         BL    FTEOX08             YES, BRANCH             M3545,Y02081
         MVI   IOSCOD,IOSEXTC      INDICATE EXTENT VIOLATION     Y02081
*                                  AS I/O COMPLETION CODE        Y02081
         LM    WKRG10,WKRG12,FTREGSV  RESTORE WORK REGISTERS     Y02081
         B     4(RETURNRG)         AND TAKE ERROR RETURN         Y02081
FTEOX08  EQU   *                   UPDATE TO NEXT EXTENT         Y02081
         STC   WKRG12,IOSSKM       PUT EXTENT OR -M-       M3545,Y02081
*                                  VALUE IN IOSB           M3545,Y02081
         SLL   WKRG12,4            POINT TO PROPER               Y02081
         LA    WKRG10,DEBBASND-DEBBASIC(WKRG12,DEBREG)     M3545,YM1795
*                                  EXTENT TABLE IN DEB     M3545,Y02081
         MVC   IOSSKBB(DEBENDCC-DEBBINUM),DEBBINUM  MOVE   M3545,Y02081
*                                  BEGINNING LOCATION OF NEXT    Y02081
*                                  EXTENT TO IOSB SEEK FIELD     Y02081
         MVC   IOSFMSK(1),DEBDVMOD UPDATE FILE MASK IN IOSB    @ZA08241
FTEOX10  EQU   *                   SETUP TO RESTART FETCH I/O    YM1082
         MVI   IOSSKR,REC0         SET R VALUE IN IOSB    A34466,Y02081
*                                  TO ZERO                A34466,Y02081
         SPACE
         DROP  WKRG10              DROP DEB EXTENT BASE          A34466
         SPACE
         ICM   WKRG10,ADDR,IOSCSWCA  GET ADDR OF NEXT CCW        Y02081
         S     WKRG10,EIGHT        POINT TO LST CCW EXECUTED     Y02081
         TM    CCWFLG(WKRG10),PCI  IS PCI ON IN THE CCW          YM1082
*                                  RECEIVING FILE PROTECT?       YM1082
         BO    FTEOX12             IF SO, BRANCH                 YM1082
         CLI   CCWSZ(WKRG10),NOP   IS THE NEXT CCW A NOP?        YM1082
         BNE   FTEOX12             IF NOT, BRANCH                YM1082
         TM    FTFLG4,LASTREC      HAS END OF SEGMENT BEEN       YM1082
*                                  FOUND IN DIE?                 YM1082
         BO    FTEOX12             IF SO, BRANCH                 YM1082
         OI    CCWFLG(WKRG10),PCI  IF ALL THE ABOVE TESTS ARE    YM1082
*                                  SATISFIED, TURN ON THE PCI    YM1082
*                                  BIT IN THE CCW                YM1082
***************************************************************  YM1082
* THE ABOVE CODE HANDLES THE CASE WHERE FILE PROTECT OCCURS ON   YM1082
* THE 2ND RD-CNT CCW AFTER THE DIE RETURNS WITHOUT PROCESSING    YM1082
* THE CONTROL RECORD. SETTING ON PCI IN THAT CCW GIVES THE DIE   YM1082
* A SECOND CHANCE TO PROCESS THE RECORD. IF THIS WERE NOT DONE,  YM1082
* POST STATUS NORMAL WOULD ATTEMPT TO RE-START THE CHANNEL       YM1082
* PROGRAM WITH THE SEEK ADDRESS OUT OF PHASE.                    YM1082
***************************************************************  YM1082
FTEOX12  EQU   *                   CONTINUE RESTART SETUP        YM1082
         LRA   WKRG10,0(WKRG10)    MAKE IT A REAL ADDRESS        Y02081
         STCM  WKRG10,ADDR,FTCPSRCH+SCHTICAD  UPDATE TIC IN      Y02081
*                                  SEARCH CHAN PROG              Y02081
         MVC   IOSEEK,IOSEEKA      UPDATE STATIC SEEK ADDR       Y02081
         MVC   FTIOBSK(L'IOSEEKA),IOSEEKA  UPDATE SRCH ARGUMENT  Y02081
         LM    WKRG10,WKRG12,FTREGSV  RESTORE WORK REGISTERS     Y02081
         BR    RETURNRG            AND TAKE THE NORMAL RETURN    Y02081
*                                  TO THE DASD ERP               Y02081
         SPACE
EIGHT    DC    F'8'                USED FOR SUBTRACTION          Y02081
         SPACE
         DROP  IOSREG              DROP IOSB BASE                Y02081
         DROP  IOBREG              DROP FETCH WORKAREA BASE      Y02081
         DROP  DEBREG              DROP DEB BASE                 Y02081
         DROP  CODEREG             DROP APPENDAGE BASE           Y02081
         TITLE 'IEWFETCH...PROGRAM LOADING ROUTINE...VAM PCI APPENDAGE'
*********************************************************************
*
*
*        PCI APPENDAGE FOR VAM DATA SETS
*
*
*        FETCH'S PCI APPENDAGE FOR VAM DATA SETS IS GIVEN CONTROL
*        EACH TIME FETCH'S CHANNEL PROGRAM GENERATES A PCI INTERRUPT.
*        WHEN ENTERED, THIS ROUTINE WILL EXAMINE THE RECORD TYPE IN
*        THE RLD/CTRL BUFFER.  IF THE RECORD IS A RLD, IT WILL BRANCH
*        TO A CLOSED SUB-ROUTINE TO RELOCATE ADCONS.  THE RLD/CTRL
*        BUFFER WILL ALSO BE EXAMINED TO DETERMINE IF CONTROL
*        INFORMATION IS PRESENT.  IF CONTROL INFORMATION IS PRESENT
*        THE CHANNEL PROGRAM WILL BUILD NEXT READ TXT CCW FROM THE
*        CONTROL RECORD INFORMATION.  IF CONTROL INFROMATION ISN'T
*        PRESENT, THE CHANNEL PROGRAM WILL BE SET TO READ THE NEXT
*        RLD/CTRL RECORD.  WHEN ALL PROCESSING IS COMPLETED, AN END
*        OF MODULE INDICATOR IS SET AND A BRANCH IS TAKEN BACK TO IOS.
*
*
         SPACE
         USING *,WKRG15            BASE FOR PCI APPENDAGE        Y02081
         USING WKAREA,IOBREG       BASE FOR WKCORE               Y02081
         SPACE
VPCI01   EQU   *                   START OF VAM PCI APPENDAGE    Y02081
        SPACE
**** WHEN A RECOVERABLE ERROR OCCURS ON THE READ CTL/RLD CCW,
**** INCLUDING FILE PROTECT, THE PCI APPENDAGE IS GIVEN CONTROL
**** BEFORE THE DASD ERP GETS CONTROL AND RETRIES THE READ AND,
**** THEREFORE, BEFORE THE RECORD HAS BEEN READ CORRECTLY. IN
**** SUCH A CASE, THE APPENDAGE SHOULD IGNORE THE SITUATION AND
**** WAIT UNTIL IT IS RE-ENTERED AFTER THE ERP HAS RETRIED AND
**** THE RECORD HAS BEEN READ CORRECTLY.
         SPACE
         USING WICB,WKRG6          SET ADDRESSABILITY FOR WINDOW YM6928
*                                  INTERCEPT CONTROL BLOCK (REG. YM6928
*                                  6 ALWAYS POINTS TO WICB ON    YM6928
*                                  ENTRY TO PCI APPENDAGE)       YM6928
         CLC   WICERDSP,=H'12'     IS THIS A RECOVERABLE ERROR   YM6928
*                                  SITUATION?                    YM6928
         BCR   2,WKRG14            IF THE ERROR CODE IS GREATER  YM6928
*                                  THAN 12, IT IS, AND WE MUST   YM6928
*                                  RETURN TO VIO TO ALLOW THE    YM6928
*                                  ERP TO GET CONTROL            YM6928
         DROP  WKRG6               DROP WICB BASE                YM6928
         SPACE
         STM   WKRG0,WKRG15,0(WKRG13)  SAVE IOS REGISTERS        Y02081
         TM    FTRBUF1,RLDFLG      RECORD TYPE EQU RLD?          Y02081
         BZ    VPCI02              BRANCH IF NO RLDS             Y02081
         STM   WKRG0,WKRG15,FTREGSV  SAVE REGS ACROSS RELOC      Y02081
         LA    WKRG1,FTRBUF1       PASS BUFF ADDR TO RELOC       Y02081
         L     WKRG15,VPCILOC      GET ADDRESS OF RELOC          Y02081
         SPACE
         LR    WKBASE,IOBREG       SET W.A. BASE FOR RELOC       Y02081
         SPACE
         BALR  WKRG14,WKRG15       BRANCH TO RELOC               Y02081
*
*        AFTER RELOCATION IS PERFORMED, VALIDITY CHECKING OF TH RLD
*        ADDRESS AND THE SET UP OF THE NEXT CCW IS PERFORMED HERE.
*
         SPACE
         DROP  IOBREG              CHANGE TO RELOCATE BASE       Y02081
         SPACE
         USING WKAREA,WKBASE       WORKAREA BASE FOR RELOC RTN   Y02081
         LM    WKRG0,WKRG15,FTREGSV  RESTORE REGS AFTER RELOC    Y02081
         DROP  WKBASE              DROP RELOC RTN WORKAREA BASE  Y02081
         SPACE
         USING WKAREA,IOBREG       RESET FETCH W.A. BASE         Y02081
         SPACE
         TM    XFLAG1,RELERR       INVALID RLD ADDRESS?          Y02081
         BO    VPCIIVAL            BRANCH INVALID ADDRESS        Y02081
         TM    FTRBUF1,CTLFLG      DOES CTRL INFO EXIST?         Y02081
         BO    VPCICTRL            YES, GO TO BUILD CCW          Y02081
         TM    FTRBUF1,ENDFLG      LAST RECORD?                  Y02081
         BO    VPCI03              SET END OF MODULE INDICATOR   Y02081
         LA    WKREGA,FTCP1+VAMRDRLD  GET ADDRESS OF RD RLD CCW  Y02081
         STCM  WKREGA,ADDR,FTCP1+VAMNOPAD  SET TIC TO READ RLD   Y02081
         B     VPCIRET             RETURN TO IOS                 Y02081
         SPACE
VPCI03   MVI   FTCP1+VAMNOPTC,NOP  SET NEXT CCW TO NOP           Y02081
         B     VPCIRET             RETURN TO IOS                 Y02081
         SPACE
VPCIIVAL MVI   FTCP1+VAMNOPTC,NOP  SET NOP IN NEXT CCW           Y02081
         OI    XFLAG1,RELERR       SET INVALID ADDR SWITCH       Y02081
         B     VPCIRET             RETURN TO IOS                 Y02081
         SPACE
VPCI02   TM    FTRBUF1,CTLFLG      ANY CONTROL INFO?             Y02081
         BO    VPCICTRL            YES GO TO BUILD CCW           Y02081
         SPACE
*     IT'S NEITHER CONTROL OR RLD, SO GIVE AN ERROR.
         SPACE
         MVI   FTCP1+VAMNOPTC,NOP  SET NOP IN NEXT CCW           Y02081
         OI    XFLAG2,BADREC       SET INVALID REC TYPE          Y02081
         B     VPCIRET             RETURN TO IOS                 Y02081
         SPACE
*********************************************************************
*
*        THIS ROUTINE WILL BUILD THE CHANNEL PROGRAM TO READ THE NEXT
*        TEXT RECORD.  IT WILL ALSO VALIDITY CHECK THE MODULES BOUNDS.
*
*
VPCICTRL EQU   *                   PROCESS CONTROL RECORD        Y02081
         LM    WKRG9,WKRG10,FTRBUF1+CTLCCW  LD NEXT TEXT CCW     Y02081
         A     WKRG9,FTRPTR        RELOC TEXT CCW                Y02081
         STM   WKRG9,WKRG10,FTCP1  STORE CCW FOR NEXT TEXT RD    Y02081
         MVI   FTCP1,RDOPMULT      MAKE IT MULTI-TRACK           YM5962
         SPACE
         LA    WKRG9,0(WKRG9)      CLEAR HIGH ORD BYTE (OP CODE) Y02081
         L     WKRG7,XSOMAD        POINT TO START OF MODULE      Y02081
         CR    WKRG9,WKRG7         IS DDR WITHIN MODULE?         Y02081
         BL    VPCIIVAL            IF NO, RETURN WITH AN         Y02081
*                                  INVALID ADDRESS INDICATOR     Y02081
         L     WKRG7,XEOMAD        POINT TO END OF MODULE        Y02081
         CR    WKRG9,WKRG7         IS ADDR WITHIN MODULE         Y02081
         BNL   VPCIIVAL            IF NOT, RETURN WITH AN        Y02081
*                                  INVALID ADDRESS INDICATOR     Y02081
         LA    WKRG7,FTCP1         GET ADDR OF RD TXT CCW        Y02081
         STCM  WKRG7,ADDR,FTCP1+VAMNOPAD  SET TIC TO RD NEXT TXT Y02081
         SPACE
         TM    FTRBUF1,ENDFLG      LAST RECORD?                  Y02081
         BO    VPCI04              YES,GO SET END SWITCH         Y02081
         B     VPCIRET             NO, RETURN TO IOS             Y02081
VPCI04   NI    FTCP1+VAMFLAGS,ALL-CMCH  TURN OFF CMND CHAIN BIT  Y02081
         SPACE 2
VPCIRET  LM    WKRG0,WKRG15,0(WKRG13)  RESTORE IOS REGISTERS     Y02081
         BR    WKRG14              RETURN TO IOS                 Y02081
         SPACE 2
VPCILOC  DC    A(DIERELOC)         ADDR OF RELOCATE SUBRTN       Y02081
         SPACE 3
         DC    CL8'FETCHPA2'       FETCH PATCH FOR APPG I.D.     Y02081
APGPATCH DC    25F'0'              APPG PATCH AREA               Y02081
        TITLE 'IEWFETCH...PROGRAM LOADING ROUTINE...DSECTS'
*
*              DSECT FOR FETCH WORK CORE
*
*
*              THE FOLLOWING DSECT DESCRIBES THE STRUCTURE OF THE
*              WORK AREA USED BY FETCH.
*
         IHAFETWK  ,               FETCH WORKAREA MAPPING MACRO  Y02081
XTNTSAVE EQU   XHIFIX              TEMPORARY SAVE FOR NO. OF   @ZA10266
*                                  STARTING DEB EXTENT           Y02081
FMSKSAVE EQU   FTCPSRCH+2          TEMPORARY SAVE FOR DEB FILE   Y02081
*                                  MASK TO GO IN IOSB            Y02081
UCBSAVE  EQU   FTCPSRCH+3          TEMPORARY SAVE FOR UCB        Y02081
*                                  ADDRESS TO GO IN IOSB         Y02081
NMEXTSV  EQU   FTCPSRCH+6          TEMPORARY SAVE FOR TOTAL      Y02081
*                                  NUMBER OF DEB EXTENTS         Y02081
FTCPSCH2 EQU   FTCPSRCH+8          START OF VAM CHANNEL PROGRAM  Y02081
*                                  (I.E. 31 CCW)                 Y02081
         EJECT
         ORG   WKNAME
         IHAPDS  DSECT=NO
         AGO   .AROUND
FTWKCORE DS    0CL1150                                           A34466
FTIOB    DS    8F                            IOB
FTIOBSK  DS    2F                            IOB SEEK ADDRESS
********************                                              M0155
XAREA    DS    0F                                                 M0155
XKEY     DC    CL4'FTWA'      FETCH IDENTIFICATION KEY            M0155
XFLAGS   DS    X              TRANSLATE / FIX CONTROL FLAGS       M0155
* ---------- XFLAGS BIT DEFINITIONS                               M0155
NEWIOFLG EQU   X'80'     FRESH I/O REQUEST ISSUED                 M0155
ACTXTFLG EQU   X'40'     READ-TEXT CCW IS ACTIVE IN CURRENT CP    M0155
SYNRDFLG EQU   X'20'     SYNC READ ISSUED (NO PCI)                M0155
USDEBFLG EQU   X'10'     USERS DEB COPIED INTO GOTTON CORE        M0155
TXTREAD  EQU   X'08'          SIO APPENDAGE TXT READ INDICATOR   YM2867
* ----------                                                      M0155
         DS    3X             - RESERVED -                        M0155
********************                                              M0155
FTSKBUF1 DS    3F
FTSKBUF2 DS    3F
FTSKBUF3 DS    3F
FTSKBUF4 DS    3F
FTCPSRCH DS    3D                            SEARCH AND TIC CCWS
FTRBUF1  DS    33D                           RLD BUFFER 1
FTCP1    DS    5D                            CHAN PROG 1
FTRBUF2  DS    33D                           RLD BUFFER 2
FTCP2    DS    5D                            CHAN PROG 2
FTRBUF3  DS    33D                           RLD BUFFER 3
FTCP3    DS    5D                            CHAN PROG 3
FTIOECB  DS    1F
FTECB    DS    1F
FTTBLPTR DS    2F
FTTBL    DS    9F                            BUFFER TABLE
FTREGSV  DS    16F                           REGISTER SAVE AREA
FTTRANS  DS    1F                            ADDR OF TRANSLATION TABLE
FTSCAT   DS    1F                            ADDR OF SCATTER LIST
FTRPTR   DS    1F                            ADDR OF R POINTER
FTPPTR   DS    1F                            ADDR OF P POINTER
FTRBDWRD DS    1F                            BOUNDARY WORD FOR RELOC
FTFLAGS  DS    2F                  FETCH CONTROL FLAGS
FTECBLST DS    2F                  ECB LIST FOR MULTIPLE WAIT
FTLASTBF DS    1F                  PTR TO PRIOR BUFR TBL ENTRY
*
*        EXTENSION TO FETCH WORK AREA
*
XSOMAD   DS    F              LOWER CORE LIMIT FOR LOAD MODULE
XEOMAD   DS    F              UPPER CORE LIMIT FOR LOAD MODULE
XLOFIX   DS    F              LOWER BOUND FOR TEXT AREA FIX REQ
XHIFIX   DS    F              UPPER BOUND FOR TEXT AREA FIX REQ
XNEXTLOC DS    F              LOCATION OF NEXT TEXT BYTE READ
XFIXLIST DS    5D             FIX LIST AREA PASSED TO IOS
XWKCORPG DS    F              REAL ADDRESS OF WORK AREA PAGE
XTRANTAB DS    0XL8           CCW TRANSLATE DATA-
XCCWAD   DS    F                POINTER TO CCW REQ TRANSLATION
XTXTAD   DS    F                VIRTUAL ADDRESS IN THE CCW
XIDALP1  DS    AL4(XALAREA1)  POINTER TO IDAL BUILD AREA
XIDALP2  DS    AL4(XALAREA2)  POINTER TO ALTERNATE IDAL AREA
XALAREA1 DS    10F            IDAL AREA
XALAREA2 DS    10F            IDAL AREA
XGMLIST  DS    4F             GETMAIN LIST AREA
XORGDCB  DS    1F             ORIGINAL LOAD DCB ADDRESS
XDEBLEN  DS    1F             SIZE OF MS OBTAINED FOR DEB(INC SP)
*----PSEUDO DCB DEFINITION (USED WITH THE COPIED DEB).
         ORG   *-DCBDEBAD     ORG BACK OVER UNUSED FIELDS
XDCBCOPY EQU   *              START OF DCB
         ORG   *+DCBDEBAD     RESTORE LOC COUNTER
XDCBDEBA DS    1F             PSEUDO 'DCBDEBAD' FIELD
*----END OF PSEUDO DCB DEFINITION.
         SPACE
*----------- MISC. EQUATES
IDALNTRY EQU   4              SIZE OF EACH IDAL ENTRY
FTWORKSZ EQU   *-FTWKCORE     SIZE OF ENTIRE WORK AREA
FIXLOENT EQU   0              OFFSET TO LOW ENTRY PORTION
FIXHIENT EQU   4              OFFSET TO HIGH ENTRY PORTION
FIXENTSZ EQU   8              SIZE OF FIX-LIST ENTRY
ECBERRIN EQU   FTFXECB+3      INDICATED PGFIX IN PROCESS       @ZA07064
.AROUND  ANOP
         EJECT
*
*     COMBINED EXTENT LIST / NOTE LIST CONSTRUCTED BY FETCH
*     WHEN INVOKED BY CONTENTS SUPERVISOR. THE NOTE LIST
*     PORTION EXISTS ONLY FOR MODULES IN OVERLAY STRUCTURE.
*
EXLNL    DSECT
EXLIST   DS    0F        START OF EXTENT LIST
EXLLNTH  DS    F              LENGTH OF EXTENT (PLUS NOTE) LIST
EXLRELFC DS    F              NUMBER OF CORE BLKS FOR MODULE
EXLCORSZ DS    0F             SIZE OF CORE BLK ALLOC TO MODULE
EXLSZIND DS    XL1              - FLAG TO IND A SIZE FIELD
EXLSZBLK DS    FL3              - SIZE IN BYTES
EXLCORAD DS    0F             ADDRESS OF CORE BLOCK ALLOCATED
EXLADIND DS    XL1              - FLAG TO IND AN ADDRESS FIELD
EXLADBLK DS    AL3              - ADDRESS OF FIRST BYTE
*
SZIND    EQU   X'80'          SIZE INDICATOR
ADIND    EQU   X'00'          ADDR INDICATOR
EXLSIZE  EQU   *-EXLIST       LENGTH OF XTENT LIST PORTION
*
*        NOTE LIST FOR OVERLAY MODULES.
*
NOTELIST DS    0F        BEGINNING OF NOTELIST
NLRELFAC DS    F         RELOCATION FACTOR FOR THE MODULE
*                        (ALSO, THE ADDRESSS OF THE SEGTAB)
NLCORSIZ DS    XL3       MS CORE REQUIREMENT OF THE MODULE
NLCONCAT DS    XL1       CONCATENATION NUMBER OF MODULE DATA SET
NLENTRYS DS    0F        NOTELIST ENTRIES(ONE/SEGMENT)...
NLSEGTTR DS    XL3            TTR FOR READING THE SEGMENT
NLZERO   DC    X'00'          ZERO
*--------
NLENTSZ  EQU   2         ENTRY SIZE (FOR SHIFT-MULTIPLY)
NLPFXSZ EQU   8          LENGTH OF NL PREFIX PORTION
         PRINT NOGEN
         EJECT
         IECDERWA
         EJECT
         IEZDEB
DEBDASD  DSECT                                                   YM1172
EXTVALUE EQU   *                   SIZE OF A DASD EXTENT         YM1172
         EJECT
         IHACDE
         EJECT
UCBCB    DSECT
         IEFUCBOB PREFIX=YES LIST=YES
         EJECT
         IKJTCB
         EJECT
         IECDIOSB
SRBSTART EQU   *                   START OF FETCH SRB            Y02081
IOSBSIZE EQU   IOSEND-IOSB         SIZE OF IOSB                  Y02081
         EJECT
         IHASRB
         SPACE 2
GLOBREQ  EQU   IOSBSIZE+SRBSIZE    TOTAL FETCH REQUIREMENT       Y02081
*                                  FOR FIXED GLOBAL STORAGE      Y02081
SQASP    EQU   245                 SUBPOOL USED FOR GLOBREQ      Y02081
PCIFLG   EQU   X'80'               FLAG IN IOSTSB SHOWING        Y02081
*                                  ENTRY TO DIE FOR A PCI        Y02081
         EJECT
         IHAPSA
         EJECT
         IHAASCB
         EJECT
         IHAASXB
         EJECT
         CVT   DSECT=YES
         EJECT
         IECDIOCM
         EJECT
         IECDIPIB
         EJECT
         IDDWICB
         EJECT
         IHASDWA
IOSBSDWA EQU   IOSBSIZE+SDWALEN    LENGTH OF IOSB + SDWA         Y02081
         END
