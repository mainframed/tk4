         TITLE 'ISTDCC60 - CONTROL LAYER INPUT BUFFER MOVE             *
                        '
ISTDCC60 CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'ISTDCC60  76.110'                                 0001
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                     0001
         BALR  @12,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,@12                                         0001
*   CRRPTR=ADDR(CRACRR->CRRSPACE);  /* GET @ SECOND PORTION CRR      */
         L     @15,RPHCRR(,PARAM)                                  0342
         L     CRRPTR,CRACRR(,@15)                                 0342
         LA    CRRPTR,CRRSPACE(,CRRPTR)                            0342
*   RESPECIFY                                                      0343
*     ISTDCCRR;                     /* DROP COVER FOR FIRST PART OF
*                                      CRR                           */
*   RESPECIFY                                                      0344
*     CRRSAREA BASED(CRRPTR);       /* COVER SECOND PORTION OF CRR   */
*   CRRSAVE(5:8)=SAVEPTR;           /* SAVE CALLER'S SAVEAREA ADDRESS
*                                      IN BACKWARD PTR OF MY SAVEAREA*/
         ST    SAVEPTR,CRRSAVE+4(,CRRPTR)                          0345
*   SAVEPTR=ADDR(CRRSAVE);          /* GET ADDRESS OF MY SAVE- AREA
*                                      INTO REG 13                   */
         LR    SAVEPTR,CRRPTR                                      0346
*   CRRSAVE1(9:12)=SAVEPTR;         /* STORE MY SAVEAREA @ INTO    0347
*                                      CALLER'S FORWARD PTR          */
         ST    SAVEPTR,CRRSAVE1+8(,CRRPTR)                         0347
*   FDBPTR=ADDR(FSBFDB);            /* GET FSB FDB @ INTO REG        */
         L     FDBPTR,CRRFSB(,CRRPTR)                              0348
         LA    FDBPTR,FSBFDB(,FDBPTR)                              0348
*   CRRM60=ON;                      /* SET AUDIT TRAIL SWITCH 1,   0349
*                                      DON'T CLEAR FIRST             */
         OI    CRRM60(CRRPTR),B'10000000'                          0349
*   CRRC60=ON;                      /* SET AUDIT TRAIL SWITCH 2      */
         OI    CRRC60(CRRPTR),B'10000000'                          0350
*                                                                  0351
*/********************************************************************/
*/* 1. FIND FDB TO BE PROCESSED                                      */
*/* 2. INITIALIZE BUFFER AREA AND LENGTH REGS AND LDO REG            */
*/* 3. CALL PROCESSA - THE NEXT PHASE                                */
*/*    ERROR CONDITIONS -                                            */
*/*          -- NO FDB TO BE SERVICED, SET ZERO RETURN CODE AND      */
*/*             RETURN                                               */
*/*          -- BUFFER PARAMETER LENGTH LESS THAN OR EQUAL TO        */
*/*             ZERO - SET RETURN CODE FOR ERROR RETURN, AND CRR     */
*/*             ERROR BIT FOR INVALID LENGTH                         */
*/********************************************************************/
*                                                                  0351
*   CRRBFLG1=ON;                    /* TURN SWITCH ON                */
         OI    CRRBFLG1(CRRPTR),B'10000000'                        0351
*FINDFDB:                                                          0352
*   IF FDBDATCT=0                   /* IF FDB ALREADY PROCESSED      */
*     THEN                                                         0352
FINDFDB  SLR   @15,@15                                             0352
         CH    @15,FDBDATCT(,FDBPTR)                               0352
         BNE   @RF00352                                            0352
*     DO;                           /* THEN                          */
*       FDBPTR=FDBFDBA;             /* GET CHAIN PTR TO NEXT FDB     */
         L     FDBPTR,FDBFDBA(,FDBPTR)                             0354
*       IF FDBPTR=0×FDBPTR=GATEBIT  /* IF NO MORE FDBS               */
*         THEN                                                     0355
         CR    FDBPTR,@15                                          0355
         BE    @RT00355                                            0355
         CL    FDBPTR,GATEBIT                                      0355
         BNE   @RF00355                                            0355
@RT00355 DS    0H                                                  0356
*         CRRBFLG1=OFF;             /* THEN TURN OFF SWITCH          */
         NI    CRRBFLG1(CRRPTR),B'01111111'                        0356
*       ELSE                                                       0357
*         ;                         /* IF MORE FDBS,NULL ELSE        */
@RF00355 DS    0H                                                  0358
*     END;                          /* END DO FOR FDB ALREADY      0358
*                                      PROCESSED                     */
*   ELSE                                                           0359
*     CRRBFLG1=OFF;                 /* IF FDB NOT YET PROCESSED TURN
*                                      OFF SWITCH                    */
         B     @RC00352                                            0359
@RF00352 NI    CRRBFLG1(CRRPTR),B'01111111'                        0359
*   IF CRRBFLG1=ON                  /* IF SWITCH IS ON THEN          */
*     THEN                                                         0360
@RC00352 TM    CRRBFLG1(CRRPTR),B'10000000'                        0360
         BO    @RT00360                                            0360
*     GOTO FINDFDB;                 /* GO FIND FDB AGAIN GOTO USED IN
*                                      LIEU OF DO UNTIL              */
*   ELSE                                                           0362
*     ;                             /* NULL ELSE IF SWITCH OFF       */
*   IF FDBPTR=0×FDBPTR=GATEBIT      /* IF NO MORE FDBS               */
*     THEN                                                         0363
         LTR   FDBPTR,FDBPTR                                       0363
         BZ    @RT00363                                            0363
         CL    FDBPTR,GATEBIT                                      0363
         BNE   @RF00363                                            0363
@RT00363 DS    0H                                                  0364
*     CRRBRTCD=CRRBRSUC;            /* THEN SET GOOD RETURN CODE     */
         MVI   CRRBRTCD(CRRPTR),X'00'                              0364
*   ELSE                                                           0365
*     DO;                           /* IF MORE FDBS                  */
         B     @RC00363                                            0365
@RF00363 DS    0H                                                  0366
*       BCTR=CRRBLEN;               /* GET PARAM LIST LENGTH INTO  0366
*                                      BUFFER LENGTH REG             */
         LH    BCTR,CRRBLEN(,CRRPTR)                               0366
*       IF BCTR>0                   /* IF PARAM LENGTH VALID         */
*         THEN                      /* THEN                          */
         LTR   BCTR,BCTR                                           0367
         BNP   @RF00367                                            0367
*         CALL PROCESSA;            /* CALL NEXT PHASE               */
         BAL   @14,PROCESSA                                        0368
*       ELSE                                                       0369
*         DO;                       /* IF PARM LENGTH INVALID        */
         B     @RC00367                                            0369
@RF00367 DS    0H                                                  0370
*           CRRRTNCD=CRRLOGIC;      /* SET MAJOR RC=LOGIC ERROR IN 0370
*                                      CRR                           */
         MVI   CRRRTNCD(CRRPTR),X'08'                              0370
*           CRRFDB2=CRRIDA;         /* SET MINOR RC=INVALID LENGTH IN
*                                      CRR                           */
         MVI   CRRFDB2(CRRPTR),X'17'                               0371
*           CRRBRTCD=CRRBEROR;      /* SET ERROR RETURN CODE LOGIC 0372
*                                      ERROR                         */
         MVI   CRRBRTCD(CRRPTR),X'08'                              0372
*         END;                      /* END DO FOR INVALID PARM LENGTH*/
*     END;                          /* END DO FOR MORE FDBS          */
@RC00367 DS    0H                                                  0375
*   SAVEPTR=CRRSAVE(5:8);           /* GET @ CALLER'S SAVEAREA       */
@RC00363 L     SAVEPTR,CRRSAVE+4(,CRRPTR)                          0375
*   RETURN;                         /* RETURN TO CALLER              */
@EL00001 DS    0H                                                  0376
@EF00001 DS    0H                                                  0376
@ER00001 LM    @14,@12,12(@13)                                     0376
         BR    @14                                                 0376
*   GEN NOSETS NOREFS(EJECT);                                      0377
         EJECT
*                                                                  0378
*/********************************************************************/
*/*                                                                  */
*/* ROUTINE NAME : PROCESSA - CHECK DATA AREA                        */
*/*                                                                  */
*/* FUNCTION : THIS ROUTINE DOES THE FOLLOWING:                      */
*/*             - VALIDITY CHECK BUFFER AREA ADDRESS & LENGTH        */
*/*             - SET FDBK DATA & LENGTH REGS & LENGTH MOVED REG     */
*/*             - CALL PROCESSB TO MOVE DATA FROM FDB TO DATA AREA   */
*/*               UNTIL EITHER OR BOTH ARE EXHAUSTED.                */
*/*             - CALL PROCESSC TO FIND NEXT LDO & DATA AREA TO BE   */
*/*               MOVED INTO, IF ONE EXIST.                          */
*/*             - REPEAT THIS PROCESS AS MANY TIMES AS NECESSARY     */
*/*                                                                  */
*/* INPUT : FDBPTR (REG 5) - PTR TO FBD TO BE PROCESSED              */
*/*         BCTR (REG 7) - PTR TO LENGTH OF DATA AREA                */
*/*         CRRPTR (REG 11) - PTR TO THE CRR                         */
*/*         SAVEPTR (REG 13) - PTR TO THE SAVE AREA IN THE CRR       */
*/*                                                                  */
*/* OUTPUT : SEE TABLE                                               */
*/*                                                                  */
*/* SUBROUTINES CALLED : PROCESSB , PROCESSC , VALIDATE              */
*/*                                                                  */
*/* MACROS USED : NONE                                               */
*/*                                                                  */
*/********************************************************************/
*/* TABLE FOR PROCESSA                                               */
*/*------------------------------------------------------------------*/
*/* CB       FIELD      R/S    MEANING                               */
*/*------------------------------------------------------------------*/
*/* CRR      CRRRTN7    R/S    USED AS A TEMPORARY SAVEAREA FOR      */
*/*                            RETURN ADDRESS IN REGISTER RETPTR     */
*/*          CRRBFLG1   R/S    SEARCH FOR MORE FDBS FLAG, IF ON      */
*/*                            SEARCH FOR ANOTHER FDB TO TRANSFER    */
*/*                            DATA FROM, IF OFF,                    */
*/*                            DON'T, SET IN THIS ROUTINE AND IN     */
*/*                            PROCESSB                              */
*/*          CRRBTLEN   R/S    PARAMETER LIST CUMULATIVE TOTAL OF    */
*/*                            DATA BYTES MOVED, IS NOT INITIALIZED  */
*/*                            IN THIS ENTIRE MODULE, SET BY USER OR */
*/*                            UPDATED BY PROCESSA, SET TO ITS       */
*/*                            CURRENT VALUE + REGISTER RCTR (LENGTH */
*/*                            MOVED REGISTER)                       */
*/*          CRRBRTCD   R/S    PARAMETER LIST RETURN CODE, SET TO    */
*/*                            CRRBEROR (ERROR RETURN CODE) IF BUFFER*/
*/*                            AREA ADDRESS OR LENGTH  REGISTERS ARE */
*/*                            INVALID, TESTED AGAINST CRRBMDAT TO   */
*/*                            DETERMINE IF MORE DATA SHOULD BE      */
*/*                            MOVED FROM FDB TO USER AREA (SET IN   */
*/*                            THIS CASE BY PROCESSB)                */
*/*          CRRRTNCD    S     CRR MAJOR RETURN CODE, SET TO CRRLOGIC*/
*/*                            (LOGIC ERROR), IF BUFFER AREA         */
*/*                            OR LENGTH REGISTERS ARE INVALID       */
*/*          CRRFDB2     S     CRR MINOR RETURN CODE, SET TO         */
*/*                            CRRIDA(INVALID AREA ADDRESS OR LENGTH)*/
*/*                            IF BUFFER AREA ADDRESS OR LENGTH REGS */
*/*                            ARE INVALID                           */
*/*                                                                  */
*/* FDB      FDBDATAA    R     FDB DATA ADDRESS, USED TO SET (FPTR)  */
*/*                            FDB DATA ADDRESS REGISTER             */
*/*          FDBDATCT    R     FDB DATA COUNT, USED TO SET (FCTR)    */
*/*                            FDB DATA LENGTH REGISTER              */
*/*                                                                  */
*/* REGS     BASE        R     IMPLICIT MODULE BASE ADDRESS, SET IN  */
*/*                            MAIN PROCEDURE                        */
*/*          CRRPTR      R     IMPLICIT BASE FOR CRR, SET IN MAIN    */
*/*                            PROCEDURE                             */
*/*          FDBPTR      R     IMPLICIT BASE FOR FDB, SET EITHER IN  */
*/*                            MAIN PROCEDURE OR PROCESSB            */
*/*          BCTR        R     USER BUFFER LENGTH REGISTER, USED     */
*/*                            AS THE LENGTH PARAMETER TO THE        */
*/*                            ?VALCHECK MACRO, COULD BE SET BY ANY  */
*/*                            OF THE PROCS INCLUDING THIS ONE,      */
*/*                            DEPENDING ON THE CIRCUMSTANCES        */
*/*          ENTER       R     RETURN CODE REGISTER FROM ?VALCHECK,  */
*/*                            IF NON-ZERO, MEANS THAT EITHER THE    */
*/*                            BUFFER AREA ADDRESS OR LENGTH REGS    */
*/*                            ARE INVALID                           */
*/*          BPTR       R/S    USER BUFFER AREA ADDRESS REGISTER,    */
*/*                            USED AS INPUT TO ?VALCHECK MACRO AS   */
*/*                            THE BEGINNING ADDRESS TO BE VALI-     */
*/*                            DATED, SET BY ANY                     */
*/*                            OF THE PROCS INCLUDING THIS ONE,      */
*/*                            DEPENDING ON THE CIRCUMSTANCES        */
*/*          RETPTR     R/S    RETURN ADDRESS REGISTER FOR PROC,     */
*/*                            SAVED AND RESTORED FROM CRRRTN7       */
*/*                            WITHIN PROCESSA                       */
*/*          PARAM       S     IMPLICIT BASE FOR THE RPH, USED AS    */
*/*                            INPUT TO ?VALCHECK, SET EXTERNALLY TO */
*/*                            ISTDCC60                              */
*/*          RCTR        S     TOTAL LENGTH MOVED REGISTER, SET TO   */
*/*                            ZERO TO INITIALIZE IT, AND USED TO    */
*/*                            UPDATE CRRBTLEN                       */
*/*          FPTR        S     FDB DATA ADDRESS REGISTER, SET TO     */
*/*                            THE FDB DATA ADDRESS (FDBDATAA)       */
*/*          FCTR        S     FDB DATA LENGTH REGISTER, SET TO      */
*/*                            THE FDB DATA LENGTH (FDBDATCT)        */
*/*                                                                  */
*/* PROCS.   PROCESSB    -     CALLED TO ACTUALLY MOVE THE DATA FROM */
*/*                            THE FDB TO THE USER BUFFER AREA, MAY  */
*/*                            BE CALLED SEVERAL TIMES AS LONG AS    */
*/*                            THERE IS BOTH FDB DATA TO MOVE AND    */
*/*                            USER BUFFER AREA TO MOVE IT INTO, AND */
*/*                            PROVIDED NO ERROR CONDITIONS HAVE     */
*/*                            ARISEN                                */
*/*          PROCESSC    -     CALLED TO FIND THE NEXT VALID LDO AND */
*/*                            BUFFER AREA ADDRESS IF ANY EXISTS,    */
*/*                            MAY BE CALLED SEVERAL TIMES AS LONG   */
*/*                            AS THERE IS BOTH FDB DATA TO MOVE     */
*/*                            AND USER BUFFER AREA TO MOVE IT INTO  */
*/*                            AND PROVIDED NO ERROR CONDITIONS      */
*/*                            HAVE ARISEN                           */
*/*------------------------------------------------------------------*/
*                                                                  0378
*PROCESSA:                                                         0378
*   PROC OPTIONS(NOSAVEAREA,NOSAVE);                               0378
         B     @PB00002                                            0378
PROCESSA DS    0H                                                  0379
*   RESPECIFY                                                      0379
*    (RETPTR) RESTRICTED;           /* RESTRICT RETURN @ REG         */
*   CRRRTN7=RETPTR;                 /* SAVE RETURN ADDRESS           */
         ST    RETPTR,CRRRTN7(,CRRPTR)                             0380
*   RESPECIFY                                                      0381
*    (RETPTR) UNRESTRICTED;         /* UNRESTRICT RETURN @ REG       */
*   RFY                                                            0382
*    (ENTER) RSTD;                                                 0382
*                                                                  0382
*   /*****************************************************************/
*   /*                                                               */
*   /* SET UP TO CALL THE VALIDATE ROUTINE TO CHECK THE DATA AREA    */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0383
*ADLNCHK:                                                          0383
*   ;                                                              0383
ADLNCHK  DS    0H                                                  0384
*   CRRVALCK=BCTR;                  /* GET LENGTH IN CRRVALCK        */
         ST    BCTR,CRRVALCK(,CRRPTR)                              0384
*   VALPTR=CRRBARAD;                /* GET AREA ADDR                 */
         L     VALPTR,CRRBARAD(,CRRPTR)                            0385
*   ENTER=0;                        /* ZERO REG 15           @VC40441*/
         SLR   ENTER,ENTER                                         0386
*   IF RPLAUTUS=OFF THEN            /* AUTHORIZED USER       @VC40441
*                                                            @ZA08948*/
         L     @14,CRRARPL(,CRRPTR)                                0387
         TM    RPLAUTUS+16(@14),B'00100000'                        0387
         BNZ   @RF00387                                            0387
*     CALL VALIDATE;                /* GO DO THE VALCHEK             */
*                                                                  0388
         BAL   @14,VALIDATE                                        0388
*   /*****************************************************************/
*   /*                                                               */
*   /* IF THE AREA IS VALID, SET UP REGS AND GO MOVE THE DATA        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0389
*   IF ENTER=0                      /* IF AREA @ AND LENGTH VAL      */
*     THEN                                                         0389
@RF00387 SLR   @14,@14                                             0389
         CR    ENTER,@14                                           0389
         BNE   @RF00389                                            0389
*     DO;                           /* THEN                          */
*       RCTR=0;                     /* ZERO LENGTH MOVED REG         */
         LR    RCTR,@14                                            0391
*MOVEDATA:                                                         0392
*       BPTR=CRRBARAD;              /* GET PARAM LIST AREA @ INTO  0392
*                                      BUFFER AREA REG               */
MOVEDATA L     BPTR,CRRBARAD(,CRRPTR)                              0392
*       FPTR=FDBDATAA;              /* GET FDB DATA @ INTO FDB       */
         L     FPTR,FDBDATAA(,FDBPTR)                              0393
*       FCTR=FDBDATCT;              /* GET FDB DATA LEN INTO FDB   0394
*                                      LENGTH REG                    */
         LH    FCTR,FDBDATCT(,FDBPTR)                              0394
*       CRRBFLG1=OFF;               /* TURN SWITCH OFF               */
         NI    CRRBFLG1(CRRPTR),B'01111111'                        0395
*       CALL PROCESSB;              /* GO MOVE DATA                  */
         BAL   @14,PROCESSB                                        0396
*       IF CRRBFLG1=ON              /* IF SWITCH ON, MORE DATA TO  0397
*                                      MOVE                          */
*         THEN                                                     0397
         TM    CRRBFLG1(CRRPTR),B'10000000'                        0397
         BO    @RT00397                                            0397
*         GOTO MOVEDATA;            /* LOOP BACK GOTO USED IN LIEU OF
*                                      DO UNTIL                      */
*                                                                  0398
*       /*************************************************************/
*       /*                                                           */
*       /* NO MORE DATA TO MOVE, CHECK FOR LDO DATA AREAS            */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0399
*       ELSE                                                       0399
*         DO;                       /* IF SWITCH OFF, NO MORE DATA TO
*                                      MOVE NOW                      */
*           CALL PROCESSC;          /* SEE IF MORE LDOS AND DATA AREA
*                                      TO FILL                       */
         BAL   @14,PROCESSC                                        0400
*           CRRBTLEN=CRRBTLEN+RCTR; /* ADD LENGTH MOVED TO PARM LIST
*                                      CUMULATIVE TOTAL              */
         LR    @14,RCTR                                            0401
         AL    @14,CRRBTLEN(,CRRPTR)                               0401
         ST    @14,CRRBTLEN(,CRRPTR)                               0401
*         END;                      /* END DO FOR SWITCH OFF         */
*     END;                          /* END DO FOR VALID @ AND LENGTH */
*                                                                  0403
*   /*****************************************************************/
*   /*                                                               */
*   /* THE DATA AREA WAS INVALID, SET THE AREA CODES                 */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0404
*   ELSE                                                           0404
*     DO;                           /* IF @ AND LENGTH INVALID       */
         B     @RC00389                                            0404
@RF00389 DS    0H                                                  0405
*       CRRBRTCD=CRRBEROR;          /* SET ERROR RETURN CODE         */
         MVI   CRRBRTCD(CRRPTR),X'08'                              0405
*       CRRRTNCD=CRRLOGIC;          /* SET MAJOR RC=LOGIC ERROR IN 0406
*                                      CRR                           */
         MVI   CRRRTNCD(CRRPTR),X'08'                              0406
*       CRRFDB2=CRRIDA;             /* SET MINOR RC=INVALID @ OR   0407
*                                      LENGTH IN CRR                 */
         MVI   CRRFDB2(CRRPTR),X'17'                               0407
*       CRRBFLG1=OFF;               /* TURN OFF SWITCH               */
         NI    CRRBFLG1(CRRPTR),B'01111111'                        0408
*     END;                          /* END DO FOR INVALID AREA @ AND
*                                      LENGTH                        */
*   RESPECIFY                                                      0410
*    (ENTER) UNRESTRICTED;          /* REG CAN NOW BE USED           */
@RC00389 DS    0H                                                  0411
*   IF CRRBFLG1=ON&CRRBRTCD=CRRBMDAT/* IF MORE DATA AREA FOUND FROM
*                                      LDO PROCESSING, AND MORE    0411
*                                      FEEDBACK DATA TO MOVE INTO IT,
*                                      LOOP BACK                     */
*     THEN                                                         0411
         TM    CRRBFLG1(CRRPTR),B'10000000'                        0411
         BNO   @RF00411                                            0411
         CLI   CRRBRTCD(CRRPTR),4                                  0411
         BE    @RT00411                                            0411
*     GOTO ADLNCHK;                 /* TO DO IT. GOTO USED IN LIEU OF
*                                      DO UNTIL                      */
*   ELSE                                                           0413
*     ;                             /* NULL ELSE IF 2 CONDITIONS NOT
*                                      TRUE                          */
@RF00411 DS    0H                                                  0414
*   RESPECIFY                                                      0414
*    (RETPTR) RESTRICTED;           /* RESTRICT RETURN @ REG         */
*   RETPTR=CRRRTN7;                 /* RESTORE RETURN POINTER        */
         L     RETPTR,CRRRTN7(,CRRPTR)                             0415
*   RESPECIFY                                                      0416
*    (RETPTR) UNRESTRICTED;         /* UNRESTRICT RETURN @ REG       */
*   RETURN;                         /* RETURN TO CALLER              */
@EL00002 DS    0H                                                  0417
@EF00002 DS    0H                                                  0417
@ER00002 BR    @14                                                 0417
*   GEN NOSETS NOREFS(EJECT);                                      0418
         EJECT
*                                                                  0419
*/********************************************************************/
*/*                                                                  */
*/* ROUTINE NAME : PROCESSB - MOVE THE DATA                          */
*/*                                                                  */
*/* FUNCTION : THIS ROUTINE DOES THE FOLLOWING:                      */
*/*             - MOVE FDB DATA TO USER DATA AREA                    */
*/*             - LOCATE MORE FDB(S) IF ANY EXEIST                   */
*/*             - IF FDB DATA >= BUFER DATA AREA, SET GOOD RETURN    */
*/*             - IF FDB DATA < BUF DATA AREA, SET MORE DATA REMAIN  */
*/*             - UPDATE PARAMETER LIST OR FDB , IF NECESSARY        */
*/*                                                                  */
*/* INPUT : SAME AS INPUT TO PROCESSA                                */
*/*         BPTR (REG 6) - ADDRESS OF DATA AREA                      */
*/*         FPTR (REG 8) - PTR TO FDB DATA AREA                      */
*/*         FCTR (REG 9) - FDB DATA LENGTH                           */
*/*                                                                  */
*/* OUTPUT : SEE TABLE FOR PROCESSB                                  */
*/*                                                                  */
*/* SUBROUTINES CALLED : NONE                                        */
*/*                                                                  */
*/* MACROS USED : NONE                                               */
*/*                                                                  */
*/********************************************************************/
*/* TABLE FOR PROCESSB                                               */
*/*------------------------------------------------------------------*/
*/* CB       FIELD      R/S    MEANING                               */
*/*------------------------------------------------------------------*/
*/* CRR      CRRRTN8    R/S    USED AS A TEMPORARY SAVEAREA FOR      */
*/*                            RETURN ADDRESS IN REGISTER RETPTR     */
*/*          CRRSAVE     S     THE FOLLOWING FOUR REGS ARE SAVED     */
*/*                            BEFORE AND RESTORED AFTER DATA MOVES  */
*/*                            FROM FDB TO USER BUFFER AREA IN THIS  */
*/*                            ISTDCC60 SAVEAREA: BPTR,BCTR,FPTR,    */
*/*                            FCTR                                  */
*/*          CRRBLEN     S     PARAMETER LIST LENGTH LEFT IN THE     */
*/*                            USER BUFFER AREA AFTER MOVES OF DATA, */
*/*                            IS SET TO ZERO IF UPON ENTRY TO THIS  */
*/*                            PROC EITHER FCTR>BCTR OR FCTR=BCTR, IS*/
*/*                            SET TO BCTR IF UPON ENTRY TO THIS     */
*/*                            PROC, FCTR<BCTR                       */
*/*          CRRBARAD    S     PARAMETER LIST BUFFER AREA ADDRESS,   */
*/*                            SET TO BPTR REGISTER, IF UPON ENTRY   */
*/*                            TO THIS PROC FCTR<BCTR                */
*/*          CRRBRTCD    S     PARAMETER LIST RETURN CODE, SET TO    */
*/*                            CRRBRSUC (SUCCESSFUL DATA MOVE) IF,   */
*/*                            UPON ENTRY TO THIS PROC,              */
*/*                            EITHER FCTR=BCTR AND THIS IS THE LAST */
*/*                            FDB (FDBFDBA=0) OR FCTR<BCTR AND THIS */
*/*                            IS THE LAST FDB, OR SET TO CRRBMDAT   */
*/*                            (MORE DATA LEFT IN FDB(S) TO BE MOVED)*/
*/*                            IF, UPON ENTRY TO THIS PROC,          */
*/*                            EITHER FCTR=BCTR AND THERE ARE MORE   */
*/*                            FDBS TO PROCESS, OR FCTR>BCTR         */
*/*          CRRBFLG1    S     PARAMETER LIST SEARCH FOR MORE FDBS   */
*/*                            FLAG, SET TO ON IF UPON ENTRY TO THIS */
*/*                            PROC, FCTR<BCTR AND THERE ARE MORE    */
*/*                            FDBS TO BE PROCESSED,                 */
*/*                            TESTED IN PROCESSA                    */
*/* FDB      FDBFDBA     R     FDB CHAIN POINTER TO NEXT FDB, USED   */
*/*                            CHECKED AGAINST ZERO OR ZERO PLUS     */
*/*                            GATEBIT                               */
*/*                            FCTR<BCTR AND FCTR=BCTR TO SEE IF     */
*/*                            THERE ARE ANY MORE FDBS, ALSO USED TO */
*/*                            SET REGISTER FDBPTR IF, AFTER THE     */
*/*                            ABOVE CHECKS ARE MADE, IT IS FOUND    */
*/*                            THAT THERE ARE MORE FDBS (FDBFDBA     */
*/*                            NOT ZERO OR NOT ZERO PLUS GATEBIT)    */
*/*          FDBDATCT    S     FDB DATA COUNT, SET TO FCTR IF, UPON  */
*/*                            ENTRY TO THIS PROC, FCTR>BCTR, OR     */
*/*                            SET TO ZERO (MARKED ALREADY PROCESSED)*/
*/*                            IF UPON ENTRY TO THIS PROC, EITHER    */
*/*                            FCTR<BCTR OR FCTR=BCTR                */
*/*          FDBDATAA    S     FDB DATA ADDRESS, SET TO FPTR IF,     */
*/*                            UPON ENTRY TO THIS PROC, FCTR>BCTR    */
*/*                                                                  */
*/* REGS     BASE        R     IMPLICIT MODULE BASE ADDRESS, SET IN  */
*/*                            MAIN PROCEDURE                        */
*/*          CRRPTR      R     IMPLICIT BASE FOR CRR, SET IN MAIN    */
*/*                            PROCEDURE                             */
*/*          RETPTR     R/S    RETURN ADDRESS REGISTER, SAVED AND    */
*/*                            RESTORED WITHIN THIS PROC FROM        */
*/*                            CRRRTN8                               */
*/*          BPTR       R/S    USER BUFFER AREA ADDRESS REGISTER,    */
*/*                            USED IN DATA MOVE FROM FDB TO USER    */
*/*                            AREA, SAVED AND RESTORED FROM CRRSAVE,*/
*/*                            UPDATED IF UPON ENTRY TO PROC,        */
*/*                            FCTR<BCTR, TO ITSELF PLUS FCTR, USED  */
*/*                            TO SET CRRBARAD IN PARAMETER LIST, MAY*/
*/*                            HAVE BEEN SET BY ANY OF THE PROCS     */
*/*                            INCLUDING THIS ONE, PRIOR TO ENTRY    */
*/*          BCTR       R/S    USER BUFFER LENGTH REGISTER, USED     */
*/*                            TO DETERMINE WHICH OF THREE PATHS TO  */
*/*                            TAKE BY COMPARISON TO FCTR, USED IN   */
*/*                            DATA MOVE FROM FDB TO USER AREA FOR   */
*/*                            FCTR>=BCTR AS DATA LENGTH TO MOVE,    */
*/*                            SAVED AND RESTORED FROM CRRSAVE,      */
*/*                            IF, UPON ENTRY, FCTR>=BCTR, USED TO   */
*/*                            UPDATE FPTR, RCTR AND FCTR, IF UPON   */
*/*                            ENTRY, FCTR<BCTR, IS SET TO ITSELF    */
*/*                            MINUS FCTR, AND IS USED TO SET CRRBLEN*/
*/*                            IN PARAMETER LIST, MAY HAVE BEEN SET  */
*/*                            BY ANY OF THE PROCS INCLUDING THIS    */
*/*                            ONE PRIOR TO ENTRY                    */
*/*          FPTR       R/S    FDB DATA ADDRESS REGISTER, USED IN    */
*/*                            DATA MOVE FROM FDB TO USER AREA, SAVED*/
*/*                            AND RESTORED FROM CRRSAVE, IF UPON    */
*/*                            ENTRY, FCTR>BCTR, SET TO ITSELF PLUS  */
*/*                            BCTR, OR IF UPON ENTRY, FCTR=BCTR,    */
*/*                            SET TO ITSELF PLUS BCTR AND USED TO   */
*/*                            UPDATE FDBDATAA IN FDB, MAY HAVE BEEN */
*/*                            SET BY ANY OF THE PROCS INCLUDING THIS*/
*/*                            PRIOR TO ENTRY                        */
*/*          FCTR       R/S    FDB DATA LENGTH REGISTER, USED TO     */
*/*                            DETERMINE WHICH OF THREE PATHS TO     */
*/*                            TAKE BY COMPARISON WITH BCTR, USED    */
*/*                            IN DATA MOVE FROM FDB TO USER AREA    */
*/*                            FOR FCTR<BCTR AS DATA LENGTH TO MOVE, */
*/*                            SAVED AND RESTORED FROM CRRSAVE,      */
*/*                            IF UPON ENTRY FCTR>BCTR,  SET TO      */
*/*                            ITSELF MINUS BCTR                     */
*/*                            IF UPON ENTRY FCTR=BCTR,              */
*/*                            IS SET TO ITSELF MINUS BCTR AND USED  */
*/*                            TO SET FDBDATCT                       */
*/*                            IN FDB, IF UPON ENTRY FCTR<           */
*/*                            BCTR, IS USED TO UPDATE BPTR,RCTR,    */
*/*                            AND BCTR, MAY HAVE BEEN SET BY ANY    */
*/*                            OF THE PROCS INCLUDING THIS ONE PRIOR */
*/*                            TO ENTRY                              */
*/*          FDBPTR     R/S    COVER REGISTER FOR FDB, IMPLICIT BASE */
*/*                            FRO FDB SET IN PROCESSA OR SET BY THIS*/
*/*                            PROC TO FDBFDBA, FDB CHAIN POINTER TO */
*/*                            NEXT FDB                              */
*/*          RCTR       R/S    TOTAL LENGTH MOVED REGISTER, IF UPON  */
*/*                            ENTRY FCTR<BCTR SET TO ITSELF PLUS    */
*/*                            FCTR, OR IF UPON ENTRY FCTR>=BCTR,    */
*/*                            SET TO ITSELF PLUS BCTR               */
*/*------------------------------------------------------------------*/
*                                                                  0419
*PROCESSB:                                                         0419
*   PROC OPTIONS(NOSAVEAREA,NOSAVE);                               0419
         B     @PB00003                                            0419
PROCESSB DS    0H                                                  0420
*   RESPECIFY                                                      0420
*    (RETPTR) RESTRICTED;           /* RESTRICT RETURN @ REG         */
*   CRRRTN8=RETPTR;                 /* SAVE RETURN ADDRESS           */
         ST    RETPTR,CRRRTN8(,CRRPTR)                             0421
*   RESPECIFY                                                      0422
*    (RETPTR) UNRESTRICTED;         /* UNRESTRICT RETURN @ REG       */
*   IF FCTR<BCTR                    /* IF FDB DATA LEN<BUF AREA      */
*     THEN                                                         0423
         CR    FCTR,BCTR                                           0423
         BNL   @RF00423                                            0423
*     DO;                           /* LEN THEN                      */
*                                                                  0424
*       /*************************************************************/
*       /*                                                           */
*       /* USER BUFFER > FDB DATA AVAILABLE MOVE ALL THE DATA INTO   */
*       /* AREA                                                      */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0425
*       GENERATE CODE REFS(BPTR,FCTR,CRRSAVE,CRRPTR,BCTR,FPTR);    0425
         STM   BPTR,FCTR,CRRSAVE+12(CRRPTR) SAVE REGS CHANGED BY MVCL
         LR    BCTR,FCTR                MOVE FCTR WHICH IS MVCL COUNT
         MVCL  BPTR,FPTR                MOVE DATA FROM FDB AREA TO     *
                                        USER AREA FOR FCTR FDB COUNT
         LM    BPTR,FCTR,CRRSAVE+12(CRRPTR) REST REGS CHANGED BY MCVL
*       BPTR=BPTR+FCTR;             /* ADD MOVED COUNT TO BUF @ TO 0426
*                                      GET NEXT BUF @                */
         ALR   BPTR,FCTR                                           0426
*       RCTR=RCTR+FCTR;             /* ADD MOVED COUNT TO REG WHICH
*                                      KEEPS TRACK OF TOTAL MOVED  0427
*                                      COUNT                         */
         ALR   RCTR,FCTR                                           0427
*       BCTR=BCTR-FCTR;             /* SUBTRACT MOVED COUNT FROM BUF
*                                      DATA LEN TO GET RE- MAINING 0428
*                                      BYTES LEFT IN DATA AREA       */
         SLR   BCTR,FCTR                                           0428
*       FDBDATCT=0;                 /* MARK FDB ALREADY DONE         */
         SLR   @15,@15                                             0429
         STH   @15,FDBDATCT(,FDBPTR)                               0429
*       CRRBLEN=BCTR;               /* SET PARM LIST REMAINING COUNT
*                                      TO NUMBER FREE BYTE IN BUF LEN
*                                      REG                           */
         STH   BCTR,CRRBLEN(,CRRPTR)                               0430
*       CRRBARAD=BPTR;              /* SET PARM LIST @ TO @ NEXT   0431
*                                      AVAILABLE BYTE IN BUF AREA REG*/
*                                                                  0431
         ST    BPTR,CRRBARAD(,CRRPTR)                              0431
*       /*************************************************************/
*       /*                                                           */
*       /* IF NO MORE DATA IS AVAILABLE SET GOOD RETURN CODE         */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0432
*       IF FDBFDBA=0×FDBFDBA=GATEBIT/* IF THIS FDB IS LAST ONE       */
*         THEN                                                     0432
         L     @14,FDBFDBA(,FDBPTR)                                0432
         CR    @14,@15                                             0432
         BE    @RT00432                                            0432
         CL    @14,GATEBIT                                         0432
         BNE   @RF00432                                            0432
@RT00432 DS    0H                                                  0433
*         CRRBRTCD=CRRBRSUC;        /* SET GOOD RETURN CODE          */
*                                                                  0433
         MVI   CRRBRTCD(CRRPTR),X'00'                              0433
*       /*************************************************************/
*       /*                                                           */
*       /* MORE DATA ,GET THE ADDRESS OF THAT FDB.                   */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0434
*       ELSE                                                       0434
*         DO;                       /* IF MORE FDBS                  */
         B     @RC00432                                            0434
@RF00432 DS    0H                                                  0435
*           FDBPTR=FDBFDBA;         /* GET @ NEXT FDB                */
         L     FDBPTR,FDBFDBA(,FDBPTR)                             0435
*           CRRBFLG1=ON;            /* TURN ON SWITCH SO PROCESSA  0436
*                                      WILL COME BACK                */
         OI    CRRBFLG1(CRRPTR),B'10000000'                        0436
*         END;                      /* END DO FOR MORE FDBS          */
*     END;                          /* END DO FOR FDB DATA LEN< BUF
*                                      AREA LENGTH                   */
*                                                                  0438
*   /*****************************************************************/
*   /*                                                               */
*   /* FDB DATA AVAILABLE MORE THAN USER BUFFER SIZE. MOVE WHAT WE   */
*   /* CAN.                                                          */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0439
*   ELSE                                                           0439
*     DO;                           /* IF FDB DATA LEN >= BUF AREA 0439
*                                      LEN THEN                      */
         B     @RC00423                                            0439
@RF00423 DS    0H                                                  0440
*       GENERATE CODE REFS(BPTR,FCTR,CRRSAVE,CRRPTR,BCTR,FPTR);    0440
         STM   BPTR,FCTR,CRRSAVE+12(CRRPTR) SAVE REGS CHANGED BY MVCL
         LR    FCTR,BCTR                MOVE BCTR WHICH IS MVCL COUNT
         MVCL  BPTR,FPTR                MOVE DATA FROM FDB AREA TO     *
                                        USER AREA FOR BCTR BUF COUNT
         LM    BPTR,FCTR,CRRSAVE+12(CRRPTR) REST REGS CHANGED BY MVCL
*       FPTR=FPTR+BCTR;             /* ADD MOVED COUNT TO FDB AREA @
*                                      TO GET @ NEXT FDB BYTE TO BE
*                                      MOVED                         */
         ALR   FPTR,BCTR                                           0441
*       RCTR=RCTR+BCTR;             /* ADD LENGTH MOVED TO TOTAL   0442
*                                      LENGTH REG                    */
         ALR   RCTR,BCTR                                           0442
*       FCTR=FCTR-BCTR;             /* SUBTRACT LENGTH MOVED FROM FDB
*                                      LEN TO GET RE- MAINING BYTES
*                                      IN FDB                        */
         SLR   FCTR,BCTR                                           0443
*       CRRBLEN=0;                  /* SET ZERO PARM LIST RE- MAINING
*                                      LENGTH                        */
*                                                                  0444
         SLR   @15,@15                                             0444
         STH   @15,CRRBLEN(,CRRPTR)                                0444
*       /*************************************************************/
*       /*                                                           */
*       /* IF THE USER BUFFER WAS EXACTLY BIG ENOUGH, AND NO MORE    */
*       /* DATA SET GOOD RETURN CODE                                 */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0445
*       IF FCTR=0                   /* IF FDB DATA LEN=BUF DATA LEN
*                                      EXACTLY                       */
*         THEN                                                     0445
         CR    FCTR,@15                                            0445
         BNE   @RF00445                                            0445
*         DO;                       /* THEN                          */
*           FDBDATCT=0;             /* MARK FDB ALREADY DONE         */
         STH   @15,FDBDATCT(,FDBPTR)                               0447
*           IF FDBFDBA=0×FDBFDBA=GATEBIT/* IF NO MORE FDBS           */
*             THEN                                                 0448
         L     @14,FDBFDBA(,FDBPTR)                                0448
         CR    @14,@15                                             0448
         BE    @RT00448                                            0448
         CL    @14,GATEBIT                                         0448
         BNE   @RF00448                                            0448
@RT00448 DS    0H                                                  0449
*             CRRBRTCD=CRRBRSUC;    /* SET GOOD RETURN CODE-ALL DATA
*                                      MOVED                         */
*                                                                  0449
         MVI   CRRBRTCD(CRRPTR),X'00'                              0449
*           /*********************************************************/
*           /*                                                       */
*           /* MORE DATA IS AVAILABLE FOR THE USER, SET MORE DATA    */
*           /* RETURN                                                */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0450
*           ELSE                                                   0450
*             DO;                   /* IF MORE FDBS                  */
         B     @RC00448                                            0450
@RF00448 DS    0H                                                  0451
*               FDBPTR=FDBFDBA;     /* POINT TO NEXT FDB             */
         L     FDBPTR,FDBFDBA(,FDBPTR)                             0451
*               CRRBRTCD=CRRBMDAT;  /* SET MORE DATA REMAINING RETURN
*                                      CODE                          */
         MVI   CRRBRTCD(CRRPTR),X'04'                              0452
*             END;                  /* END DO FOR MORE FDBS          */
*         END;                      /* END DO FOR FDB DATA LEN= BUF
*                                      DATA LEN                      */
*                                                                  0454
*       /*************************************************************/
*       /*                                                           */
*       /* MORE DATA IS TO BE MORE IN THE SAME FDB, ADJUST THE PTR TO*/
*       /* POINT THE REMAINING DATA, SET MORE DATA RETURN            */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0455
*       ELSE                                                       0455
*         DO;                       /* IF FDB DATA LEN>BUF DATA LEN  */
         B     @RC00445                                            0455
@RF00445 DS    0H                                                  0456
*           FDBDATAA=FPTR;          /* ADJUST FDB DATA @ TO PT TO  0456
*                                      DATA STILL TO BE MOVED        */
         ST    FPTR,FDBDATAA(,FDBPTR)                              0456
*           FDBDATCT=FCTR;          /* ADJUST FDB LEN TO BYTES STILL
*                                      TO BE MOVED                   */
         STH   FCTR,FDBDATCT(,FDBPTR)                              0457
*           CRRBRTCD=CRRBMDAT;      /* SET DATA STILL REMAINING    0458
*                                      RETURN CODE                   */
         MVI   CRRBRTCD(CRRPTR),X'04'                              0458
*         END;                      /* END DO FOR FDB DATA LEN> BUF
*                                      AREA LEN                      */
*     END;                          /* END DO FOR FDB DATA LEN>= BUF
*                                      AREA LENGTH                   */
@RC00445 DS    0H                                                  0461
*   RESPECIFY                                                      0461
*    (RETPTR) RESTRICTED;           /* RESTRICT RETURN @ REG         */
@RC00423 DS    0H                                                  0462
*   RETPTR=CRRRTN8;                 /* RESTORE RETURN ADDRESS        */
         L     RETPTR,CRRRTN8(,CRRPTR)                             0462
*   RESPECIFY                                                      0463
*    (RETPTR) UNRESTRICTED;         /* UNRESTRICT RETURN @ REG       */
*   RETURN;                         /* RETURN TO CALLER              */
@EL00003 DS    0H                                                  0464
@EF00003 DS    0H                                                  0464
@ER00003 BR    @14                                                 0464
*   END PROCESSB;                                                  0465
@PB00003 DS    0H                                                  0466
*   GEN NOSETS NOREFS(EJECT);                                      0466
         EJECT
*                                                                  0467
*/********************************************************************/
*/*                                                                  */
*/* ROUTINE NAME : PROCESSC - LOCATE NEXT DATA AREA                  */
*/*                                                                  */
*/* FUNCTION : DETERMINE IF THIS IS LDO PROCESSING AND MORE DATA  TO */
*/*      BE MOVED, IF SO DO THE FOLLOWING:                           */
*/*          - VALIDITY CHECK NEXT LDO ADDRESS (CK FOR JUMP LDO ALSO)*/
*/*          - PUT LDO ADDRESS IN CRR, BUFFER AREA AND LENGTH IN CRR */
*/*                                                                  */
*/* INPUT : SAME AS PROCESSB                                         */
*/*                                                                  */
*/* OUTPUT : SEE PROCESSB TABLE                                      */
*/*                                                                  */
*/* SUBROUTINES CALLED : VALIDATE                                    */
*/*                                                                  */
*/* MACROS USED : NONE                                               */
*/*                                                                  */
*/********************************************************************/
*/* TABLE FOR PROCESSC                                               */
*/*------------------------------------------------------------------*/
*/* CB       FIELD      R/S    MEANING                               */
*/*------------------------------------------------------------------*/
*/* CRR      CRRRTN8    R/S    TEMPORARY SAVEAREA FOR RETURN REGISTER*/
*/*                            RETPTR, SAVED AND RESTORED WITHIN THIS*/
*/*                            PROC                                  */
*/*          CRRBTRCD   R/S    PARAMETER LIST RETURN CODE, TESTED    */
*/*                            AGAINST CRRBMDAT (MORE DATA LEFT)     */
*/*                            TO SEE IF LDO PROCESSING SHOULD BE    */
*/*                            DONE, SET TO CRRBEROR (ERROR RETURN   */
*/*                            CODE) IF LDO ADDRESS IS FOUND TO BE   */
*/*                            INVALID, IF JUMP TO LDO ADDRESS IS    */
*/*                            FOUND TO BE INVALID, IF A JUMP TO     */
*/*                            JUMP LDO SITUATION IS DETECTED, OR IF */
*/*                            LDO DATA LENGTH IS FOUND TO BE INVALID*/
*/*          CRRRTNCD    S     CRR MAJOR RETURN CODE, SET TO CRRLOGIC*/
*/*                            (LOGIC ERROR) IF INVALID LDO          */
*/*                            ADDRESS OR JUMP TO LDO ADDRESS IS     */
*/*                            FOUND, IF JUMP TO JUMP SITUATION IS   */
*/*                            DETECTED OR IF INVALID LDO DATA LENGTH*/
*/*                            IS FOUND                              */
*/*          CRRFDB2     S     CRR MINOR RETURN CODE, SET TO CRRILDOA*/
*/*                            (INVALID LDO ADDRESS) IF LDO ADDRESS  */
*/*                            OR JUMP TO LDO ADDRESS IS FOUND TO BE */
*/*                            INVALID, SET TO CRRJTOJ (JUMP TO JUMP)*/
*/*                            IF JUMP TO JUMP SITUATION IS DETECTED,*/
*/*                            OR SET TO CRRIDA (INVALID DATA ADDRESS*/
*/*                            OR LENGTH) IF INVALID DATA LDO LENGTH */
*/*                            IS DETECTED                           */
*/*          CRRBLDAD    S     PARAMETER LDO ADDRESS, SET TO CURRENT */
*/*                            VALID LDO ADDRESS IF NO ERROR CONDI-  */
*/*                            TIONS ARE FOUND TO EXIST              */
*/*          CRRBFLG1    S     PARAMETER LIST SEARCH FOR MORE FDBS   */
*/*                            FLAG, SET ON IF LDO PROCESSING IS DONE*/
*/*                                                                  */
*/* LDO      LDOACHN     R     LDO DATA CHAIN FLAG, IS TESTED FOR ON */
*/*                            TO SEE IF ANY LDO PROCESSING SHOULD   */
*/*                            BE DONE                               */
*/*          LDOCMD      R     LDO COMMAND CODE, IS TESTED AGAINST   */
*/*                            LDOJUMP TO SEE IF THE LDO IS A JUMP   */
*/*                            LDO                                   */
*/*          LDOADDR     R     LDO DATA ADDRESS, USED TO SET REGISTER*/
*/*                            LDOPTR WHEN THE CURRENT LDO IS A JUMP,*/
*/*                            USED TO SET REGISTER BPTR WHEN NO     */
*/*                            ERROR CONDITIONS ARE FOUND            */
*/*          LDOLEN      R     LDO DATA LENGTH, USED TO SET REGISTER */
*/*                            BCTR WHEN NO ERROR CONDITIONS ARE     */
*/*                            FOUND, TESTED AGAINST ZERO TO SEE IF  */
*/*                            LDO DATA LENGTH IS VALID              */
*/*                                                                  */
*/* REGS     BASE        R     IMPLICIT BASE MODULE ADDRESS, SET BY  */
*/*                            MAIN PROCEDURE                        */
*/*          CRRPTR      R     IMPLICIT BASE FOR CRR, SET BY MAIN    */
*/*                            PROCEDURE                             */
*/*          ENTER       R     RETURN CODE REGISTER FROM ?VALCHECK   */
*/*                            MACRO, TESTED FOR ZERO-GOOD RETURN    */
*/*                            CODE                                  */
*/*          RETPTR     R/S    RETURN ADDRESS REGISTER, SAVED AND    */
*/*                            RESTORED FROM CRRRTN8 WITHIN THIS     */
*/*                            PROC                                  */
*/*          LDOPTR     R/S    IMPLICIT LDO ADDRESS, SET EITHER PRIOR*/
*/*                            TO THIS PROC IN MAIN PROC OR BY THIS  */
*/*                            PROC, TESTED AGAINST ZERO TO SEE IF   */
*/*                            PARAMETER LIST SPECIFIED NON-LDO      */
*/*                            PROCESSING,                           */
*/*                            USED AS BEGINNING ADDRESS TO BE       */
*/*                            VALIDATED TO ?VALCHECK, SET TO NEXT   */
*/*                            LDO ADDRESS, USED TO SET CRRBLDAD IN  */
*/*                            PARAMETER LIST                        */
*/*          BCTR       R/S    BUFFER AREA LENGTH REGISTER, SET TO   */
*/*                            LDO DATA LENGTH FOUND IF NO ERROR     */
*/*                            CONDITIONS EXIST, TESTED AGAINST ZERO */
*/*                            TO SEE IF LDO DATA LENGTH IS VALID    */
*/*          BPTR        S     BUFFER ADDRESS REGISTER, SET TO LDO   */
*/*                            DATA ADDRESS IF NO ERROR CONDITIONS   */
*/*                            ARE FOUND TO EXIST                    */
*/*          PARAM       R     RPH IMPLICIT BASE, USED AS INPUT TO   */
*/*                            ?VALCHECK MACRO, SET EXTERNALLY TO    */
*/*                            ISTDCC60                              */
*/*                                                                  */
*/* MACROS   ?VALCHECK   -     INVOKE ?VALCHECK WHEN LDO ADDRESS     */
*/*                            IS TO BE VALIDATED                    */
*/*------------------------------------------------------------------*/
*                                                                  0467
*PROCESSC:                                                         0467
*   PROC OPTIONS(NOSAVEAREA,NOSAVE);                               0467
         B     @PB00004                                            0467
PROCESSC DS    0H                                                  0468
*   RESPECIFY                                                      0468
*    (RETPTR) RESTRICTED;           /* RESTRICT RETURN @ REG         */
*   CRRRTN8=RETPTR;                 /* SAVE RETURN ADDRESS           */
         ST    RETPTR,CRRRTN8(,CRRPTR)                             0469
*   RESPECIFY                                                      0470
*    (RETPTR) UNRESTRICTED;         /* UNRESTRICT RETURN @ REG       */
*   LDOPTR=CRRBLDAD;                /* GET ADDR OF LDO, IF ANY       */
*                                                                  0471
         L     LDOPTR,CRRBLDAD(,CRRPTR)                            0471
*   /*****************************************************************/
*   /*                                                               */
*   /* IF LDO PROCESSING, THE ADDRESS IN THE CRR WILL BE NON ZERO    */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0472
*   IF LDOPTR^=0 THEN               /* IF LDO PROCESSING             */
*                                                                  0472
         SLR   @15,@15                                             0472
         CR    LDOPTR,@15                                          0472
         BE    @RF00472                                            0472
*     /***************************************************************/
*     /*                                                             */
*     /* IF MORE DATA TO BE PROCESSED AND LDO IS DATA CHAINED THEN   */
*     /* VALIDATE THE LDO                                            */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0473
*     IF CRRBRTCD=CRRBMDAT THEN     /* AND IF MORE DATA RET CODE     */
         CLI   CRRBRTCD(CRRPTR),4                                  0473
         BNE   @RF00473                                            0473
*       IF LDOACHN=ON               /* AND IF THERE IS AN LDO DATA 0474
*                                      CHAINED TO THIS ONE           */
*         THEN                                                     0474
         TM    LDOACHN(LDOPTR),B'10000000'                         0474
         BNO   @RF00474                                            0474
*         DO;                       /* THEN                          */
*           CRRBFLG1=ON;            /* TURN ON SWITCH                */
         OI    CRRBFLG1(CRRPTR),B'10000000'                        0476
*           LDOPTR=LDOPTR+8;        /* GET @ NEXT LDO                */
         LA    @14,8                                               0477
         ALR   LDOPTR,@14                                          0477
*           CRRVALCK=LENGTH(ISTLDO);/* GET LENGTH OF LDO             */
         ST    @14,CRRVALCK(,CRRPTR)                               0478
*           RESPECIFY                                              0479
*            (ENTER) RESTRICTED;                                   0479
*                                                                  0479
*           /*********************************************************/
*           /*                                                       */
*           /* VALPTR DOES NOT HAVE TO BE INITIALIZED BECAUSE LDOPTR */
*           /* IS THE SAME REGISTER (REG 4).                         */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0480
*           ENTER=0;                /* ZERO OUT REG 15       @VC40441*/
         SLR   @14,@14                                             0480
         LR    ENTER,@14                                           0480
*           IF RPLAUTUS=OFF THEN    /* AUTHORIZED USER? NO@VC40441 0481
*                                                            @ZA08948*/
         L     @14,CRRARPL(,CRRPTR)                                0481
         TM    RPLAUTUS+16(@14),B'00100000'                        0481
         BNZ   @RF00481                                            0481
*             CALL VALIDATE;        /* VALIDATE LDO @                */
         BAL   @14,VALIDATE                                        0482
*           IF ENTER=0 THEN         /* IF LDO @ VALID                */
*                                                                  0483
@RF00481 SLR   @14,@14                                             0483
         CR    ENTER,@14                                           0483
         BNE   @RF00483                                            0483
*             /*******************************************************/
*             /*                                                     */
*             /* CHECK TO SEE IF THE LDO IS A JUMP                   */
*             /*                                                     */
*             /*******************************************************/
*                                                                  0484
*             IF LDOCMD=LDOJUMP THEN                               0484
         CLI   LDOCMD(LDOPTR),X'08'                                0484
         BNE   @RF00484                                            0484
*               DO;                                                0485
*                 CRRBLDAD=LDOPTR;                                 0486
*                                                                  0486
         ST    LDOPTR,CRRBLDAD(,CRRPTR)                            0486
*                 /***************************************************/
*                 /*                                                 */
*                 /* GET NEXT LDO ADDRESS FROM JUMP LDO ADDRESS FIELD*/
*                 /*                                                 */
*                 /***************************************************/
*                                                                  0487
*                 LDOPTR=LDOADDR;                                  0487
         L     LDOPTR,LDOADDR(,LDOPTR)                             0487
*                 ENTER=0;          /* ZERO OUT REG 15       @VC40441*/
         LR    ENTER,@14                                           0488
*                 IF RPLAUTUS=OFF THEN/* NOT AUT@VC40441     @ZA08948*/
         L     @14,CRRARPL(,CRRPTR)                                0489
         TM    RPLAUTUS+16(@14),B'00100000'                        0489
         BNZ   @RF00489                                            0489
*                   CALL VALIDATE;  /* VALIDATE LDO @                */
*                                                                  0490
         BAL   @14,VALIDATE                                        0490
*                 /***************************************************/
*                 /*                                                 */
*                 /* IF THE LDO ADDRESS IS VALID, CHECK TO SEE IF IT */
*                 /* IS A JUMP                                       */
*                 /*                                                 */
*                 /***************************************************/
*                                                                  0491
*                 IF ENTER=0 THEN                                  0491
@RF00489 LTR   ENTER,ENTER                                         0491
         BNZ   @RF00491                                            0491
*                   IF LDOCMD=LDOJUMP                              0492
*                                                                  0492
*                   /*************************************************/
*                   /*                                               */
*                   /* IF IT IS,THIS IS AN ERROR, SET ERROR CODES    */
*                   /*                                               */
*                   /*************************************************/
*                                                                  0492
*                     THEN                                         0492
         CLI   LDOCMD(LDOPTR),X'08'                                0492
         BNE   @RF00492                                            0492
*                     DO;                                          0493
*                       CRRRTNCD=CRRLOGIC;                         0494
         MVI   CRRRTNCD(CRRPTR),X'08'                              0494
*                       CRRFDB2=CRRJTOJ;                           0495
         MVI   CRRFDB2(CRRPTR),X'19'                               0495
*                       CRRBRTCD=CRRBEROR;                         0496
         MVI   CRRBRTCD(CRRPTR),X'08'                              0496
*                     END;                                         0497
*                   ELSE                                           0498
*                     ;                                            0498
*                                                                  0498
@RF00492 DS    0H                                                  0499
*                 /***************************************************/
*                 /*                                                 */
*                 /* THE LDO ADDRESS INVALID, SET ERROR CODES        */
*                 /*                                                 */
*                 /***************************************************/
*                                                                  0499
*                 ELSE                                             0499
*                   DO;             /* IF LDO @ INVALID              */
         B     @RC00491                                            0499
@RF00491 DS    0H                                                  0500
*                     CRRRTNCD=CRRLOGIC;                           0500
         MVI   CRRRTNCD(CRRPTR),X'08'                              0500
*                     CRRFDB2=CRRILDOA;                            0501
         MVI   CRRFDB2(CRRPTR),X'18'                               0501
*                     CRRBRTCD=CRRBEROR;                           0502
         MVI   CRRBRTCD(CRRPTR),X'08'                              0502
*                   END;            /* END DO FOR INVALID LDO @      */
*               END;                /* END DO FOR JUMP LDO           */
*             ELSE                                                 0505
*               ;                   /* NULL ELSE FOR NON-JUMP LDO    */
*                                                                  0505
@RF00484 DS    0H                                                  0506
*           /*********************************************************/
*           /*                                                       */
*           /* LDO(S) NOT DATA CHAINED, SET ERROR CODES              */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0506
*           ELSE                                                   0506
*             DO;                   /* IF LDO @ INVALID              */
         B     @RC00483                                            0506
@RF00483 DS    0H                                                  0507
*               CRRBRTCD=CRRBEROR;                                 0507
         MVI   CRRBRTCD(CRRPTR),X'08'                              0507
*               CRRRTNCD=CRRLOGIC;                                 0508
         MVI   CRRRTNCD(CRRPTR),X'08'                              0508
*               CRRFDB2=CRRILDOA;                                  0509
         MVI   CRRFDB2(CRRPTR),X'18'                               0509
*             END;                  /* END DO FOR INVALID LDO @      */
*                                                                  0510
*           /*********************************************************/
*           /*                                                       */
*           /* IF MORE DATA IS TO BE MOVED ,SET ADDR & LENGTH IN THE */
*           /* CRR                                                   */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0511
*           IF CRRBRTCD=CRRBMDAT    /* IF RETURN CODE MORE DATA      */
*             THEN                                                 0511
@RC00483 CLI   CRRBRTCD(CRRPTR),4                                  0511
         BNE   @RF00511                                            0511
*             DO;                   /* THEN                          */
*               CRRBLDAD=LDOPTR;                                   0513
         ST    LDOPTR,CRRBLDAD(,CRRPTR)                            0513
*               CRRBARAD=LDOADDR;   /* PUT BUF @ IN REG              */
         MVC   CRRBARAD(4,CRRPTR),LDOADDR(LDOPTR)                  0514
*               BCTR=LDOLEN;        /* PUT LDO LEN IN REG            */
         SLR   BCTR,BCTR                                           0515
         ICM   BCTR,3,LDOLEN(LDOPTR)                               0515
*               IF BCTR=0           /* IF LDO LEN IS ZERO            */
*                 THEN                                             0516
         LTR   BCTR,BCTR                                           0516
         BNZ   @RF00516                                            0516
*                 DO;               /* THEN                          */
*                   CRRRTNCD=CRRLOGIC;                             0518
         MVI   CRRRTNCD(CRRPTR),X'08'                              0518
*                   CRRFDB2=CRRIDA;                                0519
         MVI   CRRFDB2(CRRPTR),X'17'                               0519
*                   CRRBRTCD=CRRBEROR;                             0520
         MVI   CRRBRTCD(CRRPTR),X'08'                              0520
*                 END;              /* END DO FOR INVALID LEN        */
*               ELSE                                               0522
*                 ;                 /* NULL ELSE FOR VALID LEN       */
@RF00516 DS    0H                                                  0523
*             END;                  /* END DO FOR RET CODE FOR MORE
*                                      DATA                          */
*           ELSE                                                   0524
*             ;                     /* NULL ELSE FOR RETURN CODE NOT
*                                      MORE DATA                     */
@RF00511 DS    0H                                                  0525
*         END;                      /* END DO FOR MORE LDOS          */
*       ELSE                                                       0526
*         ;                         /* NULL ELSE FOR NO DATA CHAINED
*                                      LDO                           */
@RF00474 DS    0H                                                  0527
*     ELSE                                                         0527
*       ;                           /* NULL ELSE FOR RETURN CODE NOT
*                                      MORE DATA                     */
@RF00473 DS    0H                                                  0528
*   ELSE                                                           0528
*     ;                             /* NULL ELSE FOR NON-LDO       0528
*                                      PROCESSING                    */
@RF00472 DS    0H                                                  0529
*   RESPECIFY                                                      0529
*    (ENTER) UNRESTRICTED;          /* THIS REG CAN BE USED          */
*   RESPECIFY                                                      0530
*    (RETPTR) RESTRICTED;           /* RESTRICT RETURN @ REG         */
*   RETPTR=CRRRTN8;                 /* RESTORE RETURN ADDRESS        */
         L     RETPTR,CRRRTN8(,CRRPTR)                             0531
*   RESPECIFY                                                      0532
*    (RETPTR) UNRESTRICTED;         /* UNRESTRICT RETURN @ REG       */
*   RETURN;                         /* RETURN TO CALLER              */
@EL00004 DS    0H                                                  0533
@EF00004 DS    0H                                                  0533
@ER00004 BR    @14                                                 0533
*   END PROCESSC;                                                  0534
@PB00004 DS    0H                                                  0535
*   GEN NOSETS NOREFS(EJECT);                                      0535
         EJECT
*                                                                  0536
*/********************************************************************/
*/*                                                                  */
*/* ROUTINE NAME : VALIDATE - VALIDITY CHECK ROUTINE                 */
*/*                                                                  */
*/* FUNCTION : DO ALL OF THIS MODULES VALCHEKS.                      */
*/*                                                                  */
*/* INPUT : CRRCALCK - LENGTH TO BE VALCHEKED                        */
*/*         VALPTR (REG 4) - PTR TO AREA TO BE VALCHEKED             */
*/*                                                                  */
*/* OUTPUT : ENTER (REG 15) - VALCHEK RETURN CODE                    */
*/*                                                                  */
*/* SUBROUTINES CALLED : NONE                                        */
*/*                                                                  */
*/* MACROS USED : VALCHEK                                            */
*/*                                                                  */
*/********************************************************************/
*                                                                  0536
*VALIDATE:                                                         0536
*   PROCEDURE OPTIONS(NOSAVE,NOSAVEAREA);                          0536
         B     @PB00005                                            0536
VALIDATE DS    0H                                                  0537
*   RFY                                                            0537
*    (RETPTR,                                                      0537
*     ENTER) RSTD;                                                 0537
*   CRRRTN9=RETPTR;                 /* SAVE RETURN ADDRESS           */
         ST    RETPTR,CRRRTN9(,CRRPTR)                             0538
*   BACKPTR=CRRSAVE(5:8);           /* SAVE CHAIN PTR FROM VALCHEK   */
         L     BACKPTR,CRRSAVE+4(,CRRPTR)                          0539
*                                                                  0540
*/*VALCHEK  (ENTER,(SAVEPTR),(CRRBARAD),UA,CRRVALCK)  RANGE          */
*                                                                  0540
*   DO;                                                            0540
*     RFY                                                          0541
*      (GPR01P,                                                    0541
*       GPR02P,                                                    0541
*       GPR04P,                                                    0541
*       GPR06P,                                                    0541
*       GPR13P,                                                    0541
*       GPR14P,                                                    0541
*       GPR15P) RSTD;               /* DECLARE AND RESTRICT REGS 1,
*                                      2, 4, 6, 13,14, AND 15        */
*     ENTER=0;                      /* SET RETURN CODE TO NO ERROR 0542
*                                      INVOKE XREGSET MACRO TO VERIFY
*                                      SAVEAREA OPERAND AND PUT IT IN
*                                      REG 13                        */
         SLR   ENTER,ENTER                                         0542
*/*XREGSET  PID('SAVEAREA')PPARM((SAVEPTR))RREG(13,GPR13P)           */
*                                                                  0543
*     DO;                                                          0543
*       GPR13P=SAVEPTR;             /* SET RREG SYMBOL TO VALUE OF 0544
*                                      PPARM OPERAND                 */
*     END;                          /* XREGSET                       */
*     DCL                                                          0546
*       1 SAV0010 CHAR(20) BASED(GPR13P),/* ESTABLISH SAVE AREA MAP  */
*        2 SAV10010 CHAR(4),        /* TO SAVE REGS 1,2,4,6, AND 14  */
*        2 SAV20010 CHAR(4),                                       0546
*        2 SAV40010 CHAR(4),                                       0546
*        2 SAV60010 CHAR(4),                                       0546
*        2 SAVE0010 CHAR(4);                                       0546
*     SAV10010=GPR01F;              /* SAVE REGS ONE,                */
         ST    GPR01F,SAV10010(,GPR13P)                            0547
*     SAV20010=GPR02F;              /* TWO,                          */
         ST    GPR02F,SAV20010(,GPR13P)                            0548
*     SAV40010=GPR04F;              /* FOUR,                         */
         ST    GPR04F,SAV40010(,GPR13P)                            0549
*     SAV60010=GPR06F;              /* SIX,                          */
         ST    GPR06F,SAV60010(,GPR13P)                            0550
*     SAVE0010=GPR14F;              /* AND FOURTEEN                  */
         ST    GPR14F,SAVE0010(,GPR13P)                            0551
*     GPR04P=GPR01P->RPHTSKID;      /* PUT ADDR OF PROCESS     SCHED-
*                                      ULING TABLE IN REG 4          */
         L     GPR04P,RPHTSKID(,GPR01P)                            0552
*/* ATBUILD (ISTPST)                                                 */
*                                                                  0553
*/* PROCESS ANCHOR BLOCK                                              *
*/*  REVISIONS                                         002 11/16/75  */
*DCL  1  ISTPAB BDY(DWORD) BASED,                                  0553
*       2  PABWQCHN CHAR(8) BDY(DWORD), /* CPS SWAP FIELD FOR NEQ&CHN *
*        3  PABWEQA PTR(31) BDY(WORD), /* WORK ELEMENT QUEUE ADDRESS  *
*           4  PABWEQG BIT(1),         /* GATING BIT                  *
*           4  PABRSV01 BIT(7),        /* RESERVED                    *
*           4  PABWEQP PTR(24),        /* WKEL PTR                    *
*        3  PABCHAIN PTR(31) BDY(WORD), /* APS CHAIN                  *
*           4  PABCHNG BIT(1),         /* GATING BIT                  *
*           4  PABRESCH BIT(1),        /* RESCHEDULE PAB AT        0553
*                                         TPEXIT                      *
*           4  PABCDP BIT(1),          /* CLOSE DST/CHANGE IN PROGRESS*
*           4  PABUNCON BIT(1),        /* UNCONDITIONALLY RESCHEDULE
*                                         PAB AT TPEXIT               *
*           4  PABRESET BIT(1),        /* RESET ISSUED ON THIS PAB    *
*           4  PABRUNNG BIT(1),        /* PAB RUNNING                 *
*           4  PABDELAY BIT(1),        /* DELAY OPTION USED           *
*           4  PABRSV02 BIT(1),        /* RESERVED                    *
*           4  PABCHNGP PTR(24),       /* PSS CHAIN PTR               *
*        2  PABOFFST PTR(8),           /* OFFSET FROM CONTROL BLOCK   *
*        2  PABDVTA PTR(24),           /* DVT ADDRESS                 *
*        2  PABRPHFG PTR(31),          /* SCHED FLAGS AND RPH         *
*           3  PABFLAGS BIT(8),        /* SCHEDULING FLAGS            *
*              4  PABAPYP BIT(1),      /* APPLICATION IS A USER EXIT  *
*              4  PABPRIOR BIT(1),     /* IMMEDIATE PRIORITY          *
*              4  PABNORPR BIT(1),     /* NORMAL PRIORITY -           *
*                                      /* RESCHEDUALABLE              *
*              4  PABDYNAM BIT(1),     /* DYNAMIC                     *
*              4  PABSSN BIT(1),       /* SYSTEM SERVICES             *
*              4  PABERLCK BIT(1),     /* PAB ERROR LOCK FLAG         *
*                 5  PABERRLK BIT(1),  /* ERROR LOCK                  *
*                    6  PABERLOK BIT(1), /* ERROR LOCK                *
*/*    ABNORMAL TO ALLOW VARY COMPARE AND SWAP                        *
*              4  PABINHBT BIT(1) ABNL,/* 1=INHIBIT TRAFFIC,0=NO      *
*              4  PABNODQ BIT(1),      /* DO NOT DEQ WORK ELEMENT     *
*           3  PABRPHA PTR(24);        /* RPL HEADER ADDRESS          *
*DCL PABWEQG0 BIT(32) CONSTANT('7FFFFFFF'X),  /* TURN PABWEQG OFF     *
*    PABWEQG1 BIT(32) CONSTANT('80000000'X),  /* TURN PABWEQG ON      *
*    PABCHNG0 BIT(32) CONSTANT('7FFFFFFF'X),  /* TURN PABCHNG OFF     *
*    PABCHNG1 BIT(32) CONSTANT('80000000'X),  /* TURN PABCHNG ON      *
*    PABRESC0 BIT(32) CONSTANT('BFFFFFFF'X),  /* TURN PABRESCH OFF    *
*    PABRESC1 BIT(32) CONSTANT('40000000'X),  /* TURN PABRESCH ON     *
*    PABCDP0  BIT(32) CONSTANT ('DFFFFFFF'X), /* TURN PABCDP OFF      *
*    PABCDP1  BIT(32) CONSTANT ('20000000'X), /* TURN PABCDP ON       *
*    PABERLK0 BIT(32) CONSTANT('FBFFFFFF'X),  /* TURN PABERRLK ON     *
*    PABERLK1 BIT(32) CONSTANT('04000000'X),  /* TURN PABERRLK OFF    *
*    PABUNCO0 BIT(32) CONSTANT('EFFFFFFF'X),  /* TURN PABUNCON OFF    *
*    PABUNCO1 BIT(32) CONSTANT('10000000'X),  /* TURN PABUNCON ON     *
*    PABPRIR0 BIT(32) CONSTANT('BFFFFFFF'X),  /* TURN PAB PRIOR OFF   *
*    PABPRIR1 BIT(32) CONSTANT('40000000'X),  /* TURN PAB PRIOR ON    *
*    PABRST0  BIT(32) CONSTANT('F7FFFFFF'X),  /* TURN PABRESET OFF    *
*    PABRST1  BIT(32) CONSTANT('08000000'X),  /* TURN PABRESET ON     *
*    PABDLAY0 BIT(32) CONSTANT('FDFFFFFF'X),  /* TURN PAB DELAY OFF   *
*    PABDLAY1 BIT(32) CONSTANT('02000000'X);  /* TURN PAB DELAY ON    *
*              /* DYNAMIC PAB 1K633 */                             0555
* /* 1K0997 JAN 20, 1973  MB   */                                  0555
* /* 1K1142 MAR 03, 1973  MB   */                                  0555
* DCL 1 ISTDYPAB BDY(DWORD) BASED, /* LEVEL 1 DECLARE 1K633 */     0555
*       2  DYPTYPE CHAR(1), /* CONTROL BLOCK TYPE CODE 1K633 */    0555
*       2  DYPLNGTH PTR(8), /* CONTROL BLOCK LENGTH (BYTES)  1K633 */
*       2 DYPFLGS CHAR(2),     /* FLAGS 1K633 */                   0555
*       2 DYPCHAIN PTR(31),    /* CHAIN POINTER 1K633 */           0555
*       2 DYPTSKID PTR(31),    /* TASKID OR PTR TO PSS TABLES 1K633 */
*       2  DYPRSV01 PTR(31),   /* RESERVED TO PRESERVE ALIGNMENT   0555
*                                                             1K0997 */
*       2 DYPPAB CHAR(LENGTH(ISTPAB)) BDY(DWORD); /* LENGTH OF 1K0997
*                                                    PAB         */
*DCL DYTYP   BIT(8) CONSTANT ('11'X);   /* TYPE           1K1142 */
*/* ***** PROCESS SCHEDULING TABLE FOR VS/2       ****** */        0557
*/*  INITIAL LEVEL                                      001 04/09/75 */
*DCL  1  ISTPST BDY(DWORD) BASED,                                  0557
*        2  PSTTYPE  CHAR(1),          /* CONTROL BLOCK TYPE         */
*        2  PSTLNGTH PTR(8),           /* LENGTH IN BYTES            */
*        2  *        CHAR(2),          /* RESERVED                   */
*        2  PSTCHAIN PTR(31),          /* ADDRESS OF NEXT PST        */
*        2  PSTRQFGA CHAR(8) BDY(DWORD),  /* READY QUEUE AND FLAGS   */
*           3  PSTRQUE PTR(31),        /* READY QUEUE                */
*              4  PSTRQFLG BIT(1),     /* READY QUEUE GATE           */
*              4  PSTRSV01 BIT(1),     /* REVERVED                   */
*              4  PSTRSV02 BIT(1),     /* REVERVED                   */
*              4  PSTRSV03 BIT(1),     /* REVERVED                   */
*              4  PSTRSV04 BIT(1),     /* REVERVED                   */
*              4  PSTRSV05 BIT(1),     /* REVERVED                   */
*              4  PSTRSV06 BIT(1),     /* REVERVED                   */
*              4  PSTRSV07 BIT(1),     /* REVERVED                   */
*              4  PSTRQUEA PTR(24),    /* READY QUEUE                */
*           3  PSTFLGA PTR(32),        /* FLAG FIELD                 */
*              4  PSTSSRN BIT(1),      /* IRB RUNNING SYSTEM SERVICE
*                                         TYPE REQUESTS              */
*              4  PSTUERN BIT(1),      /* IRB RUNNING USER EXIT TYPE
*                                         REQUESTS                   */
*              4  PSTIRBU1 BIT(1),     /* IRB # 1 IN USE             */
*              4  PSTIRBU2 BIT(1),     /* IRB # 2 IN USE             */
*              4  PSTSMQR BIT(1),      /* SMS RPH QUEUED FOR STORAGE */
*              4  PSTSMCU BIT(1),      /* SMS CRA IN USE             */
*              4  PSTAUTH BIT(1),      /* THE TASK THIS PST IS OBTAINED
*                                         FOR IS AUTHORIZED          */
*              4  PSTABINP BIT(1),     /* ABEND IN PROGRESS ON THIS
*                                         TASK                       */
*                 5 PSTABEND BIT(1),   /* TASK ABEND IN PROGRESS     */
*              4  PSTDMPC BIT(1),      /* DUMP HAS BEEN REQUESTED    */
*              4  PSTRSV08 BIT(23),    /* RESERVED                   */
*        2  PSTTCBA PTR(31),           /* TCB POINTER                */
*        2  PSTMPSTP PTR(31),          /* MPST POINTER - PST 6TH WORD*/
*        2  PSTACBCT FIXED(31),        /* COUNT OF OPEN ACB'S USING
*                                         THIS PST                   */
*        2  PSTPSSQ PTR(31),           /* POSTED SYSTEM SERVICE QUEUE*/
*        2  PSTNSSQ PTR(31),           /* NORMAL SYSTEM SERVICE QUEUE*/
*        2  PSTUEQ  PTR(31),           /* USER EXIT QUEUE            */
*        2  PSTIQE11 PTR(31),          /* INACTIVE IQE FOR FIRST IRB */
*        2  PSTIQE12 PTR(31),          /* ACTIVE IQE FOR FIRST IRB   */
*        2  PSTIQE21 PTR(31),          /* INACTIVE IQE FOR 2ND IRB   */
*        2  PSTIQE22 PTR(31),          /* ACTIVE IQE FOR 2ND IRB     */
*        2  PSTCRR1 PTR(31),           /* PREALLOCATED CRA           */
*        2  PSTCRRS PTR(31),           /* SMS CRA                    */
*        2  PSTSMDYP CHAR(LENGTH(ISTDYPAB)) BDY(DWORD), /* SMS PAB   */
*        2  PSTSAVE CHAR(32),          /* SAVE AREA                  */
*        2  PSTDEBP  PTR(31),          /* POINTER TO DEB CHAIN       */
*                                      /* WHEN TASK ABENDS           */
*        2  PSTDMPS  FIXED(31),        /* DUMMY MPST                 */
*           3 PSTDGATE BIT(1),         /* DUMMY MPST GATE BIT        */
*           3 *        BIT(7),         /* NOT TO BE USED             */
*           3 PSTDRDYQ PTR(24);        /* DUMMY MPST READY QUEUE     */
*DCL  PSTSSRN0 BIT(32) CONSTANT('7FFFFFFF'X); /* TURN PSTSSRN OFF    */
*DCL  PSTSSRN1 BIT(32) CONSTANT('80000000'X); /* TURN PSTSSRN ON     */
*DCL  PSTUERN0 BIT(32) CONSTANT('BFFFFFFF'X); /* TURN PSTUERN OFF    */
*DCL  PSTUERN1 BIT(32) CONSTANT('40000000'X); /* TURN PSTUERN ON     */
*DCL  PSTGATE0 BIT(32) CONSTANT('7FFFFFFF'X); /* TURN PST READY QUEUE
*                                                GATE OFF            */
*DCL  PSTGATE1 BIT(32) CONSTANT('80000000'X); /* TURN PST READY QUEUE
*                                                GATE ON             */
*DCL  PSTIRB10 BIT(32) CONSTANT('DFFFFFFF'X); /* TURN PSTIRBU1 OFF   */
*DCL  PSTIRB11 BIT(32) CONSTANT('20000000'X); /* TURN PSTIRBU1 ON    */
*DCL  PSTIRB20 BIT(32) CONSTANT('EFFFFFFF'X); /* TURN PSTIRBU2 OFF   */
*DCL  PSTIRB21 BIT(32) CONSTANT('10000000'X); /* TURN PSTIRBU2 ON    */
*DCL  PSTSMQR0 BIT(32) CONSTANT('F7FFFFFF'X); /* TURN PSTSMQR OFF    */
*DCL  PSTSMQR1 BIT(32) CONSTANT('08000000'X); /* TURN PSTSMQR ON     */
*DCL  PSTSMCU0 BIT(32) CONSTANT('FBFFFFFF'X); /* TURN PSTSMCU OFF    */
*DCL  PSTSMCU1 BIT(32) CONSTANT('04000000'X); /* TURN PSTSMCU ON     */
*DCL  PSTABIP1 BIT(32) CONSTANT('01000000'X); /* TURN PSTABINP ON    */
*DCL  PSTABIP0 BIT(32) CONSTANT('FEFFFFFF'X); /* TURN OFF PSTABINP   */
*DCL  PSTYPE   BIT(8) CONSTANT('61'X);        /* TYPE CODE FOR PST   */
*                                                                  0575
*/* END OF ATBUILD                                                   */
*                                                                  0575
*                                   /* INCLUDE PROCESS SCHEDULING  0575
*                                      TABLE (ISTPST)                */
*     GPR15P=GPR04P->PSTTCBA;       /* PUT TASK CONTROL BLOCK ADDRESS
*                                      IN REGISTER 15                */
         L     GPR15P,PSTTCBA(,GPR04P)                             0575
*     GPR04F=SAV40010;              /* RESTORE REG 4 INVOKE XREGSET
*                                      MACRO TO VERIFY USER AREA   0576
*                                      OPERAND AND PUT ADDR IN REG 1 */
         L     @03,SAV40010(,GPR13P)                               0576
         LR    GPR04F,@03                                          0576
*/*XREGSET  PID('USER AREA')PPARM((CRRBARAD))RREG(,GPR01P)           */
*                                                                  0577
*     DO;                                                          0577
*       GPR01P=CRRBARAD;            /* SET RREG SYMBOL TO VALUE OF 0578
*                                      PPARM OPERAND                 */
         L     GPR01P,CRRBARAD(,CRRPTR)                            0578
*     END;                          /* XREGSET INVOKE XREGSET MACRO
*                                      TO VERIFY LENGTH OPERAND AND
*                                      PUT VALUE IN REG 14           */
*/*XREGSET  PID('LENGTH')PPARM(CRRVALCK)RREG(,GPR14F)OUTPUT(PARM)    */
*                                                                  0580
*     DO;                                                          0580
*       GPR14F=CRRVALCK;            /* SET RREG SYMBOL TO VALUE OF 0581
*                                      PPARM OPERAND                 */
         L     GPR14F,CRRVALCK(,CRRPTR)                            0581
*     END;                          /* XREGSET                       */
*     GEN SETS(2);                                                 0583
         MODESET EXTKEY=ZERO,SAVEKEY=(2),WORKREG=2
*     GPR06P=GPR02P;                                               0584
         LR    GPR06P,GPR02P                                       0584
*     GPR04P=GPR15P;                /* RESTORE TCB ADDR              */
         LR    GPR04P,GPR15P                                       0585
*     GPR02F=GPR01F+GPR14F-1;       /* PUT END ADDRESS IN REG 2      */
         LR    GPR02F,GPR01F                                       0586
         ALR   GPR02F,GPR14F                                       0586
         BCTR  GPR02F,0                                            0586
*     DCL                                                          0587
*       CZMP0010 PTR(31) LOCATION(16);/* ESTABLISH POINTER TO CVT    */
*     CALL CZMP0010->CVT0VL00;      /* INVOKE TASK SUPERVISOR      0588
*                                      VALIDITY CHECKING ROUTINE UPON
*                                      RETURN, CHECK PSW CONDITION 0588
*                                      CODE SET BY THE VALIDITY    0588
*                                      CHECKING ROUTINE              */
         L     @03,CZMP0010                                        0588
         L     @15,CVT0VL00(,@03)                                  0588
         BALR  @14,@15                                             0588
*     BC(8,OKAY0010);               /* IF ADDR VALID, DON'T ALTER  0589
*                                      RETURN CODE VALUE FROM 0      */
         BC    8,OKAY0010                                          0589
*     ENTER=4;                      /* SET RETURN CODE TO ERROR      */
         LA    ENTER,4                                             0590
*     GO TO VC30010;                                               0591
         B     VC30010                                             0591
*OKAY0010:                                                         0592
*     ENTER=0;                      /* PUT RETURN CODE IN RCREG      */
OKAY0010 SLR   ENTER,ENTER                                         0592
*VC30010:                                                          0593
*     GPR02P=GPR06P;                                               0593
VC30010  LR    GPR02P,GPR06P                                       0593
*     GEN SETS(2);                                                 0594
         MODESET KEYADDR=(2),WORKREG=2
*     GPR01F=SAV10010;              /* RESTORE REGS ONE,             */
         L     GPR01F,SAV10010(,GPR13P)                            0595
*     GPR02F=SAV20010;              /* TWO,                          */
         L     GPR02F,SAV20010(,GPR13P)                            0596
*     GPR04F=SAV40010;              /* FOUR,                         */
         L     GPR04F,SAV40010(,GPR13P)                            0597
*     GPR06F=SAV60010;              /* SIX,                          */
         L     GPR06F,SAV60010(,GPR13P)                            0598
*     GPR14F=SAVE0010;              /* AND FOURTEEN                  */
         L     GPR14F,SAVE0010(,GPR13P)                            0599
*     RFY                                                          0600
*      (GPR01P,                                                    0600
*       GPR02P,                                                    0600
*       GPR04P,                                                    0600
*       GPR06P,                                                    0600
*       GPR13P,                                                    0600
*       GPR14P,                                                    0600
*       GPR15P) UNRSTD;             /* UNRESTRICT REGISTERS          */
*   END;                            /* VALCHEK               @VC04044*/
*   CRRSAVE(5:8)=BACKPTR;                                          0602
         ST    BACKPTR,CRRSAVE+4(,CRRPTR)                          0602
*   RETPTR=CRRRTN9;                 /* RESTORE RETURN REG            */
         L     RETPTR,CRRRTN9(,CRRPTR)                             0603
*   RETURN;                                                        0604
@EL00005 DS    0H                                                  0604
@EF00005 DS    0H                                                  0604
@ER00005 BR    @14                                                 0604
*   END VALIDATE;                                                  0605
*   END PROCESSA;                                                  0606
*                                                                  0606
         B     @EL00002                                            0606
@PB00002 DS    0H                                                  0607
*/* TPEPILOG                                                         */
*                                                                  0607
*   GEN(PRINT OFF);                                                0607
         PRINT OFF
*   GEN(PRINT ON);                                                 0608
*                                                                  0608
         PRINT ON
*/* END OF TPEPILOG                                                  */
*                                                                  0609
*   END ISTDCC60                                                   0609
*                                                                  0609
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (CVT     )                                       */
*/*%INCLUDE SYSLIB  (IFGRPL  )                                       */
*/*%INCLUDE SYSLIB  (IFGRPLVT)                                       */
*/*%INCLUDE SYSLIB  (ISTRPLFB)                                       */
*                                                                  0609
*       ;                                                          0609
         B     @EL00001                                            0609
@DATA    DS    0H
@DATD    DSECT
         DS    0F
ISTDCC60 CSECT
         DS    0F
@DATD    DSECT
         DS    0D
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
ISTDCC60 CSECT
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
         DS    0D
GATEBIT  DC    X'80000000'
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
RPHPTR   EQU   @01
GPR01F   EQU   @01
GPR01P   EQU   @01
GPR02F   EQU   @02
GPR02P   EQU   @02
GPR04F   EQU   @04
GPR04P   EQU   @04
GPR06F   EQU   @06
GPR06P   EQU   @06
GPR13P   EQU   @13
GPR14F   EQU   @14
GPR14P   EQU   @14
GPR15P   EQU   @15
PARAM    EQU   @01
BACKPTR  EQU   @06
LDOPTR   EQU   @04
VALPTR   EQU   @04
SAVEPTR  EQU   @13
RETPTR   EQU   @14
ENTER    EQU   @15
BPTR     EQU   @06
BCTR     EQU   @07
FPTR     EQU   @08
FCTR     EQU   @09
RCTR     EQU   @10
FDBPTR   EQU   @05
CRRPTR   EQU   @11
GPR00F   EQU   @00
GPR00P   EQU   @00
GPR03F   EQU   @03
GPR03P   EQU   @03
GPR05F   EQU   @05
GPR05P   EQU   @05
GPR07F   EQU   @07
GPR07P   EQU   @07
GPR08F   EQU   @08
GPR08P   EQU   @08
GPR09F   EQU   @09
GPR09P   EQU   @09
GPR10F   EQU   @10
GPR10P   EQU   @10
GPR11F   EQU   @11
GPR11P   EQU   @11
GPR12F   EQU   @12
GPR12P   EQU   @12
GPR13F   EQU   @13
GPR15F   EQU   @15
CVTPTR   EQU   16
CZMP0010 EQU   16
CVTMAP   EQU   0
CVT0VL00 EQU   CVTMAP+24
CVTDAR   EQU   CVTMAP+72
CVTFLGS1 EQU   CVTDAR
CVTDCB   EQU   CVTMAP+116
CVTIERLC EQU   CVTMAP+144
CVTOPTA  EQU   CVTMAP+182
CVTOPTB  EQU   CVTMAP+183
CVTGTF   EQU   CVTMAP+236
CVTGTFST EQU   CVTGTF
CVTGTFS  EQU   CVTGTFST
CVTSTATE EQU   CVTGTFST
CVTTMODE EQU   CVTGTFST
CVTFORM  EQU   CVTGTFST
CVTAQAVT EQU   CVTMAP+240
CVTTCMFG EQU   CVTAQAVT
CVTVOLM2 EQU   CVTMAP+244
CVTTATA  EQU   CVTVOLM2
CVTTSKS  EQU   CVTTATA
CVTVOLF2 EQU   CVTTSKS
CVTTAT   EQU   CVTTATA+1
CVTATER  EQU   CVTMAP+248
CVTEXT1  EQU   CVTMAP+252
CVTPURG  EQU   CVTMAP+260
CVTQMSG  EQU   CVTMAP+268
CVTDMSR  EQU   CVTMAP+272
CVTRSV37 EQU   CVTDMSR
CVTDMSRF EQU   CVTRSV37
CVTERPV  EQU   CVTMAP+316
CVTINTLA EQU   CVTMAP+320
CVTAPF   EQU   CVTMAP+324
CVTEXT2  EQU   CVTMAP+328
CVTHJES  EQU   CVTMAP+332
CVTPGSIA EQU   CVTMAP+348
CVTA1F1  EQU   CVTMAP+356
CVTSYSK  EQU   CVTMAP+357
CVTVOLM1 EQU   CVTMAP+380
CVTVOLF1 EQU   CVTVOLM1
CVTATMCT EQU   CVTMAP+388
CVTXTNT1 EQU   0
CVTXTNT2 EQU   0
CVTDSSV  EQU   CVTXTNT2
CVTFLGBT EQU   CVTXTNT2+5
CVTQID   EQU   CVTXTNT2+24
CVTSHS   EQU   CVTXTNT2+40
CVTRV400 EQU   CVTXTNT2+52
CVTRV409 EQU   CVTXTNT2+53
CVTATCVT EQU   CVTXTNT2+64
CVTRV429 EQU   CVTXTNT2+84
CVTRV438 EQU   CVTXTNT2+85
CVTRV457 EQU   CVTXTNT2+112
CVTRV466 EQU   CVTXTNT2+113
CVTFIX   EQU   0
CVTRELNO EQU   CVTFIX+252
IFGRPL   EQU   0
RPLCOMN  EQU   IFGRPL
RPLIDWD  EQU   RPLCOMN
RPLLEN   EQU   RPLIDWD+3
RPLECB   EQU   RPLCOMN+8
RPLFDBWD EQU   RPLCOMN+12
RPLFDBK  EQU   RPLFDBWD+1
RPLRTNCD EQU   RPLFDBK
RPLCNDCD EQU   RPLFDBK+1
RPLCMPON EQU   RPLCNDCD
RPLFDB2  EQU   RPLCMPON
RPLERRCD EQU   RPLCNDCD+1
RPLFDB3  EQU   RPLERRCD
RPLKEYLE EQU   RPLCOMN+16
RPLARG   EQU   RPLCOMN+36
RPLOPTCD EQU   RPLCOMN+40
RPLOPT1  EQU   RPLOPTCD
RPLECBSW EQU   RPLOPT1
RPLOPT2  EQU   RPLOPTCD+1
RPLADR   EQU   RPLOPT2
RPLOPT3  EQU   RPLOPTCD+2
RPLOPT4  EQU   RPLOPTCD+3
RPLNXTRP EQU   RPLCOMN+44
RPLOPTC2 EQU   RPLCOMN+56
RPLOPT5  EQU   RPLOPTC2
RPLWRTYP EQU   RPLOPT5
RPLOPT6  EQU   RPLOPTC2+1
RPLUNTYP EQU   RPLOPT6
RPLOPT7  EQU   RPLOPTC2+2
RPLCNOPT EQU   RPLOPT7
RPLOPT8  EQU   RPLOPTC2+3
RPLRBAR  EQU   RPLCOMN+60
RPLAIXID EQU   RPLRBAR+2
RPLEXTDS EQU   RPLCOMN+68
RPLEXTD1 EQU   RPLEXTDS
RPLVTEXT EQU   IFGRPL+76
RPLFDBK2 EQU   RPLVTEXT+12
RPLSSNSI EQU   RPLFDBK2
RPLDSB   EQU   RPLSSNSI
RPLDSB1  EQU   RPLDSB
RPLSSEI  EQU   RPLDSB1
RPLDSB2  EQU   RPLDSB+1
RPLUSNSI EQU   RPLFDBK2+2
RPLOPTC3 EQU   RPLVTEXT+20
RPLOPT9  EQU   RPLOPTC3
RPLOPT10 EQU   RPLOPTC3+1
RPLOPT11 EQU   RPLOPTC3+2
RPLOPT12 EQU   RPLOPTC3+3
RPLOSENS EQU   RPLVTEXT+24
RPLSSNSO EQU   RPLOSENS
RPLSSEO  EQU   RPLSSNSO
RPLOF16  EQU   0
RPLRH3   EQU   RPLOF16
RPLSRTYP EQU   RPLOF16+1
RPLSTYPE EQU   RPLSRTYP
RPLRTYPE EQU   RPLSRTYP
RPLCHN   EQU   RPLOF16+2
RPLVTFL1 EQU   RPLOF16+3
RPLAUTUS EQU   RPLVTFL1
RPLVTFL2 EQU   RPLOF16+4
RPLPOSTV EQU   RPLVTFL2
RPLRESP  EQU   RPLVTFL2
RPLCNTRL EQU   RPLOF16+5
RPLCNTDF EQU   RPLCNTRL
RPLCNTDC EQU   RPLCNTRL+1
RPLCNTSC EQU   RPLCNTRL+2
RPLOF60  EQU   0
RPLOBSQ  EQU   RPLOF60+4
RPLIBSQ  EQU   RPLOF60+5
ISTDCCRR EQU   0
CRRSPACE EQU   ISTDCCRR+12
CRRSAREA EQU   0
CRRSAVE  EQU   CRRSAREA
CRRSAVE1 EQU   CRRSAREA+72
CRRFSB   EQU   CRRSAREA+144
CRRMAS   EQU   CRRSAREA+148
CRRMAS1  EQU   CRRMAS
CRRMAS2  EQU   CRRMAS+1
CRRMAS3  EQU   CRRMAS+2
CRRMAS4  EQU   CRRMAS+3
CRRM60   EQU   CRRMAS4
CRRRMAS1 EQU   CRRMAS+4
CRRRMAS2 EQU   CRRMAS+5
CRRRMAS3 EQU   CRRMAS+6
CRRSMAS  EQU   CRRRMAS3
CRRATS   EQU   CRRSAREA+156
CRRATS1  EQU   CRRATS
CRRATS2  EQU   CRRATS+1
CRRATS3  EQU   CRRATS+2
CRRATS4  EQU   CRRATS+3
CRRC60   EQU   CRRATS4
CRRRATS1 EQU   CRRATS+4
CRRRATS2 EQU   CRRATS+5
CRRRATS3 EQU   CRRATS+6
CRRSATS  EQU   CRRRATS3
CRRFLGS1 EQU   CRRSAREA+164
CRRFLGS2 EQU   CRRSAREA+165
CRRFLGS3 EQU   CRRSAREA+166
CRRFLGS4 EQU   CRRSAREA+167
CRRFLGS  EQU   CRRSAREA+168
CRRRFLG1 EQU   CRRSAREA+169
CRRRTYPE EQU   CRRRFLG1
CRRFDBK1 EQU   CRRSAREA+170
CRRRTNCD EQU   CRRFDBK1
CRRFDB2  EQU   CRRFDBK1+1
CRRFDB3  EQU   CRRFDBK1+2
CRRFDBK2 EQU   CRRSAREA+176
CRRDSB   EQU   CRRFDBK2
CRRESR   EQU   CRRFDBK2+2
CRRTRBUF EQU   CRRSAREA+204
CRRARPL  EQU   CRRTRBUF+4
CRRVALCK EQU   CRRSAREA+212
CRRRTN7  EQU   CRRSAREA+248
CRRRTN8  EQU   CRRSAREA+252
CRRRTN9  EQU   CRRSAREA+256
CRRBARAD EQU   CRRSAREA+272
CRRBLDAD EQU   CRRSAREA+276
CRRBFLGS EQU   CRRSAREA+280
CRRBFLG1 EQU   CRRBFLGS
CRRBRTCD EQU   CRRSAREA+281
CRRBLEN  EQU   CRRSAREA+282
CRRBTLEN EQU   CRRSAREA+284
ISTLCCW  EQU   0
LCCWOP   EQU   ISTLCCW
LCCWRWOP EQU   LCCWOP
LCCWCTL  EQU   LCCWRWOP
LCCWFLAG EQU   ISTLCCW+1
LCCWLSI  EQU   LCCWFLAG
ISTLCPB  EQU   0
LCPREQTG EQU   ISTLCPB+2
LCPFLAGS EQU   LCPREQTG
LCPZF001 EQU   LCPFLAGS
LCPZRT02 EQU   LCPZF001
LCPZF002 EQU   LCPFLAGS
LCPZRT03 EQU   LCPZF002
LCPZF003 EQU   LCPFLAGS
LCPZRT04 EQU   LCPZF003
LCPZF004 EQU   LCPFLAGS
LCPZRT05 EQU   LCPZF004
LCPZRT06 EQU   LCPFLAGS
LCPZRT07 EQU   LCPFLAGS
LCPMNRCD EQU   LCPREQTG+1
LCPZRT08 EQU   LCPMNRCD
LCPZRT09 EQU   LCPMNRCD
LCPCHAIN EQU   ISTLCPB+4
LCPCHAI1 EQU   LCPCHAIN
LCPRUCNT EQU   ISTLCPB+8
LCPFLAG2 EQU   ISTLCPB+9
LCPTLBPI EQU   LCPFLAG2
LCPFID0  EQU   LCPFLAG2
LCPSEQ   EQU   ISTLCPB+10
LCPCID   EQU   ISTLCPB+16
LCPFDBA  EQU   ISTLCPB+24
LCPFLG1  EQU   ISTLCPB+37
LCPFLCCW EQU   ISTLCPB+40
LCPLCCW  EQU   ISTLCPB+48
LCPPABA  EQU   LCPLCCW+4
LCPRPHA  EQU   LCPPABA
LCPBPTR  EQU   0
ISTZSAVE EQU   0
ZSAZSVBC EQU   ISTZSAVE
ZSAZSVMS EQU   ZSAZSVBC
ISTPFCRR EQU   0
PFCCRR   EQU   ISTPFCRR
PFCCRRID EQU   PFCCRR
PFCCRRLN EQU   PFCCRR+2
PFCHDR   EQU   ISTPFCRR+4
PFCCRRO  EQU   PFCHDR
PFCFRRO  EQU   PFCHDR+4
ISTCFCRR EQU   0
CFCAUDIT EQU   ISTCFCRR
CFCNTRD  EQU   CFCAUDIT
CFCCRT   EQU   CFCAUDIT+1
ISTZCRR  EQU   0
ZCRCRR   EQU   ISTZCRR
ZCRFLGS1 EQU   ISTZCRR+12
ZCRFLGS2 EQU   ISTZCRR+13
ZCRSWFLD EQU   ISTZCRR+14
ZCRENDSH EQU   ZCRSWFLD
ZCRNDLCP EQU   ZCRSWFLD
ZCRRESET EQU   ZCRSWFLD
ZCRFLGS3 EQU   ISTZCRR+15
ZCRGENSW EQU   ISTZCRR+16
ZCRPFLGS EQU   ISTZCRR+17
ZCRIBPR  EQU   ISTZCRR+18
ZCRSCPSW EQU   ISTZCRR+19
ZCRPARMS EQU   ISTZCRR+24
ZCRFBPTR EQU   ZCRPARMS
ZCRDFRDA EQU   ZCRPARMS+10
ZCRPCOD1 EQU   ZCRPARMS+12
ZCRPLSBF EQU   ZCRPCOD1
ZCRPCOD2 EQU   ZCRPARMS+13
ZCRSVRTN EQU   ISTZCRR+56
ZCRWKARA EQU   ISTZCRR+156
ZCRCIDSV EQU   ISTZCRR+192
ZCRAUDIT EQU   ISTZCRR+440
ZCRENTER EQU   ZCRAUDIT+5
ZCRLCPB  EQU   ISTZCRR+480
ZCRRHRU  EQU   ZCRLCPB
ISTASCRR EQU   0
ASCFLAGS EQU   ISTASCRR+16
ASCFLG1  EQU   ASCFLAGS
ASCFLG2  EQU   ASCFLAGS+2
ASCFLG3  EQU   ASCFLAGS+4
ASCUSRGS EQU   ISTASCRR+28
ISTAPCRR EQU   0
APCATFLG EQU   ISTAPCRR+16
APCRFLG  EQU   ISTAPCRR+18
APCSAVE  EQU   ISTAPCRR+44
APCCOMF  EQU   ISTAPCRR+116
APCCOMF1 EQU   APCCOMF
APC31FLG EQU   ISTAPCRR+132
APC52FLG EQU   ISTAPCRR+133
APC53FLG EQU   ISTAPCRR+134
APC54FLG EQU   ISTAPCRR+135
APC57FLG EQU   ISTAPCRR+136
ISTRPH   EQU   0
RPHCNTL  EQU   ISTRPH
RPHFLAGS EQU   RPHCNTL+2
RPHAPTYP EQU   RPHFLAGS
RPHFSTLC EQU   RPHFLAGS
RPHFLGB  EQU   RPHCNTL+3
RPHRPHA  EQU   ISTRPH+4
RPHTSKID EQU   ISTRPH+8
RPHRESMA EQU   ISTRPH+16
RPHWPFLG EQU   RPHRESMA
RPHWEA   EQU   ISTRPH+24
RPHCSPA  EQU   RPHWEA
RPHSRPRM EQU   ISTRPH+28
RPHCRR   EQU   ISTRPH+32
RPHPABQA EQU   ISTRPH+36
RPHWORK  EQU   ISTRPH+40
RPHSAVE1 EQU   RPHWORK
RPHSBITS EQU   RPHSAVE1+1
ISTCRA   EQU   0
CRABASIC EQU   ISTCRA
CRAHDR   EQU   CRABASIC
CRACRR   EQU   CRAHDR
CRALKACT EQU   CRABASIC+8
CRASVC   EQU   ISTCRA+848
CRABUFA  EQU   CRASVC+68
ISTFDB   EQU   0
FDBFDBA  EQU   ISTFDB
FDBDATAA EQU   ISTFDB+4
FDBDATCT EQU   ISTFDB+8
ISTFSB   EQU   0
FSBFSB   EQU   ISTFSB
FSBMNRCD EQU   FSBFSB+2
FSBSFLGS EQU   FSBFSB+3
FSBFSBA  EQU   FSBFSB+4
FSBBTH   EQU   FSBFSB+8
FSBCID   EQU   FSBBTH
FSBRQTAG EQU   FSBBTH+4
FSBSEQID EQU   FSBRQTAG
FSBFLAGS EQU   FSBSEQID
FSBSEQ   EQU   FSBSEQID+1
FSBCSWST EQU   FSBBTH+6
FSBTHFLD EQU   FSBCSWST
FSBTH1   EQU   FSBTHFLD
FSBSYSRS EQU   FSBTH1
FSBTH2   EQU   FSBTHFLD+1
FSBEXTRS EQU   FSBTH2
FSBXFSTS EQU   FSBEXTRS
FSBXCODE EQU   FSBEXTRS
FSBNETRS EQU   FSBFSB+16
FSBSRCAT EQU   FSBNETRS
FSBERC   EQU   FSBNETRS+1
FSBFBMI  EQU   FSBERC
FSBDMGRS EQU   FSBFSB+18
FSBSS1   EQU   FSBDMGRS
FSBSS2   EQU   FSBDMGRS+1
FSBLCPB  EQU   FSBFSB+20
FSBMSGID EQU   FSBLCPB
FSBLCCWA EQU   FSBFSB+24
FSBRLSTS EQU   FSBLCCWA
FSBFDB   EQU   ISTFSB+32
FSBPTR   EQU   0
ISTLDO   EQU   0
LDOCMD   EQU   ISTLDO
LDOFLAGS EQU   ISTLDO+1
LDOACHN  EQU   LDOFLAGS
LDOLEN   EQU   ISTLDO+2
LDOADDR  EQU   ISTLDO+4
SAV0010  EQU   0
SAV10010 EQU   SAV0010
SAV20010 EQU   SAV0010+4
SAV40010 EQU   SAV0010+8
SAV60010 EQU   SAV0010+12
SAVE0010 EQU   SAV0010+16
ISTPAB   EQU   0
PABWQCHN EQU   ISTPAB
PABWEQA  EQU   PABWQCHN
PABCHAIN EQU   PABWQCHN+4
PABRPHFG EQU   ISTPAB+12
PABFLAGS EQU   PABRPHFG
PABERLCK EQU   PABFLAGS
PABERRLK EQU   PABERLCK
ISTDYPAB EQU   0
ISTPST   EQU   0
PSTRQFGA EQU   ISTPST+8
PSTRQUE  EQU   PSTRQFGA
PSTFLGA  EQU   PSTRQFGA+4
PSTABINP EQU   PSTFLGA
PSTTCBA  EQU   ISTPST+16
PSTDMPS  EQU   ISTPST+132
ISTRPL   EQU   0
CVTS01   EQU   CVTPGSIA
CVTLPDIA EQU   CVTS01+12
CVTDIRST EQU   CVTLPDIA
CVTSLIDA EQU   CVTS01+24
CVTCTLFG EQU   CVTS01+50
CVTRV210 EQU   CVTS01+424
CVTRV219 EQU   CVTS01+425
CVTRV228 EQU   CVTS01+426
CVTRV237 EQU   CVTS01+427
CVTMFRTR EQU   CVTS01+452
CVTRV262 EQU   CVTS01+468
CVTRV271 EQU   CVTS01+469
CVTRV280 EQU   CVTS01+470
CVTRV289 EQU   CVTS01+471
CVTGSDA  EQU   CVTS01+600
LCPZTIE  EQU   LCPCID
LCPZSNAM EQU   LCPZTIE+8
FSBCOMBN EQU   FSBNETRS
FSBRHFLD EQU   FSBCOMBN+1
FSBRH3   EQU   FSBRHFLD+2
FSBLDFLG EQU   FSBRH3
@NM00055 EQU   FSBRQTAG
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
FSBRT0B  EQU   @NM00055+1
FSBRT0A  EQU   @NM00055+1
FSBRT09  EQU   @NM00055+1
FSBRT08  EQU   @NM00055+1
FSBRT07  EQU   @NM00055
FSBRT06  EQU   @NM00055
FSBRT05  EQU   @NM00055
FSBRT04  EQU   @NM00055
FSBRT03  EQU   @NM00055
FSBRT02  EQU   @NM00055
FSBRT01  EQU   @NM00055
FSBRT00  EQU   @NM00055
FSBLDCUF EQU   FSBLDFLG
FSBLDSIF EQU   FSBLDFLG
FSBLDSOF EQU   FSBLDFLG
FSBLDEBF EQU   FSBLDFLG
FSBLDBBF EQU   FSBLDFLG
FSBLDFME EQU   FSBLDFLG
FSBLDSCF EQU   FSBLDFLG
FSBLDRMF EQU   FSBLDFLG
FSBRH2   EQU   FSBRHFLD+1
FSBRH1   EQU   FSBRHFLD
FSBALIGN EQU   FSBCOMBN
LCPZTRV4 EQU   LCPZSNAM+4
LCPZTRV1 EQU   LCPZSNAM
LCPZSNA  EQU   LCPZTIE+4
LCPZFMCA EQU   LCPZTIE
CVTRV628 EQU   CVTS01+728
CVTRV627 EQU   CVTS01+724
CVTRV626 EQU   CVTS01+720
CVTRV625 EQU   CVTS01+716
CVTRV624 EQU   CVTS01+712
CVTRV623 EQU   CVTS01+708
CVTRV622 EQU   CVTS01+704
CVTRV621 EQU   CVTS01+700
CVTRV620 EQU   CVTS01+696
CVTRV619 EQU   CVTS01+692
CVTRV618 EQU   CVTS01+688
CVTRV617 EQU   CVTS01+684
CVTRV616 EQU   CVTS01+680
CVTRV615 EQU   CVTS01+676
CVTRV614 EQU   CVTS01+672
CVTRV613 EQU   CVTS01+668
CVTTCASP EQU   CVTS01+664
CVT0PT03 EQU   CVTS01+660
CVT0PT0E EQU   CVTS01+656
CVTIRM   EQU   CVTS01+652
CVTCGK   EQU   CVTS01+648
CVTRV607 EQU   CVTS01+644
CVTRV606 EQU   CVTS01+640
CVTRV605 EQU   CVTS01+636
CVTRV604 EQU   CVTS01+632
CVTEFF02 EQU   CVTS01+628
CVTCBBR  EQU   CVTS01+624
CVTSSCR  EQU   CVTS01+620
CVTEVENT EQU   CVTS01+616
CVTCRCA  EQU   CVTS01+612
CVTTPIO  EQU   CVTS01+608
CVTADV   EQU   CVTS01+604
CVTGSDAB EQU   CVTGSDA
CVTQV3   EQU   CVTS01+596
CVTQV2   EQU   CVTS01+592
CVTQV1   EQU   CVTS01+588
CVTRPT   EQU   CVTS01+584
CVTSSRB  EQU   CVTS01+580
CVTCSDRL EQU   CVTS01+576
CVTEXP1  EQU   CVTS01+572
CVTRMPMT EQU   CVTS01+568
CVTRMPTT EQU   CVTS01+564
CVTVPSA  EQU   CVTS01+560
CVTVSTOP EQU   CVTS01+556
CVTGTFR8 EQU   CVTS01+552
CVTQUIT  EQU   CVTS01+548
CVTVACR  EQU   CVTS01+544
CVTWTCB  EQU   CVTS01+540
CVTSTPRS EQU   CVTS01+536
CVT0PT02 EQU   CVTS01+532
CVTDARCM EQU   CVTS01+528
CVTIRECM EQU   CVTS01+524
CVTJRECM EQU   CVTS01+520
CVTVEMS0 EQU   CVTS01+516
CVTSPFRR EQU   CVTS01+512
CVTRLSTG EQU   CVTS01+508
CVT0TC0A EQU   CVTS01+504
CVTGMBR  EQU   CVTS01+500
CVTLFRM  EQU   CVTS01+496
CVTRMBR  EQU   CVTS01+492
CVTVIOP  EQU   CVTS01+488
CVTRV307 EQU   CVTS01+486
CVTRV306 EQU   CVTS01+484
CVTRV305 EQU   CVTS01+482
CVTRV304 EQU   CVTS01+480
CVTRV303 EQU   CVTS01+478
CVTRV302 EQU   CVTS01+476
CVTTRCA  EQU   CVTS01+472
CVTRV297 EQU   CVTRV289
CVTRV296 EQU   CVTRV289
CVTRV295 EQU   CVTRV289
CVTRV294 EQU   CVTRV289
CVTRV293 EQU   CVTRV289
CVTRV292 EQU   CVTRV289
CVTRV291 EQU   CVTRV289
CVTRV290 EQU   CVTRV289
CVTRV288 EQU   CVTRV280
CVTRV287 EQU   CVTRV280
CVTRV286 EQU   CVTRV280
CVTRV285 EQU   CVTRV280
CVTRV284 EQU   CVTRV280
CVTRV283 EQU   CVTRV280
CVTRV282 EQU   CVTRV280
CVTRV281 EQU   CVTRV280
CVTRV279 EQU   CVTRV271
CVTRV278 EQU   CVTRV271
CVTRV277 EQU   CVTRV271
CVTRV276 EQU   CVTRV271
CVTRV275 EQU   CVTRV271
CVTRV274 EQU   CVTRV271
CVTRV273 EQU   CVTRV271
CVTRV272 EQU   CVTRV271
CVTRV270 EQU   CVTRV262
CVTRV269 EQU   CVTRV262
CVTRV268 EQU   CVTRV262
CVTRV267 EQU   CVTRV262
CVTRV266 EQU   CVTRV262
CVTRV265 EQU   CVTRV262
CVTRV264 EQU   CVTRV262
CVTRV263 EQU   CVTRV262
CVTVFP   EQU   CVTS01+464
CVTVSI   EQU   CVTS01+460
CVTVPSIB EQU   CVTS01+456
CVTMFACT EQU   CVTMFRTR
CVTMFCTL EQU   CVTS01+448
CVTPVBP  EQU   CVTS01+444
CVTPWI   EQU   CVTS01+440
CVTRV254 EQU   CVTS01+438
CVTRV253 EQU   CVTS01+436
CVTRV252 EQU   CVTS01+434
CVTRV251 EQU   CVTS01+433
CVTRV250 EQU   CVTS01+432
CVTRV249 EQU   CVTS01+431
CVTRV248 EQU   CVTS01+430
CVTRV247 EQU   CVTS01+429
CVTRV246 EQU   CVTS01+428
CVTRV245 EQU   CVTRV237
CVTRV244 EQU   CVTRV237
CVTRV243 EQU   CVTRV237
CVTRV242 EQU   CVTRV237
CVTRV241 EQU   CVTRV237
CVTRV240 EQU   CVTRV237
CVTRV239 EQU   CVTRV237
CVTRV238 EQU   CVTRV237
CVTRV236 EQU   CVTRV228
CVTRV235 EQU   CVTRV228
CVTRV234 EQU   CVTRV228
CVTRV233 EQU   CVTRV228
CVTRV232 EQU   CVTRV228
CVTRV231 EQU   CVTRV228
CVTRV230 EQU   CVTRV228
CVTRV229 EQU   CVTRV228
CVTRV227 EQU   CVTRV219
CVTRV226 EQU   CVTRV219
CVTRV225 EQU   CVTRV219
CVTRV224 EQU   CVTRV219
CVTRV223 EQU   CVTRV219
CVTRV222 EQU   CVTRV219
CVTRV221 EQU   CVTRV219
CVTRV220 EQU   CVTRV219
CVTRV218 EQU   CVTRV210
CVTRV217 EQU   CVTRV210
CVTRV216 EQU   CVTRV210
CVTRV215 EQU   CVTRV210
CVTRV214 EQU   CVTRV210
CVTRV213 EQU   CVTRV210
CVTRV212 EQU   CVTRV210
CVTRV211 EQU   CVTRV210
CVTLCCAT EQU   CVTS01+420
CVTPCCAT EQU   CVTS01+416
CVTIPCRP EQU   CVTS01+412
CVTIPCRI EQU   CVTS01+408
CVTIPCDS EQU   CVTS01+404
CVTAIDVT EQU   CVTS01+400
CVTSSAP  EQU   CVTS01+396
CVTEHCIR EQU   CVTS01+392
CVTEHDEF EQU   CVTS01+388
CVTDAIR  EQU   CVTS01+384
CVTPERFM EQU   CVTS01+380
CVT044R2 EQU   CVTS01+376
CVTFETCH EQU   CVTS01+372
CVTRSTWD EQU   CVTS01+368
CVTSPOST EQU   CVTS01+364
CVTIOBP  EQU   CVTS01+360
CVTASMVT EQU   CVTS01+356
CVTRECRQ EQU   CVTS01+352
CVTWSAC  EQU   CVTS01+348
CVTRV149 EQU   CVTS01+344
CVTWSAL  EQU   CVTS01+340
CVTSPSA  EQU   CVTS01+336
CVTGLMN  EQU   CVTS01+332
CVTVEAC0 EQU   CVTS01+328
CVT062R1 EQU   CVTS01+324
CVTRPOST EQU   CVTS01+320
CVTDQIQE EQU   CVTS01+316
CVTCSD   EQU   CVTS01+312
CVTLKRMA EQU   CVTS01+308
CVTRSPIE EQU   CVTS01+304
CVTRENQ  EQU   CVTS01+300
CVTLQCB  EQU   CVTS01+296
CVTFQCB  EQU   CVTS01+292
CVTQCS01 EQU   CVTS01+288
CVTAPFT  EQU   CVTS01+284
CVTPARRL EQU   CVTS01+280
CVTVWAIT EQU   CVTS01+276
CVTGSPL  EQU   CVTS01+272
CVTLSMQ  EQU   CVTS01+268
CVTGSMQ  EQU   CVTS01+264
CVTEXPRO EQU   CVTS01+260
CVTOPCTP EQU   CVTS01+256
CVTSIC   EQU   CVTS01+252
CVTTPIOS EQU   CVTS01+248
CVTRTMS  EQU   CVTS01+244
CVTSDBF  EQU   CVTS01+240
CVTSCBP  EQU   CVTS01+236
CVTSDMP  EQU   CVTS01+232
CVTSV60  EQU   CVTS01+228
CVTRTMCT EQU   CVTS01+224
CVTASCBL EQU   CVTS01+220
CVTASCBH EQU   CVTS01+216
CVTGDA   EQU   CVTS01+212
CVTASVT  EQU   CVTS01+208
CVTVVMDI EQU   CVTS01+204
CVTAQTOP EQU   CVTS01+200
CVTIOSCS EQU   CVTS01+196
CVTSDRM  EQU   CVTS01+192
CVTOPTE  EQU   CVTS01+188
CVTSTXU  EQU   CVTS01+184
CVTQUIS  EQU   CVTS01+180
CVTPARS  EQU   CVTS01+176
CVTS1EE  EQU   CVTS01+172
CVTFRAS  EQU   CVTS01+168
CVTQSAS  EQU   CVTS01+164
CVTCRAS  EQU   CVTS01+160
CVTCRMN  EQU   CVTS01+156
CVTDELCP EQU   CVTS01+152
CVTFRECL EQU   CVTS01+148
CVTGETCL EQU   CVTS01+144
CVTBLDCP EQU   CVTS01+140
CVTAUTHL EQU   CVTS01+136
CVTSCAN  EQU   CVTS01+132
CVTRV144 EQU   CVTS01+130
CVTMAXMP EQU   CVTS01+128
CVTSTCK  EQU   CVTS01+124
CVTRV139 EQU   CVTS01+123
CVTDSSAC EQU   CVTS01+122
CVTRV513 EQU   CVTS01+121
CVTIOSPL EQU   CVTS01+120
CVTPTGT  EQU   CVTS01+116
CVTCSPIE EQU   CVTS01+112
CVTSMFEX EQU   CVTS01+108
CVTOLT0A EQU   CVTS01+104
CVTSRBRT EQU   CVTS01+100
CVTPUTL  EQU   CVTS01+96
CVTASCRL EQU   CVTS01+92
CVTASCRF EQU   CVTS01+88
CVTRV326 EQU   CVTS01+84
CVTRV325 EQU   CVTS01+80
CVTRV324 EQU   CVTS01+76
CVT0VL01 EQU   CVTS01+72
CVTSHRVM EQU   CVTS01+68
CVTRV332 EQU   CVTS01+64
CVTTAS   EQU   CVTS01+60
CVTRSCN  EQU   CVTS01+56
CVTTRAC2 EQU   CVTS01+54
CVTTRACE EQU   CVTS01+52
CVTAPG   EQU   CVTS01+51
CVTSDTRC EQU   CVTCTLFG
CVTGTRCE EQU   CVTCTLFG
CVTNOMP  EQU   CVTCTLFG
CVTRSV79 EQU   CVTCTLFG
CVTDSTAT EQU   CVTCTLFG
CVTRSV78 EQU   CVTCTLFG
CVTRV333 EQU   CVTCTLFG
CVTRV323 EQU   CVTCTLFG
CVTSPVLK EQU   CVTS01+49
CVTRSV77 EQU   CVTS01+48
CVTRV331 EQU   CVTS01+44
CVTRV330 EQU   CVTS01+40
CVTRV329 EQU   CVTS01+36
CVTRV328 EQU   CVTS01+32
CVTRV322 EQU   CVTS01+28
CVTSLID  EQU   CVTSLIDA+1
CVTSYLK  EQU   CVTSLIDA
CVTRV321 EQU   CVTS01+20
CVTRV320 EQU   CVTS01+16
CVTLPDIR EQU   CVTLPDIA+1
CVTRSV69 EQU   CVTDIRST
CVTRSV68 EQU   CVTDIRST
CVTRSV67 EQU   CVTDIRST
CVTRSV66 EQU   CVTDIRST
CVTRSV65 EQU   CVTDIRST
CVTRSV64 EQU   CVTDIRST
CVTRSV63 EQU   CVTDIRST
CVTDICOM EQU   CVTDIRST
CVTPVTP  EQU   CVTS01+8
CVTLPDSR EQU   CVTS01+4
CVTGETL  EQU   CVTS01
PSTDRDYQ EQU   PSTDMPS+1
@NM00057 EQU   PSTDMPS
PSTDGATE EQU   PSTDMPS
PSTDEBP  EQU   ISTPST+128
PSTSAVE  EQU   ISTPST+96
PSTSMDYP EQU   ISTPST+64
PSTCRRS  EQU   ISTPST+60
PSTCRR1  EQU   ISTPST+56
PSTIQE22 EQU   ISTPST+52
PSTIQE21 EQU   ISTPST+48
PSTIQE12 EQU   ISTPST+44
PSTIQE11 EQU   ISTPST+40
PSTUEQ   EQU   ISTPST+36
PSTNSSQ  EQU   ISTPST+32
PSTPSSQ  EQU   ISTPST+28
PSTACBCT EQU   ISTPST+24
PSTMPSTP EQU   ISTPST+20
PSTRSV08 EQU   PSTFLGA+1
PSTDMPC  EQU   PSTFLGA+1
PSTABEND EQU   PSTABINP
PSTAUTH  EQU   PSTFLGA
PSTSMCU  EQU   PSTFLGA
PSTSMQR  EQU   PSTFLGA
PSTIRBU2 EQU   PSTFLGA
PSTIRBU1 EQU   PSTFLGA
PSTUERN  EQU   PSTFLGA
PSTSSRN  EQU   PSTFLGA
PSTRQUEA EQU   PSTRQUE+1
PSTRSV07 EQU   PSTRQUE
PSTRSV06 EQU   PSTRQUE
PSTRSV05 EQU   PSTRQUE
PSTRSV04 EQU   PSTRQUE
PSTRSV03 EQU   PSTRQUE
PSTRSV02 EQU   PSTRQUE
PSTRSV01 EQU   PSTRQUE
PSTRQFLG EQU   PSTRQUE
PSTCHAIN EQU   ISTPST+4
@NM00056 EQU   ISTPST+2
PSTLNGTH EQU   ISTPST+1
PSTTYPE  EQU   ISTPST
DYPPAB   EQU   ISTDYPAB+16
DYPRSV01 EQU   ISTDYPAB+12
DYPTSKID EQU   ISTDYPAB+8
DYPCHAIN EQU   ISTDYPAB+4
DYPFLGS  EQU   ISTDYPAB+2
DYPLNGTH EQU   ISTDYPAB+1
DYPTYPE  EQU   ISTDYPAB
PABRPHA  EQU   PABRPHFG+1
PABNODQ  EQU   PABFLAGS
PABINHBT EQU   PABFLAGS
PABERLOK EQU   PABERRLK
PABSSN   EQU   PABFLAGS
PABDYNAM EQU   PABFLAGS
PABNORPR EQU   PABFLAGS
PABPRIOR EQU   PABFLAGS
PABAPYP  EQU   PABFLAGS
PABDVTA  EQU   ISTPAB+9
PABOFFST EQU   ISTPAB+8
PABCHNGP EQU   PABCHAIN+1
PABRSV02 EQU   PABCHAIN
PABDELAY EQU   PABCHAIN
PABRUNNG EQU   PABCHAIN
PABRESET EQU   PABCHAIN
PABUNCON EQU   PABCHAIN
PABCDP   EQU   PABCHAIN
PABRESCH EQU   PABCHAIN
PABCHNG  EQU   PABCHAIN
PABWEQP  EQU   PABWEQA+1
PABRSV01 EQU   PABWEQA
PABWEQG  EQU   PABWEQA
LDOCMHN  EQU   LDOFLAGS
FSBRSV01 EQU   FSBFSB+30
FSBTHCNT EQU   FSBFSB+28
FSBRLRSV EQU   FSBRLSTS
FSBCFTX  EQU   FSBRLSTS
FSBICNCB EQU   FSBMSGID
FSBSSOC  EQU   FSBSS2
FSBSSCC  EQU   FSBSS2
FSBSSDC  EQU   FSBSS2
FSBSSEC  EQU   FSBSS2
FSBSSIR  EQU   FSBSS2
FSBSSCR  EQU   FSBSS2
@NM00054 EQU   FSBSS2
@NM00053 EQU   FSBSS1
FSBSSDE  EQU   FSBSS1
FSBSSUS  EQU   FSBSS1
@NM00052 EQU   FSBSS1
FSBSOHI  EQU   FSBERC
FSBLGI   EQU   FSBERC
FSBLMRI  EQU   FSBFBMI
FSBETI   EQU   FSBERC
FSBEMI   EQU   FSBERC
FSBEBI   EQU   FSBERC
FSBECI   EQU   FSBERC
FSBELI   EQU   FSBERC
FSBMJRCD EQU   FSBSRCAT
FSBXLCI  EQU   FSBXCODE
FSBXFINS EQU   FSBXCODE
FSBXNORM EQU   FSBXFSTS
FSBSCODE EQU   FSBSYSRS
FSBSPHSE EQU   FSBSYSRS
FSBSERR  EQU   FSBSYSRS
FSBCMD   EQU   FSBSEQ
FSBDTRCE EQU   FSBFLAGS
FSBASBTU EQU   FSBFLAGS
FSBINPET EQU   FSBFLAGS
FSBNONCB EQU   FSBFLAGS
FSBLBIND EQU   FSBFLAGS
FSBFFIND EQU   FSBFLAGS
FSBACIND EQU   FSBFLAGS
FSBRFIND EQU   FSBFLAGS
FSBDAF   EQU   FSBCID+2
FSBSAF   EQU   FSBCID
FSBGATE  EQU   FSBFSBA
FSBRSV02 EQU   FSBSFLGS
FSBPGBUF EQU   FSBSFLGS
FSBMNSDA EQU   FSBMNRCD
FSBMNOA  EQU   FSBMNRCD
FSBMNDIF EQU   FSBMNRCD
FSBMNEOP EQU   FSBMNRCD
FSBMNDNU EQU   FSBMNRCD
FSBMNATN EQU   FSBMNRCD
FSBMNRVI EQU   FSBMNRCD
FSBMNELI EQU   FSBMNRCD
FSBLNGTH EQU   FSBFSB+1
FSBTYPE  EQU   FSBFSB
FDBOFSET EQU   ISTFDB+10
CRACHAIN EQU   ISTCRA+928
CRARSV02 EQU   ISTCRA+924
CRARSV01 EQU   ISTCRA+920
CRABFTBA EQU   CRABUFA
CRAMASK  EQU   CRASVC+64
CRAHSIZ  EQU   CRASVC+60
CRAASCRR EQU   CRASVC
CRAPROCR EQU   ISTCRA+312
CRAPSS   EQU   ISTCRA+160
CRARPH   EQU   ISTCRA+52
CRALAPTR EQU   CRABASIC+48
CRAL9PTR EQU   CRABASIC+44
CRAL8PTR EQU   CRABASIC+40
CRAL7PTR EQU   CRABASIC+36
CRAL6PTR EQU   CRABASIC+32
CRAL5PTR EQU   CRABASIC+28
CRAL4PTR EQU   CRABASIC+24
CRAL3PTR EQU   CRABASIC+20
CRAL2PTR EQU   CRABASIC+16
CRAL1PTR EQU   CRABASIC+12
CRALEV01 EQU   CRALKACT+3
CRALEV02 EQU   CRALKACT+3
CRALEV03 EQU   CRALKACT+3
CRALEV04 EQU   CRALKACT+3
CRALEV05 EQU   CRALKACT+3
CRALEV06 EQU   CRALKACT+3
CRALEV07 EQU   CRALKACT+3
CRALEV08 EQU   CRALKACT+3
CRALEV09 EQU   CRALKACT+2
CRALEV10 EQU   CRALKACT+2
CRALEV11 EQU   CRALKACT+2
CRALEV12 EQU   CRALKACT+2
CRALEV13 EQU   CRALKACT+2
CRALEV14 EQU   CRALKACT+2
CRALEV15 EQU   CRALKACT+2
CRALEV16 EQU   CRALKACT+2
CRALEV17 EQU   CRALKACT+1
CRALEV18 EQU   CRALKACT+1
CRALEV19 EQU   CRALKACT+1
CRALEV20 EQU   CRALKACT+1
CRALEV21 EQU   CRALKACT+1
CRALEV22 EQU   CRALKACT+1
CRALEV23 EQU   CRALKACT+1
CRALEV24 EQU   CRALKACT+1
CRALEV25 EQU   CRALKACT
CRALEV26 EQU   CRALKACT
CRALEV27 EQU   CRALKACT
CRALEV28 EQU   CRALKACT
CRALEV29 EQU   CRALKACT
CRALEV30 EQU   CRALKACT
CRALEV31 EQU   CRALKACT
CRALEV32 EQU   CRALKACT
CRAFRR   EQU   CRAHDR+4
RPHNEXPO EQU   ISTRPH+104
RPHSAV16 EQU   RPHWORK+60
RPHSAV15 EQU   RPHWORK+56
RPHSAV14 EQU   RPHWORK+52
RPHSAV13 EQU   RPHWORK+48
RPHSAV12 EQU   RPHWORK+44
RPHSAV11 EQU   RPHWORK+40
RPHSAV10 EQU   RPHWORK+36
RPHSAVE9 EQU   RPHWORK+32
RPHSAVE8 EQU   RPHWORK+28
RPHSAVE7 EQU   RPHWORK+24
RPHSAVE6 EQU   RPHWORK+20
RPHSAVE5 EQU   RPHWORK+16
RPHSAVE4 EQU   RPHWORK+12
RPHSAVE3 EQU   RPHWORK+8
RPHSAVE2 EQU   RPHWORK+4
RPHSHALF EQU   RPHSAVE1+2
RPHSBIT8 EQU   RPHSBITS
RPHSBIT7 EQU   RPHSBITS
RPHSBIT6 EQU   RPHSBITS
RPHSBIT5 EQU   RPHSBITS
RPHSBIT4 EQU   RPHSBITS
RPHSBIT3 EQU   RPHSBITS
RPHSBIT2 EQU   RPHSBITS
RPHSBIT1 EQU   RPHSBITS
RPHSBYTE EQU   RPHSAVE1
RPHPABQP EQU   RPHPABQA+1
RPHPABFG EQU   RPHPABQA
RPHSRP34 EQU   RPHSRPRM+2
RPHSRP12 EQU   RPHSRPRM
RPHWEGT  EQU   RPHCSPA
RPHMAJCB EQU   ISTRPH+21
RPHPABOF EQU   ISTRPH+20
RPHRESUM EQU   RPHRESMA+1
RPHRSV01 EQU   RPHWPFLG
RPHPURGE EQU   RPHWPFLG
RPHPT    EQU   RPHWPFLG
RPHWT    EQU   RPHWPFLG
RPHRSKEY EQU   RPHWPFLG
RPHDVTA  EQU   ISTRPH+12
RPHTIK   EQU   RPHTSKID+3
@NM00051 EQU   RPHTSKID
RPHRPHAP EQU   RPHRPHA+1
@NM00050 EQU   RPHRPHA
RPHGATE  EQU   RPHRPHA
@NM00049 EQU   RPHFLGB
RPHRLCRA EQU   RPHFLGB
RPHNRSAV EQU   RPHFLGB
RPHPGCMP EQU   RPHFLGB
RPHFBAPS EQU   RPHFLGB
RPHBSSP  EQU   RPHFLGB
RPHLOCK  EQU   RPHFLGB
RPHFNFLG EQU   RPHFSTLC
RPHMLTCP EQU   RPHFLAGS
RPHSMCLR EQU   RPHFLAGS
RPHSMTYP EQU   RPHFLAGS
RPHSMQ   EQU   RPHFLAGS
RPHAUTEX EQU   RPHAPTYP
RPHSPGIN EQU   RPHFLAGS
RPHOGIND EQU   RPHFLAGS
RPHLNGTH EQU   RPHCNTL+1
RPHTYPE  EQU   RPHCNTL
@NM00048 EQU   ISTAPCRR+137
@NM00047 EQU   APC57FLG
APCNREL  EQU   APC57FLG
APCRECRA EQU   APC57FLG
@NM00046 EQU   APC54FLG
APCRLST  EQU   APC54FLG
APCPR153 EQU   APC53FLG
@NM00045 EQU   APC52FLG
APCWKF   EQU   APC52FLG
APCNWF   EQU   APC52FLG
APCRDQ   EQU   APC52FLG
APCQENQ  EQU   APC52FLG
APCSMSR  EQU   APC52FLG
APCCKRQ  EQU   APC52FLG
@NM00044 EQU   APC31FLG
APCSORT  EQU   APC31FLG
APCRESCH EQU   APC31FLG
APCTPXIT EQU   APC31FLG
APCSWTWD EQU   ISTAPCRR+128
APCSAV2  EQU   ISTAPCRR+124
APCSAV1  EQU   ISTAPCRR+120
APCRETCD EQU   APCCOMF+2
@NM00043 EQU   APCCOMF1+1
APCZLBER EQU   APCCOMF1
APCEXIT  EQU   APCCOMF1
APCRELR  EQU   APCCOMF1
APCIRB2  EQU   APCCOMF1
APCIRB1  EQU   APCCOMF1
APCSMCR  EQU   APCCOMF1
APCUETSK EQU   APCCOMF1
APCSSTSK EQU   APCCOMF1
APCESTAL EQU   APCSAVE
APCFRRPM EQU   ISTAPCRR+40
APCQWFO  EQU   ISTAPCRR+36
APCPABSV EQU   ISTAPCRR+32
APCRTRN  EQU   ISTAPCRR+28
APCTCBA  EQU   ISTAPCRR+24
APCPSTA  EQU   ISTAPCRR+20
@NM00042 EQU   APCRFLG+1
APC31R   EQU   APCRFLG
APC58R   EQU   APCRFLG
APC57R   EQU   APCRFLG
APC56R   EQU   APCRFLG
APC54R   EQU   APCRFLG
APC53R   EQU   APCRFLG
APC52R   EQU   APCRFLG
APC51R   EQU   APCRFLG
@NM00041 EQU   APCATFLG+1
APC31E   EQU   APCATFLG
APC58E   EQU   APCATFLG
APC57E   EQU   APCATFLG
APC56E   EQU   APCATFLG
APC54E   EQU   APCATFLG
APC53E   EQU   APCATFLG
APC52E   EQU   APCATFLG
APC51E   EQU   APCATFLG
APCHDRSV EQU   ISTAPCRR
ASCPSREG EQU   ISTASCRR+44
ASCUSR01 EQU   ASCUSRGS+12
ASCUSR00 EQU   ASCUSRGS+8
ASCUSR15 EQU   ASCUSRGS+4
ASCUSR14 EQU   ASCUSRGS
ASCETRYA EQU   ISTASCRR+24
ASCKEY   EQU   ISTASCRR+23
ASCAUDIT EQU   ASCFLG3
ASCFBDUD EQU   ASCFLG3
ASCLLKF  EQU   ASCFLG3
ASCKEYF  EQU   ASCFLG3
ASCFBDAL EQU   ASCFLG3
ASCFSRGT EQU   ASCFLG3
ASCICR   EQU   ASCFLG2
ASCFSRIC EQU   ASCFLG2
ASCFBDIC EQU   ASCFLG2
ASCFBAIC EQU   ASCFLG2
ASCPASTR EQU   ASCFLG1
ASCFSR   EQU   ASCFLG1
ASCFBD   EQU   ASCFLG1
ASCFBA   EQU   ASCFLG1
ASCPFCRR EQU   ISTASCRR
ZCRRU    EQU   ZCRRHRU+3
ZCRRH    EQU   ZCRRHRU
ZCRWORDA EQU   ISTZCRR+477
ZCRCMNRC EQU   ISTZCRR+476
ZCRRSV97 EQU   ZCRENTER+18
ZCREIC2B EQU   ZCRENTER+18
ZCREAC2B EQU   ZCRENTER+18
ZCRELCAB EQU   ZCRENTER+18
ZCREDCMF EQU   ZCRENTER+18
ZCREBCIF EQU   ZCRENTER+18
ZCREICSG EQU   ZCRENTER+18
ZCREDCK0 EQU   ZCRENTER+18
ZCRECFY0 EQU   ZCRENTER+17
ZCREKCCB EQU   ZCRENTER+17
ZCREDCNB EQU   ZCRENTER+17
ZCREICOE EQU   ZCRENTER+17
ZCREBCNB EQU   ZCRENTER+17
ZCREBC0L EQU   ZCRENTER+17
ZCREBCAL EQU   ZCRENTER+17
ZCREDCQR EQU   ZCRENTER+17
ZCREDCPR EQU   ZCRENTER+16
ZCREBCSB EQU   ZCRENTER+16
ZCREAC1R EQU   ZCRENTER+16
ZCRECCCI EQU   ZCRENTER+16
ZCRECCAI EQU   ZCRENTER+16
ZCRECCBI EQU   ZCRENTER+16
ZCREBCAR EQU   ZCRENTER+16
ZCREBCDR EQU   ZCRENTER+16
ZCREBCBR EQU   ZCRENTER+15
ZCREDCXR EQU   ZCRENTER+15
ZCREDCWB EQU   ZCRENTER+15
ZCREDCWR EQU   ZCRENTER+15
ZCREKCCN EQU   ZCRENTER+15
ZCREKCBN EQU   ZCRENTER+15
ZCREKCBB EQU   ZCRENTER+15
ZCREJC0B EQU   ZCRENTER+15
ZCREJCDB EQU   ZCRENTER+14
ZCREJCCB EQU   ZCRENTER+14
ZCREJCBB EQU   ZCRENTER+14
ZCREJCAB EQU   ZCRENTER+14
ZCREIC1B EQU   ZCRENTER+14
ZCREIC0B EQU   ZCRENTER+14
ZCREICX0 EQU   ZCRENTER+14
ZCREICWB EQU   ZCRENTER+14
ZCREICVB EQU   ZCRENTER+13
ZCREICUB EQU   ZCRENTER+13
ZCREICTB EQU   ZCRENTER+13
ZCREICSC EQU   ZCRENTER+13
ZCREICSB EQU   ZCRENTER+13
ZCREICRB EQU   ZCRENTER+13
ZCREICQB EQU   ZCRENTER+13
ZCREICQA EQU   ZCRENTER+13
ZCREICOB EQU   ZCRENTER+12
ZCREICOA EQU   ZCRENTER+12
ZCREICNB EQU   ZCRENTER+12
ZCREICNA EQU   ZCRENTER+12
ZCREICMB EQU   ZCRENTER+12
ZCREICLB EQU   ZCRENTER+12
ZCREICKG EQU   ZCRENTER+12
ZCREICKE EQU   ZCRENTER+12
ZCREICKB EQU   ZCRENTER+11
ZCREICJB EQU   ZCRENTER+11
ZCREICID EQU   ZCRENTER+11
ZCREICIB EQU   ZCRENTER+11
ZCREICHB EQU   ZCRENTER+11
ZCREICGB EQU   ZCRENTER+11
ZCREICEB EQU   ZCRENTER+11
ZCREICDB EQU   ZCRENTER+11
ZCREICCI EQU   ZCRENTER+10
ZCREICCB EQU   ZCRENTER+10
ZCREICBI EQU   ZCRENTER+10
ZCREICBB EQU   ZCRENTER+10
ZCREICAB EQU   ZCRENTER+10
ZCREICAA EQU   ZCRENTER+10
ZCREHCAN EQU   ZCRENTER+10
ZCREGC0B EQU   ZCRENTER+10
ZCREGC0A EQU   ZCRENTER+9
ZCREGCLA EQU   ZCRENTER+9
ZCREGCEB EQU   ZCRENTER+9
ZCREGCDB EQU   ZCRENTER+9
@NM00040 EQU   ZCRENTER+9
ZCREGCBB EQU   ZCRENTER+9
ZCREGCAB EQU   ZCRENTER+9
ZCREFCEB EQU   ZCRENTER+9
ZCREFCEA EQU   ZCRENTER+8
ZCREECTA EQU   ZCRENTER+8
ZCREECEA EQU   ZCRENTER+8
ZCREECDA EQU   ZCRENTER+8
ZCREECCB EQU   ZCRENTER+8
ZCREECCA EQU   ZCRENTER+8
ZCREECBB EQU   ZCRENTER+8
ZCREECBA EQU   ZCRENTER+8
ZCREDCMB EQU   ZCRENTER+7
ZCREDCL0 EQU   ZCRENTER+7
ZCREDCKB EQU   ZCRENTER+7
ZCREDCKA EQU   ZCRENTER+7
ZCREDCJ0 EQU   ZCRENTER+7
ZCREDCI0 EQU   ZCRENTER+7
ZCREDCH0 EQU   ZCRENTER+7
ZCREDCF0 EQU   ZCRENTER+7
ZCREDCE0 EQU   ZCRENTER+6
ZCREDCD0 EQU   ZCRENTER+6
ZCREDCC0 EQU   ZCRENTER+6
ZCREDCB0 EQU   ZCRENTER+6
ZCREDCA0 EQU   ZCRENTER+6
ZCRECC2B EQU   ZCRENTER+6
ZCRECC1B EQU   ZCRENTER+6
ZCRECC1A EQU   ZCRENTER+6
ZCRECC0B EQU   ZCRENTER+5
ZCRECC0A EQU   ZCRENTER+5
ZCREBC0B EQU   ZCRENTER+5
ZCREBC0A EQU   ZCRENTER+5
ZCREBCZ0 EQU   ZCRENTER+5
ZCREBCY0 EQU   ZCRENTER+5
ZCREBCX0 EQU   ZCRENTER+5
ZCREBCXA EQU   ZCRENTER+5
ZCREBCSC EQU   ZCRENTER+4
ZCREBCRB EQU   ZCRENTER+4
ZCREBCRA EQU   ZCRENTER+4
ZCREBCQB EQU   ZCRENTER+4
ZCREBCPB EQU   ZCRENTER+4
ZCREBCOB EQU   ZCRENTER+4
ZCREBCNE EQU   ZCRENTER+4
ZCREBCND EQU   ZCRENTER+4
ZCREBCMB EQU   ZCRENTER+3
ZCREBCLB EQU   ZCRENTER+3
ZCREBCLA EQU   ZCRENTER+3
ZCREBCKB EQU   ZCRENTER+3
ZCREBCKA EQU   ZCRENTER+3
ZCREBCJB EQU   ZCRENTER+3
ZCREBCJA EQU   ZCRENTER+3
ZCREBCID EQU   ZCRENTER+3
ZCREBCIB EQU   ZCRENTER+2
ZCREBCIA EQU   ZCRENTER+2
ZCREBCHB EQU   ZCRENTER+2
ZCREBCHA EQU   ZCRENTER+2
ZCREBCGB EQU   ZCRENTER+2
ZCREBCGA EQU   ZCRENTER+2
ZCREBCFB EQU   ZCRENTER+2
ZCREBCFA EQU   ZCRENTER+2
ZCREBCEB EQU   ZCRENTER+1
ZCREBCDI EQU   ZCRENTER+1
ZCREBCCB EQU   ZCRENTER+1
ZCREBCBI EQU   ZCRENTER+1
ZCREBCBB EQU   ZCRENTER+1
ZCREBCBA EQU   ZCRENTER+1
ZCREBCAM EQU   ZCRENTER+1
ZCREBCAI EQU   ZCRENTER+1
ZCREBCAG EQU   ZCRENTER
ZCREBCAE EQU   ZCRENTER
ZCREBCAB EQU   ZCRENTER
ZCREBCAA EQU   ZCRENTER
ZCREAC1B EQU   ZCRENTER
ZCREAC0B EQU   ZCRENTER
ZCREAC0A EQU   ZCRENTER
ZCREAC1A EQU   ZCRENTER
ZCRTNAME EQU   ZCRAUDIT+1
ZCRTID   EQU   ZCRAUDIT
ZCRREMIC EQU   ISTZCRR+436
ZCRSAVEZ EQU   ISTZCRR+196
ZCRDAFSV EQU   ZCRCIDSV+2
ZCRSAFSV EQU   ZCRCIDSV
ZCRR13SV EQU   ISTZCRR+188
ZCRR2SV  EQU   ISTZCRR+184
ZCROPCDE EQU   ISTZCRR+183
ZCRPRMTC EQU   ISTZCRR+182
ZCRRCDSV EQU   ISTZCRR+181
ZCRAWQSW EQU   ISTZCRR+180
ZCRTOPQ  EQU   ISTZCRR+180
ZCRLSTFB EQU   ISTZCRR+180
ZCRXSCHD EQU   ISTZCRR+180
ZCRNXTEL EQU   ISTZCRR+180
ZCRSCANQ EQU   ISTZCRR+180
ZCRMOREL EQU   ISTZCRR+180
ZCRFBPRC EQU   ISTZCRR+180
ZCRFSBSV EQU   ISTZCRR+176
ZCRSVWK5 EQU   ZCRWKARA+16
ZCRSVWK4 EQU   ZCRWKARA+12
ZCRSVWK3 EQU   ZCRWKARA+8
ZCRSVWK2 EQU   ZCRWKARA+4
ZCRSVWK1 EQU   ZCRWKARA
ZCRSVF25 EQU   ZCRSVRTN+96
ZCRSVF24 EQU   ZCRSVRTN+92
ZCRSVF23 EQU   ZCRSVRTN+88
ZCRSVF22 EQU   ZCRSVRTN+84
ZCRSVF21 EQU   ZCRSVRTN+80
ZCRSVF20 EQU   ZCRSVRTN+76
ZCRSVF19 EQU   ZCRSVRTN+72
ZCRSVF18 EQU   ZCRSVRTN+68
ZCRSVF17 EQU   ZCRSVRTN+64
ZCRSVF16 EQU   ZCRSVRTN+60
ZCRSVF15 EQU   ZCRSVRTN+56
ZCRSVF14 EQU   ZCRSVRTN+52
ZCRSVF13 EQU   ZCRSVRTN+48
ZCRSVF12 EQU   ZCRSVRTN+44
ZCRSVF11 EQU   ZCRSVRTN+40
ZCRSVF10 EQU   ZCRSVRTN+36
ZCRSVF9  EQU   ZCRSVRTN+32
ZCRSVF8  EQU   ZCRSVRTN+28
ZCRSVF7  EQU   ZCRSVRTN+24
ZCRSVF6  EQU   ZCRSVRTN+20
ZCRSVF5  EQU   ZCRSVRTN+16
ZCRSVF4  EQU   ZCRSVRTN+12
ZCRSVF3  EQU   ZCRSVRTN+8
ZCRSVF2  EQU   ZCRSVRTN+4
ZCRSVF1  EQU   ZCRSVRTN
ZCRPVZB  EQU   ISTZCRR+52
ZCRZLB   EQU   ISTZCRR+48
ZCRBFPTR EQU   ISTZCRR+44
ZCRCCWA  EQU   ISTZCRR+40
ZCRPSW   EQU   ZCRPARMS+15
ZCRPCHAR EQU   ZCRPARMS+14
ZCRPRES2 EQU   ZCRPCOD2
ZCRPMFGF EQU   ZCRPCOD2
ZCRPFHDR EQU   ZCRPCOD2
ZCRPPG2  EQU   ZCRPCOD2
ZCRPRES  EQU   ZCRPCOD1
ZCRPCFTX EQU   ZCRPCOD1
ZCRPBUF  EQU   ZCRPCOD1
ZCRPLSCB EQU   ZCRPCOD1
ZCRPLSBQ EQU   ZCRPLSBF
ZCRPFSB  EQU   ZCRPCOD1
ZCRPLNG  EQU   ZCRPCOD1
ZCRPPG   EQU   ZCRPCOD1
ZCRDTODA EQU   ZCRDFRDA
ZCRMLNG  EQU   ZCRPARMS+8
ZCRTBPTR EQU   ZCRPARMS+4
ZCRCBPTR EQU   ZCRFBPTR
ZCRCRLCP EQU   ISTZCRR+20
@NM00039 EQU   ZCRSCPSW
ZCRSKIPT EQU   ZCRSCPSW
ZCRFSBWE EQU   ZCRSCPSW
ZCRPRCMP EQU   ZCRSCPSW
ZCRLREQ  EQU   ZCRSCPSW
ZCRRJLCP EQU   ZCRSCPSW
ZCRTPINV EQU   ZCRSCPSW
ZCRTPEX  EQU   ZCRSCPSW
@NM00038 EQU   ZCRIBPR
ZCR3270R EQU   ZCRIBPR
ZCR3270  EQU   ZCRIBPR
ZCRLCPFD EQU   ZCRIBPR
ZCRLCPFR EQU   ZCRIBPR
ZCRRELK  EQU   ZCRIBPR
ZCRERR   EQU   ZCRIBPR
ZCRNOBUF EQU   ZCRIBPR
@NM00037 EQU   ZCRPFLGS
ZCRQAHED EQU   ZCRPFLGS
ZCRF1RES EQU   ZCRGENSW
ZCRBRIS  EQU   ZCRGENSW
ZCRCLRBD EQU   ZCRGENSW
ZCREXRES EQU   ZCRGENSW
ZCRLCSYN EQU   ZCRGENSW
ZCRRT06  EQU   ZCRGENSW
ZCRTSW2  EQU   ZCRGENSW
ZCRTSW1  EQU   ZCRGENSW
ZCRINLCP EQU   ZCRFLGS3
ZCRWRPTR EQU   ZCRFLGS3
ZCRNOFRE EQU   ZCRFLGS3
ZCREDRIV EQU   ZCRFLGS3
ZCRDISC  EQU   ZCRFLGS3
ZCRTPDIS EQU   ZCRFLGS3
ZCRTPCON EQU   ZCRFLGS3
ZCRTIC   EQU   ZCRFLGS3
ZCRCNLXL EQU   ZCRRESET
ZCRENDAN EQU   ZCRSWFLD
ZCRENDXL EQU   ZCRSWFLD
ZCRENDX  EQU   ZCRSWFLD
ZCROB1   EQU   ZCRNDLCP
ZCRENDPR EQU   ZCRSWFLD
ZCREXTYP EQU   ZCRSWFLD
ZCRSLCP  EQU   ZCRENDSH
ZCRIF0E3 EQU   ZCRFLGS2
ZCRIF0E2 EQU   ZCRFLGS2
ZCRIF0E1 EQU   ZCRFLGS2
ZCROB    EQU   ZCRFLGS2
ZCRFMSED EQU   ZCRFLGS2
ZCRSHEDI EQU   ZCRFLGS2
ZCRLOCAL EQU   ZCRFLGS2
ZCRFEXIT EQU   ZCRFLGS1
ZCRUNSOL EQU   ZCRFLGS1
ZCRENDLP EQU   ZCRFLGS1
ZCRNRMEX EQU   ZCRFLGS1
ZCRWAIT  EQU   ZCRFLGS1
ZCRDEQSW EQU   ZCRFLGS1
ZCRQUESW EQU   ZCRFLGS1
ZCREXSW  EQU   ZCRFLGS1
ZCRFRRA  EQU   ISTZCRR+8
ZCRCHAIN EQU   ISTZCRR+4
ZCRFLAG  EQU   ZCRCRR+3
ZCRLEN   EQU   ZCRCRR+1
ZCRID    EQU   ZCRCRR
CCFRSVD1 EQU   CFCCRT
CCFCR2   EQU   CFCCRT
CCFCRP   EQU   CFCCRT
CCFCR1   EQU   CFCCRT
CCFCS2   EQU   CFCCRT
CCFCS1   EQU   CFCCRT
NCFRSVD  EQU   CFCNTRD
NCFCR2   EQU   CFCNTRD
NCFCRP   EQU   CFCNTRD
NCFCR1   EQU   CFCNTRD
NCFCS2   EQU   CFCNTRD
NCFCS1   EQU   CFCNTRD
PFCRSV01 EQU   ISTPFCRR+13
PFCFTA   EQU   ISTPFCRR+12
CRRFRR   EQU   PFCFRRO
CRRCHAIN EQU   PFCCRRO
CRRLEN   EQU   PFCCRRLN
PFCRSV10 EQU   PFCCRR+1
CRRID    EQU   PFCCRRID
ZSAZTRAC EQU   ISTZSAVE+36
ZSAZSVVR EQU   ISTZSAVE+12
ZSAZSVRR EQU   ISTZSAVE+8
ZSAZSVFC EQU   ISTZSAVE+4
ZSAZACTV EQU   ZSAZSVMS
LCPFTYPE EQU   LCPRPHA
LCPRSTQH EQU   LCPLCCW
LCPCLREP EQU   ISTLCPB+44
LCPUBFSB EQU   LCPFLCCW
LCPRSV77 EQU   ISTLCPB+39
LCPLCCWC EQU   ISTLCPB+38
LCPRSV78 EQU   LCPFLG1
LCPTRANS EQU   LCPFLG1
LCPSTLB  EQU   LCPFLG1
LCPREDRV EQU   LCPFLG1
LCPDIRPT EQU   LCPFLG1
LCPINTER EQU   LCPFLG1
LCPRESET EQU   LCPFLG1
LCPSTYPE EQU   ISTLCPB+36
LCPFSNCH EQU   ISTLCPB+34
LCPFOSN  EQU   ISTLCPB+32
LCPTLBAD EQU   ISTLCPB+28
LCPFDB2  EQU   LCPFDBA+1
LCPFDB1  EQU   LCPFDBA
LCPNXLCW EQU   ISTLCPB+20
LCPDAF   EQU   LCPCID+2
LCPSAF   EQU   LCPCID
LCPLCCW1 EQU   ISTLCPB+12
LCPRRCNT EQU   LCPSEQ+1
LCPRRCCT EQU   LCPSEQ
LCPATOP  EQU   LCPFLAG2
LCPFREE  EQU   LCPFLAG2
LCPDSTAT EQU   LCPFLAG2
LCPEXRES EQU   LCPFID0
LCPZRIMM EQU   LCPTLBPI
LCPRSTRT EQU   LCPFLAG2
LCPASYN  EQU   LCPFLAG2
LCPPRFLG EQU   LCPFLAG2
LCPZMIRC EQU   LCPRUCNT
LCPCHAI2 EQU   LCPCHAIN+1
LCPCHNG  EQU   LCPCHAI1
LCPZRT0B EQU   LCPMNRCD
LCPZRT0A EQU   LCPMNRCD
LCPZRTL9 EQU   LCPZRT09
LCPZRTL8 EQU   LCPZRT08
LCPZRTL7 EQU   LCPZRT07
LCPZRTL6 EQU   LCPZRT06
LCPZRTL5 EQU   LCPZRT05
LCPZRTL4 EQU   LCPZRT04
LCPZRTL3 EQU   LCPZRT03
LCPZRTL2 EQU   LCPZRT02
LCPZRT01 EQU   LCPFLAGS
LCPZRT00 EQU   LCPFLAGS
LCPLNGTH EQU   ISTLCPB+1
LCPTYPE  EQU   ISTLCPB
LCCWDATA EQU   ISTLCCW+4
LCCWCNT  EQU   ISTLCCW+2
LCCWACI  EQU   LCCWFLAG
LCCWRFI  EQU   LCCWFLAG
LCCWPER  EQU   LCCWLSI
LCCWIDAT EQU   LCCWFLAG
LCCWNTVC EQU   LCCWFLAG
LCCWCKPT EQU   LCCWFLAG
LCCWCC   EQU   LCCWFLAG
LCCWCD   EQU   LCCWFLAG
LCCWTYPE EQU   LCCWCTL
LCCWMODE EQU   LCCWCTL
LCCWSOP  EQU   LCCWRWOP
@NM00036 EQU   LCCWRWOP
LCCWSD   EQU   LCCWOP
LCCWSI   EQU   LCCWOP
CRRRVPT5 EQU   CRRSAREA+316
CRRRVPT4 EQU   CRRSAREA+312
CRRRVPT3 EQU   CRRSAREA+308
CRRRVPT2 EQU   CRRSAREA+304
CRRRVPT1 EQU   CRRSAREA+300
CRRRVCR2 EQU   CRRSAREA+292
CRRRVCR1 EQU   CRRSAREA+291
CRRXFNCD EQU   CRRSAREA+290
CRRLDOCT EQU   CRRSAREA+288
@NM00035 EQU   CRRBFLGS
CRRRTN12 EQU   CRRSAREA+268
CRRRTN11 EQU   CRRSAREA+264
CRRRTN10 EQU   CRRSAREA+260
CRRRTN6  EQU   CRRSAREA+244
CRRRTN5  EQU   CRRSAREA+240
CRRRTN4  EQU   CRRSAREA+236
CRRRTN3  EQU   CRRSAREA+232
CRRRTN2  EQU   CRRSAREA+228
CRRRTN1  EQU   CRRSAREA+224
CRRRES1  EQU   CRRSAREA+222
CRRLCNT  EQU   CRRSAREA+220
CRRATCVT EQU   CRRSAREA+216
CRRBIND  EQU   CRRTRBUF+3
CRRTRRES EQU   CRRTRBUF
CRRCLDO  EQU   CRRSAREA+200
CRRUECB  EQU   CRRSAREA+196
CRRLCPB  EQU   CRRSAREA+192
CRRCMDAD EQU   CRRSAREA+188
CRRFMCB  EQU   CRRSAREA+184
CRRCLCCW EQU   CRRSAREA+180
CRRESR2  EQU   CRRESR+1
CRRESR1  EQU   CRRESR
CRRDSB2  EQU   CRRDSB+1
CRRDSB1  EQU   CRRDSB
CRRDTACT EQU   CRRSAREA+174
CRRRSV99 EQU   CRRSAREA+173
CRRRDSOH EQU   CRRFDB3
CRRRLG   EQU   CRRFDB3
CRRLGFRC EQU   CRRFDB3
CRRRDEOT EQU   CRRFDB3
CRRRDEOM EQU   CRRFDB3
CRRRDEOB EQU   CRRFDB3
CRRUNUSD EQU   CRRFDB3
CRRUINPT EQU   CRRFDB3
CRRSTSAV EQU   CRRFDB2
CRRCUERR EQU   CRRFDB2
CRRDLGFL EQU   CRRFDB2
CRRIOERR EQU   CRRFDB2
CRRDVUNS EQU   CRRFDB2
CRRATND  EQU   CRRFDB2
CRRRVID  EQU   CRRFDB2
CRRERLK  EQU   CRRFDB2
CRRNSNA  EQU   CRRRTYPE
CRRDFSYN EQU   CRRRTYPE
CRRRESP  EQU   CRRRTYPE
CRRDFASY EQU   CRRRTYPE
CRRDBLCK EQU   CRRRFLG1
CRRRPSBD EQU   CRRRFLG1
CRRRPLOQ EQU   CRRRFLG1
CRRRPLS  EQU   CRRRFLG1
CRRSW7   EQU   CRRFLGS
CRRSW6   EQU   CRRFLGS
CRRSW5   EQU   CRRFLGS
CRRSW4   EQU   CRRFLGS
CRRSW3   EQU   CRRFLGS
CRRSW2   EQU   CRRFLGS
CRRSW1   EQU   CRRFLGS
CRRSW0   EQU   CRRFLGS
CRRRSV04 EQU   CRRFLGS4
CRRFMCLK EQU   CRRFLGS4
CRRDLCCW EQU   CRRFLGS3
CRRRESET EQU   CRRFLGS3
CRRSUBBK EQU   CRRFLGS3
CRRRSV08 EQU   CRRFLGS3
CRRDEBQ  EQU   CRRFLGS3
CRRSTSPR EQU   CRRFLGS3
CRRDREQ  EQU   CRRFLGS3
CRRDFDBK EQU   CRRFLGS3
CRRDFSB  EQU   CRRFLGS2
CRRDPROC EQU   CRRFLGS2
CRREXTS  EQU   CRRFLGS2
CRRELSRI EQU   CRRFLGS2
CRRPOST  EQU   CRRFLGS2
CRRENDLW EQU   CRRFLGS2
CRRPRGIP EQU   CRRFLGS2
CRRDEXP  EQU   CRRFLGS2
CRRSOLRQ EQU   CRRFLGS1
CRRREQP  EQU   CRRFLGS1
CRRCPROC EQU   CRRFLGS1
CRRFINI  EQU   CRRFLGS1
CRRPREIO EQU   CRRFLGS1
CRRINIO  EQU   CRRFLGS1
CRRFLDOS EQU   CRRFLGS1
CRRDOCUR EQU   CRRFLGS1
CRRRATS4 EQU   CRRATS+7
@NM00034 EQU   CRRSATS
CRRASC51 EQU   CRRSATS
CRRASC40 EQU   CRRSATS
CRRASC30 EQU   CRRSATS
CRRASC21 EQU   CRRSATS
CRRASC10 EQU   CRRSATS
CRRASC01 EQU   CRRSATS
@NM00033 EQU   CRRRATS2
CRRPLIC  EQU   CRRRATS2
CRRRC81  EQU   CRRRATS2
CRRRC80  EQU   CRRRATS2
CRRRC65  EQU   CRRRATS2
CRRRC63  EQU   CRRRATS2
CRRRC55  EQU   CRRRATS2
CRRRC54  EQU   CRRRATS2
CRRRC53  EQU   CRRRATS1
CRRRC52  EQU   CRRRATS1
CRRRC51  EQU   CRRRATS1
CRRRC30  EQU   CRRRATS1
CRRRC26  EQU   CRRRATS1
CRRRC23  EQU   CRRRATS1
CRRRC22  EQU   CRRRATS1
CRRRC21  EQU   CRRRATS1
@NM00032 EQU   CRRATS4
CRRC3X   EQU   CRRATS4
CRRC85   EQU   CRRATS4
CRRC83   EQU   CRRATS4
CRRC82   EQU   CRRATS4
CRRC61   EQU   CRRATS4
CRRC81   EQU   CRRATS3
CRRC80   EQU   CRRATS3
CRRC75   EQU   CRRATS3
CRRC51   EQU   CRRATS3
CRRC50   EQU   CRRATS3
CRRC42   EQU   CRRATS3
CRRC41   EQU   CRRATS3
CRRC40   EQU   CRRATS3
CRRC32   EQU   CRRATS2
CRRC31   EQU   CRRATS2
CRRC30   EQU   CRRATS2
CRRC25   EQU   CRRATS2
CRRC24   EQU   CRRATS2
CRRC23   EQU   CRRATS2
CRRC22   EQU   CRRATS2
CRRC21   EQU   CRRATS2
CRRC20   EQU   CRRATS1
CRRC13   EQU   CRRATS1
CRRC12   EQU   CRRATS1
CRRC11   EQU   CRRATS1
CRRC10   EQU   CRRATS1
CRRC02   EQU   CRRATS1
CRRC01   EQU   CRRATS1
CRRC00   EQU   CRRATS1
CRRRMAS4 EQU   CRRMAS+7
@NM00031 EQU   CRRSMAS
CRRMSC51 EQU   CRRSMAS
CRRMSC40 EQU   CRRSMAS
CRRMSC30 EQU   CRRSMAS
CRRMSC21 EQU   CRRSMAS
CRRMSC10 EQU   CRRSMAS
CRRMSC01 EQU   CRRSMAS
@NM00030 EQU   CRRRMAS2
CRRRM81  EQU   CRRRMAS2
CRRRM80  EQU   CRRRMAS2
CRRRM65  EQU   CRRRMAS2
CRRRM63  EQU   CRRRMAS2
CRRRM55  EQU   CRRRMAS2
CRRRM54  EQU   CRRRMAS2
CRRRM53  EQU   CRRRMAS1
CRRRM52  EQU   CRRRMAS1
CRRRM51  EQU   CRRRMAS1
CRRRM30  EQU   CRRRMAS1
CRRRM26  EQU   CRRRMAS1
CRRRM23  EQU   CRRRMAS1
CRRRM22  EQU   CRRRMAS1
CRRRM21  EQU   CRRRMAS1
@NM00029 EQU   CRRMAS4
CRRM3X   EQU   CRRMAS4
CRRM85   EQU   CRRMAS4
CRRM83   EQU   CRRMAS4
CRRM82   EQU   CRRMAS4
CRRM61   EQU   CRRMAS4
CRRM81   EQU   CRRMAS3
CRRM80   EQU   CRRMAS3
CRRM75   EQU   CRRMAS3
CRRM51   EQU   CRRMAS3
CRRM50   EQU   CRRMAS3
CRRM42   EQU   CRRMAS3
CRRM41   EQU   CRRMAS3
CRRM40   EQU   CRRMAS3
CRRM32   EQU   CRRMAS2
CRRM31   EQU   CRRMAS2
CRRM30   EQU   CRRMAS2
CRRM25   EQU   CRRMAS2
CRRM24   EQU   CRRMAS2
CRRM23   EQU   CRRMAS2
CRRM22   EQU   CRRMAS2
CRRM21   EQU   CRRMAS2
CRRM20   EQU   CRRMAS1
CRRM13   EQU   CRRMAS1
CRRM12   EQU   CRRMAS1
CRRM11   EQU   CRRMAS1
CRRM10   EQU   CRRMAS1
CRRM02   EQU   CRRMAS1
CRRM01   EQU   CRRMAS1
CRRM00   EQU   CRRMAS1
CRRRSV22 EQU   ISTDCCRR+4
CRRCRR   EQU   ISTDCCRR
RPLSEQNO EQU   RPLOF60+6
@NM00028 EQU   RPLIBSQ
RPLIINV  EQU   RPLIBSQ
RPLINEG  EQU   RPLIBSQ
RPLIPOS  EQU   RPLIBSQ
RPLIIGN  EQU   RPLIBSQ
RPLIRSET EQU   RPLIBSQ
RPLITST  EQU   RPLIBSQ
RPLISET  EQU   RPLIBSQ
@NM00027 EQU   RPLOBSQ
RPLOINV  EQU   RPLOBSQ
RPLONEG  EQU   RPLOBSQ
RPLOPOS  EQU   RPLOBSQ
RPLOIGN  EQU   RPLOBSQ
RPLORSET EQU   RPLOBSQ
RPLOTST  EQU   RPLOBSQ
RPLOSET  EQU   RPLOBSQ
RPLIBSQV EQU   RPLOF60+2
RPLOBSQV EQU   RPLOF60
@NM00026 EQU   RPLCNTSC
RPLRSHUT EQU   RPLCNTSC
RPLRQR   EQU   RPLCNTSC
RPLSHUTC EQU   RPLCNTSC
RPLSHUTD EQU   RPLCNTSC
RPLSTSN  EQU   RPLCNTSC
RPLCLEAR EQU   RPLCNTSC
RPLSDT   EQU   RPLCNTSC
@NM00025 EQU   RPLCNTDC
RPLSIGNL EQU   RPLCNTDC
RPLLUS   EQU   RPLCNTDC
RPLRTR   EQU   RPLCNTDC
RPLBID   EQU   RPLCNTDC
@NM00024 EQU   RPLCNTDF
RPLQI    EQU   RPLCNTDF
RPLRELQ  EQU   RPLCNTDF
RPLCHASE EQU   RPLCNTDF
RPLQEC   EQU   RPLCNTDF
RPLQC    EQU   RPLCNTDF
RPLCNCEL EQU   RPLCNTDF
RPLDATA  EQU   RPLCNTDF
RPLRRN   EQU   RPLRESP
RPLNFME  EQU   RPLRESP
RPLEX    EQU   RPLRESP
@NM00023 EQU   RPLRESP
@NM00022 EQU   RPLPOSTV
RPLSCHED EQU   RPLPOSTV
@NM00021 EQU   RPLVTFL1
RPLVTUSE EQU   RPLVTFL1
@NM00020 EQU   RPLVTFL1
@NM00019 EQU   RPLCHN
RPLONLY  EQU   RPLCHN
RPLLAST  EQU   RPLCHN
RPLMIDLE EQU   RPLCHN
RPLFIRST EQU   RPLCHN
@NM00018 EQU   RPLRTYPE
RPLDFASY EQU   RPLRTYPE
RPLNFSYN EQU   RPLRTYPE
RPLRRESP EQU   RPLRTYPE
@NM00017 EQU   RPLSTYPE
RPLSRESP EQU   RPLSTYPE
@NM00016 EQU   RPLRH3
RPLCSI   EQU   RPLRH3
RPLCHREQ EQU   RPLRH3
RPLCMD   EQU   RPLRH3
RPLEB    EQU   RPLRH3
RPLBB    EQU   RPLRH3
RPLSIGDA EQU   RPLVTEXT+32
RPLSAV13 EQU   RPLVTEXT+28
RPLUSNSO EQU   RPLOSENS+2
RPLSSMO  EQU   RPLSSNSO+1
@NM00015 EQU   RPLSSEO
RPLRRO   EQU   RPLSSEO
RPLFIO   EQU   RPLSSEO
RPLSTATO EQU   RPLSSEO
RPLCPMO  EQU   RPLSSEO
@NM00014 EQU   RPLSSEO
RPLFMHDR EQU   RPLOPT12
@NM00013 EQU   RPLOPT12
@NM00012 EQU   RPLOPT12
@NM00011 EQU   RPLOPT12
RPLNIBTK EQU   RPLOPT12
RPLTRUNC EQU   RPLOPT12
RPLKEEP  EQU   RPLOPT12
@NM00010 EQU   RPLOPT12
RPLRSVE8 EQU   RPLOPT11
RPLRSVE7 EQU   RPLOPT11
RPLRSVE6 EQU   RPLOPT11
RPLRSVE5 EQU   RPLOPT11
RPLRSVE4 EQU   RPLOPT11
RPLSTOP  EQU   RPLOPT11
RPLSTART EQU   RPLOPT11
RPLQUIES EQU   RPLOPT11
RPLRSVI6 EQU   RPLOPT10
RPLRSVI5 EQU   RPLOPT10
RPLRSVI4 EQU   RPLOPT10
RPLRSVI3 EQU   RPLOPT10
RPLRSVI2 EQU   RPLOPT10
RPLSPARM EQU   RPLOPT10
RPLDSPLY EQU   RPLOPT10
RPLBSCID EQU   RPLOPT10
RPLTOPL  EQU   RPLOPT9
RPLCIDE  EQU   RPLOPT9
RPLRNNM  EQU   RPLOPT9
RPLAPPST EQU   RPLOPT9
RPLCOUNT EQU   RPLOPT9
RPLTERMS EQU   RPLOPT9
RPLDEVCH EQU   RPLOPT9
RPLLOGON EQU   RPLOPT9
RPLUSFLD EQU   RPLVTEXT+16
RPLESR2  EQU   RPLUSNSI+1
RPLESR1  EQU   RPLUSNSI
RPLSSMI  EQU   RPLDSB2
@NM00009 EQU   RPLSSEI
RPLRRI   EQU   RPLSSEI
RPLFII   EQU   RPLSSEI
RPLSTATI EQU   RPLSSEI
RPLCPMI  EQU   RPLSSEI
RPLPATHI EQU   RPLSSEI
RPLARCLN EQU   RPLVTEXT+8
RPLAARLN EQU   RPLVTEXT+4
RPLAAREA EQU   RPLVTEXT
RPLERMSA EQU   RPLCOMN+72
RPLEMLEN EQU   RPLCOMN+70
RPLACTIV EQU   RPLCOMN+69
RPLBRANC EQU   RPLEXTD1
RPLNIB   EQU   RPLEXTD1
@NM00008 EQU   RPLEXTD1
RPLEXIT  EQU   RPLEXTD1
RPLNEXIT EQU   RPLEXTD1
RPLEXSCH EQU   RPLEXTD1
RPLDDDD  EQU   RPLRBAR+4
@NM00007 EQU   RPLRBAR+3
@NM00006 EQU   RPLAIXID
RPLAXPKP EQU   RPLAIXID
RPLAIXPC EQU   RPLRBAR
RPLRSV88 EQU   RPLOPT8
RPLUNCON EQU   RPLOPT8
RPLACTV  EQU   RPLOPT8
RPLSESS  EQU   RPLOPT8
RPLPEND  EQU   RPLOPT8
RPLODPRM EQU   RPLOPT8
RPLODACP EQU   RPLOPT8
RPLODACQ EQU   RPLOPT8
RPLRSV78 EQU   RPLOPT7
RPLTCRNO EQU   RPLOPT7
RPLRLSOP EQU   RPLOPT7
RPLTPOST EQU   RPLOPT7
RPLQOPT  EQU   RPLOPT7
RPLCNIMM EQU   RPLCNOPT
RPLCNANY EQU   RPLCNOPT
RPLCNALL EQU   RPLCNOPT
RPLRSV68 EQU   RPLOPT6
RPLRSV67 EQU   RPLOPT6
RPLLOCK  EQU   RPLOPT6
RPLNCOND EQU   RPLOPT6
RPLCOND  EQU   RPLOPT6
RPLEOT   EQU   RPLUNTYP
RPLEOM   EQU   RPLUNTYP
RPLEOB   EQU   RPLUNTYP
RPLWROPT EQU   RPLOPT5
RPLNODE  EQU   RPLOPT5
RPLERACE EQU   RPLWRTYP
RPLEAU   EQU   RPLWRTYP
RPLNERAS EQU   RPLWRTYP
RPLPSOPT EQU   RPLOPT5
@NM00005 EQU   RPLOPT5
RPLDLGIN EQU   RPLOPT5
RPLBUFL  EQU   RPLCOMN+52
RPLRLEN  EQU   RPLCOMN+48
RPLCHAIN EQU   RPLNXTRP
RPLBOP   EQU   RPLOPT4
@NM00004 EQU   RPLOPT4
RPLMKFRM EQU   RPLOPT4
RPLENDTR EQU   RPLOPT4
RPLALIGN EQU   RPLOPT3
RPLFMT   EQU   RPLOPT3
RPLFLD   EQU   RPLOPT3
RPLVFY   EQU   RPLOPT3
RPLBLK   EQU   RPLOPT3
RPLSFORM EQU   RPLOPT3
RPLEODS  EQU   RPLOPT3
RPLNSP   EQU   RPLOPT2
RPLUPD   EQU   RPLOPT2
@NM00003 EQU   RPLOPT2
RPLLRD   EQU   RPLOPT2
RPLBWD   EQU   RPLOPT2
RPLCNV   EQU   RPLOPT2
RPLADD   EQU   RPLADR
RPLKEY   EQU   RPLOPT2
RPLECBIN EQU   RPLECBSW
RPLGEN   EQU   RPLOPT1
RPLKGE   EQU   RPLOPT1
RPLASY   EQU   RPLOPT1
RPLSKP   EQU   RPLOPT1
RPLSEQ   EQU   RPLOPT1
RPLDIR   EQU   RPLOPT1
RPLLOC   EQU   RPLOPT1
RPLDAF   EQU   RPLARG+2
RPLSAF   EQU   RPLARG
RPLAREA  EQU   RPLCOMN+32
RPLTCBPT EQU   RPLCOMN+28
RPLDACB  EQU   RPLCOMN+24
RPLCCHAR EQU   RPLCOMN+20
RPLSTRID EQU   RPLCOMN+18
RPLKEYL  EQU   RPLKEYLE
RPLRDSOH EQU   RPLFDB3
RPLRLG   EQU   RPLFDB3
RPLLGFRC EQU   RPLFDB3
RPLREOT  EQU   RPLFDB3
RPLREOM  EQU   RPLFDB3
RPLREOB  EQU   RPLFDB3
RPLSV32  EQU   RPLFDB3
RPLUINPT EQU   RPLFDB3
RPLSTSAV EQU   RPLFDB2
RPLCUERR EQU   RPLFDB2
RPLDLGFL EQU   RPLFDB2
RPLIOERR EQU   RPLFDB2
RPLDVUNS EQU   RPLFDB2
RPLATND  EQU   RPLFDB2
RPLRVID  EQU   RPLFDB2
RPLERLK  EQU   RPLFDB2
RPLERREG EQU   RPLRTNCD
RPLSTAT  EQU   RPLFDBWD
RPLPOST  EQU   RPLECB
RPLWAIT  EQU   RPLECB
RPLPLHPT EQU   RPLCOMN+4
RPLLEN2  EQU   RPLLEN
RPLREQ   EQU   RPLIDWD+2
RPLSTYP  EQU   RPLIDWD+1
RPLID    EQU   RPLIDWD
CVTLEVL  EQU   CVTRELNO+2
CVTNUMB  EQU   CVTRELNO
CVTMDL   EQU   CVTFIX+250
@NM00002 EQU   CVTFIX+248
@NM00001 EQU   CVTFIX
CVTRV482 EQU   CVTXTNT2+128
CVTRV481 EQU   CVTXTNT2+124
CVTRV480 EQU   CVTXTNT2+120
CVTRV479 EQU   CVTXTNT2+118
CVTRV478 EQU   CVTXTNT2+117
CVTRV477 EQU   CVTXTNT2+116
CVTRV476 EQU   CVTXTNT2+115
CVTRV475 EQU   CVTXTNT2+114
CVTRV474 EQU   CVTRV466
CVTRV473 EQU   CVTRV466
CVTRV472 EQU   CVTRV466
CVTRV471 EQU   CVTRV466
CVTRV470 EQU   CVTRV466
CVTRV469 EQU   CVTRV466
CVTRV468 EQU   CVTRV466
CVTRV467 EQU   CVTRV466
CVTRV465 EQU   CVTRV457
CVTRV464 EQU   CVTRV457
CVTRV463 EQU   CVTRV457
CVTRV462 EQU   CVTRV457
CVTRV461 EQU   CVTRV457
CVTRV460 EQU   CVTRV457
CVTRV459 EQU   CVTRV457
CVTRV458 EQU   CVTRV457
CVTRV456 EQU   CVTXTNT2+108
CVTRV455 EQU   CVTXTNT2+104
CVTRV454 EQU   CVTXTNT2+100
CVTRV453 EQU   CVTXTNT2+96
CVTRV452 EQU   CVTXTNT2+94
CVTRV451 EQU   CVTXTNT2+92
CVTRV450 EQU   CVTXTNT2+90
CVTRV449 EQU   CVTXTNT2+88
CVTRV448 EQU   CVTXTNT2+87
CVTRV447 EQU   CVTXTNT2+86
CVTRV446 EQU   CVTRV438
CVTRV445 EQU   CVTRV438
CVTRV444 EQU   CVTRV438
CVTRV443 EQU   CVTRV438
CVTRV442 EQU   CVTRV438
CVTRV441 EQU   CVTRV438
CVTRV440 EQU   CVTRV438
CVTRV439 EQU   CVTRV438
CVTRV437 EQU   CVTRV429
CVTRV436 EQU   CVTRV429
CVTRV435 EQU   CVTRV429
CVTRV434 EQU   CVTRV429
CVTRV433 EQU   CVTRV429
CVTRV432 EQU   CVTRV429
CVTRV431 EQU   CVTRV429
CVTRV430 EQU   CVTRV429
CVTRV428 EQU   CVTXTNT2+80
CVTRV427 EQU   CVTXTNT2+76
CVTRV426 EQU   CVTXTNT2+72
CVTRV425 EQU   CVTXTNT2+68
CVTATACT EQU   CVTATCVT
CVTRV423 EQU   CVTXTNT2+62
CVTRV422 EQU   CVTXTNT2+60
CVTRV421 EQU   CVTXTNT2+58
CVTRV420 EQU   CVTXTNT2+56
CVTRV419 EQU   CVTXTNT2+55
CVTRV418 EQU   CVTXTNT2+54
CVTRV417 EQU   CVTRV409
CVTRV416 EQU   CVTRV409
CVTRV415 EQU   CVTRV409
CVTRV414 EQU   CVTRV409
CVTRV413 EQU   CVTRV409
CVTRV412 EQU   CVTRV409
CVTRV411 EQU   CVTRV409
CVTRV410 EQU   CVTRV409
CVTRV408 EQU   CVTRV400
CVTRV407 EQU   CVTRV400
CVTRV406 EQU   CVTRV400
CVTRV405 EQU   CVTRV400
CVTRV404 EQU   CVTRV400
CVTRV403 EQU   CVTRV400
CVTRV402 EQU   CVTRV400
CVTRV401 EQU   CVTRV400
CVTICB   EQU   CVTXTNT2+48
CVTSKTA  EQU   CVTXTNT2+44
CVTSHSB  EQU   CVTSHS
CVTRSV98 EQU   CVTXTNT2+36
CVTRSV97 EQU   CVTXTNT2+34
CVTRSV96 EQU   CVTXTNT2+32
CVTOLTEP EQU   CVTXTNT2+28
CVTQIDA  EQU   CVTQID+1
CVTRSV95 EQU   CVTQID
CVTRSV94 EQU   CVTXTNT2+20
CVTRSV93 EQU   CVTXTNT2+16
CVTRSV92 EQU   CVTXTNT2+12
CVTDEBVR EQU   CVTXTNT2+8
CVTRSV91 EQU   CVTXTNT2+6
CVTRSV9H EQU   CVTFLGBT
CVTRSV9G EQU   CVTFLGBT
CVTRSV9F EQU   CVTFLGBT
CVTRSV9E EQU   CVTFLGBT
CVTRSV9D EQU   CVTFLGBT
CVTRSV9C EQU   CVTFLGBT
CVTVME   EQU   CVTFLGBT
CVTNPE   EQU   CVTFLGBT
CVTNUCLS EQU   CVTXTNT2+4
CVTDSSVA EQU   CVTDSSV+1
CVTRSV89 EQU   CVTDSSV
CVTRSV88 EQU   CVTXTNT1+8
CVTRSV87 EQU   CVTXTNT1+4
CVTFACHN EQU   CVTXTNT1
CVTRV488 EQU   CVTMAP+412
CVTRV487 EQU   CVTMAP+408
CVTRV486 EQU   CVTMAP+404
CVTRV485 EQU   CVTMAP+400
CVTACTAP EQU   CVTMAP+396
CVTAUTH  EQU   CVTMAP+392
CVTATMCA EQU   CVTATMCT+1
CVTATMST EQU   CVTATMCT
CVTRSV61 EQU   CVTMAP+384
CVTVOLT1 EQU   CVTVOLM1+1
CVTVOLI1 EQU   CVTVOLF1
CVTSTOA  EQU   CVTMAP+376
CVTRSV58 EQU   CVTMAP+374
CVTRSV57 EQU   CVTMAP+372
CVTDDCE  EQU   CVTMAP+368
CVTPNWFR EQU   CVTMAP+364
CVTSMF   EQU   CVTMAP+360
CVTSULK  EQU   CVTMAP+358
CVTSLKO  EQU   CVTSYSK
CVTSLKP  EQU   CVTSYSK
CVTSLKQ  EQU   CVTSYSK
CVTSLKR  EQU   CVTSYSK
CVTRSV56 EQU   CVTSYSK
CVTRSV55 EQU   CVTSYSK
CVTRSV54 EQU   CVTSYSK
CVTRSV53 EQU   CVTSYSK
CVTRSV52 EQU   CVTA1F1
CVTRSV51 EQU   CVTA1F1
CVTRSV50 EQU   CVTA1F1
CVTRSV49 EQU   CVTA1F1
CVTRSV48 EQU   CVTA1F1
CVTRSV47 EQU   CVTA1F1
CVTSRSW  EQU   CVTA1F1
CVTPFSW  EQU   CVTA1F1
CVTPCVT  EQU   CVTMAP+352
CVTRSV46 EQU   CVTMAP+344
CVTRSV45 EQU   CVTMAP+340
CVTRSV44 EQU   CVTMAP+338
CVTRSV43 EQU   CVTMAP+336
CVTHJESA EQU   CVTHJES+1
CVTRSV42 EQU   CVTHJES
CVTEXT2A EQU   CVTEXT2+1
CVTRSV41 EQU   CVTEXT2
CVTAPFA  EQU   CVTAPF+1
CVTRSV40 EQU   CVTAPF
CVTRV518 EQU   CVTINTLA
CVTRV517 EQU   CVTERPV
CVTEORM  EQU   CVTMAP+312
CVTMCHPR EQU   CVTMAP+308
CVTTZ    EQU   CVTMAP+304
CVTJEPS  EQU   CVTMAP+300
CVTJESCT EQU   CVTMAP+296
CVTMODE  EQU   CVTMAP+292
CVTPTRV  EQU   CVTMAP+288
CVTREAL  EQU   CVTMAP+284
CVTRSV39 EQU   CVTMAP+280
CVTRSV38 EQU   CVTMAP+276
CVTDMSRA EQU   CVTDMSR+1
CVTRV634 EQU   CVTDMSRF
CVTRV633 EQU   CVTDMSRF
CVTRV632 EQU   CVTDMSRF
CVTRV631 EQU   CVTDMSRF
CVTRV630 EQU   CVTDMSRF
CVTRV629 EQU   CVTDMSRF
CVTUDUMP EQU   CVTDMSRF
CVTSDUMP EQU   CVTDMSRF
CVTQMSGA EQU   CVTQMSG+1
CVTRSV36 EQU   CVTQMSG
CVTAMFF  EQU   CVTMAP+264
CVTPURGA EQU   CVTPURG+1
CVTRSV35 EQU   CVTPURG
CVTCBSP  EQU   CVTMAP+256
CVTATERA EQU   CVTATER+1
CVTSYST  EQU   CVTATER
CVTVOLT2 EQU   CVTTAT
CVTVOLI2 EQU   CVTVOLF2
CVTAQAVB EQU   CVTAQAVT+1
CVTRSV34 EQU   CVTTCMFG
CVTRSV33 EQU   CVTTCMFG
CVTRSV32 EQU   CVTTCMFG
CVTRSV31 EQU   CVTTCMFG
CVTRSV30 EQU   CVTTCMFG
CVTRSV29 EQU   CVTTCMFG
CVTRSV28 EQU   CVTTCMFG
CVTTCRDY EQU   CVTTCMFG
CVTGTFA  EQU   CVTGTF+1
CVTRSV27 EQU   CVTGTFST
CVTRNIO  EQU   CVTGTFST
CVTUSR   EQU   CVTGTFST
CVTRV318 EQU   CVTFORM
CVTRV317 EQU   CVTTMODE
CVTRV316 EQU   CVTSTATE
CVTRV315 EQU   CVTGTFS
CVTGTFAV EQU   CVTGTFS
CVT0SCR1 EQU   CVTMAP+232
CVTRV515 EQU   CVTMAP+228
CVTRMS   EQU   CVTMAP+224
CVTPATCH EQU   CVTMAP+220
CVTTSCE  EQU   CVTMAP+216
CVTLNKSC EQU   CVTMAP+214
CVTQABST EQU   CVTMAP+212
CVTMDLDS EQU   CVTMAP+208
CVTUSER  EQU   CVTMAP+204
CVTABEND EQU   CVTMAP+200
CVTSMCA  EQU   CVTMAP+196
CVTRSV18 EQU   CVTMAP+192
CVTQLPAQ EQU   CVTMAP+188
CVTQCDSR EQU   CVTMAP+184
CVTRSV17 EQU   CVTOPTB
CVTRSV16 EQU   CVTOPTB
CVTFP    EQU   CVTOPTB
CVTAPTHR EQU   CVTOPTB
CVTNLOG  EQU   CVTOPTB
CVTTOD   EQU   CVTOPTB
CVTCTIMS EQU   CVTOPTB
CVTPROT  EQU   CVTOPTB
CVTXPFP  EQU   CVTOPTA
CVTASCII EQU   CVTOPTA
CVTRSV13 EQU   CVTOPTA
CVTRSV12 EQU   CVTOPTA
CVTNIP   EQU   CVTOPTA
CVTDDR   EQU   CVTOPTA
CVTAPR   EQU   CVTOPTA
CVTCCH   EQU   CVTOPTA
CVTSNCTR EQU   CVTMAP+180
CVTQMWR  EQU   CVTMAP+176
CVTQOCR  EQU   CVTMAP+172
CVT1EF00 EQU   CVTMAP+168
CVTMZ00  EQU   CVTMAP+164
CVTHEAD  EQU   CVTMAP+160
CVTRSV11 EQU   CVTMAP+156
CVT0PT01 EQU   CVTMAP+152
CVTMSER  EQU   CVTMAP+148
CVTRV516 EQU   CVTIERLC
CVTILCH  EQU   CVTMAP+140
CVT0DS   EQU   CVTMAP+136
CVTFBOSV EQU   CVTMAP+132
CVTNUCB  EQU   CVTMAP+128
CVTIXAVL EQU   CVTMAP+124
CVTIOQET EQU   CVTMAP+120
CVTDCBA  EQU   CVTMAP+117
CVTMVS2  EQU   CVTDCB
CVT6DAT  EQU   CVTDCB
CVT4MPS  EQU   CVTDCB
CVTRSV09 EQU   CVTDCB
CVT4MS1  EQU   CVTDCB
CVT2SPS  EQU   CVTDCB
CVT1SSS  EQU   CVTDCB
CVTRSV08 EQU   CVTDCB
CVTSTB   EQU   CVTMAP+112
CVTQTD00 EQU   CVTMAP+108
CVTQTE00 EQU   CVTMAP+104
CVTCUCB  EQU   CVTMAP+100
CVTSJQ   EQU   CVTMAP+96
CVTPBLDL EQU   CVTMAP+92
CVTTPC   EQU   CVTMAP+88
CVTSVDCB EQU   CVTMAP+84
CVTBRET  EQU   CVTMAP+82
CVTEXIT  EQU   CVTMAP+80
CVT0FN00 EQU   CVTMAP+76
CVTDARA  EQU   CVTDAR+1
CVTRSV07 EQU   CVTFLGS1
CVTRSV06 EQU   CVTFLGS1
CVTRSV05 EQU   CVTFLGS1
CVTRSV04 EQU   CVTFLGS1
CVTRSV03 EQU   CVTFLGS1
CVTRSV02 EQU   CVTFLGS1
CVTRSV01 EQU   CVTFLGS1
CVTDMPLK EQU   CVTFLGS1
CVTXITP  EQU   CVTMAP+68
CVTZDTAB EQU   CVTMAP+64
CVTMSLT  EQU   CVTMAP+60
CVTDATE  EQU   CVTMAP+56
CVTBTERM EQU   CVTMAP+52
CVTSYSAD EQU   CVTMAP+48
CVTXTLER EQU   CVTMAP+44
CVTILK2  EQU   CVTMAP+40
CVTILK1  EQU   CVTMAP+36
CVTPRLTV EQU   CVTMAP+32
CVTPCNVT EQU   CVTMAP+28
CVTXAPG  EQU   CVTMAP+20
CVTBUF   EQU   CVTMAP+16
CVTJOB   EQU   CVTMAP+12
CVTLINK  EQU   CVTMAP+8
CVT0EF00 EQU   CVTMAP+4
CVTTCBP  EQU   CVTMAP
CVT      EQU   CVTMAP
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RT00360 EQU   FINDFDB
@RT00397 EQU   MOVEDATA
@RT00411 EQU   ADLNCHK
@RC00432 EQU   @RC00423
@RC00448 EQU   @RC00445
@RC00484 EQU   @RC00483
@PB00005 EQU   @EL00002
@RC00491 EQU   @RC00484
@ENDDATA EQU   *
         END   ISTDCC60,(C'PLS0921',0603,76110)
