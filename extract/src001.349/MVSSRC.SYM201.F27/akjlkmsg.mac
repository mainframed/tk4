         TITLE 'AKJLKMSG - PROMPTER MESSAGE PROCESSOR'
         LCLA  &T,&SPN                                            0001
.@001    ANOP                                                     0001
AKJLKMSG CSECT ,                                                  0001
         STM   @E,@C,12(@D)                                       0001
         BALR  @B,0                                               0001
@PSTART  DS    0H                                                 0001
         USING @PSTART+00000,@B                                   0001
         L     @0,@SIZ001                                         0001
         GETMAIN  R,LV=(0)                                        0001
         LR    @C,@1                                              0001
         USING @DATD+00000,@C                                     0001
         LM    @0,@1,20(@D)                                       0001
         XC    @TEMPS(@L),@TEMPS                                  0001
         ST    @D,@SAV001+4                                       0001
         LA    @F,@SAV001                                         0001
         ST    @F,8(0,@D)                                         0001
         LR    @D,@F                                              0001
*        LSTPTR=DPTR;                  /* MOVE POINTER TO INTERNAL   */
         L     @8,0(0,@1)          ADDRESS OF DPTR                0029
         MVC   LSTPTR(4),0(@8)                                    0029
*        MESNO=DMES;                   /* MOVE MESSAGE NO. TO INTERN.*/
         L     @9,4(0,@1)          ADDRESS OF DMES                0030
         MVC   MESNO(2),2(@9)                                     0030
*        PGPBPTR=ADDR(PARMB);
         LA    @F,PARMB                                           0031
         ST    @F,PGPBPTR                                         0031
*        GTPBPTR=ADDR(PARMB);          /* SET GETLINE PARM PTR.      */
         LA    @F,PARMB                                           0032
         ST    @F,GTPBPTR                                         0032
*        STPLPTR=ADDR(PARML);          /* GET ADDRESS OF PARM. LIST  */
         LA    @1,PARML                                           0033
*        STPLUPT=CPPLUPT;              /* SET UPT POINTER            */
         L     @6,LSTPTR                                          0034
         L     @6,104(0,@6)        MSGPARM                        0034
         MVC   0(4,@1),4(@6)                                      0034
*        STPLECT=CPPLECT;              /* SET ECT POINTER            */
         MVC   4(4,@1),12(@6)                                     0035
*        STPLSTPB=ADDR(PARMB);         /* SET POINTER TO PARM. BLK.  */
         LA    @F,PARMB                                           0036
         ST    @F,12(0,@1)                                        0036
*        STPLECB=ADDR(CPECB);          /* SET POINTER TO CP'S ECB    */
         L     @7,LSTPTR                                          0037
         LA    @F,100(0,@7)                                       0037
         ST    @F,8(0,@1)                                         0037
*        IF MESNO=0                    /* REQUEST FOR GETLINE?       */
*           THEN GO TO GETL;           /* YES - GET IT               */
         SR    @F,@F                                              0038
         CH    @F,MESNO                                           0038
         BC    08,GETL                                            0039
*        /* ******************************************************** */
*        /* INITIALIZE POINTERS AND INSERT MESSAGE ID IN BUFFERS     */
*        /* ******************************************************** */
*        NLEVEL(1)=ADDR(MESSAGE(2));
         LA    @F,MESSAGE+16                                      0040
         ST    @F,MESSAGE                                         0040
*        NLEVEL(2)='FF000000'X;
         MVC   MESSAGE+16(4),@X1                                  0041
*        ADD1(1)=ADDR(BUFF(1));
         LA    @F,BUFF                                            0042
         ST    @F,MESSAGE+8                                       0042
*        ADD2(1)=ADDR(BUFF(2));
         LA    @F,BUFF+80                                         0043
         ST    @F,MESSAGE+12                                      0043
*        ADD1(2)=ADDR(BUFF(3));
         LA    @F,BUFF+160                                        0044
         ST    @F,MESSAGE+24                                      0044
*        ADD2(2)=ADDR(BUFF(4));
         LA    @F,BUFF+240                                        0045
         ST    @F,MESSAGE+28                                      0045
*        TEXT(1)=' ';                  /* INITIALIZE ALL TEXT BUFFERS*/
         MVI   BUFF+4,C' '                                        0046
         MVC   BUFF+5(74),BUFF+4                                  0046
*        TEXT(2)=TEXT(1);
         MVC   BUFF+84(75),BUFF+4                                 0047
*        TEXT(3)=TEXT(1);
         MVC   BUFF+164(75),BUFF+4                                0048
*        TEXT(4)=TEXT(1);
         MVC   BUFF+244(75),BUFF+4                                0049
*        TEXT(1,1:5)='IKJ76';
         MVC   BUFF+4(5),@C3                                      0050
*        TEXT(1,6:9)=ID(MESNO);        /* MOVE IN MESSAGE ID         */
         LH    @4,MESNO                                           0051
         SLA   @4,2                                               0051
         LA    @E,ID-4(@4)                                        0051
         MVC   BUFF+9(4),0(@E)                                    0051
*        IF PROMPTM=1                  /* IN PROMPT MODE?            */
*           & MESNO=1 × MESNO=18       /* REPROMPT MESSAGE?          */
*           THEN TEXT(1,8)='1';        /* YES - SET SEVERITY CODE    */
         LA    @F,1                                               0052
         CH    @F,4(0,@7)                                         0052
         BC    07,@9FF                                            0052
         CH    @F,MESNO                                           0052
         BC    08,@9FE                                            0052
@9FF     LA    @F,18                                              0052
         CH    @F,MESNO                                           0052
         BC    07,@9FD                                            0052
@9FE     MVI   BUFF+11,C'1'                                       0053
*        TEXT(3,1:10)=TEXT(1,1:10);    /* SET ID IN SECOND LEVEL     */
@9FD     MVC   BUFF+164(10),BUFF+4                                0054
*                                      /* BUFF.                      */
*        DO LVL= 1 TO 2;               /* LOOP FOR EACH LEVEL.       */
         LA    @F,1                                               0055
         STH   @F,LVL                                             0055
*        NSEGS(LVL)=0;                 /* NO. OF SEGMENTS IS ZERO    */
@DO9FC   SR    @F,@F                                              0056
         LH    @8,LVL                                             0056
         SLA   @8,4                                               0056
         ST    @F,MESSAGE-12(@8)                                  0056
*        BEG=11;                       /* BEGINNING OF SEG. IN TEXT  */
         LA    @F,11                                              0057
         ST    @F,BEG                                             0057
*                                      /* BUFF.                      */
*        IF LVL=1                      /* DOING FIRST LEVELS?        */
*           THEN IF MESNO=21 ×         /* DOING MESSAGE WITH MEMBER  */
         LA    @F,1                                               0058
         CH    @F,LVL                                             0058
         BC    07,@9F8                                            0058
*                   MESNO=24
*                   THEN DO;           /* YES - ADD MEMBER NAME      */
         LA    @F,21                                              0059
         CH    @F,MESNO                                           0059
         BC    08,@9F7                                            0059
         LA    @F,24                                              0059
         CH    @F,MESNO                                           0059
         BC    07,@9F6                                            0059
*                        TEXT(1,11:16)='MEMBER';
@9F7     MVC   BUFF+14(6),@C5                                     0061
*                        TEXT(1,18:25)=DA08MNM; /* GET NAME FROM DAIR*/
         L     @8,LSTPTR                                          0062
         L     @8,0(0,@8)          MSGPARM                        0062
         MVC   BUFF+21(8),52(@8)                                  0062
*                        BEG=27;       /* RESET STRING BEGINNING     */
         LA    @F,27                                              0063
         ST    @F,BEG                                             0063
*                        END;
*        SUB=2*LVL-1;                  /* SUBSCRIPT FOR LL,OFF,TEXT  */
@9F6     EQU   *                                                  0065
@9F8     LH    @E,LVL                                             0065
         AR    @E,@E                                              0065
         BCTR  @E,0                                               0065
         STH   @E,SUB                                             0065
*        OFF(SUB)=0;                   /* OFFSET = ZERO.             */
         SR    @F,@F                                              0066
         LH    @8,SUB                                             0066
         MH    @8,@D1                                             0066
         STH   @F,BUFF-78(@8)                                     0066
*        DO N= 1 TO 3;                 /* LOOP FOR EACH SEGMENT      */
         LA    @F,1                                               0067
         ST    @F,N                                               0067
*        INDEX= (MESNO-1)*8 + (LVL-1)*4 + N;  /* CALC. SUBSCRIPT     */
@DO9F5   LH    @F,MESNO                                           0068
         BCTR  @F,0                                               0068
         SLA   @F,3                                               0068
         LH    @3,LVL                                             0068
         BCTR  @3,0                                               0068
         SLA   @3,2                                               0068
         AR    @F,@3                                              0068
         A     @F,N                                               0068
         STH   @F,INDEX                                           0068
*        SEGNO=CONTROL(INDEX);         /* GET NUMBER OF SEGMENT      */
         LR    @3,@F                                              0069
         SR    @F,@F                                              0069
         IC    @F,CONTROL-1(@3)                                   0069
         STH   @F,SEGNO                                           0069
*        IF SEGNO=0                    /* SEGMENT NEEDED?            */
*           THEN GO TO INSERT;         /* NO-CHECK FOR DATA SET NAME */
         SR    @F,@F                                              0070
         CH    @F,SEGNO                                           0070
         BC    08,INSERT                                          0071
*        SEGAD=ADDR(SEG1);             /* INIT. SEGMENT ADDRESS      */
         LA    @F,SEG1                                            0072
         ST    @F,SEGAD                                           0072
*        IF SEGNO=1                    /* NEED THE FIRST SEGMENT?    */
*           THEN GO TO SETL;           /* NO ADDITION NEEDED         */
         LA    @F,1                                               0073
         CH    @F,SEGNO                                           0073
         BC    08,SETL                                            0074
*        DO J = 1 TO SEGNO-1;
         ST    @F,J                                               0075
@DO9F1   LH    @F,SEGNO                                           0075
         BCTR  @F,0                                               0075
         C     @F,J                                               0075
         BC    04,@DO9EE                                          0075
         BC    15,@DO9EF                                          0075
@DO9F0   LA    @F,1                                               0075
         A     @F,J                                               0075
         ST    @F,J                                               0075
         BC    15,@DO9F1                                          0075
*        SEGAD=SEGAD + L(J);           /* ADD LENGTH OF ALL LOWER    */
@DO9EF   L     @8,J                                               0076
         SR    @F,@F                                              0076
         IC    @F,L-1(@8)                                         0076
         A     @F,SEGAD                                           0076
         ST    @F,SEGAD                                           0076
         BC    15,@DO9F0                                          0077
*                                      /* NUMBERED MESSAGES TO GET   */
*                                      /* CORRECT ADDRESS            */
*        END;
*SETL:   J=L(SEGNO);                   /* LENGTH OF SEGMENT          */
@DO9EE   EQU   *                                                  0077
SETL     LH    @8,SEGNO                                           0078
         SR    @F,@F                                              0078
         IC    @F,L-1(@8)                                         0078
         ST    @F,J                                               0078
*        ENDD=BEG + J -1;              /* END OF STRING              */
         LH    @F,@D2                                             0079
         A     @F,J                                               0079
         A     @F,BEG                                             0079
         ST    @F,ENDD                                            0079
*        TEXT(SUB,BEG:ENDD)=SEGAD->CHARST(1:J);  /* MOVE SEG.        */
         L     @9,SEGAD                                           0080
         LR    @E,@9                                              0080
         LR    @6,@F                                              0080
         L     @7,BEG                                             0080
         LH    @4,SUB                                             0080
         MH    @4,@D1                                             0080
         SR    @6,@7                                              0080
         LA    @A,BUFF-77(@4)                                     0080
         AR    @A,@7                                              0080
         EX    @6,@MVC                                            0080
*        BEG=ENDD+2;
         LA    @F,2                                               0081
         A     @F,ENDD                                            0081
         ST    @F,BEG                                             0081
*        NSEGS(LVL)=1;                 /* NO. OF SEGMENTS IS ONE     */
         LA    @F,1                                               0082
         LH    @5,LVL                                             0082
         SLA   @5,4                                               0082
         ST    @F,MESSAGE-12(@5)                                  0082
*        END;
*INSERT: INDEX=(MESNO-1)*8 + (LVL-1)*4 + 4;  /* GET SUBSCRIPT FOR    */
         L     @F,N                                               0083
         AH    @F,@D3                                             0083
@DO9F4   ST    @F,N                                               0083
         CH    @F,@D4                                             0083
         BC    12,@DO9F5                                          0083
INSERT   LH    @F,MESNO                                           0084
         BCTR  @F,0                                               0084
         SLA   @F,3                                               0084
         LH    @3,LVL                                             0084
         BCTR  @3,0                                               0084
         SLA   @3,2                                               0084
         AR    @F,@3                                              0084
         AH    @F,@D5                                             0084
         STH   @F,INDEX                                           0084
*        LL(SUB) = ENDD + 4;
         LA    @F,4                                               0085
         A     @F,ENDD                                            0085
         LH    @3,SUB                                             0085
         MH    @3,@D1                                             0085
         STH   @F,BUFF-80(@3)                                     0085
*        IF CONTROL(INDEX)=0           /* IS THERE A DATA SET NAME   */
*                                      /* IN MESSAGE?                */
*           THEN                       /* NO                         */
         SR    @F,@F                                              0086
         LH    @8,INDEX                                           0086
         SR    @0,@0                                              0086
         IC    @0,CONTROL-1(@8)                                   0086
         CR    @F,@0                                              0086
*                GO TO EL3;            /* CONTINUE TO NEXT LEVEL     */
         BC    08,EL3                                             0087
*        IF DSF(2)='1'B               /* IS NAME FULLY QUALIFIED?    */
*           THEN DO;                   /* YES - ADD QUOTES TO NAME   */
         L     @9,LSTPTR                                          0088
         L     @9,96(0,@9)         MSGPARM                        0088
         TM    6(@9),B'01000000'                                  0088
         BC    12,@9ED                                            0088
*                DSNM(1)='''';
         L     @6,LSTPTR                                          0090
         L     @6,92(0,@6)         MSGPARM                        0090
         MVI   2(@6),C''''                                        0090
*                DSNM(2:DSL+1)=DSN->CHARST(1:DSL); /* GET DSNAME     */
         L     @7,0(0,@9)          DATASET                        0091
         LR    @E,@7                                              0091
         LA    @4,1                                               0091
         AH    @4,4(0,@9)                                         0091
         SH    @4,@D6                                             0091
         LA    @A,3(0,@6)                                         0091
         EX    @4,@MVC                                            0091
*                DSNLNGTH=DSL + 2;     /* GET NEW LENGTH             */
         LA    @F,2                                               0092
         AH    @F,4(0,@9)                                         0092
         STH   @F,0(0,@6)                                         0092
*                DSNM(DSNLNGTH:DSNLNGTH+1)=''' ';
         LH    @7,0(0,@6)                                         0093
         LA    @A,1(@7,@6)                                        0093
         MVC   0(2,@A),@C8                                        0093
*                END;
*        NSEGS(LVL)=2;                 /* NO. OF SEGS = TWO          */
@9ED     LA    @F,2                                               0095
         LH    @8,LVL                                             0095
         SLA   @8,4                                               0095
         ST    @F,MESSAGE-12(@8)                                  0095
*        SUB=SUB+1;
         LA    @F,1                                               0096
         AH    @F,SUB                                             0096
         STH   @F,SUB                                             0096
*        LL(SUB)=DSNLNGTH+5;           /* LNG.= DSNAME LENGTH+LL+OFF */
         LA    @F,5                                               0097
         L     @9,LSTPTR                                          0097
         L     @9,92(0,@9)         MSGPARM                        0097
         AH    @F,0(0,@9)                                         0097
         LH    @6,SUB                                             0097
         MH    @6,@D1                                             0097
         STH   @F,BUFF-80(@6)                                     0097
*        OFF(SUB)=CONTROL(INDEX);      /* GET OFFSET FROM CONTROL    */
         LH    @7,INDEX                                           0098
         SR    @F,@F                                              0098
         IC    @F,CONTROL-1(@7)                                   0098
         STH   @F,BUFF-78(@6)                                     0098
*                                      /* ARRAY                      */
*        TEXT(SUB,1:DSNLNGTH+1)=DSNM(1:DSNLNGTH+1);
         LA    @E,2(0,@9)                                         0099
         LA    @4,1                                               0099
         AH    @4,0(0,@9)                                         0099
         BCTR  @4,0                                               0099
         LA    @A,BUFF-76(@6)                                     0099
         EX    @4,@MVC                                            0099
*EL3:    END;
*        /* ******************************************************** */
*        /* CHECK FOR SPECIAL CASES                                  */
*        /* ******************************************************** */
*        RESTRICT(2,3);                /* USED IN CONVERSION         */
EL3      LH    @F,LVL                                             0100
         AH    @F,@D3                                             0100
@DO9FB   STH   @F,LVL                                             0100
         CH    @F,@D6                                             0100
         BC    12,@DO9FC                                          0100
*        IF MESNO=6 × MESNO=8          /* DYNAMIC ALLOC. ERROR?      */
*           × MESNO=28 × MESNO=29
*           THEN DO;                   /* YES - GET CODE IN HEX      */
         LA    @F,6                                               0102
         CH    @F,MESNO                                           0102
         BC    08,@9EC                                            0102
         LA    @F,8                                               0102
         CH    @F,MESNO                                           0102
         BC    08,@9EB                                            0102
         LA    @F,28                                              0102
         CH    @F,MESNO                                           0102
         BC    08,@9EA                                            0102
         LA    @F,29                                              0102
         CH    @F,MESNO                                           0102
         BC    07,@9E9                                            0102
@9EA     EQU   *                                                  0103
@9EB     EQU   *                                                  0103
*                R2=DA08DARC;          /* RETURN CODE IN REG. 2      */
@9EC     L     @8,LSTPTR                                          0104
         L     @8,0(0,@8)          MSGPARM                        0104
         LH    @2,4(0,@8)                                         0104
*CONV:           LL(3)=LL(3)+5;        /* ADJUST LENGTH              */
CONV     LA    @F,5                                               0105
         AH    @F,BUFF+160                                        0105
         STH   @F,BUFF+160                                        0105
*                R1=ADDR(BUFF(3));     /* GET ADDR. OF BEG. OF BUFFER*/
         LA    @1,BUFF+160                                        0106
*                R1=R1+LL(3)-1;        /* GET ADDR. OF END OF BUFFER */
         LH    @F,@D2                                             0107
         AH    @F,BUFF+160                                        0107
         AR    @1,@F                                              0107
*                GENERATE;             /* TRANSLATE TO EBCDIC (HEX)  */
                 XR     R3,R3          ZERO OUT REG. 3
NXT              SRDL  R2,4            ISOLATE NUMBER
                 SRL   R3,28           SHIFT TO BOTTOM OF REG
                 IC    R3,HEX(R3)      GET HEX CHARACTER
                 STC   R3,0(R1)        STORE IN BUFFER
                 BCTR  R1,0            MOVE PTR IN BUFFER
                 LTR   R2,R2           FINISHED?
                 BNZ   NXT             NO - CONTINUE
         DS    0H
*                GO TO CHK;            /* ISSUE MESSAGE              */
         BC    15,CHK                                             0109
*                END;
*        IF MESNO=7                    /* CATALOG ERROR?             */
*           THEN DO;                   /* YES - CONV. CODE           */
@9E9     LA    @F,7                                               0111
         CH    @F,MESNO                                           0111
         BC    07,@9E8                                            0111
*                R2=DA08CTRC;          /* GET CATALOG RETURN CODE    */
         L     @8,LSTPTR                                          0113
         L     @8,0(0,@8)          MSGPARM                        0113
         LH    @2,6(0,@8)                                         0113
*                GO TO CONV;
         BC    15,CONV                                            0114
*                END;
*        IF MESNO=30 × MESNO=34        /* SYSTEM ERROR?      ZM02759 */
*           THEN DO;                   /* YES - CONVERT ERROR CODE   */
@9E8     LA    @F,30                                              0116
         CH    @F,MESNO                                           0116
         BC    08,@9E7                                            0116
         LA    @F,34                                              0116
         CH    @F,MESNO                                           0116
         BC    07,@9E6                                            0116
*                R2=RCODE;             /* GET DAIR RETURN CODE       */
@9E7     L     @8,LSTPTR                                          0118
         LH    @2,6(0,@8)                                         0118
*                GO TO CONV;
         BC    15,CONV                                            0119
*                END;
*        RELEASE(2,3);                 /* FREE REGISTERS             */
*        IF MESNO=14 × MESNO=15        /* INVALID CONT. STMNT.?      */
*           THEN DO;                   /* YES - ADD IMAGE            */
@9E6     LA    @F,14                                              0122
         CH    @F,MESNO                                           0122
         BC    08,@9E5                                            0122
         LA    @F,15                                              0122
         CH    @F,MESNO                                           0122
         BC    07,@9E4                                            0122
*                N=LL(1)-2;            /* GET ADDRESS FOR IMAGE      */
@9E5     LH    @F,@D7                                             0124
         AH    @F,BUFF                                            0124
         ST    @F,N                                               0124
*                TEXT(1,N:N+38)=INBUF(1:39); /* MOVE IN SOME         */
         L     @8,LSTPTR                                          0125
         LR    @9,@F                                              0125
         LA    @A,BUFF+3(@9)                                      0125
         MVC   0(39,@A),12(@8)                                    0125
*                LL(1)=LL(1) + 40;     /* ADJUST LENGTH OF BUFFER    */
         LA    @F,40                                              0126
         AH    @F,BUFF                                            0126
         STH   @F,BUFF                                            0126
*                END;
*        IF MESNO=21                   /* SPECIAL PROCESSING FOR 21  */
*           THEN DO;
@9E4     LA    @F,21                                              0128
         CH    @F,MESNO                                           0128
         BC    07,@9E3                                            0128
*                LL(1)=LL(1)+1;        /* ADD SPACE SO DATA SET NAME */
         LA    @F,1                                               0130
         AH    @F,BUFF                                            0130
         STH   @F,BUFF                                            0130
*                                      /* CAN BE INSERTED AT END     */
*                IF MEMF(1)='1'B       /* MEMBER SPECIFIED?          */
*                   THEN NSEGS(2)=0;   /* YES - NO SECOND LEVEL      */
         L     @8,LSTPTR                                          0131
         L     @8,96(0,@8)         MSGPARM                        0131
         TM    14(@8),B'10000000'                                 0131
         BC    12,@9E2                                            0131
         SR    @F,@F                                              0132
         ST    @F,MESSAGE+20                                      0132
*                END;
@9E2     EQU   *                                                  0133
*CHK:    STPLPTR=ADDR(PARML);          /* SET REG. 1 TO PARM LIST    */
@9E3     EQU   *                                                  0134
CHK      LA    @1,PARML                                           0134
*        IF TEXT(1,8)='0'              /* IS IT A PROMPT MESSAGE?    */
*           THEN GO TO PRMPT;          /* YES - GET A RESPONSE       */
         CLI   BUFF+11,C'0'                                       0135
         BC    08,PRMPT                                           0136
*        GEN(MVC  PARMB(20),PUTLP);    /* MOVE IN PUTLINE FLAGS      */
         MVC  PARMB(20),PUTLP
         DS    0H
*        IF NSEGS(2) > 0               /* IS THERE A LEVEL 2 MESSAGE?*/
*           THEN GO TO ERR2;           /* YES - ISSUE MESSAGE        */
         SR    @F,@F                                              0138
         C     @F,MESSAGE+20                                      0138
         BC    04,ERR2                                            0139
*        /* ******************************************************** */
*        /* ISSUE SINGLE LEVEL MESSAGES                              */
*        /* ******************************************************** */
*SNG:    GEN(PUTLINE OUTPUT=NSEGS,MF=(E,(1)));
SNG      PUTLINE OUTPUT=NSEGS,MF=(E,(1))
         DS    0H
*        RCODE=R15;
         L     @8,LSTPTR                                          0141
         STH   @F,6(0,@8)                                         0141
*        GO TO RET;
         BC    15,RET                                             0142
*        /* ******************************************************** */
*        /* ISSUE MESSAGES WITH TWO LEVELS                           */
*        /* ******************************************************** */
*ERR2:   N=LL(1)+1;                    /* ADD TO LENGHT FOR '+'      */
ERR2     LA    @F,1                                               0143
         AH    @F,BUFF                                            0143
         ST    @F,N                                               0143
*        TEXT(1,N-4)='+';              /* ADD SEC. LEVEL INDICATOR   */
         LH    @8,@D8                                             0144
         A     @8,N                                               0144
         LA    @A,BUFF+3(@8)                                      0144
         MVI   0(@A),C'+'                                         0144
*        LL(1)=N;                      /* REZET LENGTH               */
         MVC   BUFF(2),N+2                                        0145
*        /* ******************************************************** */
*        /* IF MESSAGE 14 OR 15 SPECIFIED, IT WILL BE FOLLOWED BY    */
*        /* MESSAGE 16 (REENTER BY PUTGET).  SECOND LEVEL MESSAGE    */
*        /* MUST BE SET UP WITH 14 OR 15 BUT NOT ISSUED UNTIL THE    */
*        /* PUTGET FOR MESSAGE 16.  MESSAGES 14 AND 15 ARE SINGLE    */
*        /* LEVEL BUT LOOK LIKE TWO LEVEL.                           */
*        /* ******************************************************** */
*        IF MESNO=14 × MESNO=15
*           THEN GO TO SNG;            /* ISSUE SINGLE LEVEL WITH +  */
         LA    @F,14                                              0146
         CH    @F,MESNO                                           0146
         BC    08,@9E1                                            0146
         LA    @F,15                                              0146
         CH    @F,MESNO                                           0146
         BC    08,SNG                                             0147
*        GEN(PUTLINE OUTPUT=(NLEVEL,MULTLVL),MF=(E,(1)));
@9E0     EQU   *                                                  0148
         PUTLINE OUTPUT=(NLEVEL,MULTLVL),MF=(E,(1))
         DS    0H
*        RCODE=R15;
         L     @8,LSTPTR                                          0149
         STH   @F,6(0,@8)                                         0149
*        GO TO RET;
         BC    15,RET                                             0150
*        /* ******************************************************** */
*        /* GET A LINE FROM USER - L. E. CONTROL STATEMENTS          */
*        /* ******************************************************** */
*GETL:   GEN(MVC   PARMB(20),GETLP);   /* MOVE IN FLAGS              */
GETL     MVC   PARMB(20),GETLP
         DS    0H
*        GEN(GETLINE  MF=(E,(1)));
         GETLINE  MF=(E,(1))
         DS    0H
*        RCODE=R15;
         L     @8,LSTPTR                                          0153
         STH   @F,6(0,@8)                                         0153
*        CBUFPTR=GTPBIBUF;             /* GET POINTER TO LINE        */
         L     @9,GTPBPTR                                         0154
         MVC   CBUFPTR(4),4(@9)                                   0154
*        GO TO INP;                    /* GO CHECK LINE + TRANS.     */
         BC    15,INP                                             0155
*        /* ******************************************************** */
*        /* ISSUE PROMPT MESSAGE.  FREE BUFFER.                      */
*        /* ******************************************************** */
*PRMPT:  GEN(MVC  PARMB(20),PUTGP);    /* MOVE IN PUTGET FLAGS       */
PRMPT    MVC  PARMB(20),PUTGP
         DS    0H
*        GEN(PUTGET OUTPUT=NSEGS,MF=(E,(1)));
         PUTGET OUTPUT=NSEGS,MF=(E,(1))
         DS    0H
*INP1:   RCODE=R15;                    /* SET RETURN CODE            */
INP1     L     @8,LSTPTR                                          0158
         STH   @F,6(0,@8)                                         0158
*        /* ******************************************************** */
*        /* IF USER IS IN NOPROMPT MODE, PUTGET RETURNS CODE OF 12.  */
*        /* WE NEED TO CHANGE A MESSAGE 'ENTER VALUE-' TO            */
*        /* 'VALUE MISSING' AND ISSUE A PUTLINE .                    */
*        /* ******************************************************** */
*        IF RCODE=12                   /* IN NOPROMPT MODE?          */
*           THEN DO;                   /* YES - CHANGE MESSAGE       */
         LA    @F,12                                              0159
         CH    @F,6(0,@8)                                         0159
         BC    07,@9DF                                            0159
*                TEXT(1,8:9)='3I';   /* SET CODE TO SEVERITY 3     */
         MVC   BUFF+11(2),@C11                                    0161
*                N=LL(1)-5;            /* FIND NO. BYTES IN BUFFER   */
         LH    @F,@D9                                             0162
         AH    @F,BUFF                                            0162
         ST    @F,N                                               0162
*                                      /* EXCLUDING TRAILING -       */
*                TEXT(1,11:N-6)=TEXT(1,17:N); /* MOVE DATA OVER      */
         LA    @E,BUFF+20                                         0163
         LH    @9,@D10                                            0163
         A     @9,N                                               0163
         SH    @9,@D11                                            0163
         LA    @A,BUFF+14                                         0163
         EX    @9,@MVC                                            0163
*                TEXT(1,N-5:N+2)=' MISSING'; /* ADD MISSING TO END   */
         LA    @E,@C12                                            0164
         LA    @9,2                                               0164
         A     @9,N                                               0164
         LH    @6,@D9                                             0164
         A     @6,N                                               0164
         SR    @9,@6                                              0164
         LA    @A,BUFF+3(@6)                                      0164
         EX    @9,@MVC                                            0164
*                LL(1)=LL(1)+1;        /* ADJUST LENGTH OF BUFFER    */
         LA    @F,1                                               0165
         AH    @F,BUFF                                            0165
         STH   @F,BUFF                                            0165
*                GO TO SNG;            /* ISSUE SINGLE LEVEL PUTLINE */
         BC    15,SNG                                             0166
*                END;
*        CBUFPTR=PGPBIBUF;             /* SET INPUT POINTER          */
@9DF     L     @8,PGPBPTR                                         0168
         MVC   CBUFPTR(4),12(@8)                                  0168
*INP:    IF RCODE>0 THEN GO TO RET;    /* RETURN IF ERROR            */
INP      SR    @F,@F                                              0169
         L     @8,LSTPTR                                          0169
         CH    @F,6(0,@8)                                         0169
         BC    04,RET                                             0170
*        INBUF=' ';                    /* INIT. BUFFER TO BLANKS     */
         MVI   12(@8),C' '                                        0171
         MVC   13(79,@8),12(@8)                                   0171
*        BUFLN=CBUFLNG-4;              /* GET LENGTH OF DATA         */
         LH    @F,@D8                                             0172
         L     @9,CBUFPTR                                         0172
         MVC   @TEMP2+2(2),0(@9)                                  0172
         A     @F,@TEMP2                                          0172
         STH   @F,10(0,@8)                                        0172
*        IF BUFLN > 0
*           THEN DO;
         SR    @F,@F                                              0173
         CH    @F,10(0,@8)                                        0173
         BC    10,@9DE                                            0173
*                INBUF(2:BUFLN+1)=     /* LEAVE BLANK AT BEG. OF DATA*/
*                  CBUFDATA(1:BUFLN);
         LA    @E,4(0,@9)                                         0175
         LA    @6,1                                               0175
         AH    @6,10(0,@8)                                        0175
         SH    @6,@D6                                             0175
         LA    @A,13(0,@8)                                        0175
         EX    @6,@MVC                                            0175
*                R14=BUFLN+1;          /* GET END ADDRESS            */
         LA    @E,1                                               0176
         AH    @E,10(0,@8)                                        0176
*                R15=ADDR(INBUF);      /* GET ADD. OF BUFF. IN R15   */
         LA    @F,12(0,@8)                                        0177
*                GEN;                  /* TRANSLATE LETTERS TO EBCDIC*/
LOOP             OI  0(R15),X'40'      TURN ON UPPER CASE BIT
                 LA  R15,1(R15)        INCREMENT BUFFER PTR.
                 BCT  R14,LOOP         SUBTRACT AND BRANCH TIL DONE
         DS    0H
*                END;
*        /* ******************************************************** */
*        /*  RETURN TO THE CALLER IF SEVERITY CODE IS 0 OR 1.        */
*        /* RETURN TO SET ERROR CODE IF SEVERITY IS 3                */
*        /* ******************************************************** */
*RET:    ERRCODE=0;                    /* INIT ERROR CODE            */
@9DE     EQU   *                                                  0180
RET      SR    @F,@F                                              0180
         L     @8,LSTPTR                                          0180
         STH   @F,8(0,@8)                                         0180
*        /* ******************************************************** */
*        /*                                                          */
*        /* SPECIAL PROCESSING FOR REENTERING CONTROL STATEMENTS.    */
*        /* SINCE REENTER IS PRINTED RIGHT AFTER MESSAGES 14 + 15,   */
*        /* THE SECOND LEVEL WHICH LOGICALLY GOES WITH 14 OR 15      */
*        /* MUST BE ISSUED WITH REENTER (MESSAGE 16).                */
*        /*                                                          */
*        /* ******************************************************** */
*        IF MESNO=14 ×                 /* NEED REENTER- ?            */
*           MESNO=15
*           THEN DO;                   /* YES - FIX FIRST LEVEL      */
         LA    @F,14                                              0181
         CH    @F,MESNO                                           0181
         BC    08,@9DD                                            0181
         LA    @F,15                                              0181
         CH    @F,MESNO                                           0181
         BC    07,@9DC                                            0181
*                MESNO=16;             /* SET MESSAGE CODE           */
@9DD     LA    @F,16                                              0183
         STH   @F,MESNO                                           0183
*                TEXT(1)=' ';          /* INIT. TEXT BUFFER TO BLANKS*/
         MVI   BUFF+4,C' '                                        0184
         MVC   BUFF+5(74),BUFF+4                                  0184
*                TEXT(1,1:5)='IKJ76';
         MVC   BUFF+4(5),@C3                                      0185
*                TEXT(1,6:9)=ID(16);   /* RESET MESSAGE ID           */
         MVC   BUFF+9(4),ID+60                                    0186
*                TEXT(1,11:18)=SEG27;  /* MOVE IN REENTER-           */
         MVC   BUFF+14(8),SEG27                                   0187
*                LL(1)=22;             /* SET LENGTH OF BUFFER       */
         LA    @F,22                                              0188
         STH   @F,BUFF                                            0188
*                GEN(MVC    PARMB(20),PUTGP);  /* INIT. PARMBLOCK    */
         MVC    PARMB(20),PUTGP
         DS    0H
*                GEN(PUTGET  OUTPUT=(NLEVEL,MULTLVL),MF=(E,(1)));
         PUTGET  OUTPUT=(NLEVEL,MULTLVL),MF=(E,(1))
         DS    0H
*                GO TO INP1;           /* FINISH                     */
         BC    15,INP1                                            0191
*                END;
*        IF RCODE>0                    /* ERROR FROM RETURN?         */
*           × TEXT(1,8)='3'            /* SEVERITY 3 MESSAGE?        */
*           THEN DO;                   /* YES                        */
@9DC     SR    @F,@F                                              0193
         L     @8,LSTPTR                                          0193
         CH    @F,6(0,@8)                                         0193
         BC    04,@9DB                                            0193
         CLI   BUFF+11,C'3'                                       0193
         BC    07,@9DA                                            0193
*                ERRCODE=2;            /* SET TERMINAL ERROR         */
@9DB     LA    @F,2                                               0195
         L     @8,LSTPTR                                          0195
         STH   @F,8(0,@8)                                         0195
*                GO TO ENDMSG;         /* RETURN                     */
         BC    15,ENDMSG                                          0196
*                END;
*        IF TEXT(1,8)='1'              /* PROMPT MESSAGE?            */
*           & MESNO^=17                /* NOT END OF CONT. STMNTS.?  */
*           & MESNO^=33                /* NOT PARM MESSAGE           */
*           THEN ERRCODE=1;            /* YES - SET PROMPT CODE      */
@9DA     CLI   BUFF+11,C'1'                                       0198
         BC    07,@9D9                                            0198
         LA    @F,17                                              0198
         CH    @F,MESNO                                           0198
         BC    08,@9D8                                            0198
         LA    @F,33                                              0198
         CH    @F,MESNO                                           0198
         BC    08,@9D7                                            0198
         LA    @F,1                                               0199
         L     @8,LSTPTR                                          0199
         STH   @F,8(0,@8)                                         0199
*        GO TO ENDMSG;
         BC    15,ENDMSG                                          0200
*        GEN;                          /* ISSUE LIST FORMS FOR I/O   */
PUTLP    PUTLINE  MF=L
PUTGP    PUTGET  MF=L
GETLP    GETLINE MF=L,INPUT=TERM       /*                    @ZA34280*/
         DS    0H
*ENDMSG: END AKJLKMSG
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.      *
*/*%INCLUDE SYSLIB  (IKJGTPB )                                        *
*/*%INCLUDE SYSLIB  (IKJDAP08)                                        *
*/*%INCLUDE SYSLIB  (IKJSTPL )                                        *
*/*%INCLUDE SYSLIB  (IKJCPPL )                                        *
*/*%INCLUDE SYSLIB  (IKJPGPB )                                        *
*;
ENDMSG   EQU   *                                                  0202
@EL01    L     @D,4(0,@D)                                         0202
         LR    @1,@C                                              0202
         L     @0,@SIZ001                                         0202
         FREEMAIN R,LV=(0),A=(1)                                  0202
         LM    @E,@C,12(@D)                                       0202
         BCR   15,@E                                              0202
@DATA1   EQU   *
@0       EQU   00                  EQUATES FOR REGISTERS 0-15
@1       EQU   01
@2       EQU   02
@3       EQU   03
@4       EQU   04
@5       EQU   05
@6       EQU   06
@7       EQU   07
@8       EQU   08
@9       EQU   09
@A       EQU   10
@B       EQU   11
@C       EQU   12
@D       EQU   13
@E       EQU   14
@F       EQU   15
@D1      DC    H'80'
@D2      DC    H'-1'
@D3      DC    H'1'
@D4      DC    H'3'
@D5      DC    H'4'
@D6      DC    H'2'
@D7      DC    H'-2'
@D8      DC    H'-4'
@D9      DC    H'-5'
@D10     DC    H'-6'
@D11     DC    H'11'
@MVC     MVC   0(1,@A),0(@E)
         DS    0F
@SIZ001  DC    AL1(&SPN)
         DC    AL3(@DATEND-@DATD)
         DS    0F
@X1      DC    X'FF000000'
@C12     DC    C' MISSING'
@C5      DC    C'MEMBER'
@C8      DC    C''' '
@C11     DC    C'3I'
@C3      DC    C'IKJ76'
         DS    0D
@DATA    EQU   *
STPLPTR  EQU   00000001            FULLWORD POINTER REGISTER
R14      EQU   00000014            FULLWORD POINTER REGISTER
R15      EQU   00000015            FULLWORD POINTER REGISTER
DPTR     EQU   00000000            FULLWORD POINTER
DMES     EQU   00000000            FULLWORD INTEGER
MSGPARM  EQU   00000000            108 BYTE(S) ON WORD
DAPB0PTR EQU   MSGPARM+00000000    FULLWORD POINTER
PROMPTM  EQU   MSGPARM+00000004    HALFWORD INTEGER
RCODE    EQU   MSGPARM+00000006    HALFWORD INTEGER
ERRCODE  EQU   MSGPARM+00000008    HALFWORD INTEGER
BUFLN    EQU   MSGPARM+00000010    HALFWORD INTEGER
INBUF    EQU   MSGPARM+00000012    80 BYTE(S)
DSPTR    EQU   MSGPARM+00000092    FULLWORD POINTER
PTR1     EQU   MSGPARM+00000096    FULLWORD POINTER
CPECB    EQU   MSGPARM+00000100    FULLWORD INTEGER
CPPLPTR  EQU   MSGPARM+00000104    FULLWORD POINTER
GTPB     EQU   00000000            8 BYTE(S) ON WORD
A00000   EQU   GTPB+00000000       4 BYTE(S)
GTPBIBUF EQU   GTPB+00000004       FULLWORD POINTER
DAPB08   EQU   00000000            84 BYTE(S) ON WORD
DA08CD   EQU   DAPB08+00000000     2 BYTE(S)
DA08FLG  EQU   DAPB08+00000002     2 BYTE(S)
DA08FPE  EQU   DAPB08+00000002     1 BIT(S)
A00001   EQU   DAPB08+00000002     1 BIT(S)
A00002   EQU   DAPB08+00000002     1 BIT(S)
A00003   EQU   DAPB08+00000002     1 BIT(S)
A00004   EQU   DAPB08+00000002     1 BIT(S)
A00005   EQU   DAPB08+00000002     1 BIT(S)
A00006   EQU   DAPB08+00000002     1 BIT(S)
A00007   EQU   DAPB08+00000002     1 BIT(S)
DA08DARC EQU   DAPB08+00000004     HALFWORD INTEGER
DA08CTRC EQU   DAPB08+00000006     HALFWORD INTEGER
DA08PDSN EQU   DAPB08+00000008     FULLWORD POINTER
DA08DDN  EQU   DAPB08+00000012     8 BYTE(S)
DA08UNIT EQU   DAPB08+00000020     8 BYTE(S)
DA08SER  EQU   DAPB08+00000028     8 BYTE(S)
DA08BLK  EQU   DAPB08+00000036     4 BYTE(S)
DA08PQTY EQU   DAPB08+00000040     4 BYTE(S)
DA08SQTY EQU   DAPB08+00000044     4 BYTE(S)
DA08DQTY EQU   DAPB08+00000048     4 BYTE(S)
DA08MNM  EQU   DAPB08+00000052     8 BYTE(S)
DA08PSWD EQU   DAPB08+00000060     8 BYTE(S)
DA08DSP1 EQU   DAPB08+00000068     1 BYTE(S)
A00008   EQU   DAPB08+00000068     1 BIT(S)
A00009   EQU   DAPB08+00000068     1 BIT(S)
A00010   EQU   DAPB08+00000068     1 BIT(S)
A00011   EQU   DAPB08+00000068     1 BIT(S)
DA08SHR  EQU   DAPB08+00000068     1 BIT(S)
DA08NEW  EQU   DAPB08+00000068     1 BIT(S)
DA08MOD  EQU   DAPB08+00000068     1 BIT(S)
DA08OLD  EQU   DAPB08+00000068     1 BIT(S)
DA08DPS2 EQU   DAPB08+00000069     1 BYTE(S)
A00012   EQU   DAPB08+00000069     1 BIT(S)
A00013   EQU   DAPB08+00000069     1 BIT(S)
A00014   EQU   DAPB08+00000069     1 BIT(S)
A00015   EQU   DAPB08+00000069     1 BIT(S)
DA08KEEP EQU   DAPB08+00000069     1 BIT(S)
DA08DEL  EQU   DAPB08+00000069     1 BIT(S)
DA08CAT  EQU   DAPB08+00000069     1 BIT(S)
DA08UCAT EQU   DAPB08+00000069     1 BIT(S)
DA08DPS3 EQU   DAPB08+00000070     1 BYTE(S)
A00016   EQU   DAPB08+00000070     1 BIT(S)
A00017   EQU   DAPB08+00000070     1 BIT(S)
A00018   EQU   DAPB08+00000070     1 BIT(S)
A00019   EQU   DAPB08+00000070     1 BIT(S)
DA08KEP  EQU   DAPB08+00000070     1 BIT(S)
DA08DELE EQU   DAPB08+00000070     1 BIT(S)
DA08CATL EQU   DAPB08+00000070     1 BIT(S)
DA08UNCT EQU   DAPB08+00000070     1 BIT(S)
DA08CTL  EQU   DAPB08+00000071     1 BYTE(S)
DA08TRKS EQU   DAPB08+00000071     1 BIT(S)
DA08ABKL EQU   DAPB08+00000071     1 BIT(S)
DA08UID  EQU   DAPB08+00000071     1 BIT(S)
DA08RLSE EQU   DAPB08+00000071     1 BIT(S)
DA08PERM EQU   DAPB08+00000071     1 BIT(S)
DA08DMMY EQU   DAPB08+00000071     1 BIT(S)
DA08ATRL EQU   DAPB08+00000071     1 BIT(S)
A00020   EQU   DAPB08+00000071     1 BIT(S)
A00021   EQU   DAPB08+00000072     3 BYTE(S)
DA08DSO  EQU   DAPB08+00000075     1 BYTE(S)
DA08ALN  EQU   DAPB08+00000076     8 BYTE(S)
STPL     EQU   00000000            16 BYTE(S) ON WORD
STPLUPT  EQU   STPL+00000000       FULLWORD POINTER
STPLECT  EQU   STPL+00000004       FULLWORD POINTER
STPLECB  EQU   STPL+00000008       FULLWORD POINTER
STPLSTPB EQU   STPL+00000012       FULLWORD POINTER
CPPL     EQU   00000000            16 BYTE(S) ON WORD
CPPLCBUF EQU   CPPL+00000000       FULLWORD POINTER
CPPLUPT  EQU   CPPL+00000004       FULLWORD POINTER
CPPLPSCB EQU   CPPL+00000008       FULLWORD POINTER
CPPLECT  EQU   CPPL+00000012       FULLWORD POINTER
PGPB     EQU   00000000            16 BYTE(S) ON WORD
A00022   EQU   PGPB+00000000       12 BYTE(S) ON WORD
PGPBIBUF EQU   PGPB+00000012       FULLWORD POINTER
CHARST   EQU   00000000            80 BYTE(S)
DSNAME   EQU   00000000            46 BYTE(S) ON WORD
DSNLNGTH EQU   DSNAME+00000000     HALFWORD INTEGER
DSNM     EQU   DSNAME+00000002     44 BYTE(S)
DATASET  EQU   00000000            28 BYTE(S) ON WORD
DSN      EQU   DATASET+00000000    FULLWORD POINTER
DSL      EQU   DATASET+00000004    HALFWORD INTEGER
DSF      EQU   DATASET+00000006    16 BIT(S)
MEM      EQU   DATASET+00000008    FULLWORD POINTER
MEML     EQU   DATASET+00000012    HALFWORD INTEGER
MEMF     EQU   DATASET+00000014    16 BIT(S)
PASS     EQU   DATASET+00000016    FULLWORD POINTER
PASSL    EQU   DATASET+00000020    HALFWORD INTEGER
PASSF    EQU   DATASET+00000022    16 BIT(S)
NEXT     EQU   DATASET+00000024    FULLWORD POINTER
CBUF     EQU   00000000            5 BYTE(S) ON WORD
CBUFLNG  EQU   CBUF+00000000       HALFWORD POINTER
CBUFOFF  EQU   CBUF+00000002       HALFWORD POINTER
CBUFDATA EQU   CBUF+00000004       1 BYTE(S)
ID       EQU   *                   34*4 BYTE(S)
         DC    C'013I'
         DC    C'023I'
         DC    C'023I'
         DC    C'033I'
         DC    C'043I'
         DC    C'053I'
         DC    C'053I'
         DC    C'053I'
         DC    C'053I'
         DC    C'063I'
         DC    C'073I'
         DC    C'073I'
         DC    C'080A'
         DC    C'091I'
         DC    C'091I'
         DC    C'100A'
         DC    C'111I'
         DC    C'123I'
         DC    C'133I'
         DC    C'133I'
         DC    C'143I'
         DC    C'151I'
         DC    C'170A'
         DC    C'181I'
         DC    C'193I'
         DC    C'193I'
         DC    C'161I'
         DC    C'053I'
         DC    C'053I'
         DC    C'203I'
         DC    C'213I'
         DC    C'223I'
         DC    C'231I'
         DC    C'241I'
L        EQU   *                   59*1  BYTE  POINTER
         DC    AL1(8)
         DC    AL1(6)
         DC    AL1(14)
         DC    AL1(18)
         DC    AL1(24)
         DC    AL1(16)
         DC    AL1(16)
         DC    AL1(10)
         DC    AL1(15)
         DC    AL1(17)
         DC    AL1(25)
         DC    AL1(31)
         DC    AL1(13)
         DC    AL1(27)
         DC    AL1(28)
         DC    AL1(7)
         DC    AL1(17)
         DC    AL1(9)
         DC    AL1(13)
         DC    AL1(19)
         DC    AL1(31)
         DC    AL1(25)
         DC    AL1(22)
         DC    AL1(18)
         DC    AL1(27)
         DC    AL1(28)
         DC    AL1(8)
         DC    AL1(15)
         DC    AL1(16)
         DC    AL1(16)
         DC    AL1(11)
         DC    AL1(4)
         DC    AL1(4)
         DC    AL1(7)
         DC    AL1(21)
         DC    AL1(22)
         DC    AL1(5)
         DC    AL1(22)
         DC    AL1(5)
         DC    AL1(7)
         DC    AL1(25)
         DC    AL1(35)
         DC    AL1(9)
         DC    AL1(14)
         DC    AL1(26)
         DC    AL1(28)
         DC    AL1(16)
         DC    AL1(19)
         DC    AL1(17)
         DC    AL1(35)
         DC    AL1(27)
         DC    AL1(4)
         DC    AL1(3)
         DC    AL1(5)
         DC    AL1(4)
         DC    AL1(13)
         DC    AL1(25)
         DC    AL1(17)
         DC    AL1(16)
SEG1     EQU   *                   8 BYTE(S)
         DC    C'DATA SET'
SEG2     EQU   *                   6 BYTE(S)
         DC    C'NOT IN'
SEG3     EQU   *                   14 BYTE(S)
         DC    C'NOT ALLOCATED,'
SEG4     EQU   *                   18 BYTE(S)
         DC    C'TOO MANY DATA SETS'
SEG5     EQU   *                   24 BYTE(S)
         DC    C'USE FREE COMMAND TO FREE'
SEG6     EQU   *                   16 BYTE(S)
         DC    C'UNUSED DATA SETS'
SEG7     EQU   *                   16 BYTE(S)
         DC    C'UTILITY DATA SET'
SEG8     EQU   *                   10 BYTE(S)
         DC    C'NOT USABLE'
SEG9     EQU   *                   15 BYTE(S)
         DC    C'I/O SYNAD ERROR'
SEG10    EQU   *                   17 BYTE(S)
         DC    C'CONTROL STATEMENT'
SEG11    EQU   *                   25 BYTE(S)
         DC    C'ENTER CONTROL STATEMENTS-'
SEG12    EQU   *                   31 BYTE(S)
         DC    C'STATEMENT EXCEEDS 70 CHARACTERS'
SEG13    EQU   *                   13 BYTE(S)
         DC    C'SPECIFIED BUT'
SEG14    EQU   *                   27 BYTE(S)
         DC    C'NAME, EXCEEDS 44 CHARACTERS'
SEG15    EQU   *                   28 BYTE(S)
         DC    C'SYSTEM OR INSTALLATION ERROR'
SEG16    EQU   *                   7 BYTE(S)
         DC    C'CATALOG'
SEG17    EQU   *                   17 BYTE(S)
         DC    C'NOT A PARTITIONED'
SEG18    EQU   *                   9 BYTE(S)
         DC    C'A LIBRARY'
SEG19    EQU   *                   13 BYTE(S)
         DC    C'A LOAD MODULE'
SEG20    EQU   *                   19 BYTE(S)
         DC    C'MUST BE PARTITIONED'
SEG21    EQU   *                   31 BYTE(S)
         DC    C'TEMPNAME ASSUMED AS MEMBER NAME'
SEG22    EQU   *                   25 BYTE(S)
         DC    C'END OF CONTROL STATEMENTS'
SEG23    EQU   *                   22 BYTE(S)
         DC    C'DATA SET NOT ON VOLUME'
SEG24    EQU   *                   18 BYTE(S)
         DC    C'DYNAMIC ALLOCATION'
SEG25    EQU   *                   27 BYTE(S)
         DC    C'REQUIRED VOLUME NOT MOUNTED'
SEG26    EQU   *                   28 BYTE(S)
         DC    C'VOLUME OR CVOL NOT ON SYSTEM'
SEG27    EQU   *                   8 BYTE(S)
         DC    C'REENTER-'
SEG28    EQU   *                   15 BYTE(S)
         DC    C'VALID TYPES FOR'
SEG29    EQU   *                   16 BYTE(S)
         DC    C'ARE OBJ AND DATA'
SEG30    EQU   *                   16 BYTE(S)
         DC    C'ARE LOAD AND OBJ'
SEG31    EQU   *                   11 BYTE(S)
         DC    C'ENTER TYPE-'
SEG32    EQU   *                   4 BYTE(S)
         DC    C'CODE'
SEG33    EQU   *                   4 BYTE(S)
         DC    C'OPEN'
SEG34    EQU   *                   7 BYTE(S)
         DC    C'INVALID'
SEG35    EQU   *                   21 BYTE(S)
         DC    C'INFORMATION INCORRECT'
SEG36    EQU   *                   22 BYTE(S)
         DC    C'AND CANNOT BE ACCESSED'
SEG37    EQU   *                   5 BYTE(S)
         DC    C'ERROR'
SEG38    EQU   *                   22 BYTE(S)
         DC    C'ERROR IN CONCATENATING'
SEG39    EQU   *                   5 BYTE(S)
         DC    C'INPUT'
SEG40    EQU   *                   7 BYTE(S)
         DC    C'LIBRARY'
SEG41    EQU   *                   25 BYTE(S)
         DC    C'ALREADY IN USE, TRY LATER'
SEG42    EQU   *                   35 BYTE(S)
         DC    C'IS ALLOCATED TO ANOTHER JOB OR USER'
SEG43    EQU   *                   9 BYTE(S)
         DC    C'OPERATION'
SEG44    EQU   *                   14 BYTE(S)
         DC    C'COMMAND SYSTEM'
SEG45    EQU   *                   26 BYTE(S)
         DC    C'NOT ENOUGH SPACE ON VOLUME'
SEG46    EQU   *                   28 BYTE(S)
         DC    C'USE DELETE COMMAND TO DELETE'
SEG47    EQU   *                   16 BYTE(S)
         DC    C'UNUSED DATA SETS'
SEG48    EQU   *                   19 BYTE(S)
         DC    C'WILL CREATE INVALID'
SEG49    EQU   *                   17 BYTE(S)
         DC    C'CATALOG STRUCTURE'
SEG50    EQU   *                   35 BYTE(S)
         DC    C'A QUALIFIER CANNOT BE BOTH AN INDEX'
SEG51    EQU   *                   27 BYTE(S)
         DC    C'AND THE LAST QUALIFIER OF A'
SEG52    EQU   *                   4 BYTE(S)
         DC    C'NAME'
SEG53    EQU   *                   3 BYTE(S)
         DC    C'I/O'
SEG54    EQU   *                   5 BYTE(S)
         DC    C'DADSM'
SEG55    EQU   *                   4 BYTE(S)
         DC    C'DAIR'
SEG56    EQU   *                   13 BYTE(S)
         DC    C'DATA SET NAME'
SEG57    EQU   *                   25 BYTE(S)
         DC    C'PARAMETER FIELD TRUNCATED'
SEG58    EQU   *                   17 BYTE(S)
         DC    C'TO 100 CHARACTERS'
SEG59    EQU   *                   16 BYTE(S)
         DC    C'FAILURE - RETURN'
CONTROL  EQU   *                   272*1  BYTE  POINTER
         DC    AL1(1)
         DC    AL1(2)
         DC    AL1(16)
         DC    AL1(19)
         DC    AL1(0)
         DC    AL1(0)
         DC    AL1(0)
         DC    AL1(0)
         DC    AL1(1)
         DC    AL1(3)
         DC    AL1(4)
         DC    AL1(19)
         DC    AL1(5)
         DC    AL1(6)
         DC    AL1(0)
         DC    AL1(0)
         DC    AL1(7)
         DC    AL1(3)
         DC    AL1(4)
         DC    AL1(0)
         DC    AL1(5)
         DC    AL1(6)
         DC    AL1(0)
         DC    AL1(0)
         DC    AL1(1)
         DC    AL1(3)
         DC    AL1(23)
         DC    AL1(19)
         DC    AL1(16)
         DC    AL1(35)
         DC    AL1(0)
         DC    AL1(0)
         DC    AL1(1)
         DC    AL1(3)
         DC    AL1(25)
         DC    AL1(19)
         DC    AL1(26)
         DC    AL1(36)
         DC    AL1(0)
         DC    AL1(0)
         DC    AL1(1)
         DC    AL1(3)
         DC    AL1(15)
         DC    AL1(19)
         DC    AL1(24)
         DC    AL1(37)
         DC    AL1(32)
         DC    AL1(0)
         DC    AL1(1)
         DC    AL1(3)
         DC    AL1(15)
         DC    AL1(19)
         DC    AL1(16)
         DC    AL1(37)
         DC    AL1(32)
         DC    AL1(0)
         DC    AL1(7)
         DC    AL1(3)
         DC    AL1(15)
         DC    AL1(0)
         DC    AL1(24)
         DC    AL1(37)
         DC    AL1(32)
         DC    AL1(0)
         DC    AL1(1)
         DC    AL1(3)
         DC    AL1(15)
         DC    AL1(19)
         DC    AL1(16)
         DC    AL1(53)
         DC    AL1(37)
         DC    AL1(0)
         DC    AL1(1)
         DC    AL1(41)
         DC    AL1(0)
         DC    AL1(19)
         DC    AL1(1)
         DC    AL1(42)
         DC    AL1(0)
         DC    AL1(0)
         DC    AL1(10)
         DC    AL1(1)
         DC    AL1(8)
         DC    AL1(0)
         DC    AL1(9)
         DC    AL1(0)
         DC    AL1(0)
         DC    AL1(0)
         DC    AL1(10)
         DC    AL1(1)
         DC    AL1(8)
         DC    AL1(0)
         DC    AL1(33)
         DC    AL1(37)
         DC    AL1(0)
         DC    AL1(0)
         DC    AL1(11)
         DC    AL1(0)
         DC    AL1(0)
         DC    AL1(0)
         DC    AL1(0)
         DC    AL1(0)
         DC    AL1(0)
         DC    AL1(0)
         DC    AL1(34)
         DC    AL1(10)
         DC    AL1(0)
         DC    AL1(0)
         DC    AL1(12)
         DC    AL1(0)
         DC    AL1(0)
         DC    AL1(0)
         DC    AL1(34)
         DC    AL1(10)
         DC    AL1(0)
         DC    AL1(0)
         DC    AL1(34)
         DC    AL1(43)
         DC    AL1(0)
         DC    AL1(0)
         DC    AL1(27)
         DC    AL1(0)
         DC    AL1(0)
         DC    AL1(0)
         DC    AL1(0)
         DC    AL1(0)
         DC    AL1(0)
         DC    AL1(0)
         DC    AL1(22)
         DC    AL1(0)
         DC    AL1(0)
         DC    AL1(0)
         DC    AL1(0)
         DC    AL1(0)
         DC    AL1(0)
         DC    AL1(0)
         DC    AL1(34)
         DC    AL1(1)
         DC    AL1(14)
         DC    AL1(33)
         DC    AL1(0)
         DC    AL1(0)
         DC    AL1(0)
         DC    AL1(0)
         DC    AL1(17)
         DC    AL1(1)
         DC    AL1(0)
         DC    AL1(10)
         DC    AL1(19)
         DC    AL1(1)
         DC    AL1(20)
         DC    AL1(0)
         DC    AL1(17)
         DC    AL1(1)
         DC    AL1(0)
         DC    AL1(10)
         DC    AL1(18)
         DC    AL1(1)
         DC    AL1(20)
         DC    AL1(0)
         DC    AL1(2)
         DC    AL1(1)
         DC    AL1(0)
         DC    AL1(42)
         DC    AL1(21)
         DC    AL1(0)
         DC    AL1(0)
         DC    AL1(0)
         DC    AL1(28)
         DC    AL1(1)
         DC    AL1(29)
         DC    AL1(35)
         DC    AL1(0)
         DC    AL1(0)
         DC    AL1(0)
         DC    AL1(0)
         DC    AL1(31)
         DC    AL1(0)
         DC    AL1(0)
         DC    AL1(0)
         DC    AL1(0)
         DC    AL1(0)
         DC    AL1(0)
         DC    AL1(0)
         DC    AL1(13)
         DC    AL1(17)
         DC    AL1(1)
         DC    AL1(40)
         DC    AL1(0)
         DC    AL1(0)
         DC    AL1(0)
         DC    AL1(0)
         DC    AL1(38)
         DC    AL1(39)
         DC    AL1(1)
         DC    AL1(0)
         DC    AL1(0)
         DC    AL1(0)
         DC    AL1(0)
         DC    AL1(0)
         DC    AL1(38)
         DC    AL1(40)
         DC    AL1(1)
         DC    AL1(0)
         DC    AL1(0)
         DC    AL1(0)
         DC    AL1(0)
         DC    AL1(0)
         DC    AL1(28)
         DC    AL1(1)
         DC    AL1(30)
         DC    AL1(35)
         DC    AL1(0)
         DC    AL1(0)
         DC    AL1(0)
         DC    AL1(0)
         DC    AL1(1)
         DC    AL1(3)
         DC    AL1(15)
         DC    AL1(19)
         DC    AL1(54)
         DC    AL1(37)
         DC    AL1(32)
         DC    AL1(0)
         DC    AL1(7)
         DC    AL1(3)
         DC    AL1(15)
         DC    AL1(0)
         DC    AL1(54)
         DC    AL1(37)
         DC    AL1(32)
         DC    AL1(0)
         DC    AL1(44)
         DC    AL1(37)
         DC    AL1(0)
         DC    AL1(0)
         DC    AL1(55)
         DC    AL1(37)
         DC    AL1(32)
         DC    AL1(0)
         DC    AL1(1)
         DC    AL1(48)
         DC    AL1(49)
         DC    AL1(19)
         DC    AL1(50)
         DC    AL1(51)
         DC    AL1(56)
         DC    AL1(0)
         DC    AL1(1)
         DC    AL1(3)
         DC    AL1(45)
         DC    AL1(19)
         DC    AL1(46)
         DC    AL1(47)
         DC    AL1(0)
         DC    AL1(0)
         DC    AL1(57)
         DC    AL1(58)
         DC    AL1(0)
         DC    AL1(0)
         DC    AL1(0)
         DC    AL1(0)
         DC    AL1(0)
         DC    AL1(0)
         DC    AL1(24)
         DC    AL1(59)
         DC    AL1(32)
         DC    AL1(0)
         DC    AL1(0)
         DC    AL1(0)
         DC    AL1(0)
         DC    AL1(0)
HEX      EQU   *                   16 BYTE(S)
         DC    C'0123456789ABCDEF'
R2       EQU   00000002            FULLWORD INTEGER REGISTER
R3       EQU   00000003            FULLWORD INTEGER REGISTER
R1       EQU   00000001            FULLWORD POINTER REGISTER
         ORG   @DATA
         DS    00001468C
@L       EQU   2
@DATD    DSECT
@SAV001  EQU   @DATD+00000000      72 BYTE(S) ON WORD
CBUFPTR  EQU   @DATD+00000072      FULLWORD POINTER
PGPBPTR  EQU   @DATD+00000076      FULLWORD POINTER
GTPBPTR  EQU   @DATD+00000080      FULLWORD POINTER
LSTPTR   EQU   @DATD+00000084      FULLWORD POINTER
PARML    EQU   @DATD+00000088      16 BYTE(S) ON WORD
PARMB    EQU   @DATD+00000104      20 BYTE(S) ON WORD
ENDD     EQU   @DATD+00000124      FULLWORD INTEGER
BEG      EQU   @DATD+00000128      FULLWORD INTEGER
J        EQU   @DATD+00000132      FULLWORD INTEGER
N        EQU   @DATD+00000136      FULLWORD INTEGER
BUFF     EQU   @DATD+00000140      4*79 BYTE(S) ON WORD
LL       EQU   BUFF+00000000       HALFWORD INTEGER
OFF      EQU   BUFF+00000002       HALFWORD INTEGER
TEXT     EQU   BUFF+00000004       75 BYTE(S)
MESSAGE  EQU   @DATD+00000460      2*16 BYTE(S) ON WORD
NLEVEL   EQU   MESSAGE+00000000    FULLWORD POINTER
NSEGS    EQU   MESSAGE+00000004    FULLWORD INTEGER
ADD1     EQU   MESSAGE+00000008    FULLWORD POINTER
ADD2     EQU   MESSAGE+00000012    FULLWORD POINTER
MESNO    EQU   @DATD+00000492      HALFWORD INTEGER
LVL      EQU   @DATD+00000494      HALFWORD INTEGER
INDEX    EQU   @DATD+00000496      HALFWORD INTEGER
SUB      EQU   @DATD+00000498      HALFWORD INTEGER
SEGNO    EQU   @DATD+00000500      HALFWORD INTEGER
SEGAD    EQU   @DATD+00000504      FULLWORD POINTER
         DS    00000508C
@TEMPS   DS    0F
@TEMP2   DC    F'0'
@DATEND  EQU   *
AKJLKMSG CSECT ,
@9E1     EQU   SNG
@9D9     EQU   ENDMSG
@9D8     EQU   ENDMSG
@9D7     EQU   ENDMSG
         END   AKJLKMSG,(C'PL/S',1400,78208)
