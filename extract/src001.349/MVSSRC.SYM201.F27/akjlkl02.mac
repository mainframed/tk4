         TITLE 'AKJLKL02 - PROMPTER CONTROL MODULE'
         LCLA  &T,&SPN                                            0001
.@001    ANOP                                                     0001
AKJLKL02 CSECT ,                                                  0001
         ST    @E,12(0,@D)                                        0001
         STM   @0,@C,20(@D)                                       0001
         BALR  @B,0                                               0001
@PSTART  DS    0H                                                 0001
         USING @PSTART+00000,@B                                   0001
         L     @0,@SIZ001                                         0001
         GETMAIN  R,LV=(0)                                        0001
         LR    @C,@1                                              0001
         USING @DATD+00000,@C                                     0001
         LM    @0,@1,20(@D)                                       0001
         XC    @TEMPS(@L),@TEMPS                                  0001
         ST    @D,@SAV001+4                                       0001
         LA    @F,@SAV001                                         0001
         ST    @F,8(0,@D)                                         0001
         LR    @D,@F                                              0001
*         PARMPTR=R1;                   /* GET ADDR.OF INCOMING PARMS *
         ST    @1,PARMPTR                                         0031
*         PTR1=ADDR(VALREG);            /* SET POINTER TO SAVE PARM   *
         LA    @F,VALREG                                          0032
         ST    @F,PTR1                                            0032
*         PTR1->BASEREG=R11;            /* SAVE BASE REG.             *
         LR    @8,@F                                              0033
         ST    @B,0(0,@8)                                         0033
*         PTR1->DATAREG=R12;            /* SAVE DATAREG               *
         ST    @C,4(0,@8)                                         0034
*         EXADD=ADDR(ABEX);             /* SET ADDRESS OF EXIT        *
         LA    @F,ABEX                                            0035
         ST    @F,STAEL                                           0035
*         PRMADD=ADDR(VALREG);          /* SET PTR. TO SAVE PARMS     *
         LA    @F,VALREG                                          0036
         ST    @F,STAEL+4                                         0036
*         GEN(ESTAE MF=(E,STAEL));      /* CREATE STAE BLOCK  ZM02759 *
         ESTAE MF=(E,STAEL)
         DS    0H
*         PT=ADDR(FINIS);               /* SET RETURN ADDR    ZM00615 *
         LA    @F,FINIS                                           0038
         ST    @F,PT                                              0038
*         ECTPTR=CPPLECT;               /* SET POINTER TO ECT         *
         L     @9,PARMPTR                                         0039
         L     @9,4(0,@9)          PARMS                          0039
         MVC   ECTPTR(4),12(@9)                                   0039
*         IF LKLD='    '                /* NO BRANCH NECESSARY?       *
*            THEN DO;
         L     @6,PARMPTR                                         0040
         CLC   0(4,@6),@C1                                        0040
         BC    07,@9FF                                            0040
*                 /* ************************************************ *
*                 /* ERROR IN PROCESSING - DELETE THE STACK           *
*                 /* ************************************************ *
*                 STPLPTR=ADDR(STLST);  /* SET STACK LIST POINTER     *
         LA    @F,STLST                                           0042
         ST    @F,STPLPTR                                         0042
*                 STPLUPT=CPPLUPT;      /* SET UPT POINTER            *
         LR    @7,@F                                              0043
         MVC   0(4,@7),4(@9)                                      0043
*                 STPLECT=CPPLECT;      /* SET ECT POINTER            *
         MVC   4(4,@7),12(@9)                                     0044
*                 STPLECB=ADDR(CPECB);  /* SET ECB POINTER            *
         LA    @F,CPECB                                           0045
         ST    @F,8(0,@7)                                         0045
*                 STPLSTPB=ADDR(STPB);  /* SET STACK BLOCK POINTER    *
         LA    @F,STPB                                            0046
         ST    @F,12(0,@7)                                        0046
*                 GEN(STACK DELETE=ALL,MF=(E,STLST)); /* NO STACK     *
         STACK DELETE=ALL,MF=(E,STLST)
         DS    0H
*                 GEN(TCLEARQ INPUT);   /* GET RID OF INPUT LINES     *
         TCLEARQ INPUT
         DS    0H
*                 RCODE=12;             /* SET ERROR RETURN CODE      *
         LA    @F,12                                              0049
         ST    @F,RCODE                                           0049
*                 GO TO DECONC;         /* DECONCATENATE IF NECESSARY *
         BC    15,DECONC                                          0050
*                 END;
*         GEN(FREEMAIN R,SP=1);         /* FREE PARSE WORKAREA M1814  *
@9FF     EQU   *                                                  0052
         FREEMAIN R,SP=1
         DS    0H
*         IF LKLD='LINK'                /* LINK. EDIT. TO BE INVOKED? *
*            THEN DO;                   /* YES - LINK TO IT           *
         L     @8,PARMPTR                                         0053
         CLC   0(4,@8),@C2                                        0053
         BC    07,@9FE                                            0053
*                 R1=ADDR(OPTPTR);      /* SET PARM. POINTER          *
         LA    @1,12(0,@8)                                        0055
*                 GEN(LINK  EP=HEWL);   /* GO TO L. E.         M2119  *
         LINK  EP=HEWL
         DS    0H
         BC    15,@9FD                                            0058
*                 END;
*            ELSE DO;                   /* NO - LINK TO LOADER        *
*                 R1=ADDR(OPTPTR);      /* SET PARM. POINTER          *
@9FE     L     @8,PARMPTR                                         0059
         LA    @1,12(0,@8)                                        0059
*                 GEN(LINK  EP=LOADER); /* GO TO LOADER               *
         LINK  EP=LOADER
         DS    0H
*                 END;
*         RCODE=R15;                    /* GET CODE FROM L.E. OR LOAD.*
@9FD     ST    @F,RCODE                                           0062
* DECONC:  ;
*         /* ******************************************************** *
*         /* DECONCATENATE INPUT AND LIBRARY DDNAMES IF NECESSARY     *
*         /* ******************************************************** *
*         DAPB1PTR=ADDR(DAIR10);        /* SET BLOCK POINTER          *
DECONC   LA    @F,DAIR10                                          0064
         ST    @F,DAPB1PTR                                        0064
*         GEN(XC    DAIR10(16),DAIR10); /* ZERO OUT BLOCK             *
         XC    DAIR10(16),DAIR10
         DS    0H
*         DA10CD='0010'X;               /* SET CODE                   *
         L     @8,DAPB1PTR                                        0066
         MVC   0(2,@8),@X3                                        0066
*         DAPLPTR=ADDR(DAIRL);          /* SET UP LIST POINTER        *
         LA    @F,DAIRL                                           0067
         ST    @F,DAPLPTR                                         0067
*         DAPLUPT=CPPLUPT;              /* SET UPT POINTER            *
         L     @9,PARMPTR                                         0068
         L     @9,4(0,@9)          PARMS                          0068
         LR    @6,@F                                              0068
         MVC   0(4,@6),4(@9)                                      0068
*         DAPLECT=CPPLECT;              /* SET ECT POINTER            *
         MVC   4(4,@6),12(@9)                                     0069
*         DAPLECB=ADDR(CPECB);          /* SET ECB POINTER            *
         LA    @F,CPECB                                           0070
         ST    @F,8(0,@6)                                         0070
*         DAPLPSCB=CPPLPSCB;            /* SET PSCB POINTER           *
         MVC   12(4,@6),8(@9)                                     0071
*         DAPLDAPB=DAPB1PTR;            /* SET DAIR PARM BLOCK POINTER*
         MVC   16(4,@6),DAPB1PTR                                  0072
*         DO I=1 TO 2;                  /* LOOP ON DDNAMES            *
         LA    @F,1                                               0073
         ST    @F,I                                               0073
*         IF DDNAME(I)='        '       /* IS DDNAME BLANK?           *
*            THEN GO TO EL1;            /* YES - DONT DECONCATENATE   *
@DO9FC   L     @8,I                                               0074
         BCTR  @8,0                                               0074
         SLA   @8,3                                               0074
         L     @9,PARMPTR                                         0074
         L     @9,8(0,@9)          PARMS                          0074
         LA    @A,0(@8,@9)                                        0074
         CLC   0(8,@A),@C4                                        0074
         BC    08,EL1                                             0075
*         DA10DDN=DDNAME(I);            /* SET DDNAME IN PARM BLOCK   *
         LA    @E,0(@8,@9)                                        0076
         L     @6,DAPB1PTR                                        0076
         MVC   8(8,@6),0(@E)                                      0076
*         R1=DAPLPTR;                   /* SET LIST POINTER           *
         L     @1,DAPLPTR                                         0077
*         GEN(LINK   EP=IKJDAIR);       /* GO TO DAIR                 *
         LINK   EP=IKJDAIR
         DS    0H
* EL1:    END;                          /* END OF LOOP ON DDNAMES     *
*         GO TO ENDPROC;                /* RETURN             ZM00615 *
EL1      L     @F,I                                               0079
         AH    @F,@D1                                             0079
@DO9FB   ST    @F,I                                               0079
         CH    @F,@D2                                             0079
         BC    12,@DO9FC                                          0079
         L     @8,PT                                              0080
         BCR   15,@8                                              0080
* FINIS:  RETURN CODE(RCODE);           /* PASS RET CD BACK   ZM02759 *
FINIS    L     @D,4(0,@D)                                         0081
         L     @F,RCODE                                           0081
         ST    @F,16(0,@D)                                        0081
         LR    @1,@C                                              0081
         L     @0,@SIZ001                                         0081
         FREEMAIN R,LV=(0),A=(1)                                  0081
         LM    @E,@C,12(@D)                                       0081
         BCR   15,@E                                              0081
* /********************************************************************
* /*                                                                  *
* /* THIS ROUTINE RECEIVES CONTROL WHEN AN ABEND OCCURS. THE ABEND    *
* /* CODE IS STORED IN THE ECT AND THE ABEND FLAG IN THE ECT IS SET.  *
* /* ANY CONCATENATED DATA SETS ARE DECONCATENATED. A RETURN CODE OF  *
* /* 0 IS PLACED IN REGISTER 15. A RETURN IS ISSUED AND CONTROL GOES  *
* /* BACK TO ABEND PROCESSING.                                        *
* /*                                                                  *
* /********************************************************************
* ABEX:   PROC OPTIONS(NOSAVEAREA,DONTSAVE);
@EL01    L     @D,4(0,@D)                                         0082
         LR    @1,@C                                              0082
         L     @0,@SIZ001                                         0082
         FREEMAIN R,LV=(0),A=(1)                                  0082
         L     @E,12(0,@D)                                        0082
         LM    @0,@C,20(@D)                                       0082
         BCR   15,@E                                              0082
ABEX     EQU   *                                                  0082
*         DCL 1 WORKAREA BASED(R1),     /* STAE WORK AREA             *
*               2 PARMSREG PTR,         /* POINTER TO BASE,DYNAM. REGS*
*               2 ABCODE FIXED(31);     /* ABEND CODE                 *
*         DCL R13 REG(13) PTR(31);      /* FORWARD POINTER REGISTER   *
*         DCL SAVEAR2(18) FIXED(31),    /* INTERNAL SAVE AREA         *
*             FPTR2 PTR BASED(R13+8);   /* FORWARD POINTER            *
*         DCL R0 REG(0) FIXED(31);      /* WHERE ABEND CODE IS        *
*         RESTRICT(1);                  /* DONT DESTROY REG1  @ZA18262*
*         GEN;                          /*                    @ZA31176*
         DROP  R11                     /* ESTABLISH          @ZA31176*/
         USING ABEX,R15                /* BASE REGISTER      @ZA31176*/
         DS    0H
*         IF R0=12 THEN                 /* RETURN TO RTM IF   @ZA31176*
         CH    @0,@D3                                             0089
*            GO TO ENDAB1;              /* NO SDWA IS PRESENT @ZA31176*
         BC    08,ENDAB1                                          0090
*         GEN;                          /*                    @ZA31176*
         DROP  R15                     /* SDWA IS PRESENT -  @ZA31176*/
         USING @PSTART,R11             /* RESET BASE REG AND @ZA31176*/
         ST    @E,12(0,@D)             /* SAVE REGISTERS.    @ZA31176*/
         STM   @0,@C,20(@D)            /*                    @ZA31176*/
         DS    0H
*         R11=PARMSREG->BASEREG;        /* RESTORE SEC. BASE REG.     *
         L     @8,0(0,@1)          
         L     @B,0(0,@8)                                         0092
*         R12=PARMSREG->DATAREG;        /* RESTORE DATA REG.          *
         L     @C,4(0,@8)                                         0093
*         SAVEAR2(2)=R13;               /* SET SAVE AREA PTR.         *
         ST    @D,SAVEAR2+4                                       0094
*         FPTR2=ADDR(SAVEAR2);          /* SET FORWARD POINTER        *
         LA    @F,SAVEAR2                                         0095
         ST    @F,8(0,@D)                                         0095
*         R13=FPTR2;                    /* POINT REG 13 TO SAVE AREA  *
         L     @D,8(0,@D)                                         0096
*         ECTRTCD=ABCODE;               /* GET ABEND CODE     @ZA31176*
         L     @9,ECTPTR                                          0097
         MVC   1(3,@9),5(@1)                                      0097
*                                       /* FROM STAE WORK AREA.       *
*         ECTRCDF='80'X;                /* SET ABEND CODE FLAG        *
         MVI   0(@9),X'80'                                        0098
*         PT=ADDR(ENDAB);               /* SET RETURN ADDR    ZM00615 *
         LA    @F,ENDAB                                           0099
         ST    @F,PT                                              0099
*         GO TO DECONC;                 /* DECONCATENATE      ZM00615 *
         BC    15,DECONC                                          0100
* ENDAB:  R13=SAVEAR2(2);               /* RESTORE REG. 13            *
ENDAB    L     @D,SAVEAR2+4                                       0101
*         GEN;                          /*                    @ZA31176*
         L     @E,12(0,@D)             /* RESTORE REGS       @ZA31176*/
         LM    @0,@C,20(@D)            /*                    @ZA31176*/
         DS    0H
* ENDAB1: R15=0;                        /* CONTINUE ABEND     @ZA31176*
ENDAB1   SR    @F,@F                                              0103
*         END ABEX;
@EL02    BCR   15,@E                                              0104
*         END AKJLKL02
* /* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.
* /*%INCLUDE SYSLIB  (IKJECT  )
* /*%INCLUDE SYSLIB  (IKJCPPL )
* /*%INCLUDE SYSLIB  (IKJDAPL )
* /*%INCLUDE SYSLIB  (IKJDAP10)
* /*%INCLUDE SYSLIB  (IKJSTPL )
* ;
@DATA1   EQU   *
@0       EQU   00                  EQUATES FOR REGISTERS 0-15
@1       EQU   01
@2       EQU   02
@3       EQU   03
@4       EQU   04
@5       EQU   05
@6       EQU   06
@7       EQU   07
@8       EQU   08
@9       EQU   09
@A       EQU   10
@B       EQU   11
@C       EQU   12
@D       EQU   13
@E       EQU   14
@F       EQU   15
@D1      DC    H'1'
@D2      DC    H'2'
@D3      DC    H'12'
         DS    0F
@SIZ001  DC    AL1(&SPN)
         DC    AL3(@DATEND-@DATD)
         DS    0F
@C1      DC    C'    '
@C2      DC    C'LINK'
@C4      DC    C'        '
@X3      DC    X'0010'
         DS    0D
@DATA    EQU   *
DUMMY    EQU   00000000            FULLWORD INTEGER
PARMS    EQU   00000000            20 BYTE(S) ON WORD
LKLD     EQU   PARMS+00000000      4 BYTE(S)
CPPLPTR  EQU   PARMS+00000004      FULLWORD POINTER
CONCAT   EQU   PARMS+00000008      FULLWORD POINTER
OPTPTR   EQU   PARMS+00000012      FULLWORD POINTER
DDPTR    EQU   PARMS+00000016      FULLWORD POINTER
ECT      EQU   00000000            56 BYTE(S) ON WORD
ECTRCDF  EQU   ECT+00000000        1 BYTE(S)
ECTRTCD  EQU   ECT+00000001        3  BYTE  POINTER ON WORD+1
ECTIOWA  EQU   ECT+00000004        FULLWORD POINTER
ECTMSGF  EQU   ECT+00000008        1 BYTE(S)
ECTSMSG  EQU   ECT+00000009        3  BYTE  POINTER
ECTPCMD  EQU   ECT+00000012        8 BYTE(S)
ECTSCMD  EQU   ECT+00000020        8 BYTE(S)
ECTSWS   EQU   ECT+00000028        1 BYTE(S)
ECTNOPD  EQU   ECT+00000028        1 BIT(S)
A00000   EQU   ECT+00000028        1 BIT(S)
ECTATRM  EQU   ECT+00000028        1 BIT(S)
ECTLOGF  EQU   ECT+00000028        1 BIT(S)
ECTNMAL  EQU   ECT+00000028        1 BIT(S)
ECTNNOT  EQU   ECT+00000028        1 BIT(S)
ECTBKGRD EQU   ECT+00000028        1 BIT(S)
ECTATTN  EQU   ECT+00000028        1 BIT(S)
ECTDDNUM EQU   ECT+00000029        3  BYTE  POINTER ON WORD+1
ECTUSER  EQU   ECT+00000032        FULLWORD POINTER
ECTBKPB  EQU   ECT+00000036        FULLWORD POINTER
ECTSWS2  EQU   ECT+00000040        4 BYTE(S) ON WORD
ECTSWS21 EQU   ECT+00000040        8 BIT(S)
ECTDEFCS EQU   ECT+00000040        1 BIT(S)
ECTTABND EQU   ECT+00000040        1 BIT(S)
A00001   EQU   ECT+00000040        6 BIT(S)
A00002   EQU   ECT+00000041        3 BYTE(S)
A00003   EQU   ECT+00000044        FULLWORD POINTER
A00004   EQU   ECT+00000048        FULLWORD POINTER
A00005   EQU   ECT+00000052        FULLWORD POINTER
CPPL     EQU   00000000            16 BYTE(S) ON WORD
CPPLCBUF EQU   CPPL+00000000       FULLWORD POINTER
CPPLUPT  EQU   CPPL+00000004       FULLWORD POINTER
CPPLPSCB EQU   CPPL+00000008       FULLWORD POINTER
CPPLECT  EQU   CPPL+00000012       FULLWORD POINTER
DAPL     EQU   00000000            20 BYTE(S) ON WORD
DAPLUPT  EQU   DAPL+00000000       FULLWORD POINTER
DAPLECT  EQU   DAPL+00000004       FULLWORD POINTER
DAPLECB  EQU   DAPL+00000008       FULLWORD POINTER
DAPLPSCB EQU   DAPL+00000012       FULLWORD POINTER
DAPLDAPB EQU   DAPL+00000016       FULLWORD POINTER
DAPB10   EQU   00000000            16 BYTE(S) ON WORD
DA10CD   EQU   DAPB10+00000000     2 BYTE(S)
DA10FLG  EQU   DAPB10+00000002     2 BYTE(S)
DA10DARC EQU   DAPB10+00000004     HALFWORD INTEGER
A00006   EQU   DAPB10+00000006     2 BYTE(S)
DA10DDN  EQU   DAPB10+00000008     8 BYTE(S)
STPL     EQU   00000000            16 BYTE(S) ON WORD
STPLUPT  EQU   STPL+00000000       FULLWORD POINTER
STPLECT  EQU   STPL+00000004       FULLWORD POINTER
STPLECB  EQU   STPL+00000008       FULLWORD POINTER
STPLSTPB EQU   STPL+00000012       FULLWORD POINTER
DDNAME   EQU   00000000            2*8 BYTE(S)
R1       EQU   00000001            FULLWORD POINTER REGISTER
R15      EQU   00000015            FULLWORD INTEGER REGISTER
SAVEPRM  EQU   00000000            8 BYTE(S) ON WORD
BASEREG  EQU   SAVEPRM+00000000    FULLWORD INTEGER
DATAREG  EQU   SAVEPRM+00000004    FULLWORD INTEGER
R11      EQU   00000011            FULLWORD INTEGER REGISTER
R12      EQU   00000012            FULLWORD INTEGER REGISTER
PATCH    EQU   @DATA+00000000      32 BYTE(S)
WORKAREA EQU   00000000            8 BYTE(S) ON WORD
PARMSREG EQU   WORKAREA+00000000   FULLWORD POINTER
ABCODE   EQU   WORKAREA+00000004   FULLWORD INTEGER
R13      EQU   00000013            FULLWORD POINTER REGISTER
FPTR2    EQU   00000008            FULLWORD POINTER
R0       EQU   00000000            FULLWORD INTEGER REGISTER
         DS    00000032C
@L       EQU   1
@DATD    DSECT
@SAV001  EQU   @DATD+00000000      72 BYTE(S) ON WORD
PARMPTR  EQU   @DATD+00000072      FULLWORD POINTER
DAPB1PTR EQU   @DATD+00000076      FULLWORD POINTER
DAPLPTR  EQU   @DATD+00000080      FULLWORD POINTER
STPLPTR  EQU   @DATD+00000084      FULLWORD POINTER
ECTPTR   EQU   @DATD+00000088      FULLWORD POINTER
DAIR10   EQU   @DATD+00000092      16 BYTE(S) ON WORD
DAIRL    EQU   @DATD+00000108      20 BYTE(S) ON WORD
CPECB    EQU   @DATD+00000128      FULLWORD INTEGER
I        EQU   @DATD+00000132      FULLWORD INTEGER
STAEL    EQU   @DATD+00000136      16 BYTE(S) ON WORD
EXADD    EQU   STAEL+00000000      FULLWORD POINTER
PRMADD   EQU   STAEL+00000004      FULLWORD POINTER
A00007   EQU   STAEL+00000008      FULLWORD POINTER
A00008   EQU   STAEL+00000012      FULLWORD POINTER
PT       EQU   @DATD+00000152      FULLWORD POINTER
PTR1     EQU   @DATD+00000156      FULLWORD POINTER
VALREG   EQU   @DATD+00000160      8 BYTE(S) ON WORD
STPB     EQU   @DATD+00000168      8 BYTE(S)
STLST    EQU   @DATD+00000176      16 BYTE(S)
RCODE    EQU   @DATD+00000192      FULLWORD INTEGER
SAVEAR2  EQU   @DATD+00000196      18*FULLWORD INTEGER
         DS    00000268C
@TEMPS   DS    0F
         DS    C
@DATEND  EQU   *
AKJLKL02 CSECT ,
         END   AKJLKL02,(C'PL/S',1400,78209)
