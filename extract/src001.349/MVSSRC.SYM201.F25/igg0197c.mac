         TITLE 'IGG0197C - IOB-MICB-CCW CONSTRUCTION'
IGG0197C CSECT
         SPACE
***********************************************************************
*                                                                     *
* MODULE NAME - IGG0197C                                              *
*                                                                     *
* DESCRIPTIVE NAME - MICR PROCESSOR FOR IOB'S, MICB'S, AND CCW'S      *
*                                                                     *
* COPYRIGHT - NONE                                                    *
*                                                                     *
* CHANGE ACTIVITY - AS FOLLOWS:                                       *
*                                                                     *
*          RELEASE 21 DELETIONS                                       *
*0000384000                                                      A41426
*0000232000                                                      A48612
*                                                                     *
*          VS2 RELEASE 02 DELETIONS                                   *
*D152000-154000,168000,178000,283200,320000,346000-347000,360000,Y02072
*D383000,412000,422000,456000,660000,722000-724000,750000-768000,Y02072
*D772000-778000,806000-808000                                    Y02072
*                                                              @ZA07621
*          VS2 RELEASE 04.0 CHANGES                            @ZA07621
*C770004                                                       @ZA07621
*                                                                     *
*                                                                     *
* STATUS - VS2 RELEASE 2 LEVEL 0                                      *
*                                                                     *
*                                                                     *
* FUNCTION/OPERATION - THIS ROUTINE SUPPLEMENTS THE INITIAL OPEN      *
*      ROUTINE BY PERFORMING SPECIFIC FUNCTIONS FOR THE MAGNETIC      *
*      INK CHARACTER READER PROCESSING.                               *
*      IT DETERMINES THE AMOUNT OF SPACE REQUIRED FOR THE IOB'S AND   *
*      MAGNETIC CHARACTER READER INTERRUPT CONTROL BLOCKS (MICB) AND  *
*      ISSUES A GETMAIN FOR THE MAIN STORAGE.  THE IOB'S AND MICB'S   *
*      ARE INITIALIZED WITH AS MUCH INFORMATION AS AVAILABLE.         *
*      THE AMOUNT OF SPACE REQUIRED FOR THE CCW'S, WRITE DELAY        *
*      BUFFERS, AND AN ECB PARAMETER LIST IS DETERMINED AND A         *
*      GETMAIN ISSUED FOR THE SPACE. THESE FIELDS ARE INITIALIZED     *
*      OR BUILT WITH THEIR REQUIRED DATA.                             *
*      THE PROCESSING OF THIS ROUTINE IS REPEATED UNTIL ALL THE       *
*      DCB'S IN THE PARAMETER LIST ARE EXHAUSTED.                     *
*                                                                     *
*                                                                     *
* ENTRY POINT-  THIS ROUTINE IS ENTERED AT THE CSECT IGG0197C         *
*                                                                     *
*                                                                     *
* INPUT - REGISTER 5 - ADDRESS OF THE DCB PARAMETER LIST              *
*         REGISTER 6 - ADDRESS OF THE WHERE-TO-GO TABLE               *
*         REGISTER 7 - ADDR OF CURRENT ENTRY IN DCB PARAMETER LIST    *
*         REGISTER 8 - ADDR OF CURRENT ENTRY IN WHERE-TO-GO TABLE     *
*                                                                     *
*                                                                     *
* OUTPUT - OUTPUT IS AS FOLLOWS:                                      *
*                                                                     *
*      1. IOB'S, MICB'S, CCW'S, WRITE DELAY BUFFERS, AND ECB LIST.    *
*                                                                     *
*      2. THE BLOCKS AND FIELDS LISTED ABOVE ARE INITIALIZED.         *
*                                                                     *
*                                                                     *
* EXTERNAL ROUTINES - NONE                                            *
*                                                                     *
*                                                                     *
* EXITS-NORMAL - XTCL TO IGG0197D                                     *
*                                                                     *
* EXITS-ERROR - NONE                                                  *
*                                                                     *
*                                                                     *
* TABLES/WORK AREAS - WHERE-TO-GO TABLE AND THE OPEN WORK AREA        *
*                                                                     *
*                                                                     *
* MACROS-ACTION - MODESET, GETMAIN, GETBUF, XCTL                      *
*                                                                     *
* MACROS-MAPPING - CVT, DCBD, IECDSECT, IEFUCBOB                      *
*                                                                     *
*                                                                     *
* ATTRIBUTES - REENTRANT, REUSABLE, RUNS IN USER'S KEY OR DATA        *
*              MAMAGEMENT KEY.                                        *
*                                                                     *
***********************************************************************
         EJECT
****
****     REGISTER CONVENTIONS
****
R0       EQU   0         WORK/PARAMETER  REGISTER
R1       EQU   1         WORK/PARAMETER  REGISTER
DCBREG   EQU   2         ADDR OF DCB
BASEREG  EQU   3         BASE REGISTER
RCORE    EQU   4         WORK AREA ADDRESS
RPAR     EQU   5         TOP OF DCB PARAMETER LIST
RWTG     EQU   6         TOP OF WTG TABLE
RPARC    EQU   7         CURRENT PARAMETER
RWTGC    EQU   8         CURRENT TRANS LOAD
R9       EQU   9         WORK REG
R10      EQU   10        WORK REG
RWRK1    EQU   R10       WORK REGISTER                           Y02072
IOBREG   EQU   11        ADDR OF IOB
R12      EQU   12        WORK REG
DEBREG   EQU   R12       ADDRESS OF THE DEB
R13      EQU   13        WORK REG
R14      EQU   14        WORK REG
R15      EQU   15        WORK/PARAMETER REGISTER
         SPACE 2
****
****     MASKS, DISPLACEMENTS, AND OTHER EQUATES
****
TWO      EQU   2         VALUE OF 2
ECBLEN   EQU   64        LENGTH OF ECB'S
WDBUFL   EQU   64        LENGTH OF WRITE DELAY BUFFER
POCKETL  EQU   X'F7'     POCKET LITE COMMAND
WD       EQU   X'E1'     WRITE DELAY COMMAND
TIC      EQU   X'08'     TIC
MODRD    EQU   X'4C'     MODIFIED READ COMMAND
MODS     EQU   X'24'     MODIFIED SENSE COMMAND
CCPCI    EQU   X'68'     CMD CHN AND PCI FLAGS
ONE      EQU   1         FOR GENERAL USE
CC       EQU   X'60'     COMMAND CHAIN FLAG
SLI      EQU   X'20'     SUPPRESS WRONG LENGTH FLAG
NOP      EQU   X'03'     NOP COMMAND
DELAYL   EQU   128       LENGTH OF WRITE DELAY BUFFERS
CCWLENGS EQU   8*10+8*9  LENGTH OF CCW'S
LENIOB   EQU   48+48     LENGTH OF PCU AND SCU IOBS
LENTRACE EQU   136       TACE TABLE LENGTH                        41426
MICBLEN  EQU   28        LENGTH OF MICB
CCUNREL  EQU   X'42'     IOB FLAGS
DEBSUBID EQU   X'30'     DISP TO STACKER NAME                    A48612
SCUIOBXT EQU   88        EXTENT NUM FOR SCU IOB
PIOBFLG  EQU   8         DISP TO PCU IOB FLAGS
SIOBFLG  EQU   56        DISP TO SCU IOB FLAGS
PIOBDCB  EQU   20        DISP TO PCU IOB DCB ADDR
SIOBDCB  EQU   68        DISP TO SCU IOB  DCB ADDR
PIOBLEN  EQU   40        LENGTH OF IOB
SIOBLEN  EQU   48        LENGTH OF SCU IOB+PREFIX
FLAGMICB EQU   8         DISP TO MICB FLAGS
NM1MICB  EQU   20        DISP IN MICB TO ADDR OF PREVIOUS MICB
MICBM7AD EQU   16        DISP IN MICB TO N-7 MICB
PIOBCCW  EQU   16        DISP TO PCU CCW CHAIN ADDR IN PCU IOB
PCCWAD   EQU   17        DISP TO PCU CCW CHAIN ADDR IN PCU IOB
SIOBCCW  EQU   64        DISP TO SCU CCW CHAIN ADDR IN SCU IOB
SCCWLEN  EQU   8*9       LENGTH OF SCU CCW CHAIN
SCCWAD   EQU   65        DISP TO SCU CCW ADDR
SUREA    EQU   72        SAVE AREA LENGTH
COMND    EQU   0         DISP TO COMMAND IN CCW
CHAIN    EQU   4         DISP TO COMMAND CHAIN IN CCW
COUNT    EQU   7         DISP TO COUNT IN CCW
CCWL     EQU   8         CCW LENGTH
COUNT1   EQU   6         DISP TO COUNT IN CCW
ADDR     EQU   1         DISP TO DATA ADDR IN CCW
ADDRL    EQU   3         LENGTH OF ADDR IN BYTES
XFF      EQU   X'FF'     X'FF'
BUFF     EQU   0         DISP TO START OF WRITE DELAY BUFFERS
IDTTR    EQU   0         DISP TO IDTTRL IN WTG RABLE
EQ       EQU   8         BRANCH EQUAL VALUE
ID       EQU   0         DISP TO ID IN WTG TABLE
IDL      EQU   2         LENGTH OF ID
NEQ      EQU   7         BRANCH NOT EQUAL VALUE
X00      EQU   X'00'     HEX ZERO
WTGID    EQU   6         DISP TO ID IN WTG TABLE
WTGTTR   EQU   14        DISP TO TTR IN WTG
TTRL     EQU   3         LENGTH OF TTR
DCBADDR  EQU   0         DISP TO DCB ADDR IN DCB LIST
WORKADDR EQU   4         DISP TO WORK ADDR IN WTG TABLE
SSLEN    EQU   8         NUM CHAR IN STACKER SELECT NAME
IOBSTRT  EQU   0         DISP TO START OF IOB'S
ECBADR   EQU   4         DISP TO ECB ADDR IN IOB
ECBADDR  EQU   12        DISP TO ECB ADDR IN IOB
MICBSTRT EQU   0         DISP TO NEXT MICB ADDR IN A MICB
CCWLOOP  EQU   3         CCW LOOP COUNTER
CCWSTRT  EQU   0         DISP TO START OF CCW
WAOFF    EQU   32        OFFSET OF FIRST ENTRY IN WTG TABLE
PLOFF    EQU   4         OFFSET OF DCB ENTRIES
WGOFF    EQU   8         OFFSET OF WTG ENTRIES
         EJECT
OPENM2   BALR  BASEREG,R0          SET BASE
         USING *,BASEREG
         USING DSECT,RCORE
         USING IHADCB,DCBREG
         L     DCBREG,DCBADDR(RPARC)  LOAD DCB ADDR
         L     RCORE,WORKADDR(RWTGC)  LOAD WORK AREA ADDR
         SPACE 2
***********************************************************************
*                                                                     *
*        GET CORE FOR 2 IOB'S.  THERE IS 1 IOB FOR THE PCU AND        *
*        1 IOB FOR THE SCU.  EACH IOB IS 48 BYTES LONG.               *
*        AN 8 BYTE PREFIX AND 40 BYTE BASIC SECTION.                  *
*                                                                     *
*        THERE IS 1 MICB FOR EACH BUFFER.  EACH MICB IS 28 BYTES LONG.*
*                                                                     *
         L     DEBREG,DCBDEBAD     LOAD DEB ADDR
         MVC   DEBSUBID(SSLEN,DEBREG),DCBSSID PLACE STACKER S IN DEB
*        GET CORE FOR MICBS AND IOBS
         SR    R12,R12             LOAD NUM OF BUFFERS
         IC    R12,DCBBUFNO
         LA    R13,MICBLEN         LOAD LENGTH OF MICB
         MR    R12,R12             GET LENGTH OF MICBS
         LA    R13,LENIOB+SUREA+LENTRACE(R13) CALC CORE REQUIRED Y02072
*                                  FOR PCU AND SCU IOB'S, SAVE   Y02072
*                                  AREA, AND TRACE TABLE         Y02072
         MVI   DCBIOBL,PIOBLEN
         MODESET KEYADDR=DXUKEY,WORKREG=1  CHANGE TO USER'S KEY  Y02072
         BAL   R12,GETMAIN         GET CORE FOR MICBS AND IOBS
         LR    R9,R1
         XC    IOBSTRT(LENIOB,R9),IOBSTRT(R9)  ZERO IOB'S
         OI    SCUIOBXT(R1),X'01'  SET EXTENT NUMBER
         OI    PIOBFLG(R1),CCUNREL SET COMMAND CHAIN AND UNRELATED
         OI    SIOBFLG(R1),CCUNREL SET COMMAND CHAIN AND UNRELATED
         ST    R9,IOBSTRT(R1)      PLACE PREFIX ADDR IN PREFIX
         LA    R9,ECBADR(R9)       INC TO ECB ADDR
         ST    R9,ECBADDR(R1)      PLACE ECB ADDR IN PCU IOB
         LA    R9,ECBADR(R9)       INCR PAST PREFIX
         LR    IOBREG,R9           LOAD IOB  REG
         L     RWRK1,DXUDCBAD      GET ADDR OF USER'S DCB        Y02072
         ST    RWRK1,PIOBDCB(IOBREG)  PLACE DCB ADDR IN PIOB     Y02072
         ST    RWRK1,SIOBDCB(IOBREG)  PLACE DCB ADDR IN SIOB     Y02072
         LA    R9,PIOBLEN(R9)      INCR TO ADDR OF SCU IOB
         ST    R9,IOBSTRT(R9)      PLACE PREFIX ADDR IN SCU IOB PREFIX
         LA    R13,ECBADR(R9)      LOAD SCU ECB ADDR
         ST    R13,ECBADDR(R9)     PLACE SCU ECB ADDR IN SCU IOB
         LA    R9,SIOBLEN+SUREA(R9)  INCR PAST PCU AND SCU       Y02072
*                                  IOB'S AND SAVE AREA           Y02072
         XC    0(LENTRACE,R9),0(R9)  ZERO TRACE TABLE             41426
         LA    R9,LENTRACE(R9)     INCR TO FIRST MICB             41426
         MODESET EXTKEY=DATAMGT    CHANGE TO DATA MGMNT KEY      Y02072
         ST    R1,DCBIOBAD         PLACE ADDR OF IOB IN PCU DCB  Y02072
         LR    R1,R9
         USING MICBENTR,R1         ESTABLISH BASE FOR MICB       Y02072
         ST    R9,DCBIOBA          INSERT IN DCB
         MODESET KEYADDR=DXUKEY,WORKREG=10 CHANGE TO USER'S KEY  Y02072
         SR    R13,R13
         IC    R13,DCBBUFNO        LOAD COUNTER
         LA    R12,MICBLEN-1       LOAD LENGTH OF MICB           Y02072
         EX    R12,CLEARBUF        ZERO FIRST MICB
         OI    FLAGMICB(R9),X'80'  SET BUFFER REFERENCED
         LR    R15,R13             LOAD N-6 COUNTER
         SH    R15,NUMMIN7
         LA    R15,ONE(R15)
CLRMICB  LA    R9,ONE(R12,R9)      INCR TO NEXT MICB             Y02072
         ST    R9,MICBNEXT         PLACE ADDR  NEXT    MICB IN PRESENT
         BCTR  R15,R0              DECR N-7 CNTR
         BCT   R13,X               DECREMENT LOOP COUNTER
         B     XSR                 CNTR ZERO-GET OUT
X        EQU   *
         EX    R12,CLEARBUF        ZERO A MICB
         ST    R1,NM1MICB(R9)      PLACE ADDR PREVIOUS MICB IN PRESENT
         LTR   R15,R15             IS THIS THE N-7 MICB FROM START
         BNZ   SETDISEN            NO, DO NOT SET DISEN SWITCH
         OI    FLAGMICB(R9),X'40'  SET DISEN BIT IN MICB
SETDISEN LA    R1,ONE(R12,R1)      INCR PTR TO N-1 MICB          Y02072
         B     CLRMICB             LOOP TILL ALL MICB CLEARED
XSR      EQU   *
         LA    R12,ONE(R12)        INCR TO MICB LENGTH
         SR    R9,R12              GET ADDR LAST MICB
         L     R1,DCBIOBA          GET ADDR FIRST MICB
         ST    R1,MICBSTRT(R9)     PLACE NEXT MICB ADDR IN LAST MICB
         ST    R9,MICBNM1          PLACE ADDR PREVIOUS MICB IN
*                                  FIRST MICB
         EJECT
*
*        PLACE ADDR OF N-7 MICB IN EACH MICB AND ZERO THE BUFFER
*
         LR    R13,R12
         LH    R15,DCBBUFL         LOAD BUFFER LENGTH FOR EX
         BCTR  R15,0               GET MACHINE LENGTH
         LR    R10,R9              PLACE ADDR LAST MICB IN REG
         MH    R13,NUMMIN7         CALC DISP TO 7TH MICB
         AR    R13,R1              GET ADDR OF 7TH MICB
GETBUF   LR     R0,R1              SAVE REG 1
         GETBUF (DCBREG),R9        GET A BUFFER
         LTR   R9,R9               LAST BUFFER
         BZ    BUFDONE             YES, GET OUT
         LR    R1,R0               RESTORE REG 1
         EX    R15,CLEARBUF        SET BUFFER TO ZERO
         ST    R9,MICBDATA         PLACE BUFFER ADDR IN MICB
         ST    R1,MICBM7AD(R13)    PLACE ADDR OF  MICB  7 BACK FROM
*                                  PRESENT MICB
         AR    R1,R12              INCR TO NEXT MICB
         AR    R13,R12             INCR TO NEXT MICB
         CR    R13,R10             IS THIS HIGHEST MICB
         BH    RESETR13            YES, RESET TO FIRST MICB
         B     GETBUF              NO, PROCESS NEXT MICB
RESETR13 L     R13,MICBSTRT(R10)   LOAD ADDR FIRST MICB
         B     GETBUF              PROCESS NEXT MICB
         EJECT
***********************************************************************
*                                                                     *
*        GET CORE FOR PCU AND SCU CCW CHAINS.                         *
*                                                                     *
*        GET CORE FOR 2 WRITE DELAY BUFFERS.                          *
*                                                                     *
*        GET CORE FOR AN ECB LIST.                                    *
*                                                                     *
***********************************************************************
*
BUFDONE  EQU   *
         LA    R13,CCWLENGS        LOAD LENGTH OF CCW
         LA    R13,DELAYL(R13)     ADD LENGTH OF WRITE DELAY BUFFERS
         LA    R13,ECBLEN(R13)
         BAL   R12,GETMAIN         GET CORE FOR CCW'S
         LA    R15,CCWLOOP         LOAD LOOP CNTR FOR PCU CCW'S
         ST    R1,PIOBCCW(IOBREG)  PLACE ADDR CCW IN IOB
         XC    CCWSTRT(CCWLENGS,R1),CCWSTRT(R1)   ZERO CCWS
         LH    R9,DCBLRECL         LOAD RECORD SIZE
*    BUILD NOP
BUILDCCW MVI   COMND(R1),NOP       SET COMMAND
         MVI   CHAIN(R1),CC        SET COMMAND CHAIN
         MVI   COUNT(R1),ONE       SET COUNT
         LA    R1,CCWL(R1)         UPDATE CCW ADDR
*       BUILD MODIFIED READ
         MVI   COMND(R1),MODRD     SET COMMAND
         MVI   CHAIN(R1),CC        SET COMMAND CHAIN
         STH   R9,COUNT1(R1)       SET CONUT
         LA    R1,CCWL(R1)         UPDATE CCW ADDR
*       BUILD MODIFIED SENSE
         MVI   COMND(R1),MODS      SET COMMAND
         MVI   CHAIN(R1),CC        SET COMMAND CHAIN
         MVI   COUNT(R1),TWO       SET COUNT
         LA    R1,CCWL(R1)         UPDATE CCW ADDR
         BCT   R15,BUILDCCW        LOOP TILL DONE
*       BUILD TIC
         MVI   COMND(R1),TIC       SET COMMAND
         MVI   COUNT(R1),ONE       SET COUNT
         MVC   ADDR(ADDRL,R1),PCCWAD(IOBREG)  SET DATA ADDR
         LA    R1,CCWL(R1)         UPDATE CCW ADDR
*
*        PLACE SCU CCW ADDR IN IOB AND BUILD SCU CCW'S
*
         LA    R13,TWO             LOOP COUNTER FOR SCU CCWS
         ST    R1,SIOBCCW(IOBREG)  PLACE SCU CCW ADDR IN SCU IOB
         LR    R15,R1
         LA    R15,SCCWLEN(R15)    POINT TO FIRST WRITE DELAY BUFFER
*    BUILD MODIFIED SENSE
BUILDSCW MVI   COMND(R1),MODS      SET COMMAND
         MVI   CHAIN(R1),CC        SET COMMAND CHAIN
         MVI   COUNT(R1),ONE       SET COUNT
         LA    R1,CCWL(R1)         UPDATE CCW ADDR
*       BUILD WRITE DELAY COMMAND
         ST    R15,COMND(R1)       SET DATA ADDR
         MVI   COMND(R1),WD        SET COMMAND
         MVI   CHAIN(R1),CCPCI     SET COMMAND CHAIN AND PCI FLAGS
         MVI   COUNT(R1),WDBUFL    SET COUNT
         LA    R1,CCWL(R1)         UPDATE CCW ADDR
         LA    R15,WDBUFL(R15)     UPDATE TO SECOND WRITE DELAY BUFFER
*       BUILD NOP
         MVI   COMND(R1),NOP       SET COMMAND
         MVI   CHAIN(R1),CC        SET COMMAND CHAIN
         MVI   COUNT(R1),ONE       SET COUNT
         LA    R1,CCWL(R1)         UPDATE CCW ADDR
         BCT   R13,BUILDSCW        BUILD SECOND SWT OF CCW'S
*       BUILD TIC
         MVI   COMND(R1),TIC       SET COMMAND
         MVI   COUNT(R1),ONE       SET COUNT
         MVC   ADDR(ADDRL,R1),SCCWAD(IOBREG) SET DATA ADDR
         LA    R1,CCWL(R1)         UPDATE CCW ADDR
*       BUILD POCKET LITE COMMAND
         MVI   COMND(R1),POCKETL   SET COMMAND
         MVI   CHAIN(R1),CC        SET COMMAND CHAIN
         MVI   COUNT(R1),ONE       SET COUNT
         LA    R1,CCWL(R1)         UPDATE CCW ADDR
*       BUILD STACKER SELECT COMMAND
         MVI   COUNT(R1),ONE       SET COUNT
         MVI   CHAIN(R1),SLI       SET SUPPRESS WRONG LENGTH
         LA    R1,CCWL(R1)         UPDATE CCW ADDDR
*       SET WRITE DELAY BUFFERS TO X'FF'
         OI    BUFF(R1),XFF        SET X'FF'
         MVC   BUFF+1(DELAYL-1,R1),BUFF(R1)  PROPAGATE FF'S
         LA    R1,DELAYL(R1)       UPDATE TO ECB'S
         MODESET EXTKEY=DATAMGT    CHANGE TO DATA MGMNT KEY      Y02072
         ST    R1,DCBECBLT         PLACE ADDR OF ECB LIST IN DCB
*
*
         MVC   IDTTR(L'SOP7D,RWTGC),SOP7D  SET ID FOR NEXT LOAD  Y02072
*                                  USED BY THIS DCB              Y02072
*
*
RELOOP   EQU   *
         LA    RWTGC,WGOFF(0,RWTGC)  INCR CURRENT WTG ENTRY
         LA    RPARC,PLOFF(0,RPARC)  INCR CURRENT DCB ENTRY
         CLC   ID(IDL,RWTGC),AMIDCNST  IS THIS RTN NEEDED AGAIN
         BCR   EQ,BASEREG          YES, BRANCH
*
*
*
         CLC   ID(IDL,RWTGC),OPIDCNST  IS THIS END OF TABLE
         BC    NEQ,RELOOP          NO, BRANCH
*
*
         LR    RPARC,RPAR          REINITIALIZE DCB LIST PTR
         LA    RWTGC,WAOFF(0,RWTG) REINITIALIZE WTG LIST PTR
*
*
RELOOP1  EQU   *
         CLI   ID(RWTGC),X00       IS THIS ENTRY COMPLETE
         BC    NEQ,XCTLRTN         NO, BRANCH
*
*
         LA    RWTGC,WGOFF(0,RWTGC) GET NEXT WTG ENTRY
         LA    RPARC,PLOFF(0,RPARC) GET NEXT DCB ENTRY
         B     RELOOP1             BR TO CHK NEXT ENTRY
*
*
XCTLRTN  EQU   *
         MVC   WTGID(IDL,RWTG),ID(RWTGC)  STORE ID IN WTG TABLE
*
*
         XCTL  EPLOC=(RWTG),SF=(E,DXXCTL),DCB=0  TRANSFER        Y02072X
                                   CONTROL TO THE NEXT EXECUTOR  Y02072
*
*        GETMAIN SUBROUTINE
*
GETMAIN  GETMAIN R,LV=(R13),SP=250 GET REQUESTED AMOUNT OF CORE
         BR    R12                 RETURN TO CALLER
         EJECT
****
****     CONSTANTS
****
         DS    0H
NUMMIN7  DC    AL2(7)              CONSTANT OF 7
IOBPREFX DC    AL2(8)              LENGTH OF IOB PREFIX
CLEARBUF XC    0(0,R9),0(R9)       CLEAR BUFFER TO ZERO
OPIDCNST DC    C'0S'               END OF TABLE ID
AMIDCNST DC    C'7C'               CURRENT MODULE ID
SOP7D    DC    C'7D'               ID OF NEXT EXECUTOR           Y02072
         DC    C'IGG0197C OZ07621 03/09/76'  SIGHT INDICATOR   @ZA07621
         DC    CL8'&SYSDATE'                 SIGHT INDICATOR   @ZA07621
         DC    C'Z07621'                      IGHT INDICATOR   @ZA07621
PATCH    DC    XL50'0',D'0'        PATCH AREA                  @ZA07621
MODLEN   EQU   *                   LENGTH OF THIS MODULE         Y02072
         SPACE 2
****
****     CONTROL BLOCK DEFINITIONS
****
*        MICBD - DUMMY SECTION FOR THE MICB
MICBENTR DSECT
MICBNEXT DS    A
MICBECB  DS    A
MICBFLAG DS    AL1
MICBSENS DS    AL3
MICBECBA DS    A
MICBNM7  DS    A
MICBNM1  DS    A
MICBDATA DS    A
         SPACE 3
DSECT    DSECT
         IECDSECT IOB=NO                                         Y02072
         SPACE 3
         CVT   DSECT=YES                                         Y02072
         SPACE 3
DCB      DCBD  DSORG=BS,DEVD=MR
         EJECT
UCB      DSECT
         IEFUCBOB
*
         END
