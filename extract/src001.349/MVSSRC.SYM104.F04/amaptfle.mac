AMAPTFLE CSECT
         TITLE 'AMAPTFLE - PTF APPLICATION PROGRAM'
*C 613500                                                       YA01764
*A 682900-683352                                                SA55374
*A 611420-611680,614500-614696,637600-637740                    SA55373
*C 611700,612600,637800                                         SA55373
*D 336984-337165                                                 YM1475
*A 194400                                                        Y01006
*A 369400-369500,377980-377988,599899-600499                     YM1466
*C 360600,369900,599799                                          YM1466
*D 599699                                                        YM1466
*D 490197                                                        YM1467
*A 367222-367281,367535-367563,490193                            YM1467
*C 490199                                                        YM1467
*A 693920-694140                                                 YM1469
*A 210100,780100                                                 A48079
*A 377800-377960,372400-372500,734096,772572,772668              Y01045
*A 336904-337426                                                 Y01045
*A 359500,380200,399700,764800,355000                            Y01036
*A 288700-288880,315700-315900,734092                            Y01036
*D 728100,594000-604200,773100,653100-653400                     Y01983
*D 363600-366600,465600-489900                                   Y01036
*C 728400-729300                                                 Y01983
*C 653700,654840                                                 Y01036
*A 654700-654860,597700-599799                                   A40797
*A 336700-336884,442300,772496-772497,775000,734084              Y01045
*C 336900                                                        Y01045
*A 733900-734020,772400-772492,360200,360700-367333,689800       Y01036
*A 465800-484300,485800-491063                                   Y01036
*A 734060-734080,360100,360400-360500,607900-608000              A40797
*A 642700-642880,758500-758600,754300,484800-485300              A40797
*A 771400,301300-301400,374800-374900                            Y01048
*C 360000,644700                                                 A40797
*A 318600-319500,3363000-3375000,3921000-393000,783000-783300    X01983
***********************************************************************
***********************************************************************
* TITLE        AMAPTFLE                                               *
****                                                               ****
* STATUS       OS/VS2 RELEASE 02.0                                    *
****                                                               ****
* FUNCTION     GENERATE-                                              *
*              PRODUCES AN INPUT STREAM WHICH WHEN EXECUTED WILL APPLY*
*              PTFS TO A SYSTEM.IT PRODUCES THIS INPUT STREAM BY      *
*              ANALYZING THE STAGE 1 OUTPUT TAPE FROM SYSGEN          *
*              APPLICATION-                                           *
*              ASSISTS AMAPTF01 IN BUILDING A SYSLIN DATA SET         *
*              AND INVOKES THE REQUIRED FUNCIONS OF AMAPTF01          *
*              TO DIRECTLY APPLY PTFS TO THE SYSTEM                   *
****                                                               ****
** ENTRY POINT  TLKEDT                                                *
****                                                               ****
* INPUT     STAGE OUTPUT TAPE FROM SYSGEN                             *
*              GENERATE FUNCTION-                                     *
*              COMPONENT LIBRARY MODULE NAMES FOR WHCIH JCL IS TO BE  *
*              PRODUCED.                                              *
*              APPLICATION FUNCTION-                                  *
*              COMPONENT LIBRARY MODULE NAMES FOLLOWED BY THE OBJ     *
*              FOR THE PRECEDING NAMED CONTROL STATEMENT.             *
****                                                               ****
* OUTPUT       NORMAL- A JOBSTREAM WHEN USING THE GENERATE FUNCTION   *
*                      A SYSLIN INPUT DATA SET WHEN USING THE         *
*                      APPLICATION FUNCTION.                          *
*              ERROR- IF THE NUMBER OF INPUT MODULE NAMES EXCEEDS 150 *
*                     A MESSAGE IS PUT OUT INFORMING THE USER OF THE  *
*                     ERROR AND CONTROL IS RETURNED TO THE SYSTEM VIA *
*                     REGISTER  FOURTEEN WITHOUT PROCESSING ANY INPUT *
****                                                               ****
* EXTERNAL ROUTINES      AMAPTF01                                     *
****                                                               ****
* EXITS         NORMAL - TO SYSTEM VIA REGISTER FOURTEEN              *
*                                                                     *
****                                                               ****
* TABLES/WORKAREAS                                                    *
*                                                                     *
*                  MODTBL-DEFINES INPUT MODULE NAME AREA              *
*                                                                     *
*                  PCHAREA-INPUT CARD BUFFER  FOR STAGE 1 OUTPUT TAPE *
*                                                                     *
*                  OUTAREA1-LINKEDIT OUTPUT AREA                      *
*                                                                     *
*                  OUTAREA2-LINKEDIT OUTPUT AREA                      *
*                                                                     *
*                  P2OUT-MOVE/COPY OUTPUT AREA                        *
*                  BRPRMLST-PARAMETER LSIT FOR AMAPTF01               *
* ATTRIBUTES   NON-REUSEABLE                                          *
****                                                               ****
* NOTES        INPUT MODULE NAMES MUST NOT EXCEED 150 NAMES           *
****                                                               ****
***********************************************************************
***********************************************************************
*/*AMAPTFLE: CHART  AMAPTFLE AOS/1 RELEASE 1 */
*/* E AMAPTFLE */
*/* P SAVE POINTER TO PARAMETER LIST */
*/* L OPEN MODF,PCHF, OUTF,PRINT DDS */
*/* D (YES,%MODF:R,NO,) OPEN FOR PRINT DD SUCCESSFUL */
*/*%AMA002: I WRITE MESSAGE AMA002I */
*/*RET16: P SET RETURN CODE TO 16 */
*/*FILCLOSE: L CLOSE MODF,PCHF, OUTF,PRINT DDS */
*/* D (NO,,YES,%RETURN) MODULE TABLE EMPTY SWITCH SET */
*/* D (NO,,YES,%AMACLOS) APPLICATION FUNCTION REQUESTED */
*/*%RETURN: P INSERT HIGHEST RETURN CODE */
*/* R RETURN */
*/*%MODF: D (NO,%AMA002:RR,YES,%PCHF) OPEN FOR MODF DD SUCCESSFUL */
*/*%PCHF: D (NO,%AMA002:RR,YES,%OUTF) OPEN FOR OUTF DD SUCCESSFUL */
*/*%OUTF: D (NO,%AMA002:RR,YES,%PARM) OPEN FOR OUTF DD SUCCESSFUL */
*/*%PARM: D (NO,,YES,LODBLOK) PARAMETER LENGTH = 0 */
*/* P INDICATE APPLICATION FUNCTION REQUESTED */
*/* P LOAD MODULES AMAPTF01 AND AMAPTF02 AND SAVE ENTRY POINTS */
*/* P SET AMAPTF01 ROUTINE INDICATOR TO 1 (SPOOL DATA) */
*/*LODBLOK: D (NO,,YES,%AMA009) BLOCKSIZE FOR PCHF DD = 0 */
*/* L GET STORAGE FOR PCHF INPUT BUFFER */
*/* P COMPUTE NUMBER OF LOGICAL RECORDS PER BLOCK */
*/* D (NO,,YES,GETBUFS) APPLICATION FUNCTION REQUESTED */
*/* S AMAWRITE:WRITE JOB CARD TO OUTF */
*/*GETBUFS: L GET STORAGE FOR TABLES */
*/* P COMPUTE AND SAVE ADDRESS FOR IDENTIFY TABLE */
*/* P INITIALIZE IDENTIFY INDEX */
*/* P COMPUTE AND SAVE ADDRESS FOR MODULE NAME TABLE */
*/* P SET MODULE TABLE EMPTY SWITCH */
*/* P COMPUTE AND SAVE ADDRESS FOR SSI TABLE */
*/* P COMPUTE AND SAVE END OF MODULE NAME TABLE */
*/* P SAVE ADDRESS OF OVERLAY TABLE */
*/*READMOD: I READ A RECORD FROM MODF */
*/* D (NO,,YES,ENDMOD:R) END OF MODF FILE */
*/*MOVEMOD1: D (NO,,YES,%IDENT) COLUMN 1 BLANK */
*/*MOVEMOD2: D (YES,,NO,%FRSTNAM) PART OF OBJECT DECK */
*/* D (YES,,NO,%AMA008:R) FIRST CARD SWITCH SET */
*/* D (NO,%AMA008:R,YES,) APPLICATION FUNCTION REQUESTED */
*/*%FRSTNAM: P SET NEW CARD AND FIRST CARD SWITCHES */
*/* D (NO,,YES,%AMA008) IDENT CONTIN SW SET */
*/*SPOOLCD: D (YES,,NO,NMEMOV:R) APPLICATION FUNCTION REQUESTED */
*/* L AMAPTF01 SPOOL CARD TO WORK FILE */
*/* D (NO,,YES,READMOD) CARD PART OF OBJECT DECK */
*/* D (NO,NMEMOV:R,YES,READMOD) COLUMN 1 BLANK (IDENTIFY CARD) */
*/*NMEMOV: P MOVE NAME INTO MODULE NAME TABLE */
*/* P SET IDENTIFY INDEX IN TABLE TO 0 */
*/* P MOVE SSI INFORMATION INTO SSI TABLE */
*/* P INCREMENT MODULE NAME AND SSI TABLE POINTERS */
*/* D (YES,,NO,READMOD:R) MODULE NAME TABLE OVERFLOW */
*/*MESSAGE: P SET MODULE TABLE OVERFLOW SWITCH */
*/*%FLUSH: I READ RECORD FROM MODF TO FLUSH INPUT STREAM */
*/* D (NO,%FLUSH,YES,ENDMOD) END OF MODF FILE */
*/*%AMA008: I WRITE CARD IMAGE */
*/* I (,RET16) WRITE MESSAGE AMA008I */
*/*%AMA009: I (,RET16) WRITE MESSAGE AMA009I */
*/*%AMACLOS: P SET AMAPTF01 ROUTINE INDICATOR TO 4 */
*/* L (,%RETURN) AMAPTF01  CLOSE WORK FILE */
*/*%IDENT: D (NO,,YES,MOVECON) IDENT CONTIN SW SET */
*/* D (NO,,YES,SPOOLCD) CONTINUATION (PTF01) */
*/* S CHKSPACE:POINT TO NEXT OPERAND */
*/* D (YES,,NO,%AMA008) IDENTIFY CARD */
*/* D (NO,,YES,%AMA008) FIRST CARD SWITCH SET */
*/* D (NO,,YES,MOVEMOD2) APPLICATION FUNCTION REQUESTED */
*/* D (YES,,NO,MOVECON:R) NEW NAME CARD SWITCH SET */
*/* P STORE IDENTIFY INDEX AFTER MODULE NAME IN TABLE */
*/* P TURN OFF NEW NAME CARD SWITCH */
*/* P (,MOVECON:R) INDICATE NEW SET OF IDENTIFY CARDS */
*/*MOVECON: P INCREMENT IDENTIFY INDEX */
*/* D (NO,,YES,%AMA011) IDENTIFY TABLE OVERFLOW */
*/* P TURN OFF IDENTIFY CONTINUATION SWITCH */
*/* P MOVE IDENTIFY CARD INTO IDENTIFY TABLE */
*/* P INCREMENT TABLE POINTER */
*/* D (NO,,YES,READMOD) COLUMN 72 BLANK */
*/* P (,READMOD) TURN ON IDENTIFY CONTINUATION SWITCH */
*/*%AMA011: I (,RET16) WRITE MESSAGE AMA011I */
*/*ENDMOD: D (NO,,YES,FILCLOSE) MODULE TABLE EMPTY SWITCH SET */
*/* D (NO,,YES,%AMA001) MODULE TABLE OVERFLOW SWITCH SET */
*/* P BLANK 'INCLUDE' AND 'INCLUDE SYSLMOD' BUFFERS */
*/* P INDICATE END OF MODULE NAME TABLE */
*/*READPCH1: P SET NON-JCL ADDRESS TO READ NEXT CARD */
*/* S PGMRTN: DETERMINE THE PROGRAM INVOKED ON STAGE I TAPE */
*/*EXECRTN: P TURN OFF JCL COPIED AND CHANGE/REPLACE SWITCHES */
*/* P SET ENTRY/ALIAS SWITCH */
*/* P TURN OFF OVERLAY SWITCH */
*/* S NOTERTN:NOTE TAPE POSITION OF LAST BLOCK READ */
*/*READPCH2: P SET NON-JCL ADDRESS TO TESTCON*/
*/* S (,TESTCON:R) PGMRTN: DETERMINE THE PROGRAM INVOKED ON STAGE I
*/*TAPE */
*/*TESTCON: D (NO,,YES,%OVLY) COLUMN 1 BLANK */
*/* D (YES,ENDCDRTN,NO,READPCH2:R) END OF STEP CARD */
*/*%OVLY: D (NO,%A1,YES,) OVERLAY CONTINUATION SWITCH SET */
*/* P (,OVLYRTN1) TURN OFF OVERLAY CONTINUATION SWITCH */
*/*%A1: S CHKSPACE: POINT TO NEXT OPERAND */
*/* D (YES,%NMECHK,NO,) OVERLAY NOGO SWITCH SET */
*/* D (NO,,YES,OVLYRTN) OVERLAY CARD */
*/* D (YES,,NO,NOOVLY) OVERLAY SWITCH SET */
*/* D (NO,,YES,OVLYRTN1) INSERT CARD */
*/*NOOVLY: D (NO,,YES,INCLDRTN) INCLUDE CARD */
*/*%NMECHK: D (NO,,YES,NAMERTN) NAME CARD */
*/* D (NO,,YES,READPCH2) OVERLAY NOGO SWITCH SET */
*/* D (NO,,YES,CHGRPRTN) CHANGE CARD */
*/* D (NO,,YES,CHGRPRTN) REPLACE CARD */
*/* D (NO,READPCH2,YES,) JCL COPIED SWITCH SET */
*/* D (NO,,YES,ENTRYRTN) ALIAS CARD */
*/* D (NO,,YES,ENTRYRTN) PAGE CARD */
*/* D (NO,,YES,ENTRYRTN) ORDER CARD */
*/* D (NO,,YES,ENTRYRTN) SETCODE CARD */
*/* D (NO,READPCH2,YES,ENTRYRTN) ENTRY CARD */
*/*INCLDRTN: S CHKSPACE: POINT TO NEXT OPERAND */
*/*BLLIBETC: P BLANK 'INCLUDE' BUFFER */
*/*STORELIB: P MOVE NEXT CHARACTER FROM CARD TO 'INCLUDE' BUFFER */
*/* D (NO,,YES,REGPOS:R) CHARACTER = '(' */
*/* P (,STORELIB) INCREMENT CARD AND BUFFER POINTERS */
*/*REGPOS: P INCREMENT CARD AND BUFFER POINTERS */
*/*CHECKMOD: P BLANK MODULE NAME BUFFER */
*/*STOREMOD: P MOVE 1 CHARACTER FROM CARD TO MODULE NAME BUFFER */
*/* P INCREMENT MODULE NAME BUFFER AND CARD POINTERS */
*/* D (NO,,YES,COMPMOD1) NEXT CHARACTER = ')' */
*/* D (NO,STOREMOD,YES,COMPMOD1) NEXT CHARACTER = ',' */
*/*COMPMOD1: D (YES,,NO,COMPMOD5) DDNAME FOR DSS (PARMLIB) */
*/* D (YES,,NO,COMPMOD5) DSS PARMLIB MEMBER IQAORDER */
*/* P SET DSS SWITCH */
*/*COMPMOD5: D (YES,,NO,COMPMOD) OVERLAY SWITCH SET */
*/* P OBTAIN CURRENT OVERLAY TABLE ADDRESS */
*/* D (NO,,YES,%AMA012) OVERLAY TABLE OVERFLOW */
*/* P BLANK NEXT RECORD IN OVERLAY TABLE */
*/* P MOVE 'INSERT' INTO TABLE */
*/* P MOVE MODULE NAME FROM MODULE NAME BUFFER TO OVERLAY TABLE */
*/* P INCREMENT CURRENT OVERLAY TABLE ADDRESS */
*/*COMPMOD: D (NO,,YES,MODFOUND) MODULE NAME BUFFER = MODULE NAME TABLE
*/* */
*/* P INCREMENT MODULE NAME TABLE POINTER TO NEXT NAME */
*/* D (NO,COMPMOD,YES,MODNOTBL) END OF MODULE NAME TABLE FOUND*/
*/*%AMA012: P TURN OFF OVERLAY SWITCH */
*/* P (,READPCH2) SET OVERLAY NOGO SWITCH */
*/*MODNOTBL: P SET CHANGE/REPLACE SWITCH */
*/* D (YES,,NO,%NEXT) NEXT CHARACTER ON CARD = ',' */
*/* P (,CHECKMOD:RB) INCREMENT CARD POINTER PASSED ',' */
*/*%NEXT: D (YES,,NO,READPCH2) NEXT 2 CHARACTERS ON CARD = '),' */
*/* P (,BLLIBETC) INCREMENT POINTER PASSED '),' */
*/*MODFOUND: P SAVE ADDRESS OF NAME IN MODULE NAME TABLE AFTER MATCH */
*/* D (NO,COPYJCL,YES,) JCL COPIED SWITCH SET */
*/* D (YES,,NO,RBTILLNM) ENTRY/ALIAS SWITCH SET */
*/*CHEKCHRP: D (NO,CRTEINCL,YES,COPYCHRP) CHANGE/ REPLACE SWITCH SET */
*/*COPYJCL: P SAVE MATCHED INCLUDE CARD */
*/*RBJCL: S POINTRTN: POINT TO BEGINNING OF THIS SET OF JCL */
*/*JCLCOPY5: S READPCH: READ RECORD FROM STAGE 1 TAPE */
*/* D (YES,,NO,CHKPARMS) COPY ASSEMBLY JCL SWITCH SET */
*/*JCLCOPY: S COPYRTN: WRITE CARD AMAGE */
*/* D (YES,JCLCOPY4,NO,) COPY ASSEMBLY JCL SWITCH SET */
*/* S READPCH: READ NEXT RECORD FROM STAGE 1 TAPE */
*/* D (NO,CHKBLANK,YES,) EXEC CONTINUATION SWITCH SET */
*/* P TURN OFF CONTINUATION SWITCH */
*/* S (,PARMCHK) CHKSPACE: POINT TO NEXT KEYWORD */
*/*JCLCOPY4: D (NO,JCLCOPY5,YES,PGMRTN1) /* CARD */
*/*CHKBLANK: D (YES,,NO,JCLCOPY) FIRST CHARACTER IN INPUT AREA BLANK */
*/* P SET JCL COPIED SWITCH */
*/* D (YES,,NO,RFTILLNM) ENTRY/ALIAS SWITCH SET */
*/* D (NO,,YES,CHEKCHRP) REACHED MATCHED INCLUDE CARD */
*/*ALENRTRN: S CHKSPACE: POINT TO NEXT OPERAND */
*/* D (NO,,YES,%COPRF) ALIAS CARD */
*/* D (NO,,YES,%COPRF) ENTRY CARD */
*/* D (NO,,YES,%COPRF) PAGE CARD */
*/* D (NO,,YES,%COPRF) ORDER CARD */
*/* D (NO,,YES,%COPRF) SETCODE CARD */
*/* D (NO,,YES,RFCOPY) OVERLAY SWITCH SET */
*/* D (YES,,NO,RFCOPY) INSERT STATEMENT */
*/*%COPRF: S COPYRTN: COPY CARD */
*/*RFCOPY: S READPCH: READ NEXT RECORD FROM STAGE 1 TAPE */
*/* D (YES,CHEKCHRP,NO,ALENRTRN) REACHED MATCHED INCLUDE CARD */
*/*RBTILLNM: P SAVE MATCHED INCLUDE CARD */
*/* S (,RFCOPY) POINTRTN: POINT TO SAVED NAME CARD */
*/*RFTILLNM: S READPCH: READ NEXT RECORD FROM STAGE 1 TAPE */
*/* D (NO,RFTILLNM,YES,RFCOPY) REACHED SAVED NAME CARD */
*/*CRTEINCL: P INCREMENT TABLE POINTER BY 8 */
*/* P INDICATE MATCH IN MODULE NAME TABLE */
*/* P OBTAIN IDENTIFY INDEX FROM MODULE NAME TABLE FOR MATCHED NAME */
*/* D (NO,,YES,%MON) IDENTIFY INDEX = 0 */
*/* P INDICATE MATCH FOR CORRESPONDING SET OF IDENTIFY CARDS */
*/*%MON: P MOVE MODULE NAME INTO OUTPUT INCLUDE BUFFER */
*/*INCCOMP: D (NO,,YES,CLOSEINC) CHARACTER MOVED BLANK */
*/* P (,INCCOMP) INCREMENT POINTER TO MODULE NAME IN OUTPUT AREA TO
*/*NEXT CHARACTER */
*/*CLOSEINC: P MOVE RIGHT PARENTHESIS TO OUTPUT AREA */
*/* D (YES,,NO,WRTINCL) APPLICATION FUNCTION REQUESTED */
*/* P SET AMAPTF01 ROUTINE INDICATOR TO 2 */
*/* L AMAPTF01 SPOOL OBJECT MODULE TO OUTF */
*/*WRTINCL: S AMAWRITE: WRITE INCLUDE CARD */
*/*COMWBLNK: P REPLACE ) WITH BLANK IN BUFFER */
*/* P (,MODNOTBL) SET ENTRY/ALIAS SWITCH */
*/*OVLYRTN: D (YES,,NO,OVLYRTN1) FIRST OVERLAY CARD */
*/* P PICK UP ADDRESS OF BEGINNING OF OVERLAY TABLE */
*/*OVLYRTN1: D (YES,,NO,OVLYRTN2) CARD TO BE CONTINUED */
*/* P SET OVERLAY CONTINUATION SWITCH */
*/*OVLYRTN2: D (NO,,YES,%AMA012) OVERLAY TABLE OVERFLOW */
*/* P MOVE OVERLAY/ INSERT STATEMENT TO OVERLAY TABLE */
*/* P INCREMENT CURRENT TABLE POSITION */
*/* P (,READPCH2) SET OVERLAY SWITCH */
*/*CHGRPRTN: D (NO,,YES,SETUP) CHANGE/ REPLACE SWITCH SET */
*/*CHGRPGO: P MOVE STATEMENT TO CHANGE/ REPLACE BUFFER */
*/* P (,READPCH2) INCREMENT POINTER TO BUFFER */
*/*SETUP: P TURN OFF CHANGE/ REPLACE SWITCH */
*/* P (,CHGRPGO) GET ADDRESS OF CHANGE/ REPLACE BUFFER */
*/*ENTRYRTN: D (YES,,NO,READPCH2) ENTRY/ ALIAS SWITCH SET */
*/* S (,READPCH2) COPYRTN: COPY STATEMENT TO OUTPUT */
*/*NAMERTN: D (NO,,YES,CRTSYSLM) OVERLAY NOGO SWITCH SET */
*/* D (NO,STORENAM:R,YES,) JCL COPIED SWITCH SET */
*/* S NOTERTN: NOTE TAPE POSITION OF LAST BLOCK READ */
*/* D (YES,,NO,STORENAM) ENTRY/ ALIAS SWITCH SET */
*/*CRTSYSLM: P INCREMENT CARD POINTER PAST NAME KEYWORD */
*/* S CHKSPACE: POINT TO NEXT OPERAND */
*/*NAMELOOP: P MOVE 1 CHARACTER OF NAME TO INCLUDE SYSLMOD BUFFER */
*/* P INCREMENT CARD AND BUFFER POINTERS */
*/* D (NO,,YES,NMELOOP1:R) NEXT CHARACTER  ( */
*/* D (YES,,NO,NAMELOOP) NEXT CHARACTER A BLANK */
*/*NMELOOP1: D (NO,,YES,%AMA12W) OVERLAY NOGO SWITCH SET */
*/* P MOVE ) TO BUFFER */
*/* D (NO,,YES,IDENEXIT) APPLICATION FUNCTION REQUESTED */
*/* P BLANK OUTPUT BUFFER */
*/*LOOP: D (YES,IDENEXIT,NO,) END OF IDENTIFY TABLE REACHED */
*/* D (NO,,YES,IDFOUND) MATCH INDICATED FOR THIS SET */
*/* P (,LOOP) INCREMENT POINTER TO NEXT ENTRY IN IDENTIFY TABLE */
*/*%AMA12W: P MOVE LOAD MODULE NAME TO MESSAGE AMA012I */
*/* I (,RET16) WRITE MESSAGE AMA012I */
*/*IDFOUND: P TURN OFF MATCH INDICATOR */
*/* P MOVE IDENTIFY CARD TO OUTPUT BUFFER */
*/* S AMAWRITE: WRITE IDENTIFY CARD */
*/* P INCREMENT POINTER TO NEXT ENTRY IN IDENTIFY TABLE */
*/* D (YES,LOOP,NO,IDFOUND) NEW SET OF IDENTIFY CARDS */
*/*IDENEXIT: S AMAWRITE: WRITE INCLUDE SYSLMOD CARD */
*/* P BLANK INCLUDE SYSLMOD BUFFER */
*/* D (YES,,NO,COPYNAME) OVERLAY SWITCH SET */
*/*OVLYLOOP: I WRITE CARD FROM OVERLAY TABLE */
*/* P POINT TO NEXT RECORD IN OVERLAY TABLE */
*/* D (NO,OVLYLOOP,YES,) END OF OVERLAY TABLE */
*/* P TURN OFF OVERLAY SWITCH */
*/*COPYNAME: P TURN ON NAME SWITCH */
*/* S CHKSPACE: POINT TO NEXT OPERAND */
*/* P SKIP PASSED NAME KEYWORD */
*/* S CHKSPACE: POINT TO NEXT OPERAND */
*/* P BLANK MODULE NAME BUFFER */
*/*COPYLOOP: D (NO,,YES,CPYNAME1:R) CHARACTER = ( */
*/* D (NO,,YES,NEEDTHER) CHARACTER A BLANK */
*/* P MOVE CHARACTER TO MODULE NAME BUFFER */
*/* P (,COPYLOOP) INCREMENT CARD POINTER TO NEXT CHARACTER */
*/*NEEDTHER: P MOVE (R) TO NAME CARD */
*/*CPYNAME1: P OBTAIN SSI INFORMATION FROM SSI TABLE FOR MATCHED MODULE
*/* NAME */
*/* P MOVE SSI INFORMATION TO OUTPUT BUFFER */
*/* D (YES,,NO,%WRSSI) SSI INFORMATION BLANK */
*/* P SET SSI TO 0 */
*/*%WRSSI: S AMAWRITE: WRITE SETSSI CARD */
*/* S COPYRTN: COPY CARD */
*/* D (YES,,NO,SLSHCHK:R) APPLICATION FUNCTION REQUESTED */
*/* P SET AMAPTF01 ROUTINE INDICATOR TO 3 */
*/* L AMAPTF01 INVOKE LINKAGE EDITOR */
*/*SLSHCHK: D (NO,STORENAM,YES,ENDCRTN1) SLASH SWITCH SET */
*/*STORENAM: P STORE NAME CARD */
*/* P TURN OFF OVERLAY SWITCH */
*/* P TURN OFF DSS SWITCH */
*/* P TURN OFF ENTRY/ALIAS SWITCH */
*/*ENDCDRTN: D (NO,,YES,COPYNAM1) NAME SWITCH SET */
*/* D (NO,,YES,COPYNAM1) SYSLNAME BUFFER BLANK */
*/* P SAVE END OF STEP CARD */
*/* P BLANK PCHF INPUT BUFFER */
*/* P MOVE NAME KEYWORD AND NAME FROM SYSLNAME TO PCHF BUFFER */
*/* P (,CRTSYSLM) SET SLASH SWITCH */
*/*ENDCRTN1: P TURN OFF SLASH SWITCH */
*/* P RESTORE END OF STEP CARD */
*/*COPYNAM1: P BLANK SYSLNAME BUFFER */
*/* P TURN OFF NAME SWITCH */
*/* D (NO,READPCH1,YES,) JCL COPIED SWITCH SET */
*/* S (,READPCH1) COPYRTN: COPY CARD */
*/* E CHECK PARAMETER ROUTINE */
*/*CHKPARMS: P LOAD ADDRESS OF PCHAREA */
*/* S CHKSPACE: POINT TO 'EXEC' */
*/* S CHKSPACE: POINT TO PROC NAME */
*/* D (YES,,NO,%A2) LINK EDIT STEP ('LINKS') */
*/* P (,PARMCHK) INCREMENT PAST 'LINKS,' */
*/*%A2: P INCREMENT PAST 'ASMS,' */
*/*PARMCHK: D (YES,MODKEY,NO,) MOD= KEYWORD */
*/* D (YES,NKEY,NO,) N= KEYWORD */
*/* D (YES,PKEY,NO,) P1= KEYWORD */
*/* D (YES,PKEY,NO,) P2= KEYWORD */
*/* %I1: P INCREMENT 1 CHAR */
*/*COMMACHK: D (YES,%ICOMMA,NO,) IS THIS A COMMA */
*/* D (NO,%I1,YES,CHKBLANK) IS THIS A BLANK */
*/*%ICOMMA: P INCREMENT PAST COMMA */
*/* D (YES,,NO,PARMCHK) IS THIS A BLANK */
*/*%CONT1: P (,CHKBLANK) TURN ON EXEC CONTINUATION SWITCH */
*/*MODKEY: P INCREMENT PAST 'MOD=' */
*/* P SAVE POINTER TO DATA SET NAME */
*/* P ZERO COUNTER */
*/* P OBTAIN ADDR OF NAME BUFFER */
*/*%COMMA1: D (NO,,YES,%BLANK4) IS THIS A COMMA */
*/* D (NO,,YES,%BLANK1) IS THIS A BLANK */
*/* P MOVE 1 CHAR TO NAME BUFFER */
*/* P INCREMENT TO NEXT CHARACTER */
*/* P INCREMENT PTR TO NAME BUFFER */
*/* P (,%COMMA1) INCREMENT COUNTER TO REFLECT # OF CHAR READ */
*/*%BLANK4: D (YES,COMMACHK,NO,%ASMCHK) IS COUNTER ZERO */
*/*%BLANK1: D (YES,CHKBLANK,NO,) COUNTER EQUAL ZERO */
*/*%ASMCHK: D (YES,ASMCHK1,NO,) IN ASSEMBLY STEP */
*/* P MOVE '(R)' TO NAME BUFFER */
*/* D (YES,COMMACHK,NO,) APPLICATION FUNCTION */
*/*MODCARD: P SAVE CURRENT CARD ADDRESS */
*/* P SUBTRACT # OF CHAR MOVED */
*/*%BLANK2: D (YES,COMMACHK,NO,) PRESENT LOCATION BLANK */
*/* P MOVE NEXT CHARACTER IN PLACE */
*/* P INCREMENT PRESENT CARD ADDRESS */
*/* P (,%BLANK2) INCREMENT POSITION TO MOVE CHAR BY 1 */
*/*ASMCHK1: P GET ADDRESS OF MODULE NAME TABLE */
*/*ASMCMPM: D (YES,ASMFOUND,NO,) MATCH WITH MODULE NAME */
*/* P POINT TO NEXT ENTRY IN TABLE */
*/* D (NO,ASMCMPM,YES,) END OF MODULE NAME TABLE */
*/*PGMRTN1: P (,READCD) RESET ASSEMBLY INDICATORS */
*/*ASMFOUND: P INDICATE ASSEMBLY MATCH */
*/* P (,RBJCL) INCICATE ASSEMBLY JCL TO BE WRITTEN */
*/*PKEY: P INCREMENT PAST P1=' OR P2=' */
*/* P MAKE CHAR A BLANK */
*/* P (,COMMACHK) INCREMENT PAST  ' */
*/*NKEY: D (YES,COMMACHK,NO,) APPLICATION FUNCTION */
*/* P INCREMENT PAST 'N=' */
*/* D (YES,%I2,NO,) IS VALUE 'SYS1,' */
*/* D (YES,%I2,NO,) IS VALUE 'SYS1 ' */
*/* P CLEAR MEF BUFFER */
*/* P MOVE // TO BUFFER */
*/* P (,%ENDSYS) MOVE 'N=SYS1' TO BUFFER */
*/*%I2: P (,COMMACHK) INCREMENT PAST 'SYS1' */
*/*%ENDSYS: P BLANK TEMPORARY BUFFER */
*/* P MOVE CARD IMAGE TO TEMPORARY BUFFER */
*/* P BLANK CARD BUFFER */
*/*%FOUNDN: D (YES,%N1,NO,) 'N=' FOUND IN TEMPORARY BUFFER */
*/* P MOVE 1 CHAR BACK TO CARD BUFFER */
*/* P (,%FOUNDN) INCREMENT CARD AND TEMP BUFFER POINTERS */
*/*%N1: P INCREMENT BEFORE 'N=' IN TEMP BUFFER */
*/* D (NO,%I7,YES,) CHARACTER BEFORE 'N=' A BLANK */
*/* P INCREMENT PTR TO TEMPORARY BUFFER */
*/* P SET DSN FIRST ON CARD SWITCH */
*/*%I7: P (,SKIPDSN1) INCREMENT TEMPORARY BUFFER PTR PAST 'N=' */
*/* E COPY CHANGE/REPLACE CARD ROUTINE */
*/*COPYCHRP: P INDICATE END OF CHANGE/REPLACE TABLE */
*/*CHRPCOPY: P MOVE NEXT CHANGE/REPLACE CARD TO OUTPUT BUFFER */
*/* I WRITE CHANGE/REPLACE CARD */
*/* P POINT TO NEXT CHANGE/REPLACE CARD */
*/* D (YES,,NO,CHRPCOPY) REACHED END OF CHANGE/ REPLACE TABLE */
*/* P TURN OFF CHANGE/REPLACE SWITCH */
*/* R RETURN TO CRTEINCL */
*/*PART2: P TURN OFF JCL COPIED SWITCH */
*/* S NOTERTN: NOTE TAPE POSITION OF LAST BLOCK READ */
*/*P2READ: P SET NON-JCL ADDRESS TO P2TEST */
*/* P SET BLANKSW TO A BLANK */
*/* S PGMRTN: DETERMINE THE PROGRAM INVOKED ON STAGE I TAPE */
*/*P2TEST: D (NO,,YES,P2STAT) COLUMN 1 BLANK */
*/* D (YES,,NO,P2READ:R) END OF STEP CARD */
*/* D (YES,,NO,READPCH1) JCL COPIED SWITCH SET */
*/* S (,READPCH1) COPYRTN: COPY CARD */
*/*P2STAT: S CHKSPACE: POINT TO NEXT OPERAND */
*/* D (NO,,YES,P2SELECT:R) IS THIS CHARACTER AN 'S' */
*/* D (NO,P2READ:R,YES,P2COPYRT) IS THIS CHARACTER A 'C' */
*/*P2SELECT: S CHKSPACE: POINT TO NEXT OPERAND */
*/* D (YES,P2MBRFND,NO,) 'MEMBER=' KEYWORD */
*/* P (,%P2COMPA) SKIP PASSED 'M=' KEYWORD */
*/*P2MBRFND: P INCREMENT PASSED 'MEMBER' KEYWORD */
*/*%P2COMPA: D (YES,,NO,%P2MOD) IS THIS CHARACTER AN '=' */
*/* P INCREMENT PASSED '=' */
*/*%P2MOD: D (YES,,NO,P2MODINI) IS THIS CHARACTER A '(' */
*/* P INCREMENT PASSED '(' */
*/* P SET BLANK SWITCH TO NON-BLANK */
*/*P2MODINI: P BLANK OUTPUT AREA */
*/* P BLANK MODULE NAME BUFFER */
*/* P (,P2CHKSVC:R) OBTAIN MODULE NAME TABLE POINTER */
*/*P2CHKSVC: D (NO,,YES,P2SVCS) NEXT CHARACTER A'(' */
*/* S P2STORP: STORE MODULE NAME */
*/*P2COMPN: D (NO,,YES,P2FOUNDN) MODULE NAME BUFFER = MODULE NAME TABLE
*/* */
*/* P INCREMENT MODULE NAME TABLE POINTER TO NEXT NAME */
*/* D (NO,P2COMPN,YES,P2NOTFN) END OF MODULE NAME TABLE REACHED */
*/*P2SVCS: P MOVE '(' TO OUTPUT AREA */
*/* P INCREMENT CARD AND OUTPUT POINTERS */
*/* S P2STOR:STORE MODULE NAME */
*/*P2COMPS: D (NO,,YES,P2FOUNDS) MODULE NAME BUFFER = MODULE NAME TABLE
*/**/
*/* P INCREMENT MODULE NAME TABLE POINTER TO NEXT NAME */
*/* D (NO,P2COMPS,YES,P2NOTFS) END OF MODULE NAME TABLE REACHED */
*/*P2NOTFN: D (YES,,NO,P2READ) ANY MORE NAMES ON SELECT CARD */
*/* P (,P2MODINI) INCREMENT POINTER PASSED ',' */
*/*P2NOTFS: P INCREMENT CARD POINTER */
*/* D (YES,,NO,P2NOTFS) NEXT CHARACTER = ')' */
*/* P (,P2NOTFN) INCREMENT PASSED ')' */
*/*P2FOUNDN: D (YES,,NO,P2FOUNDC) APPLICATION FUNCTION REQUESTED */
*/* P SAVE POINTER TO NAME IN MODULE NAME TABLE */
*/* P SAVE POINTER TO NAME TO BUILD NAME CARD */
*/* P SET AMAPTF01 ROUTINE INDICATOR TO 5 */
*/* L AMAPTF01  SPOOL OBJ MODULE AND DO LINK EDIT */
*/*P2FOUNDC: S P2COPY: COPY CARD */
*/* P MOVE ',,R))' AFTER NAME IN OUTPUT BUFFER */
*/*P2FOUND: S (,P2NOTFN) P2WRTE: WRITE CARD */
*/*P2FOUND2: P (,P2FOUND1) INCREMENT PAST ',R' ON SELECT CARD */
*/*P2FOUND1: P MOVE ',R)' TO OUTPUT BUFFER */
*/* P INCREMENT PASSED ',R)' */
*/* P MOVE ')' TO OUTPUT BUFFER */
*/* P (,P2FOUND) INCREMENT CARD POINTER TO COMMA BETWEEN PARENTHESES */
*/*P2FOWNDS: S (,P2FCOMP) P2COPY: COPY JCL FOR SVC MATCH */
*/*P2FOUNDS: D (YES,,NO,P2FOWNDS) APPLICATION FUNCTION REQUESTED */
*/* P SAVE POINTER TO NEW NAME ON SELECT CARD */
*/* P SAVE POINTER TO NAME IN MODULE NAME TABLE TO GET SSI */
*/* P SET AMAPTF01 ROUTINE INDICATOR TO 5 */
*/* L AMAPTF01 SPOOL OBJ MODULE AND DO LINK EDIT */
*/*P2FCOMP: D (NO,,YES,P2FOUND1) NEXT CHARACTER A ')' */
*/* D (NO,,YES,P2FOUND2) REPLACE OPTION ALREADY ON CARD */
*/* P MOVE CHARACTER TO OUTPUT AREA */
*/* P (,P2FCOMP:R) INCREMENT CARD AND OUTPUT POINTERS */
*/*P2COPYRT: D (YES,,NO,P2STCOPY) JCL COPIED SWITCH SET */
*/* S NOTERTN: NOTE TAPE POSITION OF LAST BLOCK READ */
*/*P2STCOPY: P SAVE COPY STATEMENT */
*/* P (,P2READ:R) TURN OFF COPY CARD SWITCH */
*/*P2STORP: E PART 2 MODULE NAME STORE ROUTINE */
*/* P MOVE '(' TO OUTPUT BUFFER */
*/* P INCREMENT POINTER TO OUTPUT BUFFER */
*/*P2STOR: P MOVE CHARACTER FROM CARD TO OUTPUT BUFFER */
*/* P MOVE CHARACTER FROM CARD TO MODULE NAME BUFFER */
*/* P INCREMENT CARD,MODULE NAME AND OUTPUT BUFFER POINTERS */
*/* D (NO,,YES,P2STOREX) NEXT CHARACTER A ',' */
*/* D (NO,,YES,P2STOREX) NEXT CHARACTER A ')' */
*/* D (YES,,NO,P2STOR) NEXT CHARACTER A '*' */
*/*P2STOREX: R RETURN TO CALLER */
*/*P2WRTE: E PART 2 WRITE ROUTINE */
*/* P INCREMENT MODULE NAME TABLE POINTER PASSED NAME */
*/* P INDICATE NAME MATCHED IN MODULE NAME TABLE */
*/* D (NO,,YES,BMPCTR) APPLICATION FUNCTION REQUESTED */
*/* S AMAWRITE: WRITE SELECT STATEMENT */
*/*BMPCTR: P SET COPY CARD SWITCH */
*/* R RETURN TO CALLER */
*/*P2COPY: E PART 2 COPY ROUTINE */
*/* D (NO,P2CJCL,YES,) JCL COPIED SWITCH SET */
*/* D (NO,P2RB,YES,%P2RET) COPY CARD SWITCH SET */
*/*%P2RET: R RETURN TO CALLER */
*/*P2CJCL: P SET JCL COPIED SWITCH */
*/* P SAVE SELECT STATEMENT */
*/* S POINTRTN: GO BACK TO BEGINNING OF JCL */
*/*P2CJCL1: S READPCH: READ NEXT RECORD FROM STAGE I TAPE */
*/* D (YES,,NO,P2RF) JCL STATEMENT */
*/*JCLCHECK: D (NO,,YES,DSNCHECK) FOUND DSNAME QUALIFIER ON CARD */
*/* P INCREMENT CARD POINTER */
*/* D (YES,,NO,JCLCHECK) SCANNED THROUGH COLUMN 64 */
*/*DOWRITE: D (NO,,YES,R23REST:R) APPLICATION FUNCTION REQUESTED */
*/* S (,R23REST:R) AMAWRITE: WRITE STATEMENT */
*/*R23REST: D (YES,,NO,P2CJCL1:R) MULTI PROGRAMMING ENVIRONMENT FEATURE
*/* USED */
*/* S AMAWRITE: WRITE CONINTUED JCL STATEMNT */
*/* P (,P2CJCL1:R) TURN OFF MEF INDICATOR */
*/*DSNCHECK: D (NO,,YES,DOWRITE) IS DATA SET QUALIFIER 'SYS1.' */
*/* P POSITION CARD POINTER AFTER QUALIFIER */
*/* S (,DOWRITE:R) SYSGMEF: RESTRUCTURE DD CARD FOR MEF */
*/*P2RF: D (NO,,YES,P2CCOPY) REACHED SAVED COPY STATEMENT */
*/* D (NO,P2CJCL1,YES,P2COPYEX) REACHED SAVED SELECT STATEMENT */
*/*P2COPYEX: P (,%P2RET) TURN OFF DUPLICATE COPY CARD SWITCH */
*/*P2RB: P SAVE SELECT STATEMENT */
*/* S (,P2CJCL1) POINTRTN:  POINT TO LAST BLOCK NOTED */
*/*P2CCOPY: D (NO,,YES,P2CJCL1:R) DUPLICATE COPY SW SET */
*/* P SET DUPLICATE COPY CARD SWITCH */
*/* D (NO,,YES,P2CJCL1) APPLICATION FUNCTION REQUESTED */
*/* S (,P2CJCL1:R) AMAWRITE: WRITE CARD */
*/*EOJRTN: P OBTAIN MODULE NAME TABLE ADDRESS */
*/* P INDICATE MESSAGE HEAD NOT WRITTEN */
*/*EOJMLOOP: D (NO,,YES,FILCLOSE) REACHED END OF MODULE NAME TABLE */
*/* P INCREMENT TABLE POINTER PASSED MODULE NAME */
*/* D (YES,ASMSG,NO,) ASSEMBLY MATCH ONLY */
*/* D (YES,,NO,MSGNOMOD) MATCH FOUND FOR THIS NAME */
*/* P (,EOJMLOOP) INCREMENT TABLE POINTER PASSED MATCH INDICATOR */
*/*ASMSG: D (YES,%NOCHG,N0,) RETURN CODE MORE THAN 4 */
*/* P SET RETURN CODE TO 4 */
*/*%NOCHG: P MOVE MSG AMA015I TO BUFFER */
*/* P (,MSGRTNC) RESET HEADING WRITTEN INDICATOR */
*/*MSGNOMOD: D (YES,,NO,MSGHEAD) MESSAGE HEADING WRITTEN FOR AMA000I */
*/*MSGRTNC: P PICK UP NAME IN MODULE NAME TABLE */
*/* P MOVE NAME TO OUTPUT BUFFER */
*/* I WRITE NAME UNDER HEADING */
*/* P (,EOJMLOOP) INCREMENT TABLE POINTER TO NEXT NAME */
*/*MSGHEAD: D (YES,RETNOCHG,NO,) RETURN CODE MORE THAN 4 */
*/* P SET RETURN CODE TO 4 */
*/*RETNOCHG: I WRITE AMA000I-NO MATCH HEADING */
*/* P (,MSGRTNC) INDICATE MESSAGE HEADING WRITTEN */
*/*%AMA001: I (,RET16) WRITE MODULE NAME TABLE OVERFLOW MESSAGE
*/*AMA001I */
*/*COPYRTN: E COPY ROUTINE */
*/* D (YES,,NO,COPYRTN1) APPLICATION FUNCTION REQUESTED */
*/* D (NO,,YES,COPYRTN1) COLUMN 1 BLANK */
*/* P SET AMAPTF01 ROUTINE INDICATOR TO 6 */
*/* L AMAPTF01  CHECK CARD FOR LINKAGE PARAMETERS */
*/*%COPRET: R RETURN TO CALLER */
*/*COPYRTN1: S AMAWRITE: WRITE CARD */
*/* D (YES,,NO,%COPRET:R) MEF SWITCH SET */
*/* S (,%COPRET:R) AMAWRITE: WRITE CONTINUATION CARD */
*/*AMAWRITE: E COMMON WRITE ROUTINE */
*/* I WRITE CARD FROMM BUFFER ADDRESS PASSED */
*/* R RETURN TO CALLER */
*/*PGMRTN: E SEARCH STAGE I TAPE */
*/*READCD: S READPCH: READ NEXT RECORD FROM STAGE I TAPE */
*/* D (YES,,NO,READOUT) JCL CARD */
*/* S CHKSPACE: POINT TO NEXT OPERAND */
*/* D (YES,,NO,READCD) EXEC STATEMENT */
*/* S CHKSPACE: POINT TO NEXT OPERAND */
*/* D (NO,,YES,PART2:R) PGM = IEBCOPY */
*/* D (NO,,YES,EXECRTN) PROC = LINKS */
*/* D (NO,,YES,STG1MSG) PGM = IEHMOVE */
*/* D (YES,READCD:R,NO,) APPLICATION FUNCTION REQUESTED */
*/* D (NO,READCD:R,YES,) PROC = ASMS */
*/*ASMRTN: S NOTERTN: NOTE POSITION OF ASSEMBLY EXEC CARD */
*/*ASMCHK: P (,CHKPARMS) INDICATE ASSEMBLY STEP SEARCH */
*/*STG1MSG: I (,RET16) WRITE MESSAGE AMA004I */
*/*READOUT: R GO TO NON-JCL ADDRESS PASSED */
*/*SYSGMEF: E MULTI PROGRAMMING ENVIRONMENT RTN */
*/* D (NO,,YES,%SYSGRET) APPLICATION FUNCTION REQUESTED */
*/* D (NO,,YES,%SYSGRET) IS DATA SET QUALIFIER 'SYS1.' */
*/* P BLANK MEF BUFFER */
*/* P MOVE '//' TO MEF BUFFER */
*/* P MOVE 'DSN=' TO MEF BUFFER */
*/* P MOVE 'SYS1.' TO MEF BUFFER */
*/*PERLOOP: P INCREMENT CARD POINTER */
*/* D (YES,,NO,PERLOOP) FOUND '.' ON CARD */
*/* P INCREMENT CARD POINTER PASSED '.' */
*/*MOVEDSN: P MOVE CHARACTER OF DSNAME TO MEF BUFFER */
*/* P INCREMENT CARD AND BUFFER POINTERS */
*/* D (NO,,YES,CHKCONT) NEXT CHARACTER A ',' */
*/* D (NO,MOVEDSN,YES,) NEXT CHARACTER A BLANK */
*/*CHKCONT: P BLANK TEMPORARY BUFFER */
*/* P MOVE CARD AMAGE TO TEMPORARY BUFFER */
*/* P BLANK CARD BUFFER */
*/*DSNCHK: D (NO,,YES,SKIPDSN) 'DSN' FOUND IN TEMPORARY
*/*BUFFER */
*/* P MOVE 1 CHARACTER BACK TO CARD BUFFER */
*/* P (,DSNCHK:R) INCREMENT CARD AND TEMPROARY BUFFER POINTERS */
*/*SKIPDSN: P POSTION TEMPROARY BUFFER POINTER BEFORE 'DSN' */
*/* D (YES,,NO,PASSDSN) CHARACTER BEFORE 'DSN' A BLANK */
*/* P INCREMENT POINTER TO TEMPROARY BUFFER */
*/* P SET DSN FIRST ON CARD SWITCH */
*/*PASSDSN: P INCREMENT TEMPORARY BUFFER POINTER PASSED 'DSN=' */
*/*SKIPDSN1: D (NO,,YES,MOVEREST) NEXT CHARACTER A ',' */
*/* D (NO,,YES,MOVEDONE) NEXT CHARACTER A BLANK */
*/* P (,SKIPDSN1) INCREMENT TEMPORARY BUFFER POINTER */
*/*MOVEREST: P INCREMENT TEMPROARY BUFFER POINTER PASSED ',' */
*/* D (NO,,YES,MOVEDONE:R) NEXT CHARACTER A BLANK */
*/*MOVREST1: P MOVE CHARACTER FROM TEMPORARY BUFFER BACK TO CARD
*/*BUFFER */
*/* P INCREMENT CARD AND TEMPORARY BUFFER POINTERS */
*/* D (YES,LOC,NO,MOVREST1) NEXT CHARACTER A BLANK */
*/*MOVEDONE: D (NO,,YES,DSNCONT) DSN FIRST ON CARD SWITCH SET */
*/*LOC: P TURN OFF DSN FIRST ON CARD SWITCH */
*/* P SET POINTER TO PREVIOUS CHARACTER IN CARD BUFFER */
*/* D (NO,,YES,MOVECONT) IS THAT CHARACTER A ',' */
*/* P INCREMENT POINTER */
*/* P MOVE ',' TO CARD BUFFER TO INDICATE CONTINUATION */
*/*MOVECONT: P MOVE 'X' TO COLUMN 72 TO INDICATE CONTINUATION */
*/* D (NO,MEF,YES,) IS CARD IN TEMP BUFFER CONTINUED */
*/* P MOVE 'X' TO COLUMN 72 OF MEF BUFFER */
*/* P MOVE ',' TO MEF BUFFER */
*/*MEF: P SET MEF SWITCH TO INDICATE MULTI PROGRAMMING ENVIRONMENT */
*/*%SYSGRET: R RETURN TO CALLER */
*/*DSNCONT: P MOVE MEF BUFFER TO CARD BUFFER */
*/* P (,%SYSGRET) TURN OFF MEF SWITCH */
*/*READPCH: E STAGE I READ ROUTINE */
*/* D (NO,,YES,POINTRD) HAS POINT JUST BEEN DONE */
*/* D (YES,,NO,MOVTOPCH) USED ALL LOGICAL RECORDS IN THIS BLOCK */
*/*POINTRD: I READ A BLOCK FROM STAGE I TAPE TO INPUT BUFFER */
*/* P GET IOB ADDRESS */
*/* P LOAD RESIDUAL COUNT FROM CSW IN IOB */
*/* P GET LOGICAL RECORD LENGTH FROM PCHF DSB */
*/* P GET BLOCK SIZE FROM PCHF DCB */
*/* P SUBTRACT RESIDUAL COUNT FROM BLOCKSIZE TO GIVE # BYTES IN BUFFER
*/**/
*/* P DIVIDE BY LOGICAL RECORD LENGTH TO GIVE # LOGICAL RECORDS READ */
*/* P SAVE NUMBER OF LOGICAL RECORDS READ */
*/* D (NO,,YES,MOVTOPCH:R) HAS A POINT BEEN DONE */
*/* P (,MOVTOPCH:R) SAVE NUMBER OF LOGICAL RECORDS REMAINING */
*/*MOVTOPCH: P LOAD NUMBER OF LOGICAL RECORDS LAST READ */
*/* P SUBTRACT NUMBER OF LOGICAL RECORDS REMAING */
*/* P MULTIPLY DIFFERENCE BY LOGICAL RECORD LENGTH */
*/* P ADD TO BUFFER ADDRESS */
*/* P MOVE ONE LOGINCAL RECORD LENGTH FROM BUFFER TO CARD BUFFER */
*/* P DECREMENT REMAINING COUNT */
*/* P TURN OFF POINT INDICATOR */
*/* R RETURN TO CALLER */
*/*NOTERTN: E NOTE ROUTINE */
*/* L NOTE POSITION OF LAST BLOCK READ FROM PCHF DD */
*/* P SAVE BLOCK ADDRESS */
*/* P INCREMENT NUMBER OF RECORDS REMAINING BY 1 */
*/* R RETURN TO CALLER */
*/*POINTRTN: E POINT ROUTINE */
*/* L POINT TO BLOCK ADDRESS SAVED BY NOTE */
*/* P SET NUMBER REMAINING TO NUMBER IN BUFFER */
*/* P TURN ON POINT INDICATOR */
*/* R RETURN TO CALLER */
*/*CHKSPACE: E OPERAND POSITIONING ROUTINE */
*/* D (NO,,YES,CHKNOTSP) NEXT CHARACTER A BLANK */
*/* P (,CHKSPACE) INCREMENT POINTER */
*/*CHKNOTSP: P INCREMENT POINTER */
*/* D (NO,,YES,CHKNOTSP) NEXT CHARACTER A BLANK */
*/* R RETURN TO CALLER */
*/*SYNADEXT: E I/O ERROR ROUTINE */
*/* L OBTAIN ERROR INFORMATION */
*/* P MOVE INFORMATION TO OUTPUT BUFFER */
*/* I WRITE MESSAGE AMA003I */
*/* R RETURN TO RET16 */
*/*AMAPTFLE: END */
         EJECT
***********************************************************************
*                                                                     *
*            SET UP STANDARD LINKAGE AND ADDRESSABILITY               *
*            USING REGISTERS 11 AND 12 AS BASE REGISTERS.             *
*                                                                     *
***********************************************************************
         SPACE
         USING *,R12,R11
GO       STM   R14,R12,12(R13)         SAVE CALLERS REGISTERS
         LR    R12,R15                 SET UP FIRST BASE REGISTER
         L     R11,BASEADR2            SET UP SECOND BASE REGISTER
         LA    R2,SCSAVE               GET SAVE AREA ADDRESS
         ST    R2,8(R13)               SET UP FORWARD AND
         ST    R13,4(R2)               BACKWARD SAVE AREA LINKAGE
         LR    R13,R2                  SET UP POINTER TO SAVE AREA
         USING SCSAVE,R13
         B     ADDRSET                 BRANCH AROUND DC
BASEADR2 DC    A(GO+4096)              TO SET UP ADDRESSABILITY
         SPACE
***********************************************************************
*                                                                     *
*       PICK UP PARAMETER PASSED ON EXEC CARD.                        *
*       OPEN INPUT-OUTPUT FILES                                       *
*              INPUT   - MODULE NAMES,OBJECT MODULES,AND              *
*                        IDENTIFY CARDS                               *
*                      - STAGE1 OUTPUT FROM SYSGEN                    *
*              OUTPUT  - EXTRACTS OF SYSGEN STAGE1 OUTPUT             *
*                      - MESSAGES                                     *
*                                                                     *
***********************************************************************
         SPACE
ADDRSET  L     R2,0(R1)                PICK UP POINTER TO PARM
         ST    R2,PARMPTR              SAVE ADDRESS OF PARAMETER
         OPEN  (MODFDCB,,PCHFDCB,,OUTFDCB,(OUTPUT),MSGDCB,(OUTPUT))
         SPACE
***********************************************************************
*                                                                     *
*             TEST FOR SUCCESSFUL OPEN OF ALL DCBS                    *
*                                                                     *
***********************************************************************
         SPACE
         LA    RA,MSGDCB
         USING IHADCB,RA
         TM    DCBOFLGS,OPENBIT        MSG DCB OPEN SUCCESSFUL
         BZ    MSGWRITE                NO - WRITE ERROR MESSAGE
         LA    RA,MODFDCB
         TM    DCBOFLGS,OPENBIT        MODF DCB OPEN SUCCESSFUL
         BZ    MODFRITE                NO - WRITE ERROR MESSAGE
         LA    RA,PCHFDCB
         TM    DCBOFLGS,OPENBIT        PCHF DCB OPEN SUCCESSFUL
         BZ    PCHFRITE                NO - WRITE ERROR MESSAGE
         LA    RA,OUTFDCB
         TM    DCBOFLGS,OPENBIT        OUTF DCB OPEN SUCCESSFUL
         BZ    OUTFRITE                NO - WRITE ERROR MESSAGE
         SPACE
***********************************************************************
*                                                                     *
*                 CHECK IF ANY PARAMETER IS PRESENT.                  *
*                 IF PRESENT, INDICATE APPLICATION FUNCTION           *
*                 AND LOAD AMAPTF01 AND AMAPTF02.                     *
*                                                                     *
***********************************************************************
         SPACE
         L     R2,PARMPTR              GET POINTER TO PARAMETER LIST
         LH    R3,0(R2)                GET COUNT OF PARM LIST
         LTR   R3,R3                   IS PARM LENGTH ZERO
         BC    8,LODBLOK               YES - GENERATE FUNCTION
         OI    PARM,X'80'              INDICATE APPLICATION FUNCTION
         LOAD  EPLOC=LOADOVR           LOAD IEWSZOVR             A48079
         LOAD  EPLOC=LOAD01            LOAD AMAPTF01
         ST    R0,PTF01                SAVE THE ENTRY POINT ADDRESS
         LOAD  EPLOC=LOAD02            LOAD AMAPTF02
         ST    R0,PTF02                SAVE THE ENTRY POINT ADDRESS
         OI    BRPRMLST,SPOOLUT2       INDICATE AMAPTF01 TO SPOOL
*                                      MODF INPUT TO SYSUT2 WORK FILE
         EJECT
***********************************************************************
*                                                                     *
*        THIS ROUTINE GETS CORE FOR THE READ BUFFER BASED ON BLKSIZE  *
*                                                                     *
***********************************************************************
         SPACE
LODBLOK  LA    RA,PCHFDCB              GET PCHF DCB ADDRESS
         LH    R0,DCBBLKSI             OBTAIN BLKSIZE FROM PCHF DCB
         LTR   R0,R0                   IS BLKSIZE ZERO            M3991
         BNP   NOBLKSZ                 YES-BLKSIZE NOT SPECIFIED  M3991
         GETMAIN EC,LV=(0),A=BUFFADDR  GET CORE FOR READ BUFFER  A45397
         LTR   R15,R15                 GETMAIN SUCCESSFUL        A45397
         BNZ   AMA014W1                NO - WRITE ERROR MESSAGE SA55373
         SPACE
***********************************************************************
*                                                                     *
*        DETERMINE NUMBER OF LOGICAL RECORDS PER BUFFER               *
*                                                                     *
***********************************************************************
         SPACE
         LA    RA,PCHFDCB              GET PCHFDCB ADDRESS
         SR    R3,R3                   CLEAR REGISTERS FOR DIVIDE
         SR    R2,R2
         SR    R1,R1
         LH    R3,DCBBLKSI             OBTAIN THE BLKSIZE
         LH    R1,DCBLRECL             OBTAIN THE LOGICAL RECORD LENGTH
         DR    R2,R1                   DIVIDE THE BLKSIZE BY LRECL AND
         ST    R3,RECCNT               SAVE NUMBER OF LOGICAL RECORDS
         SPACE
***********************************************************************
*                                                                     *
*        WRITE JOB CARD IF GENERATE FUNCTION IS BEING PERFORMED       *
*                                                                     *
***********************************************************************
         SPACE
         TM    PARM,X'80'              APPLICATION FUNCTION REQUESTED
         BO    GETBUFS                 YES - DO NOT WRITE JOB CARD
         LA    R3,JOBCARD              GET ADDRESS OF OUTPUT BUFFER
         BAL   R2,AMAWRITE             GO TO WRITE ROUTINE
         SPACE
***********************************************************************
*                                                                     *
*                 OBTAIN STORAGE FOR ALL TABLES                       *
*                                                                     *
***********************************************************************
         SPACE
GETBUFS  GETMAIN EC,LV=30424,A=OVLYREC DO GETMAIN FOR BUFFERS    A45397
         LTR   R15,R15                 GETMAIN SUCCESSFUL        A45397
         BNZ   AMA014W                 NO - WRITE ERROR MESSAGE  A45397
         L     R2,OVLYREC              GET BEGINNING ADDR OF BUFFER
         A     R2,AOVLYREC             ADD LENGTH OF OVERLAY TABLE
         ST    R2,OVLYEND              SAVE END OF OVERLAY TABLE S21995
         LA    R2,1(R2)                END OF TABLE BYTE         S21995
         ST    R2,IDENTBL              STORE BEGINNING ADDRESS   S21016
*                                      OF IDENTIFY TABLE         S21016
         MVI   0(R2),X'FF'             SET END OF TABLE MARK     S21016
         A     R2,IDENTSZ              ADD LENGTH,IDENTIFY TABLE S21016
         ST    R2,IDENTEND             SAVE END-IDENTIFY TABLE   S21016
         LA    R2,1(R2)                END OF TABLE BYTE         S21016
         ST    R2,MODTBL               STORE BEGINNING ADDRESS
*                                      OF MODULE NAME TABLE
         MVI   0(R2),X'FF'             SET TABLE EMPTY SWITCH     M4002
         SPACE
***********************************************************************
*            THIS SWITCH IS RESET BY THE FIRST CHARACTER              *
*            PLACED IN THE MODULE NAME TABLE                          *
***********************************************************************
         SPACE
         A     R2,AMODTBL              ADD LENGTH OF MODULE NAME TABLE
         ST    R2,TABLEND              SAVE END,MODULE NAME TBL  S21995
         LA    R2,1(R2)                END OF TABLE BYTE         S21995
         ST    R2,SSITABLE             STORE BEGINNING ADDRESS
*                                      OF SSI TABLE
         A     R2,ASSITBL              ADD LENGTH OF SSI TABLE
         ST    R2,CHGRPSTR             STORE BEGINNING ADDRESS
*                                      OF CHANGE/REPLACE TABLE
         L     RA,MODTBL               OBTAIN ADDR OF MODULE NAME TABLE
         L     R7,SSITABLE             OBTAIN ADDR OF SSI TABLE
         L     R9,OVLYREC              GET POINTER TO BUFFER
         ST    R9,OVTABADR             SAVE BEGINNING OF OVERLAY TABLE
         LA    R4,1                    INITIALIZE IDENTIFY INDEX S21016
         L     R6,IDENTBL              GET ADDRESS,IDENTIFY TBL  S21016
         EJECT
***********************************************************************
*                                                                     *
*         READ CONTROL CARDS,OBJECT MODULES AND IDENTIFY CARDS.       *
*           STORE MODULE NAMES IN MODULE NAME TABLE,                  *
*           SSI INFORMATION IN SSI TABLE,                             *
*           IDENTIFY CARDS IN IDENTIFY TABLE(GENERATE FUNCTION ONLY), *
*           AND SPOOL ENTIRE INPUT STREAM (APPLICATION FUNCTION ONLY).*
*                                                                     *
***********************************************************************
         SPACE
READMOD  GET   MODFDCB,MODAREA         READ CONTROL CARDS FROM MODF
         LA    R3,MODAREA              OBTAIN THE INPUT AREA ADDRESS
         CLI   0(R3),SPACE             IS COLUMN 1 BLANK
         BNE   MOVEMOD2                NO-CHECK FOR VALID CONTROL CARD
*                                                                S21995
         SPACE
***********************************************************************
*                                                                     *
*                 CHECK FOR IDENTIFY CARDS -                          *
*              VERIFY PROPER ORDER OF CARDS,                          *
*              MOVE CARDS TO IDENTIFY TABLE AND                       *
*              STORE IDENTIFY INDEX (GENERATE FUNCTION ONLY).         *
*                                                                     *
***********************************************************************
         SPACE
         TM    IDENTCON,X'80'          IDENTIFY CONT. SWITCH SET S21016
         BO    MOVECON                 YES - HANDLE CONTINUATION S21016
         TM    IDENTCON,X'08'          CONTINUATION (AMAPTF01)    M0861
         BO    SPOOLCD                 YES-SPOOL CARD(WORK FILE)  M0861
         BAL   R2,CHKSPACE             POINT TO FIRST OPERAND    S21016
         CLC   0(8,R3),IDENTIFY        IDENTIFY CARD             S21016
         BNE   AMA008WR                NO - WRITE ERROR MESSAGE  S21016
         TM    FIRSTNEW,X'80'          FIRST NAME CARD READ YET  S21016
         BNO   AMA008WR                NO - WRITE ERROR MESSAGE  S21016
         TM    PARM,X'80'              APPLICATION FUNC REQUEST  S21016
         BO    MOVEMOD2                YES-DON'T PUT CARD IN TBL S21016
         TM    FIRSTNEW,X'08'          NEW SET OF CARDS
         BNO   MOVECON                 NO - DO NOT STORE IDENTIFY INDEX
         BCTR  RA,0                    POINT TO INDEX BYTE IN MODTBL
         STC   R4,0(RA)                STORE IDENTIFY INDEX
         LA    RA,1(RA)                INCREMENT MODTBL POINTER
         NI    FIRSTNEW,X'F0'          TURN OFF NEW SET SWITCH
         OI    MODAREA,X'80'           NEW SET OF IDENTIFY CARDS
MOVECON  LA    R4,1(R4)                INCREMENT IDENTIFY INDEX
         C     R6,IDENTEND             IDENTIFY TABLE OVERFLOW
         BNL   AMA011WR                YES - WRITE ERROR MESSAGE
         NI    IDENTCON,X'00'          RESET IDENTIFY CONTINUATION SW
         MVC   0(80,R6),MODAREA        MOVE IDENTIFY CARD TO TBL S21016
         LA    R6,80(R6)               NEXT TABLE POSITION       S21016
         MVI   0(R6),X'FF'             SET END OF TABLE MARK     S21016
         CLI   MODAREA+71,C' '         CARD TO BE CONTINUED      S21016
         BE    READMOD                 NO - READ NEXT CARD       S21016
         OI    IDENTCON,X'80'          SET CONTINUATION SWITCH   S21016
         B     READMOD                 READ NEXT CARD            S21016
         SPACE
***********************************************************************
*                                                                     *
*                 PROCESS CONTROL CARDS                               *
*                                                                     *
***********************************************************************
         SPACE
MOVEMOD2 EQU   *
         CLI   0(R3),X'02'             PART OF OBJECT MODULE     S21995
         BNE   TURNNAM                 NO - HANDLE NAME CARD     S21995
         TM    FIRSTNEW,X'80'          FIRST NAME CARD READ      S21995
         BNO   AMA008WR                NO - WRITE ERROR MESSAGE  S21995
         TM    PARM,X'80'              APPLICATION FUNC REQUEST  S21995
         BNO   AMA008WR                NO - WRITE ERROR MESSAGE  S21995
TURNNAM  OI    FIRSTNEW,X'88'          SET NEW SET,FIRST CARD SW S21995
         TM    IDENTCON,X'88'          IDENTIFY CONT. SWITCH SET  M0861
         BM    AMA008WR                YES - WRITE ERROR MESSAGE S21016
SPOOLCD  TM    PARM,X'80'              APPLICATION FUNCT REQUEST  M0861
         BNO   NMEMOV                  NO - DO NOT SPOOL THE CARD
         LA    R1,BRPRMLST             GET ADDRESS OF PARAMETER LIST
         L     R15,PTF01               GET AMAPTF01 ROUTINE ADDRESS
         BALR  R14,R15                 SPOOL CARD TO SYSUT2 WORK FILE
         CLI   MODAREA,X'02'           IS CARD PART OF OBJECT DECK
         BE    READMOD                 NO - CHECK FOR IDENTIFY   S21016
         CLI   MODAREA,C' '            IS CARD AN IDENTIFY CARD  S21016
         BE    READMOD                 YES - READ NEXT CARD      S21016
         SPACE
***********************************************************************
*                                                                     *
*              FILL MODULE NAME AND SSI TABLES                        *
*                                                                     *
***********************************************************************
         SPACE
NMEMOV   C     RA,TABLEND              MODULE NAME TBL OVERFLOW  S21995
         BNL   MESSAGE                 YES-FLUSH INPUT           S21995
         MVC   0(8,RA),0(R3)           MOVE MODULE NAME TO TABLE A46339
         MVI   8(RA),SPACE             BLANK STATUS FIELD        A46339
         MVI   9(RA),X'00'             ZERO IDENTIFY INDEX BYTE  S21016
         MVC   0(8,R7),9(R3)           MOVE SSI NUMBER INTO SSI TABLE
         CLC   0(8,R7),BLANK           IS SSI BLANK              S21995
         BNE   BUMPRA                  NO - CONTINUE             S21995
         MVC   0(8,R7),ZEROES          REPLACE SSI WITH ZERO     S21995
BUMPRA   LA    RA,10(RA)               BUMP MODULE NAME TBL PTR  S21016
         LA    R7,8(R7)                UPDATE SSI TABLE POINTER
         B     READMOD                 NO-READ NEXT CARD
         EJECT
***********************************************************************
*                                                                     *
*                 END OF FILE ROUTINE :                               *
*        - CHECK FOR EMPTY MODULE NAME TABLE                          *
*        - CHECK FOR MODULE NAME TABLE OVERFLOW                       *
*                                                                     *
***********************************************************************
         SPACE
ENDMOD   EQU   *
         L     R3,MODTBL               GET MODULE NAME TABLE ADDR M4002
         CLI   0(R3),X'FF'             TABLE EMPTY SWITCH SET     M4002
         BE    FILCLOSE                YES,TABLE EMPTY-RETURN     M4002
         TM    SWITCH1,X'80'           IS OVERFLOW SWITCH SET
         BO    MESSAGE1                YES,PUT OUT MSG
         NI    BRPRMLST,TURNOFF        TURN OFF SPOOL ROUTINE INDICATOR
*                                                                 M4000
         MVC   LIBETCB(69),LIBETC      BLANK INCLUDE BUFFER
         MVC   LMODETCB(60),LMODETC    BLANK INCLUDE SYSLMOD BUFFER
         MVI   0(RA),SPACE             INDICATE LAST MODULE NAME S21995
         SPACE
***********************************************************************
*                                                                     *
*       READ INPUT FILE AND SCAN FOR FIRST EXEC STATEMENT             *
*              DETERMINE PROPER ROUTINE                               *
*                                                                     *
***********************************************************************
         SPACE
READPCH1 LA    R9,PGMRTN               SET NON JCL RETURN ADDR   S21995
         B     PGMRTN                  SEARCH STAGE I TAPE       S21995
         EJECT
***********************************************************************
*                                                                     *
*        PART I     CHECK FOR MODULE MATCHES                          *
*                   IN IEWL STEP OF STAGE 1 OUTPUT                    *
*                                                                     *
*                  - TURN OFF JCL COPIED SWITCH (R8)                  *
*                  - TURN OFF CHANGE-REPLACE SWITCH (R4)              *
*                  - SET ENTRY-ALIAS SWITCH (R6)                      *
*                  - NOTE POSITIONING OF INPUT-FILE                   *
*                                                                     *
***********************************************************************
         SPACE
EXECRTN  LA    R4,0                    TURN OFF CHANGE-REPL SW   S21995
         LA    R6,4                    SET ENTRY-ALIAS SWITCH    S21995
         LA    R8,0                    TURN OFF JCL COPIED SW    S21995
         XC    OVLYREC(4),OVLYREC      TURN OFF OVERLAY SWITCH
         BAL   R14,NOTERTN             NOTE THE LAST BLOCK READ
         SPACE
***********************************************************************
*                                                                     *
*                 READ PCHF INPUT FILE AND SCAN FOR                   *
*                 LINKAGE EDITOR CONTROL CARDS OR                     *
*                 /* CARD. IF NEITHER, DETERMINE                      *
*                 TYPE OF PROGRAM INVOKED ON EXEC CARD.               *
*                                                                     *
***********************************************************************
         SPACE
READPCH2 BAL   R9,PGMRTN               SET NON JCL RETURN ADDR   S21995
*                                      SEARCH STAGE I TAPE       S21995
TESTCON  CLI   0(R3),SPACE             IS COLUMN 1 BLANK         S21995
         BE    STATEX                  YES-CONTROL CARD
         CLC   0(2,R3),ENDCARD         IS THIS END OF STEP
         BNE   READPCH2                NO-READ NEXT STATEMENT
         B     ENDCDRTN                YES-PREPARE TO TERMINATE
STATEX   EQU   *
         TM    CONTSW2,X'80'           IS THERE AN OVERLAY/INSERT
*                                      CONTINUATION TO BE PROCESSED
         BNO   STATEX1                 NO-CHECK TYPE OF CONTROL CARD
         MVI   CONTSW2,X'00'           YES-TURN OFF THE CONTINUATION
*                                      SWITCH
         B     OVLYRTN1                PROCESS THE CONTINUATION BY
*                                      MOVING IT TO THE OVERLAY TABLE
STATEX1  EQU   *
         TM    CONTSW2,CHRCONT       CHANGE-REPLACE CONTINUATION Y01983
         BNO   STATEX2                 NO - CONTINUE             Y01983
         MVI   CONTSW2,TURNOFF         TURN OFF SWITCH           Y01983
         B     CHGRPRTN                GO COPY CARD              Y01983
         EJECT
***********************************************************************
*                                                                     *
*                 DETERMINE TYPE OF LINKAGE EDITOR                    *
*                 CONTROL CARD AND PROCESS ACCORDINGLY.               *
*                                                                     *
***********************************************************************
         SPACE
STATEX2  EQU   *
         BAL   R2,CHKSPACE             POINT TO THE FIRST LETTER OF THE
*                                      LINKAGE EDITOR CONTROL STATEMENT
         TM    OVNOGO,X'08'            OVERLAY NO GO SWITCH SET  S21995
         BO    NMENOGO                 YES - FIND MODULE NAME    S21995
         CLC   0(2,R3),OVCARD          IS THIS AN OVERLAY STMT   S21995
         BE    OVLYRTN                 YES,PROCESS THE OVERLAY CARD
         TM    OVLYREC,X'80'           IS THE OVERLAY SWITCH SET
         BNO   NOOVLY                  NO-IGNORE ALL INSERT STATEMENTS
         CLC   0(3,R3),CHARINS         IS THIS AN INSERT STATEMENT
         BE    OVLYRTN1                YES-PROCESS THE INSERT STATEMENT
NOOVLY   EQU   *
         CLC   0(3,R3),CHARINC         IS THIS AN INCLUDE STATEMENT
         BE    INCLDRTN                YES - HANDLE INCLUDE STATEMENT
NMENOGO  CLI   0(R3),LETTERN           IS THIS A NAME STATEMENT  S21995
         BE    NAMERTN                 YES - HANDLE NAME STATEMENT
         TM    OVNOGO,X'08'            OVERLAY NO GO SWITCH SET  S21995
         BO    READPCH2                YES - SEARCH FOR NAME     S21995
         CLI   0(R3),LETERC            IS THIS A CHANGE STMT     S21995
         BE    CHGRPRTN                YES - HANDLE CHANGE STATEMENT
         CLI   0(R3),LETTERR           IS THIS A REPLACE STMT    S21995
         BE    CHGRPRTN                YES - HANDLE REPLACE STATEMENT
         B     INCLUDBR(R8)            JCL COPIED ALREADY
INCLUDBR B     READPCH2                NO - NO MATCH IN INCLUDE
*                                      STATEMENT PREVIOUSLY FOUND.
*                                      CONTINUE IF JCL ALREADY COPIED
         CLI   0(R3),LETTERA           IS THIS AN ALIAS STMT     S21995
         BE    ENTRYRTN                YES - HANDLE ALIAS STATEMENT
         CLI   0(R3),LETTERE           IS THIS AN ENTRY STMT     S21995
         BE    ENTRYRTN                YES - HANDLE ENTRY STATEMENT
         CLC   0(4,R3),PAGECD          IS THIS A PAGE STMT       X01983
         BE    ENTRYRTN                YES - HANDLE PAGE STMT    X01983
         CLC   0(5,R3),ORDERCD         IS THIS AN ORDER STMT     X01983
         BE    ENTRYRTN                YES - HANDLE ORDER STMT   X01983
         CLC   0(7,R3),APFCD           IS THIS A SETCODE STMT    Y01048
         BE    ENTRYRTN                YES- HANDLE SETCODE STMT  Y01048
         B     READPCH2                READ NEXT RECORD
         EJECT
***********************************************************************
*                                                                     *
*    THE FOLLOWING CODE PROCESSES OVERLAY STATEMENTS,                 *
*    INITIALIZING THE FIRST TIME SWITCH(OVLYREC).  INSERT             *
*    STATEMENTS ARE PROCESSED AT THE SECOND ENTRY (OVLYRTN1) WITH     *
*    BOTH STATEMENTS MOVED TO THE OVERLAY TABLE                       *
*                                                                     *
***********************************************************************
         SPACE
OVLYRTN  EQU   *
         TM    OVLYREC,X'80'           IS OVERLAY SWITCH SET
         BO    OVLYRTN1                YES-CONTINUE PROCESSING
         L     R9,OVTABADR             OBTAIN BEGINNING OF OVERLAY TBL
         ST    R9,OVLYREC
OVLYRTN1 EQU   *
         L     R9,OVLYREC              OBTAIN PTR TO NEXT POS    S21995
         CLI   PCHAREA+71,SPACE        IS THE OVERLAY/INSERT     S21995
*                                      STATEMENT CONTINUED       S21995
         BE    OVLYRTN2                NO-CONTINUE PROCESSING
         OI    CONTSW2,X'80'           SET CONTINUATION SWTIITCH
OVLYRTN2 EQU   *
         C     R9,OVLYEND              OVERLAY TABLE OVERFLOW    S21995
         BNE   PCHOVLY                 NO - CONTINUE PROCESSING  S21995
SETNOGO  MVI   OVNOGO,X'08'            SET OVERLAY NO GO SWITCH
         B     READPCH2                SEARCH FOR MODULE NAME
PCHOVLY  MVC   0(80,R9),PCHAREA        MOVE OVLY/INSERT CARD TO THE
*                                      OVERLAY TABLE
         LA    R9,80(R9)               POINT TO NEXT POSITION
         ST    R9,OVLYREC              SAVE FOR THE NEXT INPUT CARD
         MVI   OVLYREC,X'80'           TURN ON THE OVERLAY SWITCH
         MVI   OVLYEND,X'80'           HIGH ORDER BIT,END ADDR   S21995
         B     READPCH2                READ NEXT INPUT CARD
         EJECT
***********************************************************************
*                                                                     *
*       CHANGE-REPLACE ROUTINE                                        *
*              STORE ANY CONSECUTIVE CHANGE AND/OR REPLACE STATMENTS  *
*              INTO CHANGE-REPLACE TABLE (R5)                         *
*              SET CHANGE-REPLACE SWITCH (R4 TO 4)                    *
*                                                                     *
***********************************************************************
         SPACE
CHGRPRTN B     CHANGBR(R4)             IS CHANGE-REPLACE SWITCH SET
CHANGBR  B     SETUP                   NO-SET UP ADDRESS         S21995
CHGRPGO  MVC   0(80,R5),PCHAREA        MOVE CARD TO CHANGE-REPLACE TBL
         LA    R5,80(R5)               POINT TO NEXT POSITION IN TABLE
         CLI   PCHAREA+71,SPACE        CONTINUATION EXPECTED     Y01983
         BE    READPCH2                NO - CONTINUE             Y01983
         OI    CONTSW2,CHRCONT         TURN ON CHANGE-REPLACE SW Y01983
         B     READPCH2                READ NEXT CARD
SETUP    LA    R4,4                    SET CHANGE-REPLACE SWITCH S21995
         L     R5,CHGRPSTR             GET ADDR OF CHANGE-REPLACE TABLE
         B     CHGRPGO                 GO TO MOVE CARD TO TABLE
         SPACE
***********************************************************************
*                                                                     *
*       ENTRY-ALIAS-PAGE-ORDER ROUTINE                          X01983*
*                 COPY ANY ENTRY,ALIAS,PAGE AND/OR ORDER        X01983*
*                 STATEMENTS IF A MATCH HAS BEEN FOUND AND      X01983*
*                 THE JCL HAS BEEN WRITTEN OUT ALREADY. THIS    X01983*
*                 WILL BE TRUE IF THE ENTRY-ALIAS SWITCH HAS    X01983*
*                 BEEN SET (R6 SET TO 4).                             *
*                                                                     *
***********************************************************************
         SPACE
ENTRYRTN B     READNEXT(R6)            IS ENTRY-ALIAS SWITCH SET
READNEXT B     READPCH2                NO-READ NEXT CARD
         BAL   R2,COPYRTN              YES-COPY CARD
         B     READPCH2                READ NEXT CARD
         EJECT
***********************************************************************
*                                                                     *
*       INCLUDE ROUTINE                                               *
*               - SAVE DDNAME IN INCLUDE BUFFER                       *
*               - SEARCH INCLUDE CARDS FOR MATCHES                    *
*                 WITH MODULE NAME TABLE                              *
*               - BUILD INSERT CARDS FOR OVERLAY STRUCTURES           *
*               - INDICATE MATCH WITH IDENTIFY CARDS (GENERATE)       *
*                                                                     *
***********************************************************************
         SPACE
INCLDRTN BAL   R2,CHKSPACE             POINT TO NEXT OPERAND     S21995
BLLIBETC MVI   LIBETC,C' '             BLANK INCLUDE BUFFER       M4756
         MVC   LIBETCB(69),LIBETC
         LA    R9,LIBETC               GET INCLUDE BUFFER ADDRESS
STORELIB MVC   0(1,R9),0(R3)           MOVE ONE CHARACTER OF DDNAME
         CLI   0(R3),PARNLEFT          BEGINING OF MODULE NAME   S21995
         BE    REGPOS                  YES-PROCESS MODULE NAME
         LA    R3,1(R3)                NO-INCREMENT CARD POINTER
         LA    R9,1(R9)                INCREMENT BUFFER POINTER
         B     STORELIB                CONTINUE SEARCH FOR MODULE NAME
REGPOS   LA    R3,1(R3)                INCREMENT CARD POINTER
         LA    R9,1(R9)                INCREMENT BUFFER POINTER
CHECKMOD MVC   MODSTORE(8),BLANK       BLANK MODULE NAME BUFFER
         ST    R5,R5SAVE
         L     RA,MODTBL               GET ADDR OF MODULE NAME TABLE
         LA    R5,MODSTORE             GET ADDR OF MODULE NAME BUFFER
         SPACE
***********************************************************************
*                                                                     *
*              MOVE MODULE NAME INTO MODULE NAME BUFFER               *
*                                                                     *
***********************************************************************
         SPACE
STOREMOD MVC   0(1,R5),0(R3)           MOVE CHARACTER TO BUFFER
         LA    R3,1(R3)
         LA    R5,1(R5)
         CLI   0(R3),PARNRITE          END OF MODULE NAME        S21995
         BE    COMPMOD1                YES-PROCESS NAME
         CLI   0(R3),COMMA1            END OF MODULE NAME        S21995
         BNE   STOREMOD                NO-CONTINUE TO MOVE TO BUFFER
         SPACE
***********************************************************************
*                                                                     *
*         THE MODULE NAME IS CURRENTLY LOCATED IN MODSTORE            *
*                                                                     *
***********************************************************************
         SPACE
COMPMOD1 EQU   *
         CLC   LIBETC(7),DSSDNME       DSS DDNAME PARMLIB        Y01045
         BNE   COMPMOD5                NO - CONTINUE PROCESSING  Y01045
         CLI   LIBETC+7,PARNLEFT       NEXT CHAR A LEFT PAREN    Y01045
         BNE   COMPMOD5                NO - CONTINUE PROCESSING  Y01045
         CLC   MODSTORE,DSSMEMB        DSSPARMLIB MEMBER         Y01045
         BNE   COMPMOD5                NO - CONTINUE PROCESSING  Y01045
         LTR   R8,R8                   COPY JCL SW SET           Y01045
         BZ    COMPMOD5                NO - CONTINUE             Y01045
OUTDSS   OI    COMSW,DSSSW             SET DSS SWITCH            Y01045
WRTDSS   STM   R2,R3,RITESAVE                                    Y01045
         LA    R3,PCHAREA              GET ADDRESS OF BUFFER     Y01045
         BAL   R2,AMAWRITE             GO TO WRITE ROUTINE       Y01045
         LM    R2,R3,RITESAVE                                    Y01045
BRCHBACK TM    SWITCH1,CPYDSS          COPY DSS SWITCH SET       Y01045
         BZ    READPCH2                NO - GO TO READPCH2       Y01045
         MVI   SWITCH1,TURNOFF         ZERO SWITCH               Y01045
         B     RFCOPY                  CONTINUE                  Y01045
COMPMOD5 TM    OVLYREC,X'80'           IS OVERLAY SWITCH SET
         BNO   COMPMOD2                NO-DO NOT BUILD INSERT CARD
         L     R5,OVLYREC              YES-GET OVERLAY TABLE POINTER
         C     R5,OVLYEND              OVERLAY TABLE OVERFLOW    S21995
         BNL   SETNOGO                 YES-SET OVLY NO GO SWITCH S21995
         MVI   0(R5),X'40'             BLANK THE OVERLAY TABLE POSITION
         MVC   1(79,R5),0(R5)
         MVC   0(8,R5),INSERTCD        PLACE 'INSERT' IN THE TABLE
         MVC   8(8,R5),MODSTORE        MOVE MODULE NAME INTO TABLE
         LA    R5,80(R5)               POINT TO NEXT AVAILABLE POSITION
         ST    R5,OVLYREC              SAVE ADDRESS OF NEXT POSITION
         MVI   OVLYREC,X'80'           SET OVERLAY SWITCH
COMPMOD2 EQU   *
         L     R5,R5SAVE               RESTORE REGISTER FIVE
         SPACE
***********************************************************************
*                                                                     *
*    COMPARE NAME IN MODULE NAME BUFFER TO NAMES IN MODULE NAME TABLE *
*                   MATCH  -  GO TO MODFOUND                          *
*                NO MATCH  -  GO TO MODNOTBL                          *
*                                                                     *
***********************************************************************
         SPACE
COMPMOD  CLC   0(8,RA),MODSTORE        FOUND NAME IN MODULE NAME TABLE
         BE    MODFOUND                YES - HANDLE MATCH
         LA    RA,10(RA)               POINT TO NEXT NAME        S21016
         CLI   0(RA),SPACE             END OF MODULE NAME TABLE  S21995
         BE    MODNOTBL                YES - NAME NOT FOUND
         B     COMPMOD                 CONTINUE SEARCH
         SPACE
***********************************************************************
*                                                                     *
*       MODULE NOT FOUND IN TABLE - CHECK IF THIS WAS LAST MODULE     *
*       ON INCLUDE CARD. IF YES, READ NEXT RECORD FROM STAGE 1 TAPE.  *
*       IF NO, GO TO CHECK NEXT MODULE NAME (CHECKMOD).               *
*                                                                     *
***********************************************************************
         SPACE
MODNOTBL LA    R4,0                    RESET CHANGE-REPLACE SW   S21995
         CLI   0(R3),COMMA1            LAST NAME ON INCLUDE CARD S21995
         BE    INCR                    NO - CHECK FOR THE REST    M4756
         CLI   1(R3),COMMA1            IS THERE ANOTHER DDNAME   S21995
*                                      ON THE INCLUDE CARD        M4756
         BNE   READPCH2                NO - READ ANOTHER CARD
         LA    R3,2(R3)                YES-INCREMENT PASSED THE '),'
         B     BLLIBETC                PROCESS THE NEXT DDNAME    M4756
INCR     LA    R3,1(R3)                                           M4756
         B     CHECKMOD                PROCESS NEXT MODULE NAME
         SPACE
***********************************************************************
*                                                                     *
*                MODULE FOUND IN TABLE                                *
*              - WRITE JCL IF NOT ALREADY WRITTEN (GENERATE)          *
*              - INDICATE MATCH IN IDENTIFY TABLE (GENERATE)          *
*              - CREATE INCLUDE CARD (GENERATE) OR                    *
*                SPOOL OBJECT MODULE TO OUTF (APPLICATION)            *
*              - WRITE CHANGE-REPLACE CARDS IF PRESENT                *
*                                                                     *
***********************************************************************
         SPACE
MODFOUND ST    RA,SSISAVE              SAVE LOCATION OF MATCHED NAME
         ST    R3,R3SAV2               SAVE R3                   Y01036
         B     JCLCOPY1(R8)            IS JCL COPIED SWITCH SET
JCLCOPY1 B     COPYJCL                 NO-COPY JCL (GENERATE FUNCTION)
         B     BYPASS(R6)              YES-IS ENTRY-ALIAS SWITCH SET
BYPASS   B     RBTILLNM                NO-READ BACK TILL PREVIOUS NAME
CHEKCHRP B     CPYCHANG(R4)            YES-IS CHANGE-REPLACE SWITCH SET
CPYCHANG B     CRTEINCL                NO-CREATE INCLUDE CARD OR SPOOL
         B     COPYCHRP                YES-COPY CHANGE-REPLACE CARDS
         EJECT
***********************************************************************
*                                                                     *
*        THIS ROUTINE COPIES THE PRECEEDING SET OF JCL-CARDS          *
*                                                                     *
***********************************************************************
         SPACE
COPYJCL  MVC   INCSTORE(80),PCHAREA    SAVE MATCHED INCLUDE CARD
         ST    R3,R3SAV2               SAVE R3                   Y01036
RBJCL    BAL   R14,POINTRTN            POINT TO BEGINNING OF STEP JCL
JCLCOPY5 BAL   R14,READPCH             READ A RECORD             A40797
         TM    ASMSW,ASMPCH            COPY ASSEMBLY JCL SW SET  A40797
         BZ    CHKPARMS                NO - CHECK PARMS ON EXEC  Y01036
JCLCOPY  BAL   R2,COPYRTN              GO TO COPY EXEC CARD
         TM    ASMSW,ASMPCH            COPY ASSEMBLY JCL SW SET  A40797
         BO    JCLCOPY4                YES - BRANCH TO CHECK /*  A40797
JCLREAD  BAL   R14,READPCH             READ A RECORD             XXXXXX
         LA    R3,PCHAREA              GET ADDRESS OF PCH BUFFER Y01036
         TM    CONTSW1,EXECCONT        EXEC CONTINUATION SW SET  Y01036
         BZ    CHKBLANK                NO - CONTINUE PROCESSING  Y01036
         NI    CONTSW1,HEX00           TURN OFF EXEC CONTIN SW   Y01036
         BAL   R2,CHKSPACE             POINT TO NEXT KEYWORD     Y01036
         B     PARMCHK                 GO CHECK PARAMETERS       Y01036
         SPACE
***********************************************************************
*                                                                     *
*        THIS SECTION OF CODE EXAMINES THE PARAMETERS ON THE          *
*        EXEC STATEMENT                                               *
*                                                                     *
***********************************************************************
         SPACE
CHKPARMS EQU   *
         LA    R3,PCHAREA              GET PCHF BUFFER ADDRESS   Y01036
         BAL   R2,CHKSPACE             POINT TO 'EXEC'           Y01036
         BAL   R2,CHKSPACE             POINT TO PROC NAME        Y01036
         CLC   0(5,R3),LINKSPRC        LINK EDIT STEP            Y01036
         BE    LINKS1                  YES - BRANCH              Y01036
         LA    R3,4(R3)                INCREMENT PAST 'ASMS'     Y01036
         B     COMMACHK                BRANCH TO CHECK NEXT CHAR Y01036
LINKS1   LA    R3,5(R3)                INCREMENT PAST 'LINKS'    Y01036
         B     COMMACHK                BRANCH TO CHECK NEXT CHAR Y01036
PARMCHK  EQU   *
         CLC   0(4,R3),MODPARM         IS THIS MOD= KEYWORD      Y01036
         BE    MODKEY                  YES - BRANCH              Y01036
         CLC   0(2,R3),NPARM           IS THIS N= KEYWORD        Y01036
         BE    NKEY                    YES - BRANCH              Y01036
         CLC   0(3,R3),P1PARM          IS THIS P1= KEYWORD       Y01036
         BE    PKEY                    YES - BRANCH              Y01036
         CLC   0(3,R3),P2PARM          IS THIS P2= KEYWORD       Y01036
         BE    PKEY                    YES - BRANCH              Y01036
INC1     LA    R3,1(R3)                INCREMENT 1 CHAR          Y01036
COMMACHK CLI   0(R3),COMMA1            IS THIS A COMMA           Y01036
         BE    INC2                    YES - BRANCH              Y01036
         CLI   0(R3),SPACE             IS THIS A BLANK           Y01036
         BNE   INC1                    NO - INCREMENT TO NEXT CHAR
*                                                                Y01036
         TM    MEFSW,X'80'             MEF IN STAGE 1            Y01036
         BNO   CHKBLANK                NO - BRANCH               Y01036
         CLI   MEFBUFF+71,SPACE        CONTINUATION EXPECTED     Y01036
         BE    CHKBLANK                NO - BRANCH               Y01036
         OI    CONTSW1,EXECCONT        YES - SET SWITCH          Y01036
         B     CHKBLANK                CONTINUE PROCESSING       Y01036
         SPACE 1
INC2     LA    R3,1(R3)                INCREMENT PAST COMMA      Y01036
         CLI   0(R3),SPACE             IS THIS A BLANK           Y01036
         BNE   PARMCHK                 NO CHECK PARAMETERS       Y01036
         TM    MEFSW,X'80'             MEF IN STAGE 1            Y01036
         BNO   SETCONT                 NO - BRANCH               Y01036
         CLI   MEFBUFF+71,SPACE        CONTINUATION EXPECTED     Y01036
         BE    CHKBLANK                NO - BRANCH               Y01036
SETCONT  OI    CONTSW1,EXECCONT        TURN ON EXEC CONTINUE SW  Y01036
         EJECT
***********************************************************************
*                                                                     *
*        CHECK IF DATA RECORDS HAVE TO BE BYPASSED UNTIL THE          *
*        PROPER LOAD MODUE OR INCLUDE CARD IS FOUND                   *
*                                                                     *
***********************************************************************
         SPACE
CHKBLANK EQU   *
         TM    ASMSW,ASMPCH            ASSEMBLY PUNCH STEP       Y01036
         BO    JCLCOPY                 YES - BRANCH              Y01036
         CLI   PCHAREA,C' '            IS THIS A CONTROL CARD
         BNE   JCLCHKAS                NO-COPY JCL CARD          Y01036
         LA    R8,4                    YES-SET JCL COPIED SWITCH S21995
         B     DOREAD(R6)              IS ENTRY-ALIAS SWITCH SET
DOREAD   B     RFTILLNM                NO-SKIP TILL SAVED NAME CARD
         CLC   PCHAREA,INCSTORE        YES-IS THIS SAVED INCLUDE CARD
         BE    CHEKCHRP                YES-CHECK FOR CHANGE-REPLACE CDS
COPYALEN ST    R3,R3SAV
ALENRTRN LA    R3,PCHAREA              GET PCHF INPUT BUFFER ADDRESS
         BAL   R2,CHKSPACE             POINT TO NEXT OPERAND
         CLC   0(3,R3),CHARINC         INCLUDE CARD              Y01045
         BE    CHECKDSS                CHECK IF DSS CARD         Y01045
         CLI   0(R3),LETTERA           IS THIS AN ALIAS CARD     S21995
         BE    INSCOPY                 COPY ALIAS CARD           S21995
         CLI   0(R3),LETTERE           IS THIS AN ENTRY CARD     S21995
         BE    INSCOPY                 COPY ENTRY CARD           S21995
         CLC   0(4,R3),PAGECD          IS THIS A PAGE STMT       X01983
         BE    INSCOPY                 YES - HANDLE PAGE STMT    X01983
         CLC   0(5,R3),ORDERCD         IS THIS AN ORDER STMT     X01983
         BE    INSCOPY                 YES - HANDLE ORDER STMT   X01983
         CLC   0(7,R3),APFCD           IS THIS A SETCODE STMT    Y01048
         BE    INSCOPY                 YES - HANDLE SETCODE STMT Y01048
         TM    OVLYREC,X'80'           OVERLAY CARD ENCOUNTERED   M4006
         BO    RFCOPY                  YES - GO TO RFCOPY         M4006
         CLC   0(3,R3),CHARINS         YES - IS THIS INSERT STATEMENT
         BNE   RFCOPY                  NO - GO TO RFCOPY
INSCOPY  BAL   R2,COPYRTN              YES - COPY INSERT STATEMENT
RFCOPY   BAL   R14,READPCH             READ A RECORD
         CLC   PCHAREA,INCSTORE        REACHED MATCHED INCLUDE CARD
         BNE   ALENRTRN                NO-CHECK FOR ENTRY OR ALIAS CARD
         L     R3,R3SAV
         B     CHEKCHRP                CHECK FOR CHANGE-REPLACE CARDS
CHECKDSS BAL   R2,CHKSPACE             FIND DDNAME               Y01045
         CLC   0(17,R3),DSSDNME        CHECK IF DSS              Y01045
         BNE   RFCOPY                  NO - CONTINUE             Y01045
         OI    SWITCH1,CPYDSS          SET SWITCH                Y01045
         B     OUTDSS                  GO COPY CARD              Y01045
JCLCHKAS TM    ASMSW,ASMMOD            ASSEMBLY STEP             Y01036
         BNO   JCLCOPY                 NO - BRANCH TO COPY JCL   Y01036
         B     JCLREAD                 YES - BRANCH TO READ      Y01036
         SPACE
***********************************************************************
*                                                                     *
*      READ BACK TO LOAD MODULE BEGINNING, GO TO COPY ALIAS/ENTRY     *
*                                                                     *
***********************************************************************
         SPACE
RBTILLNM MVC   INCSTORE(80),PCHAREA     SAVE MATCHED INCLUDE CARD
         ST    R3,R3SAV2               SAVE R3                   Y01036
         BAL   R14,POINTRTN             POINT TO PREVIOUS NAME CARD
         ST    R3,R3SAV
         B     RFCOPY                   START READING CONTROL CARDS
         SPACE
***********************************************************************
*                                                                     *
*           READ FORWARD TO LOAD MODULE BEGINNING,                    *
*           SKIPPING PREVIOUSLY CHECKED CONTROL CARDS.                *
*           GO TO COPY ALIAS AND/OR ENTRY CARDS.                      *
*                                                                     *
***********************************************************************
         SPACE
RFTILLNM BAL   R14,READPCH             READ A RECORD
         CLC   PCHAREA,NAMESTOR        IS THIS SAVED NAME CARD
         BNE   RFTILLNM                NO-CONTINUE READING CARDS
         ST    R3,R3SAV
         B     RFCOPY                  YES-CHECK FOR ENTRY-ALIAS CARDS
         EJECT
***********************************************************************
*                                                                     *
*        CREATE INCLUDE ROUTINE                                       *
*           - MOVE 'X' INTO TABLE TO INDICATE MATCH                   *
*           - MOVE MODULE INTO OUTPUT INCLUDE BUFFER                  *
*           - WRITE INCLUDE CARD (GENERATE) OR                        *
*             SPOOL OBJECT MODULE (APPLICATION)                       *
*           - INDICATE MATCH IN IDENTIFY TABLE                        *
*             GO CHECK NEXT MODULE                                    *
*                                                                     *
***********************************************************************
         SPACE
CRTEINCL STM   R0,R2,READSTOR                                    S21995
         ST    R9,R9SAV                                          S21995
         MVI   8(RA),LETTERX           INDICATE MATCH IN TABLE   S21995
         CLI   9(RA),X'00'             IS IDENTIFY INDEX 0       S21016
         BE    MVMODST                 YES - NO IDENTIFY CARDS   S21016
         LA    R2,80                   FOR MULTIPLY              S21016
         SR    R1,R1                                             S21016
         LR    R0,R1                                             S21016
         IC    R1,9(RA)                IDENTIFY INDEX (MODTBL)   S21016
         BCTR  R1,0                    DECREMENT INDEX BY 1      S21016
         MR    R0,R2                   MULTIPLY BY 80 (OFFSET)   S21016
         A     R1,IDENTBL              ADD BEGINNING ADDR OF TBL S21016
         OI    0(R1),X'08'             INDICATE MATCH FOR SET    S21016
MVMODST  LM    R0,R2,READSTOR          RESTORE REGISTERS         S21016
         LA    RA,10(RA)               NEXT NAME IN MODTBL       S21016
         MVC   0(8,R9),MODSTORE        MOVE MODULE NAME TO INCLUDE AREA
INCCOMP  CLI   0(R9),ABLANK            BLANK (IN MODULE NAME)    S21995
         BE    CLOSEINC                YES-FINISH PROCESSING
         LA    R9,1(R9)                POINT TO NEXT CHARACTER IN NAME
         B     INCCOMP                 CONTINUE TO SEARCH FOR BLANK
CLOSEINC MVI   0(R9),PARNRITE          MOVE IN RIGHT PARENTHESIS S21995
         TM    PARM,X'80'              APPLICATION FUNCTION REQUESTED
         BNO   WRTINCL                 NO-WRITE THE INCLUDE STATEMENT
         OI    BRPRMLST,SPOOLI         INDICATE OBJ TO BE SPOOLED
         LA    R1,BRPRMLST             GET ADDRESS OF PARAMETER LIST
         L     R15,PTF01               GET ADDRESS OF AMAPTF01
         BALR  R14,R15                 GO TO AMAPTF01 TO SPOOL TO OUTF
         B     COMWBLNK                SKIP THE WRITE
WRTINCL  STM   R2,R3,RITESAVE
         LA    R3,OUTAREA1             GET ADDRESS OF INCLUDE BUFFER
         BAL   R2,AMAWRITE             GO TO WRITE ROUTINE
         LM    R2,R3,RITESAVE
COMWBLNK MVI   0(R9),SPACE
         L     R9,R9SAV
         LA    R6,4                    SET ENTRY ALIAS SWITCH    S21995
         L     R3,R3SAV2               RESTORE R3                Y01036
         B     MODNOTBL                CHECK FOR MORE NAMES
         EJECT
***********************************************************************
*                                                                     *
*             NAME CARD ROUTINE -                                     *
*             NOTE POSITION OF NAME CARD                              *
*             CREATE SYSLMOD CARD FOR PREVIOUS LOAD MODULE            *
*             SAVE AND COPY NAME CARD                                 *
*             PERFORM LINK EDIT (APPLICATION)                         *
*                                                                     *
***********************************************************************
         SPACE
NAMERTN  TM    OVNOGO,X'08'            OVERLAY NO GO SWITCH SET  S21995
         BO    CRTSYSLM                YES-SKIP NORMAL PROCESS   S21995
         B     STORENM1(R8)            IS JCL COPIED SWITCH SET  S21995
STORENM1 B     STORENAM                NO-SAVE NAME CARD
         BAL   R14,NOTERTN             NOTE THE LAST BLOCK READ
         B     STORENM2(R6)            IS ENTRY-ALIAS SWITCH SET
STORENM2 B     STORENAM                NO-SAVE NAME CARD
CRTSYSLM LA    R7,LMODETC              ADDR OF INCLUDE SYSLMOD BUFFER
         BAL   R2,CHKSPACE             POINT TO MODULE NAME ON CARD
NAMELOOP MVC   0(1,R7),0(R3)           MOVE CHAR FROM CARD TO BUFFER
         LA    R3,1(R3)
         LA    R7,1(R7)
         CLI   0(R3),PARNLEFT          IS THIS A LEFT PAREN      S21995
         BE    NMELOOP1                YES, A REPLACE EXISTS-OUTPUT
*                                      THE SYSLMOD INCLUDE CARD
         CLI   0(R3),SPACE             END OF MODULE NAME        S21995
         BNE   NAMELOOP                NO-CONTINUE TO SCAN NAME
NMELOOP1 EQU   *
         TM    OVNOGO,X'08'            OVERLAY NO GO SWITCH SET  S21995
         BO    AMA012WR                YES - WRITE ERROR MESSAGE S21995
         MVI   0(R7),PARNRITE          CHECK FOR RIGHT PAREN     S21995
         STM   R2,R4,RITESAVE                                    S21995
         SPACE
***********************************************************************
*                                                                     *
*             PUT OUT IDENTIFY CARDS FOR THIS LOAD MODULE.            *
*             THIS IS DONE ONLY FOR THE GENERATE FUNCTION.            *
*                                                                     *
***********************************************************************
         SPACE
         TM    PARM,X'80'              APPLICATION FUNC REQUEST  S21016
         BO    IDENEXIT                YES-DO NOT WRITE IDENTIFY S21016
         LA    R3,SSIAREA              ADDRESS OF OUTPUT BUFFER  S21016
         MVI   SSIAREA,C' '            BLANK FIRST BYTE OF BUFF  S21016
         L     R4,IDENTBL              IDENTIFY TABLE ADDRESS    S21016
LOOP     CLI   0(R4),X'FF'             END OF IDENTIFY TABLE     S21016
         BE    IDENEXIT                YES - EXIT                S21016
         TM    0(R4),X'08'             MATCH FOR THIS MODULE     S21016
         BO    IDFOUND                 YES-WRITE IDENTIFY CARDS  S21016
         LA    R4,80(R4)               NEXT ENTRY IN TABLE       S21016
         B     LOOP                    SEARCH FOR MATCHES        S21016
IDFOUND  NI    0(R4),X'F7'             TURN OFF MATCH INDICATOR  S21016
         MVC   SSIAREA+1(79),1(R4)     IDENTIFY CARD TO BUFFER   S21016
         BAL   R2,AMAWRITE             WRITE IDENTIFY RECORD     S21016
         LA    R4,80(R4)               NEXT ENTRY IN TABLE       S21016
         TM    0(R4),X'80'             NEW SET OF IDENTIFY CARDS S21016
         BNO   IDFOUND                 NO - WRITE RECORDS        S21016
         B     LOOP                    CHECK FOR MATCH OR END    S21016
IDENEXIT LA    R3,OUTAREA2             INCLUDE SYSLMOD BUFFER    S21016
         BAL   R2,AMAWRITE             WRITE INCLUDE SYSLMOD CARD
         LM    R2,R4,RITESAVE                                    S21995
         MVI   LMODETC,C' '            BLANK INCLUDE SYSLMOD BUFFER
         MVC   LMODETCB(60),LMODETC
         SPACE
***********************************************************************
*                                                                     *
*          THIS CODE EXAMINES IF OVERLAY WAS SPECIFIED. IF SO         *
*          THE OVERLAY TABLE IS WRITTEN PRIOR TO THE NAME CARD.       *
*                                                                     *
***********************************************************************
         SPACE
         TM    OVLYREC,X'80'           IS OVERLAY SWITCH SET
         BNO   COPYNAME                NO-SKIP OVERLAY PROCESSING
         L     R3,OVTABADR             GET OVERLAY TABLE ADDRESS S21995
         MVI   OVLYREC,X'00'           TURN OFF THE OVERLAY SWITCH
         L     R9,OVLYREC              CURRENT POSITION IN TABLE S21995
OVLYLOOP EQU   *
         BAL   R2,AMAWRITE             WRITE OVERLAY/INSERT CARD S21995
         LA    R3,80(R3)               POINT TO NEXT RECORD
         CR    R9,R3                   REACHED LAST RECORD       S21995
         BNE   OVLYLOOP                NO-WRITE THE NEXT RECORD
         XC    OVLYREC(4),OVLYREC      YES-ZERO ADDR FOR NEXT MEMBER
         SPACE
***********************************************************************
*                                                                     *
*             THIS SECTION DETERMINES IF THE NAME CARD HAS            *
*             THE 'REPLACE' OPTION ON THE CARD. IF NOT, IT            *
*             PLACES THE (R) ON THE CARD PRIOR TO WRITING IT.         *
*                                                                     *
***********************************************************************
         SPACE
COPYNAME EQU   *
         OI    NAMESWCH,X'80'          TURN ON NAME SWITCH TO INDICATE
*                                      A NAME CARD HAS BEEN PROCESSED
         LA    R3,PCHAREA              GET PCHF INPUT BUFFER ADDRESS
         BAL   R2,CHKSPACE             POINT TO NAME
         BAL   R2,CHKSPACE             CYCLE TO THE MODULE NAME
         MVC   MODSTORE(8),BLANK       BLANK MODSTORE             M3999
         LA    R1,MODSTORE             SET UP POINTER TO MODSTORE M3999
COPYLOOP CLI   0(R3),PARNLEFT          IS THIS A LEFT PAREN      S21995
         BE    CPYNAME1                YES-REPLACE OPTION IS PRESENT
         CLI   0(R3),SPACE             IS THIS A BLANK           S21995
         BE    NEEDTHER                YES-REPLACE OPTION IS NEEDED
         MVC   0(1,R1),0(R3)           MOVE 1 CHAR OF MODULE NAME M3999
         LA    R1,1(R1)                INCREMENT MODSTORE POINTER M3999
         LA    R3,1(R3)                INCREMENT TO CHECK NEXT LETTER
         B     COPYLOOP                CHECK NEXT CHARACTER
NEEDTHER EQU   *
         MVC   0(4,R3),REPLACE         MOVE THE REPLACE(R) OPTION
CPYNAME1 EQU   *
         ST    R4,SAVE4
         ST    R5,SAVE5
         L     R5,SSISAVE              OBTAIN ADDR OF MATCHED NAME
         L     R4,MODTBL               OBTAIN ADDR OF MODULE TABLE
         SR    R5,R4                   OBTAIN OFFSET OF MATCHED NAME
         SR    R4,R4
         D     R4,TEN                  DIVIDE OFFSET BY TEN      S21016
         SLL   R5,3                    MULTIPLY THIS BY 8
         L     R4,SSITABLE             OBTAIN ADDR OF SSI TABLE
         AR    R5,R4                   ADD OFFSET OF SSI INFO
         MVC   SSIAREA(80),SSIAREA-1   BLANK SSIAREA             S21016
         MVC   SSIAREA+11(8),0(R5)     MOVE SSI INFO INTO OUTPUT BUFFER
         MVC   SSIAREA+2(6),SSICARD    MOVE 'SETSSI' TO BUFFER   S21016
         STM   R2,R3,RITESAVE
         LA    R3,SSIAREA              GET ADDRESS OF OUTPUT BUFFER
         BAL   R2,AMAWRITE             GO TO WRITE ROUTINE
         LM    R2,R3,RITESAVE
         L     R4,SAVE4
         L     R5,SAVE5
         BAL   R2,COPYRTN              WRITE OUT THE 'NAME' CARD
         TM    PARM,X'80'              APPLICATION FUNCTION REQUESTED
         BNO   SLSHCHK                 CHECK FOR /* ROUTINE
         OI    BRPRMLST,LINK           YES - INDICATE LINK ROUINTE
         LA    R1,BRPRMLST             GET ADDRESS OF PARAMETER LIST
         L     R15,PTF01               GET ADDRESS OF AMAPTF01
         BALR  R14,R15                 GO TO THE LINK ROUTINE
SLSHCHK  TM    SLASHSW,X'80'           SHOULD WE RETURN TO /* ROUTINE
         BO    ENDCRTN1                YES--RETURN TO /* ROUTINE
STORENAM MVC   NAMESTOR(80),PCHAREA    SAVE NAME CARD
         XC    OVLYREC(4),OVLYREC      TURN OFF OVERLAY SWITCH    M6106
         NI    COMSW,TURNOFF           TURNOFF DSS SWITCH        Y01045
         LA    R6,0                    SET ENTRY-ALIAS SWITCH    S21995
         B     READPCH2                READ NEXT CARD
         EJECT
***********************************************************************
*                                                                     *
*    THIS SECTION PROCESSES THE NAME STATEMENT AT '/*' TIME. IF A NAME
*    CARD HAS NOT BEEN PRODUCED FOR THIS LOAD MODULE,THE NAME
*    OBTAINED FROM THE SYSLMOD INPUT SAVE AREA AND WRITTEN AT
*    THIS TIME. IF NO NAME EXISTS IN THIS AREA, THE MATCH IS IGNORED.
*                                                                     *
***********************************************************************
         SPACE
ENDCDRTN EQU   *
         TM    NAMESWCH,X'80'          HAS A NAME CARD BEEN FOUND
         BO    COPYNAM1                YES-WRITE THE /* CARD
         CLC   SYSLNAME(8),BLANK       IS THE SYSLNAME AREA BLANK
         BE    COPYNAM1                YES, NO PROCESSING HAS BEEN DONE
*                                      FOR THIS MODULE--IGNORE IT
         MVC   SYSLSAVE(80),PCHAREA    SAVE THE /*
         MVI   PCHAREA,X'40'
         MVC   PCHAREA+1(79),PCHAREA   BLANK THE PCHF INPUT BUFFER
         MVC   PCHAREA+1(5),NAMECARD   MOVE THE 'NAME' STATEMENT
         MVC   PCHAREA+7(11),SYSLNAME  MOVE THE MODULE NAME AND (R)
         OI    SLASHSW,X'80'           INDICATE THE NAME ROUTINE SHOULD
*                                      RETURN TO THE /* ROUTINE
         LA    R3,PCHAREA+1            INITIALIZATION FOR NAME ROUTINE
         B     CRTSYSLM                WRITE OUT THE OVERLAY,SYSLMOD,
*                                      AND NAME STATEMENTS
ENDCRTN1 EQU   *
         MVI   SLASHSW,X'00'           TURN OFF THE NAME RETURN SWITCH
         MVC   PCHAREA(80),SYSLSAVE    PREPARE TO WRITE THE '/*' CARD
COPYNAM1 EQU   *
         MVI   SYSLNAME,X'40'
         MVC   SYSLNAME+1(10),SYSLNAME BLANK SYSLNAME AREA
         NI    NAMESWCH,X'00'          TURN OFF THE NAME SWITCH
         B     DOREAD1(R8)             IS JCL COPIED SWITCH SET
DOREAD1  B     READPCH1                NO-READ NEXT CARD          M0868
         BAL   R2,COPYRTN              YES-WRITE CARD
         B     READPCH1                READ NEXT CARD             M0868
         EJECT
***********************************************************************
*                                                                     *
*        SUBROUTINE TO COPY INPUT TO OUTPUT.                          *
*        CHECKS FOR LINKAGE EDITOR PARAMETERS (APPLICATION)           *
*                                                                     *
***********************************************************************
         SPACE
COPYRTN  TM    PARM,X'80'              APPLICATION FUNCTION REQUESTED
         BNO   COPYRTN1                NO - WRITE THE STATEMENT  S21995
         CLI   PCHAREA,SPACE           IS IT A CONTROL STATEMENT
         BE    COPYRTN1                YES - WRITE THE STATEMENT
         OI    BRPRMLST,PARMCHEK       INDICATE PARAMETER CHECK NEEDED
         LA    R1,BRPRMLST             GET PARAMETER LIST ADDRESS
         L     R15,PTF01               GET ADDRESS OF AMAPTF01
         BALR  R14,R15                 GO TO AMAPTF01 TO CHECK FOR PARM
         BR    R2                      RETURN TO CALLER          S21995
COPYRTN1 STM   R2,R3,RITESAVE
         LA    R3,PCHAREA              GET ADDRESS OF PCHF INPUT BUFFER
         BAL   R2,AMAWRITE             GO TO WRITE ROUTINE
         LM    R2,R3,RITESAVE
         TM    MEFSW,X'80'             IS MEF IN EFFECT
         BNO   NOMEF                   NO-ADDITIONAL WRITE NOT NEEDED
         STM   R2,R3,RITESAVE
         LA    R3,MEFBUFF              GET ADDRESS OF MEF BUFFER
         BAL   R2,AMAWRITE             GO TO WRITE ROUTINE
         LM    R2,R3,RITESAVE
         NI    MEFSW,X'00'             CLEAR MEF INDICATOR
NOMEF    BR    R2                      RETURN TO CALLER
         EJECT
***********************************************************************
*                                                                     *
*        THIS SECTION OF CODE HANDLES THE PARAMETERS ON THE EXEC      *
*        STATEMENT                                                    *
*                                                                     *
***********************************************************************
         SPACE
PKEY     LA    R3,4(R3)              INCREMENT PAST P1=' OR P2=' Y01036
         MVI   0(R3),SPACE             MAKE CHAR BLANK           Y01036
         LA    R3,2(R3)                INCREMENT PAST  '         Y01036
         B     COMMACHK                YES - CONTINUE PROCESSING Y01036
         SPACE 1
MODKEY   EQU   *
         LA    R3,4(R3)                INCREMENT PAST MOD=       Y01036
         ST    R3,DSNPNTR              SAVE PTR TO DSNAME        Y01036
         ST    R9,R9SAVE1              SAVE R9                   Y01036
         SR    R2,R2                   ZERO COUNTER              Y01036
         LA    R9,SYSLNAME             OBTAIN ADDR OF NAME AREA  Y01036
         MVC   SYSLNAME(8),BLANK       SET BUFFER TO BLANKS      Y01036
COMCHK1  CLI   0(R3),COMMA1            IS THIS A COMMA           Y01036
         BE    CNTCHK2                 YES - CONTINUE PROCESSING Y01036
         CLI   0(R3),SPACE             IS THIS A BLANK           Y01036
         BE    CNTCHK2                 YES - CONTINUE PROCESSING Y01036
         MVC   0(1,R9),0(R3)           MOVE ONE LETTER OF NAME   Y01036
         LA    R3,1(R3)                INCREMENT TO NEXR CHAR    Y01036
         LA    R9,1(R9)                POINT TO NEXT IN BUFFER   Y01036
         LA    R2,1(R2)                INCREMENT COUNTER         Y01036
         B     COMCHK1                 CHECK NEXT LETTER         Y01036
CNTCHK2  LTR   R2,R2                   IS COUNTER ZERO           Y01036
         BZ    RESTR9                  YES- CONTINUE PROCESSING  Y01036
CHKASM   TM    ASMSW,ASMMOD            IN ASSEMBLY STEP          A40797
         BO    ASMCHK1               YES - CHECK NAMES FOR MATCH A40797
         MVC   0(3,R9),REPLACE         REPLACE OPTION TO BUFFER  Y01036
         TM    PARM,APPLFUNC           APPLICATION FUNCTION      Y01036
         BO    RESTR9                  YES - CONTINUE PROCESSING Y01036
MODCARD  LR    R9,R3                 SAVE CURRENT BUFFER ADDRESS Y01036
         SR    R3,R2                   POINT TO BEFORE NAME      Y01036
BLCHK    CLI   0(R3),SPACE             IS THIS A BLANK           Y01036
         BE    RESTR3                  YES BRANCH                Y01036
         MVC   0(1,R3),0(R9)           NO - OVERLAY THIS CHAR    Y01036
         LA    R9,1(R9)                POINT TO NEXT LETTER      Y01036
         LA    R3,1(R3)                POINT TO NEXT LETTER      Y01036
         B     BLCHK                   CHECK NEXT LETTER         Y01036
RESTR3   L     R3,DSNPNTR              RESTORE R3 POINTER        Y01036
RESTR9   L     R9,R9SAVE1              RESTORE R9                Y01036
         B     COMMACHK             CONTINUE CHECKING PARAMETERS Y01036
         SPACE 1
NKEY     TM    PARM,APPLFUNC           APPLICATION FUNCTION      Y01036
         BO    COMMACHK                YES - CONTINUE PROCESSING Y01036
         ST    R3,R3SAVE1              SAVE PTR                  Y01036
         LA    R3,2(R3)                INCREMENT PAST N=         Y01036
         ST    R9,R9SAVE               SAVE R9                   Y01036
         LA    R2,PARMCHK              GET RETURN ADDRESS        Y01036
         ST    R2,R2SAV2               SAVE FOR RETURN           Y01036
         CLC   0(5,R3),SYS1COM         IS VALUE 'SYS1,'          Y01036
         BE    INCSYS                  YES INCREMENT PTR         Y01036
         CLC   0(5,R3),SYS1BLK         IS VALUE 'SYS1 '          Y01036
         BE    INCSYS                  YES - BRANCH BACK         Y01036
         MVI   MEFBUFF,SPACE           CLEAR MEF BUFFER          Y01036
         MVC   MEFBUFF+1(79),MEFBUFF                             Y01036
         MVC   MEFBUFF(2),SLASHES      MOVE '//' INTO BUFFER     Y01036
         MVC   MEFBUFF+15(2),NPARM     MOVE 'N=' INTO BUFFER     Y01036
         MVC   MEFBUFF+17(4),SYS1COM   MOVE 'SYS1' INTO BUFFER   Y01036
         MVC   TEMPBUFF(72),PCHAREA    MOVE CARD TO TEMP BUFFER  Y01036
         LA    R9,MEFBUFF+21           SET UP REGISTER 9         Y01036
         MVI   PCHAREA,SPACE           CLEAR CARD BUFFER         Y01036
         MVC   PCHAREA+1(71),PCHAREA                             Y01036
         LA    R3,TEMPBUFF             POINT TO TEMP BUFFER      Y01036
         ST    R4,R4SAVE               SAVE R4                   Y01036
         LA    R4,PCHAREA              POINT TO PCHAREA          Y01036
FINDN    CLC   0(2,R3),NPARM           FOUND N=                  Y01036
         BE    FOUNDN                  YES - BRANCH              Y01036
         MVC   0(1,R4),0(R3)           NO - MOVE BACK TO CARD    Y01036
         LA    R3,1(R3)                INCREMENT POINTER         Y01036
         LA    R4,1(R4)                INCREMENT CARD POINTER    Y01036
         B     FINDN                   CHECK NEXT CHARACTER      Y01036
FOUNDN   BCTR  R3,0                    POINT TO BEFORE N=        Y01036
         CLI   0(R3),SPACE             IS N= FIRST ON CARD       Y01036
         BNE   PASSN                   NO - DONT SET SWITCH      Y01036
         OI    MEFSW,X'40'            INDICATE DSN FIRST ON CARD Y01036
PASSN    LA    R3,3(R3)                CYCLE PAST N=             Y01036
         B     SKIPDSN1                CONTINUE                  Y01036
INCSYS   LA    R3,4(R3)                INCREMENT PAST 'SYS1'     Y01036
         B     COMMACHK                CONTINUE PROCESSING       Y01036
         EJECT
***********************************************************************
*                                                                     *
*        COPY CHANGE-REPLACE ROUTINE                                  *
*              INDICATE END OF TABLE BY INSERTING 'X'                 *
*              COPY ALL ENTRIES IN TABLE TO OUTPUT                    *
*              GO TO CREATE INCLUDE CARD                              *
*                                                                     *
***********************************************************************
         SPACE
COPYCHRP MVI   0(R5),C'X'              INDICATE END OF ENTRIES
         STM   R2,R3,RITESAVE          SAVE REGISTERS 2 AND 3    S21995
         L     R3,CHGRPSTR             CHANGE-REPLACE TABLE      S21995
CHRPCOPY EQU   *
         BAL   R2,AMAWRITE             WRITE CHANGE/REPLACE CARD S21995
         LA    R3,80(R3)               POINT TO NEXT ENTRY       S21995
         CLI   0(R3),C'X'              END OF CHANGE/REPLACE TBL S21995
         BNE   CHRPCOPY                NO - CONTINUE TO WRITE CARDS
         LA    R4,0                    RESET CHANGE-REPLACE SW   S21995
         LM    R2,R3,RITESAVE          RESTORE REGISTERS 2 AND 3 S21995
         B     CRTEINCL                RETURN TO CRTEINCL
         EJECT
***********************************************************************
*                                                                     *
*        PART II    CHECK FOR MODULE-MATCHES                          *
*                   IN IEBCOPY STEP OF STAGE 1 OUTPUT                 *
*                                                                     *
***********************************************************************
         SPACE
PART2    EQU   *
         LA    R8,0                    TURN OFF JCL COPIED SWITCH
         BAL   R14,NOTERTN             NOTE THE LAST BLOCK READ
*
P2READ   MVI   BLANKSW,C' '                                      S21995
         BAL   R9,PGMRTN               SEARCH STAGE I TAPE       S21995
P2TEST   CLI   0(R3),SPACE             BLANK (CONTROL CARD)      S21995
         BE    P2STAT                  YES - CHECK IF SELECT OR COPY
         CLC   0(2,R3),ENDCARD         IS THIS /* CARD
         BNE   P2READ                  NO - READ NEXT RECORD
P2JCLEND B     DOREAD2(R8)             IS THE JCL COPIED SWITCH SET
DOREAD2  B     READPCH1                NO - READ NEXT RECORD      M0868
         BAL   R2,COPYRTN              COPY RECORD
         B     READPCH1                READ NEXT RECORD           M0868
P2STAT   EQU   *
         BAL   R2,CHKSPACE             POINT TO CONTROL CARD TYPE
         CLI   0(R3),LETERS            IS THIS SELECT STATEMENT  S21995
         BE    P2SELECT                YES - GO TO SELECT ROUTINE
         CLI   0(R3),LETERC            IS THIS COPY STATEMENT    S21995
         BE    P2COPYRT                YES - GO TO COPY ROUTINE
         B     P2READ                  READ NEXT RECORD
         EJECT
***********************************************************************
*                                                                     *
*              THIS ROUTINE ANALYZES SELECT CONTROL CARDS             *
*               -BUILD A NEW CONTROL CARD                             *
*               -CHECK FOR MATCHES WITH MODULE NAME TABLE             *
*                                                                     *
***********************************************************************
P2SELECT BAL   R2,CHKSPACE             POINT TO 'MEMBER=' KEYWORD
         CLC   0(7,R3),P2MBR           'MEMBER=' KEYWORD          M0869
         BE    P2MBRFND                YES - POINT PASSED IT      M0869
         LA    R3,2(R3)                POINT PASSED 'M=' KEYWORD  M0869
         B     P2COMPA                 CONTINUE                   M0869
P2MBRFND LA    R3,7(R3)                SKIP PASSED 'MEMBER='      M0869
P2COMPA  CLI   0(R3),C'('              IS THIS A LEFT PARENTHESIS
         BNE   P2MODINI                NO-GO TO BLANK SELECT BUFFER
         LA    R3,1(R3)                POINT TO NEXT CHARACTER
         MVI   BLANKSW,C'*'
P2MODINI MVI   P2DATA,C' '
         MVC   P2DATA+1(62),P2DATA     BLANK SELECT BUFFER
         LA    R9,P2DATA               GET ADDR OF SELECT BUFFER
         MVC   MODSTORE,BLANK          BLANK MODULE NAME BUFFER
         L     RA,MODTBL               GET ADDR OF MODULE NAME TABLE
         LA    R5,MODSTORE             GET ADDR OF MODULE NAME BUFFER
P2CHKSVC CLI   0(R3),C'('              IS THIS MODULE RENAMED
         BE    P2SVCS                  YES - GO TO RENAME ROUTINE
         SPACE
***********************************************************************
*                                                                     *
*              THIS ROUTINE PROCESSES MODULES WHICH ARE NOT RENAMED   *
*                                                                     *
***********************************************************************
         SPACE
P2NORM   BAL   R2,P2STORP              STORE MODULE NAME IN MODSTORE
P2COMPN  CLC   0(8,RA),MODSTORE        IS THIS NAME IN THE TABLE
         BE    P2FOUNDN                YES-GO TO MODULE FOUND (NORMAL)
         LA    RA,10(RA)               NO-NEXT MODULE NAME       S21016
         CLI   0(RA),SPACE             END OF MODULE NAME TABLE  S21995
         BE    P2NOTFN                 YES-MODULE NOT FOUND (NORMAL)
         B     P2COMPN                 NO-CONTINUE COMPARING WITH TABLE
         SPACE
***********************************************************************
*                                                                     *
*              THIS ROUTINE PROCESSES MODULES WHICH ARE RENAMED       *
*                                                                     *
***********************************************************************
         SPACE
P2SVCS   MVC   0(1,R9),0(R3)           PUT PARENTHESIS IN SELECT BUFFER
         LA    R3,1(R3)                POINT TO NEXT LETTER ON CARD
         LA    R9,1(R9)                POINT TO NEXT POSITION IN BUFFER
         BAL   R2,P2STOR               STORE MODULE NAME IN MODSTORE
P2COMPS  CLC   0(8,RA),MODSTORE        IS THIS NAME IN THE TABLE
         BE    P2FOUNDS                YES-GO TO MODULE FOUND (RENAMED)
         LA    RA,10(RA)               POINT TO NEXT TABLE ENTRY S21016
         CLI   0(RA),SPACE             END OF MODULE NAME TABLE  S21995
         BE    P2NOTFS                 YES-MODULE NOT FOUND (RENAMED)
         B     P2COMPS                 CONTINUE TO SEARCH TABLE
         EJECT
***********************************************************************
*                                                                     *
*              THIS ROUTINE OBTAINS THE NEXT MODULE NAME              *
*              FROM THE SELECT CARD AND MOVES IT TO THE               *
*              SELECT BUFFER AND THE MODULE NAME BUFFER.              *
*                                                                     *
***********************************************************************
         SPACE
P2STORP  MVI   0(R9),C'('              PUT PARENTHESIS IN SELECT BUFFER
         LA    R9,1(R9)                POINT TO NEXT POSITION IN BUFFER
P2STOR   MVC   0(1,R9),0(R3)           MOVE ONE LETTER TO SELECT BUFFER
         MVC   0(1,R5),0(R3)           PUT LETTER IN MODULE NAME BUFFER
         LA    R3,1(R3)
         LA    R9,1(R9)
         LA    R5,1(R5)
         CLI   0(R3),C','              REACHED END OF OLD MODULE NAME
         BE    P2STOREX                YES - RETURN TO CALLER
         CLI   0(R3),C')'              IS THIS END OF THE MODULE NAME
         BE    P2STOREX                YES - RETURN TO CALLER
         CLC   0(1,R3),BLANKSW         IS THIS EQUAL TO BLANKSW
         BNE   P2STOR                  NO - CONTINUE TO MOVE NAME
P2STOREX BR    R2                      RETURN TO CALLER
         EJECT
***********************************************************************
*                                                                     *
*              PREPARE TO CONTINUE SEARCH OF SELECT CARD              *
*                                                                     *
***********************************************************************
         SPACE
P2NOTFN  CLI   0(R3),COMMA1            ANY MORE NAMES ON CARD    S21995
         BNE   P2READ                  NO - READ NEXT CARD
         LA    R3,1(R3)                POINT TO NEXT NAME
         B     P2MODINI                CONTINUE SEARCH OF SELECT CARD
P2NOTFS  LA    R3,1(R3)                POINT PASSED COMMA BETWEEN NAMES
         CLI   0(R3),PARNRITE          REACHED END OF RENAME     S21995
         BNE   P2NOTFS                 NO -CONTINUE TO SCAN
         LA    R3,1(R3)                YES-SKIP RIGHT PARENTHESIS
         B     P2NOTFN                 CHECK FOR MORE NAMES ON CARD
         EJECT
***********************************************************************
*                                                                     *
*              MATCH FOUND FOR MODULE NOT RENAMED                     *
*               - BUILD SELECT CARD WITH REPLACE OPTION (GENERATE)    *
*               - SPOOL OBJ AND PERFORM LINK EDIT (APPLICATION)       *
*                                                                     *
***********************************************************************
         SPACE
P2FOUNDN EQU   *
         TM    PARM,X'80'              APPLICATION FUNCTION REQUESTED
         BNO   P2FOUNDC                NO-SEE IF JCL SHOULD BE WRITTEN
         ST    RA,SSISAVE              SAVE POINTER TO NAME       M4000
*                                      IN ORDER TO FIND SSI
         ST    RA,SELNAME              SAVE POINTER TO NAME IN
*                                      ORDER TO BUILD NAME CARD   M4000
         LA    R1,BRPRMLST             GET ADDRESS OF PARAMETER LIST
         OI    BRPRMLST,SPOOLS         INDICATE OBJ TO BE SPOOLED M4000
         L     R15,PTF01               GET ADDRESS OF AMAPTF01
         BALR  R14,R15                 AMAPTF01(TO SPOOL AND LINK EDIT)
P2FOUNDC BAL   R2,P2COPY               SEE IF JCL SHOULD BE WRITTEN
         MVI   0(R9),C','              PUT COMMA AFTER MODULE NAME
         MVC   1(4,R9),COMMAR          IEBCOPY REPLACE OPTION    S21995
P2FOUND  BAL   R2,P2WRTE               WRITE CONSTRUCTED SELECT CARD
         B     P2NOTFN                 CHECK FOR MORE NAMES ON CARD
P2FOUND2 LA    R3,2(R3)                INCREMENT PAST ,R ON CARD  M6108
P2FOUND1 MVC   0(4,R9),COMMAR          IEBCOPY REPLACE OPTION    S21995
         LA    R9,4(R9)                                          S21995
         LA    R3,1(R3)                POINT TO NEXT CHARACTER   S21995
         B     P2FOUND                 WRITE CONSTRUCTED SELECT CARD
         EJECT
***********************************************************************
*                                                                     *
*              MATCH FOUND FOR MODULE WHICH IS RENAMED                *
*               - BUILD SELECT CARD WITH REPLACE OPTION (GENERATE)    *
*               - SPOOL OBJ AND PERFORM LINK EDIT (APPLICATION)       *
*                                                                     *
***********************************************************************
P2FOUNDS TM    PARM,X'80'              APPLICATION FUNCTION REQUESTED
         BNO   P2FOWNDS                CHECK IF JCL SHOULD BE WRITTEN
         LA    R3,1(R3)                POINT TO NEW NAME          M4000
         ST    R3,SELNAME              SAVE ADDRESS OF NEW NAME   M4000
         ST    RA,SSISAVE              SAVE POINTER TO NAME TO GET SSI
         LA    R1,BRPRMLST             GET ADDRESS OF PARAMETER LIST
         OI    BRPRMLST,SPOOLS         INDICATE OBJ TO BE SPOOLED
         L     R15,PTF01               GET ADDRESS OF AMAPTF01
         BALR  R14,R15                 AMAPTF01(TO SPOOL AND LINK EDIT)
         B     P2FCOMP                 CONTINUE PROCESSING
P2FOWNDS BAL   R2,P2COPY               COPY JCL IF NEEDED
P2FCOMP  EQU   *
         CLI   0(R3),C')'              REACHED END OF RENAME PAIR
         BE    P2FOUND1                YES - BUILD REPLACE OPTION
         CLC   0(2,R3),COMMAR          IS REPLACE OPTION ON CARD  M6108
         BE    P2FOUND2                YES - BUILD REPLACE OPTION M6108
         MVC   0(1,R9),0(R3)           MOVE NEW NAME TO SELECT BUFFER
         LA    R3,1(R3)
         LA    R9,1(R9)
         B     P2FCOMP                 CONTINUE TO MOVE NEW NAME
         EJECT
***********************************************************************
*                                                                     *
*              PART 2 WRITE ROUTINE                                   *
*               - WRITE RECORDS ONLY FOR GENERATE FUNCTION            *
*               - SET COPY SWITCH (R6 TO 4)                           *
*                                                                     *
***********************************************************************
         SPACE
P2WRTE   MVI   8(RA),C'X'              INDICATE MATCH            S21995
         TM    PARM,X'80'              APPLICATION FUNCTION REQUESTED
         BO    BMPCTR                  YES - DO NOT DO THE WRITE
         STM   R2,R3,RITESAVE
         LA    R3,P2OUT                GET ADDRESS OF SELECT BUFFER
         BAL   R2,AMAWRITE             GO TO WRITE ROUTINE
         LM    R2,R3,RITESAVE
BMPCTR   LA    R6,4                    SET COPY SWITCH (R6 TO 4) S21995
         BR    R2                      RETURN TO CALLER
         SPACE
***********************************************************************
*                                                                     *
*              PART 2 JCL WRITE ROUTINE                               *
*                                                                     *
***********************************************************************
         SPACE
P2COPY   B     JCLCOPY2(R8)            IS JCL COPIED SWITCH SET
JCLCOPY2 B     P2CJCL                  NO - WRITE JCL
         B     COPYCD1(R6)             YES - IS COPY SWITCH SET
COPYCD1  B     P2RB                    NO - WRITE COPY CARD
         BR    R2                      RETURN TO CALLER
P2COPYEX EQU   *
         NI    DUPCOPY,X'00'           CLEAR IDENTICAL COPY CARD SW
         BR    R2                      RETURN TO CALLER
P2CJCL   EQU   *
         LA    R8,4                    SET JCL COPIED SWITCH     S21995
         MVC   INCSTORE(80),PCHAREA    SAVE MATCHED SELECT STATEMENT
         BAL   R14,POINTRTN            POINT TO JCL FOR THIS STEP
P2CJCL1  BAL   R14,READPCH             READ A RECORD
         CLC   PCHAREA(2),SLASHES      IS THIS A JCL CARD
         BNE   P2RF                    NO - CHECK IF COPY OR SELECT
         ST    R2,R2SAV
         ST    R3,R3SAVE1
         SPACE
***********************************************************************
*                                                                     *
*              CHECK IF MEF CONVERSION IS NECESSARY                   *
*                                                                     *
***********************************************************************
         SPACE
         LA    R2,PCHAREA+63           LAST COLUMN OF SCAN
         LA    R3,PCHAREA              GET PCHF INPUT BUFFER ADDRESS
JCLCHECK CLI   4(R3),C'.'              REACHED DSNAME QUALIFIER
         BE    DSNCHECK                YES-CHECK IF QUALIFIER IS 'SYS1'
         LA    R3,1(R3)                POINT TO NEXT COLUMN ON CARD
         CR    R3,R2                   REACHED COLUMN 63
         BNH   JCLCHECK                NO-CONTINUE SCAN FOR QUALIFIER .
DOWRITE  TM    PARM,X'80'              APPLICATION FUNCTION REQUESTED
         BO    R23REST                 YES - DO NOT DO THE WRITE  M4001
         STM   R2,R3,RITESAVE
         LA    R3,PCHAREA              GET ADDRESS OF PCHF INPUT BUFFER
         BAL   R2,AMAWRITE             GO TO WRITE ROUTINE
R23REST  L     R3,R3SAVE1                                         M4001
         L     R2,R2SAV
         TM    MEFSW,X'80'             MEF CONTINUATION TO BE COPIED
         BNO   P2CJCL1                 NO-CONTINUE WRITING IEBCOPY JCL
         STM   R2,R3,RITESAVE
         LA    R3,MEFBUFF              GET ADDRESS OF MEF BUFFER
         BAL   R2,AMAWRITE             GO TO WRITE ROUTINE
         LM    R2,R3,RITESAVE
         NI    MEFSW,X'00'             TURN OFF MEF SW
         B     P2CJCL1                 CONTINUE WRITING IEBCOPY JCL
DSNCHECK CLC   0(5,R3),SYS1            IS THE QUALIFIER 'SYS1.'
         BE    DOWRITE                 YES-WRITE CARD (NO MEF)
         LA    R3,3(R3)                POINT TO '.' IN QUALIFIER
         BAL   R2,SYSGMEF              GO RESTRUCTURE DD CARD FOR MEF
         B     DOWRITE                 WRITE CARD AND MEF CONTINUATION
         EJECT
***********************************************************************
*                                                                     *
*              READ FORWARD TILL SAVED COPY CARD IS REACHED.          *
*              THIS IS TO IGNORE PREVIOUSLY ANALYZED CONTROL          *
*              CARDS AND GET TO THE COPY CARD FOR WHICH THERE         *
*              IS A MATCH.                                            *
*                                                                     *
***********************************************************************
         SPACE
P2RF     CLC   PCHAREA,NAMESTOR        IS THIS SAVED COPY STATEMENT
         BE    P2CCOPY                 YES - WRITE COPY CARD
         CLC   PCHAREA,INCSTORE        IS THIS MATCHED SELECT STATEMENT
         BE    P2COPYEX                YES-GO TO COPY EXIT
         B     P2CJCL1                 NO-READ NEXT RECORD
         SPACE
***********************************************************************
*                                                                     *
*              SAVE MATCHED SELECT IN ORDER TO                        *
*              FIND PROPER COPY CARD AND SKIP                         *
*              INTERVENING SELECT CARDS.                              *
*                                                                     *
***********************************************************************
         SPACE
P2RB     MVC   INCSTORE(80),PCHAREA    SAVE MATCHED SELECT CARD
         BAL   R14,POINTRTN            DO A POINT
         B     P2CJCL1                 CHECK FOR COPY CARD
         EJECT
***********************************************************************
*                                                                     *
*              OUTPUT COPY CARD IF NEEDED (GENERATE)                  *
*                                                                     *
***********************************************************************
         SPACE
*
P2CCOPY  EQU   *
         TM    DUPCOPY,X'80'           IDENTICAL COPY CARD SWITCH SET
         BO    P2CJCL1                 YES-CHECK FOR SELECT CARD
         OI    DUPCOPY,X'80'           SET IDENTICAL COPY CARD SWITCH
         TM    PARM,X'80'              APPLICATION FUNCTION REQUESTED
         BO    P2CJCL1                 YES - DO NOT DO THE WRITE
         STM   R2,R3,RITESAVE
         LA    R3,PCHAREA              GET ADDRESS OF PCHF INPUT BUFFER
         BAL   R2,AMAWRITE             GO TO WRITE ROUTINE
         LM    R2,R3,RITESAVE
         B     P2CJCL1                 READ NEXT RECORD
         SPACE
***********************************************************************
*                                                                     *
*              POSITION OF COPY CARD IS NOTED IF JCL                  *
*              HAS BEEN COPIED. THIS ALLOWS IT TO BE                  *
*              FOUND WITHOUT SEARCHING THROUGH THE                    *
*              PRECEDING CONTROL STATEMENTS. IF THE                   *
*              JCL HAS NOT BEEN COPIED, THE COPY CARD                 *
*              IS SAVED AND THE COPY SWITCH IS TURNED                 *
*              OFF (R6 SET TO 0).                                     *
*                                                                     *
***********************************************************************
         SPACE
P2COPYRT B     JCLCOPY3(R8)            IS THE JCL COPIED SWITCH SET
JCLCOPY3 B     P2STCOPY                NO - COPY JCL
         BAL   R14,NOTERTN             YES - NOTE POSITION OF COPY CARD
P2STCOPY MVC   NAMESTOR(80),PCHAREA    SAVE COPY CARD
         LA    R6,0                    RESET COPY SWITCH         S21995
         B     P2READ                  READ NEXT RECORD
         EJECT
***********************************************************************
*                                                                     *
*        PART III - ASSEMBLER ROUTINE                                 *
*                                                                     *
*                                                                     *
***********************************************************************
         SPACE 1                                                 A40797
ASMRTN   BAL   R14,NOTERTN             YES - NOTE POSITION OF    A40797
*                                      ASSEMBLY EXEC CARD        A40797
ASMCHK   OI    ASMSW,ASMMOD            INDICATE ASSEMBLY SEARCH  A40797
         B     CHKPARMS                CHECK PARAMETERS          A40797
         SPACE 1                                                 A40797
ASMCHK1  L     RA,MODTBL               POINT TO MODULE           A40797
ASMCMPM  CLC   0(8,RA),SYSLNAME        CHECK MODULE NAME MATCH   A40797
         BE    ASMFOUND                BR IF SO                  A40797
         LA    RA,10(RA)               MOVE TO NEXT MODULE ENTRY A40797
         CLI   0(RA),SPACE             Q. END OF TABLE           A40797
         BE    PGMRTN1                 YES. NO MATCH             A40797
         B     ASMCMPM                 CHECK NEXT ENTRY          A40797
         SPACE 1                                                 A40797
ASMFOUND MVI   8(RA),LETTERA           MARK ASSEMBLY MATCH       A40797
         OI    ASMSW,ASMPCH            SET ASSEM SW TO PUNCH JCL A40797
         B     RBJCL                   GO PUNCH ASSEMBLY JCL     A40797
         SPACE 1                                                 A40797
JCLCOPY4 CLC   PCHAREA(2),ENDCARD      IS THIS A /* CARD         A40797
         BE    PGMRTN1                 RESUME MAIN SEARCH        A40797
         TM    CONTSW1,EXECCONT       EXEC CONTINUATION EXPECTED Y01036
         BO    JCLREAD                 YES - BRANCH TO READ IT   Y01036
         B     JCLCOPY5                NO - USE OTHER READ       Y01036
         EJECT
***********************************************************************
*                                                                     *
*        END OF JOB ROUTINE                                           *
*              CHECK MODULE TABLE FOR MODULES THAT DID                *
*              NOT FIND ANY MATCH AND PRINT THEM                      *
*                                                                     *
***********************************************************************
         SPACE
EOJRTN   L     RA,MODTBL               OBTAIN ADDR OF MODULE NAME TABLE
         LA    R4,0                    MESSAGE HEAD NOT WRITTEN  S21995
EOJMLOOP CLI   0(RA),SPACE             END OF MODULE NAME TABLE  S21995
         BE    FILCLOSE                YES - CLOSE ALL FILES AND EXIT
         CLI   8(RA),LETTERA           CHECK IF ONLY FOUND ASMB  A40797
         BE    ASMSG                   THATS ALL - WRITE MESSAGE A40797
         CLI   8(RA),LETTERX           MATCH FOR THIS NAME       S21995
         BNE   MSGNOMOD                NO - WRITE MODULE NAME
INCREASE LA    RA,10(RA)               POINT TO NEXT NAME        S21016
         B     EOJMLOOP                CONTINUE SEARCH FOR NON-MATCHES
         SPACE
***********************************************************************
*                                                                     *
*              CLOSE ALL FILES AND RETURN TO SYSTEM                   *
*                                                                     *
***********************************************************************
         SPACE
RET16    MVI   RETCDE,RETCDE16         SET UP RETURN CODE 16     A48711
FILCLOSE  EQU   *                                               SA55373
         L     R15,BUFFADDR        ADDR OF INPUT BUFFER TO FREE SA55373
         LTR   R15,R15             IS THE ADDR ZERO?            SA55373
         BZ    FILCLOS             YES,DON'T TRY TO FREE CORE   SA55373
         LA    RA,PCHFDCB          ADDR OF INPUT DCB FOR LENGTH SA55373
         LH    R0,DCBBLKSI      INPUT BUFFER LNG USED IN GETMAIN A55373
         FREEMAIN R,LV=(0),A=BUFFADDR FREE READ BUFFERS         SA55373
FILCLOS  CLOSE (MODFDCB,,PCHFDCB,,OUTFDCB,,MSGDCB)              SA55373
         TM    PARM,X'80'              APPLICATION FUNC REQUEST  S21995
         BNO   FREETBLS                NO - RETURN TO SYSTEM    SA55373
         L     R1,MODTBL               MODULE NAME TABLE ADDRESS S21995
         CLI   0(R1),X'FF'             TABLE EMPTY SWITCH SET    S21995
         BE    DELETMOD                YES-RETURN TO SYSTEM     SA55373
         MVI   BRPRMLST,CLSEDCBS       DCBS TO BE CLOSED        YA01764
         LA    R1,BRPRMLST             ADDR OF PARAMETER LIST    S21995
         L     R15,PTF01               GET ADDRESS OF AMAPTF01   S21995
         BALR  R14,R15                 AMAPTF01 (CLOSE DCBS)     S21995
DELETMOD EQU   *                   DELETE APPL FUNC MODULES     SA55373
         DELETE EPLOC=LOAD01       DELETE IMAPTF01              SA55373
         DELETE EPLOC=LOAD02       DELETE IMAPTF02              SA55373
         DELETE EPLOC=LOADOVR      DELETE IEWSZOVR              SA55373
FREETBLS EQU   *                   FREE THE WORK TABLES         SA55373
         L     R15,OVTABADR        ADDRESS OF OVERLAY TABLE     SA55373
         LTR   R15,R15             IS THERE CORE FOR TABLES?    SA55373
         BZ    RET                 NO,GO RETURN TO CALLER       SA55373
         FREEMAIN E,LV=26800,A=OVTABADR                         SA55373
         L    R15,MODTBL          STARTING ADDR OF MODULE TABLE SA55373
         SH   R15,TWO             CALC ADDR OF THE CORE TO FREE SA55373
         ST   R15,MODTBL          STORE ADDRESS FOR FREEMAIN    SA55373
         FREEMAIN E,LV=3624,A=MODTBL FREE MODULE TABLE          SA55373
         SPACE
***********************************************************************
*                                                                     *
*              STANDARD RETURN CONVENTION                             *
*                                                                     *
***********************************************************************
         SPACE
RET      L     R13,4(R13)              PTR TO CALLER SAVE AREA   S21995
         L     R14,12(R13)             RESTORE CALLER REG 13     A48711
         SR    R15,R15                 ZERO REGISTER 15          A48711
         IC    R15,RETCDE              INSERT RETURN CODE        A48711
         LM    R0,R12,20(R13)          RESTORE REGS 0 TO 12      A48711
         MVI   12(R13),X'FF'                                     S21995
         BR    R14                     RETURN VIA REGISTER 14    S21995
         EJECT
***********************************************************************
*                                                                     *
*              THIS CODE IS ENTERED WHEN AN I/O ERROR OCCURS          *
*                                                                     *
***********************************************************************
         SPACE
SYNADEXT SYNADAF ACSMETH=BSAM                                    S21995
         MVC   MSGBUFF+41(78),42(R1)   MOVE SYNAD MSG TO BUFFER  S21995
         MVC   MSGBUFF(40),MSGAREA4    MOVE MESSAGE ID TO BUFFER S21995
         OI    PRINTSW,X'80'           SET SYNAD SWITCH          S21995
         B     WRTPRINT                WRITE MESSAGE             S21995
SYNADRLS SYNADRLS                      RELEASE SYNAD BUFFER      S21995
         B      RET16                  PERMANENT I/O ERROR       A48711
         EJECT
***********************************************************************
*                                                                     *
*              THIS SECTION OF CODE BUILDS THE VARIOUS MESSAGES       *
*              REFLECTIONG DIFFERENT ERROR CONDITIONS.                *
*                                                                     *
***********************************************************************
         SPACE
NOBLKSZ  MVC   MSGBUFF(67),AMA009I     MOVE AMA009I TO BUFFER    S21995
         B     WRTPRINT                WRITE MESSAGE AND EXIT    S21995
***********************************************************************
MESSAGE  EQU   *
         MVI   SWITCH1,X'80'           MODULE NAME TBL OVERFLOW  S21995
READMOD1 GET   MODFDCB,MODAREA         FLUSH MODF INPUT          S21995
         B     READMOD1                FLUSH REMAINING INPUT     S21995
MESSAGE1 MVC   MSGBUFF(78),MSGAREA3    MSG AMA001I TO BUFFER     S21995
         B     WRTPRINT                WRITE MESSAGE AND RETURN  S21995
***********************************************************************
MODFRITE MVC   MSGAREA+40(4),MODFDD    MOVE 'MODF' DDNAME        S21995
         B     MESSAGE2                WRITE MESSAGE AMA002I     S21995
PCHFRITE MVC   MSGAREA+40(4),PCHFDD    MOVE 'PCHF' DDNAME        S21995
         B     MESSAGE2                WRITE MESSAGE AMA002I     S21995
OUTFRITE MVC   MSGAREA+40(4),OUTFDD    MOVE 'OUTF' DDNAME        S21995
         B     MESSAGE2                WRITE MESSAGE AMA002I     S21995
MSGWRITE EQU   *                                                 S21995
         LA    R1,WTOPROG              SET UP WTO PARAMETER LIST S21995
         WTO   MF=(E,(1))              ISSUE WTO FOR 'PRINT' DD  S21995
         B     RET16                   CLOSE ALL FILES AND EXIT  A48711
WTOPROG  WTO   'AMA002I  DATA SET ASSOCIATED WITH THE //PRINT DD CARD CX
               ANNOT BE OPENED',MF=L,ROUTCDE=11,DESC=6           S21995
MESSAGE2 MVC   MSGBUFF(73),MSGAREA     MSG AMA002I TO BUFFER     S21995
         B     WRTPRINT                WRITE ERROR MESSAGE       S21995
***********************************************************************
STG1MSG  MVC   MSGBUFF(51),MSGAREA5    MOVE MESSAGE AMA004I      S21995
         B     WRTPRINT                CLOSE DCBS AND RETURN     S21995
***********************************************************************
AMA008WR MVC   MSGBUFF(80),MODAREA     MOVE CARD IN ERROR        S21995
         OI    PRINTSW,X'08'           SET RETURN SWITCH         S21995
         B     WRTPRINT                WRITE CARD IN ERROR       S21995
AMA0080  NI    PRINTSW,X'F7'           TURN OFF RETURN SWITCH    S21995
         MVC   MSGBUFF(43),AMA008                                S21995
         B     WRTPRINT                                          S21995
***********************************************************************
AMA011WR MVC   MSGBUFF(61),AMA011      MOVE MESSAGE AMA011I      S21016
         B     WRTPRINT                WRITE MESSAGE AND EXIT    S21016
***********************************************************************
AMA012WR MVC   MSGBUFF(71),AMA012      MOVE MESSAGE AMA012I      S21995
         MVC   MSGBUFF+49(8),LMODETC   MOVE MODULE NAME TO BUFF  S21995
         B     WRTPRINT                WRITE ERROR MESSAGE       A45397
AMA014W1 SR    R15,R15             PREPARE TO ZERO INPUT POINTER A55373
         ST    R15,BUFFADDR       GETMAIN NOT GOOD,ZERO PTR     SA55373
AMA014W  MVC   MSGBUFF(69),AMA014I     MOVE MESSAGE AMA014I     SA55373
         SPACE
***********************************************************************
*                                                                     *
*              MESSAGE OUTPUT ROUTINE                                 *
*                                                                     *
***********************************************************************
         SPACE
WRTPRINT WRITE MSGDECB4,SF,MSGDCB,MSGBUFF                        S21995
         CHECK MSGDECB4                                          S21995
         MVC   MSGBUFF(121),MSGBUFF-1  BLANK MESSAGE BUFFER      S21995
         TM    PRINTSW,X'08'           RETURN SWITCH SET         S21995
         BO    AMA0080                 YES - RETURN TO AMA0080   S21995
         TM    PRINTSW,X'80'           SYNAD SWITCH SET          S21995
         BO    SYNADRLS                YES - RETURN TO SYNADRLS  S21995
         B     RET16                   CLOSE FILES AND EXIT      A48711
***********************************************************************
ASMSG    CLI   RETCDE,RETCDE4          RETURN CODE MORE THAN 4   A40797
         BH    RETANOCG                YES - DO NOT CHANGE       A40797
         MVI   RETCDE,RETCDE4          SET RETURN CODE 4         A40797
RETANOCG MVC   MSGBUFF(58),AMA015I     MOVE IN MSG SKELETON      A40797
         SR    R4,R4                   RESET HEADER WRITTEN SW   A40797
         B     MSGRTNC                 GO FILL IN AND WRITE MSG  A40797
MSGNOMOD B     MODWRITE(R4)            HAS MESSAGE HEAD BEEN WRITTEN
MODWRITE B     MSGHEAD                 NO-WRITE MESSAGE HEAD AMA000I
MSGRTNC  MVC   MSGBUFF+15(8),0(RA)     MODULE NAME TO BUFFER     S21995
         WRITE MSGDECB2,SF,MSGDCB,MSGBUFF WRITE MODULE NAME      S21995
         CHECK MSGDECB2                                          S21995
         B     INCREASE                SEARCH FOR NON-MATCHES    S21995
MSGHEAD  MVC   MSGBUFF(58),MSGAREA1    MOVE MESSAGE TO BUFFER    A40797
         CLI   RETCDE,RETCDE4          RETURN CODE MORE THAN 4   A48711
         BH    RETNOCHG                YES - DO NOT CHANGE       A48711
         MVI   RETCDE,RETCDE4          SET RETURN CODE 4         A48711
RETNOCHG WRITE MSGDECB1,SF,MSGDCB,MSGBUFF WRITE MESSAGE AMA000I  A48711
         CHECK MSGDECB1
         MVC   MSGBUFF(121),MSGBUFF-1  BLANK MESSAGE BUFFER      S21995
         LA    R4,4                    INDICATE MESSAGE WRITTEN  S21995
         B     MSGRTNC                 WRITE MODULE NAME
         EJECT
***********************************************************************
*                                                                     *
*              THIS ROUTINE SEARCHES THE STAGE 1 OUTPUT TAPE.         *
*              IT GOES TO THE PROPER ROUTINE AS DETERMINED            *
*              BY THE EXEC CARD FOUND.                                *
*                                                                     *
***********************************************************************
         SPACE
PGMRTN1  NI    ASMSW,TURNOFF           CLEAR ASSEMBLY SWITCH     A40797
         MVC   SYSLNAME(8),BLANK       SET BUFFER TO BLANKS      A40797
         LA    R9,PGMRTN               RESET R9 FOR SEARCH       A40797
         SPACE
PGMRTN   BAL   R14,READPCH             READ RECORD(STAGE I TAPE) S21995
         LA    R3,PCHAREA              OBTAIN BUFFER ADDRESS     S21995
         CLC   0(2,R3),SLASHES         IS THIS A JCL STATEMENT   S21995
         BCR   7,R9                    NO-RETURN TO NON JCL ADDR S21995
         BAL   R2,CHKSPACE             POINT TO FIRST OPERAND    S21995
         CLC   0(4,R3),EXECCARD        IS THIS AN EXEC STATEMENT S21995
         BNE   PGMRTN                  NO  - READ NEXT RECORD    S21995
         BAL   R2,CHKSPACE             POINT TO NEXT OPERAND     S21995
         CLC   0(11,R3),IEBCOPY        IS THIS PGM=IEBCOPY       S21995
         BE    PART2                   YES - GO TO PART2         S21995
         CLC   0(5,R3),LINKSPRC        IS THIS LINKS PROCEDURE   Y01036
         BE    EXECRTN                 YES - GO TO PART1         S21995
         CLC   0(11,R3),IEHMOVE        IEHMOVE STEP              S21995
         BE    STG1MSG                 YES - INVALID TAPE - MSG  S21995
         TM    PARM,APPLFUNC           APPLICATION FUNC REQUEST  A40797
         BO    PGMRTN                  YES - READ NEXT CARD      A40797
         CLC   0(4,R3),ASMSPROC        IS THIS ASMS PROCEDURE    Y01036
         BE    ASMRTN                  YES - GO TO PART III      A40797
         B     PGMRTN                  READ NEXT RECORD          S21995
         EJECT
***********************************************************************
*                                                                     *
*       SUBROUTINE TO FIND NEXT OPERAND ON CARDS                      *
*                                                                     *
***********************************************************************
         SPACE
CHKSPACE CLI   0(R3),SPACE              CHARACTER A BLANK        S21995
         BE    CHKNOTSP                 YES - SKIP TO NON-BLANK  S21995
         LA    R3,1(R3)                                          S21995
         B     CHKSPACE                 SKIP NON-BLANKS          S21995
CHKNOTSP LA    R3,1(R3)                                          S21995
         CLI   0(R3),SPACE              CHARACTER A BLANK        S21995
         BE    CHKNOTSP                 YES - SKIP BLANKS        S21995
         BR    R2                       NO - RETURN TO CALLER    S21995
         EJECT
***********************************************************************
*                                                                     *
*              THIS ROUTINE HANDLE SYSGEN WITH THE                    *
*              MULTI-PROGRAMMING ENVIRONMENT FEATURE.                 *
*              IT IS USED TO RESTRUCTURE DD CARDS SO AS               *
*              TO MAKE THE FIRST LEVEL QUALIFIER OF EACH              *
*              DSNAME 'SYS1.'.                                        *
*                                                                     *
***********************************************************************
         SPACE
SYSGMEF  EQU   *
         TM    PARM,X'80'              APPLICATION FUNC REQUEST  S21995
         BCR   1,R2                    YES-DO NOT MODIFY DD CARD S21995
         ST    R2,R2SAV2
         ST    R4,R4SAVE
         ST    R9,R9SAVE
         CLC   0(5,R3),SYS1            IS THE QUALIFIER 'SYS1.'
         BCR   8,R2                    YES-RETURN TO CALLER
         MVI   MEFBUFF,C' '
         MVC   MEFBUFF+1(79),MEFBUFF   CLEAR THE MEF BUFFER
         MVC   MEFBUFF(2),SLASHES      MOVE '//' INTO BUFFER
         MVC   MEFBUFF+15(4),CHARDSN   MOVE 'DSN=' INTO BUFFER
         MVC   MEFBUFF+19(5),SYS1      MOVE 'SYS1.' INTO BUFFER
         LA    R9,MEFBUFF+24           POINT TO DSNAME POSITION (MEF)
PERLOOP  EQU   *
         LA    R3,1(R3)                POINT TO DSNAME ON CARD
         CLI   0(R3),C'.'              HAS PERIOD BEEN FOUND
         BNE   PERLOOP                 NO - CONTINUE SEARCH FOR PERIOD
         LA    R3,1(R3)                YES-POINT ONE CHAR BEYOND PERIOD
MOVEDSN  EQU   *
         MVC   0(1,R9),0(R3)           MOVE DSNAME TO MEF BUFFER
         LA    R9,1(R9)
         LA    R3,1(R3)
         CLI   0(R3),C','              REACHED END OF DSNAME OPERAND
         BE    CHKCONT                 YES-DSNAME MOVE IS COMPLETE
         CLI   0(R3),C' '              IS NEXT CHAR A BLANK
         BNE   MOVEDSN                 NO - FINISH MOVING DSNAME
CHKCONT  EQU   *
         MVC   TEMPBUFF(72),PCHAREA    PLACE CARD IN TEMPORARY BUFFER
         MVI   PCHAREA,C' '
         MVC   PCHAREA+1(71),PCHAREA   CLEAR CARD BUFFER
         LA    R3,TEMPBUFF
         LA    R4,PCHAREA
DSNCHK   EQU   *
         CLC   0(3,R3),CHARDSN         FOUND DSNAME KEYWORD
         BE    SKIPDSN                 YES - SKIP DSNAME
         MVC   0(1,R4),0(R3)           NO-MOVE BACK TO CARD
         LA    R3,1(R3)
         LA    R4,1(R4)
         B     DSNCHK                  CONTINUE TO MOVE LETTERS BACK
SKIPDSN  EQU   *
         BCTR  R3,0                    POINT TO BEFORE DSNAME
         CLI   0(R3),C' '              IS DSNAME FIRST ON CARD
         BNE   PASSDSN                 NO - DO NOT SET DSN FIRST SWITCH
         LA    R3,1(R3)                POINT BACK TO DSNAME
         OI    MEFSW,X'40'             INDICATE DSN FIRST ON CARD
PASSDSN  EQU   *
         LA    R3,4(R3)                CYCLE PAST DSN=
SKIPDSN1 EQU   *
         CLI   0(R3),C','              REACHED END OF DSNAME OPERAND
         BE    MOVEREST                YES - MOVE REMAINDER OF CARD
         CLI   0(R3),C' '              IS THIS CHARACTER A BLANK
         BE    MOVEDONE                YES - MOVE IS COMPLETED
         LA    R3,1(R3)
         B     SKIPDSN1                CONTINUE TO SKIP DSNAME OPERAND
MOVEREST EQU   *
         LA    R3,1(R3)
         CLI   0(R3),C' '              ANY MORE AFTER DSN
         BE    MOVECOMM                NO - DSNAME LAST ON CARD SA55374
MOVREST1 EQU   *
         MVC   0(1,R4),0(R3)           MOVE REST OF DD CARD BACK TO
*                                      PCHF BUFFER
         LA    R3,1(R3)
         LA    R4,1(R4)
         CLI   0(R3),C' '              FINISHED WITH MOVE OF CARD
         BNE   MOVREST1                NO - CONTINUE MOVE
         CLI   1(R3),APOSTR            APOSTROPHE AFTER BLANK    Y01036
         BE    MOVREST1                YES - CONTINUE MOVE       Y01036
         B     LOC                     YES - CHECK FOR CONTINUATION
MOVECOMM EQU   *                  MOVE IN ',' IF NEEDED         SA55374
         TM    MEFSW,X'40'        IS DSN 1ST & LAST ?           SA55374
         BNO   LOC                NO,DO NOT MOVE IN THE COMMA   SA55374
         MVI   0(R9),C','         MOVE IN CONTINUATION COMMA    SA55374
DSNCONT  EQU  *
         LA    R9,MEFBUFF+14      ADDRESS OF START OF DSN IN MEF A55374
         BCTR  R4,0               DECR PTR TO PCHAREA FOR MOVE  SA55374
DSNCONT1 EQU   *                  MOVE IN DSN =                 SA55374
         LA    R9,1(R9)           POINT TO NEXT CHARACTER TO MOVE 55374
         LA    R4,1(R4)           PT TO NEXT AREA TO MOVE INTO  SA55374
         MVC   0(1,R4),0(R9)      MOVE IN NEXT CHARACTER        SA55374
         CLI   0(R9),C' '         DID WE MOVE A BLANK           SA55374
         BE    CLRSW              YES,MOVE IS COMPLETE          SA55374
         CLI   0(R9),C','         DID WE MOVE A COMMA?          SA55374
         BNE   DSNCONT1           NO,CONTINUE MOVING            SA55374
         MVI   PCHAREA+71,C'X'    MOVE IN CONTINUATION          SA55374
CLRSW    EQU   *                                                SA55374
         NI    MEFSW,X'00'             CLEAR SWITCH
         B     LOADR2                  RETURN TO CALLER
MOVEDONE EQU   *
         TM    MEFSW,X'40'             IS DSNAME FIRST ON CARD
         BO    DSNCONT                 YES - IT'S ALSO LAST ON CARD
LOC      EQU   *
         NI    MEFSW,X'00'             CLEAR SWITCH
         BCTR  R4,0                    POINT TO LAST CHAR IN PCHAREA
         CLI   0(R4),C','              IS CONTINUATION ALREADY THERE
         BE    MOVECONT                YES - MOVE IN CONTINUATION
         LA    R4,1(R4)
         MVI   0(R4),C','              MOVE COMMA TO PCHAREA FOR CONTIN
MOVECONT EQU   *
         MVI   PCHAREA+71,C'X'         MOVE IN CONTINUATION CHARACTER
         BCTR  R3,0                    DECREMENT BUFFER POINTER  S21995
         CLI   0(R3),C','              CONTINUATION REQUIRED ON CARD
         BNE   MEF                     NO - RETURN               S21995
         MVI   MEFBUFF+71,C'X'         MAKE CONTINUATION ON NEW CARD
         MVI   0(R9),C','              MOVE IN COMMA FOR CONTINUATION
MEF      EQU   *
         OI    MEFSW,X'80'             INDICATE MEF
LOADR2   EQU   *
         L     R2,R2SAV2
         L     R4,R4SAVE
         L     R9,R9SAVE
         L     R3,R3SAVE1              RESTORE R3                Y01036
         BR    R2                      RETURN TO CALLER
         EJECT
***********************************************************************
*                                                                     *
*       THE FOLLOWING WRITE IS A COMMON WRITE FOR THE OUTF FILE       *
*                                                                     *
***********************************************************************
         SPACE
AMAWRITE WRITE  OUTFDECB,SF,OUTFDCB,(R3)
         CHECK  OUTFDECB
         TM    PARM,APPLFUNC           APPLICATION FUNCTION      Y01006
         BCR   1,2                     YES - BRANCH BACK         Y01006
         MVC   MSGBUFF(80),0(R3)       MOVE TO OUTPUT BUFFER     Y01006
         WRITE MSGDECB3,SF,MSGDCB,MSGBUFF  WRITE TO MSG DATA SET Y01006
         CHECK MSGDECB3                                          Y01006
         MVC   MSGBUFF(121),MSGBUFF-1  CLEAR BUFFER              Y01006
         BR   R2                       RETURN TO THE CALLER      Y01006
         EJECT
***********************************************************************
*                                                                     *
*        READ STAGE 1 TAPE AND/OR MOVE LOGICAL RECORD INTO PCHAREA    *
*                                                                     *
***********************************************************************
         SPACE
READPCH  STM   14,12,READSTOR          SAVE THE REGISTERS
         LA    RA,PCHFDCB              GET PCHFDCB ADDRESS FOR BASE
         TM    POINTBIT,X'80'          HAS POINT JUST BEEN DONE
         BO    POINTRD                 YES - READ THE POINTED BLOCK
         SR    R2,R2
         C     R2,TEMPCNT              SHOULD A NEW BLOCK BE READ
         BNE   MOVTOPCH                NO - MOVE RECORD TO PCHAREA
POINTRD  L     R3,BUFFADDR             LOAD ADDRESS OF READ BUFFER
         READ  PCHDECB,SF,PCHFDCB,(3)  READ A BLOCK
         CHECK PCHDECB
         SPACE
***********************************************************************
*       USE RESIDUAL COUNT FOR CALCULATING NO. OF LOGICAL RECS  A38341*
*       SHORT BLOCKS MAY OCCUR DUE TO CONCATENATED INPUT        A38341*
*       ALSO, RESET RECCNT TO REFLECT NO. OF LOGICAL RECS READ  A38341*
*                                                                     *
***********************************************************************
         SPACE
         L     R4,DCBIOBA              GET THE IOB ADDRESS
         LH    R7,22(R4)               LOAD RESIDUAL COUNT FROM CSW
         LH    R8,DCBLRECL             GET LRECL FOR DIVISOR
         LH    R9,DCBBLKSI             GET THE BLKSIZE
         SR    R9,R7                   SUBTRACT RESIDUAL FROM BLKSIZE
         LR    R7,R9                   R7 = NUMBER OF BYTES IN BUFFER
         SR    R6,R6                   CLEAR DIVIDEND REG
         DR    R6,R8                   DIVIDE RESIDUAL COUNT BY LRECL
         ST    R7,RECCNT               NO. OF LOGICAL RECS READ  A38341
         TM    POINTBIT,X'80'          HAS POINT BEEN DONE       A38341
         BO    MOVTOPCH                YES- DON'T CHANGE TEMPCNT A38341
         ST    R7,TEMPCNT              INIT NO. OF RECS REMAINING
MOVTOPCH L     R5,RECCNT               GET NUMBER OF LOG RECS LAST READ
         S     R5,TEMPCNT              GET MULTIPLICATION FACTOR
         L     R4,BUFFADDR             LOAD THE BUFFER ADDRESS
         SR    R6,R6                   CLEAR REGISTERS
         LH    R7,DCBLRECL             GET THE LOGICAL RECORD LENGTH
         MR    R6,R5                   R7 CONTAINS INDEX INTO BUFFER
         AR    R4,R7                   ADD INDEX TO START OF BUFFER
         LH    R6,DCBLRECL             LOAD THE LOGICAL RECORD LENGTH
         BCTR  R6,0                    DECREMENT BY 1 FOR THE EXECUTE
         EX    R6,MOVLRECL             MOVE THE LOGICAL REC TO PCHAREA
         L     R8,TEMPCNT              PICK UP COUNT OF REMAINING RECS
         BCTR  R8,0                    DECREMENT TEMPCNT FOR REC MOVED
         ST    R8,TEMPCNT              AND RESTORE NEW COUNT
         NI    POINTBIT,X'00'          TURN OFF POINT INDICATOR
         LM    14,12,READSTOR          RESTORE THE REGS
         BR    R14                     RETURN TO CALLER
         EJECT
***********************************************************************
*                                                                     *
*    THIS SUBROUTINE DOES A NOTE TO SAVE THE LAST BLOCK ADDRESS READ  *
*                                                                     *
***********************************************************************
         SPACE
NOTERTN  STM   14,12,READSTOR          SAVE ALL REGISTERS
         NOTE  PCHFDCB                 NOTE THE LAST BLOCK READ
         ST    R1,BLKADR               SAVE THE BLOCK ADDRESS FOR POINT
         L     R2,TEMPCNT              LOAD NUMBER OF RECORDS LEFT
         LA    R2,1(R2)                POINT TO RECORD JUST NOTED
         ST    R2,NOTECNT              SAVE IT FOR A LATER READ OF REC
         LM    14,12,READSTOR          RESTORE THE REGISTERS
         BR    R14                     RETURN TO THE CALLER
         SPACE
***********************************************************************
*                                                                     *
*  THIS SUBROUTINE DOES A POINT TO POSITION A BLK ADDRESS THAT WAS    *
*  RETRIEVED FROM A PREVIOUS NOTE.  THE TEMPCNT IS THEN MADE EQUAL    *
*  TO THE NOTECNT SO THAT AFTER THE NEXT READ, THE REQUIRED RECORD    *
*  FOR THE POINT WILL BE MOVED INTO PCHAREA.                          *
*                                                                     *
***********************************************************************
         SPACE
POINTRTN STM   14,12,READSTOR          SAVE ALL REGISTERS
         POINT PCHFDCB,BLKADR          POINT TO BLK FROM PREVIOUS NOTE
         L     R2,NOTECNT              MAKE THE TEMPCNT
         ST    R2,TEMPCNT              EQUAL TO THE NOTECNT
         OI    POINTBIT,X'80'          INDICATE POINT HAS BEEN DONE
         LM    14,12,READSTOR          RESTORE THE REGISTERS
         BR    R14                     RETURN TO THE CALLER
         EJECT
***********************************************************************
*                                                                     *
*              EQUATES                                                *
*                                                                     *
***********************************************************************
         SPACE
R0       EQU   0
R1       EQU   1
R2       EQU   2                       BAL  CHKSPACE RTN
R3       EQU   3                       SCAN THRU INPUT
R4       EQU   4                       CHANGE-REPLACE RTN
R5       EQU   5                       STORE CHANGE-REPLACE
R6       EQU   6                       ENTRY-ALIAS SW
R7       EQU   7                       SCAN SYSLMOD
R8       EQU   8                       JCL-SW
R9       EQU   9                       SCAN THRU OUTPUT
RA       EQU   10                      STORE MODULE NAMES
RB       EQU   11                      SCAN THRU MOD WORK
R11      EQU   11                      BASE REGISTER
R12      EQU   12                      BASE REGISTER
R13      EQU   13                      SAVE AREA POINTER
R14      EQU   14
R15      EQU   15
TURNOFF  EQU   X'00'                   TO TURN OFF FLAGS
SPOOLUT2 EQU   X'01'                   SPOOL TO WORKFILE FLAG
SPOOLI   EQU   X'02'                   SPOOL TO OUTF FLAG
LINK     EQU   X'03'                   INVOKE SERVICE PROG FLAG  Y01983
CLSEDCBS EQU   X'04'                   CLOSE DCBS FLAG           Y01983
SPOOLS   EQU   X'05'                   SPOOL OBJ FOR MOVE/COPY MODULE
*                                                                Y01983
PARMCHEK EQU   X'06'                   CHECK FOR PARAMETERS FLAG Y01983
OPENBIT  EQU   X'10'                   USED TO TEST DCB OPEN FLAG
LETTERX  EQU   C'X'                                              S21995
ABLANK   EQU   C' '                                              S21995
PARNLEFT EQU   C'('                                              S21995
LETERS   EQU   C'S'                                              S21995
LETTERN  EQU   C'N'                                              S21995
LETERC   EQU   C'C'                                              S21995
LETTERR  EQU   C'R'                                              S21995
LETTERA  EQU   C'A'                                              S21995
LETTERE  EQU   C'E'                                              S21995
PARNRITE EQU   C')'                                              S21995
COMMA1   EQU   C','                                              S21995
SPACE    EQU   C' '                                              S21995
RETCDE16 EQU   X'10'                   TO SET RETURN CODE        A48711
RETCDE4  EQU   X'04'                   TO SET RETURN CODE        A48711
EXECCONT EQU   X'80'                   EXEC CONTINUATION SWITCH  Y01036
HEX00    EQU   X'00'                                             Y01036
APPLFUNC EQU   X'80'              APPLICATION FUNCTION REQUESTED Y01036
ASMMOD   EQU   X'01'                   WORKING ON ASM SEARCH     A40797
ASMPCH   EQU   X'02'                   NOW PUNCHING ASM JCL      A40797
DSSSW    EQU   X'80'                   DSS SWITCH                Y01045
APOSTR   EQU   C''''                   APOSTROPHE                Y01036
CHRCONT  EQU   X'08'                 CHANGE-REPLACE CONTINUATION Y01983
CPYDSS   EQU   X'08'                   DSS SWITCH                Y01045
         SPACE
***********************************************************************
*                                                                     *
*              CONSTANTS AND STORAGE ALLOCATION                       *
*                                                                     *
***********************************************************************
         SPACE
POINTBIT DC    X'00'                   POINT INDICATOR
SWITCH1  DC    X'00'
TWO      DC    H'2'                    ADJUSTS ADDRESS TO FREE  SA55373
         DS    0H
MOVLRECL MVC   PCHAREA(0),0(R4)        MOVE RECORD TO PCHAREA
PRINTSW  DC    X'00'                                             S21995
MEFSW    DC    X'00'                                             S21995
READSTOR DS    15F                     INTERNAL REGISTER SAVE AREA
BUFFADDR DC    F'0'                    ADDRESS OF READ BUFFER
RECCNT   DC    F'0'                    NUMBER OF LOGICAL RECORDS READ
TEMPCNT  DC    F'0'                    NUMBER OF LOG RECS REMAINING
NOTECNT  DC    F'0'                    INDEX INTO BUFFER FOR NOTED REC
TABLEND  DC    F'0'                                              S21995
IDENTEND DC    F'0'                                              S21016
OVLYEND  DC    F'0'                                              S21995
RITESAVE DS    3F                                                S21995
BLKADR   DS    F
ZEROES   DC    C'00000000'                                        M4757
DSNPNTR  DS    F
TEMPBUFF DS    CL80
MEFBUFF  DS    CL80
R9SAVE   DS    F
R2SAV    DS    F
R3SAV    DS    F
R4SAVE   DS    F
R5SAVE   DS    F
R9SAV    DS    F
MODSPACE DC    C' '
MODAREA  DS    CL80                    MODF INPUT BUFFER
         DC    C'? '                   USED TO END BLANK INPUT   S21995
SSIAREA  DC    CL80' '                                           S21995
PCHAREA  DS    CL80
BLANKS   DC    X'4040404040404040'     USED TO COMPLETE MVC FROM
*                                 SYSLMOD AREA--MUST BE AFTER PCHAREA
INCSTORE DS    CL80
NAMESTOR DS    CL80
OUTAREA1 DS    0CL80
         DC    C'  '
         DC    C'INCLUDE '
LIBETC   DC    C' '
LIBETCB  DS    CL69
OUTAREA2 DS    0CL80
         DC    C'  INCLUDE  SYSLMOD('
LMODETC  DC    C' '
LMODETCB DS    CL70
P2OUT    DS    0CL80
         DC    C'  SELECT '                                       M0868
P2MBR    DC    C'MEMBER=('                                        M0868
P2DATA   DS    CL63
BLANKSW  DC    C' '
COMMAR   DC    C',R))'
SYS1     DC    C'SYS1.'
MODFDD   DC    C'MODF'
PCHFDD   DC    C'PCHF'
OUTFDD   DC    C'OUTF'
         DC    C' '                    MUST BE BEFORE MSGBUFF    S21995
MSGBUFF  DC    CL121' '                                          S21995
MSGAREA  DC    C'AMA002I  DATA SET ASSOCIATED WITH THE //         DD C'
         DC    C'ARD CANNOT BE OPENED'                           S21995
SSICARD  DC    C'SETSSI'                                         S21995
MSGAREA1 DC    C'AMA000I  THE FOLLOWING MODULE(S) DID NOT FIND A MATCH'
         DC    CL5'     '              BLANK AFTER MSG AMA015I   A40797
MSGAREA3 DC    C'AMA001I  INPUT MODULE TABLE HAS OVERFLOWED '    S21995
         DC    C'BREAK INPUT INTO TWO JOBS AND RERUN'            S21995
MSGAREA4 DC    C'AMA003I UNCORRECTABLE I/O ERROR OCCURRED'       S21995
         DS    0F                                                S21995
MSGAREA5 DC    C'AMA004I  UNIDENTIFIED FORMAT ON SYSGEN STAGE 1 TAPE'
AMA008   DC    C'AMA008I  THE PRECEDING STATEMENT IS INVALID'    S21995
AMA009I  DC    C'AMA009I  AMAPTFLE TERMINATED; NO BLOCKSIZE ON THE '
         DC    C'PCHF DD STATEMENT.'                             S21995
AMA011   DC    C'AMA011I  NUMBER OF IDENTIFY CARDS IN INPUT STREAM '
         DC    C'EXCEEDS 150'                                    S21016
AMA012   DC    C'AMA012I  OVERLAY STRUCTURE DEFINITION FOR MODULE '
         DC    C'         EXCEEDS LIMIT'                         S21995
AMA014I  DC    C'AMA014I INSUFFICIENT MAIN STORAGE FOR PROCESSING,'
         DC    C' AMAPTFLE TERMINATED'                           A45397
AMA015I  DC    CL58'AMA015I MODULE XXXXXXXX FOUND MATCH ON ASSEMBLY STEX
               P ONLY.'                                          A40797
JOBCARD  DS    0CL80
         DC    C'//SYSGENS JOB  1,''SYSTEM GENERATION'',MSGLEVEL=(1,1)'
         DC    C'                             '
MODSTORE DS    CL8
SLASHES  DC    C'//'
BLANK    DC    C'        '
OVLYREC  DS    0F
OVNOGO   DC    X'00'                   OVERLAY NO GO SWITCH      S21995
         DC    AL3(0)                  ADDRESS OF OVERLAY TABLE  S21995
SYSLSAVE DS    CL80                    SAVE AREA FOR "/*" OUTPUT
CONTSW1  DC    X'00'                   SYSLMOD CONTINUATION SWITCH
CONTSW2  DC    X'00'                   INDICATES AN OVERLAY/INSERT CARD
*                                      HAS A CONTINUATION/COMMENT CARD
NAMESWCH DC    X'00'                   USED TO INDICATE "NAME" WRITTEN
SLASHSW  DC    X'00'                   USED TO NOTIFY THE NAME ROUTINE
*                                      THAT IT WAS ENTERED FROM THE /*
*                                      ROUTINE AND MUST RETURN
R2SAV2   DS    F
SAVE4    DS    F
SAVE5    DS    F
R3SAVE1  DC    F'0'
R3SAV2   DC    F'0'                                              Y01036
SYSLNAME DC    C'           '          MEMBER NAME(R) AREA
R9SAVE1  DC    F'0'
IEHMOVE  DC    C'PGM=IEHMOVE'                                    995200
AOVLYREC DC    F'14800'                LENGTH OF OVLYREC BUFFER  S21995
IDENTSZ  DC    F'12000'                LENGTH OF IDENTIFY TABLE  S21016
AMODTBL  DC    F'1500'                 LENGTH OF MODTBL BUFFER   S21016
ASSITBL  DC    F'1200'                 LENGTH OF SSITABLE BUFFER
IDENTBL  DC    F'0'                    IDENTIFY TABLE ADDRESS    S21016
IDENTIFY DC    C'IDENTIFY'             CHECK FOR IDENTIFY CARDS  S21016
FIRSTNEW DC    X'00'                   FIRST,NEW NAME CARD SW    S21016
IEBCOPY  DC    C'PGM=IEBCOPY'
CHGRPSTR DC    F'0'
REPLACE  DC    C'(R) '
TEN      DC    F'10'                                             S21995
CHARDSN  DC    C'DSN='
NAMECARD DC    C'NAME '
CHARINS  DC    C'INS'
CHARINC  DC    C'INC'
INSERTCD DC    C' INSERT '
PAGECD   DC    C'PAGE'                                           X01983
ORDERCD  DC    C'ORDER'                                          X01983
APFCD    DC    C'SETCODE'                                        Y01048
EXECCARD DC    C'EXEC'
LINKSPRC DC    C'LINKS'                                          Y01036
ASMSPROC DC    C'ASMS'                                           Y01036
MODPARM  DC    C'MOD='                                           Y01036
NPARM    DC    C'N='                                             Y01036
P1PARM   DC    C'P1='                                            Y01036
P2PARM   DC    C'P2='                                            Y01036
SYS1BLK  DC    C'SYS1 '                                          Y01036
SYS1COM  DC    C'SYS1,'                                          Y01036
DSSDNME  DC    C'PARMLIB'              DSS DDNAME                Y01045
         DC    C'('                                              Y01045
DSSMEMB  DC    C'IQAORDER'             DSS PARMLIB MEMBER NAME   Y01045
         DC    C')'                                              Y01045
OVCARD   DC    C'OV'                                             S21995
ENDCARD  DC    C'/*'
DUPCOPY  DC    X'00'
PARM     DC    X'00'
ASMSW    DC    X'00'                   ASSEMBLY CONTROL SWITCH   A40797
         DS    0F
BRPRMLST DC    X'00'                   BRANCH SETTINGS FOR PTF01
IDENTCON DC    X'00'                   IDENTIFY CONT. SWITCH     S21016
RETCDE   DC    X'00'                   RETURN CODE SAVE AREA     A48711
COMSW    DC    X'00'                   SWITCHES                  Y01045
         DC    A(MODSTORE)             ADDR OF MODULE NAME BUFFER
OVTABADR DC    F'0'                    ADDR OF OVERLAY TABLE      M4000
PTF01    DS    F                       ENTRY POINT OF AMAPTF01
PTF02    DS    F                       ENTRY POINT OF AMAPTF02
PCH      DC    A(PCHAREA)              ADDR OF PCHAREA BUFFER
MODAR    DC    A(MODAREA)              ADDR OF MODAREA BUFFER
OUTFCB   DC    A(OUTFDCB)              ADDR OF OUTFDCB
SYNADADR DC    A(SYNADEXT)             ADDR OF SYNAD ROUTINE
DDMSG    DC    A(MSGAREA)              ADDR OF MSGAREA
PRINTDCB DC    A(MSGDCB)               ADDR OF MSGDCB
SELNAME  DC    F'0'                    ADDR OF MODULE NAME        M4000
SSISAVE  DC    F'0'                    ADDR OF FOUND MODULE       M4000
MSGRITE  DC    A(MESSAGE2)             ADDR OF OPEN MESSAGE ROUTINE
MODTBL   DC    F'0'                    ADDR OF MODULE NAME TABLE  M4000
SSITABLE DC    F'0'                    ADDR OF SSI TABLE          M4000
PARMPTR  DS    F
CLOSEADR DC    A(FILCLOSE)             ADDR OF CLOSE DCBS ROUTINE
LOADOVR  DC    C'IEWSZOVR'                                       A48079
LOAD01   DC    C'AMAPTF01'
LOAD02   DC    C'AMAPTF02'
SCSAVE   DS    9D
PTCHAREA DC    174H'0'                 PATCH AREA FOR AMAPTFLE   Y01983
         DS    0F                                                S21995
MODFDCB  DCB   DSORG=PS,MACRF=GM,DDNAME=MODF,LRECL=80,RECFM=FB,        C
               EODAD=ENDMOD,SYNAD=SYNADEXT                       S21995
PCHFDCB  DCB   DSORG=PS,MACRF=RP,DDNAME=PCHF,RECFM=FB,LRECL=80,        C
               SYNAD=SYNADEXT,EODAD=EOJRTN                       S21995
OUTFDCB  DCB   DSORG=PS,MACRF=(W,R),DDNAME=OUTF,BLKSIZE=80,RECFM=F,    C
               SYNAD=SYNADEXT                                    S21995
MSGDCB   DCB   DSORG=PS,MACRF=W,DDNAME=PRINT,BLKSIZE=121,RECFM=F,      X
               SYNAD=SYNADEXT                                    S21995
         DCBD  DSORG=PS                                          S21995
         END
