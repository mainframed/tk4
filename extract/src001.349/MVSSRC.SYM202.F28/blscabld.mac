         TITLE 'EP=BLSCABLD - IPCS DAS BUILD SVC99 TUS FROM ALLOCATE PL*
               LIST     '
*     /* CHANGE ACTIVITY
*    THIS MODULE IS WRITTEN FOR @G57LPSR
BLSCABLD CSECT ,                                                   0002
@MAINENT DS    0H                                                  0002
         USING *,@15                                               0002
         B     @PROLOG                                             0002
         DC    AL1(16)                                             0002
         DC    C'BLSCABLD  78.062'                                 0002
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                     0002
         BALR  @11,0                                               0002
@PSTART  LA    @12,4095(,@11)                                      0002
         USING @PSTART,@11                                         0002
         USING @PSTART+4095,@12                                    0002
         L     @00,@SIZDATD                                        0002
         BLSCGETS R,LV=(0)
         LR    @10,@01                                             0002
         USING @DATD,@10                                           0002
         ST    @13,@SA00001+4                                      0002
         LM    @00,@01,20(@13)                                     0002
         ST    @10,8(,@13)                                         0002
         LR    @13,@10                                             0002
*   DMCBPTR=GPR01P;                 /* BASE THE DMCB AND DMAL        */
         LR    DMCBPTR,GPR01P                                      0041
*   RFY                                                            0042
*     GPR01P UNRSTD;                                               0042
*   MODNAME=LMODNMC;                                               0043
         MVC   MODNAME(8),@CC00680                                 0043
*   RETCODE=F0C;                                                   0044
         SLR   @05,@05                                             0044
         ST    @05,RETCODE                                         0044
*   SUBCODE=F0C;                                                   0045
         ST    @05,SUBCODE                                         0045
*   S99TUFP=F0C;                    /* INIT THE TEXT UNIT MULTIPLE 0046
*                                      ENTRY BASE (UNUSED VARIABLE)  */
*                                                                  0046
         SLR   S99TUFP,S99TUFP                                     0046
*   /*****************************************************************/
*   /*                                                               */
*   /* CONSTRUCT DYNALLOC PARM LIST ENTRIES FROM THE ALLOCATION MODEL*/
*   /* OVERRIDE PARAMETERS                                           */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0047
*   ALSW=OFF;                       /* SET ALPARM LIST END SWITCH OFF*/
         NI    ALSW,B'01111111'                                    0047
*   ALBAS=DMALPRMP;                 /* SET ALPARM BASE TO PLIST START*/
         L     ALBAS,DMALPRMP(,DMCBPTR)                            0048
*   IF ALBAS=F0C THEN               /* TEST FOR NO OVERRIDE PARMS    */
         CR    ALBAS,@05                                           0049
         BNE   @RF00049                                            0049
*     ALSW=ON;                      /* NO OVERRIDE PARAMETERS SO   0050
*                                      THERE IS NOTHING TO DO        */
         OI    ALSW,B'10000000'                                    0050
*   DMALTUPM=F0C;                   /* OVERRIDE PARM COUNT = 0       */
@RF00049 SLR   @05,@05                                             0051
         ST    @05,DMALTUPM(,DMCBPTR)                              0051
*   DMALTUBS=ADDR(DMALTUS);         /* POINT MERGE TEXT UNIT AREA TO
*                                      BEGINNING OF TXT UNIT SPACE   */
         LA    @05,DMALTUS(,DMCBPTR)                               0052
         ST    @05,DMALTUBS(,DMCBPTR)                              0052
*   S99TXTPP=ADDR(DMALTUPL);        /* SET DYNALLOC TU PTR LIST BASE */
         LA    @15,DMALTUPL(,DMCBPTR)                              0053
         ST    @15,S99TXTPP(,DMCBPTR)                              0053
*   S99TUPLX=F1C;                   /* INIT THE S99 TU PTR LIST INDEX*/
         LA    S99TUPLX,1                                          0054
*   S99TUBAS=ADDR(DMALTUS);         /* START OF TEXT UNIT AREA       */
         LR    S99TUBAS,@05                                        0055
*   S99TUPLM=F0C;                   /* LAST USED TEXT UNIT PTR INDEX */
         SLR   S99TUPLM,S99TUPLM                                   0056
*   DO WHILE ALSW=OFF;              /* PROCESS ALPARM LIST TO BUILD
*                                      TEXT UNITS                    */
         B     @DE00057                                            0057
@DL00057 DS    0H                                                  0058
*     MLEN=F0C;                     /* INIT TEXT UNIT VALUE MOVE LEN */
         SLR   MLEN,MLEN                                           0058
*     TLEN=F0C;                     /* INIT TEXT UNIT LENGTH         */
         SLR   TLEN,TLEN                                           0059
*     ALOPT=ALOP&LHEX7FC;           /* ELIMINATE LAST ENTRY BIT FROM
*                                      KEY CODE                      */
         LA    ALOPT,127                                           0060
         SLR   @09,@09                                             0060
         IC    @09,ALOP(,ALBAS)                                    0060
         NR    ALOPT,@09                                           0060
*     IF ALOPT<=F0C×ALOPT>ALMSVGP THEN/* TEST FOR INVALID KEY        */
         LTR   ALOPT,ALOPT                                         0061
         BNP   @RT00061                                            0061
         C     ALOPT,@CF00517                                      0061
         BNH   @RF00061                                            0061
@RT00061 DS    0H                                                  0062
*       DO;                         /* INVALID ALLOCATION MODEL    0062
*                                      OVERRIDE PARAMETER KEY        */
*         CHSTR867=ALOPT;           /* GET KEY FIELD                 */
         STCM  ALOPT,3,CHSTR867                                    0063
*         CHSTR88=LHEX0FC;          /* TRANSLATE IT TO CHARACTER HEX */
         MVI   CHSTR88,X'0F'                                       0064
*         UNPK(CTEMP,CHSTR8);                                      0065
         UNPK  CTEMP(9),CHSTR8(8)                                  0065
*         TR(CTEMP,HEXTBL);                                        0066
         TR    CTEMP(9),HEXTBL                                     0066
*         DO;                       /* BLSDMSG                     0067
*                                      (ZZ2,F3102C,DMCBMSG,BLSDMSGS)
*                                      INSERT(DMCBMODL,CTEMP72)      */
*           IOPTLIST(1)=ADDR(IOPTLIST(4));/* CHAIN TO NEXT INSERT    */
         LA    @06,IOPTLIST+12                                     0068
         ST    @06,IOPTLIST                                        0068
*           IOPTLIST(2)=ADDR(DMCBMODL);/* INSERT NAME POINTER        */
         LA    @06,DMCBMODL(,DMCBPTR)                              0069
         ST    @06,IOPTLIST+4                                      0069
*           IOPTLIST(3)=0;          /* ZERO RESERVED FIELD           */
         SLR   @06,@06                                             0070
         ST    @06,IOPTLIST+8                                      0070
*           RFY                                                    0071
*             I015F BASED(ADDR(IOPTLIST(3)));/* ACCESS BYTES 1-2     */
*           I015F=LENGTH(DMCBMODL); /* INSERT LENGTH                 */
         LA    @05,IOPTLIST+8                                      0072
         MVC   I015F(2,@05),@CH00046                               0072
*           IOPTLIST(4)=0;          /* LAST INSERT                   */
         ST    @06,IOPTLIST+12                                     0073
*           IOPTLIST(5)=ADDR(CTEMP72);/* INSERT NAME POINTER         */
         LA    @05,CTEMP72                                         0074
         ST    @05,IOPTLIST+16                                     0074
*           IOPTLIST(6)=0;          /* ZERO RESERVED FIELD           */
         ST    @06,IOPTLIST+20                                     0075
*           RFY                                                    0076
*             I015F BASED(ADDR(IOPTLIST(6)));/* ACCESS BYTES 1-2     */
*           I015F=LENGTH(CTEMP72);  /* INSERT LENGTH                 */
         LA    @06,IOPTLIST+20                                     0077
         MVC   I015F(2,@06),@CH00074                               0077
*           CALL BLSDMSG0(ZZ2,F3102C,DMCBMSG,BLSDMSGS,'00000000'B,ADDR(
*               IOPTLIST));         /* BUILD MESSAGE                 */
         L     @06,DMCBTVP(,DMCBPTR)                               0078
         ST    @06,@AL00001                                        0078
         LA    @06,@CF00646                                        0078
         ST    @06,@AL00001+4                                      0078
         LA    @06,DMCBMSG(,DMCBPTR)                               0078
         ST    @06,@AL00001+8                                      0078
         L     @06,DMCBMSGS(,DMCBPTR)                              0078
         ST    @06,@AL00001+12                                     0078
         LA    @06,@CB00712                                        0078
         ST    @06,@AL00001+16                                     0078
         LA    @06,IOPTLIST                                        0078
         ST    @06,@AFTEMPS+16                                     0078
         LA    @06,@AFTEMPS+16                                     0078
         ST    @06,@AL00001+20                                     0078
         L     @15,DMCBMSG0(,DMCBPTR)                              0078
         LA    @01,@AL00001                                        0078
         BALR  @14,@15                                             0078
*         END;                      /* BLSDMSG                     0079
*                                      (ZZ2,F3102C,DMCBMSG,BLSDMSGS)
*                                      INSERT(DMCBMODL,CTEMP72) BUILD
*                                      INVALID KEYCODE MESSAGE       */
*         RETCODE=ERROR;            /* MARK ERROR                    */
         MVC   RETCODE(4),@CF00046                                 0080
*       END;                        /* INVALID ALLOCATION MODEL    0081
*                                      OVERRIDE PARAMETER KEY        */
*     ELSE                                                         0082
*       CALL VALPROC;               /* PROCESS VALID ALLOCATION    0082
*                                      OVERRIDE KEY                  */
         B     @RC00061                                            0082
@RF00061 BAL   @14,VALPROC                                         0082
*   END;                            /* PROCESS ALPARM LIST TO BUILD
*                                      TEXT UNITS                    */
*                                                                  0083
@RC00061 DS    0H                                                  0083
@DE00057 TM    ALSW,B'10000000'                                    0083
         BZ    @DL00057                                            0083
*   /*****************************************************************/
*   /*                                                               */
*   /* BUILD OF DYNALLOC TEXT UNITS COMPLETE, RETURN TO CALLER       */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0084
*   IF RETCODE^=F0C THEN            /* TEST FOR ERROR                */
         SLR   @05,@05                                             0084
         C     @05,RETCODE                                         0084
         BE    @RF00084                                            0084
*     DMCBDRBP=F0C;                 /* MARK DYNALLOC PLIST NOT USABLE*/
         ST    @05,DMCBDRBP(,DMCBPTR)                              0085
*   RETURN CODE(RETCODE);                                          0086
@RF00084 L     @09,RETCODE                                         0086
         L     @13,4(,@13)                                         0086
         L     @00,@SIZDATD                                        0086
         LR    @01,@10                                             0086
         BLSCFRES R,LV=(0),A=(1)
         LR    @15,@09                                             0086
         L     @14,12(,@13)                                        0086
         LM    @00,@12,20(@13)                                     0086
         BR    @14                                                 0086
*                                                                  0087
*   /*****************************************************************/
*   /*                                                               */
*   /* PROCEDURE TO PROCESS A VALID ALLOCATION OVERRIDE KEY          */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0087
*VALPROC:                                                          0087
*   PROCEDURE;                      /* VALID ALLOCATION MODEL      0087
*                                      OVERRIDE PARAMETER KEY        */
VALPROC  STM   @14,@01,@SA00002                                    0087
         STM   @04,@06,@SA00002+16                                 0087
         STM   @08,@12,@SA00002+28                                 0087
*   CALL KEYPROC;                   /* DO OVERRIDE KEY PROCESSING    */
         BAL   @14,KEYPROC                                         0088
*   IF RETCODE=F0C THEN             /* TEST FOR VALID KEY PROCESSING */
         L     @09,RETCODE                                         0089
         LTR   @09,@09                                             0089
         BNZ   @RF00089                                            0089
*     DO;                           /* UPDATE LIST CONTROLS          */
*       S99TUPLM=S99TUPLX;          /* SAVE LAST USED TU PTR INDEX   */
         LR    S99TUPLM,S99TUPLX                                   0091
*       S99TUBAS=S99TUBAS+MLEN+TLEN+F1C&LHWORDC;/* BUMP TU BASE TO 0092
*                                      NEXT AVAILABLE HALF WORD      */
         LR    @09,S99TUBAS                                        0092
         ALR   @09,MLEN                                            0092
         ALR   @09,TLEN                                            0092
         AL    @09,@CF00048                                        0092
         N     @09,@CF00664                                        0092
         LR    S99TUBAS,@09                                        0092
*       IF ALVL=ON THEN             /* TEST FOR LAST LIST ELEMENT    */
         TM    ALVL(ALBAS),B'10000000'                             0093
         BNO   @RF00093                                            0093
*         DO;                       /* LAST LIST ELEMENT             */
*           ALSW=ON;                /* TERMINATE LIST PROCESSING     */
         OI    ALSW,B'10000000'                                    0095
*           DMALTUPM=S99TUPLM;      /* REMEMBER LAST USED TU PTR INDX*/
         ST    S99TUPLM,DMALTUPM(,DMCBPTR)                         0096
*           DMALTUBS=S99TUBAS;      /* REMEMBER NXT AVAILABLE TU SPCE*/
         ST    S99TUBAS,DMALTUBS(,DMCBPTR)                         0097
*         END;                      /* LAST LIST ELEMENT             */
*       ELSE                                                       0099
*         CALL SETNEXT;             /* SET UP FOR NEXT PLIST ENTRY   */
         B     @RC00093                                            0099
@RF00093 BAL   @14,SETNEXT                                         0099
*     END;                          /* UPDATE LIST CONTROLS          */
*   END VALPROC;                    /* VALID ALLOCATION MODEL      0101
*                                      OVERRIDE PARAMETER KEY        */
@EL00002 DS    0H                                                  0101
@EF00002 DS    0H                                                  0101
@ER00002 LM    @14,@01,@SA00002                                    0101
         LM    @04,@06,@SA00002+16                                 0101
         LM    @08,@12,@SA00002+28                                 0101
         BR    @14                                                 0101
*                                                                  0102
*   /*****************************************************************/
*   /*                                                               */
*   /* PROCEDURE TO SET UP FOR NEXT ALLOC OVERRIDE PLIST ENTRY       */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0102
*SETNEXT:                                                          0102
*   PROCEDURE;                      /* SETUP FOR NEXT PLIST ENTRY    */
SETNEXT  STM   @14,@02,@SA00003                                    0102
         STM   @04,@06,@SA00003+20                                 0102
         STM   @08,@12,@SA00003+32                                 0102
*   S99TUPLX=S99TUPLX+F1C;          /* BUMP TO NEXT TU PTR SLOT      */
         AL    S99TUPLX,@CF00048                                   0103
*   ALBAS=ALBAS+F4C;                /* BUMP TO NEXT PLIST ENTRY      */
         AL    ALBAS,@CF00039                                      0104
*   IF S99TUPLX>DIM(DMALTUPL) THEN  /* TEST FOR TOO MANY TU PTRS     */
         C     S99TUPLX,@CF00086                                   0105
         BNH   @RF00105                                            0105
*     DO;                           /* TOO MANY TU PTRS              */
*       DO;                         /* BLSDMSG                     0107
*                                      (ZZ2,F3106C,DMCBMSG,BLSDMSGS)
*                                      INSERT(MODNAME,DMCBMODL)      */
*         IOPTLIST(1)=ADDR(IOPTLIST(4));/* CHAIN TO NEXT INSERT      */
         LA    @06,IOPTLIST+12                                     0108
         ST    @06,IOPTLIST                                        0108
*         IOPTLIST(2)=ADDR(MODNAME);/* INSERT NAME POINTER           */
         LA    @06,MODNAME                                         0109
         ST    @06,IOPTLIST+4                                      0109
*         IOPTLIST(3)=0;            /* ZERO RESERVED FIELD           */
         SLR   @06,@06                                             0110
         ST    @06,IOPTLIST+8                                      0110
*         RFY                                                      0111
*           I015F BASED(ADDR(IOPTLIST(3)));/* ACCESS BYTES 1-2       */
*         I015F=LENGTH(MODNAME);    /* INSERT LENGTH                 */
         LA    @05,8                                               0112
         LA    @15,IOPTLIST+8                                      0112
         STH   @05,I015F(,@15)                                     0112
*         IOPTLIST(4)=0;            /* LAST INSERT                   */
         ST    @06,IOPTLIST+12                                     0113
*         IOPTLIST(5)=ADDR(DMCBMODL);/* INSERT NAME POINTER          */
         LA    @15,DMCBMODL(,DMCBPTR)                              0114
         ST    @15,IOPTLIST+16                                     0114
*         IOPTLIST(6)=0;            /* ZERO RESERVED FIELD           */
         ST    @06,IOPTLIST+20                                     0115
*         RFY                                                      0116
*           I015F BASED(ADDR(IOPTLIST(6)));/* ACCESS BYTES 1-2       */
*         I015F=LENGTH(DMCBMODL);   /* INSERT LENGTH                 */
         LA    @06,IOPTLIST+20                                     0117
         STH   @05,I015F(,@06)                                     0117
*         CALL BLSDMSG0(ZZ2,F3106C,DMCBMSG,BLSDMSGS,'00000000'B,ADDR(
*             IOPTLIST));           /* BUILD MESSAGE                 */
         L     @06,DMCBTVP(,DMCBPTR)                               0118
         ST    @06,@AL00001                                        0118
         LA    @06,@CF00652                                        0118
         ST    @06,@AL00001+4                                      0118
         LA    @06,DMCBMSG(,DMCBPTR)                               0118
         ST    @06,@AL00001+8                                      0118
         L     @06,DMCBMSGS(,DMCBPTR)                              0118
         ST    @06,@AL00001+12                                     0118
         LA    @06,@CB00712                                        0118
         ST    @06,@AL00001+16                                     0118
         LA    @06,IOPTLIST                                        0118
         ST    @06,@AFTEMPS                                        0118
         LA    @06,@AFTEMPS                                        0118
         ST    @06,@AL00001+20                                     0118
         L     @15,DMCBMSG0(,DMCBPTR)                              0118
         LA    @01,@AL00001                                        0118
         BALR  @14,@15                                             0118
*       END;                        /* BLSDMSG                     0119
*                                      (ZZ2,F3106C,DMCBMSG,BLSDMSGS)
*                                      INSERT(MODNAME,DMCBMODL) BUILD
*                                      TOO MANY TU PTRS MESSAGE      */
*       RETCODE=ERROR;              /* MARK ERROR                    */
         MVC   RETCODE(4),@CF00046                                 0120
*       ALSW=ON;                    /* TERMINATE LIST PROCESSING     */
         OI    ALSW,B'10000000'                                    0121
*     END;                          /* TOO MANY TU PTRS              */
*   IF S99TUBAS>ADDR(DMALEND) THEN  /* TEST FOR OUT OF TU SPACE      */
@RF00105 LA    @06,DMALEND(,DMCBPTR)                               0123
         CR    S99TUBAS,@06                                        0123
         BNH   @RF00123                                            0123
*     DO;                           /* OUT OF TU SPACE               */
*       DO;                         /* BLSDMSG                     0125
*                                      (ZZ2,F3107C,DMCBMSG,BLSDMSGS)
*                                      INSERT(MODNAME,DMCBMODL)      */
*         IOPTLIST(1)=ADDR(IOPTLIST(4));/* CHAIN TO NEXT INSERT      */
         LA    @06,IOPTLIST+12                                     0126
         ST    @06,IOPTLIST                                        0126
*         IOPTLIST(2)=ADDR(MODNAME);/* INSERT NAME POINTER           */
         LA    @06,MODNAME                                         0127
         ST    @06,IOPTLIST+4                                      0127
*         IOPTLIST(3)=0;            /* ZERO RESERVED FIELD           */
         SLR   @06,@06                                             0128
         ST    @06,IOPTLIST+8                                      0128
*         RFY                                                      0129
*           I015F BASED(ADDR(IOPTLIST(3)));/* ACCESS BYTES 1-2       */
*         I015F=LENGTH(MODNAME);    /* INSERT LENGTH                 */
         LA    @05,8                                               0130
         LA    @15,IOPTLIST+8                                      0130
         STH   @05,I015F(,@15)                                     0130
*         IOPTLIST(4)=0;            /* LAST INSERT                   */
         ST    @06,IOPTLIST+12                                     0131
*         IOPTLIST(5)=ADDR(DMCBMODL);/* INSERT NAME POINTER          */
         LA    @15,DMCBMODL(,DMCBPTR)                              0132
         ST    @15,IOPTLIST+16                                     0132
*         IOPTLIST(6)=0;            /* ZERO RESERVED FIELD           */
         ST    @06,IOPTLIST+20                                     0133
*         RFY                                                      0134
*           I015F BASED(ADDR(IOPTLIST(6)));/* ACCESS BYTES 1-2       */
*         I015F=LENGTH(DMCBMODL);   /* INSERT LENGTH                 */
         LA    @06,IOPTLIST+20                                     0135
         STH   @05,I015F(,@06)                                     0135
*         CALL BLSDMSG0(ZZ2,F3107C,DMCBMSG,BLSDMSGS,'00000000'B,ADDR(
*             IOPTLIST));           /* BUILD MESSAGE                 */
         L     @06,DMCBTVP(,DMCBPTR)                               0136
         ST    @06,@AL00001                                        0136
         LA    @06,@CF00654                                        0136
         ST    @06,@AL00001+4                                      0136
         LA    @06,DMCBMSG(,DMCBPTR)                               0136
         ST    @06,@AL00001+8                                      0136
         L     @06,DMCBMSGS(,DMCBPTR)                              0136
         ST    @06,@AL00001+12                                     0136
         LA    @06,@CB00712                                        0136
         ST    @06,@AL00001+16                                     0136
         LA    @06,IOPTLIST                                        0136
         ST    @06,@AFTEMPS                                        0136
         LA    @06,@AFTEMPS                                        0136
         ST    @06,@AL00001+20                                     0136
         L     @15,DMCBMSG0(,DMCBPTR)                              0136
         LA    @01,@AL00001                                        0136
         BALR  @14,@15                                             0136
*       END;                        /* BLSDMSG                     0137
*                                      (ZZ2,F3107C,DMCBMSG,BLSDMSGS)
*                                      INSERT(MODNAME,DMCBMODL) BUILD
*                                      OUT OF TU SPACE MESSAGE       */
*       RETCODE=ERROR;              /* MARK ERROR                    */
         MVC   RETCODE(4),@CF00046                                 0138
*       ALSW=ON;                    /* TERMINATE LIST PROCESSING     */
         OI    ALSW,B'10000000'                                    0139
*     END;                          /* OUT OF TU SPACE               */
*   END SETNEXT;                    /* SETUP FOR NEXT PLIST ENTRY    */
@EL00003 DS    0H                                                  0141
@EF00003 DS    0H                                                  0141
@ER00003 LM    @14,@02,@SA00003                                    0141
         LM    @04,@06,@SA00003+20                                 0141
         LM    @08,@12,@SA00003+32                                 0141
         BR    @14                                                 0141
*                                                                  0142
*   /*****************************************************************/
*   /*                                                               */
*   /* PROCEDURE TO DO OVERRIDE KEY PROCESSING                       */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0142
*KEYPROC:                                                          0142
*   PROCEDURE;                                                     0142
KEYPROC  STM   @14,@02,@SA00004                                    0142
         ST    @04,@SA00004+20                                     0142
         STM   @06,@07,@SA00004+24                                 0142
         STM   @09,@12,@SA00004+32                                 0142
*DSNAL:                                                            0143
*   DO;                             /* DSNAL:CASE(ALOPT)NAMES(DDNAMC,
*                                      DSNAMC,MEMBRC,STATSC,NDISPC,CD
*                                      ISPC,TRKC,CYLC,BLKLNC,PRIMEC,S
*                                      ECNDC,BAD,RLSEC,SPFRMC,ROUNDC,
*                                      VLSERC,BAD,BAD,BAD,BAD,UNITC,B
*                                      AD,BAD,SYSOUC,SPGNMC,SFMNOC,OU
*                                      TLMC,BAD,COPYSC,LABELC,DSSEQC,
*                                      PASPRC,BAD,BAD,RETPDC,BAD,BAD,
*                                      BAD,BAD,BAD,BAD,BAD,BAD,BAD,BA
*                                      D,BAD,BAD,BLKSZC,BAD,BAD,BAD,B
*                                      AD,BAD,BAD,BAD,BAD,BAD,BAD,BAD
*                                      ,BAD,BAD,BAD,BAD,BAD,BAD,LRECL
*                                      C,BAD,BAD,BAD,BAD,BAD,BAD,RECF
*                                      MC,BAD,BAD,BAD,BAD,BAD,BAD,PAS
*                                      SWC,BAD,BAD,BAD,BAD,BAD,BAD,BA
*                                      D,SUSERC,SHOLDC,BAD,BAD,BAD,BA
*                                      D,BAD)                        */
DSNAL    DS    0H                                                  0144
*     DCL                                                          0144
*       CL0001@ LABEL BASED(CP0001@(ALOPT)) VALUERANGE(DDNAMC,DSNAMC,
*           MEMBRC,STATSC,NDISPC,CDISPC,TRKC,CYLC,BLKLNC,PRIMEC,SECNDC,
*           BAD,RLSEC,SPFRMC,ROUNDC,VLSERC,BAD,BAD,BAD,BAD,UNITC,BAD,
*           BAD,SYSOUC,SPGNMC,SFMNOC,OUTLMC,BAD,COPYSC,LABELC,DSSEQC,
*           PASPRC,BAD,BAD,RETPDC,BAD,BAD,BAD,BAD,BAD,BAD,BAD,BAD,BAD,
*           BAD,BAD,BAD,BLKSZC,BAD,BAD,BAD,BAD,BAD,BAD,BAD,BAD,BAD,BAD,
*           BAD,BAD,BAD,BAD,BAD,BAD,BAD,LRECLC,BAD,BAD,BAD,BAD,BAD,BAD,
*           RECFMC,BAD,BAD,BAD,BAD,BAD,BAD,PASSWC,BAD,BAD,BAD,BAD,BAD,
*           BAD,BAD,SUSERC,SHOLDC,BAD,BAD,BAD,BAD,BAD);/* BRANCH   0144
*                                      TARGET                        */
*     DCL                                                          0145
*       CP0001@(94) PTR(31) INIT(ADDR(DDNAMC),ADDR(DSNAMC),ADDR(MEMBRC)
*           ,ADDR(STATSC),ADDR(NDISPC),ADDR(CDISPC),ADDR(TRKC),ADDR(
*           CYLC),ADDR(BLKLNC),ADDR(PRIMEC),ADDR(SECNDC),ADDR(BAD),ADDR
*           (RLSEC),ADDR(SPFRMC),ADDR(ROUNDC),ADDR(VLSERC),ADDR(BAD),
*           ADDR(BAD),ADDR(BAD),ADDR(BAD),ADDR(UNITC),ADDR(BAD),ADDR(
*           BAD),ADDR(SYSOUC),ADDR(SPGNMC),ADDR(SFMNOC),ADDR(OUTLMC),
*           ADDR(BAD),ADDR(COPYSC),ADDR(LABELC),ADDR(DSSEQC),ADDR( 0145
*           PASPRC),ADDR(BAD),ADDR(BAD),ADDR(RETPDC),ADDR(BAD),ADDR(BAD
*           ),ADDR(BAD),ADDR(BAD),ADDR(BAD),ADDR(BAD),ADDR(BAD),ADDR(
*           BAD),ADDR(BAD),ADDR(BAD),ADDR(BAD),ADDR(BAD),ADDR(BLKSZC),
*           ADDR(BAD),ADDR(BAD),ADDR(BAD),ADDR(BAD),ADDR(BAD),ADDR(BAD)
*           ,ADDR(BAD),ADDR(BAD),ADDR(BAD),ADDR(BAD),ADDR(BAD),ADDR(BAD
*           ),ADDR(BAD),ADDR(BAD),ADDR(BAD),ADDR(BAD),ADDR(BAD),ADDR(
*           LRECLC),ADDR(BAD),ADDR(BAD),ADDR(BAD),ADDR(BAD),ADDR(BAD),
*           ADDR(BAD),ADDR(RECFMC),ADDR(BAD),ADDR(BAD),ADDR(BAD),ADDR(
*           BAD),ADDR(BAD),ADDR(BAD),ADDR(PASSWC),ADDR(BAD),ADDR(BAD),
*           ADDR(BAD),ADDR(BAD),ADDR(BAD),ADDR(BAD),ADDR(BAD),ADDR(
*           SUSERC),ADDR(SHOLDC),ADDR(BAD),ADDR(BAD),ADDR(BAD),ADDR(BAD
*           ),ADDR(BAD));                                          0145
*     GOTO CL0001@;                 /* BRANCH TO SELECTED CASE 5D -
*                                      5E                            */
         LR    @09,ALOPT                                           0146
         SLA   @09,2                                               0146
         L     @09,CP0001@-4(@09)                                  0146
         BR    @09                                                 0146
*                                                                  0147
*     /***************************************************************/
*     /*                                                             */
*     /* PROCESS DDNAME KEY                                          */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0147
*DDNAMC:                                                           0147
*     DO;                           /* SUBCASE DDNAME PROCESSING     */
DDNAMC   DS    0H                                                  0148
*       CALL BLDVLTU(DALDDNAM,F8C); /* BUILD DDNAME TEXT UNIT        */
         LA    @01,@AL00148                                        0148
         BAL   @14,BLDVLTU                                         0148
*       IF ALSW=OFF&MLEN>F0C THEN   /* TEST THAT TEXT UNIT IS VALID  */
         TM    ALSW,B'10000000'                                    0149
         BNZ   @RF00149                                            0149
         LTR   MLEN,MLEN                                           0149
         BNP   @RF00149                                            0149
*         DO;                       /* MOVE DDNAME TO DMCB           */
*           RFY                                                    0151
*             S99TUNIT BASED(S99TUBAS);                            0151
*           DMCBDDNM='';            /* INIT THE DDNAME ENTRY         */
         MVI   DMCBDDNM(DMCBPTR),C' '                              0152
         MVC   DMCBDDNM+1(7,DMCBPTR),DMCBDDNM(DMCBPTR)             0152
*           DMCBDDNM(F1C:MLEN)=S99TUPAR(F1C:MLEN);/* MOVE IN THE   0153
*                                      DDNAME                        */
         LR    @09,MLEN                                            0153
         BCTR  @09,0                                               0153
         EX    @09,@SM00938                                        0153
*         END;                      /* MOVE DDNAME TO DMCB           */
*       GOTO CE0001@;               /* BRANCH TO END OF CASE         */
         B     CE0001@                                             0155
*     END DDNAMC;                   /* END OF SUBCASE                */
*                                                                  0156
*     /***************************************************************/
*     /*                                                             */
*     /* PROCESS DSNAME KEY                                          */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0157
*DSNAMC:                                                           0157
*     DO;                           /* SUBCASE DSNAME PROCESSING     */
DSNAMC   DS    0H                                                  0158
*       CALL BLDVLTU(DALDSNAM,F44C);/* BUILD DSNAME TEXT UNIT        */
         LA    @01,@AL00158                                        0158
         BAL   @14,BLDVLTU                                         0158
*       IF ALSW=OFF&MLEN>F0C THEN   /* TEST THAT TEXT UNIT IS VALID  */
         TM    ALSW,B'10000000'                                    0159
         BNZ   @RF00159                                            0159
         LTR   MLEN,MLEN                                           0159
         BNP   @RF00159                                            0159
*         DO;                       /* MOVE DSNAME TO DMCB           */
*           RFY                                                    0161
*             S99TUNIT BASED(S99TUBAS);                            0161
*           DMCBDSN='';             /* INIT THE DSN ENTRY            */
         MVI   DMCBDSN(DMCBPTR),C' '                               0162
         MVC   DMCBDSN+1(43,DMCBPTR),DMCBDSN(DMCBPTR)              0162
*           DMCBDSN(F1C:MLEN)=S99TUPAR(F1C:MLEN);/* MOVE IN THE    0163
*                                      DSNAME                        */
         LR    @09,MLEN                                            0163
         BCTR  @09,0                                               0163
         EX    @09,@SM00940                                        0163
*         END;                      /* MOVE DSNAME TO DMCB           */
*       GOTO CE0001@;               /* BRANCH TO END OF CASE         */
         B     CE0001@                                             0165
*     END DSNAMC;                   /* END OF SUBCASE                */
*                                                                  0166
*     /***************************************************************/
*     /*                                                             */
*     /* PROCESS MEMBER KEY                                          */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0167
*MEMBRC:                                                           0167
*     DO;                           /* SUBCASE MEMBER PROCESSING     */
MEMBRC   DS    0H                                                  0168
*       CALL BLDVLTU(DALMEMBR,F8C); /* BUILD MEMBER TEXT UNIT        */
         LA    @01,@AL00168                                        0168
         BAL   @14,BLDVLTU                                         0168
*       IF ALSW=OFF&MLEN>F0C THEN   /* TEST THAT TEXT UNIT IS VALID  */
         TM    ALSW,B'10000000'                                    0169
         BNZ   @RF00169                                            0169
         LTR   MLEN,MLEN                                           0169
         BNP   @RF00169                                            0169
*         DO;                       /* MOVE MEMBER TO DMCB           */
*           RFY                                                    0171
*             S99TUNIT BASED(S99TUBAS);                            0171
*           DMCBMEMB='';            /* INIT THE MEMBER ENTRY         */
         MVI   DMCBMEMB(DMCBPTR),C' '                              0172
         MVC   DMCBMEMB+1(7,DMCBPTR),DMCBMEMB(DMCBPTR)             0172
*           DMCBMEMB(F1C:MLEN)=S99TUPAR(F1C:MLEN);/* MOVE IN THE   0173
*                                      MEMBER                        */
         LR    @09,MLEN                                            0173
         BCTR  @09,0                                               0173
         EX    @09,@SM00942                                        0173
*         END;                      /* MOVE MEMBER TO DMCB           */
*       GOTO CE0001@;               /* BRANCH TO END OF CASE         */
         B     CE0001@                                             0175
*     END MEMBRC;                   /* END OF SUBCASE                */
*                                                                  0176
*     /***************************************************************/
*     /*                                                             */
*     /* PROCESS DISP STATUS KEY                                     */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0177
*STATSC:                                                           0177
*     DO;                           /* SUBCASE STATUS CODE PROCESSING*/
STATSC   DS    0H                                                  0178
*       IF ALPRB4F1^=F0C THEN       /* TEST FOR IMMEDIATE TEXT UNIT
*                                      KEY VALUE                     */
         CLI   ALPRB4F1(ALBAS),0                                   0178
         BE    @RF00178                                            0178
*         CALL BLDV1TU(DALSTATS,ALPRB4C1);/* BUILD DISP STATUS TEXT
*                                      UNIT                          */
         LA    @09,@CB00337                                        0179
         ST    @09,@AL00001                                        0179
         LA    @09,ALPRB4C1(,ALBAS)                                0179
         ST    @09,@AL00001+4                                      0179
         LA    @01,@AL00001                                        0179
         BAL   @14,BLDV1TU                                         0179
*       ELSE                                                       0180
*         DO;                       /* BUILD DISP STATUS TEXT UNIT 0180
*                                      FROM INDIRECT PARM FIELD      */
         B     @RC00178                                            0180
@RF00178 DS    0H                                                  0181
*           ALBAS=ALBAS+F4C;        /* BUMP PLIST BASE TO PARM VALUE
*                                      ADDRESS                       */
         AL    ALBAS,@CF00039                                      0181
*           IF ALPTC1^=LBLNKC THEN  /* TEST FOR NON-NULL PARM VALUE  */
         L     @09,ALPTR(,ALBAS)                                   0182
         CLI   ALPTC1(@09),C' '                                    0182
         BE    @RF00182                                            0182
*             DO;                   /* NON-NULL PARM VALUE FIELD,  0183
*                                      OBTAIN TEXT UNIT PARM VALUE   */
*               CALL MATCH(STATSP,LENGTH(STATSTR),STATSTR,FTMP8);/*
*                                      GET TU PARM                   */
         ST    @09,@AL00001                                        0184
         LA    @09,@CF00184                                        0184
         ST    @09,@AL00001+4                                      0184
         LA    @09,STATSTR                                         0184
         ST    @09,@AL00001+8                                      0184
         LA    @09,FTMP8                                           0184
         ST    @09,@AL00001+12                                     0184
         LA    @01,@AL00001                                        0184
         BAL   @14,MATCH                                           0184
*               IF FTMP8^=F0C THEN  /* TEST FOR VALID PARM VALUE     */
         CLI   FTMP8,0                                             0185
         BE    @RF00185                                            0185
*                 CALL BLDV1TU(DALSTATS,FTMP8);/* BUILD DISP STATUS
*                                      TEXT UNIT                     */
         LA    @09,@CB00337                                        0186
         ST    @09,@AL00001                                        0186
         LA    @09,FTMP8                                           0186
         ST    @09,@AL00001+4                                      0186
         LA    @01,@AL00001                                        0186
         BAL   @14,BLDV1TU                                         0186
*               ELSE                                               0187
*                 DO;               /* INVALID PARM VALUE            */
         B     @RC00185                                            0187
@RF00185 DS    0H                                                  0188
*                   ALSW=ON;        /* TERMINATE LIST PROCESSING     */
         OI    ALSW,B'10000000'                                    0188
*                   CALL PARMERR(LENGTH(DMCBMODL),DMCBMODL,LENGTH( 0189
*                       DISPSTKY),DISPSTKY,LENGTH(STATSP),STATSP);/*
*                                      ISSUE ERROR MESSAGE           */
         MVC   @AL00001(20),@AL00189                               0189
         LA    @09,DMCBMODL(,DMCBPTR)                              0189
         ST    @09,@AL00001+4                                      0189
         L     @09,ALPTR(,ALBAS)                                   0189
         ST    @09,@AL00001+20                                     0189
         LA    @01,@AL00001                                        0189
         BAL   @14,PARMERR                                         0189
*                 END;              /* INVALID PARM VALUE            */
*             END;                  /* NON-NULL PARM VALUE FIELD,  0191
*                                      OBTAIN TEXT UNIT PARM VALUE   */
@RC00185 DS    0H                                                  0192
*         END;                      /* BUILD DISP STATUS TEXT UNIT 0192
*                                      FROM INDIRECT PARM FIELD      */
@RF00182 DS    0H                                                  0193
*       IF ALSW=OFF THEN            /* TEST THAT TEXT UNIT IS VALID  */
@RC00178 TM    ALSW,B'10000000'                                    0193
         BNZ   @RF00193                                            0193
*         DO;                       /* MOVE DS STATUS TO DMCB        */
*           RFY                                                    0195
*             S99TUNIT BASED(S99TUBAS);                            0195
*           DMCBSTAT=S99TUPR1;      /* MOVE IN THE DS STATUS         */
         MVC   DMCBSTAT(1,DMCBPTR),S99TUPR1(S99TUBAS)              0196
*           IF DMCBVSF=ON&          /* TEST FOR VSAM DATA SET        */
*               (DMCBSTAT=STATNEW×  /* AND FOR DS STATUS = NEW OR MOD*/
*               DMCBSTAT=STATMOD) THEN                             0197
         TM    DMCBVSF(DMCBPTR),B'00000001'                        0197
         BNO   @RF00197                                            0197
         CLI   DMCBSTAT(DMCBPTR),4                                 0197
         BE    @RT00197                                            0197
         CLI   DMCBSTAT(DMCBPTR),2                                 0197
         BNE   @RF00197                                            0197
@RT00197 DS    0H                                                  0198
*             S99TUPR1=STATSHR;     /* FORCE DS STATUS TO SHARE      */
         MVI   S99TUPR1(S99TUBAS),X'08'                            0198
*         END;                      /* MOVE DS STATUS TO DMCB        */
*       GOTO CE0001@;               /* BRANCH TO END OF CASE         */
         B     CE0001@                                             0200
*     END STATSC;                   /* END OF SUBCASE                */
*                                                                  0201
*     /***************************************************************/
*     /*                                                             */
*     /* PROCESS NORMAL DISPOSITION KEY                              */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0202
*NDISPC:                                                           0202
*     DO;                           /* SUBCASE NORMAL DISPOSITION  0202
*                                      PROCESSING                    */
NDISPC   DS    0H                                                  0203
*       IF ALPRB4F1^=F0C THEN       /* TEST FOR IMMEDIATE TEXT UNIT
*                                      KEY VALUE                     */
         CLI   ALPRB4F1(ALBAS),0                                   0203
         BE    @RF00203                                            0203
*         CALL BLDV1TU(DALNDISP,ALPRB4C1);/* BUILD NORMAL DISP TEXT
*                                      UNIT                          */
         LA    @09,@CB00339                                        0204
         ST    @09,@AL00001                                        0204
         LA    @09,ALPRB4C1(,ALBAS)                                0204
         ST    @09,@AL00001+4                                      0204
         LA    @01,@AL00001                                        0204
         BAL   @14,BLDV1TU                                         0204
*       ELSE                                                       0205
*         DO;                       /* BUILD NORMAL DISPOSITION TEXT
*                                      UNIT FROM INDIRECT PARM FIELD */
         B     @RC00203                                            0205
@RF00203 DS    0H                                                  0206
*           ALBAS=ALBAS+F4C;        /* BUMP PLIST BASE TO PARM VALUE
*                                      ADDRESS                       */
         AL    ALBAS,@CF00039                                      0206
*           IF ALPTC1^=LBLNKC THEN  /* TEST FOR NON-NULL PARM VALUE  */
         L     @09,ALPTR(,ALBAS)                                   0207
         CLI   ALPTC1(@09),C' '                                    0207
         BE    @RF00207                                            0207
*             DO;                   /* NON-NULL PARM VALUE FIELD,  0208
*                                      OBTAIN TEXT UNIT PARM VALUE   */
*               CALL MATCH(NDISPP,LENGTH(DISPSTR),DISPSTR,FTMP8);/*
*                                      GET TU PARM                   */
         ST    @09,@AL00001                                        0209
         LA    @09,@CF00929                                        0209
         ST    @09,@AL00001+4                                      0209
         LA    @09,DISPSTR                                         0209
         ST    @09,@AL00001+8                                      0209
         LA    @09,FTMP8                                           0209
         ST    @09,@AL00001+12                                     0209
         LA    @01,@AL00001                                        0209
         BAL   @14,MATCH                                           0209
*               IF FTMP8^=F0C THEN  /* TEST FOR VALID PARM VALUE     */
         CLI   FTMP8,0                                             0210
         BE    @RF00210                                            0210
*                 CALL BLDV1TU(DALNDISP,FTMP8);/* BUILD NORMAL     0211
*                                      DISPOSITION TEXT UNIT         */
         LA    @09,@CB00339                                        0211
         ST    @09,@AL00001                                        0211
         LA    @09,FTMP8                                           0211
         ST    @09,@AL00001+4                                      0211
         LA    @01,@AL00001                                        0211
         BAL   @14,BLDV1TU                                         0211
*               ELSE                                               0212
*                 DO;               /* INVALID PARM VALUE            */
         B     @RC00210                                            0212
@RF00210 DS    0H                                                  0213
*                   ALSW=ON;        /* TERMINATE LIST PROCESSING     */
         OI    ALSW,B'10000000'                                    0213
*                   CALL PARMERR(LENGTH(DMCBMODL),DMCBMODL,LENGTH( 0214
*                       NDISPKY),NDISPKY,LENGTH(NDISPP),NDISPP);/* 0214
*                                      ISSUE ERROR MESSAGE           */
         MVC   @AL00001(20),@AL00214                               0214
         LA    @09,DMCBMODL(,DMCBPTR)                              0214
         ST    @09,@AL00001+4                                      0214
         L     @09,ALPTR(,ALBAS)                                   0214
         ST    @09,@AL00001+20                                     0214
         LA    @01,@AL00001                                        0214
         BAL   @14,PARMERR                                         0214
*                 END;              /* INVALID PARM VALUE            */
*             END;                  /* NON-NULL PARM VALUE FIELD,  0216
*                                      OBTAIN TEXT UNIT PARM VALUE   */
@RC00210 DS    0H                                                  0217
*         END;                      /* BUILD NORMAL DISPOSITION TEXT
*                                      UNIT FROM INDIRECT PARM FIELD */
@RF00207 DS    0H                                                  0218
*       IF ALSW=OFF THEN            /* TEST THAT TEXT UNIT IS VALID  */
@RC00203 TM    ALSW,B'10000000'                                    0218
         BNZ   @RF00218                                            0218
*         DO;                       /* MOVE DS NORMAL DISP TO DMCB   */
*           RFY                                                    0220
*             S99TUNIT BASED(S99TUBAS);                            0220
*           DMCBDISP=S99TUPR1;      /* MOVE IN THE DS NORMAL DISP    */
         MVC   DMCBDISP(1,DMCBPTR),S99TUPR1(S99TUBAS)              0221
*           IF DMCBVSF=ON THEN      /* TEST FOR VSAM DATA SET        */
         TM    DMCBVSF(DMCBPTR),B'00000001'                        0222
         BNO   @RF00222                                            0222
*             S99TUPR1=DISPKEEP;    /* FORCE TEXT UNIT DS NORMAL DISP
*                                      TO KEEP                       */
         MVI   S99TUPR1(S99TUBAS),X'08'                            0223
*         END;                      /* MOVE DS NORMAL DISP TO DMCB   */
*       GOTO CE0001@;               /* BRANCH TO END OF CASE         */
         B     CE0001@                                             0225
*     END NDISPC;                   /* END OF SUBCASE                */
*                                                                  0226
*     /***************************************************************/
*     /*                                                             */
*     /* PROCESS CONDITIONAL DISPOSITION KEY                         */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0227
*CDISPC:                                                           0227
*     DO;                           /* SUBCASE CONDITIONAL         0227
*                                      DISPOSITION PROCESSING        */
CDISPC   DS    0H                                                  0228
*       IF ALPRB4F1^=F0C THEN       /* TEST FOR IMMEDIATE TEXT UNIT
*                                      KEY VALUE                     */
         CLI   ALPRB4F1(ALBAS),0                                   0228
         BE    @RF00228                                            0228
*         CALL BLDV1TU(DALCDISP,ALPRB4C1);/* BUILD CONDITIONAL DISP
*                                      TEXT UNIT                     */
         LA    @09,@CB00341                                        0229
         ST    @09,@AL00001                                        0229
         LA    @09,ALPRB4C1(,ALBAS)                                0229
         ST    @09,@AL00001+4                                      0229
         LA    @01,@AL00001                                        0229
         BAL   @14,BLDV1TU                                         0229
*       ELSE                                                       0230
*         DO;                       /* BUILD CONDITIONAL DISP TEXT 0230
*                                      UNIT FROM INDIRECT PARM FIELD */
         B     @RC00228                                            0230
@RF00228 DS    0H                                                  0231
*           ALBAS=ALBAS+F4C;        /* BUMP PLIST BASE TO PARM VALUE
*                                      ADDRESS                       */
         AL    ALBAS,@CF00039                                      0231
*           IF ALPTC1^=LBLNKC THEN  /* TEST FOR NON-NULL PARM VALUE  */
         L     @09,ALPTR(,ALBAS)                                   0232
         CLI   ALPTC1(@09),C' '                                    0232
         BE    @RF00232                                            0232
*             DO;                   /* NON-NULL PARM VALUE FIELD,  0233
*                                      OBTAIN TEXT UNIT PARM VALUE   */
*               CALL MATCH(CDISPP,LENGTH(DISPSTR),DISPSTR,FTMP8);/*
*                                      GET TU PARM                   */
         ST    @09,@AL00001                                        0234
         LA    @09,@CF00929                                        0234
         ST    @09,@AL00001+4                                      0234
         LA    @09,DISPSTR                                         0234
         ST    @09,@AL00001+8                                      0234
         LA    @09,FTMP8                                           0234
         ST    @09,@AL00001+12                                     0234
         LA    @01,@AL00001                                        0234
         BAL   @14,MATCH                                           0234
*               IF FTMP8^=F0C THEN  /* TEST FOR VALID PARM VALUE     */
         CLI   FTMP8,0                                             0235
         BE    @RF00235                                            0235
*                 CALL BLDV1TU(DALCDISP,FTMP8);/* BUILD CONDITIONAL
*                                      DISP TEXT UNIT                */
         LA    @09,@CB00341                                        0236
         ST    @09,@AL00001                                        0236
         LA    @09,FTMP8                                           0236
         ST    @09,@AL00001+4                                      0236
         LA    @01,@AL00001                                        0236
         BAL   @14,BLDV1TU                                         0236
*               ELSE                                               0237
*                 DO;               /* INVALID PARM VALUE            */
         B     @RC00235                                            0237
@RF00235 DS    0H                                                  0238
*                   ALSW=ON;        /* TERMINATE LIST PROCESSING     */
         OI    ALSW,B'10000000'                                    0238
*                   CALL PARMERR(LENGTH(DMCBMODL),DMCBMODL,LENGTH( 0239
*                       CDISPKY),CDISPKY,LENGTH(CDISPP),CDISPP);/* 0239
*                                      ISSUE ERROR MESSAGE           */
         MVC   @AL00001(20),@AL00239                               0239
         LA    @09,DMCBMODL(,DMCBPTR)                              0239
         ST    @09,@AL00001+4                                      0239
         L     @09,ALPTR(,ALBAS)                                   0239
         ST    @09,@AL00001+20                                     0239
         LA    @01,@AL00001                                        0239
         BAL   @14,PARMERR                                         0239
*                 END;              /* INVALID PARM VALUE            */
*             END;                  /* NON-NULL PARM VALUE FIELD,  0241
*                                      OBTAIN TEXT UNIT PARM VALUE   */
@RC00235 DS    0H                                                  0242
*         END;                      /* BUILD CONDITIONAL DISP TEXT 0242
*                                      UNIT FROM INDIRECT PARM FIELD */
@RF00232 DS    0H                                                  0243
*       RFY                                                        0243
*         S99TUNIT BASED(S99TUBAS);                                0243
@RC00228 DS    0H                                                  0244
*       IF ALSW=OFF&                /* TEST THAT TEXT UNIT IS VALID  */
*           DMCBVSF=ON THEN         /* AND FOR VSAM DATA SET         */
         TM    ALSW,B'10000000'                                    0244
         BNZ   @RF00244                                            0244
         TM    DMCBVSF(DMCBPTR),B'00000001'                        0244
         BNO   @RF00244                                            0244
*         S99TUPR1=DISPKEEP;        /* FORCE TEXT UNIT DS CONDITIONAL
*                                      DISP TO KEEP                  */
         MVI   S99TUPR1(S99TUBAS),X'08'                            0245
*       GOTO CE0001@;               /* BRANCH TO END OF CASE         */
         B     CE0001@                                             0246
*     END CDISPC;                   /* END OF SUBCASE                */
*                                                                  0247
*     /***************************************************************/
*     /*                                                             */
*     /* PROCESS TRACK ALLOCATION KEY                                */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0248
*TRKC:                                                             0248
*     DO;                           /* SUBCASE TRK ALLOCATION        */
TRKC     DS    0H                                                  0249
*       CALL BLDV0TU(DALTRK);       /* BUILD DS TRACK ALLOCATION TEXT
*                                      UNIT                          */
         LA    @01,@AL00249                                        0249
         BAL   @14,BLDV0TU                                         0249
*       DMCBSPTY=LTRKC;             /* SET DMCB SPACE TYPE FIELD     */
         MVC   DMCBSPTY(3,DMCBPTR),@CC00676                        0250
*       GOTO CE0001@;               /* BRANCH TO END OF CASE         */
         B     CE0001@                                             0251
*     END TRKC;                     /* END OF SUBCASE                */
*                                                                  0252
*     /***************************************************************/
*     /*                                                             */
*     /* PROCESS CYLINDER ALLOCATION KEY                             */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0253
*CYLC:                                                             0253
*     DO;                           /* SUBCASE CYLINDER ALLOCATION   */
CYLC     DS    0H                                                  0254
*       CALL BLDV0TU(DALCYL);       /* BUILD DS CYLINDER ALLOCATION
*                                      TEXT UNIT                     */
         LA    @01,@AL00254                                        0254
         BAL   @14,BLDV0TU                                         0254
*       DMCBSPTY=LCYLC;             /* SET DMCB SPACE TYPE FIELD     */
         MVC   DMCBSPTY(3,DMCBPTR),@CC00674                        0255
*       GOTO CE0001@;               /* BRANCH TO END OF CASE         */
         B     CE0001@                                             0256
*     END CYLC;                     /* END OF SUBCASE                */
*                                                                  0257
*     /***************************************************************/
*     /*                                                             */
*     /* PROCESS BLOCK LENGTH ALLOCATION KEY                         */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0258
*BLKLNC:                                                           0258
*     DO;                           /* SUBCASE BLOCK LENGTH        0258
*                                      ALLOCATION                    */
BLKLNC   DS    0H                                                  0259
*       ALBAS=ALBAS+F4C;            /* BUMP PLIST BASE TO PARM VALUE
*                                      ADDR                          */
         AL    ALBAS,@CF00039                                      0259
*       CALL BLDP3TU(DALBLKLN);     /* BUILD DS BLOCK LENGTH ALLOC 0260
*                                      TEXT UNIT                     */
         LA    @01,@AL00260                                        0260
         BAL   @14,BLDP3TU                                         0260
*       DMCBSPTY=ALPTB2C3;          /* SET DMCB SPACE TYPE FIELD     */
         L     @09,ALPTR(,ALBAS)                                   0261
         MVC   DMCBSPTY(3,DMCBPTR),ALPTB2C3(@09)                   0261
*       GOTO CE0001@;               /* BRANCH TO END OF CASE         */
         B     CE0001@                                             0262
*     END BLKLNC;                   /* END OF SUBCASE                */
*                                                                  0263
*     /***************************************************************/
*     /*                                                             */
*     /* PROCESS PRIMARY ALLOCATION VALUE KEY                        */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0264
*PRIMEC:                                                           0264
*     DO;                           /* SUBCASE PRIMARY ALLOCATION  0264
*                                      VALUE                         */
PRIMEC   DS    0H                                                  0265
*       ALBAS=ALBAS+F4C;            /* BUMP PLIST BASE TO PARM VALUE
*                                      ADDR                          */
         AL    ALBAS,@CF00039                                      0265
*       IF ALPTF31>F0C THEN         /* TEST FOR NON-NULL PARM VALUE  */
         L     @09,ALPTR(,ALBAS)                                   0266
         L     @09,ALPTF31(,@09)                                   0266
         LTR   @09,@09                                             0266
         BNP   @RF00266                                            0266
*         CALL BLDP3TU(DALPRIME);   /* BUILD DS PRIMARY SPACE ALLOC
*                                      TEXT UNIT                     */
         LA    @01,@AL00267                                        0267
         BAL   @14,BLDP3TU                                         0267
*       DMCBSPPR=ALPTF31;           /* SET DMCB PRIMARY SPACE VALUE  */
@RF00266 L     @09,ALPTR(,ALBAS)                                   0268
         L     @09,ALPTF31(,@09)                                   0268
         ST    @09,DMCBSPPR(,DMCBPTR)                              0268
*       GOTO CE0001@;               /* BRANCH TO END OF CASE         */
         B     CE0001@                                             0269
*     END PRIMEC;                   /* END OF SUBCASE                */
*                                                                  0270
*     /***************************************************************/
*     /*                                                             */
*     /* PROCESS SECONDARY ALLOCATION VALUE KEY                      */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0271
*SECNDC:                                                           0271
*     DO;                           /* SUBCASE SECONDARY ALLOCATION
*                                      VALUE                         */
SECNDC   DS    0H                                                  0272
*       ALBAS=ALBAS+F4C;            /* BUMP PLIST BASE TO PARM VALUE
*                                      ADDR                          */
         AL    ALBAS,@CF00039                                      0272
*       IF ALPTF31>=F0C THEN        /* TEST FOR NON-NULL PARM VALUE  */
         L     @09,ALPTR(,ALBAS)                                   0273
         L     @09,ALPTF31(,@09)                                   0273
         LTR   @09,@09                                             0273
         BM    @RF00273                                            0273
*         CALL BLDP3TU(DALSECND);   /* BUILD DS SECONDARY SPACE ALLOC
*                                      TEXT UNIT                     */
         LA    @01,@AL00274                                        0274
         BAL   @14,BLDP3TU                                         0274
*       DMCBSPSE=ALPTF31;           /* SET DMCB SECONDARY SPACE VALUE*/
@RF00273 L     @09,ALPTR(,ALBAS)                                   0275
         L     @09,ALPTF31(,@09)                                   0275
         ST    @09,DMCBSPSE(,DMCBPTR)                              0275
*       GOTO CE0001@;               /* BRANCH TO END OF CASE         */
         B     CE0001@                                             0276
*     END SECNDC;                   /* END OF SUBCASE SECONDARY    0277
*                                      ALLOCATION VALUE              */
*                                                                  0277
*     /***************************************************************/
*     /*                                                             */
*     /* PROCESS RELEASE UNUSED SPACE AT UNALLOCATION KEY            */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0278
*RLSEC:                                                            0278
*     DO;                           /* SUBCASE ALLOCATION RELEASE  0278
*                                      UNUSED SPACE AT UNALLOCATION  */
RLSEC    DS    0H                                                  0279
*       CALL BLDV0TU(DALRLSE);      /* BUILD ALLOCATION RELEASE SPACE
*                                      TEXT UNIT                     */
         LA    @01,@AL00279                                        0279
         BAL   @14,BLDV0TU                                         0279
*       DMCBSPRL=ON;                /* SET DMCB RELEASE SPACE VALUE  */
         OI    DMCBSPRL(DMCBPTR),B'10000000'                       0280
*       GOTO CE0001@;               /* BRANCH TO END OF CASE         */
         B     CE0001@                                             0281
*     END RLSEC;                    /* END OF SUBCASE ALLOCATION   0282
*                                      RELEASE UNUSED SPACE AT     0282
*                                      UNALLOCATION                  */
*                                                                  0282
*     /***************************************************************/
*     /*                                                             */
*     /* PROCESS ALLOCATION SPACE FORMAT KEY                         */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0283
*SPFRMC:                                                           0283
*     DO;                           /* SUBCASE ALLOCATION SPACE    0283
*                                      FORMAT                        */
SPFRMC   DS    0H                                                  0284
*       CALL BLDV1TU(DALSPFRM,ALPRB4C1);/* BUILD DS SPACE FORMAT TXT
*                                      UNIT                          */
         LA    @09,@CB00357                                        0284
         ST    @09,@AL00001                                        0284
         LA    @09,ALPRB4C1(,ALBAS)                                0284
         ST    @09,@AL00001+4                                      0284
         LA    @01,@AL00001                                        0284
         BAL   @14,BLDV1TU                                         0284
*       DMCBSPCT=ON;                /* DMCB CONTIGUOUS SPACE VALUE   */
         OI    DMCBSPCT(DMCBPTR),B'01000000'                       0285
*       GOTO CE0001@;               /* BRANCH TO END OF CASE         */
         B     CE0001@                                             0286
*     END SPFRMC;                   /* END OF SUBCASE ALLOCATION   0287
*                                      SPACE FORMAT                  */
*                                                                  0287
*     /***************************************************************/
*     /*                                                             */
*     /* PROCESS ROUND TO CYLINDER KEY                               */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0288
*ROUNDC:                                                           0288
*     DO;                           /* SUBCASE ALLOCATION ROUND TO 0288
*                                      CYLINDER                      */
ROUNDC   DS    0H                                                  0289
*       CALL BLDV0TU(DALROUND);     /* BUILD ALLOCATION ROUND TO CYL
*                                      TEXT UNIT                     */
         LA    @01,@AL00289                                        0289
         BAL   @14,BLDV0TU                                         0289
*       DMCBSPRN=ON;                /* DMCB ROUND SPACE TO CYL VALUE */
         OI    DMCBSPRN(DMCBPTR),B'00100000'                       0290
*       GOTO CE0001@;               /* BRANCH TO END OF CASE         */
         B     CE0001@                                             0291
*     END ROUNDC;                   /* END OF SUBCASE ALLOCATION   0292
*                                      ROUND TO CYLINDER             */
*                                                                  0292
*     /***************************************************************/
*     /*                                                             */
*     /* PROCESS VOLUME SERIAL KEY                                   */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0293
*VLSERC:                                                           0293
*     DO;                           /* SUBCASE VOLUME SERIAL       0293
*                                      PROCESSING                    */
VLSERC   DS    0H                                                  0294
*       CALL BLDVLTU(DALVLSER,F6C); /* BUILD VOLUME SERIAL TEXT UNIT */
         LA    @01,@AL00294                                        0294
         BAL   @14,BLDVLTU                                         0294
*       IF ALSW=OFF&MLEN>F0C THEN   /* TEST THAT TEXT UNIT IS VALID  */
         TM    ALSW,B'10000000'                                    0295
         BNZ   @RF00295                                            0295
         LTR   MLEN,MLEN                                           0295
         BNP   @RF00295                                            0295
*         DO;                       /* MOVE VOLUME SERIAL TO DMCB    */
*           RFY                                                    0297
*             S99TUNIT BASED(S99TUBAS);                            0297
*           DMCBVOL='';             /* INIT THE VOLUME SERIAL ENTRY  */
         MVI   DMCBVOL(DMCBPTR),C' '                               0298
         MVC   DMCBVOL+1(5,DMCBPTR),DMCBVOL(DMCBPTR)               0298
*           DMCBVOL(F1C:MLEN)=S99TUPAR(F1C:MLEN);/* MOVE IN THE VOL
*                                      SER                           */
         LR    @09,MLEN                                            0299
         BCTR  @09,0                                               0299
         EX    @09,@SM00946                                        0299
*         END;                      /* MOVE VOLUME SERIAL TO DMCB    */
*       GOTO CE0001@;               /* BRANCH TO END OF CASE         */
         B     CE0001@                                             0301
*     END VLSERC;                   /* END OF SUBCASE VOLUME SERIAL
*                                      PROCESSING                    */
*                                                                  0302
*     /***************************************************************/
*     /*                                                             */
*     /* PROCESS UNIT NAME KEY                                       */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0303
*UNITC:                                                            0303
*     DO;                           /* SUBCASE UNIT NAME PROCESSING  */
UNITC    DS    0H                                                  0304
*       CALL BLDVLTU(DALUNIT,F8C);  /* BUILD UNIT NAME TEXT UNIT     */
         LA    @01,@AL00304                                        0304
         BAL   @14,BLDVLTU                                         0304
*       IF ALSW=OFF&MLEN>F0C THEN   /* TEST THAT TEXT UNIT IS VALID  */
         TM    ALSW,B'10000000'                                    0305
         BNZ   @RF00305                                            0305
         LTR   MLEN,MLEN                                           0305
         BNP   @RF00305                                            0305
*         DO;                       /* MOVE UNITNAME TO DMCB         */
*           RFY                                                    0307
*             S99TUNIT BASED(S99TUBAS);                            0307
*           DMCBUNIT='';            /* INIT THE UNITNAME ENTRY       */
         MVI   DMCBUNIT(DMCBPTR),C' '                              0308
         MVC   DMCBUNIT+1(7,DMCBPTR),DMCBUNIT(DMCBPTR)             0308
*           DMCBUNIT(F1C:MLEN)=S99TUPAR(F1C:MLEN);/* MOVE IN THE   0309
*                                      UNITNAME                      */
         LR    @09,MLEN                                            0309
         BCTR  @09,0                                               0309
         EX    @09,@SM00948                                        0309
*         END;                      /* MOVE UNITNAME TO DMCB         */
*       GOTO CE0001@;               /* BRANCH TO END OF CASE         */
         B     CE0001@                                             0311
*     END UNITC;                    /* END OF SUBCASE UNIT NAME    0312
*                                      PROCESSING                    */
*                                                                  0312
*     /***************************************************************/
*     /*                                                             */
*     /* PROCESS SYSOUT CLASS KEY                                    */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0313
*SYSOUC:                                                           0313
*     DO;                           /* SUBCASE SYSOUT CLASS        0313
*                                      PROCESSING                    */
SYSOUC   DS    0H                                                  0314
*       CALL BLDPVTU(DALSYSOU,F1C); /* BUILD SYSOUT CLASS TEXT UNIT  */
         LA    @01,@AL00314                                        0314
         BAL   @14,BLDPVTU                                         0314
*       GOTO CE0001@;               /* BRANCH TO END OF CASE         */
         B     CE0001@                                             0315
*     END SYSOUC;                   /* END OF SUBCASE SYSOUT CLASS 0316
*                                      PROCESSING                    */
*                                                                  0316
*     /***************************************************************/
*     /*                                                             */
*     /* PROCESS SYSOUT PROGRAM NAME KEY                             */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0317
*SPGNMC:                                                           0317
*     DO;                           /* SUBCASE SYSOUT PROGRAM NAME 0317
*                                      PROCESSING                    */
SPGNMC   DS    0H                                                  0318
*       CALL BLDPVTU(DALSPGNM,F8C); /* BUILD PROGRAM NAME TEXT UNIT  */
         LA    @01,@AL00318                                        0318
         BAL   @14,BLDPVTU                                         0318
*       GOTO CE0001@;               /* BRANCH TO END OF CASE         */
         B     CE0001@                                             0319
*     END SPGNMC;                   /* END OF SUBCASE SYSOUT PROGRAM
*                                      NAME PROCESSING               */
*                                                                  0320
*     /***************************************************************/
*     /*                                                             */
*     /* PROCESS SYSOUT FORM NUMBER KEY                              */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0321
*SFMNOC:                                                           0321
*     DO;                           /* SUBCASE SYSOUT FORM NUMBER  0321
*                                      PROCESSING                    */
SFMNOC   DS    0H                                                  0322
*       CALL BLDPVTU(DALSFMNO,F4C); /* BUILD FORM NUMBER TEXT UNIT   */
         LA    @01,@AL00322                                        0322
         BAL   @14,BLDPVTU                                         0322
*       GOTO CE0001@;               /* BRANCH TO END OF CASE         */
         B     CE0001@                                             0323
*     END SFMNOC;                   /* END OF SUBCASE SYSOUT FORM  0324
*                                      NUMBER PROCESSING             */
*                                                                  0324
*     /***************************************************************/
*     /*                                                             */
*     /* PROCESS SYSOUT OUTPUT LIMIT KEY                             */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0325
*OUTLMC:                                                           0325
*     DO;                           /* SUBCASE SYSOUT OUTPUT LIMIT 0325
*                                      PROCESSING                    */
OUTLMC   DS    0H                                                  0326
*       ALBAS=ALBAS+F4C;            /* BUMP PLIST BASE TO PARM VALUE
*                                      ADDR                          */
         AL    ALBAS,@CF00039                                      0326
*       IF ALPTF31>F0C THEN         /* TEST FOR NON-NULL PARM VALUE  */
         L     @09,ALPTR(,ALBAS)                                   0327
         L     @09,ALPTF31(,@09)                                   0327
         LTR   @09,@09                                             0327
         BNP   @RF00327                                            0327
*         CALL BLDP3TU(DALOUTLM);   /* BUILD OUTPUT LIMIT TEXT UNIT  */
         LA    @01,@AL00328                                        0328
         BAL   @14,BLDP3TU                                         0328
*       GOTO CE0001@;               /* BRANCH TO END OF CASE         */
         B     CE0001@                                             0329
*     END OUTLMC;                   /* END OF SUBCASE SYSOUT OUTPUT
*                                      LIMIT PROCESSING              */
*                                                                  0330
*     /***************************************************************/
*     /*                                                             */
*     /* PROCESS SYSOUT COPIES KEY                                   */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0331
*COPYSC:                                                           0331
*     DO;                           /* SUBCASE SYSOUT COPIES       0331
*                                      PROCESSING                    */
COPYSC   DS    0H                                                  0332
*       ALBAS=ALBAS+F4C;            /* BUMP PLIST BASE TO PARM VALUE
*                                      ADDR                          */
         AL    ALBAS,@CF00039                                      0332
*       IF ALPTF31>F0C THEN         /* TEST FOR NON-NULL PARM VALUE  */
         L     @09,ALPTR(,ALBAS)                                   0333
         L     @06,ALPTF31(,@09)                                   0333
         LTR   @06,@06                                             0333
         BNP   @RF00333                                            0333
*         CALL BLDV1TU(DALCOPYS,ALPTB4C1);/* BUILD SYSOUT COPIES TEXT
*                                      UNIT                          */
         LA    @06,@CB00387                                        0334
         ST    @06,@AL00001                                        0334
         LA    @09,ALPTB4C1(,@09)                                  0334
         ST    @09,@AL00001+4                                      0334
         LA    @01,@AL00001                                        0334
         BAL   @14,BLDV1TU                                         0334
*       GOTO CE0001@;               /* BRANCH TO END OF CASE         */
         B     CE0001@                                             0335
*     END COPYSC;                   /* END OF SUBCASE SYSOUT COPIES
*                                      PROCESSING                    */
*                                                                  0336
*     /***************************************************************/
*     /*                                                             */
*     /* PROCESS LABEL TYPE KEY                                      */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0337
*LABELC:                                                           0337
*     DO;                           /* SUBCASE LABEL TYPE PROCESSING */
LABELC   DS    0H                                                  0338
*       IF ALPRB4F1^=F0C THEN       /* TEST FOR IMMEDIATE TEXT UNIT
*                                      KEY VALUE                     */
         CLI   ALPRB4F1(ALBAS),0                                   0338
         BE    @RF00338                                            0338
*         DO;                       /* BUILD LABEL TYPE TEXT UNIT  0339
*                                      FROM DIRECT PARM FIELD        */
*           CALL BLDV1TU(DALLABEL,ALPRB4C1);/* BUILD LABEL TYPE TEXT
*                                      UNIT                          */
         LA    @09,@CB00389                                        0340
         ST    @09,@AL00001                                        0340
         LA    @09,ALPRB4C1(,ALBAS)                                0340
         ST    @09,@AL00001+4                                      0340
         LA    @01,@AL00001                                        0340
         BAL   @14,BLDV1TU                                         0340
*           DMCBLBTY=ALPRB4C1;      /* DMCB LABEL TYPE FIELD VALUE   */
         MVC   DMCBLBTY(1,DMCBPTR),ALPRB4C1(ALBAS)                 0341
*         END;                      /* BUILD LABEL TYPE TEXT UNIT  0342
*                                      FROM DIRECT PARM FIELD        */
*       ELSE                                                       0343
*         DO;                       /* BUILD LABEL TYPE TEXT UNIT  0343
*                                      FROM INDIRECT PARM FIELD      */
         B     @RC00338                                            0343
@RF00338 DS    0H                                                  0344
*           ALBAS=ALBAS+F4C;        /* BUMP PLIST BASE TO PARM VALUE
*                                      ADDRESS                       */
         AL    ALBAS,@CF00039                                      0344
*           IF ALPTC1^=LBLNKC THEN  /* TEST FOR NON-NULL PARM VALUE  */
         L     @09,ALPTR(,ALBAS)                                   0345
         CLI   ALPTC1(@09),C' '                                    0345
         BE    @RF00345                                            0345
*             DO;                   /* NON-NULL PARM VALUE FIELD,  0346
*                                      OBTAIN TEXT UNIT PARM VALUE   */
*               CALL MATCH(LTYPEP,LENGTH(LTYPESTR),LTYPESTR,FTMP8);/*
*                                      GET TU PARM                   */
         ST    @09,@AL00001                                        0347
         LA    @09,@CF00930                                        0347
         ST    @09,@AL00001+4                                      0347
         LA    @09,LTYPESTR                                        0347
         ST    @09,@AL00001+8                                      0347
         LA    @09,FTMP8                                           0347
         ST    @09,@AL00001+12                                     0347
         LA    @01,@AL00001                                        0347
         BAL   @14,MATCH                                           0347
*               IF FTMP8^=F0C THEN  /* TEST FOR VALID PARM VALUE     */
         CLI   FTMP8,0                                             0348
         BE    @RF00348                                            0348
*                 DO;               /* VALID PARM VALUE              */
*                   CALL BLDV1TU(DALLABEL,FTMP8);/* BUILD LABEL TYPE
*                                      T U                           */
         LA    @09,@CB00389                                        0350
         ST    @09,@AL00001                                        0350
         LA    @09,FTMP8                                           0350
         ST    @09,@AL00001+4                                      0350
         LA    @01,@AL00001                                        0350
         BAL   @14,BLDV1TU                                         0350
*                   DMCBLBTY=BTMP8; /* DMCB LABEL TYPE FIELD         */
         MVC   DMCBLBTY(1,DMCBPTR),BTMP8                           0351
*                 END;              /* VALID PARM VALUE              */
*               ELSE                                               0353
*                 DO;               /* INVALID PARM VALUE            */
         B     @RC00348                                            0353
@RF00348 DS    0H                                                  0354
*                   ALSW=ON;        /* TERMINATE LIST PROCESSING     */
         OI    ALSW,B'10000000'                                    0354
*                   CALL PARMERR(LENGTH(DMCBMODL),DMCBMODL,LENGTH( 0355
*                       LTYPEKY),LTYPEKY,LENGTH(LTYPEP),LTYPEP);/* 0355
*                                      ISSUE ERROR MESSAGE           */
         MVC   @AL00001(20),@AL00355                               0355
         LA    @09,DMCBMODL(,DMCBPTR)                              0355
         ST    @09,@AL00001+4                                      0355
         L     @09,ALPTR(,ALBAS)                                   0355
         ST    @09,@AL00001+20                                     0355
         LA    @01,@AL00001                                        0355
         BAL   @14,PARMERR                                         0355
*                 END;              /* INVALID PARM VALUE            */
*             END;                  /* NON-NULL PARM VALUE FIELD,  0357
*                                      OBTAIN TEXT UNIT PARM VALUE   */
*           ELSE                                                   0358
*             DMCBLBTY=LHEX0C;      /* DMCB LABEL TYPE FIELD         */
         B     @RC00345                                            0358
@RF00345 MVI   DMCBLBTY(DMCBPTR),X'00'                             0358
*         END;                      /* BUILD LABEL TYPE TEXT UNIT  0359
*                                      FROM INDIRECT PARM FIELD      */
*       GOTO CE0001@;               /* BRANCH TO END OF CASE         */
         B     CE0001@                                             0360
*     END LABELC;                   /* END OF SUBCASE LABEL TYPE   0361
*                                      PROCESSING                    */
*                                                                  0361
*     /***************************************************************/
*     /*                                                             */
*     /* PROCESS LABEL DATA SET SEQUENCE NUMBER KEY                  */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0362
*DSSEQC:                                                           0362
*     DO;                           /* SUBCASE DATA SET SEQUENCE   0362
*                                      NUMBER PROCESSING             */
DSSEQC   DS    0H                                                  0363
*       IF ALPTF31>=F0C THEN        /* TEST FOR NON-NULL PARM VALUE  */
         L     @09,ALPTR(,ALBAS)                                   0363
         L     @09,ALPTF31(,@09)                                   0363
         LTR   @09,@09                                             0363
         BM    @RF00363                                            0363
*         CALL BLDP2TU(DALDSSEQ);   /* BUILD DS SEQUENCE NUMBER TEXT
*                                      UNIT                          */
         LA    @01,@AL00364                                        0364
         BAL   @14,BLDP2TU                                         0364
*       DMCBLBSQ=ALPTF31;           /* DMCB DS SEQNO FIELD VALUE     */
@RF00363 L     @09,ALPTR(,ALBAS)                                   0365
         L     @09,ALPTF31(,@09)                                   0365
         STH   @09,DMCBLBSQ(,DMCBPTR)                              0365
*       GOTO CE0001@;               /* BRANCH TO END OF CASE         */
         B     CE0001@                                             0366
*     END DSSEQC;                   /* END OF SUBCASE DATA SET     0367
*                                      SEQUENCE NUMBER PROCESSING    */
*                                                                  0367
*     /***************************************************************/
*     /*                                                             */
*     /* PROCESS LABEL PASSWORD PROTECT MODE KEY                     */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0368
*PASPRC:                                                           0368
*     DO;                           /* SUBCASE PASSWORD PROTECT MODE
*                                      PROCESSING                    */
PASPRC   DS    0H                                                  0369
*       IF ALPRB4F1^=F0C THEN       /* TEST FOR IMMEDIATE TEXT UNIT
*                                      KEY VALUE                     */
         CLI   ALPRB4F1(ALBAS),0                                   0369
         BE    @RF00369                                            0369
*         DO;                       /* BUILD PASSW PROT MODE TXT UNIT
*                                      FROM DIRECT PARM FIELD        */
*           CALL BLDV1TU(DALPASPR,ALPRB4C1);/* BUILD PASSW PROT MODE
*                                      TEXT UNIT                     */
         LA    @09,@CB00393                                        0371
         ST    @09,@AL00001                                        0371
         LA    @09,ALPRB4C1(,ALBAS)                                0371
         ST    @09,@AL00001+4                                      0371
         LA    @01,@AL00001                                        0371
         BAL   @14,BLDV1TU                                         0371
*           DMCBLBPS=ALPRB4C1;      /* DMCB PASSW PROT MODE VALUE    */
         MVC   DMCBLBPS(1,DMCBPTR),ALPRB4C1(ALBAS)                 0372
*         END;                      /* BUILD PASSW PROT MODE TXT UNIT
*                                      FROM DIRECT PARM FIELD        */
*       ELSE                                                       0374
*         DO;                       /* BUILD PASSW PROT MODE TEXT  0374
*                                      UNIT FROM INDIRECT PARM FIELD */
         B     @RC00369                                            0374
@RF00369 DS    0H                                                  0375
*           ALBAS=ALBAS+F4C;        /* BUMP PLIST BASE TO PARM VALUE
*                                      ADDRESS                       */
         AL    ALBAS,@CF00039                                      0375
*           IF ALPTC1^=LBLNKC THEN  /* TEST FOR NON-NULL PARM VALUE  */
         L     @09,ALPTR(,ALBAS)                                   0376
         CLI   ALPTC1(@09),C' '                                    0376
         BE    @RF00376                                            0376
*             DO;                   /* NON-NULL PARM VALUE FIELD,  0377
*                                      OBTAIN TEXT UNIT PARM VALUE   */
*               CALL MATCH(LPASPRP,LENGTH(LPSPRSTR),LPSPRSTR,FTMP8);
         ST    @09,@AL00001                                        0378
         LA    @09,@CF00184                                        0378
         ST    @09,@AL00001+4                                      0378
         LA    @09,LPSPRSTR                                        0378
         ST    @09,@AL00001+8                                      0378
         LA    @09,FTMP8                                           0378
         ST    @09,@AL00001+12                                     0378
         LA    @01,@AL00001                                        0378
         BAL   @14,MATCH                                           0378
*                                   /* GET TU PARM                   */
*               IF FTMP8^=F0C THEN  /* TEST FOR VALID PARM VALUE     */
         CLI   FTMP8,0                                             0379
         BE    @RF00379                                            0379
*                 DO;               /* VALID PARM VALUE              */
*                   CALL BLDV1TU(DALPASPR,FTMP8);/* BUILD PASSW PROT
*                                      MODE TEXT UNIT                */
         LA    @09,@CB00393                                        0381
         ST    @09,@AL00001                                        0381
         LA    @09,FTMP8                                           0381
         ST    @09,@AL00001+4                                      0381
         LA    @01,@AL00001                                        0381
         BAL   @14,BLDV1TU                                         0381
*                   DMCBLBPS=BTMP8; /* DMCB PASSW PROT MODE FIELD    */
         MVC   DMCBLBPS(1,DMCBPTR),BTMP8                           0382
*                 END;              /* VALID PARM VALUE              */
*               ELSE                                               0384
*                 DO;               /* INVALID PARM VALUE            */
         B     @RC00379                                            0384
@RF00379 DS    0H                                                  0385
*                   ALSW=ON;        /* TERMINATE LIST PROCESSING     */
         OI    ALSW,B'10000000'                                    0385
*                   CALL PARMERR(LENGTH(DMCBMODL),DMCBMODL,LENGTH( 0386
*                       LPASPRKY),LPASPRKY,LENGTH(LPASPRP),LPASPRP);
         MVC   @AL00001(20),@AL00386                               0386
         LA    @09,DMCBMODL(,DMCBPTR)                              0386
         ST    @09,@AL00001+4                                      0386
         L     @09,ALPTR(,ALBAS)                                   0386
         ST    @09,@AL00001+20                                     0386
         LA    @01,@AL00001                                        0386
         BAL   @14,PARMERR                                         0386
*                                   /* ISSUE ERROR MESSAGE           */
*                 END;              /* INVALID PARM VALUE            */
*             END;                  /* NON-NULL PARM VALUE FIELD,  0388
*                                      OBTAIN TEXT UNIT PARM VALUE   */
*           ELSE                                                   0389
*             DMCBLBPS=LHEX0C;      /* DMCB PASSW PROT MODE FIELD    */
         B     @RC00376                                            0389
@RF00376 MVI   DMCBLBPS(DMCBPTR),X'00'                             0389
*         END;                      /* BUILD PASSW PROT MODE TEXT  0390
*                                      UNIT FROM INDIRECT PARM FIELD */
*       GOTO CE0001@;               /* BRANCH TO END OF CASE         */
         B     CE0001@                                             0391
*     END PASPRC;                   /* END OF SUBCASE PASSWORD     0392
*                                      PROTECT MODE PROCESSING       */
*                                                                  0392
*     /***************************************************************/
*     /*                                                             */
*     /* PROCESS LABEL RETENTION PERIOD KEY                          */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0393
*RETPDC:                                                           0393
*     DO;                           /* SUBCASE RETENTION PERIOD    0393
*                                      PROCESSING                    */
RETPDC   DS    0H                                                  0394
*       IF ALPTF31>F0C THEN         /* TEST FOR NON-NULL PARM VALUE  */
         L     @09,ALPTR(,ALBAS)                                   0394
         L     @09,ALPTF31(,@09)                                   0394
         LTR   @09,@09                                             0394
         BNP   @RF00394                                            0394
*         CALL BLDP2TU(DALRETPD);   /* BUILD DS RETENTION PERIOD TEXT
*                                      UNIT                          */
         LA    @01,@AL00395                                        0395
         BAL   @14,BLDP2TU                                         0395
*       DMCBLBRT=ALPTF31;           /* DMCB DS RET PERIOD FIELD      */
@RF00394 L     @09,ALPTR(,ALBAS)                                   0396
         L     @09,ALPTF31(,@09)                                   0396
         STH   @09,DMCBLBRT(,DMCBPTR)                              0396
*       GOTO CE0001@;               /* BRANCH TO END OF CASE         */
         B     CE0001@                                             0397
*     END RETPDC;                   /* END OF SUBCASE RETENTION    0398
*                                      PERIOD PROCESSING             */
*                                                                  0398
*     /***************************************************************/
*     /*                                                             */
*     /* PROCESS DCB BLOCKSIZE KEY                                   */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0399
*BLKSZC:                                                           0399
*     DO;                           /* SUBCASE DCB BLKSIZE PROCESSING*/
BLKSZC   DS    0H                                                  0400
*       IF ALPTF31>F0C THEN         /* TEST FOR NON-NULL PARM VALUE  */
         L     @09,ALPTR(,ALBAS)                                   0400
         L     @09,ALPTF31(,@09)                                   0400
         LTR   @09,@09                                             0400
         BNP   @RF00400                                            0400
*         CALL BLDP2TU(DALBLKSZ);   /* BUILD DCB BLKSIZE TEXT UNIT   */
         LA    @01,@AL00401                                        0401
         BAL   @14,BLDP2TU                                         0401
*       DMCBDCBL=ALPTF31;           /* DMCB DCB BLOCKSIZE FIELD VALUE*/
@RF00400 L     @09,ALPTR(,ALBAS)                                   0402
         L     @09,ALPTF31(,@09)                                   0402
         STH   @09,DMCBDCBL(,DMCBPTR)                              0402
*       GOTO CE0001@;               /* BRANCH TO END OF CASE         */
         B     CE0001@                                             0403
*     END BLKSZC;                   /* END OF SUBCASE DCB BLKSIZE  0404
*                                      PROCESSING                    */
*                                                                  0404
*     /***************************************************************/
*     /*                                                             */
*     /* PROCESS DCB LRECL KEY                                       */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0405
*LRECLC:                                                           0405
*     DO;                           /* SUBCASE DCB LRECL PROCESSING  */
LRECLC   DS    0H                                                  0406
*       IF ALPTF31>F0C THEN         /* TEST FOR NON-NULL PARM VALUE  */
         L     @09,ALPTR(,ALBAS)                                   0406
         L     @09,ALPTF31(,@09)                                   0406
         LTR   @09,@09                                             0406
         BNP   @RF00406                                            0406
*         CALL BLDP2TU(DALLRECL);   /* BUILD DCB LOGICAL RECORD LEN
*                                      TEXT UNIT                     */
         LA    @01,@AL00407                                        0407
         BAL   @14,BLDP2TU                                         0407
*       DMCBDCLR=ALPTF31;           /* DMCB DCB LRECL FIELD VALUE    */
@RF00406 L     @09,ALPTR(,ALBAS)                                   0408
         L     @09,ALPTF31(,@09)                                   0408
         STH   @09,DMCBDCLR(,DMCBPTR)                              0408
*       GOTO CE0001@;               /* BRANCH TO END OF CASE         */
         B     CE0001@                                             0409
*     END LRECLC;                   /* END OF SUBCASE DCB LRECL    0410
*                                      PROCESSING                    */
*                                                                  0410
*     /***************************************************************/
*     /*                                                             */
*     /* PROCESS DCB RECFM KEY                                       */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0411
*RECFMC:                                                           0411
*     DO;                           /* SUBCASE DCB RECORD FORMAT   0411
*                                      PROCESSING                    */
RECFMC   DS    0H                                                  0412
*       ALBAS=ALBAS+F4C;            /* BUMP BASE TO RECFM PARM FIELD */
         AL    ALBAS,@CF00039                                      0412
*       IF ALPTC1^=LBLNKC THEN      /* TEST FOR NON-BLANK RECFM FIELD*/
         L     @09,ALPTR(,ALBAS)                                   0413
         CLI   ALPTC1(@09),C' '                                    0413
         BE    @RF00413                                            0413
*         DO;                       /* NON-BLANK RECFM PARM          */
*           CTMP=LHEX0C;            /* ZERO THE RECFM TRANSLATE FIELD*/
         MVI   CTMP,X'00'                                          0415
*           DO I=F1C TO LENGTH(RECFMP);/* LOOP TO CHECK SOURCE FIELD
*                                      BYTES                         */
         LA    I,1                                                 0416
@DL00416 DS    0H                                                  0417
*             IF RECFMP(I)^=LBLNKC THEN/* TEST FOR NON-BLANK FIELD 0417
*                                      BYTE                          */
         L     @09,ALPTR(,ALBAS)                                   0417
         LR    @01,@09                                             0417
         ALR   @01,I                                               0417
         BCTR  @01,0                                               0417
         CLI   RECFMP(@01),C' '                                    0417
         BE    @RF00417                                            0417
*               DO;                 /* NON-BLANK FIELD BYTE          */
*                 CALL MATCH(RECFMP(I),LENGTH(RECFMSTR),RECFMSTR,CTMPA)
*                     ;             /* GET TU PARM                   */
         BCTR  @09,0                                               0419
         LA    @09,RECFMP(I,@09)                                   0419
         ST    @09,@AL00001                                        0419
         LA    @09,@CF00931                                        0419
         ST    @09,@AL00001+4                                      0419
         LA    @09,RECFMSTR                                        0419
         ST    @09,@AL00001+8                                      0419
         LA    @09,CTMPA                                           0419
         ST    @09,@AL00001+12                                     0419
         LA    @01,@AL00001                                        0419
         BAL   @14,MATCH                                           0419
*                 IF CTMPA=LHEX0C THEN/* TEST FOR INVALID CHARACTER
*                                      IN SOURCE FIELD               */
         CLI   CTMPA,X'00'                                         0420
         BNE   @RF00420                                            0420
*                   DO;             /* INVALID CHARACTER IN SOURCE 0421
*                                      FIELD                         */
*                     CALL PARMERR(LENGTH(DMCBMODL),DMCBMODL,LENGTH(
*                         RECFMKY),RECFMKY,LENGTH(RECFMP),RECFMP);/*
*                                      ISSUE ERROR MESSAGE           */
         MVC   @AL00001(20),@AL00422                               0422
         LA    @09,DMCBMODL(,DMCBPTR)                              0422
         ST    @09,@AL00001+4                                      0422
         L     @09,ALPTR(,ALBAS)                                   0422
         ST    @09,@AL00001+20                                     0422
         LA    @01,@AL00001                                        0422
         BAL   @14,PARMERR                                         0422
*                     ALSW=ON;      /* TERMINATE LIST PROCESSING     */
         OI    ALSW,B'10000000'                                    0423
*                   END;            /* INVALID CHARACTER IN SOURCE 0424
*                                      FIELD                         */
*                 ELSE                                             0425
*                   CTMP=CTMP×CTMPA;/* VALID SOURCE CHAR, MOVE XLATED
*                                      VALUE TO PARM                 */
         B     @RC00420                                            0425
@RF00420 OC    CTMP(1),CTMPA                                       0425
*               END;                /* NON-BLANK FIELD BYTE          */
@RC00420 DS    0H                                                  0427
*           END;                    /* LOOP TO CHECK SOURCE FIELD  0427
*                                      BYTES                         */
@RF00417 AL    I,@CF00048                                          0427
         C     I,@CF00103                                          0427
         BNH   @DL00416                                            0427
*           IF ALSW=OFF&            /* TEST THAT PROCESSING IS NOT 0428
*                                      TERMINATED                    */
*               CTMP^=LHEX0C THEN   /* AND FOR NON-NULL SOURCE FIELD */
         TM    ALSW,B'10000000'                                    0428
         BNZ   @RF00428                                            0428
         CLI   CTMP,X'00'                                          0428
         BE    @RF00428                                            0428
*             DO;                   /* VALID PARM VALUE              */
*               CALL BLDV1TU(DALRECFM,CTMP);/* BUILD DCB RECFM TEXT
*                                      UNIT                          */
         LA    @09,@CB00475                                        0430
         ST    @09,@AL00001                                        0430
         LA    @09,CTMP                                            0430
         ST    @09,@AL00001+4                                      0430
         LA    @01,@AL00001                                        0430
         BAL   @14,BLDV1TU                                         0430
*               DMCBDCFM=CTMP;      /* DMCB LABEL TYPE FIELD         */
         MVC   DMCBDCFM(1,DMCBPTR),CTMP                            0431
*             END;                  /* VALID PARM VALUE              */
*         END;                      /* NON-BLANK RECFM PARM          */
*       ELSE                                                       0434
*         DO;                       /* NULL DCB RECFM PARM           */
         B     @RC00413                                            0434
@RF00413 DS    0H                                                  0435
*           DMCBDCFM=LHEX0C;        /* DMCB DCB RECFM FIELD          */
         MVI   DMCBDCFM(DMCBPTR),X'00'                             0435
*         END;                      /* NULL DCB RECFM PARM           */
*       GOTO CE0001@;               /* BRANCH TO END OF CASE         */
         B     CE0001@                                             0437
*     END RECFMC;                   /* END OF SUBCASE DCB RECORD   0438
*                                      FORMAT PROCESSING             */
*                                                                  0438
*     /***************************************************************/
*     /*                                                             */
*     /* PROCESS PASSWORD KEY                                        */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0439
*PASSWC:                                                           0439
*     DO;                           /* SUBCASE PASSWORD PROCESSING   */
PASSWC   DS    0H                                                  0440
*       CALL BLDVLTU(DALPASSW,F8C); /* BUILD PASSWORD TEXT UNIT      */
         LA    @01,@AL00440                                        0440
         BAL   @14,BLDVLTU                                         0440
*       GOTO CE0001@;               /* BRANCH TO END OF CASE         */
         B     CE0001@                                             0441
*     END PASSWC;                   /* END OF SUBCASE PASSWORD     0442
*                                      PROCESSING                    */
*                                                                  0442
*     /***************************************************************/
*     /*                                                             */
*     /* PROCESS SYSOUT REMOTE USER KEY                              */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0443
*SUSERC:                                                           0443
*     DO;                           /* SUBCASE SYSOUT REMOTE USER  0443
*                                      PROCESSING                    */
SUSERC   DS    0H                                                  0444
*       CALL BLDPVTU(DALSUSER,F7C); /* BUILD REMOTE USER TEXT UNIT   */
         LA    @01,@AL00444                                        0444
         BAL   @14,BLDPVTU                                         0444
*       GOTO CE0001@;               /* BRANCH TO END OF CASE         */
         B     CE0001@                                             0445
*     END SUSERC;                   /* END OF SUBCASE SYSOUT REMOTE
*                                      USER PROCESSING               */
*                                                                  0446
*     /***************************************************************/
*     /*                                                             */
*     /* PROCESS SYSOUT HOLD QUEUE KEY                               */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0447
*SHOLDC:                                                           0447
*     DO;                           /* SUBCASE SYSOUT HOLD QUEUE   0447
*                                      PROCESSING                    */
SHOLDC   DS    0H                                                  0448
*       ALBAS=ALBAS+F4C;            /* BUMP PLIST TO PARM VALUE ADDR */
         AL    ALBAS,@CF00039                                      0448
*       IF SHOLDP=LYESC THEN        /* TEST FOR 'YES' VALUE          */
         L     @09,ALPTR(,ALBAS)                                   0449
         CLC   SHOLDP(3,@09),@CC00678                              0449
         BNE   @RF00449                                            0449
*         CALL BLDV0TU(DALSHOLD);   /* MARK SYSOUT FOR HOLD QUEUE    */
         LA    @01,@AL00450                                        0450
         BAL   @14,BLDV0TU                                         0450
*       GOTO CE0001@;               /* BRANCH TO END OF CASE         */
         B     CE0001@                                             0451
*     END SHOLDC;                   /* END OF SUBCASE SYSOUT HOLD  0452
*                                      QUEUE PROCESSING              */
*                                                                  0452
*     /***************************************************************/
*     /*                                                             */
*     /* PROCESS UNDEFINED KEY                                       */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0453
*BAD:                                                              0453
*     DO;                           /* SUBCASE UNDEFINED OPCODE    0453
*                                      PROCESSING                    */
BAD      DS    0H                                                  0454
*       CHSTR867=ALOPT;             /* GET KEY FIELD                 */
         STCM  ALOPT,3,CHSTR867                                    0454
*       CHSTR88='0F'X;              /* TRANSLATE IT TO CHARACTER HEX */
         MVI   CHSTR88,X'0F'                                       0455
*       UNPK(CTEMP,CHSTR8);                                        0456
         UNPK  CTEMP(9),CHSTR8(8)                                  0456
*       TR(CTEMP,HEXTBL);                                          0457
         TR    CTEMP(9),HEXTBL                                     0457
*       DO;                         /* BLSDMSG                     0458
*                                      (ZZ2,F3102C,DMCBMSG,BLSDMSGS)
*                                      INSERT(DMCBMODL,CTEMP72)      */
*         IOPTLIST(1)=ADDR(IOPTLIST(4));/* CHAIN TO NEXT INSERT      */
         LA    @09,IOPTLIST+12                                     0459
         ST    @09,IOPTLIST                                        0459
*         IOPTLIST(2)=ADDR(DMCBMODL);/* INSERT NAME POINTER          */
         LA    @09,DMCBMODL(,DMCBPTR)                              0460
         ST    @09,IOPTLIST+4                                      0460
*         IOPTLIST(3)=0;            /* ZERO RESERVED FIELD           */
         SLR   @09,@09                                             0461
         ST    @09,IOPTLIST+8                                      0461
*         RFY                                                      0462
*           I015F BASED(ADDR(IOPTLIST(3)));/* ACCESS BYTES 1-2       */
*         I015F=LENGTH(DMCBMODL);   /* INSERT LENGTH                 */
         LA    @15,IOPTLIST+8                                      0463
         MVC   I015F(2,@15),@CH00046                               0463
*         IOPTLIST(4)=0;            /* LAST INSERT                   */
         ST    @09,IOPTLIST+12                                     0464
*         IOPTLIST(5)=ADDR(CTEMP72);/* INSERT NAME POINTER           */
         LA    @15,CTEMP72                                         0465
         ST    @15,IOPTLIST+16                                     0465
*         IOPTLIST(6)=0;            /* ZERO RESERVED FIELD           */
         ST    @09,IOPTLIST+20                                     0466
*         RFY                                                      0467
*           I015F BASED(ADDR(IOPTLIST(6)));/* ACCESS BYTES 1-2       */
*         I015F=LENGTH(CTEMP72);    /* INSERT LENGTH                 */
         LA    @09,IOPTLIST+20                                     0468
         MVC   I015F(2,@09),@CH00074                               0468
*         CALL BLSDMSG0(ZZ2,F3102C,DMCBMSG,BLSDMSGS,'00000000'B,ADDR(
*             IOPTLIST));           /* BUILD MESSAGE                 */
         L     @09,DMCBTVP(,DMCBPTR)                               0469
         ST    @09,@AL00001                                        0469
         LA    @09,@CF00646                                        0469
         ST    @09,@AL00001+4                                      0469
         LA    @09,DMCBMSG(,DMCBPTR)                               0469
         ST    @09,@AL00001+8                                      0469
         L     @09,DMCBMSGS(,DMCBPTR)                              0469
         ST    @09,@AL00001+12                                     0469
         LA    @09,@CB00712                                        0469
         ST    @09,@AL00001+16                                     0469
         LA    @09,IOPTLIST                                        0469
         ST    @09,@AFTEMPS+4                                      0469
         LA    @09,@AFTEMPS+4                                      0469
         ST    @09,@AL00001+20                                     0469
         L     @15,DMCBMSG0(,DMCBPTR)                              0469
         LA    @01,@AL00001                                        0469
         BALR  @14,@15                                             0469
*       END;                        /* BLSDMSG                     0470
*                                      (ZZ2,F3102C,DMCBMSG,BLSDMSGS)
*                                      INSERT(DMCBMODL,CTEMP72) BUILD
*                                      INVALID KEY MESSAGE           */
*       RETCODE=ERROR;              /* MARK ERROR                    */
         MVC   RETCODE(4),@CF00046                                 0471
*       ALSW=ON;                    /* TERMINATE LIST PROCESSING     */
         OI    ALSW,B'10000000'                                    0472
*       GOTO CE0001@;               /* BRANCH TO END OF CASE         */
         B     CE0001@                                             0473
*     END BAD;                      /* END OF SUBCASE UNDEFINED    0474
*                                      OPCODE PROCESSING             */
*CE0001@:                                                          0475
*   END DSNAL;                      /* END OF CASE ALLOCATION      0475
*                                      PARAMETER CASE STATEMENT      */
*   END KEYPROC;                                                   0476
@EL00004 DS    0H                                                  0476
@EF00004 DS    0H                                                  0476
@ER00004 LM    @14,@02,@SA00004                                    0476
         L     @04,@SA00004+20                                     0476
         LM    @06,@07,@SA00004+24                                 0476
         LM    @09,@12,@SA00004+32                                 0476
         BR    @14                                                 0476
*                                                                  0477
*   /*****************************************************************/
*   /*                                                               */
*   /* INTERNAL PROCEDURE TO BUILD A VARIABLE LENGTH TEXT UNIT       */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0477
*BLDVLTU:                                                          0477
*   PROCEDURE(OP,LIM);                                             0477
BLDVLTU  STM   @14,@02,@SA00005                                    0477
         ST    @04,@SA00005+20                                     0477
         STM   @06,@07,@SA00005+24                                 0477
         STM   @09,@12,@SA00005+32                                 0477
         MVC   @PC00005(8),0(@01)                                  0477
*   DCL                                                            0478
*     OP BIT(16);                   /* TEMP FOR TEXT UNIT KEY        */
*   DCL                                                            0479
*     LIM BIN(31);                  /* TEMP FOR MAX VALID MOVE LENGTH*/
*   ALBAS=ALBAS+F4C;                /* BUMP PLIST BASE TO PARM LENGTH
*                                      ADDR                          */
         LA    @09,4                                               0480
         ALR   ALBAS,@09                                           0480
*   MLEN=ALPTF31;                   /* GET MOVE LENGTH               */
         L     @01,ALPTR(,ALBAS)                                   0481
         L     MLEN,ALPTF31(,@01)                                  0481
*   ALBAS=ALBAS+F4C;                /* BUMP ALPARM BASE TO GET PTR TO
*                                      VL PARM FIELD                 */
         ALR   ALBAS,@09                                           0482
*   IF MLEN^=F0C THEN               /* TEST FOR NON-NULL PARAMETER   */
         SLR   @09,@09                                             0483
         CR    MLEN,@09                                            0483
         BE    @RF00483                                            0483
*     DO;                           /* LENGTH IS NOT EQUAL ZERO      */
*       IF MLEN<0×MLEN>LIM THEN     /* TEST FOR INVALID PARM LENGTH  */
         CR    MLEN,@09                                            0485
         BL    @RT00485                                            0485
         L     @09,@PC00005+4                                      0485
         C     MLEN,LIM(,@09)                                      0485
         BNH   @RF00485                                            0485
@RT00485 DS    0H                                                  0486
*         DO;                       /* INVALID PARAMETER LENGTH      */
*           CHSTR867=ALOPT;         /* GET KEY FIELD                 */
         STCM  ALOPT,3,CHSTR867                                    0487
*           CHSTR88=LHEX0FC;        /* TRANSLATE FIELD TO CHAR HEX   */
         MVI   CHSTR88,X'0F'                                       0488
*           UNPK(CTEMP,CHSTR8);                                    0489
         UNPK  CTEMP(9),CHSTR8(8)                                  0489
*           TR(CTEMP,HEXTBL);                                      0490
         TR    CTEMP(9),HEXTBL                                     0490
*           CTMPB=CTEMP72;          /* SAVE KEY VALUE FOR MESSAGE    */
         MVC   CTMPB(2),CTEMP72                                    0491
*           CHSTR847=MLEN;          /* GET PARAMETER LENGTH FIELD    */
         STCM  MLEN,15,CHSTR847                                    0492
*           CHSTR88=LHEX0FC;        /* TRANSLATE FIELD TO CHAR HEX   */
         MVI   CHSTR88,X'0F'                                       0493
*           UNPK(CTEMP,CHSTR8);                                    0494
         UNPK  CTEMP(9),CHSTR8(8)                                  0494
*           TR(CTEMP,HEXTBL);                                      0495
         TR    CTEMP(9),HEXTBL                                     0495
*           DO;                     /* BLSDMSG                     0496
*                                      (ZZ2,F3104C,DMCBMSG,BLSDMSGS)
*                                      INSERT(DMCBMODL,CTMPB,(ALPTCVL
*                                      ,LIM),CTEMP63)                */
*             IOPTLIST(1)=ADDR(IOPTLIST(4));/* CHAIN TO NEXT INSERT  */
         LA    @09,IOPTLIST+12                                     0497
         ST    @09,IOPTLIST                                        0497
*             IOPTLIST(2)=ADDR(DMCBMODL);/* INSERT NAME POINTER      */
         LA    @09,DMCBMODL(,DMCBPTR)                              0498
         ST    @09,IOPTLIST+4                                      0498
*             IOPTLIST(3)=0;        /* ZERO RESERVED FIELD           */
         SLR   @09,@09                                             0499
         ST    @09,IOPTLIST+8                                      0499
*             RFY                                                  0500
*               I015F BASED(ADDR(IOPTLIST(3)));/* ACCESS BYTES 1-2   */
*             I015F=LENGTH(DMCBMODL);/* INSERT LENGTH                */
         LA    @15,IOPTLIST+8                                      0501
         MVC   I015F(2,@15),@CH00046                               0501
*             IOPTLIST(4)=ADDR(IOPTLIST(7));/* CHAIN TO NEXT INSERT  */
         LA    @15,IOPTLIST+24                                     0502
         ST    @15,IOPTLIST+12                                     0502
*             IOPTLIST(5)=ADDR(CTMPB);/* INSERT NAME POINTER         */
         LA    @15,CTMPB                                           0503
         ST    @15,IOPTLIST+16                                     0503
*             IOPTLIST(6)=0;        /* ZERO RESERVED FIELD           */
         ST    @09,IOPTLIST+20                                     0504
*             RFY                                                  0505
*               I015F BASED(ADDR(IOPTLIST(6)));/* ACCESS BYTES 1-2   */
*             I015F=LENGTH(CTMPB);  /* INSERT LENGTH                 */
         LA    @15,IOPTLIST+20                                     0506
         MVC   I015F(2,@15),@CH00074                               0506
*             IOPTLIST(7)=ADDR(IOPTLIST(10));/* CHAIN TO NEXT INSERT */
         LA    @15,IOPTLIST+36                                     0507
         ST    @15,IOPTLIST+24                                     0507
*             IOPTLIST(8)=ADDR(ALPTCVL);/* INSERT NAME POINTER       */
         L     @15,ALPTR(,ALBAS)                                   0508
         ST    @15,IOPTLIST+28                                     0508
*             IOPTLIST(9)=0;        /* ZERO RESERVED FIELD           */
         ST    @09,IOPTLIST+32                                     0509
*             RFY                                                  0510
*               I015F BASED(ADDR(IOPTLIST(9)));/* ACCESS BYTES 1-2   */
*             I015F=LIM;            /* INSERT LENGTH                 */
         LA    @15,IOPTLIST+32                                     0511
         L     @14,@PC00005+4                                      0511
         L     @14,LIM(,@14)                                       0511
         STH   @14,I015F(,@15)                                     0511
*             IOPTLIST(10)=0;       /* LAST INSERT                   */
         ST    @09,IOPTLIST+36                                     0512
*             IOPTLIST(11)=ADDR(CTEMP63);/* INSERT NAME POINTER      */
         LA    @15,CTEMP63                                         0513
         ST    @15,IOPTLIST+40                                     0513
*             IOPTLIST(12)=0;       /* ZERO RESERVED FIELD           */
         ST    @09,IOPTLIST+44                                     0514
*             RFY                                                  0515
*               I015F BASED(ADDR(IOPTLIST(12)));/* ACCESS BYTES 1-2  */
*             I015F=LENGTH(CTEMP63);/* INSERT LENGTH                 */
         LA    @09,IOPTLIST+44                                     0516
         MVC   I015F(2,@09),@CH00103                               0516
*             CALL BLSDMSG0(ZZ2,F3104C,DMCBMSG,BLSDMSGS,'00000000'B,
*                 ADDR(IOPTLIST));  /* BUILD MESSAGE                 */
         L     @09,DMCBTVP(,DMCBPTR)                               0517
         ST    @09,@AL00001                                        0517
         LA    @09,@CF00650                                        0517
         ST    @09,@AL00001+4                                      0517
         LA    @09,DMCBMSG(,DMCBPTR)                               0517
         ST    @09,@AL00001+8                                      0517
         L     @09,DMCBMSGS(,DMCBPTR)                              0517
         ST    @09,@AL00001+12                                     0517
         LA    @09,@CB00712                                        0517
         ST    @09,@AL00001+16                                     0517
         LA    @09,IOPTLIST                                        0517
         ST    @09,@AFTEMPS+8                                      0517
         LA    @09,@AFTEMPS+8                                      0517
         ST    @09,@AL00001+20                                     0517
         L     @15,DMCBMSG0(,DMCBPTR)                              0517
         LA    @01,@AL00001                                        0517
         BALR  @14,@15                                             0517
*           END;                    /* BLSDMSG                     0518
*                                      (ZZ2,F3104C,DMCBMSG,BLSDMSGS)
*                                      INSERT(DMCBMODL,CTMPB,(ALPTCVL
*                                      ,LIM),CTEMP63) BUILD INVALID
*                                      VARIABLE LENGTH TEXT UNIT   0518
*                                      PARAMETER MESSAGE             */
*           RETCODE=ERROR;          /* MARK ERROR                    */
         MVC   RETCODE(4),@CF00046                                 0519
*           ALSW=ON;                /* TERMINATE LIST PROCESSING     */
         OI    ALSW,B'10000000'                                    0520
*         END;                      /* INVALID PARAMETER LENGTH      */
*       ELSE                                                       0522
*         DO;                       /* VALID PARAMETER LENGTH        */
         B     @RC00485                                            0522
@RF00485 DS    0H                                                  0523
*           TLEN=F6C;               /* TEXT UNIT LENGTH              */
         LA    TLEN,6                                              0523
*           S99TUPTR(S99TUPLX)=S99TUBAS;/* INIT TU PTR TO START OF TU*/
         LR    @09,S99TUPLX                                        0524
         SLA   @09,2                                               0524
         L     @06,S99TXTPP(,DMCBPTR)                              0524
         AL    @06,@CF00950                                        0524
         ST    S99TUBAS,S99TUPTR(@09,@06)                          0524
*           RFY                                                    0525
*             S99TUNIT BASED(S99TUBAS);/* BASE THE TEXT UNIT         */
*           S99TUKEY=OP;            /* INIT THE KEY                  */
         L     @09,@PC00005                                        0526
         MVC   S99TUKEY(2,S99TUBAS),OP(@09)                        0526
*           S99TUNUM=F1C;           /* NUMBER OF TU ENTRIES          */
         MVC   S99TUNUM(2,S99TUBAS),@CH00048                       0527
*           S99TULNG=MLEN;          /* ENTRY LENGTH                  */
         STCM  MLEN,3,S99TULNG(S99TUBAS)                           0528
*           S99TUPAR(F1C:MLEN)=ALPTCVL(F1C:MLEN);/* MOVE IN VL PARM  */
         LR    @09,MLEN                                            0529
         BCTR  @09,0                                               0529
         L     @01,ALPTR(,ALBAS)                                   0529
         EX    @09,@SM00951                                        0529
*         END;                      /* VALID PARAMETER LENGTH        */
*     END;                          /* LENGTH IS NOT EQUAL TO ZERO   */
*   END BLDVLTU;                    /* END INTERNAL PROCEDURE        */
@EL00005 DS    0H                                                  0532
@EF00005 DS    0H                                                  0532
@ER00005 LM    @14,@02,@SA00005                                    0532
         L     @04,@SA00005+20                                     0532
         LM    @06,@07,@SA00005+24                                 0532
         LM    @09,@12,@SA00005+32                                 0532
         BR    @14                                                 0532
*                                                                  0533
*   /*****************************************************************/
*   /*                                                               */
*   /* INTERNAL PROCEDURE TO BUILD A 0 BYTE PARAMETER TEXT UNIT      */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0533
*BLDV0TU:                                                          0533
*   PROCEDURE(OPA);                                                0533
BLDV0TU  STM   @14,@07,12(@13)                                     0533
         STM   @09,@12,56(@13)                                     0533
         MVC   @PC00006(4),0(@01)                                  0533
*   DCL                                                            0534
*     OPA BIT(16);                  /* TEMP FOR TEXT UNIT KEY        */
*   TLEN=F4C;                       /* TEXT UNIT LENGTH              */
         LA    TLEN,4                                              0535
*   S99TUPTR(S99TUPLX)=S99TUBAS;    /* INIT TU PTR TO START OF TU    */
         LR    @09,S99TUPLX                                        0536
         SLA   @09,2                                               0536
         L     @06,S99TXTPP(,DMCBPTR)                              0536
         AL    @06,@CF00950                                        0536
         ST    S99TUBAS,S99TUPTR(@09,@06)                          0536
*   RFY                                                            0537
*     S99TUNIT BASED(S99TUBAS);     /* BASE THE TEXT UNIT            */
*   S99TUKEY=OPA;                   /* INIT THE KEY                  */
         L     @09,@PC00006                                        0538
         MVC   S99TUKEY(2,S99TUBAS),OPA(@09)                       0538
*   S99TUNUM=F0C;                   /* NUMBER OF TU ENTRIES          */
         SLR   @09,@09                                             0539
         STCM  @09,3,S99TUNUM(S99TUBAS)                            0539
*   END BLDV0TU;                    /* END INTERNAL PROCEDURE        */
*                                                                  0540
@EL00006 DS    0H                                                  0540
@EF00006 DS    0H                                                  0540
@ER00006 LM    @14,@07,12(@13)                                     0540
         LM    @09,@12,56(@13)                                     0540
         BR    @14                                                 0540
*   /*****************************************************************/
*   /*                                                               */
*   /* INTERNAL PROCEDURE TO BUILD A 1 BYTE PARAMETER TEXT UNIT      */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0541
*BLDV1TU:                                                          0541
*   PROCEDURE(OPB,VALC1);                                          0541
BLDV1TU  STM   @14,@07,12(@13)                                     0541
         STM   @09,@12,56(@13)                                     0541
         MVC   @PC00007(8),0(@01)                                  0541
*   DCL                                                            0542
*     OPB BIT(16),                  /* TEXT UNIT KEY                 */
*     VALC1 CHAR(1);                /* TEXT UNIT PARAMETER VALUE     */
*   TLEN=F7C;                       /* TEXT UNIT LENGTH              */
         LA    TLEN,7                                              0543
*   S99TUPTR(S99TUPLX)=S99TUBAS;    /* INIT TU PTR TO START OF TU    */
         LR    @09,S99TUPLX                                        0544
         SLA   @09,2                                               0544
         L     @06,S99TXTPP(,DMCBPTR)                              0544
         AL    @06,@CF00950                                        0544
         ST    S99TUBAS,S99TUPTR(@09,@06)                          0544
*   RFY                                                            0545
*     S99TUNIT BASED(S99TUBAS);     /* BASE THE TEXT UNIT            */
*   S99TUKEY=OPB;                   /* INIT THE KEY                  */
         L     @09,@PC00007                                        0546
         MVC   S99TUKEY(2,S99TUBAS),OPB(@09)                       0546
*   S99TUNUM=F1C;                   /* NUMBER OF TU ENTRIES          */
         LA    @09,1                                               0547
         STCM  @09,3,S99TUNUM(S99TUBAS)                            0547
*   S99TULNG=F1C;                   /* ENTRY LENGTH                  */
         STCM  @09,3,S99TULNG(S99TUBAS)                            0548
*   S99TUPR1=VALC1;                 /* MOVE IN PARM                  */
         L     @09,@PC00007+4                                      0549
         MVC   S99TUPR1(1,S99TUBAS),VALC1(@09)                     0549
*   END BLDV1TU;                    /* END INTERNAL PROCEDURE        */
@EL00007 DS    0H                                                  0550
@EF00007 DS    0H                                                  0550
@ER00007 LM    @14,@07,12(@13)                                     0550
         LM    @09,@12,56(@13)                                     0550
         BR    @14                                                 0550
*                                                                  0551
*   /*****************************************************************/
*   /*                                                               */
*   /* INTERNAL PROCEDURE TO BUILD A 2 BYTE PARAMETER TEXT UNIT      */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0551
*BLDP2TU:                                                          0551
*   PROCEDURE(OPC);                                                0551
BLDP2TU  STM   @14,@02,12(@13)                                     0551
         STM   @04,@07,36(@13)                                     0551
         STM   @09,@12,56(@13)                                     0551
         MVC   @PC00008(4),0(@01)                                  0551
*   DCL                                                            0552
*     OPC BIT(16);                  /* TEMP FOR TEXT UNIT KEY        */
*   ALBAS=ALBAS+F4C;                /* BUMP PLIST BASE TO PARM VALUE
*                                      ADDR                          */
         AL    ALBAS,@CF00039                                      0553
*   TLEN=F8C;                       /* TEXT UNIT LENGTH              */
         LA    TLEN,8                                              0554
*   S99TUPTR(S99TUPLX)=S99TUBAS;    /* INIT TU PTR TO START OF TU    */
         LR    @09,S99TUPLX                                        0555
         SLA   @09,2                                               0555
         L     @06,S99TXTPP(,DMCBPTR)                              0555
         AL    @06,@CF00950                                        0555
         ST    S99TUBAS,S99TUPTR(@09,@06)                          0555
*   RFY                                                            0556
*     S99TUNIT BASED(S99TUBAS);     /* BASE THE TEXT UNIT            */
*   S99TUKEY=OPC;                   /* INIT THE KEY                  */
         L     @09,@PC00008                                        0557
         MVC   S99TUKEY(2,S99TUBAS),OPC(@09)                       0557
*   S99TUNUM=F1C;                   /* NUMBER OF TU ENTRIES          */
         MVC   S99TUNUM(2,S99TUBAS),@CH00048                       0558
*   S99TULNG=F2C;                   /* ENTRY LENGTH                  */
         MVC   S99TULNG(2,S99TUBAS),@CH00074                       0559
*   S99TUPR2=ALPTB3C2;              /* MOVE IN PARM                  */
         L     @09,ALPTR(,ALBAS)                                   0560
         MVC   S99TUPR2(2,S99TUBAS),ALPTB3C2(@09)                  0560
*   END BLDP2TU;                    /* END INTERNAL PROCEDURE        */
*                                                                  0561
@EL00008 DS    0H                                                  0561
@EF00008 DS    0H                                                  0561
@ER00008 LM    @14,@02,12(@13)                                     0561
         LM    @04,@07,36(@13)                                     0561
         LM    @09,@12,56(@13)                                     0561
         BR    @14                                                 0561
*   /*****************************************************************/
*   /*                                                               */
*   /* INTERNAL PROCEDURE TO BUILD A 3 BYTE PARAMETER TEXT UNIT      */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0562
*BLDP3TU:                                                          0562
*   PROCEDURE(OPD);                                                0562
BLDP3TU  STM   @14,@07,12(@13)                                     0562
         STM   @09,@12,56(@13)                                     0562
         MVC   @PC00009(4),0(@01)                                  0562
*   DCL                                                            0563
*     OPD BIT(16);                  /* TEMP FOR TEXT UNIT KEY        */
*   TLEN=F9C;                       /* TEXT UNIT LENGTH              */
         LA    TLEN,9                                              0564
*   S99TUPTR(S99TUPLX)=S99TUBAS;    /* INIT TU PTR TO START OF TU    */
         LR    @09,S99TUPLX                                        0565
         SLA   @09,2                                               0565
         L     @06,S99TXTPP(,DMCBPTR)                              0565
         AL    @06,@CF00950                                        0565
         ST    S99TUBAS,S99TUPTR(@09,@06)                          0565
*   RFY                                                            0566
*     S99TUNIT BASED(S99TUBAS);     /* BASE THE TEXT UNIT            */
*   S99TUKEY=OPD;                   /* INIT THE KEY                  */
         L     @09,@PC00009                                        0567
         MVC   S99TUKEY(2,S99TUBAS),OPD(@09)                       0567
*   S99TUNUM=F1C;                   /* NUMBER OF TU ENTRIES          */
         MVC   S99TUNUM(2,S99TUBAS),@CH00048                       0568
*   S99TULNG=F3C;                   /* ENTRY LENGTH                  */
         MVC   S99TULNG(2,S99TUBAS),@CH00103                       0569
*   S99TUPR3=ALPTB2C3;              /* MOVE IN PARM                  */
         L     @09,ALPTR(,ALBAS)                                   0570
         MVC   S99TUPR3(3,S99TUBAS),ALPTB2C3(@09)                  0570
*   END BLDP3TU;                    /* END INTERNAL PROCEDURE        */
@EL00009 DS    0H                                                  0571
@EF00009 DS    0H                                                  0571
@ER00009 LM    @14,@07,12(@13)                                     0571
         LM    @09,@12,56(@13)                                     0571
         BR    @14                                                 0571
*                                                                  0572
*   /*****************************************************************/
*   /*                                                               */
*   /* INTERNAL PROCEDURE TO BUILD A VARIABLE LENGTH TEXT UNIT FROM  */
*   /* LEFT JUSTIFIED FIELD PADDED WITH BLANKS. THE MAXIMUM LENGTH OF*/
*   /* THE FIELD IS IS SUPPLIED IN MAXL                              */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0572
*BLDPVTU:                                                          0572
*   PROCEDURE(OPE,MAXL);                                           0572
BLDPVTU  STM   @14,@02,12(@13)                                     0572
         ST    @04,36(,@13)                                        0572
         STM   @06,@07,44(@13)                                     0572
         STM   @09,@12,56(@13)                                     0572
         MVC   @PC00010(8),0(@01)                                  0572
*   DCL                                                            0573
*     OPE BIT(16);                  /* TEMP FOR TEXT UNIT KEY        */
*   DCL                                                            0574
*     MAXL BIN(31);                 /* TEMP FOR MAXIMUM MOVE LENGTH  */
*   DCL                                                            0575
*     II BIN(31);                   /* TEMP FOR DO LOOP COUNT        */
*   ALBAS=ALBAS+F4C;                /* BUMP PLIST BASE TO PARM VALUE
*                                      ADDR                          */
         AL    ALBAS,@CF00039                                      0576
*   DO II=F1C TO MAXL WHILE ALPTCVL(II)^=LBLNKC;/* FIND END OF STRING*/
         LA    II,1                                                0577
         B     @DE00577                                            0577
@DL00577 L     @09,ALPTR(,ALBAS)                                   0577
         ALR   @09,II                                              0577
         BCTR  @09,0                                               0577
         CLI   ALPTCVL(@09),C' '                                   0577
         BE    @DC00577                                            0577
*   END;                                                           0578
         AL    II,@CF00048                                         0578
@DE00577 L     @09,@PC00010+4                                      0578
         C     II,MAXL(,@09)                                       0578
         BNH   @DL00577                                            0578
@DC00577 DS    0H                                                  0579
*   MLEN=II-F1C;                    /* GET MOVE LENGTH               */
         LR    MLEN,II                                             0579
         BCTR  MLEN,0                                              0579
*   IF MLEN^=F0C THEN               /* TEST FOR NON-NULL PARAMETER   */
         LTR   MLEN,MLEN                                           0580
         BZ    @RF00580                                            0580
*     DO;                           /* LENGTH IS NOT EQUAL ZERO      */
*       TLEN=F6C;                   /* TEXT UNIT LENGTH              */
         LA    TLEN,6                                              0582
*       S99TUPTR(S99TUPLX)=S99TUBAS;/* INIT TU PTR TO START OF TU    */
         LR    @09,S99TUPLX                                        0583
         SLA   @09,2                                               0583
         L     @06,S99TXTPP(,DMCBPTR)                              0583
         AL    @06,@CF00950                                        0583
         ST    S99TUBAS,S99TUPTR(@09,@06)                          0583
*       RFY                                                        0584
*         S99TUNIT BASED(S99TUBAS); /* BASE THE TEXT UNIT            */
*       S99TUKEY=OPE;               /* INIT THE KEY                  */
         L     @09,@PC00010                                        0585
         MVC   S99TUKEY(2,S99TUBAS),OPE(@09)                       0585
*       S99TUNUM=F1C;               /* NUMBER OF TU ENTRIES          */
         MVC   S99TUNUM(2,S99TUBAS),@CH00048                       0586
*       S99TULNG=MLEN;              /* ENTRY LENGTH                  */
         STCM  MLEN,3,S99TULNG(S99TUBAS)                           0587
*       S99TUPAR(F1C:MLEN)=ALPTCVL(F1C:MLEN);/* MOVE IN VL PARM      */
         LR    @09,MLEN                                            0588
         BCTR  @09,0                                               0588
         L     @01,ALPTR(,ALBAS)                                   0588
         EX    @09,@SM00951                                        0588
*     END;                          /* LENGTH IS NOT EQUAL TO ZERO   */
*   END BLDPVTU;                    /* END INTERNAL PROCEDURE        */
@EL00010 DS    0H                                                  0590
@EF00010 DS    0H                                                  0590
@ER00010 LM    @14,@02,12(@13)                                     0590
         L     @04,36(,@13)                                        0590
         LM    @06,@07,44(@13)                                     0590
         LM    @09,@12,56(@13)                                     0590
         BR    @14                                                 0590
*                                                                  0591
*   /*****************************************************************/
*   /*                                                               */
*   /* PROCEDURE TO MATCH A VARIABLE LENGTH FIELD VALUE WITH A LIST  */
*   /* OF VALID VALUES AND RETURN A ONE BYTE TEXT UNIT PARAMETER     */
*   /* VALUE                                                         */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0591
*MATCH:                                                            0591
*   PROCEDURE(MATFLD,MATSTRL,MATSTR,MATVAL);                       0591
MATCH    STM   @14,@12,12(@13)                                     0591
         MVC   @PC00011(16),0(@01)                                 0591
*   DCL                                                            0592
*     MATFLD CHAR(*),               /* PARAMETER FIELD VALUE TO BE 0592
*                                      EXAMINED                      */
*     MATSTRL BIN(31),              /* LENGTH OF VALID VALUE STRING  */
*     MATSTR CHAR(*),               /* TEXT OF VALID VALUE STRING    */
*     MATVAL CHAR(1),               /* TEXT UNIT PARAMETER VALUE   0592
*                                      RETURNED                      */
*     MATLEN BIN(31),               /* LOCAL COPY OF MATSTRL         */
*     MATSW BIT(1),                 /* 1 IF MATCH FOUND              */
*     MATSK BIT(1),                 /* 1 IF NO MATCH WITH CURRENT  0592
*                                      VALID VALUE                   */
*     MATI BIN(31),                 /* VALID VALUE STRING INDEX      */
*     MATJ BIN(31),                 /* PARM FIELD VALUE INDEX        */
*     MATHEX0 BIT(8) CONSTANT('00'X),/* LITERAL HEX 0                */
*     MATSTARC CHAR(1) CONSTANT('*');/* LITERAL '*'                  */
*   MATVAL=MATHEX0;                 /* INIT RETURN VALUE TO NOT FOUND*/
         L     @05,@PC00011+12                                     0593
         MVI   MATVAL(@05),X'00'                                   0593
*   MATLEN=MATSTRL;                 /* MAKE LOCAL COPY OF STRING   0594
*                                      LENGTH                        */
         L     @02,@PC00011+4                                      0594
         L     MATLEN,MATSTRL(,@02)                                0594
*   MATSW=OFF;                      /* INIT MATCH FOUND SWITCH       */
         NI    MATSW,B'01111111'                                   0595
*   MATSK=OFF;                      /* INIT CURRENT NO MATCH SWITCH  */
         NI    MATSK,B'01111111'                                   0596
*   MATJ=F1C;                       /* INIT PARM FIELD INDEX         */
         LA    @05,1                                               0597
         LR    MATJ,@05                                            0597
*   DO MATI=F1C TO MATLEN WHILE MATSW=OFF;/* SCAN VALID VALUE STRING */
         LR    MATI,@05                                            0598
         B     @DE00598                                            0598
@DL00598 TM    MATSW,B'10000000'                                   0598
         BNZ   @DC00598                                            0598
*     IF MATSW=OFF THEN             /* TEST THAT CURRENT VALID VALUE
*                                      STRING MATCHES                */
         TM    MATSW,B'10000000'                                   0599
         BNZ   @RF00599                                            0599
*       DO;                         /* CURRENT VALID VALUE STRING  0600
*                                      MATCHES SO FAR                */
*         IF MATSTR(MATI)=MATSTARC THEN/* TEST VALID VALUE DELIMITER */
         L     @05,@PC00011+8                                      0601
         LR    @01,@05                                             0601
         ALR   @01,MATI                                            0601
         BCTR  @01,0                                               0601
         CLI   MATSTR(@01),C'*'                                    0601
         BNE   @RF00601                                            0601
*           DO;                     /* MATCH FOUND                   */
*             MATSW=ON;             /* PARM FIELD AND VALID VALUE  0603
*                                      MATCH                         */
         OI    MATSW,B'10000000'                                   0603
*             MATI=MATI+F1C;        /* BUMP VALID VALUE STRING TO  0604
*                                      RETURN VALUE                  */
         AL    MATI,@CF00048                                       0604
*             MATVAL=MATSTR(MATI);  /* RETURN TEXT UNIT PARAMETER  0605
*                                      VALUE                         */
         L     @15,@PC00011+12                                     0605
         ALR   @05,MATI                                            0605
         BCTR  @05,0                                               0605
         MVC   MATVAL(1,@15),MATSTR(@05)                           0605
*           END;                    /* MATCH FOUND                   */
*         ELSE                                                     0607
*           DO;                     /* MATCH NOT FOUND               */
         B     @RC00601                                            0607
@RF00601 DS    0H                                                  0608
*             IF MATFLD(MATJ)=MATSTR(MATI) THEN/* TEST BYTE FOR MATCH*/
         L     @05,@PC00011                                        0608
         L     @15,@PC00011+8                                      0608
         ALR   @05,MATJ                                            0608
         BCTR  @05,0                                               0608
         ALR   @15,MATI                                            0608
         BCTR  @15,0                                               0608
         CLC   MATFLD(1,@05),MATSTR(@15)                           0608
         BNE   @RF00608                                            0608
*               DO;                 /* BYTES MATCH                   */
*                 MATJ=MATJ+F1C;    /* BUMP PARM FIELD INDEX TO NEXT
*                                      BYTE                          */
         AL    MATJ,@CF00048                                       0610
*               END;                /* BYTES MATCH                   */
*             ELSE                                                 0612
*               DO;                 /* BYTES DO NOT MATCH            */
         B     @RC00608                                            0612
@RF00608 DS    0H                                                  0613
*                 MATSK=ON;         /* CURRENT VALID VALUE DOES NOT
*                                      MATCH                         */
         OI    MATSK,B'10000000'                                   0613
*                 MATJ=F1C;         /* RESET THE PARMFIELD INDEX FOR
*                                      NEXT MATCH TEST               */
         LA    MATJ,1                                              0614
*               END;                /* BYTES DO NOT MATCH            */
*           END;                    /* MATCH NOT FOUND               */
@RC00608 DS    0H                                                  0617
*       END;                        /* CURRENT VALID VALUE STRING  0617
*                                      MATCHES SO FAR                */
@RC00601 DS    0H                                                  0618
*     IF MATSK=ON&                  /* TEST FOR CURRENT VALID VALUE
*                                      DOES NOT MATCH                */
*         MATSTR(MATI)=MATSTARC THEN/* AND FOR VALID VALUE DELIMETER */
@RF00599 TM    MATSK,B'10000000'                                   0618
         BNO   @RF00618                                            0618
         L     @05,@PC00011+8                                      0618
         ALR   @05,MATI                                            0618
         BCTR  @05,0                                               0618
         CLI   MATSTR(@05),C'*'                                    0618
         BNE   @RF00618                                            0618
*       DO;                         /* END OF CURRENT VALUE, SET UP
*                                      TO TEST NEXT VALUE            */
*         MATI=MATI+F1C;            /* SKIP INDEX OVER RETURN VALUE  */
         AL    MATI,@CF00048                                       0620
*         MATSK=OFF;                /* STOP SKIPPING OVER NO MATCH 0621
*                                      VALUE                         */
         NI    MATSK,B'01111111'                                   0621
*       END;                        /* END OF CURRENT VALUE, SET UP
*                                      TO TEST NEXT VALUE            */
*   END;                            /* SCAN VALID VALUE STRING       */
@RF00618 AL    MATI,@CF00048                                       0623
@DE00598 CR    MATI,MATLEN                                         0623
         BNH   @DL00598                                            0623
@DC00598 DS    0H                                                  0624
*   END MATCH;                      /* END PROCEDURE                 */
@EL00011 DS    0H                                                  0624
@EF00011 DS    0H                                                  0624
@ER00011 LM    @14,@12,12(@13)                                     0624
         BR    @14                                                 0624
*                                                                  0625
*   /*****************************************************************/
*   /*                                                               */
*   /* PROCEDURE TO ISSUE A PARM VALUE ERROR MESSAGE                 */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0625
*PARMERR:                                                          0625
*   PROCEDURE(PARMODLL,PARMODL,PARKEYL,PARKEY,PARPARML,PARPARM);   0625
PARMERR  STM   @14,@12,@SA00012                                    0625
         MVC   @PC00012(24),0(@01)                                 0625
*   DCL                                                            0626
*     PARMODLL BIN(31),             /* ALLOCATION MODEL NAME INSERT
*                                      LENGTH                        */
*     PARMODL CHAR(*),              /* ALLOCATION MODEL NAME INSERT
*                                      TEXT                          */
*     PARKEYL BIN(31),              /* PARAMETER KEY NAME INSERT   0626
*                                      LENGTH                        */
*     PARKEY CHAR(*),               /* PARAMETER KEY NAME INSERT TEXT*/
*     PARPARML BIN(31),             /* PARMAETER FIELD INSERT LENGTH */
*     PARPARM CHAR(*);              /* PARAMETER FIELD INSERT TEXT   */
*   RETCODE=ERROR;                  /* MARK ERROR                    */
         MVC   RETCODE(4),@CF00046                                 0627
*   DO;                             /* BLSDMSG                     0628
*                                      (ZZ2,F3103C,DMCBMSG,BLSDMSGS)
*                                      INSERT((PARKEY,PARKEYL),(PARMO
*                                      DL,PARMODLL),(PARKEY,PARKEYL),
*                                      (PARPARM,PARPARML))           */
*     IOPTLIST(1)=ADDR(IOPTLIST(4));/* CHAIN TO NEXT INSERT          */
         LA    @05,IOPTLIST+12                                     0629
         ST    @05,IOPTLIST                                        0629
*     IOPTLIST(2)=ADDR(PARKEY);     /* INSERT NAME POINTER           */
         L     @05,@PC00012+12                                     0630
         ST    @05,IOPTLIST+4                                      0630
*     IOPTLIST(3)=0;                /* ZERO RESERVED FIELD           */
         SLR   @15,@15                                             0631
         ST    @15,IOPTLIST+8                                      0631
*     RFY                                                          0632
*       I015F BASED(ADDR(IOPTLIST(3)));/* ACCESS BYTES 1-2           */
*     I015F=PARKEYL;                /* INSERT LENGTH                 */
         LA    @14,IOPTLIST+8                                      0633
         L     @09,@PC00012+8                                      0633
         L     @09,PARKEYL(,@09)                                   0633
         STH   @09,I015F(,@14)                                     0633
*     IOPTLIST(4)=ADDR(IOPTLIST(7));/* CHAIN TO NEXT INSERT          */
         LA    @14,IOPTLIST+24                                     0634
         ST    @14,IOPTLIST+12                                     0634
*     IOPTLIST(5)=ADDR(PARMODL);    /* INSERT NAME POINTER           */
         L     @14,@PC00012+4                                      0635
         ST    @14,IOPTLIST+16                                     0635
*     IOPTLIST(6)=0;                /* ZERO RESERVED FIELD           */
         ST    @15,IOPTLIST+20                                     0636
*     RFY                                                          0637
*       I015F BASED(ADDR(IOPTLIST(6)));/* ACCESS BYTES 1-2           */
*     I015F=PARMODLL;               /* INSERT LENGTH                 */
         LA    @14,IOPTLIST+20                                     0638
         L     @08,@PC00012                                        0638
         L     @08,PARMODLL(,@08)                                  0638
         STH   @08,I015F(,@14)                                     0638
*     IOPTLIST(7)=ADDR(IOPTLIST(10));/* CHAIN TO NEXT INSERT         */
         LA    @14,IOPTLIST+36                                     0639
         ST    @14,IOPTLIST+24                                     0639
*     IOPTLIST(8)=ADDR(PARKEY);     /* INSERT NAME POINTER           */
         ST    @05,IOPTLIST+28                                     0640
*     IOPTLIST(9)=0;                /* ZERO RESERVED FIELD           */
         ST    @15,IOPTLIST+32                                     0641
*     RFY                                                          0642
*       I015F BASED(ADDR(IOPTLIST(9)));/* ACCESS BYTES 1-2           */
*     I015F=PARKEYL;                /* INSERT LENGTH                 */
         LA    @05,IOPTLIST+32                                     0643
         STH   @09,I015F(,@05)                                     0643
*     IOPTLIST(10)=0;               /* LAST INSERT                   */
         ST    @15,IOPTLIST+36                                     0644
*     IOPTLIST(11)=ADDR(PARPARM);   /* INSERT NAME POINTER           */
         L     @05,@PC00012+20                                     0645
         ST    @05,IOPTLIST+40                                     0645
*     IOPTLIST(12)=0;               /* ZERO RESERVED FIELD           */
         ST    @15,IOPTLIST+44                                     0646
*     RFY                                                          0647
*       I015F BASED(ADDR(IOPTLIST(12)));/* ACCESS BYTES 1-2          */
*     I015F=PARPARML;               /* INSERT LENGTH                 */
         LA    @05,IOPTLIST+44                                     0648
         L     @15,@PC00012+16                                     0648
         L     @15,PARPARML(,@15)                                  0648
         STH   @15,I015F(,@05)                                     0648
*     CALL BLSDMSG0(ZZ2,F3103C,DMCBMSG,BLSDMSGS,'00000000'B,ADDR(  0649
*         IOPTLIST));               /* BUILD MESSAGE                 */
         L     @05,DMCBTVP(,DMCBPTR)                               0649
         ST    @05,@AL00001                                        0649
         LA    @05,@CF00648                                        0649
         ST    @05,@AL00001+4                                      0649
         LA    @05,DMCBMSG(,DMCBPTR)                               0649
         ST    @05,@AL00001+8                                      0649
         L     @05,DMCBMSGS(,DMCBPTR)                              0649
         ST    @05,@AL00001+12                                     0649
         LA    @05,@CB00712                                        0649
         ST    @05,@AL00001+16                                     0649
         LA    @05,IOPTLIST                                        0649
         ST    @05,@AFTEMPS+12                                     0649
         LA    @05,@AFTEMPS+12                                     0649
         ST    @05,@AL00001+20                                     0649
         L     @15,DMCBMSG0(,DMCBPTR)                              0649
         LA    @01,@AL00001                                        0649
         BALR  @14,@15                                             0649
*   END;                            /* BLSDMSG                     0650
*                                      (ZZ2,F3103C,DMCBMSG,BLSDMSGS)
*                                      INSERT((PARKEY,PARKEYL),(PARMO
*                                      DL,PARMODLL),(PARKEY,PARKEYL),
*                                      (PARPARM,PARPARML)) ISSUE PARM
*                                      VALUE ERROR MESSAGE           */
*   END PARMERR;                    /* ISSUE PARM VALUE ERROR MESSAGE*/
*                                                                  0651
@EL00012 DS    0H                                                  0651
@EF00012 DS    0H                                                  0651
@ER00012 LM    @14,@12,@SA00012                                    0651
         BR    @14                                                 0651
*   /*****************************************************************/
*   /*                                                               */
*   /* END OF EXECUTABLE PROCEDURE STATEMENTS                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0652
*   DECLARE                         /* GENERAL PURPOSE REGISTERS     */
*     GPR01P PTR(31) REG(1);                                       0652
*   DECLARE                         /* COMMON VARIABLES              */
*     I256C CHAR(256) BASED,                                       0653
*     I031F FIXED(31) BASED,                                       0653
*     I031P PTR(31) BASED,                                         0653
*     I015F FIXED(15) BASED,                                       0653
*     I015P PTR(15) BASED,                                         0653
*     I008P PTR(8) BASED,                                          0653
*     I001C CHAR(1) BASED;                                         0653
*   DECLARE                                                        0654
*     IOPTLIST(12) PTR(31) BDY(WORD);/* OPTION LIST ARRAY            */
*   DCL                                                            0655
*     1 DASPATCH LOCAL BDY(DWORD),  /* PATCH AREA                    */
*      2 DASPATA(DASPATLN) PTR INIT((DASPATLN)0);                  0655
*   GEN DATA DEFS(HEXTBL);                                         0656
*   END BLSCABLD                                                   0657
*                                                                  0657
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (IEFZB4D0)                                       */
*/*%INCLUDE SYSLIB  (IEFZB4D2)                                       */
*                                                                  0657
*       ;                                                          0657
@EL00001 L     @13,4(,@13)                                         0657
@EF00001 L     @00,@SIZDATD                                        0657
         LR    @01,@10                                             0657
         BLSCFRES R,LV=(0),A=(1)
@ER00001 LM    @14,@12,12(@13)                                     0657
         BR    @14                                                 0657
@DATA    DS    0H
@CH00074 DC    H'2'
@SM00938 MVC   DMCBDDNM(0,DMCBPTR),S99TUPAR(S99TUBAS)
@SM00940 MVC   DMCBDSN(0,DMCBPTR),S99TUPAR(S99TUBAS)
@SM00942 MVC   DMCBMEMB(0,DMCBPTR),S99TUPAR(S99TUBAS)
@SM00946 MVC   DMCBVOL(0,DMCBPTR),S99TUPAR(S99TUBAS)
@SM00948 MVC   DMCBUNIT(0,DMCBPTR),S99TUPAR(S99TUBAS)
@SM00951 MVC   S99TUPAR(0,S99TUBAS),ALPTCVL(@01)
         DS    0F
@AL00148 DC    A(@CB00331)             LIST WITH   2 ARGUMENT(S)
         DC    A(@CF00046)
@AL00158 DC    A(@CB00333)             LIST WITH   2 ARGUMENT(S)
         DC    A(@CF00121)
@AL00168 DC    A(@CB00335)             LIST WITH   2 ARGUMENT(S)
         DC    A(@CF00046)
@AL00189 DC    A(@CF00046)             LIST WITH   5 ARGUMENT(S)
@AL00249 DC    A(@CB00343)             LIST WITH   1 ARGUMENT(S)
         DC    A(@CF00034)
         DC    A(@CC00682)
         DC    A(@CF00103)
@AL00214 DC    A(@CF00046)             LIST WITH   5 ARGUMENT(S)
@AL00254 DC    A(@CB00345)             LIST WITH   1 ARGUMENT(S)
         DC    A(@CF00325)
         DC    A(@CC00685)
         DC    A(@CF00081)
@AL00239 DC    A(@CF00046)             LIST WITH   5 ARGUMENT(S)
@AL00260 DC    A(@CB00347)             LIST WITH   1 ARGUMENT(S)
         DC    A(@CF00325)
         DC    A(@CC00688)
         DC    A(@CF00081)
@AL00267 DC    A(@CB00349)             LIST WITH   1 ARGUMENT(S)
@AL00274 DC    A(@CB00351)             LIST WITH   1 ARGUMENT(S)
@AL00279 DC    A(@CB00355)             LIST WITH   1 ARGUMENT(S)
@AL00289 DC    A(@CB00359)             LIST WITH   1 ARGUMENT(S)
@AL00294 DC    A(@CB00361)             LIST WITH   2 ARGUMENT(S)
         DC    A(@CF00057)
@AL00304 DC    A(@CB00371)             LIST WITH   2 ARGUMENT(S)
         DC    A(@CF00046)
@AL00314 DC    A(@CB00377)             LIST WITH   2 ARGUMENT(S)
         DC    A(@CF00048)
@AL00318 DC    A(@CB00379)             LIST WITH   2 ARGUMENT(S)
         DC    A(@CF00046)
@AL00322 DC    A(@CB00381)             LIST WITH   2 ARGUMENT(S)
         DC    A(@CF00039)
@AL00328 DC    A(@CB00383)             LIST WITH   1 ARGUMENT(S)
@AL00355 DC    A(@CF00046)             LIST WITH   5 ARGUMENT(S)
@AL00364 DC    A(@CB00391)             LIST WITH   1 ARGUMENT(S)
         DC    A(@CF00642)
         DC    A(@CC00691)
         DC    A(@CF00103)
@AL00386 DC    A(@CF00046)             LIST WITH   5 ARGUMENT(S)
@AL00395 DC    A(@CB00399)             LIST WITH   1 ARGUMENT(S)
         DC    A(@CF00694)
         DC    A(@CC00695)
         DC    A(@CF00046)
@AL00401 DC    A(@CB00425)             LIST WITH   1 ARGUMENT(S)
@AL00407 DC    A(@CB00461)             LIST WITH   1 ARGUMENT(S)
@AL00422 DC    A(@CF00046)             LIST WITH   5 ARGUMENT(S)
@AL00450 DC    A(@CB00507)             LIST WITH   1 ARGUMENT(S)
         DC    A(@CF00325)
         DC    A(@CC00698)
         DC    A(@CF00103)
@AL00440 DC    A(@CB00489)             LIST WITH   2 ARGUMENT(S)
         DC    A(@CF00046)
@AL00444 DC    A(@CB00505)             LIST WITH   2 ARGUMENT(S)
         DC    A(@CF00081)
@DATD    DSECT
         DS    0F
@SA00001 DS    18F
@SA00002 DS    12F
@SA00004 DS    12F
@SA00003 DS    13F
@SA00005 DS    12F
@PC00005 DS    2F
@PC00007 DS    2F
@PC00011 DS    4F
@SA00012 DS    15F
@PC00012 DS    6F
@PC00006 DS    1F
@PC00009 DS    1F
@PC00010 DS    2F
@PC00008 DS    1F
@AL00001 DS    6A
@AFTEMPS DS    5F
BLSCABLD CSECT
         DS    0F
@CF00048 DC    F'1'
@CH00048 EQU   @CF00048+2
@CF00103 DC    F'3'
@CH00103 EQU   @CF00103+2
@CF00039 DC    F'4'
@CF00057 DC    F'6'
@CF00081 DC    F'7'
@CF00046 DC    F'8'
@CH00046 EQU   @CF00046+2
@CF00325 DC    F'9'
@CF00642 DC    F'10'
@CF00034 DC    F'11'
@CF00694 DC    F'17'
@CF00184 DC    F'20'
@CF00931 DC    F'21'
@CF00930 DC    F'22'
@CF00929 DC    F'30'
@CF00086 DC    F'32'
@CF00121 DC    F'44'
@CF00646 DC    F'3102'
@CF00648 DC    F'3103'
@CF00650 DC    F'3104'
@CF00652 DC    F'3106'
@CF00654 DC    F'3107'
@CF00950 DC    F'-4'
@CF00664 DC    XL4'FFFFFFFE'
@CF00517 DC    XL4'005E'
@DATD    DSECT
         DS    0D
FTMP8    DS    FL1
         ORG   FTMP8
BTMP8    DS    BL1
         ORG   FTMP8+1
         DS    CL3
MODSTAT  DS    CL16
         ORG   MODSTAT
MODNAME  DS    CL8
RETCODE  DS    FL4
SUBCODE  DS    FL4
         ORG   MODSTAT+16
ALSW     DS    BL1
CTMP     DS    CL1
CTMPA    DS    CL1
CTMPB    DS    CL2
         DS    CL7
CHSTR8   DS    CL8
         ORG   CHSTR8
@NM00005 DS    CL3
CHSTR847 DS    CL4
         ORG   CHSTR847
@NM00006 DS    CL2
CHSTR867 DS    CL2
         ORG   CHSTR8+8
CTEMP    DS    CL9
         ORG   CTEMP
@NM00007 DS    CL5
CTEMP63  DS    CL3
         ORG   CTEMP63
@NM00008 DS    CL1
CTEMP72  DS    CL2
         ORG   CTEMP+9
MATSW    DS    BL1
MATSK    DS    BL1
         DS    CL1
IOPTLIST DS    12A
BLSCABLD CSECT
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
         DS    0D
@CC00695 DC    C'LABEL PASSPR MODE'
@CC00682 DC    C'DISP STATUS'
@CC00691 DC    C'LABEL TYPE'
@CC00685 DC    C'NORM DISP'
@CC00688 DC    C'COND DISP'
@CC00698 DC    C'DCB RECFM'
@CC00680 DC    C'BLSCABLD'
@CC00674 DC    C'CYL'
@CC00676 DC    C'TRK'
@CC00678 DC    C'YES'
@CB00331 DC    X'0001'
@CB00333 DC    X'0002'
@CB00335 DC    X'0003'
@CB00337 DC    X'0004'
@CB00339 DC    X'0005'
@CB00341 DC    X'0006'
@CB00343 DC    X'0007'
@CB00345 DC    X'0008'
@CB00347 DC    X'0009'
@CB00349 DC    X'000A'
@CB00351 DC    X'000B'
@CB00355 DC    X'000D'
@CB00357 DC    X'000E'
@CB00359 DC    X'000F'
@CB00361 DC    X'0010'
@CB00371 DC    X'0015'
@CB00377 DC    X'0018'
@CB00379 DC    X'0019'
@CB00381 DC    X'001A'
@CB00383 DC    X'001B'
@CB00387 DC    X'001D'
@CB00389 DC    X'001E'
@CB00391 DC    X'001F'
@CB00393 DC    X'0020'
@CB00399 DC    X'0023'
@CB00425 DC    X'0030'
@CB00461 DC    X'0042'
@CB00475 DC    X'0049'
@CB00489 DC    X'0050'
@CB00505 DC    X'0058'
@CB00507 DC    X'0059'
@CB00712 DC    B'00000000'
STATSTR  DS    CL20
         ORG   STATSTR
@NM00009 DC    CL4'OLD*'
@NM00010 DC    X'01'
@NM00011 DC    CL4'MOD*'
@NM00012 DC    X'02'
@NM00013 DC    CL4'NEW*'
@NM00014 DC    X'04'
@NM00015 DC    CL4'SHR*'
@NM00016 DC    X'08'
         ORG   STATSTR+20
DISPSTR  DS    CL30
         ORG   DISPSTR
@NM00017 DC    CL8'UNCATLG*'
@NM00018 DC    X'01'
@NM00019 DC    CL6'CATLG*'
@NM00020 DC    X'02'
@NM00021 DC    CL7'DELETE*'
@NM00022 DC    X'04'
@NM00023 DC    CL5'KEEP*'
@NM00024 DC    X'08'
         ORG   DISPSTR+30
LTYPESTR DS    CL22
         ORG   LTYPESTR
@NM00025 DC    CL3'NL*'
@NM00026 DC    X'01'
@NM00027 DC    CL3'NL*'
@NM00028 DC    X'01'
@NM00029 DC    CL3'SL*'
@NM00030 DC    X'02'
@NM00031 DC    CL4'BLP*'
@NM00032 DC    X'10'
@NM00033 DC    CL4'LTM*'
@NM00034 DC    X'21'
         ORG   LTYPESTR+22
LPSPRSTR DS    CL20
         ORG   LPSPRSTR
@NM00035 DC    CL9'PASSWORD*'
@NM00036 DC    X'10'
@NM00037 DC    CL9'NOPWREAD*'
@NM00038 DC    X'30'
         ORG   LPSPRSTR+20
RECFMSTR DS    CL21
         ORG   RECFMSTR
@NM00039 DC    CL2'A*'
@NM00040 DC    X'04'
@NM00041 DC    CL2'B*'
@NM00042 DC    X'10'
@NM00043 DC    CL2'F*'
@NM00044 DC    X'80'
@NM00045 DC    CL2'M*'
@NM00046 DC    X'02'
@NM00047 DC    CL2'S*'
@NM00048 DC    X'08'
@NM00049 DC    CL2'U*'
@NM00050 DC    X'C0'
@NM00051 DC    CL2'V*'
@NM00052 DC    X'40'
         ORG   RECFMSTR+21
         DS    CL6
DASPATCH DS    CL256
         ORG   DASPATCH
DASPATA  DC    64A(0)
         ORG   DASPATCH+256
CP0001@  DC    AL4(DDNAMC)
         DC    AL4(DSNAMC)
         DC    AL4(MEMBRC)
         DC    AL4(STATSC)
         DC    AL4(NDISPC)
         DC    AL4(CDISPC)
         DC    AL4(TRKC)
         DC    AL4(CYLC)
         DC    AL4(BLKLNC)
         DC    AL4(PRIMEC)
         DC    AL4(SECNDC)
         DC    AL4(BAD)
         DC    AL4(RLSEC)
         DC    AL4(SPFRMC)
         DC    AL4(ROUNDC)
         DC    AL4(VLSERC)
         DC    AL4(BAD)
         DC    AL4(BAD)
         DC    AL4(BAD)
         DC    AL4(BAD)
         DC    AL4(UNITC)
         DC    AL4(BAD)
         DC    AL4(BAD)
         DC    AL4(SYSOUC)
         DC    AL4(SPGNMC)
         DC    AL4(SFMNOC)
         DC    AL4(OUTLMC)
         DC    AL4(BAD)
         DC    AL4(COPYSC)
         DC    AL4(LABELC)
         DC    AL4(DSSEQC)
         DC    AL4(PASPRC)
         DC    AL4(BAD)
         DC    AL4(BAD)
         DC    AL4(RETPDC)
         DC    AL4(BAD)
         DC    AL4(BAD)
         DC    AL4(BAD)
         DC    AL4(BAD)
         DC    AL4(BAD)
         DC    AL4(BAD)
         DC    AL4(BAD)
         DC    AL4(BAD)
         DC    AL4(BAD)
         DC    AL4(BAD)
         DC    AL4(BAD)
         DC    AL4(BAD)
         DC    AL4(BLKSZC)
         DC    AL4(BAD)
         DC    AL4(BAD)
         DC    AL4(BAD)
         DC    AL4(BAD)
         DC    AL4(BAD)
         DC    AL4(BAD)
         DC    AL4(BAD)
         DC    AL4(BAD)
         DC    AL4(BAD)
         DC    AL4(BAD)
         DC    AL4(BAD)
         DC    AL4(BAD)
         DC    AL4(BAD)
         DC    AL4(BAD)
         DC    AL4(BAD)
         DC    AL4(BAD)
         DC    AL4(BAD)
         DC    AL4(LRECLC)
         DC    AL4(BAD)
         DC    AL4(BAD)
         DC    AL4(BAD)
         DC    AL4(BAD)
         DC    AL4(BAD)
         DC    AL4(BAD)
         DC    AL4(RECFMC)
         DC    AL4(BAD)
         DC    AL4(BAD)
         DC    AL4(BAD)
         DC    AL4(BAD)
         DC    AL4(BAD)
         DC    AL4(BAD)
         DC    AL4(PASSWC)
         DC    AL4(BAD)
         DC    AL4(BAD)
         DC    AL4(BAD)
         DC    AL4(BAD)
         DC    AL4(BAD)
         DC    AL4(BAD)
         DC    AL4(BAD)
         DC    AL4(SUSERC)
         DC    AL4(SHOLDC)
         DC    AL4(BAD)
         DC    AL4(BAD)
         DC    AL4(BAD)
         DC    AL4(BAD)
         DC    AL4(BAD)
BLSCABLD CSECT
*                         /*
HEXTBL   EQU   *-240
         DC    CL16'0123456789ABCDEF'
@DATD    DSECT
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
BLSCABLD CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
MATJ     EQU   @03
MATI     EQU   @02
MATLEN   EQU   @04
II       EQU   @06
I        EQU   @06
S99TUPLM EQU   @06
S99TUBAS EQU   @02
S99TUPLX EQU   @07
ALOPT    EQU   @06
TLEN     EQU   @08
MLEN     EQU   @05
ALBAS    EQU   @03
S99TUFP  EQU   @03
DMCBPTR  EQU   @04
GPR01P   EQU   @01
DMCB     EQU   0
DMCBTVP  EQU   DMCB+8
DMCBFTY  EQU   DMCB+20
DMCBVSF  EQU   DMCBFTY
DMCBOPN  EQU   DMCB+21
DMCBRMOD EQU   DMCB+23
DMCBOUT  EQU   DMCBRMOD
DMCBOPTS EQU   DMCB+24
DMCBGKY  EQU   DMCBOPTS
DMCBMFLG EQU   DMCB+28
DMCBBUFP EQU   DMCB+32
DMCBKEYP EQU   DMCB+44
DMCBMSG  EQU   DMCB+52
DMCBRI   EQU   DMCB+64
DMCBMSG0 EQU   DMCB+68
DMCBMSGS EQU   DMCB+72
DMCBFRE  EQU   DMCB+88
DMCBEOB  EQU   DMCB+92
DMCBACBE EQU   DMCB+124
DMCBDDNM EQU   DMCB+260
DMCBVOL  EQU   DMCB+268
DMCBUNIT EQU   DMCB+276
DMCBDSN  EQU   DMCB+284
DMCBMODL EQU   DMCB+348
DMCBMEMB EQU   DMCB+356
DMCBSTAT EQU   DMCB+366
DMCBDISP EQU   DMCB+367
DMCBSPTY EQU   DMCB+369
DMCBSPPR EQU   DMCB+372
DMCBSPSE EQU   DMCB+376
DMCBSPEC EQU   DMCB+380
DMCBSPRL EQU   DMCBSPEC
DMCBSPCT EQU   DMCBSPEC
DMCBSPRN EQU   DMCBSPEC
DMCBLBTY EQU   DMCB+382
DMCBLBPS EQU   DMCB+383
DMCBLBSQ EQU   DMCB+384
DMCBLBRT EQU   DMCB+386
DMCBDCFM EQU   DMCB+389
DMCBDCLR EQU   DMCB+390
DMCBDCBL EQU   DMCB+392
DMCBDRBP EQU   DMCB+400
DMCBAMS  EQU   DMCB+416
DMCBAUDT EQU   DMCB+568
DMCBLSCP EQU   DMCBAUDT+16
DMCBWRK  EQU   DMCB+648
S99TUPL  EQU   0
S99TUPTR EQU   S99TUPL
S99TUP   EQU   0
S99TUNIT EQU   0
S99TUKEY EQU   S99TUNIT
S99TUNUM EQU   S99TUNIT+2
S99TUENT EQU   S99TUNIT+4
S99TULNG EQU   S99TUENT
S99TUPAR EQU   S99TUENT+2
S99TUFLD EQU   0
BLSDMSGS EQU   0
BLSDMSG0 EQU   0
ZZ2      EQU   0
ALPTR    EQU   0
ALOP     EQU   ALPTR
ALVL     EQU   ALOP
ALPRB4C1 EQU   ALPTR+3
ALPRB4F1 EQU   ALPRB4C1
ALPTF31  EQU   0
ALPTB2C3 EQU   ALPTF31+1
ALPTB3C2 EQU   ALPTB2C3+1
ALPTB4C1 EQU   ALPTB3C2+1
ALPTC1   EQU   0
ALPTCVL  EQU   0
STATSP   EQU   0
NDISPP   EQU   0
CDISPP   EQU   0
LTYPEP   EQU   0
LPASPRP  EQU   0
RECFMP   EQU   0
SHOLDP   EQU   0
I015F    EQU   0
CL0001@  EQU   0
DMCBDMGR EQU   0
DMCBRQC  EQU   0
I001C    EQU   0
I008P    EQU   0
I015P    EQU   0
I031F    EQU   0
I031P    EQU   0
I256C    EQU   0
MODELNAM EQU   0
SFMNOP   EQU   0
SPGNMP   EQU   0
SUSERP   EQU   0
SYSOUP   EQU   0
OP       EQU   0
LIM      EQU   0
OPA      EQU   0
OPB      EQU   0
VALC1    EQU   0
OPC      EQU   0
OPD      EQU   0
OPE      EQU   0
MAXL     EQU   0
MATFLD   EQU   0
MATSTRL  EQU   0
MATSTR   EQU   0
MATVAL   EQU   0
PARMODLL EQU   0
PARMODL  EQU   0
PARKEYL  EQU   0
PARKEY   EQU   0
PARPARML EQU   0
PARPARM  EQU   0
DMCBVSM  EQU   DMCBAMS
DMCBQSM  EQU   DMCBAMS
DMAL     EQU   DMCBWRK
DMALMODA EQU   DMAL+4
DMALPRMP EQU   DMAL+8
DMALDYRB EQU   DMAL+16
DMALTUPM EQU   DMAL+36
DMALTUBS EQU   DMAL+40
DMALTUPL EQU   DMAL+44
DMALTUS  EQU   DMAL+172
DMALEND  EQU   DMAL+1196
S99RBPTR EQU   DMCBDRBP
S99RB    EQU   DMALDYRB
S99FLAG1 EQU   S99RB+2
S99FLG11 EQU   S99FLAG1
S99RSC   EQU   S99RB+4
S99TXTPP EQU   S99RB+8
S99FLAG2 EQU   S99RB+16
S99FLG21 EQU   S99FLAG2
S99FLG22 EQU   S99FLAG2+1
S99TUPR1 EQU   S99TUPAR
S99TUPR2 EQU   S99TUPAR
S99TUPR3 EQU   S99TUPAR
CHSTR88  EQU   CHSTR8+7
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
S99FLG24 EQU   S99FLAG2+3
S99FLG23 EQU   S99FLAG2+2
S99PCINT EQU   S99FLG22
S99UDEVT EQU   S99FLG22
S99MOUNT EQU   S99FLG21
S99CATLG EQU   S99FLG21
S99TIONQ EQU   S99FLG21
S99OFFLN EQU   S99FLG21
S99WTUNT EQU   S99FLG21
S99NORES EQU   S99FLG21
S99WTDSN EQU   S99FLG21
S99WTVOL EQU   S99FLG21
S99RSV01 EQU   S99RB+12
S99INFO  EQU   S99RSC+2
S99ERROR EQU   S99RSC
S99FLG12 EQU   S99FLAG1+1
S99JBSYS EQU   S99FLG11
S99NOMNT EQU   S99FLG11
S99NOCNV EQU   S99FLG11
S99ONCNV EQU   S99FLG11
S99VERB  EQU   S99RB+1
S99RBLN  EQU   S99RB
S99RBPND EQU   S99RBPTR
DMALMODP EQU   DMAL+12
DMALID   EQU   DMAL
DMCBRES7 EQU   DMCBQSM+96
DMCBDCB  EQU   DMCBQSM
DMCBACB  EQU   DMCBVSM+76
DMCBRPL  EQU   DMCBVSM
@NM00004 EQU   ALPTB3C2
@NM00003 EQU   ALPTB2C3
@NM00002 EQU   ALPTF31
@NM00001 EQU   ALPTR+1
S99TUPRM EQU   S99TUFLD+2
S99TULEN EQU   S99TUFLD
S99TUPND EQU   S99TUP
S99TUPLN EQU   S99TUPTR
DMCBRES8 EQU   DMCB+640
DMCBMODN EQU   DMCB+632
DMCBCARY EQU   DMCBAUDT+20
DMCBCLC  EQU   DMCBAUDT+12
DMCBOPC  EQU   DMCBAUDT+8
DMCBFRC  EQU   DMCBAUDT+4
DMCBALC  EQU   DMCBAUDT
DMCBFR   EQU   DMCB+412
DMCBRES6 EQU   DMCB+410
DMCBIRSC EQU   DMCB+408
DMCBSUBC EQU   DMCB+404
DMCBRSZM EQU   DMCB+398
DMCBRSZA EQU   DMCB+396
DMCBCISZ EQU   DMCB+394
DMCBRES5 EQU   DMCB+388
DMCBRES4 EQU   DMCB+381
DMCBSPRS EQU   DMCBSPEC
DMCBODIS EQU   DMCB+368
DMCBRES3 EQU   DMCB+364
DMCBRES9 EQU   DMCB+340
DMCBPID  EQU   DMCB+332
DMCBTYPE EQU   DMCB+328
DMCBDSOR EQU   DMCB+274
DMCBSYNM EQU   DMCB+132
DMCBRPLF EQU   DMCB+128
DMCBDCBE EQU   DMCBACBE
DMCBARC  EQU   DMCB+120
DMCBCPC  EQU   DMCB+116
DMCBRET  EQU   DMCB+112
DMCBSTL  EQU   DMCB+96
DMCBRES2 EQU   DMCB+85
DMCBSPID EQU   DMCB+84
DMCBRESC EQU   DMCB+80
DMCBZZ1P EQU   DMCB+76
DMCBRRL  EQU   DMCB+60
DMCBRBA  EQU   DMCB+56
DMCBKEYL EQU   DMCB+48
DMCBKPC  EQU   DMCBKEYP
DMCBORL  EQU   DMCB+40
DMCBBLEN EQU   DMCB+36
DMCBBFPC EQU   DMCBBUFP
DMCBRES1 EQU   DMCB+31
DMCBACCM EQU   DMCB+30
DMCBREJ  EQU   DMCB+29
DMCBRESB EQU   DMCBMFLG
DMCBFMOD EQU   DMCBMFLG
DMCBLOPT EQU   DMCB+27
DMCBLRM  EQU   DMCB+26
DMCBLRQ  EQU   DMCB+25
DMCBOPRS EQU   DMCBOPTS
DMCBLRD  EQU   DMCBOPTS
DMCBBWD  EQU   DMCBOPTS
DMCBUPD  EQU   DMCBOPTS
DMCBAPX  EQU   DMCBOPTS
DMCBRNO  EQU   DMCBGKY
DMCBKYD  EQU   DMCBOPTS
DMCBRMRS EQU   DMCBRMOD
DMCBRM5  EQU   DMCBRMOD
DMCBRM6  EQU   DMCBRMOD
DMCBTMP  EQU   DMCBOUT
DMCBRQST EQU   DMCB+22
DMCBRESA EQU   DMCBOPN
DMCBSOUT EQU   DMCBOPN
DMCBSIN  EQU   DMCBOPN
DMCBKSF  EQU   DMCBFTY
DMCBFTRS EQU   DMCBFTY
DMCBSHF  EQU   DMCBFTY
DMCBIRL  EQU   DMCB+16
DMCBRTC  EQU   DMCB+12
DMCBNEXT EQU   DMCB+4
DMCBID   EQU   DMCB
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RF00089 EQU   @EL00002
@RC00093 EQU   @EL00002
@RF00123 EQU   @EL00003
CE0001@  EQU   @EL00004
@RF00483 EQU   @EL00005
@RC00485 EQU   @EL00005
@RF00580 EQU   @EL00010
@RF00149 EQU   CE0001@
@RF00159 EQU   CE0001@
@RF00169 EQU   CE0001@
@RF00193 EQU   CE0001@
@RF00197 EQU   CE0001@
@RF00218 EQU   CE0001@
@RF00222 EQU   CE0001@
@RF00244 EQU   CE0001@
@RF00295 EQU   CE0001@
@RF00305 EQU   CE0001@
@RF00327 EQU   CE0001@
@RF00333 EQU   CE0001@
@RC00338 EQU   CE0001@
@RC00345 EQU   CE0001@
@RC00369 EQU   CE0001@
@RC00376 EQU   CE0001@
@RC00413 EQU   CE0001@
@RF00449 EQU   CE0001@
@RC00348 EQU   @RC00345
@RC00379 EQU   @RC00376
@RF00428 EQU   @RC00413
@ENDDATA EQU   *
         END   BLSCABLD,(C'PLS1948',0701,78062)
