         TITLE 'BLSCGETT -- IPCS DATA ACCESS SERVICES GET EXECUTOR     *
                        '
*     /* CHANGE ACTIVITY
*    THIS MODULE IS WRITTEN FOR @G57LPSR
BLSCGETT CSECT ,                                                   0002
@MAINENT DS    0H                                                  0002
         USING *,@15                                               0002
         B     @PROLOG                                             0002
         DC    AL1(16)                                             0002
         DC    C'BLSCGETT  78.062'                                 0002
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                     0002
         BALR  @12,0                                               0002
@PSTART  DS    0H                                                  0002
         USING @PSTART,@12                                         0002
         L     @00,@SIZDATD                                        0002
         BLSCGETS R,LV=(0)
         LR    @11,@01                                             0002
         USING @DATD,@11                                           0002
         ST    @13,@SA00001+4                                      0002
         LM    @00,@01,20(@13)                                     0002
         ST    @11,8(,@13)                                         0002
         LR    @13,@11                                             0002
*   DMCBPTR=GPR01P;                 /* ESTABLISH ADDRESSIBILITY TO 0026
*                                      DMCB                          */
         LR    DMCBPTR,GPR01P                                      0026
*   RFY                                                            0027
*     GPR01P UNRSTD;                                               0027
*   MODNAME=LMODNMC;                /* MARK AUTOMATIC AREA           */
         MVC   MODNAME(8),@CC00572                                 0028
*   SUBCODE=F0C;                    /* SUB-ROUTINE RETURN CODE       */
         SLR   @10,@10                                             0029
         ST    @10,SUBCODE                                         0029
*   DMCBRTC=F0C;                    /* WE ARE SUCCESSFUL UNTIL WE  0030
*                                      FAIL                          */
*                                                                  0030
         ST    @10,DMCBRTC(,DMCBPTR)                               0030
*   /*****************************************************************/
*   /*                                                               */
*   /* FIRST DECIDE WHETHER DMCB IS OPEN                             */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0031
*   IF DMCBSIN=OFF THEN             /* DMCB NOT OPEN FOR INPUT       */
         TM    DMCBSIN(DMCBPTR),B'10000000'                        0031
         BNZ   @RF00031                                            0031
*     DO;                           /* DMCB NOT OPEN                 */
*       DMCBRTC=INVRQ;              /* INDICATE INVALID REQUEST      */
         MVC   DMCBRTC(4,DMCBPTR),@CF00041                         0033
*       DMCBREJ=F0C;                /* REQ REJECTED SINCE DMCB IS  0034
*                                      CLOSED                        */
         MVI   DMCBREJ(DMCBPTR),X'00'                              0034
*     END;                          /* DMCB NOT OPEN                 */
*   ELSE                                                           0036
*     DO;                           /* DMCB IS OPEN                  */
         B     @RC00031                                            0036
@RF00031 DS    0H                                                  0037
*                                                                  0037
*       /*************************************************************/
*       /*                                                           */
*       /* QSAM FILE                                                 */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0037
*       IF DMCBVSF=OFF THEN         /* TEST FOR QSAM FILE            */
         TM    DMCBVSF(DMCBPTR),B'00000001'                        0037
         BNZ   @RF00037                                            0037
*         DO;                       /* QSAM FILE                     */
*           DCBPTR=ADDR(DMCBDCB);   /* ESTABLISH ADDRESSIBILITY TO 0039
*                                      DCB                           */
         LA    DCBPTR,DMCBDCB(,DMCBPTR)                            0039
*           IF DMCBUPD=ON THEN      /* GET FOR UPDATE NOT ALLOWED FOR
*                                      QSAM                          */
         TM    DMCBUPD(DMCBPTR),B'00010000'                        0040
         BNO   @RF00040                                            0040
*             DO;                   /* GET FOR UPDATE NOT ALLOWED    */
*               DMCBREJ=F1C;        /* INDICATE REJECT REASON        */
         MVI   DMCBREJ(DMCBPTR),X'01'                              0042
*               DMCBRTC=INVRQ;      /* INVALID REQUEST               */
         MVC   DMCBRTC(4,DMCBPTR),@CF00041                         0043
*             END;                  /* GET FOR UPDATE NOT ALLOWED    */
*           IF DMCBKYD=ON           /* KEYED ACCESS NOT ALLOWED FOR
*                                      QSAM                          */
*               ×DMCBRNO=ON THEN    /* REL RECORD ACCESS NOT ALLOWED
*                                      FOR QSAM                      */
@RF00040 TM    DMCBKYD(DMCBPTR),B'11000000'                        0045
         BZ    @RF00045                                            0045
*             DO;                   /* KEYED OR REL RECORD ACCESS NOT
*                                      ALLOWED                       */
*               DMCBREJ=F2C;        /* INDICATE REASON FOR REJECTION */
         MVI   DMCBREJ(DMCBPTR),X'02'                              0047
*               DMCBRTC=INVRQ;      /* INDICATE INVALID REQUEST      */
         MVC   DMCBRTC(4,DMCBPTR),@CF00041                         0048
*             END;                  /* KEYED OR REL RECORD ACCESS NOT
*                                      ALLOWED                       */
*           IF DMCBBLEN<DCBLRECL THEN/* WILL BUFFER HOLD MAX LENGTH
*                                      RECORD                        */
@RF00045 L     @10,DMCBBLEN(,DMCBPTR)                              0050
         CH    @10,DCBLRECL+72(,DCBPTR)                            0050
         BNL   @RF00050                                            0050
*             DO;                   /* BUFFER TOO SMALL              */
*               DMCBREJ=F3C;        /* REJECT FOR BUFFER TOO SMALL   */
         MVI   DMCBREJ(DMCBPTR),X'03'                              0052
*               DMCBRTC=INVRQ;                                     0053
         MVC   DMCBRTC(4,DMCBPTR),@CF00041                         0053
*             END;                  /* BUFFER TOO SMALL              */
*           IF DMCBRTC=F0C THEN     /* TEST FOR VALID REQUEST        */
@RF00050 L     @10,DMCBRTC(,DMCBPTR)                               0055
         LTR   @10,@10                                             0055
         BNZ   @RF00055                                            0055
*             DO;                   /* VALID QSAM REQUEST            */
*                                                                  0056
*               /*****************************************************/
*               /*                                                   */
*               /* IF WE'VE GOTTEN HERE THEN EVERY THING MUST BE ALL */
*               /* RIGHT                                             */
*               /*                                                   */
*               /*****************************************************/
*                                                                  0057
*               DCBSYNA=ADDR(GETERR);/* INSERT SYNAD EXIT ADDRESS    */
         LA    @10,GETERR                                          0057
         STCM  @10,7,DCBSYNA+52(DCBPTR)                            0057
*               DCBEODA=ADDR(NODATA);/* INSERT END FILE EXIT ADDRESS */
         LA    @10,NODATA                                          0058
         STCM  @10,7,DCBEODA+28(DCBPTR)                            0058
*               RFY                                                0059
*                (GPR01P,                                          0059
*                 GPR00P) RSTD;                                    0059
*               GPR01P=ADDR(DMCBDCB);/* ADDRESS DCB FOR GET MACRO    */
         LA    GPR01P,DMCBDCB(,DMCBPTR)                            0060
*               GPR00P=DMCBBUFP;    /* ADDRESS BUFFER FOR GET MACRO  */
         L     GPR00P,DMCBBUFP(,DMCBPTR)                           0061
*               GEN REFS(GPR01P,GPR00P) FLOWS(NODATA,GETERR)       0062
*                   (GET (GPR01P),(GPR00P));                       0062
*                                                                  0062
         GET (GPR01P),(GPR00P)
*               /*****************************************************/
*               /*                                                   */
*               /* IF A PHYSICAL ERROR OR END OF FILE OCCURRED THEN  */
*               /* THE EXIT ROUTINE WOULD HAVE SET DMCBRTC           */
*               /*                                                   */
*               /*****************************************************/
*                                                                  0063
*               IF DMCBRTC=F0C THEN /* TEST FOR QSAM GET OK          */
         L     @10,DMCBRTC(,DMCBPTR)                               0063
         LTR   @10,@10                                             0063
         BNZ   @RF00063                                            0063
*                 DO;               /* QSAM GET OK                   */
*                   RFY                                            0065
*                    (GPR01P,                                      0065
*                     GPR00P) UNRSTD;                              0065
*                                                                  0065
*                   /*************************************************/
*                   /*                                               */
*                   /* IF THE RECORD IS VARIABLE LENGTH, IT MUST BE  */
*                   /* CONVERTED TO THE VSAM FORMAT BY MOVING THE    */
*                   /* LENGTH TO THE DMCBIRL FIELD AND SHIFTING THE  */
*                   /* DATA 4 BYTES TO THE LEFT                      */
*                   /*                                               */
*                   /*************************************************/
*                                                                  0066
*                   IF DCBRECL='01'B THEN/* VARIABLE LENGTH RECORD   */
         TM    DCBRECL+28(DCBPTR),B'01000000'                      0066
         BNO   @RF00066                                            0066
         TM    DCBRECL+28(DCBPTR),B'10000000'                      0066
         BNZ   @RF00066                                            0066
*                     CALL CNVDATA; /* CONVERT QSAM DATA FORMAT TO 0067
*                                      VSAM                          */
*                                                                  0067
         BAL   @14,CNVDATA                                         0067
*                   /*************************************************/
*                   /*                                               */
*                   /* FOR A FIXED LENGTH RECORD THE LENGTH IS SIMPLY*/
*                   /* SET IN THE DMCBIRL FIELD                      */
*                   /*                                               */
*                   /*************************************************/
*                                                                  0068
*                   ELSE                                           0068
*                     DMCBIRL=DCBLRECL;/* FIXED LENGTH RECORD        */
         B     @RC00066                                            0068
@RF00066 LH    @10,DCBLRECL+72(,DCBPTR)                            0068
         ST    @10,DMCBIRL(,DMCBPTR)                               0068
*                 END;              /* QSAM GET OK                   */
*             END;                  /* VALID QSAM REQUEST            */
*         END;                      /* QSAM FILE                     */
         EJECT
*                                                                  0072
*       /*************************************************************/
*       /*                                                           */
*       /* VSAM FILE                                                 */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0072
*       ELSE                                                       0072
*         DO;                       /* VSAM FILE                     */
*                                                                  0072
         B     @RC00037                                            0072
@RF00037 DS    0H                                                  0073
*           /*********************************************************/
*           /*                                                       */
*           /* FOR VSAM FILES CALL BLSCSETT TO PERFORM RPL           */
*           /* MODIFICATIONS                                         */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0073
*           RFY                                                    0073
*             GPR01P RSTD;                                         0073
*           GPR01P=DMCBPTR;         /* BLSCSETT INTERFACE            */
         LR    GPR01P,DMCBPTR                                      0074
*           CALL BLSCSETT;          /* PERFORM SET FUNCTION          */
         L     @15,@CV00523                                        0075
         BALR  @14,@15                                             0075
*           RFY                                                    0076
*             GPR01P UNRSTD;                                       0076
*           IF DMCBRTC=F0C THEN     /* TEST BLSCSETT RETURN CODE     */
         SLR   @10,@10                                             0077
         C     @10,DMCBRTC(,DMCBPTR)                               0077
         BNE   @RF00077                                            0077
*             DO;                   /* SET IS OK                     */
*                                                                  0078
*               /*****************************************************/
*               /*                                                   */
*               /* DETERMINE IF ACCESS IS BY RELATIVE RECORD AND IF  */
*               /* SO THEN CALCULATE EFFECTIVE RBA                   */
*               /*                                                   */
*               /*****************************************************/
*                                                                  0079
*               IF DMCBKYD=OFF      /* NON KEYED ACCESS              */
*                   &DMCBRNO=ON THEN/* RELATIVE RECORD ACCESS        */
         TM    DMCBRNO(DMCBPTR),B'01000000'                        0079
         BNO   @RF00079                                            0079
         TM    DMCBKYD(DMCBPTR),B'10000000'                        0079
         BNZ   @RF00079                                            0079
*                 DO;               /* VSAM RELATIVE RECORD REQUEST  */
*                   IF DMCBRRL=F0C THEN/* IS THIS FILE ELIGIBLE FOR
*                                      RELATIVE RECORD ACCESS.     0081
*                                      DMCBRRL = 0 INDICATES THAT IT
*                                      IS NOT                        */
         C     @10,DMCBRRL(,DMCBPTR)                               0081
         BNE   @RF00081                                            0081
*                     DO;           /* RELATIVE RECORD LENGTH ZERO   */
*                       DMCBRTC=INVRQ;/* REJECT THE REQUEST          */
         MVC   DMCBRTC(4,DMCBPTR),@CF00041                         0083
*                       DMCBREJ=F2C;/* INDICATE INELIGIBILITY FOR  0084
*                                      RELATIVE RECORD ACCESS        */
         MVI   DMCBREJ(DMCBPTR),X'02'                              0084
*                     END;          /* RELATIVE RECORD LENGTH ZERO   */
*                   IF RELRECNO<=F0C THEN/* RECORD NUMBER OUT OF   0086
*                                      RANGE                         */
@RF00081 L     @10,DMCBKEYP(,DMCBPTR)                              0086
         L     @10,RELRECNO(,@10)                                  0086
         LTR   @10,@10                                             0086
         BP    @RF00086                                            0086
*                     DO;           /* RELATIVE RECORD RECORD NUMBER
*                                      OUT OF RANGE                  */
*                       DMCBRTC=INVRQ;/* REJECT THE REQUEST          */
         MVC   DMCBRTC(4,DMCBPTR),@CF00041                         0088
*                       DMCBREJ=F4C;/* INDICATE THE REASON           */
         MVI   DMCBREJ(DMCBPTR),X'04'                              0089
*                     END;          /* RELATIVE RECORD NUMBER OUT OF
*                                      RANGE                         */
*                                                                  0090
*                   /*************************************************/
*                   /*                                               */
*                   /* COMPUTE RELATIVE BYTE ADDRESS OF RECORD       */
*                   /*                                               */
*                   /*************************************************/
*                                                                  0091
*                   IF DMCBRTC=F0C THEN/* IF VALID REQUEST           */
@RF00086 L     @10,DMCBRTC(,DMCBPTR)                               0091
         LTR   @10,@10                                             0091
         BNZ   @RF00091                                            0091
*                     DMCBRBA=(RELRECNO-F1C)*DMCBRRL;              0092
         L     @10,DMCBKEYP(,DMCBPTR)                              0092
         L     @01,RELRECNO(,@10)                                  0092
         BCTR  @01,0                                               0092
         M     @00,DMCBRRL(,DMCBPTR)                               0092
         ST    @01,DMCBRBA(,DMCBPTR)                               0092
*                 END;              /* VSAM RELATIVE RECORD REQUEST  */
*                                                                  0093
@RF00091 DS    0H                                                  0094
*               /*****************************************************/
*               /*                                                   */
*               /* PERFORM VSAM GET REQUEST                          */
*               /*                                                   */
*               /*****************************************************/
*                                                                  0094
*               IF DMCBRTC=F0C THEN /* IF VALID REQUEST              */
@RF00079 L     @10,DMCBRTC(,DMCBPTR)                               0094
         LTR   @10,@10                                             0094
         BNZ   @RF00094                                            0094
*                 DO;               /* DO GET                        */
*                   RFY                                            0096
*                    (GPR01P,                                      0096
*                     GPR15F) RSTD;                                0096
*                   GPR01P=ADDR(DMCBRPL);                          0097
         LA    GPR01P,DMCBRPL(,DMCBPTR)                            0097
*                   GEN REFS(GPR01P) SETS(GPR15F)(GET RPL=(GPR01P));
         GET RPL=(GPR01P)
*                   DMCBSUBC=GPR15F;                               0099
         ST    GPR15F,DMCBSUBC(,DMCBPTR)                           0099
*                   RFY                                            0100
*                    (GPR01P,                                      0100
*                     GPR15F) UNRSTD;                              0100
*                   IF DMCBSUBC=F0C THEN/* REQUEST WAS SUCCESSFUL    */
         L     @10,DMCBSUBC(,DMCBPTR)                              0101
         LTR   @10,@10                                             0101
         BNZ   @RF00101                                            0101
*                     DO;           /* GET REQUEST SUCCESSFUL, GET 0102
*                                      LENGTH WITH SHOWCB            */
*                       RFY                                        0103
*                        (GPR02P,                                  0103
*                         GPR03P,                                  0103
*                         GPR08P,                                  0103
*                         GPR15F) RSTD;                            0103
*                       GPR08P=ADDR(DMCBRPL);/* GET REQUEST PARM LIST*/
         LA    GPR08P,DMCBRPL(,DMCBPTR)                            0104
*                       GPR02P=ADDR(DMCBIRL);/* INPUT RECORD LENGTH  */
         LA    GPR02P,DMCBIRL(,DMCBPTR)                            0105
*                       GPR03P=ADDR(SHWLIST);/* AREA FOR SHOWCB PARM
*                                      LIST                          */
         LA    GPR03P,SHWLIST                                      0106
*                       GEN SETS(GPR15F,DMCBIRL,SHWLIST) REFS(GPR02P,
*                           GPR03P,GPR08P);                        0107
*                                     /* SHOWCB WILL INIT DMCBIRL
         SHOWCB RPL=(GPR08P),AREA=(GPR02P),FIELDS=(RECLEN),            *
               LENGTH=4,MF=(G,(GPR03P))
*                       IF GPR15F^=F0C THEN                        0108
         LTR   GPR15F,GPR15F                                       0108
         BZ    @RF00108                                            0108
*                         DO;       /* ABEND(F139C) DUMP             */
*                           RESPECIFY                              0110
*                            (GPR01F) RESTRICTED;                  0110
*                           GPR01F=F139C;/* COMP CODE IN REG 1       */
         LA    GPR01F,139                                          0111
*                           GPR01F=GPR01F×'80000000'X;/*           0112
*                                      DUMP/STEP/DUMPOPTS FLAG       */
         O     GPR01F,@CF00584                                     0112
*                           SVC(13);/* ISSUE ABEND SVC               */
         SVC   13                                                  0113
*                           RESPECIFY                              0114
*                            (GPR01F) UNRESTRICTED;                0114
*                         END;      /* ABEND(F139C) DUMP             */
*                       RFY                                        0116
*                        (GPR02P,                                  0116
*                         GPR03P,                                  0116
*                         GPR08P,                                  0116
*                         GPR15F) UNRSTD;                          0116
@RF00108 DS    0H                                                  0117
*                     END;          /* GET REQUEST SUCCESSFUL, GET 0117
*                                      LENGTH WITH SHOWCB            */
*                   ELSE                                           0118
*                     DO;           /* GET REQUEST ERROR             */
         B     @RC00101                                            0118
@RF00101 DS    0H                                                  0119
*                       IF DMCBSUBC=F8C THEN/* IF A LOGICAL ERROR    */
         CLC   DMCBSUBC(4,DMCBPTR),@CF00043                        0119
         BNE   @RF00119                                            0119
*                         DO;       /* VSAM GET LOGICAL ERROR        */
*                           CALL VSMLERR;/* THEN ANALYSE THE FDBK  0121
*                                      FIELD IN THE RPL              */
         BAL   @14,VSMLERR                                         0121
*                         END;      /* VSAM GET LOGICAL ERROR        */
*                       ELSE                                       0123
*                         IF DMCBSUBC=F12C THEN/* ELSE IF A PHYSICAL
*                                      ERROR                         */
         B     @RC00119                                            0123
@RF00119 LA    @10,12                                              0123
         CL    @10,DMCBSUBC(,DMCBPTR)                              0123
         BNE   @RF00123                                            0123
*                           DMCBRTC=PERMER;/* THEN REPORT IN RETURN
*                                      CODE                          */
         ST    @10,DMCBRTC(,DMCBPTR)                               0124
*                     END;          /* GET REQUEST ERROR             */
@RF00123 DS    0H                                                  0125
@RC00119 DS    0H                                                  0126
*                 END;              /* DO GET                        */
@RC00101 DS    0H                                                  0127
*             END;                  /* SET IS OK                     */
@RF00094 DS    0H                                                  0128
*         END;                      /* VSAM FILE                     */
@RF00077 DS    0H                                                  0129
*     END;                          /* DMCB IS OPEN                  */
@RC00037 DS    0H                                                  0130
*   IF DMCBRTC^=F0C THEN            /* TEST FOR ERROR                */
@RC00031 L     @10,DMCBRTC(,DMCBPTR)                               0130
         LTR   @10,@10                                             0130
         BZ    @RF00130                                            0130
*     DMCBMODN=MODNAME;             /* SET MODULE NAME FOR ERROR   0131
*                                      MESSAGE                       */
         MVC   DMCBMODN(8,DMCBPTR),MODNAME                         0131
*   RETURN;                         /* RETURN TO CALLER              */
@EL00001 L     @13,4(,@13)                                         0132
@EF00001 L     @00,@SIZDATD                                        0132
         LR    @01,@11                                             0132
         BLSCFRES R,LV=(0),A=(1)
@ER00001 LM    @14,@12,12(@13)                                     0132
         BR    @14                                                 0132
         EJECT
*CNVDATA:                                                          0133
*   PROCEDURE;                                                     0133
*                                                                  0133
         B     @EL00001                                            0133
CNVDATA  STM   @14,@12,12(@13)                                     0133
*   /*****************************************************************/
*   /*                                                               */
*   /* PROCEDURE TO CONVERT QSAM FORMAT VARIABLE LENGTH RECORD TO    */
*   /* VSAM FORMAT BY MOVING THE LENGTH TO THE DMCBIRL FIELD AND     */
*   /* SHIFTING THE DATA 4 BYTES TO THE LEFT.                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0134
*   DMCBIRL=DATALEN-F4C;            /* DONT INCLUDE RDW IN DATA    0134
*                                      LENGTH                        */
         L     @10,DMCBBUFP(,DMCBPTR)                              0134
         LH    @06,DATALEN(,@10)                                   0134
         N     @06,@CF00613                                        0134
         SL    @06,@CF00041                                        0134
         ST    @06,DMCBIRL(,DMCBPTR)                               0134
*   IF DMCBIRL>F0C THEN             /* IF NO DATA DONT BOTHER TO   0135
*                                      SHIFT                         */
         CL    @06,@CF00540                                        0135
         BNH   @RF00135                                            0135
*     DO;                                                          0136
*                                                                  0136
*       /*************************************************************/
*       /*                                                           */
*       /* LOOP TO SHIFT DATA LEFT 4 BYTES                           */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0137
*       MOVELEN=DMCBIRL;            /* LENGTH OF DATA TO MOVE        */
         LR    MOVELEN,@06                                         0137
*       MOVEPTR=DMCBBUFP;           /* ADDRESS OF DATA BUFFER        */
         LR    MOVEPTR,@10                                         0138
*       DO WHILE(MOVELEN>F256C);    /* MOVE IN 256 BYTE CHUNKS       */
         B     @DE00139                                            0139
@DL00139 DS    0H                                                  0140
*         MVC(TOBUFF,FROMBUFF);     /* MVC IS USED TO AVOID TRANSFER
*                                      THROUGH A TEMPORARY           */
         MVC   TOBUFF(256,MOVEPTR),FROMBUFF(MOVEPTR)               0140
*         MOVEPTR=MOVEPTR+F256C;    /* PREPARE FOR NEXT CHUNK        */
         LA    @10,256                                             0141
         ALR   MOVEPTR,@10                                         0141
*         MOVELEN=MOVELEN-F256C;    /* 256 BYTES LESS TO MOVE        */
         SLR   MOVELEN,@10                                         0142
*       END;                                                       0143
*                                                                  0143
@DE00139 C     MOVELEN,@CF00527                                    0143
         BH    @DL00139                                            0143
*       /*************************************************************/
*       /*                                                           */
*       /* AT THIS POINT 256 OR LESS BYTES REMAIN THIS CAN BE        */
*       /* ACCOMPLISHED BY ONE MOVE                                  */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0144
*       MVC(TOBUFF(F1C:MOVELEN),FROMBUFF(F1C:MOVELEN));            0144
         LR    @10,MOVELEN                                         0144
         BCTR  @10,0                                               0144
         EX    @10,@SM00614                                        0144
*     END;                                                         0145
*   RETURN;                                                        0146
@EL00002 DS    0H                                                  0146
@EF00002 DS    0H                                                  0146
@ER00002 LM    @14,@12,12(@13)                                     0146
         BR    @14                                                 0146
*   END CNVDATA;                                                   0147
         B     @EL00002                                            0147
         EJECT
*NODATA:                                                           0148
*   PROCEDURE OPTIONS(NOSAVE);                                     0148
*                                                                  0148
NODATA   DS    0H                                                  0149
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS ROUTINE IS ENTERED ON A QSAM END OF FILE CONDITION       */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0149
*   DMCBRTC=EOD;                    /* SET END FILE RETURN CODE      */
         MVC   DMCBRTC(4,DMCBPTR),@CF00043                         0149
*   RETURN;                                                        0150
@EL00003 DS    0H                                                  0150
@EF00003 DS    0H                                                  0150
@ER00003 BR    @14                                                 0150
*   END NODATA;                                                    0151
         EJECT
*GETERR:                                                           0152
*   PROCEDURE OPTIONS(NOSAVE);                                     0152
*                                                                  0152
GETERR   DS    0H                                                  0153
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS ROUTINE IS ENTERED ON A QSAM SYNAD ERROR                 */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0153
*   DCL                                                            0153
*     SYNMSG CHAR(128) BASED(GPR01P);                              0153
*   RFY                                                            0154
*     GPR01P RSTD;                                                 0154
*   GEN SETS(GPR01P)(SYNADAF ACSMETH=QSAM);                        0155
         SYNADAF ACSMETH=QSAM
*   DMCBSYNM=SYNMSG;                /* MOVE MESSAGE PRODUCED BY    0156
*                                      SYNADAF INTO DMCB             */
         MVC   DMCBSYNM(128,DMCBPTR),SYNMSG(GPR01P)                0156
*   RFY                                                            0157
*     GPR01P UNRSTD;                                               0157
*   DMCBRTC=PERMER;                 /* INDICATE PERMANENT ERROR      */
         MVC   DMCBRTC(4,DMCBPTR),@CF00059                         0158
*   GEN(SYNADRLS);                                                 0159
         SYNADRLS
*   RETURN;                                                        0160
@EL00004 DS    0H                                                  0160
@EF00004 DS    0H                                                  0160
@ER00004 BR    @14                                                 0160
*   END GETERR;                                                    0161
         EJECT
*VSMLERR:                                                          0162
*   PROCEDURE;                                                     0162
*                                                                  0162
VSMLERR  STM   @14,@12,@SA00005                                    0162
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS ROUTINE IS ENTERED IF A VSAM LOGICAL ERROR OCCURS IT     */
*   /* EXTRACTS THE FEEDBACK FIELD FROM THE REQUEST PARAMETER LIST   */
*   /* AND DETERMINES THE PROPER RETURN CODE. CERTAIN LOGICAL ERRORS */
*   /* WHICH SHOULD NOT OCCUR MAY INDICATE THAT THE DATA MANAGER IS  */
*   /* WORKING IMPROPERLY. IF THESE OCCUR THEN AN ABEND WILL BE      */
*   /* ISSUED.                                                       */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0163
*   RFY                                                            0163
*    (GPR08P,                                                      0163
*     GPR02P,                                                      0163
*     GPR03P,                                                      0163
*     GPR15F) RSTD;                                                0163
*   GPR08P=ADDR(DMCBRPL);           /* ADDRESS RPL FOR SHOWCB MACRO  */
         LA    GPR08P,DMCBRPL(,DMCBPTR)                            0164
*   GPR02P=ADDR(SHWLIST);           /* POINT TO SHOW PARAMETER LIST  */
         LA    GPR02P,SHWLIST                                      0165
*   GPR03P=ADDR(DMCBRPLF);          /* ADDRESS FEEDBACK AREA         */
         LA    GPR03P,DMCBRPLF(,DMCBPTR)                           0166
*   GEN SETS(SHWLIST,DMCBRPLF,GPR15F) REFS(GPR02P,GPR03P,GPR08P);  0167
         SHOWCB RPL=(GPR08P),AREA=(GPR03P),LENGTH=4,                   *
               FIELDS=(FDBK),MF=(G,(GPR02P))
*   SUBCODE=GPR15F;                                                0168
         ST    GPR15F,SUBCODE                                      0168
*   RFY                                                            0169
*    (GPR08P,                                                      0169
*     GPR02P,                                                      0169
*     GPR03P,                                                      0169
*     GPR15F) UNRSTD;                                              0169
*   IF SUBCODE^=F0C THEN            /* IF SHOW WAS UNSUCCESSFUL      */
         L     @10,SUBCODE                                         0170
         LTR   @10,@10                                             0170
         BZ    @RF00170                                            0170
*     DO;                           /* ABEND(F139C) DUMP             */
*       RESPECIFY                                                  0172
*        (GPR01F) RESTRICTED;                                      0172
*       GPR01F=F139C;               /* COMP CODE IN REG 1            */
         LA    GPR01F,139                                          0173
*       GPR01F=GPR01F×'80000000'X;  /* DUMP/STEP/DUMPOPTS FLAG       */
         O     GPR01F,@CF00584                                     0174
*       SVC(13);                    /* ISSUE ABEND SVC               */
         SVC   13                                                  0175
*       RESPECIFY                                                  0176
*        (GPR01F) UNRESTRICTED;                                    0176
*     END;                          /* ABEND(F139C) DUMP SHOWCB ERROR*/
*   IF DMCBRPLF=F4C                 /* END OF DATA OR KEY OUT OF   0178
*                                      RANGE                         */
*       ×DMCBRPLF=F16C              /* OR RECORD NOT FOUND           */
*       ×DMCBRPLF=F32C THEN         /* OR RBA INVALID (FOR REL     0178
*                                      RECORD)                       */
@RF00170 L     @10,DMCBRPLF(,DMCBPTR)                              0178
         CL    @10,@CF00041                                        0178
         BE    @RT00178                                            0178
         CL    @10,@CF00066                                        0178
         BE    @RT00178                                            0178
         CL    @10,@CF00411                                        0178
         BNE   @RF00178                                            0178
@RT00178 DS    0H                                                  0179
*     DMCBRTC=EOD;                  /* INDICATE END FILE RETURN CODE */
         MVC   DMCBRTC(4,DMCBPTR),@CF00043                         0179
*   ELSE                                                           0180
*     DO;                           /* PROBABLY INVALID REQUEST      */
         B     @RC00178                                            0180
@RF00178 DS    0H                                                  0181
*       DMCBRTC=INVRQ;              /* REJECT THE REQUEST            */
         MVC   DMCBRTC(4,DMCBPTR),@CF00041                         0181
*       IF DMCBRPLF=F44C THEN       /* WORK AREA NOT LARGE ENOUGH    */
         CLC   DMCBRPLF(4,DMCBPTR),@CF00444                        0182
         BNE   @RF00182                                            0182
*         DMCBREJ=F3C;              /* INDICATE REJECTION REASON     */
         MVI   DMCBREJ(DMCBPTR),X'03'                              0183
*       ELSE                                                       0184
*         IF DMCBRPLF=F72C THEN     /* WRONG ACCESS TYPE             */
         B     @RC00182                                            0184
@RF00182 CLC   DMCBRPLF(4,DMCBPTR),@CF00344                        0184
         BNE   @RF00184                                            0184
*           DMCBREJ=F2C;                                           0185
         MVI   DMCBREJ(DMCBPTR),X'02'                              0185
*         ELSE                                                     0186
*           IF DMCBRPLF=F88C THEN   /* POSITIONING ERROR             */
         B     @RC00184                                            0186
@RF00184 CLC   DMCBRPLF(4,DMCBPTR),@CF00555                        0186
         BNE   @RF00186                                            0186
*             DMCBREJ=F5C;                                         0187
         MVI   DMCBREJ(DMCBPTR),X'05'                              0187
*           ELSE                                                   0188
*             IF DMCBRPLF=F112C THEN/* INVALID KEY LENGTH            */
         B     @RC00186                                            0188
@RF00186 CLC   DMCBRPLF(4,DMCBPTR),@CF00557                        0188
         BNE   @RF00188                                            0188
*               DMCBREJ=F9C;                                       0189
         MVI   DMCBREJ(DMCBPTR),X'09'                              0189
*             ELSE                                                 0190
*               DMCBREJ=F255C;      /* SEVERE ERROR EITHER VSAM OR 0190
*                                      DATA MANAGER ERROR            */
         B     @RC00188                                            0190
@RF00188 MVI   DMCBREJ(DMCBPTR),X'FF'                              0190
*     END;                          /* PROBABLY INVALID REQUEST      */
*   END VSMLERR;                                                   0192
@EL00005 DS    0H                                                  0192
@EF00005 DS    0H                                                  0192
@ER00005 LM    @14,@12,@SA00005                                    0192
         BR    @14                                                 0192
         EJECT
*                                                                  0193
*   /*****************************************************************/
*   /*                                                               */
*   /* END OF EXECUTABLE PROCEDURE STATEMENTS                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0193
*   DECLARE                         /* GENERAL PURPOSE REGISTERS     */
*     GPR01F FIXED(31) REG(1),                                     0193
*     GPR15F FIXED(31) REG(15),                                    0193
*     GPR00P PTR(31) REG(0),                                       0193
*     GPR01P PTR(31) REG(1),                                       0193
*     GPR02P PTR(31) REG(2),                                       0193
*     GPR03P PTR(31) REG(3),                                       0193
*     GPR08P PTR(31) REG(8);                                       0193
*   DECLARE                         /* COMMON VARIABLES              */
*     I256C CHAR(256) BASED,                                       0194
*     I031F FIXED(31) BASED,                                       0194
*     I031P PTR(31) BASED,                                         0194
*     I015F FIXED(15) BASED,                                       0194
*     I015P PTR(15) BASED,                                         0194
*     I008P PTR(8) BASED,                                          0194
*     I001C CHAR(1) BASED;                                         0194
*   DCL                                                            0195
*     1 DASPATCH LOCAL BDY(DWORD),  /* PATCH AREA                    */
*      2 DASPATA(DASPATLN) PTR INIT((DASPATLN)0);                  0195
*   END BLSCGETT                                                   0196
*                                                                  0196
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (IHADCBDF)                                       */
*/*%INCLUDE SYSLIB  (IHADCB  )                                       */
*                                                                  0196
*       ;                                                          0196
@DATA    DS    0H
@SM00614 MVC   TOBUFF(0,MOVEPTR),FROMBUFF(MOVEPTR)
@DATD    DSECT
         DS    0F
@SA00001 DS    18F
@SA00005 DS    15F
BLSCGETT CSECT
         DS    0F
@CF00540 DC    F'0'
@CF00041 DC    F'4'
@CF00043 DC    F'8'
@CF00059 DC    F'12'
@CF00066 DC    F'16'
@CF00411 DC    F'32'
@CF00444 DC    F'44'
@CF00344 DC    F'72'
@CF00555 DC    F'88'
@CF00557 DC    F'112'
@CF00527 DC    F'256'
@CF00584 DC    XL4'80000000'
@CF00613 DC    XL4'0000FFFF'
@DATD    DSECT
         DS    0D
MODSTAT  DS    CL12
         ORG   MODSTAT
MODNAME  DS    CL8
SUBCODE  DS    FL4
         ORG   MODSTAT+12
         DS    CL4
SHWLIST  DS    CL28
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
BLSCGETT CSECT
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
@CV00523 DC    V(BLSCSETT)
         DS    0D
@CC00572 DC    C'BLSCGETT'
DASPATCH DS    CL80
         ORG   DASPATCH
DASPATA  DC    20A(0)
         ORG   DASPATCH+80
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
MOVEPTR  EQU   @03
MOVELEN  EQU   @02
DMCBPTR  EQU   @07
DCBPTR   EQU   @03
GPR01P   EQU   @01
GPR00P   EQU   @00
GPR15F   EQU   @15
GPR02P   EQU   @02
GPR03P   EQU   @03
GPR08P   EQU   @08
GPR01F   EQU   @01
IHADCB   EQU   0
IHADCS00 EQU   0
DCBFDAD  EQU   IHADCS00+5
IHADCS01 EQU   0
DCBDVTBL EQU   IHADCS01
IHADCS02 EQU   0
IHADCS04 EQU   0
DCBPRBYT EQU   IHADCS04+3
IHADCS11 EQU   0
DCBRELB  EQU   IHADCS11
DCBREL   EQU   DCBRELB+1
DCBBUFCB EQU   IHADCS11+4
DCBDSORG EQU   IHADCS11+10
DCBDSRG1 EQU   DCBDSORG
DCBDSRG2 EQU   DCBDSORG+1
DCBIOBAD EQU   IHADCS11+12
DCBODEB  EQU   DCBIOBAD
DCBLNP   EQU   DCBODEB
DCBQSLM  EQU   DCBLNP
DCBIOBAA EQU   DCBODEB+1
IHADCS50 EQU   0
DCBSVCXL EQU   IHADCS50
DCBEODAD EQU   IHADCS50+4
DCBBFALN EQU   DCBEODAD
DCBHIARC EQU   DCBBFALN
DCBBFTEK EQU   DCBHIARC
DCBBFT   EQU   DCBBFTEK
DCBEODA  EQU   DCBEODAD+1
DCBEXLST EQU   IHADCS50+8
DCBRECFM EQU   DCBEXLST
DCBRECLA EQU   DCBRECFM
DCBRECL  EQU   DCBRECLA
IHADCS24 EQU   0
DCBOFLGS EQU   IHADCS24+8
DCBOFLWR EQU   DCBOFLGS
DCBIFLG  EQU   IHADCS24+9
DCBIBPCT EQU   DCBIFLG
DCBMACR  EQU   IHADCS24+10
DCBMACR1 EQU   DCBMACR
DCBMRFE  EQU   DCBMACR1
DCBMRGET EQU   DCBMRFE
DCBMRAPG EQU   DCBMACR1
DCBMRRD  EQU   DCBMRAPG
DCBMRCI  EQU   DCBMACR1
DCBMRMVG EQU   DCBMRCI
DCBMRLCG EQU   DCBMACR1
DCBMRABC EQU   DCBMACR1
DCBMRPT1 EQU   DCBMRABC
DCBMRSBG EQU   DCBMRPT1
DCBMRCRL EQU   DCBMACR1
DCBMRCHK EQU   DCBMRCRL
DCBMRRDX EQU   DCBMRCHK
DCBMRDMG EQU   DCBMACR1
DCBMACR2 EQU   DCBMACR+1
DCBMRPUT EQU   DCBMACR2
DCBMRWRT EQU   DCBMACR2
DCBMRMVP EQU   DCBMACR2
DCBMR5WD EQU   DCBMACR2
DCBMRLDM EQU   DCBMR5WD
DCBMRLCP EQU   DCBMRLDM
DCBMR4WD EQU   DCBMACR2
DCBMRPT2 EQU   DCBMR4WD
DCBMRTMD EQU   DCBMRPT2
DCBMR3WD EQU   DCBMACR2
DCBMRCTL EQU   DCBMR3WD
DCBMRSTK EQU   DCBMRCTL
DCBMR1WD EQU   DCBMACR2
DCBMRSWA EQU   DCBMR1WD
DCBMRDMD EQU   DCBMRSWA
IHADCS25 EQU   0
DCBMACRF EQU   IHADCS25+2
DCBMACF1 EQU   DCBMACRF
DCBMFFE  EQU   DCBMACF1
DCBMFGET EQU   DCBMFFE
DCBMFAPG EQU   DCBMACF1
DCBMFRD  EQU   DCBMFAPG
DCBMFCI  EQU   DCBMACF1
DCBMFMVG EQU   DCBMFCI
DCBMFLCG EQU   DCBMACF1
DCBMFABC EQU   DCBMACF1
DCBMFPT1 EQU   DCBMFABC
DCBMFSBG EQU   DCBMFPT1
DCBMFCRL EQU   DCBMACF1
DCBMFCHK EQU   DCBMFCRL
DCBMFDMG EQU   DCBMACF1
DCBMACF2 EQU   DCBMACRF+1
DCBMFPUT EQU   DCBMACF2
DCBMFWRT EQU   DCBMACF2
DCBMFMVP EQU   DCBMACF2
DCBMF5WD EQU   DCBMACF2
DCBMFLDM EQU   DCBMF5WD
DCBMFLCP EQU   DCBMFLDM
DCBMF4WD EQU   DCBMACF2
DCBMFPT2 EQU   DCBMF4WD
DCBMFTMD EQU   DCBMFPT2
DCBMF3WD EQU   DCBMACF2
DCBMFCTL EQU   DCBMF3WD
DCBMFSTK EQU   DCBMFCTL
DCBMF1WD EQU   DCBMACF2
DCBMFSWA EQU   DCBMF1WD
DCBMFDMD EQU   DCBMFSWA
DCBDEBAD EQU   IHADCS25+4
DCBIFLGS EQU   DCBDEBAD
DCBIFPCT EQU   DCBIFLGS
IHADCS27 EQU   0
DCBGET   EQU   IHADCS27
DCBPUT   EQU   DCBGET
DCBGETA  EQU   DCBPUT+1
IHADCS36 EQU   0
DCBGERR  EQU   IHADCS36
DCBPERR  EQU   DCBGERR
DCBCHECK EQU   DCBPERR
DCBOPTCD EQU   DCBCHECK
DCBOPTH  EQU   DCBOPTCD
DCBOPTO  EQU   DCBOPTH
DCBOPTZ  EQU   DCBOPTCD
DCBGERRA EQU   DCBCHECK+1
DCBPERRA EQU   DCBGERRA
DCBSYNAD EQU   IHADCS36+4
DCBSYNA  EQU   DCBSYNAD+1
DCBCIND1 EQU   IHADCS36+8
DCBCIND2 EQU   IHADCS36+9
DCBIOBA  EQU   IHADCS36+16
DCBCICB  EQU   DCBIOBA
IHADCS52 EQU   0
DCBDIRCT EQU   IHADCS52
DCBQSWS  EQU   DCBDIRCT
DCBUSASI EQU   DCBQSWS
DCBQADFS EQU   DCBUSASI
DCBBUFOF EQU   DCBDIRCT+1
IHADCS37 EQU   0
DCBFLAG1 EQU   IHADCS37
IHADCS40 EQU   0
DCBEOBAD EQU   IHADCS40
DCBCCCW  EQU   IHADCS40+4
DCBRECAD EQU   DCBCCCW
DCBRECBT EQU   DCBRECAD
DCBRCREL EQU   DCBRECBT
DCBLRECL EQU   IHADCS40+10
DCBCNTRL EQU   IHADCS40+12
DCBEROPT EQU   DCBCNTRL
DMCB     EQU   0
DMCBRTC  EQU   DMCB+12
DMCBIRL  EQU   DMCB+16
DMCBFTY  EQU   DMCB+20
DMCBVSF  EQU   DMCBFTY
DMCBOPN  EQU   DMCB+21
DMCBSIN  EQU   DMCBOPN
DMCBRMOD EQU   DMCB+23
DMCBOUT  EQU   DMCBRMOD
DMCBOPTS EQU   DMCB+24
DMCBKYD  EQU   DMCBOPTS
DMCBGKY  EQU   DMCBOPTS
DMCBRNO  EQU   DMCBGKY
DMCBUPD  EQU   DMCBOPTS
DMCBMFLG EQU   DMCB+28
DMCBREJ  EQU   DMCB+29
DMCBBUFP EQU   DMCB+32
DMCBBLEN EQU   DMCB+36
DMCBKEYP EQU   DMCB+44
DMCBRBA  EQU   DMCB+56
DMCBRRL  EQU   DMCB+60
DMCBFRE  EQU   DMCB+88
DMCBEOB  EQU   DMCB+92
DMCBACBE EQU   DMCB+124
DMCBRPLF EQU   DMCB+128
DMCBSYNM EQU   DMCB+132
DMCBSPEC EQU   DMCB+380
DMCBSUBC EQU   DMCB+404
DMCBAMS  EQU   DMCB+416
DMCBAUDT EQU   DMCB+568
DMCBLSCP EQU   DMCBAUDT+16
DMCBMODN EQU   DMCB+632
DATALEN  EQU   0
RELRECNO EQU   0
TOBUFF   EQU   0
SYNMSG   EQU   0
DMCBRQC  EQU   0
I001C    EQU   0
I008P    EQU   0
I015F    EQU   0
I015P    EQU   0
I031F    EQU   0
I031P    EQU   0
I256C    EQU   0
DMCBVSM  EQU   DMCBAMS
DMCBRPL  EQU   DMCBVSM
DMCBQSM  EQU   DMCBAMS
DMCBDCB  EQU   DMCBQSM
FROMBUFF EQU   TOBUFF+4
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
DMCBRES7 EQU   DMCBQSM+96
DMCBACB  EQU   DMCBVSM+76
DMCBWRK  EQU   DMCB+648
DMCBRES8 EQU   DMCB+640
DMCBCARY EQU   DMCBAUDT+20
DMCBCLC  EQU   DMCBAUDT+12
DMCBOPC  EQU   DMCBAUDT+8
DMCBFRC  EQU   DMCBAUDT+4
DMCBALC  EQU   DMCBAUDT
DMCBFR   EQU   DMCB+412
DMCBRES6 EQU   DMCB+410
DMCBIRSC EQU   DMCB+408
DMCBDRBP EQU   DMCB+400
DMCBRSZM EQU   DMCB+398
DMCBRSZA EQU   DMCB+396
DMCBCISZ EQU   DMCB+394
DMCBDCBL EQU   DMCB+392
DMCBDCLR EQU   DMCB+390
DMCBDCFM EQU   DMCB+389
DMCBRES5 EQU   DMCB+388
DMCBLBRT EQU   DMCB+386
DMCBLBSQ EQU   DMCB+384
DMCBLBPS EQU   DMCB+383
DMCBLBTY EQU   DMCB+382
DMCBRES4 EQU   DMCB+381
DMCBSPRS EQU   DMCBSPEC
DMCBSPRN EQU   DMCBSPEC
DMCBSPCT EQU   DMCBSPEC
DMCBSPRL EQU   DMCBSPEC
DMCBSPSE EQU   DMCB+376
DMCBSPPR EQU   DMCB+372
DMCBSPTY EQU   DMCB+369
DMCBODIS EQU   DMCB+368
DMCBDISP EQU   DMCB+367
DMCBSTAT EQU   DMCB+366
DMCBRES3 EQU   DMCB+364
DMCBMEMB EQU   DMCB+356
DMCBMODL EQU   DMCB+348
DMCBRES9 EQU   DMCB+340
DMCBPID  EQU   DMCB+332
DMCBTYPE EQU   DMCB+328
DMCBDSN  EQU   DMCB+284
DMCBUNIT EQU   DMCB+276
DMCBDSOR EQU   DMCB+274
DMCBVOL  EQU   DMCB+268
DMCBDDNM EQU   DMCB+260
DMCBDCBE EQU   DMCBACBE
DMCBARC  EQU   DMCB+120
DMCBCPC  EQU   DMCB+116
DMCBRET  EQU   DMCB+112
DMCBSTL  EQU   DMCB+96
DMCBRES2 EQU   DMCB+85
DMCBSPID EQU   DMCB+84
DMCBRESC EQU   DMCB+80
DMCBZZ1P EQU   DMCB+76
DMCBMSGS EQU   DMCB+72
DMCBMSG0 EQU   DMCB+68
DMCBRI   EQU   DMCB+64
DMCBMSG  EQU   DMCB+52
DMCBKEYL EQU   DMCB+48
DMCBKPC  EQU   DMCBKEYP
DMCBORL  EQU   DMCB+40
DMCBBFPC EQU   DMCBBUFP
DMCBRES1 EQU   DMCB+31
DMCBACCM EQU   DMCB+30
DMCBRESB EQU   DMCBMFLG
DMCBFMOD EQU   DMCBMFLG
DMCBLOPT EQU   DMCB+27
DMCBLRM  EQU   DMCB+26
DMCBLRQ  EQU   DMCB+25
DMCBOPRS EQU   DMCBOPTS
DMCBLRD  EQU   DMCBOPTS
DMCBBWD  EQU   DMCBOPTS
DMCBAPX  EQU   DMCBOPTS
DMCBRMRS EQU   DMCBRMOD
DMCBRM5  EQU   DMCBRMOD
DMCBRM6  EQU   DMCBRMOD
DMCBTMP  EQU   DMCBOUT
DMCBRQST EQU   DMCB+22
DMCBRESA EQU   DMCBOPN
DMCBSOUT EQU   DMCBOPN
DMCBKSF  EQU   DMCBFTY
DMCBFTRS EQU   DMCBFTY
DMCBSHF  EQU   DMCBFTY
DMCBTVP  EQU   DMCB+8
DMCBNEXT EQU   DMCB+4
DMCBID   EQU   DMCB
DCBEOB   EQU   IHADCS40+20
DCBPRECL EQU   IHADCS40+18
@NM00029 EQU   IHADCS40+16
DCBCNTRA EQU   DCBCNTRL+1
@NM00028 EQU   DCBEROPT
DCBERABE EQU   DCBEROPT
DCBERSKP EQU   DCBEROPT
DCBERACC EQU   DCBEROPT
@NM00027 EQU   IHADCS40+9
@NM00026 EQU   IHADCS40+8
DCBRECA  EQU   DCBRECAD+1
@NM00025 EQU   DCBRECBT
DCBRCFGT EQU   DCBRCREL
DCBRCTRU EQU   DCBRCREL
DCBLCCW  EQU   DCBEOBAD
@NM00024 EQU   DCBFLAG1
DCBSTFLS EQU   DCBFLAG1
DCBSTQCK EQU   DCBFLAG1
DCBDIRCQ EQU   DCBBUFOF
DCBQSTRU EQU   DCBUSASI
@NM00023 EQU   DCBUSASI
DCBQADF3 EQU   DCBQADFS
DCBQADF2 EQU   DCBQADFS
DCBQADF1 EQU   DCBQADFS
DCBBLBP  EQU   DCBUSASI
@NM00022 EQU   DCBUSASI
DCBCICBA EQU   DCBCICB+1
@NM00021 EQU   DCBCICB
DCBOFFSW EQU   IHADCS36+15
DCBOFFSR EQU   IHADCS36+14
DCBWCPL  EQU   IHADCS36+13
DCBWCPO  EQU   IHADCS36+12
DCBBLKSI EQU   IHADCS36+10
DCBCNQSM EQU   DCBCIND2
DCBCNFEO EQU   DCBCIND2
DCBCNCHS EQU   DCBCIND2
DCBCNBFP EQU   DCBCIND2
DCBCNIOE EQU   DCBCIND2
DCBCNCLO EQU   DCBCIND2
DCBCNWRO EQU   DCBCIND2
DCBCNSTO EQU   DCBCIND2
DCBCNEXB EQU   DCBCIND1
@NM00020 EQU   DCBCIND1
DCBCNBRM EQU   DCBCIND1
@NM00019 EQU   DCBCIND1
DCBCNEVA EQU   DCBCIND1
DCBCNEVB EQU   DCBCIND1
DCBCNSRD EQU   DCBCIND1
DCBCNTOV EQU   DCBCIND1
DCBIOBL  EQU   DCBSYNAD
DCBCHCKA EQU   DCBPERRA
DCBOPTJ  EQU   DCBOPTCD
DCBOPTT  EQU   DCBOPTCD
DCBSRCHD EQU   DCBOPTZ
DCBOPTQ  EQU   DCBOPTCD
DCBBCKPT EQU   DCBOPTO
DCBOPTC  EQU   DCBOPTCD
DCBOPTU  EQU   DCBOPTCD
DCBOPTW  EQU   DCBOPTCD
DCBPUTA  EQU   DCBGETA
@NM00018 EQU   DCBPUT
DCBDEBA  EQU   DCBDEBAD+1
@NM00017 EQU   DCBIFLGS
DCBIFIOE EQU   DCBIFLGS
DCBCH12  EQU   DCBIFPCT
DCBCH9   EQU   DCBIFPCT
DCBIFEC  EQU   DCBIFLGS
DCBMFSTI EQU   DCBMFDMD
DCBMFAWR EQU   DCBMFSTK
DCBMFUIP EQU   DCBMFTMD
DCBMFIDW EQU   DCBMFLCP
DCBMFWRK EQU   DCBMFMVP
DCBMFRDQ EQU   DCBMFWRT
DCBMFGTQ EQU   DCBMFPUT
DCBMFSTL EQU   DCBMACF2
DCBMFCK  EQU   DCBMFDMG
DCBMFRDX EQU   DCBMFCHK
DCBMFDBF EQU   DCBMFSBG
DCBMFRDI EQU   DCBMFLCG
DCBMFRDK EQU   DCBMFMVG
DCBMFWRQ EQU   DCBMFRD
DCBMFPTQ EQU   DCBMFGET
DCBMFECP EQU   DCBMACF1
DCBTIOT  EQU   IHADCS25
DCBMRSTI EQU   DCBMRDMD
DCBMRAWR EQU   DCBMRSTK
DCBMRUIP EQU   DCBMRTMD
DCBMRIDW EQU   DCBMRLCP
DCBMRWRK EQU   DCBMRMVP
DCBMRRDQ EQU   DCBMRWRT
DCBMRGTQ EQU   DCBMRPUT
DCBMRSTL EQU   DCBMACR2
DCBMRCK  EQU   DCBMRDMG
DCBPGFXA EQU   DCBMRRDX
DCBMRDBF EQU   DCBMRSBG
DCBMRRDI EQU   DCBMRLCG
DCBMRRDK EQU   DCBMRMVG
DCBMRWRQ EQU   DCBMRRD
DCBMRPTQ EQU   DCBMRGET
DCBMRECP EQU   DCBMACR1
@NM00016 EQU   DCBIFLG
DCBIBIOE EQU   DCBIFLG
DCBICH12 EQU   DCBIBPCT
DCBICH9  EQU   DCBIBPCT
DCBIBEC  EQU   DCBIFLG
DCBOFIOF EQU   DCBOFLGS
DCBOFUEX EQU   DCBOFLGS
DCBOFTM  EQU   DCBOFLGS
DCBOFPPC EQU   DCBOFLGS
DCBOFOPN EQU   DCBOFLGS
DCBOFEOV EQU   DCBOFLGS
DCBOFLRB EQU   DCBOFLGS
DCBOFIOD EQU   DCBOFLWR
DCBDDNAM EQU   IHADCS24
DCBEXLSA EQU   DCBEXLST+1
DCBRECKL EQU   DCBRECFM
DCBRECCC EQU   DCBRECFM
DCBRECSB EQU   DCBRECFM
DCBRECBR EQU   DCBRECFM
DCBRECTO EQU   DCBRECLA
DCBBFA   EQU   DCBBFTEK
DCBH0    EQU   DCBBFTEK
DCBBFTKD EQU   DCBBFTEK
DCBBFTE  EQU   DCBBFT
DCBBFTKR EQU   DCBBFT
DCBBFTS  EQU   DCBBFT
DCBH1    EQU   DCBBFTEK
DCBSVCXA EQU   DCBSVCXL+1
@NM00015 EQU   DCBSVCXL
DCBODEBA EQU   DCBIOBAA
@NM00014 EQU   DCBQSLM
DCBUPDBT EQU   DCBQSLM
DCBUPDCM EQU   DCBQSLM
DCB1DVDS EQU   DCBQSLM
@NM00013 EQU   DCBDSRG2
DCBDSGTR EQU   DCBDSRG2
DCBACBM  EQU   DCBDSRG2
@NM00012 EQU   DCBDSRG2
DCBDSGTQ EQU   DCBDSRG2
DCBDSGTX EQU   DCBDSRG2
DCBDSGGS EQU   DCBDSRG2
DCBDSGU  EQU   DCBDSRG1
DCBDSGPO EQU   DCBDSRG1
@NM00011 EQU   DCBDSRG1
@NM00010 EQU   DCBDSRG1
DCBDSGCX EQU   DCBDSRG1
DCBDSGDA EQU   DCBDSRG1
DCBDSGPS EQU   DCBDSRG1
DCBDSGIS EQU   DCBDSRG1
DCBBUFL  EQU   IHADCS11+8
DCBBUFCA EQU   DCBBUFCB+1
DCBBUFNO EQU   DCBBUFCB
DCBDEVT  EQU   DCBREL
DCBKEYLE EQU   DCBRELB
DCBTRCID EQU   DCBPRBYT
@NM00009 EQU   DCBPRBYT
DCBPRTOV EQU   IHADCS04+2
@NM00008 EQU   IHADCS04+1
DCBPRTSP EQU   IHADCS04
@NM00007 EQU   IHADCS02+19
DCBDEN   EQU   IHADCS02+18
@NM00006 EQU   IHADCS02+17
DCBTRTCH EQU   IHADCS02+16
DCBBLKCT EQU   IHADCS02+12
@NM00005 EQU   IHADCS02
DCBTRBAL EQU   IHADCS01+6
@NM00004 EQU   IHADCS01+5
@NM00003 EQU   IHADCS01+4
DCBDVTBA EQU   DCBDVTBL+1
@NM00002 EQU   DCBDVTBL
DCBKEYCN EQU   IHADCS00+4
DCBRELAD EQU   IHADCS00
@NM00001 EQU   IHADCB
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RF00055 EQU   @RC00037
@RF00063 EQU   @RC00037
@RC00066 EQU   @RC00037
@RF00130 EQU   @EL00001
@RF00135 EQU   @EL00002
@RC00178 EQU   @EL00005
@RC00188 EQU   @EL00005
@RC00186 EQU   @EL00005
@RC00184 EQU   @EL00005
@RC00182 EQU   @EL00005
@ENDDATA EQU   *
         END   BLSCGETT,(C'PLS1918',0701,78062)
