         TITLE 'BLSDMSG0 - MESSAGE TEXT BUILD AND ROUTING ROUTINE      *
                        '
*             /* CHANGE ACTIVITY */
*      THIS MODULE IS WRITTEN FOR @G57LPRM
BLSDMSG0 CSECT ,                                                   0002
@MAINENT DS    0H                                                  0002
         USING *,@15                                               0002
         B     @PROLOG                                             0002
         DC    AL1(16)                                             0002
         DC    C'BLSDMSG0  78.064'                                 0002
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                     0002
         BALR  @12,0                                               0002
@PSTART  DS    0H                                                  0002
         USING @PSTART,@12                                         0002
         L     @00,@SIZDATD                                        0002
         BLSUALLS R,LV=(0)
         LR    @11,@01                                             0002
         USING @DATD,@11                                           0002
         ST    @13,@SA00001+4                                      0002
         LM    @00,@01,20(@13)                                     0002
         ST    @11,8(,@13)                                         0002
         LR    @13,@11                                             0002
         MVC   @PC00001(24),0(@01)                                 0002
*                                                                  0136
*/********************************************************************/
*/*                                                                  */
*/*  MAINLINE                                                        */
*/*                                                                  */
*/********************************************************************/
*                                                                  0136
*   ZZ2PTR=ADDR(ATV);               /* INITIALIZE POINTER TO THE   0136
*                                      ACTIVE TASK VARIABLE - THE ZZ2
*                                      CONTROL BLOCK.                */
         L     ZZ2PTR,@PC00001                                     0136
*   RETC=ZERO;                      /* INITIALIZE THE RETC.          */
         SLR   RETC,RETC                                           0137
*   RCODE=ZERO;                     /* INITIALIZE REASON/RETURN CODE
*                                      TO ZERO.                      */
         SLR   RCODE,RCODE                                         0138
*   IF MSGNO^=MONE                  /* MSGNO = -1 IS A REQUEST TO  0139
*                                      ROUTE THE MESSAGE CHAIN ONLY,
*                                      THERE IS NO CURRENT MESSAGE 0139
*                                      CONSTRUCTION.                 */
*     THEN                                                         0139
         L     @10,@PC00001+4                                      0139
         CLC   MSGNO(4,@10),@CF00168                               0139
         BE    @RF00139                                            0139
*     DO;                                                          0140
*       CALL LOCMSGSK;              /* LOCATE THE MESSAGE SKELETON 0141
*                                      USING MSGNO.                  */
         BAL   @14,LOCMSGSK                                        0141
*       IF RCODE=ZERO THEN                                         0142
         LTR   RCODE,RCODE                                         0142
         BNZ   @RF00142                                            0142
*         CALL BUILDMSG;            /* BUILD MESSAGE, INCLUDING    0143
*                                      INSERTS, IN A TEMPORARY BUFFER*/
         BAL   @14,BUILDMSG                                        0143
*       IF RCODE=ZERO THEN                                         0144
@RF00142 LTR   RCODE,RCODE                                         0144
         BNZ   @RF00144                                            0144
*         CALL CHAINMSG;            /* GET STORAGE FOR OUTPUT MESSAGE
*                                      AND TRANSFER CURRENT MESSAGE
*                                      FROM TEMPORARY BUFFER TO THIS
*                                      ELEMENT. HANG THE ELEMENT ONTO
*                                      THE INPUT MESSAGE CHAIN.      */
         BAL   @14,CHAINMSG                                        0145
*     END;                                                         0146
@RF00144 DS    0H                                                  0147
*   IF RCODE=ZERO                   /* DON'T CHECK ROUTING FLAGS   0147
*                                      HERE. THIS ALLOWS MSGNO = -1
*                                      AND NO ROUTING REQUESTED TO 0147
*                                      FLUSH (FREEMAIN) ALL MESSAGES
*                                      ON THE INPUT MESSAGE CHAIN.   */
*     THEN                                                         0147
@RF00139 LTR   RCODE,RCODE                                         0147
         BNZ   @RF00147                                            0147
*     CALL BLSDROUT;                /* ROUTE THE MESSAGE CHAIN TO THE
*                                      OUTPUT PROCESSORS.            */
         BAL   @14,BLSDROUT                                        0148
*   IF RCODE=ZERO×                  /* IF NO ERRORS HAVE OCCURRED, 0149
*                                      OR...                         */
*       (RCODE=TWELVE&ZZ1EVEP=ON)   /* ...IF THE USER HAS REQUESTED
*                                      CANCELLATION OF THE         0149
*                                      SUBCOMMAND...                 */
*     THEN                                                         0149
@RF00147 LTR   RCODE,RCODE                                         0149
         BZ    @RT00149                                            0149
         C     RCODE,@CF00038                                      0149
         BNE   @RF00149                                            0149
         L     @10,ZZ2ZZ1P(,ZZ2PTR)                                0149
         TM    ZZ1EVEP(@10),B'01000000'                            0149
         BNO   @RF00149                                            0149
@RT00149 DS    0H                                                  0150
*     RETURN CODE(RCODE);           /* ...THEN RETURN TO THE CALLER, */
         L     @13,4(,@13)                                         0150
         L     @00,@SIZDATD                                        0150
         LR    @01,@11                                             0150
         BLSUFRES R,LV=(0),A=(1)
         LR    @15,@05                                             0150
         L     @14,12(,@13)                                        0150
         LM    @00,@12,20(@13)                                     0150
         BR    @14                                                 0150
*   ELSE                                                           0151
*     DO;                           /* OTHERWISE, ABEND WITH RCODE AS
*                                      THE REASON CODE IN REGISTER 15
*                                      - USER ABEND CODE IS IN     0151
*                                      VARIABLE DMSG0AC.             */
@RF00149 DS    0H                                                  0152
*       RESPECIFY                                                  0152
*        (R15) RESTRICTED;                                         0152
*       R15=RCODE;                                                 0153
         LR    R15,RCODE                                           0153
*       DO;                         /* ABEND(DMSG0AC) DUMP USER      */
*         RESPECIFY                                                0155
*          (GPR01F) RESTRICTED;                                    0155
*         GPR01F=(DMSG0AC)&'00000FFF'X;/* COMP CODE IN BITS 20-31    */
         LA    GPR01F,105                                          0156
*         GPR01F=GPR01F×'80000000'X;/* DUMP/STEP/DUMPOPTS FLAG       */
         O     GPR01F,@CF00072                                     0157
*         SVC(13);                  /* ISSUE ABEND SVC               */
         SVC   13                                                  0158
*         RESPECIFY                                                0159
*          (GPR01F) UNRESTRICTED;                                  0159
*       END;                        /* ABEND(DMSG0AC) DUMP USER      */
*       RESPECIFY                                                  0161
*        (R15) UNRESTRICTED;                                       0161
*     END;                                                         0162
*                                                                  0163
*/********************************************************************/
*/*                                                                  */
*/*  LOCATE THE MESSAGE SKELETON IN THE INPUT CSECT GIVEN            */
*/*  THE MESSAGE NUMBER AS THE KEY.                                  */
*/*                                                                  */
*/********************************************************************/
*                                                                  0163
*LOCMSGSK:                                                         0163
*   PROCEDURE;                                                     0163
         B     @PB00002                                            0163
LOCMSGSK STM   @14,@03,12(@13)                                     0163
         STM   @06,@12,44(@13)                                     0163
*   CCRITPTR=MSGCSECT;              /* GET THE ADDRESS OF THE      0164
*                                      COMPONENT CROSS REFERENCE   0164
*                                      TABLE.                        */
         L     @10,@PC00001+12                                     0164
         L     CCRITPTR,MSGCSECT(,@10)                             0164
*   TEMP=MSGNO/COMPC;               /* ISOLATE THE COMPONENT CROSS 0165
*                                      REFERENCE TABLE INDEX         */
         L     @10,@PC00001+4                                      0165
         L     @00,MSGNO(,@10)                                     0165
         SRDA  @00,32                                              0165
         D     @00,@CF00172                                        0165
         LR    TEMP,@01                                            0165
*   IF TEMP>NCCRIT                  /* IF THIS INDEX IS GREATER THAN
*                                      THE NUMBER OF ENTRIES IN THE
*                                      TABLE, THEN SET THE REASON  0166
*                                      CODE.                         */
*     THEN                                                         0166
         C     TEMP,NCCRIT(,CCRITPTR)                              0166
         BNH   @RF00166                                            0166
*     RCODE=NCTE;                                                  0167
         LA    RCODE,20                                            0167
*   ELSE                                                           0168
*     DO;                                                          0168
         B     @RC00166                                            0168
@RF00166 DS    0H                                                  0169
*       SCTPTR=SCTP(TEMP+ONE);      /* GET THE ADDRESS OF THE      0169
*                                      SUBCOMPONENT CROSS REFERENCE
*                                      TABLE.                        */
         LR    @10,TEMP                                            0169
         SLA   @10,2                                               0169
         L     SCTPTR,SCTP(@10,CCRITPTR)                           0169
*       IF SCTPTR=ZERO              /* IF THIS ADDRESS IS ZERO, THEN
*                                      THE NEEDED SUBCOMPONENT CROSS
*                                      REFERENCE TABLE DOES NOT    0170
*                                      EXIST. SET THE REASON CODE FOR
*                                      THIS SITUATION.               */
*         THEN                                                     0170
         LTR   SCTPTR,SCTPTR                                       0170
         BNZ   @RF00170                                            0170
*         RCODE=ZCTE;                                              0171
         LA    RCODE,24                                            0171
*     END;                                                         0172
@RF00170 DS    0H                                                  0173
*   IF RCODE=ZERO                   /* IF NO ERROR HAS OCCURRED, THEN
*                                      ...                           */
*     THEN                                                         0173
@RC00166 LTR   RCODE,RCODE                                         0173
         BNZ   @RF00173                                            0173
*     DO;                                                          0174
*       TEMP=MSGNO//COMPC;          /* ISOLATE THE SUBCOMPONENT CROSS
*                                      REFERENCE TABLE INDEX FROM THE
*                                      INPUT MESSAGE NUMBER (THE   0175
*                                      HUNDREDS DIGIT).              */
         L     @10,@PC00001+4                                      0175
         L     @00,MSGNO(,@10)                                     0175
         SRDA  @00,32                                              0175
         D     @00,@CF00172                                        0175
         LR    TEMP,@00                                            0175
*       TEMP1=TEMP/SCOMPC;                                         0176
         LR    @00,TEMP                                            0176
         SRDA  @00,32                                              0176
         D     @00,@CF00174                                        0176
         LR    TEMP1,@01                                           0176
*       IF TEMP1>NSCT               /* IF THE SUBCOMPONENT CROSS   0177
*                                      REFERENCE TABLE INDEX IS    0177
*                                      GREATER THAN THE NUMBER OF  0177
*                                      ENTRIES IN THE TABLE, THEN  0177
*                                      THEN SET THE REASON CODE TO 0177
*                                      INDICATE THIS FACT.           */
*         THEN                                                     0177
         C     TEMP1,NSCT(,SCTPTR)                                 0177
         BNH   @RF00177                                            0177
*         RCODE=NSCTE;                                             0178
         LA    RCODE,28                                            0178
*       ELSE                                                       0179
*         DO;                                                      0179
         B     @RC00177                                            0179
@RF00177 DS    0H                                                  0180
*           SSCTPTR=SSCTP(TEMP1+ONE);/* OTHERWISE, GET THE ADDRESS OF
*                                      THE SUB-SUBCOMPONENT CROSS  0180
*                                      REFERENCE TABLE.              */
         LR    @10,TEMP1                                           0180
         SLA   @10,2                                               0180
         L     SSCTPTR,SSCTP(@10,SCTPTR)                           0180
*           IF SSCTPTR=ZERO         /* IF THE ADDRESS OF THE       0181
*                                      SUB-SUBCOMPONENT CROSS      0181
*                                      REFERENCE TABLE IS ZERO, THEN
*                                      THIS TABLE DOES NOT EXIST. SET
*                                      THE REASON CODE TO INDICATE 0181
*                                      THIS SITUATION.               */
*             THEN                                                 0181
         LTR   SSCTPTR,SSCTPTR                                     0181
         BNZ   @RF00181                                            0181
*             RCODE=ZSCTE;                                         0182
         LA    RCODE,32                                            0182
*         END;                                                     0183
@RF00181 DS    0H                                                  0184
*     END;                                                         0184
@RC00177 DS    0H                                                  0185
*   IF RCODE=ZERO                   /* IF NO ERRORS HAVE OCCURRED, 0185
*                                      THEN...                       */
*     THEN                                                         0185
@RF00173 LTR   RCODE,RCODE                                         0185
         BNZ   @RF00185                                            0185
*     DO;                                                          0186
*       TEMP1=TEMP//SCOMPC;         /* EXTRACT THE SUB-SUBCOMPONENT
*                                      CROSS REFERENCE TABLE INDEX 0187
*                                      FROM THE INPUT MESSAGE NUMBER
*                                      (THE LAST TWO DIGITS).        */
         LR    @00,TEMP                                            0187
         SRDA  @00,32                                              0187
         D     @00,@CF00174                                        0187
         LR    TEMP1,@00                                           0187
*       IF TEMP1>NSSCT              /* IF THIS INDEX IS GREATER THAN
*                                      THE NUMBER OF ENTRIES IN THE
*                                      TABLE, THEN SET THE REASON  0188
*                                      CODE TO INDICATE THIS FACT.   */
*         THEN                                                     0188
         C     TEMP1,NSSCT(,SSCTPTR)                               0188
         BNH   @RF00188                                            0188
*         RCODE=NSSCTE;                                            0189
         LA    RCODE,36                                            0189
*       ELSE                                                       0190
*         DO;                                                      0190
         B     @RC00188                                            0190
@RF00188 DS    0H                                                  0191
*           MSGPTR=MSGP(TEMP1+ONE); /* OTHERWISE, OBTAIN THE ADDRESS
*                                      OF THE MESSAGE SKELETON FROM
*                                      THE SUB-SUBCOMPONENT CROSS  0191
*                                      REFERENCE TABLE.              */
         LR    @10,TEMP1                                           0191
         SLA   @10,2                                               0191
         L     MSGPTR,MSGP(@10,SSCTPTR)                            0191
*           IF MSGPTR=ZERO          /* IF THIS ADDRESS IS ZERO, THE
*                                      THE REQUESTED MESSAGE DOES NOT
*                                      EXIST. SET THE REASON CODE TO
*                                      INDICATE THIS SITUATION.      */
*             THEN                                                 0192
         LTR   MSGPTR,MSGPTR                                       0192
         BNZ   @RF00192                                            0192
*             RCODE=ZSSCTE;                                        0193
         LA    RCODE,40                                            0193
*         END;                                                     0194
*     END;                                                         0195
*   END LOCMSGSK;                   /* RETURN THE ADDRESS OF THE   0196
*                                      MESSAGE SKELETON OR A REASON
*                                      CODE TO THE MAINLINE.         */
@EL00002 DS    0H                                                  0196
@EF00002 DS    0H                                                  0196
@ER00002 LM    @14,@03,12(@13)                                     0196
         LM    @06,@12,44(@13)                                     0196
         BR    @14                                                 0196
*                                                                  0197
*/********************************************************************/
*/*                                                                  */
*/*  BUILD OUTPUT MESSAGE IN BUFFER USING FOUND SKELETON             */
*/*  AND ANY INSERTS GIVEN IN THE INPUT PARAMETERS.                  */
*/*                                                                  */
*/********************************************************************/
*                                                                  0197
*BUILDMSG:                                                         0197
*   PROCEDURE;                      /* THIS PROCEDURE IS NOT CALLED
*                                      IF THE REASON CODE HAD BEEN 0197
*                                      SET BY PREVIOUS PROCESSING.   */
BUILDMSG STM   @14,@04,12(@13)                                     0197
         STM   @06,@08,44(@13)                                     0197
         STM   @10,@12,60(@13)                                     0197
*   NINSREM=NMSGINS;                /* INITIALIZE THE NUMBER OF    0198
*                                      REMAINING INSERTS NEEDED BY 0198
*                                      THE MESSAGE SKELETON WITH THE
*                                      TOTAL NUMBER OF INSERTS NEEDED
*                                      BY THE MESSAGE SKELETON.      */
         LH    NINSREM,NMSGINS(,MSGPTR)                            0198
*   MSGPTR=MSGPTR+LENGTH(NMSGINS)+NINSREM*LENGTH(MSGRSVD);/* BUMP THE
*                                      MESSAGE SKELETON ADDRESS OVER
*                                      THE HEADER DATA TO THE FIRST
*                                      MESSAGE SEGMENT.              */
         LA    @10,2                                               0199
         ALR   @10,MSGPTR                                          0199
         LR    @02,NINSREM                                         0199
         ALR   @02,@02                                             0199
         ALR   @10,@02                                             0199
         LR    MSGPTR,@10                                          0199
*   INTPTR=ADDR(BUFFER);            /* INITIALIZE THE ADDRESS OF THE
*                                      INTERNAL MESSAGE CONSTRUCTION
*                                      AREA.                         */
         LA    INTPTR,BUFFER                                       0200
*   MINTPTR=INTPTR+LENGTH(BUFFER);  /* ESTABLISH THE MAXIMUM ADDRESS
*                                      THE INTPTR CAN REACH WITHOUT
*                                      OVERRUNNING THE INTERNAL    0201
*                                      MESSAGE CONSTRUCTION AREA.    */
         LA    MINTPTR,250                                         0201
         ALR   MINTPTR,INTPTR                                      0201
*   INSPTR=INSRTPTR;                /* INITIALIZE THE ADDRESS OF THE
*                                      INSERT ELEMENT POINTER TO THE
*                                      FIRST ELEMENT ON THE INSERT 0202
*                                      CHAIN. IT CAN BE ZERO IF THERE
*                                      IS NO SUCH CHAIN.             */
         L     @10,@PC00001+20                                     0202
         L     INSPTR,INSRTPTR(,@10)                               0202
*   DO WHILE NINSREM>=ZERO&RCODE=ZERO;/* DO WHILE THE MESSAGE      0203
*                                      SKELETON STILL REQUIRES     0203
*                                      INSERTS ... AND NO ERRORS ARE
*                                      DETECTED ...                  */
*                                                                  0203
         B     @DE00203                                            0203
@DL00203 DS    0H                                                  0204
*     /***************************************************************/
*     /*                                                             */
*     /* MOVE NEXT MESSAGE SKELETON SEGMENT                          */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0204
*     IF LMSGTXT>ZERO               /* IF THE CURRENT MESSAGE      0204
*                                      SKELETON SEGMENT CONTAINS SOME
*                                      TEXT, ...                     */
*       THEN                        /* THEN TRY TO MOVE IT TO THE  0204
*                                      INTERNAL CONSTRUCTION AREA.   */
         CLI   LMSGTXT(MSGPTR),0                                   0204
         BNH   @RF00204                                            0204
*       DO;                                                        0205
*         IF INTPTR+LMSGTXT<=MINTPTR/* IF THE INTERNAL MESSAGE     0206
*                                      CONSTRUCTION AREA WON'T BE  0206
*                                      OVERRUN, ...                  */
*           THEN                                                   0206
         SLR   @10,@10                                             0206
         IC    @10,LMSGTXT(,MSGPTR)                                0206
         LR    @02,INTPTR                                          0206
         ALR   @02,@10                                             0206
         CR    @02,MINTPTR                                         0206
         BH    @RF00206                                            0206
*           DO;                                                    0207
*             INTBUF(ONE:LMSGTXT)=MSGTXT(ONE:LMSGTXT);/* ...THEN MOVE
*                                      THE MESSAGE SKELETON SEGMENT
*                                      TO THE INTERNAL CONSTRUCTION
*                                      AREA.                         */
         LR    @02,@10                                             0208
         BCTR  @02,0                                               0208
         EX    @02,@SM00903                                        0208
*             INTPTR=INTPTR+LMSGTXT;/* ...AND UPDATE THE INTERNAL  0209
*                                      MESSAGE CONSTRUCTION AREA   0209
*                                      POINTER.                      */
         ALR   INTPTR,@10                                          0209
*           END;                                                   0210
*         ELSE                                                     0211
*           RCODE=MSTL;             /* ...BUT IF OVERRUN WOULD OCCUR,
*                                      INDICATE THIS FACT BY SETTING
*                                      THE REASON CODE.              */
         B     @RC00206                                            0211
@RF00206 LA    RCODE,44                                            0211
*       END;                                                       0212
@RC00206 DS    0H                                                  0213
*     IF RCODE=ZERO                 /* IF NO ERROR WAS DETECTED, THEN
*                                      ...                           */
*       THEN                                                       0213
@RF00204 SLR   @10,@10                                             0213
         CR    RCODE,@10                                           0213
         BNE   @RF00213                                            0213
*       DO;                                                        0214
*         MSGPTR=MSGPTR+LMSGTXT+LENGTH(LMSGTXT);/* BUMP THE MESSAGE
*                                      SKELETON SEGMENT POINTER TO 0215
*                                      THE NEXT SEGMENT.             */
         LR    @02,MSGPTR                                          0215
         SLR   @15,@15                                             0215
         IC    @15,LMSGTXT(,MSGPTR)                                0215
         ALR   @02,@15                                             0215
         AL    @02,@CF00052                                        0215
         LR    MSGPTR,@02                                          0215
*         NINSREM=NINSREM-ONE;      /* AN INSERT WILL ALWAYS OCCUR 0216
*                                      BETWEEN SKELETON MESSAGE    0216
*                                      SEGMENTS. REDUCE THE NUMBER 0216
*                                      REMAINING TO BE DONE.         */
         BCTR  NINSREM,0                                           0216
*         IF NINSREM>=ZERO          /* IF THE NUMBER NOW REMAINING IS
*                                      .GE. 0, THEN THE MESSAGE    0217
*                                      SKELETON REQUIRES ANOTHER   0217
*                                      INSERT (THAT IS, THE LAST   0217
*                                      MESSAGE SKELETON SEGMENT HAS
*                                      NOT YET BEEN REACHED).        */
*           THEN                                                   0217
         CR    NINSREM,@10                                         0217
         BL    @RF00217                                            0217
*           DO;                                                    0218
*             IF INSPTR=ZERO        /* IF THE INSERT CHAIN POINTER IS
*                                      ZERO, NO MORE INSERTS REMAIN
*                                      ON THE CHAIN. INDICATE THIS 0219
*                                      FACT VIA THE REASON CODE.     */
*               THEN                                               0219
         CR    INSPTR,@10                                          0219
         BNE   @RF00219                                            0219
*               RCODE=NOINS;                                       0220
         LA    RCODE,52                                            0220
*             ELSE                                                 0221
*               DO;                 /* OTHERWISE, THERE IS ANOTHER 0221
*                                      INSERT ON THE INPUT INSERT  0221
*                                      CHAIN.                        */
*                                                                  0221
         B     @RC00219                                            0221
@RF00219 DS    0H                                                  0222
*                 /***************************************************/
*                 /*                                                 */
*                 /* MOVE NEXT INSERT                                */
*                 /*                                                 */
*                 /***************************************************/
*                                                                  0222
*                 INSERTLN=INSTXTLN;/* SET MAXIMUM INSERT LENGTH   0222
*                                      SIZE.                         */
         LH    INSERTLN,INSTXTLN(,INSPTR)                          0222
*                 IF FLAG1=OFF      /* IF FLAG1 IS OFF,              */
*                   THEN            /* THEN DELETE ALL TRAILING    0223
*                                      BLANKS FROM THE INSERT        */
         L     @10,@PC00001+16                                     0223
         TM    FLAG1(@10),B'01000000'                              0223
         BNZ   @RF00223                                            0223
*                   DO WHILE INSERTLN>ZERO&INSTXT(INSERTLN)=BLANK; 0224
         B     @DE00224                                            0224
@DL00224 DS    0H                                                  0225
*                     INSERTLN=INSERTLN-ONE;                       0225
         BCTR  INSERTLN,0                                          0225
*                   END;                                           0226
@DE00224 LTR   INSERTLN,INSERTLN                                   0226
         BNP   @DC00224                                            0226
         L     @10,INSTXPTR(,INSPTR)                               0226
         ALR   @10,INSERTLN                                        0226
         BCTR  @10,0                                               0226
         CLI   INSTXT(@10),C' '                                    0226
         BE    @DL00224                                            0226
@DC00224 DS    0H                                                  0227
*                 IF INSERTLN>ZERO THEN                            0227
@RF00223 LTR   INSERTLN,INSERTLN                                   0227
         BNP   @RF00227                                            0227
*                   DO;                                            0228
*                     IF INTPTR+INSERTLN<=MINTPTR/* ...IF OVERRUN  0229
*                                      WON'T OCCUR, ...              */
*                       THEN                                       0229
         LR    @10,INTPTR                                          0229
         ALR   @10,INSERTLN                                        0229
         CR    @10,MINTPTR                                         0229
         BH    @RF00229                                            0229
*                       DO;                                        0230
*                         INTBUF(ONE:INSERTLN)=INSTXT(ONE:INSERTLN);
         LR    @10,INSERTLN                                        0231
         BCTR  @10,0                                               0231
         L     @01,INSTXPTR(,INSPTR)                               0231
         EX    @10,@SM00905                                        0231
*                                   /* ...THEN MOVE THE INSERT TEXT
*                                      INTO THE INTERNAL MESSAGE   0232
*                                      CONSTRUCTION AREA ...         */
*                         INTPTR=INTPTR+INSERTLN;/* ...AND UPDATE THE
*                                      CURRENT POINTER INTO THE    0232
*                                      INTERNAL MESSAGE CONSTRUCTION
*                                      AREA.                         */
         ALR   INTPTR,INSERTLN                                     0232
*                       END;                                       0233
*                     ELSE                                         0234
*                       RCODE=MITL; /* ELSE, IF OVERRUN OF THE     0234
*                                      INTERNAL MESSAGE CONSTRUCTION
*                                      AREA WOULD OCCUR, INDICATE  0234
*                                      THIS FACT VIA THE REASON CODE */
         B     @RC00229                                            0234
@RF00229 LA    RCODE,48                                            0234
*                   END;                                           0235
@RC00229 DS    0H                                                  0236
*                 IF RCODE=ZERO     /* IF NO ERRORS HAVE OCCURRED, 0236
*                                      THEN ...                      */
*                   THEN                                           0236
@RF00227 LTR   RCODE,RCODE                                         0236
         BNZ   @RF00236                                            0236
*                   INSPTR=INSCHAIN;/* ...UPDATE THE INSERT CHAIN  0237
*                                      ELEMENT POINTER TO THE NEXT 0237
*                                      ELEMENT ON THE CHAIN.         */
         L     INSPTR,INSCHAIN(,INSPTR)                            0237
*               END;                                               0238
@RF00236 DS    0H                                                  0239
*           END;                                                   0239
@RC00219 DS    0H                                                  0240
*       END;                                                       0240
@RF00217 DS    0H                                                  0241
*   END;                                                           0241
@RF00213 DS    0H                                                  0241
@DE00203 SLR   @10,@10                                             0241
         CR    NINSREM,@10                                         0241
         BL    @DC00203                                            0241
         CR    RCODE,@10                                           0241
         BE    @DL00203                                            0241
@DC00203 DS    0H                                                  0242
*   IF RCODE=ZERO                   /* IF NO ERRORS HAVE OCCURRED, 0242
*                                      THEN ...                      */
*     THEN                                                         0242
         SLR   @10,@10                                             0242
         CR    RCODE,@10                                           0242
         BNE   @RF00242                                            0242
*     IF INSPTR^=ZERO               /* ...ALL INSERTS WHICH WERE   0243
*                                      REQUIRED BY THE MESSAGE     0243
*                                      SKELETON HAVE BEEN USED. IF 0243
*                                      ADDITIONAL INSERTS STILL    0243
*                                      REMAIN, TOO MANY WERE PROVIDED
*                                      IN THE INPUT. INDICATE THIS 0243
*                                      FACT VIA THE REASON CODE.     */
*       THEN                                                       0243
         CR    INSPTR,@10                                          0243
         BE    @RF00243                                            0243
*       RCODE=TMINS;                                               0244
         LA    RCODE,56                                            0244
*     ELSE                                                         0245
*       LENOMSG=INTPTR-ADDR(BUFFER);/* SET THE LENGTH OF THE TEXT TO
*                                      BE OUTPUT TO THE AMOUNT OF  0245
*                                      TEXT WHICH HAS BEEN ASSEMBLED
*                                      IN THE INTERNAL MESSAGE     0245
*                                      CONSTRUCTION AREA.            */
         B     @RC00243                                            0245
@RF00243 LA    LENOMSG,BUFFER                                      0245
         LCR   LENOMSG,LENOMSG                                     0245
         ALR   LENOMSG,INTPTR                                      0245
*   END BUILDMSG;                                                  0246
@EL00003 DS    0H                                                  0246
@EF00003 DS    0H                                                  0246
@ER00003 LM    @14,@04,12(@13)                                     0246
         LM    @06,@08,44(@13)                                     0246
         LM    @10,@12,60(@13)                                     0246
         BR    @14                                                 0246
*                                                                  0247
*/********************************************************************/
*/*                                                                  */
*/*  CONSTRUCT THE MESSAGE IN ITS OUTPUT FORMAT AND CHAIN THE        */
*/*  MESSAGE ONTO THE INPUT MESSAGE CHAIN, IF ANY, AS SPECIFIED      */
*/*                 BY FLAG0.                                        */
*/*                                                                  */
*/********************************************************************/
*                                                                  0247
*CHAINMSG:                                                         0247
*   PROCEDURE;                                                     0247
*                                                                  0247
CHAINMSG STM   @14,@04,12(@13)                                     0247
         STM   @06,@12,44(@13)                                     0247
*   /*****************************************************************/
*   /*                                                               */
*   /* BUILD THE OUTPUT MESSAGE ELEMENT                              */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0248
*   SPOOL=ZZZSPEXC;                 /* SET THE SUBPOOL FROM WHICH TO
*                                      OBTAIN STORAGE.               */
         LA    SPOOL,1                                             0248
*   DO;                             /* GETMAIN (RC) LV(LENOMSG+LENGTH
*                                      (MSGDPRF)+LENGTH(MSGDWRT))  0249
*                                      SP(SPOOL) RTCD(RCODE)         */
*     RESPECIFY                                                    0250
*      (GPR01F,                                                    0250
*       GPR15F,                                                    0250
*       GPR00F) RESTRICTED;                                        0250
*     GPR01F=0;                     /* REG 1 MUST BE ZERO            */
         SLR   GPR01F,GPR01F                                       0251
*     GPR15F=0;                     /* RC-TYPE GETMAIN               */
         SLR   GPR15F,GPR15F                                       0252
*     GPR00F=LENOMSG+LENGTH(MSGDPRF)+LENGTH(MSGDWRT);/* LENGTH     0253
*                                      REQUESTED                     */
         LA    GPR00F,16                                           0253
         ALR   GPR00F,LENOMSG                                      0253
*     GPR15F=GPR15F×((SPOOL)*256);  /* SP IN BYTE 2                  */
         LR    @14,SPOOL                                           0254
         SLA   @14,8                                               0254
         OR    GPR15F,@14                                          0254
*     SVC(120);                     /* RC/RU-FORM OF GETMAIN         */
         SVC   120                                                 0255
*     RCODE=GPR15F;                 /* SET RETURN CODE               */
         LR    RCODE,GPR15F                                        0256
*     RESPECIFY                                                    0257
*      (GPR01F,                                                    0257
*       GPR15F,                                                    0257
*       GPR00F) UNRESTRICTED;                                      0257
*   END;                            /* GETMAIN (RC) LV(LENOMSG+LENGTH
*                                      (MSGDPRF)+LENGTH(MSGDWRT))  0258
*                                      SP(SPOOL) RTCD(RCODE)         */
*   IF RCODE^=ZERO                  /* IF ERROR OCCURRED OBTAINING 0259
*                                      STORAGE,...                   */
*     THEN                                                         0259
         LTR   RCODE,RCODE                                         0259
         BZ    @RF00259                                            0259
*     RCODE=NSTOR;                  /* ...INDICATE SO IN RCODE AND 0260
*                                      BYPASS OTHER PROCESSING.      */
         LA    RCODE,60                                            0260
*   ELSE                                                           0261
*     DO;                           /* OTHERWISE, ...                */
         B     @RC00259                                            0261
@RF00259 DS    0H                                                  0262
*       RESPECIFY                                                  0262
*        (R0,                                                      0262
*         R1) RESTRICTED;                                          0262
*       OMSGPTR=R1;                 /* INITIALIZE THE OUTPUT MESSAGE
*                                      POINTER TO THE ADDRESS OF THE
*                                      STORAGE JUST OBTAINED.        */
         LR    OMSGPTR,R1                                          0263
*       MSGDFLEN=R0;                /* STORE THE LENGTH OF THE AREA
*                                      OBTAINED INTO THE AREA.       */
         STCM  R0,7,MSGDFLEN(OMSGPTR)                              0264
*       RESPECIFY                                                  0265
*        (R0,                                                      0265
*         R1) UNRESTRICTED;                                        0265
*       MSGDSPID=SPOOL;             /* STORE THE SUBPOOL OF THE AREA
*                                      OBTAINED INTO THE HEADER.     */
         STC   SPOOL,MSGDSPID(,OMSGPTR)                            0266
*       MSGDLEN=LENOMSG+LENGTH(MSGDMOV);/* SET THE LENGTH OF THE   0267
*                                      OUTPUT MESSAGE EQUAL TO THE 0267
*                                      LENGTH OF THE TEXT PLUS THE 4
*                                      BYTE HEADER (TSO PUTLINE    0267
*                                      MULTI-LINE FORMAT).           */
         LA    @10,4                                               0267
         ALR   @10,LENOMSG                                         0267
         STH   @10,MSGDLEN(,OMSGPTR)                               0267
*       MSGDPAD=ZERO;               /* SET THE OFFSET FIELD TO ZEROS.*/
         SLR   @10,@10                                             0268
         STH   @10,MSGDPAD(,OMSGPTR)                               0268
*       MSGDTXT(ONE:LENOMSG)=BUFFER(ONE:LENOMSG);/* MOVE IN THE    0269
*                                      OUTPUT TEXT.                  */
*                                                                  0269
         LR    @08,LENOMSG                                         0269
         BCTR  @08,0                                               0269
         EX    @08,@SM00907                                        0269
*       /*************************************************************/
*       /*                                                           */
*       /* CHAIN OUTPUT MESSAGE ONTO THE INPUT MESSAGE CHAIN         */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0270
*       IF MSGANCHR=ZERO            /* IF THE INPUT MESSAGE CHAIN IS
*                                      EMPTY...                      */
*         THEN                                                     0270
         L     @04,@PC00001+8                                      0270
         C     @10,MSGANCHR(,@04)                                  0270
         BNE   @RF00270                                            0270
*         DO;                       /* THEN THE CURRENT MESSAGE WILL
*                                      BE THE ONLY MESSAGE,        0271
*                                      REGARDLESS OF LIFO OR FIFO  0271
*                                      REQUEST.                      */
*           MSGANCHR=OMSGPTR+LENGTH(MSGDPRF);/* THE MESSAGE ANCHOR 0272
*                                      POINTS TO THE FORWARD CHAIN 0272
*                                      POINTER IN THE STRUCTURE, NOT
*                                      TO THE START OF THE STRUCTURE
*                                      ITSELF.                       */
         LA    @02,8                                               0272
         ALR   @02,OMSGPTR                                         0272
         ST    @02,MSGANCHR(,@04)                                  0272
*           MSGDNXT=ZERO;           /* A ZERO FORWARD POINTER      0273
*                                      INDICATES THIS IS THE LAST  0273
*                                      MESSAGE ON THE CHAIN.         */
         ST    @10,MSGDNXT(,OMSGPTR)                               0273
*           MSGDBAK=OMSGPTR;        /* THE BACKWARD POINTER POINTS TO
*                                      ITSELF, AND POINTS TO THE   0274
*                                      START OF THE STRUCTURE.       */
         ST    OMSGPTR,MSGDBAK(,OMSGPTR)                           0274
*         END;                                                     0275
*       ELSE                                                       0276
*         DO;                       /* ELSE THE INPUT MESSAGE CHAIN
*                                      IS NOT EMPTY.                 */
         B     @RC00270                                            0276
@RF00270 DS    0H                                                  0277
*           TOPDPTR=MSGANCHR-LENGTH(MSGDPRF);/* SET A POINTER TO THE
*                                      START OF THE STRUCTURE OF THE
*                                      FIRST MESSAGE ELEMENT       0277
*                                      CURRENTLY AT THE TOP OF THE 0277
*                                      MESSAGE CHAIN.                */
         LA    @10,8                                               0277
         L     @04,@PC00001+8                                      0277
         L     @15,MSGANCHR(,@04)                                  0277
         LR    TOPDPTR,@15                                         0277
         SLR   TOPDPTR,@10                                         0277
*           IF FLAG0=ON             /* DETERMINE WHETHER THE CALLER
*                                      WANTS THE MESSAGE QUEUED LIFO
*                                      OR FIFO ONTO THE OUTPUT     0278
*                                      MESSAGE CHAIN. IF FLAG0 IS ON,
*                                      THE CALLER WANTS LIFO       0278
*                                      QUEUEING.                     */
*             THEN                                                 0278
         L     @14,@PC00001+16                                     0278
         TM    FLAG0(@14),B'10000000'                              0278
         BNO   @RF00278                                            0278
*             DO;                                                  0279
*               MSGDNXT=MSGANCHR;   /* CHAIN THE OUTPUT MESSAGE TO 0280
*                                      THE CURRENT HEAD OF THE OUTPUT
*                                      QUEUE.                        */
         ST    @15,MSGDNXT(,OMSGPTR)                               0280
*               MSGANCHR=OMSGPTR+LENGTH(MSGDPRF);/* AND MAKE THE   0281
*                                      OUTPUT MESSAGE THE CURRENT  0281
*                                      HEAD OF THE OUTPUT QUEUE. THE
*                                      ADDRESS POINTS TO THE FORWARD
*                                      CHAIN FIELD IN THIS STRUCTURE,
*                                      NOT TO THE START OF THE     0281
*                                      STRUCTURE ITSELF.             */
         ALR   @10,OMSGPTR                                         0281
         ST    @10,MSGANCHR(,@04)                                  0281
*               MSGDBAK=TOPDPTR->MSGDBAK;/* MOVE THE BACKWARD POINTER
*                                      FROM THE OLD TOP ELEMENT TO 0282
*                                      THE NEW TOP ELEMENT.          */
         L     @10,MSGDBAK(,TOPDPTR)                               0282
         ST    @10,MSGDBAK(,OMSGPTR)                               0282
*             END;                                                 0283
*           ELSE                                                   0284
*             DO;                   /* THE CALLER WANTS FIFO       0284
*                                      QUEUEING.                     */
         B     @RC00278                                            0284
@RF00278 DS    0H                                                  0285
*               LASTDPTR=TOPDPTR->MSGDBAK;/* SET LASTDPTR TO THE   0285
*                                      ADDRESS OF THE LAST ELEMENT 0285
*                                      CURRENTLY ON THE MESSAGE    0285
*                                      CHAIN.                        */
         L     LASTDPTR,MSGDBAK(,TOPDPTR)                          0285
*               MSGDNXT=ZERO;       /* SINCE THE OUTPUT MESSAGE WILL
*                                      BE LAST ON THE OUTPUT MESSAGE
*                                      CHAIN, ITS FORWARD CHAIN    0286
*                                      POINTER WILL ALWAYS BE ZERO.  */
         SLR   @10,@10                                             0286
         ST    @10,MSGDNXT(,OMSGPTR)                               0286
*               LASTDPTR->MSGDNXT=OMSGPTR+LENGTH(MSGDPRF);/* SET THE
*                                      FORWARD POINTER IN THE LAST 0287
*                                      CURRENT ELEMENT ON THE MESSAGE
*                                      CHAIN TO POINT TO THE OUTPUT
*                                      MESSAGE BEING INSERTED ON THE
*                                      END OF THE CHAIN.             */
         LA    @10,8                                               0287
         ALR   @10,OMSGPTR                                         0287
         ST    @10,MSGDNXT(,LASTDPTR)                              0287
*               MSGDBAK=LASTDPTR;   /* SET THE BACKWARD POINTER IN 0288
*                                      THE OUTPUT MESSAGE BEING    0288
*                                      INSERTED ON THE END OF THE  0288
*                                      CHAIN TO POINT TO THE OLD LAST
*                                      ELEMENT ON THE CHAIN.         */
         ST    LASTDPTR,MSGDBAK(,OMSGPTR)                          0288
*             END;                                                 0289
*           TOPDPTR->MSGDBAK=OMSGPTR;/* SET THE BACKWARD POINTER OF
*                                      THE OLD TOP MESSAGE ELEMENT TO
*                                      POINT TO THE NEW OUTPUT     0290
*                                      MESSAGE. THIS IS DONE       0290
*                                      REGARDLESS OF WHETHER THE NEW
*                                      OUTPUT MESSAGE WAS INSERTED AT
*                                      THE TOP OR THE BOTTOM OF THE
*                                      MESSAGE CHAIN.                */
@RC00278 ST    OMSGPTR,MSGDBAK(,TOPDPTR)                           0290
*         END;                                                     0291
*     END;                                                         0292
*   END CHAINMSG;                                                  0293
@EL00004 DS    0H                                                  0293
@EF00004 DS    0H                                                  0293
@ER00004 LM    @14,@04,12(@13)                                     0293
         LM    @06,@12,44(@13)                                     0293
         BR    @14                                                 0293
*                                                                  0294
*   /*****************************************************************/
*   /*                                                               */
*   /* ROUTE MESSAGE CHAIN AS REQUESTED, THEN FREE THE MESSAGE CHAIN */
*   /* IF REQUESTED.                                                 */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0294
*BLSDROUT:                                                         0294
*   PROCEDURE;                                                     0294
BLSDROUT STM   @14,@04,@SA00005                                    0294
         STM   @06,@12,@SA00005+28                                 0294
*   TEMPTR=MSGANCHR;                /* GET THE ADDRESS OF THE FIRST
*                                      ELEMENT ON THE MESSAGE CHAIN. */
         L     @10,@PC00001+8                                      0295
         L     TEMPTR,MSGANCHR(,@10)                               0295
*   IF TEMPTR^=ZERO                 /* IF THERE ARE ANY MESSAGES ON
*                                      THE CHAIN, ...                */
*     THEN                                                         0296
         LTR   TEMPTR,TEMPTR                                       0296
         BZ    @RF00296                                            0296
*     DO;                                                          0297
*       IF FLAG2=ON&FLAG3=ON        /* IF BOTH ROUTING FLAGS ARE ON,
*                                      ...                           */
*         THEN                                                     0298
         L     @10,@PC00001+16                                     0298
         TM    FLAG2(@10),B'00110000'                              0298
         BNO   @RF00298                                            0298
*         DO;                                                      0299
*           CALL BLSUPUTN(ZZ2,MSGWNXT);/* ...THEN ROUTE THROUGH    0300
*                                      BLSUPUTN FOR EITHER PRINTER OR
*                                      TERMINAL OUTPUT.              */
         ST    ZZ2PTR,@AL00001                                     0300
         ST    TEMPTR,@AL00001+4                                   0300
         L     @15,ZZ2PUTNP(,ZZ2PTR)                               0300
         LA    @01,@AL00001                                        0300
         BALR  @14,@15                                             0300
*           RESPECIFY                                              0301
*            (R15) RESTRICTED;                                     0301
*           RCODE=R15;              /* SAVE RETURN CODE FROM       0302
*                                      BLSUPUTN.                     */
         LR    RCODE,R15                                           0302
*           RESPECIFY                                              0303
*            (R15) UNRESTRICTED;                                   0303
*         END;                                                     0304
*       IF FLAG2=ON&FLAG3=OFF       /* IF ONLY FLAG2 IS ON, ...      */
*         THEN                                                     0305
@RF00298 L     @10,@PC00001+16                                     0305
         TM    FLAG2(@10),B'00100000'                              0305
         BNO   @RF00305                                            0305
         TM    FLAG3(@10),B'00010000'                              0305
         BNZ   @RF00305                                            0305
*         DO;                                                      0306
*           CALL BLSUPRTN(ZZ2,MSGWNXT);/* ...THEN ROUTE THROUGH    0307
*                                      BLSUPRTN FOR PRINTER OUTPUT 0307
*                                      ONLY.                         */
         ST    ZZ2PTR,@AL00001                                     0307
         ST    TEMPTR,@AL00001+4                                   0307
         L     @10,ZZ2BVTP(,ZZ2PTR)                                0307
         L     @15,BVTPRTNP(,@10)                                  0307
         LA    @01,@AL00001                                        0307
         BALR  @14,@15                                             0307
*           RESPECIFY                                              0308
*            (R15) RESTRICTED;                                     0308
*           RCODE=R15;              /* SAVE RETURN CODE FROM       0309
*                                      BLSUPRTN.                     */
         LR    RCODE,R15                                           0309
*           RESPECIFY                                              0310
*            (R15) UNRESTRICTED;                                   0310
*         END;                                                     0311
*       IF FLAG2=OFF&FLAG3=ON       /* IF ONLY FLAG3 IS ON, ...      */
*         THEN                                                     0312
@RF00305 L     @10,@PC00001+16                                     0312
         TM    FLAG3(@10),B'00010000'                              0312
         BNO   @RF00312                                            0312
         TM    FLAG2(@10),B'00100000'                              0312
         BNZ   @RF00312                                            0312
*         DO;                                                      0313
*           CALL BLSUTRMN(ZZ2,MSGWNXT);/* ...THEN ROUTE THROUGH    0314
*                                      BLSUTRMN FOR TERMINAL OUTPUT
*                                      ONLY.                         */
         ST    ZZ2PTR,@AL00001                                     0314
         ST    TEMPTR,@AL00001+4                                   0314
         L     @15,ZZ2TRMNP(,ZZ2PTR)                               0314
         LA    @01,@AL00001                                        0314
         BALR  @14,@15                                             0314
*           RESPECIFY                                              0315
*            (R15) RESTRICTED;                                     0315
*           RCODE=R15;              /* SAVE RETURN CODE FROM       0316
*                                      BLSUTRMN.                     */
         LR    RCODE,R15                                           0316
*           RESPECIFY                                              0317
*            (R15) UNRESTRICTED;                                   0317
*         END;                                                     0318
*       IF RCODE=FOUR               /* CHANGE A RETURN CODE OF 4 TO A
*                                      RETURN CODE OF ZERO.          */
*         THEN                                                     0319
@RF00312 C     RCODE,@CF00049                                      0319
         BNE   @RF00319                                            0319
*         RCODE=ZERO;               /* ZERO IMPLIES THAT THE MESSAGE
*                                      WAS TRUNCATED WHEN BEING PUT
*                                      OUT TO THE PRINTER.           */
         SLR   RCODE,RCODE                                         0320
*       IF MSGNO=MONE               /* IF EITHER "BYPASS NEW MESSAGE
*                                      CONSTRUCTION" WAS REQUESTED,
*                                      ...                           */
*           ×FLAG2=ON×FLAG3=ON      /* ...OR MESSAGE ROUTING WAS   0321
*                                      REQUESTED (INDEPENDENT OF THE
*                                      RETURN CODE RECEIVED FROM THE
*                                      ROUTING...                    */
*         THEN                                                     0321
@RF00319 L     @10,@PC00001+4                                      0321
         CLC   MSGNO(4,@10),@CF00168                               0321
         BE    @RT00321                                            0321
         L     @10,@PC00001+16                                     0321
         TM    FLAG2(@10),B'00110000'                              0321
         BZ    @RF00321                                            0321
@RT00321 DS    0H                                                  0322
*         DO;                       /* ...THEN FREE ALL THE MESSAGES
*                                      ON THE MESSAGE CHAIN.         */
*           DO UNTIL TEMPTR=ZERO;   /* TEMPTR IS ALREADY SET TO THE
*                                      FIRST ELEMENT ON THE MESSAGE
*                                      CHAIN, WHICH EXISTS.          */
@DL00323 DS    0H                                                  0324
*             OMSGPTR=TEMPTR-LENGTH(MSGDPRF);/* SET OMSGPTR TO POINT
*                                      AT THE GETMAIN/FREEMAIN PREFIX
*                                      AREA OF THE MESSAGE ELEMENT.  */
         LR    OMSGPTR,TEMPTR                                      0324
         SL    OMSGPTR,@CF00060                                    0324
*             TEMPTR=MSGWNXT;       /* SET TEMPTR TO THE NEXT ELEMENT
*                                      ON THE CHAIN.                 */
         L     TEMPTR,MSGWNXT(,TEMPTR)                             0325
*             DO;                   /* FREEMAIN(R) LV(MSGDFLEN)SP(MSG
*                                      DSPID)A(MSGDENT)              */
*               RESPECIFY                                          0327
*                (GPR01F,                                          0327
*                 GPR00F) RESTRICTED;                              0327
*               GPR00F=MSGDFLEN;    /* LENGTH REQUESTED              */
         L     GPR00F,MSGDFLEN-1(,OMSGPTR)                         0328
         ICM   GPR00F,8,@CB00909                                   0328
*               GPR01F=MSGDSPID;    /* SP IN REG 1                   */
         SLR   GPR01F,GPR01F                                       0329
         IC    GPR01F,MSGDSPID(,OMSGPTR)                           0329
*               GEN(SLL   GPR01F,24)                               0330
*               NODEFS NOREFS NOSETS NOEXIT NOFLOWS SEQFLOW;       0330
         SLL   GPR01F,24
*               GPR00F=GPR00F×GPR01F;/* SP IN HI BYTE                */
         OR    GPR00F,GPR01F                                       0331
*               GPR01F=ADDR(MSGDENT);/* SET REGISTER ONE             */
         LR    GPR01F,OMSGPTR                                      0332
*               SVC(10);            /* R-FORM OF GETMAIN             */
         SVC   10                                                  0333
*               RESPECIFY                                          0334
*                (GPR01F,                                          0334
*                 GPR00F) UNRESTRICTED;                            0334
*             END;                  /* FREEMAIN(R) LV(MSGDFLEN)SP(MSG
*                                      DSPID)A(MSGDENT)              */
*           END;                                                   0336
@DE00323 LTR   TEMPTR,TEMPTR                                       0336
         BNZ   @DL00323                                            0336
*           MSGANCHR=TEMPTR;        /* SET MSGANCHR TO ZERO.         */
         L     @10,@PC00001+8                                      0337
         ST    TEMPTR,MSGANCHR(,@10)                               0337
*         END;                                                     0338
*     END;                                                         0339
*   END BLSDROUT;                                                  0340
@EL00005 DS    0H                                                  0340
@EF00005 DS    0H                                                  0340
@ER00005 LM    @14,@04,@SA00005                                    0340
         LM    @06,@12,@SA00005+28                                 0340
         BR    @14                                                 0340
@PB00005 DS    0H                                                  0341
*                                                                  0341
*/*BLSUPEND--MVS IPCS MODULE                                         */
*                                                                  0341
*   DECLARE                         /* GENERAL PURPOSE REGISTERS     */
*     GPR00F FIXED(31) REG(0),                                     0341
*     GPR01F FIXED(31) REG(1),                                     0341
*     GPR15F FIXED(31) REG(15);                                    0341
*   DECLARE                         /* COMMON VARIABLES              */
*     I256C CHAR(256) BASED,                                       0342
*     I031F FIXED(31) BASED,                                       0342
*     I031P PTR(31) BASED,                                         0342
*     I015F FIXED(15) BASED,                                       0342
*     I015P PTR(15) BASED,                                         0342
*     I008P PTR(8) BASED,                                          0342
*     I001C CHAR(1) BASED;                                         0342
*   GENERATE NODEFS NOREFS DATA;                                   0343
*   END                             /* BLRPEND END OF MODULE       0344
*                                      BLSDMSG0.                     */
*                                                                  0344
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (BLSDMSGD)                                       */
*/*%INCLUDE SYSLIB  (BLSUZZZ )                                       */
*/*%INCLUDE SYSLIB  (BLRFULL )                                       */
*/*%INCLUDE SYSLIB  (IKJCPPL )                                       */
*/*%INCLUDE SYSLIB  (IKJPSCB )                                       */
*/*%INCLUDE SYSLIB  (IKJECT  )                                       */
*/*%INCLUDE SYSLIB  (IKJUPT  )                                       */
*/*%INCLUDE SYSLIB  (BLSUSERV)                                       */
*/*%INCLUDE SYSLIB  (BLRSERV )                                       */
*/*%INCLUDE SYSLIB  (BLRSERVD)                                       */
*/*%INCLUDE SYSLIB  (BLSDSERV)                                       */
*                                                                  0344
*       ;                                                          0344
@EL00001 L     @13,4(,@13)                                         0344
@EF00001 L     @00,@SIZDATD                                        0344
         LR    @01,@11                                             0344
         BLSUFRES R,LV=(0),A=(1)
@ER00001 LM    @14,@12,12(@13)                                     0344
         BR    @14                                                 0344
@DATA    DS    0H
@SM00903 MVC   INTBUF(0,INTPTR),MSGTXT(MSGPTR)
@SM00905 MVC   INTBUF(0,INTPTR),INSTXT(@01)
@SM00907 MVC   MSGDTXT(0,OMSGPTR),BUFFER
@DATD    DSECT
         DS    0F
@SA00001 DS    18F
@PC00001 DS    6F
@SA00005 DS    14F
@AL00001 DS    2A
BLSDMSG0 CSECT
         DS    0F
@CF00052 DC    F'1'
@CF00049 DC    F'4'
@CF00060 DC    F'8'
@CF00038 DC    F'12'
@CF00174 DC    F'100'
@CF00172 DC    F'1000'
@CF00168 DC    F'-1'
@CF00072 DC    XL4'80000000'
@DATD    DSECT
         DS    0D
BUFFER   DS    CL250
BLSDMSG0 CSECT
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
         DS    0D
@CB00909 DC    X'00'
@DATD    DSECT
         SPACE 2
***********************************************************************
* THE FOLLOWING AREA, BLRPATCH, IS RESERVED FOR PATCH APPLICATION     *
* TO OBTAIN PATCH ROOM IN THE @DATD AUTOMATIC STORAGE AREA, MODIFY    *
* CONSTANT @SIZDATD TO REFLECT THE DESIRED @DATD SIZE                 *
***********************************************************************
         SPACE
BLSDMSG0 CSECT
         ORG
         DS    0D
BLRPATCH DC    CL8'ZAPAREA',(((*-BLSDMSG0+19)/20+7)/8)CL8'BLSDMSG0'
@DATD    DSECT
         SPACE 2
***********************************************************************
* ALIGN END OF DATA ON A DOUBLEWORD BOUNDARY                          *
***********************************************************************
         SPACE
         DS    0D
@DATD    DSECT
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
BLSDMSG0 CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
OMSGPTR  EQU   @03
INSPTR   EQU   @06
LENOMSG  EQU   @09
NINSREM  EQU   @07
MINTPTR  EQU   @08
INTPTR   EQU   @03
MSGPTR   EQU   @04
SSCTPTR  EQU   @08
SCTPTR   EQU   @06
CCRITPTR EQU   @02
RETC     EQU   @02
RCODE    EQU   @05
SPOOL    EQU   @06
INSERTLN EQU   @02
LASTDPTR EQU   @04
TOPDPTR  EQU   @02
TEMPTR   EQU   @06
TEMP1    EQU   @02
TEMP     EQU   @03
ZZ2PTR   EQU   @07
R15      EQU   @15
R0       EQU   @00
R1       EQU   @01
R2       EQU   @02
R3       EQU   @03
R4       EQU   @04
R5       EQU   @05
R9       EQU   @09
RB       EQU   @11
RD       EQU   @13
RE       EQU   @14
RF       EQU   @15
GPR01F   EQU   @01
GPR15F   EQU   @15
GPR00F   EQU   @00
RA       EQU   @10
RC       EQU   @12
R6       EQU   @06
R7       EQU   @07
R8       EQU   @08
CCRIT    EQU   0
NCCRIT   EQU   CCRIT
SCTP     EQU   CCRIT+4
SCT      EQU   0
NSCT     EQU   SCT
SSCTP    EQU   SCT+4
SSCT     EQU   0
NSSCT    EQU   SSCT
MSGP     EQU   SSCT+4
MESSAGE  EQU   0
NMSGINS  EQU   MESSAGE
MSGRSVD  EQU   MESSAGE+2
MSG      EQU   0
LMSGTXT  EQU   MSG
MSGTXT   EQU   MSG+1
INTBUF   EQU   0
INSERT   EQU   0
INSCHAIN EQU   INSERT
INSTXPTR EQU   INSERT+4
INSTXTLN EQU   INSERT+8
INSTEXT  EQU   0
INSTXT   EQU   INSTEXT
MSGDENT  EQU   0
MSGDPRF  EQU   MSGDENT
MSGDSPID EQU   MSGDPRF
MSGDFLEN EQU   MSGDPRF+1
MSGDBAK  EQU   MSGDPRF+4
MSGDWRT  EQU   MSGDENT+8
MSGDNXT  EQU   MSGDWRT
MSGDMOV  EQU   MSGDWRT+4
MSGDLEN  EQU   MSGDMOV
MSGDPAD  EQU   MSGDMOV+2
MSGDTXT  EQU   MSGDMOV+4
MSGWENT  EQU   0
MSGWNXT  EQU   MSGWENT
MSGWMOV  EQU   MSGWENT+4
ZZ1      EQU   0
ZZ1ATTN  EQU   ZZ1+360
ZZ1EVE   EQU   ZZ1ATTN+4
ZZ1EVEP  EQU   ZZ1EVE
ZZ1F     EQU   ZZ1+368
ZZ1N     EQU   ZZ1+1116
ZZ2      EQU   0
ZZ2AMD   EQU   ZZ2
@NM00014 EQU   ZZ2AMD+7
ZZ2PRT   EQU   ZZ2+138
ZZ2PRTT  EQU   ZZ2PRT+4
ZZ2PRTT1 EQU   ZZ2PRTT+1
ZZ2A     EQU   ZZ2+272
ZZ2AF    EQU   ZZ2A+16
ZZ2APID  EQU   ZZ2A+64
ZZ2AD    EQU   ZZ2A+74
ZZ2ADD   EQU   ZZ2AD
ZZ2ADDT  EQU   ZZ2ADD+2
ZZ2ADM   EQU   ZZ2AD+46
ZZ2ADMT  EQU   ZZ2ADM+2
ZZ2ADP   EQU   ZZ2AD+56
ZZ2ADPT  EQU   ZZ2ADP+2
ZZ2AQAS  EQU   ZZ2A+144
ZZ2AQD   EQU   ZZ2A+160
ZZ2AQDT  EQU   ZZ2AQD+10
ZZ2AQDF  EQU   ZZ2AQD+52
ZZ2STG   EQU   ZZ2+960
ZZ2ALLOP EQU   ZZ2+992
ZZ2FREEP EQU   ZZ2+996
ZZ2FF19P EQU   ZZ2+1000
ZZ2FRE1P EQU   ZZ2+1004
ZZ2FF18P EQU   ZZ2+1008
ZZ2DYNAP EQU   ZZ2+1012
ZZ2ZZ2CP EQU   ZZ2+1016
ZZ2ZZ2DP EQU   ZZ2+1020
ZZ2STAIP EQU   ZZ2+1024
ZZ2FF02P EQU   ZZ2+1028
ZZ2GETLP EQU   ZZ2+1032
ZZ2PARSP EQU   ZZ2+1036
ZZ2PTGTP EQU   ZZ2+1040
ZZ2PUTLP EQU   ZZ2+1044
ZZ2SCANP EQU   ZZ2+1048
ZZ2STCKP EQU   ZZ2+1052
ZZ2ALOCP EQU   ZZ2+1056
ZZ2MSGSP EQU   ZZ2+1060
ZZ2TRMOP EQU   ZZ2+1064
ZZ2TRMVP EQU   ZZ2+1068
ZZ2PUTNP EQU   ZZ2+1084
ZZ2TRMNP EQU   ZZ2+1088
ZZ2ENQ0P EQU   ZZ2+1092
ZZ2ADSDP EQU   ZZ2+1096
ZZ2APDRP EQU   ZZ2+1100
ZZ2FDSDP EQU   ZZ2+1104
ZZ2FPDRP EQU   ZZ2+1108
ZZ2ZZ1P  EQU   ZZ2+1264
ZZ2DVTP  EQU   ZZ2+1276
ZZ2BVTP  EQU   ZZ2+1280
ZZ2CPPL  EQU   ZZ2+1292
ZZ2CPPLC EQU   ZZ2CPPL
ZZ2ITR   EQU   ZZ2+2840
ZZ2ITRE  EQU   ZZ2ITR+16
ZZ2ITSE  EQU   ZZ2+2864
ZZ2ES    EQU   ZZ2+2872
ZZ2AMDX  EQU   ZZ2+7160
ZZ2AXO   EQU   ZZ2+7934
ZZ2AXOT  EQU   ZZ2AXO+2
CMD      EQU   0
CMDT     EQU   CMD+4
PSCB     EQU   0
PSCBATR1 EQU   PSCB+16
ECT      EQU   0
ECTSWS   EQU   ECT+28
ECTSWS2  EQU   ECT+40
ECTSWS21 EQU   ECTSWS2
UPT      EQU   0
UPTSWS   EQU   UPT+12
SA       EQU   0
SA1      EQU   SA
SAR      EQU   SA+12
BLSUPRTN EQU   0
BLSUPUTN EQU   0
BLSUTRMN EQU   0
BVT      EQU   0
BVTPUTLP EQU   BVT+4
BVTPUTOP EQU   BVT+12
BVTPUTTP EQU   BVT+16
BVTPUTVP EQU   BVT+20
BVTPUTAP EQU   BVT+24
BVTPRTTP EQU   BVT+28
BVTPRTAP EQU   BVT+32
BVTPUTDP EQU   BVT+36
BVTMONP  EQU   BVT+40
BVTMON2P EQU   BVT+44
BVTVSARP EQU   BVT+48
BVTVSENP EQU   BVT+64
BVTVSERP EQU   BVT+68
BVTVSGEP EQU   BVT+72
BVTVSGUP EQU   BVT+76
BVTVSPOP EQU   BVT+80
BVTVSPUP EQU   BVT+84
BVTMPKNP EQU   BVT+104
BVTMONLP EQU   BVT+108
BVTPUTCP EQU   BVT+132
BVTMPK1P EQU   BVT+136
BVTZZ2RP EQU   BVT+140
BVTPGMRP EQU   BVT+144
BVTMONAP EQU   BVT+148
BVTBLDDP EQU   BVT+152
BVTBLDLP EQU   BVT+156
BVTPGMCP EQU   BVT+160
BVTPGMDP EQU   BVT+164
BVTPGMLP EQU   BVT+168
BVTMONCP EQU   BVT+180
BVTMONDP EQU   BVT+184
BVTMONTP EQU   BVT+188
BVTPARIP EQU   BVT+192
BVTPARUP EQU   BVT+196
BVTPRTNP EQU   BVT+204
BVTVSCRP EQU   BVT+208
BVTVSMRP EQU   BVT+212
BVTMONXP EQU   BVT+216
BVTTRMAP EQU   BVT+228
DVT      EQU   0
DVTDEQPP EQU   DVT+8
DVTENQPP EQU   DVT+12
DVTAUTHP EQU   DVT+20
DVTLPCLP EQU   DVT+24
DVTBP00P EQU   DVT+28
DVTCN00P EQU   DVT+32
DVTDF00P EQU   DVT+36
DVTDS00P EQU   DVT+44
DVTFL00P EQU   DVT+48
DVTFP00P EQU   DVT+52
DVTGD00P EQU   DVT+56
DVTGG00P EQU   DVT+60
DVTGP00P EQU   DVT+64
DVTND00P EQU   DVT+68
DVTND01P EQU   DVT+72
DVTOD00P EQU   DVT+76
DVTPS00P EQU   DVT+80
DVTSD00P EQU   DVT+84
DVTSL00P EQU   DVT+88
DVTTL00P EQU   DVT+92
DVTUD00P EQU   DVT+96
DVTUP00P EQU   DVT+100
DVTLP00P EQU   DVT+104
DVTLALLP EQU   DVT+108
DVTLPFMP EQU   DVT+112
DVTCLOSP EQU   DVT+116
DVTOPENP EQU   DVT+120
DVTPERAP EQU   DVT+124
DVTDALLP EQU   DVT+128
BLSCALOC EQU   0
BLSDADSD EQU   0
BLSDAPDR EQU   0
BLSDDEQP EQU   0
BLSDENQP EQU   0
BLSDENQ0 EQU   0
BLSDFDSD EQU   0
BLSDFPDR EQU   0
BLSDMSGS EQU   0
BLSEAUTH EQU   0
BLSELPCL EQU   0
BLSELPFM EQU   0
BLSFBP00 EQU   0
BLSFCLOS EQU   0
BLSFCN00 EQU   0
BLSFDALL EQU   0
BLSFDF00 EQU   0
BLSFDS00 EQU   0
BLSFFL00 EQU   0
BLSFFP00 EQU   0
BLSFGD00 EQU   0
BLSFGG00 EQU   0
BLSFGP00 EQU   0
BLSFLALL EQU   0
BLSFLP00 EQU   0
BLSFND00 EQU   0
BLSFND01 EQU   0
BLSFOD00 EQU   0
BLSFOPEN EQU   0
BLSFPERA EQU   0
BLSFPS00 EQU   0
BLSFSD00 EQU   0
BLSFSL00 EQU   0
BLSFTL00 EQU   0
BLSFUD00 EQU   0
BLSFUP00 EQU   0
BLSUALLO EQU   0
BLSUBLDD EQU   0
BLSUBLDL EQU   0
BLSUDYNA EQU   0
BLSUFREE EQU   0
BLSUFRE1 EQU   0
BLSUMON  EQU   0
BLSUMONA EQU   0
BLSUMONC EQU   0
BLSUMOND EQU   0
BLSUMONL EQU   0
BLSUMONT EQU   0
BLSUMONX EQU   0
BLSUMON2 EQU   0
BLSUMPKN EQU   0
BLSUMPK1 EQU   0
BLSUPARI EQU   0
BLSUPARU EQU   0
BLSUPGMC EQU   0
BLSUPGMD EQU   0
BLSUPGML EQU   0
BLSUPGMR EQU   0
BLSUPRTA EQU   0
BLSUPRTT EQU   0
BLSUPUTA EQU   0
BLSUPUTC EQU   0
BLSUPUTD EQU   0
BLSUPUTL EQU   0
BLSUPUTO EQU   0
BLSUPUTT EQU   0
BLSUPUTV EQU   0
BLSUSTAI EQU   0
BLSUTRMA EQU   0
BLSUTRMO EQU   0
BLSUTRMV EQU   0
BLSUVSAR EQU   0
BLSUVSCR EQU   0
BLSUVSEN EQU   0
BLSUVSER EQU   0
BLSUVSGE EQU   0
BLSUVSGU EQU   0
BLSUVSMR EQU   0
BLSUVSPO EQU   0
BLSUVSPU EQU   0
BLSUZZ2C EQU   0
BLSUZZ2D EQU   0
BLSUZZ2R EQU   0
IKJEFF02 EQU   0
IKJEFF18 EQU   0
IKJEFF19 EQU   0
IKJGETL  EQU   0
IKJPARS  EQU   0
IKJPTGT  EQU   0
IKJPUTL  EQU   0
IKJSCAN  EQU   0
IKJSTCK  EQU   0
I001C    EQU   0
I008P    EQU   0
I015F    EQU   0
I015P    EQU   0
I031F    EQU   0
I031P    EQU   0
I256C    EQU   0
ATV      EQU   0
MSGNO    EQU   0
MSGANCHR EQU   0
MSGCSECT EQU   0
FLAG     EQU   0
FLAG0    EQU   FLAG
FLAG1    EQU   FLAG
FLAG2    EQU   FLAG
FLAG3    EQU   FLAG
INSRTPTR EQU   0
CPPL     EQU   ZZ2CPPL
CPPLUPT  EQU   CPPL+4
CPPLPSCB EQU   CPPL+8
CPPLECT  EQU   CPPL+12
*                                      START UNREFERENCED COMPONENTS
CPPLCBUF EQU   CPPL
FLAG7    EQU   FLAG
FLAG6    EQU   FLAG
FLAG5    EQU   FLAG
FLAG4    EQU   FLAG
DVT99999 EQU   DVT+256
DVT0064P EQU   DVT+252
DVT0063P EQU   DVT+248
DVT0062P EQU   DVT+244
DVT0061P EQU   DVT+240
DVT0060P EQU   DVT+236
DVT0059P EQU   DVT+232
DVT0058P EQU   DVT+228
DVT0057P EQU   DVT+224
DVT0056P EQU   DVT+220
DVT0055P EQU   DVT+216
DVT0054P EQU   DVT+212
DVT0053P EQU   DVT+208
DVT0052P EQU   DVT+204
DVT0051P EQU   DVT+200
DVT0050P EQU   DVT+196
DVT0049P EQU   DVT+192
DVT0048P EQU   DVT+188
DVT0047P EQU   DVT+184
DVT0046P EQU   DVT+180
DVT0045P EQU   DVT+176
DVT0044P EQU   DVT+172
DVT0043P EQU   DVT+168
DVT0042P EQU   DVT+164
DVT0041P EQU   DVT+160
DVT0040P EQU   DVT+156
DVT0039P EQU   DVT+152
DVT0038P EQU   DVT+148
DVT0037P EQU   DVT+144
DVT0036P EQU   DVT+140
DVT0035P EQU   DVT+136
DVT0034P EQU   DVT+132
DVT0011P EQU   DVT+40
DVT0005P EQU   DVT+16
DVT0002P EQU   DVT+4
DVT0001P EQU   DVT
BVT99999 EQU   BVT+256
BVT0064P EQU   BVT+252
BVT0063P EQU   BVT+248
BVT0062P EQU   BVT+244
BVT0061P EQU   BVT+240
BVT0060P EQU   BVT+236
BVT0059P EQU   BVT+232
BVT0057P EQU   BVT+224
BVT0056P EQU   BVT+220
BVTSTBLP EQU   BVT+200
BVT0045P EQU   BVT+176
BVT0044P EQU   BVT+172
BVT0033P EQU   BVT+128
BVT0032P EQU   BVT+124
BVT0031P EQU   BVT+120
BVT0030P EQU   BVT+116
BVT0029P EQU   BVT+112
BVT0026P EQU   BVT+100
BVT0025P EQU   BVT+96
BVT0024P EQU   BVT+92
BVT0023P EQU   BVT+88
BVT0016P EQU   BVT+60
BVT0015P EQU   BVT+56
BVT0014P EQU   BVT+52
BVT0003P EQU   BVT+8
BVT0001P EQU   BVT
SA99     EQU   SA+72
SARC     EQU   SAR+56
SARB     EQU   SAR+52
SARA     EQU   SAR+48
SAR9     EQU   SAR+44
SAR8     EQU   SAR+40
SAR7     EQU   SAR+36
SAR6     EQU   SAR+32
SAR5     EQU   SAR+28
SAR4     EQU   SAR+24
SAR3     EQU   SAR+20
SAR2     EQU   SAR+16
SAR1     EQU   SAR+12
SAR0     EQU   SAR+8
SARF     EQU   SAR+4
SARE     EQU   SAR
SAFWD    EQU   SA+8
SABAK    EQU   SA+4
SA1L     EQU   SA1+1
SA1P     EQU   SA1
UPTPREFL EQU   UPT+23
UPTPREFX EQU   UPT+16
@NM00069 EQU   UPT+15
UPTLDEL  EQU   UPT+14
UPTCDEL  EQU   UPT+13
UPTWTP   EQU   UPTSWS
UPTMODE  EQU   UPTSWS
UPTALD   EQU   UPTSWS
UPTPAUS  EQU   UPTSWS
UPTNCOM  EQU   UPTSWS
UPTMID   EQU   UPTSWS
UPTNPRM  EQU   UPTSWS
UPTRCVR  EQU   UPTSWS
UPTUSER  EQU   UPT+2
@NM00068 EQU   UPT
@NM00067 EQU   ECT+52
@NM00066 EQU   ECT+48
@NM00065 EQU   ECT+44
@NM00064 EQU   ECTSWS2+1
@NM00063 EQU   ECTSWS21
ECTTABND EQU   ECTSWS21
ECTDEFCS EQU   ECTSWS21
ECTBKPB  EQU   ECT+36
ECTUSER  EQU   ECT+32
ECTDDNUM EQU   ECT+29
ECTATTN  EQU   ECTSWS
ECTBKGRD EQU   ECTSWS
ECTNNOT  EQU   ECTSWS
ECTNMAL  EQU   ECTSWS
ECTLOGF  EQU   ECTSWS
ECTATRM  EQU   ECTSWS
@NM00062 EQU   ECTSWS
ECTNOPD  EQU   ECTSWS
ECTSCMD  EQU   ECT+20
ECTPCMD  EQU   ECT+12
ECTSMSG  EQU   ECT+9
ECTMSGF  EQU   ECT+8
ECTIOWA  EQU   ECT+4
ECTRTCD  EQU   ECT+1
ECTRCDF  EQU   ECT
PSCBU    EQU   PSCB+64
PSCBRSZ  EQU   PSCB+60
PSCBLINE EQU   PSCB+59
PSCBCHAR EQU   PSCB+58
PSCBUPTL EQU   PSCB+56
PSCBUPT  EQU   PSCB+52
PSCBRLGB EQU   PSCB+48
PSCBDEST EQU   PSCB+40
@NM00061 EQU   PSCB+36
@NM00060 EQU   PSCB+32
@NM00059 EQU   PSCB+28
PSCBLTI2 EQU   PSCB+24
PSCBLTIM EQU   PSCB+20
PSCBATR2 EQU   PSCB+18
@NM00058 EQU   PSCBATR1
@NM00057 EQU   PSCBATR1
@NM00056 EQU   PSCBATR1
PSCBATTN EQU   PSCBATR1
PSCBVMNT EQU   PSCBATR1
PSCBJCL  EQU   PSCBATR1
PSCBACCT EQU   PSCBATR1
PSCBCTRL EQU   PSCBATR1
PSCBGPNM EQU   PSCB+8
PSCBUSRL EQU   PSCB+7
PSCBUSER EQU   PSCB
CMDT1    EQU   CMDT
CMDO     EQU   CMD+2
CMDL     EQU   CMD
ZZ299999 EQU   ZZ2+8192
ZZ2AXOT1 EQU   ZZ2AXOT
ZZ2AXOL  EQU   ZZ2AXO
@NM00055 EQU   ZZ2+7288
@NM00054 EQU   ZZ2AMDX+4
ZZ2AMDXC EQU   ZZ2AMDX
ZZ2HSD   EQU   ZZ2+3056
@NM00053 EQU   ZZ2ES
@NM00052 EQU   ZZ2+2868
ZZ2ITSEC EQU   ZZ2ITSE+1
@NM00051 EQU   ZZ2ITSE
ZZ2ITSEP EQU   ZZ2ITSE
ZZ2ITSEW EQU   ZZ2ITSE
@NM00050 EQU   ZZ2ITR+20
ZZ2ITREC EQU   ZZ2ITRE+1
@NM00049 EQU   ZZ2ITRE
ZZ2ITREP EQU   ZZ2ITRE
ZZ2ITREW EQU   ZZ2ITRE
@NM00048 EQU   ZZ2ITR+9
ZZ2ITRRC EQU   ZZ2ITR+8
ZZ2ITR2P EQU   ZZ2ITR+4
ZZ2ITRPP EQU   ZZ2ITR
@NM00047 EQU   ZZ2+1544
ZZ2PGM   EQU   ZZ2+1536
@NM00046 EQU   ZZ2+1526
ZZ2CW    EQU   ZZ2+1524
@NM00045 EQU   ZZ2+1504
@NM00044 EQU   ZZ2+1352
ZZ2FFSYP EQU   ZZ2+1348
ZZ2SASYP EQU   ZZ2+1344
ZZ2RDSYP EQU   ZZ2+1340
ZZ2RASYP EQU   ZZ2+1336
ZZ2PHSYP EQU   ZZ2+1332
ZZ2ESSYP EQU   ZZ2+1328
ZZ200SYP EQU   ZZ2+1324
ZZ2SCWP  EQU   ZZ2+1320
ZZ2TTLP  EQU   ZZ2+1316
ZZ2LOADP EQU   ZZ2+1312
ZZ2VRESP EQU   ZZ2+1308
ZZ2CPPLE EQU   ZZ2CPPL+12
ZZ2CPPLP EQU   ZZ2CPPL+8
ZZ2CPPLU EQU   ZZ2CPPL+4
ZZ2VRSAP EQU   ZZ2+1288
ZZ2RVTP  EQU   ZZ2+1284
@NM00043 EQU   ZZ2+1272
@NM00042 EQU   ZZ2+1268
ZZ2RPLP  EQU   ZZ2+1260
ZZ2TCBP  EQU   ZZ2+1256
@NM00041 EQU   ZZ2+1252
ZZ2ZZ2P  EQU   ZZ2+1248
@NM00040 EQU   ZZ2+1112
@NM00039 EQU   ZZ2+1080
ZZ2MSG0P EQU   ZZ2+1076
ZZ2FT25P EQU   ZZ2+1072
@NM00038 EQU   ZZ2+976
ZZ2TOD   EQU   ZZ2+968
ZZ2STGN  EQU   ZZ2STG+4
ZZ2STGP  EQU   ZZ2STG
@NM00037 EQU   ZZ2+952
ZZ2SCMDE EQU   ZZ2+944
ZZ2SCMDN EQU   ZZ2+936
ZZ2IDENT EQU   ZZ2+928
ZZ2A9999 EQU   ZZ2A+656
@NM00036 EQU   ZZ2A+224
@NM00035 EQU   ZZ2A+220
ZZ2AQD99 EQU   ZZ2AQD+60
@NM00034 EQU   ZZ2AQD+56
@NM00033 EQU   ZZ2AQDF
ZZ2AQDFA EQU   ZZ2AQDF
ZZ2AQDIL EQU   ZZ2AQD+48
ZZ2AQDIM EQU   ZZ2AQD+44
ZZ2AQDT9 EQU   ZZ2AQDT+34
ZZ2AQDTE EQU   ZZ2AQDT+33
ZZ2AQDTD EQU   ZZ2AQDT+2
@NM00032 EQU   ZZ2AQDT+1
ZZ2AQDTY EQU   ZZ2AQDT
ZZ2AQDT0 EQU   ZZ2AQDT
ZZ2AQDLB EQU   ZZ2AQD+9
ZZ2AQDOB EQU   ZZ2AQD+8
ZZ2AQDLE EQU   ZZ2AQD+4
ZZ2AQDOF EQU   ZZ2AQD
ZZ2AQD00 EQU   ZZ2AQD
ZZ2AQAS9 EQU   ZZ2AQAS+16
@NM00031 EQU   ZZ2AQAS+12
ZZ2AQAS2 EQU   ZZ2AQAS+8
ZZ2AQAS1 EQU   ZZ2AQAS+4
@NM00030 EQU   ZZ2AQAS+2
ZZ2AQAST EQU   ZZ2AQAS
ZZ2AQAS0 EQU   ZZ2AQAS
ZZ2AZZ6P EQU   ZZ2A+140
ZZ2ADPTA EQU   ZZ2ADPT
ZZ2ADPL  EQU   ZZ2ADP
ZZ2ADMTA EQU   ZZ2ADMT
ZZ2ADML  EQU   ZZ2ADM
ZZ2ADDTA EQU   ZZ2ADDT
ZZ2ADDL  EQU   ZZ2ADD
@NM00029 EQU   ZZ2A+72
ZZ2APIDB EQU   ZZ2APID+3
ZZ2APIDA EQU   ZZ2APID
@NM00028 EQU   ZZ2A+24
@NM00027 EQU   ZZ2AF+5
ZZ2AFX   EQU   ZZ2AF+5
@NM00026 EQU   ZZ2AF+3
ZZ2AFS   EQU   ZZ2AF+2
ZZ2AFD   EQU   ZZ2AF+2
ZZ2AFQ   EQU   ZZ2AF+2
ZZ2AF$   EQU   ZZ2AF+2
@NM00025 EQU   ZZ2AF+2
ZZ2AFM   EQU   ZZ2AF+2
@NM00024 EQU   ZZ2AF+2
@NM00023 EQU   ZZ2AF+1
ZZ2AFV   EQU   ZZ2AF+1
@NM00022 EQU   ZZ2AF+1
ZZ2AFC   EQU   ZZ2AF+1
@NM00021 EQU   ZZ2AF
ZZ2AFFS  EQU   ZZ2AF
ZZ2AFT   EQU   ZZ2AF
ZZ2AFP   EQU   ZZ2AF
@NM00020 EQU   ZZ2A+8
ZZ2ALINE EQU   ZZ2A+4
@NM00019 EQU   ZZ2A+3
ZZ2ASE   EQU   ZZ2A+2
ZZ2ACH   EQU   ZZ2A
@NM00018 EQU   ZZ2+264
@NM00017 EQU   ZZ2+263
ZZ2PRTT0 EQU   ZZ2PRTT
ZZ2PRTO  EQU   ZZ2PRT+2
ZZ2PRTL  EQU   ZZ2PRT
@NM00016 EQU   ZZ2AMD+56
ZZ2AMDXP EQU   ZZ2AMD+52
ZZ2AMDD  EQU   ZZ2AMD+48
ZZ2AMDL  EQU   ZZ2AMD+44
ZZ2AMDU  EQU   ZZ2AMD+28
ZZ2AMDF  EQU   ZZ2AMD+24
ZZ2AMDS  EQU   ZZ2AMD+20
ZZ2AMDC  EQU   ZZ2AMD+16
ZZ2AMDP  EQU   ZZ2AMD+12
ZZ2AMDB  EQU   ZZ2AMD+8
@NM00015 EQU   @NM00014
ZZ2AMD2  EQU   @NM00014
ZZ2AMD1  EQU   @NM00014
ZZ2AMD0  EQU   ZZ2AMD+6
ZZ2AMDA  EQU   ZZ2AMD+4
ZZ2AMDT  EQU   ZZ2AMD
ZZ199999 EQU   ZZ1+3072
@NM00013 EQU   ZZ1+2160
ZZ1TRTAS EQU   ZZ1+1904
ZZ1TRUPC EQU   ZZ1+1648
ZZ1TRCTX EQU   ZZ1+1392
ZZ1NASID EQU   ZZ1N+274
ZZ1NSTRL EQU   ZZ1N+272
ZZ1NOFF  EQU   ZZ1N+268
ZZ1NBDY  EQU   ZZ1N+264
ZZ1NADE  EQU   ZZ1N+260
ZZ1NADB  EQU   ZZ1N+256
ZZ1NSTR  EQU   ZZ1N
@NM00012 EQU   ZZ1+1080
ZZ1TREBC EQU   ZZ1+824
ZZ1TRHEX EQU   ZZ1+568
@NM00011 EQU   ZZ1+377
ZZ1USTAE EQU   ZZ1+376
@NM00010 EQU   ZZ1F+1
@NM00009 EQU   ZZ1F
ZZ1FM    EQU   ZZ1F
ZZ1FX    EQU   ZZ1F
ZZ1FU    EQU   ZZ1F
ZZ1EVEC  EQU   ZZ1EVE+1
@NM00008 EQU   ZZ1EVE
ZZ1EVEW  EQU   ZZ1EVE
ZZ1ACMP  EQU   ZZ1ATTN
@NM00007 EQU   ZZ1+144
ZZ1FPP   EQU   ZZ1+140
ZZ1ZZ6P  EQU   ZZ1+136
@NM00006 EQU   ZZ1+84
ZZ1PLINE EQU   ZZ1+80
ZZ1PGSZ  EQU   ZZ1+76
ZZ1PCNT  EQU   ZZ1+72
@NM00005 EQU   ZZ1+68
ZZ1TPAGE EQU   ZZ1+64
ZZ1TLINE EQU   ZZ1+60
@NM00004 EQU   ZZ1+52
ZZ1DMCBP EQU   ZZ1+48
ZZ1DSDP  EQU   ZZ1+44
ZZ1PDRP  EQU   ZZ1+40
ZZ1ZZ2P  EQU   ZZ1+36
ZZ1327WP EQU   ZZ1+32
ZZ1ACBP  EQU   ZZ1+28
@NM00003 EQU   ZZ1+24
ZZ1PDCBP EQU   ZZ1+20
ZZ1BLRBL EQU   ZZ1+16
@NM00002 EQU   ZZ1+12
ZZ1PNULL EQU   ZZ1+8
ZZ1NULL  EQU   ZZ1+4
ZZ1IDE   EQU   ZZ1
MSGWTXT  EQU   MSGWMOV+4
MSGWPAD  EQU   MSGWMOV+2
MSGWLEN  EQU   MSGWMOV
@NM00001 EQU   INSERT+10
*                                      END UNREFERENCED COMPONENTS
@RF00185 EQU   @EL00002
@RC00188 EQU   @EL00002
@RF00192 EQU   @EL00002
@RC00243 EQU   @EL00003
@RF00242 EQU   @EL00003
@RC00259 EQU   @EL00004
@RC00270 EQU   @EL00004
@PB00004 EQU   @PB00005
@RF00296 EQU   @EL00005
@RF00321 EQU   @EL00005
@PB00003 EQU   @PB00004
@PB00002 EQU   @PB00003
@ENDDATA EQU   *
         END   BLSDMSG0,(C'PLS1950',0701,78064)
