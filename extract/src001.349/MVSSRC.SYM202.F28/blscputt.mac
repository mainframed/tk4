         TITLE 'BLSCPUTT -- IPCS DATA ACCESS SERVICES PUT EXECUTOR     *
                        '
*     /* CHANGE ACTIVITY
*    THIS MODULE IS WRITTEN FOR @G57LPSR
BLSCPUTT CSECT ,                                                   0002
@MAINENT DS    0H                                                  0002
         USING *,@15                                               0002
         B     @PROLOG                                             0002
         DC    AL1(16)                                             0002
         DC    C'BLSCPUTT  78.062'                                 0002
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                     0002
         BALR  @12,0                                               0002
@PSTART  DS    0H                                                  0002
         USING @PSTART,@12                                         0002
         L     @00,@SIZDATD                                        0002
         BLSCGETS R,LV=(0)
         LR    @11,@01                                             0002
         USING @DATD,@11                                           0002
         ST    @13,@SA00001+4                                      0002
         LM    @00,@01,20(@13)                                     0002
         ST    @11,8(,@13)                                         0002
         LR    @13,@11                                             0002
*   DMCBPTR=GPR01P;                 /* ESTABLISH ADDRESSIBILITY TO 0026
*                                      DMCB                          */
         LR    DMCBPTR,GPR01P                                      0026
*   RFY                                                            0027
*     GPR01P UNRSTD;                                               0027
*   MODNAME=LMODNMC;                /* MARK AUTOMATIC AREA           */
         MVC   MODNAME(8),@CC00586                                 0028
*   SUBCODE=F0C;                    /* SUB-ROUTINE RETURN CODE       */
         SLR   @10,@10                                             0029
         ST    @10,SUBCODE                                         0029
*   DMCBREJ=F0C;                    /* INVALID REQUEST REJECT CODE   */
         MVI   DMCBREJ(DMCBPTR),X'00'                              0030
*   DMCBRTC=F0C;                    /* WE ARE SUCCESSFUL UNTIL WE  0031
*                                      FAIL                          */
*                                                                  0031
         ST    @10,DMCBRTC(,DMCBPTR)                               0031
*   /*****************************************************************/
*   /*                                                               */
*   /* FIRST DECIDE WHETHER DMCB IS OPEN                             */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0032
*   IF DMCBSOUT=OFF THEN            /* DMCB NOT OPEN FOR OUTPUT      */
         TM    DMCBSOUT(DMCBPTR),B'01000000'                       0032
         BNZ   @RF00032                                            0032
*     DO;                           /* DMCB IS NOT OPEN              */
*       DMCBRTC=INVRQ;              /* INDICATE INVALID REQUEST      */
         MVC   DMCBRTC(4,DMCBPTR),@CF00041                         0034
*       DMCBREJ=F0C;                /* REQ REJECTED SINCE DMCB IS NOT
*                                      OPEN FOR OUTPUT               */
         MVI   DMCBREJ(DMCBPTR),X'00'                              0035
*     END;                          /* DMCB IS NOT OPEN              */
*   ELSE                                                           0037
*     DO;                           /* DMCB IS OPEN                  */
         B     @RC00032                                            0037
@RF00032 DS    0H                                                  0038
*       DMCBFMOD=ON;                /* INDICATE THAT FILE IS MODIFIED*/
         OI    DMCBFMOD(DMCBPTR),B'10000000'                       0038
         EJECT
*                                                                  0039
*       /*************************************************************/
*       /*                                                           */
*       /* QSAM FILE                                                 */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0039
*       IF DMCBVSF=OFF THEN         /* TEST FOR QSAM FILE            */
         TM    DMCBVSF(DMCBPTR),B'00000001'                        0039
         BNZ   @RF00039                                            0039
*         DO;                       /* QSAM FILE                     */
*           DCBPTR=ADDR(DMCBDCB);   /* ESTABLISH ADDRESSIBILITY TO 0041
*                                      DCB                           */
         LA    DCBPTR,DMCBDCB(,DMCBPTR)                            0041
*           IF DMCBKYD=ON           /* KEYED ACCESS NOT ALLOWED FOR
*                                      QSAM                          */
*               ×DMCBRNO=ON THEN    /* REL RECORD ACCESS NOT ALLOWED
*                                      FOR QSAM                      */
         TM    DMCBKYD(DMCBPTR),B'11000000'                        0042
         BZ    @RF00042                                            0042
*             DO;                   /* KEYED OR REL RECORD ACCESS NOT
*                                      ALLOWED                       */
*               DMCBREJ=F2C;        /* INDICATE REASON FOR REJECTION */
         MVI   DMCBREJ(DMCBPTR),X'02'                              0044
*               DMCBRTC=INVRQ;      /* INDICATE INVALID REQUEST      */
         MVC   DMCBRTC(4,DMCBPTR),@CF00041                         0045
*             END;                  /* KEYED OR REL RECORD ACCESS NOT
*                                      ALLOWED                       */
*           IF DCBRECL='01'B THEN   /* ARE THE RECORDS VARYING LENGTH*/
@RF00042 TM    DCBRECL+28(DCBPTR),B'01000000'                      0047
         BNO   @RF00047                                            0047
         TM    DCBRECL+28(DCBPTR),B'10000000'                      0047
         BNZ   @RF00047                                            0047
*             DO;                   /* QSAM VARIABLE LENGTH RECORD   */
*               IF DMCBBLEN<DMCBORL+F4C/* WILL THE BUFFER HOLD THE 0049
*                                      RECORD IN QSAM FORMAT         */
*                   ×DMCBORL>DCBLRECL THEN/* OR IS RECORD TOO BIG    */
         L     @10,DMCBORL(,DMCBPTR)                               0049
         LA    @04,4                                               0049
         ALR   @04,@10                                             0049
         C     @04,DMCBBLEN(,DMCBPTR)                              0049
         BH    @RT00049                                            0049
         CH    @10,DCBLRECL+72(,DCBPTR)                            0049
         BNH   @RF00049                                            0049
@RT00049 DS    0H                                                  0050
*                 DO;               /* BUFFER TOO SMALL              */
*                   DMCBREJ=F3C;                                   0051
         MVI   DMCBREJ(DMCBPTR),X'03'                              0051
*                   DMCBRTC=INVRQ;                                 0052
         MVC   DMCBRTC(4,DMCBPTR),@CF00041                         0052
*                 END;              /* BUFFER TOO SMALL              */
*             END;                  /* QSAM VARIABLE LENGTH RECORD   */
*           ELSE                    /* RECORDS ARE FIXED LENGTH      */
*             DO;                   /* QSAM FIXED LENGTH RECORDS     */
         B     @RC00047                                            0055
@RF00047 DS    0H                                                  0056
*               IF DMCBORL^=DCBLRECL THEN/* INVALID RECORD LENGTH    */
         L     @10,DMCBORL(,DMCBPTR)                               0056
         CH    @10,DCBLRECL+72(,DCBPTR)                            0056
         BE    @RF00056                                            0056
*                 DO;               /* INVALID RECORD LENGTH         */
*                   DMCBREJ=F8C;                                   0058
         MVI   DMCBREJ(DMCBPTR),X'08'                              0058
*                   DMCBRTC=INVRQ;                                 0059
         MVC   DMCBRTC(4,DMCBPTR),@CF00041                         0059
*                 END;              /* INVALID RECORD LENGTH         */
*             END;                  /* QSAM FIXED LENGTH RECORDS     */
@RF00056 DS    0H                                                  0062
*           IF DMCBRTC=F0C&         /* VALID REQUEST SO FAR          */
*               DCBRECL='01'B THEN  /* VARIABLE LENGTH RECORD        */
@RC00047 L     @10,DMCBRTC(,DMCBPTR)                               0062
         LTR   @10,@10                                             0062
         BNZ   @RF00062                                            0062
         TM    DCBRECL+28(DCBPTR),B'01000000'                      0062
         BNO   @RF00062                                            0062
         TM    DCBRECL+28(DCBPTR),B'10000000'                      0062
         BNZ   @RF00062                                            0062
*             DO;                   /* QSAM VL RECORD                */
*                                                                  0063
*               /*****************************************************/
*               /*                                                   */
*               /* IF THE RECORD IS VARIABLE LENGTH THEN IT MUST BE  */
*               /* CONVERTED TO THE QSAM FORMAT BY SHIFTING THE DATA */
*               /* IN THE BUFFER 4 BYTES TO THE RIGHT AND INSERTING  */
*               /* THE RECORD DESCRIPTOR WORD.                       */
*               /*                                                   */
*               /*****************************************************/
*                                                                  0064
*               IF DMCBORL>F65531C THEN/* IS DATA TOO LONG           */
         L     @10,DMCBORL(,DMCBPTR)                               0064
         C     @10,@CF00576                                        0064
         BNH   @RF00064                                            0064
*                 DO;               /* DATA TOO LONG                 */
*                   DMCBRTC=INVRQ;                                 0066
         MVC   DMCBRTC(4,DMCBPTR),@CF00041                         0066
*                   DMCBREJ=F8C;                                   0067
         MVI   DMCBREJ(DMCBPTR),X'08'                              0067
*                 END;              /* DATA TOO LONG                 */
*               ELSE                                               0069
*                 DO;               /* VALID DATA LENGTH             */
         B     @RC00064                                            0069
@RF00064 DS    0H                                                  0070
*                   REM=DMCBORL&XMOD4C;/* REM IS DMCBORL MODULUS 4   */
         L     @10,DMCBORL(,DMCBPTR)                               0070
         LR    REM,@10                                             0070
         N     REM,@CF00584                                        0070
*                   MOVEPTR=DMCBBUFP+DMCBORL-REM;/* FIRST MOVE LAST
*                                      REM BYTES                     */
         AL    @10,DMCBBUFP(,DMCBPTR)                              0071
         SLR   @10,REM                                             0071
         LR    MOVEPTR,@10                                         0071
*                   IF REM^=F0C THEN                               0072
         LTR   REM,REM                                             0072
         BZ    @RF00072                                            0072
*                     TOTAIL(F1C:REM)=FROMTAIL(F1C:REM);           0073
*                                                                  0073
         LR    @10,REM                                             0073
         BCTR  @10,0                                               0073
         EX    @10,@SM00621                                        0073
*                   /*************************************************/
*                   /*                                               */
*                   /* NOW MOVE FULLWORD CHUNKS OF THE BUFFER        */
*                   /* STARTING AT THE END                           */
*                   /*                                               */
*                   /*************************************************/
*                                                                  0074
*                   DO MOVEPTR=MOVEPTR-F4C TO DMCBBUFP BY-F4C;/* DO
*                                      MOVE                          */
@RF00072 LR    @10,MOVEPTR                                         0074
         SL    @10,@CF00041                                        0074
         LR    MOVEPTR,@10                                         0074
         B     @DE00074                                            0074
@DL00074 DS    0H                                                  0075
*                     TOWORD=FROMWORD;                             0075
         L     @10,FROMWORD(,MOVEPTR)                              0075
         ST    @10,TOWORD(,MOVEPTR)                                0075
*                   END;            /* DO MOVE                       */
*                                                                  0076
         AL    MOVEPTR,@CF00617                                    0076
@DE00074 CL    MOVEPTR,DMCBBUFP(,DMCBPTR)                          0076
         BNL   @DL00074                                            0076
*                   /*************************************************/
*                   /*                                               */
*                   /* NOW BUILD THE RECORD DESCRIPTOR WORD          */
*                   /*                                               */
*                   /*************************************************/
*                                                                  0077
*                   DATALEN=DMCBORL+F4C;/* INCLUDE THE RDW IN THE  0077
*                                      LENGTH                        */
         L     @10,DMCBBUFP(,DMCBPTR)                              0077
         LA    @04,4                                               0077
         AL    @04,DMCBORL(,DMCBPTR)                               0077
         STH   @04,DATALEN(,@10)                                   0077
*                   RECFLGS=F0C;    /* INDICATE NON SPANNED RECORDS  */
         SLR   @04,@04                                             0078
         STH   @04,RECFLGS(,@10)                                   0078
*                 END;              /* VALID DATA LENGTH             */
*             END;                  /* QSAM VL RECORD                */
@RC00064 DS    0H                                                  0081
*           IF DMCBRTC=F0C THEN     /* TEST FOR VALID REQUEST        */
@RF00062 L     @10,DMCBRTC(,DMCBPTR)                               0081
         LTR   @10,@10                                             0081
         BNZ   @RF00081                                            0081
*             DO;                   /* VALID REQUEST                 */
*                                                                  0082
*               /*****************************************************/
*               /*                                                   */
*               /* SET UP AND DO PUT                                 */
*               /*                                                   */
*               /*****************************************************/
*                                                                  0083
*               DCBSYNA=ADDR(PUTERR);/* INSERT SYNAD EXIT ADDRESS    */
         LA    @10,PUTERR                                          0083
         STCM  @10,7,DCBSYNA+52(DCBPTR)                            0083
*               RFY                                                0084
*                (GPR01P,                                          0084
*                 GPR00P) RSTD;                                    0084
*               GPR01P=ADDR(DMCBDCB);/* ADDRESS DCB FOR GET MACRO    */
         LA    GPR01P,DMCBDCB(,DMCBPTR)                            0085
*               GPR00P=DMCBBUFP;    /* ADDRESS BUFFER FOR GET MACRO  */
         L     GPR00P,DMCBBUFP(,DMCBPTR)                           0086
*               GEN REFS(GPR01P,GPR00P) FLOWS(PUTERR)              0087
*                   (PUT (GPR01P),(GPR00P));                       0087
*                                                                  0087
         PUT (GPR01P),(GPR00P)
*               /*****************************************************/
*               /*                                                   */
*               /* IF A PHYSICAL ERROR OCCURRED THEN THE EXIT ROUTINE*/
*               /* WOULD HAVE SET DMCBRTC                            */
*               /*                                                   */
*               /*****************************************************/
*                                                                  0088
*               RFY                                                0088
*                (GPR01P,                                          0088
*                 GPR00P) UNRSTD;                                  0088
*             END;                  /* VALID REQUEST                 */
*         END;                      /* QSAM FILE                     */
         EJECT
*                                                                  0091
*       /*************************************************************/
*       /*                                                           */
*       /* VSAM FILE                                                 */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0091
*       ELSE                                                       0091
*         DO;                       /* VSAM FILE                     */
*                                                                  0091
         B     @RC00039                                            0091
@RF00039 DS    0H                                                  0092
*           /*********************************************************/
*           /*                                                       */
*           /* FOR VSAM FILES CALL BLSCSETT TO PERFORM RPL           */
*           /* MODIFICATIONS                                         */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0092
*           RFY                                                    0092
*             GPR01P RSTD;                                         0092
*           GPR01P=DMCBPTR;         /* BLSCSETT INTERFACE            */
         LR    GPR01P,DMCBPTR                                      0093
*           CALL BLSCSETT;          /* PERFORM SET FUNCTION          */
         L     @15,@CV00525                                        0094
         BALR  @14,@15                                             0094
*           RFY                                                    0095
*             GPR01P UNRSTD;                                       0095
*           IF DMCBRTC=F0C THEN                                    0096
         SLR   @10,@10                                             0096
         C     @10,DMCBRTC(,DMCBPTR)                               0096
         BNE   @RF00096                                            0096
*             DO;                   /* SET IS OK                     */
*                                                                  0097
*               /*****************************************************/
*               /*                                                   */
*               /* DETERMINE IF ACCESS IS BY RELATIVE RECORD AND IF  */
*               /* SO THEN CALCULATE EFFECTIVE RBA                   */
*               /*                                                   */
*               /*****************************************************/
*                                                                  0098
*               IF DMCBKYD=OFF      /* NON KEYED ACCESS              */
*                   &DMCBRNO=ON THEN/* RELATIVE RECORD ACCESS        */
         TM    DMCBRNO(DMCBPTR),B'01000000'                        0098
         BNO   @RF00098                                            0098
         TM    DMCBKYD(DMCBPTR),B'10000000'                        0098
         BNZ   @RF00098                                            0098
*                 DO;               /* VSAM RELATIVE RECORD REQUEST  */
*                   IF DMCBRRL=F0C THEN/* IS THIS FILE ELIGIBLE FOR
*                                      RELATIVE RECORD ACCESS.     0100
*                                      DMCBRRL = 0 INDICATES THAT IT
*                                      IS NOT                        */
         C     @10,DMCBRRL(,DMCBPTR)                               0100
         BNE   @RF00100                                            0100
*                     DO;           /* RELATIVE RECORD LENGTH ZERO   */
*                       DMCBRTC=INVRQ;/* REJECT THE REQUEST          */
         MVC   DMCBRTC(4,DMCBPTR),@CF00041                         0102
*                       DMCBREJ=F2C;/* INDICATE INELIGIBILITY FOR  0103
*                                      RELATIVE RECORD ACCESS        */
         MVI   DMCBREJ(DMCBPTR),X'02'                              0103
*                     END;          /* RELATIVE RECORD LENGTH ZERO   */
*                   IF RELRECNO<=F0C THEN/* RECORD NUMBER OUT OF   0105
*                                      RANGE                         */
@RF00100 L     @10,DMCBKEYP(,DMCBPTR)                              0105
         L     @10,RELRECNO(,@10)                                  0105
         LTR   @10,@10                                             0105
         BP    @RF00105                                            0105
*                     DO;           /* RELATIVE RECORD NUMBER OUT OF
*                                      RANGE                         */
*                       DMCBRTC=INVRQ;/* REJECT THE REQUEST          */
         MVC   DMCBRTC(4,DMCBPTR),@CF00041                         0107
*                       DMCBREJ=F4C;/* INDICATE THE REASON           */
         MVI   DMCBREJ(DMCBPTR),X'04'                              0108
*                     END;          /* RELATIVE RECORD NUMBER OUT OF
*                                      RANGE                         */
*                                                                  0109
*                   /*************************************************/
*                   /*                                               */
*                   /* COMPUTE RELATIVE BYTE ADDRESS OF RECORD       */
*                   /*                                               */
*                   /*************************************************/
*                                                                  0110
*                   IF DMCBRTC=F0C THEN/* TEST FOR VALID REQUEST     */
@RF00105 L     @10,DMCBRTC(,DMCBPTR)                               0110
         LTR   @10,@10                                             0110
         BNZ   @RF00110                                            0110
*                     DMCBRBA=(RELRECNO-1)*DMCBRRL;                0111
         L     @10,DMCBKEYP(,DMCBPTR)                              0111
         L     @01,RELRECNO(,@10)                                  0111
         BCTR  @01,0                                               0111
         M     @00,DMCBRRL(,DMCBPTR)                               0111
         ST    @01,DMCBRBA(,DMCBPTR)                               0111
*                 END;              /* VSAM RELATIVE RECORD REQUEST  */
*                                                                  0112
@RF00110 DS    0H                                                  0113
*               /*****************************************************/
*               /*                                                   */
*               /* PERFORM VSAM PUT REQUEST                          */
*               /*                                                   */
*               /*****************************************************/
*                                                                  0113
*               IF DMCBRTC=F0C THEN /* TEST FOR VALID REQUEST        */
@RF00098 L     @10,DMCBRTC(,DMCBPTR)                               0113
         LTR   @10,@10                                             0113
         BNZ   @RF00113                                            0113
*                 DO;               /* DO PUT                        */
*                   RFY                                            0115
*                     GPR01P RSTD;                                 0115
*                   GPR01P=ADDR(DMCBRPL);                          0116
         LA    GPR01P,DMCBRPL(,DMCBPTR)                            0116
*                   RFY                                            0117
*                     GPR15F RSTD;                                 0117
*                   GEN REFS(GPR01P) SETS(GPR15F)(PUT RPL=(GPR01P));
         PUT RPL=(GPR01P)
*                   DMCBSUBC=GPR15F;/* SAVE THE VSAM RETCODE         */
         ST    GPR15F,DMCBSUBC(,DMCBPTR)                           0119
*                   RFY                                            0120
*                    (GPR01P,                                      0120
*                     GPR15F) UNRSTD;                              0120
*                   IF DMCBSUBC=F8C THEN/* IF A LOGICAL ERROR        */
         L     @10,DMCBSUBC(,DMCBPTR)                              0121
         CL    @10,@CF00043                                        0121
         BNE   @RF00121                                            0121
*                     CALL VSMLERR; /* THEN ANALYSE THE FDBK FIELD IN
*                                      THE RPL                       */
         BAL   @14,VSMLERR                                         0122
*                   ELSE                                           0123
*                     IF DMCBSUBC=F12C THEN/* ELSE IF A PHYSICAL   0123
*                                      ERROR                         */
         B     @RC00121                                            0123
@RF00121 LA    @10,12                                              0123
         CL    @10,DMCBSUBC(,DMCBPTR)                              0123
         BNE   @RF00123                                            0123
*                       DMCBRTC=PERMER;/* THEN REPORT IN RETURN CODE */
         ST    @10,DMCBRTC(,DMCBPTR)                               0124
*                 END;              /* DO PUT                        */
@RF00123 DS    0H                                                  0125
@RC00121 DS    0H                                                  0126
*             END;                  /* SET IS OK                     */
@RF00113 DS    0H                                                  0127
*         END;                      /* VSAM FILE                     */
@RF00096 DS    0H                                                  0128
*     END;                          /* DMCB IS OPEN                  */
@RC00039 DS    0H                                                  0129
*   IF DMCBRTC^=F0C THEN            /* TEST FOR ERROR                */
@RC00032 L     @10,DMCBRTC(,DMCBPTR)                               0129
         LTR   @10,@10                                             0129
         BZ    @RF00129                                            0129
*     DMCBMODN=MODNAME;             /* SUPPLY MODULE NAME FOR ERROR
*                                      MESSAGE                       */
         MVC   DMCBMODN(8,DMCBPTR),MODNAME                         0130
*   RETURN;                                                        0131
@EL00001 L     @13,4(,@13)                                         0131
@EF00001 L     @00,@SIZDATD                                        0131
         LR    @01,@11                                             0131
         BLSCFRES R,LV=(0),A=(1)
@ER00001 LM    @14,@12,12(@13)                                     0131
         BR    @14                                                 0131
*PUTERR:                                                           0132
*   PROCEDURE OPTIONS(NOSAVE);                                     0132
*                                                                  0132
         B     @EL00001                                            0132
PUTERR   DS    0H                                                  0133
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS ROUTINE IS ENTERED ON A QSAM SYNAD ERROR                 */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0133
*   DCL                                                            0133
*     SYNMSG CHAR(128) BASED(GPR01P);                              0133
*   RFY                                                            0134
*     GPR01P RSTD;                                                 0134
*   GEN SETS(GPR01P)(SYNADAF ACSMETH=QSAM);                        0135
         SYNADAF ACSMETH=QSAM
*   DMCBSYNM=SYNMSG;                /* MOVE MESSAGE PRODUCED BY    0136
*                                      SYNADAF INTO DMCB             */
         MVC   DMCBSYNM(128,DMCBPTR),SYNMSG(GPR01P)                0136
*   RFY                                                            0137
*     GPR01P UNRSTD;                                               0137
*   DMCBRTC=PERMER;                 /* INDICATE PERMANENT ERROR      */
         MVC   DMCBRTC(4,DMCBPTR),@CF00059                         0138
*   GEN(SYNADRLS);                                                 0139
         SYNADRLS
*   RETURN;                                                        0140
@EL00002 DS    0H                                                  0140
@EF00002 DS    0H                                                  0140
@ER00002 BR    @14                                                 0140
*   END PUTERR;                                                    0141
*VSMLERR:                                                          0142
*   PROCEDURE;                                                     0142
*                                                                  0142
VSMLERR  STM   @14,@12,@SA00003                                    0142
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS ROUTINE IS ENTERED IF A VSAM LOGICAL ERROR OCCURS IT     */
*   /* EXTRACTS THE FEEDBACK FIELD FROM THE REQUEST PARAMETER LIST   */
*   /* AND DETERMINES THE PROPER RETURN CODE. CERTAIN LOGICAL ERRORS */
*   /* WHICH SHOULD NOT OCCUR MAY INDICATE THAT THE DATA MANAGER IS  */
*   /* WORKING IMPROPERLY. IF THESE OCCUR THEN AN ABEND WILL BE      */
*   /* ISSUED.                                                       */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0143
*   RFY                                                            0143
*    (GPR02P,                                                      0143
*     GPR03P,                                                      0143
*     GPR08P,                                                      0143
*     GPR15F) RSTD;                                                0143
*   GPR08P=ADDR(DMCBRPL);           /* ADDRESS RPL FOR SHOWCB MACRO  */
         LA    GPR08P,DMCBRPL(,DMCBPTR)                            0144
*   GPR02P=ADDR(SHWLIST);           /* POINT TO SHOW PARAMETER LIST  */
         LA    GPR02P,SHWLIST                                      0145
*   GPR03P=ADDR(DMCBRPLF);          /* POINT TO FEEDBACK AREA        */
         LA    GPR03P,DMCBRPLF(,DMCBPTR)                           0146
*   GEN SETS(SHWLIST,DMCBRPLF,GPR15F) REFS(GPR02P,GPR03P,GPR08P);  0147
         SHOWCB RPL=(GPR08P),AREA=(GPR03P),LENGTH=4,                   *
               FIELDS=(FDBK),MF=(G,(GPR02P))
*   SUBCODE=GPR15F;                                                0148
         ST    GPR15F,SUBCODE                                      0148
*   RFY                                                            0149
*    (GPR08P,                                                      0149
*     GPR02P,                                                      0149
*     GPR03P,                                                      0149
*     GPR15F) UNRSTD;                                              0149
*   IF SUBCODE^=F0C THEN            /* IF SHOW WAS UNSUCCESSFUL      */
         L     @10,SUBCODE                                         0150
         LTR   @10,@10                                             0150
         BZ    @RF00150                                            0150
*     DO;                           /* ABEND(F139C) DUMP             */
*       RESPECIFY                                                  0152
*        (GPR01F) RESTRICTED;                                      0152
*       GPR01F=F139C;               /* COMP CODE IN REG 1            */
         LA    GPR01F,139                                          0153
*       GPR01F=GPR01F×'80000000'X;  /* DUMP/STEP/DUMPOPTS FLAG       */
         O     GPR01F,@CF00604                                     0154
*       SVC(13);                    /* ISSUE ABEND SVC               */
         SVC   13                                                  0155
*       RESPECIFY                                                  0156
*        (GPR01F) UNRESTRICTED;                                    0156
*     END;                          /* ABEND(F139C) DUMP VSAM SHOWCB
*                                      ERROR                         */
*   IF DMCBRPLF=F8C                 /* DUPLICATE KEY                 */
*       ×DMCBRPLF=F92C THEN         /* UPDATE W/O PRECEDING GET      */
@RF00150 L     @10,DMCBRPLF(,DMCBPTR)                              0158
         CL    @10,@CF00043                                        0158
         BE    @RT00158                                            0158
         CL    @10,@CF00561                                        0158
         BNE   @RF00158                                            0158
@RT00158 DS    0H                                                  0159
*     DMCBRTC=DUPKY;                /* INDICATE DUPLICATE RECORD     */
         MVC   DMCBRTC(4,DMCBPTR),@CF00043                         0159
*   ELSE                                                           0160
*     DO;                           /* PROBABLE INVALID REQUEST      */
         B     @RC00158                                            0160
@RF00158 DS    0H                                                  0161
*       DMCBRTC=INVRQ;              /* PROBABLY INVALID REQUEST      */
         MVC   DMCBRTC(4,DMCBPTR),@CF00041                         0161
*       IF DMCBRPLF=F32C THEN       /* INVALID RBA                   */
         CLC   DMCBRPLF(4,DMCBPTR),@CF00411                        0162
         BNE   @RF00162                                            0162
*         DMCBREJ=F4C;              /* RELATIVE RECORD ERROR         */
         MVI   DMCBREJ(DMCBPTR),X'04'                              0163
*       ELSE                                                       0164
*         IF DMCBRPLF=F72C THEN     /* WRONG ACCESS MODE             */
         B     @RC00162                                            0164
@RF00162 CLC   DMCBRPLF(4,DMCBPTR),@CF00344                        0164
         BNE   @RF00164                                            0164
*           DMCBREJ=F2C;            /* ACCESS TYPE UNSUPPORTED       */
         MVI   DMCBREJ(DMCBPTR),X'02'                              0165
*         ELSE                                                     0166
*           IF DMCBRPLF=F88C THEN   /* POSITIONING ERROR             */
         B     @RC00164                                            0166
@RF00164 CLC   DMCBRPLF(4,DMCBPTR),@CF00559                        0166
         BNE   @RF00166                                            0166
*             DMCBREJ=F5C;                                         0167
         MVI   DMCBREJ(DMCBPTR),X'05'                              0167
*           ELSE                                                   0168
*             IF DMCBRPLF=F96C THEN /* UPDATE CHANGED KEY            */
         B     @RC00166                                            0168
@RF00166 CLC   DMCBRPLF(4,DMCBPTR),@CF00498                        0168
         BNE   @RF00168                                            0168
*               DMCBREJ=F6C;                                       0169
         MVI   DMCBREJ(DMCBPTR),X'06'                              0169
*             ELSE                                                 0170
*               IF DMCBRPLF=F100C THEN/* INVALID LENGTH CHANGE       */
         B     @RC00168                                            0170
@RF00168 CLC   DMCBRPLF(4,DMCBPTR),@CF00564                        0170
         BNE   @RF00170                                            0170
*                 DMCBREJ=F7C;                                     0171
         MVI   DMCBREJ(DMCBPTR),X'07'                              0171
*               ELSE                                               0172
*                 IF DMCBRPLF=F102C THEN/* INVALID RECORD LENGTH     */
         B     @RC00170                                            0172
@RF00170 CLC   DMCBRPLF(4,DMCBPTR),@CF00566                        0172
         BNE   @RF00172                                            0172
*                   DMCBREJ=F8C;                                   0173
         MVI   DMCBREJ(DMCBPTR),X'08'                              0173
*                 ELSE                                             0174
*                   IF DMCBRPLF=F112C THEN/* INVALID KEY LENGTH      */
         B     @RC00172                                            0174
@RF00172 CLC   DMCBRPLF(4,DMCBPTR),@CF00568                        0174
         BNE   @RF00174                                            0174
*                     DMCBREJ=F9C;                                 0175
         MVI   DMCBREJ(DMCBPTR),X'09'                              0175
*                   ELSE                                           0176
*                     DMCBREJ=F255C;/* SEVERE ERROR EITHER VSAM OR 0176
*                                      DATA MANAGER ERROR            */
         B     @RC00174                                            0176
@RF00174 MVI   DMCBREJ(DMCBPTR),X'FF'                              0176
*     END;                          /* PROBABLE INVALID REQUEST      */
*   END VSMLERR;                                                   0178
@EL00003 DS    0H                                                  0178
@EF00003 DS    0H                                                  0178
@ER00003 LM    @14,@12,@SA00003                                    0178
         BR    @14                                                 0178
         SPACE 3
*                                                                  0179
*   /*****************************************************************/
*   /*                                                               */
*   /* END OF EXECUTABLE PROCEDURE STATEMENTS                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0179
*   DECLARE                         /* GENERAL PURPOSE REGISTERS     */
*     GPR01F FIXED(31) REG(1),                                     0179
*     GPR15F FIXED(31) REG(15),                                    0179
*     GPR00P PTR(31) REG(0),                                       0179
*     GPR01P PTR(31) REG(1),                                       0179
*     GPR02P PTR(31) REG(2),                                       0179
*     GPR03P PTR(31) REG(3),                                       0179
*     GPR08P PTR(31) REG(8);                                       0179
*   DECLARE                         /* COMMON VARIABLES              */
*     I256C CHAR(256) BASED,                                       0180
*     I031F FIXED(31) BASED,                                       0180
*     I031P PTR(31) BASED,                                         0180
*     I015F FIXED(15) BASED,                                       0180
*     I015P PTR(15) BASED,                                         0180
*     I008P PTR(8) BASED,                                          0180
*     I001C CHAR(1) BASED;                                         0180
*   DCL                                                            0181
*     1 DASPATCH LOCAL BDY(DWORD),  /* PATCH AREA                    */
*      2 DASPATA(DASPATLN) PTR INIT((DASPATLN)0);                  0181
*   END BLSCPUTT                                                   0182
*                                                                  0182
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (IHADCBDF)                                       */
*/*%INCLUDE SYSLIB  (IHADCB  )                                       */
*                                                                  0182
*       ;                                                          0182
@DATA    DS    0H
@SM00621 MVC   TOTAIL(0,MOVEPTR),FROMTAIL(MOVEPTR)
@DATD    DSECT
         DS    0F
@SA00001 DS    18F
@SA00003 DS    15F
BLSCPUTT CSECT
         DS    0F
@CF00041 DC    F'4'
@CF00043 DC    F'8'
@CF00059 DC    F'12'
@CF00411 DC    F'32'
@CF00344 DC    F'72'
@CF00559 DC    F'88'
@CF00561 DC    F'92'
@CF00498 DC    F'96'
@CF00564 DC    F'100'
@CF00566 DC    F'102'
@CF00568 DC    F'112'
@CF00576 DC    F'65531'
@CF00617 DC    F'-4'
@CF00584 DC    XL4'00000003'
@CF00604 DC    XL4'80000000'
@DATD    DSECT
         DS    0D
MODSTAT  DS    CL12
         ORG   MODSTAT
MODNAME  DS    CL8
SUBCODE  DS    FL4
         ORG   MODSTAT+12
         DS    CL4
SHWLIST  DS    CL28
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
BLSCPUTT CSECT
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
@CV00525 DC    V(BLSCSETT)
         DS    0D
@CC00586 DC    C'BLSCPUTT'
DASPATCH DS    CL80
         ORG   DASPATCH
DASPATA  DC    20A(0)
         ORG   DASPATCH+80
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
MOVEPTR  EQU   @02
REM      EQU   @04
DMCBPTR  EQU   @05
DCBPTR   EQU   @03
GPR01P   EQU   @01
GPR00P   EQU   @00
GPR15F   EQU   @15
GPR02P   EQU   @02
GPR03P   EQU   @03
GPR08P   EQU   @08
GPR01F   EQU   @01
IHADCB   EQU   0
IHADCS00 EQU   0
DCBFDAD  EQU   IHADCS00+5
IHADCS01 EQU   0
DCBDVTBL EQU   IHADCS01
IHADCS02 EQU   0
IHADCS04 EQU   0
DCBPRBYT EQU   IHADCS04+3
IHADCS11 EQU   0
DCBRELB  EQU   IHADCS11
DCBREL   EQU   DCBRELB+1
DCBBUFCB EQU   IHADCS11+4
DCBDSORG EQU   IHADCS11+10
DCBDSRG1 EQU   DCBDSORG
DCBDSRG2 EQU   DCBDSORG+1
DCBIOBAD EQU   IHADCS11+12
DCBODEB  EQU   DCBIOBAD
DCBLNP   EQU   DCBODEB
DCBQSLM  EQU   DCBLNP
DCBIOBAA EQU   DCBODEB+1
IHADCS50 EQU   0
DCBSVCXL EQU   IHADCS50
DCBEODAD EQU   IHADCS50+4
DCBBFALN EQU   DCBEODAD
DCBHIARC EQU   DCBBFALN
DCBBFTEK EQU   DCBHIARC
DCBBFT   EQU   DCBBFTEK
DCBEXLST EQU   IHADCS50+8
DCBRECFM EQU   DCBEXLST
DCBRECLA EQU   DCBRECFM
DCBRECL  EQU   DCBRECLA
IHADCS24 EQU   0
DCBOFLGS EQU   IHADCS24+8
DCBOFLWR EQU   DCBOFLGS
DCBIFLG  EQU   IHADCS24+9
DCBIBPCT EQU   DCBIFLG
DCBMACR  EQU   IHADCS24+10
DCBMACR1 EQU   DCBMACR
DCBMRFE  EQU   DCBMACR1
DCBMRGET EQU   DCBMRFE
DCBMRAPG EQU   DCBMACR1
DCBMRRD  EQU   DCBMRAPG
DCBMRCI  EQU   DCBMACR1
DCBMRMVG EQU   DCBMRCI
DCBMRLCG EQU   DCBMACR1
DCBMRABC EQU   DCBMACR1
DCBMRPT1 EQU   DCBMRABC
DCBMRSBG EQU   DCBMRPT1
DCBMRCRL EQU   DCBMACR1
DCBMRCHK EQU   DCBMRCRL
DCBMRRDX EQU   DCBMRCHK
DCBMRDMG EQU   DCBMACR1
DCBMACR2 EQU   DCBMACR+1
DCBMRPUT EQU   DCBMACR2
DCBMRWRT EQU   DCBMACR2
DCBMRMVP EQU   DCBMACR2
DCBMR5WD EQU   DCBMACR2
DCBMRLDM EQU   DCBMR5WD
DCBMRLCP EQU   DCBMRLDM
DCBMR4WD EQU   DCBMACR2
DCBMRPT2 EQU   DCBMR4WD
DCBMRTMD EQU   DCBMRPT2
DCBMR3WD EQU   DCBMACR2
DCBMRCTL EQU   DCBMR3WD
DCBMRSTK EQU   DCBMRCTL
DCBMR1WD EQU   DCBMACR2
DCBMRSWA EQU   DCBMR1WD
DCBMRDMD EQU   DCBMRSWA
IHADCS25 EQU   0
DCBMACRF EQU   IHADCS25+2
DCBMACF1 EQU   DCBMACRF
DCBMFFE  EQU   DCBMACF1
DCBMFGET EQU   DCBMFFE
DCBMFAPG EQU   DCBMACF1
DCBMFRD  EQU   DCBMFAPG
DCBMFCI  EQU   DCBMACF1
DCBMFMVG EQU   DCBMFCI
DCBMFLCG EQU   DCBMACF1
DCBMFABC EQU   DCBMACF1
DCBMFPT1 EQU   DCBMFABC
DCBMFSBG EQU   DCBMFPT1
DCBMFCRL EQU   DCBMACF1
DCBMFCHK EQU   DCBMFCRL
DCBMFDMG EQU   DCBMACF1
DCBMACF2 EQU   DCBMACRF+1
DCBMFPUT EQU   DCBMACF2
DCBMFWRT EQU   DCBMACF2
DCBMFMVP EQU   DCBMACF2
DCBMF5WD EQU   DCBMACF2
DCBMFLDM EQU   DCBMF5WD
DCBMFLCP EQU   DCBMFLDM
DCBMF4WD EQU   DCBMACF2
DCBMFPT2 EQU   DCBMF4WD
DCBMFTMD EQU   DCBMFPT2
DCBMF3WD EQU   DCBMACF2
DCBMFCTL EQU   DCBMF3WD
DCBMFSTK EQU   DCBMFCTL
DCBMF1WD EQU   DCBMACF2
DCBMFSWA EQU   DCBMF1WD
DCBMFDMD EQU   DCBMFSWA
DCBDEBAD EQU   IHADCS25+4
DCBIFLGS EQU   DCBDEBAD
DCBIFPCT EQU   DCBIFLGS
IHADCS27 EQU   0
DCBGET   EQU   IHADCS27
DCBPUT   EQU   DCBGET
DCBGETA  EQU   DCBPUT+1
IHADCS36 EQU   0
DCBGERR  EQU   IHADCS36
DCBPERR  EQU   DCBGERR
DCBCHECK EQU   DCBPERR
DCBOPTCD EQU   DCBCHECK
DCBOPTH  EQU   DCBOPTCD
DCBOPTO  EQU   DCBOPTH
DCBOPTZ  EQU   DCBOPTCD
DCBGERRA EQU   DCBCHECK+1
DCBPERRA EQU   DCBGERRA
DCBSYNAD EQU   IHADCS36+4
DCBSYNA  EQU   DCBSYNAD+1
DCBCIND1 EQU   IHADCS36+8
DCBCIND2 EQU   IHADCS36+9
DCBIOBA  EQU   IHADCS36+16
DCBCICB  EQU   DCBIOBA
IHADCS52 EQU   0
DCBDIRCT EQU   IHADCS52
DCBQSWS  EQU   DCBDIRCT
DCBUSASI EQU   DCBQSWS
DCBQADFS EQU   DCBUSASI
DCBBUFOF EQU   DCBDIRCT+1
IHADCS37 EQU   0
DCBFLAG1 EQU   IHADCS37
IHADCS40 EQU   0
DCBEOBAD EQU   IHADCS40
DCBCCCW  EQU   IHADCS40+4
DCBRECAD EQU   DCBCCCW
DCBRECBT EQU   DCBRECAD
DCBRCREL EQU   DCBRECBT
DCBLRECL EQU   IHADCS40+10
DCBCNTRL EQU   IHADCS40+12
DCBEROPT EQU   DCBCNTRL
DMCB     EQU   0
DMCBRTC  EQU   DMCB+12
DMCBFTY  EQU   DMCB+20
DMCBVSF  EQU   DMCBFTY
DMCBOPN  EQU   DMCB+21
DMCBSOUT EQU   DMCBOPN
DMCBRMOD EQU   DMCB+23
DMCBOUT  EQU   DMCBRMOD
DMCBOPTS EQU   DMCB+24
DMCBKYD  EQU   DMCBOPTS
DMCBGKY  EQU   DMCBOPTS
DMCBRNO  EQU   DMCBGKY
DMCBMFLG EQU   DMCB+28
DMCBFMOD EQU   DMCBMFLG
DMCBREJ  EQU   DMCB+29
DMCBBUFP EQU   DMCB+32
DMCBBLEN EQU   DMCB+36
DMCBORL  EQU   DMCB+40
DMCBKEYP EQU   DMCB+44
DMCBRBA  EQU   DMCB+56
DMCBRRL  EQU   DMCB+60
DMCBFRE  EQU   DMCB+88
DMCBEOB  EQU   DMCB+92
DMCBACBE EQU   DMCB+124
DMCBRPLF EQU   DMCB+128
DMCBSYNM EQU   DMCB+132
DMCBSPEC EQU   DMCB+380
DMCBSUBC EQU   DMCB+404
DMCBAMS  EQU   DMCB+416
DMCBAUDT EQU   DMCB+568
DMCBLSCP EQU   DMCBAUDT+16
DMCBMODN EQU   DMCB+632
RDW      EQU   0
DATALEN  EQU   RDW
RECFLGS  EQU   RDW+2
RELRECNO EQU   0
MOVSTRUC EQU   0
FROMWORD EQU   MOVSTRUC
FROMTAIL EQU   FROMWORD
TOWORD   EQU   MOVSTRUC+4
TOTAIL   EQU   TOWORD
SYNMSG   EQU   0
DMCBRQC  EQU   0
I001C    EQU   0
I008P    EQU   0
I015F    EQU   0
I015P    EQU   0
I031F    EQU   0
I031P    EQU   0
I256C    EQU   0
DMCBVSM  EQU   DMCBAMS
DMCBRPL  EQU   DMCBVSM
DMCBQSM  EQU   DMCBAMS
DMCBDCB  EQU   DMCBQSM
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
DMCBRES7 EQU   DMCBQSM+96
DMCBACB  EQU   DMCBVSM+76
DMCBWRK  EQU   DMCB+648
DMCBRES8 EQU   DMCB+640
DMCBCARY EQU   DMCBAUDT+20
DMCBCLC  EQU   DMCBAUDT+12
DMCBOPC  EQU   DMCBAUDT+8
DMCBFRC  EQU   DMCBAUDT+4
DMCBALC  EQU   DMCBAUDT
DMCBFR   EQU   DMCB+412
DMCBRES6 EQU   DMCB+410
DMCBIRSC EQU   DMCB+408
DMCBDRBP EQU   DMCB+400
DMCBRSZM EQU   DMCB+398
DMCBRSZA EQU   DMCB+396
DMCBCISZ EQU   DMCB+394
DMCBDCBL EQU   DMCB+392
DMCBDCLR EQU   DMCB+390
DMCBDCFM EQU   DMCB+389
DMCBRES5 EQU   DMCB+388
DMCBLBRT EQU   DMCB+386
DMCBLBSQ EQU   DMCB+384
DMCBLBPS EQU   DMCB+383
DMCBLBTY EQU   DMCB+382
DMCBRES4 EQU   DMCB+381
DMCBSPRS EQU   DMCBSPEC
DMCBSPRN EQU   DMCBSPEC
DMCBSPCT EQU   DMCBSPEC
DMCBSPRL EQU   DMCBSPEC
DMCBSPSE EQU   DMCB+376
DMCBSPPR EQU   DMCB+372
DMCBSPTY EQU   DMCB+369
DMCBODIS EQU   DMCB+368
DMCBDISP EQU   DMCB+367
DMCBSTAT EQU   DMCB+366
DMCBRES3 EQU   DMCB+364
DMCBMEMB EQU   DMCB+356
DMCBMODL EQU   DMCB+348
DMCBRES9 EQU   DMCB+340
DMCBPID  EQU   DMCB+332
DMCBTYPE EQU   DMCB+328
DMCBDSN  EQU   DMCB+284
DMCBUNIT EQU   DMCB+276
DMCBDSOR EQU   DMCB+274
DMCBVOL  EQU   DMCB+268
DMCBDDNM EQU   DMCB+260
DMCBDCBE EQU   DMCBACBE
DMCBARC  EQU   DMCB+120
DMCBCPC  EQU   DMCB+116
DMCBRET  EQU   DMCB+112
DMCBSTL  EQU   DMCB+96
DMCBRES2 EQU   DMCB+85
DMCBSPID EQU   DMCB+84
DMCBRESC EQU   DMCB+80
DMCBZZ1P EQU   DMCB+76
DMCBMSGS EQU   DMCB+72
DMCBMSG0 EQU   DMCB+68
DMCBRI   EQU   DMCB+64
DMCBMSG  EQU   DMCB+52
DMCBKEYL EQU   DMCB+48
DMCBKPC  EQU   DMCBKEYP
DMCBBFPC EQU   DMCBBUFP
DMCBRES1 EQU   DMCB+31
DMCBACCM EQU   DMCB+30
DMCBRESB EQU   DMCBMFLG
DMCBLOPT EQU   DMCB+27
DMCBLRM  EQU   DMCB+26
DMCBLRQ  EQU   DMCB+25
DMCBOPRS EQU   DMCBOPTS
DMCBLRD  EQU   DMCBOPTS
DMCBBWD  EQU   DMCBOPTS
DMCBUPD  EQU   DMCBOPTS
DMCBAPX  EQU   DMCBOPTS
DMCBRMRS EQU   DMCBRMOD
DMCBRM5  EQU   DMCBRMOD
DMCBRM6  EQU   DMCBRMOD
DMCBTMP  EQU   DMCBOUT
DMCBRQST EQU   DMCB+22
DMCBRESA EQU   DMCBOPN
DMCBSIN  EQU   DMCBOPN
DMCBKSF  EQU   DMCBFTY
DMCBFTRS EQU   DMCBFTY
DMCBSHF  EQU   DMCBFTY
DMCBIRL  EQU   DMCB+16
DMCBTVP  EQU   DMCB+8
DMCBNEXT EQU   DMCB+4
DMCBID   EQU   DMCB
DCBEOB   EQU   IHADCS40+20
DCBPRECL EQU   IHADCS40+18
@NM00029 EQU   IHADCS40+16
DCBCNTRA EQU   DCBCNTRL+1
@NM00028 EQU   DCBEROPT
DCBERABE EQU   DCBEROPT
DCBERSKP EQU   DCBEROPT
DCBERACC EQU   DCBEROPT
@NM00027 EQU   IHADCS40+9
@NM00026 EQU   IHADCS40+8
DCBRECA  EQU   DCBRECAD+1
@NM00025 EQU   DCBRECBT
DCBRCFGT EQU   DCBRCREL
DCBRCTRU EQU   DCBRCREL
DCBLCCW  EQU   DCBEOBAD
@NM00024 EQU   DCBFLAG1
DCBSTFLS EQU   DCBFLAG1
DCBSTQCK EQU   DCBFLAG1
DCBDIRCQ EQU   DCBBUFOF
DCBQSTRU EQU   DCBUSASI
@NM00023 EQU   DCBUSASI
DCBQADF3 EQU   DCBQADFS
DCBQADF2 EQU   DCBQADFS
DCBQADF1 EQU   DCBQADFS
DCBBLBP  EQU   DCBUSASI
@NM00022 EQU   DCBUSASI
DCBCICBA EQU   DCBCICB+1
@NM00021 EQU   DCBCICB
DCBOFFSW EQU   IHADCS36+15
DCBOFFSR EQU   IHADCS36+14
DCBWCPL  EQU   IHADCS36+13
DCBWCPO  EQU   IHADCS36+12
DCBBLKSI EQU   IHADCS36+10
DCBCNQSM EQU   DCBCIND2
DCBCNFEO EQU   DCBCIND2
DCBCNCHS EQU   DCBCIND2
DCBCNBFP EQU   DCBCIND2
DCBCNIOE EQU   DCBCIND2
DCBCNCLO EQU   DCBCIND2
DCBCNWRO EQU   DCBCIND2
DCBCNSTO EQU   DCBCIND2
DCBCNEXB EQU   DCBCIND1
@NM00020 EQU   DCBCIND1
DCBCNBRM EQU   DCBCIND1
@NM00019 EQU   DCBCIND1
DCBCNEVA EQU   DCBCIND1
DCBCNEVB EQU   DCBCIND1
DCBCNSRD EQU   DCBCIND1
DCBCNTOV EQU   DCBCIND1
DCBIOBL  EQU   DCBSYNAD
DCBCHCKA EQU   DCBPERRA
DCBOPTJ  EQU   DCBOPTCD
DCBOPTT  EQU   DCBOPTCD
DCBSRCHD EQU   DCBOPTZ
DCBOPTQ  EQU   DCBOPTCD
DCBBCKPT EQU   DCBOPTO
DCBOPTC  EQU   DCBOPTCD
DCBOPTU  EQU   DCBOPTCD
DCBOPTW  EQU   DCBOPTCD
DCBPUTA  EQU   DCBGETA
@NM00018 EQU   DCBPUT
DCBDEBA  EQU   DCBDEBAD+1
@NM00017 EQU   DCBIFLGS
DCBIFIOE EQU   DCBIFLGS
DCBCH12  EQU   DCBIFPCT
DCBCH9   EQU   DCBIFPCT
DCBIFEC  EQU   DCBIFLGS
DCBMFSTI EQU   DCBMFDMD
DCBMFAWR EQU   DCBMFSTK
DCBMFUIP EQU   DCBMFTMD
DCBMFIDW EQU   DCBMFLCP
DCBMFWRK EQU   DCBMFMVP
DCBMFRDQ EQU   DCBMFWRT
DCBMFGTQ EQU   DCBMFPUT
DCBMFSTL EQU   DCBMACF2
DCBMFCK  EQU   DCBMFDMG
DCBMFRDX EQU   DCBMFCHK
DCBMFDBF EQU   DCBMFSBG
DCBMFRDI EQU   DCBMFLCG
DCBMFRDK EQU   DCBMFMVG
DCBMFWRQ EQU   DCBMFRD
DCBMFPTQ EQU   DCBMFGET
DCBMFECP EQU   DCBMACF1
DCBTIOT  EQU   IHADCS25
DCBMRSTI EQU   DCBMRDMD
DCBMRAWR EQU   DCBMRSTK
DCBMRUIP EQU   DCBMRTMD
DCBMRIDW EQU   DCBMRLCP
DCBMRWRK EQU   DCBMRMVP
DCBMRRDQ EQU   DCBMRWRT
DCBMRGTQ EQU   DCBMRPUT
DCBMRSTL EQU   DCBMACR2
DCBMRCK  EQU   DCBMRDMG
DCBPGFXA EQU   DCBMRRDX
DCBMRDBF EQU   DCBMRSBG
DCBMRRDI EQU   DCBMRLCG
DCBMRRDK EQU   DCBMRMVG
DCBMRWRQ EQU   DCBMRRD
DCBMRPTQ EQU   DCBMRGET
DCBMRECP EQU   DCBMACR1
@NM00016 EQU   DCBIFLG
DCBIBIOE EQU   DCBIFLG
DCBICH12 EQU   DCBIBPCT
DCBICH9  EQU   DCBIBPCT
DCBIBEC  EQU   DCBIFLG
DCBOFIOF EQU   DCBOFLGS
DCBOFUEX EQU   DCBOFLGS
DCBOFTM  EQU   DCBOFLGS
DCBOFPPC EQU   DCBOFLGS
DCBOFOPN EQU   DCBOFLGS
DCBOFEOV EQU   DCBOFLGS
DCBOFLRB EQU   DCBOFLGS
DCBOFIOD EQU   DCBOFLWR
DCBDDNAM EQU   IHADCS24
DCBEXLSA EQU   DCBEXLST+1
DCBRECKL EQU   DCBRECFM
DCBRECCC EQU   DCBRECFM
DCBRECSB EQU   DCBRECFM
DCBRECBR EQU   DCBRECFM
DCBRECTO EQU   DCBRECLA
DCBEODA  EQU   DCBEODAD+1
DCBBFA   EQU   DCBBFTEK
DCBH0    EQU   DCBBFTEK
DCBBFTKD EQU   DCBBFTEK
DCBBFTE  EQU   DCBBFT
DCBBFTKR EQU   DCBBFT
DCBBFTS  EQU   DCBBFT
DCBH1    EQU   DCBBFTEK
DCBSVCXA EQU   DCBSVCXL+1
@NM00015 EQU   DCBSVCXL
DCBODEBA EQU   DCBIOBAA
@NM00014 EQU   DCBQSLM
DCBUPDBT EQU   DCBQSLM
DCBUPDCM EQU   DCBQSLM
DCB1DVDS EQU   DCBQSLM
@NM00013 EQU   DCBDSRG2
DCBDSGTR EQU   DCBDSRG2
DCBACBM  EQU   DCBDSRG2
@NM00012 EQU   DCBDSRG2
DCBDSGTQ EQU   DCBDSRG2
DCBDSGTX EQU   DCBDSRG2
DCBDSGGS EQU   DCBDSRG2
DCBDSGU  EQU   DCBDSRG1
DCBDSGPO EQU   DCBDSRG1
@NM00011 EQU   DCBDSRG1
@NM00010 EQU   DCBDSRG1
DCBDSGCX EQU   DCBDSRG1
DCBDSGDA EQU   DCBDSRG1
DCBDSGPS EQU   DCBDSRG1
DCBDSGIS EQU   DCBDSRG1
DCBBUFL  EQU   IHADCS11+8
DCBBUFCA EQU   DCBBUFCB+1
DCBBUFNO EQU   DCBBUFCB
DCBDEVT  EQU   DCBREL
DCBKEYLE EQU   DCBRELB
DCBTRCID EQU   DCBPRBYT
@NM00009 EQU   DCBPRBYT
DCBPRTOV EQU   IHADCS04+2
@NM00008 EQU   IHADCS04+1
DCBPRTSP EQU   IHADCS04
@NM00007 EQU   IHADCS02+19
DCBDEN   EQU   IHADCS02+18
@NM00006 EQU   IHADCS02+17
DCBTRTCH EQU   IHADCS02+16
DCBBLKCT EQU   IHADCS02+12
@NM00005 EQU   IHADCS02
DCBTRBAL EQU   IHADCS01+6
@NM00004 EQU   IHADCS01+5
@NM00003 EQU   IHADCS01+4
DCBDVTBA EQU   DCBDVTBL+1
@NM00002 EQU   DCBDVTBL
DCBKEYCN EQU   IHADCS00+4
DCBRELAD EQU   IHADCS00
@NM00001 EQU   IHADCB
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RF00049 EQU   @RC00047
@RF00081 EQU   @RC00039
@RF00129 EQU   @EL00001
@RC00158 EQU   @EL00003
@RC00174 EQU   @EL00003
@RC00172 EQU   @EL00003
@RC00170 EQU   @EL00003
@RC00168 EQU   @EL00003
@RC00166 EQU   @EL00003
@RC00164 EQU   @EL00003
@RC00162 EQU   @EL00003
@ENDDATA EQU   *
         END   BLSCPUTT,(C'PLS1939',0701,78062)
