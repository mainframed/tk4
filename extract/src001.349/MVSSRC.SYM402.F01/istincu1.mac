         TITLE 'ISTINCU1 - SCS INPUT MEDIA CONTROL                     *
                        '
ISTINCU1 CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'ISTINCU1  75.129'                                 0001
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                     0001
         BALR  @12,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,@12                                         0001
*/********************************************************************/
*/*                 STANDARD LINKAGE                                 */
*/********************************************************************/
*                                                                  0077
* DO;                                                              0077
*/***  CRRMAINT  PROCNM(ISTINCU1)COMP(VY)FUNC(SUB)RPHADD((NCSPLRPH))  *
**/                                                                0078
*                                                                  0078
*/* ATBUILD (ISTRPH,ISTCRA,ISTPFCRR,ISTVYCRR)  */                  0078
* RFY ISTLCCW ;                                                    0078
* RFY ISTLCPB ;                                                    0079
* RFY ISTZSAVE;                                                    0080
* RFY ISTPFCRR;                                                    0081
* RFY ISTCFCRR;                                                    0082
* RFY ISTZCRR ;                                                    0083
* RFY ISTASCRR;                                                    0084
* RFY ISTAPCRR;                                                    0085
* RFY ISTCRA  ;                                                    0086
* RFY ISTCNSTA;                                                    0087
* RFY ISTVYCRR;                                                    0088
*/* END OF ATBUILD */                                              0089
* /*** SET ENTERED BIT FOR THIS PROCEDURE ***/                     0089
*NCSPLRPH->RPHCRR->CRACRR->NINCU1 = '1'B;                          0089
         L     @11,NCSPLRPH(,CUNCSPLR)                             0089
         L     @11,RPHCRR(,@11)                                    0089
         L     @11,CRACRR(,@11)                                    0089
         OI    NINCU1(@11),B'00000001'                             0089
* /*** CLEAR AND SET CURRENT PROCEDURE BIT ***/                    0090
*NCSPLRPH->RPHCRR->CRACRR->VYCCRT = '0'B;                          0090
         XC    VYCCRT+1(11,@11),VYCCRT+1(@11)                      0090
         MVI   VYCCRT(@11),B'00000000'                             0090
*NCSPLRPH->RPHCRR->CRACRR->CINCU1 = '1'B;                          0091
         OI    CINCU1(@11),B'00000001'                             0091
* END;                                                             0092
*CUDATDRG = CUNXTAV;                     /*SET UP DSECT BASE*/     0093
         L     @11,NCSPLWKA(,CUNCSPLR)                             0093
         L     CUDATDRG,CUNXTAV(,@11)                              0093
*GEN REFS(CUDATDRG);                                               0094
          USING @DATD,CUDATDRG
*CUFWDPTR = CUSAVERG - 72;               /*SAVE AREA CHAIN*/       0095
         LA    @11,72                                              0095
         LR    @04,CUSAVERG                                        0095
         SLR   @04,@11                                             0095
         ST    @04,CUFWDPTR(,CUSAVERG)                             0095
*CUSAVERG = CUSAVERG - 72;               /*PT TO OWN SAVE AREA*/   0096
         SLR   CUSAVERG,@11                                        0096
*CUBCKPTR = CUSAVERG + 72;               /*COMPLETE CHAING*/       0097
         ALR   @11,CUSAVERG                                        0097
         ST    @11,CUBCKPTR(,CUSAVERG)                             0097
*CUFWDPTR = CUZERO;                      /*ZERO OWN FWD PTR*/      0098
         SLR   @11,@11                                             0098
         ST    @11,CUFWDPTR(,CUSAVERG)                             0098
*CUNXTAV = CUNXTAV + @SIZDATD;           /*UPDATE NEXT AVAIL PTR*/ 0099
         L     @04,NCSPLWKA(,CUNCSPLR)                             0099
         L     @00,CUNXTAV(,@04)                                   0099
         AL    @00,@SIZDATD                                        0099
         ST    @00,CUNXTAV(,@04)                                   0099
*/********************************************************************/
*/*                 STANDARD LINKAGE END                             */
*/********************************************************************/
*                                                                  0100
*/********************************************************************/
*/*       THIS CODE CHECKS FOR A VALID RH. IF VALID, NEW LINE CHARS  */
*/*       ARE DELETED AND REPLACED WITH BLANKS. FOR INVALID RH'S,    */
*/*       MSG 5 IS ISSUED.                                           */
*/********************************************************************/
*RFY ISTRH BASED(ADDR(MGLRH));           /*BASE FOR RH*/           0100
*RFY CUREG15   RSTD;                                               0101
*RFY CUREG2 RSTD;                                                  0102
*IF RHCHAIN = RHONLY                     /*IF RH ONLY IN CHAIN*/   0103
* THEN                                                             0103
         L     @14,NCSMGLPT(,CUNCSPLR)                             0103
         TM    RHCHAIN(@14),B'00000011'                            0103
         BNO   @RF00103                                            0103
*  IF NCSPLFSB ^= CUZERO &               /*IF FSB EXEISTS*/        0104
*     NCSRULEN > 0                       /*AND IF RU LENGTH >0*/   0104
*   THEN                                                           0104
         L     @14,NCSPLFSB(,CUNCSPLR)                             0104
         CR    @14,@11                                             0104
         BE    @RF00104                                            0104
         CH    @11,NCSRULEN(,@14)                                  0104
         BNL   @RF00104                                            0104
*    CUREG15 = CUZERO;                   /*RETURN CODE = ZERO*/    0105
         LR    CUREG15,@11                                         0105
*   ELSE                                 /*RH INVALID*/            0106
*    DO;                                 /*ERROR MSG*/             0106
         B     @RC00104                                            0106
@RF00104 DS    0H                                                  0107
*     CUREG15 = CUFOUR;                  /*CODE = INVALID*/        0107
         LA    CUREG15,4                                           0107
*     MGLNS1 = SRUFIE;                   /*REQUEST ERROR*/         0108
         L     @14,NCSMGLPT(,CUNCSPLR)                             0108
         MVI   MGLNS1(@14),X'10'                                   0108
*     MGLNS2 = SRUFUNC;                  /*FUNC UNKNOWN*/          0109
         MVI   MGLNS2(@14),X'03'                                   0109
*    END;                                /*END REQUEST ERROR*/     0110
* ELSE                                   /*RH NOT ONLY IN CHAIN*/  0111
*  DO;                                   /*NOT ONLY IN CHAIN*/     0111
         B     @RC00103                                            0111
@RF00103 DS    0H                                                  0112
*   CUREG15 = CUFOUR;                    /*CODE = INVALID*/        0112
         LA    CUREG15,4                                           0112
*   MGLNS1 = SRUCPME;                    /*RH ERROR*/              0113
         L     @14,NCSMGLPT(,CUNCSPLR)                             0113
         MVI   MGLNS1(@14),X'40'                                   0113
*   MGLNS2 = '0B'X;                      /*CHAINING NOT ALLOWED*/  0114
         MVI   MGLNS2(@14),X'0B'                                   0114
*  END;                                                            0115
*IF CUREG15 ^= CUZERO                    /*IF RH NOT VALID*/       0116
* THEN                                                             0116
@RC00103 SLR   @14,@14                                             0116
         CR    CUREG15,@14                                         0116
         BE    @RF00116                                            0116
*  DO;                                                             0117
*    MGLMSGAD = ADDR(CUMSGID);           /* ADDR OF MSG TEXT*/     0118
         L     @11,NCSMGLPT(,CUNCSPLR)                             0118
         LA    @04,CUMSGID                                         0118
         ST    @04,MGLMSGAD(,@11)                                  0118
*    MGLMSGL = CUTHREE;                  /*MESSAGE LENGTH*/        0119
         MVI   MGLMSGL(@04),X'03'                                  0119
*    MGLVDATA = CUZERO;                  /*NO VARIABLE DATA*/      0120
         ST    @14,MGLVDATA(,@11)                                  0120
*    MGLMSGID(1:3) = '005';              /*SEND MSG # 5*/          0121
         MVC   MGLMSGID(3,@04),@CC00805                            0121
*    CALL ISTINCS1;                      /*SEND MSG*/              0122
         L     @15,@CV00806                                        0122
         BALR  @14,@15                                             0122
* DO;                                                              0123
*/***  CRRMAINT  PROCNM(ISTINCU1)COMP(VY)FUNC(RET)RPHADD((NCSPLRPH))  *
**/                                                                0124
* /*** CLEAR AND SET CURRENT PROCEDURE BIT ***/                    0124
*NCSPLRPH->RPHCRR->CRACRR->VYCCRT = '0'B;                          0124
         L     @14,NCSPLRPH(,CUNCSPLR)                             0124
         L     @14,RPHCRR(,@14)                                    0124
         L     @14,CRACRR(,@14)                                    0124
         XC    VYCCRT+1(11,@14),VYCCRT+1(@14)                      0124
         MVI   VYCCRT(@14),B'00000000'                             0124
*NCSPLRPH->RPHCRR->CRACRR->CINCU1 = '1'B;                          0125
         OI    CINCU1(@14),B'00000001'                             0125
* END;                                                             0126
*  END;                                  /*END SEND MSG*/          0127
* ELSE DO;                               /*RH OK*/                 0128
         B     @RC00116                                            0128
@RF00116 DS    0H                                                  0129
*   NWLNCNTR=0;          /*INITIALIZE NEW LINECHAR COUNTER @DM14029*/
         SLR   NWLNCNTR,NWLNCNTR                                   0129
*   DO CUREG2=1 BY 1 TO NCSRULEN;        /*SCAN TEXT*/             0130
         LA    CUREG2,1                                            0130
         B     @DE00130                                            0130
@DL00130 DS    0H                                                  0131
*    IF NCSRUITS(CUREG2) = '15'X         /*IF NEW LINE CHAR*/      0131
*     THEN                                                         0131
         L     @14,NCSPLFSB(,CUNCSPLR)                             0131
         LR    @11,@14                                             0131
         ALR   @11,CUREG2                                          0131
         CLI   NCSRUITS-1(@11),X'15'                               0131
         BNE   @RF00131                                            0131
*      DO;                               /*DELETE AND BLANK*/      0132
*       RFY (CU1ETO,CU1EFROM,CU1OTO,CU1OFROM) RSTD;                0133
*       CU1ETO = ADDR(NCSRUITS(CUREG2));                           0134
         LA    CU1ETO,NCSRUITS-1(CUREG2,@14)                       0134
*       CU1EFROM = ADDR(NCSRUITS(CUREG2+1));                       0135
         LA    CU1EFROM,NCSRUITS(CUREG2,@14)                       0135
*       CU1OTO = NCSRULEN-CUREG2+1;                                0136
         LH    CU1OTO,NCSRULEN(,@14)                               0136
         SLR   CU1OTO,CUREG2                                       0136
         AL    CU1OTO,@CF00062                                     0136
*       CU1OFROM = CU1OTO-1;                                       0137
         LR    CU1OFROM,CU1OTO                                     0137
         BCTR  CU1OFROM,0                                          0137
*       GEN CODE SETS(CU1OFROM) REFS(CU1BLANK)                     0138
*           (ICM CU1OFROM,8,CU1BLANK);                             0138
         ICM CU1OFROM,8,CU1BLANK
*       MVCL(CU1ETO,CU1EFROM);                                     0139
         MVCL  CU1ETO,CU1EFROM                                     0139
*       RFY (CU1ETO,CU1EFROM,CU1OTO,CU1OFROM) UNRSTD;              0140
*       NWLNCNTR=NWLNCNTR+1;  /*UPDATE NEWLINE CHAR COUNTER @DM14029*/
         AL    NWLNCNTR,@CF00062                                   0141
*      END;                              /*END DELETE AND BLANK*/  0142
*     ELSE;                              /*NOT NEW LINE CHAR*/     0143
@RF00131 DS    0H                                                  0144
*   END;                                /*END DO LOOP*/            0144
         AL    CUREG2,@CF00062                                     0144
@DE00130 L     @14,NCSPLFSB(,CUNCSPLR)                             0144
         CH    CUREG2,NCSRULEN(,@14)                               0144
         BNH   @DL00130                                            0144
*  END;                                  /*END RH OK*/             0145
*CPWILN = NCSRULEN-NWLNCNTR;  /*OBTAIN TRANSLATION LENGTH @DM14029*/
@RC00116 L     @14,NCSCPWPT(,CUNCSPLR)                             0146
         L     @11,NCSPLFSB(,CUNCSPLR)                             0146
         LH    @11,NCSRULEN(,@11)                                  0146
         SLR   @11,NWLNCNTR                                        0146
         STH   @11,CPWILN(,@14)                                    0146
*CUNXTAV = CUDATDRG;                     /*RESTORE CALLER'S WK AREA @*/
         L     @14,NCSPLWKA(,CUNCSPLR)                             0147
         ST    CUDATDRG,CUNXTAV(,@14)                              0147
*CUSAVERG = CUSAVERG + 72;               /*RESTORE CALLER'S SVAREA @*/
         AL    CUSAVERG,@CF00786                                   0148
*RETURN CODE(CUREG15);                   /*RETURN WITH R15 = R15*/ 0149
*                                                                  0149
         L     @14,12(,@13)                                        0149
         LM    @00,@12,20(@13)                                     0149
         BR    @14                                                 0149
*/* TPEPILOG   */                                                  0150
* GEN (PRINT OFF);                                                 0150
*                                                                  0150
         PRINT OFF
*/*   PROGRAM OPERATOR MESSAGE HEADER                                */
*DCL  1  ISTPOHD  BDY(WORD) BASED,                                 0151
*        2 POHRSVD1 CHAR(1),       /* RESERVED                       */
*        2 POHSTAT,                /* HEADER STATUS BITS             */
*          3 POHEND   BIT(1),      /* END LINE 1=YES                 */
*          3 POHDATA  BIT(1),      /* DATA LINE 1=YES                */
*          3 POHLBL   BIT(1),      /* LABEL LINE 1=YES               */
*          3 POHCNTRL BIT(1),      /* CONTROL LINE 1=YES             */
*          3 POHRSVD2 BIT(2),      /* RESERVED                       */
*          3 POHRREQ  BIT(1),      /* REPLY REQUESTED 1=YES          */
*          3 POHGEN   BIT(1),      /* ID ORIGIN  0=GENERATED BY VTAM */
*                                  /*            1=GENERATED BY POA  */
*        2 POHID    FIXED(16);     /* MESSAGE IDENTIFIER             */
*/*            VTAM PREFIX FOR QUEUE ELEMENTS                         *
*/*  INITIAL LEVEL                                     001 03/04/75  */
*DECLARE                                                           0152
*  1 ISTPFX  BDY(WORD)  BASED,                                     0152
*   2 PFXID        CHAR(4),             /* QUEUE ACRONYM (SAME AS  0152
*                                          QABID)                     *
*     3 PFXCBID    BIT(8),              /* CONTROL BLOCK ID           *
*   2 PFXPRTY      CHAR(1),             /* PRIORITY OF ELEMENT        *
*   2 PFXLNG       CHAR(3),             /* ELEMENT LENGTH,         0152
*                                          INCLUDING PREFIX           *
*   2 PFXFWD       PTR(31),   /* POINTER TO NEXT QUEUE             0152
*                                          ELEMENT (IF LAST        0152
*                                          POINTER TO QAB)            *
*   2 PFXBCK       PTR(31) ;   /* POINTER TO PREVIOUS              0152
*                                          QUEUE ELEMENT (IF       0152
*                                          FIRST, POINTER TO QAB)     *
*DCL NCSPLTYP BIT(8) CONSTANT('60'X);   /* NCSPL CONTROL BLOCK ID     *
*   /* NETWORK CONFIGURATION SERVICES CONTROL BLOCK  */            0154
*/*  DELTA                                             13 02/08/75  */
*DECLARE                                                           0154
*  1 ISTNCSPL BASED BDY(DWORD),                                    0154
*   2 *      CHAR(16) BDY(WORD),                                   0154
*     3 NCSPFX CHAR(LENGTH(ISTPFX)), /* QUE ELEMENT PREFIX           */
*       4 *        CHAR(12),                                       0154
*       4 NCSCRWKA PTR(31),       /* PTR TO WORK AREA FOR C/R I/O    */
*   2 *           BIT(8),         /*RESERVED                         */
*   2 NCSPLVCD    BIT(8),         /*VERB CODE                        */
*   2 NCSPLVBF    CHAR(2),        /*VERB MODIFIER FLAGS              */
*      3 NCSVBF01 BIT(1),         /* UNUSED                          */
*      3 NCSVBF02 BIT(1),         /* UNUSED                          */
*      3 NCSVBF03 BIT(1),         /* MODIFY MSG SUP                  */
*      3 NCSVBF04 BIT(1),         /* TYPE=VTAM                       */
*      3 NCSVBF05 BIT(1),         /* LINETRACE=1                     */
*      3 NCSVBF06 BIT(1),         /* I/O TRACE=1                     */
*      3 NCSVBF07 BIT(1),         /* BUFFER TRACE=1                  */
*      3 NCSVBF08 BIT(1),         /* MODIFY TPRINT                   */
*      3 NCSVBF09 BIT(1),         /* MODIFY TEST                     */
*      3 NCSVBF10 BIT(1),         /* MODIFY TRACE=NO                 */
*      3 NCSVBF11 BIT(1),         /* VARY INTERNAL ONLY & MODIFY     */
*                                 /*  TRACE = YES                    */
*      3 NCSVBF12 BIT(1),         /* VARY IMMEDIATE  & MODIFY        */
*                                 /*  NETSOL=NO                      */
*      3 NCSVBF13 BIT(1),         /* MODIFY NETSOL=YES               */
*      3 NCSVBF14 BIT(1),         /* VARY LOGON & MODIFY             */
*                                 /*  CHANGE                         */
*      3 NCSVBF15 BIT(1),         /* VARY DEACTIVATE & VARY NORMAL   */
*                                 /*  CLOSE(ERP)                     */
*      3 NCSVBF16 BIT(1),         /* VARY ACTIVATE & ERP REQUEST     */
*                                 /*   & MODIFY DUMP                 */
*   2 NCSPLVFL    CHAR(1),        /*COMMAND FLAGS                    */
*    3 NCSVNCSA   BIT(1),         /*NCSPL IS ACTIVE                  */
*    3 NCSVDEL    BIT(1),         /*DELETE NCSPL                     */
*    3 NCSVSTAT   BIT(1),         /*INDICATE NCSPL WAS NOT GETMAINED */
*    3 NCSDCONT   BIT(1),         /* DO DISCONACT                    */
*    3 NCSABCON   BIT(1),         /* DO ABANDON CONNECTION           */
*    3 NCSDACLK   BIT(1),         /* DO ACTIVATE LINE                */
*    3 NCSRSV02   BIT(2),         /* RESERVED                        */
*   2 NCSPLVF1    CHAR(1),        /* SPECIAL PROC FLAGS              */
*    3 NCSOVFMC   BIT(1),         /* PURGE ONLY VARY'S FMCB          */
*   2 NCSPRMRC    CHAR(1),        /* PURGE MINOR RETURN CODE FIELD   */
*   2 NCSIORC     CHAR(1),        /* I/O OR RESTART RETURN CODE      */
*   2 NCSRRNPT    CHAR(4),        /* ADDR RN ENTRY FOR LINE TRACE    */
*   2 NCSPLRID    CHAR(8),        /*ID = 'NODENAME'                  */
*   2 NCSPLLID    CHAR(8),        /*LOGON = 'NODENAME'               */
*   2 NCSDLID     CHAR(6),        /* OFFHOOK ID                      */
*   2 NCSCRCMD    FIXED(8),       /* C/R I/O COMMAND CODE            */
*   2 NCSCRPID    PTR(8),         /* C/R PATH ID (PID)               */
*   2 NCSPLRPT    PTR(31),        /*ID='NODENAME' RDTE ADDRESS       */
*   2 NCSPLLPT    PTR(31),        /*LOGON/LOGOFF='NODENAME' RDTE ADDR*/
*   2 NCSPLCMD    CHAR(2),        /*3705 CONTROL COMMAND CODES       */
*     3 NCSCMDA  BIT(8),          /*RH FLAGS                         */
*       4 NCSPLSYS BIT(1),        /*ON-SYSTEM OFF-FM                 */
*       4 NCSPLCTL BIT(1),        /*ON-CONTROL OFF-DATA              */
*       4 NCSPLSYN BIT(1),        /*ON=SYNCHR OFF-ASYNCHR            */
*       4 NCSPLFLO BIT(1),        /*ON-WITH FLOW  OFF-AGAINST FLOW   */
*       4 NCSPLUFM BIT(1),        /*ON=UNFORMATTED RU,OFF=FORMATTED  */
*       4 *        BIT(3),        /*RESERVED                         */
*     3 NCSCMDB  BIT(8),          /*COMMAND FIELD                    */
*   2 NCSNCPEP    BIT(8),         /* EP SUBCHANNEL ADDR              */
*   2 NCSMSGSP    CHAR(1),        /* RESERVED FOR MESSAGE SURPRESSION*/
*   2 NCSPLUAD    CHAR(3),        /*U = 'UNIT ADDRESS'               */
*   2 NCSCRFLG    CHAR(1),        /* MISCELLANEOUS C/R FLAGS         */
*     3 NCSPLWRM    BIT(1),       /* COMMAND SPECIFIED WARM PARAM,   */
*                                 /* 1 = YES                         */
*     3 NCSPLCLD    BIT(1),       /* COMMAND SPECIFIED COLD PARAM,   */
*                                 /* 1 = YES                         */
*     3 NCSFMCLD    BIT(1),       /* 370X RESPONDED COLD TO ACTPU    */
*                                 /* (ERP), 1 = YES                  */
*     3 NCSFMERP    BIT(1),       /* 370X RESPONDED ERP TO ACTPU     */
*                                 /* (ERP), 1 = YES                  */
*     3 NCSCRDSE    BIT(1),       /* 0=C/R DATA SET DOES NOT EXIST   */
*                                 /* OR IS NULL                      */
*                                 /* 1=C/R DATA SET EXISTS           */
*                                 /* AND IS NOT NULL                 */
*     3 NCSOPRQU    BIT(1),       /* OPERATOR REQUESTS REIPL, 1 = YES*/
*     3 NCSUSRNF    BIT(1),       /* EARLY WARNING PURGE HAS ALREADY */
*                                 /* OCCURED, 1 = YES                */
*     3 NCSSTCMD    BIT(1),       /* ACTIVATE IS A RESULT OF         */
*                                 /* START VTAM COMMAND, 1 = YES     */
*   2 NCSPLWRE    BIT(32),        /* WTOR ECB                        */
*   2 NCSPLWRF    CHAR(72),       /* WTOR REPLY AREA                 */
*   2 NCSPLRAD    PTR(31),        /* RDTE PTR FOR ALLOCATE/DEALLOCATE*/
*     3 NCSLSCMD BIT(8),          /* LINE SCHED COMMAND TYPE         */
*     3 NCSPLRCD BIT(8),          /* HEX VALUE FOR LINE SCHED PARAM  */
*   2 NCSIOCID    CHAR(4),        /* CURRENT CID FOR DAF LOCK HELD   */
*     3  NCSPLCID CHAR(4),        /* ALIAS FOR ABOVE                 */
*        4  NCSPLSAF  CHAR(2),    /* SOURCE ADDRESS                  */
*        4  NCSPLDAF  CHAR(2),    /* DESTINATION ADDRESS             */
*   2 NCSPLWKA    PTR(31),        /* NCS WORK AREA ADDRESS           */
*   2 NCSPLCVT    PTR(31),        /* POINTER TO VTAM CVT             */
*   2 NCSPLRPH    PTR(31),        /* POINTER TO RPH                  */
*   2 NCSPLECB    BIT(32),        /* ECB FOR VARY PGS                */
*   2 NCSPLFSB    PTR(31),        /* ADDRESS OF USS-FSS FSB OR RU    */
*   2 NCSPLRCR    PTR(31),        /* ADDRESS RDTE FOR CR             */
*   2 NCSPLFL1    CHAR(1),        /* VARY FLAGS                      */
*     3 NCSPL2IN  BIT(1),         /* SECOND ENTRY                    */
*     3 NCSPLSOM  BIT(1),         /* SUPRESS OP. MESSAGE             */
*     3 NCSPLEBN  BIT(1),         /* ENTRY FROM BNN SSCP             */
*     3 NCSPLREQ  BIT(1),         /* NCSPL FROM RESTORE              */
*     3 NCSPLNON  BIT(1),         /* DO NOT ADDR RDT SEGMENT         */
*     3 NCSPLAPU  BIT(1),         /* ACTIVATE PHYSICAL DONE BY LOAD  */
*     3 NCSPL2CN  BIT(1),         /* SECOND CONTACT REQUEST          */
*     3 NCSPLPOS  BIT(1),         /* BNN POSTED                      */
*   2 NCSPLFL2    CHAR(1),        /* VARY FLAGS                      */
*     3 NCSPLVDP  BIT(1),         /* NCSPL ON VARDEF PAB             */
*     3 NCSPLRSF  BIT(1),         /* NO SICK CLEAR BEFORE I/O        */
*     3 NCSPLRIO  BIT(1),         /* I/O = RESTART I/O               */
*     3 NCSOUFMC  BIT(1),         /* PURGE ONLY USER FMCB            */
*     3 NCSPLDS   BIT(1),         /* 1=CIO SAVED RESPONSE DATA       */
*     3 NCSREMPO  BIT(1),         /* REMOTE POWER OFF SPEC BY OPER   */
*     3 NCSPLVIS  BIT(1),         /* VARY IMM START CALLER OF CVP    */
*     3 NCSPLVIT  BIT(1),         /* VARY IMM TERM CALLER OF CVP     */
*   2 NCSPLFL3    CHAR(1),        /* FLAG BYTE                       */
*     3 NCSPLMOM  BIT(1),         /* ERP CAUSED BY FAILURE OF      0154
*                                    HIGHER NODE                     */
*     3 NCSEPP    BIT(1),         /* 1=EP SUBCHANNEL PRESENT         */
*     3 NCSPLANS  BIT(1),         /* ON FOR ACT IN ANSWER MODE       */
*                                 /* OFF FOR ACT IN NON-ANSWER MODE  */
*     3 NCSGID    BIT(1),         /* ON FOR PATH WITH GID PARM       */
*     3 NCSPID    BIT(1),         /* ON FOR PATH WITH PID PARM       */
*     3 NCSANS    BIT(1),         /* ON FOR ACTIVATE WITH ANS PARM   */
*     3 NCSFINAL  BIT(1),         /* FINAL PARM EXISTS               */
*     3 NCSEND    BIT(1),         /* END PARM EXISTS                 */
*   2 NCSPLFL4    CHAR(1),        /* FLAG BYTE                       */
*     3 NCSDLNID  BIT(1),         /* ID PRESENT IN NCSPL - OFF       */
*     3 NCSPLRSO  BIT(1),         /* RESET ONLY                      */
*     3 NCSPLVID  BIT(1),         /* ORIG CMD WAS MODIFY DUMP        */
*     3 NCSDSPE   BIT(1),         /* DISPLAY EVERY                   */
*     3 NCSDSPA   BIT(1),         /* DISPLAY ACT                     */
*     3 NCSDSPI   BIT(1),         /* DISPLAY INACT                   */
*     3 NCSDSPN   BIT(1),         /* DISPLAY NONE                    */
*     3 NCSPL2AP  BIT(1),         /* SECOND ACTPU TO 320X            */
*   2 NCSDLRSN    CHAR(1),        /* DIAL REASON CODES               */
*   2 NCSPLFL5    CHAR(1),        /* FLAG BYTE                       */
*     3 NCSSCPPS  BIT(1),         /* SSCP WORK AREA IN PVT STORAGE   */
*     3 NCSSDLK   BIT(1),         /* ON-SDLC LINK PROCESSED          */
*     3 *         BIT(6),         /* RESERVED                        */
*   2 NCSPLOLN    FIXED(15),      /* LENGTH O/B RU                   */
*   2 NCSPLP1     PTR(31),        /* ADDR VARY PAB                   */
*   2 NCSPLP2     PTR(31),        /* ADDR D/L/R PAB                  */
*   2 NCSPLP3     PTR(31),        /* ADDR ERP PAB                    */
*   2 NCSPLSPL    PTR(31),        /* ADDR ASSOC. NCSPL               */
*   2 NCSPLWEL    PTR(31),        /* ADDR POST RPH                   */
*   2 NCSPLRRP    PTR(31),        /* ADDR REMOTE RN RDTE IN LOCAL RDT*/
*   2 NCSPLRUO    PTR(31),        /* ADDR O/B RU                     */
*   2 NCSPLRUI    PTR(31),        /* ADDR BUFFER FOR I/B RU          */
*   2 NCSPLAPP    PTR(31),        /* ADDR NCSPL APPENDAGE            */
*   2 NCSRNAME    CHAR(8),        /* RNAME=FROM VARY ACTIVATE        */
*   2 NCSPLSQN    FIXED(15),      /* SEQUENCE=NR. FOR RESPONSE       */
*   2 NCSPLGID    BIT(8),         /* BINARY REP OF GID VALUE         */
*   2 NCSPLPID    BIT(8),         /* BINARY REP OF PID VALUE         */
*   2 NCSPLMID    CHAR(8),        /* LOGMODE = 'MODENAME'            */
*   2 NCSPLNSN    PTR(31),        /* RDTE NSNEA AT CLSDST            */
*   2 NCSSENSE    CHAR(4),        /* SENSE                           */
*     3 NCSSNS1  CHAR(1),         /* SENSE DATA MAJOR CODE           */
*     3 NCSSNS2  CHAR(1),         /* SENSE MODIFIER BYTE             */
*     3 NCSSENS2 CHAR(2),         /* USER SENSE DATA                 */
*   2 NCSCPWPT    PTR(31),        /* ADDRESS OF CPWA                 */
*   2 NCSMGLPT    PTR(31),        /* PTR TO USS/FSS MSG PARAM LIST   */
*   2 NCSUFMCB    PTR(31),        /* POINTER TO SSCP-LU FMCB         */
*   2 NCSPLRH     CHAR(3),        /* REQUEST RH                      */
*   2 NCSPLRTY    CHAR(1),        /* TYPE FROM RTGOH RU              */
*   2 NCSCRDTE    PTR(31),        /* PTR TO RDTE BEING PROCESSED     */
*                                 /* FOR C/R I/O                     */
*   2 NCSCRMSK,                   /* FLAGS FOR C/R CHECK POINTING    */
*     3 NCSCHKPT    CHAR(2),      /* FLAGS FOR ITEMS CHECK POINTED   */
*       4 NCSACTV     BIT(1),     /* ACTICE/INACTIVE STATUS CHANGED  */
*                                 /* 1 = YES                         */
*       4 NCSPACTV    BIT(1),     /* PORT ACT/INACTIVE STATUS CHANGED*/
*                                 /* 1 = YES                         */
*       4 NCSPOLD     BIT(1),     /* POLL DELAY VALUE CHANGED, 1=YES */
*       4 NCSNRPL     BIT(1),     /* NEGATIVE RESPONSE TO POLL       */
*                                 /* LIMIT VALUE CHANGED, 1 = YES    */
*       4 NCSESLM     BIT(1),     /* SESSION LIMIT VALUE CHANGED,1=YES*
*       4 NCSDTRLM    BIT(1),     /* DEVICE TRANSMISSION LIMIT       */
*                                 /* VALUE CHANGED, 1 = YES          */
*       4 NCSLGAPL    BIT(1),     /* APPLICATION CONTROLLER NAME     */
*                                 /* (LOGAPPL) CHANGED, 1 = YES      */
*       4 NCSLGMOD    BIT(1),     /* LOGON MODE (LOGMODE)            */
*                                 /* CHANGED, 1 = YES                */
*       4 NCSANSMD    BIT(1),     /* ANSWER MODE STATUS CHANGED,1=YES*/
*       4 NCSCUA      BIT(1),     /* CUA VALUE CHANGED, 1 = YES      */
*       4 NCSRNME     BIT(1),     /* RNAME VALUE CHANGED, 1 = YES    */
*       4 NCSPTUSE    BIT(1),     /* PATH USE/NOUSE STATUS CHANGED   */
*                                 /* 1 = YES                         */
*       4 NCSRSVD1    BIT(4),     /* RESERVED                        */
*     3 NCSCRMOD    CHAR(1),      /* NEW VALUES FOR ITEMS CHECKPOINTED*
*                                 /* NOT OBTAINED FROM RDTE          */
*       4 NCSAIMOD    BIT(1),     /* ACTIVE/INACTIVE STATUS, 1=ACTIVE*/
*       4 NCSPTMOD    BIT(1),     /* PORT ACT/INACT STATUS, 1=ACTIVE */
*       4 NCSRSVD2    BIT(6),     /* RESERVED                        */
*   2 NCSPLSID BDY(BYTE),         /* MESSAGE ROUTING INFORMATION     */
*     3 NCSPLSTA    CHAR(1),      /* STATUS FLAG BYTE                */
*       4 NCSPLPO     BIT(1),     /* 0 = CONSOLE ID FOLLOWS, 1 =     */
*                                 /* PROGRAM OPERATOR HEADER FOLLOWS */
*       4 NCSRSVD4    BIT(7),     /* RESERVED                        */
*     3 NCSPLPHD CHAR(LENGTH(ISTPOHD)), /* PO HEADER IF NCSPLPO = 01 */
*       4 NCSPLNID    FIXED(8),   /* CONSOLE ID IF NCSPLPO = 0       */
*     3 NCSPLPDB    PTR(31);      /* PTR TO PO ACDEB PREFIX          */
*/*   COMMAND VALUES FOR C/R FIELD NCSCRCMD                          */
*DCL NCSCRWR  FIXED(8) CONSTANT(0);  /* WRITE TO C/R DATA SET        */
*DCL NCSCROPN FIXED(8) CONSTANT(1);  /* OPEN C/R DATA SET            */
*DCL NCSCRCLS FIXED(8) CONSTANT(2);  /* CLOSE C/R DATA SET           */
*DCL NCSCRDEL FIXED(8) CONSTANT(3);  /* DELETE C/R DATA SET RECORD   */
*DCL NCSCROPQ FIXED(8) CONSTANT(4);  /* OPERATOR QUERY               */
*DCL NCSDCID  FIXED(8) CONSTANT(1);  /* CONSOLE ID INDICATOR         */
*DCL NCSCRIO  BIT(16) CONSTANT('0800'X); /* INDICATES REQUESTS       */
*                                        /* FOR VSAM I/O FOR C/R     */
*DCL NCSCRVIO BIT(16) CONSTANT('0C00'X); /* VSAM I/O OPERATION       */
*/* NCSPL APPENDAGE DEFINATION                                       */
*DCL  1  NCSAPP BASED(NCSPLAPP),                                   0163
*        2 NCSAPSA  CHAR(72),     /* SAVE AREA                       */
*        2 NCSAPECB CHAR(4),      /* ECB                             */
*        2 NCSAPTXT CHAR(8),      /* DUMP DATA                       */
*        2 NCSAPEND PTR(31),      /* HIGH STORAGE ADDRESS            */
*        2 NCSAPBUE CHAR(520),                                     0163
*          3 NCSRSV04 CHAR(3),    /* RESERVED                        */
*          3 NCSAPRU  CHAR(5),    /* IPL CMD RU PREFIX               */
*          3 NCSAPDAT CHAR(512),  /* RESP FOR DUMP, O/B LOAD         */
*        2 NCSAPPAB PTR(31);      /* BNN VARY PAB ADDR               */
*/*    USS/FSS RU AREA MAP                                           */
*DCL  1  NCSUSSRU BASED(NCSPLFSB),                                 0164
*        2 NCSRULEN FIXED(15),    /* LENGTH OF RU                    */
*        2 NCSRUITS CHAR(*);      /* START OF RU                     */
*/*    GENERAL CONSTANTS                                             */
*DCL NCSWASZ  FIXED(15) CONSTANT(2032);   /* NCSPL WORK AREA SIZE    */
*DCL NCSRTGOH BIT(16) CONSTANT('1000'X);  /* VBF VALUE FOR INTERNAL  */
*                                         /* COMMAND-RTGOH RECVD.    */
*/*    CONSTANTS FOR VERB CODES                                      */
*DCL NCSPLVC0 BIT(08) CONSTANT('00'X);    /* ERROR                   */
*DCL NCSPLVC1 BIT(08) CONSTANT('01'X);    /* VARY                    */
*DCL NCSPLVC2 BIT(08) CONSTANT('02'X);    /* MODIFY                  */
*DCL NCSPLVC3 BIT(08) CONSTANT('03'X);    /* ERP                     */
*DCL NCSPLVC4 BIT(08) CONSTANT('04'X);    /* DISPLAY                 */
*DCL NCSPLVC5 BIT(08) CONSTANT('05'X);    /* STATUS TO SM            */
*DCL NCSPLVC6 BIT(08) CONSTANT('06'X);    /* INTERNAL CMD            */
*DCL NCSPLVC7 BIT(08) CONSTANT('07'X);    /* INIT/TERM TUSM          */
*DCL NCSPLVC8 BIT(08) CONSTANT('08'X);    /* DIAL                    */
*/*    CONSTANTS FOR VARY COMMAND MODIFIERS                          */
*DCL NCSVACT BIT(16) CONSTANT('0001'X);   /*ACTIVATE                 */
*DCL NCSVDEA BIT(16) CONSTANT('0002'X);   /* DEACTIVATE              */
*DCL NCSVLON BIT(16) CONSTANT('0004'X);   /* LOGON                   */
*DCL NCSVVPP BIT(16) CONSTANT('0080'X);   /* VARY NORMAL CLEANUP REQST*
*DCL NCSVIMM BIT(16) CONSTANT('0010'X);   /* IMMEDIATE               */
*DCL NCSVINT BIT(16) CONSTANT('0020'X);   /* INTERNAL ONLY           */
*DCL NCSVALO BIT(16) CONSTANT('0005'X);   /* ACTIVATE WITH LOGON     */
*DCL NCSVDEI BIT(16) CONSTANT('0012'X);   /* DEACTIVATE IMMEDIATE    */
*DCL NCSVDII BIT(16) CONSTANT('0032'X);   /* DEACTIV. IMMEDIATE INTERNA
*                                            ONLY*/                0184
*DCL NCSCNOTF BIT(16) CONSTANT('FFF8'X);  /* NOTIFY REQUEST          */
*DCL NCSVANON BIT(16) CONSTANT('0008'X);  /* ANSWER = ON             */
*DCL NCSVANOF BIT(16) CONSTANT('0040'X);  /* ANSWER = OFF            */
*DCL NCSVPUSE BIT(16) CONSTANT('0100'X);  /* PATH = USABLE           */
*DCL NCSVPNUS BIT(16) CONSTANT('0200'X);  /* PATH = NOT USABLE       */
*DCL NCSVINOP BIT(16) CONSTANT('0400'X);  /* INOPERATIVE             */
*/*    CONSTANTS FOR MODIFY COMMAND MODIFIERS                        */
*DCL NCSMDUM BIT(16) CONSTANT('0001'X);   /* DUMP 3705               */
*DCL NCSMCHA BIT(16) CONSTANT('0004'X);   /* CHANGE                  */
*DCL NCSMNSY BIT(16) CONSTANT('0008'X);   /* NETSOL = YES            */
*DCL NCSMNSN BIT(16) CONSTANT('0010'X);   /* NETSOL = NO             */
*DCL NCSMTRY BIT(16) CONSTANT('0020'X);   /* TRACE = YES             */
*DCL NCSMVTRY BIT(16) CONSTANT('1020'X);                           0196
*DCL NCSMVTRN BIT(16) CONSTANT('1040'X);                           0197
*DCL NCSMTRN BIT(16) CONSTANT('0040'X);   /* TRACE = NO              */
*DCL NCSMTPR BIT(16) CONSTANT('0100'X);   /* TRACE PRINT             */
*DCL NCSMTST BIT(16) CONSTANT('0080'X);   /* MODIFY TEST             */
*DCL NCSDPF   BIT(16) CONSTANT('0000'X);  /* POTENTIAL FAIL          */
*DCL NCSDSTRT BIT(16) CONSTANT('0001'X);  /* DIAL START              */
*DCL NCSDOH1  BIT(16) CONSTANT('0002'X);  /* OFFHOOK 1               */
*DCL NCSDOH2  BIT(16) CONSTANT('0004'X);  /* OFFHOOK 2               */
*DCL NCSDDF   BIT(16) CONSTANT('0010'X);  /* DIAL FAILED             */
*DCL NCSDLKS  BIT(16) CONSTANT('0008'X);  /* LINK START              */
*DCL NCSDLKC  BIT(16) CONSTANT('0020'X);  /* LINK COMPLETION         */
*DCL NCSDHU   BIT(16) CONSTANT('0040'X);  /* HANGUP                  */
*DCL NCSDLK   BIT(16) CONSTANT('0080'X);  /* DEALLOCATE              */
*DCL NCSDGIVE BIT(16) CONSTANT('0100'X);  /* GIVE                    */
*DCL NCSDINOP BIT(16) CONSTANT('0200'X);  /* INOP                    */
*DCL NCSDLRST BIT(16) CONSTANT('0400'X);  /* RECOVERY SW LINKS       */
*                                         /* AFTER RN FAILURE        */
*/*    CONSTANTS FOR ERP COMMAND MODIFIERS                           */
*DCL NCSEERRA BIT(16) CONSTANT('0001'X);  /* ERP REQUEST          */
*DCL NCSECLOR BIT(16) CONSTANT('0002'X);  /* VARY NORMAL CLOSE REQUEST*
*DCL NCSEDACT BIT(16) CONSTANT('0004'X);  /* ERP DEACTIVATE REQUEST   *
*DCL NCSERSTR BIT(16) CONSTANT('0008'X);/* RSTRT ENTRY FROM DLR PROC */
*/*   PURGE MINOR RETURN CODES CONSTANTS                             */
*DCL NCSAPABN BIT(8) CONSTANT('05'X),    /* APPLICATION ABEND        */
*    NCSCLDST BIT(8) CONSTANT('06'X),    /* CLOSE DEST OCCURED       */
*    NCSDDISC BIT(8) CONSTANT('08'X),    /* DIAL DISCONNECT OCCURED
*                                           - CONN NO LONGER AVAILABL*/
*    NCSBTHEX BIT(8) CONSTANT('09'X);    /* BUFFER THRESHOLD EXCEEDED*/
*/*   I/O OR RESTART RETURN CODES CONSTANTS                          */
*DCL NCSIOSUC BIT(8) CONSTANT('00'X),    /* I/O SUCCESSFUL           */
*    NCSIOERR BIT(8) CONSTANT('04'X),    /* I/O ERROR                */
*    NCSIOPRG BIT(8) CONSTANT('08'X),    /* I/O PURGED               */
*    NCSRSSUC BIT(8) CONSTANT('00'X),    /* RESTART SUCCESSFUL       */
*    NCSRSERR BIT(8) CONSTANT('04'X),    /* RESTART ERROR            */
*    NCSVAIPL BIT(8) CONSTANT('00'X),  /* IPL NO RESTART ON VARY ACTV*/
*    NCSVANRA BIT(8) CONSTANT('10'X),    /* IPL SUCCESSFUL, NO RESTART
*                                           AVAILABLE ON VARY ACTIVE  *
*    NCSVAWMF BIT(8) CONSTANT('08'X),    /* WARM START FAILURE FOR 0218
*                                           VARY ACTIVATE            */
*    NCSVAIPF BIT(8) CONSTANT('0C'X),   /* IPL FAILED ON VARY ACTIVATE*
*    NCSDSIA  BIT(8) CONSTANT('14'X),   /* INVALID ADDRESS SPECIFIED
*                                          ON DISPLAY STORAGE CMND    *
*    NCSVAISZ BIT(8) CONSTANT('08'X),   /* NCP SIZE TOO LARGE         *
*    NCSIPLSC BIT(8) CONSTANT('00'X),   /* IPL SUCCESSFUL             *
*    NCSIOER  BIT(8) CONSTANT('0C'X),   /* I/O ERROR ON REMOTE IPL    *
*    NCSNCPAC BIT(8) CONSTANT('04'X),   /* REMOTE NCP ALREADY ACTIVE  *
*    NCSNCRPF BIT(8) CONSTANT('70'X),   /* REMOTE POWER OFF           *
*    NCSCRIOS BIT(8) CONSTANT('30'X),   /* SUCCESSFUL I/O             *
*    NCSCRION BIT(8) CONSTANT('34'X),   /* NULL D.S. OPENED           *
*    NCSCRIOF BIT(8) CONSTANT('38'X);   /* FAILURE ON I/O             *
*/*           CONSTANTS FOR LIBERTY SUPPORT                           *
*DCL  NCSES   BIT(16) CONSTANT('0001'X),/* END SESSION                *
*     NCSBF   BIT(16) CONSTANT('0002'X),/* BIND FAILURE               *
*     NCSUF   BIT(16) CONSTANT('0004'X),/* UNBIND FAILURE             *
*     NCSINIT BIT(16) CONSTANT('0001'X),                           0219
*     NCSTERM BIT(16) CONSTANT('0002'X);                           0219
*DCL NCSTPPST BIT(16) CONSTANT('0001'X);/* TPPST COMMAND              *
*DCL NCSII    BIT(16) CONSTANT('0002'X);/* IPL INIT COMMAND           *
*DCL NCSIT    BIT(16) CONSTANT('0004'X);/* IPL COMMAND                *
*DCL NCSIF    BIT(16) CONSTANT('0008'X);/* IPL FINAL COMMAND          *
*DCL NCSDI    BIT(16) CONSTANT('0010'X);/* DUMP INIT COMMAND          *
*DCL NCSDT    BIT(16) CONSTANT('0020'X);/* DUMP TEXT COMMAND          *
*DCL NCSDF    BIT(16) CONSTANT('0040'X);/* DUMP FINAL COMMAND         *
*DCL NCSCON   BIT(16) CONSTANT('0080'X);/* CONTACT COMMAND            *
*DCL NCSDICON BIT(16) CONSTANT('0100'X);/* DISCONTACT COMMAND         *
*DCL NCSMSFMD BIT(16) CONSTANT('0200'X);/* SEND FMD                   *
*DCL NCSSEND  BIT(16) CONSTANT('0400'X);/* SEND                       *
*DCL NCSPURGE BIT(16) CONSTANT('0800'X);/* PAB PURGE                  *
*DCL NCSMSSUP BIT(16) CONSTANT('2000'X);/* CONSTANT FOR MSG SUP       *
*DCL NCSCRDS  BIT(16) CONSTANT('3023'X);/* RECORD DEV STATS COMMAND   *
*DCL NCSCQUIS BIT(16) CONSTANT('F01A'X);/* QUIESCE COMMAND            *
*DCL NCSSNUSS BIT(16) CONSTANT('381F'X);/* SEND USS MESSAGE           *
*/*                                                                   *
*DCL NCSNC    BIT(8)  CONSTANT('04'X);  /* NOT CONTACTED              *
*DCL NCSLD    BIT(8)  CONSTANT('00'X);  /* CONTACTED LOADED           *
*DCL NCSNLD   BIT(8)  CONSTANT('0C'X);  /* CONTACTED NEEDS LOAD       *
*DCL NCSNCD   BIT(8)  CONSTANT('08'X);  /* NOT CONTACTED DUE TO DEACT *
*DCL NCSNCE   BIT(8)  CONSTANT('10'X);  /* NOT CONTACTED DUE TO ERP   *
*DCL NCSNFME  BIT(8)  CONSTANT('24'X);  /* NEGATIVE FME               *
*/*  CONSTANTS FOR IORC FOR DISPLAY STORAGE                          */
*DCL NCSDSDEA BIT(8)  CONSTANT('0C'X);  /* PRIOR DEACT                *
*DCL NCSDSFAL BIT(8)  CONSTANT('04'X);  /* FAIL OTHER THAN PRIOR DEACT*
*/* TYPE CODES FOR CONFIGURATION RESTART                              *
*DCL NCSCTRLM BIT(8) CONSTANT('01'X);   /* CHANGE DEV TRANS LIMIT     *
*DCL NCSCNPOL BIT(8) CONSTANT('02'X);   /* CHANGE NEG POLL RESP LIMIT *
*DCL NCSCSESS BIT(8) CONSTANT('03'X);   /* CHANGE SESSION LIMIT       *
*DCL NCSCPOLL BIT(8) CONSTANT('04'X);   /* CHANGE LINE SERV SEEK PAUSE*
*/*  FM DATA COMMAND CODES                                            *
*DCL NCSCAPU  BIT(16) CONSTANT('D001'X);   /* ACT PHYS                *
*DCL NCSCDPU  BIT(16) CONSTANT('D002'X);   /* DEACT PHYS              *
*DCL NCSCALU  BIT(16) CONSTANT('D003'X);   /* ACT LOG                 *
*DCL NCSCDLU  BIT(16) CONSTANT('D004'X);   /* DEACT LOG               *
*DCL NCSCSDT  BIT(16) CONSTANT('D005'X);   /* SDT                     *
*DCL NCSCFME  BIT(16) CONSTANT('2006'X);   /* SEND POS RESP           *
*DCL NCSCEXCP BIT(16) CONSTANT('2007'X);   /* SEND NEG RESP           *
*DCL NCSCCON  BIT(16) CONSTANT('3008'X);   /* CONTACT                 *
*DCL NCSCDCON BIT(16) CONSTANT('3009'X);   /* DISCONTACT              *
*DCL NCSCIPLI BIT(16) CONSTANT('300A'X);   /* IPL INIT                *
*DCL NCSCIPLT BIT(16) CONSTANT('300B'X);   /* IPL                     *
*DCL NCSCIPLF BIT(16) CONSTANT('300C'X);   /* IPL FINAL               *
*DCL NCSCDUMI BIT(16) CONSTANT('300D'X);   /* DUMP INIT               *
*DCL NCSCDUMP BIT(16) CONSTANT('300E'X);   /* DUMP                    *
*DCL NCSCDUMF BIT(16) CONSTANT('300F'X);   /* DUMP FINAL              *
*DCL NCSCACTL BIT(16) CONSTANT('3010'X);   /* ACT LINK                *
*DCL NCSCDACL BIT(16) CONSTANT('3011'X);   /* DEACT LINK              *
*DCL NCSCSSV  BIT(16) CONSTANT('3012'X);   /* SET STATE VECTOR        *
*DCL NCSCNSP  BIT(16) CONSTANT('3013'X);   /* NS PROC ERROR           *
*DCL NCSCSTD  BIT(16) CONSTANT('3019'X);   /* SET TIME & DATE         *
*DCL NCSCSEP  BIT(16) CONSTANT('9014'X);   /* SWITCH TO EP            *
*DCL NCSCSNC  BIT(16) CONSTANT('9015'X);   /* SWITCH TO NCP           *
*DCL NCSCLSD  BIT(16) CONSTANT('3016'X);   /* LINE SCHED PARM         *
*DCL NCSCDS   BIT(16) CONSTANT('3017'X);   /* DISPLAY STORAGE         *
*DCL NCSCPWO  BIT(16) CONSTANT('3018'X);   /* REMOTE POWER OFF        *
*DCL NCSSNFMD BIT(16) CONSTANT('301C'X);   /* SEND FMD                *
*DCL NCSCDIAL BIT(16) CONSTANT('301A'X);   /* DIAL                    *
*DCL NCSCADIL BIT(16) CONSTANT('301B'X);   /* ABANDON DIAL            *
*DCL NCSCEANS BIT(16) CONSTANT('301D'X);   /* ENABLE ANS MODE         *
*DCL NCSCAANS BIT(16) CONSTANT('301E'X);   /* ABANDON ANS MODE        *
*DCL NCSCANA  BIT(16) CONSTANT('301F'X);   /* ASSIGN NET ADDRESS      *
*DCL NCSCFNA  BIT(16) CONSTANT('3020'X);   /* FREE NET ADDRESS        *
*DCL NCSCACON BIT(16) CONSTANT('3021'X);   /* ABANDON CONNECTION      *
*DCL NCSCSCV  BIT(16) CONSTANT('3022'X);   /* SET CONTROL VECTOR      *
*DCL NCSNCPPG BIT(16) CONSTANT('FFFF'X);   /* PURGE                   *
*/* NEW VALUES FOR NCSPLCMD   */                                   0283
*DCL NCSCLCND BIT(16) CONSTANT('0041'X);  /* LOAD CONDITIONALLY  */
*DCL NCSCUCND BIT(16) CONSTANT('0042'X); /* LOAD UNCONDITIONALLY */
*DCL NCSCRSRT BIT(16) CONSTANT('0043'X); /* RESTART 370X OR CLUS  */
*DCL NCSDUCMD BIT(16) CONSTANT('0044'X); /* DUMP 370X  */          0286
*DCL NCSCERPP BIT(16) CONSTANT('0045'X); /* PERFORM ERP DUMP AND   0287
*                                           RELOAD OF 370X  */     0287
*DCL NCSDOUT  BIT(16) CONSTANT('0046'X); /* DIAL OUT                 */
*DCL NCSDCNT  BIT(16) CONSTANT('0047'X); /* DIAL CONTACT             */
*DCL NCSDABDN BIT(16) CONSTANT('0048'X); /* DIAL ABANDON             */
*DCL NCSDENAS BIT(16) CONSTANT('0049'X); /* DIAL ENABLE ANSWER       */
*/*  VALUES FOR NCSCMDB                                              */
*DCL NCSBFME BIT(8) CONSTANT('06'X);     /* SEND POS RESP COMMAND    */
*DCL NCSBEXC BIT(8) CONSTANT('07'X);     /* SEND NEG RESP COMMAND    */
*/*  CONSTANTS FOR DIAL REASON CODES                                 */
*DCL NCSDLRRD BIT(8) CONSTANT('01'X);    /* REDIAL                   */
*DCL NCSDLRQT BIT(8) CONSTANT('02'X);    /* QUIT                     */
*/* NEW VALUES FOR NCSIORC   */                                    0296
*DCL NCSLDAOK BIT(8) CONSTANT('00'X);  /* COMMAND PROCESSED SUCESS */
*DCL NCSLDACT BIT(8) CONSTANT('04'X);  /* NCP ACTIVE-LOAD NOT PERF */
*DCL NCSLDCAN BIT(8) CONSTANT('04'X);  /* RELOAD DECLINED BY OPER  */
*DCL NCSLDIOP BIT(8) CONSTANT('08'X);  /* I/O PURGED               */
*DCL NCSLDNOG BIT(8) CONSTANT('0C'X);  /* COMMAND FAILED           */
*DCL NCSDUCOM BIT(8) CONSTANT('14'X);  /* DUMP COMPLETE            */
*DCL NCSHALTD BIT(8) CONSTANT('18'X);  /* CMD REJECTED,HALT IN PROG*/
*DCL NCSUNREC BIT(8) CONSTANT('1C'X);  /* COMMAND UNRECOGNIZED     */
*DCL NCSNOSTG BIT(8) CONSTANT('20'X);  /* CMD REJ,INSUFF STORAGE   */
*DCL NCSDOS   BIT(8) CONSTANT('00'X);  /* DIAL-OUT SUCCESSFUL      */
*DCL NCSDOF   BIT(8) CONSTANT('04'X);  /* DIAL-OUT UNSUCCESSFUL    */
*DCL NCSDOP   BIT(8) CONSTANT('08'X);  /* DIAL-OUT PENDING         */
*DCL NCSDCS   BIT(8) CONSTANT('00'X);  /* DIAL-CONTACT LOADED      */
*DCL NCSDCF   BIT(8) CONSTANT('0C'X);  /* DIAL-CONTACT FAILED      */
*DCL NCSDAS   BIT(8) CONSTANT('00'X);  /* DIAL-ABANDON CONN COMPLETE*/
*DCL NCSDENSO BIT(8) CONSTANT('00'X);  /* ENABLE ANSWER SUCCESSFUL  */
*DCL NCSDOFHR BIT(8) CONSTANT('04'X);  /* OFFHOOK REQUIRED          */
*DCL NCSDENSF BIT(8) CONSTANT('08'X);  /* ENABLE ANSWER FAIL        */
*/*  NEW VALUES FOR NCSPRMRC    */                                 0314
*DCL NCSFIRM  BIT(8) CONSTANT('10'X);  /* RESTART SUCC,OPENDST REQ */
*DCL NCSEWRN  BIT(8) CONSTANT('11'X);  /* CON LOST,RECOV IN  PROG  */
*/* CONSTANTS FOR TRACE                                            */
*DCL NCSACTLT BIT(16) CONSTANT('0820'X); /* ACTIVATE LINE TRACE    */
*DCL NCSDACLT BIT(16) CONSTANT('0840'X); /* DEACTIVATE LINE TRACE  */
*DCL NCSCACLT BIT(16) CONSTANT('301D'X); /* SSCP ACT LINE TRACE    */
*DCL NCSCDCLT BIT(16) CONSTANT('301E'X); /* SSCP DEACT LINE TRACE  */
*/* DISPLAY COMMAND MODIFIER CONSTANTS                             */
*DCL NCSDPATH BIT(16) CONSTANT('0001'X); /* PATHS                  */
*/* PROCESS ANCHOR BLOCK                                              *
*/*  INITIAL LEVEL                                     001 01/16/75  */
*DCL  1  ISTPAB BDY(DWORD) BASED,                                  0321
*       2  PABWQCHN CHAR(8) BDY(DWORD), /* CPS SWAP FIELD FOR NEQ&CHN *
*        3  PABWEQA PTR(31) BDY(WORD), /* WORK ELEMENT QUEUE ADDRESS  *
*           4  PABWEQG BIT(1),         /* GATING BIT                  *
*           4  PABRSV01 BIT(7),        /* RESERVED                    *
*           4  PABWEQP PTR(24),        /* WKEL PTR                    *
*        3  PABCHAIN PTR(31) BDY(WORD), /* APS CHAIN                  *
*           4  PABCHNG BIT(1),         /* GATING BIT                  *
*           4  PABRESCH BIT(1),        /* RESCHEDULE PAB AT        0321
*                                         TPEXIT                      *
*           4  PABCDP BIT(1),          /* CLOSE DST/CHANGE IN PROGRESS*
*           4  PABUNCON BIT(1),        /* UNCONDITIONALLY RESCHEDULE
*                                         PAB AT TPEXIT               *
*           4  PABRESET BIT(1),        /* RESET ISSUED ON THIS PAB    *
*           4  PABRUNNG BIT(1),        /* PAB RUNNING                 *
*           4  PABRSV02 BIT(2),        /* RESERVED                    *
*           4  PABCHNGP PTR(24),       /* PSS CHAIN PTR               *
*        2  PABOFFST PTR(8),           /* OFFSET FROM CONTROL BLOCK   *
*        2  PABDVTA PTR(24),           /* DVT ADDRESS                 *
*        2  PABRPHFG PTR(31),          /* SCHED FLAGS AND RPH         *
*           3  PABFLAGS BIT(8),        /* SCHEDULING FLAGS            *
*              4  PABAPYP BIT(1),      /* APPLICATION IS A USER EXIT  *
*              4  PABPRIOR BIT(1),     /* IMMEDIATE PRIORITY          *
*              4  PABNORPR BIT(1),     /* NORMAL PRIORITY -           *
*                                      /* RESCHEDUALABLE              *
*              4  PABDYNAM BIT(1),     /* DYNAMIC                     *
*              4  PABSSN BIT(1),       /* SYSTEM SERVICES             *
*              4  PABERLCK BIT(1),     /* PAB ERROR LOCK FLAG         *
*                 5  PABERRLK BIT(1),  /* ERROR LOCK                  *
*                    6  PABERLOK BIT(1), /* ERROR LOCK                *
*/*    ABNORMAL TO ALLOW VARY COMPARE AND SWAP                        *
*              4  PABINHBT BIT(1) ABNL,/* 1=INHIBIT TRAFFIC,0=NO      *
*              4  PABNODQ BIT(1),      /* DO NOT DEQ WORK ELEMENT     *
*           3  PABRPHA PTR(24);        /* RPL HEADER ADDRESS          *
*DCL PABWEQG0 BIT(32) CONSTANT('7FFFFFFF'X),  /* TURN PABWEQG OFF     *
*    PABWEQG1 BIT(32) CONSTANT('80000000'X),  /* TURN PABWEQG ON      *
*    PABCHNG0 BIT(32) CONSTANT('7FFFFFFF'X),  /* TURN PABCHNG OFF     *
*    PABCHNG1 BIT(32) CONSTANT('80000000'X),  /* TURN PABCHNG ON      *
*    PABRESC0 BIT(32) CONSTANT('BFFFFFFF'X),  /* TURN PABRESCH OFF    *
*    PABRESC1 BIT(32) CONSTANT('40000000'X),  /* TURN PABRESCH ON     *
*    PABCDP0  BIT(32) CONSTANT ('DFFFFFFF'X), /* TURN PABCDP OFF      *
*    PABCDP1  BIT(32) CONSTANT ('20000000'X), /* TURN PABCDP ON       *
*    PABERLK0 BIT(32) CONSTANT('FBFFFFFF'X),  /* TURN PABERRLK ON     *
*    PABERLK1 BIT(32) CONSTANT('04000000'X),  /* TURN PABERRLK OFF    *
*    PABUNCO0 BIT(32) CONSTANT('EFFFFFFF'X),  /* TURN PABUNCON OFF    *
*    PABUNCO1 BIT(32) CONSTANT('10000000'X),  /* TURN PABUNCON ON     *
*    PABPRIR0 BIT(32) CONSTANT('BFFFFFFF'X),  /* TURN PAB PRIOR OFF   *
*    PABPRIR1 BIT(32) CONSTANT('40000000'X),  /* TURN PAB PRIOR ON    *
*    PABRST0  BIT(32) CONSTANT('F7FFFFFF'X),  /* TURN PABRESET OFF    *
*    PABRST1  BIT(32) CONSTANT('08000000'X);  /* TURN PABRESET ON     *
*/* LOCKWORD FORMAT DSECT                                            */
*/*  INITIAL LEVEL                                     001 05/24/74  */
*DCL 1 ISTLOK BDY(WORD) BASED,                                     0323
*     2  LOKCT CHAR(1) BDY(WORD),       /* COUNT OF LOCK OWNERS      */
*     2  LOKCHN PTR(24),                /* ADDR OF NEXT RPH WAITING
*                                          ON LOCK                   */
*        3  LOKCHNG CHAR(3),            /* CHAIN/FLAGS               */
*           4 *        CHAR(2),                                    0323
*           4 *        BIT(8),                                     0323
*             5 *        BIT(6),                                   0323
*             5  LOKPRY BIT(1),         /* PRIORITY FLAG, 1 = ON     */
*             5  LOKXCL BIT(1);         /* EXCLUSIVE FLAG, 1 = ON    */
*DCL LOKXCL1  BIT(32) CONSTANT('00000001'X); /* CONSTANT TO TURN LOKXCL
*                                          ON                        */
*DCL LOKPRY1  BIT(32) CONSTANT('00000002'X); /* CONSTANT TO TURN LOKPRY
*                                          ON                        */
*DCL LOKCHN1  BIT(32) CONSTANT('00FFFFFC'X); /* CONSTANT TO TURN LOKXCL
*                                          AND LOKPRY OFF            */
*DCL LOKCT1   BIT(32) CONSTANT('01000000'X); /* CONSTANT TO MAKE LOKCT
*                                          = 1                       */
*DCL LOKCT255 BIT(32) CONSTANT('FF000000'X); /* CONSTANT TO CHECK FOR
*                                          MAX LOKCT (255)           */
*              /* DYNAMIC PAB 1K633 */                             0329
* /* 1K0997 JAN 20, 1973  MB   */                                  0329
* /* 1K1142 MAR 03, 1973  MB   */                                  0329
* DCL 1 ISTDYPAB BDY(DWORD) BASED, /* LEVEL 1 DECLARE 1K633 */     0329
*       2  DYPTYPE CHAR(1), /* CONTROL BLOCK TYPE CODE 1K633 */    0329
*       2  DYPLNGTH PTR(8), /* CONTROL BLOCK LENGTH (BYTES)  1K633 */
*       2 DYPFLGS CHAR(2),     /* FLAGS 1K633 */                   0329
*       2 DYPCHAIN PTR(31),    /* CHAIN POINTER 1K633 */           0329
*       2 DYPTSKID PTR(31),    /* TASKID OR PTR TO PSS TABLES 1K633 */
*       2  DYPRSV01 PTR(31),   /* RESERVED TO PRESERVE ALIGNMENT   0329
*                                                             1K0997 */
*       2 DYPPAB CHAR(LENGTH(ISTPAB)) BDY(DWORD); /* LENGTH OF 1K0997
*                                                    PAB         */
*DCL DYTYP   BIT(8) CONSTANT ('11'X);   /* TYPE           1K1142 */
*/* RPL HEADER                                                        *
*/*  REVISIONS                                         006 04/09/75   *
*DCL RPHPTR PTR(31) REGISTER(1) RESTRICTED;                        0331
*DCL  1  ISTRPH BDY(WORD) BASED(RPHPTR),                           0332
*       2  RPHTYPE CHAR(1),            /* CONTROL BLOCK TYPE          *
*       2  RPHLNGTH PTR(8),            /* LENGTH IN BYTES             *
*       2  RPHFLAGS BIT(8),            /* SYSTEM DEPENDENT FLAGS      *
*         3  RPHOGIND BIT(1),          /* OPEN GATE INDICATOR         *
*         3  RPHSPGIN BIT(1),          /* SPECIAL GATE OPEN IND.      *
*         3  RPHAPTYP BIT(1),          /* APS IS A USER EXIT          *
*            4  RPHAUTEX BIT(1),        /*EXIT TO AUTHORIZED USER VS2 *
*         3  RPHSMQ BIT(1),            /* INDICATOR IF RPH IS TO BE   *
*                                      /* QUEUED                      *
*         3  RPHSMTYP BIT(1),          /* REQUEST TYPE IS BUFFER OR   *
*                                      /* DOUBLE-WORD                 *
*         3  RPHSMCLR BIT(1),          /* INDICATOR IF BUFFER TO BE   *
*                                      /* CLEARED                     *
*           3  RPHMLTCP BIT(1),        /* USED BY LOCAL 3270  SUPPORT *
*                                      /* WHEN BUILDING MULTIPLE CHAN *
*                                      /* PROGRAM                     *
*           3  RPHFSTLC BIT(1),        /* USED BY LOCAL 3270 SUPPORT  *
*                                      /* TO INDICATE FIRST LCCW      *
*              4  RPHFNFLG BIT(1),     /* LCCW SET FUNCTION FLAGS     *
*        2  RPHFLGB BIT(8),            /* SECOND FLAG BYTE            *
*           3  RPHLOCK BIT(1),         /* LOCKING OPTION              *
*           3  RPHBSSP BIT(1),         /* SYSTEM SERVICES PROGRESS    *
*           3  RPHFBAPS BIT(1),        /* STG. OBTAINED BY APS        *
*           3  RPHPGCMP BIT(1),        /* BIT ON INDICATES RESOURCE   *
*                                      /* MGR HAS COMPLETED UNLOCK    *
*           3  RPHNRSAV BIT(1),        /* DO NOT SAVE ON ACTIVATE     *
*           3  RPHRLCRA BIT(1),        /* RPH CAN BE RELEASED         *
*                                      /* WHEN PURGE COMPLETE         *
*           3  *        BIT(2),        /* RESERVED                    *
*       2  RPHRPHA PTR(31),            /* ADDR.OF NEXT RPL HEADER     *
*         3  RPHGATE BIT(1),           /* GATING FLAG                 *
*         3  *       BIT(7),           /* RESERVED                    *
*         3  RPHRPHAP PTR(24),                                     0332
*       2  RPHTSKID PTR(31),           /* TASK IDENTIFICATION         *
*                                      /* OR ADDR.OF APS TABLE        *
*          3  *     CHAR(3),           /* RPH TSK ID                  *
*          3  RPHTIK PTR(8),           /* TIK                         *
*       2  RPHDVTA PTR(31),            /* ADDR.OF  CURRENT DVT        *
*       2  RPHRESMA PTR(31) BDY(WORD), /* TPWAIT-POST INFO */      0332
*         3 RPHWPFLG CHAR(1),          /* WAIT-POST FLAGS */       0332
*           4 RPHRSKEY BIT(4),         /* STORAGE PROTECT KEY TO RESUME
*                                         PROCESSING                  *
*           4 RPHWT BIT(1),            /* WAIT BIT */              0332
*           4 RPHPT BIT(1),            /* POST BIT */              0332
*           4 RPHPURGE BIT(1),         /* RPH FLAGGED BY RECOVERY    */
*                                      /* TO BE PURGED BY PSS        */
*                                      /* VS/2 ONLY                  */
*           4 RPHRSV01 BIT(1),        /* RESERVED                    */
*         3 RPHRESUM PTR(24),          /* RESUME ADDRESS */        0332
*       2  RPHPABOF PTR(8),            /* OFFSET OF PAB IN CONTROL BLK*
*       2  RPHMAJCB PTR(24),           /* ADDR.OF MAJOR CONTROL BLOCK *
*       2  RPHWEA PTR(31),             /* ADDR.OF WORK ELEMENT        *
*         3  RPHCSPA PTR(31),          /* ADDR OF ISTCSP              *
*           4  RPHWEGT BIT(1),         /* GATE FOR WORK ELEMENT PROC. *
*       2  RPHSRPRM PTR(31),           /* SERVICE ROUTINE PARM.FIELD  *
*         3 RPHSRP12 FIXED(15),        /* COUNT OF Q'ED SMS REQUESTS  *
*         3 RPHSRP34 FIXED(15),        /* SIZE OF Q'ED SMS REQUESTS   *
*       2  RPHCRR PTR(31),             /* ADDR.OF COMPONENT RECOVERY  *
*                                      /* RECORD                      *
*       2  RPHPABQA PTR(31),           /* PAB QUEUE ADDRESS           *
*          3 RPHPABFG CHAR(1),         /* FLAG BYTE CARRIED FROM PAB  *
*          3 RPHPABQP PTR(24),         /* POINTER TO QUEUE OF PAB'S   *
*       2  RPHWORK CHAR(64) BDY(WORD), /* 16 WORD WORK AREA           *
*         3  RPHSAVE1 FIXED(31),       /*                             *
*           4  RPHSBYTE CHAR(1),       /* 1-BYTE SAVE FIELD           *
*           4  RPHSBITS BIT(8),        /* SAVE FIELD FOR FLAG BYTE    *
*              5  RPHSBIT1 BIT(1),     /* 1ST SAVE FIELD              *
*              5  RPHSBIT2 BIT(1),     /* 2ND SAVE FIELD              *
*              5  RPHSBIT3 BIT(1),     /* 3RD SAVE FIELD              *
*              5  RPHSBIT4 BIT(1),     /* 4TH SAVE FIELD              *
*              5  RPHSBIT5 BIT(1),     /* 5TH SAVE FIELD              *
*              5  RPHSBIT6 BIT(1),     /* 6TH SAVE FIELD              *
*              5  RPHSBIT7 BIT(1),     /* 7TH SAVE FIELD              *
*              5  RPHSBIT8 BIT(1),     /* 8TH SAVE FIELD              *
*           4  RPHSHALF FIXED(15),     /* HALF WORD SAVE AREA         *
*         3  RPHSAVE2 FIXED(31),       /*                             *
*         3  RPHSAVE3 FIXED(31),       /*                             *
*         3  RPHSAVE4 FIXED(31),       /*                             *
*         3  RPHSAVE5 FIXED(31),       /*                             *
*         3  RPHSAVE6 FIXED(31),       /*                             *
*         3  RPHSAVE7 FIXED(31),       /*                             *
*         3  RPHSAVE8 FIXED(31),       /*                             *
*         3  RPHSAVE9 FIXED(31),       /*                             *
*         3  RPHSAV10 FIXED(31),       /*                             *
*         3  RPHSAV11 FIXED(31),       /*                             *
*         3  RPHSAV12 FIXED(31),       /*                             *
*         3  RPHSAV13 FIXED(31),       /*                             *
*         3  RPHSAV14 FIXED(31),       /*                             *
*         3  RPHSAV15 FIXED(31),       /*                             *
*         3  RPHSAV16 FIXED(31),       /*                             *
*       2  RPHNEXPO PTR(31);           /* ADDR.NEXT RPH TO BE POSTED  *
* DCL RPTYPE BIT(8) CONSTANT('01'X);   /* TYPE CODE FOR RPH           *
* DCL RPHWT0 BIT(32) CONSTANT('F7FFFFFF'X);   /* TURN RPHWT OFF */ 0334
* DCL RPHWT1 BIT(32) CONSTANT('08000000'X);   /* TURN RPHWT ON */  0335
* DCL RPHPT0 BIT(32) CONSTANT('FBFFFFFF'X);   /* TURN RPHPT OFF */ 0336
* DCL RPHPT1 BIT(32) CONSTANT('04000000'X);   /* TURN RPHPT ON */  0337
* DCL RPHPABQ1 BIT(24) CONSTANT('000000'X); /* TURN RPHPBQ GATE */ 0338
*/*  REVISIONS                                         011 04/25/75   *
*DCL ATCLCPTR PTR LOCATION(1032);      /* POINTER TO ATCVT            *
*DCL  1  ISTATCVT BDY(DWORD) BASED,                                0340
*        2  ATCCOM BDY(WORD),          /* SYSTEM INDEPENDENT FIELDS   *
*           3  ATCSTAT CHAR(4),        /* VTAM  STATUS INDICATORS     *
*              4  ATCSTAT1 CHAR(1),    /* VTAM  STATUS BYTE 1         *
*                 5  ATCSTART BIT(1),  /* VTAM  IS STARTING           *
*                 5  ATCACTIV BIT(1),  /* VTAM  IS ACTIVE             *
*                 5  ATCSNHLT BIT(1),  /* VTAM  SESSION HALT          *
*                 5  ATCQKHLT BIT(1),  /* VTAM  QUICK HALT            *
*                 5  ATCNETSL BIT(1),  /* NETSOL=YES SPECIFIED ON CMD *
*                 5  ATCINHLT BIT(1),  /* INTERNAL VTAM HALT QUICK    *
*                 5 * BIT(2),          /* RESERVED                    *
*              4  ATCSTFLG BIT(8),     /* STORAGE MANAGEMENT FLAGS    *
*                 5  ATCHSDMF BIT(1),  /* SYSTEM SLOW DOWN FLAG       *
*              4  ATCPOFLG BIT(8),     /* PROGRAM OPERATOR            *
*                                      /* INTERFACE FLAGS             *
*                 5 ATCPOUNS BIT(1),   /* APPLICATION AUTHORIZED TO   *
*                                      /* RECEIVE UNSOLICITED MESSAGES*
*                                      /* 1 = YES                     *
*                 5 *        BIT(7),   /* RESERVED                    *
*              4  ATCSTAT4 CHAR(1),    /* VTAM  STATUS BYTE 4         *
*                 5  ATCPRTAT BIT(1),  /* 1 = TRACE PRINT ACTIVE,  0340
*                                         0 = NOT ACTIVE              *
*                 5  ATCTPRT BIT(1),   /* WHEN 1, TPRINT IN PROCESS   *
*                 5  ATCMTST BIT(1),   /* WHEN 1, MODIFY TEST IN   0340
*                                         PROCESS                     *
*                 5  ATCNCSD BIT(1),   /* NCS QUIESCED DURING HALT    *
*                 5  ATCRSV04 BIT(4),  /* RESERVED                    *
*           3  ATCAPI PTR(31),         /* ADDR OF API ROUTINE         *
*           3  ATCDCFRR PTR(31),       /* POINTER TO FRR OF CONTROL
*                                         LAYER,INITIALIZED BY OPENDST*
*           3  ATCRDT PTR(31),         /* POINTER TO FIRST RDT        *
*           3  ATCSRT PTR(31),         /* POINTER TO SRT DIRECTORY    *
*           3  ATCASCHD PTR(31),       /* POINTER TO AP SCHEDULER     *
*           3  ATCECMOD CHAR(4),       /* ECB FOR MODIFY COMMAND PROC.*
*           3  ATCMODQ PTR(31),        /* POINTER FOR OUTPUT QUEUE    *
*                                      /* FOR MODIFY COMMAND          *
*           3  ATCECHLT CHAR(4),       /* ECB FOR HALT COMMAND        *
*           3  ATCHALTQ PTR(31),       /* POINTER TO OUTPUT QUEUE     *
*                                      /* FOR HALT COMMAND            *
*           3  ATCECVRY CHAR(4),       /* ECB FOR VARY COMMAND PROC.  *
*           3  ATCVARYQ PTR(31),       /* POINTER TO OUTPUT QUEUE     *
*                                      /* FOR VARY COMMAND            *
*           3  ATCECDSP CHAR(4),       /* ECB FOR DISPLAY COMMAND     *
*           3  ATCDSPLQ PTR(31),       /*  POINTER TO OUTPUT QUEUE    *
*                                      /* FOR DISPLAY COMMAND         *
*           3  ATCOCHA PTR(31),        /* POINTER TO OCT HEADER       *
*           3  ATCECSES CHAR(4),       /* ECB TO HALT SESSION MODE    *
*           3  ATCECVRQ CHAR(4),       /* ERP ECB FOR VARY REQ. INFO. *
*                                      /* REQUEST NOTIFICATION        *
*           3  ATCVPARM PTR(31),       /* ADDR OF VARY PARAMETERS     *
*           3  ATCECOPC CHAR(4),       /* ECB TOINDICATE OPERATOR     *
*                                      /* CONTROL PROCESSING COMPLETE *
*           3  ATCECNET CHAR(4),       /* ERP ECB FOR NETWORK         *
*                                      /* CONFIGURATION REQUEST       *
*           3  ATCECPRM PTR(31),       /* POINTER TO QAB FOR ERP'S    *
*                                      /* ECB PARAMETERS              *
*           3  ATCHLTMS PTR(31),       /* POINTER TO HALT COMMAND     *
*                                      /* OR HALT RETURN MESSAGE      *
*           3  ATCFSB PTR(31),         /* PTR TO FEEDBACK STATUS      *
*                                      /* BLOCK                       *
*           3  ATCFRSCH PTR(31),       /* POINTER TO FEEDBACK         *
*                                      /* ROUTINE SCHEDULER           *
*           3  ATCRDTH PTR(31),        /*  POINTER RDT HEADER         *
*           3  ATCACCTA PTR(31),       /* POINTER TO INSTALLATION     *
*                                      /* ACCOUNTING ROUTINE          *
*           3  ATCAUTHA PTR(31),       /* POINTER TO INSTALLATION     *
*                                      /* AUTHORISATION ROUTINE       *
*           3  ATCPTCHA PTR(31),       /* PTR TO VTAM PATCH AREA      *
*           3  ATCCONFT PTR(31),       /* POINTER TO VTAM             *
*                                      /* CONFIGURATION TABLE         *
*           3  ATCFDVT PTR(31),        /* PTR TO FIRST DVT FOR O/C    *
*           3  ATCFEPT PTR(31),        /* PTR TO FIRST EPT FOR O/C    *
*           3  ATCDVTPT PTR(31),       /* ADDR OF LOAD MOD FOR        *
*                                      /* TYPE=VTAM TRACING           *
*           3  ATCBPDA PTR(31),        /* PTR TO BUFFER POOL DIRECTORY*
*           3  ATCADD PTR(31),         /* POINTER TO ADD PROCEDURE    *
*           3  ATCREMOV PTR(31),       /* POINTER TO REMOVE PROCEDURE *
*           3  ATCIOTRC PTR(31),       /*  POINTER TO I/O TRACE       *
*                                      /* PROCEDURE                   *
*              4 ATCTHTRC PTR(31),     /* ADDR OF TH TRACE ROUTINE    *
*                5 ATCTPBUF PTR(31),   /* TPIOS BUFFER TRACE(ISTRARTP)*
*           3  ATCBFTRC PTR(31),       /* PTR TO BUFFER TRACE         *
*                                      /* PROCEDURE                   *
*           3  ATCFBRPH PTR(31),       /* ADDR OF FEEDBACK PROC RPH   *
*           3  ATCBLDLA PTR(31),       /* ADDR OF BLDL ROUTINE        *
*           3  ATCALOAD PTR(31),       /* ADDR OF ALOAD ROUTINE       *
*           3  ATCREADA PTR(31),       /* ADDR OF SOURCE READ ROUTINE *
*           3  ATCGTSTR PTR(31),       /* ADDR OF GETSTOR ROUTINE     *
*           3  ATCFRSTR PTR(31),       /* ADDR OF FREESTOR ROUTINE    *
*           3  ATCSTMA PTR(31),        /* ADDR OF SM INITIALIZATION   *
*                                      /* ROUTINE                     *
*           3  ATCACDA PTR(31),        /* ADDR OF FIRST ACDEB         *
*           3  ATCSMRQ PTR(31),        /* ADDR OF REQUEST STORAGE     *
*                                      /* ROUTINE                     *
*           3  ATCSMQU PTR(31),        /* ADDR OF QUEUE REQUEST RTNE
*                                         - DOS ONLY                  *
*           3  ATCSMRS PTR(31),        /* ADDR OF RELEASE STORAGE     *
*                                      /* ROUTINE                     *
*           3  ATCSMRC PTR(31),        /* ADDR OF RECOVER STORAGE     *
*                                      /* ROUTINE  - DOS ONLY         *
*           3  ATCSMBQ PTR(31),        /* PTR TO Q'ED REQ. SMS RTN.   *
*           3  ATCFIRA PTR(31),        /* ADDR OF FEEDBACK INITIATION *
*                                      /* RPH                         *
*           3  ATCSRTAD PTR(31),       /* PTR TO SRTADD ROUTINE       *
*           3  ATCSRTDF PTR(31),       /* PTR TO SRTDELE ROUTN        *
*           3  ATCDCC60 PTR(31),       /* PTR TO ISTDCC60 - CTL. LAYER
*                                         MOVE TO USER AREA           *
*           3  ATCDCC61 PTR(31),       /* PTR TO ISTDCC61 - CTL. LAYER
*                                         MOVE FIXED TO PAGABLE       *
*/*  BEGIN 'ANY' DVT                                                  *
*           3  ATCNERST PTR(31),       /* PTR TO ISTDCC00 - REQUEST-ST*
*           3  ATCNERCV PTR(31),       /* PTR TO ISTRCC21-RECEIVE OB  *
*           3  ATCNERNE PTR(31),      /* PTR TO ISTDCC25 - READ-ANY   *
*           3  ATCNERFN PTR(31),      /* PTR TO ISTDCC02 - REQUEST-FN *
*/*  END 'ANY' DVT                                                    *
*           3  ATCAPOST PTR(31),      /* PTR TO VTAM  POST ROUTINE    *
*           3  ATCVTMID CHAR(2),      /* HOST MAJOR NODE I.D.         *
*           3  ATCRSV11 CHAR(2),      /* RESERVED                     *
*           3 ATCRCC63 PTR(31),  /* HSKPANYQ POINTER                  *
*           3 ATCRCC26 PTR(31),  /* SEND RESPONSE POINTER             *
*           3 ATCRCC65 PTR(31),  /* SET RPL POINTER                   *
*           3  ATCNESAL PTR(31),      /* PTR TO ISTDCC24 - SOLICIT-ALL*
*           3  ATCNERAP PTR(31),       /* PTR TO ISTDCC85 - READ ANY
*                                         PURGE                       *
*           3 ATCACTRM FIXED(15),     /* COUNT OF ACTIVE TERMINALS    *
*           3 ATCCIDM BIT(16),        /* CID MASK                     *
*           3 ATCMSGSP BIT(8), /* RESERVED FOR MESAGE SURPRESSION     *
*         2 ATCMAXID PTR(8),   /* MAXIMUM NUMBER OF MAJOR NODES, 0 =
*                                 NUMBER OF ENTRIES IN THE MNT        *
*         2 ATCRSV16 CHAR(2),  /* NOT USED                            *
*         2 ATCMNT PTR(31),    /*PTR TO MAJOR NODE TABLE -SET BY SYS.
*                                DEF. REF. BY ISTSDCCB (CBDEF),    0340
*                                ISTSDCCI (CINDEXY)                   *
*         2 ATCCDADD PTR(31),  /*PTR TO CIDADD ROUTINE ISTSDCCA    0340
*                                 REF. BY CIDCTL MACRO                *
*         2 ATCCDDEL PTR(31),  /*PTR TO CIDDEL ROUTINE ISTSDCCD    0340
*                                 REF. BY CIDCTL MACRO                *
*         2 ATCCDFND PTR(31),  /*PTR TO CIDFND ROUTINE IATSDCCF    0340
*                                 REF. BY CIDCTL MACRO                *
*         2 ATCESC01 PTR(31),  /*PTR TO ESC01                         *
*         2 ATCESC02 PTR(31),  /*PTR TO ESC02                         *
*         2 ATCCSMR PTR(31),        /* PTR TO CONNECTION SERVICES     *
*                                   /*  MASTER ROUTINE                *
*           3 ATCCSMA PTR(31),      /* PTR TO CONNECTION SERVICES  0340
*                                      MASTER ROUTINE                 *
*         2 ATCOCRT PTR(31),        /* PTR TO OPEN/CLOSE ROUTINE      *
*         2 ATCUEP  PTR(31),        /* POINTER TO USER EXIT           *
*         2 ATCSHRTN CHAR(8),       /* NAME OF VTAM  SHARED RTN       *
*                                   /*  TO BE LOADED                  *
*         2 ATCSHRFG BIT(8),        /* ATTRIBUTE FLAGS                *
*           3 ATCLAST BIT(1),       /* INDICATE HTIS IS LAST MODULE   *
*         2 ATCXRANG CHAR(1),       /* NUMBER OT BITS IN X-VALUE   0340
*                                       PORTION   OF CID              *
*         2 ATCSAF   CHAR(2),       /* SUB AREA ADDRESS FIELD         *
*         2 ATCEPA PTR(31),         /* ENTRY POINT ADDR OF LOADED     *
*         2 ATCALERT PTR(31),       /* POINTER TO ALERT-ROUTINE    0340
*                                      ISTSDCAL                       *
*         2 ATCDVLOD PTR(31),       /* PTR TO ISTSDCOD                *
*         2 ATCTRCPT PTR(31),       /* POINTER TO TRACE PARM LIST     *
*         2 ATCDVT   PTR(31),       /* POINTER TO FIRST DVT ON CHAIN  *
*         2 ATCEPT   PTR(31),       /* POINTER TO FIRST EPT ON CHAIN  *
*         2 ATCMSGP PTR(31),        /* POINTER TO TPMSG PROCESSOR     *
*         2 ATCMSGM PTR(31),        /* POINTER TO TPMSG - MESSAGE  0340
*                                      CSECT                          *
*         2 ATCTRPAB  PTR(31),      /* ADDRESS OF TRACE WRITER PAB    *
*         2 ATCVTLOD PTR(31),       /* ADDR OF VTAM LOAD LIST         *
*         2 ATCECPRT CHAR(4),       /* ECB FOR TRACE FILE PRINT       *
*         2 ATCZDVTB PTR(31),       /* ADDRESS OF ISTZCFBI            *
*         2 ATCECTLP CHAR(4),       /* TOLTEP ECB                     *
*         2 ATCRVCHS CHAR(8),       /* RESERVED                       *
*         2 ATCCRME  PTR(31),       /* VARY PSS CONTROL MECHANISM     *
*         2 ATCHPGM,                /* BUFFER INFORMATION            */
*           3 ATCHBFNO FIXED(15),   /* NUMBER OF BUFFS FOR CHANNEL   */
*           3 ATCHBSIZ FIXED(15),   /* BUFFER SIZE IN BYTES          */
*         2 ATCDEBCH PTR(31),       /* CLOSE DEB CHAIN PTR           */
*         2 ATCTODVT PTR(31),       /* THE TOLTEP DVT PTR POINTED  0340
*                                      TO BY 3RD WORD OF PAB         */
*         2 ATCADEL  PTR(31),       /* A DELETE ROUTINE ADDRESS      */
*         2 ATCCDPTR PTR(31),       /* PTR TO ISTOCCCD - DOS ONLY    */
*         2 ATCLDNCS PTR(31),       /* PTR TO NCSPL FOR LOAD/DUMP    */
*         2 ATCLDECB BIT(32),       /* ECB FOR LOAD/DUMP SUBTASK     */
*         2 ATCRSV99 CHAR(32),      /* RESERVED FOR LATER POINTERS   */
*         2 ATCAP33 PTR(31),        /* PTR TO ISTAPC33               */
*         2 ATCAP35 PTR(31),        /* PTR TO ISTAPC35               */
*         2 ATCAP36 PTR(31),        /* PTR TO ISTAPC36               */
*         2 ATCDVTLK CHAR(LENGTH(ISTLOK)), /* LOCK WORD FOR DVT LOCK */
*         2 ATCCDFIN PTR(31),       /* POINTER TO ISTSDCRR           */
*         2 ATCCDFDN PTR(31),       /* POINTER TO ISTSDCCN           */
*         2 ATCVOCLK CHAR(LENGTH(ISTLOK)), /* VOCLOCK LOCK           */
*         2 ATCRDTLK CHAR(LENGTH(ISTLOK)), /* RDTLOCK LOCK           */
*         2 ATCRSV97 PTR(31),              /* DWORD ALIGNMENT        */
*         2 ATCVPAB1 CHAR(LENGTH(ISTDYPAB)) BDY(DWORD), /* PAB FOR VARY
*                                           UNDER PSS CONTROL        */
*         2 ATCPGPAB CHAR(LENGTH(ISTDYPAB)) BDY(DWORD), /* ERP PAB FOR
*                                      PURGE                         */
*         2 ATCDLRPB CHAR(LENGTH(ISTDYPAB)) BDY(DWORD), /* DUMP LOAD &
*                                           RESTART PAB              */
*         2 ATCCCLAD PTR(31),       /* ADDRESS OF VARY ERP (ISTINCCL)*/
*         2 ATCCDLAD PTR(31),       /* ADDRESS OF VARY DUMP,LD RSTRT
*                                      (ISTINCDL)                    */
*         2 ATCOCCOB PTR(31),       /* ADDRESS ISTOCCOB              */
*         2 ATCOCCCB PTR(31),       /* ADDRESS ISTOCCCB              */
*         2 ATCTIPAB CHAR(LENGTH(ISTDYPAB)) BDY(DWORD), /* A PAB   0340
*                                           FOR ISTOLTP              */
*         2 ATCTCIPB CHAR(LENGTH(ISTDYPAB)) BDY(DWORD), /* A PAB   0340
*                                           FOR TOLTEP CLIP          */
*         2 ATCVTIPB CHAR(LENGTH(ISTDYPAB)) BDY(DWORD), /* A PAB   0340
*                                           FOR TOLTEP-VTAM INTERFACE*/
*         2 ATCTCLOM PTR(31),      /* ADDR TOLTEP CLOP PROC          */
*         2 ATCTCLIM PTR(31),      /* ADDR TOLTEP CLIP PROC          */
*         2 ATCVTINM PTR(31),      /* ADDR TOLTEP-VTAM INTF PROC     */
*         2 ATCTACB  PTR(31),      /* TOLTEP ACB                     */
*         2 ATCRSV10 CHAR(LENGTH(ISTDYPAB)) BDY(DWORD), /* RESERVED  */
*         2 ATCPTR00 CHAR(LENGTH(ISTDYPAB)) BDY(DWORD), /* A PAB     */
*         2 ATCCFEAD PTR(31),          /* ADDR OF ISTINCFE           */
*         2 ATCVLCNT CHAR(4) BDY(HWORD), /* VARY DEVICE ONLINE COUNTS*/
*           3 ATCRNCNT PTR(16),        /* 370X COUNT                 */
*           3 ATCLCLCT PTR(16),        /* 3270 COUNT                 */
*         2 ATCS49XI PTR(31),          /* ADDRESS OF ISTPICXI        */
*         2 ATCS49XL PTR(31),          /* ADDRESS OF ISTPICXL        */
*         2 ATCPODVT PTR(31),          /* PTR TO PROGRAM OPERATOR DVT*/
*         2 ATCPOIA  PTR(31),          /* PTR TO PROGRAM OPERATOR    */
*                                      /* INTERFACE AREA             */
*         2 ATCSOPD CHAR(8) BDY(WORD), /* SESSION CONTROL            */
*           3 ATCSEC01 PTR(31),        /* OUTBOUND PROCESSING        */
*           3 ATCSEC10 PTR(31),        /* DVT                        */
*         2 ATCSIPD CHAR(12) BDY(WORD),/* SESSION CONTROL            */
*           3 ATCSEC21 PTR(31),        /* INBOUND PROCESSING         */
*           3 ATCSEC30 PTR(31),        /* FEEDBACK                   */
*           3 ATCSEC40 PTR(31),        /* DVT                        */
*         2 ATCSECST CHAR(4) BDY(WORD),/* SESSION CONTROLSESS TERM   */
*           3 ATCSEC51 PTR(31),        /* RECOVERY DVT               */
*         2 ATCNMCTR FIXED(15),        /* NAME COUNTER               */
*         2 *        FIXED(15),        /* RESERVED                   */
*         2 ATCSRTAB PTR(31),          /* SEARCH LOGON MODE TABLE    */
*                                      /* RTN ADDRESS (ISTINCSH)     */
*         2 ATCUSSPT PTR(31),          /* DEFAULT USS DEFINITION     */
*                                      /* TABLE ADDRESS (ISTINCDT)   */
*         2 ATCMODTB PTR(31),          /* DEFAULT SYSTEM LOGON MODE  */
*                                      /* TABLE ADDRESS (ISTINCLM)   */
*         2 ATCINCW3 PTR(31),          /* ADDRESS OF ISTINCW3        */
*         2 ATCIOECB PTR(31),          /* ECB USED BY IOS -          */
*                                      /* POINTED TO BY IOBECBPT     */
* 2 ATCVDPAB CHAR(LENGTH(ISTDYPAB)) BDY(DWORD),                    0340
*                                    /* SSCP COMMAND PROCESSING PAB  */
* 2 ATCVFPAB CHAR(LENGTH(ISTDYPAB)) BDY(DWORD),                    0340
*                                    /* SSCP FRONT END PAB           */
* 2 ATCVDLOK CHAR(LENGTH(ISTLOK)),   /* SSCP SERIALIZATION LOCK      */
*/* END OF COMMON AREA                                               */
*/* VS1/VS2 COMMON CODE.                                             */
*        2  ATCRSVBB PTR(31),          /* RESERVED                    *
*        2  ATCAOSM BDY(DWORD),                                    0340
*/*                                                                   *
*           3  ATCSRBRT PTR(31),       /* POINTER TO ROUTINE UNDER    *
*                                      /* SRB CONTROL                 *
*           3  ATCGSRBQ PTR(31),       /* READY QUEUE FOR GLOBAL SRB'S*
*              4  ATCGSRBG BIT(8),     /* READY QUEUE GATE BYTE       *
*                 5  ATCGSRBF BIT(1),  /* READY QUEUE GATE BIT        *
*           3  ATCPRPH PTR(31),        /* PTR TO PREALLOCATED RPH     *
*           3  ATCCMTCB PTR(31),       /* PTR TO COMMUNICATIONS TASK  *
*                                      /* TCB                         *
*           3  ATCAP11 PTR(31),        /* PTR TO ISTAPC11             *
*           3  ATCAP12 PTR(31),        /* PTR TO ISTAPC12             *
*           3  ATCAP31 PTR(31),        /* PTR TO ISTAPC31             *
*           3  ATCAP32 PTR(31),        /* PTR TO ISTAPC32             *
*           3  ATCAP34 PTR(31),        /* PTR TO ISTAPC34             *
*           3  ATCAP52 PTR(31),        /* PTR TO ISTAPC52             *
*           3  ATCAP53 PTR(31),        /* PTR TO ISTAPC53             *
*           3  ATCAP54 PTR(31),        /* PTR TO ISTAPC54             *
*           3  ATCAP57 PTR(31),        /* PTR TO ISTAPC57             *
*           3  ATCAP58 PTR(31),        /* PTR TO ISTAPC58             *
*           3  ATCAP61 PTR(31),        /* PTR TO ISTAPC61             *
*           3  ATCAP63 PTR(31),        /* PTR TO ISTAPC63             *
*           3  ATCAP64 PTR(31),        /* PTR TO ISTAPC64             *
*           3  ATCZFSVT PTR(31),       /* TPIOS FIXED SRVICES VCTR TAB*
*           3  ATCZPSVT PTR(31),       /* TPIOS PAGBL SRVCES VCTR TABL*
*           3  ATCICNCB PTR(31),       /* HEAD OF ICNCB QUEUE         *
*           3  ATCZDVT1 PTR(31),       /* TPIOS SLODWN RECOVRY PRCSR  *
*           3  ATCZDVT3 PTR(31),       /* 370X FEEDBACK STAT CNTRL RTR*
*           3  ATCZDVT4 PTR(31),       /* OPERATOR MESSAGE SCHEDULER  *
*           3  ATCZDVT6 PTR(31),       /* DIALOGUE SCHEDULER (INBOUND)*
*           3  ATCAP65 PTR(31),        /* PTR TO ISTAPC65            */
*           3  ATCICAPP CHAR(20) BDY(WORD), /* 3705 APPENDAGE VECTOR  *
*              4  ATCCDRPH PTR(31),    /* ADDR CLOSE DEB RPH       0340
*                                         (DUMMY EOA APP.)           */
*              4  ATCZSIOA PTR(31),    /* ADDR 3705 SIO APPENDAGE    */
*              4  ATCCDTCB PTR(31),    /* VTAM TCB (DUMMY PCI APP.)  */
*              4  ATCZCEA PTR(31),     /* ADDR 3705 CHANNEL END    0340
*                                         APPENDAGE                  */
*              4  ATCZAEA PTR(31),     /* ADDR 3705 CHANNEL END    0340
*                                         APPENDAGE                  */
*           3  ATCLDAPP CHAR(20) BDY(WORD), /* LOCAL 3270 APPENDAGE
*                                         VECTOR                     */
*              4  ATCCDTID PTR(31),    /* TASK ID OF VTAM          0340
*                                         (DUMP EOE)                 */
*              4  ATCSMFRR PTR(31),    /* ADDR OF SMS FRR          0340
*                                         (DUMMY SIOA)               */
*              4  ATCRSV17 PTR(31),    /* RESERVED FOR ALIGNMENT     */
*              4  ATCZLCEA PTR(31),    /* ADDR 3270 CHANNEL END    0340
*                                         APPENDAGE                  */
*              4  ATCZLAEA PTR(31),    /* ADDR 3270 CHANNEL END    0340
*                                         APPENDAGE                  */
*           3  ATCDAPVT CHAR(24) BDY(WORD),  /* DUMMY APPENDAGE    0340
*                                         VECTOR TABLE FOR LOAD/DVMMY*/
*              4  ATCDEOEA PTR(31),    /* ADDRESS OF DUMMY END     0340
*                                         OF EXTENT APPENDAGE        */
*              4  ATCDSIOA PTR(31),    /* ADDRESS OF DUMMY END     0340
*                                         OF SIO APPENDAGE           */
*              4  ATCDPCIA PTR(31),    /* ADDRESS OF DUMMY PCI     0340
*                                         APPENDAGE                  */
*              4  ATCDCEA PTR(31),     /* ADDRESS OF CHANNEL END   0340
*                                         APPENDAGE                  */
*              4  ATCDXCEA PTR(31),    /* ADDRESS OF ABNORMAL      0340
*                                         END APPENDAGE              */
*              4  ATCDAPDG CHAR(2),    /* DUMMY APPENDAGE            */
*              4  ATCRSV56 CHAR(2),    /* RESERVED                   */
*           3  ATCZDVT7 PTR(31),       /* ADDR OF RESET CLEANUP    0340
*                                         (PHASE 1)                   *
*           3  ATCZDVT8 PTR(31),       /* 3270 LOCAL TEST AND CTL  0340
*                                         FEEDBACK ROUTER            */
*           3  ATCZDVT9 PTR(31),       /* ADDRESS OF ISTZDFKA        */
*           3  ATCZDVTA PTR(31),       /* ADDRESS OF ISTZCFIA        */
*           3  ATCZDVTX PTR(31),       /* ADDRESS OF TRUNK LINE    0340
*                                         DEACTIVATE ROUTINE         */
*           3  ATCZLPVT PTR(31),       /* ADDRESS OF ISTZPSVA        */
*           3  ATCZLFVT PTR(31),       /* TPIOS 3270 LOCAL FIXED   0340
*                                         SERVICES VECTOR TABLE      */
*           3  ATCZPAB1 CHAR(LENGTH(ISTDYPAB)) BDY(DWORD), /* PAB FOR
*                                         TEST AND CTL FEEDBACK ROUTER*
*           3  ATCZPAB2 CHAR(LENGTH(ISTDYPAB)) BDY(DWORD), /* 370X 0340
*                                         STATUS AND FEEDBACK ROUTER
*                                         DYNAMIC PAB                */
*           3  ATCAP51  PTR(31),       /* PTR TO ISTAPC51            */
*           3  ATCZDFJ0 PTR(31),       /* ADDR OF ISTZDFJ0           */
*           3  ATCAP37  PTR(31),       /* PTR TO ISTAPC37            */
*           3  ATCAP38  PTR(31),       /* PTR TO ISTAPC38            */
*           3  ATCRPT11 PTR(31),       /* RESERVED                   */
*           3  ATCRPT12 PTR(31),       /* RESERVED                   */
*           3  ATCRPT13 PTR(31),       /* RESERVED                   */
*           3  ATCRPT14 PTR(31),       /* RESERVED                   */
*           3  ATCRPT15 PTR(31),       /* RESERVED                   */
*           3  ATCRPT16 PTR(31),       /* RESERVED                   */
*           3  ATCRPT17 PTR(31),       /* RESERVED                   */
*           3  ATCRPT18 PTR(31),       /* RESERVED                   */
*           3  ATCRPT19 PTR(31),       /* RESERVED                   */
*           3  ATCRPT20 PTR(31),       /* RESERVED                   */
*           3  ATCRPT21 PTR(31),       /* RESERVED                   */
*           3  ATCRPT22 PTR(31),       /* RESERVED                   */
*           3  ATCRPT23 PTR(31),       /* RESERVED                   */
*           3  ATCRPT24 PTR(31),       /* RESERVED                   */
*           3  ATCRPT25 PTR(31),       /* RESERVED                   */
*           3  ATCRPT26 PTR(31),       /* RESERVED                   */
*           3  ATCRPT27 PTR(31),       /* RESERVED                   */
*           3  ATCRPT28 PTR(31),       /* RESERVED                   */
*           3  ATCRPT29 PTR(31),       /* RESERVED                   */
*           3  ATCRPT30 PTR(31),       /* RESERVED                   */
*           3  ATCRPT31 PTR(31),       /* RESERVED                   */
*           3  ATCRPT32 PTR(31),       /* RESERVED                   */
*           3  ATCRPT33 PTR(31),       /* RESERVED                   */
*           3  ATCRPT34 PTR(31),       /* RESERVED                   */
*           3  ATCRPT35 PTR(31),       /* RESERVED                   */
*           3  ATCRPT36 PTR(31),       /* RESERVED                   */
*           3  ATCRPT37 PTR(31),       /* RESERVED                   */
*           3  ATCRPT38 PTR(31),       /* RESERVED                   */
*           3  ATCRPT39 PTR(31),       /* RESERVED                   */
*           3  ATCRPT40 PTR(31),       /* RESERVED                   */
*/* END OF VS1/VS2 COMMON CODE.                                      */
*/* START OF VS2 UNIQUE CODE.                                        */
*           3  ATCVTFLG BIT(32),                                   0340
*              4 ATCVTACT BIT(1),      /* VTT ACTIVE                 */
*              4 *        BIT(31),     /* RESERVED                   */
*           3  ATCHLTCB PTR(31),       /* ECB FOR HALTING VTAM       */
*           3  ATCATA10 PTR(31),       /* PTR TO ISTATM10            */
*           3  ATCZLAAB PTR(31),       /* PTR TO ISTZLFAB            */
*           3  ATCCACXA PTR(31),       /* PTR TO ISTCFCXA            */
*           3  ATCSMARA PTR(31),       /* PTR TO ISTORFRA            */
*           3  ATCSMAID PTR(31),       /* PTR TO ISTORFID            */
*           3  ATCTPWQA PTR(31),       /* WAIT Q ANCHOR FOR TPIOS    */
*           3  ATCSMAPR PTR(31),       /* PTR TO ISTORFPR            */
*           3  ATCSMABF PTR(31),       /* PTR TO ISTORFBF            */
*           3  ATCPSTA  PTR(31),       /* ACTIVE PST QUEUE           */
*           3  ATCTRMBP CHAR(LENGTH(ISTDYPAB)) BDY(DWORD),         0340
*                                      /* PAB FOR VTAM TERM TASK     */
*           3  ATCTPSPB CHAR(LENGTH(ISTDYPAB)) BDY(DWORD),         0340
*                                      /* PAB FOR TPIOS              */
*           3  ATCAP23  PTR(31),       /* PTR TO ISTAPC23            */
*           3  ATCAPC25 PTR(31),       /* PTR TO ISTAPC25            */
*           3  ATCAP41  PTR(31),       /* PTR TO ISTAPC41            */
*           3  ATCRCFY0 PTR(31),       /* PTR TO ISTRCFY0            */
*           3  ATCAP55  PTR(31),       /* PTR TO ISTAPC55            */
*           3  ATCAP56  PTR(31),       /* PTR TO ISTAPC56            */
*           3  ATCAPC59 PTR(31),       /* PTR TO ISTAPC59            */
*           3  ATCAP62  PTR(31),       /* PTR TO ISTAPC62            */
*           3  ATCAP66  PTR(31),       /* PTR TO ISTAPC66            */
*           3  ATCAP69  PTR(31),       /* PTR TO ISTAPM69            */
*           3  ATCAP82  PTR(31),       /* PTR TO ISTAPC82            */
*           3  ATCAP83  PTR(31),       /* PTR TO ISTAPC83            */
*           3  ATCAP84  PTR(31),       /* PTR TO ISTAPC84            */
*           3  ATCAP85  PTR(31),       /* PTR TO ISTAPC85            */
*           3  ATCAP86  PTR(31),       /* PTR TO ISTAPC86            */
*           3  ATCASCB  PTR(31),       /* PTR TO VTAM ASCB           */
*           3  ATCMPLTA  PTR(31),      /* PTR TO MPST LIST TABLE     */
*           3  ATCZR01  PTR(31),       /* PTR TO ISTZRM01            */
*           3  ATCAICTN PTR(31),       /* PTR TO ISTAICTN            */
*           3  ATCTPCP0 PTR(31),       /* PTR TO ISTZFSAV            */
*           3  ATCTPCP1 PTR(31),       /* PTR TO ISTZ19SV            */
*           3  ATCZFLAG BIT(8),        /* FLAG BYTE                  */
*              4 ATCZF001 BIT(1),      /* MDR RECORDING SUSPENDED    */
*              4 ATCRSV66 BIT(7),      /* RESERVED                   */
*           3  ATCRSV75 BIT(8),        /* RESERVED                   */
*           3  ATCSRBCT FIXED(16),     /* COUNT OF PREALLOCATED SRB'S*/
*           3  ATCCRACT FIXED(16),     /* COUNT OF PREALLOCATED CRA'S*/
*           3  ATCRPLCT FIXED(16),     /* COUNT OF PREALLOCATED CRPL */
*           3  ATCTPMPB CHAR(LENGTH(ISTDYPAB)) BDY(DWORD), /*TP MSG PAB
*                                                         FOR VS2    */
*           3  ATCTPMMI PTR(31),        /* PTR TO ISTCFMMI - MSG ISSUER
*                                          FOR SRB MODE ROUTINES     */
*           3  ATCVIOPM PTR(31),       /* PTR TO ISTVIOPM            */
*        2  ATCAOS CHAR(0) BDY(WORD);  /* VS2 ONLY FIELDS            */
*DCL  1  ISTRH     BDY(WORD) BASED,      /* REQUEST HEADER           */
*       2  RHFLAGS  CHAR(3),             /* REQUEST HEADER FLAGS     */
*        3  RH1    BIT(8),               /* FIRST RH BYTE            */
*           4  RHQS     BIT(1),          /* 0-REQUEST,1-RESPONSE     */
*           4  RHTYPE   BIT(1),          /* 0-DATA,1-CONTROL         */
*           4  RHSCI    BIT(1),          /* 0-FM,1-SYSTEM CONTROL    */
*           4  RHDIRI   BIT(1),          /* 0-WITH,1-AGAINST         */
*           4  RHFORMAT BIT(1),          /* 0-UNFORMATTED,1-FORMATTED*/
*           4  RHSENSE  BIT(1),          /* 0-NOT INCLUDED,1-INCLUDED*/
*           4  RHCHAIN  BIT(2),          /* CHAINING CONTROL         */
*                                        /* 0-MIDDLE                 */
*                                        /* 1-LAST                   */
*                                        /* 2-FIRST                  */
*                                        /* 3-ONLY                   */
*        3  RH2    BIT(8),               /* SECOND RH BYTE           */
*           4  RHFME    BIT(1),          /* Q-FME REQUESTED,S-FME    */
*           4  RHPE     BIT(1),          /* Q-PE REQUESTED,S-PE      */
*           4  RHRRN    BIT(1),          /* Q-RRN REQUESTED,S-RRN    */
*           4  RHEXCEPT BIT(1),          /* Q-EXCEPTION RESPONSES    */
*                                        /* ONLY,S-ERROR             */
*           4  RHRETRY  BIT(1),          /* Q-RETRY,                 */
*              5  RHBUSY  BIT(1),        /* S-BUSY                   */
*           4  RHRSVD1  BIT(1),          /* Q-RESERVED               */
*              5  RHINOP  BIT(1),        /* S-INOPERATIVE            */
*           4  RHRSVD2  BIT(1),          /* Q-RESERVED,S-RESERVE     */
*           4  RHPACE   BIT(1),          /* Q-PACING REQUEST,S-PACE  */
*        3  RH3    BIT(8),               /* THIRD RH BYTE            */
*           4  RHBB     BIT(1),          /* BEGIN SEQUENCE           */
*           4  RHEB     BIT(1),          /* END SEQUENCE             */
*           4  RHCDIR   BIT(1),          /* CHANGE DIRECTION         */
*           4  RHRCDIR  BIT(1),          /* REQUEST CHANGE DIRECTION */
*           4  RHRSVD3  BIT(1),          /* RESERVED                 */
*           4  RHLOG    BIT(1),          /* LOG                      */
*           4  RHRSVD4  BIT(1),          /* RESERVED                 */
*           4  RHRSVD5  BIT(1);          /* RESERVED                 */
*DCL RHFIRST  BIT(2) CONSTANT('10'B);    /* FIRST IN CHAIN           */
*DCL RHMIDLE  BIT(2) CONSTANT('00'B);    /* MIDDLE OF CHAIN          */
*DCL RHLAST   BIT(2) CONSTANT('01'B);    /* LAST IN CHAIN            */
*DCL RHONLY   BIT(2) CONSTANT('11'B);    /* ONLY ONE IN CHAIN        */
*DCL RHRESP   BIT(24) CONSTANT('938000'X); /* RH RESPONSE MASK       */
*DCL RHREQ    BIT(24) CONSTANT('030000'X); /* RH REQUEST MASK        */
*/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  */
*/*                                                                  */
*/*             ISTMGL - MESSAGE PARAMETER LIST                      */
*/*                                                                  */
*/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  */
*/*  REVISIONS                                         004 11/26/74  */
*DCL 1 ISTMGL BASED(NCSMGLPT),/* MESSAGE PARAMETER LIST              */
*      2 MGLRH CHAR(LENGTH(ISTRH)),/* ORIG RH IF MGLREQ = 0          */
*      2 MGLUSSFL CHAR(1),  /* FLAGS                                 */
*        3 MGLREQ   BIT(1), /* 0 = SEND RESPONSE                     */
*                           /* 1 = SEND REQUEST                      */
*        3 MGLCMPAT BIT(1), /* COMPATIBLE LOGON                      */
*        3 * BIT(6),        /* RESERVED                              */
*      2 MGLRUPTR PTR(31),  /* ADDR OF REQ RU IF MGLREQ = 1          */
*        3 MGLSEQNO FIXED(15),/* SEQUENCE NUMBER OF ORIG RU          */
*        3 MGLSENSE CHAR(2),/* 0 TO SEND POSITIVE FME                */
*/*  SET FOLLOWING SENSE BYTES USING ISTSRU CONSTANTS                */
*          4 MGLNS1 CHAR(1),/* NON-ZERO SENSE DATA TO SEND           */
*          4 MGLNS2 CHAR(1),/* A NEGATIVE FME RESPONSE               */
*      2 MGLMSGAD PTR(31),  /* POINTER TO USS MSG ID FIELD           */
*      2 MGLVDATA PTR(31),  /* POINTER TO VARIABLE DATA              */
*      2 MGLORGRU CHAR(3);  /* 1ST 3 BYTES OF ORIGINAL RU            */
*/*                                                                  */
*DCL 1 MGLUSSMG BASED(MGLMSGAD),/* USS MESSAGE ID FIELD              */
*      2 MGLMSGL FIXED(8),  /* LENGTH OF MESSAGE ID                  */
*      2 MGLMSGID CHAR(*);  /* MESSAGE ID (CHARACTERS)               */
*/*                                                                  */
*DCL 1 MGLUSSTX BASED(MGLVDATA),/* USS MSG VARIABLE TEXT             */
*      2 MGLTXTL FIXED(8),  /* LENGTH OF VARIABLE DATA               */
*      2 MGLVDTXT CHAR(*);  /* DATA TO INSERT IN MESSAGE             */
*/*                                                                  */
*DCL 1 MGLRUFLD BASED(MGLRUPTR),    /* REQUEST UNIT FIELD            */
*                                   /* FOR 'SEND REQUEST'            */
*      2 MGLRUL   FIXED(8),         /* LENGTH OF RU                  */
*      2 MGLRU    CHAR(*);          /* RU                            */
*/* REQUEST RESPONSE UNIT                                            */
*/*  MORE REVISIONS                                    008 10/24/74  */
*/*                                                                  */
*DCL 1 ISTRU BASED BDY(BYTE),      /* BASIC RU STRUCTURE             */
*     2 RUDATA CHAR(*);            /* DATA PORTION OF RU             */
*/*                                                                  */
*/* THIS PORTION DEFINES THE FIELDS WHICH ARE PRESENTED AS SENSE     */
*/* INFORMATION FOR THOSE RU'S WHICH CONTAIN SENSE. IT IS THE INITIAL*/
*/* PORTION OF THE RU.                                               */
*/*                                                                  */
*DCL 1 ISTSENRU DEF(RUDATA),       /* SENSE RU INFORMATION           */
*     2 SRUSENSE CHAR(4),          /* SENSE DATA WORD                */
*      3 SRUSENS1 CHAR(2),         /* SYSTEM SENSE BYTES             */
*       4 SRUSNS1  CHAR(1),        /* SENSE DATA MAJOR CODE          */
*       4 SRUSNST  CHAR(1),        /* SENSE MODIFIER BYTE            */
*      3 SRUSENS2 CHAR(2),         /* REMAINING SENSE BYTES          */
*       4 SRUSNS3  CHAR(1),        /* THIRD SENSE BYTE               */
*       4 SRUSNS4  CHAR(1),        /* FOURTH SENSE BYTE              */
*     2 SENRU CHAR(*);             /* REMAINDER OF RU                */
*/*                                                                  */
*/* THIS PORTION IS A DUMMY LEVEL 1 DECLARE TO ALLOW FOR EASY        */
*/* IMPLEMENTATION. ALL RU DEFINITIONS WHICH FOLLOW ARE DEFINED ON   */
*/* ISTRUB. FOR IMPLEMENTATION RESPECIFY ISTRUB BASED(RUDATA) IF NO  */
*/* SENSE AND ISTRUB BASED(SENRU) IF SENSE. THIS AVOIDS CONSTANT     */
*/* RESPECIFIES FOR EACH RU TYPE.                                    */
*/*                                                                  */
*DCL 1 ISTRUB BASED,               /* RU BASE FOR COMMON ADDRESSING  */
*     2 RUBDATA  CHAR(*);          /* DATA PORTION OF RU             */
*/*                                                                  */
*/* STANDARD RU                                                      */
*/*                                                                  */
*DCL 1 ISTSRU DEF(ISTRUB),         /* STANDARD RU                    */
*     2 SRUQSREQ CHAR(1),          /* REQUEST RESPONSE CODE          */
*     2 SRUDATA,                   /* RU DATA                        */
*       3 SRUTYPE  CHAR(1),        /* RU TYPE                        */
*         4 SRUSPAC  BIT(2),       /* S TO P ACTION CODE             */
*         4 SRUPSAC  BIT(2),       /* P TO S ACTION CODE             */
*         4 *        BIT(4),       /* RESERVED                       */
*       3 SRULDID  CHAR(8),        /* LOAD ID-ACTPU                  */
*         4 SRUSPSN  CHAR(2),      /* SEQUENCE NUMBER STOP           */
*           5 SRUDFCLV CHAR(1),    /* DFC LEVEL                      */
*         4 SRUPSSN  CHAR(2),      /* SEQUENCE NUMBER PTOS           */
*         4 SRURSV01 CHAR(4);      /* RESERVED                       */
*/*                                                                  */
*/* NETWORK SERVICES RU                                              */
*/*                                                                  */
*DCL 1 ISTNSRU DEF(ISTRUB),        /* NETWORK SERVICES RU            */
*     2 NSRUNETS CHAR(3),          /* FM DATA-NETWORK SERVICES       */
*      3 NSRUID   CHAR(1),         /* RU TYPE                        */
*      3 NSRUSUB  CHAR(1),         /* NS SUB CATEGORY                */
*      3 NSRURCD  CHAR(1),         /* REQUEST CODE                   */
*     2 NSRUDATA CHAR(*);          /* RU DATA                        */
*DCL NSRUONHK BIT(8) CONSTANT('1B'X); /* READY TO GO ON HOOK REQ CODE*/
*DCL  1  NSRUHOOK DEF(NSRUDATA),   /* RTGOH RU                       */
*        2 NSRUHKTY CHAR(1);       /* TYPE CODE                      */
*/*   CONSTANTS FOR NSRUHKTY                                         */
*DCL NSRUHKNR BIT(8) CONSTANT('00'X); /* NORMAL                      */
*DCL NSRUHKI  BIT(8) CONSTANT('80'X); /* IMMEDIATE                   */
*/*                                                                  */
*/*  DEFINATION OF SET STATE VECTOR RU'S                             */
*DCL 1 NSSSVRU  DEF(NSRUDATA),                                     0361
*      2 NSSSVDAF CHAR(2),         /* LINK DAF                       */
*      2 NSSSVT   CHAR(1),         /* VECTOR TYPE                    */
*      2 NSSSVNOD PTR(8);          /* REMOTE NCP NODE I.D.           */
*/*                                                                  */
*DCL 1 NSSSVT3  DEF(NSSSVNOD),     /* SET SWITCHED PU PARAMETERS     */
*      2 NSSSVT3A CHAR(1),         /* SDLC ADDRESS                   */
*      2 NSSSVT3B CHAR(1),         /* PU TYPE                        */
*      2 NSSSVT3C CHAR(1),                                         0362
*        3 NSSSVT3D BIT(1),        /* PU IS 3270                     */
*        3 *        BIT(7),        /* RESERVED                       */
*      2 NSSSVT3E CHAR(1),         /* MAXOUT                         */
*      2 NSSSVT3F CHAR(1),         /* PASSLIM                        */
*      2 NSSSVT3G CHAR(1),                                         0362
*        3 NSSSVT3H BIT(1),        /* IRETRY = YES                   */
*        3 *        BIT(7),        /* RESERVED                       */
*      2 NSSSVT3I CHAR(1),         /* SECOND LEVEL PAUSE             */
*      2 NSSSVT3J CHAR(1),         /* SECOND LEVEL LIMIT             */
*      2 NSSSVT3K FIXED(15) BDY(BYTE); /* MAXDATA                    */
*/*                                                                  */
*DCL 1 NSSSVT4  DEF(NSSSVNOD),     /* SET SWITCHED LU PARAMETERS     */
*      2 NSSSVT4A CHAR(1),         /* LOCAL ADDRESS                  */
*      2 NSSSVT4B PTR(8),          /* N PACING                       */
*      2 NSSSVT4C PTR(8),          /* M PACING                       */
*      2 NSSSVT4D CHAR(1);         /* SCHEDULING PARAM               */
*DCL NSBATCH BIT(8) CONSTANT('01'X); /* BATCH                        */
*DCL NSINTER BIT(8) CONSTANT('02'X); /* INTERACTIVE                  */
*/*                                                                  */
*DCL 1 NSSSVT5  DEF(NSSSVNOD),                                     0366
*      2 NSSSVT5A CHAR(2);                                         0366
*DCL NSDELAY  BIT(8) CONSTANT('05'X);                              0367
*DCL NS0DELAY BIT(16) CONSTANT('0000'X);                           0368
*/*                                                                  */
*/*  CONSTANTS FOR NSSSVT                                            */
*DCL NSTIME BIT(8) CONSTANT('01'X),  /* SET TIME AND DATE            */
*    NSNODE BIT(8) CONSTANT('02'X),  /* SET NODE I.D.                */
*    NSPU   BIT(8) CONSTANT('03'X),  /* SET PU PARAMS                */
*    NSLU   BIT(8) CONSTANT('04'X);  /* SET LU PARAMS                */
*/*                                                                  */
*/* THIS LEVEL 1 DEFINITION IS A FORM OF THE NSRU WHICH CONTAINS THE */
*/* DAF WITHIN THE DATA FIELD. IT IS AN OVERLAY OF NSRUDATA.         */
*/*                                                                  */
*DCL 1 NSRUDAT1 DEF(NSRUDATA),     /* NSRU WITH DAF                  */
*     2 NSRUDAF  CHAR(2),          /* DAF IN RU DATA FIELD           */
*     2 NSRUDAT2 CHAR(*);          /* RU DATA                        */
*/*                                                                  */
*/*   TRACE RU                                                       */
*/*                                                                  */
*DCL  1  ISTTRRU  DEF(NSRUDAT2),                                   0371
*        2 TRRTYPE  BIT(8),        /* X'01' RU IS LINE TRACE         */
*        2 TRRTIME  BIT(8),        /* TIME OUT VALUE/TIME STAMP      */
*        2 TRRPEP   BIT(8),        /* EP SUBCHANNEL ADDRESS          */
*        2 TRRSTAT  BIT(8),        /* TRACE STATUS                   */
*        2 TRRDATA  CHAR(*);       /* TRACE DATA                     */
*/*                                                                  */
*/*   CONTACTED RU DATA                                              */
*/*                                                                  */
*DCL  1  ISTCTDRU DEF(NSRUDAT2),   /* DATA PORTION FOR CONTACTED RU  */
*        2 CTDRUSTA BIT(8);        /* STATUS                         */
*/*   VALUES FOR STATUS (CTDRUSTA) FIELD                             */
*DCL CTDRULD  BIT(8) CONSTANT('01'X),  /* LOADED                     */
*    CTDRULDR BIT(8) CONSTANT('02'X),  /* LOAD REQUIRED              */
*    CTDRUERR BIT(8) CONSTANT('03'X);  /* ERROR ON CONTACT           */
*/*                                                                  */
*/*   INOPERATIVE RU DATA                                            */
*/*                                                                  */
*DCL  1  ISTINORU DEF(NSRUDAT2),   /* DATA PORTION FOR INOPERATIVE RU*/
*        2 INORUET  BIT(8);        /* ELEMENT TYPE                   */
*/*   VALUES FOR ELEMENT TYPE FIELD (INORUET)                        */
*DCL INORUPU  BIT(8) CONSTANT('01'X),  /* PHYSICAL UNIT              */
*    INORULNK BIT(8) CONSTANT('02'X),  /* LINK                       */
*    INORURNS BIT(8) CONSTANT('FE'X),  /* SOFT FAILURE OF LOCAL RN   */
*    INORURNH BIT(8) CONSTANT('FF'X);  /* HARD FAILURE OF LOCAL RN   */
*/*                                                                  */
*DCL  1  SRUDAT1  DEF(SRUDATA),    /* ACT PHYS OR LOGICAL UNIT REQ.  */
*        2 SRUDAT1T CHAR(1),       /* TYPE ACTIVATION DESIRED        */
*        2 SRUDAT1L CHAR(1),       /* LEVEL OF CONTROL               */
*          3 SRUFMPRO BIT(4),      /* FM PROFILE                     */
*          3 SRUTSPRO BIT(4),      /* TS PROFILE                     */
*        2 SRUDAT1I CHAR(6);       /* SSCP ID                        */
*/*                                                                  */
*DCL  1  SRUDAT2 DEF(SRUDATA),     /* ACT PHYS UNIT RESPONSE         */
*        2 SRUDAT2T CHAR(1),       /* TYPE ACTIVATION                */
*        2 SRUDAT2N CHAR(8);       /* LOAD ID                        */
*/*                                                                  */
*/*  MAINTENANCE SERVICES RESPONSE UNIT                              */
*/*                                                                  */
*DCL  1  ISTMRU DEF(ISTRUB),                                       0378
*        2 MRUPREF  CHAR(2),       /* PREFIX                         */
*        2 MRUREQ   CHAR(1),       /* REQUEST = EXECUTE TEST         */
*        2 MRUDAF   CHAR(2),       /* NET ADDR OF LINK               */
*        2 MRUCMND  CHAR(1),       /* COMMAND                        */
*        2 MRUMODIF CHAR(1),       /* MODIFIER                       */
*        2 MRURESP  CHAR(2),       /* RESPONSE                       */
*        2 MRUDATA  CHAR(*);       /* DATA                           */
*/*                                                                  */
*/*   CONSTANTS FOR SRUDAT1T AND SRUDAT2T                            */
*/*                                                                  */
*DCL SRUCOLD  BIT(8) CONSTANT('01'X),  /* COLD ACTIVATION            */
*    SRUERP   BIT(8) CONSTANT('02'X),  /* ERP ACTIVATION             */
*    SRUWARM  BIT(8) CONSTANT('04'X);  /* WARM ACTIVATION            */
*/*   CONSTANTS FOR SRUDAT1L                                         */
*DCL SRUFMP0  BIT(4) CONSTANT('0000'B),/* FM PROFILW 0               */
*    SRUFMP5  BIT(4) CONSTANT('0101'B),/* FM PROFILE 5               */
*    SRUTSP0  BIT(4) CONSTANT('0000'B),/* TS PROFILE 0               */
*    SRUTSP1  BIT(4) CONSTANT('0001'B),/* TS PROFILE 1               */
*    SRUTSP2  BIT(4) CONSTANT('0010'B),/* TS PROFILE 2               */
*    SRUTSP3  BIT(4) CONSTANT('0011'B),/* TS PROFILE 3               */
*    SRUTSP4  BIT(4) CONSTANT('0100'B),/* TS PROFILE 4               */
*    SRUTSP5  BIT(4) CONSTANT('0101'B);/* TS PROFILE 5               */
*/*                                                                  */
*/*   TS PROFILE DEFINATIONS:                                        */
*/*                                                                  */
*/*       TS PROFILE  SEQ. NO.  SDT   STSN  CLEAR  PACING            */
*/*           0          N       N      N     N      N               */
*/*           1          N       N      N     N      N               */
*/*           2          Y       N      N     Y      Y               */
*/*           3          Y       Y      N     Y      Y               */
*/*           4          Y       Y      Y     Y      Y               */
*/*           5          Y       Y      N     N      N               */
*/*                                                                  */
*DCL  1  SRUDATA3 DEF(SRUDATA),    /* DEACT PHYS UNIT OR UNBND SESSN */
*        2 SRUDAT3I CHAR(1);       /* TYPE DEACTIVATION              */
*/*                                                                  */
*/*   CONSTANTS FOR SRUDAT3I                                         */
*/*                                                                  */
*DCL SRUFINAL BIT(8) CONSTANT('01'X),  /* FINAL USE                  */
*    SRUNOFIN BIT(8) CONSTANT('02'X),  /* NOT FINAL USE              */
*    SRUNORM  BIT(8) CONSTANT('01'X),  /* NORMAL END SESSION         */
*    SRUBF    BIT(8) CONSTANT('02'X),  /* BIND FAILURE               */
*    SRUVS    BIT(8) CONSTANT('04'X);  /* CLEAR SESSION PROCEDURE    */
*/*                                                                  */
*DCL  1  SRUDATA4 DEF(SRUDATA),    /* SWITCH EP OR NCB RU            */
*        2 SRUDAT4D CHAR(2);       /* DAF OF LINE                    */
*/*                                                                  */
*/*   ADDITIONAL SUBCAT VALUES                                       */
*/*                                                                  */
*DCL NSRUNCP  BIT(8) CONSTANT('00'X),  /* BASIC SUPPORT              */
*    NSRUMAT  BIT(8) CONSTANT('03'X);  /* PHYS MAINTENANCE SERVICES  */
*/*                                                                  */
*DCL  1  NSRUDAT3 DEF(NSRUDAT2),  /* CONTACTED RESPONSE              */
*        2 NSRUDA3S CHAR(1);      /* STATE                           */
*/*   CONSTANTS FOR NSRUDA3S                                         */
*DCL NSRULOAD BIT(8) CONSTANT('01'X),  /* LOADED                     */
*    NSRUNLOD BIT(8) CONSTANT('02'X),  /* LOAD REQUIRED              */
*    NSRUCERR BIT(8) CONSTANT('03'X);  /* CONTACT FAILED             */
*DCL  1  NSRUDAT4 DEF(NSRUDAT2),  /* IPL TEXT REQUIRED               */
*        2 NSRUDA4T CHAR(512);    /* TEXT                            */
*DCL  1  NSRUDAT5 DEF(NSRUDAT2),  /* IPL FINAL REQUIRED              */
*        2 NSRUDA5E CHAR(4);      /* ENTRY POINT ADDRESS             */
*DCL  1  NSRUDAT6 DEF(NSRUDAT2),  /* DUMP TEXT REQUIRED              */
*        2 NSRUDA6S CHAR(4),      /* STARTING LOCATION               */
*        2 NSRUDA6L CHAR(2);      /* LENGTH                          */
*DCL  1  NSRUDAT7 DEF(NSRUDAT2),  /* INOP                            */
*        2 NSRUDA7T CHAR(1);      /* ELEMENT TYPE                    */
*/*   CONSTANTS FOR NSRUDA7T                                         */
*DCL NSRUBOX  BIT(8) CONSTANT('01'X),  /* PHYS UNIT FAILED           */
*    NSRULINK BIT(8) CONSTANT('02'X);  /* LINK FAILED                */
*/*                                                                  */
*/*   DIAL RU                                                        */
*DCL  1  NSRUDIL  DEF(NSRUDAT2),                                   0392
*        2 NSRUDILA CHAR(1),      /* SDLC STATION ADDRESS            */
*        2 NSRUDILB CHAR(1),                                       0392
*          3 *        BIT(1),                                      0392
*          3 NSRUDILC BIT(1),     /* AUTO OR MANUAL DIAL             */
*        2 NSRUDILD PTR(8),       /* REDIAL COUNT                    */
*        2 NSRUDILE PTR(8),       /* NUMBER OF DIGITS                */
*        2 NSRUDILF CHAR(*);      /* START TELEPHONE NO.             */
*/*                                                                  */
*/*   ASSIGN FREE NETWORK ADDR RUS                                   */
*DCL  1  NSRUNA    DEF(NSRUDAT2),                                  0393
*        2 NSRUNA1  PTR(8),       /* NUMBER OF ADDRS TO ASSIGN OR FREE*
*        2 NSRUNA2  CHAR(1),                                       0393
*          3 NSRUNA3  BIT(1),     /* CONTIGUOUS OR NOT               */
*        2 NSRUNA4  CHAR(*);                                       0393
*DCL  1  NSRUNA5  BASED,                                           0394
*        2 NSRUNA6  CHAR(2);      /* NETWORK ADDR TO ASSIGN          */
*/*                                                                  */
*/*   CONSTANTS FOR NSRUNA1                                          */
*DCL NSRUFALL BIT(8) CONSTANT('00'X);  /* FREE ALL                   */
*/*                                                                  */
*/*   CHANGE LINE SCHED PARAM RU                                     */
*DCL  1  NSRUCLSP DEF(NSRUDAT2),                                   0396
*        2 NSRULSV  PTR(8);       /* VALUE OF CHANGED PARAMETER      */
*/*                                                                  */
*/*   OFFHOOK RU                                                     */
*DCL  1  NSRUOH1  DEF(NSRUDAT2),                                   0397
*        2 NSRUOHID CHAR(6);      /* STATION ID                      */
*/*                                                                  */
*DCL  1  NSRUDAT8 DEF(NSRUDATA),  /* DUMP INIT & DUMP TEXT RESP      */
*        2 NSRUDA8T CHAR(512);    /* DUMP DATA                       */
*/*                                                                  */
*/* RU CONSTANTS                                                     */
*/*                                                                  */
*DCL TRRACT   BIT(8) CONSTANT('01'X),      /* LINE TRACE ACTIVE      */
*    TRLINE   BIT(8) CONSTANT('01'X),      /* LINETRACE DESIRED      */
*    TRLNTIM1 BIT(8) CONSTANT('FF'X),      /* TIME OUT VALUE WHEN    */
*                                          /* TRACE ACTIVATED        */
*    TRLNTIM2 BIT(8) CONSTANT('00'X),      /* TIME OUT RESET WHEN    */
*                                          /* TRACE STOPPED          */
*    TRRDEACT BIT(8) CONSTANT('02'X),      /* TRACE TERMINATED BECAUSE
*                                             OF DEACTIVATE          */
*    TRRSLOW  BIT(8) CONSTANT('03'X);      /* TRACE TERMINATED BECAUSE
*                                             OF SLOWDOWN            */
*/*                                                                  */
*DCL SRUCONT  BIT(24) CONSTANT('010280'X), /* CONTACTED              */
*    SRUINOP  BIT(24) CONSTANT('010281'X), /* INOPERATIVE            */
*    SRURLNTR BIT(24) CONSTANT('010383'X); /* RECORD LINE TRACE      */
*/*                                                                  */
*DCL SRUSSEN  BIT(24) CONSTANT('010214'X), /* SYS SLOWDOWN ENTRY     */
*    SRUSSEX  BIT(24) CONSTANT('010215'X), /* SYS SLOWDOWN EXIT      */
*    SRUANSTO BIT(8) CONSTANT('02'X),      /* ANS CHAN T.O.          */
*    SRUANSPL BIT(8) CONSTANT('01'X),      /* ANS PANEL              */
*    SRUANSS  BIT(8) CONSTANT('06'X),      /* ANS START              */
*    SRUANSC  BIT(8) CONSTANT('07'X),      /* ANS COMPLETE           */
*    SRUSDCOM BIT(8) CONSTANT('C1'X),      /* SHUTDOWN COMPLETE      */
*    SRUINITC BIT(8) CONSTANT('50'X),      /* INIT COMPLETE          */
*    SRUSWNCP BIT(8) CONSTANT('51'X),      /* SW TO NCP              */
*    SRUSWEP  BIT(8) CONSTANT('52'X);      /* SW TO EP               */
*/*                                                                  */
*DCL SRIGNAC  BIT(2) CONSTANT('00'B),      /* STSN IGNORE ACTION CODE*/
*    SRSETAC  BIT(2) CONSTANT('01'B),      /* STSN SET ACTION CODE   */
*    SRINVAC  BIT(2) CONSTANT('10'B),      /* STSN INVAL ACTION CODE */
*    SRSTSAC  BIT(2) CONSTANT('11'B),      /* STSN SET/TEST ACT. CODE*/
*    SRRQRAC  BIT(2) CONSTANT('00'B),      /* STSN REQ RESET ACT CODE*/
*    SRTSPAC  BIT(2) CONSTANT('01'B),      /* STSN TEST POS. ACT CODE*/
*    SRTSNAC  BIT(2) CONSTANT('11'B);      /* STSN TEST NEG. ACT CODE*/
*/*                                                                  */
*DCL SRDFCL1  BIT(8) CONSTANT('01'X),      /* DATA FLOW CONTROL LEV-1*/
*    SRDFCL2  BIT(8) CONSTANT('02'X),      /* DATA FLOW CONTROL LEV-2*/
*    SRDFCL3  BIT(8) CONSTANT('03'X),      /* DATA FLOW CONTROL LEV-3*/
*    SRDFCL4  BIT(8) CONSTANT('04'X);      /* DATA FLOW CONTROL LEV-4*/
*/*                                                                  */
*DCL SRNETSRV  BIT(8) CONSTANT('01'X),  /* NETWORK SERVICES          */
*    SRPHYMS  BIT(8) CONSTANT('03'X),   /* PHYSICAL MAINTENANCE      */
*    SRACTPU  BIT(8) CONSTANT('11'X),   /* ACTIVATE PHYSICAL UNIT    */
*    SRDACTPU BIT(8) CONSTANT('12'X),   /* DEACTIVATE PHYSICAL UNIT  */
*    SRACTLU  BIT(8) CONSTANT('0D'X),   /* ACTIVATE LOGICAL UNIT     */
*    SRDACTLU BIT(8) CONSTANT('0E'X),   /* DEACTIVATE LOGICAL UNIT   */
*    SRBIND   BIT(8) CONSTANT('31'X),   /* BIND SESSION              */
*    SRUNBIND BIT(8) CONSTANT('32'X),   /* UNBIND SESSION            */
*    SRRMSTAT BIT(8) CONSTANT('81'X),   /* RMS REQUEST CODE          */
*    SRSDT    BIT(8) CONSTANT('A0'X),   /* START DATA TRAFFIC        */
*    SRCLEAR  BIT(8) CONSTANT('A1'X),   /* CLEAR                     */
*    SRSTSN   BIT(8) CONSTANT('A2'X);   /* SET AND TEST SEQ NUMBER   */
*/*                                                                  */
*DCL SRESYSS  BIT(8) CONSTANT('00'X),  /* TO BE DEFINED LATER        */
*    SRLSYSS  BIT(8) CONSTANT('00'X),  /* TO BE DEFINED LATER        */
*    SRMDR    BIT(8) CONSTANT('00'X),  /* TO BE DEFINED LATER        */
*    SRANSOP  BIT(8) CONSTANT('00'X),  /* TO BE DEFINED LATER        */
*    SRANSCT  BIT(8) CONSTANT('00'X),  /* TO BE DEFINED LATER        */
*    SRCAPM   BIT(8) CONSTANT('00'X);  /* TO BE DEFINED LATER        */
*/*      FORMATTED SYSTEM SERVICES TYPE                              */
*DCL  NSRUNS  BIT(8) CONSTANT('01'X);  /* NETWORK SERVICES INDICATOR */
*/*      NS SUBCATEGORY VALUES FOR NETWORK SERVICES                  */
*DCL                                                               0407
*     NSRUPCS BIT(8) CONSTANT('02'X),  /* PHYSICAL CONFIG. SERVICES  */
*     NSRUDSS BIT(8) CONSTANT('06'X);  /* DATA/SESSION SERVICES      */
*/*      REQUEST CODE VALUES FOR PHYSICAL CONFIGURATION SERVICES     */
*DCL                                                               0408
*     NSRUCT  BIT(8) CONSTANT('01'X),  /* CONTACT                    */
*     NSRUCTD BIT(8) CONSTANT('80'X),  /* CONTACTED                  */
*     NSRUDSCT BIT(8) CONSTANT('02'X), /* DISCONTACT                 */
*     NSRUIPLI BIT(8) CONSTANT('03'X), /* IPL INITIAL                */
*     NSRUIPLT BIT(8) CONSTANT('04'X), /* IPL TEXT                   */
*     NSRUIPLF BIT(8) CONSTANT('05'X), /* IPL FINAL                  */
*     NSRUDMPI BIT(8) CONSTANT('06'X), /* DUMP INITIAL               */
*     NSRUDMP  BIT(8) CONSTANT('07'X), /* DUMP                       */
*     NSRUDMPF BIT(8) CONSTANT('08'X), /* DUMP FINAL                 */
*     NSRUACTL BIT(8) CONSTANT('0A'X), /* ACTIVATE LINK              */
*     NSRUDCTL BIT(8) CONSTANT('0B'X), /* DEACTIVATE LINK            */
*     NSRURPO  BIT(8) CONSTANT('09'X), /* REMOTE POWER OFF           */
*     NSRUSSV  BIT(8) CONSTANT('11'X), /* SET STATE VECTOR           */
*     NSRUANS  BIT(8) CONSTANT('16'X), /* ENABLE ANSWER              */
*     NSRUAANS BIT(8) CONSTANT('17'X), /* ABANDON ANSWER             */
*     NSRUDIAL BIT(8) CONSTANT('0E'X), /* DIAL                       */
*     NSRUADIL BIT(8) CONSTANT('18'X), /* ABANDON DIAL               */
*     NSRUACON BIT(8) CONSTANT('0F'X), /* ABANDON CONNECTION         */
*     NSRUANA  BIT(8) CONSTANT('19'X), /* ASSIGN NET ADDRESS         */
*     NSRUFNA  BIT(8) CONSTANT('1A'X), /* FREE NET ADDRESS           */
*     NSRUOH   BIT(8) CONSTANT('84'X), /* OFF HOOK                   */
*     NSRUINOP BIT(8) CONSTANT('81'X); /* INOPERATIVE                */
*/*   REQUEST CODE VALUES FOR MAINTENANCE SERVICES                   */
*DCL  NSRUATRC BIT(8) CONSTANT('02'X), /* ACTIVATE TRACE             */
*     NSRUDTRC BIT(8) CONSTANT('03'X); /* DEACTIVATE TRACE           */
*/*   REQUEST CODE VALUES FOR PRE-SNA SERVICES                       */
*DCL  NSRUCTXL BIT(8) CONSTANT('01'X), /* CHANGE TRANS LIMIT         */
*     NSRUCNPL BIT(8) CONSTANT('02'X), /* CHANGE NEGATIVE POLL       */
*     NSRUCSL  BIT(8) CONSTANT('03'X), /* CHANGE SESSION LIMIT       */
*     NSRUCPL  BIT(8) CONSTANT('04'X); /* CHANGE POLL                */
*/*      REQUEST CODE VALUES FOR DATA/SESSION SERVICES               */
*DCL                                                               0411
*     NSRUINSF BIT(8) CONSTANT('81'X), /* INITATE-SELF               */
*     NSRUTMSF BIT(8) CONSTANT('83'X), /* TERMINATE-SELF             */
*     NSRUNSPE BIT(8) CONSTANT('04'X); /* NS PROCEDURE ERROR         */
*/*  UNBIND RU---THIS STRUCTURE IS AN OVERLAY FOR SRUDATA            */
*DCL  1  ISTUNBRU DEF(SRUTYPE),    /* UNBIND MINUS OPCODE            */
*        2 UNBTYPE  CHAR(1);       /* TYPE OF UNBIND                 */
*                                                                  0412
*                                                                  0412
*DCL SRRQR  BIT(8) CONSTANT('A3'X);    /* ELEMENT RECOVERY          */
*DCL SRUSTERR BIT(32) CONSTANT('20000000'X); /* STATE ERROR MASK     */
*DCL SRURRERR BIT(32) CONSTANT('08000000'X); /* REQUEST REJECT MASK  */
*DCL SRUFIERR BIT(32) CONSTANT('10000020'X); /* FUNCTION INTERP MASK */
*DCL SRUFISEN BIT(16) CONSTANT('1000'X);     /* FUNCTION INTERP SENSE*/
*DCL SRUPESEN BIT(16) CONSTANT('8000'X);     /* PATH ERROR SENSE     */
*DCL SRUOPCHK BIT(32) CONSTANT('00000001'X); /* OPERATION CHK SENSE  */
*DCL SRUPESNS BIT(32) CONSTANT('80000000'X); /* PATH ERROR SENSE     */
*DCL SRSIGNAL BIT(8) CONSTANT('C9'X);                              0421
*DCL SRUSRBID BIT(8) CONSTANT('C8'X);                              0422
*DCL SRLUS    BIT(8) CONSTANT('04'X);                              0423
*DCL SRRTR    BIT(8) CONSTANT('05'X);                              0424
*DCL SRRSHUTD BIT(8) CONSTANT('C2'X);                              0425
*/*                                                                  */
*DCL SRUPE    BIT(8) CONSTANT('80'X),     /* PATH ERROR              */
*    SRUCPME  BIT(8) CONSTANT('40'X),     /* CPM ERROR               */
*    SRUSTATE BIT(8) CONSTANT('20'X),     /* STATE ERROR             */
*    SRUFIE   BIT(8) CONSTANT('10'X),     /* FUNCTION INTERPRETER ERR*/
*    SRURRE   BIT(8) CONSTANT('08'X),     /* REQUEST REJECT          */
*    SRUZERO  BIT(8) CONSTANT('00'X);                              0426
*/*  PATH ERRORS                                                     */
*DCL SRUINF   BIT(8) CONSTANT('01'X),     /* INTERMED. NODE FAILURE  */
*    SRULF    BIT(8) CONSTANT('02'X),     /* LINK FAILURE            */
*    SRULUI   BIT(8) CONSTANT('03'X),     /* LU INOPERATIVE          */
*    SRUNODAF BIT(8) CONSTANT('04'X),     /* NO DAF                  */
*    SRUNOSES BIT(8) CONSTANT('05'X),     /* NO SESSION              */
*    SRUFID   BIT(8) CONSTANT('06'X),     /* FID                     */
*    SRUMPF   BIT(8) CONSTANT('07'X),     /* MPF                     */
*    SRUPRI   BIT(8) CONSTANT('08'X),     /* PRIORITY                */
*    SRUSEC   BIT(8) CONSTANT('09'X),     /* SECURITY                */
*    SRUCODE  BIT(8) CONSTANT('0A'X),     /* CODE                    */
*    SRUINTH  BIT(8) CONSTANT('0B'X);     /* INCOMPLETE TH           */
*/*  CPM ERRORS                                                      */
*DCL SRUPENS  BIT(8) CONSTANT('01'X),     /* PE NOT SUPPORTED        */
*    SRURRNNS BIT(8) CONSTANT('02'X),     /* RRN NOT SUPPORTED       */
*    SRURNS   BIT(8) CONSTANT('03'X),     /* RETRY NOT SUPPORTED     */
*    SRULNS   BIT(8) CONSTANT('04'X),     /* LOG NOT SUPPORTED       */
*    SRUINRH  BIT(8) CONSTANT('05'X);     /* INCOMPLETE RH           */
*/*  STATE ERRORS                                                    */
*DCL SRUSEQNR BIT(8) CONSTANT('01'X),     /* SEQUENCE NUMBER         */
*    SRUCHAIN BIT(8) CONSTANT('02'X),     /* CHAINING                */
*    SRUBRCAT BIT(8) CONSTANT('03'X),     /* BRACKET ( CATASTROPHIC )*/
*    SRUCHDIR BIT(8) CONSTANT('04'X);     /* CHANGE DIRECTION        */
*/*  FUNCTION INTERPRETER ERRORS                                     */
*DCL SRURUDE  BIT(8) CONSTANT('01'X),     /* RU DATA ERROR           */
*    SRURUSE  BIT(8) CONSTANT('02'X),     /* RU STRUCTURE ERROR      */
*    SRUFUNC  BIT(8) CONSTANT('03'X),     /* FUNCTION UNKNOWN        */
*    SRUFNS   BIT(8) CONSTANT('04'X),     /* FUNCTION NOT SUPPORTED  */
*    SRUHFE   BIT(8) CONSTANT('05'X),     /* HORIZONTAL FORMAT ERROR */
*    SRUVFE   BIT(8) CONSTANT('06'X);     /* VERTICAL FORMAT ERROE   */
*/*  REQUEST REJECT ERRORS                                           */
*DCL SRURNA   BIT(8) CONSTANT('01'X),     /* RESOURCE NOT AVAILABLE  */
*    SRUINREQ BIT(8) CONSTANT('02'X),     /* INTERVENTION REQUIRED   */
*    SRUMCW   BIT(8) CONSTANT('03'X),     /* MISSING CODEWORD        */
*    SRUINCW  BIT(8) CONSTANT('04'X),     /* INVALID CODEWORD        */
*    SRUSLE   BIT(8) CONSTANT('05'X),     /* SESSION LIMIT EXCEEDED  */
*    SRULUU   BIT(8) CONSTANT('06'X),     /* LU UNKNOWN              */
*    SRULUIN  BIT(8) CONSTANT('07'X),     /* LU INACTIVE             */
*    SRULURS  BIT(8) CONSTANT('08'X),     /* LU RESERVED             */
*    SRUMI    BIT(8) CONSTANT('09'X),     /* MODE INCOSISTENCY       */
*    SRUPR    BIT(8) CONSTANT('0A'X),     /* PERMISSION REJECTED     */
*    SRUFD    BIT(8) CONSTANT('0B'X),     /* FUNCTION DISABLED       */
*    SRUFUNS  BIT(8) CONSTANT('0C'X),     /* FUNCTION NOT SUPPORTED  */
*    SRUQUED  BIT(8) CONSTANT('0D'X),     /* QUEUED                  */
*    SRULUNA  BIT(8) CONSTANT('0E'X),     /* LU NOT AUTHORIZED       */
*    SRUEUMNA BIT(8) CONSTANT('0F'X),     /* EUM NOT AUTHORIZED      */
*    SRUMRID  BIT(8) CONSTANT('10'X),     /* MISSING REQUESTOR ID    */
*    SRUBREAK BIT(8) CONSTANT('11'X),     /* BREAK                   */
*    SRUISR   BIT(8) CONSTANT('12'X),     /* INSUFFICIENT SYS RESRCE */
*    SRUBRE   BIT(8) CONSTANT('13'X);     /* BRACKET RACE ERROR      */
*/*  FOUR BYTE EQUATES FOR SRUSENSE                                  */
*DCL SRUSEQNQ BIT(32) CONSTANT('20010000'X); /* SEQUENCE NUMBER ERR. */
*/********************************************************************/
*/*                                                                  */
*/*    ISTCPWA - COMMAND PROCESSOR WORK AREA                         */
*/*                                                                  */
*/********************************************************************/
*/*  REVISIONS                                         004 01/27/75  */
*DCL  1  ISTCPWA BASED(NCSCPWPT),   /* COMMAND PROC. WORK AREA       */
*        2 *        FIXED(32),      /* SWITCHES AND COUNTERS         */
*          3 CPWGBL   BIT(16),      /* GLOBAL SWITCHES, COUNTER      */
*            4 CPWFMT   BIT(1),     /* FORMAT SWITCH (PL1 OR BAL)    */
*            4 CPWTYP   BIT(1),     /* PARAMETER TYPE PERMITTED      */
*            4 CPWEOR   BIT(1),     /* END OF RECORD SWITCH          */
*            4 *        BIT(2),     /* RESERVED                      */
*            4 CPWSPE   BIT(1),     /* SPECIAL CASE SWITCH           */
*            4 CPWSIG   BIT(1),     /* SIGNIFICANCE STARTED SWITCH   */
*            4 CPWBLS   BIT(1),     /* BLANK(S) SUPPRESSED SWITCH    */
*            4 CPWPPC   FIXED(8),   /* POSITIONAL PARAMETER COUNT    */
*              5 CPWPLX   BIT(1),   /* PARAMETER LIMIT EXCEEDED      */
*          3 CPWLCL   BIT(16),      /* LOCAL SWITCHES, COUNTER       */
*            4 CPWSEL   BIT(1),     /* SELECT SWITCH                 */
*            4 CPWSSR   BIT(1),     /* MAG CARD DATA SWITCH          */
*            4 CPWQUO   BIT(1),     /* QUOTE CHARACTER SWITCH        */
*            4 *        BIT(5),     /* RESERVED                      */
*            4 CPWPNC   FIXED(8),   /* PARENTHESES COUNTER           */
*        2 CPWTPT   PTR(31),        /* PTR TO USSTAB PPB QUEUE       */
*        2 CPWVPT   PTR(31),        /* PTR TO VERB CHARACTER STRING  */
*        2 CPWSPT   PTR(31),        /* PTR TO SYNONYM CHAR STRING    */
*        2 CPWPPT   PTR(31),        /* PTR TO GPB QUEUE FOR COMMAND  */
*        2 CPWIPT   PTR(31),        /* INPUT DATA POINTER            */
*        2 CPWILN   FIXED(15),      /* INPUT DATA LENGTH             */
*        2 CPWRTC   FIXED(8),       /* INTERNAL RETURN CODE          */
*        2 CPWVRB   CHAR(9),        /* AREA TO CONTAIN COMMAND VERB  */
*        2 CPWKWD   CHAR(9),        /* KEYWORD BUILD AREA            */
*          3 CPWKLN   FIXED(8),     /* LENGTH OF KEYWORD             */
*          3 CPWKCH   CHAR(8),      /* KEYWORD CHARACTER STRING      */
*        2 CPWVAL   CHAR(256),      /* VALUE BUILD AREA              */
*          3 CPWVLN   FIXED(8),     /* LENGTH OF VALUE               */
*          3 CPWVCH   CHAR(255);    /* VALUE CHARACTER STRING        */
*/*                                                                  */
*DCL  1  CPWMSG DEFINED(CPWKWD),    /* MESSAGE BUILD AREA            */
*        2 CPWMLN   FIXED(15),      /* LENGTH OF MESSAGE             */
*        2 CPWMTX   CHAR(262);      /* MESSAGE TEXT AREA             */
*/*                                                                  */
*/********************************************************************/
*/*                                                                  */
*/*    CONSTANTS TO SET FORMAT SWITCH (CPWFMT)                       */
*/*                                                                  */
*/********************************************************************/
*DCL CPWPL1   BIT(1) CONSTANT('0'B);/* TO SET CPWFMT = PL1           */
*DCL CPWBAL   BIT(1) CONSTANT('1'B);/* TO SET CPWFMT = BAL           */
*/********************************************************************/
*/*                                                                  */
*/*    CONSTANTS TO SET PARAMETER TYPE SWITCH (CPWTYP)               */
*/*                                                                  */
*/********************************************************************/
*DCL CPWPPP   BIT(1) CONSTANT('0'B);/* POSIT PARMS PERMITTED         */
*DCL CPWNPP   BIT(1) CONSTANT('1'B);/* NO POSITIONAL PARMS           */
*/********************************************************************/
*/*                                                                  */
*/*    CONSTANTS TO SET OTHER SWITCHES                               */
*/*                                                                  */
*/********************************************************************/
*DCL CPWZRO   BIT(1) CONSTANT('0'B);/* TO TURN OFF A SWITCH          */
*DCL CPWONE   BIT(1) CONSTANT('1'B);/* TO TURN ON A SWITCH           */
*/********************************************************************/
*/*                                                                  */
*/*    RETURN CODE CONSTANTS (CPWRTC)                                */
*/*                                                                  */
*/********************************************************************/
*DCL CPWSUC   FIXED(8) CONSTANT(0); /* SUCCESSFUL RETURN CODE        */
*DCL CPWEOC   FIXED(8) CONSTANT(4); /* END OF COMMAND                */
*DCL CPWERR   FIXED(8) CONSTANT(8); /* SYNTAX ERROR                  */
*DCL CPWEOV   FIXED(8) CONSTANT(12);/* END OF VALUE                  */
*DCL CPWSTG   FIXED(8) CONSTANT(16);/* INSUFFICIENT STORAGE          */
*DCL CPWUCH   FIXED(8) CONSTANT(40);/* UNRECOGNIZED CHARACTER        */
*DCL CPWCON   FIXED(8) CONSTANT(44);/* CONTINUE                      */
*/* LOGICAL CHANNEL COMMAND WORD                                      *
*/* ADD A DECLARE                                      003 10/18/74   *
*DCL  1  ISTLCCW BDY(WORD) BASED,                                  0448
*        2  LCCWOP    CHAR(1),         /* OPERATION CODE -CONTROL     *
*           3  LCCWSI BIT(1),          /* SESS INIT / START DIALOG FLG*
*           3  LCCWSD BIT(1),          /* SESS DISCON/END DIALOG FLG  *
*           3  LCCWRWOP BIT(6),        /* READ/WRITE OPERATION CODE   *
*              4  * BIT(1),            /* RESERVED                    *
*              4  LCCWSOP BIT(1),      /* SPECIAL OPERATION LIKE   0448
*                                         ERASE OR READ CONT          *
*              4  LCCWCTL BIT(4),      /* CONTROL TYPE                *
*                 5  LCCWMODE BIT(2),  /* MODE TYPE                   *
*                 5  LCCWTYPE BIT(2),  /* OPERATION TYPE              *
*        2  LCCWFLAG  CHAR(1),         /* FLAG BYTE                   *
*           3  LCCWCD BIT(1),          /* CHAIN DATA                  *
*           3  LCCWCC BIT(1),          /* CHAIN COMMAND               *
*           3  LCCWCKPT BIT(1),        /* SUPPRESS 3705 CHECK POINT
*                                         RECORD                      *
*           3  LCCWNTVC BIT(1),        /* DO NOT PERFORM VALCHEK      *
*           3  LCCWIDAT BIT(1),        /* LCCWDATA CONTAINS DATA      *
*           3  LCCWLSI BIT(1),         /* LCCW SYNCH INDICATOR        *
*              4  LCCWPER BIT(1),      /* POST=RESP                   *
*           3  LCCWRFI BIT(1),         /* REQUEST FEEDBACK INDICATOR  *
*           3  LCCWACI BIT(1),         /* ADDITION COMMAND INDICATOR  *
*        2  LCCWCNT FIXED(16),         /* DATA COUNT                  *
*        2  LCCWDATA PTR(31);          /* DATA ADDRESS OR IMMED. DATA *
*/* LOGICAL COMMAND CODES */                                       0449
*DCL  LXDQ     BIT(8) CONSTANT('3B'X), /* RESET DEVICE QUEUE          *
*     LXEC     BIT(8) CONSTANT('4B'X), /* RESET AT END OF COMMAND     *
*     LXO      BIT(8) CONSTANT('5B'X), /* RESET ORDERLY               *
*     LCCWPRGE BIT(8) CONSTANT('6B'X), /* PURGE                       *
*     LWH      BIT(8) CONSTANT('0F'X), /* WRITE HEADER INDI. 1ST BLOCK*
*     LWRVI    BIT(8) CONSTANT('1F'X), /* WRITE RVI                   *
*     LWNA     BIT(8) CONSTANT('2F'X), /* WRITE NEGATIVE ACK          *
*     LWAA     BIT(8) CONSTANT('3F'X), /* WRITE ALTERNATE ACK         *
*     LWPLG    BIT(8) CONSTANT('5F'X), /* WRITE ACK LEADING GRAPHICS  *
*     LWNLG    BIT(8) CONSTANT('6F'X), /* WRITE NACK LEADING GRAPHICS *
*     LSMDE    BIT(8) CONSTANT('4F'X), /* SET MODE                    *
*     LIFBM    BIT(8) CONSTANT('7F'X), /* INDIC 1ST BLOCK OF MESSAGE  *
*     LTEST    BIT(8) CONSTANT('FE'X), /* TEST LCCW                   *
*     LPRMPT   BIT(8) CONSTANT('13'X), /* PREEMPT LCCW                *
*     LRSTR    BIT(8) CONSTANT('43'X), /* RESTORE LCCW                *
*     LEXEC    BIT(8) CONSTANT('FF'X), /* SPECIAL CONTROL OPERATION   *
*     LREAD    BIT(2) CONSTANT('10'B),  /* READ TYPE LCCW             *
*     LWRITE   BIT(2) CONSTANT('01'B),  /* WRITE TYPE LCCW            *
*     LCNTRL   BIT(2) CONSTANT('11'B),  /* CONTROL TYPE LCCW          *
*     LRESET   BIT(4) CONSTANT('1011'B),/* RESET COMMANDS             *
*     LTIC     BIT(8) CONSTANT('08'X),  /* LOGICAL TIC                *
*     LWR      BIT(6) CONSTANT('000001'B),  /* WRITE CONVERSATIONAL   *
*     LWB      BIT(6) CONSTANT('000101'B),  /* WRITE BLOCK            *
*     LWM      BIT(6) CONSTANT('001001'B),  /* WRITE MESSAGE          *
*     LWT      BIT(6) CONSTANT('001101'B),  /* WRITE TRANSMISSION     *
*     LEWM     BIT(6) CONSTANT('011001'B),  /* ERASE/WRITE MESSAGE    *
*     LEWT     BIT(6) CONSTANT('011101'B),  /* ERASE/WRITE TRNSMSSN   *
*     LEAU     BIT(6) CONSTANT('010001'B),  /* ERASE ALL UNPROTECTED  *
*     LRB      BIT(6) CONSTANT('000110'B),  /* READ BLOCK             *
*     LRM      BIT(6) CONSTANT('001010'B),  /* READ MESSAGE           *
*     LRT      BIT(6) CONSTANT('001110'B),  /* READ TRANSMISSION      *
*     LRMOD    BIT(6) CONSTANT('010010'B),  /* READ MODIFIED          *
*     LRBUF    BIT(6) CONSTANT('010110'B),  /* READ BUFFER            *
*     LRCONT   BIT(6) CONSTANT('011010'B),  /* READ CONTINUOUS        *
*     LRPEP    BIT(6) CONSTANT('011110'B),  /* READ PERPETUAL         *
*     LCPYM    BIT(6) CONSTANT('101001'B),  /* COPY MESSAGE           *
*     LCPYT    BIT(6) CONSTANT('101101'B),  /* COPY TRANSMISSION      *
*     LD       BIT(8) CONSTANT('23'X),  /* DISCONNECT                 *
*     LDEC     BIT(8) CONSTANT('33'X),  /* DISCONNECT WITH END OF CALL*
*     LEOC     BIT(8) CONSTANT('53'X),  /* END OF CALL COMMAND        *
*     LXEL     BIT(8) CONSTANT('0B'X),  /* RESET ERROR LOCK           *
*     LXC      BIT(8) CONSTANT('1B'X),  /* RESET CONDITIONAL          *
*     LXI      BIT(8) CONSTANT('2B'X),  /* RESET IMMEDIATE            *
*     LC       BIT(8) CONSTANT('03'X),  /* CONTACT                    *
*     LWPA     BIT(8) CONSTANT('FD'X); /* WRITE POSITIVE ACK          *
*DCL  LMT      BIT(2) CONSTANT('11'B), /* TRANSMISSION MODE           *
*     LMS      BIT(2) CONSTANT('00'B), /* SPECIAL MODE LIKE CONV, EAU *
*     LMB      BIT(2) CONSTANT('01'B), /* BLOCK MODE                  *
*     LMM      BIT(2) CONSTANT('10'B); /* MSG OR CONTINUOUS MODE      *
*/* FOLLOWING EQUATES FOR  - PORT SOLICITOR (DIAL)                    *
*/* PORT SOLICITOR COMMAND CODES                                      *
*DCL PSOL    BIT(8) CONSTANT('FE'X), /* SPECIAL PORT SOLICITOR     0451
*                                       COMMAND                       *
*    STCTL    BIT(8) CONSTANT('01'X), /* START CONTROL                *
*    RESTCTL  BIT(8) CONSTANT('02'X), /* RESET & CONTROL - REDRIVE    *
*    STIPUT   BIT(8) CONSTANT('03'X); /* START INPUT                  *
*/*   FOLLOWING EQUATES FOR SDLC SUPPORT                              *
*DCL  LCCHOLD  BIT(8) CONSTANT('01'X),  /* HOLD                       *
*     LCCRHOLD BIT(8) CONSTANT('02'X),  /* RELEASE HOLD               *
*     LSEND    BIT(8) CONSTANT ('F1'X), /* SEND                       *
*     LCLEAR   BIT(8) CONSTANT ('F2'X), /* CLEAR                      *
*     LCRUD    BIT(8) CONSTANT ('F3'X), /* CLEAR, UNBIND              *
*     LCRUDNFY BIT(8) CONSTANT ('F4'X), /* CLEAR, UNBIND, NOTIFY      *
*     LNFY     BIT(8) CONSTANT ('F5'X), /* NOTIFY                     *
*     LRELCB   BIT(8) CONSTANT ('F6'X), /* RELEASE CB                 *
*     LRESTSR  BIT(8) CONSTANT ('F7'X), /* RESETSR                    *
*     LCLRNFY  BIT(8) CONSTANT('F8'X),  /* CLEAR/NOTIFY               *
*     LCHPUR   BIT(8) CONSTANT('F9'X);  /* PURGE                      *
*DCL  LCCWSIZE FIXED(8) CONSTANT(8);    /* LCCW SIZE                  *
*DCL  LRDS     BIT(8) CONSTANT('FF'X);  /* RECORD DEV STATS COMMAND   *
*DCL  LQUIS    BIT(8) CONSTANT('FE'X);  /* QUIESCE COMMAND            *
*/*              LOGICAL CHANNEL PROGRAM BLOCK                       */
*/*                                                                  */
*/*  REVISIONS                                         006 03/24/75  */
*/*                                                                  */
*DCL  1  ISTLCPB BDY(WORD) BASED(LCPBPTR),                         0456
*        2 LCPTYPE CHAR(1),            /* TYPE CODE                  */
*        2 LCPLNGTH  PTR(8),           /* LENGTH IN BYTES            */
*        2 LCPREQTG CHAR(2),           /* LCPB REQ. TAG FIELD        */
*          3 LCPFLAGS BIT(8),          /* FLAG BYTE                  */
*            4 LCPZRT00 BIT(1),        /* LOGICAL ERROR FLAG         */
*            4 LCPZRT01 BIT(1),        /* CONTROL BLOCK ERROR        */
*            4 LCPZF001 BIT(1),        /* LCP START PROCESS FLAG     */
*              5 LCPZRT02 BIT(1),      /* I/O INITIATION DISABLED    */
*                6 LCPZRTL2 BIT(1),    /* END OF SCHEDULABLE BLOCK   */
*            4 LCPZF002 BIT(1),        /* LCP IN PROCESSING FLAG     */
*              5 LCPZRT03 BIT(1),      /* GO LOOK AT FMCB LINE STATE */
*                                      /* FIELD (REQ. TAG OVERLAY)   */
*                6 LCPZRTL3 BIT(1),    /* WRITE/READ REQUEST         */
*            4 LCPZF003 BIT(1),        /* LCP PROCESSING COMPLETE FLAG*
*              5 LCPZRT04 BIT(1),      /* STPR SET IN BDU FLAG       */
*                                      /* (REQ. TAG OVERLAY)         */
*                6 LCPZRTL4 BIT(1),    /* FEEDBACK REQUESTED         */
*            4 LCPZF004 BIT(1),        /* SINGLE LCCW/LCP FLAG       */
*              5 LCPZRT05 BIT(1),      /* FEEDBACK TO BE ROUTED TO   */
*                                      /* ICNCB FMCB (REQ. TAG       */
*                                      /* OVERLAY)                   */
*                6 LCPZRTL5 BIT(1),    /* DECREMENT SCHED COUNT ON DEQ*
*            4 LCPZRT06 BIT(1),        /* CRITICAL TEXT BLOCK        */
*                                      /* FLAG (REQ. TAG OVERLAY)    */
*              5 LCPZRTL6 BIT(1),      /* WRITE REQUEST              */
*            4 LCPZRT07 BIT(1),        /* BUFFER TRACE ACTIVE        */
*                                      /* FLAG (REQ. TAG OVERLAY)    */
*              5 LCPZRTL7 BIT(1),      /* SCHEDULING FLAG            */
*          3 LCPMNRCD CHAR(1),         /* LCP MINOR REJECTION CODE   */
*            4 LCPZRT08 BIT(1),        /* I/O TRACE ACTIVE FLAG      */
*                                      /* (REQ. TAG OVERLAY)         */
*              5 LCPZRTL8 BIT(1),      /* DEVICE END NOTIFICATION    */
*            4 LCPZRT09 BIT(1),        /* DIALOGUE SCHED DISABLED    */
*              5 LCPZRTL9 BIT(1),      /* CRITICAL TEXT FLAG         */
*            4 LCPZRT0A BIT(1),        /* SIMULATED CONTACT FLAG     */
*            4 LCPZRT0B BIT(1),        /* SIMULATED DISCONNECT FLAG  */
*        2 LCPCHAIN PTR(31),           /* APS CHAIN                  */
*          3 LCPCHAI1 PTR(8),                                      0456
*            4 LCPCHNG BIT(1),         /* GATE BIT                   */
*          3 LCPCHAI2 PTR(24),         /* ADDRESS FIELD              */
*        2 LCPRUCNT PTR(8),            /* NUMBER OF RU FOR THIS LCPB */
*          3 LCPZMIRC CHAR(1),         /* MINOR RETURN CODE          */
*        2 LCPFLAG2 CHAR(1),           /* SECOND FLAG BYTE           */
*          3 LCPPRFLG BIT(1),          /* PACING REQUIRED            */
*          3 LCPASYN  BIT(1),          /* ASYNCHRONOUS LCPB          */
*          3 LCPRSTRT BIT(1),          /* RESTART LCPB               */
*          3 LCPTLBPI BIT(1),          /* TPIOS BLOCK LCCW           */
*            4 LCPZRIMM BIT(1),        /* RESET IMMED REQUIRED ON ERR*/
*          3 LCPFID0  BIT(1),          /* FID0 TH INDICATOR FOR RECORD*
*            4 LCPEXRES BIT(1),        /* EXCEP. RESPONSE SPEC. 3270R*/
*          3 LCPDSTAT BIT(1),          /* DIALOGUE STATE BIT, 3270R  */
*                                      /* 0=REQ. REJECT,1=STATE ERROR*/
*          3 LCPFREE  BIT(1),          /* DEALLOCATE LCPB 3270R      */
*          3 LCPATOP  BIT(1),          /* ATOP LCPB  3270R           */
*        2 LCPSEQ   FIXED(16),         /* OUTBOUND SEQUENCE NUMBER   */
*          3 LCPRRCCT PTR(8),          /* COUNT OF RESPONSES RECEIVED*/
*          3 LCPRRCNT PTR(8),          /* COUNT OF RESPONSES REQUESTED*
*        2 LCPLCCW1 PTR(31),           /* ADDR FIRST LCCW FOR FID1   */
*        2 LCPCID CHAR(4) BDY(WORD),   /* COMMUNICATION ID           */
*          3 LCPSAF BIT(16),           /* SOURCE IDENTIFICATION      */
*          3 LCPDAF BIT(16),           /* DESTINATION IDENTIFICATION */
*        2 LCPNXLCW PTR(31),           /* ADDR NEXT LCCW             */
*        2 LCPFDBA PTR(31),            /* BTU ADDRESS                */
*          3 LCPFDB1 PTR(8),                                       0456
*          3 LCPFDB2 PTR(24),          /* ADDRESS FIELD              */
*        2 LCPTLBAD PTR(31),           /* ADDRESS OF TLB             */
*        2 LCPFOSN  BIT(16),           /* SEQUENCE NUMBER FIRST RU   */
*        2 LCPFSNCH FIXED(15),         /* 1ST SEQ NUMBER IN RU CHAIN */
*        2 LCPSTYPE FIXED(8),          /* LCPB SUB-TYPE X'FF' = RESET,*
*                                      /* X'00' = NON-RESET          */
*        2 LCPFLG1 CHAR(1),            /* FLAGS                      */
*          3 LCPRESET BIT(1),          /* A TPQUE WITH RESET QUEUED  */
*                                      /* THIS ELEMENT               */
*          3 LCPINTER BIT(1),          /* INTERNAL LCPB              */
*          3 LCPDIRPT BIT(1),          /* NOT SEND W/POST=SCHED=0    */
*          3 LCPREDRV BIT(1),          /* LCPB IS FOR REDRIVE        */
*          3 LCPSTLB  BIT(1),          /* TLB NOT TO BE FREED        */
*          3 LCPTRANS BIT(1),          /* DATA INCLUDES CONTROL CHARS*/
*          3 LCPRSV78 BIT(2),          /* RESERVED                   */
*        2 LCPLCCWC BIT(8),            /* COUNT OF LCCWS             */
*        2 LCPRSV77 CHAR(1),           /* RESERVED                   */
*        2 LCPFLCCW PTR(31),           /* ADDR OF FIRST LCCW         */
*          3 LCPUBFSB PTR(31),         /* UNBIND FSB ADDRESS         */
*        2 LCPCLREP PTR(31),           /* PTR TO CLEAR LCPB IN UCB   */
*/*  NOTE:  THE FOLLOWING FIELD - LCPLCCW MUST BE THE LAST FIELD     */
*/*         IN THIS CONTROL BLOCK.  THE CONTROL BLOCK ISTDCLCP HAS   */
*/*         FIELDS IN IT WHICH MUST BE CONTIGUOUS WITH LCPLCCW       */
*        2 LCPLCCW  CHAR(LENGTH(ISTLCCW)) BDY(WORD), /* FIRST LCCW   */
*          3 LCPRSTQH PTR(31),         /* RESET LCPB QUEUE HEADER    */
*          3 LCPPABA  PTR(31),         /* PAB POINTER                */
*            4 LCPRPHA  PTR(31),       /* RPH POINTER                */
*              5 LCPFTYPE BIT(1);      /* FEEDBACK TYPE              */
*/*     CONSTANTS FOR LCPTYPE                                         *
*DCL  LCRPHFT  BIT(1) CONSTANT('1'B);                              0457
*DCL  LCPABFT  BIT(1) CONSTANT('0'B);                              0458
*DCL LCPBFIRM BIT(8) CONSTANT('10'X);  /* LU FAILED, CLSDST, SCHED LOST
*                                         TERM, OPNDST MAY BE TRIED   *
*DCL LCPBTERM BIT(8) CONSTANT('11'X);  /* TERM RECEIVED,CLSDST,    0460
*                                         SCHED LOST TERM             *
*/*                                                                   *
*                                                                  0461
*DCL 1 LCPZTIE BDY(WORD) DEFINED(LCPCID), /* TOLTEP INTERFACE      0461
*                                         ELEMENT OVERLAY            */
*       2  LCPZFMCA PTR(31),           /* ACTIVE FMCB ADDRESS        */
*       2  LCPZSNA PTR(31),            /* SYMBOLIC NAME ADDRESS      */
*       2  LCPZSNAM CHAR(8) BDY(WORD), /* SYMBOLIC NAME              */
*          3  LCPZTRV1 PTR(31),        /* RESERVED FOR RESTORE LCP   */
*          3  LCPZTRV4 PTR(31);        /* RESERVED FOR RESTORE LCP   */
*DCL LCTYPE BIT(8) CONSTANT('04'X);                                0462
*DCL PLCPTYPE BIT(8) CONSTANT('28'X);  /* PURGE LCPB TYPE ID         */
*DCL LCPCLACB BIT(8) CONSTANT('04'X);  /* LCPB FROM CLOSE ACB        */
*DCL LSRSTYPE BIT(8) CONSTANT('FF'X);  /* RESET SUBTYPE              */
*DCL LCPETYPE BIT(8) CONSTANT('40'X);  /* EXTENDED LCPB TYPE ID      */
*/*                                                                  */
*/*  MINOR RETURN CODES                                              */
*/*                                                                  */
*DCL LCMCRSTR BIT(8) CONSTANT('F7'X),  /* MINOR RC FOR RESETSR       */
*    LCPMNEW  BIT(8) CONSTANT('02'X),  /* EARLY WARNING,             */
*                                      /* RECOVERY IN PROGRESS       */
*    LCPMNPF  BIT(8) CONSTANT('03'X),  /* PERM. I/O FAILURE          */
*    LCPMNAS  BIT(8) CONSTANT('04'X),  /* AUTO NETWORK SHUTDOWN      */
*    LCPMNCL  BIT(8) CONSTANT('06'X),  /* CLOSE/CLSDST OCCURED       */
*    LCPMNVD  BIT(8) CONSTANT('07'X),  /* VARY DEACTIVATE            */
*    LCPMNTF  BIT(8) CONSTANT('10'X),  /* TEMP RECORD DEVICE FAILURE */
*    LCPMNSF  BIT(8) CONSTANT('01'X),  /* TEMP BASIC FAILURE /       */
*    LCPMNTS  BIT(8) CONSTANT('11'X),  /* TERMINATE SELF             */
*    LCPMNAP  BIT(8) CONSTANT('0A'X),  /* APPL. ISSUED CLEAR         */
*    LCPMNPR  BIT(8) CONSTANT('0B'X),  /* PREEMPT                    */
*    LCPMNRE  BIT(8) CONSTANT('0C'X);  /* RESTORE                    */
*/* VS1, VS2 TPIOS SAVEAREA FORMAT */                              0468
*DCL  1  ISTZSAVE BDY(WORD) BASED,                                 0468
*        2   ZSAZSVBC PTR(31),         /* SAVEAREA BACK CHAIN        */
*            3   ZSAZSVMS CHAR(1),     /* MODULE TRACE CODE          */
*                4 ZSAZACTV BIT(1),    /* ACTIVE SAVE AREA FLAG      */
*        2   ZSAZSVFC PTR(31),         /* SAVEAREA FORWARD CHAIN     */
*        2   ZSAZSVRR PTR(31),         /* RETURN REGISTER            */
*        2   ZSAZSVVR (6) PTR(31),    /* VARIABLE REGS (7-12) SVEAREA*/
*        2   ZSAZTRAC CHAR(4);        /* EBCDIC NAME OF OWNER        */
*/*                                                                0469
*THE FOLLOWING EQUATES SHOULD READ ''FIXED(8) CONSTANT(LENGTH(X))'',
*WHERE X IS THE NAME OF THE VARIABLE CONTROL BLOCK OR FIELD OF WHICH
*LENGTH IS THE VALUE BEING EQUATED, SHOULD THE PLS COMPILER BE     0469
*BE ABLE TO TAKE IT.                                               0469
*                                                                    */
*DCL ZSAZSVVA FIXED(8) CONSTANT(8);  /* DISPLACEMENT TO VARIABLE REGS*/
*DCL ZSAZSVSZ FIXED(8) CONSTANT(40); /* LENGTH OF ISTZSAVE           */
*/* PREFIX FOR CRR                                                   */
*/*                                                                  */
*/* RELEASE 1 - JUNE 28, 1973                                        */
*/*                                                                  */
*DCL 1 ISTPFCRR BASED BDY(WORD),        /* PREFIX FOR CRR            */
*     2  PFCCRR   CHAR(4),              /* CRR HEADER                */
*        3  PFCCRRID CHAR(1),           /* CRR ID FIELD              */
*           4  CRRID CHAR(1),           /* BASIC CTL LAYER DEFINITION*/
*        3  PFCRSV10 CHAR(1),           /* RESERVED FOR ALIGNMENT    */
*        3  PFCCRRLN CHAR(2),           /* CRR LENGTH                */
*           4  CRRLEN CHAR(2),          /* BASIC CTL LAYER DEF       */
*     2  PFCHDR CHAR(8) BDY(WORD),      /* SAVE AREA FOR OLD CRR FRR */
*        3  PFCCRRO  PTR(31),           /* PTR TO OLD CRR            */
*           4  CRRCHAIN PTR(31),        /* BASIC CTL LAYER DEFINITION
*                                          FOR OLD CRR PTR           */
*        3  PFCFRRO  PTR(31),           /* PTR TO OLD FRR            */
*           4  CRRFRR   PTR(31),        /* BASIC CTL LAYER         0471
*                                          DEFINITION OF OLD FRR PTR */
*     2  PFCFTA BIT(8),                 /* ID OF LAST FUNCTION TRACED*/
*     2  PFCRSV01 CHAR(3);              /* ALIGNMENT                 */
*DCL PFIDPIE BIT(8) CONSTANT('80'X);    /* DOS/VS TPIOS              */
*DCL PFIDORE BIT(8) CONSTANT('81'X);    /* DOS/VS BMS                */
*DCL PFIDAPE BIT(8) CONSTANT('82'X);    /* DOS/VS PSS                */
*DCL PFCIDPSV BIT(8) CONSTANT('38'X); /* COMPONENT ID              0475
*                                          PSS - VS1 AND 2           */
*DCL PFCIDTPV BIT(8) CONSTANT('3C'X); /* COMPONENT ID              0476
*                                          TPIOS VS1 AND 2           */
*DCL PFCIDSME BIT(8) CONSTANT('3D'X); /* COMPONENT ID              0477
*                                          STORAGE MANAGEMENT DOS    */
*DCL PFCIDOC BIT(8) CONSTANT('31'X);    /* COMPONENT ID OPEN/CLOSE   */
*DCL PFCIDPS BIT(8) CONSTANT('32'X);    /* PORT SOLICITOR            */
*DCL PFCIDCS BIT(8) CONSTANT('34'X);    /* CLUSTER SOLICITOR         */
*DCL PFCIDIT BIT(8) CONSTANT('35'X);    /* INIT/TERM                 */
*DCL PFCIDVY BIT(8) CONSTANT('36'X);    /* VARY                      */
*DCL PFCIDNS  BIT(8) CONSTANT('37'X);   /* NET. STAT.SRV.            */
*DCL PFCIDTPE BIT(8) CONSTANT('38'X);   /* COMPONENT ID            0484
*                                          TPIOS - DOS               */
*DCL PFCIDCL BIT(8) CONSTANT('39'X);    /* COMPONENT ID            0485
*                                          CONTROL LAYER             */
*DCL PFCIDPSE BIT(8) CONSTANT('3A'X);   /* COMPONENT ID            0486
*                                          PSS - DOS                 */
*DCL PFCIDSMV BIT(8) CONSTANT('3F'X);   /* COMPONENT ID            0487
*                                          STORAGE MANAGEMENT        */
*DCL PFCIDTIO BIT(8) CONSTANT('40'X);   /* COMPONENT ID TIIO       0488
*                                          PROCESSING (VS2)          */
*DCL PFCIDRS  BIT(8) CONSTANT('41'X);   /* ID FOR REMOTE SOLICITOR   */
*/* CRR FOR COMMAND FACILITIES                                      */
*DCL  1  ISTCFCRR BDY(WORD) BASED, /* CRR FOR COMMAND FACILITIES    */
*        2 CFCAUDIT,               /* AUDIT TRAIL FOR CMD FACILITIES*/
*          3 CFCNTRD  CHAR(1),     /* LIST OF MODULES IN COMMAND    */
*                                  /* FACILITIES ENTERED            */
*            4 NCFCS1   BIT(1),    /* IND MODULE ISTCFCS1 ENTERED   */
*            4 NCFCS2   BIT(1),    /* IND MODULE ISTCFCS2 ENTERED   */
*            4 NCFCR1   BIT(1),    /* IND MODULE ISTCFCR1 ENTERED   */
*            4 NCFCRP   BIT(1),    /* IND MODULE ISTCFCRP ENTERED   */
*            4 NCFCR2   BIT(1),    /* IND MODULE ISTCFCR2 ENTERED   */
*            4 NCFRSVD  BIT(3),    /* RESERVED                      */
*          3 CFCCRT   CHAR(1),     /* LIST OF MODULES IN COMMAND    */
*                                  /* FACILITIES RUNNING            */
*            4 CCFCS1   BIT(1),    /* IND MODULE ISTCFCS1 RUNNING   */
*            4 CCFCS2   BIT(1),    /* IND MODULE ISTCFCS2 RUNNING   */
*            4 CCFCR1   BIT(1),    /* IND MODULE ISTCFCR1 RUNNING   */
*            4 CCFCRP   BIT(1),    /* IND MODULE ISTCFCRP RUNNING   */
*            4 CCFCR2   BIT(1),    /* IND MODULE ISTCFCR2 RUNNING   */
*            4 CCFRSVD1 BIT(3);    /* RESERVED                      */
*/* COMPONENT RECOVERY RECORD FOR TPIOS */                         0491
*/*  DELTA                                             006 02/10/75  */
*DCL                                                               0491
*1  ISTZCRR BDY(WORD) BASED,     /* CONTROL WORD                     */
*   2  ZCRCRR CHAR(4),           /* CONTROL WORD                     */
*      3  ZCRID CHAR(1),         /* CONTROL BLOCK ID                 */
*      3  ZCRLEN CHAR(2),        /* LENGTH OF ZCR                    */
*      3  ZCRFLAG CHAR(1),       /* FLAGS                            */
*   2  ZCRCHAIN PTR(31),         /* POINTER TO PREVIOUS ZCR          */
*   2  ZCRFRRA PTR(31),          /* PTR TO FRR                       */
*   2  ZCRFLGS1 CHAR(1),         /* FLGS USED BY REQUEST COMPLETION  */
*      3  ZCREXSW BIT(1),        /* EXIT SWITCH                      */
*      3  ZCRQUESW BIT(1),       /* QUEUE SWITCH                     */
*      3  ZCRDEQSW BIT(1),       /* DEQUEUE SWITCH                   */
*      3  ZCRWAIT BIT(1),        /* WAIT Q ANALYSIS COMPLETE         */
*      3  ZCRNRMEX BIT(1),       /* NORMAL EXIT TO BE TAKEN          */
*      3  ZCRENDLP BIT(1),       /* END OF LOOP SWITCH               */
*      3  ZCRUNSOL BIT(1),       /* UNSOLICITED DATA                 */
*      3  ZCRFEXIT BIT(1),       /* FORCE EXIT SWITCH                */
*   2  ZCRFLGS2 CHAR(1),         /* FLAGS USED WITHIN TPIOS          */
*      3  ZCRLOCAL BIT(1),       /* LOCAL SUPPORT                    */
*      3  ZCRSHEDI BIT(1),       /* IMMEDIATE SCHEDULE               */
*      3  ZCRFMSED BIT(1),       /* FMCB SEARCH ENDED                */
*      3  ZCROB    BIT(1),       /* OUTBOUND PROC IN PROGRESS        */
*      3  ZCRIF0E1 BIT(1),       /* SWITCH FOR STRUCTURED PGM USED BY
*                                   INBOUND PROCESSING               */
*      3  ZCRIF0E2 BIT(1),       /* SWITCH FOR STRUCTURED PGM USED BY
*                                   INBOUND PROCESSING               */
*      3  ZCRIF0E3 BIT(1),       /* SWITCH FOR STRUCTURED PGM USED BY
*                                   INBOUND PROCESSING               */
*   2  ZCRSWFLD CHAR(1),         /* SWITCHES FOR TPIOS OUTBOUND      */
*      3  ZCRENDSH BIT(1),       /* EXIT FROM REMOTE DEV SCHEDULER   */
*         4  ZCRSLCP BIT(1),     /* SCHEDULE LCPB                    */
*      3  ZCREXTYP BIT(1),       /* TPEXIT TYPE                      */
*      3  ZCRENDPR BIT(1),       /* EXIT FROM INNER PROCESS          */
*      3  ZCRNDLCP BIT(1),       /* EXIT FROM LCPB PROCESSING        */
*         4  ZCROB1 BIT(1),      /* REMOTE DEV SCHED 1ST TIME SWITCH */
*      3  ZCRENDX BIT(1),        /* EXIT FROM LCCW/BTU XLATION       */
*      3  ZCRENDXL BIT(1),       /* EXIT FROM LCCW PROC              */
*      3  ZCRENDAN BIT(1),       /* EXIT FROM LCPB ANALYSIS          */
*      3  ZCRRESET BIT(1),                                         0491
*         4  ZCRCNLXL BIT(1),    /* CANCEL FURTHER XLATE             */
*   2  ZCRFLGS3 CHAR(1),         /* FLAGS FOR OUTBOUND PROCESSING    */
*      3  ZCRTIC BIT(1),         /* SELECT NOT TO BE SENT            */
*      3  ZCRTPCON BIT(1),       /* TPIOS CONTACT SENT               */
*      3  ZCRTPDIS BIT(1),       /* TPIOS DISCONNECT TO BE SENT      */
*      3  ZCRDISC  BIT(1),       /* DISCONNECT IN PROCESS            */
*      3  ZCREDRIV BIT(1),       /* DO DERIVE                        */
*      3  ZCRNOFRE BIT(1),       /* NO FREEING OF SIO QUEUE          */
*      3  ZCRWRPTR BIT(1),       /* WRITE TO PRINTER REQUEST         */
*      3  ZCRINLCP BIT(1),       /* ERROR OCCURED DURING OUTBND PROC */
*   2  ZCRGENSW CHAR(1),         /* GENERAL SWITCHES                 */
*      3  ZCRTSW1  BIT(1),       /* TEMP SW FOR STRUCTURED PGM       */
*      3  ZCRTSW2  BIT(1),       /* TEMP SW FOR STRUCTURED PGM       */
*      3  ZCRRT06  BIT(1),       /* CRITICAL TEXT OPTION             */
*      3  ZCRLCSYN BIT(1),       /* LCCW SYNC SPECIFIED              */
*      3  ZCREXRES BIT(1),       /* EXCEPTION RESPONSE SPECIFIED     */
*      3  ZCRCLRBD BIT(1),       /* FLAG INDICATING BIND WAS CLEARED */
*      3  ZCRBRIS  BIT(1),       /* BRACKET REJECTED DUE TO IN BRAC. */
*      3  ZCRF1RES BIT(1),       /* FID1 RESPONSE TO BE GENERATED    */
*   2  ZCRPFLGS CHAR(1),         /* UTILITIES PROC OPTION FLAGS      */
*      3  ZCRQAHED BIT(1),      /* QXFR RTN TO USE INSERT OPT'N ON TPQ*
*      3  *        BIT(7),      /* RESERVED                          */
*   2  ZCRIBPR CHAR(1),          /* INBOUND PROCESSING FLAGS         */
*         3  ZCRNOBUF BIT(1),    /* FSB WITH NO BUFFER               */
*         3  ZCRERR   BIT(1),    /* ERROR INDICATOR                  */
*         3  ZCRRELK  BIT(1),    /* RESET ERROR LOCK FUNCTION REQ.   */
*         3  ZCRLCPFR BIT(1),    /* FLAG IND. DEALLOCATE ATOP LCPB   */
*         3  ZCRLCPFD BIT(1),    /* FLAG IND. LCPB FOUND ON WAITQ    */
*         3  ZCR3270  BIT(1),    /* 3270 DEVICE                      */
*         3  ZCR3270R BIT(1),    /* 3270 DEVICE IN RECORD MODE       */
*         3  *        BIT(1),    /* RESERVED                         */
*   2  ZCRSCPSW CHAR(1),         /* SESSION CONTROL FLAGS            */
*         3  ZCRTPEX BIT(1),     /* TP EXIT                          */
*         3  ZCRTPINV BIT(1),    /* INVOKE TPIOS                     */
*         3  ZCRRJLCP BIT(1),    /* LCPB REJECTED                    */
*         3  ZCRLREQ BIT(1),     /* REQUEST                          */
*         3  ZCRPRCMP BIT(1),    /* PROCESSING COMPLETE              */
*         3  ZCRFSBWE BIT(1),    /* FSB IS WORK ELEMENT              */
*         3  ZCRSKIPT BIT(1),    /* SKIP TRACE FLAG                  */
*         3  *       BIT(1),     /* RESERVED                         */
*   2  ZCRCRLCP PTR(31),         /* CURRENT LCPB PTR                 */
*   2  ZCRPARMS BDY(WORD),       /* PARAMETERS PASSED TO UTILITIES */
*      3  ZCRFBPTR PTR(31),      /* PTR TO FROM BUFFER               */
*         4  ZCRCBPTR PTR(31),   /* PTR TO CURRENT BUFFER            */
*      3  ZCRTBPTR PTR(31),      /* PTR TO TO-OR-TRANSLATE BUFFER    */
*      3  ZCRMLNG FIXED(15),     /* LENGTH TO MOVE                   */
*      3  ZCRDFRDA FIXED(15),    /* OFFSET FROM DATA ADDR IN FROM BUF*/
*         4  ZCRDTODA FIXED(15), /* OFFSET FROM DATA ADDR XLATE BUF  */
*      3  ZCRPCOD1 CHAR(1),      /* CODE BYTE FOR ALLOC/DISALLOC     */
*         4  ZCRPPG BIT(1),      /* GET PAGEABLE BUFF                */
*         4  ZCRPLNG BIT(1),     /* LENGTH OF BUFFER SPECIFIED       */
*         4  ZCRPFSB BIT(1),     /* GET FSB                          */
*         4  ZCRPLSBF BIT(1),    /* GET LSCB AND BUFFER              */
*            5 ZCRPLSBQ BIT(1),  /* PURGE LSCB QUEUE                 */
*         4  ZCRPLSCB BIT(1),    /* GET OR RELEASE LSCB              */
*         4  ZCRPBUF BIT(1),     /* GET OR RELEASE BUFFER            */
*         4  ZCRPCFTX BIT(1),    /* CONFIDENTIAL TEXT                */
*         4  ZCRPRES BIT(1),     /* RESERVED                         */
*      3  ZCRPCOD2 CHAR(1),      /* CODE BYTE FOR MOVE               */
*         4  ZCRPPG2 BIT(1),     /* GET PAGEABLE BUFFER              */
*         4  ZCRPFHDR BIT(1),    /* FROM BUFFER FDB TO BE USED       */
*         4  ZCRPMFGF BIT(1),    /* MOVE STARTS WIHT 1ST BUFF IN BLOCK*
*         4  ZCRPRES2 BIT(5),    /* RESERVED                         */
*      3  ZCRPCHAR CHAR(1),      /* TRANSLATE & TEST SEARCH CHARACTER*/
*      3  ZCRPSW   CHAR(1),      /* SWITCH FIELD                     */
*   2  ZCRCCWA PTR(31),          /* PTR TO CURRENT CCW (CCW 1 OR 2)  */
*   2  ZCRBFPTR PTR(31),         /* SAVE 1ST BUFF PTR IN TO-BUFF CHN
*                                   OR LAST BUFFER IN CHANNEL PGM    */
*   2  ZCRZLB PTR(31),           /* PTR TO CURR BUFF IN CHANNEL PGM  */
*   2  ZCRPVZB PTR(31),          /* PTR TO PREVIOUS BUFF IN CHAN PGM */
*   2  ZCRSVRTN BDY(WORD),       /* REG 14 SAVE AREAS                */
*      3  ZCRSVF1 PTR(31),       /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF2 PTR(31),       /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF3 PTR(31),       /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF4 PTR(31),       /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF5 PTR(31),       /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF6 PTR(31),       /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF7 PTR(31),       /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF8 PTR(31),       /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF9 PTR(31),       /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF10 PTR(31),      /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF11 PTR(31),      /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF12 PTR(31),      /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF13 PTR(31),      /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF14 PTR(31),      /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF15 PTR(31),      /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF16 PTR(31),      /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF17 PTR(31),      /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF18 PTR(31),      /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF19 PTR(31),      /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF20 PTR(31),      /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF21 PTR(31),      /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF22 PTR(31),      /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF23 PTR(31),      /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF24 PTR(31),      /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF25 PTR(31),      /* SAVE REQUIRED REGISTER           */
*   2  ZCRWKARA BDY(WORD),       /* TEMPORARY REG SAVE AREA          */
*      3  ZCRSVWK1 PTR(31),      /* SAVE REQUIRED REG                */
*      3  ZCRSVWK2 PTR(31),      /* SAVE REQUIRED REG                */
*      3  ZCRSVWK3 PTR(31),      /* SAVE REQUIRED REG                */
*      3  ZCRSVWK4 PTR(31),      /* SAVE REQUIRED REG                */
*      3  ZCRSVWK5 PTR(31),      /* SAVE REQUIRED REG                */
*   2  ZCRFSBSV PTR(31),         /* FSB CHAIN PTR SAVEAREA           */
*   2  ZCRFBPRC BIT(1),          /* FSB PROCESS SW                   */
*   2  ZCRMOREL BIT(1),          /* MORE ELEMENTS SW                 */
*   2  ZCRSCANQ BIT(1),          /* SCAN QUEUE SW                    */
*   2  ZCRNXTEL BIT(1),          /* NEXT ELEMENT SW                  */
*   2  ZCRXSCHD BIT(1),          /* EXIT SCHEDULE SW                 */
*   2  ZCRLSTFB BIT(1),          /* INBOUND PROC LAST FSB FOR ELEM SW*/
*   2  ZCRTOPQ  BIT(1),          /* QUEUE ELEMENT TO TOP SW          */
*   2  ZCRAWQSW BIT(1),          /* CHECK AWAITQ FOR MORE WORK =1    */
*                                /* CHECK WAITQ =0                   */
*   2  ZCRRCDSV CHAR(1),         /* RETURN CODE SAVEAREA             */
*   2  ZCRPRMTC CHAR(1),         /* PREEMPT COMPLETION PARAMETER BYTE*/
*   2  ZCROPCDE CHAR(1),         /* OP CODE TO BE TRANSFORMED         *
*   2  ZCRR2SV PTR(31),          /* ISTZBFDI REG 2 SAVE EREA         */
*   2  ZCRR13SV PTR(31),         /* ISTSBFDI REG 13 SAVE EREA        */
*   2  ZCRCIDSV BDY(WORD),       /* ISTZBFDI CID SAVE AREA           */
*      3  ZCRSAFSV CHAR(2),      /* ISTZBFDI SAF SAVE AREA           */
*      3  ZCRDAFSV CHAR(2),      /* ISTZBFDI DAF SAVE AREA           */
*   2  ZCRSAVEZ (6) BDY(WORD) CHAR(LENGTH(ISTZSAVE)),              0491
*                                /* SAVE/TRACE AREAS FOR TPIOS MODS  */
*   2  ZCRREMIC PTR(31),        /* POINTER TO REMOTE RN ICNCB        */
*   2  ZCRAUDIT CHAR(36),        /* TPIOS AUDIT TRAIL AREA           */
*      3  ZCRTID CHAR(1),        /* THREAD I.D.                      */
*      3  ZCRTNAME CHAR(4),      /* LAST 4 CHARS OF THREAD NAME      */
*      3  ZCRENTER BIT(248),     /* BIT ARRAY FOR MODULES ENTERED    */
*         4  ZCREAC1A BIT(1),    /* ISTZAC1A ENTERED                 */
*         4  ZCREAC0A BIT(1),    /* ISTZAC0A ENTERED                 */
*         4  ZCREAC0B BIT(1),    /* ISTZAC0B ENTERED                 */
*         4  ZCREAC1B BIT(1),    /* ISTZAC1B ENTERED                 */
*         4  ZCREBCAA BIT(1),    /* ISTZBCAA ENTERED                 */
*         4  ZCREBCAB BIT(1),    /* ISTZBCAB ENTERED                 */
*         4  ZCREBCAE BIT(1),    /* ISTZBCAE ENTERED                 */
*         4  ZCREBCAG BIT(1),    /* ISTZBCAG ENTERED                 */
*         4  ZCREBCAI BIT(1),    /* ISTZBCAI ENTERED                 */
*         4  ZCREBCAM BIT(1),    /* ISTZBCAM ENTERED                 */
*         4  ZCREBCBA BIT(1),    /* ISTZBCBA ENTERED                 */
*         4  ZCREBCBB BIT(1),    /* ISTZBCBB ENTERED                 */
*         4  ZCREBCBI BIT(1),    /* ISTZBCBI ENTERED                 */
*         4  ZCREBCCB BIT(1),    /* ISTZBCCB ENTERED                 */
*         4  ZCREBCDI BIT(1),    /* ISTZBCDI ENTERED                 */
*         4  ZCREBCEB BIT(1),    /* ISTZBCEB ENTERED                 */
*         4  ZCREBCFA BIT(1),    /* ISTZBCFA ENTERED                 */
*         4  ZCREBCFB BIT(1),    /* ISTZBCFB ENTERED                 */
*         4  ZCREBCGA BIT(1),    /* ISTZBCGA ENTERED                 */
*         4  ZCREBCGB BIT(1),    /* ISTZBCGB ENTERED                 */
*         4  ZCREBCHA BIT(1),    /* ISTZBCHA ENTERED                 */
*         4  ZCREBCHB BIT(1),    /* ISTZBCHB ENTERED                 */
*         4  ZCREBCIA BIT(1),    /* ISTZBCIA ENTERED                 */
*         4  ZCREBCIB BIT(1),    /* ISTZBCIB ENTERED                 */
*         4  ZCREBCID BIT(1),    /* ISTZBCID ENTERED                 */
*         4  ZCREBCJA BIT(1),    /* ISTZBCJA ENTERED                 */
*         4  ZCREBCJB BIT(1),    /* ISTZBCJB ENTERED                 */
*         4  ZCREBCKA BIT(1),    /* ISTZBCKA ENTERED                 */
*         4  ZCREBCKB BIT(1),    /* ISTZBCKB ENTERED                 */
*         4  ZCREBCLA BIT(1),    /* ISTZBCLA ENTERED                 */
*         4  ZCREBCLB BIT(1),    /* ISTZBCLB ENTERED                 */
*         4  ZCREBCMB BIT(1),    /* ISTZBCMB ENTERED                 */
*         4  ZCREBCND BIT(1),    /* ISTZBCND ENTERED                 */
*         4  ZCREBCNE BIT(1),    /* ISTZBCNE ENTERED                 */
*         4  ZCREBCOB BIT(1),    /* ISTZBCOB ENTERED                 */
*         4  ZCREBCPB BIT(1),    /* ISTZBCPB ENTERED                 */
*         4  ZCREBCQB BIT(1),    /* ISTZBCQB ENTERED                 */
*         4  ZCREBCRA BIT(1),    /* ISTZBCRA ENTERED                 */
*         4  ZCREBCRB BIT(1),    /* ISTZBCRB ENTERED                 */
*         4  ZCREBCSC BIT(1),    /* ISTZBCSC ENTERED                 */
*         4  ZCREBCXA BIT(1),    /* ISTZBCXA ENTERED                 */
*         4  ZCREBCX0 BIT(1),    /* ISTZBCX0 ENTERED                 */
*         4  ZCREBCY0 BIT(1),    /* ISTZBCY0 ENTERED                 */
*         4  ZCREBCZ0 BIT(1),    /* ISTZBCZ0 ENTERED                 */
*         4  ZCREBC0A BIT(1),    /* ISTZBC0A ENTERED                 */
*         4  ZCREBC0B BIT(1),    /* ISTZBC0B ENTERED                 */
*         4  ZCRECC0A BIT(1),    /* ISTZCC0A ENTERED                 */
*         4  ZCRECC0B BIT(1),    /* ISTZCC0B ENTERED                 */
*         4  ZCRECC1A BIT(1),    /* ISTZCC1A ENTERED                 */
*         4  ZCRECC1B BIT(1),    /* ISTZCC1B ENTERED                 */
*         4  ZCRECC2B BIT(1),    /* ISTZCC2B ENTERED                 */
*         4  ZCREDCA0 BIT(1),    /* ISTZDCA0 ENTERED                 */
*         4  ZCREDCB0 BIT(1),    /* ISTZDCB0 ENTERED                 */
*         4  ZCREDCC0 BIT(1),    /* ISTZDCC0 ENTERED                 */
*         4  ZCREDCD0 BIT(1),    /* ISTZDCD0 ENTERED                 */
*         4  ZCREDCE0 BIT(1),    /* ISTZDCE0 ENTERED                 */
*         4  ZCREDCF0 BIT(1),    /* ISTZDCF0 ENTERED                 */
*         4  ZCREDCH0 BIT(1),    /* ISTZDCH0 ENTERED                 */
*         4  ZCREDCI0 BIT(1),    /* ISTZDCI0 ENTERED                 */
*         4  ZCREDCJ0 BIT(1),    /* ISTZDCJ0 ENTERED                 */
*         4  ZCREDCKA BIT(1),    /* ISTZDCKA ENTERED                 */
*         4  ZCREDCKB BIT(1),    /* ISTZDCKB ENTERED                 */
*         4  ZCREDCL0 BIT(1),    /* ISTZDCL0 ENTERED                 */
*         4  ZCREDCMB BIT(1),    /* ISTZDCMB ENTERED                 */
*         4  ZCREECBA BIT(1),    /* ISTZECBA ENTERED                 */
*         4  ZCREECBB BIT(1),    /* ISTZECBB ENTERED                 */
*         4  ZCREECCA BIT(1),    /* ISTZECCA ENTERED                 */
*         4  ZCREECCB BIT(1),    /* ISTZECCB ENTERED                 */
*         4  ZCREECDA BIT(1),    /* ISTZECDA ENTERED                 */
*         4  ZCREECEA BIT(1),    /* ISTZECEA ENTERED                 */
*         4  ZCREECTA BIT(1),    /* ISTZECTA ENTERED                 */
*         4  ZCREFCEA BIT(1),    /* ISTZFCEA ENTERED                 */
*         4  ZCREFCEB BIT(1),    /* ISTZFCEB ENTERED                 */
*         4  ZCREGCAB BIT(1),    /* ISTZGCAB ENTERED                 */
*         4  ZCREGCBB BIT(1),    /* ISTZGCBB ENTERED                 */
*         4  *        BIT(1),    /* NOT USED                         */
*         4  ZCREGCDB BIT(1),    /* ISTZGCDB ENTERED                 */
*         4  ZCREGCEB BIT(1),    /* ISTZGCEB ENTERED                 */
*         4  ZCREGCLA BIT(1),    /* ISTZGCLA ENTERED                 */
*         4  ZCREGC0A BIT(1),    /* ISTZGC0A ENTERED                 */
*         4  ZCREGC0B BIT(1),    /* ISTZGC0B ENTERED                 */
*         4  ZCREHCAN BIT(1),    /* ISTZHCAN ENTERED                 */
*         4  ZCREICAA BIT(1),    /* ISTZICAA ENTERED                 */
*         4  ZCREICAB BIT(1),    /* ISTZICAB ENTERED                 */
*         4  ZCREICBB BIT(1),    /* ISTZICBB ENTERED                 */
*         4  ZCREICBI BIT(1),    /* ISTZICBI ENTERED                 */
*         4  ZCREICCB BIT(1),    /* ISTZICCB ENTERED                 */
*         4  ZCREICCI BIT(1),    /* ISTZICCI ENTERED                 */
*         4  ZCREICDB BIT(1),    /* ISTZICDB ENTERED                 */
*         4  ZCREICEB BIT(1),    /* ISTZICEB ENTERED                 */
*         4  ZCREICGB BIT(1),    /* ISTZICGB ENTERED                 */
*         4  ZCREICHB BIT(1),    /* ISTZICHB ENTERED                 */
*         4  ZCREICIB BIT(1),    /* ISTZICIB ENTERED                 */
*         4  ZCREICID BIT(1),    /* ISTZICID ENTERED                 */
*         4  ZCREICJB BIT(1),    /* ISTZICJB ENTERED                 */
*         4  ZCREICKB BIT(1),    /* ISTZICKB ENTERED                 */
*         4  ZCREICKE BIT(1),    /* ISTZICKE ENTERED                 */
*         4  ZCREICKG BIT(1),    /* ISTZICKG ENTERED                 */
*         4  ZCREICLB BIT(1),    /* ISTZICLB ENTERED                 */
*         4  ZCREICMB BIT(1),    /* ISTZICMB ENTERED                 */
*         4  ZCREICNA BIT(1),    /* ISTZICNA ENTERED                 */
*         4  ZCREICNB BIT(1),    /* ISTZICNB ENTERED                 */
*         4  ZCREICOA BIT(1),    /* ISTZICOA ENTERED                 */
*         4  ZCREICOB BIT(1),    /* ISTZICOB ENTERED                 */
*         4  ZCREICQA BIT(1),    /* ISTZICQA ENTERED                 */
*         4  ZCREICQB BIT(1),    /* ISTZICQB ENTERED                 */
*         4  ZCREICRB BIT(1),    /* ISTZICRB ENTERED                 */
*         4  ZCREICSB BIT(1),    /* ISTZICSB ENTERED                 */
*         4  ZCREICSC BIT(1),    /* ISTZICSC ENTERED                 */
*         4  ZCREICTB BIT(1),    /* ISTZICTB ENTERED                 */
*         4  ZCREICUB BIT(1),    /* ISTZICUB ENTERED                 */
*         4  ZCREICVB BIT(1),    /* ISTZICVB ENTERED                 */
*         4  ZCREICWB BIT(1),    /* ISTZICWB ENTERED                 */
*         4  ZCREICX0 BIT(1),    /* ISTZICX0 ENTERED                 */
*         4  ZCREIC0B BIT(1),    /* ISTZIC0B ENTERED                 */
*         4  ZCREIC1B BIT(1),    /* ISTZIC1B ENTERED                 */
*         4  ZCREJCAB BIT(1),    /* ISTZJCAB ENTERED                 */
*         4  ZCREJCBB BIT(1),    /* ISTZJCBB ENTERED                 */
*         4  ZCREJCCB BIT(1),    /* ISTZJCCB ENTERED                 */
*         4  ZCREJCDB BIT(1),    /* ISTZJCDB ENTERED                 */
*         4  ZCREJC0B BIT(1),    /* ISTZJC0B ENTERED                 */
*         4  ZCREKCBB BIT(1),    /* ISTZKCBB ENTERED                 */
*         4  ZCREKCBN BIT(1),    /* ISTZKCBN ENTERED                 */
*         4  ZCREKCCN BIT(1),    /* ISTZKCCN ENTERED                 */
*         4  ZCREDCWR BIT(1),    /* ISTZDCWR ENTERED                 */
*         4  ZCREDCWB BIT(1),    /* ISTZDCWB ENTERED                 */
*         4  ZCREDCXR BIT(1),    /* ISTZDCXR ENTERED                 */
*         4  ZCREBCBR BIT(1),    /* ISTZBCBR ENTERED                 */
*         4  ZCREBCDR BIT(1),    /* ISTZBCDR ENTERED                 */
*         4  ZCREBCAR BIT(1),    /* ISTZBCAR ENTERED                 */
*         4  ZCRECCBI BIT(1),    /* ISTZCCBI ENTERED                 */
*         4  ZCRECCAI BIT(1),    /* ISTZCCAI ENTERED                 */
*         4  ZCRECCCI BIT(1),    /* ISTZCCCI ENTERED                 */
*         4  ZCREAC1R BIT(1),    /* ISTZAC1R ENTERED                 */
*         4  ZCREBCSB BIT(1),    /* ISTZBCSB ENTERED                 */
*         4  ZCREDCPR BIT(1),    /* ISTZDCPR ENTERED                 */
*         4  ZCREDCQR BIT(1),    /* ISTZDCQR ENTERED                 */
*         4  ZCREBCAL BIT(1),    /* ISTZBCAL ENTERED                 */
*         4  ZCREBC0L BIT(1),    /* ISTZBC0L ENTERED                 */
*         4  ZCREBCNB BIT(1),    /* ISTZBCNB ENTERED                 */
*         4  ZCREICOE BIT(1),    /* ISTZICOE ENTERED                 */
*         4  ZCREDCNB BIT(1),    /* ISTZDCNB ENTERED                 */
*         4  ZCREKCCB BIT(1),    /* ISTZKCCB ENTERED                 */
*         4  ZCRECFY0 BIT(1),    /* ISTZCFY0 ENTERED                 */
*         4  ZCREDCK0 BIT(1),    /* ISTZDFK0 ENTERED                 */
*         4  ZCREICSG BIT(1),    /* ISTZICSG ENTERED                 */
*         4  ZCREBCIF BIT(1),    /* ISTZBCIF ENTERED                 */
*         4  ZCREDCMF BIT(1),    /* ISTZDCMF ENTERED                 */
*         4  ZCRELCAB BIT(1),    /* ISTZLCAB ENTERED                 */
*         4  ZCREAC2B BIT(1),    /* ISTZAC2B ENTERED                 */
*         4  ZCREIC2B BIT(1),    /* ISTZIC2B ENTERED                 */
*         4  ZCRRSV97 BIT(97),   /* RESERVED                         */
*   2  ZCRCMNRC CHAR(1),                /* PURGE MWOR RETURN CODE    */
*   2  ZCRWORDA CHAR(3),                /* RESERVED FOR LATER USE    */
*   2  ZCRLCPB  CHAR(LENGTH(ISTLCPB)),  /* 3270 S/R LCPB             */
*      3 ZCRRHRU,                       /* SAVEAREA FOR RH AND RU    */
*        4 ZCRRH    CHAR(3),            /* RH                        */
*        4 ZCRRU    CHAR(*);            /* RU                        */
*DCL ZCTYPE BIT(8) CONSTANT('00'X);   /* ZCR TYPE                   */
*DCL ZCLNG FIXED(15) CONSTANT(172);   /* ZCRR LENGTH                */
*DCL ZCRSAVNO BIT(8) CONSTANT('06'X); /* NUMBER OF SAVEAREAS IN ZCRR */
*DCL ZCRLSVNO BIT(8) CONSTANT('04'X); /* NUMBER OF SAVE AREAS IN   0495
*                                         LOCAL SUPPORT              */
*/* *** EQUATES FOR ZCRRCDSV *** */                                0496
*                                                                  0496
*DCL ZCRMRFSB BIT(8) CONSTANT('0C'X);  /* REQUEST COMPLETION MOVE FSB
*                                         TO PROCESS                 */
*DCL ZCRSRCHQ BIT(8) CONSTANT('10'X);  /* REQUEST COMPLETION SEARCH
*                                         REQUEST QUEUE              */
*DCL ZCREXIT  BIT(8) CONSTANT('14'X);  /* REQUEST COMPLETION EXIT    */
*DCL ZCRSFSB  BIT(8) CONSTANT('18'X);  /* REQUEST COMPLETION SINGLE
*                                         FSB                        */
*DCL ZCRDLFSB BIT(8) CONSTANT('1C'X);  /* REQUEST COMPLETION DUAL FSB *
*DCL ZCRNOSCH BIT (8) CONSTANT('20'X); /* REQUEST COMPLETION, EXIT WITH
*                                         SCHED NONE                 */
*DCL ZCRNRSCH BIT (8) CONSTANT('24'X); /* REQUEST COMPLETION, EXIT WITH
*                                         SCHED NORM                 */
*DCL ZCRLGERR FIXED(8) CONSTANT(8);    /* LOGICAL ERROR              */
*DCL ZCPLSCB BIT(8) CONSTANT('08'X);   /* GET A RELEASE LSCB         */
*DCL ZCPBUF  BIT(8) CONSTANT('04'X);   /* GET A RELEASE BUFFER       */
*DCL ZCRTAC0A FIXED(8) CONSTANT(01);   /* LOCAL DEVICE SCHEDULER(OUT)*/
*DCL ZCRTAC0B FIXED(8) CONSTANT(02);   /* REMOTE DEVICE SCHEDLER(OUT)*/
*DCL ZCRTCC1A FIXED(8) CONSTANT(03);   /* LOCAL DIALOG SCHEDLER(IN)  */
*DCL ZCRTCC1B FIXED(8) CONSTANT(04);   /* REMOTE DIALOG SCHEDLER(IN) */
*DCL ZCRTDCE0 FIXED(8) CONSTANT(05);   /* NCP SLOWDOWN RECOVERY      */
*DCL ZCRTDCKA FIXED(8) CONSTANT(06);   /* LOCAL GENERAL FUNCTIONS    */
*DCL ZCRTDCKB FIXED(8) CONSTANT(07);   /* REMOTE GENERAL FUNCTIONS   */
*DCL ZCRTFCEB FIXED(8) CONSTANT(08);   /* REMOTE READ BUFFER ALLOC.  */
*DCL ZCRTGCLA FIXED(8) CONSTANT(09);   /* LCAL CTL & TEST FEEDBACK(IN)*
*DCL ZCRTGC0A FIXED(8) CONSTANT(10);   /* LOCAL REQ. COMPLETION(IN)  */
*DCL ZCRTGC0B FIXED(8) CONSTANT(11);   /* REMOTE REQ. COMPLETION(IN) */
*DCL ZCRTICWB FIXED(8) CONSTANT(12);   /* RESET CLEANUP (PHASE 5)    */
*DCL ZCRTIC0B FIXED(8) CONSTANT(13);   /* REMOTE REQ COMPLTION CTL(IN)*
*DCL ZCRTAC1B FIXED(8) CONSTANT(14);   /* ISTZAC1B THREAD ID         */
*DCL ZCRTIC1B FIXED(8) CONSTANT(15);   /* ISTZIC1B THREAD ID         */
*DCL ZCRTCCBI FIXED(8) CONSTANT(16);   /* ISTZCCBI THREAD ID         */
*DCL ZCRTAC1R FIXED(8) CONSTANT(17);   /* ISTZAC1R THREAD ID         */
*DCL ZCRTAC1A FIXED(8) CONSTANT(18);   /* ISTZAC1A THREAD ID         */
*DCL ZCRTLCAB FIXED(8) CONSTANT(19);   /* ISTZLCAB THREAD ID         */
*/* COMPONENT RECOVERY                                               */
*/*                                                                  */
*DCL 1 ISTASCRR BDY(WORD) BASED,        /* CRR FOR SMS               */
*     2  ASCPFCRR CHAR(LENGTH(ISTPFCRR)),                          0525
*     2  ASCFLAGS CHAR(7),              /* FLAGS                     */
*        3  ASCFLG1 CHAR(2),            /* MODULE TRACE FLAGS        */
*           4  ASCFBA BIT(1),           /* ALLOCATION IN PATH        */
*           4  ASCFBD BIT(1),           /* DE-ALLOCATION IN PATH     */
*           4  ASCFSR BIT(1),           /* FSR IN PATH               */
*           4  ASCPASTR BIT(13),        /* RESERVED PATH FLAGS       */
*        3  ASCFLG2 CHAR(2),            /* MODULE IN CONTROL FLAGS   */
*           4  ASCFBAIC BIT(1),         /* ALLOCATION IN CONTROL     */
*           4  ASCFBDIC BIT(1),         /* DE-ALLOCATION IN CONTROL  */
*           4  ASCFSRIC BIT(1),         /* FSR IN CONTROL            */
*           4  ASCICR BIT(13),          /* RESERVED IN CONTROL FLAGS */
*        3  ASCFLG3 CHAR(3),            /* AUDIT FLAGS               */
*           4  ASCFSRGT BIT(1),         /* FSR DOING GET PROCESSING  */
*           4  ASCFBDAL BIT(1),         /* FBD DOING ALLOCATION      */
*           4  ASCKEYF BIT(1),          /* KEY HAS BEEN ALTERED      */
*           4  ASCLLKF BIT(1),          /* LOCAL LOCK HELD           */
*           4  ASCFBDUD BIT(1),         /* FBD USING USER DATA       */
*           4  ASCAUDIT BIT(19),        /* RESERVED AUDIT BITS       */
*     2  ASCKEY CHAR(1),                /* ORIGINAL KEY              */
*     2  ASCETRYA PTR(31),              /* RETRY ADRS FOR CONTINUE 0525
*                                          OPTION                    */
*     2  ASCUSRGS CHAR(16),             /* SAVE AREA FOR USER REGS 0525
*                                          14 - 1                    */
*        3  ASCUSR14 CHAR(4),           /* REGISTER 14               */
*        3  ASCUSR15 CHAR(4),           /* REGISTER 15               */
*        3  ASCUSR00 CHAR(4),           /* REGISTER 0                */
*        3  ASCUSR01 CHAR(4),           /* REGISTER 1                */
*     2  ASCPSREG CHAR(16);             /* SAVE AREA FOR PSS       0525
*                                          REGS 1 - 4                */
*/*  INITIAL LEVEL                                      001 04/09/75 */
*DCL 1 ISTAPCRR BDY(WORD) BASED,                                   0526
*     2 APCHDRSV CHAR(LENGTH(ISTPFCRR)),  /* HEADER                  */
*     2  APCATFLG CHAR(2),              /* AUDIT TRACE FLAGS         */
*        3  APC51E BIT(1),              /* ISTAPC51 WAS ENTERED      */
*        3  APC52E BIT(1),              /* ISTAPC52  '     '         */
*        3  APC53E BIT(1),              /* ISTAPC53                  */
*        3  APC54E BIT(1),                                         0526
*        3  APC56E BIT(1),                                         0526
*        3  APC57E BIT(1),                                         0526
*        3  APC58E BIT(1),                                         0526
*        3  APC31E BIT(1),                                         0526
*        3 * BIT(8),                    /* RESERVED                  */
*     2  APCRFLG CHAR(2),               /* AUDIT TRACE FLAGS         */
*        3  APC51R BIT(1),              /* ISTAPCR1 IS RUNNING       */
*        3  APC52R BIT(1),              /* ISTAPC52 IS RUNNING       */
*        3  APC53R BIT(1),                                         0526
*        3  APC54R BIT(1),                                         0526
*        3  APC56R BIT(1),                                         0526
*        3  APC57R BIT(1),                                         0526
*        3  APC58R BIT(1),                                         0526
*        3  APC31R BIT(1),                                         0526
*        3  *      BIT(8),              /* RESERVED                  */
*     2  APCPSTA PTR(31),               /* PST@                      */
*     2  APCTCBA PTR(31),               /* TCB@                      */
*     2  APCRTRN PTR(31),               /*@ TO BR14 TO RTN TO SYSTEM */
*     2  APCPABSV PTR(31),              /*SAVED PAB@ TO REDISPATCH   */
*     2  APCQWFO PTR(31),               /* Q@ IN PST WORK AREA ON    */
*     2  APCFRRPM PTR(31),              /* WORKAREA@ RTN'D FROM SETFR*/
*     2  APCSAVE CHAR(72),                                         0526
*        3  APCESTAL CHAR(72),          /* ESTAE PARAMETER LIST AREA */
*     2  APCCOMF CHAR(4) BDY(HWORD),    /* FLAGS USED BY ALL PSS RTN */
*        3  APCCOMF1 CHAR(2),                                      0526
*           4  APCSSTSK BIT(1),         /* IRB TYPE WORK             */
*           4  APCUETSK BIT(1),         /* USER EXIT RUNNING UNDER IRB*
*           4  APCSMCR BIT(1),          /* SMA CRA BEING USED        */
*           4  APCIRB1 BIT(1),          /* IRB1 BEING USED           */
*           4  APCIRB2 BIT(1),          /* IRB2 BEING USED           */
*           4  APCRELR BIT(1),          /*CALL ISTAPC58 TO RLEASE CRA*/
*           4  APCEXIT BIT(1),          /* TELLS ISTAPC58 TO EXIT SYS*/
*           4  APCZLBER BIT(1),         /* ERR WHILE RUNNING ZLFAB PAB*
*           4  * BIT(8),                /* RESERVED                  */
*        3  APCRETCD FIXED(15),         /* RTN CODE FOR R15 FOR SYS  */
*     2  APCSAV1 PTR(31),               /* 1ST SAVE WORD             */
*     2  APCSAV2 PTR(31),               /* 2ND SAVE WORD             */
*     2  APCSWTWD CHAR(4),              /* SWITCH AREA FOR PSS RTN   */
*     2  APC31FLG CHAR(1),              /* ISTAPC31 FLAGS            */
*        3  APCTPXIT BIT(1),            /* TPEXIT IN PROGRESS        */
*        3  APCRESCH BIT(1),            /*PAB TPEXIT OCCURED  RESCHED*/
*        3  APCSORT BIT(1),       /* PAB SORTED TO PROPER PST/MPST   */
*        3  *       BIT(5),       /* RESERVED                        */
*     2  APC52FLG CHAR(1),        /* ISTAPC52 FLAGS                  */
*        3  APCCKRQ BIT(1),       /* CHECK RDY Q FOR WORK            */
*        3  APCSMSR BIT(1),       /* RETURNING SMS RPH               */
*        3  APCQENQ BIT(1),       /* ENQUEUEING PAB'S ON PST Q'S     */
*        3  APCRDQ BIT(1),        /* DEQUEING PAB'S FROM PST RDY Q   */
*        3  APCNWF BIT(1),        /* NO WORK FOUND                   */
*        3  APCWKF   BIT(1),      /* WORK FOUND                      */
*        3    *      BIT(2),      /* RESERVED                        */
*     2  APC53FLG CHAR(1),        /* ISTAPC53 FLAGS                  */
*        3  APCPR153 BIT(1),      /* USED PREALLOCATED CRA           */
*     2  APC54FLG CHAR(1),        /* ISTAPC54 FLAGS                  */
*        3  APCRLST BIT(1),       /* SMS BEING CALLED TO RELEASE UECB*/
*        3  * BIT(7),             /* RESERVED                        */
*     2  APC57FLG CHAR(1),        /* ISTAPC57 FLAGS                  */
*        3  APCRECRA BIT(1),      /* RELEASE CRA BEING DONE          */
*        3  APCNREL BIT(1),       /* DID NOT RELEASE CRA             */
*        3  *   BIT(6),           /* RESERVED                        */
*     2  * CHAR(15);              /* RESERVED                        */
*/*               COMPONENT RECOVERY AREA                            */
*/*  REVISIONS                                         005 04/09/75  */
*DCL 1  ISTCRA BASED BDY(DWORD),        /* COMPONENT RECOVERY AREA   */
*     2  CRABASIC BDY(WORD),            /* CRA WITHOUT PROCESS CRR   */
*      3 CRAHDR CHAR(8) BDY(WORD),      /* CRA HEADER                */
*        4  CRACRR PTR(31),             /* PTR TO ACTIVE CRR         */
*        4  CRAFRR PTR(31),             /* PTR TO ACTIVE FRR         */
*      3 CRALKACT BIT(32),              /* LOCK LEVEL AND          0527
*                                          OWNERSHIP FLAGS           */
*        4  CRALEV32 BIT(1),            /* 1 = LEVEL 32 LOCK HELD    */
*        4  CRALEV31 BIT(1),            /* 1 = LEVEL 31 LOCK HELD    */
*        4  CRALEV30 BIT(1),            /* 1 = LEVEL 30 LOCK HELD    */
*        4  CRALEV29 BIT(1),            /* 1 = LEVEL 29 LOCK HELD    */
*        4  CRALEV28 BIT(1),            /* 1 = LEVEL 28 LOCK HELD    */
*        4  CRALEV27 BIT(1),            /* 1 = LEVEL 27 LOCK HELD    */
*        4  CRALEV26 BIT(1),            /* 1 = LEVEL 26 LOCK HELD    */
*        4  CRALEV25 BIT(1),            /* 1 = LEVEL 25 LOCK HELD    */
*        4  CRALEV24 BIT(1),            /* 1 = LEVEL 24 LOCK HELD    */
*        4  CRALEV23 BIT(1),            /* 1 = LEVEL 23 LOCK HELD    */
*        4  CRALEV22 BIT(1),            /* 1 = LEVEL 22 LOCK HELD    */
*        4  CRALEV21 BIT(1),            /* 1 = LEVEL 21 LOCK HELD    */
*        4  CRALEV20 BIT(1),            /* 1 = LEVEL 20 LOCK HELD    */
*        4  CRALEV19 BIT(1),            /* 1 = LEVEL 19 LOCK HELD    */
*        4  CRALEV18 BIT(1),            /* 1 = LEVEL 18 LOCK HELD    */
*        4  CRALEV17 BIT(1),            /* 1 = LEVEL 17 LOCK HELD    */
*        4  CRALEV16 BIT(1),            /* 1 = LEVEL 16 LOCK HELD    */
*        4  CRALEV15 BIT(1),            /* 1 = LEVEL 15 LOCK HELD    */
*        4  CRALEV14 BIT(1),            /* 1 = LEVEL 14 LOCK HELD    */
*        4  CRALEV13 BIT(1),            /* 1 = LEVEL 13 LOCK HELD    */
*        4  CRALEV12 BIT(1),            /* 1 = LEVEL 12 LOCK HELD    */
*        4  CRALEV11 BIT(1),            /* 1 = LEVEL 11 LOCK HELD    */
*        4  CRALEV10 BIT(1),            /* 1 = LEVEL 10 LOCK HELD    */
*        4  CRALEV09 BIT(1),            /* 1 = LEVEL 9 LOCK HELD     */
*        4  CRALEV08 BIT(1),            /* 1 = LEVEL 8 LOCK HELD     */
*        4  CRALEV07 BIT(1),            /* 1 = LEVEL 7 LOCK HELD     */
*        4  CRALEV06 BIT(1),            /* 1 = LEVEL 6 LOCK HELD     */
*        4  CRALEV05 BIT(1),            /* 1 = LEVEL 5 LOCK HELD     */
*        4  CRALEV04 BIT(1),            /* 1 = LEVEL 4 LOCK HELD     */
*        4  CRALEV03 BIT(1),            /* 1 = LEVEL 3 LOCK HELD     */
*        4  CRALEV02 BIT(1),            /* 1 = LEVEL 2 LOCK HELD     */
*        4  CRALEV01 BIT(1),            /* 1 = LEVEL 1 LOCK HELD     */
*      3 CRAL1PTR PTR(31),              /* PTR TO LEVEL 1 LOCK       */
*      3 CRAL2PTR PTR(31),              /* PTR TO LEVEL 2 LOCK       */
*      3 CRAL3PTR PTR(31),              /* PTR TO LEVEL 3 LOCK       */
*      3 CRAL4PTR PTR(31),              /* PTR TO LEVEL 4 LOCK       */
*      3 CRAL5PTR PTR(31),              /* PTR TO LEVEL 5 LOCK       */
*      3 CRAL6PTR PTR(31),              /* PTR TO LEVEL 6 LOCK       */
*      3 CRAL7PTR PTR(31),              /* PTR TO LEVEL 7 LOCK       */
*      3 CRAL8PTR PTR(31),              /* PTR TO LEVEL 8 LOCK       */
*      3 CRAL9PTR PTR(31),              /* PTR TO LEVEL 9 LOCK       */
*      3 CRALAPTR PTR(31),              /* RESERVED                  */
*/*                                                                  */
*/*   VS1/VS2 EXTENSION                                              */
*/*                                                                  */
*     2  CRARPH CHAR(LENGTH(ISTRPH)),   /* RPH ASSOCIATED WITH     0527
*                                          THIS CRH                  */
*     2  CRAPSS CHAR(LENGTH(ISTAPCRR)), /* PSS CRR                   */
*     2  CRAPROCR CHAR(LENGTH(ISTZCRR)) BDY(DWORD), /* PROCESS CRR   */
*     2  CRASVC CHAR(72) BDY(WORD),     /* SERVICE RTN CRA           */
*        3  CRAASCRR CHAR(LENGTH(ISTASCRR)), /* CRR FOR SMS          */
*        3  CRAHSIZ  PTR(31),           /* HEADER SIZE QUED SMS REQ  */
*        3  CRAMASK  PTR(31),           /* PREFIX MASK QUED SMS REQ  */
*        3  CRABUFA  FIXED(31),         /* BUFF QUE FOR FBQ ALLOCATION*
*           4 CRABFTBA BIT(1),          /* NO BUFFERS ALLOCATED YET   *
*     2  CRARSV01 PTR(31),              /* RESERVED                  */
*     2  CRARSV02 PTR(31),              /* RESERVED                  */
*     2  CRACHAIN PTR(31);              /* CHAIN FIELD USED TO QUEUE
*                                          CRA TO PREALLOCATE QUEUE
*                                          WHEN NOT IN USE           */
*DCL CRALMS32 BIT(32) CONSTANT('80000000'X); /* 32ND LEVEL LOCK MASK */
*DCL CRALMS31 BIT(32) CONSTANT('40000000'X); /* 31ST LEVEL LOCK MASK */
*DCL CRALMS30 BIT(32) CONSTANT('20000000'X); /* 30TH LEVEL LOCK MASK */
*DCL CRALMS29 BIT(32) CONSTANT('10000000'X); /* 29TH LEVEL LOCK MASK */
*DCL CRALMS28 BIT(32) CONSTANT('08000000'X); /* 28TH LEVEL LOCK MASK */
*DCL CRALMS27 BIT(32) CONSTANT('04000000'X); /* 27TH LEVEL LOCK MASK */
*DCL CRALMS26 BIT(32) CONSTANT('02000000'X); /* 26TH LEVEL LOCK MASK */
*DCL CRALMS25 BIT(32) CONSTANT('01000000'X); /* 25TH LEVEL LOCK MASK */
*DCL CRALMS24 BIT(32) CONSTANT('00800000'X); /* 24TH LEVEL LOCK MASK */
*DCL CRALMS23 BIT(32) CONSTANT('00400000'X); /* 23RD LEVEL LOCK MASK */
*DCL CRALMS22 BIT(32) CONSTANT('00200000'X); /* 22ND LEVEL LOCK MASK */
*DCL CRALMS21 BIT(32) CONSTANT('00100000'X); /* 21ST LEVEL LOCK MASK */
*DCL CRALMS20 BIT(32) CONSTANT('00080000'X); /* 20TH LEVEL LOCK MASK */
*DCL CRALMS19 BIT(32) CONSTANT('00040000'X); /* 19TH LEVEL LOCK MASK */
*DCL CRALMS18 BIT(32) CONSTANT('00020000'X); /* 18TH LEVEL LOCK MASK */
*DCL CRALMS17 BIT(32) CONSTANT('00010000'X); /* 17TH LEVEL LOCK MASK */
*DCL CRALMS16 BIT(32) CONSTANT('00008000'X); /* 16TH LEVEL LOCK MASK */
*DCL CRALMS15 BIT(32) CONSTANT('00004000'X); /* 15TH LEVEL LOCK MASK */
*DCL CRALMS14 BIT(32) CONSTANT('00002000'X); /* 14TH LEVEL LOCK MASK */
*DCL CRALMS13 BIT(32) CONSTANT('00001000'X); /* 13TH LEVEL LOCK MASK */
*DCL CRALMS12 BIT(32) CONSTANT('00000800'X); /* 12TH LEVEL LOCK MASK */
*DCL CRALMS11 BIT(32) CONSTANT('00000400'X); /* 11TH LEVEL LOCK MASK */
*DCL CRALMS10 BIT(32) CONSTANT('00000200'X); /* 10TH LEVEL LOCK MASK */
*DCL CRALMS09 BIT(32) CONSTANT('00000100'X); /* 9TH LEVEL LOCK MASK  */
*DCL CRALMS08 BIT(32) CONSTANT('00000080'X); /* 8TH LEVEL LOCK MASK  */
*DCL CRALMS07 BIT(32) CONSTANT('00000040'X); /* 7TH LEVEL LOCK MASK  */
*DCL CRALMS06 BIT(32) CONSTANT('00000020'X); /* 6TH LEVEL LOCK MASK  */
*DCL CRALMS05 BIT(32) CONSTANT('00000010'X); /* 5TH LEVEL LOCK MASK  */
*DCL CRALMS04 BIT(32) CONSTANT('00000008'X); /* 4TH LEVEL LOCK MASK  */
*DCL CRALMS03 BIT(32) CONSTANT('00000004'X); /* 3RD LEVEL LOCK MASK  */
*DCL CRALMS02 BIT(32) CONSTANT('00000002'X); /* 2ND LEVEL LOCK MASK  */
*DCL CRALMS01 BIT(32) CONSTANT('00000001'X); /* 1ST LEVEL LOCK MASK  */
*DCL CRACRA   CHAR(4) CONSTANT('CRA ');      /* CHARACTER C.B. ID    */
* /*  CONNECTION SERVICES COMPONENT RECOVERY RECORD                  */
* /* COMPLETED DCR SOLUTIONS                                         */
* /* 1H0540 APRIL 28, 1973 MB                                        */
*/* ZTR4417 JUNE 20, 73 DNM */                                     0561
* DCL 1 ISTCNSTA BDY(WORD) BASED,       /* CONNECTION SERVICES     0561
*                                          COMPONENT RECOVERY RECORD */
*     2  CNSTPFX CHAR(LENGTH(ISTPFCRR)), /* STANDARD PREFIX        0561
*                                          FOR CRR                   */
*     2  CNSTFLDA CHAR(3),              /* TRACE FIELD A - HISTORY   */
*        3  CNSMRINA BIT(1),            /* MASTER ENTERED            */
*        3  CNSAUTHA BIT(1),            /* ABOUT TO CALL AUTHORI-  0561
*                                          SATION EXIT       ZTR4417 */
*        3  CNSAQINA BIT(1),            /* ACQUIRE ENTERED           */
*        3  CNSXREQA BIT(1),            /* ACQUIRE SATISFIED         */
*        3  CNSQREQA BIT(1),            /* ACQUIRE QUEUED            */
*        3  CNSRLINA BIT(1),            /* RELEASE ENTERED           */
*        3  CNSDORLA BIT(1),            /* DOREL REALLOCATION      0561
*                                          ENTERED                   */
*        3  CNSTRRLA BIT(1),            /* RELEASE OF ACTIVE       0561
*                                          CONNECTION                */
*        3  CNSRQRLA BIT(1),            /* RELEASE QUEUED REQUEST    */
*        3  CNSPSINA BIT(1),            /* PASS ENTERED              */
*        3  CNSACINA BIT(1),            /* ACCEPT ENTERED            */
*        3  CNSLGINA BIT(1),            /* LOGON ENTERED             */
*        3  CNSGBINA BIT(1),            /* PREEMPT ENTERED           */
*        3  CNSCLINA BIT(1),            /* CANCEL ENTERED            */
*        3  CNSCLAQA BIT(1),            /* CANCEL ACQUIRES           */
*        3  CNSTCONA BIT(1),            /* TCONNECT                  */
*        3  CNSACONA BIT(1),            /* ACONNECT                  */
*        3  CNSQUEUA BIT(1),            /* QUEUE                     */
*        3  CNSSEARA BIT(1),            /* SEARCH Q                  */
*        3  CNSGETSA BIT(1),            /* CONNECTION SERVICES     0561
*                                          GETSTORE                  */
*        3  CNSFREEA BIT(1),            /* CONNECTION SERVICES     0561
*                                          FREESTORE                 */
*        3  CNSACCTA BIT(1),            /* ABOUT TO CALL           0561
*                                          ACCOUNTING EXIT           */
*        3  CNSLOG0A BIT(1),            /* LOGON 0                   */
*        3  CNSRSV01 BIT(1),            /* RESERVED                  */
*     2  CNSTFLDB CHAR(3),              /* TRACE FIELD B -         0561
*                                          CURRENT ACTIVITY          */
*        3  CNSMRINB BIT(1),                                       0561
*        3  CNSAUTHB BIT(1),                                       0561
*        3  CNSAQINB BIT(1),                                       0561
*        3  CNSXREQB BIT(1),                                       0561
*        3  CNSQREQB BIT(1),                                       0561
*        3  CNSRLINB BIT(1),                                       0561
*        3  CNSDORLB BIT(1),                                       0561
*        3  CNSTRRLB BIT(1),                                       0561
*        3  CNSRQRLB BIT(1),                                       0561
*        3  CNSPSINB BIT(1),                                       0561
*        3  CNSACINB BIT(1),                                       0561
*        3  CNSLGINB BIT(1),                                       0561
*        3  CNSGBINB BIT(1),                                       0561
*        3  CNSCLINB BIT(1),                                       0561
*        3  CNSCLAQB BIT(1),                                       0561
*        3  CNSTCONB BIT(1),                                       0561
*        3  CNSACONB BIT(1),                                       0561
*        3  CNSQUEUB BIT(1),                                       0561
*        3  CNSSEARB BIT(1),                                       0561
*        3  CNSGETSB BIT(1),                                       0561
*        3  CNSFREEB BIT(1),                                       0561
*        3  CNSACCTB BIT(1),                                       0561
*        3  CNSLOG0B BIT(1),                                       0561
*        3  CNSRSV05 BIT(1);                                       0561
*/*    CRR FOR VARY                                                  */
*/*  REVISIONS                                         009 03/24/75  */
*/*                                                                  */
* DCL 1 ISTVYCRR BDY(WORD) BASED,       /* CRR FOR SSCP              */
*     2  VYCCNS   CHAR(LENGTH(ISTCNSTA)), /* RESERVE SPACE FOR     0562
*                                          CONN. SVCS. AUDIT         */
*     2  VYCAUDIT,                      /* AUDIT TRAIL FOR SSCP      */
*        3  VYCNTRD CHAR(12),           /* LIST OF MODULES IN SSCP   */
*                                       /* 1 = ENTERED               */
*           4  NINCCL BIT(1),           /* MODULE = ISTINCCL         */
*           4  NINCIO BIT(1),           /* MODULE = ISTINCIO         */
*           4  NINCDL BIT(1),           /* MODULE = ISTINCDL         */
*           4  NINCMY BIT(1),           /* MODULE = ISTINCMY         */
*           4  NINCMD BIT(1),           /* MODULE = ISTINCMD         */
*           4  NINCVI BIT(1),           /* MODULE = ISTINCVI         */
*           4  NINCVA BIT(1),           /* MODULE = ISTINCVA         */
*           4  NINCLF BIT(1),           /* MODULE = ISTINCLF         */
*           4  NINCR1 BIT(1),           /* MODULE = ISTINCR1         */
*           4  NINCSM BIT(1),           /* MODULE = ISTINCSM         */
*           4  NINCFS BIT(1),           /* MODULE = ISTINCFS         */
*           4  NINCVX BIT(1),           /* MODULE = ISTINCVX         */
*           4  NINCVP BIT(1),           /* MODULE = ISTINCVP         */
*           4  NINCVS BIT(1),           /* MODULE = ISTINCVS         */
*           4  NINCVN BIT(1),           /* MODULE = ISTINCVO         */
*           4  NINCMS BIT(1),           /* MODULE = ISTINCMS         */
*           4  NINCR2 BIT(1),           /* MODULE = ISTINCR2         */
*           4  NINCIP BIT(1),           /* MODULE = ISTINCIP         */
*           4  NINCD1 BIT(1),           /* MODULE = ISTINCD1         */
*           4  NINCD2 BIT(1),           /* MODULE = ISTINCD2         */
*           4  NINCD3 BIT(1),           /* MODULE = ISTINCD3         */
*           4  NINCD4 BIT(1),           /* MODULE = ISTINCD4         */
*           4  NINCD5 BIT(1),           /* MODULE = ISTINCD5         */
*           4  NINCD6 BIT(1),           /* MODULE = ISTINCD6         */
*           4  NINCD7 BIT(1),           /* MODULE = ISTINCD7         */
*           4  NINCD8 BIT(1),           /* MODULE = ISTINCD8         */
*           4  NINCD9 BIT(1),           /* MODULE = ISTINCD9         */
*           4  NINCE0 BIT(1),           /* MODULE = ISTINCE0         */
*           4  NINCE2 BIT(1),           /* MODULE = ISTINCE2         */
*           4  NINCE3 BIT(1),           /* MODULE = ISTINCE3         */
*           4  NINCE4 BIT(1),           /* MODULE = ISTINCE4         */
*           4  NINCFM BIT(1),           /* MODULE = ISTINCFM         */
*           4  NINCF1 BIT(1),           /* MODULE = ISTINCF1         */
*           4  NINCF3 BIT(1),           /* MODULE = ISTINCF3         */
*           4  NINCF4 BIT(1),           /* MODULE = ISTINCF4         */
*           4  NINCL0 BIT(1),           /* MODULE = ISTINCL0         */
*           4  NINCL1 BIT(1),           /* MODULE = ISTINCL1         */
*           4  NINCL2 BIT(1),           /* MODULE = ISTINCL2         */
*           4  NINCL3 BIT(1),           /* MODULE = ISTINCL3         */
*           4  NINCL4 BIT(1),           /* MODULE = ISTINCL4         */
*           4  NINCL5 BIT(1),           /* MODULE = ISTINCL5         */
*           4  NINCL6 BIT(1),           /* MODULE = ISTINCL6         */
*           4  NINCL7 BIT(1),           /* MODULE = ISTINCL7         */
*           4  NINCL8 BIT(1),           /* MODULE = ISTINCL8         */
*           4  NINCS1 BIT(1),           /* MODULE = ISTINCS1         */
*           4  NINCUM BIT(1),           /* MODULE = ISTINCUM         */
*           4  NINCU0 BIT(1),           /* MODULE = ISTINCU0          *
*           4  NINCU1 BIT(1),           /* MODULE = ISTINCU1         */
*           4  NINCU2 BIT(1),           /* MODULE = ISTINCU2         */
*           4  NINCU3 BIT(1),           /* MODULE = ISTINCU3         */
*           4  NINCU4 BIT(1),           /* MODULE = ISTINCU4         */
*           4  NINCU5 BIT(1),           /* MODULE = ISTINCU5         */
*           4  NINCU6 BIT(1),           /* MODULE = ISTINCU6         */
*           4  NINCU7 BIT(1),           /* MODULE = ISTINCU7         */
*           4  NINCU8 BIT(1),           /* MODULE = ISTINCU8         */
*           4  NINCV2 BIT(1),           /* MODULE = ISTINCV2         */
*           4  NINCV3 BIT(1),           /* MODULE = ISTINCV3         */
*           4  NINCV4 BIT(1),           /* MODULE = ISTINCV4         */
*           4  NINCV5 BIT(1),           /* MODULE = ISTINCV5         */
*           4  NINCV6 BIT(1),           /* MODULE = ISTINCV6         */
*           4  NINCV7 BIT(1),           /* MODULE = ISTINCV7         */
*           4  NINCV8 BIT(1),           /* MODULE = ISTINCV8         */
*           4  NINCV9 BIT(1),           /* MODULE = ISTINCV9         */
*           4  NINCW0 BIT(1),           /* MODULE = ISTINCW0         */
*           4  NINCW2 BIT(1),           /* MODULE = ISTINCW2         */
*           4  NINCW4 BIT(1),           /* MODULE = ISTINCW4         */
*           4  NINCW5 BIT(1),           /* MODULE = ISTINCW5         */
*           4  NINCW6 BIT(1),           /* MODULE = ISTINCW6         */
*           4  NINCW7 BIT(1),           /* MODULE = ISTINCW7         */
*           4  NINCW8 BIT(1),           /* MODULE = ISTINCW8         */
*           4  NINCW9 BIT(1),           /* MODULE = ISTINCW9         */
*           4  NINCX0 BIT(1),           /* MODULE = ISTINCX0         */
*           4  NINCX1 BIT(1),           /* MODULE = ISTINCX1         */
*           4  NINCX2 BIT(1),           /* MODULE = ISTINCX2         */
*           4  NINCX3 BIT(1),           /* MODULE = ISTINCX3         */
*           4  NINCX6 BIT(1),           /* MODULE = ISTINCX6         */
*           4  NINCX7 BIT(1),           /* MODULE = ISTINCX7         */
*           4  NINCX8 BIT(1),           /* MODULE = ISTINCX8         */
*           4  NINCX9 BIT(1),           /* MODULE = ISTINCX9         */
*           4  NINCUA BIT(1),           /* MODULE = ISTINCUA         */
*           4  NINCUB BIT(1),           /* MODULE = ISTINCUB         */
*           4  NINCUQ BIT(1),           /* MODULE = ISTINCUQ         */
*           4  NINCE1 BIT(1),           /* MODULE = ISTINCE1         */
*           4  NINCE5 BIT(1),           /* MODULE = ISTINCE5         */
*           4  NINCE6 BIT(1),           /* MODULE = ISTINCE6         */
*           4  NINCE7 BIT(1),           /* MODULE = ISTINCE7         */
*           4  NINCE8 BIT(1),           /* MODULE = ISTINCE8         */
*           4  NINCR3 BIT(1),           /* MODULE = ISTINCR3         */
*           4  NINCR5 BIT(1),           /* MODULE = ISTINCR5         */
*           4  NINCVO BIT(1),           /* MODULE = ISTINCVO         */
*           4  NINCE9 BIT(1),           /* MODULE = ISTINCE9         */
*           4  NINCFE BIT(1),           /* MODULE = ISTINCFE         */
*           4  VYCRSV01 BIT(4),         /* RESERVED                  */
*        3  VYCCRT CHAR(12),            /* LIST OF SSCP MODULES      */
*                                       /* 2 =  RUNNING              */
*           4  CINCCL BIT(1),           /* MODULE = ISTINCCL         */
*           4  CINCIO BIT(1),           /* MODULE = ISTINCIO         */
*           4  CINCDL BIT(1),           /* MODULE = ISTINCDL         */
*           4  CINCMY BIT(1),           /* MODULE = ISTINCMY         */
*           4  CINCMD BIT(1),           /* MODULE = ISTINCMD         */
*           4  CINCVI BIT(1),           /* MODULE = ISTINCVI         */
*           4  CINCVA BIT(1),           /* MODULE = ISTINCVA         */
*           4  CINCLF BIT(1),           /* MODULE = ISTINCLF         */
*           4  CINCR1 BIT(1),           /* MODULE = ISTINCR1         */
*           4  CINCSM BIT(1),           /* MODULE = ISTINCSM         */
*           4  CINCFS BIT(1),           /* MODULE = ISTINCFS         */
*           4  CINCVX BIT(1),           /* MODULE = ISTINCVX         */
*           4  CINCVP BIT(1),           /* MODULE = ISTINCVP         */
*           4  CINCVS BIT(1),           /* MODULE = ISTINCVS         */
*           4  CINCVN BIT(1),           /* MODULE = ISTINCVO         */
*           4  CINCMS BIT(1),           /* MODULE = ISTINCMS         */
*           4  CINCR2 BIT(1),           /* MODULE = ISTINCR2         */
*           4  CINCIP BIT(1),           /* MODULE = ISTINCIP         */
*           4  CINCD1 BIT(1),           /* MODULE = ISTINCD1         */
*           4  CINCD2 BIT(1),           /* MODULE = ISTINCD2         */
*           4  CINCD3 BIT(1),           /* MODULE = ISTINCD3         */
*           4  CINCD4 BIT(1),           /* MODULE = ISTINCD4         */
*           4  CINCD5 BIT(1),           /* MODULE = ISTINCD5         */
*           4  CINCD6 BIT(1),           /* MODULE = ISTINCD6         */
*           4  CINCD7 BIT(1),           /* MODULE = ISTINCD7         */
*           4  CINCD8 BIT(1),           /* MODULE = ISTINCD8         */
*           4  CINCD9 BIT(1),           /* MODULE = ISTINCD9         */
*           4  CINCE0 BIT(1),           /* MODULE = ISTINCE0         */
*           4  CINCE2 BIT(1),           /* MODULE = ISTINCE2         */
*           4  CINCE3 BIT(1),           /* MODULE = ISTINCE3         */
*           4  CINCE4 BIT(1),           /* MODULE = ISTINCE4         */
*           4  CINCFM BIT(1),           /* MODULE = ISTINCFM         */
*           4  CINCF1 BIT(1),           /* MODULE = ISTINCF1         */
*           4  CINCF3 BIT(1),           /* MODULE = ISTINCF3         */
*           4  CINCF4 BIT(1),           /* MODULE = ISTINCF4         */
*           4  CINCL0 BIT(1),           /* MODULE = ISTINCL0         */
*           4  CINCL1 BIT(1),           /* MODULE = ISTINCL1         */
*           4  CINCL2 BIT(1),           /* MODULE = ISTINCL2         */
*           4  CINCL3 BIT(1),           /* MODULE = ISTINCL3         */
*           4  CINCL4 BIT(1),           /* MODULE = ISTINCL4         */
*           4  CINCL5 BIT(1),           /* MODULE = ISTINCL5         */
*           4  CINCL6 BIT(1),           /* MODULE = ISTINCL6         */
*           4  CINCL7 BIT(1),           /* MODULE = ISTINCL7         */
*           4  CINCL8 BIT(1),           /* MODULE = ISTINCL8         */
*           4  CINCS1 BIT(1),           /* MODULE = ISTINCS1         */
*           4  CINCUM BIT(1),           /* MODULE = ISTINCUM         */
*           4  CINCU0 BIT(1),           /* MODULE = ISTINCU0          *
*           4  CINCU1 BIT(1),           /* MODULE = ISTINCU1         */
*           4  CINCU2 BIT(1),           /* MODULE = ISTINCU2         */
*           4  CINCU3 BIT(1),           /* MODULE = ISTINCU3         */
*           4  CINCU4 BIT(1),           /* MODULE = ISTINCU4         */
*           4  CINCU5 BIT(1),           /* MODULE = ISTINCU5         */
*           4  CINCU6 BIT(1),           /* MODULE = ISTINCU6         */
*           4  CINCU7 BIT(1),           /* MODULE = ISTINCU7         */
*           4  CINCU8 BIT(1),           /* MODULE = ISTINCU8         */
*           4  CINCV2 BIT(1),           /* MODULE = ISTINCV2         */
*           4  CINCV3 BIT(1),           /* MODULE = ISTINCV3         */
*           4  CINCV4 BIT(1),           /* MODULE = ISTINCV4         */
*           4  CINCV5 BIT(1),           /* MODULE = ISTINCV5         */
*           4  CINCV6 BIT(1),           /* MODULE = ISTINCV6         */
*           4  CINCV7 BIT(1),           /* MODULE = ISTINCV7         */
*           4  CINCV8 BIT(1),           /* MODULE = ISTINCV8         */
*           4  CINCV9 BIT(1),           /* MODULE = ISTINCV9         */
*           4  CINCW0 BIT(1),           /* MODULE = ISTINCW0         */
*           4  CINCW2 BIT(1),           /* MODULE = ISTINCW2         */
*           4  CINCW4 BIT(1),           /* MODULE = ISTINCW4         */
*           4  CINCW5 BIT(1),           /* MODULE = ISTINCW5         */
*           4  CINCW6 BIT(1),           /* MODULE = ISTINCW6         */
*           4  CINCW7 BIT(1),           /* MODULE = ISTINCW7         */
*           4  CINCW8 BIT(1),           /* MODULE = ISTINCW8         */
*           4  CINCW9 BIT(1),           /* MODULE = ISTINCW9         */
*           4  CINCX0 BIT(1),           /* MODULE = ISTINCX0         */
*           4  CINCX1 BIT(1),           /* MODULE = ISTINCX1         */
*           4  CINCX2 BIT(1),           /* MODULE = ISTINCX2         */
*           4  CINCX3 BIT(1),           /* MODULE = ISTINCX3         */
*           4  CINCX6 BIT(1),           /* MODULE = ISTINCX6         */
*           4  CINCX7 BIT(1),           /* MODULE = ISTINCX7         */
*           4  CINCX8 BIT(1),           /* MODULE = ISTINCX8         */
*           4  CINCX9 BIT(1),           /* MODULE = ISTINCX9         */
*           4  CINCUA BIT(1),           /* MODULE = ISTINCUA         */
*           4  CINCUB BIT(1),           /* MODULE = ISTINCUB         */
*           4  CINCUQ BIT(1),           /* MODULE = ISTINCUQ         */
*           4  CINCE1 BIT(1),           /* MODULE = ISTINCE1         */
*           4  CINCE5 BIT(1),           /* MODULE = ISTINCE5         */
*           4  CINCE6 BIT(1),           /* MODULE = ISTINCE6         */
*           4  CINCE7 BIT(1),           /* MODULE = ISTINCE7         */
*           4  CINCE8 BIT(1),           /* MODULE = ISTINCE8         */
*           4  CINCR3 BIT(1),           /* MODULE = ISTINCR3         */
*           4  CINCR5 BIT(1),           /* MODULE = ISTINCR5         */
*           4  CINCVO BIT(1),           /* MODULE = ISTINCVO         */
*           4  CINCE9 BIT(1),           /* MODULE = ISTINCE9         */
*           4  CINCFE BIT(1),           /* MODULE = ISTINCFE         */
*           4  VYCRSV03 BIT(4),         /* RESERVED                  */
*     2  VYCRRSAV CHAR(72),             /* SAVE AREA USED BY ISTINCIP*/
*                                       /* TO CALL ISTINCW3          */
*     2  VYCRRCW3 CHAR(8),              /* PARAM LIST USED BY        */
*                                       /* ISTINCIP TO CALL ISTINCW3 */
*     2  VYCRSV04 CHAR(2),              /* RESERVED                  */
*     2  VYCRSV02 PTR(31);              /* RESERVED                  */
*DCL TIDINCDL BIT(8) CONSTANT('00'X);   /* THREAD ID FOR ISTINCDL    */
*DCL TIDINCMY BIT(8) CONSTANT('01'X);   /* THREAD ID FOR ISTINCMY    */
*DCL TIDINCCL BIT(8) CONSTANT('02'X);   /* THREAD ID FOR ISTINCCL    */
*DCL TIDINCFE BIT(8) CONSTANT('04'X);   /* THREAD ID FOR ISTINCFE    */
* GEN (PRINT ON);                                                  0567
         PRINT ON
*/* END OF TPEPILOG */                                             0568
*                                                                  0568
*END ISTINCU1                                                      0568
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.      *
*/*%INCLUDE SYSLIB  (CVT     )                                        *
*/*%INCLUDE SYSUT5  (CUSTDLNK)                                        *
*;                                                                 0568
@EL00001 DS    0H                                                  0568
@EF00001 DS    0H                                                  0568
@ER00001 LM    @14,@12,12(@13)                                     0568
         BR    @14                                                 0568
@DATA    DS    0H
@DATD    DSECT
         DS    0F
ISTINCU1 CSECT
         DS    0F
@CF00062 DC    F'1'
@CF00786 DC    F'72'
@DATD    DSECT
         DS    0D
CVTPTR   DS    A
LCPBPTR  DS    A
CUMSGID  DS    CL4
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
ISTINCU1 CSECT
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
@CV00806 DC    V(ISTINCS1)
         DS    0D
@CC00805 DC    C'005'
CU1BLANK DC    CL1' '
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
NWLNCNTR EQU   @10
CUREG2   EQU   @02
CUREG15  EQU   @15
CUNCSPLR EQU   @01
CUDATDRG EQU   @05
CUSAVERG EQU   @13
CU1ETO   EQU   @06
CU1OTO   EQU   @07
CU1EFROM EQU   @08
CU1OFROM EQU   @09
RPHPTR   EQU   @01
GPR00F   EQU   @00
GPR00P   EQU   @00
GPR01F   EQU   @01
GPR01P   EQU   @01
GPR02F   EQU   @02
GPR02P   EQU   @02
GPR03F   EQU   @03
GPR03P   EQU   @03
GPR04F   EQU   @04
GPR04P   EQU   @04
GPR05F   EQU   @05
GPR05P   EQU   @05
GPR06F   EQU   @06
GPR06P   EQU   @06
GPR07F   EQU   @07
GPR07P   EQU   @07
GPR08F   EQU   @08
GPR08P   EQU   @08
GPR09F   EQU   @09
GPR09P   EQU   @09
GPR10F   EQU   @10
GPR10P   EQU   @10
GPR11F   EQU   @11
GPR11P   EQU   @11
GPR12F   EQU   @12
GPR12P   EQU   @12
GPR13F   EQU   @13
GPR13P   EQU   @13
GPR14F   EQU   @14
GPR14P   EQU   @14
GPR15F   EQU   @15
GPR15P   EQU   @15
ATCLCPTR EQU   1032
CVTMAP   EQU   0
CVTDAR   EQU   CVTMAP+72
CVTFLGS1 EQU   CVTDAR
CVTDCB   EQU   CVTMAP+116
CVTIERLC EQU   CVTMAP+144
CVTOPTA  EQU   CVTMAP+182
CVTOPTB  EQU   CVTMAP+183
CVTGTF   EQU   CVTMAP+236
CVTGTFST EQU   CVTGTF
CVTGTFS  EQU   CVTGTFST
CVTSTATE EQU   CVTGTFST
CVTTMODE EQU   CVTGTFST
CVTFORM  EQU   CVTGTFST
CVTAQAVT EQU   CVTMAP+240
CVTTCMFG EQU   CVTAQAVT
CVTVOLM2 EQU   CVTMAP+244
CVTTATA  EQU   CVTVOLM2
CVTTSKS  EQU   CVTTATA
CVTVOLF2 EQU   CVTTSKS
CVTTAT   EQU   CVTTATA+1
CVTATER  EQU   CVTMAP+248
CVTEXT1  EQU   CVTMAP+252
CVTPURG  EQU   CVTMAP+260
CVTQMSG  EQU   CVTMAP+268
CVTDMSR  EQU   CVTMAP+272
CVTERPV  EQU   CVTMAP+316
CVTINTLA EQU   CVTMAP+320
CVTAPF   EQU   CVTMAP+324
CVTEXT2  EQU   CVTMAP+328
CVTHJES  EQU   CVTMAP+332
CVTPGSIA EQU   CVTMAP+348
CVTA1F1  EQU   CVTMAP+356
CVTSYSK  EQU   CVTMAP+357
CVTVOLM1 EQU   CVTMAP+380
CVTVOLF1 EQU   CVTVOLM1
CVTATMCT EQU   CVTMAP+388
CVTXTNT1 EQU   0
CVTXTNT2 EQU   0
CVTDSSV  EQU   CVTXTNT2
CVTFLGBT EQU   CVTXTNT2+5
CVTQID   EQU   CVTXTNT2+24
CVTSHS   EQU   CVTXTNT2+40
CVTRV400 EQU   CVTXTNT2+52
CVTRV409 EQU   CVTXTNT2+53
CVTATCVT EQU   CVTXTNT2+64
CVTRV429 EQU   CVTXTNT2+84
CVTRV438 EQU   CVTXTNT2+85
CVTRV457 EQU   CVTXTNT2+112
CVTRV466 EQU   CVTXTNT2+113
CVTFIX   EQU   0
CVTRELNO EQU   CVTFIX+252
ISTPOHD  EQU   0
POHSTAT  EQU   ISTPOHD+1
ISTPFX   EQU   0
PFXID    EQU   ISTPFX
ISTNCSPL EQU   0
@NM00005 EQU   ISTNCSPL
NCSPFX   EQU   @NM00005
NCSPLVBF EQU   ISTNCSPL+18
NCSPLVFL EQU   ISTNCSPL+20
NCSPLVF1 EQU   ISTNCSPL+21
NCSPLCMD EQU   ISTNCSPL+60
NCSCMDA  EQU   NCSPLCMD
NCSCRFLG EQU   ISTNCSPL+67
NCSPLRAD EQU   ISTNCSPL+144
NCSIOCID EQU   ISTNCSPL+148
NCSPLCID EQU   NCSIOCID
NCSPLWKA EQU   ISTNCSPL+152
NCSPLCVT EQU   ISTNCSPL+156
NCSPLRPH EQU   ISTNCSPL+160
NCSPLFSB EQU   ISTNCSPL+168
NCSPLFL1 EQU   ISTNCSPL+176
NCSPLFL2 EQU   ISTNCSPL+177
NCSPLFL3 EQU   ISTNCSPL+178
NCSPLFL4 EQU   ISTNCSPL+179
NCSPLFL5 EQU   ISTNCSPL+181
NCSPLAPP EQU   ISTNCSPL+216
NCSSENSE EQU   ISTNCSPL+244
NCSCPWPT EQU   ISTNCSPL+248
NCSMGLPT EQU   ISTNCSPL+252
NCSCRMSK EQU   ISTNCSPL+268
NCSCHKPT EQU   NCSCRMSK
NCSCRMOD EQU   NCSCRMSK+2
NCSPLSID EQU   ISTNCSPL+271
NCSPLSTA EQU   NCSPLSID
NCSPLPHD EQU   NCSPLSID+1
NCSAPP   EQU   0
NCSAPBUE EQU   NCSAPP+88
ISTPAB   EQU   0
PABWQCHN EQU   ISTPAB
PABWEQA  EQU   PABWQCHN
PABCHAIN EQU   PABWQCHN+4
PABRPHFG EQU   ISTPAB+12
PABFLAGS EQU   PABRPHFG
PABERLCK EQU   PABFLAGS
PABERRLK EQU   PABERLCK
ISTLOK   EQU   0
LOKCHN   EQU   ISTLOK+1
LOKCHNG  EQU   LOKCHN
@NM00011 EQU   LOKCHNG+2
ISTDYPAB EQU   0
ISTRPH   EQU   0
RPHFLAGS EQU   ISTRPH+2
RPHAPTYP EQU   RPHFLAGS
RPHFSTLC EQU   RPHFLAGS
RPHFLGB  EQU   ISTRPH+3
RPHRPHA  EQU   ISTRPH+4
RPHTSKID EQU   ISTRPH+8
RPHRESMA EQU   ISTRPH+16
RPHWPFLG EQU   RPHRESMA
RPHWEA   EQU   ISTRPH+24
RPHCSPA  EQU   RPHWEA
RPHSRPRM EQU   ISTRPH+28
RPHCRR   EQU   ISTRPH+32
RPHPABQA EQU   ISTRPH+36
RPHWORK  EQU   ISTRPH+40
RPHSAVE1 EQU   RPHWORK
RPHSBITS EQU   RPHSAVE1+1
ISTATCVT EQU   0
ATCCOM   EQU   ISTATCVT
ATCSTAT  EQU   ATCCOM
ATCSTAT1 EQU   ATCSTAT
ATCSTFLG EQU   ATCSTAT+1
ATCPOFLG EQU   ATCSTAT+2
ATCSTAT4 EQU   ATCSTAT+3
ATCIOTRC EQU   ATCCOM+140
ATCTHTRC EQU   ATCIOTRC
ATCCSMR  EQU   ISTATCVT+296
ATCSHRFG EQU   ISTATCVT+316
ATCHPGM  EQU   ISTATCVT+384
ATCVLCNT EQU   ISTATCVT+772
ATCSOPD  EQU   ISTATCVT+792
ATCSIPD  EQU   ISTATCVT+800
ATCSECST EQU   ISTATCVT+812
ATCAOSM  EQU   ISTATCVT+912
ATCGSRBQ EQU   ATCAOSM+4
ATCGSRBG EQU   ATCGSRBQ
ATCICAPP EQU   ATCAOSM+100
ATCLDAPP EQU   ATCAOSM+120
ATCDAPVT EQU   ATCAOSM+140
ATCVTFLG EQU   ATCAOSM+392
ATCZFLAG EQU   ATCAOSM+588
ISTRH    EQU   0
RHFLAGS  EQU   ISTRH
RH1      EQU   RHFLAGS
RHCHAIN  EQU   RH1
RH2      EQU   RHFLAGS+1
RHRETRY  EQU   RH2
RHRSVD1  EQU   RH2
RH3      EQU   RHFLAGS+2
ISTMGL   EQU   0
MGLRH    EQU   ISTMGL
MGLUSSFL EQU   ISTMGL+3
MGLRUPTR EQU   ISTMGL+4
MGLSENSE EQU   MGLRUPTR+2
MGLNS1   EQU   MGLSENSE
MGLNS2   EQU   MGLSENSE+1
MGLMSGAD EQU   ISTMGL+8
MGLVDATA EQU   ISTMGL+12
ISTRU    EQU   0
RUDATA   EQU   ISTRU
ISTRUB   EQU   0
ISTCPWA  EQU   0
@NM00025 EQU   ISTCPWA
CPWGBL   EQU   @NM00025
CPWPPC   EQU   CPWGBL+1
CPWLCL   EQU   @NM00025+2
CPWILN   EQU   ISTCPWA+24
CPWKWD   EQU   ISTCPWA+36
CPWVAL   EQU   ISTCPWA+45
CUSAVMAP EQU   0
CUBCKPTR EQU   CUSAVMAP+4
CUFWDPTR EQU   CUSAVMAP+8
CUWORKA  EQU   0
CUNXTAV  EQU   CUWORKA
ISTLCCW  EQU   0
LCCWOP   EQU   ISTLCCW
LCCWRWOP EQU   LCCWOP
LCCWCTL  EQU   LCCWRWOP
LCCWFLAG EQU   ISTLCCW+1
LCCWLSI  EQU   LCCWFLAG
ISTLCPB  EQU   0
LCPREQTG EQU   ISTLCPB+2
LCPFLAGS EQU   LCPREQTG
LCPZF001 EQU   LCPFLAGS
LCPZRT02 EQU   LCPZF001
LCPZF002 EQU   LCPFLAGS
LCPZRT03 EQU   LCPZF002
LCPZF003 EQU   LCPFLAGS
LCPZRT04 EQU   LCPZF003
LCPZF004 EQU   LCPFLAGS
LCPZRT05 EQU   LCPZF004
LCPZRT06 EQU   LCPFLAGS
LCPZRT07 EQU   LCPFLAGS
LCPMNRCD EQU   LCPREQTG+1
LCPZRT08 EQU   LCPMNRCD
LCPZRT09 EQU   LCPMNRCD
LCPCHAIN EQU   ISTLCPB+4
LCPCHAI1 EQU   LCPCHAIN
LCPRUCNT EQU   ISTLCPB+8
LCPFLAG2 EQU   ISTLCPB+9
LCPTLBPI EQU   LCPFLAG2
LCPFID0  EQU   LCPFLAG2
LCPSEQ   EQU   ISTLCPB+10
LCPCID   EQU   ISTLCPB+16
LCPFDBA  EQU   ISTLCPB+24
LCPFLG1  EQU   ISTLCPB+37
LCPFLCCW EQU   ISTLCPB+40
LCPLCCW  EQU   ISTLCPB+48
LCPPABA  EQU   LCPLCCW+4
LCPRPHA  EQU   LCPPABA
ISTZSAVE EQU   0
ZSAZSVBC EQU   ISTZSAVE
ZSAZSVMS EQU   ZSAZSVBC
ISTPFCRR EQU   0
PFCCRR   EQU   ISTPFCRR
PFCCRRID EQU   PFCCRR
PFCCRRLN EQU   PFCCRR+2
PFCHDR   EQU   ISTPFCRR+4
PFCCRRO  EQU   PFCHDR
PFCFRRO  EQU   PFCHDR+4
ISTCFCRR EQU   0
CFCAUDIT EQU   ISTCFCRR
CFCNTRD  EQU   CFCAUDIT
CFCCRT   EQU   CFCAUDIT+1
ISTZCRR  EQU   0
ZCRCRR   EQU   ISTZCRR
ZCRFLGS1 EQU   ISTZCRR+12
ZCRFLGS2 EQU   ISTZCRR+13
ZCRSWFLD EQU   ISTZCRR+14
ZCRENDSH EQU   ZCRSWFLD
ZCRNDLCP EQU   ZCRSWFLD
ZCRRESET EQU   ZCRSWFLD
ZCRFLGS3 EQU   ISTZCRR+15
ZCRGENSW EQU   ISTZCRR+16
ZCRPFLGS EQU   ISTZCRR+17
ZCRIBPR  EQU   ISTZCRR+18
ZCRSCPSW EQU   ISTZCRR+19
ZCRPARMS EQU   ISTZCRR+24
ZCRFBPTR EQU   ZCRPARMS
ZCRDFRDA EQU   ZCRPARMS+10
ZCRPCOD1 EQU   ZCRPARMS+12
ZCRPLSBF EQU   ZCRPCOD1
ZCRPCOD2 EQU   ZCRPARMS+13
ZCRSVRTN EQU   ISTZCRR+56
ZCRWKARA EQU   ISTZCRR+156
ZCRCIDSV EQU   ISTZCRR+192
ZCRAUDIT EQU   ISTZCRR+440
ZCRENTER EQU   ZCRAUDIT+5
ZCRLCPB  EQU   ISTZCRR+480
ZCRRHRU  EQU   ZCRLCPB
ISTASCRR EQU   0
ASCFLAGS EQU   ISTASCRR+16
ASCFLG1  EQU   ASCFLAGS
ASCFLG2  EQU   ASCFLAGS+2
ASCFLG3  EQU   ASCFLAGS+4
ASCUSRGS EQU   ISTASCRR+28
ISTAPCRR EQU   0
APCATFLG EQU   ISTAPCRR+16
APCRFLG  EQU   ISTAPCRR+18
APCSAVE  EQU   ISTAPCRR+44
APCCOMF  EQU   ISTAPCRR+116
APCCOMF1 EQU   APCCOMF
APC31FLG EQU   ISTAPCRR+132
APC52FLG EQU   ISTAPCRR+133
APC53FLG EQU   ISTAPCRR+134
APC54FLG EQU   ISTAPCRR+135
APC57FLG EQU   ISTAPCRR+136
ISTCRA   EQU   0
CRABASIC EQU   ISTCRA
CRAHDR   EQU   CRABASIC
CRACRR   EQU   CRAHDR
CRALKACT EQU   CRABASIC+8
CRASVC   EQU   ISTCRA+848
CRABUFA  EQU   CRASVC+68
ISTCNSTA EQU   0
CNSTFLDA EQU   ISTCNSTA+16
CNSTFLDB EQU   ISTCNSTA+19
ISTVYCRR EQU   0
VYCAUDIT EQU   ISTVYCRR+22
VYCNTRD  EQU   VYCAUDIT
NINCU1   EQU   VYCNTRD+5
VYCCRT   EQU   VYCAUDIT+12
CINCU1   EQU   VYCCRT+5
NCSUSSRU EQU   0
NCSRULEN EQU   NCSUSSRU
NCSRUITS EQU   NCSUSSRU+2
MGLUSSMG EQU   0
MGLMSGL  EQU   MGLUSSMG
MGLMSGID EQU   MGLUSSMG+1
MGLUSSTX EQU   0
MGLRUFLD EQU   0
NSRUNA5  EQU   0
CVTS01   EQU   CVTPGSIA
CVTLPDIA EQU   CVTS01+12
CVTDIRST EQU   CVTLPDIA
CVTSLIDA EQU   CVTS01+24
CVTCTLFG EQU   CVTS01+50
CVTRV210 EQU   CVTS01+424
CVTRV219 EQU   CVTS01+425
CVTRV228 EQU   CVTS01+426
CVTRV237 EQU   CVTS01+427
CVTMFRTR EQU   CVTS01+452
CVTRV262 EQU   CVTS01+468
CVTRV271 EQU   CVTS01+469
CVTRV280 EQU   CVTS01+470
CVTRV289 EQU   CVTS01+471
CVTGSDA  EQU   CVTS01+600
ISTSENRU EQU   RUDATA
SRUSENSE EQU   ISTSENRU
SRUSENS1 EQU   SRUSENSE
SRUSENS2 EQU   SRUSENSE+2
ISTSRU   EQU   ISTRUB
SRUDATA  EQU   ISTSRU+1
SRUTYPE  EQU   SRUDATA
SRULDID  EQU   SRUDATA+1
SRUSPSN  EQU   SRULDID
ISTNSRU  EQU   ISTRUB
NSRUNETS EQU   ISTNSRU
NSRUDATA EQU   ISTNSRU+3
NSRUHOOK EQU   NSRUDATA
NSSSVRU  EQU   NSRUDATA
NSSSVNOD EQU   NSSSVRU+3
NSSSVT3  EQU   NSSSVNOD
NSSSVT3C EQU   NSSSVT3+2
NSSSVT3G EQU   NSSSVT3+5
NSSSVT4  EQU   NSSSVNOD
NSSSVT5  EQU   NSSSVNOD
NSRUDAT1 EQU   NSRUDATA
NSRUDAT2 EQU   NSRUDAT1+2
ISTTRRU  EQU   NSRUDAT2
ISTCTDRU EQU   NSRUDAT2
ISTINORU EQU   NSRUDAT2
SRUDAT1  EQU   SRUDATA
SRUDAT1L EQU   SRUDAT1+1
SRUDAT2  EQU   SRUDATA
ISTMRU   EQU   ISTRUB
SRUDATA3 EQU   SRUDATA
SRUDATA4 EQU   SRUDATA
NSRUDAT3 EQU   NSRUDAT2
NSRUDAT4 EQU   NSRUDAT2
NSRUDAT5 EQU   NSRUDAT2
NSRUDAT6 EQU   NSRUDAT2
NSRUDAT7 EQU   NSRUDAT2
NSRUDIL  EQU   NSRUDAT2
NSRUDILB EQU   NSRUDIL+1
NSRUNA   EQU   NSRUDAT2
NSRUNA2  EQU   NSRUNA+1
NSRUCLSP EQU   NSRUDAT2
NSRUOH1  EQU   NSRUDAT2
NSRUDAT8 EQU   NSRUDATA
ISTUNBRU EQU   SRUTYPE
CPWMSG   EQU   CPWKWD
LCPZTIE  EQU   LCPCID
LCPZSNAM EQU   LCPZTIE+8
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
LCPZTRV4 EQU   LCPZSNAM+4
LCPZTRV1 EQU   LCPZSNAM
LCPZSNA  EQU   LCPZTIE+4
LCPZFMCA EQU   LCPZTIE
CPWMTX   EQU   CPWMSG+2
CPWMLN   EQU   CPWMSG
UNBTYPE  EQU   ISTUNBRU
NSRUDA8T EQU   NSRUDAT8
NSRUOHID EQU   NSRUOH1
NSRULSV  EQU   NSRUCLSP
NSRUNA4  EQU   NSRUNA+2
NSRUNA3  EQU   NSRUNA2
NSRUNA1  EQU   NSRUNA
NSRUDILF EQU   NSRUDIL+4
NSRUDILE EQU   NSRUDIL+3
NSRUDILD EQU   NSRUDIL+2
NSRUDILC EQU   NSRUDILB
@NM00024 EQU   NSRUDILB
NSRUDILA EQU   NSRUDIL
NSRUDA7T EQU   NSRUDAT7
NSRUDA6L EQU   NSRUDAT6+4
NSRUDA6S EQU   NSRUDAT6
NSRUDA5E EQU   NSRUDAT5
NSRUDA4T EQU   NSRUDAT4
NSRUDA3S EQU   NSRUDAT3
SRUDAT4D EQU   SRUDATA4
SRUDAT3I EQU   SRUDATA3
MRUDATA  EQU   ISTMRU+9
MRURESP  EQU   ISTMRU+7
MRUMODIF EQU   ISTMRU+6
MRUCMND  EQU   ISTMRU+5
MRUDAF   EQU   ISTMRU+3
MRUREQ   EQU   ISTMRU+2
MRUPREF  EQU   ISTMRU
SRUDAT2N EQU   SRUDAT2+1
SRUDAT2T EQU   SRUDAT2
SRUDAT1I EQU   SRUDAT1+2
SRUTSPRO EQU   SRUDAT1L
SRUFMPRO EQU   SRUDAT1L
SRUDAT1T EQU   SRUDAT1
INORUET  EQU   ISTINORU
CTDRUSTA EQU   ISTCTDRU
TRRDATA  EQU   ISTTRRU+4
TRRSTAT  EQU   ISTTRRU+3
TRRPEP   EQU   ISTTRRU+2
TRRTIME  EQU   ISTTRRU+1
TRRTYPE  EQU   ISTTRRU
NSRUDAF  EQU   NSRUDAT1
NSSSVT5A EQU   NSSSVT5
NSSSVT4D EQU   NSSSVT4+3
NSSSVT4C EQU   NSSSVT4+2
NSSSVT4B EQU   NSSSVT4+1
NSSSVT4A EQU   NSSSVT4
NSSSVT3K EQU   NSSSVT3+8
NSSSVT3J EQU   NSSSVT3+7
NSSSVT3I EQU   NSSSVT3+6
@NM00023 EQU   NSSSVT3G
NSSSVT3H EQU   NSSSVT3G
NSSSVT3F EQU   NSSSVT3+4
NSSSVT3E EQU   NSSSVT3+3
@NM00022 EQU   NSSSVT3C
NSSSVT3D EQU   NSSSVT3C
NSSSVT3B EQU   NSSSVT3+1
NSSSVT3A EQU   NSSSVT3
NSSSVT   EQU   NSSSVRU+2
NSSSVDAF EQU   NSSSVRU
NSRUHKTY EQU   NSRUHOOK
NSRURCD  EQU   NSRUNETS+2
NSRUSUB  EQU   NSRUNETS+1
NSRUID   EQU   NSRUNETS
SRURSV01 EQU   SRULDID+4
SRUPSSN  EQU   SRULDID+2
SRUDFCLV EQU   SRUSPSN
@NM00021 EQU   SRUTYPE
SRUPSAC  EQU   SRUTYPE
SRUSPAC  EQU   SRUTYPE
SRUQSREQ EQU   ISTSRU
SENRU    EQU   ISTSENRU+4
SRUSNS4  EQU   SRUSENS2+1
SRUSNS3  EQU   SRUSENS2
SRUSNST  EQU   SRUSENS1+1
SRUSNS1  EQU   SRUSENS1
CVTRV628 EQU   CVTS01+728
CVTRV627 EQU   CVTS01+724
CVTRV626 EQU   CVTS01+720
CVTRV625 EQU   CVTS01+716
CVTRV624 EQU   CVTS01+712
CVTRV623 EQU   CVTS01+708
CVTRV622 EQU   CVTS01+704
CVTRV621 EQU   CVTS01+700
CVTRV620 EQU   CVTS01+696
CVTRV619 EQU   CVTS01+692
CVTRV618 EQU   CVTS01+688
CVTRV617 EQU   CVTS01+684
CVTRV616 EQU   CVTS01+680
CVTRV615 EQU   CVTS01+676
CVTRV614 EQU   CVTS01+672
CVTRV613 EQU   CVTS01+668
CVTRV612 EQU   CVTS01+664
CVTRV611 EQU   CVTS01+660
CVTEVERM EQU   CVTS01+656
CVTIRM   EQU   CVTS01+652
CVTCGK   EQU   CVTS01+648
CVTRAC   EQU   CVTS01+644
CVTRV606 EQU   CVTS01+640
CVTRV605 EQU   CVTS01+636
CVTRV604 EQU   CVTS01+632
CVTEFF02 EQU   CVTS01+628
CVTCBBR  EQU   CVTS01+624
CVTSSCR  EQU   CVTS01+620
CVTEVENT EQU   CVTS01+616
CVTCRCA  EQU   CVTS01+612
CVTTPIO  EQU   CVTS01+608
CVTADV   EQU   CVTS01+604
CVTGSDAB EQU   CVTGSDA
CVTQV3   EQU   CVTS01+596
CVTQV2   EQU   CVTS01+592
CVTQV1   EQU   CVTS01+588
CVTRPT   EQU   CVTS01+584
CVTSSRB  EQU   CVTS01+580
CVTCSDRL EQU   CVTS01+576
CVTEXP1  EQU   CVTS01+572
CVTRMPMT EQU   CVTS01+568
CVTRMPTT EQU   CVTS01+564
CVTVPSA  EQU   CVTS01+560
CVTVSTOP EQU   CVTS01+556
CVTGTFR8 EQU   CVTS01+552
CVTQUIT  EQU   CVTS01+548
CVTVACR  EQU   CVTS01+544
CVTWTCB  EQU   CVTS01+540
CVTSTPRS EQU   CVTS01+536
CVT0PT02 EQU   CVTS01+532
CVTDARCM EQU   CVTS01+528
CVTIRECM EQU   CVTS01+524
CVTJRECM EQU   CVTS01+520
CVTVEMS0 EQU   CVTS01+516
CVTSPFRR EQU   CVTS01+512
CVTRLSTG EQU   CVTS01+508
CVT0TC0A EQU   CVTS01+504
CVTGMBR  EQU   CVTS01+500
CVTLFRM  EQU   CVTS01+496
CVTRMBR  EQU   CVTS01+492
CVTVIOP  EQU   CVTS01+488
CVTRV307 EQU   CVTS01+486
CVTRV306 EQU   CVTS01+484
CVTRV305 EQU   CVTS01+482
CVTRV304 EQU   CVTS01+480
CVTRV303 EQU   CVTS01+478
CVTRV302 EQU   CVTS01+476
CVTTRCA  EQU   CVTS01+472
CVTRV297 EQU   CVTRV289
CVTRV296 EQU   CVTRV289
CVTRV295 EQU   CVTRV289
CVTRV294 EQU   CVTRV289
CVTRV293 EQU   CVTRV289
CVTRV292 EQU   CVTRV289
CVTRV291 EQU   CVTRV289
CVTRV290 EQU   CVTRV289
CVTRV288 EQU   CVTRV280
CVTRV287 EQU   CVTRV280
CVTRV286 EQU   CVTRV280
CVTRV285 EQU   CVTRV280
CVTRV284 EQU   CVTRV280
CVTRV283 EQU   CVTRV280
CVTRV282 EQU   CVTRV280
CVTRV281 EQU   CVTRV280
CVTRV279 EQU   CVTRV271
CVTRV278 EQU   CVTRV271
CVTRV277 EQU   CVTRV271
CVTRV276 EQU   CVTRV271
CVTRV275 EQU   CVTRV271
CVTRV274 EQU   CVTRV271
CVTRV273 EQU   CVTRV271
CVTRV272 EQU   CVTRV271
CVTRV270 EQU   CVTRV262
CVTRV269 EQU   CVTRV262
CVTRV268 EQU   CVTRV262
CVTRV267 EQU   CVTRV262
CVTRV266 EQU   CVTRV262
CVTRV265 EQU   CVTRV262
CVTRV264 EQU   CVTRV262
CVTRV263 EQU   CVTRV262
CVTVFP   EQU   CVTS01+464
CVTVSI   EQU   CVTS01+460
CVTVPSIB EQU   CVTS01+456
CVTMFACT EQU   CVTMFRTR
CVTMFCTL EQU   CVTS01+448
CVTPVBP  EQU   CVTS01+444
CVTPWI   EQU   CVTS01+440
CVTRV254 EQU   CVTS01+438
CVTRV253 EQU   CVTS01+436
CVTRV252 EQU   CVTS01+434
CVTRV251 EQU   CVTS01+433
CVTRV250 EQU   CVTS01+432
CVTRV249 EQU   CVTS01+431
CVTRV248 EQU   CVTS01+430
CVTRV247 EQU   CVTS01+429
CVTRV246 EQU   CVTS01+428
CVTRV245 EQU   CVTRV237
CVTRV244 EQU   CVTRV237
CVTRV243 EQU   CVTRV237
CVTRV242 EQU   CVTRV237
CVTRV241 EQU   CVTRV237
CVTRV240 EQU   CVTRV237
CVTRV239 EQU   CVTRV237
CVTRV238 EQU   CVTRV237
CVTRV236 EQU   CVTRV228
CVTRV235 EQU   CVTRV228
CVTRV234 EQU   CVTRV228
CVTRV233 EQU   CVTRV228
CVTRV232 EQU   CVTRV228
CVTRV231 EQU   CVTRV228
CVTRV230 EQU   CVTRV228
CVTRV229 EQU   CVTRV228
CVTRV227 EQU   CVTRV219
CVTRV226 EQU   CVTRV219
CVTRV225 EQU   CVTRV219
CVTRV224 EQU   CVTRV219
CVTRV223 EQU   CVTRV219
CVTRV222 EQU   CVTRV219
CVTRV221 EQU   CVTRV219
CVTRV220 EQU   CVTRV219
CVTRV218 EQU   CVTRV210
CVTRV217 EQU   CVTRV210
CVTRV216 EQU   CVTRV210
CVTRV215 EQU   CVTRV210
CVTRV214 EQU   CVTRV210
CVTRV213 EQU   CVTRV210
CVTRV212 EQU   CVTRV210
CVTRV211 EQU   CVTRV210
CVTLCCAT EQU   CVTS01+420
CVTPCCAT EQU   CVTS01+416
CVTIPCRP EQU   CVTS01+412
CVTIPCRI EQU   CVTS01+408
CVTIPCDS EQU   CVTS01+404
CVTAIDVT EQU   CVTS01+400
CVTSSAP  EQU   CVTS01+396
CVTEHCIR EQU   CVTS01+392
CVTEHDEF EQU   CVTS01+388
CVTDAIR  EQU   CVTS01+384
CVTPERFM EQU   CVTS01+380
CVT044R2 EQU   CVTS01+376
CVTFETCH EQU   CVTS01+372
CVTRSTWD EQU   CVTS01+368
CVTSPOST EQU   CVTS01+364
CVTIOBP  EQU   CVTS01+360
CVTASMVT EQU   CVTS01+356
CVTRECRQ EQU   CVTS01+352
CVTWSAC  EQU   CVTS01+348
CVTRV149 EQU   CVTS01+344
CVTWSAL  EQU   CVTS01+340
CVTSPSA  EQU   CVTS01+336
CVTGLMN  EQU   CVTS01+332
CVTVEAC0 EQU   CVTS01+328
CVT062R1 EQU   CVTS01+324
CVTRPOST EQU   CVTS01+320
CVTDQIQE EQU   CVTS01+316
CVTCSD   EQU   CVTS01+312
CVTLKRMA EQU   CVTS01+308
CVTRSPIE EQU   CVTS01+304
CVTRENQ  EQU   CVTS01+300
CVTLQCB  EQU   CVTS01+296
CVTFQCB  EQU   CVTS01+292
CVTQCS01 EQU   CVTS01+288
CVTAPFT  EQU   CVTS01+284
CVTPARRL EQU   CVTS01+280
CVTVWAIT EQU   CVTS01+276
CVTGSPL  EQU   CVTS01+272
CVTLSMQ  EQU   CVTS01+268
CVTGSMQ  EQU   CVTS01+264
CVTEXPRO EQU   CVTS01+260
CVTOPCTP EQU   CVTS01+256
CVTSIC   EQU   CVTS01+252
CVTTPIOS EQU   CVTS01+248
CVTRTMS  EQU   CVTS01+244
CVTSDBF  EQU   CVTS01+240
CVTSCBP  EQU   CVTS01+236
CVTSDMP  EQU   CVTS01+232
CVTSV60  EQU   CVTS01+228
CVTRTMCT EQU   CVTS01+224
CVTASCBL EQU   CVTS01+220
CVTASCBH EQU   CVTS01+216
CVTGDA   EQU   CVTS01+212
CVTASVT  EQU   CVTS01+208
CVTVVMDI EQU   CVTS01+204
CVTAQTOP EQU   CVTS01+200
CVTIOSCS EQU   CVTS01+196
CVTSDRM  EQU   CVTS01+192
CVTOPTE  EQU   CVTS01+188
CVTSTXU  EQU   CVTS01+184
CVTQUIS  EQU   CVTS01+180
CVTPARS  EQU   CVTS01+176
CVTS1EE  EQU   CVTS01+172
CVTFRAS  EQU   CVTS01+168
CVTQSAS  EQU   CVTS01+164
CVTCRAS  EQU   CVTS01+160
CVTCRMN  EQU   CVTS01+156
CVTDELCP EQU   CVTS01+152
CVTFRECL EQU   CVTS01+148
CVTGETCL EQU   CVTS01+144
CVTBLDCP EQU   CVTS01+140
CVTAUTHL EQU   CVTS01+136
CVTSCAN  EQU   CVTS01+132
CVTRV144 EQU   CVTS01+130
CVTMAXMP EQU   CVTS01+128
CVTSTCK  EQU   CVTS01+124
CVTRV139 EQU   CVTS01+123
CVTDSSAC EQU   CVTS01+122
CVTRV513 EQU   CVTS01+121
CVTIOSPL EQU   CVTS01+120
CVTPTGT  EQU   CVTS01+116
CVTCSPIE EQU   CVTS01+112
CVTSMFEX EQU   CVTS01+108
CVTOLT0A EQU   CVTS01+104
CVTSRBRT EQU   CVTS01+100
CVTPUTL  EQU   CVTS01+96
CVTRV519 EQU   CVTS01+92
CVTRV327 EQU   CVTS01+88
CVTRV326 EQU   CVTS01+84
CVTRV325 EQU   CVTS01+80
CVTRV324 EQU   CVTS01+76
CVT0VL01 EQU   CVTS01+72
CVTSHRVM EQU   CVTS01+68
CVTRV332 EQU   CVTS01+64
CVTTAS   EQU   CVTS01+60
CVTRSCN  EQU   CVTS01+56
CVTTRAC2 EQU   CVTS01+54
CVTTRACE EQU   CVTS01+52
CVTAPG   EQU   CVTS01+51
CVTSDTRC EQU   CVTCTLFG
CVTGTRCE EQU   CVTCTLFG
CVTNOMP  EQU   CVTCTLFG
CVTRSV79 EQU   CVTCTLFG
CVTDSTAT EQU   CVTCTLFG
CVTRSV78 EQU   CVTCTLFG
CVTRV333 EQU   CVTCTLFG
CVTRV323 EQU   CVTCTLFG
CVTSPVLK EQU   CVTS01+49
CVTRSV77 EQU   CVTS01+48
CVTRV331 EQU   CVTS01+44
CVTRV330 EQU   CVTS01+40
CVTRV329 EQU   CVTS01+36
CVTRV328 EQU   CVTS01+32
CVTRV322 EQU   CVTS01+28
CVTSLID  EQU   CVTSLIDA+1
CVTSYLK  EQU   CVTSLIDA
CVTRV321 EQU   CVTS01+20
CVTRV320 EQU   CVTS01+16
CVTLPDIR EQU   CVTLPDIA+1
CVTRSV69 EQU   CVTDIRST
CVTRSV68 EQU   CVTDIRST
CVTRSV67 EQU   CVTDIRST
CVTRSV66 EQU   CVTDIRST
CVTRSV65 EQU   CVTDIRST
CVTRSV64 EQU   CVTDIRST
CVTRSV63 EQU   CVTDIRST
CVTDICOM EQU   CVTDIRST
CVTPVTP  EQU   CVTS01+8
CVTLPDSR EQU   CVTS01+4
CVTGETL  EQU   CVTS01
NSRUNA6  EQU   NSRUNA5
MGLRU    EQU   MGLRUFLD+1
MGLRUL   EQU   MGLRUFLD
MGLVDTXT EQU   MGLUSSTX+1
MGLTXTL  EQU   MGLUSSTX
VYCRSV02 EQU   ISTVYCRR+128
VYCRSV04 EQU   ISTVYCRR+126
VYCRRCW3 EQU   ISTVYCRR+118
VYCRRSAV EQU   ISTVYCRR+46
VYCRSV03 EQU   VYCCRT+11
CINCFE   EQU   VYCCRT+11
CINCE9   EQU   VYCCRT+11
CINCVO   EQU   VYCCRT+11
CINCR5   EQU   VYCCRT+11
CINCR3   EQU   VYCCRT+10
CINCE8   EQU   VYCCRT+10
CINCE7   EQU   VYCCRT+10
CINCE6   EQU   VYCCRT+10
CINCE5   EQU   VYCCRT+10
CINCE1   EQU   VYCCRT+10
CINCUQ   EQU   VYCCRT+10
CINCUB   EQU   VYCCRT+10
CINCUA   EQU   VYCCRT+9
CINCX9   EQU   VYCCRT+9
CINCX8   EQU   VYCCRT+9
CINCX7   EQU   VYCCRT+9
CINCX6   EQU   VYCCRT+9
CINCX3   EQU   VYCCRT+9
CINCX2   EQU   VYCCRT+9
CINCX1   EQU   VYCCRT+9
CINCX0   EQU   VYCCRT+8
CINCW9   EQU   VYCCRT+8
CINCW8   EQU   VYCCRT+8
CINCW7   EQU   VYCCRT+8
CINCW6   EQU   VYCCRT+8
CINCW5   EQU   VYCCRT+8
CINCW4   EQU   VYCCRT+8
CINCW2   EQU   VYCCRT+8
CINCW0   EQU   VYCCRT+7
CINCV9   EQU   VYCCRT+7
CINCV8   EQU   VYCCRT+7
CINCV7   EQU   VYCCRT+7
CINCV6   EQU   VYCCRT+7
CINCV5   EQU   VYCCRT+7
CINCV4   EQU   VYCCRT+7
CINCV3   EQU   VYCCRT+7
CINCV2   EQU   VYCCRT+6
CINCU8   EQU   VYCCRT+6
CINCU7   EQU   VYCCRT+6
CINCU6   EQU   VYCCRT+6
CINCU5   EQU   VYCCRT+6
CINCU4   EQU   VYCCRT+6
CINCU3   EQU   VYCCRT+6
CINCU2   EQU   VYCCRT+6
CINCU0   EQU   VYCCRT+5
CINCUM   EQU   VYCCRT+5
CINCS1   EQU   VYCCRT+5
CINCL8   EQU   VYCCRT+5
CINCL7   EQU   VYCCRT+5
CINCL6   EQU   VYCCRT+5
CINCL5   EQU   VYCCRT+5
CINCL4   EQU   VYCCRT+4
CINCL3   EQU   VYCCRT+4
CINCL2   EQU   VYCCRT+4
CINCL1   EQU   VYCCRT+4
CINCL0   EQU   VYCCRT+4
CINCF4   EQU   VYCCRT+4
CINCF3   EQU   VYCCRT+4
CINCF1   EQU   VYCCRT+4
CINCFM   EQU   VYCCRT+3
CINCE4   EQU   VYCCRT+3
CINCE3   EQU   VYCCRT+3
CINCE2   EQU   VYCCRT+3
CINCE0   EQU   VYCCRT+3
CINCD9   EQU   VYCCRT+3
CINCD8   EQU   VYCCRT+3
CINCD7   EQU   VYCCRT+3
CINCD6   EQU   VYCCRT+2
CINCD5   EQU   VYCCRT+2
CINCD4   EQU   VYCCRT+2
CINCD3   EQU   VYCCRT+2
CINCD2   EQU   VYCCRT+2
CINCD1   EQU   VYCCRT+2
CINCIP   EQU   VYCCRT+2
CINCR2   EQU   VYCCRT+2
CINCMS   EQU   VYCCRT+1
CINCVN   EQU   VYCCRT+1
CINCVS   EQU   VYCCRT+1
CINCVP   EQU   VYCCRT+1
CINCVX   EQU   VYCCRT+1
CINCFS   EQU   VYCCRT+1
CINCSM   EQU   VYCCRT+1
CINCR1   EQU   VYCCRT+1
CINCLF   EQU   VYCCRT
CINCVA   EQU   VYCCRT
CINCVI   EQU   VYCCRT
CINCMD   EQU   VYCCRT
CINCMY   EQU   VYCCRT
CINCDL   EQU   VYCCRT
CINCIO   EQU   VYCCRT
CINCCL   EQU   VYCCRT
VYCRSV01 EQU   VYCNTRD+11
NINCFE   EQU   VYCNTRD+11
NINCE9   EQU   VYCNTRD+11
NINCVO   EQU   VYCNTRD+11
NINCR5   EQU   VYCNTRD+11
NINCR3   EQU   VYCNTRD+10
NINCE8   EQU   VYCNTRD+10
NINCE7   EQU   VYCNTRD+10
NINCE6   EQU   VYCNTRD+10
NINCE5   EQU   VYCNTRD+10
NINCE1   EQU   VYCNTRD+10
NINCUQ   EQU   VYCNTRD+10
NINCUB   EQU   VYCNTRD+10
NINCUA   EQU   VYCNTRD+9
NINCX9   EQU   VYCNTRD+9
NINCX8   EQU   VYCNTRD+9
NINCX7   EQU   VYCNTRD+9
NINCX6   EQU   VYCNTRD+9
NINCX3   EQU   VYCNTRD+9
NINCX2   EQU   VYCNTRD+9
NINCX1   EQU   VYCNTRD+9
NINCX0   EQU   VYCNTRD+8
NINCW9   EQU   VYCNTRD+8
NINCW8   EQU   VYCNTRD+8
NINCW7   EQU   VYCNTRD+8
NINCW6   EQU   VYCNTRD+8
NINCW5   EQU   VYCNTRD+8
NINCW4   EQU   VYCNTRD+8
NINCW2   EQU   VYCNTRD+8
NINCW0   EQU   VYCNTRD+7
NINCV9   EQU   VYCNTRD+7
NINCV8   EQU   VYCNTRD+7
NINCV7   EQU   VYCNTRD+7
NINCV6   EQU   VYCNTRD+7
NINCV5   EQU   VYCNTRD+7
NINCV4   EQU   VYCNTRD+7
NINCV3   EQU   VYCNTRD+7
NINCV2   EQU   VYCNTRD+6
NINCU8   EQU   VYCNTRD+6
NINCU7   EQU   VYCNTRD+6
NINCU6   EQU   VYCNTRD+6
NINCU5   EQU   VYCNTRD+6
NINCU4   EQU   VYCNTRD+6
NINCU3   EQU   VYCNTRD+6
NINCU2   EQU   VYCNTRD+6
NINCU0   EQU   VYCNTRD+5
NINCUM   EQU   VYCNTRD+5
NINCS1   EQU   VYCNTRD+5
NINCL8   EQU   VYCNTRD+5
NINCL7   EQU   VYCNTRD+5
NINCL6   EQU   VYCNTRD+5
NINCL5   EQU   VYCNTRD+5
NINCL4   EQU   VYCNTRD+4
NINCL3   EQU   VYCNTRD+4
NINCL2   EQU   VYCNTRD+4
NINCL1   EQU   VYCNTRD+4
NINCL0   EQU   VYCNTRD+4
NINCF4   EQU   VYCNTRD+4
NINCF3   EQU   VYCNTRD+4
NINCF1   EQU   VYCNTRD+4
NINCFM   EQU   VYCNTRD+3
NINCE4   EQU   VYCNTRD+3
NINCE3   EQU   VYCNTRD+3
NINCE2   EQU   VYCNTRD+3
NINCE0   EQU   VYCNTRD+3
NINCD9   EQU   VYCNTRD+3
NINCD8   EQU   VYCNTRD+3
NINCD7   EQU   VYCNTRD+3
NINCD6   EQU   VYCNTRD+2
NINCD5   EQU   VYCNTRD+2
NINCD4   EQU   VYCNTRD+2
NINCD3   EQU   VYCNTRD+2
NINCD2   EQU   VYCNTRD+2
NINCD1   EQU   VYCNTRD+2
NINCIP   EQU   VYCNTRD+2
NINCR2   EQU   VYCNTRD+2
NINCMS   EQU   VYCNTRD+1
NINCVN   EQU   VYCNTRD+1
NINCVS   EQU   VYCNTRD+1
NINCVP   EQU   VYCNTRD+1
NINCVX   EQU   VYCNTRD+1
NINCFS   EQU   VYCNTRD+1
NINCSM   EQU   VYCNTRD+1
NINCR1   EQU   VYCNTRD+1
NINCLF   EQU   VYCNTRD
NINCVA   EQU   VYCNTRD
NINCVI   EQU   VYCNTRD
NINCMD   EQU   VYCNTRD
NINCMY   EQU   VYCNTRD
NINCDL   EQU   VYCNTRD
NINCIO   EQU   VYCNTRD
NINCCL   EQU   VYCNTRD
VYCCNS   EQU   ISTVYCRR
CNSRSV05 EQU   CNSTFLDB+2
CNSLOG0B EQU   CNSTFLDB+2
CNSACCTB EQU   CNSTFLDB+2
CNSFREEB EQU   CNSTFLDB+2
CNSGETSB EQU   CNSTFLDB+2
CNSSEARB EQU   CNSTFLDB+2
CNSQUEUB EQU   CNSTFLDB+2
CNSACONB EQU   CNSTFLDB+2
CNSTCONB EQU   CNSTFLDB+1
CNSCLAQB EQU   CNSTFLDB+1
CNSCLINB EQU   CNSTFLDB+1
CNSGBINB EQU   CNSTFLDB+1
CNSLGINB EQU   CNSTFLDB+1
CNSACINB EQU   CNSTFLDB+1
CNSPSINB EQU   CNSTFLDB+1
CNSRQRLB EQU   CNSTFLDB+1
CNSTRRLB EQU   CNSTFLDB
CNSDORLB EQU   CNSTFLDB
CNSRLINB EQU   CNSTFLDB
CNSQREQB EQU   CNSTFLDB
CNSXREQB EQU   CNSTFLDB
CNSAQINB EQU   CNSTFLDB
CNSAUTHB EQU   CNSTFLDB
CNSMRINB EQU   CNSTFLDB
CNSRSV01 EQU   CNSTFLDA+2
CNSLOG0A EQU   CNSTFLDA+2
CNSACCTA EQU   CNSTFLDA+2
CNSFREEA EQU   CNSTFLDA+2
CNSGETSA EQU   CNSTFLDA+2
CNSSEARA EQU   CNSTFLDA+2
CNSQUEUA EQU   CNSTFLDA+2
CNSACONA EQU   CNSTFLDA+2
CNSTCONA EQU   CNSTFLDA+1
CNSCLAQA EQU   CNSTFLDA+1
CNSCLINA EQU   CNSTFLDA+1
CNSGBINA EQU   CNSTFLDA+1
CNSLGINA EQU   CNSTFLDA+1
CNSACINA EQU   CNSTFLDA+1
CNSPSINA EQU   CNSTFLDA+1
CNSRQRLA EQU   CNSTFLDA+1
CNSTRRLA EQU   CNSTFLDA
CNSDORLA EQU   CNSTFLDA
CNSRLINA EQU   CNSTFLDA
CNSQREQA EQU   CNSTFLDA
CNSXREQA EQU   CNSTFLDA
CNSAQINA EQU   CNSTFLDA
CNSAUTHA EQU   CNSTFLDA
CNSMRINA EQU   CNSTFLDA
CNSTPFX  EQU   ISTCNSTA
CRACHAIN EQU   ISTCRA+928
CRARSV02 EQU   ISTCRA+924
CRARSV01 EQU   ISTCRA+920
CRABFTBA EQU   CRABUFA
CRAMASK  EQU   CRASVC+64
CRAHSIZ  EQU   CRASVC+60
CRAASCRR EQU   CRASVC
CRAPROCR EQU   ISTCRA+312
CRAPSS   EQU   ISTCRA+160
CRARPH   EQU   ISTCRA+52
CRALAPTR EQU   CRABASIC+48
CRAL9PTR EQU   CRABASIC+44
CRAL8PTR EQU   CRABASIC+40
CRAL7PTR EQU   CRABASIC+36
CRAL6PTR EQU   CRABASIC+32
CRAL5PTR EQU   CRABASIC+28
CRAL4PTR EQU   CRABASIC+24
CRAL3PTR EQU   CRABASIC+20
CRAL2PTR EQU   CRABASIC+16
CRAL1PTR EQU   CRABASIC+12
CRALEV01 EQU   CRALKACT+3
CRALEV02 EQU   CRALKACT+3
CRALEV03 EQU   CRALKACT+3
CRALEV04 EQU   CRALKACT+3
CRALEV05 EQU   CRALKACT+3
CRALEV06 EQU   CRALKACT+3
CRALEV07 EQU   CRALKACT+3
CRALEV08 EQU   CRALKACT+3
CRALEV09 EQU   CRALKACT+2
CRALEV10 EQU   CRALKACT+2
CRALEV11 EQU   CRALKACT+2
CRALEV12 EQU   CRALKACT+2
CRALEV13 EQU   CRALKACT+2
CRALEV14 EQU   CRALKACT+2
CRALEV15 EQU   CRALKACT+2
CRALEV16 EQU   CRALKACT+2
CRALEV17 EQU   CRALKACT+1
CRALEV18 EQU   CRALKACT+1
CRALEV19 EQU   CRALKACT+1
CRALEV20 EQU   CRALKACT+1
CRALEV21 EQU   CRALKACT+1
CRALEV22 EQU   CRALKACT+1
CRALEV23 EQU   CRALKACT+1
CRALEV24 EQU   CRALKACT+1
CRALEV25 EQU   CRALKACT
CRALEV26 EQU   CRALKACT
CRALEV27 EQU   CRALKACT
CRALEV28 EQU   CRALKACT
CRALEV29 EQU   CRALKACT
CRALEV30 EQU   CRALKACT
CRALEV31 EQU   CRALKACT
CRALEV32 EQU   CRALKACT
CRAFRR   EQU   CRAHDR+4
@NM00040 EQU   ISTAPCRR+137
@NM00039 EQU   APC57FLG
APCNREL  EQU   APC57FLG
APCRECRA EQU   APC57FLG
@NM00038 EQU   APC54FLG
APCRLST  EQU   APC54FLG
APCPR153 EQU   APC53FLG
@NM00037 EQU   APC52FLG
APCWKF   EQU   APC52FLG
APCNWF   EQU   APC52FLG
APCRDQ   EQU   APC52FLG
APCQENQ  EQU   APC52FLG
APCSMSR  EQU   APC52FLG
APCCKRQ  EQU   APC52FLG
@NM00036 EQU   APC31FLG
APCSORT  EQU   APC31FLG
APCRESCH EQU   APC31FLG
APCTPXIT EQU   APC31FLG
APCSWTWD EQU   ISTAPCRR+128
APCSAV2  EQU   ISTAPCRR+124
APCSAV1  EQU   ISTAPCRR+120
APCRETCD EQU   APCCOMF+2
@NM00035 EQU   APCCOMF1+1
APCZLBER EQU   APCCOMF1
APCEXIT  EQU   APCCOMF1
APCRELR  EQU   APCCOMF1
APCIRB2  EQU   APCCOMF1
APCIRB1  EQU   APCCOMF1
APCSMCR  EQU   APCCOMF1
APCUETSK EQU   APCCOMF1
APCSSTSK EQU   APCCOMF1
APCESTAL EQU   APCSAVE
APCFRRPM EQU   ISTAPCRR+40
APCQWFO  EQU   ISTAPCRR+36
APCPABSV EQU   ISTAPCRR+32
APCRTRN  EQU   ISTAPCRR+28
APCTCBA  EQU   ISTAPCRR+24
APCPSTA  EQU   ISTAPCRR+20
@NM00034 EQU   APCRFLG+1
APC31R   EQU   APCRFLG
APC58R   EQU   APCRFLG
APC57R   EQU   APCRFLG
APC56R   EQU   APCRFLG
APC54R   EQU   APCRFLG
APC53R   EQU   APCRFLG
APC52R   EQU   APCRFLG
APC51R   EQU   APCRFLG
@NM00033 EQU   APCATFLG+1
APC31E   EQU   APCATFLG
APC58E   EQU   APCATFLG
APC57E   EQU   APCATFLG
APC56E   EQU   APCATFLG
APC54E   EQU   APCATFLG
APC53E   EQU   APCATFLG
APC52E   EQU   APCATFLG
APC51E   EQU   APCATFLG
APCHDRSV EQU   ISTAPCRR
ASCPSREG EQU   ISTASCRR+44
ASCUSR01 EQU   ASCUSRGS+12
ASCUSR00 EQU   ASCUSRGS+8
ASCUSR15 EQU   ASCUSRGS+4
ASCUSR14 EQU   ASCUSRGS
ASCETRYA EQU   ISTASCRR+24
ASCKEY   EQU   ISTASCRR+23
ASCAUDIT EQU   ASCFLG3
ASCFBDUD EQU   ASCFLG3
ASCLLKF  EQU   ASCFLG3
ASCKEYF  EQU   ASCFLG3
ASCFBDAL EQU   ASCFLG3
ASCFSRGT EQU   ASCFLG3
ASCICR   EQU   ASCFLG2
ASCFSRIC EQU   ASCFLG2
ASCFBDIC EQU   ASCFLG2
ASCFBAIC EQU   ASCFLG2
ASCPASTR EQU   ASCFLG1
ASCFSR   EQU   ASCFLG1
ASCFBD   EQU   ASCFLG1
ASCFBA   EQU   ASCFLG1
ASCPFCRR EQU   ISTASCRR
ZCRRU    EQU   ZCRRHRU+3
ZCRRH    EQU   ZCRRHRU
ZCRWORDA EQU   ISTZCRR+477
ZCRCMNRC EQU   ISTZCRR+476
ZCRRSV97 EQU   ZCRENTER+18
ZCREIC2B EQU   ZCRENTER+18
ZCREAC2B EQU   ZCRENTER+18
ZCRELCAB EQU   ZCRENTER+18
ZCREDCMF EQU   ZCRENTER+18
ZCREBCIF EQU   ZCRENTER+18
ZCREICSG EQU   ZCRENTER+18
ZCREDCK0 EQU   ZCRENTER+18
ZCRECFY0 EQU   ZCRENTER+17
ZCREKCCB EQU   ZCRENTER+17
ZCREDCNB EQU   ZCRENTER+17
ZCREICOE EQU   ZCRENTER+17
ZCREBCNB EQU   ZCRENTER+17
ZCREBC0L EQU   ZCRENTER+17
ZCREBCAL EQU   ZCRENTER+17
ZCREDCQR EQU   ZCRENTER+17
ZCREDCPR EQU   ZCRENTER+16
ZCREBCSB EQU   ZCRENTER+16
ZCREAC1R EQU   ZCRENTER+16
ZCRECCCI EQU   ZCRENTER+16
ZCRECCAI EQU   ZCRENTER+16
ZCRECCBI EQU   ZCRENTER+16
ZCREBCAR EQU   ZCRENTER+16
ZCREBCDR EQU   ZCRENTER+16
ZCREBCBR EQU   ZCRENTER+15
ZCREDCXR EQU   ZCRENTER+15
ZCREDCWB EQU   ZCRENTER+15
ZCREDCWR EQU   ZCRENTER+15
ZCREKCCN EQU   ZCRENTER+15
ZCREKCBN EQU   ZCRENTER+15
ZCREKCBB EQU   ZCRENTER+15
ZCREJC0B EQU   ZCRENTER+15
ZCREJCDB EQU   ZCRENTER+14
ZCREJCCB EQU   ZCRENTER+14
ZCREJCBB EQU   ZCRENTER+14
ZCREJCAB EQU   ZCRENTER+14
ZCREIC1B EQU   ZCRENTER+14
ZCREIC0B EQU   ZCRENTER+14
ZCREICX0 EQU   ZCRENTER+14
ZCREICWB EQU   ZCRENTER+14
ZCREICVB EQU   ZCRENTER+13
ZCREICUB EQU   ZCRENTER+13
ZCREICTB EQU   ZCRENTER+13
ZCREICSC EQU   ZCRENTER+13
ZCREICSB EQU   ZCRENTER+13
ZCREICRB EQU   ZCRENTER+13
ZCREICQB EQU   ZCRENTER+13
ZCREICQA EQU   ZCRENTER+13
ZCREICOB EQU   ZCRENTER+12
ZCREICOA EQU   ZCRENTER+12
ZCREICNB EQU   ZCRENTER+12
ZCREICNA EQU   ZCRENTER+12
ZCREICMB EQU   ZCRENTER+12
ZCREICLB EQU   ZCRENTER+12
ZCREICKG EQU   ZCRENTER+12
ZCREICKE EQU   ZCRENTER+12
ZCREICKB EQU   ZCRENTER+11
ZCREICJB EQU   ZCRENTER+11
ZCREICID EQU   ZCRENTER+11
ZCREICIB EQU   ZCRENTER+11
ZCREICHB EQU   ZCRENTER+11
ZCREICGB EQU   ZCRENTER+11
ZCREICEB EQU   ZCRENTER+11
ZCREICDB EQU   ZCRENTER+11
ZCREICCI EQU   ZCRENTER+10
ZCREICCB EQU   ZCRENTER+10
ZCREICBI EQU   ZCRENTER+10
ZCREICBB EQU   ZCRENTER+10
ZCREICAB EQU   ZCRENTER+10
ZCREICAA EQU   ZCRENTER+10
ZCREHCAN EQU   ZCRENTER+10
ZCREGC0B EQU   ZCRENTER+10
ZCREGC0A EQU   ZCRENTER+9
ZCREGCLA EQU   ZCRENTER+9
ZCREGCEB EQU   ZCRENTER+9
ZCREGCDB EQU   ZCRENTER+9
@NM00032 EQU   ZCRENTER+9
ZCREGCBB EQU   ZCRENTER+9
ZCREGCAB EQU   ZCRENTER+9
ZCREFCEB EQU   ZCRENTER+9
ZCREFCEA EQU   ZCRENTER+8
ZCREECTA EQU   ZCRENTER+8
ZCREECEA EQU   ZCRENTER+8
ZCREECDA EQU   ZCRENTER+8
ZCREECCB EQU   ZCRENTER+8
ZCREECCA EQU   ZCRENTER+8
ZCREECBB EQU   ZCRENTER+8
ZCREECBA EQU   ZCRENTER+8
ZCREDCMB EQU   ZCRENTER+7
ZCREDCL0 EQU   ZCRENTER+7
ZCREDCKB EQU   ZCRENTER+7
ZCREDCKA EQU   ZCRENTER+7
ZCREDCJ0 EQU   ZCRENTER+7
ZCREDCI0 EQU   ZCRENTER+7
ZCREDCH0 EQU   ZCRENTER+7
ZCREDCF0 EQU   ZCRENTER+7
ZCREDCE0 EQU   ZCRENTER+6
ZCREDCD0 EQU   ZCRENTER+6
ZCREDCC0 EQU   ZCRENTER+6
ZCREDCB0 EQU   ZCRENTER+6
ZCREDCA0 EQU   ZCRENTER+6
ZCRECC2B EQU   ZCRENTER+6
ZCRECC1B EQU   ZCRENTER+6
ZCRECC1A EQU   ZCRENTER+6
ZCRECC0B EQU   ZCRENTER+5
ZCRECC0A EQU   ZCRENTER+5
ZCREBC0B EQU   ZCRENTER+5
ZCREBC0A EQU   ZCRENTER+5
ZCREBCZ0 EQU   ZCRENTER+5
ZCREBCY0 EQU   ZCRENTER+5
ZCREBCX0 EQU   ZCRENTER+5
ZCREBCXA EQU   ZCRENTER+5
ZCREBCSC EQU   ZCRENTER+4
ZCREBCRB EQU   ZCRENTER+4
ZCREBCRA EQU   ZCRENTER+4
ZCREBCQB EQU   ZCRENTER+4
ZCREBCPB EQU   ZCRENTER+4
ZCREBCOB EQU   ZCRENTER+4
ZCREBCNE EQU   ZCRENTER+4
ZCREBCND EQU   ZCRENTER+4
ZCREBCMB EQU   ZCRENTER+3
ZCREBCLB EQU   ZCRENTER+3
ZCREBCLA EQU   ZCRENTER+3
ZCREBCKB EQU   ZCRENTER+3
ZCREBCKA EQU   ZCRENTER+3
ZCREBCJB EQU   ZCRENTER+3
ZCREBCJA EQU   ZCRENTER+3
ZCREBCID EQU   ZCRENTER+3
ZCREBCIB EQU   ZCRENTER+2
ZCREBCIA EQU   ZCRENTER+2
ZCREBCHB EQU   ZCRENTER+2
ZCREBCHA EQU   ZCRENTER+2
ZCREBCGB EQU   ZCRENTER+2
ZCREBCGA EQU   ZCRENTER+2
ZCREBCFB EQU   ZCRENTER+2
ZCREBCFA EQU   ZCRENTER+2
ZCREBCEB EQU   ZCRENTER+1
ZCREBCDI EQU   ZCRENTER+1
ZCREBCCB EQU   ZCRENTER+1
ZCREBCBI EQU   ZCRENTER+1
ZCREBCBB EQU   ZCRENTER+1
ZCREBCBA EQU   ZCRENTER+1
ZCREBCAM EQU   ZCRENTER+1
ZCREBCAI EQU   ZCRENTER+1
ZCREBCAG EQU   ZCRENTER
ZCREBCAE EQU   ZCRENTER
ZCREBCAB EQU   ZCRENTER
ZCREBCAA EQU   ZCRENTER
ZCREAC1B EQU   ZCRENTER
ZCREAC0B EQU   ZCRENTER
ZCREAC0A EQU   ZCRENTER
ZCREAC1A EQU   ZCRENTER
ZCRTNAME EQU   ZCRAUDIT+1
ZCRTID   EQU   ZCRAUDIT
ZCRREMIC EQU   ISTZCRR+436
ZCRSAVEZ EQU   ISTZCRR+196
ZCRDAFSV EQU   ZCRCIDSV+2
ZCRSAFSV EQU   ZCRCIDSV
ZCRR13SV EQU   ISTZCRR+188
ZCRR2SV  EQU   ISTZCRR+184
ZCROPCDE EQU   ISTZCRR+183
ZCRPRMTC EQU   ISTZCRR+182
ZCRRCDSV EQU   ISTZCRR+181
ZCRAWQSW EQU   ISTZCRR+180
ZCRTOPQ  EQU   ISTZCRR+180
ZCRLSTFB EQU   ISTZCRR+180
ZCRXSCHD EQU   ISTZCRR+180
ZCRNXTEL EQU   ISTZCRR+180
ZCRSCANQ EQU   ISTZCRR+180
ZCRMOREL EQU   ISTZCRR+180
ZCRFBPRC EQU   ISTZCRR+180
ZCRFSBSV EQU   ISTZCRR+176
ZCRSVWK5 EQU   ZCRWKARA+16
ZCRSVWK4 EQU   ZCRWKARA+12
ZCRSVWK3 EQU   ZCRWKARA+8
ZCRSVWK2 EQU   ZCRWKARA+4
ZCRSVWK1 EQU   ZCRWKARA
ZCRSVF25 EQU   ZCRSVRTN+96
ZCRSVF24 EQU   ZCRSVRTN+92
ZCRSVF23 EQU   ZCRSVRTN+88
ZCRSVF22 EQU   ZCRSVRTN+84
ZCRSVF21 EQU   ZCRSVRTN+80
ZCRSVF20 EQU   ZCRSVRTN+76
ZCRSVF19 EQU   ZCRSVRTN+72
ZCRSVF18 EQU   ZCRSVRTN+68
ZCRSVF17 EQU   ZCRSVRTN+64
ZCRSVF16 EQU   ZCRSVRTN+60
ZCRSVF15 EQU   ZCRSVRTN+56
ZCRSVF14 EQU   ZCRSVRTN+52
ZCRSVF13 EQU   ZCRSVRTN+48
ZCRSVF12 EQU   ZCRSVRTN+44
ZCRSVF11 EQU   ZCRSVRTN+40
ZCRSVF10 EQU   ZCRSVRTN+36
ZCRSVF9  EQU   ZCRSVRTN+32
ZCRSVF8  EQU   ZCRSVRTN+28
ZCRSVF7  EQU   ZCRSVRTN+24
ZCRSVF6  EQU   ZCRSVRTN+20
ZCRSVF5  EQU   ZCRSVRTN+16
ZCRSVF4  EQU   ZCRSVRTN+12
ZCRSVF3  EQU   ZCRSVRTN+8
ZCRSVF2  EQU   ZCRSVRTN+4
ZCRSVF1  EQU   ZCRSVRTN
ZCRPVZB  EQU   ISTZCRR+52
ZCRZLB   EQU   ISTZCRR+48
ZCRBFPTR EQU   ISTZCRR+44
ZCRCCWA  EQU   ISTZCRR+40
ZCRPSW   EQU   ZCRPARMS+15
ZCRPCHAR EQU   ZCRPARMS+14
ZCRPRES2 EQU   ZCRPCOD2
ZCRPMFGF EQU   ZCRPCOD2
ZCRPFHDR EQU   ZCRPCOD2
ZCRPPG2  EQU   ZCRPCOD2
ZCRPRES  EQU   ZCRPCOD1
ZCRPCFTX EQU   ZCRPCOD1
ZCRPBUF  EQU   ZCRPCOD1
ZCRPLSCB EQU   ZCRPCOD1
ZCRPLSBQ EQU   ZCRPLSBF
ZCRPFSB  EQU   ZCRPCOD1
ZCRPLNG  EQU   ZCRPCOD1
ZCRPPG   EQU   ZCRPCOD1
ZCRDTODA EQU   ZCRDFRDA
ZCRMLNG  EQU   ZCRPARMS+8
ZCRTBPTR EQU   ZCRPARMS+4
ZCRCBPTR EQU   ZCRFBPTR
ZCRCRLCP EQU   ISTZCRR+20
@NM00031 EQU   ZCRSCPSW
ZCRSKIPT EQU   ZCRSCPSW
ZCRFSBWE EQU   ZCRSCPSW
ZCRPRCMP EQU   ZCRSCPSW
ZCRLREQ  EQU   ZCRSCPSW
ZCRRJLCP EQU   ZCRSCPSW
ZCRTPINV EQU   ZCRSCPSW
ZCRTPEX  EQU   ZCRSCPSW
@NM00030 EQU   ZCRIBPR
ZCR3270R EQU   ZCRIBPR
ZCR3270  EQU   ZCRIBPR
ZCRLCPFD EQU   ZCRIBPR
ZCRLCPFR EQU   ZCRIBPR
ZCRRELK  EQU   ZCRIBPR
ZCRERR   EQU   ZCRIBPR
ZCRNOBUF EQU   ZCRIBPR
@NM00029 EQU   ZCRPFLGS
ZCRQAHED EQU   ZCRPFLGS
ZCRF1RES EQU   ZCRGENSW
ZCRBRIS  EQU   ZCRGENSW
ZCRCLRBD EQU   ZCRGENSW
ZCREXRES EQU   ZCRGENSW
ZCRLCSYN EQU   ZCRGENSW
ZCRRT06  EQU   ZCRGENSW
ZCRTSW2  EQU   ZCRGENSW
ZCRTSW1  EQU   ZCRGENSW
ZCRINLCP EQU   ZCRFLGS3
ZCRWRPTR EQU   ZCRFLGS3
ZCRNOFRE EQU   ZCRFLGS3
ZCREDRIV EQU   ZCRFLGS3
ZCRDISC  EQU   ZCRFLGS3
ZCRTPDIS EQU   ZCRFLGS3
ZCRTPCON EQU   ZCRFLGS3
ZCRTIC   EQU   ZCRFLGS3
ZCRCNLXL EQU   ZCRRESET
ZCRENDAN EQU   ZCRSWFLD
ZCRENDXL EQU   ZCRSWFLD
ZCRENDX  EQU   ZCRSWFLD
ZCROB1   EQU   ZCRNDLCP
ZCRENDPR EQU   ZCRSWFLD
ZCREXTYP EQU   ZCRSWFLD
ZCRSLCP  EQU   ZCRENDSH
ZCRIF0E3 EQU   ZCRFLGS2
ZCRIF0E2 EQU   ZCRFLGS2
ZCRIF0E1 EQU   ZCRFLGS2
ZCROB    EQU   ZCRFLGS2
ZCRFMSED EQU   ZCRFLGS2
ZCRSHEDI EQU   ZCRFLGS2
ZCRLOCAL EQU   ZCRFLGS2
ZCRFEXIT EQU   ZCRFLGS1
ZCRUNSOL EQU   ZCRFLGS1
ZCRENDLP EQU   ZCRFLGS1
ZCRNRMEX EQU   ZCRFLGS1
ZCRWAIT  EQU   ZCRFLGS1
ZCRDEQSW EQU   ZCRFLGS1
ZCRQUESW EQU   ZCRFLGS1
ZCREXSW  EQU   ZCRFLGS1
ZCRFRRA  EQU   ISTZCRR+8
ZCRCHAIN EQU   ISTZCRR+4
ZCRFLAG  EQU   ZCRCRR+3
ZCRLEN   EQU   ZCRCRR+1
ZCRID    EQU   ZCRCRR
CCFRSVD1 EQU   CFCCRT
CCFCR2   EQU   CFCCRT
CCFCRP   EQU   CFCCRT
CCFCR1   EQU   CFCCRT
CCFCS2   EQU   CFCCRT
CCFCS1   EQU   CFCCRT
NCFRSVD  EQU   CFCNTRD
NCFCR2   EQU   CFCNTRD
NCFCRP   EQU   CFCNTRD
NCFCR1   EQU   CFCNTRD
NCFCS2   EQU   CFCNTRD
NCFCS1   EQU   CFCNTRD
PFCRSV01 EQU   ISTPFCRR+13
PFCFTA   EQU   ISTPFCRR+12
CRRFRR   EQU   PFCFRRO
CRRCHAIN EQU   PFCCRRO
CRRLEN   EQU   PFCCRRLN
PFCRSV10 EQU   PFCCRR+1
CRRID    EQU   PFCCRRID
ZSAZTRAC EQU   ISTZSAVE+36
ZSAZSVVR EQU   ISTZSAVE+12
ZSAZSVRR EQU   ISTZSAVE+8
ZSAZSVFC EQU   ISTZSAVE+4
ZSAZACTV EQU   ZSAZSVMS
LCPFTYPE EQU   LCPRPHA
LCPRSTQH EQU   LCPLCCW
LCPCLREP EQU   ISTLCPB+44
LCPUBFSB EQU   LCPFLCCW
LCPRSV77 EQU   ISTLCPB+39
LCPLCCWC EQU   ISTLCPB+38
LCPRSV78 EQU   LCPFLG1
LCPTRANS EQU   LCPFLG1
LCPSTLB  EQU   LCPFLG1
LCPREDRV EQU   LCPFLG1
LCPDIRPT EQU   LCPFLG1
LCPINTER EQU   LCPFLG1
LCPRESET EQU   LCPFLG1
LCPSTYPE EQU   ISTLCPB+36
LCPFSNCH EQU   ISTLCPB+34
LCPFOSN  EQU   ISTLCPB+32
LCPTLBAD EQU   ISTLCPB+28
LCPFDB2  EQU   LCPFDBA+1
LCPFDB1  EQU   LCPFDBA
LCPNXLCW EQU   ISTLCPB+20
LCPDAF   EQU   LCPCID+2
LCPSAF   EQU   LCPCID
LCPLCCW1 EQU   ISTLCPB+12
LCPRRCNT EQU   LCPSEQ+1
LCPRRCCT EQU   LCPSEQ
LCPATOP  EQU   LCPFLAG2
LCPFREE  EQU   LCPFLAG2
LCPDSTAT EQU   LCPFLAG2
LCPEXRES EQU   LCPFID0
LCPZRIMM EQU   LCPTLBPI
LCPRSTRT EQU   LCPFLAG2
LCPASYN  EQU   LCPFLAG2
LCPPRFLG EQU   LCPFLAG2
LCPZMIRC EQU   LCPRUCNT
LCPCHAI2 EQU   LCPCHAIN+1
LCPCHNG  EQU   LCPCHAI1
LCPZRT0B EQU   LCPMNRCD
LCPZRT0A EQU   LCPMNRCD
LCPZRTL9 EQU   LCPZRT09
LCPZRTL8 EQU   LCPZRT08
LCPZRTL7 EQU   LCPZRT07
LCPZRTL6 EQU   LCPZRT06
LCPZRTL5 EQU   LCPZRT05
LCPZRTL4 EQU   LCPZRT04
LCPZRTL3 EQU   LCPZRT03
LCPZRTL2 EQU   LCPZRT02
LCPZRT01 EQU   LCPFLAGS
LCPZRT00 EQU   LCPFLAGS
LCPLNGTH EQU   ISTLCPB+1
LCPTYPE  EQU   ISTLCPB
LCCWDATA EQU   ISTLCCW+4
LCCWCNT  EQU   ISTLCCW+2
LCCWACI  EQU   LCCWFLAG
LCCWRFI  EQU   LCCWFLAG
LCCWPER  EQU   LCCWLSI
LCCWIDAT EQU   LCCWFLAG
LCCWNTVC EQU   LCCWFLAG
LCCWCKPT EQU   LCCWFLAG
LCCWCC   EQU   LCCWFLAG
LCCWCD   EQU   LCCWFLAG
LCCWTYPE EQU   LCCWCTL
LCCWMODE EQU   LCCWCTL
LCCWSOP  EQU   LCCWRWOP
@NM00028 EQU   LCCWRWOP
LCCWSD   EQU   LCCWOP
LCCWSI   EQU   LCCWOP
CUWASIZE EQU   CUWORKA+4
@NM00004 EQU   CUSAVMAP+20
CUSAVR15 EQU   CUSAVMAP+16
CUSAVR14 EQU   CUSAVMAP+12
@NM00003 EQU   CUSAVMAP
CPWVCH   EQU   CPWVAL+1
CPWVLN   EQU   CPWVAL
CPWKCH   EQU   CPWKWD+1
CPWKLN   EQU   CPWKWD
CPWVRB   EQU   ISTCPWA+27
CPWRTC   EQU   ISTCPWA+26
CPWIPT   EQU   ISTCPWA+20
CPWPPT   EQU   ISTCPWA+16
CPWSPT   EQU   ISTCPWA+12
CPWVPT   EQU   ISTCPWA+8
CPWTPT   EQU   ISTCPWA+4
CPWPNC   EQU   CPWLCL+1
@NM00027 EQU   CPWLCL
CPWQUO   EQU   CPWLCL
CPWSSR   EQU   CPWLCL
CPWSEL   EQU   CPWLCL
CPWPLX   EQU   CPWPPC
CPWBLS   EQU   CPWGBL
CPWSIG   EQU   CPWGBL
CPWSPE   EQU   CPWGBL
@NM00026 EQU   CPWGBL
CPWEOR   EQU   CPWGBL
CPWTYP   EQU   CPWGBL
CPWFMT   EQU   CPWGBL
RUBDATA  EQU   ISTRUB
MGLORGRU EQU   ISTMGL+16
MGLSEQNO EQU   MGLRUPTR
@NM00020 EQU   MGLUSSFL
MGLCMPAT EQU   MGLUSSFL
MGLREQ   EQU   MGLUSSFL
RHRSVD5  EQU   RH3
RHRSVD4  EQU   RH3
RHLOG    EQU   RH3
RHRSVD3  EQU   RH3
RHRCDIR  EQU   RH3
RHCDIR   EQU   RH3
RHEB     EQU   RH3
RHBB     EQU   RH3
RHPACE   EQU   RH2
RHRSVD2  EQU   RH2
RHINOP   EQU   RHRSVD1
RHBUSY   EQU   RHRETRY
RHEXCEPT EQU   RH2
RHRRN    EQU   RH2
RHPE     EQU   RH2
RHFME    EQU   RH2
RHSENSE  EQU   RH1
RHFORMAT EQU   RH1
RHDIRI   EQU   RH1
RHSCI    EQU   RH1
RHTYPE   EQU   RH1
RHQS     EQU   RH1
ATCAOS   EQU   ISTATCVT+1552
ATCVIOPM EQU   ATCAOSM+636
ATCTPMMI EQU   ATCAOSM+632
ATCTPMPB EQU   ATCAOSM+600
ATCRPLCT EQU   ATCAOSM+594
ATCCRACT EQU   ATCAOSM+592
ATCSRBCT EQU   ATCAOSM+590
ATCRSV75 EQU   ATCAOSM+589
ATCRSV66 EQU   ATCZFLAG
ATCZF001 EQU   ATCZFLAG
ATCTPCP1 EQU   ATCAOSM+584
ATCTPCP0 EQU   ATCAOSM+580
ATCAICTN EQU   ATCAOSM+576
ATCZR01  EQU   ATCAOSM+572
ATCMPLTA EQU   ATCAOSM+568
ATCASCB  EQU   ATCAOSM+564
ATCAP86  EQU   ATCAOSM+560
ATCAP85  EQU   ATCAOSM+556
ATCAP84  EQU   ATCAOSM+552
ATCAP83  EQU   ATCAOSM+548
ATCAP82  EQU   ATCAOSM+544
ATCAP69  EQU   ATCAOSM+540
ATCAP66  EQU   ATCAOSM+536
ATCAP62  EQU   ATCAOSM+532
ATCAPC59 EQU   ATCAOSM+528
ATCAP56  EQU   ATCAOSM+524
ATCAP55  EQU   ATCAOSM+520
ATCRCFY0 EQU   ATCAOSM+516
ATCAP41  EQU   ATCAOSM+512
ATCAPC25 EQU   ATCAOSM+508
ATCAP23  EQU   ATCAOSM+504
ATCTPSPB EQU   ATCAOSM+472
ATCTRMBP EQU   ATCAOSM+440
ATCPSTA  EQU   ATCAOSM+432
ATCSMABF EQU   ATCAOSM+428
ATCSMAPR EQU   ATCAOSM+424
ATCTPWQA EQU   ATCAOSM+420
ATCSMAID EQU   ATCAOSM+416
ATCSMARA EQU   ATCAOSM+412
ATCCACXA EQU   ATCAOSM+408
ATCZLAAB EQU   ATCAOSM+404
ATCATA10 EQU   ATCAOSM+400
ATCHLTCB EQU   ATCAOSM+396
@NM00019 EQU   ATCVTFLG
ATCVTACT EQU   ATCVTFLG
ATCRPT40 EQU   ATCAOSM+388
ATCRPT39 EQU   ATCAOSM+384
ATCRPT38 EQU   ATCAOSM+380
ATCRPT37 EQU   ATCAOSM+376
ATCRPT36 EQU   ATCAOSM+372
ATCRPT35 EQU   ATCAOSM+368
ATCRPT34 EQU   ATCAOSM+364
ATCRPT33 EQU   ATCAOSM+360
ATCRPT32 EQU   ATCAOSM+356
ATCRPT31 EQU   ATCAOSM+352
ATCRPT30 EQU   ATCAOSM+348
ATCRPT29 EQU   ATCAOSM+344
ATCRPT28 EQU   ATCAOSM+340
ATCRPT27 EQU   ATCAOSM+336
ATCRPT26 EQU   ATCAOSM+332
ATCRPT25 EQU   ATCAOSM+328
ATCRPT24 EQU   ATCAOSM+324
ATCRPT23 EQU   ATCAOSM+320
ATCRPT22 EQU   ATCAOSM+316
ATCRPT21 EQU   ATCAOSM+312
ATCRPT20 EQU   ATCAOSM+308
ATCRPT19 EQU   ATCAOSM+304
ATCRPT18 EQU   ATCAOSM+300
ATCRPT17 EQU   ATCAOSM+296
ATCRPT16 EQU   ATCAOSM+292
ATCRPT15 EQU   ATCAOSM+288
ATCRPT14 EQU   ATCAOSM+284
ATCRPT13 EQU   ATCAOSM+280
ATCRPT12 EQU   ATCAOSM+276
ATCRPT11 EQU   ATCAOSM+272
ATCAP38  EQU   ATCAOSM+268
ATCAP37  EQU   ATCAOSM+264
ATCZDFJ0 EQU   ATCAOSM+260
ATCAP51  EQU   ATCAOSM+256
ATCZPAB2 EQU   ATCAOSM+224
ATCZPAB1 EQU   ATCAOSM+192
ATCZLFVT EQU   ATCAOSM+188
ATCZLPVT EQU   ATCAOSM+184
ATCZDVTX EQU   ATCAOSM+180
ATCZDVTA EQU   ATCAOSM+176
ATCZDVT9 EQU   ATCAOSM+172
ATCZDVT8 EQU   ATCAOSM+168
ATCZDVT7 EQU   ATCAOSM+164
ATCRSV56 EQU   ATCDAPVT+22
ATCDAPDG EQU   ATCDAPVT+20
ATCDXCEA EQU   ATCDAPVT+16
ATCDCEA  EQU   ATCDAPVT+12
ATCDPCIA EQU   ATCDAPVT+8
ATCDSIOA EQU   ATCDAPVT+4
ATCDEOEA EQU   ATCDAPVT
ATCZLAEA EQU   ATCLDAPP+16
ATCZLCEA EQU   ATCLDAPP+12
ATCRSV17 EQU   ATCLDAPP+8
ATCSMFRR EQU   ATCLDAPP+4
ATCCDTID EQU   ATCLDAPP
ATCZAEA  EQU   ATCICAPP+16
ATCZCEA  EQU   ATCICAPP+12
ATCCDTCB EQU   ATCICAPP+8
ATCZSIOA EQU   ATCICAPP+4
ATCCDRPH EQU   ATCICAPP
ATCAP65  EQU   ATCAOSM+96
ATCZDVT6 EQU   ATCAOSM+92
ATCZDVT4 EQU   ATCAOSM+88
ATCZDVT3 EQU   ATCAOSM+84
ATCZDVT1 EQU   ATCAOSM+80
ATCICNCB EQU   ATCAOSM+76
ATCZPSVT EQU   ATCAOSM+72
ATCZFSVT EQU   ATCAOSM+68
ATCAP64  EQU   ATCAOSM+64
ATCAP63  EQU   ATCAOSM+60
ATCAP61  EQU   ATCAOSM+56
ATCAP58  EQU   ATCAOSM+52
ATCAP57  EQU   ATCAOSM+48
ATCAP54  EQU   ATCAOSM+44
ATCAP53  EQU   ATCAOSM+40
ATCAP52  EQU   ATCAOSM+36
ATCAP34  EQU   ATCAOSM+32
ATCAP32  EQU   ATCAOSM+28
ATCAP31  EQU   ATCAOSM+24
ATCAP12  EQU   ATCAOSM+20
ATCAP11  EQU   ATCAOSM+16
ATCCMTCB EQU   ATCAOSM+12
ATCPRPH  EQU   ATCAOSM+8
ATCGSRBF EQU   ATCGSRBG
ATCSRBRT EQU   ATCAOSM
ATCRSVBB EQU   ISTATCVT+908
ATCVDLOK EQU   ISTATCVT+904
ATCVFPAB EQU   ISTATCVT+872
ATCVDPAB EQU   ISTATCVT+840
ATCIOECB EQU   ISTATCVT+836
ATCINCW3 EQU   ISTATCVT+832
ATCMODTB EQU   ISTATCVT+828
ATCUSSPT EQU   ISTATCVT+824
ATCSRTAB EQU   ISTATCVT+820
@NM00018 EQU   ISTATCVT+818
ATCNMCTR EQU   ISTATCVT+816
ATCSEC51 EQU   ATCSECST
ATCSEC40 EQU   ATCSIPD+8
ATCSEC30 EQU   ATCSIPD+4
ATCSEC21 EQU   ATCSIPD
ATCSEC10 EQU   ATCSOPD+4
ATCSEC01 EQU   ATCSOPD
ATCPOIA  EQU   ISTATCVT+788
ATCPODVT EQU   ISTATCVT+784
ATCS49XL EQU   ISTATCVT+780
ATCS49XI EQU   ISTATCVT+776
ATCLCLCT EQU   ATCVLCNT+2
ATCRNCNT EQU   ATCVLCNT
ATCCFEAD EQU   ISTATCVT+768
ATCPTR00 EQU   ISTATCVT+736
ATCRSV10 EQU   ISTATCVT+704
ATCTACB  EQU   ISTATCVT+700
ATCVTINM EQU   ISTATCVT+696
ATCTCLIM EQU   ISTATCVT+692
ATCTCLOM EQU   ISTATCVT+688
ATCVTIPB EQU   ISTATCVT+656
ATCTCIPB EQU   ISTATCVT+624
ATCTIPAB EQU   ISTATCVT+592
ATCOCCCB EQU   ISTATCVT+588
ATCOCCOB EQU   ISTATCVT+584
ATCCDLAD EQU   ISTATCVT+580
ATCCCLAD EQU   ISTATCVT+576
ATCDLRPB EQU   ISTATCVT+544
ATCPGPAB EQU   ISTATCVT+512
ATCVPAB1 EQU   ISTATCVT+480
ATCRSV97 EQU   ISTATCVT+476
ATCRDTLK EQU   ISTATCVT+472
ATCVOCLK EQU   ISTATCVT+468
ATCCDFDN EQU   ISTATCVT+464
ATCCDFIN EQU   ISTATCVT+460
ATCDVTLK EQU   ISTATCVT+456
ATCAP36  EQU   ISTATCVT+452
ATCAP35  EQU   ISTATCVT+448
ATCAP33  EQU   ISTATCVT+444
ATCRSV99 EQU   ISTATCVT+412
ATCLDECB EQU   ISTATCVT+408
ATCLDNCS EQU   ISTATCVT+404
ATCCDPTR EQU   ISTATCVT+400
ATCADEL  EQU   ISTATCVT+396
ATCTODVT EQU   ISTATCVT+392
ATCDEBCH EQU   ISTATCVT+388
ATCHBSIZ EQU   ATCHPGM+2
ATCHBFNO EQU   ATCHPGM
ATCCRME  EQU   ISTATCVT+380
ATCRVCHS EQU   ISTATCVT+372
ATCECTLP EQU   ISTATCVT+368
ATCZDVTB EQU   ISTATCVT+364
ATCECPRT EQU   ISTATCVT+360
ATCVTLOD EQU   ISTATCVT+356
ATCTRPAB EQU   ISTATCVT+352
ATCMSGM  EQU   ISTATCVT+348
ATCMSGP  EQU   ISTATCVT+344
ATCEPT   EQU   ISTATCVT+340
ATCDVT   EQU   ISTATCVT+336
ATCTRCPT EQU   ISTATCVT+332
ATCDVLOD EQU   ISTATCVT+328
ATCALERT EQU   ISTATCVT+324
ATCEPA   EQU   ISTATCVT+320
ATCSAF   EQU   ISTATCVT+318
ATCXRANG EQU   ISTATCVT+317
ATCLAST  EQU   ATCSHRFG
ATCSHRTN EQU   ISTATCVT+308
ATCUEP   EQU   ISTATCVT+304
ATCOCRT  EQU   ISTATCVT+300
ATCCSMA  EQU   ATCCSMR
ATCESC02 EQU   ISTATCVT+292
ATCESC01 EQU   ISTATCVT+288
ATCCDFND EQU   ISTATCVT+284
ATCCDDEL EQU   ISTATCVT+280
ATCCDADD EQU   ISTATCVT+276
ATCMNT   EQU   ISTATCVT+272
ATCRSV16 EQU   ISTATCVT+270
ATCMAXID EQU   ISTATCVT+269
ATCMSGSP EQU   ATCCOM+268
ATCCIDM  EQU   ATCCOM+266
ATCACTRM EQU   ATCCOM+264
ATCNERAP EQU   ATCCOM+260
ATCNESAL EQU   ATCCOM+256
ATCRCC65 EQU   ATCCOM+252
ATCRCC26 EQU   ATCCOM+248
ATCRCC63 EQU   ATCCOM+244
ATCRSV11 EQU   ATCCOM+242
ATCVTMID EQU   ATCCOM+240
ATCAPOST EQU   ATCCOM+236
ATCNERFN EQU   ATCCOM+232
ATCNERNE EQU   ATCCOM+228
ATCNERCV EQU   ATCCOM+224
ATCNERST EQU   ATCCOM+220
ATCDCC61 EQU   ATCCOM+216
ATCDCC60 EQU   ATCCOM+212
ATCSRTDF EQU   ATCCOM+208
ATCSRTAD EQU   ATCCOM+204
ATCFIRA  EQU   ATCCOM+200
ATCSMBQ  EQU   ATCCOM+196
ATCSMRC  EQU   ATCCOM+192
ATCSMRS  EQU   ATCCOM+188
ATCSMQU  EQU   ATCCOM+184
ATCSMRQ  EQU   ATCCOM+180
ATCACDA  EQU   ATCCOM+176
ATCSTMA  EQU   ATCCOM+172
ATCFRSTR EQU   ATCCOM+168
ATCGTSTR EQU   ATCCOM+164
ATCREADA EQU   ATCCOM+160
ATCALOAD EQU   ATCCOM+156
ATCBLDLA EQU   ATCCOM+152
ATCFBRPH EQU   ATCCOM+148
ATCBFTRC EQU   ATCCOM+144
ATCTPBUF EQU   ATCTHTRC
ATCREMOV EQU   ATCCOM+136
ATCADD   EQU   ATCCOM+132
ATCBPDA  EQU   ATCCOM+128
ATCDVTPT EQU   ATCCOM+124
ATCFEPT  EQU   ATCCOM+120
ATCFDVT  EQU   ATCCOM+116
ATCCONFT EQU   ATCCOM+112
ATCPTCHA EQU   ATCCOM+108
ATCAUTHA EQU   ATCCOM+104
ATCACCTA EQU   ATCCOM+100
ATCRDTH  EQU   ATCCOM+96
ATCFRSCH EQU   ATCCOM+92
ATCFSB   EQU   ATCCOM+88
ATCHLTMS EQU   ATCCOM+84
ATCECPRM EQU   ATCCOM+80
ATCECNET EQU   ATCCOM+76
ATCECOPC EQU   ATCCOM+72
ATCVPARM EQU   ATCCOM+68
ATCECVRQ EQU   ATCCOM+64
ATCECSES EQU   ATCCOM+60
ATCOCHA  EQU   ATCCOM+56
ATCDSPLQ EQU   ATCCOM+52
ATCECDSP EQU   ATCCOM+48
ATCVARYQ EQU   ATCCOM+44
ATCECVRY EQU   ATCCOM+40
ATCHALTQ EQU   ATCCOM+36
ATCECHLT EQU   ATCCOM+32
ATCMODQ  EQU   ATCCOM+28
ATCECMOD EQU   ATCCOM+24
ATCASCHD EQU   ATCCOM+20
ATCSRT   EQU   ATCCOM+16
ATCRDT   EQU   ATCCOM+12
ATCDCFRR EQU   ATCCOM+8
ATCAPI   EQU   ATCCOM+4
ATCRSV04 EQU   ATCSTAT4
ATCNCSD  EQU   ATCSTAT4
ATCMTST  EQU   ATCSTAT4
ATCTPRT  EQU   ATCSTAT4
ATCPRTAT EQU   ATCSTAT4
@NM00017 EQU   ATCPOFLG
ATCPOUNS EQU   ATCPOFLG
ATCHSDMF EQU   ATCSTFLG
@NM00016 EQU   ATCSTAT1
ATCINHLT EQU   ATCSTAT1
ATCNETSL EQU   ATCSTAT1
ATCQKHLT EQU   ATCSTAT1
ATCSNHLT EQU   ATCSTAT1
ATCACTIV EQU   ATCSTAT1
ATCSTART EQU   ATCSTAT1
RPHNEXPO EQU   ISTRPH+104
RPHSAV16 EQU   RPHWORK+60
RPHSAV15 EQU   RPHWORK+56
RPHSAV14 EQU   RPHWORK+52
RPHSAV13 EQU   RPHWORK+48
RPHSAV12 EQU   RPHWORK+44
RPHSAV11 EQU   RPHWORK+40
RPHSAV10 EQU   RPHWORK+36
RPHSAVE9 EQU   RPHWORK+32
RPHSAVE8 EQU   RPHWORK+28
RPHSAVE7 EQU   RPHWORK+24
RPHSAVE6 EQU   RPHWORK+20
RPHSAVE5 EQU   RPHWORK+16
RPHSAVE4 EQU   RPHWORK+12
RPHSAVE3 EQU   RPHWORK+8
RPHSAVE2 EQU   RPHWORK+4
RPHSHALF EQU   RPHSAVE1+2
RPHSBIT8 EQU   RPHSBITS
RPHSBIT7 EQU   RPHSBITS
RPHSBIT6 EQU   RPHSBITS
RPHSBIT5 EQU   RPHSBITS
RPHSBIT4 EQU   RPHSBITS
RPHSBIT3 EQU   RPHSBITS
RPHSBIT2 EQU   RPHSBITS
RPHSBIT1 EQU   RPHSBITS
RPHSBYTE EQU   RPHSAVE1
RPHPABQP EQU   RPHPABQA+1
RPHPABFG EQU   RPHPABQA
RPHSRP34 EQU   RPHSRPRM+2
RPHSRP12 EQU   RPHSRPRM
RPHWEGT  EQU   RPHCSPA
RPHMAJCB EQU   ISTRPH+21
RPHPABOF EQU   ISTRPH+20
RPHRESUM EQU   RPHRESMA+1
RPHRSV01 EQU   RPHWPFLG
RPHPURGE EQU   RPHWPFLG
RPHPT    EQU   RPHWPFLG
RPHWT    EQU   RPHWPFLG
RPHRSKEY EQU   RPHWPFLG
RPHDVTA  EQU   ISTRPH+12
RPHTIK   EQU   RPHTSKID+3
@NM00015 EQU   RPHTSKID
RPHRPHAP EQU   RPHRPHA+1
@NM00014 EQU   RPHRPHA
RPHGATE  EQU   RPHRPHA
@NM00013 EQU   RPHFLGB
RPHRLCRA EQU   RPHFLGB
RPHNRSAV EQU   RPHFLGB
RPHPGCMP EQU   RPHFLGB
RPHFBAPS EQU   RPHFLGB
RPHBSSP  EQU   RPHFLGB
RPHLOCK  EQU   RPHFLGB
RPHFNFLG EQU   RPHFSTLC
RPHMLTCP EQU   RPHFLAGS
RPHSMCLR EQU   RPHFLAGS
RPHSMTYP EQU   RPHFLAGS
RPHSMQ   EQU   RPHFLAGS
RPHAUTEX EQU   RPHAPTYP
RPHSPGIN EQU   RPHFLAGS
RPHOGIND EQU   RPHFLAGS
RPHLNGTH EQU   ISTRPH+1
RPHTYPE  EQU   ISTRPH
DYPPAB   EQU   ISTDYPAB+16
DYPRSV01 EQU   ISTDYPAB+12
DYPTSKID EQU   ISTDYPAB+8
DYPCHAIN EQU   ISTDYPAB+4
DYPFLGS  EQU   ISTDYPAB+2
DYPLNGTH EQU   ISTDYPAB+1
DYPTYPE  EQU   ISTDYPAB
LOKXCL   EQU   @NM00011
LOKPRY   EQU   @NM00011
@NM00012 EQU   @NM00011
@NM00010 EQU   LOKCHNG
LOKCT    EQU   ISTLOK
PABRPHA  EQU   PABRPHFG+1
PABNODQ  EQU   PABFLAGS
PABINHBT EQU   PABFLAGS
PABERLOK EQU   PABERRLK
PABSSN   EQU   PABFLAGS
PABDYNAM EQU   PABFLAGS
PABNORPR EQU   PABFLAGS
PABPRIOR EQU   PABFLAGS
PABAPYP  EQU   PABFLAGS
PABDVTA  EQU   ISTPAB+9
PABOFFST EQU   ISTPAB+8
PABCHNGP EQU   PABCHAIN+1
PABRSV02 EQU   PABCHAIN
PABRUNNG EQU   PABCHAIN
PABRESET EQU   PABCHAIN
PABUNCON EQU   PABCHAIN
PABCDP   EQU   PABCHAIN
PABRESCH EQU   PABCHAIN
PABCHNG  EQU   PABCHAIN
PABWEQP  EQU   PABWEQA+1
PABRSV01 EQU   PABWEQA
PABWEQG  EQU   PABWEQA
NCSAPPAB EQU   NCSAPP+608
NCSAPDAT EQU   NCSAPBUE+8
NCSAPRU  EQU   NCSAPBUE+3
NCSRSV04 EQU   NCSAPBUE
NCSAPEND EQU   NCSAPP+84
NCSAPTXT EQU   NCSAPP+76
NCSAPECB EQU   NCSAPP+72
NCSAPSA  EQU   NCSAPP
NCSPLPDB EQU   NCSPLSID+5
NCSPLNID EQU   NCSPLPHD
NCSRSVD4 EQU   NCSPLSTA
NCSPLPO  EQU   NCSPLSTA
NCSRSVD2 EQU   NCSCRMOD
NCSPTMOD EQU   NCSCRMOD
NCSAIMOD EQU   NCSCRMOD
NCSRSVD1 EQU   NCSCHKPT+1
NCSPTUSE EQU   NCSCHKPT+1
NCSRNME  EQU   NCSCHKPT+1
NCSCUA   EQU   NCSCHKPT+1
NCSANSMD EQU   NCSCHKPT+1
NCSLGMOD EQU   NCSCHKPT
NCSLGAPL EQU   NCSCHKPT
NCSDTRLM EQU   NCSCHKPT
NCSESLM  EQU   NCSCHKPT
NCSNRPL  EQU   NCSCHKPT
NCSPOLD  EQU   NCSCHKPT
NCSPACTV EQU   NCSCHKPT
NCSACTV  EQU   NCSCHKPT
NCSCRDTE EQU   ISTNCSPL+264
NCSPLRTY EQU   ISTNCSPL+263
NCSPLRH  EQU   ISTNCSPL+260
NCSUFMCB EQU   ISTNCSPL+256
NCSSENS2 EQU   NCSSENSE+2
NCSSNS2  EQU   NCSSENSE+1
NCSSNS1  EQU   NCSSENSE
NCSPLNSN EQU   ISTNCSPL+240
NCSPLMID EQU   ISTNCSPL+232
NCSPLPID EQU   ISTNCSPL+231
NCSPLGID EQU   ISTNCSPL+230
NCSPLSQN EQU   ISTNCSPL+228
NCSRNAME EQU   ISTNCSPL+220
NCSPLRUI EQU   ISTNCSPL+212
NCSPLRUO EQU   ISTNCSPL+208
NCSPLRRP EQU   ISTNCSPL+204
NCSPLWEL EQU   ISTNCSPL+200
NCSPLSPL EQU   ISTNCSPL+196
NCSPLP3  EQU   ISTNCSPL+192
NCSPLP2  EQU   ISTNCSPL+188
NCSPLP1  EQU   ISTNCSPL+184
NCSPLOLN EQU   ISTNCSPL+182
@NM00009 EQU   NCSPLFL5
NCSSDLK  EQU   NCSPLFL5
NCSSCPPS EQU   NCSPLFL5
NCSDLRSN EQU   ISTNCSPL+180
NCSPL2AP EQU   NCSPLFL4
NCSDSPN  EQU   NCSPLFL4
NCSDSPI  EQU   NCSPLFL4
NCSDSPA  EQU   NCSPLFL4
NCSDSPE  EQU   NCSPLFL4
NCSPLVID EQU   NCSPLFL4
NCSPLRSO EQU   NCSPLFL4
NCSDLNID EQU   NCSPLFL4
NCSEND   EQU   NCSPLFL3
NCSFINAL EQU   NCSPLFL3
NCSANS   EQU   NCSPLFL3
NCSPID   EQU   NCSPLFL3
NCSGID   EQU   NCSPLFL3
NCSPLANS EQU   NCSPLFL3
NCSEPP   EQU   NCSPLFL3
NCSPLMOM EQU   NCSPLFL3
NCSPLVIT EQU   NCSPLFL2
NCSPLVIS EQU   NCSPLFL2
NCSREMPO EQU   NCSPLFL2
NCSPLDS  EQU   NCSPLFL2
NCSOUFMC EQU   NCSPLFL2
NCSPLRIO EQU   NCSPLFL2
NCSPLRSF EQU   NCSPLFL2
NCSPLVDP EQU   NCSPLFL2
NCSPLPOS EQU   NCSPLFL1
NCSPL2CN EQU   NCSPLFL1
NCSPLAPU EQU   NCSPLFL1
NCSPLNON EQU   NCSPLFL1
NCSPLREQ EQU   NCSPLFL1
NCSPLEBN EQU   NCSPLFL1
NCSPLSOM EQU   NCSPLFL1
NCSPL2IN EQU   NCSPLFL1
NCSPLRCR EQU   ISTNCSPL+172
NCSPLECB EQU   ISTNCSPL+164
NCSPLDAF EQU   NCSPLCID+2
NCSPLSAF EQU   NCSPLCID
NCSPLRCD EQU   NCSPLRAD+1
NCSLSCMD EQU   NCSPLRAD
NCSPLWRF EQU   ISTNCSPL+72
NCSPLWRE EQU   ISTNCSPL+68
NCSSTCMD EQU   NCSCRFLG
NCSUSRNF EQU   NCSCRFLG
NCSOPRQU EQU   NCSCRFLG
NCSCRDSE EQU   NCSCRFLG
NCSFMERP EQU   NCSCRFLG
NCSFMCLD EQU   NCSCRFLG
NCSPLCLD EQU   NCSCRFLG
NCSPLWRM EQU   NCSCRFLG
NCSPLUAD EQU   ISTNCSPL+64
NCSMSGSP EQU   ISTNCSPL+63
NCSNCPEP EQU   ISTNCSPL+62
NCSCMDB  EQU   NCSPLCMD+1
@NM00008 EQU   NCSCMDA
NCSPLUFM EQU   NCSCMDA
NCSPLFLO EQU   NCSCMDA
NCSPLSYN EQU   NCSCMDA
NCSPLCTL EQU   NCSCMDA
NCSPLSYS EQU   NCSCMDA
NCSPLLPT EQU   ISTNCSPL+56
NCSPLRPT EQU   ISTNCSPL+52
NCSCRPID EQU   ISTNCSPL+51
NCSCRCMD EQU   ISTNCSPL+50
NCSDLID  EQU   ISTNCSPL+44
NCSPLLID EQU   ISTNCSPL+36
NCSPLRID EQU   ISTNCSPL+28
NCSRRNPT EQU   ISTNCSPL+24
NCSIORC  EQU   ISTNCSPL+23
NCSPRMRC EQU   ISTNCSPL+22
NCSOVFMC EQU   NCSPLVF1
NCSRSV02 EQU   NCSPLVFL
NCSDACLK EQU   NCSPLVFL
NCSABCON EQU   NCSPLVFL
NCSDCONT EQU   NCSPLVFL
NCSVSTAT EQU   NCSPLVFL
NCSVDEL  EQU   NCSPLVFL
NCSVNCSA EQU   NCSPLVFL
NCSVBF16 EQU   NCSPLVBF+1
NCSVBF15 EQU   NCSPLVBF+1
NCSVBF14 EQU   NCSPLVBF+1
NCSVBF13 EQU   NCSPLVBF+1
NCSVBF12 EQU   NCSPLVBF+1
NCSVBF11 EQU   NCSPLVBF+1
NCSVBF10 EQU   NCSPLVBF+1
NCSVBF09 EQU   NCSPLVBF+1
NCSVBF08 EQU   NCSPLVBF
NCSVBF07 EQU   NCSPLVBF
NCSVBF06 EQU   NCSPLVBF
NCSVBF05 EQU   NCSPLVBF
NCSVBF04 EQU   NCSPLVBF
NCSVBF03 EQU   NCSPLVBF
NCSVBF02 EQU   NCSPLVBF
NCSVBF01 EQU   NCSPLVBF
NCSPLVCD EQU   ISTNCSPL+17
@NM00007 EQU   ISTNCSPL+16
NCSCRWKA EQU   NCSPFX+12
@NM00006 EQU   NCSPFX
PFXBCK   EQU   ISTPFX+12
PFXFWD   EQU   ISTPFX+8
PFXLNG   EQU   ISTPFX+5
PFXPRTY  EQU   ISTPFX+4
PFXCBID  EQU   PFXID
POHID    EQU   ISTPOHD+2
POHGEN   EQU   POHSTAT
POHRREQ  EQU   POHSTAT
POHRSVD2 EQU   POHSTAT
POHCNTRL EQU   POHSTAT
POHLBL   EQU   POHSTAT
POHDATA  EQU   POHSTAT
POHEND   EQU   POHSTAT
POHRSVD1 EQU   ISTPOHD
CVTLEVL  EQU   CVTRELNO+2
CVTNUMB  EQU   CVTRELNO
CVTMDL   EQU   CVTFIX+250
@NM00002 EQU   CVTFIX+248
@NM00001 EQU   CVTFIX
CVTRV482 EQU   CVTXTNT2+128
CVTRV481 EQU   CVTXTNT2+124
CVTRV480 EQU   CVTXTNT2+120
CVTRV479 EQU   CVTXTNT2+118
CVTRV478 EQU   CVTXTNT2+117
CVTRV477 EQU   CVTXTNT2+116
CVTRV476 EQU   CVTXTNT2+115
CVTRV475 EQU   CVTXTNT2+114
CVTRV474 EQU   CVTRV466
CVTRV473 EQU   CVTRV466
CVTRV472 EQU   CVTRV466
CVTRV471 EQU   CVTRV466
CVTRV470 EQU   CVTRV466
CVTRV469 EQU   CVTRV466
CVTRV468 EQU   CVTRV466
CVTRV467 EQU   CVTRV466
CVTRV465 EQU   CVTRV457
CVTRV464 EQU   CVTRV457
CVTRV463 EQU   CVTRV457
CVTRV462 EQU   CVTRV457
CVTRV461 EQU   CVTRV457
CVTRV460 EQU   CVTRV457
CVTRV459 EQU   CVTRV457
CVTRV458 EQU   CVTRV457
CVTRV456 EQU   CVTXTNT2+108
CVTRV455 EQU   CVTXTNT2+104
CVTRV454 EQU   CVTXTNT2+100
CVTRV453 EQU   CVTXTNT2+96
CVTRV452 EQU   CVTXTNT2+94
CVTRV451 EQU   CVTXTNT2+92
CVTRV450 EQU   CVTXTNT2+90
CVTRV449 EQU   CVTXTNT2+88
CVTRV448 EQU   CVTXTNT2+87
CVTRV447 EQU   CVTXTNT2+86
CVTRV446 EQU   CVTRV438
CVTRV445 EQU   CVTRV438
CVTRV444 EQU   CVTRV438
CVTRV443 EQU   CVTRV438
CVTRV442 EQU   CVTRV438
CVTRV441 EQU   CVTRV438
CVTRV440 EQU   CVTRV438
CVTRV439 EQU   CVTRV438
CVTRV437 EQU   CVTRV429
CVTRV436 EQU   CVTRV429
CVTRV435 EQU   CVTRV429
CVTRV434 EQU   CVTRV429
CVTRV433 EQU   CVTRV429
CVTRV432 EQU   CVTRV429
CVTRV431 EQU   CVTRV429
CVTRV430 EQU   CVTRV429
CVTRV428 EQU   CVTXTNT2+80
CVTRV427 EQU   CVTXTNT2+76
CVTRV426 EQU   CVTXTNT2+72
CVTRV425 EQU   CVTXTNT2+68
CVTATACT EQU   CVTATCVT
CVTRV423 EQU   CVTXTNT2+62
CVTRV422 EQU   CVTXTNT2+60
CVTRV421 EQU   CVTXTNT2+58
CVTRV420 EQU   CVTXTNT2+56
CVTRV419 EQU   CVTXTNT2+55
CVTRV418 EQU   CVTXTNT2+54
CVTRV417 EQU   CVTRV409
CVTRV416 EQU   CVTRV409
CVTRV415 EQU   CVTRV409
CVTRV414 EQU   CVTRV409
CVTRV413 EQU   CVTRV409
CVTRV412 EQU   CVTRV409
CVTRV411 EQU   CVTRV409
CVTRV410 EQU   CVTRV409
CVTRV408 EQU   CVTRV400
CVTRV407 EQU   CVTRV400
CVTRV406 EQU   CVTRV400
CVTRV405 EQU   CVTRV400
CVTRV404 EQU   CVTRV400
CVTRV403 EQU   CVTRV400
CVTRV402 EQU   CVTRV400
CVTRV401 EQU   CVTRV400
CVTICB   EQU   CVTXTNT2+48
CVTSKTA  EQU   CVTXTNT2+44
CVTSHSB  EQU   CVTSHS
CVTRSV98 EQU   CVTXTNT2+36
CVTRSV97 EQU   CVTXTNT2+34
CVTRSV96 EQU   CVTXTNT2+32
CVTOLTEP EQU   CVTXTNT2+28
CVTQIDA  EQU   CVTQID+1
CVTRSV95 EQU   CVTQID
CVTRSV94 EQU   CVTXTNT2+20
CVTRSV93 EQU   CVTXTNT2+16
CVTRSV92 EQU   CVTXTNT2+12
CVTDEBVR EQU   CVTXTNT2+8
CVTRSV91 EQU   CVTXTNT2+6
CVTRSV9H EQU   CVTFLGBT
CVTRSV9G EQU   CVTFLGBT
CVTRSV9F EQU   CVTFLGBT
CVTRSV9E EQU   CVTFLGBT
CVTRSV9D EQU   CVTFLGBT
CVTRSV9C EQU   CVTFLGBT
CVTVME   EQU   CVTFLGBT
CVTNPE   EQU   CVTFLGBT
CVTNUCLS EQU   CVTXTNT2+4
CVTDSSVA EQU   CVTDSSV+1
CVTRSV89 EQU   CVTDSSV
CVTRSV88 EQU   CVTXTNT1+8
CVTRSV87 EQU   CVTXTNT1+4
CVTFACHN EQU   CVTXTNT1
CVTRV488 EQU   CVTMAP+412
CVTRV487 EQU   CVTMAP+408
CVTRV486 EQU   CVTMAP+404
CVTRV485 EQU   CVTMAP+400
CVTACTAP EQU   CVTMAP+396
CVTAUTH  EQU   CVTMAP+392
CVTATMCA EQU   CVTATMCT+1
CVTATMST EQU   CVTATMCT
CVTRSV61 EQU   CVTMAP+384
CVTVOLT1 EQU   CVTVOLM1+1
CVTVOLI1 EQU   CVTVOLF1
CVTSTOA  EQU   CVTMAP+376
CVTRSV58 EQU   CVTMAP+374
CVTRSV57 EQU   CVTMAP+372
CVTDDCE  EQU   CVTMAP+368
CVTPNWFR EQU   CVTMAP+364
CVTSMF   EQU   CVTMAP+360
CVTSULK  EQU   CVTMAP+358
CVTSLKO  EQU   CVTSYSK
CVTSLKP  EQU   CVTSYSK
CVTSLKQ  EQU   CVTSYSK
CVTSLKR  EQU   CVTSYSK
CVTRSV56 EQU   CVTSYSK
CVTRSV55 EQU   CVTSYSK
CVTRSV54 EQU   CVTSYSK
CVTRSV53 EQU   CVTSYSK
CVTRSV52 EQU   CVTA1F1
CVTRSV51 EQU   CVTA1F1
CVTRSV50 EQU   CVTA1F1
CVTRSV49 EQU   CVTA1F1
CVTRSV48 EQU   CVTA1F1
CVTRSV47 EQU   CVTA1F1
CVTSRSW  EQU   CVTA1F1
CVTPFSW  EQU   CVTA1F1
CVTPCVT  EQU   CVTMAP+352
CVTRSV46 EQU   CVTMAP+344
CVTRSV45 EQU   CVTMAP+340
CVTRSV44 EQU   CVTMAP+338
CVTRSV43 EQU   CVTMAP+336
CVTHJESA EQU   CVTHJES+1
CVTRSV42 EQU   CVTHJES
CVTEXT2A EQU   CVTEXT2+1
CVTRSV41 EQU   CVTEXT2
CVTAPFA  EQU   CVTAPF+1
CVTRSV40 EQU   CVTAPF
CVTRV518 EQU   CVTINTLA
CVTRV517 EQU   CVTERPV
CVTEORM  EQU   CVTMAP+312
CVTMCHPR EQU   CVTMAP+308
CVTTZ    EQU   CVTMAP+304
CVTJEPS  EQU   CVTMAP+300
CVTJESCT EQU   CVTMAP+296
CVTMODE  EQU   CVTMAP+292
CVTPTRV  EQU   CVTMAP+288
CVTREAL  EQU   CVTMAP+284
CVTRSV39 EQU   CVTMAP+280
CVTRSV38 EQU   CVTMAP+276
CVTDMSRA EQU   CVTDMSR+1
CVTRSV37 EQU   CVTDMSR
CVTQMSGA EQU   CVTQMSG+1
CVTRSV36 EQU   CVTQMSG
CVTAMFF  EQU   CVTMAP+264
CVTPURGA EQU   CVTPURG+1
CVTRSV35 EQU   CVTPURG
CVTCBSP  EQU   CVTMAP+256
CVTATERA EQU   CVTATER+1
CVTSYST  EQU   CVTATER
CVTVOLT2 EQU   CVTTAT
CVTVOLI2 EQU   CVTVOLF2
CVTAQAVB EQU   CVTAQAVT+1
CVTRSV34 EQU   CVTTCMFG
CVTRSV33 EQU   CVTTCMFG
CVTRSV32 EQU   CVTTCMFG
CVTRSV31 EQU   CVTTCMFG
CVTRSV30 EQU   CVTTCMFG
CVTRSV29 EQU   CVTTCMFG
CVTRSV28 EQU   CVTTCMFG
CVTTCRDY EQU   CVTTCMFG
CVTGTFA  EQU   CVTGTF+1
CVTRSV27 EQU   CVTGTFST
CVTRNIO  EQU   CVTGTFST
CVTUSR   EQU   CVTGTFST
CVTRV318 EQU   CVTFORM
CVTRV317 EQU   CVTTMODE
CVTRV316 EQU   CVTSTATE
CVTRV315 EQU   CVTGTFS
CVTGTFAV EQU   CVTGTFS
CVT0SCR1 EQU   CVTMAP+232
CVTRV515 EQU   CVTMAP+228
CVTRMS   EQU   CVTMAP+224
CVTPATCH EQU   CVTMAP+220
CVTTSCE  EQU   CVTMAP+216
CVTLNKSC EQU   CVTMAP+214
CVTQABST EQU   CVTMAP+212
CVTMDLDS EQU   CVTMAP+208
CVTUSER  EQU   CVTMAP+204
CVTABEND EQU   CVTMAP+200
CVTSMCA  EQU   CVTMAP+196
CVTRSV18 EQU   CVTMAP+192
CVTQLPAQ EQU   CVTMAP+188
CVTQCDSR EQU   CVTMAP+184
CVTRSV17 EQU   CVTOPTB
CVTRSV16 EQU   CVTOPTB
CVTFP    EQU   CVTOPTB
CVTAPTHR EQU   CVTOPTB
CVTNLOG  EQU   CVTOPTB
CVTTOD   EQU   CVTOPTB
CVTCTIMS EQU   CVTOPTB
CVTPROT  EQU   CVTOPTB
CVTXPFP  EQU   CVTOPTA
CVTASCII EQU   CVTOPTA
CVTRSV13 EQU   CVTOPTA
CVTRSV12 EQU   CVTOPTA
CVTNIP   EQU   CVTOPTA
CVTDDR   EQU   CVTOPTA
CVTAPR   EQU   CVTOPTA
CVTCCH   EQU   CVTOPTA
CVTSNCTR EQU   CVTMAP+180
CVTQMWR  EQU   CVTMAP+176
CVTQOCR  EQU   CVTMAP+172
CVT1EF00 EQU   CVTMAP+168
CVTMZ00  EQU   CVTMAP+164
CVTHEAD  EQU   CVTMAP+160
CVTRSV11 EQU   CVTMAP+156
CVT0PT01 EQU   CVTMAP+152
CVTMSER  EQU   CVTMAP+148
CVTRV516 EQU   CVTIERLC
CVTILCH  EQU   CVTMAP+140
CVT0DS   EQU   CVTMAP+136
CVTFBOSV EQU   CVTMAP+132
CVTNUCB  EQU   CVTMAP+128
CVTIXAVL EQU   CVTMAP+124
CVTIOQET EQU   CVTMAP+120
CVTDCBA  EQU   CVTMAP+117
CVTMVS2  EQU   CVTDCB
CVT6DAT  EQU   CVTDCB
CVT4MPS  EQU   CVTDCB
CVTRSV09 EQU   CVTDCB
CVT4MS1  EQU   CVTDCB
CVT2SPS  EQU   CVTDCB
CVT1SSS  EQU   CVTDCB
CVTRSV08 EQU   CVTDCB
CVTSTB   EQU   CVTMAP+112
CVTQTD00 EQU   CVTMAP+108
CVTQTE00 EQU   CVTMAP+104
CVTCUCB  EQU   CVTMAP+100
CVTSJQ   EQU   CVTMAP+96
CVTPBLDL EQU   CVTMAP+92
CVTTPC   EQU   CVTMAP+88
CVTSVDCB EQU   CVTMAP+84
CVTBRET  EQU   CVTMAP+82
CVTEXIT  EQU   CVTMAP+80
CVT0FN00 EQU   CVTMAP+76
CVTDARA  EQU   CVTDAR+1
CVTRSV07 EQU   CVTFLGS1
CVTRSV06 EQU   CVTFLGS1
CVTRSV05 EQU   CVTFLGS1
CVTRSV04 EQU   CVTFLGS1
CVTRSV03 EQU   CVTFLGS1
CVTRSV02 EQU   CVTFLGS1
CVTRSV01 EQU   CVTFLGS1
CVTDMPLK EQU   CVTFLGS1
CVTXITP  EQU   CVTMAP+68
CVTZDTAB EQU   CVTMAP+64
CVTMSLT  EQU   CVTMAP+60
CVTDATE  EQU   CVTMAP+56
CVTBTERM EQU   CVTMAP+52
CVTSYSAD EQU   CVTMAP+48
CVTXTLER EQU   CVTMAP+44
CVTILK2  EQU   CVTMAP+40
CVTILK1  EQU   CVTMAP+36
CVTPRLTV EQU   CVTMAP+32
CVTPCNVT EQU   CVTMAP+28
CVT0VL00 EQU   CVTMAP+24
CVTXAPG  EQU   CVTMAP+20
CVTBUF   EQU   CVTMAP+16
CVTJOB   EQU   CVTMAP+12
CVTLINK  EQU   CVTMAP+8
CVT0EF00 EQU   CVTMAP+4
CVTTCBP  EQU   CVTMAP
CVT      EQU   CVTMAP
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RC00104 EQU   @RC00103
@ENDDATA EQU   *
         END   ISTINCU1,(C'PLS0404',0603,75129)
