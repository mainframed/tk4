     TITLE 'IEBPPCH1-IEBPTPCH MAIN PROCESSOR'
*
*
* TITLE  - IEBPPCH1 ---RELEASE SEVENTEEN
*
*
* FUNCTION/OPERATION - THIS IS THE MAIN PROCESSING MODULE OF THE PRINT/
* PUNCH UTILITY. IT OPERATES ON A TABLE BUILT BY IEBPPAL1. IT FUNCTIONS
* AS FOLLOWS:
*        THE TABLE IS STORED, AND PROCESSING PARAMATERS ARE
*  ESTABLISHED.
* THE INPUT IS OPENED THE FIRST TIME, THE OUTPUT IS OPENED, AND IF
* NECESSARY THE INPUT IS OPENED THE SECOND TIME. THE INPUT DATA SET IS
* OPENED AS A BSAM FILE. THE INPUT CAN BE PHYSICAL SEQUENTIAL OR
* PARTITIONED. A DCB EXIT IS TAKEN BY THE UTILITY WHEREUPON IT IS
* DETERMINED IF THE INPUT CONSISTS OF VARIABLE SPANNED RECORDS(VALID IN
* PS ORGANIZATION ONLY). IF VS/VBS,AND THE RECORD LENGTH DOES NOT
* EXCEED 32K, THE INPUT DATA SET IS CLOSED, AND THEN REOPENED FOR
* QSAM IO. IF VARIABLE AND >32K, THE FILE IS PROCESSED BLOCK BY
* BLOCK WITH BSAM.
*       DURING THE FIRST (OR ONLY) INPUT OPEN, THE UTILITY TAKES
* A HEADER LABEL EXIT(IF SUL HAS BEEN SPECIFIED FOR SYSUT1). IT
* INTERROGATES THE TABLE FROM PAL1 FOR USER LABEL PROCESSING
* INSTRUCTIONS AND EXIT ADDRESS. IF NONE, THE DEFAULT OPTION OF
* PROCESSING ALL USER HEADER AND TRAILER LABELS AS DATA IS EXCER-
* CISED. IF A USER EXIT EXISTS, IT IS ACCESSED AND THE LABELS ARE
* PROCESSED ACCORDING TO THE 'LABELS' STATEMENT,DEPENDENT ON USER
* SUPPLIED RETURN CODES.
*        UPON RETURN TO THE UTILITY FROM OPEN, THE STORED LABELS
* ARE OUTPUTTED UNLESS THE USER HAS SPECIFIED OTHERWISE.
*
*      IF THE INPUTDATA SET, SYSUT1, IS PARTITIONED AND THE ENTIRE
* DATA SET IS TO BE READ AND PROCESSED, THE PROGRAM READS THE DIRECTORY
* AND EXTRACTS THE NAME AND LOCATION OF EACH ENTRY. THE ENTRIES ARE
* THEN SORTED BY TTR AND ALIAS SO THAT MEMBERS CAN BE WRITTEN IN THE
* ORDER OF THEIR PHYSICAL OCCURRENCE ON THE DIRECT ACCESS DEVICE.
*
*
*      IF THE INPUT DATA SET IS PARTITIONED, THE NAME AND LOCATION OF
* THE MEMBER THAT IS TO BE PROCESSED IS OBTAINED AND THE DATA SET IS
* POSITIONED SO THAT THE MEMBER CAN BE READ.
*
*      ANY USER-SUPPLIED TITLES ARE WRITTEN AT THIS TIME. IF THE INPUT
* IS PARTITIONED, THE MEMBER CURRENTLY BEING PROCESSED IS IDENTIFIED.
* A NEW PAGE IS STARTED FOR PRINTED OUTPUT OR A NEW SEQUENCE NUMBER IS
* INITIATED FOR PUNCHED OUTPUT. THE PROGRAM THEN DETERMINES WHETHER
* THERE ARE USER WRITTEN RECORD GROUPS AND PERFORMS INITIALIZATION
* ACCORDINGLY. IF THERE IS NO EDITING, INITIALIZATION IS PERFORMED TO
* PROCESS THE SEQUENTIAL DATA SET OR MEMBER IN THE STANDARD FORMAT.
*
*      THE  R D C H  ROUTINE READS A PHYSICAL RECORD AND DETERMINES IF
* A NOTE LIST IS PRESENT. IF THE PHYSICAL RECORD IS A NOTE LIST AND IT
* IS TO BE OMITTED, THE NEXT PHYSICAL RECORD IS READ.
*
*      AT THIS TIME THE  P R E F O R M  ROUTINE TAKES CONTROL IF,
* PREFORM WAS SPECIFIED AND DEBLOCKS THE INPUT AND WRITES THE OUTPUT.
* THE OUTPUT MAY BE EITHER PRINTED OR PUNCHED.
*
*      THE  R E C L O C 1  ROUTINE DEBLOCKS THE PHYSICAL RECORD AND
* OBTAINS THE LENGTH AND LOCATION OF THE NEXT LOGICAL RECORD. WHEN NO
* LOGICAL RECORDS REMAIN IN A BLOCK, THE  R E C L O C 1  ROUTINE
* RETURNS TO THE  R D C H  ROUTINE, AND ANOTHER PHYSICAL RECORD IS
* READ.
*
*      A USER EXIT CAN BE TAKEN AT THIS POINT TO PROCESS A LOGICAL
* RECORD BEFORE IT IS PROCESSED BY THE PROGRAM.
*
*      THE PROCESSING OF A LOGICAL RECORD INCLUDES CHECKING THE RECORD
* ID TO DETERMINE IF IT IS THE LAST RECORD IN A RECORD GROUP AND
* TESTING THE RECORD COUNT TO SEE IF THE RECORD SHOULD BE SKIPPED. IF
* THE RECORD IS THE LAST RECORD OF A RECORD GROUP, A SWITCH IS SET FOR
* SUBSEQUENT TESTING. IF THE RECORD IS SKIPPED, CONTROL IS PASSED TO
* THE END OF RECORD GROUP TEST.
*
*      NEXT, THE OUTPUT FORMAT OF THE LOGICAL RECORD IS TESTED TO
* DETERMINE IF IT IS TO BE STANDARD OR USER DEFINED. THE  F O R M S
* ROUTINE WRITES A LOGICAL RECORD IN THE STANDARD FORMAT AND WHEN
* NECESSARY, SEGMENTS THE INPUT RECORD INTO MULTIPLE OUTPUT RECORDS.
* THE  F O R M U  ROUTINE EDITS A LOGICAL RECORD ACCORDING TO USER
* SPECIFICATIONS. A USER EXIT MAY BE TAKEN BEFORE THE RECORD IS WRITTEN
* TO ALLOW THE USER TO PERFORM ADDITIONAL EDITING.
*
*      AFTER THE LAST RECORD IN EACH RECORD GROUP IS WRITTEN, THE
* N E X T G R  ROUTINE PERFROMS REINITIALIZATION TO ALLOW THE NEXT
* RECORD GROUP TO BE PROCESSED.
*
*    WHEN THE END OF DATA FOR A MEMBER OF A PO DATA SET IS REACHED
* THE NAME AND LOCATION OF THE NEXT MEMBER IS OBTAINED AND THE DATA SET
* IS POSITIONED TO THE NEXT MEMBER.
*        WHEN THE END OF DATA IS REACHED, OR THE USER'S SPECIFIC
*    DATA REQUEST HAS BEEN FULFILLED,
*
*      THE TASK IS TERMINATED AND CONTROL IS RETURNED TO THE CALLING
* PROGRAM.
*
*
* ENTRY POINT - IEBPPCH1 IS ENTERED BY IEBPPUN1 BY A CALL MACRO.
* REGISTER ONE POINTS TO THE 'DTABLE'.
*
*
* INPUT - ANY SEQUENTIAL OR PARTITIONED DATA SET WITH FIXED, FIXED
* BLOCKED, VARIABLE, VARIABLE BLOCKED OR UNDEFINED RECORD FORMATS.
*
*
*OUTPUT----
*    IF PRINTED, CAN BE ANY SIZE SPECIFIED BY THE USER IN THE
* SYSUT2 DD STATEMENT. IT IS THE USER'S RESPONSIBILITY TO SUPPLY
* THE CORRECT OUTPUT SIZE, DEPENDENT ON THE CAPABILITIES OF THE
* DEVICE BEING USED. IF NO OUTPUT SIZE IS SPECIFIED, PRINT/PUNCH
* SETS THE DEFAULT SIZE OF 121 BYTES. PUNCHED OUTPUT IS 81 BYTES
* AND BOTH ARE FIXED LENGTH RECORDS, THE FIRST CHARACTER OF
* WHICH IS A CONTROL CHARACTER FOR THE OUTPUT DEVICE.
*  OUTPUT MUST BE RECORD LENGTH PLUS 1 BYTE FOR CONTROL CHARACTER.
*
*
* EXTERNAL ROUTINES - USES A BALR TO GO TO TWO ROUTINES IN IEBPPUN1 --
* PPMSGWRT AND PPMNMSG -- WHICH DECIDES WHAT MESSAGE TO PRINT AND THEN
* CONTROL IS GIVEN TO THE ZZPR ROUTINE, ALSO OF THE SAME MODULE, WHICH
* IS THE MESSAGE WRITER.
*
*
* EXITS - N O R M A L -- A RETURN TO THE USER OF THE PROGRAM.
*
*                        A LINK TO A USER EXIT THAT MANIPULATES LOGICAL
*                        RECORDS BEFORE PROCESSING(INREC).
*
*                        A LINK TO A USER EXIT THAT MANIPULATES LOGICAL
*                        RECORDS BEFORE THEY ARE OUTPUTED(OUTREC).
*
*                       A LOAD OF A USER EXIT ROUTINE THAT
*                       PROCESSES INPUT HDR LABELS(UHIN).
*
*                       A LOAD OF A USER EXIT ROUTINE THAT
*                       PROCESSES INPUT TLR LABELS(UTIN).
*   NO TRAILER LABEL EXIT CAN BE TAKEN, IF THE 'STOPAFT' PARAMETER
* CAUSES  THE UTILITY TO TERMINATE PRIOR TO END OF INPUT.
*
*         E R R O R S -- TO THE ABOVE MENTIONED EXTERNAL ROUTINES WITH
* IT RETURNING TO THIS MODULES END OF JOB ROUTINE. A MESSAGE LOCATED IN
* IEBPPMSG MAY ALSO BE EXTERNALLY REFERENCED AND FILLED IN WITH A
* DDNAME.
*
*
* TABLES & WORK AREAS:
*    STORAGE IS DYNAMICALLY ALLOCATED FOR INPUT AND OUTPUT BUFFERS.
*  INPUT IS BLOCK SIZE PLUS KEY LENGTH PLUS 4 BYTES FOR SEGMENT
* DESCRIPTOR WORDS, IF VRE.
*  LABEL PROCESSING REQUIRES 640 BYTES OF FIXED STORAGE
* IMBEDDED IN THIS MODULE.
*
*
* ATTRIBUTES - NON-REUSABLE
*
*
         EJECT
*
***********************************************************************
* EXAMINE PARAMETERS AND PREFORM INITIALIZATION BASED UPON THOSE      *
* PARAMETERS.                                                         *
***********************************************************************
*
IEBPPCH1 CSECT
*3315050000                                                        4055
*3315249400-250000,251000,253800-254200                            2461
*3315248400-248600,250200-250400,252600,255400-255800,263400       VS0H
*3392271600,271800,351600                                        A23458
*3392057160,305200                                               A23836
*182600,196800                                                    24304
*285810-285950,325660,325720,351000,351600                        27715
*350207,350235,350239                                             29059
*143800,144000                                                    29305
*175200                                                           29475
*351500                                                           30004
*393800
*350326                                                  PTM4866=A38702
*039000,039200                                                     2642
*142000,143200-143600,145200                                     A34102
*292260,292320                                                   A35453
*174200                                                          A36088
*079400-079600,301200                                            A36098
*057050-057120,350342-350344,351500,821800-827000                A38762
*A059300,177100,177120                                           A41759
*C176600                                                         A41759
*A180700-180760,181000-181320                                    A41816
*D180700,181000,182720                                           A41816
*A116020-116192,149580                                           A44337
*D116400-116600,149600                                           A44337
*C149800                                                         A44337
*A228100,228200,229020-221000,229400-229800,351965,829700-829740 A45134
*D228200,229400-229800                                           A45134
*A035500-035584,055300-055360,06500,057020-057040,057144-057342  A45135
*A063420,063440,084700-084780,097304-097388,111900-111997,       A45135
*A283500-283540,287668-287696,305300,311500,316900,347775-347828 A45135
*A350221,350277-350280,351937,825320,827900-829600,830300-830800 A45135
*D038800-041200,053200,057150-057180,057200,287657-287666,       A45135
*D350277,350278,836300                                           A45135
*C042600,055400,057371,065140,097400,287692,292260,292320,       A45135
*C305200,393900,825300                                           A45135
*A051400,051500,055320-055500,056300                            AS12988
*D051400,055320-055400                                          AS12988
*A284320,284350,285840-285845,350050                             A48732
*D063540-063800,064000,284350,285840                             A48732
*C351000                                                         A48793
*A161200-161783,240950,285840-285845,347780-348003,350216,       A48796
*A350218,350224,350228,351000                                    A48796
*D161200-161600,240950,285840,347775-347828,350216,350218,       A48796
*D350221,350223,350301,351000                                    A48796
*A237800-238200,239100-239160                                    A50923
*C237800-238200,239000                                           A50923
*D239200-239600                                                  A50923
*A276300-276392,837900-838800                                   OY01168
*C305200,305300,827600,827700,827900,828300,829500              OY01168
*D275400,275600,276000,350600-351000                            OY01168
*A028715,116180,116392,116592                                   OY01171
*D028675,116180                                                 OY01171
*A61220-61360,351958-351963                                    @YM04138
*A036700,058850,063620-063720                                   YA01459
*C036400,058600                                                 YA01459
*C220800                                                        YA01690
*D097800-101400                                                @YA02556
*C 067200                                                      @ZA03373
*D 067400                                                      @ZA03373
*C 063620,537800                                               @ZA03383
*C251000                                                       @ZA04389
*A103240,103280,105840-105920                                  @ZA06548
*C103400                                                       @ZA06548
*C230200,230800,231400-240200                                  @ZA07371
*A285835,285955                                                @ZA07372
*C285840                                                       @ZA07372
*A067250-067400                                                @ZA07374
*C067600                                                       @ZA07374
*C103240,103280                                                @ZA07390
*A226250,226300                                                @ZA11952
*C226400                                                       @ZA11952
*A220850-220950                                                @ZA11968
*C221000                                                       @ZA11968
         SAVE  (14,12),T,IEBPPCH109-JULY-66 RENUMBER THE STMNT  OY01171
         BALR  BASER,R0                SET BASIC CSECT ADDRESSABILITY
         USING *,BASER,BASER2          TWO BASE REGISTERS FOR MODULE
         USING DTABLE,R1               BASE FOR DTABLE DSECT
         LA    BASER2,4095(BASER)      SET SECOND BASE ADDRESSABILITY
         LA    BASER2,1(BASER2)        BUMP SECOND BASE TO 4096
         ST    R13,PERM13              SAVE REGISTER 13
         ST    R13,SAVEADD+4            SAVE ADDRESS OF SAVE AREA
         LA    R1,SAVEADD               GET PTR TO SAVE AREA
         ST    R1,8(R13)                STORE PTR TO S.A. IN SAVE AREA
         L     R1,24(R13)               RESTORE R1
         ST    R1,TABLEADD                                         UL0H
         LA    R13,SAVEADD             LOAD ADDRESS OF THIS SAVE AREA
*
*          EXAMINE TABLE PREPARED BY ROOT SEGMENT
*            INDICATE EXIT LIST ADDRESSES IN DCB
*
         SR    R2,R2                   CLEAR REGISTER TWO
         C     R2,DDN1                 IS THERE A SYSUT1
         BE    PRPUN2                  NO --- BRANCH
         LA    DCBREG,INSET            YES - GET ADDRESS OF INPUT DCB
         MVC   DDNAM(8,DCBREG),DDN1    MOVE SYSUT1 TO DCB DDNAME
PRPUN2   C     R2,DDN2                 IS THERE A SYSUT2
         BE    PRPUN3                  NO --- BRANCH
         LA    DCBREG,OUTSET           YES - GET ADDRESS OF OUTPUT DCB
         MVC   DDNAM(8,DCBREG),DDN2    MOVE SYSUT2 TO DCB DDNAME
PRPUN3   C     R2,DEXLSTA              IS THERE AN EXIST LIST
         BE    PRPUN4                  NO --- BRANCH
         L     R4,DEXLSTA              YES -- LOAD EXIT LIST ADDRESS
         MVC   EXLIST(EXLEN),0(R4)     MOVE LIST TO BREAK IT UP
         CLI   INHDR,C' '              IS THERE AN INPUT HEADER LAB RTE
         BE    PRPUN3A                 NO --- BRANCH
         LOAD  EPLOC=INHDR                                         UL0H
         ST    R0,UHIN                                             UL0H
         OI    UHIN,X'01'              YES -- SET INDICATOR BYTE IN LST
         MVI   PPHINEX,X'01'      ACTIVATE HEADER LABEL EXIT     A35453
PRPUN3A  CLI   INTLR,C' '              IS THERE A INPUT TRAILER LAB RTE
         BE    PRPUN4                  NO EXIT --- BRANCH
         LOAD  EPLOC=INTLR                                         UL0H
         ST    R0,UTIN                                             UL0H
         OI    UTIN,X'03'              YES -- SET INDICATOR BYTE IN LST
         MVI   PPTINEX,X'03'      ACTIVATE TRAILER LABEL EXIT    A35453
PRPUN4   L     R1,TABLEADD             RESTORE DTABLE BASE         UL0H
         MVC   TABLE(TBLEN),DTBLE      MOVE TCBS & SWTCHS TO BRK   UL0H
*                                      THEM UP FOR PROCESSING
         DROP  R1                      DROP BASE FOR DTABLE
         CLI   PROCKY,X'40'        NO LABEL PRINTING ?           A45135
         BE    CONTIN              YES, SKIP INIT. OF LAB. EX.   A45135
         MVI   PPHINEX,X'01'       INIT HEADER LAB. EXIT         A45135
         CLI   PROCKY,X'10'        ONLY LABEL PRINTING ?         A45135
         BE    CONTIN              YES, SKIP INIT. OF TR. LAB.EX.A45135
         MVI   PPTINEX,X'03'       INIT. TRAILER LAB  EXIT       A45135
CONTIN   EQU   *                                                 A45135
         OC    CDINCRB(4),CDINCRB       CARD INCREMENT SPECIFIED
         BNE   PRPUN5A                  YES, INCREMENT SPECIFIED
         MVI   CDINCRB+3,10             NO,DEFAULT OPTION IS 10
PRPUN5A  CLC   PMAXLINE(2),PHZERO      IS ASSUMED LINES/PAGE COUNT ZERO
         BNE   WHATTYPE      NO -- BRANCH -- USER SUPPLIED      YA01459
         MVI   PMAXLINE+1,60           YES -- INITIALIZE IT
         B     WHATTYPE                OPEN INPUT(SYSUT1) FIRST YA01459
         EJECT
*
*          OPEN DCBS
*            INITIALIZE FOR PRINT
*              OR PUNCH OPERATION
*
PPOPEN   TM    PPSW1,1                 TEST SWITCH FOR PUNCH OPERATION
         BZ    PPOPEN4                 OFF -- BRANCH PRINT OPERATION
*          P U N C H    I N I T I A L I Z A T I O N
         LA    DCBREG,OUTSET           LOAD ADDRESS OF OUTPUT DCB
         LA    CTLREG,STACK2           GET STACKER 2 CTL CHARACTER ADR
         CLI   CNTRL,X'02'             CHECK CTL CHAR PASSED AS PARAM
         BE    PPOPEN6                 IF EQUAL USE STACKER TWO
         BCT   CTLREG,PPOPEN6          IF NOT EQUAL USE STACKER ONE
*          P R I N T    I N I T I A L I Z A T I O N
PPOPEN4  CLI   CNTRL,X'02'             CHECK CTL CHAR PASSED AS PARAM
         BL    ISITFMT                 IF LOWER SNGLE SPACE OUTP A45135
         LA    TEMP1,3                 LOAD LINE INCREMENT - TRI SPACE
         LA    CTLREG,SPTRIPLE         GET ADR OF TRIPLE SPACE CTL CHAR
         BH    PPOPEN5                 TRIPLE SPACE IF COMPARES HIGHER
         BCTR  TEMP1,R0                DOUBLE SPACE IF EQUAL COMPARE
         BCTR  CTLREG,R0               REDUCE PTR TO DOUB SPACE CTL CHR
PPOPEN5  STH   TEMP1,LINEINCR          INITIALIZE LINE INCREMENT TO A
*                                      2 OR 3 -- ASSEMBLY TIME SET TO 1
PPOPEN6  MVC   PPCTL(1),0(CTLREG)      MOVE CTL CHAR TO OUTPUT BUFFER
ISITFMT  TM    PREFORMT,X'81'          IS IT PREFORMATTED INPUT
         BZ    CHKDCBS                                             7034
         TM    PREFORMT,X'80'          IS IT IN ASA CONTROL CHARACTER
         BO    CHKDCBS                                             1591
         NI    OUTSET+36,X'F9'         CLEAR OUT CTL CHAR BITS IN DCB
         OI    OUTSET+36,X'02'         SET CTL CHAR TO MACHINE CODE
*                                                                  7034
*    CHECK ...ARE BOTH SYSPRINT AND SYSUT2  USING  SAME  U.C.B.    7034
*                                                                  7034
CHKDCBS  STM   R4,R6,KEEPR4R6   SAVE R4 R5  R6                     7034
         LA    R6,OUTSET    D C B  ADDRESS                         7034
         SR    R5,R5                                               7034
         L     R5,16(R5)      GET POINTER TO TCB FROM CVT          7034
         L     R5,0(R5)   POINTS TO POINTER OF T C B               7034
         L     R5,4(R5)       POINTER TO CURRENT TCB               7034
         L     R5,12(R5)      POINTER TO TIOT                      7034
         ST    R5,STARTIOT    SAVE POINTER TO START OF TIOT        7034
         LA    R5,28(R5)      FIRST DDNAME ENTRY                   7034
         MVC   SISUT2(8),DDNAM(R6)   GET SYSUT2 DDNAME             7034
FINDIT   CLC   0(8,R5),SISUT2      IS THIS ENTRY SYSUT2 T          7034
         BC    8,GETUCB       YES...GO FIND UCB                    7034
         LA    R4,4          ADDRESS CORECTION                     4055
         SR    R5,R4         GET BEGINNING OF DD ENTRY             4055
         IC    R4,0(R5)      GET LENGTH OF DD ENTRY                4055
         AR    R5,R4         UPDATE POINTER TO NEXT DD ENTRY       4055
         TM    0(R5),X'FF'   IS TIOT ENDED                         4055
         BZ    NOENTRY       YES...ERROR    NO...CONTINUE          4055
         LA    R5,4(R5)      GET ADDRESS OF NEXT DDNAME            4055
         B     FINDIT         SEARCH SOME MORE                     7034
*                                                                  7034
*              GET SYSUT2   UCB ...TEST IT FOR TAPE                7034
*                                                                  7034
GETUCB   L     R5,12(R5)       POINTER TO UCB                      7034
         LA    R5,0(R5)       CLEAR HIGH ORDER BYTE                7034
         LTR   R4,R5              TST UCB ADDR.  FOR ZERO       AS12988
         BZ    PPOPOUT1           ZERO, OPEN SYSUT2             AS12988
         TM   18(R5),X'80'     IS IT TAPE                          7034
         BO    CHKSYSPR     GO GET SYSPRINT U C B                  7034
         LM    R4,R6,KEEPR4R6      NO...                           7034
         B     PPOPOUT          GO TO NORMAL OPEN FOR SYSUT2       7034
*                                                                  7034
*        FIND  SYSPRINT UCB AND COMPARE IT WITH SYSUT2 UCB         7034
*                                                                  7034
CHKSYSPR L     R5,SYSPRPTR    GET ADDRESS OF VCON PPOUT            7034
         LH    R5,40(R5)    GET T I O T   OFFSET                   7034
         L     R6,STARTIOT    BEGINNING OF T I O T  TABLE          7034
         AR    R5,R6      ADD OFFSET TO START OF T I O T           7034
         L     R5,16(R5)    GET U C B    ADDRESS                   7034
         LA    R5,0(R5)       CLEAR THE HIGH ORDER BYTE            7034
         CR    R4,R5          COMPARE UCB ADDRESSES                7034
         BC    8,SETTAPES     EQUAL...DONT OPEN DCB FOR SYSUT2     7034
         LM    R4,R6,KEEPR4R6     RESTORE R4  R5  R6               7034
         B     PPOPOUT        DO NORMAL SYSUT2 OPEN                7034
SETTAPES MVI   NOTOPEN,X'F0'  SET SWITCH FOR WRITE                 7034
         TM    PPSW1,1             PUNCHED OUTPUT ?              A45135
         BO    NOENTRY            YES,SEND ERR. MSG. IEB411I    AS12988
         TM    OUTSET+36,X'02'    IS RECFM FBM ?                AS12988
         BNO   INSEGTST           NO,DONT OPEN UT2 AND CONT.    AS12988
NOENTRY  LM    R4,R6,KEEPR4R6  RESTORE R4 R5 R6                    7034
         LA    TEMP1,OUTSET       DCB OF DDNAME NOT FOUND IN TIOT  7034
         B     DDERROR                                             7034
*          O P E N    O U T P U T    D C B
PPOPOUT1 LM    R4,R6,KEEPR4R6     RESTORE R4,R5,R6              AS12988
PPOPOUT  OPEN  (OUTSET,OUTPUT)
         STM   R4,R6,KEEPR4R6
         LA    TEMP1,OUTSET            GET ADR OF SYSUT2 DCB - OUTPUT
         TM    OFLGS(TEMP1),X'10'      HAS IT BEEN OPENED
         BZ    DDERROR                 NO - PRINT ERROR MESSAGE
         TM    ERRDCB,X'80'   WRONG LRECL OR BLKSIZE PARAM ?     A45135
         BO    DCBERROR       YES, PRINT ERROR MESS.             A45135
         LH    R5,82(TEMP1)  CHECK FOR MAX LRECL                 A38762
         SH    R5,PH1                                              VS0H
         STH   R5,MAXOUT           STORE LRECL-1                 A45135
         TM    PPSW1,1             PUNCH OPERATION ?             A45135
         BZ    PRINTBUF            NO, TEST PRINTBUFF. LENGTH    A45135
SEQCHECK TM    PPSW1,X'03'         CARDS TO BE SEQUENCED ?       A45135
         BNO   *+8            NO, SET SPECIF. VALUES             A45135
         LA    R5,72               LOAD DATA FIELD LENGTH        A45135
         STH   R5,INSEG            INSERT SEGMENT LENGTH         A45135
         STH   R5,OUTSEG           SET OUTPUT SEGM. LENGTH       A45135
         LA    R5,1                LOAD ONE FOR MAXSEG           A45135
         STH   R5,MAXSEG           STORE ONE IN MAXSEG           A45135
INSEGTST TM    TOTCONV,1           CONVERSION OF DATA ?          A45135
         BZ   FINISH               NO, LEAVE THE INSEG VALUE     A45135
         LH    TEMP1,INSEG         LOAD CHAR. COUNT PER OUTP. GR A45135
         SRL   TEMP1,1             DIVIDE COUNT IN HALF          A45135
         STH   TEMP1,INSEG         STORE IT BACK                 A45135
         B     FINISH              END INITIAL. OF OUTPUT FORMAT A45135
PRINTBUF SR    R4,R4               ZERO REG 4 FOR DIV PURP.      A45135
         LH    R5,MAXOUT           LOAD MAXOUT PARAMETER         A45135
         CH    R5,=H'10'           LRECL-1 SMALLER TH TEN ?      A45135
         BH    TMAXSEG             NO, DETECT MAXSEG             A45135
         STH   R5,INSEG            SET INSEG AND                 A45135
         STH   R5,OUTSEG           OUTSET EQ TO MAXOUT           A45135
         LA    R5,1                SET NUMBER OF                 A45135
         STH   R5,MAXSEG           SEGMENTS TO ONE               A45135
         B     INSEGTST            SCAN FOR CONVERTING           A45135
TMAXSEG  LA    R6,10               CALCULATE THE                 A45135
         DR    R4,R6               NUMBER OF                     A45135
         STH   R5,MAXSEG           SEGMENTS                      A45135
         B     INSEGTST            TEST FOR CONVERTING           A45135
FINISH   LM    R4,R6,KEEPR4R6      LOAD REG 4 TO R6              A45135
FINISHUP CLC   INITSKIP(2),PHZERO                                A45135
         BE    PPOPEN10                YES -- BRANCH
         LH    TEMP1,INITSKIP          NO -- LOAD RECORD NUMBER TO SKIP
         BCTR  TEMP1,R0                REDUCE IT BY ONE
         STH   TEMP1,INITSKIP          STORE IT BACK
         OI    INSW,SKIP               SET SWITCH TO ONE
PPOPEN10 CLC   INITSTOP(2),PHZERO      DO ALL RECORDS GET PROCESSED
         BE    POSTOPEN                OPEN HAS BEEN DONE FOR   YA01459
*                                       SYSUT1 (FIRST TIME) AND YA01459
*                                       SYSUT2                  YA01459
         OI    INSW,STOP               NO -- SET SWITCH TO TWO
         B     POSTOPEN                OPEN HAS BEEN DONE FOR   YA01459
*                                       SYSUT1 (FIRST TIME) AND YA01459
*                                       SYSUT2                  YA01459
WHATTYPE TM    TYPORG,3                WHAT TYPE DATA SET IS THE INPUT
         BZ    PREOPEN                 BITS OF = SEQ.              VS0H
         MVI   SDSEOD+1,X'00'      MARK INPUT NOT EMPTY          A41759
         BO    PREOP1                  ONLY PROCESS SOME MEMBERS OF PDS
         OI    POSTOPEN+1,X'F0'        TOTAL PDS, READ DIRECTORY FIRST
*                                      SET UNCONDITIONAL BRANCH ALSO
         B     PREOPEN                                             VS0H
PREOP1   LA    DCBREG,INSET            LOAD ADDRESS OF INPUT DCB
         MVI   DSORG(DCBREG),X'02'     MOVE PDS ORGANIZATION TO DCB
*          O P E N    I N P U T    D C B    T W I C E
*             F I R S T    R E A D    D I R E C T O R Y
*                T H E N    R E A D    M E M B E R S
PREOPEN  LA    DCBREG,INSET                                        VS0H
         MVC   BSAMACRF(2,DCBREG),BSAMSPEC                         VS0H
         TM    TYPORG,3
         BNZ   PSETOPSW
         MVI   BSAMACRF(DCBREG),X'20'
PSETOPSW OI    OPENSW,X'10'            SET SW TO INDICATE VOL 1    UL0H
PPOPENIN OPEN  (INSET,INPUT)
* IF QSAM PROCESSING MUST BE USED, CLOSE DATA SET AND          @YM04138
* RE-OPEN IT                                                   @YM04138
         TM    AMSW,QSAM         QSAM PROCESSING NEEDED        @YM04138
         BZ    BSMOK             NO - BSAM OK                  @YM04138
         CLOSE (INSET)           CLOSE INPUT D/S               @YM04138
         MVC   BSAMACRF(2,DCBREG),QSAMSPEC CHANGE MACRF FROM   @YM04138
*                                BSAM TO QSAM                  @YM04138
         OPEN  (INSET,INPUT)     RE-OPEN FOR QSAM PROCESSING   @YM04138
BSMOK    EQU   *                                               @YM04138
*
***********************************************************************
* CHECK TO SEE IF SYSUT1 DCB HAS BEEN OPENED. IF NOT PRINT AN ERROR   *
* MESSAGE STATING THAT SYSUT1 OR A CORRESPONDING DDNAME COULD NOT BE  *
* OPENED. A RETURN CODE OF 12 IS GIVEN. THE SAME PROCEDURE IS FOLLOWED*
* WHEN SYSUT2 COULD NOT BE OPENED.                                    *
***********************************************************************
*
         LA    TEMP1,INSET             GET ADR OF SYSUT1 DCB - INPUT
         TM    OFLGS(TEMP1),X'10'      HAS IT BEEN OPENED
         BZ    DDERROR                 NO, PRINT AN ERROR MESSAGE
         TM    ERRDCB,X'80'      OPEN ERROR  ?                   A45135
         BO    DCBERROR          YES, PRINT MESS. AND TERM. EXEC.A45135
TESTRC   CLI   MSGWS,00                SEE IF  ANY MSG FROM OPEN   VS0H
         BNE   OPENMSG                                             VS0H
TESTOPEN TM    OUTSET+OFLGS,X'10'     IS OUTPUT (SYSUT2) OPEN? @ZA03383
         BZ    PPOPEN                  NO, OPEN IT              YA01459
*
*****************************************************************  UL0H
*   SEE IF CONDITIONS HAVE BEEN ESTABLISHED TO PRINT INPUT HDR  *  UL0H
*   LABELS. GO TO COMMON RTNE FOR HDR & TRLR LABEL PRINTING     *  UL0H
*****************************************************************  UL0H
         EJECT
POSTOPEN NOP   TOTAL                   SWITCH TO READ DIRECTORY AND
*                                      SORT ENTRIES (BRANCH TAKEN) OR
*                                      READ MEMBERS (FALL THROUGH)
POSTMSG  LA    TEMP1,INSET             GET ADDR. OF INPUT DCB      VS0H
         TM    QSBRNOP+1,X'F0'                                     VS0H
         BO    QSSWSET                 CONT VBS PROCESS.         A45135
REALLYOP BAL   R8,LBLPRNT                                          UL0H
         NI    OPENSW,X'00'            SET VOL1 SWITCH OFF         UL0H
         CLI   PROCKY,X'10'                                        UL0H
         BE    ONLYIHL                 'ONLY' SPECIFIED,GO TO EOJ  UL0H
         TM    DEVT(TEMP1),X'20'                                   UL0H
         BO    PPSDS                   YES -- BRANCH
         MVC   KEYLEN(2),PHZERO        SET KEYLEN TO ZERO FOR TAPE
PPSDS    LH    R0,BLKLEN               LOAD INPUT DATA SET BLOCK LENGTH
         AH    R0,KEYLEN               ADD KEY LENGTH TO BLOCK LENGTH
         ST    R0,LENGTHSV             SAVE INPUT RECORD LENGTH
*          G E T    I N P U T    B U F F E R
         GETMAIN R,LV=(0)              GET CORE FOR THAT SIZE RECORD
         ST    R1,INBUFF               SAVE INPUT BUFFER ADDRESS
         ST    R1,LENGTHAD             SAVE INPUT BUFFER ADDRESS
GOTMAIN  EQU   *                                               @ZA03373
         TM    TYPORG,1           IS INPUT A PDS?              @ZA07374
         BO    NOTSTPRE           YES,DON'T TEST PREFORMATTED  @ZA07374
         TM    PREFORMT,X'81'     IS IT PREFORMATTED INPUT?    @ZA07374
         BM    RDCH               YES,GO AND READ A RECORD     @ZA07374
NOTSTPRE TM    TYPORG,3           TEST FOR SELECTED MEMBERS    @ZA07374
         BO    PDPART                  YES --- BRANCH
         L     MCBR,MNTADD             LOAD MEMBER NAME TABLE ADDRESS
         LTR   MCBR,MCBR               TEST FOR AN ADDRESS TO MNT
         BZ    NOPTR                   ZERO -- BRANCH -- NO ADDRESS
         L     MCBR,12(MCBR)           GET MCBADD FROM MNT - PTR TO GCB
         ST    MCBR,MCBRWS                                         VS0H
NOPTR    TM    TYPORG,1                IS THIS A TOTAL PDS OPERATION
         BZ    PPSDSH                  NO --- BRANCH
         L     LISTR,DIRADD            YES -- GET ADR OF MEMBER NAMES
PDT1     LA    TEMP1,1                 TO ACCOUNT FOR TRUE NAME
         CH    TEMP1,MEMBCT            EXCEEDED TOTAL - CK MEMBER COUNT
         BE    PDT3                    YES -- BRANCH
         LR    TEMP2,LISTR             MOVE POINTER TO MEMBER ADDRESSES
PDT2     AH    TEMP2,LISTLEN           BUMP PTR TO NEXT MEMBER
         TM    11(TEMP2),X'80'         IS THIS AN ALIAS
         BZ    PDT3                    NO -- BRANCH
         CLC   8(3,LISTR),8(TEMP2)     IS THIS ALIAS FOR THIS MEMBER
         BNE   PDT3                    NO IT IS NOT - BRANCH
         AH    TEMP1,PH1               INCREMENT MEMBER NAME COUNT BY 1
         CH    TEMP1,MEMBCT            HAS TOTAL BEEN EXCEEDED
         BNE   PDT2                    NO -- LOOP
PDT3     BCTR  TEMP1,R0                REDUCE TRUE MEMBER NAME COUNT
         STH   TEMP1,ALIASCT           STORE ALIAS NAME COUNT FOR MEMBR
         LH    TEMP2,MEMBCT            SUBTRACT ALIASES FROM TOTAL CT
         SR    TEMP2,TEMP1
         STH   TEMP2,MEMBCT            UPDATE MEMBER NAME COUNT
         B     MEMBLOC                 LOCATE MEMBER
PDPART   L     LISTR,MNTADD            LOAD MEMBER NAME TABLE ADDRESS
         L     LISTCT,0(LISTR)         LOAD MEMBER COUNT
         STH   LISTCT,MEMBCT           STORE MEMBER NAME COUNT
         LA    LISTR,4(LISTR)          POINT TO NAMED MEMBER
         ST    LISTR,DIRADD            STORE LOCATION OF TABLE
PDP1     L     MCBR,8(LISTR)           LOAD POINTER TO GCB
         ST    MCBR,MCBRWS                                         VS0H
*
***********************************************************************
* BLDL WITH A MEMBER NAME TO SEE IF THIS MEMBER EXISTS IN THE PDS.    *
* PRECEDING THE MEMBER NAME IS ONE FULL WORD OF BLDL INFORMATION CON -*
* SISTING OF A HALF WORD FOR THE NUMBER OF ENTRIES IN THE BLDL LIST   *
* AND THE SECOND HALF WORD IS THE LENGTH OF THE ENTRY. THE MAXIMUM    *
* LENGTH FOR A DIRECTORY ENTRY IS 74 BYTES. IF ENTRIES ARE SHORTER    *
* ONLY THE ACTUAL LENGTH IS RETUREND. THE MAIN ITEM RETURNED IS THE   *
* TTR FOR THE MEMBER WHICH IS TAKEN FROM THE DIRECTORY AND USED IN    *
* THE 'FIND' MACRO.                                                   *
***********************************************************************
*
MEMBLOC  LA    R1,BLDLADD              GET ADDRESS OF BLDL LIST
         MVC   4(8,R1),0(LISTR)        MOVE MEMBER NAME TO BLDL LIST
         BLDL  INSET,BLDLADD           IS MEMBER NAME IN DIRECTORY
         CH    R15,PH4                 CHECK RETURN CODE AGAINST A 4
         BL    FINDMEM                 CODE 0 -- BRANCH -- FOUND MEMBER
         BE    MEMBNO                  CODE 4 -- BRANCH -- NOT FOUND
         B     IOERRIN                 CODE 8 -- BRANCH -- I/O ERROR
*
QSSWSET  MVC   QSSW+1(1),=X'F0'                                    VS0H
         CLI   PROCKY,X'10'                                        UL0H
         BE    REALLYOP                'ONLY' WAS SPECIFIED        UL0H
         BAL   R8,LBLPRNT                                          UL0H
         NI    OPENSW,X'00'            SET VOL1 SWITCH OFF         UL0H
         LH    R0,LRECL                                            VS0H
         ST    R0,LENGTHSV                                         VS0H
         AH    R0,KEYLEN                                           VS0H
         GETMAIN R,LV=(0)                                          VS0H
         ST    R1,INBUFF                                           VS0H
         ST    R1,LENGTHAD                                         VS0H
         B     GOTMAIN                                             VS0H
***********************************************************************
* THE FIND MACRO USES THE TTR GIVEN BY BLDL, THIS POINTS TO THE FIRST *
* RECORD OF THE MEMBER. THE ABSOLUTE DISK ADDRESS OF THE MEMBER IS    *
* PLACED IN THE SYSUT1 DCB AS A RESULT OF THE FIND MACRO.             *
***********************************************************************
*
FINDMEM  FIND  INSET,BLDTTR,C     CALCULATE TTR OF THE MEMBER    A36098
PPSDSH   BAL   BREG,PPHEAD                                         VS0H
         L     MCBR,MCBRWS                                         VS0H
         EJECT
*
***********************************************************************
* THIS ROUTINE DETERMINES IF EDITING OR SKIPPING IS TO TAKE PLACE     *
* AND INITIALIZES ACCORDINGLY.                                        *
***********************************************************************
*
         LTR   MCBR,MCBR               IS THERE A MEMBER NAME TABLE
         BC    13,NOMCB                NO - BRANCH
         LH    TEMP1,0(MCBR)
         LTR   TEMP1,TEMP1             ARE THERE USER DEFINED RECD GRPS
         BP    PPSDS2                  YES, POINT TO RECD GROUP DESCRIP
NOMCB    LA    TEMP1,1                 NO, SET SWITCHES FOR STAND. OUT.
         STH   TEMP1,GRCT              STORE RECORD GROUP COUNT
PPSI     MVI   IDSW,0                  SET INPUT GROUP SWITCH TO ZERO
PPSF     MVI   FORMATSW,0              SET OUTPUT FORMAT SWITCH TO ZERO
*                                      FOR STANDARD FORMAT OUTPUT
         B     PPSDS4
PPSDS2   STH   TEMP1,GRCT              STORE RECORD GROUP COUNT
         LR    GCBR,MCBR               MOVE PTR TO MEMBER NAME TABLE
         AH    GCBR,PH2                POINT TO FIRST GROUP
         BAL   BREG,SETGCBSW           SET RECORD GROUP SWITCHES
PPSDS4   XC    CURSKIP(2),CURSKIP      CLEAR WORK AREAS
         XC    CURSTOP(2),CURSTOP
         LH    TEMP1,STRTAFT      WAS STRTAFT NBR                A45135
         LTR   TEMP1,TEMP1        SPECIFIED?                     A45135
         BZ    RDCH               NO,READ A PHYS. RECORD         A45135
         XC    CURSTRT(2),CURSTRT YES, CLEAR WORKAREA            A45135
         OI    INSW,X'04'         SET STRT NBR SWITCH            A45135
         B     RDCH                    READ A PHYSICAL RECORD
*
*          SET RECORD GROUP SWITCHES
*
SETGCBSW LA    TEMP2,1                 LOAD A 'ONE' BIT
         LH    TEMP1,0(GCBR)           LOAD PTR TO RECORD GROUP
         LTR   TEMP1,TEMP1             ARE THERE USER DEFINED FIELDS
         BP    SETG1                   YES - BRANCH - FORMAT SW IS 1
         SR    TEMP2,TEMP2             NO - CLEAR REG - FORMAT SW IS 0
SETG1    EX    TEMP2,PPSF              SET OUTPUT FORMAT SWITCH
         LA    TEMP2,1                 RELOAD A 'ONE' BIT
         LH    TEMP1,2(GCBR)           LOAD GROUP IDENTIFIER
         LTR   TEMP1,TEMP1             IS THERE A GROUP IDENTIFIER
         BP    SETG2                   YES - BRANCH - ID SW WILL BE 1
         SR    TEMP2,TEMP2             NO CLEAR REG - ID SW WILL BE 0
SETG2    EX    TEMP2,PPSI              SET ID SWITCH
         BR    BREG                    RETURN TO MAIN LINE OF CODE
         EJECT
*
*          FORMAT OF MEMBER NAME TABLE
*
*        *4 BYTES *8 BYTES         *4 BYTES
*        ************************************    MEMBERCT EQUALS
*        *MEMBERCT*MEMBER NAME     *GCB ADDR*    12 X NO. OF ENTRIES
*        ************************************
*                 *MEMBER NAME     *GCB ADDR*
*                 ***************************
*                 *MEMBER NAME     *GCB ADDR*
*                 ***************************
*                 *ETC.                     *
*                 ***************************
*
*
*        FORMAT OF GETMAIN AREA FOR GROUP CONTROL BLOCKS (GCB)     1591
*        AND FIELD CONTROL BLOCKS (FCB)                            1591
*                                                                  1591
*                                                                  1591
* 2 BYTES- NUMBER OF GCB'S FOLLOWING                               1591
*                                                                  1591
*                                                                  1591
* 8 BYTES- FIRST GCB                                               1591
*          2 BYTES- NUMBER OF FCB'S FOR THIS GCB                   1591
*          2 BYTES- LENGTH OF CURRENT IDENT LITERAL                1591
*          2 BYTES- DISPLACEMENT OF CURRENT IDENT IN LITERAL POOL  1591
*          2 BYTES- INPUT LOCATION MINUS 1 OF CURRENT IDENT        1591
*                                                                  1591
* 8 BYTES- FIRST FCB FOR FIRST GCB                                 1591
*          2 BYTES- LENGTH OF FIELD                                1591
*          2 BYTES- INPUT LOCATION MINUS 1                         1591
*          2 BYTES- CONVERSION CODE                                1591
*          2 BYTES- OUTPUT LOCATION MINUS 1                        1591
*                                                                  1591
* 8 BYTES- SECOND FCB FOR FIRST GCB                                1591
*    *                                                             1591
*    *                                                             1591
*    *                                                             1591
* 8 BYTES- N'TH FCB FOR FIRST GCB                                  1591
*                                                                  1591
*                                                                  1591
* 8 BYTES- SECOND GCB                                              1591
*                                                                  1591
* 8 BYTES- FIRST FCB FOR SECOND GCB                                1591
*    *                                                             1591
*    *                                                             1591
*    *                                                             1591
* 8 BYTES- N'TH FCB FOR SECOND GCB                                 1591
*                                                                  1591
*                                                                  1591
*  *                                                               1591
*  *                                                               1591
*  *                                                               1591
*                                                                  1591
*                                                                  1591
* 8 BYTES- N'TH GCB                                                1591
*    *                                                             1591
*    *                                                             1591
*    *                                                             1591
*                                                                  1591
*
**N O T E -- IF THERE ARE NO MEMBERS IN THE MEMBER NAME TABLE THE
**           MEMBER COUNT AND THE MCBADDR(GCB POINTER) ARE ZERO AND THE
**           MEMBER NAME SECTION CONTAINS BLANKS. IN THIS CASE THE
**           TABLE LENGTH IS SIXTEEN BYTES.
*
         EJECT
*
***********************************************************************
* READ ONE PHYSICAL RECORD - MEMBER IF THE INPUT IS A PDS. IF A NOTE  *
* LIST IS PRESENT, AND NOTE LISTS ARE TO BE OMITTED, ANOTHER PHYSICAL *
* RECORD IS READ. A NOTE LIST IS PRESENT ONLY IN A PDS AND IT REFERS  *
* TO THE N BYTE OF THE TTRN'S IN THE USERS DATA FIELD. A NOTE LIST    *
* CONSISTS OF ADDITIONAL POINTERS TO BLOCKS WITHIN THE SAME MEMBER.   *
***********************************************************************
*
RDCH     L     R3,INBUFF               LOAD ADDRESS OF INPUT BUFFER
         TM    QSSW+1,X'F0'                                        VS0H
         BO    QSGETREC                PERFORM QSAM GET            VS0H
         READ  DECBI,SF,INSET,(R3),'S' READ THE MEMBER
         CHECK DECBI                   CHECK THE READ
         MVI   SDSEOD+1,X'00'  MARK INPUT NOT EMPTY              A36088
         TM    RECFM,X'C0'        RECFM UNDEFINED ?              A45135
         BNO   TESTFORM           NO, TEST OUTPUT FORMAT         A45135
         L     TEMP1,DECBI+16     LOCFIRST LOG. RECD             A45135
         LH    TEMP2,14(TEMP1)    FROM DECB                      A45135
         LH    RLEN,BLKLEN        LOAD INPUT BLOCK LENGTH        A45135
         SR    RLEN,TEMP2         SUBTRACT RESIDUAL COUNT        A45135
         CH    RLEN,PHZERO        LENGTH READ OF ZERO ?          A45135
         BE    RDCH               YES, READ NEXT RECORD          A45135
TESTFORM TM    PREFORMT,X'81'     IS THIS PREFORMATTED INPUT?    A45135
         BM    PREFORM                 YES - BRANCH
LOCREC   B     RECDLOC1                                            VS0H
QSGETREC GET   INSET,(R3)                                          VS0H
         MVI   SDSEOD+1,X'00'  MARK INPUT NOT EMPTY              A36088
GOTQSREC LR    RLOC,R1                                             VS0H
         LH    RLEN,0(RLOC)                                        VS0H
         TM    PREFORMT,X'81'                                      VS0H
         BM    QSPREFM                                             VS0H
         B     RECDLOC2                                            VS0H
         EJECT
*
***********************************************************************
* THIS ROUTINE DETERMINES WHAT TYPE RECORDS THE INPUT DATA SET HAS -- *
* VARIABLE, VARIABLE BLOCKED, UNDEFINED AND FIXED UNBLOCKED ARE ALL   *
* HANDLED BY THIS ROUTINE. HERE DEBLOCKING IS ALSO PERFORMED AND THE  *
* USER INPUT RECORD PROCESSING ROUTINE IS ENTERED.                    *
***********************************************************************
*
RECDLOC1 CLI   RECFM,X'40'        VARIABLE RECORDS?            @ZA07390
         BE    VARREC             YES,GO TO USE BDW            @ZA07390
         L     TEMP1,DECBI+16     LOC FIRST LOG. REC FROM DECB @ZA06548
         LH    TEMP2,14(TEMP1)
         LH    RLEN,BLKLEN             LOAD INPUT BLOCK LENGTH
         SR    RLEN,TEMP2              SUBTRACT RESIDUAL COUNT
         L     RLOC,INBUFF             LOAD ADDRESS OF INPUT BUFFER
         AH    RLOC,KEYLEN             ADD IN RECORD KEY LENGTH
         TM    RECFM,X'C0'             UNDEFINED TYPE RECORDS
         BO    RECPROC                 YES -- BRANCH
         TM    RECFM,X'40'             VARIABLE BLOCKED-UNBLOCKED
         BO    BLKEDV                  YES -- BRANCH
         TM    RECFM,X'10'             FIXED BLOCKED
         BO    BLKEDF                  YES -- BRANCH
         B     RECPROC                 NO - BRANCH - FIXED UNBLOCKED
VARREC   L     RLOC,INBUFF        LOAD ADDRESS IF INPUT BUFFER @ZA06548
         AH    RLOC,KEYLEN        ADD KEYLENGTH                @ZA06548
         LH    RLEN,0(RLOC)       LOAD LENGTH FROM BDW         @ZA06548
BLKEDV   AH    RLOC,PH4                ADD 4 TO ADR OF INPUT BUFFER
         SH    RLEN,PH4                SUBTRACT 4 FROM ADJUSTED BLK LEN
BV1      SH    RLEN,PH4                DO IT AGAIN
         STH   RLEN,PLEN               STORE REMAINING BYES OF BLKD REC
         MVC   TEMPHW1,0(RLOC)         GET LENGTH OF LOGICAL RECORD
         LH    RLEN,TEMPHW1            LOAD LENGTH OF LOGICAL RECORD
RECDLOC2 CH    RLEN,LRECL              IS IT  > RECORD LENGTH      VS0H
         BH    IOERRIN                 YES - PERMANENT I/O ERROR
         CH    RLEN,PH4                IS IT AT LEAST FIVE BYTES LONG
         BNH   IOERRIN                 NO IT ISN'T - I/O ERROR
         SH    RLEN,PH4                SUBTRACT 4 FROM LOGICAL RECD LEN
         AH    RLOC,PH4                BUMP PTR TO INPUT BUFFER
         B     RECPROC
BLKEDF   STH   RLEN,PLEN               SAVE REMAINING BYTES OF BLKD REC
BF1      LH    RLEN,LRECL              LOAD LOGICAL RECORD LENGTH
         CH    RLEN,PLEN               COMPARE IT TO REMAINING BYTES
         BNH   RECPROC                 IF NOT HIGHER BRANCH
         LH    RLEN,PLEN               HIGHER -- LOAD REMAINING BYTES
         EJECT
*
***********************************************************************
* CHECK AN IDENTITY WITH EVERY INPUT RECORD UNTIL THE CONDITION IS MET*
* ONCE IT IS MET WE HAVE A RECORD GROUP. PROCESSING OF THE INPUT DATA *
* SET MAY STOP AT THIS POINT IF THIS WAS THE LAST RECORD STATEMENT OR *
* WILL CONTINUE IF MORE RECORD STATEMENTS ARE PRESENT. THE RECORD     *
* STATEMENT IS A CONTROL CARD TO THE UTILITY PROGRAM.                 *
***********************************************************************
*
RECPROC  STH   RLEN,RECDLEN            STORE LENGTH OF CURRENT LOG. REC
         ST    RLOC,RECDLOC            STORE PTR  TO CURRENT LOGIC. REC
         TM    INSW,X'04'         STRTNBR SWITCH ON?             A45135
         BZ    NOSWON             NO                             A45135
         LH    TEMP1,CURSTRT      YES, CALCULATE RECORDS         A45135
         AH    TEMP1,PH1          ALREADY GET OR READ            A45135
         STH   TEMP1,CURSTRT      STORE UPDATED NBR.             A45135
         CH    TEMP1,STRTAFT      NBR OF REC TO BE SKIP. ALR HAD A45135
         BNE   RECRET             NO, SKIP THIS RECORD           A45135
         NI    INSW,X'FB'         YES, SET STRTNBR SWITCH OFF    A45135
         B     RECRET             SKIP THIS RECORD               A45135
NOSWON   EQU   *                  CONTINUE                       A45135
         MVI   RCP2+1,0                SET BRANCH TO A NOP
         CLI   INREC,C' '              TEST FOR USER EXIT FOR LOGICAL
*                                      RECORD PROCESSING ON INPUT
         BE    RECPROC1                NONE --- BYPASS LINK
*          G O    T O    U S E R    E X I T
*             B E F O R E    P R O C E S S I N G    R E C O R D
         LINK  EPLOC=INREC,PARAM=((RLOC),(RLEN))
         SR    R0,R0              CLEAR REGISTER ZERO              2044
         IC    R0,PPRETCDE             LOAD RETURN CODE
         CR    R15,R0                  COMPARE AGAINST USER RETURN CODE
         BL    RECPROC1                IF LOWER - BRANCH - CONTINUE PGM
         SRL   R15,2                   CLEAR TWO LOW ORDER BITS
         SLL   R15,2
         STC   R15,PPRETCDE            STORE USERS RETURN CODE
         LA    R0,12                   LOAD UTILITY RETURN CODE
         CR    R15,R0                  DOES USER REQUEST TERMINATION
         BL    RECPROC1                NO CONTINUE PGM
         B     EXTERM1                 BRANCH TO MESSAGE WRITER - TERM.
RECPROC1 TM    IDSW,1                  IS AN ID TEST NECESSARY
         BZ    SKIPT                   NO - BYPASS ID TEST ROUTINE
         LA    TEMP1,INSET             GET ADDRESS OF INPUT DCB
         LH    TEMP2,GCBIDLOC(GCBR)    GET RELATIVE INPUT LOCAT. OF LIT
         AH    TEMP2,GCBIDLEN(GCBR)    ADD ID LENGTH TO IT       A44337
         CH    TEMP2,LRECL        DOES IDENT EXC. INIT. LRECL ? OY01171
         BH    PRERROR                 IF IT IS LARGER - ERROR - A44337
         CH    TEMP2,RECDLEN      DOES IDENT EXC. ACT. LRECL ?  OY01171
         BH    SKIPT              YES, SKIP IDENT TEST          OY01171
         AH    RLOC,GCBIDLOC(GCBR)     OK - ADD IT TO CURRENT RECD PTR
         L     RLIT,LITADD             LOAD ADDRESS OF LITERAL POOL
         AH    RLIT,GCBIDLIT(GCBR)
         LH    TEMP1,GCBIDLEN(GCBR)    LOAD LENGTH OF ID
IDT1     CH    TEMP1,PH256             DOES ID EXCEED 256 BYTES
         BNH   IDT2                    NO - BRANCH
         CLC   0(256,RLOC),0(RLIT)     YES - COMPARE FIRST 256 BYTES
         BNE   IDT4                    NOT EQUAL - BRANCH
         SH    TEMP1,PH256             EQUAL - CONTINUE
         LA    RLOC,256(RLOC)          ADD 256 TO CURRENT LOGIC REC PTR
         LA    RLIT,256(RLIT)          ADD 256 TO LITERAL POOL POINTER
         B     IDT1                    LOOP UNTIL COMPLETE
IDT2     BCTR  TEMP1,R0                PREPARE TO EXECUTE COMPARE
         EX    TEMP1,IDTCOMP           COMPARE ID'S
IDT4     BNE  SKIPT                                                2885
         MVI   IDSW,X'03'         ID'S  ARE EQUAL                  2885
         EJECT
*
***********************************************************************
* IF A SKIP PARAMETER HAS BEEN SPECIFIED BY THE USER EVERY N'TH       *
* LOGICAL RECORD WILL BE PROCESSED. ALSO TEST FOR END OF PAGE AND     *
* DETERMINE THE OUTPUT FORMAT.                                        *
***********************************************************************
*
SKIPT    TM    INSW,1                  TEST SKIP SWITCH
         BZ    SKIPNO                  OFF - BRANCH TO END PAGE TEST
         LH    SKIPR,CURSKIP           LOAD SKIP COUNTER
         CH    SKIPR,INITSKIP          CHECK AGAINST RECD NO. TO PROCES
         BE    NOSKIP                  EQUAL - DON'T SKIP RECORD
         AH    SKIPR,PH1               NOT EQUAL - INCREMENT SKIP CTR
         STH   SKIPR,CURSKIP           STORE SKIP COUNTER
         B     NEXT1                   BRANCH TO GET NEXT RECORD
NOSKIP   SR    SKIPR,SKIPR             CLEAR WORK REGISTER
         STH   SKIPR,CURSKIP           CLEAR RECORD SKIP COUNTER
SKIPNO   TM    PPSW1,1                 IS OUTPUT PRINTED OR PUNCHED
         BO    PUNREC                  NO - PUNCH - BYPASS LINE TEST
*          E N D    O F    P A G E    T E S T
         LH    TEMP1,LINECT            LOAD LINE CTR FOR END PAGE TEST
         CH    TEMP1,PMAXLINE          CHECK AGAINST USER OR ASSUMED
*                                      LINE PER PAGE MAXIMUM COUNT
         BL    PUNREC                  LOW - NOT END - BRANCH
         BAL   HDRET,PPHEAD            END - PUT HEADING ON PAGE
PUNREC   BAL   BREG,BLANKOUT           CLEAR OUTPUT AREA
*          D E T E R M I N E    O U T P U T    F O R M A T
RCP2     NOP   FS15                    SWITCH TO CONT WITH CURRENT RECD
         LH    RLEN,RECDLEN            LOAD CURRENT LOGICAL RECD LENGTH
         L     RLOC,RECDLOC            LOAD PTR TO CURRENT LOGICAL RECD
         TM    FORMATSW,1              IS OUTPUT TO BE USER FORMATTED
         BO    FORMU                   YES - BRANCH TO USE USERS SPECS
         EJECT
*
***********************************************************************
* THIS ROUTINE FORMATS THE OUTPUT IN THE STANDARD FORMAT, WHICH MEANS *
* 12 EIGHT CHARACTER GROUPS PER LINE WITH EACH GROUP SEPARATED BY TWO *
* BLANKS. THIS WILL PRINT OUT 96 CHARACTERS AND 24 BLANKS, PRINTING   *
* 120 CHARACTERS. IF THE CHARACTERS ARE TO BE CONVERTED TO HEX RE-    *
* PRESENTATIONS OR TO THE UNPACKED FORM THE OUTPUT NOW BECOMES DOUBLE *
* THE SIZE AND IT TAKES TWO CHARACTERS TO PRINT ONE CORE CHARACTER.   *
* THE FORMAT OF 12 EIGHT BYTE GROUPS STILL HOLDS TRUE BUT NOW ONLY 48 *
* CHARACTERS AND 24 BLANKS MAKE UP A LINE. THERE IS ALSO AN EXIT TO   *
* A USER ROUTINE TO PROCESS THE RECORDS BEFORE THEY ARE OUTPUTED.     *
***********************************************************************
*
FORMS    LH    FLDCT,MAXSEG            LOAD NUMBER OF GROUPS PER LINE
         LH    INLEN,INSEG             LOAD NUMBER CHARACTERS PER GROUP
         LA    ROUT,OUTBUFF1           LOAD ADDRESS OF OUTPUT BUFFER
FS1      CR    INLEN,RLEN              COMPARE CHARACTERS PER GROUP TO
*                                      ACTUAL RECORD LENGTH
         BNH   FS2                     IF NOT HIGHER BRANCH
         OI    LASTSW,X'01'            SET LAST GROUP SWITCH
         LR    INLEN,RLEN              MOVE ACTUAL RECORD LENGTH
FS2      CR    INLEN,RLEN              IS IT EQUAL TO CHARACTERS/GROUP
         BNE   BYPASSSW                NO - BRANCH
         OI    LASTSW,X'01'            SET LAST GROUP SWITCH
BYPASSSW SR    RLEN,INLEN              GET NUMBER BYTES LEFT TO OUTPUT
         TM    TOTCONV,1               DATA CONVERSION TO BE DONE
         BO    FS4                     YES - BRANCH
         BCTR  INLEN,R0                NO - REDUCE COUNT FOR EXECUTE
         EX    INLEN,FMOVE             MOVE DATA TO OUTPUT BUFFER
         AH    INLEN,PH1               RESTORE CHARACTER COUNT
         B     FS10                    BYPASS DATA CONVERSION BRANCH
FS4      BAL   BREG,FLDCONV            MOVE AND CONVERT ONE SEGMENT
FS10     LTR   RLEN,RLEN               END OF INPUT RECORD TEST
         BZ    EORTEST                 END - BRANCH
         AR    RLOC,INLEN              NO - BUMP PTR TO RECORD
         BCT   FLDCT,FS12              TEST FOR END OF OUTPUT RECORD
         OI    RCP2+1,X'F0'            END, SET SWITCH TO CONTINUE WITH
*                                      THIS INPUT RECORD
         STH   RLEN,FSLEN              STORE BYTES LEFT IN INPUT RECORD
         ST    RLOC,FSLOC              STORE PTR TO RECORD
         B     UFEND                   TEST FOR USER EXIT ON OUTPUT
FS12     AH    ROUT,OUTSEG             BUMP PTR TO OUTPUT BUFFER
         B     FS1                     CONTINUE OUTPUTING
EORTEST  TM    PPSW1,1                 TEST FOR PUNCH OPERATION
         BO    UFEND                   IF YES TEST FOR USER EXIT
         TM    TOTCONV,1               DATA CONVERSION NECESSARY
         BZ    NOCONV                  NO - BRANCH
         AR    INLEN,INLEN             YES - DOUBLE RECORD LENGTH
NOCONV   AR    ROUT,INLEN              ADD RECD LENGTH TO OUTPUT BUF AD
         MVI   0(ROUT),EOB             MOVE ASTERISK TO OUTPUT AREA
         TM    RECFM,X'10'             IS INPUT BLOCKED
         BZ    UFEND                   NO - TEST FOR USER EXIT
         CLC   RECDLEN(2),PLEN         YES, IS THIS END OF BLOCK
         BNE   UFEND                   TEST FOR USER EXIT
         MVI   1(ROUT),EOB             MOVE ASTERISK TO OUTPUT BUFFER
RECWRITE B     UFEND                   TEST FOR USER EXIT
         LTR   RLEN,RLEN               END OF INPUT RECORD TEST
         BZ    NEXT                    YES - GET NEXT LOGICAL RECORD
         B     SKIPNO                  NO - CONTINUE WITH CURRENT RECD
FS15     LH    RLEN,FSLEN              LOAD REMAINING BYTES OF IN. RECD
         L     RLOC,FSLOC              LOAD PTR TO INPUT AREA
         MVI   RCP2+1,0                TURN OFF RECD CONTINUATION SWITH
         B     FORMS
         EJECT
*
***********************************************************************
* THIS ROUTINE COMPUTES THE TOTALS OF THE LENGTH FIELDS IN THE RECORD *
* CARDS. IF THE FIELD IS TO BE CONVERTED THE LENGTH IS DOUBLED. IF THE*
* TOTAL OF ALL THESE LENGTHS ADD UP TO MORE THAN 120, THE REQUEST IS  *
* TERMINATED, AN ERROR MESSAGE IS PRINTED AND A RETURN CODE OF 12 IS  *
* RETURNED.                                                           *
***********************************************************************
*
COMPUTEL LR    R0,FLDCT                LOAD NUMBER OF FIELDS     A34102
         LH    INLEN,0(FCBR)           GET LENGTH OF USER FORMAT FIELD
         TM    4(FCBR),1               IS DATA TO BE CONVERTED
         BO    DOUBLEL                 YES IT IS
TRUEL    AH    INLEN,RECOUNT           INCREMENT USER FORMAT LENGTH
         STH   INLEN,RECOUNT           STORE LENGTH
         BCT   R0,INCREL               NSI IF ALL FLDS PROCESSED A34102
         ST    R14,TEMPSAVE            SAVE BRANCH ADDRESS         9305
         LH    TEMP1,MAXOUT            GET MAX CHAR PER LINE       9305
         CH    TEMP1,RECOUNT           DOES IT EXCEED TOTAL FIELDS?9305
         BL    PRERROR                 IF NOT = OR > THEN ERROR    9305
         L     R14,TEMPSAVE            RESTORE BRANCH REGISTER     9305
         LA    FCBR,GCBL(GCBR)         NO, RESET STARTING POINT
         MVC   RECOUNT(2),PHZERO       RESET COUNTER TO ZERO
         BR    R14                     RETURN TO FORMU ROUTINE
         SPACE 2
INCREL   AH    FCBR,FCBLEN             GO TO NEXT FIELD PARAMETER
         B     COMPUTEL+2              LOOP TO PROCESS NEW FLD   A34102
DOUBLEL  AR    INLEN,INLEN             DOUBLE OUTPUT LENGTH FOR CONVER.
         TM    4(FCBR),3               IS IT PACKED TO UNPACKED
         BM    TRUEL                   NO - BRANCH
         BCTR  INLEN,R0                REDUCE DOUBLED LENGTH BY ONE
         B     TRUEL
         EJECT
*
***********************************************************************
* THIS IS THE USER FORMATTED OUTPUT ROUTINE. THE OUTPUT IS DETERMINED *
* BY THE FIELD PARAMETERS OF THE RECORD STATEMENTS. THERE MAY BE MORE *
* THAN ONE FIELD PARAMETER PER RECORD STATEMENT BUT ONLY ONE IDENT    *
* PARAMETER IS ALLOWED. THERE IS ALSO A USER EXIT TO FURTHER PROCESS  *
* THE RECORDS BEFORE THEY ARE OUTPUTED.                               *
***********************************************************************
*
FORMU    LH    FLDCT,0(GCBR)
         LA    FCBR,GCBL(GCBR)         POINT TO FIRST FIELD CONTROL BLK
         BAL   R14,COMPUTEL            COMPUTE USER FIELD LENGTHS
UF1      LA    TEMP1,INSET             GET ADDRESS OF INPUT DCB
         LH    INLEN,0(FCBR)           LENGTH OF FIELD TO BE EDITED
         AH    INLEN,2(FCBR)           ADD RELATIVE INPUT LOCATION
         CH    INLEN,LRECL          COMP INP WITH LRECL LEN      A44337
         BH    PRERROR                 IF IT IS LARGER - ERROR - A44337
         LH    INLEN,0(FCBR)           LOAD LENGTH OF FIELD TO BE EDIT.
         LTR   INLEN,INLEN             IS THERE A LENGTH
         BC    13,UF10                 BRANCH IF NO
         LH    RLOC,2(FCBR)            LOAD RELATIVE INPUT LOCATION
         LTR   RLOC,RLOC
         BM    UF10
         CH    RLOC,RECDLEN            COMPARE TO LENGTH OF CURRENT REC
         BNL   UF10          NO GO TO CHECK IF MORE FIELDS
         LR    TEMP1,INLEN             MOVE LENGTH OF FIELD
         AR    TEMP1,RLOC              ADD RELATIVE INPUT LOCATION
         CH    TEMP1,RECDLEN           COMPARE TO LENGTH OF CUR LOG REC
         BNH   UF3
         LH    INLEN,RECDLEN           HIGHER - LOAD LENGTH OF CURR LEN
         SR    INLEN,RLOC              TRUNCATE FIELD
UF3      LH    ROUT,6(FCBR)            REL. OUTPUT LOCATION
         LTR   ROUT,ROUT               TEST PTR TO OUTPUT BUFFER
         BL    UF10                     BRANCH ON MINUS
         CH    ROUT,MAXOUT             COMPARE TO MAXIMUM LINE COUNT
         BNL   UF10
         LR    TEMP1,ROUT              MOVE PTR TO OUTPUT BUFFER
         AR    TEMP1,INLEN
         CH    TEMP1,MAXOUT            COMPARE TO MAXIMUM LINE COUNT
         BL    UF4
         LH    INLEN,MAXOUT            LOAD MAXIMUM OUTPUT LENGTH
         SR    INLEN,ROUT              TRUNCATE FIELD
UF4      A     RLOC,RECDLOC
         A     ROUT,OUTBADD
         TM    4(FCBR),1               DATA CONVERSION
         BO    UF5                     BRANCH IF SWITCH ON
         BCTR  INLEN,R0                REDUCE COUNT FOR EXECUTE
         EX    INLEN,FMOVE             MOVE FIELD TO OUTPUT AREA
         B     UF10
UF5      OI    LASTSW,X'01'            SET LAST FIELD SWITCH
         BAL   BREG,FLDCONVU           USER FORMATTED DATA - BRANCH
UF10     BCT   FLDCT,UF12               ARE THERE ANY MORE FIELDS
         B     UFEND0                  NO - BRANCH
UF12     AH    FCBR,FCBLEN             YES - CONTINUE
         B     UF1
UFEND0   OI    RECWRT+1,X'F0'          SET NOP SWITCH
UFEND    CLI   OUTREC,C' '             TEST FOR USER EXIT FOR PROCESS-
*                                      ING OUTPUT RECORDS
         BE    RECWRT                  NONE --- BYPASS LINK
         ST    RLEN,HOLDRLEN           STORE CURRENT LOGICAL RECD LENG.
         LA    RLOC,OUTBUFF1           LOAD ADDRESS OF OUTPUT BUFFER
         LH    RLEN,MAXOUT        LOAD OUTPUT LRECL MINUS ONE   LETTER
*          G O    T O    U S E R    E X I T
*             B E F O R E    O U T P U T I N G    R E C O R D
         LINK  EPLOC=OUTREC,PARAM=((RLOC),(RLEN))
         L     RLEN,HOLDRLEN           RESTORE CURRENT LOGICAL REC LEN.
         LA    R0,4               SET REGISTER ZERO EQ 4         A48796
         CR    R15,R0             RETURN CODE 4                  A48796
         BE    NEXT               YES, SKIP THE RECORD           A48796
         LA    R0,12              SET REGISTER ZERO EQ 12        A48796
         CR    R15,R0             RETURN CODE 12 ?               A48796
         BE    EXTERM1            YES, TERMINATE PROCESSING      A48796
         LA    R0,16              SET REGISTER ZERO EQ 16        A48796
         CR    R15,R0             RETURN CODE 16 ?               A48796
         BE    EXTERM1            YES, TERMINATE PROCESSING      A48796
RECWRT   NOP   RECWRT1                 NOP SWITCH
         LA    BREG,RECWRITE+4
         B     WRCH                    BRANCH TO WRITE OUTPUT ROUTINE
RECWRT1  BAL   BREG,WRCH               BRANCH TO WRITE OUTPUT ROUTINE
*
*          GET NEXT LOGICAL RECORD
*
NEXT     TM    INSW,2                  WAS THERE A 'STOP' PARAMETER
         BZ    NEXT1                   NO - BRANCH
         LH    TEMP1,CURSTOP           YES, IS IT TIME TO STOP
         AH    TEMP1,PH1               ADD ONE TO STOP COUNTER
         CH    TEMP1,INITSTOP          DO WE STOP - CHECK USER PASSED
*                                      RECORD NUMBER
         BNL   EODSTOP                 NOT LOWER - STOP FOR MEMBER OR
         STH   TEMP1,CURSTOP           SDS - NO, CONTINUE - STORE CTR
NEXT1    TM    IDSW,2                  IS THIS THE END OF A RECORD GRP.
         BZ    RECRET                  NO - BRANCH
         LH    TEMP1,GRCT              YES, MORE GROUPS - LOAD GROUP CT
         BCT   TEMP1,NEXTGR            IF YES REDUCE COUNTER
         B     EODID                   IF NO DO NEXT MEMBER
*          R E I N I T I A L I Z A T I O N    T O
*            P R O C E S S    N E X T    R E C O R D   G R O U P
NEXTGR   STH   TEMP1,GRCT              STORE RECORD GROUP COUNTER
         LH    TEMP1,0(GCBR)           POINT TO NEXT GROUP
         MH    TEMP1,FCBLEN            ALIGN PTR TO PROPER BOUNDARY
         AR    GCBR,TEMP1
         AH    GCBR,GCBLEN
         BAL   BREG,SETGCBSW           SET SWITCHES FOR THIS RECD GROUP
RECRET   TM    RECFM,X'10'             BLOCKED RECORDS FOR INPUT
         BZ    RDCH                    NO, READ NEXT RECORD
         TM    RCP2+1,X'F0'                  CONTINUE SAME RECORD? 1450
         BO    SKIPNO                        YES - BRANCH          1450
         LH    RLEN,PLEN               LOAD REMAINING BYTES IN CURR REC
         SH    RLEN,RECDLEN            END OF PHYSICAL RECD - SUBTRACT
*                                      LENGTH OF CURRENT LOGICAL RECD.
         BC    12,RDCH                 BRANCH IF ZERO OR NEGATIVE TO
*                                      READ NEXT PHYSICAL RECORD
         STH   RLEN,PLEN               STORE REMAINING BYTES IN CUR REC
         L     RLOC,RECDLOC            LOAD PTR TO CURRENT RECORD
         AH    RLOC,RECDLEN            ADD LENGTH OF LAST LOGICAL RECD.
         TM    RECFM,X'50'             CHECK RECORD FORMAT
         BO    BV1                     FORMAT IS BLOCKED VARIABLE
         B     BF1                     FORMAT IS BLOCKED FIXED
         EJECT
*
***********************************************************************
* THESE ARE THE END OF DATA ROUTINES. ALL TERMINATION MUST GO THROUGH *
* THIS ROUTINE. TERMINATION INCLUDES PRINTING A MESSAGE, CLOSING THE  *
* DCB'S, FREEING CORE AND RETURNING. IF THIS IS NOT THE LAST MEMBER   *
* OF A PARTITIONED DATA SET THE NAME AND LOCATION OF THE NEXT MEMBER  *
* IS OBTAINED AND THE NEXT MEMBER IS PROCESSED. A USER EXIT MAY BE    *
* TAKEN TO PROCESS THE INPUT TRAILER LABEL IF IT IS A SEQUENTIAL DATA *
* SET.                                                                *
***********************************************************************
*
EODID    LA    R1,IDMSG                LOAD A 14 INTO R1
         SR    R0,R0                   CLEAR REGISTER 0
         B     EODWRT                  BRANCH TO MESSAGE ROUTINE
BLKSZERR LA    R1,BLKSZMIS             LOAD ERROR MESSAGE DISPLACEMENT
         LA    R0,12                   LOAD IEB MESSAGE CODE
         B     DOIT
EODSTOP  LA    R1,STPMSG               LOAD A 15 INTO R1
         SR    R0,R0                   CLEAR REGISTER 0
         B     EODWRT                  BRANCH TO MESSAGE ROUTINE
SDSEOD   B     TEMPTY        TAKE BRANCH IF EMPTY                A36088
         LA    R1,EODMSG     GET EOD MESSAGE NUMBER              A36088
         SR    R0,R0                   CLEAR REGISTER 0
EODWRT   SLL   R1,8
         L     R15,PMSGWRTA            LOAD ADDR OF ROUTINE IN IEBPPUN1
*                                      THAT PRINTS MESSAGES
         BALR  R14,R15                 BRANCH TO MESSAGE WRITER
         LH    TEMP1,LINECT            INCREMENT LINE COUNT        9476
         AH    TEMP1,PH1               BY 1 FOR EACH EOF MESSAGE   9476
         STH   TEMP1,LINECT            STORE NEW VALUE             9476
SDSEND   TM    TYPORG,3                WAS THE INPUT A PDS
         BZ    CLOSEIO                 NO - CLOSE A SEQUENTIAL DATA SET
         LH    TEMP1,MEMBCT            LOAD PDS MEMBER COUNT
         BCT   TEMP1,NEXTMEMB          REDUCE COUNT AND BRANCH
         B     CLOSEIO                 NO MORE MEMBERS - CLOSE DCB'S
NEXTMEMB STH   TEMP1,MEMBCT            STORE NEW MEMBER COUNT
         L     LISTR,DIRADD            LOAD ADDR.OF MEMBER NAMES A41759
         BO    NEXTM                   TEST FOR ONLY NAMED PDS MEMBERS
*                                      IF THAT'S CASE BRANCH
         TM    MEMGET,X'10'            GETMAIN FOR MEMB NAMES ?  A41759
         BC    8,TEMPTY                NO, PDS IS EMPTY          A41759
         LH    TEMP2,ALIASCT           SKIP ALIASES FROM DIRECTORY FOR
         AH    TEMP2,PH1               TOTAL PDS - ADD 1 TO ALIAS COUNT
         MH    TEMP2,LISTLEN           MULTIPLY COUNT BY A 12
         AR    LISTR,TEMP2             ADD VALUE TO MEMBER PTR
         ST    LISTR,DIRADD            SAVE PTR TO MEMBER NAMES
         B     PDT1
NEXTM    AH    LISTR,LISTLEN           POINT TO NEXT NAMED MEMBER
         ST    LISTR,DIRADD            STORE PTR TO MEMBER NAMES
         B     PDP1
*          E N T E R E D    W H E N    O P E N    D C B    E R R O R
DDERROR  LA    TEMP2,DDNAM(TEMP1)      GET ADR OF DDNAME IN DCB IN ERR.
         L     TEMP1,VMSG              GET ADR OF ERROR MSG
         MVC   7(8,TEMP1),0(TEMP2)     MOVE DDNAME TO ERROR MESSAGE
         LA    R0,11
         LA    R1,21                   GET NUMBER OF MSG IN MSG MODULE
DOIT     MVI   DDSWITCH,X'01'          SET SWITCH NOT TO FREE MAIN
         B     IOWRT                   PRINT MESSAGE
*        C L O S E   I N P U T   D C B                             UL0H
CLOSEIO  LA    R1,INSET            LOAD ADDR. OF  INP. DCB       A41816
         TM    OFLGS(R1),X'10'     WAS DCB OPENED ?              A41816
         BZ    CLOSEOUT            NO, DO NOT CLOSE              A41816
         CLOSE (INSET)             YES,CLOSE OUTPUT DCB          A41816
         TM    QSBRNOP+1,X'F0'     INPUT QSAM OPENED             A41816
         BNO   INTLRPRT            NO, DON'T FREE INP. BUFFERS   A41816
         FREEPOOL  INSET           FREE INP BUFFERS              A41816
INTLRPRT BAL   R8,LBLPRNT                                          UL0H
*        C L O S E   O U T P U T   D C B                           UL0H
CLOSEOUT LA    R1,OUTSET           LOAD ADDR. OF OUTP. DCB       A41816
         TM    OFLGS(R1),X'10'     WAS DCB OPENED ?              A41816
         BZ    NOFREE              NO, DO NOT CLOSE              A41816
         CLOSE (OUTSET)            YES,CLOSE OUTP. DATA SET      A41816
         FREEPOOL  OUTSET          FREEPOOL OUTPUT CORE          A41816
         TM    DDSWITCH,X'01'          IS FREEMAIN SKIPPED
         BO    NOFREE                  YES - BRANCH
         L     R0,LENGTHSV             RESTORE ALLOCATED CORE SIZE
         L     R1,LENGTHAD             RESTORE ALLOCATED CORE ADDRESS
*          F R E E    C O R E    F O R    I N P U T    B U F F E R
         FREEMAIN R,LV=(0),A=(1)
NOFREE   TM    MEMGET,X'10'            TEST FOR MEMBER GETMAIN     4304
         BC    8,NOFREE1               IF NONE THEN BRANCH         4304
         L     R0,MEMAREA              ELSE GET ADDR OF LENGTH     4304
         L     R1,MEMADDR              AND AREA ADDRESS            4304
         FREEMAIN   R,LV=(0),A=(1)                                 4304
         MVI   MEMGET,X'00'            RESET GETMAIN SWITCH        4304
NOFREE1  SR    R15,R15             ZERO OUT REG. 15              A41816
         IC    R15,PPRETCDE            LOAD RETURN CODE
         L     R13,PERM13              RESTORE REGISTER 13
*          R E T U R N    T O    C A L L I N G    P R O G R A M
         RETURN (14,12),RC=(15)
         EJECT
*
***********************************************************************
* THIS IS THE ROUTINE THAT GETS CORE (264 BYTES) FOR THE DIRECTORY    *
* RECORD AND KEY IF THE INPUT DATA SET IS PARTITIONED, THEN IT READS  *
* THE WHOLE DIRECTORY AND COUNTS THE NUMBER OF MEMBERS IN IT. IT THEN *
* REREADS THE DIRECTORY, THIS TIME PLACING THE MEMBERS IN ALLOCATED   *
* CORE AND SORTING THEM BY TTR'S AND ALIAS BITS. THIS IS DONE SO THAT *
* THE MESSAGE MAY BE PRINTED IN THE ORDER OF THEIR PHYSICAL OCCURRENCE*
* ON THE DIRECT ACCESS STORAGE DEVICE.                                *
***********************************************************************
*
TOTAL    LA    TEMP1,INSET             GET ADDRESS OF INPUT DCB
         TM    DEVT(TEMP1),X'20'       IS IT A DIRECT ACCESS DCB
         BO    CHGABC
         MVI   DDSWITCH,X'01'          SET NOT FREEMAIN SWITCH
         B     IOERRIN
CHGABC   LA    R0,DIRBLKL              LOAD DIRECTORY LENGTH
         ST    R0,LENGTHSV             SAVE DIRECTORY LENGTH
*          G E T    C O R E    F O R    D I R E C T O R Y
         GETMAIN R,LV=(0)
         ST    R1,DIRBUFF              STORE POINTER TO BUFFER
         ST    R1,LENGTHAD             SAVE PTR TO ALLOCATED AREA
TOTRD1   SR    MEMCT,MEMCT             CLEAR MEMBER COUNTER
         L     R3,INBUFF               LOAD POINTER TO DIRECTORY
*          R E A D    D I R E C T O R Y
TOTRD    READ  DECBI,SF,INSET,(R3),'S',MF=E
         CHECK DECBI                   CHECK THE READ
TOT5     NOP   TOT9                    SWITCH SET BELOW - NEVER RESET
         NOTE  INSET                   REMEMBER LOCATION OF BLOCK READ
         ST    R1,DADDSAV              SAVE BLOCK IDENTIFICATION
         OI    TOT5+1,X'F0'            SET NOP SWITCH TO 'NOTE' ONCE
TOT9     LH    CTR,0(R3)               COUNT OF DIRECTORY BLOCK
         CH    CTR,PH256               IS COUNT GREATER THAN 256
         BH    IOERRIN                 THIS IS AN ERROR
         CH    CTR,PH14                IT MUST BE GREATER THAN 14
         BE    TOT15B                   EQUAL, RESET SWITCH
         BL    SDSEOD                  NO INPUT --- BRANCH
         SH    CTR,PH2                 SUBTRACT 2 FOR 2 BYTE COUNT
         LA    RLOC,2(R3)              GET ADDRESS OF FIRST MEMBER
TOT10    B     TOT14
         MVC   0(LISTL,ROUT),0(RLOC)   MOVE DIRECTORY ENTRY
         AH    ROUT,LISTLEN            INCREMENT PTR TO OUTPUT BY
*                                      LENGTH OF DIRECTORY ENTRY
TOT14    AH    MEMCT,PH1               ADD ONE TO MEMBER COUNT
         SR    RLEN,RLEN               CLEAR REGISTER TO HOLD LENGTH
         IC    RLEN,11(RLOC)           GET LENGTH OF USER DATA IN
*                                      DIRECTORY ENTRY
         N     RLEN,ANDCONST           'AND' OUT ALL BITS EXCEPT 3-7
         SLL   RLEN,1                  MULTIPLY BY 2 - USER DATA HALF
         AH    RLEN,PH12               WORDS - ADD LENGTH OF DIR. ENTRY
         SR    CTR,RLEN                TEST FOR END OF INPUT RECORD
         LTR   CTR,CTR
         BZ    TOT15A                  END - BRANCH - HAVE ALL MEMBERS
         AR    RLOC,RLEN               NO, CONTINUE
         CLI   0(RLOC),X'FF'           IS THIS THE END OF DIRECTORY
         BNE   TOT10                   NO, CONTINUE LOOP
         NI    TOT15+1,X'0F'           YES - NOP TOT15
TOT15    B     TOTRD                   END OF DIRECTORY SWITCH
         TM    TOT10+1,X'F0'           HAS DIRECTORY BEEN READ TWICE
         BZ    TOTCONT                 YES - BRANCH
         NI    TOT10+1,X'0F'           NO -- RE-READ DIRECTORY
         OI    TOT15+1,X'F0'           RESET NOP SWITCH
         LR    R0,MEMCT                HAVE READ DIRECTORY ONCE TO
         CH    R0,PHZERO                                           1244
         BE    TEMPTY                                              1244
         MH    R0,LISTLEN              COUNT ENTRIES, NOW GET SPACE FOR
*                                      MEMBERS
         ST    R0,MEMAREA              SAVE AREA LENGTH            4304
         MVI   MEMGET,X'10'            SET GETMAIN SWITCH ON       4304
         GETMAIN R,LV=(0)
         ST    R1,DIRADD               STORE POINTER TO MEMBERS
         ST    R1,MEMADDR              SAVE MEMBER ADDRESS         4304
         LR    ROUT,R1                 SAVE POINTER TO MEMBERS
         POINT INSET,DADDSAV           POSITION DASD USING 'NOTE' PTR
         B     TOTRD1
TOT15A   STH   MEMCT,MEMBCT            STORE MEMBER COUNT
         CH    MEMCT,PH1               IS THERE ONLY ONE MEMBER
         BE    SDSEOD                  YES - BRANCH TO END OF DATA ROUT
         CLI   0(RLOC),X'FF'           ARE WE AT THE END OF DATA
         BNE   TOT15                   NO -- BRANCH
TOT15B   NI    TOT15+1,X'0F'            YES -- RESET NOP SWITCH
         B     TOT15
TOTCONT  STH   MEMCT,MEMBCT            STORE PDS MEMBER COUNT
         L     R0,LENGTHSV             RESTORE LENGTH OF BUFFER
         L     R1,LENGTHAD             RESTORE POINTER TO BUFFER
*          F R E E    C O R E    F O R    D I R E C T O R Y
         FREEMAIN R,LV=(0),A=(1)
*          C L O S E    I N P U T    D C B
*             F O R    D I R E C T O R Y    R E A D
         CLOSE (INSET)
*
*          SORT PARTITIONED DATA SET DIRECTORY
*            ENTRIES BY TTR'S AND ALIAS BIT
*
         LH    R1,PH1                  LOAD A ONE INTO REGISTER 1
         CH    R1,MEMBCT               IS THERE ONLY 1 MEMBER IN PDS
         BE    TOTEND                  YES -- BRANCH
DSORT1   OI    DSORT10+1,X'F0'         NO -- SET SWITCH
         L     LISTR,DIRADD            LOAD PTR TO MEMBER NAMES
         LR    LISTCT,R1               MOVE A ONE TO SORT COUNTER
DSORT3   CLC   8(3,LISTR),LISTL+8(LISTR) COMPARE TTR'S
         BL    DSORT8                  IF LOW BRANCH
         BH    DSORT5                  IF HIGH BRANCH
         TM    ABITL(LISTR),X'80'      TTR'S ARE EQUAL, ONE MAY BE AN
         BZ    DSORT8                  ALIAS - IF NOT ALIAS BRANCH
         TM    ABITL+LISTL(LISTR),X'80' IF BOTH ARE ALIAS -
         BO    DSORT8                  DO NOTHING
DSORT5   MVC   SAVE12(LISTL),0(LISTR)  MOVE NON-LOW MEMBER TO WORK AREA
         MVC   0(LISTL,LISTR),LISTL(LISTR) SWITCH MEMBER ENTRIES
         MVC   LISTL(LISTL,LISTR),SAVE12 MOVE OTHER MEMBER TO WORK AREA
         NI    DSORT10+1,X'0F'         SET SWITCH TO CONTINUE SORTING
DSORT8   AH    LISTR,LISTLEN           ADD LENGTH OF ENTRIES IN
*                                      DIRECTORY TO MEMBER NAME POINTER
         AR    LISTCT,R1               ADD ONE TO SORT COUNT
         CR    LISTCT,MEMCT            COMPARE SORT COUNT TO MEMBER CT.
         BL    DSORT3                  IF LOWER CONTINUE SORT
DSORT10  B     TOTEND                  SWITCH TO CONTINUE SORT
         BCT   MEMCT,DSORT1            REDUCE MEMBER COUNT AND CONTINUE
TOTEND   NI    POSTOPEN+1,X'0F'        SET SWITCH TO READ DATA SET
         B     PREOP1
         EJECT
*
***********************************************************************
* MOVE AND CONVERT 'N' BYTES OF INPUT INTO '2N' BYTES OF OUTPUT.      *
* HEXIDECIMAL INPUT WILL BE CONVERTED TO EBCDIC, PACKED DECIMAL INPUT *
* WILL BE CONVERTED TO ZONED DECIMAL WITH THE SIGN OCCURING AS A      *
* SEPARATE CHARACTER.                                                 *
*                                                                     *
*       INLEN = NUMBER OF BYTES TO BE CONVERTED                       *
*       RLOC = THE INPUT LOCATION                                     *
*       ROUT = THE OUTPUT LOCATION                                    *
*                                                                     *
***********************************************************************
*    L A B E L  C O N V.   E N T R Y   P O I N T                  *UL0H
FLDCONVL OI    LASTSW,81                                           UL0H
         TM    CONVSW,3                                            UL0H
         BO    FLDCONV1                                            UL0H
         B     FCHE                                                UL0H
*
*          S T A N D A R D    O U T P U T    E N T R Y    P O I N T
FLDCONV  CLC   CONVSW(1),TOTCONV
         BE    FLDCONV1
         B     FCTEST                  CHANGE LIST
*          U S E R    F O R M A T    E N T R Y    P O I N T
FLDCONVU CLC   CONVSW(1),4(FCBR)
         BE    FLDCONV1
FCTEST   TM    CONVSW,3                TEST FOR PACKED TO ZONED DECIMAL
         BO    FCHE                    ON ALREADY - BRANCH
         MVC   FCPLUSA(6),FCSIGNS      SET UP CONVERSION LIST
         MVI   CONVSW,3                SET SWITCH - PACKED TO ZONED
         B     FLDCONV1                SKIP HEX TO EBCDIC SETUP
FCHE     MVC   FCPLUSA(6),FCHEX        SET UP CONVERSION LIST
         MVI   CONVSW,1                SET SW FOR HEX TO EBCDIC
*                                      THE TWO ABOVE SWITCH SETTINGS
*                                      SHOW THE CONVERSION LIST STATUS
FLDCONV1 CLI   CONVSW,X'03'            IS IT PACKED TO UNPACKED
         BNE   FLDCONV2                NO -- BRANCH
         TM    LASTSW,X'01'            IS THIS THE LAST GROUP
         BZ    FLDCONV2                NO -- BRANCH
         OI    LASTSW,X'80'            YES - SET LAST GROUP SW TO X'81'
         BCTR  INLEN,R0                REDUCE INPUT COUNT BY ONE
FLDCONV2 STH   INLEN,LENSAV            STORE INPUT COUNT
         ST    ROUT,OUTSAV             STORE PTR TO OUTPUT AREA
         ST    RLOC,LOCSAV             STORE PTR TO INPUT AREA
         LTR   INLEN,INLEN             IS INPUT COUNT ZERO
         BZ    FCRET                   YES - TEST FOR LAST GROUP
FC1      SR    TEMP1,TEMP1             CLEAR REGISTER
         IC    TEMP1,0(RLOC)           LOAD CHARACTER TO CONVERT
         LR    TEMP2,TEMP1             MOVE CHARACTER TO CONVERT
         SRL   TEMP1,4                 REMOVE LOW ORDER 4 BITS
         STC   TEMP1,0(ROUT)           SEPARATE THE 4-BIT CHARACTERS
         STC   TEMP2,1(ROUT)           IN EACH BYTE
         BCT   INLEN,FC2               REDUCE INPUT COUNT
         B     FC3                     BRANCH WHEN INPUT COUNT IS ZERO
FC2      AH    ROUT,PH2                INCREMENT PTR TO OUTPUT BY TWO
         AH    RLOC,PH1                INCREMENT PTR TO INPUT AREA BY 1
         B     FC1                     LOOP UNTIL INPUT COUNT IS ZERO
FC3      LH    INLEN,LENSAV            LOAD INPUT COUNT
         L     ROUT,OUTSAV             RESTORE OUTPUT AREA POINTER
         SLL   INLEN,1                 MULTIPLY COUNT BY 2
         BCTR  INLEN,R0                REDUCE COUNT BY 1
         NI    0(ROUT),X'0F'           CLEAR HIGH ORDER 4 BITS EACH BYT
         BCTR  INLEN,R0                REDUCE INPUT LENGTH BY ONE
         EX    INLEN,FCMZ
         LA    INLEN,1(INLEN)          ADD ONE TO INPUT LENGTH
         EX    INLEN,FCTR
FCRET    LH    INLEN,LENSAV            LOAD INPUT COUNT
         L     ROUT,OUTSAV             RESTORE OUTPUT AREA POINTER
         L     RLOC,LOCSAV             RESTORE PTR TO INPUT
         TM    LASTSW,X'81'            DID ROUTINE SET LAST GROUP SW
         BO    UNPKLAST                YES - BRANCH
         BR    BREG                    NO - RETURN TO MAIN CODE
         SPACE 2
UNPKLAST AR    RLOC,INLEN              GET TO LAST CHARACTER
         LA    R14,15                  LOAD LAST CHARACTER      YA01690
         TM    PPSW1,1            PRINT OR PUNCH?              @ZA11968
         BZ    PRINTA             PRINT.GO PRINT WITHOUT SIGN  @ZA11968
         IC    R14,0(RLOC)        PUNCH.LOAD LAST CHARACTER    @ZA11968
PRINTA   SLL   R14,8              MOVE IT OVER 1 BYTE          @ZA11968
         IC    R14,0(RLOC)             LOAD LAST CHARACTER AGAIN
         SRL   R14,4                   SWITCHED - LOSE 4 LOW ORDER BITS
         SLL   INLEN,1                 MULTIPLY COUNT BY TWO
         AR    ROUT,INLEN              ADD IN OUTPUT LOCATION
         STC   R14,0(ROUT)             STORE CHARACTER IN OUTPUT AREA
         MVI   LASTSW,X'00'            CLEAR LAST SWITCH
         LH    INLEN,LENSAV            RESET LENGTH REG
         L     ROUT,OUTSAV             RESET OUTPUT PTR
         L     RLOC,LOCSAV             RESET INPUT PTR
         LA    ROUT,1(ROUT)            ADD 1 TO OUTPUT PTR FOR EOR *
         BR    BREG                    RETURN TO MAIN CODE
         SPACE 3
*          T R A N S L A T I O N    L I S T S
FCLIST   DC    C'0123456789'
FCPLUSA  DC    C'ABCDEF'
FCHEX    DC    C'ABCDEF'
FCSIGNS  DC    C'+-+-++'
FCMZ     MVZ   1(1,ROUT),0(ROUT)       INSTRUCTION EXECUTED
         EJECT
*
***********************************************************************
* THIS ROUTINE INITIALLY BLANKS OUT THE OUTPUT BUFFER, PRINTS TITLES  *
* AND SETS UP FOR THE PRINTING OR PUNCHING OF A SEQUENTIAL DATA SET   *
* OR THE MEMBERS OF A PARTITIONED DATA SET.                           *
***********************************************************************
*
PPHEAD   TM    PREFORMT,X'81'     IS IT PREFORMATTED INPUT?    @ZA11952
         BCR   7,BREG             YES,SKIP PRINTING OF SEQ NO  @ZA11952
         ST    BREG,PPHSAVE            SAVE RETURN REGISTER    @ZA11952
         TM    PPSW1,1                 IS THIS A PRINT OR PUNCH OPERAT.
         BO    PU1                     PUNCH - BRANCH
*          P R I N T I N G
         IC    CTLREG,PPCTL            SAVE CONTROL CHARACTER
         BAL   BREG,BLANKOUT           CLEAR OUTPUT BUFFER TO BLANKS
         MVI   PPCTL,C'1'              CTL TO EJECT PAGE AND PRINT LINE
         SR    TEMP1,TEMP1             CLEAR WORK REG
         STH   TEMP1,LINECT            CLEAR OUTPUT LINE COUNTER
         TM    PAGEBYT,X'F0'       PAGE NBR TO BE PRINTED ?      A45134
         BO    TURNPAGE            NO, TURN TO NEXT PAGE         A45134
         LH    TEMP1,PGBIN             LOAD INITIAL PAGE NUMBER
         LR    TEMP2,TEMP1             MOVE PAGE NUMBER
         AH    TEMP2,PH1               ADD ONE TO PAGE NUMBER
         STH   TEMP2,PGBIN             STORE NEXT PAGE NUMBER
         LA    TEMP2,OUTBUFF1      LOAD OUTPUT BUFF. ADDRESS     A45134
         AH    TEMP2,MAXOUT        ADD OUTPUT LENGTH-1           A45134
         SH    TEMP2,=H'10'        SUBTR 10 FOR PAGE NBR PURP.   A45134
         MVC   0(4,TEMP2),PAGE     MOVE 'PAGE' TO OUTPUT AREA    A45134
         CVD   TEMP1,DBLWD             CONVERT PAGE NUMBER TO DECIMAL
         UNPK  5(4,TEMP2),DBLWD+5(3)   UNPK PAGE NBR IN HEADER   A45134
         OI    8(TEMP2),X'F0'      RESET SIGN TO PRINTABLE CHAR. A45134
TURNPAGE BAL   BREG,WRCH               PRINT PAGE NUMBER         A45134
         STC   CTLREG,PPCTL            RESTORE CONTROL CHARACTER
         B     PPNAME         SKIP OVER PUNCH ROUTINE          @ZA07371
*          P U N C H I N G
PU1      TM    PPSW1,2                 ARE PUNCHED CARDS TO BE SEQUENCE
         BZ    PPNAME         NO --- BRANCH                    @ZA07371
         L     TEMP1,INITCDB            GET INIT.CARD SEQ NUMBER
         ST    TEMP1,CDNOB              SAVE SEQUENCE NUMBER
*          W R I T E    S E T U P                              @ZA07371
PPNAME   TM    TYPORG,1       IS THE INPUT A PDS               @ZA07371
         BZ    PPT            NO,TEST IF TITLE                 @ZA07371
         L     LISTR,DIRADD   YES - HAVE TO WRITE MEMBER NAME  @ZA07371
*                             LOAD PTR TO MEMBER NAMES         @ZA07371
         LA    OUTLOC,OUTBUFF1 LOAD PTR TO OUTPUT AREA         @ZA07371
         BAL   BREG,BLANKOUT  BLANK OUT OUTPUT AREA            @ZA07371
         MVC   0(11,OUTLOC),MBRNAMEA 'MEMBER NAME' TO OUTPUT   @ZA07371
         MVC   13(8,OUTLOC),0(LISTR) MOVE NAME TO OUTPUT AREA  @ZA07371
         BAL   BREG,WRCH      PRINT A LINE                     @ZA07371
         TM    TYPORG,2       IS WHOLE PDS BEING PROCESSED     @ZA07371
         BO    PPT            NO,TEST IF TITLE                 @ZA07371
         NI    PPN7+1,X'0F'   YES - CLEAR NOP SWITCH           @ZA07371
         LH    ALIASR,ALIASCT ALIAS COUNT FOR THIS MEMBER      @ZA07371
PPN6     LTR   ALIASR,ALIASR  ARE THERE ANY ALIASES            @ZA07371
         BC    13,PPT         NO,TEST IF TITLE                 @ZA07371
         LA    OUTLOC,OUTBUFF1 ADDRESS OF OUPUT BUFFER         @ZA07371
         BAL   BREG,BLANKOUT  CLEAR OUTPUT AREA TO BLANKS      @ZA07371
PPN7     NOP   PPN8           PRINT ALIASES SWITCH             @ZA07371
         MVC   0(7,OUTLOC),ALIASA 'ALIASES' TO OUTPUT AREA     @ZA07371
PPN8     LH    FLDCT,MAXOUT   LOAD OUPUT LRECL MINUS ONE       @ZA07371
         SRL   FLDCT,4        DIVIDE IT BY 16                  @ZA07371
PPN10    LA    OUTLOC,10(OUTLOC) BUMP OUTPUT POINTER TEN       @ZA07371
         AH    LISTR,LISTLEN  BUMP PTR TO MEMBER NAMES TO      @ZA07371
*                             ALIASES - ADD 12                 @ZA07371
         MVC   3(8,OUTLOC),0(LISTR) MOVE ACT. ALIAS TO OUTPUT  @ZA07371
         BCT   ALIASR,PPN11   ANY MORE ALIASES ?               @ZA07371
         B     PPNWRT         NO, PRINT ALIASES AND RETURN     @ZA07371
PPN11    BCT   FLDCT,PPN10    BRANCH WHEN ENOUGH SPACE IN      @ZA07371
*                             OUTPUT BUFF FOR NEXT ALIAS       @ZA07371
PPN12    OI    PPN7+1,X'F0'   SET NO ALIAS NOP SWITCH          @ZA07371
PPNWRT   BAL   BREG,WRCH      PRINT ALIAS NAME                 @ZA07371
         B     PPN6           TEST FOR MORE ALIASES            @ZA07371
*          T I T L E    P R I N T I N G                        @ZA07371
PPT      TM    PPSW1,1        IS IT A PRINT OPERATION?         @ZA07371
         BZ    PRINT          YES,GO TO TEST IF TITLE TO PRINT @ZA07371
         TM    PPSW1,4        IS THIS THE FIRST MEMBER         @ZA07371
         BO    PPHRET         NO - BRANCH                      @ZA07371
         OI    PPSW1,4        YES - SET SWITCH                 @ZA07371
PRINT    CLC   TCB1(2),PHZERO IS THERE A TITLE                 @ZA07371
         BNH   NOTITLE        NO -- TEST FOR SUBTITLE          @ZA07371
         LA    TCBR,TCB1      LOAD ADDRESS OF TITLE CTL BLOCK  @ZA07371
         BAL   BREG1,TITLEMOV WRITE AND CHECK TITLE            @ZA07371
NOTITLE  CLC   TCB2(2),PHZERO IS THERE A SUBTITLE              @ZA07371
         BNH   PPHRET         NO,RETURN                        @ZA07371
         LA    TCBR,TCBL(TCBR) LOAD ADDR OF SUBTITLE CTL BLK   @ZA07371
         BAL   BREG1,TITLEMOV WRITE AND CHECK SUBTITLE         @ZA07371
PPHRET   L     BREG,PPHSAVE            RESTORE RETURN REGISTER
         BR    BREG                    RETURN TO MAIN CODE
QSPREFM LH     R12,MAXOUT                                          VS0H
         STH   R12,OUTLRECL                                        VS0H
         LA    R6,1                                                VS0H
         MVI   OUTBUFF1,C' '                                       VS0H
         EX    R12,CLEAROUT                                        VS0H
         SH    R4,PH4                                              VS0H
         SR    R4,R6                   REDUCE BY 1 FOR EXEC&COMP   VS0H
         CR    R12,R4                                              VS0H
         BL    PREVRBA1                                            VS0H
         EX    R4,QSMOVE                                           VS0H
         BAL   BREG,WRCH                                           VS0H
         B     RDCH                                                VS0H
PTCHONE  CLC   LRECL,=X'7FF4'                                      VS0H
         BNH   TSTKEYS                 LESS THAN 32K               VS0H
         MVI   QSBRNOP+1,X'0'                                      VS0H
         B     TSTPREFM                                            VS0H
TSTKEYS  TM    KEYLEN+1,X'FF'                                      VS0H
         BZ    VRQSAM                  NO, SET QSAM ACC METH.    A48796
         MVI   QSBRNOP+1,X'00'                                     VS0H
         B     VSKEYS                  USE BSAM                    VS0H
PPHSAVE  DS    F                       HOLDS RETURN REG FOR PPHEAD ROUT
OPENSW   DC    X'0'                    ON DURING OPEN RTNE ONLY    UL0H
         EJECT
*
***********************************************************************
* THIS ROUTINE HANDLES THE 'PREFORM' UTILITY PROGRAM OPTION. THROUGH  *
* THIS OPTION THE USER MAY HAVE ALREADY BUILT AN INPUT DATA SET WITH  *
* AN IMBEDDED CONTROL CHARACTER WHICH WILL GOVERN THE OUTPUT CONTROL  *
* OF THE OUTPUT DATA SET. IF THE INPUT RECORDS ARE OF THE FIXED OR    *
* UNDEFINED FORMAT THE CONTROL CHARACTER IS IN THE FIRST BYTE; IF     *
* VARIABLE THE FIFTH BYTE. AN INPUT LOGICAL RECORD WHICH EXCEEDS 121  *
* BYTES CAUSES A MESSAGE TO BE PRINTED AND JOB TERMINATION. WHEN      *
* PREFORM IS SPECIFIED ALL OTHER CONTROL STATEMENT REQUESTS ARE       *
* IGNORED.                                                            *
***********************************************************************
*
PREFORM  LA    R8,INSET                SET UP DSECT ADDRESSABILITY
         USING IHADCB,R8               USE DSECT FOR INPUT DCB
         LH    12,MAXOUT                                           VS0H
         STH   12,OUTLRECL                                         VS0H
NOTPUNCH L     R1,DECBI+16             IS THIS A TRUNCATED RECORD
         SH    R1,PH1                  GET TO RIGHT BYTE IN DECB -
         TM    0(R1),X'01'             SUBTRACT ONE - TEST FOR TRUNCAT.
         BO    COMPUTE                 YES IT'S A TRUNCATED RECD - BRAN
         TM    DCBRECFM,X'90'          IS INPUT BLOCKED RECORDS
         BO    BLOCKED                 YES - BRANCH
         TM    DCBRECFM,X'C0'          IS IT A UNDEFINED LENGTH RECORD
         BO    URECORD                 YES IT IS - BRANCH
         TM    DCBRECFM,X'40'          IS IT A VARIABLE LENGTH RECORD
         BO    VBLOC                                               3173
         L     R1,INBUFF               LOAD ADDRESS OF INPUT AREA
         LA    R6,1                    LOAD ONE INTO A REG
         MVI   OUTBUFF1,C' '           CLEAR OUTPUT BUFFER
         EX    R12,CLEAROUT                                        VS0H
         LH    R4,DCBLRECL             LOAD LOGICAL RECORD LENGTH
         SR    R4,R6                   REDUCE BY 1 FOR EXEC&COMP   VS0H
         CR    R12,R4                   IS INPUT GREATER THAN MAX
         BL    PREVRBA1                                            VS0H
         EX    R4,MOVE                 MOVE INPUT CONTROL CHAR TO OUT.
         BAL   BREG,WRCH               WRITE(PRINT/PUNCH) RECORD
         B     RDCH                    READ ANOTHER PHYSICAL RECORD
BLOCKED  MVC   STARTIN(4),INBUFF                                   2461
         L     R3,DECBI+16                                         2461
         LH    R3,14(R3)                                           2461
         LH    R4,DCBBLKSI                                         2461
         SR    R4,R3                                               2461
         STH   R4,BLCKREM                                          2461
TRUNCBLK DS    0H                                                  VS0H
THRUONCE LH    R1,BLCKREM              HOW MUCH OF INPUT BLOCK IS LEFT
         LTR   R1,R1                   IS BLOCK FINISHED
         BNP   RDCH                                            @ZA04389
         SH    R1,DCBLRECL             TAKE LRECL FROM REMAINING BLKSIZ
         STH   R1,BLCKREM              STORE REMAINDER
         L     R2,STARTIN              LOAD PTR TO INPUT BUFFER
         LA    R6,1                    LOAD A ONE IN REG
         MVI   OUTBUFF1,C' '           CLEAR OUTPUT BUFFER
         EX    R12,CLEAROUT                                        VS0H
         LH    R4,DCBLRECL             LOAD LOGICAL RECORD LENGTH
         SR    R4,R6                   REDUCE BY 1 FOR EXEC&COMP   VS0H
         CR    R12,R4                                              VS0H
         BL    SETBLKSW                                            VS0H
         EX    R4,MOVE2                MOVE CTL CHAR TO OUTPUT AREA
         AH    R2,DCBLRECL             ADD LRECL TO INPUT POINTER
         ST    R2,STARTIN              SAVE THIS ADDRESS IN SAVE AREA
         TM    BLKDSWCH+1,X'F0'                                    VS0H
         BO    BLKDLONG                                            VS0H
         BAL   BREG,WRCH               WRITE(PRINT/PUNCH) RECORD
         B     THRUONCE                DO NEXT RECORD
RESETSW  MVC   STARTIN(4),INBUFF       RESET INPUT ADDRESS
         MVC   BLCKREM,DCBBLKSI        RESET BLOCK SIZE
         B     RDCH                    READ ANOTHER PHYSICAL RECORD
COMPUTE  L     R1,DECBI+16             LOAD IOB+8 PTR
         LH    R2,14(R1)               LOAD RESIDUAL COUNT FROM CSW
         LH    R3,DCBBLKSI             LOAD BLOCKSIZE FROM INPUT DCB
         SR    R3,R2                   GET NUMBER OF BYTES IN TRUNC REC
         ST    R3,BLCKREM              STORE NEW BLOCK SIZE
         B     TRUNCBLK                                            VS0H
URECORD  L     R1,INBUFF               LOAD ADDRESS OF INPUT AREA
         LH    R4,DCBBLKSI             LOAD BLOCK SIZE OF INPUT DCB
         L     R5,DCBIOBA              GET IOB ADDRESS FROM INPUT DCB
         LA    R5,0(R5)                CLEAR HIGH ORDER BYTE OF R5
         LH    R5,22(R5)               GET RESIDUAL COUNT FROM CSW
COMMON   MVI   OUTBUFF1,C' '           CLEAR OUTPUT BUFFER
         EX    R12,CLEAROUT                                        VS0H
         LA    R6,1                    LOAD A ONE FOR EXECUTE INSTRUCT.
         SR    R4,R5                   SUBTRACT RES COUNT FROM BLKSIZE
         CR    R12,R4                  IS INPUT GREATER THAN MAX
         BL    PREVRBA2                BREAK UP UNDEFINED RECORDS  VS0H
         SR    R4,R6                   SUBTRACT ONE MORE
         EX    R4,MOVE                 MOVE LENGTH TO OUTPUT BUFFER
         BAL   BREG,WRCH               WRITE(PRINT/PUNCH) RECORD
         B     RDCH                    READ ANOTHER PHYSICAL RECORD
VBLOC    LA    R4,1                    LOAD A ONE
         LA    R5,4                    LOAD A FOUR
         L     R3,INBUFF               LOAD ADDRESS OF INPUT BUFFER
         LH    R7,0(R3)                GET BLOCK SIZE
         SR    R7,R5                   SUBTRACT 4 BYTES FROM BLKSIZE
         STH   R7,BLCKREM              STORE THAT IN HOLD AREA
         LA    R3,4(R3)                SKIP 4 BYTES OF VAR. BLK RECORD
         ST    R3,STARTIN              STORE INPUT AREA PTR+4
ONCE     LH    R1,BLCKREM              HOW MUCH INPUT BLOCK LEFT
         LTR   R1,R1                   IS IT ALL DONE
         BZ    RDCH                    YES --- READ NEW PHYSICAL RECD
         L     R3,STARTIN               NO -- GET PTR TO LOGICAL REC
         MVC   HWD(2),0(R3)            MOVE LRECL TO HALF WORD BOUNDARY
         LH    R3,HWD                  LOAD LOGICAL RECORD LENGTH
         AR    R12,R5    ADD 4 BYTES TO ACCOUNT FOR LLBB           3173
         AH    R12,PH1       ADD 1 BYTE FOR ASA OR MC. BYTE      A38702
         CH    R12,HWD                  IS INPUT GREATER THAN MAX
         BL    SETVSW                                              VS0H
         SR    R12,R5    REINITIALIZE R12                          3173
         SH    R12,PH1                                           A38702
         SR    R1,R3                   SUBTRACT LOG. REC. LEN FROM BLKZ
         STH   R1,BLCKREM              STORE REST OF BLOCK SIZE
         L     R2,STARTIN              LOAD INPUT AREA POINTER
         LA    R2,4(R2)                BUMP IT BY 4
         SR    R3,R5                   SUBTRACT 4 BYTES OF LRECL
         SR    R3,R4                   PREPARE FOR EXECUTE INSTRUCTION
         MVI   OUTBUFF1,C' '           CLEAR OUTPUT BUFFER
         EX    R12,CLEAROUT                                        VS0H
         EX    R3,MOVE2
         AR    R3,R4                   RESET R3
         AR    R2,R3                   BUMP UP INPUT PTR
         ST    R2,STARTIN              SAVE THIS NEW ADDRESS
         BAL   BREG,WRCH               WRITE(PRINT/PUNCH) RECORD
         B     ONCE
         SPACE 3
MOVE     MVC   OUTBUFF(1),0(R1)
MOVE2    MVC   OUTBUFF(1),0(R2)
MOVEPART MVC   OUTBUFF1,0(R2)                                      VS0H
HWD      DC    X'0000'                 HALF WORD WORK AREA
CLEAROUT MVC   OUTBUFF1+1,OUTBUFF1                                 UL0H
SAVLRECL DS    H                                                   VS0H
OUTLRECL DS    H                                                   VS0H
         DROP  R8
         EJECT
*
***********************************************************************
* THIS ROUTINE WRITES(PRINT/PUNCH) ONE RECORD. THE LINE COUNT IS      *
* INCREMENTED BY ONE BEFORE IT IS PRINTED IF PRINTING IS REQUIRED OR  *
* THE CARD NUMBER IS INCREMENTED IF IT IS TO BE PUNCHED.              *
***********************************************************************
*
WRCH     TM    PPSW1,X'03'             IS OUTPUT PRINTED OR PUNCHED
         BO    WCCDNO                  YES - PUNCH W/SEQUENCE - BRANCH
         BM    WRCH2                   NO - JUST PUNCHED - BRANCH
CGLPUNCH LH    TEMP1,LINECT            LOAD LINE COUNTER
         AH    TEMP1,LINEINCR          ADD ONE TO LINE COUNTER
         STH   TEMP1,LINECT            STORE LINE COUNTER
*          W R I T E    O U T P U T
WRCH2    ST    R8,KEEPR4R6         SAVE R8                         7034
         TM    NOTOPEN,X'F0'    SYSUT2 D C B NOT OPENED            7034
         BO    SYPRNDCB    USE SYSPRINT D C B                      7034
         LA    R8,OUTSET    ADDR OF SYSUT2  D C B                  7034
         B     WRCH3    GO ISSUE WRITE                             7034
SYPRNDCB L     R8,SYSPRPTR     USE SYSPRINT D C B                  7034
WRCH3    PUT   (R8),OUTBUFF                                      A23458
         L     R8,KEEPR4R6     RESTORE R 8                         7034
         BR    BREG                    RETURN TO MAIN CODE
         SPACE 2
WCCDNO   L     TEMP2,CDNOB              LOAD CARD NUMBER
         LR    TEMP1,TEMP2              MOVE CARD NUMBER
         A     TEMP2,CDINCRB            INCREMENT CARD NUMBER
         ST    TEMP2,CDNOB             STORE CARD NUMBER
         CVD   TEMP1,DBLWD             CONVERT CARD NUMBER TO DECIMAL
         UNPK  PUCD(8),DBLWD+3(5)      ADD ZONE BITS TO CONVERTED NUMB.
         OI    PUCD+7,X'F0'            RESET SIGN TO PRINTABLE CHAR.
         B     WRCH2                   BRANCH TO WRITE MACRO TO PUNCH
*
*          MOVE AND WRITE TITLE
*
TITLEMOV LH    LEN,0(TCBR)             LOAD TITLE LENGTH
         BCTR  LEN,R0                  REDUCE LENGTH FOR EXECUTE INST.
         LA    ROUT,OUTBUFF1           LOAD ADDRESS TO OUTPUT FIELD
         L     RLOC,4(TCBR)            LOAD PTR TO TITLE
         EX    LEN,FMOVE               MOVE TITLE TO OUTPUT AREA
         LH    LEN,2(TCBR)         LOAD TITLE LENGTH            OY01168
         LH    R12,MAXOUT          LOAD OUTPUT LRECL-1          OY01168
         CR    LEN,R12             LITT. EXCEEDS OUTPUT ?       OY01168
         BNH   TITLOKE             NO, CONTINUE                 OY01168
         LA    R0,37               LOAD MSG NUMBER IEB437I      OY01168
         LR    R1,R0               LOAD MSG DISPL OF MSG IEB437I Y01168
         B     IOWRT               PRINT MSG AND STOP PROC.     OY01168
TITLOKE  EQU   *                   CONT. PROCESSING             OY01168
         LR    BREG,BREG1              MOVE RETURN PTR TO PPNAME
         B     WRCH                    WRITE AND CHECK TITLE
*
*          CLEAR OUTPUT AREA
*
BLANKOUT MVI   OUTBUFF1,C' '           CLEAR OUTPUT BUFFER TO BLANKS
         LH    R12,MAXOUT                                          UL0H
         EX    R12,CLEAROUT                                        UL0H
         BR    BREG                    RETURN TO MAIN CODE
         SPACE 3
*
*          INSTRUCTIONS EXECUTED
*
IDTCOMP  CLC   0(1,RLOC),0(RLIT)
FMOVE    MVC   0(1,ROUT),0(RLOC)       USED TO MOVE TITLE AND OUTPUT
*                                      TO OUTPUT BUFFER
FCTR     TR    0(1,ROUT),FCLIST        USED TO CONVERT CHARACTERS
QSMOVE   MVC   OUTBUFF(1),4(R1)                                    VS0H
         EJECT
*
***********************************************************************
*                 E R R O R    R O U T I N E S                        *
*                                                                     *
*          GO TO IEBPPUN1 - ROOT SEGMENT - TO PRINT MESSAGE           *
***********************************************************************
*
*          B L D L    M A C R O    E R R O R
MEMBNO   LA    R1,BLDENTRY             LOAD ADDRESS OF MEMBER NAME
         MVI   PPRETCDE,X'8'           SET RETURN CODE
         LA    R0,8                    LOAD PTR TO APPROPRIATE MESSAGE
         L     R15,MNMSGA              LOAD ADDRESS OF MESSAGE ROUTINE
         LA    R14,SDSEND              LOAD RETURN REGISTER - IF
*                                      PROCESSING A SDS THE PROGRAM IS
*                                      TERMINATED - IF A PDS NEXT
*                                      MEMBER IS READ
         BR    R15                     GO TO ROOT SEGMENT TO PRINT MSG
         SPACE 2
*          T E R M I N A T I O N    E R R O R    R O U T N E
DCBERROR LA    R0,12             LOAD  IEB412I MESS.             A45135
         LA    R1,6              LOAD MESS. NUMBER               A45135
         MVI   DDSWITCH,X'01'    SET NOTFREEMAIN SWITCH          A45135
         B     IOWRT             SET C.C AND PRINT MESSAGE       A45135
PRERROR1 L     R10,SAVEAREA            RESTORE ADDRESSABILITY
PRERROR  LA    R0,10                   LOAD IEB CODE FOR MESSAGE
         LA    R1,20                   LOAD ONE LESS THAN MSG NUMBER
         B     IOWRT                   ARRANGE IEB CODE AND MSG NUMBER
TEMPTY   LA    R0,17                                               1244
         LA    R1,25                                               1244
         MVI   PPRETCDE,X'4'       SET RETURN CODE TO 4          A48732
         B     IOWRT1              PRINT MSG IEB417I             A48732
IOERRIN  LA    R0,7                    LOAD IEB CODE FOR MESSAGE
         LA    R1,IOMSG                LOAD ONE LESS THAN MSG NUMBER
IOWRT    MVI   PPRETCDE,X'C'           SET RETURN CODE TO 12
IOWRT1   SLL   R1,8                    MOVE MSG NUMBER OVER 2 BYTES
         AR    R1,R0                   PLACE IEB CODE IN SAME REG
         L     R15,PMSGWRTA            LOAD PTR TO MESSAGE WRITER
         LA    R14,CLOSEIO             LOAD PTR TO END OF JOB ROUTINE
         MVC   INTLRPRT,NOPLBLPR       BYPASS PRINT OF TLR         UL0H
*                                      LABELS ON IO ERROR ON OP    UL0H
         BR    R15                     GO TO ROOT SEGMENT TO PRINT MSG
*
*               I / O   E R R O R  H A N D L I N G   R O U T I N E
*
         USING IHADCB,R8                                       @ZA07372
SYNADMSG TM    DCBCIND2,DCBCNQSM   QSAM USED FOR D/S?          @ZA07372
         BO    QSYNADAF            YES, TAKE QSAM SYSNADAF ROUT. A48796
         SYNADAF ACSMETH=BSAM      BSAM SYSNADAF                 A48796
         B     SKIPQSYN            SKIP QSAM SYSNADAF            A48796
QSYNADAF SYNADAF ACSMETH=QSAM      QSAM SYSNADAF                 A48796
SKIPQSYN EQU   *                   PRINT SYNADAF MESSAGE         A48796
         LA    R7,MSGSYNDF        GET MESSAGE BUFFER ADDR          7715
         LA    R7,18(R7)          GET ADDR OF BUFFER BEYOND ID     7715
         MVC   0(79,R7),49(R1)    MOVE MESSAGE TO BUF              7715
         SYNADRLS                                                  7715
         LA    R1,MSGSYNDF        GET MESSAGE ADDR FOR PRINT       7715
         LA    R0,96              SET LENGTH OF MSG TO BE WRITTEN  7715
         MVI   PPRETCDE,X'C'      SET RETURN CODE TO 12            7715
         LA    R14,CLOSEIO        LOAD PTR TO END OF PPCH1         7715
         L     R15,VZZPR          LOAD PTR TO MESSAGE WRITER RTN   7715
         MVC   INTLRPRT,NOPLBLPR  BYPASS TLR LABEL PRINT ON I/O ER 7715
         BR    R15                GO TO CLOSE INPUT & OUTPUT DCBS  7715
         DROP  R8                                              @ZA07372
         SPACE 2
EXTERM1  LA    R1,EOJUSM               LOAD 12 INTO REG 0 AND 1
         LA    R0,6
         STC   R15,PPRETCDE            STORE RETURN CODE
         B     IOWRT1                  WRITE MESSAGE
PREERR1  LA    R0,13                    LOAD ERROR MESSAGE CODE FOR IEB
         LA    R1,22                   LOAD ONE LESS THAN MESSAGE
*                                       NUMBER IN IEBPPMSG MODULE  UL0H
         B     IOWRT1                   ARRANGE CODES--PRINT MSG   UL0H
LBLPRNT  ST    R5,SAVER5                                           UL0H
         TM    IOSW+1,X'F0'                                        UL0H
         BO    IOLABERR                                            UL0H
         LA    R5,LABEL1                                           UL0H
         CL    R5,LBLSVPTR                                         UL0H
         BE    EXITULPR                                            UL0H
         TM    ULEXSW+1,X'F0'                                      UL0H
         BO    ULPROC                  GO TO USER LABEL PROC.      UL0H
YESLABLS B    LABELS                                               UL0H
ULPROC   CLI   USRTRMSW,X'F0'                                      UL0H
         BE    WRTUSTMS                                            UL0H
         B     LABELS                                              UL0H
WRTUSTMS LA    R0,6                                                UL0H
         LA    R1,12                    12 IS USTERM MSG # DIPSL.  UL0H
         B     IOWRT                                               UL0H
WRTIOMSG LA    R0,7                                                UL0H
         LA    R1,13                                               UL0H
         B     IOWRT                                               UL0H
LABELS   MVC   PRNTLIM,LBLSVPTR                                    UL0H
         ST    R5,LBLSVPTR                                         UL0H
         TM    PPSW1,1        PUNCH COMMAND ?                    A45135
         BNZ   PRINTLBL       YES, DO NOT PRINT PAGE HEADER      A45135
         BAL   BREG,PPHEAD    TURN PAGE AND PRINT PAGE NBR       A45135
         L     R5,LBLSVPTR    RESTORE PTR TO LABEL SAVE AREA     A45135
PRINTLBL BAL   BREG,BLANKOUT                                       UL0H
         LA    ROUT,OUTBUFF1                                       UL0H
         TM    LBLCONSW,1                                          UL0H
         BO    CONVLBLS            YES, BR TO CONVERT LBLS         UL0H
         MVC   0(80,ROUT),0(R5)                                    UL0H
         BAL   BREG,WRCH                                           UL0H
         L     R5,LBLSVPTR                                         UL0H
         AH    R5,=X'0050'         ADD  80 BYTES                   UL0H
         ST    R5,LBLSVPTR                                         UL0H
         C     R5,PRNTLIM                                          UL0H
         BE    LBLPRNTX            ALL DONE                        UL0H
         B     PRINTLBL                                            UL0H
LBLPRNTX LA    R5,LABEL1                                           UL0H
         ST    R5,LBLSVPTR             RESET PTR TO 1ST POS'N      UL0H
         MVC   LINECT,PMAXLINE          FORCE LINE COUNT TO ADV    UL0H
EXITULPR L     R5,SAVER5                                           UL0H
         BR    R8                                                  UL0H
IOLABERR LA    R0,22                                               UL0H
         LA    R1,30                                               UL0H
         B     DOIT                    TERM.RTNE ON IO LBL ERROR   UL0H
         EJECT
*
***********************************************************************
*      C O N S T A N T S    A N D    W O R K    A R E A S             *
***********************************************************************
*
*
*          EXIT LIST FOR INPUT DATA SET
*              UHIN-USER INOUT HDR LABEL EXIT-ADDR.OBT'D           UL0H
*              UTIN-           TLR            BY LOAD MACROS       UL0H
*               DCBIN - DCB EXIT TAKEN AT OPEN TIME
*                  DCBEXSW-WHEN DS CLOSED PRIOR TO REOPENING       VS0H
*                            WITH QSAM                             VS0H
         DS    0F                                                  7034
SAVER5   DS    F                                                   UL0H
DCBSAVE  DS    F                                                 A38762
KEEPR4R6 DS    3F                                                  7034
STARTIOT DS    F                                                   7034
SYSPRPTR DC    V(PPOUT)      ADDRESS OF SYSPRINT   D C B           7034
SISUT2   DC    CL8'        '                                       7034
NOTOPEN  DC    X'00'                                               7034
EXITSIN  DS    0F
UHIN     DC    XL4'00C8C8C8'           WILL BE REPLACED BY INHDR   UL0H
UTIN     DC    XL4'00E3E3E3'           INTLR RTN IF ANY PASSED     UL0H
PPEXIN   DS    0F                                                  UL0H
PPHINEX  DC    X'00'                                             A45135
         DC    AL3(PPIHLEX)                                        UL0H
PPTINEX  DC    X'00'                                             A45135
         DC    AL3(PPITLEX)                                        UL0H
DDDEX    DC    X'85'         LABEL CHANGED BEC. OF AOS DSCB
DCBEXIN  DC    AL3(DCBIN)
DCBEXSW  DC    X'85'                                               VS0H
         DC    AL3(DCBRET)                                         VS0H
USEREX   DC    BL4'0'                                              UL0H
*
*          USED FOR BUILDING OUTPUT LINE
*            MODIFIED FOR PUNCHING OUTPUT
*
MAXSEG   DC    H'12'                   NUMBER OF GROUPS PER LINE
INSEG    DC    H'8'                    NUMBER OF CHARACTERS PER GROUP
OUTSEG   DC    H'10'                   CHARACTERS PLUS BLANKS PER GROUP
*
*          RECORD GROUP SWITCHES
*
IDSW     DC    X'0'                    INPUT, 0 = NO ID, 1 = ID TEST,
*                                      3 = END OF GROUP
FORMATSW DC    X'0'                    OUTPUT, 0 = STANDARD FORMAT
*                                              1 = USER DEFINED FORMAT
DBLWD    DS    D                       WORK AREA FOR CARD AND PAGE
*                                      NUMBER CONVERSION TO DECIMAL
TEMBADD  DS    F                       TTR FROM NOTE MACRO EXECUTION
DADDSAV  EQU   TEMBADD                 ADDRESS OF DIRECTORY
SAVE12   DS    12F                     USED TO SORT MEMBERS IN TOTAL RT
SAVEAREA DS    2F                      REGS 10 AND 2 SAVE AREA FOR
*                                      UF10 ROUTINE
WORKAREA DS    F                       WORK AREA FOR UF10 ROUTINE
TEMPHW1  DC    H'0'                    LENGTH OF CURRENT LOGICAL RECD.
PERM13   DC    F'0'                    SAVE AREA FOR REG 13
RECOUNT  DC    H'0'                    TO COMPUTE LENGTH OF USER FORMAT
MEMGET   DC    X'00'         SWITCH FOR GET MAIN FOR MEMBERS       4304
MEMADDR  DC    F'0'          ADDR OF STORAGE FOR GET MAIN          4304
MEMAREA  DC    F'0'          LENG OF STORAGE FOR MEMBER GET MAIN   4304
LENGTHSV DC    F'0'          LENGTH OF ALLOCATED CORE              4304
LENGTHAD DC    F'0'                    POINTER TO ALLOCATED CORE
STARTIN  DC    F'0'                    POINTS TO INPUT AREA
BLCKREM  DC    H'0'                    HOLDS REMAINING BLOCK SIZE
*
*          HALF WORD INCREMENT VALUES
*
PHZERO   DC    H'0'                    USED TO CLEAR AREAS TO ZEROS
PH1      DC    H'1'
PH2      DC    H'2'
PH4      DC    H'4'
PH8      DC    H'8'
PH12     DC    H'12'
PH14     DC    H'14'
PH16     DC    H'16'
*
ANDCONST DC    F'31'                   USED TO 'AND' OUT BITS, TOTAL RT
HOLDRLEN DC    F'0'                    HOLDS LENGTH OF CURRENT RECORD
PH256    DC    H'256'                  COMPARAND FOR RECORD SIZE
LASTSW   DC    X'00'                   USED TO INDICATE LAST OF GROUP
*
*          OUTPUT CONSTANTS
*
PAGE     DC    C'PAGE'                 USED FOR NUMBERING PAGES
MBRNAMEA DC    C'MEMBER NAME'          USED FOR PRINTING A PDS
ALIASA   DC    C'ALIASES'
EOB      EQU   C'*'
*
*          OUTPUT BUFFER FOR SYSUT2
*
OUTBUFF  DS    0X                      NAMES BUFFER
PPCTL    DC    C' '                    CONTROL CHAR. FOR SPACE/STACKER
OUTBUFF1 DS    72X                     START OF OUTPUT IMAGE
PUCD     DS    8X                      SEQUENCE NUMBER
         DS    30X
PRPG     DS    10X                     PAGE NUMBER
         DC    24C' '            EXTENDED BUFFER FOR MAX BLOCK   A23836
ONE45    DC    H'145'            MAXIMUM OUTPUT LRECL WHEN PRINT Y01168
EIGHTY1  DC    H'81'             MAX OUTP. LRECL WHEN PUNCH     OY01168
*
*          INPUT DATA SET PARAMETERS
*
RECFM    DC    X'0'                    RECORD FORMAT
KEYLEN   DC    H'0'                    KEY LENGTH
BLKLEN   DC    H'0'                    BLOCK LENGTH
LRECL    DC    H'0'                    LOGICAL RECORD LENGTH
TABLEADD DS    F                       DTABLE BASE ADDRESS         UL0H
*          TABLE BUILT BY IEBPPAL1
*            CONTAINS SWITCHES AND COUNTERS
*              PERTINENT TO USERS REQUEST - INITIALLY
*                REFERENCED BY DTABLE DSECT
*
TABLE    DS    0F
LITADD   DC    F'0'                    ADDRESS OF LITERAL POOL
MNTADD   DC    F'0'                    MEMBER NAME TABLE ADDRESS
TYPORG   DC    X'0'                    0 - PDS, 1 - TOTAL PDS, 3 -
*                                      NAMED PDS MEMBERS
TOTCONV  DC    X'0'                    CONVERSION SWITCH -- 0 = NO CONV
*                                      1 = HEX TO EBCDIC(HE)
*                                      3 = PACKED TO UNPACKED DEC.(PZ)
PPSW1    DC    X'00'                   0 - PRINT, 1 - PUNCH,
*                                      3 - SEQUENCE CARDS, 7 - NOT
*                                      FIRST TIME
CNTRL    DC    X'1'
INITCDB  DC    F'0'
CDINCRB  DC    F'10'                    CARD INCREMENT,BINARY
PGBIN    DC    H'1'                    INITIAL PAGE NUMBER
PMAXLINE DC    H'60'                   LINES PER PAGE
INITSTOP DC    H'0'                    RECORD NUMBER TO STOP AFTER
INITSKIP DC    H'0'                    RECORD NUMBER TO SKIP(PROCESS)
STRTAFT  DC    H'0'                    RECORD NBR TO START AT    A45135
TCB      DS    0F                      TITLE CONTROL BLOCK
TCB1     DC    H'0'                    LENGTH OF TITLE
         DC    H'0'                    RELATIVE LOCATION OF OUTPUT AREA
*                                      WHERE ON CARD OR PAGE IT APPEARS
         DC    F'0'                    ADDRESS OF TITLE
*                                      SUBTITLE CONTROL BLOCK
TCB2     DC    H'0'                    LENGTH OF TITLE
         DC    H'0'                    RELATIVE OUTPUT LOCATION
         DC    F'0'                    ADDRESS OF TITLE
PREFORMT DC    X'00'                   80 = ASA, 01 = MACHINE CODE
LPRSW    DC    X'00'                                               UL0H
PROCKY   DC    X'00'                                               UL0H
LBLCONSW DC    X'00'                                               UL0H
TBLEN    EQU   *-TABLE                 GET TABLE LENGTH
*          E N D    O F    T A B L E
*
*                        COUNTERS FOR HDR & TRLR LABEL PROC        UL0H
*                                                                  UL0H
         DS    0D                                                  UL0H
UTINCT   DC    XL8'0'                                              UL0H
USERTNCT DC    XL4'0'                                              UL0H
ULABIN   DC    XL4'0'                                              UL0H
BYPASSED DC    XL4'0'                                              UL0H
CONVSAV  DS    XL1                                                 UL0H
*          SYMBOLIC NAMES OF USERS EXITS
*
EXLIST   DS    0D
INHDR    DC    CL8' '                  ROUTINE PROCESSES INPUT HDR LABL
INTLR    DC    CL8' '                  ROUTINE PROCESSES INPUT TLR LABL
INREC    DC    CL8' '                  ROUTINE PROCESSES LOGICAL RECORD
*                                      BEFORE BEING PROCESSED
OUTREC   DC    CL8' '                  ROUTINE PROCESSES LOGICAL RECORD
*                                      BEFORE BEING OUTPUTED
EXLEN    EQU   32                      LENGTH OF EXIT ROUTINE NAMES
*
*          COUNTERS
*
CURSKIP  DC    H'0'                    SKIP RECORD COUNTER
CURSTRT  DC    H'0'                    NBR. OF REC. ALR. SKIPPED A45135
CURSTOP  DC    H'0'                    STOP RECORD COUNTER
LINECT   DC    H'0'                    OUTPUT LINE COUNTER
LINEINCR DC    H'1'                    LINE INCREMENT - MODIFIED
CDNOB    DC    F'0'
PPRETCDE DC    X'0'                    USER RETURN CODE
CONVSW   DC    X'01'                   CONVERSION SWITCH -- 1 = HE
*                                      3 = PZ
*
*          A S A  CONTROL CHARACTERS FOR
*            OUTPUT BUFFER - MUST BE POSITIONED AS IS
*
         DC    C'0'                    DOUBLE SPACE BEFORE PRINTING
SPTRIPLE DC    C'-'                    TRIPLE SPACE BEFORE PRINTING
         DC    C'V'                    SELECT PUNCH POCKET 1
STACK2   DC    C'W'                    SELECT PUNCH POCKET 2
*
*          SKIP OR STOP SWITCH
*
SKIP     EQU   X'01'
STOP     EQU   X'02'
INSW     DC    X'0'                    1 - SKIP, 2 - STOP
*
INBUFF   DS    F                       ADDRESS OF INPUT BUFFER
DIRBUFF  EQU   INBUFF                  DIRECTORY INPUT AREA
SAVEADD  DS    18F                     MODULE SAVE AREA
MEMBCT   DC    H'0'                    PDS MEMBER COUNT
GRCT     DC    H'0'                    RECORD GROUP COUNT
ALIASCT  DC    H'0'                    NO. OF ALIASES FOR CURRENT MEMB.
*
GCBL     EQU   8                       LENGTH OF GROUP CONTROL BLOCK
GCBIDLEN EQU   2
GCBIDLIT EQU   4
GCBIDLOC EQU   6
FCBLEN   EQU   PH8                     LENGTH OF FIELD CONTROL BLOCK
GCBLEN   EQU   PH8                     LENGTH OF GROUP CONTROL BLOCK
TCBL     EQU   8                       LENGTH OF TITLE CONTROL BLOCK
LISTLEN  EQU   PH12                    LENGTH OF EACH ENTRY IN DIRBUFF
LISTL    EQU   12
ABITL    EQU   11                      LOCATION OF ALIAS BIT
DIRBLKL  EQU   264
*
OUTBADD  DC    A(OUTBUFF1)             ADDRESS OF OUTPUT BUFFER
DIRADD   DS    A                       PTR TO ANY MEMBER NAMES
DTABPTR  DC    F'0'                    PTR TO DTABLE
VZZPR    DC    V(ZZPR)                       ADDR OF MSG RTN       7715
MSGSYNDF DC    CL96'IEB421I I/O ERROR'       SYNAD I/O ERROR MSG   7715
*
*          BLDL LIST
*
BLDLADD  DS    0F                      AREA USED FOR BLDL MACRO
         DC    H'01'                   NUMBER OF ENTRIES IN LIST
         DC    H'76'                   LENGTH OF ENTRY IN LIST
BLDENTRY DS    8X                      NAME OF MEMBER TO FIND
BLDTTR   DS    4X                      RELATIVE TRACK ADDRESS-RETURNED
         DS    1X                      FILLER BYTE - NOT USED
BLDC     DS    1X                      DESCRIBES USER DATA FIELD-RETURN
BLDUSER  DS    62X                     USER DATA IN DIRECTORY-RETURNED
*                                      MAXIMUM USER DATA SIZE - 62 BYTE
*                                      MAXIMUM DIRECTORY ENTRY-74 BYTES
*                                      MINIMUM DIRECTORY ENTRY-12 BYTES
*
PLEN     DC    H'0'                    REMAINING BYTES IN BLOCKED RECD
RECDLEN  DC    H'0'                    LENGTH OF CURRENT LOGICAL RECORD
RECDLOC  DC    F'0'                    LOCATION OF CURRENT LOGICAL RECD
FSLOC    DS    F'0'                    POINTER TO CURRENT INPUT RECORD
FSLEN    DS    H'0'                    REMAINING BYTES OF INPUT RECORD
*
*          STORAGE USED IN FLDCONV ROUTINE
*
OUTSAV   DS    F                       OUTPUT LOCATION OF CURRENT FIELD
LOCSAV   DS    F                       INPUT LOCATION OF CURRENT FIELD
LENSAV   DS    H                       NUMBER OF BYTES TO CONVERT
MAXOUT   DC    H'120'                  MAXIMUM BYTES PER OUTPUT LINE
*
*          REGISTER EQUATES
*
R15      EQU   15                      USED TO TEST RETURN CODES
TEMP2    EQU   15                      TEMPORARY WORK REIGSTER
R14      EQU   14                      USED IN CONVERSION ROUTINE
TEMP1    EQU   14                      TEMPORARY WORK REGISTER
SKIPR    EQU   14                      RECORD SKIP COUNTER
R13      EQU   13                      PTR TO SAVE AREA
R12      EQU   12
MCBR     EQU   12                      PTR TO MEMBER NAME TABLE
R11      EQU   11
BREG1    EQU   11                      RETURN REG FOR HANDLING TITLES
CTLREG   EQU   11                      POINTER TO OUTPUT CONTROL CHAR.
INLEN    EQU   11                      CONTAINS INPUT FIELD SIZE
R10      EQU   10                      WORK REG FOR UF10 ROUTINE
BASER2   EQU   10                      MODULE EXTRA BASE REGISTER
BASER    EQU   9                       MODULE BASE REGISTER
R8       EQU   8
GCBR     EQU   8                       POINTER TO GROUP CONTROL BLOCK
CTR      EQU   8                       COUNTER FOR DIRECTORY ENTRIES
R7       EQU   7                       USED IN PREFORM ROUTINE
LISTR    EQU   7                       POINTS TO MEMBER NAMES
RLOC     EQU   7                       POINTS TO INPUT AREA
R6       EQU   6                       WORK REG IN PREFORM ROUTINE
BREG     EQU   6                       INTERNAL BAL RETURN REGISTER
HDRET    EQU   6                       INTERNAL BAL RETURN REGISTER
R5       EQU   5                       WORK REG IN PREFORM ROUTINE
MEMCT    EQU   5                       MEMBER COUNTER
TCBR     EQU   5                       POINTS TO A TITLE CONTROL BLOCK
DCBREG   EQU   5                       POINTS TO A DCB
ALIASR   EQU   5                       NUMBER OF ALIASES FOR THIS MEMB.
FCBR     EQU   5                       PTR TO FIELD CONTROL BLOCK
R4       EQU   4                       WORK REG IN PREFORM ROUTINE
LEN      EQU   4                       LENGTH OF TITLE
RLEN     EQU   4                       INPUT BLOCK LENGTH
R3       EQU   3                       USED IN PREFORM ROUTINE
FLDCT    EQU   3                       NUMBER OF FIELDS
RLIT     EQU   3                       ADDRESS OF LITERAL POOL
LISTCT   EQU   3                       MEMBER SORT COUNTER
R2       EQU   2                       WORK REG FOR PREFORM ROUTINE
ROUT     EQU   2                       POINTS TO OUTPUT AREA
OUTLOC   EQU   2                       POINTS TO OUTPUT AREA
R1       EQU   1                       WORK REGISTER
R0       EQU   0                       WORK REGISTER
*
*          CODES FOR MESSAGE WRITER
*
BLKSZMIS EQU   6
EODMSG   EQU   11
EOJUSM   EQU   12
IOMSG    EQU   13
IDMSG    EQU   14
STPMSG   EQU   15
*
PMSGWRTA DC    V(PPMSGWRT)
MNMSGA   DC    V(PPMNMSG)
DDSWITCH DC    X'00'                   ERROR FREEMAIN SWITCH
         EXTRN DDERROR1
VMSG     DC    A(DDERROR1)             ADDRESS OF MESSAGE IN IEBPPMSG -
*                                      'DDNAME --- CANNOT BE OPENED'
         EXTRN RCERROR                                             UL0H
RCMSG    DC    A(RCERROR)                                          UL0H
         EJECT
         EJECT
*
*          INPUT DCB EXIT -
*            ENTERED AT OPEN TIME AFTER
*              THE JFCB HAS BEEN USED TO SUPPLY
*                INFORMATION TO THE DCB
*
         USING IHADCB,DCBREG
DCBIN    ST    14,SYSSAVE               SAVE CTL PGM RETURN ADR    VS0H
         LA    DCBREG,INSET             LOAD BASE REG WITH DCBADR  VS0H
         TM    DCBRECFM,X'C0'     RECFM NOT U OR NOT DEF. ?      A48796
         BM    TSTRECF1           YES, SKIP DEF. ROUTINE         A48796
         OI    DCBRECFM,X'C0'     SET RECFM = U                  A48796
SETLDEF  MVC   DCBLRECL(2),DCBBLKSI SET LRECL = BLKSI            A48796
         B     TSTBLK1            BRANCH TO BLKSIZE TEST         A48796
TSTRECF1 TM    DCBRECFM,X'10'     BLOCKED RECORDS ?              A48796
         BO    TSTBLK1            YES, TEST BLKSI                A48796
         TM    DCBRECFM,X'80'     RECFM IS F                     A48796
         BO    SETLDEF            YES, SET LRECL = BLKSI         A48796
TSTBLK1  CLC   DCBBLKSI(2),=X'0000' BLKSI PRESENT ?              A48796
         BNE   TSTLREC1           YES, TEST LRECL PRESENCE       A48796
         OI    DCBBLKSI+1,X'0A'   SET BLKSI = 10                 A48796
SETDEF1  MVC   DCBLRECL(2),=X'0005' SET DEFAULT LRECL = 5        A48796
         OI    ERRDCB,X'80'       SET ERRBIT (MSG IEB412I )      A48796
         B     DCBINTST           TEST REST OF DCB VALUES        A48796
TSTLREC1 CLC   DCBLRECL(2),=X'0000' LRECL PRESENT ?              A48796
         BE    SETDEF1            NO, SET DEF. + ERR BIT         A48796
DCBINTST TM    DCBRECFM,X'48'          IS IT VRE                   VS0H
         BO    TSTDSORG                 RECFM  IS VARIABLE         VS0H
NOQSAM   MVC   KEYLEN+1(1),DCBKEYLE    SAVE KEY LENGTH FROM DCB    VS0H
         MVC   RECFM(1),DCBRECFM       SAVE RECORD FROMAT FROM DCB
         MVC   LRECL(2),DCBLRECL       SAVE LOGICAL RECORD LENGTH
         MVC   BLKLEN(2),DCBBLKSI      SAVE BLOCK SIZE
         MVI   QSBRNOP+1,X'00'                                     VS0H
DCBDIR   TM    POSTOPEN+1,X'F0'         IS DIRECTPRY BEING READ    VS0H
         BZ    DCBRET                  YES -- RETURN TO CONTROL PROGRAM
         MVI   DCBKEYLE,X'00'          NO - ALTER DCB TO READ DIRECTORY
         MVI   DCBRECFM,X'81'
         LH    R1,PH256                LOAD 256 INTO REG 1
         STH   R1,DCBBLKSI             STORE SIZE OF DIRECT. IN BLKSIZE
*                                      RETURN TO CONTROL PROGRAM
         STH   R1,DCBLRECL         STORE IN LRECL FIELD          A48732
VRERET   L     R14,SYSSAVE                                         VS0H
DCBRET   RETURN
TSTDSORG TM    TYPORG,3                                            VS0H
         BZ    TSTRECL                 NOT PDS                     VS0H
VREERR   MVC   MSGWS(4),VMSG18         ERROR- PDS SPECIFIED FOR VS 9059
         B     VRENG                                               VS0H
TSTRECL  MVI   QSBRNOP+1,X'F0'                                     VS0H
         MVI   RECFM,X'40'              SET REFCM=V IN WORK AREA   VS0H
         MVC   LRECL(2),DCBLRECL     SAV LRECL VAL.              A48796
         MVC   BLKLEN(2),DCBLRECL    SAVE BLKSI VAL.             A48796
         MVC   KEYLEN+1(1),DCBKEYLE                                VS0H
         B     PTCHONE                                             VS0H
VRQSAM   OI    AMSW,QSAM        INDICATE QSAM PROC. NEEDED     @YM04138
         B     VRERET             RETURN TO OPEN                 A48796
TSTPREFM TM    PREFORMT,X'81'                                      VS0H
         BM    VREPRFER                                            VS0H
VSKEYS   MVI   RECFM,X'C0'             SET RECFM=U IN WORK AREA    VS0H
         MVC   LRECL(2),DCBBLKSI  SAVE BLKSI VAL.                A48796
         MVC   BLKLEN(2),DCBBLKSI                                  VS0H
PHYSMSG  MVC   MSGWS(4),VMSG15         INFO- BLOCK PROCESSING      9059
         B     VRERET                                              VS0H
VREPRFER MVC   MSGWS(4),VMSG16         ERROR- PREFORM = A INVALID  9059
         B     VRENG                                               VS0H
CCTOLSTC MVC   LASTCCH,0(R1)            MOVE CC TO LASTCC          VS0H
         ST    R1,STARTIN                                          UL0H
         TM    PPSW1,1                                             VS0H
         BO    STCCTOIN                 STORE CC TO INTERCC        VS0H
         TM    PREFORMT,X'01'                                      VS0H
         BO    STPRSK                                              VS0H
         MVC   INTERCCH,=C' '                                      VS0H
         MVC   LASTCCH,=C' '                                       VS0H
PREVREWR EX    R12,MOVE                                            VS0H
         BAL   BREG,WRCH                                           VS0H
         LH    R6,PH1                                              VS0H
         SR    R12,R6                                              VS0H
         L     R2,STARTIN                                          VS0H
         AR    R2,R6                                               VS0H
         ST    R2,STARTIN                                          VS0H
NEXTPART LH    R6,SAVLRECL                                         VS0H
         CR    R12,R6                  COMPARE MAXOUT AND REST     0294
         BNL   FIX                     BRANCH IF MAXOUT NOT LESS   0506
         SR    R6,R12                  ELSE SUBTRACT ONE OUT REC   0294
FIX      SH    R6,PH1                  DECREMENT BY ONE            0506
         STH   R6,SAVLRECL             STORE REMAIDER OF IN.LRECL  VS0H
         L     R2,STARTIN              LOAD CURRENT POINTER        VS0H
         AR    R2,R12                  INCR. POINTER BY LINELENGTH VS0H
         AH    R2,PH1                                              VS0H
         ST    R2,STARTIN              STORE NEW POINTER           VS0H
         AH    R12,PH1       ADD ONE FOR TEST PURP.              A45135
         CR    R12,R6        COMP LINEL. AND REM INLRECL         A45135
         BNL   LASTOFRL      LINE LENGTH NOT LOW --BRANCH        A45135
         SH    R12,PH1       RESET R12 ON CORRECT VALUE          A45135
         MVC   PPCTL,INTERCCH          MOVE INTERM. CC TO OUTPUT   VS0H
         EX    R12,MOVEPART            MOVE DATA (OUTP.LNGTH-1)    VS0H
         BAL   BREG,WRCH               WRITE NEXT PART             VS0H
         B     NEXTPART                GET NEXT PART OF RECORD     VS0H
LASTOFRL BAL   BREG,BLANKOUT BLANK OUTPUT AREA                     VSOH
         MVC   PPCTL,LASTCCH MOVE STORED CC TO LAST OUT            VSOH
         LH    R12,SAVLRECL  MOVE LAST OF LOG. RECORD              VSOH
         CH    R12,PH2       WHEN SAVLRECL 1 OR LESS THAN        A38702
         BL    SKIPPUT       NO DATA HAS TO BE MOVED             A38702
         SH    R12,PH2       TWO SUBTR(1 FOR MVC,1 FOR ASA OR MC)  VSOH
         EX    R12,MOVEPART  MOVE IN OUTPUT BUFFER                 VSOH
         BAL   BREG,WRCH     PUT THE RECORD                        VSOH
SKIPPUT  TM    VSWITCH+1,X'F0' TEST VAR. SWITCH                  A38702
         BO    BIGONCE                                             VS0H
         TM    BLKDSWCH+1,X'F0'                                    VS0H
         BO    BIGONCE                                             VS0H
         B     RDCH                                                VS0H
STCCTOIN MVC   INTERCCH,0(R1)                                      VS0H
         B     PREVREWR                                            VS0H
STPRSK   MVC   INTERCCH,=X'09'                                     VS0H
         MVC   0(1,R1),=X'09'                                      VS0H
         B     PREVREWR                                            VS0H
SETBLKSW MVI   BLKDSWCH+1,X'F0'                                    VSOH
         B     BLKDLONG                                            VSOH
SETVSW   SR    R12,R5        RESET 12 TO LINE LENGTH               VSOH
         SH    R12,PH1                                           A38702
         SR    R1,R3                   DECR.REMAINING BLOCKLNGTH   VS0H
         STH   R1,BLCKREM    WITH CURRENT RECORD LENGTH          A38702
         SH    R3,PH4                  ADJUST RECD LNGTH FOR RDW   VS0H
         STH   R3,SAVLRECL             TO GET THE DATA LENGTH      VS0H
         L     R1,STARTIN                 SET POINTER TO           VS0H
         AH    R1,PH4                  TO FIRST DATA BYTE          VS0H
         ST    R1,STARTIN                                          VS0H
         MVI   VSWITCH+1,X'F0'                                     VS0H
         B     CCTOLSTC                                            VS0H
         DS    0F                                                  VS0H
SYSSAVE  DS    CL4                                                 VS0H
VRENG    MVI   PPHINEX,X'80'                                       VS0H
         MVI  PPTINEX,X'80'                                        VS0H
         MVI   DDDEX,X'80'    LABEL CHANGED BEC. OF AOS DSCB
         MVI   DCBEXSW,X'80'                                       VS0H
         B     VRERET                                              VS0H
OPENMSG  SR    R0,R0                                               VS0H
         SR    R1,R1                   CLEAR OUT MSG REGS          VS0H
         IC    R0,MSGWS                                            VS0H
         IC    R1,MSGWS+1                                          VS0H
         CLI   MSGWS+2,X'00'                                       VS0H
         BE    MSGONLY                                             VS0H
         MVI   DDSWITCH,X'01'                                      VS0H
         B     IOWRT                                               VS0H
         EJECT
         EJECT
*          O U T P U T    D C B
* REF A.LYONS TO MR. CAMMACK E.T. ( 1 MARCH 1971 )
*  SUBJECT: DESIGN PROBLEMS WITH RELEASE 20 AND TSO
OUTSET   DCB   DDNAME=SYSUT2,DSORG=PS,MACRF=(PM),RECFM=FBA,            C
               SYNAD=SYNADMSG,EXLST=PPEXOUT                        7715
PPIHLEX  MVI   HDTRLSW,X'F0'           SET HEADER IND.             UL0H
         CLC   USEREX+1(3),UHIN+1      CURRENT EXIT IS HEADER      UL0H
         BE    PPILEX                                              UL0H
         MVC   USEREX(4),UHIN                                      UL0H
         CLI   PROCKY,X'40'                                        UL0H
         BE    PRNTSWOF                                            UL0H
         B     PPILEX                                              UL0H
PPITLEX  MVI   HDTRLSW,X'0F'           SET TRAILER IND.            UL0H
         CLC   USEREX+1(3),UTIN+1      CIRRENT EXIT IS TRAILER EXITUL0H
         BNE   RESTLPTR                                            UL0H
         B     PPILEX                                              UL0H
PRNTSWOF MVZ   ULEXSW+1(1),=X'F0'            "          OFF-BR     UL0H
PPILEX   LH    R15,PH4                                             UL0H
         ST    R14,SYSSAVE                                         UL0H
PPILEXA  LA    R6,LABELAST                                         UL0H
         CL    R6,LBLSVPTR                                         UL0H
         BL    SETBYPSS                TOO MANY LABELS, BYPASS     UL0H
         B     TSTPBIT                 TEST FOR VOL1,EOV,IOERR     UL0H
NOLBLTST L     R7,0(R1)                                            UL0H
         LTR   R7,R7                                               UL0H
         BZ    SETNORC                                             UL0H
         L     R6,ULABIN                                           UL0H
         AH    R6,PH1                                              UL0H
         ST    R6,ULABIN                                           UL0H
         CLI   BYPLASW,X'F0'                                       UL0H
         BE    ADDBYPSD                                            UL0H
STORELBL L     R6,LBLSVPTR                                         UL0H
         MVC   0(80,R6),0(R7)           STORE LABEL                UL0H
         AH    R6,LABLINC               ADD 80 POSNS TO LBLSVPTR   UL0H
         ST    R6,LBLSVPTR                                         UL0H
TSTULSW  TM    USEREX,X'FF'                                        UL0H
         BZ    GOTOSYST                                            UL0H
         L     R5,USERTNCT                                         UL0H
         AH    R5,PH1                                              UL0H
         ST    R5,USERTNCT                                         UL0H
         L     R15,USEREX                                          UL0H
         BALR  R14,R15                                             UL0H
         B     TSTUSRC                                             UL0H
SETNORC  MVZ   NORCSW+1(1),=X'F0'                                  UL0H
         B     TSTULSW                                             UL0H
GOTOSYST L     R14,SYSSAVE             RETURN CONTROL TO SYSTEM    UL0H
         BR    R14                                                 UL0H
SETIOERR MVI   IOSW+1,X'F0'                                        UL0H
         B     NOLBLTST                                            UL0H
TSTUSRC  CH    R15,=X'0010'             TEST USER RC=16            UL0H
         BE    SETUSTRM                                            UL0H
         CH    R15,=X'0000'                                        UL0H
         BE    SETULPSF                                            UL0H
         CH    R15,=X'0004'                                        UL0H
         BE    GOTOSYST                                            UL0H
         TM    NORCSW+1,X'F0'                                      UL0H
         BO    GOTOSYST                NO RET. CODE EXPECTED       UL0H
         B     USERCERR                                            UL0H
SETUSTRM MVI   USEREX,X'00'             SET ULBLPROCSW OFF         UL0H
         MVZ   USRTRMSW,=X'F0'          SET TERMSW ON              UL0H
         B     GOTOSYST                                            UL0H
ADDBYPSD L     R5,BYPASSED                                         UL0H
         AH    R5,PH1                                              UL0H
         ST    R5,BYPASSED                                         UL0H
         B     GOTOSYST                                            UL0H
SETULPSF MVI   USEREX,X'00'             SET USER LBL PROC OFF      UL0H
         CLI   PROCKY,X'80'                                        UL0H
         BE    SETBYPSS                                            UL0H
         B     GOTOSYST                                            UL0H
SETBYPSS MVI   BYPLASW,X'F0'                                       UL0H
         B     GOTOSYST                                            UL0H
USERCERR L     R5,RCMSG                                            UL0H
         AH    R15,NUMZON              ADD HEX F0 FOR DISPLAY      UL0H
         STC   R15,19(R5)                                          UL0H
         SH    R15,NUMZON              REMOVE ZONE FOR PROCESSING  UL0H
         MVC   MSGWS,=X'151D0C00'                                  UL0H
         B     SETUSTRM                                            UL0H
CONVLBLS L     RLOC,LBLSVPTR                                       UL0H
         LA    INLEN,40                                            UL0H
         MVC   CONVSAV,CONVSW                                      UL0H
         MVC   CONVSW,LBLCONSW                                     UL0H
         BAL   BREG,FLDCONVL                                       UL0H
         BAL   BREG,WRCH                                           UL0H
         L     R5,LBLSVPTR                                         UL0H
         AH    R5,=X'0028'                                         UL0H
         ST    R5,LBLSVPTR                                         UL0H
         C     R5,PRNTLIM                                          UL0H
         BE    RELCONV                 RESTORE CONVSW FOR DATA     UL0H
         B     CONVLBLS                                            UL0H
         DS    0F                                                  UL0H
LABLINC  DC    X'0050'                                             UL0H
USRTRMSW DC    X'00'                                               UL0H
         DS    0D                                                  UL0H
LBELSAVE DS    0CL640                                              UL0H
LABEL1   DS    CL80                                                UL0H
LABELINT DS    CL480                                               UL0H
LABELAST DS    CL80                                                UL0H
LBLSVPTR DC    A(LBELSAVE)                                         UL0H
PRNTLIM  DC    X'00000000'                                         UL0H
BYPLASW  DC    X'00'                                               UL0H
ERRDCB   DC    X'00'         OPEN ERROR BIT                      A45135
         DS    0H                                                  UL0H
NUMZON   DC    X'00F0'                                             UL0H
BSAMSPEC DC    X'2400'                                             VS0H
QSAMSPEC DC    X'5000'                                         @YM04138
AMSW     DC    X'00'            QSAM OR BSAM PROC INDICATOR    @YM04138
QSAM     EQU   X'80'            QSAM PROC. NEEDED              @YM04138
HDTRLSW  DC    X'00'                                               UL0H
PAGEBYT  DC    X'00'         ZERO WHEN NO PAGE NBR TO BE WRITTEN A45134
VMSG15   DC    XL4'0F1A0000'           INFO MSG IEB415I            9059
VMSG16   DC    XL4'101B0C00'           ERROR MSG IEB416I           9059
VMSG18   DC    XL4'121C0C00'           ERROR MSG  IEB418I          9059
TEMPSAVE DC    F'0'                    SAVE BRANCH REGISTER        9305
NOPLBLPR B     CLOSEOUT                                            UL0H
VSWITCH  DC    XL2'0'                                              VS0H
BLKDSWCH DC    XL2'0'                                              VS0H
ULEXSW   DC    XL2'0'                                              UL0H
IOSW     DC    XL2'0'                                              UL0H
QSSW     DC    XL2'0'                                              VS0H
QSBRNOP  DC    XL2'0'                                              VS0H
NORCSW   DC    XL2'0'                                              UL0H
MCBRWS   DC    F'0'                                                VS0H
MSGWS    DC    XL4'0'                                              VS0H
         EJECT
*
*          DUMMY DCB DSECT
*
         DCBD  DSORG=PO
         EJECT
*
*          GET DISPLACEMENT OF DCB AREAS
*
DDNAM    EQU   DCBDDNAM-IHADCB         DDNAME FOR DCB
BLKSI    EQU   DCBBLKSI-IHADCB         BLOCK SIZE OF DATA
DSORG    EQU   DCBDSORG-IHADCB         DATA SET ORGANIZATION
RECL     EQU   DCBLRECL-IHADCB         LOGICAL RECORD LENGTH OF DATA
OFLGS    EQU   DCBOFLGS-IHADCB         OPEN FLAGS
DEVT     EQU   DCBDEVT-IHADCB          DEVICE TYPE
RECINFM  EQU   DCBRECFM-IHADCB         RECORD FORM                 VS0H
BSAMACRF EQU   DCBMACR-IHADCB                                      VS0H
*                                      BE ALTERED TO QSAM          VS0H
*                                      FOR VRE RECORDS             VS0H
*
*          DTABLE DSECT
*
DTABLE   DSECT
DDN1     DS    CL8                     SYSUT1 DDNAME - INPUT
DDN2     DS    CL8                     SYSUT2 DDNAME - OUTPUT
DEXLSTA  DS    A                       ADDRESS OF EXIT LIST
DTBLE    DS    0X                      BEGINING OF 'TABLE' AREA
DLITA    DS    A                       ADDRESS OF USER LITERAL POOL
DMNTA    DS    A                       MEMBER NAME TABLE ADDRESS
DRCB     DS    0X                      16 BYTES OF SWITCHES DESCRIBED
         DS    20X
DTCB     DS    0X                      TITLE CONTROL BLOCKS FOR TITLE
         DS    16X                     AND SUBTITLE DESCRIBED AT TCB
*
IEBPPCH1 CSECT
TSTPBIT  TM    8(R1),X'80'                                         UL0H
         BO    SETIOERR                                            UL0H
         CLI   HDTRLSW,X'0F'           TRAILER IND.                UL0H
         BE    TSTPBIT1                 YES - BRANCH               UL0H
         TM    OPENSW,X'10'            IS THIS VOL 1 HDR LABEL     UL0H
         BO    NOLBLTST                YES,RETURN TO UL PROCESS    UL0H
         B     TSTULSW                 DO NOT STORE LABEL          UL0H
TSTPBIT1 TM    4(R1),X'80'             INTERMEDIATE TRAILER        UL0H
         BO   NOLBLTST                 NO, EOF REACH.,STORE LAB. A45135
         B     TSTULSW                 DO NOT STORE THE LABEL      UL0H
LASTCCH  DS    CL1                                                 VS0H
INTERCCH DS    CL1                                                 VS0H
MSGONLY  SLL   R1,8                                                VS0H
         AR    R1,R0                                               VS0H
         MVI   PPRETCDE,X'00'                                      VS0H
         L     R15,PMSGWRTA                                        VS0H
         LA    R14,TESTOPEN                                    @ZA03383
         BR    R15                                                 VS0H
RESTLPTR MVC   LBLSVPTR,LABEL1AD                                   UL0H
         MVC   USEREX(4),UTIN                                      UL0H
         CLI   PROCKY,X'10'                                        UL0H
         BE    PRNTSWOF                                            UL0H
         B     PPILEX                                              UL0H
ONLYIHL  MVI   DDSWITCH,X'01'                                      UL0H
         MVC   INTLRPRT,NOPLBLPR                                   UL0H
         B     CLOSEIO                                             UL0H
PPEXOUT  DS    0F                      OUTPUT DCB EXIT             VS0H
DCBOUT   DC    X'85'                   WHEN SYSUT2 NOT = SYSPRINT  VS0H
         DC    AL3(SETOPBLK)                                       VS0H
         USING IHADCB,DCBREG                                       VS0H
SETOPBLK ST    R14,SYSSAVE                                         VS0H
         LA    DCBREG,OUTSET                                       VS0H
         CLC   DCBLRECL,=X'0000'  IS LRECL EQ ZERO ?             A38762
         BE    TESTBLK       YES,                                A38762
         CLC   DCBBLKSI,=X'0000'  IS BLKSI EQ ZERO ?             A38762
         BE    FILLREC            YES, TAKE LRECL AS BLKSI       A38762
         ST    DCBREG,DCBSAVE                                    A38762
         SR    R4,R4                   TEST                      A38762
         LH    R6,DCBLRECL             BLKSIZE                   A38762
         LH    R5,DCBBLKSI             MULTIPLE                  A38762
         DR    R4,R6                   OF                        A38762
         LTR   R4,R4                   LRECL                     A38762
         L     DCBREG,DCBSAVE          RELOAD DCB ADDRESS        A45135
         BZ    OUTBLKOK                YES, RETURN               A45135
         MVC   DCBBLKSI(2),DCBLRECL    MOVE LRECL IN BLKSI FLD   A38762
         B     OUTBLKOK                RETURN                    A38762
TESTBLK  CLC   DCBBLKSI,=X'0000'       IS BLKSI EQ ZERO ?        A38762
         BE    TESTPRPU                YES, TEST PRINT OR PUNCH  A38762
         MVC   DCBLRECL(2),DCBBLKSI    ELSE MOVE BLK IN LR FLD   A38762
         B     OUTBLKOK                RETURN                    A38762
FILLREC     MVC DCBBLKSI(2),DCBLRECL   MOVE LRECL IN BLKSI FLD   A38762
         B     OUTBLKOK                RETURN                    A38762
TESTPRPU TM    PPSW1,1                 PRINT COMMAND ?           A38762
         BZ    PRINTR                  YES                       A38762
         MVC   DCBBLKSI(2),EIGHTY1     SET DEF VALUE OF 81      OY01168
         MVC   DCBLRECL(2),EIGHTY1     SET DEF VALUE OF 81      OY01168
         B     OUTBLKOK           RETURN                         A38762
PRINTR   MVC   DCBBLKSI,=X'0079'  TAKE BLKSI = 121               A38762
         MVC   DCBLRECL,=X'0079'  TAKE LRECL = 121               A38762
OUTBLKOK L     R14,SYSSAVE                                         VS0H
         CLC   DCBLRECL(2),ONE45       LRECL PARAM GR THAN 145? OY01168
         BH    ERROUT                  YES, SET ERROR BIT        A45135
         CLC   DCBLRECL(2),EIGHTY1     IS LRECL LARGER THAN 81? OY01168
         BCR   11,R14                  YES, RETURN TO OPEN       A45135
         CLI   PPSW1,X'03'             SHOULD CARDS BE SEQ ?     A45135
         BE    TESTPRPU                YES, SET DEF.: LR=BLK=81  A45135
         CLC   DCBLRECL(2),PH1         LRECL EQUAL 1 ?          OY01168
         BE    ERROUT                  YES,ERR. NO PR OR PU POSS.A45135
         CLC   DCBLRECL(2),=H'11'      LRECL LESS THAN 11  ?     A45134
         BNL   *+8                     NO, SKIP PAGE BYTE        A45134
         MVI   PAGEBYT,X'F0'           YES, SET PAGE BYTE        A45134
         BR    R14                                                 VS0H
ERROUT   OI    ERRDCB,X'80'            SET LRECL PARAM ERROR BIT A45135
         BR    14                      RETURN TO OPEN            A45135
RELCONV  MVC   CONVSW,CONVSAV                                      UL0H
         B     LBLPRNTX                                            UL0H
         USING IHADCB,R8                                           VS0H
BLKDLONG LH    R4,DCBLRECL                                         VS0H
         L     R1,STARTIN                                          VS0H
PREVRBA2 STH   R4,SAVLRECL                                         VS0H
         CLI   QSBRNOP+1,X'F0'         IS IT QSAM ACCESS           VS0H
         BNE   CCTOLSTC                                            VS0H
         AH    R1,PH4                                              VS0H
         B     CCTOLSTC                                            VS0H
PREVRBA1 AH    R4,PH1                                              VS0H
         B     PREVRBA2                                            VS0H
BIGONCE  L     R2,STARTIN                  ADJUST POINTER TO       VSOH
         AH    R12,PH1                       RDW OF                VSOH
         AR    R2,R12                         NEXT                 VS0H
         ST    R2,STARTIN                     RECORD               VS0H
         LH    R12,MAXOUT                                          VS0H
         TM    BLKDSWCH+1,X'F0'                                    VS0H
         BO    THRUONCE                                            VS0H
         B     ONCE                                                VS0H
LABEL1AD DC    A(LABEL1)                                           UL0H
         LTORG         ,           ALIGN IMM OPERANDS           OY01168
*          I N P U T    D C B                                   OY01168
INSET    DCB   DDNAME=SYSUT1,DSORG=PS,MACRF=GM,EODAD=SDSEOD,    OY01168X
               EXLST=PPEXIN,SYNAD=SYNADMSG                      OY01168
         END   IEBPPCH1
