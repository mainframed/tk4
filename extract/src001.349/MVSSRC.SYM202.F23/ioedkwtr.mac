         TITLE 'IOEDKWTR - 3540 DISKETTE WRITER                        *
                        '
IOEDKWTR CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'IOEDKWTR  78.088'                                 0001
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                     0001
         BALR  @11,0                                               0001
@PSTART  LA    @12,4095(,@11)                                      0001
         USING @PSTART,@11                                         0001
         USING @PSTART+4095,@12                                    0001
         ST    @13,@SA00001+4                                      0001
         LA    @14,@SA00001                                        0001
         ST    @14,8(,@13)                                         0001
         LR    @13,@14                                             0001
JSCBDISP EQU 188
JSCBAOS1 EQU  72
JSCBAOS2 EQU 192
*                                      TO OUTPUT DCB         @Y30OE73*/
*   EPARMPTR=PARMSADR;              /* INIT EXEC PARMS PTR   @Y30OE73*/
         SLR   EPARMPTR,EPARMPTR                                   0166
         ICM   EPARMPTR,7,PARMSADR(PARMPTR)                        0166
*   GEN(   EXTRACT  ANSWERA,FIELDS=(TIOT,COMM)  );/*         @Y30OE73
*                                      GET ADDR OF TIOT      @Y30OE73
*                                      AND COMM LIST         @Y30OE73*/
            EXTRACT  ANSWERA,FIELDS=(TIOT,COMM)
*   DCBAMOUT=ON;                    /* SET FLAG IN DCB FOR   @Y30OE73
*                                      DISKETTE OUTPUT       @Y30OE73*/
         L     @14,OUTDCBPT                                        0168
         OI    DCBAMOUT+16(@14),B'00000001'                        0168
*   WTOCODE=WTOTYP;                 /* SET TYPE OF WRITE     @Y30OE73
*                                      TO WPERATOR IN MSG    @Y30OE73
*                                      LIST TO WTO           @Y30OE73*/
         MVI   WTOCODE,X'01'                                       0169
*/*                                                          @Y30OE73*/
*/*  ******************************************************* @Y30OE73*/
*/*                                                          @Y30OE73*/
*/*        MAKE  SURE JCL FOR IEBDKWTR SPECIFIES AN IEFRDER  @Y30OE73*/
*/*        DD STATEMENT AND A 3540 DEVICE                    @Y30OE73*/
*/*                                                          @Y30OE73*/
*/*  ******************************************************  @Y30OE73*/
*/*                                                          @Y30OE73*/
*                                                                  0170
*DO1:                                                              0170
*   DO WHILE TIOEDDNM^=IEFRDDDN&    /* LOOP THROUGH TIOT     @Y30OE73*/
*         TIOELNGH^=ENDOTIOT;       /* LOOKING FOR IEFRDER   @Y30OE73
*                                      DD STATEMENT OR END   @Y30OE73
*                                      OF TIOT               @Y30OE73*/
DO1      B     @DE00170                                            0170
@DL00170 DS    0H                                                  0171
*     TIOTPTR=TIOTPTR+TIOELNGH;     /* UPDATE TIOTPTR TO     @Y30OE73
*                                      NEXT DD ENTRY         @Y30OE73*/
         L     @14,TIOTPTR                                         0171
         SLR   @10,@10                                             0171
         IC    @10,TIOELNGH(,@14)                                  0171
         ALR   @10,@14                                             0171
         ST    @10,TIOTPTR                                         0171
*   END;                            /* END DO1               @Y30OE73*/
@DE00170 L     @14,TIOTPTR                                         0172
         CLC   TIOEDDNM(8,@14),IEFRDDDN                            0172
         BE    @DC00170                                            0172
         CLI   TIOELNGH(@14),0                                     0172
         BNE   @DL00170                                            0172
@DC00170 DS    0H                                                  0173
*   IF TIOEDDNM^=IEFRDDDN THEN      /* IEFRDER DDN FOUND     @Y30OE73
*                                      NO                    @Y30OE73*/
         L     @14,TIOTPTR                                         0173
         CLC   TIOEDDNM(8,@14),IEFRDDDN                            0173
         BE    @RF00173                                            0173
*     WTRCODE=INVALDDN;             /* SET WTR RTN CODE      @Y30OE73
*                                      INVALID DDNAME        @Y30OE73*/
         MVI   WTRCODE,X'1C'                                       0174
*   ELSE                            /* DO DEVICE CHECK       @Y30OE73*/
*     DO;                           /*                       @Y30OE73*/
         B     @RC00173                                            0175
@RF00173 DS    0H                                                  0176
*       UCBPTR=TIOEFSRT;            /* GET UCB ADDR FROM TIOT      0176
*                                                            @Z30OE73*/
         L     @14,TIOTPTR                                         0176
         SLR   @10,@10                                             0176
         ICM   @10,7,TIOEFSRT(@14)                                 0176
         ST    @10,UCBPTR                                          0176
*       IF UCB3UREC^=ON×            /* TEST UCB FOR UNIT     @Y30OE73*/
*           UCBTBYT4^=ERICDEV       /* RECORD AND 3540       @Y30OE73*/
*         THEN                      /* YES                   @Y30OE73*/
         TM    UCB3UREC(@10),B'00001000'                           0177
         BNO   @RT00177                                            0177
         CLI   UCBTBYT4(@10),X'44'                                 0177
         BE    @RF00177                                            0177
@RT00177 DS    0H                                                  0178
*         WTRCODE=INVALDEV;         /* SET INVALID DEVICE    @Y30OE73*/
         MVI   WTRCODE,X'20'                                       0178
*     END;                          /* END DEVICE CHECK      @Y30OE73*/
@RF00177 DS    0H                                                  0180
*   IF WTRCODE=INVALDDN×            /* FOR INVALID DDNAME    @Y30OE73*/
*       WTRCODE=INVALDEV THEN       /* OR INVALID DEVICE     @Y30OE73*/
@RC00173 CLI   WTRCODE,28                                          0180
         BE    @RT00180                                            0180
         CLI   WTRCODE,32                                          0180
         BNE   @RF00180                                            0180
@RT00180 DS    0H                                                  0181
*     DO;                           /* YES ISSUE MESSAGE     @Y30OE73*/
*/*                                                          @Y30OE73*/
*/*  ******************************************************  @Y30OE73*/
*/*                                                          @Y30OE73*/
*/*       FOR NO IEFRDER DD  STMT OR NOT A 3540 ISSUE        @Y30OE73*/
*/*       MESSAGE  IEB574I                                   @Y30OE73*/
*/*                                                          @Y30OE73*/
*/*  ******************************************************  @Y30OE73*/
*/*                                                          @Y30OE73*/
*                                                                  0182
*       MSGID=MSG574I;              /* SET MSG CODE FOR      @Y30OE73
*                                      MSG IEB574I           @Y30OE73*/
         MVI   MSGID,X'17'                                         0182
*       FIRSTPM=ENDMSGLT;           /* SET FOR NO MSG LIST   @Y30OE73
*                                      OF KEYS TO BE FILLED  @Y30OE73*/
         MVC   FIRSTPM(2),ENDMSGLT                                 0183
*       REG1=ADDR(MSGWTLST);        /* SET PTR TO LIST       @Y30OE73*/
         LA    REG1,MSGWTLST                                       0184
*       CALL IOEDKMSG;              /* WRITE MESSGAE         @Y30OE73*/
         L     @15,@CV03341                                        0185
         BALR  @14,@15                                             0185
*     END;                          /*                       @Y30OE73*/
*   ELSE                            /* NO DEVICE OR DDN ERR  @Z30OE73*/
*     DO;                           /* SET UP ESTAE EXIT     @Z30OE73*/
         B     @RC00180                                            0187
@RF00180 DS    0H                                                  0188
*       STAEUCB1=UCBPTR;            /* SET UCB ADDR IN PARM  @Z30OE73
*                                      LIST                  @Z30OE73*/
         MVC   STAEUCB1(4),UCBPTR                                  0188
*       STAEEXTA=ADDR(IOEESTAE);    /* SET PTR TO            @Z30OE73
*                                      ESTAE ROUTINE         @Z30OE73*/
         L     STAEEXTA,@CA03342                                   0189
*       GENERATE;                                                  0190
*                                   /* CALL ESTAE MACRO     @Z30OE73*/
         ESTAE (STAEEXTA),PARAM=STAELIST,ASYNCH=NO,TERM=YES   @Z30OE73
*     END;                          /* END ESTAE             @Z30OE73*/
*                                                                  0192
*/*                                                          @Y30OE73*/
*/*  ******************************************************* @Y30OE73*/
*/*                                                          @Y30OE73*/
*/*       PROCESS DISKETTE WRITER PARMS - THESE CAN BE       @Y30OE73*/
*/*       SPECIFIED ON EXEC STMT OR IN THE START CMD         @Y30OE73*/
*/*       - PARM (FOURTH POSITIONAL PARAMETER IN THE START   @Y30OE73*/
*/*         COMMAND) OVERRIDES THE SYSOUT CLASSES SPECIFIED  @Y30OE73*/
*/*         IN PARM= KEYWORD OF THE EXEC STATEMENT           @Y30OE73*/
*/*                                                          @Y30OE73*/
*/*  ******************************************************* @Y30OE73*/
*/*                                                          @Y30OE73*/
*/*       FIND SYSOUT CLASSES TO PROCESS                     @Y30OE73*/
*/*                                                          @Y30OE73*/
*                                                                  0192
*   IF WTRCODE=NOERROR              /* NO ERROR CONDITION    @Y30OE73*/
*     THEN                          /* YES                   @Y30OE73*/
@RC00180 CLI   WTRCODE,0                                           0192
         BNE   @RF00192                                            0192
*     DO;                           /* PROCESS WTR PARMS     @Y30OE73*/
*       IF CIBPTR^=ZERO             /* CMD INPUT BUFFER      @Y30OE73*/
*         THEN                      /* AVAILABLE             @Y30OE73*/
         SLR   @14,@14                                             0194
         L     @10,COMMLSTA                                        0194
         L     @10,CIBPTR(,@10)                                    0194
         CR    @10,@14                                             0194
         BE    @RF00194                                            0194
*         IF CIBDATLN^=ZERO         /* PARM SPECIFIED IN     @Y30OE73*/
*           THEN                    /* START COMMAND- YES    @Y30OE73*/
         LH    @10,CIBDATLN(,@10)                                  0195
         CR    @10,@14                                             0195
         BE    @RF00195                                            0195
*           DO;                     /* PROC START CMD PARM   @Y30OE73*/
*             IF CIBDATLN<=MAXNSOCL /* START CMD PARM        @Y30OE73
*                                      LENGTH OK             @Y30OE73*/
*               THEN                /* YES                   @Y30OE73*/
         SLR   @14,@14                                             0197
         ICM   @14,3,MAXNSOCL                                      0197
         CR    @10,@14                                             0197
         BH    @RF00197                                            0197
*               DO;                 /*                       @Y30OE73*/
*                 REG2=ZERO;        /* CLEAR REG 2 FOR TEST  @Y30OE73*/
         SLR   REG2,REG2                                           0199
*                 TRT(CIBDATA(BEGIN:CIBDATLN),TRANSTAB);/*   @Z30OE73
*                                      TEST FOR VALID SYSOUT @Y30OE73
*                                      CLASS IN START COMMAND      0200
*                                                            @Y30OE73*/
         L     @14,COMMLSTA                                        0200
         L     @14,CIBPTR(,@14)                                    0200
         L     @10,COMMLSTA                                        0200
         L     @10,CIBPTR(,@10)                                    0200
         LH    @10,CIBDATLN(,@10)                                  0200
         BCTR  @10,0                                               0200
         EX    @10,@SB03436                                        0200
*                 IF REG2=ZERO      /* ALL CLASSES OK        @Y30OE73*/
*                   THEN            /* YES                   @Y30OE73*/
         LTR   REG2,REG2                                           0201
         BNZ   @RF00201                                            0201
*                   WTRCLASS=CIBDATA(BEGIN:CIBDATLN);/*      @Y30OE73
*                                      MOVE SYSOUT CLASS     @Y30OE73
*                                      INTO WORK AREA TO     @Y30OE73
*                                      PROCESS               @Y30OE73*/
         MVI   WTRCLASS+1,C' '                                     0202
         MVC   WTRCLASS+2(6),WTRCLASS+1                            0202
         L     @14,COMMLSTA                                        0202
         L     @14,CIBPTR(,@14)                                    0202
         LH    @10,CIBDATLN(,@14)                                  0202
         BCTR  @10,0                                               0202
         EX    @10,@SM03438                                        0202
*                 ELSE              /* INVALID SYSOUT CLASS  @Y30OE73*/
*                   WTRCODE=ERRWTRPM;/* SET WTR RTN C        @Y30OE73*/
         B     @RC00201                                            0203
@RF00201 MVI   WTRCODE,X'18'                                       0203
*               END;                /* END OF ST CMD CLS PR  @Y30OE73*/
*             ELSE                  /* NO BAD LENGTH         @Y30OE73*/
*               WTRCODE=ERRWTRPM;   /* SET ERROR CODE        @Y30OE73
*                                      FOR INVALID PARM      @Y30OE73*/
         B     @RC00197                                            0205
@RF00197 MVI   WTRCODE,X'18'                                       0205
*           END;                    /*                       @Y30OE73*/
@RC00197 DS    0H                                                  0207
*       IF WTRCODE=NOERROR          /* NO ERROR YET          @Y30OE73*/
*         THEN                      /* YES                   @Y30OE73*/
@RF00195 DS    0H                                                  0207
@RF00194 CLI   WTRCODE,0                                           0207
         BNE   @RF00207                                            0207
*         IF EPARLEN>ZERO           /* PARMS SPEC ON EXEC    @Y30OE73*/
*           THEN                    /* STATEMENT - YES       @Y30OE73*/
         CLC   EPARLEN(2,EPARMPTR),@CH00082                        0208
         BNH   @RF00208                                            0208
*           DO;                     /* EXEC PARMS PROCESS    @Y30OE73*/
*             PROCSOCL=ON;          /* SET FLAG FOR PROCESS  @Z30OE73
*                                      ING SYSOUT CLASSES    @Z30OE73
*                                      LOOP CONTROL          @Z30OE73*/
         OI    PROCSOCL,B'00010000'                                0210
*             NUMSOC=ZERO;          /* CLEAR COUNTER FOR     @ZA00794
*                                      SYSOUT CLASSES        @ZA00794*/
         SLR   NUMSOC,NUMSOC                                       0211
*             DO INDX=BEGIN TO EPARLEN/* PROCESS SYSOUT      @Y30OE73*/
*                   WHILE PROCSOCL=ON;/* CLS FROM EXEC       @Y30OE73
*                                      STMT PARM= KEYWORD    @Y30OE73*/
         LA    @14,1                                               0212
         B     @DE00212                                            0212
@DL00212 TM    PROCSOCL,B'00010000'                                0212
         BNO   @DC00212                                            0212
*               IF EPARMS(INDX)=COMMA×/* CK FOR END OF       @Y30OE73*/
*                   INDX=EPARLEN    /* SYSOUT CLASSES        @Y30OE73*/
*                 THEN              /* YES                   @Y30OE73*/
         ALR   @14,EPARMPTR                                        0213
         CLI   EPARMS-1(@14),C','                                  0213
         BE    @RT00213                                            0213
         CLC   INDX(2),EPARLEN(EPARMPTR)                           0213
         BNE   @RF00213                                            0213
@RT00213 DS    0H                                                  0214
*                 DO;               /* PROCESS SOUT CLASSES  @Y30OE73
*                                      FROM EX STMT AFTER    @Y30OE73
*                                      LAST ONE IS FOUND     @Y30OE73*/
*                   IF CLASS(ONE)=BLANK/* CLASSES            @Y30OE73
*                                      NEEDED FROM EXEC ST   @Y30OE73*/
*                     THEN          /* YES                   @Y30OE73*/
         CLI   CLASS,C' '                                          0215
         BNE   @RF00215                                            0215
*                     DO;           /* EX STMT SOUT TO BE    @Y30OE73
*                                      USED BY WRITER        @Y30OE73*/
*                       IF EPARMS(INDX)=COMMA/* MORE         @Y30OE73
*                                      THAN 1 PARM ON EXEC   @Y30OE73*/
*                         THEN      /* YES                   @Y30OE73*/
         SLR   @14,@14                                             0217
         ICM   @14,3,INDX                                          0217
         ALR   @14,EPARMPTR                                        0217
         CLI   EPARMS-1(@14),C','                                  0217
         BNE   @RF00217                                            0217
*                         NUMSOC=INDX-ONE;/* BACK INDEX      @Y30OE73
*                                      UP TO LAST CLASS      @Y30OE73*/
         SLR   @14,@14                                             0218
         ICM   @14,3,INDX                                          0218
         BCTR  @14,0                                               0218
         LR    NUMSOC,@14                                          0218
*                       ELSE        /* ONLY SYSOUT CLASS     @Y30OE73*/
*                         NUMSOC=INDX;/* SET NUMB OF         @Y30OE73
*                                      SYSOUT CLASSES        @Y30OE73*/
         B     @RC00217                                            0219
@RF00217 SLR   NUMSOC,NUMSOC                                       0219
         ICM   NUMSOC,3,INDX                                       0219
*                       IF NUMSOC<=MAXNSOCL THEN/* CK FOR TOO      0220
*                                                            @Y30OE73
*                                      MANY SYSOUT CLASSES   @Y30OE73
*                                      NO CONTINUE PROCESS   @Y30OE73*/
@RC00217 SLR   @14,@14                                             0220
         ICM   @14,3,MAXNSOCL                                      0220
         CLR   NUMSOC,@14                                          0220
         BH    @RF00220                                            0220
*                         IF NUMSOC^=ZERO THEN/* TEST IF SOUT      0221
*                                                            @Y30OE73
*                                      CLASSES TO MOVE       @Y30OE73*/
         LTR   NUMSOC,NUMSOC                                       0221
         BZ    @RF00221                                            0221
*                           DO;     /* YES DO MOVE           @Y30OE73*/
*                             REG2=ZERO;/* CLR REG TO TEST TRT     0223
*                                                            @Y30OE73*/
         SLR   REG2,REG2                                           0223
*                             TRT(EPARMS(BEGIN:NUMSOC),TRANSTAB);/*
*                                                            @Z30OE73
*                                      TEST FOR VALID SYSOUT @Y30OE73
*                                      CLASSES IN EXEC STMT  @Y30OE73*/
         LR    @14,NUMSOC                                          0224
         BCTR  @14,0                                               0224
         EX    @14,@SB03441                                        0224
*                             IF REG2=ZERO/* TEST COMPLETION @Y30OE73*/
*                               THEN/* OF TRT OK - YES       @Y30OE73*/
         LTR   REG2,REG2                                           0225
         BNZ   @RF00225                                            0225
*                               WTRCLASS=EPARMS(BEGIN:NUMSOC);/*   0226
*                                                            @Y30OE73
*                                      MOVE SYSOUT CLASSES   @Y30OE73
*                                      TO BE PROCESSED BY    @Y30OE73
*                                      WRITER INTO WORK AREA @Y30OE73*/
         MVI   WTRCLASS+1,C' '                                     0226
         MVC   WTRCLASS+2(6),WTRCLASS+1                            0226
         LR    @14,NUMSOC                                          0226
         BCTR  @14,0                                               0226
         EX    @14,@SM03443                                        0226
*                             ELSE  /* BAD SOUT CLASSES      @Y30OE73*/
*                               WTRCODE=ERRWTRPM;/* ERROR    @Y30OE73
*                                      MOVE SYSOUT CLASSES   @Y30OE73
*                                      TO WTR WORK AREA      @Y30OE73*/
         B     @RC00225                                            0227
@RF00225 MVI   WTRCODE,X'18'                                       0227
*                           END;    /* END MOVE              @Y30OE73*/
*                         ELSE      /* NO SOUT CLASS TO MOVE @Y30OE73*/
*                           WTRCODE=ERRWTRPM;/* SET WTR RTN CODE   0229
*                                                            @Y30OE73*/
         B     @RC00221                                            0229
@RF00221 MVI   WTRCODE,X'18'                                       0229
*                       ELSE        /* TOO MANY SOUT CLASSES @Y30OE73*/
*                         WTRCODE=ERRWTRPM;/* SET RTNCODE FOR WTR  0230
*                                                            @Y30OE73
*                                      PARM ERROR            @Y30OE73*/
         B     @RC00220                                            0230
@RF00220 MVI   WTRCODE,X'18'                                       0230
*                     END;          /* END OF USE EX STMT    @Y30OE73
*                                      CLASSES               @Y30OE73*/
@RC00220 DS    0H                                                  0232
*                   PROCSOCL=OFF;   /* TURN OFF SO PROC      @Y30OE73*/
@RF00215 NI    PROCSOCL,B'11101111'                                0232
*                 END;              /* END PROCESS           @Y30OE73
*                                      OF SYSOUT FROM EX STMT      0233
*                                                            @Y30OE73*/
*               ELSE                /* NOT END OF SO CLASES  @Y30OE73*/
*                 IF INDX>MAXNSOCL  /* TOO MANY SO           @Y30OE73
*                                      CLASSES               @Y30OE73*/
*                   THEN            /* YES - ERROR           @Y30OE73*/
         B     @RC00213                                            0234
@RF00213 CLC   INDX(2),MAXNSOCL                                    0234
         BNH   @RF00234                                            0234
*                   DO;             /*                       @Y30OE73*/
*                     WTRCODE=ERRWTRPM;/* SET RTN            @Y30OE73
*                                      FOR INVALID PARMS     @Y30OE73*/
         MVI   WTRCODE,X'18'                                       0236
*                     PROCSOCL=OFF; /* STOP PROCESS          @Y30OE73
*                                      SYSOUT CLASSES FLG    @Y30OE73*/
         NI    PROCSOCL,B'11101111'                                0237
*                   END;            /*                       @Y30OE73*/
*             END;                  /* END LOOP -SOCLS       @Y30OE73*/
@RF00234 DS    0H                                                  0239
@RC00213 LA    @14,1                                               0239
         SLR   @10,@10                                             0239
         ICM   @10,3,INDX                                          0239
         ALR   @14,@10                                             0239
@DE00212 STH   @14,INDX                                            0239
         SLR   @10,@10                                             0239
         ICM   @10,3,EPARLEN(EPARMPTR)                             0239
         CR    @14,@10                                             0239
         BNH   @DL00212                                            0239
@DC00212 DS    0H                                                  0240
*             IF NUMSOC<EPARLEN THEN/* IS MULTI DATA         @Y30OE73
*                                      SET MODEOR SECURITY   @Y30OE73
*                                      SPECIFIED IN          @Y30OE73
*                                      EXEC STMT PARM FIELD  @Y30OE73*/
         SLR   @14,@14                                             0240
         ICM   @14,3,EPARLEN(EPARMPTR)                             0240
         CLR   NUMSOC,@14                                          0240
         BNL   @RF00240                                            0240
*               INDX=INDX-ONE;      /* BACK INDX UP          @Y30OE73
*                                      TO BEGIN OF NXT       @Y30OE73
*                                      PARM ENTRY            @Y30OE73*/
         SLR   @14,@14                                             0241
         ICM   @14,3,INDX                                          0241
         BCTR  @14,0                                               0241
         STH   @14,INDX                                            0241
*             IF WTRCODE=NOERROR&   /* TEST IF MULTI         @Y30OE73*/
*                 EPARMS(INDX)=COMMA&/* DATA SET PARM        @Y30OE73*/
*                 INDX<EPARLEN      /*                       @Y30OE73*/
*               THEN                /* TO BE PROC - YES      @Y30OE73*/
@RF00240 CLI   WTRCODE,0                                           0242
         BNE   @RF00242                                            0242
         SLR   @14,@14                                             0242
         ICM   @14,3,INDX                                          0242
         ALR   @14,EPARMPTR                                        0242
         CLI   EPARMS-1(@14),C','                                  0242
         BNE   @RF00242                                            0242
         CLC   INDX(2),EPARLEN(EPARMPTR)                           0242
         BNL   @RF00242                                            0242
*               DO;                 /* SET DATA SET MODE     @Y30OE73*/
*                 INDX=INDX+ONE;    /* BUMP INDEX TO NEXT    @Y30OE73
*                                      POSITION OF PARMS     @Y30OE73*/
         SLR   @14,@14                                             0244
         ICM   @14,3,INDX                                          0244
         LA    @14,1(,@14)                                         0244
         STH   @14,INDX                                            0244
*                 IF EPARMS(INDX)^=COMMA/* IS MULT DS        @Y30OE73*/
*                   THEN            /* NOT SPEC - NO         @Y30OE73*/
         ALR   @14,EPARMPTR                                        0245
         CLI   EPARMS-1(@14),C','                                  0245
         BE    @RF00245                                            0245
*                   DO;             /*                       @Y30OE73*/
*/*                                                          @Y30OE73*/
*/*        PROCESS MULTI  DATA SET MODE PARAMETER            @Y30OE73*/
*/*                                                          @Y30OE73*/
*/*       MUST BE S ONE DATA SET MODE OR M MULTI DATA SET    @Z30OE73*/
*/*       MODE OR NOT SPECIFIED                              @Z30OE73*/
*                                                                  0247
*                     IF EPARMS(INDX)=MULTDSI/* IS           @Y30OE73
*                                      PARM MULTI DS PER     @Y30OE73*/
*                       THEN        /* DISKETTE MODE-YES     @Y30OE73*/
         SLR   @14,@14                                             0247
         ICM   @14,3,INDX                                          0247
         ALR   @14,EPARMPTR                                        0247
         CLI   EPARMS-1(@14),C'M'                                  0247
         BNE   @RF00247                                            0247
*                       MULTIDSM=ON;/* SET FLG ON            @Y30OE73*/
         OI    MULTIDSM,B'10000000'                                0248
*                     ELSE          /* NO                    @Z30OE73*/
*                       IF EPARMS(INDX)^=SINGLEDS THEN/*     @Z30OE73
*                                      MODE MUST BE S TO BE  @Z30OE73
*                                      VALID                 @Z30OE73*/
         B     @RC00247                                            0249
@RF00247 SLR   @14,@14                                             0249
         ICM   @14,3,INDX                                          0249
         ALR   @14,EPARMPTR                                        0249
         CLI   EPARMS-1(@14),C'S'                                  0249
         BE    @RF00249                                            0249
*                         WTRCODE=ERRWTRPM;/* SET RTN CDE    @Z30OE73
*                                      ERROR IN WTR PARM     @Z30OE73
*                                      WAS NOT S             @Z30OE73*/
         MVI   WTRCODE,X'18'                                       0250
*                     INDX=INDX+ONE;/* BUMP PARM INDX        @Y30OE73*/
@RF00249 DS    0H                                                  0251
@RC00247 SLR   @14,@14                                             0251
         ICM   @14,3,INDX                                          0251
         LA    @14,1(,@14)                                         0251
         STH   @14,INDX                                            0251
*                     IF EPARMS(INDX)^=COMMA&/* TEST         @Y30OE73*/
*                         INDX<EPARLEN THEN/* PARM LST       @Y30OE73
*                                      STILL VALID NO        @Y30OE73*/
         ALR   @14,EPARMPTR                                        0252
         CLI   EPARMS-1(@14),C','                                  0252
         BE    @RF00252                                            0252
         CLC   INDX(2),EPARLEN(EPARMPTR)                           0252
         BNL   @RF00252                                            0252
*                       WTRCODE=ERRWTRPM;/* SET RTN          @Y30OE73
*                                      CODE FOR WRITER       @Y30OE73*/
         MVI   WTRCODE,X'18'                                       0253
*                   END;            /*                       @Y30OE73*/
*                 ELSE                                             0255
*                   ;               /* NO MULT DS PARM       @Y30OE73*/
@RF00245 DS    0H                                                  0256
*               END;                /* END DS MODE           @Y30OE73*/
@RC00245 DS    0H                                                  0257
*             IF WTRCODE=NOERROR&   /* IS SECURITY PARM      @Y30OE73*/
*                 EPARMS(INDX)=COMMA&/* SPECIFIED AND TO     @Y30OE73*/
*                 INDX<EPARLEN      /* BE PROCESSED          @Y30OE73*/
*               THEN                /* YES                   @Y30OE73*/
@RF00242 CLI   WTRCODE,0                                           0257
         BNE   @RF00257                                            0257
         SLR   @14,@14                                             0257
         ICM   @14,3,INDX                                          0257
         ALR   @14,EPARMPTR                                        0257
         CLI   EPARMS-1(@14),C','                                  0257
         BNE   @RF00257                                            0257
         CLC   INDX(2),EPARLEN(EPARMPTR)                           0257
         BNL   @RF00257                                            0257
*/*                                                          @Y30OE73*/
*/*        PROCESS EXTENDED SECURITY PARAMETER               @Y30OE73*/
*/*                                                          @Y30OE73*/
*/*       MUST BE S FOR  EXTENDED SECURITY                   @Z30OE73*/
*                                                                  0258
*               DO;                 /* DO SECURITY PARM      @Y30OE73*/
*                 INDX=INDX+ONE;    /* BUMP TO SECURITY      @Y30OE73
*                                      PARM                  @Y30OE73*/
         SLR   @14,@14                                             0259
         ICM   @14,3,INDX                                          0259
         LA    @14,1(,@14)                                         0259
         STH   @14,INDX                                            0259
*                 IF INDX=EPARLEN   /* PARMS STILL           @Y30OE73
*                                      VALID                 @Y30OE73*/
*                   THEN            /* YES                   @Y30OE73*/
         CLC   INDX(2),EPARLEN(EPARMPTR)                           0260
         BNE   @RF00260                                            0260
*                   IF EPARMS(INDX)=EXSECURI/* IS            @Y30OE73*/
*                     THEN          /* EXTENDED SECURITY     @Y30OE73
*                                      SPECIFIED _ YES       @Y30OE73*/
         ALR   @14,EPARMPTR                                        0261
         CLI   EPARMS-1(@14),C'S'                                  0261
         BNE   @RF00261                                            0261
*                     EXSECMDE=ON;  /* SET INDICATOR ON      @Y30OE73*/
         OI    EXSECMDE,B'01000000'                                0262
*                   ELSE            /* NO EX SECURITY        @Z30OE73*/
*                     WTRCODE=ERRWTRPM;/* INVALID            @Z30OE73
*                                      EXTENDED SECURITY     @Z30OE73*/
         B     @RC00261                                            0263
@RF00261 MVI   WTRCODE,X'18'                                       0263
*                 ELSE              /* PARMS ERROR           @Y30OE73*/
*                   WTRCODE=ERRWTRPM;/* SET CODE             @Y30OE73*/
         B     @RC00260                                            0264
@RF00260 MVI   WTRCODE,X'18'                                       0264
*               END;                /* END SECURITY PARM     @Y30OE73*/
*           END;                    /* END EXEC PARMS PROC   @Y30OE73*/
*         ELSE                      /* NO EXEX PARMS         @Y30OE73*/
*           IF CLASS(ONE)=BLANK&    /* NO CLS                @Y30OE73*/
*               EPARLEN=ZERO        /* NO EXEC PARMS         @Y30OE73*/
*             THEN                  /* YES                   @Y30OE73*/
         B     @RC00208                                            0267
@RF00208 CLI   CLASS,C' '                                          0267
         BNE   @RF00267                                            0267
         ICM   @14,3,EPARLEN(EPARMPTR)                             0267
         BNZ   @RF00267                                            0267
*             WTRCODE=ERRWTRPM;     /* SET RETURN CD         @Y30OE73*/
         MVI   WTRCODE,X'18'                                       0268
*     END;                          /* END OF ALL WTR PARMS  @Y30OE73
*                                      PROCESSING            @Y30OE73*/
@RF00267 DS    0H                                                  0269
@RC00208 DS    0H                                                  0269
@RF00207 DS    0H                                                  0270
*   IF WTRCODE=ERRWTRPM             /* ERROR IN WTR PARMS    @Y30OE73*/
*     THEN                          /* YES - ISSUE MSG       @Y30OE73*/
@RF00192 CLI   WTRCODE,24                                          0270
         BNE   @RF00270                                            0270
*/*                                                          @Y30OE73*/
*/*        ISSUE MESSAGE FOR INVALID WRITER PARAMETERS       @Y30OE73*/
*/*        MESSAGE  IEB579I                                  @Y30OE73*/
*/*                                                          @Y30OE73*/
*                                                                  0271
*     DO;                           /*                       @Y30OE73*/
*       MSGID=MSG579I;              /* SET COD FOE MSG       @Y30OE73
*                                      IEB579E               @Y30OE73*/
         MVI   MSGID,X'1C'                                         0272
*       FIRSTPM=ENDMSGLT;           /* SET FOR SHORT LIST    @Y30OE73*/
         MVC   FIRSTPM(2),ENDMSGLT                                 0273
*       REG1=ADDR(MSGWTLST);        /* SET PTR TO MSG LIST   @Y30OE73
*                                      FOR MESSAGE WRTITE    @Y30OE73*/
         LA    REG1,MSGWTLST                                       0274
*       CALL IOEDKMSG;              /* WRITE MESSAGE         @Y30OE73*/
         L     @15,@CV03341                                        0275
         BALR  @14,@15                                             0275
*     END;                          /* END PROCESS WTR PARMS @Y30OE73*/
*                                   /* WRITER PARMS CODE     @Z30OE73*/
*   IF WTRCODE=NOERROR              /* CHECK ON ERROR BEFORE @Y30OE73
*                                      OPENING 3540          @Y30OE73*/
*     THEN                          /* NOERROR YES           @Y30OE73*/
@RF00270 CLI   WTRCODE,0                                           0277
         BNE   @RF00277                                            0277
*CKER3:                                                            0278
*     DO;                           /* CONTINUE ON TO WRITE  @Y30OE73
*                                      DATA SETS ON DISKETTE @Y30OE73*/
CKER3    DS    0H                                                  0279
*/*  ******************************************************  @Y30OE73*/
*/*         OPEN 3540 DEVICE FOR EXCP                        @Y30OE73*/
*/*         BUILD 3540 IOB'S AND AM WORK AREA                @Y30OE73*/
*/*                                                          @Y30OE73*/
*/*  ******************************************************* @Y30OE73*/
*/*                                                          @Y30OE73*/
*                                                                  0279
*       GEN(     OPEN  (OUTDCB,(OUTPUT))  );/*               @Y30OE73*/
              OPEN  (OUTDCB,(OUTPUT))
*/*                                                          @Y30OE73*/
*                                                                  0280
*       RESPECIFY                                                  0280
*         IHADCB BASED(OUTDCBPT);   /* PROCESSING            @Y30OE73
*                                      OUTPUT DCB            @Y30OE73*/
*       IF DCBOFOPN=ON              /* OPEN FOR EXEP OK      @Y30OE73*/
*         THEN                      /* YES                   @Y30OE73*/
         L     @14,OUTDCBPT                                        0281
         TM    DCBOFOPN+40(@14),B'00010000'                        0281
         BNO   @RF00281                                            0281
*         DO;                       /*                       @Y30OE73*/
*           REG1=ADDR(OUTDCB);      /* SET PTR TO OUTPUT DCB @Y30OE73
*                                      FOR DISKETTE OPEN     @Y30OE73*/
         LA    REG1,OUTDCB                                         0283
*           CALL IOEDKOPN;          /* CALL 3540 OPEN        @Y30OE73
*                                      DEVICE ROUTINE        @Y30OE73*/
         L     @15,@CV03339                                        0284
         BALR  @14,@15                                             0284
*           OPN3540F=ON;            /* INDICATE DISKETTE     @Y30OE73
*                                      OPEN OK               @Y30OE73*/
         OI    OPN3540F,B'00100000'                                0285
*           AMWAPTR=DCBAMWKA;       /* INITALIZED PTR TO     @Y30OE73
*                                      ACCESS METHOD W A     @Y30OE73*/
         L     @14,OUTDCBPT                                        0286
         SLR   @10,@10                                             0286
         ICM   @10,7,DCBAMWKA+16(@14)                              0286
         ST    @10,AMWAPTR                                         0286
*           RPLAREA=ADDR(RECORD);   /* INIT PTR TO DATA FOR  @Y30OE73
*                                      3540 AM               @Y30OE73*/
         LA    @14,RECORD                                          0287
         ST    @14,RPLAREA(,@10)                                   0287
*           EXLSYNP=ADDR(OUTERRRT); /* SET ADDR OF SYNAD     @Y30OE73
*                                      IN AM WORKAREA        @Y30OE73*/
         LA    @14,OUTERRRT                                        0288
         ST    @14,EXLSYNP(,@10)                                   0288
*           EXLEODP=ADDR(PROCEOD);  /* SET ADDR OF END OF    @Y30OE73
*                                      DISKETTE RTN IN AM WA @Y30OE73*/
         LA    @14,PROCEOD                                         0289
         ST    @14,EXLEODP(,@10)                                   0289
*           IF EXSECMDE=ON          /* IS IT EXTENDED SECURTY      0290
*                                                            @Y30OE73*/
*             THEN                  /* YES                   @Y30OE73*/
         TM    EXSECMDE,B'01000000'                                0290
         BNO   @RF00290                                            0290
*             ACBSECUR=ON;          /* INDICATE EXTENDED     @Y30OE73
*                                      SECURITY TO 3540 AM   @Y30OE73*/
         OI    ACBSECUR(@10),B'01000000'                           0291
*         END;                      /*                       @Y30OE73*/
*       ELSE                        /* UNABLE TO OPEN FOR    @Y30OE73
*                                      EXCP                  @Y30OE73*/
*/*                                                          @Y30OE73*/
*/*  ******************************************************* @Y30OE73*/
*/*                                                          @Y30OE73*/
*/*        ISSUE MESSAGE FOR UNABLE TO OPEN  3540            @Y30OE73*/
*/*        IEB580I                                           @Y30OE73*/
*/*                                                          @Y30OE73*/
*/*  ******************************************************* @Y30OE73*/
*/*                                                          @Y30OE73*/
*                                                                  0293
*         DO;                       /*                       @Y30OE73*/
         B     @RC00281                                            0293
@RF00281 DS    0H                                                  0294
*           WTRCODE=OPENERR;        /* SET RTN CODE          @Y30OE73
*                                      SET UP FOR WTO MSG    @Y30OE73*/
         MVI   WTRCODE,X'24'                                       0294
*           MSGID=MSG580I;          /* SET MSG INDEX FOR     @Y30OE73
*                                      OPEN ERROR            @Y30OE73*/
         MVI   MSGID,X'1D'                                         0295
*           DCBADDR=OUTDCBPT;       /* SET ADDR OF ASSOC     @Y30OE73
*                                      DCB                   @Y30OE73*/
         MVC   DCBADDR(4),OUTDCBPT                                 0296
*           REG1=ADDR(MSGWTLST);    /* SET PTR TO MSG WTR    @Y30OE73
*                                      PARAM LIST            @Y30OE73*/
         LA    REG1,MSGWTLST                                       0297
*           CALL IOEDKMSG;          /* WRITE MESSAGE         @Y30OE73*/
         L     @15,@CV03341                                        0298
         BALR  @14,@15                                             0298
*         END;                      /* END OPEN ERR PROCESS  @Y30OE73*/
*                                                                  0300
*/*                                                          @ZA04482*/
*/*      TEST FOR WHAT SUBSYSTEM IS ACTIVE MUST BE EITHER    @ZA04482*/
*/*      JES2 OR JES3. IF NOT ISSUE ERROR MSG AND SET        @ZA04482*/
*/*      RETURN CODE FOR UNSUPPORTED SUBSYSTEM..             @ZA04482*/
*/*                                                          @ZA04482*/
*                                                                  0300
*       IF WTRCODE=NOERROR          /* TEST IF NEED TO CK    @ZA04482*/
*         THEN                      /* SUBSYSTEM             @ZA04482*/
@RC00281 CLI   WTRCODE,0                                           0300
         BNE   @RF00300                                            0300
*         DO;                       /* YES DO CHECK          @ZA04482*/
*           IF SSVTFNUM>=FUNCNUM THEN/* IS IT JES3           @ZA29643*/
         L     @14,CVTPTR                                          0302
         L     @14,CVTJESCT(,@14)                                  0302
         L     @14,JESSSCT(,@14)                                   0302
         L     @14,SSCTSSVT(,@14)                                  0302
         CLC   SSVTFNUM(2,@14),FUNCNUM                             0302
         BL    @RF00302                                            0302
*             SSIDCODE=JES3SS;      /* SET CODE FOR JES3     @ZA29643*/
         MVI   SSIDCODE,X'08'                                      0303
*           ELSE                    /* FOR NOW ASSUME JES2   @ZA29643*/
*             SSIDCODE=JES2SS;      /* IS ONLY OTHER SUBSYS  @ZA29643*/
         B     @RC00302                                            0304
@RF00302 MVI   SSIDCODE,X'04'                                      0304
*         END;                      /* SUBSYS CHECK          @ZA04482
*                                      OPEN 3540 DEVICE      @Z30OE73*/
@RC00302 DS    0H                                                  0306
*       IF WTRCODE=NOERROR          /* STILL NO ERROR        @Y30OE73*/
*         THEN                      /* YES                   @Y30OE73*/
@RF00300 CLI   WTRCODE,0                                           0306
         BNE   @RF00306                                            0306
*/*                                                          @Y30OE73*/
*/*  ******************************************************* @Y30OE73*/
*/*                                                          @Y30OE73*/
*/*      BUILD AND INITIALIZE THE SSOB FOR SUBSYSTEM REQ     @Y30OE73*/
*/*      THE S99RB,TEXT POINTERS AND TEXT UNITS TO DYNAMIC   @Y30OE73*/
*/*      ALLOCATION                                          @Y30OE73*/
*/*      - SSOB IS MAPPED BY THE IEFJSSOB                    @Y30OE73*/
*/*      - S99RB IS MAPPED BY IEFZB4D0 AND THE TEXT UNIT     @Y30OE73*/
*/*        KEYS ARE MAPPED BY IEFZB4D2                       @Y30OE73*/
*/*                                                          @Y30OE73*/
*/*  ******************************************************* @Y30OE73*/
*/*                                                          @Y30OE73*/
*/*  *** INITIALIZE SSOB                                     @Y30OE73*/
*/*                                                          @Y30OE73*/
*                                                                  0307
*         DO;                       /*                       @Y30OE73*/
*           SSREQLST=ADDR(SSOB);    /* INIT SUBSYSTEM        @Y30OE73*/
         LA    @14,SSOB                                            0308
         ST    @14,SSREQLST                                        0308
*           SSREQEND=ON;            /* SET END OF LIST       @Y30OE73*/
         OI    SSREQEND,B'10000000'                                0309
*           SSOBPTR=ADDR(SSOB);     /* INIT SSOB PTR         @Y30OE73*/
         LR    SSOBPTR,@14                                         0310
*           SSOBID=SSOBCHAR;        /* SET SSOB EYE CATCHER  @Y30OE73*/
         MVC   SSOBID(4),SSOBCHAR                                  0311
*           SSOBLEN=LENGTH(SSOB);   /* SET LENGTH OF SSOB    @Y30OE73*/
         MVC   SSOBLEN(2),@CH00168                                 0312
*           SSOBFUNC=SSOBSOUT;      /* SET SSOB FUNCTION TO  @Y30OE73
*                                      PROCESS SYSOUT        @Y30OE73*/
         MVC   SSOBFUNC(2),@CH00070                                0313
*           SSOBINDV=ADDR(SSSO);    /* SET ADDR OF SYSOUT    @Y30OE73*/
         LA    @14,SSSO                                            0314
         ST    @14,SSOBINDV                                        0314
*           SSOBSSIB=SSOBSSIB&&SSOBSSIB;/* CLEAR SSIB PTR    @Y30OE73
*                                      SO WILL USE LIFE OF   @Y30OE73
*                                      JOB SSIB              @Y30OE73
*                                      DEPENDENT AREA IN     @Y30OE73
*                                      SSOB FOR SELECTION    @Y30OE73
*                                      OF DATA SETS          @Y30OE73
*                                      FLAGS                 @Y30OE73*/
         L     @14,SSOBSSIB                                        0315
         LR    @10,@14                                             0315
         XR    @10,@14                                             0315
         ST    @10,SSOBSSIB                                        0315
*/*                                                          @Y30OE73*/
*/*  *** INITIALIZE SSSO                                     @Y30OE73*/
*/*                                                          @Y30OE73*/
*                                                                  0316
*           SSSO=SSSO&&SSSO;        /* CLEAR SSSO - SYSOUT   @Y30OE73
*                                      DEPENDENT AREA        @Y30OE73*/
         XC    SSSO(120),SSSO                                      0316
*           SSSOLEN=LENGTH(SSSO);   /* SET LENGTH OF SSSO    @Y30OE73*/
         MVC   SSSOLEN(2),@CH03427                                 0317
*           IF SSIDCODE=JES2SS      /* IS SUBSYSTEM JES2     @ZA04482*/
*             THEN                  /* YES                   @ZA04482*/
         CLI   SSIDCODE,X'04'                                      0318
         BNE   @RF00318                                            0318
*             SSSOSHLD=ON;          /* INCLUDE HELD DATASETS @Y30OE73*/
         OI    SSSOSHLD,B'10000000'                                0319
*           SSSOSCLS=ON;            /* USE SYSOUT CLASS      @Y30OE73*/
@RF00318 DS    0H                                                  0321
*           SSSOSPGM=ON;            /* USE USER WRITER PROG  @Y30OE73
*                                      NAME                  @Y30OE73*/
         OI    SSSOSCLS,B'01000100'                                0321
*           SSSOPGMN=WTRNAME;       /* SET IEBDKWTR AS WTR   @Y30OE73
*                                      NAME                  @Y30OE73*/
         MVC   SSSOPGMN(8),WTRNAME                                 0322
*           SSSOCLAS=BLANK;         /* CLEAR DEST CLASS      @Y30OE73*/
         MVI   SSSOCLAS,C' '                                       0323
*           SSSOCLSL=BLANK;         /* INIT SYSOUT CLASS TO  @Y30OE73
*                                      BLANKS X'40'          @Y30OE73*/
         MVI   SSSOCLSL+1,C' '                                     0324
         MVC   SSSOCLSL+2(6),SSSOCLSL+1                            0324
         MVI   SSSOCLSL,C' '                                       0324
*           IF SSIDCODE=JES2SS THEN /* INIT ADDR OF COM AREA @ZA04482
*                                      FOR JES2 AND NOT JES3 @ZA04482*/
         CLI   SSIDCODE,X'04'                                      0325
         BNE   @RF00325                                            0325
*             SSSOWTRC=ADDR(DKWTRCMA);/* SET SSSO ADDR TO WTR      0326
*                                                            @Z30OE73
*                                      COMMUNICATION AREA    @Z30OE73*/
         LA    @14,DKWTRCMA                                        0326
         ST    @14,SSSOWTRC                                        0326
*/*                                                          @Z30OE73*/
*/*       INITIALIZE S99RB AND TEXT UNITS                    @Z30OE73*/
*/*                                                          @Z30OE73*/
*                                                                  0327
*           S99RBPTR=ADDR(S99RB);   /* INIT PTR TO S99RB     @Y30OE73*/
@RF00325 LA    @14,S99RB                                           0327
         ST    @14,S99RBPTR                                        0327
*           S99RBPND=ON;            /* TURN LAST PTR         @Y30OE73
*                                      INDICATOR ON          @Y30OE73*/
         OI    S99RBPND,B'10000000'                                0328
*           S99RBLN=LENGTH(S99RB);  /* SET LENGTH OF RB      @Y30OE73
*                                                            @Y30OE73
*                                      ALLOC TEXT UNITS      @Y30OE73
*                                                            @Y30OE73*/
         MVI   S99RBLN,X'14'                                       0329
*           DSNKEY=DALDSNAM;        /* DSN TEST UNIT KEY     @Y30OE73*/
         MVC   DSNKEY(2),@CB00616                                  0330
*           DSNLENTH=ZERO;          /* SET DSN LEN TO ZERO   @Y30OE73
*                                                            @Y30OE73*/
         SLR   @14,@14                                             0331
         STH   @14,DSNLENTH                                        0331
*           SSRKEY=DALSSREQ;        /* SUBSYSTEM REQUEST     @Y30OE73
*                                      KEY                   @Y30OE73*/
         MVC   SSRKEY(2),@CB00794                                  0332
*           SSRNAME=SSIBSSNM;       /* MOVE SUBSYS NAME INTO @Y30OE73*/
         L     @14,SSIBPTR                                         0333
         MVC   SSRNAME(4),SSIBSSNM(@14)                            0333
*           RDDNKEY=DALRTDDN;       /* RTN DDNAME KEY        @ZA04482
*                                      TEXT UNIT             @ZA04482*/
         MVC   RDDNKEY(2),@CB00780                                 0334
*           DDNKEY=DUNDDNAM;        /* INIT UNALLOC TEST     @Y30OE73
*                                      UNIT KEY TO DDNAME    @Y30OE73*/
         MVC   DDNKEY(2),@CB00080                                  0335
*           DISPKEY=DUNOVDSP;       /* TEST UNIT FOR OVER-   @Y30OE73
*                                      RIDING DISP           @Y30OE73*/
         MVC   DISPKEY(2),@CB00621                                 0336
*/*                                                          @Z30OE73*/
*/*       THE REMAINING FIELDS OF THE SSOB,SSSO,S99RB AND    @Z30OE73*/
*/*       TEXTUNITS ARE INITIALIZED JUST BEFORE USE          @Z30OE73*/
*/*                                                          @Z30OE73*/
*                                                                  0337
*         END;                      /* END BUILE AND INIT    @Y30OE73*/
*       IF WTRCODE=NOERROR THEN     /* NO ERROR SO CONTINUE  @Z30OE73*/
@RF00306 CLI   WTRCODE,0                                           0338
         BNE   @RF00338                                            0338
*         IF MULTIDSM=OFF THEN      /* IS WTR IN ONE DATA    #Y30OE73
*                                      SET PER DISKETTE      #Y30OE73
*                                      MODE                  #Y30OE73*/
         TM    MULTIDSM,B'10000000'                                0339
         BNZ   @RF00339                                            0339
*           DO;                     /* PROCESS IN 1 DS MODE  #Y30OE73*/
*/*                                                          #Y30OE73*/
*/*  ******************************************************  #Y30OE73*/
*/*                                                          #Y30OE73*/
*/*      DISKETTE WRITER IS PROCESSING IN ONE DATA SET PER   @Y30OE73*/
*/*      DISKETTE MODE.  DATA SETS ARE REQUESTED FROM A      @Y30OE73*/
*/*      SUBSYSEM ,DYNAMICALLY ALLOCATED AND OPENED FOR      @Y30OE73*/
*/*      QSAM TO BE WRITTEN ON SCRATCH DISKETTES             @Y30OE73*/
*/*      BEGINNING ON TRK 1 SECTOR 1                         @Y30OE73*/
*/*                                                          @Y30OE73*/
*/*  ******************************************************* @Y30OE73*/
*/*                                                          @Y30OE73*/
*                                                                  0341
*             RESPECIFY                                            0341
*               IHADCB BASED(OUTDCBPT);/* NEED ADR TO        @Y30OE73
*                                      OUTPUT DCB            @Y30OE73*/
*             ACBFEED=ON;           /* INDICATE TO 3540 AM   @Y30OE73
*                                      TO FEED AFTER EACH    @Y30OE73
*                                      DATA SET              @Y30OE73*/
         L     @14,AMWAPTR                                         0342
         OI    ACBFEED(@14),B'10000000'                            0342
*             WRTDSFLG=ON;          /* SET WRITE DATA SETS   @Y30OE73
*                                      FLAG ON               @Y30OE73*/
         OI    WRTDSFLG,B'00100000'                                0343
*             SSSOCLSL=CLASS(BEGIN);/* MOVE FIRST SYSOUT     @Y30OE73
*                                      CLASS TO BE PROCESSED @Y30OE73
*                                      INTO SSOB             @Y30OE73*/
         MVI   SSSOCLSL+1,C' '                                     0344
         MVC   SSSOCLSL+2(6),SSSOCLSL+1                            0344
         MVC   SSSOCLSL(1),CLASS                                   0344
*             NXTCLASI=BEGIN+ONE;   /* BUMP CLASS INDX TO NXT      0345
*                                                            @Y30OE73
*                                      SYSOUT CLASS POSITION @Y30OE73*/
         LA    NXTCLASI,2                                          0345
*ONEDSLP:                                                          0346
*             DO WHILE WRTDSFLG=ON; /* DO WHILE THERE        @Y30OE73
*                                      ARE DATA SETS TO WRT  @Y30OE73*/
ONEDSLP  B     @DE00346                                            0346
@DL00346 DS    0H                                                  0347
*/*                                                          @Z30OE73*/
*/*                                 MUST ISSUE MODESET TO    @Z30OE73*/
*/*                                 GET  IN SUPIVISOR STATE  @Z30OE73*/
*/*                                 FOR SUBSYSTEM REQUEST    @Z30OE73*/
*/*                                                          @Z30OE73*/
*                                                                  0347
*               GEN(   MODESET  MODE=SUP  );/* GET IN SUP    #Y30OE73
*                                      STATE FOR PROCESS SY  #Y30OE73
*                                      SYSOUT INTERFACE      #Y30OE73*/
            MODESET  MODE=SUP
*               REG1=ADDR(SSREQLST);/* SET PTR TO SSOB PTR   #Y30OE73
*                                      SUBSYSTEM             #Y30OE73
*                                      REQUEST SUB SYSTEM    #Y30OE73
*                                      DATA SET              #Y30OE73*/
         LA    REG1,SSREQLST                                       0348
*               GEN(      IEFSSREQ      );/* MACRO TO GENERATE     0349
*                                                            #Y30OE73
*                                      LINKAGE TO SUBSYSTEM  #Y30OE73*/
               IEFSSREQ
*               REG2=RTNCDREG;      /* SAVE RTN CODE         #Y30OE73*/
         LR    REG2,RTNCDREG                                       0350
*               GEN(   MODESET  MODE=PROB  );/* RETURN TO PROB     0351
*                                                            #Y30OE73
*                                      STATE                 #Y30OE73*/
            MODESET  MODE=PROB
*               RTNCDREG=REG2;      /* RESTORE RETURN CODE   #Y30OE73*/
         LR    RTNCDREG,REG2                                       0352
*               IF RTNCDREG=SSRTOK  /* SUBSYSTEM INTERFACE   #Y30OE73*/
*                 THEN              /* OK - YES              #Y30OE73*/
         SLR   @14,@14                                             0353
         CR    RTNCDREG,@14                                        0353
         BNE   @RF00353                                            0353
*                 IF SSOBRETN=SSSORTOK/* SUBSYSTEM REQUEST OK      0354
*                                                            #Y30OE73*/
*                   THEN            /* YES                   #Y30OE73*/
         C     @14,SSOBRETN                                        0354
         BNE   @RF00354                                            0354
*                   DO;             /*                       #Y30OE73*/
*                     SAVSSIRC=ZERO;/* RESET SAVAREA FOR     @Z30OE73
*                                      SUB SYS INTERFACE RTN @Z30OE73
*                                      CODES                 @Z30OE73*/
         ST    @14,SAVSSIRC                                        0356
*                     SAVESSRC=ZERO;/* CLEAR SUSSYS RTN CD   #Y30OE73*/
         ST    @14,SAVESSRC                                        0357
*                     CALL ALLOPNDS;/* ALLOCATE AND OPEN     #Y30OE73*/
         BAL   @14,ALLOPNDS                                        0358
*                     IF WTRCODE=NOERROR/* ALLOC AND OPEN OK @Z30OE73*/
*                       THEN        /* YES                   #Y30OE73*/
         CLI   WTRCODE,0                                           0359
         BNE   @RF00359                                            0359
*                       CALL WRITEDS;/* WRITE DATA SET       #Y30OE73*/
         BAL   @14,WRITEDS                                         0360
*                     CALL CLSUNALC;/* CLOSE AND UN ALLOCATE #Y30OE73
*                                      DATA SET              #Y30OE73*/
@RF00359 BAL   @14,CLSUNALC                                        0361
*                   END;            /*                       #Y30OE73*/
*                 ELSE              /* HAD AN ERROR          #Y30OE73*/
*                   CALL PROCSSRC;  /* PROCESS SUSBYSTEM     #Y30OE73
*                                      RETURN CODE           #Y30OE73*/
         B     @RC00354                                            0363
@RF00354 BAL   @14,PROCSSRC                                        0363
*               ELSE                /* SUSSYS INTERFACE ERR  #Y30OE73*/
*                 CALL SSIERRRT;    /* CALL SUB S INTERFACE  #Y30OE73
*                                      ERROR ROUTINE         #Y30OE73*/
         B     @RC00353                                            0364
@RF00353 BAL   @14,SSIERRRT                                        0364
*                                                                  0365
*/*                                                          #Y30OE73*/
*/*  ******************************************************* #Y30OE73*/
*/*                                                          #Y30OE73*/
*/*      PROCESS RTN CODES - EITHER TO PROCESS NEXT DATA     #Y30OE73*/
*/*      SET OR FOR WRITER TERMINATION WHEN PROCESSING       #Y30OE73*/
*/*      IN ONE DATA SET PER DISKETTE MODE                   #Y30OE73*/
*/*                                                          #Y30OE73*/
*/*  ******************************************************  #Y30OE73*/
*/*                                                          #Y30OE73*/
*                                                                  0365
*               IF WTRCODE=SSRERROR THEN/* TEST FOR          #Y30OE73
*                                      SUBSYSTEM REQUEST ERR #Y30OE73
*                                      YES                   #Y30OE73
*                                      SEE IF WAS DS NOT     @Z30OE73
*                                      FOUND AND THERE IS A  #Y30OE73
*                                      CLASS TO PROCESS      #Y30OE73*/
@RC00353 CLI   WTRCODE,4                                           0365
         BNE   @RF00365                                            0365
*                 IF SSOBRETN=SSSOEODS THEN/* WAS IT         #Y30OE73
*                                      NO MORE DATA SETS TO  #Y30OE73
*                                      SELECT FOR CURRENT    #Y30OE73
*                                      OUTPUT CLASS          #Y30OE73*/
         CLC   SSOBRETN(4),@CF00067                                0366
         BNE   @RF00366                                            0366
*                   DO;             /* YES SEE IF MORE       #Y30OE73*/
*                     WTRCODE=NOERROR;/* CLEAR WTRCODE       #Y30OE73
*                                      NOERROR OCCURED       #Y30OE73*/
         MVI   WTRCODE,X'00'                                       0368
*                     IF SSSODSN(1:1)=NULL THEN/* WAS LAST   #Y30OE73
*                                      REQUEST TO SUB SYS A  #Y30OE73
*                                      PRIMARY REQ           #Y30OE73
*                                      YES ARE THERE MORE    #Y30OE73
*                                      CLASSES TO PROCESS    #Y30OE73*/
         CLC   SSSODSN(1),NULL                                     0369
         BNE   @RF00369                                            0369
*                       IF CLASS(NXTCLASI)^=BLANK&/* ARE     #Y30OE73*/
*                           NXTCLASI<=MAXNSOCL THEN/* THERE  #Y30OE73
*                                      MORE                  #Y30OE73
*                                      SYSOUT CLASSES TO     #Y30OE73
*                                      PROCESS               #Y30OE73*/
         LA    @14,CLASS-1(NXTCLASI)                               0370
         CLI   0(@14),C' '                                         0370
         BE    @RF00370                                            0370
         SLR   @14,@14                                             0370
         ICM   @14,3,MAXNSOCL                                      0370
         CLR   NXTCLASI,@14                                        0370
         BH    @RF00370                                            0370
*                         DO;       /* YES                   #Y30OE73*/
*                           SSSOCLSL=CLASS(NXTCLASI);/*      #Y30OE73
*                                      UP DATE SYSOUT CLASS  #Y30OE73
*                                      TO PROCESS            #Y30OE73*/
         MVI   SSSOCLSL+1,C' '                                     0372
         MVC   SSSOCLSL+2(6),SSSOCLSL+1                            0372
         LA    @14,CLASS-1(NXTCLASI)                               0372
         MVC   SSSOCLSL(1),0(@14)                                  0372
*                           NXTCLASI=NXTCLASI+ONE;/* BUMP    #Y30OE73
*                                      INDEX TO CLASSES TO   #Y30OE73
*                                      PROCESS               #Y30OE73*/
         LA    NXTCLASI,1(,NXTCLASI)                               0373
*                         END;      /*                       #Y30OE73*/
*                       ELSE        /* NO MORE CLASSES       #Y30OE73*/
*                         WRTDSFLG=OFF;/* TURN OFF FLG       #Y30OE73
*                                      THAT CONTROLS LOOP TO #Y30OE73
*                                      KEEP WRITING DATA SETS      0375
*                                                            #Y30OE73*/
         B     @RC00370                                            0375
@RF00370 NI    WRTDSFLG,B'11011111'                                0375
*                     ELSE          /* LAST REQ WAS A SECND  #Y30OE73
*                                      SSREQ SO MAKE NEXT    #Y30OE73
*                                      SSREQ A PRIMARY REQ   #Y30OE73*/
*                       SSSODSN=SSSODSN&&SSSODSN;/* CLR      #Y30OE73
*                                      DSN FIELD IN SSSO     #Y30OE73*/
         B     @RC00369                                            0376
@RF00369 XC    SSSODSN(44),SSSODSN                                 0376
*                   END;            /* END OF SEE IF MORE    #Y30OE73*/
*                 ELSE              /* SSRERROR NOT FOR      #Y30OE73
*                                      NO MORE DATA          #Y30OE73*/
*                   WRTDSFLG=OFF;   /* TURN WRITE DATA SET   #Y30OE73
*                                      OFF FOR SSR ERRORS -  #Y30OE73
*                                      JOB NOT FOUND, INVALID INVALID
*                                      SEARCH ARG'S          #Y30OE73
*                                      UNABLE TO PROCESS     #Y30OE73
*                                      DUPLICATE JOBNAMES,   #Y30OE73
*                                      INVALID JOBN OF JOBID #Y30OE73
*                                      INVALID DEST          #Y30OE73*/
         B     @RC00366                                            0378
@RF00366 NI    WRTDSFLG,B'11011111'                                0378
*               IF WTRCODE=NOERROR& /* TEST IF NEED TO RESET #Y30OE73*/
*                   WRTDSFLG=ON THEN/* FOR ANOTHER DATA      #Y30OE73
*                                      SET                   #Y30OE73*/
@RC00366 DS    0H                                                  0379
@RF00365 CLI   WTRCODE,0                                           0379
         BNE   @RF00379                                            0379
         TM    WRTDSFLG,B'00100000'                                0379
         BNO   @RF00379                                            0379
*                 DO;               /* YES RESET SSSO AND    #Y30OE73*/
*                   SSOBRETN=ZERO;  /* CLEAR RTN CODE        #Y30OE73*/
         SLR   @14,@14                                             0381
         ST    @14,SSOBRETN                                        0381
*                   SSSODSID=SSSODSID&&SSSODSID;/* CLEAR     #Y30OE73
*                                      DSID FIELD            #Y30OE73*/
         XC    SSSODSID(8),SSSODSID                                0382
*                   SSOBSSIB=ZERO;  /* CLEAR SSIB PTR        #Y30OE73*/
         ST    @14,SSOBSSIB                                        0383
*                   FIRSTIOE=OFF;   /* OUTPUT ERR BIT OFF    #Y30OE73*/
*                   INPIOE=OFF;     /* OFF INPUT I/O ER      #Y30OE73*/
         NI    FIRSTIOE,B'11111100'                                0385
*                   NORETRY=OFF;    /* RESET NO RETRY BIT    #Y30OE73*/
*                   OVERFCTR=OFF;   /* RESTE OVER FLOW IND   #Y30OE73*/
         NI    NORETRY,B'00111111'                                 0387
*                 END;              /* END RESET             #Y30OE73*/
*               ELSE                                               0389
*                 ;                 /* NO MORE DATA TO WRITE #Y30OE73
*                                      OR AN BAD ERROR       #Y30OE73*/
@RF00379 DS    0H                                                  0390
*             END ONEDSLP;          /* END OF DATA SET       #Y30OE73
*                                      PROCESSING LOOP FOR   #Y30OE73
*                                      ONE DS MODE           #Y30OE73*/
@DE00346 TM    WRTDSFLG,B'00100000'                                0390
         BO    @DL00346                                            0390
*           END;                    /* END PROCESS 1 DS MDE  @Y30OE73*/
*         ELSE                      /* NOT IN ONE DATA SET   @Y30OE73
*                                      MODE SO MUST BE       @Y30OE73
*                                      MULTI DATA SET PER    @Y30OE73
*                                      DISKETTE MODE         @Y30OE73*/
*           DO;                     /* PROCESS IN MULTI DS M @Y30OE73*/
         B     @RC00339                                            0392
@RF00339 DS    0H                                                  0393
*/*                                                          #Y30OE73*/
*/*  ******************************************************* #Y30OE73*/
*/*                                                          #Y30OE73*/
*/*      DISKETTE WRITER IS PROCESSING IN MULTIPLE DATA SETS #Y30OE73*/
*/*      PER DISKETTES MODE. DATA SETS REQUESTED FROM THE    #Y30OE73*/
*/*      SUBSYSTEM ARE DYNAMICALLY ALLOCATED AND OPENED FOR  #Y30OE73*/
*/*      QSAM TO BE WRITTEN ON SCRATCH DISKETTES.  ALL DATA  #Y30OE73*/
*/*      SETS FROM THE SAME JOB WHICH HAVE THE SAME OUTPUT   #Y30OE73*/
*/*      CLASS WILL BE WRITTEN STARTING ON A SCRATCH DISKET- #Y30OE73*/
*/*      TE BEGINING WITH TRK 1 SECTOR 1 AND EACH DATA SET   #Y30OE73*/
*/*      WILL START ON A TRACK BOUNDARY                      #Y30OE73*/
*/*                                                          #Y30OE73*/
*/*      INPUT:                                              #Y30OE73*/
*/*        -WRITER WORK AREA                                 #Y30OE73*/
*/*        -SSOB,SSSO,INPUT DCB OUTPUT DCB                   #Y30OE73*/
*/*      OUTPUT:                                             #Y30OE73*/
*/*        -DATASETS WRITTEN OR RTN CODE                     #Y30OE73*/
*/*                                                          #Y30OE73*/
*/*  ******************************************************  #Y30OE73*/
*/*                                                          #Y30OE73*/
*                                                                  0393
*             RESPECIFY                                            0393
*               IHADCB BASED(OUTDCBPT);/* CAUSE DCB          #Y30OE73
*                                      LABELS TO REFERENCE   #Y30OE73
*                                      3504 DCB              #Y30OE73*/
*             SSSOCLSL=CLASS(BEGIN);/* MOVE IN FIRST CLASS   #Y30OE73
*                                      FOR WTR TO PROCESS    #Y30OE73*/
         MVI   SSSOCLSL+1,C' '                                     0394
         MVC   SSSOCLSL+2(6),SSSOCLSL+1                            0394
         MVC   SSSOCLSL(1),CLASS                                   0394
*             NXTCLASI=BEGIN+ONE;   /* BUMP CLASS INDEX TO   #Y30OE73
*                                      NEXT CLASS TO PROCESS #Y30OE73*/
         LA    NXTCLASI,2                                          0395
*             NCLSORJB=ON;          /* SET FLG SO FIRST DATA #Y30OE73
*                                      STARTS ON SCRATCH     #Y30OE73*/
         OI    NCLSORJB,B'00001000'                                0396
*             WRTDSFLG=ON;          /* SET FLG TO WRITE DATA #Y30OE73
*                                      SETS ON DISKETTES     #Y30OE73*/
         OI    WRTDSFLG,B'00100000'                                0397
*             JOBNSAVE=BLANK;       /* CLEAR JOB NAME SAVE   #Y30OE73*/
         MVI   JOBNSAVE+1,C' '                                     0398
         MVC   JOBNSAVE+2(6),JOBNSAVE+1                            0398
         MVI   JOBNSAVE,C' '                                       0398
*             JOBISAVE=BLANK;       /* CLEAR JOB ID SAVE     #Y30OE73*/
         MVI   JOBISAVE+1,C' '                                     0399
         MVC   JOBISAVE+2(6),JOBISAVE+1                            0399
         MVI   JOBISAVE,C' '                                       0399
*MLTDSLP:                           /*                       #Y30OE73*/
*             DO WHILE WRTDSFLG=ON; /* LOOP TO WRITE DATA    #Y30OE73
*                                      UNTIL ALL ARE WRITEN  #Y30OE73
*                                      OR A SEVERE ERROR     #Y30OE73*/
MLTDSLP  B     @DE00400                                            0400
@DL00400 DS    0H                                                  0401
*/*                                                          @Z30OE73*/
*/*                                 MUST ISSUE MODESET TO    @Z30OE73*/
*/*                                 GET INTO SUPIVISOR STATE @Z30OE73*/
*/*                                 FOR SUBSYSTEM REQUEST    @Z30OE73*/
*/*                                                          @Z30OE73*/
*                                                                  0401
*               GEN(   MODESET  MODE=SUP    );/* SET TO SUP  #Y30OE73
*                                      STATE                 #Y30OE73*/
            MODESET  MODE=SUP
*               REG1=ADDR(SSREQLST);/* SET PTR TO SSOB PTR   #Y30OE73
*                                      LIST FOR SUBSYS REQ   #Y30OE73*/
         LA    REG1,SSREQLST                                       0402
*               GEN(   IEFSSREQ   );/* REQUEST SUBSYS DATA   #Y30OE73
*                                      SET TO BE PROCESSED   #Y30OE73
*                                      BY DISKETTE WRITER    #Y30OE73*/
            IEFSSREQ
*               REG2=RTNCDREG;      /* SAVE RETURN CODE      #Y30OE73*/
         LR    REG2,RTNCDREG                                       0404
*               GEN(   MODESET  MODE=PROB   );/* RTN TO PROB ST    0405
*                                                            #Y30OE73*/
            MODESET  MODE=PROB
*               RTNCDREG=REG2;      /* RESET RTN CD REG      #Y30OE73*/
         LR    RTNCDREG,REG2                                       0406
*               IF RTNCDREG=SSRTOK THEN/* DID REQUEST GET THRU     0407
*                                                            #Y30OE73
*                                      SUBSYS INTERFACE OK   #Y30OE73
*                                      YES                   #Y30OE73*/
         SLR   @14,@14                                             0407
         CR    RTNCDREG,@14                                        0407
         BNE   @RF00407                                            0407
*                 IF SSOBRETN=SSSORTOK THEN/* WAS SUBSYS REQ #Y30OE73
*                                      FOR DATA SET SUCCESS- #Y30OE73
*                                      FUL                   #Y30OE73*/
         C     @14,SSOBRETN                                        0408
         BNE   @RF00408                                            0408
*                   DO;             /* YES DO GOT DATA SET   #Y30OE73*/
*                     IF SSSOJOBN=JOBNSAVE&/* CK IF DATA SET FOR   0410
*                                                            #Y30OE73*/
*                         SSSOJOBI=JOBISAVE&/* SAME JOB AND FROM   0410
*                                                            #Y30OE73*/
*                         NCLSORJB=OFF THEN/* SAME CLASS     #Y30OE73
*                                      YES                   #Y30OE73*/
         CLC   SSSOJOBN(8),JOBNSAVE                                0410
         BNE   @RF00410                                            0410
         CLC   SSSOJOBI(8),JOBISAVE                                0410
         BNE   @RF00410                                            0410
         TM    NCLSORJB,B'00001000'                                0410
         BNZ   @RF00410                                            0410
*                       ACBFEED=OFF;/* TRUN ACBFEED OFF SO   #Y30OE73
*                                      DATA SETS ARE WRITTEN #Y30OE73
*                                      ON SAME DISKETTE      #Y30OE73*/
         L     @14,AMWAPTR                                         0411
         NI    ACBFEED(@14),B'01111111'                            0411
*                     ELSE          /* NOT SAME JOB / CLASS  #Y30OE73*/
*                       ACBFEED=ON; /* ACBFEED ON SO START   #Y30OE73
*                                      DATA SET SCRATCH DSKT #Y30OE73*/
         B     @RC00410                                            0412
@RF00410 L     @14,AMWAPTR                                         0412
         OI    ACBFEED(@14),B'10000000'                            0412
*                     SAVSSIRC=ZERO;/* RESET SAVE AREA FOR   @Z30OE73
*                                      SUB SYS INTERFACE     @Z30OE73
*                                      RTN CODES             @Z30OE73*/
@RC00410 SLR   @14,@14                                             0413
         ST    @14,SAVSSIRC                                        0413
*                     SAVESSRC=ZERO;/* CLEAR SUSSYS RTN CDE  #Y30OE73*/
         ST    @14,SAVESSRC                                        0414
*                     CALL ALLOPNDS;/* ALLOC AND OPEN SUB    #Y30OE73
*                                      SYS DATA SET          #Y30OE73*/
         BAL   @14,ALLOPNDS                                        0415
*                     IF WTRCODE=NOERROR THEN/* WAS ALLOC AND OPEN 0416
*                                                            @Z30OE73
*                                      SUCCESSFUL            #Y30OE73
*                                      YES                   #Y30OE73*/
         CLI   WTRCODE,0                                           0416
         BNE   @RF00416                                            0416
*                       CALL WRITEDS;/* WRITE DATA SET       #Y30OE73*/
         BAL   @14,WRITEDS                                         0417
*                     CALL CLSUNALC;/* CLOSE AND UNALLOC DS  #Y30OE73*/
@RF00416 BAL   @14,CLSUNALC                                        0418
*                   END;            /* END GOT DATA SET      #Y30OE73*/
*                 ELSE              /* SUBSYS REQ ERROR      #Y30OE73*/
*                   CALL PROCSSRC;  /* PROCESS SUB SYS RTN   #Y30OE73
*                                      RETURN CODES          #Y30OE73*/
         B     @RC00408                                            0420
@RF00408 BAL   @14,PROCSSRC                                        0420
*               ELSE                /* SUB SYS INTERFACE ERR #Y30OE73*/
*                 CALL SSIERRRT;    /* PROCESS SUB SYSTEM    #Y30OE73
*                                      INTERFACE RTN CODES   #Y30OE73*/
         B     @RC00407                                            0421
@RF00407 BAL   @14,SSIERRRT                                        0421
*/*                                                          #Y30OE73*/
*/*      SET UP FOR NEXT DATA SET                            #Y30OE73*/
*/*                                                          #Y30OE73*/
*                                                                  0422
*               IF WTRCODE=NOERROR THEN/* DATA SET WRITEN OK #Y30OE73
*                                      YES                   #Y30OE73*/
@RC00407 CLI   WTRCODE,0                                           0422
         BNE   @RF00422                                            0422
*                 DO;               /* SET UP FOR NXT DS     #Y30OE73
*                                      FOR SAME JOB          #Y30OE73*/
*                   JOBNSAVE=SSSOJOBN;/* SAVE JOB NAME       #Y30OE73*/
         MVC   JOBNSAVE(8),SSSOJOBN                                0424
*                   JOBISAVE=SSSOJOBI;/* SAVE JOB ID         #Y30OE73*/
         MVC   JOBISAVE(8),SSSOJOBI                                0425
*                   SSSOSJBI=ON;    /* SET SELECT BY JOB     #Y30OE73
*                                      ID FLAG               #Y30OE73*/
         OI    SSSOSJBI,B'00001000'                                0426
*                   IF SSIDCODE=JES2SS/* IS SUBSYS JES2      @ZA04482*/
*                     THEN          /* YES SET SELECT BY JOBN      0427
*                                                            @ZA04482*/
         CLI   SSIDCODE,X'04'                                      0427
         BNE   @RF00427                                            0427
*                     SSSOSJBN=ON;  /* SET TO SELECT BY JOBN #Y30OE73*/
         OI    SSSOSJBN,B'00010000'                                0428
*                   NCLSORJB=OFF;   /* SET FLG FOR NEW JOB   #Y30OE73*/
@RF00427 NI    NCLSORJB,B'11110111'                                0429
*                 END;              /* END UNIQUE SET UP FOR #Y30OE73
*                                      NXT DS FROM SAME JOB  #Y30OE73*/
*               ELSE                /* WRT CODE INDICATES    #Y30OE73
*                                      AN ERROR              #Y30OE73*/
*                 IF WTRCODE=SSRERROR&/* CK FOR END OF DATA  #Y30OE73*/
*                     SSOBRETN=SSSOEODS THEN/* SET           #Y30OE73*/
         B     @RC00422                                            0431
@RF00422 CLI   WTRCODE,4                                           0431
         BNE   @RF00431                                            0431
         CLC   SSOBRETN(4),@CF00067                                0431
         BNE   @RF00431                                            0431
*                   DO;             /* YES END OF DATA SET   #Y30OE73
*                                      FOR JOB / CLASS       #Y30OE73*/
*                     WTRCODE=NOERROR;/* RESET WTR RTN CODE  #Y30OE73
*                                      TO NO ERROR           #Y30OE73*/
         MVI   WTRCODE,X'00'                                       0433
*                     IF SSSOSJBI=OFF/* WAS IT NO MORE DATA  @ZA04482
*                                      SETS IN CLASS         @ZA04482*/
*                       THEN        /* YES GET NEXT CLASS    @ZA04482*/
         TM    SSSOSJBI,B'00001000'                                0434
         BNZ   @RF00434                                            0434
*                       IF CLASS(NXTCLASI)^=BLANK&/* ARE MORE      0435
*                                                            @ZA00795*/
*                           NXTCLASI<=MAXNSOCL THEN/* CLASSES      0435
*                                                            @ZA00795
*                                      TO PROCESS            @ZA00795*/
         LA    @14,CLASS-1(NXTCLASI)                               0435
         CLI   0(@14),C' '                                         0435
         BE    @RF00435                                            0435
         SLR   @14,@14                                             0435
         ICM   @14,3,MAXNSOCL                                      0435
         CLR   NXTCLASI,@14                                        0435
         BH    @RF00435                                            0435
*                         DO;       /* YES                   #Y30OE73*/
*                           SSSOCLSL=CLASS(NXTCLASI);/* MOVE #Y30OE73
*                                      NEXT CLASS TO PROCESS #Y30OE73
*                                      INTO SSSO             #Y30OE73*/
         MVI   SSSOCLSL+1,C' '                                     0437
         MVC   SSSOCLSL+2(6),SSSOCLSL+1                            0437
         LA    @14,CLASS-1(NXTCLASI)                               0437
         MVC   SSSOCLSL(1),0(@14)                                  0437
*                           NCLSORJB=ON;/* SET FLAG FOR NEW  @ZA04482
*                                      CLASS SO FEED FLG SET @ZA04482*/
         OI    NCLSORJB,B'00001000'                                0438
*                           NXTCLASI=NXTCLASI+ONE;/* BUMP INDEX    0439
*                                                            #Y30OE73
*                                      TO NEXT CLASS         #Y30OE73*/
         LA    NXTCLASI,1(,NXTCLASI)                               0439
*                           SSSODSN=SSSODSN&&SSSODSN;/* CLR DSN    0440
*                                                            #Y30OE73
*                                      IN SSSO TO MAKE NEXT  #Y30OE73
*                                      SSREQ A PRIMARY REQ   #Y30OE73*/
         XC    SSSODSN(44),SSSODSN                                 0440
*                         END;      /*                       #Y30OE73*/
*                       ELSE        /* NO MORE CLASSES TO    #Y30OE73
*                                      PROCESS               #Y30OE73*/
*                         WRTDSFLG=OFF;/* NO MORE DATA SETS SO     0442
*                                                            #Y30OE73
*                                      STOP PROCESSING       #Y30OE73*/
         B     @RC00435                                            0442
@RF00435 NI    WRTDSFLG,B'11011111'                                0442
*                     ELSE          /* NO MORE DATA SETS FOR #Y30OE73
*                                      THIS JOB IN THIS CLAS #Y30OE73*/
*                       DO;         /* RESET TO GET NXT JOB  #Y30OE73*/
         B     @RC00434                                            0443
@RF00434 DS    0H                                                  0444
*                         JOBNSAVE=BLANK;/* CLEAR JOBNAME    #Y30OE73*/
         MVI   JOBNSAVE+1,C' '                                     0444
         MVC   JOBNSAVE+2(6),JOBNSAVE+1                            0444
         MVI   JOBNSAVE,C' '                                       0444
*                         SSSOSJBN=OFF;/* TELL SUBSYS TO SELECT    0445
*                                                            #Y30OE73
*                                      SELECT BY CLASSONLY   #Y30OE73*/
*                         SSSOSJBI=OFF;/* TRUN OFF SELECT BY #Y30OE73
*                                      JOB ID FLAG           #Y30OE73*/
         NI    SSSOSJBN,B'11100111'                                0446
*                         SSSOJOBN=SSSOJOBN&&SSSOJOBN;/* CLEAR     0447
*                                                            #Y30OE73
*                                      JOBNAME FROM SSSO     #Y30OE73
*                                      BEFORE MKING NXT REQ  #Y30OE73*/
         XC    SSSOJOBN(8),SSSOJOBN                                0447
*                         SSSOJOBI=SSSOJOBI&&SSSOJOBI;/* CLEAR     0448
*                                                            #Y30OE73
*                                      JOB ID BEFORE NXT     #Y30OE73
*                                      SSREQ                 #Y30OE73*/
         XC    SSSOJOBI(8),SSSOJOBI                                0448
*                         SSSODSN=SSSODSN&&SSSODSN;/* CLR DSN      0449
*                                                            #Y30OE73
*                                      TO MAKE NXT SSREQ A   #Y30OE73
*                                      PRIMARY REQUEST       #Y30OE73*/
         XC    SSSODSN(44),SSSODSN                                 0449
*                         SSSODSID=SSSODSID&&SSSODSID;/* CLEAR     0450
*                                                            #Y30OE73
*                                      DSID FIELD            #Y30OE73*/
         XC    SSSODSID(8),SSSODSID                                0450
*                       END;        /* END JOB RESET         #Y30OE73*/
*                   END;            /* END OF JOB=CLASS RESET      0452
*                                                            #Y30OE73*/
@RC00434 DS    0H                                                  0453
*               IF WTRCODE=NOERROR THEN/* CK IF NEED TO FINISH     0453
*                                                            #Y30OE73
*                                      RESET FOR NXT DS      #Y30OE73*/
@RF00431 DS    0H                                                  0453
@RC00422 CLI   WTRCODE,0                                           0453
         BNE   @RF00453                                            0453
*                 DO;               /* YES RESET FLAGS+RTNCDS      0454
*                                                            #Y30OE73*/
*                   SSOBSSIB=ZERO;  /* CLEAR SSIB PTR        #Y30OE73*/
         SLR   @14,@14                                             0455
         ST    @14,SSOBSSIB                                        0455
*                   SSOBRETN=ZERO;  /* CLEAR SSOB RTN CODE   #Y30OE73*/
         ST    @14,SSOBRETN                                        0456
*                   FIRSTIOE=OFF;   /* RESET ERROR FLAGS     #Y30OE73*/
         NI    FIRSTIOE,B'11111110'                                0457
*                   NORETRY=OFF;    /* FOR ERRORS THAT WERE  @Z30OE73*/
*                   OVERFCTR=OFF;   /* CORRECTED             #Y30OE73*/
         NI    NORETRY,B'00111111'                                 0459
*                   INPIOE=OFF;     /*                       #Y30OE73*/
         NI    INPIOE,B'11111101'                                  0460
*                 END;              /* END COMMON RESET      #Y30OE73*/
*               ELSE                /* UNCORRECTABLE ERROR   #Y30OE73*/
*                 WRTDSFLG=OFF;     /* STOP WRITING DATA S   #Y30OE73*/
         B     @RC00453                                            0462
@RF00453 NI    WRTDSFLG,B'11011111'                                0462
*             END MLTDSLP;          /*                       #Y30OE73*/
@RC00453 DS    0H                                                  0463
@DE00400 TM    WRTDSFLG,B'00100000'                                0463
         BO    @DL00400                                            0463
*/*                                                          #Y30OE73*/
*                                                                  0464
*           END;                    /* END PROCESS MDS MDE   @Y30OE73*/
*     END;                          /* END DO CKER3          @Y30OE73*/
@RC00339 DS    0H                                                  0465
@RF00338 DS    0H                                                  0466
*                                                                  0466
*/*                                                          @Z30OE73*/
*/*  ******************************************************  #Y30OE73*/
*/*     CLEAN UP ROUTINE TO SET RETURN CODE                  #Y30OE73*/
*/*       THAT IS PASSED BACK TO THE USER                    #Y30OE73*/
*/*     -- 00 - NO ERRORS ENCOUNTERED                        #Y30OE73*/
*/*     -- 04 - DELIMITOR DISKETTE ENCOUNTERED               #Y30OE73*/
*/*     -- 08 - INVALID DD,WTR PARMS OR DEVICE AND WTR NOT   #Y30OE73*/
*/*             WRITER WAS NOT STARTED                       #Y30OE73*/
*/*     -- 0C - SYSTEM ERRORS OCCURED THAT WOULD NOT         #Y30OE73*/
*/*             ALLOW THE WRITER TO CONTINUE PROCESSING      #Y30OE73*/
*/*                                                          @Z30OE73*/
*/*        CLOSE 3540 DCB                                    @Z30OE73*/
*/*                                                          #Y30OE73*/
*/*  *****************************************************   @Z30OE73*/
*/*                                                          @Z30OE73*/
*                                                                  0466
*   IF OPN3540F=ON THEN             /* TEST IF DISKT         @Y30OE73*/
@RF00277 TM    OPN3540F,B'00100000'                                0466
         BNO   @RF00466                                            0466
*     DO;                           /* OPEN OK YES           @Y30OE73*/
*       REG1=ADDR(OUTDCB);          /* SET REG1TO POINT      @Y30OE73
*                                      TO OUTPUT DCB FOR     @Y30OE73
*                                      DISKETTE CLOSE        #Y30OE73*/
         LA    REG1,OUTDCB                                         0468
*       CALL IOEDKCLS;              /* CLEAN UP AFTER 3540   @Y30OE73
*                                      ACCESS METHOD         #Y30OE73*/
         L     @15,@CV03340                                        0469
         BALR  @14,@15                                             0469
*     END;                          /* END DISKETTE CLOSE    @Y30OE73*/
*   IF WTRCODE^=OPENERR&            /* TEST IF               @Z30OE73*/
*       WTRCODE^=ERRWTRPM&          /* DCB FOR 3540          @Z30OE73*/
*       WTRCODE^=INVALDDN&          /* HAS BEEN OPENED       @Z30OE73*/
*       WTRCODE^=INVALDEV THEN      /* OK                    @Z30OE73*/
@RF00466 CLI   WTRCODE,36                                          0471
         BE    @RF00471                                            0471
         CLI   WTRCODE,24                                          0471
         BE    @RF00471                                            0471
         CLI   WTRCODE,28                                          0471
         BE    @RF00471                                            0471
         CLI   WTRCODE,32                                          0471
         BE    @RF00471                                            0471
*     GEN(     CLOSE   (OUTDCB)   );/* CLS                   @Z30OE73
*                                      OUTPUT DCB FOR 3540   @Z30OE73*/
              CLOSE   (OUTDCB)
*   IF WTRCODE=NOERROR THEN         /* NORMAL END            #Y30OE73*/
@RF00471 CLI   WTRCODE,0                                           0473
         BNE   @RF00473                                            0473
*     RTNVALUE=NOERROR;             /* SET REG TO POST       #Y30OE73
*                                      COMPLETION TO INIT    #Y30OE73*/
         SLR   RTNVALUE,RTNVALUE                                   0474
*   ELSE                            /* ERROR COMPLETION      #Y30OE73*/
*     DO;                           /* SET ERROR CODE IN REG #Y30OE73*/
         B     @RC00473                                            0475
@RF00473 DS    0H                                                  0476
*       IF WTRCODE=ERRWTRPM×        /* WAS ERROR             #Y30OE73*/
*           WTRCODE=INVALDDN×       /* CAUSED BY             #Y30OE73*/
*           WTRCODE=INVALDEV        /* USER ERR              @Z30OE73*/
*         THEN                      /* YES                   #Y30OE73*/
         CLI   WTRCODE,24                                          0476
         BE    @RT00476                                            0476
         CLI   WTRCODE,28                                          0476
         BE    @RT00476                                            0476
         CLI   WTRCODE,32                                          0476
         BNE   @RF00476                                            0476
@RT00476 DS    0H                                                  0477
*         RTNVALUE=INVALID;         /* SET CODE              #Y30OE73
*                                      FOR RTN TO SYSTEM     #Y30OE73*/
         LA    RTNVALUE,8                                          0477
*       ELSE                        /* MUST BE OTHER THAN    #Y30OE73
*                                      INVALID PARMS         #Y30OE73*/
*         IF WTRCODE=DLMDSKTE THEN  /* DID                   #Y30OE73
*                                      OPERATOR STOP WTR     #Y30OE73*/
         B     @RC00476                                            0478
@RF00476 CLI   WTRCODE,48                                          0478
         BNE   @RF00478                                            0478
*           RTNVALUE=DLMITOR;       /* SET CODE              #Y30OE73
*                                      FOR DLM DISKETTE      #Y30OE73*/
         LA    RTNVALUE,4                                          0479
*         ELSE                      /* MUST BE SYSTEM ERROR  #Y30OE73*/
*           RTNVALUE=OTHERERS;      /* SET CATCH             #Y30OE73
*                                      ALL RTNCODE           #Y30OE73*/
         B     @RC00478                                            0480
@RF00478 LA    RTNVALUE,12                                         0480
*     END;                          /* END ERROR COMP        #Y30OE73*/
*                                                                  0482
*/*                                                          #Y30OE73*/
*/* ******************************************************** #Y30OE73*/
*/*                                                          #Y30OE73*/
*/*      THIS PROCEDURE WRITES A DATA SET ON DISKETTE(S)     #Y30OE73*/
*/*      -INPUT TO THIS ROUTINE IS AN OPEN SUBSYS DATA SET   #Y30OE73*/
*/*       AN OPEN 3540 DEVICE AND SUCCESSFUL COMPLETION OF   #Y30OE73*/
*/*       THE POST DEVICE OPEN PROCESSING 3540               #Y30OE73*/
*/*      -OUTPUT IS A WRITTEN DATA SET ON DISKETTES AND MSG  #Y30OE73*/
*/*       IEB571I .                                          #Y30OE73*/
*/*      THIS ROUTINE ALSO HANDLES THE NUMBER OF COPIES      @ZA04461*/
*/*      THAT ARE TO BE MADE OF THE DATA SET.  FOR EACH      @ZA04461*/
*/*      TIME THE DATA SET IS TO BE WRITTEN AFTER THE FIRST  @ZA04461*/
*/*      TIME THE DATA SET IS CLOSED AND REOPENED TO         @ZA04461*/
*/*      SO IT CAN BE REREAD.                                @ZA04461*/
*/*                                                          #Y30OE73*/
*/* *******************************************************  #Y30OE73*/
*/*                                                          #Y30OE73*/
*                                                                  0482
*WRITEDS:                                                          0482
*   PROC;                           /* INTERNAL PROCEDURE    #Y30OE73
*                                      USED TO WRITE DATA    #Y30OE73
*                                      ON DISKETTE           #Y30OE73*/
         B     @PB00002                                            0482
WRITEDS  STM   @14,@12,@SA00002                                    0482
*   RESPECIFY                                                      0483
*     IHADCB BASED(OUTDCBPT);       /* NEED TO ASSURE        #Y30OE73*/
*   DS1STTMF=ON;                    /* SET FIRST TIME FLAG   @ZA04461
*                                      FOR INITIAL WRITING   @ZA04461
*                                      OF DATA SET           @ZA04461*/
         OI    DS1STTMF,B'00000010'                                0484
*   IF SSSOCOPY<MINCOPYS×           /* TEST IF COPYS NOT 0   @ZA04482*/
*       SSSOCOPY>MAXCOPYS THEN      /* AND NOT ABOVE LIMIT   @ZA04482*/
         LH    @14,SSSOCOPY                                        0485
         LTR   @14,@14                                             0485
         BNP   @RT00485                                            0485
         CH    @14,@CH00087                                        0485
         BNH   @RF00485                                            0485
@RT00485 DS    0H                                                  0486
*     SSSOCOPY=ONE;                 /* OUT OF LIMITS CPYS=1  @ZA04482*/
         MVC   SSSOCOPY(2),@CH00070                                0486
*NUMCOPYS:                                                         0487
*   DO NDS=ONE TO SSSOCOPY;         /* NUMBER OF TIMES DS TO @ZA04461
*                                      TO BE WRITTEN LOOP    @ZA04461*/
@RF00485 DS    0H                                                  0487
NUMCOPYS LA    NDS,1                                               0487
         B     @DE00487                                            0487
@DL00487 DS    0H                                                  0488
*/*                                                          #Y30OE73*/
*/* **   INITIALIZE FLAGS AND COUNTERS FOR WRITE DATA SET    #Y30OE73*/
*/*                                                          #Y30OE73*/
*                                                                  0488
*     VOLINDX=BEGIN;                /* SET INDEX FOR VOL     #Y30OE73
*                                      SERS IN MSG LIST      #Y30OE73*/
         MVC   VOLINDX(2),@CH00070                                 0488
*     NRECDKT1=ZERO;                /* SET TO NO RECORDS ON  #Y30OE73
*                                      FIRST DISKETTE        #Y30OE73*/
         SLR   @14,@14                                             0489
         ST    @14,NRECDKT1                                        0489
*     NRECDKTR=ZERO;                /* SET TO NO RECORDS ON  #Y30OE73
*                                      REST OF DISKETTES     #Y30OE73*/
         ST    @14,NRECDKTR                                        0490
*     FIRSTDKT=ON;                  /* INDICATE 1ST DISKETTE #Y30OE73*/
         OI    FIRSTDKT,B'00001000'                                0491
*     NORETRY=OFF;                  /* SET NO RETRY FLAG TO  #Y30OE73
*                                      OFF SO WILL RETRY     #Y30OE73*/
         NI    NORETRY,B'01111111'                                 0492
*     RDWRTFLG=ON;                  /* FLAG TO CONTORL RD L  #Y30OE73
*                                      LOOP                  #Y30OE73*/
*     INPUTEOD=OFF;                 /* FLAG THA T INDICATES  #Y30OE73
*                                      END OF DATA = OFF     #Y30OE73*/
         OI    RDWRTFLG,B'00010000'                                0494
         NI    INPUTEOD,B'11111011'                                0494
*     RPLEODS=OFF;                  /* INIT LAST PUT TO OFF  #Y30OE73*/
         L     @14,AMWAPTR                                         0495
         NI    RPLEODS(@14),B'01111111'                            0495
*     IF DS1STTMF^=ON THEN          /* IS THIS 1ST TIME      @ZA04461*/
         TM    DS1STTMF,B'00000010'                                0496
         BO    @RF00496                                            0496
*       DO;                         /* NOT FIRST TIME        @ZA04461*/
*         GEN(    CLOSE   INPUTDCB  );/* CLOSE SUB SYS       @ZA04461
*                                      DS TO BE REPOSITIONED @ZA04461*/
             CLOSE   INPUTDCB
*         GEN(    OPEN    (INPUTDCB,(INPUT))   );/* RE       @ZA04461
*                                      INPUT DCB             @ZA04461*/
             OPEN    (INPUTDCB,(INPUT))
*         RESPECIFY                                                0500
*           IHADCB BASED(INDCBPTR); /*                       @ZA04469*/
*         IF DCBOFOPN^=ON THEN      /* DCB REOPENED OK       @ZA04461*/
         L     @14,INDCBPTR                                        0501
         TM    DCBOFOPN+40(@14),B'00010000'                        0501
         BO    @RF00501                                            0501
*           DO;                     /* NO WRITE OUT MSG      @ZA04461
*                                      IEB577I               @ZA04461*/
*             MSGID=MSG577I;        /* SET MSG INDEX FOR 577 @ZA04461*/
         MVI   MSGID,X'1A'                                         0503
*             WTOCODE=WTOTYP;       /* SET TYPE OF MSG WTO   @ZA04461*/
         MVI   WTOCODE,X'01'                                       0504
*             M577IKEY=KSSIORAL;    /* SET KEY FOR ERROR     @ZA04461
*                                      DESCRIPTION           @ZA04461*/
         MVI   M577IKEY,X'0C'                                      0505
*             M577DES=OPENCON;      /* SET ERROR DESCRIPTION @ZA04461
*                                      FOR SUB SYS OPEN ERR  @ZA04461*/
         MVC   M577DES(10),OPENCON                                 0506
*             REG1=ADDR(MSGWTLST);  /* SET REG 1 FOR CALL    @ZA04461
*                                      MSG WTR RTN           @ZA04461*/
         LA    REG1,MSGWTLST                                       0507
*             CALL IOEDKMSG;        /* CALL MSG WTR TO WTO   @ZA04461
*                                      MSG IEB577I           @ZA04461*/
         L     @15,@CV03341                                        0508
         BALR  @14,@15                                             0508
*             M577IKEY=KSKIP;       /* CLEAR ERR DES KEY     @ZA04461*/
         MVI   M577IKEY,X'00'                                      0509
*             WTRCODE=SSDSOPNE;     /* SET WTR RTN CODE FOR  @ZA04461
*                                      SUB SYS DS OPN ERR    @ZA04461*/
         MVI   WTRCODE,X'0C'                                       0510
*             RDWRTFLG=OFF;         /* STOP PROCESSING THIS  @ZA04461
*                                      THIS DATA SET         @ZA04461*/
         NI    RDWRTFLG,B'11101111'                                0511
*             NDS=SSSOCOPY;         /* SET LOOP CTR SO DATA  @ZA04461*/
         LH    NDS,SSSOCOPY                                        0512
*           END;                    /* SET NOT REOPENED AGAIN      0513
*                                                            @ZA04461
*                                                            @ZA04469*/
*         ELSE                      /* REPOSITION OK         @ZA04461*/
*           IF MULTIDSM=ON          /* IS IT MULTI DS MOED   @ZA04461*/
*             THEN                  /* YES                   @ZA04461*/
         B     @RC00501                                            0514
@RF00501 TM    MULTIDSM,B'10000000'                                0514
         BNO   @RF00514                                            0514
*             ACBFEED=OFF;          /* TURN OFF FEED FLAG    @ZA04461*/
         L     @14,AMWAPTR                                         0515
         NI    ACBFEED(@14),B'01111111'                            0515
*         RESPECIFY                                                0516
*           IHADCB BASED(OUTDCBPT); /*                       @ZA04469*/
@RF00514 DS    0H                                                  0516
@RC00501 DS    0H                                                  0517
*       END;                        /* END REPOSITION        @ZA04469*/
*     IF SSSODSID(1:1)^=BLANK&      /* TEST IF A DSID WAS    #Y30OE73*/
*         SSSODSID(1:1)^=NULL THEN  /* RTNED FROM SSREQ      #Y30OE73
*                                      YES GO AHEAD AND      #Y30OE73
*                                      WRITE THE DATA SET    #Y30OE73*/
@RF00496 CLI   SSSODSID,C' '                                       0518
         BE    @RF00518                                            0518
         CLC   SSSODSID(1),NULL                                    0518
         BE    @RF00518                                            0518
*/*                                                          #Y30OE73*/
*                                                                  0519
*RDWRTLP:                           /*                       #Y30OE73*/
*       DO WHILE RDWRTFLG=ON;       /* READ - WRITE LOOP     #Y30OE73
*                                      READ A EECORD         #Y30OE73*/
RDWRTLP  B     @DE00519                                            0519
@DL00519 DS    0H                                                  0520
*         GEN(   GET   INPUTDCB,RECORD     );/*              #Y30OE73*/
            GET   INPUTDCB,RECORD
*         RESPECIFY                                                0521
*           IHADCB BASED(INDCBPTR); /* ESTABLISH             @ZA29427
*                                      ADDRESSABILITY TO     @ZA29427
*                                      INPUT DCB             @ZA29427*/
*         RPLRLEN=DCBLRECL;         /* GET LENGTH OF INPUT   @ZA29427*/
         L     @14,INDCBPTR                                        0522
         LH    @14,DCBLRECL+72(,@14)                               0522
         L     @10,AMWAPTR                                         0522
         ST    @14,RPLRLEN(,@10)                                   0522
*         IF INPUTEOD=ON            /* DID END OF DATA OCCUR #Y30OE73
*                                      ON INPUT              #Y30OE73*/
*           THEN                    /* YES                   #Y30OE73*/
         TM    INPUTEOD,B'00000100'                                0523
         BNO   @RF00523                                            0523
*           DO;                     /* INPUT END OF DATA RTN #Y30OE73*/
*ENDINDAT:                                                         0525
*             INPUTEOD=ON;          /* TURN ON END OF DATA   #Y30OE73
*                                      INDICATOR             #Y30OE73*/
ENDINDAT OI    INPUTEOD,B'00000100'                                0525
*             RPLEODS=ON;           /* INDICATE LAST PUT FOR #Y30OE73
*                                      3540 AM               #Y30OE73*/
         L     @14,AMWAPTR                                         0526
         OI    RPLEODS(@14),B'10000000'                            0526
*           END;                    /* END OF END OF DATA    #Y30OE73
*                                      PROCESSING INPUT      #Y30OE73*/
*         ELSE                                                     0528
*           ;                       /* NOT END OF DATA KEEP  #Y30OE73*/
@RF00523 DS    0H                                                  0529
*         REG1=ADDR(OUTDCB);        /* SET PTR TO OUTDCB     #Y30OE73
*                                      TO WRITE A RECORD     #Y30OE73*/
         LA    REG1,OUTDCB                                         0529
*/*                                                          #Y30OE73*/
*/*      ISSUE PUT OR LAST PUT                               #Y30OE73*/
*/*                                                          #Y30OE73*/
*                                                                  0530
*         CALL IOEDKPUT;            /* USE 3540 AM TO WRITE  #Y30OE73
*                                      A RECORD              #Y30OE73*/
         L     @15,@CV03337                                        0530
         BALR  @14,@15                                             0530
*         IF RPLFDBK1=GOODPUT×      /* IS RECORD WRITTEN OK  #Y30OE73*/
*             RPLFDBK1=EODACCD THEN /* IF NO CODE OR END OF  #Y30OE73
*                                      DISKETTE CODE         #Y30OE73
*                                      YES                   #Y30OE73
*                                      MUST KEEP TRACK OF    #Y30OE73
*                                      RECORDS WRITTEN FOR   #Y30OE73
*                                      RETRY ATTEMPT         #Y30OE73*/
         L     @14,AMWAPTR                                         0531
         CLI   RPLFDBK1(@14),X'00'                                 0531
         BE    @RT00531                                            0531
         CLI   RPLFDBK1(@14),X'08'                                 0531
         BNE   @RF00531                                            0531
@RT00531 DS    0H                                                  0532
*           IF FIRSTDKT=ON          /* COUNT NUMBER OF RECDS #Y30OE73
*                                      WRITTEN ON FIRST DSKT #Y30OE73*/
*             THEN                  /* YES                   #Y30OE73*/
         TM    FIRSTDKT,B'00001000'                                0532
         BNO   @RF00532                                            0532
*             NRECDKT1=NRECDKT1+ONE;/* COUNT BUMPED          #Y30OE73
*                                      FOR RECORDS ON DKT 1  #Y30OE73*/
         LA    @14,1                                               0533
         AL    @14,NRECDKT1                                        0533
         ST    @14,NRECDKT1                                        0533
*           ELSE                    /* NOT 1 ST DISKETTE     #Y30OE73*/
*             NRECDKTR=NRECDKTR+ONE;/* COUNT RECORDS         #Y30OE73
*                                      ON OTHER DISKETTES    #Y30OE73*/
         B     @RC00532                                            0534
@RF00532 LA    @14,1                                               0534
         AL    @14,NRECDKTR                                        0534
         ST    @14,NRECDKTR                                        0534
*         ELSE                                                     0535
*           ;                       /* RECORD NOT WRITTEN    #Y30OE73
*                                      OK (IE PIOE,DLMDKT)   @Y30OE73
*                                      RETURN CODES FOR      #Y30OE73
*                                      THIS CONDITION ARE    #Y30OE73
*                                      HANDLED IN THE RTN    #Y30OE73
*                                      OUTERRRT              #Y30OE73*/
@RF00531 DS    0H                                                  0536
*         IF INPUTEOD=ON            /* IS ALL DATA WRITTEN   #Y30OE73*/
*           THEN                    /* YES                   #Y30OE73*/
@RC00531 TM    INPUTEOD,B'00000100'                                0536
         BNO   @RF00536                                            0536
*           RDWRTFLG=OFF;           /* TRUN OFF FLAG TO STOP #Y30OE73*/
         NI    RDWRTFLG,B'11101111'                                0537
*       END RDWRTLP;                /* END OF READ WRITE LP  #Y30OE73*/
@RF00536 DS    0H                                                  0538
@DE00519 TM    RDWRTFLG,B'00010000'                                0538
         BO    @DL00519                                            0538
*     ELSE                          /* NO DSID WAS SPECIFIED #Y30OE73
*                                      ON SSREQ RETURN       #Y30OE73
*                                      ISSUE MSG IEB573 AND  #Y30OE73*/
*       DO;                         /* IEB573 MSG            #Y30OE73*/
         B     @RC00518                                            0539
@RF00518 DS    0H                                                  0540
*         MSGID=MSG573I;            /* SET MSG CODE FOR 573  #Y30OE73*/
         MVI   MSGID,X'16'                                         0540
*         MJOBKEY=KJOBN;            /* SET KEY FOR JOBNAME   #Y30OE73*/
         MVI   MJOBKEY,X'0B'                                       0541
*         MJOBN=SSSOJOBN;           /* SET JOBNAME FOR MSG   #Y30OE73*/
         MVC   MJOBN(8),SSSOJOBN                                   0542
*         MCLASKEY=KCLAS;           /* SET KEY FOR CLASS     #Y30OE73*/
         MVI   MCLASKEY,X'09'                                      0543
*         MCLASSI=CLASS(NXTCLASI-ONE);/* SET CLASS           #Y30OE73
*                                      FOR MESSAGE           #Y30OE73*/
         LA    @14,CLASS-2(NXTCLASI)                               0544
         MVC   MCLASSI(1),0(@14)                                   0544
*         REG1=ADDR(MSGWTLST);      /* SET ADDR OF LIST FOR  #Y30OE73
*                                      MESSAGE WRITER        #Y30OE73*/
         LA    REG1,MSGWTLST                                       0545
*         CALL IOEDKMSG;            /* WRITE MESSAGE         #Y30OE73*/
         L     @15,@CV03341                                        0546
         BALR  @14,@15                                             0546
*         MJOBKEY=KSKIP;            /* RESET JOBNAME KEY     #Y30OE73*/
         MVI   MJOBKEY,X'00'                                       0547
*         MCLASKEY=KSKIP;           /* RESET CLASS KEY       #Y30OE73*/
         MVI   MCLASKEY,X'00'                                      0548
*         WTRCODE=NODSID;           /* SET WTRCODE FOR UNAL  #Y30OE73*/
         MVI   WTRCODE,X'2C'                                       0549
*       END;                        /* END NODSID            #Y30OE73*/
*   END NUMCOPYS;                   /* END OF LOOP FOR NUM   @ZA04461
*                                      OF COPIES             @ZA04461*/
@RC00518 AH    NDS,@CH00070                                        0551
@DE00487 CH    NDS,SSSOCOPY                                        0551
         BNH   @DL00487                                            0551
*   END WRITEDS;                    /* END WRITE DS PROC     #Y30OE73*/
@EL00002 DS    0H                                                  0552
@EF00002 DS    0H                                                  0552
@ER00002 LM    @14,@12,@SA00002                                    0552
         BR    @14                                                 0552
*                                                                  0553
*/*                                                          #Y30OE73*/
*/*  *****************************************************   #Y30OE73*/
*/*                                                          #Y30OE73*/
*/*      ALLOCATE AND OPEN SUBSYSTEM DATA SET ROUTINE        #Y30OE73*/
*/*      -INITIALIZE S99RB FOR ALLOCATE-VERB,FLAG1,TEXT      #Y30OE73*/
*/*       POINTERS AND FLAG2                                 #Y30OE73*/
*/*      -MOVE DATA SET NAME INTO DSN TEXT UNIT              #Y30OE73*/
*/*      -ISSUE SVC 99 TO ALLOCATE DATA SET                  #Y30OE73*/
*/*      -PROCESS ALLOCATION RETURN CODES                    #Y30OE73*/
*/*      -OPEN DATA SET FOR QSAM INPUT                       #Y30OE73*/
*/*      -MOVE INFORMATION REQUIRED BY THE 3540 ACCESS METH  @Z30OE73*/
*/*       INTO THE AM WORKAREA                               #Y30OE73*/
*/*                                                          #Y30OE73*/
*/*      INPUTS:                                             #Y30OE73*/
*/*         -SSOB,S99RB,TEXT POINTERS AND TEXT UNITS IN      #Y30OE73*/
*/*          WRITER WORKAREA                                 #Y30OE73*/
*/*         -INPUT DCB FOR OPEN                              #Y30OE73*/
*/*      OUTPUTS:                                            #Y30OE73*/
*/*         -DATA SET ALLOCATED OR ALLOC RTN CODE            #Y30OE73*/
*/*          ALLOC RTN CODE RESULTS IN MESSAGES IEB577I      #Y30OE73*/
*/*          AND IEB581E WHEN AN ERROR OCCURES               #Y30OE73*/
*/*         -DATA SET (SUBSYSTEM ) OPENED OR ERROR MESSAGE   #Y30OE73*/
*/*          IEB580I                                         #Y30OE73*/
*/*                                                          #Y30OE73*/
*/*  ******************************************************* #Y30OE73*/
*/*                                                          #Y30OE73*/
*                                                                  0553
*ALLOPNDS:                                                         0553
*   PROC;                           /* INTERNAL PROCEDURE    #Y30OE73
*                                      USED TO ALLOCATE      #Y30OE73
*                                      AND OPEN A DATA SET   #Y30OE73*/
ALLOPNDS STM   @14,@12,@SA00003                                    0553
*/*                                                          #Y30OE73*/
*/*      --INITIALIZE S99RB                                  #Y30OE73*/
*/*                                                          #Y30OE73*/
*                                                                  0554
*   S99VERB=S99VRBAL;               /* SET VERB TO AALOC     #Y30OE73*/
         MVI   S99VERB,X'01'                                       0554
*   S99FLAG1=S99FLAG1&&S99FLAG1;    /* CLEAR FLAG1           #Y30OE73*/
         XC    S99FLAG1(2),S99FLAG1                                0555
*   S99RSC=NOERROR;                 /* INIT RTN CODE TO OK   #Y30OE73*/
         SLR   @14,@14                                             0556
         ST    @14,S99RSC                                          0556
*   S99TXTPP=ADDR(ATXTPTRS);        /* SET PTR TO TEXT PTRS  #Y30OE73
*                                      FOR ALLOCATION        #Y30OE73*/
         LA    @10,ATXTPTRS                                        0557
         ST    @10,S99TXTPP                                        0557
*   S99RSV01=ZERO;                  /* CLEAR RESERVED FIELD  @Z30OEAD*/
         ST    @14,S99RSV01                                        0558
*   S99FLAG2=S99FLAG2&&S99FLAG2;    /* CLEAR FLAG2           #Y30OE73*/
*                                                                  0559
         XC    S99FLAG2(4),S99FLAG2                                0559
*   /*****************************************************************/
*   /*                                                               */
*   /*                                                       #Y30OE73*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0560
*/*  *   MOVE DNN INTO DSN TEXT UNIT                         #Y30OE73*/
*/*                                                          #Y30OE73*/
*                                                                  0560
*   ALLOCDSN=SSSODSN;               /* SET DSN TO ALLOCATE   #Y30OE73*/
         MVC   ALLOCDSN(44),SSSODSN                                0560
*   IF SSIDCODE=JES2SS THEN         /* IS SUBSYS JES2        @ZA04482*/
         CLI   SSIDCODE,X'04'                                      0561
         BNE   @RF00561                                            0561
*     DO;                           /* YES CALC DSN LENGTH   @ZA04482*/
*       DO INDX=ONE TO(MAXDSNLN+ONE)/* LOOP TO DETERMINE     #Y30OE73*/
*             WHILE(ALLOCDSN(INDX)^=BLANK&/* LENGTH OF DSN   #Y30OE73*/
*             ALLOCDSN(INDX)^=NULL);/* FOR TST UNIT          #Y30OE73*/
         LA    @14,1                                               0563
         B     @DE00563                                            0563
@DL00563 LA    @10,ALLOCDSN-1(@14)                                 0563
         CLI   0(@10),C' '                                         0563
         BE    @DC00563                                            0563
         LA    @10,ALLOCDSN-1(@14)                                 0563
         CLC   0(1,@10),NULL                                       0563
         BE    @DC00563                                            0563
*       END;                        /* END OF DSN REACHED    #Y30OE73*/
         AH    @14,@CH00070                                        0564
@DE00563 STH   @14,INDX                                            0564
         LA    @10,1                                               0564
         SLR   @00,@00                                             0564
         ICM   @00,3,MAXDSNLN                                      0564
         ALR   @10,@00                                             0564
         CR    @14,@10                                             0564
         BNH   @DL00563                                            0564
@DC00563 DS    0H                                                  0565
*       DSNLENTH=INDX-ONE;          /* SET LENGTH IN DSN T U #Y30OE73
*                                                            #Y30OE73*/
         SLR   @14,@14                                             0565
         ICM   @14,3,INDX                                          0565
         BCTR  @14,0                                               0565
         STH   @14,DSNLENTH                                        0565
*     END;                          /* END CALC DSN LEN JES2 @ZA04482*/
*   ELSE                            /* MUST BE JES3 SO       @ZA04482*/
*     DSNLENTH=MAXDSNLN;            /* SET DSN LEN TO MAX    @ZA04482*/
         B     @RC00561                                            0567
@RF00561 MVC   DSNLENTH(2),MAXDSNLN                                0567
*/*  *   ISSUE DYNAMIC ALLOC SVC FOR DATA SET                #Y30OE73*/
*/*                                                          #Y30OE73*/
*                                                                  0568
*   REG1=ADDR(S99RBPTR);            /* SET REG 1 TO POINT TO #Y30OE73
*                                      S99RB PTRS LIST       #Y30OE73*/
@RC00561 LA    REG1,S99RBPTR                                       0568
*   GEN(   SVC   99     );          /*                       #Y30OE73*/
            SVC   99
*   IF RTNCDREG=NOERROR             /* WAS DATA SET ALLOCATED      0570
*                                                            @Z30OE73
*                                      OK - RTN CODE= 0      @Z30OE73*/
*     THEN                          /* YES                   #Y30OE73*/
         LTR   RTNCDREG,RTNCDREG                                   0570
         BNZ   @RF00570                                            0570
*     DO;                           /*                       #Y30OE73
*                                                            #Y30OE73*/
*/*      OPEN  INPUT DATA SET                                #Y30OE73*/
*                                                                  0572
*       RESPECIFY                                                  0572
*         IHADCB BASED(INDCBPTR);   /* ESTABLISH             #Y30OE73
*                                      ADDRESSABILITY        #Y30OE73
*                                      TO THE INPUT DCB      #Y30OE73*/
*       IF SSIDCODE=JES3SS THEN     /* FOR JES3 SET DCB      @ZA04482*/
         CLI   SSIDCODE,X'08'                                      0573
         BNE   @RF00573                                            0573
*         DCBRECFM=RECFMUDF;        /* RECFM TO UNDEFINED    @ZA04482*/
         L     @14,INDCBPTR                                        0574
         MVC   DCBRECFM+28(1,@14),RECFMUDF                         0574
*       DCBDDNAM=RDDNDDN;           /* GET DDNAME FROM THE   #Y30OE73
*                                      RTN DDNAME TEST UNIT  #Y30OE73*/
@RF00573 L     @14,INDCBPTR                                        0575
         MVC   DCBDDNAM+40(8,@14),RDDNDDN                          0575
*       DCBLRECL=DCBLRECL&&DCBLRECL;/* CLEAR LRECL           #Y30OE73
*                                      FROM PREVIOUS DATA SET      0576
*                                                            #Y30OE73*/
         AH    @14,@CH01994                                        0576
         LH    @10,DCBLRECL(,@14)                                  0576
         LR    @00,@10                                             0576
         XR    @00,@10                                             0576
         STH   @00,DCBLRECL(,@14)                                  0576
*       GEN(   OPEN   (INPUTDCB,(INPUT))  );/*               #Y30OE73*/
            OPEN   (INPUTDCB,(INPUT))
*       IF DCBOFOPN=ON              /* DATA SET OPENED OK    #Y30OE73*/
*         THEN                      /* YES                   #Y30OE73*/
         L     @14,INDCBPTR                                        0578
         TM    DCBOFOPN+40(@14),B'00010000'                        0578
         BNO   @RF00578                                            0578
*         DO;                       /* ACCESS METHOD UPDATE  #Y30OE73*/
*/*                                                          #Y30OE73*/
*/*      UPDATE ACCESS METHOD WORK AREA                      #Y30OE73*/
*/*                                                          #Y30OE73*/
*                                                                  0580
*           ACBDSID=SSSODSID;       /* SET DSIDFROM SSOB     #Y30OE73*/
         L     @10,AMWAPTR                                         0580
         MVC   ACBDSID(8,@10),SSSODSID                             0580
*           ACBLRECL=DCBLRECL;      /* SET LRECL FOR         #Y30OE73*/
         LH    @14,DCBLRECL+72(,@14)                               0581
         STH   @14,ACBLRECL(,@10)                                  0581
*           RPLRLEN=DCBLRECL;       /* SET LNGTH OF RECORD   #Y30OE73
*                                      DATA SET IN W A       #Y30OE73*/
         ST    @14,RPLRLEN(,@10)                                   0582
*           ACBJOBID=SSSOJOBN;      /* SET CURRENT JOB       #Y30OE73
*                                      NAME                  #Y30OE73*/
         MVC   ACBJOBID(8,@10),SSSOJOBN                            0583
*         END;                      /* END UPDATE W A        #Y30OE73*/
*       ELSE                        /* OPEN ERROR ON         #Y30OE73
*                                      SUBSYSTEM DATA SET    #Y30OE73*/
*/*                                                          #Y30OE73*/
*/*       HANDLE OPEN ERROR ON SUBSYSTEM DATA SET            #Y30OE73*/
*/*                                                          #Y30OE73*/
*                                                                  0585
*         DO;                       /* WRITE MSG IEB577I     #Y30OE73*/
         B     @RC00578                                            0585
@RF00578 DS    0H                                                  0586
*           MSGID=MSG577I;          /* SET INDEX FOR MSG     #Y30OE73
*                                      IN MSG WTR PARM LIST  #Y30OE73*/
         MVI   MSGID,X'1A'                                         0586
*           WTOCODE=WTOTYP;         /* TYPE OF MSG IS WTO    #Y30OE73*/
         MVI   WTOCODE,X'01'                                       0587
*           DEVAKEY=KDEVA;          /* SET KEY FOR UNIT NAME @Z30OE73*/
         MVI   DEVAKEY,X'08'                                       0588
*           DEVA=UCBNAME;           /* MOVE IN UNIT NAME     #Y30OE73*/
         L     @14,UCBPTR                                          0589
         MVC   DEVA(3),UCBNAME(@14)                                0589
*           M577IKEY=KSSIORAL;      /* SET KEY FOR ERROR DES @Z30OE73*/
         MVI   M577IKEY,X'0C'                                      0590
*           M577DES=OPENCON;        /* SET ERROR DES FOR     #Y30OE73
*                                      OPEN ERROR            #Y30OE73*/
         MVC   M577DES(10),OPENCON                                 0591
*           REG1=ADDR(MSGWTLST);    /* SET PTR TO MSG        #Y30OE73
*                                      WRITER LIST           #Y30OE73*/
         LA    REG1,MSGWTLST                                       0592
*           CALL IOEDKMSG;          /* WRITE MSG             #Y30OE73*/
         L     @15,@CV03341                                        0593
         BALR  @14,@15                                             0593
*           DEVAKEY=KSKIP;          /* CLEAR UNIT NAME KEY   #Y30OE73*/
         MVI   DEVAKEY,X'00'                                       0594
*           M577IKEY=KSKIP;         /* CLEAR ERROR DES KEY   #Y30OE73*/
         MVI   M577IKEY,X'00'                                      0595
*           WTRCODE=SSDSOPNE;       /* SET ERROR RTN CODE    #Y30OE73*/
         MVI   WTRCODE,X'0C'                                       0596
*         END;                      /* END SS OPEN ERROR     #Y30OE73*/
*     END;                          /* END ALLOC OK PROCESS  #Y30OE73*/
*   ELSE                            /* ERROR ON ALLOCATION   #Y30OE73*/
*     CALL PROS99RC;                /* CALL ROUTINE TO       #Y30OE73
*                                      PROCESS ALLOC RTN CDS #Y30OE73*/
         B     @RC00570                                            0599
@RF00570 BAL   @14,PROS99RC                                        0599
*   END ALLOPNDS;                   /*                       #Y30OE73*/
@EL00003 DS    0H                                                  0600
@EF00003 DS    0H                                                  0600
@ER00003 LM    @14,@12,@SA00003                                    0600
         BR    @14                                                 0600
*                                                                  0601
*/*  ******************************************************  @Z30OE73*/
*/*                                                          @Z30OE73*/
*/*      THIS ROUTINE HANDLES ERROR RETURN CODES FROM        @Z30OE73*/
*/*      ALLOCATION AND UNALLOCATION AND DETERMINES IF THE   @Z30OE73*/
*/*      ERROR CAN BE RECOVERED FROM OR NOT                  @Z30OE73*/
*/*                                                          @Z30OE73*/
*/*      INPUTS:  -S99RB FIELD S99ERROR FOR REASON CODES     @Z30OE73*/
*/*               -REGISTER 15 RTNCDREG WITH RETURN CODE     @Z30OE73*/
*/*                                                          @Z30OE73*/
*/*      OUTPUTS: - SETUP ALLOC/UNALLOC TEXT PTRS,TEXT UNITS @Z30OE73*/
*/*                 ECT TO CONTINUE PROCESSING               @Z30OE73*/
*/*               - FOR TERMINATING ERRORS MSGS IEB577 AND   @Z30OE73*/
*/*                 IEB581 ARE ISSUED                        @Z30OE73*/
*/*      ERROR RTN CODES IN REG 15                           @Z30OE73*/
*/*         - DALSRTNE -- ENVIROMENTAL ERRORS,UNAVALIABLE    @Z30OE73*/
*/*                      SYSTEM RESOURCE, OR SYSTEM ROUTINE  @Z30OE73*/
*/*                       ERROR                              @Z30OE73*/
*/*         - DALREQDY -- REQUEST DENIDED BY INSTALLATION    @Z30OE73*/
*/*         - DALPARME -- INVALID PARM LIST                  @Z30OE73*/
*/*      REASON CODES FOR WHICH RECOVERY IS ATTEMPTED        @Z30OE73*/
*/*      WHEN ALLOCATION IS ATTEMPTED                        @Z30OE73*/
*/*         - RCDSALAJ -- DATA SET ALLOCATED TO ANOTHER JOB  @Z30OE73*/
*/*           (X'0210')                                      @Z30OE73*/
*/*         - RCDSNDDN -- NO DDNAME AVAILABLE                @Z30OE73*/
*/*           (X'0410')                                      @Z30OE73*/
*/*         - RCDSOPNE -- DATA SET ALREADY OPEN              @Z30OE73*/
*/*           (X'0420')                                      @Z30OE73*/
*/*         - RCDSEDEL -- DATA SET REQUESTED FOUND ALLOCATED @Z30OE73*/
*/*           (X'044C')   AS EDGILABLE FOR DELETION          @Z30OE73*/
*/*                                                          @Z30OE73*/
*/*  *****************************************************   @Z30OE73*/
*/*                                                          @Z30OE73*/
*                                                                  0601
*PROS99RC:                          /* PROCEDURE TO PROCESS  #Y30OE73*/
*   PROC;                           /* ALLOC/UNALLOC RTN CDS #Y30OE73*/
PROS99RC STM   @14,@12,@SA00004                                    0601
*   WTRCODE=DALLOCER;               /* SET WTRCODE FOR ALLOC @Z30OE73
*                                      OR UNALLOC ERROR      @Z30OE73*/
         MVI   WTRCODE,X'14'                                       0602
*   IF S99VERB=S99VRBAL THEN        /* IS IT AN ALLOC ERR    @Z30OE73*/
         CLI   S99VERB,X'01'                                       0603
         BNE   @RF00603                                            0603
*     DO;                           /* YES ALLOC ERR         @Z30OE73*/
*       IF RTNCDREG=DALSRTNE        /* ENVIRONENT ERROR      @Z30OE73*/
*         THEN                      /* YES                   @Z30OE73*/
         C     RTNCDREG,DALSRTNE                                   0605
         BNE   @RF00605                                            0605
*         IF(S99ERROR=RCDSOPNE×     /* IS ALLOC ERROR        @Z30OE73*/
*             S99ERROR=RCDSEDEL×    /* DATA SET              @Z30OE73*/
*             S99ERROR=RCDSALAJ×    /* RELATED               @Z30OE73*/
*             S99ERROR=RCDSNDDN)&   /*                       @Z30OE73*/
*             SVS99ERR^=S99ERROR    /* NOT SECOND ERROR      @Z30OE73*/
*           THEN                    /* YES                   @Z30OE73*/
         CLC   S99ERROR(2),RCDSOPNE                                0606
         BE    @GL00026                                            0606
         CLC   S99ERROR(2),RCDSEDEL                                0606
         BE    @GL00026                                            0606
         CLC   S99ERROR(2),RCDSALAJ                                0606
         BE    @GL00026                                            0606
         CLC   S99ERROR(2),RCDSNDDN                                0606
         BNE   @RF00606                                            0606
@GL00026 CLC   SVS99ERR(2),S99ERROR                                0606
         BE    @RF00606                                            0606
*           DO;                     /* SETUP TO KEEP PROCESS @Z30OE73
*                                      ING DATA SETS         @Z30OE73*/
*             SVS99ERR=S99ERROR;    /* SAVE ALLOC            @Z30OE73
*                                      RETURN COD E          @Z30OE73*/
         MVC   SVS99ERR(2),S99ERROR                                0608
*             ALLRETRY=ON;          /* SET FLAG TO RETRY     @Z30OE73
*                                      ALLOCATION ERROR      @Z30OE73*/
         OI    ALLRETRY,B'00000100'                                0609
*           END;                    /* END SETUP             @Z30OE73*/
*         ELSE                      /* ERROR WAS NOT DATA    @Z30OE73
*                                      SET RELATED OR WAS    @Z30OE73
*                                      SECOND CONSECTIVE     @Z30OE73
*                                      OCCURANCE OF ERROR    @Z30OE73*/
*           DO;                     /* WRITE MSG'S           @Z30OE73*/
         B     @RC00606                                            0611
@RF00606 DS    0H                                                  0612
*             ALLRETRY=OFF;         /* NO RETRY TO BE        @Z30OE73
*                                      ATTEMPTED             @Z30OE73*/
         NI    ALLRETRY,B'11111011'                                0612
*             SAVS99RC=RTNCDREG;    /* SAVE RTN CODE         @Z30OE73
*                                      FOR SYS ERR MSG       @Z30OE73*/
         ST    RTNCDREG,SAVS99RC                                   0613
*             CALL SYSERMSG;        /* GO WRITE MSG'S        @Z30OE73*/
         BAL   @14,SYSERMSG                                        0614
*           END;                    /* END ALLO C MSG'S      @Z30OE73*/
*       ELSE                        /* NOT ENVIROMENT ERROR  @Z30OE73*/
*         IF RTNCDREG=DALPARME&     /* WAS INVALID           @Z30OE73*/
*             RTNCDREG^=SAVS99RC THEN/* PARAMETERS           @Z30OE73
*                                      SPECIFIED AND NOT     @Z30OE73
*                                      SECOND ERROR          @Z30OE73*/
         B     @RC00605                                            0616
@RF00605 C     RTNCDREG,DALPARME                                   0616
         BNE   @RF00616                                            0616
         C     RTNCDREG,SAVS99RC                                   0616
         BE    @RF00616                                            0616
*           DO;                     /* YES RESET TU'S        @Z30OE73*/
*             SAVS99RC=RTNCDREG;    /* SAVE ALLOC            @Z30OE73
*                                      ERROR CODE            @Z30OE73
*                                      RESET ALLOC TEXT      @Z30OE73
*                                      UNITS                 @Z30OE73*/
         ST    RTNCDREG,SAVS99RC                                   0618
*             DSNKEY=DALDSNAM;      /* RESET DSN KEY         @Z30OE73
*                                      IN DSN TEXT UNIT      @Z30OE73*/
         MVC   DSNKEY(2),@CB00616                                  0619
*             DSNFILL=TXTUFGRS;     /* RESET FILLER          @Z30OE73
*                                      SECOND FIELD OF TXT U @Z30OE73*/
         MVC   DSNFILL(2),TXTUFGRS                                 0620
*             DSNLENTH=ZERO;        /* RESET DSN LENGTH      @Z30OE73*/
         SLR   @14,@14                                             0621
         STH   @14,DSNLENTH                                        0621
*             SSRKEY=DALSSREQ;      /* RESET SUBSYS          @Z30OE73
*                                      REQUEST TXT UNIT KEY  @Z30OE73*/
         MVC   SSRKEY(2),@CB00794                                  0622
*             SSRFLAG=TXTUFGRS;     /* RESET SSR FLAG        @Z30OE73*/
         MVC   SSRFLAG(2),TXTUFGRS                                 0623
*             SSRLNTH=XSSRLNTH;     /* RESET LENGHT          @Z30OE73
*                                      OF SUB SYS NAME       @Z30OE73*/
         MVC   SSRLNTH(2),XSSRLNTH                                 0624
*             SSRNAME=SSIBSSNM;     /* RESET SUB SYS         @Z30OE73*/
*                                                                  0625
         L     @14,SSIBPTR                                         0625
         MVC   SSRNAME(4),SSIBSSNM(@14)                            0625
*             /*******************************************************/
*             /*                                                     */
*             /* NAME IN TEXT UNIT                           @Z30OE73*/
*             /*                                                     */
*             /*******************************************************/
*                                                                  0626
*             RDDNKEY=DALRTDDN;     /* RESET KEY FOR         @Z30OE73
*                                      RETURN DDNAME TXT UT  @Z30OE73*/
         MVC   RDDNKEY(2),@CB00780                                 0626
*             RDDNFLG=TXTUFGRS;     /* RESET RTN DDN         @Z30OE73
*                                      TEXT UNIT FLAGS       @Z30OE73*/
         MVC   RDDNFLG(2),TXTUFGRS                                 0627
*             RDDNLN=XRDDNLN;       /* RESET LENGTH FOR      @Z30OE73
*                                      DDNAME                @Z30OE73
*                                      RESET TEXT UINT PTRS  @Z30OE73*/
         MVC   RDDNLN(2),XRDDNLN                                   0628
*             DSNTXPTR=ADDR(DSNTXTUT);/* DSN TXT             @Z30OE73
*                                      UNIT POINTER          @Z30OE73*/
         LA    @14,DSNTXTUT                                        0629
         ST    @14,DSNTXPTR                                        0629
*             SSRTXPTR=ADDR(SSRTXTUT);/* SSR TEXT            @Z30OE73
*                                      UNIT POINTER          @Z30OE73*/
         LA    @14,SSRTXTUT                                        0630
         ST    @14,SSRTXPTR                                        0630
*             RDDNTUAD=ADDR(RDDNTXTU);/* RTN DDN             @Z30OE73
*                                      TEXT UNIT POINTER     @Z30OE73*/
         LA    @14,RDDNTXTU                                        0631
         STCM  @14,7,RDDNTUAD                                      0631
*             ENDATPT=LASTFGTU;     /* SET FLAG FOR          @Z30OE73
*                                      LAST TEXT UNIT        @Z30OE73*/
         MVC   ENDATPT(1),LASTFGTU                                 0632
*           END;                    /* END RESET OF T U " S  @Z30OE73*/
*         ELSE                      /* ERROR NOT RETRYABLE   @Z30OE73*/
*           DO;                     /* WRITE MSG             @Z30OE73*/
         B     @RC00616                                            0634
@RF00616 DS    0H                                                  0635
*             SAVS99RC=RTNCDREG;    /* SAVE RTN CODE         @Z30OE73
*                                      SYS ERROR MSG         @Z30OE73*/
         ST    RTNCDREG,SAVS99RC                                   0635
*             CALL SYSERMSG;        /* WRITE MSG'S           @Z30OE73*/
         BAL   @14,SYSERMSG                                        0636
*           END;                    /* END WRITE MSG         @Z30OE73*/
*     END;                          /* END ALLOC ERRORS      @Z30OE73*/
*   ELSE                            /* MUST BE UNALLOC ERROR @Z30OE73*/
*     IF RTNCDREG=DALPARME&         /* WAS ERROR FOR         @Z30OE73*/
*         RTNCDREG^=SAVS99RC THEN   /* INVALID PARAMETERS    @Z30OE73
*                                      AND NOT SECOND TIME   @Z30OE73*/
         B     @RC00603                                            0639
@RF00603 C     RTNCDREG,DALPARME                                   0639
         BNE   @RF00639                                            0639
         C     RTNCDREG,SAVS99RC                                   0639
         BE    @RF00639                                            0639
*       DO;                         /* YES RESET UNALLOC     @Z30OE73
*                                      TEXT UNITS AND PTRS   @Z30OE73*/
*         DDNKEY=DUNDDNAM;          /* RESET UNALLOC DDN     @Z30OE73
*                                      TEXT UNIT KEY         @Z30OE73*/
         MVC   DDNKEY(2),@CB00080                                  0641
*         DDNFLG=TXTUFGRS;          /* RESET DDN FLAGS       @Z30OE73*/
         MVC   DDNFLG(2),TXTUFGRS                                  0642
*         DDNLEN=XRDDNLN;           /* RESET DDN LENGTH      @Z30OE73*/
         MVC   DDNLEN(2),XRDDNLN                                   0643
*         DISPKEY=DUNOVDSP;         /* RESET UNALLOC DISP    @Z30OE73
*                                      KEY                   @Z30OE73*/
         MVC   DISPKEY(2),@CB00621                                 0644
*         DISPFLG=TXTUFGRS;         /* RESET DISP FLAGS      @Z30OE73*/
         MVC   DISPFLG(2),TXTUFGRS                                 0645
*         DISPPARM=DISPDELT;        /* SET DISP PARM TO DEL  @Z30OE73*/
         MVI   DISPPARM,X'04'                                      0646
*         DDNTXPTR=ADDR(DDNTXTUT);  /* RESET DDN TXT         @Z30OE73
*                                      UNIT POINTER          @Z30OE73*/
         LA    @14,DDNTXTUT                                        0647
         ST    @14,DDNTXPTR                                        0647
*         DISPTXAD=ADDR(DISPTXUT);  /* RESET DISP            @Z30OE73
*                                      TEXT UNIT POINTER     @Z30OE73*/
         LA    @14,DISPTXUT                                        0648
         STCM  @14,7,DISPTXAD                                      0648
*         UAPTRSED=LASTFGTU;        /* RESET END OF TXT      @Z30OE73
*                                      POINTERS FLAG         @Z30OE73*/
         MVC   UAPTRSED(1),LASTFGTU                                0649
*         WTRCODE=OPENERR;          /* SET WTRCODE EQ TO     @Z30OE73
*                                      OPEN ERROR SO CAN     @Z30OE73
*                                      TRY TO UNALLOC D S    @Z30OE73*/
         MVI   WTRCODE,X'24'                                       0650
*         ALLRETRY=ON;              /* SET SWITCH FOR RETRY  @Z30OE73*/
         OI    ALLRETRY,B'00000100'                                0651
*         CALL CLSUNALC;            /* TRY TO UNALLOC        @Z30OE73*/
         BAL   @14,CLSUNALC                                        0652
*       END;                        /* END RETRY UNALLOC     @Z30OE73*/
*     ELSE                          /* NON RETRYABLE ERROR   @Z30OE73*/
*       DO;                         /* ISSUE MSG'S           @Z30OE73*/
         B     @RC00639                                            0654
@RF00639 DS    0H                                                  0655
*         ALLRETRY=OFF;             /* MAKE SURE RETRY FLG   @Z30OE73
*                                      IS NOT SET            @Z30OE73*/
         NI    ALLRETRY,B'11111011'                                0655
*         SAVS99RC=RTNCDREG;        /* SAVE RTN CODE         @Z30OE73
*                                      FOR SYS ERR MSG       @Z30OE73*/
         ST    RTNCDREG,SAVS99RC                                   0656
*         CALL SYSERMSG;            /* WRITE ERROR MSG'S     @Z30OE73
*                                      IEB577 AND IEB581     @Z30OE73*/
         BAL   @14,SYSERMSG                                        0657
*       END;                        /* END ISSUE MSG'S       @Z30OE73*/
*   END PROS99RC;                   /* END ALLOC ERRR PROC   #Y30OE73*/
@EL00004 DS    0H                                                  0659
@EF00004 DS    0H                                                  0659
@ER00004 LM    @14,@12,@SA00004                                    0659
         BR    @14                                                 0659
*                                                                  0660
*/*                                                          @Y30OE73*/
*/*  ******************************************************  @Y30OE73*/
*/*                                                          @Y30OE73*/
*/*      END OF DISKETTE PROCESSING CODE                     @Y30OE73*/
*/*      -ENTERED WHEN PUT ENCOUNTERS AN END OF DISKETTE     @Y30OE73*/
*/*       CONDITION .                                        @Y30OE73*/
*/*      - THE ACCESS METHOD HAS PLACED A CODE OF X'0800' IN @Y30OE73*/
*/*        RPLFDBK1 AND RPLFDBK2 FIELDS                      @Y30OE73*/
*/*      - THE ACBVSSER FIELD CONTAINS THE VOL SER FOR THE   @Y30OE73*/
*/*        DISKETTE JUST WRITTEN .                           @Y30OE73*/
*/*      -A VOLSER IS ADDED TO THE MSG WRITER LIST AND WHEN  @Y30OE73*/
*/*       NECESSARY MSG IEB571I IS ISSUED.                   @Y30OE73*/
*/*                                                          @Y30OE73*/
*/*      INPUTS:                                             @Y30OE73*/
*/*         -WRITER WORK AREA WITH MSG WRITER LIST PARMS SET @Y30OE73*/
*/*          UP FOR MSG IEB571                               @Y30OE73*/
*/*      OUTPUTS:                                            @Y30OE73*/
*/*         -MSG WRITER PARAMETER LIST UPDATED WITH A VOLSER @Y30OE73*/
*/*         -MSG IEB571I ISSUED AT END OF INPUT DATA OR WHEN @Y30OE73*/
*/*          ALL POSITIONS FOR VOLSERS ARE FULL              @Y30OE73*/
*/*         -RETURN CODES SET TO INDICATE GOOD PUT           @Y30OE73*/
*/*                                                          @Y30OE73*/
*/*  ******************************************************* @Y30OE73*/
*/*                                                          @Y30OE73*/
*                                                                  0660
*   RESPECIFY                                                      0660
*     RTNREG RSTD;                  /*                       @Y30OE73*/
*PROCEOD:                           /*                       @Y30OE73*/
*   PROC                            /* END OF DISKT PROC     @Y30OE73*/
*       OPTIONS(SAVEAREA,NOSAVE);   /* OPTIONS TO SAVE       @Y30OE73
*                                      REG 14 AND PROVIDE    @Y30OE73
*                                      A SAVEAREA            @Y30OE73*/
PROCEOD  ST    @13,@SA00005+4                                      0661
         LA    @00,@SA00005                                        0661
         LR    @13,@00                                             0661
*   SRTNEOD=RTNREG;                 /* SAVE RTN ADDR TO      @Y30OE73
*                                      RETURN TO 3540 A M    @Y30OE73
*                                      AFTER EOD PROCESSING  @Y30OE73*/
         LR    SRTNEOD,RTNREG                                      0662
*   RESPECIFY                                                      0663
*     RTNREG UNRSTD;                /*                       @Y30OE73*/
*   RESPECIFY                                                      0664
*     IHADCB BASED(OUTDCBPT);       /* SET ADDR TO           @Y30OE73
*                                      OUTPUT DCB            @Y30OE73*/
*   FIRSTDKT=OFF;                   /* FIRST DSKT FLAG OFF   @Y30OE73*/
         NI    FIRSTDKT,B'11110111'                                0665
*/*                                                          @Y30OE73*/
*/*       IEB571I MESSAGE PROCESSING                         @Y30OE73*/
*/*                                                          @Y30OE73*/
*                                                                  0666
*   SER(VOLINDX)=ACBVSSER;          /* SET VOL ID IN         @Y30OE73
*                                      LIST FOR MESSAGE      @Y30OE73*/
         SLR   @14,@14                                             0666
         ICM   @14,3,VOLINDX                                       0666
         LR    @10,@14                                             0666
         SLA   @10,3                                               0666
         LA    @09,SER-8(@10)                                      0666
         L     @10,AMWAPTR                                         0666
         MVC   0(6,@09),ACBVSSER(@10)                              0666
*   VOLINDX=VOLINDX+ONE;            /* INCREMENT VOL INDEX   @Y30OE73*/
         LA    @14,1(,@14)                                         0667
         STH   @14,VOLINDX                                         0667
*   IF VOLINDX>MAXVOLS×             /* IS MSG IEB571 TO BE   @Y30OE73
*                                      PRINTED-5 VOLSERS     @Y30OE73*/
*       INPUTEOD=ON                 /* OR END INPUT DATA     @Y30OE73*/
*     THEN                          /* YES                   @Y30OE73*/
         CLC   VOLINDX(2),MAXVOLS                                  0668
         BH    @RT00668                                            0668
         TM    INPUTEOD,B'00000100'                                0668
         BNO   @RF00668                                            0668
@RT00668 DS    0H                                                  0669
*     DO;                           /* LINKAGE TO MSG WTR    @Y30OE73*/
*/*                                                          @Y30OE73*/
*                                                                  0670
*       MSGID=MSG571I;              /* SET MSG CODE FOR      @Y30OE73
*                                      MSG IEB571I DSID ON   @Y30OE73
*                                      VOLSERS MSG           @Y30OE73*/
         MVI   MSGID,X'14'                                         0670
*       DSIDKEY=KDSID;              /* SET KEY TO INCLUDE    @Y30OE73
*                                      DSID IN MSG           @Y30OE73*/
         MVI   DSIDKEY,X'06'                                       0671
*       MSGDSIDI=SSSODSID;          /* SET DSID IN MSG       @Y30OE73*/
         MVC   MSGDSIDI(8),SSSODSID                                0672
*       MJOBKEY=KJOBN;              /* SET KEY TO INCLUDE    @Y30OE73
*                                      JOBNAME IN MSG        @Y30OE73*/
         MVI   MJOBKEY,X'0B'                                       0673
*       MJOBN=SSSOJOBN;             /* SET JOBNAME IN MSG    @Y30OE73*/
         MVC   MJOBN(8),SSSOJOBN                                   0674
*       DO INDX=ONE TO(VOLINDX-ONE);/* FILL IN               @Y30OE73
*                                      VOL SER KEYS FOR MSG  @Y30OE73*/
         LA    @14,1                                               0675
         B     @DE00675                                            0675
@DL00675 DS    0H                                                  0676
*         VOLKEY(INDX)=KSER(INDX);  /* SET KEYS              @Y30OE73*/
         LR    @10,@14                                             0676
         SLA   @10,3                                               0676
         SLR   @00,@00                                             0676
         IC    @00,KSER-1(@14)                                     0676
         STC   @00,VOLKEY-8(@10)                                   0676
*       END;                        /* END SET VOL KEYS      @Y30OE73*/
         AH    @14,@CH00070                                        0677
@DE00675 STH   @14,INDX                                            0677
         SLR   @10,@10                                             0677
         ICM   @10,3,VOLINDX                                       0677
         BCTR  @10,0                                               0677
         CR    @14,@10                                             0677
         BNH   @DL00675                                            0677
*       IF VOLINDX<=MAXVOLS THEN    /* DOES MSG NEED         @Z30OE73
*                                      TO BE SHORTENED       @Z30OE73*/
         CLC   VOLINDX(2),MAXVOLS                                  0678
         BH    @RF00678                                            0678
*         DO INDX=VOLINDX TO MAXVOLS;/* SET MSG WITH         @Y30OE73
*                                      LOP KEYS IN UNUSED    @Y30OE73
*                                      VOLSER KEYS           @Y30OE73*/
         SLR   @14,@14                                             0679
         ICM   @14,3,VOLINDX                                       0679
         B     @DE00679                                            0679
@DL00679 DS    0H                                                  0680
*           VOLKEY(INDX)=LOPCON;    /* STICK IN LOP          @Y30OE73
*                                      OPTION IN UNUSED KEYS @Y30OE73*/
         LR    @10,@14                                             0680
         SLA   @10,3                                               0680
         SLR   @00,@00                                             0680
         IC    @00,LOPCON                                          0680
         STC   @00,VOLKEY-8(@10)                                   0680
*         END;                      /* END LOP LOOP          @Y30OE73*/
         AH    @14,@CH00070                                        0681
@DE00679 STH   @14,INDX                                            0681
         SLR   @10,@10                                             0681
         ICM   @10,3,MAXVOLS                                       0681
         CR    @14,@10                                             0681
         BNH   @DL00679                                            0681
*       RESPECIFY                                                  0682
*         REG1 RSTD;                /* RESTRICT REG1         @Y30OE73*/
@RF00678 DS    0H                                                  0683
*       REG1=ADDR(MSGWTLST);        /* SET PTR TO MSG        @Y30OE73
*                                      WRITER LIST           @Y30OE73*/
         LA    REG1,MSGWTLST                                       0683
*       CALL IOEDKMSG;              /* WRITE MSG TO OP       @Y30OE73
*                                      RESET VOL KEYS FOR    @Y30OE73*/
         L     @15,@CV03341                                        0684
         BALR  @14,@15                                             0684
*       DO INDX=ONE TO MAXVOLS;     /* NXT MSG               @Y30OE73*/
         LA    @14,1                                               0685
         B     @DE00685                                            0685
@DL00685 DS    0H                                                  0686
*         VOLKEY(INDX)=KSKIP;       /* RESET KEYS            @Y30OE73*/
         LR    @10,@14                                             0686
         SLA   @10,3                                               0686
         SLR   @00,@00                                             0686
         STC   @00,VOLKEY-8(@10)                                   0686
*       END;                        /* END OF RESET KEYS     @Y30OE73*/
         AH    @14,@CH00070                                        0687
@DE00685 STH   @14,INDX                                            0687
         SLR   @10,@10                                             0687
         ICM   @10,3,MAXVOLS                                       0687
         CR    @14,@10                                             0687
         BNH   @DL00685                                            0687
*       DSIDKEY=KSKIP;              /* RESET DSID KEY        @Y30OE73*/
         MVI   DSIDKEY,X'00'                                       0688
*       MJOBKEY=KSKIP;              /* RESET JOBNAME KEY     @Y30OE73*/
         MVI   MJOBKEY,X'00'                                       0689
*       VOLINDX=ONE;                /* RESET VOL INDEX       @Y30OE73*/
         MVC   VOLINDX(2),@CH00070                                 0690
*     END;                          /* END OF MSG571 PROC    @Y30OE73*/
*   RPLFDBK1=GOODPUT;               /* SET FEED BACK FOR GOOD      0692
*                                                            @Y30OE73
*                                      PUT                   @Y30OE73*/
@RF00668 L     @14,AMWAPTR                                         0692
         MVI   RPLFDBK1(@14),X'00'                                 0692
*   RESPECIFY                                                      0693
*     RTNREG RSTD;                  /*                       @Y30OE73*/
*   RTNREG=SRTNEOD;                 /* RESTORE RTN REG       @Y30OE73*/
         LR    RTNREG,SRTNEOD                                      0694
*   RESPECIFY                                                      0695
*     RTNREG UNRSTD;                /*                       @Y30OE73*/
*   END PROCEOD;                    /* END OF EOD PROC       @Y30OE73*/
@EL00005 L     @13,4(,@13)                                         0696
@EF00005 DS    0H                                                  0696
@ER00005 BR    @14                                                 0696
*                                                                  0697
*/*                                                          @Y30OE73*/
*/*  ******************************************************* @Y30OE73*/
*/*                                                          @Y30OE73*/
*/*      OUTPUT SYNAD ROUTINE:                               @Y30OE73*/
*/*      THIS RTN RECIEVES CONTROL FROM THE 3540 PUT MODULE  @Y30OE73*/
*/*      IOEDKPUT WHEN:                                      @Y30OE73*/
*/*      -  A DELIMINATOR DISKETTE IS ENCOUNTERED            @Y30OE73*/
*/*      - A PERMANENT I/O ERROR OCCURES ON THE 3540 DEVICE  @Y30OE73*/
*/*                                                          @Y30OE73*/
*/*      FOR DELIMINATOR DISKETTES FLAGS ARE SET TO CAUSE    @Y30OE73*/
*/*      THE DISKETTE WRITER TO STOP PROCESSING SND A        @Y30OE73*/
*/*      RETURN CODE FOR THE WRITER IS SET                   @Y30OE73*/
*/*                                                          @Y30OE73*/
*/*      FOR PERMANENT I/O ERRORS RECOVERY IS ATTEMPTED FOR  @Y30OE73*/
*/*      THE FIRST OCCURANCE OF AND ERROR ON A DATA SET AND  @Y30OE73*/
*/*      WHEN THE RECORD COUNTERS ARE VALID                  @Y30OE73*/
*/*                                                          @Y30OE73*/
*/*  ******************************************************* @Y30OE73*/
*/*                                                          @Y30OE73*/
*                                                                  0697
*   RESPECIFY                                                      0697
*     RTNREG RSTD;                  /*                       @Y30OE73*/
*OUTERRRT:                          /*                       @Y30OE73*/
*   PROC                            /* SYNAD ROUTINE OUTPUT  @Y30OE73*/
*       OPTIONS(SAVEAREA,NOSAVE);   /* OPTIONS TO SAVE       @Y30OE73
*                                      REG14 AND PROVIDE     @Y30OE73
*                                      SAVEAREA              @Y30OE73*/
OUTERRRT ST    @13,@SA00006+4                                      0698
         LA    @00,@SA00006                                        0698
         LR    @13,@00                                             0698
*   SRTNOSYD=RTNREG;                /* SAVE RTN REG TO       @Y30OE73
*                                      RETURN TO 3540 A M    @Y30OE73
*                                      AFTER OUTPUT ERR PROC @Y30OE73*/
         LR    SRTNOSYD,RTNREG                                     0699
*   RESPECIFY                                                      0700
*     RTNREG UNRSTD;                /*                       @Y30OE73*/
*   IF RPLFDBK1=SYNADCCD&           /* IS RTN CODE FROM PUT  @Y30OE73*/
*       RPLFDBK2=DLMDKTRC THEN      /* FOR DELIMINATOR DISKT @Y30OE73*/
         L     @14,AMWAPTR                                         0701
         CLI   RPLFDBK1(@14),X'0C'                                 0701
         BNE   @RF00701                                            0701
         CLI   RPLFDBK2(@14),X'04'                                 0701
         BNE   @RF00701                                            0701
*     DO;                           /* YES PROC DLM DSKT     @Y30OE73*/
*       WRTDSFLG=OFF;               /* STOP PROCESSING DATA  @Y30OE73
*                                      SETS                  @Y30OE73*/
*       RDWRTFLG=OFF;               /* STOP WRITING CURRENT  @Y30OE73
*                                      DATA SET              @Y30OE73*/
         NI    WRTDSFLG,B'11001111'                                0704
*       WTRCODE=DLMDSKTE;           /* SET WTR RTN CODE      @Y30OE73*/
         MVI   WTRCODE,X'30'                                       0705
*       IF NRECDKT1>ZERO THEN       /* CALL PROCEOD TO       @Z30OE73*/
         ICM   @14,15,NRECDKT1                                     0706
         BNP   @RF00706                                            0706
*         DO;                       /* WRITE MSG IEB571I FOR @Z30OE73*/
*           INPUTEOD=ON;            /* VOLS ALREADY WRITTEN  @Z30OE73*/
         OI    INPUTEOD,B'00000100'                                0708
*           CALL PROCEOD;           /* FOR THIS DATA SET     @Z30OE73*/
         BAL   @14,PROCEOD                                         0709
*           INPUTEOD=OFF;           /* AND RESUME PROCESSING @Z30OE73*/
         NI    INPUTEOD,B'11111011'                                0710
*         END;                      /*                       @Y30OE73*/
*     END;                          /* END PROC DLM DSKT     @Y30OE73*/
@RF00706 DS    0H                                                  0713
*   IF RPLFDBK1=SYNADCCD&           /* IS RTN CODE FOR PERM  @Y30OE73*/
*       RPLFDBK2=PERMIOE THEN       /* I/O ERROR             @Y30OE73*/
@RF00701 L     @14,AMWAPTR                                         0713
         CLI   RPLFDBK1(@14),X'0C'                                 0713
         BNE   @RF00713                                            0713
         CLI   RPLFDBK2(@14),X'0C'                                 0713
         BNE   @RF00713                                            0713
*     DO;                           /* YES ATTEMPT RETRY     @Y30OE73*/
*       WTRCODE=DSKTPIOE;           /* SET RTN CODE FOR WTR  @Y30OE73
*                                      OF PERM I/O ERR       @Y30OE73*/
         MVI   WTRCODE,X'28'                                       0715
*       IF RPLFDBK3=EOVERNDK THEN   /* TEST IF I/O ERR       @Y30OE73
*                                      OCCURED ON NEXT DISKT @Y30OE73
*                                      DURING EOV            @Y30OE73*/
         CLI   RPLFDBK3(@14),X'04'                                 0716
         BNE   @RF00716                                            0716
*         CALL PROCEOD;             /* FOR EOV ERROR ON NXT  @Y30OE73
*                                      DISKETTE NEED TO      @Y30OE73
*                                      UPDATE FOR IEB571 MSG @Y30OE73*/
         BAL   @14,PROCEOD                                         0717
*       IF FIRSTIOE=OFF&            /* IS RECOVERY TO BE     @Y30OE73*/
*           NORETRY=OFF THEN        /* ATTEMPTED             @Y30OE73*/
@RF00716 TM    FIRSTIOE,B'00000001'                                0718
         BNZ   @RF00718                                            0718
         TM    NORETRY,B'10000000'                                 0718
         BNZ   @RF00718                                            0718
*         DO;                       /* YES TRY RECOVERY      @Y30OE73*/
*           FIRSTIOE=ON;            /* SET FLG TO INDICATE   @Y30OE73
*                                      THAT RECOVERY WAS     @Y30OE73
*                                      ATTEMPTED FOR THIS DS @Y30OE73*/
         OI    FIRSTIOE,B'00000001'                                0720
*/*                                                          @Y30OE73*/
*/*      FIRST TRY TO REPOSITION THE INPUT DATA SET          @Y30OE73*/
*/*                                                          @Y30OE73*/
*                                                                  0721
*           GEN(   CLOSE   (INPUTDCB)     );/*               @Y30OE73
*                                      CLOSE INPUT DATA SET  @Y30OE73*/
            CLOSE   (INPUTDCB)
*           GEN(   OPEN   (INPUTDCB,(INPUT))   );/*          @Y30OE73
*                                      REOPEN THE INPUT DATA @Y30OE73
*                                      SET TO BEGIN READING  @Y30OE73
*                                      THE SUBSYSTEM D S ALL @Y30OE73
*                                      OVER AGAIN            @Y30OE73*/
            OPEN   (INPUTDCB,(INPUT))
*           RESPECIFY                                              0723
*             IHADCB BASED(INDCBPTR);/* SET                  @Z30OE73
*                                      ADDRESSABILITY TO     @Z30OE73
*                                      INPUT DCB             @Z30OE73*/
*           IF DCBOFOPN=ON THEN     /* TEST IF REOPEN        @Y30OE73
*                                      SUCCESSFUL            @Y30OE73*/
         L     @14,INDCBPTR                                        0724
         TM    DCBOFOPN+40(@14),B'00010000'                        0724
         BNO   @RF00724                                            0724
*             DO;                   /* YES ATTEMPT TO RE     @Y30OE73
*                                      POSITION DATA SET     @Y30OE73*/
*/*                                                          @Y30OE73*/
*/*      CALCULATE THE NUMBER OF RECORDS TO READ BEFORE      @Y30OE73*/
*/*      NORMAL PROCESSING CAN CONTINUE                      @Y30OE73*/
*/*                                                          @Y30OE73*/
*                                                                  0726
*               IF NRECDKTR=ZERO THEN/* CK IF                @Y30OE73
*                                      DATA SET IS SINGLE VOL      0726
*                                                            @Z30OE73
*                                      VOLUME - YES          @Y30OE73*/
         SLR   @14,@14                                             0726
         C     @14,NRECDKTR                                        0726
         BNE   @RF00726                                            0726
*                 NRECSRRD=ZERO;    /* NO RCORDS             @Z30OE73
*                                      NEED TO BE READ TO    @Y30OE73
*                                      REPOSITION FOR RETRY  @Y30OE73*/
         ST    @14,NRECSRRD                                        0727
*               ELSE                /* NOT SINGLE VOLUME     @Y30OE73*/
*                 NRECSRRD=NRECDKT1+/* NUMBER                @Y30OE73
*                                      OF RECORDS TO REREAD  @Y30OE73
*                                      IS THE NUMBER WRITTEN @Y30OE73
*                                      ON THE FIRST DISKT    @Y30OE73
*                                      PLUS                  @Y30OE73*/
*                     (NRECDKTR/1898)*1898;/*                @Z30OE73
*                                      THE NUMBER FOF RECORDS      0728
*                                                            @Y30OE73
*                                      WRITTEN ON FULL DISKTS      0728
*                                                            @Z30OE73*/
         B     @RC00726                                            0728
@RF00726 LA    @14,1898                                            0728
         L     @06,NRECDKTR                                        0728
         SRDA  @06,32                                              0728
         DR    @06,@14                                             0728
         MR    @06,@14                                             0728
         AL    @07,NRECDKT1                                        0728
         ST    @07,NRECSRRD                                        0728
*/*                                                          @Y30OE73*/
*/*      NRECSRRD CONTAINS THE NUMBER OF RECORDS TO  REREAD  @Y30OE73*/
*/*      BEFORE ATTEMPTING TO WRITE ON THE NXT SCRATCH DISKT @Y30OE73*/
*/*                                                          @Y30OE73*/
*/*                                                          @Y30OE73*/
*/*      REPOSITION SUB SYSTEM DATA SET TO RETRY START POINT @Y30OE73*/
*/*      - FIRST WRITTEN ON DISKETTE THAT PIOE OCCURED       @Y30OE73*/
*/*                                                          @Y30OE73*/
*                                                                  0729
*RETRYRDL:                          /*                       @Y30OE73*/
*               DO RETRYI=ONE TO NRECSRRD;/*                 @Y30OE73
*                                      REREAD RECORDS UPTO   @Y30OE73
*                                      RETRY START POINT     @Y30OE73*/
@RC00726 DS    0H                                                  0729
RETRYRDL LA    RETRYI,1                                            0729
         B     @DE00729                                            0729
@DL00729 DS    0H                                                  0730
*                 GEN(   GET   INPUTDCB,RECORD );/*          @Z30OE73
*                                      READ RECORDS QUICKLY  @Y30OE73*/
            GET   INPUTDCB,RECORD
*               END RETRYRDL;       /* END REREAD LOOP       @Y30OE73*/
         AL    RETRYI,@CF00070                                     0731
@DE00729 CL    RETRYI,NRECSRRD                                     0731
         BNH   @DL00729                                            0731
*/*                                                          @Y30OE73*/
*/*      RESET 3540 DEVICE AND ACCESS METHOD FOR FIRST PUT   @Y30OE73*/
*/*                                                          @Y30OE73*/
*/*      - ISSUE FORCED EOV TO FEED TO NEXT DISKETTE AND     @Y30OE73*/
*/*        RESET ACCESS METHOD FLAG FOR   SO WILL            @Y30OE73*/
*/*        LOOK FOR A SCRATCH DISKETTE                       @Y30OE73*/
*/*                                                          @Y30OE73*/
*                                                                  0732
*               SETDOPCD=EOV;       /* SET OPCODE FOR        @Y30OE73
*                                      IOESDKTO EOV          @Y30OE73*/
         L     @14,AMWAPTR                                         0732
         MVI   SETDOPCD(@14),X'02'                                 0732
*               SETDRTNC=ZERO;      /* CLEAR RTN CODE        @Y30OE73
*                                      AREA                  @Y30OE73*/
         SLR   @10,@10                                             0733
         STH   @10,SETDRTNC(,@14)                                  0733
*               REG1=ADDR(SETDLIST);/* SET PTR               @Y30OE73
*                                      TO LIST FOR IOESDKTO  @Y30OE73*/
         LA    REG1,SETDLIST(,@14)                                 0734
*               CALL IOESDKTO;      /* FEED A DISKETTE       @Y30OE73*/
         L     @15,@CV03338                                        0735
         BALR  @14,@15                                             0735
*               IF SETDRTNC=GOODEOV THEN/*                   @Y30OE73
*                                      CK EOV RTN CODE FOR   @Y30OE73
*                                      GOOD COMPLETION OF    @Y30OE73
*                                      FORCED FEED           @Y30OE73*/
         L     @14,AMWAPTR                                         0736
         ICM   @10,3,SETDRTNC(@14)                                 0736
         BNZ   @RF00736                                            0736
*                 DO;               /* YES RESET AM FLAGS    @Y30OE73
*                                      BACK TO OK AND FIRST  @Y30OE73
*                                      PUT ON SCRATCH DISKT  @Y30OE73*/
*                   RPLFDBK=ZERO;   /* RESET PUT             @Y30OE73
*                                      RTN CODE TO OK        @Y30OE73*/
         SLR   @10,@10                                             0738
         STCM  @10,7,RPLFDBK(@14)                                  0738
*                   WTRCODE=NOERROR;/* RESET                 @Y30OE73
*                                      WRITER RTN CODE       @Y30OE73*/
         MVI   WTRCODE,X'00'                                       0739
*                   INPUTEOD=OFF;   /* TURN OFF              @Z30OE73
*                                      END OF INPUT DATA FLG @Z30OE73*/
         NI    INPUTEOD,B'11111011'                                0740
*                   RPLEODS=OFF;    /* TURN OFF              @Z30OE73
*                                      LAST PUT FLAG         @Z30OE73*/
         NI    RPLEODS(@14),B'01111111'                            0741
*                   INPUTEOD=OFF;   /* TURN INPUT            @Z30OE73
*                                      END OF DATA FLG OFF   @Z30OE73*/
         NI    INPUTEOD,B'11111011'                                0742
*                   RPLEODS=OFF;    /* TURN OFF LAST         @Z30OE73
*                                      PUT BECAUSE STILL     @Z30OE73
*                                      HAVE DATA TO WRITE    @Z30OE73*/
         NI    RPLEODS(@14),B'01111111'                            0743
*                 END;              /* END RESET FLAGS       #Y30OE73*/
*               ELSE                /* FEED UNSUCCESSFUL     #Y30OE73*/
*                 REASONWF=NOGOODFD;/* SET REASON            #Y30OE73
*                                      THAT MODIFIES WTR CODE      0745
*                                                            @Y30OE73
*                                      TO UNABLE TO FEED     @Y30OE73*/
         B     @RC00736                                            0745
@RF00736 MVI   REASONWF,X'01'                                      0745
*             END;                  /* END OF REPOSITION     @Y30OE73
*                                      ATTEMPT               @Y30OE73*/
*           ELSE                    /* CANNOT REOPEN         @Y30OE73*/
*             REASONWF=NOREOPEN;    /* CAN'T REOPEN          @Y30OE73
*                                      DATA SET              @Y30OE73
*                                      UNALBE TO RECOVER     @Y30OE73
*                                      BECAUSE CAN'T REOPEN  @Y30OE73
*                                      SUBSYSETM DATA SET    @Y30OE73*/
         B     @RC00724                                            0747
@RF00724 MVI   REASONWF,X'02'                                      0747
*         END;                      /* END PROCESS FIRST     @Y30OE73
*                                      PIOE RETRY            @Y30OE73*/
*       ELSE                        /* NOT FIRST PIOE FOR    @Y30OE73
*                                      DATA SET OR NOT       @Z30OE73
*                                      RETRYABLE             @Z30OE73
*                                      BECAUSE OF COUNTER    @Z30OE73
*                                      COUNTER OVERFLOW      #Y30OE73*/
*         IF FIRSTIOE=ON THEN       /* HAS DATA SET HAD      @Y30OE73
*                                      A PREVIOUS PIOE       @Y30OE73
*                                      YES                   @Y30OE73*/
         B     @RC00718                                            0749
@RF00718 TM    FIRSTIOE,B'00000001'                                0749
         BNO   @RF00749                                            0749
*           REASONWF=SECDPIOE;      /* 2ND DS ERROR          @Y30OE73*/
         MVI   REASONWF,X'03'                                      0750
*         ELSE                      /* MUST BE NON RETRYABLE @Y30OE73*/
*           REASONWF=OVERFLWD;      /* NO RETRY-COUNTERS     @Y30OE73
*                                      OVERFLOWED            @Y30OE73*/
         B     @RC00749                                            0751
@RF00749 MVI   REASONWF,X'04'                                      0751
*/*                                                          @Y30OE73*/
*/*      CLEANUP FOR UNSUCCESSFUL RECOVERY ATTEMPTS          @Y30OE73*/
*/*                                                          @Y30OE73*/
*                                                                  0752
*       IF WTRCODE=DSKTPIOE THEN    /* IS CLEAN UP NEEDED    @Y30OE73*/
@RC00749 DS    0H                                                  0752
@RC00718 CLI   WTRCODE,40                                          0752
         BNE   @RF00752                                            0752
*         DO;                       /* YES                   @Y30OE73
*                                      CLEANUP MUST ISSUE    @Y30OE73
*                                      MESSAGES IEB571 AND   @Y30OE73
*                                      AND IEB572            @Y30OE73*/
*           IF VOLINDX>ONE THEN     /* TEST IF MSG IEB571    @Y30OE73
*                                      IS NEEDED             @Y30OE73*/
         CLC   VOLINDX(2),@CH00070                                 0754
         BNH   @RF00754                                            0754
*             DO;                   /* YES DO MSG IEB571     @Y30OE73*/
*               MSGID=MSG571I;      /* SET MSGID FOR 571     @Y30OE73*/
         MVI   MSGID,X'14'                                         0756
*               MSGDSIDI=SSSODSID;  /* SET DSID IN FOR       @Y30OE73
*                                      MSG                   @Y30OE73*/
         MVC   MSGDSIDI(8),SSSODSID                                0757
*               DSIDKEY=KDSID;      /* SET KEY TO INCLUDE    @Y30OE73
*                                      DSID IN MSG           @Y30OE73*/
         MVI   DSIDKEY,X'06'                                       0758
*               MJOBKEY=KJOBN;      /* SET KEY TO INCLUDE    @Y30OE73
*                                      JOBNAME IN MSG        @Y30OE73*/
         MVI   MJOBKEY,X'0B'                                       0759
*               MJOBN=SSSOJOBN;     /* SET JOBNAME IN MSG    @Y30OE73*/
         MVC   MJOBN(8),SSSOJOBN                                   0760
*               DO INDX=ONE TO(VOLINDX-ONE);/* SET           @Y30OE73
*                                      VOLSER KEYS FOR MSG   @Y30OE73*/
         LA    @14,1                                               0761
         B     @DE00761                                            0761
@DL00761 DS    0H                                                  0762
*                 VOLKEY(INDX)=KSER(INDX);/* SET KEY         @Y30OE73*/
         LR    @10,@14                                             0762
         SLA   @10,3                                               0762
         SLR   @04,@04                                             0762
         IC    @04,KSER-1(@14)                                     0762
         STC   @04,VOLKEY-8(@10)                                   0762
*               END;                /* END KEY SET           @Y30OE73*/
         AL    @14,@CF00070                                        0763
@DE00761 STH   @14,INDX                                            0763
         SLR   @10,@10                                             0763
         ICM   @10,3,VOLINDX                                       0763
         BCTR  @10,0                                               0763
         CR    @14,@10                                             0763
         BNH   @DL00761                                            0763
*               IF VOLINDX<=MAXVOLS THEN/* ARE THERE         @Z30OE73
*                                      ANY VOL SLOTS TO BE   @Z30OE73
*                                      SKIPPED               @Z30OE73*/
         CLC   VOLINDX(2),MAXVOLS                                  0764
         BH    @RF00764                                            0764
*                 DO INDX=VOLINDX TO MAXVOLS;/* SET          #Y30OE73
*                                      REST OF VOL KEYS TO   #Y30OE73
*                                      LOP                   #Y30OE73*/
         SLR   @14,@14                                             0765
         ICM   @14,3,VOLINDX                                       0765
         B     @DE00765                                            0765
@DL00765 DS    0H                                                  0766
*                   VOLKEY(INDX)=LOPCON;/* SET LOP           #Y30OE73
*                                      CONSTANT              #Y30OE73*/
         LR    @10,@14                                             0766
         SLA   @10,3                                               0766
         SLR   @04,@04                                             0766
         IC    @04,LOPCON                                          0766
         STC   @04,VOLKEY-8(@10)                                   0766
*                 END;              /* LOP END               #Y30OE73*/
         AL    @14,@CF00070                                        0767
@DE00765 STH   @14,INDX                                            0767
         SLR   @10,@10                                             0767
         ICM   @10,3,MAXVOLS                                       0767
         CR    @14,@10                                             0767
         BNH   @DL00765                                            0767
*               REG1=ADDR(MSGWTLST);/* SET PTR FOR MSG WTR   #Y30OE73
*                                      PARAMETER LIST        #Y30OE73*/
@RF00764 LA    REG1,MSGWTLST                                       0768
*               CALL IOEDKMSG;      /* WRITE MSG IEB571      #Y30OE73
*                                      AFTER MSG MUST RESET  @Y30OE73
*                                      MSG PARM LIST         @Y30OE73*/
         L     @15,@CV03341                                        0769
         BALR  @14,@15                                             0769
*               DSIDKEY=KSKIP;      /* SET DSID KEY TO SKIP  @Y30OE73*/
         MVI   DSIDKEY,X'00'                                       0770
*               MJOBKEY=KSKIP;      /* SET TO SKIP JOBNAME   @Y30OE73
*                                      KEY                   @Y30OE73*/
         MVI   MJOBKEY,X'00'                                       0771
*               DO INDX=ONE TO MAXVOLS;/* RESET ALL VOL      @Z30OE73
*                                      KEYS TO SKIP          @Y30OE73*/
         LA    @14,1                                               0772
         B     @DE00772                                            0772
@DL00772 DS    0H                                                  0773
*                 VOLKEY(INDX)=KSKIP;/* SET TO IGNORE VOLS   @Y30OE73*/
         LR    @10,@14                                             0773
         SLA   @10,3                                               0773
         SLR   @04,@04                                             0773
         STC   @04,VOLKEY-8(@10)                                   0773
*               END;                /*                       @Y30OE73*/
         AL    @14,@CF00070                                        0774
@DE00772 STH   @14,INDX                                            0774
         SLR   @10,@10                                             0774
         ICM   @10,3,MAXVOLS                                       0774
         CR    @14,@10                                             0774
         BNH   @DL00772                                            0774
*             END;                  /* END MSG IEB571I       @Y30OE73
*                                      ISSUE MSG IEB572I     @Y30OE73*/
*           MSGID=MSG572E;          /* SET CODE FOR MSG TO   @Y30OE73
*                                      BE ISSUED             @Y30OE73*/
@RF00754 MVI   MSGID,X'15'                                         0776
*           DEVAKEY=KDEVA;          /* SET KEY TO INCLUDE    @Y30OE73
*                                      DEVICE ADDR IN MSG    @Y30OE73*/
         MVI   DEVAKEY,X'08'                                       0777
*           DEVA=UCBNAME;           /* SET UNIT ADDR FOR MSG @Y30OE73*/
         L     @14,UCBPTR                                          0778
         MVC   DEVA(3),UCBNAME(@14)                                0778
*           REG1=ADDR(MSGWTLST);    /* SET LIST PTR FOR MSG  @Y30OE73
*                                      WRITER                @Y30OE73*/
         LA    REG1,MSGWTLST                                       0779
*           CALL IOEDKMSG;          /* WRITE MSG IEB572E     @Y30OE73*/
         L     @15,@CV03341                                        0780
         BALR  @14,@15                                             0780
*           RDWRTFLG=OFF;           /* STOP WRITING CURRENT  @Y30OE73
*                                      DATA SET              @Y30OE73*/
*           WRTDSFLG=OFF;           /* STOP WRITING DATA SETS      0782
*                                                            @Y30OE73*/
         NI    RDWRTFLG,B'11001111'                                0782
*         END;                      /* NO RECOVERY CLEANUP   @Y30OE73*/
*     END;                          /* END PROCESS PIOE      @Y30OE73*/
@RF00752 DS    0H                                                  0785
*   RESPECIFY                                                      0785
*     RTNREG RSTD;                  /*                       @Y30OE73*/
@RF00713 DS    0H                                                  0786
*   RTNREG=SRTNOSYD;                /* RESTORE RETURN ADDR   @Y30OE73
*                                      TO RETURN TO 3540 AM  @Y30OE73
*                                      AFTER RECOVERY FROM   @Y30OE73
*                                      AN OUTPUT ERROR       @Y30OE73*/
         LR    RTNREG,SRTNOSYD                                     0786
*   RESPECIFY                                                      0787
*     RTNREG UNRSTD;                /*                       @Y30OE73*/
*   END OUTERRRT;                   /* END 3540 SYNAD RTN    @Y30OE73*/
@EL00006 L     @13,4(,@13)                                         0788
@EF00006 DS    0H                                                  0788
@ER00006 BR    @14                                                 0788
*                                   /* ROUTINE               @Y30OE73*/
*/*                                                          #Y30OE73*/
*/*  ******************************************************  #Y30OE73*/
*/*                                                          #Y30OE73*/
*/*      THIS ROUTINE IS USED WHEN PROCESSING IN ONE DS MODE #Y30OE73*/
*/*      OR IN MULTI DS MODE TO CLOSE AND UNALLOCATE A       #Y30OE73*/
*/*      SUBSYSTEM DATA SET  AND PROCESS SOME OF THE ERROR   #Y30OE73*/
*/*      CLEAN UP WORK FOR ALLOC ERRORS                      #Y30OE73*/
*/*                                                          #Y30OE73*/
*/*      INPUT:                                              #Y30OE73*/
*/*      -- INPUT DCB                                        #Y30OE73*/
*/*      -- ALLOCATION TEXT UNITS AND S99RB                  #Y30OE73*/
*/*      -- WTRCODE                                          #Y30OE73*/
*/*      OUTPUT:                                             #Y30OE73*/
*/*      -- CLOSED DCB AVAILABLE FOR REUSE                   #Y30OE73*/
*/*      -- DATA SET UNALLOCATED                             #Y30OE73*/
*/*                                                          #Y30OE73*/
*/*  ******************************************************  #Y30OE73*/
*/*                                                          #Y30OE73*/
*                                                                  0789
*CLSUNALC:                                                         0789
*   PROC;                           /* INTERNAL PROCEDURE    #Y30OE73
*                                      USED TO CLOSE AND     #Y30OE73
*                                      UNALLOCATE DATA SETS  @Y30OE73*/
CLSUNALC STM   @14,@12,@SA00007                                    0789
*   IF WTRCODE^=DALLOCER&           /* IS DATA SET TO        @Y30OE73*/
*       WTRCODE^=SSDSOPNE THEN      /* BE CLOSED             @Z30OE73
*                                      YES CLOSE IT          @Y30OE73*/
         CLI   WTRCODE,20                                          0790
         BE    @RF00790                                            0790
         CLI   WTRCODE,12                                          0790
         BE    @RF00790                                            0790
*     GEN(    CLOSE INPUTDCB);      /* CLOSE SUB SYS DTA SET @Y30OE73*/
             CLOSE INPUTDCB
*   IF WTRCODE^=DALLOCER THEN       /* WAS DTA SET ALLOCATED @Y30OE73*/
@RF00790 CLI   WTRCODE,20                                          0792
         BE    @RF00792                                            0792
*     DO;                           /* YES DO UNALLOC        @Y30OE73*/
*       S99VERB=S99VRBUN;           /* SET VERB IN S99RB TO  @Y30OE73
*                                      UNALLOCATE            @Y30OE73*/
         MVI   S99VERB,X'02'                                       0794
*       S99FLAG1=S99FLAG1&&S99FLAG1;/* CLR FLAG BYT          @Y30OE73
*                                      BITS IN FLAG 1        @Y30OE73*/
         XC    S99FLAG1(2),S99FLAG1                                0795
*       S99RSC=S99RSC&&S99RSC;      /* CLEAR RTN CODE FLD    @Y30OE73*/
         XC    S99RSC(4),S99RSC                                    0796
*       S99TXTPP=ADDR(UTXTPTRS);    /* SET PTR TO TEXT       @Y30OE73
*                                      UNIT PTRS TO POINT TO @Y30OE73
*                                      THE UNALLOC TXT UNIT  @Y30OE73
*                                      TEXT POINTERS         @Y30OE73*/
         LA    @14,UTXTPTRS                                        0797
         ST    @14,S99TXTPP                                        0797
*/*                                                          @Y30OE73*/
*/*      SET UP UNALLOC TEXT UNITS                           @Y30OE73*/
*/*                                                          @Y30OE73*/
*                                                                  0798
*       UDDNAME=RDDNDDN;            /* SET UNALLOC DDN TO DDN      0798
*                                                            @Y30OE73
*                                      RETURNED FORM ALLOC   @Y30OE73*/
         MVC   UDDNAME(8),RDDNDDN                                  0798
*       IF WTRCODE=NOERROR THEN     /* FOR DATA SETS         @Y30OE73
*                                      WRITTEN OK            @Y30OE73*/
         CLI   WTRCODE,0                                           0799
         BNE   @RF00799                                            0799
*         DISPPARM=DISPDELT;        /* SET DISP FOR DATA SET @Y30OE73
*                                      TO DELETE             @Y30OE73*/
         MVI   DISPPARM,X'04'                                      0800
*       ELSE                        /* ALL DATA NOT WRITTEN  @Y30OE73*/
*         DISPPARM=DISPKEEP;        /* SET DISP TO KEEP      @Y30OE73*/
         B     @RC00799                                            0801
@RF00799 MVI   DISPPARM,X'08'                                      0801
*       REG1=ADDR(S99RBPTR);        /* SET REG 1 TO POINT    @Y30OE73
*                                      TO S99RB PTR FOR      @Y30OE73
*                                      DYNAMIC UNALLOC       @Y30OE73*/
@RC00799 LA    REG1,S99RBPTR                                       0802
*       GEN(   SVC   99   );        /* UNALLOC DATA SET      @Y30OE73*/
            SVC   99
*       IF RTNCDREG^=NOERROR THEN   /* WAS DS UNALLOC        @Z30OE73
*                                      NOT SUCCESSFUL        @Y30OE73*/
         LTR   RTNCDREG,RTNCDREG                                   0804
         BZ    @RF00804                                            0804
*         CALL PROS99RC;            /* PROCESS UNALLOC RTN   @Y30OE73
*                                      CODES FROM SVC 99     @Y30OE73*/
         BAL   @14,PROS99RC                                        0805
*       IF WTRCODE=NODSID THEN      /* IF DATA SET DID       @Y30OE73
*                                      HAD NO DSID CONT      @Y30OE73
*                                      WITH NEXT DATA SET    @Y30OE73*/
@RF00804 CLI   WTRCODE,44                                          0806
         BNE   @RF00806                                            0806
*         WTRCODE=NOERROR;          /* RESET WTRCODE         @Y30OE73*/
         MVI   WTRCODE,X'00'                                       0807
*       IF WTRCODE=SSDSOPNE THEN    /* WHEN NOT ABLE         @Z30OE73
*                                      TO OPEN SUB SYS DATA  @Z30OE73
*                                      DATA SET SET RTN CDE  @Z30OE73
*                                      SO CAN CONTINUE WITH  @Z30OE73
*                                      NEXT DATA SET         @Z30OE73*/
@RF00806 CLI   WTRCODE,12                                          0808
         BNE   @RF00808                                            0808
*         WTRCODE=NOERROR;          /* SET RTN CODE TO NO    @Z30OE73
*                                      ERROR                 @Z30OE73*/
         MVI   WTRCODE,X'00'                                       0809
*     END;                          /* END UNALLOC DATA SET  #Y30OE73*/
*   ELSE                            /* IT WAS AN ALLOC ERROR @Z30OE73*/
*     IF ALLRETRY=ON THEN           /* IS RETRY TO BE ATTEM  @Z30OE73*/
         B     @RC00792                                            0811
@RF00792 TM    ALLRETRY,B'00000100'                                0811
         BNO   @RF00811                                            0811
*       WTRCODE=NOERROR;            /* SET WTR CODE TO LOOK  @Z30OE73
*                                      LIKE NO ERROR OCCURED @Z30OE73*/
         MVI   WTRCODE,X'00'                                       0812
*   END CLSUNALC;                   /*                       #Y30OE73*/
@EL00007 DS    0H                                                  0813
@EF00007 DS    0H                                                  0813
@ER00007 LM    @14,@12,@SA00007                                    0813
         BR    @14                                                 0813
*                                                                  0814
*/*                                                          @Y30OE73*/
*/*      FUNCTION:                                           @Y30OE73*/
*/*      TO PROCESS SUBSYSTEM REQUEST RETURN CODES AND       @Y30OE73*/
*/*      DETERMINE IF THE ERROR IS ONE OF THE FOLLOWING      @Y30OE73*/
*/*      --A NORMAL OCCURANCE                                @Y30OE73*/
*/*      --A RECOVERABLE ERROR                               @Y30OE73*/
*/*      --SEVERE ENOUGH TO TERMINATE THE WRITER             @Y30OE73*/
*/*                                                          @Y30OE73*/
*/*      INPUTS:                                             @Y30OE73*/
*/*      --SSOBRETN(A 4 BYTE RETRUN CODE FIELD IN THE SSOB   @Y30OE73*/
*/*         SSSOEODS  NO MORE DATA SETS TO SELECT            @Y30OE73*/
*/*         SSSONJOB  JOB NOT FOUND                          @Y30OE73*/
*/*         SSSOINVA  INVALID SEARCH ARGUMENTS               @Y30OE73*/
*/*         SSSOUNAV  UNABLE TO PROCESS NOW                  @Y30OE73*/
*/*         SSSODUPJ  DUPLICATE JOBNAMES                     @Y30OE73*/
*/*         SSSOINVJ  INVALID JOBNAME/JOBID COMBINATION      @Y30OE73*/
*/*         SSSOIDST  INVALID DESTINATION SPECIFIED          @Y30OE73*/
*/*      --SAVESSRC                                          @Y30OE73*/
*/*                                                          @Y30OE73*/
*/*      OUTPUT:                                             @Y30OE73*/
*/*      --WTRCODE                                           @Y30OE73*/
*/*      --SAVESSRC                                          @Y30OE73*/
*/*      --ERROR MESSAGES IEB577I AND IEB581E                @Y30OE73*/
*/*                                                          @Y30OE73*/
*/*  ******************************************************  @Y30OE73*/
*/*                                                          @Y30OE73*/
*                                                                  0814
*PROCSSRC:                                                         0814
*   PROC;                           /* INTERNAL PROCEDURE    @Y30OE73
*                                      TO PROCESS SUBSYSTEM  @Y30OE73
*                                      REQUEST RETURN CODES  @Y30OE73*/
PROCSSRC STM   @14,@12,@SA00008                                    0814
*   WTRCODE=SSRERROR;               /* SET WTRCODE FOR SUB   @Y30OE73
*                                      SYSTEM REQUESTT ERR   @Y30OE73*/
         MVI   WTRCODE,X'04'                                       0815
*   IF MULTIDSM=OFF THEN            /* IS WTR IN ONE DS MODE @Y30OE73
*                                      YES                   @Y30OE73*/
         TM    MULTIDSM,B'10000000'                                0816
         BNZ   @RF00816                                            0816
*     IF SSOBRETN^=SSSOEODS THEN    /* IS THE ERROR OTHER    @Y30OE73
*                                      THAN END OF DATA SETS @Y30OE73
*                                      YES                   @Y30OE73*/
         L     @14,SSOBRETN                                        0817
         CH    @14,@CH00067                                        0817
         BE    @RF00817                                            0817
*       IF SSOBRETN^=SSSOINVA THEN  /* IS IT OTHER           @Y30OE73
*                                      THAN INVALID SEARCH   @Y30OE73
*                                      ARGUMENTS             @Y30OE73*/
         CH    @14,@CH00033                                        0818
         BE    @RF00818                                            0818
*         DO;                       /* YES                   @Y30OE73*/
*           SAVESSRC=SSOBRETN;      /* SAVE SUBSYS REQ       @Y30OE73
*                                      RETURN CODE           @Y30OE73*/
         ST    @14,SAVESSRC                                        0820
*           CALL SYSERMSG;          /* WRITE OUT MSG'S       @Y30OE73
*                                      IEB577I +IEB581E      @Y30OE73*/
         BAL   @14,SYSERMSG                                        0821
*         END;                      /* END ERROR MSG         @Y30OE73*/
*       ELSE                        /* ERROR WAS INVALID     #Y30OE73
*                                      SEARCH ARGUMENTS      #Y30OE73*/
*         IF SAVESSRC=SSSOINVA THEN /* SECOND TIME           #Y30OE73
*                                      FOR ERROR YES         #Y30OE73*/
         B     @RC00818                                            0823
@RF00818 CLC   SAVESSRC(4),@CF00033                                0823
         BNE   @RF00823                                            0823
*           CALL SYSERMSG;          /* WRITE MSG'S 577 +581  #Y30OE73*/
         BAL   @14,SYSERMSG                                        0824
*         ELSE                      /* NOT 1ST TIME SO RETRY #Y30OE73*/
*           DO;                     /* RESTORE SSSO          #Y30OE73*/
         B     @RC00823                                            0825
@RF00823 DS    0H                                                  0826
*             SAVESSRC=SSOBRETN;    /* SAVE ERROR            #Y30OE73*/
         MVC   SAVESSRC(4),SSOBRETN                                0826
*             SSSOUFLG=ZERO;        /* CLEAR USER OPTIONS    #Y30OE73
*                                      CLASS ROUTING FLAGS   @Y30OE73*/
         MVI   SSSOUFLG,X'00'                                      0827
*             SSSOFLG1=ZERO;        /* CLEAR DS              @Y30OE73
*                                      SELECTION FLAGS       @Y30OE73*/
         MVI   SSSOFLG1,X'00'                                      0828
*             IF SSIDCODE=JES2SS    /* IS SUBSYS JES2        @ZA04482*/
*               THEN                /* YES                   @ZA04482*/
         CLI   SSIDCODE,X'04'                                      0829
         BNE   @RF00829                                            0829
*               SSSOSHLD=ON;        /* SELECT HELD           @Y30OE73
*                                      DATA SETS             @Y30OE73*/
         OI    SSSOSHLD,B'10000000'                                0830
*             SSSOSCLS=ON;          /* SELECT DATA SETS      @Y30OE73
*                                      BY SYSOUT CLASS       @Y30OE73*/
@RF00829 DS    0H                                                  0832
*             SSSOSPGM=ON;          /* USE PROGRAM NAME      @Y30OE73
*                                      TO SELEST DATA SETS   @Y30OE73*/
         OI    SSSOSCLS,B'01000100'                                0832
*             SSSOFLG2=ZERO;        /* CLEAR FLAGS FOR       @Y30OE73
*                                      DISPOSITION OF D S    @Y30OE73*/
         MVI   SSSOFLG2,X'00'                                      0833
*             SSOBRETN=ZERO;        /* CLEAR SSREQ RETN CD   @Y30OE73*/
         SLR   @14,@14                                             0834
         ST    @14,SSOBRETN                                        0834
*             WTRCODE=NOERROR;      /* RESET WTRCODE         @Y30OE73
*                                      SO PROCESSING CAN     @Y30OE73
*                                      CONTINUE              @Y30OE73*/
         MVI   WTRCODE,X'00'                                       0835
*           END;                    /* END RESET SSSO        @Y30OE73*/
*     ELSE                                                         0837
*       ;                           /* FOR END OF DATA SET   @Y30OE73
*                                      DON'T DO ANYTHING     @Y30OE73*/
@RF00817 DS    0H                                                  0838
*   ELSE                            /* WTR PROCESSING MULTI  @Z30OE73
*                                      DATA SET MODE         @Z30OE73*/
*     IF SSOBRETN^=SSSOEODS THEN    /* IS IT OTHER THAN      @Z30OE73
*                                      NO MORE DATA SETS     @Z30OE73*/
         B     @RC00816                                            0838
@RF00816 L     @14,SSOBRETN                                        0838
         CH    @14,@CH00067                                        0838
         BE    @RF00838                                            0838
*       IF SSOBRETN^=SSSOINVA THEN  /* IS IT AN UNCORR       @Y30OE73
*                                      ABLE ERROR            @Y30OE73*/
         CH    @14,@CH00033                                        0839
         BE    @RF00839                                            0839
*         DO;                       /* YES                   @Y30OE73*/
*           SAVESSRC=SSOBRETN;      /* SAVE SSREQ RETN CD    @Y30OE73*/
         ST    @14,SAVESSRC                                        0841
*           CALL SYSERMSG;          /* WRITE MSG'S 577I+581E #Y30OE73*/
         BAL   @14,SYSERMSG                                        0842
*         END;                      /* END ISSUE ERR MSG     @Y30OE73*/
*       ELSE                        /* MUST BE INVALID       #Y30OE73
*                                      SEARCH ARGUMENTS      #Y30OE73*/
*         IF SAVESSRC=SSSOINVA THEN /* SECOND ERR            #Y30OE73
*                                      OF INVALID SEARCH ARGS      0844
*                                                            #Y30OE73*/
         B     @RC00839                                            0844
@RF00839 CLC   SAVESSRC(4),@CF00033                                0844
         BNE   @RF00844                                            0844
*           CALL SYSERMSG;          /* WRITE MSG'S 577I+581E #Y30OE73*/
         BAL   @14,SYSERMSG                                        0845
*         ELSE                      /* FIRST TIME SO RESET   #Y30OE73
*                                      SEARCH ARGUMENTS      #Y30OE73*/
*           DO;                     /* RESET ARG'S           #Y30OE73*/
         B     @RC00844                                            0846
@RF00844 DS    0H                                                  0847
*             SAVESSRC=SSOBRETN;    /* SAVE ERROR            #Y30OE73*/
         MVC   SAVESSRC(4),SSOBRETN                                0847
*             SSSOUFLG=ZERO;        /* CLEAR USER OPTIONS    #Y30OE73
*                                      CLASS ROUTING FLGS    #Y30OE73*/
         MVI   SSSOUFLG,X'00'                                      0848
*             SSOBRETN=ZERO;        /* CLEAR SSREQ RETN CD   @Y30OE73*/
         SLR   @14,@14                                             0849
         ST    @14,SSOBRETN                                        0849
*             IF SSIDCODE=JES2SS    /* INDICATOR FOR JES2    @ZA29643*/
*               THEN                /* YES                   @ZA04482*/
         CLI   SSIDCODE,X'04'                                      0850
         BNE   @RF00850                                            0850
*               SSSOSHLD=ON;        /* SET TO SELECT HELD    @Y30OE73
*                                      DATA SETS             @Y30OE73*/
         OI    SSSOSHLD,B'10000000'                                0851
*             SSSOSCLS=ON;          /* SELECT BY CLASS       @Y30OE73*/
@RF00850 DS    0H                                                  0853
*             SSSOSPGM=ON;          /* SELECT BY WTR NAME    @Y30OE73*/
         OI    SSSOSCLS,B'01000100'                                0853
*             IF SSSOJOBN=JOBNSAVE& /* WAS LAST REQ          @X30OE73*/
*                 SSSOJOBI=JOBISAVE THEN/* A PRIMARY         @X30OE73
*                                      SUBSYSTEM REQ         @Y30OE73*/
         CLC   SSSOJOBN(8),JOBNSAVE                                0854
         BNE   @RF00854                                            0854
         CLC   SSSOJOBI(8),JOBISAVE                                0854
         BNE   @RF00854                                            0854
*               DO;                 /* YES                   @Y30OE73*/
*                 SSSOSJBN=ON;      /* SELECT BY JOBNAM      @Y30OE73*/
         OI    SSSOSJBN,B'00010000'                                0856
*                 IF SSIDCODE=JES2SS THEN/* JES2             @ZA04482*/
         CLI   SSIDCODE,X'04'                                      0857
         BNE   @RF00857                                            0857
*                   SSSOSJBI=ON;    /* SELECT BY JOB ID      @Y30OE73*/
         OI    SSSOSJBI,B'00001000'                                0858
*                 WTRCODE=NOERROR;  /* SET RTN CODE          @Z30OE73
*                                      SO WTR WILL MAKE      @Z30OE73
*                                      ANOTHER SEC REQ       @Z30OE73
*                                      TO RETRY SSREQ        @Z30OE73*/
@RF00857 MVI   WTRCODE,X'00'                                       0859
*               END;                /* END SET FOR SEC REQ   #Y30OE73*/
*             ELSE                  /* MAKE IT A PRIMARY     @Z30OE73
*                                      REQUEST               #Y30OE73*/
*               DO;                 /*                       @Z30OE73*/
         B     @RC00854                                            0861
@RF00854 DS    0H                                                  0862
*                 SSOBRETN=SSSOEODS;/* SET SSREQ             @Z30OE73
*                                      SO PRIMARY REQ WILL   @Z30OE73
*                                      BE MADE               @Z30OE73*/
         MVC   SSOBRETN(4),@CF00067                                0862
*                 SSSOSJBN=ON;      /* SET JOB NAME FLG      @Z30OE73*/
         OI    SSSOSJBN,B'00010000'                                0863
*                 IF SSIDCODE=JES2SS THEN/* FOR JES2         @ZA04482*/
         CLI   SSIDCODE,X'04'                                      0864
         BNE   @RF00864                                            0864
*                   SSSOSJBI=ON;    /* SET JOB NAME          @ZA04482
*                                      SYSOUT CLASSES        @Z30OE73*/
         OI    SSSOSJBI,B'00001000'                                0865
*               END;                /*                       @Z30OE73*/
*           END;                    /* END RESET ARG'S       #Y30OE73*/
*     ELSE                                                         0868
*       ;                           /* MULTI DATA SET MODE   @Z30OE73
*                                      CLEANUP WILL HANDLE   #Y30OE73
*                                      END OF DATA SETS      @Z30OE73*/
@RF00838 DS    0H                                                  0869
*   END PROCSSRC;                   /*                       #Y30OE73*/
@EL00008 DS    0H                                                  0869
@EF00008 DS    0H                                                  0869
@ER00008 LM    @14,@12,@SA00008                                    0869
         BR    @14                                                 0869
*                                                                  0870
*/*                                                          #Y30OE73*/
*/*  ******************************************************* #Y30OE73*/
*/*                                                          #Y30OE73*/
*/*        FUNCTION:                                         #Y30OE73*/
*/*       TO PROCESS SUBSYSTEM INTERFACE RETURN CODES FOR    #Y30OE73*/
*/*       FOR BAD SSOB'S LOGICAL ERRORS RECOVERY IS          #Y30OE73*/
*/*       ATTEMPTED ONCE                                     #Y30OE73*/
*/*         FOR ALL OTHER ERRORS THE WRITER IS TERMINATED +  @Z30OE73*/
*/*         THE MESSAGES IEB577I AND IEB581E ISSUED          #Y30OE73*/
*/*                                                          #Y30OE73*/
*/*       INPUT:                                             #Y30OE73*/
*/*       -- REGISTER 15 CONTAINS RETURN CODE ( SEE MAP OF   #Y30OE73*/
*/*           SSOB )                                         #Y30OE73*/
*/*            SSRTNSUP - SUBSYSTEM DOES NOT SUPPORT THIS    #Y30OE73*/
*/*            FUNCTION                                      #Y30OE73*/
*/*            SSRTNTUP - SUBSYSTEM EXIST BUT IS NOTTUP      #Y30OE73*/
*/*            SSRTNOSS - SUBSYSTEM DOES ONT EXIST           #Y30OE73*/
*/*            SSRTDIST - FUNCTION NOT COMPLETED DISASTROUS  #Y30OE73*/
*/*            ERROR                                         #Y30OE73*/
*/*            SSRTLERR - LOGICAL ERROR (BAD SSOB,FORMAT     #Y30OE73*/
*/*            LENGTH....)                                   #Y30OE73*/
*/*                                                          #Y30OE73*/
*/*        OUTPUT:                                           #Y30OE73*/
*/*        -- FOR RTN CODES OF 4(FUNCTION NOT SUPPORTED),    #Y30OE73*/
*/*           8(SUBSYS NOT UP),12(SUB SYS DOES NOT EXIST ),  #Y30OE73*/
*/*           AND 16(DISTASTROUS ERROR) MSG IEB577I AND IEB581E      */
*/*           IEB581E AND ISSUED                             #Y30OE73*/
*/*        -- FOR RTN CODE 20( LOGICAL ERROR ) RETRY ONCE    #Y30OE73*/
*/*           AND THEN ISSUE THE MSG'S IF RETRY FAILS        #Y30OE73*/
*/*                                                          #Y30OE73*/
*/*  ******************************************************  #Y30OE73*/
*/*                                                          #Y30OE73*/
*                                                                  0870
*SSIERRRT:                          /* SUBSYSTEM INTERFACE   #Y30OE73*/
*   PROC;                           /* ERROR PROCESSING CODE #Y30OE73*/
SSIERRRT STM   @14,@12,@SA00009                                    0870
*/*                                                          #Y30OE73*/
*                                                                  0871
*   IF RTNCDREG=SSRTNSUP×           /* TEST IF MSG IEB577I   #Y30OE73*/
*       RTNCDREG=SSRTNTUP×          /* AND MSG IEB581E       #Y30OE73*/
*       RTNCDREG=SSRTNOSS×          /* SHOULD BE ISSUED      #Y30OE73*/
*       RTNCDREG=SSRTDIST×          /*                       #Y30OE73*/
*       RTNCDREG=SAVSSIRC THEN      /*                       @Z30OE73*/
         CH    RTNCDREG,@CH00067                                   0871
         BE    @RT00871                                            0871
         CH    RTNCDREG,@CH00062                                   0871
         BE    @RT00871                                            0871
         CH    RTNCDREG,@CH00033                                   0871
         BE    @RT00871                                            0871
         CH    RTNCDREG,@CH00058                                   0871
         BE    @RT00871                                            0871
         C     RTNCDREG,SAVSSIRC                                   0871
         BNE   @RF00871                                            0871
@RT00871 DS    0H                                                  0872
*     DO;                           /* YES ISSUE MSGS        @Z30OE73*/
*       SAVSSIRC=RTNCDREG;          /* SAVE ERROR RTN CODE   @Z30OE73*/
         ST    RTNCDREG,SAVSSIRC                                   0873
*       WTRCODE=SSIERROR;           /* SET WTR RTN CODE FOR  #Y30OE73
*                                      SUB SYS INTERFACE ERR #Y30OE73*/
         MVI   WTRCODE,X'10'                                       0874
*       CALL SYSERMSG;              /* CALL RTN TO WRITE     #Y30OE73
*                                      MSG 577 AND 581       #Y30OE73*/
         BAL   @14,SYSERMSG                                        0875
*       WRTDSFLG=OFF;               /* STOP WRITING DATA     #Y30OE73
*                                      SETS TO DISKETTE      #Y30OE73*/
         NI    WRTDSFLG,B'11011111'                                0876
*     END;                          /* END MSG WRITING       #Y30OE73*/
*   ELSE                            /* RESET SSOB TO RETRY   #Y30OE73*/
*     DO;                           /* DO RESET              #Y30OE73*/
         B     @RC00871                                            0878
@RF00871 DS    0H                                                  0879
*       SAVSSIRC=RTNCDREG;          /* SAVE RTN CDE TO CK    @Z30OE73
*                                      SECOND ERROR          @Z30OE73*/
         ST    RTNCDREG,SAVSSIRC                                   0879
*       SSREQLST=ADDR(SSOB);        /* INIT SSR LIST WITH    #Y30OE73
*                                      SSOB PTR              #Y30OE73*/
         LA    @14,SSOB                                            0880
         ST    @14,SSREQLST                                        0880
*       SSREQEND=ON;                /* INDICATE ONLY 1 SSOB  #Y30OE73*/
         OI    SSREQEND,B'10000000'                                0881
*       SSOBID=SSOBCHAR;            /* SET EYE CATCHER IN    #Y30OE73
*                                      SSOB                  #Y30OE73*/
         MVC   SSOBID(4),SSOBCHAR                                  0882
*       SSOBLEN=LENGTH(SSOB);       /* RESET SSOB LENGTH     #Y30OE73*/
         MVC   SSOBLEN(2),@CH00168                                 0883
*       SSOBFUNC=SSOBSOUT;          /* SET FUNCTION TO       #Y30OE73
*                                      PROCESS SYSOUT        #Y30OE73*/
         MVC   SSOBFUNC(2),@CH00070                                0884
*       SSOBSSIB=ZERO;              /* SET SSIB PTR TO ZERO  #Y30OE73*/
         SLR   @14,@14                                             0885
         ST    @14,SSOBSSIB                                        0885
*       SSOBRETN=ZERO;              /* CLEAR SSOB RTN CODE   #Y30OE73*/
         ST    @14,SSOBRETN                                        0886
*     END;                          /* END SSOB RESET        #Y30OE73*/
*   END SSIERRRT;                   /* END SSI ERROR RTN     #Y30OE73*/
@EL00009 DS    0H                                                  0888
@EF00009 DS    0H                                                  0888
@ER00009 LM    @14,@12,@SA00009                                    0888
         BR    @14                                                 0888
*                                                                  0889
*/*                                                          #Y30OE73*/
*/*  ******************************************************  #Y30OE73*/
*/*                                                          #Y30OE73*/
*/*       RTN TO WRITE OUT ERROR MESSAGES FOR SYSTEM AND     #Y30OE73*/
*/*       SUBSYSTEM ERRORS                                   #Y30OE73*/
*/*       INPUTS:                                            #Y30OE73*/
*/*       --WTRCODE FOR ERROR                                #Y30OE73*/
*/*      --SAVESSRC CONTAINS SUBSYSTEM RETURN CODE           #Y30OE73*/
*/*      --S99RB CONTAINS RTN CODE FOR ALLOC AND UNALLOC     #Y30OE73*/
*/*       OUTPUTS:                                           #Y30OE73*/
*/*       --ERROR MESSAGES IEB577I AND IEB581E               #Y30OE73*/
*/*                                                          #Y30OE73*/
*/*  ******************************************************  #Y30OE73*/
*/*                                                          #Y30OE73*/
*                                                                  0889
*SYSERMSG:                          /* WRITE MSG IEB577 581  #Y30OE73*/
*   PROC;                           /*                       #Y30OE73*/
SYSERMSG STM   @14,@12,@SA00010                                    0889
*/*                                                          #Y30OE73*/
*/*  **  WRITE MESSAGE IEB577I                               #Y30OE73*/
*/*                                                          #Y30OE73*/
*                                                                  0890
*   WRTDSFLG=OFF;                   /* WHIEN MSG'S IEB577I   #Y30OE73
*                                      AND IEB581E ARE ISSUED      0890
*                                                            #Y30OE73
*                                      ISSUED NO MORE DATA   #Y30OE73
*                                      SETS ARE TO BE WRITTEN      0890
*                                                            #Y30OE73*/
         NI    WRTDSFLG,B'11011111'                                0890
*   MSGID=MSG577I;                  /* SET MSG ID FOR IEB577 @Y30OE73*/
         MVI   MSGID,X'1A'                                         0891
*   DEVAKEY=KDEVA;                  /* SET KEY FOR UNIT NAME @Y30OE73*/
         MVI   DEVAKEY,X'08'                                       0892
*   DEVA=UCBNAME;                   /* MOVE UNIT NAME IN FOR @Y30OE73
*                                      FOR IEB577I MSG       @Y30OE73*/
         L     @14,UCBPTR                                          0893
         MVC   DEVA(3),UCBNAME(@14)                                0893
*   M577IKEY=KSSIORAL;              /* ACTIVATE PARM FOR     @Y30OE73
*                                      TEST OF MSG IEB577    @Y30OE73*/
         MVI   M577IKEY,X'0C'                                      0894
*   IF WTRCODE=SSIERROR×            /* FOR SSI ERROR SET     @Y30OE73*/
*       WTRCODE=SSRERROR THEN       /* ERROR DESCRIPTION     @Y30OE73*/
         CLI   WTRCODE,16                                          0895
         BE    @RT00895                                            0895
         CLI   WTRCODE,4                                           0895
         BNE   @RF00895                                            0895
@RT00895 DS    0H                                                  0896
*     M577DES=SUBSYS;               /* MOVE TEST INTO MSG    @Y30OE73
*                                      WRITER LIST           @Y30OE73*/
         MVC   M577DES(10),SUBSYS                                  0896
*   ELSE                            /* MUST BE ALLOC ERR     @Y30OE73*/
*     M577DES=ALLOCCON;             /* SET MSG FOR ALLOC ER  @Y30OE73*/
         B     @RC00895                                            0897
@RF00895 MVC   M577DES(10),ALLOCCON                                0897
*   REG1=ADDR(MSGWTLST);            /* SET PTR TO MSG WTR LST      0898
*                                                            @Y30OE73*/
@RC00895 LA    REG1,MSGWTLST                                       0898
*   CALL IOEDKMSG;                  /* WRITE MSG IEB577I     @Y30OE73*/
         L     @15,@CV03341                                        0899
         BALR  @14,@15                                             0899
*   M577IKEY=KSKIP;                 /* RESET KEY FOR MSG 577 @Y30OE73*/
         MVI   M577IKEY,X'00'                                      0900
*   DEVAKEY=KSKIP;                  /* SET UNIT KEY TO SKIP  @Y30OE73*/
         MVI   DEVAKEY,X'00'                                       0901
*/*                                                          @Y30OE73*/
*/*  **  WRITE MESSAGE IEB581E                               @Y30OE73*/
*/*                                                          @Y30OE73*/
*                                                                  0902
*   MSGID=MSG581E;                  /* SET MSG LST FOR 581   @Y30OE73*/
         MVI   MSGID,X'1E'                                         0902
*   ERDSKEY=ERRDESKY;               /* TURN OF ERROR         @Y30OE73
*                                      DESCRIPTION KEY IN    @Y30OE73
*                                      MSG WTR LIST          @Y30OE73*/
         MVI   ERDSKEY,X'0E'                                       0903
*   IF WTRCODE=SSRERROR THEN        /* WAS ERROR SUB SYS REQ @Y30OE73*/
         CLI   WTRCODE,4                                           0904
         BNE   @RF00904                                            0904
*     M581DES=M581SSR;              /* YES SET ER DESCRIPTION      0905
*                                                            @Y30OE73*/
         MVC   M581DES(21),M581SSR                                 0905
*   IF WTRCODE=SSIERROR THEN        /* WAS ERROR SUB SYS INT @Y30OE73*/
@RF00904 CLI   WTRCODE,16                                          0906
         BNE   @RF00906                                            0906
*     M581DES=M581SSI;              /* YES SET ER DESCRIPTION      0907
*                                                            @Y30OE73
*                                      FOR SUSSYS INTERFACE  @Y30OE73
*                                      NO CK OTHER ERRORS    @Y30OE73*/
         MVC   M581DES(21),M581SSI                                 0907
*   IF WTRCODE=DALLOCER THEN        /* WAS ERR ALLOC/UNALLOC @Y30OE73*/
@RF00906 CLI   WTRCODE,20                                          0908
         BNE   @RF00908                                            0908
*     M581DES=M581DAL;              /* SET ERR DESCRIPTION   @Y30OE73
*                                      FOR ALLOC/UNALLOC ERR @Y30OE73*/
         MVC   M581DES(21),M581DAL                                 0909
*   RTNCKEY=RTNCDKY;                /* SET KEY TO INCLUDE    @Y30OE73
*                                      RTN CODE IN MSG       @Y30OE73*/
@RF00908 MVI   RTNCKEY,X'0D'                                       0910
*   IF WTRCODE=SSIERROR THEN        /* WAS IT A SUB SYSTEM   @Z30OE73
*                                      INTERFACE ERROR       @Z30OE73*/
         CLI   WTRCODE,16                                          0911
         BNE   @RF00911                                            0911
*     WRKRC1=SAVSSIRC;              /* GET RTN CDE FOR MSG   @Z30OE73*/
         MVC   WRKRC1(4),SAVSSIRC                                  0912
*   IF WTRCODE=SSRERROR THEN        /* WAS IF A SUB SYS REQ  @Z30OE73
*                                      ERROR                 @Z30OE73*/
@RF00911 CLI   WTRCODE,4                                           0913
         BNE   @RF00913                                            0913
*     WRKRC1=SAVESSRC;              /* GET RTN CODE FOR      @Y30OE73
*                                      CONVERSION TO PRINT   @Z30OE73
*                                      ABLE FORM             @Z30OE73*/
         MVC   WRKRC1(4),SAVESSRC                                  0914
*   IF WTRCODE=DALLOCER THEN        /* WAS IT AN ALLOC ERR   @Y30OE73*/
@RF00913 CLI   WTRCODE,20                                          0915
         BNE   @RF00915                                            0915
*     IF SAVS99RC=DALSRTNE THEN     /* IS THERE A REASON     @Z30OE73
*                                      CODE                  @Z30OE73*/
         CLC   SAVS99RC(4),DALSRTNE                                0916
         BNE   @RF00916                                            0916
*       WRKRC2=S99ERROR;            /* GET CODE FROM S99RB   @Z30OE73*/
         MVC   WRKRC2(2),S99ERROR                                  0917
*     ELSE                          /* NO REASON CODE SO     @Z30OE73
*                                      USE RTN CODE          @Z30OE73*/
*       WRKRC1=SAVS99RC;            /* SET CODE FOR ERR      @Z30OE73
*                                      FOR CONVERSION        @Y30OE73
*                                      NOW WRKRC HAS THE RTN @Y30OE73
*                                      CODE TO BE CONVERTED  @Y30OE73*/
         B     @RC00916                                            0918
@RF00916 MVC   WRKRC1(4),SAVS99RC                                  0918
*   UNPK(UNPKAREA,WRKRC(3:5));      /* UNPACK THE RTNCODE    @Y30OE73
*                                      TO GET ZONES FOR EACH @Y30OE73
*                                      CHARACTER             @Y30OE73*/
@RC00916 DS    0H                                                  0919
@RF00915 UNPK  UNPKAREA(8),WRKRC+2(3)                              0919
*   DO INDX=4 TO 7;                 /* LOOP THROUGH CHECKING @Y30OE73
*                                      FOR NON NUMERIC CHAR  @Y30OE73*/
         LA    @14,4                                               0920
         STH   @14,INDX                                            0920
@DL00920 DS    0H                                                  0921
*     IF UNPKAREA(INDX)>F9 THEN     /* IF CHAR COD E GT 9    @Y30OE73
*                                      IT IS A CHAR          @Y30OE73*/
         LA    @10,UNPKAREA-1(@14)                                 0921
         CLC   0(1,@10),F9                                         0921
         BNH   @RF00921                                            0921
*       UNPKAREA(INDX)=CHARC;       /* MAKE NON NUMERICS     @Z30OE73
*                                      IE( X'0C'=0C)         @Z30OE73
*                                      PRINTABLE CHAR'S      @Y30OE73*/
         LA    @10,UNPKAREA-1(@14)                                 0922
         MVC   0(1,@10),CHARC                                      0922
*   END;                            /*                       @Y30OE73*/
@RF00921 LA    @14,1                                               0923
         SLR   @10,@10                                             0923
         ICM   @10,3,INDX                                          0923
         ALR   @14,@10                                             0923
         STH   @14,INDX                                            0923
         CH    @14,@CH00154                                        0923
         BNH   @DL00920                                            0923
*   MRTNCDE=UNPKAREA(4:7);          /* MOVE CHAR FOR RTN CDE @Y30OE73
*                                      INTO MSG LIST         @Y30OE73*/
         MVC   MRTNCDE(4),UNPKAREA+3                               0924
*   REG1=ADDR(MSGWTLST);            /* SET PTR FOR MSG WTR   @Y30OE73*/
         LA    REG1,MSGWTLST                                       0925
*   CALL IOEDKMSG;                  /* WRITE MSG IEB581E     @Y30OE73*/
         L     @15,@CV03341                                        0926
         BALR  @14,@15                                             0926
*   ERDSKEY=KSKIP;                  /* RESET DESCRIPTION KY  @Y30OE73*/
         MVI   ERDSKEY,X'00'                                       0927
*   RTNCKEY=KSKIP;                  /* RESET RETURN CODE KEY @Y30OE73*/
         MVI   RTNCKEY,X'00'                                       0928
*   END SYSERMSG;                   /* END WRITING SYS ERRMSG      0929
*                                                            @Y30OE73*/
@EL00010 DS    0H                                                  0929
@EF00010 DS    0H                                                  0929
@ER00010 LM    @14,@12,@SA00010                                    0929
         BR    @14                                                 0929
*   RESPECIFY                                                      0930
*     RTNREG RSTD;                  /*                       @Y30OE73*/
*INERRRTN:                          /*                       @Y30OE73*/
*   PROC;                           /* INPUT SYNAD           @ZA04460*/
INERRRTN STM   @14,@12,@SA00011                                    0931
*/*  ******************************************************  @Z30OE73*/
*/*       START OF INPUT SYNAD RTN                           @Y30OE73*/
*/*       ISSUES MSG'S IEB576I AND OPTIONALLY IEB571I FOR    @Y30OE73*/
*/*       MULTI-VOLUME DATA SETS                             @Y30OE73*/
*/*                                                          @Y30OE73*/
*/*       SYNAD ROUTINE MUST PERSERVE REGS 14 AND 13 FOR     @Y30OE73*/
*/*       ACCESS METHOD                                      @Y30OE73*/
*/*  *****************************************************   @Z30OE73*/
*/*                                                          @Y30OE73*/
*                                                                  0932
*   SRTNISYD=RTNREG;                /* SAVE ADDR TO RTN TO   @Y30OE73*/
         LR    SRTNISYD,RTNREG                                     0932
*   RESPECIFY                                                      0933
*     RTNREG UNRSTD;                /*                       @Y30OE73
*                                      QSAM AFTER ERR PROC   @Y30OE73*/
*   GEN(      SYNADAF   ACSMETH=QSAM   );/* BUILD            @ZA04460
*                                      SAVE AREA FOR SYNAD   @ZA04460*/
               SYNADAF   ACSMETH=QSAM
*   MSGID=MSG576I;                  /* SET MSG ID FOR SYSIO  @Y30OE73
*                                      ERROR MSG             @Y30OE73*/
         MVI   MSGID,X'19'                                         0935
*   DEVAKEY=KDEVA;                  /* SET KEY FOR UNITNAME  @Y30OE73*/
         MVI   DEVAKEY,X'08'                                       0936
*   DEVA=UCBNAME;                   /* MOVE IN UNIT ADDR FOR @Z30OE73
*                                      FOR ERROR MSG         @Z30OE73*/
         L     @14,UCBPTR                                          0937
         MVC   DEVA(3),UCBNAME(@14)                                0937
*   DSIDKEY=KDSID;                  /* SET KEY TO INCLUDE    @Y30OE73
*                                      INTO MSG              @Y30OE73*/
         MVI   DSIDKEY,X'06'                                       0938
*   MSGDSIDI=SSSODSID;              /* SET DSID FOR MSG      @Y30OE73*/
         MVC   MSGDSIDI(8),SSSODSID                                0939
*   MJOBKEY=KJOBN;                  /* SET KEY TO INCLUDE    @Y30OE73
*                                      JOBNAME IN MSG        @Y30OE73*/
         MVI   MJOBKEY,X'0B'                                       0940
*   MJOBN=SSSOJOBN;                 /* SET JOBNAME FOR MSG   @Y30OE73*/
         MVC   MJOBN(8),SSSOJOBN                                   0941
*   REG1=ADDR(MSGWTLST);            /* GET ADDR OF MSG LIST  @Y30OE73
*                                      FOR MSG WRITER        @Y30OE73*/
         LA    REG1,MSGWTLST                                       0942
*   CALL IOEDKMSG;                  /* WRITE MSG IEB576I     @Y30OE73*/
         L     @15,@CV03341                                        0943
         BALR  @14,@15                                             0943
*   IF VOLINDX>ONE THEN             /* CK IF ONE OR MORE     @Y30OE73
*                                      DISKETTES ARE WRITE   @Y30OE73
*                                      FOR CURRENT DATA SET  @Y30OE73*/
         CLC   VOLINDX(2),@CH00070                                 0944
         BNH   @RF00944                                            0944
*     INPUTEOD=ON;                  /* FORCE END OF DATA     @Z30OE73
*                                      SET FOR EOD RTN       @Y30OE73*/
         OI    INPUTEOD,B'00000100'                                0945
*   RDWRTFLG=OFF;                   /* STOP PROCESSING       @Y30OE73
*                                      DATA SET              @Y30OE73*/
@RF00944 NI    RDWRTFLG,B'11101111'                                0946
*   GEN(      SYNADRLS        );    /* RELEASE SAVE AREA     @ZA04460*/
               SYNADRLS
*   RESPECIFY                                                      0948
*     RTNREG RSTD;                  /*                       @Y30OE73*/
*   RTNREG=SRTNISYD;                /* RESTORE RETURN ADDR   @Y30OE73
*                                      TO RTN TO QSAM RTN    @Y30OE73*/
         LR    RTNREG,SRTNISYD                                     0949
*   RESPECIFY                                                      0950
*     RTNREG UNRSTD;                /*                       @Y30OE73*/
*   END INERRRTN;                   /* END INPUT SYNAD RTN   @Y30OE73*/
@EL00011 DS    0H                                                  0951
@EF00011 DS    0H                                                  0951
@ER00011 LM    @14,@12,@SA00011                                    0951
         BR    @14                                                 0951
*/*                                                          @Z30OE73*/
*/*  *****************************************************   @Z30OE73*/
*/*                                                          @Z30OE73*/
*/*        PROCEDURE TO HANDLE ABENDS DURING OPEN SO         @Z30OE73*/
*/*        IOEDKWTR DOES NOT ABEND                           @Z30OE73*/
*/*                                                          @Z30OE73*/
*/*        INPUT--PARAMETERLIST FOR DCB ABEND DURING O/C/EOV @Z30OE73*/
*/*                                                          @Z30OE73*/
*/*        OUTPUT-- OPTIONS MASK SET TO IGNORE THE ERROR     @Z30OE73*/
*/*                                                          @Z30OE73*/
*/*  *****************************************************   @Z30OE73*/
*/*                                                          @Z30OE73*/
*                                                                  0952
*DCBABEND:                                                         0952
*   PROC;                           /* ENTERY TO ABEND       @Z30OE73
*                                      HANDLER RTN           @Z30OE73*/
DCBABEND STM   @14,@12,12(@13)                                     0952
*   ABEOPTMK=IGNOREER;              /* SET OPTION BYTE TO    @Z30OE73
*                                      IGNORE THE ERROR      @Z30OE73
*                                      AND NOT OPEN DCB      @Z30OE73*/
         MVI   ABEOPTMK(ABLSTPTR),X'04'                            0953
*   END DCBABEND;                   /*                       @Z30OE73*/
@EL00012 DS    0H                                                  0954
@EF00012 DS    0H                                                  0954
@ER00012 LM    @14,@12,12(@13)                                     0954
         BR    @14                                                 0954
@PB00012 DS    0H                                                  0955
*   RETURN CODE(RTNVALUE);          /* RETURN TO SYSTEM      @Y30OE73
*                                      WITH RTN CODE IN      @Y30OE73
*                                      REG 15                @Y30OE73*/
         LR    @15,RTNVALUE                                        0955
         L     @13,4(,@13)                                         0955
         L     @14,12(,@13)                                        0955
         LM    @00,@12,20(@13)                                     0955
         BR    @14                                                 0955
*   END IOEDKWTR                    /*                       @Y30OE73*/
*                                                                  0956
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSUT5  (FIRSTSEG)                                       */
*/*%INCLUDE SYSUT5  (DCLREGS )                                       */
*/*%INCLUDE SYSUT5  (DCLMISC )                                       */
*/*%INCLUDE SYSUT5  (WTRWORKA)                                       */
*/*%INCLUDE SYSUT5  (WTRPARMS)                                       */
*/*%INCLUDE SYSUT5  (AMWORKAW)                                       */
*/*%INCLUDE SYSUT5  (MAPMACS )                                       */
*/*%INCLUDE SYSLIB  (IEZCIB  )                                       */
*/*%INCLUDE SYSLIB  (IEFTIOT1)                                       */
*/*%INCLUDE SYSLIB  (IEFZB4D0)                                       */
*/*%INCLUDE SYSLIB  (IEFZB4D2)                                       */
*/*%INCLUDE SYSLIB  (IEFJSSOB)                                       */
*/*%INCLUDE SYSLIB  (IEFJSSIB)                                       */
*/*%INCLUDE SYSLIB  (IEZJSCB )                                       */
*/*%INCLUDE SYSLIB  (IKJTCB  )                                       */
*/*%INCLUDE SYSLIB  (IEZDEB  )                                       */
*/*%INCLUDE SYSLIB  (IHADCBDF)                                       */
*/*%INCLUDE SYSLIB  (IHADCB  )                                       */
*/*%INCLUDE SYSLIB  (IEFUCBOB)                                       */
*/*%INCLUDE SYSLIB  (IEFJESCT)                                       */
*/*%INCLUDE SYSLIB  (CVT     )                                       */
*/*%INCLUDE SYSLIB  (IEZIOB  )                                       */
*/*%INCLUDE SYSUT5  (WTRDCBS )                                       */
*/*%INCLUDE SYSUT5  (EXTRNDCL)                                       */
*/*%INCLUDE SYSUT5  (MAINPROG)                                       */
*/*%INCLUDE SYSUT5  (INITPHAS)                                       */
*/*%INCLUDE SYSUT5  (PROCWTRP)                                       */
*/*%INCLUDE SYSUT5  (OPEN3540)                                       */
*/*%INCLUDE SYSUT5  (CBLKINIT)                                       */
*/*%INCLUDE SYSUT5  (ONEDSMDE)                                       */
*/*%INCLUDE SYSUT5  (CLEAN1DS)                                       */
*/*%INCLUDE SYSUT5  (MDSMODE )                                       */
*/*%INCLUDE SYSUT5  (ENDDKWTR)                                       */
*/*%INCLUDE SYSUT5  (WRTDSET )                                       */
*/*%INCLUDE SYSUT5  (OPNALL  )                                       */
*/*%INCLUDE SYSUT5  (EODPROCC)                                       */
*/*%INCLUDE SYSUT5  (OUTSYNAD)                                       */
*/*%INCLUDE SYSUT5  (CLSUALL )                                       */
*/*%INCLUDE SYSUT5  (SSRCPROC)                                       */
*/*%INCLUDE SYSUT5  (SSIERRCD)                                       */
*/*%INCLUDE SYSUT5  (INPUTERR)                                       */
*                                                                  0956
*       ;                                                          0956
@DATA    DS    0H
@CH00082 DC    H'0'
@CH00154 DC    H'7'
@CH00062 DC    H'8'
@CH00058 DC    H'16'
@CH00168 DC    H'20'
@CH01994 DC    H'72'
@CH03427 DC    H'120'
@CH00087 DC    H'255'
@SB03436 TRT   CIBDATA(0,@14),TRANSTAB
@SM03438 MVC   WTRCLASS(0),CIBDATA(@14)
@SB03441 TRT   EPARMS(0,EPARMPTR),TRANSTAB
@SM03443 MVC   WTRCLASS(0),EPARMS(EPARMPTR)
         DS    0F
@SA00001 DS    18F
@SA00006 DS    18F
@SA00005 DS    18F
@SA00003 DS    15F
@SA00002 DS    15F
@SA00007 DS    15F
@SA00008 DS    15F
@SA00009 DS    15F
@SA00004 DS    15F
@SA00011 DS    15F
@SA00010 DS    0F
         DS    15F
         DS    0F
@CF00070 DC    F'1'
@CH00070 EQU   @CF00070+2
@CF00067 DC    F'4'
@CH00067 EQU   @CF00067+2
@CF00033 DC    F'12'
@CH00033 EQU   @CF00033+2
@CV03337 DC    V(IOEDKPUT)
@CV03338 DC    V(IOESDKTO)
@CV03339 DC    V(IOEDKOPN)
@CV03340 DC    V(IOEDKCLS)
@CV03341 DC    V(IOEDKMSG)
@CA03342 DC    A(IOEESTAE)
         DS    0D
SSIBPTR  DS    A
INDCBPTR DC    AL4(INPUTDCB)
OUTDCBPT DC    AL4(OUTDCB)
DEBPTR   DS    A
UCBPTR   DS    A
AMWAPTR  DS    A
TCBPTR   DS    A
IOBPRPTR DS    A
IOBSTPTR DS    A
SAVSSIRC DS    F
SAVESSRC DS    F
SAVS99RC DS    F
DALSRTNE DC    F'4'
DALREQDY DC    F'8'
DALPARME DC    F'12'
SSREQLST DS    AL4
         ORG   SSREQLST
SSREQEND DS    BL1
         ORG   SSREQLST+4
S99RBPTR DS    AL4
         ORG   S99RBPTR
S99RBPND DS    BL1
         ORG   S99RBPTR+4
S99TUFP  DS    A
DEBDAPTR DS    A
DEBEXPTR DS    A
DEBSBPTR DS    A
DCBPTR   DS    A
INDX     DC    AL2(1)
VOLINDX  DS    H
MAXDSNLN DC    AL2(44)
MAXVOLS  DC    AL2(5)
MAXNSOCL DC    AL2(8)
SAVELEN  DS    H
         DS    CL1
SCPARPTR DS    AL3
@CB00080 DC    X'0001'
@CB00616 DC    X'0002'
@CB00621 DC    X'0005'
@CB00780 DC    X'0055'
@CB00794 DC    X'005C'
IEFRDDDN DC    CL8'IEFRDER '
WTRNAME  DC    CL8'IEBDKWTR'
SSOBCHAR DC    CL4'SSOB'
F9       DC    CL1'9'
CHARC    DC    CL1'C'
XRDDNLN  DC    X'0008'
XSSRLNTH DC    X'0004'
TXTUFGRS DC    X'0001'
MT3540   DC    CL200'IOEDKWTR PATCH AREA 200 BYTES '
UNPKAREA DS    CL8
         ORG   UNPKAREA
@NM00001 DS    CL4
RTNCCHAR DS    CL4
         ORG   UNPKAREA+8
         DS    CL2
WRKRC    DS    CL5
         ORG   WRKRC
WRKRC1   DS    FL4
         ORG   WRKRC1
@NM00002 DS    CL2
WRKRC2   DS    CL2
         ORG   WRKRC+4
LOP      DC    X'0C'
         ORG   WRKRC+5
SVS99ERR DS    CL2
LASTFGTU DC    X'80'
NULL     DC    X'00'
TRANSTAB DS    CL256
         ORG   TRANSTAB
BEFOREA  DC    193X'FF'
ATOI     DC    9X'00'
BETIAJ   DC    7X'FF'
JTOR     DC    9X'00'
BETRAS   DC    8X'FF'
STOZ     DC    8X'00'
BETZA0   DC    6X'FF'
X0TO9    DC    10X'00'
TOENDX   DC    6X'FF'
         ORG   TRANSTAB+256
RCDSOPNE DC    X'0420'
RCDSEDEL DC    X'044C'
RCDSALAJ DC    X'0210'
RCDSNDDN DC    X'0410'
RECFMUDF DC    CL1'C'
         DS    CL2
WTRWORKA DS    CL52
         ORG   WTRWORKA
FLAGBYT1 DC    X'00'
         ORG   FLAGBYT1
MULTIDSM DS    BL1
EXSECMDE EQU   FLAGBYT1+0
WRTDSFLG EQU   FLAGBYT1+0
RDWRTFLG EQU   FLAGBYT1+0
FIRSTDKT EQU   FLAGBYT1+0
INPUTEOD EQU   FLAGBYT1+0
INPIOE   EQU   FLAGBYT1+0
FIRSTIOE EQU   FLAGBYT1+0
         ORG   WTRWORKA+1
FLAGBYT2 DC    X'00'
         ORG   FLAGBYT2
NORETRY  DS    BL1
OVERFCTR EQU   FLAGBYT2+0
OPN3540F EQU   FLAGBYT2+0
PROCSOCL EQU   FLAGBYT2+0
NCLSORJB EQU   FLAGBYT2+0
ALLRETRY EQU   FLAGBYT2+0
DS1STTMF EQU   FLAGBYT2+0
         ORG   WTRWORKA+2
SSIDCODE DS    CL1
@NM00003 DS    CL1
WTRCLASS DS    CL8
         ORG   WTRCLASS
CLASS    DC    8CL1' '
         ORG   WTRWORKA+12
NRECDKT1 DS    FL4
NRECDKTR DS    FL4
JOBNSAVE DS    CL8
JOBISAVE DS    CL8
NRECSRRD DS    FL4
ANSWERA  DS    CL8
         ORG   ANSWERA
TIOTPTR  DS    AL4
COMMLSTA DS    AL4
         ORG   WTRWORKA+48
WTRRTNCD DS    CL4
         ORG   WTRRTNCD
WTRCODE  DC    AL1(0)
SSFCODE  DC    AL1(0)
REASONSF DS    FL2
         ORG   REASONSF
@NM00004 DS    FL1
REASONWF DS    FL1
         ORG   WTRWORKA+52
STAELIST DS    CL8
         ORG   STAELIST
STAEUCB1 DS    AL4
STAELSTE DC    A(0)
         ORG   STAELIST+8
ATXTPTRS DS    CL12
         ORG   ATXTPTRS
DSNTXPTR DC    AL4(DSNTXTUT)
SSRTXPTR DC    AL4(SSRTXTUT)
RDDNTPTR DS    AL4
         ORG   RDDNTPTR
ENDATPT  DC    X'80'
RDDNTUAD DC    AL3(RDDNTXTU)
         ORG   ATXTPTRS+12
DSNTXTUT DS    CL50
         ORG   DSNTXTUT
DSNKEY   DS    CL2
DSNFILL  DC    X'0001'
DSNLENTH DS    AL2
ALLOCDSN DS    CL44
         ORG   DSNTXTUT+50
SSRTXTUT DS    CL10
         ORG   SSRTXTUT
SSRKEY   DS    CL2
SSRFLAG  DC    X'0001'
SSRLNTH  DC    X'0004'
SSRNAME  DS    CL4
         ORG   SSRTXTUT+10
RDDNTXTU DS    CL14
         ORG   RDDNTXTU
RDDNKEY  DS    CL2
RDDNFLG  DC    X'0001'
RDDNLN   DC    X'0008'
RDDNDDN  DS    CL8
         ORG   RDDNTXTU+14
         DS    CL2
UTXTPTRS DS    CL8
         ORG   UTXTPTRS
DDNTXPTR DC    AL4(DDNTXTUT)
DISPTPTR DS    AL4
         ORG   DISPTPTR
UAPTRSED DC    X'80'
DISPTXAD DC    AL3(DISPTXUT)
         ORG   UTXTPTRS+8
DDNTXTUT DS    CL14
         ORG   DDNTXTUT
DDNKEY   DS    CL2
DDNFLG   DC    X'0001'
DDNLEN   DC    X'0008'
UDDNAME  DS    CL8
         ORG   DDNTXTUT+14
DISPTXUT DS    CL7
         ORG   DISPTXUT
DISPKEY  DS    CL2
DISPFLG  DC    X'0001'
DISPLEN  DC    X'0001'
DISPPARM DS    CL1
         ORG   DISPTXUT+7
RECORD   DS    CL128
         DS    CL3
MSGWTLST DS    CL135
         ORG   MSGWTLST
MSGID    DS    FL1
WTOCODE  DS    FL1
MSGWTCD  DS    FL2
DCBADDR  DS    AL4
REPLYADR DS    AL4
FIRSTPM  DC    X'0200'
MJOBNAME DS    CL10
         ORG   MJOBNAME
MJOBLEN  DC    AL1(10)
MJOBKEY  DC    AL1(0)
MJOBN    DS    CL8
         ORG   MSGWTLST+24
MSGDSID  DS    CL10
         ORG   MSGDSID
DSIDLEN  DC    AL1(10)
DSIDKEY  DC    AL1(0)
MSGDSIDI DS    CL8
         ORG   MSGWTLST+34
VOLSERS  DS    CL8
         ORG   VOLSERS+0
VOLLEN   DC    AL1(8)
VOLKEY   DC    AL1(0)
SER      DS    CL6
         ORG   VOLSERS+8
         ORG   VOLSERS+8
         DC    AL1(8)
         DC    AL1(0)
         ORG   VOLSERS+16
         ORG   VOLSERS+16
         DC    AL1(8)
         DC    AL1(0)
         ORG   VOLSERS+24
         ORG   VOLSERS+24
         DC    AL1(8)
         DC    AL1(0)
         ORG   VOLSERS+32
         ORG   VOLSERS+32
         DC    AL1(8)
         DC    AL1(0)
         ORG   MSGWTLST+74
DEVADDR  DS    CL5
         ORG   DEVADDR
DEVALEN  DC    AL1(5)
DEVAKEY  DC    AL1(0)
DEVA     DS    CL3
         ORG   MSGWTLST+79
MCLASS   DS    CL3
         ORG   MCLASS
MCLASLEN DC    AL1(3)
MCLASKEY DC    AL1(0)
MCLASSI  DS    CL1
         ORG   MSGWTLST+82
MDDNAMT  DS    CL10
         ORG   MDDNAMT
MDDNAML  DC    AL1(10)
MDDNAMK  DC    AL1(0)
MDDNAME  DS    CL8
         ORG   MSGWTLST+92
TEXT577I DS    CL12
         ORG   TEXT577I
M577LEN  DC    AL1(12)
M577IKEY DC    AL1(0)
M577DES  DS    CL10
         ORG   MSGWTLST+104
M581ERDS DS    CL23
         ORG   M581ERDS
ERDSLEN  DC    AL1(23)
ERDSKEY  DC    AL1(0)
M581DES  DS    CL21
         ORG   MSGWTLST+127
M581RTNC DS    CL6
         ORG   M581RTNC
RTNCLEN  DC    AL1(6)
RTNCKEY  DC    AL1(0)
MRTNCDE  DS    CL4
         ORG   MSGWTLST+133
ENDMSGLT DC    X'027F'
         ORG   MSGWTLST+135
DKWTRCMA DS    CL40
LOPCON   DC    X'80'
SUBSYS   DC    CL10'SUBSYSTEM '
ALLOCCON DC    CL10'ALLOCATION'
OPENCON  DC    CL10'   OPEN   '
M581SSR  DC    CL21'SUBSYSTEM REQUEST    '
M581SSI  DC    CL21'SUBSYSTEM INTERFACE  '
M581DAL  DC    CL21'DYNAMIC ALLOC/UNALLOC'
         DS    CL3
S99RB    DS    CL20
         ORG   S99RB
S99RBLN  DS    CL1
S99VERB  DS    CL1
S99FLAG1 DS    CL2
         ORG   S99FLAG1
S99FLG11 DS    CL1
         ORG   S99FLG11
S99ONCNV DS    BL1
S99NOCNV EQU   S99FLG11+0
S99NOMNT EQU   S99FLG11+0
S99JBSYS EQU   S99FLG11+0
         ORG   S99FLAG1+1
S99FLG12 DS    CL1
         ORG   S99RB+4
S99RSC   DS    CL4
         ORG   S99RSC
S99ERROR DS    CL2
S99INFO  DS    CL2
         ORG   S99RB+8
S99TXTPP DS    AL4
S99RSV01 DS    FL4
S99FLAG2 DS    CL4
         ORG   S99FLAG2
S99FLG21 DS    CL1
         ORG   S99FLG21
S99WTVOL DS    BL1
S99WTDSN EQU   S99FLG21+0
S99NORES EQU   S99FLG21+0
S99WTUNT EQU   S99FLG21+0
S99OFFLN EQU   S99FLG21+0
S99TIONQ EQU   S99FLG21+0
S99CATLG EQU   S99FLG21+0
S99MOUNT EQU   S99FLG21+0
         ORG   S99FLAG2+1
S99FLG22 DS    CL1
         ORG   S99FLG22
S99UDEVT DS    BL1
S99PCINT EQU   S99FLG22+0
         ORG   S99FLAG2+2
S99FLG23 DS    CL1
S99FLG24 DS    CL1
         ORG   S99RB+20
SSOB     DS    CL20
         ORG   SSOB
SSOBID   DS    CL4
SSOBLEN  DS    FL2
SSOBFUNC DS    FL2
SSOBSSIB DS    AL4
SSOBRETN DS    AL4
SSOBINDV DS    AL4
         ORG   SSOB+20
SSSO     DS    CL120
         ORG   SSSO
SSSOLEN  DS    FL2
SSSOUFLG DS    BL1
         ORG   SSSOUFLG
SSSOSETC DS    BL1
SSSODELC EQU   SSSOUFLG+0
SSSOROUT EQU   SSSOUFLG+0
SSSOHOLD EQU   SSSOUFLG+0
SSSORLSE EQU   SSSOUFLG+0
@NM00016 EQU   SSSOUFLG+0
         ORG   SSSO+3
@NM00017 DS    AL1
SSSOFLG1 DS    BL1
         ORG   SSSOFLG1
SSSOSHLD DS    BL1
SSSOSCLS EQU   SSSOFLG1+0
SSSOSDST EQU   SSSOFLG1+0
SSSOSJBN EQU   SSSOFLG1+0
SSSOSJBI EQU   SSSOFLG1+0
SSSOSPGM EQU   SSSOFLG1+0
SSSOSFRM EQU   SSSOFLG1+0
@NM00018 EQU   SSSOFLG1+0
         ORG   SSSO+5
SSSOFLG2 DS    BL1
         ORG   SSSOFLG2
SSSOCTRL DS    BL1
SSSOCHKP EQU   SSSOFLG2+0
@NM00019 EQU   SSSOFLG2+0
         ORG   SSSO+6
SSSOCOPY DS    FL2
SSSOJOBN DS    CL8
SSSOJOBI DS    CL8
SSSOCLAS DS    CL1
@NM00020 DS    CL3
SSSODEST DS    CL8
SSSOPGMN DS    CL8
SSSORBA  DS    CL8
SSSODSN  DS    CL44
SSSOFORM DS    CL4
SSSOCLSL DS    CL8
SSSOWTRC DS    AL4
SSSODSID DS    CL8
         ORG   SSSO+120
DCBERLST DS    CL4
         ORG   DCBERLST
ABENDENT DS    FL4
         ORG   ABENDENT
ABLSTCDE DC    X'91'
ABRTNADR DC    AL3(DCBABEND)
         ORG   DCBERLST+4
FUNCNUM  DC    X'0021'
JES2     DC    CL4'JES2'
JES3     DC    CL4'JES3'
REPLYAR  DS    CL4
KSER     DC    AL1(1)
         DC    AL1(2)
         DC    AL1(3)
         DC    AL1(4)
         DC    AL1(5)
IOEDKWTR CSECT
*                                        /*                 @Y30OE73*/
INPUTDCB DCB  DEVD=DA,DSORG=PS,EODAD=ENDINDAT,MACRF=(GM),             XX
               EROPT=ACC,                                             XX
               RECFM=F,SYNAD=INERRRTN,DDNAME=DUMMY,EXLST=DCBERLST
OUTDCB   DCB  DDNAME=IEFRDER,MACRF=(E),DSORG=PS,RECFM=F,              XX
               XENDA=VV,EXLST=DCBERLST,DEVD=RD                 @30OE73
IOEDKWTR CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
RETRYI   EQU   @04
NDS      EQU   @05
NUMSOC   EQU   @05
SRTNEOD  EQU   @04
SRTNISYD EQU   @04
SRTNOSYD EQU   @05
RTNVALUE EQU   @04
NXTCLASI EQU   @04
EPARMPTR EQU   @04
SSOBPTR  EQU   @04
PARMPTR  EQU   @01
REG1     EQU   @01
ABLSTPTR EQU   @01
REG2     EQU   @02
STAEEXTA EQU   @03
RTNREG   EQU   @14
RTNCDREG EQU   @15
         EXTRN IOEESTAE
CVTPTR   EQU   16
EPARMLST EQU   0
EPARLEN  EQU   EPARMLST
EPARMS   EQU   EPARMLST+2
PARMADRW EQU   0
PARMSADR EQU   PARMADRW+1
COMMLIST EQU   0
CIBPTR   EQU   COMMLIST+4
AMWORKAR EQU   0
JAMWKAR  EQU   AMWORKAR+4
WORKAREA EQU   JAMWKAR+16
AMW3540E EQU   AMWORKAR+120
AMWEAMFG EQU   AMW3540E+3
AMWEOD   EQU   AMW3540E+12
AMWBOE   EQU   AMWEOD
AMWEODRV EQU   AMWBOE
AMWEODTT EQU   AMWBOE+1
AMWEOD0  EQU   AMWBOE+2
AMWEODSS EQU   AMWBOE+3
ACB35EXT EQU   AMWORKAR+136
ACBDSID  EQU   ACB35EXT
ACBJOBID EQU   ACB35EXT+8
ACBVSSER EQU   ACB35EXT+16
ACB35IND EQU   ACB35EXT+22
ACBFEED  EQU   ACB35IND
ACBSECUR EQU   ACB35IND
ACBLRECL EQU   AMWORKAR+162
EXLIST   EQU   AMWORKAR+164
EXLSYNP  EQU   EXLIST
EXLEODP  EQU   EXLIST+4
RPLFIELD EQU   AMWORKAR+172
RPLRLEN  EQU   RPLFIELD
RPLAREA  EQU   RPLFIELD+4
PRLOPTBT EQU   RPLFIELD+8
RPLEODS  EQU   PRLOPTBT
RPLFDBK  EQU   RPLFIELD+9
RPLFDBK1 EQU   RPLFDBK
RPLFDBK2 EQU   RPLFDBK+1
RPLFDBK3 EQU   RPLFDBK+2
SETDLIST EQU   AMWORKAR+184
SETDOPCD EQU   SETDLIST
SETDRTNC EQU   SETDLIST+2
CIBNAME  EQU   0
CIBASID  EQU   CIBNAME+10
CIBDATLN EQU   CIBNAME+14
CIBDATA  EQU   CIBNAME+16
TIOT1    EQU   0
S99TUPL  EQU   0
S99TUPTR EQU   S99TUPL
S99TUP   EQU   0
S99TUNIT EQU   0
S99TUENT EQU   S99TUNIT+4
S99TUFLD EQU   0
SSIB     EQU   0
SSIBFLG1 EQU   SSIB+6
SSIBSSNM EQU   SSIB+8
IEZJSCB  EQU   0
JSCBSEC1 EQU   IEZJSCB+188
JSCHPCE  EQU   JSCBSEC1+4
JSCBDCB  EQU   JSCBSEC1+36
JSCBOPTS EQU   JSCBSEC1+48
JSCBSWT1 EQU   JSCBSEC1+55
JSCBWTP  EQU   JSCBSEC1+64
JSCBWTFG EQU   JSCBWTP
JSCBEND1 EQU   IEZJSCB+260
TCBFIX   EQU   0
TCBFRS   EQU   TCBFIX
TCB      EQU   0
TCBPIE   EQU   TCB+4
TCBPMASK EQU   TCBPIE
TCBCMP   EQU   TCB+16
TCBCMPF  EQU   TCBCMP
TCBCPP   EQU   TCBCMPF
TCBSTCC  EQU   TCBCMPF
TCBCDBL  EQU   TCBCMPF
TCBCWTO  EQU   TCBCMPF
TCBCIND  EQU   TCBCMPF
TCBCMSG  EQU   TCBCMPF
TCBTRN   EQU   TCB+20
TCBABF   EQU   TCBTRN
TCBMSS   EQU   TCB+24
TCBPKF   EQU   TCB+28
TCBFLGS  EQU   TCB+29
TCBFLGS1 EQU   TCBFLGS
TCBFLGS2 EQU   TCBFLGS+1
TCBFLGS3 EQU   TCBFLGS+2
TCBFLGS4 EQU   TCBFLGS+3
TCBFLGS5 EQU   TCBFLGS+4
TCBABWF  EQU   TCBFLGS5
TCBJPQ   EQU   TCB+44
TCBPURGE EQU   TCBJPQ
TCBGRS   EQU   TCB+48
TCBFSA   EQU   TCB+112
TCBTME   EQU   TCB+120
TCBJSTCB EQU   TCB+124
TCBTSFLG EQU   TCB+148
TCBTSTSK EQU   TCBTSFLG
TCBSTAB  EQU   TCB+160
TCBNSTAE EQU   TCBSTAB
TCBTCT   EQU   TCB+164
TCBTCTGF EQU   TCBTCT
TCBSCNDY EQU   TCB+172
TCBNDSP  EQU   TCBSCNDY
TCBNDSP1 EQU   TCBNDSP+1
TCBNDSP2 EQU   TCBNDSP+2
TCBNDSP3 EQU   TCBNDSP+3
TCBJSCB  EQU   TCB+180
TCBRECDE EQU   TCBJSCB
TCBEXT1  EQU   TCB+196
TCBBITS  EQU   TCB+200
TCBNDSP4 EQU   TCBBITS
TCBNDSP5 EQU   TCBBITS+1
TCBFLGS6 EQU   TCBBITS+2
TCBFLGS7 EQU   TCBBITS+3
TCBDAR   EQU   TCB+204
TCBDARC  EQU   TCBDAR
TCBEXT2  EQU   TCB+208
TCBFOE   EQU   TCB+244
TCBESTAE EQU   TCB+264
TCBESTRM EQU   TCBESTAE+1
TCBFBYT1 EQU   TCB+276
TCBFBYT2 EQU   TCB+277
TCBRV124 EQU   TCB+278
TCBRV133 EQU   TCB+279
TCBXTNT2 EQU   0
TCBGTF   EQU   TCBXTNT2
TCBTFLG  EQU   TCBGTF
TCBRV146 EQU   TCBXTNT2+28
TCBRV155 EQU   TCBXTNT2+29
TCBRV164 EQU   TCBXTNT2+30
TCBRV173 EQU   TCBXTNT2+31
DEBBASIC EQU   0
DEBTCBAD EQU   DEBBASIC
DEBDEBAD EQU   DEBBASIC+4
DEBIRBAD EQU   DEBBASIC+8
DEBOFLGS EQU   DEBIRBAD
DEBOPATB EQU   DEBBASIC+12
DEBFLGS1 EQU   DEBBASIC+14
DEBUSRPG EQU   DEBBASIC+16
DEBRRQ   EQU   DEBBASIC+20
DEBECBAD EQU   DEBRRQ
DEBDCBAD EQU   DEBBASIC+24
DEBPROTG EQU   DEBDCBAD
DEBAPPAD EQU   DEBBASIC+28
DEBBASND EQU   DEBBASIC+32
DEBDASD  EQU   0
DEBUCBAD EQU   DEBDASD
DEBACSMD EQU   0
DEBVOLSQ EQU   DEBACSMD
DEBVOLBT EQU   DEBVOLSQ
DEBDSNM  EQU   DEBACSMD+4
DEBUTSAA EQU   DEBDSNM
DEBACS01 EQU   0
DEBDSNAM EQU   DEBACS01
DEBACS02 EQU   0
DEBDBLK  EQU   DEBACS02
DEBACS03 EQU   0
DEBACS04 EQU   0
DEBTBFRA EQU   DEBACS04
DEBTCCWA EQU   DEBACS04+4
DEBACS05 EQU   0
DEBFUCBA EQU   DEBACS05
DEBLUCBA EQU   DEBACS05+4
DEBACS06 EQU   0
DEBACS07 EQU   0
DEBACS08 EQU   0
DEBSUBNM EQU   0
DEB      EQU   0
DEBAVT   EQU   DEB
DEBEOEA  EQU   DEBAVT
DEBEOEAB EQU   DEBEOEA
DEBSIOA  EQU   DEBAVT+4
DEBSIOAB EQU   DEBSIOA
DEBPCIA  EQU   DEBAVT+8
DEBPCIAB EQU   DEBPCIA
DEBCEA   EQU   DEBAVT+12
DEBCEAB  EQU   DEBCEA
DEBXCEA  EQU   DEBAVT+16
DEBXCEAB EQU   DEBXCEA
DEBPREFX EQU   DEB+20
DEBXTNP  EQU   DEBPREFX+8
DEBXTN   EQU   0
DEBXFLG1 EQU   DEBXTN+2
IHADCB   EQU   0
IHADCS00 EQU   0
DCBFDAD  EQU   IHADCS00+5
IHADCS01 EQU   0
DCBDVTBL EQU   IHADCS01
IHADCS11 EQU   0
DCBRELB  EQU   IHADCS11
DCBREL   EQU   DCBRELB+1
DCBBUFCB EQU   IHADCS11+4
DCBDSORG EQU   IHADCS11+10
DCBDSRG1 EQU   DCBDSORG
DCBDSRG2 EQU   DCBDSORG+1
DCBIOBAD EQU   IHADCS11+12
DCBODEB  EQU   DCBIOBAD
DCBLNP   EQU   DCBODEB
DCBQSLM  EQU   DCBLNP
DCBIOBAA EQU   DCBODEB+1
IHADCS50 EQU   0
DCBSVCXL EQU   IHADCS50
DCBEODAD EQU   IHADCS50+4
DCBBFALN EQU   DCBEODAD
DCBHIARC EQU   DCBBFALN
DCBBFTEK EQU   DCBHIARC
DCBBFT   EQU   DCBBFTEK
DCBEXLST EQU   IHADCS50+8
DCBRECFM EQU   DCBEXLST
DCBRECLA EQU   DCBRECFM
IHADCS24 EQU   0
DCBDDNAM EQU   IHADCS24
DCBOFLGS EQU   IHADCS24+8
DCBOFLWR EQU   DCBOFLGS
DCBOFOPN EQU   DCBOFLGS
DCBIFLG  EQU   IHADCS24+9
DCBMACR  EQU   IHADCS24+10
DCBMACR1 EQU   DCBMACR
DCBMRFE  EQU   DCBMACR1
DCBMRGET EQU   DCBMRFE
DCBMRAPG EQU   DCBMACR1
DCBMRRD  EQU   DCBMRAPG
DCBMRCI  EQU   DCBMACR1
DCBMRMVG EQU   DCBMRCI
DCBMRLCG EQU   DCBMACR1
DCBMRABC EQU   DCBMACR1
DCBMRPT1 EQU   DCBMRABC
DCBMRSBG EQU   DCBMRPT1
DCBMRCRL EQU   DCBMACR1
DCBMRCHK EQU   DCBMRCRL
DCBMRRDX EQU   DCBMRCHK
DCBMRDMG EQU   DCBMACR1
DCBMACR2 EQU   DCBMACR+1
DCBMRPUT EQU   DCBMACR2
DCBMRWRT EQU   DCBMACR2
DCBMRMVP EQU   DCBMACR2
DCBMR5WD EQU   DCBMACR2
DCBMRLDM EQU   DCBMR5WD
DCBMRLCP EQU   DCBMRLDM
DCBMR4WD EQU   DCBMACR2
DCBMRPT2 EQU   DCBMR4WD
DCBMRTMD EQU   DCBMRPT2
DCBMR3WD EQU   DCBMACR2
DCBMRCTL EQU   DCBMR3WD
DCBMRSTK EQU   DCBMRCTL
DCBMR1WD EQU   DCBMACR2
DCBMRSWA EQU   DCBMR1WD
DCBMRDMD EQU   DCBMRSWA
IHADCS25 EQU   0
DCBMACRF EQU   IHADCS25+2
DCBMACF1 EQU   DCBMACRF
DCBMFFE  EQU   DCBMACF1
DCBMFGET EQU   DCBMFFE
DCBMFAPG EQU   DCBMACF1
DCBMFRD  EQU   DCBMFAPG
DCBMFCI  EQU   DCBMACF1
DCBMFMVG EQU   DCBMFCI
DCBMFLCG EQU   DCBMACF1
DCBMFABC EQU   DCBMACF1
DCBMFPT1 EQU   DCBMFABC
DCBMFSBG EQU   DCBMFPT1
DCBMFCRL EQU   DCBMACF1
DCBMFCHK EQU   DCBMFCRL
DCBMFDMG EQU   DCBMACF1
DCBMACF2 EQU   DCBMACRF+1
DCBMFPUT EQU   DCBMACF2
DCBMFWRT EQU   DCBMACF2
DCBMFMVP EQU   DCBMACF2
DCBMF5WD EQU   DCBMACF2
DCBMFLDM EQU   DCBMF5WD
DCBMFLCP EQU   DCBMFLDM
DCBMF4WD EQU   DCBMACF2
DCBMFPT2 EQU   DCBMF4WD
DCBMFTMD EQU   DCBMFPT2
DCBMF3WD EQU   DCBMACF2
DCBMFCTL EQU   DCBMF3WD
DCBMFSTK EQU   DCBMFCTL
DCBMF1WD EQU   DCBMACF2
DCBMFSWA EQU   DCBMF1WD
DCBMFDMD EQU   DCBMFSWA
DCBDEBAD EQU   IHADCS25+4
DCBIFLGS EQU   DCBDEBAD
IHADCS26 EQU   0
DCBWRITE EQU   IHADCS26
DCBREAD  EQU   DCBWRITE
DCBWRITA EQU   DCBREAD+1
IHADCS27 EQU   0
DCBGET   EQU   IHADCS27
DCBPUT   EQU   DCBGET
DCBGETA  EQU   DCBPUT+1
IHADCS36 EQU   0
DCBGERR  EQU   IHADCS36
DCBPERR  EQU   DCBGERR
DCBCHECK EQU   DCBPERR
DCBOPTCD EQU   DCBCHECK
DCBOPTH  EQU   DCBOPTCD
DCBOPTO  EQU   DCBOPTH
DCBOPTZ  EQU   DCBOPTCD
DCBGERRA EQU   DCBCHECK+1
DCBPERRA EQU   DCBGERRA
DCBSYNAD EQU   IHADCS36+4
DCBCIND1 EQU   IHADCS36+8
DCBCIND2 EQU   IHADCS36+9
DCBIOBA  EQU   IHADCS36+16
DCBCICB  EQU   DCBIOBA
IHADCS52 EQU   0
DCBDIRCT EQU   IHADCS52
DCBQSWS  EQU   DCBDIRCT
DCBUSASI EQU   DCBQSWS
DCBQADFS EQU   DCBUSASI
DCBBUFOF EQU   DCBDIRCT+1
IHADCS37 EQU   0
DCBFLAG1 EQU   IHADCS37
IHADCS38 EQU   0
DCBEOBR  EQU   IHADCS38
DCBLRECL EQU   IHADCS38+10
DCBPOINT EQU   IHADCS38+12
DCBCNTRL EQU   DCBPOINT
IHADCS40 EQU   0
DCBEOBAD EQU   IHADCS40
DCBCCCW  EQU   IHADCS40+4
DCBRECAD EQU   DCBCCCW
DCBRECBT EQU   DCBRECAD
DCBRCREL EQU   DCBRECBT
@NM00058 EQU   IHADCS40+12
DCBEROPT EQU   @NM00058
UCB      EQU   0
UCBOB    EQU   0
UCBJBNR  EQU   UCBOB
UCBFL5   EQU   UCBOB+1
UCBAF    EQU   UCBFL5
UCBSTAT  EQU   UCBOB+3
UCBCHAN  EQU   UCBOB+4
UCBSFLS  EQU   UCBOB+6
UCBFLA   EQU   UCBSFLS
UCBFL1   EQU   UCBFLA
UCBBSY   EQU   UCBFL1
UCBNRY   EQU   UCBFL1
UCBPST   EQU   UCBFL1
UCBCUB   EQU   UCBFL1
UCBFLB   EQU   UCBSFLS+1
UCBCHM   EQU   UCBOB+8
UCBCHM1  EQU   UCBCHM
UCBPTH0  EQU   UCBCHM1
UCBPTH1  EQU   UCBCHM1
UCBWGT   EQU   UCBOB+12
UCBNAME  EQU   UCBOB+13
UCBTYP   EQU   UCBOB+16
UCBTBYT1 EQU   UCBTYP
UCB1FEA5 EQU   UCBTBYT1
UCB1FEA6 EQU   UCBTBYT1
UCBTBYT2 EQU   UCBTYP+1
UCB2OPT2 EQU   UCBTBYT2
UCBDUDN1 EQU   UCB2OPT2
UCB2OPT3 EQU   UCBTBYT2
UCBDUDN2 EQU   UCB2OPT3
UCB2OPT4 EQU   UCBTBYT2
UCBRWTAU EQU   UCB2OPT4
UCB2OPT6 EQU   UCBTBYT2
UCB2OPT7 EQU   UCBTBYT2
UCBTBYT3 EQU   UCBTYP+2
UCBDVCLS EQU   UCBTBYT3
UCB3UREC EQU   UCBDVCLS
UCBTBYT4 EQU   UCBTYP+3
UCBEXTPT EQU   UCBOB+20
UCBFLC   EQU   UCBEXTPT
UCBDEV   EQU   UCBOB+24
UCBCMEXT EQU   0
UCBATI   EQU   UCBCMEXT+3
@NM00065 EQU   UCBATI
UCBFLP1  EQU   UCBCMEXT+5
UCBMT    EQU   0
UCBOCR   EQU   0
UCB3540X EQU   0
UCBDKBYT EQU   UCB3540X+6
UCBUCS   EQU   0
UCBUCSOP EQU   UCBUCS+4
UCBFCBOP EQU   UCBUCS+5
JESCT    EQU   0
JESWAA   EQU   JESCT+8
JESSSREQ EQU   JESCT+20
JESSSCT  EQU   JESCT+24
CVTMAP   EQU   0
CVTDAR   EQU   CVTMAP+72
CVTFLGS1 EQU   CVTDAR
CVTDCB   EQU   CVTMAP+116
CVTIERLC EQU   CVTMAP+144
CVTOPTA  EQU   CVTMAP+182
CVTOPTB  EQU   CVTMAP+183
CVTGTF   EQU   CVTMAP+236
CVTGTFST EQU   CVTGTF
CVTGTFS  EQU   CVTGTFST
CVTSTATE EQU   CVTGTFST
CVTTMODE EQU   CVTGTFST
CVTFORM  EQU   CVTGTFST
CVTAQAVT EQU   CVTMAP+240
CVTTCMFG EQU   CVTAQAVT
CVTVOLM2 EQU   CVTMAP+244
CVTTATA  EQU   CVTVOLM2
CVTTSKS  EQU   CVTTATA
CVTVOLF2 EQU   CVTTSKS
CVTTAT   EQU   CVTTATA+1
CVTATER  EQU   CVTMAP+248
CVTEXT1  EQU   CVTMAP+252
CVTPURG  EQU   CVTMAP+260
CVTQMSG  EQU   CVTMAP+268
CVTDMSR  EQU   CVTMAP+272
CVTJESCT EQU   CVTMAP+296
CVTERPV  EQU   CVTMAP+316
CVTINTLA EQU   CVTMAP+320
CVTAPF   EQU   CVTMAP+324
CVTEXT2  EQU   CVTMAP+328
CVTHJES  EQU   CVTMAP+332
CVTPGSIA EQU   CVTMAP+348
CVTA1F1  EQU   CVTMAP+356
CVTSYSK  EQU   CVTMAP+357
CVTVOLM1 EQU   CVTMAP+380
CVTVOLF1 EQU   CVTVOLM1
CVTATMCT EQU   CVTMAP+388
CVTXTNT1 EQU   0
CVTXTNT2 EQU   0
CVTDSSV  EQU   CVTXTNT2
CVTFLGBT EQU   CVTXTNT2+5
CVTQID   EQU   CVTXTNT2+24
CVTRV400 EQU   CVTXTNT2+52
CVTRV409 EQU   CVTXTNT2+53
CVTATCVT EQU   CVTXTNT2+64
CVTRV429 EQU   CVTXTNT2+84
CVTRV438 EQU   CVTXTNT2+85
CVTRV457 EQU   CVTXTNT2+112
CVTRV466 EQU   CVTXTNT2+113
CVTFIX   EQU   0
CVTRELNO EQU   CVTFIX+252
IOBPREFX EQU   0
IOBCFLG1 EQU   IOBPREFX
IOBSTDRD EQU   0
IOBFLAG1 EQU   IOBSTDRD
IOBCYCCK EQU   IOBFLAG1
IOBRSTRT EQU   IOBFLAG1
IOBFLAG2 EQU   IOBSTDRD+1
IOBPURGE EQU   IOBFLAG2
IOBRDHA0 EQU   IOBFLAG2
IOBSENS0 EQU   IOBSTDRD+2
IOBS0B7  EQU   IOBSENS0
IOBSENS1 EQU   IOBSTDRD+3
IOBECBPT EQU   IOBSTDRD+4
IOBFLAG3 EQU   IOBSTDRD+8
IOBFL3   EQU   IOBFLAG3
IOBCSW   EQU   IOBSTDRD+9
IOBIOCSW EQU   IOBCSW
IOBSTART EQU   IOBSTDRD+16
IOBDCBPT EQU   IOBSTDRD+20
IOBFLAG4 EQU   IOBDCBPT
IOBRESTR EQU   IOBSTDRD+24
IOBINCAM EQU   IOBSTDRD+28
IOBBTAMF EQU   IOBINCAM
ABEPARML EQU   0
ABEOPTMK EQU   ABEPARML+3
SSCVT    EQU   0
SSCTSSVT EQU   SSCVT+16
SVT      EQU   0
SSVTFNUM EQU   SVT+2
SSREQ    EQU   0
SWAMGR   EQU   0
UCBBGN   EQU   0
TIOENTRY EQU   TIOT1+24
TIOELNGH EQU   TIOENTRY
TIOESTTA EQU   TIOENTRY+1
TIOERLOC EQU   TIOENTRY+2
TIOELINK EQU   TIOERLOC+1
TIOESYOT EQU   TIOELINK
TIOEDDNM EQU   TIOENTRY+4
TIOESTTC EQU   TIOENTRY+15
TIOESTTB EQU   TIOENTRY+16
TIOEFSRT EQU   TIOENTRY+17
POOLSTAR EQU   TIOENTRY+20
TIOEDEVE EQU   TIOESTTB
TIOSTTB  EQU   TIOEDEVE
JSCBSEC2 EQU   JSCBEND1
JSCBSEC3 EQU   JSCBEND1
JSCBJCT  EQU   JSCBSEC3
JSCBJCTA EQU   JSCBJCT+1
JSCBASID EQU   JSCBSEC3+8
JSCBJNL  EQU   JSCBSEC3+28
JSCBJJSB EQU   JSCBJNL
JSCBSUB  EQU   JSCBSEC3+40
JSCSCT   EQU   JSCBSEC3+68
JSCRSV35 EQU   JSCBSEC3+96
JSCRSV36 EQU   JSCRSV35
JSCRSV37 EQU   JSCRSV35+2
JSCRSV45 EQU   JSCBSEC3+112
JSCRSV46 EQU   JSCRSV45
JSCRSV47 EQU   JSCRSV45+2
DEBBAS02 EQU   DEBBASND
DEBDDS1  EQU   DEBBAS02
DEBSUCBA EQU   DEBDDS1
DEBDEVED EQU   DEBDDS1+4
DEBRDCB  EQU   DEBDDS1+4
DEBPDCB  EQU   DEBDDS1+8
DEBWDCB  EQU   DEBDDS1+12
DEBACS09 EQU   DEBDEVED
DEBASC09 EQU   DEBACS09
DEBEAMFG EQU   DEBASC09+3
DEBDSID  EQU   DEBASC09+4
DEBEOD   EQU   DEBASC09+12
DEBBOE   EQU   DEBEOD
DEBEODRV EQU   DEBBOE
DEBEODTT EQU   DEBBOE+1
DEBEOD0  EQU   DEBBOE+2
DEBEODSS EQU   DEBBOE+3
DEBBAS01 EQU   DEBBASND
DEBISAM  EQU   DEBBAS01
DEBFIEAD EQU   DEBISAM
DEBFPEAD EQU   DEBISAM+4
DEBFOEAD EQU   DEBISAM+8
DEBEXPT  EQU   DEBISAM+12
DEBRPSID EQU   DEBEXPT
UCBOBS01 EQU   UCBDEV
UCBSTAB  EQU   UCBOBS01+10
UCBBSVL  EQU   UCBSTAB
UCBPRSRS EQU   UCBSTAB
UCBDMCT  EQU   UCBOBS01+11
UCBFL4   EQU   UCBOBS01+13
UCBOBS02 EQU   UCBDEV
UCBTFL1  EQU   UCBOBS02+19
UCBXTN   EQU   UCBOBS02+20
UCBVOPT  EQU   UCBXTN
UCBOBS03 EQU   UCBDEV
UCBXTADR EQU   UCBOBS03
UCBOBS04 EQU   UCBDEV
UCBBTA   EQU   UCBOBS04+12
UCBOBS06 EQU   UCBDEV
UCBAOF   EQU   UCBOBS06
UCBAOF1  EQU   UCBAOF
UCBAOF2  EQU   UCBAOF+1
@NM00064 EQU   UCBOBS06+3
UCBIRB   EQU   UCBOBS06+4
UCBGRAF  EQU   UCBIRB
UCBLDNCA EQU   UCBOBS06+8
UCBRDYQ  EQU   UCBLDNCA
UCBIRLN  EQU   UCBRDYQ
UCBLDNCB EQU   UCBRDYQ+1
UCBCTLNK EQU   UCBOBS06+12
UCBOBS07 EQU   UCBDEV
UCBOBS08 EQU   UCBDEV
UCBOBS09 EQU   UCBDEV
CVTS01   EQU   CVTPGSIA
CVTLPDIA EQU   CVTS01+12
CVTDIRST EQU   CVTLPDIA
CVTSLIDA EQU   CVTS01+24
CVTCTLFG EQU   CVTS01+50
CVTRV210 EQU   CVTS01+424
CVTRV219 EQU   CVTS01+425
CVTRV228 EQU   CVTS01+426
CVTRV237 EQU   CVTS01+427
CVTMFRTR EQU   CVTS01+452
CVTRV262 EQU   CVTS01+468
CVTRV271 EQU   CVTS01+469
CVTRV280 EQU   CVTS01+470
CVTRV289 EQU   CVTS01+471
CVTGSDA  EQU   CVTS01+600
IOBORG01 EQU   IOBPREFX+8
IOBNIOBA EQU   IOBORG01
IOBNFLG1 EQU   IOBNIOBA
IOBORG02 EQU   IOBPREFX+8
IOBDQADA EQU   IOBORG02
IOBDEQIN EQU   IOBDQADA
IOBORG03 EQU   IOBPREFX+12
IOBORG04 EQU   IOBINCAM
IOBORG12 EQU   IOBINCAM
IOBFL4   EQU   IOBORG12
IOBEXTEN EQU   IOBSTDRD+32
IOBSEEK  EQU   IOBEXTEN
IOBBB    EQU   IOBSEEK+1
IOBCC    EQU   IOBSEEK+3
IOBHH    EQU   IOBSEEK+5
IOBORG05 EQU   IOBEXTEN
IOBORG06 EQU   IOBEXTEN
IOBNXTPT EQU   IOBORG06+4
IOBSTATA EQU   IOBNXTPT
IOBORG07 EQU   IOBEXTEN+8
W1IEXTEN EQU   IOBORG07
IOBORG08 EQU   IOBEXTEN+8
IOBINDCT EQU   IOBORG08+4
IOBUNSQR EQU   IOBORG08+5
IOBFCHAD EQU   IOBORG08+8
IOBORG09 EQU   IOBEXTEN+8
IOBDPLAD EQU   IOBORG09+4
IOBDTYPE EQU   IOBORG09+8
IOBDTYP2 EQU   IOBORG09+9
IOBDSTAT EQU   IOBORG09+10
IOBSTAT1 EQU   IOBDSTAT
IOBORG10 EQU   IOBEXTEN+8
IOBSEEK2 EQU   IOBORG10
IOBORG11 EQU   IOBEXTEN
IOBERCT  EQU   IOBORG11
IOBUCBXV EQU   IOBERCT
IOBNAME  EQU   IOBORG11+4
IOBORG13 EQU   IOBEXTEN
IOBSKADR EQU   IOBORG13
DCBAMWRK EQU   DCBIOBAD
DCBAMFLG EQU   DCBAMWRK
DCBAMOUT EQU   DCBAMFLG
DCBAMWKA EQU   DCBAMWRK+1
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
DCBAMIN  EQU   DCBAMFLG
@NM00069 EQU   DCBAMFLG
IOBSKSS  EQU   IOBSKADR+3
IOBSK0   EQU   IOBSKADR+2
IOBSKTT  EQU   IOBSKADR+1
IOBSKRV  EQU   IOBSKADR
IOBCSWSV EQU   IOBORG11+17
IOBSENSV EQU   IOBORG11+16
IOBRCD   EQU   IOBORG11+12
IOBMDREC EQU   IOBORG11+8
IOBNAMEA EQU   IOBNAME+1
IOBNAMSZ EQU   IOBNAME
IOBERCTA EQU   IOBERCT+1
IOBRTYPE EQU   IOBUCBXV
IOBRDCHP EQU   IOBORG10+20
IOBNEXTA EQU   IOBORG10+16
IOBREADA EQU   IOBORG10+12
IOBBUFC  EQU   IOBORG10+8
IOBSK2R  EQU   IOBSEEK2+7
IOBSK2HH EQU   IOBSEEK2+5
IOBSK2CC EQU   IOBSEEK2+3
IOBSK2BB EQU   IOBSEEK2+1
IOBSK2M  EQU   IOBSEEK2
IOBCHNPR EQU   IOBORG09+40
IOBDNCRF EQU   IOBORG09+32
IOBRSV35 EQU   IOBORG09+24
IOBDQPTR EQU   IOBORG09+20
IOBRSV34 EQU   IOBORG09+18
IOBDBYTN EQU   IOBORG09+16
IOBDCPND EQU   IOBORG09+12
IOBSTAT2 EQU   IOBDSTAT+1
IOBSIORT EQU   IOBSTAT1
IOBADDVU EQU   IOBSTAT1
IOBBUFF  EQU   IOBSTAT1
IOBENQUE EQU   IOBSTAT1
IOBPASS2 EQU   IOBSTAT1
IOBSYNCH EQU   IOBSTAT1
IOBNEWVL EQU   IOBSTAT1
IOBABNRM EQU   IOBSTAT1
IOBRELEX EQU   IOBDTYP2
IOBADDTY EQU   IOBDTYP2
IOBTYPE  EQU   IOBDTYP2
IOBRQUST EQU   IOBDTYP2
IOBSUFFX EQU   IOBDTYP2
IOBSBLKL EQU   IOBDTYP2
IOBSKEY  EQU   IOBDTYP2
IOBRELBL EQU   IOBDTYPE
IOBRDEXC EQU   IOBDTYPE
IOBDYNBF EQU   IOBDTYPE
IOBACTAD EQU   IOBDTYPE
IOBFDBCK EQU   IOBDTYPE
IOBEXTSC EQU   IOBDTYPE
IOBOVFLO EQU   IOBDTYPE
IOBVERFY EQU   IOBDTYPE
IOBDPLB  EQU   IOBDPLAD+1
IOBDAYLI EQU   IOBDPLAD
IOBDIOBS EQU   IOBORG09+2
IOBDBYTR EQU   IOBORG09
IOBBCHAD EQU   IOBORG08+12
IOBFCHNB EQU   IOBFCHAD+1
IOBCOUNT EQU   IOBFCHAD
IOBASYN  EQU   IOBORG08+7
IOBAPP   EQU   IOBORG08+6
IOBRSV32 EQU   IOBUNSQR
IOBRSV31 EQU   IOBUNSQR
IOBRSV30 EQU   IOBUNSQR
IOBKNRWR EQU   IOBUNSQR
IOBKNWR  EQU   IOBUNSQR
IOBNTAV2 EQU   IOBUNSQR
IOBNTAV1 EQU   IOBUNSQR
IOBCPBSY EQU   IOBUNSQR
IOBCHNNL EQU   IOBINDCT
IOBRSV29 EQU   IOBINDCT
IOBRSV28 EQU   IOBINDCT
IOBRSV27 EQU   IOBINDCT
IOBKEYAD EQU   IOBINDCT
IOBOVPTR EQU   IOBINDCT
IOBUNSCH EQU   IOBINDCT
IOBDEQCP EQU   IOBINDCT
IOBCCWAD EQU   IOBORG08
W1OEXTEN EQU   W1IEXTEN
IOBCCW   EQU   IOBORG06+8
IOBNXTPB EQU   IOBNXTPT+1
IOBRSV26 EQU   IOBSTATA
IOBRSV25 EQU   IOBSTATA
IOBRSV24 EQU   IOBSTATA
IOBRSV23 EQU   IOBSTATA
IOBRSV22 EQU   IOBSTATA
IOBRSV21 EQU   IOBSTATA
IOBRSV20 EQU   IOBSTATA
IOBAVLFL EQU   IOBSTATA
IOBRSV37 EQU   IOBORG06+1
IOBUCBXG EQU   IOBORG06
IOBCPA   EQU   IOBORG05+32
IOBERINF EQU   IOBORG05+16
IOBERCCW EQU   IOBORG05+8
IOBSNDPT EQU   IOBORG05+7
IOBRCVPT EQU   IOBORG05+6
IOBWORK  EQU   IOBORG05+1
IOBUCBX  EQU   IOBORG05
IOBR     EQU   IOBSEEK+7
IOBHH2   EQU   IOBHH+1
IOBHH1   EQU   IOBHH
IOBCC2   EQU   IOBCC+1
IOBCC1   EQU   IOBCC
IOBBB2   EQU   IOBBB+1
IOBBB1   EQU   IOBBB
IOBM     EQU   IOBSEEK
IOBRSV46 EQU   IOBFL4
IOBRSV47 EQU   IOBFL4
IOBENT   EQU   IOBFL4
IOBEQP   EQU   IOBFL4
IOBBUS   EQU   IOBFL4
IOBDCK   EQU   IOBFL4
IOBREJ   EQU   IOBFL4
IOBOVR   EQU   IOBFL4
IOBCRILC EQU   IOBORG04+1
IOBCRDCC EQU   IOBORG04
IOBGQECB EQU   IOBORG03
IOBSWAP  EQU   IOBORG02+4
IOBDQADB EQU   IOBDQADA+1
IOBRSV13 EQU   IOBDEQIN
IOBRSV12 EQU   IOBDEQIN
IOBRSV11 EQU   IOBDEQIN
IOBRSV10 EQU   IOBDEQIN
IOBRSV09 EQU   IOBDEQIN
IOBRSV08 EQU   IOBDEQIN
IOBRSV07 EQU   IOBDEQIN
IOBDEQ   EQU   IOBDEQIN
IOBNECB  EQU   IOBORG01+4
IOBNIOBB EQU   IOBNIOBA+1
IOBFIRST EQU   IOBNFLG1
IOBUPERR EQU   IOBNFLG1
IOBSPAN  EQU   IOBNFLG1
IOBBKSPC EQU   IOBNFLG1
IOBUPDAT EQU   IOBNFLG1
IOBREAD  EQU   IOBNFLG1
IOBWRITE EQU   IOBNFLG1
IOBPRTOV EQU   IOBNFLG1
CVTRV628 EQU   CVTS01+728
CVTRV627 EQU   CVTS01+724
CVTRV626 EQU   CVTS01+720
CVTRV625 EQU   CVTS01+716
CVTRV624 EQU   CVTS01+712
CVTRV623 EQU   CVTS01+708
CVTRV622 EQU   CVTS01+704
CVTRV621 EQU   CVTS01+700
CVTRV620 EQU   CVTS01+696
CVTRV619 EQU   CVTS01+692
CVTRV618 EQU   CVTS01+688
CVTRV617 EQU   CVTS01+684
CVTRV616 EQU   CVTS01+680
CVTRV615 EQU   CVTS01+676
CVTRV614 EQU   CVTS01+672
CVTRV613 EQU   CVTS01+668
CVTRV612 EQU   CVTS01+664
CVTRV611 EQU   CVTS01+660
CVTRV610 EQU   CVTS01+656
CVTRV609 EQU   CVTS01+652
CVTRV608 EQU   CVTS01+648
CVTRV607 EQU   CVTS01+644
CVTRV606 EQU   CVTS01+640
CVTRV605 EQU   CVTS01+636
CVTRV604 EQU   CVTS01+632
CVTEFF02 EQU   CVTS01+628
CVTCBBR  EQU   CVTS01+624
CVTSSCR  EQU   CVTS01+620
CVTEVENT EQU   CVTS01+616
CVTCRCA  EQU   CVTS01+612
CVTTPIO  EQU   CVTS01+608
CVTADV   EQU   CVTS01+604
CVTGSDAB EQU   CVTGSDA
CVTQV3   EQU   CVTS01+596
CVTQV2   EQU   CVTS01+592
CVTQV1   EQU   CVTS01+588
CVTRPT   EQU   CVTS01+584
CVTSSRB  EQU   CVTS01+580
CVTCSDRL EQU   CVTS01+576
CVTEXP1  EQU   CVTS01+572
CVTRMPMT EQU   CVTS01+568
CVTRMPTT EQU   CVTS01+564
CVTVPSA  EQU   CVTS01+560
CVTVSTOP EQU   CVTS01+556
CVTGTFR8 EQU   CVTS01+552
CVTQUIT  EQU   CVTS01+548
CVTVACR  EQU   CVTS01+544
CVTWTCB  EQU   CVTS01+540
CVTSTPRS EQU   CVTS01+536
CVT0PT02 EQU   CVTS01+532
CVTDARCM EQU   CVTS01+528
CVTIRECM EQU   CVTS01+524
CVTJRECM EQU   CVTS01+520
CVTVEMS0 EQU   CVTS01+516
CVTSPFRR EQU   CVTS01+512
CVTRLSTG EQU   CVTS01+508
CVT0TC0A EQU   CVTS01+504
CVTGMBR  EQU   CVTS01+500
CVTLFRM  EQU   CVTS01+496
CVTRMBR  EQU   CVTS01+492
CVTVIOP  EQU   CVTS01+488
CVTRV307 EQU   CVTS01+486
CVTRV306 EQU   CVTS01+484
CVTRV305 EQU   CVTS01+482
CVTRV304 EQU   CVTS01+480
CVTRV303 EQU   CVTS01+478
CVTRV302 EQU   CVTS01+476
CVTTRCA  EQU   CVTS01+472
CVTRV297 EQU   CVTRV289
CVTRV296 EQU   CVTRV289
CVTRV295 EQU   CVTRV289
CVTRV294 EQU   CVTRV289
CVTRV293 EQU   CVTRV289
CVTRV292 EQU   CVTRV289
CVTRV291 EQU   CVTRV289
CVTRV290 EQU   CVTRV289
CVTRV288 EQU   CVTRV280
CVTRV287 EQU   CVTRV280
CVTRV286 EQU   CVTRV280
CVTRV285 EQU   CVTRV280
CVTRV284 EQU   CVTRV280
CVTRV283 EQU   CVTRV280
CVTRV282 EQU   CVTRV280
CVTRV281 EQU   CVTRV280
CVTRV279 EQU   CVTRV271
CVTRV278 EQU   CVTRV271
CVTRV277 EQU   CVTRV271
CVTRV276 EQU   CVTRV271
CVTRV275 EQU   CVTRV271
CVTRV274 EQU   CVTRV271
CVTRV273 EQU   CVTRV271
CVTRV272 EQU   CVTRV271
CVTRV270 EQU   CVTRV262
CVTRV269 EQU   CVTRV262
CVTRV268 EQU   CVTRV262
CVTRV267 EQU   CVTRV262
CVTRV266 EQU   CVTRV262
CVTRV265 EQU   CVTRV262
CVTRV264 EQU   CVTRV262
CVTRV263 EQU   CVTRV262
CVTVFP   EQU   CVTS01+464
CVTVSI   EQU   CVTS01+460
CVTVPSIB EQU   CVTS01+456
CVTMFACT EQU   CVTMFRTR
CVTMFCTL EQU   CVTS01+448
CVTPVBP  EQU   CVTS01+444
CVTPWI   EQU   CVTS01+440
CVTRV254 EQU   CVTS01+438
CVTRV253 EQU   CVTS01+436
CVTRV252 EQU   CVTS01+434
CVTRV251 EQU   CVTS01+433
CVTRV250 EQU   CVTS01+432
CVTRV249 EQU   CVTS01+431
CVTRV248 EQU   CVTS01+430
CVTRV247 EQU   CVTS01+429
CVTRV246 EQU   CVTS01+428
CVTRV245 EQU   CVTRV237
CVTRV244 EQU   CVTRV237
CVTRV243 EQU   CVTRV237
CVTRV242 EQU   CVTRV237
CVTRV241 EQU   CVTRV237
CVTRV240 EQU   CVTRV237
CVTRV239 EQU   CVTRV237
CVTRV238 EQU   CVTRV237
CVTRV236 EQU   CVTRV228
CVTRV235 EQU   CVTRV228
CVTRV234 EQU   CVTRV228
CVTRV233 EQU   CVTRV228
CVTRV232 EQU   CVTRV228
CVTRV231 EQU   CVTRV228
CVTRV230 EQU   CVTRV228
CVTRV229 EQU   CVTRV228
CVTRV227 EQU   CVTRV219
CVTRV226 EQU   CVTRV219
CVTRV225 EQU   CVTRV219
CVTRV224 EQU   CVTRV219
CVTRV223 EQU   CVTRV219
CVTRV222 EQU   CVTRV219
CVTRV221 EQU   CVTRV219
CVTRV220 EQU   CVTRV219
CVTRV218 EQU   CVTRV210
CVTRV217 EQU   CVTRV210
CVTRV216 EQU   CVTRV210
CVTRV215 EQU   CVTRV210
CVTRV214 EQU   CVTRV210
CVTRV213 EQU   CVTRV210
CVTRV212 EQU   CVTRV210
CVTRV211 EQU   CVTRV210
CVTLCCAT EQU   CVTS01+420
CVTPCCAT EQU   CVTS01+416
CVTIPCRP EQU   CVTS01+412
CVTIPCRI EQU   CVTS01+408
CVTIPCDS EQU   CVTS01+404
CVTAIDVT EQU   CVTS01+400
CVTSSAP  EQU   CVTS01+396
CVTEHCIR EQU   CVTS01+392
CVTEHDEF EQU   CVTS01+388
CVTDAIR  EQU   CVTS01+384
CVTPERFM EQU   CVTS01+380
CVT044R2 EQU   CVTS01+376
CVTFETCH EQU   CVTS01+372
CVTRSTWD EQU   CVTS01+368
CVTSPOST EQU   CVTS01+364
CVTIOBP  EQU   CVTS01+360
CVTASMVT EQU   CVTS01+356
CVTRECRQ EQU   CVTS01+352
CVTWSAC  EQU   CVTS01+348
CVTRV149 EQU   CVTS01+344
CVTWSAL  EQU   CVTS01+340
CVTSPSA  EQU   CVTS01+336
CVTGLMN  EQU   CVTS01+332
CVTVEAC0 EQU   CVTS01+328
CVT062R1 EQU   CVTS01+324
CVTRPOST EQU   CVTS01+320
CVTDQIQE EQU   CVTS01+316
CVTCSD   EQU   CVTS01+312
CVTLKRMA EQU   CVTS01+308
CVTRSPIE EQU   CVTS01+304
CVTRENQ  EQU   CVTS01+300
CVTLQCB  EQU   CVTS01+296
CVTFQCB  EQU   CVTS01+292
CVTQCS01 EQU   CVTS01+288
CVTAPFT  EQU   CVTS01+284
CVTPARRL EQU   CVTS01+280
CVTVWAIT EQU   CVTS01+276
CVTGSPL  EQU   CVTS01+272
CVTLSMQ  EQU   CVTS01+268
CVTGSMQ  EQU   CVTS01+264
CVTEXPRO EQU   CVTS01+260
CVTOPCTP EQU   CVTS01+256
CVTSIC   EQU   CVTS01+252
CVTTPIOS EQU   CVTS01+248
CVTRTMS  EQU   CVTS01+244
CVTSDBF  EQU   CVTS01+240
CVTSCBP  EQU   CVTS01+236
CVTSDMP  EQU   CVTS01+232
CVTSV60  EQU   CVTS01+228
CVTRTMCT EQU   CVTS01+224
CVTASCBL EQU   CVTS01+220
CVTASCBH EQU   CVTS01+216
CVTGDA   EQU   CVTS01+212
CVTASVT  EQU   CVTS01+208
CVTVVMDI EQU   CVTS01+204
CVTAQTOP EQU   CVTS01+200
CVTIOSCS EQU   CVTS01+196
CVTSDRM  EQU   CVTS01+192
CVTOPTE  EQU   CVTS01+188
CVTSTXU  EQU   CVTS01+184
CVTQUIS  EQU   CVTS01+180
CVTPARS  EQU   CVTS01+176
CVTS1EE  EQU   CVTS01+172
CVTFRAS  EQU   CVTS01+168
CVTQSAS  EQU   CVTS01+164
CVTCRAS  EQU   CVTS01+160
CVTCRMN  EQU   CVTS01+156
CVTDELCP EQU   CVTS01+152
CVTFRECL EQU   CVTS01+148
CVTGETCL EQU   CVTS01+144
CVTBLDCP EQU   CVTS01+140
CVTAUTHL EQU   CVTS01+136
CVTSCAN  EQU   CVTS01+132
CVTRV144 EQU   CVTS01+130
CVTMAXMP EQU   CVTS01+128
CVTSTCK  EQU   CVTS01+124
CVTRV139 EQU   CVTS01+123
CVTDSSAC EQU   CVTS01+122
CVTRV513 EQU   CVTS01+121
CVTIOSPL EQU   CVTS01+120
CVTPTGT  EQU   CVTS01+116
CVTCSPIE EQU   CVTS01+112
CVTSMFEX EQU   CVTS01+108
CVTOLT0A EQU   CVTS01+104
CVTSRBRT EQU   CVTS01+100
CVTPUTL  EQU   CVTS01+96
CVTRV519 EQU   CVTS01+92
CVTRV327 EQU   CVTS01+88
CVTRV326 EQU   CVTS01+84
CVTRV325 EQU   CVTS01+80
CVTRV324 EQU   CVTS01+76
CVT0VL01 EQU   CVTS01+72
CVTSHRVM EQU   CVTS01+68
CVTRV332 EQU   CVTS01+64
CVTTAS   EQU   CVTS01+60
CVTRSCN  EQU   CVTS01+56
CVTTRAC2 EQU   CVTS01+54
CVTTRACE EQU   CVTS01+52
CVTAPG   EQU   CVTS01+51
CVTSDTRC EQU   CVTCTLFG
CVTGTRCE EQU   CVTCTLFG
CVTNOMP  EQU   CVTCTLFG
CVTRSV79 EQU   CVTCTLFG
CVTDSTAT EQU   CVTCTLFG
CVTRSV78 EQU   CVTCTLFG
CVTRV333 EQU   CVTCTLFG
CVTRV323 EQU   CVTCTLFG
CVTSPVLK EQU   CVTS01+49
CVTRSV77 EQU   CVTS01+48
CVTRV331 EQU   CVTS01+44
CVTRV330 EQU   CVTS01+40
CVTRV329 EQU   CVTS01+36
CVTRV328 EQU   CVTS01+32
CVTRV322 EQU   CVTS01+28
CVTSLID  EQU   CVTSLIDA+1
CVTSYLK  EQU   CVTSLIDA
CVTRV321 EQU   CVTS01+20
CVTRV320 EQU   CVTS01+16
CVTLPDIR EQU   CVTLPDIA+1
CVTRSV69 EQU   CVTDIRST
CVTRSV68 EQU   CVTDIRST
CVTRSV67 EQU   CVTDIRST
CVTRSV66 EQU   CVTDIRST
CVTRSV65 EQU   CVTDIRST
CVTRSV64 EQU   CVTDIRST
CVTRSV63 EQU   CVTDIRST
CVTDICOM EQU   CVTDIRST
CVTPVTP  EQU   CVTS01+8
CVTLPDSR EQU   CVTS01+4
CVTGETL  EQU   CVTS01
UCBRV066 EQU   UCBOBS09+4
UCBIOSBA EQU   UCBOBS09
UCBRV042 EQU   UCBOBS08+5
UCBCTCF1 EQU   UCBOBS08+4
UCBCTCAD EQU   UCBOBS08
UCBICNCB EQU   UCBOBS07+4
UCBRV040 EQU   UCBOBS07
UCBCTLNA EQU   UCBCTLNK+1
UCBRLN   EQU   UCBCTLNK
UCBRDYQA EQU   UCBLDNCB
UCBINRLN EQU   UCBIRLN
UCBIRBA  EQU   UCBIRB+1
UCBRV039 EQU   UCBGRAF
UCBDWNR  EQU   UCBGRAF
UCBRPND  EQU   UCBGRAF
UCBUPM   EQU   UCBGRAF
UCBBTAM  EQU   UCBGRAF
UCBDRNO  EQU   UCBGRAF
UCBDRO   EQU   UCBGRAF
UCBOIP   EQU   UCBGRAF
UCBATRCD EQU   @NM00064
UCBSKPFG EQU   @NM00064
UCBRIPND EQU   @NM00064
UCBRTIAC EQU   @NM00064
UCBRSV79 EQU   @NM00064
UCBRSV78 EQU   @NM00064
UCBRSV77 EQU   @NM00064
UCBOLTEP EQU   @NM00064
UCBATNCT EQU   UCBOBS06+2
UCBRSV76 EQU   UCBAOF2
UCBRSV75 EQU   UCBAOF2
UCBRSV74 EQU   UCBAOF2
UCBRSV73 EQU   UCBAOF2
UCBRSV72 EQU   UCBAOF2
UCBRSV71 EQU   UCBAOF2
UCBRSV70 EQU   UCBAOF2
UCBRSV69 EQU   UCBAOF2
UCBRSV68 EQU   UCBAOF1
UCBRSV67 EQU   UCBAOF1
UCBRSV66 EQU   UCBAOF1
UCBRSV65 EQU   UCBAOF1
UCBRSV64 EQU   UCBAOF1
UCBOFNL  EQU   UCBAOF1
UCBOFSP  EQU   UCBAOF1
UCBOFMCR EQU   UCBAOF1
UCBBTB   EQU   UCBBTA+1
UCBDI    EQU   UCBBTA
UCBSNS   EQU   UCBOBS04+8
UCBTEB   EQU   UCBOBS04+4
UCBGCB   EQU   UCBOBS04+3
UCBOPEN  EQU   UCBOBS04+2
UCBSTART EQU   UCBOBS04
UCBXTNB  EQU   UCBXTN+1
UCBRSV22 EQU   UCBVOPT
UCBRSV21 EQU   UCBVOPT
UCBRSV20 EQU   UCBVOPT
UCBESVE  EQU   UCBVOPT
UCBERPC  EQU   UCBVOPT
UCBESVC  EQU   UCBVOPT
UCBEVA   EQU   UCBVOPT
UCBESV   EQU   UCBVOPT
UCBRV009 EQU   UCBTFL1
UCBRV008 EQU   UCBTFL1
UCBRV007 EQU   UCBTFL1
UCBRV006 EQU   UCBTFL1
UCBRV005 EQU   UCBTFL1
UCBRV038 EQU   UCBTFL1
UCBNSLTP EQU   UCBTFL1
UCBNLTP  EQU   UCBTFL1
UCBRES1B EQU   UCBOBS02+18
UCBFSER  EQU   UCBOBS02+12
@NM00063 EQU   UCBOBS02+4
UCBFSEQ  EQU   UCBOBS02+2
UCBFSCT  EQU   UCBOBS02
UCBNEXP  EQU   UCBOBS01+20
UCBBASE  EQU   UCBOBS01+16
UCBRES1A EQU   UCBOBS01+15
UCBUSER  EQU   UCBOBS01+14
UCBFL47  EQU   UCBFL4
UCBFL46  EQU   UCBFL4
UCBFL45  EQU   UCBFL4
UCBRV065 EQU   UCBFL4
UCBDSS   EQU   UCBFL4
UCBRV028 EQU   UCBFL4
UCBWDAV  EQU   UCBFL4
UCBDAVV  EQU   UCBFL4
UCBSQC   EQU   UCBOBS01+12
UCBDATP  EQU   UCBOBS01+12
UCBDMC   EQU   UCBDMCT
UCBMOUNT EQU   UCBDMCT
UCBBNUL  EQU   UCBSTAB
UCBSHAR  EQU   UCBSTAB
UCBBSTR  EQU   UCBSTAB
UCBBPUB  EQU   UCBSTAB
UCBBPRV  EQU   UCBSTAB
UCBBALB  EQU   UCBPRSRS
UCBPGFL  EQU   UCBSTAB
UCBDVSHR EQU   UCBBSVL
UCBVOLI  EQU   UCBOBS01+4
UCBVTOC  EQU   UCBOBS01
DEBEXPTA EQU   DEBEXPT+1
DEBRSV12 EQU   DEBRPSID
DEBRSV11 EQU   DEBRPSID
DEBRSV10 EQU   DEBRPSID
DEBRSV09 EQU   DEBRPSID
DEBRPSAP EQU   DEBRPSID
DEBRPSO  EQU   DEBRPSID
DEBRPSI  EQU   DEBRPSID
DEBRPSP  EQU   DEBRPSID
DEBFOEB  EQU   DEBFOEAD+1
DEBNOEE  EQU   DEBFOEAD
DEBFPEB  EQU   DEBFPEAD+1
DEBNPEE  EQU   DEBFPEAD
DEBFIEB  EQU   DEBFIEAD+1
DEBNIEE  EQU   DEBFIEAD
DEBBOESS EQU   DEBEODSS
DEBBOE0  EQU   DEBEOD0
DEBBOETT EQU   DEBEODTT
DEBBOERV EQU   DEBEODRV
DEBRV008 EQU   DEBDSID+7
DEBWTPTI EQU   DEBDSID+6
DEBEXDTE EQU   DEBDSID
DEBRV007 EQU   DEBEAMFG
DEBRV006 EQU   DEBEAMFG
DEBRV005 EQU   DEBEAMFG
DEBRV004 EQU   DEBEAMFG
DEBSECVL EQU   DEBEAMFG
DEBVAMSG EQU   DEBEAMFG
DEBDSOPN EQU   DEBEAMFG
DEBMULTI EQU   DEBEAMFG
DEBVSEQU EQU   DEBASC09+2
DEBDSSQL EQU   DEBASC09+1
DEBVOLAC EQU   DEBASC09
DEBWDCBA EQU   DEBWDCB+1
DEBRSV08 EQU   DEBWDCB
DEBPDCBA EQU   DEBPDCB+1
DEBRSV07 EQU   DEBPDCB
DEBRDCBA EQU   DEBRDCB+1
DEBRSV06 EQU   DEBRDCB
DEBSUCBB EQU   DEBSUCBA+1
DEBSDVM  EQU   DEBSUCBA
JSCBEND3 EQU   JSCBSEC3+120
JSCRSV52 EQU   JSCBSEC3+116
JSCRSV51 EQU   JSCRSV47+1
JSCRSV50 EQU   JSCRSV47
JSCRSV49 EQU   JSCRSV46+1
JSCRSV48 EQU   JSCRSV46
JSCRSV44 EQU   JSCBSEC3+108
JSCRSV43 EQU   JSCBSEC3+104
JSCRSV42 EQU   JSCBSEC3+100
JSCRSV41 EQU   JSCRSV37+1
JSCRSV40 EQU   JSCRSV37
JSCRSV39 EQU   JSCRSV36+1
JSCRSV38 EQU   JSCRSV36
JSCBUFPT EQU   JSCBSEC3+92
JSCBACT  EQU   JSCBSEC3+88
JSCBSWSP EQU   JSCBSEC3+87
JSCRSV33 EQU   JSCBSEC3+86
JSCDDNUM EQU   JSCBSEC3+84
JSCRSV53 EQU   JSCBSEC3+82
JSCDDNNO EQU   JSCBSEC3+80
JSCBVATA EQU   JSCBSEC3+76
JSCTMCOR EQU   JSCBSEC3+72
JSCSCTP  EQU   JSCSCT+1
JSCRSV55 EQU   JSCSCT
JSCRSV54 EQU   JSCBSEC3+64
JSCDSABQ EQU   JSCBSEC3+60
JSCBSSIB EQU   JSCBSEC3+56
JSCBFRBA EQU   JSCBSEC3+48
JSCRSV28 EQU   JSCBSEC3+46
JSCBSONO EQU   JSCBSEC3+44
JSCBSUBA EQU   JSCBSUB+1
JSCRSV31 EQU   JSCBSUB
JSCBSMLR EQU   JSCBSEC3+36
JSCBJNLR EQU   JSCBSEC3+32
JSCBJNLA EQU   JSCBJNL+1
JSCBJSBT EQU   JSCBJJSB
JSCBJSBX EQU   JSCBJJSB
JSCBJSBA EQU   JSCBJJSB
JSCBJSBI EQU   JSCBJJSB
@NM00025 EQU   JSCBJJSB
JSCBJNLE EQU   JSCBJJSB
JSCBJNLF EQU   JSCBJJSB
JSCBJNLN EQU   JSCBJJSB
@NM00024 EQU   JSCBSEC3+24
JSCBJRBA EQU   JSCBSEC3+16
JSCBIECB EQU   JSCBSEC3+12
JSCRSV25 EQU   JSCBSEC3+10
JSCBTJID EQU   JSCBASID
JSCBPSCB EQU   JSCBSEC3+4
JSCJCTP  EQU   JSCBJCTA
JSCRSV24 EQU   JSCBJCT
JSCBEND2 EQU   JSCBSEC2
TIOUCBP  EQU   TIOEDEVE+1
TIOVERF  EQU   TIOSTTB
TIOUNLD  EQU   TIOSTTB
TIOMNTD  EQU   TIOSTTB
TIOSETU  EQU   TIOSTTB
TIOVLSR  EQU   TIOSTTB
TIOPVIO  EQU   TIOSTTB
TIOREQD  EQU   TIOSTTB
TIOUSED  EQU   TIOSTTB
TIOTFEND EQU   POOLSTAR+16
TIOPSLOT EQU   POOLSTAR+13
TIOPSTTB EQU   POOLSTAR+12
TIOPPOOL EQU   POOLSTAR+4
TIOPNSRT EQU   POOLSTAR+3
@NM00015 EQU   POOLSTAR+2
TIOPNSLT EQU   POOLSTAR+1
@NM00014 EQU   POOLSTAR
TIOSVERF EQU   TIOESTTB
TIOSUNLD EQU   TIOESTTB
TIOSMNTD EQU   TIOESTTB
TIOSSETU EQU   TIOESTTB
TIOSVLSR EQU   TIOESTTB
TIOSPVIO EQU   TIOESTTB
TIOSREQD EQU   TIOESTTB
TIOSUSED EQU   TIOESTTB
TIOSBALS EQU   TIOESTTC
TIOSBALP EQU   TIOESTTC
TIOSVOLS EQU   TIOESTTC
TIOSVOLP EQU   TIOESTTC
TIOSAFFS EQU   TIOESTTC
TIOSAFFP EQU   TIOESTTC
TIOSDEFR EQU   TIOESTTC
TIOSDKCR EQU   TIOESTTC
TIOEJFCB EQU   TIOENTRY+12
TIOTREM  EQU   TIOELINK
TIOESSDS EQU   TIOESYOT
TIOESYIN EQU   TIOELINK
TIOEQNAM EQU   TIOELINK
TIOEDYNM EQU   TIOELINK
TIOTTERM EQU   TIOELINK
TIOTRV01 EQU   TIOELINK
TIOSYOUT EQU   TIOELINK
TIOEWTCT EQU   TIOERLOC
TIOSDSP2 EQU   TIOESTTA
TIOSDSP1 EQU   TIOESTTA
TIOSLABL EQU   TIOESTTA
TIOSDADS EQU   TIOESTTA
TIOSJBLB EQU   TIOESTTA
TIOSPLTS EQU   TIOESTTA
TIOSPLTP EQU   TIOESTTA
TIOSLTYP EQU   TIOESTTA
@NM00072 EQU   SVT
@NM00071 EQU   SSCVT
ABERWAAD EQU   ABEPARML+13
@NM00070 EQU   ABEPARML+12
ABEOCEWA EQU   ABEPARML+8
ABEDCBAD EQU   ABEPARML+4
ABERTNCD EQU   ABEPARML+2
ABESYSCC EQU   ABEPARML
IOBERRCT EQU   IOBSTDRD+30
IOBRSV19 EQU   IOBINCAM+1
IOBOLTST EQU   IOBBTAMF
IOBRFTMG EQU   IOBBTAMF
IOBRSV17 EQU   IOBBTAMF
IOBRSV16 EQU   IOBBTAMF
IOBRSV15 EQU   IOBBTAMF
IOBRSV14 EQU   IOBBTAMF
IOBINUSE EQU   IOBBTAMF
IOBPRMER EQU   IOBBTAMF
IOBRSTRB EQU   IOBRESTR+1
IOBREPOS EQU   IOBRESTR
IOBDCBPB EQU   IOBDCBPT+1
IOBRSV44 EQU   IOBFLAG4
IOBJES3I EQU   IOBFLAG4
IOBRSV42 EQU   IOBFLAG4
IOBRSV41 EQU   IOBFLAG4
IOBRSV40 EQU   IOBFLAG4
IOBPMERR EQU   IOBFLAG4
IOBCC3WE EQU   IOBFLAG4
IOBGDPOL EQU   IOBFLAG4
IOBSTRTB EQU   IOBSTART+1
IOBSIOCC EQU   IOBSTART
IOBSTBYT EQU   IOBIOCSW+3
IOBCMDA  EQU   IOBIOCSW
IOBLOG   EQU   IOBFL3
IOBICL   EQU   IOBFL3
IOBMSG   EQU   IOBFL3
IOBCNC   EQU   IOBFL3
IOBACU   EQU   IOBFL3
IOBCDC   EQU   IOBFL3
IOBICC   EQU   IOBFL3
IOBCCC   EQU   IOBFL3
IOBECBPB EQU   IOBECBPT+1
IOBECBCC EQU   IOBECBPT
IOBS1B7  EQU   IOBSENS1
IOBS1B6  EQU   IOBSENS1
IOBS1B5  EQU   IOBSENS1
IOBS1B4  EQU   IOBSENS1
IOBS1B3  EQU   IOBSENS1
IOBS1B2  EQU   IOBSENS1
IOBS1B1  EQU   IOBSENS1
IOBS1B0  EQU   IOBSENS1
IOBSNSC9 EQU   IOBS0B7
IOBS0B6  EQU   IOBSENS0
IOBS0B5  EQU   IOBSENS0
IOBS0B4  EQU   IOBSENS0
IOBS0B3  EQU   IOBSENS0
IOBS0B2  EQU   IOBSENS0
IOBS0B1  EQU   IOBSENS0
IOBS0B0  EQU   IOBSENS0
IOBPNCH  EQU   IOBFLAG2
IOBSTATO EQU   IOBFLAG2
IOBSKUPD EQU   IOBFLAG2
IOBALTTR EQU   IOBFLAG2
IOBRRT2  EQU   IOBRDHA0
IOBRRT3  EQU   IOBPURGE
IOBSENSE EQU   IOBFLAG2
IOBHALT  EQU   IOBFLAG2
IOBSPSVC EQU   IOBRSTRT
IOBUNREL EQU   IOBFLAG1
IOBIOERR EQU   IOBFLAG1
IOBFCREX EQU   IOBCYCCK
IOBRPSTN EQU   IOBFLAG1
IOBERRTN EQU   IOBFLAG1
IOBCMDCH EQU   IOBFLAG1
IOBDATCH EQU   IOBFLAG1
IOBCNOPA EQU   IOBPREFX+12
IOBCICB  EQU   IOBPREFX+8
IOBCECB  EQU   IOBPREFX+4
IOBCONOP EQU   IOBPREFX+3
IOBCINOP EQU   IOBPREFX+2
IOBRSV05 EQU   IOBPREFX+1
IOBPCI   EQU   IOBCFLG1
IOBRSTCH EQU   IOBCFLG1
IOBABAPP EQU   IOBCFLG1
IOBPTST  EQU   IOBCFLG1
IOBRSV04 EQU   IOBCFLG1
IOBRSV03 EQU   IOBCFLG1
IOBRSV02 EQU   IOBCFLG1
IOBRSV01 EQU   IOBCFLG1
CVTLEVL  EQU   CVTRELNO+2
CVTNUMB  EQU   CVTRELNO
CVTMDL   EQU   CVTFIX+250
@NM00068 EQU   CVTFIX+248
@NM00067 EQU   CVTFIX
CVTRV482 EQU   CVTXTNT2+128
CVTRV481 EQU   CVTXTNT2+124
CVTRV480 EQU   CVTXTNT2+120
CVTRV479 EQU   CVTXTNT2+118
CVTRV478 EQU   CVTXTNT2+117
CVTRV477 EQU   CVTXTNT2+116
CVTRV476 EQU   CVTXTNT2+115
CVTRV475 EQU   CVTXTNT2+114
CVTRV474 EQU   CVTRV466
CVTRV473 EQU   CVTRV466
CVTRV472 EQU   CVTRV466
CVTRV471 EQU   CVTRV466
CVTRV470 EQU   CVTRV466
CVTRV469 EQU   CVTRV466
CVTRV468 EQU   CVTRV466
CVTRV467 EQU   CVTRV466
CVTRV465 EQU   CVTRV457
CVTRV464 EQU   CVTRV457
CVTRV463 EQU   CVTRV457
CVTRV462 EQU   CVTRV457
CVTRV461 EQU   CVTRV457
CVTRV460 EQU   CVTRV457
CVTRV459 EQU   CVTRV457
CVTRV458 EQU   CVTRV457
CVTRV456 EQU   CVTXTNT2+108
CVTRV455 EQU   CVTXTNT2+104
CVTRV454 EQU   CVTXTNT2+100
CVTRV453 EQU   CVTXTNT2+96
CVTRV452 EQU   CVTXTNT2+94
CVTRV451 EQU   CVTXTNT2+92
CVTRV450 EQU   CVTXTNT2+90
CVTRV449 EQU   CVTXTNT2+88
CVTRV448 EQU   CVTXTNT2+87
CVTRV447 EQU   CVTXTNT2+86
CVTRV446 EQU   CVTRV438
CVTRV445 EQU   CVTRV438
CVTRV444 EQU   CVTRV438
CVTRV443 EQU   CVTRV438
CVTRV442 EQU   CVTRV438
CVTRV441 EQU   CVTRV438
CVTRV440 EQU   CVTRV438
CVTRV439 EQU   CVTRV438
CVTRV437 EQU   CVTRV429
CVTRV436 EQU   CVTRV429
CVTRV435 EQU   CVTRV429
CVTRV434 EQU   CVTRV429
CVTRV433 EQU   CVTRV429
CVTRV432 EQU   CVTRV429
CVTRV431 EQU   CVTRV429
CVTRV430 EQU   CVTRV429
CVTRV428 EQU   CVTXTNT2+80
CVTRV427 EQU   CVTXTNT2+76
CVTRV426 EQU   CVTXTNT2+72
CVTRV425 EQU   CVTXTNT2+68
CVTATACT EQU   CVTATCVT
CVTRV423 EQU   CVTXTNT2+62
CVTRV422 EQU   CVTXTNT2+60
CVTRV421 EQU   CVTXTNT2+58
CVTRV420 EQU   CVTXTNT2+56
CVTRV419 EQU   CVTXTNT2+55
CVTRV418 EQU   CVTXTNT2+54
CVTRV417 EQU   CVTRV409
CVTRV416 EQU   CVTRV409
CVTRV415 EQU   CVTRV409
CVTRV414 EQU   CVTRV409
CVTRV413 EQU   CVTRV409
CVTRV412 EQU   CVTRV409
CVTRV411 EQU   CVTRV409
CVTRV410 EQU   CVTRV409
CVTRV408 EQU   CVTRV400
CVTRV407 EQU   CVTRV400
CVTRV406 EQU   CVTRV400
CVTRV405 EQU   CVTRV400
CVTRV404 EQU   CVTRV400
CVTRV403 EQU   CVTRV400
CVTRV402 EQU   CVTRV400
CVTRV401 EQU   CVTRV400
CVTICB   EQU   CVTXTNT2+48
CVTSKTA  EQU   CVTXTNT2+44
CVTRSV99 EQU   CVTXTNT2+40
CVTRSV98 EQU   CVTXTNT2+36
CVTRSV97 EQU   CVTXTNT2+34
CVTRSV96 EQU   CVTXTNT2+32
CVTOLTEP EQU   CVTXTNT2+28
CVTQIDA  EQU   CVTQID+1
CVTRSV95 EQU   CVTQID
CVTRSV94 EQU   CVTXTNT2+20
CVTRSV93 EQU   CVTXTNT2+16
CVTRSV92 EQU   CVTXTNT2+12
CVTDEBVR EQU   CVTXTNT2+8
CVTRSV91 EQU   CVTXTNT2+6
CVTRSV9H EQU   CVTFLGBT
CVTRSV9G EQU   CVTFLGBT
CVTRSV9F EQU   CVTFLGBT
CVTRSV9E EQU   CVTFLGBT
CVTRSV9D EQU   CVTFLGBT
CVTRSV9C EQU   CVTFLGBT
CVTVME   EQU   CVTFLGBT
CVTNPE   EQU   CVTFLGBT
CVTNUCLS EQU   CVTXTNT2+4
CVTDSSVA EQU   CVTDSSV+1
CVTRSV89 EQU   CVTDSSV
CVTRSV88 EQU   CVTXTNT1+8
CVTRSV87 EQU   CVTXTNT1+4
CVTFACHN EQU   CVTXTNT1
CVTRV488 EQU   CVTMAP+412
CVTRV487 EQU   CVTMAP+408
CVTRV486 EQU   CVTMAP+404
CVTRV485 EQU   CVTMAP+400
CVTACTAP EQU   CVTMAP+396
CVTAUTH  EQU   CVTMAP+392
CVTATMCA EQU   CVTATMCT+1
CVTATMST EQU   CVTATMCT
CVTRSV61 EQU   CVTMAP+384
CVTVOLT1 EQU   CVTVOLM1+1
CVTVOLI1 EQU   CVTVOLF1
CVTSTOA  EQU   CVTMAP+376
CVTRSV58 EQU   CVTMAP+374
CVTRSV57 EQU   CVTMAP+372
CVTDDCE  EQU   CVTMAP+368
CVTPNWFR EQU   CVTMAP+364
CVTSMF   EQU   CVTMAP+360
CVTSULK  EQU   CVTMAP+358
CVTSLKO  EQU   CVTSYSK
CVTSLKP  EQU   CVTSYSK
CVTSLKQ  EQU   CVTSYSK
CVTSLKR  EQU   CVTSYSK
CVTRSV56 EQU   CVTSYSK
CVTRSV55 EQU   CVTSYSK
CVTRSV54 EQU   CVTSYSK
CVTRSV53 EQU   CVTSYSK
CVTRSV52 EQU   CVTA1F1
CVTRSV51 EQU   CVTA1F1
CVTRSV50 EQU   CVTA1F1
CVTRSV49 EQU   CVTA1F1
CVTRSV48 EQU   CVTA1F1
CVTRSV47 EQU   CVTA1F1
CVTSRSW  EQU   CVTA1F1
CVTPFSW  EQU   CVTA1F1
CVTPCVT  EQU   CVTMAP+352
CVTRSV46 EQU   CVTMAP+344
CVTRSV45 EQU   CVTMAP+340
CVTRSV44 EQU   CVTMAP+338
CVTRSV43 EQU   CVTMAP+336
CVTHJESA EQU   CVTHJES+1
CVTRSV42 EQU   CVTHJES
CVTEXT2A EQU   CVTEXT2+1
CVTRSV41 EQU   CVTEXT2
CVTAPFA  EQU   CVTAPF+1
CVTRSV40 EQU   CVTAPF
CVTRV518 EQU   CVTINTLA
CVTRV517 EQU   CVTERPV
CVTEORM  EQU   CVTMAP+312
CVTMCHPR EQU   CVTMAP+308
CVTTZ    EQU   CVTMAP+304
CVTJEPS  EQU   CVTMAP+300
CVTMODE  EQU   CVTMAP+292
CVTPTRV  EQU   CVTMAP+288
CVTREAL  EQU   CVTMAP+284
CVTRSV39 EQU   CVTMAP+280
CVTRSV38 EQU   CVTMAP+276
CVTDMSRA EQU   CVTDMSR+1
CVTRSV37 EQU   CVTDMSR
CVTQMSGA EQU   CVTQMSG+1
CVTRSV36 EQU   CVTQMSG
CVTAMFF  EQU   CVTMAP+264
CVTPURGA EQU   CVTPURG+1
CVTRSV35 EQU   CVTPURG
CVTCBSP  EQU   CVTMAP+256
CVTATERA EQU   CVTATER+1
CVTSYST  EQU   CVTATER
CVTVOLT2 EQU   CVTTAT
CVTVOLI2 EQU   CVTVOLF2
CVTAQAVB EQU   CVTAQAVT+1
CVTRSV34 EQU   CVTTCMFG
CVTRSV33 EQU   CVTTCMFG
CVTRSV32 EQU   CVTTCMFG
CVTRSV31 EQU   CVTTCMFG
CVTRSV30 EQU   CVTTCMFG
CVTRSV29 EQU   CVTTCMFG
CVTRSV28 EQU   CVTTCMFG
CVTTCRDY EQU   CVTTCMFG
CVTGTFA  EQU   CVTGTF+1
CVTRSV27 EQU   CVTGTFST
CVTRNIO  EQU   CVTGTFST
CVTUSR   EQU   CVTGTFST
CVTRV318 EQU   CVTFORM
CVTRV317 EQU   CVTTMODE
CVTRV316 EQU   CVTSTATE
CVTRV315 EQU   CVTGTFS
CVTGTFAV EQU   CVTGTFS
CVT0SCR1 EQU   CVTMAP+232
CVTRV515 EQU   CVTMAP+228
CVTRMS   EQU   CVTMAP+224
CVTPATCH EQU   CVTMAP+220
CVTTSCE  EQU   CVTMAP+216
CVTLNKSC EQU   CVTMAP+214
CVTQABST EQU   CVTMAP+212
CVTMDLDS EQU   CVTMAP+208
CVTUSER  EQU   CVTMAP+204
CVTABEND EQU   CVTMAP+200
CVTSMCA  EQU   CVTMAP+196
CVTRSV18 EQU   CVTMAP+192
CVTQLPAQ EQU   CVTMAP+188
CVTQCDSR EQU   CVTMAP+184
CVTRSV17 EQU   CVTOPTB
CVTRSV16 EQU   CVTOPTB
CVTFP    EQU   CVTOPTB
CVTAPTHR EQU   CVTOPTB
CVTNLOG  EQU   CVTOPTB
CVTTOD   EQU   CVTOPTB
CVTCTIMS EQU   CVTOPTB
CVTPROT  EQU   CVTOPTB
CVTXPFP  EQU   CVTOPTA
CVTASCII EQU   CVTOPTA
CVTRSV13 EQU   CVTOPTA
CVTRSV12 EQU   CVTOPTA
CVTNIP   EQU   CVTOPTA
CVTDDR   EQU   CVTOPTA
CVTAPR   EQU   CVTOPTA
CVTCCH   EQU   CVTOPTA
CVTSNCTR EQU   CVTMAP+180
CVTQMWR  EQU   CVTMAP+176
CVTQOCR  EQU   CVTMAP+172
CVT1EF00 EQU   CVTMAP+168
CVTMZ00  EQU   CVTMAP+164
CVTHEAD  EQU   CVTMAP+160
CVTRSV11 EQU   CVTMAP+156
CVT0PT01 EQU   CVTMAP+152
CVTMSER  EQU   CVTMAP+148
CVTRV516 EQU   CVTIERLC
CVTILCH  EQU   CVTMAP+140
CVT0DS   EQU   CVTMAP+136
CVTFBOSV EQU   CVTMAP+132
CVTNUCB  EQU   CVTMAP+128
CVTIXAVL EQU   CVTMAP+124
CVTIOQET EQU   CVTMAP+120
CVTDCBA  EQU   CVTMAP+117
CVTMVS2  EQU   CVTDCB
CVT6DAT  EQU   CVTDCB
CVT4MPS  EQU   CVTDCB
CVTRSV09 EQU   CVTDCB
CVT4MS1  EQU   CVTDCB
CVT2SPS  EQU   CVTDCB
CVT1SSS  EQU   CVTDCB
CVTRSV08 EQU   CVTDCB
CVTSTB   EQU   CVTMAP+112
CVTQTD00 EQU   CVTMAP+108
CVTQTE00 EQU   CVTMAP+104
CVTCUCB  EQU   CVTMAP+100
CVTSJQ   EQU   CVTMAP+96
CVTPBLDL EQU   CVTMAP+92
CVTTPC   EQU   CVTMAP+88
CVTSVDCB EQU   CVTMAP+84
CVTBRET  EQU   CVTMAP+82
CVTEXIT  EQU   CVTMAP+80
CVT0FN00 EQU   CVTMAP+76
CVTDARA  EQU   CVTDAR+1
CVTRSV07 EQU   CVTFLGS1
CVTRSV06 EQU   CVTFLGS1
CVTRSV05 EQU   CVTFLGS1
CVTRSV04 EQU   CVTFLGS1
CVTRSV03 EQU   CVTFLGS1
CVTRSV02 EQU   CVTFLGS1
CVTRSV01 EQU   CVTFLGS1
CVTDMPLK EQU   CVTFLGS1
CVTXITP  EQU   CVTMAP+68
CVTZDTAB EQU   CVTMAP+64
CVTMSLT  EQU   CVTMAP+60
CVTDATE  EQU   CVTMAP+56
CVTBTERM EQU   CVTMAP+52
CVTSYSAD EQU   CVTMAP+48
CVTXTLER EQU   CVTMAP+44
CVTILK2  EQU   CVTMAP+40
CVTILK1  EQU   CVTMAP+36
CVTPRLTV EQU   CVTMAP+32
CVTPCNVT EQU   CVTMAP+28
CVT0VL00 EQU   CVTMAP+24
CVTXAPG  EQU   CVTMAP+20
CVTBUF   EQU   CVTMAP+16
CVTJOB   EQU   CVTMAP+12
CVTLINK  EQU   CVTMAP+8
CVT0EF00 EQU   CVTMAP+4
CVTTCBP  EQU   CVTMAP
CVT      EQU   CVTMAP
JESPJESN EQU   JESCT+28
JESRESQM EQU   JESCT+16
JESQMGR  EQU   JESCT+12
JESUNITS EQU   JESCT+4
@NM00066 EQU   JESCT
UCBERADR EQU   UCBUCS+12
UCBFCBID EQU   UCBUCS+8
UCBERCNT EQU   UCBUCS+7
UCBRSV51 EQU   UCBUCS+6
UCBRSV50 EQU   UCBFCBOP
UCBRSV49 EQU   UCBFCBOP
UCBRSV48 EQU   UCBFCBOP
UCBRSV47 EQU   UCBFCBOP
UCBRSV46 EQU   UCBFCBOP
UCBRSV45 EQU   UCBFCBOP
UCBRSV44 EQU   UCBFCBOP
UCBFCBO1 EQU   UCBFCBOP
UCBUCSPE EQU   UCBUCSOP
UCBRSV43 EQU   UCBUCSOP
UCBRSV42 EQU   UCBUCSOP
UCBRSV41 EQU   UCBUCSOP
UCBRSV40 EQU   UCBUCSOP
UCBRSV39 EQU   UCBUCSOP
UCBUCSO2 EQU   UCBUCSOP
UCBUCSO1 EQU   UCBUCSOP
UCBUCSID EQU   UCBUCS
UCBRV073 EQU   UCB3540X+7
UCBRV072 EQU   UCBDKBYT
UCBRV071 EQU   UCBDKBYT
UCBRV070 EQU   UCBDKBYT
UCBRV069 EQU   UCBDKBYT
UCBRV068 EQU   UCBDKBYT
UCBRV067 EQU   UCBDKBYT
UCBVLVER EQU   UCBDKBYT
UCBDKAMX EQU   UCBDKBYT
UCBVLSER EQU   UCB3540X
UCBRDATA EQU   UCBOCR+4
UCBFRID  EQU   UCBOCR
UCBCLN   EQU   UCBMT+14
UCBERG   EQU   UCBMT+12
UCBMS    EQU   UCBMT+11
UCBNB    EQU   UCBMT+10
UCBPW    EQU   UCBMT+9
UCBPR    EQU   UCBMT+8
UCBSIO   EQU   UCBMT+6
UCBTW    EQU   UCBMT+5
UCBTR    EQU   UCBMT+4
UCBTWT   EQU   UCBMT+3
UCBTRT   EQU   UCBMT+2
UCBCTD   EQU   UCBMT
UCBWTOID EQU   UCBCMEXT+17
UCBRV043 EQU   UCBCMEXT+16
UCBASID  EQU   UCBCMEXT+14
UCBMFCNT EQU   UCBCMEXT+12
UCBPMSK  EQU   UCBCMEXT+10
UCBCCWOF EQU   UCBCMEXT+8
UCBRV041 EQU   UCBCMEXT+6
UCBRV036 EQU   UCBFLP1
UCBRV035 EQU   UCBFLP1
UCBRV034 EQU   UCBFLP1
UCBRV033 EQU   UCBFLP1
UCBRV032 EQU   UCBFLP1
UCBRV031 EQU   UCBFLP1
UCBSHRUP EQU   UCBFLP1
UCBNSRCH EQU   UCBFLP1
UCBSNSCT EQU   UCBCMEXT+4
UCBHPDV  EQU   @NM00065
UCBHALI  EQU   @NM00065
UCBRSV09 EQU   @NM00065
UCBRSV08 EQU   @NM00065
UCBRSV07 EQU   @NM00065
UCBRSV06 EQU   @NM00065
UCBRSV05 EQU   @NM00065
UCBRSV04 EQU   @NM00065
UCBDTI   EQU   UCBCMEXT+2
UCBSTI   EQU   UCBCMEXT+1
UCBETI   EQU   UCBCMEXT
UCBEXTP  EQU   UCBEXTPT+1
UCBDDRSW EQU   UCBFLC
UCBTICBT EQU   UCBFLC
UCBIVRR  EQU   UCBFLC
UCBIVRS  EQU   UCBFLC
UCBITF   EQU   UCBFLC
UCBUDE   EQU   UCBFLC
UCBWAA   EQU   UCBFLC
UCBATTP  EQU   UCBFLC
UCBUNTYP EQU   UCBTBYT4
UCBRSV11 EQU   UCBDVCLS
UCBRSV10 EQU   UCBDVCLS
UCB3CHAR EQU   UCBDVCLS
UCB3DISP EQU   UCBDVCLS
UCB3DACC EQU   UCBDVCLS
UCB3COMM EQU   UCBDVCLS
UCB3TAPE EQU   UCBDVCLS
UCBDVPWR EQU   UCB2OPT7
UCBVLPWR EQU   UCB2OPT6
UCB2OPT5 EQU   UCBTBYT2
UCBRVDEV EQU   UCBRWTAU
UCBRPS   EQU   UCBDUDN2
UCBRR    EQU   UCBDUDN1
UCB2OPT1 EQU   UCBTBYT2
UCB2OPT0 EQU   UCBTBYT2
UCB1FEA7 EQU   UCBTBYT1
UCBD6250 EQU   UCB1FEA6
UCBD1600 EQU   UCB1FEA5
UCB1FEA4 EQU   UCBTBYT1
UCB1FEA3 EQU   UCBTBYT1
UCB1FEA2 EQU   UCBTBYT1
UCB1FEA1 EQU   UCBTBYT1
UCB1FEA0 EQU   UCBTBYT1
UCBRV029 EQU   UCBWGT
UCBVHRSN EQU   UCBWGT
UCBVORSN EQU   UCBWGT
UCBMTPXP EQU   UCBWGT
UCBREW   EQU   UCBWGT
UCBPUB   EQU   UCBWGT
UCBOUT   EQU   UCBWGT
UCBIN    EQU   UCBWGT
UCBCPU   EQU   UCBOB+11
UCBLCI   EQU   UCBOB+10
UCBCNT   EQU   UCBOB+9
UCBRV017 EQU   UCBCHM1
UCBRV016 EQU   UCBCHM1
UCBRV015 EQU   UCBCHM1
UCBRV014 EQU   UCBCHM1
UCBSPB   EQU   UCBPTH1
UCBPPB   EQU   UCBPTH1
UCBSPA   EQU   UCBPTH0
UCBPPA   EQU   UCBPTH0
UCBFLB7  EQU   UCBFLB
UCBVALPH EQU   UCBFLB
UCBCRHSN EQU   UCBFLB
UCBCRHRV EQU   UCBFLB
UCBRESVH EQU   UCBFLB
UCBSPST  EQU   UCBFLB
UCBASNS  EQU   UCBFLB
UCBIORST EQU   UCBFLB
UCBQISCE EQU   UCBFL1
UCBACTV  EQU   UCBFL1
UCBSAP   EQU   UCBFL1
UCBNOTRC EQU   UCBCUB
UCBPSNS  EQU   UCBFL1
UCBUSING EQU   UCBPST
UCBNOTRD EQU   UCBNRY
UCBBUSYD EQU   UCBBSY
UCBUA    EQU   UCBCHAN+1
UCBCHA   EQU   UCBCHAN
UCBDADI  EQU   UCBSTAT
UCBSYSR  EQU   UCBSTAT
UCBPRES  EQU   UCBSTAT
UCBALOC  EQU   UCBSTAT
UCBUNLD  EQU   UCBSTAT
UCBRESV  EQU   UCBSTAT
UCBCHGS  EQU   UCBSTAT
UCBONLI  EQU   UCBSTAT
UCBID    EQU   UCBOB+2
UCBALTPH EQU   UCBFL5
UCBALTCU EQU   UCBFL5
UCBNALOC EQU   UCBFL5
UCBENVRD EQU   UCBFL5
UCBVSDR  EQU   UCBFL5
UCBSASK  EQU   UCBFL5
UCBAMV   EQU   UCBAF
UCBDCC   EQU   UCBFL5
UCBMONT  EQU   UCBJBNR
UCBRV011 EQU   UCBJBNR
UCBRSV02 EQU   UCBJBNR
UCBOLDSM EQU   UCBJBNR
UCBRV003 EQU   UCBJBNR
UCBRV002 EQU   UCBJBNR
UCBJES3  EQU   UCBJBNR
UCBVRDEV EQU   UCBJBNR
UCBCMSEG EQU   UCBOB
UCBPFXND EQU   UCB+512
UCBIOQ   EQU   UCB+508
UCBLOCK  EQU   UCB+504
UCBPXST  EQU   UCB+504
@NM00062 EQU   UCB
DCBEOB   EQU   IHADCS40+20
DCBPRECL EQU   IHADCS40+18
@NM00061 EQU   IHADCS40+16
@NM00060 EQU   @NM00058+1
@NM00059 EQU   DCBEROPT
DCBERABE EQU   DCBEROPT
DCBERSKP EQU   DCBEROPT
DCBERACC EQU   DCBEROPT
@NM00057 EQU   IHADCS40+10
@NM00056 EQU   IHADCS40+9
@NM00055 EQU   IHADCS40+8
DCBRECA  EQU   DCBRECAD+1
@NM00054 EQU   DCBRECBT
DCBRCFGT EQU   DCBRCREL
DCBRCTRU EQU   DCBRCREL
DCBLCCW  EQU   DCBEOBAD
DCBNOTE  EQU   DCBCNTRL
@NM00053 EQU   IHADCS38+8
DCBEOBW  EQU   IHADCS38+4
DCBEOBRA EQU   DCBEOBR+1
DCBNCP   EQU   DCBEOBR
@NM00052 EQU   DCBFLAG1
DCBSTFLS EQU   DCBFLAG1
DCBSTQCK EQU   DCBFLAG1
DCBDIRCQ EQU   DCBBUFOF
DCBQSTRU EQU   DCBUSASI
@NM00051 EQU   DCBUSASI
DCBQADF3 EQU   DCBQADFS
DCBQADF2 EQU   DCBQADFS
DCBQADF1 EQU   DCBQADFS
DCBBLBP  EQU   DCBUSASI
@NM00050 EQU   DCBUSASI
DCBCICBA EQU   DCBCICB+1
@NM00049 EQU   DCBCICB
DCBOFFSW EQU   IHADCS36+15
DCBOFFSR EQU   IHADCS36+14
DCBWCPL  EQU   IHADCS36+13
DCBWCPO  EQU   IHADCS36+12
DCBBLKSI EQU   IHADCS36+10
DCBCNQSM EQU   DCBCIND2
DCBCNFEO EQU   DCBCIND2
DCBCNCHS EQU   DCBCIND2
DCBCNBFP EQU   DCBCIND2
DCBCNIOE EQU   DCBCIND2
DCBCNCLO EQU   DCBCIND2
DCBCNWRO EQU   DCBCIND2
DCBCNSTO EQU   DCBCIND2
DCBCNEXB EQU   DCBCIND1
@NM00048 EQU   DCBCIND1
DCBCNBRM EQU   DCBCIND1
@NM00047 EQU   DCBCIND1
DCBCNEVA EQU   DCBCIND1
DCBCNEVB EQU   DCBCIND1
DCBCNSRD EQU   DCBCIND1
DCBCNTOV EQU   DCBCIND1
DCBSYNA  EQU   DCBSYNAD+1
DCBIOBL  EQU   DCBSYNAD
DCBCHCKA EQU   DCBPERRA
@NM00046 EQU   DCBOPTCD
DCBOPTT  EQU   DCBOPTCD
DCBSRCHD EQU   DCBOPTZ
DCBOPTQ  EQU   DCBOPTCD
DCBBCKPT EQU   DCBOPTO
DCBOPTC  EQU   DCBOPTCD
DCBOPTU  EQU   DCBOPTCD
DCBOPTW  EQU   DCBOPTCD
DCBPUTA  EQU   DCBGETA
@NM00045 EQU   DCBPUT
DCBREADA EQU   DCBWRITA
@NM00044 EQU   DCBREAD
DCBDEBA  EQU   DCBDEBAD+1
@NM00043 EQU   DCBIFLGS
DCBIFIOE EQU   DCBIFLGS
DCBIFPCT EQU   DCBIFLGS
DCBIFEC  EQU   DCBIFLGS
DCBMFSTI EQU   DCBMFDMD
DCBMFAWR EQU   DCBMFSTK
DCBMFUIP EQU   DCBMFTMD
DCBMFIDW EQU   DCBMFLCP
DCBMFWRK EQU   DCBMFMVP
DCBMFRDQ EQU   DCBMFWRT
DCBMFGTQ EQU   DCBMFPUT
DCBMFSTL EQU   DCBMACF2
DCBMFCK  EQU   DCBMFDMG
DCBMFRDX EQU   DCBMFCHK
DCBMFDBF EQU   DCBMFSBG
DCBMFRDI EQU   DCBMFLCG
DCBMFRDK EQU   DCBMFMVG
DCBMFWRQ EQU   DCBMFRD
DCBMFPTQ EQU   DCBMFGET
DCBMFECP EQU   DCBMACF1
DCBTIOT  EQU   IHADCS25
DCBMRSTI EQU   DCBMRDMD
DCBMRAWR EQU   DCBMRSTK
DCBMRUIP EQU   DCBMRTMD
DCBMRIDW EQU   DCBMRLCP
DCBMRWRK EQU   DCBMRMVP
DCBMRRDQ EQU   DCBMRWRT
DCBMRGTQ EQU   DCBMRPUT
DCBMRSTL EQU   DCBMACR2
DCBMRCK  EQU   DCBMRDMG
DCBPGFXA EQU   DCBMRRDX
DCBMRDBF EQU   DCBMRSBG
DCBMRRDI EQU   DCBMRLCG
DCBMRRDK EQU   DCBMRMVG
DCBMRWRQ EQU   DCBMRRD
DCBMRPTQ EQU   DCBMRGET
DCBMRECP EQU   DCBMACR1
@NM00042 EQU   DCBIFLG
DCBIBIOE EQU   DCBIFLG
DCBIBPCT EQU   DCBIFLG
DCBIBEC  EQU   DCBIFLG
DCBOFIOF EQU   DCBOFLGS
DCBOFUEX EQU   DCBOFLGS
DCBOFTM  EQU   DCBOFLGS
DCBOFPPC EQU   DCBOFLGS
DCBOFEOV EQU   DCBOFLGS
DCBOFLRB EQU   DCBOFLGS
DCBOFIOD EQU   DCBOFLWR
DCBEXLSA EQU   DCBEXLST+1
DCBRECKL EQU   DCBRECFM
DCBRECCC EQU   DCBRECFM
DCBRECSB EQU   DCBRECFM
DCBRECBR EQU   DCBRECFM
DCBRECTO EQU   DCBRECLA
DCBRECL  EQU   DCBRECLA
DCBEODA  EQU   DCBEODAD+1
DCBBFA   EQU   DCBBFTEK
DCBH0    EQU   DCBBFTEK
DCBBFTKD EQU   DCBBFTEK
DCBBFTE  EQU   DCBBFT
DCBBFTKR EQU   DCBBFT
DCBBFTS  EQU   DCBBFT
DCBH1    EQU   DCBBFTEK
DCBSVCXA EQU   DCBSVCXL+1
@NM00041 EQU   DCBSVCXL
DCBODEBA EQU   DCBIOBAA
@NM00040 EQU   DCBQSLM
DCBUPDBT EQU   DCBQSLM
DCBUPDCM EQU   DCBQSLM
DCB1DVDS EQU   DCBQSLM
@NM00039 EQU   DCBDSRG2
DCBDSGTR EQU   DCBDSRG2
DCBACBM  EQU   DCBDSRG2
@NM00038 EQU   DCBDSRG2
DCBDSGTQ EQU   DCBDSRG2
DCBDSGTX EQU   DCBDSRG2
DCBDSGGS EQU   DCBDSRG2
DCBDSGU  EQU   DCBDSRG1
DCBDSGPO EQU   DCBDSRG1
DCBDSGMQ EQU   DCBDSRG1
DCBDSGCQ EQU   DCBDSRG1
DCBDSGCX EQU   DCBDSRG1
DCBDSGDA EQU   DCBDSRG1
DCBDSGPS EQU   DCBDSRG1
DCBDSGIS EQU   DCBDSRG1
DCBBUFL  EQU   IHADCS11+8
DCBBUFCA EQU   DCBBUFCB+1
DCBBUFNO EQU   DCBBUFCB
DCBDEVT  EQU   DCBREL
DCBKEYLE EQU   DCBRELB
DCBTRBAL EQU   IHADCS01+6
@NM00037 EQU   IHADCS01+5
@NM00036 EQU   IHADCS01+4
DCBDVTBA EQU   DCBDVTBL+1
@NM00035 EQU   DCBDVTBL
DCBKEYCN EQU   IHADCS00+4
DCBRELAD EQU   IHADCS00
@NM00034 EQU   IHADCB
DEBXRV40 EQU   DEBXTN+28
DEBXRV39 EQU   DEBXTN+24
DEBXXARG EQU   DEBXTN+20
DEBXMCF2 EQU   DEBXTN+19
DEBXMCF1 EQU   DEBXTN+18
DEBXDSO2 EQU   DEBXTN+17
DEBXDSO1 EQU   DEBXTN+16
DEBXDBPR EQU   DEBXTN+12
DEBXDCBM EQU   DEBXTN+8
DEBXDSAB EQU   DEBXTN+4
DEBXRV48 EQU   DEBXTN+3
DEBXRV47 EQU   DEBXFLG1
DEBXRV46 EQU   DEBXFLG1
DEBXRV45 EQU   DEBXFLG1
DEBXRV44 EQU   DEBXFLG1
DEBXRV43 EQU   DEBXFLG1
DEBXRV42 EQU   DEBXFLG1
DEBXTSKC EQU   DEBXFLG1
DEBXCDCB EQU   DEBXFLG1
DEBXLNGH EQU   DEBXTN
DEBTBLOF EQU   DEBPREFX+14
DEBAMTYP EQU   DEBPREFX+13
DEBLNGTH EQU   DEBPREFX+12
DEBDCBMK EQU   DEBXTNP
DEBDSCBA EQU   DEBPREFX+1
DEBWKARA EQU   DEBPREFX
DEBXCEAD EQU   DEBXCEA+1
DEBXCENP EQU   DEBXCEAB
DEBRSV35 EQU   DEBXCEAB
DEBRSV34 EQU   DEBXCEAB
DEBRSV33 EQU   DEBXCEAB
DEBRSV32 EQU   DEBXCEAB
DEBCEAD  EQU   DEBCEA+1
DEBCENP  EQU   DEBCEAB
DEBRSV31 EQU   DEBCEAB
DEBRSV30 EQU   DEBCEAB
DEBRSV29 EQU   DEBCEAB
DEBRSV28 EQU   DEBCEAB
DEBPCIAD EQU   DEBPCIA+1
DEBPCINP EQU   DEBPCIAB
DEBRSV27 EQU   DEBPCIAB
DEBRSV26 EQU   DEBPCIAB
DEBRSV25 EQU   DEBPCIAB
DEBRSV24 EQU   DEBPCIAB
DEBSIOAD EQU   DEBSIOA+1
DEBSIONP EQU   DEBSIOAB
DEBFIX   EQU   DEBSIOAB
DEBIOVR  EQU   DEBSIOAB
DEBSIOX  EQU   DEBSIOAB
DEBPGFX  EQU   DEBSIOAB
DEBEOEAD EQU   DEBEOEA+1
DEBEOENP EQU   DEBEOEAB
DEBRSV22 EQU   DEBEOEAB
DEBRSV21 EQU   DEBEOEAB
DEBRSV20 EQU   DEBEOEAB
DEBRSV19 EQU   DEBEOEAB
DEBSUBID EQU   DEBSUBNM
DEBSIOA2 EQU   DEBACS08+24
DEBRPSIO EQU   DEBACS08+20
DEBFREED EQU   DEBACS08+16
@NM00033 EQU   DEBACS08+12
@NM00032 EQU   DEBACS08+8
DEBDISAD EQU   DEBACS08+4
@NM00031 EQU   DEBACS08
DEBRPSST EQU   DEBACS07+64
DEBARECK EQU   DEBACS07+60
DEBAREWT EQU   DEBACS07+56
DEBACHK  EQU   DEBACS07+52
DEBAWRIT EQU   DEBACS07+48
DEBASETL EQU   DEBACS07+44
DEBAREAD EQU   DEBACS07+40
DEBCRECK EQU   DEBACS07+36
DEBCREWT EQU   DEBACS07+32
DEBCCHK  EQU   DEBACS07+28
DEBCWRIT EQU   DEBACS07+24
DEBCSETL EQU   DEBACS07+20
DEBCREAD EQU   DEBACS07+16
DEBWKPT5 EQU   DEBACS07+12
DEBWKPT4 EQU   DEBACS07+8
DEBGET   EQU   DEBACS07+4
@NM00030 EQU   DEBACS07
DEBPUT   EQU   DEBACS06+4
DEBDCBFA EQU   DEBACS06
DEBLUCBB EQU   DEBLUCBA+1
DEBRSV18 EQU   DEBLUCBA
DEBFUCBB EQU   DEBFUCBA+1
DEBRSV17 EQU   DEBFUCBA
DEBTCCWB EQU   DEBTCCWA+1
DEBRSV16 EQU   DEBTCCWA
DEBTBFRB EQU   DEBTBFRA+1
DEBRSV15 EQU   DEBTBFRA
DEBDBPEF EQU   DEBACS03+8
DEBDBPP  EQU   DEBACS03+4
DEBDTPP  EQU   DEBACS03
DEBDBPE  EQU   DEBDBLK+1
DEBDBPT  EQU   DEBDBLK
DEBEXTNM EQU   DEBDSNAM
DEBRSV14 EQU   DEBDSNM+4
DEBUTSAB EQU   DEBUTSAA+1
DEBRSV13 EQU   DEBUTSAA
DEBVOLNM EQU   DEBACSMD+2
DEBVLSEQ EQU   DEBVOLSQ+1
DEBRSV42 EQU   DEBVOLBT
DEBRSV41 EQU   DEBVOLBT
DEBRSV40 EQU   DEBVOLBT
DEBRSV39 EQU   DEBVOLBT
DEBRSV38 EQU   DEBVOLBT
DEBRSV37 EQU   DEBVOLBT
DEBRSV36 EQU   DEBVOLBT
DEBEXFUL EQU   DEBVOLBT
DEBNMTRK EQU   DEBDASD+14
DEBENDHH EQU   DEBDASD+12
DEBENDCC EQU   DEBDASD+10
DEBSTRHH EQU   DEBDASD+8
DEBSTRCC EQU   DEBDASD+6
DEBBINUM EQU   DEBDASD+4
DEBUCBA  EQU   DEBUCBAD+1
DEBDVMOD EQU   DEBUCBAD
DEBAPPB  EQU   DEBAPPAD+1
DEBEXSCL EQU   DEBAPPAD
DEBDCBB  EQU   DEBDCBAD+1
DEBDEBID EQU   DEBPROTG
DEBECBB  EQU   DEBECBAD+1
DEBPRIOR EQU   DEBECBAD
DEBUSRPB EQU   DEBUSRPG+1
DEBNMEXT EQU   DEBUSRPG
DEBRSV05 EQU   DEBBASIC+15
DEBXTNIN EQU   DEBFLGS1
DEBAPFIN EQU   DEBFLGS1
DEBF1CEV EQU   DEBFLGS1
DEBCINDI EQU   DEBFLGS1
DEBRSV02 EQU   DEBFLGS1
DEBRSIOA EQU   DEBFLGS1
DEBEOFDF EQU   DEBFLGS1
DEBPWCKD EQU   DEBFLGS1
DEBQSCNT EQU   DEBBASIC+13
DEBACCS  EQU   DEBOPATB
DEBPOSIT EQU   DEBOPATB
DEBZERO  EQU   DEBOPATB
DEBABEND EQU   DEBOPATB
DEBIRBB  EQU   DEBIRBAD+1
DEBRERR  EQU   DEBOFLGS
DEBLABEL EQU   DEBOFLGS
DEBSPLIT EQU   DEBOFLGS
DEBDCB   EQU   DEBOFLGS
DEBRLSE  EQU   DEBOFLGS
DEBEOF   EQU   DEBOFLGS
DEBDISP  EQU   DEBOFLGS
DEBDEBB  EQU   DEBDEBAD+1
DEBAMLNG EQU   DEBDEBAD
DEBTCBB  EQU   DEBTCBAD+1
DEBNMSUB EQU   DEBTCBAD
@NM00029 EQU   TCBXTNT2+32
TCBRV181 EQU   TCBRV173
TCBRV180 EQU   TCBRV173
TCBRV179 EQU   TCBRV173
TCBRV178 EQU   TCBRV173
TCBRV177 EQU   TCBRV173
TCBRV176 EQU   TCBRV173
TCBRV175 EQU   TCBRV173
TCBRV174 EQU   TCBRV173
TCBRV172 EQU   TCBRV164
TCBRV171 EQU   TCBRV164
TCBRV170 EQU   TCBRV164
TCBRV169 EQU   TCBRV164
TCBRV168 EQU   TCBRV164
TCBRV167 EQU   TCBRV164
TCBRV166 EQU   TCBRV164
TCBRV165 EQU   TCBRV164
TCBRV163 EQU   TCBRV155
TCBRV162 EQU   TCBRV155
TCBRV161 EQU   TCBRV155
TCBRV160 EQU   TCBRV155
TCBRV159 EQU   TCBRV155
TCBRV158 EQU   TCBRV155
TCBRV157 EQU   TCBRV155
TCBRV156 EQU   TCBRV155
TCBRV154 EQU   TCBRV146
TCBRV153 EQU   TCBRV146
TCBRV152 EQU   TCBRV146
TCBRV151 EQU   TCBRV146
TCBRV150 EQU   TCBRV146
TCBRV149 EQU   TCBRV146
TCBRV148 EQU   TCBRV146
TCBRV147 EQU   TCBRV146
TCBRV145 EQU   TCBXTNT2+26
TCBRV144 EQU   TCBXTNT2+24
TCBRV143 EQU   TCBXTNT2+20
TCBRV142 EQU   TCBXTNT2+16
TCBRSV49 EQU   TCBXTNT2+12
TCBEVENT EQU   TCBXTNT2+8
TCBRCMP  EQU   TCBXTNT2+5
TCBRSVAB EQU   TCBXTNT2+4
TCBGTFA  EQU   TCBGTF+1
TCBRSV47 EQU   TCBTFLG
TCBRSV46 EQU   TCBTFLG
TCBRSV45 EQU   TCBTFLG
TCBRSV44 EQU   TCBTFLG
TCBRSV43 EQU   TCBTFLG
TCBDSPIT EQU   TCBTFLG
TCBERRTN EQU   TCBTFLG
TCBASYNC EQU   TCBTFLG
@NM00028 EQU   TCB+296
TCBRV185 EQU   TCB+292
TCBSWASA EQU   TCB+288
TCBDBTB  EQU   TCB+284
TCBRPT   EQU   TCB+280
TCBRV141 EQU   TCBRV133
TCBRV140 EQU   TCBRV133
TCBRV139 EQU   TCBRV133
TCBRV138 EQU   TCBRV133
TCBRV137 EQU   TCBRV133
TCBRV136 EQU   TCBRV133
TCBRV135 EQU   TCBRV133
TCBRV134 EQU   TCBRV133
TCBRV132 EQU   TCBRV124
TCBRV131 EQU   TCBRV124
TCBRV130 EQU   TCBRV124
TCBRV129 EQU   TCBRV124
TCBRV128 EQU   TCBRV124
TCBRV127 EQU   TCBRV124
TCBRV126 EQU   TCBRV124
TCBRV125 EQU   TCBRV124
TCBRV123 EQU   TCBFBYT2
TCBRV122 EQU   TCBFBYT2
TCBECBNV EQU   TCBFBYT2
TCBSSSYN EQU   TCBFBYT2
TCBFPRAP EQU   TCBFBYT2
TCBFDW   EQU   TCBFBYT2
TCBFMW   EQU   TCBFBYT2
TCBCNCB  EQU   TCBFBYT2
TCBLLH   EQU   TCBFBYT1
TCBRV113 EQU   TCBFBYT1
TCBEOT   EQU   TCBFBYT1
TCBRTM2  EQU   TCBFBYT1
TCBPGNLY EQU   TCBFBYT1
TCBNDIOS EQU   TCBFBYT1
TCBACTIV EQU   TCBFBYT1
TCBEOTFM EQU   TCBFBYT1
TCBAFFN  EQU   TCB+274
TCBCCPVI EQU   TCB+272
TCBUKYSP EQU   TCB+268
TCBMODE  EQU   TCBESTAE+3
TCBERTYP EQU   TCBESTAE+2
TCBRV314 EQU   TCBESTRM
TCBRV313 EQU   TCBESTRM
TCBRV312 EQU   TCBESTRM
TCBRV311 EQU   TCBESTRM
TCBRV310 EQU   TCBESTRM
TCBRV309 EQU   TCBESTRM
TCBRV308 EQU   TCBESTRM
TCBETERM EQU   TCBESTRM
TCBSCBKY EQU   TCBESTAE
TCBRTM12 EQU   TCB+260
TCBTCBID EQU   TCB+256
TCBRSV96 EQU   TCB+252
TCBSWA   EQU   TCB+248
TCBFOEA  EQU   TCBFOE+1
TCBRSV42 EQU   TCBFOE
TCBRV306 EQU   TCB+240
TCBRSV41 EQU   TCB+239
TCBTID   EQU   TCB+238
TCBRSVAA EQU   TCB+237
TCBABCUR EQU   TCB+236
TCBTMSAV EQU   TCB+232
TCBIOTIM EQU   TCB+228
TCBRTWA  EQU   TCB+224
TCBBACK  EQU   TCB+220
TCBTIRB  EQU   TCB+216
TCBAECB  EQU   TCB+212
TCBEXT2A EQU   TCBEXT2+1
TCBRSV39 EQU   TCBEXT2
TCBSTMCT EQU   TCB+207
TCBSYSCT EQU   TCB+206
TCBRSV37 EQU   TCB+205
TCBEXSVC EQU   TCBDAR
TCBDARMS EQU   TCBDAR
TCBDARWT EQU   TCBDAR
TCBDARO  EQU   TCBDAR
TCBDARMC EQU   TCBDARC
TCBDARD  EQU   TCBDAR
TCBDARS  EQU   TCBDAR
TCBDARP  EQU   TCBDAR
TCBGTOFM EQU   TCBFLGS7
TCBADMP  EQU   TCBFLGS7
TCBRSTSK EQU   TCBFLGS7
TCBRSV35 EQU   TCBFLGS7
TCBSTACK EQU   TCBFLGS7
TCBRSV34 EQU   TCBFLGS7
TCBRSV33 EQU   TCBFLGS7
TCBGPECB EQU   TCBFLGS7
TCBNTJS  EQU   TCBFLGS6
TCBAPG   EQU   TCBFLGS6
TCBMIGR  EQU   TCBFLGS6
TCBRV303 EQU   TCBFLGS6
TCBSPVLK EQU   TCBFLGS6
TCBCPU   EQU   TCBFLGS6
TCBPIE17 EQU   TCBFLGS6
TCBRV    EQU   TCBFLGS6
TCBRSV79 EQU   TCBNDSP5
TCBRSV78 EQU   TCBNDSP5
TCBRSV77 EQU   TCBNDSP5
TCBRSV76 EQU   TCBNDSP5
TCBRSV75 EQU   TCBNDSP5
TCBRSV74 EQU   TCBNDSP5
TCBRSV95 EQU   TCBNDSP5
TCBRSV94 EQU   TCBNDSP5
TCBRSV93 EQU   TCBNDSP4
TCBRSV92 EQU   TCBNDSP4
TCBRSV91 EQU   TCBNDSP4
TCBRSV90 EQU   TCBNDSP4
TCBRSV89 EQU   TCBNDSP4
TCBRSV88 EQU   TCBNDSP4
TCBRSV87 EQU   TCBNDSP4
TCBRSV86 EQU   TCBNDSP4
TCBEXT1A EQU   TCBEXT1+1
TCBRSV32 EQU   TCBEXT1
TCBEXCPD EQU   TCB+192
TCBIOBRC EQU   TCB+188
TCBDDWTC EQU   TCB+186
TCBDDEXC EQU   TCB+184
TCBJSCBB EQU   TCBJSCB+1
@NM00027 EQU   TCBRECDE
TCBREC   EQU   TCBRECDE
TCBMDIDS EQU   TCB+176
TCBNDINT EQU   TCBNDSP3
TCBRSV27 EQU   TCBNDSP3
TCBRSV26 EQU   TCBNDSP3
TCBRSV25 EQU   TCBNDSP3
TCBRSV24 EQU   TCBNDSP3
TCBSRBND EQU   TCBNDSP3
TCBRV302 EQU   TCBNDSP3
TCBLJSND EQU   TCBNDSP3
TCBABE   EQU   TCBNDSP2
TCBDSS   EQU   TCBNDSP2
TCBOWAIT EQU   TCBNDSP2
TCBIWAIT EQU   TCBNDSP2
TCBNDTS  EQU   TCBNDSP2
TCBNDSVC EQU   TCBNDSP2
TCBSTPP  EQU   TCBNDSP2
TCBABD   EQU   TCBNDSP2
TCBRSV22 EQU   TCBNDSP1
TCBPIEND EQU   TCBNDSP1
TCBTPSP  EQU   TCBNDSP1
TCBDDRND EQU   TCBNDSP1
TCBRSPND EQU   TCBNDSP1
TCBRSTND EQU   TCBNDSP1
TCBDARPN EQU   TCBNDSP1
TCBDARTN EQU   TCBNDSP1
TCBNDSP0 EQU   TCBNDSP
TCBUSER  EQU   TCB+168
TCBTCTB  EQU   TCBTCT+1
TCBRSV9C EQU   TCBTCTGF
TCBRSV9B EQU   TCBTCTGF
TCBRSV9A EQU   TCBTCTGF
TCBRSV99 EQU   TCBTCTGF
TCBRSV98 EQU   TCBTCTGF
TCBRSV97 EQU   TCBTCTGF
TCBRSV20 EQU   TCBTCTGF
TCBSMFGF EQU   TCBTCTGF
TCBSTABB EQU   TCBSTAB+1
TCBSTCUR EQU   TCBNSTAE
TCBRV301 EQU   TCBNSTAE
TCBSYNCH EQU   TCBNSTAE
TCBHALT  EQU   TCBNSTAE
TCBPPSUP EQU   TCBNSTAE
TCB33E   EQU   TCBNSTAE
TCBQUIES EQU   TCBNSTAE
TCBSTABE EQU   TCBNSTAE
TCBAQE   EQU   TCB+156
TCBPQE   EQU   TCB+152
TCBTSDP  EQU   TCB+151
TCBTSLP  EQU   TCB+150
TCBSTPCT EQU   TCB+149
TCBCPUBN EQU   TCBTSFLG
TCBDYDSP EQU   TCBTSFLG
TCBRSV18 EQU   TCBTSFLG
TCBRSV17 EQU   TCBTSFLG
TCBTIOTG EQU   TCBTSFLG
TCBATT   EQU   TCBTSFLG
TCBSTPPR EQU   TCBTSFLG
TCBRV300 EQU   TCBTSTSK
TCBECB   EQU   TCB+144
TCBIQE   EQU   TCB+140
TCBLTC   EQU   TCB+136
TCBOTC   EQU   TCB+132
TCBNTC   EQU   TCB+128
TCBJSTCA EQU   TCBJSTCB+1
TCBRSV16 EQU   TCBJSTCB
TCBTQET  EQU   TCBTME
TCBTCB   EQU   TCB+116
TCBFSAB  EQU   TCBFSA+1
TCBQEL   EQU   TCBFSA
TCBGRS15 EQU   TCBGRS+60
TCBGRS14 EQU   TCBGRS+56
TCBGRS13 EQU   TCBGRS+52
TCBGRS12 EQU   TCBGRS+48
TCBGRS11 EQU   TCBGRS+44
TCBGRS10 EQU   TCBGRS+40
TCBGRS9  EQU   TCBGRS+36
TCBGRS8  EQU   TCBGRS+32
TCBGRS7  EQU   TCBGRS+28
TCBGRS6  EQU   TCBGRS+24
TCBGRS5  EQU   TCBGRS+20
TCBGRS4  EQU   TCBGRS+16
TCBGRS3  EQU   TCBGRS+12
TCBGRS2  EQU   TCBGRS+8
TCBGRS1  EQU   TCBGRS+4
TCBGRS0  EQU   TCBGRS
TCBJPQB  EQU   TCBJPQ+1
TCBRSV15 EQU   TCBPURGE
TCBRSV14 EQU   TCBPURGE
TCBRSV13 EQU   TCBPURGE
TCBRSV12 EQU   TCBPURGE
TCBRSV11 EQU   TCBPURGE
TCBRSV10 EQU   TCBPURGE
TCBRSV09 EQU   TCBPURGE
TCBJPQF  EQU   TCBPURGE
TCBJLB   EQU   TCB+40
TCBLLS   EQU   TCB+36
TCBDSP   EQU   TCB+35
TCBLMP   EQU   TCB+34
TCBPNDSP EQU   TCBFLGS5
TCBFCD1  EQU   TCBFLGS5
TCBSTP   EQU   TCBFLGS5
TCBSYS   EQU   TCBFLGS5
TCBANDSP EQU   TCBFLGS5
TCBPAGE  EQU   TCBFLGS5
TCBUXNDF EQU   TCBABWF
TCBFC    EQU   TCBFLGS5
TCBONDSP EQU   TCBFLGS4
TCBMPCND EQU   TCBFLGS4
TCBMPCVQ EQU   TCBFLGS4
TCBUXNDV EQU   TCBFLGS4
TCBHNDSP EQU   TCBFLGS4
TCBRQENA EQU   TCBFLGS4
TCBSER   EQU   TCBFLGS4
TCBNDUMP EQU   TCBFLGS4
TCBDWSTA EQU   TCBFLGS3
TCBRSV08 EQU   TCBFLGS3
TCBRSV07 EQU   TCBFLGS3
TCBRSV06 EQU   TCBFLGS3
TCBABGM  EQU   TCBFLGS3
TCBABTRM EQU   TCBFLGS3
TCBADINP EQU   TCBFLGS3
TCBFSM   EQU   TCBFLGS3
TCBFTS   EQU   TCBFLGS2
TCBFETXR EQU   TCBFLGS2
TCBFDSOP EQU   TCBFLGS2
TCBFJMC  EQU   TCBFLGS2
TCBFSMC  EQU   TCBFLGS2
TCBFABOP EQU   TCBFLGS2
TCBFSTI  EQU   TCBFLGS2
TCBFOINP EQU   TCBFLGS2
TCBFX    EQU   TCBFLGS1
TCBFS    EQU   TCBFLGS1
TCBFT    EQU   TCBFLGS1
TCBPDUMP EQU   TCBFLGS1
TCBRSV04 EQU   TCBFLGS1
TCBFERA  EQU   TCBFLGS1
TCBFE    EQU   TCBFLGS1
TCBFA    EQU   TCBFLGS1
TCBZERO  EQU   TCBPKF
TCBFLAG  EQU   TCBPKF
TCBMSSB  EQU   TCBMSS+1
TCBRSV03 EQU   TCBMSS
TCBTRNB  EQU   TCBTRN+1
TCBRSV02 EQU   TCBABF
TCBOLTEP EQU   TCBABF
TCBTCP   EQU   TCBABF
TCBTCPP  EQU   TCBABF
TCBRSV01 EQU   TCBABF
TCBGRPH  EQU   TCBABF
TCBNOCHK EQU   TCBABF
TCBMOD91 EQU   TCBABF
TCBCMPC  EQU   TCBCMP+1
TCBRV318 EQU   TCBCMSG
TCBRV317 EQU   TCBCIND
TCBRV316 EQU   TCBCWTO
TCBCASID EQU   TCBCDBL
TCBNOCC  EQU   TCBSTCC
TCBDMPO  EQU   TCBCPP
TCBCSTEP EQU   TCBCMPF
TCBCREQ  EQU   TCBCMPF
TCBTIO   EQU   TCB+12
TCBDEB   EQU   TCB+8
TCBPIEA  EQU   TCBPIE+1
TCBPM    EQU   TCBPMASK
@NM00026 EQU   TCBPMASK
TCBRBP   EQU   TCB
TCBFRS6  EQU   TCBFRS+24
TCBFRS4  EQU   TCBFRS+16
TCBFRS2  EQU   TCBFRS+8
TCBFRS0  EQU   TCBFRS
JSCBCSCB EQU   JSCBSEC1+68
JSCBPMG  EQU   JSCBWTP+2
JSCBWTSP EQU   JSCBWTP+1
JSCRSV23 EQU   JSCBWTFG
JSCRSV22 EQU   JSCBWTFG
JSCRSV21 EQU   JSCBWTFG
JSCRSV20 EQU   JSCBWTFG
JSCRSV19 EQU   JSCBWTFG
JSCRSV18 EQU   JSCBWTFG
JSCBRET  EQU   JSCBWTFG
JSCBIOFG EQU   JSCBWTFG
@NM00023 EQU   JSCBSEC1+60
JSCBQMPI EQU   JSCBSEC1+56
JSCBPMSG EQU   JSCBSWT1
JSCRSV16 EQU   JSCBSWT1
JSCRSV15 EQU   JSCBSWT1
JSCRSV14 EQU   JSCBSWT1
JSCRSV13 EQU   JSCBSWT1
JSCRSV12 EQU   JSCBSWT1
JSCRSV11 EQU   JSCBSWT1
JSCBPASS EQU   JSCBSWT1
JSCBTTTR EQU   JSCBSEC1+52
JSCRSV10 EQU   JSCBSEC1+49
JSCBAUTH EQU   JSCBOPTS
JSCSIOTS EQU   JSCBOPTS
JSCRSV08 EQU   JSCBOPTS
JSCRSV07 EQU   JSCBOPTS
JSCRSV06 EQU   JSCBOPTS
JSCBLONG EQU   JSCBOPTS
JSCRSV05 EQU   JSCBOPTS
JSCRSV04 EQU   JSCBOPTS
JSCBSECB EQU   JSCBSEC1+44
JSCRSV03 EQU   JSCBSEC1+41
JSCBSTEP EQU   JSCBSEC1+40
JSCBDCBA EQU   JSCBDCB+1
JSCRSV02 EQU   JSCBDCB
JSCBID   EQU   JSCBSEC1+32
JSCBDBTB EQU   JSCBSEC1+28
JSCBIJSC EQU   JSCBSEC1+24
JSCBTCBP EQU   JSCBSEC1+20
JSCBPCC  EQU   JSCBSEC1+16
JSCBTCP  EQU   JSCBSEC1+12
JSCBSHR  EQU   JSCBSEC1+8
JSCHPCEA EQU   JSCHPCE+1
JSCRSV32 EQU   JSCHPCE
JSCRSV01 EQU   JSCBSEC1
@NM00022 EQU   IEZJSCB
SSIBSUSE EQU   SSIB+32
SSIBRSV1 EQU   SSIB+28
SSIBDEST EQU   SSIB+20
SSIBJBID EQU   SSIB+12
SSIBRESV EQU   SSIB+7
@NM00021 EQU   SSIBFLG1
SSIBPJES EQU   SSIBFLG1
SSIBLEN  EQU   SSIB+4
SSIBID   EQU   SSIB
S99TUPRM EQU   S99TUFLD+2
S99TULEN EQU   S99TUFLD
S99TUPAR EQU   S99TUENT+2
S99TULNG EQU   S99TUENT
S99TUNUM EQU   S99TUNIT+2
S99TUKEY EQU   S99TUNIT
S99TUPND EQU   S99TUP
S99TUPLN EQU   S99TUPTR
TIOCSTEP EQU   TIOT1+8
TIOCNJOB EQU   TIOT1
@NM00013 EQU   CIBNAME+13
CIBCONID EQU   CIBNAME+12
CIBTJID  EQU   CIBASID
@NM00012 EQU   CIBNAME+6
CIBLEN   EQU   CIBNAME+5
CIBVERB  EQU   CIBNAME+4
CIBNEXT  EQU   CIBNAME
BUFFER2  EQU   AMWORKAR+4488
CCWS2    EQU   AMWORKAR+4256
IOB2     EQU   AMWORKAR+4208
BUFFER1  EQU   AMWORKAR+880
CCWS1    EQU   AMWORKAR+648
IOB1     EQU   AMWORKAR+600
SETDWORK EQU   AMWORKAR+200
SETDDSID EQU   SETDLIST+8
SETDDCB  EQU   SETDLIST+4
SETDVERY EQU   SETDLIST+1
@NM00011 EQU   PRLOPTBT
@NM00010 EQU   AMWORKAR+160
@NM00009 EQU   ACB35IND
AMWBOESS EQU   AMWEODSS
AMWBOE0  EQU   AMWEOD0
AMWBOETT EQU   AMWEODTT
AMWBOERV EQU   AMWEODRV
AMWDSID  EQU   AMW3540E+4
@NM00008 EQU   AMWEAMFG
AMWVAMSG EQU   AMWEAMFG
AMWDSOPN EQU   AMWEAMFG
AMWMULTI EQU   AMWEAMFG
AMWVSEQU EQU   AMW3540E+2
AMWDSSQL EQU   AMW3540E+1
AMWVOLAC EQU   AMW3540E
REGSAVE  EQU   WORKAREA+28
WORKBSL  EQU   WORKAREA
IOBBFLN  EQU   JAMWKAR+13
@NM00007 EQU   JAMWKAR+12
IOB1ADDR EQU   JAMWKAR+9
@NM00006 EQU   JAMWKAR+8
CCWPTR   EQU   JAMWKAR+5
@NM00005 EQU   JAMWKAR+4
IOBPTR   EQU   JAMWKAR+1
IOBNO    EQU   JAMWKAR
AMWLEN   EQU   AMWORKAR
COMMECB  EQU   COMMLIST
LSTENDFG EQU   PARMADRW
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RC00201 EQU   @RC00197
@RC00221 EQU   @RC00220
@RF00252 EQU   @RC00245
@RF00257 EQU   @RC00208
@RC00260 EQU   @RC00208
@RF00290 EQU   @RC00281
@RC00354 EQU   @RC00353
@RC00369 EQU   @RC00366
@RC00408 EQU   @RC00407
@RC00435 EQU   @RC00434
@RC00532 EQU   @RC00531
@RC00570 EQU   @EL00003
@RC00639 EQU   @EL00004
@RC00603 EQU   @EL00004
@RC00724 EQU   @RC00718
@RF00811 EQU   @EL00007
@RC00792 EQU   @EL00007
@RC00838 EQU   @EL00008
@RC00816 EQU   @EL00008
@RC00871 EQU   @EL00009
@PB00011 EQU   @PB00012
@RC00225 EQU   @RC00221
@RC00261 EQU   @RC00260
@RC00370 EQU   @RC00369
@RC00578 EQU   @RC00570
@RC00616 EQU   @RC00603
@RC00605 EQU   @RC00603
@RC00736 EQU   @RC00724
@RF00808 EQU   @RC00792
@RC00817 EQU   @RC00816
@RC00844 EQU   @RC00838
@RC00839 EQU   @RC00838
@RC00854 EQU   @RC00838
@RF00864 EQU   @RC00838
@PB00010 EQU   @PB00011
@RC00606 EQU   @RC00605
@RC00823 EQU   @RC00817
@RC00818 EQU   @RC00817
@PB00009 EQU   @PB00010
@PB00008 EQU   @PB00009
@PB00007 EQU   @PB00008
@PB00006 EQU   @PB00007
@PB00005 EQU   @PB00006
@PB00004 EQU   @PB00005
@PB00003 EQU   @PB00004
@PB00002 EQU   @PB00003
@RC00473 EQU   @PB00002
@RC00478 EQU   @PB00002
@RC00476 EQU   @PB00002
@ENDDATA EQU   *
         END   IOEDKWTR,(C'PLS1156',0701,78088)
