         TITLE 'IOEDKMSG - VS2 3540 MESSAGE MODULE                     *
                        '
IOEDKMSG CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'IOEDKMSG  74.297'                                 0001
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                     0001
         BALR  @12,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,@12                                         0001
         ST    @13,@SA00001+4                                      0001
         LA    @14,@SA00001                                        0001
         ST    @14,8(,@13)                                         0001
         LR    @13,@14                                             0001
*   PARMLPTR = R1;                 /* SAVE PTR TO PARMLIST   @Y30OE62*/
         LR    PARMLPTR,R1                                         0072
*   MSGPTR = MSGLPTR(MSGNDEX);     /* POINT TO MESSAGE       @Y30OE62*/
         SLR   @15,@15                                             0073
         IC    @15,MSGNDEX(,PARMLPTR)                              0073
         SLA   @15,2                                               0073
         L     MSGPTR,MSGLPTR-4(@15)                               0073
*   IF MCODE = WTOR THEN           /* IS IT A WTOR ?         @Y30OE62*/
         CLI   MCODE(PARMLPTR),2                                   0074
         BNE   @RF00074                                            0074
*     DO;                          /* YES,                   @Y30OE62*/
*       TXTNDEX = 12;              /* INDEX TO TEXT          @Y30OE62*/
         LA    TXTNDEX,12                                          0076
*       MLNDEX = 8;                /* INDEX TO MSG LENGTH    @Y30OE62*/
         LA    MLNDEX,8                                            0077
*     END;                                                 /*@Y30OE62*/
*   ELSE                           /* NOT A WTOR             @Y30OE62*/
*     DO;                                                  /*@Y30OE62*/
         B     @RC00074                                            0079
@RF00074 DS    0H                                                  0080
*       IF MCODE = WRITECHK THEN   /* IS IT A WRITE ?        @Y30OE62*/
         CLI   MCODE(PARMLPTR),3                                   0080
         BNE   @RF00080                                            0080
*          TXTNDEX = 8;            /* INDEX TO TEXT          @Y30OE62*/
         LA    TXTNDEX,8                                           0081
*       ELSE                       /* IT'S A WTO             @Y30OE62*/
*         TXTNDEX = 4;             /* INDEX TO TEXT          @Y30OE62*/
         B     @RC00080                                            0082
@RF00080 LA    TXTNDEX,4                                           0082
*       MLNDEX = 0;                /* INDEX TO MSG LENGTH    @Y30OE62*/
@RC00080 SLR   MLNDEX,MLNDEX                                       0083
*     END;                                                 /*@Y30OE62*/
*   MSGLNPTR = MSGPTR+MLNDEX;      /* POINT TO MSG LENGTH    @Y30OE62*/
@RC00074 LR    MSGLNPTR,MSGPTR                                     0085
         ALR   MSGLNPTR,MLNDEX                                     0085
*   MSGBUFF(1:MLEN+TXTNDEX)=MESSAGE;                       /*@Y30OE62*/
         LR    @11,TXTNDEX                                         0086
         AH    @11,MLEN(,MSGLNPTR)                                 0086
         BCTR  @11,0                                               0086
         EX    @11,@SM00685                                        0086
*                                  /* MOVE MESSAGE, FROM     @Y30OE62*/
*                                  /* START TO LAST BYTE     @Y30OE62*/
*                                  /* OF TEXT, TO BUFFER     @Y30OE62*/
*   TXTNPTR = PARMLPTR+12;         /* POINT TO FIRST         @Y30OE62*/
         LA    TXTNPTR,12                                          0087
         ALR   TXTNPTR,PARMLPTR                                    0087
*                                  /* TEXT ENTRY             @Y30OE62*/
*   BFMLPTR = ADDR(MSGBUFF)+MLNDEX;                        /*@Y30OE62*/
         LA    BFMLPTR,MSGBUFF                                     0088
         ALR   BFMLPTR,MLNDEX                                      0088
*                                  /* POINT TO MSG LENGTH    @Y30OE62*/
*                                  /* FIELD IN BUFFER        @Y30OE62*/
*   DO WHILE (KEYCHK^= ENDLIST);   /* PROCESS UNTIL END      @Y30OE62*/
         B     @DE00089                                            0089
@DL00089 DS    0H                                                  0090
*                                  /* PARMLIST INDICATED     @Y30OE62*/
*     MTXTPTR = ADDR(MSGBUFF)+TXTNDEX;                     /*@Y30OE62*/
         LA    MTXTPTR,MSGBUFF                                     0090
         ALR   MTXTPTR,TXTNDEX                                     0090
*                                  /* POINT TO FIRST BYTE    @Y30OE62*/
*                                  /* OF MSG TEXT            @Y30OE62*/
*     IF KEYCHK ^=SKIPNTRY THEN    /* PROCESS THIS ENTRY?    @Y30OE62*/
         CLI   KEYCHK(TXTNPTR),X'00'                               0091
         BE    @RF00091                                            0091
*       DO;                        /* YES,                   @Y30OE62*/
*         IF LOPBIT = ON THEN      /* HI-ORDER BIT ON?       @Y30OE62*/
         TM    LOPBIT(TXTNPTR),B'10000000'                         0093
         BNO   @RF00093                                            0093
*           LOPFLAG = ON;          /* TURN ON LOPFLAG        @Y30OE62*/
         OI    LOPFLAG,B'10000000'                                 0094
*         ELSE                     /* IF OFF,                @Z30OE78*/
*           LOPFLAG=OFF;           /* TURN OFF LOPFLAG       @Z30OE78*/
         B     @RC00093                                            0095
@RF00093 NI    LOPFLAG,B'01111111'                                 0095
*         WRKKEY = KEYCHK;         /* MOVE KEY TO WORK AREA  @Y30OE62*/
@RC00093 MVC   WRKKEY(1),KEYCHK(TXTNPTR)                           0096
*         WRKKEY1 = OFF;           /* TURN OFF HI-ORDER BIT  @Y30OE62*/
         NI    WRKKEY1,B'01111111'                                 0097
*         DO MTXTPTR=ADDR(MSGBUFF)+TXTNDEX TO/* SCAN TEXT    @Z30OE78*/
*             ADDR(MSGBUFF)+TXTNDEX+MLEN-4/* TO FIND KEY     @Z30OE78*/
*             WHILE TXTBYTE^=WRKKEY;                       /*@Z30OE78*/
         LA    MTXTPTR,MSGBUFF                                     0098
         ALR   MTXTPTR,TXTNDEX                                     0098
         B     @DE00098                                            0098
@DL00098 CLC   TXTBYTE(1,MTXTPTR),WRKKEY                           0098
         BE    @DC00098                                            0098
*         END;                                             /*@Z30OE78*/
         AH    MTXTPTR,@CH00041                                    0099
@DE00098 LA    @11,MSGBUFF                                         0099
         ALR   @11,TXTNDEX                                         0099
         AH    @11,MLEN(,MSGLNPTR)                                 0099
         SH    @11,@CH00143                                        0099
         CR    MTXTPTR,@11                                         0099
         BNH   @DL00098                                            0099
@DC00098 DS    0H                                                  0100
*         IF TXTBYTE=WRKKEY THEN    /* IF KEY FOUND,         @Z30OE78*/
         CLC   TXTBYTE(1,MTXTPTR),WRKKEY                           0100
         BNE   @RF00100                                            0100
*                                   /* PROCESS IT, ELSE      @Z30OE78*/
*                                   /* IGNORE TEXT           @Z30OE78*/
*         IF LOPFLAG = OFF THEN    /* IF LOPFLAG IS OFF,     @Y30OE62*/
         TM    LOPFLAG,B'10000000'                                 0101
         BNZ   @RF00101                                            0101
*           MSGTEXT(1:NTRYLN-2) = TEXT(1:NTRYLN-2);        /*@Y30OE62*/
         SLR   @11,@11                                             0102
         IC    @11,NTRYLN(,TXTNPTR)                                0102
         SH    @11,@CH00045                                        0102
         EX    @11,@SM00689                                        0102
*                                  /* MOVE TEXT TO MSG       @Y30OE62*/
*         ELSE                     /* IF LOPFLAG IS ON,      @Y30OE62*/
*           DO;                                            /*@Y30OE62*/
         B     @RC00101                                            0103
@RF00101 DS    0H                                                  0104
*             DO WHILE (TXTBYTE^=COMMA);                   /*@Y30OE62*/
         B     @DE00104                                            0104
@DL00104 DS    0H                                                  0105
*                                  /* LOOP TIL FIND COMMA    @Y30OE62*/
*               MTXTPTR = MTXTPTR-1;                       /*@Y30OE62*/
         BCTR  MTXTPTR,0                                           0105
*                                  /* MOVE BACK ONE BYTE     @Y30OE62*/
*             END;                                         /*@Y30OE62*/
@DE00104 CLI   TXTBYTE(MTXTPTR),C','                               0106
         BNE   @DL00104                                            0106
*             MSGLEN = MTXTPTR-ADDR(MSGBUFF)-MLNDEX;       /*@Y30OE62*/
         LA    @11,MSGBUFF                                         0107
         LCR   @11,@11                                             0107
         ALR   @11,MTXTPTR                                         0107
         SLR   @11,MLNDEX                                          0107
         STH   @11,MSGLEN(,BFMLPTR)                                0107
*                                  /* ADJUST MSG LENGTH      @Y30OE62*/
*             MSGBUFF(MSGLEN+1+MLNDEX:MLEN+MLNDEX)=BLANKS; /*@Y30OE62*/
         AH    @11,@CH00041                                        0108
         ALR   @11,MLNDEX                                          0108
         LA    @15,MSGBUFF-1(@11)                                  0108
         LR    @14,MLNDEX                                          0108
         AH    @14,MLEN(,MSGLNPTR)                                 0108
         SLR   @14,@11                                             0108
         EX    @14,@SM00691                                        0108
*                                  /* BLANK REST OF MSG,     @Y30OE62*/
*                                  /* STARTING WITH COMMA    @Y30OE62*/
*           END;                                           /*@Y30OE62*/
*         END;                                             /*@Y30OE62*/
@RC00101 DS    0H                                                  0110
@RF00100 DS    0H                                                  0111
*     TXTNPTR = TXTNPTR+NTRYLN;    /* POINT TO NEXT ENTRY    @Y30OE62*/
@RF00091 MVC   @ZT00003+3(1),NTRYLN(TXTNPTR)                       0111
         AL    TXTNPTR,@ZT00003                                    0111
*   END;                                                   /*@Y30OE62*/
@DE00089 CLI   KEYCHK(TXTNPTR),X'7F'                               0112
         BNE   @DL00089                                            0112
*   IF MCODE^=WRITECHK THEN        /* IF WTO OR WTOR, MOVE   @Y30OE62*/
         CLI   MCODE(PARMLPTR),3                                   0113
         BE    @RF00113                                            0113
*     DO;                          /* ROUT & DESC CODES      @Y30OE62*/
*       RDPTR = MSGLNPTR + MLEN;   /* POINT TO ROUT &        @Y30OE62*/
         LR    RDPTR,MSGLNPTR                                      0115
         AH    RDPTR,MLEN(,MSGLNPTR)                               0115
*                                  /* DESC CODES             @Y30OE62*/
*       BFRDPTR = BFMLPTR+MSGLEN;  /* ROUT & DESC CODES      @Y30OE62*/
         LR    BFRDPTR,BFMLPTR                                     0116
         AH    BFRDPTR,MSGLEN(,BFMLPTR)                            0116
*                                  /* FIELD IN BUFFER        @Y30OE62*/
*       BFRTDSC = ROUTDESC;        /* MOVE TO BUFFER         @Y30OE62*/
         MVC   BFRTDSC(4,BFRDPTR),ROUTDESC(RDPTR)                  0117
*     END;                                                 /*@Y30OE62*/
*   R1 = ADDR(MSGBUFF);            /* POINT TO BUFFER        @Y30OE62*/
@RF00113 LA    R1,MSGBUFF                                          0119
*   IF MCODE = WTOR THEN           /* IF WTOR,               @Y30OE62*/
         CLI   MCODE(PARMLPTR),2                                   0120
         BNE   @RF00120                                            0120
*     DO;                                                  /*@Y30OE62*/
*       REPLYPTR = ADDR(RPLYAREA);                         /*@Y30OE62*/
         LA    @00,RPLYAREA                                        0122
         ST    @00,REPLYPTR(,PARMLPTR)                             0122
*                                  /* POINT TO REPLY AREA    @Y30OE62*/
*       RPLYAREA = ''B;            /* BLANK REPLY AREA       @Y30OE62*/
         XC    RPLYAREA(13),RPLYAREA                               0123
*                                  /* WITH BINARY ZEROES     @Y30OE62*/
*       WAITECB = 0;               /* ZERO OUT ECB           @Y30OE62*/
         SLR   @00,@00                                             0124
         ST    @00,WAITECB                                         0124
*       GENERATE REFS(WAITECB);                            /*@Y30OE62*/
         WTOR MF=(E,(1))          /* ISSUE WTOR             @Y30OE62*/
         WAIT ECB=WAITECB         /* & WAIT                 @Y30OE62*/
*     END;                                                 /*@Y30OE62*/
*   ELSE                                                           0127
*     IF MCODE = WRITECHK THEN     /* IF WRITE-CHECK,        @Y30OE62*/
         B     @RC00120                                            0127
@RF00120 CLI   MCODE(PARMLPTR),3                                   0127
         BNE   @RF00127                                            0127
*       DO;                                                /*@Y30OE62*/
*         DECBREG = DECBPTR;       /* GET DECB PTR           @Y30OE62*/
         L     DECBREG,DECBPTR(,PARMLPTR)                          0129
*         DECBAREA = MSGBUFF;      /* MOVE BUFFER TO AREA    @Y30OE62*/
         L     @15,DECBARPT(,DECBREG)                              0130
         MVC   DECBAREA(88,@15),MSGBUFF                            0130
*                                  /* POINTED TO BY DECB     @Y30OE62*/
*         GENERATE REFS(DECBREG);                          /*@Y30OE62*/
         WRITE (DECBREG),SF,MF=E  /* WRITE THE BUFFER       @Y30OE62*/
         CHECK (DECBREG)          /* CHECK IT               @Y30OE62*/
*       END;                                               /*@Y30OE62*/
*     ELSE                         /* IT'S A WTO             @Y30OE62*/
*       GEN (WTO MF=(E,(1)));      /* ISSUE WTO              @Y30OE62*/
         B     @RC00127                                            0133
@RF00127 DS    0H                                                  0133
         WTO MF=(E,(1))
*   R1 = PARMLPTR;                 /* POINT TO PARMLIST      @Y30OE62*/
@RC00127 DS    0H                                                  0134
@RC00120 LR    R1,PARMLPTR                                         0134
*   END IOEDKMSG;                                          /*@Y30OE62*/
@EL00001 L     @13,4(,@13)                                         0135
@EF00001 DS    0H                                                  0135
@ER00001 LM    @14,@12,12(@13)                                     0135
         BR    @14                                                 0135
@DATA    DS    0H
@CH00041 DC    H'1'
@CH00045 DC    H'3'
@CH00143 DC    H'4'
@SM00685 MVC   MSGBUFF(0),MESSAGE(MSGPTR)
@SM00689 MVC   MSGTEXT(0,MTXTPTR),TEXT(TXTNPTR)
@SM00691 MVC   0(0,@15),BLANKS
         DS    0F
@SA00001 DS    18F
@ZTEMPS  DS    0F
@ZT00003 DC    F'0'
@ZTEMPND EQU   *
@ZLEN    EQU   @ZTEMPND-@ZTEMPS
         DS    0F
         DS    0D
BLANKS   DC    CL20' '
MSGBUFF  DC    CL88' '
WORKFLAG DC    X'00'
         ORG   WORKFLAG
LOPFLAG  DS    BL1
@NM00001 EQU   WORKFLAG+0
         ORG   WORKFLAG+1
WRKKEY   DS    CL1
         ORG   WRKKEY
WRKKEY1  DS    BL1
@NM00002 EQU   WRKKEY+0
         ORG   WRKKEY+1
         DS    CL2
WAITECB  DC    X'00'
         DC    XL3'0'
RPLYAREA DS    CL13
         DS    CL1
IEB543I  DS    CL66
         ORG   IEB543I
M1LEN    DC    AL2(58+4)
@NM00004 DC    X'8000'
M1TXT    DS    CL58
         ORG   M1TXT
@NM00005 DC    CL8'IEB543I '
@NM00006 DC    X'07'
@NM00007 DC    CL27'        DD MISSING OR INVAL'
@NM00008 DC    CL22'ID FOR DISKETTE READER'
         ORG   IEB543I+62
@NM00009 DC    X'0200'
@NM00010 DC    X'4200'
         ORG   IEB543I+66
IEB552I  DS    CL62
         ORG   IEB552I
M2LEN    DC    AL2(54+4)
@NM00011 DC    X'8000'
M2TXT    DS    CL54
         ORG   M2TXT
@NM00012 DC    CL27'IEB552I INVALID PARAMETERS '
@NM00013 DC    CL27'SUPPLIED TO DISKETTE READER'
         ORG   IEB552I+58
@NM00014 DC    X'0200'
@NM00015 DC    X'4200'
         ORG   IEB552I+62
IEB553I  DS    CL57
         ORG   IEB553I
M3LEN    DC    AL2(49+4)
@NM00016 DC    X'8000'
M3TXT    DS    CL49
         ORG   M3TXT
@NM00017 DC    CL27'IEB553I DISKETTE READER UNA'
@NM00018 DC    CL22'BLE TO GET TABLE SPACE'
         ORG   IEB553I+53
@NM00019 DC    X'0200'
@NM00020 DC    X'4200'
         ORG   IEB553I+57
         DS    CL1
IEB549I  DS    CL53
         ORG   IEB549I
M4LEN    DC    AL2(45+4)
@NM00021 DC    X'8000'
M4TXT    DS    CL45
         ORG   M4TXT
@NM00022 DC    CL8'IEB549I '
@NM00023 DC    X'07'
@NM00024 DC    CL25'        ,DISKETTE READER '
@NM00025 DC    CL11'OPEN FAILED'
         ORG   IEB549I+49
@NM00026 DC    X'0200'
@NM00027 DC    X'4200'
         ORG   IEB549I+53
         DS    CL1
IEB550E  DS    CL71
         ORG   IEB550E
M5LEN    DC    AL2(63+4)
@NM00028 DC    X'8000'
M5TXT    DS    CL63
         ORG   M5TXT
@NM00029 DC    CL8'IEB550E '
@NM00030 DC    CL23'JOB NUMBER LIMIT EXCEED'
@NM00031 DC    CL15'ED READING JOB '
@NM00032 DC    X'0B'
@NM00033 DC    CL7' '
@NM00034 DC    CL6' FROM '
@NM00035 DC    X'08'
@NM00036 DC    CL2' '
         ORG   IEB550E+67
@NM00037 DC    X'0200'
@NM00038 DC    X'4200'
         ORG   IEB550E+71
         DS    CL1
IEB544E  DS    CL80
         ORG   IEB544E
M6LEN    DC    AL2(72+4)
@NM00039 DC    X'8000'
M6TXT    DS    CL72
         ORG   M6TXT
@NM00040 DC    CL8'IEB544E '
@NM00041 DC    CL20'ASSOCIATED DATA SET '
@NM00042 DC    CL27'LIMIT EXCEEDED READING JOB '
@NM00043 DC    X'0B'
@NM00044 DC    CL7' '
@NM00045 DC    CL6' FROM '
@NM00046 DC    X'08'
@NM00047 DC    CL2' '
         ORG   IEB544E+76
@NM00048 DC    X'0200'
@NM00049 DC    X'4200'
         ORG   IEB544E+80
IEB545I  DS    CL54
         ORG   IEB545I
M7LEN    DC    AL2(46+4)
@NM00050 DC    X'8000'
M7TXT    DS    CL46
         ORG   M7TXT
@NM00051 DC    CL23'IEB545I FOLLOWING DATA '
@NM00052 DC    CL20'SET(S) NOT FOUND ON '
@NM00053 DC    X'08'
@NM00054 DC    CL2' '
         ORG   IEB545I+50
@NM00055 DC    X'0200'
@NM00056 DC    X'4200'
         ORG   IEB545I+54
IEB546I  DS    CL62
         ORG   IEB546I
M8LEN    DC    AL2(54+4)
@NM00057 DC    X'8000'
M8TXT    DS    CL54
         ORG   M8TXT
@NM00058 DC    CL15'IEB546I DSNAME='
@NM00059 DC    X'06'
@NM00060 DC    CL16'       ,JOBNAME='
@NM00061 DC    X'0B'
@NM00062 DC    CL15'       ,VOLSER='
@NM00063 DC    X'01'
@NM00064 DC    CL5' '
         ORG   IEB546I+58
@NM00065 DC    X'0200'
@NM00066 DC    X'4200'
         ORG   IEB546I+62
         DS    CL2
IEB547D  DS    CL47
         ORG   IEB547D
REPLN9   DC    AL1(5)
REPAD9   DC    AL3(RPLYAREA)
ECBAD9   DC    AL4(WAITECB)
M9LEN    DC    AL2(31+4)
@NM00067 DC    X'8000'
M9TXT    DS    CL31
         ORG   M9TXT
@NM00068 DC    CL22'IEB547D REPLY ''RETRY'' '
@NM00069 DC    CL9'OR ''GO'''
         ORG   IEB547D+43
@NM00070 DC    X'0200'
@NM00071 DC    X'8200'
         ORG   IEB547D+47
         DS    CL1
IEB548E  DS    CL53
         ORG   IEB548E
M10LEN   DC    AL2(45+4)
@NM00072 DC    X'8000'
M10TXT   DS    CL45
         ORG   M10TXT
@NM00073 DC    CL8'IEB548E '
@NM00074 DC    X'08'
@NM00075 DC    CL16'   INPUT ERROR, '
@NM00076 DC    CL12'READING JOB '
@NM00077 DC    X'0B'
@NM00078 DC    CL7' '
         ORG   IEB548E+49
@NM00079 DC    X'0200'
@NM00080 DC    X'4240'
         ORG   IEB548E+53
         DS    CL1
IEB551I  DS    CL88
         ORG   IEB551I
M11BDW   DC    AL2(80+8)
@NM00081 DC    X'0000'
M11RDW   DC    AL2(80+4)
@NM00082 DC    X'0000'
M11TXT   DS    CL80
         ORG   M11TXT
@NM00083 DC    CL21'//* IEB551I DATA SET '
@NM00084 DC    CL21'NOT AVAILABLE - CODE='
@NM00085 DC    X'0D'
@NM00086 DC    CL37' '
         ORG   IEB551I+88
IEB554E  DS    CL76
         ORG   IEB554E
M12LEN   DC    AL2(68+4)
@NM00087 DC    X'8000'
M12TXT   DS    CL68
         ORG   M12TXT
@NM00088 DC    CL8'IEB554E '
@NM00089 DC    X'07'
@NM00090 DC    CL25'       , DISKETTE READER '
@NM00091 DC    CL11'I/O ERROR, '
@NM00092 DC    CL15'PROCESSING JOB '
@NM00093 DC    X'0B'
@NM00094 DC    CL7' '
         ORG   IEB554E+72
@NM00095 DC    X'0200'
@NM00096 DC    X'4240'
         ORG   IEB554E+76
         DS    CL2
IEB540D  DS    CL60
         ORG   IEB540D
REPLN13  DC    AL1(1)
REPAD13  DC    AL3(RPLYAREA)
ECBAD13  DC    AL4(WAITECB)
M13LEN   DC    AL2(44+4)
@NM00097 DC    X'8000'
M13TXT   DS    CL44
         ORG   M13TXT
@NM00098 DC    CL25'IEB540D DISKETTE SEQUENCE'
@NM00099 DC    CL7' ERROR,'
@NM00100 DC    X'08'
@NM00101 DC    CL3'  ,'
@NM00102 DC    X'06'
@NM00103 DC    CL7' '
         ORG   IEB540D+56
@NM00104 DC    X'0200'
@NM00105 DC    X'8200'
         ORG   IEB540D+60
IEB530I  DS    CL48
         ORG   IEB530I
M14LEN   DC    AL2(40+4)
@NM00106 DC    X'8000'
M14TXT   DS    CL40
         ORG   M14TXT
@NM00107 DC    CL26'IEB530I INVALID VOL1 LABEL'
@NM00108 DC    CL4' ON '
@NM00109 DC    X'08'
@NM00110 DC    CL3'  ,'
@NM00111 DC    X'01'
@NM00112 DC    CL5' '
         ORG   IEB530I+44
@NM00113 DC    X'0200'
@NM00114 DC    X'4200'
         ORG   IEB530I+48
IEB531I  DS    CL55
         ORG   IEB531I
M15LEN   DC    AL2(47+4)
@NM00115 DC    X'8000'
M15TXT   DS    CL47
         ORG   M15TXT
@NM00116 DC    CL25'IEB531I INVALID HDR1 FOR '
@NM00117 DC    X'06'
@NM00118 DC    CL11'        ON '
@NM00119 DC    X'01'
@NM00120 DC    CL6'     ,'
@NM00121 DC    X'08'
@NM00122 DC    CL2' '
         ORG   IEB531I+51
@NM00123 DC    X'0200'
@NM00124 DC    X'4200'
         ORG   IEB531I+55
         DS    CL1
IEB541D  DS    CL36
         ORG   IEB541D
REPLN16  DC    AL1(1)
REPAD16  DC    AL3(RPLYAREA)
ECBAD16  DC    AL4(WAITECB)
M16LEN   DC    AL2(20+4)
@NM00125 DC    X'8000'
M16TXT   DS    CL20
         ORG   M16TXT
@NM00126 DC    CL10'IEB541D M '
@NM00127 DC    X'08'
@NM00128 DC    CL3'  ,'
@NM00129 DC    X'01'
@NM00130 DC    CL5' '
         ORG   IEB541D+32
@NM00131 DC    X'0200'
@NM00132 DC    X'8200'
         ORG   IEB541D+36
IEB542D  DS    CL71
         ORG   IEB542D
REPLN17  DC    AL1(12)
REPAD17  DC    AL3(RPLYAREA)
ECBAD17  DC    AL4(WAITECB)
M17LEN   DC    AL2(55+4)
@NM00133 DC    X'8000'
M17TXT   DS    CL55
         ORG   M17TXT
@NM00134 DC    CL15'IEB542D SECURE '
@NM00135 DC    X'0A'
@NM00136 DC    CL11'        ON '
@NM00137 DC    X'08'
@NM00138 DC    CL3'  ,'
@NM00139 DC    X'01'
@NM00140 DC    CL6'     ,'
@NM00141 DC    X'0B'
@NM00142 DC    CL8'       ,'
@NM00143 DC    X'06'
@NM00144 DC    CL7' '
         ORG   IEB542D+67
@NM00145 DC    X'0200'
@NM00146 DC    X'8280'
         ORG   IEB542D+71
         DS    CL1
IEB555E  DS    CL47
         ORG   IEB555E
M18LEN   DC    AL2(39+4)
@NM00147 DC    X'8000'
M18TXT   DS    CL39
         ORG   M18TXT
@NM00148 DC    CL8'IEB555E '
@NM00149 DC    CL26'DISKETTE READER DIRECTORY '
@NM00150 DC    CL5'ERROR'
         ORG   IEB555E+43
@NM00151 DC    X'0200'
@NM00152 DC    X'4200'
         ORG   IEB555E+47
         DS    CL1
IEB570I  DS    CL53
         ORG   IEB570I
M19LEN   DC    AL2(45+4)
@NM00153 DC    X'8000'
M19TXT   DS    CL45
         ORG   M19TXT
@NM00154 DC    CL8'IEB570I '
@NM00155 DC    X'08'
@NM00156 DC    CL3'  ,'
@NM00157 DC    X'01'
@NM00158 DC    CL26'      NON-SCRATCH DISKETTE'
@NM00159 DC    CL6' FOUND'
         ORG   IEB570I+49
@NM00160 DC    X'0200'
@NM00161 DC    X'4200'
         ORG   IEB570I+53
         DS    CL1
IEB571I  DS    CL78
         ORG   IEB571I
M20LEN   DC    AL2(70+4)
@NM00162 DC    X'8000'
M20TXT   DS    CL70
         ORG   M20TXT
@NM00163 DC    CL8'IEB571I '
@NM00164 DC    X'0B'
@NM00165 DC    CL8'       ,'
@NM00166 DC    X'06'
@NM00167 DC    CL18'        ON VOL(S) '
@NM00168 DC    X'01'
@NM00169 DC    CL6'     ,'
@NM00170 DC    X'02'
@NM00171 DC    CL6'     ,'
@NM00172 DC    X'03'
@NM00173 DC    CL6'     ,'
@NM00174 DC    X'04'
@NM00175 DC    CL6'     ,'
@NM00176 DC    X'05'
@NM00177 DC    CL5' '
         ORG   IEB571I+74
@NM00178 DC    X'0200'
@NM00179 DC    X'4200'
         ORG   IEB571I+78
IEB572E  DS    CL56
         ORG   IEB572E
M21LEN   DC    AL2(48+4)
@NM00180 DC    X'8000'
M21TXT   DS    CL48
         ORG   M21TXT
@NM00181 DC    CL8'IEB572E '
@NM00182 DC    X'08'
@NM00183 DC    CL26'   DISKETTE WRITER CLOSED,'
@NM00184 DC    CL13' OUTPUT ERROR'
         ORG   IEB572E+52
@NM00185 DC    X'0200'
@NM00186 DC    X'4240'
         ORG   IEB572E+56
IEB573E  DS    CL61
         ORG   IEB573E
M22LEN   DC    AL2(53+4)
@NM00187 DC    X'8000'
M22TXT   DS    CL53
         ORG   M22TXT
@NM00188 DC    CL21'IEB573E DATA SET NOT '
@NM00189 DC    CL16'WRITTEN FOR,JOB='
@NM00190 DC    X'0B'
@NM00191 DC    CL14'       ,CLASS='
@NM00192 DC    X'09'
         ORG   IEB573E+57
@NM00193 DC    X'0200'
@NM00194 DC    X'4200'
         ORG   IEB573E+61
         DS    CL1
IEB574I  DS    CL65
         ORG   IEB574I
M23LEN   DC    AL2(57+4)
@NM00195 DC    X'8000'
M23TXT   DS    CL57
         ORG   M23TXT
@NM00196 DC    CL19'IEB574I IEFRDER DD '
@NM00197 DC    CL11'MISSING OR '
@NM00198 DC    CL27'INVALID FOR DISKETTE WRITER'
         ORG   IEB574I+61
@NM00199 DC    X'0200'
@NM00200 DC    X'4200'
         ORG   IEB574I+65
         DS    CL1
IEB575A  DS    CL81
         ORG   IEB575A
REPLN24  DC    AL1(12)
REPAD24  DC    AL3(RPLYAREA)
ECBAD24  DC    AL4(WAITECB)
M24LEN   DC    AL2(65+4)
@NM00201 DC    X'8000'
M24TXT   DS    CL65
         ORG   M24TXT
@NM00202 DC    CL25'IEB575A SPECIFY SECURITY '
@NM00203 DC    CL11'FOR DSNAME='
@NM00204 DC    X'06'
@NM00205 DC    CL12'       ,JOB='
@NM00206 DC    X'0B'
@NM00207 DC    CL12'       , ON '
@NM00208 DC    X'08'
@NM00209 DC    CL2' '
         ORG   IEB575A+77
@NM00210 DC    X'0200'
@NM00211 DC    X'8280'
         ORG   IEB575A+81
         DS    CL1
IEB576I  DS    CL64
         ORG   IEB576I
M25LEN   DC    AL2(56+4)
@NM00212 DC    X'8000'
M25TXT   DS    CL56
         ORG   M25TXT
@NM00213 DC    CL23'IEB576I SYSIO ERROR ON '
@NM00214 DC    X'06'
@NM00215 DC    CL16'        FOR JOB '
@NM00216 DC    X'0B'
@NM00217 DC    CL12'       , ON '
@NM00218 DC    X'08'
@NM00219 DC    CL2' '
         ORG   IEB576I+60
@NM00220 DC    X'0200'
@NM00221 DC    X'4240'
         ORG   IEB576I+64
IEB577E  DS    CL58
         ORG   IEB577E
M26LEN   DC    AL2(50+4)
@NM00222 DC    X'8000'
M26TXT   DS    CL50
         ORG   M26TXT
@NM00223 DC    CL8'IEB577E '
@NM00224 DC    X'08'
@NM00225 DC    CL25'   DISKETTE WRITER ENDED,'
@NM00226 DC    X'0C'
@NM00227 DC    CL15'          ERROR'
         ORG   IEB577E+54
@NM00228 DC    X'0200'
@NM00229 DC    X'4200'
         ORG   IEB577E+58
IEB578I  DS    CL71
         ORG   IEB578I
M27LEN   DC    AL2(63+4)
@NM00230 DC    X'8000'
M27TXT   DS    CL63
         ORG   M27TXT
@NM00231 DC    CL8'IEB578I '
@NM00232 DC    X'08'
@NM00233 DC    CL22'   DUPLICATE DATA SET '
@NM00234 DC    CL11'IDENTIFIER '
@NM00235 DC    X'06'
@NM00236 DC    CL12'        FOR '
@NM00237 DC    X'0B'
@NM00238 DC    CL7' '
         ORG   IEB578I+67
@NM00239 DC    X'0200'
@NM00240 DC    X'4200'
         ORG   IEB578I+71
         DS    CL1
IEB579I  DS    CL66
         ORG   IEB579I
M28LEN   DC    AL2(58+4)
@NM00241 DC    X'8000'
M28TXT   DS    CL58
         ORG   M28TXT
@NM00242 DC    CL16'IEB579I INVALID '
@NM00243 DC    CL19'PARAMETERS SUPPLIED'
@NM00244 DC    CL23' TO THE DISKETTE WRITER'
         ORG   IEB579I+62
@NM00245 DC    X'0200'
@NM00246 DC    X'4200'
         ORG   IEB579I+66
IEB580I  DS    CL44
         ORG   IEB580I
M29LEN   DC    AL2(36+4)
@NM00247 DC    X'8000'
M29TXT   DS    CL36
         ORG   M29TXT
@NM00248 DC    CL20'IEB580I OPEN ERROR -'
@NM00249 DC    CL16' DISKETTE WRITER'
         ORG   IEB580I+40
@NM00250 DC    X'0200'
@NM00251 DC    X'4200'
         ORG   IEB580I+44
IEB581E  DS    CL48
         ORG   IEB581E
M30LEN   DC    AL2(40+4)
@NM00252 DC    X'8000'
M30TXT   DS    CL40
         ORG   M30TXT
@NM00253 DC    CL8'IEB581E '
@NM00254 DC    X'0E'
@NM00255 DC    CL27'                     ERROR,'
@NM00256 DC    X'0D'
@NM00257 DC    CL3' '
         ORG   IEB581E+44
@NM00258 DC    X'0200'
@NM00259 DC    X'0020'
         ORG   IEB581E+48
IEB556E  DS    CL62
         ORG   IEB556E
M31LEN   DC    AL2(54+4)
@NM00260 DC    X'8000'
M31TXT   DS    CL54
         ORG   M31TXT
@NM00261 DC    CL22'IEB556E DSID KEYWORD '
@NM00262 DC    CL12'ENCOUNTERED '
@NM00263 DC    CL12'READING JOB '
@NM00264 DC    X'0B'
@NM00265 DC    CL7' '
         ORG   IEB556E+58
@NM00266 DC    X'0200'
@NM00267 DC    X'4200'
         ORG   IEB556E+62
MSGLPTR  DC    AL4(IEB543I)
         DC    AL4(IEB552I)
         DC    AL4(IEB553I)
         DC    AL4(IEB549I)
         DC    AL4(IEB550E)
         DC    AL4(IEB544E)
         DC    AL4(IEB545I)
         DC    AL4(IEB546I)
         DC    AL4(IEB547D)
         DC    AL4(IEB548E)
         DC    AL4(IEB551I)
         DC    AL4(IEB554E)
         DC    AL4(IEB540D)
         DC    AL4(IEB530I)
         DC    AL4(IEB531I)
         DC    AL4(IEB541D)
         DC    AL4(IEB542D)
         DC    AL4(IEB555E)
         DC    AL4(IEB570I)
         DC    AL4(IEB571I)
         DC    AL4(IEB572E)
         DC    AL4(IEB573E)
         DC    AL4(IEB574I)
         DC    AL4(IEB575A)
         DC    AL4(IEB576I)
         DC    AL4(IEB577E)
         DC    AL4(IEB578I)
         DC    AL4(IEB579I)
         DC    AL4(IEB580I)
         DC    AL4(IEB581E)
         DC    AL4(IEB556E)
IOEDKMSG CSECT
MT3540AR DC    50X'FF'            /* ZAPAREA                @Y30OE62*/
IOEDKMSG CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
BFRDPTR  EQU   @09
RDPTR    EQU   @08
BFMLPTR  EQU   @10
MLNDEX   EQU   @09
TXTNDEX  EQU   @08
R1       EQU   @01
PARMLPTR EQU   @02
MSGPTR   EQU   @03
TXTNPTR  EQU   @04
MSGLNPTR EQU   @05
MTXTPTR  EQU   @06
DECBREG  EQU   @07
PARMLIST EQU   0
MSGNDEX  EQU   PARMLIST
MCODE    EQU   PARMLIST+1
DECBPTR  EQU   PARMLIST+4
REPLYPTR EQU   PARMLIST+8
TXTENTRY EQU   0
NTRYLN   EQU   TXTENTRY
KEYCHK   EQU   TXTENTRY+1
LOPBIT   EQU   KEYCHK
TEXT     EQU   TXTENTRY+2
MESSAGE  EQU   0
MLEN     EQU   0
TXTBYTE  EQU   0
MSGTEXT  EQU   0
MSGLEN   EQU   0
ROUTDESC EQU   0
BFRTDSC  EQU   0
DECBDECB EQU   0
DECBARPT EQU   DECBDECB+12
DECBAREA EQU   0
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
@NM00003 EQU   DECBDECB
KEE      EQU   KEYCHK
RSVRD    EQU   PARMLIST+2
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@ENDDATA EQU   *
         END   IOEDKMSG,(C'PLS1425',0603,74297)
