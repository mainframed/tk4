         TITLE 'IOEDKGET-3540 GET MODULE                               *
                        '
IOEDKGET CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'IOEDKGET  75.308'                                 0001
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                     0001
         BALR  @12,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,@12                                         0001
*                                                                  0078
*   /*****************************************************************/
*   /*                                                               */
*   /* PROGRAM INITIALIZATION                                @Y30OECA*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0078
*   DCBPTR=REG1;                    /* INIT ADDR OF DCB      @Y30OEAC*/
         LR    DCBPTR,REG1                                         0078
*   AMWKAPTR=DCBAMWKA;              /* GET PTR TO A.M. WKAREA      0079
*                                                            @Y30OE95*/
         L     AMWKAPTR,DCBAMWKA+15(,DCBPTR)                       0079
         LA    AMWKAPTR,0(,AMWKAPTR)                               0079
*   RPLFDBK=CLEAR;                  /* CLEAR FEED BACK AREA  @Y30OE6D*/
         SLR   @15,@15                                             0080
         STCM  @15,7,RPLFDBK(AMWKAPTR)                             0080
*   RPLRTN=CLEAR;                   /* CLEAR RETURN CODE AREA      0081
*                                                            @Y30OE6D*/
*                                                                  0081
         STCM  @15,7,RPLRTN(AMWKAPTR)                              0081
*   /*****************************************************************/
*   /*                                                               */
*   /* M A I N L I N E                                       @Y30OECA*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0082
*   DO WHILE(RTNCD<EODC);           /* FIND A VALID RECORD   @Y30OE6D*/
         B     @DE00082                                            0082
@DL00082 DS    0H                                                  0083
*     RTNCD=ZERO;                   /* RESET CODE FIELD      @Y30OE6D*/
         MVI   RTNCD(AMWKAPTR),X'00'                               0083
*     IF CCWCMDCD^=NOP              /* IF NOT END OF CCW CHAIN     0084
*                                                            @Y30OE6D*/
*       THEN                        /*                       @Y30OE6D*/
         L     @15,CCWPTR-1(,AMWKAPTR)                             0084
         LA    @15,0(,@15)                                         0084
         CLI   CCWCMDCD(@15),X'03'                                 0084
         BE    @RF00084                                            0084
*       CCWPTR=CCWPTR+LENGTH(JAMCCW);/* INDEX TO NEXT CCW    @Y30OE6D*/
         AL    @15,@CF00130                                        0085
         STCM  @15,7,CCWPTR(AMWKAPTR)                              0085
*     ELSE                                                         0086
*       ;                           /*                       @Y30OE6D*/
@RF00084 DS    0H                                                  0087
*     IF CCWCMDCD=NOP               /* END OF CCW CHAIN      @Y30OE6D*/
*       THEN                        /*                       @Y30OE6D*/
         L     @15,CCWPTR-1(,AMWKAPTR)                             0087
         LA    @15,0(,@15)                                         0087
         CLI   CCWCMDCD(@15),X'03'                                 0087
         BNE   @RF00087                                            0087
*                                                                  0088
*       /*************************************************************/
*       /*                                                           */
*       /* SEGMENT(EOB)REQUEST                                       */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0088
*       DO;                                                        0088
*         GOTO EOB;                                                0089
         B     EOB                                                 0089
*EOB#:                                                             0090
*       END;                        /* GO TO THE EOB ROUTINE @Y30OE6D*/
EOB#     DS    0H                                                  0091
*     IF RTNCD=ZERO                 /* EOB CONDITION         @Y30OE6D*/
*       THEN                        /*                       @Y30OE6D*/
@RF00087 CLI   RTNCD(AMWKAPTR),0                                   0091
         BNE   @RF00091                                            0091
*       IF CCWDV=OFF                /* CHECK FOR A GOOD RECORD     0092
*                                                            @Y30OE6D*/
*         THEN                      /*                       @Y30OE6D*/
         L     @15,CCWPTR-1(,AMWKAPTR)                             0092
         LA    @15,0(,@15)                                         0092
         TM    CCWDV(@15),B'10000000'                              0092
         BNZ   @RF00092                                            0092
*         RTNCD=GOOD;               /* SET GOOD DATA FOUND IND     0093
*                                                            @Y30OE6D*/
         MVI   RTNCD(AMWKAPTR),X'7F'                               0093
*       ELSE                        /* OTHERWISE             @Y30OE6D*/
*         CCWDV=OFF;                /* RESET INVALID DATA BIT      0094
*                                                            @Y30OE6D*/
         B     @RC00092                                            0094
@RF00092 L     @15,CCWPTR-1(,AMWKAPTR)                             0094
         LA    @15,0(,@15)                                         0094
         NI    CCWDV(@15),B'01111111'                              0094
*   END;                            /*                       @Y30OE6D*/
@RC00092 DS    0H                                                  0095
@RF00091 DS    0H                                                  0095
@DE00082 CLI   RTNCD(AMWKAPTR),8                                   0095
         BL    @DL00082                                            0095
*   RPLFDBK=RPLRTN;                 /* SET RETURN CODES IN RPL     0096
*                                                            @Y30OE95*/
         MVC   RPLFDBK(3,AMWKAPTR),RPLRTN(AMWKAPTR)                0096
*   IF RTNCD=GOOD                   /* WAS A GOOD RECORD FOUND     0097
*                                                            @Y30OE6D*/
*     THEN                          /*                       @Y30OE6D*/
         CLI   RTNCD(AMWKAPTR),127                                 0097
         BNE   @RF00097                                            0097
*     DO;                           /*                       @Y30OE6D*/
*       RPLFDBK1=ZERO;              /* ZERO 1ST BYTO OF RPL RC     0099
*                                                            @Y30OE95*/
         MVI   RPLFDBK1(AMWKAPTR),X'00'                            0099
*       RPLRLEN=ACBLRECL;           /* SET LNG OF DATA IN RPL      0100
*                                                            @Y30OE6D*/
         LH    @15,ACBLRECL(,AMWKAPTR)                             0100
         ST    @15,RPLRLEN(,AMWKAPTR)                              0100
*       USERWORK=AMWORK(1:ACBLRECL);/* GIVE RECORD TO USER   @Y30OE6D*/
         L     @14,RPLAREA(,AMWKAPTR)                              0101
         MVI   USERWORK+1(@14),C' '                                0101
         MVC   USERWORK+2(126,@14),USERWORK+1(@14)                 0101
         BCTR  @15,0                                               0101
         L     @11,CCWPTR-1(,AMWKAPTR)                             0101
         LA    @11,0(,@11)                                         0101
         L     @11,CCWDATAD-1(,@11)                                0101
         LA    @11,0(,@11)                                         0101
         EX    @15,@SM00838                                        0101
*     END;                          /*                       @Y30OE6D*/
*   ELSE                            /*                       @Y30OE6D*/
*     DO;                           /*                       @Y30OE6D*/
         B     @RC00097                                            0103
@RF00097 DS    0H                                                  0104
*       RFY                                                        0104
*         R15 RSTD;                 /* RESTRICT WORK REG     @Y30OE6D*/
*       IF RTNCD=IOERR              /* IF I/O ERROR OCCURRED @Y30OE6D*/
*         THEN                      /*                       @Y30OE6D*/
         CLI   RTNCD(AMWKAPTR),12                                  0105
         BNE   @RF00105                                            0105
*         R15=EXLSYNP;              /* GET ADDR OF SYNAD EXIT      0106
*                                                            @Y30OE6D*/
         L     R15,EXLSYNP(,AMWKAPTR)                              0106
*       IF RTNCD=EODC               /* IF EOD DETECTED       @Y30OE6D*/
*         THEN                      /*                       @Y30OE6D*/
@RF00105 CLI   RTNCD(AMWKAPTR),8                                   0107
         BNE   @RF00107                                            0107
*         R15=EXLEODP;              /* GET ADDR OF EODAD EXIT      0108
*                                                            @Y30OE6D*/
         L     R15,EXLEODP(,AMWKAPTR)                              0108
*       RFY                         /*                       @Y30OE95*/
*         SAVREG RSTD;              /* RESTRICT SAVREG       @Y30OE95*/
@RF00107 DS    0H                                                  0110
*       SAVREG=ADDR(REGSAVE);       /* PTR TO REG SAVEAREA   @Y30OE95*/
         LA    SAVREG,REGSAVE(,AMWKAPTR)                           0110
*       GENERATE;                                                  0111
*                                                         /*@Y30OE6D*/
REG2DISP EQU   28                   DISP TO REG2 IN REGSAVE   @Y30OE6D
         ST    SAVREG,0(0,@13)      SAVE PTR TO MY REGS       @Y30OE95
         STM   @14,@12,0(SAVREG)    SAVE MY REGISTERS         @Y30OE95
         LM    @02,@12,REG2DISP(@13) RESTORE CALLERS REGS     @Y30OE6D
         BALR  @14,@15              GO TO CALLERS ERR ROUT    @Y30OE6D
*                                                             @Y30OE6D
*  CALLERS ERROR ROUTINE TO OPTIONALLY RETURN HERE.           @Y30OE6D
*  REGISTER 13 MUST STILL POINT TO CALLERS SAVE AREA.         @Y30OE6D
*                                                             @Y30OE6D
         STM   @02,@12,REG2DISP(@13) SAVE CALLERS REGS        @Y30OE6D
         L     SAVREG,0(@13)        SET PTR TO MY SAVE AREA   @Y30OE95
         LM    @14,@12,0(SAVREG)    RESTORE MY REGS           @Y30OE95
*       RFY                                                        0112
*         SAVREG UNRSTD;            /* UNRESTRICT SAVREG     @Y30OE95*/
*       RFY                                                        0113
*         R15 UNRSTD;               /* RELEASE REG           @Y30OE6D*/
*     END;                          /*                       @Y30OE6D*/
*/*                                  RETURN TO THE CALLER    @Y30OE6D*/
*                                                                  0115
*                                                                  0115
*/********************************************************** @Y30OECA*/
*/* END OF BLOCK ROUTINE - ENTERED WHEN ALL DATA RECORDS IN  @Y30OECA*/
*/* THE LAST BLOCK HAVE BEEN PASSED TO THE USER AND THE NEXT @Y30OECA*/
*/* RECORD IS REQUESTED.  THE IOB SEEK CYLINDER IS COMPARED  @Y30OECA*/
*/* WITH THE DEB EOD CYLINDER ADDRESS (SET BY SETDISKT) TO   @Y30OECA*/
*/* DETERMINE IF END OF DATA HAS BEEN REACHED.  IF SO, THE   @Y30OECA*/
*/* END OF DATA ROUTINE IS CALLED.  IF NOT, THE IOB SEEK     @Y30OECA*/
*/* CYLINDER IS UPDATED (BY 2 TO BYPASS THE CYLINDER BEING   @Y30OECA*/
*/* READ BY THE OTHER IOB) AND THE CCW CHAIN IS SHORTENED IF @Y30OECA*/
*/* THE LAST CYLINDER OF THE DATA SET IS TO BE READ AND IS   @Y30OECA*/
*/* NOT COMPLETE.  THE DEB EOD ADDRESS INDICATES THE NUMBER  @Y30OECA*/
*/* OF RECORDS TO BE READ, N, AND THE (N+1)TH READ CCW IS    @Y30OECA*/
*/* EXCHANGED WITH THE FINAL NOP CCW.  (SETDISKT EOV OR      @Y30OECA*/
*/* CLOSE PROCESSING WILL RECONSTRUCT THE CCW CHAIN.)  EXCP  @Y30OECA*/
*/* IS THEN ISSUED ON THE IOB.                               @Y30OECA*/
*/* THE JAMBUFR IOB POINTER IS NEXT SWITCHED TO THE OTHER    @Y30OECA*/
*/* IOB AND WAIT IS ISSUED ON ITS ECB.  THE ECB COMPLETION   @Y30OECA*/
*/* CODE IS TESTED AND THE RPL FEED BACK CODE IS SET.        @Y30OECA*/
*/* THE JAMBUFR CCW POINTER IS SWITCHED TO THE FIRST READ    @Y30OECA*/
*/* CCW ASSOCIATED WITH THE NEW IOB.                         @Y30OECA*/
*/*                                                          @Y30OECA*/
*/********************************************************** @Y30OECA*/
*                                                                  0115
*                                                                  0115
*   /*****************************************************************/
*   /*                                                               */
*   /* SEGMENT(EOB)START                                             */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0115
*   DO;                                                            0115
@RC00097 DS    0H                                                  0116
*     GOTO EOB@;                                                   0116
         B     EOB@                                                0116
*EOB:                                                              0117
*   END;                            /* START OF EOB SUBROUTINE     0117
*                                                            @Y30OE6D*/
EOB      DS    0H                                                  0118
*   IF IOBSKTT=AMWEODTT THEN        /* END OF DATA ?         @Y30OE95*/
*                                                                  0118
         L     @15,IOBPTR-1(,AMWKAPTR)                             0118
         LA    @15,0(,@15)                                         0118
         CLC   IOBSKTT(1,@15),AMWEODTT(AMWKAPTR)                   0118
         BNE   @RF00118                                            0118
*     /***************************************************************/
*     /*                                                             */
*     /* SEGMENT(EOD)REQUEST                                         */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0119
*     DO;                                                          0119
*       GOTO EOD;                                                  0120
         B     EOD                                                 0120
*EOD#:                                                             0121
*     END;                          /* GO TO EOD SUBROUTINE  @Y30OE6D*/
*   ELSE                                                           0122
*     DO;                           /*                       @Y30OECA*/
         B     @RC00118                                            0122
@RF00118 DS    0H                                                  0123
*       IOBSKTT=IOBSKTT+IOBNO;      /* SEEK NEXT CYL.        @Y30OECA*/
         L     @15,IOBPTR-1(,AMWKAPTR)                             0123
         LA    @15,0(,@15)                                         0123
         SLR   @00,@00                                             0123
         IC    @00,IOBSKTT(,@15)                                   0123
         SLR   @14,@14                                             0123
         IC    @14,IOBNO(,AMWKAPTR)                                0123
         ALR   @00,@14                                             0123
         STC   @00,IOBSKTT(,@15)                                   0123
*       IF IOBSKTT>AMWEODTT THEN                                   0124
         CLC   IOBSKTT(1,@15),AMWEODTT(AMWKAPTR)                   0124
         BH    @RT00124                                            0124
*         ;                         /* WAIT FINAL I/O        @Y30OE95*/
*       ELSE                                                       0126
*         DO;                       /* SET UP NEXT I/O       @Y30OECA*/
*           IF IOBSKTT^<AMWEODTT THEN/* LAST CYL             @Y30OE95*/
         L     @15,IOBPTR-1(,AMWKAPTR)                             0127
         LA    @15,0(,@15)                                         0127
         CLC   IOBSKTT(1,@15),AMWEODTT(AMWKAPTR)                   0127
         BL    @RF00127                                            0127
*             DO;                   /* SHORTEN CCW CHAIN     @Y30OECA*/
*               IF AMWEODSS^=LASTREC/* IF LAST TRACK IS A    @Y30OE95*/
*                 THEN              /* FULL TRACK READ,      @Y30OE6D*/
         CLI   AMWEODSS(AMWKAPTR),26                               0129
         BE    @RF00129                                            0129
*                 DO;               /* DON'T SWAP CCW'S      @Y30OE6D*/
*                   RFY                                            0131
*                     CCWREG RSTD;  /* RESTRICT REG          @Y30OE6D*/
*                   CCWREG=IOBSTART+(FACTOR2*LENGTH(JAMCCW))+/*    0132
*                                                            @Y30OE6D*/
*                       (LENGTH(JAMCCW)*AMWEODSS);/*         @Y30OE95*/
         L     @15,IOBSTART(,@15)                                  0132
         LA    CCWREG,16                                           0132
         ALR   CCWREG,@15                                          0132
         SLR   @00,@00                                             0132
         IC    @00,AMWEODSS(,AMWKAPTR)                             0132
         SLA   @00,3                                               0132
         ALR   CCWREG,@00                                          0132
*                   SOMECCW=SOMECCW&&NOPCCW;/* SWAP          @Y30OE6D*/
         AL    @15,@CF00812                                        0133
         XC    SOMECCW(8,CCWREG),NOPCCW(@15)                       0133
*                   NOPCCW=NOPCCW&&SOMECCW;/* NOP            @Y30OE6D*/
         XC    NOPCCW(8,@15),SOMECCW(CCWREG)                       0134
*                   SOMECCW=SOMECCW&&NOPCCW;/* CCW           @Y30OE6D*/
         XC    SOMECCW(8,CCWREG),NOPCCW(@15)                       0135
*/*                             AT CURRENT END OF CCW CHAIN  @Y30OE6D*/
*                                                                  0136
*                   RFY                                            0136
*                     CCWREG UNRSTD;/* RELEASE REG           @Y30OE6D*/
*                 END;              /*                       @Y30OE6D*/
*             END;                  /*                       @Y30OE6D*/
@RF00129 DS    0H                                                  0139
*           ECB=ECB&&ECB;           /* CLEAR ECB             @Y30OE6D*/
@RF00127 L     @15,IOBPTR-1(,AMWKAPTR)                             0139
         LA    @15,0(,@15)                                         0139
         L     @14,IOBECBPB-1(,@15)                                0139
         LA    @14,0(,@14)                                         0139
         XC    ECB(4,@14),ECB(@14)                                 0139
*           IOREG=IOBPTR;           /* GET POINTER TO IOB    @Y30OE6D*/
         LR    IOREG,@15                                           0140
*           GEN;                                                   0141
*                                      /* GEN READ I/O CODE @Y30OE6D*/
                        EXCP (IOREG)      READ RECORD         @Y30OE6D
*         END;                      /*                       @Y30OECA*/
*       IOBPTR=IOBNIOBB+LENGTH(IOBORG01);/* FLIP             @Y30OE6D*/
@RT00124 LA    @15,16                                              0143
         L     @14,IOBPTR-1(,AMWKAPTR)                             0143
         LA    @14,0(,@14)                                         0143
         SLR   @14,@15                                             0143
         LA    @00,8                                               0143
         L     @14,IOBNIOBB-1(,@14)                                0143
         LA    @14,0(,@14)                                         0143
         ALR   @00,@14                                             0143
         STCM  @00,7,IOBPTR(AMWKAPTR)                              0143
*/*                                       TO THE OTHER IOB   @Y30OE6D*/
*                                                                  0144
*       CCWPTR=IOBSTART+            /* POINT TO READ CCW     @Y30OE6D*/
*           (FACTOR2*LENGTH(JAMCCW));/*                      @Y30OE6D*/
         LR    @14,@00                                             0144
         AL    @15,IOBSTART(,@14)                                  0144
         STCM  @15,7,CCWPTR(AMWKAPTR)                              0144
*       IOREG=IOBECBPB;             /* GET ADDR OF ECB       @Y30OE6D*/
         LR    @15,@00                                             0145
         L     @15,IOBECBPB-1(,@15)                                0145
         LA    @15,0(,@15)                                         0145
         LR    IOREG,@15                                           0145
*       IF ECBCOMP^=ON              /* IS ECB ALREADY POSTED @Y30OE6D*/
*         THEN                      /* NO, ISSUE WAIT        @Y30OE6D*/
         TM    ECBCOMP(@15),B'01000000'                            0146
         BO    @RF00146                                            0146
*         GEN;                                                     0147
*                                 /* GEN WAIT I/O CODE      @Y30OE6D*/
                 WAIT ECB=(IOREG)    WAIT FOR COMPLETITION    @Y30OE6D
*         IF ECBSTAT^=GOOD THEN     /* ANY I/O ERRORS?       @Y30OECA*/
@RF00146 L     @15,IOBPTR-1(,AMWKAPTR)                             0148
         LA    @15,0(,@15)                                         0148
         L     @15,IOBECBPB-1(,@15)                                0148
         LA    @15,0(,@15)                                         0148
         CLI   ECBSTAT(@15),X'7F'                                  0148
         BE    @RF00148                                            0148
*           DO;                     /*                       @Y30OEAC*/
*             RTNCD=IOERR;          /* SET ERROR CODE        @Y30OECA*/
         MVI   RTNCD(AMWKAPTR),X'0C'                               0150
*             CNDCD1=CNDCODE;       /* SET CONDITION CODE 1  @Y30OEAC*/
         MVI   CNDCD1(AMWKAPTR),X'04'                              0151
*           END;                    /*                       @Y30OEAC*/
*     END;                          /*                       @Y30OECA*/
*                                                                  0153
@RF00148 DS    0H                                                  0154
*   /*****************************************************************/
*   /*                                                               */
*   /* SEGMENT(EOB)FINISH                                            */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0154
*   DO;                                                            0154
@RC00118 DS    0H                                                  0155
*     GOTO EOB#;                                                   0155
         B     EOB#                                                0155
*EOB@:                                                             0156
*   END;                            /* END OF EOB SUBROUTINE @Y30OE6D*/
EOB@     DS    0H                                                  0157
*                                                                  0157
*/********************************************************** @Y30OECA*/
*/* END OF DATA ROUTINE - ENTERED WHEN THE LAST RECORD OF    @Y30OECA*/
*/* THE DATA SET ON THE CURRENTLY MOUNTED DISKETTE HAS BEEN  @Y30OECA*/
*/* PASSED TO THE USER.  IF THE DATA SET CONTINUES ON THE    @Y30OECA*/
*/* NEXT DISKETTE, SETDISKT IS ISSUED TO CLOSE THE CURRENT   @Y30OECA*/
*/* DISKETTE AND OPEN THE NEXT ONE.  THE RPL FEED BACK AREA  @Y30OECA*/
*/* IS USED TO INDICATE THE EODAD EXIT SHOULD BE TAKEN OR    @Y30OECA*/
*/* THAT PROCESSING WILL CONTINUE WITH THE NEXT VOLUME.      @Y30OECA*/
*/* THE SETDISKT PARAMETER LIST IS BUILT IN THE JAMBUFR      @Y30OECA*/
*/* WORKA FIELD TO INSURE REENTRANCY                         @Y30OECA*/
*/********************************************************** @Y30OECA*/
*                                                                  0157
*   /*****************************************************************/
*   /*                                                               */
*   /* SEGMENT(EOD)START                                             */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0157
*   DO;                                                            0157
*     GOTO EOD@;                                                   0158
         B     EOD@                                                0158
*EOD:                                                              0159
*   END;                            /* START OF EOD SUBROUTINE     0159
*                                                            @Y30OE6D*/
EOD      DS    0H                                                  0160
*   IF AMWMULTI='1'B THEN           /* MULTI-VOLUME FILE ?   @Y30OE95*/
         TM    AMWMULTI(AMWKAPTR),B'10000000'                      0160
         BNO   @RF00160                                            0160
*     DO;                           /* SET UP SETDISK PARMS  @Y30OECA*/
*       SETDOPCD=EOV;               /* EOV OP CODE           @Y30OE95*/
         MVI   SETDOPCD(AMWKAPTR),X'02'                            0162
*       SETDDCB=DCBPTR;             /* PTR TO DCB            @Y30OEAC*/
         ST    DCBPTR,SETDDCB(,AMWKAPTR)                           0163
*       SETDDSID=AMWDSID;           /* PUT IN DATA SET NAME  @Y30OE95*/
         MVC   SETDDSID(8,AMWKAPTR),AMWDSID(AMWKAPTR)              0164
*       SDTPLPTR=ADDR(SETDLIST);    /* POINT TO LIST         @Y30OE95*/
         LA    SDTPLPTR,SETDLIST(,AMWKAPTR)                        0165
*       RFY                                                        0166
*         R13 RSTD;                 /* RESTRICT REGISTER     @Y30OEAC*/
*       R13SAVE=R13;                /* SAVE REG SAVE AREA PTR      0167
*                                                            @Y30OEAC*/
         ST    R13,R13SAVE(,AMWKAPTR)                              0167
*       R13=ADDR(REGSAVE);          /* GET REG SAV AREA ADDR @Y30OEAC*/
         LA    R13,REGSAVE(,AMWKAPTR)                              0168
*       CALL IOESDKTI;              /* GO TO DO EOV PROCESS  @Y30OE95*/
         L     @15,@CV00814                                        0169
         BALR  @14,@15                                             0169
*       R13=R13SAVE;                /* RESTORE SAVE AREA PTR @Y30OEAC*/
         L     R13,R13SAVE(,AMWKAPTR)                              0170
*       RFY                                                        0171
*         R13 UNRSTD;               /* RELEASE REGISTER      @Y30OEAC*/
*       IF ERTNCDE=ZERO             /* GOOD EOV ?            @Y30OE6D*/
*         THEN                      /*                       @Y30OE6D*/
         CLI   ERTNCDE(AMWKAPTR),0                                 0172
         BNE   @RF00172                                            0172
*         DO;                       /* CONTINUE              @Y30OE95*/
*           RTNCD=EOVC;             /* YES, SET GOOD EOV IND @Y30OE6D*/
         MVI   RTNCD(AMWKAPTR),X'01'                               0174
*           CNDCD1=EOVCODE;         /* INDICATE EOV FEED     @ZA04466*/
         MVI   CNDCD1(AMWKAPTR),X'10'                              0175
*         END;                      /* END OF DO             @Y30OE95*/
*       ELSE                        /*                       @Y30OE6D*/
*         IF ERTNCDE=IOCODE         /* IF I/O ERROR OCCURRED @Y30OE6D*/
*           THEN                    /*                       @Y30OE6D*/
         B     @RC00172                                            0177
@RF00172 CLI   ERTNCDE(AMWKAPTR),16                                0177
         BNE   @RF00177                                            0177
*           DO;                     /*                       @Y30OE95*/
*             RTNCD=IOERR;          /* YES, SET I/O ERR IND  @Y30OE6D*/
         MVI   RTNCD(AMWKAPTR),X'0C'                               0179
*             CNDCD1=ERTNCDQL;      /* SET CONDITION CODE 1  @Y30OE78*/
         MVC   CNDCD1(1,AMWKAPTR),ERTNCDQL(AMWKAPTR)               0180
*           END;                    /* END OF DO             @Y30OE95*/
*         ELSE                      /*                       @Y30OE6D*/
*           DO;                     /*                       @Y30OE6D*/
         B     @RC00177                                            0182
@RF00177 DS    0H                                                  0183
*             RTNCD=EODC;           /* EOD OCCURRED, SET INDS      0183
*                                                            @Y30OE6D*/
         MVI   RTNCD(AMWKAPTR),X'08'                               0183
*             CNDCD1=EOVERR;        /* SET CONDITION CODE 1  @ZA04466*/
         MVI   CNDCD1(AMWKAPTR),X'14'                              0184
*             IF ERTNCDE=EOVERR     /* IF DSKT ENCOUNTERED   @Y30OE6D*/
*               THEN                /*                       @Y30OE6D*/
         CLI   ERTNCDE(AMWKAPTR),20                                0185
         BNE   @RF00185                                            0185
*               CNDCD2=CNDCODE;     /* SET CONDITION CODE 2  @Y30OE6D*/
         MVI   CNDCD2(AMWKAPTR),X'04'                              0186
*           END;                    /*                       @Y30OE6D*/
*     END;                          /*                       @Y30OE6D*/
*   ELSE                            /*                       @Y30OE6D*/
*     RTNCD=EODC;                   /* SET EOD INDICATOR     @Y30OE6D*/
*                                                                  0189
         B     @RC00160                                            0189
@RF00160 MVI   RTNCD(AMWKAPTR),X'08'                               0189
*   /*****************************************************************/
*   /*                                                               */
*   /* SEGMENT(EOD)FINISH                                            */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0190
*   DO;                                                            0190
@RC00160 DS    0H                                                  0191
*     GOTO EOD#;                                                   0191
         B     EOD#                                                0191
*EOD@:                                                             0192
*   END;                            /* END OF EOD SUBROUTINE @Y30OE6D*/
*   END IOEDKGET                    /* END OF MODULE         @Y30OE95*/
*                                                                  0193
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (IEZIOB  )                                       */
*/*%INCLUDE SYSLIB  (IHADCBDF)                                       */
*/*%INCLUDE SYSLIB  (IHADCB  )                                       */
*                                                                  0193
*       ;                                                          0193
@EL00001 DS    0H                                                  0193
@EF00001 DS    0H                                                  0193
@ER00001 LM    @14,@12,12(@13)                                     0193
         BR    @14                                                 0193
@DATA    DS    0H
@SM00838 MVC   USERWORK(0,@14),AMWORK(@11)
@DATD    DSECT
         DS    0F
IOEDKGET CSECT
         DS    0F
@CF00130 DC    F'8'
@CF00812 DC    F'224'
@DATD    DSECT
         DS    0D
IOBPRPTR DS    A
IOBSTPTR DS    A
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
IOEDKGET CSECT
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
@CV00814 DC    V(IOESDKTI)
@CV00813 DC    V(IOEDKMSG)
         DS    0D
MT3540AR DC    CL80' '
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
DCBPTR   EQU   @07
IOREG    EQU   @01
REG1     EQU   @01
SDTPLPTR EQU   @01
AMWKAPTR EQU   @06
CCWREG   EQU   @08
SAVREG   EQU   @09
R13      EQU   @13
R15      EQU   @15
IOBPREFX EQU   0
IOBCFLG1 EQU   IOBPREFX
IOBSTDRD EQU   0
IOBFLAG1 EQU   IOBSTDRD
IOBCYCCK EQU   IOBFLAG1
IOBRSTRT EQU   IOBFLAG1
IOBFLAG2 EQU   IOBSTDRD+1
IOBPURGE EQU   IOBFLAG2
IOBRDHA0 EQU   IOBFLAG2
IOBSENS0 EQU   IOBSTDRD+2
IOBS0B7  EQU   IOBSENS0
IOBSENS1 EQU   IOBSTDRD+3
IOBECBPT EQU   IOBSTDRD+4
IOBECBPB EQU   IOBECBPT+1
IOBFLAG3 EQU   IOBSTDRD+8
IOBFL3   EQU   IOBFLAG3
IOBCSW   EQU   IOBSTDRD+9
IOBIOCSW EQU   IOBCSW
IOBSTART EQU   IOBSTDRD+16
IOBDCBPT EQU   IOBSTDRD+20
IOBFLAG4 EQU   IOBDCBPT
IOBRESTR EQU   IOBSTDRD+24
IOBINCAM EQU   IOBSTDRD+28
IOBBTAMF EQU   IOBINCAM
IHADCB   EQU   0
IHADCS00 EQU   0
DCBFDAD  EQU   IHADCS00+5
IHADCS01 EQU   0
DCBDVTBL EQU   IHADCS01
IHADCS11 EQU   0
DCBRELB  EQU   IHADCS11
DCBREL   EQU   DCBRELB+1
DCBBUFCB EQU   IHADCS11+4
DCBDSORG EQU   IHADCS11+10
DCBDSRG1 EQU   DCBDSORG
DCBDSRG2 EQU   DCBDSORG+1
DCBIOBAD EQU   IHADCS11+12
DCBODEB  EQU   DCBIOBAD
DCBLNP   EQU   DCBODEB
DCBQSLM  EQU   DCBLNP
DCBIOBAA EQU   DCBODEB+1
IHADCS50 EQU   0
DCBSVCXL EQU   IHADCS50
DCBEODAD EQU   IHADCS50+4
DCBBFALN EQU   DCBEODAD
DCBHIARC EQU   DCBBFALN
DCBBFTEK EQU   DCBHIARC
DCBBFT   EQU   DCBBFTEK
DCBEXLST EQU   IHADCS50+8
DCBRECFM EQU   DCBEXLST
DCBRECLA EQU   DCBRECFM
IHADCS24 EQU   0
DCBOFLGS EQU   IHADCS24+8
DCBOFLWR EQU   DCBOFLGS
DCBIFLG  EQU   IHADCS24+9
DCBMACR  EQU   IHADCS24+10
DCBMACR1 EQU   DCBMACR
DCBMRFE  EQU   DCBMACR1
DCBMRGET EQU   DCBMRFE
DCBMRAPG EQU   DCBMACR1
DCBMRRD  EQU   DCBMRAPG
DCBMRCI  EQU   DCBMACR1
DCBMRMVG EQU   DCBMRCI
DCBMRLCG EQU   DCBMACR1
DCBMRABC EQU   DCBMACR1
DCBMRPT1 EQU   DCBMRABC
DCBMRSBG EQU   DCBMRPT1
DCBMRCRL EQU   DCBMACR1
DCBMRCHK EQU   DCBMRCRL
DCBMRRDX EQU   DCBMRCHK
DCBMRDMG EQU   DCBMACR1
DCBMACR2 EQU   DCBMACR+1
DCBMRPUT EQU   DCBMACR2
DCBMRWRT EQU   DCBMACR2
DCBMRMVP EQU   DCBMACR2
DCBMR5WD EQU   DCBMACR2
DCBMRLDM EQU   DCBMR5WD
DCBMRLCP EQU   DCBMRLDM
DCBMR4WD EQU   DCBMACR2
DCBMRPT2 EQU   DCBMR4WD
DCBMRTMD EQU   DCBMRPT2
DCBMR3WD EQU   DCBMACR2
DCBMRCTL EQU   DCBMR3WD
DCBMRSTK EQU   DCBMRCTL
DCBMR1WD EQU   DCBMACR2
DCBMRSWA EQU   DCBMR1WD
DCBMRDMD EQU   DCBMRSWA
IHADCS25 EQU   0
DCBMACRF EQU   IHADCS25+2
DCBMACF1 EQU   DCBMACRF
DCBMFFE  EQU   DCBMACF1
DCBMFGET EQU   DCBMFFE
DCBMFAPG EQU   DCBMACF1
DCBMFRD  EQU   DCBMFAPG
DCBMFCI  EQU   DCBMACF1
DCBMFMVG EQU   DCBMFCI
DCBMFLCG EQU   DCBMACF1
DCBMFABC EQU   DCBMACF1
DCBMFPT1 EQU   DCBMFABC
DCBMFSBG EQU   DCBMFPT1
DCBMFCRL EQU   DCBMACF1
DCBMFCHK EQU   DCBMFCRL
DCBMFDMG EQU   DCBMACF1
DCBMACF2 EQU   DCBMACRF+1
DCBMFPUT EQU   DCBMACF2
DCBMFWRT EQU   DCBMACF2
DCBMFMVP EQU   DCBMACF2
DCBMF5WD EQU   DCBMACF2
DCBMFLDM EQU   DCBMF5WD
DCBMFLCP EQU   DCBMFLDM
DCBMF4WD EQU   DCBMACF2
DCBMFPT2 EQU   DCBMF4WD
DCBMFTMD EQU   DCBMFPT2
DCBMF3WD EQU   DCBMACF2
DCBMFCTL EQU   DCBMF3WD
DCBMFSTK EQU   DCBMFCTL
DCBMF1WD EQU   DCBMACF2
DCBMFSWA EQU   DCBMF1WD
DCBMFDMD EQU   DCBMFSWA
DCBDEBAD EQU   IHADCS25+4
DCBIFLGS EQU   DCBDEBAD
IHADCS26 EQU   0
DCBWRITE EQU   IHADCS26
DCBREAD  EQU   DCBWRITE
DCBWRITA EQU   DCBREAD+1
IHADCS27 EQU   0
DCBGET   EQU   IHADCS27
DCBPUT   EQU   DCBGET
DCBGETA  EQU   DCBPUT+1
IHADCS36 EQU   0
DCBGERR  EQU   IHADCS36
DCBPERR  EQU   DCBGERR
DCBCHECK EQU   DCBPERR
DCBOPTCD EQU   DCBCHECK
DCBOPTH  EQU   DCBOPTCD
DCBOPTO  EQU   DCBOPTH
DCBOPTZ  EQU   DCBOPTCD
DCBGERRA EQU   DCBCHECK+1
DCBPERRA EQU   DCBGERRA
DCBSYNAD EQU   IHADCS36+4
DCBCIND1 EQU   IHADCS36+8
DCBCIND2 EQU   IHADCS36+9
DCBIOBA  EQU   IHADCS36+16
DCBCICB  EQU   DCBIOBA
IHADCS52 EQU   0
DCBDIRCT EQU   IHADCS52
DCBQSWS  EQU   DCBDIRCT
DCBUSASI EQU   DCBQSWS
DCBQADFS EQU   DCBUSASI
DCBBUFOF EQU   DCBDIRCT+1
IHADCS37 EQU   0
DCBFLAG1 EQU   IHADCS37
IHADCS38 EQU   0
DCBEOBR  EQU   IHADCS38
DCBPOINT EQU   IHADCS38+12
DCBCNTRL EQU   DCBPOINT
IHADCS40 EQU   0
DCBEOBAD EQU   IHADCS40
DCBCCCW  EQU   IHADCS40+4
DCBRECAD EQU   DCBCCCW
DCBRECBT EQU   DCBRECAD
DCBRCREL EQU   DCBRECBT
@NM00025 EQU   IHADCS40+12
DCBEROPT EQU   @NM00025
AMWORKAR EQU   0
JAMWKAR  EQU   AMWORKAR+4
IOBNO    EQU   JAMWKAR
IOBPTR   EQU   JAMWKAR+1
CCWPTR   EQU   JAMWKAR+5
WORKAREA EQU   JAMWKAR+16
REGSAVE  EQU   WORKAREA+28
AMW3540E EQU   AMWORKAR+120
AMWEAMFG EQU   AMW3540E+3
AMWMULTI EQU   AMWEAMFG
AMWDSID  EQU   AMW3540E+4
AMWEOD   EQU   AMW3540E+12
AMWBOE   EQU   AMWEOD
AMWEODRV EQU   AMWBOE
AMWEODTT EQU   AMWBOE+1
AMWEOD0  EQU   AMWBOE+2
AMWEODSS EQU   AMWBOE+3
ACB35EXT EQU   AMWORKAR+136
ACB35IND EQU   ACB35EXT+22
ACBLRECL EQU   AMWORKAR+162
EXLIST   EQU   AMWORKAR+164
EXLSYNP  EQU   EXLIST
EXLEODP  EQU   EXLIST+4
RPLFIELD EQU   AMWORKAR+172
RPLRLEN  EQU   RPLFIELD
RPLAREA  EQU   RPLFIELD+4
PRLOPTBT EQU   RPLFIELD+8
RPLFDBK  EQU   RPLFIELD+9
RPLFDBK1 EQU   RPLFDBK
SETDLIST EQU   AMWORKAR+184
SETDOPCD EQU   SETDLIST
SETDRTNC EQU   SETDLIST+2
ERTNCDE  EQU   SETDRTNC
ERTNCDQL EQU   SETDRTNC+1
SETDDCB  EQU   SETDLIST+4
SETDDSID EQU   SETDLIST+8
SETDWORK EQU   AMWORKAR+200
R13SAVE  EQU   SETDWORK+396
JAMCCW   EQU   0
CCWCMDCD EQU   JAMCCW
CCWDATAD EQU   JAMCCW+1
CCWFLAGS EQU   JAMCCW+4
SOMECCW  EQU   0
NOPCCW   EQU   0
USERWORK EQU   0
AMWORK   EQU   0
ECB      EQU   0
ECBSTAT  EQU   ECB
ECBCOMP  EQU   ECBSTAT
IOBORG01 EQU   IOBPREFX+8
IOBNIOBA EQU   IOBORG01
IOBNFLG1 EQU   IOBNIOBA
IOBNIOBB EQU   IOBNIOBA+1
IOBORG02 EQU   IOBPREFX+8
IOBDQADA EQU   IOBORG02
IOBDEQIN EQU   IOBDQADA
IOBORG03 EQU   IOBPREFX+12
IOBORG04 EQU   IOBINCAM
IOBORG12 EQU   IOBINCAM
IOBFL4   EQU   IOBORG12
IOBEXTEN EQU   IOBSTDRD+32
IOBSEEK  EQU   IOBEXTEN
IOBBB    EQU   IOBSEEK+1
IOBCC    EQU   IOBSEEK+3
IOBHH    EQU   IOBSEEK+5
IOBORG05 EQU   IOBEXTEN
IOBORG06 EQU   IOBEXTEN
IOBNXTPT EQU   IOBORG06+4
IOBSTATA EQU   IOBNXTPT
IOBORG07 EQU   IOBEXTEN+8
W1IEXTEN EQU   IOBORG07
IOBORG08 EQU   IOBEXTEN+8
IOBINDCT EQU   IOBORG08+4
IOBUNSQR EQU   IOBORG08+5
IOBFCHAD EQU   IOBORG08+8
IOBORG09 EQU   IOBEXTEN+8
IOBDPLAD EQU   IOBORG09+4
IOBDTYPE EQU   IOBORG09+8
IOBDTYP2 EQU   IOBORG09+9
IOBDSTAT EQU   IOBORG09+10
IOBSTAT1 EQU   IOBDSTAT
IOBORG10 EQU   IOBEXTEN+8
IOBSEEK2 EQU   IOBORG10
IOBORG11 EQU   IOBEXTEN
IOBERCT  EQU   IOBORG11
IOBUCBXV EQU   IOBERCT
IOBNAME  EQU   IOBORG11+4
IOBORG13 EQU   IOBEXTEN
IOBSKADR EQU   IOBORG13
IOBSKTT  EQU   IOBSKADR+1
DCBAMWRK EQU   DCBIOBAD
@NM00040 EQU   DCBAMWRK
DCBAMWKA EQU   DCBAMWRK+1
GETPUTWK EQU   WORKAREA
SWITCH0  EQU   GETPUTWK
RPLRTN   EQU   GETPUTWK+1
RTNCD    EQU   RPLRTN
CNDCD1   EQU   RPLRTN+1
CNDCD2   EQU   RPLRTN+2
CCWOP    EQU   CCWCMDCD
CCWDV    EQU   CCWOP
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
DFNOPS   EQU   GETPUTWK+8
@NM00043 EQU   GETPUTWK+4
@NM00042 EQU   SWITCH0
PARM     EQU   SWITCH0
DCBAMOUT EQU   @NM00040
DCBAMIN  EQU   @NM00040
DCB3540A EQU   @NM00040
@NM00041 EQU   @NM00040
IOBSKSS  EQU   IOBSKADR+3
IOBSK0   EQU   IOBSKADR+2
IOBSKRV  EQU   IOBSKADR
IOBCSWSV EQU   IOBORG11+17
IOBSENSV EQU   IOBORG11+16
IOBRCD   EQU   IOBORG11+12
IOBMDREC EQU   IOBORG11+8
IOBNAMEA EQU   IOBNAME+1
IOBNAMSZ EQU   IOBNAME
IOBERCTA EQU   IOBERCT+1
IOBRTYPE EQU   IOBUCBXV
IOBRDCHP EQU   IOBORG10+20
IOBNEXTA EQU   IOBORG10+16
IOBREADA EQU   IOBORG10+12
IOBBUFC  EQU   IOBORG10+8
IOBSK2R  EQU   IOBSEEK2+7
IOBSK2HH EQU   IOBSEEK2+5
IOBSK2CC EQU   IOBSEEK2+3
IOBSK2BB EQU   IOBSEEK2+1
IOBSK2M  EQU   IOBSEEK2
IOBCHNPR EQU   IOBORG09+40
IOBDNCRF EQU   IOBORG09+32
IOBRSV35 EQU   IOBORG09+24
IOBDQPTR EQU   IOBORG09+20
IOBRSV34 EQU   IOBORG09+18
IOBDBYTN EQU   IOBORG09+16
IOBDCPND EQU   IOBORG09+12
IOBSTAT2 EQU   IOBDSTAT+1
IOBSIORT EQU   IOBSTAT1
IOBADDVU EQU   IOBSTAT1
IOBBUFF  EQU   IOBSTAT1
IOBENQUE EQU   IOBSTAT1
IOBPASS2 EQU   IOBSTAT1
IOBSYNCH EQU   IOBSTAT1
IOBNEWVL EQU   IOBSTAT1
IOBABNRM EQU   IOBSTAT1
IOBRELEX EQU   IOBDTYP2
IOBADDTY EQU   IOBDTYP2
IOBTYPE  EQU   IOBDTYP2
IOBRQUST EQU   IOBDTYP2
IOBSUFFX EQU   IOBDTYP2
IOBSBLKL EQU   IOBDTYP2
IOBSKEY  EQU   IOBDTYP2
IOBRELBL EQU   IOBDTYPE
IOBRDEXC EQU   IOBDTYPE
IOBDYNBF EQU   IOBDTYPE
IOBACTAD EQU   IOBDTYPE
IOBFDBCK EQU   IOBDTYPE
IOBEXTSC EQU   IOBDTYPE
IOBOVFLO EQU   IOBDTYPE
IOBVERFY EQU   IOBDTYPE
IOBDPLB  EQU   IOBDPLAD+1
IOBDAYLI EQU   IOBDPLAD
IOBDIOBS EQU   IOBORG09+2
IOBDBYTR EQU   IOBORG09
IOBBCHAD EQU   IOBORG08+12
IOBFCHNB EQU   IOBFCHAD+1
IOBCOUNT EQU   IOBFCHAD
IOBASYN  EQU   IOBORG08+7
IOBAPP   EQU   IOBORG08+6
IOBRSV32 EQU   IOBUNSQR
IOBRSV31 EQU   IOBUNSQR
IOBRSV30 EQU   IOBUNSQR
IOBKNRWR EQU   IOBUNSQR
IOBKNWR  EQU   IOBUNSQR
IOBNTAV2 EQU   IOBUNSQR
IOBNTAV1 EQU   IOBUNSQR
IOBCPBSY EQU   IOBUNSQR
IOBCHNNL EQU   IOBINDCT
IOBRSV29 EQU   IOBINDCT
IOBRSV28 EQU   IOBINDCT
IOBRSV27 EQU   IOBINDCT
IOBKEYAD EQU   IOBINDCT
IOBOVPTR EQU   IOBINDCT
IOBUNSCH EQU   IOBINDCT
IOBDEQCP EQU   IOBINDCT
IOBCCWAD EQU   IOBORG08
W1OEXTEN EQU   W1IEXTEN
IOBCCW   EQU   IOBORG06+8
IOBNXTPB EQU   IOBNXTPT+1
IOBRSV26 EQU   IOBSTATA
IOBRSV25 EQU   IOBSTATA
IOBRSV24 EQU   IOBSTATA
IOBRSV23 EQU   IOBSTATA
IOBRSV22 EQU   IOBSTATA
IOBRSV21 EQU   IOBSTATA
IOBRSV20 EQU   IOBSTATA
IOBAVLFL EQU   IOBSTATA
IOBRSV37 EQU   IOBORG06+1
IOBUCBXG EQU   IOBORG06
IOBCPA   EQU   IOBORG05+32
IOBERINF EQU   IOBORG05+16
IOBERCCW EQU   IOBORG05+8
IOBSNDPT EQU   IOBORG05+7
IOBRCVPT EQU   IOBORG05+6
IOBWORK  EQU   IOBORG05+1
IOBUCBX  EQU   IOBORG05
IOBR     EQU   IOBSEEK+7
IOBHH2   EQU   IOBHH+1
IOBHH1   EQU   IOBHH
IOBCC2   EQU   IOBCC+1
IOBCC1   EQU   IOBCC
IOBBB2   EQU   IOBBB+1
IOBBB1   EQU   IOBBB
IOBM     EQU   IOBSEEK
IOBRSV46 EQU   IOBFL4
IOBRSV47 EQU   IOBFL4
IOBENT   EQU   IOBFL4
IOBEQP   EQU   IOBFL4
IOBBUS   EQU   IOBFL4
IOBDCK   EQU   IOBFL4
IOBREJ   EQU   IOBFL4
IOBOVR   EQU   IOBFL4
IOBCRILC EQU   IOBORG04+1
IOBCRDCC EQU   IOBORG04
IOBGQECB EQU   IOBORG03
IOBSWAP  EQU   IOBORG02+4
IOBDQADB EQU   IOBDQADA+1
IOBRSV13 EQU   IOBDEQIN
IOBRSV12 EQU   IOBDEQIN
IOBRSV11 EQU   IOBDEQIN
IOBRSV10 EQU   IOBDEQIN
IOBRSV09 EQU   IOBDEQIN
IOBRSV08 EQU   IOBDEQIN
IOBRSV07 EQU   IOBDEQIN
IOBDEQ   EQU   IOBDEQIN
IOBNECB  EQU   IOBORG01+4
IOBFIRST EQU   IOBNFLG1
IOBUPERR EQU   IOBNFLG1
IOBSPAN  EQU   IOBNFLG1
IOBBKSPC EQU   IOBNFLG1
IOBUPDAT EQU   IOBNFLG1
IOBREAD  EQU   IOBNFLG1
IOBWRITE EQU   IOBNFLG1
IOBPRTOV EQU   IOBNFLG1
ECBCCCNT EQU   ECB+1
ECBCOMPC EQU   ECBSTAT
ECBWAIT  EQU   ECBSTAT
CCWCOUNT EQU   JAMCCW+6
@NM00039 EQU   JAMCCW+5
@NM00038 EQU   CCWFLAGS
CCWPCI   EQU   CCWFLAGS
CCWSKIP  EQU   CCWFLAGS
CCWSLI   EQU   CCWFLAGS
CCWCC    EQU   CCWFLAGS
CCWCD    EQU   CCWFLAGS
BUFFER2  EQU   AMWORKAR+4488
CCWS2    EQU   AMWORKAR+4256
IOB2     EQU   AMWORKAR+4208
BUFFER1  EQU   AMWORKAR+880
CCWS1    EQU   AMWORKAR+648
IOB1     EQU   AMWORKAR+600
@NM00037 EQU   SETDWORK
SETDVERY EQU   SETDLIST+1
@NM00036 EQU   RPLFDBK+2
RPLFDB2  EQU   RPLFDBK+1
@NM00035 EQU   PRLOPTBT
RPLEODS  EQU   PRLOPTBT
@NM00034 EQU   AMWORKAR+160
@NM00033 EQU   ACB35IND
ACBSECUR EQU   ACB35IND
ACBFEED  EQU   ACB35IND
ACBVSSER EQU   ACB35EXT+16
ACBJOBID EQU   ACB35EXT+8
ACBDSID  EQU   ACB35EXT
AMWBOESS EQU   AMWEODSS
AMWBOE0  EQU   AMWEOD0
AMWBOETT EQU   AMWEODTT
AMWBOERV EQU   AMWEODRV
@NM00032 EQU   AMWEAMFG
AMWVAMSG EQU   AMWEAMFG
AMWDSOPN EQU   AMWEAMFG
AMWVSEQU EQU   AMW3540E+2
AMWDSSQL EQU   AMW3540E+1
AMWVOLAC EQU   AMW3540E
WORKBSL  EQU   WORKAREA
IOBBFLN  EQU   JAMWKAR+13
@NM00031 EQU   JAMWKAR+12
IOB1ADDR EQU   JAMWKAR+9
@NM00030 EQU   JAMWKAR+8
@NM00029 EQU   JAMWKAR+4
AMWLEN   EQU   AMWORKAR
DCBEOB   EQU   IHADCS40+20
DCBPRECL EQU   IHADCS40+18
@NM00028 EQU   IHADCS40+16
@NM00027 EQU   @NM00025+1
@NM00026 EQU   DCBEROPT
DCBERABE EQU   DCBEROPT
DCBERSKP EQU   DCBEROPT
DCBERACC EQU   DCBEROPT
@NM00024 EQU   IHADCS40+10
@NM00023 EQU   IHADCS40+9
@NM00022 EQU   IHADCS40+8
DCBRECA  EQU   DCBRECAD+1
@NM00021 EQU   DCBRECBT
DCBRCFGT EQU   DCBRCREL
DCBRCTRU EQU   DCBRCREL
DCBLCCW  EQU   DCBEOBAD
DCBNOTE  EQU   DCBCNTRL
DCBLRECL EQU   IHADCS38+10
@NM00020 EQU   IHADCS38+8
DCBEOBW  EQU   IHADCS38+4
DCBEOBRA EQU   DCBEOBR+1
DCBNCP   EQU   DCBEOBR
@NM00019 EQU   DCBFLAG1
DCBSTFLS EQU   DCBFLAG1
DCBSTQCK EQU   DCBFLAG1
DCBDIRCQ EQU   DCBBUFOF
DCBQSTRU EQU   DCBUSASI
@NM00018 EQU   DCBUSASI
DCBQADF3 EQU   DCBQADFS
DCBQADF2 EQU   DCBQADFS
DCBQADF1 EQU   DCBQADFS
DCBBLBP  EQU   DCBUSASI
@NM00017 EQU   DCBUSASI
DCBCICBA EQU   DCBCICB+1
@NM00016 EQU   DCBCICB
DCBOFFSW EQU   IHADCS36+15
DCBOFFSR EQU   IHADCS36+14
DCBWCPL  EQU   IHADCS36+13
DCBWCPO  EQU   IHADCS36+12
DCBBLKSI EQU   IHADCS36+10
DCBCNQSM EQU   DCBCIND2
DCBCNFEO EQU   DCBCIND2
DCBCNCHS EQU   DCBCIND2
DCBCNBFP EQU   DCBCIND2
DCBCNIOE EQU   DCBCIND2
DCBCNCLO EQU   DCBCIND2
DCBCNWRO EQU   DCBCIND2
DCBCNSTO EQU   DCBCIND2
DCBCNEXB EQU   DCBCIND1
@NM00015 EQU   DCBCIND1
DCBCNBRM EQU   DCBCIND1
@NM00014 EQU   DCBCIND1
DCBCNEVA EQU   DCBCIND1
DCBCNEVB EQU   DCBCIND1
DCBCNSRD EQU   DCBCIND1
DCBCNTOV EQU   DCBCIND1
DCBSYNA  EQU   DCBSYNAD+1
DCBIOBL  EQU   DCBSYNAD
DCBCHCKA EQU   DCBPERRA
@NM00013 EQU   DCBOPTCD
DCBOPTT  EQU   DCBOPTCD
DCBSRCHD EQU   DCBOPTZ
DCBOPTQ  EQU   DCBOPTCD
DCBBCKPT EQU   DCBOPTO
DCBOPTC  EQU   DCBOPTCD
DCBOPTU  EQU   DCBOPTCD
DCBOPTW  EQU   DCBOPTCD
DCBPUTA  EQU   DCBGETA
@NM00012 EQU   DCBPUT
DCBREADA EQU   DCBWRITA
@NM00011 EQU   DCBREAD
DCBDEBA  EQU   DCBDEBAD+1
@NM00010 EQU   DCBIFLGS
DCBIFIOE EQU   DCBIFLGS
DCBIFPCT EQU   DCBIFLGS
DCBIFEC  EQU   DCBIFLGS
DCBMFSTI EQU   DCBMFDMD
DCBMFAWR EQU   DCBMFSTK
DCBMFUIP EQU   DCBMFTMD
DCBMFIDW EQU   DCBMFLCP
DCBMFWRK EQU   DCBMFMVP
DCBMFRDQ EQU   DCBMFWRT
DCBMFGTQ EQU   DCBMFPUT
DCBMFSTL EQU   DCBMACF2
DCBMFCK  EQU   DCBMFDMG
DCBMFRDX EQU   DCBMFCHK
DCBMFDBF EQU   DCBMFSBG
DCBMFRDI EQU   DCBMFLCG
DCBMFRDK EQU   DCBMFMVG
DCBMFWRQ EQU   DCBMFRD
DCBMFPTQ EQU   DCBMFGET
DCBMFECP EQU   DCBMACF1
DCBTIOT  EQU   IHADCS25
DCBMRSTI EQU   DCBMRDMD
DCBMRAWR EQU   DCBMRSTK
DCBMRUIP EQU   DCBMRTMD
DCBMRIDW EQU   DCBMRLCP
DCBMRWRK EQU   DCBMRMVP
DCBMRRDQ EQU   DCBMRWRT
DCBMRGTQ EQU   DCBMRPUT
DCBMRSTL EQU   DCBMACR2
DCBMRCK  EQU   DCBMRDMG
DCBPGFXA EQU   DCBMRRDX
DCBMRDBF EQU   DCBMRSBG
DCBMRRDI EQU   DCBMRLCG
DCBMRRDK EQU   DCBMRMVG
DCBMRWRQ EQU   DCBMRRD
DCBMRPTQ EQU   DCBMRGET
DCBMRECP EQU   DCBMACR1
@NM00009 EQU   DCBIFLG
DCBIBIOE EQU   DCBIFLG
DCBIBPCT EQU   DCBIFLG
DCBIBEC  EQU   DCBIFLG
DCBOFIOF EQU   DCBOFLGS
DCBOFUEX EQU   DCBOFLGS
DCBOFTM  EQU   DCBOFLGS
DCBOFPPC EQU   DCBOFLGS
DCBOFOPN EQU   DCBOFLGS
DCBOFEOV EQU   DCBOFLGS
DCBOFLRB EQU   DCBOFLGS
DCBOFIOD EQU   DCBOFLWR
DCBDDNAM EQU   IHADCS24
DCBEXLSA EQU   DCBEXLST+1
DCBRECKL EQU   DCBRECFM
DCBRECCC EQU   DCBRECFM
DCBRECSB EQU   DCBRECFM
DCBRECBR EQU   DCBRECFM
DCBRECTO EQU   DCBRECLA
DCBRECL  EQU   DCBRECLA
DCBEODA  EQU   DCBEODAD+1
DCBBFA   EQU   DCBBFTEK
DCBH0    EQU   DCBBFTEK
DCBBFTKD EQU   DCBBFTEK
DCBBFTE  EQU   DCBBFT
DCBBFTKR EQU   DCBBFT
DCBBFTS  EQU   DCBBFT
DCBH1    EQU   DCBBFTEK
DCBSVCXA EQU   DCBSVCXL+1
@NM00008 EQU   DCBSVCXL
DCBODEBA EQU   DCBIOBAA
@NM00007 EQU   DCBQSLM
DCBUPDBT EQU   DCBQSLM
DCBUPDCM EQU   DCBQSLM
DCB1DVDS EQU   DCBQSLM
@NM00006 EQU   DCBDSRG2
DCBDSGTR EQU   DCBDSRG2
DCBACBM  EQU   DCBDSRG2
@NM00005 EQU   DCBDSRG2
DCBDSGTQ EQU   DCBDSRG2
DCBDSGTX EQU   DCBDSRG2
DCBDSGGS EQU   DCBDSRG2
DCBDSGU  EQU   DCBDSRG1
DCBDSGPO EQU   DCBDSRG1
DCBDSGMQ EQU   DCBDSRG1
DCBDSGCQ EQU   DCBDSRG1
DCBDSGCX EQU   DCBDSRG1
DCBDSGDA EQU   DCBDSRG1
DCBDSGPS EQU   DCBDSRG1
DCBDSGIS EQU   DCBDSRG1
DCBBUFL  EQU   IHADCS11+8
DCBBUFCA EQU   DCBBUFCB+1
DCBBUFNO EQU   DCBBUFCB
DCBDEVT  EQU   DCBREL
DCBKEYLE EQU   DCBRELB
DCBTRBAL EQU   IHADCS01+6
@NM00004 EQU   IHADCS01+5
@NM00003 EQU   IHADCS01+4
DCBDVTBA EQU   DCBDVTBL+1
@NM00002 EQU   DCBDVTBL
DCBKEYCN EQU   IHADCS00+4
DCBRELAD EQU   IHADCS00
@NM00001 EQU   IHADCB
IOBERRCT EQU   IOBSTDRD+30
IOBRSV19 EQU   IOBINCAM+1
IOBOLTST EQU   IOBBTAMF
IOBRFTMG EQU   IOBBTAMF
IOBRSV17 EQU   IOBBTAMF
IOBRSV16 EQU   IOBBTAMF
IOBRSV15 EQU   IOBBTAMF
IOBRSV14 EQU   IOBBTAMF
IOBINUSE EQU   IOBBTAMF
IOBPRMER EQU   IOBBTAMF
IOBRSTRB EQU   IOBRESTR+1
IOBREPOS EQU   IOBRESTR
IOBDCBPB EQU   IOBDCBPT+1
IOBRSV44 EQU   IOBFLAG4
IOBJES3I EQU   IOBFLAG4
IOBRSV42 EQU   IOBFLAG4
IOBRSV41 EQU   IOBFLAG4
IOBRSV40 EQU   IOBFLAG4
IOBPMERR EQU   IOBFLAG4
IOBCC3WE EQU   IOBFLAG4
IOBGDPOL EQU   IOBFLAG4
IOBSTRTB EQU   IOBSTART+1
IOBSIOCC EQU   IOBSTART
IOBSTBYT EQU   IOBIOCSW+3
IOBCMDA  EQU   IOBIOCSW
IOBLOG   EQU   IOBFL3
IOBICL   EQU   IOBFL3
IOBMSG   EQU   IOBFL3
IOBCNC   EQU   IOBFL3
IOBACU   EQU   IOBFL3
IOBCDC   EQU   IOBFL3
IOBICC   EQU   IOBFL3
IOBCCC   EQU   IOBFL3
IOBECBCC EQU   IOBECBPT
IOBS1B7  EQU   IOBSENS1
IOBS1B6  EQU   IOBSENS1
IOBS1B5  EQU   IOBSENS1
IOBS1B4  EQU   IOBSENS1
IOBS1B3  EQU   IOBSENS1
IOBS1B2  EQU   IOBSENS1
IOBS1B1  EQU   IOBSENS1
IOBS1B0  EQU   IOBSENS1
IOBSNSC9 EQU   IOBS0B7
IOBS0B6  EQU   IOBSENS0
IOBS0B5  EQU   IOBSENS0
IOBS0B4  EQU   IOBSENS0
IOBS0B3  EQU   IOBSENS0
IOBS0B2  EQU   IOBSENS0
IOBS0B1  EQU   IOBSENS0
IOBS0B0  EQU   IOBSENS0
IOBPNCH  EQU   IOBFLAG2
IOBSTATO EQU   IOBFLAG2
IOBSKUPD EQU   IOBFLAG2
IOBALTTR EQU   IOBFLAG2
IOBRRT2  EQU   IOBRDHA0
IOBRRT3  EQU   IOBPURGE
IOBSENSE EQU   IOBFLAG2
IOBHALT  EQU   IOBFLAG2
IOBSPSVC EQU   IOBRSTRT
IOBUNREL EQU   IOBFLAG1
IOBIOERR EQU   IOBFLAG1
IOBFCREX EQU   IOBCYCCK
IOBRPSTN EQU   IOBFLAG1
IOBERRTN EQU   IOBFLAG1
IOBCMDCH EQU   IOBFLAG1
IOBDATCH EQU   IOBFLAG1
IOBCNOPA EQU   IOBPREFX+12
IOBCICB  EQU   IOBPREFX+8
IOBCECB  EQU   IOBPREFX+4
IOBCONOP EQU   IOBPREFX+3
IOBCINOP EQU   IOBPREFX+2
IOBRSV05 EQU   IOBPREFX+1
IOBPCI   EQU   IOBCFLG1
IOBRSTCH EQU   IOBCFLG1
IOBABAPP EQU   IOBCFLG1
IOBPTST  EQU   IOBCFLG1
IOBRSV04 EQU   IOBCFLG1
IOBRSV03 EQU   IOBCFLG1
IOBRSV02 EQU   IOBCFLG1
IOBRSV01 EQU   IOBCFLG1
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
EOD#     EQU   @RC00118
@RC00177 EQU   @RC00160
@RC00172 EQU   @RC00160
@RF00185 EQU   @RC00160
EOD@     EQU   @EL00001
@ENDDATA EQU   *
         END   IOEDKGET,(C'PLS1352',0603,75308)
