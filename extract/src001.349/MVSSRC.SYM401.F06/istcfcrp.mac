SVTM     TITLE ' COMMAND FAC-- ISTCFCRP -- POI REPLY PROCESSOR         *
                        '
ISTCFCRP CSECT ,                                                01S0001
@MAINENT DS    0H                                               01S0001
         USING *,@15                                            01S0001
         B     @PROLOG                                          01S0001
         DC    AL1(16)                                          01S0001
         DC    C'ISTCFCRP  77.221'                              01S0001
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                  01S0001
         BALR  @12,0                                            01S0001
@PSTART  DS    0H                                               01S0001
         USING @PSTART,@12                                      01S0001
         EJECT
*                                                               01S0129
*   /*****************************************************************/
*   /*                                                               */
*   /* MAINLINE CODE OF ISTCFCRP -- POI REPLY PROCESS                */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0129
*   DO;                                                         01S0129
*                                                               01S0129
*/***  CRRMAINT  PROCNM(ISTCFCRP)COMP(CF)FUNC(SUB)RPHADD((CRPRPHPT))  *
*                                                                    */
*/* ATBUILD (ISTRPH,ISTCRA,ISTPFCRR,ISTCFCRR)                        */
*/* END OF ATBUILD                                                   */
*/* ** SET ENTERED BIT FOR THIS PROCEDURE **                         */
*                                                               01S0130
*     CRPRPHPT->RPHCRR->CRACRR->NCFCRP='1'B;                    01S0130
*                                                               01S0130
         L     @11,RPHCRR(,CRPRPHPT)                            01S0130
         L     @11,CRACRR(,@11)                                 01S0130
         OI    NCFCRP(@11),B'00010000'                          01S0130
*/* ** CLEAR AND SET CURRENT PROCEDURE BIT **                        */
*                                                               01S0131
*     CRPRPHPT->RPHCRR->CRACRR->CFCCRT='0'B;                    01S0131
         MVI   CFCCRT(@11),B'00000000'                          01S0131
*     CRPRPHPT->RPHCRR->CRACRR->CCFCRP='1'B;                    01S0132
         OI    CCFCRP(@11),B'00010000'                          01S0132
*   END;                                                        01S0133
*   DO UNTIL(POPTXPTR->CRPCHARA^=BLANK);                        01S0134
*                                                               01S0134
@DL00134 DS    0H                                               01S0135
*     /***************************************************************/
*     /*                                                             */
*     /* THE LOOP SEARCHES FOR THE FIRST NON-BLANK CHARACTER         */
*     /* PRESUMABLY THE BEGINNING OF THE REPLY NUMBER                */
*     /*                                                             */
*     /***************************************************************/
*                                                               01S0135
*     POPTXPTR=POPTXPTR+1;          /* SPACES TO THE NEXT CHAR       */
         LA    @11,336                                          01S0135
         ALR   @11,CRPOCWPT                                     01S0135
         LA    @07,1                                            01S0135
         AL    @07,POPTXPTR(,@11)                               01S0135
         ST    @07,POPTXPTR(,@11)                               01S0135
*   END;                                                        01S0136
@DE00134 L     @11,POPTXPTR+336(,CRPOCWPT)                      01S0136
         CLI   CRPCHARA(@11),C' '                               01S0136
         BE    @DL00134                                         01S0136
*   RFY                                                         01S0137
*     CRPSTRNG RSTD;                                            01S0137
*   CRPSTRNG=POPTXPTR;              /* SAVES THE VALUE OF TEXT PTR   */
         LR    CRPSTRNG,@11                                     01S0138
*   CRPNULL=ZERO;                   /* INITS VALUE FOR LOOP          */
*                                                               01S0139
         SLR   @11,@11                                          01S0139
         ST    @11,CRPNULL+176(,CRPOCWPT)                       01S0139
*   /*****************************************************************/
*   /*                                                               */
*   /* THE FOLLOWING LOOP PICKS OUT THE REPLY ID ASSUMING THERE IS   */
*   /* ONE                                                           */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0140
*   DO UNTIL(CRPSTRNG->CRPCHARA=COMMA×CRPNULL>TWO);             01S0140
@DL00140 DS    0H                                               01S0141
*     CRPSTRNG=CRPSTRNG+1;          /* SPACES TO NEXT CHAR           */
         LA    @11,1                                            01S0141
         ALR   CRPSTRNG,@11                                     01S0141
*     CRPNULL=CRPNULL+1;            /* KEEPS COUNT OF LENGTH OF REPLY
*                                      ID                            */
         LA    @09,176                                          01S0142
         ALR   @09,CRPOCWPT                                     01S0142
         AL    @11,CRPNULL(,@09)                                01S0142
         ST    @11,CRPNULL(,@09)                                01S0142
*   END;                                                        01S0143
@DE00140 CLI   CRPCHARA(CRPSTRNG),C','                          01S0143
         BE    @DC00140                                         01S0143
         L     @11,CRPNULL+176(,CRPOCWPT)                       01S0143
         CH    @11,@CH00105                                     01S0143
         BNH   @DL00140                                         01S0143
@DC00140 DS    0H                                               01S0144
*   RFY                                                         01S0144
*     CRPADBUF RSTD;                                            01S0144
*PLSBUG:                                                        01S0145
*   CRPADBUF=ADDR(POPMSG);          /* GIVES US START ADD            */
PLSBUG   LA    @11,336                                          01S0145
         ALR   @11,CRPOCWPT                                     01S0145
         LA    CRPADBUF,POPMSG(,@11)                            01S0145
*   CRPINDEX=(POPTXPTR-CRPADBUF)+1; /* GIVES START INDEX OF REP ID   */
         LA    @09,176                                          01S0146
         ALR   @09,CRPOCWPT                                     01S0146
         LA    @05,1                                            01S0146
         L     @00,POPTXPTR(,@11)                               01S0146
         SLR   @00,CRPADBUF                                     01S0146
         ALR   @00,@05                                          01S0146
         ST    @00,CRPINDEX(,@09)                               01S0146
*   IF CRPNULL=ONE THEN                                         01S0147
         C     @05,CRPNULL(,@09)                                01S0147
         BNE   @RF00147                                         01S0147
*     DO;                           /* THE ID IS ONE CHAR IN LENGTH  */
*       POPMSG(CRPINDEX-ONE)=CHAR0; /* FILL IN LEADING ZERO          */
         LR    @05,@00                                          01S0149
         ALR   @05,@11                                          01S0149
         MVI   POPMSG-2(@05),C'0'                               01S0149
*       CRPNUM=POPMSG(CRPINDEX-1:CRPINDEX);/* SETS VALUE OF REP ID   */
         ALR   @11,@00                                          01S0150
         MVC   CRPNUM(2,@09),POPMSG-2(@11)                      01S0150
*     END;                                                      01S0151
*   ELSE                            /* WE HAVE AN ID OF LENGTH TWO(AT
*                                      LEAST)                        */
*     CRPNUM=POPMSG(CRPINDEX:CRPINDEX+1);/* SET REP ID               */
         B     @RC00147                                         01S0152
@RF00147 LA    @11,176                                          01S0152
         ALR   @11,CRPOCWPT                                     01S0152
         L     @09,CRPINDEX(,@11)                               01S0152
         ALR   @09,CRPOCWPT                                     01S0152
         MVC   CRPNUM(2,@11),POPMSG+335(@09)                    01S0152
*   CRPSTSW=ZERO;                                               01S0153
@RC00147 MVI   CRPSTSW+176(CRPOCWPT),X'00'                      01S0153
*   CALL CRPCBSH;                   /* WILL SEARCH FOR CORRESPONDING
*                                      PORCB                         */
         BAL   @14,CRPCBSH                                      01S0154
*   RFY                                                         01S0155
*     ISTPORCB BASED(CRPPTR);                                   01S0155
*   IF(CRPFND=ON&PORRTPQ=OFF)       /* IF THE PORCB IS FOUND AND
*                                      REPLY                         */
*/*                                   HAS NOT YET BEEN SATISFIED     */
*                                                               01S0156
*     THEN                                                      01S0156
         TM    CRPFND+176(CRPOCWPT),B'10000000'                 01S0156
         BNO   @RF00156                                         01S0156
         TM    PORRTPQ(CRPPTR),B'10000000'                      01S0156
         BNZ   @RF00156                                         01S0156
*     DO;                                                       01S0157
*                                                               01S0157
*       /*************************************************************/
*       /*                                                           */
*       /* REST OF PROGRAM SYNTAX CHECKS THE TEXT AND MOVES IT INTO  */
*       /* PORCB IF VALID, WE WILL THEREFORE NOW OBTAIN RDT LOCK     */
*       /* EXCLUSIVE                                                 */
*       /*                                                           */
*       /*************************************************************/
*                                                               01S0158
*/*** START -TPUNLOCK (RDTLOCK)- **                                  */
*                                                               01S0158
*       DO;                                                     01S0158
*                                                               01S0158
*/* ATBUILD (ISTRPH,ISTLOK,ISTCRA)                                   */
*/* END OF ATBUILD                                                   */
*                                                               01S0159
*         RFY                                                   01S0159
*          (GPR00P,                                             01S0159
*           GPR01P,                                             01S0159
*           GPR02P,                                             01S0159
*           GPR03P,                                             01S0159
*           GPR04P,                                             01S0159
*           GPR15P) RSTD;                                       01S0159
*         GENERATE REFS(GPR00P,GPR01P,GPR15P,RPHWORK) SETS(RPHWORK);
         STM GPR00P,GPR15P,RPHWORK(GPR01P)
*         GPR02P=ADDR(ATCRDTLK);    /* SET PARAM - LOCKWORD PTR      */
         L     GPR02P,OCWACVT(,CRPOCWPT)                        01S0161
         LA    GPR02P,ATCRDTLK(,GPR02P)                         01S0161
*         GPR04P=GPR01P->RPHCRR;    /* SET PARAM - ISTCRA PTR        */
         L     GPR04P,RPHCRR(,GPR01P)                           01S0162
*         GPR00P=CRALMS03;          /* SET PARAM - LOCK LEVEL FLAG   */
         LA    GPR00P,4                                         01S0163
*         GPR03P=ADDR(GPR04P->CRAL3PTR);/* SET PARAM - LOCK LEVEL PTR*/
         LA    GPR03P,CRAL3PTR(,GPR04P)                         01S0164
*         DO;                       /* LISATCVT                 01S0165
*                                      CVTBASE(PAGEABLE,(GPR15P))    */
*           GPR15P=ATCLCPTR;        /* SET UP ATCVT POINTER          */
         L     GPR15P,ATCLCPTR                                  01S0166
*         END;                      /* LISATCVT                      */
*         GPR15P=GPR15P->ATCAP33;                               01S0168
         L     GPR15P,ATCAP33(,GPR15P)                          01S0168
*         DCL                                                   01S0169
*           FMZL0012 BASED(GPR15P) LABEL VALUERANGE(*);         01S0169
*         CALL FMZL0012;                                        01S0170
         BALR  @14,@15                                          01S0170
*         GENERATE REFS(GPR00P,GPR01P,GPR15P,RPHWORK) SETS(GPR00P,
*             GPR01P,GPR02P,GPR03P,GPR04P,GPR05P,GPR06P,GPR07P,GPR08P,
*             GPR09P,GPR10P,GPR11P,GPR12P,GPR13P,GPR14P,GPR15P);
         LM GPR00P,GPR15P,RPHWORK(GPR01P)
*         RFY                                                   01S0172
*          (GPR00P,                                             01S0172
*           GPR01P,                                             01S0172
*           GPR02P,                                             01S0172
*           GPR03P,                                             01S0172
*           GPR04P,                                             01S0172
*           GPR15P) UNRSTD;                                     01S0172
*       END;                                                    01S0173
*                                                               01S0173
*/*** END -TPUNLOCK (RDTLOCK)- **                                    */
*/*** START -TPLOCK (RDTLOCK)TYPE(XCLSIVE)- **                       */
*                                                               01S0174
*       DO;                                                     01S0174
*         RFY                                                   01S0175
*          (GPR00P,                                             01S0175
*           GPR01P,                                             01S0175
*           GPR02P,                                             01S0175
*           GPR03P,                                             01S0175
*           GPR04P,                                             01S0175
*           GPR15P) RSTD;                                       01S0175
*         GENERATE REFS(GPR00P,GPR01P,GPR15P,RPHWORK) SETS(RPHWORK);
         STM GPR00P,GPR14P,RPHWORK(GPR01P)
*         GPR15P=ATCAP36;           /* ADDRESS OF LOCK ROUTINE       */
         L     @11,OCWACVT(,CRPOCWPT)                           01S0177
         L     GPR15P,ATCAP36(,@11)                             01S0177
*         GPR02P=ADDR(ATCRDTLK);    /* SET PARAM - LOCKWORD PTR      */
         LA    GPR02P,ATCRDTLK(,@11)                            01S0178
*         GPR04P=GPR01P->RPHCRR;    /* SET PARAM - ISTCRA PTR        */
         L     GPR04P,RPHCRR(,GPR01P)                           01S0179
*         GPR00P=CRALMS03;          /* SET PARAM - LOCK LEVEL FLAG   */
         LA    GPR00P,4                                         01S0180
*         GPR03P=ADDR(GPR04P->CRAL3PTR);/* SET PARAM - LOCK LEVEL PTR*/
         LA    GPR03P,CRAL3PTR(,GPR04P)                         01S0181
*         DCL                                                   01S0182
*           FMZL0022 BASED(GPR15P) LABEL VALUERANGE(*);         01S0182
*         CALL FMZL0022;                                        01S0183
         BALR  @14,@15                                          01S0183
*         GENERATE REFS(GPR00P,GPR01P,GPR14P,RPHWORK) SETS(GPR00P,
*             GPR01P,GPR02P,GPR03P,GPR04P,GPR05P,GPR06P,GPR07P,GPR08P,
*             GPR09P,GPR10P,GPR11P,GPR12P,GPR13P,GPR14P,GPR15P);
         LM GPR00P,GPR15P,RPHWORK(GPR01P)
*         RFY                                                   01S0185
*          (GPR00P,                                             01S0185
*           GPR01P,                                             01S0185
*           GPR02P,                                             01S0185
*           GPR03P,                                             01S0185
*           GPR04P,                                             01S0185
*           GPR15P) UNRSTD;                                     01S0185
*       END;                                                    01S0186
*                                                               01S0186
*/*** END -TPLOCK (RDTLOCK)TYPE(XCLSIVE)- **                         */
*                                                               01S0187
*       RFY                                                     01S0187
*         CRPREG15 RSTD;                                        01S0187
*       IF CRPREG15=ZERO THEN                                   01S0188
         LTR   CRPREG15,CRPREG15                                01S0188
         BNZ   @RF00188                                         01S0188
*         DO;                                                   01S0189
*           RFY                                                 01S0190
*             CRPREG15 UNRSTD;                                  01S0190
*           IF CRPNULL>TWO THEN                                 01S0191
         L     @11,CRPNULL+176(,CRPOCWPT)                       01S0191
         CH    @11,@CH00105                                     01S0191
         BH    @RT00191                                         01S0191
*             ;                     /* SIGNIFIES TEXT IS NULL=> NO
*                                      MOVE INTO PORCB               */
*           ELSE                                                01S0193
*             DO;                                               01S0193
*               PORMSG(1)=' ';      /* BLANK OUT REPLY AREA          */
         MVI   PORMSG(CRPPTR),C' '                              01S0194
*               IF PORREPLN>1 THEN  /* BLANK OUT REST OF BUFF        */
         CLI   PORREPLN(CRPPTR),1                               01S0195
         BNH   @RF00195                                         01S0195
*                 MVC(PORMSG(2:PORREPLN),PORMSG(1:PORREPLN-1)); 01S0196
         SLR   @11,@11                                          01S0196
         IC    @11,PORREPLN(,CRPPTR)                            01S0196
         BCTR  @11,0                                            01S0196
         BCTR  @11,0                                            01S0196
         EX    @11,@SM03334                                     01S0196
*               ELSE                                            01S0197
*                 ;                 /* BLANKS NOT NEEDED             */
@RF00195 DS    0H                                               01S0198
*               CRPSTRNG=CRPSTRNG+1;/* SPACE TO FIRST CHAR OF TEXT   */
         AH    CRPSTRNG,@CH00093                                01S0198
*               IF CRPSTRNG->CRPCHARA=QUOTE/* DO WE HAVE TEXT IN
*                                      QUOTES                        */
*                 THEN                                          01S0199
         CLI   CRPCHARA(CRPSTRNG),X'7D'                         01S0199
         BNE   @RF00199                                         01S0199
*                 DO;                                           01S0200
*                   CRPBGN=(CRPSTRNG-CRPADBUF)+TWO;/* PROVIDES INDEX
*                                      FOR BEGIN OF TEXT             */
*                                                               01S0201
         LR    @11,CRPSTRNG                                     01S0201
         SLR   @11,CRPADBUF                                     01S0201
         AH    @11,@CH00105                                     01S0201
         ST    @11,CRPBGN+176(,CRPOCWPT)                        01S0201
*                   /*************************************************/
*                   /*                                               */
*                   /* FOLLOWING SUBROUTINE EDITS THE BUFFER OF      */
*                   /* EXTRANEOUS QUOTES AND DETERMINES LENGTH OF    */
*                   /* TEXT                                          */
*                   /*                                               */
*                   /*************************************************/
*                                                               01S0202
*                   CALL CRPEDIT;                               01S0202
         BAL   @14,CRPEDIT                                      01S0202
*                   IF CRPBUFLN>PORREPLN THEN                   01S0203
         L     @11,CRPBUFLN+176(,CRPOCWPT)                      01S0203
         SLR   @09,@09                                          01S0203
         IC    @09,PORREPLN(,CRPPTR)                            01S0203
         CR    @11,@09                                          01S0203
         BNH   @RF00203                                         01S0203
*                     DO;           /* THE TEXT IS LONGER THAN IS
*                                      ALLOWED FOR                   */
*                                                               01S0204
*                       /*********************************************/
*                       /*                                           */
*                       /* ERROR LOGIC (SYNTAX ERROR ) FOLLOWS       */
*                       /*                                           */
*                       /*********************************************/
*                                                               01S0205
*                       RPLRTNCD='08'X;/* SET RPL RET CODE           */
         L     @11,OCWRPL(,CRPOCWPT)                            01S0205
         MVI   RPLRTNCD(@11),X'08'                              01S0205
*                       RPLFDB2='6E'X;/* SET RPL RET CODE            */
         MVI   RPLFDB2(@11),X'6E'                               01S0206
*                       POPMSGID='193I';/* SET ERR MSG ID FOR TPMSG  */
         MVC   POPMSGID+336(4,CRPOCWPT),@CC01185                01S0207
*                       CALL CRPMSG;/* TPMSG SUBROUTINE              */
         BAL   @14,CRPMSG                                       01S0208
*                       CRPERR=ON;  /* SIGNAL TO PROG THAT WE HAVE
*                                      ERROR                         */
         OI    CRPERR+176(CRPOCWPT),B'01000000'                 01S0209
*                     END;                                      01S0210
*                   ELSE                                        01S0211
*                     DO;                                       01S0211
*                                                               01S0211
         B     @RC00203                                         01S0211
@RF00203 DS    0H                                               01S0212
*                       /*********************************************/
*                       /*                                           */
*                       /* TEXT IS OF CORRECT LENGTH                 */
*                       /*                                           */
*                       /*********************************************/
*                                                               01S0212
*                       CRPERR=OFF; /* NO ERROR HERE                 */
*                                                               01S0212
         LA    @11,176                                          01S0212
         ALR   @11,CRPOCWPT                                     01S0212
         NI    CRPERR(@11),B'10111111'                          01S0212
*                       /*********************************************/
*                       /*                                           */
*                       /* MOVE REPLY TEXT INTO PORCB                */
*                       /*                                           */
*                       /*********************************************/
*                                                               01S0213
*                       PORMSG(1:CRPBUFLN)=POPMSG(CRPBGN:CRPBGN+
*                           CRPBUFLN);                          01S0213
         L     @09,CRPBUFLN(,@11)                               01S0213
         BCTR  @09,0                                            01S0213
         L     @11,CRPBGN(,@11)                                 01S0213
         ALR   @11,CRPOCWPT                                     01S0213
         EX    @09,@SM03338                                     01S0213
*                     END;                                      01S0214
*                 END;                                          01S0215
*               ELSE                                            01S0216
*                 DO;               /* THERE IS NO QUOTE AFTER THE
*                                      REPLY ID                      */
         B     @RC00199                                         01S0216
@RF00199 DS    0H                                               01S0217
*                   CRPBGN=(CRPSTRNG-CRPADBUF)+1;/* SET INDEX TO BGN
*                                      OF TEXT                       */
*                                                               01S0217
         LA    @11,176                                          01S0217
         ALR   @11,CRPOCWPT                                     01S0217
         LR    @09,CRPSTRNG                                     01S0217
         SLR   @09,CRPADBUF                                     01S0217
         AH    @09,@CH00093                                     01S0217
         ST    @09,CRPBGN(,@11)                                 01S0217
*                   /*************************************************/
*                   /*                                               */
*                   /* LENGTH OF REPLY TEXT WILL BE COMPUTED         */
*                   /*                                               */
*                   /*************************************************/
*                                                               01S0218
*                   CRPNULL=(((RPLRLEN-4)+CRPADBUF)-CRPSTRNG);  01S0218
         L     @09,OCWRPL(,CRPOCWPT)                            01S0218
         L     @09,RPLRLEN(,@09)                                01S0218
         SH    @09,@CH00085                                     01S0218
         ALR   @09,CRPADBUF                                     01S0218
         SLR   @09,CRPSTRNG                                     01S0218
         ST    @09,CRPNULL(,@11)                                01S0218
*                   IF CRPNULL>PORREPLN×CRPNULL=0/* TOO LONG? OR
*                                      INVALID NULL FORMAT           */
*                     THEN                                      01S0219
         SLR   @11,@11                                          01S0219
         IC    @11,PORREPLN(,CRPPTR)                            01S0219
         CR    @09,@11                                          01S0219
         BH    @RT00219                                         01S0219
         LTR   @09,@09                                          01S0219
         BNZ   @RF00219                                         01S0219
@RT00219 DS    0H                                               01S0220
*                     DO;           /* ERROR FOUND                   */
*                                                               01S0220
*                       /*********************************************/
*                       /*                                           */
*                       /* ERROR LOGIC (SYNTAX ERROR ) FOLLOWS       */
*                       /*                                           */
*                       /*********************************************/
*                                                               01S0221
*                       RPLRTNCD='08'X;/* SET RPL RET CODE           */
         L     @11,OCWRPL(,CRPOCWPT)                            01S0221
         MVI   RPLRTNCD(@11),X'08'                              01S0221
*                       RPLFDB2='6E'X;/* SET RPL RET CODE            */
         MVI   RPLFDB2(@11),X'6E'                               01S0222
*                       POPMSGID='193I';/* SET ERR MSG ID FOR TPMSG  */
         MVC   POPMSGID+336(4,CRPOCWPT),@CC01185                01S0223
*                       CALL CRPMSG;/* TPMSG SUBROUTINE              */
         BAL   @14,CRPMSG                                       01S0224
*                       CRPERR=ON;  /* SIGNAL TO PROG THAT WE HAVE
*                                      ERROR                         */
         OI    CRPERR+176(CRPOCWPT),B'01000000'                 01S0225
*                     END;                                      01S0226
*                   ELSE                                        01S0227
*                     DO;                                       01S0227
         B     @RC00219                                         01S0227
@RF00219 DS    0H                                               01S0228
*                       CRPERR=OFF; /* NO ERROR FOUND                */
*                                                               01S0228
         LA    @11,176                                          01S0228
         ALR   @11,CRPOCWPT                                     01S0228
         NI    CRPERR(@11),B'10111111'                          01S0228
*                       /*********************************************/
*                       /*                                           */
*                       /* PUTS THE MESSAGE TEXT INTO THE PORCB      */
*                       /*                                           */
*                       /*********************************************/
*                                                               01S0229
*                       PORMSG(1:CRPNULL)=POPMSG(CRPBGN:CRPBGN+CRPNULL)
*                           ;                                   01S0229
         L     @09,CRPNULL(,@11)                                01S0229
         BCTR  @09,0                                            01S0229
         L     @11,CRPBGN(,@11)                                 01S0229
         ALR   @11,CRPOCWPT                                     01S0229
         EX    @09,@SM03338                                     01S0229
*                     END;                                      01S0230
*                 END;                                          01S0231
@RC00219 DS    0H                                               01S0232
*             END;                                              01S0232
@RC00199 DS    0H                                               01S0233
*           IF CRPERR^=ON           /* NO ERROR FOUND YET            */
*             THEN                                              01S0233
@RT00191 LA    @11,176                                          01S0233
         ALR   @11,CRPOCWPT                                     01S0233
         TM    CRPERR(@11),B'01000000'                          01S0233
         BO    @RF00233                                         01S0233
*             DO;                                               01S0234
*                                                               01S0234
*               /*****************************************************/
*               /*                                                   */
*               /* FOLLOWING INSTRUCTIONS CONVERT THE REP ID TO      */
*               /* DECIMAL SO THE APPROPRIATE BIT IN THE POCB CAN BE */
*               /* TURNED OFF THIS WILL SIGNIFY THAT THIS REPLY HAS  */
*               /* BEEN SATISFIED AND THEREFORE THE REP ID CAN BE    */
*               /* USED AGAIN                                        */
*               /*                                                   */
*               /*****************************************************/
*                                                               01S0235
*               PACK(CRPDW,POREPID);/* PACKS VALUE OF REP ID         */
         PACK  CRPDW(8,@11),POREPID(2,CRPPTR)                   01S0235
*               RFY                                             01S0236
*                 CRPBASE RSTD;                                 01S0236
*               CVB(CRPBASE,CRPDW); /* CONVERTS VALUE TO BINARY      */
         CVB   CRPBASE,CRPDW(,@11)                              01S0237
*               RFY                                             01S0238
*                 CRPREG15 RSTD;                                01S0238
*                                                               01S0238
*               /*****************************************************/
*               /*                                                   */
*               /* FOLLOWING RFY WILL POINT CRPCHARA TO THE BYTE CON-*/
*               /* TAINING THE BIT TO BE TURNED OFF                  */
*               /*                                                   */
*               /*****************************************************/
*                                                               01S0239
*               RFY                                             01S0239
*                 CRPCHARA BASED(EVAL(ADDR(POCRPGEN)+CRPBASE/8));
*               CRPREG15=CRPWRO2((CRPBASE//8)+1);/* DETERMINES WHICH
*                                      BIT SEQUENCE WILL BE USED TO
*                                      TURN OFF CORRECT BIT WITH AN
*                                      AND                           */
         LR    @14,CRPBASE                                      01S0240
         SRDA  @14,32                                           01S0240
         D     @14,@CF00091                                     01S0240
         SLA   @14,2                                            01S0240
         L     CRPREG15,CRPWRO2(@14)                            01S0240
*               CRPREG15=255-CRPREG15;/* LOAD THE ONE'S COMPLEMENT   */
         LA    @14,255                                          01S0241
         SLR   @14,CRPREG15                                     01S0241
         LR    CRPREG15,@14                                     01S0241
*               CRPCHARA=CRPCHARA&CRPREG15;/* AND TO TURN OFF BIT    */
         LA    @14,POCRPGEN(,CRPPOCB)                           01S0242
         LR    @11,CRPBASE                                      01S0242
         SRL   @11,3                                            01S0242
         ALR   @11,@14                                          01S0242
         LR    @09,CRPBASE                                      01S0242
         SRL   @09,3                                            01S0242
         ALR   @14,@09                                          01S0242
         SLR   @09,@09                                          01S0242
         IC    @09,CRPCHARA(,@14)                               01S0242
         NR    @09,CRPREG15                                     01S0242
         STC   @09,CRPCHARA(,@11)                               01S0242
*               RFY                                             01S0243
*                 CRPREG15 UNRSTD;                              01S0243
*                                                               01S0243
*               /*****************************************************/
*               /*                                                   */
*               /* WE WILL NOW TPQUE THE PORCB AS A WORK ELEMENT TO  */
*               /* THE POI DYPPAB TO CLEAN IT UP AND POST VTAM THE   */
*               /* MESSAGE TEXT WILL ALSO BE MOVED FROM IT TO VTAM   */
*               /* REPLY AREA                                        */
*               /*                                                   */
*               /*****************************************************/
*                                                               01S0244
*               POMFWD=CRPPOCB;     /* SAVE POCB PTR TO PASS IT TO
*                                      CFCR2,THE REP PURGE ROUTINE   */
         SLR   @11,@11                                          01S0244
         ICM   @11,7,PORPOMCB(CRPPTR)                           01S0244
         STCM  CRPPOCB,7,POMFWD(@11)                            01S0244
*/*  TPQUE (CRPPTR,DYPPAB) NORM                                      */
*                                                               01S0245
*               DO;                                             01S0245
*                 RFY                                           01S0246
*                  (GPR00P,                                     01S0246
*                   GPR01P,                                     01S0246
*                   GPR04P,                                     01S0246
*                   GPR05P,                                     01S0246
*                   GPR15P) RSTD;                               01S0246
*                 GEN REFS(GPR01P) SETS(RPHWORK)                01S0247
*                     (STM GPR02P,GPR08P,RPHWORK(GPR01P));      01S0247
         STM GPR02P,GPR08P,RPHWORK(GPR01P)
*                 GPR00P=0;                                     01S0248
         SLR   GPR00P,GPR00P                                    01S0248
*                 GPR15P=ADDR(DYPPAB);/* HOLD PAB PTR                */
         L     GPR15P,OCWACVT(,CRPOCWPT)                        01S0249
         LA    GPR15P,DYPPAB+1552(,GPR15P)                      01S0249
*                 GPR04P=CRPPTR;    /* WORK ELE PTR                  */
         LR    GPR04P,CRPPTR                                    01S0250
*                 GPR05P=GPR15P;    /* PASS PAB PTR                  */
         LR    GPR05P,GPR15P                                    01S0251
*                 CALL ATCLCPTR->ATCAP37->ISTAPC37;             01S0252
         L     @11,ATCLCPTR                                     01S0252
         L     @15,ATCAP37(,@11)                                01S0252
         BALR  @14,@15                                          01S0252
*                 GEN(NOPR  0)                                  01S0253
*                 NOSETS NOREFS;                                01S0253
         NOPR  0
*                 RFY                                           01S0254
*                  (GPR00P,                                     01S0254
*                   GPR01P,                                     01S0254
*                   GPR04P,                                     01S0254
*                   GPR05P,                                     01S0254
*                   GPR15P) UNRSTD;                             01S0254
*               END;                /* *** END OF TPQUE GENERATION   */
*               PORRTPQ=ON;         /* SHOWS THAT REPLY HAS ALREADY
*                                      BEEN SATISFIED                */
         OI    PORRTPQ(CRPPTR),B'10000000'                      01S0256
*               RPLRTNCD='00'X;     /* SET SUCCESSFUL RET CODE       */
         L     @11,OCWRPL(,CRPOCWPT)                            01S0257
         MVI   RPLRTNCD(@11),X'00'                              01S0257
*               RPLFDB2='00'X;      /* SET SUCCESSFUL RET CODES      */
         MVI   RPLFDB2(@11),X'00'                               01S0258
*             END;                                              01S0259
*           ELSE                                                01S0260
*             ;                                                 01S0260
*                                                               01S0260
@RF00233 DS    0H                                               01S0261
*/*   WE WILL NOW RESTORE THE RDT LOCK TO SHARED                     */
*/*** START -TPUNLOCK (RDTLOCK)- **                                  */
*                                                               01S0261
*           DO;                                                 01S0261
*                                                               01S0261
*/* ATBUILD (ISTRPH,ISTLOK,ISTCRA)                                   */
*/* END OF ATBUILD                                                   */
*                                                               01S0262
*             RFY                                               01S0262
*              (GPR00P,                                         01S0262
*               GPR01P,                                         01S0262
*               GPR02P,                                         01S0262
*               GPR03P,                                         01S0262
*               GPR04P,                                         01S0262
*               GPR15P) RSTD;                                   01S0262
*             GENERATE REFS(GPR00P,GPR01P,GPR15P,RPHWORK) SETS(RPHWORK)
*                 ;                                             01S0263
         STM GPR00P,GPR15P,RPHWORK(GPR01P)
*             GPR02P=ADDR(ATCRDTLK);/* SET PARAM - LOCKWORD PTR      */
         L     GPR02P,OCWACVT(,CRPOCWPT)                        01S0264
         LA    GPR02P,ATCRDTLK(,GPR02P)                         01S0264
*             GPR04P=GPR01P->RPHCRR;/* SET PARAM - ISTCRA PTR        */
         L     GPR04P,RPHCRR(,GPR01P)                           01S0265
*             GPR00P=CRALMS03;      /* SET PARAM - LOCK LEVEL FLAG   */
         LA    GPR00P,4                                         01S0266
*             GPR03P=ADDR(GPR04P->CRAL3PTR);/* SET PARAM - LOCK LEVEL
*                                      PTR                           */
         LA    GPR03P,CRAL3PTR(,GPR04P)                         01S0267
*             DO;                   /* LISATCVT                 01S0268
*                                      CVTBASE(PAGEABLE,(GPR15P))    */
*               GPR15P=ATCLCPTR;    /* SET UP ATCVT POINTER          */
         L     GPR15P,ATCLCPTR                                  01S0269
*             END;                  /* LISATCVT                      */
*             GPR15P=GPR15P->ATCAP33;                           01S0271
         L     GPR15P,ATCAP33(,GPR15P)                          01S0271
*             DCL                                               01S0272
*               FMZL0033 BASED(GPR15P) LABEL VALUERANGE(*);     01S0272
*             CALL FMZL0033;                                    01S0273
         BALR  @14,@15                                          01S0273
*             GENERATE REFS(GPR00P,GPR01P,GPR15P,RPHWORK) SETS(GPR00P,
*                 GPR01P,GPR02P,GPR03P,GPR04P,GPR05P,GPR06P,GPR07P,
*                 GPR08P,GPR09P,GPR10P,GPR11P,GPR12P,GPR13P,GPR14P,
*                 GPR15P);                                      01S0274
         LM GPR00P,GPR15P,RPHWORK(GPR01P)
*             RFY                                               01S0275
*              (GPR00P,                                         01S0275
*               GPR01P,                                         01S0275
*               GPR02P,                                         01S0275
*               GPR03P,                                         01S0275
*               GPR04P,                                         01S0275
*               GPR15P) UNRSTD;                                 01S0275
*           END;                                                01S0276
*                                                               01S0276
*/*** END -TPUNLOCK (RDTLOCK)- **                                    */
*/*** START -TPLOCK (RDTLOCK)TYPE(SHARE)- **                         */
*                                                               01S0277
*           DO;                                                 01S0277
*             RFY                                               01S0278
*              (GPR00P,                                         01S0278
*               GPR01P,                                         01S0278
*               GPR02P,                                         01S0278
*               GPR03P,                                         01S0278
*               GPR04P,                                         01S0278
*               GPR15P) RSTD;                                   01S0278
*             GENERATE REFS(GPR00P,GPR01P,GPR15P,RPHWORK) SETS(RPHWORK)
*                 ;                                             01S0279
         STM GPR00P,GPR14P,RPHWORK(GPR01P)
*             GPR15P=ATCAP35;       /* ADDRESS OF LOCK ROUTINE       */
         L     @11,OCWACVT(,CRPOCWPT)                           01S0280
         L     GPR15P,ATCAP35(,@11)                             01S0280
*             GPR02P=ADDR(ATCRDTLK);/* SET PARAM - LOCKWORD PTR      */
         LA    GPR02P,ATCRDTLK(,@11)                            01S0281
*             GPR04P=GPR01P->RPHCRR;/* SET PARAM - ISTCRA PTR        */
         L     GPR04P,RPHCRR(,GPR01P)                           01S0282
*             GPR00P=CRALMS03;      /* SET PARAM - LOCK LEVEL FLAG   */
         LA    GPR00P,4                                         01S0283
*             GPR03P=ADDR(GPR04P->CRAL3PTR);/* SET PARAM - LOCK LEVEL
*                                      PTR                           */
         LA    GPR03P,CRAL3PTR(,GPR04P)                         01S0284
*             DCL                                               01S0285
*               FMZL0043 BASED(GPR15P) LABEL VALUERANGE(*);     01S0285
*             CALL FMZL0043;                                    01S0286
         BALR  @14,@15                                          01S0286
*             GENERATE REFS(GPR00P,GPR01P,GPR14P,RPHWORK) SETS(GPR00P,
*                 GPR01P,GPR02P,GPR03P,GPR04P,GPR05P,GPR06P,GPR07P,
*                 GPR08P,GPR09P,GPR10P,GPR11P,GPR12P,GPR13P,GPR14P,
*                 GPR15P);                                      01S0287
         LM GPR00P,GPR15P,RPHWORK(GPR01P)
*             RFY                                               01S0288
*              (GPR00P,                                         01S0288
*               GPR01P,                                         01S0288
*               GPR02P,                                         01S0288
*               GPR03P,                                         01S0288
*               GPR04P,                                         01S0288
*               GPR15P) UNRSTD;                                 01S0288
*           END;                                                01S0289
*                                                               01S0289
*/*** END -TPLOCK (RDTLOCK)TYPE(SHARE)- **                           */
*                                                               01S0290
*           RFY                                                 01S0290
*             CRPREG15 RSTD;                                    01S0290
*           IF CRPREG15=ZERO THEN                               01S0291
         LTR   CRPREG15,CRPREG15                                01S0291
         BZ    @RT00291                                         01S0291
*             ;                     /* TPLOCK SUCCESSFUL             */
*           ELSE                                                01S0293
*             DO;                                               01S0293
*               RPLRTNCD='24'X;     /* TPLOCK NOT ABLE TO BE RESTORED*/
         L     @14,OCWRPL(,CRPOCWPT)                            01S0294
         MVI   RPLRTNCD(@14),X'24'                              01S0294
*               RPLFDB2='06'X;                                  01S0295
         MVI   RPLFDB2(@14),X'06'                               01S0295
*             END;                                              01S0296
*           RFY                                                 01S0297
*             CRPREG15 UNRSTD;                                  01S0297
@RT00291 DS    0H                                               01S0298
*         END;                                                  01S0298
*       ELSE                                                    01S0299
*         DO;                                                   01S0299
         B     @RC00188                                         01S0299
@RF00188 DS    0H                                               01S0300
*           RPLRTNCD='24'X;         /* TPLOCK NOT OBTAINED COULD NOT
*                                      CONTINUE PROCESS              */
         L     @11,OCWRPL(,CRPOCWPT)                            01S0300
         MVI   RPLRTNCD(@11),X'24'                              01S0300
*           RPLFDB2='06'X;                                      01S0301
         MVI   RPLFDB2(@11),X'06'                               01S0301
*         END;                                                  01S0302
*     END;                                                      01S0303
*   ELSE                                                        01S0304
*                                                               01S0304
*/* EITHER THE REPLY HAS ALREADY BEEN SATISFIED OR  NOT FOUND        */
*                                                               01S0304
*     IF CRPFND=OFF THEN                                        01S0304
         B     @RC00156                                         01S0304
@RF00156 LA    @11,176                                          01S0304
         ALR   @11,CRPOCWPT                                     01S0304
         TM    CRPFND(@11),B'10000000'                          01S0304
         BNZ   @RF00304                                         01S0304
*       DO;                                                     01S0305
*         IF(CRPNUM(1)<CHAR0×CRPNUM(1)>CHAR9×CRPNUM(2)<CHAR0×CRPNUM(2)>
*             CHAR9) THEN                                       01S0306
         CLI   CRPNUM(@11),C'0'                                 01S0306
         BL    @RT00306                                         01S0306
         CLI   CRPNUM(@11),C'9'                                 01S0306
         BH    @RT00306                                         01S0306
         CLI   CRPNUM+1(@11),C'0'                               01S0306
         BL    @RT00306                                         01S0306
         CLI   CRPNUM+1(@11),C'9'                               01S0306
         BNH   @RF00306                                         01S0306
@RT00306 DS    0H                                               01S0307
*           DO;                     /* THE REPLY ID IS NON-NUMERIC
*                                      AND INVALID                   */
*             RPLRTNCD='08'X;       /* RPL ERROR CODE                */
         L     @11,OCWRPL(,CRPOCWPT)                            01S0308
         MVI   RPLRTNCD(@11),X'08'                              01S0308
*             RPLFDB2='6E'X;        /* RPL ERROR CODE                */
         MVI   RPLFDB2(@11),X'6E'                               01S0309
*             POPMSGID='195I';      /* SET MSG ID FOR TPMSG          */
         MVC   POPMSGID+336(4,CRPOCWPT),@CC01205                01S0310
*             CALL CRPMSG;                                      01S0311
         BAL   @14,CRPMSG                                       01S0311
*           END;                                                01S0312
*         ELSE                                                  01S0313
*           DO;                     /* REPLY DOES NOT EXIST          */
         B     @RC00306                                         01S0313
@RF00306 DS    0H                                               01S0314
*             RPLRTNCD='08'X;       /* RPL ERROR CODE                */
         L     @11,OCWRPL(,CRPOCWPT)                            01S0314
         MVI   RPLRTNCD(@11),X'08'                              01S0314
*             RPLFDB2='6E'X;        /* RPL ERROR CODE                */
         MVI   RPLFDB2(@11),X'6E'                               01S0315
*             POPMSGID='194I';      /* SET MSGID FOR TPMSG           */
         MVC   POPMSGID+336(4,CRPOCWPT),@CC01206                01S0316
*             CALL CRPMSG;                                      01S0317
         BAL   @14,CRPMSG                                       01S0317
*           END;                                                01S0318
*       END;                                                    01S0319
*     ELSE                                                      01S0320
*       DO;                         /* THE REPLY MUST HAVE ALREADY
*                                      BEEN SATISFIED                */
         B     @RC00304                                         01S0320
@RF00304 DS    0H                                               01S0321
*         RPLRTNCD='08'X;           /* RPL ERROR CODE                */
         L     @11,OCWRPL(,CRPOCWPT)                            01S0321
         MVI   RPLRTNCD(@11),X'08'                              01S0321
*         RPLFDB2='6E'X;            /* RPL ERROR CODE                */
         MVI   RPLFDB2(@11),X'6E'                               01S0322
*         POPMSGID='194I';          /* SET MSG ID FOR TPMSG          */
         MVC   POPMSGID+336(4,CRPOCWPT),@CC01206                01S0323
*         CALL CRPMSG;                                          01S0324
         BAL   @14,CRPMSG                                       01S0324
*       END;                                                    01S0325
         EJECT
*CRPMSG:                                                        01S0326
*   PROC OPTIONS(NOSAVE NOSAVEAREA);                            01S0326
*                                                               01S0326
         B     @PB00002                                         01S0326
CRPMSG   DS    0H                                               01S0327
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS ROUTINE SETS UP AREAS TO ISSUE A TPMSG. AREAS ARE        */
*   /* INITIALIZED IN POPWA                                          */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0327
*   RFY                                                         01S0327
*    (CRPRTPT,                                                  01S0327
*     CRPSVPT) RSTD;                                            01S0327
*   CRPR14SV=CRPRTPT;               /* REG 14 IS SAVED FOR RETURN @  */
         LA    @15,176                                          01S0328
         ALR   @15,CRPOCWPT                                     01S0328
         ST    CRPRTPT,CRPR14SV(,@15)                           01S0328
*   CRPR13SV=CRPSVPT;               /* REG 13 SAVE AREA @ IS SAVED   */
         ST    CRPSVPT,CRPR13SV(,@15)                           01S0329
*   RFY                                                         01S0330
*     CRPRTPT UNRSTD;                                           01S0330
*   CRPSVPT=ADDR(POPSAVE);          /* PROVIDES SAVE AREA FOR TPMSG  */
         LA    @11,336                                          01S0331
         ALR   @11,CRPOCWPT                                     01S0331
         LA    CRPSVPT,POPSAVE(,@11)                            01S0331
*   RFY                                                         01S0332
*    (CRPMSGID,                                                 01S0332
*     CRPVARDT) RSTD;                                           01S0332
*   CRPMSGID=ADDR(POPMSGID);        /* SET POINTER TO MSG ID         */
         LA    CRPMSGID,POPMSGID(,@11)                          01S0333
*   CRPVARDT=ADDR(CRPNUM);          /* SET PTR TO VAR DATA           */
         LA    CRPVARDT,CRPNUM(,@15)                            01S0334
*/*TPMSG MSGID((CRPMSGID))MSG((CRPVARDT))OPTIONS(POPTPOPT)PLAREA(POPPLA
*                                                                    */
*                                                               01S0335
*   DO;                                                         01S0335
*     DCL                                                       01S0336
*       REG1048 REG(1) PTR;                                     01S0336
*     RFY                                                       01S0337
*      (REG1048) RSTD;                                          01S0337
*     RFY                                                       01S0338
*      (EMCR13) RSTD;                                           01S0338
*     DCL                                                       01S0339
*       1 * BASED(REG1048),                                     01S0339
*        2 CMZID048 PTR(31),                                    01S0339
*        2 *,                                                   01S0339
*         3 CMZRL048 PTR(8),                                    01S0339
*         3 CMZRA048 PTR(24) BDY(BYTE),                         01S0339
*        2 CMZEA048 PTR(31),                                    01S0339
*        2 CMZVP048 PTR(31);                                    01S0339
*                                                               01S0339
*/*XREGSET  PID('PLAREA')PPARM(POPPLA)RREG(,REG1048)                 */
*                                                               01S0340
*     DO;                                                       01S0340
*       REG1048=ADDR(POPPLA);       /* SET RREG SYMBOL TO ADDRESS OF
*                                      PPARM OPERAND                 */
         LA    REG1048,POPPLA(,@11)                             01S0341
*     END;                          /* XREGSET                       */
*     CMZID048=0;                                               01S0343
         SLR   @09,@09                                          01S0343
         ST    @09,CMZID048(,REG1048)                           01S0343
*     CMZRL048=0;                                               01S0344
         MVI   CMZRL048(REG1048),X'00'                          01S0344
*     CMZRA048=0;                                               01S0345
         STCM  @09,7,CMZRA048(REG1048)                          01S0345
*     CMZEA048=0;                                               01S0346
         ST    @09,CMZEA048(,REG1048)                           01S0346
*     CMZVP048=0;                                               01S0347
         ST    @09,CMZVP048(,REG1048)                           01S0347
*     CMZID048=CRPMSGID;                                        01S0348
         ST    CRPMSGID,CMZID048(,REG1048)                      01S0348
*     CMZVP048=CRPVARDT;                                        01S0349
         ST    CRPVARDT,CMZVP048(,REG1048)                      01S0349
*     DCL                                                       01S0350
*       CMZSA048(18) PTR(31) BASED(EMCR13);                     01S0350
*     CMZSA048(5)=ADDR(POPTPOPT);                               01S0351
         LA    @11,POPTPOPT(,@11)                               01S0351
         ST    @11,CMZSA048+16(,EMCR13)                         01S0351
*     DCL                                                       01S0352
*       REG15048 REG(15) PTR;                                   01S0352
*     RFY                                                       01S0353
*       REG15048 RSTD;                                          01S0353
*     DO;                           /* LISATCVT                 01S0354
*                                      CVTBASE(PAGEABLE,(REG15048))  */
*       REG15048=ATCLCPTR;          /* SET UP ATCVT POINTER          */
         L     REG15048,ATCLCPTR                                01S0355
*     END;                          /* LISATCVT                      */
*     DCL                                                       01S0357
*       CMTA048 BASED(REG15048) ENTRY VALUERANGE(*);            01S0357
*     REG15048=REG15048->ATCMSGP;                               01S0358
         L     REG15048,ATCMSGP(,REG15048)                      01S0358
*     CALL CMTA048;                                             01S0359
         BALR  @14,@15                                          01S0359
*     RESPECIFY                                                 01S0360
*      (REG1048,                                                01S0360
*       REG15048) UNRESTRICTED;                                 01S0360
*     RFY                                                       01S0361
*      (EMCR13) UNRSTD;                                         01S0361
*   END;                                                        01S0362
*   RFY                                                         01S0363
*    (CRPMSGID,                                                 01S0363
*     CRPVARDT) UNRSTD;                                         01S0363
*   RFY                                                         01S0364
*     CRPRTPT RSTD;                                             01S0364
*   CRPRPHPT=OCWRPH;                /* RESTORE RPH ADD               */
         L     CRPRPHPT,OCWRPH(,CRPOCWPT)                       01S0365
*   CRPRTPT=CRPR14SV;               /* RESTORE RET @                 */
         LA    @11,176                                          01S0366
         ALR   @11,CRPOCWPT                                     01S0366
         L     CRPRTPT,CRPR14SV(,@11)                           01S0366
*   CRPSVPT=CRPR13SV;               /* RESTORE SAVE AREA @           */
         L     CRPSVPT,CRPR13SV(,@11)                           01S0367
*   RETURN;                                                     01S0368
@EL00002 DS    0H                                               01S0368
@EF00002 DS    0H                                               01S0368
@ER00002 BR    @14                                              01S0368
*   RFY                                                         01S0369
*     CRPRTPT UNRSTD;                                           01S0369
*   END CRPMSG;                                                 01S0370
         EJECT
*CRPEDIT:                                                       01S0371
*   PROC OPTIONS(NOSAVE NOSAVEAREA);                            01S0371
CRPEDIT  DS    0H                                               01S0372
*   RFY                                                         01S0372
*     CRPRTPT RSTD;                                             01S0372
*   CRPR14SV=CRPRTPT;                                           01S0373
         LA    @15,176                                          01S0373
         ALR   @15,CRPOCWPT                                     01S0373
         ST    CRPRTPT,CRPR14SV(,@15)                           01S0373
*   RFY                                                         01S0374
*     CRPRTPT UNRSTD;                                           01S0374
*   RFY                                                         01S0375
*    (CRPBASE,                                                  01S0375
*     CRPPTRA) RSTD;                                            01S0375
*   RFY                                                         01S0376
*     CRPCHARA BASED(CRPPTRA);                                  01S0376
*   RFY                                                         01S0377
*     CRPCHARB BASED(CRPBASE);                                  01S0377
*   RFY                                                         01S0378
*     CRPCHARC BASED(CRPSTRNG);     /* THIS WILL BE THE ACTUAL TEXT
*                                      PTR                           */
*/*                                               AFTER IT IS EDITED */
*                                                               01S0379
*   CRPPTRA=CRPSTRNG+TWO;           /* SET TO SECOND CHAR IN TEXT    */
         LA    CRPPTRA,2                                        01S0379
         ALR   CRPPTRA,CRPSTRNG                                 01S0379
*   CRPBASE=CRPSTRNG+ONE;           /* SET TO FIRST CHAR IN TEXT     */
         LA    CRPBASE,1                                        01S0380
         ALR   CRPBASE,CRPSTRNG                                 01S0380
*   CRPSTRNG=CRPBASE;               /* SET TO FIRST CHAR IN TEXT     */
         LR    CRPSTRNG,CRPBASE                                 01S0381
*   CRPFND=OFF;                     /* INIT BIT                      */
*   CRPSAME=OFF;                    /* SIGNALS THAT WE HAVE FOUND TWO
*                                      CONSECUTIVE QUOTES            */
         LA    @14,176                                          01S0383
         ALR   @14,CRPOCWPT                                     01S0383
         NI    CRPFND(@14),B'01011111'                          01S0383
*   CRPBUFLN=ZERO;                                              01S0384
*                                                               01S0384
         SLR   @11,@11                                          01S0384
         ST    @11,CRPBUFLN(,@14)                               01S0384
*   /*****************************************************************/
*   /*                                                               */
*   /* THE FOLLOWING LOOP WILL USE THREE POINTERS: TWO TO TELL US    */
*   /* WHEN WE HAVE HIT UPON A DOUBLE QUOTE COMBIN-                  */
*   /* NATION(CHARA,CHARB) AND THE THIRD TO KEEP TRACK OF WHERE WE   */
*   /* ARE IN ACTUAL TEXT. THERE WILL ALSO BE A A TOTAL TEXT CTR SO  */
*   /* THAT WE DONT EXCEED 126 CHARS                                 */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0385
*   DO WHILE(CRPFND=OFF&CRPBUFLN<=RPLRLEN);                     01S0385
         B     @DE00385                                         01S0385
@DL00385 DS    0H                                               01S0386
*     IF(CRPCHARA=QUOTE&CRPCHARB=QUOTE) THEN                    01S0386
         CLI   CRPCHARA(CRPPTRA),X'7D'                          01S0386
         BNE   @RF00386                                         01S0386
         CLI   CRPCHARB(CRPBASE),X'7D'                          01S0386
         BNE   @RF00386                                         01S0386
*       DO;                         /* WE HAVE A DOUBLE QUOTE TO BE
*                                      REDUCED TO A SINGLE QUOTE     */
*         CRPSAME=ON;               /* SIGNAL FOR DOUBLE QUOTE       */
         OI    CRPSAME+176(CRPOCWPT),B'00100000'                01S0388
*         CRPPTRA=CRPPTRA+ONE;      /* ADVANCE PTR                   */
         LA    @14,1                                            01S0389
         ALR   CRPPTRA,@14                                      01S0389
*         CRPBASE=CRPBASE+ONE;      /* ADVANCE PTR                   */
         ALR   CRPBASE,@14                                      01S0390
*       END;                                                    01S0391
*     ELSE                                                      01S0392
*       ;                                                       01S0392
@RF00386 DS    0H                                               01S0393
*     CRPCHARC=CRPCHARB;            /* IF THEY DIFFER(IE WE HAVE HIT
*                                      DOU. QUOTE) THEN THIS WILL
*                                      EDIT BUFFER CORRECTLY         */
         MVC   CRPCHARC(1,CRPSTRNG),CRPCHARB(CRPBASE)           01S0393
*     IF CRPSAME=OFF&CRPCHARC=QUOTE /* END OF BUFFER TEXT?           */
*       THEN                                                    01S0394
         LA    @14,176                                          01S0394
         ALR   @14,CRPOCWPT                                     01S0394
         TM    CRPSAME(@14),B'00100000'                         01S0394
         BNZ   @RF00394                                         01S0394
         CLI   CRPCHARC(CRPSTRNG),X'7D'                         01S0394
         BNE   @RF00394                                         01S0394
*       CRPFND=ON;                  /* WE WANT TO EXIT LOOP          */
         OI    CRPFND(@14),B'10000000'                          01S0395
*     ELSE                                                      01S0396
*       DO;                         /* ADVANCE ALL POINTERS AND 01S0396
*                                      REINIT FLAGS                  */
         B     @RC00394                                         01S0396
@RF00394 DS    0H                                               01S0397
*         CRPSAME=OFF;                                          01S0397
         NI    CRPSAME+176(CRPOCWPT),B'11011111'                01S0397
*         CRPPTRA=CRPPTRA+ONE;                                  01S0398
         LA    @14,1                                            01S0398
         ALR   CRPPTRA,@14                                      01S0398
*         CRPBASE=CRPBASE+ONE;                                  01S0399
         ALR   CRPBASE,@14                                      01S0399
*         CRPSTRNG=CRPSTRNG+ONE;                                01S0400
         ALR   CRPSTRNG,@14                                     01S0400
*       END;                                                    01S0401
*     CRPBUFLN=((CRPBASE-CRPADBUF)+ONE);/* COMPUTE TOTAL LENGTH SO
*                                      FAR                           */
@RC00394 LR    @14,CRPBASE                                      01S0402
         SLR   @14,CRPADBUF                                     01S0402
         AH    @14,@CH00093                                     01S0402
         ST    @14,CRPBUFLN+176(,CRPOCWPT)                      01S0402
*   END;                                                        01S0403
@DE00385 LA    @14,176                                          01S0403
         ALR   @14,CRPOCWPT                                     01S0403
         TM    CRPFND(@14),B'10000000'                          01S0403
         BNZ   @DC00385                                         01S0403
         L     @11,OCWRPL(,CRPOCWPT)                            01S0403
         L     @14,CRPBUFLN(,@14)                               01S0403
         C     @14,RPLRLEN(,@11)                                01S0403
         BNH   @DL00385                                         01S0403
@DC00385 DS    0H                                               01S0404
*   CRPBUFLN=(CRPSTRNG-CRPADBUF)-(CRPBGN-ONE);/* ACTUAL LEN OF TEXT  */
         LA    @14,176                                          01S0404
         ALR   @14,CRPOCWPT                                     01S0404
         LR    @11,CRPSTRNG                                     01S0404
         SLR   @11,CRPADBUF                                     01S0404
         L     @09,CRPBGN(,@14)                                 01S0404
         BCTR  @09,0                                            01S0404
         SLR   @11,@09                                          01S0404
         ST    @11,CRPBUFLN(,@14)                               01S0404
*   RFY                                                         01S0405
*    (CRPBASE,                                                  01S0405
*     CRPPTRA) UNRSTD;                                          01S0405
*   RFY                                                         01S0406
*     CRPRTPT RSTD;                                             01S0406
*   CRPRTPT=CRPR14SV;               /* RESTORE RETURN @              */
         LA    @11,176                                          01S0407
         ALR   @11,CRPOCWPT                                     01S0407
         L     CRPRTPT,CRPR14SV(,@11)                           01S0407
*   RETURN;                                                     01S0408
@EL00003 DS    0H                                               01S0408
@EF00003 DS    0H                                               01S0408
@ER00003 BR    @14                                              01S0408
*   RFY                                                         01S0409
*     CRPRTPT UNRSTD;                                           01S0409
*   END CRPEDIT;                                                01S0410
         EJECT
*CRPCBSH:                                                       01S0411
*   PROC OPTIONS(NOSAVE NOSAVEAREA);                            01S0411
*                                                               01S0411
CRPCBSH  DS    0H                                               01S0412
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS SUBROUTINE SEARCHES FOR A PROCB WITH A MATCHING REPLY    */
*   /* NUMBER                                                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0412
*   RFY                                                         01S0412
*     CRPRTPT RSTD;                                             01S0412
*   CRPR14SV=CRPRTPT;                                           01S0413
         LA    @15,176                                          01S0413
         ALR   @15,CRPOCWPT                                     01S0413
         ST    CRPRTPT,CRPR14SV(,@15)                           01S0413
*   RFY                                                         01S0414
*     CRPRTPT UNRSTD;                                           01S0414
*   RFY                                                         01S0415
*     CRPBASE RSTD;                                             01S0415
*   IF POCAWTRQ=ZERO                /* NO AWAITING REPLIES           */
*     THEN                                                      01S0416
         ICM   @11,7,POCAWTRQ(CRPPOCB)                          01S0416
         BNZ   @RF00416                                         01S0416
*     CRPFND=OFF;                   /* IT WAS NOT FOUND              */
         NI    CRPFND(@15),B'01111111'                          01S0417
*   ELSE                                                        01S0418
*     DO;                                                       01S0418
         B     @RC00416                                         01S0418
@RF00416 DS    0H                                               01S0419
*       CRPPTR=POCAWTRQ;            /* SET PTR TO AWAIT. REP. QUEUE  */
         SLR   CRPPTR,CRPPTR                                    01S0419
         ICM   CRPPTR,7,POCAWTRQ(CRPPOCB)                       01S0419
*       CRPBASE=CRPPTR;                                         01S0420
         LR    CRPBASE,CRPPTR                                   01S0420
*       RFY                                                     01S0421
*         ISTPORCB BASED(CRPPTR);                               01S0421
*                                                               01S0421
*       /*************************************************************/
*       /*                                                           */
*       /* THIS LOOP SEARCHES QUEUE FOR MATCH IN REP ID IF MATCH IS  */
*       /* FOUND, PORCB ADDRESS WILL BE IN CRPPTR                    */
*       /*                                                           */
*       /*************************************************************/
*                                                               01S0422
*       DO UNTIL(PORFWD=ZERO×CRPFND=ON);                        01S0422
@DL00422 DS    0H                                               01S0423
*         CRPPTR=CRPBASE;                                       01S0423
         LR    CRPPTR,CRPBASE                                   01S0423
*         IF CRPNUM=POREPID         /* IF THE REP IDS MATCH          */
*           THEN                                                01S0424
         LA    @11,176                                          01S0424
         ALR   @11,CRPOCWPT                                     01S0424
         CLC   CRPNUM(2,@11),POREPID(CRPPTR)                    01S0424
         BNE   @RF00424                                         01S0424
*           CRPFND=ON;              /* WE WANT TO EXIT LOOP          */
         OI    CRPFND(@11),B'10000000'                          01S0425
*         ELSE                                                  01S0426
*           CRPBASE=PORFWD;         /* POINT TO NEXT PORCB           */
         B     @RC00424                                         01S0426
@RF00424 SLR   CRPBASE,CRPBASE                                  01S0426
         ICM   CRPBASE,7,PORFWD(CRPPTR)                         01S0426
*       END;                                                    01S0427
@RC00424 DS    0H                                               01S0427
@DE00422 ICM   @11,7,PORFWD(CRPPTR)                             01S0427
         BZ    @DC00422                                         01S0427
         TM    CRPFND+176(CRPOCWPT),B'10000000'                 01S0427
         BNO   @DL00422                                         01S0427
@DC00422 DS    0H                                               01S0428
*     END;                                                      01S0428
*   RFY                                                         01S0429
*     CRPBASE UNRSTD;                                           01S0429
@RC00416 DS    0H                                               01S0430
*   RFY                                                         01S0430
*     CRPRTPT RSTD;                                             01S0430
*   CRPRTPT=CRPR14SV;               /* RESTORE RET @                 */
         L     CRPRTPT,CRPR14SV+176(,CRPOCWPT)                  01S0431
*   RETURN;                                                     01S0432
@EL00004 DS    0H                                               01S0432
@EF00004 DS    0H                                               01S0432
@ER00004 BR    @14                                              01S0432
*   RFY                                                         01S0433
*     CRPRTPT UNRSTD;                                           01S0433
*   END CRPCBSH;                                                01S0434
*                                                               01S0434
@PB00004 DS    0H                                               01S0435
*/* TPEPILOG                                                         */
*                                                               01S0435
*   GEN(PRINT OFF);                                             01S0435
         PRINT OFF
*/*      VTAM PROCESS OPTION DEFINITION BLOCK                       */
*/*  USE RESERVED BIT                                  002 06/10/74 */
*/*                                                                 */
*DECLARE                                                        01S0436
*  1 ISTPROCD BDY(WORD) BASED,                                  01S0436
*    2 PROPROC  BIT(32),          /* PROCESSING OPTIONS             */
*      3 PROPROC1 BIT(8),         /* PROCESSING OPTIONS - 1         */
*        4 PROASYIP BIT(1),       /* 1=ASYIPX 0=NASYIPX             */
*        4 PROTRUNC BIT(1),       /* 1=TRUNC 0=KEEP                 */
*        4 PROXPOPT BIT(1),       /* 1=BINARY 0=NBINARY             */
*        4 PRODFASY BIT(1),       /* PROC-0=NDFASYX/1=DFASYX        */
*        4 PRORESPX BIT(1),       /* PROC-0=NRESPX/1=RESPX          */
*        4 PROCA    BIT(1),       /* 1=RECEIVE ANY CA/0=NO CA       */
*        4 PROCS    BIT(1),       /* 1=RECEIVE ANY CS/0=NO CS       */
*        4 PRORPLC  BIT(1),       /* 1=OPTION IN RPL/0=NO RPL       */
*      3 PROPROC2 BIT(8),         /* PROCESSING OPTIONS - 2         */
*        4 PRORSV03 BIT(1),       /* RESERVED                       */
*        4 PROERPO  BIT(1),       /* 1=NERPOUT 0=ERPOUT             */
*        4 PROLGOT  BIT(1),       /* 1=NLGOUT 0=LGOUT               */
*        4 PRORSV04 BIT(1),       /* RESERVED                       */
*        4 PRORSV05 BIT(1),       /* RESERVED                       */
*        4 PRONTFL  BIT(1),       /* 1=NTMFLL 0=TMFLL               */
*        4 PROEMLC  BIT(1),       /* 1=ELC 0=NELC                   */
*        4 PROCFTX  BIT(1),       /* 1=CONFTXT 0=NCONFTXT           */
*      3 PROPROC3 BIT(8),         /* PROCESSING OPTIONS - 3         */
*        4 PRORSV07 BIT(1),       /* RESERVED                       */
*        4 PROERPI  BIT(1),       /* 1=NERPIN 0=ERPIN               */
*        4 PROLGIN  BIT(1),       /* 1=NLGIN 0=LGIN                 */
*        4 PRONTO   BIT(1),       /* 1=NTIMEOUT 0=TIMEOUT           */
*        4 PROSUBLK BIT(1),       /* OFF = INHIBIT SUBBLOCKING      */
*                                 /* ON = ALLOW SUBBLOCKING         */
*        4 PROMONIT BIT(1),       /* 1=MONITOR 0=NMONITOR           */
*        4 PROMONT2 BIT(1),       /* 1=MONITOR, 0=NMONITOR          */
*        4 PROMONT3 BIT(1),       /* 1=CONT.MONIT.          @ZA19910*/
*                                 /* 0=STOP AFTER FIRST ATTN@ZA19910*/
*      3 PROPROC4 BIT(8),         /* PROCESSING OPTIONS - 4         */
*        4 PROEIB   BIT(1),       /* 1=EIB 0=NEIB                   */
*        4 PRORSV12 BIT(1),       /* RESERVED                       */
*        4 PRORSV13 BIT(1),       /* RESERVED                       */
*        4 PRORSV14 BIT(1),       /* RESERVED                       */
*        4 PROMODB  BIT(1),       /* BLOCK                          */
*        4 PROMODM  BIT(1),       /* MSG                            */
*        4 PROMODT  BIT(1),       /* TRANS (DEFAULT)                */
*        4 PROMODC  BIT(1);       /* CONT                           */
*/*                                                                 */
*/*                                                                 */
*DCL 1 PROPROCS BASED(ADDR(ISTPROCD)),  /* REDEFINITION OF      01S0437
*                                          OPTIONS FOR SETMODE MASK  */
*     2  PRORSV41 BIT(8),               /* PROCESSING OPTIONS - 1    */
*     2  PROSETMS CHAR(3),              /* SETMODE OPTION BYTES      */
*        3  PROSETM2 BIT(8),            /* PROCESSING OPTIONS - 2    */
*           4  PRORSV42 BIT(5),         /* RESERVED                  */
*           4  PROSNTFL BIT(1),         /* INHIBIT TIME FILL    01S0437
*                                          SS - ONLY                 */
*           4  PRORSV43 BIT(2),         /* RESERVED                  */
*        3  PROSETM3 BIT(8),            /* PROCESSING OPTIONS - 3    */
*           4  PRORSV44 BIT(3),         /* RESERVED                  */
*           4  PROSNTO BIT(1),          /* ON = BSC - EIB INSERTION
*                                          SS - INHIBIT TIMEOUT      */
*           4  PRORSV45 BIT(1),         /* RESERVED                  */
*           4  PROSMONT BIT(1),         /* ON = MONITOR FOR ATTN
*                                          INTS - SS ONLY            */
*           4  PRORSV46 BIT(2),         /* RESERVED                  */
*        3  PROSETM4 BIT(8),            /* PROCESSING OPTIONS - 4    */
*           4  PROSCON  BIT(1),         /* ON = CONTINUOUS MODE 01S0437
*                                          (TPIOS ONLY)              */
*           4  PRORSV47 BIT(5),         /* RESERVED                  */
*           4  PROSRDEF BIT(2);         /* RECORD DEFINITION    01S0437
*                                          01 = BLOCK, 10 = MSG,
*                                          11 = TRANSMISSION         */
*DCL PROSBLCK BIT(8) CONSTANT('01'X); /* TO INDICATE BLOCK MODE      */
*DCL PROSMSG  BIT(8) CONSTANT('02'X); /* TO INDICATE MSG MODE        */
*DCL PROSTRNS BIT(8) CONSTANT('03'X); /* TO INDICATE TRANSMISSION
*                                          MODE                      */
*DCL PROSCONT BIT(8) CONSTANT('83'X); /* TO INDICATE CONTINUOUS MODE */
*DCL PROSANDC BIT(8) CONSTANT('7F'X); /* TO EQUATE CONT TO TRANS
*                                          FOR 370X                  */
*DCL PROSORC  BIT(8) CONSTANT('80'X); /* TO RESTORE CONT INDICATOR   */
*/*   DEVICE CHARACTERISTICS TABLE - ORIGINATES IN RDT USED TO DEFINE
*    DEVICE CHARACTERISTICS IN DNCB,FMCB AND NIB  */            01S0444
*/*  INITIAL LEVEL                                     001 08/07/74  */
*DCL  1  ISTDEVCH  BDY(WORD)BASED,                              01S0444
*        2  DEVSHCH BIT(8),            /* DEV SCHED CHARACTERISTICS  */
*           3  DEVCHAR  BIT(8),        /* COMPATIBILITY EXISTING CODE*/
*              4  DEVINPUT  BIT(1),    /* DEVICE IS FOR INPUT        */
*              4  DEVOTPUT  BIT(1),    /* DEVICE IS FOR OUTPUT       */
*              4  DEVCONVR  BIT(1),    /* DEVICE IS CONVERSATION     */
*                                      /* RN DEFINITION              */
*              4  DEVSUBND  BIT(1),    /* DEVICE HAS SCHEDULABLE     */
*                                      /*   SUB-NODES                */
*              4  DEVSPS BIT(1),       /* DEV IS START PRINT SENSITIVE*
*              4  DEVNNSPT BIT(1),     /* NODE HAS NETWRK MNGMNT SPRT*/
*              4  DEVCCTL BIT(1),      /* NODE HAS CONN CNTRL DEPENDCS*
*              4  DEVRSV01  BIT(1),    /* RESERVED                   */
*        2  DEVTCODE BIT(8),           /* DEVICE TYPE CODES          */
*           3  DEVCHAR2  BIT(8),       /* COMPATIBILITY EXISTING CODE*/
*        2  DEVMCODE BIT(8),           /* DEVICE MODEL CODE           *
*        2  DEVFLAGS BIT(8),           /*USE DEPENDS ON DEVSHCH VALUES*
*           3  DEVFCCTL BIT(4),        /* USED IF DEVICE REQ CONN CTRL*
*              4  DEVCBSC BIT(1),      /* RESET ORDERLY, BI-SYNCH
*                                         TERMINALS EXCEPT 3270'S    */
*              4  DEVCSSL BIT(1),      /*RESET AT END OF COMMAND. 3270'
*                                         AND START/STOP EXCEPT TERMS
*                                         WITH REVERSE BREAK FEATURE */
*                                                               01S0444
*              4  DEVCRVB BIT(1),      /* RESET IMMEDIATE. START/STOP
*                                         TERMS WITH REVERSE BREAK
*                                         FEATURE                    */
*              4  DEVCSWL BIT(1),      /* 1=HIGHER NODE IS SWITCH CON-
*                                         NECTION, 0=LEASED CONNECTION*
*           3  DEVCHAR3 BIT(4),        /* COMPATIBILITY EXISTING CODE*/
*              4  DEVCATTN BIT(1),     /* TERMINAL CAN INTERRUPT WITH
*                                         ATTENTION                  */
*              4  DEVCCHEK BIT(1),     /* TERMINAL HAS CHECKING      */
*              4  DEVCSTCL BIT(1),     /* TERMINAL HAS STATION  01S0444
*                                         CONTROL                    */
*              4  DEVCSLPN BIT(1),     /* TERMINAL HAS SELECTOR PEN  */
*        2  DEVPHYSA CHAR(1),          /* PHYSICAL DEVICE ADDRESS    */
*        2  DEVRSV03 CHAR(3);          /* RESERVED                   */
*/* DEVICE TYPE CODES */                                        01S0445
*DCL DEV2740 BIT(8) CONSTANT ('01'X);  /* DEVICE IS A 2740           */
*DCL DEV2741 BIT(8) CONSTANT ('02'X);  /* DEVICE IS A 2741           */
*DCL DEV1050 BIT(8) CONSTANT ('03'X);  /* DEVICE IS A 1050           */
*DCL DEVTWX  BIT(8) CONSTANT ('04'X);  /* DEVICE IS A TWX            */
*DCL DEVWTTY BIT(8) CONSTANT ('05'X);  /* DEVICE IS A WTTY           */
*DCL DEV115A BIT(8) CONSTANT ('06'X);  /* DEVICE IS A 115A           */
*DCL DEV83B3 BIT(8) CONSTANT ('07'X);  /* DEVICE IS AN 83B3          */
*DCL DEV2715 BIT(8) CONSTANT ('08'X);  /* DEVICE IS A 2715           */
*DCL DEV2770 BIT(8) CONSTANT ('09'X);  /* DEVICE IS A 2770           */
*DCL DEV2780 BIT(8) CONSTANT ('0A'X);  /* DEVICE IS A 2780           */
*DCL DEV3735 BIT(8) CONSTANT ('0B'X);  /* DEVICE IS A 3735           */
*DCL DEV3780 BIT(8) CONSTANT ('0C'X);  /* DEVICE IS A 3780           */
*DCL DEV1130 BIT(8) CONSTANT ('0D'X);  /* DEVICE IS AN 1130          */
*DCL DEV1800 BIT(8) CONSTANT ('0E'X);  /* DEVICE IS AN 1800          */
*DCL DEV3125 BIT(8) CONSTANT ('11'X);  /* DEVICE IS A 3125           */
*DCL DEV3135 BIT(8) CONSTANT ('12'X);  /* DEVICE IS A 3135           */
*DCL DEVSYS3 BIT(8) CONSTANT ('13'X);  /* DEVICE IS SYS 3            */
*DCL DEV2701 BIT(8) CONSTANT ('14'X);  /* DEVICE IS A 2701 OZ05270   */
*DCL DEV2703 BIT(8) CONSTANT ('15'X);  /* DEVICE IS A 2703 OZ05270   */
*DCL DEV3704 BIT(8) CONSTANT ('16'X);  /* DEVICE IS A 3704           */
*DCL DEV3705 BIT(8) CONSTANT ('17'X);  /* DEVICE IS A 3705           */
*DCL DEV2980 BIT(8) CONSTANT ('18'X);  /* DEVICE IS A 2980           */
*DCL DEV3277 BIT(8) CONSTANT ('19'X);  /* DEVICE IS A 3277           */
*DCL DEV3284 BIT(8) CONSTANT ('1A'X);  /* DEVICE IS A 3284           */
*DCL DEV3286 BIT(8) CONSTANT ('1B'X);  /* DEVICE IS A 3286           */
*DCL DEV3275 BIT(8) CONSTANT ('1C'X);  /* DEVICE IS A 3275           */
*DCL DEV3741 BIT(8) CONSTANT ('1D'X);  /* DEVICE IS A 3741           */
*DCL DEV3747 BIT(8) CONSTANT ('1E'X);  /* DEVICE IS A 3747           */
*DCL DEVMTA  BIT(8) CONSTANT ('28'X);  /* DEVICE IS AN MTA           */
*DCL DEV2972 BIT(8) CONSTANT ('33'X);  /* DEVICE IS A 2972           */
*DCL DEV3271 BIT(8) CONSTANT ('34'X);  /* DEVICE IS A 3271           */
*DCL DEV3272 BIT(8) CONSTANT ('36'X);  /* DEVICE IS A 3272           */
*DCL DEVCC   BIT(8) CONSTANT ('35'X);  /* DEVICE IS A PHYSICAL UNIT  */
*DCL DEV1052 BIT(8) CONSTANT ('64'X);  /* DEVICE IS A 1052           */
*DCL DEV1053 BIT(8) CONSTANT ('65'X);  /* DEVICE IS A 1053           */
*DCL DEV1054 BIT(8) CONSTANT ('66'X);  /* DEVICE IS A 1054           */
*DCL DEV1055 BIT(8) CONSTANT ('67'X);  /* DEVICE IS A 1055           */
*DCL DEV1056 BIT(8) CONSTANT ('68'X);  /* DEVICE IS A 1056           */
*DCL DEV1057 BIT(8) CONSTANT ('69'X);  /* DEVICE IS A 1057           */
*DCL DEV1058 BIT(8) CONSTANT ('6A'X);  /* DEVICE IS A 1058           */
*DCL DEV1092 BIT(8) CONSTANT ('6B'X);  /* DEVICE IS A 1092           */
*DCL DEV1093 BIT(8) CONSTANT ('6C'X);  /* DEVICE IS A 1093           */
*DCL DEVLU   BIT(8) CONSTANT ('6D'X);  /* DEVICE IS A LOGICAL UNIT   */
*DCL DEV545  BIT(8) CONSTANT ('78'X);  /* DEVICE IS A 545            */
*DCL DEV1017 BIT(8) CONSTANT ('79'X);  /* DEVICE IS A 1017           */
*DCL DEV1018 BIT(8) CONSTANT ('7A'X);  /* DEVICE IS A 1018           */
*DCL DEV2203 BIT(8) CONSTANT ('7B'X);  /* DEVICE IS A 2203           */
*DCL DEV2213 BIT(8) CONSTANT ('7C'X);  /* DEVICE IS A 2213           */
*DCL DEV2265 BIT(8) CONSTANT ('7D'X);  /* DEVICE IS A 2265           */
*DCL DEV2502 BIT(8) CONSTANT ('7E'X);  /* DEVICE IS A 2502           */
*DCL DEV50   BIT(8) CONSTANT ('7F'X);  /* DEVICE IS A 50             */
*DCL DEV1255 BIT(8) CONSTANT ('80'X);  /* DEVICE IS A 1255           */
*DCL DEV5496 BIT(8) CONSTANT ('81'X);  /* DEVICE IS A 5496           */
*/* MODEL CODES */                                              01S0498
*DCL DEVMOD1 BIT(8) CONSTANT ('00'X);  /* MODEL 1                    */
*DCL DEVMOD2 BIT(8) CONSTANT ('01'X);  /* MODEL 2                    */
*/*  THIS STRUCTURE MAY BE USED TO MAP THE SESSION PARAMETERS AREA   */
*/*  OR THE DATA PORTION OF A BIND RU.                               */
*/*                                                                  */
*/*  TO MAP THE SESSION PARAMETERS AREA IN A LOGON MODE TABLE,       */
*/*  LOGON PARAMETERS AREA, OR BNDAREA, SPECIFY-                     */
*/*         RFY ISTBIND BASED(AREAPTR)                               */
*/*         WHERE 'AREAPTR' IS A POINTER TO THE SESSION PARAMETERS   */
*/*         AREA OR THE ADDRESS OF THE AREA.                         */
*/*                                                                  */
*/*  TO MAP THE DATA PORTION OF A BIND RU, SPECIFY-                  */
*/*         RFY ISTBIND BASED(SDDR(SRUDATA))                         */
*/*         AND INCLUDE THE ISTRU STRUCTURE.                         */
*/*                                                                  */
*/*  REVISIONS                                         006 05/22/75  */
*DCL  1  ISTBIND BASED,            /* SESSION PARAMETERS AREA        */
*        2 BINFMTY,                /* BIND FORMAT AND TYPE           */
*          3 BINFMT   BIT(4),      /* BIND FORMAT                    */
*          3 BINTYPE  BIT(4),      /* BIND TYPE                      */
*        2 BINFM    FIXED(8),      /* FUNCTION MANAGEMENT PROFILE    */
*        2 BINTS    FIXED(8),      /* TRANSMISSION SERVICES PROFILE  */
*        2 BINPRIP,                /* PRIMARY NAU PROTOCOLS          */
*          3 BINPCHN  BIT(1),      /* 1 = MULTIPLE RU CHAINS,        */
*                                  /* 0 = SINGLE RU CHAINS           */
*          3 BINPMCH  BIT(1),      /* 1 = MULTIPLE OUTSTANDING CHAINS*/
*                                  /* (DELAYED REQUEST MODE)         */
*                                  /* 0 = SINGLE OUTSTANDING CHAIN   */
*                                  /* (IMMEDIATE REQUEST MODE)       */
*          3 BINPCHNR BIT(2),      /* CHAIN RESPONSE PROTOCOL        */
*          3 BINRSV01 BIT(2),      /* RESERVED                       */
*          3 BINPCMP  BIT(1),      /* 1 = COMPRESSION MAY BE USED,   */
*                                  /* 0 =COMPRESSION MUST NOT BE USED*/
*          3 BINPSEB  BIT(1),      /* 1 = PRIMARY MAY SEND EB,       */
*                                  /* 0 = PRIMARY WILL NOT SEND EB   */
*        2 BINSECP,                /* SECONDARY NAU PROTOCOLS        */
*          3 BINSCHN  BIT(1),      /* 1 = MULTIPLE RU CHAINS,        */
*                                  /* 0 = SINGLE RU CHAIN            */
*          3 BINSMCH  BIT(1),      /* 1 = MULTIPLE OUTSTANDING CHAINS*/
*                                  /* DELAYED REQUEST MODE           */
*                                  /* 0 = SINGLE OUTSTANDING CHAIN   */
*                                  /* IMMEDIATE REQUEST MODE         */
*          3 BINSCHNR BIT(2),      /* CHAIN RESPONSE PROTOCOLS       */
*          3 BINRSV02 BIT(2),      /* RESERVED                       */
*          3 BINSCMP  BIT(1),      /* 1 = COMPRESSION MAY BE USED    */
*                                  /* 0 = COMPRESSION MUST NOT BE USED*
*          3 BINSSEB  BIT(1),      /* 1 = SECONDARY MAY SEND EB,     */
*                                  /* 0 = SECONDARY WILL NOT SEND EB */
*        2 BINCMNP,                /* COMMON NAU PROTOCOLS           */
*          3 BINRSV03 BIT(1),      /* RESERVED                       */
*          3 BINFMHD  BIT(1),      /* 1 = FM HEADERS MAY BE USED     */
*                                  /* 0 =FM HEADERS MUST NOT BE USED */
*          3 BINBRAK  BIT(1),      /* 1 = BRACKETS WILL BE USED,     */
*                                  /* 0 = BRACKETS WILL NOT BE USED  */
*          3 BINBKTR  BIT(1),      /* 1 = CONDITIONAL TERMINATION    */
*                                  /* 0 = UNCONDITIONAL TERMINATION  */
*          3 BINALT   BIT(1),      /* 1 = ALTERNATE CODE MAY BE USED */
*                                  /* 0 = ALT. CODE MUST NOT BE USED */
*          3 BINRSV04 BIT(3),      /* RESERVED                       */
*        2 BINCMNP2,               /* COMMON NAU PROTOCOLS           */
*          3 BINFMTRM BIT(2),      /* FM TRANSACTION MODE            */
*          3 BINRCVR  BIT(1),      /* 1 = SENDER OF RU RESPONSIBLE   */
*                                  /* FOR RECOVERY,  0 = PRIMARY     */
*                                  /* RESPONSIBLE FOR RECOVERY       */
*          3 BINBKFS  BIT(1),      /* 1 = PRIMARY IS BRACKETS        */
*                                  /* FIRST SPEAKER,  0 = SECONDARY  */
*                                  /* IS BRACKETS FIRST SPEAKER      */
*          3 BINMDIBK BIT(2),      /* RESERVED                       */
*          3 BINRCHN  BIT(1),      /* RESERVED                       */
*          3 BINCONR  BIT(1),      /* CONTENTION RESOLUTION-         */
*                                  /* FOR HDX FLIP-FLOP:             */
*                                  /* 1 = PRIMARY SPEAKS FIRST WHEN  */
*                                  /*DATA TRAFFIC RESET STATE IS LEFT*/
*                                  /* 0 = SECONDARY SPEAKS FIRST WHEN*/
*                                  /*DATA TRAFFIC RESET STATE IS LEFT*/
*                                  /* FOR HDX CONTENTION:            */
*                                  /* 1 = PRIMARY WINS CONTENTION    */
*                                  /* 0 = SECONDARY WINS CONTENTION  */
*        2 BINTSU,                 /* TS USAGE                       */
*          3 BINRSV06 CHAR(1),     /* RESERVED                       */
*          3 BINRPACE FIXED(8),    /* SLU RECEIVE PACING COUNT       */
*            4 BINRSV07 BIT(2),    /* RESERVED                       */
*            4 BINRPACM BIT(6),    /* SLU RECEIVE PACING COUNT       */
*          3 BINRUSZ,              /* RU SIZES                       */
*            4 BINSRUSZ FIXED(8),  /* SLU MAXIMUM SEND               */
*              5 BINSRUSM BIT(4),  /* MANTISSA                       */
*              5 BINSRUSE BIT(4),  /* EXPONENT                       */
*            4 BINPRUSZ FIXED(8),  /* PLU MAXIMUM SEND RU SIZE       */
*              5 BINPRUSM BIT(4),  /* MANTISSA                       */
*              5 BINPRUSE BIT(4),  /* EXPONENT                       */
*          3 BINRSV08 CHAR(2),     /* RESERVED                       */
*        2 BINPRSVC,               /* PRESENTATION SERVICES          */
*          3 BINLUP,               /* LU PROFILE                     */
*            4 BINRSV27 BIT(1),    /* RESERVED                       */
*            4 BINLUTYP BIT(7),    /* LU TYPE                        */
*          3 BINPSCHR CHAR(11),    /* LU PROFILE DEPENDENT PRESENTA- */
*                                  /* TION SERVICES CHARACTERISTICS  */
*        2 BINRSV05 CHAR(1),       /* RESERVED                       */
*        2 BINPRIML FIXED(8),      /* PRIMARY NAU NAME LENGTH        */
*        2 BINPRIM  CHAR(8),       /* PRIMARY NAU NAME               */
*        2 BINUSEL  FIXED(8),      /* USER DATA LENGTH               */
*        2 BINUSE   CHAR(*);       /* USER DATA                      */
*/*  OVERLAY FOR 'BINPSCHR' (PRESENTATION SERVICES CHARACTERISTICS   */
*/*                          FOR LU PROFILE 1                        */
*DCL  1  BINLUP1 DEFINED(BINPSCHR),/* LU PROFILE 1                   */
*        2 BINFMHS1 BIT(4),        /* FM HEADER SUBSET               */
*        2 BINDSP1  BIT(4),        /* DATA STREAM PROFILE            */
*        2 BINPLUS1 CHAR(5),       /* PLU USAGE                      */
*        2 BINSLUS1 CHAR(5);       /* SLU USAGE                      */
*/*  OVERLAY FOR 'BINPLUS1' AND 'BINSLUS1' (LU USAGE)                */
*DCL  1  BINLUS DEFINED(BINPSCHR), /* PLU/SLU USAGE                  */
*        2 BINFMF1  BIT(16),       /* FM HEADER SUBSET               */
*          3 BINDESTS BIT(1),      /* NUMBER OF OUTSTANDING DESTINA- */
*                                  /* TIONS (0=TRANSMISSION MAY BE   */
*                                  /* INTERUPTED ONCE, 1=TWICE.      */
*          3 BINCMPCT BIT(1),      /* 0=PRIMARY WILL NOT SENT COM-   */
*                                  /* PACTION TABLE HEADERS, SECON-  */
*                                  /* DARY WILL NOT QUERY FOR COM-   */
*                                  /* PACTION TABLES, 1=PRIMARY MAY  */
*                                  /* SEND/SECONDARY MAY QUERY.      */
*          3 BINPDIR  BIT(1),      /* 0=PDIR WILL NOT BE SENT,       */
*                                  /* 1=PDIR MAY BE SENT.            */
*          3 BINRSV09 BIT(13),     /* RESERVED FOR FMHS 1            */
*/*  ADDITIONAL FMHS FLAGS                                           */
*            4 BINKDDSI BIT(1),    /* 0=KEYED DIRECT DATA SET WILL   */
*                                  /* NOT BE SENT, 1=MAY BE SENT.    */
*            4 BINSDSI  BIT(1),    /* 0=SEQUENTIAL DATA SET WILL NOT */
*                                  /* BE SENT, 1=MAY BE SENT.        */
*            4 BINSAI   BIT(1),    /* 0=SEQUENTIAL ACCES TO ADDRESSED*/
*                                  /* DIRECT DATA SETS WILL NOT BE   */
*                                  /* SENT, 1=MAY BE SENT.           */
*            4 BINSIDS  BIT(1),    /* 0=SERIES ID NOT SUPPORTED(WITH */
*                                  /* STATUS IN REPLY), 1=SUPPORTED  */
*            4 BINARRR  BIT(1),    /* 0=ADD REPLICATE, REPLACE REPLI-*/
*                                  /* CATE NOT SUPPORTED, 1=SUPPORTED*/
*            4 BINRSV16 BIT(1),    /* RESERVED                       */
*            4 BINQDSI  BIT(1),    /* 0=QUERY DATA SET NOT SUPPORTED,*/
*                                  /* 1=SUPPORTED.                   */
*            4 BINCSDS  BIT(1),    /* 0=CREATE/SCRATCH/SCRATCH ALL   */
*                                  /* DATA SET NOT ALLOWED, 1=ALLOWED*/
*            4 BINXFPD  BIT(1),    /* 0=EXECUTE FP DELAYED NOT       */
*                                  /* ALLOWED, 1=ALLOWED.            */
*            4 BINRSV11 BIT(4),    /* RESERVED FOR FMHS3             */
*        2 BINDSPF1 BIT(16),       /* DATA STREAM PROFILE FLAGS      */
*          3 BININTR  BIT(1),      /* INTERACTICE DATA STREAM (BS,CR */
*                                  /* LF,ENP,INP)-0=WILL NOT BE SENT,*/
*                                  /* 1=MAY BE SENT.                 */
*          3 BINHFDS  BIT(1),      /* HORIZONTAL FORMAT DATA STREAM  */
*                                  /* (SHF,HT)-0=WILL NOT BE SENT,   */
*                                  /* 1=MAY BE SENT.                 */
*          3 BINVTDS  BIT(1),      /* VERTICAL TAB DATA STREAM (SVT, */
*                                  /* VT)-0=WILL NOT BE SENT, 1=MAYBE*/
*          3 BINVSDS  BIT(1),      /* VERTICAL SELECT DATA STREAM    */
*                                  /* (SVF(CHANNELS),SET-0=WILL NOT  */
*                                  /* BE SENT, 1=MAY BE SENT.        */
*          3 BINRSV12 BIT(3),      /* RESERVED                       */
*          3 BINTRNDS BIT(1),      /* TRANSPARENCY DATA STREAM (TRN, */
*                                  /* IRS)-0=WILL NOT BE SENT,1=MAYBE*/
*          3 BINRSV17 BIT(8),      /* RESERVED                       */
*        2 BINMEDIA BIT(8),        /* MEDIA FLAGS                    */
*          3 BINDOCMT BIT(1),      /* 0=DOCUMENT MEDIA WILL NOT BE   */
*                                  /* SENT, 1=MAY BE SENT.           */
*          3 BINCARD  BIT(1),      /* 0=CARD FORMAT WILL NOT BE SENT,*/
*                                  /* 1=MAY BE SENT.                 */
*          3 BINXCHNG BIT(1),      /* 0=EXCHANGE MEDIA WILL NOT BE   */
*                                  /* SENT, 1=MAY BE SENT.           */
*          3 BINDISK  BIT(1),      /* 0=DISK FORMAT WILL NOT BE SENT,*/
*                                  /* 1=MAY BE SENT.                 */
*          3 BINRSV13 BIT(4);      /* RESERVED                       */
*/*  OVERLAY FOR 'BINPSCHR' (PRESENTATION SERVICES CHARACTERISTICS   */
*/*                          FOR LU PROFILE 2)                       */
*DCL  1  BINLUP2 DEFINED(BINPSCHR),/* LU PROFILE 2                   */
*        2 BINRSV14 CHAR(9),       /* RESERVED                       */
*        2 BINPRESZ FIXED(8),      /* PRESENTATION SPACE SIZE        */
*        2 BINRSV15 BIT(8);        /* RESERVED                       */
*/*  OVERLAY FOR 'BINPSCHR' (PRESENTATION SERVICES CHARACTERISTICS   */
*/*                          FOR LU PROFILE 3)                       */
*DCL  1  BINLUP3 DEFINED(BINPSCHR),   /* LU PROFILE 3                */
*        2 BINRSV26 CHAR(11);         /* RESERVED                    */
*/*  VALUES FOR BINSRUSZ AND BINPRUSZ (RU SIZES                      */
*DCL BINRU256 BIT(8) CONSTANT('85'X);   /* 256 BYTE RU               */
*/*  VALUES FOR BINLUP (LU PROFILE)                                  */
*DCL BINLUP1C FIXED(8) CONSTANT(1);     /* LU PROFILE 1              */
*DCL BINLUP2C FIXED(8) CONSTANT(2);     /* LU PROFILE 2              */
*DCL BINLUP3C FIXED(8) CONSTANT(3);     /* LU PROFILE 3              */
*/*  VALUES FOR BINFMHS1 (FM HEADER SUBSET)                          */
*DCL BINFMS1C BIT(4) CONSTANT('0001'B); /* SUBSET 1                  */
*DCL BINFMS3C BIT(4) CONSTANT('0011'B); /* SUBSET 3                  */
*/*  VALUES FOR BINDSP1 (DATA STREAM PROFILE)                        */
*DCL BINDSP0C BIT(4) CONSTANT('0000'B); /* BASIC CONTROL             */
*DCL BINDSP1C BIT(4) CONSTANT('0001'B); /* BASIC CONTROL CARDS       */
*                                       /* MAY SPAN RUS              */
*/*  VALUES FOR BINPRESZ (PRESENTATION SPACE SIZE)                   */
*DCL BINPSZ1  FIXED(8) CONSTANT(1);     /* 12X40 MATRIX              */
*DCL BINPSZ2  FIXED(8) CONSTANT(2);     /* 24X80 MATRIX              */
*DCL BINUSERD BIT(8) CONSTANT('00'X);  /* USER DATA LENGTH DEFAULT   */
*/*                                                                  */
*/*  VALUES FOR BINPCHNR/BINSCHNR                                    */
*/*  (TYPE OF RESPONSES ASKED FOR BY REQUESTS FROM PRIMARY/SECONDARY)*/
*DCL BINNORSP BIT(2) CONSTANT('00'B);  /* NO RESPONSE                */
*DCL BINEXRSP BIT(2) CONSTANT('01'B);  /* NO RESPONSE OR             */
*                                      /* EXCEPTION RESPONSE         */
*DCL BINDFRSP BIT(2) CONSTANT('10'B);  /* DEFINITE RESPONSE          */
*DCL BINNYRSP BIT(2) CONSTANT('11'B);  /* DEFINITE OR EXCEPTION RESP */
*/*  VALUES FOR BINFMTRM (TRANSACTION MODE)                          */
*DCL BINFLDPX BIT(2) CONSTANT('00'B);  /* FULL DUPLEX                */
*DCL BINHDXC  BIT(2) CONSTANT('01'B);  /* HALF-DUPLEX CONTENTION     */
*DCL BINHDXFF BIT(2) CONSTANT('10'B);  /* HALF-DUPLEX FLIP-FLOP      */
*DCL BINMSTSL BIT(2) CONSTANT('11'B);  /* MASTER/SLAVE               */
*/*  VALUES FOR BINTS (TRANSMISSION SERVICES PROFILE)                */
*DCL BINTS0   FIXED CONSTANT(0);       /* ID'S - NO RESET STATE      */
*DCL BINTS1   FIXED CONSTANT(1);       /* ID'S - NO RESET STATE      */
*DCL BINTS2   FIXED CONSTANT(2);       /* SEQ NOS - NO RESET STATE   */
*DCL BINTS3   FIXED CONSTANT(3);       /* SEQ NOS - RESET STATE      */
*/*  VALUES FOR BINTYPE (TYPE)                                       */
*DCL BINCOLD  BIT(4) CONSTANT('0001'B); /* COLD                      */
*DCL BINERP   BIT(4) CONSTANT('0010'B); /* ERP                       */
*DCL BINWARM  BIT(4) CONSTANT('0100'B); /* WARM                      */
*DCL BINCHNGE BIT(4) CONSTANT('1000'B); /* CHANGE                    */
*/*  VALUES FOR BINFMT (FORMAT)                                      */
*DCL BINFMT0  BIT(4) CONSTANT('0000'B); /* FORMAT 0                  */
*/*  CONNECTIONS SERVICES LIST ENTRY                                 */
*/*  INITIAL LEVEL                                     001 08/01/74  */
*DCL  1  ISTCSL BASED BDY(WORD),                                01S0533
*        2 CSLRDEF  PTR(32),        /* RSC RDTE DEFINATION           */
*          3 CSLRDTE  PTR(31),      /* RSC RDTE POINTER              */
*            4 CSLRDTEF BIT(1),     /* RSC RDTE FLAG                 */
*        2 CSLNDEF  PTR(32),        /* RSC NIB DEFINATION            */
*          3 CSLNIB   PTR(31),      /* RSC NIB POINTER               */
*            4 CSLNIBF  BIT(1),     /* RSC NIB FLAG                  */
*        2 CSLDDEF  PTR(32),        /* RSC DATA DEFINATION           */
*          3 CSLDATA  PTR(31),      /* RSC DATA POINTER              */
*            4 CSLDATAF BIT(1);     /* RSC DATA FLAG                 */
*/*         VTAM NODE IDENTIFICATION BLOCK                           */
*/*  INITIAL LEVEL                                     001 08/07/74  */
*DECLARE                                                        01S0534
*      1 ISTNIB   BDY(WORD)     BASED,                          01S0534
*        2 NIBID       CHAR(1),       /* NIB IDENTIFIER              */
*        2 NIBRSV01    CHAR(1),        /* RESERVED                   */
*        2 NIBCONDN    CHAR(1),         /* CONDN */             01S0534
*        2 NIBLEN      CHAR(1),         /* NIB LENGTH */        01S0534
*        2 NIBCID       CHAR(4),        /* COMMUNICATION ID           *
*        2 NIBUSER     CHAR(4),        /* USER DATA AREA             */
*        2 NIBSYM      CHAR(8),        /* SYMBOLIC NODE NAME         */
*        2 NIBMODE     CHAR(8),        /*MODE NAME FOR SKEL DVT      */
*        2 NIBDEVCH    CHAR(LENGTH(ISTDEVCH)), /* AREA FOR DEVICE
*                                                CHARACTERISTICS     */
*        2 NIBPROCD    CHAR(LENGTH(ISTPROCD)),    /* NIB        01S0534
*                                                PROCESSING OPTIONS  */
*        2 NIBFLGS     BIT(8),       /* FLAGS                      */
*          3 NIBFLG1   BIT(8),         /* FLAGS 1                    */
*            4 NIBLAST BIT(1),         /* 1=NOT LAST NIB */     01S0534
*            4 NIBCON  BIT(1),         /*1=NODE CONNECTED            */
*            4 NIBSDAPP BIT(1),        /* SDT / APPL=1,VTAM=0        */
*            4 NIBSHLTP BIT(1),        /* DESTINATION IS REQUIRED BY
*                                         ANOTHER APPLICATION        */
*            4 *       BIT(1),         /* RESERVED                   */
*            4 *       BIT(1),         /* RESERVED                   */
*            4 *       BIT(1),         /* RESERVED                   */
*            4 *       BIT(1),         /* RESERVED                   */
*         2 * CHAR(1),        /* RESERVED   */                  01S0534
*         2 NIBLIMIT FIXED(15),  /* RESPLIM VALUE                    */
*         2 NIBEXLST PTR(31),    /* EXIT LIST ADDRESS                */
*         2 NIBLMODE CHAR(8),    /* LOGON MODE                       */
*         2 NIBNDAR  PTR(31),    /* POINTER TO BIND SESSION PARAMS   */
*         2 NIBRESV  CHAR(4);    /* RESERVED                         */
*      DCL NIBIDD BIT(8) CONSTANT('D0'X);   /*      NIBID EQUATE  */
*/* CONNECTION SERVICES PARAMETER LIST */                       01S0536
*/*  INITIAL LEVEL FOR SECOND RELEASE                  001 08/16/74  */
*DCL  1  ISTCSP BASED BDY(WORD),                                01S0536
*       2  CSPIDX FIXED(15),           /* INDEX TO FTN VECTOR TABLE  */
*       2  CSPOPT BIT(16),             /* FLAGS                      */
*         3  CSPOPT1 BIT(8),           /*                            */
*            4  CSPRSC BIT(1),         /* LIST ACQUIRE OR ACCEPT ANY */
*            4  CSPQ BIT(1),           /* QUEUE TYPE                 */
*            4  CSPLOGI BIT(1),        /* LOGON TYPE ACQUIRE         */
*            4  CSPPND BIT(1),         /* PENDING TAKE/PREEMPT       */
*            4  CSPSESS BIT(1),        /* SESSION TAKE/PREEMPT       */
*            4  CSPACT BIT(1),         /* ACTIVE TAKE/PREEMPT        */
*            4  CSPANY BIT(1),         /* INCLUSIVE TAKE/PREEMPT     */
*            4  * BIT(1),              /* RESERVED                   */
*         3  CSPOPT2 BIT(8),           /*                            */
*            4  CSPSTAP BIT(1),        /* SHOULDER TAP CURRENT OWNER */
*            4  CSPCOREQ BIT(1),       /* LIST FORM IS COREQUISITE   */
*            4  CSPNOREL BIT(1),       /* REALLOCATION ONLY          */
*            4  CSPACES BIT(1),        /* CANCEL ACES                */
*            4  CSPACQS BIT(1),        /* CANCEL ACQUIRES            */
*            4  CSPWASQD BIT(1),       /* ON AFTER REQUEST WAS QUEUED*/
*            4  CSPRSC2F BIT(1),       /* RESOURCE 2 NAME FIELD      */
*                                      /* DESCRIPTION 1=NAME         */
*            4  * BIT(1),              /* RESERVED                   */
*       2  CSPSRC PTR(31),             /* SOURCE APPLICATION RDTE PTR*/
*       2  CSPDEST PTR(31),            /* DESTINATION APPLIC.RDTE PTR*/
*       2  CSPRSCE PTR(31),            /* RESOURCE RDTE PTR          */
*       2  CSPDATA PTR(31),            /* DATA POINTER               */
*       2  CSPCC FIXED(15),            /* COMPLETION CODE            */
*       2  CSPNO FIXED(15),            /* INPUT NO ITEMS IN LIST     */
*       2  CSPRLRPH PTR(31),           /* RPH TO BE POSTED AFTER     */
*                                      /* RELEASE                    */
*       2  CSPTRDTE PTR(31),           /* RDT OF TERMINAL REQUIRED   */
*       2  CSPRSC2B CHAR(8),           /* RESOURCE 2 NAME            */
*         3  CSPUECBA PTR(31),         /* UECB ADDR TO SCHED TARGET  */
*                                      /* APPLS LOGON EXIT IF PASS   */
*                                      /* REQUEST                    */
*         3  CSPUNUSD CHAR(4);         /* ALIGNMENT                  */
*/*                                                                  */
*   DCL CSPISIML FIXED(15) CONSTANT(01); /* FVT SIMLOGON INDEX       */
*   DCL CSPIACQ  FIXED(15) CONSTANT(01); /* FVT ACQUIRE  INDEX       */
*   DCL CSPIREL  FIXED(15) CONSTANT(02); /* FVT RELEASE  INDEX       */
*   DCL CSPIACPT FIXED(15) CONSTANT(03); /* FVT ACCEPT   INDEX       */
*   DCL CSPILGN  FIXED(15) CONSTANT(04); /* FVT LOGON    INDEX       */
*   DCL CSPIPASS FIXED(15) CONSTANT(05); /* FVT PASS     INDEX       */
*   DCL CSPICNCL FIXED(15) CONSTANT(07); /* FVT CANCEL   INDEX       */
*DCL CSPIMTCH FIXED(15) CONSTANT(08);    /* FVT MATCH    INDEX       */
*DCL CSPIWAIT FIXED(15) CONSTANT(09);    /* FVT WAIT     INDEX       */
*DCL CSPIPOST FIXED(15) CONSTANT(10);    /* FVT POST     INDEX       */
*DCL CSPIQ    FIXED(15) CONSTANT(11);    /* FVT QUEUE    INDEX       */
*DCL CSPISRCH FIXED(15) CONSTANT(12);    /* FVT SEARCHQ  INDEX       */
*DCL CSPITCON FIXED(15) CONSTANT(13);    /* FVT TCONNECT INDEX       */
*DCL CSPIACON FIXED(15) CONSTANT(14);    /* FVT ACONNECT INDEX       */
*DCL CSPIDCON FIXED(15) CONSTANT(15);    /* FVT DCONNECT INDEX       */
*DCL CSPIFRR  FIXED(15) CONSTANT(16);    /* FVT FRR      INDEX       */
*DCL CSPIGSTR FIXED(15) CONSTANT(17);    /* FVT GETSTORE INDEX       */
*DCL CSPILG0  FIXED(15) CONSTANT(18);    /* FVT LOGON0   INDEX       */
*DCL CSPITPQ  FIXED(15) CONSTANT(19);    /* FVT TPQUE    INDEX       */
*DCL CSPIFSTR FIXED(15) CONSTANT(20);    /* FVT FREESTOR INDEX       */
*DCL CSPIACCT FIXED(15) CONSTANT(21);    /* FVT DOACCT   INDEX       */
*/*               OPEN / CLOSE WORK ELEMENT                          */
*/*                                                                  */
*/* REVISIONS                                          004 05/21/75  */
*/*                                                                  */
*DECLARE                                                        01S0558
*       1 ISTOCW  BDY(WORD)     BASED,                          01S0558
*         2 OCWID      CHAR(1),        /* CONTROL BLOCK IDENTIFIER   */
*         2 OCWSLEN    PTR(8),         /* LENGTH OF EACH SAVE AREA   */
*         2 OCWTLEN    FIXED(15),      /* TOTAL LENGTH OF WORK  01S0558
*                                         ELEMENT                    */
* /* NOTE:  THE FIELD OCWPBCHN MUST ALWAYS BE THE SECOND WORD OF
*           ISTOCW                                                   */
*         2 OCWPBCHN   PTR(31),        /* PAB CHAIN POINTER          */
*         2 OCWCHAIN   PTR(31),        /* PSS CHAIN FIELD            */
*         2 OCWRPL     PTR(31),        /* RPL  ADDRESS               */
*         2 OCWRPH     PTR(31),        /* RPL HEADER ADDRESS         */
*         2 OCWPAB     PTR(31),        /* PAB ADDRESS                */
*         2 OCWACVT    PTR(31),        /* ATCVT ADDRESS              */
*         2 OCWCSL  CHAR(LENGTH(ISTCSL)) BDY(WORD), /* DUMMY LIST ENT*/
*         2  OCWLRDTE PTR(32),                                  01S0558
*            3  OCWDRDTE PTR(31),      /* DEST RDTE PTR              */
*               4  OCWDRHOB BIT(1),    /* ON = DEST SUCCESSFULLY     */
*         2 OCWNIB   PTR(31),          /* TEMP NIB PTR               */
*         2 OCWARDTE   PTR(31),        /* APPLICATION RDTE ADDRESS   */
*         2 OCWEPTAB   PTR(31),        /* EPTAB ADDRESS              */
*         2 OCWFMCB    PTR(31),        /* FMCB ADDRESS               */
*         2 OCWNCB     PTR(31),        /* DNCB OR INCB ADDRESS       */
*         2 OCWACDEB   PTR(31),        /* ACB DEB ADDRESS            */
*         2 OCWFPOST   PTR(31),        /* ADDR 1ST RPH TO BE TPPOSTED*/
*         2 OCWCPOST   PTR(31),        /* ADDR CURRENT RPH (TPPOSTED)*/
*         2 OCWLPOST   PTR(31),        /* ADDR LAST RPH TO BE TPPOSTD*/
*         2 OCWODLST   PTR(31),        /* ADDR OF LIST AREA          */
*         2 OCWODNAS   PTR(31),        /* ADDR OF NEXT AVAIL SLOT IN
*                                          LIST AREA                 */
*         2 OCWODFST   PTR(31),        /* ADDR OF FIRST SLOT IN SORT
*                                          ORDER                     */
*         2 OCWODRC  CHAR(2),          /* OPEN RC FOR FDBK           */
*            3  OCWRC CHAR(1),          /* MAJOR RETURN CODE         */
*            3  OCWEC CHAR(1),          /* MINOR RETURN CODE         */
*         2 OCWSVCOD CHAR(2),           /* SAVE AREA                 */
*            3  OCWSVRC CHAR(1),        /* FOR MAJOR                 */
*            3  OCWSVEC CHAR(1),        /* AND MINOR RC              */
*         2 OCWRSV01 PTR(31),          /* RESERVED                   */
*         2 OCWRSV02 PTR(31),          /* RESERVED                   */
*         2 OCWODCT1   FIXED(15),      /* COUNTER                    */
*         2 OCWODCT2   FIXED(15),      /* COUNTER                    */
*         2 OCWDSTNO   FIXED(15),      /* # OF RDTES ON LIST TO BE
*                                          OPENED                    */
*         2 OCWBADNO   FIXED(15),      /* # OF INVALID OR UNOPENABLE
*                                          DESTS                     */
*         2 OCWDNIB    CHAR(LENGTH(ISTNIB)), /* DUMMY NIB            */
*         2 OCWSCPAD CHAR(28),         /* SCRATCH PAD                */
*         2 OCWSWTA    CHAR(1),        /* FIRST SWITCH BYTE          */
*           3 OCWGTLST BIT(1),         /* ON = MORE THAN ONE NIB
*                                         SPECIFIED ON OPNDST        */
*           3 OCWSRT   BIT(1),            /* ON = CALL SRTDELFD      */
*           3 OCWNOCON BIT(1),            /* ON = DO NOT CALL CON SER*/
*           3 OCWGOCNT BIT(1),            /* ON = CONTINUE COUNT NIB */
*           3 OCWSORT  BIT(1),            /* ON = CONT SORT RDTE PTRS*/
*           3 OCWGODST BIT(1),            /* ON = CONTINUE ON DODEST
*                                            SUCCESSFUL PATH         */
*           3 OCWODCL  BIT(1),            /* ON = OPNDST1 EXITS TO
*                                           CLEANUP, OFF, TO OPNDST2 */
*           3 OCWNODLT BIT(1),            /* DO NOT DELETE           */
*         2 OCWSWTB    CHAR(1),           /* SECOND SWITCH BYTE      */
*           3 OCWGOFUN BIT(1),            /* ON = OPNDST2 IS IN MIDDLE
*                                              OF PROCESSING ALIST   */
*           3 OCWRECL  BIT(1),            /* ON = MUST RESTART  01S0558
*                                              CLEANUP PROCESS       */
*           3 OCWCLOOP BIT(1),            /*  ON = CLEANUP IS IN THE
*                                             MIDDLE OF PROC ALIST   */
*           3 OCWDOPHY BIT(1),            /* ON=SSCP CALLED TO MAKE  */
*                                         /* PHYSICAL CONNECTION     */
*           3 OCWCOREQ BIT(1),            /* LIST REQUEST            */
*           3 OCWOLOCK BIT(1),            /* ON=MUST UNLOCK RDT      */
*           3 OCWPSREQ BIT(1),            /* ON = PORT SOLICITOR
*                                            REQUEST                 */
*           3 OCWCSCAL BIT(1),            /* CONNECTION SERVICES WAS */
*                                         /* CALLED SUCCESSFULLY     */
*                                         /* IN CLOSE DEST           */
*         2 OCWSWTC    CHAR(1),           /* THIRD SWITCH BYTE       */
*           3 OCWSPCLS BIT(1),            /* ON = SPEC CALL TO CLSDST*/
*           3 OCWSWTC1 BIT(1),            /* ON = INTERPRET     01S0558
*                                            ISSUED TPUNLOCK         */
*           3 OCWODCLS BIT(1),            /* ON = MUST CALL CLSDST IF
*                                            OPNDST FAILS            */
*           3 OCWCKACE BIT(1),            /* ON = MUST MAKE SURE
*                                            ACERPHA PTS TO OUR RPH  */
*           3 OCWRBH   BIT(1),            /* ON = FOUND REQUIRED BH
*                                            ID                      */
*           3 OCWPBH   BIT(1),            /* ON = FOUND PREFERRED BH
*                                            ID                      */
*           3 OCWPRMTR BIT(1),            /* SAVED VALUE OF FMCPRMTR */
*           3 OCWVARY  BIT(1),            /* VARY IS CALLER          */
*          2 OCWSWTD   CHAR(1),           /* FOURTH SWITCH BYTE      */
*           3 OCWCLDEB BIT(1),            /* ON = CLOSEDEB IN PROG   */
*           3 OCWNPOST BIT(1),            /* OPEN/CLOSE UNROUTER:    */
*                                         /* 1= DO NOT POST USER     */
*           3 OCWSTCTL BIT(1),            /* 1=CLUS SCHEDULED        */
*           3 OCWPGDON BIT(1),            /* 1=PURGE ISSUED FOR CLSDST*
*           3 OCWSWTD4 BIT(1),            /* RESERVED                */
*           3 OCWSWTD5 BIT(1),            /* RESERVED                */
*           3 OCWSWTD6 BIT(1),            /* RESERVED                */
*           3 OCWSWTD7 BIT(1),            /* RESERVED                */
*         2 OCWVPAB   PTR(31),            /* ADDR VARY PAB           */
*         2 OCWRSVD   CHAR(12),           /* RESERVED                */
*         2 OCWCSPL    CHAR(LENGTH(ISTCSP)),  /* CONN SRV PARM LIST  */
*/*  USE ISTCSP MAPPING TO ADDRESS THIS SPACE **                     */
*/*                                                                  */
*/*  REMOTE NETWORK OPERATOR REQUIRES THAT THE OCW SAVE AREAS:       */
*/*                          OCWSAVE1                                */
*/*                          OCWSAVE2                                */
*/*                          OCWSAVE3                                */
*/*                          OCWSAVE4                                */
*/*                          OCWSAVE5                                */
*/*  REMAIN CONTIGUOUS. DEPENDENT MODULES ARE:                       */
*/*                          ISTCFCS1                                */
*/*                          ISTCFCS2                                */
*/*                          ISTCFCRP                                */
*/*                          ISTCFCR1                                */
*/*                                                                  */
*         2 OCWSAVE1 (18) FIXED(31),   /* LEVEL 1 SAVE AREA          */
*         2 OCWSAVE2 (18) FIXED(31),   /* LEVEL 2 SAVE AREA          */
*         2 OCWSAVE3 (18) FIXED(31),   /* LEVEL 3 SAVE AREA          */
*         2 OCWSAVE4 (18) FIXED(31),   /* LEVEL 4 SAVE AREA          */
*         2 OCWSAVE5 (18) FIXED(31),   /* LEVEL 5 SAVE AREA          */
*         2 OCWR14SV (18) FIXED(31),   /* REG 14 SAVE AREA           */
*         2 OCWLCPBA    PTR(31),       /* ADDR OF PREMPT/RESTOR LCPB */
*         2 OCWPREV     PTR(31),       /* ADDR OF PREVIOUS SLOT DURING
*                                         SORT                       */
*         2 OCWSDVT     PTR(31),       /* ADDR OF SKELDVT            */
*         2 OCWMDVT     PTR(31),       /* ADDR OF MSTR DVT           */
*         2 OCWSORTP    PTR(31),       /* ADDR OF SORT ORDER SLOT    */
*         2 OCWOENIB    PTR(31),       /* ADDR OF NIB SAVE AREA      */
*         2 OCWSDVTA    PTR(31),       /* ADDR OF SKELDVT SAVE AREA  */
*         2 OCWLALEN    FIXED(15),     /* LENGTH OF LIST AREA        */
*         2 OCWCLCD1    FIXED(15),     /* INTERNAL CODE 1            */
*         2 OCWCLCD2    FIXED(15),     /* INTERNAL CODE 2            */
*         2 OCWSWTRD    CHAR(1),       /* CONTROL SWITCHS - ISTOCCRD */
*           3 OCWSRDVT  BIT(1),           /* ON = LOOP IN DVT SEARCH */
*           3 OCWCLEN   BIT(1),           /* ON = LOOP IN COMPLEN    */
*           3 OCWCPARE  BIT(1),           /* ON = LOOP IN DVT COMPAR */
*           3 OCWEPTLP  BIT(1),           /* ON = LOOP IN EPT        */
*           3 OCWDPDVT  BIT(1),           /* ON = DVT STILL DUPLICAT */
*           3 OCWSWTR5  BIT(1),           /* RESERVED                */
*           3 OCWSWTR6  BIT(1),           /* RESERVED                */
*           3 OCWSWTR7  BIT(1),           /* RESERVED                */
*         2 OCWSWTE     CHAR(1),          /* FIFTH SWITCH BYTE       */
*           3 OCWSKEL   BIT(1),           /* ON = DELETE SKEL DVT    */
*           3 OCWLCPBC  BIT(1),           /* ON = LCPB PREEMPT, 01S0558
*                                            OFF = LCPB RESTORE      */
*           3 OCWSWTE2  BIT(1),           /* RESERVED                */
*           3 OCWSWTE3  BIT(1),           /* RESERVED                */
*           3 OCWSWTE4  BIT(1),           /* RESERVED                */
*           3 OCWSWTE5  BIT(1),           /* RESERVED                */
*           3 OCWSWTE6  BIT(1),           /* RESERVED                */
*           3 OCWSWTE7  BIT(1),           /* RESERVED                */
*         2 OCWRSV03    CHAR(1),       /* RESERVED                   */
*         2 OCWBHSID    CHAR(1),       /* INPUT BHSET ID             */
*         2 OCWIOMAJ    CHAR(1),       /* MAJOR RC FROM FSB          */
*         2 OCWIOMIN    CHAR(1),       /* MINOR RC FROM FSB          */
*         2 OCWACE      PTR(31),       /* PTR TO ACE                 */
*         2 OCWLOCKS    CHAR(1),                                01S0558
*           3  OCWVLOCK BIT(1),        /* ON = VOC LOCK HELD         */
*           3  OCWRLOCK BIT(1),        /* ON = RDT LOCK HELD         */
*           3  OCWELOCK BIT(1),        /* ON = ENTRY LOCK HELD       */
*           3  OCWCLOCK BIT(1),        /* ON = CID(DAF) LOCK HELD    */
*           3  OCWDLOCK BIT(1),        /* ON = DVT LOCK HELD         */
*           3  OCWALOCK BIT(1),        /* ON = ACDEB LOCK HELD       */
*           3  OCWMLOCK BIT(1),        /* ON = LOCAL MEMORY LOCK HELD*/
*           3  OCWRSV82 BIT(1),        /* RESERVED                   */
*         2 OCWRSV0A CHAR(1),          /* RESERVED                   */
*         2 OCWNMLLN FIXED(15),        /* NO. OPENED                 */
*         2 OCWCID      FIXED(32),     /* COMMUNICATIONS ID          */
*           3  OCWSAF   FIXED(16),     /* SOURCE ADDR FIELD          */
*           3  OCWDAF   FIXED(16),     /* DESTINATION ADDR FIELD     */
*         2 OCWPABCT    FIXED(31),     /* NO. OF ACT DYPABS SCHEDULED*/
*         2 OCWCCRPH    PTR(31),       /* WAITING RPH FOR ISTOCCCC   */
*         2 OCWPROCD CHAR(LENGTH(ISTPROCD)), /* PROCESSING OPTIONS   */
*         2 OCWIOCNT FIXED(32),        /* OUTSTANDING CLSDST         */
*                                      /* I/O REQUESTS               */
*           3 OCWSCHIO BIT(1),         /* CLSDST I/O SCHED IN PROC   */
*         2 OCWODOA     PTR(31),       /* SAVE WD FOR OCCMD AND OCCRD*/
*         2 OCWRSV11    PTR(31),       /* RESERVED                   */
*         2 OCWRSV12    PTR(31),       /* RESERVED                   */
*         2 OCWELCP     PTR(31),       /* ELCP ADDRESS               */
*         2 OCWBNDRU PTR(31),          /* BIND RU ADDRESS            */
*         2 OCWSHPL  CHAR(12),         /* PARM LIST FOR SEARCH       */
*                                      /* LOGON MODE ROUTINE         */
*           3 OCWSHPLA CHAR(4),        /* RDTE @                     */
*           3 OCWSHPLB CHAR(4),        /* SESS PARM FIELD @          */
*           3 OCWSHPLC CHAR(4),        /* LOGON MODE NAME @          */
*         2 OCWBIND  CHAR(LENGTH(ISTBIND)+9),  /* OCWBIND AREA       */
*           3 OCWBINDC CHAR(1),        /* BIND RU REQUEST CODE       */
*           3 OCWBINDA CHAR(LENGTH(ISTBIND)),  /* SESSION PARMS      */
*           3 OCWBINDD CHAR(8),        /* USER DATA AREA             */
*         2 OCWBNDSZ CHAR(2),          /* SIZE OF BIND RU            */
*         2 OCWSENSE BIT(32),          /* SENSE INFORMATION          */
*         2 OCWFLG1  CHAR(1),          /* OCW FLAGS                  */
*           3 OCWEXIT BIT(1),          /* SUBROUTINE EXIT SW.        */
*           3 *       BIT(7),          /* RESERVED                   */
*         2 OCWEND CHAR(*);            /* END OF OPEN/CLOSE WORK
*                                         ELEMENT                    */
* DCL OCWTYPE BIT(8) CONSTANT('24'X);  /* OCW TYPE                   */
*/*   PROGRAM OPERATOR PARAMETER WORK AREA                          */
*/*   REVISIONS                                        002 07/31/75 */
*DCL  1  ISTPOPWA BASED,                                        01S0560
*        2 *        CHAR(3),          /* RESERVED                   */
*        2 POPTPOPT BDY(BYTE),        /* OPTIONS FIELD FOR TPMSG USE*/
*          3 POPSTAT  CHAR(1),        /* FIELD WHERE TPMSG TEST FOR */
*                                     /* A MSG FOR POA              */
*          3 POPHDR   CHAR(4),        /* PROGRAM OPERATOR MSG HEADER*/
*          3 POPDEB   PTR(31),        /* DEB ADDRESS OF PROGRAM     */
*                                     /* OPERATOR APPLICATION       */
*        2 POPMSG   CHAR(126),        /* TEMPORARY STORAGE AREA     */
*                                     /* FOR COMMANDS               */
*        2 *        CHAR(2),          /* RESERVED                   */
*        2 POPPLA  (4)FIXED(31),      /* PARM LIST AREA FORTPMSG USE*/
*        2 POPSAVE (18)FIXED(31),     /* SAVE AREA FOR TPMSG USE    */
*        2 POPMSGID CHAR(4),          /* STORAGE FOR TPMSG ID       */
*        2 POPTXPTR PTR(31);          /* POINTER TO BEGINNING OF    */
*                                     /* COMMAND TEXT               */
*/* PROCESS ANCHOR BLOCK                                              *
*/*  REVISIONS                                         002 11/16/75  */
*/*       APAR      OZ19540    DCL PABSSN ABNORMAL           @ZA19540*/
*DCL  1  ISTPAB BDY(DWORD) BASED,                               01S0561
*       2  PABWQCHN CHAR(8) BDY(DWORD), /* CPS SWAP FIELD FOR NEQ&CHN *
*        3  PABWEQA PTR(31) BDY(WORD), /* WORK ELEMENT QUEUE ADDRESS  *
*           4  PABWEQG BIT(1),         /* GATING BIT                  *
*           4  PABRSV01 BIT(7),        /* RESERVED                    *
*           4  PABWEQP PTR(24),        /* WKEL PTR                    *
*        3  PABCHAIN PTR(31) BDY(WORD), /* APS CHAIN                  *
*           4  PABCHNG BIT(1),         /* GATING BIT                  *
*           4  PABRESCH BIT(1),        /* RESCHEDULE PAB AT     01S0561
*                                         TPEXIT                      *
*           4  PABCDP BIT(1),          /* CLOSE DST/CHANGE IN PROGRESS*
*           4  PABUNCON BIT(1),        /* UNCONDITIONALLY RESCHEDULE
*                                         PAB AT TPEXIT               *
*           4  PABRESET BIT(1),        /* RESET ISSUED ON THIS PAB    *
*           4  PABRUNNG BIT(1),        /* PAB RUNNING                 *
*           4  PABDELAY BIT(1),        /* DELAY OPTION USED           *
*           4  PABRSV02 BIT(1),        /* RESERVED                    *
*           4  PABCHNGP PTR(24),       /* PSS CHAIN PTR               *
*        2  PABOFFST PTR(8),           /* OFFSET FROM CONTROL BLOCK   *
*        2  PABDVTA PTR(24),           /* DVT ADDRESS                 *
*        2  PABRPHFG PTR(31),          /* SCHED FLAGS AND RPH         *
*           3  PABFLAGS BIT(8),        /* SCHEDULING FLAGS            *
*              4  PABAPYP BIT(1),      /* APPLICATION IS A USER EXIT  *
*              4  PABPRIOR BIT(1),     /* IMMEDIATE PRIORITY          *
*              4  PABNORPR BIT(1),     /* NORMAL PRIORITY -           *
*                                      /* RESCHEDUALABLE              *
*              4  PABDYNAM BIT(1),     /* DYNAMIC                     *
*              4  PABSSN BIT(1) ABNL,  /* SYSTEM SERVICES    @ZA19540 *
*              4  PABERLCK BIT(1),     /* PAB ERROR LOCK FLAG         *
*                 5  PABERRLK BIT(1),  /* ERROR LOCK                  *
*                    6  PABERLOK BIT(1), /* ERROR LOCK                *
*/*    ABNORMAL TO ALLOW VARY COMPARE AND SWAP                        *
*              4  PABINHBT BIT(1) ABNL,/* 1=INHIBIT TRAFFIC,0=NO      *
*              4  PABNODQ BIT(1),      /* DO NOT DEQ WORK ELEMENT     *
*           3  PABRPHA PTR(24);        /* RPL HEADER ADDRESS          *
*DCL PABWEQG0 BIT(32) CONSTANT('7FFFFFFF'X),  /* TURN PABWEQG OFF     *
*    PABWEQG1 BIT(32) CONSTANT('80000000'X),  /* TURN PABWEQG ON      *
*    PABCHNG0 BIT(32) CONSTANT('7FFFFFFF'X),  /* TURN PABCHNG OFF     *
*    PABCHNG1 BIT(32) CONSTANT('80000000'X),  /* TURN PABCHNG ON      *
*    PABRESC0 BIT(32) CONSTANT('BFFFFFFF'X),  /* TURN PABRESCH OFF    *
*    PABRESC1 BIT(32) CONSTANT('40000000'X),  /* TURN PABRESCH ON     *
*    PABCDP0  BIT(32) CONSTANT ('DFFFFFFF'X), /* TURN PABCDP OFF      *
*    PABCDP1  BIT(32) CONSTANT ('20000000'X), /* TURN PABCDP ON       *
*    PABERLK0 BIT(32) CONSTANT('FBFFFFFF'X),  /* TURN PABERRLK ON     *
*    PABERLK1 BIT(32) CONSTANT('04000000'X),  /* TURN PABERRLK OFF    *
*    PABUNCO0 BIT(32) CONSTANT('EFFFFFFF'X),  /* TURN PABUNCON OFF    *
*    PABUNCO1 BIT(32) CONSTANT('10000000'X),  /* TURN PABUNCON ON     *
*    PABPRIR0 BIT(32) CONSTANT('BFFFFFFF'X),  /* TURN PAB PRIOR OFF   *
*    PABPRIR1 BIT(32) CONSTANT('40000000'X),  /* TURN PAB PRIOR ON    *
*    PABRST0  BIT(32) CONSTANT('F7FFFFFF'X),  /* TURN PABRESET OFF    *
*    PABRST1  BIT(32) CONSTANT('08000000'X),  /* TURN PABRESET ON     *
*    PABDLAY0 BIT(32) CONSTANT('FDFFFFFF'X),  /* TURN PAB DELAY OFF   *
*    PABDLAY1 BIT(32) CONSTANT('02000000'X);  /* TURN PAB DELAY ON    *
*/* LOCKWORD FORMAT DSECT                                            */
*/*  INITIAL LEVEL                                     001 05/24/74  */
*DCL 1 ISTLOK BDY(WORD) BASED,                                  01S0563
*     2  LOKCT CHAR(1) BDY(WORD),       /* COUNT OF LOCK OWNERS      */
*     2  LOKCHN PTR(24),                /* ADDR OF NEXT RPH WAITING
*                                          ON LOCK                   */
*        3  LOKCHNG CHAR(3),            /* CHAIN/FLAGS               */
*           4 *        CHAR(2),                                 01S0563
*           4 *        BIT(8),                                  01S0563
*             5 *        BIT(6),                                01S0563
*             5  LOKPRY BIT(1),         /* PRIORITY FLAG, 1 = ON     */
*             5  LOKXCL BIT(1);         /* EXCLUSIVE FLAG, 1 = ON    */
*DCL LOKXCL1  BIT(32) CONSTANT('00000001'X); /* CONSTANT TO TURN LOKXCL
*                                          ON                        */
*DCL LOKPRY1  BIT(32) CONSTANT('00000002'X); /* CONSTANT TO TURN LOKPRY
*                                          ON                        */
*DCL LOKCHN1  BIT(32) CONSTANT('00FFFFFC'X); /* CONSTANT TO TURN LOKXCL
*                                          AND LOKPRY OFF            */
*DCL LOKCT1   BIT(32) CONSTANT('01000000'X); /* CONSTANT TO MAKE LOKCT
*                                          = 1                       */
*DCL LOKCT255 BIT(32) CONSTANT('FF000000'X); /* CONSTANT TO CHECK FOR
*                                          MAX LOKCT (255)           */
*              /* DYNAMIC PAB 1K633 */                          01S0569
* /* 1K0997 JAN 20, 1973  MB   */                               01S0569
* /* 1K1142 MAR 03, 1973  MB   */                               01S0569
* DCL 1 ISTDYPAB BDY(DWORD) BASED, /* LEVEL 1 DECLARE 1K633 */  01S0569
*       2  DYPTYPE CHAR(1), /* CONTROL BLOCK TYPE CODE 1K633 */ 01S0569
*       2  DYPLNGTH PTR(8), /* CONTROL BLOCK LENGTH (BYTES)  1K633 */
*       2 DYPFLGS CHAR(2),     /* FLAGS 1K633 */                01S0569
*       2 DYPCHAIN PTR(31),    /* CHAIN POINTER 1K633 */        01S0569
*       2 DYPTSKID PTR(31),    /* TASKID OR PTR TO PSS TABLES 1K633 */
*       2  DYPRSV01 PTR(31),   /* RESERVED TO PRESERVE ALIGNMENT
*                                                             1K0997 */
*       2 DYPPAB CHAR(LENGTH(ISTPAB)) BDY(DWORD); /* LENGTH OF 1K0997
*                                                    PAB         */
*DCL DYTYP   BIT(8) CONSTANT ('11'X);   /* TYPE           1K1142 */
*/* RPL HEADER                                                        *
*/*  REVISIONS                                         006 04/09/75   *
*DCL RPHPTR PTR(31) REGISTER(1) RESTRICTED;                     01S0571
*DCL  1  ISTRPH BDY(WORD) BASED(RPHPTR),                        01S0572
*       2  RPHCNTL FIXED(32),          /* CONTROL INFORMATION         *
*       3  RPHTYPE CHAR(1),            /* CONTROL BLOCK TYPE          *
*       3  RPHLNGTH PTR(8),            /* LENGTH IN BYTES             *
*       3  RPHFLAGS BIT(8),            /* SYSTEM DEPENDENT FLAGS      *
*         4  RPHOGIND BIT(1),          /* OPEN GATE INDICATOR         *
*         4  RPHSPGIN BIT(1),          /* SPECIAL GATE OPEN IND.      *
*         4  RPHAPTYP BIT(1),          /* APS IS A USER EXIT          *
*            5  RPHAUTEX BIT(1),        /*EXIT TO AUTHORIZED USER VS2 *
*         4  RPHSMQ BIT(1),            /* INDICATOR IF RPH IS TO BE   *
*                                      /* QUEUED                      *
*         4  RPHSMTYP BIT(1),          /* REQUEST TYPE IS BUFFER OR   *
*                                      /* DOUBLE-WORD                 *
*         4  RPHSMCLR BIT(1),          /* INDICATOR IF BUFFER TO BE   *
*                                      /* CLEARED                     *
*           4  RPHMLTCP BIT(1),        /* USED BY LOCAL 3270  SUPPORT *
*                                      /* WHEN BUILDING MULTIPLE CHAN *
*                                      /* PROGRAM                     *
*           4  RPHFSTLC BIT(1),        /* USED BY LOCAL 3270 SUPPORT  *
*                                      /* TO INDICATE FIRST LCCW      *
*              5  RPHFNFLG BIT(1),     /* LCCW SET FUNCTION FLAGS     *
*        3  RPHFLGB BIT(8),            /* SECOND FLAG BYTE            *
*           4  RPHLOCK BIT(1),         /* LOCKING OPTION              *
*           4  RPHBSSP BIT(1),         /* SYSTEM SERVICES PROGRESS    *
*           4  RPHFBAPS BIT(1),        /* STG. OBTAINED BY APS        *
*           4  RPHPGCMP BIT(1),        /* BIT ON INDICATES RESOURCE   *
*                                      /* MGR HAS COMPLETED UNLOCK    *
*           4  RPHNRSAV BIT(1),        /* DO NOT SAVE ON ACTIVATE     *
*           4  RPHRLCRA BIT(1),        /* RPH CAN BE RELEASED         *
*                                      /* WHEN PURGE COMPLETE         *
*           4  *        BIT(2),        /* RESERVED                    *
*       2  RPHRPHA PTR(31),            /* ADDR.OF NEXT RPL HEADER     *
*         3  RPHGATE BIT(1),           /* GATING FLAG                 *
*         3  *       BIT(7),           /* RESERVED                    *
*         3  RPHRPHAP PTR(24),                                  01S0572
*       2  RPHTSKID PTR(31),           /* TASK IDENTIFICATION         *
*                                      /* OR ADDR.OF APS TABLE        *
*          3  *     CHAR(3),           /* RPH TSK ID                  *
*          3  RPHTIK PTR(8),           /* TIK                         *
*       2  RPHDVTA PTR(31),            /* ADDR.OF  CURRENT DVT        *
*       2  RPHRESMA PTR(31) BDY(WORD), /* TPWAIT-POST INFO */   01S0572
*         3 RPHWPFLG CHAR(1),          /* WAIT-POST FLAGS */    01S0572
*           4 RPHRSKEY BIT(4),         /* STORAGE PROTECT KEY TO RESUME
*                                         PROCESSING                  *
*           4 RPHWT BIT(1),            /* WAIT BIT */           01S0572
*           4 RPHPT BIT(1),            /* POST BIT */           01S0572
*           4 RPHPURGE BIT(1),         /* RPH FLAGGED BY RECOVERY    */
*                                      /* TO BE PURGED BY PSS        */
*                                      /* VS/2 ONLY                  */
*           4 RPHRSV01 BIT(1),        /* RESERVED                    */
*         3 RPHRESUM PTR(24),          /* RESUME ADDRESS */     01S0572
*       2  RPHPABOF PTR(8),            /* OFFSET OF PAB IN CONTROL BLK*
*       2  RPHMAJCB PTR(24),           /* ADDR.OF MAJOR CONTROL BLOCK *
*       2  RPHWEA PTR(31),             /* ADDR.OF WORK ELEMENT        *
*         3  RPHCSPA PTR(31),          /* ADDR OF ISTCSP              *
*           4  RPHWEGT BIT(1),         /* GATE FOR WORK ELEMENT PROC. *
*       2  RPHSRPRM PTR(31),           /* SERVICE ROUTINE PARM.FIELD  *
*         3 RPHSRP12 FIXED(15),        /* COUNT OF Q'ED SMS REQUESTS  *
*         3 RPHSRP34 FIXED(15),        /* SIZE OF Q'ED SMS REQUESTS   *
*       2  RPHCRR PTR(31),             /* ADDR.OF COMPONENT RECOVERY  *
*                                      /* RECORD                      *
*       2  RPHPABQA PTR(31),           /* PAB QUEUE ADDRESS           *
*          3 RPHPABFG CHAR(1),         /* FLAG BYTE CARRIED FROM PAB  *
*          3 RPHPABQP PTR(24),         /* POINTER TO QUEUE OF PAB'S   *
*       2  RPHWORK CHAR(64) BDY(WORD), /* 16 WORD WORK AREA           *
*         3  RPHSAVE1 FIXED(31),       /*                             *
*           4  RPHSBYTE CHAR(1),       /* 1-BYTE SAVE FIELD           *
*           4  RPHSBITS BIT(8),        /* SAVE FIELD FOR FLAG BYTE    *
*              5  RPHSBIT1 BIT(1),     /* 1ST SAVE FIELD              *
*              5  RPHSBIT2 BIT(1),     /* 2ND SAVE FIELD              *
*              5  RPHSBIT3 BIT(1),     /* 3RD SAVE FIELD              *
*              5  RPHSBIT4 BIT(1),     /* 4TH SAVE FIELD              *
*              5  RPHSBIT5 BIT(1),     /* 5TH SAVE FIELD              *
*              5  RPHSBIT6 BIT(1),     /* 6TH SAVE FIELD              *
*              5  RPHSBIT7 BIT(1),     /* 7TH SAVE FIELD              *
*              5  RPHSBIT8 BIT(1),     /* 8TH SAVE FIELD              *
*           4  RPHSHALF FIXED(15),     /* HALF WORD SAVE AREA         *
*         3  RPHSAVE2 FIXED(31),       /*                             *
*         3  RPHSAVE3 FIXED(31),       /*                             *
*         3  RPHSAVE4 FIXED(31),       /*                             *
*         3  RPHSAVE5 FIXED(31),       /*                             *
*         3  RPHSAVE6 FIXED(31),       /*                             *
*         3  RPHSAVE7 FIXED(31),       /*                             *
*         3  RPHSAVE8 FIXED(31),       /*                             *
*         3  RPHSAVE9 FIXED(31),       /*                             *
*         3  RPHSAV10 FIXED(31),       /*                             *
*         3  RPHSAV11 FIXED(31),       /*                             *
*         3  RPHSAV12 FIXED(31),       /*                             *
*         3  RPHSAV13 FIXED(31),       /*                             *
*         3  RPHSAV14 FIXED(31),       /*                             *
*         3  RPHSAV15 FIXED(31),       /*                             *
*         3  RPHSAV16 FIXED(31),       /*                             *
*       2  RPHNEXPO PTR(31);           /* ADDR.NEXT RPH TO BE POSTED  *
* DCL RPTYPE BIT(8) CONSTANT('01'X);   /* TYPE CODE FOR RPH           *
* DCL RPHWT0 BIT(32) CONSTANT('F7FFFFFF'X);   /* TURN RPHWT OFF */
* DCL RPHWT1 BIT(32) CONSTANT('08000000'X);   /* TURN RPHWT ON */
* DCL RPHPT0 BIT(32) CONSTANT('FBFFFFFF'X);   /* TURN RPHPT OFF */
* DCL RPHPT1 BIT(32) CONSTANT('04000000'X);   /* TURN RPHPT ON */
* DCL RPHPABQ1 BIT(24) CONSTANT('000000'X); /* TURN RPHPBQ GATE */
*/*  REVISIONS                                             03/04/77   *
*DCL ATCLCPTR PTR LOCATION(1032);      /* POINTER TO ATCVT            *
*DCL  1  ISTATCVT BDY(DWORD) BASED,                             01S0580
*        2  ATCCOM BDY(WORD),          /* SYSTEM INDEPENDENT FIELDS   *
*           3  ATCSTAT CHAR(4),        /* VTAM  STATUS INDICATORS     *
*              4  ATCSTAT1 CHAR(1),    /* VTAM  STATUS BYTE 1         *
*                 5  ATCSTART BIT(1),  /* VTAM  IS STARTING           *
*                 5  ATCACTIV BIT(1),  /* VTAM  IS ACTIVE             *
*                 5  ATCSNHLT BIT(1),  /* VTAM  SESSION HALT          *
*                 5  ATCQKHLT BIT(1),  /* VTAM  QUICK HALT            *
*                 5  ATCNETSL BIT(1),  /* NETSOL=YES SPECIFIED ON CMD *
*                 5  ATCINHLT BIT(1),  /* INTERNAL VTAM HALT QUICK    *
*                 5  ATCMDHLT BIT(1),  /* VTAM CMD PROC HALTED        *
*                 5 * BIT(1),          /* RESERVED                    *
*              4  ATCSTFLG BIT(8),     /* STORAGE MANAGEMENT FLAGS    *
*                 5  ATCHSDMF BIT(1),  /* SYSTEM SLOW DOWN FLAG       *
*              4  ATCPOFLG BIT(8),     /* PROGRAM OPERATOR            *
*                                      /* INTERFACE FLAGS             *
*                 5 ATCPOUNS BIT(1),   /* APPLICATION AUTHORIZED TO   *
*                                      /* RECEIVE UNSOLICITED MESSAGES*
*                                      /* 1 = YES                     *
*                 5 *        BIT(7),   /* RESERVED                    *
*              4  ATCSTAT4 CHAR(1),    /* VTAM  STATUS BYTE 4         *
*                 5  ATCPRTAT BIT(1),  /* 1 = TRACE PRINT ACTIVE,
*                                         0 = NOT ACTIVE              *
*                 5  ATCTPRT BIT(1),   /* WHEN 1, TPRINT IN PROCESS   *
*                 5  ATCMTST BIT(1),   /* WHEN 1, MODIFY TEST IN
*                                         PROCESS                     *
*                 5  ATCNCSD BIT(1),   /* NCS QUIESCED DURING HALT    *
*                 5  ATCVTTRC BIT(1),  /* VTAM TRACE, 1=ACTIVE        *
*                 5  ATCRSV04 BIT(3),  /* RESERVED                    *
*           3  ATCAPI PTR(31),         /* ADDR OF API ROUTINE         *
*           3  ATCDCFRR PTR(31),       /* POINTER TO FRR OF CONTROL
*                                         LAYER,INITIALIZED BY OPENDST*
*           3  ATCRDT PTR(31),         /* POINTER TO FIRST RDT        *
*           3  ATCSRT PTR(31),         /* POINTER TO SRT DIRECTORY    *
*           3  ATCASCHD PTR(31),       /* POINTER TO AP SCHEDULER     *
*           3  ATCECMOD CHAR(4),       /* ECB FOR MODIFY COMMAND PROC.*
*           3  ATCMODQ PTR(31),        /* POINTER FOR OUTPUT QUEUE    *
*                                      /* FOR MODIFY COMMAND          *
*           3  ATCECHLT CHAR(4),       /* ECB FOR HALT COMMAND        *
*           3  ATCHALTQ PTR(31),       /* POINTER TO OUTPUT QUEUE     *
*                                      /* FOR HALT COMMAND            *
*           3  ATCECVRY CHAR(4),       /* ECB FOR VARY COMMAND PROC.  *
*           3  ATCVARYQ PTR(31),       /* POINTER TO OUTPUT QUEUE     *
*                                      /* FOR VARY COMMAND            *
*           3  ATCECDSP CHAR(4),       /* ECB FOR DISPLAY COMMAND     *
*           3  ATCDSPLQ PTR(31),       /*  POINTER TO OUTPUT QUEUE    *
*                                      /* FOR DISPLAY COMMAND         *
*           3  ATCOCHA PTR(31),        /* POINTER TO OCT HEADER       *
*           3  ATCECSES CHAR(4),       /* ECB TO HALT SESSION MODE    *
*           3  ATCECVRQ CHAR(4),       /* ERP ECB FOR VARY REQ. INFO. *
*                                      /* REQUEST NOTIFICATION        *
*           3  ATCVPARM PTR(31),       /* ADDR OF VARY PARAMETERS     *
*           3  ATCECOPC CHAR(4),       /* ECB TOINDICATE OPERATOR     *
*                                      /* CONTROL PROCESSING COMPLETE *
*           3  ATCECNET CHAR(4),       /* ERP ECB FOR NETWORK         *
*                                      /* CONFIGURATION REQUEST       *
*           3  ATCECPRM PTR(31),       /* POINTER TO QAB FOR ERP'S    *
*                                      /* ECB PARAMETERS              *
*           3  ATCHLTMS PTR(31),       /* POINTER TO HALT COMMAND     *
*                                      /* OR HALT RETURN MESSAGE      *
*           3  ATCFSB PTR(31),         /* PTR TO FEEDBACK STATUS      *
*                                      /* BLOCK                       *
*           3  ATCFRSCH PTR(31),       /* POINTER TO FEEDBACK         *
*                                      /* ROUTINE SCHEDULER           *
*           3  ATCRDTH PTR(31),        /*  POINTER RDT HEADER         *
*           3  ATCACCTA PTR(31),       /* POINTER TO INSTALLATION     *
*                                      /* ACCOUNTING ROUTINE          *
*           3  ATCAUTHA PTR(31),       /* POINTER TO INSTALLATION     *
*                                      /* AUTHORISATION ROUTINE       *
*           3  ATCPTCHA PTR(31),       /* PTR TO VTAM PATCH AREA      *
*           3  ATCCONFT PTR(31),       /* POINTER TO VTAM             *
*                                      /* CONFIGURATION TABLE         *
*           3  ATCFDVT PTR(31),        /* PTR TO FIRST DVT FOR O/C    *
*           3  ATCFEPT PTR(31),        /* PTR TO FIRST EPT FOR O/C    *
*           3  ATCDVTPT PTR(31),       /* ADDR OF LOAD MOD FOR        *
*                                      /* TYPE=VTAM TRACING           *
*           3  ATCBPDA PTR(31),        /* PTR TO BUFFER POOL DIRECTORY*
*           3  ATCADD PTR(31),         /* POINTER TO ADD PROCEDURE    *
*           3  ATCREMOV PTR(31),       /* POINTER TO REMOVE PROCEDURE *
*           3  ATCIOTRC PTR(31),       /*  POINTER TO I/O TRACE       *
*                                      /* PROCEDURE                   *
*              4 ATCTHTRC PTR(31),     /* ADDR OF TH TRACE ROUTINE    *
*                5 ATCTPBUF PTR(31),   /* TPIOS BUFFER TRACE(ISTRARTP)*
*           3  ATCBFTRC PTR(31),       /* PTR TO BUFFER TRACE         *
*                                      /* PROCEDURE                   *
*           3  ATCFBRPH PTR(31),       /* ADDR OF FEEDBACK PROC RPH   *
*           3  ATCBLDLA PTR(31),       /* ADDR OF BLDL ROUTINE        *
*           3  ATCALOAD PTR(31),       /* ADDR OF ALOAD ROUTINE       *
*           3  ATCREADA PTR(31),       /* ADDR OF SOURCE READ ROUTINE *
*           3  ATCGTSTR PTR(31),       /* ADDR OF GETSTOR ROUTINE     *
*           3  ATCFRSTR PTR(31),       /* ADDR OF FREESTOR ROUTINE    *
*           3  ATCSTMA PTR(31),        /* ADDR OF SM INITIALIZATION   *
*                                      /* ROUTINE                     *
*           3  ATCACDA PTR(31),        /* ADDR OF FIRST ACDEB         *
*           3  ATCSMRQ PTR(31),        /* ADDR OF REQUEST STORAGE     *
*                                      /* ROUTINE                     *
*           3  ATCSMQU PTR(31),        /* ADDR OF QUEUE REQUEST RTNE
*                                         - DOS ONLY                  *
*           3  ATCSMRS PTR(31),        /* ADDR OF RELEASE STORAGE     *
*                                      /* ROUTINE                     *
*           3  ATCSMRC PTR(31),        /* ADDR OF RECOVER STORAGE     *
*                                      /* ROUTINE  - DOS ONLY         *
*           3  ATCSMBQ PTR(31),        /* PTR TO Q'ED REQ. SMS RTN.   *
*           3  ATCFIRA PTR(31),        /* ADDR OF FEEDBACK INITIATION *
*                                      /* RPH                         *
*           3  ATCSRTAD PTR(31),       /* PTR TO SRTADD ROUTINE       *
*           3  ATCSRTDF PTR(31),       /* PTR TO SRTDELE ROUTN        *
*           3  ATCDCC60 PTR(31),       /* PTR TO ISTDCC60 - CTL. LAYER
*                                         MOVE TO USER AREA           *
*           3  ATCDCC61 PTR(31),       /* PTR TO ISTDCC61 - CTL. LAYER
*                                         MOVE FIXED TO PAGABLE       *
*/*  BEGIN 'ANY' DVT                                                  *
*           3  ATCNERST PTR(31),       /* PTR TO ISTDCC00 - REQUEST-ST*
*           3  ATCNERCV PTR(31),       /* PTR TO ISTRCC21-RECEIVE OB  *
*           3  ATCNERNE PTR(31),      /* PTR TO ISTDCC25 - READ-ANY   *
*           3  ATCNERFN PTR(31),      /* PTR TO ISTDCC02 - REQUEST-FN *
*/*  END 'ANY' DVT                                                    *
*           3  ATCAPOST PTR(31),      /* PTR TO VTAM  POST ROUTINE    *
*           3  ATCVTMID CHAR(2),      /* HOST MAJOR NODE I.D.         *
*           3  ATCRSV11 CHAR(2),      /* RESERVED                     *
*           3 ATCRCC63 PTR(31),  /* HSKPANYQ POINTER                  *
*           3 ATCRCC26 PTR(31),  /* SEND RESPONSE POINTER             *
*           3 ATCRCC65 PTR(31),  /* SET RPL POINTER                   *
*           3  ATCNESAL PTR(31),      /* PTR TO ISTDCC24 - SOLICIT-ALL*
*           3  ATCNERAP PTR(31),       /* PTR TO ISTDCC85 - READ ANY
*                                         PURGE                       *
*           3 ATCACTRM FIXED(15),     /* COUNT OF ACTIVE TERMINALS    *
*           3 ATCCIDM BIT(16),        /* CID MASK                     *
*           3 ATCMSGSP BIT(8), /* RESERVED FOR MESAGE SURPRESSION     *
*         2 ATCMAXID PTR(8),   /* MAXIMUM NUMBER OF MAJOR NODES, 0 =
*                                 NUMBER OF ENTRIES IN THE MNT        *
*         2 ATCRSV16 CHAR(2),  /* NOT USED                            *
*         2 ATCMNT PTR(31),    /*PTR TO MAJOR NODE TABLE -SET BY SYS.
*                                DEF. REF. BY ISTSDCCB (CBDEF), 01S0580
*                                ISTSDCCI (CINDEXY)                   *
*         2 ATCCDADD PTR(31),  /*PTR TO CIDADD ROUTINE ISTSDCCA 01S0580
*                                 REF. BY CIDCTL MACRO                *
*         2 ATCCDDEL PTR(31),  /*PTR TO CIDDEL ROUTINE ISTSDCCD 01S0580
*                                 REF. BY CIDCTL MACRO                *
*         2 ATCCDFND PTR(31),  /*PTR TO CIDFND ROUTINE IATSDCCF 01S0580
*                                 REF. BY CIDCTL MACRO                *
*         2 ATCESC01 PTR(31),  /*PTR TO ESC01                         *
*         2 ATCESC02 PTR(31),  /*PTR TO ESC02                         *
*         2 ATCCSMR PTR(31),        /* PTR TO CONNECTION SERVICES     *
*                                   /*  MASTER ROUTINE                *
*           3 ATCCSMA PTR(31),      /* PTR TO CONNECTION SERVICES
*                                      MASTER ROUTINE                 *
*         2 ATCOCRT PTR(31),        /* PTR TO OPEN/CLOSE ROUTINE      *
*         2 ATCUEP  PTR(31),        /* POINTER TO USER EXIT           *
*         2 ATCSHRTN CHAR(8),       /* NAME OF VTAM  SHARED RTN       *
*                                   /*  TO BE LOADED                  *
*         2 ATCSHRFG BIT(8),        /* ATTRIBUTE FLAGS                *
*           3 ATCLAST BIT(1),       /* INDICATE HTIS IS LAST MODULE   *
*         2 ATCXRANG CHAR(1),       /* NUMBER OT BITS IN X-VALUE
*                                       PORTION   OF CID              *
*         2 ATCSAF   CHAR(2),       /* SUB AREA ADDRESS FIELD         *
*         2 ATCEPA PTR(31),         /* ENTRY POINT ADDR OF LOADED     *
*         2 ATCALERT PTR(31),       /* POINTER TO ALERT-ROUTINE 01S0580
*                                      ISTSDCAL                       *
*         2 ATCDVLOD PTR(31),       /* PTR TO ISTSDCOD                *
*         2 ATCTRCPT PTR(31),       /* POINTER TO TRACE PARM LIST     *
*         2 ATCDVT   PTR(31),       /* POINTER TO FIRST DVT ON CHAIN  *
*         2 ATCEPT   PTR(31),       /* POINTER TO FIRST EPT ON CHAIN  *
*         2 ATCMSGP PTR(31),        /* POINTER TO TPMSG PROCESSOR     *
*         2 ATCMSGM PTR(31),        /* POINTER TO TPMSG - MESSAGE
*                                      CSECT                          *
*         2 ATCTRPAB  PTR(31),      /* ADDRESS OF TRACE WRITER PAB    *
*         2 ATCVTLOD PTR(31),       /* ADDR OF VTAM LOAD LIST         *
*         2 ATCECPRT CHAR(4),       /* ECB FOR TRACE FILE PRINT       *
*         2 ATCZDVTB PTR(31),       /* ADDRESS OF ISTZCFBI            *
*         2 ATCECTLP CHAR(4),       /* TOLTEP ECB                     *
*         2 ATCRVCHS CHAR(8),       /* RESERVED                       *
*         2 ATCCRME  PTR(31),       /* VARY PSS CONTROL MECHANISM     *
*         2 ATCHPGM,                /* BUFFER INFORMATION            */
*           3 ATCHBFNO FIXED(15),   /* NUMBER OF BUFFS FOR CHANNEL   */
*           3 ATCHBSIZ FIXED(15),   /* BUFFER SIZE IN BYTES          */
*         2 ATCDEBCH PTR(31),       /* CLOSE DEB CHAIN PTR           */
*         2 ATCTODVT PTR(31),       /* THE TOLTEP DVT PTR POINTED
*                                      TO BY 3RD WORD OF PAB         */
*         2 ATCADEL  PTR(31),       /* A DELETE ROUTINE ADDRESS      */
*         2 ATCCDPTR PTR(31),       /* PTR TO ISTOCCCD - DOS ONLY    */
*         2 ATCLDNCS PTR(31),       /* PTR TO NCSPL FOR LOAD/DUMP    */
*         2 ATCLDECB BIT(32),       /* ECB FOR LOAD/DUMP SUBTASK     */
*         2 ATCAPCR5 PTR(31),       /* POINTER TO ISTINCR5           */
*         2 ATCRSV69 PTR(31),       /* RESERVED TO SYNCH WITH DOS    */
*         2 ATCNODEL CHAR(8),       /* VSAM DATA SET NAME            */
*         2 ATCNODDS PTR(31),       /* POINTER TO RPL                */
*         2 ATCONFIG CHAR(8),       /* START VTAM CONFIG = PARAMETER */
*         2 ATCRSV99 CHAR(4),       /* RESERVED FOR LATER POINTERS   */
*         2 ATCAP33 PTR(31),        /* PTR TO ISTAPC33               */
*         2 ATCAP35 PTR(31),        /* PTR TO ISTAPC35               */
*         2 ATCAP36 PTR(31),        /* PTR TO ISTAPC36               */
*         2 ATCDVTLK CHAR(LENGTH(ISTLOK)), /* LOCK WORD FOR DVT LOCK */
*         2 ATCCDFIN PTR(31),       /* POINTER TO ISTSDCRR           */
*         2 ATCCDFDN PTR(31),       /* POINTER TO ISTSDCCN           */
*         2 ATCVOCLK CHAR(LENGTH(ISTLOK)), /* VOCLOCK LOCK           */
*         2 ATCRDTLK CHAR(LENGTH(ISTLOK)), /* RDTLOCK LOCK           */
*         2 ATCRSV97 PTR(31),              /* DWORD ALIGNMENT        */
*         2 ATCVPAB1 CHAR(LENGTH(ISTDYPAB)) BDY(DWORD), /* PAB FOR VARY
*                                           UNDER PSS CONTROL        */
*         2 ATCPGPAB CHAR(LENGTH(ISTDYPAB)) BDY(DWORD), /* ERP PAB FOR
*                                      PURGE                         */
*         2 ATCDLRPB CHAR(LENGTH(ISTDYPAB)) BDY(DWORD), /* DUMP LOAD &
*                                           RESTART PAB              */
*         2 ATCCCLAD PTR(31),       /* ADDRESS OF VARY ERP (ISTINCCL)*/
*         2 ATCCDLAD PTR(31),       /* ADDRESS OF VARY DUMP,LD RSTRT
*                                      (ISTINCDL)                    */
*         2 ATCOCCOB PTR(31),       /* ADDRESS ISTOCCOB              */
*         2 ATCOCCCB PTR(31),       /* ADDRESS ISTOCCCB              */
*         2 ATCTIPAB CHAR(LENGTH(ISTDYPAB)) BDY(DWORD), /* A PAB
*                                           FOR ISTOLTP              */
*         2 ATCTCIPB CHAR(LENGTH(ISTDYPAB)) BDY(DWORD), /* A PAB
*                                           FOR TOLTEP CLIP          */
*         2 ATCVTIPB CHAR(LENGTH(ISTDYPAB)) BDY(DWORD), /* A PAB
*                                           FOR TOLTEP-VTAM INTERFACE*/
*         2 ATCTCLOM PTR(31),      /* ADDR TOLTEP CLOP PROC          */
*         2 ATCTCLIM PTR(31),      /* ADDR TOLTEP CLIP PROC          */
*         2 ATCVTINM PTR(31),      /* ADDR TOLTEP-VTAM INTF PROC     */
*         2 ATCTACB  PTR(31),      /* TOLTEP ACB                     */
*         2 ATCRSV10 CHAR(LENGTH(ISTDYPAB)) BDY(DWORD), /* RESERVED  */
*         2 ATCPTR00 CHAR(LENGTH(ISTDYPAB)) BDY(DWORD), /* A PAB     */
*         2 ATCCFEAD PTR(31),          /* ADDR OF ISTINCFE           */
*         2 ATCVLCNT CHAR(4) BDY(HWORD), /* VARY DEVICE ONLINE COUNTS*/
*           3 ATCRNCNT PTR(16),        /* 370X COUNT                 */
*           3 ATCLCLCT PTR(16),        /* 3270 COUNT                 */
*         2 ATCS49XI PTR(31),          /* ADDRESS OF ISTPICXI        */
*         2 ATCS49XL PTR(31),          /* ADDRESS OF ISTPICXL        */
*         2 ATCPODVT PTR(31),          /* PTR TO PROGRAM OPERATOR DVT*/
*         2 ATCRNO,                                             01S0580
*           3 *        CHAR(1),                                 01S0580
*           3 ATCPOIA  PTR(24),        /* PTR TO PROGRAM OPERATOR    */
*                                      /* INTERFACE AREA             */
*         2 ATCSOPD CHAR(8) BDY(WORD), /* SESSION CONTROL            */
*           3 ATCSEC01 PTR(31),        /* OUTBOUND PROCESSING        */
*           3 ATCSEC10 PTR(31),        /* DVT                        */
*         2 ATCSIPD CHAR(12) BDY(WORD),/* SESSION CONTROL            */
*           3 ATCSEC21 PTR(31),        /* INBOUND PROCESSING         */
*           3 ATCSEC30 PTR(31),        /* FEEDBACK                   */
*           3 ATCSEC40 PTR(31),        /* DVT                        */
*         2 ATCSECST CHAR(4) BDY(WORD),/* SESSION CONTROLSESS TERM   */
*           3 ATCSEC51 PTR(31),        /* RECOVERY DVT               */
*         2 ATCNMCTR FIXED(15),        /* NAME COUNTER               */
*         2 ATCSTAT2 BIT(8),           /* TRACE FLAGS                */
*           3 ATCTRAPI BIT(1),         /* API                        */
*           3 ATCTRESC BIT(1),         /* ESC                        */
*           3 ATCTRPSS BIT(1),         /* PSS                        */
*           3 ATCTRLOK BIT(1),         /* LOCKS                      */
*           3 ATCTRSMS BIT(1),         /* SMS                        */
*           3 *        BIT(3),         /* RESERVED                   */
*         2 *        BIT(8),           /* RESERVED                   */
*         2 ATCSRTAB PTR(31),          /* SEARCH LOGON MODE TABLE    */
*                                      /* RTN ADDRESS (ISTINCSH)     */
*         2 ATCUSSPT PTR(31),          /* DEFAULT USS DEFINITION     */
*                                      /* TABLE ADDRESS (ISTINCDT)   */
*         2 ATCMODTB PTR(31),          /* DEFAULT SYSTEM LOGON MODE  */
*                                      /* TABLE ADDRESS (ISTINCLM)   */
*         2 ATCINCW3 PTR(31),          /* ADDRESS OF ISTINCW3        */
*         2 ATCIOECB PTR(31),          /* ECB USED BY IOS -          */
*                                      /* POINTED TO BY IOBECBPT     */
* 2 ATCVDPAB CHAR(LENGTH(ISTDYPAB)) BDY(DWORD),                 01S0580
*                                    /* SSCP COMMAND PROCESSING PAB  */
* 2 ATCVFPAB CHAR(LENGTH(ISTDYPAB)) BDY(DWORD),                 01S0580
*                                    /* SSCP FRONT END PAB           */
* 2 ATCVDLOK CHAR(LENGTH(ISTLOK)),   /* SSCP SERIALIZATION LOCK      */
*/* END OF COMMON AREA                                               */
*/* VS1/VS2 COMMON CODE.                                             */
*        2  ATCVTBAM CHAR(4),                                   01S0580
*           3  *     CHAR(3),          /* RESERVED                    *
*           3  *     CHAR(1),          /* FLAGS                       *
*              4 ATCVTMAB BIT(1) ABNL, /* ABEND IN VTAM JOBSTEP       *
*              4 *        BIT(7),      /* RESERVED                    *
*        2  ATCAOSM BDY(DWORD),                                 01S0580
*/*                                                                   *
*           3  ATCSRBRT PTR(31),       /* POINTER TO ROUTINE UNDER    *
*                                      /* SRB CONTROL                 *
*           3  ATCGSRBQ PTR(31),       /* READY QUEUE FOR GLOBAL SRB'S*
*              4  ATCGSRBG BIT(8),     /* READY QUEUE GATE BYTE       *
*                 5  ATCGSRBF BIT(1),  /* READY QUEUE GATE BIT        *
*           3  ATCPRPH PTR(31),        /* PTR TO PREALLOCATED RPH     *
*           3  ATCCMTCB PTR(31),       /* PTR TO COMMUNICATIONS TASK  *
*                                      /* TCB                         *
*           3  ATCAP11 PTR(31),        /* PTR TO ISTAPC11             *
*           3  ATCAP12 PTR(31),        /* PTR TO ISTAPC12             *
*           3  ATCAP31 PTR(31),        /* PTR TO ISTAPC31             *
*           3  ATCAP32 PTR(31),        /* PTR TO ISTAPC32             *
*           3  ATCAP34 PTR(31),        /* PTR TO ISTAPC34             *
*           3  ATCAP52 PTR(31),        /* PTR TO ISTAPC52             *
*           3  ATCAP53 PTR(31),        /* PTR TO ISTAPC53             *
*           3  ATCAP54 PTR(31),        /* PTR TO ISTAPC54             *
*           3  ATCAP57 PTR(31),        /* PTR TO ISTAPC57             *
*           3  ATCAP58 PTR(31),        /* PTR TO ISTAPC58             *
*           3  ATCAP61 PTR(31),        /* PTR TO ISTAPC61             *
*           3  ATCAP63 PTR(31),        /* PTR TO ISTAPC63             *
*           3  ATCAP64 PTR(31),        /* PTR TO ISTAPC64             *
*           3  ATCZFSVT PTR(31),       /* TPIOS FIXED SRVICES VCTR TAB*
*           3  ATCZPSVT PTR(31),       /* TPIOS PAGBL SRVCES VCTR TABL*
*           3  ATCICNCB PTR(31),       /* HEAD OF ICNCB QUEUE         *
*           3  ATCZDVT1 PTR(31),       /* TPIOS SLODWN RECOVRY PRCSR  *
*           3  ATCZDVT3 PTR(31),       /* 370X FEEDBACK STAT CNTRL RTR*
*           3  ATCZDVT4 PTR(31),       /* OPERATOR MESSAGE SCHEDULER  *
*           3  ATCZDVT6 PTR(31),       /* DIALOGUE SCHEDULER (INBOUND)*
*           3  ATCAP65 PTR(31),        /* PTR TO ISTAPC65            */
*           3  ATCICAPP CHAR(20) BDY(WORD), /* 3705 APPENDAGE VECTOR  *
*              4  ATCCDRPH PTR(31),    /* ADDR CLOSE DEB RPH    01S0580
*                                         (DUMMY EOA APP.)           */
*              4  ATCZSIOA PTR(31),    /* ADDR 3705 SIO APPENDAGE    */
*              4  ATCCDTCB PTR(31),    /* VTAM TCB (DUMMY PCI APP.)  */
*              4  ATCZCEA PTR(31),     /* ADDR 3705 CHANNEL END 01S0580
*                                         APPENDAGE                  */
*              4  ATCZAEA PTR(31),     /* ADDR 3705 CHANNEL END 01S0580
*                                         APPENDAGE                  */
*           3  ATCLDAPP CHAR(20) BDY(WORD), /* LOCAL 3270 APPENDAGE
*                                         VECTOR                     */
*              4  ATCCDTID PTR(31),    /* TASK ID OF VTAM       01S0580
*                                         (DUMP EOE)                 */
*              4  ATCSMFRR PTR(31),    /* ADDR OF SMS FRR       01S0580
*                                         (DUMMY SIOA)               */
*              4  ATCRSV17 PTR(31),    /* RESERVED FOR ALIGNMENT     */
*              4  ATCZLCEA PTR(31),    /* ADDR 3270 CHANNEL END 01S0580
*                                         APPENDAGE                  */
*              4  ATCZLAEA PTR(31),    /* ADDR 3270 CHANNEL END 01S0580
*                                         APPENDAGE                  */
*           3  ATCDAPVT CHAR(24) BDY(WORD),  /* DUMMY APPENDAGE 01S0580
*                                         VECTOR TABLE FOR LOAD/DVMMY*/
*              4  ATCDEOEA PTR(31),    /* ADDRESS OF DUMMY END  01S0580
*                                         OF EXTENT APPENDAGE        */
*              4  ATCDSIOA PTR(31),    /* ADDRESS OF DUMMY END  01S0580
*                                         OF SIO APPENDAGE           */
*              4  ATCDPCIA PTR(31),    /* ADDRESS OF DUMMY PCI  01S0580
*                                         APPENDAGE                  */
*              4  ATCDCEA PTR(31),     /* ADDRESS OF CHANNEL END
*                                         APPENDAGE                  */
*              4  ATCDXCEA PTR(31),    /* ADDRESS OF ABNORMAL   01S0580
*                                         END APPENDAGE              */
*              4  ATCDAPDG CHAR(2),    /* DUMMY APPENDAGE            */
*              4  ATCRSV56 CHAR(2),    /* RESERVED                   */
*           3  ATCZDVT7 PTR(31),       /* ADDR OF RESET CLEANUP 01S0580
*                                         (PHASE 1)                   *
*           3  ATCZDVT8 PTR(31),       /* 3270 LOCAL TEST AND CTL
*                                         FEEDBACK ROUTER            */
*           3  ATCZDVT9 PTR(31),       /* ADDRESS OF ISTZDFKA        */
*           3  ATCZDVTA PTR(31),       /* ADDRESS OF ISTZCFIA        */
*           3  ATCZDVTX PTR(31),       /* ADDRESS OF TRUNK LINE 01S0580
*                                         DEACTIVATE ROUTINE         */
*           3  ATCZLPVT PTR(31),       /* ADDRESS OF ISTZPSVA        */
*           3  ATCZLFVT PTR(31),       /* TPIOS 3270 LOCAL FIXED
*                                         SERVICES VECTOR TABLE      */
*           3  ATCZPAB1 CHAR(LENGTH(ISTDYPAB)) BDY(DWORD), /* PAB FOR
*                                         TEST AND CTL FEEDBACK ROUTER*
*           3  ATCZPAB2 CHAR(LENGTH(ISTDYPAB)) BDY(DWORD), /* 370X
*                                         STATUS AND FEEDBACK ROUTER
*                                         DYNAMIC PAB                */
*           3  ATCAP51  PTR(31),       /* PTR TO ISTAPC51            */
*           3  ATCZDFJ0 PTR(31),       /* ADDR OF ISTZDFJ0           */
*           3  ATCAP37  PTR(31),       /* PTR TO ISTAPC37            */
*           3  ATCAP38  PTR(31),       /* PTR TO ISTAPC38            */
*           3  ATCDMAPP PTR(31),       /* DUMMY APPENDAGE ROUTINE    */
*                                      /* FOR ABEND                  */
*           3  ATCRPT12 PTR(31),       /* RESERVED                   */
*        3  ATCCRA   CHAR(8) BDY(DWORD), /* AVAILABLE CRA             *
*           4 ATCCRAQ  PTR(31),          /* QUEUE OF AVAILABLE CRAS   *
*           4 ATCCRACN FIXED(31),        /* COUNTS                    *
*             5 ATCCRARC FIXED(16),      /* ENQUEUE COUNT TO ALLOW    *
*                                        /* MULTIPLE SIMUALTANIOUS    *
*                                        /* ENQUEUES AND DEQUEUES     *
*             5 ATCCRAAC FIXED(16),      /* COUNT OF CRAS ON AVAIL Q  *
*        3  ATCSRB   CHAR(8) BDY(DWORD), /* AVAILABLE SRBS            *
*             4 ATCSRBQ  PTR(31),        /* QUE OF AVAILABLE SRBS     *
*             4 ATCSRBCN FIXED(31),      /* COUNTS                    *
*               5 ATCSRBRC FIXED(16),    /* ENQUEUE COUNT TO ALLOW    *
*                                        /* MULTIPLE SIMUALTANIOUS    *
*                                        /* ENQUEUES AND DEQUEUES     *
*               5 ATCSRBAC FIXED(16),    /* COUNT OF SRBS ON AVAIL Q  *
*        3  ATCCRPL  CHAR(8) BDY(DWORD), /* AVAILABLE CRPLS           *
*             4 ATCCRPLQ PTR(31),        /* QUE OF AVAILABLE CRPLS    *
*             4 ATCRPLCN FIXED(31),      /* COUNTS                    *
*               5 ATCRPLRC FIXED(16),    /* ENQUEUE COUNT TO ALLOW    *
*                                        /* MULTIPLE SIMUALTANIOUS    *
*                                        /* ENQUEUES AND DEQUEUES     *
*               5 ATCRPLAC FIXED(16),    /* COUNT OF CRPLS ON AVAIL Q *
*           3  ATCSQAFR BDY(DWORD),    /* DOUBLE WORD FOR CDS   01S0580
*                                          SQA RELEASE       @VSRIUBL*/
*             4 ATCORTBF PTR(31),      /* ANCHOR FOR TO-BE-     01S0580
*                                          FREED STG Q       @VSRIUBL*/
*             4 ATCORTBC PTR(31),      /* PTR TO TCB OF TASK    01S0580
*                                          OWNING STG Q      @VSRIUBL*/
*               5 ATCORSRB PTR(31),    /* PTR TO SMS SRB     @VSRIUBL*/
*                 6 ATCORQG  BIT(1)ABNL, /* SRB GATE FOR SMS @VSRIUBL*/
*           3  ATCOROBT PTR(31),      /* ANCHOR FOR OBTAINED    01S0580
*                                         STAGE              @VSRIUBL*/
*           3  ATCORFRL PTR(31),      /* ADDR OF ISTORFRL    @VSRIUBL*/
*           3  ATCORFMG PTR(31),      /* ADDR OF ISTORFMG    @VSRIUBL*/
*           3  ATCINFDD PTR(31),      /* ADDR OF ISTINFDD    @VSRIUBL*/
*           3  ATCAIWT  PTR(31),      /* ADDRESS OF BYTE        01S0580
*                                         FOLLOWING WAIT IN     01S0580
*                                         ISTAICCK           @VSRIUBL*/
*           3  *        BIT(8),       /* RESERVED            @VSRIUBL*/
*             4 ATCABEN BIT(1)ABNL,   /* VTAM IS ABNORMALLY     01S0580
*                                         ENDING             @VSRIUBL*/
*             4 ATCOPKL BIT(1)ABNL,   /* OPERATOR IS ENDING     01S0580
*                                         VTAM               @VSRIUBL*/
*             4 ATCSNUF BIT(1)ABNL,   /* RECURSIVE VTAM ABEND   01S0580
*                                         DURING RSCE MGR       01S0580
*                                         OPERATION          @VSRIUBL*/
*             4 *       BIT(5),       /* RESERVED            @VSRIUBL*/
*           3  *        BIT(24),      /* RESERVED            @VSRIUBL*/
*           3  ATCRPT27 PTR(31),       /* RESERVED                   */
*           3  ATCRPT28 PTR(31),       /* RESERVED                   */
*           3  ATCRPT29 PTR(31),       /* RESERVED                   */
*           3  ATCRPT30 PTR(31),       /* RESERVED                   */
*           3  ATCRPT31 PTR(31),       /* RESERVED                   */
*           3  ATCRPT32 PTR(31),       /* RESERVED                   */
*           3  ATCRPT33 PTR(31),       /* RESERVED                   */
*           3  ATCRPT34 PTR(31),       /* RESERVED                   */
*           3  ATCRPT35 PTR(31),       /* RESERVED                   */
*           3  ATCRPT36 PTR(31),       /* RESERVED                   */
*           3  ATCRPT37 PTR(31),       /* RESERVED                   */
*           3  ATCRPT38 PTR(31),       /* RESERVED                   */
*           3  ATCRPT39 PTR(31),       /* RESERVED                   */
*           3  ATCRPT40 PTR(31),       /* RESERVED                   */
*/* END OF VS1/VS2 COMMON CODE.                                      */
*/* START OF VS2 UNIQUE CODE.                                        */
*           3  ATCVTFLG BIT(32),                                01S0580
*              4 ATCVTACT BIT(1),      /* VTT ACTIVE                 */
*              4 *        BIT(31),     /* RESERVED                   */
*           3  ATCHLTCB PTR(31),       /* ECB FOR HALTING VTAM       */
*           3  ATCATA10 PTR(31),       /* PTR TO ISTATM10            */
*           3  ATCZLAAB PTR(31),       /* PTR TO ISTZLFAB            */
*           3  ATCCACXA PTR(31),       /* PTR TO ISTCFCXA            */
*           3  ATCSMARA PTR(31),       /* PTR TO ISTORFRA            */
*           3  ATCSMAID PTR(31),       /* PTR TO ISTORFID            */
*           3  ATCTPWQA PTR(31),       /* WAIT Q ANCHOR FOR TPIOS    */
*           3  ATCSMAPR PTR(31),       /* PTR TO ISTORFPR            */
*           3  ATCSMABF PTR(31),       /* PTR TO ISTORFBF            */
*           3  ATCPSTA  PTR(31),       /* ACTIVE PST QUEUE           */
*           3  ATCAPBE  PTR(31),       /* POINTER TO ISTAICBE        */
*           3  ATCTRMPB CHAR(LENGTH(ISTDYPAB)) BDY(DWORD),      01S0580
*                                      /* PAB FOR VTAM TERM TASK     */
*           3  ATCTPSPB CHAR(LENGTH(ISTDYPAB)) BDY(DWORD),      01S0580
*                                      /* PAB FOR TPIOS              */
*           3  ATCAP23  PTR(31),       /* PTR TO ISTAPC23            */
*           3  ATCAPC25 PTR(31),       /* PTR TO ISTAPC25            */
*           3  ATCAP41  PTR(31),       /* PTR TO ISTAPC41            */
*           3  ATCRCFY0 PTR(31),       /* PTR TO ISTRCFY0            */
*           3  ATCAP55  PTR(31),       /* PTR TO ISTAPC55            */
*           3  ATCAP56  PTR(31),       /* PTR TO ISTAPC56            */
*           3  ATCAPC59 PTR(31),       /* PTR TO ISTAPC59            */
*           3  ATCAP62  PTR(31),       /* PTR TO ISTAPC62            */
*           3  ATCAP66  PTR(31),       /* PTR TO ISTAPC66            */
*           3  ATCAP69  PTR(31),       /* PTR TO ISTAPM69            */
*           3  ATCAP82  PTR(31),       /* PTR TO ISTAPC82            */
*           3  ATCAP83  PTR(31),       /* PTR TO ISTAPC83            */
*           3  ATCAP84  PTR(31),       /* PTR TO ISTAPC84            */
*           3  ATCAP85  PTR(31),       /* PTR TO ISTAPC85            */
*           3  ATCAP86  PTR(31),       /* PTR TO ISTAPC86            */
*           3  ATCASCB  PTR(31),       /* PTR TO VTAM ASCB           */
*           3  ATCMPLTA  PTR(31),      /* PTR TO MPST LIST TABLE     */
*           3  ATCZR01  PTR(31),       /* PTR TO ISTZRM01            */
*           3  ATCAICTN PTR(31),       /* PTR TO ISTAICTN            */
*           3  ATCTPCP0 PTR(31),       /* PTR TO ISTZFSAV            */
*           3  ATCTPCP1 PTR(31),       /* PTR TO ISTZ19SV            */
*           3  ATCZFLAG BIT(8),        /* FLAG BYTE                  */
*              4 ATCZF001 BIT(1),      /* MDR RECORDING SUSPENDED    */
*              4 ATCRSV66 BIT(7),      /* RESERVED                   */
*           3  ATCRSV75 BIT(8),        /* RESERVED                   */
*           3  ATCSRBCT FIXED(16),     /* COUNT OF PREALLOCATED SRB'S*/
*           3  ATCCRACT FIXED(16),     /* COUNT OF PREALLOCATED CRA'S*/
*           3  ATCRPLCT FIXED(16),     /* COUNT OF PREALLOCATED CRPL */
*           3  ATCRSV88 PTR(31),       /* RESERVED                   */
*           3  ATCTPMPB CHAR(LENGTH(ISTDYPAB)) BDY(DWORD), /*TP MSG PAB
*                                                         FOR VS2    */
*           3  ATCTPMMI PTR(31),        /* PTR TO ISTCFMMI - MSG ISSUER
*                                          FOR SRB MODE ROUTINES     */
*           3  ATCVIOPM PTR(31),       /* PTR TO ISTVIOPM            */
*           3  ATCPOPAB CHAR(LENGTH(ISTDYPAB)) BDY(DWORD),      01S0580
*                   /* POPAB FOR REPLY PROCESSING, POI TERMINATION,  */
*                   /* AND VTAM MESSAGE PROCESSOR                    */
*        2  ATCAOS CHAR(0) BDY(WORD);  /* VS2 ONLY FIELDS            */
*/*   PROGRAM OPERATOR INTERFACE AREA                                */
*/*  REVISIONS                                          001 05/28/75 */
*DCL  1  ISTPOIA  BDY(WORD) BASED,                              01S0581
*        2 POICBID  CHAR(1),       /* POI IDENTIFIER                 */
*        2 POILNGTH FIXED(8),      /* LENGTH IN BYTES                */
*        2 POIRSVD  CHAR(2),       /* RESERVED                       */
*        2 POIANCR,                                             01S0581
*          3 *        CHAR(1),                                  01S0581
*          3 POIPOCBQ PTR(24),     /* ADDRESS OF POCB QUEUE          */
*        2 POIPRANC,                                            01S0581
*          3 *        CHAR(1),                                  01S0581
*          3 POIPRIMQ PTR(24);     /* ADDRESS OF PRIMARY POCB        */
*DCL POITYPE  BIT(8) CONSTANT('45'X);/* CONTROL BLOCK ID FOR ISTPOIA */
*/* LOGICAL CHANNEL COMMAND WORD                                      *
*/* ADD A DECLARE                                      003 10/18/74   *
*DCL  1  ISTLCCW BDY(WORD) BASED,                               01S0583
*        2  LCCWOP    CHAR(1),         /* OPERATION CODE -CONTROL     *
*           3  LCCWSI BIT(1),          /* SESS INIT / START DIALOG FLG*
*           3  LCCWSD BIT(1),          /* SESS DISCON/END DIALOG FLG  *
*           3  LCCWRWOP BIT(6),        /* READ/WRITE OPERATION CODE   *
*              4  * BIT(1),            /* RESERVED                    *
*              4  LCCWSOP BIT(1),      /* SPECIAL OPERATION LIKE
*                                         ERASE OR READ CONT          *
*              4  LCCWCTL BIT(4),      /* CONTROL TYPE                *
*                 5  LCCWMODE BIT(2),  /* MODE TYPE                   *
*                 5  LCCWTYPE BIT(2),  /* OPERATION TYPE              *
*        2  LCCWFLAG  CHAR(1),         /* FLAG BYTE                   *
*           3  LCCWCD BIT(1),          /* CHAIN DATA                  *
*           3  LCCWCC BIT(1),          /* CHAIN COMMAND               *
*           3  LCCWCKPT BIT(1),        /* SUPPRESS 3705 CHECK POINT
*                                         RECORD                      *
*           3  LCCWNTVC BIT(1),        /* DO NOT PERFORM VALCHEK      *
*           3  LCCWIDAT BIT(1),        /* LCCWDATA CONTAINS DATA      *
*           3  LCCWLSI BIT(1),         /* LCCW SYNCH INDICATOR        *
*              4  LCCWPER BIT(1),      /* POST=RESP                   *
*           3  LCCWRFI BIT(1),         /* REQUEST FEEDBACK INDICATOR  *
*           3  LCCWACI BIT(1),         /* ADDITION COMMAND INDICATOR  *
*        2  LCCWCNT FIXED(16),         /* DATA COUNT                  *
*        2  LCCWDATA PTR(31);          /* DATA ADDRESS OR IMMED. DATA *
*/* LOGICAL COMMAND CODES */                                    01S0584
*DCL  LXDQ     BIT(8) CONSTANT('3B'X), /* RESET DEVICE QUEUE          *
*     LXEC     BIT(8) CONSTANT('4B'X), /* RESET AT END OF COMMAND     *
*     LXO      BIT(8) CONSTANT('5B'X), /* RESET ORDERLY               *
*     LCCWPRGE BIT(8) CONSTANT('6B'X), /* PURGE                       *
*     LWH      BIT(8) CONSTANT('0F'X), /* WRITE HEADER INDI. 1ST BLOCK*
*     LWRVI    BIT(8) CONSTANT('1F'X), /* WRITE RVI                   *
*     LWNA     BIT(8) CONSTANT('2F'X), /* WRITE NEGATIVE ACK          *
*     LWAA     BIT(8) CONSTANT('3F'X), /* WRITE ALTERNATE ACK         *
*     LWPLG    BIT(8) CONSTANT('5F'X), /* WRITE ACK LEADING GRAPHICS  *
*     LWNLG    BIT(8) CONSTANT('6F'X), /* WRITE NACK LEADING GRAPHICS *
*     LSMDE    BIT(8) CONSTANT('4F'X), /* SET MODE                    *
*     LIFBM    BIT(8) CONSTANT('7F'X), /* INDIC 1ST BLOCK OF MESSAGE  *
*     LTEST    BIT(8) CONSTANT('FE'X), /* TEST LCCW                   *
*     LPRMPT   BIT(8) CONSTANT('13'X), /* PREEMPT LCCW                *
*     LRSTR    BIT(8) CONSTANT('43'X), /* RESTORE LCCW                *
*     LEXEC    BIT(8) CONSTANT('FF'X), /* SPECIAL CONTROL OPERATION   *
*     LREAD    BIT(2) CONSTANT('10'B),  /* READ TYPE LCCW             *
*     LWRITE   BIT(2) CONSTANT('01'B),  /* WRITE TYPE LCCW            *
*     LCNTRL   BIT(2) CONSTANT('11'B),  /* CONTROL TYPE LCCW          *
*     LRESET   BIT(4) CONSTANT('1011'B),/* RESET COMMANDS             *
*     LTIC     BIT(8) CONSTANT('08'X),  /* LOGICAL TIC                *
*     LWR      BIT(6) CONSTANT('000001'B),  /* WRITE CONVERSATIONAL   *
*     LWB      BIT(6) CONSTANT('000101'B),  /* WRITE BLOCK            *
*     LWM      BIT(6) CONSTANT('001001'B),  /* WRITE MESSAGE          *
*     LWT      BIT(6) CONSTANT('001101'B),  /* WRITE TRANSMISSION     *
*     LEWM     BIT(6) CONSTANT('011001'B),  /* ERASE/WRITE MESSAGE    *
*     LEWT     BIT(6) CONSTANT('011101'B),  /* ERASE/WRITE TRNSMSSN   *
*     LEAU     BIT(6) CONSTANT('010001'B),  /* ERASE ALL UNPROTECTED  *
*     LRB      BIT(6) CONSTANT('000110'B),  /* READ BLOCK             *
*     LRM      BIT(6) CONSTANT('001010'B),  /* READ MESSAGE           *
*     LRT      BIT(6) CONSTANT('001110'B),  /* READ TRANSMISSION      *
*     LRMOD    BIT(6) CONSTANT('010010'B),  /* READ MODIFIED          *
*     LRBUF    BIT(6) CONSTANT('010110'B),  /* READ BUFFER            *
*     LRCONT   BIT(6) CONSTANT('011010'B),  /* READ CONTINUOUS        *
*     LRPEP    BIT(6) CONSTANT('011110'B),  /* READ PERPETUAL         *
*     LCPYM    BIT(6) CONSTANT('101001'B),  /* COPY MESSAGE           *
*     LCPYT    BIT(6) CONSTANT('101101'B),  /* COPY TRANSMISSION      *
*     LD       BIT(8) CONSTANT('23'X),  /* DISCONNECT                 *
*     LDEC     BIT(8) CONSTANT('33'X),  /* DISCONNECT WITH END OF CALL*
*     LEOC     BIT(8) CONSTANT('53'X),  /* END OF CALL COMMAND        *
*     LXEL     BIT(8) CONSTANT('0B'X),  /* RESET ERROR LOCK           *
*     LXC      BIT(8) CONSTANT('1B'X),  /* RESET CONDITIONAL          *
*     LXI      BIT(8) CONSTANT('2B'X),  /* RESET IMMEDIATE            *
*     LC       BIT(8) CONSTANT('03'X),  /* CONTACT                    *
*     LWPA     BIT(8) CONSTANT('FD'X); /* WRITE POSITIVE ACK          *
*DCL  LMT      BIT(2) CONSTANT('11'B), /* TRANSMISSION MODE           *
*     LMS      BIT(2) CONSTANT('00'B), /* SPECIAL MODE LIKE CONV, EAU *
*     LMB      BIT(2) CONSTANT('01'B), /* BLOCK MODE                  *
*     LMM      BIT(2) CONSTANT('10'B); /* MSG OR CONTINUOUS MODE      *
*/* FOLLOWING EQUATES FOR  - PORT SOLICITOR (DIAL)                    *
*/* PORT SOLICITOR COMMAND CODES                                      *
*DCL PSOL    BIT(8) CONSTANT('FE'X), /* SPECIAL PORT SOLICITOR  01S0586
*                                       COMMAND                       *
*    STCTL    BIT(8) CONSTANT('01'X), /* START CONTROL                *
*    RESTCTL  BIT(8) CONSTANT('02'X), /* RESET & CONTROL - REDRIVE    *
*    STIPUT   BIT(8) CONSTANT('03'X); /* START INPUT                  *
*/*   FOLLOWING EQUATES FOR SDLC SUPPORT                              *
*DCL  LCCHOLD  BIT(8) CONSTANT('01'X),  /* HOLD                       *
*     LCCRHOLD BIT(8) CONSTANT('02'X),  /* RELEASE HOLD               *
*     LSEND    BIT(8) CONSTANT ('F1'X), /* SEND                       *
*     LCLEAR   BIT(8) CONSTANT ('F2'X), /* CLEAR                      *
*     LCRUD    BIT(8) CONSTANT ('F3'X), /* CLEAR, UNBIND              *
*     LCRUDNFY BIT(8) CONSTANT ('F4'X), /* CLEAR, UNBIND, NOTIFY      *
*     LNFY     BIT(8) CONSTANT ('F5'X), /* NOTIFY                     *
*     LRELCB   BIT(8) CONSTANT ('F6'X), /* RELEASE CB                 *
*     LRESTSR  BIT(8) CONSTANT ('F7'X), /* RESETSR                    *
*     LCLRNFY  BIT(8) CONSTANT('F8'X),  /* CLEAR/NOTIFY               *
*     LCHPUR   BIT(8) CONSTANT('F9'X);  /* PURGE                      *
*DCL  LCCWSIZE FIXED(8) CONSTANT(8);    /* LCCW SIZE                  *
*DCL  LRDS     BIT(8) CONSTANT('FF'X);  /* RECORD DEV STATS COMMAND   *
*DCL  LQUIS    BIT(8) CONSTANT('FE'X);  /* QUIESCE COMMAND            *
*/*              LOGICAL CHANNEL PROGRAM BLOCK                       */
*/*                                                                  */
*/*  REVISIONS                                         007 05/19/75  */
*/*                                                                  */
*DCL  1  ISTLCPB BDY(WORD) BASED(LCPBPTR),                      01S0591
*        2 LCPTYPE CHAR(1),            /* TYPE CODE                  */
*        2 LCPLNGTH  PTR(8),           /* LENGTH IN BYTES            */
*        2 LCPREQTG CHAR(2),           /* LCPB REQ. TAG FIELD        */
*          3 LCPFLAGS BIT(8),          /* FLAG BYTE                  */
*            4 LCPZRT00 BIT(1),        /* LOGICAL ERROR FLAG         */
*            4 LCPZRT01 BIT(1),        /* CONTROL BLOCK ERROR        */
*            4 LCPZF001 BIT(1),        /* LCP START PROCESS FLAG     */
*              5 LCPZRT02 BIT(1),      /* I/O INITIATION DISABLED    */
*                6 LCPZRTL2 BIT(1),    /* END OF SCHEDULABLE BLOCK   */
*            4 LCPZF002 BIT(1),        /* LCP IN PROCESSING FLAG     */
*              5 LCPZRT03 BIT(1),      /* GO LOOK AT FMCB LINE STATE */
*                                      /* FIELD (REQ. TAG OVERLAY)   */
*                6 LCPZRTL3 BIT(1),    /* WRITE/READ REQUEST         */
*            4 LCPZF003 BIT(1),        /* LCP PROCESSING COMPLETE FLAG*
*              5 LCPZRT04 BIT(1),      /* STPR SET IN BDU FLAG       */
*                                      /* (REQ. TAG OVERLAY)         */
*                6 LCPZRTL4 BIT(1),    /* FEEDBACK REQUESTED         */
*            4 LCPZF004 BIT(1),        /* SINGLE LCCW/LCP FLAG       */
*              5 LCPZRT05 BIT(1),      /* FEEDBACK TO BE ROUTED TO   */
*                                      /* ICNCB FMCB (REQ. TAG       */
*                                      /* OVERLAY)                   */
*                6 LCPZRTL5 BIT(1),    /* DECREMENT SCHED COUNT ON DEQ*
*            4 LCPZRT06 BIT(1),        /* CRITICAL TEXT BLOCK        */
*                                      /* FLAG (REQ. TAG OVERLAY)    */
*              5 LCPZRTL6 BIT(1),      /* WRITE REQUEST              */
*            4 LCPZRT07 BIT(1),        /* BUFFER TRACE ACTIVE        */
*                                      /* FLAG (REQ. TAG OVERLAY)    */
*              5 LCPZRTL7 BIT(1),      /* SCHEDULING FLAG            */
*          3 LCPMNRCD CHAR(1),         /* LCP MINOR REJECTION CODE   */
*            4 LCPZRT08 BIT(1),        /* I/O TRACE ACTIVE FLAG      */
*                                      /* (REQ. TAG OVERLAY)         */
*              5 LCPZRTL8 BIT(1),      /* DEVICE END NOTIFICATION    */
*            4 LCPZRT09 BIT(1),        /* DIALOGUE SCHED DISABLED    */
*              5 LCPZRTL9 BIT(1),      /* CRITICAL TEXT FLAG         */
*            4 LCPZRT0A BIT(1),        /* SIMULATED CONTACT FLAG     */
*            4 LCPZRT0B BIT(1),        /* SIMULATED DISCONNECT FLAG  */
*        2 LCPCHAIN PTR(31),           /* APS CHAIN                  */
*          3 LCPCHAI1 PTR(8),                                   01S0591
*            4 LCPCHNG BIT(1),         /* GATE BIT                   */
*          3 LCPCHAI2 PTR(24),         /* ADDRESS FIELD              */
*        2 LCPRUCNT PTR(8),            /* NUMBER OF RU FOR THIS LCPB */
*          3 LCPZMIRC CHAR(1),         /* MINOR RETURN CODE          */
*        2 LCPFLAG2 CHAR(1),           /* SECOND FLAG BYTE           */
*          3 LCPPRFLG BIT(1),          /* PACING REQUIRED            */
*          3 LCPASYN  BIT(1),          /* ASYNCHRONOUS LCPB          */
*          3 LCPRSTRT BIT(1),          /* RESTART LCPB               */
*          3 LCPTLBPI BIT(1),          /* TPIOS BLOCK LCCW           */
*            4 LCPZRIMM BIT(1),        /* RESET IMMED REQUIRED ON ERR*/
*          3 LCPFID0  BIT(1),          /* FID0 TH INDICATOR FOR RECORD*
*            4 LCPEXRES BIT(1),        /* EXCEP. RESPONSE SPEC. 3270R*/
*          3 LCPDSTAT BIT(1),          /* DIALOGUE STATE BIT, 3270R  */
*                                      /* 0=REQ. REJECT,1=STATE ERROR*/
*          3 LCPFREE  BIT(1),          /* DEALLOCATE LCPB 3270R      */
*          3 LCPATOP  BIT(1),          /* ATOP LCPB  3270R           */
*        2 LCPSEQ   FIXED(16),         /* OUTBOUND SEQUENCE NUMBER   */
*          3 LCPRRCCT PTR(8),          /* COUNT OF RESPONSES RECEIVED*/
*          3 LCPRRCNT PTR(8),          /* COUNT OF RESPONSES REQUESTED*
*        2 LCPLCCW1 PTR(31),           /* ADDR FIRST LCCW FOR FID1   */
*        2 LCPCID CHAR(4) BDY(WORD),   /* COMMUNICATION ID           */
*          3 LCPSAF BIT(16),           /* SOURCE IDENTIFICATION      */
*          3 LCPDAF BIT(16),           /* DESTINATION IDENTIFICATION */
*        2 LCPNXLCW PTR(31),           /* ADDR NEXT LCCW             */
*        2 LCPFDBA PTR(31),            /* BTU ADDRESS                */
*          3 LCPFDB1 PTR(8),                                    01S0591
*          3 LCPFDB2 PTR(24),          /* ADDRESS FIELD              */
*        2 LCPTLBAD PTR(31),           /* ADDRESS OF TLB             */
*        2 LCPFOSN  BIT(16),           /* SEQUENCE NUMBER FIRST RU   */
*        2 LCPFSNCH FIXED(16),         /* 1ST SEQ NUMBER IN RU CHAIN */
*        2 LCPSTYPE FIXED(8),          /* LCPB SUB-TYPE X'FF' = RESET,*
*                                      /* X'00' = NON-RESET          */
*        2 LCPFLG1 CHAR(1),            /* FLAGS                      */
*          3 LCPRESET BIT(1),          /* A TPQUE WITH RESET QUEUED  */
*                                      /* THIS ELEMENT               */
*          3 LCPINTER BIT(1),          /* INTERNAL LCPB              */
*          3 LCPDIRPT BIT(1),          /* NOT SEND W/POST=SCHED=0    */
*          3 LCPREDRV BIT(1),          /* LCPB IS FOR REDRIVE        */
*          3 LCPSTLB  BIT(1),          /* TLB NOT TO BE FREED        */
*          3 LCPTRANS BIT(1),          /* DATA INCLUDES CONTROL CHARS*/
*          3 LCPRSV78 BIT(2),          /* RESERVED                   */
*        2 LCPLCCWC BIT(8),            /* COUNT OF LCCWS             */
*        2 LCPRSV77 CHAR(1),           /* RESERVED                   */
*        2 LCPFLCCW PTR(31),           /* ADDR OF FIRST LCCW         */
*          3 LCPUBFSB PTR(31),         /* UNBIND FSB ADDRESS         */
*        2 LCPCLREP PTR(31),           /* PTR TO CLEAR LCPB IN UCB   */
*/*  NOTE:  THE FOLLOWING FIELD - LCPLCCW MUST BE THE LAST FIELD     */
*/*         IN THIS CONTROL BLOCK.  THE CONTROL BLOCK ISTDCLCP HAS   */
*/*         FIELDS IN IT WHICH MUST BE CONTIGUOUS WITH LCPLCCW       */
*        2 LCPLCCW  CHAR(LENGTH(ISTLCCW)) BDY(WORD), /* FIRST LCCW   */
*          3 LCPRSTQH PTR(31),         /* RESET LCPB QUEUE HEADER    */
*          3 LCPPABA  PTR(31),         /* PAB POINTER                */
*            4 LCPRPHA  PTR(31),       /* RPH POINTER                */
*              5 LCPFTYPE BIT(1);      /* FEEDBACK TYPE              */
*/*     CONSTANTS FOR LCPTYPE                                         *
*DCL  LCRPHFT  BIT(1) CONSTANT('1'B);                           01S0592
*DCL  LCPABFT  BIT(1) CONSTANT('0'B);                           01S0593
*DCL LCPBFIRM BIT(8) CONSTANT('10'X);  /* LU FAILED, CLSDST, SCHED LOST
*                                         TERM, OPNDST MAY BE TRIED   *
*DCL LCPBTERM BIT(8) CONSTANT('11'X);  /* TERM RECEIVED,CLSDST, 01S0595
*                                         SCHED LOST TERM             *
*/*                                                                   *
*                                                               01S0596
*DCL 1 LCPZTIE BDY(WORD) DEFINED(LCPCID), /* TOLTEP INTERFACE   01S0596
*                                         ELEMENT OVERLAY            */
*       2  LCPZFMCA PTR(31),           /* ACTIVE FMCB ADDRESS        */
*       2  LCPZSNA PTR(31),            /* SYMBOLIC NAME ADDRESS      */
*       2  LCPZSNAM CHAR(8) BDY(WORD), /* SYMBOLIC NAME              */
*          3  LCPZTRV1 PTR(31),        /* RESERVED FOR RESTORE LCP   */
*          3  LCPZTRV4 PTR(31);        /* RESERVED FOR RESTORE LCP   */
*DCL LCTYPE BIT(8) CONSTANT('04'X);                             01S0597
*DCL PLCPTYPE BIT(8) CONSTANT('28'X);  /* PURGE LCPB TYPE ID         */
*DCL LCPCLACB BIT(8) CONSTANT('04'X);  /* LCPB FROM CLOSE ACB        */
*DCL LSRSTYPE BIT(8) CONSTANT('FF'X);  /* RESET SUBTYPE              */
*DCL LCPETYPE BIT(8) CONSTANT('40'X);  /* EXTENDED LCPB TYPE ID      */
*/*                                                                  */
*/*  MINOR RETURN CODES                                              */
*/*                                                                  */
*DCL LCMCRSTR BIT(8) CONSTANT('F7'X),  /* MINOR RC FOR RESETSR       */
*    LCPMNEW  BIT(8) CONSTANT('02'X),  /* EARLY WARNING,             */
*                                      /* RECOVERY IN PROGRESS       */
*    LCPMNPF  BIT(8) CONSTANT('03'X),  /* PERM. I/O FAILURE          */
*    LCPMNAS  BIT(8) CONSTANT('04'X),  /* AUTO NETWORK SHUTDOWN      */
*    LCPMNCL  BIT(8) CONSTANT('06'X),  /* CLOSE/CLSDST OCCURED       */
*    LCPMNVD  BIT(8) CONSTANT('07'X),  /* VARY DEACTIVATE            */
*    LCPMNTF  BIT(8) CONSTANT('10'X),  /* TEMP RECORD DEVICE FAILURE */
*    LCPMNSF  BIT(8) CONSTANT('01'X),  /* TEMP BASIC FAILURE /       */
*    LCPMNTS  BIT(8) CONSTANT('11'X),  /* TERMINATE SELF             */
*    LCPMNAP  BIT(8) CONSTANT('0A'X),  /* APPL. ISSUED CLEAR         */
*    LCPMNPR  BIT(8) CONSTANT('0B'X),  /* PREEMPT                    */
*    LCPMNRE  BIT(8) CONSTANT('0C'X);  /* RESTORE                    */
*/* VS1, VS2 TPIOS SAVEAREA FORMAT */                           01S0603
*DCL  1  ISTZSAVE BDY(WORD) BASED,                              01S0603
*        2   ZSAZSVBC PTR(31),         /* SAVEAREA BACK CHAIN        */
*            3   ZSAZSVMS CHAR(1),     /* MODULE TRACE CODE          */
*                4 ZSAZACTV BIT(1),    /* ACTIVE SAVE AREA FLAG      */
*        2   ZSAZSVFC PTR(31),         /* SAVEAREA FORWARD CHAIN     */
*        2   ZSAZSVRR PTR(31),         /* RETURN REGISTER            */
*        2   ZSAZSVVR (6) PTR(31),    /* VARIABLE REGS (7-12) SVEAREA*/
*        2   ZSAZTRAC CHAR(4);        /* EBCDIC NAME OF OWNER        */
*/*                                                             01S0604
*THE FOLLOWING EQUATES SHOULD READ ''FIXED(8) CONSTANT(LENGTH(X))'',
*WHERE X IS THE NAME OF THE VARIABLE CONTROL BLOCK OR FIELD OF WHICH
*LENGTH IS THE VALUE BEING EQUATED, SHOULD THE PLS COMPILER BE  01S0604
*BE ABLE TO TAKE IT.                                            01S0604
*                                                                    */
*DCL ZSAZSVVA FIXED(8) CONSTANT(8);  /* DISPLACEMENT TO VARIABLE REGS*/
*DCL ZSAZSVSZ FIXED(8) CONSTANT(40); /* LENGTH OF ISTZSAVE           */
*/* PREFIX FOR CRR                                                   */
*/*                                                                  */
*/* RELEASE 1 - JUNE 28, 1973                                        */
*/*                                                                  */
*DCL 1 ISTPFCRR BASED BDY(WORD),        /* PREFIX FOR CRR            */
*     2  PFCCRR   CHAR(4),              /* CRR HEADER                */
*        3  PFCCRRID CHAR(1),           /* CRR ID FIELD              */
*           4  CRRID CHAR(1),           /* BASIC CTL LAYER DEFINITION*/
*        3  PFCRSV10 CHAR(1),           /* RESERVED FOR ALIGNMENT    */
*        3  PFCCRRLN CHAR(2),           /* CRR LENGTH                */
*           4  CRRLEN CHAR(2),          /* BASIC CTL LAYER DEF       */
*     2  PFCHDR CHAR(8) BDY(WORD),      /* SAVE AREA FOR OLD CRR FRR */
*        3  PFCCRRO  PTR(31),           /* PTR TO OLD CRR            */
*           4  CRRCHAIN PTR(31),        /* BASIC CTL LAYER DEFINITION
*                                          FOR OLD CRR PTR           */
*        3  PFCFRRO  PTR(31),           /* PTR TO OLD FRR            */
*           4  CRRFRR   PTR(31),        /* BASIC CTL LAYER      01S0606
*                                          DEFINITION OF OLD FRR PTR */
*     2  PFCFTA BIT(8),                 /* ID OF LAST FUNCTION TRACED*/
*     2  PFCRSV01 CHAR(3);              /* ALIGNMENT                 */
*DCL PFIDPIE BIT(8) CONSTANT('80'X);    /* DOS/VS TPIOS              */
*DCL PFIDORE BIT(8) CONSTANT('81'X);    /* DOS/VS BMS                */
*DCL PFIDAPE BIT(8) CONSTANT('82'X);    /* DOS/VS PSS                */
*DCL PFCIDPSV BIT(8) CONSTANT('38'X); /* COMPONENT ID           01S0610
*                                          PSS - VS1 AND 2           */
*DCL PFCIDTPV BIT(8) CONSTANT('3C'X); /* COMPONENT ID           01S0611
*                                          TPIOS VS1 AND 2           */
*DCL PFCIDSME BIT(8) CONSTANT('3D'X); /* COMPONENT ID           01S0612
*                                          STORAGE MANAGEMENT DOS    */
*DCL PFCIDOC BIT(8) CONSTANT('31'X);    /* COMPONENT ID OPEN/CLOSE   */
*DCL PFCIDPS BIT(8) CONSTANT('32'X);    /* PORT SOLICITOR            */
*DCL PFCIDCS BIT(8) CONSTANT('34'X);    /* CLUSTER SOLICITOR         */
*DCL PFCIDIT BIT(8) CONSTANT('35'X);    /* INIT/TERM                 */
*DCL PFCIDVY BIT(8) CONSTANT('36'X);    /* VARY                      */
*DCL PFCIDNS  BIT(8) CONSTANT('37'X);   /* NET. STAT.SRV.            */
*DCL PFCIDTPE BIT(8) CONSTANT('38'X);   /* COMPONENT ID         01S0619
*                                          TPIOS - DOS               */
*DCL PFCIDCL BIT(8) CONSTANT('39'X);    /* COMPONENT ID         01S0620
*                                          CONTROL LAYER             */
*DCL PFCIDPSE BIT(8) CONSTANT('3A'X);   /* COMPONENT ID         01S0621
*                                          PSS - DOS                 */
*DCL PFCIDSMV BIT(8) CONSTANT('3F'X);   /* COMPONENT ID         01S0622
*                                          STORAGE MANAGEMENT        */
*DCL PFCIDTIO BIT(8) CONSTANT('40'X);   /* COMPONENT ID TIIO    01S0623
*                                          PROCESSING (VS2)          */
*DCL PFCIDRS  BIT(8) CONSTANT('41'X);   /* ID FOR REMOTE SOLICITOR   */
*/* CRR FOR COMMAND FACILITIES                                      */
*/*  REVISIONS                                         001 06/02/75 */
*DCL  1  ISTCFCRR BDY(WORD) BASED, /* CRR FOR COMMAND FACILITIES    */
*        2 CFCAUDIT,               /* AUDIT TRAIL FOR CMD FACILITIES*/
*          3 CFCNTRD  CHAR(1),     /* LIST OF MODULES IN COMMAND    */
*                                  /* FACILITIES ENTERED            */
*            4 NCFCS1   BIT(1),    /* IND MODULE ISTCFCS1 ENTERED   */
*            4 NCFCS2   BIT(1),    /* IND MODULE ISTCFCS2 ENTERED   */
*            4 NCFCR1   BIT(1),    /* IND MODULE ISTCFCR1 ENTERED   */
*            4 NCFCRP   BIT(1),    /* IND MODULE ISTCFCRP ENTERED   */
*            4 NCFCR2   BIT(1),    /* IND MODULE ISTCFCR2 ENTERED   */
*            4 NCFRSVD  BIT(3),    /* RESERVED                      */
*          3 CFCCRT   CHAR(1),     /* LIST OF MODULES IN COMMAND    */
*                                  /* FACILITIES RUNNING            */
*            4 CCFCS1   BIT(1),    /* IND MODULE ISTCFCS1 RUNNING   */
*            4 CCFCS2   BIT(1),    /* IND MODULE ISTCFCS2 RUNNING   */
*            4 CCFCR1   BIT(1),    /* IND MODULE ISTCFCR1 RUNNING   */
*            4 CCFCRP   BIT(1),    /* IND MODULE ISTCFCRP RUNNING   */
*            4 CCFCR2   BIT(1),    /* IND MODULE ISTCFCR2 RUNNING   */
*            4 CCFRSVD1 BIT(3);    /* RESERVED                      */
*DCL TIDCFCS1 BIT(8) CONSTANT('00'X); /* THREAD ID FOR ISTCFCS1     */
*DCL TIDCFCR1 BIT(8) CONSTANT('01'X); /* THREAD ID FOR ISTCFCR1     */
*DCL TIDCFCR2 BIT(8) CONSTANT('02'X); /* THREAD ID FOR ISTCFCR2     */
*/* COMPONENT RECOVERY RECORD FOR TPIOS */                      01S0629
*/*  DELTA                                             006 02/10/75  */
*DCL                                                            01S0629
*1  ISTZCRR BDY(WORD) BASED,     /* CONTROL WORD                     */
*   2  ZCRCRR CHAR(4),           /* CONTROL WORD                     */
*      3  ZCRID CHAR(1),         /* CONTROL BLOCK ID                 */
*      3  ZCRLEN CHAR(2),        /* LENGTH OF ZCR                    */
*      3  ZCRFLAG CHAR(1),       /* FLAGS                            */
*   2  ZCRCHAIN PTR(31),         /* POINTER TO PREVIOUS ZCR          */
*   2  ZCRFRRA PTR(31),          /* PTR TO FRR                       */
*   2  ZCRFLGS1 CHAR(1),         /* FLGS USED BY REQUEST COMPLETION  */
*      3  ZCREXSW BIT(1),        /* EXIT SWITCH                      */
*      3  ZCRQUESW BIT(1),       /* QUEUE SWITCH                     */
*      3  ZCRDEQSW BIT(1),       /* DEQUEUE SWITCH                   */
*      3  ZCRWAIT BIT(1),        /* WAIT Q ANALYSIS COMPLETE         */
*      3  ZCRNRMEX BIT(1),       /* NORMAL EXIT TO BE TAKEN          */
*      3  ZCRENDLP BIT(1),       /* END OF LOOP SWITCH               */
*      3  ZCRUNSOL BIT(1),       /* UNSOLICITED DATA                 */
*      3  ZCRFEXIT BIT(1),       /* FORCE EXIT SWITCH                */
*   2  ZCRFLGS2 CHAR(1),         /* FLAGS USED WITHIN TPIOS          */
*      3  ZCRLOCAL BIT(1),       /* LOCAL SUPPORT                    */
*      3  ZCRSHEDI BIT(1),       /* IMMEDIATE SCHEDULE               */
*      3  ZCRFMSED BIT(1),       /* FMCB SEARCH ENDED                */
*      3  ZCROB    BIT(1),       /* OUTBOUND PROC IN PROGRESS        */
*      3  ZCRIF0E1 BIT(1),       /* SWITCH FOR STRUCTURED PGM USED BY
*                                   INBOUND PROCESSING               */
*      3  ZCRIF0E2 BIT(1),       /* SWITCH FOR STRUCTURED PGM USED BY
*                                   INBOUND PROCESSING               */
*      3  ZCRIF0E3 BIT(1),       /* SWITCH FOR STRUCTURED PGM USED BY
*                                   INBOUND PROCESSING               */
*   2  ZCRSWFLD CHAR(1),         /* SWITCHES FOR TPIOS OUTBOUND      */
*      3  ZCRENDSH BIT(1),       /* EXIT FROM REMOTE DEV SCHEDULER   */
*         4  ZCRSLCP BIT(1),     /* SCHEDULE LCPB                    */
*      3  ZCREXTYP BIT(1),       /* TPEXIT TYPE                      */
*      3  ZCRENDPR BIT(1),       /* EXIT FROM INNER PROCESS          */
*      3  ZCRNDLCP BIT(1),       /* EXIT FROM LCPB PROCESSING        */
*         4  ZCROB1 BIT(1),      /* REMOTE DEV SCHED 1ST TIME SWITCH */
*      3  ZCRENDX BIT(1),        /* EXIT FROM LCCW/BTU XLATION       */
*      3  ZCRENDXL BIT(1),       /* EXIT FROM LCCW PROC              */
*      3  ZCRENDAN BIT(1),       /* EXIT FROM LCPB ANALYSIS          */
*      3  ZCRRESET BIT(1),                                      01S0629
*         4  ZCRCNLXL BIT(1),    /* CANCEL FURTHER XLATE             */
*   2  ZCRFLGS3 CHAR(1),         /* FLAGS FOR OUTBOUND PROCESSING    */
*      3  ZCRTIC BIT(1),         /* SELECT NOT TO BE SENT            */
*      3  ZCRTPCON BIT(1),       /* TPIOS CONTACT SENT               */
*      3  ZCRTPDIS BIT(1),       /* TPIOS DISCONNECT TO BE SENT      */
*      3  ZCRDISC  BIT(1),       /* DISCONNECT IN PROCESS            */
*      3  ZCREDRIV BIT(1),       /* DO DERIVE                        */
*      3  ZCRNOFRE BIT(1),       /* NO FREEING OF SIO QUEUE          */
*      3  ZCRWRPTR BIT(1),       /* WRITE TO PRINTER REQUEST         */
*      3  ZCRINLCP BIT(1),       /* ERROR OCCURED DURING OUTBND PROC */
*   2  ZCRGENSW CHAR(1),         /* GENERAL SWITCHES                 */
*      3  ZCRTSW1  BIT(1),       /* TEMP SW FOR STRUCTURED PGM       */
*      3  ZCRTSW2  BIT(1),       /* TEMP SW FOR STRUCTURED PGM       */
*      3  ZCRRT06  BIT(1),       /* CRITICAL TEXT OPTION             */
*      3  ZCRLCSYN BIT(1),       /* LCCW SYNC SPECIFIED              */
*      3  ZCREXRES BIT(1),       /* EXCEPTION RESPONSE SPECIFIED     */
*      3  ZCRCLRBD BIT(1),       /* FLAG INDICATING BIND WAS CLEARED */
*      3  ZCRBRIS  BIT(1),       /* BRACKET REJECTED DUE TO IN BRAC. */
*      3  ZCRF1RES BIT(1),       /* FID1 RESPONSE TO BE GENERATED    */
*   2  ZCRPFLGS CHAR(1),         /* UTILITIES PROC OPTION FLAGS      */
*      3  ZCRQAHED BIT(1),      /* QXFR RTN TO USE INSERT OPT'N ON TPQ*
*      3  *        BIT(7),      /* RESERVED                          */
*   2  ZCRIBPR CHAR(1),          /* INBOUND PROCESSING FLAGS         */
*         3  ZCRNOBUF BIT(1),    /* FSB WITH NO BUFFER               */
*         3  ZCRERR   BIT(1),    /* ERROR INDICATOR                  */
*         3  ZCRRELK  BIT(1),    /* RESET ERROR LOCK FUNCTION REQ.   */
*         3  ZCRLCPFR BIT(1),    /* FLAG IND. DEALLOCATE ATOP LCPB   */
*         3  ZCRLCPFD BIT(1),    /* FLAG IND. LCPB FOUND ON WAITQ    */
*         3  ZCR3270  BIT(1),    /* 3270 DEVICE                      */
*         3  ZCR3270R BIT(1),    /* 3270 DEVICE IN RECORD MODE       */
*         3  *        BIT(1),    /* RESERVED                         */
*   2  ZCRSCPSW CHAR(1),         /* SESSION CONTROL FLAGS            */
*         3  ZCRTPEX BIT(1),     /* TP EXIT                          */
*         3  ZCRTPINV BIT(1),    /* INVOKE TPIOS                     */
*         3  ZCRRJLCP BIT(1),    /* LCPB REJECTED                    */
*         3  ZCRLREQ BIT(1),     /* REQUEST                          */
*         3  ZCRPRCMP BIT(1),    /* PROCESSING COMPLETE              */
*         3  ZCRFSBWE BIT(1),    /* FSB IS WORK ELEMENT              */
*         3  ZCRSKIPT BIT(1),    /* SKIP TRACE FLAG                  */
*         3  *       BIT(1),     /* RESERVED                         */
*   2  ZCRCRLCP PTR(31),         /* CURRENT LCPB PTR                 */
*   2  ZCRPARMS BDY(WORD),       /* PARAMETERS PASSED TO UTILITIES */
*      3  ZCRFBPTR PTR(31),      /* PTR TO FROM BUFFER               */
*         4  ZCRCBPTR PTR(31),   /* PTR TO CURRENT BUFFER            */
*      3  ZCRTBPTR PTR(31),      /* PTR TO TO-OR-TRANSLATE BUFFER    */
*      3  ZCRMLNG FIXED(15),     /* LENGTH TO MOVE                   */
*      3  ZCRDFRDA FIXED(15),    /* OFFSET FROM DATA ADDR IN FROM BUF*/
*         4  ZCRDTODA FIXED(15), /* OFFSET FROM DATA ADDR XLATE BUF  */
*      3  ZCRPCOD1 CHAR(1),      /* CODE BYTE FOR ALLOC/DISALLOC     */
*         4  ZCRPPG BIT(1),      /* GET PAGEABLE BUFF                */
*         4  ZCRPLNG BIT(1),     /* LENGTH OF BUFFER SPECIFIED       */
*         4  ZCRPFSB BIT(1),     /* GET FSB                          */
*         4  ZCRPLSBF BIT(1),    /* GET LSCB AND BUFFER              */
*            5 ZCRPLSBQ BIT(1),  /* PURGE LSCB QUEUE                 */
*         4  ZCRPLSCB BIT(1),    /* GET OR RELEASE LSCB              */
*         4  ZCRPBUF BIT(1),     /* GET OR RELEASE BUFFER            */
*         4  ZCRPCFTX BIT(1),    /* CONFIDENTIAL TEXT                */
*         4  ZCRPRES BIT(1),     /* RESERVED                         */
*      3  ZCRPCOD2 CHAR(1),      /* CODE BYTE FOR MOVE               */
*         4  ZCRPPG2 BIT(1),     /* GET PAGEABLE BUFFER              */
*         4  ZCRPFHDR BIT(1),    /* FROM BUFFER FDB TO BE USED       */
*         4  ZCRPMFGF BIT(1),    /* MOVE STARTS WIHT 1ST BUFF IN BLOCK*
*         4  ZCRPRES2 BIT(5),    /* RESERVED                         */
*      3  ZCRPCHAR CHAR(1),      /* TRANSLATE & TEST SEARCH CHARACTER*/
*      3  ZCRPSW   CHAR(1),      /* SWITCH FIELD                     */
*   2  ZCRCCWA PTR(31),          /* PTR TO CURRENT CCW (CCW 1 OR 2)  */
*   2  ZCRBFPTR PTR(31),         /* SAVE 1ST BUFF PTR IN TO-BUFF CHN
*                                   OR LAST BUFFER IN CHANNEL PGM    */
*   2  ZCRZLB PTR(31),           /* PTR TO CURR BUFF IN CHANNEL PGM  */
*   2  ZCRPVZB PTR(31),          /* PTR TO PREVIOUS BUFF IN CHAN PGM */
*   2  ZCRSVRTN BDY(WORD),       /* REG 14 SAVE AREAS                */
*      3  ZCRSVF1 PTR(31),       /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF2 PTR(31),       /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF3 PTR(31),       /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF4 PTR(31),       /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF5 PTR(31),       /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF6 PTR(31),       /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF7 PTR(31),       /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF8 PTR(31),       /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF9 PTR(31),       /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF10 PTR(31),      /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF11 PTR(31),      /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF12 PTR(31),      /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF13 PTR(31),      /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF14 PTR(31),      /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF15 PTR(31),      /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF16 PTR(31),      /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF17 PTR(31),      /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF18 PTR(31),      /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF19 PTR(31),      /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF20 PTR(31),      /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF21 PTR(31),      /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF22 PTR(31),      /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF23 PTR(31),      /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF24 PTR(31),      /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF25 PTR(31),      /* SAVE REQUIRED REGISTER           */
*   2  ZCRWKARA BDY(WORD),       /* TEMPORARY REG SAVE AREA          */
*      3  ZCRSVWK1 PTR(31),      /* SAVE REQUIRED REG                */
*      3  ZCRSVWK2 PTR(31),      /* SAVE REQUIRED REG                */
*      3  ZCRSVWK3 PTR(31),      /* SAVE REQUIRED REG                */
*      3  ZCRSVWK4 PTR(31),      /* SAVE REQUIRED REG                */
*      3  ZCRSVWK5 PTR(31),      /* SAVE REQUIRED REG                */
*   2  ZCRFSBSV PTR(31),         /* FSB CHAIN PTR SAVEAREA           */
*   2  ZCRFBPRC BIT(1),          /* FSB PROCESS SW                   */
*   2  ZCRMOREL BIT(1),          /* MORE ELEMENTS SW                 */
*   2  ZCRSCANQ BIT(1),          /* SCAN QUEUE SW                    */
*   2  ZCRNXTEL BIT(1),          /* NEXT ELEMENT SW                  */
*   2  ZCRXSCHD BIT(1),          /* EXIT SCHEDULE SW                 */
*   2  ZCRLSTFB BIT(1),          /* INBOUND PROC LAST FSB FOR ELEM SW*/
*   2  ZCRTOPQ  BIT(1),          /* QUEUE ELEMENT TO TOP SW          */
*   2  ZCRAWQSW BIT(1),          /* CHECK AWAITQ FOR MORE WORK =1    */
*                                /* CHECK WAITQ =0                   */
*   2  ZCRRCDSV CHAR(1),         /* RETURN CODE SAVEAREA             */
*   2  ZCRPRMTC CHAR(1),         /* PREEMPT COMPLETION PARAMETER BYTE*/
*   2  ZCROPCDE CHAR(1),         /* OP CODE TO BE TRANSFORMED         *
*   2  ZCRR2SV PTR(31),          /* ISTZBFDI REG 2 SAVE EREA         */
*   2  ZCRR13SV PTR(31),         /* ISTSBFDI REG 13 SAVE EREA        */
*   2  ZCRCIDSV BDY(WORD),       /* ISTZBFDI CID SAVE AREA           */
*      3  ZCRSAFSV CHAR(2),      /* ISTZBFDI SAF SAVE AREA           */
*      3  ZCRDAFSV CHAR(2),      /* ISTZBFDI DAF SAVE AREA           */
*   2  ZCRSAVEZ (6) BDY(WORD) CHAR(LENGTH(ISTZSAVE)),           01S0629
*                                /* SAVE/TRACE AREAS FOR TPIOS MODS  */
*   2  ZCRREMIC PTR(31),        /* POINTER TO REMOTE RN ICNCB        */
*   2  ZCRAUDIT CHAR(36),        /* TPIOS AUDIT TRAIL AREA           */
*      3  ZCRTID CHAR(1),        /* THREAD I.D.                      */
*      3  ZCRTNAME CHAR(4),      /* LAST 4 CHARS OF THREAD NAME      */
*      3  ZCRENTER BIT(248),     /* BIT ARRAY FOR MODULES ENTERED    */
*         4  ZCREAC1A BIT(1),    /* ISTZAC1A ENTERED                 */
*         4  ZCREAC0A BIT(1),    /* ISTZAC0A ENTERED                 */
*         4  ZCREAC0B BIT(1),    /* ISTZAC0B ENTERED                 */
*         4  ZCREAC1B BIT(1),    /* ISTZAC1B ENTERED                 */
*         4  ZCREBCAA BIT(1),    /* ISTZBCAA ENTERED                 */
*         4  ZCREBCAB BIT(1),    /* ISTZBCAB ENTERED                 */
*         4  ZCREBCAE BIT(1),    /* ISTZBCAE ENTERED                 */
*         4  ZCREBCAG BIT(1),    /* ISTZBCAG ENTERED                 */
*         4  ZCREBCAI BIT(1),    /* ISTZBCAI ENTERED                 */
*         4  ZCREBCAM BIT(1),    /* ISTZBCAM ENTERED                 */
*         4  ZCREBCBA BIT(1),    /* ISTZBCBA ENTERED                 */
*         4  ZCREBCBB BIT(1),    /* ISTZBCBB ENTERED                 */
*         4  ZCREBCBI BIT(1),    /* ISTZBCBI ENTERED                 */
*         4  ZCREBCCB BIT(1),    /* ISTZBCCB ENTERED                 */
*         4  ZCREBCDI BIT(1),    /* ISTZBCDI ENTERED                 */
*         4  ZCREBCEB BIT(1),    /* ISTZBCEB ENTERED                 */
*         4  ZCREBCFA BIT(1),    /* ISTZBCFA ENTERED                 */
*         4  ZCREBCFB BIT(1),    /* ISTZBCFB ENTERED                 */
*         4  ZCREBCGA BIT(1),    /* ISTZBCGA ENTERED                 */
*         4  ZCREBCGB BIT(1),    /* ISTZBCGB ENTERED                 */
*         4  ZCREBCHA BIT(1),    /* ISTZBCHA ENTERED                 */
*         4  ZCREBCHB BIT(1),    /* ISTZBCHB ENTERED                 */
*         4  ZCREBCIA BIT(1),    /* ISTZBCIA ENTERED                 */
*         4  ZCREBCIB BIT(1),    /* ISTZBCIB ENTERED                 */
*         4  ZCREBCID BIT(1),    /* ISTZBCID ENTERED                 */
*         4  ZCREBCJA BIT(1),    /* ISTZBCJA ENTERED                 */
*         4  ZCREBCJB BIT(1),    /* ISTZBCJB ENTERED                 */
*         4  ZCREBCKA BIT(1),    /* ISTZBCKA ENTERED                 */
*         4  ZCREBCKB BIT(1),    /* ISTZBCKB ENTERED                 */
*         4  ZCREBCLA BIT(1),    /* ISTZBCLA ENTERED                 */
*         4  ZCREBCLB BIT(1),    /* ISTZBCLB ENTERED                 */
*         4  ZCREBCMB BIT(1),    /* ISTZBCMB ENTERED                 */
*         4  ZCREBCND BIT(1),    /* ISTZBCND ENTERED                 */
*         4  ZCREBCNE BIT(1),    /* ISTZBCNE ENTERED                 */
*         4  ZCREBCOB BIT(1),    /* ISTZBCOB ENTERED                 */
*         4  ZCREBCPB BIT(1),    /* ISTZBCPB ENTERED                 */
*         4  ZCREBCQB BIT(1),    /* ISTZBCQB ENTERED                 */
*         4  ZCREBCRA BIT(1),    /* ISTZBCRA ENTERED                 */
*         4  ZCREBCRB BIT(1),    /* ISTZBCRB ENTERED                 */
*         4  ZCREBCSC BIT(1),    /* ISTZBCSC ENTERED                 */
*         4  ZCREBCXA BIT(1),    /* ISTZBCXA ENTERED                 */
*         4  ZCREBCX0 BIT(1),    /* ISTZBCX0 ENTERED                 */
*         4  ZCREBCY0 BIT(1),    /* ISTZBCY0 ENTERED                 */
*         4  ZCREBCZ0 BIT(1),    /* ISTZBCZ0 ENTERED                 */
*         4  ZCREBC0A BIT(1),    /* ISTZBC0A ENTERED                 */
*         4  ZCREBC0B BIT(1),    /* ISTZBC0B ENTERED                 */
*         4  ZCRECC0A BIT(1),    /* ISTZCC0A ENTERED                 */
*         4  ZCRECC0B BIT(1),    /* ISTZCC0B ENTERED                 */
*         4  ZCRECC1A BIT(1),    /* ISTZCC1A ENTERED                 */
*         4  ZCRECC1B BIT(1),    /* ISTZCC1B ENTERED                 */
*         4  ZCRECC2B BIT(1),    /* ISTZCC2B ENTERED                 */
*         4  ZCREDCA0 BIT(1),    /* ISTZDCA0 ENTERED                 */
*         4  ZCREDCB0 BIT(1),    /* ISTZDCB0 ENTERED                 */
*         4  ZCREDCC0 BIT(1),    /* ISTZDCC0 ENTERED                 */
*         4  ZCREDCD0 BIT(1),    /* ISTZDCD0 ENTERED                 */
*         4  ZCREDCE0 BIT(1),    /* ISTZDCE0 ENTERED                 */
*         4  ZCREDCF0 BIT(1),    /* ISTZDCF0 ENTERED                 */
*         4  ZCREDCH0 BIT(1),    /* ISTZDCH0 ENTERED                 */
*         4  ZCREDCI0 BIT(1),    /* ISTZDCI0 ENTERED                 */
*         4  ZCREDCJ0 BIT(1),    /* ISTZDCJ0 ENTERED                 */
*         4  ZCREDCKA BIT(1),    /* ISTZDCKA ENTERED                 */
*         4  ZCREDCKB BIT(1),    /* ISTZDCKB ENTERED                 */
*         4  ZCREDCL0 BIT(1),    /* ISTZDCL0 ENTERED                 */
*         4  ZCREDCMB BIT(1),    /* ISTZDCMB ENTERED                 */
*         4  ZCREECBA BIT(1),    /* ISTZECBA ENTERED                 */
*         4  ZCREECBB BIT(1),    /* ISTZECBB ENTERED                 */
*         4  ZCREECCA BIT(1),    /* ISTZECCA ENTERED                 */
*         4  ZCREECCB BIT(1),    /* ISTZECCB ENTERED                 */
*         4  ZCREECDA BIT(1),    /* ISTZECDA ENTERED                 */
*         4  ZCREECEA BIT(1),    /* ISTZECEA ENTERED                 */
*         4  ZCREECTA BIT(1),    /* ISTZECTA ENTERED                 */
*         4  ZCREFCEA BIT(1),    /* ISTZFCEA ENTERED                 */
*         4  ZCREFCEB BIT(1),    /* ISTZFCEB ENTERED                 */
*         4  ZCREGCAB BIT(1),    /* ISTZGCAB ENTERED                 */
*         4  ZCREGCBB BIT(1),    /* ISTZGCBB ENTERED                 */
*         4  *        BIT(1),    /* NOT USED                         */
*         4  ZCREGCDB BIT(1),    /* ISTZGCDB ENTERED                 */
*         4  ZCREGCEB BIT(1),    /* ISTZGCEB ENTERED                 */
*         4  ZCREGCLA BIT(1),    /* ISTZGCLA ENTERED                 */
*         4  ZCREGC0A BIT(1),    /* ISTZGC0A ENTERED                 */
*         4  ZCREGC0B BIT(1),    /* ISTZGC0B ENTERED                 */
*         4  ZCREHCAN BIT(1),    /* ISTZHCAN ENTERED                 */
*         4  ZCREICAA BIT(1),    /* ISTZICAA ENTERED                 */
*         4  ZCREICAB BIT(1),    /* ISTZICAB ENTERED                 */
*         4  ZCREICBB BIT(1),    /* ISTZICBB ENTERED                 */
*         4  ZCREICBI BIT(1),    /* ISTZICBI ENTERED                 */
*         4  ZCREICCB BIT(1),    /* ISTZICCB ENTERED                 */
*         4  ZCREICCI BIT(1),    /* ISTZICCI ENTERED                 */
*         4  ZCREICDB BIT(1),    /* ISTZICDB ENTERED                 */
*         4  ZCREICEB BIT(1),    /* ISTZICEB ENTERED                 */
*         4  ZCREICGB BIT(1),    /* ISTZICGB ENTERED                 */
*         4  ZCREICHB BIT(1),    /* ISTZICHB ENTERED                 */
*         4  ZCREICIB BIT(1),    /* ISTZICIB ENTERED                 */
*         4  ZCREICID BIT(1),    /* ISTZICID ENTERED                 */
*         4  ZCREICJB BIT(1),    /* ISTZICJB ENTERED                 */
*         4  ZCREICKB BIT(1),    /* ISTZICKB ENTERED                 */
*         4  ZCREICKE BIT(1),    /* ISTZICKE ENTERED                 */
*         4  ZCREICKG BIT(1),    /* ISTZICKG ENTERED                 */
*         4  ZCREICLB BIT(1),    /* ISTZICLB ENTERED                 */
*         4  ZCREICMB BIT(1),    /* ISTZICMB ENTERED                 */
*         4  ZCREICNA BIT(1),    /* ISTZICNA ENTERED                 */
*         4  ZCREICNB BIT(1),    /* ISTZICNB ENTERED                 */
*         4  ZCREICOA BIT(1),    /* ISTZICOA ENTERED                 */
*         4  ZCREICOB BIT(1),    /* ISTZICOB ENTERED                 */
*         4  ZCREICQA BIT(1),    /* ISTZICQA ENTERED                 */
*         4  ZCREICQB BIT(1),    /* ISTZICQB ENTERED                 */
*         4  ZCREICRB BIT(1),    /* ISTZICRB ENTERED                 */
*         4  ZCREICSB BIT(1),    /* ISTZICSB ENTERED                 */
*         4  ZCREICSC BIT(1),    /* ISTZICSC ENTERED                 */
*         4  ZCREICTB BIT(1),    /* ISTZICTB ENTERED                 */
*         4  ZCREICUB BIT(1),    /* ISTZICUB ENTERED                 */
*         4  ZCREICVB BIT(1),    /* ISTZICVB ENTERED                 */
*         4  ZCREICWB BIT(1),    /* ISTZICWB ENTERED                 */
*         4  ZCREICX0 BIT(1),    /* ISTZICX0 ENTERED                 */
*         4  ZCREIC0B BIT(1),    /* ISTZIC0B ENTERED                 */
*         4  ZCREIC1B BIT(1),    /* ISTZIC1B ENTERED                 */
*         4  ZCREJCAB BIT(1),    /* ISTZJCAB ENTERED                 */
*         4  ZCREJCBB BIT(1),    /* ISTZJCBB ENTERED                 */
*         4  ZCREJCCB BIT(1),    /* ISTZJCCB ENTERED                 */
*         4  ZCREJCDB BIT(1),    /* ISTZJCDB ENTERED                 */
*         4  ZCREJC0B BIT(1),    /* ISTZJC0B ENTERED                 */
*         4  ZCREKCBB BIT(1),    /* ISTZKCBB ENTERED                 */
*         4  ZCREKCBN BIT(1),    /* ISTZKCBN ENTERED                 */
*         4  ZCREKCCN BIT(1),    /* ISTZKCCN ENTERED                 */
*         4  ZCREDCWR BIT(1),    /* ISTZDCWR ENTERED                 */
*         4  ZCREDCWB BIT(1),    /* ISTZDCWB ENTERED                 */
*         4  ZCREDCXR BIT(1),    /* ISTZDCXR ENTERED                 */
*         4  ZCREBCBR BIT(1),    /* ISTZBCBR ENTERED                 */
*         4  ZCREBCDR BIT(1),    /* ISTZBCDR ENTERED                 */
*         4  ZCREBCAR BIT(1),    /* ISTZBCAR ENTERED                 */
*         4  ZCRECCBI BIT(1),    /* ISTZCCBI ENTERED                 */
*         4  ZCRECCAI BIT(1),    /* ISTZCCAI ENTERED                 */
*         4  ZCRECCCI BIT(1),    /* ISTZCCCI ENTERED                 */
*         4  ZCREAC1R BIT(1),    /* ISTZAC1R ENTERED                 */
*         4  ZCREBCSB BIT(1),    /* ISTZBCSB ENTERED                 */
*         4  ZCREDCPR BIT(1),    /* ISTZDCPR ENTERED                 */
*         4  ZCREDCQR BIT(1),    /* ISTZDCQR ENTERED                 */
*         4  ZCREBCAL BIT(1),    /* ISTZBCAL ENTERED                 */
*         4  ZCREBC0L BIT(1),    /* ISTZBC0L ENTERED                 */
*         4  ZCREBCNB BIT(1),    /* ISTZBCNB ENTERED                 */
*         4  ZCREICOE BIT(1),    /* ISTZICOE ENTERED                 */
*         4  ZCREDCNB BIT(1),    /* ISTZDCNB ENTERED                 */
*         4  ZCREKCCB BIT(1),    /* ISTZKCCB ENTERED                 */
*         4  ZCRECFY0 BIT(1),    /* ISTZCFY0 ENTERED                 */
*         4  ZCREDCK0 BIT(1),    /* ISTZDFK0 ENTERED                 */
*         4  ZCREICSG BIT(1),    /* ISTZICSG ENTERED                 */
*         4  ZCREBCIF BIT(1),    /* ISTZBCIF ENTERED                 */
*         4  ZCREDCMF BIT(1),    /* ISTZDCMF ENTERED                 */
*         4  ZCRELCAB BIT(1),    /* ISTZLCAB ENTERED                 */
*         4  ZCREAC2B BIT(1),    /* ISTZAC2B ENTERED                 */
*         4  ZCREIC2B BIT(1),    /* ISTZIC2B ENTERED                 */
*         4  ZCRRSV97 BIT(97),   /* RESERVED                         */
*   2  ZCRCMNRC CHAR(1),                /* PURGE MWOR RETURN CODE    */
*   2  ZCRWORDA CHAR(3),                /* RESERVED FOR LATER USE    */
*   2  ZCRLCPB  CHAR(LENGTH(ISTLCPB)),  /* 3270 S/R LCPB             */
*      3 ZCRRHRU,                       /* SAVEAREA FOR RH AND RU    */
*        4 ZCRRH    CHAR(3),            /* RH                        */
*        4 ZCRRU    CHAR(*);            /* RU                        */
*DCL ZCTYPE BIT(8) CONSTANT('00'X);   /* ZCR TYPE                   */
*DCL ZCLNG FIXED(15) CONSTANT(172);   /* ZCRR LENGTH                */
*DCL ZCRSAVNO BIT(8) CONSTANT('06'X); /* NUMBER OF SAVEAREAS IN ZCRR */
*DCL ZCRLSVNO BIT(8) CONSTANT('04'X); /* NUMBER OF SAVE AREAS IN
*                                         LOCAL SUPPORT              */
*/* *** EQUATES FOR ZCRRCDSV *** */                             01S0634
*                                                               01S0634
*DCL ZCRMRFSB BIT(8) CONSTANT('0C'X);  /* REQUEST COMPLETION MOVE FSB
*                                         TO PROCESS                 */
*DCL ZCRSRCHQ BIT(8) CONSTANT('10'X);  /* REQUEST COMPLETION SEARCH
*                                         REQUEST QUEUE              */
*DCL ZCREXIT  BIT(8) CONSTANT('14'X);  /* REQUEST COMPLETION EXIT    */
*DCL ZCRSFSB  BIT(8) CONSTANT('18'X);  /* REQUEST COMPLETION SINGLE
*                                         FSB                        */
*DCL ZCRDLFSB BIT(8) CONSTANT('1C'X);  /* REQUEST COMPLETION DUAL FSB *
*DCL ZCRNOSCH BIT (8) CONSTANT('20'X); /* REQUEST COMPLETION, EXIT WITH
*                                         SCHED NONE                 */
*DCL ZCRNRSCH BIT (8) CONSTANT('24'X); /* REQUEST COMPLETION, EXIT WITH
*                                         SCHED NORM                 */
*DCL ZCRLGERR FIXED(8) CONSTANT(8);    /* LOGICAL ERROR              */
*DCL ZCPLSCB BIT(8) CONSTANT('08'X);   /* GET A RELEASE LSCB         */
*DCL ZCPBUF  BIT(8) CONSTANT('04'X);   /* GET A RELEASE BUFFER       */
*DCL ZCRTAC0A FIXED(8) CONSTANT(01);   /* LOCAL DEVICE SCHEDULER(OUT)*/
*DCL ZCRTAC0B FIXED(8) CONSTANT(02);   /* REMOTE DEVICE SCHEDLER(OUT)*/
*DCL ZCRTCC1A FIXED(8) CONSTANT(03);   /* LOCAL DIALOG SCHEDLER(IN)  */
*DCL ZCRTCC1B FIXED(8) CONSTANT(04);   /* REMOTE DIALOG SCHEDLER(IN) */
*DCL ZCRTDCE0 FIXED(8) CONSTANT(05);   /* NCP SLOWDOWN RECOVERY      */
*DCL ZCRTDCKA FIXED(8) CONSTANT(06);   /* LOCAL GENERAL FUNCTIONS    */
*DCL ZCRTDCKB FIXED(8) CONSTANT(07);   /* REMOTE GENERAL FUNCTIONS   */
*DCL ZCRTFCEB FIXED(8) CONSTANT(08);   /* REMOTE READ BUFFER ALLOC.  */
*DCL ZCRTGCLA FIXED(8) CONSTANT(09);   /* LCAL CTL & TEST FEEDBACK(IN)*
*DCL ZCRTGC0A FIXED(8) CONSTANT(10);   /* LOCAL REQ. COMPLETION(IN)  */
*DCL ZCRTGC0B FIXED(8) CONSTANT(11);   /* REMOTE REQ. COMPLETION(IN) */
*DCL ZCRTICWB FIXED(8) CONSTANT(12);   /* RESET CLEANUP (PHASE 5)    */
*DCL ZCRTIC0B FIXED(8) CONSTANT(13);   /* REMOTE REQ COMPLTION CTL(IN)*
*DCL ZCRTAC1B FIXED(8) CONSTANT(14);   /* ISTZAC1B THREAD ID         */
*DCL ZCRTIC1B FIXED(8) CONSTANT(15);   /* ISTZIC1B THREAD ID         */
*DCL ZCRTCCBI FIXED(8) CONSTANT(16);   /* ISTZCCBI THREAD ID         */
*DCL ZCRTAC1R FIXED(8) CONSTANT(17);   /* ISTZAC1R THREAD ID         */
*DCL ZCRTAC1A FIXED(8) CONSTANT(18);   /* ISTZAC1A THREAD ID         */
*DCL ZCRTLCAB FIXED(8) CONSTANT(19);   /* ISTZLCAB THREAD ID         */
*/* COMPONENT RECOVERY                                               */
*/*                                                                  */
*DCL 1 ISTASCRR BDY(WORD) BASED,        /* CRR FOR SMS               */
*     2  ASCPFCRR CHAR(LENGTH(ISTPFCRR)),                       01S0663
*     2  ASCFLAGS CHAR(7),              /* FLAGS                     */
*        3  ASCFLG1 CHAR(2),            /* MODULE TRACE FLAGS        */
*           4  ASCFBA BIT(1),           /* ALLOCATION IN PATH        */
*           4  ASCFBD BIT(1),           /* DE-ALLOCATION IN PATH     */
*           4  ASCFSR BIT(1),           /* FSR IN PATH               */
*           4  ASCPASTR BIT(13),        /* RESERVED PATH FLAGS       */
*        3  ASCFLG2 CHAR(2),            /* MODULE IN CONTROL FLAGS   */
*           4  ASCFBAIC BIT(1),         /* ALLOCATION IN CONTROL     */
*           4  ASCFBDIC BIT(1),         /* DE-ALLOCATION IN CONTROL  */
*           4  ASCFSRIC BIT(1),         /* FSR IN CONTROL            */
*           4  ASCICR BIT(13),          /* RESERVED IN CONTROL FLAGS */
*        3  ASCFLG3 CHAR(3),            /* AUDIT FLAGS               */
*           4  ASCFSRGT BIT(1),         /* FSR DOING GET PROCESSING  */
*           4  ASCFBDAL BIT(1),         /* FBD DOING ALLOCATION      */
*           4  ASCKEYF BIT(1),          /* KEY HAS BEEN ALTERED      */
*           4  ASCLLKF BIT(1),          /* LOCAL LOCK HELD           */
*           4  ASCFBDUD BIT(1),         /* FBD USING USER DATA       */
*           4  ASCAUDIT BIT(19),        /* RESERVED AUDIT BITS       */
*     2  ASCKEY CHAR(1),                /* ORIGINAL KEY              */
*     2  ASCETRYA PTR(31),              /* RETRY ADRS FOR CONTINUE
*                                          OPTION                    */
*     2  ASCUSRGS CHAR(16),             /* SAVE AREA FOR USER REGS
*                                          14 - 1                    */
*        3  ASCUSR14 CHAR(4),           /* REGISTER 14               */
*        3  ASCUSR15 CHAR(4),           /* REGISTER 15               */
*        3  ASCUSR00 CHAR(4),           /* REGISTER 0                */
*        3  ASCUSR01 CHAR(4),           /* REGISTER 1                */
*     2  ASCPSREG CHAR(16);             /* SAVE AREA FOR PSS    01S0663
*                                          REGS 1 - 4                */
*/*  INITIAL LEVEL                                      001 04/09/75 */
*DCL 1 ISTAPCRR BDY(WORD) BASED,                                01S0664
*     2 APCHDRSV CHAR(LENGTH(ISTPFCRR)),  /* HEADER                  */
*     2  APCATFLG CHAR(2),              /* AUDIT TRACE FLAGS         */
*        3  APC51E BIT(1),              /* ISTAPC51 WAS ENTERED      */
*        3  APC52E BIT(1),              /* ISTAPC52  '     '         */
*        3  APC53E BIT(1),              /* ISTAPC53                  */
*        3  APC54E BIT(1),                                      01S0664
*        3  APC56E BIT(1),                                      01S0664
*        3  APC57E BIT(1),                                      01S0664
*        3  APC58E BIT(1),                                      01S0664
*        3  APC31E BIT(1),                                      01S0664
*        3 * BIT(8),                    /* RESERVED                  */
*     2  APCRFLG CHAR(2),               /* AUDIT TRACE FLAGS         */
*        3  APC51R BIT(1),              /* ISTAPCR1 IS RUNNING       */
*        3  APC52R BIT(1),              /* ISTAPC52 IS RUNNING       */
*        3  APC53R BIT(1),                                      01S0664
*        3  APC54R BIT(1),                                      01S0664
*        3  APC56R BIT(1),                                      01S0664
*        3  APC57R BIT(1),                                      01S0664
*        3  APC58R BIT(1),                                      01S0664
*        3  APC31R BIT(1),                                      01S0664
*        3  *      BIT(8),              /* RESERVED                  */
*     2  APCPSTA PTR(31),               /* PST@                      */
*     2  APCTCBA PTR(31),               /* TCB@                      */
*     2  APCRTRN PTR(31),               /*@ TO BR14 TO RTN TO SYSTEM */
*     2  APCPABSV PTR(31),              /*SAVED PAB@ TO REDISPATCH   */
*     2  APCQWFO PTR(31),               /* Q@ IN PST WORK AREA ON    */
*     2  APCFRRPM PTR(31),              /* WORKAREA@ RTN'D FROM SETFR*/
*     2  APCSAVE CHAR(72),                                      01S0664
*        3  APCESTAL CHAR(72),          /* ESTAE PARAMETER LIST AREA */
*     2  APCCOMF CHAR(4) BDY(HWORD),    /* FLAGS USED BY ALL PSS RTN */
*        3  APCCOMF1 CHAR(2),                                   01S0664
*           4  APCSSTSK BIT(1),         /* IRB TYPE WORK             */
*           4  APCUETSK BIT(1),         /* USER EXIT RUNNING UNDER IRB*
*           4  APCSMCR BIT(1),          /* SMA CRA BEING USED        */
*           4  APCIRB1 BIT(1),          /* IRB1 BEING USED           */
*           4  APCIRB2 BIT(1),          /* IRB2 BEING USED           */
*           4  APCRELR BIT(1),          /*CALL ISTAPC58 TO RLEASE CRA*/
*           4  APCEXIT BIT(1),          /* TELLS ISTAPC58 TO EXIT SYS*/
*           4  APCZLBER BIT(1),         /* ERR WHILE RUNNING ZLFAB PAB*
*           4  * BIT(8),                /* RESERVED                  */
*        3  APCRETCD FIXED(15),         /* RTN CODE FOR R15 FOR SYS  */
*     2  APCSAV1 PTR(31),               /* 1ST SAVE WORD             */
*     2  APCSAV2 PTR(31),               /* 2ND SAVE WORD             */
*     2  APCSWTWD CHAR(4),              /* SWITCH AREA FOR PSS RTN   */
*     2  APC31FLG CHAR(1),              /* ISTAPC31 FLAGS            */
*        3  APCTPXIT BIT(1),            /* TPEXIT IN PROGRESS        */
*        3  APCRESCH BIT(1),            /*PAB TPEXIT OCCURED  RESCHED*/
*        3  APCSORT BIT(1),       /* PAB SORTED TO PROPER PST/MPST   */
*        3  *       BIT(5),       /* RESERVED                        */
*     2  APC52FLG CHAR(1),        /* ISTAPC52 FLAGS                  */
*        3  APCCKRQ BIT(1),       /* CHECK RDY Q FOR WORK            */
*        3  APCSMSR BIT(1),       /* RETURNING SMS RPH               */
*        3  APCQENQ BIT(1),       /* ENQUEUEING PAB'S ON PST Q'S     */
*        3  APCRDQ BIT(1),        /* DEQUEING PAB'S FROM PST RDY Q   */
*        3  APCNWF BIT(1),        /* NO WORK FOUND                   */
*        3  APCWKF   BIT(1),      /* WORK FOUND                      */
*        3    *      BIT(2),      /* RESERVED                        */
*     2  APC53FLG CHAR(1),        /* ISTAPC53 FLAGS                  */
*        3  APCPR153 BIT(1),      /* USED PREALLOCATED CRA           */
*     2  APC54FLG CHAR(1),        /* ISTAPC54 FLAGS                  */
*        3  APCRLST BIT(1),       /* SMS BEING CALLED TO RELEASE UECB*/
*        3  * BIT(7),             /* RESERVED                        */
*     2  APC57FLG CHAR(1),        /* ISTAPC57 FLAGS                  */
*        3  APCRECRA BIT(1),      /* RELEASE CRA BEING DONE          */
*        3  APCNREL BIT(1),       /* DID NOT RELEASE CRA             */
*        3  *   BIT(6),           /* RESERVED                        */
*     2  * CHAR(15);              /* RESERVED                        */
*/*               COMPONENT RECOVERY AREA                            */
*/*  REVISIONS                                         005 04/09/75  */
*DCL 1  ISTCRA BASED BDY(DWORD),        /* COMPONENT RECOVERY AREA   */
*     2  CRABASIC BDY(WORD),            /* CRA WITHOUT PROCESS CRR   */
*      3 CRAHDR CHAR(8) BDY(WORD),      /* CRA HEADER                */
*        4  CRACRR PTR(31),             /* PTR TO ACTIVE CRR         */
*        4  CRAFRR PTR(31),             /* PTR TO ACTIVE FRR         */
*      3 CRALKACT BIT(32),              /* LOCK LEVEL AND       01S0665
*                                          OWNERSHIP FLAGS           */
*        4  CRALEV32 BIT(1),            /* 1 = LEVEL 32 LOCK HELD    */
*        4  CRALEV31 BIT(1),            /* 1 = LEVEL 31 LOCK HELD    */
*        4  CRALEV30 BIT(1),            /* 1 = LEVEL 30 LOCK HELD    */
*        4  CRALEV29 BIT(1),            /* 1 = LEVEL 29 LOCK HELD    */
*        4  CRALEV28 BIT(1),            /* 1 = LEVEL 28 LOCK HELD    */
*        4  CRALEV27 BIT(1),            /* 1 = LEVEL 27 LOCK HELD    */
*        4  CRALEV26 BIT(1),            /* 1 = LEVEL 26 LOCK HELD    */
*        4  CRALEV25 BIT(1),            /* 1 = LEVEL 25 LOCK HELD    */
*        4  CRALEV24 BIT(1),            /* 1 = LEVEL 24 LOCK HELD    */
*        4  CRALEV23 BIT(1),            /* 1 = LEVEL 23 LOCK HELD    */
*        4  CRALEV22 BIT(1),            /* 1 = LEVEL 22 LOCK HELD    */
*        4  CRALEV21 BIT(1),            /* 1 = LEVEL 21 LOCK HELD    */
*        4  CRALEV20 BIT(1),            /* 1 = LEVEL 20 LOCK HELD    */
*        4  CRALEV19 BIT(1),            /* 1 = LEVEL 19 LOCK HELD    */
*        4  CRALEV18 BIT(1),            /* 1 = LEVEL 18 LOCK HELD    */
*        4  CRALEV17 BIT(1),            /* 1 = LEVEL 17 LOCK HELD    */
*        4  CRALEV16 BIT(1),            /* 1 = LEVEL 16 LOCK HELD    */
*        4  CRALEV15 BIT(1),            /* 1 = LEVEL 15 LOCK HELD    */
*        4  CRALEV14 BIT(1),            /* 1 = LEVEL 14 LOCK HELD    */
*        4  CRALEV13 BIT(1),            /* 1 = LEVEL 13 LOCK HELD    */
*        4  CRALEV12 BIT(1),            /* 1 = LEVEL 12 LOCK HELD    */
*        4  CRALEV11 BIT(1),            /* 1 = LEVEL 11 LOCK HELD    */
*        4  CRALEV10 BIT(1),            /* 1 = LEVEL 10 LOCK HELD    */
*        4  CRALEV09 BIT(1),            /* 1 = LEVEL 9 LOCK HELD     */
*        4  CRALEV08 BIT(1),            /* 1 = LEVEL 8 LOCK HELD     */
*        4  CRALEV07 BIT(1),            /* 1 = LEVEL 7 LOCK HELD     */
*        4  CRALEV06 BIT(1),            /* 1 = LEVEL 6 LOCK HELD     */
*        4  CRALEV05 BIT(1),            /* 1 = LEVEL 5 LOCK HELD     */
*        4  CRALEV04 BIT(1),            /* 1 = LEVEL 4 LOCK HELD     */
*        4  CRALEV03 BIT(1),            /* 1 = LEVEL 3 LOCK HELD     */
*        4  CRALEV02 BIT(1),            /* 1 = LEVEL 2 LOCK HELD     */
*        4  CRALEV01 BIT(1),            /* 1 = LEVEL 1 LOCK HELD     */
*      3 CRAL1PTR PTR(31),              /* PTR TO LEVEL 1 LOCK       */
*      3 CRAL2PTR PTR(31),              /* PTR TO LEVEL 2 LOCK       */
*      3 CRAL3PTR PTR(31),              /* PTR TO LEVEL 3 LOCK       */
*      3 CRAL4PTR PTR(31),              /* PTR TO LEVEL 4 LOCK       */
*      3 CRAL5PTR PTR(31),              /* PTR TO LEVEL 5 LOCK       */
*      3 CRAL6PTR PTR(31),              /* PTR TO LEVEL 6 LOCK       */
*      3 CRAL7PTR PTR(31),              /* PTR TO LEVEL 7 LOCK       */
*      3 CRAL8PTR PTR(31),              /* PTR TO LEVEL 8 LOCK       */
*      3 CRAL9PTR PTR(31),              /* PTR TO LEVEL 9 LOCK       */
*      3 CRALAPTR PTR(31),              /* RESERVED                  */
*/*                                                                  */
*/*   VS1/VS2 EXTENSION                                              */
*/*                                                                  */
*     2  CRARPH CHAR(LENGTH(ISTRPH)),   /* RPH ASSOCIATED WITH  01S0665
*                                          THIS CRH                  */
*     2  CRAPSS CHAR(LENGTH(ISTAPCRR)), /* PSS CRR                   */
*     2  CRAPROCR CHAR(LENGTH(ISTZCRR)) BDY(DWORD), /* PROCESS CRR   */
*     2  CRASVC CHAR(72) BDY(WORD),     /* SERVICE RTN CRA           */
*        3  CRAASCRR CHAR(LENGTH(ISTASCRR)), /* CRR FOR SMS          */
*        3  CRAHSIZ  PTR(31),           /* HEADER SIZE QUED SMS REQ  */
*        3  CRAMASK  PTR(31),           /* PREFIX MASK QUED SMS REQ  */
*        3  CRABUFA  FIXED(31),         /* BUFF QUE FOR FBQ ALLOCATION*
*           4 CRABFTBA BIT(1),          /* NO BUFFERS ALLOCATED YET   *
*     2  CRARSV01 PTR(31),              /* RESERVED                  */
*     2  CRARSV02 PTR(31),              /* RESERVED                  */
*     2  CRACHAIN PTR(31);              /* CHAIN FIELD USED TO QUEUE
*                                          CRA TO PREALLOCATE QUEUE
*                                          WHEN NOT IN USE           */
*DCL CRALMS32 BIT(32) CONSTANT('80000000'X); /* 32ND LEVEL LOCK MASK */
*DCL CRALMS31 BIT(32) CONSTANT('40000000'X); /* 31ST LEVEL LOCK MASK */
*DCL CRALMS30 BIT(32) CONSTANT('20000000'X); /* 30TH LEVEL LOCK MASK */
*DCL CRALMS29 BIT(32) CONSTANT('10000000'X); /* 29TH LEVEL LOCK MASK */
*DCL CRALMS28 BIT(32) CONSTANT('08000000'X); /* 28TH LEVEL LOCK MASK */
*DCL CRALMS27 BIT(32) CONSTANT('04000000'X); /* 27TH LEVEL LOCK MASK */
*DCL CRALMS26 BIT(32) CONSTANT('02000000'X); /* 26TH LEVEL LOCK MASK */
*DCL CRALMS25 BIT(32) CONSTANT('01000000'X); /* 25TH LEVEL LOCK MASK */
*DCL CRALMS24 BIT(32) CONSTANT('00800000'X); /* 24TH LEVEL LOCK MASK */
*DCL CRALMS23 BIT(32) CONSTANT('00400000'X); /* 23RD LEVEL LOCK MASK */
*DCL CRALMS22 BIT(32) CONSTANT('00200000'X); /* 22ND LEVEL LOCK MASK */
*DCL CRALMS21 BIT(32) CONSTANT('00100000'X); /* 21ST LEVEL LOCK MASK */
*DCL CRALMS20 BIT(32) CONSTANT('00080000'X); /* 20TH LEVEL LOCK MASK */
*DCL CRALMS19 BIT(32) CONSTANT('00040000'X); /* 19TH LEVEL LOCK MASK */
*DCL CRALMS18 BIT(32) CONSTANT('00020000'X); /* 18TH LEVEL LOCK MASK */
*DCL CRALMS17 BIT(32) CONSTANT('00010000'X); /* 17TH LEVEL LOCK MASK */
*DCL CRALMS16 BIT(32) CONSTANT('00008000'X); /* 16TH LEVEL LOCK MASK */
*DCL CRALMS15 BIT(32) CONSTANT('00004000'X); /* 15TH LEVEL LOCK MASK */
*DCL CRALMS14 BIT(32) CONSTANT('00002000'X); /* 14TH LEVEL LOCK MASK */
*DCL CRALMS13 BIT(32) CONSTANT('00001000'X); /* 13TH LEVEL LOCK MASK */
*DCL CRALMS12 BIT(32) CONSTANT('00000800'X); /* 12TH LEVEL LOCK MASK */
*DCL CRALMS11 BIT(32) CONSTANT('00000400'X); /* 11TH LEVEL LOCK MASK */
*DCL CRALMS10 BIT(32) CONSTANT('00000200'X); /* 10TH LEVEL LOCK MASK */
*DCL CRALMS09 BIT(32) CONSTANT('00000100'X); /* 9TH LEVEL LOCK MASK  */
*DCL CRALMS08 BIT(32) CONSTANT('00000080'X); /* 8TH LEVEL LOCK MASK  */
*DCL CRALMS07 BIT(32) CONSTANT('00000040'X); /* 7TH LEVEL LOCK MASK  */
*DCL CRALMS06 BIT(32) CONSTANT('00000020'X); /* 6TH LEVEL LOCK MASK  */
*DCL CRALMS05 BIT(32) CONSTANT('00000010'X); /* 5TH LEVEL LOCK MASK  */
*DCL CRALMS04 BIT(32) CONSTANT('00000008'X); /* 4TH LEVEL LOCK MASK  */
*DCL CRALMS03 BIT(32) CONSTANT('00000004'X); /* 3RD LEVEL LOCK MASK  */
*DCL CRALMS02 BIT(32) CONSTANT('00000002'X); /* 2ND LEVEL LOCK MASK  */
*DCL CRALMS01 BIT(32) CONSTANT('00000001'X); /* 1ST LEVEL LOCK MASK  */
*DCL CRACRA   CHAR(4) CONSTANT('CRA ');      /* CHARACTER C.B. ID    */
*/*   PROGRAM OPERATOR MESSAGE HEADER                                */
*DCL  1  ISTPOHD  BDY(WORD) BASED,                              01S0699
*        2 POHRSVD1 CHAR(1),       /* RESERVED                       */
*        2 POHSTAT,                /* HEADER STATUS BITS             */
*          3 POHEND   BIT(1),      /* END LINE 1=YES                 */
*          3 POHDATA  BIT(1),      /* DATA LINE 1=YES                */
*          3 POHLBL   BIT(1),      /* LABEL LINE 1=YES               */
*          3 POHCNTRL BIT(1),      /* CONTROL LINE 1=YES             */
*          3 POHRSVD2 BIT(2),      /* RESERVED                       */
*          3 POHRREQ  BIT(1),      /* REPLY REQUESTED 1=YES          */
*          3 POHGEN   BIT(1),      /* ID ORIGIN  0=GENERATED BY VTAM */
*                                  /*            1=GENERATED BY POA  */
*        2 POHID    FIXED(16);     /* MESSAGE IDENTIFIER             */
*/*   PROGRAM OPERATOR MESSAGE CONTROL BLOCK                         */
*/*  REVISIONS                                          002 08/03/77 */
*/*    APAR OZ25021                                         @ZA25021 */
*DCL  1  ISTPOMCB BDY(WORD) BASED,                              01S0700
*        2 POMCBID  CHAR(1),       /* POMCB IDENTIFIER               */
*        2 POMLNGTH FIXED(8),      /* LENGTH IN BYTES                */
*        2 POMMSGLN FIXED(8),      /* MESSAGE LENGTH                 */
*        2 POMRSVD1 CHAR(1),       /* RESERVED                       */
*        2 POMRSVD2 PTR(31),       /* RESERVED FOR FUTURE PSS USE    */
*        2 POMNEXT,                                             01S0700
*          3 *        CHAR(1),                                  01S0700
*          3 POMFWD   PTR(24),     /* ADDRESS OF NEXT POMCB          */
*        2 POMREPQ,                                             01S0700
*          3 *        CHAR(1),                                  01S0700
*          3 POMPORCB PTR(24),     /* ADDRESS OF PORCB               */
*        2 POMMHDR  CHAR(LENGTH(ISTPOHD)),  /* MESSAGE HEADER        */
*        2 POMMSG   CHAR(120) BDY(WORD);    /* MESSAGE       @ZA25021*/
*DCL POMTYPE  BIT(8) CONSTANT('47'X);/* CONTROL BLOCK ID FOR ISTPOMEB*/
*/*   PROGRAM OPERATOR REPLY CONTROL BLOCK                           */
*/*  REVISIONS                                          001 05/28/75 */
*DCL  1  ISTPORCB BDY(WORD) BASED,                              01S0702
*        2 PORCBID  CHAR(1),       /* PORCB INDICATOR                */
*        2 PORLNGTH FIXED(8),      /* LENGTH IN BYTES                */
*        2 POREPID  CHAR(2),       /* REPLY ID                       */
*        2 PORPSSQ  PTR(31),       /* ADDRESS OF NEXT PORCB          */
*                                  /* FOR PSS USE                    */
*        2 PORNEXT,                                             01S0702
*          3 *        CHAR(1),                                  01S0702
*          3 PORFWD   PTR(24),     /* ADDRESS OF NEXT PORCB          */
*        2 PORPOMQ,                                             01S0702
*          3 *        CHAR(1),                                  01S0702
*          3 PORPOMCB PTR(24),     /* ADDRESS OF POMCB               */
*        2 PORAREA  PTR(31),       /* ADDRESS OF REPLY AREA          */
*        2 PORECB   PTR(31),       /* ADDRESS OF ECB                 */
*        2 PORREPLN FIXED(8),      /* REPLY LENGTH                   */
*        2 PORRSVD,                /* STATUS, RESERVED BITS          */
*          3 PORRTPQ  BIT(1),      /* PORCB HAS BEEN TPQUEUED, 1=YES */
*          3 *        BIT(7),      /* RESERVED                       */
*        2 *        CHAR(2),       /* RESERVED                       */
*        2 PORMSG   CHAR(126);     /* AREA TO STORE THE REPLY MESSAGE*/
*DCL PORTYPE  BIT(8) CONSTANT('48'X);/* CONTROL BLOCK ID FOR ISTPORCB*/
*/* ***** WTO PARAMETER FORMAT **** */                          01S0704
*                                                               01S0704
*DCL  1  ISTWPL BDY(WORD) BASED,                                01S0704
*        2  WPLLGH FIXED(15),           /* LENGTH OF MSG TEXT PLUS 4 */
*        2  WPLMCSF BIT(16),            /* MCS FLAGS                 */
*           3  WPLMCSF1 BIT(8),         /* FIRST FLAG BYTE           */
*              4  WPLMCSFA BIT(1),      /* ROUTING CODES EXIST       */
*              4  WPLMCSFB BIT(1),      /* QUEUE TO R0               */
*              4  WPLMCSFC BIT(1),      /* COMMAND RESP.             */
*              4  WPLMCSFD BIT(1),      /* MSG TYPE FIELD EXISTS     */
*              4  WPLMCSFE BIT(1),      /* REPLY TO WTOR             */
*              4  WPLMCSFF BIT(1),      /* BROADCAST                 */
*              4  WPLMCSFG BIT(1),      /* HARD COPY                 */
*              4  WPLMCSFH BIT(1),      /* QUEUE TO R0 ALWAYS        */
*           3  WPLMCSF2 BIT(8),         /* SECOND FLAG BYTE          */
*              4  WPLMCSFI BIT(1),      /* TIME STAMP                */
*              4  WPLMCSFJ BIT(1),      /* MLWTO                     */
*              4  WPLSTGFL BIT(1),      /* 1=GETVIS ISSUED           */
*              4  WPLRSV01 BIT(2),      /* RESERVED                  */
*              4  WPLMCSFN BIT(1),      /* BYPASS HARD COPY          */
*              4  WPLRSV02 BIT(2),      /* RESERVED                  */
*        2  WPLTXT CHAR(255);           /* MESSAGE TEXT              */
*/* ***** WTOR PREFIX TO ISTWPL ****** */                       01S0705
*/* APPLIED DCR'S */                                            01S0705
*/* 1K1326 - MAR 15, 73 - DM */                                 01S0705
*DCL  1  ISTRWPL BDY(WORD) BASED,                               01S0705
*        2  RWPPRTR FIXED(32),                                  01S0705
*           3  RWPLRLN FIXED(8),       /* INPUT TEXT LENGTH         */
*           3  RWPRPTRA PTR(24),       /* INPUT BUFFER POINTER      */
*        2  RWPRECB PTR(31),           /* ECB POINTER               */
*           3  RWPSSECB FIXED(32),     /* USED TO TEST COMPLMTD ECB */
*        2  RWPWPL CHAR(LENGTH(ISTWPL)); /* CONTINUE WITH WTO FORMAT*/
*/* PROGRAM OPERATOR CONTROL BLOCK                                   */
*/*  REVISIONS                                          001 05/28/75 */
*DCL  1  ISTPOCB  BDY(WORD) BASED,                              01S0706
*        2 POCCBID  CHAR(1),       /* POCB IDENTIFIER                */
*        2 POCLNGTH FIXED(8),      /* LENGTH IN BYTES                */
*        2 POCVTMID FIXED(15),     /* VTAM ID COUNTER                */
*        2 POCPSSQ  PTR(31),       /* ADDRESS OF NEXT POCB           */
*                                  /* FOR PSS USE                    */
*        2 POCNEXT,                                             01S0706
*          3 *        CHAR(1),                                  01S0706
*          3 POCFWD   PTR(24),     /* ADDRESS OF NEXT POCB           */
*        2 POCDEB   PTR(31),       /* ADDRESS OF DEB PREFIX          */
*        2 POCRCVQ,                                             01S0706
*          3 *        CHAR(1),                                  01S0706
*          3 POCMSGQ  PTR(24),     /* ADDRESS OF MESSAGE QUEUE       */
*        2 POCREPQ,                                             01S0706
*          3 *        CHAR(1),                                  01S0706
*          3 POCAWTRQ PTR(24),     /* ADDRESS OF AWAITING REPLY QUE  */
*        2 POCRPL   PTR(31),       /* ADDRESS OF RCVCMD RPL          */
*        2 POCRPGEN BIT(104),      /* BIT STRING TO GENERATE AND KEEP*/
*                                  /* TRACK OF REPLY ID'S            */
*        2 POCRCNTR FIXED(8),      /* REPLY ID COUNTER               */
*        2 POCSTAT,                /* POCB STATUS                    */
*          3 POCACT   BIT(1),      /* POI ACTIVE 1 = YES             */
*          3 POCINACT BIT(1),      /* POI INACTIVE 1 = YES           */
*          3 POCQUI   BIT(1),      /* POI QUISCE 1 = YES             */
*          3 *        BIT(5),      /* RESERVED                       */
*        2 POCRSVD  CHAR(1),       /* RESERVED                       */
*        2 POCWTOPL CHAR(LENGTH(ISTRWPL)) BDY(WORD);            01S0706
*                                  /* ISTWPL AND ISTRWPL PARM LISTS  */
*DCL POCTYPE  BIT(8) CONSTANT('46'X); /* CONTROL BLOCK ID FOR ISTPOCB*/
*   DECLARE                                                     01S0708
*     EMCR0 PTR REG(0),                                         01S0708
*     EMCR1 PTR REG(1),                                         01S0708
*     EMCR2 PTR REG(2),                                         01S0708
*     EMCR3 PTR REG(3),                                         01S0708
*     EMCR4 PTR REG(4),                                         01S0708
*     EMCR5 PTR REG(5),                                         01S0708
*     EMCR6 PTR REG(6),                                         01S0708
*     EMCR7 PTR REG(7),                                         01S0708
*     EMCR8 PTR REG(8),                                         01S0708
*     EMCR9 PTR REG(9),                                         01S0708
*     EMCR10 PTR REG(10),                                       01S0708
*     EMCR11 PTR REG(11),                                       01S0708
*     EMCR12 PTR REG(12),                                       01S0708
*     EMCR13 PTR REG(13),                                       01S0708
*     EMCR14 PTR REG(14),                                       01S0708
*     EMCR15 PTR REG(15);                                       01S0708
*   DCL                                                         01S0709
*     ISTAPC34 ENTRY BASED(ATCAP34) VALRG(*);/* RESET ROUTINE        */
*   DCL                                                         01S0710
*     ISTAPC37 ENTRY BASED(ATCAP37) VALRG(*);/* TPQUE ROUTINE        */
*   GEN(PRINT ON);                                              01S0711
*                                                               01S0711
         PRINT ON
*/* END OF TPEPILOG                                                  */
*                                                               01S0712
*   END ISTCFCRP                                                01S0712
*                                                               01S0712
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (CVT     )                                       */
*/*%INCLUDE SYSLIB  (IFGRPL  )                                       */
*/*%INCLUDE SYSLIB  (IFGRPLVT)                                       */
*/*%INCLUDE SYSLIB  (ISTRPLFB)                                       */
*                                                               01S0712
*       ;                                                       01S0712
@EL00001 DS    0H                                               01S0712
@EF00001 DS    0H                                               01S0712
@ER00001 LM    @14,@12,12(@13)                                  01S0712
         BR    @14                                              01S0712
@DATA    DS    0H
@CH00093 DC    H'1'
@CH00105 DC    H'2'
@CH00085 DC    H'4'
@SM03334 MVC   PORMSG+1(0,CRPPTR),PORMSG(CRPPTR)
@SM03338 MVC   PORMSG(0,CRPPTR),POPMSG+335(@11)
@DATD    DSECT
         DS    0F
ISTCFCRP CSECT
         DS    0F
@CF00091 DC    F'8'
@DATD    DSECT
         DS    0D
CVTPTR   DS    A
LCPBPTR  DS    A
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
ISTCFCRP CSECT
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
         DS    0D
@CC01185 DC    C'193I'
@CC01205 DC    C'195I'
@CC01206 DC    C'194I'
CRPWRO2  DC    F'128'
         DC    F'64'
         DC    F'32'
         DC    F'16'
         DC    F'8'
         DC    F'4'
         DC    F'2'
         DC    F'1'
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
GPR00P   EQU   @00
GPR01P   EQU   @01
GPR02P   EQU   @02
GPR03P   EQU   @03
GPR04P   EQU   @04
GPR05P   EQU   @05
GPR06P   EQU   @06
GPR07P   EQU   @07
GPR08P   EQU   @08
GPR09P   EQU   @09
GPR10P   EQU   @10
GPR11P   EQU   @11
GPR12P   EQU   @12
GPR13P   EQU   @13
GPR14P   EQU   @14
GPR15P   EQU   @15
CRPRPHPT EQU   @01
CRPOCWPT EQU   @04
CRPPOCB  EQU   @06
BASEREG  EQU   @12
CRPSVPT  EQU   @13
CRPRTPT  EQU   @14
CRPPTR   EQU   @10
CRPBASE  EQU   @03
CRPPTRA  EQU   @15
CRPMSGID EQU   @02
CRPSTRNG EQU   @08
CRPVARDT EQU   @03
CRPADBUF EQU   @07
CRPREG15 EQU   @15
REG1048  EQU   @01
EMCR13   EQU   @13
REG15048 EQU   @15
RPHPTR   EQU   @01
EMCR0    EQU   @00
EMCR1    EQU   @01
EMCR10   EQU   @10
EMCR11   EQU   @11
EMCR12   EQU   @12
EMCR14   EQU   @14
EMCR15   EQU   @15
EMCR2    EQU   @02
EMCR3    EQU   @03
EMCR4    EQU   @04
EMCR5    EQU   @05
EMCR6    EQU   @06
EMCR7    EQU   @07
EMCR8    EQU   @08
EMCR9    EQU   @09
GPR00F   EQU   @00
GPR01F   EQU   @01
GPR02F   EQU   @02
GPR03F   EQU   @03
GPR04F   EQU   @04
GPR05F   EQU   @05
GPR06F   EQU   @06
GPR07F   EQU   @07
GPR08F   EQU   @08
GPR09F   EQU   @09
GPR10F   EQU   @10
GPR11F   EQU   @11
GPR12F   EQU   @12
GPR13F   EQU   @13
GPR14F   EQU   @14
GPR15F   EQU   @15
ATCLCPTR EQU   1032
CVTMAP   EQU   0
CVTDAR   EQU   CVTMAP+72
CVTFLGS1 EQU   CVTDAR
CVTDCB   EQU   CVTMAP+116
CVTIERLC EQU   CVTMAP+144
CVTOPTA  EQU   CVTMAP+182
CVTOPTB  EQU   CVTMAP+183
CVTGTF   EQU   CVTMAP+236
CVTGTFST EQU   CVTGTF
CVTGTFS  EQU   CVTGTFST
CVTSTATE EQU   CVTGTFST
CVTTMODE EQU   CVTGTFST
CVTFORM  EQU   CVTGTFST
CVTAQAVT EQU   CVTMAP+240
CVTTCMFG EQU   CVTAQAVT
CVTVOLM2 EQU   CVTMAP+244
CVTTATA  EQU   CVTVOLM2
CVTTSKS  EQU   CVTTATA
CVTVOLF2 EQU   CVTTSKS
CVTTAT   EQU   CVTTATA+1
CVTATER  EQU   CVTMAP+248
CVTEXT1  EQU   CVTMAP+252
CVTPURG  EQU   CVTMAP+260
CVTQMSG  EQU   CVTMAP+268
CVTDMSR  EQU   CVTMAP+272
CVTRSV37 EQU   CVTDMSR
CVTDMSRF EQU   CVTRSV37
CVTERPV  EQU   CVTMAP+316
CVTINTLA EQU   CVTMAP+320
CVTAPF   EQU   CVTMAP+324
CVTEXT2  EQU   CVTMAP+328
CVTHJES  EQU   CVTMAP+332
CVTPGSIA EQU   CVTMAP+348
CVTA1F1  EQU   CVTMAP+356
CVTSYSK  EQU   CVTMAP+357
CVTVOLM1 EQU   CVTMAP+380
CVTVOLF1 EQU   CVTVOLM1
CVTATMCT EQU   CVTMAP+388
CVTXTNT1 EQU   0
CVTXTNT2 EQU   0
CVTDSSV  EQU   CVTXTNT2
CVTFLGBT EQU   CVTXTNT2+5
CVTQID   EQU   CVTXTNT2+24
CVTSHS   EQU   CVTXTNT2+40
CVTRV400 EQU   CVTXTNT2+52
CVTRV409 EQU   CVTXTNT2+53
CVTATCVT EQU   CVTXTNT2+64
CVTRV429 EQU   CVTXTNT2+84
CVTRV438 EQU   CVTXTNT2+85
CVTRV457 EQU   CVTXTNT2+112
CVTRV466 EQU   CVTXTNT2+113
CVTFIX   EQU   0
CVTRELNO EQU   CVTFIX+252
IFGRPL   EQU   0
RPLCOMN  EQU   IFGRPL
RPLIDWD  EQU   RPLCOMN
RPLLEN   EQU   RPLIDWD+3
RPLECB   EQU   RPLCOMN+8
RPLFDBWD EQU   RPLCOMN+12
RPLFDBK  EQU   RPLFDBWD+1
RPLRTNCD EQU   RPLFDBK
RPLCNDCD EQU   RPLFDBK+1
RPLCMPON EQU   RPLCNDCD
RPLFDB2  EQU   RPLCMPON
RPLERRCD EQU   RPLCNDCD+1
RPLFDB3  EQU   RPLERRCD
RPLKEYLE EQU   RPLCOMN+16
RPLARG   EQU   RPLCOMN+36
RPLOPTCD EQU   RPLCOMN+40
RPLOPT1  EQU   RPLOPTCD
RPLECBSW EQU   RPLOPT1
RPLOPT2  EQU   RPLOPTCD+1
RPLADR   EQU   RPLOPT2
RPLOPT3  EQU   RPLOPTCD+2
RPLOPT4  EQU   RPLOPTCD+3
RPLNXTRP EQU   RPLCOMN+44
RPLRLEN  EQU   RPLCOMN+48
RPLOPTC2 EQU   RPLCOMN+56
RPLOPT5  EQU   RPLOPTC2
RPLWRTYP EQU   RPLOPT5
RPLOPT6  EQU   RPLOPTC2+1
RPLUNTYP EQU   RPLOPT6
RPLOPT7  EQU   RPLOPTC2+2
RPLCNOPT EQU   RPLOPT7
RPLOPT8  EQU   RPLOPTC2+3
RPLRBAR  EQU   RPLCOMN+60
RPLAIXID EQU   RPLRBAR+2
RPLEXTDS EQU   RPLCOMN+68
RPLEXTD1 EQU   RPLEXTDS
RPLVTEXT EQU   IFGRPL+76
RPLFDBK2 EQU   RPLVTEXT+12
RPLSSNSI EQU   RPLFDBK2
RPLDSB   EQU   RPLSSNSI
RPLDSB1  EQU   RPLDSB
RPLSSEI  EQU   RPLDSB1
RPLDSB2  EQU   RPLDSB+1
RPLUSNSI EQU   RPLFDBK2+2
RPLOPTC3 EQU   RPLVTEXT+20
RPLOPT9  EQU   RPLOPTC3
RPLOPT10 EQU   RPLOPTC3+1
RPLOPT11 EQU   RPLOPTC3+2
RPLOPT12 EQU   RPLOPTC3+3
RPLOSENS EQU   RPLVTEXT+24
RPLSSNSO EQU   RPLOSENS
RPLSSEO  EQU   RPLSSNSO
RPLOF16  EQU   0
RPLRH3   EQU   RPLOF16
RPLSRTYP EQU   RPLOF16+1
RPLSTYPE EQU   RPLSRTYP
RPLRTYPE EQU   RPLSRTYP
RPLCHN   EQU   RPLOF16+2
RPLVTFL1 EQU   RPLOF16+3
RPLVTFL2 EQU   RPLOF16+4
RPLPOSTV EQU   RPLVTFL2
RPLRESP  EQU   RPLVTFL2
RPLCNTRL EQU   RPLOF16+5
RPLCNTDF EQU   RPLCNTRL
RPLCNTDC EQU   RPLCNTRL+1
RPLCNTSC EQU   RPLCNTRL+2
RPLOF60  EQU   0
RPLOBSQ  EQU   RPLOF60+4
RPLIBSQ  EQU   RPLOF60+5
ISTPROCD EQU   0
PROPROC  EQU   ISTPROCD
PROPROC1 EQU   PROPROC
PROPROC2 EQU   PROPROC+1
PROPROC3 EQU   PROPROC+2
PROPROC4 EQU   PROPROC+3
PROPROCS EQU   0
PROSETMS EQU   PROPROCS+1
PROSETM2 EQU   PROSETMS
PROSETM3 EQU   PROSETMS+1
PROSETM4 EQU   PROSETMS+2
ISTDEVCH EQU   0
DEVSHCH  EQU   ISTDEVCH
DEVCHAR  EQU   DEVSHCH
DEVTCODE EQU   ISTDEVCH+1
DEVFLAGS EQU   ISTDEVCH+3
DEVFCCTL EQU   DEVFLAGS
DEVCHAR3 EQU   DEVFLAGS
ISTBIND  EQU   0
BINFMTY  EQU   ISTBIND
BINPRIP  EQU   ISTBIND+3
BINSECP  EQU   ISTBIND+4
BINCMNP  EQU   ISTBIND+5
BINCMNP2 EQU   ISTBIND+6
BINTSU   EQU   ISTBIND+7
BINRPACE EQU   BINTSU+1
BINRUSZ  EQU   BINTSU+2
BINSRUSZ EQU   BINRUSZ
BINPRUSZ EQU   BINRUSZ+1
BINPRSVC EQU   ISTBIND+13
BINLUP   EQU   BINPRSVC
BINPSCHR EQU   BINPRSVC+1
ISTCSL   EQU   0
CSLRDEF  EQU   ISTCSL
CSLRDTE  EQU   CSLRDEF
CSLNDEF  EQU   ISTCSL+4
CSLNIB   EQU   CSLNDEF
CSLDDEF  EQU   ISTCSL+8
CSLDATA  EQU   CSLDDEF
ISTNIB   EQU   0
NIBFLGS  EQU   ISTNIB+40
NIBFLG1  EQU   NIBFLGS
ISTCSP   EQU   0
CSPOPT   EQU   ISTCSP+2
CSPOPT1  EQU   CSPOPT
CSPOPT2  EQU   CSPOPT+1
CSPRSC2B EQU   ISTCSP+32
ISTOCW   EQU   0
OCWRPL   EQU   ISTOCW+12
OCWRPH   EQU   ISTOCW+16
OCWACVT  EQU   ISTOCW+24
OCWLRDTE EQU   ISTOCW+40
OCWDRDTE EQU   OCWLRDTE
OCWODRC  EQU   ISTOCW+92
OCWSVCOD EQU   ISTOCW+94
OCWSCPAD EQU   ISTOCW+176
OCWSWTA  EQU   ISTOCW+204
OCWSWTB  EQU   ISTOCW+205
OCWSWTC  EQU   ISTOCW+206
OCWSWTD  EQU   ISTOCW+207
OCWSAVE2 EQU   ISTOCW+336
OCWSWTRD EQU   ISTOCW+730
OCWSWTE  EQU   ISTOCW+731
OCWLOCKS EQU   ISTOCW+740
OCWCID   EQU   ISTOCW+744
OCWIOCNT EQU   ISTOCW+760
OCWSHPL  EQU   ISTOCW+784
OCWBIND  EQU   ISTOCW+796
OCWFLG1  EQU   ISTOCW+847
ISTPOPWA EQU   0
POPTPOPT EQU   ISTPOPWA+3
POPMSG   EQU   ISTPOPWA+12
POPPLA   EQU   ISTPOPWA+140
POPSAVE  EQU   ISTPOPWA+156
POPMSGID EQU   ISTPOPWA+228
POPTXPTR EQU   ISTPOPWA+232
ISTPAB   EQU   0
PABWQCHN EQU   ISTPAB
PABWEQA  EQU   PABWQCHN
PABCHAIN EQU   PABWQCHN+4
PABRPHFG EQU   ISTPAB+12
PABFLAGS EQU   PABRPHFG
PABERLCK EQU   PABFLAGS
PABERRLK EQU   PABERLCK
ISTLOK   EQU   0
LOKCHN   EQU   ISTLOK+1
LOKCHNG  EQU   LOKCHN
@NM00045 EQU   LOKCHNG+2
ISTDYPAB EQU   0
DYPPAB   EQU   ISTDYPAB+16
ISTRPH   EQU   0
RPHCNTL  EQU   ISTRPH
RPHFLAGS EQU   RPHCNTL+2
RPHAPTYP EQU   RPHFLAGS
RPHFSTLC EQU   RPHFLAGS
RPHFLGB  EQU   RPHCNTL+3
RPHRPHA  EQU   ISTRPH+4
RPHTSKID EQU   ISTRPH+8
RPHRESMA EQU   ISTRPH+16
RPHWPFLG EQU   RPHRESMA
RPHWEA   EQU   ISTRPH+24
RPHCSPA  EQU   RPHWEA
RPHSRPRM EQU   ISTRPH+28
RPHCRR   EQU   ISTRPH+32
RPHPABQA EQU   ISTRPH+36
RPHWORK  EQU   ISTRPH+40
RPHSAVE1 EQU   RPHWORK
RPHSBITS EQU   RPHSAVE1+1
ISTATCVT EQU   0
ATCCOM   EQU   ISTATCVT
ATCSTAT  EQU   ATCCOM
ATCSTAT1 EQU   ATCSTAT
ATCSTFLG EQU   ATCSTAT+1
ATCPOFLG EQU   ATCSTAT+2
ATCSTAT4 EQU   ATCSTAT+3
ATCIOTRC EQU   ATCCOM+140
ATCTHTRC EQU   ATCIOTRC
ATCCSMR  EQU   ISTATCVT+296
ATCSHRFG EQU   ISTATCVT+316
ATCMSGP  EQU   ISTATCVT+344
ATCHPGM  EQU   ISTATCVT+384
ATCAP33  EQU   ISTATCVT+444
ATCAP35  EQU   ISTATCVT+448
ATCAP36  EQU   ISTATCVT+452
ATCRDTLK EQU   ISTATCVT+472
ATCVLCNT EQU   ISTATCVT+772
ATCRNO   EQU   ISTATCVT+788
ATCPOIA  EQU   ATCRNO+1
ATCSOPD  EQU   ISTATCVT+792
ATCSIPD  EQU   ISTATCVT+800
ATCSECST EQU   ISTATCVT+812
ATCSTAT2 EQU   ISTATCVT+818
ATCVTBAM EQU   ISTATCVT+908
@NM00056 EQU   ATCVTBAM+3
ATCAOSM  EQU   ISTATCVT+912
ATCGSRBQ EQU   ATCAOSM+4
ATCGSRBG EQU   ATCGSRBQ
ATCAP34  EQU   ATCAOSM+32
ATCICAPP EQU   ATCAOSM+100
ATCLDAPP EQU   ATCAOSM+120
ATCDAPVT EQU   ATCAOSM+140
ATCAP37  EQU   ATCAOSM+264
ATCCRA   EQU   ATCAOSM+280
ATCCRACN EQU   ATCCRA+4
ATCSRB   EQU   ATCAOSM+288
ATCSRBCN EQU   ATCSRB+4
ATCCRPL  EQU   ATCAOSM+296
ATCRPLCN EQU   ATCCRPL+4
ATCSQAFR EQU   ATCAOSM+304
ATCORTBC EQU   ATCSQAFR+4
ATCORSRB EQU   ATCORTBC
@NM00058 EQU   ATCAOSM+332
ATCVTFLG EQU   ATCAOSM+392
ATCZFLAG EQU   ATCAOSM+588
ATCPOPAB EQU   ATCAOSM+640
ISTPOIA  EQU   0
POIANCR  EQU   ISTPOIA+4
POIPRANC EQU   ISTPOIA+8
ISTLCCW  EQU   0
LCCWOP   EQU   ISTLCCW
LCCWRWOP EQU   LCCWOP
LCCWCTL  EQU   LCCWRWOP
LCCWFLAG EQU   ISTLCCW+1
LCCWLSI  EQU   LCCWFLAG
ISTLCPB  EQU   0
LCPREQTG EQU   ISTLCPB+2
LCPFLAGS EQU   LCPREQTG
LCPZF001 EQU   LCPFLAGS
LCPZRT02 EQU   LCPZF001
LCPZF002 EQU   LCPFLAGS
LCPZRT03 EQU   LCPZF002
LCPZF003 EQU   LCPFLAGS
LCPZRT04 EQU   LCPZF003
LCPZF004 EQU   LCPFLAGS
LCPZRT05 EQU   LCPZF004
LCPZRT06 EQU   LCPFLAGS
LCPZRT07 EQU   LCPFLAGS
LCPMNRCD EQU   LCPREQTG+1
LCPZRT08 EQU   LCPMNRCD
LCPZRT09 EQU   LCPMNRCD
LCPCHAIN EQU   ISTLCPB+4
LCPCHAI1 EQU   LCPCHAIN
LCPRUCNT EQU   ISTLCPB+8
LCPFLAG2 EQU   ISTLCPB+9
LCPTLBPI EQU   LCPFLAG2
LCPFID0  EQU   LCPFLAG2
LCPSEQ   EQU   ISTLCPB+10
LCPCID   EQU   ISTLCPB+16
LCPFDBA  EQU   ISTLCPB+24
LCPFLG1  EQU   ISTLCPB+37
LCPFLCCW EQU   ISTLCPB+40
LCPLCCW  EQU   ISTLCPB+48
LCPPABA  EQU   LCPLCCW+4
LCPRPHA  EQU   LCPPABA
ISTZSAVE EQU   0
ZSAZSVBC EQU   ISTZSAVE
ZSAZSVMS EQU   ZSAZSVBC
ISTPFCRR EQU   0
PFCCRR   EQU   ISTPFCRR
PFCCRRID EQU   PFCCRR
PFCCRRLN EQU   PFCCRR+2
PFCHDR   EQU   ISTPFCRR+4
PFCCRRO  EQU   PFCHDR
PFCFRRO  EQU   PFCHDR+4
ISTCFCRR EQU   0
CFCAUDIT EQU   ISTCFCRR
CFCNTRD  EQU   CFCAUDIT
NCFCRP   EQU   CFCNTRD
CFCCRT   EQU   CFCAUDIT+1
CCFCRP   EQU   CFCCRT
ISTZCRR  EQU   0
ZCRCRR   EQU   ISTZCRR
ZCRFLGS1 EQU   ISTZCRR+12
ZCRFLGS2 EQU   ISTZCRR+13
ZCRSWFLD EQU   ISTZCRR+14
ZCRENDSH EQU   ZCRSWFLD
ZCRNDLCP EQU   ZCRSWFLD
ZCRRESET EQU   ZCRSWFLD
ZCRFLGS3 EQU   ISTZCRR+15
ZCRGENSW EQU   ISTZCRR+16
ZCRPFLGS EQU   ISTZCRR+17
ZCRIBPR  EQU   ISTZCRR+18
ZCRSCPSW EQU   ISTZCRR+19
ZCRPARMS EQU   ISTZCRR+24
ZCRFBPTR EQU   ZCRPARMS
ZCRDFRDA EQU   ZCRPARMS+10
ZCRPCOD1 EQU   ZCRPARMS+12
ZCRPLSBF EQU   ZCRPCOD1
ZCRPCOD2 EQU   ZCRPARMS+13
ZCRSVRTN EQU   ISTZCRR+56
ZCRWKARA EQU   ISTZCRR+156
ZCRCIDSV EQU   ISTZCRR+192
ZCRAUDIT EQU   ISTZCRR+440
ZCRENTER EQU   ZCRAUDIT+5
ZCRLCPB  EQU   ISTZCRR+480
ZCRRHRU  EQU   ZCRLCPB
ISTASCRR EQU   0
ASCFLAGS EQU   ISTASCRR+16
ASCFLG1  EQU   ASCFLAGS
ASCFLG2  EQU   ASCFLAGS+2
ASCFLG3  EQU   ASCFLAGS+4
ASCUSRGS EQU   ISTASCRR+28
ISTAPCRR EQU   0
APCATFLG EQU   ISTAPCRR+16
APCRFLG  EQU   ISTAPCRR+18
APCSAVE  EQU   ISTAPCRR+44
APCCOMF  EQU   ISTAPCRR+116
APCCOMF1 EQU   APCCOMF
APC31FLG EQU   ISTAPCRR+132
APC52FLG EQU   ISTAPCRR+133
APC53FLG EQU   ISTAPCRR+134
APC54FLG EQU   ISTAPCRR+135
APC57FLG EQU   ISTAPCRR+136
ISTCRA   EQU   0
CRABASIC EQU   ISTCRA
CRAHDR   EQU   CRABASIC
CRACRR   EQU   CRAHDR
CRALKACT EQU   CRABASIC+8
CRAL3PTR EQU   CRABASIC+20
CRASVC   EQU   ISTCRA+848
CRABUFA  EQU   CRASVC+68
ISTPOHD  EQU   0
POHSTAT  EQU   ISTPOHD+1
ISTPOMCB EQU   0
POMNEXT  EQU   ISTPOMCB+8
POMFWD   EQU   POMNEXT+1
POMREPQ  EQU   ISTPOMCB+12
ISTPORCB EQU   0
POREPID  EQU   ISTPORCB+2
PORNEXT  EQU   ISTPORCB+8
PORFWD   EQU   PORNEXT+1
PORPOMQ  EQU   ISTPORCB+12
PORPOMCB EQU   PORPOMQ+1
PORREPLN EQU   ISTPORCB+24
PORRSVD  EQU   ISTPORCB+25
PORRTPQ  EQU   PORRSVD
PORMSG   EQU   ISTPORCB+28
ISTWPL   EQU   0
WPLMCSF  EQU   ISTWPL+2
WPLMCSF1 EQU   WPLMCSF
WPLMCSF2 EQU   WPLMCSF+1
ISTRWPL  EQU   0
RWPPRTR  EQU   ISTRWPL
RWPRECB  EQU   ISTRWPL+4
ISTPOCB  EQU   0
POCNEXT  EQU   ISTPOCB+8
POCRCVQ  EQU   ISTPOCB+16
POCREPQ  EQU   ISTPOCB+20
POCAWTRQ EQU   POCREPQ+1
POCRPGEN EQU   ISTPOCB+28
POCSTAT  EQU   ISTPOCB+42
CRPREGSV EQU   0
CRPWKA   EQU   0
CRPNULL  EQU   CRPWKA
CRPR14SV EQU   CRPWKA+4
CRPINDEX EQU   CRPWKA+8
CRPDW    EQU   CRPWKA+12
CRPBGN   EQU   CRPDW
CRPBUFLN EQU   CRPDW+4
CRPNUM   EQU   CRPWKA+20
CRPSTSW  EQU   CRPWKA+22
CRPFND   EQU   CRPSTSW
CRPERR   EQU   CRPSTSW
CRPSAME  EQU   CRPSTSW
CRPCHARA EQU   0
CRPCHARB EQU   0
CRPCHARC EQU   0
FMZL0012 EQU   0
FMZL0022 EQU   0
ISTAPC37 EQU   0
FMZL0033 EQU   0
FMZL0043 EQU   0
@NM00032 EQU   0
CMZID048 EQU   @NM00032
@NM00033 EQU   @NM00032+4
CMZRL048 EQU   @NM00033
CMZRA048 EQU   @NM00033+1
CMZEA048 EQU   @NM00032+8
CMZVP048 EQU   @NM00032+12
CMZSA048 EQU   0
CMTA048  EQU   0
ISTAPC34 EQU   0
ISTRPL   EQU   0
CVTS01   EQU   CVTPGSIA
CVTLPDIA EQU   CVTS01+12
CVTDIRST EQU   CVTLPDIA
CVTSLIDA EQU   CVTS01+24
CVTCTLFG EQU   CVTS01+50
CVTRV210 EQU   CVTS01+424
CVTRV219 EQU   CVTS01+425
CVTRV228 EQU   CVTS01+426
CVTRV237 EQU   CVTS01+427
CVTMFRTR EQU   CVTS01+452
CVTRV262 EQU   CVTS01+468
CVTRV271 EQU   CVTS01+469
CVTRV280 EQU   CVTS01+470
CVTRV289 EQU   CVTS01+471
CVTGSDA  EQU   CVTS01+600
CRPR13SV EQU   CRPINDEX
BINLUP1  EQU   BINPSCHR
BINLUS   EQU   BINPSCHR
BINFMF1  EQU   BINLUS
BINRSV09 EQU   BINFMF1
BINDSPF1 EQU   BINLUS+2
BINMEDIA EQU   BINLUS+4
BINLUP2  EQU   BINPSCHR
BINLUP3  EQU   BINPSCHR
LCPZTIE  EQU   LCPCID
LCPZSNAM EQU   LCPZTIE+8
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
LCPZTRV4 EQU   LCPZSNAM+4
LCPZTRV1 EQU   LCPZSNAM
LCPZSNA  EQU   LCPZTIE+4
LCPZFMCA EQU   LCPZTIE
BINRSV26 EQU   BINLUP3
BINRSV15 EQU   BINLUP2+10
BINPRESZ EQU   BINLUP2+9
BINRSV14 EQU   BINLUP2
BINRSV13 EQU   BINMEDIA
BINDISK  EQU   BINMEDIA
BINXCHNG EQU   BINMEDIA
BINCARD  EQU   BINMEDIA
BINDOCMT EQU   BINMEDIA
BINRSV17 EQU   BINDSPF1+1
BINTRNDS EQU   BINDSPF1
BINRSV12 EQU   BINDSPF1
BINVSDS  EQU   BINDSPF1
BINVTDS  EQU   BINDSPF1
BINHFDS  EQU   BINDSPF1
BININTR  EQU   BINDSPF1
BINRSV11 EQU   BINRSV09+1
BINXFPD  EQU   BINRSV09+1
BINCSDS  EQU   BINRSV09+1
BINQDSI  EQU   BINRSV09+1
BINRSV16 EQU   BINRSV09+1
BINARRR  EQU   BINRSV09
BINSIDS  EQU   BINRSV09
BINSAI   EQU   BINRSV09
BINSDSI  EQU   BINRSV09
BINKDDSI EQU   BINRSV09
BINPDIR  EQU   BINFMF1
BINCMPCT EQU   BINFMF1
BINDESTS EQU   BINFMF1
BINSLUS1 EQU   BINLUP1+6
BINPLUS1 EQU   BINLUP1+1
BINDSP1  EQU   BINLUP1
BINFMHS1 EQU   BINLUP1
CVTRV628 EQU   CVTS01+728
CVTRV627 EQU   CVTS01+724
CVTRV626 EQU   CVTS01+720
CVTRV625 EQU   CVTS01+716
CVTRV624 EQU   CVTS01+712
CVTRV623 EQU   CVTS01+708
CVTRV622 EQU   CVTS01+704
CVTRV621 EQU   CVTS01+700
CVTRV620 EQU   CVTS01+696
CVTRV619 EQU   CVTS01+692
CVTRV618 EQU   CVTS01+688
CVTRV617 EQU   CVTS01+684
CVTRV616 EQU   CVTS01+680
CVTRV615 EQU   CVTS01+676
CVTRV614 EQU   CVTS01+672
CVTRV613 EQU   CVTS01+668
CVTTCASP EQU   CVTS01+664
CVT0PT03 EQU   CVTS01+660
CVT0PT0E EQU   CVTS01+656
CVTIRM   EQU   CVTS01+652
CVTCGK   EQU   CVTS01+648
CVTRV607 EQU   CVTS01+644
CVTRV606 EQU   CVTS01+640
CVTRV605 EQU   CVTS01+636
CVTRV604 EQU   CVTS01+632
CVTEFF02 EQU   CVTS01+628
CVTCBBR  EQU   CVTS01+624
CVTSSCR  EQU   CVTS01+620
CVTEVENT EQU   CVTS01+616
CVTCRCA  EQU   CVTS01+612
CVTTPIO  EQU   CVTS01+608
CVTADV   EQU   CVTS01+604
CVTGSDAB EQU   CVTGSDA
CVTQV3   EQU   CVTS01+596
CVTQV2   EQU   CVTS01+592
CVTQV1   EQU   CVTS01+588
CVTRPT   EQU   CVTS01+584
CVTSSRB  EQU   CVTS01+580
CVTCSDRL EQU   CVTS01+576
CVTEXP1  EQU   CVTS01+572
CVTRMPMT EQU   CVTS01+568
CVTRMPTT EQU   CVTS01+564
CVTVPSA  EQU   CVTS01+560
CVTVSTOP EQU   CVTS01+556
CVTGTFR8 EQU   CVTS01+552
CVTQUIT  EQU   CVTS01+548
CVTVACR  EQU   CVTS01+544
CVTWTCB  EQU   CVTS01+540
CVTSTPRS EQU   CVTS01+536
CVT0PT02 EQU   CVTS01+532
CVTDARCM EQU   CVTS01+528
CVTIRECM EQU   CVTS01+524
CVTJRECM EQU   CVTS01+520
CVTVEMS0 EQU   CVTS01+516
CVTSPFRR EQU   CVTS01+512
CVTRLSTG EQU   CVTS01+508
CVT0TC0A EQU   CVTS01+504
CVTGMBR  EQU   CVTS01+500
CVTLFRM  EQU   CVTS01+496
CVTRMBR  EQU   CVTS01+492
CVTVIOP  EQU   CVTS01+488
CVTRV307 EQU   CVTS01+486
CVTRV306 EQU   CVTS01+484
CVTRV305 EQU   CVTS01+482
CVTRV304 EQU   CVTS01+480
CVTRV303 EQU   CVTS01+478
CVTRV302 EQU   CVTS01+476
CVTTRCA  EQU   CVTS01+472
CVTRV297 EQU   CVTRV289
CVTRV296 EQU   CVTRV289
CVTRV295 EQU   CVTRV289
CVTRV294 EQU   CVTRV289
CVTRV293 EQU   CVTRV289
CVTRV292 EQU   CVTRV289
CVTRV291 EQU   CVTRV289
CVTRV290 EQU   CVTRV289
CVTRV288 EQU   CVTRV280
CVTRV287 EQU   CVTRV280
CVTRV286 EQU   CVTRV280
CVTRV285 EQU   CVTRV280
CVTRV284 EQU   CVTRV280
CVTRV283 EQU   CVTRV280
CVTRV282 EQU   CVTRV280
CVTRV281 EQU   CVTRV280
CVTRV279 EQU   CVTRV271
CVTRV278 EQU   CVTRV271
CVTRV277 EQU   CVTRV271
CVTRV276 EQU   CVTRV271
CVTRV275 EQU   CVTRV271
CVTRV274 EQU   CVTRV271
CVTRV273 EQU   CVTRV271
CVTRV272 EQU   CVTRV271
CVTRV270 EQU   CVTRV262
CVTRV269 EQU   CVTRV262
CVTRV268 EQU   CVTRV262
CVTRV267 EQU   CVTRV262
CVTRV266 EQU   CVTRV262
CVTRV265 EQU   CVTRV262
CVTRV264 EQU   CVTRV262
CVTRV263 EQU   CVTRV262
CVTVFP   EQU   CVTS01+464
CVTVSI   EQU   CVTS01+460
CVTVPSIB EQU   CVTS01+456
CVTMFACT EQU   CVTMFRTR
CVTMFCTL EQU   CVTS01+448
CVTPVBP  EQU   CVTS01+444
CVTPWI   EQU   CVTS01+440
CVTRV254 EQU   CVTS01+438
CVTRV253 EQU   CVTS01+436
CVTRV252 EQU   CVTS01+434
CVTRV251 EQU   CVTS01+433
CVTRV250 EQU   CVTS01+432
CVTRV249 EQU   CVTS01+431
CVTRV248 EQU   CVTS01+430
CVTRV247 EQU   CVTS01+429
CVTRV246 EQU   CVTS01+428
CVTRV245 EQU   CVTRV237
CVTRV244 EQU   CVTRV237
CVTRV243 EQU   CVTRV237
CVTRV242 EQU   CVTRV237
CVTRV241 EQU   CVTRV237
CVTRV240 EQU   CVTRV237
CVTRV239 EQU   CVTRV237
CVTRV238 EQU   CVTRV237
CVTRV236 EQU   CVTRV228
CVTRV235 EQU   CVTRV228
CVTRV234 EQU   CVTRV228
CVTRV233 EQU   CVTRV228
CVTRV232 EQU   CVTRV228
CVTRV231 EQU   CVTRV228
CVTRV230 EQU   CVTRV228
CVTRV229 EQU   CVTRV228
CVTRV227 EQU   CVTRV219
CVTRV226 EQU   CVTRV219
CVTRV225 EQU   CVTRV219
CVTRV224 EQU   CVTRV219
CVTRV223 EQU   CVTRV219
CVTRV222 EQU   CVTRV219
CVTRV221 EQU   CVTRV219
CVTRV220 EQU   CVTRV219
CVTRV218 EQU   CVTRV210
CVTRV217 EQU   CVTRV210
CVTRV216 EQU   CVTRV210
CVTRV215 EQU   CVTRV210
CVTRV214 EQU   CVTRV210
CVTRV213 EQU   CVTRV210
CVTRV212 EQU   CVTRV210
CVTRV211 EQU   CVTRV210
CVTLCCAT EQU   CVTS01+420
CVTPCCAT EQU   CVTS01+416
CVTIPCRP EQU   CVTS01+412
CVTIPCRI EQU   CVTS01+408
CVTIPCDS EQU   CVTS01+404
CVTAIDVT EQU   CVTS01+400
CVTSSAP  EQU   CVTS01+396
CVTEHCIR EQU   CVTS01+392
CVTEHDEF EQU   CVTS01+388
CVTDAIR  EQU   CVTS01+384
CVTPERFM EQU   CVTS01+380
CVT044R2 EQU   CVTS01+376
CVTFETCH EQU   CVTS01+372
CVTRSTWD EQU   CVTS01+368
CVTSPOST EQU   CVTS01+364
CVTIOBP  EQU   CVTS01+360
CVTASMVT EQU   CVTS01+356
CVTRECRQ EQU   CVTS01+352
CVTWSAC  EQU   CVTS01+348
CVTRV149 EQU   CVTS01+344
CVTWSAL  EQU   CVTS01+340
CVTSPSA  EQU   CVTS01+336
CVTGLMN  EQU   CVTS01+332
CVTVEAC0 EQU   CVTS01+328
CVT062R1 EQU   CVTS01+324
CVTRPOST EQU   CVTS01+320
CVTDQIQE EQU   CVTS01+316
CVTCSD   EQU   CVTS01+312
CVTLKRMA EQU   CVTS01+308
CVTRSPIE EQU   CVTS01+304
CVTRENQ  EQU   CVTS01+300
CVTLQCB  EQU   CVTS01+296
CVTFQCB  EQU   CVTS01+292
CVTQCS01 EQU   CVTS01+288
CVTAPFT  EQU   CVTS01+284
CVTPARRL EQU   CVTS01+280
CVTVWAIT EQU   CVTS01+276
CVTGSPL  EQU   CVTS01+272
CVTLSMQ  EQU   CVTS01+268
CVTGSMQ  EQU   CVTS01+264
CVTEXPRO EQU   CVTS01+260
CVTOPCTP EQU   CVTS01+256
CVTSIC   EQU   CVTS01+252
CVTTPIOS EQU   CVTS01+248
CVTRTMS  EQU   CVTS01+244
CVTSDBF  EQU   CVTS01+240
CVTSCBP  EQU   CVTS01+236
CVTSDMP  EQU   CVTS01+232
CVTSV60  EQU   CVTS01+228
CVTRTMCT EQU   CVTS01+224
CVTASCBL EQU   CVTS01+220
CVTASCBH EQU   CVTS01+216
CVTGDA   EQU   CVTS01+212
CVTASVT  EQU   CVTS01+208
CVTVVMDI EQU   CVTS01+204
CVTAQTOP EQU   CVTS01+200
CVTIOSCS EQU   CVTS01+196
CVTSDRM  EQU   CVTS01+192
CVTOPTE  EQU   CVTS01+188
CVTSTXU  EQU   CVTS01+184
CVTQUIS  EQU   CVTS01+180
CVTPARS  EQU   CVTS01+176
CVTS1EE  EQU   CVTS01+172
CVTFRAS  EQU   CVTS01+168
CVTQSAS  EQU   CVTS01+164
CVTCRAS  EQU   CVTS01+160
CVTCRMN  EQU   CVTS01+156
CVTDELCP EQU   CVTS01+152
CVTFRECL EQU   CVTS01+148
CVTGETCL EQU   CVTS01+144
CVTBLDCP EQU   CVTS01+140
CVTAUTHL EQU   CVTS01+136
CVTSCAN  EQU   CVTS01+132
CVTRV144 EQU   CVTS01+130
CVTMAXMP EQU   CVTS01+128
CVTSTCK  EQU   CVTS01+124
CVTRV139 EQU   CVTS01+123
CVTDSSAC EQU   CVTS01+122
CVTRV513 EQU   CVTS01+121
CVTIOSPL EQU   CVTS01+120
CVTPTGT  EQU   CVTS01+116
CVTCSPIE EQU   CVTS01+112
CVTSMFEX EQU   CVTS01+108
CVTOLT0A EQU   CVTS01+104
CVTSRBRT EQU   CVTS01+100
CVTPUTL  EQU   CVTS01+96
CVTASCRL EQU   CVTS01+92
CVTASCRF EQU   CVTS01+88
CVTRV326 EQU   CVTS01+84
CVTRV325 EQU   CVTS01+80
CVTRV324 EQU   CVTS01+76
CVT0VL01 EQU   CVTS01+72
CVTSHRVM EQU   CVTS01+68
CVTRV332 EQU   CVTS01+64
CVTTAS   EQU   CVTS01+60
CVTRSCN  EQU   CVTS01+56
CVTTRAC2 EQU   CVTS01+54
CVTTRACE EQU   CVTS01+52
CVTAPG   EQU   CVTS01+51
CVTSDTRC EQU   CVTCTLFG
CVTGTRCE EQU   CVTCTLFG
CVTNOMP  EQU   CVTCTLFG
CVTRSV79 EQU   CVTCTLFG
CVTDSTAT EQU   CVTCTLFG
CVTRSV78 EQU   CVTCTLFG
CVTRV333 EQU   CVTCTLFG
CVTRV323 EQU   CVTCTLFG
CVTSPVLK EQU   CVTS01+49
CVTRSV77 EQU   CVTS01+48
CVTRV331 EQU   CVTS01+44
CVTRV330 EQU   CVTS01+40
CVTRV329 EQU   CVTS01+36
CVTRV328 EQU   CVTS01+32
CVTRV322 EQU   CVTS01+28
CVTSLID  EQU   CVTSLIDA+1
CVTSYLK  EQU   CVTSLIDA
CVTRV321 EQU   CVTS01+20
CVTRV320 EQU   CVTS01+16
CVTLPDIR EQU   CVTLPDIA+1
CVTRSV69 EQU   CVTDIRST
CVTRSV68 EQU   CVTDIRST
CVTRSV67 EQU   CVTDIRST
CVTRSV66 EQU   CVTDIRST
CVTRSV65 EQU   CVTDIRST
CVTRSV64 EQU   CVTDIRST
CVTRSV63 EQU   CVTDIRST
CVTDICOM EQU   CVTDIRST
CVTPVTP  EQU   CVTS01+8
CVTLPDSR EQU   CVTS01+4
CVTGETL  EQU   CVTS01
@NM00031 EQU   CRPSTSW
@NM00030 EQU   CRPREGSV+12
CPCSVFWP EQU   CRPREGSV+8
CPCSVBKP EQU   CRPREGSV+4
@NM00029 EQU   CRPREGSV
POCWTOPL EQU   ISTPOCB+44
POCRSVD  EQU   ISTPOCB+43
@NM00086 EQU   POCSTAT
POCQUI   EQU   POCSTAT
POCINACT EQU   POCSTAT
POCACT   EQU   POCSTAT
POCRCNTR EQU   ISTPOCB+41
POCRPL   EQU   ISTPOCB+24
@NM00085 EQU   POCREPQ
POCMSGQ  EQU   POCRCVQ+1
@NM00084 EQU   POCRCVQ
POCDEB   EQU   ISTPOCB+12
POCFWD   EQU   POCNEXT+1
@NM00083 EQU   POCNEXT
POCPSSQ  EQU   ISTPOCB+4
POCVTMID EQU   ISTPOCB+2
POCLNGTH EQU   ISTPOCB+1
POCCBID  EQU   ISTPOCB
RWPWPL   EQU   ISTRWPL+8
RWPSSECB EQU   RWPRECB
RWPRPTRA EQU   RWPPRTR+1
RWPLRLN  EQU   RWPPRTR
WPLTXT   EQU   ISTWPL+4
WPLRSV02 EQU   WPLMCSF2
WPLMCSFN EQU   WPLMCSF2
WPLRSV01 EQU   WPLMCSF2
WPLSTGFL EQU   WPLMCSF2
WPLMCSFJ EQU   WPLMCSF2
WPLMCSFI EQU   WPLMCSF2
WPLMCSFH EQU   WPLMCSF1
WPLMCSFG EQU   WPLMCSF1
WPLMCSFF EQU   WPLMCSF1
WPLMCSFE EQU   WPLMCSF1
WPLMCSFD EQU   WPLMCSF1
WPLMCSFC EQU   WPLMCSF1
WPLMCSFB EQU   WPLMCSF1
WPLMCSFA EQU   WPLMCSF1
WPLLGH   EQU   ISTWPL
@NM00082 EQU   ISTPORCB+26
@NM00081 EQU   PORRSVD
PORECB   EQU   ISTPORCB+20
PORAREA  EQU   ISTPORCB+16
@NM00080 EQU   PORPOMQ
@NM00079 EQU   PORNEXT
PORPSSQ  EQU   ISTPORCB+4
PORLNGTH EQU   ISTPORCB+1
PORCBID  EQU   ISTPORCB
POMMSG   EQU   ISTPOMCB+20
POMMHDR  EQU   ISTPOMCB+16
POMPORCB EQU   POMREPQ+1
@NM00078 EQU   POMREPQ
@NM00077 EQU   POMNEXT
POMRSVD2 EQU   ISTPOMCB+4
POMRSVD1 EQU   ISTPOMCB+3
POMMSGLN EQU   ISTPOMCB+2
POMLNGTH EQU   ISTPOMCB+1
POMCBID  EQU   ISTPOMCB
POHID    EQU   ISTPOHD+2
POHGEN   EQU   POHSTAT
POHRREQ  EQU   POHSTAT
POHRSVD2 EQU   POHSTAT
POHCNTRL EQU   POHSTAT
POHLBL   EQU   POHSTAT
POHDATA  EQU   POHSTAT
POHEND   EQU   POHSTAT
POHRSVD1 EQU   ISTPOHD
CRACHAIN EQU   ISTCRA+928
CRARSV02 EQU   ISTCRA+924
CRARSV01 EQU   ISTCRA+920
CRABFTBA EQU   CRABUFA
CRAMASK  EQU   CRASVC+64
CRAHSIZ  EQU   CRASVC+60
CRAASCRR EQU   CRASVC
CRAPROCR EQU   ISTCRA+312
CRAPSS   EQU   ISTCRA+160
CRARPH   EQU   ISTCRA+52
CRALAPTR EQU   CRABASIC+48
CRAL9PTR EQU   CRABASIC+44
CRAL8PTR EQU   CRABASIC+40
CRAL7PTR EQU   CRABASIC+36
CRAL6PTR EQU   CRABASIC+32
CRAL5PTR EQU   CRABASIC+28
CRAL4PTR EQU   CRABASIC+24
CRAL2PTR EQU   CRABASIC+16
CRAL1PTR EQU   CRABASIC+12
CRALEV01 EQU   CRALKACT+3
CRALEV02 EQU   CRALKACT+3
CRALEV03 EQU   CRALKACT+3
CRALEV04 EQU   CRALKACT+3
CRALEV05 EQU   CRALKACT+3
CRALEV06 EQU   CRALKACT+3
CRALEV07 EQU   CRALKACT+3
CRALEV08 EQU   CRALKACT+3
CRALEV09 EQU   CRALKACT+2
CRALEV10 EQU   CRALKACT+2
CRALEV11 EQU   CRALKACT+2
CRALEV12 EQU   CRALKACT+2
CRALEV13 EQU   CRALKACT+2
CRALEV14 EQU   CRALKACT+2
CRALEV15 EQU   CRALKACT+2
CRALEV16 EQU   CRALKACT+2
CRALEV17 EQU   CRALKACT+1
CRALEV18 EQU   CRALKACT+1
CRALEV19 EQU   CRALKACT+1
CRALEV20 EQU   CRALKACT+1
CRALEV21 EQU   CRALKACT+1
CRALEV22 EQU   CRALKACT+1
CRALEV23 EQU   CRALKACT+1
CRALEV24 EQU   CRALKACT+1
CRALEV25 EQU   CRALKACT
CRALEV26 EQU   CRALKACT
CRALEV27 EQU   CRALKACT
CRALEV28 EQU   CRALKACT
CRALEV29 EQU   CRALKACT
CRALEV30 EQU   CRALKACT
CRALEV31 EQU   CRALKACT
CRALEV32 EQU   CRALKACT
CRAFRR   EQU   CRAHDR+4
@NM00076 EQU   ISTAPCRR+137
@NM00075 EQU   APC57FLG
APCNREL  EQU   APC57FLG
APCRECRA EQU   APC57FLG
@NM00074 EQU   APC54FLG
APCRLST  EQU   APC54FLG
APCPR153 EQU   APC53FLG
@NM00073 EQU   APC52FLG
APCWKF   EQU   APC52FLG
APCNWF   EQU   APC52FLG
APCRDQ   EQU   APC52FLG
APCQENQ  EQU   APC52FLG
APCSMSR  EQU   APC52FLG
APCCKRQ  EQU   APC52FLG
@NM00072 EQU   APC31FLG
APCSORT  EQU   APC31FLG
APCRESCH EQU   APC31FLG
APCTPXIT EQU   APC31FLG
APCSWTWD EQU   ISTAPCRR+128
APCSAV2  EQU   ISTAPCRR+124
APCSAV1  EQU   ISTAPCRR+120
APCRETCD EQU   APCCOMF+2
@NM00071 EQU   APCCOMF1+1
APCZLBER EQU   APCCOMF1
APCEXIT  EQU   APCCOMF1
APCRELR  EQU   APCCOMF1
APCIRB2  EQU   APCCOMF1
APCIRB1  EQU   APCCOMF1
APCSMCR  EQU   APCCOMF1
APCUETSK EQU   APCCOMF1
APCSSTSK EQU   APCCOMF1
APCESTAL EQU   APCSAVE
APCFRRPM EQU   ISTAPCRR+40
APCQWFO  EQU   ISTAPCRR+36
APCPABSV EQU   ISTAPCRR+32
APCRTRN  EQU   ISTAPCRR+28
APCTCBA  EQU   ISTAPCRR+24
APCPSTA  EQU   ISTAPCRR+20
@NM00070 EQU   APCRFLG+1
APC31R   EQU   APCRFLG
APC58R   EQU   APCRFLG
APC57R   EQU   APCRFLG
APC56R   EQU   APCRFLG
APC54R   EQU   APCRFLG
APC53R   EQU   APCRFLG
APC52R   EQU   APCRFLG
APC51R   EQU   APCRFLG
@NM00069 EQU   APCATFLG+1
APC31E   EQU   APCATFLG
APC58E   EQU   APCATFLG
APC57E   EQU   APCATFLG
APC56E   EQU   APCATFLG
APC54E   EQU   APCATFLG
APC53E   EQU   APCATFLG
APC52E   EQU   APCATFLG
APC51E   EQU   APCATFLG
APCHDRSV EQU   ISTAPCRR
ASCPSREG EQU   ISTASCRR+44
ASCUSR01 EQU   ASCUSRGS+12
ASCUSR00 EQU   ASCUSRGS+8
ASCUSR15 EQU   ASCUSRGS+4
ASCUSR14 EQU   ASCUSRGS
ASCETRYA EQU   ISTASCRR+24
ASCKEY   EQU   ISTASCRR+23
ASCAUDIT EQU   ASCFLG3
ASCFBDUD EQU   ASCFLG3
ASCLLKF  EQU   ASCFLG3
ASCKEYF  EQU   ASCFLG3
ASCFBDAL EQU   ASCFLG3
ASCFSRGT EQU   ASCFLG3
ASCICR   EQU   ASCFLG2
ASCFSRIC EQU   ASCFLG2
ASCFBDIC EQU   ASCFLG2
ASCFBAIC EQU   ASCFLG2
ASCPASTR EQU   ASCFLG1
ASCFSR   EQU   ASCFLG1
ASCFBD   EQU   ASCFLG1
ASCFBA   EQU   ASCFLG1
ASCPFCRR EQU   ISTASCRR
ZCRRU    EQU   ZCRRHRU+3
ZCRRH    EQU   ZCRRHRU
ZCRWORDA EQU   ISTZCRR+477
ZCRCMNRC EQU   ISTZCRR+476
ZCRRSV97 EQU   ZCRENTER+18
ZCREIC2B EQU   ZCRENTER+18
ZCREAC2B EQU   ZCRENTER+18
ZCRELCAB EQU   ZCRENTER+18
ZCREDCMF EQU   ZCRENTER+18
ZCREBCIF EQU   ZCRENTER+18
ZCREICSG EQU   ZCRENTER+18
ZCREDCK0 EQU   ZCRENTER+18
ZCRECFY0 EQU   ZCRENTER+17
ZCREKCCB EQU   ZCRENTER+17
ZCREDCNB EQU   ZCRENTER+17
ZCREICOE EQU   ZCRENTER+17
ZCREBCNB EQU   ZCRENTER+17
ZCREBC0L EQU   ZCRENTER+17
ZCREBCAL EQU   ZCRENTER+17
ZCREDCQR EQU   ZCRENTER+17
ZCREDCPR EQU   ZCRENTER+16
ZCREBCSB EQU   ZCRENTER+16
ZCREAC1R EQU   ZCRENTER+16
ZCRECCCI EQU   ZCRENTER+16
ZCRECCAI EQU   ZCRENTER+16
ZCRECCBI EQU   ZCRENTER+16
ZCREBCAR EQU   ZCRENTER+16
ZCREBCDR EQU   ZCRENTER+16
ZCREBCBR EQU   ZCRENTER+15
ZCREDCXR EQU   ZCRENTER+15
ZCREDCWB EQU   ZCRENTER+15
ZCREDCWR EQU   ZCRENTER+15
ZCREKCCN EQU   ZCRENTER+15
ZCREKCBN EQU   ZCRENTER+15
ZCREKCBB EQU   ZCRENTER+15
ZCREJC0B EQU   ZCRENTER+15
ZCREJCDB EQU   ZCRENTER+14
ZCREJCCB EQU   ZCRENTER+14
ZCREJCBB EQU   ZCRENTER+14
ZCREJCAB EQU   ZCRENTER+14
ZCREIC1B EQU   ZCRENTER+14
ZCREIC0B EQU   ZCRENTER+14
ZCREICX0 EQU   ZCRENTER+14
ZCREICWB EQU   ZCRENTER+14
ZCREICVB EQU   ZCRENTER+13
ZCREICUB EQU   ZCRENTER+13
ZCREICTB EQU   ZCRENTER+13
ZCREICSC EQU   ZCRENTER+13
ZCREICSB EQU   ZCRENTER+13
ZCREICRB EQU   ZCRENTER+13
ZCREICQB EQU   ZCRENTER+13
ZCREICQA EQU   ZCRENTER+13
ZCREICOB EQU   ZCRENTER+12
ZCREICOA EQU   ZCRENTER+12
ZCREICNB EQU   ZCRENTER+12
ZCREICNA EQU   ZCRENTER+12
ZCREICMB EQU   ZCRENTER+12
ZCREICLB EQU   ZCRENTER+12
ZCREICKG EQU   ZCRENTER+12
ZCREICKE EQU   ZCRENTER+12
ZCREICKB EQU   ZCRENTER+11
ZCREICJB EQU   ZCRENTER+11
ZCREICID EQU   ZCRENTER+11
ZCREICIB EQU   ZCRENTER+11
ZCREICHB EQU   ZCRENTER+11
ZCREICGB EQU   ZCRENTER+11
ZCREICEB EQU   ZCRENTER+11
ZCREICDB EQU   ZCRENTER+11
ZCREICCI EQU   ZCRENTER+10
ZCREICCB EQU   ZCRENTER+10
ZCREICBI EQU   ZCRENTER+10
ZCREICBB EQU   ZCRENTER+10
ZCREICAB EQU   ZCRENTER+10
ZCREICAA EQU   ZCRENTER+10
ZCREHCAN EQU   ZCRENTER+10
ZCREGC0B EQU   ZCRENTER+10
ZCREGC0A EQU   ZCRENTER+9
ZCREGCLA EQU   ZCRENTER+9
ZCREGCEB EQU   ZCRENTER+9
ZCREGCDB EQU   ZCRENTER+9
@NM00068 EQU   ZCRENTER+9
ZCREGCBB EQU   ZCRENTER+9
ZCREGCAB EQU   ZCRENTER+9
ZCREFCEB EQU   ZCRENTER+9
ZCREFCEA EQU   ZCRENTER+8
ZCREECTA EQU   ZCRENTER+8
ZCREECEA EQU   ZCRENTER+8
ZCREECDA EQU   ZCRENTER+8
ZCREECCB EQU   ZCRENTER+8
ZCREECCA EQU   ZCRENTER+8
ZCREECBB EQU   ZCRENTER+8
ZCREECBA EQU   ZCRENTER+8
ZCREDCMB EQU   ZCRENTER+7
ZCREDCL0 EQU   ZCRENTER+7
ZCREDCKB EQU   ZCRENTER+7
ZCREDCKA EQU   ZCRENTER+7
ZCREDCJ0 EQU   ZCRENTER+7
ZCREDCI0 EQU   ZCRENTER+7
ZCREDCH0 EQU   ZCRENTER+7
ZCREDCF0 EQU   ZCRENTER+7
ZCREDCE0 EQU   ZCRENTER+6
ZCREDCD0 EQU   ZCRENTER+6
ZCREDCC0 EQU   ZCRENTER+6
ZCREDCB0 EQU   ZCRENTER+6
ZCREDCA0 EQU   ZCRENTER+6
ZCRECC2B EQU   ZCRENTER+6
ZCRECC1B EQU   ZCRENTER+6
ZCRECC1A EQU   ZCRENTER+6
ZCRECC0B EQU   ZCRENTER+5
ZCRECC0A EQU   ZCRENTER+5
ZCREBC0B EQU   ZCRENTER+5
ZCREBC0A EQU   ZCRENTER+5
ZCREBCZ0 EQU   ZCRENTER+5
ZCREBCY0 EQU   ZCRENTER+5
ZCREBCX0 EQU   ZCRENTER+5
ZCREBCXA EQU   ZCRENTER+5
ZCREBCSC EQU   ZCRENTER+4
ZCREBCRB EQU   ZCRENTER+4
ZCREBCRA EQU   ZCRENTER+4
ZCREBCQB EQU   ZCRENTER+4
ZCREBCPB EQU   ZCRENTER+4
ZCREBCOB EQU   ZCRENTER+4
ZCREBCNE EQU   ZCRENTER+4
ZCREBCND EQU   ZCRENTER+4
ZCREBCMB EQU   ZCRENTER+3
ZCREBCLB EQU   ZCRENTER+3
ZCREBCLA EQU   ZCRENTER+3
ZCREBCKB EQU   ZCRENTER+3
ZCREBCKA EQU   ZCRENTER+3
ZCREBCJB EQU   ZCRENTER+3
ZCREBCJA EQU   ZCRENTER+3
ZCREBCID EQU   ZCRENTER+3
ZCREBCIB EQU   ZCRENTER+2
ZCREBCIA EQU   ZCRENTER+2
ZCREBCHB EQU   ZCRENTER+2
ZCREBCHA EQU   ZCRENTER+2
ZCREBCGB EQU   ZCRENTER+2
ZCREBCGA EQU   ZCRENTER+2
ZCREBCFB EQU   ZCRENTER+2
ZCREBCFA EQU   ZCRENTER+2
ZCREBCEB EQU   ZCRENTER+1
ZCREBCDI EQU   ZCRENTER+1
ZCREBCCB EQU   ZCRENTER+1
ZCREBCBI EQU   ZCRENTER+1
ZCREBCBB EQU   ZCRENTER+1
ZCREBCBA EQU   ZCRENTER+1
ZCREBCAM EQU   ZCRENTER+1
ZCREBCAI EQU   ZCRENTER+1
ZCREBCAG EQU   ZCRENTER
ZCREBCAE EQU   ZCRENTER
ZCREBCAB EQU   ZCRENTER
ZCREBCAA EQU   ZCRENTER
ZCREAC1B EQU   ZCRENTER
ZCREAC0B EQU   ZCRENTER
ZCREAC0A EQU   ZCRENTER
ZCREAC1A EQU   ZCRENTER
ZCRTNAME EQU   ZCRAUDIT+1
ZCRTID   EQU   ZCRAUDIT
ZCRREMIC EQU   ISTZCRR+436
ZCRSAVEZ EQU   ISTZCRR+196
ZCRDAFSV EQU   ZCRCIDSV+2
ZCRSAFSV EQU   ZCRCIDSV
ZCRR13SV EQU   ISTZCRR+188
ZCRR2SV  EQU   ISTZCRR+184
ZCROPCDE EQU   ISTZCRR+183
ZCRPRMTC EQU   ISTZCRR+182
ZCRRCDSV EQU   ISTZCRR+181
ZCRAWQSW EQU   ISTZCRR+180
ZCRTOPQ  EQU   ISTZCRR+180
ZCRLSTFB EQU   ISTZCRR+180
ZCRXSCHD EQU   ISTZCRR+180
ZCRNXTEL EQU   ISTZCRR+180
ZCRSCANQ EQU   ISTZCRR+180
ZCRMOREL EQU   ISTZCRR+180
ZCRFBPRC EQU   ISTZCRR+180
ZCRFSBSV EQU   ISTZCRR+176
ZCRSVWK5 EQU   ZCRWKARA+16
ZCRSVWK4 EQU   ZCRWKARA+12
ZCRSVWK3 EQU   ZCRWKARA+8
ZCRSVWK2 EQU   ZCRWKARA+4
ZCRSVWK1 EQU   ZCRWKARA
ZCRSVF25 EQU   ZCRSVRTN+96
ZCRSVF24 EQU   ZCRSVRTN+92
ZCRSVF23 EQU   ZCRSVRTN+88
ZCRSVF22 EQU   ZCRSVRTN+84
ZCRSVF21 EQU   ZCRSVRTN+80
ZCRSVF20 EQU   ZCRSVRTN+76
ZCRSVF19 EQU   ZCRSVRTN+72
ZCRSVF18 EQU   ZCRSVRTN+68
ZCRSVF17 EQU   ZCRSVRTN+64
ZCRSVF16 EQU   ZCRSVRTN+60
ZCRSVF15 EQU   ZCRSVRTN+56
ZCRSVF14 EQU   ZCRSVRTN+52
ZCRSVF13 EQU   ZCRSVRTN+48
ZCRSVF12 EQU   ZCRSVRTN+44
ZCRSVF11 EQU   ZCRSVRTN+40
ZCRSVF10 EQU   ZCRSVRTN+36
ZCRSVF9  EQU   ZCRSVRTN+32
ZCRSVF8  EQU   ZCRSVRTN+28
ZCRSVF7  EQU   ZCRSVRTN+24
ZCRSVF6  EQU   ZCRSVRTN+20
ZCRSVF5  EQU   ZCRSVRTN+16
ZCRSVF4  EQU   ZCRSVRTN+12
ZCRSVF3  EQU   ZCRSVRTN+8
ZCRSVF2  EQU   ZCRSVRTN+4
ZCRSVF1  EQU   ZCRSVRTN
ZCRPVZB  EQU   ISTZCRR+52
ZCRZLB   EQU   ISTZCRR+48
ZCRBFPTR EQU   ISTZCRR+44
ZCRCCWA  EQU   ISTZCRR+40
ZCRPSW   EQU   ZCRPARMS+15
ZCRPCHAR EQU   ZCRPARMS+14
ZCRPRES2 EQU   ZCRPCOD2
ZCRPMFGF EQU   ZCRPCOD2
ZCRPFHDR EQU   ZCRPCOD2
ZCRPPG2  EQU   ZCRPCOD2
ZCRPRES  EQU   ZCRPCOD1
ZCRPCFTX EQU   ZCRPCOD1
ZCRPBUF  EQU   ZCRPCOD1
ZCRPLSCB EQU   ZCRPCOD1
ZCRPLSBQ EQU   ZCRPLSBF
ZCRPFSB  EQU   ZCRPCOD1
ZCRPLNG  EQU   ZCRPCOD1
ZCRPPG   EQU   ZCRPCOD1
ZCRDTODA EQU   ZCRDFRDA
ZCRMLNG  EQU   ZCRPARMS+8
ZCRTBPTR EQU   ZCRPARMS+4
ZCRCBPTR EQU   ZCRFBPTR
ZCRCRLCP EQU   ISTZCRR+20
@NM00067 EQU   ZCRSCPSW
ZCRSKIPT EQU   ZCRSCPSW
ZCRFSBWE EQU   ZCRSCPSW
ZCRPRCMP EQU   ZCRSCPSW
ZCRLREQ  EQU   ZCRSCPSW
ZCRRJLCP EQU   ZCRSCPSW
ZCRTPINV EQU   ZCRSCPSW
ZCRTPEX  EQU   ZCRSCPSW
@NM00066 EQU   ZCRIBPR
ZCR3270R EQU   ZCRIBPR
ZCR3270  EQU   ZCRIBPR
ZCRLCPFD EQU   ZCRIBPR
ZCRLCPFR EQU   ZCRIBPR
ZCRRELK  EQU   ZCRIBPR
ZCRERR   EQU   ZCRIBPR
ZCRNOBUF EQU   ZCRIBPR
@NM00065 EQU   ZCRPFLGS
ZCRQAHED EQU   ZCRPFLGS
ZCRF1RES EQU   ZCRGENSW
ZCRBRIS  EQU   ZCRGENSW
ZCRCLRBD EQU   ZCRGENSW
ZCREXRES EQU   ZCRGENSW
ZCRLCSYN EQU   ZCRGENSW
ZCRRT06  EQU   ZCRGENSW
ZCRTSW2  EQU   ZCRGENSW
ZCRTSW1  EQU   ZCRGENSW
ZCRINLCP EQU   ZCRFLGS3
ZCRWRPTR EQU   ZCRFLGS3
ZCRNOFRE EQU   ZCRFLGS3
ZCREDRIV EQU   ZCRFLGS3
ZCRDISC  EQU   ZCRFLGS3
ZCRTPDIS EQU   ZCRFLGS3
ZCRTPCON EQU   ZCRFLGS3
ZCRTIC   EQU   ZCRFLGS3
ZCRCNLXL EQU   ZCRRESET
ZCRENDAN EQU   ZCRSWFLD
ZCRENDXL EQU   ZCRSWFLD
ZCRENDX  EQU   ZCRSWFLD
ZCROB1   EQU   ZCRNDLCP
ZCRENDPR EQU   ZCRSWFLD
ZCREXTYP EQU   ZCRSWFLD
ZCRSLCP  EQU   ZCRENDSH
ZCRIF0E3 EQU   ZCRFLGS2
ZCRIF0E2 EQU   ZCRFLGS2
ZCRIF0E1 EQU   ZCRFLGS2
ZCROB    EQU   ZCRFLGS2
ZCRFMSED EQU   ZCRFLGS2
ZCRSHEDI EQU   ZCRFLGS2
ZCRLOCAL EQU   ZCRFLGS2
ZCRFEXIT EQU   ZCRFLGS1
ZCRUNSOL EQU   ZCRFLGS1
ZCRENDLP EQU   ZCRFLGS1
ZCRNRMEX EQU   ZCRFLGS1
ZCRWAIT  EQU   ZCRFLGS1
ZCRDEQSW EQU   ZCRFLGS1
ZCRQUESW EQU   ZCRFLGS1
ZCREXSW  EQU   ZCRFLGS1
ZCRFRRA  EQU   ISTZCRR+8
ZCRCHAIN EQU   ISTZCRR+4
ZCRFLAG  EQU   ZCRCRR+3
ZCRLEN   EQU   ZCRCRR+1
ZCRID    EQU   ZCRCRR
CCFRSVD1 EQU   CFCCRT
CCFCR2   EQU   CFCCRT
CCFCR1   EQU   CFCCRT
CCFCS2   EQU   CFCCRT
CCFCS1   EQU   CFCCRT
NCFRSVD  EQU   CFCNTRD
NCFCR2   EQU   CFCNTRD
NCFCR1   EQU   CFCNTRD
NCFCS2   EQU   CFCNTRD
NCFCS1   EQU   CFCNTRD
PFCRSV01 EQU   ISTPFCRR+13
PFCFTA   EQU   ISTPFCRR+12
CRRFRR   EQU   PFCFRRO
CRRCHAIN EQU   PFCCRRO
CRRLEN   EQU   PFCCRRLN
PFCRSV10 EQU   PFCCRR+1
CRRID    EQU   PFCCRRID
ZSAZTRAC EQU   ISTZSAVE+36
ZSAZSVVR EQU   ISTZSAVE+12
ZSAZSVRR EQU   ISTZSAVE+8
ZSAZSVFC EQU   ISTZSAVE+4
ZSAZACTV EQU   ZSAZSVMS
LCPFTYPE EQU   LCPRPHA
LCPRSTQH EQU   LCPLCCW
LCPCLREP EQU   ISTLCPB+44
LCPUBFSB EQU   LCPFLCCW
LCPRSV77 EQU   ISTLCPB+39
LCPLCCWC EQU   ISTLCPB+38
LCPRSV78 EQU   LCPFLG1
LCPTRANS EQU   LCPFLG1
LCPSTLB  EQU   LCPFLG1
LCPREDRV EQU   LCPFLG1
LCPDIRPT EQU   LCPFLG1
LCPINTER EQU   LCPFLG1
LCPRESET EQU   LCPFLG1
LCPSTYPE EQU   ISTLCPB+36
LCPFSNCH EQU   ISTLCPB+34
LCPFOSN  EQU   ISTLCPB+32
LCPTLBAD EQU   ISTLCPB+28
LCPFDB2  EQU   LCPFDBA+1
LCPFDB1  EQU   LCPFDBA
LCPNXLCW EQU   ISTLCPB+20
LCPDAF   EQU   LCPCID+2
LCPSAF   EQU   LCPCID
LCPLCCW1 EQU   ISTLCPB+12
LCPRRCNT EQU   LCPSEQ+1
LCPRRCCT EQU   LCPSEQ
LCPATOP  EQU   LCPFLAG2
LCPFREE  EQU   LCPFLAG2
LCPDSTAT EQU   LCPFLAG2
LCPEXRES EQU   LCPFID0
LCPZRIMM EQU   LCPTLBPI
LCPRSTRT EQU   LCPFLAG2
LCPASYN  EQU   LCPFLAG2
LCPPRFLG EQU   LCPFLAG2
LCPZMIRC EQU   LCPRUCNT
LCPCHAI2 EQU   LCPCHAIN+1
LCPCHNG  EQU   LCPCHAI1
LCPZRT0B EQU   LCPMNRCD
LCPZRT0A EQU   LCPMNRCD
LCPZRTL9 EQU   LCPZRT09
LCPZRTL8 EQU   LCPZRT08
LCPZRTL7 EQU   LCPZRT07
LCPZRTL6 EQU   LCPZRT06
LCPZRTL5 EQU   LCPZRT05
LCPZRTL4 EQU   LCPZRT04
LCPZRTL3 EQU   LCPZRT03
LCPZRTL2 EQU   LCPZRT02
LCPZRT01 EQU   LCPFLAGS
LCPZRT00 EQU   LCPFLAGS
LCPLNGTH EQU   ISTLCPB+1
LCPTYPE  EQU   ISTLCPB
LCCWDATA EQU   ISTLCCW+4
LCCWCNT  EQU   ISTLCCW+2
LCCWACI  EQU   LCCWFLAG
LCCWRFI  EQU   LCCWFLAG
LCCWPER  EQU   LCCWLSI
LCCWIDAT EQU   LCCWFLAG
LCCWNTVC EQU   LCCWFLAG
LCCWCKPT EQU   LCCWFLAG
LCCWCC   EQU   LCCWFLAG
LCCWCD   EQU   LCCWFLAG
LCCWTYPE EQU   LCCWCTL
LCCWMODE EQU   LCCWCTL
LCCWSOP  EQU   LCCWRWOP
@NM00064 EQU   LCCWRWOP
LCCWSD   EQU   LCCWOP
LCCWSI   EQU   LCCWOP
POIPRIMQ EQU   POIPRANC+1
@NM00063 EQU   POIPRANC
POIPOCBQ EQU   POIANCR+1
@NM00062 EQU   POIANCR
POIRSVD  EQU   ISTPOIA+2
POILNGTH EQU   ISTPOIA+1
POICBID  EQU   ISTPOIA
ATCAOS   EQU   ISTATCVT+1584
ATCVIOPM EQU   ATCAOSM+636
ATCTPMMI EQU   ATCAOSM+632
ATCTPMPB EQU   ATCAOSM+600
ATCRSV88 EQU   ATCAOSM+596
ATCRPLCT EQU   ATCAOSM+594
ATCCRACT EQU   ATCAOSM+592
ATCSRBCT EQU   ATCAOSM+590
ATCRSV75 EQU   ATCAOSM+589
ATCRSV66 EQU   ATCZFLAG
ATCZF001 EQU   ATCZFLAG
ATCTPCP1 EQU   ATCAOSM+584
ATCTPCP0 EQU   ATCAOSM+580
ATCAICTN EQU   ATCAOSM+576
ATCZR01  EQU   ATCAOSM+572
ATCMPLTA EQU   ATCAOSM+568
ATCASCB  EQU   ATCAOSM+564
ATCAP86  EQU   ATCAOSM+560
ATCAP85  EQU   ATCAOSM+556
ATCAP84  EQU   ATCAOSM+552
ATCAP83  EQU   ATCAOSM+548
ATCAP82  EQU   ATCAOSM+544
ATCAP69  EQU   ATCAOSM+540
ATCAP66  EQU   ATCAOSM+536
ATCAP62  EQU   ATCAOSM+532
ATCAPC59 EQU   ATCAOSM+528
ATCAP56  EQU   ATCAOSM+524
ATCAP55  EQU   ATCAOSM+520
ATCRCFY0 EQU   ATCAOSM+516
ATCAP41  EQU   ATCAOSM+512
ATCAPC25 EQU   ATCAOSM+508
ATCAP23  EQU   ATCAOSM+504
ATCTPSPB EQU   ATCAOSM+472
ATCTRMPB EQU   ATCAOSM+440
ATCAPBE  EQU   ATCAOSM+436
ATCPSTA  EQU   ATCAOSM+432
ATCSMABF EQU   ATCAOSM+428
ATCSMAPR EQU   ATCAOSM+424
ATCTPWQA EQU   ATCAOSM+420
ATCSMAID EQU   ATCAOSM+416
ATCSMARA EQU   ATCAOSM+412
ATCCACXA EQU   ATCAOSM+408
ATCZLAAB EQU   ATCAOSM+404
ATCATA10 EQU   ATCAOSM+400
ATCHLTCB EQU   ATCAOSM+396
@NM00061 EQU   ATCVTFLG
ATCVTACT EQU   ATCVTFLG
ATCRPT40 EQU   ATCAOSM+388
ATCRPT39 EQU   ATCAOSM+384
ATCRPT38 EQU   ATCAOSM+380
ATCRPT37 EQU   ATCAOSM+376
ATCRPT36 EQU   ATCAOSM+372
ATCRPT35 EQU   ATCAOSM+368
ATCRPT34 EQU   ATCAOSM+364
ATCRPT33 EQU   ATCAOSM+360
ATCRPT32 EQU   ATCAOSM+356
ATCRPT31 EQU   ATCAOSM+352
ATCRPT30 EQU   ATCAOSM+348
ATCRPT29 EQU   ATCAOSM+344
ATCRPT28 EQU   ATCAOSM+340
ATCRPT27 EQU   ATCAOSM+336
@NM00060 EQU   ATCAOSM+333
@NM00059 EQU   @NM00058
ATCSNUF  EQU   @NM00058
ATCOPKL  EQU   @NM00058
ATCABEN  EQU   @NM00058
ATCAIWT  EQU   ATCAOSM+328
ATCINFDD EQU   ATCAOSM+324
ATCORFMG EQU   ATCAOSM+320
ATCORFRL EQU   ATCAOSM+316
ATCOROBT EQU   ATCAOSM+312
ATCORQG  EQU   ATCORSRB
ATCORTBF EQU   ATCSQAFR
ATCRPLAC EQU   ATCRPLCN+2
ATCRPLRC EQU   ATCRPLCN
ATCCRPLQ EQU   ATCCRPL
ATCSRBAC EQU   ATCSRBCN+2
ATCSRBRC EQU   ATCSRBCN
ATCSRBQ  EQU   ATCSRB
ATCCRAAC EQU   ATCCRACN+2
ATCCRARC EQU   ATCCRACN
ATCCRAQ  EQU   ATCCRA
ATCRPT12 EQU   ATCAOSM+276
ATCDMAPP EQU   ATCAOSM+272
ATCAP38  EQU   ATCAOSM+268
ATCZDFJ0 EQU   ATCAOSM+260
ATCAP51  EQU   ATCAOSM+256
ATCZPAB2 EQU   ATCAOSM+224
ATCZPAB1 EQU   ATCAOSM+192
ATCZLFVT EQU   ATCAOSM+188
ATCZLPVT EQU   ATCAOSM+184
ATCZDVTX EQU   ATCAOSM+180
ATCZDVTA EQU   ATCAOSM+176
ATCZDVT9 EQU   ATCAOSM+172
ATCZDVT8 EQU   ATCAOSM+168
ATCZDVT7 EQU   ATCAOSM+164
ATCRSV56 EQU   ATCDAPVT+22
ATCDAPDG EQU   ATCDAPVT+20
ATCDXCEA EQU   ATCDAPVT+16
ATCDCEA  EQU   ATCDAPVT+12
ATCDPCIA EQU   ATCDAPVT+8
ATCDSIOA EQU   ATCDAPVT+4
ATCDEOEA EQU   ATCDAPVT
ATCZLAEA EQU   ATCLDAPP+16
ATCZLCEA EQU   ATCLDAPP+12
ATCRSV17 EQU   ATCLDAPP+8
ATCSMFRR EQU   ATCLDAPP+4
ATCCDTID EQU   ATCLDAPP
ATCZAEA  EQU   ATCICAPP+16
ATCZCEA  EQU   ATCICAPP+12
ATCCDTCB EQU   ATCICAPP+8
ATCZSIOA EQU   ATCICAPP+4
ATCCDRPH EQU   ATCICAPP
ATCAP65  EQU   ATCAOSM+96
ATCZDVT6 EQU   ATCAOSM+92
ATCZDVT4 EQU   ATCAOSM+88
ATCZDVT3 EQU   ATCAOSM+84
ATCZDVT1 EQU   ATCAOSM+80
ATCICNCB EQU   ATCAOSM+76
ATCZPSVT EQU   ATCAOSM+72
ATCZFSVT EQU   ATCAOSM+68
ATCAP64  EQU   ATCAOSM+64
ATCAP63  EQU   ATCAOSM+60
ATCAP61  EQU   ATCAOSM+56
ATCAP58  EQU   ATCAOSM+52
ATCAP57  EQU   ATCAOSM+48
ATCAP54  EQU   ATCAOSM+44
ATCAP53  EQU   ATCAOSM+40
ATCAP52  EQU   ATCAOSM+36
ATCAP32  EQU   ATCAOSM+28
ATCAP31  EQU   ATCAOSM+24
ATCAP12  EQU   ATCAOSM+20
ATCAP11  EQU   ATCAOSM+16
ATCCMTCB EQU   ATCAOSM+12
ATCPRPH  EQU   ATCAOSM+8
ATCGSRBF EQU   ATCGSRBG
ATCSRBRT EQU   ATCAOSM
@NM00057 EQU   @NM00056
ATCVTMAB EQU   @NM00056
@NM00055 EQU   ATCVTBAM
ATCVDLOK EQU   ISTATCVT+904
ATCVFPAB EQU   ISTATCVT+872
ATCVDPAB EQU   ISTATCVT+840
ATCIOECB EQU   ISTATCVT+836
ATCINCW3 EQU   ISTATCVT+832
ATCMODTB EQU   ISTATCVT+828
ATCUSSPT EQU   ISTATCVT+824
ATCSRTAB EQU   ISTATCVT+820
@NM00054 EQU   ISTATCVT+819
@NM00053 EQU   ATCSTAT2
ATCTRSMS EQU   ATCSTAT2
ATCTRLOK EQU   ATCSTAT2
ATCTRPSS EQU   ATCSTAT2
ATCTRESC EQU   ATCSTAT2
ATCTRAPI EQU   ATCSTAT2
ATCNMCTR EQU   ISTATCVT+816
ATCSEC51 EQU   ATCSECST
ATCSEC40 EQU   ATCSIPD+8
ATCSEC30 EQU   ATCSIPD+4
ATCSEC21 EQU   ATCSIPD
ATCSEC10 EQU   ATCSOPD+4
ATCSEC01 EQU   ATCSOPD
@NM00052 EQU   ATCRNO
ATCPODVT EQU   ISTATCVT+784
ATCS49XL EQU   ISTATCVT+780
ATCS49XI EQU   ISTATCVT+776
ATCLCLCT EQU   ATCVLCNT+2
ATCRNCNT EQU   ATCVLCNT
ATCCFEAD EQU   ISTATCVT+768
ATCPTR00 EQU   ISTATCVT+736
ATCRSV10 EQU   ISTATCVT+704
ATCTACB  EQU   ISTATCVT+700
ATCVTINM EQU   ISTATCVT+696
ATCTCLIM EQU   ISTATCVT+692
ATCTCLOM EQU   ISTATCVT+688
ATCVTIPB EQU   ISTATCVT+656
ATCTCIPB EQU   ISTATCVT+624
ATCTIPAB EQU   ISTATCVT+592
ATCOCCCB EQU   ISTATCVT+588
ATCOCCOB EQU   ISTATCVT+584
ATCCDLAD EQU   ISTATCVT+580
ATCCCLAD EQU   ISTATCVT+576
ATCDLRPB EQU   ISTATCVT+544
ATCPGPAB EQU   ISTATCVT+512
ATCVPAB1 EQU   ISTATCVT+480
ATCRSV97 EQU   ISTATCVT+476
ATCVOCLK EQU   ISTATCVT+468
ATCCDFDN EQU   ISTATCVT+464
ATCCDFIN EQU   ISTATCVT+460
ATCDVTLK EQU   ISTATCVT+456
ATCRSV99 EQU   ISTATCVT+440
ATCONFIG EQU   ISTATCVT+432
ATCNODDS EQU   ISTATCVT+428
ATCNODEL EQU   ISTATCVT+420
ATCRSV69 EQU   ISTATCVT+416
ATCAPCR5 EQU   ISTATCVT+412
ATCLDECB EQU   ISTATCVT+408
ATCLDNCS EQU   ISTATCVT+404
ATCCDPTR EQU   ISTATCVT+400
ATCADEL  EQU   ISTATCVT+396
ATCTODVT EQU   ISTATCVT+392
ATCDEBCH EQU   ISTATCVT+388
ATCHBSIZ EQU   ATCHPGM+2
ATCHBFNO EQU   ATCHPGM
ATCCRME  EQU   ISTATCVT+380
ATCRVCHS EQU   ISTATCVT+372
ATCECTLP EQU   ISTATCVT+368
ATCZDVTB EQU   ISTATCVT+364
ATCECPRT EQU   ISTATCVT+360
ATCVTLOD EQU   ISTATCVT+356
ATCTRPAB EQU   ISTATCVT+352
ATCMSGM  EQU   ISTATCVT+348
ATCEPT   EQU   ISTATCVT+340
ATCDVT   EQU   ISTATCVT+336
ATCTRCPT EQU   ISTATCVT+332
ATCDVLOD EQU   ISTATCVT+328
ATCALERT EQU   ISTATCVT+324
ATCEPA   EQU   ISTATCVT+320
ATCSAF   EQU   ISTATCVT+318
ATCXRANG EQU   ISTATCVT+317
ATCLAST  EQU   ATCSHRFG
ATCSHRTN EQU   ISTATCVT+308
ATCUEP   EQU   ISTATCVT+304
ATCOCRT  EQU   ISTATCVT+300
ATCCSMA  EQU   ATCCSMR
ATCESC02 EQU   ISTATCVT+292
ATCESC01 EQU   ISTATCVT+288
ATCCDFND EQU   ISTATCVT+284
ATCCDDEL EQU   ISTATCVT+280
ATCCDADD EQU   ISTATCVT+276
ATCMNT   EQU   ISTATCVT+272
ATCRSV16 EQU   ISTATCVT+270
ATCMAXID EQU   ISTATCVT+269
ATCMSGSP EQU   ATCCOM+268
ATCCIDM  EQU   ATCCOM+266
ATCACTRM EQU   ATCCOM+264
ATCNERAP EQU   ATCCOM+260
ATCNESAL EQU   ATCCOM+256
ATCRCC65 EQU   ATCCOM+252
ATCRCC26 EQU   ATCCOM+248
ATCRCC63 EQU   ATCCOM+244
ATCRSV11 EQU   ATCCOM+242
ATCVTMID EQU   ATCCOM+240
ATCAPOST EQU   ATCCOM+236
ATCNERFN EQU   ATCCOM+232
ATCNERNE EQU   ATCCOM+228
ATCNERCV EQU   ATCCOM+224
ATCNERST EQU   ATCCOM+220
ATCDCC61 EQU   ATCCOM+216
ATCDCC60 EQU   ATCCOM+212
ATCSRTDF EQU   ATCCOM+208
ATCSRTAD EQU   ATCCOM+204
ATCFIRA  EQU   ATCCOM+200
ATCSMBQ  EQU   ATCCOM+196
ATCSMRC  EQU   ATCCOM+192
ATCSMRS  EQU   ATCCOM+188
ATCSMQU  EQU   ATCCOM+184
ATCSMRQ  EQU   ATCCOM+180
ATCACDA  EQU   ATCCOM+176
ATCSTMA  EQU   ATCCOM+172
ATCFRSTR EQU   ATCCOM+168
ATCGTSTR EQU   ATCCOM+164
ATCREADA EQU   ATCCOM+160
ATCALOAD EQU   ATCCOM+156
ATCBLDLA EQU   ATCCOM+152
ATCFBRPH EQU   ATCCOM+148
ATCBFTRC EQU   ATCCOM+144
ATCTPBUF EQU   ATCTHTRC
ATCREMOV EQU   ATCCOM+136
ATCADD   EQU   ATCCOM+132
ATCBPDA  EQU   ATCCOM+128
ATCDVTPT EQU   ATCCOM+124
ATCFEPT  EQU   ATCCOM+120
ATCFDVT  EQU   ATCCOM+116
ATCCONFT EQU   ATCCOM+112
ATCPTCHA EQU   ATCCOM+108
ATCAUTHA EQU   ATCCOM+104
ATCACCTA EQU   ATCCOM+100
ATCRDTH  EQU   ATCCOM+96
ATCFRSCH EQU   ATCCOM+92
ATCFSB   EQU   ATCCOM+88
ATCHLTMS EQU   ATCCOM+84
ATCECPRM EQU   ATCCOM+80
ATCECNET EQU   ATCCOM+76
ATCECOPC EQU   ATCCOM+72
ATCVPARM EQU   ATCCOM+68
ATCECVRQ EQU   ATCCOM+64
ATCECSES EQU   ATCCOM+60
ATCOCHA  EQU   ATCCOM+56
ATCDSPLQ EQU   ATCCOM+52
ATCECDSP EQU   ATCCOM+48
ATCVARYQ EQU   ATCCOM+44
ATCECVRY EQU   ATCCOM+40
ATCHALTQ EQU   ATCCOM+36
ATCECHLT EQU   ATCCOM+32
ATCMODQ  EQU   ATCCOM+28
ATCECMOD EQU   ATCCOM+24
ATCASCHD EQU   ATCCOM+20
ATCSRT   EQU   ATCCOM+16
ATCRDT   EQU   ATCCOM+12
ATCDCFRR EQU   ATCCOM+8
ATCAPI   EQU   ATCCOM+4
ATCRSV04 EQU   ATCSTAT4
ATCVTTRC EQU   ATCSTAT4
ATCNCSD  EQU   ATCSTAT4
ATCMTST  EQU   ATCSTAT4
ATCTPRT  EQU   ATCSTAT4
ATCPRTAT EQU   ATCSTAT4
@NM00051 EQU   ATCPOFLG
ATCPOUNS EQU   ATCPOFLG
ATCHSDMF EQU   ATCSTFLG
@NM00050 EQU   ATCSTAT1
ATCMDHLT EQU   ATCSTAT1
ATCINHLT EQU   ATCSTAT1
ATCNETSL EQU   ATCSTAT1
ATCQKHLT EQU   ATCSTAT1
ATCSNHLT EQU   ATCSTAT1
ATCACTIV EQU   ATCSTAT1
ATCSTART EQU   ATCSTAT1
RPHNEXPO EQU   ISTRPH+104
RPHSAV16 EQU   RPHWORK+60
RPHSAV15 EQU   RPHWORK+56
RPHSAV14 EQU   RPHWORK+52
RPHSAV13 EQU   RPHWORK+48
RPHSAV12 EQU   RPHWORK+44
RPHSAV11 EQU   RPHWORK+40
RPHSAV10 EQU   RPHWORK+36
RPHSAVE9 EQU   RPHWORK+32
RPHSAVE8 EQU   RPHWORK+28
RPHSAVE7 EQU   RPHWORK+24
RPHSAVE6 EQU   RPHWORK+20
RPHSAVE5 EQU   RPHWORK+16
RPHSAVE4 EQU   RPHWORK+12
RPHSAVE3 EQU   RPHWORK+8
RPHSAVE2 EQU   RPHWORK+4
RPHSHALF EQU   RPHSAVE1+2
RPHSBIT8 EQU   RPHSBITS
RPHSBIT7 EQU   RPHSBITS
RPHSBIT6 EQU   RPHSBITS
RPHSBIT5 EQU   RPHSBITS
RPHSBIT4 EQU   RPHSBITS
RPHSBIT3 EQU   RPHSBITS
RPHSBIT2 EQU   RPHSBITS
RPHSBIT1 EQU   RPHSBITS
RPHSBYTE EQU   RPHSAVE1
RPHPABQP EQU   RPHPABQA+1
RPHPABFG EQU   RPHPABQA
RPHSRP34 EQU   RPHSRPRM+2
RPHSRP12 EQU   RPHSRPRM
RPHWEGT  EQU   RPHCSPA
RPHMAJCB EQU   ISTRPH+21
RPHPABOF EQU   ISTRPH+20
RPHRESUM EQU   RPHRESMA+1
RPHRSV01 EQU   RPHWPFLG
RPHPURGE EQU   RPHWPFLG
RPHPT    EQU   RPHWPFLG
RPHWT    EQU   RPHWPFLG
RPHRSKEY EQU   RPHWPFLG
RPHDVTA  EQU   ISTRPH+12
RPHTIK   EQU   RPHTSKID+3
@NM00049 EQU   RPHTSKID
RPHRPHAP EQU   RPHRPHA+1
@NM00048 EQU   RPHRPHA
RPHGATE  EQU   RPHRPHA
@NM00047 EQU   RPHFLGB
RPHRLCRA EQU   RPHFLGB
RPHNRSAV EQU   RPHFLGB
RPHPGCMP EQU   RPHFLGB
RPHFBAPS EQU   RPHFLGB
RPHBSSP  EQU   RPHFLGB
RPHLOCK  EQU   RPHFLGB
RPHFNFLG EQU   RPHFSTLC
RPHMLTCP EQU   RPHFLAGS
RPHSMCLR EQU   RPHFLAGS
RPHSMTYP EQU   RPHFLAGS
RPHSMQ   EQU   RPHFLAGS
RPHAUTEX EQU   RPHAPTYP
RPHSPGIN EQU   RPHFLAGS
RPHOGIND EQU   RPHFLAGS
RPHLNGTH EQU   RPHCNTL+1
RPHTYPE  EQU   RPHCNTL
DYPRSV01 EQU   ISTDYPAB+12
DYPTSKID EQU   ISTDYPAB+8
DYPCHAIN EQU   ISTDYPAB+4
DYPFLGS  EQU   ISTDYPAB+2
DYPLNGTH EQU   ISTDYPAB+1
DYPTYPE  EQU   ISTDYPAB
LOKXCL   EQU   @NM00045
LOKPRY   EQU   @NM00045
@NM00046 EQU   @NM00045
@NM00044 EQU   LOKCHNG
LOKCT    EQU   ISTLOK
PABRPHA  EQU   PABRPHFG+1
PABNODQ  EQU   PABFLAGS
PABINHBT EQU   PABFLAGS
PABERLOK EQU   PABERRLK
PABSSN   EQU   PABFLAGS
PABDYNAM EQU   PABFLAGS
PABNORPR EQU   PABFLAGS
PABPRIOR EQU   PABFLAGS
PABAPYP  EQU   PABFLAGS
PABDVTA  EQU   ISTPAB+9
PABOFFST EQU   ISTPAB+8
PABCHNGP EQU   PABCHAIN+1
PABRSV02 EQU   PABCHAIN
PABDELAY EQU   PABCHAIN
PABRUNNG EQU   PABCHAIN
PABRESET EQU   PABCHAIN
PABUNCON EQU   PABCHAIN
PABCDP   EQU   PABCHAIN
PABRESCH EQU   PABCHAIN
PABCHNG  EQU   PABCHAIN
PABWEQP  EQU   PABWEQA+1
PABRSV01 EQU   PABWEQA
PABWEQG  EQU   PABWEQA
@NM00043 EQU   ISTPOPWA+138
POPDEB   EQU   POPTPOPT+5
POPHDR   EQU   POPTPOPT+1
POPSTAT  EQU   POPTPOPT
@NM00042 EQU   ISTPOPWA
OCWEND   EQU   ISTOCW+848
@NM00041 EQU   OCWFLG1
OCWEXIT  EQU   OCWFLG1
OCWSENSE EQU   ISTOCW+843
OCWBNDSZ EQU   ISTOCW+841
OCWBINDD EQU   OCWBIND+37
OCWBINDA EQU   OCWBIND+1
OCWBINDC EQU   OCWBIND
OCWSHPLC EQU   OCWSHPL+8
OCWSHPLB EQU   OCWSHPL+4
OCWSHPLA EQU   OCWSHPL
OCWBNDRU EQU   ISTOCW+780
OCWELCP  EQU   ISTOCW+776
OCWRSV12 EQU   ISTOCW+772
OCWRSV11 EQU   ISTOCW+768
OCWODOA  EQU   ISTOCW+764
OCWSCHIO EQU   OCWIOCNT
OCWPROCD EQU   ISTOCW+756
OCWCCRPH EQU   ISTOCW+752
OCWPABCT EQU   ISTOCW+748
OCWDAF   EQU   OCWCID+2
OCWSAF   EQU   OCWCID
OCWNMLLN EQU   ISTOCW+742
OCWRSV0A EQU   ISTOCW+741
OCWRSV82 EQU   OCWLOCKS
OCWMLOCK EQU   OCWLOCKS
OCWALOCK EQU   OCWLOCKS
OCWDLOCK EQU   OCWLOCKS
OCWCLOCK EQU   OCWLOCKS
OCWELOCK EQU   OCWLOCKS
OCWRLOCK EQU   OCWLOCKS
OCWVLOCK EQU   OCWLOCKS
OCWACE   EQU   ISTOCW+736
OCWIOMIN EQU   ISTOCW+735
OCWIOMAJ EQU   ISTOCW+734
OCWBHSID EQU   ISTOCW+733
OCWRSV03 EQU   ISTOCW+732
OCWSWTE7 EQU   OCWSWTE
OCWSWTE6 EQU   OCWSWTE
OCWSWTE5 EQU   OCWSWTE
OCWSWTE4 EQU   OCWSWTE
OCWSWTE3 EQU   OCWSWTE
OCWSWTE2 EQU   OCWSWTE
OCWLCPBC EQU   OCWSWTE
OCWSKEL  EQU   OCWSWTE
OCWSWTR7 EQU   OCWSWTRD
OCWSWTR6 EQU   OCWSWTRD
OCWSWTR5 EQU   OCWSWTRD
OCWDPDVT EQU   OCWSWTRD
OCWEPTLP EQU   OCWSWTRD
OCWCPARE EQU   OCWSWTRD
OCWCLEN  EQU   OCWSWTRD
OCWSRDVT EQU   OCWSWTRD
OCWCLCD2 EQU   ISTOCW+728
OCWCLCD1 EQU   ISTOCW+726
OCWLALEN EQU   ISTOCW+724
OCWSDVTA EQU   ISTOCW+720
OCWOENIB EQU   ISTOCW+716
OCWSORTP EQU   ISTOCW+712
OCWMDVT  EQU   ISTOCW+708
OCWSDVT  EQU   ISTOCW+704
OCWPREV  EQU   ISTOCW+700
OCWLCPBA EQU   ISTOCW+696
OCWR14SV EQU   ISTOCW+624
OCWSAVE5 EQU   ISTOCW+552
OCWSAVE4 EQU   ISTOCW+480
OCWSAVE3 EQU   ISTOCW+408
OCWSAVE1 EQU   ISTOCW+264
OCWCSPL  EQU   ISTOCW+224
OCWRSVD  EQU   ISTOCW+212
OCWVPAB  EQU   ISTOCW+208
OCWSWTD7 EQU   OCWSWTD
OCWSWTD6 EQU   OCWSWTD
OCWSWTD5 EQU   OCWSWTD
OCWSWTD4 EQU   OCWSWTD
OCWPGDON EQU   OCWSWTD
OCWSTCTL EQU   OCWSWTD
OCWNPOST EQU   OCWSWTD
OCWCLDEB EQU   OCWSWTD
OCWVARY  EQU   OCWSWTC
OCWPRMTR EQU   OCWSWTC
OCWPBH   EQU   OCWSWTC
OCWRBH   EQU   OCWSWTC
OCWCKACE EQU   OCWSWTC
OCWODCLS EQU   OCWSWTC
OCWSWTC1 EQU   OCWSWTC
OCWSPCLS EQU   OCWSWTC
OCWCSCAL EQU   OCWSWTB
OCWPSREQ EQU   OCWSWTB
OCWOLOCK EQU   OCWSWTB
OCWCOREQ EQU   OCWSWTB
OCWDOPHY EQU   OCWSWTB
OCWCLOOP EQU   OCWSWTB
OCWRECL  EQU   OCWSWTB
OCWGOFUN EQU   OCWSWTB
OCWNODLT EQU   OCWSWTA
OCWODCL  EQU   OCWSWTA
OCWGODST EQU   OCWSWTA
OCWSORT  EQU   OCWSWTA
OCWGOCNT EQU   OCWSWTA
OCWNOCON EQU   OCWSWTA
OCWSRT   EQU   OCWSWTA
OCWGTLST EQU   OCWSWTA
OCWDNIB  EQU   ISTOCW+112
OCWBADNO EQU   ISTOCW+110
OCWDSTNO EQU   ISTOCW+108
OCWODCT2 EQU   ISTOCW+106
OCWODCT1 EQU   ISTOCW+104
OCWRSV02 EQU   ISTOCW+100
OCWRSV01 EQU   ISTOCW+96
OCWSVEC  EQU   OCWSVCOD+1
OCWSVRC  EQU   OCWSVCOD
OCWEC    EQU   OCWODRC+1
OCWRC    EQU   OCWODRC
OCWODFST EQU   ISTOCW+88
OCWODNAS EQU   ISTOCW+84
OCWODLST EQU   ISTOCW+80
OCWLPOST EQU   ISTOCW+76
OCWCPOST EQU   ISTOCW+72
OCWFPOST EQU   ISTOCW+68
OCWACDEB EQU   ISTOCW+64
OCWNCB   EQU   ISTOCW+60
OCWFMCB  EQU   ISTOCW+56
OCWEPTAB EQU   ISTOCW+52
OCWARDTE EQU   ISTOCW+48
OCWNIB   EQU   ISTOCW+44
OCWDRHOB EQU   OCWDRDTE
OCWCSL   EQU   ISTOCW+28
OCWPAB   EQU   ISTOCW+20
OCWCHAIN EQU   ISTOCW+8
OCWPBCHN EQU   ISTOCW+4
OCWTLEN  EQU   ISTOCW+2
OCWSLEN  EQU   ISTOCW+1
OCWID    EQU   ISTOCW
CSPUNUSD EQU   CSPRSC2B+4
CSPUECBA EQU   CSPRSC2B
CSPTRDTE EQU   ISTCSP+28
CSPRLRPH EQU   ISTCSP+24
CSPNO    EQU   ISTCSP+22
CSPCC    EQU   ISTCSP+20
CSPDATA  EQU   ISTCSP+16
CSPRSCE  EQU   ISTCSP+12
CSPDEST  EQU   ISTCSP+8
CSPSRC   EQU   ISTCSP+4
@NM00040 EQU   CSPOPT2
CSPRSC2F EQU   CSPOPT2
CSPWASQD EQU   CSPOPT2
CSPACQS  EQU   CSPOPT2
CSPACES  EQU   CSPOPT2
CSPNOREL EQU   CSPOPT2
CSPCOREQ EQU   CSPOPT2
CSPSTAP  EQU   CSPOPT2
@NM00039 EQU   CSPOPT1
CSPANY   EQU   CSPOPT1
CSPACT   EQU   CSPOPT1
CSPSESS  EQU   CSPOPT1
CSPPND   EQU   CSPOPT1
CSPLOGI  EQU   CSPOPT1
CSPQ     EQU   CSPOPT1
CSPRSC   EQU   CSPOPT1
CSPIDX   EQU   ISTCSP
NIBRESV  EQU   ISTNIB+60
NIBNDAR  EQU   ISTNIB+56
NIBLMODE EQU   ISTNIB+48
NIBEXLST EQU   ISTNIB+44
NIBLIMIT EQU   ISTNIB+42
@NM00038 EQU   ISTNIB+41
@NM00037 EQU   NIBFLG1
@NM00036 EQU   NIBFLG1
@NM00035 EQU   NIBFLG1
@NM00034 EQU   NIBFLG1
NIBSHLTP EQU   NIBFLG1
NIBSDAPP EQU   NIBFLG1
NIBCON   EQU   NIBFLG1
NIBLAST  EQU   NIBFLG1
NIBPROCD EQU   ISTNIB+36
NIBDEVCH EQU   ISTNIB+28
NIBMODE  EQU   ISTNIB+20
NIBSYM   EQU   ISTNIB+12
NIBUSER  EQU   ISTNIB+8
NIBCID   EQU   ISTNIB+4
NIBLEN   EQU   ISTNIB+3
NIBCONDN EQU   ISTNIB+2
NIBRSV01 EQU   ISTNIB+1
NIBID    EQU   ISTNIB
CSLDATAF EQU   CSLDATA
CSLNIBF  EQU   CSLNIB
CSLRDTEF EQU   CSLRDTE
BINUSE   EQU   ISTBIND+36
BINUSEL  EQU   ISTBIND+35
BINPRIM  EQU   ISTBIND+27
BINPRIML EQU   ISTBIND+26
BINRSV05 EQU   ISTBIND+25
BINLUTYP EQU   BINLUP
BINRSV27 EQU   BINLUP
BINRSV08 EQU   BINTSU+4
BINPRUSE EQU   BINPRUSZ
BINPRUSM EQU   BINPRUSZ
BINSRUSE EQU   BINSRUSZ
BINSRUSM EQU   BINSRUSZ
BINRPACM EQU   BINRPACE
BINRSV07 EQU   BINRPACE
BINRSV06 EQU   BINTSU
BINCONR  EQU   BINCMNP2
BINRCHN  EQU   BINCMNP2
BINMDIBK EQU   BINCMNP2
BINBKFS  EQU   BINCMNP2
BINRCVR  EQU   BINCMNP2
BINFMTRM EQU   BINCMNP2
BINRSV04 EQU   BINCMNP
BINALT   EQU   BINCMNP
BINBKTR  EQU   BINCMNP
BINBRAK  EQU   BINCMNP
BINFMHD  EQU   BINCMNP
BINRSV03 EQU   BINCMNP
BINSSEB  EQU   BINSECP
BINSCMP  EQU   BINSECP
BINRSV02 EQU   BINSECP
BINSCHNR EQU   BINSECP
BINSMCH  EQU   BINSECP
BINSCHN  EQU   BINSECP
BINPSEB  EQU   BINPRIP
BINPCMP  EQU   BINPRIP
BINRSV01 EQU   BINPRIP
BINPCHNR EQU   BINPRIP
BINPMCH  EQU   BINPRIP
BINPCHN  EQU   BINPRIP
BINTS    EQU   ISTBIND+2
BINFM    EQU   ISTBIND+1
BINTYPE  EQU   BINFMTY
BINFMT   EQU   BINFMTY
DEVRSV03 EQU   ISTDEVCH+5
DEVPHYSA EQU   ISTDEVCH+4
DEVCSLPN EQU   DEVCHAR3
DEVCSTCL EQU   DEVCHAR3
DEVCCHEK EQU   DEVCHAR3
DEVCATTN EQU   DEVCHAR3
DEVCSWL  EQU   DEVFCCTL
DEVCRVB  EQU   DEVFCCTL
DEVCSSL  EQU   DEVFCCTL
DEVCBSC  EQU   DEVFCCTL
DEVMCODE EQU   ISTDEVCH+2
DEVCHAR2 EQU   DEVTCODE
DEVRSV01 EQU   DEVCHAR
DEVCCTL  EQU   DEVCHAR
DEVNNSPT EQU   DEVCHAR
DEVSPS   EQU   DEVCHAR
DEVSUBND EQU   DEVCHAR
DEVCONVR EQU   DEVCHAR
DEVOTPUT EQU   DEVCHAR
DEVINPUT EQU   DEVCHAR
PROSRDEF EQU   PROSETM4
PRORSV47 EQU   PROSETM4
PROSCON  EQU   PROSETM4
PRORSV46 EQU   PROSETM3
PROSMONT EQU   PROSETM3
PRORSV45 EQU   PROSETM3
PROSNTO  EQU   PROSETM3
PRORSV44 EQU   PROSETM3
PRORSV43 EQU   PROSETM2
PROSNTFL EQU   PROSETM2
PRORSV42 EQU   PROSETM2
PRORSV41 EQU   PROPROCS
PROMODC  EQU   PROPROC4
PROMODT  EQU   PROPROC4
PROMODM  EQU   PROPROC4
PROMODB  EQU   PROPROC4
PRORSV14 EQU   PROPROC4
PRORSV13 EQU   PROPROC4
PRORSV12 EQU   PROPROC4
PROEIB   EQU   PROPROC4
PROMONT3 EQU   PROPROC3
PROMONT2 EQU   PROPROC3
PROMONIT EQU   PROPROC3
PROSUBLK EQU   PROPROC3
PRONTO   EQU   PROPROC3
PROLGIN  EQU   PROPROC3
PROERPI  EQU   PROPROC3
PRORSV07 EQU   PROPROC3
PROCFTX  EQU   PROPROC2
PROEMLC  EQU   PROPROC2
PRONTFL  EQU   PROPROC2
PRORSV05 EQU   PROPROC2
PRORSV04 EQU   PROPROC2
PROLGOT  EQU   PROPROC2
PROERPO  EQU   PROPROC2
PRORSV03 EQU   PROPROC2
PRORPLC  EQU   PROPROC1
PROCS    EQU   PROPROC1
PROCA    EQU   PROPROC1
PRORESPX EQU   PROPROC1
PRODFASY EQU   PROPROC1
PROXPOPT EQU   PROPROC1
PROTRUNC EQU   PROPROC1
PROASYIP EQU   PROPROC1
RPLSEQNO EQU   RPLOF60+6
@NM00028 EQU   RPLIBSQ
RPLIINV  EQU   RPLIBSQ
RPLINEG  EQU   RPLIBSQ
RPLIPOS  EQU   RPLIBSQ
RPLIIGN  EQU   RPLIBSQ
RPLIRSET EQU   RPLIBSQ
RPLITST  EQU   RPLIBSQ
RPLISET  EQU   RPLIBSQ
@NM00027 EQU   RPLOBSQ
RPLOINV  EQU   RPLOBSQ
RPLONEG  EQU   RPLOBSQ
RPLOPOS  EQU   RPLOBSQ
RPLOIGN  EQU   RPLOBSQ
RPLORSET EQU   RPLOBSQ
RPLOTST  EQU   RPLOBSQ
RPLOSET  EQU   RPLOBSQ
RPLIBSQV EQU   RPLOF60+2
RPLOBSQV EQU   RPLOF60
@NM00026 EQU   RPLCNTSC
RPLRSHUT EQU   RPLCNTSC
RPLRQR   EQU   RPLCNTSC
RPLSHUTC EQU   RPLCNTSC
RPLSHUTD EQU   RPLCNTSC
RPLSTSN  EQU   RPLCNTSC
RPLCLEAR EQU   RPLCNTSC
RPLSDT   EQU   RPLCNTSC
@NM00025 EQU   RPLCNTDC
RPLSIGNL EQU   RPLCNTDC
RPLLUS   EQU   RPLCNTDC
RPLRTR   EQU   RPLCNTDC
RPLBID   EQU   RPLCNTDC
@NM00024 EQU   RPLCNTDF
RPLQI    EQU   RPLCNTDF
RPLRELQ  EQU   RPLCNTDF
RPLCHASE EQU   RPLCNTDF
RPLQEC   EQU   RPLCNTDF
RPLQC    EQU   RPLCNTDF
RPLCNCEL EQU   RPLCNTDF
RPLDATA  EQU   RPLCNTDF
RPLRRN   EQU   RPLRESP
RPLNFME  EQU   RPLRESP
RPLEX    EQU   RPLRESP
@NM00023 EQU   RPLRESP
@NM00022 EQU   RPLPOSTV
RPLSCHED EQU   RPLPOSTV
@NM00021 EQU   RPLVTFL1
RPLAUTUS EQU   RPLVTFL1
RPLVTUSE EQU   RPLVTFL1
@NM00020 EQU   RPLVTFL1
@NM00019 EQU   RPLCHN
RPLONLY  EQU   RPLCHN
RPLLAST  EQU   RPLCHN
RPLMIDLE EQU   RPLCHN
RPLFIRST EQU   RPLCHN
@NM00018 EQU   RPLRTYPE
RPLDFASY EQU   RPLRTYPE
RPLNFSYN EQU   RPLRTYPE
RPLRRESP EQU   RPLRTYPE
@NM00017 EQU   RPLSTYPE
RPLSRESP EQU   RPLSTYPE
@NM00016 EQU   RPLRH3
RPLCSI   EQU   RPLRH3
RPLCHREQ EQU   RPLRH3
RPLCMD   EQU   RPLRH3
RPLEB    EQU   RPLRH3
RPLBB    EQU   RPLRH3
RPLSIGDA EQU   RPLVTEXT+32
RPLSAV13 EQU   RPLVTEXT+28
RPLUSNSO EQU   RPLOSENS+2
RPLSSMO  EQU   RPLSSNSO+1
@NM00015 EQU   RPLSSEO
RPLRRO   EQU   RPLSSEO
RPLFIO   EQU   RPLSSEO
RPLSTATO EQU   RPLSSEO
RPLCPMO  EQU   RPLSSEO
@NM00014 EQU   RPLSSEO
RPLFMHDR EQU   RPLOPT12
@NM00013 EQU   RPLOPT12
@NM00012 EQU   RPLOPT12
@NM00011 EQU   RPLOPT12
RPLNIBTK EQU   RPLOPT12
RPLTRUNC EQU   RPLOPT12
RPLKEEP  EQU   RPLOPT12
@NM00010 EQU   RPLOPT12
RPLRSVE8 EQU   RPLOPT11
RPLRSVE7 EQU   RPLOPT11
RPLRSVE6 EQU   RPLOPT11
RPLRSVE5 EQU   RPLOPT11
RPLRSVE4 EQU   RPLOPT11
RPLSTOP  EQU   RPLOPT11
RPLSTART EQU   RPLOPT11
RPLQUIES EQU   RPLOPT11
RPLRSVI6 EQU   RPLOPT10
RPLRSVI5 EQU   RPLOPT10
RPLRSVI4 EQU   RPLOPT10
RPLRSVI3 EQU   RPLOPT10
RPLRSVI2 EQU   RPLOPT10
RPLSPARM EQU   RPLOPT10
RPLDSPLY EQU   RPLOPT10
RPLBSCID EQU   RPLOPT10
RPLTOPL  EQU   RPLOPT9
RPLCIDE  EQU   RPLOPT9
RPLRNNM  EQU   RPLOPT9
RPLAPPST EQU   RPLOPT9
RPLCOUNT EQU   RPLOPT9
RPLTERMS EQU   RPLOPT9
RPLDEVCH EQU   RPLOPT9
RPLLOGON EQU   RPLOPT9
RPLUSFLD EQU   RPLVTEXT+16
RPLESR2  EQU   RPLUSNSI+1
RPLESR1  EQU   RPLUSNSI
RPLSSMI  EQU   RPLDSB2
@NM00009 EQU   RPLSSEI
RPLRRI   EQU   RPLSSEI
RPLFII   EQU   RPLSSEI
RPLSTATI EQU   RPLSSEI
RPLCPMI  EQU   RPLSSEI
RPLPATHI EQU   RPLSSEI
RPLARCLN EQU   RPLVTEXT+8
RPLAARLN EQU   RPLVTEXT+4
RPLAAREA EQU   RPLVTEXT
RPLERMSA EQU   RPLCOMN+72
RPLEMLEN EQU   RPLCOMN+70
RPLACTIV EQU   RPLCOMN+69
RPLBRANC EQU   RPLEXTD1
RPLNIB   EQU   RPLEXTD1
@NM00008 EQU   RPLEXTD1
RPLEXIT  EQU   RPLEXTD1
RPLNEXIT EQU   RPLEXTD1
RPLEXSCH EQU   RPLEXTD1
RPLDDDD  EQU   RPLRBAR+4
@NM00007 EQU   RPLRBAR+3
@NM00006 EQU   RPLAIXID
RPLAXPKP EQU   RPLAIXID
RPLAIXPC EQU   RPLRBAR
RPLRSV88 EQU   RPLOPT8
RPLUNCON EQU   RPLOPT8
RPLACTV  EQU   RPLOPT8
RPLSESS  EQU   RPLOPT8
RPLPEND  EQU   RPLOPT8
RPLODPRM EQU   RPLOPT8
RPLODACP EQU   RPLOPT8
RPLODACQ EQU   RPLOPT8
RPLRSV78 EQU   RPLOPT7
RPLTCRNO EQU   RPLOPT7
RPLRLSOP EQU   RPLOPT7
RPLTPOST EQU   RPLOPT7
RPLQOPT  EQU   RPLOPT7
RPLCNIMM EQU   RPLCNOPT
RPLCNANY EQU   RPLCNOPT
RPLCNALL EQU   RPLCNOPT
RPLRSV68 EQU   RPLOPT6
RPLRSV67 EQU   RPLOPT6
RPLLOCK  EQU   RPLOPT6
RPLNCOND EQU   RPLOPT6
RPLCOND  EQU   RPLOPT6
RPLEOT   EQU   RPLUNTYP
RPLEOM   EQU   RPLUNTYP
RPLEOB   EQU   RPLUNTYP
RPLWROPT EQU   RPLOPT5
RPLNODE  EQU   RPLOPT5
RPLERACE EQU   RPLWRTYP
RPLEAU   EQU   RPLWRTYP
RPLNERAS EQU   RPLWRTYP
RPLPSOPT EQU   RPLOPT5
@NM00005 EQU   RPLOPT5
RPLDLGIN EQU   RPLOPT5
RPLBUFL  EQU   RPLCOMN+52
RPLCHAIN EQU   RPLNXTRP
RPLBOP   EQU   RPLOPT4
@NM00004 EQU   RPLOPT4
RPLMKFRM EQU   RPLOPT4
RPLENDTR EQU   RPLOPT4
RPLALIGN EQU   RPLOPT3
RPLFMT   EQU   RPLOPT3
RPLFLD   EQU   RPLOPT3
RPLVFY   EQU   RPLOPT3
RPLBLK   EQU   RPLOPT3
RPLSFORM EQU   RPLOPT3
RPLEODS  EQU   RPLOPT3
RPLNSP   EQU   RPLOPT2
RPLUPD   EQU   RPLOPT2
@NM00003 EQU   RPLOPT2
RPLLRD   EQU   RPLOPT2
RPLBWD   EQU   RPLOPT2
RPLCNV   EQU   RPLOPT2
RPLADD   EQU   RPLADR
RPLKEY   EQU   RPLOPT2
RPLECBIN EQU   RPLECBSW
RPLGEN   EQU   RPLOPT1
RPLKGE   EQU   RPLOPT1
RPLASY   EQU   RPLOPT1
RPLSKP   EQU   RPLOPT1
RPLSEQ   EQU   RPLOPT1
RPLDIR   EQU   RPLOPT1
RPLLOC   EQU   RPLOPT1
RPLDAF   EQU   RPLARG+2
RPLSAF   EQU   RPLARG
RPLAREA  EQU   RPLCOMN+32
RPLTCBPT EQU   RPLCOMN+28
RPLDACB  EQU   RPLCOMN+24
RPLCCHAR EQU   RPLCOMN+20
RPLSTRID EQU   RPLCOMN+18
RPLKEYL  EQU   RPLKEYLE
RPLRDSOH EQU   RPLFDB3
RPLRLG   EQU   RPLFDB3
RPLLGFRC EQU   RPLFDB3
RPLREOT  EQU   RPLFDB3
RPLREOM  EQU   RPLFDB3
RPLREOB  EQU   RPLFDB3
RPLSV32  EQU   RPLFDB3
RPLUINPT EQU   RPLFDB3
RPLSTSAV EQU   RPLFDB2
RPLCUERR EQU   RPLFDB2
RPLDLGFL EQU   RPLFDB2
RPLIOERR EQU   RPLFDB2
RPLDVUNS EQU   RPLFDB2
RPLATND  EQU   RPLFDB2
RPLRVID  EQU   RPLFDB2
RPLERLK  EQU   RPLFDB2
RPLERREG EQU   RPLRTNCD
RPLSTAT  EQU   RPLFDBWD
RPLPOST  EQU   RPLECB
RPLWAIT  EQU   RPLECB
RPLPLHPT EQU   RPLCOMN+4
RPLLEN2  EQU   RPLLEN
RPLREQ   EQU   RPLIDWD+2
RPLSTYP  EQU   RPLIDWD+1
RPLID    EQU   RPLIDWD
CVTLEVL  EQU   CVTRELNO+2
CVTNUMB  EQU   CVTRELNO
CVTMDL   EQU   CVTFIX+250
@NM00002 EQU   CVTFIX+248
@NM00001 EQU   CVTFIX
CVTRV482 EQU   CVTXTNT2+128
CVTRV481 EQU   CVTXTNT2+124
CVTRV480 EQU   CVTXTNT2+120
CVTRV479 EQU   CVTXTNT2+118
CVTRV478 EQU   CVTXTNT2+117
CVTRV477 EQU   CVTXTNT2+116
CVTRV476 EQU   CVTXTNT2+115
CVTRV475 EQU   CVTXTNT2+114
CVTRV474 EQU   CVTRV466
CVTRV473 EQU   CVTRV466
CVTRV472 EQU   CVTRV466
CVTRV471 EQU   CVTRV466
CVTRV470 EQU   CVTRV466
CVTRV469 EQU   CVTRV466
CVTRV468 EQU   CVTRV466
CVTRV467 EQU   CVTRV466
CVTRV465 EQU   CVTRV457
CVTRV464 EQU   CVTRV457
CVTRV463 EQU   CVTRV457
CVTRV462 EQU   CVTRV457
CVTRV461 EQU   CVTRV457
CVTRV460 EQU   CVTRV457
CVTRV459 EQU   CVTRV457
CVTRV458 EQU   CVTRV457
CVTRV456 EQU   CVTXTNT2+108
CVTRV455 EQU   CVTXTNT2+104
CVTRV454 EQU   CVTXTNT2+100
CVTRV453 EQU   CVTXTNT2+96
CVTRV452 EQU   CVTXTNT2+94
CVTRV451 EQU   CVTXTNT2+92
CVTRV450 EQU   CVTXTNT2+90
CVTRV449 EQU   CVTXTNT2+88
CVTRV448 EQU   CVTXTNT2+87
CVTRV447 EQU   CVTXTNT2+86
CVTRV446 EQU   CVTRV438
CVTRV445 EQU   CVTRV438
CVTRV444 EQU   CVTRV438
CVTRV443 EQU   CVTRV438
CVTRV442 EQU   CVTRV438
CVTRV441 EQU   CVTRV438
CVTRV440 EQU   CVTRV438
CVTRV439 EQU   CVTRV438
CVTRV437 EQU   CVTRV429
CVTRV436 EQU   CVTRV429
CVTRV435 EQU   CVTRV429
CVTRV434 EQU   CVTRV429
CVTRV433 EQU   CVTRV429
CVTRV432 EQU   CVTRV429
CVTRV431 EQU   CVTRV429
CVTRV430 EQU   CVTRV429
CVTRV428 EQU   CVTXTNT2+80
CVTRV427 EQU   CVTXTNT2+76
CVTRV426 EQU   CVTXTNT2+72
CVTRV425 EQU   CVTXTNT2+68
CVTATACT EQU   CVTATCVT
CVTRV423 EQU   CVTXTNT2+62
CVTRV422 EQU   CVTXTNT2+60
CVTRV421 EQU   CVTXTNT2+58
CVTRV420 EQU   CVTXTNT2+56
CVTRV419 EQU   CVTXTNT2+55
CVTRV418 EQU   CVTXTNT2+54
CVTRV417 EQU   CVTRV409
CVTRV416 EQU   CVTRV409
CVTRV415 EQU   CVTRV409
CVTRV414 EQU   CVTRV409
CVTRV413 EQU   CVTRV409
CVTRV412 EQU   CVTRV409
CVTRV411 EQU   CVTRV409
CVTRV410 EQU   CVTRV409
CVTRV408 EQU   CVTRV400
CVTRV407 EQU   CVTRV400
CVTRV406 EQU   CVTRV400
CVTRV405 EQU   CVTRV400
CVTRV404 EQU   CVTRV400
CVTRV403 EQU   CVTRV400
CVTRV402 EQU   CVTRV400
CVTRV401 EQU   CVTRV400
CVTICB   EQU   CVTXTNT2+48
CVTSKTA  EQU   CVTXTNT2+44
CVTSHSB  EQU   CVTSHS
CVTRSV98 EQU   CVTXTNT2+36
CVTRSV97 EQU   CVTXTNT2+34
CVTRSV96 EQU   CVTXTNT2+32
CVTOLTEP EQU   CVTXTNT2+28
CVTQIDA  EQU   CVTQID+1
CVTRSV95 EQU   CVTQID
CVTRSV94 EQU   CVTXTNT2+20
CVTRSV93 EQU   CVTXTNT2+16
CVTRSV92 EQU   CVTXTNT2+12
CVTDEBVR EQU   CVTXTNT2+8
CVTRSV91 EQU   CVTXTNT2+6
CVTRSV9H EQU   CVTFLGBT
CVTRSV9G EQU   CVTFLGBT
CVTRSV9F EQU   CVTFLGBT
CVTRSV9E EQU   CVTFLGBT
CVTRSV9D EQU   CVTFLGBT
CVTRSV9C EQU   CVTFLGBT
CVTVME   EQU   CVTFLGBT
CVTNPE   EQU   CVTFLGBT
CVTNUCLS EQU   CVTXTNT2+4
CVTDSSVA EQU   CVTDSSV+1
CVTRSV89 EQU   CVTDSSV
CVTRSV88 EQU   CVTXTNT1+8
CVTRSV87 EQU   CVTXTNT1+4
CVTFACHN EQU   CVTXTNT1
CVTRV488 EQU   CVTMAP+412
CVTRV487 EQU   CVTMAP+408
CVTRV486 EQU   CVTMAP+404
CVTRV485 EQU   CVTMAP+400
CVTACTAP EQU   CVTMAP+396
CVTAUTH  EQU   CVTMAP+392
CVTATMCA EQU   CVTATMCT+1
CVTATMST EQU   CVTATMCT
CVTRSV61 EQU   CVTMAP+384
CVTVOLT1 EQU   CVTVOLM1+1
CVTVOLI1 EQU   CVTVOLF1
CVTSTOA  EQU   CVTMAP+376
CVTRSV58 EQU   CVTMAP+374
CVTRSV57 EQU   CVTMAP+372
CVTDDCE  EQU   CVTMAP+368
CVTPNWFR EQU   CVTMAP+364
CVTSMF   EQU   CVTMAP+360
CVTSULK  EQU   CVTMAP+358
CVTSLKO  EQU   CVTSYSK
CVTSLKP  EQU   CVTSYSK
CVTSLKQ  EQU   CVTSYSK
CVTSLKR  EQU   CVTSYSK
CVTRSV56 EQU   CVTSYSK
CVTRSV55 EQU   CVTSYSK
CVTRSV54 EQU   CVTSYSK
CVTRSV53 EQU   CVTSYSK
CVTRSV52 EQU   CVTA1F1
CVTRSV51 EQU   CVTA1F1
CVTRSV50 EQU   CVTA1F1
CVTRSV49 EQU   CVTA1F1
CVTRSV48 EQU   CVTA1F1
CVTRSV47 EQU   CVTA1F1
CVTSRSW  EQU   CVTA1F1
CVTPFSW  EQU   CVTA1F1
CVTPCVT  EQU   CVTMAP+352
CVTRSV46 EQU   CVTMAP+344
CVTRSV45 EQU   CVTMAP+340
CVTRSV44 EQU   CVTMAP+338
CVTRSV43 EQU   CVTMAP+336
CVTHJESA EQU   CVTHJES+1
CVTRSV42 EQU   CVTHJES
CVTEXT2A EQU   CVTEXT2+1
CVTRSV41 EQU   CVTEXT2
CVTAPFA  EQU   CVTAPF+1
CVTRSV40 EQU   CVTAPF
CVTRV518 EQU   CVTINTLA
CVTRV517 EQU   CVTERPV
CVTEORM  EQU   CVTMAP+312
CVTMCHPR EQU   CVTMAP+308
CVTTZ    EQU   CVTMAP+304
CVTJEPS  EQU   CVTMAP+300
CVTJESCT EQU   CVTMAP+296
CVTMODE  EQU   CVTMAP+292
CVTPTRV  EQU   CVTMAP+288
CVTREAL  EQU   CVTMAP+284
CVTRSV39 EQU   CVTMAP+280
CVTRSV38 EQU   CVTMAP+276
CVTDMSRA EQU   CVTDMSR+1
CVTRV634 EQU   CVTDMSRF
CVTRV633 EQU   CVTDMSRF
CVTRV632 EQU   CVTDMSRF
CVTRV631 EQU   CVTDMSRF
CVTRV630 EQU   CVTDMSRF
CVTRV629 EQU   CVTDMSRF
CVTUDUMP EQU   CVTDMSRF
CVTSDUMP EQU   CVTDMSRF
CVTQMSGA EQU   CVTQMSG+1
CVTRSV36 EQU   CVTQMSG
CVTAMFF  EQU   CVTMAP+264
CVTPURGA EQU   CVTPURG+1
CVTRSV35 EQU   CVTPURG
CVTCBSP  EQU   CVTMAP+256
CVTATERA EQU   CVTATER+1
CVTSYST  EQU   CVTATER
CVTVOLT2 EQU   CVTTAT
CVTVOLI2 EQU   CVTVOLF2
CVTAQAVB EQU   CVTAQAVT+1
CVTRSV34 EQU   CVTTCMFG
CVTRSV33 EQU   CVTTCMFG
CVTRSV32 EQU   CVTTCMFG
CVTRSV31 EQU   CVTTCMFG
CVTRSV30 EQU   CVTTCMFG
CVTRSV29 EQU   CVTTCMFG
CVTRSV28 EQU   CVTTCMFG
CVTTCRDY EQU   CVTTCMFG
CVTGTFA  EQU   CVTGTF+1
CVTRSV27 EQU   CVTGTFST
CVTRNIO  EQU   CVTGTFST
CVTUSR   EQU   CVTGTFST
CVTRV318 EQU   CVTFORM
CVTRV317 EQU   CVTTMODE
CVTRV316 EQU   CVTSTATE
CVTRV315 EQU   CVTGTFS
CVTGTFAV EQU   CVTGTFS
CVT0SCR1 EQU   CVTMAP+232
CVTRV515 EQU   CVTMAP+228
CVTRMS   EQU   CVTMAP+224
CVTPATCH EQU   CVTMAP+220
CVTTSCE  EQU   CVTMAP+216
CVTLNKSC EQU   CVTMAP+214
CVTQABST EQU   CVTMAP+212
CVTMDLDS EQU   CVTMAP+208
CVTUSER  EQU   CVTMAP+204
CVTABEND EQU   CVTMAP+200
CVTSMCA  EQU   CVTMAP+196
CVTRSV18 EQU   CVTMAP+192
CVTQLPAQ EQU   CVTMAP+188
CVTQCDSR EQU   CVTMAP+184
CVTRSV17 EQU   CVTOPTB
CVTRSV16 EQU   CVTOPTB
CVTFP    EQU   CVTOPTB
CVTAPTHR EQU   CVTOPTB
CVTNLOG  EQU   CVTOPTB
CVTTOD   EQU   CVTOPTB
CVTCTIMS EQU   CVTOPTB
CVTPROT  EQU   CVTOPTB
CVTXPFP  EQU   CVTOPTA
CVTASCII EQU   CVTOPTA
CVTRSV13 EQU   CVTOPTA
CVTRSV12 EQU   CVTOPTA
CVTNIP   EQU   CVTOPTA
CVTDDR   EQU   CVTOPTA
CVTAPR   EQU   CVTOPTA
CVTCCH   EQU   CVTOPTA
CVTSNCTR EQU   CVTMAP+180
CVTQMWR  EQU   CVTMAP+176
CVTQOCR  EQU   CVTMAP+172
CVT1EF00 EQU   CVTMAP+168
CVTMZ00  EQU   CVTMAP+164
CVTHEAD  EQU   CVTMAP+160
CVTRSV11 EQU   CVTMAP+156
CVT0PT01 EQU   CVTMAP+152
CVTMSER  EQU   CVTMAP+148
CVTRV516 EQU   CVTIERLC
CVTILCH  EQU   CVTMAP+140
CVT0DS   EQU   CVTMAP+136
CVTFBOSV EQU   CVTMAP+132
CVTNUCB  EQU   CVTMAP+128
CVTIXAVL EQU   CVTMAP+124
CVTIOQET EQU   CVTMAP+120
CVTDCBA  EQU   CVTMAP+117
CVTMVS2  EQU   CVTDCB
CVT6DAT  EQU   CVTDCB
CVT4MPS  EQU   CVTDCB
CVTRSV09 EQU   CVTDCB
CVT4MS1  EQU   CVTDCB
CVT2SPS  EQU   CVTDCB
CVT1SSS  EQU   CVTDCB
CVTRSV08 EQU   CVTDCB
CVTSTB   EQU   CVTMAP+112
CVTQTD00 EQU   CVTMAP+108
CVTQTE00 EQU   CVTMAP+104
CVTCUCB  EQU   CVTMAP+100
CVTSJQ   EQU   CVTMAP+96
CVTPBLDL EQU   CVTMAP+92
CVTTPC   EQU   CVTMAP+88
CVTSVDCB EQU   CVTMAP+84
CVTBRET  EQU   CVTMAP+82
CVTEXIT  EQU   CVTMAP+80
CVT0FN00 EQU   CVTMAP+76
CVTDARA  EQU   CVTDAR+1
CVTRSV07 EQU   CVTFLGS1
CVTRSV06 EQU   CVTFLGS1
CVTRSV05 EQU   CVTFLGS1
CVTRSV04 EQU   CVTFLGS1
CVTRSV03 EQU   CVTFLGS1
CVTRSV02 EQU   CVTFLGS1
CVTRSV01 EQU   CVTFLGS1
CVTDMPLK EQU   CVTFLGS1
CVTXITP  EQU   CVTMAP+68
CVTZDTAB EQU   CVTMAP+64
CVTMSLT  EQU   CVTMAP+60
CVTDATE  EQU   CVTMAP+56
CVTBTERM EQU   CVTMAP+52
CVTSYSAD EQU   CVTMAP+48
CVTXTLER EQU   CVTMAP+44
CVTILK2  EQU   CVTMAP+40
CVTILK1  EQU   CVTMAP+36
CVTPRLTV EQU   CVTMAP+32
CVTPCNVT EQU   CVTMAP+28
CVT0VL00 EQU   CVTMAP+24
CVTXAPG  EQU   CVTMAP+20
CVTBUF   EQU   CVTMAP+16
CVTJOB   EQU   CVTMAP+12
CVTLINK  EQU   CVTMAP+8
CVT0EF00 EQU   CVTMAP+4
CVTTCBP  EQU   CVTMAP
CVT      EQU   CVTMAP
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RC00203 EQU   @RC00199
@PB00003 EQU   @PB00004
@PB00002 EQU   @PB00003
@RC00304 EQU   @PB00002
@RC00156 EQU   @PB00002
@RC00188 EQU   @RC00156
@RC00306 EQU   @RC00304
@ENDDATA EQU   *
         END   ISTCFCRP,(C'PLS1909',0603,77221)
