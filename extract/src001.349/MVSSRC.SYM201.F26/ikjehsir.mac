STAE     TITLE 'IKJEHSIR- STAE INTERFACE/EXIT ROUTINE FOR UTILITIES'
*
*        RELEASE VS2-3.0 SU
*
*0000048000-049000,059500-059700                                ZA03681
*0000064000-064600,120000                                       ZA03681
*0000123500-123800                                              ZA03681
*0000415000,498000,675500                                       ZA03681
*
IKJEHSIR CSECT
         SPACE 1
         ENTRY IKJEBSIR       ENTRY POINT AND ALIAS
         SPACE 1
*STATUS: CHANGE LEVEL 00
*
*FUNCTION/OPERATION:
*
*        THIS IS THE COMMON STAE ROUTINE FOR THE TSO UTILITY
*        COMMAND PROCESSORS (CP'S).
*               IT RECEIVES CONTROL VIA SYNCH FROM THE
*        ABEND STAE INTERFACE ROUTINE (ASIR) WHENEVER A
*        CP ABENDS AND THAT CP HAS ISSUED A STAE NAMING
*        THIS MODULE (IKJEHSIR) AS ITS STAE EXIT.
*
*        DETERMINATION IS FIRST MADE TO SEE IF THE CP
*        WANTS TO HANDLE THE ABEND.  IF SO, A CHECK IS MADE
*        TO SEE IF THE CP WANTS IKJEHSIR TO ISSUE A MESSAGE
*        TO THE USER AT THE TERMINAL.  IF YES, AN ATTEMPT IS
*        MADE TO GET CORE FOR A WORK AREA SO THAT THE USER
*        AT THE TERMINAL CAN BE NOTIFIED THAT THE CP HAS
*        ABENDED.  IF CORE IS GOTTEN, AN INFORMATIONAL
*        MESSAGE, CONTAINING THE CP'S NAME AND THE ABEND CODE,
*        IS PUT OUT TO THE USER AT THE TERMINAL.
*
*        IF THE CP DOES NOT WANT TO HANDLE THE ABEND, THE
*        ABEND CODE IS PLACED IN THE ENVIRONMENT CONTROL TABLE
*        (ECT) (QV) FOR THE TERMINAL MONITOR PROGRAM (TMP).
*
*        IF THE ABEND CODE IS 33E, NO MESSAGE IS ISSUED, FOR THIS
*        MEANS THE USER HIT THE ATTENTION KEY TO STOP THE
*        CP'S PROCESSING.
*
*        IF THE CP IS GOING TO HANDLE THE ABEND, THE CP'S
*        RETRY ROUTINE ADDRESS IS RETURNED TO ASIR.  IF THE
*        ABEND CODE IS 33E, A DIRECT CALL TO THE RETRY ADDRESS
*        IS MADE AS A RETRY ROUTINE CANNOT BE SCHEDULED
*        DURING A DETATCH.
         EJECT
*ENTRY POINTS:
*
*        IKJEHSIR- ONLY ENTRY POINT, FROM ASIR
*        IKJEBSIR- EQUIVALENT TO IKJEHSIR
*
*INPUT:
*
*        R0    A CODE 12 IF NO SDWA.
*              A CODE 0,4,8,16 IF SDWA AQUIRED.
*
*        R1    ADDRESS OF SDWA IF ACQUIRED OR
*              ABEND COMP CODE IF NO SDWA.
*
*        R2    IF R0 = 0, 4 , 8, 16, UNPREDICTABLE
*
*              IF R0 = 12, ADDRESS OF EXIT PARAMETER LIST
*
*        R14   RETURN ADDRESS
*
*        R15   ADDRESS OF STAE EXIT ROUTINE
*OUTPUT:
*        NORMAL (IE, RETRY):
*                  A MESSAGE TO THE USER AT THE TERMINAL
*              R0  THE ADDRESS OF THE RETRY ROUTINE
*              R1  ADDRESS OF SDWA IF ACQUIRED OR
*                  ABEND COMPLETION CODE OF NO SDWA
*              R14 RETURN ADDRESS
*              R15 A 4 INDICATING RETRY
*
*        ABNORMAL (IE, NO RETRY):
*              R15 A 0 INDICATING NO RETRY
*
*EXTERNAL ROUTINES:
*
*              PUTLINE-  TO PUT A MESSAGE
*              GETMAIN-  TO GET WORK AREA
*              FREEMAIN- TO FREE WORK AREA
         EJECT
*EXIT:
*
*        NORMAL:
*              NORMAL EXIT IS BR R14 TO ASIR
*
*        ABNORMAL:
*              ABNORMAL EXIT IS BR R14 TO ASIR
*
*        NOTE:  ON A 33E ABEND (DETACH), A BALR R14,R15 IS MADE
*               TO THE CP'S RETRY ROUTINE.
*
*TABLES/WORKAREAS:
*
*        ECT-      ENVIRONMENT CONTROL TABLE
*        STAEWORK- WORK AREA SUPPLIED BY ASIR
*        RETRY-    PSEUDO RETRY ADDRESS SUPPLIED BY CP
*        PARAM-    LIST OF ABEND CODES AND RETRY ADDRESSES
*                  SUPPLIED BY CP
*        IKJUWORK- WORK AREA GOTTEN VIA GETMAIN
*
*ATTRIBUTES:
*
*        REENTRANT, READ-ONLY
*
         EJECT
         YREGS
*                             LENGTH EQUATES
         SPACE 1
L0       EQU   0              LENGTH OF ZERO
L1       EQU   1              LENGTH OF ONE
L2       EQU   2              LENGTH OF TWO
L3       EQU   3              LENGTH OF THREE
L4       EQU   4              LENGTH OF FOUR
L5       EQU   5              LENGTH OF FIVE
L6       EQU   6              LENGTH OF SIX
L8       EQU   8              LENGTH OF EIGHT
L12      EQU   12             LENGTH OF TWELVE
L20      EQU   20             LENGTH OF TWENTY
L256     EQU   256            LENGTH OF TWO FIFTY-SIX
         EJECT
IKJEBSIR LR    R6,R14 SAVE RETURN REG                           ZA03681
         SPACE 1
         LR    R12,R15        SET UP
         USING IKJEHSIR,R12   BASE REG
         B     BRARID         BRANCH AROUND ID                  ZA03681
         DC    C'IKJEHSIR'    MODULE ID                         ZA03681
         DC    X'5100'        DATE - APRIL 10, 1975             ZA03681
BRARID   EQU   *                                                ZA03681
         SPACE 1
*        SINCE THE RETRY ROUTINE NEEDS THE ASIR ENTRY CODE,
*        WE HAVE TO SAVE THIS CODE FOR THE RETRY ROUTINE.
         SPACE 1
         LR    R3,R0          SAVE ASIR ENTRY CODE
         C     R0,F12         IS THERE A WORK AREA
         BE    ROUTE2         BR ON NO
         SPACE 1
         USING STAEWORK,R1    STAE WORK AREA BASE REG
         SPACE 1
*        THE FIRST WORD OF THE ASIR WORK AREA IS THE POINTER
*        PASSED BY THE CP IN THE PARAM= PARAMETER OF THE STAE
*        MACRO.  THE SECOND WORD IS THE ABEND CODE AS IT
*        WOULD APPEAR IN THE TCBCMP FIELD OF THE TCB.
         SPACE 1
         L     R2,STAEEXIT    GET EXIT PARM PTR
         L     R7,STAECODE    GET ABEND CODE
         SPACE 1
*        SINCE WE DID HAVE A WORK AREA, WE DON'T WANT TO
*        CHANGE R7, SO WE BRANCH AROUND THE LOADING OF R7.
         SPACE 1
         B     ROUTE2A        BYPASS FOLLOWING
         SPACE 1
         DROP  R1             DROP STAEWORK REG
         EJECT
*        IF THERE IS NO ASIR WORK AREA, R1 COMES IN WITH THE
*        COMPLETION CODE, WE WILL NEED IT, SO WE SAVE IT.
         SPACE 1
ROUTE2   LR    R7,R1          PUT COMP CODE IN R7
         SPACE 1
*        R2 IS POINTING AT THE PARAMETER PASSED BY THE CP.
*        IT IS SETUP ABOVE, OR IT COMES IN SETUP BY ASIR
*        WHEN NO WORK AREA IS AVAILABLE, SO SET A BASE REG.
         SPACE 1
         USING STAEPARM,R2    PARM BASE REG
         SPACE 1
*        NOW WE SET R4 TO THE PSEUDO RETRY ADDRESS PASSED BY
*        THE CP, AND SET IT UP AS A DSECT BASE.
         SPACE 1
ROUTE2A  L     R4,RETRYER     GET PSEUDO RETRY ADDR
         SPACE 1
         USING RETRY,R4       RETRY BASE REG
         SPACE 1
*        NOW WE SET R5 TO THE LIST OF ABEND CODES PASSED BY
*        THE CP, AND SET IT UP AS A DSECT BASE.
         SPACE 1
         L     R5,TBLADDR     GET LIST ADDRESS
         SPACE 1
         USING PARAM,R5       LIST BASE REG
         SPACE 1
*        NOW WE FIND OUT IF THE CP WANTS TO HANDLE ABENDS OR
*        NOT.  THE FIRST BYTE OF THE STAEPARM IS A FLAG
*        TELLING US THIS. THE DEFAULT IS YES.
         SPACE 1
***********************************************************************
*        NOTE:  IF A DUMP OF A CP IS WANTED, TURN STAETMP BIT ON.     *
*               THIS WILL BYPASS STAE PROCESSING BY THE CP AND        *
*               BY IKJEHSIR.                                          *
***********************************************************************
         EJECT
*        CHECK FOR PARAMETERS BEING PROPER; IE, FILLED IN, TO AVOID
*        UNPLESANT ABENDS IN IKJEHSIR ITSELF.
         SPACE 1
         LA    R5,L0(R5)      CLEAR THE TOP BYTE
         LTR   R5,R5          ANYTHING THERE
         BZ    GOOFUP         NO, LET THE TMP HAVE IT
         SPACE 1
         L     R8,TMPREG1     GET TMP REG ONE
         LA    R8,L0(R8)      CLEAR TOP BYTE
         LTR   R8,R8          ANYTHING THERE
         BZ    GOOFUP         NO, LET TMP HAVE IT
         SPACE 1
         LA    R4,L0(R4)      CLEAR TOP BYTE
         LTR   R4,R4          ANYTHING THERE
         BZ    GOOFUP         NO, LET TMP HAVE IT
         SPACE 1
         TM    STAEFLAG,STAETMP+STAEUSER  EITHER SET
         BZ    GOOFUP         NO, LET TMP HAVE IT
         SPACE 1
         TM    STAEFLAG,STAETMP TMP TO HANDLE ABENDS
         BO    LETTMP         BR ON YES
         SPACE 1
*        WE DON'T NEED THE POINTER TO THE STAEPARM ANY MORE.
         SPACE 1
         DROP  R2             STAEPARM BASE REG
         EJECT
*        NOW THAT WE KNOW THE CP WANTS TO HANDLE SOME ABENDS,
*        LET'S FIND OUT WHAT KIND OF ABEND CODE IT WAS; IE,
*        SYSTEM OR USER.
         SPACE 1
*        FIRST WE COPY THE CODE SO WE CAN PLAY WITH IT.
         SPACE 1
         LA    R8,L0(R7)      COPY ABEND CODE, AND CLEAR TOP BYTE
         SPACE 1
*        NOW WE MOVE THE USER PORTION TO R9.
         SPACE 1
         SRDL  R8,L12         USER PORTION TO R9
         SPACE 1
*        THE FIRST THING WE CHECK FOR IS A SYSTEM ABEND,
*        IF THERE IS ONE, IT OVERRIDES ANY USER ABEND.
         SPACE 1
         LTR   R8,R8          SYSTEM ABEND CODE
         BNZ   SYSTEM         BR ON YES
         SPACE 1
*        IF NOT A SYSTEM ABEND CODE, CHECK FOR A USER ABEND
*        CODE.  IF IT IS A USER ABEND CODE OF ZERO, IT WILL
*        BE DISALLOWED AND TREATED AS IF THE CP SAID TO LET
*        THE TMP HANDLE IT.
         SPACE 1
         SRL   R9,L20         INTO LAST 3 NIBBLES
         LTR   R9,R9          USER ABEND CODE
         BZ    GOOFUP         BR ON NO
         EJECT
*        NOW WE FIND OUT IF THE CP WANTS TO HANDLE USER ABENDS.
*        IF WE FIND HE WANTS TO HANDLE IT, WE GO AND SET UP
*        FOR HIS RETRY ROUTINE, OTHERWISE, WE GIVE THE ABEND
*        TO THE TMP.
         SPACE 1
USER     TM    PARMFLAG,FLAGUSER IS THIS A USER ENTRY
         BZ    USER01            BR ON NO
         SPACE 1
*        NOW WE FIND OUT IF IT IS A LIST OF CODES OR ONLY ONE
         SPACE 1
         TM    PARMFLAG,FLAGONE ONE CODE ENTRY
         BZ    USER02           BR ON NO
         SPACE 1
*        ITS A ONE CODE ENTRY; THEREFORE, THE CODE IS IN THE
*        SECOND HALFWORD OF THE STAEPARM CONTROL BLOCK.  SEE
*        IF IT MATCHES THE ABEND CODE WE HAVE IN R9.
         SPACE 1
         CH    R9,PARMCODE    IS THIS THE CODE
         BNE   USER01         BR ON NO
         SPACE 1
*        THE CP WANTS TO HANDLE THIS USER ABEND, SO GET HIS
*        RETRY ROUTINE ADDRESS FROM THE LIST.
         SPACE 1
         B     CLEARR2        SET UP FOR RETRY ROUTINE
         EJECT
*        THIS ENTRY WASN'T THE ONE WE WERE LOOKING FOR, SO
*        SET UP FOR THE NEXT, BUT FIRST SEE IF THE END OF
*        THE LIST HAS BEEN REACHED.
         SPACE 1
USER01   TM    PARMFLAG,FLAGEND+FLAGUSER IS IT END OF LIST
         BO    LETTMP                    YES, LET TMP HANDLE IT
         SPACE 1
         LA    R5,PARMLNTH(R5) POINT AT NEXT ENTRY
         B     USER            EXAMINE IT
         SPACE 1
*        IT WAS NOT FOR ONE CODE, SEE IF IT IS FOR A LIST.
         SPACE 1
USER02   TM    PARMFLAG,FLAGMUL LIST POINTER
         BZ    USER03           BR ON NO
         SPACE 1
*        POINT AT THE LIST OF CODES SO WE CAN CHECK THEM
         SPACE 1
         L     R11,PARMADDR   LIST POINTER
         SPACE 1
         USING PARMLIST,R11   LIST BASE REG
         SPACE 1
*        CLEAR THE REG WE WILL USE TO COUNT ENTRIES IN CODE LIST
         SPACE 1
         XR    R2,R2          CLEAR REG 2
         L     R15,EFFS2      F'S FOR CLEARING
         SPACE 1
*        LOOK AT EACH ENTRY IN THE LIST, AND SEE IF IT
*        MATCHES THE ABEND CODE WE HAVE IN R9
         SPACE 1
USER02A  LH    R14,CODES      GET AN ENTRY
         NR    R14,R15        CLEAR TOP OF REG
         CR    R9,R14         IS THIS THE RIGHT CODE
         BNE   USER02B        BR ON NO
         SPACE 1
*        HAVE THE RIGHT CODE, SO GET THE RETRY ROUTINE ADDRESS
         SPACE 1
         B     GETRETRY       SET UP FOR RETRY ROUTINE
         EJECT
*        THIS WASN'T THE RIGHT CODE, CHECK FOR THE END OF LIST
         SPACE 1
USER02B  TM    CODES,CODESEND END OF LIST
         BO    USER01         YES, CHECK NEXT ENTRY
         SPACE 1
         LA    R11,CODELNTH(R11) POINT AT NEXT CODE
         SPACE 1
*        UP THE COUNT OF CODES IN THE LIST BY FOUR.
         SPACE 1
         LA    R2,L4(R2)      UP COUNT BY ONE * FOUR
         B     USER02A        CHECK IT
         SPACE 1
*        THE ENTRY IS NOT FOR ONE OR A LIST, SEE IF IT IS
*        FOR ALL OTHER TYPES OF USER ABENDS
         SPACE 1
USER03   TM    PARMFLAG,FLAGALL IS IT FOR OTHERS
         BZ    USER01           BR ON NO
         SPACE 1
*        GET THE ADDRESS THAT WILL HANDLE ALL OTHER ABENDS
         SPACE 1
         B     CLEARR2        SET UP FOR RETRY ROUTINE
         EJECT
*        THIS SECTION EXAMINES THE PARAMETER LIST FOR SYSTEM
*        ABENDS THE CP WANTS TO HANDLE.  IF WE FIND THE CP
*        WANTS TO HANDLE IT, WE SET UP FOR RETRY, OTHERWISE
*        WE GIVE THE ABEND TO THE TMP.
         SPACE 1
SYSTEM   TM    PARMFLAG,FLAGUSER USER ABEND ENTRY
         BO    SYSTEM1A          BR ON YES
         SPACE 1
*        NOW FIND OUT IF IT IS A SINGLE ENTRY OR A LIST
         SPACE 1
         TM    PARMFLAG,FLAGONE ONE CODE ENTRY
         BZ    SYSTEM02         BR ON NO
         CH    R8,PARMCODE      RIGHT CODE
         BNE   SYSTEM01         BR ON NO
         SPACE 1
*        THE CP WANTS TO HANDLE THIS SYTEM ABEND CODE, SO
*        GET HIS RETRY ROUTINE ADDRESS
         SPACE 1
         B     CLEARR2        SETUP FOR RETRY ROUTINE
         SPACE 1
*        THIS ENTRY WASN'T FOR THIS CODE, SO SET UP FOR
*        NEXT ENTRY AFTER CHECKING FOR END OF THE LIST
         SPACE 1
SYSTEM01 TM    PARMFLAG,FLAGEND END OF LIST
         BO    LETTMP           LET TMP HANDLE IT
         SPACE 1
*        WE CAME HERE IF A USER CODE WAS FOUND BY 'SYSTEM';
*        SINCE THERE IS NO SYSTEM FLAG, WE CANNOT CHECK FOR
*        ONE AT SYSTEM01.
         SPACE 1
SYSTEM1A LA    R5,PARMLNTH(R5) POINT AT NEXT ENTRY
         B     SYSTEM          CHECK NEXT ENTRY
         SPACE 1
*        ENTRY WAS NOT FOR ONE CODE, SEE IF IT IS A LIST
         SPACE 1
SYSTEM02 TM    PARMFLAG,FLAGMUL LIST ENTRY
         BZ    SYSTEM03         BR ON NO
         SPACE 1
*        CLEAR THE REG WE WILL USE FOR COUNT OF CODES
         SPACE 1
         XR    R2,R2          CLEAR REG 2
         EJECT
*        POINT AT THE LIST OF CODES SO WE CAN EXAMINE THEM
*        THE USING FOR THE BASE REG IS SET IN 'USER'
         SPACE 1
         L     R11,PARMADDR   LIST POINTER
         L     R15,EFFS2      F'S FOR CLEARING
         SPACE 1
*        LOOK AT EACH ENTRY IN THE CODE LIST AND SEE IF IT
*        MATCHES THE SYSTEM CODE WE HAVE IN R8
         SPACE 1
SYSTEM2A LH    R14,CODES      GET CODE ENTRY
         NR    R14,R15        CLEAR TOP OF REG
         CR    R8,R14         IS THIS THE CODE
         BNE   SYSTEM2B       BR ON NO
         SPACE 1
*        WE HAVE THE RIGHT CODE, SO NOW GET THE RETRY ADDRESS
         SPACE 1
         B     GETRETRY       SET UP FOR RETRY ROUTINE
         SPACE 1
*        THIS WASN'T THE CODE WE HAVE, CHECK FOR END OF LIST
         SPACE 1
SYSTEM2B TM    CODES,CODESEND    END OF LIST
         BO    SYSTEM01          BR ON YES
         LA    R11,CODELNTH(R11) POINT AT NEXT CODE
         SPACE 1
*        UP THE COUNT OF CODES IN THE LIST BY FOUR.
         SPACE 1
         LA    R2,L4(R2)      UP COUNT BY ONE * FOUR
         B     SYSTEM2A       CHECK THIS ONE
         SPACE 1
*        ENTRY IS NOT FOR ONE CODE OR A LIST OF CODES,
*        SEE IF IT IS FOR ALL OTHER SYSTEM ABEND CODES.
         SPACE 1
SYSTEM03 TM    PARMFLAG,FLAGALL IS IT FOR ALL OTHERS
         BZ    SYSTEM01         BR ON NO
         SPACE 1
         B     CLEARR2        SET UP FOR RETRY ROUTINE
         SPACE 1
*        WE DON'T NEED THIS REGISTER ANYMORE, SO DROP IT.
         SPACE 1
         DROP  R11            PARM ADDR BASE REG
         EJECT
*        IF THE CP DOES NOT WANT TO HANDLE THE ABEND, EITHER THRU
*        THE STAETMP BIT OF THE STAEPARM CONTROL BLOCK BEING ON,
*        BY NOT HAVING A FLAGALL ENTRY, OR BY NOT HAVING THE CODE
*        IN HIS LIST OF CODES, WE WILL LET THE TMP HANDLE IT.
         SPACE 1
LETTMP   L     R1,TMPREG1     POINTER TO TMP PARMS
         SPACE 1
         USING TMPPARM,R1     PARM BASE REG
         SPACE 1
         L     R11,TMPECT     POINTER TO ECT
         SPACE 1
         USING ECT,R11        ECT BASE REG
         SPACE 1
         ST    R7,ECTRCDF     STORE ABEND CODE
         SPACE 1
*        WE HAVE DONE WHAT WAS ASKED OF US; IE, NOTHING,
*        SO NOW WE GO BACK TO ASIR INDICATING NO RETRY.
*
         SPACE 1
LETTMP01 LR    R14,R6         RESTORE RETURN REG                ZA03681
         SPACE 1
*        NO RETRY IS INDICATED BY A RETURN CODE OF 0 IN R15.
         SPACE 1
         XR    R15,R15        RETURN CODE OF ZERO
         BR    R14            RETURN TO ASIR
         SPACE 1
*        IF WE GET A USER ABEND CODE OF ZERO, WE TREAT IT AS IF THERE
*        WERE NO RETRY ROUTINE; IE, WE LET THE TMP HANDLE IT.
         SPACE 1
GOOFUP   EQU   LETTMP         LET TMP HAVE IT
         SPACE 1
*        WE DON'T NEED THE REGS ANYMORE, SO DROP THEM
         SPACE 1
         DROP  R1             TMP PARM BASE REG
         DROP  R11            ECT BASE REG
         EJECT
*        THE CP DID NOT HAVE A LIST, SO CLEAR REG 2
         SPACE 1
CLEARR2  XR    R2,R2          CLEAR LIST NUMBER
         SPACE 1
*        THE CP WANTS TO HANDLE THE ABEND, GET HIS RETRY
*        ROUTINE ADDRESS FROM THE LIST.
         SPACE 1
GETRETRY L     R10,PARMRTRY   GET RETRY ROUTINE ADDRESS
         SPACE 1
*        WE KNOW THAT THE CP WANTS TO HANDLE THE ABEND, SO
*        STORE THE THINGS THAT WE HAVE TO GIVE HIM, THEN
*        CHECK IF IT WAS A 33E ABEND.
         SPACE 1
CHECK33E ST    R10,RETRYR15   RETRY ROUTINE BASE ADDRESS
         SPACE 1
         ST    R2,RETRYR2     STORE BRANCH ENTRY CODE
         ST    R3,RETRYR0     STORE STAE ENTRY CODE
         SPACE 1
*        CHECK IF IT IS A SYSTEM OR USER ABEND CODE, WE WANT
*        TO GIVE IT TO THE CP RIGHT JUSTIFIED
         SPACE 1
         LTR   R8,R8          SYSTEM ABEND
         BZ    CHK33E01       BR ON NO
         ST    R8,RETRYR1     STORE SYSTEM CODE
         SPACE 1
*        CHECK TO SEE IF IT WAS A 33E ABEND. IF IT WAS, WE
*        HAVE TO GO DIRECTLY TO THE RETRY ROUTINE AS WE
*        CANNOT SCHEDULE A RETRY ROUTINE DURING DETACH.
         SPACE 1
         C     R8,SYS33E      33E ABEND
         BNE   CHK33E02       BR ON NO, PUT OUT MESSAGE
         SPACE 1
*        THE USER MUST SPECIFICALLY ASK TO HANDLE A 33E ABEND,
*        SO CHECK TO SEE IF HE DID OR IF WE CAME HERE FROM
*        A FLAGALL ENTRY.
         SPACE 1
         TM    PARMFLAG,FLAGALL IS IT FLAGALL ENTRY
         BO    LETTMP           YES, GIVE TO TMP
         EJECT
*        TO ENABLE US TO FIND OUR WAY BACK TO ASIR, SET UP STANDARD
*        LINKAGE CONVENTIONS FOR THE 33E RETRY ROUTINE IN A GETMAINED
*        AREA IN SUBPOOL 1.
         SPACE 1
         GETMAIN  R,LV=L2GET*L2,SP=L1   GET SOME CORE
         SPACE 1
*        SET UP A DOUBLE CHAIN OF SAVEAREAS SO THAT IKJEHSIR'S REGS
*        CAN BE RECOVERED WHEN THE 33E RETRY ROUTINE RETURNS TO
*        IKJEHSIR.  THIS IS REQUIRED SINCE, WHEN THE RETRY ROUTINE
*        SAVES REGISTERS AT R13+12, IT IS SAVING ITS OWN REGISTERS
*        AS THEY WERE STORED BY THE PSEUDO MACRO.
         SPACE 1
         STM   R14,R12,L12(R1)   SAVE MY REGS
         SPACE 1
*        NOW WE SET UP THE SECOND SAVE AREA AT +72
         SPACE 1
         LA    R13,L2GET(R1)  POINT AT SAVE TWO
         ST    R1,L4(R13)     BACK CHAIN TO SAVE ONE
         ST    R13,L8(R1)     FOWARD CHAIN FROM SAVE ONE
         ST    R13,RETRYR13   POINTER FOR RETRY ROUTINE
         SPACE 1
*        SET UP A POINTER BACK TO US FOR RETRY ROUTINE
         SPACE 1
         LA    R14,COMEBACK   RETURN POINT
         ST    R14,RETRYR14   STORE IT
         SPACE 1
*        GET THE ADDRESS OF THE RETRY PSEUDO ROUTINE AND BALR TO IT.
         SPACE 1
         LA    R15,RETRIER    ROUTINE ADDRESS
         BALR  R14,R15        GO TO HIM
         SPACE 1
*        NOW RESTORE MY REGISTERS THAT WERE SAVED UP ABOVE.
         SPACE 1
COMEBACK L     R13,L4(R13)    RESTORE R13
         LM    R14,R12,L12(R13) RESTORE THE REST OF THEM
         EJECT
*        WE TREAT A RETURN FROM A 33E RETRY ROUTINE AS IF NO RETRY
*        ROUTINE WERE TO BE SCHEDULED, SINCE WE CANNOT SCHEDULE ONE
*        ON A 33E ABEND ANYWAY.
         SPACE 1
*        BEFORE WE RETURN, WE MUST FREE THE CORE WE GOT.
         SPACE 1
         LR    R1,R13         AREA TO FREE
         SPACE 1
         FREEMAIN  R,LV=L2GET*L2,A=(R1),SP=L1  FREE IT
         SPACE 1
         LR    R14,R6        RESTORE RETURN REG                 ZA03681
         SPACE 1
*        NO RETRY IS INDICATED BY A RETURN CODE OF 0 IN R15.
         SPACE 1
         XR    R15,R15        RETURN CODE ZERO
         BR    R14            RETURN TO ASIR
         EJECT
*        IF IT IS NOT A SYSTEM ABEND, ALL WE HAVE TO DO IS
*        STORE THE USER ABEND FOR THE CP'S RETRY ROUTINE
         SPACE 1
CHK33E01 ST    R9,RETRYR1     STORE ABEND CODE
         SPACE 1
*        CHECK TO SEE IF THE CP WANTS TO PUT OUT HIS OWN MESSAGE.
         SPACE 1
CHK33E02 TM    PARMFLAG,FLAGNMSG NO MESSAGE
         BO    NOCORE            BR ON YES
         SPACE 1
*        THIS SECTION SETS UP THE IKJUWORK DSECT FOR PUTLINE.
*        FIRST WE DO A GETMAIN FOR REQUIRED AMOUNT OF CORE
*        IN SUBPOOL 1.
         SPACE 1
GETCORE  GETMAIN  R,LV=LCORE,SP=L1 GET CORE FOR PUTLINE
         SPACE 1
*        WE DON'T NEED THE POINTER TO PARM ANY MORE, GO.
         SPACE 1
         DROP  R5             PARM BASE REG
         EJECT
*        THIS SECTION SETS UP THE PARAMETER LISTS AND
*        MESSAGE FOR PUTLINE SERVICE ROUTINE.
         SPACE 1
*        UPON ENTRY:
*              R1  GOTTEN CORE
*              R4  RETRY DSECT
*              R8  SYSTEM CODE
*              R9  USER CODE
*              R10 RETRY ADDRESS
         SPACE 1
*        THE FIRST THING WE HAVE TO DO IS ESTABLISH THE
*        STANDARD LINKAGE CONVENTIONS FOR PUTLINE.
         SPACE 1
         LR    R13,R1         POINT AT NEW SAVEAREA
         SPACE 1
         USING IKJUWORK,R13   SET UP DSECT BASE
         SPACE 1
*        CLEAR THE DSECT OUT SO THINGS WITH ZEROS WILL BE THERE.
         SPACE 1
         XC    PUTLPARM(L2XC),PUTLPARM CLEAR CORE
         SPACE 1
*        SET UP A REGISTER POINTING TO THE PARMETERS PASSED
*        TO THE CP BY THE TMP SO WE CAN GET THINGS FOR THE
*        PUTLINE SERVICE ROUTINE.
         SPACE 1
         L     R1,TMPREG1     TMP PARM REG
         SPACE 1
         USING TMPPARM,R1     TMP PARM BASE REG
         SPACE 1
         L     R11,TMPUPT     POINTER TO THE USER
         ST    R11,PUTLUPT    . PROFILE TABLE
         L     R11,TMPECT     POINTER TO THE ENVIRONMENT
         ST    R11,PUTLECT    . CONTROL TABLE
         SPACE 1
         DROP  R1             TMP PARM BASE REG
         SPACE 1
*        WE WILL BE MODIFYING THE ECT, SO SET UP A BASE FOR IT
         SPACE 1
         USING ECT,R11        ECT BASE REG
         EJECT
*        SET UP THE ECB POINTER FOR THE PUTLINE SERVICE ROUTINE
         SPACE 1
         LA    R7,CPECB       POINTER TO THE ECB
         ST    R7,PUTLECB     .FOR PUTLINE
         SPACE 1
*        SET UP THE MESSAGE DESCRIPTOR FOR PUTLINE
         SPACE 1
         LA    R1,PUTLINE     PARM BLOCK POINTER
         ST    R1,PUTLPTR     .STORE IN LIST
         LA    R1,L4          NUMBER OF SEGMENTS
         ST    R1,PUTLPTRS    .STORE IN LIST
         SPACE 1
*        NOW WE SET UP THE MESSAGE INSERTS
         SPACE 1
         LA    R1,MSG         MAIN MESSAGE
         ST    R1,PUTLMAIN    .POINTER
         LA    R1,INSERT1     INSERT ONE
         ST    R1,PUTLI1      .POINTER
         LA    R1,INSERT2     INSERT TWO
         ST    R1,PUTLI2      .POINTER
         LA    R1,INSERT3     INSERT THREE
         ST    R1,PUTLI3      .POINTER
         SPACE 1
*        NOW WE MOVE THE MESSAGES INTO THE DSECT
         SPACE 1
         LA    R1,MSG         MAIN MESSAGE IN DSECT
         LA    R2,MSGID       MAIN MESSAGE IN PROGRAM
         LH    R3,MSGID       LENGTH OF MESSAGE
         BAL   R14,MOVEMSG    MOVE THE MESSAGE
         SPACE 1
         LA    R1,INSERT1     INSERT 1 AREA
         LA    R2,PNAME       PGM NAME INSERT
         LH    R3,PNAME       LENGTH OF INSERT
         BAL   R14,MOVEMSG    MOVE IT
         EJECT
*        NOW WE HAVE TO FIND OUT IF IT WAS A SYSTEM OR USER ABEND
         SPACE 1
         LA    R1,INSERT2     AREA IN DSECT
         SPACE 1
*        R8 HAS THE SYSTEM CODE IN IT, IF NONE IS USER
         SPACE 1
         LTR   R8,R8          SYSTEM CODE
         BZ    INSERTS2       BR ON NO, USER
         LA    R2,SYSCODE     SYSTEM CODE INSERT
         LH    R3,SYSCODE     LENGTH OF INSERT
         BAL   R14,MOVEMSG    MOVE INSERT
         SPACE 1
         ST    R8,DWORK1      STORE FOR TRANSLATE
         B     INSERTS3       MOVE CODE INSERT
         SPACE 1
INSERTS2 LA    R2,USRCODE     USER CODE INSERT
         LH    R3,USRCODE     LENGTH OF INSERT
         BAL   R14,MOVEMSG    MOVE IT
         SPACE 1
         ST    R9,DWORK1      STORE FOR TRANSLATE
         SPACE 1
INSERTS3 LA    R1,INSERT3     ADDRESS IN WORKAREA
         LA    R2,ABCODE      ABEND CODE INSERT
         LH    R3,ABCODE      LENGTH OF INSERT
         BAL   R14,MOVEMSG    MOVE IT
         SPACE 1
*        THIS TRANSLATES THE CODE AT DWORK1 TO PRINTABLE HEX
         SPACE 1
INSERTS5 UNPK  DWORK(L5),DWORK1+L2(L3) UNPACK CODE
         TR    DWORK(L5),TRANSTBL      TRANSLATE IT
         MVC   INSERTC(L3),DWORK+L1    MOVE TO INSERT
         SPACE 1
*        NOW WE MOVE THE NAME OF THE ABENDING CP FROM ECT
         SPACE 1
         MVC   INSERTP(L8),ECTPCMD PROGRAM NAME
         SPACE 1
*        IN THE CASE THAT THE CP'S RETRY ROUTINE ABENDS, THE
*        TMP HAS TO BE ABLE TO LET THE TERMINAL USER KNOW THAT
*        THERE WERE TWO ABENDS, THIS IS DONE BY ZEROING OUT
*        THE ECT CODE IN A STAE EXIT ROUTINE.  WE WILL DO
*        THAT NOW
         SPACE 1
         XR    R1,R1          ZERO R1
         ST    R1,ECTRCDF     ZERO ECT RETURN CODE
         EJECT
*        THIS IS THE ACTUAL PUTLINE TO THE USER
         SPACE 1
PUTIT    PUTLINE  PARM=PUTLINE,                                        X
               OUTPUT=(PUTLPTRS,TERM,SINGLE,INFOR),                    X
               TERMPUT=(EDIT,WAIT,NOHOLD,BREAKIN),                     X
               MF=(E,PUTLPARM)  PUT MESSAGE
         SPACE 1
*        BEFORE WE GO BACK TO ASIR, WE HAVE TO CLEAN UP THE
*        THINGS THAT WE HAVE DONE. WE
*        HAVE TO FREE THE CORE WE GOT FOR PUTLINE PROCESSING.
         SPACE 1
         LR    R1,R13         AREA TO FREE
         SPACE 1
*        NOW WE FREE THE CORE WE GOT BEFORE
         SPACE 1
         FREEMAIN  R,LV=LCORE,SP=L1,A=(R1)  FREE IT
         SPACE 1
*        SINCE WE HAVE FREED THE CORE, DROP THE BASE REG
         SPACE 1
         DROP  R13            IKJUWORK BASE REG
         EJECT
*        THIS IS WHERE WE FINALLY SET UP TO TELL ASIR THAT
*        THE CP HAS A RETRY ROUTINE THAT HE SHOULD SCHEDULE.
*        WE DO THIS BY SETTING R15 TO 4, R0 TO THE PSEUDO
*        RETRY ADDRESS.
         SPACE 1
NOCORE   LA    R0,RETRIER     CP'S RETRY ROUTINE
         LA    R15,L4         INDICATE RETRY
         SPACE 1
         LR    R14,R6                RESTORE RETURN REG         ZA03681
         BR    R14                   RETURN TO ASIR
         SPACE 1
*        FREE THE OTHER REG, WE'RE DONE WITH IT
         SPACE 1
         DROP  R4             RETRY BASE REG
         EJECT
*        THIS ROUTINE MOVES THE MESSAGE FROM THIS PROGRAM TO
*        THE GETMAINED AREA IN SUBPOOL 1.
         SPACE 1
*        UPON ENTRY
*              R1 POINTS AT DSECT AREA
*              R2 POINTS AT MESSAGE TO MOVE
*              R3 HAS LENGTH IN IT
         SPACE 1
MOVEMSG  BCTR  R3,L0          -1 FOR EXECUTED MOVE
         EX    R3,MOVEMSG1    MOVE THE MESSAGE
         BR    R14            RETURN TO CALLER
         SPACE 1
*        THIS INSTRUCTION MOVES THE INSERTS
         SPACE 1
MOVEMSG1 MVC   L0(L0,R1),L0(R2) MOVE THE MESSAGE
         EJECT
F12      DC    F'12'          FOR 104 BYTE COMPARE
         SPACE 1
*        THE FOLLOWING DC'S MUST FOLLOW A FULLWORD ALIGNING DC
         SPACE 1
EFFS2    DC    X'00000FFF'    FOR ANDING LIST CODE
SYS33E   DC    X'0000033E'    SYSTEM 33E ABEND
         SPACE 1
MSGID    DC    AL2(LMSGID)    TOTAL LENGTH OF MESSAGE
         DC    H'0'           OFFSET FOR INSERTION
         DC    C'IKJ52675I '  MESSAGE ID
         DC    C' ABENDED, '  1ST PART
         DC    C' COMPLETION CODE' 2ND PART
         SPACE 1
LMSGID   EQU   *-MSGID        LENGTH OF MESSAGE
         SPACE 1
         DS    0H             ENSURE HALFWORD ALIGNMENT
PNAME    DC    AL2(LPNAME)    LENGTH OF INSERT
         DC    H'10'          OFFSET FOR INSERT
         DC    CL8' '         PROGRAM NAME
         SPACE 1
LPNAME   EQU   *-PNAME        LENGTH OF INSERT
         SPACE 1
         DS    0H             ENSURE HALFWORD ALIGNMENT
SYSCODE  DC    AL2(LSYSCODE)  LENGTH OF INSERT
         DC    H'20'          OFFSET FOR INSERTION
         DC    C'SYSTEM'      TYPE OF ABEND
         SPACE 1
LSYSCODE EQU   *-SYSCODE      LENGTH OF INSERT
         SPACE 1
         DS    0H             ENSURE HALFWORD ALIGNMENT
USRCODE  DC    AL2(LUSRCODE)  LENGTH OF INSERT
         DC    H'20'          OFFSET FOR INSERT
         DC    C'USER'        TYPE OF ABEND
         SPACE 1
LUSRCODE EQU   *-USRCODE      LENGTH OF INSERT
         SPACE 1
         DS    0H             ENSURE HALFWORD ALIGNMENT
ABCODE   DC    AL2(LABCODE)   LENGTH OF INSERT
         DC    H'36'          OFFSET FOR INSERT
         DC    CL4' '         ACTUAL CODE
         SPACE 1
LABCODE  EQU   *-ABCODE       LENGTH OF INSERT
         EJECT
*        TRANSLATE TABLE FOR CONVERSION OF ABEND CODES
         SPACE 1
TTBL     DC    C'0123456789ABCDEF'   TRANS TABLE
         SPACE 1
TRANSTBL EQU   *-L256         ORG FOR TR INSTRUCTION
         SPACE 1
*        THIS IS A PATCH AREA FOR THIS ROUTINE
         SPACE 1
STAPATCH DC    5D'0'          PATCH AREA
         SPACE 1
*        TO MAKE IT EASIER TO PATCH, SET UP AN S-CON FOR IT
         SPACE 1
STASCON  DC    S(STAPATCH)    S-CON FOR PATCHAREA
         SPACE 1
*        AND NOW SO WE CAN FIND THEM ON A LINKEDIT MAP,
*        WE MAKE THEM ENTRY POINTS.
         SPACE 1
         ENTRY STAPATCH,STASCON ENTRY POINTS
         SPACE 1
*        SINCE THIS IS THE END OF THE WORLD, GET RID OF OUR BASE
         SPACE 1
         DROP  R12            OUR BASE REG
         EJECT
IKJUWORK DSECT                DSECT OF WORK AREA
         SPACE 1
*        THIS IS A DSECT OF THE WORK AREA ACQUIRED BY THE IKJEHSIR
*        EXIT ROUTINE.  IT IS IN SUBPOOL 1.
         SPACE 1
SAVEAREA DC    18F'0'         SAVEAREA FOR PROGRAM
         SPACE 1
*        THE FOLLOWING EQUATE IS USED TO GET A SAVEAREA
*        FOR THE 33E RETRY ROUTINE
         SPACE 1
L2GET    EQU   *-IKJUWORK     SAVEAREA SIZE
         SPACE 1
*        THE FOLLOWING IS THE PARAMETER LIST PASSED TO THE PUTLINE
*        SERVICE ROUTINE BY THIS ROUTINE.
         SPACE 1
PUTLPARM DS    0F             PUTLINE PARMETER LIST
PUTLUPT  DC    F'0'           POINTER TO UPT
PUTLECT  DC    F'0'           POINTER TO ECT
PUTLECB  DC    F'0'           POINTER TO ECB
PUTLPTR  DC    F'0'           POINTER TO PARM BLOCK
         SPACE 1
CPECB    DC    F'0'           ECB FOR PUTLINE
         SPACE 1
*        THIS GENERATES THE PUTLINE PARMETER BLOCK
         SPACE 1
PUTLINE  PUTLINE  OUTPUT=(0,TERM,SINGLE,INFOR),                        X
               TERMPUT=(EDIT,WAIT,NOHOLD,BREAKIN),                     X
               MF=L           PUTLINE BLOCK
         SPACE 1
*        THE FOLLOWING IS THE LIST OF INSERT ADDRESSES PASSED
*        TO PUTLINE.  IT IS POINTED TO BY THE ADDRESS OF THE
*        OUTPUT LINE IN THE PUTLINE BLOCK ABOVE.
         SPACE 1
PUTLPTRS DC    F'4'           NUMBER OF SEGMENTS
PUTLMAIN DC    A(0)           POINTER TO MAIN MESSAGE
PUTLI1   DC    A(0)           POINTER TO INSERT ONE
PUTLI2   DC    A(0)           POINTER TO INSERT TWO
PUTLI3   DC    A(0)           POINTER TO INSERT THREE
         SPACE 1
DWORK    DC    D'0'           WORK AREA FOR TRANSLATE
         SPACE 1
DWORK1   EQU   DWORK+L4       AREA FOR STORAGE
         EJECT
*        THE FOLLOWING IS THE MESSAGE AREA AND INSERT AREA
*        POINTED TO BY PUTLPTRS ABOVE.
         SPACE 1
         DS    0H             HALFWORD ALIGNMENT
MSG      DC    (LMSGID)X'00'  SPACE FOR MESSAGE
         SPACE 1
         DS    0H             HALFWORD ALIGNMENT
INSERT1  DC    (LPNAME)X'00'  SPACE FOR INSERT1
         SPACE 1
INSERTP  EQU   *-L8           FOR PROGRAM NAME
         SPACE 1
         DS    0H              HALFWORD ALIGNMENT
INSERT2  DC    (LSYSCODE)X'00' SPACE FOR INSERT 2
         SPACE 1
         DS    0H             HALFWORD ALIGNMENT
INSERT3  DC    (LABCODE)X'00' SPACE FOR INSERT 3
         SPACE 1
INSERTC  EQU   *-L3           FOR ABEND CODE
         SPACE 1
         DS    0F             FULLWORD ALIGNMENT
         SPACE 1
L2XC     EQU   *-PUTLPARM     SIZE TO XC
         SPACE 1
LCORE    EQU   *-IKJUWORK     LENGTH OF DSECT
         EJECT
         STAES                MY DSECTS
         EJECT
         IKJECT               ECT DSECT
         EJECT
         IKJUPT               UPT DSECT
         EJECT
         IKJPSCB              PSCB DSECT
         SPACE 1
         END
