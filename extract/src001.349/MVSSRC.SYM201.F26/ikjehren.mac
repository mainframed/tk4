         TITLE 'IKJEHREN-IBM TIME SHARING RENAME COMMAND'
IKJEHREN CSECT
*C 727200,773200-773600,857200                                   A49872
*A 162300                                                        A48485
*C 332080                                                         M2009
*        VS2-3.0 SERVICE UPDATE
*0000095500,383760                                             @ZA11579
*0000049201,082410,085141,095500,383610-383640                 @ZA07213
*0000411901-411905,822810,822820-857204                        @ZA07213
*0000531549                                                    @ZA06145
*0000002400,010100,010200,095300-095520                        @ZA01485
*0000144420,337200,342900,343300-343500                        @ZA01485
*0000492000,496800,526800,614384,714820                        @ZA01485
*        VS2-3.7 SERVICE UPDATE
*C763200,A763300,C619200         REF ZA25723                   @ZA27595
*D082410,085141,095500,383610-383640,411901-411905,            @ZA28003
*D822810,822820-857204       ALSO SEE ZA14772                  @ZA28003
***********************************************************************
*                                                                     *
* STATUS -- VS2 RELEASE 3 VERSION 0   SU                       @ZA01485
*                                                                     *
* FUNCTION -- THE RENAME COMMAND IS USED TO CHANGE THE NAME OF A DATA *
*    SET OR PARTITIONED DATA SET MEMBER OR TO CREATE AN ALIAS FOR AN  *
*    EXISTING MEMBER OF A PARTITIONED DATA SET.                       *
*                                                                     *
* ENTRY POINTS --                                                     *
*         IKJEHREN - MAIN ENTRY POINT OF PROGRAM, ATTACHED BY THE     *
*    TERMINAL MONITOR PROGRAM WHEN A RENAME COMMAND IS ENTERED AT THE *
*    TERMINAL                                                         *
*                                                                     *
* INPUT --  REGISTER 1 POINTS TO THE STANDARD COMMAND PROCESSOR       *
*    PARAMETER LIST (CPPL) AS FOLLOWS-                                *
*    WORD 1 CONTAINS A POINTER TO THE COMMAND BUFFER                  *
*    WORD 2 CONTAINS A POINTER TO THE USER PROFILE TABLE              *
*    WORD 3 CONTAINS A POINTER TO THE PROTECTED STEP CONTROL BLOCK    *
*    WORD 4 CONTAINS A POINTER TO AN ENVIRONMENT CONTROL TABLE        *
*                                                                     *
* OUTPUT -- NORMALLY NONE, EXCEPT APPROPRIATE ERROR MESSAGES TO       *
*    DESCRIBE ERROR CONDITIONS                                        *
*        R15 = X'00' NORMAL RETURN                             @ZA01485
*        R15 = X'0C' ERROR RETURN                              @ZA01485
*                                                                     *
* EXTERNAL REFERENCES --                                              *
*         IKJPARS - ENTRY POINT TO PARSE ROUTINE                      *
*         IKJDAIR - ENTRY POINT TO DYNAMIC ALLOCATION INTERFACE       *
*         ROUTINE                                                     *
*         IKJPUTL - ENTRY POINT TO PUTLINE ROUTINE                    *
*         IKJEHCIR - ENTRY POINT TO CATALOG INFORMATION ROUTINE       *
*         IKJDFLT - ENTRY POINT TO DEFAULT SERVICE ROUTINE            *
*         IKJEHSIR - ENTRY POINT FOR STAE INTERFACE ROUTINE           *
*                                                                     *
* EXITS, NORMAL -- RETURN TO THE TERMINAL MONITOR PROGRAM             *
*                                                                     *
* EXITS, ERROR -- RETURN TO THE TERMINAL MONITOR PROGRAM              *
*                                                                     *
* TABLES/WORK AREAS --                                                *
*    IHADCB - A DSECT TO MAP THE WORKAREA                             *
*                                                                     *
* ATTRIBUTES -- REENTRANT, READ-ONLY, REFRESHABLE                     *
*                                                                     *
* CHARACTER CODE DEPENDENCY -- CHARACTER CODE INDEPENDENT             *
*                                                                     *
* NOTES --                                                     @YL026YB
*    DESCRIBED IN TSO COMMAND PROCESSOR LOGIC, SY28-0652       @YL026YB
*                                                                     *
***********************************************************************
         EJECT
*              REGISTER EQUATES
R0       EQU   0                   GENERAL REGISTER 0
R1       EQU   1                   GENERAL REGISTER 1
R2       EQU   2                   GENERAL REGISTER 2
R3       EQU   3                   GENERAL REGISTER 3
R4       EQU   4                   GENERAL REGISTER 4
R5       EQU   5                   GENERAL REGISTER 5
R6       EQU   6                   GENERAL REGISTER 6
R7       EQU   7                   GENERAL REGISTER 7
R8       EQU   8                   GENERAL REGISTER 8
R9       EQU   9                   GENERAL REGISTER 9
R10      EQU   10                  GENERAL REGISTER 10
R11      EQU   6                   GENERAL REGISTER 6
R1X      EQU   11                  GENERAL REGISTER 11
R12      EQU   12                  GENERAL REGISTER 12
R13      EQU   13                  GENERAL REGISTER 13
R14      EQU   14                  GENERAL REGISTER 14
R15      EQU   15                  GENERAL REGISTER 15
*
*              REGISTER USEAGE
*
*  REGISTER 0  USED AS WORK REGISTER
*
*  REGISTER 1  USED AS PARAMETER REGISTER AND AS WORK REGISTER
*
*  REGISTER 2  USED INITIALLY TO SAVE PARAMETER LIST POINTER, THEN AS
*              WORK REGISTER
*
*  REGISTER 3  USED IN 'EXECUTE MVC' AS POINTER TO 'TO AREA' AND AS
*              WORK REGISTER
*
*  REGISTER 4  USED IN 'EXECUTE MVC' AS POINTER TO 'FROM AREA' AND AS
*              WORK REGISTER
*
*  REGISTER 5  USED AS WORK REGISTER
*
*  REGISTER 6  USED AS WORK REGISTER
*
*  REGISTER 7  USED TO ADDRESS CONSTANTS FOR IKJEHRN2
*
*  REGISTER 8  USED AS INDEX REGISTER FOR CIR WORKAREA (SET TO ZERO
*              WHEN NOT PROCESSING '*')
*
*  REGISTER 9  IS BASE REGISTER FOR PARSE DSECT
*
*  REGISTER 10 USED AS WORK REGISTER
*
*  REGISTER 11 IS BASE REGISTER FOR GETMAIN COMMON AREA (DSECT)
*
*  REGISTER 12 IS BASE REGISTER FOR THIS PROGRAM
*
*  REGISTER 13 IS THE SAVE AREA REGISTER
*
*  REGISTER 14 IS THE LINK REGISTER
*
*  REGISTER 15 IS THE BRANCH REGISTER AND THE RETURN CODE REGISTER
*
         SPACE 2
*  ABSOLUTE EQUATES (OFFSETS AND SHORT LENGTHS)
ONE      EQU   1                   ONE
TWO      EQU   2                   TWO
F0       EQU   0                   ZERO
F1       EQU   1                   ONE
F2       EQU   2                   TWO
F4       EQU   4                   FOUR
F5       EQU   5                   FIVE
F6       EQU   6                   LENGTH OF A VOLUME SERIAL NUMBER
F7       EQU   7                   SEVEN
F8       EQU   8                   EIGHT
F12      EQU   12                  TWELVE
F24      EQU   24                  TWENTY-FOUR
F32      EQU   32                  THIRTY-TWO
F16      EQU   16                  SIXTEEN
F20      EQU   20                  TWENTY
F43      EQU   43                  FORTY-THREE                 @YL026YB
F45      EQU   45                  FORTY-FIVE
F36      EQU   36                  THIRTY-SIX
F76      EQU   76                  SEVENTY-SIX
F63      EQU   63                  SIXTY-THREE
F46      EQU   46                  FORTY-SIX
F9       EQU   9                   NINE
F11      EQU   11                  ELEVEN
L72      EQU   72                  LENGTH OF SAVEAREA
F3       EQU   3                   THREE
F44      EQU   44                  FORTY-FOUR
F51      EQU   51                  FIFTY-ONE
F52      EQU   52                  FIFTY-TWO
*  RETURN CODE EQUATES
RC4      EQU   4                   RETURN CODE = 4
RC8      EQU   8                   RETURN CODE = 8
RC12     EQU   12                  RETURN CODE = 12
RC16     EQU   16                  RETURN CODE = 16
RC20     EQU   20                  RETURN CODE = 20
RC24     EQU   24                  RETURN CODE = 24
RC28     EQU   28                  RETURN CODE = 28
RC32     EQU   32                  RETURN CODE = 32
RC36     EQU   36                  RETURN CODE = 36
*  EQUATES FOR MESSAGE NUMBERS (FIRST LEVEL MESSAGES)
M01      EQU   1                   MESSAGE NUMBER 01
M02      EQU   2                   MESSAGE NUMBER 02
M03      EQU   3                   MESSAGE NUMBER 03
M04      EQU   4                   MESSAGE NUMBER 04
M05      EQU   5                   MESSAGE NUMBER 05
M06      EQU   6                   MESSAGE NUMBER 06
M07      EQU   7                   MESSAGE NUMBER 07
M08      EQU   8                   MESSAGE NUMBER 08
M09      EQU   9                   MESSAGE NUMBER 09
M10      EQU   10                  MESSAGE NUMBER 10
M11      EQU   11                  MESSAGE NUMBER 11
M12      EQU   12                  MESSAGE NUMBER 12
M13      EQU   13                  MESSAGE NUMBER 13
M14      EQU   14                  MESSAGE NUMBER 14
M15      EQU   15                  MESSAGE NUMBER 15
M16      EQU   16                  MESSAGE NUMBER 16
M17      EQU   17                  MESSAGE NUMBER 17
M18      EQU   18                  MESSAGE NUMBER 18
M19      EQU   19                  MESSAGE NUMBER 19
M20      EQU   20                  MESSAGE NUMBER 20
M21      EQU   21                  MESSAGE NUMBER 21
M22      EQU   22                  MESSAGE NUMBER 22
M23      EQU   23                  MESSAGE NUMBER 23
M24      EQU   24                  MESSAGE NUMBER 24
M25      EQU   25                  MESSAGE NUMBER 25
M26      EQU   26                  MESSAGE NUMBER 26
M27      EQU   27                  MESSAGE NUMBER 27
M28      EQU   28                  MESSAGE NUMBER 28
M29      EQU   29                  MESSAGE NUMBER 29
*  EQUATES FOR MESSAGE NUMBERS (SECOND LEVEL MESSAGES)
S01      EQU   1                   SECOND LEVEL MESSAGE NUMBER 01
S02      EQU   2                   SECOND LEVEL MESSAGE NUMBER 02
S03      EQU   3                   SECOND LEVEL MESSAGE NUMBER 03
S04      EQU   4                   SECOND LEVEL MESSAGE NUMBER 04
S05      EQU   5                   SECOND LEVEL MESSAGE NUMBER 05
S06      EQU   6                   SECOND LEVEL MESSAGE NUMBER 06
S07      EQU   7                   SECOND LEVEL MESSAGE NUMBER 07
S08      EQU   8                   SECOND LEVEL MESSAGE NUMBER 08
S09      EQU   9                   SECOND LEVEL MESSAGE NUMBER 09
S10      EQU   10                  SECOND LEVEL MESSAGE NUMBER 10
S11      EQU   11                  SECOND LEVEL MESSAGE NUMBER 11
S12      EQU   12                  SECOND LEVEL MESSAGE NUMBER 12
S13      EQU   13                  SECOND LEVEL MESSAGE NUMBER 13
S14      EQU   14                  SECOND LEVEL MESSAGE NUMBER 14
S15      EQU   15                  SECOND LEVEL MESSAGE NUMBER 15
S16      EQU   16                  SECOND LEVEL MESSAGE NUMBER 16
S17      EQU   17                  SECOND LEVEL MESSAGE NUMBER 17
S18      EQU   18                  SECOND LEVEL MESSAGE NUMBER 18
S19      EQU   19                  SECOND LEVEL MESSAGE NUMBER 19
S20      EQU   20                  SECOND LEVEL MESSAGE NUMBER 20
S21      EQU   21                  SECOND LEVEL MESSAGE NUMBER 21
S22      EQU   22                  SECOND LEVEL MESSAGE NUMBER 22
S23      EQU   23                  SECOND LEVEL MESSAGE NUMBER 23
S24      EQU   24                  SECOND LEVEL MESSAGE NUMBER 24
S25      EQU   25                  SECOND LEVEL MESSAGE NUMBER 25
S26      EQU   26                  SECOND LEVEL MESSAGE NUMBER 26
S27      EQU   27                  SECOND LEVEL MESSAGE NUMBER 27
S28      EQU   28                  SECOND LEVEL MESSAGE NUMBER 28
S29      EQU   29                  SECOND LEVEL MESSAGE NUMBER 29
S30      EQU   30                  SECOND LEVEL MESSAGE NUMBER 30
*              OTHER EQUATES
STAR     EQU   C'*'                ASTERISK
PERIOD   EQU   C'.'                PERIOD
BLANK    EQU   C' '                BLANK
QUOTE    EQU   C''''               CHARACTER QUOTE
ZONE     EQU   C'0'                CHARACTER CONSTANT FOR ZONE FIELD
ZERO     EQU   X'00'               ZERO
FOXZERO  EQU   C'0'                CHARACTER ZERO
CHARG    EQU   C'G'                CHARACTER G
CHARV    EQU   C'V'                CHARACTER V
COMPZONE EQU   X'F0'               MASK TO TEST FOR GENERATION NAME
QUOTEMSK EQU   X'40'               MASK TO CHECK IF DSNAME IN QUOTES
INDEXTST EQU   X'C1'               INDEX NAME (CIR)            @YL026YB
GDGNTST  EQU   X'02'               GENERATION DATA GROUP NAME (CIR)
NAMETST  EQU   X'07'               DATA SET NAME (CIR)
TTRSIGN  EQU   X'80'               TTR INDICATOR (CIR)
ENDTEST  EQU   X'FF'               LIST END (CIR)
NAMESOPT EQU   X'01'               OPTION BYTE FOR DATA SET NAMES (CIR)
INDEXOPT EQU   X'02'               OPTION BYTE FOR INDEX NAMES (CIR)
PDSTEST  EQU   X'02'               MASK TO CHECK DATA SET ORGANIZATION
DAIROPTA EQU   X'08'               OPTION BYTE FOR DATA SET ALLOCATION
DAIROPTU EQU   X'18'               OPTION BYTE FRO DATASET UNALLOCATION
NAMECHCK EQU   X'03'               MASK TO CHECK IF NAME ON VOLUME
BADPASWD EQU   2                   MASK TO CHECK IF PASSWORD BAD
EQ       EQU   8                   MASK TO TEST CONDITION CODE EQUAL
SWON     EQU   X'FF'               MASK FOR SWITCH ON
SWOFF    EQU   X'00'               MASK FOR SWITCH OFF
MASK1    EQU   X'40'               MASK TO CHECK FOR INTERRUPT
ALIAS    EQU   X'80'               MASK TO INDICATE MEMBER IS ALIAS
SPNUM    EQU   1                   SUBPOOL NUMBER FOR GETMAIN
VOLLENTH EQU   12                  LENGTH OF VOLUME ENTRY FROM LOCATE
GDGLENTH EQU   16                  LENGTH OF GDG ENTRY IN CIR LIST
VOLCOUNT EQU   1                   MAXIMUM NUMBER OF VOLUMES
PERMALC  EQU   X'10'               INDICATE UNALLOC PERMANENTLY ALLOC
         EJECT
         SPACE
         SAVE  (14,12)             SAVE REGISTERS OF CALLING PROGRAM
         LR    R12,R15             ENTRY POINT ADDRESS TO BASE REGISTER
         USING IKJEHREN,R12        ESTABLISH ADDRESSABILITY FOR PROGRAM
         B     BRID                BRANCH AROUND ID            @ZA01485
         DC    C'IKJEHREN'         MODULE ID                   @ZA01485
         DC    X'7349'             DATE 12/15/77               @ZA27595
BRID     EQU   *                                               @ZA01485
         LR    R2,R1               SAVE CONTENTS OF REGISTER 1 IN
*                                  REGISTER 2 - GETMAIN USES REGISTER 1
         GETMAIN R,LV=CORE,SP=SPNUM GET CORE FOR SAVEAREA AND WORKAREA
*  THIS IS AN UNCONDITIONAL REQUEST FOR CORE.  IF SUFFICIENT CORE IS
*  NOT AVAILABLE THE RESULT IS ABNORMAL TERMINATION OF THIS PROGRAM.
*  THE FIRST 96 BYTES IS DCB, NEXT 18 WORDS IS REGISTER SAVE AREA.
         LR    R1X,R1              ADDRESS OF GETMAIN AREA
         USING IHADCB,R1X          ESTABLISH ADDRESSABILITY WORKAREA
         LA    R1,SAVEAREA         ADDRESS OF REGISTER SAVE AREA
         XC    F0(L72,R1),F0(R1)   INITIALIZE REGISTER SAVE AREA
         ST    R13,F4(R1)          SAVE ADDRESS OF CALLER'S REGISTERS
         ST    R1,F8(R13)          CHAIN SAVE AREAS
         LR    R13,R1              REGISTER 13 POINTS TO SAVEAREA
*  REGISTER 2 POINTS TO COMMAND PROCESSOR PARAMETER LIST (CPPL)
         ST    R2,TMPSR1           SAVE TMP'S REGISTER 1
*  WHEN THE TMP ATTACHES RENAME REGISTER 1 POINTS TO A PARAMETER LIST
*  THE FORMAT OF THE TMP PARAMETER LIST IS-
*     1ST WORD POINTER TO THE COMMAND BUFFER
*     2ND WORD POINTER TO THE USER PROFILE TABLE
*     3RD WORD POINTER TO THE PROTECTED STEP CONTROL BLOCK
*     4TH WORD POINTER TO THE ENVIRONMENT CONTROL TABLE
         MVC   PUT(PUTLEND-PUTL),PUTL INITIALIZE PUTLINE PARM BLOCK
         MVI   ENDERROR,SWOFF      TURN OFF END ERROR SWITCH
         MVI   STACKSW,SWOFF       TURN STACK SWITCH OFF
         MVI   DEFLTSW,SWOFF       TURN OFF DEFAULT SWITCH
         MVI   RENERRSW,SWOFF      INITIALIZE SWITCH OFF
         MVI   ERRORSW,SWOFF       TURN ERROR SWITCH OFF
         MVI   MEM2SW,SWOFF        TURN OFF MEM2 SWITCH
         LA    R3,LEVELSCN         POINT TO SCAN BUFFER
         MVI   F8(R3),BLANK        BLANK LAST BYTE OF SCAN FIELD
         LA    R4,LISTSCN          POINT TO LIST BUFFER        @YL026YB
         MVI   F44(R4),BLANK       PUT BLANK IN LAST BYTE      @YL026YB
         MVI   ISWITCH,INDEXTST    INITIALIZE SWITCH TO OFF (ZERO)
         MVI   UNALOCSW,SWOFF      INITIALIZE SWITCH TO OFF (ZERO)
         SR    R8,R8               INDEX REGISTER TO CIR WORKAREA, SET
*                                  TO ZERO INDICATES NOT PROCESSING *
         USING CPPL,R2             ADDRESSABILITY CPPL
         LA    R9,PARSPARM         POINT TO SPACE FOR PARSE PARMETERS
         USING PPL,R9              ADDRESSABILITY PARSE PARMLIST
         LA    R4,DFLTPARM         POINT TO SPACE FOR DEFAULT PARMLIST
         USING DFPL,R4             ADDRESSABILITY DEFAULT PARMLIST
         LA    R5,DFLTPBLK         POINT TO SPACE DEFAULT PARMBLOCK
         USING DFPB,R5             ADDRESSABILITY DEFAULT PARM BLOCK
         LA    R6,IOPARM           POINT TO SPACE FOR I/O PARM LIST
         USING IOPL,R6             ADDRESSABILITY I/O PARM LIST
         LA    R10,DAIRPARM        POINT TO SPACE FOR DAIR PARM LIST
         USING DAPL,R10            ADDRESSABILITY DAIR PARM LIST
*  INITIALIZE PARAMETERS FOR PARSE, DAIR, DEFAULT, AND PUTLINE
         L     R3,CPPLCBUF         COMMAND BUFFER POINTER
         ST    R3,PPLCBUF          - TO PARSE PARAMETER LIST
         L     R3,CPPLUPT          UPT POINTER
         ST    R3,IOPLUPT          - TO I/O PARAMETER LIST
         ST    R3,PPLUPT           - TO PARSE PARAMETER LIST
         ST    R3,DAPLUPT          - TO DAIR PARAMETER LIST
         ST    R3,DFPLUPT          - TO DEFAULT PARAMETER LIST
         ST    R3,UPTSAVE          - SAVE UPT  ADDRESS
         L     R3,CPPLPSCB         PSCB POINTER
         ST    R3,DAPLPSCB         - TO DAIR PARAMETER LIST
         ST    R3,DFPBPSCB         - TO DEFAULT PARAMETER BLOCK
         L     R3,CPPLECT          ECT POINTER
         ST    R3,IOPLECT          - TO I/O PARAMETER LIST
         ST    R3,PPLECT           - TO PARSE PARAMETER LIST
         ST    R3,DAPLECT          - TO DAIR PARAMETER LIST
         ST    R3,DFPLECT          - TO DEFAULT PARAMETER LIST
         DROP  R2                  CPPL IS NO LONGER NEEDED
         LA    R2,RENCPECB         POINT TO CP'S ECB
         ST    R2,IOPLECB          - TO I/O PARAMETER LIST
         ST    R2,PPLECB           - TO PARSE PARAMETER LIST
         ST    R2,DAPLECB          - TO DAIR PARAMETER LIST
         ST    R2,DFPLECB          - TO DEFAULT PARAMETER LIST
         ST    R5,DFPLDFPB         PARM BLOCK POINTER TO PARM LIST
         ST    R8,CIRADDR          ZERO ADDRESS OF CIR (NOT LOADED)
         ST    R8,RENCPECB         ZERO CP'S ECB
         ST    R8,PPLUWA           ZERO UNUSED PARAMETER
         ST    R8,DFPBQUAL         ZERO POINTER TO DEFAULT QUALIFIER
         ST    R8,CIRPARM          CLEAR FIRST WORD OF PARAMETER LIST
         ST    R8,VOLIDPTR         INITIALIZE TO ZERO (DEFAULT SYSRES)
         L     R3,VCONPARS         ADDRESS OF PARSE MACROS
         ST    R3,PPLPCL           SET PARSE CONTROL LIST POINTER
         LA    R3,ANSPLACE         ADDRESS OF PARSE ANSWER PLACE
         ST    R3,PPLANS           SET PARSE ANSWER PLACE POINTER
         DROP  R4                  DFPL NO LONGER NEEDED
         DROP  R6                  IOPL NO LONGER NEEDED
         DROP  R9                  PPL NO LONGER NEEDED
         DROP  R10                 DAPL NO LONGER NEEDED
* NOW MOVE MACROS TO GETMAIN AREA
         MVC   RENAMLST(CLSTEND-RENLST),RENLST MOVE CAMLST MACROS
         MVC   IHADCB(DCBEND-DCB),DCB  MOVE DCB
         MVC   OPEN(OPENEND-OPN),OPN MOVE OPEN MACRO
         MVC   CLOSE(CLOSEEND-CLSE),CLSE MOVE CLOSE MACRO
         LR    R2,R1X              ADDRESS OF DCB
         O     R2,OPEN             OR IN OPEN OPTION CODE, THEN
         ST    R2,OPEN             PUT CODE AND ADDRESS IN OPEN MACRO
         LR    R2,R1X              ADDRESS OF DCB
         O     R2,CLOSE            OR IN CLOSE OPTION CODE, THEN
         ST    R2,CLOSE            PUT CODE AND ADDRESS IN CLOSE MACRO
*  INITIALIZE DAIR PARAMETER LIST TO ALLOCATE DATA SET
         LA    R4,DAIR08           POINT TO DAIR ENTRY 08
         USING DAPB08,R4           ADDRESSABILITY FOR DAIR ENTRY 08
         LA    R6,DAIR18           POINT TO DAIR ENTRY 18
         USING DAPB18,R6           ADDRESSABILITY DAIR ENTRY 18
         XC    DAIR08(DLSTEND-DAIR08),DAIR08 ZERO DAIR LISTS
         MVI   DA08CD+F1,DAIROPTA  SET OPTION FOR ALLOCATION
         MVI   DA08UNIT,BLANK      BLANK SIX
         MVC   DA08UNIT+F1(F7),DA08UNIT BLANK UNIT NAME
         MVC   DA08SER(F8),DA08UNIT BLANK VOLUME SERIAL NUMBER
         MVC   DA08MNM(F8),DA08SER BLANK MEMBER NAME
         LA    R2,DSLO             ADDRESS OF DSL-DSN BUFFER
         ST    R2,DA08PDSN         POINT TO DSL-DSN BUFFER
*  INITIALIZE DAIR PARAMETER LIST TO UNALLOCATE DATA SET
         MVI   DA18CD+F1,DAIROPTU  SET TO UNALLOCATE DATA SET
         MVC   DA18MNM(F8),DA08SER BLANK MEMBER NAME
         MVC   DA18JBNM(F8),DA08SER BLANK JOBNAME
         MVC   DA18SCLS(F2),DA08SER  BLANK SYSOUT CLASS        @VS06880
*  INITIALIZE DEFAULT SERVICE ROUTINE PARAMETER LIST
         ST    R2,DFPBDSN          POINT TO DSL-DSN BUFFER
         MVI   DFPBCODE,DFPB04     SET OPTION FOR DEFAULT ROUTINE
         MVI   DFPBCNTL,DFPBUID+DFPBRET SET CONTROL BYTE
         LA    R2,QUALBUFF         QUALIFIER BUFFER
         ST    R2,DFPBQUAL         ADDRESS TO PARM LIST
         DROP  R4                  DAPB08 NO LONGER NEEDED
         DROP  R5                  DFPB NO LONGER NEEDED
         DROP  R6                  DAPB18 NO LONGER NEEDED
*  LOAD DAIR ROUTINE
         LOAD  EP=IKJDAIR          LOAD DAIR
         ST    R0,DAIRADDR         SAVE ADDRESS OF DAIR
         MVI   RCX,ZERO            ZERO RC SAVE AREA           @ZA01485
*  NOW LOAD CATALOG INFORMATION ROUTINE
         LOAD  EP=IKJEHCIR         LOAD CIR
         ST    R0,CIRADDR          SAVE ADDRESS OF CIR
         MVI   NAMEPTR,ZERO        ZERO HIGH ORDER BYTE
         MVI   CIRFLAG,SWOFF       SET SWITCH OFF
         MVI   STARSW,SWOFF        TURN STAR SWITCH OFF
         LA    R2,STARLIST         BEGINNING OF STARLIST
         ST    R2,STARPTR          POINT TO NEXT EMPTY SLOT
*  NOW BLANK ALL DATA SET BUFFERS
         MVI   DSNBUFFO,BLANK      BLANK
         MVC   DSNBUFFO+F1(F51),DSNBUFFO OLD DSNAME BUFFER
         MVC   QUALBUFF(F8),DSNBUFFO BLANK QUALIFIER RETURN BUFFER
         MVC   DSNBUFFN(F52),DSNBUFFO NEW DSNAME BUFFER
         MVC   DSNO(F44),DSNBUFFO  OLD DATA SET NAME BUFFER
         MVC   DSNN(F44),DSNBUFFO  NEW DATA SET NAME BUFFER
         MVI   NAMETTR,BLANK       BLANK CIR BUFFER            @YL026YB
         MVC   NAMETTR+F1(F43),NAMETTR BLANKS IN CIR BUFFER    @YL026YB
         XC    STAELIST(STAELNTH),STAELIST CLEAR AREA FOR STAE BLOCKS
         LOAD  EP=IKJEHSIR         LOAD STAE INTERFACE ROUTINE
         ST    R0,STAEADDR         SAVE ADDRESS OF STAE ROUTINE
BLDSTAE  PSEUDO TMP=TMPSR1,MF=E
         L     R4,VCON713          ADDRESS OF RETRY ROUTINE
         STABUILD CODE=713,RTN=(R4),ADDR=STAEONE,FLAG=(ONE,NMSG),      X
               NUM=4,MF=E
         L     R4,VCON913          ADDRESS OF RETRY ROUTINE
         STABUILD CODE=913,RTN=(R4),ADDR=STAETWO,FLAG=(ONE,NMSG),      X
               MF=E
         L     R4,VCON13           ADDRESS OF RETRY ROUTINE
         STABUILD CODE=(113,213,313,A13),RTN=(R4),ADDR=STAETHRE,       X
               FLAG=(MUL,NMSG),LIST=STAELST,                           X
               MF=E
         L     R4,VCONLTST         ADDRESS OF RETRY ROUTINE
         STABUILD CODE=000,RTN=(R4),ADDR=STAEFOUR,FLAG=(ALL,END),      X
               MF=E
         STAEPARM FLAG=(CP),PSEUDO=$PSEUDO,LIST=STAEONE,ADDR=STAEPARM, X
               MF=E
         L     R2,STAEADDR         ADDRESS OF STAE INTERFACE ROUTINE
         STAE  (R2),CT,PARAM=STAEPARM,MF=(E,STAELIST) ISSUE STAE
         LR    R1,R9               POINT TO PARSE PARAMETER LIST
*  WHEN THE PARSE SERVICE ROUTINE IS ENTERED REGISTER 1 POINTS TO THE
*  FOLLOWING PARAMETER LIST-
*     1ST WORD POINTER TO THE USER PROFILE TABLE
*     2ND WORD POINTER TO THE ENVIRONMENT CONTROL TABLE
*     3RD WORD POINTER TO THE COMMAND PROCESSOR'S EVENT CONTROL BLOCK
*     4TH WORD POINTER TO PARSE CONTROL LIST
*     5TH WORD POINTER TO THE PARSE ANSWER PLACE
*     6TH WORD POINTER TO THE COMMAND BUFFER
*     7TH WORD POINTER TO THE USER WORK AREA (VALIDITY EXIT ROUTINE)
*  PARSE THE RENAME COMMAND
         LINK  EP=IKJPARS          PARSE RENAME COMMAND
         L     R9,ANSPLACE         PARSE PUT RENPARM ADDRESS HERE
         ST    R9,$RETRY0+R9*F4    SAVE REG FOR STAE RECOVERY
         L     R12,VCONRN2         LOAD ADDRESS OF SECOND CSECT
         ST    R12,$RETRY0+R12*F4  SAVE BASE REG FOR STAE RECOVERY
         BR    R12                 GO TO SECOND CSECT
         EJECT
*
*              WORKAREA - REQUIRED CONSTANTS (IKJEHREN)
*
VCONPARS DC    V(IKJEHPDL)         PARSE PARAMETERS RENAME COMMAND
VCONRN2  DC    V(IKJEHRN2)         ENTRY POINT SECOND CSECT
VCON713  DC    V(IKJEH713)         713 ABEND ROUTINE
VCON913  DC    V(IKJEH913)         913 ABEND ROUTINE
VCON13   DC    V(IKJEH13)          13 TYPE ABENDS ROUTINE
VCONLTST DC    V(IKJEHTST)         RETRY ROUTINE
DCB      DCB   DSORG=PO,MACRF=W
DCBEND   EQU   *                   END OF DCB
OPN      OPEN  (0,OUTPUT),MF=L     LIST FORM OF OPEN
OPENEND  EQU   *                   END OF OPEN
CLSE     CLOSE 0,MF=L              LIST FORM OF CLOSE
CLOSEEND EQU   *                   END OF CLOSE
PUTL     PUTLINE  MF=L             LIST FORM OF PUTLINE
PUTLEND  EQU   *                   END OF PUTLINE EXPANSION
*  KEEP CAMLST MACROS TOGETHER, MOVED AS ONE BLOCK
*              RENAME MACRO CAMLST
RENLST   CAMLST RENAME,0,0,0       RENAME MACRO
*        UNCATALOG MACRO CAMLST
UNCLST   CAMLST UCATDX,0           UNCATALOG MACRO
*              LOCATE MACRO CAMLST (BY DATA SET NAME)
LNAME    CAMLST NAME,0,,0          LOCATE MACRO
*              CATALOG MACRO CAMLST
CLST     CAMLST CATBX,0,,0         CATALOG MACRO
CLSTEND  EQU   *                   END OF CAMLSTS
*              END OF CAMLST MACROS
         EJECT
IKJEHRN2 CSECT
         ENTRY IKJEH713,IKJEH913,IKJEH13,IKJEHTST
*  CONTROL IS PASSED HERE FROM IKJEHREN WHEN INITIALIZATION IS COMPLETE
*  REGISTER 12 CONTAINS ENTRY POINT ADDRESS
*  REGISTER 11 CONTAINS WORKAREA ADDRESS
*  REGISTER 15 CONTAINS THE PARSE RETURN CODE
*  REGISTER 9 CONTAINS PARSE DSECT ADDRESS
         USING IKJEHRN2,R12        ESTABLISH ADDRESSABILITY FOR PROGRAM
         LA    R7,RN2CNSTS         POINT TO CONSTANTS
         USING RN2CNSTS,R7         ADDRESSABILITY FOR CONSTANTS
         ST    R7,$RETRY0+R7*F4    SAVE REG FOR STAE RECOVERY    A48485
         USING IHADCB,R1X          ESTABLISH ADDRESSABILITY WORKAREA
         LTR   R15,R15             TEST PARSE RETURN CODE
         BNZ   PARSEERR            NON-ZERO RETURN CODE, PARSE ERROR
* ESTABLISH ADDRESSABILITY FOR PARSE DSECT
         USING IKJPARMD,R9         ESTABLISH ADDRESSABILITY PARSE PDL
*  THE FORMAT OF THE LIST RETURNED FROM PARSE IS AS FOLLOWS-
*  TWO SIX WORD LISTS LABELED DSNAME1 AND DSNAME2 AS FOLLOWS
*     1ST WORD POINTER TO DATA SET NAME
*     2ND WORD BYTE 0-1 LENGTH OF DATA SET NAME (EXCLUDING QUOTES)
*              BYTE 2   FLAGS (BIT 1 IS 1 IF DATA SET NAME QUOTED)
*              BYTE 3   RESERVED
*     3RD WORD POINTER TO MEMBER NAME (ZERO IF MISSING)
*     4TH WORD BYTE 0-1 LENGTH OF MEMBER NAME (EXCLUDING PARENTHESES)
*              BYTE 2   FLAGS
*              BYTE 3   RESERVED
*     5TH WORD POINTER TO PASSWORD (ZERO IF MISSING)
*     6TH WORD BYTE 0-1 LENGTH OF PASSWORD
*              BYTE 2   FLAGS
*              BYTE 3   RESERVED
*
*     AN ADDITIONAL TWO BYTES LABELED RENTYPE
*        A 0 INDICATES NO KEYWORD SPECIFIED
*        A 1 INDICATES 'ALIAS' KEYWORD SPECIFIED
*  NOW PROCESS FIRST DATA SET NAME
         SR    R2,R2               ZERO REGISTER
*  SET REGISTER 5 AS INDEX FOR PARSE DESCRIPTOR ENTRY FIRST DSNAME
         LA    R5,DSNAME1          POINT TO PDE FOR FIRST DSNAME
         C     R2,F0(R5)           IS DSNAME POINTER ZERO
         BE    NODSN1              ERROR, NO DSNAME1 SPECIFIED
*  MOVE FIRST DATA SET NAME TO FIRST DSLENGTH AND DSNAME BUFFER
         L     R4,F0(R5)           ADDRESS OF DATA SET NAME FROM PARSE
         LH    R2,F4(R5)           LENGTH OF DATA SET NAME FROM PARSE
         LTR   R2,R2               TEST DATA SET LENGTH
         BZ    NODSN1              LENGTH ZERO IS ERROR
         STH   R2,DSLO             SAVE DATA SET LENGTH
         BCTR  R2,R0               DECREMENT FOR EXECUTE INSTRUCTION
         LA    R3,DSNO             ADDRESS OF BUFFER FIRST DSNAME
         EX    R2,MOVEINST         MOVE FIRST DATA SET NAME TO BUFFER
*  MOVE FIRST DATA SET NAME TO MESSAGE BUFFER
         LA    R3,DSNMSG1          POINT TO DSNAME1 MESSAGE BUFFER
         TM    F6(R5),QUOTEMSK     IS FIRST DSNAME FULLY QUALIFIED
         BZ    SAVUNQL1            NO, SAVE UNQUALIFIED DSNAME
         BAL   R14,QUOTEDSN        SAVE QUOTED DATA SET NAME
SAVELN1  STH   R2,DSNMSGL1         SAVE LENGTH FOR MESSAGE INSERTIONS
*  MOVE MEMBER NAME TO MESSAGE BUFFER
         LH    R2,F12(R5)          LENGTH OF MEMBER NAME
         LTR   R2,R2               WAS MEMBER NAME SPECIFIED
         BZ    QTEST1              NO MEMBER SPECIFIED
         LA    R3,MEMMSG1          MEMBER MESSAGE BUFFER
         BAL   R14,MEMBUFF         SAVE MEMBER NAME
         STH   R2,MEMMSGL1         SAVE LENGTH OF INSERTION
QTEST1   TM    F6(R5),QUOTEMSK     DSNAME FULLY QUALIFIED
         BZ    ADUSRID1            NO, GO ADD USERID
NOMEM1   MVC   DSBLO(F46),DSLO     FIRST DSLENGTH-DSNAME TO * BUFFER
SCANDSN1 LA    R2,DSNBUFFO         REGISTER 2 POINTS TO FIRST DSNAME
         LH    R3,DSBLO            LENGTH OF FIRST DATA SET NAME
         L     R15,VCONRN3         ADDRESS OF ASTERISK SCAN ROUTINE
         BALR  R14,R15             GO SCAN FOR ASTERISK
         B     STARERR4            ERROR
         B     STARERR8            ERROR
         MVC   STARLEV1(F1),STARLEV2 SAVE ASTERISK LEVEL
         MVC   STARADR1(F4),STARADR2 SAVE ASTERISK ADDRESS
*  NOW PROCESS SECOND DATA SET NAME
         SR    R2,R2               ZERO REGISTER
*  SET REGISTER 5 AS INDEX FOR PARSE DESCRIPTOR ENTRY SECOND DSNAME
         LA    R5,DSNAME2          POINT TO PDE FOR SECOND DSNAME
         C     R2,F0(R5)           IS DSNAME POINTER ZERO
         BE    NODSN2              NO DSNAME2 SPECIFIED, CHECK IF VALID
*  MOVE SECOND DATA SET NAME TO SECOND DSLENGTH AND DSNAME BUFFER
         L     R4,F0(R5)           ADDRESS OF DATA SET NAME FROM PARSE
         LH    R2,F4(R5)           LENGTH OF DATA SET NAME FROM PARSE
         LTR   R2,R2               TEST DATA SET LENGTH
         BZ    NODSN2              LENGTH ZERO, CHECK IF VALID
         STH   R2,DSLN             SAVE DATA SET LENGTH
         BCTR  R2,R0               DECREMENT FOR EXECUTE INSTRUCTION
         LA    R3,DSNN             ADDRESS OF BUFFER SECOND DSNAME
         EX    R2,MOVEINST         MOVE SECOND DATA SET NAME TO BUFFER
*  MOVE SECOND DATA SET NAME TO MESSAGE BUFFER
         LA    R3,DSNMSG2          POINT TO DSNAME2 MESSAGE BUFFER
         TM    F6(R5),QUOTEMSK     IS SECOND DSNAME FULLY QUALIFIED
         BZ    SAVUNQL2            NO, SAVE UNQUALIFIED DSNAME
         BAL   R14,QUOTEDSN        SAVE QUOTED DATA SET NAME
SAVELN2  STH   R2,DSNMSGL2         SAVE LENGTH FOR MESSAGE INSERTIONS
*  MOVE MEMBER NAME TO MESSAGE BUFFER
MEM2     LH    R2,F12(R5)          LENGTH OF MEMBER NAME
         LTR   R2,R2               MEMBER SPECIFIED
         BZ    QTEST2              NO MEMBER SPECIFIED
         LA    R3,MEMMSG2          MEMBER MESSAGE BUFFER
         BAL   R14,MEMBUFF         SAVE MEMBER NAME
         STH   R2,MEMMSGL2         SAVE LENGTH OF INSERTION
         CLI   MEM2SW,SWON         IS MEM2 SWITCH ON
         BE    GOODSCAN            YES, NO DSN2, CONTINUE PROCESSING
QTEST2   TM    F6(R5),QUOTEMSK     DSNAME FULLY QUALIFIED
         BZ    ADUSRID2            NO, ADD USERID
NOMEM2   MVC   DSBLN(F46),DSLN     SECOND DSLENGTH-DSNAME TO * BUFFER
SCANDSN2 LA    R2,DSNBUFFN         REGISTER 2 POINTS TO SECOND DSNAME
         LH    R3,DSBLN            LENGTH OF SECOND DATA SET NAME
         L     R15,VCONRN3         ADDRESS OF ASTERISK SCAN ROUTINE
         BALR  R14,R15             GO SCAN FOR ASTERISK
         B     STARER4             ERROR
         B     STARER8             ERROR
         B     GOODSCAN            SUCCESSFUL SCAN
QUOTEDSN MVI   F0(R3),QUOTE        MOVE QUOTE
         LA    R3,F1(R3)           POINT PAST QUOTE
         EX    R2,MOVEINST         MOVE DATA SET NAME TO BUFFER
         LA    R3,F1(R2,R3)        POINT PAST DSNAME
         MVI   F0(R3),QUOTE        MOVE QUOTE
         LA    R2,F7(R2)           1 EXECUTE, 4 HEADER, 2 QUOTES
         BR    R14                 RETURN
MEMBUFF  L     R4,F8(R5)           POINT TO MEMBER NAME
         BCTR  R2,R0               DECREMENT FOR EXECUTE
         EX    R2,MOVEINST         MOVE MEMBER TO MESSAGE BUFFER
         LA    R2,F5(R2)           1 FOR EXECUTE, 4 FOR HEADER
         BR    R14                 RETURN
*  NOW CHECK THAT ASTERISK IS AT SAME LEVEL IN BOTH DATA SET NAMES
GOODSCAN CLC   STARLEV1,STARLEV2   COMPARE LEVEL INDICATORS
         BNE   STARERR             ERROR, *'S NOT AT SAME LEVEL
*  NOW CHECK IF ASTERISK FOUND
         CLI   STARLEV1,ZERO       IS LEVEL INDICATOR ZERO
         BE    QUOTETST            IF SO, NO ASTERISK FOUND
         SR    R2,R2               ZERO REGISTER
         LA    R5,DSNAME1          POINT TO PARSE PDE
         C     R2,F8(R5)           WAS MEMBER SPECIFIED FIRST DSNAME
         BNE   STARMEM1            YES, ERROR
         C     R2,F32(R5)          WAS MEMBER SPECIFIED SECOND DSNAME
         BNE   STARMEM2            YES, ERROR
*
*  A VALID ASTERISK HAS BEEN FOUND IN THE DATA SET NAMES.  NOW
*  DETERMINE IF ASTERISK WAS IN INDEX LEVEL OR DATA SET NAME LEVEL
*  (LAST POSITION) OF DATA SET NAME.  SEPARATE ENTRY TO IKJEHCIR
*  (CATALOG INFORMATION ROUTINE) AND SEPARATE PROCESSING REQUIRED FOR
*  EACH CASE.
*
*  INITIALIZE CATALOG INFORMATION ROUTINE PARAMETER LIST
         LH    R0,MINMAX           LENGTH OF GETMAIN AREA      @YL026YB
         LR    R3,R0               SAVE LENGTH                 @YL026YB
         O     R0,SUBPOL1          SET SUBPOOL NUMBER          @YL026YB
         GETMAIN R,LV=(0)          WORKAREA FOR CIR            @YL026YB
         LTR   R15,R15             TEST RETURN CODE            @YL026YB
         BZ    CIRPM               CONTINUE NORMALLY           @YL026YB
         SR    R8,R8               CLEAR ASTERISK INDICATOR    @YL026YB
         B     NOSPACE             GO WRITE MESSAGE            @YL026YB
CIRPM    LR    R2,R1               POINT TO CIR WORKAREA       @YL026YB
         STH   R3,F0(R2)           SAVE LENGTH OF WORKAREA     @YL026YB
         ST    R2,WORK1PTR         SET POINTER TO WORK AREA 1
         LA    R2,WRK2AREA         ADDRESS OF WORK AREA 2
         ST    R2,WORK2PTR         SET POINTER TO WORK AREA 2
         LA    R2,NAMETTR          ADDRESS OF NAME-TTR BUFFER
         ST    R2,NAMEPTR          SET POINTER TO NAME-TTR BUFFER
         LA    R2,CVOLID           ADDRESS OF USER CAT. NAME   @YL026YB
         ST    R2,VOLIDPTR         SET PTR TO USER CAT. NAME   @YL026YB
         LA    R2,PASSWKD          ADDRESS OF CATALOG PASSWORD @YL026YB
         ST    R2,PASSPTR          SET PTR TO CATALOG PASSWORD @YL026YB
         MVC   STARBUFF(F52),DSNMESGL SAVE ASTERISK NAME
*  NOW MOVE INDEX STRUCTURE (FIRST DATA SET NAME)
         XC    PASSPTR,PASSPTR     ZERO NO CAT. PASSWORD       @YL026YB
         XC    VOLIDPTR,VOLIDPTR   ZERO FOR SEARCH DEFAULT     @YL026YB
         LA    R3,NAMETTR          ADDRESS OF CIR BUFFER
         LA    R4,DSNBUFFO         POINT TO FIRST DATA SET NAME
         L     R2,STARADR1         LOAD POINTER TO ASTERISK
         LR    R5,R2               POINT TO ASTERISK
         BCTR  R5,R0               POINT TO PERIOD BEFORE ASTERISK
         MVI   F0(R5),BLANK        BLANK OUT PERIOD FOR CIR
         SR    R2,R4               LENGTH OF INDEX STRUCTURE AND BLANK
         BCTR  R2,R0               DECREMENT FOR EXECUTE INSTRUCTION
         EX    R2,MOVEINST         INDEX STRUCTURE AND BLANK TO BUFFER
         STH   R2,INDEXSZE         SAVE LENGTH OF INDEX STRUCTURE
*  CATALOG INFORMATION ROUTINE PARAMETER LIST IS NOW COMPLETE EXCEPT
*  FOR OPTION BYTE.  NOW DETERMINE OPTION NEEDED.
         LA    R5,F2(R2)           LENGTH OF DATA SET NAME TO ASTERISK
         CH    R5,DSBLO            COMPARE TO LENGTH OF DATA SET NAME
*  IF LENGTHS ARE EQUAL THE ASTERISK IS IN THE LAST POSITION OF THE
*  DATA SET NAME AND THE OPTION FOR THE CATALOG INFORMATION ROUTINE IS
*  X'01' REQUESTING DSNAMES.  IF LENGTHS NOT EQUAL THE OPTION IS X'02'
*  REQUESTING ALL NAMES                                        @YL026YB
         BNE   CIRINDEX            PROCESS INDEX NAMES
CIRNAMES MVI   CIRPARM,NAMESOPT    SET DSNAMES OPTION FOR CIR
MORNAMES L     R15,CIRADDR         ADDRESS OF CIR
         LA    R1,CIRPARM          POINT TO CIR PARAMETER LIST
         CALL  (15)                GO TO CIR
         LTR   R15,R15             TEST RETURN CODE
         BNZ   CIRLTST             NONZERO RETN CODE IS ERROR  @YL026YB
         L     R8,WORK1PTR         REG PTS TO CIR   NAMES      @YL026YB
*                                  AND IS USED TO INDEX THROUGH LIST
         MVC   WKLENGTH(F4),F0(R8)  SAVE WKAREA LENGTH FIELDS  @YL026YB
         LA    R8,F4(R8)           BUMP PTR TO 1ST ENTRY CODE  @YL026YB
CIRNTEST ST    R8,$RETRY0+R8*F4    SAVE REG FOR STAE RECOVERY
         CLI   F0(R8),NAMETST      IS IT A DATA SET NAME ENTRY
         BE    BLDNAME             YES,GO PROCESS DSNAME ENTRY @YL026YB
         CLI   F0(R8),ENDTEST      TEST FOR END OF LIST
         BE    ENDLIST             YES, GO PROCESS END OF LIST
         LA    R8,F9(R8)           POINT TO NEXT ENTRY         @YL026YB
         B     CIRNTEST            GO PROCESS NEXT ENTRY       @YL026YB
CIRINDEX MVI   CIRPARM,INDEXOPT    SET INDEX NAMES OPTION FOR CIR
MORINDXS L     R15,CIRADDR         ADDRESS OF CIR
         LA    R1,CIRPARM          POINT TO CIR PARAMETER LIST
         CALL  (15)                GO TO CIR
         LTR   R15,R15             TEST RETURN CODE
         BNZ   CIRLTST             NONZERO RETURN CDE IS ERROR @YL026YB
         L     R8,WORK1PTR         REG PTS TO CIR  NAMES       @YL026YB
*                                  AND IS USED TO INDEX THROUGH LIST
         MVC   WKLENGTH(F4),F0(R8) SAVE WK AREA LENGTH FIELDS  @YL026YB
         LA    R8,F4(R8)           BUMP PTR TO 1ST ENTRY CODE  @YL026YB
CIRITEST ST    R8,$RETRY0+R8*F4    SAVE REG FOR STAE RECOVERY
         CLI   F0(R8),INDEXTST     IS IT A NONVSAM NAME ENTRY  @YL026YB
         BE    BLDNAME             YES, GO PROCESS LIST ENTRY  @YL026YB
         CLI   F0(R8),ENDTEST      TEST FOR END OF LIST
         BE    ENDLIST             YES, GO PROCESS END OF LIST
         LA    R8,F45(R8)          POINT TO NEXT ENTRY         @YL026YB
         B     CIRITEST            GO PROCESS NEXT ENTRY       @YL026YB
BLDNAME  L     R15,VCONRN4         ADDRESS OF CIR NAME ROUTINE @YL026YB
         BALR  R14,R15             GET NAME FROM CIR           @YL026YB
         B     ERRORDS1            GO UPDATE MESSAGE BUFFER    @YL026YB
         B     STARPROC            ERROR FOUND GO TO NEXT NAME @YL026YB
ENDLIST  CLI   STARSW,SWON         HAS * VALUE BEEN RENAMED    @YL026YB
         BE    CLEANUP             YES, GO CLEANUP
         MVI   STARSW,SWOFF        NO, TURN OFF SWITCH
         B     CIRERROR            GO PUT OUT MESSAGE
*  NO ASTERISK FOUND IN DATA SET NAMES.  CHECK IF DATA SET NAMES ARE
*  FULLY QUALIFIED (IN QUOTES).  IF NOT ADD QUALIFIERS TO EITHER OR
*  BOTH DATA SET NAMES AS NEEDED.
QUOTETST LA    R5,DSNAME1          POINT TO PDE
         TM    F6(R5),QUOTEMSK     IS FIRST DSNAME FULLY QUALIFIED
         BZ    QUALIFY1            IF NOT, GO QUALIFY FIRST DSNAME
QUAL2    LA    R5,DSNAME2          POINT TO PDE
         SR    R1,R1               ZERO REGISTER
         C     R1,F0(R5)           IS SECOND DSNAME POINTER ZERO
         BE    MEMCHECK            YES, DO NOT QUALIFY SECOND DSNAME
         TM    F6(R5),QUOTEMSK     IS SECOND DSNAME FULLY QUALIFIED
         BZ    QUALIFY2            IF NOT, GO QUALIFY IT
MEMCHECK SR    R2,R2               ZERO REGISTER
         LA    R5,DSNAME1          POINT TO PARSE PDE
         C     R2,F8(R5)           IS FIRST MEMBER NAME POINTER ZERO
         BNE   MEMTEST2            NO, GO CHECK SECOND DSNAME
         C     R2,F32(R5)          IS SECOND MEMBER POINTER ZERO
         BNE   BADDSN2             NO, ERROR, MEMBER SECOND NAME ONLY
         CH    R2,RENTYPE          WAS ALIAS SPECIFIED
         BNE   BADKEYWD            YES, ERROR, INVALID USE OF ALIAS
         B     ALLOCDS             OK, GO ALLOCATE DATA SET
SAMENAME MVC   DSLN(F46),DSLO      SAME PDS FOR BOTH NAMES
         B     ALLOCDS             GO ALLOCATE DATA SET
MEMTEST2 C     R2,F32(R5)          IS SECOND MEMBER POINTER ZERO
         BE    BADDSN4             YES, ERROR, MEMBER FIRST NAME ONLY
         C     R2,F24(R5)          IS SECOND DSNAME POINTER ZERO
         BE    SAMENAME            YES, OK, DEFAULT TO FIRST DSNAME
         CLC   DSLO(F46),DSLN      SAME PDS BOTH DSNAMES
         BNE   BADDSN5             NO, ERROR, DIFFERENT PDS'S
*  BOTH DSNAMES ARE NOW FULLY QUALIFIED.  NOW ALLOCATE FIRST DATA SET
ALLOCDS  LA    R6,DAIR08           POINT TO DAIR ENTRY 08
         USING DAPB08,R6           ADDRESSABILITY FOR DAIR ENTRY 08
         MVC   DA08DDN(F8),DA08SER BLANK DDNAME FIELD
         MVC   DA08PSWD(F8),DA08SER BLANK PASSWORD FIELD
         L     R4,F16(R5)          POINTER TO PASSWORD
         LTR   R4,R4               TEST PASSWORD POINTER
         BZ    NOPASWRD            ZERO POINTER INDICATES NO PASSWORD
         LA    R3,DA08PSWD         POINT TO PASSWORD FIELD IN DAIR LIST
         LH    R2,F20(R5)          LENGTH OF PASSWORD
         BCTR  R2,R0               DECREMENT FOR EXECUTE INSTRUCTION
         EX    R2,MOVEINST         MOVE PASSWORD TO DAIR LIST
NOPASWRD LA    R1,DAIRPARM         POINT TO DAIR GENERAL PARAMETER LIST
         MVI   STARSW,SWON         TURN STAR SWITCH ON
         MVI   CIRFLAG,SWON        TURN CIR FLAG ON
         L     R15,DAIRADDR        ADDRESS OF DAIR
         ST    R6,DAPLDAPB-DAPL(R1) ENTRY PARM BLOCK TO DAIR LIST
         CALL  (15)                GO TO DAIR (ALLOCATE DATA SET)
         LTR   R15,R15             TEST DAIR RETURN CODE
         BNZ   DAIRERR             NONZERO RETURN CODE IS DAIR ERROR
         MVI   UNALOCSW,SWON       TURN UNALLOCATE SWITCH ON
         MVC   DDNAME1(F8),DA08DDN SAVE DDNAME
*  NOW DETERMINE IF RENAME IS FOR ENTIRE DATA SET OR FOR A MEMBER OF
*  A PARTITIONED DATA SET
         SR    R2,R2               ZERO REGISTER
         CLI   DA08DSO,PDSTEST     IS DATA SET A PDS
         DROP  R6                  DAPB08 NO LONGER NEEDED
         LA    R5,DSNAME1          POINT TO PARSE PDE
         BE    MEMBRTST            IF YES, WAS A MEMBER SPECIFIED
*  DATA SET IS NOT PARTITIONED.  A MEMBER SPECIFIED IS AN ERROR
         C     R2,F8(R5)           IS FIRST MEMBER NAME POINTER ZERO
         BNE   BADDSN1             ERROR (EXPLAINED ABOVE)
*  THE RENAME IS NOT FOR A MEMBER OF A PARTITIONED DATA SET, THEREFORE
*  RENAME ENTIRE DATA SET.
RENSEQDS LH    R2,DSLO             LENGTH OF FIRST DATA SET NAME
         BCTR  R2,R0               DECREMENT FOR EXECUTE INSTRUCTION
         LA    R4,DSNO             POINT TO FIRST DATA SET NAME
*  BLANK WORK DATA SET NAME BUFFERS
         MVI   DSNAMEU,BLANK       BLANK
         MVC   DSNAMEU+F1(F44),DSNAMEU UNCATALOG MACRO BUFFER
         MVC   DSNAME4(F45),DSNAMEU CATALOG MACRO BUFFER (2ND DSNAME)
         MVC   DSNAME3(F44),DSNAMEU LOCATE MACRO BUFFER
         MVC   OLDNAME(F44),DSNAMEU RENAME MACRO BUFFER (OLDNAME)
         MVC   NEWNAME(F44),DSNAMEU RENAME MACRO BUFFER (NEWNAME)
*  NOW MOVE DSNAMES TO CAMLST MACRO BUFFERS
         LA    R3,DSNAMEU          POINT TO UNCATALOG DSNAME BUFFER
         EX    R2,MOVEINST         FIRST DSNAME TO UNCATALOG BUFFER
         LA    R3,DSNAME3          POINT TO LOCATE DSNAME BUFFER
         EX    R2,MOVEINST         FIRST DSNAME TO LOCATE BUFFER
         LA    R3,OLDNAME          POINT TO RENAME DSNAME(OLD) BUFFER
         EX    R2,MOVEINST         FIRST DSNAME TO RENAME BUFFER
         LH    R2,DSLN             LENGTH OF SECOND DATA SET NAME
         BCTR  R2,R0               DECREMENT FOR EXECUTE
         LA    R4,DSNN             POINT TO SECOND DATA SET NAME
         LA    R3,DSNAME4          POINT TO CATALOG DSNAME BUFFER
         EX    R2,MOVEINST         SECOND DSNAME TO CATALOG BUFFER
         LA    R3,NEWNAME          POINT TO RENAME DSNAME(NEW) BUFFER
         EX    R2,MOVEINST         SECOND DSNAME TO RENAME BUFFER
*  NOW ISSUE LOCATE TO GET VOLUME INFORMATION FOR RENAME
         LA    R2,DSNAME3          LOCATE DSNAME BUFFER
         ST    R2,LOCNAME2         SET POINTER TO DSNAME BUFFER
         LA    R2,LOCAREA1         LOCATE WORKAREA
         ST    R2,LOCNAME4         SET POINTER TO WORKAREA
         LOCATE LOCNAME            ISSUE LOCATE
         LTR   R15,R15             TEST LOCATE RETURN CODES
         BNZ   LOCERROR            NONZERO RETURN CODE IS LOCATE ERROR
         CLI   ISWITCH,ENDTEST     WAS THIS A VALIDITY CHECK
         BE    OKINDEX             YES, GO TURN OFF SWITCH
*  NOW CHECK NUMBER OF VOLUMES.  MORE THAN 1 VOLUME IS ERROR
         LA    R2,VOLCOUNT         SET REGISTER TO 1
         CH    R2,LOCAREA1         COMPARE 1 TO NUMBER OF VOLUMES
         BL    OVR20VOL            ERROR, MORE THAN 1 VOLUME
*  COMPUTE LENGTH OF VOLUME LIST AND MOVE VOLUME
*  LIST TO RENAME AND CATALOG CAMLSTS
         LA    R2,VOLLENTH         LENGTH OF EACH VOLUME ENTRY
         MH    R2,LOCAREA1         MULTIPLY BY NUMBER OF VOLUMES
         LA    R2,F1(R2)           ADD TWO FOR VOLUME COUNT, DECREMENT-
*                                  ONE FOR EXECUTE INSTRUCTION
         LA    R3,VOLIST1          ADDRESS OF RENAME VOLUME LIST
         ST    R3,RENAME4          POINT TO RENAME VOLUME LIST
         LA    R4,LOCAREA1         LOCATE WORKAREA (VOLUME LIST)
         EX    R2,MOVEINST         MOVE VOLUME LIST TO RENAME MACRO
         LA    R3,VOLIST2          ADDRESS OF CATALOG VOLUME LIST
         ST    R3,CATLST4          POINT TO CATALOG VOLUME LIST
         EX    R2,MOVEINST         MOVE VOLUME LIST TO CATALOG MACRO
*  NOW SEE IF NEW NAME IS ALREADY CATALOGED
         LA    R2,DSNAME4          DSNAME POINTER
         ST    R2,LOCNAME2         TO LOCATE LIST
         LOCATE LOCNAME            ISSUE LOCATE
         LTR   R15,R15             TEST RETURN CODE
         BZ    NMEONVOL            NAME FOUND IS ERROR
*  PREVENT ATTENTION INTERRUPTIONS FROM NOW UNTIL AFTER UNALLOCATION
         STAX  DEFER=YES           DEFER ATTENTION INTERRUPTS
*  NOW RENAME DATA SET
         LA    R2,OLDNAME          OLD DSNAME
         ST    R2,RENAME2          SET POINTER TO OLD DSNAME BUFFER
         LA    R2,NEWNAME          NEW DSNAME
         ST    R2,RENAME3          SET POINTER TO NEW DSNAME BUFFER
         SR    R0,R0               THIS REGISTER ZEROED FOR RENAME
         RENAME RENAMLST           ISSUE RENAME
         LTR   R15,R15             TEST RENAME RETURN CODE
         BNZ   RENAMERR            RENAME ERROR
*  NOW CATALOG NEW DATA SET NAME
CATNEWDS LA    R2,DSNAME4          CATALOG DSNAME BUFFER
         ST    R2,CATLST2          SET POINTER TO CATALOG BUFFER
*  ISSUE CATALOG MACRO TO CATALOG NEW DATA SET
         CATALOG CATLST            ISSUE CATALOG
         LTR   R15,R15             TEST CATALOG RETURN CODE
         BNZ   RESTORE             CATALOG ERROR, RESTORE STATUS
*  NOW UNCATALOG OLD DATA SET
         LA    R2,DSNAMEU          UNCATALOG DSNAME BUFFER
         ST    R2,UNCAT2           SET POINTER TO UNCATALOG NAME BUFFER
*  ISSUE CATALOG MACRO TO UNCATALOG OLD DATA SET NAME
         SR    R0,R0               THIS REGISTER ZEROED FOR CATALOG
         CATALOG UNCATLST          ISSUE CATALOG
         LTR   R15,R15             TEST CATALOG RETURN CODE
         BNZ   UNCATBAD            CATALOG ERROR
*  NOW UNALLOCATE DATA SET
UNALOCDS LA    R6,DAIR18           POINT TO DAIR ENTRY 18
         USING DAPB18,R6           ADDRESSABILITY DAIR ENTRY 18
*  IF RENAME WAS SUCCESSFUL UNALLOCATE BY DSNAME, BUT IF ERROR OR
*  RENAME WAS FOR PDS MEMBER UNALLOCATE BY DDNAME
         SR    R3,R3               ZERO REGISTER
         CLI   ERRORSW,SWON        DID ERROR OCCUR
         BE    UNALOC              YES, GO UNALLOCATE DDNAME
         MVI   DA18CTL,PERMALC     UNALLOC PERMANENTLY ALLOC DS
         LA    R5,DSNAME1          POINT TO PARSE PDE
         C     R3,F8(R5)           WAS MEMBER SPECIFIED
         BNE   UNALOC              YES, GO UNALLOCATE DDNAME      M2009
         LA    R3,DSLO             POINT TO DSLENGTH-DSNAME
         ST    R3,DA18PDSN         SET DSNAME POINTER
         MVC   DA18DDN(F8),DA18JBNM BLANK DDNAME
         B     UNALOCGO            GO UNALLOCATE
UNALOC   MVI   DA18CTL,ZERO        CLEAR CONTROL BYTE
UNALOCDD ST    R3,DA18PDSN         XERO DSNAME POINTER
         MVC   DA18DDN(F8),DDNAME1 MOVE DDNAME TO UNALLOCATE LIST
UNALOCGO L     R15,DAIRADDR        LOAD DAIR ADDRESS
         LA    R1,DAIRPARM         POINT TO DAIR GENERAL PARAMETER LIST
         ST    R6,DAPLDAPB-DAPL(R1) ENTRY PARM BLOCK TO DAIR LIST
         DROP  R6                  DAPB18 NO LONGER NEEDED
         CALL  (15)                GO TO DAIR (UNALLOCATE DATA SET)
         MVI   UNALOCSW,SWOFF      TURN UNALLOCATE SWITCH OFF
         MVI   ERRORSW,SWOFF       TURN ERROR SWITCH OFF
*  NOW ALLOW ATTENTION INTERRUPTIONS
         STAX  DEFER=NO            ALLOW ATTENTION INTERRUPTS
*  FINISHED PROCESSING THIS DATA SET.  CHECK IF PROCESSING ASTERISK
*  NAMES AND IF SO CONTINUE ASTERISK PROCESSING, OTHERWISE CLEANUP
*  AND RETURN.
IKJEHTST EQU   *                   ALIAS FOR LISTEST
LISTEST  CLI   ENDERROR,SWON       CAN PROCESSING CONTINUE
         BE    CLUPRCC             NO, GO CLEANUP AND RETURN   @ZA01485
         L     R2,STAEADDR         ADDRESS OF STAE INTERFACE ROUTINE
         STAE  (R2),CT,PARAM=STAEPARM,MF=(E,STAELIST) ISSUE STAE
         LTR   R8,R8               TEST FOR PROCESSING ASTERISK NAMES
         BNZ   STARPROC            YES, CONTINUE PROCESSING
*  FINISHED PROCESSING, CLEANUP
*  NOW CHECK IF AN ERROR HAS OCCURRED.  IF SO, THE STACK MUST BE
*  FLUSHED AND THE INPUT QUEUE CLEARED.
CLEANUP  CLI   STACKSW,SWON        IS STACK SWITCH ON
         BNE   STACKOK             NO ERROR, END NORMALLY
         LA    R1,IOPARM           POINT TO I/O PARAMETER LIST
         LA    R2,STACKPRM         POINT TO STACK PARM BLOCK
         ST    R2,IOPLIOPB-IOPL(R1) PARM BLOCK ADDRESS TO PARM LIST
         STACK DELETE=ALL,MF=(E,(1)) FLUSH STACK
         TCLEARQ INPUT             CLEAR ANYTHING TYPED AHEAD
STACKOK  EQU   *                   NORMAL RETURN FROM HERE
         L     R13,F4(R13)         POINT TO CALLER'S REGISTERS
         SR    R15,R15             CLEAR RETURN CODE           @ZA01485
         IC    R15,RCX             SET RC                      @ZA01485
         RETURN (14,12),T,RC=(15)  RESTORE REGISTERS AND RETURN
CLUPRCC  EQU   *                                               @ZA01485
         MVI   RCX,RC12            SET RC                      @ZA01485
         B     CLEANUP                                         @ZA01485
STARPROC CLI   CIRPARM,INDEXOPT    PROCESSING INDEX NAMES
         BE    CIRITEST            YES, GO PROCESS INDEX NAME
         B     CIRNTEST            NO, GO PROCESS DATA SET NAME
*  THIS SECTION APPENDS THE USERID TO THE FIRST DATA SET NAME
*  FIRST SEVEN BYTES OF PSCB IS USERID (RIGHT PADDED WITH BLANKS) AND
*  EIGHTH BYTE IS THE LENGTH OF THE USERID.
ADUSRID1 L     R4,UPTSAVE          ADDRESS OF PSCB
         LA    R3,DSNBUFFO         ADDRESS OF FIRST DSNAME BUFFER
         SR    R2,R2               ZERO REGISTER
         IC    R2,UPTPREFL-UPT(R4) LENGTH OF USERID
         LTR   R2,R2               CHECK PREFIX LENGTH FOR ZERO
         BZ    NOPREFX             NO PREFIXING                @YL026YB
         EX    R2,MOVE1            MOVE USERID TO FIRST DSNAME BUFFER
*  THIS ACTUALLY MOVED ONE EXTRA BYTE WHICH WILL NOW BE OVERLAID WITH
*  A PERIOD.
         AR    R3,R2               POINT PAST PERIOD
         MVI   F0(R3),PERIOD       MOVE IN A PERIOD
         LA    R3,F1(R3)           POINT PAST PERIOD           @YL026YB
         LA    R2,F1(R2)           - PLUS ONE FOR THE PERIOD   @YL026YB
NOPREFX  LA    R4,DSNO             ADDRESS OF DATA SET NAME    @YL026YB
         LH    R5,DSLO             LENGTH OF DATA SET NAME -
         AR    R2,R5               - ADDED TO LENGTH OF USERID -
         BCTR  R5,R0               DECREMENT FOR EXECUTE INSTRUCTION
         EX    R5,MOVEINST         MOVE DATA SET NAME TO USERID
         STH   R2,DSBLO            SAVE TOTAL DATA SET LENGTH
         CH    R2,MAXLENTH         CHECK LENGTH NOT GREATER THAN 44
         BH    DSNBIG1             IF SO, ERROR
         B     SCANDSN1            NOW GO CHECK FOR * QUALIFIERS
*  THIS SECTION APPENDS THE USERID TO THE SECOND DATA SET NAME
*  FIRST SEVEN BYTES OF PSCB IS USERID (RIGHT PADDED WITH BLANKS) AND
*  EIGHTH BYTE IS THE LENGTH OF THE USERID
ADUSRID2 L     R4,UPTSAVE          ADDRESS OF UPT              @YL026YB
         LA    R3,DSNBUFFN         ADDRESS OF SECOND DSNAME BUFFER
         SR    R2,R2               ZERO REGISTER
         IC    R2,UPTPREFL-UPT(R4) LENGTH OF USERID            @YL026YB
         LTR   R2,R2               CHECK PREFIXING LENGTH FOR ZERO
         BZ    NOPREX1             NO PREFIXING                @YL026YB
         EX    R2,MOVE1            MOVE USERID TO SECOND DSNAME BUFFER
*  THIS ACTUALLY MOVED ONE EXTRA BYTE WHICH WILL NOW BE OVERLAID WITH
*  A PERIOD.
         AR    R3,R2               POINT PAST PERIOD
         MVI   F0(R3),PERIOD       MOVE IN A PERIOD
         LA    R3,F1(R3)           POINT PAST PERIOD
         LA    R2,F1(R2)           - PLUS ONE FOR THE PERIOD   @YL026YB
NOPREX1  LA    R4,DSNN             ADDRESS OF DATA SET NAME    @YL026YB
         LH    R5,DSLN             LENGTH OF DATA SET NAME -
         AR    R2,R5               - ADDED TO LENGTH OF USERID
         BCTR  R5,R0               DECREMENT OFR EXECUTE INSTRUCTION
         EX    R5,MOVEINST         MOVE DATA SET NAME TO USERID
         STH   R2,DSBLN            SAVE TOTAL DATA SET LENGTH
         CH    R2,MAXLENTH         CHECK LENGTH NOT GREATER THAN 44
         BH    DSNBIG2             IF SO, ERROR
         B     SCANDSN2            NOW GO CHECK FOR * QUALIFIERS
*  FIRST DATA SET IS PARTITIONED.  CHECK IF MEMBER NAME SPECIFIED
MEMBRTST C     R2,F8(R5)           IS FIRST MEMBER NAME POINTER ZERO
         BE    RENSEQDS            PDS WITHOUT MEMBER
*  RENAME IS FOR A PDS MEMBER
*  BUILD DCB BEFORE OPEN (INSERT DDNAME OBTAINED FROM DAIR)
OKNAME   MVC   DCBDDNAM(F8),DDNAME1 MOVE DDNAME TO DCB
*  NOW OPEN DATA SET
         LA    R1,OPEN             ADDRESS OF OPEN LIST
         OPEN  ,MF=(E,(1))         OPEN DATA SET
*  NOW INITIALIZE STOW AND BLDL WORK AREAS TO BLANKS
         MVI   STOWOLD,BLANK       BLANK FIRST BYTE
         MVC   STOWOLD+F1(STOWEND-STOWOLD-F1),STOWOLD BLANK WORK AREA
*  MOVE BOTH MEMBER NAMES TO WORK AREA
         LA    R3,STOWOLD          OLD MEMBER NAME AREA
         L     R4,F8(R5)           POINT TO FIRST MEMBER NAME
         LH    R2,F12(R5)          LENGTH OF MEMBER NAME
         BCTR  R2,R0               DECREMENT FOR EXECUTE INSTRUCTION
         EX    R2,MOVEINST         MOVE OLD MEMBER NAME
         LA    R3,STOWNEW          NEW MEMBER NAME AREA
         L     R4,F32(R5)          POINT TO SECOND MEMBER NAME
         LH    R2,F36(R5)          LENGTH OF MEMBER NAME
         BCTR  R2,R0               DECREMENT FOR EXECUTE INSTRUCTION
         EX    R2,MOVEINST         MOVE NEW MEMBER NAME
*  NOW CHECK IF ALIAS KEYWORD SPECIFIED
         SR    R2,R2               ZERO REGISTER
         CH    R2,RENTYPE          WAS ALIAS SPECIFIED
         BNE   ALIASMEM            YES, GO PROCESS ALIAS NAME
*  ALIAS KEYWORD NOT SPECIFIED, USE STOW C OPTION TO CHANGE
*  MEMBER NAME
         STOW  IHADCB,STOWOLD,C    ISSUE STOW
         LTR   R15,R15             TEST RETURN CODE
         BNZ   STWERROR            STOW ERROR
*  STOW COMPLETE, NOW CLOSE DATA SET
CLOSEPDS LA    R1,CLOSE            ADDRESS OF CLOSE LIST
         CLOSE ,MF=(E,(1))         ISSUE CLOSE
*  DATA SET CLOSED
         B     UNALOCDS            GO UNALLOCATE DATA SET
*  ALIAS KEYWORD SPECIFIED, USE BLDL TO GET DIRECTORY INFORMATION FOR
*  OLD MEMBER NAME
*  FIRST INITIALIZE BLDL LIST
ALIASMEM LA    R2,F1               NUMBER OF ENTRIES
         STH   R2,BLDLCNT          SET COUNT IN BLDL LIST
         LA    R2,F76              LENGTH OF ENTRY
         STH   R2,BLDLLNTH         SET LENGTH IN BLDL LIST
         MVC   BLDLMEM(F8),STOWOLD MEMBER NAME TO BLDL LIST
*  USE BLDL TO GET DIRECTORY INFORMATION
         BLDL  IHADCB,BLDLCNT      ISSUE BLDL
         LTR   R15,R15             TEST BLDL RETURN CODE
         BNZ   BLDLERR             BLDL ERROR
*  MOVE DIRECTORY INFORMATION TO STOW WORK AREA
         MVC   STOWMEM(F11),BLDLMEM MEMBER AND TTR DATA TO STOW AREA
         MVC   STOWDATA(F63),BLDLDATA USER DATA AND FLAG BYTE
         OI    STOWDATA,ALIAS      INDICATE THAT MEMBER IS AN ALIAS
         MVC   STOWMEM(F8),STOWNEW NEW MEMBER NAME TO STOW WORK AREA
*  USE STOW TO CREATE ALIAS
         STOW  IHADCB,STOWMEM,A    ISSUE STOW
         LTR   R15,R15             TEST RETURN CODE
         BNZ   STWERROR            STOW ERROR
         B     CLOSEPDS            GO CLOSE DATA SET
LOCERROR CLI   ISWITCH,ENDTEST     WAS THIS A VALIDITY CHECK
         BE    BADSTAR             YES, RESET AND TRY NEXT INDEX NAME
         B     DSNOTFND            GO BUILD MESSAGE
BADSTAR  MVI   ISWITCH,INDEXTST    RESET INDEX SWITCH
         B     CIRITEST            GO PROCESS NEXT INDEX NAME
OKINDEX  MVI   ISWITCH,INDEXTST    TURN OFF INDEX SWITCH
         B     BLDDSN2             GO BUILD SECOND DATA SET NAME
*  UNABLE TO CATALOG NEW DATA SET NAME, RESTORE TO OLD NAME.  RENAME
*  BACK TO OLD NAME AND RECATALOG OLD NAME.
RESTORE  LA    R2,OLDNAME          THIS CODE REVERSES THE POINTERS TO
         ST    R2,RENAME3          -THE DATA SET NAME BUFFERS (OLD DATA
         LA    R2,NEWNAME          -SET NAME IS NOW THE NEW NAME AND
         ST    R2,RENAME2          -VICE VERSA)
         LA    R2,VOLIST2          POINT TO CATALOG VOLUME LIST
         ST    R2,RENAME4          USE THIS LIST SO RENAME CONDITION
*                                  WILL NOT BE OVERLAID
         STH   R15,CATERCDE        SAVE CATALOG ERROR CODE
*  ISSUE RENAME MACRO TO RESTORE ORIGINAL (OLD) DATA SET NAME
         SR    R0,R0               THIS REGISTER ZEROED FOR RENAME
         RENAME RENAMLST           ISSUE RENAME
         CLI   RENERRSW,SWON       WAS THIS A RENAME ERROR
         BCR   EQ,R11              YES, GO PUT OUT MESSAGE
         LA    R15,RC8             SET R15 = 8
         CH    R15,CATERCDE        CATALOG ERROR CODE = 8
         BE    INDEXBAD            YES, INDEX STRUCTURE ERROR
         LA    R10,DSNMSGL2        POINT TO DSNAME INSERTION
         LA    R2,M28              MESSAGE NUMBER 28
         BAL   R14,MSGBUILD        GO BUILD MESSAGE
         LH    R15,CATERCDE        RESTORE CATALOG ERROR CODE
         BAL   R2,CONVRTRC         GO SET RETURN CODE INSERTION
         LA    R2,S12              SECOND LEVEL MESSAGE NUMBER 12
         B     BLDSMSG             GO BUILD SECOND LEVEL MESSAGE
INDEXBAD LA    R2,M27              MESSAGE 27
         LA    R10,DSNMSGL2        POINT TO INSERTION
         BAL   R14,MSGBUILD        GO BUILD MESSAGE
         LA    R2,S11              SECOND LEVEL MESSAGE 11
         B     ZEROR10             GO BUILD MESSAGE
*  NO SECOND DATA SET NAME ENTERED.  SECOND DATA SET NAME IS A MEMBER
*  NAME ALONE.  THIS IS VALID ONLY IF FIRST DATA SET IS PARTITIONED
*  AND A MEMBER NAME WAS SPECIFIED.
NODSN2   LA    R3,DSNAME1          POINT TO PDE FOR FIRST DSNAME
         C     R2,F8(R3)           IS MEMBER POINTER ZERO
         BE    BADDSN2             YES, ERROR
         MVI   STARLEV2,ZERO       INDICATE NO * IN SECOND DSNAME
         MVI   MEM2SW,SWON         TURN MEM2 SWITCH ON
         B     MEM2                GO SAVE SECOND MEMBER NAME
*
STARERR4 LA    R10,DSNMSGL1        POINT TO INSERTION
STARMSG1 BAL   R11,STARMSG         GO GET FIRST LEVEL MESSAGE
         LA    R2,S18              SECOND LEVEL MESSAGE NUMBER 18
         B     ZEROR10             GO BUILD MESSAGE
DSNBIG2  LA    R10,DSNMSGL2        POINT TO DSNAME INSERTION
         LA    R1,DSLN             POINT TO DATA SET NAME BUFFER
         B     DSNBIG              GO BUILD DSNAME INSERTION
STARER4  LA    R10,DSNMSGL2        POINT TO INSERTION
         B     STARMSG1            GO GET FIRST LEVEL MESSAGE
STARERR8 LA    R10,DSNMSGL1        POINT TO INSERTION
STARMSG2 BAL   R11,STARMSG         GO GET FIRST LEVEL MESSAGE
         LA    R2,S17              SECOND LEVEL MESSAGE NUMBER 17
         B     ZEROR10             GO BUILD SECOND LEVEL MESSAGE
STARER8  LA    R10,DSNMSGL2        POINT TO INSERTION
         B     STARMSG2            GO GET FIRST LEVEL MESSAGE
STARERR  LA    R10,DSNMSGL1        POINT TO INSERTION
         BAL   R11,STARMSG         GO GET FIRST LEVEL MESSAGE
         LA    R2,S19              SECOND LEVEL MESSAGE NUMBER 19
         B     ZEROR10             GO BUILD SECOND LEVEL MESSAGE
STARMSG  LA    R2,M06              MESSAGE NUMBER 6
         BAL   R14,MSGBUILD        GO BUILD MESSAGE
         BR    R11                 RETURN FOR SECOND LEVEL MESSAGE
STARMEM1 LA    R10,DSNMSGL1        POINT TO INSERTION
STARMSG3 BAL   R11,STARMSG         GO GET FIRST LEVEL MESSAGE
         LA    R2,S09              SECOND LEVEL MESSAGE NUMBER 9
         B     ZEROR10             GO BUILD MESSAGE
STARMEM2 LA    R10,DSNMSGL2        POINT TO INSERTION
         B     STARMSG3            GO BUILD MESSAGE
BADDSN1  LA    R2,M24              MESSAGE NUMBER 24
         LA    R10,DSNMESGL        POINT TO INSERTION
         B     BLDMESG             GO BUILD MESSAGE
NMEONVOL LA    R2,M22              MESSAGE NUMBER 22
         LA    R10,DSNMSGL2        POINT TO DSNAME INSERTION
         B     BLDMESG             GO BUILD MESSAGE
NONEWMEM LA    R2,M23              MESSAGE NUMBER 23
         LA    R10,MEMMSGL2        POINT TO INSERTION
         B     BLDMESG             GO BUILD MESSAGE
ALIASERR LA    R2,M26              MESSAGE NUMBER 26
         B     NOINSERT            GO BUILD MESSAGE
BADUNIT  BAL   R11,MESG29          GO GET FIRST LEVEL MESSAGE
         LA    R2,S24              SECOND LEVEL MESSAGE 24
         B     ZEROR10             GO BUILD MESSAGE
NOUNIT   BAL   R11,MESG29          GO GET FIRST LEVEL MESSAGE
         LA    R2,S25              SECOND LEVEL MESSAGE 25
         B     ZEROR10             GO BUILD MESSAGE
MESG29   LA    R2,M29              MESSAGE NUMBER 29
         LA    R10,DSNMESGL        POINT TO INSERTION
         BAL   R14,MSGBUILD        GO BUILD MESSAGE
         BR    R11                 RETURN
MULTIVOL LA    R2,M21              MESSAGE 21
         LA    R10,DSNMESGL        POINT TO INSERTION
         B     BLDMESG             GO BUILD MESSAGE
INUSE    LA    R2,M15              MESSAGE NUMBER 15
         LA    R10,DSNMESGL        POINT TO INSERTION
         BAL   R14,MSGBUILD        GO BUILD MESSAGE
         LA    R2,S06              SECOND LEVEL MESSAGE NUMBER 6
         B     ZEROR10             GO BUILD MESSAGE
CATLGIO  BAL   R11,SYSTEMER        GO GET FIRST LEVEL MESSAGE
         LA    R2,S14              SECOND LEVEL MESSAGE 14
         B     ZEROR10             GO BUILD MESSAGE
*  ANALYZE DAIR RETURN CODES
DAIRERR  STC   R15,RC              SAVE DAIR RETURN CODE
         CLI   RC,RC16             IS RETURN CODE = 16
         BE    NODDS               YES, NO DD ENTRIES
         LA    R2,DAIR08           POINT TO DAIR ENTRY 08
         CLI   RC,RC8              IS RETURN CODE = 8
         BL    DAERROR             DAIR ERROR
         BE    DSNCATLG            YES, DATA SET NOT CATALOGED
         LH    R15,DA08DARC-DAPB08(R2) DYNAMIC ALLOCATION RETURN CODE
         CH    R15,DARC0204        IS DARC = 0204
         BE    NOSPACE             YES, NO CORE, GO SET RETURN CODE
         CH    R15,DARC0210        IS DARC = 0210
         BE    INUSE               YES, DATA SET IN USE
         CH    R15,DARC0218        IS DARC = 0218
         BE    VOLNTMTD            YES, VOLUME NOT MOUNTED
         CH    R15,DARC6708        IS DARC = 6708
         BE    DSNTOVOL            YES, DATA SET NOT ON VOLUME
         CH    R15,DARC021C        IS DARC = 021C
         BE    BADUNIT             YES, BAD UNIT INFORMATION
         CH    R15,DARC0214        IS DARC = 0214
         BE    NOUNIT              YES, NO UNIT AVAILABLE
         CH    R15,DARC041C        IS DARC = 041C
         BE    MULTIVOL            YES, MULTI VOLUME DATA SET
         BAL   R11,SYSTEMER        GO GET FIRST LEVEL MESSAGE
         BAL   R3,BITOHEX          GO SET RETURN CODE INSERTION
         LA    R2,S05              SECOND LEVEL MESSAGE NUMBER 5
         B     BLDSMSG             GO BUILD SECOND LEVEL MESSAGE
NOMEM    LA    R2,M17              MESSAGE NUMBER 17
         LA    R10,DSNMESGL        POINT TO INSERTION
         B     BLDMESG             GO BUILD MESSAGE
SYSTEMER LA    R2,M14              MESSAGE NUMBER 14
         LA    R10,DSNMESGL        POINT TO INSERTION
         BAL   R14,MSGBUILD        GO BUILD MESSAGE
         BR    R11                 RETURN FOR SECOND LEVEL MESSAGE
RENAMERR STC   R15,RC              SAVE RENAME RETURN CODE
         MVI   RENERRSW,SWON       TURN RENAME ERROR SWITCH ON
         BAL   R11,RESTORE         GO RENAME BACK TO OLD NAME
         MVI   RENERRSW,SWOFF      TURN OFF RENAME ERROR SWITCH
*  ANALYZE RENAME RETURN CODES
         CLI   RC,RC8              IS RETURN CODE = 8
         BL    RENMERR             NO, RENAME ERROR
*  CHECK UNUSUAL CONDITIONS
         LA    R2,SEQNUM+F1        POINT TO LAST BYTE OF VOLUME ENTRY
         LH    R3,VOLIST1          NUMBER OF VOLUMES
NAMETEST CLI   F0(R2),NAMECHCK     DOES NEW NAME EXIST
         BE    NMEONVOL            YES, ERROR
         CLI   F0(R2),BADPASWD     INCORRECT PASSWORD SPECIFIED
         BE    ABEND913            YES, ERROR
         LA    R2,F12(R2)          POINT TO NEXT VOLUME
         BCT   R3,NAMETEST         IF MORE VOLUMES, GO CHECK THEM
         B     RENMERR             ELSE, RENAME ERROR
BLDLERR  STC   R15,RC              SAVE BLDL RETURN CODE
         CLI   RC,RC4              IS RETURN CODE = 4
         BE    NOMEM               YES, MEMBER NOT FOUND
         BAL   R11,DSNOTREN        GO GET FIRST LEVEL MESSAGE
         BAL   R2,CONVRTRC         GO SET RETURN CODE INSERTION
         LA    R2,S21              SECOND LEVEL MESSAGE NUMBER 21
         B     BLDSMSG             GO BUILD SECOND LEVEL MESSAGE
DSNOTREN LA    R10,DSNMESGL        POINT TO DSNAME INSERTION
         LA    R2,M07              MESSAGE NUMBER 7
         BAL   R14,MSGBUILD        GO BUILD MESSAGE
         BR    R11                 RETURN FOR SECOND LEVEL MESSAGE
STWERROR STC   R15,RC              SAVE STOW RETURN CODE
         CLI   RC,RC8              IS RETURN CODE = 8
         BE    NOMEM               YES, MEMBER NOT FOUND
         CLI   RC,RC4              IS RETURN CODE = 4
         BE    NONEWMEM            YES, NEW MEMBER EXISTS
         CLI   RC,RC12             IS RETURN CODE = 12
         BE    ALIASERR            YES, NO SPACE FOR ALIAS
         BAL   R11,DSNOTREN        GO GET FIRST LEVEL MESSAGE
         BAL   R2,CONVRTRC         GO SET RETURN CODE INSERTION
         LA    R2,S22              SECOND LEVEL MESSAGE NUMBER 22
         B     BLDSMSG             GO BUILD SECOND LEVEL MESSAGE
NODSN1   LA    R3,MEMMSG1          POINT TO MEMBER MESSAGE BUFFER
         L     R4,F8(R5)           POINT TO MEMBER NAME
         LH    R2,F12(R5)          LENGTH OF MEMBER NAME
         BCTR  R2,R0               DECREMENT FOR EXECUTE INSTRUCTION
         EX    R2,MOVEINST         MOVE MEMBER NAME TO MESSAGE BUFFER
         LA    R2,F5(R2)           1 FOR EXECUTE, 4 FOR HEADER
         STH   R2,MEMMSGL1         SAVE LENGTH IN INSERTION BUFFER
         LA    R2,M09              MESSAGE NUMBER 9
         LA    R10,MEMMSGL1        POINT TO MEMBER NAME INSERTION
         B     BLDMESG             GO WRITE MESSATE
*  THIS ROUTINE CHECKS FOR ATTENTION INTERRUPT
TESTATTN TM    RENCPECB,MASK1      IS ECB POSTED (DID INTERRUPT OCCUR)
         BO    CLUPRCC             YES, CLEANUP AND RETURN     @ZA01485
         BR    R14                 RETURN
*        THIS ROUTINE PRINTS ERROR MESSAGES
TPUT     BAL   R14,TESTATTN        GO CHECK FOR INTERRUPT
         LA    R1,IOPARM           POINT TO PUTLINE GENERAL PARAMETERS
         PUTLINE  PARM=PUT,OUTPUT=(OUTAREA1,MULTLVL),MF=(E,(1)),       X
               TERMPUT=(EDIT,WAIT)
         LTR   R15,R15             TEST RETURN CODE
         BZ    TESTSW              CONTINUE PROCESSING
         LA    R3,F4               REGISTER 3 = 4
         CR    R3,R15              DID ATTENTION OCCUR
         BE    CLUPRCC             YES, CLEANUP AND RETURN     @ZA01485
TESTSW   LTR   R8,R8               PROCESSING ASTERISK
         BZ    NOTSTAR             NO, CONTINUE
         BAL   R14,SAVESTAR        YES, SAVE ASTERISK VALUE
NOTSTAR  CLI   UNALOCSW,SWON       IS UNALLOCATE SWITCH ON
         BE    UNALOCDS            YES, GO UNALLOCATE DATA SET
         B     LISTEST             NO CONTINUE PROCESSING
*  SUBROUTINE TO SAVE ASTERISK VALUE
SAVESTAR L     R2,STARPTR          POINT TO NEXT SLOT
         LA    R3,STAREND          POINT TO END OF LIST
         MVC   F0(F8,R2),LEVELSCN  MOVE ERROR VALUE TO LIST
         LA    R2,F8(R2)           POINT TO NEXT SLOT
         CR    R3,R2               END OF LIST
         BCR   EQ,R14              YES, RETURN
         ST    R2,STARPTR          SAVE ADDRESS OF NEXT SLOT
         BR    R14                 RETURN
*  ROUTINES TO SET UP ERROR MESSAGES
OVR20VOL BAL   R11,DSNOTREN        GO GET FIRST LEVEL MESSAGE
         LA    R2,S23              SECOND LEVEL MESSAGE NUMBER 23
         B     ZEROR10             GO BUILD SECOND LEVEL MESSAGE
RENMERR  BAL   R11,DSNOTREN        GO GET FIRST LEVEL MESSAGE
         BAL   R2,CONVRTRC         GO SET RETURN CODE INSERTION
         LA    R2,S20              SECOND LEVEL MESSAGE NUMBER 20
         B     BLDSMSG             GO BUILD SECOND LEVEL MESSAGE
BADCOMND LA    R2,M08              MESSAGE NUMBER 8
         BAL   R14,MSGBLD          GO BUILD MESSAGE
         MVI   ENDERROR,SWON       TURN ON END ERROR SWITCH
         BR    R11                 RETURN FOR SECOND LEVEL MESSAGE
BADKEYWD LA    R2,M05              MESSAGE NUMBER 5
         BAL   R14,MSGBLD          GO BUILD MESSAGE
         MVI   ENDERROR,SWON       TURN ON END ERROR SWITCH
         LA    R2,S16              SECOND LEVEL MESSAGE NUMBER 16
         B     ZEROR10             GO BUILD SECOND LEVEL MESSAGE
BADDSN5  BAL   R11,BADCOMND        GO GET FIRST LEVEL MESSAGE
         LA    R2,S27              SECOND LEVEL MESSAGE 27
         B     ZEROR10             GO BUILD SECOND LEVEL MESSAGE
BADDSN4  BAL   R11,BADCOMND        GO GET FIRST LEVEL MESSAGE
         LA    R2,S29              SECOND LEVEL MESSAGE NUMBER 29
         B     ZEROR10             GO BUILD SECOND LEVEL MESSAGE
BADDSN2  BAL   R11,BADCOMND        GO GET FIRST LEVEL MESSAGE
         LA    R2,S28              SECOND LEVEL MESSAGE NUMBER 28
         B     ZEROR10             GO BUILD SECOND LEVEL MESSAGE
UNCATBAD STH   R15,CATERCDE        SAVE UNCATALOG ERROR CODE
UNCATERR LA    R10,DSNMESGL        POINT TO DSNAME INSERTION
         LA    R2,M10              MESSAGE NUMBER 10
         BAL   R14,MSGBUILD        GO BUILD MESSAGE
         MVI   ERRORSW,SWOFF       TURN ERROR SWITCH OFF
         LH    R15,CATERCDE        RESTORE UNCATALOG ERROR CODE
         BAL   R2,CONVRTRC         GO SET RETURN CODE INSERTION
         LA    R2,S10              SECOND LEVEL MESSAGE NUMBER 10
         B     BLDSMSG             GO BUILD MESSAGE
*  ABEND MESSAGES
IKJEH713 EQU   *                   ALIAS FOR ABEND713
ABEND713 BAL   R11,MESG03          GO GET FIRST LEVEL MESSAGE
         LA    R2,S30              SECOND LEVEL MESSAGE 30
         B     ZEROR10             GO BUILD MESSAGE
IKJEH913 EQU   *                   ALIAS FOR ABEND913
ABEND913 LA    R10,DSNMESGL        POINT TO DSNAME INSERTION
         LA    R2,M16              MESSAGE NUMBER 16
         B     BLDMESG             GO BUILD MESSAGE
IKJEH13  EQU   *                   ALIAS FOR ABEND13
ABEND13  LA    R10,DSNMESGL        POINT TO DSNAME INSERTION
         LR    R15,R1              MOVE ABEND CODE TO REGISTER 15
         LA    R2,M04              MESSAGE NUMBER 4
         BAL   R14,MSGBUILD        GO BUILD MESSAGE
         BAL   R3,BITOHEX          GO SET RETURN CODE INSERTION
         LA    R2,S13              SECOND LEVEL MESSAGE 13
         B     BLDSMSG             GO BUILD MESSAGE
NODDS    LA    R10,DSNMESGL        POINT TO DSNAME INSERTION
         LA    R2,M11              MESSAGE NUMBER 11
         BAL   R14,MSGBUILD        GO BUILD MESSAGE
         LA    R2,S01              SECOND LEVEL MESSAGE 1
         B     ZEROR10             GO BUILD MESSAGE
MESG03   LA    R10,DSNMESGL        POINT TO DSNAME INSERTION
         LA    R2,M03              MESSAGE NUMBER 3
         BAL   R14,MSGBUILD        GO BUILD MESSAGE
         BR    R11                 RETURN FOR SECOND LEVEL
DSNOTFND LA    R10,DSNMESGL        POINT TO DSNAME INSERTION
         LA    R2,M01              MESSAGE NUMBER 1
         B     BLDMESG             GO WRITE MESSAGE
VOLNTMTD LA    R2,M13              MESSAGE NUMBER 13
         LA    R10,DSNMESGL        POINT TO INSERTION
         BAL   R14,MSGBUILD        GO BUILD MESSAGE
         LA    R2,S03              SECOND LEVEL MESSAGE NUMBER 3
         B     ZEROR10             GO BUILD SECOND LEVEL MESSAGE
DSNTOVOL LA    R2,M12              MESSAGE NUMBER 12
         LA    R10,DSNMESGL        POINT TO INSERTION
         BAL   R14,MSGBUILD        GO BUILD MESSAGE
         LA    R2,S02              SECOND LEVEL MESSAGE NUMBER2
         B     ZEROR10             GO BUILD SECOND LEVEL MESSAGE
PARSEERR STC   R15,RC              SAVE PARSE RETURN CODE
         MVI   STACKSW,SWON        TURN STACK SWITCH ON
         CLI   RC,RC12             ATTENTION INTERRUPT OR NOPROMPT
         BL    CLUPRCC             YES, CLEANUP AND RETURN     @ZA01485
         MVI   ENDERROR,SWON       TURN ON END ERROR SWITCH
         BH    NOSPACE             NO CORE
         BAL   R11,MESG25          GO BUILD MESSAGE
         BAL   R2,CONVRTRC         GO SET RETURN CODE INSERTION
         LA    R2,S08              SECOND LEVEL MESSAGE 8
         B     BLDSMSG             GO BUILD MESSAGE
MESG25   LA    R2,M25              MESSAGE 25
         BAL   R14,MSGBLD          GO BUILD MESSAGE
         BR    R11                 RETURN FOR SECOND LEVEL
NOSPACE  LA    R2,M02              MESSAGE NUMBER 2
NOINSERT SR    R10,R10             NO INSERTION
BLDMESG  BAL   R14,MSGBUILD        GO BUILD MESSAGE
         B     TPUT                GO WRITE MESSAGE
SAVUNQL1 EX    R2,MOVEINST         DSNAME TO MESSAGE BUFFER
         LA    R2,F5(R2)           1 EXECUTE, 4 HEADER
         B     SAVELN1             GO SAVE LENGTH
SAVUNQL2 EX    R2,MOVEINST         DSNAME TO MESSAGE BUFFER
         LA    R2,F5(R2)           1 EXECUTE, 4 HEADER
         B     SAVELN2             GO SAVE LENGTH
DAERROR  BAL   R11,MESG25          GO GET FIRST LEVEL MESSAGE
         BAL   R2,CONVRTRC         GO SET RETURN CODE INSERTION
         LA    R2,S15              SECOND LEVEL MESSAGE 15
         B     BLDSMSG             GO BUILD MESSAGE
CIRLTST  LA    R5,F4               PUT A FOUR IN REG 5         @YL026YB
         CR    R15,R5              SEE IF REG 15 CONTAINS A 4  @YL026YB
         BNE   CIRERROR            NO RETURN CODE IN CIRLOCRC  @YL026YB
         SR    R8,R8               CLEAR ASTERISK INDICATOR    @YL026YB
         B     DSNOTFND            GO BUILD MESSAGE            @ZA06145
CIRERROR LA    R10,STARBUFF        POINT TO INSERTION
         LA    R2,M19              MESSAGE NUMBER 19
         SR    R8,R8               CLEAR ASTERISK INDICATOR
         B     BLDMESG             GO BUILD MESSAGE
*  CATALOG ERROR MESSAGES
DSNCATLG LH    R15,DA08CTRC-DAPB08(R2) CATALOG RETURN CODE
         STC   R15,RC              SAVE CATALOG RETURN CODE
         CLI   RC,RC8              RETURN CODE = 8
         BL    VOLNTMTD            VOLUME NOT MOUNTED
         CLI   RC,RC20             RETURN CODE = 20
         BH    CATLGIO             CATALOG I/O ERROR
         BNE   DSNOTFND            DATA SET NOT CATALOGED
         BAL   R11,SYSTEMER        GO GET FIRST LEVEL MESSAGE
         BAL   R3,BITOHEX          GO SET RETURN CODE INSERTION
         LA    R2,S04              SECOND LEVEL MESSAGE NUMBER 4
         B     BLDSMSG             GO BUILD MESSAGE
DSNBIG1  LA    R10,DSNMESGL        POINT TO INSERTION
         LA    R1,DSLO             POINT TO DSNAME BUFFER
DSNBIG   L     R4,UPTSAVE          UPT ADDRESS                 @YL026YB
         LA    R3,F4(R10)          DSNAME INSERTION BUFFER
         SR    R2,R2               CLEAR REGISTER
         IC    R2,UPTPREFL-UPT(R4) LENGTH OF USERID            @YL026YB
         LTR   R2,R2               CHECK PREFIXING LENGTH FOR ZERO
         BZ    NOPREX2             NO PREFIXING
         EX    R2,MOVE1            USERID TO DSNAME BUFFER     @YL026YB
*  THIS MOVED ONE EXTRA BYTE WHICH WILL NOW BE OVERLAID WITH A PERIOD
         AR    R3,R2               POINT PAST USERID
         MVI   F0(R3),PERIOD       MOVE IN PERIOD
         LA    R3,F1(R3)           POINT PAST PERIOD
NOPREX2  LA    R4,F2(R1)           ADDRESS OF DATA SET NAME
         LH    R5,F0(R1)           LENGTH OF DATA SET NAME
         AR    R2,R5               PLUS LENGTH OF USERID
         LA    R2,F5(R2)           ONE FOR PERIOD, FOUR FOR HEADER
         BCTR  R5,R0               DECREMENT FOR EXECUTE
         EX    R5,MOVEINST         MOVE DATA SET NAME TO USERID
         STH   R2,F0(R10)          SAVE TOTAL LENGTH
         LA    R2,M18              MESSAGE NUMBER 18
         B     BLDMESG             GO BUILD AND WRITE MESSAGE
*  CONVERT RETURN CODE, SUPPRESS LEADING ZEROS AND MOVE TO INSERTION
*  BUFFER.  INPUT - R15 CONTAINS RETURN CODE TO BE CONVERTED
*           OUTPUT - R10 POINTS TO INSERTION BUFFER
*  R2 IS THE RETURN REGISTER
CONVRTRC CVD   R15,UNPACK          CONVERT TO PACKED DECIMAL FORMAT
         UNPK  COUNT,UNPACK        CONVERT TO ZONED FORMAT
         OI    SIGNBYTE,ZONE       ZONE OVER SIGN
*  SUPPRESS LEADING ZEROS IN RETURN CODE
         LA    R4,COUNT            POINT TO COUNT BUFFER
         LA    R5,F7               R5 = 7
SUPPZERO CLI   F0(R4),FOXZERO      IS THIS LEADING ZERO
         BNE   NOTZERO             NO, GO MOVE RETURN CODE
         LA    R4,F1(R4)           YES, POINT TO NEXT DIGIT
         BCT   R5,SUPPZERO         GO CHECK NEXT DIGIT
NOTZERO  LA    R5,ENDCOUNT         POINT PAST COUNT BUFFER
         SR    R5,R4               NUMBER OF SIGNIFICANT DIGITS IN R5
         BCTR  R5,R0               DECREMENT FOR EXECUTE
         LA    R3,RCMESG           POINT TO RETURN CODE BUFFER
         EX    R5,MOVEINST         MOVE RETURN CODE TO INSERTION BUFFER
         LA    R5,F5(R5)           4 FOR HEADER AND 1 FOR EXECUTE
         STH   R5,RCMESGL          LENGTH OF RETURN CODE INSERTION
         LA    R10,RCMESGL         POINT TO INSERTION BUFFER
         BR    R2                  RETURN
*  BINARY TO HEXIDECIMAL CONVERSION ROUTINE
*        INPUT - R15 CONTAIN RETURN CODE TO BE CONVERTED
*        OUTPUT - R10 POINTS TO INSERTION BUFFER
*  R3 IS THE RETURN REGISTER
BITOHEX  SLL   R15,F16             SHIFT RETURN CODE TO HIGH HALF REG.
         LA    R10,RCMESG          POINT TO RETURN CODE BUFFER
         LA    R5,F4               FOUR HALF BYTES TO CONVERT
HEXLOOP  XR    R14,R14             CLEAR REGISTER
         SLDL  R14,F4              MOVE HALF BYTE TO WORK REGISTER
         IC    R14,TRANSTAB(R14)   SELECT CHARACTER
         STC   R14,F0(R10)         PUT CHARACTER IN RETURN CODE BUFFER
         LA    R10,F1(R10)         UP POINTER FOR NEXT CHARACTER
         BCT   R5,HEXLOOP          IF MORE TO CONVERT, CONTINUE
         CLI   RCMESG,FOXZERO      TEST FOR LEADING ZERO
         BNE   HEXGO               NOT ZERO,
         MVI   RCMESG,BLANK        SUPPRESS LEADING ZERO
HEXGO    LA    R14,F8              4 FOR LENGTH PLUS FOUR FOR HEADER
         STH   R14,RCMESGL         LENGTH TO INSERTION BUFFER
         LA    R10,RCMESGL         POINT TO INSERTION BUFFER
         BR    R3                  RETURN
*  THIS IS THE MESSAGE BUILD SUBROUTINE.  IT ACCESSES THE MESSAGE CSECT
*  TO OBTAIN THE ADDRESS OF THE MESSAGE SEGMENT AND THE OFFSET AT WHICH
*  ANY INSERTIONS WILL BE MADE.
*  AT ENTRY R2 CONTAINS MESSAGE NUMBER AND R10 CONTAINS ADDRESS OF THE
*  INSERTION.  R14 IS THE RETURN REGISTER  (R10 = 0 IS NO INSERTION)
*
MSGBLD   SR    R10,R10             NO INSERTION
MSGBUILD SR    R3,R3               ZERO REGISTER
         ST    R3,OUTAREA1         SET POINTER INDICATING ONE MESSAGE
         MVI   OUTAREA1,ENDTEST    FLAG END OF MESSAGE CHAIN
         L     R1,VCONMSG          ADDRESS OF MESSAGE BRANCH TABLE
         BCTR  R2,R0               DECREMENT MESSAGE NUMBER
         SLL   R2,TWO              MULTIPLY MESSAGE NUMBER BY 4
         L     R3,F0(R2,R1)        LOAD BRANCH TABLE ENTRY
         ST    R3,WORKWORD         SAVE THIS ENTRY
         LA    R3,F0(R3)           CLEAR HIGH ORDER BYTE
         ST    R3,OUTPUT11         MESSAGE ADDRESS TO OUTPUT LIST
         LTR   R10,R10             IS THERE AN INSERTION
         BZ    NOINSRT1            NO, GO SET SEGMENT COUNT TO 1
         SR    R2,R2               ZERO REGISTER
         IC    R2,WORKWORD         GET OFFSET FOR INSERTION
         STH   R2,F2(R10)          STORE OFFSET IN MESSAGE OFFSET FIELD
         ST    R10,OUTPUT12        INSERTION ADDRESS TO OUTPUT LIST
         LA    R2,TWO              2 SEGMENTS
SETCNT1  ST    R2,OUTCNT1          SET SEGMENT COUNT
         MVI   ERRORSW,SWON        TURN ERROR SWITCH ON
         MVI   STACKSW,SWON        TURN STACK SWITCH ON
         BR    R14                 RETURN
NOINSRT1 LA    R2,ONE              ONE SEGMENT
         B     SETCNT1             GO SET SEGMENT COUNT
*
*  THIS IS THE SECOND LEVEL MESSAGE BUILD SUBROUTINE.  IT ACCESSES THE
*  MESSAGE CSECT TO OBTAIN THE ADDRESS OF THE SECOND LEVEL MESSAGE AND
*  THE OFFSET AT WHICH ANY INSERTIONS WILL BE MADE.
*  AT ENTRY R2 CONTAINS SECOND LEVEL MESSAGE NUMBER AND R10 CONTAINS
*  ADDRESS OF THE INSERTION.  (R10 = 0 IS NO INSERTION).
*  MESSAGE IS BUILT AND CONTROL PASSED TO TPUT ROUTINE TO WRITE MESSAGE
*
ZEROR10  SR    R10,R10             NO INSERTION
BLDSMSG  EQU   *                   ALIAS FOR SMSGBLD
SMSGBLD  SR    R3,R3               ZERO REGISTER
         ST    R3,OUTAREA2         SET POINTER INDICATING LAST MESSAGE
         MVI   OUTAREA2,ENDTEST    FLAG END OF MESSAGE CHAIN
         LA    R3,OUTAREA2         POINT TO SECOND LEVEL MESSAGE CHAIN
         ST    R3,OUTAREA1         CHAIN SECOND LEVEL TO FIRST LEVEL
         L     R1,VCONSMSG         SECOND LEVEL MESSAGE BRANCH TABLE
         BCTR  R2,R0               DECREMENT MESSAGE NUMBER
         SLL   R2,TWO              MULTIPLY MESSAGE NUMBER BY 4
         L     R3,F0(R2,R1)        LOAD BRANCH TABLE ENTRY
         ST    R3,WORKWORD         SAVE THIS ENTRY
         LA    R3,F0(R3)           CLEAR HIGH ORDER BYTE
         ST    R3,OUTPUT21         MESSAGE ADDRESS TO OUTPUT LIST
         LTR   R10,R10             IS THERE AN INSERTION
         BZ    NOINSRT2            NO, GO SET SEGMENT COUNT TO 1
         SR    R2,R2               ZERO REGISTER
         IC    R2,WORKWORD         GET OFFSET FOR INSERTION
         STH   R2,F2(R10)          STORE OFFSET IN MESSAGE OFFSET FIELD
         ST    R10,OUTPUT22        INSERTION ADDRESS TO OUTPUT LIST
         LA    R2,TWO              2 SEGMENTS
SETCNT2  ST    R2,OUTCNT2          SET SEGMENT COUNT
         B     TPUT                GO WRITE MESSAGE
NOINSRT2 LA    R2,ONE              ONE SEGMENT
         B     SETCNT2             GO SET SEGMENT COUNT
SETSW    MVI   DEFLTSW,SWON        TURN DEFAULT SWITCH ON
*  NOW MOVE UPDATED DSNAME TO MESSAGE AREA
ERRORDS1 LH    R2,DSLO             LENGTH OF FULLY QUALIFIED DSNAME
         LA    R3,DSNMSG1          POINT TO MESSAGE INSERTION BUFFER
         LA    R4,DSNO             POINT TO DATA SET NAME
         LA    R5,DSNAME1          POINT TO PDE FIRST DSNAME
         TM    F6(R5),QUOTEMSK     WAS DATA SET NAME QUOTED
         BO    SAVENME1            YES, GO SAVE NAME
         L     R5,UPTSAVE          ADDRESS OF UPT              @YL026YB
         SR    R1,R1               CLEAR REGISTER
         IC    R1,UPTPREFL-UPT(R5) LENGTH OF USERID            @YL026YB
         LTR   R1,R1               CHECK PREFIXING LENGTH      @YL026YB
         BZ    SAVENME1            NO PREFIXING                @YL026YB
         LA    R1,F1(R1)           PLUS ONE FOR THE PERIOD
         SR    R2,R1               SUBTRACT LENGTH OF USERID
         AR    R4,R1               POINT PAST USERID
SAVENME1 BCTR  R2,R0               DECREMENT FOR EXECUTE INSTRUCTION
         EX    R2,MOVEINST         MOVE DSNAME TO ERROR BUFFER
         LA    R2,F5(R2)           1 FOR EXECUTE, 4 FOR HEADER
         STH   R2,DSNMSGL1         SAVE LENGTH OF DATA SET NAME
         CLI   DEFLTSW,SWON        IS NAME FROM DEFAULT ROUTINE
         BE    QUAL2               YES, GO QUALIFY SECOND DSNAME
         CLI   ISWITCH,SWON        IS THIS INDEX '*' NAME
         BE    RENSEQDS            YES, GO VALIDITY CHECK NAME
BLDDSN2  LA    R3,DSNN             POINT TO BUILD BUFFER
         LA    R4,DSNBUFFN         POINT TO INDEX STRUCTURE
         L     R2,STARADR2         LOAD POINTER TO ASTERISK
         SR    R2,R4               LENGTH OF DSNAME TO ASTERISK
         LR    R1,R2               LENGTH OF STRUCTURE TO ASTERISK
         LA    R1,F1(R1)           LENGTH OF DSNAME INCLUDING ASTERISK
         EX    R2,MOVEINST         MOVE INDEX STRUCTURE
*  THIS MOVES ONE EXTRA BYTE WHICH WILL BE OVERLAID WITH THE QUALIFIER
         AR    R3,R2               POINT PAST MOVED STRUCTURE
         LH    R5,NAMELTH          LENGTH OF QUALIFIER
         AR    R2,R5               TOTAL LENGTH NAME PLUS QUALIFIER
         LA    R4,LEVELSCN         POINT TO QUALIFIER NAME
         BCTR  R5,R0               DECREMENT FOR EXECUTE INSTRUCTION
         EX    R5,MOVEINST         MOVE QUALIFIER TO NAME
         CH    R1,DSBLN            PROCESSING '*' NAME
         BNE   BLDINDX2            NO, GO BUILD INDEX NAME
         STH   R2,DSLN             SAVE TOTAL LENGTH
         B     ERRORDS2            GO SAVE SECOND DSNAME FOR MESSAGE
BLDINDX2 AR    R3,R5               POINT PAST INDEX NAME
         LA    R3,F1(R3)           PLUS ONE FROM EXECUTE
         L     R4,STARADR2         POINT AT ASTERISK
         LA    R4,F1(R4)           POINT PAST ASTERISK
         LA    R5,DSNBUFFN         POINT TO DSNAME
         AH    R5,DSBLN            POINT PAST DSNAME
         SR    R5,R4               LENGTH OF DSNAME AFTER ASTERISK
         AR    R2,R5               TOTAL LENGTH OF COMPLETE DSNAME
         CH    R2,MAXLENTH         MORE THAN 44 CHARACTERS
         BH    DSNBIG2             YES, ERROR
         STH   R2,DSLN             SAVE TOTAL LENGTH
         BCTR  R5,R0               DECREMENT FOR EXECUTE INSTRUCTION
         EX    R5,MOVEINST         MOVE REST OF NAME           @YL026YB
ERRORDS2 LH    R2,DSLN             LENGTH OF FULLY GUALIFIED DSNAME
         LA    R3,DSNMSG2          POINT TO MESSAGE INSERTION BUFFER
         LA    R4,DSNN             POINT TO DATA SET NAME
         LA    R5,DSNAME2          POINT TO PDE SECOND DSNAME
         TM    F6(R5),QUOTEMSK     WAS DATA SET NAME QUOTED
         BO    SAVENME2            YES, GO SAVE NAME
         L     R5,UPTSAVE          ADDRESS OF PSCB             @YL026YB
         SR    R1,R1               ZERO REGISTER               @YL026YB
         IC    R1,UPTPREFL-UPT(R5) LENGTH OF USERID            @YL026YB
         LTR   R1,R1               CHECK PREFIXING LENGTH
         BZ    SAVENME2            NO PREFIXING
         LA    R1,F1(R1)           PLUS ONE FOR THE PERIOD
         SR    R2,R1               SUBTRACT LENGTH OF USERID
         AR    R4,R1               POINT PAST USERID
*  SAVE SECOND NAME IF FIRST NAME BAD
SAVENME2 BCTR  R2,R0               DECREMENT FOR EXECUTE INSTRUCTION
         EX    R2,MOVEINST         MOVE DSNAME TO ERROR BUFFER
         LA    R2,F5(R2)           1 FOR EXECUTE, 4 FOR HEADER
         STH   R2,DSNMSGL2         SAVE LENGTH OF DATA SET NAME
         B     MEMCHECK            GO CHECK FOR MEMBER NAMES
*  BUILD FULLY QUALIFIED NAMES
QUALIFY1 LA    R1,DFLTPARM         POINT TO DEFAULT PARAMETER LIST
         LINK  EP=IKJDFLT          GO TO DEFAULT SERVICE ROUTINE
         B     DFLTERR1(R15)       ANALYZE DEFAULT RETURN CODE
DFLTERR1 B     SETSW               DEFAULT RETURN CODE = 0
         B     FLUSH               DEFAULT RETURN CODE = 4
         B     DSNBIG1             DEFAULT RETURN CODE = 8
         B     FLUSH               DEFAULT RETURN CODE = 12
         B     DSNOTFND            DEFAULT RETURN CODE = 16
         B     DSNOTFND            DEFAULT RETURN CODE = 20
         B     FLUSH               DEFAULT RETURN CODE = 24
         B     DEFAULT             DEFAULT RETURN CODE = 28
         B     FLUSH               DEFAULT RETURN CODE = 32
         B     DSNOTFND            DEFAULT RETURN CODE = 36
DEFAULT  BAL   R11,MESG25          GO GET FIRST LEVEL MESSAGE
         BAL   R2,CONVRTRC         GO SET RETURN CODE INSERTION
         LA    R2,S07              SECOND LEVEL MESSAGE NUMBER 7
         B     BLDSMSG             GO BUILD SECOND LEVEL MESSAGE
QUALIFY2 LA    R14,DFLTPBLK        DEFAULT PARAMETER BLOCK
         USING DFPB,R14            ADDRESSABILITY FOR DFPB
         LA    R2,DSLN             NEW DATA SET NAME
         ST    R2,DFPBDSN          TO PARAMETER BLOCK
         MVI   DFPBCODE,DFPB0C     SET ENTRY CODE
         CLI   QUALBUFF,BLANK      WAS QUALIFIER RETURNED
         BNE   QUALRET             YES, SET CONTROL TO USE IT
         MVI   DFPBCNTL,DFPBUID    SET CONTROL BYTE
         B     QUALGO              CONTINUE
QUALRET  MVI   DFPBCNTL,DFPBUID+DFPBADD SET CONTROL BYTE
QUALGO   LA    R1,DFLTPARM         DEFAULT PARAMETER LIST
         DROP  R14                 DFPB NO LONGER NEEDED
         LINK  EP=IKJDFLT          QUALIFY SECOND DSNAME
         B     DFLTERR2(R15)       ANALYZE DEFAULT RETURN CODE
DFLTERR2 B     ERRORDS2            DEFAULT RETURN CODE = 0
         B     FLUSH               DEFAULT RETURN CODE = 4
         B     DSNBIG2             DEFAULT RETURN CODE = 8
         B     FLUSH               DEFAULT RETURN CODE = 12
         B     INDEXBAD            DEFAULT RETURN CODE = 16
         B     DEFAULT             DEFAULT RETURN CODE = 20
         B     FLUSH               DEFAULT RETURN CODE = 24
         B     DEFAULT             DEFAULT RETURN CODE = 28
         B     FLUSH               DEFAULT RETURN CODE = 32
         B     DEFAULT             DEFAULT RETURN CODE = 36
FLUSH    MVI   STACKSW,SWON        TURN STACK SWITCH ON
         B     CLUPRCC             EXIT                        @ZA01485
         EJECT
*
*              WORKAREA - REQUIRED CONSTANTS (IKJEHRN2)
*
RN2CNSTS DS    0F                  CONSTANTS FOR IKJEHRN2 BEGIN HERE
VCONMSG  DC    V(IKJEHMSG)         ENTRY MESSAGE CSECT 1ST LEVEL
VCONSMSG DC    V(IKJEHSMG)         ENTRY MESSAGE CSECT 2ND LEVEL
VCONRN3  DC    V(IKJEHRN3)         ENTRY POINT THIRD CSECT
VCONRN4  DC    V(IKJEHRN4)         ENTRY POINT FOURTH CSECT    @YL026YB
FOXMASK  DC    X'FFFFFFFF'         MASK TO COMPLEMENT GENERATION NAME
SUBPOL1  DC    X'01000000'         SUBPOOL NUMBER              @YL026YB
         DS    0H                  ALIGN HALF WORD BOUNDRY
DARC0204 DC    X'0204'             DARC NO CORE
DARC0210 DC    X'0210'             DARC DATA SET IN USE
DARC0218 DC    X'0218'             DARC VOLUME NOT MOUNTED
DARC6708 DC    X'6708'             DARC DATA SET NOT ON VOLUME
DARC021C DC    X'021C'             DARC BAD UNIT INFORMATION
DARC0214 DC    X'0214'             DARC NO UNIT AVAILABLE
DARC041C DC    X'041C'             DARC MULTI VOLUME DATA SET
MAXLENTH DC    H'44'               MAXIMUM DATA SET LENGTH
MINMAX   DC    H'10000'            LENGTH FOR GETMAIN AREA     @ZA27595
MOVEINST MVC   F0(F0,R3),F0(R4)    MOVE INSTRUCTION FOR EXECUTE
MOVE1    MVC   F0(F0,R3),UPTPREFX-UPT(R4)  MOVE INSTRUCTION FOR EX.
TRANSTAB DC    C'0123456789ABCDEF' TRANSLATE TABLE FOR BITOHEX ROUTINE
         EJECT
IKJEHRN3 CSECT
         USING IKJEHRN3,R15        ADDRESSABILITY FOR CSECT
         USING IHADCB,R1X          ADDRESSABILITY FOR WORKAREA
***********************************************************************
*              ASTERISK SCAN ROUTINE
*  THIS ROUTINE SCANS THE DATA SET NAME AND LOCATES ASTERISK
*  QUALIFIERS, IF PRESENT.  IT ALSO CHECKS THAT THE ASTERISK DOES NOT
*  OCCUR IN THE FIRST INDEX LEVEL AND THAT THERE IS NOT MORE THAN ONE
*  ASTERISK IN THE DATA SET NAME.  NOTE-  THE SCAN BY PARSE HAS CHECKED
*  SYNTAX OF DATA SET NAME WITH ASTERISK ALLOWED IN PLACE OF ANY INDEX
*  LEVEL.
*  INPUT-      R2 POINTS TO DSNAME TO BE SCANNED
*              R3 CONTAINS LENGTH OF THIS DSNAME
*              R14 IS RETURN REGISTER
*  REGISTERS 2, 3, 4, AND 6 ARE USED
*  RETURN IS AS FOLLOWS-
*              0 PAST R14 IF * FOUND IN FIRST INDEX LEVEL
*              4 PAST R14 IF MORE THAN ONE * FOUND
*              8 PAST R14 IF SCAN SUCCESSFULLY COMPLETED
*
SCANDSN  SR    R4,R4               ZERO REGISTER
         ST    R4,STARADR2         ZERO POINTER TO ASTERISK
         STC   R4,STARLEV2         ZERO ASTERISK LEVEL INDICATOR
         AR    R3,R2               ADD LENGTH AND ADDRESS
*  REGISTER 3 POINTS PAST LAST CHARACTER OF DATA SET NAME
         LA    R4,F1               INITIALIZE LEVEL COUNTER TO ONE
         LR    R6,R4               SET REG 6 TO ONE FOR A LATER TEST
STARTST2 CLI   F0(R2),STAR         IS THIS CHARACTER AN ASTERISK
         BE    LEVLTST2            IF *, CHECK INDEX LEVEL
NXTCHAR2 LA    R2,F1(R2)           POINT TO NEXT CHARACTER
         CR    R2,R3               ARE THERE MORE CHARACTERS
         BE    ADD8                IF NOT SCAN IS FINISHED
         CLI   F0(R2),PERIOD       CHECK FOR PERIOD (NEW INDEX LEVEL)
         BNE   NXTCHAR2            IF NOT, CHECK NEXT CHARACTER
         LA    R4,F1(R4)           INCREMENT LEVEL COUNTER
         LA    R2,F1(R2)           POINT TO NEXT CHARACTER
         B     STARTST2            NEW INDEX LEVEL, GO CHECK FOR *
LEVLTST2 CR    R4,R6               IS THIS FIRST INDEX LEVEL
         BCR   EQ,R14              YES ERROR, * IN FIRST INDEX LEVEL
         CLI   STARLEV2,ZERO       IS LEVEL INDICATOR ZERO
         BNE   ADD4                NO, ERROR, MORE THAN ONE ASTERISK
         ST    R2,STARADR2         SAVE ADDRESS OF ASTERISK
         STC   R4,STARLEV2         SAVE LEVEL AT WHICH ASTERISK FOUND
         B     NXTCHAR2            GO CHECK NEXT CHARACTER
ADD4     LA    R14,F4(R14)         BUMP RETURN ADDRESS BY 4
         BR    R14                 RETURN
ADD8     LA    R14,F8(R14)         BUMP RETURN ADDRESS BY 8
         BR    R14                 RETURN
         DROP  R15                 IKJEHRN3 NO LONGER NEEDED
*
*  WHEN THE SCAN IS FINISHED
*        STARLEV2 WILL CONTAIN LEVEL AT WHICH ASTERISK FOUND
*        STARADR2 WILL CONTAIN ADDRESS AT WHICH ASTERISK FOUND
*        BOTH WILL CONTAIN ZERO IF NO ASTERISK FOUND
*
***********************************************************************
*
*
         EJECT                                                 @YL026YB
IKJEHRN4 CSECT                                                 @YL026YB
         USING IKJEHRN4,R15        ADDRESSABLILITY FOR CSECT   @YL026YB
         USING IHADCB,R1X          ADDRESSABILITY FOR WKAREA   @YL026YB
***********************************************************************
*  THIS SECTION DETERMINES THE LENGTH OF INDEX NAMES AND DATA SET NAMES
*  FROM THE CATALOG.  THESE NAMES HAVE A MAXIMUM LENGTH OF 8 WHEN
*  THE ASTERISK IS IN THE LAST POSITION OF THE DATA SET TO BE RENAMED.
*  OTHERWISE THE MAXIMUM LENGTH OF THE NAMES IS 44. A BLANK    @YL026YB
*  HAS BEEN STORED IN THE LAST  BYTE OF THE SCAN  BUFFER . THE SCAN
*  STARTS WITH THE 2ND BYTE AND CONTINUES UNTIL A BLANK IS FOUND.
*
NAMESCAN CLI   CIRPARM,INDEXOPT    IS IT A LIST NAME ENTRY     @YL026YB
         BE    BLDLIST             YES,GO PROCESS LIST ENTRY   @YL026YB
         LA    R2,LEVELSCN         ADDRESS OF SCAN BUFFER      @YL026YB
         MVC   F0(F8,R2),F1(R8)    MOVE NAME TO SCAN BUFFER    @YL026YB
         LA    R8,F9(R8)           BUMP POINTER FOR NAME ENTRY @YL026YB
*  TEST FOR GENERATION DATA GROUP DATA SET NAME                @YL026YB
         CLI   F0(R2),CHARG        TEST FOR G                  @YL026YB
         BNE   CHCKSTAR            NO,CONTINUE                 @YL026YB
         CLI   F5(R2),CHARV        TEST FOR V                  @YL026YB
         BNE   CHCKSTAR            NO, CONTINUE                @YL026YB
         LA    R6,F4               SET LOOP CONTROL            @YL026YB
GDGLOOP  LA    R3,F0(R6,R2)        POINT TO CHARACTER TO BE TESTED
         TM    F0(R3),COMPZONE     TEST FOR COMPLEMENTED NUMBER
         BNZ   CHCKSTAR            NOT COMPLEMENT, CONTINUE    @YL026YB
         BCT   R6,GDGLOOP          CHECK NEXT CHARACTER        @YL026YB
         XC    F1(F4,R2),FOXMASK   COMPLEMENT GENERATION NAME  @YL026YB
*  NOW SEE IF THIS IS ERROR VALUE ALREADY ATTEMPTED            @YL026YB
CHCKSTAR L     R6,STARPTR          POINT TO END OF CURRENT LIST
         LA    R3,STARLIST         POINT TO FIRST ENTRY        @YL026YB
STARLOOP CR    R6,R3               END OF LIST                 @YL026YB
         BE    CHECKOPT            YES, GO SCAN ASTERISK VALUE @YL026YB
         CLC   F0(F8,R3),LEVELSCN  COMPARE * VALUE TO ERROR LIST
         BE    ERRPROC             ERROR VALUE  ALREADY TRIED  @YL026YB
         LA    R3,F8(R3)           POINT TO NEXT VALUE OF * (ERROR)
         B     STARLOOP            GO CHECK THIS VALUE         @YL026YB
CHECKOPT CLI   CIRPARM,INDEXOPT    PROCESSING LIST NAMES       @YL026YB
         BE    INDXPTR             GO CHECK NAME AFTER '*'     @YL026YB
*  THE FIRST CHARACTER IS A NON-BLANK, THEREFORE START SCAN WITH
*  SECOND CHARACTER                                            @YL026YB
STARTSCN LA    R2,F1(R2)           POINT TO SECOND BYTE OF SCAN BUFFER
         LA    R6,F1               SET CHARACTER COUNTER       @YL026YB
BLANKTST CLI   F0(R2),BLANK        CHECK FOR BLANK CHARACTER   @YL026YB
         BE    ENDOFSCN            IF A BLANK IS FOUND SCAN IS OVER
         LA    R2,F1(R2)           POINT TO NEXT BYTE          @YL026YB
         LA    R6,F1(R6)           BUMP CHARACTER COUNTER      @YL026YB
         B     BLANKTST            GO CHECK FOR BLANK          @YL026YB
*  A DATA SET NAME OR AN INDEX LEVEL NAME HAS BEEN FOUND.  THE NAME IS
*  NOW IN LEVELSCN AND ITS LENGTH IS IN REGISTER 6.  NOW BUILD THE
*  FULLY QUALIFIED DATA SET NAME AND PROCESS IT.
ENDOFSCN LA    R3,DSNO             POINT TO BUILD BUFFER       @YL026YB
         STH   R6,NAMELTH          SAVE LENGTH OF QUALIFIER    @YL026YB
         LA    R4,DSNBUFFO         POINT TO INDEX STRUCTURE    @YL026YB
         LH    R2,INDEXSZE         LOAD LENGTH OF INDEX STRUCTURE
         EX    R2,MOVE             MOVE INDEX STRUCTURE        @YL026YB
*  THIS MOVES ONE EXTRA BYTE WHICH WILL BE OVERLAID WITH A PERIOD
         AR    R3,R2               POINT PAST INDEX STRUCTURE  @YL026YB
         MVI   F0(R3),PERIOD       INSERT PERIOD               @YL026YB
         LA    R2,F1(R2)           INCREASE LENGTH FOR PERIOD  @YL026YB
         AR    R2,R6               TOTAL LENGTH OF DATA SET NAME
         LA    R3,F1(R3)           POINT PAST PERIOD           @YL026YB
         LA    R4,LEVELSCN         POINT TO NAME FROM CIR      @YL026YB
         BCTR  R6,R0               DECREMENT FOR EXECUTE INSTRUCTION
         EX    R6,MOVE             MOVE DSNAME TO INDEX STRUCTURE
         STH   R2,DSLO             SAVE LENGTH OF TOTAL DATA SET NAME
         BR    R14                 RETURN                      @YL026YB
*  PROCESS LIST NAME AND SAVE ASTERISK VALUE TO BUILD SECOND DSNAME
BLDLIST  LA    R2,LISTSCN          ADDRESS OF SCAN BUFFER      @YL026YB
         MVC   LISTSCN(F44),F1(R8) MOVE NAME TO SCAN BUFFER    @YL026YB
         LA    R8,F45(R8)          BUMP PTR FOR LIST ENTRY     @YL026YB
         LA    R2,F1(R2)           POINT TO SECOND BYTE        @YL026YB
         LA    R6,F1               SET CHARACTER COUNTER       @YL026YB
BLNKTST  CLI   F0(R2),BLANK        CHECK FOR BLANK CHARACTER   @YL026YB
         BE    ENDSCN              BLANK FOUND SCAN IS OVER    @YL026YB
         LA    R2,F1(R2)           POINT TO NEXT BYTE          @YL026YB
         LA    R6,F1(R6)           BUMP CHARACTER COUNTER      @YL026YB
         B     BLNKTST             GO CHECK FOR BLANK          @YL026YB
ENDSCN   LA    R3,DSNO             POINT TO BUILD BUFFER       @YL026YB
         STH   R6,DSLO             SAVE LENGTH OF LIST NAME    @YL026YB
         LA    R4,LISTSCN          POINT TO LIST NAME          @YL026YB
         BCTR  R6,R0               DECREMENT FOR EXECUTE INSTR.
         EX    R6,MOVE             MOVE LIST TO BUFFER         @YL026YB
         LA    R4,DSNBUFFO         POINT TO INDEX STRUCT       @YL026YB
         LA    R3,TEMBUF           BUFFER FOR NAME BEFORE '*'  @YL026YB
         LH    R2,INDEXSZE         LENGTH OF INDEX STRUCTURE   @YL026YB
         BCTR  R2,R0               DECREMENT FOR EXECUTE INSTR.
         EX    R2,MOVE             MOVE NAME BEFORE '*' TO BUFFER
         LA    R4,LISTSCN          POINT TO LIST NAME          @YL026YB
         EX    R2,CLC1             SEE IF NAMES ARE EQUAL      @YL026YB
         BNE   ERRPROC             ERROR FOUND                 @YL026YB
         LA    R3,LEVELSCN         BUFFER FOR ASTERISK NAME    @YL026YB
         LA    R2,F2(R2)           SET LENGTH TO '*' NAME      @YL026YB
         AR    R4,R2               1ST BYTE OF '*' NAME        @YL026YB
         ST    R4,NADDR1           SAVE ADDR. OF '*' NAME
         SR    R5,R5               SET CHARACTER COUNTER       @YL026YB
ASTKSCN  CLI   F0(R4),PERIOD       CHECK FOR PERIOD            @YL026YB
         BE    ASTKVAL             ASTERISK VALUE FOUND        @YL026YB
         LA    R4,F1(R4)           POINT TO NEXT BYTE          @YL026YB
         LA    R5,F1(R5)           BUMP CHARACTER COUNTER      @YL026YB
         B     ASTKSCN             GO CHECK FOR PERIOD         @YL026YB
ASTKVAL  STH   R5,NAMELTH          LENGTH OF '*' VALUE         @YL026YB
         ST    R4,NADDR2          SAVE ADDR. OF LAST BYTE OF QUAL.
         L     R4,NADDR1          ADDRESS OF '*' NAME
         BCTR  R5,R0               DECREMENT FOR EXECUTE INSTR.
         EX    R5,MOVE             MOVE '*' NAME TO BUFFER     @YL026YB
         B     CHCKSTAR            GO CHECK '*' VALUE          @YL026YB
INDXPTR  L     R4,NADDR2           LAST BYTE OF QUAL.
         LA    R4,F1(R4)           BUMP PTR TO NAME AFTER '*'  @YL026YB
         ST    R4,NADDR2           SAVE ADDRESS
         SR    R6,R6               SET CHARACTER COUNTER       @YL026YB
LASTNME  CLI   F0(R4),BLANK        CHECK FOR BLANK             @YL026YB
         BE    ENDSCN1             BLANK FOUND SCAN IS OVER    @YL026YB
         LA    R4,F1(R4)           POINT TO NEXT BYTE          @YL026YB
         LA    R6,F1(R6)           BUMP CHARACTER COUNTER      @YL026YB
         B     LASTNME             GO CHECK FOR BLANK          @YL026YB
ENDSCN1  LA    R3,TEMBUF1          BUFFER FOR NAME AFTER '*'   @YL026YB
         L     R4,NADDR2           ADDRESS OF NAME AFTER '*'
         BCTR  R6,R0               DECREMENT FOR EXECUTE INSTR.
         EX    R6,MOVE             NAME AFTER '*' TO BUFFER    @YL026YB
         L     R4,STARADR1         ADDRESS OF ASTERISK         @YL026YB
         LA    R4,F2(R4)           POINT PAST ASTERISK         @YL026YB
         LA    R5,DSNBUFFO         POINT TO DSNAME (FIRST CHARACTER)
         AH    R5,DSBLO            POINT PAST DSNAME           @YL026YB
         SR    R5,R4               LENGTH OF DSNAME AFTER ASTERISK
         BCTR  R5,R0               DECREMENT FOR EXECUTE INSTRUCTION
         CR    R6,R5               COMPARE LENGTHS             @YL026YB
         BNE   ERRPROC             ERROR FOUND GO TO NEXT NAME @YL026YB
         EX    R6,CLC1             COMPARE NAMES AFTER '*'     @YL026YB
         BNE   ERRPROC             ERROR FOUND                 @YL026YB
         MVI   ISWITCH,ENDTEST     SET INDEX SWITCH            @YL026YB
         BR    R14                 RETURN                      @YL026YB
ERRPROC  LA    R14,F4(R14)         BUMP RETURN ADDRESS BY 4    @YL026YB
         BR    R14                 RETURN                      @YL026YB
MOVE     MVC   F0(F0,R3),F0(R4)    MOVE INSTR. FOR EX          @YL026YB
CLC1     CLC   F0(F0,R3),F0(R4)    COMPARE INSTR. FOR EX       @YL026YB
         DROP  R15                 IKJEHRN4 NO LONGER NEEDED   @YL026YB
         EJECT
*                                                                     *
*              PARSE MACROS FOR RENAME COMMAND                        *
*                                                                     *
         DS    0F
IKJEHPDL IKJPARM
DSNAME1  IKJPOSIT   DSTHING,PROMPT='OLD DATA SET NAME',HELP=('NAME OF DX
               ATA SET TO BE RENAMED')
DSNAME2  IKJPOSIT   DSTHING,PROMPT='NEW DATA SET NAME',HELP=('NEW NAME X
               OF DATA SET')
RENTYPE  IKJKEYWD
         IKJNAME    'ALIAS'
         IKJENDP
*                                                                     *
*              END OF PARSE MACROS                                    *
*                                                                     *
         EJECT
*  MAPPING MACROS
         SPACE 2
         IKJCPPL
         IKJPPL
LPPL     EQU   *-PPL               LENGTH OF PPL
         IKJDFPL
LDFPL    EQU   *-DFPL              LENGTH OF DFPL
         IKJDFPB
LDFPB    EQU   *-DFPB              LENGTH OF DFPB
         IKJPSCB
         IKJDAPL
LDAPL    EQU   *-DAPL              LENGTH OF DAPL
         IKJDAP08
LDAPB08  EQU   *-DAPB08            LENGTH OF DAPB08
         IKJDAP18
LDAPB18  EQU   *-DAPB18            LENGTH OF DAPB18
         IKJIOPL
LIOPL    EQU   *-IOPL              LENGTH OF IOPL
         IKJSTPB
LSTPB    EQU   *-STPB              LENGTH OF STPB
         EJECT
        IKJUPT                                                 @YL026YB
         EJECT                                                 @YL026YB
*              GETMAIN COMMON AREA
*                                                              @YL026YB
         DCBD  DSORG=PO,DEVD=DA
SAVEAREA DS    18F                 REGISTER SAVE AREA
UNPACK   DS    D                   WORK AREA FOR CVD
COUNT    DS    D                   WORK AREA FOR UNPACK
         ORG   COUNT+F7            BACK TO LAST BYTE OF COUNT FIELD
SIGNBYTE DS    CL1                 LABEL THE SIGN BYTE
         ORG
ENDCOUNT EQU   *                   END OF COUNT FIELD
*  CAMLST MACROS MUST BE KEPT TOGETHER - MOVED AS ONE BLOCK
*
*              RENAME MACRO CAMLST
*
RENAMLST CAMLST RENAME,OLDNAME,NEWNAME,VOLIST1 RENAME MACRO
         ORG   RENAMLST            LABEL RENAME CALST FIELDS
RENAME1  DS    H                   RENAME CAMLST FIRST HALF WORD
RENAME1A DS    H                   RENAME CAMLST SECOND HALF WORD
RENAME2  DS    F                   RENAME CAMLST SECOND FULL WORD
RENAME3  DS    F                   RENAME CAMLST THIRD FULL WORD
RENAME4  DS    F                   RENAME CAMLST FOURTH FULL WORD
         ORG
*
*              UNCATALOG MACRO CAMLST
*
UNCATLST CAMLST UCATDX,DSNAMEU     UNCATALOG MACRO
         ORG   UNCATLST            LABEL UNCATALOG CAMLST FIELDS
UNCAT1   DS    F                   UNCATALOG CAMLST FIRST FULL WORD
UNCAT2   DS    F                   UNCATALOG CAMLST SECOND FULL WORD
UNCAT    DS    F                   UNCATALOG CAMLST THIRD FULL WORD
         ORG
*
*              LOCATE MACRO CAMLST (BY DATA SET NAME)
*
LOCNAME  CAMLST NAME,DSNAME3,,LOCAREA1 LOCATE MACRO
         ORG   LOCNAME             LABEL LOCATE (NAME) CAMLST FIELDS
LOCNAME1 DS    F                   LOCATE CAMLST FIRST FULL WORD
LOCNAME2 DS    F                   LOCATE CAMLST SECOND FULL WORD
LOCNAME3 DS    F                   LOCATE CAMLST THIRD FULL WORD
LOCNAME4 DS    F                   LOCATE CAMLST FOURTH FULL WORD
         ORG
*
*              CATALOG MACRO CAMLST
*
CATLST   CAMLST CATBX,DSNAME4,,VOLIST2 CATALOG MACRO
         ORG   CATLST              LABEL CATALOG CAMLST FIELDS
CATLST1  DS    F                   CATALOG CAMLST FIRST FULL WORD
CATLST2  DS    F                   CATALOG CAMLST SECOND FULL WORD
CATLST3  DS    F                   CATALOG CAMLST THIRD FULL WORD
CATLST4  DS    F                   CATALOG CAMLST FOURTH FULL WORD
         ORG
*
*              END OF CAMLST MACROS
*
OLDNAME  DS    CL44                OLD DATA SET NAME
NEWNAME  DS    CL44                NEW DATA SET NAME
DSNAMEU  DS    CL45                DATA SET NAME (BLANK DELIMITER)
DSNAME3  DS    CL44                DATA SET NAME
DSNAME4  DS    CL45                DATA SET NAME (BLANK DELIMITER)
VOLNUM   DS    CL6                 VOLUME SERIAL NUMBER
TEMBUF   DS    CL8                 BUFFER FOR NAMD BEFORE '*'  @YL026YB
TEMBUF1  DS    CL44                BUFFER FOR NAME AFTER  '*'  @YL026YB
WKLENGTH DS    CL4                 WORKAREA LENGTH FIELD       @YL026YB
         DS    0H                  ALIGN HALF WORD BOUNDRY
VOLIST1  DS    CL12                VOLUME LIST
SEQNUM   DS    CL2                 VOLUME SEQUENCE NUMBER
MANYVOLS DS    19CL12              SPACE FOR MORE VOLUMES
VOLIST2  DS    CL2                 VOLUME LIST
         DS    20CL12              SPACE FOR SECOND VOLUME LIST
         DS    0D                  ALIGN DOUBLE WORD BOUNDRY
LOCAREA1 DS    259C                WORKAREA FOR LOCATE
LOCVNUM  DS    6C                  WORKAREA FOR LOCATE
*
OPEN     OPEN  (0,OUTPUT),MF=L     LIST FORM OF OPEN
CLOSE    CLOSE 0,MF=L              LIST FORM OF CLOSE
RENCPECB DS    F                   CP'S ECB FOR RENAME COMMAND
CIRADDR  DS    F                   ADDRESS OF CIR
DAIRADDR DS    F                   ADDRESS OF DAIR
UPTSAVE  DS    F                   SAVE UPT ADDRESS HERE       @YL026YB
STARADR1 DS    F                   ADDRESS * FOUND DSNAME1
STARADR2 DS    F                   ADDRESS * FOUND DSNAME2
WORKWORD DS    F                   WORK SPACE (TEMPORARY SAVE AREA)
STARPTR  DS    F                   ADDRESS OF NEXT EMPTY SLOT
NADDR1   DS    F                   TEMPORARY ADDRESS FOR QUALIFIERS
NADDR2   DS    F                   TEMPORARY ADDRESS FOR QUALIFIERS
STARLIST DS    CL256               LIST OF ERROR ASTERISK VALUES
STAREND  EQU   *                   END OF STAR LIST
INDEXSZE DS    H                   LENGTH OF INDEX STRUCTURE
NAMELTH  DS    H                   SAVE QUALIFIER LENGTH HERE
CATERCDE DS    H                   UNCATALOG RETURN CODE SAVED HERE
         DS    0H                  ALIGN HALF WORD BOUNDRY
DSLO     DS    CL2                 DSLENGTH AND
DSNO     DS    CL44                DSNAME BUFFER (OLD DSNAME)
         DS    0H                  ALIGN HALF WORD BOUNDRY
DSBLO    DS    CL2                 LENGTH OF DSNAME IN DSNBUFFO
DSNBUFFO DS    CL52                DSNAME (OLD) BUILT IN THIS BUFFER
         DS    0H                  ALIGN HALF WORD BOUNDRY
DSLN     DS    CL2                 DSLENGTH AND
DSNN     DS    CL44                DSNAME BUFFER (NEW DSNAME)
         DS    0H                  ALIGN HALF WORD BOUNDRY
DSBLN    DS    CL2                 LENGTH OF NAME IN DSNBUFFN
DSNBUFFN DS    CL52                DSNAME (NEW) BUILT IN THIS BUFFER
LEVELSCN DS    CL9                 BUFFER FOR SCANNING INDEX NAMES
ISWITCH  DS    CL1                 SWITCH INDICATES INDEX NAMES
STARLEV1 DS    CL1                 LEVEL * FOUND DSNAME1
STARLEV2 DS    CL1                 LEVEL * FOUND DSNAME2
UNALOCSW DS    CL1                 SWITCH INDICATES UNALLOCATE DATA SET
ENDERROR DS    CL1                 SWITCH INDICATES CONTINUE PROCESSING
RC       DS    CL1                 SAVE RETURN CODES HERE
DEFLTSW  DS    CL1                 SWITCH INDICATES DEFAULT NAME
RENERRSW DS    CL1                 SWITCH INDICATES RENAME ERROR
CIRFLAG  DS    CL1                 INDICATES * NAME PROCESSED
ERRORSW  DS    CL1                 ERROR SWITCH
MEM2SW   DS    CL1                 SWITCH SECOND NAME IS MEMBER ONLY
DDNAME1  DS    CL8                 SAVE DDNAME HERE
LISTSCN  DS    CL45                BUFFER FOR SCANNING LIST
STACKSW  DS    CL1                 INDICATE FLUSH STACK AND CLEAR QUEUE
MAINX    DS    CL1                 GIVES STATUS OF CIR WKAREA  @YL026YB
*  THESE FIELDS USED BY BLDL AND STOW (KEEP INTACT)
STOWOLD  DS    2F                  MEMBER NAMES STORED HERE FOR -
STOWNEW  DS    2F                  STOW CHANGE OPTION
BLDLCNT  DS    H                   BLDL LIST NUMBER OF ENTRIES (1)
BLDLLNTH DS    H                   BLDL LIST LENGTH OF EACH ENTRY (76)
BLDLMEM  DS    CL13                BLDL MEMBER NAME AND TTR DATA
BLDLDATA DS    CL63                BLDL FLAG BYTE AND USER DATA
         DS    0H                  ALIGN HALF WORD BOUNDRY
STOWMEM  DS    CL11                STOW MEMBER NAME AND TTR DATA
STOWDATA DS    CL63                STOW FLAG BYTE AND USER DATA
STOWEND  EQU   *                   END OF STOW AND BLDL LISTS
*  CATALOG INFORMATION ROUTINE PARAMETER LIST (KEEP INTACT)
CIRPARM  DS    F                   OPTION BYTE
NAMEPTR  DS    F                   POINTER TO NAME OR TTR
VOLIDPTR DS    F                   POINTER TO USER CAT NAME    @YL026YB
WORK1PTR DS    F                   POINTER TO CIR  WORKAREA    @YL026YB
WORK2PTR DS    F                   POINTER TO 18 WORD WORKAREA
PASSPTR  DS    F                   POINTER TO PASSWORD         @YL026YB
WRK2AREA DS    18F                 WORKAREA FOR CIR (SAVEAREA)
         DS    0D                  ALIGN WORKAREA
NAMETTR  DS    CL44                DSNAME  BUFFER              @YL026YB
CVOLID   DS    CL44                VOLUME SERIAL NUMBER BUFFER @YL026YB
PASSWKD  DS    CL8                 PASSWORD BUFFER             @YL026YB
STARSW   DS    CL1                 INDICATES ASTERISK VALUE PROCESSED
QUALBUFF DS    CL8                 DEFAULT RETURNS QUALIFIER HERE
*  END OF CATALOG INFORMATION ROUTINE PARAMETER LIST
ANSPLACE DS    F                   ANSWER PLACE FOR PARSE
         DS    0F                  ALIGN WORD BOUNDRY
PARSPARM DS    (LPPL)X             SPACE FOR PARSE PARAMETER LIST
         DS    0F                  ALIGN WORD BOUNDRY
IOPARM   DS    (LIOPL)X            SPACE FOR I/O PARAMETER LIST
         DS    0F                  ALIGN WORD BOUNDRY
DFLTPARM DS    (LDFPL)X            SPACE FOR DEFAULT PARAMETER LIST
         DS    0F                  ALIGN WORD BOUNDRY
DFLTPBLK DS    (LDFPB)X            SPACE FOR DEFAULT PARM BLOCK
         DS    0F                  ALIGN WORD BOUNDRY
DAIRPARM DS    (LDAPL)X            SPACE FOR DAIR PARAMETER LIST
         DS    0F                  ALIGN WORD BOUNDRY
DAIR08   DS    (LDAPB08)X          SPACE FOR DAIR ENTRY 08
         DS    0F                  ALIGN WORD BOUNDRY
DAIR18   DS    (LDAPB18)X          SPACE FOR DAIR ENTRY 18
*  KEEP DAIR LISTS TOGETHER, ZEROED BY ONE INSTRUCTION
DLSTEND  EQU   *                   END OF DAIR ENTRY LISTS
         DS    0F                  ALIGN WORD BOUNDRY
STACKPRM DS    (LSTPB)X            SPACE FOR STACK PARM BLOCK
PUT      PUTLINE MF=L              LIST FORM OF PUTLINE
*  THE FOLLOWING SPACE IS USED FOR STAE
TMPSR1   DS    F                   SAVE TMP'S REGISTER 1 HERE
STAEADDR DS    F                   ADDRESS OF STAE INTERFACE ROUTINE
         PSEUDO MF=L
STAELIST STAE  STAEADDR,PARAM=STAEPARM,MF=L
STAEONE  STABUILD CODE=713,RTN=ABEND713,ADDR=STAEONE,FLAG=(ONE,NMSG),  X
               NUM=4,MF=L
STAETWO  STABUILD CODE=913,RTN=ABEND913,ADDR=STAETWO,FLAG=(ONE,NMSG),  X
               MF=L
STAETHRE STABUILD CODE=(113,213,313,A13),RTN=ABEND13,ADDR=STAETHRE,    X
               FLAG=(MUL,NMSG),LIST=STAELST,                           X
               MF=L
STAEFOUR STABUILD CODE=000,RTN=LISTEST,ADDR=STAEFOUR,FLAG=(ALL,END),   X
               MF=L
STAEPARM STAEPARM FLAG=(CP),PSEUDO=$PSEUDO,LIST=STAEONE,ADDR=STAEPARM, X
               MF=L
STAELNTH EQU   *-STAELIST          SIZE OF STAE LISTS
*  THE FOLLOWING IS RESERVED SPACE FOR OUTPUT CHAINS
OUTAREA1 DS    F                   MESSAGE CHAIN POINTER
OUTCNT1  DS    F                   MESSAGE SEGMENT COUNT
OUTPUT11 DS    F                   POINTER TO MESSAGE SEGMENT
OUTPUT12 DS    F                   POINTER TO MESSAGE INSERTION
OUTAREA2 DS    F                   MESSAGE CHAIN POINTER
OUTCNT2  DS    F                   MESSAGE SEGMENT COUNT
OUTPUT21 DS    F                   POINTER TO MESSAGE SEGMENT
OUTPUT22 DS    F                   POINTER TO MESSAGE INSERTION
*  END OF OUTPUT CHAINS
*
*  FIRST DATA SET NAME FOR MESSAGES STORED HERE
DSNMESGL EQU   *                   ALIAS FOR DSNMSGL1
DSNMSGL1 DS    H                   LENGTH OF FIRST DSNAME
DSNMSGO1 DS    H                   OFFSET FOR INSERTION
DSNMSG1  DS    CL52                FIRST DSNAME
*  FIRST MEMBER NAME FOR MESSAGES STORED HERE
MEMMSGL1 DS    H                   LENGTH OF MEMBER NAME FIRST DSNAME
MEMMSGO1 DS    H                   OFFSET FOR INSERTION
MEMMSG1  DS    CL10                MEMBER NAME FIRST DSNAME
*  SECOND DATA SET NAME FOR MESSAGES STORED HERE
DSNMSGL2 DS    H                   LENGTH OF SECOND DSNAME
DSNMSGO2 DS    H                   OFFSET FOR INSERTION
DSNMSG2  DS    CL52                SECOND DSNAME
*  SECOND MEMBER NAME FOR MESSAGES STORED HERE
MEMMSGL2 DS    H                   LENGTH OF MEMBER NAME SECOND DSNAME
MEMMSGO2 DS    H                   OFFSET FOR INSERTION
MEMMSG2  DS    CL10                MEMBER NAME SECOND DSNAME
*  RETURN CODE FOR MESSAGES STORED HERE
RCMESGL  DS    H                   LENGTH OF RETURN CODE
RCMESGO  DS    H                   OFFSET FOR INSERTION
RCMESG   DS    CL4                 RETURN CODE
RCX      DS    CL1                 RC SAVE AREA                @ZA01485
*  ASTERISK NAME FOR MESSAGES STORED HERE
STARBUFF DS    CL52                LENGTH, OFFSET, AND ASTERISK NAME
CORE     EQU   *-IHADCB            CORE SIZE FOR GETMAIN
         EJECT
IKJEHMSG CSECT
         ENTRY IKJEHSMG
***********************************************************************
*                                                                     *
*  THIS CONTROL SECTION CONTAINS THE MESSAGE TEXT (BOTH FIRST AND     *
*  SECOND LEVEL).  IT CONTAINS A BRANCH TABLE FOR FIRST LEVEL MESSAGES*
*  AND A BRANCH TABLE FOR SECOND LEVEL MESSAGES.  EACH BRANCH TABLE   *
*  ENTRY IS COMPOSED OF A ONE BYTE OFFSET FIELD FOR MESSAGE INSERTIONS*
*  AND A THREE BYTE ADDRESS OF THE MESSAGE.  THE MESSAGE BUILDER      *
*  ROUTINES COMBINE THE ADDRESS OF THE CONTROL SECTION AND THE ADDRESS*
*  OF THE MESSAGE TO GET THE TRUE ADDRESS OF THE MESSAGE.  THE OFFSET *
*  IS PLACED IN THE INSERTION SEGMENT.                                *
*  EACH MESSAGE IS COMPOSED OF A 4 BYTE HEADER (2 BYTE LENGTH OF      *
*  MESSAGE INCLUDING HEADER LENGTH AND A 2 BYTE OFFSET FIELD)         *
*  FOLLOWED BY THE MESSAGE TEXT.                                      *
*                                                                     *
***********************************************************************
         SPACE
*  EQUATES USED IN THIS CONTROL SECTION
HDR      EQU   4                   HEADER LENGTH (2 BYTES EACH, LENGTH
*                                  AND OFFSET FIELDS) EACH SEGMENT
OFST     EQU   0                   INSERTION OFFSET 1ST MESSAGE SEGMENT
*  OFFSETS FOR FIRST LEVEL MESSAGE INSERTIONS
OFST01   EQU   19                  INSERTION OFFSET MESSAGE 01
OFST02   EQU   0                   INSERTION OFFSET MESSAGE 02
OFST03   EQU   19                  INSERTION OFFSET MESSAGE 03
OFST04   EQU   19                  INSERTION OFFSET MESSAGE 04
OFST05   EQU   0                   INSERTION OFFSET MESSAGE 05
OFST06   EQU   30                  INSERTION OFFSET MESSAGE 06
OFST07   EQU   36                  INSERTION OFFSET MESSAGE 07
OFST08   EQU   0                   INSERTION OFFSET MESSAGE 08
OFST09   EQU   45                  INSERTION OFFSET MESSAGE 09   A49872
OFST10   EQU   31                  INSERTION OFFSET MESSAGE 10
OFST11   EQU   19                  INSERTION OFFSET MESSAGE 11
OFST12   EQU   19                  INSERTION OFFSET MESSAGE 12
OFST13   EQU   19                  INSERTION OFFSET MESSAGE 13
OFST14   EQU   19                  INSERTION OFFSET MESSAGE 14
OFST15   EQU   19                  INSERTION OFFSET MESSAGE 15
OFST16   EQU   43                  INSERTION OFFSET MESSAGE 16
OFST17   EQU   43                  INSERTION OFFSET MESSAGE 17
OFST18   EQU   34                  INSERTION OFFSET MESSAGE 18
OFST19   EQU   43                  INSERTION OFFSET MESSAGE 19
OFST20   EQU   19                  INSERTION OFFSET MESSAGE 20
OFST21   EQU   19                  INSERTION OFFSET MESSAGE 21
OFST22   EQU   19                  INSERTION OFFSET MESSAGE 22
OFST23   EQU   17                  INSERTION OFFSET MESSAGE 23
OFST24   EQU   31                  INSERTION OFFSET MESSAGE 24
OFST25   EQU   0                   INSERTION OFFSET MESSAGE 25
OFST26   EQU   0                   INSERTION OFFSET MESSAGE 26
OFST27   EQU   24                  INSERTION OFFSET MESSAGE 27
OFST28   EQU   28                  INSERTION OFFSET MESSAGE 28
OFST29   EQU   19                  INSERTION OFFSET MESSAGE 29
*  OFFSETS FOR SECOND LEVEL MESSAGE INSERTIONS
*  NOTE-  THERE ARE CURRENTLY NO INSERTIONS IN MOST SECOND LEVEL
*  MESSAGES.  A COMMON OFFSET OF ZERO IS USED.
OFSTSMSG EQU   0                   INSERTION OFFSET 2ND LEVEL MESSAGES
OFSTSM04 EQU   29                  INSERTION OFFSET SECOND LEVEL MSG 04
OFSTSM05 EQU   40                  INSERTION OFFSET SECOND LEVEL MSG 05
OFSTSM07 EQU   29                  INSERTION OFFSET SECOND LEVEL MSG 07
OFSTSM08 EQU   27                  INSERTION OFFSET SECOND LEVEL MSG 08
OFSTSM10 EQU   29                  INSERTION OFFSET SECOND LEVEL MSG 10
OFSTSM12 EQU   29                  INSERTION OFFSET SECOND LEVEL MSG 12
OFSTSM13 EQU   26                  INSERTION OFFSET SECOND LEVEL MSG 13
OFSTSM15 EQU   26                  INSERTION OFFSET SECOND LEVEL MSG 15
OFSTSM20 EQU   28                  INSERTION OFFSET SECOND LEVEL MSG 20
OFSTSM21 EQU   26                  INSERTION OFFSET SECOND LEVEL MSG 21
OFSTSM22 EQU   26                  INSERTION OFFSET SECOND LEVEL MSG 22
         SPACE
AMSG01   DC    AL1(OFST01)         INSERTION OFFSET
         DC    AL3(LMSG01)         MESSAGE ADDRESS
AMSG02   DC    AL1(OFST02)         INSERTION OFFSET
         DC    AL3(LMSG02)         MESSAGE ADDRESS
AMSG03   DC    AL1(OFST03)         INSERTION OFFSET
         DC    AL3(LMSG03)         MESSAGE ADDRESS
AMSG04   DC    AL1(OFST04)         INSERTION OFFSET
         DC    AL3(LMSG04)         MESSAGE ADDRESS
AMSG05   DC    AL1(OFST05)         INSERTION OFFSET
         DC    AL3(LMSG05)         MESSAGE ADDRESS
AMSG06   DC    AL1(OFST06)         INSERTION OFFSET
         DC    AL3(LMSG06)         MESSAGE ADDRESS
AMSG07   DC    AL1(OFST07)         INSERTION OFFSET
         DC    AL3(LMSG07)         MESSAGE ADDRESS
AMSG08   DC    AL1(OFST08)         INSERTION OFFSET
         DC    AL3(LMSG08)         MESSAGE ADDRESS
AMSG09   DC    AL1(OFST09)         INSERTION OFFSET
         DC    AL3(LMSG09)         MESSAGE ADDRESS
AMSG10   DC    AL1(OFST10)         INSERTION OFFSET
         DC    AL3(LMSG10)         MESSAGE ADDRESS
AMSG11   DC    AL1(OFST11)         INSERTION OFFSET
         DC    AL3(LMSG11)         MESSAGE ADDRESS
AMSG12   DC    AL1(OFST12)         INSERTION OFFSET
         DC    AL3(LMSG12)         MESSAGE ADDRESS
AMSG13   DC    AL1(OFST13)         INSERTION OFFSET
         DC    AL3(LMSG13)         MESSAGE ADDRESS
AMSG14   DC    AL1(OFST14)         INSERTION OFFSET
         DC    AL3(LMSG14)         MESSAGE ADDRESS
AMSG15   DC    AL1(OFST15)         INSERTION OFFSET
         DC    AL3(LMSG15)         MESSAGE ADDRESS
AMSG16   DC    AL1(OFST16)         INSERTION OFFSET
         DC    AL3(LMSG16)         MESSAGE ADDRESS
AMSG17   DC    AL1(OFST17)         INSERTION OFFSET
         DC    AL3(LMSG17)         MESSAGE ADDRESS
AMSG18   DC    AL1(OFST18)         INSERTION OFFSET
         DC    AL3(LMSG18)         MESSAGE ADDRESS
AMSG19   DC    AL1(OFST19)         INSERTION OFFSET
         DC    AL3(LMSG19)         MESSAGE ADDRESS
AMSG20   DC    AL1(OFST20)         INSERTION OFFSET
         DC    AL3(LMSG20)         MESSAGE ADDRESS
AMSG21   DC    AL1(OFST21)         INSERTION OFFSET
         DC    AL3(LMSG21)         MESSAGE ADDRESS
AMSG22   DC    AL1(OFST22)         INSERTION OFFSET
         DC    AL3(LMSG22)         MESSAGE ADDRESS
AMSG23   DC    AL1(OFST23)         INSERTION OFFSET
         DC    AL3(LMSG23)         MESSAGE ADDRESS
AMSG24   DC    AL1(OFST24)         INSERTION OFFSET
         DC    AL3(LMSG24)         MESSAGE ADDRESS
AMSG25   DC    AL1(OFST25)         INSERTION OFFSET
         DC    AL3(LMSG25)         MESSAGE ADDRESS
AMSG26   DC    AL1(OFST26)         INSERTION OFFSET
         DC    AL3(LMSG26)         MESSAGE ADDRESS
AMSG27   DC    AL1(OFST27)         INSERTION OFFSET
         DC    AL3(LMSG27)         MESSAGE ADDRESS
AMSG28   DC    AL1(OFST28)         INSERTION OFFSET
         DC    AL3(LMSG28)         MESSAGE ADDRESS
AMSG29   DC    AL1(OFST29)         INSERTION OFFSET
         DC    AL3(LMSG29)         MESSAGE ADDRESS
*  FIRST LEVEL MESSAGES
LMSG01   DC    AL2(L'MSG01+HDR)
         DC    AL2(OFST)
MSG01    DC    C'IKJ58201I DATA SET  NOT IN CATALOG OR AMOUNT OF DATASEX
               TS EXCEEDS WORKAREA FOR GENERIC RENAME'          OZ27595
LMSG02   DC    AL2(L'MSG02+HDR)
         DC    AL2(OFST)
MSG02    DC    C'IKJ58202I NOT ENOUGH MAIN STORAGE TO EXECUTE COMMAND'
LMSG03   DC    AL2(L'MSG03+HDR)
         DC    AL2(OFST)
MSG03    DC    C'IKJ58203I DATA SET  NOT RENAMED, EXPIRATION DATE HAS NX
               OT PASSED+'
LMSG04   DC    AL2(L'MSG04+HDR)
         DC    AL2(OFST)
MSG04    DC    C'IKJ58204I DATA SET  NOT USABLE+'
LMSG05   DC    AL2(L'MSG05+HDR)
         DC    AL2(OFST)
MSG05    DC    C'IKJ58205I INVALID USE OF ALIAS KEYWORD+'
LMSG06   DC    AL2(L'MSG06+HDR)
         DC    AL2(OFST)
MSG06    DC    C'IKJ58206I INVALID USE OF * IN +'
LMSG07   DC    AL2(L'MSG07+HDR)
         DC    AL2(OFST)
MSG07    DC    C'IKJ58207I UNABLE TO RENAME DATA SET +'
LMSG08   DC    AL2(L'MSG08+HDR)
         DC    AL2(OFST)
MSG08    DC    C'IKJ58208I INVALID USE OF COMMAND+'
LMSG09   DC    AL2(L'MSG09+HDR)
         DC    AL2(OFST)
MSG09    DC    C'IKJ58209I DATA SET NAME REQUIRED WHEN MEMBER  SPECIFIEX
               D'                                                A49872
LMSG10   DC    AL2(L'MSG10+HDR)
         DC    AL2(OFST)
MSG10    DC    C'IKJ58210I DATA SET RENAMED BUT  STILL CATALOGED'
LMSG11   DC    AL2(L'MSG11+HDR)
         DC    AL2(OFST)
MSG11    DC    C'IKJ58211I DATA SET  NOT ALLOCATED, TOO MANY DATA SETS+X
               '
LMSG12   DC    AL2(L'MSG12+HDR)
         DC    AL2(OFST)
MSG12    DC    C'IKJ58212I DATA SET  NOT ALLOCATED, DATA SET NOT ON VOLX
               UME+'
LMSG13   DC    AL2(L'MSG13+HDR)
         DC    AL2(OFST)
MSG13    DC    C'IKJ58213I DATA SET  NOT ALLOCATED, REQUIRED VOLUME NOTX
                MOUNTED+'
LMSG14   DC    AL2(L'MSG14+HDR)
         DC    AL2(OFST)
MSG14    DC    C'IKJ58214I DATA SET  NOT ALLOCATED, SYSTEM OR INSTALLATX
               ION ERROR+'
LMSG15   DC    AL2(L'MSG15+HDR)
         DC    AL2(OFST)
MSG15    DC    C'IKJ58215I DATA SET  ALREADY IN USE, TRY LATER+'
LMSG16   DC    AL2(L'MSG16+HDR)
         DC    AL2(OFST)
MSG16    DC    C'IKJ58216I PROPER PASSWORD NOT SUPPLIED FOR '
LMSG17   DC    AL2(L'MSG17+HDR)
         DC    AL2(OFST)
MSG17    DC    C'IKJ58217I SPECIFIED MEMBER NOT IN DATA SET '
LMSG18   DC    AL2(L'MSG18+HDR)
         DC    AL2(OFST)
MSG18    DC    C'IKJ58218I INVALID DATA SET NAME, '''' EXCEEDS 44 CHARAX
               CTERS'
LMSG19   DC    AL2(L'MSG19+HDR)
         DC    AL2(OFST)
MSG19    DC    C'IKJ58219I NO DATA SETS FOUND TO MATCH * IN '
LMSG20   DC    AL2(L'MSG20+HDR)
         DC    AL2(OFST)
MSG20    DC    C'IKJ58220I DATA SET  NOT ON A DIRECT ACCESS DEVICE, NOTX
                SUPPORTED'
LMSG21   DC    AL2(L'MSG21+HDR)
         DC    AL2(OFST)
MSG21    DC    C'IKJ58221I DATA SET  RESIDES ON MULTIPLE VOLUMES, NOT SX
               UPPORTED'
LMSG22   DC    AL2(L'MSG22+HDR)
         DC    AL2(OFST)
MSG22    DC    C'IKJ58222I DATA SET  ALREADY EXISTS'
LMSG23   DC    AL2(L'MSG23+HDR)
         DC    AL2(OFST)
MSG23    DC    C'IKJ58223I MEMBER  ALREADY EXISTS'
LMSG24   DC    AL2(L'MSG24+HDR)
         DC    AL2(OFST)
MSG24    DC    C'IKJ58224I MEMBER SPECIFIED BUT  NOT A PARTITIONED DATAX
                SET'
LMSG25   DC    AL2(L'MSG25+HDR)
         DC    AL2(OFST)
MSG25    DC    C'IKJ58225I COMMAND SYSTEM ERROR+'
LMSG26   DC    AL2(L'MSG26+HDR)
         DC    AL2(OFST)
MSG26    DC    C'IKJ58226I NO SPACE IN DIRECTORY FOR ALIAS'
LMSG27   DC    AL2(L'MSG27+HDR)
         DC    AL2(OFST)
MSG27    DC    C'IKJ58227I DATA SET NAME  WILL CREATE INVALID CATALOG SX
               TRUCTURE+'
LMSG28   DC    AL2(L'MSG28+HDR)
         DC    AL2(OFST)
MSG28    DC    C'IKJ58228I UNABLE TO CATALOG +'
LMSG29   DC    AL2(L'MSG29+HDR)
         DC    AL2(OFST)
MSG29    DC    C'IKJ58229I DATA SET  NOT ALLOCATED+'
*  ENTRY POINT TO SECOND LEVEL MESSAGE BRANCH TABLE
IKJEHSMG DS    0F                  ALIGN SECOND LEVEL BRANCH TABLE
ASMSG01  DC    AL1(OFSTSMSG)       INSERTION OFFSET
         DC    AL3(LSMSG01)        MESSAGE ADDRESS
ASMSG02  DC    AL1(OFSTSMSG)       INSERTION OFFSET
         DC    AL3(LSMSG02)        MESSAGE ADDRESS
ASMSG03  DC    AL1(OFSTSMSG)       INSERTION OFFSET
         DC    AL3(LSMSG03)        MESSAGE ADDRESS
ASMSG04  DC    AL1(OFSTSM04)       INSERTION OFFSET
         DC    AL3(LSMSG04)        MESSAGE ADDRESS
ASMSG05  DC    AL1(OFSTSM05)       INSERTION OFFSET
         DC    AL3(LSMSG05)        MESSAGE ADDRESS
ASMSG06  DC    AL1(OFSTSMSG)       INSERTION OFFSET
         DC    AL3(LSMSG06)        MESSAGE ADDRESS
ASMSG07  DC    AL1(OFSTSM07)       INSERTION OFFSET
         DC    AL3(LSMSG07)        MESSAGE ADDRESS
ASMSG08  DC    AL1(OFSTSM08)       INSERTION OFFSET
         DC    AL3(LSMSG08)        MESSAGE ADDRESS
ASMSG09  DC    AL1(OFSTSMSG)       INSERTION OFFSET
         DC    AL3(LSMSG09)        MESSAGE ADDRESS
ASMSG10  DC    AL1(OFSTSM10)       INSERTION OFFSET
         DC    AL3(LSMSG10)        MESSAGE ADDRESS
ASMSG11  DC    AL1(OFSTSMSG)       INSERTION OFFSET
         DC    AL3(LSMSG11)        MESSAGE ADDRESS
ASMSG12  DC    AL1(OFSTSM12)       INSERTION OFFSET
         DC    AL3(LSMSG12)        MESSAGE ADDRESS
ASMSG13  DC    AL1(OFSTSM13)       INSERTION OFFSET
         DC    AL3(LSMSG13)        MESSAGE ADDRESS
ASMSG14  DC    AL1(OFSTSMSG)       INSERTION OFFSET
         DC    AL3(LSMSG14)        MESSAGE ADDRESS
ASMSG15  DC    AL1(OFSTSM15)       INSERTION OFFSET
         DC    AL3(LSMSG15)        MESSAGE ADDRESS
ASMSG16  DC    AL1(OFSTSMSG)       INSERTION OFFSET
         DC    AL3(LSMSG16)        MESSAGE ADDRESS
ASMSG17  DC    AL1(OFSTSMSG)       INSERTION OFFSET
         DC    AL3(LSMSG17)        MESSAGE ADDRESS
ASMSG18  DC    AL1(OFSTSMSG)       INSERTION OFFSET
         DC    AL3(LSMSG18)        MESSAGE ADDRESS
ASMSG19  DC    AL1(OFSTSMSG)       INSERTION OFFSET
         DC    AL3(LSMSG19)        MESSAGE ADDRESS
ASMSG20  DC    AL1(OFSTSM20)       INSERTION OFFSET
         DC    AL3(LSMSG20)        MESSAGE ADDRESS
ASMSG21  DC    AL1(OFSTSM21)       INSERTION OFFSET
         DC    AL3(LSMSG21)        MESSAGE ADDRESS
ASMSG22  DC    AL1(OFSTSM22)       INSERTION OFFSET
         DC    AL3(LSMSG22)        MESSAGE ADDRESS
ASMSG23  DC    AL1(OFSTSMSG)       INSERTION OFFSET
         DC    AL3(LSMSG23)        MESSAGE ADDRESS
ASMSG24  DC    AL1(OFSTSMSG)       INSERTION OFFSET
         DC    AL3(LSMSG24)        MESSAGE ADDRESS
ASMSG25  DC    AL1(OFSTSMSG)       INSERTION OFFSET
         DC    AL3(LSMSG25)        MESSAGE ADDRESS
ASMSG26  DC    AL1(OFSTSMSG)       INSERTION OFFSET
         DC    AL3(LSMSG26)        MESSAGE ADDRESS
ASMSG27  DC    AL1(OFSTSMSG)       INSERTION OFFSET
         DC    AL3(LSMSG27)        MESSAGE ADDRESS
ASMSG28  DC    AL1(OFSTSMSG)       INSERTION OFFSET
         DC    AL3(LSMSG28)        MESSAGE ADDRESS
ASMSG29  DC    AL1(OFSTSMSG)       INSERTION OFFSET
         DC    AL3(LSMSG29)        MESSAGE ADDRESS
ASMSG30  DC    AL1(OFSTSMSG)       INSERTION OFFSET
         DC    AL3(LSMSG30)        MESSAGE ADDRESS
*  SECOND LEVEL MESSAGES
LSMSG01  DC    AL2(L'SMSG01+HDR)
         DC    AL2(OFST)
SMSG01   DC    C'IKJ58211I USE FREE COMMAND TO FREE UNUSED DATA SETS'
LSMSG02  DC    AL2(L'SMSG02+HDR)
         DC    AL2(OFST)
SMSG02   DC    C'IKJ58212I CATALOG INFORMATION INCORRECT'
LSMSG03  DC    AL2(L'SMSG03+HDR)
         DC    AL2(OFST)
SMSG03   DC    C'IKJ58213I VOLUME OR CVOL NOT ON SYSTEM AND CANNOT BE AX
               CCESSED'
LSMSG04  DC    AL2(L'SMSG04+HDR)
         DC    AL2(OFST)
SMSG04   DC    C'IKJ58214I CATALOG ERROR CODE '
LSMSG05  DC    AL2(L'SMSG05+HDR)
         DC    AL2(OFST)
SMSG05   DC    C'IKJ58214I DYNAMIC ALLOCATION ERROR CODE '
LSMSG06  DC    AL2(L'SMSG06+HDR)
         DC    AL2(OFST)
SMSG06   DC    C'IKJ58215I DATA SET IS ALLOCATED TO ANOTHER JOB OR USERX
               '
LSMSG07  DC    AL2(L'SMSG07+HDR)
         DC    AL2(OFST)
SMSG07   DC    C'IKJ58225I DEFAULT ERROR CODE '
LSMSG08  DC    AL2(L'SMSG08+HDR)
         DC    AL2(OFST)
SMSG08   DC    C'IKJ58225I PARSE ERROR CODE '
LSMSG09  DC    AL2(L'SMSG09+HDR)
         DC    AL2(OFST)
SMSG09   DC    C'IKJ58206I * CANNOT BE USED WITH MEMBER'
LSMSG10  DC    AL2(L'SMSG10+HDR)
         DC    AL2(OFST)
SMSG10   DC    C'IKJ58210I CATALOG ERROR CODE '
LSMSG11  DC    AL2(L'SMSG11+HDR)
         DC    AL2(OFST)
SMSG11   DC    C'IKJ58227I A QUALIFIER CANNOT BE BOTH AN INDEX AND THE X
               LAST QUALIFIER OF A DATA SET NAME'
LSMSG12  DC    AL2(L'SMSG12+HDR)
         DC    AL2(OFST)
SMSG12   DC    C'IKJ58228I CATALOG ERROR CODE '
LSMSG13  DC    AL2(L'SMSG13+HDR)
         DC    AL2(OFST)
SMSG13   DC    C'IKJ58204I OPEN ERROR CODE '
LSMSG14  DC    AL2(L'SMSG14+HDR)
         DC    AL2(OFST)
SMSG14   DC    C'IKJ58214I CATALOG I/O ERROR'
LSMSG15  DC    AL2(L'SMSG15+HDR)
         DC    AL2(OFST)
SMSG15   DC    C'IKJ58225I DAIR ERROR CODE '
LSMSG16  DC    AL2(L'SMSG16+HDR)
         DC    AL2(OFST)
SMSG16   DC    C'IKJ58205I ALIAS VALID ONLY FOR MEMBERS OF PARTITIONED X
               DATA SETS'
LSMSG17  DC    AL2(L'SMSG17+HDR)
         DC    AL2(OFST)
SMSG17   DC    C'IKJ58206I MORE THAN ONE * IN DATA SET NAME'
LSMSG18  DC    AL2(L'SMSG18+HDR)
         DC    AL2(OFST)
SMSG18   DC    C'IKJ58206I * NOT VALID AS FIRST INDEX LEVEL'
LSMSG19  DC    AL2(L'SMSG19+HDR)
         DC    AL2(OFST)
SMSG19   DC    C'IKJ58206I DATA SET NAMES USED * AT DIFFERENT LEVELS'
LSMSG20  DC    AL2(L'SMSG20+HDR)
         DC    AL2(OFST)
SMSG20   DC    C'IKJ58207I RENAME ERROR CODE '
LSMSG21  DC    AL2(L'SMSG21+HDR)
         DC    AL2(OFST)
SMSG21   DC    C'IKJ58207I BLDL ERROR CODE '
LSMSG22  DC    AL2(L'SMSG22+HDR)
         DC    AL2(OFST)
SMSG22   DC    C'IKJ58207I STOW ERROR CODE '
LSMSG23  DC    AL2(L'SMSG23+HDR)
         DC    AL2(OFST)
SMSG23   DC    C'IKJ58207I DATA SET RESIDES ON MULTIPLE VOLUMES'
LSMSG24  DC    AL2(L'SMSG24+HDR)
         DC    AL2(OFST)
SMSG24   DC    C'IKJ58229I INVALID UNIT IN USER ATTRIBUTE DATA SET'
LSMSG25  DC    AL2(L'SMSG25+HDR)
         DC    AL2(OFST)
SMSG25   DC    C'IKJ58229I NO UNIT AVAILABLE'
LSMSG26  EQU   *                   UNUSED SECOND LEVEL MESSAGE
LSMSG27  DC    AL2(L'SMSG27+HDR)
         DC    AL2(OFST)
SMSG27   DC    C'IKJ58208I BOTH MEMBERS MUST BE FROM THE SAME PARTITIONX
               ED DATA SET'
LSMSG28  DC    AL2(L'SMSG28+HDR)
         DC    AL2(OFST)
SMSG28   DC    C'IKJ58208I A DATA SET CAN NOT BE RENAMED TO A MEMBER NAX
               ME'
LSMSG29  DC    AL2(L'SMSG29+HDR)
         DC    AL2(OFST)
SMSG29   DC    C'IKJ58208I A MEMBER NAME CAN NOT BE RENAMED TO A DATA SX
               ET'
LSMSG30  DC    AL2(L'SMSG30+HDR)
         DC    AL2(OFST)
SMSG30   DC    C'IKJ58203I SYSTEM OPERATOR DID NOT AUTHORIZE ACCESS TO X
               DATA SET'                                         A49872
PATCH    DC    20X'00'             PATCH AREA
         END
