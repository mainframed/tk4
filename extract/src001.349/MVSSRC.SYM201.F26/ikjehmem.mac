         TITLE 'IKJEHMEM, PDS MEMBER LISTING MODULE, PROCESS SECTION'
IKJEHMEM  CSECT
*A 500500                                                        YM0369
*D 497000                                                        YM0369
*A 144500,180500                                                 A46784
*C 505000                                              A49888 AND M2386
***********************************************************************
*                                                                     *
*                                                                     *
* STATUS -- CHANGE LEVEL 00                                     M2386 *
*                                                                     *
* FUNCTION --                                                         *
*    THIS MODULE WILL READ A PDS DIRECTORY, ISOLATE THE ALIAS         *
*    MEMBER NAMES, AND RETURN, ONE AT A TIME, THE MEMBER NAMES        *
*    TO THE CALLING PROGRAM.  ALIAS NAMES WILL BE PLACED FOLLOW-      *
*    ING THE TRUE NAMES THEY CORRESPOND TO.  THIS MODULE IS USED      *
*    BY LISTALC, LISTCAT, AND LISTDS TO LIST MEMBERS WHEN THE         *
*    MEMBERS KEYWORD IS SPECIFIED.  A JFCB IS SET TO PREVENT WRITE    *
*    BACK AND BACKWARD MERGE THEN THE DATA SET IS OPENED TO THE       *
*    DIRECTORY USING OPEN TYPE=J.  ALL MEMBER NAMES ARE READ          *
*    INTO CORE AND ARRANGED IN TABLES ACCORDING TO WHETHER THEY       *
*    ARE TRUE OR ALIAS.  TRUE NAMES ARE KEPT IN COLLATING SEQUENCE    *
*    AND ALIAS NAMES IN ORDER BY TTR (BY COLLATING ORDER FOR          *
*    NAMES WITH IDENTICAL TTR'S)WHEN READING IS COMPLETE, OUT-        *
*    PUT BEGINS.  THE TTR OF EACH TRUE NAME IS COMPARED TO THE        *
*    TTR OF EACH ALIAS AND ANY EQUALS ARE IDENTIFIED AS ALIAS         *
*    NAMES FOR THIS TRUE NAME.                                        *
*                                                                     *
* ENTRY POINTS --                                                     *
*         IKJEHMEM - ONLY ONE ENTRY POINT                             *
*                                                                     *
* INPUT --                                                            *
*    A PARM LIST POINTED TO BY REG 1 AND CONTAINING---                *
*              1  ADR OF COMMUNICATIONS DSECT 'OBTWAD'                *
*              2  ADR OF LISTFORM OF GETMAIN MACRO                    *
*              3  ADR OF A BUFFER TO PLACE THE NAMES IN FOR OUTPUT    *
*              4  ADR OF THE OUTPUT ROUTINE                           *
*              5  ADR OF LIST FORM OF FREEMAIN MACRO                  *
*              --ALL POINTERS ARE FULLWORDS                           *
*                                                                     *
*    THE DIRECTORY OF THE PDS POINTED TO BY THE OBTDCB                *
*                                                                     *
* OUTPUT --                                                           *
*    A LIST OF PDS MEMBER NAMES AND ASSOCIATED ALIAS                  *
*                                                                     *
* EXTERNAL REFERENCES --                                              *
*    1. LISTALC, MOD IKJEHAL1                                         *
*    2. LISTCAT, MOD IKJEHCT1                                         *
*    3. LISTDS, MOD IKJEHDS1                                          *
*                                                                     *
* EXITS, NORMAL --                                                    *
*              A BR 14 TO THE CALLING PROGRAM                         *
*                                                                     *
* EXITS, ERROR --                                                     *
*              A BR 14 TO THE CALLING PROGRAM                         *
* TABLES/WORK AREAS --                                                *
*    OBTWAD  THE COMMON COMMUNICATIONS REGION. GOTTEN BY CALLER.      *
*    IT CONTAINS THE DCB, JFCB, PRIMARY ALIAS TABLE, AND POINTERS     *
*                                                                     *
*                                                                     *
*    TRUE  NAME TABLE                                                 *
*              ONE OR MORE BLOCKS OF CORE CHAINED TOGETHER AND USED   *
*              TO CONTAIN THE TRUE NAMES. THE FORMAT IS---            *
*                                  ***********************            *
*                             0    *PTR TO NXT CORE BLOCK*            *
*                             4    *COUNTER              *            *
*                             8    *PTR TO NXT TRUE BLOCK*            *
*                             12   *SPARE                *            *
*                                  --BEGIN NAME ELEMENTS--            *
*                             16   *FIRST TRUE NAME ELE- *            *
*                             20   *MENT, NAME IS 8 BYTES*            *
*                             24   *TTR IS 3 BYTES       *            *
*                                  *                     *            *
*                                  *EACH NAME ENTRY IS 11*            *
*                                  *BYTE LONG. TRUE NAME *            *
*                                  *ELEMENT LENGTH IS DE-*            *
*                                  *FINED BY 'TEL'.      *            *
*                                  *                     *            *
*                                  *TABLE BLOCK LENGTH IS*            *
*                                  *DEFINED BY 'BLKLEN'. *            *
*                                                                     *
*    ALIAS NAME TABLE                                                 *
*              THE FIRST ALIAS NAME TABLE IS AN AREA OF DSECT OBTWAD. *
*              IF ADDITIONAL BLOCKS ARE NECESSARY, CORE BLOCKS THE    *
*              SAME SIZE AS THOSE FOR THE TRUE NAME TABLE ARE GOTTEN. *
*              THE FORMAT OF THE ALIAS NAME TABLE IS.                 *
*                                                                     *
*                                  *******************                *
*                             0    *NXT CORE BLK PTR *                *
*                             4    *UNUSED           *                *
*                             8    *NXT ALIAS BLK PTR*                *
*                             12   *SPARE            *                *
*                                  --BEGIN NAME BLKS--                *
*                             16   *PTR TO NXT NAME  *                *
*                             20   *NAME (NAME FIELD *                *
*                             24   * IS 8 BYTES).    *                *
*                             28   *TTRC FOR ALIAS   *                *
*                             32   *NXT ALIAS NAME   *                *
*                                  *ENTRY            *                *
*                                  *                 *                *
*                                  *EACH ALIAS BLK IS*                *
*                                  *16 BYTES LONG.   *                *
*                                  *THE LENGTH IS DE-*                *
*                                  *FINED BY 'AEL'.  *                *
*                                                                     *
*                                                                     *
*                                                                     *
* ATTRIBUTES --                                                       *
*    REENTRANT, READ ONLY, AND REFRESHABLE.                           *
*                                                                     *
* CHARACTER CODE DEPENDENCY --                                        *
*    THIS CSECT MUST BE REASSEMBLED FOR A CHANGE OF CHARACTER CODE.   *
*                                                                     *
* NOTES --                                                            *
*    N/A                                                              *
*                                                                     *
***********************************************************************
R0       EQU   0                   REGISTER 0
R1       EQU   1                   REGISTER 1
R2       EQU   2                   REGISTER 2
R3       EQU   3                   REGISTER 3
R4       EQU   4                   REGISTER 4
R5       EQU   5                   REGISTER 5
R6       EQU   6                   REGISTER 6
R7       EQU   7                   REGISTER 7
R8       EQU   8                   RETURN REG FOR SUBROUTINE LINKAGE
R9       EQU   9                   REGISTER 9
R10      EQU   10                  SPARE REGISTER
R11      EQU   11                  BASE REG FOR THIS MODULE
R12      EQU   12                  BASE REG FOR OBTWAD DSECT
R13      EQU   13                  REGISTER 13
R14      EQU   14                  REGISTER 14
R15      EQU   15                  REGISTER 15
BSP      EQU   1                   SUBPOOL NUMBER FOR TABLE BLOCKS
SSP      EQU   1                   SAVE AREA SUBPOOL
FTSW     EQU   X'01'               FOR SETTING AND TESTING FIRST ENTRY
OPENOK   EQU   X'10'               USED TO TEST FOR SUCCESSFUL OPENS.
ALIASBIT EQU   X'80'               TO TEST FOR ALIAS NAMES
CODE1    EQU   4                   GETMAIN FAILED
CODE2    EQU   8                   I/O ERROR READING DIRECTORY
CODE3    EQU   12                  DIRECTORY ERROR
AEL      EQU   16                  SYMBOLIC FOR LENGTH OF ALAIAS ELEMEN
TEL      EQU   11                  SYM FOR LNGTH OF TRUE NAME TBL ELE
BLKLEN   EQU   2048                LENGTH OF GETMAIN CORE FOR A BLK
BLANK    EQU   C' '                SYMBOLIC FOR A BLANK
COMMA    EQU   C','                SYMBOLIC FOR A COMMA
RPAREND  EQU   C')'                SYMBOLIC FOR A RIGHT PAREND
         IEZBITS
RECFMFIX EQU   X'80'               DCB RECFM FIXED               A46784
****EQUATES FOR OFFSETS AND SHORT LENGTHS*****
D0       EQU  0                    ZERO
D1       EQU   1                   ONE
D2       EQU   2                   TWO
D3       EQU   3                   THREE
D4       EQU   4                   FOUR
D5       EQU   5                   FIVE
D6       EQU   6                   SIX
D7       EQU   7                   SEVEN
D8       EQU   8                   EIGHT
D9       EQU   9                   NINE
D10      EQU   10                  TEN
D11      EQU   11                  ELEVEN
D12      EQU   12                  TWELVE
D16      EQU   16                  SIXTEEN
USERMSK  EQU   31                  MASK FOR USER DATA CNT FIELD
HEXFF     EQU   X'FF'              FOXES FOR END OF POINTERS
SAVELEN  EQU   112                 LENGTH OF SAVE AREA IN GOTTEN CORE
D15       EQU   15                               LENGTH OF FIFTEEN
         EJECT
MEM01    SAVE  (14,12),,*
         LR    R11,R15             PICK UP ENTRY POINT FOR BASE REG
         USING MEM01,R11
         USING OBTWAD,R12
         LTR   R6,R1               CHECK FOR AND SAVE PARM PTR
         BZ    MEM96               IF PARM REG 0, RETURN TO CALLER
         GETMAIN R,LV=SAVELEN,SP=SSP
         ST    R13,D4(R1)           BACK CHAIN SAVE AREA
         ST    R1,D8(R13)           FORWARD CHAIN SAVE AREAS
         LR    R13,R1              NEW SAVE AREA ESTABLISHED
         L     R12,D0(R6)           SET UP DSECT PTR.
         ST    R6,PCL              SAVE A PTR TO PARM LIST
         XC   RETCODE,RETCODE      CLEAR RETURN CODE
         SPACE 2
         LA    R2,OBTDCB           PTR TO DCB IN DSECT
         USING IHADCB,R2
         MVI   DCBRECFM,RECFMFIX   SET RECFM TO FIXED            A46784
         SPACE 2
         OI    JFCBTSDM,BIT4+BIT6  TURN ON THE DON'T MERGE BITS IN JFCB
         NI    JFCBIND1,HEXFF-BIT7  TURN OFF MEMBER BIT IN THE JFCB.
         LA    R15,IOERR           ADR OF SYNAD ROUTINE
         ST    R15,DCBSYNAD        SET UP SYNAD EXIT.
         XC    RETCODE,RETCODE     CLEAR CODE WORD
         LA    R15,EOFDIR          ADR OF END OF FILE ROUTINE
         ST    R15,DCBEODAD        SET UP EOF ROUTINE EXIT
         LA    R1,RDJL             PTR TO MACRO LIST FORM
         SPACE 2
         OPEN  ((R2)),TYPE=J,MF=(E,(1))
         SPACE 2
         LA    R3,MEMBUF           GET INPUT AREA ADDR
         SPACE
*  GET A READ INITIATED TO OVERLAP THE INITIALIZATION ROUTINE.
         SPACE
         READ  RDECB,SF,(R2),(R3),,,,MF=E
***********************************************************************
*** INITIALIZE THE ALIAS AND TRUE NAME TABLES                         *
*                                                                     *
*                                                                     *
         SPACE 2
         XC    PBOB(D4),PBOB        CLEAR PTR TO BEGINNING OF BLKS
         BAL   R8,MEMGETM          GO GET FIRST BLK FOR NAME TABLE
         SPACE
         LR    R5,R14              GET PTR TO FIRST TRUE BLK
         LA    R14,BLKLEN-TEL(R14) CALCULATE EFFECTIVE END OF BLK ADR
         ST    R14,PECTB           SET UP END OF BLK ADDR
         LA    R7,D16(R5)           CALCULATE ADR OF 1ST TRUE ELEMENT
         ST    R7,PSTNQ            SAVE IT IN THE PTR TO 1ST T NAME
         SPACE 2
         LA    R6,MEMATBL          ADDR OF FIRST ALIAS TABLE
          XC    D0(D16,R6),D0(R6)  CLEAR CONTROL AREA
         LA    R14,MEMATBL+MEMATBLL-AEL  COMPUTE ALIAS END OF TBL ADR
         ST    R14,PECAB           SET UP END OF TABLE ADDR
         SPACE 2
         ST    R5,PCTB             SAVE ADDR OF CUR T-NAME BLK
         ST    R6,PCAB             SAVE ADDR OF CUR A-NAME BLK
         LA    R6,D16(R6)           UPDATE PTR FOR NEW ALIAS MEMBER
          XC    D0(D4,R6),D0(R6)   CLEAR FORWARD PTR OF STOP ELMNT
         MVC   D4(D8,R6),HEXFFF      SET UP STOPPER FOR NAMES
         MVC   D12(D3,R6),HEXFFF     SET UP STOPPERS FOR TTRS
          XC    D15(D1,R6),D0(R6)   MAKE C BYTE ZERO
         ST    R6,PSANQ            SET PTR TO START OF A-NAME QUEUE
         LA    R6,AEL(R6)          INCRE PTR TO NXT EMPTY ALIAS SLOT
         SPACE 3
***********************************************************************
*                                                                     *
*  SETUP IS NOW COMPLETE, BEGIN PROCESSING BY CHECKING READ OF FIRST  *
*  DIRECTORY BLOCK WHICH WAS ISSUED AFTER OPEN                        *
*                                                                     *
*  REGISTER USAGE IN THE PROCESS SECTION BETWEEN 'MEM16' AND 'MEM50'  *
*        R0    SPACE                                                  *
*        R1    USED BY THE READ AND CHECK MACROS                      *
*        R2    POINTS TO THE DCB FOR THE DIRECTORY                    *
*        R3    POINTS TO THE END OF THE CURRENT DIRECTORY BLOCK       *
*        R4    SPACE REGISTER IN THIS SECTION                         *
*        R5    POINTS TO BEGINNING OF CURRENT TRUE NAME TABLE BLOCK   *
*        R6    POINTS TO THE CURRENT POSITION IN THE ALIAS NAME TABLE *
*        R7    POINTS TO CURRENT POSITION IN THE TRUE NAME TABLE BLOCK*
*        R8    USED AS A RETURN REGISTER IN SUBROUTINE LINKAGE        *
*        R9    POINTS TO THE CURRENT POSITION IN INPUT DIRECTORY BLOCK*
*                                                                     *
***********************************************************************
MEM16    EQU   *
         CHECK RDECB
         LH    R15,MEMDATA         GET THE DIRECTORY BLK BYTE COUNT
         CH    R15,DIRMIN          IS THE COUNT AT LEAST 14 BYTES
         BL    DIRSERR             IF NOT, BRANCH TO DIR SIZE ERROR
         CH    R15,DIRMAX          IS THE COUNT     HIGHER THAN 256
         BH    DIRSERR             IF SO, BRANCH TO DIR SIZE ERROR
         LA    R3,MEMDATA(R15)     COMPUTE ADR OF END OF CUR DIR BLK
         LA    R9,MEMDATA+D2        UP PTR TO FIRST DIRECTORY ENTRY
         SPACE 2
MEM20    CLC   D0(D8,R9),HEXFFF      IS THIS NAME THE END OF DIRECOTRY
         BE    MEM50               IF SO, GO WRITE OUT NAMES
         TM    TEL(R9),ALIASBIT     IS THIS NAME TRUE OR ALIAS
         BO    A02                 IF ALIAS, BRANCH
         C     R7,PECTB            IS THIS PAST THE BLOCK
         BL    T06                 IF NOT, SKIP GETMAIN
         BAL   R8,MEMGETM          GO GET ANOTHER BLOCK
         ST    R14,D8(R5)           CHAIN NEW BLOCK INTO TRUE BLK CHAIN
         LR    R5,R14              POINT TO NEW TRUE BLK
         LA    R14,BLKLEN-TEL(R14) CALCULATE EFFECTIVE END OF BLK ADR
         ST    R14,PECTB           SAVE IT TO COMPARE AGAINST
         LA    R7,D16(R5)           RESET NEW ELEMENT PTR
         ST    R5,PCTB             SAVE ADR OF NEW CUR TRUE BLK
         SPACE 2
T06      EQU   *
          MVC   D0(TEL,R7),D0(R9)     MOVE NAME AND TTR TO TRUE NAME
         L     R14,D4(R5)          LOAD COUNTER VALUE FROM CUR TRUE TBL
         LA    R14,D1(R14)          INCREMENT
         ST    R14,D4(R5)           SAVE UPDATED COUNTER VALUE
         LA    R7,TEL(R7)          INCREMENT PTR TO NXT SLOT FOR T-NAME
         SPACE 2
MEM30    LA    R14,USERMSK           SET UP MASK TO PICK UP USER DATA
         EX    R14,ANDI            TURN OFF ALIAS AND TTRN COUNT
         IC    R14,D11(R9)          GET HALFWORD COUNT OF USER DATA
         SLL   R14,D1               DOUBLE IT TO GET BYTES
         LA    R9,D12(R14,R9)       COMPUTE BYTES USED OF CUR DIR BLK
         CR    R9,R3               HAS CUR DIRECTORY BLK BEEN EXAUSTED
         BL    MEM20               IF NOT GET NXT NAME
         BH    DIRLERR             IF HIGH, LENGTH IS IN ERROR, BRANCH
         SPACE
*  FALL THRU TO READ THE NXT BLK IF THE END OF THIS BLK IS REACHED
         SPACE
         LA    R3,MEMBUF           SET UP INPUT AREA ADR FOR READ
         READ  RDECB,SF,(R2),(R3),,,,MF=E
         B     MEM16               GO CHECK THE READ
         SPACE 2
A02      EQU   *
         C     R6,PECAB            COMPARE NEW ELEMENT ADR TO EOB ADR
         BNH   A10                 IF ENTRY WILL FIT, SKIP GETMAIN
         BAL   R8,MEMGETM          GO GET ANOTHER BLOCK OF STORAGE
         L     R15,PCAB            PTR TO CURRENT ALIAS BLK
         ST    R14,D8(R15)          SET PTR TO NEXT ALIAS BLK
         ST    R14,PCAB            UPDATE PTR TO CURRENT ALIAS BLOCK
         LA    R6,D16(R14)          UPDATE NEW ELEMENT PTR
         LA    R14,BLKLEN-AEL(R14) CALCULATE EFFECTIVE END OF BLK ADR
         ST    R14,PECAB           SAVE TO COMPARE AGAINST
         SPACE
A10      EQU   *
         MVC   D4(D12,R6),D0(R9)      MOVE NAME AND TTRC TO NEXT ENTRY
         LA    R14,PSANQ           GET ADR OF START OF ALIAS NAME Q.
         SPACE
A14      L     R15,D0(R14)          ADR OF NEXT ALIAS NAME ENTRY
          CLC   D12(D3,R6),D12(R15) COMPARE TTRS OF NEW ELE TO OLD
         BL    A20                 IF LOW, INSERT NEW ELE HERE
         LR    R14,R15             UPDATE PTR TO NEXT ELE
         B     A14                 GO BACK AND CHECK THIS ELE
         SPACE
A20      EQU   *
         ST    R15,D0(R6)           STORE FORWARD PTR IN NEW ELEMENT
         ST    R6,D0(R14)           UPDATE FORWARD PTR OF PREV ELE
         LA    R6,AEL(R6)          INCRE PTR TO NXT EMPTY ALIAS SLOT
         B     MEM30               GO PROCESS NEXT NAME.
*
*** SYNAD ROUTINE WILL PASS ERROR INFORMATION BACK TO CALLER         **
*
         SPACE 2
IOERR    EQU   *
         LR    R3,R13              SAVE REG13 IF RLSE DOESNT WORK
         LA    R2,SYNMSG1          IN MEM DSECT AND CALLING RTN
         SYNADAF  ACSMETH=BSAM     R0 AND R1 SAME AS ENTRY
         MVC   D0(L'SYNMSG1,R2),SYNOFF(R1)  PUT INTO BUFF
         MVI   SYNMSG,SYNLEN       TEXT LENGTH IS SIXTY
         SYNADRLS                  RELEASE CORE FOR SYNADAF
         LR    R13,R3              RESTORE REG 13
         LA    R2,CODE2            SET CODE FOR I/O ERROR
         ST    R2,RETCODE          SAVE IT FOR CALLER
         B     MEM50               PROCESS NAMES READ AND EXIT
         SPACE 2
DIRLERR  EQU    *
DIRSERR  EQU    *
EOFDIR   EQU   *
         LA    R2,CODE3            SET CODE FOR DIRECTORY ERROR
         ST    R2,RETCODE          SAVE CODE FOR CALLER
         LA    R8,MEM90            SET UP RETURN ADR
         B     MEM50               PROCESS THOSE NAMES THAT WERE READ.
         SPACE 2
         EJECT
***********************************************************************
*                                                                     *
*  THIS ROUTINE PROCESSES THE TRUE AND ALIAS BLOCKS PREPARED BY THE   *
*  READ ROUTINE.  THE FOLLOWING ACTIONS TAKE PLACE.                   *
*    1. THE NEXT NAME FROM A TRUE BLOCK IS PICKED UP AND MOVED TO THE *
*       OUTPUT BUFFER.                                                *
*    2. THE TTR OF THE TRUE NAME IS COMPARED WITH ALL ALIAS TTR LOWER *
*       OR EQUAL IN NUMERIC VALUE AND ANY EQUALS ARE MOVED TO THE     *
*       BUFFER WITH THE QUALIFIER 'ALIAS('.                           *
*    3. CONTROL IS PASSED TO THE CALLING PROGRAMS OUTPUT ROUTINE TO   *
*       WRITE OUT THE BUFFER.                                         *
*    4. WHEN THE TRUE NAMES ARE EXAUSTED, ANY ALIAS NAMES REMAINING   *
*       ARE GROUPED BY TTR AND WRITTEN OUT WITH A MESSAGE THAT NO     *
*       TRUE NAME EXIST FOR THEM.                                     *
*                                                                     *
*  REGISTER USAGE IN THE PROCESS SECTION BETWEEN 'MEM50' AND 'MEM90'  *
*        R0    SPARE                                                  *
*        R1    SPARE                                                  *
*        R2    USED AS CTR FOR NUMBER OF ALIAS THAT CAN GO INTO BUF   *
*        R3    PTS TO PREV ALIAS ENTRY OR START OF ALIAS QUEUE PTR    *
*        R4    HOLDS COUNT OF REMAINING NAMES IN CUR TRUE TABLE BLOCK *
*        R5    POINTS TO THE CURRENT ALIAS ENTRY                      *
*        R6    POINTS TO THE CURRENT TRUE ENTRY                       *
*        R7    POINTS TO THE CURRENT POSITION IN THE OUTPUT BUFFER    *
*        R8    RETURN REGISTER FOR SUBROUTINE CALLS                   *
*        R9    POINTS TO ENTRY POINT FOR THE OUTPUT ROUTINE           *
*                                                                     *
***********************************************************************
         SPACE
MEM50    EQU   *
         SPACE
*  INITIALIZE FOR THE OUTPUT ROUTINE.
         SPACE
         L     R7,POUTBUF          SET UP PTR TO OUTPUT BUFFER
         L     R9,PWRITE           SET UP ADR OF OUTPUT ROUTINE
         L     R6,PBOB             PTR TO BEGINNING OF BLOCKS
         L     R4,D4(R6)            GET COUNT OF NAMES IN 1ST TRUE BLK
         ST    R6,PCTB             SAVE PTR TO THIS BLOCK
         LTR   R4,R4               TEST FOR A PDS WITH NO MEMBERS
         BNP   MEM86               IF NO TRUE NAMES, GO CHECK ALIAS
         LA    R6,AEL-TEL(R6)       ADR OF START OF NAMES -1 ELEMENT
         SPACE 2
MEM54    EQU   *
         LA    R6,TEL(R6)          UPDATE THE TRUE NAME PTR
         LA    R5,PSANQ            ADR OF PTR TO START OF ALIAS NAME Q
         MVC   D2(D8,R7),D0(R6)    MOVE TRUE NAME TO BUFF
         LA    R14,D8               LOAD MAXIMUM MEMBER NAME LENGTH
         LA    R15,D9(R7)           SET UP PTR TO END OF NAME
         SPACE 2
MEM60    EQU   *
         CLI   D0(R15),BLANK        SEARCH NAME RIGHT TO LEFT FOR BLANK
         BNE   MEM64               BRANCH OUT OF LOOF ON FIRST NONBLANK
         BCTR  R15,D0               BACK UP TEMP BUF PTR ONE CHAR.
         BCT   R14,MEM60           REDUCE REMAINING CHAR COUNT, RECHECK
         SPACE 2
*  AT THIS POINT, EITHER A NON-BLANK CHAR HAS BEEN FOUND AND REG 14
*  HOLDS THE LENGTH OF THE NONBLANK NAME OR ALL 8 CHAR WERE ZERO AND
*  REG 14 HAS ZERO.
         SPACE
MEM64    EQU   *
         LA    R7,D2(R14,R7)        ADD SPACER LENGTH AND NAME LENGTH
         SPACE
*  NEXT CHECK FOR POSSIBLE ALIAS NAMES FOR THIS MEMBER
MEM66    EQU   *
         SPACE
         LR    R3,R5               SAVE ADR OF PREVIOUS PTR FIELD IN R2
         L     R5,D0(R5)            GET PTR TO NEXT ALIAS NAME
          CLC   D8(D3,R6),D12(R5)  COMPARE TRUE TTR TO ALIAS TTR
         BL    MEM80               IF LOW, SKIP REMAINING ALIAS NAMES
         BH    MEM66               IF HIGH CONTINUE SEARCH
*   FALL THROUGH ON EQUAL, THIS IS A FIND
         SPACE 3
MEM70    EQU   *
         LA    R2,D5                SET UP COUNTER FOR BUFFER FULL TEST
         MVC   D2(L'AHDR,R7),AHDR   MOVE PREFIX FOR ALIAS NAMES TO BUF
         LA    R7,D2+L'AHDR(R7)     INCREMENT BUF PAST LEFT PAREND
         SPACE 2
*  NEXT MOVE IN ALIAS NAME AND ELIMINATE TRAILING BLANKS
         SPACE
MEM72    EQU   *
         MVC   D0(D8,R7),D4(R5)       MOVE ALIAS NAME TO BUF
         LA    R15,D7(R7)           SET PTR TO LAST CHAR OF NAME
         LA    R14,D8               SET UP NON-BLANK CHAR COUNTER
         SPACE 2
MEM74    EQU   *
         CLI   D0(R15),BLANK        IS THIS CHAR A BLANK
         BNE   MEM76               IF NOT, WE HAVE A FIND, BRANCH
         BCTR  R15,D0               BACK UP NAME PTR ONE CHAR
         BCT   R14,MEM74           LOOP FOR 8 CHAR, THEN FALL THRU
         SPACE 2
*  CHECK TO SEE IF THIS TRUE NAME HAS MORE ALIAS NAMES.
         SPACE
MEM76    EQU   *
         L     R5,D0(R5)            GET ADR OF NEXT ALIAS ENTRY
         LA    R7,D0(R14,R7)        INCREMENT BUF PTR PAST ALIAS NAME
         CLC   D8(D3,R6),D12(R5)    COMPARE TRUE TTR TO NXT ALIAS TTR
         BNE   MEM78               BRANCH IF NO MORE ALIAS FOR THIS TRU
         MVI   D0(R7),COMMA        ANOTHER ALIAS WAS FOUND, SEPARATE IT
         LA    R7,D1(R7)            UPDATE BUF PTR PAST COMMA
         BCT   R2,MEM72            IF THE BUFFER ISN'T FULL, BRANCH
         SPACE 2
*  IF THERE IS NO ROOM IN THE BUFFER FOR THE NEXT ALIAS NAME, GO TO THE
*  OUTPUT ROUTINE TO WRITE THE BUFFER.
         SPACE
         LR    R14,R7              CUR BUF POSITION PTR TO R14 FOR WRIT
         L     R7,POUTBUF          PTR TO OUTPUT BUFFER
         BALR  R8,R9               GO TO THE OUTPUT WRITER ROUTINE
         LA    R7,D11(R7)           INDENT INTO BUFFER FOR CONT.
         LA    R2,D7                RESET BUFFER FULL TEST COUNTER
         B     MEM72               GO MOVE ALIAS INTO BUFFER
         SPACE 2
*  WHEN ALL ALIAS NAMES FOR THIS TRUE NAME ARE FOUND, CLOSE PAREND,
*  DEQUEUE ALL ALIAS NAMES USED, AND WRITE THE BUFFER.
         SPACE
MEM78    EQU   *
         MVI   D0(R7),RPAREND       CLOSE PARENTHISIS
         LA    R7,D1(R7)            INCREMENT PTR PAST PAREND
         ST    R5,D0(R3)           THIS EFFECTIVELY DEQUEUS THE ALIAS'S
         SPACE
*  NEXT OUTPUT THE BUF AND CHECK FOR MORE NAMES TO PROCESS
         SPACE
MEM80    EQU   *
         LR    R14,R7              CUR BUF POSITION PTR TO R14 FOR WRIT
         L     R7,POUTBUF          PTR TO OUTPUT BUFFER
         BALR  R8,R9               GO TO OUTPUT ROUTINE
         BCT   R4,MEM54            IF MORE NAMES IN THIS BLOCK, PROCESS
         L     R14,PCTB            GET ADR OF CUR TRUE NAME BLOCK
         L     R15,D8(R14)          GET FORWARD TRUE BLOCK PTR
         LTR   R15,R15             TEST FOR PTR BEING ZERO
         BZ    MEM86               IF ZERO, BRANCH, LOOK FOR ORPHAN AL
         L     R4,D4(R15)           OTHERWISE GET CTR FROM NEXT BLOCK
         LA    R6,AEL-TEL(R15)     SET PTR ONE BEFORE FIRST NAME ENTRY
         ST    R15,PCTB
         B     MEM54               GO PROCESS NAMES THIS BLOCK
         SPACE 2
MEM86    EQU   *
         LA    R3,PSANQ            SET UP TO DEQUEUE ALIAS NAMES
         L     R5,PSANQ            RESET PTR TO FIRST A LIAS ENTRY
         CLC   D4(D8,R5),HEXFFF      TEST IF ONLY ENTRY IS THE STOPPER
         BE    MEM90               IF SO, REQUEST COMPLETE, BRANCH
         TM    MEMATBL+D4,FTSW      IS THIS THE FIRST TIME THRU.
         BO    MEM88               IF NOT, BRANCH AROUND INITIALIZATION
         L     R7,POUTBUF          POINT TO BUFFER AREA
         LR    R14,R7              INDICATE NO DATA TO PRINT
         L     R9,PWRITE           ADDRESS OF WRITE ROUTINE
         BALR  R8,R9               GO SKIP A LINE
         LA    R15,L'MMSG01        LENGTH OF MESSAGE TO WRITE
         LA    R14,MMSG01          ADDRESS OF MESSAGE
         BCTR  R15,R0              DEREMENT FOR MVC
         EX   R15,MSGMV            MOVE MESSAGE
         LA    R14,D1(R15,R7)      CURRENT BUFFER POINTER
         BALR  R8,R9               GO WRITE THE MESSAGE
         OI    MEMATBL+D4,FTSW      TURN ON FIRST TIME SW
         SPACE 2
*  SET UP REGS TO CAUSE ALIAS TO BE PRINTED WHEN NO TRUE NAME EXIST.
         SPACE
MEM88    EQU   *
         LA    R4,D1                SET TRUE NAME CTR TO SHOW COMPLETE
         LA    R6,D4(R5)            POINT R6 AT ALIAS NAME AND TTR
         B     MEM70               GO PROCESS REMAINING ALIAS NAMES
         SPACE 3
MEM90    EQU   *
         LA    R5,PBOB             SET UP PTR TO CORE BLKS
         SPACE
MEM92    EQU   *
         L     R1,PFREEML          ADR OF FREEMAIN MACRO LIST    YM0369
         L     R6,PBOB             GET ADR OF A BLK TO BE FREED
         LTR   R6,R6               CHECK WHETHER ANY BLKS TO FREE
         BZ    MEM94               IF ZERO, NO MORE BLKS TO FREE
         L     R7,D0(R6)            GET PTR TO NEXT BLK BEFOR FREEING
         FREEMAIN E,A=(R5),LV=BLKLEN,SP=BSP,MF=(E,(1))            M2386
         ST    R7,PBOB             STORE PTR TO NEXT BLOCK
         B     MEM92               FREE MORE BLOCKS
         SPACE
MEM94    EQU   *
         LA    R1,CLOSEL           PTR TO LIST FORM OF CLOSE MACRO
         LA    R2,OBTDCB           PTR TO DCB IN DSECT
         CLOSE ((R2)),MF=(E,(1))
         SPACE 2
MEM95    EQU   *
         LR    R1,R13              SET UP TO FREE SAVE AREA
         L     R13,D4(R13)          RESTORE PTR TO CALLERS SAVE AREA
         FREEMAIN R,LV=SAVELEN,A=(1),SP=SSP
         SPACE 2
MEM96    L     R15,RETCODE         PICK UP PROPER RETURN CODE
         RETURN (14,12),T,RC=(15)
         EJECT
***********************************************************************
*                                                                     *
*  MEMGETM  THIS SUBROUTINE ISSUES THE CONDITIONAL GETMAINS FOR NAME  *
*  TABLE CORE.                                                        *
*        ENTRY BY A BAL  R8,MEMGETM                                   *
*        ADDRESS OF CORE GOTTEN IS RETURNED IN REG 14 IF GETMAIN OK   *
*        ERROR (INSUFFICIENT CORE AVAILABLE) EXIT IS TO GETMERR       *
*        REGS OTHER THAN R14 ARE PRESERVED ON NORMAL EXIT             *
*                                                                     *
***********************************************************************
         SPACE
MEMGETM  EQU   *
         STM   R15,R2,GETMSAV      SAVE REGS BEFORE USE
         LA    R2,PBOB             GET PTR TO BEGINNING OF BLKS
MGM10    EQU   *
         L     R15,D0(R2)           GET CONTENTS OF PTR FIELD
         LTR   R15,R15             IS THE PTR FIELD ZERO
         BZ    MGM20               IF ZERO, BRANCH, END OF CHAIN FOUND
         LR    R2,R15              NOT ZERO, SET UP FOR NXT BLK PTR FLD
         B     MGM10               LOOP BACK TO CHECK NEXT FIELD
MGM20    EQU   *
         L     R1,PGETML           ADR OF LIST FORM OF GETMAIN MACRO
         GETMAIN A=(R2),SP=BSP,LV=BLKLEN,MF=(E,(R1))
         B     CHECKMGM(R15)       GO ANALYZE GETMAIN RETURN CODE
CHECKMGM B     MGMOK               RETURN CODE EQ ZERO
         B     MGMERR              RETURN CODE EQ FOUR
MGMOK    EQU   *
         L     R14,D0(R2)           ADR OF GOTTEN CORE CHAINED TO LAST
         LM    R15,R2,GETMSAV      RESTORE REGS
          XC    D0(D16,R14),D0(R14)  CLEAR PTR AREA OF BLOCK
         BR    R8                  RETURN TO CALLER
         SPACE
MGMERR   EQU   *
*  IF A GETMAIN ERROR OCCURS, THE FOLLOWING ROUTINE IS USED.
*                                                                     *
         LA    R2,CODE1            MSG CODE FOR INSUFFIENT CORE
         ST    R2,RETCODE            SAVE CODE FOR RETURN TO CALLER
         B     MEM90               GO TERMINATE NORMALLY.
***********************************************************************
*                                                                     *
* CONSTANTS AND INSTRUCTIONS EXECUTED BY AN EXECUTE INSTRUCTION       *
*                                                                     *
***********************************************************************
         SPACE
ANDI     NI    D11(R9),D0          USED TO ISOLATE THE USER DATA COUNT
MSGMV    MVC   D0(D0,R7),D0(R14)   USED TO MOVE VARY LLENGTH MSG TO BUF
         SPACE 2
HEXFFF   DC    X'FFFFFFFFFFFFFFFF' USED TO TEST FOR DIRECTORY END
DIRMIN   DC    H'14'               MINIMUM DIRECTORY BLOCK LENGTH
DIRMAX   DC    H'256'              MAXIMUM DIRECTORY BLOCK LENGTH
AHDR     DC    C'ALIAS('           PREFIX FOR ALIAS NAMES
MMSG01   DC    C'  THE FOLLOWING ALIAS NAMES EXIST WITHOUT TRUE NAMES'
*                  THE ABOVE MESSAGE IS USED IN THE MEM OPTION
      IKJEHCOM
        DCBD   DSORG=PS
        END
