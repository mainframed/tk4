         TITLE 'IFCEGUS1 - EDIT TABLE - LINKNAME=IFCEGUS1'
*
***********************************************************************
*  DSGEN MACRO DSGEN MACRO DSGEN MACRO DSGEN MACRO DSGEN MACRO
         MACRO
&NAME    DSGEN ,
.*                            THIS MACRO GENERATES ONE DSECT WORD
.*                                 FORMATTED FOR THE SUBJECT LOG RECORD
.*                                 EACH OPERAND HAS TWO SUB LISTS. THE
.*                                 FIRST IS THE NAME OF THE LOG ITEM
.*                                 WHILE THE SECOND IS THE # OF BITS TO
.*                                 ALLOCATE FOR THIS ITEM. ITEMS MUST
.*                                 BE DEFINED CONTIGUOUSLY WITHOUT GAPS
.*                                 UNUSED BIT GROUPS MUST BE GIVEN
.*                                 DUMMY NAMES. THE NAMES PROVIDED FOR
.*                                 THE LOG ITEMS MAY THEN BE USED IN
.*                                 THE CONVERSION MACRO INSTRUCTIONS.
         GBLA  &BITS(2600),&DB,&DT,&INITIAL
         GBLA  &ITEMITR,&ITEMFST(20),&ITEMNBR,&ITEMMDX
         GBLA  &ITEMNDX(2600),&ITEMXPT
         GBLA  &LABELNR,&LASTCC,&LB,&LBLCTR(100),&LPTR,&LT
         GBLA  &NRENTS,&SHIFT(2600)
         GBLB  &DIAGITF,&DIAGLIN,&DIAGSET,&DIAGTST,&FSW,&TEST
         GBLC  &CARRCON,&CSECT,&DSECT,&ITEM(2600)
         GBLC  &LABELS(2600),&LBL(100),&NRENTSX
         LCLB  &ONLY1,&CTIND
         LCLA  &START1,&START2,&END1,&END2
         LCLC  &SYMBOL,&EQUSYM
         LCLA  &OP,&COUNT,&BYTE,&EQUCNT
         ACTR  500000
         AIF   (&ITEMITR EQ 0).START
 MNOTE   20,'DSGEN MACRO OCCURRS AFTER ITEMSORT MACRO HAS BEEN ISSUED.'
         MEXIT
.START   AIF   (N'&SYSLIST(&OP+1) LT 3).LOOP
         AIF   ('&SYSLIST(&OP+1,3)' EQ 'EQU').LOOP     TEST FOR EQU
  AIF   ('&SYSLIST(&OP+1,3)' EQ '' OR '&SYSLIST(&OP+1,4)' EQ '').ERR1
         AIF   ('&SYSLIST(&OP+1,3)' GT '&SYSLIST(&OP+1,4)').ERR3
&START1  SETA  &SYSLIST(&OP+1,3)        GET START COUNT OF 1
&START2  SETA  &SYSLIST(&OP+1,4)        GET FIRST END COUNT
         AGO   .SET2A                   BRANCH AROUND
         AIF   ('&SYSLIST(&OP+1,5)' GT '&SYSLIST(&OP+1,6)').ERR3
.ERR1    MNOTE '**FIRST SYMBOL CONCATENATION INCOMPLETE**'
         MEXIT
.SET2A   AIF   ('&SYSLIST(&OP+1,5)' EQ ''AND '&SYSLIST(&OP+1,6)' EQ '' X
               ).SET2                   TEST FOR NO SECOND
  AIF   ('&SYSLIST(&OP+1,5)' EQ '' OR '&SYSLIST(&OP+1,6)' EQ '').ERR2
&END1    SETA  &SYSLIST(&OP+1,5)        GET START COUNT OF 2
&END2    SETA  &SYSLIST(&OP+1,6)        GET END COUNT OF 2
         AGO   .LOOP
.SET2    ANOP
&ONLY1   SETB  1                        INDICATE ONLY ONE CONCATENATION
         AGO   .LOOP
.ERR2    MNOTE '**SECOND SYMBOL CONCATENATION INCOMPLETE**'
         MEXIT
.ERR3    MNOTE '**START GREATER THAN END CONCATENATION**'
         MEXIT
.LOOP    ANOP
&OP      SETA  &OP+1
         AIF   (&OP GT N'&SYSLIST).DONE      TEST IF ALL DONE
&ITEMNBR SETA  &ITEMNBR+1
         AIF   ('&SYSLIST(&OP,2)' NE '').OK1
         MNOTE '**NULL BIT COUNT FIELD**'
         MEXIT
.OK1     ANOP
&SYMBOL  SETC  '&SYSLIST(&OP,1)'
         AIF   ('&SYMBOL' NE '').OK
*              *****     LOG ITEM SYMBOL NOT PROVIDED     *****
         AIF   ('&SYSLIST(&OP,3)' NE 'EQU').CNT
         AGO   .START                   GET NEXT
.OK      AIF   (N'&SYSLIST(&OP) LT 3).NO3    TEST FOR OLD FORMAT
         AIF   ('&SYSLIST(&OP,3)' EQ 'EQU').EQU   TEST FOR EQU
         AIF   (&ONLY1).OK2             TEST FOR ONLY ONE CONCAT
&SYMBOL  SETC  '&SYMBOL.&START1.&END1'       GET 1 AND 2 CONCAT
         AGO   .NO3                     BRANCH AROUND
.OK2     ANOP
&SYMBOL  SETC  '&SYMBOL.&START1'        GET 1 CONCATENATED
.NO3     ANOP
&SYMBOL  EQU   *+&BYTE
&ITEM(&ITEMNBR) SETC '&SYMBOL'          GET LABEL IN GLOBAL
&BITS(&ITEMNBR) SETA &SYSLIST(&OP,2)
&SHIFT(&ITEMNBR) SETA &COUNT-&BYTE*8
.CNT     ANOP
&CTIND   SETB  1                        SET COUNT INDICATOR
&COUNT   SETA  &COUNT+&SYSLIST(&OP,2)
&BYTE    SETA  &COUNT/8
         AIF   (N'&SYSLIST(&OP) LT 3).START  TEST FOR OLD FORMAT
         AIF   (&ONLY1).TSTST           TEST FOR ONLY ONE CONCAT
         AIF   (&END1 EQ &END2).TSTST   TEST FOR SECOND END
&END1    SETA  &END1+1                  INCREMENT COUNT
&OP      SETA  &OP-1                    DECREMENT INCREMENT
         AGO   .LOOP                    GENERATE NEXT
.TSTST   ANOP
         AIF   (&START1 EQ &START2).LPDONE   TEST FOR END
         AIF   (&ONLY1).NSET1           TEST FOR ONLY ONE CONCAT
&END1    SETA  &SYSLIST(&OP,5)          RE-INIT SECOND START COUNT
.NSET1   ANOP
&OP      SETA  &OP-1                    DECREMENT INDEX
&START1  SETA  &START1+1                INCREMENT FIRST COUNT
         AGO   .LOOP                    GO DO NEXT
.LPDONE  ANOP
&ONLY1   SETB  0                        CLEAR INDICATOR
         AGO   .START                   GO TEST FOR MORE SUB-LISTS
.DONE    AIF   (&COUNT-&COUNT/8*8 NE 0).ERR  TEST FOR MULTIPLE OF EIGHT
         AIF   (&CTIND EQ 0).END        NO DS IF NO COUNT
&COUNT   SETA  &COUNT/8                 GET NUMBER OF BYTES
&NAME    DS    &COUNT.C
.END     MEXIT
.ERR     MNOTE '**BIT COUNT FLDS DO NOT TOTAL MULTIPLE OF 8**'
         MEXIT
.EQU     AIF   ('&SYSLIST(&OP,4)' NE '').EQU1     TEST FOR NULL LABEL
.ERR4    MNOTE '**EQU OPERAND OMITTED OR NOT FOUND**'
         MEXIT
.EQU1    AIF   (&SYSLIST(&OP,2) LT 16).EQU2  COUNT OVER FIFTEEN
*****               THE FOLLOWING STATEMENT                *****
*****     NUMBER OF BITS EXCEED 15 - DO NOT USE AS BIN     *****
.EQU2    ANOP
&EQUCNT  SETA  0                        CLEAR COUNTER
&EQUSYM  SETC  '&SYSLIST(&OP,4)'        GET EQU OPERAND
.EQULOP  ANOP
&EQUCNT  SETA  &EQUCNT+1                INCREMENT INDEX
         AIF   ('&ITEM(&EQUCNT)' EQ '&EQUSYM').EQUOUT  LABEL FOUND?
         AIF   (&EQUCNT EQ &ITEMNBR).ERR4    ALL TESTED?
         AGO   .EQULOP                  NO-GET NEXT
.EQUOUT  ANOP
&ITEM(&ITEMNBR) SETC '&SYMBOL'          GET LABEL NAME
&BITS(&ITEMNBR) SETA &SYSLIST(&OP,2)    GET NUMBER OF BITS
&SHIFT(&ITEMNBR) SETA &SHIFT(&EQUCNT)   GET SHIFT COUNT
&SYMBOL  EQU   &EQUSYM                  THIS SYMBOL EQUATED
         AGO   .START                   RETURN FOR NEXT
         MEND
*
***********************************************************************
* HEX MACRO  HEX MACRO  HEX MACRO  HEX MACRO  HEX MACRO  HEX MACRO
         MACRO
         HEX   ,
.*                            THIS MACRO FACILITATES GENERATION OF THE
.*                                 TABLE ENTRIES SPECIFYING HEX TYPE
.*                                 CONVERSIONS.
.*                            &SYSLIST(&OP,1) - NAME OF DATA ITEM TO BE
.*                                 CONVERTED
.*                            &SYSLIST(&OP,2) - # OF SPACES TO SKIP ON
.*                                 MULTIPLE PRINT OR NBR OF SPACES TO
.*                                 BACK UP FROM COLUMN FOR START OF
.*                                 PRINTING. THE LETTER B PRECEEDS THE
.*                                 NUMBER (B8) IF THE LATTER OPTION IS
.*                                 DESIRED. OMISSION OF THIS OPERAND
.*                                 FORCES OPTION 2 WITH BACKUP SPACING
.*                                 EQUAL TO THE NUMBER OF BYTES SPECI-
.*                                 FIED BY THE NEXT OPERAND (TWICE THIS
.*                                 NUMBER IF SUFFIX IS EXPLICITLY OR
.*                                 IMPLICITLY B).
.*                            &SYSLIST(&OP,3) - NUMBER OF BYTES TO
.*                                 PROCESS. THIS NUMBER IS SUFFIXED
.*                                 WITH AN L,R, OR B TO STIPULATE
.*                                 PRINTING OF THE LEFT HALF, RIGHT
.*                                 HALF, OR BOTH HALVES OF THE BYTE
.*                                 RESPECTIVELY. OMISSION OF THIS
.*                                 OPERAND DEFAULTS TO B WITH THE NUM-
.*                                 BER OF BYTES EQUAL TO THE ITEM LNGTH
.*                            A NEW ENTRY IS GENERATED ONLY WHEN NECES-
.*                                 SARY. THIS MACRO MUST BE THE FIRST
.*                                 MACRO INSTRUCTION ISSUED FOR THE
.*                                 SUBJECT LINE(S).
         GBLA  &BITS(2600),&DB,&DT,&INITIAL
         GBLA  &ITEMITR,&ITEMFST(20),&ITEMNBR,&ITEMMDX
         GBLA  &ITEMNDX(2600),&ITEMXPT
         GBLA  &LABELNR,&LASTCC,&LB,&LBLCTR(100),&LPTR,&LT
         GBLA  &NRENTS,&SHIFT(2600)
         GBLB  &DIAGITF,&DIAGLIN,&DIAGSET,&DIAGTST,&FSW,&TEST
         GBLC  &CARRCON,&CSECT,&DSECT,&ITEM(2600)
         GBLC  &LABELS(2600),&LBL(100),&NRENTSX
         LCLB  &B,&SUB
         LCLA  &IBITS,&ISHIFT,&K,&T,&CODE,&BYTESP,&OP
         LCLC  &S,&LETTER,&ARG
       ACTR  500000
         AIF   (&DIAGTST EQ 0).NOMSG
         AIF   (&INITIAL EQ 0).NOMSG
         AIF   (&DIAGLIN EQ 1).NOMSG
         MNOTE '**NO LINE ASSOCIATED WITH THIS DATA**'
*****THE FOLLOWING GENERATED FOR TEST PURPOSES*****
*        LINE
         LINE
.NOMSG   ANOP
         AIF   (K'&SYSLIST(1) EQ K'&SYSLIST(1,1)).LOOP
&SUB     SETB  1
.LOOP    ANOP
&OP      SETA  &OP+1
&ARG     SETC  '&SYSLIST(&OP,1)'
         ITEMFIND  &ARG
         AIF   (&ITEMXPT EQ 0).MEXIT
.FOUND   ANOP
&ISHIFT  SETA  &SHIFT(&ITEMXPT)
&IBITS   SETA  &BITS(&ITEMXPT)
         AIF   (&ISHIFT EQ 0 OR &ISHIFT EQ 4).ALIGN
.ERR     MNOTE '**DATA NOT ALLIGNED ON HEX OR BYTE BOUNDARY**'
.MEXIT   MEXIT
.ALIGN   ANOP
&CODE    SETA  1
         AIF   (&SUB EQ 1).SUBA
&K       SETA  K'&SYSLIST(3)
         AGO   .SUBB
.SUBA    ANOP
&K       SETA  K'&SYSLIST(&OP,3)
.SUBB    ANOP
         AIF   (&K EQ 1).ERR3
         AIF   (&IBITS-(&IBITS/4)*4 EQ 0).OK
         MNOTE '**BIT LENGTH SPECIFICATION INCONSISTENT WITH CONTROL**'
         MEXIT
.OK      AIF   (&SUB EQ 1).SUBC
         AIF   ('&SYSLIST(3)' EQ '').USEDEFN
&LETTER  SETC  '&SYSLIST(3)'(&K,1)
&S       SETC  '&SYSLIST(3)'(1,&K-1)
         AGO   .SUBD
.SUBC    ANOP
         AIF   ('&SYSLIST(&OP,3)' EQ '').USEDEFN
&LETTER  SETC  '&SYSLIST(&OP,3)'(&K,1)
&S       SETC  '&SYSLIST(&OP,3)'(1,&K-1)
.SUBD    ANOP
&BYTESP  SETA  &S
         AIF   ('&LETTER' EQ 'B').BOTH
         AIF   ('&LETTER' EQ 'L').LEFT
         AIF   ('&LETTER' EQ 'R').RIGHT
.ERR3    MNOTE '**PARAMETER 3 INCOMPLETE-DSGEN DEFINITION USED**'
         AGO   .USEDEFN
.RIGHT   ANOP
&CODE    SETA  2
         AGO   .L
.LEFT    ANOP
&CODE    SETA  1
         AGO   .L
.USEDEFN ANOP
&BYTESP  SETA  &IBITS/8
.BOTH    AIF   (&ISHIFT NE 0).ERR
&CODE    SETA  3
&T       SETA  &BYTESP*2-1
&S       SETC  '&T'
.OK2     AIF   (&ISHIFT EQ 0).L
&CODE    SETA  2
.L       ANOP
&B       SETB  1
         AIF   (&SUB EQ 1).SUBE
         AIF   ('&SYSLIST(2)' EQ '').BACKUP
&K       SETA  K'&SYSLIST(2)
&B       SETB  ('&SYSLIST(2)'(1,1) EQ 'B')
&S       SETC  '&SYSLIST(2)'(&B+1,&K-&B)
         AGO   .SUBF
.SUBE    ANOP
         AIF   ('&SYSLIST(&OP,2)' EQ '').BACKUP
&K       SETA  K'&SYSLIST(&OP,2)
&B       SETB  ('&SYSLIST(&OP,2)'(1,1) EQ 'B')
&S       SETC  '&SYSLIST(&OP,2)'(&B+1,&K-&B)
.SUBF    ANOP
.BACKUP  ANOP
&NRENTS  SETA  &NRENTS+1
         AIF   (&BYTESP GT 0 AND &BYTESP LT 16).SUB0
         MNOTE '**NO. OF BYTES OUTSIDE RANGE OF 1-15**'
         MEXIT
.SUB0    AIF   (&SUB EQ 1).SUBG
         DC    AL.12(&SYSLIST(1)-&DSECT),XL.4'A'
         AGO   .SUBH
.SUBG    ANOP
         DC    AL.12(&SYSLIST(&OP,1)-&DSECT),XL.4'A'
.SUBH    ANOP
         DC    BL.1'&B',FL.7'&S',AL.4(&BYTESP),FL.4'&CODE'
.OUT     ANOP
&ITEMXPT     SETA  0
         AIF   (&SUB EQ 0).OUTA
         AIF   (&OP LT N'&SYSLIST).LOOP
.OUTA    ANOP
         MEND
*
***********************************************************************
* BIN MACRO  BIN MACRO  BIN MACRO  BIN MACRO  BIN MACRO  BIN MACRO
         MACRO
         BIN   ,
.*                                 &SYSLIST(&OP,1) - NAME OF LOG ITEM
.*                                      RECORD DSECT
.*                                 $SYSLIST(&OP,2) - NBR OF SPACES
.*                                      TO SKIP ON MULTIPLE
.*                                      PRINT OR NBR OF SPACES
.*                                      TO BACK UP FROM COLUMN FOR
.*                                      START OF PRINTING. THE LETTER
.*                                      B PRECEEDS THE NUMBER (B5) IF
.*                                      THE LATTER IS DESIRED. OMISSION
.*                                      OF THIS OPERAND FORCES OPTION 2
.*                                      WITH BACKUP SPACING EQUAL TO
.*                                 THE NUMBER OF BITS IN THE ITEM
.*                                 DEFINITION (VIA MACRO 'DSGEN').
.*                            A LIMIT OF 15 BITS IS IMPOSED FOR THE
.*                                 TOTAL NUMBER OF BITS TO PRINT.
         GBLA  &BITS(2600),&DB,&DT,&INITIAL
         GBLA  &ITEMITR,&ITEMFST(20),&ITEMNBR,&ITEMMDX
         GBLA  &ITEMNDX(2600),&ITEMXPT
         GBLA  &LABELNR,&LASTCC,&LB,&LBLCTR(100),&LPTR,&LT
         GBLA  &NRENTS,&SHIFT(2600)
         GBLB  &DIAGITF,&DIAGLIN,&DIAGSET,&DIAGTST,&FSW,&TEST
         GBLC  &CARRCON,&CSECT,&DSECT,&ITEM(2600)
         GBLC  &LABELS(2600),&LBL(100),&NRENTSX
         LCLB  &B,&SUB
         LCLA  &IBITS,&ISHIFT,&K
         LCLA  &TEMP,&T,&OP
         LCLC  &S,&ARG
          ACTR  500000
         AIF   (&DIAGTST EQ 0).NOMSG
         AIF   (&INITIAL EQ 0).NOMSG
         AIF   (&DIAGLIN EQ 1).NOMSG
         MNOTE '**NO LINE ASSOCIATED WITH THIS DATA**'
*****THE FOLLOWING GENERATED FOR TEST PURPOSES*****
*        LINE
         LINE
.NOMSG   ANOP
         AIF   (K'&SYSLIST(1) EQ K'&SYSLIST(1,1)).LOOP
&SUB     SETB  1
.LOOP    ANOP
&OP      SETA  &OP+1
&ARG     SETC  '&SYSLIST(&OP,1)'
         ITEMFIND &ARG
         AIF   (&ITEMXPT EQ 0).MEXIT
&ISHIFT  SETA  &SHIFT(&ITEMXPT)
&IBITS   SETA  &BITS(&ITEMXPT)
         AIF   (&SUB EQ 1).SUB00
         AIF   ('&SYSLIST(3)' EQ '').SETT
&IBITS   SETA  &SYSLIST(3)
         AGO   .SETT
.SUB00   AIF   ('&SYSLIST(&OP,3)' EQ '').SETT
&IBITS   SETA  &SYSLIST(&OP,3)
.SETT    ANOP
&T       SETA  &IBITS-1
&B       SETB  0
         AIF   (&IBITS GT 0 AND &IBITS LT 16).SUB0
         MNOTE '**NO. OF BITS OUTSIDE RANGE OF 1-15**'
.MEXIT   MEXIT
.SUB0    AIF   (&SUB EQ 1).SUBA
         AIF   ('&SYSLIST(2)' EQ '').BACKUP
&K       SETA  K'&SYSLIST(2)
&B       SETB  ('&SYSLIST(2)'(1,1) EQ 'B')
&S       SETC  '&SYSLIST(2)'(&B+1,&K-&B)
         AGO   .SUBB
.SUBA    ANOP
         AIF   ('&SYSLIST(&OP,2)' EQ '').BACKUP
&K       SETA  K'&SYSLIST(&OP,2)
&B       SETB  ('&SYSLIST(&OP,2)'(1,1) EQ 'B')
&S       SETC  '&SYSLIST(&OP,2)'(&B+1,&K-&B)
.SUBB    ANOP
&T       SETA  &S
.BACKUP  ANOP
&NRENTS  SETA  &NRENTS+1
&TEMP    SETA  &ISHIFT
         AIF   (&IBITS NE 1 OR &B NE 0).BIN2
         DC    AL.12(&SYSLIST(&OP,1)-&DSECT),XL.4'&TEMP'
         AGO   .OUT
         AIF   (&SUB EQ 1).BIN2
         AIF   ('&SYSLIST(2)' NE '').BIN3
         AGO   .BIN2A
.BIN2    AIF   ('&SYSLIST(&OP,2)' NE '').BIN3
.BIN2A   ANOP
&B       SETB  1
.BIN3    ANOP
         DC    AL.12(&SYSLIST(&OP,1)-&DSECT),XL.4'C'
         DC    BL.1'&B',AL.7(&T),AL.4(&IBITS),FL.4'&ISHIFT'
.OUT     ANOP
&ITEMXPT     SETA  0
         AIF   (&SUB EQ 0).OUTA
         AIF   (&OP LT N'&SYSLIST).LOOP
.OUTA    ANOP
         MEND
*
***********************************************************************
* LINE MACRO  LINE MACRO  LINE MACRO  LINE MACRO  LINE MACRO LINE MACRO
         MACRO
&NAME    LINE  &DATA,&LABEL,&SKIP=
.*                            THIS MACRO ESTABLISHES THE MARGINS OR
.*                                 COLUMN SETTINGS FOR EACH LINE. IT
.*                                 GENERATES NECESSARY CARRIAGE CONTROL
.*                                 ENTRIES. LASTLY IT DETERMINES THE
.*                                 NUMBER OF ENTRIES ASSOCIATED WITH
.*                                 THE PREVIOUS LINE AND STORES THAT #
.*                                 INTO THE APPROPRIATE BYTE.
.*                            &DATA(1) - CHARACTER POSITION TO BEGIN
.*                                 DATA.
.*                            &DATA(2) - # OF SPACES BETWEEN SUCCESSIVE
.*                                 DATA COLUMN STARTING CHARACTERS.
.*                            &LABEL(1) - CHAR. POS. TO BEGIN LABELS.
.*                            &LABEL(2) - # SPACES BETWEEN LINE'S LABEL
.*                                 STARTING CHARACTERS.
.*                            &SKIP= - # OF LINES TO ADVANCE CARRIAGE
.*                                 TO BEGIN NEXT PRINTED LINE.
.*                            NEW ENTRIES ARE GENERATED ONLY WHEN
.*                                 NECESSARY. OMISSION OF ITEMS MEANS
.*                                 THEY HAVE NOT CHANGED SINCE PREVIOUS
.*                                 SETTINGS. A LINE MACRO IS REQUIRED
.*                                 FOR EACH PRINTED LINE. IF NO SETTING
.*                                 CHANGES ARE REQUIRED ALL OPERANDS
.*                                 ARE OMITTED IN WHICH CASE ONLY THE
.*                                 # OF ENTRIES FOR THE PREVIOUS LINE
.*                                 IS COMPUTED. THIS MACRO MUST BE THE
.*                                 FIRST MACRO INSTRUCTION ISSUED FOR
.*                                 THE SUBJECT LINE
         GBLA  &BITS(2600),&DB,&DT,&INITIAL
         GBLA  &ITEMITR,&ITEMFST(20),&ITEMNBR,&ITEMMDX
         GBLA  &ITEMNDX(2600),&ITEMXPT
         GBLA  &LABELNR,&LASTCC,&LB,&LBLCTR(100),&LPTR,&LT
         GBLA  &NRENTS,&SHIFT(2600)
         GBLB  &DIAGITF,&DIAGLIN,&DIAGSET,&DIAGTST,&FSW,&TEST
         GBLC  &CARRCON,&CSECT,&DSECT,&ITEM(2600)
         GBLC  &LABELS(2600),&LBL(100),&NRENTSX
         LCLA  &S
         AIF   (&INITIAL EQ 0 OR &DIAGTST EQ 0).DIAGSET
         AIF   (&DIAGSET EQ 0).DIAGSET
         MNOTE '**NO LABEL ASSOCIATED WITH LAST SET**'
***** THE FOLLOWING GENERATED FOR TEST PURPOSES *****
*        LABEL '%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%'
               LABEL '%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%'
.DIAGSET ANOP
&DIAGSET SETB  1
&DIAGLIN SETB  1
&NAME    DS    0C
         AIF   (&INITIAL EQ 0).FIRSTLN
         LINEND
         AGO   .NTFIRST
.FIRSTLN ANOP
&NRENTSX SETC  'N&SYSNDX'
&INITIAL SETA  1
N&SYSNDX EQU   *
.NTFIRST ANOP
         DC    AL1(0)
         AIF   ('&DATA(1)' EQ '').CKDTABS
         AIF   (&DATA(1) EQ &DB).CKDTABS
&DB      SETA  &DATA(1)
         AGO   .AA
.CKDTABS AIF   ('&DATA(2)' EQ '').NCDATA
         AIF   (&DATA(2) EQ &DT).NCDATA
         AGO   .CC
.AA      AIF   ('&DATA(2)' EQ '').BB
         AIF   (&DATA(2) EQ &DT).BB
.CC      ANOP
&DT      SETA  &DATA(2)
.BB      DC    XL2'FFFE'
         DC    FL1'&DB'
         DC    FL1'&DT'
&NRENTS  SETA  &NRENTS+1
.NCDATA  ANOP
         AIF   ('&LABEL(1)' EQ '').CKLTABS
         AIF   (&LABEL(1) EQ &LB).CKLTABS
&LB      SETA  &LABEL(1)
         AGO   .AAA
.CKLTABS AIF   ('&LABEL(2)' EQ '').NCLABEL
         AIF   (&LABEL(2) EQ &LT).NCLABEL
         AGO   .CCC
.AAA     AIF   ('&LABEL(2)' EQ '').BBB
         AIF   (&LABEL(2) EQ &LT).BBB
.CCC     ANOP
&LT      SETA  &LABEL(2)
.BBB     DC    XL2'FFFF'
         DC    FL1'&LB'
         DC    FL1'&LT'
&NRENTS  SETA  &NRENTS+1
.NCLABEL ANOP
         AIF   ('&SKIP' NE '').CONT
         AIF   (&TEST EQ 0).NOCHANG
         AGO   .DEFALTA
.CONT    ANOP
         AIF   (&TEST EQ 0).AB
         AIF   ('&SKIP' EQ 'E').AB
&S       SETA  &SKIP
.DEFAULT ANOP
         AIF   (&SKIP EQ &LASTCC).DEFALTA
         ORG   &CARRCON+3
         DC    AL.3(0),AL.2(&S),AL.3(1)
         ORG
&LASTCC  SETA  &S
.DEFALTA ANOP
&TEST    SETB  0
         AGO   .DD
.AB      AIF   ('&SKIP' NE 'E').ABB
A&SYSNDX DC    X'FFFB8B00'              EJECT
         AGO   .ABC
.ABB     AIF   (&SKIP EQ &LASTCC).NOCHANG
A&SYSNDX DC    XL2'FFFB'
         DC    AL.3(0),AL.2(&SKIP),AL.3(1)
         DC    AL.3(0),AL.2(&SKIP),AL.3(1)
&LASTCC  SETA  &SKIP
&TEST    SETB  1
.ABC     ANOP
&CARRCON SETC  'A&SYSNDX'
&NRENTS  SETA  &NRENTS+1
.DD      ANOP
.NOCHANG ANOP
         MEND
*
***********************************************************************
* LINEND MACRO  LINEND MACRO  LINEND MACRO  LINEND MACRO  LINEND MACRO
         MACRO
         LINEND ,
.*                                 THIS MACRO IS USED ONLY BY THE LINE
.*                                 MACRO TO SET THE NUMBER OF ENTRIES
.*                                 ASSOCIATED WITH EACH LINE.
         GBLA  &BITS(2600),&DB,&DT,&INITIAL
         GBLA  &ITEMITR,&ITEMFST(20),&ITEMNBR,&ITEMMDX
         GBLA  &ITEMNDX(2600),&ITEMXPT
         GBLA  &LABELNR,&LASTCC,&LB,&LBLCTR(100),&LPTR,&LT
         GBLA  &NRENTS,&SHIFT(2600)
         GBLB  &DIAGITF,&DIAGLIN,&DIAGSET,&DIAGTST,&FSW,&TEST
         GBLC  &CARRCON,&CSECT,&DSECT,&ITEM(2600)
         GBLC  &LABELS(2600),&LBL(100),&NRENTSX
         ORG   &NRENTSX
         DC    FL1'&NRENTS'
         ORG
&NRENTS  SETA  0
B&SYSNDX EQU   *
&NRENTSX SETC  'B&SYSNDX'
         MEND
*
***********************************************************************
* LABEL MACRO   LABEL MACRO  LABEL MACRO  LABEL MACRO  LABEL MACRO
         MACRO
&NAME    LABEL &LABEL1,&LABEL2,&LABEL3,&LABEL4,&LABEL5,&LABEL6,        C
               &LABEL7,&LABEL8
.*                                 THIS MACRO ALLOWS LABELS TO
.*                                 BE SPECIFIED FOR A GIVEN LINE. THE
.*                                 LABELS SHOULD BE ENCLOSED IN QUOTA-
.*                                 TION MARKS. THE COLUMN AND LINE END
.*                                 CONTROLS WILL BE INSERTED BY THE
.*                                 MACRO. OMITTED OPERANDS MEAN NO
.*                                 LABEL REQUIRED FOR RESPECTIVE
.*                                 COLUMN.
         GBLA  &BITS(2600),&DB,&DT,&INITIAL
         GBLA  &ITEMITR,&ITEMFST(20),&ITEMNBR,&ITEMMDX
         GBLA  &ITEMNDX(2600),&ITEMXPT
         GBLA  &LABELNR,&LASTCC,&LB,&LBLCTR(100),&LPTR,&LT
         GBLA  &NRENTS,&SHIFT(2600)
         GBLB  &DIAGITF,&DIAGLIN,&DIAGSET,&DIAGTST,&FSW,&TEST
         GBLC  &CARRCON,&CSECT,&DSECT,&ITEM(2600)
         GBLC  &LABELS(2600),&LBL(100),&NRENTSX
         LCLC  &MARGIN,&TACK
         LCLC  &TEXT
         LCLA  &OP,&K,&START,&NRCHAR,&REMAIN
         AIF   (&INITIAL EQ 0).DIAGCLR
         AIF   (&DIAGTST EQ 0).DIAGCLR
         AIF   (&DIAGLIN EQ 1).DIAGCLR
         MNOTE '**NO LINE ASSOCIATED WITH PREVIOUS LABEL**'
***** THE FOLLOWING GENERATED FOR TEST PURPOSES *****
*        LINE
         LINE
.DIAGCLR ANOP
&DIAGSET SETB  0
&DIAGLIN SETB  0
&MARGIN  SETC  '*'
         AIF   ('&NAME' EQ '').LOOPOUT
&LPTR    SETA  &LPTR+1
&LBL(&LPTR) SETC '&NAME'
&LBLCTR(&LPTR) SETA &LABELNR+1
.LOOPOUT ANOP
&OP      SETA  &OP+1
&K       SETA  K'&SYSLIST(&OP)
         AIF (&K GE 2).NORM
&K       SETA  2
.NORM    ANOP
&START   SETA  2
         AIF (&OP LT N'&SYSLIST).NOTLAST
&MARGIN  SETC  '$'
.NOTLAST ANOP
&NRCHAR  SETA  8
&TACK    SETC  ''
.LOOPIN  ANOP
&REMAIN  SETA  &K-&START
         AIF (&REMAIN GE 8).MORE
&TACK    SETC  '&MARGIN'
&NRCHAR  SETA  &REMAIN
.MORE    ANOP
&TEXT    SETC  ''
         AIF (&REMAIN EQ 0).ENDTEXT
&TEXT    SETC  '&SYSLIST(&OP)'(&START,&NRCHAR)
.ENDTEXT ANOP
&LABELNR SETA  &LABELNR+1
&LABELS(&LABELNR) SETC '&TEXT'.'&TACK'
&START   SETA  &START+8
         AIF ('&TACK' EQ '').LOOPIN
         AIF ('&TACK' EQ '*').LOOPOUT
         MEND
*
***********************************************************************
* ROUTINE MACRO  ROUTINE MACRO  ROUTINE MACRO  ROUTINE MACRO
         MACRO
&NAME    ROUTINE &LOGITEM,&RNAME
         GBLA  &BITS(2600),&DB,&DT,&INITIAL
         GBLA  &ITEMITR,&ITEMFST(20),&ITEMNBR,&ITEMMDX
         GBLA  &ITEMNDX(2600),&ITEMXPT
         GBLA  &LABELNR,&LASTCC,&LB,&LBLCTR(100),&LPTR,&LT
         GBLA  &NRENTS,&SHIFT(2600)
         GBLB  &DIAGITF,&DIAGLIN,&DIAGSET,&DIAGTST,&FSW,&TEST
         GBLC  &CARRCON,&CSECT,&DSECT,&ITEM(2600)
         GBLC  &LABELS(2600),&LBL(100),&NRENTSX
         AIF   (&DIAGTST EQ 0).NOMSG
         AIF   (&INITIAL EQ 0).NOMSG
         AIF   (&DIAGLIN EQ 1).NOMSG
         MNOTE '**NO LINE ASSOCIATED WITH THIS ROUTINE**'
*****THE FOLLOWING GENERATED FOR TEST PURPOSES*****
*        LINE
         LINE
.NOMSG   ANOP
&NAME    DC    AL.12(&LOGITEM-&DSECT),XL.4'D'
         DC    AL2(&RNAME-&CSECT)
&NRENTS  SETA  &NRENTS+1
         MEND
*
***********************************************************************
* ITEMFIND MACRO  ITEMFIND MACRO  ITEMFIND MACRO  ITEMFIND MACRO
         MACRO
         ITEMFIND &ARG,&ITFDIAG=
         GBLA  &BITS(2600),&DB,&DT,&INITIAL
         GBLA  &ITEMITR,&ITEMFST(20),&ITEMNBR,&ITEMMDX
         GBLA  &ITEMNDX(2600),&ITEMXPT
         GBLA  &LABELNR,&LASTCC,&LB,&LBLCTR(100),&LPTR,&LT
         GBLA  &NRENTS,&SHIFT(2600)
         GBLB  &DIAGITF,&DIAGLIN,&DIAGSET,&DIAGTST,&FSW,&TEST
         GBLC  &CARRCON,&CSECT,&DSECT,&ITEM(2600)
         GBLC  &LABELS(2600),&LBL(100),&NRENTSX
         LCLA  &A,&B,&X,&I
         LCLC  &C1,&C2,&S
         ACTR  500000
&ITEMXPT SETA  0                  INDICATE ITEM NOT FOUND.
         AIF   ('&ARG' NE '').NORM
         AIF   ('&ITFDIAG' EQ 'OFF'  OR  '&ITFDIAG' EQ 'ON').DIAGSET
  MNOTE 0,'ITEMFIND - OPERAND (&ITFDIAG) INVALID FOR ITFDIAG KEYWORD.'
         MEXIT
.DIAGSET ANOP
&DIAGITF SETB  ('&ITFDIAG' EQ 'ON')
         MEXIT
.NORM    AIF   (&ITEMITR GT 0).SORTED
         ITEMSORT
.SORTED  ANOP
&I       SETA  &ITEMITR           COMPUTED ITTERATION COUNT.
&X       SETA  &ITEMMDX           COMPUTED MAXIMUM INDEX.
&C1      SETC  '&ARG'             ISOLATE SEARCH ARGUMENT.
&C1      SETC  '&C1'.'       '(1,8-K'&C1) PAD TO FULL 8 CHARACTERS.
.SRCHUP  ANOP
&A       SETA  &A+&X              CURRENT TABLE SUBSCRIPT + INDEX.
&S       SETC  '+'
         AIF   (&A  GT &ITEMNBR  AND  NOT &DIAGITF).SRCHDN1
         AIF   (&A  LE &ITEMNBR).SRCH00
&C2      SETC  '*-OVER-*'
&I       SETA  &I-1               DECREMENT ITTERATION COUNTER.
&X       SETA  &X/2               HALVE INDEX VALUE.
 MNOTE *,'&ARG - &C2   ITRCTR = &I   PTR = &A&S &X'
         AIF   (&I GE 0).SRCHDWN  IF ITTERATION COUNT NOT EXPIRED.
.NOFIND  MNOTE  20,' ITEMFIND FAILED FOR NAME  &C1  '
         MEXIT
.SRCH00  ANOP
&I       SETA  &I-1               DECREMENT ITTERATION COUNTER.
         AIF   (&I LT 0).NOFIND   IF COUNT HAS GONE TO ZERO.
&X       SETA  &X/2               HALVE INDEX VALUE.
&B       SETA  &ITEMNDX(&A)       GET SUBSCRIPT FROM INDEX TABLE.
&C2      SETC  '&ITEM(&B)'.'       '(1,8-K'&ITEM(&B))  PAD COMPARAND.
         AIF   (NOT &DIAGITF).COMPARE
 MNOTE *,'&ARG - &C2   ITRCTR = &I   PTR = &A&S &X   POS = &B'
.COMPARE AIF   ('&C1' LT '&C2').SRCHDWN   ARGUMENT LOWER, MOVE DOWN.
         AIF   ('&C1' GT '&C2').SRCHUP    ARGUMENT HIGHER, MOVE UP.
&ITEMXPT SETA  &B                 FOUND. SET INDEX POINTER FOR RETURN.
&ITEMFST(&I+1)  SETA  &ITEMFST(&I+1)+1
         MEXIT
.SRCHDWN ANOP
&A       SETA  &A-&X              CURRENT POINTER MINUS INDEX VALUE.
&S       SETC  '-'
         AIF   (&A LE &ITEMNBR).SRCH00    IF WITHIN BOUNDS OF TABLE.
.SRCHDN1 ANOP
&I       SETA  &I-1               DECREMENT ITTERATION COUNTER.
&X       SETA  &X/2               HALVE INDEX VALUE.
         AIF   (&I GE 0).SRCHDWN  IF ITTERATION COUNT NOT EXPIRED.
         MNOTE  20,' ITEMFIND FAILED FOR NAME  &C1  '
         MEND
*
***********************************************************************
* ITEMSORT MACRO  ITEMSORT MACRO  ITEMSORT MACRO  ITEMSORT MACRO
         MACRO
         ITEMSORT  &DUMMY
         GBLA  &BITS(2600),&DB,&DT,&INITIAL
         GBLA  &ITEMITR,&ITEMFST(20),&ITEMNBR,&ITEMMDX
         GBLA  &ITEMNDX(2600),&ITEMXPT
         GBLA  &LABELNR,&LASTCC,&LB,&LBLCTR(100),&LPTR,&LT
         GBLA  &NRENTS,&SHIFT(2600)
         GBLB  &DIAGITF,&DIAGLIN,&DIAGSET,&DIAGTST,&FSW,&TEST
         GBLC  &CARRCON,&CSECT,&DSECT,&ITEM(2600)
         GBLC  &LABELS(2600),&LBL(100),&NRENTSX
         LCLA  &R,&ZI,&I,&A1,&A2,&TEMP
         LCLB  &SR,&GOTO,&TB
         LCLB  &SW(3000)
         LCLC  &C1,&C2
         ACTR  500000
&A1      SETA  0
         AIF   (&ITEMITR EQ 0).LOOP0   TEST FOR RE-ENTRY.
 MNOTE   0,'ITEMSORT MACRO OCCURRS MORE THAN ONCE. TABLE NOT RESORTED.'
         MEXIT
.LOOP0   ANOP
&A1      SETA  &A1+1
&ITEMNDX(&A1) SETA &A1
         AIF   (&A1 LT &ITEMNBR).LOOP0
         AIF   (&ITEMNBR LT 2).MEXIT
&A1      SETA  &ITEMNBR/2         HALF OF TOTAL ENTRIES.
&A2      SETA  0
.LOOP1   ANOP
&A2      SETA  &A2+1
&SW(&A2) SETB  1                  SET FIRST HALF OF SWITCHES TO 1.
         AIF   (&A2 LT &A1).LOOP1
.LOOP2   ANOP
&A2      SETA  &A2+1
&SW(&A2) SETB  0                  SET SECOND HALF TO ZERO.
         AIF   (&A2 LT &ITEMNBR).LOOP2
&R       SETA  0                  SET R TO FIRST TRIAL ITEM.
&ZI      SETA  &ITEMNBR-1         SET ZI TO LAST ITEM.
&I       SETA  &ZI-1
.T3      ANOP
&SR      SETB  (&SW(&R+1))        GET FLAG, WHICH WAY TO GO?
&R       SETA  (&R*2)+1+&SR       R=2R+(1 OR 2)
         AIF   (&R LE &I).T3
.T4      ANOP
&R       SETA  (&R-1)/2           R=(R-1)/2
&SR      SETB  (&SW(&R+1))        GET SUBTREE SELECT FLAG.
         AIF   (&SR EQ 0).T7
         AIF   (&GOTO EQ 0).T5
.T7      ANOP
&A1      SETA  &ITEMNDX(&R+1)
&A2      SETA  &ITEMNDX(&ZI+1)
&C1      SETC  '&ITEM(&A1)'.'       '(1,8-K'&ITEM(&A1))
&C2      SETC  '&ITEM(&A2)'.'       '(1,8-K'&ITEM(&A2))
         AIF   ('&C1' LT '&C2').T8
.T9      ANOP
&TEMP    SETA  &ITEMNDX(&R+1)     Z(R) TO TEMP.
&TB      SETB  (&SW(&R+1))
&ITEMNDX(&R+1) SETA &ITEMNDX(&ZI+1)    Z(I) TO Z(R)
&SW(&R+1) SETB (&SW(&ZI+1))
&ITEMNDX(&ZI+1) SETA &TEMP        TEMP TO Z(I)
&SW(&ZI+1) SETB (&TB)
&SR      SETB  (&SR EQ 0)
&SW(&R+1) SETB (&SR)
.T8      AIF   (&R GT 0).T4
&GOTO    SETB  1                  SET 'GO TO' T7
&ZI      SETA  &ZI-1
&I       SETA  &I-1
         AIF   (&I GE 0).T3
.MEXIT   ANOP
&ITEMITR SETA 1
&ITEMMDX SETA 1
.ITRLOOP ANOP
&ITEMITR SETA &ITEMITR+1
&ITEMMDX SETA &ITEMMDX+&ITEMMDX
         AIF  (&ITEMMDX LT &ITEMNBR).ITRLOOP
&ITEMITR SETA &ITEMITR-1
&ITEMMDX SETA &ITEMMDX/2
&A1      SETA &ITEMNBR
&A2      SETA &ITEMMDX
&TEMP    SETA &ITEMITR
 MNOTE *,' ITEMS = &A1, MAX INDEX = &A2, ITTERATION COUNT = &TEMP'
         MEXIT
.T5      ANOP
&TEMP    SETA  &ITEMNDX(&R+1)     Z(R) TO TEMP.
&TB      SETB  (&SW(&R+1))
&ITEMNDX(&R+1) SETA &ITEMNDX(&ZI+1)    Z(I) TO Z(R)
&SW(&R+1) SETB (&SW(&ZI+1))
&ITEMNDX(&ZI+1) SETA &TEMP        TEMP TO Z(I)
&SW(&ZI+1) SETB (&TB)
&SR      SETB  (&SR EQ 0)
&SW(&R+1) SETB (&SR)
         AGO   .T3
         MEND
*
***********************************************************************
* LSTART MACRO  LSTART MACRO  LSTART MACRO  LSTART MACRO  LSTART MACRO
         MACRO
         LSTART ,
.*                            THIS MACRO IS ISSUED WHEN THE LABEL AREA
.*                                 OF THE TABLE IS TO BEGIN.
         GBLA  &BITS(2600),&DB,&DT,&INITIAL
         GBLA  &ITEMITR,&ITEMFST(20),&ITEMNBR,&ITEMMDX
         GBLA  &ITEMNDX(2600),&ITEMXPT
         GBLA  &LABELNR,&LASTCC,&LB,&LBLCTR(100),&LPTR,&LT
         GBLA  &NRENTS,&SHIFT(2600)
         GBLB  &DIAGITF,&DIAGLIN,&DIAGSET,&DIAGTST,&FSW,&TEST
         GBLC  &CARRCON,&CSECT,&DSECT,&ITEM(2600)
         GBLC  &LABELS(2600),&LBL(100),&NRENTSX
         LCLA  &NDX,&CTR
         ACTR  500000
         AIF   (&DIAGTST EQ 0).NODIAG
         AIF   (&DIAGSET EQ 0).NODIAG
         MNOTE '**NO LABEL ASSOCIATED WITH LAST SET**'
***** THE FOLLOWING GENERATED FOR TEST PURPOSES *****
*        LABEL '%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%'
               LABEL '%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%'
.NODIAG  ANOP
         LINEND
&CTR     SETA  1
.LOOP    ANOP
&NDX     SETA  &NDX+1
         AIF   (&LBLCTR(&CTR) NE &NDX).NOLBL
&LBL(&CTR) DC  C'&LABELS(&NDX)'
&CTR     SETA  &CTR+1
         AGO   .LOOPCTL
.NOLBL   ANOP
         DC    C'&LABELS(&NDX)'
.LOOPCTL AIF   (&NDX LT &LABELNR).LOOP
         MEND
         SPACE 2
         GBLC  &DSECT,&CSECT
IFCEGUS1 CSECT
*
&CSECT   SETC  'IFCEGUS1'
&DSECT   SETC  'GUS1'
*
*                OBR EDIT TABLE 3838
*
GUS1     DSECT
*
         DSGEN (XDUM1,8),(XRELN,8),(XDUM2,8),                          X
               (SW2B0,1),(SW2B1,1),(SW2B2,1),(SW2B3,1),                X
               (SW2B4,1),(SW2B5,1),(SW2B6,1),(SW2B7,1)
         DSGEN (XDUM2A,32)                   SPARES
         DSGEN (XDATE,32)                    DATE
         DSGEN (XTIME,32)                    TIME
         DSGEN (XDUM3,8),(XSER,24)           SPARE AND SERIAL NO
         DSGEN (XMODEL,16),(XMCEL,16)        MODEL #  AND MCEL
         DSGEN (XPGN1,32)                    PROGRAM
         DSGEN (XPGN2,32)                           NAME
         DSGEN (XFCCWCC,8),(XFCCWDA,24)      FAILING COMM & ADDR
         DSGEN (XFCCWFL,8),(XZERO,8),(XFCCWCT,16)  CCW CHAIN & COUNT
         DSGEN (XCSWK,8),(XCSWCA,24)         CSW COMM & ADDR
         DSGEN (XCSWATTN,1),(XCSWSM,1),(XCSWCUE,1),(XCSWBSY,1),        X
               (XCSWCE,1),(XCSWDE,1),(XCSWUC,1),(XCSWUE,1),            X
               (XCSWPCI,1),(XCSWSILI,1),(XCSWPC,1),(XCSWPCHK,1),       X
               (XCSWCDC,1),(XCSWCCC,1),(XCSWICC,1),(XCSWCH,1),         X
               (XCSWCT,16)
         DSGEN (XDUMA,8),(XCUA2,24)          SPARE AND SECONDARY CUA
         DSGEN (XDEVT1,16),(XDEVT2,16)       DEVICE TYPE
         DSGEN (XDUM4,8),(XCUA,24)           SPARE & CUA
         DSGEN (XDUM5,32)                    SPARES
         DSGEN (SDR1,8),(SDR2,8),(SDR3,8),(SDR4,8),                    X
               (SDR5,8),(SDR6,8),(SDR7,8),(SDR8,8)
         DSGEN (SDR9,8),(SDR10,8),                                     X
               (XB0CMDR,1),(XB0INTRQ,1),(XB0BUSC,1),(XB0ECHK,1),       X
               (XB0DCHK,1),(XB0NOTIN,1),(XB0NU2,1),(XB0NU3,1),         X
               (XB1RST,1),(XB1URERR,1),(XB1DDEP,1),(XB1INVP,1),        X
               (XB1NU1,1),(XB1NU2,1),(XB1NU3,1),(XB1NU4,1)
         DSGEN (XB2CPMC,1),(XB2IO,1),(XB2ARELM,1),(XB2DTC,1),          X
               (XB2CPEXC,1),(XB2PERM,1),(XB2NU1,1),(XB2NU2,1),         X
               (XB3SNSTY,8),(XB4B5,16)
         DSGEN (XB6B7,16),                                             X
               (XB8BIT0,1),(XB8BIT1,1),(XB8BIT2,1),(XB8BIT3,1),        X
               (XB8BIT4,1),(XB8BIT5,1),(XB8BIT6,1),(XB8BIT7,1),        X
               (XB9BIT0,1),(XB9BIT1,1),(XB9BIT2,1),(XB9BIT3,1),        X
               (XB9BIT4,1),(XB9BIT5,1),(XB9BIT6,1),(XB9BIT7,1)
         DSGEN (XB10BIT0,1),(XB10BIT1,1),(XB10BIT2,1),(XB10BIT3,1),    X
               (XB10BIT4,1),(XB10BIT5,1),(XB10BIT6,1),(XB10BIT7,1),    X
               (XB11BIT0,1),(XB11BIT1,1),(XB11BIT2,1),(XB11BIT3,1),    X
               (XB11BIT4,1),(XB11BIT5,1),(XB11BIT6,1),(XB11BIT7,1),    X
               (XB12BIT0,1),(XB12BIT1,1),(XB12BIT2,1),(XB12BIT3,1),    X
               (XB12BIT4,1),(XB12BIT5,1),(XB12BIT6,1),(XB12BIT7,1),    X
               (XB13BIT0,1),(XB13BIT1,1),(XB13BIT2,1),(XB13BIT3,1),    X
               (XB13BIT4,1),(XB13BIT5,1),(XB13BIT6,1),(XB13BIT7,1)
         DSGEN (XB14BIT0,1),(XB14BIT1,1),(XB14BIT2,1),(XB14BIT3,1),    X
               (XB14BIT4,1),(XB14BIT5,1),(XB14BIT6,1),(XB14BIT7,1),    X
               (XB15BIT0,1),(XB15BIT1,1),(XB15BIT2,1),(XB15BIT3,1),    X
               (XB15BIT4,1),(XB15BIT5,1),(XB15BIT6,1),(XB15BIT7,1),    X
               (XB16BIT0,1),(XB16BIT1,1),(XB16BIT2,1),(XB16BIT3,1),    X
               (XB16BIT4,1),(XB16BIT5,1),(XB16BIT6,1),(XB16BIT7,1),    X
               (XB17BIT0,1),(XB17BIT1,1),(XB17BIT2,1),(XB17BIT3,1),    X
               (XB17BIT4,1),(XB17BIT5,1),(XB17BIT6,1),(XB17BIT7,1)
         DSGEN (XB18BIT0,1),(XB18BIT1,1),(XB18BIT2,1),(XB18BIT3,1),    X
               (XB18BIT4,1),(XB18BIT5,1),(XB18BIT6,1),(XB18BIT7,1),    X
               (XB19BIT0,1),(XB19BIT1,1),(XB19BIT2,1),(XB19BIT3,1),    X
               (XB19BIT4,1),(XB19BIT5,1),(XB19BIT6,1),(XB19BIT7,1),    X
               (XB20,8),(XB21,8)
         DSGEN (XB22,8),(XB23,8),(XB24,8),(XB25,8)
         DSGEN (XB26XB27,16),(XB28XB29,16)
         DSGEN (XB30XB31,16)
***********************************************************************
EXPNOBR  DSECT
EXPNHDRA DS    CL64
EXPNSDRA DS    CL10
EXPNSNSA DS    CL32
***********************************************************************
NORMOBR  DSECT
NORMHDRA DS    CL64
NORMSDRA DS    CL10
NORMSNSA DS    CL32
***********************************************************************
SHRTOBR  DSECT
SHRTHDRA DS    CL24
SHRTSDRA DS    CL10
***********************************************************************
IFCEGUS1 CSECT
         USING *,R9
         USING GUS1,R2
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
L0       EQU   0
L1       EQU   1
L2       EQU   2
L3       EQU   3
L4       EQU   4
L5       EQU   5
L6       EQU   6
L7       EQU   7
L8       EQU   8
L10      EQU   10
L12      EQU   12
L13      EQU   13
L16      EQU   16
L17      EQU   17
L20      EQU   20
L21      EQU   21
L24      EQU   24
L27      EQU   27
L29      EQU   29
L30      EQU   30
L31      EQU   31
L32      EQU   32
L36      EQU   36
L44      EQU   44
L46      EQU   46
L64      EQU   64
L96      EQU   96
L106     EQU   106
HEX01    EQU   X'01'
HEX02    EQU   X'02'
HEX08    EQU   X'08'
HEX10    EQU   X'10'
HEX20    EQU   X'20'
HEX30    EQU   X'30'
HEXFF    EQU   X'FF'
A        EQU   C'A'
B        EQU   C'B'
***********************************************************************
*              DECLARES
***********************************************************************
         DC    A(ENTRIES)          PTR TO EDIT ENTRIES
         DC    CL8'IFCEGUS1'
XR9PTR   DC    F'0'                PTR TO NEXT EDIT-4
XLABELP  DC    F'0'                LABEL PTR SAVE
SHRTADCN DC    A(SHRTOBRS-4)
         DC    A(SHRTOBRL)
HWLABAD  DC    A(HWLABEL)
DATLABAD DC    A(DATLABEL)
OBRAREA  DS    CL106
SAVE2    DS    F
XSAVE    DS    4F
UNITCK   DC    C'UNIT CHECK'
OVFL     DC    C'OVERFLOW'
UNIVERS  DC    C'UNIVERSAL   SERIAL NO. NONE  '
OVRLAYS  DC    C' X  X XX  XXXX   X X X   XXXXX'
MPCPU    DC    C'MULTIPROCESSOR - CPU'
JOBID    DC    C'JOB IDENTITY'
SERNO    DC    C'SERIAL NO.'
TFLG     DC    X'00'
WORK     DS    D
RELTAB   DS    0C
         DC    C'OS  '
         DC    C'DOS '
         DC    C'VS 1'
         DC    C'V370'
         DC    C'VS 2'
         DC    C'    '
         DC    C'    '
         DC    C'    '
NONE     DC    C'NONE'
BLANKS   DC    CL36' '
ZERO     DC    XL4'00'
CHARS    DC    C'0123456789ABCDEF'
XXXX     DC    C'XXXX'
***********************************************************************
*              SPECIAL ROUTINE SECTION
***********************************************************************
*
***********************************************************************
*              CONVERT 4 BYTES TO EBCDIC
***********************************************************************
BRCNT    STM   R5,R8,XSAVE
         IC    R7,L0(R4)                GET 1ST BYTE
         SLL   R7,L8                    MAKE ROOM
         IC    R7,L1(R4)                GET 2ND BYTE
         SLL   R7,L8                    MAKE ROOM
         IC    R7,L2(R4)                GET 3RD BYTE
         SLL   R7,L8                    MAKE ROOM
         IC    R7,L3(R4)                GET 4TH BYTE
         LA    R8,CHARS                 GET ADDR. OF CHAR. TABLE
         SR    R6,R6                    CLEAR REG
         SLDL  R6,L4                    GET 4 BITS
         AR    R6,R8                    COMPUTE OFFSET INTO CHAR. TABLE
         MVC   L0(L1,R3),L0(R6)         MOVE CHAR INTO LINE
         SR    R6,R6                    CLEAR REG
         SLDL  R6,L4                    GET 4 BITS
         AR    R6,R8                    COMPUTE OFFSET INTO CHAR. TABLE
         MVC   L1(L1,R3),L0(R6)         MOVE CHAR INTO LINE
         SR    R6,R6                    CLEAR REG
         SLDL  R6,L4                    GET 4 BITS
         AR    R6,R8                    COMPUTE OFFSET INTO CHAR. TABLE
         MVC   L2(L1,R3),L0(R6)         MOVE CHAR INTO LINE
         SR    R6,R6                    CLEAR REG
         SLDL  R6,L4                    GET 4 BITS
         AR    R6,R8                    COMPUTE OFFSET INTO CHAR. TABLE
         MVC   L3(L1,R3),L0(R6)         MOVE CHAR INTO LINE
         SR    R6,R6                    CLEAR REG
         SLDL  R6,L4                    GET 4 BITS
         AR    R6,R8                    COMPUTE OFFSET INTO CHAR. TABLE
         MVC   L4(L1,R3),L0(R6)         MOVE CHAR INTO LINE
         SR    R6,R6                    CLEAR REG
         SLDL  R6,L4                    GET 4 BITS
         AR    R6,R8                    COMPUTE OFFSET INTO CHAR. TABLE
         MVC   L5(L1,R3),L0(R6)         MOVE CHAR INTO LINE
         SR    R6,R6                    CLEAR REG
         SLDL  R6,L4                    GET 4 BITS
         AR    R6,R8                    COMPUTE OFFSET INTO CHAR. TABLE
         MVC   L6(L1,R3),L0(R6)         MOVE CHAR INTO LINE
         SR    R6,R6                    CLEAR REG
         SLDL  R6,L4                    GET 4 BITS
         AR    R6,R8                    COMPUTE OFFSET INTO CHAR. TABLE
         MVC   L7(L1,R3),L0(R6)         MOVE CHAR INTO LINE
         B     RETURN
***********************************************************************
*              CHECK IF BYTES 14-19 SHOULD BE PRINTED
***********************************************************************
CONDSNS  STM   R5,R8,XSAVE
         TM    L0(R4),HEXFF             Q/ ANY BITS ON IN BYTE 8
         BNZ   NXTEST                   YES, SKIP OVERLAY
         LR    R5,R3                    GET PTR TO LINE POS.
         LA    R6,L96                   AMOUNT TO BACKSPACE
         SR    R5,R6                    BACKSPACE
         MVC   L0(L4,R5),XXXX           MOVE IN 'XXXX'
NXTEST   TM    XB12BIT0,HEXFF           Q/ ANY BITS ON IN BYTE 12
         BNZ   NXTEST1                  YES, SKIP OVERLAY
         TM    XB13BIT0,HEXFF           Q/ ANY BITS ON IN BYTE 13
         BNZ   NXTEST1                  YES, SKIP OVERLAY
         LR    R5,R3                    GET PTR TO PRINT POS.
         LA    R6,L64                   AMOUNT TO BACKSPACE PTR
         SR    R5,R6                    BACKSPACE
         MVC   L0(L4,R5),XXXX           MOVE IN 'XXXX'
NXTEST1  TM    XB10BIT0,HEXFF           Q/ ANY BITS ON IN BYTE 10
         BNZ   RETURN                   YES, SKIP OVERLAY
         LR    R5,R3                    GET PTR TO PRINT POS.
         LA    R6,L32                   AMOUNT TO BACKSPACE PTR
         SR    R5,R6                    BACKSPACE
         MVC   L0(L4,R5),XXXX           MOVE IN 'XXXX'
         B     RETURN
***********************************************************************
*              CHECK IF BYTES 20-27 SHOULD BE PRINTED
***********************************************************************
CONDSNS1 STM   R5,R8,XSAVE              SAVE REGS
         TM    L0(R4),HEX30             Q/ IS BIT 2 OR 3 ON IN BYTE 12
         BC    5,RETURN                 YES, 1 OR BOTH IS ON
         LR    R5,R3                    GET PTR TO PRINT POS.
         LA    R6,L31                   AMOUNT TO BACKSPACE PTR
         SR    R5,R6                    BACKSPACE PTR
         MVC   L0(L30,R5),OVRLAYS       MOVE IN OVERLAY
         B     RETURN
***********************************************************************
*              CONVERT RELEASE
***********************************************************************
CONVREL  STM   R5,R8,XSAVE
         SR    R6,R6                    CLEAR REG
         IC    R6,L0(R4)                GET SYSTEM AND RELEASE VALUES
         SRDL  R6,L5                    SAVE REL. NO. IN REG 7
         SLL   R6,L2                    MULT. SYSTEM VALUE BY 4
         L     R8,XLABELP               GET LABEL PTR
         LA    R6,RELTAB(R6)            INDEX INTO TABLE OF SYSTEMS
         MVC   L0(L4,R8),L0(R6)         MOVE SYSTEM NAME INTO LABEL
         SR    R6,R6                    CLEAR REG
         SLDL  R6,L5                    RETRIEVE RELEASE NO.
         LTR   R6,R6                    Q/ IS REL. NO. ZERO
         BZ    NOREL                    YES
         CVD   R6,WORK                  CONVERT REL. NO. TO DECIMAL
         UNPK  L0(L2,R3),WORK+L6(L2)    UNPACK IT INTO PRINT BUFFER
         MVZ   L1(L1,R3),L0(R3)         MOVE IN PROPER ZONE
         B     RETURN
NOREL    MVC   L0(L4,R3),NONE           MOVE IN 'NONE' FOR RELEASE
         B     RETURN
***********************************************************************
*              EXPAND RECORD
***********************************************************************
EXPNDRTN STM   R5,R8,XSAVE
         ST    R2,SAVE2                 SAVE R2 FOR LATER
         LA    R5,OBRAREA               PICK UP ADDR OF EXPANDED AREA
         USING EXPNOBR,R5
         USING NORMOBR,R4
         XC    EXPNOBR(L106),EXPNOBR    CLEAR AREA
         TM    SW2B0,HEX20              Q/ IS THIS A SHORT OBR RECORD
         BO    MOVESHRT                 YES
MOVEALL  MVC   EXPNOBR(L106),NORMOBR    MOVE ENTIRE RECORD
EXPNDRET LR    R2,R5                    SWAP PTRS
         B     RETURN
         USING SHRTOBR,R4
MOVESHRT MVC   EXPNHDRA(L24),SHRTHDRA   MOVE HEADER
         MVC   EXPNSDRA(L10),SHRTSDRA   MOVE STATISTICAL AREA
         B     EXPNDRET
         DROP  R4,R5
***********************************************************************
*              CLEAR HEX JOBNAME IF SHORT OBR RECORD
***********************************************************************
NONAME   TM    L0(R4),HEX20             Q/ IS THIS A SHORT OBR RECORD
         BCR   14,R14                   NO, SO LET HEX JOB NAME PRINT
         ST    R5,XSAVE                 SAVE WORK REG
         LA    R5,L44                   AMOUNT TO BACKSPACE PTR
         SR    R3,R5                    BACKUP PTR
         MVC   L0(L17,R3),BLANKS        CLEAR OUT HEX JOBNAME
         AR    R3,R5                    RESTORE PTR
         L     R5,XSAVE                 RESTORE REG
         BR    R14
***********************************************************************
*              DETERMINE IF LONG OR SHORT OBR RECORD
***********************************************************************
RECTYPE  STM   R5,R8,XSAVE
         LR    R5,R3                    GET PTR TO CUR. DATA PRINT POS.
         LA    R6,L31                   AMOUNT TO BACKSPACE PTR
         SR    R5,R6                    BACKSPACE PTR
         TM    L0(R4),HEX20             Q/ IS THIS A SHORT OBR RECORD
         BO    RECSHORT                 YES
         MVC   L0(L10,R5),UNITCK        NO, INSERT 'UNIT CHECK' LABEL
         B     RETURN
RECSHORT MVC   L0(L10,R5),OVFL          INSERT 'OVERFLOW'
         B     RETURN
***********************************************************************
*              RESET REG. 2 TO START OF INPUT RECORD
***********************************************************************
RESETR2  L     R2,SAVE2                 RESTORE REG
         BR    R14
***********************************************************************
*              COMMON REGISTER RESTORE AND RETURN
***********************************************************************
RETURN   LM    R5,R8,XSAVE
         BR    R14
***********************************************************************
*              TEST FOR CONVERTED RECORD - KEY 32
***********************************************************************
SETCONV  TM    L0(R4),HEX02             Q/ IS CONVERT SWITCH ON
         BCR   1,R14                    YES
         SR    R15,R15                  ZERO IS TO STOP PRINT
         BR    R14
***********************************************************************
*              SETCPU NO. AND SERIAL NO.
***********************************************************************
SETCPUNO STM   R5,R8,XSAVE              SAVE REGS
         SR    R5,R5                    CLEAR REG
         IC    R5,L0(R4)                GET 1ST BYTE OF CPU MODEL NO.
         SLL   R5,L4                    MAKE ROOM FOR SECOND BYTE
         IC    R5,L1(R4)                GET 2ND BYTE
         LTR   R5,R5                    Q/ IS MODEL NO. ZERO
         LR    R5,R3                    GET PTR TO CURRENT PRNT POS.
         BNZ   SETSER                   MODEL NO. IS NOT ZERO
         LA    R6,L46                   AMOUNT TO BACKSPACE PTR
         SR    R5,R6                    BACKSPACE PTR
         MVC   L0(L29,R5),UNIVERS       INSERT LABEL FOR NONE
         B     RETURN
SETSER   LA    R6,L36                   AMOUNT TO BACKSPACE
         SR    R5,R6                    BACKSPACE PTR
         MVC   L0(L10,R5),SERNO         INSERT 'SERIAL NO.'
         B     RETURN
***********************************************************************
*              SET DATE
***********************************************************************
SETDATE  CLC   L1(L3,R4),ZERO           Q/ IS DATE ZERO
         BE    SETDTE                   YES
         UNPK  XSAVE(L8),L1(L3,R4)      UNPACK DATE
         MVC   L5(L2,R3),XSAVE+L3       MOVE YEAR
         MVC   L0(L3,R3),XSAVE+L5       MOVE JULIAN DAY
         BR    R14
SETDTE   MVC   L0(L4,R3),NONE           SET DATE TO NONE
         BR    R14
***********************************************************************
*              HEX (CONVERT 1 HEX BYTE TO 2 EBCDIC CHARACTER)
***********************************************************************
SETHEX1  MVI   TFLG,X'01'               INDICATE BACKSPACE REQUIRED
SETHEX   STM   R5,R8,XSAVE              SAVE REGS
         LA    R8,CHARS                 GET ADDR OF EBCDIC CHAR. TABLE
         IC    R7,L0(R4)                PICK UP BYTE TO CONVERT
         SLL   R7,L24                   MOVE IT TO HI PART OF R7
         SR    R6,R6                    CLEAR REG
         SLDL  R6,L4                    MOVE 4 BITS TO R6
         AR    R6,R8                    COMPUTE OFFSET INTO CHAR. TABLE
         TM    TFLG,X'01'               Q/ BACKSPACE REQUIRED
         BO    PERFCNT                  YES
         MVC   L0(L1,R3),L0(R6)         MOVE CHAR TO LINE
SETHEXX  SR    R6,R6                    CLEAR REG
         SLDL  R6,L4                    MOVE LAST 4 BITS TO R6
         AR    R6,R8                    COMPUTE OFFSET
         TM    TFLG,X'01'               Q/ BACKSPACE REQUIRED
         BO    PERFCNT1                 YES
         MVC   L1(L1,R3),L0(R6)         MOVE CHAR TO LINE + 1
         B     RETURN
PERFCNT  LR    R5,R3                    GET PTR TO PRINT POS.
         LA    R8,L29                   SET UP FOR BACKSPACE
         SR    R5,R8                    BACKSPACE
         MVC   L0(L1,R5),L0(R6)         MOVE CHAR INTO LINE
         LA    R8,CHARS                 RESTORE REG 8
         B     SETHEXX                  RETURN TO MAINLINE
PERFCNT1 MVC   L1(L1,R5),L0(R6)         MOVE CHAR INTO LINE
         MVI   TFLG,X'00'               CLEAR FLAG
         B     RETURN
***********************************************************************
*              HEX (CONVERT 2 HEX BYTES TO 4 EBCDIC CHARACTERS)
***********************************************************************
SETHEX2  STM   R5,R8,XSAVE              SAVE REGS
         LA    R8,CHARS                 GET ADDR OF EBCDIC CHAR. TABLE
         IC    R7,L0(R4)                PICK UP BYTE TO CONVERT
         SLL   R7,L24                   MOVE IT TO HI PART OF R7
         SR    R6,R6                    CLEAR REG
         SLDL  R6,L4                    MOVE 4 BITS TO R6
         AR    R6,R8                    COMPUTE OFFSET INTO CHAR. TABLE
         MVC   L0(L1,R3),L0(R6)         MOVE CHAR TO LINE
         SR    R6,R6                    CLEAR
         SLDL  R6,L4                    MOVE LAST 4 BITS TO R6
         AR    R6,R8                    COMPUTE OFFSET
         MVC   L1(L1,R3),L0(R6)         MOVE CHAR TO LINE + 1
         IC    R7,L1(R4)                PICK UP 2ND INPUT BYTE
         SLL   R7,L24                   MOVE IT TO HI PART OF R7
         SR    R6,R6                    CLEAR REG
         SLDL  R6,L4                    MOVE 4 BITS TO R6
         AR    R6,R8                    COMPUTE OFFSET INTO CHAR. TABLE
         MVC   L2(L1,R3),L0(R6)         MOVE CHAR TO LINE + 2
         SR    R6,R6                    CLEAR
         SLDL  R6,L4                    MOVE LAST 4 BITS TO R6
         AR    R6,R8                    COMPUTE OFFSET
         MVC   L3(L1,R3),L0(R6)         MOVE CHAR TO LINE + 3
         B     RETURN
***********************************************************************
*              SET PROGRAM NAME
***********************************************************************
SETPGMN  DS    0H
         TM    SW2B0,HEX20              Q/ IS THIS A SHORT OBR RECORD
         BCR   1,R14                    YES, THUS NO JOB ID
         MVC   L0(L12,R3),JOBID         MOVE IN 'JOB IDENTITY'
         MVC   L13(L8,R3),XPGN1         MOVE IN JOB NAME
         BR    R14
***********************************************************************
*              ADVANCE DATA PTR TO NEXT POSITION
***********************************************************************
SKIPPER  BR    R14                      RETURN
***********************************************************************
*              DETERMINE SENSE DATA TYPE
***********************************************************************
SNSTYPE  TM    XB3SNSTY,HEX01           Q/ IS THIS HARDWARE VERIF. SNS
         BO    HARDWARE                 YES
         TM    XB3SNSTY,HEX02           Q/ IS THIS DATA-RELATED SENSE
         BO    DATAREL                  YES
SNSRET   BR    R14                      MUST BE EQUIPMENT-RELATED SNS
HARDWARE STM   R5,R8,XSAVE
         LA    R5,HWSENSE-4             GET ADR OF 1ST HW LINE
         ST    R5,XR9PTR                SAVE PTR
         L     R5,HWLABAD               GET ADR OF 1ST HW LABELS
         ST    R5,XLABELP               SAVE PTR
         SR    R15,R15                  DONT PRINT THIS LINE
         B     RETURN
DATAREL  STM   R5,R8,XSAVE
         LA    R5,DATSENSE-4            GET ADR OF 1ST DAT-REL LINE
         ST    R5,XR9PTR                SAVE PTR
         L     R5,DATLABAD              GET ADR OF 1ST DAT-REL LABEL
         ST    R5,XLABELP               SAVE PTR
         SR    R15,R15                  DONT PRINT THIS LINE
         B     RETURN
***********************************************************************
*              ADVANCE PRINT POSITION PTR 1 SPACES
***********************************************************************
SPACER1  LA    R3,L1(R3)                ADVANCE PRINT POS. PTR 1 SPACE
         BR    R14
***********************************************************************
*              ADVANCE PRINT POSITION PTR 16 SPACES
***********************************************************************
SPACER16 LA    R3,L16(R3)               UP PTR BY 16
         BR    R14
***********************************************************************
*              MP TEST
***********************************************************************
TESTMP   TM    L0(R4),HEX10             Q/ IS THIS A MP RECORD
         BZ    NOMP                     NO
         MVC   L0(L20,R3),MPCPU         MOVE IN MP LABEL
         TM    L0(R4),HEX08             Q/ IS IT CPUA OR CPUB
         BO    MPB                      IT IS CPUB
         MVI   L21(R3),A                MOVE 'A' IN PRINT LINE
NOMP     BR    R14
MPB      MVI   L21(R3),B                MOVE 'B' IN PRINT LINE
         BR    R14
***********************************************************************
*              IF SHORT RECORD THEN SKIP TO STAT. EDIT SETS
***********************************************************************
TESTSHRT TM    SW2B0,HEX20              Q/ IS THIS A SHORT OBR RECORD
         BZ    SKIPPER                  NO
         BCTR  R3,R0                    BACK UP POS. PTR 1 SPACE
         MVC   L0(L6,R3),BLANKS         CLEAR HEX SECONDARY CUA
         MVC   XR9PTR(L8),SHRTADCN      POINT TO STAT. EDIT SETS
         BR    R14
***********************************************************************
*              LINE/LABEL SETS
***********************************************************************
ENTRIES  DS    0F
         DC    XL4'00'             FORMAT 1
         DC    XL4'00'             FORMAT 2
         DC    A(LABELS)           LABEL PTR
         DC    H'0'                DISP
***********************************************************************
*        SKIP TO CHANNEL 1
***********************************************************************
         DC    X'02'
         DC    X'000B8B00'
         DC    AL.12(XDUM1-GUS1),XL.4'D'   = ROUTINE XDUM1,EXPNDRTN
         DC    AL.4(0),AL.12(EXPNDRTN-IFCEGUS1)
***********************************************************************
         LINE  (55,23),(1,35),SKIP=1
         ROUTINE SW2B0,RECTYPE
         HEX   XMODEL,0,2B
         HEX   XSER,0,3B
         ROUTINE XMODEL,SETCPUNO
         LABEL '---RECORD ENTRY TYPE -','   SOURCE - OUTBOARD',        X
               'MODEL-'
***********************************************************************
         LINE  (16,1),(4,1)
         ROUTINE XRELN,CONVREL
         LABEL 'XXXX REL.'
***********************************************************************
         LINE  (69,1),(31,19)
         ROUTINE XPGN1,SETPGMN
         LABEL 'DAY YEAR','HH MM SS.TH'
***********************************************************************
         LINE  (31,19),(25,19)
         ROUTINE XDATE,SETDATE
         HEX   XTIME,1,4B
         ROUTINE XDUM1,SKIPPER
         HEX   XPGN1,B6,4B
         HEX   XPGN2,B16,4B
         ROUTINE SW2B0,NONAME
         LABEL 'DATE-','TIME-'
***********************************************************************
         LINE  (1,1),(1,1)
         ROUTINE SW2B0,TESTMP
         LABEL ''
***********************************************************************
         LINE  ,(1,1),SKIP=2
         ROUTINE XDUM1,SETCONV
         LABEL   'OBR RECORD CONVERTED TO THE STANDARD FORMAT'
***********************************************************************
         LINE  ,(2,32),SKIP=1
         LABEL 'DEVICE TYPE','3838'
***********************************************************************
         LINE  (34,1),(2,1)
         HEX   XCUA,B0,3B
         LABEL 'PRIMARY   CHANNEL UNIT ADDRESS'
***********************************************************************
         LINE  ,,SKIP=2
         HEX   XCUA2,B0,3B
         ROUTINE XDUM1,TESTSHRT
         LABEL 'ALTERNATE CHANNEL UNIT ADDRESS'
***********************************************************************
         LINE  ,(23,38),SKIP=1
         LABEL 'CC   CA   FL     CT','K    CA   US CS  CT'
***********************************************************************
         LINE  (23,3),(5,51),SKIP=2
         HEX   XFCCWCC,0,1B
         HEX   XFCCWDA,0,3B
         ROUTINE XDUM1,SPACER1
         HEX   XFCCWFL,0,1B
         HEX   XZERO,0,1B
         HEX   XFCCWCT,0,2B
         ROUTINE XDUM1,SPACER16
         HEX   XCSWK,0,1B
         HEX   XCSWCA,0,3B
         ROUTINE XDUM1,SPACER1
         ROUTINE XCSWATTN,SETHEX
         ROUTINE XCSWPCI,SETHEX
         HEX   XCSWCT,0,2B
         LABEL 'FAILING CCW','CSW'
***********************************************************************
         LINE  ,(5,28)
         ROUTINE XDUM1,SKIPPER
         LABEL 'UNIT STATUS','CHANNEL STATUS','STATISTICAL DATA',      X
               'STATISTICAL DATA'
***********************************************************************
         LINE  (20,28),(3,26),SKIP=1
         BIN   XCSWATTN
         BIN   XCSWPCI
         HEX   SDR1,0,1L
         HEX   SDR1,0,1R
         LABEL 'ATTENTION','PRGM-CTLD INTRPT','DATA CHECK (READ)',     X
               '    NOT USED'
***********************************************************************
         LINE
         BIN   XCSWSM
         BIN   XCSWSILI
         HEX   SDR2,0,1L
         HEX   SDR2,0,1R
         LABEL 'STATUS MODIFIER','INCORRECT LENGTH',                   X
               'DATA CHECK (WRITE)','    NOT USED'
***********************************************************************
         LINE
         BIN   XCSWCUE
         BIN   XCSWPC
         HEX   SDR3,0,1L
         HEX   SDR3,0,1R
         LABEL 'CONTROL UNIT END','PROGRAM CHECK',                     X
               'INTERVENTION REQD','    NOT USED'
***********************************************************************
         LINE
         BIN   XCSWBSY
         BIN   XCSWPCHK
         HEX   SDR4,0,1L
         HEX   SDR4,0,1R
         LABEL 'BUSY','PROTECTION CHECK','BUS OUT PARITY',             X
               '    NOT USED'
***********************************************************************
         LINE
         BIN   XCSWCE
         BIN   XCSWCDC
         HEX   SDR5,0,1L
         HEX   SDR5,0,1R
         LABEL 'CHANNEL END','CHAN DATA CHECK','EQUIPMENT CHECK',      X
               '    NOT USED'
***********************************************************************
         LINE
         BIN   XCSWDE
         BIN   XCSWCCC
         HEX   SDR6,0,1L
         HEX   SDR6,0,1R
         LABEL 'DEVICE END','CHAN CTL CHECK','NOT USED','    NOT USED'
***********************************************************************
         LINE
         BIN   XCSWUC
         BIN   XCSWICC
         HEX   SDR7,0,1L
         HEX   SDR7,0,1R
         LABEL 'UNIT CHECK','I/F CTL CHECK','NOT USED','    NOT USED'
***********************************************************************
         LINE  ,,SKIP=3
         BIN   XCSWUE
         BIN   XCSWCH
         HEX   SDR8,0,1L
         HEX   SDR8,0,1R
         LABEL 'UNIT EXCEPTION','CHAINING CHECK','NOT USED',           X
               '    CHAN DATA CHK'
***********************************************************************
         LINE  ,(1,43)
         LABEL 'SENSE BYTE DATA - FIXED FORMAT - (BYTES 0-7)'
***********************************************************************
         LINE  ,(5,24),SKIP=2
         LABEL 'STANDARD STATUS (+0)','REQUEST STATUS (+1)',           X
               'DETECTING COMP (+2)','CIT OPERATION CODE (+4,+5)'
***********************************************************************
         LINE  (23,23),(3,24),SKIP=1
         BIN   XB0CMDR
         BIN   XB1RST
         BIN   XB2CPMC
         HEX   XB4B5,B6,2B
         LABEL 'COMMAND REJECT','RESTARTABLE','CP MACHINE CHK'
***********************************************************************
         LINE
         BIN   XB0INTRQ
         BIN   XB1URERR
         BIN   XB2IO
         LABEL 'INTERVENTION REQD','UNRELATED ERROR','I/O'
***********************************************************************
         LINE
         BIN   XB0BUSC
         BIN   XB1DDEP
         BIN   XB2ARELM
         LABEL 'BUS OUT PARITY','DATA-DEPENDENT','ARITH ELEMENT'
***********************************************************************
         LINE
         BIN   XB0ECHK
         BIN   XB1INVP
         BIN   XB2DTC
         LABEL 'EQUIPMENT CHECK','INVALID PASSWORD','DATA TRANS CTLR'
***********************************************************************
         LINE
         BIN   XB0DCHK
         BIN   XB1NU1
         BIN   XB2CPEXC
         LABEL 'DATA CHECK','NOT USED','CP EXECUTIVE',                 X
               '  CIT OPERATION OFFSET (+6,+7)'
***********************************************************************
         LINE
         BIN   XB0NOTIN
         BIN   XB1NU2
         BIN   XB2PERM
         LABEL 'NOT USED','NOT USED','PERF MONITOR'
***********************************************************************
         LINE
         BIN   XB0NU2
         BIN   XB1NU3
         BIN   XB2NU1
         HEX   XB6B7,B6,2B
         LABEL 'NOT USED','NOT USED','NOT USED'
***********************************************************************
         LINE  ,,SKIP=3
         BIN   XB0NU3
         BIN   XB1NU4
         BIN   XB2NU2
         LABEL 'NOT USED','NOT USED','NOT USED'
***********************************************************************
         LINE  ,(1,36),SKIP=2
         ROUTINE XB3SNSTY,SNSTYPE
         LABEL 'SENSE BYTE DATA - EXTENDED FORMAT 0 ',                 X
               '- EQUIPMENT-RELATED (BYTES 8-31)'
***********************************************************************
         LINE  ,(3,18)
         LABEL 'STOR PAR (+8)','ADDR CHK (+9)','CP STAT (+10)',        X
               'AE STAT (+11)','CP EXEC (+12)','CP EXEC (+13)'
***********************************************************************
         LINE  (14,18),(3,18),SKIP=1
         BIN   XB8BIT0
         BIN   XB9BIT0
         BIN   XB10BIT0
         BIN   XB11BIT0
         BIN   XB12BIT0
         BIN   XB13BIT0
         LABEL 'BULK STOR','BULK STOR','ILL MICRO','MACH CHK',         X
               'INV INSTR','INV AD REF'
***********************************************************************
         LINE
         BIN   XB8BIT1
         BIN   XB9BIT1
         BIN   XB10BIT1
         BIN   XB11BIT1
         BIN   XB12BIT1
         BIN   XB13BIT1
         LABEL 'CP PGM ST','CP PGM ST','EDB T/O','WS CONFLCT',         X
               'DIV ZERO','INIT ERR'
***********************************************************************
         LINE
         BIN   XB8BIT2
         BIN   XB9BIT2
         BIN   XB10BIT2
         BIN   XB11BIT2
         BIN   XB12BIT2
         BIN   XB13BIT2
         LABEL 'CP CTL ST','NOT USED','EDB PAR R','NOT USED',          X
               'I/O INIT','BUF SPACE'
***********************************************************************
         LINE
         BIN   XB8BIT3
         BIN   XB9BIT3
         BIN   XB10BIT3
         BIN   XB11BIT3
         BIN   XB12BIT3
         BIN   XB13BIT3
         LABEL 'AE WRK ST','NOT USED','EDB PAR O','NOT USED',          X
               'INV IOCW','NOT USED'
***********************************************************************
         LINE
         BIN   XB8BIT4
         BIN   XB9BIT4
         BIN   XB10BIT4
         BIN   XB11BIT4
         BIN   XB12BIT4
         BIN   XB13BIT4
         LABEL 'AE CTL ST','NOT USED','NOT USED','NOT USED',           X
               'DTC INIT','NOT USED'
***********************************************************************
         LINE
         BIN   XB8BIT5
         BIN   XB9BIT5
         BIN   XB10BIT5
         BIN   XB11BIT5
         BIN   XB12BIT5
         BIN   XB13BIT5
         LABEL 'NOT USED','NOT USED','NOT USED','NOT USED',            X
               'INV TCB','NOT USED'
***********************************************************************
         LINE
         BIN   XB8BIT6
         BIN   XB9BIT6
         BIN   XB10BIT6
         BIN   XB11BIT6
         BIN   XB12BIT6
         BIN   XB13BIT6
         LABEL 'NOT USED','NOT USED','NOT USED','NOT USED',            X
               'AE INIT','NOT USED'
***********************************************************************
         LINE  ,,SKIP=3
         BIN   XB8BIT7
         BIN   XB9BIT7
         BIN   XB10BIT7
         BIN   XB11BIT7
         BIN   XB12BIT7
         BIN   XB13BIT7
         LABEL 'NOT USED','NOT USED','NOT USED','NOT USED',            X
               'INV AFCW','NOT USED'
***********************************************************************
         LINE  ,(21,28),SKIP=2
         LABEL 'STORAGE CARD (+14,+15)','CP PGM STOR ADDR (+16,+17)',  X
               '             CP CSAR (+18,+1','9)'
***********************************************************************
         LINE  (36,32)
         ROUTINE XB14BIT0,SETHEX2
         ROUTINE XB16BIT0,SETHEX2
         ROUTINE XB18BIT0,SETHEX2
         ROUTINE XB8BIT0,CONDSNS
         LABEL ''
***********************************************************************
         LINE  ,(63,36),SKIP=1
         LABEL 'CC FL ST   CNT    SS      ADDR'
***********************************************************************
         LINE  (64,3),(32,72)
         HEX   XB20,0,1L
         HEX   XB20,B1,1R
         HEX   XB21,B1,1B
         HEX   XB22,0,1B
         HEX   XB23,B1,1B
         HEX   XB24,0,1L
         HEX   XB24,B1,1R
         HEX   XB25,0,1L
         HEX   XB25,B1,1R
         HEX   XB26XB27,B2,2B
         ROUTINE XB12BIT0,CONDSNS1
         LABEL 'FAILING IOCW (+20-+27)'
***********************************************************************
DUMPCODE LINE  ,,SKIP=1
         ROUTINE XDUM1,RESETR2
         LABEL ''
***********************************************************************
         DC    X'FF'
         DC    XL2'006A'         RECORD LENGTH
         DC    XL2'0020'         LENGTH OF HDR
         DC    XL2'0020'         DISP. FOR START OF DATA
SHRTOBRL LABEL ''
***********************************************************************
SHRTOBRS LINE  ,(1,1),SKIP=2
         LABEL 'STATISTICAL DATA'
***********************************************************************
         LINE  (21,30),(1,30),SKIP=1
         HEX   SDR1,0,1L
         HEX   SDR1,0,1R
         LABEL 'DATA CHECK (READ)','NOT USED'
***********************************************************************
         LINE
         HEX   SDR2,0,1L
         HEX   SDR2,0,1R
         LABEL 'DATA CHECK (WRITE)','NOT USED'
***********************************************************************
         LINE
         HEX   SDR3,0,1L
         HEX   SDR3,0,1R
         LABEL 'INTERVENTION REQD','NOT USED'
***********************************************************************
         LINE
         HEX   SDR4,0,1L
         HEX   SDR4,0,1R
         LABEL 'BUS CUT PARITY','NOT USED'
***********************************************************************
         LINE
         HEX   SDR5,0,1L
         HEX   SDR5,0,1R
         LABEL 'EQUIPMENT CHECK','NOT USED'
***********************************************************************
         LINE
         HEX   SDR6,0,1L
         HEX   SDR6,0,1R
         LABEL 'NOT USED','NOT USED'
***********************************************************************
         LINE
         HEX   SDR7,0,1L
         HEX   SDR7,0,1R
         LABEL 'NOT USED','NOT USED'
***********************************************************************
         LINE
         HEX   SDR8,0,1L
         HEX   SDR8,0,1R
         LABEL 'NOT USED','CHAN DATA CHECK'
***********************************************************************
         LINE  ,,SKIP=2
         ROUTINE XDUM1,RESETR2
         LABEL ''
***********************************************************************
         DC    X'FF'
         DC    XL2'0022'         RECORD LENGTH
         DC    XL2'0010'         LENGTH OF HDR
         DC    XL2'0010'         DISP. FOR START OF DATA
HWLABEL  LABEL ''
***********************************************************************
HWSENSE  LINE  ,(1,38),SKIP=2
         LABEL 'SENSE BYTE DATA - EXTENDED FORMAT 1 - ',               X
               'HARDWARE VERIFICATION (BYTES 8-19)'
***********************************************************************
         LINE  ,(3,42)
         LABEL 'PERF MON EXEC CNT (+8)      PM ERR STAT    ',          X
               '(+10)  (+11)  (+12)  (+13)  (+14)  (+15)  ',           X
               '(+16)  (+17)  (+18)  (+19)'
***********************************************************************
         LINE  (41,7),(31,1),SKIP=1
         ROUTINE XB8BIT0,SETHEX1
         BIN   XB10BIT0
         BIN   XB11BIT0
         BIN   XB12BIT0
         BIN   XB13BIT0
         BIN   XB14BIT0
         BIN   XB15BIT0
         BIN   XB16BIT0
         BIN   XB17BIT0
         BIN   XB18BIT0
         BIN   XB19BIT0
         LABEL 'CP FAILURE'
***********************************************************************
         LINE  (48,7),(31,1)
         BIN   XB10BIT1
         BIN   XB11BIT1
         BIN   XB12BIT1
         BIN   XB13BIT1
         BIN   XB14BIT1
         BIN   XB15BIT1
         BIN   XB16BIT1
         BIN   XB17BIT1
         BIN   XB18BIT1
         BIN   XB19BIT1
         LABEL 'AE FAILURE'
***********************************************************************
         LINE
         BIN   XB10BIT2
         BIN   XB11BIT2
         BIN   XB12BIT2
         BIN   XB13BIT2
         BIN   XB14BIT2
         BIN   XB15BIT2
         BIN   XB16BIT2
         BIN   XB17BIT2
         BIN   XB18BIT2
         BIN   XB19BIT2
         LABEL 'BULK STOR'
***********************************************************************
         LINE  (48,7),(3,28)
         BIN   XB10BIT3
         BIN   XB11BIT3
         BIN   XB12BIT3
         BIN   XB13BIT3
         BIN   XB14BIT3
         BIN   XB15BIT3
         BIN   XB16BIT3
         BIN   XB17BIT3
         BIN   XB18BIT3
         BIN   XB19BIT3
         LABEL 'PERF MON ERR CNT (+9)','DTC FAILURE'
***********************************************************************
         LINE  (48,7),(31,1)
         BIN   XB10BIT4
         BIN   XB11BIT4
         BIN   XB12BIT4
         BIN   XB13BIT4
         BIN   XB14BIT4
         BIN   XB15BIT4
         BIN   XB16BIT4
         BIN   XB17BIT4
         BIN   XB18BIT4
         BIN   XB19BIT4
         LABEL 'NOT USED'
***********************************************************************
         LINE  (41,7),(31,1)
         ROUTINE XB9BIT0,SETHEX1
         BIN   XB10BIT5
         BIN   XB11BIT5
         BIN   XB12BIT5
         BIN   XB13BIT5
         BIN   XB14BIT5
         BIN   XB15BIT5
         BIN   XB16BIT5
         BIN   XB17BIT5
         BIN   XB18BIT5
         BIN   XB19BIT5
         LABEL 'NOT USED'
***********************************************************************
         LINE  (48,7),(31,1)
         BIN   XB10BIT6
         BIN   XB11BIT6
         BIN   XB12BIT6
         BIN   XB13BIT6
         BIN   XB14BIT6
         BIN   XB15BIT6
         BIN   XB16BIT6
         BIN   XB17BIT6
         BIN   XB18BIT6
         BIN   XB19BIT6
         LABEL 'NOT USED'
***********************************************************************
         LINE
         BIN   XB10BIT7
         BIN   XB11BIT7
         BIN   XB12BIT7
         BIN   XB13BIT7
         BIN   XB14BIT7
         BIN   XB15BIT7
         BIN   XB16BIT7
         BIN   XB17BIT7
         BIN   XB18BIT7
         BIN   XB19BIT7
         LABEL 'NOT USED'
***********************************************************************
         LINE  ,,SKIP=2
         ROUTINE XDUM1,RESETR2
         LABEL ''
***********************************************************************
         DC    X'FF'
         DC    XL2'006A'         RECORD LENGTH
         DC    XL2'0020'         LENGTH OF HDR
         DC    XL2'0020'         DISP. FOR START OF DATA
DATLABEL LABEL ''
***********************************************************************
DATSENSE LINE  ,(1,38),SKIP=2
         LABEL 'SENSE BYTE DATA - EXTENDED FORMAT 2 - ',               X
               'DATA-RELATED (BYTES 8-15)'
***********************************************************************
         LINE  ,(3,27)
         LABEL ' DATA-DEP STAT (+8)','  DATA-DEP STAT (+9)',           X
               'AE DATA CHK STAT (+10)','AE DATA CHK STAT (+11)'
***********************************************************************
         LINE  (20,28),(3,28),SKIP=1
         BIN   XB8BIT0
         BIN   XB9BIT0
         BIN   XB10BIT0
         BIN   XB11BIT0
         LABEL 'I/O LIMIT CHECK','CIT INDEX OVFL','NOT USED',          X
               'ADDER A EXP OVFL'
***********************************************************************
         LINE
         BIN   XB8BIT1
         BIN   XB9BIT1
         BIN   XB10BIT1
         BIN   XB11BIT1
         LABEL 'I/O LENGTH ERR','CIT INDX DIV CHK','NOT USED',         X
               'ADDER A EXP UNFL'
***********************************************************************
         LINE
         BIN   XB8BIT2
         BIN   XB9BIT2
         BIN   XB10BIT2
         BIN   XB11BIT2
         LABEL 'CHAN PGM CORRES','BULK ST LIM CHK','NOT USED',         X
               'ADDER A INT OVFL'
***********************************************************************
         LINE
         BIN   XB8BIT3
         BIN   XB9BIT3
         BIN   XB10BIT3
         BIN   XB11BIT3
         LABEL 'CIT LIMIT CHECK','DTC CONVERT','RECP EST EXP OVF',     X
               'ADD A RT EXP LRG'
***********************************************************************
         LINE
         BIN   XB8BIT4
         BIN   XB9BIT4
         BIN   XB10BIT4
         BIN   XB11BIT4
         LABEL 'INV CIT OPER','SELEC ERROR STOP','MULT EXP OVFL',      X
               'ADDER B EXP OVFL'
***********************************************************************
         LINE
         BIN   XB8BIT5
         BIN   XB9BIT5
         BIN   XB10BIT5
         BIN   XB11BIT5
         LABEL 'INV CIT PARAM','NOT USED','MULT EXP UNFL',             X
               'ADDER B EXP UNFL'
***********************************************************************
         LINE
         BIN   XB8BIT6
         BIN   XB9BIT6
         BIN   XB10BIT6
         BIN   XB11BIT6
         LABEL 'INV CIT BRANCH','NOT USED','INT MULT OVFL',            X
               'ADDER B INT OVFL'
***********************************************************************
         LINE  ,,SKIP=3
         BIN   XB8BIT7
         BIN   XB9BIT7
         BIN   XB10BIT7
         BIN   XB11BIT7
         LABEL 'CIT BR CNT EXCD','NOT USED','UNNORM RECP EST',         X
               'ADD B RT EXP LRG'
***********************************************************************
         LINE  (76,2),(31,1)
         ROUTINE XB12BIT0,BRCNT
         LABEL 'CIT SUCCESSFUL BRANCH COUNT (+12-+15)'
***********************************************************************
         LINE  ,,SKIP=2
         ROUTINE XDUM1,RESETR2
         LABEL ''
***********************************************************************
         DC    X'FF'
         DC    XL2'006A'         RECORD LENGTH
         DC    XL2'0020'         LENGTH OF HDR
         DC    XL2'0020'         DISP. FOR START OF DATA
***********************************************************************
LABELS   DS    0F
         DC    C'$'
         LSTART
         END
