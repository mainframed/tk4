*** THIS MODULE SUPPORTS 3850 DEVICE --- SUPPORT CODE=Y30LPDG ***
         MACRO
         BIN   ,
.*                                 &SYSLIST(&OP,1) - NAME OF LOG ITEM
.*                                      RECORD DSECT
.*                                 $SYSLIST(&OP,2) - NBR OF SPACES
.*                                      TO SKIP ON MULTIPLE
.*                                      PRINT OR NBR OF SPACES
.*                                      TO BACK UP FROM COLUMN FOR
.*                                      START OF PRINTING. THE LETTER
.*                                      B PRECEEDS THE NUMBER (B5) IF
.*                                      THE LATTER IS DESIRED. OMISSION
.*                                      OF THIS OPERAND FORCES OPTION 2
.*                                      WITH BACKUP SPACING EQUAL TO
.*                                 THE NUMBER OF BITS IN THE ITEM
.*                                 DEFINITION (VIA MACRO 'DSGEN').
.*                            A LIMIT OF 15 BITS IS IMPOSED FOR THE
.*                                 TOTAL NUMBER OF BITS TO PRINT.
         GBLA  &BITS(3000),&DB,&DT,&INITIAL
         GBLA  &ITEMITR,&ITEMFST(20),&ITEMNBR,&ITEMMDX
         GBLA  &ITEMNDX(3000),&ITEMXPT
         GBLA  &LABELNR,&LASTCC,&LB,&LBLCTR(100),&LPTR,&LT
         GBLA  &NRENTS,&SHIFT(3000)
         GBLB  &DIAGITF,&DIAGLIN,&DIAGSET,&DIAGTST,&FSW,&TEST
         GBLC  &CARRCON,&CSECT,&DSECT,&ITEM(3000)
         GBLC  &LABELS(3000),&LBL(100),&NRENTSX
         LCLB  &B,&SUB
         LCLA  &IBITS,&ISHIFT,&K
         LCLA  &TEMP,&T,&OP
         LCLC  &S,&ARG
          ACTR  500000
         AIF   (&DIAGTST EQ 0).NOMSG
         AIF   (&INITIAL EQ 0).NOMSG
         AIF   (&DIAGLIN EQ 1).NOMSG
         MNOTE '**NO LINE ASSOCIATED WITH THIS DATA**'
*****THE FOLLOWING GENERATED FOR TEST PURPOSES*****
*        LINE
         LINE
.NOMSG   ANOP
         AIF   (K'&SYSLIST(1) EQ K'&SYSLIST(1,1)).LOOP
&SUB     SETB  1
.LOOP    ANOP
&OP      SETA  &OP+1
&ARG     SETC  '&SYSLIST(&OP,1)'
         ITEMFIND &ARG
         AIF   (&ITEMXPT EQ 0).MEXIT
&ISHIFT  SETA  &SHIFT(&ITEMXPT)
&IBITS   SETA  &BITS(&ITEMXPT)
         AIF   (&SUB EQ 1).SUB00
         AIF   ('&SYSLIST(3)' EQ '').SETT
&IBITS   SETA  &SYSLIST(3)
         AGO   .SETT
.SUB00   AIF   ('&SYSLIST(&OP,3)' EQ '').SETT
&IBITS   SETA  &SYSLIST(&OP,3)
.SETT    ANOP
&T       SETA  &IBITS-1
&B       SETB  0
         AIF   (&IBITS GT 0 AND &IBITS LT 16).SUB0
         MNOTE '**NO. OF BITS OUTSIDE RANGE OF 1-15**'
.MEXIT   MEXIT
.SUB0    AIF   (&SUB EQ 1).SUBA
         AIF   ('&SYSLIST(2)' EQ '').BACKUP
&K       SETA  K'&SYSLIST(2)
&B       SETB  ('&SYSLIST(2)'(1,1) EQ 'B')
&S       SETC  '&SYSLIST(2)'(&B+1,&K-&B)
         AGO   .SUBB
.SUBA    ANOP
         AIF   ('&SYSLIST(&OP,2)' EQ '').BACKUP
&K       SETA  K'&SYSLIST(&OP,2)
&B       SETB  ('&SYSLIST(&OP,2)'(1,1) EQ 'B')
&S       SETC  '&SYSLIST(&OP,2)'(&B+1,&K-&B)
.SUBB    ANOP
&T       SETA  &S
.BACKUP  ANOP
&NRENTS  SETA  &NRENTS+1
         AIF   (&IBITS NE 1 OR &B NE 0).BIN2
&TEMP    SETA  &ISHIFT
         DC    AL.12(&SYSLIST(&OP,1)-&DSECT),XL.4'&TEMP'
         AGO   .OUT
         AIF   (&SUB EQ 1).BIN2
         AIF   ('&SYSLIST(2)' NE '').BIN3
         AGO   .BIN2A
.BIN2    AIF   ('&SYSLIST(&OP,2)' NE '').BIN3
.BIN2A   ANOP
&B       SETB  1
.BIN3    ANOP
         DC    AL.12(&SYSLIST(&OP,1)-&DSECT),XL.4'C'
         DC    BL.1'&B',AL.7(&T),AL.4(&IBITS),FL.4'&ISHIFT'
.OUT     ANOP
&ITEMXPT     SETA  0
         AIF   (&SUB EQ 0).OUTA
         AIF   (&OP LT N'&SYSLIST).LOOP
.OUTA    ANOP
         MEND
         MACRO
&NAME    DSGEN ,
.*                            THIS MACRO GENERATES ONE DSECT WORD
.*                                 FORMATTED FOR THE SUBJECT LOG RECORD
.*                                 EACH OPERAND HAS TWO SUB LISTS. THE
.*                                 FIRST IS THE NAME OF THE LOG ITEM
.*                                 WHILE THE SECOND IS THE # OF BITS TO
.*                                 ALLOCATE FOR THIS ITEM. ITEMS MUST
.*                                 BE DEFINED CONTIGUOUSLY WITHOUT GAPS
.*                                 UNUSED BIT GROUPS MUST BE GIVEN
.*                                 DUMMY NAMES. THE NAMES PROVIDED FOR
.*                                 THE LOG ITEMS MAY THEN BE USED IN
.*                                 THE CONVERSION MACRO INSTRUCTIONS.
         GBLA  &BITS(3000),&DB,&DT,&INITIAL
         GBLA  &ITEMITR,&ITEMFST(20),&ITEMNBR,&ITEMMDX
         GBLA  &ITEMNDX(3000),&ITEMXPT
         GBLA  &LABELNR,&LASTCC,&LB,&LBLCTR(100),&LPTR,&LT
         GBLA  &NRENTS,&SHIFT(3000)
         GBLB  &DIAGITF,&DIAGLIN,&DIAGSET,&DIAGTST,&FSW,&TEST
         GBLC  &CARRCON,&CSECT,&DSECT,&ITEM(3000)
         GBLC  &LABELS(3000),&LBL(100),&NRENTSX
         LCLB  &ONLY1,&CTIND
         LCLA  &START1,&START2,&END1,&END2
         LCLC  &SYMBOL,&EQUSYM
         LCLA  &OP,&COUNT,&BYTE,&EQUCNT
         ACTR  100000
         AIF   (&ITEMITR EQ 0).START
 MNOTE   20,'DSGEN MACRO OCCURRS AFTER ITEMSORT MACRO HAS BEEN ISSUED.'
         MEXIT
.START   AIF   (N'&SYSLIST(&OP+1) LT 3).LOOP
         AIF   ('&SYSLIST(&OP+1,3)' EQ 'EQU').LOOP     TEST FOR EQU
  AIF   ('&SYSLIST(&OP+1,3)' EQ '' OR '&SYSLIST(&OP+1,4)' EQ '').ERR1
         AIF   ('&SYSLIST(&OP+1,3)' GT '&SYSLIST(&OP+1,4)').ERR3
&START1  SETA  &SYSLIST(&OP+1,3)        GET START COUNT OF 1
&START2  SETA  &SYSLIST(&OP+1,4)        GET FIRST END COUNT
         AGO   .SET2A                   BRANCH AROUND
         AIF   ('&SYSLIST(&OP+1,5)' GT '&SYSLIST(&OP+1,6)').ERR3
.ERR1    MNOTE '**FIRST SYMBOL CONCATENATION INCOMPLETE**'
         MEXIT
.SET2A   AIF   ('&SYSLIST(&OP+1,5)' EQ ''AND '&SYSLIST(&OP+1,6)' EQ '' X
               ).SET2                   TEST FOR NO SECOND
  AIF   ('&SYSLIST(&OP+1,5)' EQ '' OR '&SYSLIST(&OP+1,6)' EQ '').ERR2
&END1    SETA  &SYSLIST(&OP+1,5)        GET START COUNT OF 2
&END2    SETA  &SYSLIST(&OP+1,6)        GET END COUNT OF 2
         AGO   .LOOP
.SET2    ANOP
&ONLY1   SETB  1                        INDICATE ONLY ONE CONCATENATION
         AGO   .LOOP
.ERR2    MNOTE '**SECOND SYMBOL CONCATENATION INCOMPLETE**'
         MEXIT
.ERR3    MNOTE '**START GREATER THAN END CONCATENATION**'
         MEXIT
.LOOP    ANOP
&OP      SETA  &OP+1
         AIF   (&OP GT N'&SYSLIST).DONE      TEST IF ALL DONE
&ITEMNBR SETA  &ITEMNBR+1
         AIF   ('&SYSLIST(&OP,2)' NE '').OK1
         MNOTE '**NULL BIT COUNT FIELD**'
         MEXIT
.OK1     ANOP
&SYMBOL  SETC  '&SYSLIST(&OP,1)'
         AIF   ('&SYMBOL' NE '').OK
*              *****     LOG ITEM SYMBOL NOT PROVIDED     *****
         AIF   ('&SYSLIST(&OP,3)' NE 'EQU').CNT
         AGO   .START                   GET NEXT
.OK      AIF   (N'&SYSLIST(&OP) LT 3).NO3    TEST FOR OLD FORMAT
         AIF   ('&SYSLIST(&OP,3)' EQ 'EQU').EQU   TEST FOR EQU
         AIF   (&ONLY1).OK2             TEST FOR ONLY ONE CONCAT
&SYMBOL  SETC  '&SYMBOL.&START1.&END1'       GET 1 AND 2 CONCAT
         AGO   .NO3                     BRANCH AROUND
.OK2     ANOP
&SYMBOL  SETC  '&SYMBOL.&START1'        GET 1 CONCATENATED
.NO3     ANOP
&SYMBOL  EQU   *+&BYTE
&ITEM(&ITEMNBR) SETC '&SYMBOL'          GET LABEL IN GLOBAL
&BITS(&ITEMNBR) SETA &SYSLIST(&OP,2)
&SHIFT(&ITEMNBR) SETA &COUNT-&BYTE*8
.CNT     ANOP
&CTIND   SETB  1                        SET COUNT INDICATOR
&COUNT   SETA  &COUNT+&SYSLIST(&OP,2)
&BYTE    SETA  &COUNT/8
         AIF   (N'&SYSLIST(&OP) LT 3).START  TEST FOR OLD FORMAT
         AIF   (&ONLY1).TSTST           TEST FOR ONLY ONE CONCAT
         AIF   (&END1 EQ &END2).TSTST   TEST FOR SECOND END
&END1    SETA  &END1+1                  INCREMENT COUNT
&OP      SETA  &OP-1                    DECREMENT INCREMENT
         AGO   .LOOP                    GENERATE NEXT
.TSTST   ANOP
         AIF   (&START1 EQ &START2).LPDONE   TEST FOR END
         AIF   (&ONLY1).NSET1           TEST FOR ONLY ONE CONCAT
&END1    SETA  &SYSLIST(&OP,5)          RE-INIT SECOND START COUNT
.NSET1   ANOP
&OP      SETA  &OP-1                    DECREMENT INDEX
&START1  SETA  &START1+1                INCREMENT FIRST COUNT
         AGO   .LOOP                    GO DO NEXT
.LPDONE  ANOP
&ONLY1   SETB  0                        CLEAR INDICATOR
         AGO   .START                   GO TEST FOR MORE SUB-LISTS
.DONE    AIF   (&COUNT-&COUNT/8*8 NE 0).ERR  TEST FOR MULTIPLE OF EIGHT
         AIF   (&CTIND EQ 0).END        NO DS IF NO COUNT
&COUNT   SETA  &COUNT/8                 GET NUMBER OF BYTES
&NAME    DS    &COUNT.C
.END     MEXIT
.ERR     MNOTE '**BIT COUNT FLDS DO NOT TOTAL MULTIPLE OF 8**'
         MEXIT
.EQU     AIF   ('&SYSLIST(&OP,4)' NE '').EQU1     TEST FOR NULL LABEL
.ERR4    MNOTE '**EQU OPERAND OMITTED OR NOT FOUND**'
         MEXIT
.EQU1    AIF   (&SYSLIST(&OP,2) LT 16).EQU2  COUNT OVER FIFTEEN
*****               THE FOLLOWING STATEMENT                *****
*****     NUMBER OF BITS EXCEED 15 - DO NOT USE AS BIN     *****
.EQU2    ANOP
&EQUCNT  SETA  0                        CLEAR COUNTER
&EQUSYM  SETC  '&SYSLIST(&OP,4)'        GET EQU OPERAND
.EQULOP  ANOP
&EQUCNT  SETA  &EQUCNT+1                INCREMENT INDEX
         AIF   ('&ITEM(&EQUCNT)' EQ '&EQUSYM').EQUOUT  LABEL FOUND?
         AIF   (&EQUCNT EQ &ITEMNBR).ERR4    ALL TESTED?
         AGO   .EQULOP                  NO-GET NEXT
.EQUOUT  ANOP
&ITEM(&ITEMNBR) SETC '&SYMBOL'          GET LABEL NAME
&BITS(&ITEMNBR) SETA &SYSLIST(&OP,2)    GET NUMBER OF BITS
&SHIFT(&ITEMNBR) SETA &SHIFT(&EQUCNT)   GET SHIFT COUNT
&SYMBOL  EQU   &EQUSYM                  THIS SYMBOL EQUATED
         AGO   .START                   RETURN FOR NEXT
         MEND
         MACRO
         CONVT ,
         GBLA  &BITS(3000),&DB,&DT,&INITIAL
         GBLA  &ITEMITR,&ITEMFST(20),&ITEMNBR,&ITEMMDX
         GBLA  &ITEMNDX(3000),&ITEMXPT
         GBLA  &LABELNR,&LASTCC,&LB,&LBLCTR(100),&LPTR,&LT
         GBLA  &NRENTS,&SHIFT(3000)
         GBLB  &DIAGITF,&DIAGLIN,&DIAGSET,&DIAGTST,&FSW,&TEST
         GBLC  &CARRCON,&CSECT,&DSECT,&ITEM(3000)
         GBLC  &LABELS(3000),&LBL(100),&NRENTSX
         LCLB  &SUB
         LCLA  &OP
         LCLA  &OFFSET,&OUT,&IN,&IND,&IBITS,&ISHIFT
.*
.*       CONVERT BINARY TO DECIMAL
.*             &NAME IS THE REFERENCE INTO THE DSECT RECORD
.*             &OUT    IS THE NUMBER OF CHARS TO BE PUT ONTO PRINT LINE
.*                                      DEFAULT IS FOUR MAXIMUM IS 8
.*             &IN       IS THE NUMBER OF BYTES AS INPUT
.*                                      ERROR DEFAULT IS 2 MAXIMUM IS 4
.*
         AIF   (&DIAGTST EQ 0).NOMSG
         AIF   (&INITIAL EQ 0).NOMSG
         AIF   (&DIAGLIN EQ 1).NOMSG
         MNOTE '**NO LINE ASSOCIATED WITH THIS DATA**'
*****THE FOLLOWING GENERATED FOR TEST PURPOSES*****
*        LINE
         LINE
.NOMSG   ANOP
         AIF   (K'&SYSLIST(1) EQ K'&SYSLIST(1,1)).LLOP
&SUB     SETB  1
.LLOP    ANOP
&OP      SETA  &OP+1
&OUT     SETA  4                        .BR NOT NULL ELSE SET TO 4
         AIF   (&SUB EQ 1).SUBA
         AIF   ('&SYSLIST(3)' EQ '').B  TEST FOR NULL INPUT
&OUT     SETA  &SYSLIST(3)             SET &OUT FROM INPUT
         AGO   .A
.SUBA    AIF   ('&SYSLIST(&OP,3)' EQ '').B
&OUT     SETA  &SYSLIST(&OP,3)          SET &OUT FROM INPUT
.A       AIF   (&OUT GT 0 AND &OUT LT 9).B   TEST RANGE
.AERR    MNOTE '*** BYTES OUT INCORRECTLY SPECIFIED DEFAULT USED ***'
&OUT     SETA  4
.B       AIF   (&SUB EQ 1).SUBB
         AIF   ('&SYSLIST(2)' EQ '').LOOP    BRANCH IF NULL
&IN      SETA  &SYSLIST(2)              .SET &IN FROM INPUT
         AGO   .BB
.SUBB    AIF   ('&SYSLIST(&OP,2)' EQ '').LOOP
&IN      SETA  &SYSLIST(&OP,2)          .SET &IN FROM INPUT
.BB      AIF   (&IN GT 0 AND &IN LT 5).D     TEST RANGE
.BERR    MNOTE '*** BYTES IN INCORRECTLY SPECIFIED DEFAULT USED ***'
&IN      SETA  2
         AGO   .D
.LOOP    ANOP                           .LOOP TO FIND &NAME IN DSECT
&IND     SETA  &IND+1                   .SET UP LOOP COUNTER
         AIF   ('&ITEM(&IND)' EQ '&SYSLIST(&OP,1)').FOUND
         AIF   (&IND LT &ITEMNBR).LOOP  .TEST FOR END OF DSECT
         MNOTE '*** LOG ITEM NOT DEFINED ***'
         MEXIT
.FOUND   ANOP
&IBITS   SETA  &BITS(&IND)              .SET UP NUMBER OF BITS SPEC
         AIF   (&IBITS-((&IBITS/8)*8) EQ 0).C  .TEST FOR MULTIPLE OF 8
         MNOTE '*** DATA NOT DEFINED A MULTIPLE OF 8 BITS ***'
         MEXIT
.C       ANOP
&IN      SETA  &IBITS/8                 .COMPUTE NUMBER OF BYTES
         AIF   (&IN LT 1 OR &IN GT 4).BERR  .TEST RANGE B IF IN ERROR
&ISHIFT  SETA  &SHIFT(&IND)             .SET UP FOR TEST OF BYTE BNDR
         AIF   (&ISHIFT EQ 0).D         .TEST FOR BYTE BNDRY
         MNOTE '*** DATA NOT ALIGNED ON A BYTE BOUNDARY ***'
         MEXIT
.*
.D       ANOP
&NRENTS  SETA  &NRENTS+1
         DC    AL.12(&SYSLIST(&OP,1)-&DSECT),AL.4(9)
         DC    X'&IN',X'&OUT'
&IND     SETA  0
         AIF   (&SUB EQ 0).OUTA
         AIF   (&OP LT N'&SYSLIST).LLOP
.OUTA    ANOP
         MEND
         MACRO
         ITEMFIND &ARG,&ITFDIAG=
         GBLA  &BITS(3000),&DB,&DT,&INITIAL
         GBLA  &ITEMITR,&ITEMFST(20),&ITEMNBR,&ITEMMDX
         GBLA  &ITEMNDX(3000),&ITEMXPT
         GBLA  &LABELNR,&LASTCC,&LB,&LBLCTR(100),&LPTR,&LT
         GBLA  &NRENTS,&SHIFT(3000)
         GBLB  &DIAGITF,&DIAGLIN,&DIAGSET,&DIAGTST,&FSW,&TEST
         GBLC  &CARRCON,&CSECT,&DSECT,&ITEM(3000)
         GBLC  &LABELS(3000),&LBL(100),&NRENTSX
         LCLA  &A,&B,&X,&I
         LCLC  &C1,&C2,&S
         ACTR  100000
&ITEMXPT SETA  0                  INDICATE ITEM NOT FOUND.
         AIF   ('&ARG' NE '').NORM
         AIF   ('&ITFDIAG' EQ 'OFF'  OR  '&ITFDIAG' EQ 'ON').DIAGSET
  MNOTE 0,'ITEMFIND - OPERAND (&ITFDIAG) INVALID FOR ITFDIAG KEYWORD.'
         MEXIT
.DIAGSET ANOP
&DIAGITF SETB  ('&ITFDIAG' EQ 'ON')
         MEXIT
.NORM    AIF   (&ITEMITR GT 0).SORTED
         ITEMSORT
.SORTED  ANOP
&I       SETA  &ITEMITR           COMPUTED ITTERATION COUNT.
&X       SETA  &ITEMMDX           COMPUTED MAXIMUM INDEX.
&C1      SETC  '&ARG'             ISOLATE SEARCH ARGUMENT.
&C1      SETC  '&C1'.'       '(1,8-K'&C1) PAD TO FULL 8 CHARACTERS.
.SRCHUP  ANOP
&A       SETA  &A+&X              CURRENT TABLE SUBSCRIPT + INDEX.
&S       SETC  '+'
         AIF   (&A  GT &ITEMNBR  AND  NOT &DIAGITF).SRCHDN1
         AIF   (&A  LE &ITEMNBR).SRCH00
&C2      SETC  '*-OVER-*'
&I       SETA  &I-1               DECREMENT ITTERATION COUNTER.
&X       SETA  &X/2               HALVE INDEX VALUE.
 MNOTE *,'&ARG - &C2   ITRCTR = &I   PTR = &A&S &X'
         AIF   (&I GE 0).SRCHDWN  IF ITTERATION COUNT NOT EXPIRED.
.NOFIND  MNOTE  20,' ITEMFIND FAILED FOR NAME  &C1  '
         MEXIT
.SRCH00  ANOP
&I       SETA  &I-1               DECREMENT ITTERATION COUNTER.
         AIF   (&I LT 0).NOFIND   IF COUNT HAS GONE TO ZERO.
&X       SETA  &X/2               HALVE INDEX VALUE.
&B       SETA  &ITEMNDX(&A)       GET SUBSCRIPT FROM INDEX TABLE.
&C2      SETC  '&ITEM(&B)'.'       '(1,8-K'&ITEM(&B))  PAD COMPARAND.
         AIF   (NOT &DIAGITF).COMPARE
 MNOTE *,'&ARG - &C2   ITRCTR = &I   PTR = &A&S &X   POS = &B'
.COMPARE AIF   ('&C1' LT '&C2').SRCHDWN   ARGUMENT LOWER, MOVE DOWN.
         AIF   ('&C1' GT '&C2').SRCHUP    ARGUMENT HIGHER, MOVE UP.
&ITEMXPT SETA  &B                 FOUND. SET INDEX POINTER FOR RETURN.
&ITEMFST(&I+1)  SETA  &ITEMFST(&I+1)+1
         MEXIT
.SRCHDWN ANOP
&A       SETA  &A-&X              CURRENT POINTER MINUS INDEX VALUE.
&S       SETC  '-'
         AIF   (&A LE &ITEMNBR).SRCH00    IF WITHIN BOUNDS OF TABLE.
.SRCHDN1 ANOP
&I       SETA  &I-1               DECREMENT ITTERATION COUNTER.
&X       SETA  &X/2               HALVE INDEX VALUE.
         AIF   (&I GE 0).SRCHDWN  IF ITTERATION COUNT NOT EXPIRED.
         MNOTE  20,' ITEMFIND FAILED FOR NAME  &C1  '
         MEND
         MACRO
         ITEMSORT  &DUMMY
         GBLA  &BITS(3000),&DB,&DT,&INITIAL
         GBLA  &ITEMITR,&ITEMFST(20),&ITEMNBR,&ITEMMDX
         GBLA  &ITEMNDX(3000),&ITEMXPT
         GBLA  &LABELNR,&LASTCC,&LB,&LBLCTR(100),&LPTR,&LT
         GBLA  &NRENTS,&SHIFT(3000)
         GBLB  &DIAGITF,&DIAGLIN,&DIAGSET,&DIAGTST,&FSW,&TEST
         GBLC  &CARRCON,&CSECT,&DSECT,&ITEM(3000)
         GBLC  &LABELS(3000),&LBL(100),&NRENTSX
         LCLA  &R,&ZI,&I,&A1,&A2,&TEMP
         LCLB  &SR,&GOTO,&TB
         LCLB   &SW(4000)
         LCLC  &C1,&C2
         ACTR   200000
&A1      SETA  0
         AIF   (&ITEMITR EQ 0).LOOP0   TEST FOR RE-ENTRY.
 MNOTE   0,'ITEMSORT MACRO OCCURRS MORE THAN ONCE. TABLE NOT RESORTED.'
         MEXIT
.LOOP0   ANOP
&A1      SETA  &A1+1
&ITEMNDX(&A1) SETA &A1
         AIF   (&A1 LT &ITEMNBR).LOOP0
         AIF   (&ITEMNBR LT 2).MEXIT
&A1      SETA  &ITEMNBR/2         HALF OF TOTAL ENTRIES.
&A2      SETA  0
.LOOP1   ANOP
&A2      SETA  &A2+1
&SW(&A2) SETB  1                  SET FIRST HALF OF SWITCHES TO 1.
         AIF   (&A2 LT &A1).LOOP1
.LOOP2   ANOP
&A2      SETA  &A2+1
&SW(&A2) SETB  0                  SET SECOND HALF TO ZERO.
         AIF   (&A2 LT &ITEMNBR).LOOP2
&R       SETA  0                  SET R TO FIRST TRIAL ITEM.
&ZI      SETA  &ITEMNBR-1         SET ZI TO LAST ITEM.
&I       SETA  &ZI-1
.T3      ANOP
&SR      SETB  (&SW(&R+1))        GET FLAG, WHICH WAY TO GO?
&R       SETA  (&R*2)+1+&SR       R=2R+(1 OR 2)
         AIF   (&R LE &I).T3
.T4      ANOP
&R       SETA  (&R-1)/2           R=(R-1)/2
&SR      SETB  (&SW(&R+1))        GET SUBTREE SELECT FLAG.
         AIF   (&SR EQ 0).T7
         AIF   (&GOTO EQ 0).T5
.T7      ANOP
&A1      SETA  &ITEMNDX(&R+1)
&A2      SETA  &ITEMNDX(&ZI+1)
&C1      SETC  '&ITEM(&A1)'.'       '(1,8-K'&ITEM(&A1))
&C2      SETC  '&ITEM(&A2)'.'       '(1,8-K'&ITEM(&A2))
         AIF   ('&C1' LT '&C2').T8
.T9      ANOP
&TEMP    SETA  &ITEMNDX(&R+1)     Z(R) TO TEMP.
&TB      SETB  (&SW(&R+1))
&ITEMNDX(&R+1) SETA &ITEMNDX(&ZI+1)    Z(I) TO Z(R)
&SW(&R+1) SETB (&SW(&ZI+1))
&ITEMNDX(&ZI+1) SETA &TEMP        TEMP TO Z(I)
&SW(&ZI+1) SETB (&TB)
&SR      SETB  (&SR EQ 0)
&SW(&R+1) SETB (&SR)
.T8      AIF   (&R GT 0).T4
&GOTO    SETB  1                  SET 'GO TO' T7
&ZI      SETA  &ZI-1
&I       SETA  &I-1
         AIF   (&I GE 0).T3
.MEXIT   ANOP
&ITEMITR SETA 1
&ITEMMDX SETA 1
.ITRLOOP ANOP
&ITEMITR SETA &ITEMITR+1
&ITEMMDX SETA &ITEMMDX+&ITEMMDX
         AIF  (&ITEMMDX LT &ITEMNBR).ITRLOOP
&ITEMITR SETA &ITEMITR-1
&ITEMMDX SETA &ITEMMDX/2
&A1      SETA &ITEMNBR
&A2      SETA &ITEMMDX
&TEMP    SETA &ITEMITR
 MNOTE *,' ITEMS = &A1, MAX INDEX = &A2, ITTERATION COUNT = &TEMP'
         MEXIT
.T5      ANOP
&TEMP    SETA  &ITEMNDX(&R+1)     Z(R) TO TEMP.
&TB      SETB  (&SW(&R+1))
&ITEMNDX(&R+1) SETA &ITEMNDX(&ZI+1)    Z(I) TO Z(R)
&SW(&R+1) SETB (&SW(&ZI+1))
&ITEMNDX(&ZI+1) SETA &TEMP        TEMP TO Z(I)
&SW(&ZI+1) SETB (&TB)
&SR      SETB  (&SR EQ 0)
&SW(&R+1) SETB (&SR)
         AGO   .T3
         MEND
           MACRO
&NAME    LABEL &LABEL1,&LABEL2,&LABEL3,&LABEL4,&LABEL5,&LABEL6,        C
               &LABEL7,&LABEL8
.*                                 THIS MACRO ALLOWS LABELS TO
.*                                 BE SPECIFIED FOR A GIVEN LINE. THE
.*                                 LABELS SHOULD BE ENCLOSED IN QUOTA-
.*                                 TION MARKS. THE COLUMN AND LINE END
.*                                 CONTROLS WILL BE INSERTED BY THE
.*                                 MACRO. OMITTED OPERANDS MEAN NO
.*                                 LABEL REQUIRED FOR RESPECTIVE
.*                                 COLUMN.
         GBLA  &BITS(3000),&DB,&DT,&INITIAL
         GBLA  &ITEMITR,&ITEMFST(20),&ITEMNBR,&ITEMMDX
         GBLA  &ITEMNDX(3000),&ITEMXPT
         GBLA  &LABELNR,&LASTCC,&LB,&LBLCTR(100),&LPTR,&LT
         GBLA  &NRENTS,&SHIFT(3000)
         GBLB  &DIAGITF,&DIAGLIN,&DIAGSET,&DIAGTST,&FSW,&TEST
         GBLC  &CARRCON,&CSECT,&DSECT,&ITEM(3000)
         GBLC  &LABELS(3000),&LBL(100),&NRENTSX
         LCLC  &MARGIN,&TACK
         LCLC  &TEXT
         LCLA  &OP,&K,&START,&NRCHAR,&REMAIN
         AIF   (&INITIAL EQ 0).DIAGCLR
         AIF   (&DIAGTST EQ 0).DIAGCLR
         AIF   (&DIAGLIN EQ 1).DIAGCLR
         MNOTE '**NO LINE ASSOCIATED WITH PREVIOUS LABEL**'
***** THE FOLLOWING GENERATED FOR TEST PURPOSES *****
*        LINE
         LINE
.DIAGCLR ANOP
&DIAGSET SETB  0
&DIAGLIN SETB  0
&MARGIN  SETC  '*'
         AIF   ('&NAME' EQ '').LOOPOUT
&LPTR    SETA  &LPTR+1
&LBL(&LPTR) SETC '&NAME'
&LBLCTR(&LPTR) SETA &LABELNR+1
.LOOPOUT ANOP
&OP      SETA  &OP+1
&K       SETA  K'&SYSLIST(&OP)
         AIF (&K GE 2).NORM
&K       SETA  2
.NORM    ANOP
&START   SETA  2
         AIF (&OP LT N'&SYSLIST).NOTLAST
&MARGIN  SETC  '$'
.NOTLAST ANOP
&NRCHAR  SETA  8
&TACK    SETC  ''
.LOOPIN  ANOP
&REMAIN  SETA  &K-&START
         AIF (&REMAIN GE 8).MORE
&TACK    SETC  '&MARGIN'
&NRCHAR  SETA  &REMAIN
.MORE    ANOP
&TEXT    SETC  ''
         AIF (&REMAIN EQ 0).ENDTEXT
&TEXT    SETC  '&SYSLIST(&OP)'(&START,&NRCHAR)
.ENDTEXT ANOP
&LABELNR SETA  &LABELNR+1
&LABELS(&LABELNR) SETC '&TEXT'.'&TACK'
&START   SETA  &START+8
         AIF ('&TACK' EQ '').LOOPIN
         AIF ('&TACK' EQ '*').LOOPOUT
         MEND
         MACRO
&NAME    LINE  &DATA,&LABEL,&SKIP=
.*                            THIS MACRO ESTABLISHES THE MARGINS OR
.*                                 COLUMN SETTINGS FOR EACH LINE. IT
.*                                 GENERATES NECESSARY CARRIAGE CONTROL
.*                                 ENTRIES. LASTLY IT DETERMINES THE
.*                                 NUMBER OF ENTRIES ASSOCIATED WITH
.*                                 THE PREVIOUS LINE AND STORES THAT #
.*                                 INTO THE APPROPRIATE BYTE.
.*                            &DATA(1) - CHARACTER POSITION TO BEGIN
.*                                 DATA.
.*                            &DATA(2) - # OF SPACES BETWEEN SUCCESSIVE
.*                                 DATA COLUMN STARTING CHARACTERS.
.*                            &LABEL(1) - CHAR. POS. TO BEGIN LABELS.
.*                            &LABEL(2) - # SPACES BETWEEN LINE'S LABEL
.*                                 STARTING CHARACTERS.
.*                            &SKIP= - # OF LINES TO ADVANCE CARRIAGE
.*                                 TO BEGIN NEXT PRINTED LINE.
.*                            NEW ENTRIES ARE GENERATED ONLY WHEN
.*                                 NECESSARY. OMISSION OF ITEMS MEANS
.*                                 THEY HAVE NOT CHANGED SINCE PREVIOUS
.*                                 SETTINGS. A LINE MACRO IS REQUIRED
.*                                 FOR EACH PRINTED LINE. IF NO SETTING
.*                                 CHANGES ARE REQUIRED ALL OPERANDS
.*                                 ARE OMITTED IN WHICH CASE ONLY THE
.*                                 # OF ENTRIES FOR THE PREVIOUS LINE
.*                                 IS COMPUTED. THIS MACRO MUST BE THE
.*                                 FIRST MACRO INSTRUCTION ISSUED FOR
.*                                 THE SUBJECT LINE
         GBLA  &BITS(3000),&DB,&DT,&INITIAL
         GBLA  &ITEMITR,&ITEMFST(20),&ITEMNBR,&ITEMMDX
         GBLA  &ITEMNDX(3000),&ITEMXPT
         GBLA  &LABELNR,&LASTCC,&LB,&LBLCTR(100),&LPTR,&LT
         GBLA  &NRENTS,&SHIFT(3000)
         GBLB  &DIAGITF,&DIAGLIN,&DIAGSET,&DIAGTST,&FSW,&TEST
         GBLC  &CARRCON,&CSECT,&DSECT,&ITEM(3000)
         GBLC  &LABELS(3000),&LBL(100),&NRENTSX
         LCLA  &S
         AIF   (&INITIAL EQ 0 OR &DIAGTST EQ 0).DIAGSET
         AIF   (&DIAGSET EQ 0).DIAGSET
         MNOTE '**NO LABEL ASSOCIATED WITH LAST SET**'
***** THE FOLLOWING GENERATED FOR TEST PURPOSES *****
*        LABEL '%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%'
               LABEL '%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%'
.DIAGSET ANOP
&DIAGSET SETB  1
&DIAGLIN SETB  1
&NAME    DS    0C
         AIF   (&INITIAL EQ 0).FIRSTLN
         LINEND
         AGO   .NTFIRST
.FIRSTLN ANOP
&NRENTSX SETC  'N&SYSNDX'
&INITIAL SETA  1
N&SYSNDX EQU   *
.NTFIRST ANOP
         DC    AL1(0)
         AIF   ('&DATA(1)' EQ '').CKDTABS
         AIF   (&DATA(1) EQ &DB).CKDTABS
&DB      SETA  &DATA(1)
         AGO   .AA
.CKDTABS AIF   ('&DATA(2)' EQ '').NCDATA
         AIF   (&DATA(2) EQ &DT).NCDATA
         AGO   .CC
.AA      AIF   ('&DATA(2)' EQ '').BB
         AIF   (&DATA(2) EQ &DT).BB
.CC      ANOP
&DT      SETA  &DATA(2)
.BB      DC    XL2'FFFE'
         DC    FL1'&DB'
         DC    FL1'&DT'
&NRENTS  SETA  &NRENTS+1
.NCDATA  ANOP
         AIF   ('&LABEL(1)' EQ '').CKLTABS
         AIF   (&LABEL(1) EQ &LB).CKLTABS
&LB      SETA  &LABEL(1)
         AGO   .AAA
.CKLTABS AIF   ('&LABEL(2)' EQ '').NCLABEL
         AIF   (&LABEL(2) EQ &LT).NCLABEL
         AGO   .CCC
.AAA     AIF   ('&LABEL(2)' EQ '').BBB
         AIF   (&LABEL(2) EQ &LT).BBB
.CCC     ANOP
&LT      SETA  &LABEL(2)
.BBB     DC    XL2'FFFF'
         DC    FL1'&LB'
         DC    FL1'&LT'
&NRENTS  SETA  &NRENTS+1
.NCLABEL ANOP
         AIF   ('&SKIP' NE '').CONT
         AIF   (&TEST EQ 0).NOCHANG
         AGO   .DEFALTA
.CONT    ANOP
         AIF   (&TEST EQ 0).AB
         AIF   ('&SKIP' EQ 'E').AB
&S       SETA  &SKIP
.DEFAULT ANOP
         AIF   (&SKIP EQ &LASTCC).DEFALTA
         ORG   &CARRCON+3
         DC    AL.3(0),AL.2(&S),AL.3(1)
         ORG
&LASTCC  SETA  &S
.DEFALTA ANOP
&TEST    SETB  0
         AGO   .DD
.AB      AIF   ('&SKIP' NE 'E').ABB
A&SYSNDX DC    X'FFFB8B00'              EJECT
&LASTCC  SETA  184
&TEST    SETB  1
         AGO   .ABC
.ABB     AIF   (&SKIP EQ &LASTCC).NOCHANG
A&SYSNDX DC    XL2'FFFB'
         DC    AL.3(0),AL.2(&SKIP),AL.3(1)
         DC    AL.3(0),AL.2(&SKIP),AL.3(1)
&LASTCC  SETA  &SKIP
&TEST    SETB  1
.ABC     ANOP
&CARRCON SETC  'A&SYSNDX'
&NRENTS  SETA  &NRENTS+1
.DD      ANOP
.NOCHANG ANOP
         MEND
         MACRO
         LINEND ,
.*                                 THIS MACRO IS USED ONLY BY THE LINE
.*                                 MACRO TO SET THE NUMBER OF ENTRIES
.*                                 ASSOCIATED WITH EACH LINE.
         GBLA  &BITS(3000),&DB,&DT,&INITIAL
         GBLA  &ITEMITR,&ITEMFST(20),&ITEMNBR,&ITEMMDX
         GBLA  &ITEMNDX(3000),&ITEMXPT
         GBLA  &LABELNR,&LASTCC,&LB,&LBLCTR(100),&LPTR,&LT
         GBLA  &NRENTS,&SHIFT(3000)
         GBLB  &DIAGITF,&DIAGLIN,&DIAGSET,&DIAGTST,&FSW,&TEST
         GBLC  &CARRCON,&CSECT,&DSECT,&ITEM(3000)
         GBLC  &LABELS(3000),&LBL(100),&NRENTSX
         ORG   &NRENTSX
         DC    FL1'&NRENTS'
         ORG
&NRENTS  SETA  0
B&SYSNDX EQU   *
&NRENTSX SETC  'B&SYSNDX'
         MEND
         MACRO
         LSTART ,
.*                            THIS MACRO IS ISSUED WHEN THE LABEL AREA
.*                                 OF THE TABLE IS TO BEGIN.
         GBLA  &BITS(3000),&DB,&DT,&INITIAL
         GBLA  &ITEMITR,&ITEMFST(20),&ITEMNBR,&ITEMMDX
         GBLA  &ITEMNDX(3000),&ITEMXPT
         GBLA  &LABELNR,&LASTCC,&LB,&LBLCTR(100),&LPTR,&LT
         GBLA  &NRENTS,&SHIFT(3000)
         GBLB  &DIAGITF,&DIAGLIN,&DIAGSET,&DIAGTST,&FSW,&TEST
         GBLC  &CARRCON,&CSECT,&DSECT,&ITEM(3000)
         GBLC  &LABELS(3000),&LBL(100),&NRENTSX
         LCLA  &NDX,&CTR
         ACTR  500000
         AIF   (&DIAGTST EQ 0).NODIAG
         AIF   (&DIAGSET EQ 0).NODIAG
         MNOTE '**NO LABEL ASSOCIATED WITH LAST SET**'
***** THE FOLLOWING GENERATED FOR TEST PURPOSES *****
*        LABEL '%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%'
               LABEL '%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%'
.NODIAG  ANOP
         LINEND
&CTR     SETA  1
.LOOP    ANOP
&NDX     SETA  &NDX+1
         AIF   (&LBLCTR(&CTR) NE &NDX).NOLBL
&LBL(&CTR) DC  C'&LABELS(&NDX)'
&CTR     SETA  &CTR+1
         AGO   .LOOPCTL
.NOLBL   ANOP
         DC    C'&LABELS(&NDX)'
.LOOPCTL AIF   (&NDX LT &LABELNR).LOOP
         MEND
         MACRO
&NAME    ROUTINE &LOGITEM,&RNAME
         GBLA  &BITS(3000),&DB,&DT,&INITIAL
         GBLA  &ITEMITR,&ITEMFST(20),&ITEMNBR,&ITEMMDX
         GBLA  &ITEMNDX(3000),&ITEMXPT
         GBLA  &LABELNR,&LASTCC,&LB,&LBLCTR(100),&LPTR,&LT
         GBLA  &NRENTS,&SHIFT(3000)
         GBLB  &DIAGITF,&DIAGLIN,&DIAGSET,&DIAGTST,&FSW,&TEST
         GBLC  &CARRCON,&CSECT,&DSECT,&ITEM(3000)
         GBLC  &LABELS(3000),&LBL(100),&NRENTSX
         AIF   (&DIAGTST EQ 0).NOMSG
         AIF   (&INITIAL EQ 0).NOMSG
         AIF   (&DIAGLIN EQ 1).NOMSG
         MNOTE '**NO LINE ASSOCIATED WITH THIS ROUTINE**'
*****THE FOLLOWING GENERATED FOR TEST PURPOSES*****
*        LINE
         LINE
.NOMSG   ANOP
&NAME    DC    AL.12(&LOGITEM-&DSECT),XL.4'D'
         DC    AL2(&RNAME-&CSECT)
&NRENTS  SETA  &NRENTS+1
         MEND
         MACRO
         SPECIAL &ROUTINE,&PARAM,&SPACE=
.*                            THIS MACRO GENERATES A SPECIAL ROUTINE
.*                                 ENTRY TO BE PROCESSED BY THE SUM. M.
.*                            &ROUTINE - SYMBOL ON SPECIAL ROUTINE EWT.
.*                            &PARAM - AN 8 BIT BINARY REPRESENTATION
.*                                 TO OCCUPY THE 'MASK' FIELD BUT TO BE
.*                                 INTERPRETED AS AN ARGUMENT OF THE
.*                                 SPECIAL ROUTINE.
.*                            &SPACE - THE NUMBER OF 2BYTE COUNTERS TO
.*                                 ALLOCATE FOR REQUIRED PROCESSING.
         GBLC  &CSECT
         GBLA  &COUNTR
         LCLA  &ADD
         DC    AL1(128)
         DC    BL.8'&PARAM'
         DC    AL2(&ROUTINE-&CSECT)
         DC    AL2(&COUNTR)
&ADD     SETA  1
         AIF   ('&SPACE' EQ '').NORM
&ADD     SETA  &SPACE
.NORM    ANOP
&COUNTR  SETA  &COUNTR+&ADD
         MEND
         MACRO
         HEX   ,
.*                            THIS MACRO FACILITATES GENERATION OF THE
.*                                 TABLE ENTRIES SPECIFYING HEX TYPE
.*                                 CONVERSIONS.
.*                            &SYSLIST(&OP,1) - NAME OF DATA ITEM TO BE
.*                                 CONVERTED
.*                            &SYSLIST(&OP,2) - # OF SPACES TO SKIP ON
.*                                 MULTIPLE PRINT OR NBR OF SPACES TO
.*                                 BACK UP FROM COLUMN FOR START OF
.*                                 PRINTING. THE LETTER B PRECEEDS THE
.*                                 NUMBER (B8) IF THE LATTER OPTION IS
.*                                 DESIRED. OMISSION OF THIS OPERAND
.*                                 FORCES OPTION 2 WITH BACKUP SPACING
.*                                 EQUAL TO THE NUMBER OF BYTES SPECI-
.*                                 FIED BY THE NEXT OPERAND (TWICE THIS
.*                                 NUMBER IF SUFFIX IS EXPLICITLY OR
.*                                 IMPLICITLY B).
.*                            &SYSLIST(&OP,3) - NUMBER OF BYTES TO
.*                                 PROCESS. THIS NUMBER IS SUFFIXED
.*                                 WITH AN L,R, OR B TO STIPULATE
.*                                 PRINTING OF THE LEFT HALF, RIGHT
.*                                 HALF, OR BOTH HALVES OF THE BYTE
.*                                 RESPECTIVELY. OMISSION OF THIS
.*                                 OPERAND DEFAULTS TO B WITH THE NUM-
.*                                 BER OF BYTES EQUAL TO THE ITEM LNGTH
.*                            A NEW ENTRY IS GENERATED ONLY WHEN NECES-
.*                                 SARY. THIS MACRO MUST BE THE FIRST
.*                                 MACRO INSTRUCTION ISSUED FOR THE
.*                                 SUBJECT LINE(S).
         GBLA  &BITS(3000),&DB,&DT,&INITIAL
         GBLA  &ITEMITR,&ITEMFST(20),&ITEMNBR,&ITEMMDX
         GBLA  &ITEMNDX(3000),&ITEMXPT
         GBLA  &LABELNR,&LASTCC,&LB,&LBLCTR(100),&LPTR,&LT
         GBLA  &NRENTS,&SHIFT(3000)
         GBLB  &DIAGITF,&DIAGLIN,&DIAGSET,&DIAGTST,&FSW,&TEST
         GBLC  &CARRCON,&CSECT,&DSECT,&ITEM(3000)
         GBLC  &LABELS(3000),&LBL(100),&NRENTSX
         LCLB  &B,&SUB
         LCLA  &IBITS,&ISHIFT,&K,&T,&CODE,&BYTESP,&OP
         LCLC  &S,&LETTER,&ARG
       ACTR  500000
         AIF   (&DIAGTST EQ 0).NOMSG
         AIF   (&INITIAL EQ 0).NOMSG
         AIF   (&DIAGLIN EQ 1).NOMSG
         MNOTE '**NO LINE ASSOCIATED WITH THIS DATA**'
*****THE FOLLOWING GENERATED FOR TEST PURPOSES*****
*        LINE
         LINE
.NOMSG   ANOP
         AIF   (K'&SYSLIST(1) EQ K'&SYSLIST(1,1)).LOOP
&SUB     SETB  1
.LOOP    ANOP
&OP      SETA  &OP+1
&ARG     SETC  '&SYSLIST(&OP,1)'
         ITEMFIND  &ARG
         AIF   (&ITEMXPT EQ 0).MEXIT
.FOUND   ANOP
&ISHIFT  SETA  &SHIFT(&ITEMXPT)
&IBITS   SETA  &BITS(&ITEMXPT)
         AIF   (&ISHIFT EQ 0 OR &ISHIFT EQ 4).ALIGN
.ERR     MNOTE '**DATA NOT ALLIGNED ON HEX OR BYTE BOUNDARY**'
.MEXIT   MEXIT
.ALIGN   ANOP
&CODE    SETA  1
         AIF   (&SUB EQ 1).SUBA
&K       SETA  K'&SYSLIST(3)
         AGO   .SUBB
.SUBA    ANOP
&K       SETA  K'&SYSLIST(&OP,3)
.SUBB    ANOP
         AIF   (&K EQ 1).ERR3
         AIF   (&IBITS-(&IBITS/4)*4 EQ 0).OK
         MNOTE '**BIT LENGTH SPECIFICATION INCONSISTENT WITH CONTROL**'
         MEXIT
.OK      AIF   (&SUB EQ 1).SUBC
         AIF   ('&SYSLIST(3)' EQ '').USEDEFN
&LETTER  SETC  '&SYSLIST(3)'(&K,1)
&S       SETC  '&SYSLIST(3)'(1,&K-1)
         AGO   .SUBD
.SUBC    ANOP
         AIF   ('&SYSLIST(&OP,3)' EQ '').USEDEFN
&LETTER  SETC  '&SYSLIST(&OP,3)'(&K,1)
&S       SETC  '&SYSLIST(&OP,3)'(1,&K-1)
.SUBD    ANOP
&BYTESP  SETA  &S
         AIF   ('&LETTER' EQ 'B').BOTH
         AIF   ('&LETTER' EQ 'L').LEFT
         AIF   ('&LETTER' EQ 'R').RIGHT
.ERR3    MNOTE '**PARAMETER 3 INCOMPLETE-DSGEN DEFINITION USED**'
         AGO   .USEDEFN
.RIGHT   ANOP
&CODE    SETA  2
         AGO   .L
.LEFT    ANOP
&CODE    SETA  1
         AGO   .L
.USEDEFN ANOP
&BYTESP  SETA  &IBITS/8
.BOTH    AIF   (&ISHIFT NE 0).ERR
&CODE    SETA  3
&T       SETA  &BYTESP*2-1
&S       SETC  '&T'
.OK2     AIF   (&ISHIFT EQ 0).L
&CODE    SETA  2
.L       ANOP
&B       SETB  1
         AIF   (&SUB EQ 1).SUBE
         AIF   ('&SYSLIST(2)' EQ '').BACKUP
&K       SETA  K'&SYSLIST(2)
&B       SETB  ('&SYSLIST(2)'(1,1) EQ 'B')
&S       SETC  '&SYSLIST(2)'(&B+1,&K-&B)
         AGO   .SUBF
.SUBE    ANOP
         AIF   ('&SYSLIST(&OP,2)' EQ '').BACKUP
&K       SETA  K'&SYSLIST(&OP,2)
&B       SETB  ('&SYSLIST(&OP,2)'(1,1) EQ 'B')
&S       SETC  '&SYSLIST(&OP,2)'(&B+1,&K-&B)
.SUBF    ANOP
.BACKUP  ANOP
&NRENTS  SETA  &NRENTS+1
         AIF   (&BYTESP GT 0 AND &BYTESP LT 16).SUB0
         MNOTE '**NO. OF BYTES OUTSIDE RANGE OF 1-15**'
         MEXIT
.SUB0    AIF   (&SUB EQ 1).SUBG
         DC    AL.12(&SYSLIST(1)-&DSECT),XL.4'A'
         AGO   .SUBH
.SUBG    ANOP
         DC    AL.12(&SYSLIST(&OP,1)-&DSECT),XL.4'A'
.SUBH    ANOP
         DC    BL.1'&B',FL.7'&S',AL.4(&BYTESP),FL.4'&CODE'
.OUT     ANOP
&ITEMXPT     SETA  0
         AIF   (&SUB EQ 0).OUTA
         AIF   (&OP LT N'&SYSLIST).LOOP
.OUTA    ANOP
         MEND
         MACRO
         SUM   &LOGITEM,&MASK
.*                            THIS MACRO GENERATES A NORMAL EDIT ENTRY
.*                                 FOR PROCESSING BY THE SUMMARY MODULE
.*                            &LOGITEM - NAME OF DATA ITEM TO BE SUMMED
.*                            &MASK - BYTE MASK FOR BITS TO BE TESTED.
.*                                 THIS OPERAND SHOULD BE OMITTED FOR
.*                                 SINGLE BIT ITEMS IN WHICH CASE THE
.*                                 MASK WILL BE SET ACCORDING TO THE
.*                                 OFF BYTE BIT DISPLACEMENT OF THE
.*                                 ITEM AS DEFINED BY THE MACRO 'DSGEN'
         GBLA  &COUNTR,&ITEMNBR,&BITS(3000),&SHIFT(3000)
         GBLC  &ITEM(3000),&DSECT
         LCLA  &IBITS,&NDX,&ISHIFT,&M,&BITNBR
.LOOP    ANOP
&NDX     SETA  &NDX+1
         AIF   ('&ITEM(&NDX)' EQ '&LOGITEM').FOUND
         AIF   (&NDX LT &ITEMNBR).LOOP
         MNOTE *,'LOGITEM NOT FOUND'
         MEXIT
.FOUND   ANOP
&ISHIFT  SETA  &SHIFT(&NDX)
&IBITS   SETA  &BITS(&NDX)
         AIF   (&IBITS EQ 1).FORM1      TEST FOR OLD FORM
         AIF   ('&MASK' NE '').FORM1    TEST FOR MASK
         AIF   (&IBITS+&ISHIFT GT 8).MSG     TEST FOR MORE THAN EIGHT
         DC    AL.1(0),AL.3(&ISHIFT),AL.4(&IBITS)
         DC    AL1(0)
         AGO   .ITEM
.MSG     MNOTE '**BITS GREATER THAN 8**'
         MEXIT
.FORM1   ANOP
         DC    AL1(0)
         AIF   ('&MASK' EQ '').FORM
         DC    B'&MASK'
         AGO   .ITEM
.FORM    ANOP
&BITNBR  SETA  &ISHIFT-7
&BITNBR  SETA  0-&BITNBR
&M       SETA  1
.LOOP2   ANOP
         AIF   (&BITNBR EQ 0).GOTIT
&M       SETA  &M*2
&BITNBR  SETA  &BITNBR-1
         AGO   .LOOP2
.GOTIT   ANOP
         DC    AL1(&M)
.ITEM    DC    AL2(&LOGITEM-&DSECT)
         DC    AL2(&COUNTR)
&COUNTR  SETA  &COUNTR+1
         MEND
         TITLE 'IFCEOAK1 - EDIT TABLE 2 FOR 3850'
         GBLC  &DSECT,&CSECT
IFCEOAK1 CSECT
&CSECT   SETC  'IFCEOAK1'
&DSECT   SETC  'OAK1'
OAK1     DSECT
         DSGEN (CLASSRC,8),(SYSREL,8),(SWITCHES,16),(SPARES,32)
         DSGEN (DAY,32),(TIME,32)
         DSGEN (SPARE1,8),(CPUSER,24),(MODEL,16),(MCEL,16)
         DSGEN (JOBID,64)
         DSGEN (FCCWCC,8),(FCCWDA,24)
         DSGEN (FCCWFL,8),(FCCW,8),(FCCWCT,16)
         DSGEN (CSWUS1,8),(CSWUS2,24)
         DSGEN (CSWUS3,8),(CSWUS4,8),(CSWUS5,16)
         DSGEN (DDCOUNT,8),(SECCUA,24),(DEVTYPE,32)
         DSGEN (SDRCOUNT,8),(PRICUA,24),(IORETRYS,16),(SNSCOUNT,16)
         DSGEN (SNB00,1),(SNB01,1),(SNB02,1),(SNB03,1),(SNB04,1),      C
               (SNB05,1),(SNB06,1),(SNB07,1),(SNB10,1),(SNB11,1),      C
               (SNB12,1),(SNB13,1),(SNB14,1),(SNB15,1),(SNB16,1),      C
               (SNB17,1),(SNB20,1),(SNB21,1),(SNB22,1),(SNB23,1),      C
               (SNB24,1),(SNB25,1),(SNB26,1),(SNB27,1),(SNB30,1),      C
               (SNB31,1),(SNB32,1),(SNB33,1),(SNB34,1),(SNB35,1),      C
               (SNB36,1),(SNB37,1)
         DSGEN (SNB40,1),(SNB41,1),(SNB42,1),(SNB43,1),(SNB44,1),      C
               (SNB45,1),(SNB46,1),(SNB47,1),(SNB50,1),(SNB51,1),      C
               (SNB52,1),(SNB53,1),(SNB54,1),(SNB55,1),(SNB56,1),      C
               (SNB57,1),(SNB60,1),(SNB61,1),(SNB62,1),(SNB63,1),      C
               (SNB64,1),(SNB65,1),(SNB66,1),(SNB67,1),(SNB70,1),      C
               (SNB71,1),(SNB72,1),(SNB73,1),(SNB74,1),(SNB75,1),      C
               (SNB76,1),(SNB77,1)
         DSGEN (SNB80,1),(SNB81,1),(SNB82,1),(SNB83,1),(SNB84,1),      C
               (SNB85,1),(SNB86,1),(SNB87,1),(SNB90,1),(SNB91,1),      C
               (SNB92,1),(SNB93,1),(SNB94,1),(SNB95,1),(SNB96,1),      C
               (SNB97,1),(SNB100,1),(SNB101,1),(SNB102,1),(SNB103,1),  C
               (SNB104,1),(SNB105,1),(SNB106,1),(SNB107,1),(SNB110,1), C
               (SNB111,1),(SNB112,1),(SNB113,1),(SNB114,1),(SNB115,1), C
               (SNB116,1),(SNB117,1)
         DSGEN (SNB120,1),(SNB121,1),(SNB122,1),(SNB123,1),(SNB124,1), C
               (SNB125,1),(SNB126,1),(SNB127,1),(SNB130,1),(SNB131,1), C
               (SNB132,1),(SNB133,1),(SNB134,1),(SNB135,1),(SNB136,1), C
               (SNB137,1),(SNB140,1),(SNB141,1),(SNB142,1),(SNB143,1), C
               (SNB144,1),(SNB145,1),(SNB146,1),(SNB147,1),(SNB150,1), C
               (SNB151,1),(SNB152,1),(SNB153,1),(SNB154,1),(SNB155,1), C
               (SNB156,1),(SNB157,1)
         DSGEN (SNB160,1),(SNB161,1),(SNB162,1),(SNB163,1),(SNB164,1), C
               (SNB165,1),(SNB166,1),(SNB167,1),(SNB170,1),(SNB171,1), C
               (SNB172,1),(SNB173,1),(SNB174,1),(SNB175,1),(SNB176,1), C
               (SNB177,1),(SNB180,1),(SNB181,1),(SNB182,1),(SNB183,1), C
               (SNB184,1),(SNB185,1),(SNB186,1),(SNB187,1),(SNB190,1), C
               (SNB191,1),(SNB192,1),(SNB193,1),(SNB194,1),(SNB195,1), C
               (SNB196,1),(SNB197,1)
         DSGEN (SNB200,1),(SNB201,1),(SNB202,1),(SNB203,1),(SNB204,1), C
               (SNB205,1),(SNB206,1),(SNB207,1),(SNB210,1),(SNB211,1), C
               (SNB212,1),(SNB213,1),(SNB214,1),(SNB215,1),(SNB216,1), C
               (SNB217,1),(SNB220,1),(SNB221,1),(SNB222,1),(SNB223,1), C
               (SNB224,1),(SNB225,1),(SNB226,1),(SNB227,1),(SNB230,1), C
               (SNB231,1),(SNB232,1),(SNB233,1),(SNB234,1),(SNB235,1), C
               (SNB236,1),(SNB237,1)
         DSGEN (SNB240,1),(SNB241,1),(SNB242,1),(SNB243,1),(SNB244,1), C
               (SNB245,1),(SNB246,1),(SNB247,1),(SNB250,1),(SNB251,1), C
               (SNB252,1),(SNB253,1),(SNB254,1),(SNB255,1),(SNB256,1), C
               (SNB257,1),(SNB260,1),(SNB261,1),(SNB262,1),(SNB263,1), C
               (SNB264,1),(SNB265,1),(SNB266,1),(SNB267,1),(SNB270,1), C
               (SNB271,1),(SNB272,1),(SNB273,1),(SNB274,1),(SNB275,1), C
               (SNB276,1),(SNB277,1)
         DSGEN (SNB280,1),(SNB281,1),(SNB282,1),(SNB283,1),(SNB284,1), C
               (SNB285,1),(SNB286,1),(SNB287,1),(SNB290,1),(SNB291,1), C
               (SNB292,1),(SNB293,1),(SNB294,1),(SNB295,1),(SNB296,1), C
               (SNB297,1),(SNB300,1),(SNB301,1),(SNB302,1),(SNB303,1), C
               (SNB304,1),(SNB305,1),(SNB306,1),(SNB307,1),(SNB310,1), C
               (SNB311,1),(SNB312,1),(SNB313,1),(SNB314,1),(SNB315,1), C
               (SNB316,1),(SNB317,1)
         DS    4C
IFCEOAK1 CSECT
         USING *,R9
         USING OAK1,R2
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
L0       EQU   0
L1       EQU   1
L2       EQU   2
L3       EQU   3
L4       EQU   4
L5       EQU   5
L6       EQU   6
L7       EQU   7
L8       EQU   8
L9       EQU   9
L10      EQU   10
L11      EQU   11
L12      EQU   12
L20      EQU   20
L46      EQU   46
L24      EQU   24
L29      EQU   29
L36      EQU   36
F5       EQU   X'04'
F4       EQU   X'08'
F3       EQU   X'10'
F2       EQU   X'20'
F1       EQU   X'40'
F0       EQU   X'80'
L19      EQU   19
         DC    A(ENTRIES)
         DC    CL8'IFCEOAK1'
XR9PTR   DC    F'0'
XLABELP  DC    F'0'
RETURN   LM    R5,R8,XSAVE              RESTORE REGS
         BR    R14                      RETURN
WORK     DC    D'0'
XSAVE    DC    5F'0'
NONE     DC    C'NONE'
CHARS    DC    C'0123456789ABCDEF'
RECTYP   DC    X'00'                    OBR/MDR RECORD ID SAVE @Y17BSPM
OBR      EQU   X'30'                    OBR RECORD ID          @Y17BSPM
MDR      EQU   X'90'                    MDR RECORD ID          @Y17BSPM
MDRADJ   EQU   X'20'                    MDR ADJUSTMENT FOR ADD @Y17BSPM
SPACER1  LA    R3,L1(R3)
         BR    R14
SPACER19 LA    R3,L19(R3)
         BR    R14
SKIPPER  BR    R14
BKSP1    BCTR  R3,0
         BR    R14
SETHEX   STM   R5,R8,XSAVE              SAVE REGS
         LA    R8,CHARS                 CHARACTER TABLE
         IC    R7,L0(R4)                PICK UP CHARACTER
         SLL   R7,L24                   MOVE TO HI R7
         SR    R6,R6                    CLEAR R6
         SLDL  R6,L4                    MOVE FOUR BITS
         AR    R6,R8                    ADD OFFSET & PTR
         MVC   L0(L1,R3),L0(R6)         MOVE TO LINE
         SR    R6,R6                    CLEAR R6
         SLDL  R6,L4                    MOVE LAST 4 BITS
         AR    R6,R8                    COMPUTE OFFSET
         MVC   L1(L1,R3),L0(R6)         MOVE LAST CHAR
         B     RETURN                   RETURN
OBRMDRCK STM   R5,R8,XSAVE              SAVE REGS              @Y17BSPM
         CLI   CLASSRC,OBR              TEST FOR OBR RECORD    @Y17BSPM
         BNE   MDRSETUP                 IF NO GO SET UP MDR    @Y17BSPM
         MVI   RECTYP,OBR               SET RECORD TYPE TO OBR @Y17BSPM
         B     RETURN                   RETURN                 @Y17BSPM
MDRSETUP MVI   RECTYP,MDR               SET RECORD TYPE TO MDR @Y17BSPM
         LA    R5,MDRADJ                GET ADJUSTMENT TO SNS  @Y17BSPM
         SR    R2,R5                    ADJUST FOR MDR RECORD  @Y17BSPM
         B     RETURN                   RETURN                 @Y17BSPM
READJMDR STM   R5,R8,XSAVE              SAVE REGS              @Y17BSPM
         CLI   RECTYP,MDR               CHECK FOR MDR RECORD   @Y17BSPM
         BNE   RETURN                   RETURN                 @Y17BSPM
         LA    R2,MDRADJ(R2)            READJUST RECORD POINTER@Y17BSPM
         B     RETURN                   RETURN                 @Y17BSPM
ENTRIES  DS    0F
         DC    XL4'00000000'            FORMAT1
         DC    XL4'00000000'            FORMAT2
         DC    A(LABELS)                LABEL PTR
         DC    H'0'                     DISP
         LINE  SKIP=0                                          @Y17BSPM
         ROUTINE CLASSRC,OBRMDRCK                              @Y17BSPM
         LABEL ' '                                             @Y17BSPM
         LINE  (12,15),(3,15),SKIP=1
         ROUTINE SNB00,SETHEX
         ROUTINE SNB10,SETHEX
         ROUTINE SNB20,SETHEX
         ROUTINE SNB30,SETHEX
         ROUTINE SNB40,SETHEX
         ROUTINE SNB50,SETHEX
         ROUTINE SNB60,SETHEX
         ROUTINE SNB70,SETHEX
         LABEL 'BYTE 0','BYTE 1','BYTE 2','BYTE 3','BYTE 4','BYTE 5','BC
               YTE 6','BYTE 7'
         LINE  (13,15),(1,15),SKIP=1
         BIN   SNB00
         BIN   SNB10
         BIN   SNB20
         BIN   SNB30
         BIN   SNB40
         BIN   SNB50
         BIN   SNB60
         BIN   SNB70
         LABEL 'COMMAND REJ','MSG TO OPER','SSID CHAR 1','FORMAT 0',   C
               'BIT 0','BIT 0','BIT 0','BIT 0'
         LINE  (13,15),(1,15)
         BIN   SNB01
         BIN   SNB11
         BIN   SNB21
         BIN   SNB31
         BIN   SNB41
         BIN   SNB51
         BIN   SNB61
         BIN   SNB71
         LABEL 'INTERVN REQ','UNIT OFFLIN','SSID CHAR 1','FORMAT 1',   C
               'BIT 1','BIT 1','BIT 1','BIT 1'
         LINE  (13,15),(1,15)
         BIN   SNB02
         BIN   SNB12
         BIN   SNB22
         BIN   SNB32
         BIN   SNB42
         BIN   SNB52
         BIN   SNB62
         BIN   SNB72
         LABEL 'BUS OUT PAR','HOST CNL ID','SSID CHAR 1','FORMAT 2',   C
               'BIT 2','BIT 2','BIT 2','BIT 2'                 @Y17BSPM
         LINE  (13,15),(1,15)
         BIN   SNB03
         BIN   SNB13
         BIN   SNB23
         BIN   SNB33
         BIN   SNB43
         BIN   SNB53
         BIN   SNB63
         BIN   SNB73
         LABEL 'EQUIPMNT CK','HOST CNL ID','SSID CHAR 1','FORMAT 3',   C
               'BIT 3','BIT 3','BIT 3','BIT 3'                 @Y17BSPM
         LINE  (13,15),(1,15)
         BIN   SNB04
         BIN   SNB14
         BIN   SNB24
         BIN   SNB34
         BIN   SNB44
         BIN   SNB54
         BIN   SNB64
         BIN   SNB74
         LABEL 'UNUSED','SSID CHAR 0','SSID CHAR 2','FORMAT 4',        C
               'BIT 4','BIT 4','BIT 4','BIT 4'
         LINE  (13,15),(1,15)
         BIN   SNB05
         BIN   SNB15
         BIN   SNB25
         BIN   SNB35
         BIN   SNB45
         BIN   SNB55
         BIN   SNB65
         BIN   SNB75
         LABEL 'HOST RETRY','SSID CHAR 0','SSID CHAR 2','FORMAT 5',    C
               'BIT 5','BIT 5','BIT 5','BIT 5'                 @Y17BSPM
         LINE  (13,15),(1,15)
         BIN   SNB06
         BIN   SNB16
         BIN   SNB26
         BIN   SNB36
         BIN   SNB46
         BIN   SNB56
         BIN   SNB66
         BIN   SNB76
         LABEL 'UNUSED','SSID CHAR 0','SSID CHAR 2','UNSUC RETRY',     C
               'BIT 6','BIT 6','BIT 6','BIT 6'                 @Y17BSPM
         LINE  (13,15),(1,15)
         BIN   SNB07
         BIN   SNB17
         BIN   SNB27
         BIN   SNB37
         BIN   SNB47
         BIN   SNB57
         BIN   SNB67
         BIN   SNB77
         LABEL 'ENVMTL DATA','SSID CHAR 0','SSID CHAR 2','SUCC RETRY', C
               'BIT 7','BIT 7','BIT 7','BIT 7'
         LINE  ,(1,1)
         LABEL ' '
         LINE  (12,15),(3,15),SKIP=1
         ROUTINE SNB80,SETHEX
         ROUTINE SNB90,SETHEX
         ROUTINE SNB100,SETHEX
         ROUTINE SNB110,SETHEX
         ROUTINE SNB120,SETHEX
         ROUTINE SNB130,SETHEX
         ROUTINE SNB140,SETHEX
         ROUTINE SNB150,SETHEX
         LABEL 'BYTE 8','BYTE 9','BYTE 10','BYTE 11','BYTE 12',        C
               'BYTE 13','BYTE 14','BYTE 15'
         LINE  (13,15),(1,15),SKIP=1
         BIN   SNB80
         BIN   SNB90
         BIN   SNB100
         BIN   SNB110
         BIN   SNB120
         BIN   SNB130
         BIN   SNB140
         BIN   SNB150
         LABEL 'BIT 0','BIT 0','BIT 0','BIT 0','BIT 0','BIT 0','BIT 0',C
               'HST BUF PTY'
         LINE  (13,15),(1,15)
         BIN   SNB81
         BIN   SNB91
         BIN   SNB101
         BIN   SNB111
         BIN   SNB121
         BIN   SNB131
         BIN   SNB141
         BIN   SNB151
         LABEL 'BIT 1','BIT 1','BIT 1','BIT 1','BIT 1','BIT 1','BIT 1',C
               'HST A OR C'
         LINE  (13,15),(1,15)
         BIN   SNB82
         BIN   SNB92
         BIN   SNB102
         BIN   SNB112
         BIN   SNB122
         BIN   SNB132
         BIN   SNB142
         BIN   SNB152
         LABEL 'BIT 2','BIT 2','BIT 2','BIT 2','BIT 2','BIT 2','BIT 2',C
               'HST B OR D'
         LINE  (13,15),(1,15)
         BIN   SNB83
         BIN   SNB93
         BIN   SNB103
         BIN   SNB113
         BIN   SNB123
         BIN   SNB133
         BIN   SNB143
         BIN   SNB153
         LABEL 'BIT 3','BIT 3','BIT 3','BIT 3','BIT 3','BIT 3','BIT 3',C
               'HST DA TR'
         LINE  (13,15),(1,15)
         BIN   SNB84
         BIN   SNB94
         BIN   SNB104
         BIN   SNB114
         BIN   SNB124
         BIN   SNB134
         BIN   SNB144
         BIN   SNB154
         LABEL 'BIT 4','BIT 4','BIT 4','BIT 4','BIT 4','BIT 4','BIT 4',C
               'I/O CH INFC'
         LINE  (13,15),(1,15)
         BIN   SNB85
         BIN   SNB95
         BIN   SNB105
         BIN   SNB115
         BIN   SNB125
         BIN   SNB135
         BIN   SNB145
         BIN   SNB155
         LABEL 'BIT 5','BIT 5','BIT 5','BIT 5','BIT 5','BIT 5','BIT 5',C
               'UNUSED'                                        @Y17BSPM
         LINE  (13,15),(1,15)
         BIN   SNB86
         BIN   SNB96
         BIN   SNB106
         BIN   SNB116
         BIN   SNB126
         BIN   SNB136
         BIN   SNB146
         BIN   SNB156
         LABEL 'BIT 6','BIT 6','BIT 6','BIT 6','BIT 6','BIT 6','BIT 6',C
               'MIC DET ERR'
         LINE  (13,15),(1,15),SKIP=2
         BIN   SNB87
         BIN   SNB97
         BIN   SNB107
         BIN   SNB117
         BIN   SNB127
         BIN   SNB137
         BIN   SNB147
         BIN   SNB157
         LABEL 'BIT 7','BIT 7','BIT 7','BIT 7','BIT 7','BIT 7','BIT 7',C
               'MULT CON CH'
         LINE  (12,15),(3,15),SKIP=1
         ROUTINE SNB160,SETHEX
         ROUTINE SNB170,SETHEX
         ROUTINE SNB180,SETHEX
         ROUTINE SNB190,SETHEX
         ROUTINE SNB200,SETHEX
         ROUTINE SNB210,SETHEX
         ROUTINE SNB220,SETHEX
         ROUTINE SNB230,SETHEX
         LABEL 'BYTE 16','BYTE 17','BYTE 18','BYTE 19','BYTE 20',      C
               'BYTE 21','BYTE 22','BYTE 23'
         LINE  (13,15),(1,15),SKIP=1
         BIN   SNB160
         BIN   SNB170
         BIN   SNB180
         BIN   SNB190
         BIN   SNB200
         BIN   SNB210
         BIN   SNB220
         BIN   SNB230
         LABEL 'TA','MA','GT PT 1 ON','RD/WR CTL','TAG ERROR',         C
               'ST+SV/DA IN','ADDRESS IN','CODE'               @Y17BSPM
         LINE  (13,15),(1,15)
         BIN   SNB161
         BIN   SNB171
         BIN   SNB181
         BIN   SNB191
         BIN   SNB201
         BIN   SNB211
         BIN   SNB221
         BIN   SNB231
         LABEL 'REGISTER','REGISTER','HOLD OUT','RD/WR CTL','UNUSED',  C
               'AD+SV/DA IN','STATUS IN','SHOWING'             @Y17BSPM
         LINE  (13,15),(1,15)
         BIN   SNB162
         BIN   SNB172
         BIN   SNB182
         BIN   SNB192
         BIN   SNB202
         BIN   SNB212
         BIN   SNB222
         BIN   SNB232
         LABEL ' ',' ','SELECT OUT','LST BYTE RE','SP/OP 19/20',       C
               'ST + ADD IN','DISC IN','ERROR'                 @Y17BSPM
         LINE  (13,15),(1,15)
         BIN   SNB163
         BIN   SNB173
         BIN   SNB183
         BIN   SNB193
         BIN   SNB203
         BIN   SNB213
         BIN   SNB223
         BIN   SNB233
         LABEL ' ',' ','ADDRESS OUT','HST OP IN',                      C
               'UNUSED','OP IN GLITC','DATA IN','FOUND BY'     @Y17BSPM
         LINE  (13,15),(1,15)
         BIN   SNB164
         BIN   SNB174
         BIN   SNB184
         BIN   SNB194
         BIN   SNB204
         BIN   SNB214
         BIN   SNB224
         BIN   SNB234
         LABEL ' ',' ','SUP OUT','HST ADDR IN','MSC BUF PRTY',         C
               'OP IN DROP','SERVICE IN','CHANNEL'             @Y17BSPM
         LINE  (13,15),(1,15)
         BIN   SNB165
         BIN   SNB175
         BIN   SNB185
         BIN   SNB195
         BIN   SNB205
         BIN   SNB215
         BIN   SNB225
         BIN   SNB235
         LABEL ' ',' ','COMMAND OUT','HOST ST IN','MSC CBO PTY',       C
               'OP/SEL ERR','MARK IN 0-0','MICROPGM-'          @Y17BSPM
         LINE  (13,15),(1,15)
         BIN   SNB166
         BIN   SNB176
         BIN   SNB186
         BIN   SNB196
         BIN   SNB206
         BIN   SNB216
         BIN   SNB226
         BIN   SNB236
         LABEL ' ',' ','SERVICE OUT','MSC CH WT',                      C
               'PORT TR CK','UNUSED','MARK IN 0-1','-BYTE 15'  @Y17BSPM
         LINE  (13,15),(1,15),SKIP=2
         BIN   SNB167
         BIN   SNB177
         BIN   SNB187
         BIN   SNB197
         BIN   SNB207
         BIN   SNB217
         BIN   SNB227
         BIN   SNB237
         LABEL ' ',' ','NOT OP OUT','MSC CH RD',                       C
               'TIMEOUT','UNUSED','PORT 1 SEL',' BIT 6 ON'     @Y17BSPM
         LINE  (12,15),(3,15),SKIP=1
         ROUTINE SNB240,SETHEX
         ROUTINE SNB250,SETHEX
         ROUTINE SNB260,SETHEX
         ROUTINE SNB270,SETHEX
         ROUTINE SNB280,SETHEX
         ROUTINE SNB290,SETHEX
         ROUTINE SNB300,SETHEX
         ROUTINE SNB310,SETHEX
         LABEL 'BYTE 24','BYTE 25','BYTE 26','BYTE 27','BYTE 28',      C
               'BYTE 29','BYTE 30','BYTE 31'
         LINE  (13,15),(1,15),SKIP=1
         BIN   SNB240
         BIN   SNB250
         BIN   SNB260
         BIN   SNB270
         BIN   SNB280
         BIN   SNB290
         BIN   SNB300
         BIN   SNB310
         LABEL 'CODE','UNUSED','BIT 0','BIT 0','BIT 0','BIT 0',        C
               'BIT 0','BIT 0'                                 @Y17BSPM
         LINE  (13,15),(1,15)
         BIN   SNB241
         BIN   SNB251
         BIN   SNB261
         BIN   SNB271
         BIN   SNB281
         BIN   SNB291
         BIN   SNB301
         BIN   SNB311
         LABEL 'SHOWING','UNUSED','BIT 1','BIT 1','BIT 1','BIT 1',     C
               'BIT 1','BIT 1'                                 @Y17BSPM
         LINE  (13,15),(1,15)
         BIN   SNB242
         BIN   SNB252
         BIN   SNB262
         BIN   SNB272
         BIN   SNB282
         BIN   SNB292
         BIN   SNB302
         BIN   SNB312
         LABEL 'CAUSE OF','UNUSED','BIT 2','BIT 2','BIT 2','BIT 2',    C
               'BIT 2','BIT 2'                                 @Y17BSPM
         LINE  (13,15),(1,15)
         BIN   SNB243
         BIN   SNB253
         BIN   SNB263
         BIN   SNB273
         BIN   SNB283
         BIN   SNB293
         BIN   SNB303
         BIN   SNB313
         LABEL 'CHANNEL','SEL RES ISS','BIT 3','BIT 3','BIT 3','BIT 3',C
               'BIT 3','BIT 3'                                 @Y17BSPM
         LINE  (13,15),(1,15)
         BIN   SNB244
         BIN   SNB254
         BIN   SNB264
         BIN   SNB274
         BIN   SNB284
         BIN   SNB294
         BIN   SNB304
         BIN   SNB314
         LABEL 'ERROR','HIO/S-R SUC','BIT 4','BIT 4','BIT 4','BIT 4',  C
               'BIT 4','BIT 4'                                 @Y17BSPM
         LINE  (13,15),(1,15)
         BIN   SNB245
         BIN   SNB255
         BIN   SNB265
         BIN   SNB275
         BIN   SNB285
         BIN   SNB295
         BIN   SNB305
         BIN   SNB315
         LABEL 'NUMBER 1-','HIO ISSUED','BIT 5','BIT 5','BIT 5',       C
               'BIT 5','BIT 5','BIT 5'                         @Y17BSPM
         LINE  (13,15),(1,15)
         BIN   SNB246
         BIN   SNB256
         BIN   SNB266
         BIN   SNB276
         BIN   SNB286
         BIN   SNB296
         BIN   SNB306
         BIN   SNB316
         LABEL '-BYTE 23 =','INTF CTL CK','BIT 6','BIT 6','BIT 6',     C
               'BIT 6','BIT 6','BIT 6'                         @Y17BSPM
         LINE  (13,15),(1,15)
         BIN   SNB247
         BIN   SNB257
         BIN   SNB267
         BIN   SNB277
         BIN   SNB287
         BIN   SNB297
         BIN   SNB307
         BIN   SNB317
         LABEL ' CODE 01','DISCON IN','BIT 7','BIT 7','BIT 7','BIT 7', C
               'BIT 7','BIT 7'                                 @Y17BSPM
         LINE  ,(1,1)
         ROUTINE CLASSRC,READJMDR                              @Y17BSPM
         LABEL ' '
         DC    X'FF'
         DC    XL2'0090'
         DC    XL2'0018'
         DC    XL2'0000'
LABELS   DS    0F
         LSTART
         END
