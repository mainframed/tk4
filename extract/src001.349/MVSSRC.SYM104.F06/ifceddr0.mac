 TITLE 'IFCEDDR0  IFCEMIH0 - DDR/MIH EREP EDIT MODULE'
         MACRO
&NAME    DSGEN ,
.*                            THIS MACRO GENERATES ONE DSECT WORD
.*                                 FORMATTED FOR THE SUBJECT LOG RECORD
.*                                 EACH OPERAND HAS TWO SUB LISTS. THE
.*                                 FIRST IS THE NAME OF THE LOG ITEM
.*                                 WHILE THE SECOND IS THE # OF BITS TO
.*                                 ALLOCATE FOR THIS ITEM. ITEMS MUST
.*                                 BE DEFINED CONTIGUOUSLY WITHOUT GAPS
.*                                 UNUSED BIT GROUPS MUST BE GIVEN
.*                                 DUMMY NAMES. THE NAMES PROVIDED FOR
.*                                 THE LOG ITEMS MAY THEN BE USED IN
.*                                 THE CONVERSION MACRO INSTRUCTIONS.
         GBLA  &BITS(2600),&DB,&DT,&INITIAL
         GBLA  &ITEMITR,&ITEMFST(20),&ITEMNBR,&ITEMMDX
         GBLA  &ITEMNDX(2600),&ITEMXPT
         GBLA  &LABELNR,&LASTCC,&LB,&LBLCTR(100),&LPTR,&LT
         GBLA  &NRENTS,&SHIFT(2600)
         GBLB  &DIAGITF,&DIAGLIN,&DIAGSET,&DIAGTST,&FSW,&TEST
         GBLC  &CARRCON,&CSECT,&DSECT,&ITEM(2600)
         GBLC  &LABELS(2600),&LBL(100),&NRENTSX
         LCLB  &ONLY1,&CTIND
         LCLA  &START1,&START2,&END1,&END2
         LCLC  &SYMBOL,&EQUSYM
         LCLA  &OP,&COUNT,&BYTE,&EQUCNT
         ACTR  100000
         AIF   (&ITEMITR EQ 0).START
 MNOTE   20,'DSGEN MACRO OCCURRS AFTER ITEMSORT MACRO HAS BEEN ISSUED.'
         MEXIT
.START   AIF   (N'&SYSLIST(&OP+1) LT 3).LOOP
         AIF   ('&SYSLIST(&OP+1,3)' EQ 'EQU').LOOP     TEST FOR EQU
  AIF   ('&SYSLIST(&OP+1,3)' EQ '' OR '&SYSLIST(&OP+1,4)' EQ '').ERR1
         AIF   ('&SYSLIST(&OP+1,3)' GT '&SYSLIST(&OP+1,4)').ERR3
&START1  SETA  &SYSLIST(&OP+1,3)        GET START COUNT OF 1
&START2  SETA  &SYSLIST(&OP+1,4)        GET FIRST END COUNT
         AGO   .SET2A                   BRANCH AROUND
         AIF   ('&SYSLIST(&OP+1,5)' GT '&SYSLIST(&OP+1,6)').ERR3
.ERR1    MNOTE '**FIRST SYMBOL CONCATENATION INCOMPLETE**'
         MEXIT
.SET2A   AIF   ('&SYSLIST(&OP+1,5)' EQ ''AND '&SYSLIST(&OP+1,6)' EQ '' X
               ).SET2                   TEST FOR NO SECOND
  AIF   ('&SYSLIST(&OP+1,5)' EQ '' OR '&SYSLIST(&OP+1,6)' EQ '').ERR2
&END1    SETA  &SYSLIST(&OP+1,5)        GET START COUNT OF 2
&END2    SETA  &SYSLIST(&OP+1,6)        GET END COUNT OF 2
         AGO   .LOOP
.SET2    ANOP
&ONLY1   SETB  1                        INDICATE ONLY ONE CONCATENATION
         AGO   .LOOP
.ERR2    MNOTE '**SECOND SYMBOL CONCATENATION INCOMPLETE**'
         MEXIT
.ERR3    MNOTE '**START GREATER THAN END CONCATENATION**'
         MEXIT
.LOOP    ANOP
&OP      SETA  &OP+1
         AIF   (&OP GT N'&SYSLIST).DONE      TEST IF ALL DONE
&ITEMNBR SETA  &ITEMNBR+1
         AIF   ('&SYSLIST(&OP,2)' NE '').OK1
         MNOTE '**NULL BIT COUNT FIELD**'
         MEXIT
.OK1     ANOP
&SYMBOL  SETC  '&SYSLIST(&OP,1)'
         AIF   ('&SYMBOL' NE '').OK
*              *****     LOG ITEM SYMBOL NOT PROVIDED     *****
         AIF   ('&SYSLIST(&OP,3)' NE 'EQU').CNT
         AGO   .START                   GET NEXT
.OK      AIF   (N'&SYSLIST(&OP) LT 3).NO3    TEST FOR OLD FORMAT
         AIF   ('&SYSLIST(&OP,3)' EQ 'EQU').EQU   TEST FOR EQU
         AIF   (&ONLY1).OK2             TEST FOR ONLY ONE CONCAT
&SYMBOL  SETC  '&SYMBOL.&START1.&END1'       GET 1 AND 2 CONCAT
         AGO   .NO3                     BRANCH AROUND
.OK2     ANOP
&SYMBOL  SETC  '&SYMBOL.&START1'        GET 1 CONCATENATED
.NO3     ANOP
&SYMBOL  EQU   *+&BYTE
&ITEM(&ITEMNBR) SETC '&SYMBOL'          GET LABEL IN GLOBAL
&BITS(&ITEMNBR) SETA &SYSLIST(&OP,2)
&SHIFT(&ITEMNBR) SETA &COUNT-&BYTE*8
.CNT     ANOP
&CTIND   SETB  1                        SET COUNT INDICATOR
&COUNT   SETA  &COUNT+&SYSLIST(&OP,2)
&BYTE    SETA  &COUNT/8
         AIF   (N'&SYSLIST(&OP) LT 3).START  TEST FOR OLD FORMAT
         AIF   (&ONLY1).TSTST           TEST FOR ONLY ONE CONCAT
         AIF   (&END1 EQ &END2).TSTST   TEST FOR SECOND END
&END1    SETA  &END1+1                  INCREMENT COUNT
&OP      SETA  &OP-1                    DECREMENT INCREMENT
         AGO   .LOOP                    GENERATE NEXT
.TSTST   ANOP
         AIF   (&START1 EQ &START2).LPDONE   TEST FOR END
         AIF   (&ONLY1).NSET1           TEST FOR ONLY ONE CONCAT
&END1    SETA  &SYSLIST(&OP,5)          RE-INIT SECOND START COUNT
.NSET1   ANOP
&OP      SETA  &OP-1                    DECREMENT INDEX
&START1  SETA  &START1+1                INCREMENT FIRST COUNT
         AGO   .LOOP                    GO DO NEXT
.LPDONE  ANOP
&ONLY1   SETB  0                        CLEAR INDICATOR
         AGO   .START                   GO TEST FOR MORE SUB-LISTS
.DONE    AIF   (&COUNT-&COUNT/8*8 NE 0).ERR  TEST FOR MULTIPLE OF EIGHT
         AIF   (&CTIND EQ 0).END        NO DS IF NO COUNT
&COUNT   SETA  &COUNT/8                 GET NUMBER OF BYTES
&NAME    DS    &COUNT.C
.END     MEXIT
.ERR     MNOTE '**BIT COUNT FLDS DO NOT TOTAL MULTIPLE OF 8**'
         MEXIT
.EQU     AIF   ('&SYSLIST(&OP,4)' NE '').EQU1     TEST FOR NULL LABEL
.ERR4    MNOTE '**EQU OPERAND OMITTED OR NOT FOUND**'
         MEXIT
.EQU1    AIF   (&SYSLIST(&OP,2) LT 16).EQU2  COUNT OVER FIFTEEN
*****               THE FOLLOWING STATEMENT                *****
*****     NUMBER OF BITS EXCEED 15 - DO NOT USE AS BIN     *****
.EQU2    ANOP
&EQUCNT  SETA  0                        CLEAR COUNTER
&EQUSYM  SETC  '&SYSLIST(&OP,4)'        GET EQU OPERAND
.EQULOP  ANOP
&EQUCNT  SETA  &EQUCNT+1                INCREMENT INDEX
         AIF   ('&ITEM(&EQUCNT)' EQ '&EQUSYM').EQUOUT  LABEL FOUND?
         AIF   (&EQUCNT EQ &ITEMNBR).ERR4    ALL TESTED?
         AGO   .EQULOP                  NO-GET NEXT
.EQUOUT  ANOP
&ITEM(&ITEMNBR) SETC '&SYMBOL'          GET LABEL NAME
&BITS(&ITEMNBR) SETA &SYSLIST(&OP,2)    GET NUMBER OF BITS
&SHIFT(&ITEMNBR) SETA &SHIFT(&EQUCNT)   GET SHIFT COUNT
&SYMBOL  EQU   &EQUSYM                  THIS SYMBOL EQUATED
         AGO   .START                   RETURN FOR NEXT
         MEND
         MACRO
         HEX   ,
.*                            THIS MACRO FACILITATES GENERATION OF THE
.*                                 TABLE ENTRIES SPECIFYING HEX TYPE
.*                                 CONVERSIONS.
.*                            &SYSLIST(&OP,1) - NAME OF DATA ITEM TO BE
.*                                 CONVERTED
.*                            &SYSLIST(&OP,2) - # OF SPACES TO SKIP ON
.*                                 MULTIPLE PRINT OR NBR OF SPACES TO
.*                                 BACK UP FROM COLUMN FOR START OF
.*                                 PRINTING. THE LETTER B PRECEEDS THE
.*                                 NUMBER (B8) IF THE LATTER OPTION IS
.*                                 DESIRED. OMISSION OF THIS OPERAND
.*                                 FORCES OPTION 2 WITH BACKUP SPACING
.*                                 EQUAL TO THE NUMBER OF BYTES SPECI-
.*                                 FIED BY THE NEXT OPERAND (TWICE THIS
.*                                 NUMBER IF SUFFIX IS EXPLICITLY OR
.*                                 IMPLICITLY B).
.*                            &SYSLIST(&OP,3) - NUMBER OF BYTES TO
.*                                 PROCESS. THIS NUMBER IS SUFFIXED
.*                                 WITH AN L,R, OR B TO STIPULATE
.*                                 PRINTING OF THE LEFT HALF, RIGHT
.*                                 HALF, OR BOTH HALVES OF THE BYTE
.*                                 RESPECTIVELY. OMISSION OF THIS
.*                                 OPERAND DEFAULTS TO B WITH THE NUM-
.*                                 BER OF BYTES EQUAL TO THE ITEM LNGTH
.*                            A NEW ENTRY IS GENERATED ONLY WHEN NECES-
.*                                 SARY. THIS MACRO MUST BE THE FIRST
.*                                 MACRO INSTRUCTION ISSUED FOR THE
.*                                 SUBJECT LINE(S).
         GBLA  &BITS(2600),&DB,&DT,&INITIAL
         GBLA  &ITEMITR,&ITEMFST(20),&ITEMNBR,&ITEMMDX
         GBLA  &ITEMNDX(2600),&ITEMXPT
         GBLA  &LABELNR,&LASTCC,&LB,&LBLCTR(100),&LPTR,&LT
         GBLA  &NRENTS,&SHIFT(2600)
         GBLB  &DIAGITF,&DIAGLIN,&DIAGSET,&DIAGTST,&FSW,&TEST
         GBLC  &CARRCON,&CSECT,&DSECT,&ITEM(2600)
         GBLC  &LABELS(2600),&LBL(100),&NRENTSX
         LCLB  &B,&SUB
         LCLA  &IBITS,&ISHIFT,&K,&T,&CODE,&BYTESP,&OP
         LCLC  &S,&LETTER,&ARG
       ACTR  500000
         AIF   (&DIAGTST EQ 0).NOMSG
         AIF   (&INITIAL EQ 0).NOMSG
         AIF   (&DIAGLIN EQ 1).NOMSG
         MNOTE '**NO LINE ASSOCIATED WITH THIS DATA**'
*****THE FOLLOWING GENERATED FOR TEST PURPOSES*****
*        LINE
         LINE
.NOMSG   ANOP
         AIF   (K'&SYSLIST(1) EQ K'&SYSLIST(1,1)).LOOP
&SUB     SETB  1
.LOOP    ANOP
&OP      SETA  &OP+1
&ARG     SETC  '&SYSLIST(&OP,1)'
         ITEMFIND  &ARG
         AIF   (&ITEMXPT EQ 0).MEXIT
.FOUND   ANOP
&ISHIFT  SETA  &SHIFT(&ITEMXPT)
&IBITS   SETA  &BITS(&ITEMXPT)
         AIF   (&ISHIFT EQ 0 OR &ISHIFT EQ 4).ALIGN
.ERR     MNOTE '**DATA NOT ALLIGNED ON HEX OR BYTE BOUNDARY**'
.MEXIT   MEXIT
.ALIGN   ANOP
&CODE    SETA  1
         AIF   (&SUB EQ 1).SUBA
&K       SETA  K'&SYSLIST(3)
         AGO   .SUBB
.SUBA    ANOP
&K       SETA  K'&SYSLIST(&OP,3)
.SUBB    ANOP
         AIF   (&K EQ 1).ERR3
         AIF   (&IBITS-(&IBITS/4)*4 EQ 0).OK
         MNOTE '**BIT LENGTH SPECIFICATION INCONSISTENT WITH CONTROL**'
         MEXIT
.OK      AIF   (&SUB EQ 1).SUBC
         AIF   ('&SYSLIST(3)' EQ '').USEDEFN
&LETTER  SETC  '&SYSLIST(3)'(&K,1)
&S       SETC  '&SYSLIST(3)'(1,&K-1)
         AGO   .SUBD
.SUBC    ANOP
         AIF   ('&SYSLIST(&OP,3)' EQ '').USEDEFN
&LETTER  SETC  '&SYSLIST(&OP,3)'(&K,1)
&S       SETC  '&SYSLIST(&OP,3)'(1,&K-1)
.SUBD    ANOP
&BYTESP  SETA  &S
         AIF   ('&LETTER' EQ 'B').BOTH
         AIF   ('&LETTER' EQ 'L').LEFT
         AIF   ('&LETTER' EQ 'R').RIGHT
.ERR3    MNOTE '**PARAMETER 3 INCOMPLETE-DSGEN DEFINITION USED**'
         AGO   .USEDEFN
.RIGHT   ANOP
&CODE    SETA  2
         AGO   .L
.LEFT    ANOP
&CODE    SETA  1
         AGO   .L
.USEDEFN ANOP
&BYTESP  SETA  &IBITS/8
.BOTH    AIF   (&ISHIFT NE 0).ERR
&CODE    SETA  3
&T       SETA  &BYTESP*2-1
&S       SETC  '&T'
.OK2     AIF   (&ISHIFT EQ 0).L
&CODE    SETA  2
.L       ANOP
&B       SETB  1
         AIF   (&SUB EQ 1).SUBE
         AIF   ('&SYSLIST(2)' EQ '').BACKUP
&K       SETA  K'&SYSLIST(2)
&B       SETB  ('&SYSLIST(2)'(1,1) EQ 'B')
&S       SETC  '&SYSLIST(2)'(&B+1,&K-&B)
         AGO   .SUBF
.SUBE    ANOP
         AIF   ('&SYSLIST(&OP,2)' EQ '').BACKUP
&K       SETA  K'&SYSLIST(&OP,2)
&B       SETB  ('&SYSLIST(&OP,2)'(1,1) EQ 'B')
&S       SETC  '&SYSLIST(&OP,2)'(&B+1,&K-&B)
.SUBF    ANOP
.BACKUP  ANOP
&NRENTS  SETA  &NRENTS+1
         AIF   (&BYTESP GT 0 AND &BYTESP LT 16).SUB0
         MNOTE '**NO. OF BYTES OUTSIDE RANGE OF 1-15**'
         MEXIT
.SUB0    AIF   (&SUB EQ 1).SUBG
         DC    AL.12(&SYSLIST(1)-&DSECT),XL.4'A'
         AGO   .SUBH
.SUBG    ANOP
         DC    AL.12(&SYSLIST(&OP,1)-&DSECT),XL.4'A'
.SUBH    ANOP
         DC    BL.1'&B',FL.7'&S',AL.4(&BYTESP),FL.4'&CODE'
.OUT     ANOP
&ITEMXPT     SETA  0
         AIF   (&SUB EQ 0).OUTA
         AIF   (&OP LT N'&SYSLIST).LOOP
.OUTA    ANOP
         MEND
         MACRO
         BIN   ,
.*                                 &SYSLIST(&OP,1) - NAME OF LOG ITEM
.*                                      RECORD DSECT
.*                                 $SYSLIST(&OP,2) - NBR OF SPACES
.*                                      TO SKIP ON MULTIPLE
.*                                      PRINT OR NBR OF SPACES
.*                                      TO BACK UP FROM COLUMN FOR
.*                                      START OF PRINTING. THE LETTER
.*                                      B PRECEEDS THE NUMBER (B5) IF
.*                                      THE LATTER IS DESIRED. OMISSION
.*                                      OF THIS OPERAND FORCES OPTION 2
.*                                      WITH BACKUP SPACING EQUAL TO
.*                                 THE NUMBER OF BITS IN THE ITEM
.*                                 DEFINITION (VIA MACRO 'DSGEN').
.*                            A LIMIT OF 15 BITS IS IMPOSED FOR THE
.*                                 TOTAL NUMBER OF BITS TO PRINT.
         GBLA  &BITS(2600),&DB,&DT,&INITIAL
         GBLA  &ITEMITR,&ITEMFST(20),&ITEMNBR,&ITEMMDX
         GBLA  &ITEMNDX(2600),&ITEMXPT
         GBLA  &LABELNR,&LASTCC,&LB,&LBLCTR(100),&LPTR,&LT
         GBLA  &NRENTS,&SHIFT(2600)
         GBLB  &DIAGITF,&DIAGLIN,&DIAGSET,&DIAGTST,&FSW,&TEST
         GBLC  &CARRCON,&CSECT,&DSECT,&ITEM(2600)
         GBLC  &LABELS(2600),&LBL(100),&NRENTSX
         LCLB  &B,&SUB
         LCLA  &IBITS,&ISHIFT,&K
         LCLA  &TEMP,&T,&OP
         LCLC  &S,&ARG
          ACTR  500000
         AIF   (&DIAGTST EQ 0).NOMSG
         AIF   (&INITIAL EQ 0).NOMSG
         AIF   (&DIAGLIN EQ 1).NOMSG
         MNOTE '**NO LINE ASSOCIATED WITH THIS DATA**'
*****THE FOLLOWING GENERATED FOR TEST PURPOSES*****
*        LINE
         LINE
.NOMSG   ANOP
         AIF   (K'&SYSLIST(1) EQ K'&SYSLIST(1,1)).LOOP
&SUB     SETB  1
.LOOP    ANOP
&OP      SETA  &OP+1
&ARG     SETC  '&SYSLIST(&OP,1)'
         ITEMFIND &ARG
         AIF   (&ITEMXPT EQ 0).MEXIT
&ISHIFT  SETA  &SHIFT(&ITEMXPT)
&IBITS   SETA  &BITS(&ITEMXPT)
         AIF   (&SUB EQ 1).SUB00
         AIF   ('&SYSLIST(3)' EQ '').SETT
&IBITS   SETA  &SYSLIST(3)
         AGO   .SETT
.SUB00   AIF   ('&SYSLIST(&OP,3)' EQ '').SETT
&IBITS   SETA  &SYSLIST(&OP,3)
.SETT    ANOP
&T       SETA  &IBITS-1
&B       SETB  0
         AIF   (&IBITS GT 0 AND &IBITS LT 16).SUB0
         MNOTE '**NO. OF BITS OUTSIDE RANGE OF 1-15**'
.MEXIT   MEXIT
.SUB0    AIF   (&SUB EQ 1).SUBA
         AIF   ('&SYSLIST(2)' EQ '').BACKUP
&K       SETA  K'&SYSLIST(2)
&B       SETB  ('&SYSLIST(2)'(1,1) EQ 'B')
&S       SETC  '&SYSLIST(2)'(&B+1,&K-&B)
         AGO   .SUBB
.SUBA    ANOP
         AIF   ('&SYSLIST(&OP,2)' EQ '').BACKUP
&K       SETA  K'&SYSLIST(&OP,2)
&B       SETB  ('&SYSLIST(&OP,2)'(1,1) EQ 'B')
&S       SETC  '&SYSLIST(&OP,2)'(&B+1,&K-&B)
.SUBB    ANOP
&T       SETA  &S
.BACKUP  ANOP
&NRENTS  SETA  &NRENTS+1
&TEMP    SETA  &ISHIFT
         AIF   (&IBITS NE 1 OR &B NE 0).BIN2
         DC    AL.12(&SYSLIST(&OP,1)-&DSECT),XL.4'&TEMP'
         AGO   .OUT
         AIF   (&SUB EQ 1).BIN2
         AIF   ('&SYSLIST(2)' NE '').BIN3
         AGO   .BIN2A
.BIN2    AIF   ('&SYSLIST(&OP,2)' NE '').BIN3
.BIN2A   ANOP
&B       SETB  1
.BIN3    ANOP
         DC    AL.12(&SYSLIST(&OP,1)-&DSECT),XL.4'C'
         DC    BL.1'&B',AL.7(&T),AL.4(&IBITS),FL.4'&ISHIFT'
.OUT     ANOP
&ITEMXPT     SETA  0
         AIF   (&SUB EQ 0).OUTA
         AIF   (&OP LT N'&SYSLIST).LOOP
.OUTA    ANOP
         MEND
         MACRO
&NAME    LINE  &DATA,&LABEL,&SKIP=
.*                            THIS MACRO ESTABLISHES THE MARGINS OR
.*                                 COLUMN SETTINGS FOR EACH LINE. IT
.*                                 GENERATES NECESSARY CARRIAGE CONTROL
.*                                 ENTRIES. LASTLY IT DETERMINES THE
.*                                 NUMBER OF ENTRIES ASSOCIATED WITH
.*                                 THE PREVIOUS LINE AND STORES THAT #
.*                                 INTO THE APPROPRIATE BYTE.
.*                            &DATA(1) - CHARACTER POSITION TO BEGIN
.*                                 DATA.
.*                            &DATA(2) - # OF SPACES BETWEEN SUCCESSIVE
.*                                 DATA COLUMN STARTING CHARACTERS.
.*                            &LABEL(1) - CHAR. POS. TO BEGIN LABELS.
.*                            &LABEL(2) - # SPACES BETWEEN LINE'S LABEL
.*                                 STARTING CHARACTERS.
.*                            &SKIP= - # OF LINES TO ADVANCE CARRIAGE
.*                                 TO BEGIN NEXT PRINTED LINE.
.*                            NEW ENTRIES ARE GENERATED ONLY WHEN
.*                                 NECESSARY. OMISSION OF ITEMS MEANS
.*                                 THEY HAVE NOT CHANGED SINCE PREVIOUS
.*                                 SETTINGS. A LINE MACRO IS REQUIRED
.*                                 FOR EACH PRINTED LINE. IF NO SETTING
.*                                 CHANGES ARE REQUIRED ALL OPERANDS
.*                                 ARE OMITTED IN WHICH CASE ONLY THE
.*                                 # OF ENTRIES FOR THE PREVIOUS LINE
.*                                 IS COMPUTED. THIS MACRO MUST BE THE
.*                                 FIRST MACRO INSTRUCTION ISSUED FOR
.*                                 THE SUBJECT LINE
         GBLA  &BITS(2600),&DB,&DT,&INITIAL
         GBLA  &ITEMITR,&ITEMFST(20),&ITEMNBR,&ITEMMDX
         GBLA  &ITEMNDX(2600),&ITEMXPT
         GBLA  &LABELNR,&LASTCC,&LB,&LBLCTR(100),&LPTR,&LT
         GBLA  &NRENTS,&SHIFT(2600)
         GBLB  &DIAGITF,&DIAGLIN,&DIAGSET,&DIAGTST,&FSW,&TEST
         GBLC  &CARRCON,&CSECT,&DSECT,&ITEM(2600)
         GBLC  &LABELS(2600),&LBL(100),&NRENTSX
         LCLA  &S
         AIF   (&INITIAL EQ 0 OR &DIAGTST EQ 0).DIAGSET
         AIF   (&DIAGSET EQ 0).DIAGSET
         MNOTE '**NO LABEL ASSOCIATED WITH LAST SET**'
***** THE FOLLOWING GENERATED FOR TEST PURPOSES *****
*        LABEL '%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%'
               LABEL '%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%'
.DIAGSET ANOP
&DIAGSET SETB  1
&DIAGLIN SETB  1
&NAME    DS    0C
         AIF   (&INITIAL EQ 0).FIRSTLN
         LINEND
         AGO   .NTFIRST
.FIRSTLN ANOP
&NRENTSX SETC  'N&SYSNDX'
&INITIAL SETA  1
N&SYSNDX EQU   *
.NTFIRST ANOP
         DC    AL1(0)
         AIF   ('&DATA(1)' EQ '').CKDTABS
         AIF   (&DATA(1) EQ &DB).CKDTABS
&DB      SETA  &DATA(1)
         AGO   .AA
.CKDTABS AIF   ('&DATA(2)' EQ '').NCDATA
         AIF   (&DATA(2) EQ &DT).NCDATA
         AGO   .CC
.AA      AIF   ('&DATA(2)' EQ '').BB
         AIF   (&DATA(2) EQ &DT).BB
.CC      ANOP
&DT      SETA  &DATA(2)
.BB      DC    XL2'FFFE'
         DC    FL1'&DB'
         DC    FL1'&DT'
&NRENTS  SETA  &NRENTS+1
.NCDATA  ANOP
         AIF   ('&LABEL(1)' EQ '').CKLTABS
         AIF   (&LABEL(1) EQ &LB).CKLTABS
&LB      SETA  &LABEL(1)
         AGO   .AAA
.CKLTABS AIF   ('&LABEL(2)' EQ '').NCLABEL
         AIF   (&LABEL(2) EQ &LT).NCLABEL
         AGO   .CCC
.AAA     AIF   ('&LABEL(2)' EQ '').BBB
         AIF   (&LABEL(2) EQ &LT).BBB
.CCC     ANOP
&LT      SETA  &LABEL(2)
.BBB     DC    XL2'FFFF'
         DC    FL1'&LB'
         DC    FL1'&LT'
&NRENTS  SETA  &NRENTS+1
.NCLABEL ANOP
         AIF   ('&SKIP' NE '').CONT
         AIF   (&TEST EQ 0).NOCHANG
         AGO   .DEFALTA
.CONT    ANOP
         AIF   (&TEST EQ 0).AB
         AIF   ('&SKIP' EQ 'E').AB
&S       SETA  &SKIP
.DEFAULT ANOP
         AIF   (&SKIP EQ &LASTCC).DEFALTA
         ORG   &CARRCON+3
         DC    AL.3(0),AL.2(&S),AL.3(1)
         ORG
&LASTCC  SETA  &S
.DEFALTA ANOP
&TEST    SETB  0
         AGO   .DD
.AB      AIF   ('&SKIP' NE 'E').ABB
A&SYSNDX DC    X'FFFB8B00'              EJECT
         AGO   .ABC
.ABB     AIF   (&SKIP EQ &LASTCC).NOCHANG
A&SYSNDX DC    XL2'FFFB'
         DC    AL.3(0),AL.2(&SKIP),AL.3(1)
         DC    AL.3(0),AL.2(&SKIP),AL.3(1)
&LASTCC  SETA  &SKIP
&TEST    SETB  1
.ABC     ANOP
&CARRCON SETC  'A&SYSNDX'
&NRENTS  SETA  &NRENTS+1
.DD      ANOP
.NOCHANG ANOP
         MEND
         MACRO
         LINEND ,
.*                                 THIS MACRO IS USED ONLY BY THE LINE
.*                                 MACRO TO SET THE NUMBER OF ENTRIES
.*                                 ASSOCIATED WITH EACH LINE.
         GBLA  &BITS(2600),&DB,&DT,&INITIAL
         GBLA  &ITEMITR,&ITEMFST(20),&ITEMNBR,&ITEMMDX
         GBLA  &ITEMNDX(2600),&ITEMXPT
         GBLA  &LABELNR,&LASTCC,&LB,&LBLCTR(100),&LPTR,&LT
         GBLA  &NRENTS,&SHIFT(2600)
         GBLB  &DIAGITF,&DIAGLIN,&DIAGSET,&DIAGTST,&FSW,&TEST
         GBLC  &CARRCON,&CSECT,&DSECT,&ITEM(2600)
         GBLC  &LABELS(2600),&LBL(100),&NRENTSX
         ORG   &NRENTSX
         DC    FL1'&NRENTS'
         ORG
&NRENTS  SETA  0
B&SYSNDX EQU   *
&NRENTSX SETC  'B&SYSNDX'
         MEND
           MACRO
&NAME    LABEL &LABEL1,&LABEL2,&LABEL3,&LABEL4,&LABEL5,&LABEL6,        C
               &LABEL7,&LABEL8
.*                                 THIS MACRO ALLOWS LABELS TO
.*                                 BE SPECIFIED FOR A GIVEN LINE. THE
.*                                 LABELS SHOULD BE ENCLOSED IN QUOTA-
.*                                 TION MARKS. THE COLUMN AND LINE END
.*                                 CONTROLS WILL BE INSERTED BY THE
.*                                 MACRO. OMITTED OPERANDS MEAN NO
.*                                 LABEL REQUIRED FOR RESPECTIVE
.*                                 COLUMN.
         GBLA  &BITS(2600),&DB,&DT,&INITIAL
         GBLA  &ITEMITR,&ITEMFST(20),&ITEMNBR,&ITEMMDX
         GBLA  &ITEMNDX(2600),&ITEMXPT
         GBLA  &LABELNR,&LASTCC,&LB,&LBLCTR(100),&LPTR,&LT
         GBLA  &NRENTS,&SHIFT(2600)
         GBLB  &DIAGITF,&DIAGLIN,&DIAGSET,&DIAGTST,&FSW,&TEST
         GBLC  &CARRCON,&CSECT,&DSECT,&ITEM(2600)
         GBLC  &LABELS(2600),&LBL(100),&NRENTSX
         LCLC  &MARGIN,&TACK
         LCLC  &TEXT
         LCLA  &OP,&K,&START,&NRCHAR,&REMAIN
         AIF   (&INITIAL EQ 0).DIAGCLR
         AIF   (&DIAGTST EQ 0).DIAGCLR
         AIF   (&DIAGLIN EQ 1).DIAGCLR
         MNOTE '**NO LINE ASSOCIATED WITH PREVIOUS LABEL**'
***** THE FOLLOWING GENERATED FOR TEST PURPOSES *****
*        LINE
         LINE
.DIAGCLR ANOP
&DIAGSET SETB  0
&DIAGLIN SETB  0
&MARGIN  SETC  '*'
         AIF   ('&NAME' EQ '').LOOPOUT
&LPTR    SETA  &LPTR+1
&LBL(&LPTR) SETC '&NAME'
&LBLCTR(&LPTR) SETA &LABELNR+1
.LOOPOUT ANOP
&OP      SETA  &OP+1
&K       SETA  K'&SYSLIST(&OP)
         AIF (&K GE 2).NORM
&K       SETA  2
.NORM    ANOP
&START   SETA  2
         AIF (&OP LT N'&SYSLIST).NOTLAST
&MARGIN  SETC  '$'
.NOTLAST ANOP
&NRCHAR  SETA  8
&TACK    SETC  ''
.LOOPIN  ANOP
&REMAIN  SETA  &K-&START
         AIF (&REMAIN GE 8).MORE
&TACK    SETC  '&MARGIN'
&NRCHAR  SETA  &REMAIN
.MORE    ANOP
&TEXT    SETC  ''
         AIF (&REMAIN EQ 0).ENDTEXT
&TEXT    SETC  '&SYSLIST(&OP)'(&START,&NRCHAR)
.ENDTEXT ANOP
&LABELNR SETA  &LABELNR+1
&LABELS(&LABELNR) SETC '&TEXT'.'&TACK'
&START   SETA  &START+8
         AIF ('&TACK' EQ '').LOOPIN
         AIF ('&TACK' EQ '*').LOOPOUT
         MEND
         MACRO
&NAME    ROUTINE &LOGITEM,&RNAME
         GBLA  &BITS(2600),&DB,&DT,&INITIAL
         GBLA  &ITEMITR,&ITEMFST(20),&ITEMNBR,&ITEMMDX
         GBLA  &ITEMNDX(2600),&ITEMXPT
         GBLA  &LABELNR,&LASTCC,&LB,&LBLCTR(100),&LPTR,&LT
         GBLA  &NRENTS,&SHIFT(2600)
         GBLB  &DIAGITF,&DIAGLIN,&DIAGSET,&DIAGTST,&FSW,&TEST
         GBLC  &CARRCON,&CSECT,&DSECT,&ITEM(2600)
         GBLC  &LABELS(2600),&LBL(100),&NRENTSX
         AIF   (&DIAGTST EQ 0).NOMSG
         AIF   (&INITIAL EQ 0).NOMSG
         AIF   (&DIAGLIN EQ 1).NOMSG
         MNOTE '**NO LINE ASSOCIATED WITH THIS ROUTINE**'
*****THE FOLLOWING GENERATED FOR TEST PURPOSES*****
*        LINE
         LINE
.NOMSG   ANOP
&NAME    DC    AL.12(&LOGITEM-&DSECT),XL.4'D'
         DC    AL2(&RNAME-&CSECT)
&NRENTS  SETA  &NRENTS+1
         MEND
         MACRO
         ITEMFIND &ARG,&ITFDIAG=
         GBLA  &BITS(2600),&DB,&DT,&INITIAL
         GBLA  &ITEMITR,&ITEMFST(20),&ITEMNBR,&ITEMMDX
         GBLA  &ITEMNDX(2600),&ITEMXPT
         GBLA  &LABELNR,&LASTCC,&LB,&LBLCTR(100),&LPTR,&LT
         GBLA  &NRENTS,&SHIFT(2600)
         GBLB  &DIAGITF,&DIAGLIN,&DIAGSET,&DIAGTST,&FSW,&TEST
         GBLC  &CARRCON,&CSECT,&DSECT,&ITEM(2600)
         GBLC  &LABELS(2600),&LBL(100),&NRENTSX
         LCLA  &A,&B,&X,&I
         LCLC  &C1,&C2,&S
         ACTR  100000
&ITEMXPT SETA  0                  INDICATE ITEM NOT FOUND.
         AIF   ('&ARG' NE '').NORM
         AIF   ('&ITFDIAG' EQ 'OFF'  OR  '&ITFDIAG' EQ 'ON').DIAGSET
  MNOTE 0,'ITEMFIND - OPERAND (&ITFDIAG) INVALID FOR ITFDIAG KEYWORD.'
         MEXIT
.DIAGSET ANOP
&DIAGITF SETB  ('&ITFDIAG' EQ 'ON')
         MEXIT
.NORM    AIF   (&ITEMITR GT 0).SORTED
         ITEMSORT
.SORTED  ANOP
&I       SETA  &ITEMITR           COMPUTED ITTERATION COUNT.
&X       SETA  &ITEMMDX           COMPUTED MAXIMUM INDEX.
&C1      SETC  '&ARG'             ISOLATE SEARCH ARGUMENT.
&C1      SETC  '&C1'.'       '(1,8-K'&C1) PAD TO FULL 8 CHARACTERS.
.SRCHUP  ANOP
&A       SETA  &A+&X              CURRENT TABLE SUBSCRIPT + INDEX.
&S       SETC  '+'
         AIF   (&A  GT &ITEMNBR  AND  NOT &DIAGITF).SRCHDN1
         AIF   (&A  LE &ITEMNBR).SRCH00
&C2      SETC  '*-OVER-*'
&I       SETA  &I-1               DECREMENT ITTERATION COUNTER.
&X       SETA  &X/2               HALVE INDEX VALUE.
 MNOTE *,'&ARG - &C2   ITRCTR = &I   PTR = &A&S &X'
         AIF   (&I GE 0).SRCHDWN  IF ITTERATION COUNT NOT EXPIRED.
.NOFIND  MNOTE  20,' ITEMFIND FAILED FOR NAME  &C1  '
         MEXIT
.SRCH00  ANOP
&I       SETA  &I-1               DECREMENT ITTERATION COUNTER.
         AIF   (&I LT 0).NOFIND   IF COUNT HAS GONE TO ZERO.
&X       SETA  &X/2               HALVE INDEX VALUE.
&B       SETA  &ITEMNDX(&A)       GET SUBSCRIPT FROM INDEX TABLE.
&C2      SETC  '&ITEM(&B)'.'       '(1,8-K'&ITEM(&B))  PAD COMPARAND.
         AIF   (NOT &DIAGITF).COMPARE
 MNOTE *,'&ARG - &C2   ITRCTR = &I   PTR = &A&S &X   POS = &B'
.COMPARE AIF   ('&C1' LT '&C2').SRCHDWN   ARGUMENT LOWER, MOVE DOWN.
         AIF   ('&C1' GT '&C2').SRCHUP    ARGUMENT HIGHER, MOVE UP.
&ITEMXPT SETA  &B                 FOUND. SET INDEX POINTER FOR RETURN.
&ITEMFST(&I+1)  SETA  &ITEMFST(&I+1)+1
         MEXIT
.SRCHDWN ANOP
&A       SETA  &A-&X              CURRENT POINTER MINUS INDEX VALUE.
&S       SETC  '-'
         AIF   (&A LE &ITEMNBR).SRCH00    IF WITHIN BOUNDS OF TABLE.
.SRCHDN1 ANOP
&I       SETA  &I-1               DECREMENT ITTERATION COUNTER.
&X       SETA  &X/2               HALVE INDEX VALUE.
         AIF   (&I GE 0).SRCHDWN  IF ITTERATION COUNT NOT EXPIRED.
         MNOTE  20,' ITEMFIND FAILED FOR NAME  &C1  '
         MEND
         MACRO
         ITEMSORT  &DUMMY
         GBLA  &BITS(2600),&DB,&DT,&INITIAL
         GBLA  &ITEMITR,&ITEMFST(20),&ITEMNBR,&ITEMMDX
         GBLA  &ITEMNDX(2600),&ITEMXPT
         GBLA  &LABELNR,&LASTCC,&LB,&LBLCTR(100),&LPTR,&LT
         GBLA  &NRENTS,&SHIFT(2600)
         GBLB  &DIAGITF,&DIAGLIN,&DIAGSET,&DIAGTST,&FSW,&TEST
         GBLC  &CARRCON,&CSECT,&DSECT,&ITEM(2600)
         GBLC  &LABELS(2600),&LBL(100),&NRENTSX
         LCLA  &R,&ZI,&I,&A1,&A2,&TEMP
         LCLB  &SR,&GOTO,&TB
         LCLB  &SW(3000)
         LCLC  &C1,&C2
         ACTR  100000
&A1      SETA  0
         AIF   (&ITEMITR EQ 0).LOOP0   TEST FOR RE-ENTRY.
 MNOTE   0,'ITEMSORT MACRO OCCURRS MORE THAN ONCE. TABLE NOT RESORTED.'
         MEXIT
.LOOP0   ANOP
&A1      SETA  &A1+1
&ITEMNDX(&A1) SETA &A1
         AIF   (&A1 LT &ITEMNBR).LOOP0
         AIF   (&ITEMNBR LT 2).MEXIT
&A1      SETA  &ITEMNBR/2         HALF OF TOTAL ENTRIES.
&A2      SETA  0
.LOOP1   ANOP
&A2      SETA  &A2+1
&SW(&A2) SETB  1                  SET FIRST HALF OF SWITCHES TO 1.
         AIF   (&A2 LT &A1).LOOP1
.LOOP2   ANOP
&A2      SETA  &A2+1
&SW(&A2) SETB  0                  SET SECOND HALF TO ZERO.
         AIF   (&A2 LT &ITEMNBR).LOOP2
&R       SETA  0                  SET R TO FIRST TRIAL ITEM.
&ZI      SETA  &ITEMNBR-1         SET ZI TO LAST ITEM.
&I       SETA  &ZI-1
.T3      ANOP
&SR      SETB  (&SW(&R+1))        GET FLAG, WHICH WAY TO GO?
&R       SETA  (&R*2)+1+&SR       R=2R+(1 OR 2)
         AIF   (&R LE &I).T3
.T4      ANOP
&R       SETA  (&R-1)/2           R=(R-1)/2
&SR      SETB  (&SW(&R+1))        GET SUBTREE SELECT FLAG.
         AIF   (&SR EQ 0).T7
         AIF   (&GOTO EQ 0).T5
.T7      ANOP
&A1      SETA  &ITEMNDX(&R+1)
&A2      SETA  &ITEMNDX(&ZI+1)
&C1      SETC  '&ITEM(&A1)'.'       '(1,8-K'&ITEM(&A1))
&C2      SETC  '&ITEM(&A2)'.'       '(1,8-K'&ITEM(&A2))
         AIF   ('&C1' LT '&C2').T8
.T9      ANOP
&TEMP    SETA  &ITEMNDX(&R+1)     Z(R) TO TEMP.
&TB      SETB  (&SW(&R+1))
&ITEMNDX(&R+1) SETA &ITEMNDX(&ZI+1)    Z(I) TO Z(R)
&SW(&R+1) SETB (&SW(&ZI+1))
&ITEMNDX(&ZI+1) SETA &TEMP        TEMP TO Z(I)
&SW(&ZI+1) SETB (&TB)
&SR      SETB  (&SR EQ 0)
&SW(&R+1) SETB (&SR)
.T8      AIF   (&R GT 0).T4
&GOTO    SETB  1                  SET 'GO TO' T7
&ZI      SETA  &ZI-1
&I       SETA  &I-1
         AIF   (&I GE 0).T3
.MEXIT   ANOP
&ITEMITR SETA 1
&ITEMMDX SETA 1
.ITRLOOP ANOP
&ITEMITR SETA &ITEMITR+1
&ITEMMDX SETA &ITEMMDX+&ITEMMDX
         AIF  (&ITEMMDX LT &ITEMNBR).ITRLOOP
&ITEMITR SETA &ITEMITR-1
&ITEMMDX SETA &ITEMMDX/2
&A1      SETA &ITEMNBR
&A2      SETA &ITEMMDX
&TEMP    SETA &ITEMITR
 MNOTE *,' ITEMS = &A1, MAX INDEX = &A2, ITTERATION COUNT = &TEMP'
         MEXIT
.T5      ANOP
&TEMP    SETA  &ITEMNDX(&R+1)     Z(R) TO TEMP.
&TB      SETB  (&SW(&R+1))
&ITEMNDX(&R+1) SETA &ITEMNDX(&ZI+1)    Z(I) TO Z(R)
&SW(&R+1) SETB (&SW(&ZI+1))
&ITEMNDX(&ZI+1) SETA &TEMP        TEMP TO Z(I)
&SW(&ZI+1) SETB (&TB)
&SR      SETB  (&SR EQ 0)
&SW(&R+1) SETB (&SR)
         AGO   .T3
         MEND
         MACRO
         LSTART ,
.*                            THIS MACRO IS ISSUED WHEN THE LABEL AREA
.*                                 OF THE TABLE IS TO BEGIN.
         GBLA  &BITS(2600),&DB,&DT,&INITIAL
         GBLA  &ITEMITR,&ITEMFST(20),&ITEMNBR,&ITEMMDX
         GBLA  &ITEMNDX(2600),&ITEMXPT
         GBLA  &LABELNR,&LASTCC,&LB,&LBLCTR(100),&LPTR,&LT
         GBLA  &NRENTS,&SHIFT(2600)
         GBLB  &DIAGITF,&DIAGLIN,&DIAGSET,&DIAGTST,&FSW,&TEST
         GBLC  &CARRCON,&CSECT,&DSECT,&ITEM(2600)
         GBLC  &LABELS(2600),&LBL(100),&NRENTSX
         LCLA  &NDX,&CTR
         ACTR  500000
         AIF   (&DIAGTST EQ 0).NODIAG
         AIF   (&DIAGSET EQ 0).NODIAG
         MNOTE '**NO LABEL ASSOCIATED WITH LAST SET**'
***** THE FOLLOWING GENERATED FOR TEST PURPOSES *****
*        LABEL '%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%'
               LABEL '%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%'
.NODIAG  ANOP
         LINEND
&CTR     SETA  1
.LOOP    ANOP
&NDX     SETA  &NDX+1
         AIF   (&LBLCTR(&CTR) NE &NDX).NOLBL
&LBL(&CTR) DC  C'&LABELS(&NDX)'
&CTR     SETA  &CTR+1
         AGO   .LOOPCTL
.NOLBL   ANOP
         DC    C'&LABELS(&NDX)'
.LOOPCTL AIF   (&NDX LT &LABELNR).LOOP
         MEND
         MACRO
         CONVT ,
         GBLA  &BITS(2600),&DB,&DT,&INITIAL
         GBLA  &ITEMITR,&ITEMFST(20),&ITEMNBR,&ITEMMDX
         GBLA  &ITEMNDX(2600),&ITEMXPT
         GBLA  &LABELNR,&LASTCC,&LB,&LBLCTR(100),&LPTR,&LT
         GBLA  &NRENTS,&SHIFT(2600)
         GBLB  &DIAGITF,&DIAGLIN,&DIAGSET,&DIAGTST,&FSW,&TEST
         GBLC  &CARRCON,&CSECT,&DSECT,&ITEM(2600)
         GBLC  &LABELS(2600),&LBL(100),&NRENTSX
         LCLB  &SUB
         LCLA  &OP
         LCLA  &OFFSET,&OUT,&IN,&IND,&IBITS,&ISHIFT
.*
.*       CONVERT BINARY TO DECIMAL
.*             &NAME IS THE REFERENCE INTO THE DSECT RECORD
.*             &OUT    IS THE NUMBER OF CHARS TO BE PUT ONTO PRINT LINE
.*                                      DEFAULT IS FOUR MAXIMUM IS 8
.*             &IN       IS THE NUMBER OF BYTES AS INPUT
.*                                      ERROR DEFAULT IS 2 MAXIMUM IS 4
.*
         AIF   (&DIAGTST EQ 0).NOMSG
         AIF   (&INITIAL EQ 0).NOMSG
         AIF   (&DIAGLIN EQ 1).NOMSG
         MNOTE '**NO LINE ASSOCIATED WITH THIS DATA**'
*****THE FOLLOWING GENERATED FOR TEST PURPOSES*****
*        LINE
         LINE
.NOMSG   ANOP
         AIF   (K'&SYSLIST(1) EQ K'&SYSLIST(1,1)).LLOP
&SUB     SETB  1
.LLOP    ANOP
&OP      SETA  &OP+1
&OUT     SETA  4                        .BR NOT NULL ELSE SET TO 4
         AIF   (&SUB EQ 1).SUBA
         AIF   ('&SYSLIST(3)' EQ '').B  TEST FOR NULL INPUT
&OUT     SETA  &SYSLIST(3)             SET &OUT FROM INPUT
         AGO   .A
.SUBA    AIF   ('&SYSLIST(&OP,3)' EQ '').B
&OUT     SETA  &SYSLIST(&OP,3)          SET &OUT FROM INPUT
.A       AIF   (&OUT GT 0 AND &OUT LT 9).B   TEST RANGE
.AERR    MNOTE '*** BYTES OUT INCORRECTLY SPECIFIED DEFAULT USED ***'
&OUT     SETA  4
.B       AIF   (&SUB EQ 1).SUBB
         AIF   ('&SYSLIST(2)' EQ '').LOOP    BRANCH IF NULL
&IN      SETA  &SYSLIST(2)              .SET &IN FROM INPUT
         AGO   .BB
.SUBB    AIF   ('&SYSLIST(&OP,2)' EQ '').LOOP
&IN      SETA  &SYSLIST(&OP,2)          .SET &IN FROM INPUT
.BB      AIF   (&IN GT 0 AND &IN LT 5).D     TEST RANGE
.BERR    MNOTE '*** BYTES IN INCORRECTLY SPECIFIED DEFAULT USED ***'
&IN      SETA  2
         AGO   .D
.LOOP    ANOP                           .LOOP TO FIND &NAME IN DSECT
&IND     SETA  &IND+1                   .SET UP LOOP COUNTER
         AIF   ('&ITEM(&IND)' EQ '&SYSLIST(&OP,1)').FOUND
         AIF   (&IND LT &ITEMNBR).LOOP  .TEST FOR END OF DSECT
         MNOTE '*** LOG ITEM NOT DEFINED ***'
         MEXIT
.FOUND   ANOP
&IBITS   SETA  &BITS(&IND)              .SET UP NUMBER OF BITS SPEC
         AIF   (&IBITS-((&IBITS/8)*8) EQ 0).C  .TEST FOR MULTIPLE OF 8
         MNOTE '*** DATA NOT DEFINED A MULTIPLE OF 8 BITS ***'
         MEXIT
.C       ANOP
&IN      SETA  &IBITS/8                 .COMPUTE NUMBER OF BYTES
         AIF   (&IN LT 1 OR &IN GT 4).BERR  .TEST RANGE B IF IN ERROR
&ISHIFT  SETA  &SHIFT(&IND)             .SET UP FOR TEST OF BYTE BNDR
         AIF   (&ISHIFT EQ 0).D         .TEST FOR BYTE BNDRY
         MNOTE '*** DATA NOT ALIGNED ON A BYTE BOUNDARY ***'
         MEXIT
.*
.D       ANOP
&NRENTS  SETA  &NRENTS+1
         DC    AL.12(&SYSLIST(&OP,1)-&DSECT),AL.4(9)
         DC    X'&IN',X'&OUT'
&IND     SETA  0
         AIF   (&SUB EQ 0).OUTA
         AIF   (&OP LT N'&SYSLIST).LLOP
.OUTA    ANOP
         MEND
         GBLC  &DSECT,&CSECT
&CSECT   SETC  'IFCEDDR0'
&DSECT   SETC  'RECORD'
IFCEDDR0 CSECT
********       D S E C T   G E N E R A T I O N   E N T R I E S   *****
RECORD   DSECT
         DS    0F
         DSGEN (LRBHTYPE,8),            TYPE OF RECORD                 X
               (LRBHSYS,8),             SYSTEM & RELEASE LEVEL         X
               (LRBHSW,8,0,3),          SWITCHES(4 OF EM)              X
               (LRBHCNT,8),             COUNT OF MULTI PART RECDS      X
               (LRBHRESV,8),            SPACE                          X
               (LRBHDATE,32),           DATE                           X
               (LRBHTIME,32),           TIME                           X
               (LRBHCPID,64)            STIDP OPERAND FIELD
         ORG   LRBHCPID
         DSGEN (LRBHVER,8),             UNDEFINED VERSION FIELD        X
               (LRBHCSER,24),           CPU SERIAL NUMBER              X
               (LRBHMDL,16),            CPU MODEL NUMBER               X
               (LRBHMCEL,16)            MAX MCEL LENGTH
MIHRECD  DSGEN (LRBNJOB,64),            JOBNAME                        X
               (LRBNCUA2,24),           CUA USED TO ADDRS DEVICE       X
               (LRBNCUA1,24),           PRIMARY CUA OF THE DEVICE      X
               (LRBNVOL,48),            VOL SER NUMBER                 X
               (LRBNDEVT,32),           UCB TYPE FIELD FOR DEVICE      X
               (LRBNINT,64)             TIME INTERVAL IN EBCDIC
         ORG   MIHRECD
DDRRECD  DSGEN (LRBRJOB,64),            JOBNAME USING 'FROM' DEV       X
               (LRBRVOL1,48),           VOL MOUNTED ON 'FROM' DEV      X
               (LRBRVOL2,48),           VOL MOUNTED ON 'TO' DEV        X
               (LRBRPH1,8),             PHYSICAL ID OF DEV(DASD)       X
               (LRBRCUA1,24),           PRIM CUA OF 'FROM' DEV         X
               (LRBRDEV1,32),           DEV TYPE OF 'FROM' DEV         X
               (LRBRPH2,8),             PHYSICAL ID OF 'TO' DEV        X
               (LRBRCUA2,24),           PRIM CUA OF 'TO' DEV           X
               (LRBRDEV2,32)            DEV TYPE OF 'TO' DEV
IFCEDDR0 CSECT
         USING IFCEDDR0,R9
         USING RECORD,R2
         DC    A(LLSET)
         DC    C'IFCEDDR0'
R9PTR    DC    F'0'                     LIST POINTER
LABLPTR  DC    F'0'                     LABEL POINTER
*                    RECORD TYPE KEYS
LRBHREC  EQU   X'60'                    RECONFIGURATION RECORD TYP
LRBHMIH  EQU   X'70'                    MISSING INTERRUPT RECD TYP
*                    SYSTEM & RELEASE LEVEL SUPPORTED
LRBHVS2  EQU   X'80'                    OS/VS2 BIT IN LRBHSYS BYTE
*                    RECONFIG RECORD DEPENDENT FIELDS IN LRBHSW1
LRBRPRIM EQU   X'80'                    PRIMARY STORAGE RECONFIG
LRBRSEC  EQU   X'40'                    SECONDARY STROAGE RECONFIG
LRBOPER  EQU   X'20'                    OPER REQUESTED RECONFIG
LRBRSYSI EQU   X'10'                    RECONFIG RESULTED FROM
*                                        PERMANENT ERROR
*                    MISSING INTERRUPT RECORD DEPENDENT FIELDS
*                      IN LRBHSW2
LRBNCEM  EQU   X'80'                    CHANNEL END INT PENDING
LRBNDEM  EQU   X'40'                    DEVICE END INT PENDING
*                    BRANCH ON CONDITION EQUATES
EQ       EQU   8                        EQUAL CONDITION
ONE      EQU   1                        ONES CONDITION AFTER TM
L0       EQU   0                        ZERO
L1       EQU   1                        ONE
L2       EQU   2                        TWO
L3       EQU   3                        THREE
L4       EQU   4                        FOUR
L5       EQU   5                        FIVE
L6       EQU   6                        SIX
L8       EQU   8                        EIGHT
MASK02   EQU   X'1F'                    MASK TO ZERO BITS 0-2 IN
ZONE     EQU   240
*                                         THE SYS & REL LEV FLD
*                    CHARACTER & STORAGE CONSTANTS
WORK     DC    D'0'
LINEDDR1 DC    A(LINEDDR-4)
LABLDDR1 DC    A(LABLDDR-1)
REGSAVE  DC    4F'0'
CHARMIH  DC    C'MIH'                   MISSING INTERRUPT RECORD
CHARDDR  DC    C'DDR'                   RECONFIGURED RECORD
NONE     DC    C'NONE'
RELTAB   DS    0C
         DC    C'OS  '
         DC    C'DOS '
         DC    C'VS 1'
         DC    C'V370'
         DC    C'VS 2'
         DC    C'    '
         DC    C'    '
         DC    C'    '
*                    REGISTER EQUATES & USAGE
R0       EQU   0
R1       EQU   1
R2       EQU   2                        DSECT POINTER
R3       EQU   3                        PRINT BUFFER POINTER
R4       EQU   4                        RECORD LOG POINTER
R5       EQU   5                        WORK
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9                        MODULE BASE REGISTER
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14                       RETURN TO CALLER
R15      EQU   15                       RETURN CODE
         EJECT
*                  SYSTEM & RELEASE LEVEL CONVERSION ROUTINE
SYSBITS  EQU   *
         STM   R5,R8,REGSAVE            SAVE REGS
         SR    R6,R6                    ZERO R6
         IC    R6,L0(R4)                GET SYS & REL BYTE
         SRDL  R6,L5                    SAVE REL NO IN R7
         SLL   R6,L2                    MULT SYS VALUE BY 4
         L     R8,LABLPTR               PICK UP LABEL POINTER
         LA    R6,RELTAB(R6)            INDEX TO SYS TABLE
         MVC   L0(L4,R8),L0(R6)         MOVE SYS NAME TO LABEL
         SR    R6,R6                    ZERO R6
         SLDL  R6,L5                    GET REL NO
         LTR   R6,R6                    IS IT ZERO ?
         BZ    NOREL                    YES, BRANCH
         CVD   R6,WORK                  NO, CONVERT IT
         UNPK  L0(L2,R3),WORK+L6(L2)    UNPACK IT INTO PRT BUFF
         MVZ   L1(L1,R3),L0(R3)         MOVE IN PROPER ZONE
RETURN   EQU   *                                               @YM5091P
         LM    R5,R8,REGSAVE            RESTORE REGS
         BR    R14                      RETURN
NOREL    EQU   *
         MVC   L0(L4,R3),NONE           MOVE 'NONE' INTO PRT BUFF
         B     RETURN                   RETURN                 @YM5091P
*                    MIH DDR DETERMINATION
CHKTYPE  EQU   *
         MVC   LINE01A(L3),CHARMIH      INDICATE MIH TYPE RECORD
         MVC   LINE01B(L3),CHARMIH
         CLI   L0(R4),LRBHMIH           IS IT REALLY MIH ?
         BE    CHKDONE                  YES, BRANCH
         MVC   LINE01A(L3),CHARDDR      NO, MUST BE DDR TYPE THEN
         MVC   LINE01B(L3),CHARDDR
CHKDONE  EQU   *
         BR    R14                      RETURN
*                    MOVE JOBNAME TO PRINT BUFFER
JOBNAME  EQU   *
         MVC   L0(L8,R3),L0(R4)         MOVE JOBNAME TO BUFFER
         BR    R14                      RETURN
*                    GET DATE INTO PROPER PLACES
DATESET  EQU   *
         STM   R3,R5,REGSAVE            SAVE THREE REGS
         LA    R5,65                    DECRAMENT VALUE IN REG
         SR    R3,R5                    DECRAMENT R3
         UNPK  WORK(L8),L1(L3,R4)       UNPACK THE DATE
         MVC   L0(L3,R3),WORK+L5        MOVE DAY
         MVC   L5(L2,R3),WORK+L3        MOVE YEAR
         LM    R3,R5,REGSAVE            RESTORE THREE REGS
         BR    R14                      RETURN
*                    MOVE TIME INTERVAL INTO BUFFER
MOVEINT  EQU   *
         MVC   L0(L8,R3),L0(R4)         MOVE TIME INTERVAL
         BR    R14
*                    MOVE VOLUME SERIAL NUMBER TO BUFFER
MOVEVOL  EQU   *
         MVC   L0(L6,R3),L0(R4)         MOVE VOLUME SERIAL NO.
         BR    R14
CHKTYPE2 EQU   *
         ST    R5,REGSAVE               SAVE A REG
         SR    R15,R15                  INDICATE NO PRINT OF THIS LINE
         CLI   L0(R4),LRBHMIH           RECORD TYPE = MIH ?
         BCR   EQ,R14                   YES, RETURN
         L     R5,LINEDDR1              NO, GET ADDR OF DDR
         ST    R5,R9PTR                  LINE/LABEL SETS
         L     R5,LABLDDR1              AND STORE THEM IN
         ST    R5,LABLPTR                PROPER POINTERS
         L     R5,REGSAVE               RESTORE A REG
         BR    R14                      RETYRN
*                    CHECK BITS IN LRBHSW1, DDR RECORD DEPENDENT FIELDS
CHK1     EQU   *
         TM    L0(R4),LRBRPRIM          PRINT THIS DDR REASON ?
         BCR   ONE,R14                  YES, BRANCH
         SR    R15,R15                  NO, INDICATE NO PRINT
         BR    R14
CHK2     EQU   *
         TM    L0(R4),LRBRSEC           PRINT THIS DDR REASON ?
         BCR   ONE,R14                  YES, BRANCH
         SR    R15,R15                  NO, INDICATE NO PRINT
         BR    R14
CHK3     EQU   *
         TM    L0(R4),LRBOPER           PRINT THIS DDR REASON ?
         BCR   ONE,R14                  YES, BRANCH
         SR    R15,R15                  NO, INDICATE NO PRINT
         BR    R14
CHK4     EQU   *
         TM    L0(R4),LRBRSYSI          PRINT THIS DDR REASON ?
         BCR   ONE,R14                  YES, BRANCH
         SR    R15,R15                  NO, INDICATE NO PRINT
         BR    R14
         EJECT
         DS    0F
LLSET    EQU   *
         DC    XL4'00'
         DC    XL4'00'
         DC    A(LABELS)
         DC    H'0'
         LINE  SKIP=E
         LABEL ''
         LINE  (58,20),(1,61),SKIP=2
         HEX   (LRBHMDL),(LRBHCSER)
         ROUTINE LRBHTYPE,CHKTYPE
LINE01   LABEL  '--- RECORD ENTRY TYPE - XXX   SOURCE - XXX   MODEL -',X
               'SERIAL NO.'
         LINE  (16,1),(4,1),SKIP=2
         ROUTINE LRBHSYS,SYSBITS
         LABEL 'XXXX REL.'
         LINE  (69),(31),SKIP=2
         ROUTINE LRBNJOB,JOBNAME
         LABEL 'DAY YEAR   HH.MM.SS.TH   JOB IDENTITY'
         LINE  (42,27),(1),SKIP=2
         HEX   LRBHTIME,1,4B
         HEX   LRBNJOB,0,8B
         ROUTINE LRBHDATE,DATESET
         LABEL ''
         LINE  (30),(2),SKIP=1
         ROUTINE LRBHTYPE,CHKTYPE2
         LABEL ''
         LINE  (35),(2),SKIP=1                                 @YM5091P
         HEX   LRBNDEVT,0,4B
         LABEL 'UCB DEVICE TYPE'
         LINE  (37),(2),SKIP=1                                 @YM5091P
         HEX   LRBNCUA1,0,3B                                   @YM5091P
         LABEL 'PRIMARY   CHANNEL UNIT ADDRESS'                @YM5091P
         LINE  (37),(2),SKIP=1                                 @YM5091P
         HEX   LRBNCUA2,0,3B                                   @YM5091P
         LABEL 'ALTERNATE CHANNEL UNIT ADDRESS'                @YM5091P
         LINE  (41),(2),SKIP=2                                 @YM5091P
         HEX   LRBHSW2,0,1B
         LABEL 'MISSING INTERRUPT'
         LINE  (35),(2),SKIP=2                                 @YM5091P
         ROUTINE LRBNINT,MOVEINT
         LABEL 'TIME INTERVAL'
         LINE  (37),(2),SKIP=2                                 @YM5091P
         ROUTINE LRBNVOL,MOVEVOL
         LABEL 'VOLUME SERIAL NUMBER'
         LINE  SKIP=1
         LABEL ''
* END OF LINE/LABEL SETS FOR MIH        * THATS ALL FOR MIH ! *
         DC    X'FF'
MIHSIZE  DC    X'0038'                  SIZE OF LOGOUT
         DC    X'0018'                  OFFSET IN RECORD
         DC    X'0000'                  ADDRESS START
*
LINEDDR  EQU   *
         LINE  (30,57),(2,59),SKIP=1
         HEX   (LRBRDEV1,0,4B),(LRBRDEV2,0,4B)
LABLDDR  LABEL 'FROM UCB DEVICE TYPE','TO UCB DEVICE TYPE'
         LINE  (32,57),(2,59),SKIP=1                           @YM5091P
         HEX   LRBRCUA1,0,3B                                   @YM5091P
         HEX   LRBRCUA2,0,3B                                   @YM5091P
         LABEL 'FROM CHANNEL UNIT ADDRESS','TO CHANNEL UNIT ADDRESS'
         LINE  (32,57),(2,59),SKIP=1
         ROUTINE LRBRVOL1,MOVEVOL
         ROUTINE LRBRVOL2,MOVEVOL
         LABEL 'FROM VOLUME SERIAL NUMBER','TO VOLUME SERIAL NUMBER'
         LINE  (36,57),(2,59),SKIP=2
         HEX   (LRBRPH1,0,1B),(LRBRPH2,0,1B)
         LABEL 'FROM PHYSICAL ID','TO PHYSICAL ID'
         LINE  (36),(2),SKIP=2
         HEX   LRBHSW1,0,1B
         LABEL 'RECORD DEPENDENT SWITCH'
         LINE  ,(2),SKIP=2
         ROUTINE LRBHSW1,CHK1
         LABEL 'PRIMARY STORAGE RECONFIGURATION'
         LINE  ,(2),SKIP=2
         ROUTINE LRBHSW1,CHK2
         LABEL 'SECONDARY STORAGE RECONFIGURATION'
         LINE  ,(2),SKIP=2
         ROUTINE LRBHSW1,CHK3
         LABEL 'RCONFIGURATION PERFORMED AT THE REQUEST OF OPERATOR'
         LINE  ,(2),SKIP=2
         ROUTINE LRBHSW1,CHK4
         LABEL 'RECONFIGURATION PERFORMED AS A RESULT OF A PERMANENT ERX
               ROR'
         LINE  SKIP=1
         LABEL ''
* END OF LINE/LABEL SETS FOR DDR        * THATS ALL FOR DDR ! *
         DC    X'FF'
DDRSIZE  DC    X'003C'                  SIZE OF LOGOUT
         DC    X'0018'                  OFFSET IN RECORD
         DC    X'0000'                  ADDRESS START
LABELS   DS    0F
         LSTART
LINE01A  EQU   LINE01+24                RECORD TYPE OFFSET
LINE01B  EQU   LINE01+39                RECORD TYPE OFFSET
         END
