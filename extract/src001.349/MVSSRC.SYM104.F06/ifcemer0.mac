*    DSGEN  MACRO       D S G E N   M A C R O           DSGEN  MACRO
         SPACE
         MACRO
&NAME    DSGEN ,
.*                            THIS MACRO GENERATES ONE DSECT WORD
.*                                 FORMATTED FOR THE SUBJECT LOG RECORD
.*                                 EACH OPERAND HAS TWO SUB LISTS. THE
.*                                 FIRST IS THE NAME OF THE LOG ITEM
.*                                 WHILE THE SECOND IS THE # OF BITS TO
.*                                 ALLOCATE FOR THIS ITEM. ITEMS MUST
.*                                 BE DEFINED CONTIGUOUSLY WITHOUT GAPS
.*                                 UNUSED BIT GROUPS MUST BE GIVEN
.*                                 DUMMY NAMES. THE NAMES PROVIDED FOR
.*                                 THE LOG ITEMS MAY THEN BE USED IN
.*                                 THE CONVERSION MACRO INSTRUCTIONS.
         GBLA  &BITS(1000),&ITEMNBR,&SHIFT(1000)               @Y30LPDS
         GBLC  &ITEM(1000)                                     @Y30LPDS
         LCLB  &ONLY1,&CTIND                                   @Y30LPDS
         LCLA  &START1,&START2,&END1,&END2                     @Y30LPDS
         LCLC  &SYMBOL,&EQUSYM                                 @Y30LPDS
         LCLA  &OP,&COUNT,&BYTE,&EQUCNT                        @Y30LPDS
         ACTR  500000                                          @Y30LPDS
.START   AIF   (N'&SYSLIST(&OP+1) LT 3).LOOP                   @Y30LPDS
         AIF   ('&SYSLIST(&OP+1,3)' EQ 'EQU').LOOP     TEST FOR EQU
  AIF   ('&SYSLIST(&OP+1,3)' EQ '' OR '&SYSLIST(&OP+1,4)' EQ '').ERR1
         AIF   ('&SYSLIST(&OP+1,3)' GT '&SYSLIST(&OP+1,4)').ERR3
&START1  SETA  &SYSLIST(&OP+1,3)        GET START COUNT OF 1   @Y30LPDS
&START2  SETA  &SYSLIST(&OP+1,4)        GET FIRST END COUNT    @Y30LPDS
         AGO   .SET2A                   BRANCH AROUND          @Y30LPDS
.ERR1    MNOTE '**FIRST SYMBOL CONCATENATION INCOMPLETE**'     @Y30LPDS
         MEXIT                                                 @Y30LPDS
.SET2A   AIF   ('&SYSLIST(&OP+1,5)' EQ ''AND '&SYSLIST(&OP+1,6)' EQ '' X
               ).SET2                   TEST FOR NO SECOND     @Y30LPDS
  AIF   ('&SYSLIST(&OP+1,5)' EQ '' OR '&SYSLIST(&OP+1,6)' EQ '').ERR2
         AIF   ('&SYSLIST(&OP+1,5)' GT '&SYSLIST(&OP+1,6)').ERR3
&END1    SETA  &SYSLIST(&OP+1,5)        GET START COUNT OF 2   @Y30LPDS
&END2    SETA  &SYSLIST(&OP+1,6)        GET END COUNT OF 2     @Y30LPDS
         AGO   .LOOP                                           @Y30LPDS
.SET2    ANOP                                                  @Y30LPDS
&ONLY1   SETB  1                        INDICATE ONLY ONE CONCATENATION
         AGO   .LOOP                                           @Y30LPDS
.ERR2    MNOTE '**SECOND SYMBOL CONCATENATION INCOMPLETE**'    @Y30LPDS
         MEXIT                                                 @Y30LPDS
.ERR3    MNOTE '**START GREATER THAN END CONCATENATION**'      @Y30LPDS
         MEXIT                                                 @Y30LPDS
.LOOP    ANOP                                                  @Y30LPDS
&OP      SETA  &OP+1                                           @Y30LPDS
         AIF   (&OP GT N'&SYSLIST).DONE      TEST IF ALL DONE  @Y30LPDS
&ITEMNBR SETA  &ITEMNBR+1                                      @Y30LPDS
         AIF   ('&SYSLIST(&OP,2)' NE '').OK1                   @Y30LPDS
         MNOTE '**NULL BIT COUNT FIELD**'                      @Y30LPDS
         MEXIT                                                 @Y30LPDS
.OK1     ANOP                                                  @Y30LPDS
&SYMBOL  SETC  '&SYSLIST(&OP,1)'                               @Y30LPDS
         AIF   ('&SYMBOL' NE '').OK                            @Y30LPDS
*              *****     LOG ITEM SYMBOL NOT PROVIDED     *****
         AIF   ('&SYSLIST(&OP,3)' NE 'EQU').CNT                @Y30LPDS
         AGO   .START                   GET NEXT               @Y30LPDS
.OK      AIF   (N'&SYSLIST(&OP) LT 3).NO3    TEST FOR OLD FORMAT
         AIF   ('&SYSLIST(&OP,3)' EQ 'EQU').EQU   TEST FOR EQU @Y30LPDS
         AIF   (&ONLY1).OK2             TEST FOR ONLY ONE CONCAT
&SYMBOL  SETC  '&SYMBOL.&START1.&END1'       GET 1 AND 2 CONCAT
         AGO   .NO3                     BRANCH AROUND          @Y30LPDS
.OK2     ANOP                                                  @Y30LPDS
&SYMBOL  SETC  '&SYMBOL.&START1'        GET 1 CONCATENATED     @Y30LPDS
.NO3     ANOP                                                  @Y30LPDS
&SYMBOL  EQU   *+&BYTE                                         @Y30LPDS
&ITEM(&ITEMNBR) SETC '&SYMBOL'          GET LABEL IN GLOBAL    @Y30LPDS
&BITS(&ITEMNBR) SETA &SYSLIST(&OP,2)                           @Y30LPDS
&SHIFT(&ITEMNBR) SETA &COUNT-&BYTE*8                           @Y30LPDS
.CNT     ANOP                                                  @Y30LPDS
&CTIND   SETB  1                        SET COUNT INDICATOR    @Y30LPDS
&COUNT   SETA  &COUNT+&SYSLIST(&OP,2)                          @Y30LPDS
&BYTE    SETA  &COUNT/8                                        @Y30LPDS
         AIF   (N'&SYSLIST(&OP) LT 3).START  TEST FOR OLD FORMAT
         AIF   (&ONLY1).TSTST           TEST FOR ONLY ONE CONCAT
         AIF   (&END1 EQ &END2).TSTST   TEST FOR SECOND END    @Y30LPDS
&END1    SETA  &END1+1                  INCREMENT COUNT        @Y30LPDS
&OP      SETA  &OP-1                    DECREMENT INCREMENT    @Y30LPDS
         AGO   .LOOP                    GENERATE NEXT          @Y30LPDS
.TSTST   ANOP                                                  @Y30LPDS
         AIF   (&START1 EQ &START2).LPDONE   TEST FOR END      @Y30LPDS
         AIF   (&ONLY1).NSET1           TEST FOR ONLY ONE CONCAT
&END1    SETA  &SYSLIST(&OP,5)          RE-INIT SECOND START COUNT
.NSET1   ANOP                                                  @Y30LPDS
&OP      SETA  &OP-1                    DECREMENT INDEX        @Y30LPDS
&START1  SETA  &START1+1                INCREMENT FIRST COUNT  @Y30LPDS
         AGO   .LOOP                    GO DO NEXT             @Y30LPDS
.LPDONE  ANOP                                                  @Y30LPDS
&ONLY1   SETB  0                        CLEAR INDICATOR        @Y30LPDS
         AGO   .START                   GO TEST FOR MORE SUB-LISTS
.DONE    AIF   (&COUNT-&COUNT/8*8 NE 0).ERR  TEST FOR MULTIPLE OF EIGHT
         AIF   (&CTIND EQ 0).END        NO DS IF NO COUNT      @Y30LPDS
&COUNT   SETA  &COUNT/8                 GET NUMBER OF BYTES    @Y30LPDS
&NAME    DS    &COUNT.C                                        @Y30LPDS
.END     MEXIT                                                 @Y30LPDS
.ERR     MNOTE '**BIT COUNT FLDS DO NOT TOTAL MULTIPLE OF 8**' @Y30LPDS
         MEXIT                                                 @Y30LPDS
.EQU     AIF   ('&SYSLIST(&OP,4)' NE '').EQU1     TEST FOR NULL LABEL
.ERR4    MNOTE '**EQU OPERAND OMITTED OR NOT FOUND**'          @Y30LPDS
         MEXIT                                                 @Y30LPDS
.EQU1    AIF   (&SYSLIST(&OP,2) LT 16).EQU2  COUNT OVER FIFTEEN
*****               THE FOLLOWING STATEMENT                *****
*****     NUMBER OF BITS EXCEED 15 - DO NOT USE AS BIN     *****
.EQU2    ANOP                                                  @Y30LPDS
&EQUCNT  SETA  0                        CLEAR COUNTER          @Y30LPDS
&EQUSYM  SETC  '&SYSLIST(&OP,4)'        GET EQU OPERAND        @Y30LPDS
.EQULOP  ANOP                                                  @Y30LPDS
&EQUCNT  SETA  &EQUCNT+1                INCREMENT INDEX        @Y30LPDS
         AIF   ('&ITEM(&EQUCNT)' EQ '&EQUSYM').EQUOUT  LABEL FOUND?
         AIF   (&EQUCNT EQ &ITEMNBR).ERR4    ALL TESTED?       @Y30LPDS
         AGO   .EQULOP                  NO-GET NEXT            @Y30LPDS
.EQUOUT  ANOP                                                  @Y30LPDS
&ITEM(&ITEMNBR) SETC '&SYMBOL'          GET LABEL NAME         @Y30LPDS
&BITS(&ITEMNBR) SETA &SYSLIST(&OP,2)    GET NUMBER OF BITS     @Y30LPDS
&SHIFT(&ITEMNBR) SETA &SHIFT(&EQUCNT)   GET SHIFT COUNT        @Y30LPDS
&SYMBOL  EQU   &EQUSYM                  THIS SYMBOL EQUATED    @Y30LPDS
         AGO   .START                   RETURN FOR NEXT        @Y30LPDS
         MEND                                                  @Y30LPDS
         EJECT
*  LINE MACRO     LINE MACRO     LINE MACRO     LINE MACRO            *
         SPACE 2
         MACRO
&NAME    LINE  &DATA,&LABEL,&SKIP=
.*                            THIS MACRO ESTABLISHES THE MARGINS OR
.*                                 COLUMN SETTINGS FOR EACH LINE. IT
.*                                 GENERATES NECESSARY CARRIAGE CONTROL
.*                                 ENTRIES. LASTLY IT DETERMINES THE
.*                                 NUMBER OF ENTRIES ASSOCIATED WITH
.*                                 THE PREVIOUS LINE AND STORES THAT #
.*                                 INTO THE APPROPRIATE BYTE.
.*                            &DATA(1) - CHARACTER POSITION TO BEGIN
.*                                 DATA.
.*                            &DATA(2) - # OF SPACES BETWEEN SUCCESSIVE
.*                                 DATA COLUMN STARTING CHARACTERS.
.*                            &LABEL(1) - CHAR. POS. TO BEGIN LABELS.
.*                            &LABEL(2) - # SPACES BETWEEN LINE'S LABEL
.*                                 STARTING CHARACTERS.
.*                            &SKIP= - # OF LINES TO ADVANCE CARRIAGE
.*                                 TO BEGIN NEXT PRINTED LINE.
.*                            NEW ENTRIES ARE GENERATED ONLY WHEN
.*                                 NECESSARY. OMISSION OF ITEMS MEANS
.*                                 THEY HAVE NOT CHANGED SINCE PREVIOUS
.*                                 SETTINGS. A LINE MACRO IS REQUIRED
.*                                 FOR EACH PRINTED LINE. IF NO SETTING
.*                                 CHANGES ARE REQUIRED ALL OPERANDS
.*                                 ARE OMITTED IN WHICH CASE ONLY THE
.*                                 # OF ENTRIES FOR THE PREVIOUS LINE
.*                                 IS COMPUTED. THIS MACRO MUST BE THE
.*                                 FIRST MACRO INSTRUCTION ISSUED FOR
.*                                 THE SUBJECT LINE
         GBLA  &DB,&DT,&LB,&LT,&NRENTS
         GBLA  &LASTCC,&INITIAL
         GBLC  &NRENTSX
         GBLC  &CARRCON
         GBLB  &TEST
         LCLA  &S
&NAME    DS    0C
         AIF   (&INITIAL EQ 0).FIRSTLN
         LINEND
         AGO   .NTFIRST
.FIRSTLN ANOP
&NRENTSX SETC  'N&SYSNDX'
&INITIAL SETA  1
N&SYSNDX EQU   *
.NTFIRST ANOP
         DC    AL1(0)
         AIF   ('&DATA(1)' EQ '').CKDTABS
         AIF   (&DATA(1) EQ &DB).CKDTABS
&DB      SETA  &DATA(1)
         AGO   .AA
.CKDTABS AIF   ('&DATA(2)' EQ '').NCDATA
         AIF   (&DATA(2) EQ &DT).NCDATA
         AGO   .CC
.AA      AIF   ('&DATA(2)' EQ '').BB
         AIF   (&DATA(2) EQ &DT).BB
.CC      ANOP
&DT      SETA  &DATA(2)
.BB      DC    XL2'FFFE'
         DC    FL1'&DB'
         DC    FL1'&DT'
&NRENTS  SETA  &NRENTS+1
.NCDATA  ANOP
         AIF   ('&LABEL(1)' EQ '').CKLTABS
         AIF   (&LABEL(1) EQ &LB).CKLTABS
&LB      SETA  &LABEL(1)
         AGO   .AAA
.CKLTABS AIF   ('&LABEL(2)' EQ '').NCLABEL
         AIF   (&LABEL(2) EQ &LT).NCLABEL
         AGO   .CCC
.AAA     AIF   ('&LABEL(2)' EQ '').BBB
         AIF   (&LABEL(2) EQ &LT).BBB
.CCC     ANOP
&LT      SETA  &LABEL(2)
.BBB     DC    XL2'FFFF'
         DC    FL1'&LB'
         DC    FL1'&LT'
&NRENTS  SETA  &NRENTS+1
.NCLABEL ANOP
         AIF   ('&SKIP' NE '').CONT
         AIF   (&TEST EQ 0).NOCHANG
&S       SETA  &LASTCC
         AGO   .DEFAULT
.CONT    ANOP
         AIF   (&TEST EQ 0).AB
&S       SETA  &SKIP
.DEFAULT ANOP
         ORG   &CARRCON+3
         DC    AL.3(0),AL.2(&S),AL.3(1)
         ORG
&LASTCC  SETA  &S
&TEST    SETB  0
         AGO   .DD
.AB      AIF   (&SKIP EQ &LASTCC).NOCHANG
A&SYSNDX DC    XL2'FFFB'
         DC    AL.3(0),AL.2(&SKIP),AL.3(1)
         DC    FL1'9'
&LASTCC  SETA  &SKIP
&TEST    SETB  1
&CARRCON SETC  'A&SYSNDX'
&NRENTS  SETA  &NRENTS+1
.DD      ANOP
.NOCHANG ANOP
         MEND
         EJECT
*  BIN MACRO     BIN MACRO     BIN MACRO     BIN MACRO     BIN MACRO  *
         SPACE 2
         MACRO
         BIN   &LOGITEM,&SKIP$OR
.*                                 &LOGITEM - NAME OF ITEM IN LOG
.*                                      RECORD DSECT
.*                                 &SKIP$OR - NBR OF SPACES TO SKIP ON
.*                                 MULTIPLE PRINT OR NBR OF SPACES
.*                                      TO BACK UP FROM COLUMN FOR
.*                                      START OF PRINTING. THE LETTER
.*                                      B PRECEEDS THE NUMBER (B5) IF
.*                                      THE LATTER IS DESIRED. OMISSION
.*                                      OF THIS OPERAND FORCES OPTION 2
.*                                      WITH BACKUP SPACING EQUAL TO
.*                                 THE NUMBER OF BITS IN THE ITEM
.*                                 DEFINITION (VIA MACRO 'DSGEN').
.*                            A LIMIT OF 15 BITS IS IMPOSED FOR THE
.*                                 TOTAL NUMBER OF BITS TO PRINT.
         GBLC &ITEM(1000)
         GBLA &ITEMNBR,&BITS(1000),&SHIFT(1000),&NRENTS
         GBLC  &DSECT
         LCLB  &B
         LCLA  &IBITS,&NDX,&ISHIFT,&K
         LCLA  &TEMP,&T
         LCLC  &S
.LOOP    ANOP
&NDX     SETA  &NDX+1
         AIF   ('&ITEM(&NDX)' EQ '&LOGITEM').FOUND
         AIF   (&NDX LT &ITEMNBR).LOOP
         MNOTE *,'YOU BLEW IT'
         ROUTINE DUM,SKIPPER
         MEXIT
.FOUND   ANOP
&ISHIFT  SETA  &SHIFT(&NDX)
&IBITS   SETA  &BITS(&NDX)
&T       SETA  &IBITS-1
&B       SETB  0
         AIF   ('&SKIP$OR' EQ '').BACKUP
&K       SETA  K'&SKIP$OR
&B       SETB  ('&SKIP$OR'(1,1) EQ 'B')
&S       SETC  '&SKIP$OR'(&B+1,&K-&B)
&T       SETA  &S
.BACKUP  ANOP
&NRENTS  SETA  &NRENTS+1
&TEMP    SETA  &ISHIFT
A&SYSNDX DC    AL.12(&LOGITEM-&DSECT),XL.4'&TEMP'
         AIF (&IBITS EQ 1 AND &B EQ 0).OUT
         ORG   A&SYSNDX
&B       SETB  1
         DC    AL.12(&LOGITEM-&DSECT),XL.4'C'
         DC    BL.1'&B',AL.7(&T),AL.4(&IBITS),FL.4'&ISHIFT'
.OUT     ANOP
         MEND
         EJECT
*  HEX MACRO     HEX MACRO     HEX MACRO    HEXN MACRO     HEX MACRO  *
         SPACE 2
         MACRO
         HEX   &LOGITEM,&SKIP$OR,&BYTES
.*                            THIS MACRO FACILITATES GENERATION OF THE
.*                                 TABLE ENTRIES SPECIFYING HEX TYPE
.*                                 CONVERSIONS.
.*                            &LOGITEM - NAME OF DATA ITEM TO BE
.*                                 CONVERTED
.*                            &SKIP$OR - NUMBER OF SPACES TO SKIP ON
.*                                 MULTIPLE PRINT OR NBR OF SPACES TO
.*                                 BACK UP FROM COLUMN FOR START OF
.*                                 PRINTING. THE LETTER B PRECEEDS THE
.*                                 NUMBER (B8) IF THE LATTER OPTION IS
.*                                 DESIRED. OMISSION OF THIS OPERAND
.*                                 FORCES OPTION 2 WITH BACKUP SPACING
.*                                 EQUAL TO THE NUMBER OF BYTES SPECI-
.*                                 FIED BY THE NEXT OPERAND (TWICE THIS
.*                                 NUMBER IF SUFFIX IS EXPLICITLY OR
.*                                 IMPLICITLY B).
.*                            &BYTES - NUMBER OF TOTAL INPUT BYTES TO
.*                                 PROCESS. THIS NUMBER IS SUFFIXED
.*                                 WITH AN L,R, OR B TO STIPULATE
.*                                 PRINTING OF THE LEFT HALF, RIGHT
.*                                 HALF, OR BOTH HALVES OF THE BYTE
.*                                 RESPECTIVELY. OMISSION OF THIS
.*                                 OPERAND DEFAULTS TO B WITH THE NUM-
.*                                 BER OF BYTES EQUAL TO THE ITEM LNGTH
.*                            A NEW ENTRY IS GENERATED ONLY WHEN NECES-
.*                                 SARY. THIS MACRO MUST BE THE FIRST
.*                                 MACRO INSTRUCTION ISSUED FOR THE
.*                                 SUBJECT LINE(S).
         GBLC &ITEM(1000),&DSECT
         GBLA &ITEMNBR,&BITS(1000),&SHIFT(1000),&NRENTS
         LCLB  &B
         LCLA  &IBITS,&NDX,&ISHIFT,&K,&T,&CODE,&BYTESP
         LCLC  &S,&LETTER
.LOOP    ANOP
&NDX     SETA  &NDX+1
         AIF   ('&ITEM(&NDX)' EQ '&LOGITEM').FOUND
         AIF   (&NDX LT &ITEMNBR).LOOP
         MNOTE *,'LOG ITEM NOT DEFINED'
         MEXIT
.FOUND   ANOP
&ISHIFT  SETA  &SHIFT(&NDX)
&IBITS   SETA  &BITS(&NDX)
&CODE    SETA  1
&K       SETA  K'&BYTES
         AIF   (&IBITS-(&IBITS/4)*4 EQ 0).OK
         MNOTE *,'BIT LENGTH SPECIFICATION INCONSISTENT WITH CONTROL'
         MEXIT
.OK      AIF   ('&BYTES' EQ '').USEDEFN
&LETTER  SETC  '&BYTES'(&K,1)
&S       SETC  '&BYTES'(1,&K-1)
&BYTESP  SETA  &S
         AIF   ('&LETTER' EQ 'B').BOTH
         AIF   (&ISHIFT EQ 0 OR &ISHIFT EQ 4).OK2
.ERR     MNOTE *,'DATA NOT ALLIGNED ON HEX OR BYTE BOUNDARY'
         MEXIT
.USEDEFN ANOP
&BYTESP  SETA  &IBITS/8
.BOTH    AIF   (&ISHIFT NE 0).ERR
&CODE    SETA  3
&T       SETA  &BYTESP*2-1
&S       SETC  '&T'
.OK2     AIF   (&ISHIFT EQ 0).L
&CODE    SETA  2
.L       ANOP
&B       SETB  1
         AIF   ('&SKIP$OR' EQ '').BACKUP
&K       SETA  K'&SKIP$OR
&B       SETB  ('&SKIP$OR'(1,1) EQ 'B')
&S       SETC  '&SKIP$OR'(&B+1,&K-&B)
.BACKUP  ANOP
&NRENTS  SETA  &NRENTS+1
         DC    AL.12(&LOGITEM-&DSECT),XL.4'A'
         DC    BL.1'&B',FL.7'&S',FL.4'&BYTESP',FL.4'&CODE'
.OUT     ANOP
         MEND
         SPACE 2
*  ROUTINE MACRO     ROUTINE MACRO     ROUTINE MACRO     ROUTINE MACRO*
         SPACE 2
         MACRO
&NAME    ROUTINE &LOGITEM,&RNAME
         GBLC  &DSECT,&CSECT
         GBLC  &ITEM(1000)
         GBLA  &SHIFT(1000),&ITEMNBR
         GBLA  &NRENTS
         LCLA  &ISHIFT,&NDX
.LOOP    ANOP
&NDX     SETA  &NDX+1
         AIF   ('&ITEM(&NDX)' EQ '&LOGITEM').FOUND
         AIF   (&NDX LT &ITEMNBR).LOOP
         MNOTE *,'LOG ITEM NOT DEFINED'
         MEXIT
.FOUND   ANOP
&ISHIFT  SETA  &SHIFT(&NDX)
&NAME    DC    AL.12(&LOGITEM-&DSECT),XL.4'D'
         DC    AL.4(&ISHIFT),AL.12(&RNAME-&CSECT)
&NRENTS  SETA  &NRENTS+1
         MEND
         EJECT
*    LABEL  MACRO       L A B E L   M A C R O      LABEL  MACRO
         SPACE 2
         MACRO                                                 @Y30LPDS
&NAME    LABEL &LABEL1,&LABEL2,&LABEL3,&LABEL4,&LABEL5,&LABEL6,        C
               &LABEL7,&LABEL8                                 @Y30LPDS
.*                                 THIS MACRO ALLOWS LABELS TO @Y30LPDS
.*                                 BE SPECIFIED FOR A GIVEN LINE. THE
.*                                 LABELS SHOULD BE ENCLOSED IN QUOTA-
.*                                 TION MARKS. THE COLUMN AND LINE END
.*                                 CONTROLS WILL BE INSERTED BY THE
.*                                 MACRO. OMITTED OPERANDS MEAN NO
.*                                 LABEL REQUIRED FOR RESPECTIVE
.*                                 COLUMN.                     @Y30LPDS
         GBLC &LABELS(1000)                                    @Y30LPDS
         GBLC  &LBL(100)                                       @Y30LPDS
         GBLA  &LBLCTR(100)                                    @Y30LPDS
         GBLA  &LABELNR                                        @Y30LPDS
         GBLA  &NRENTS,&LPTR,&INITIAL                          @Y30LPDS
         GBLB  &DIAGTST,&DIAGSET,&DIAGLIN                      @Y30LPDS
         LCLC  &MARGIN,&TACK                                   @Y30LPDS
         LCLC  &TEXT                                           @Y30LPDS
         LCLA  &OP,&K,&START,&NRCHAR,&REMAIN                   @Y30LPDS
         AIF   (&INITIAL EQ 0).DIAGCLR                         @Y30LPDS
         AIF   (&DIAGTST EQ 0).DIAGCLR                         @Y30LPDS
         AIF   (&DIAGLIN EQ 1).DIAGCLR                         @Y30LPDS
         MNOTE '**NO LINE ASSOCIATED WITH PREVIOUS LABEL**'    @Y30LPDS
***** THE FOLLOWING GENERATED FOR TEST PURPOSES *****          @Y30LPDS
*        LINE                                                  @Y30LPDS
         LINE                                                  @Y30LPDS
.DIAGCLR ANOP                                                  @Y30LPDS
&DIAGSET SETB  0                                               @Y30LPDS
&DIAGLIN SETB  0                                               @Y30LPDS
&MARGIN  SETC  '*'                                             @Y30LPDS
         AIF   ('&NAME' EQ '').LOOPOUT                         @Y30LPDS
&LPTR    SETA  &LPTR+1                                         @Y30LPDS
&LBL(&LPTR) SETC '&NAME'                                       @Y30LPDS
&LBLCTR(&LPTR) SETA &LABELNR+1                                 @Y30LPDS
.LOOPOUT ANOP                                                  @Y30LPDS
&OP      SETA  &OP+1                                           @Y30LPDS
&K       SETA  K'&SYSLIST(&OP)                                 @Y30LPDS
         AIF (&K GE 2).NORM                                    @Y30LPDS
&K       SETA  2                                               @Y30LPDS
.NORM    ANOP                                                  @Y30LPDS
&START   SETA  2                                               @Y30LPDS
         AIF (&OP LT N'&SYSLIST).NOTLAST                       @Y30LPDS
&MARGIN  SETC  '$'                                             @Y30LPDS
.NOTLAST ANOP                                                  @Y30LPDS
&NRCHAR  SETA  8                                               @Y30LPDS
&TACK    SETC  ''                                              @Y30LPDS
.LOOPIN  ANOP                                                  @Y30LPDS
&REMAIN  SETA  &K-&START                                       @Y30LPDS
         AIF (&REMAIN GE 8).MORE                               @Y30LPDS
&TACK    SETC  '&MARGIN'                                       @Y30LPDS
&NRCHAR  SETA  &REMAIN                                         @Y30LPDS
.MORE    ANOP                                                  @Y30LPDS
&TEXT    SETC  ''                                              @Y30LPDS
         AIF (&REMAIN EQ 0).ENDTEXT                            @Y30LPDS
&TEXT    SETC  '&SYSLIST(&OP)'(&START,&NRCHAR)                 @Y30LPDS
.ENDTEXT ANOP                                                  @Y30LPDS
&LABELNR SETA  &LABELNR+1                                      @Y30LPDS
&LABELS(&LABELNR) SETC '&TEXT'.'&TACK'                         @Y30LPDS
&START   SETA  &START+8                                        @Y30LPDS
         AIF ('&TACK' EQ '').LOOPIN                            @Y30LPDS
         AIF ('&TACK' EQ '*').LOOPOUT                          @Y30LPDS
         MEND                                                  @Y30LPDS
         EJECT                                                 @Y30LPDS
         SPACE 4                                               @Y30LPDS
*    LSTART  MACRO      L S T A R T  M A C R O        LSTART  MACRO
         SPACE 1                                               @Y30LPDS
         MACRO                                                 @Y30LPDS
         LSTART ,                                              @Y30LPDS
.*                            THIS MACRO IS ISSUED WHEN THE LABEL AREA
.*                                 OF THE TABLE IS TO BEGIN.   @Y30LPDS
         GBLA  &LABELNR                                        @Y30LPDS
         GBLC  &LBL(100)                                       @Y30LPDS
         GBLC &LABELS(1000)                                    @Y30LPDS
         GBLA  &LBLCTR(100)                                    @Y30LPDS
         GBLB  &DIAGTST,&DIAGSET,&DIAGLIN                      @Y30LPDS
         LCLA  &NDX,&CTR                                       @Y30LPDS
         ACTR  100000                                          @Y30LPDS
         AIF   (&DIAGTST EQ 0).NODIAG                          @Y30LPDS
         AIF   (&DIAGSET EQ 0).NODIAG                          @Y30LPDS
         MNOTE '**NO LABEL ASSOCIATED WITH LAST SET**'         @Y30LPDS
***** THE FOLLOWING GENERATED FOR TEST PURPOSES *****          @Y30LPDS
*        LABEL '%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%'
               LABEL '%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%'
.NODIAG  ANOP                                                  @Y30LPDS
         LINEND                                                @Y30LPDS
&CTR     SETA  1                                               @Y30LPDS
.LOOP    ANOP                                                  @Y30LPDS
&NDX     SETA  &NDX+1                                          @Y30LPDS
         AIF   (&LBLCTR(&CTR) NE &NDX).NOLBL                   @Y30LPDS
&LBL(&CTR) DC  C'&LABELS(&NDX)'                                @Y30LPDS
&CTR     SETA  &CTR+1                                          @Y30LPDS
         AGO   .LOOPCTL                                        @Y30LPDS
.NOLBL   ANOP                                                  @Y30LPDS
         DC    C'&LABELS(&NDX)'                                @Y30LPDS
.LOOPCTL AIF   (&NDX LT &LABELNR).LOOP                         @Y30LPDS
         MEND                                                  @Y30LPDS
         SPACE 4                                               @Y30LPDS
         MACRO
         LINEND
.*                            THIS MACRO IS USED ONLY BY THE LINE
.*                                 MACRO TO SET THE NUMBER OF ENTRIES
.*                                 ASSOCIATED WITH EACH LINE.
         GBLA  &NRENTS
         GBLC &NRENTSX
         ORG   &NRENTSX
         DC    FL1'&NRENTS'
         ORG
&NRENTS  SETA  0
B&SYSNDX EQU   *
&NRENTSX SETC  'B&SYSNDX'
         MEND
         TITLE 'I F C E M E R 0  EDIT TABLE FOR 3330 FORMAT 0 SENSE'
         GBLC  &DSECT,&CSECT
*
*        SENSE  FORMAT 0
*
IFCEMER0 CSECT
&CSECT   SETC  'IFCEMER0'
&DSECT   SETC  'MER0'
*
MER0     DSECT
         DSGEN (CLASRC,8),(SYSREL,8),(SWITCHES,16)
         DSGEN (SPARE1,32)
         DSGEN (DAY,32)
         DSGEN (HOUR,32)
         DSGEN (SPARE2,8),(CPUSERL,24)
         DSGEN (CPUID,16),(SPARE3,16)
         DSGEN (JOBID1,32)
         DSGEN (JOBID2,32)
         DSGEN (FCCWCC,8),(FCCWDA,24)
         DSGEN (FCCWFL,8),(FCCW,8),(FCCWCT,16)
         DSGEN (CSWUS1,8),(CSWUS2,24)
         DSGEN (CSWUS3,8),(CSWUS4,8),(CSWUS5,16)
         DSGEN (DEVDPD,8),(SECCUA,24)                            S21021
         DSGEN (DEVTYP1,16),(DEVTYP2,16)
         DSGEN (SPARE4,8),(CUA,24)
         DSGEN (IORET,16),(SBCNT,16)                           @Y30LPDS
         DSGEN (VOLLAB1,8),(VOLLAB2,16),(VOLLAB3,8)
         DSGEN (VOLLAB4,8),(VOLLAB5,8),(SPARE5,16)
         DSGEN (LSKAD1,8),(LSKAD2,16),(LSKAD3,8)
         DSGEN (LSKAD4,8),(LSKAD5,16),(LSKAD6,8)
         DSGEN (AHA1,32)
         DSGEN (AHA2,16),(SPARE6,16)
         DSGEN (SNB00,1),(SNB01,1),(SNB02,1),(SNB03,1),(SNB04,1),      C
               (SNB05,1),(SNB06,1),(SNB07,1),(SNB10,1),(SNB11,1),      C
               (SNB12,1),(SNB13,1),(SNB14,1),(SNB15,1),(SNB16,1),      C
               (SNB17,1),(SNB20,1),(SNB21,1),(SNB22,1),(SNB23,1),      C
               (SNB24,1),(SNB25,1),(SNB26,1),(SNB27,1),(SNB30,1),      C
               (SNB31,1),(SNB32,1),(SNB33,1),(SNB34,1),(SNB35,1),      C
               (SNB36,1),(SNB37,1)
         DSGEN (SNB40,1),(SNB41,1),(SNB42,1),(SNB43,1),(SNB44,1),      C
               (SNB45,1),(SNB46,1),(SNB47,1),(SNB50,1),(SNB51,1),      C
               (SNB52,1),(SNB53,1),(SNB54,1),(SNB55,1),(SNB56,1),      C
               (SNB57,1),(SNB60,1),(SNB61,1),(SNB62,1),(SNB63,1),      C
               (SNB64,1),(SNB65,1),(SNB66,1),(SNB67,1),(SNB70,1),      C
               (SNB71,1),(SNB72,1),(SNB73,1),(SNB74,1),(SNB75,1),      C
               (SNB76,1),(SNB77,1)
         DSGEN (SNB80,1),(SNB81,1),(SNB82,1),(SNB83,1),(SNB84,1),      C
               (SNB85,1),(SNB86,1),(SNB87,1),(SNB90,1),(SNB91,1),      C
               (SNB92,1),(SNB93,1),(SNB94,1),(SNB95,1),(SNB96,1),      C
               (SNB97,1),(SNB100,1),(SNB101,1),(SNB102,1),(SNB103,1),  C
               (SNB104,1),(SNB105,1),(SNB106,1),(SNB107,1),(SNB110,1), C
               (SNB111,1),(SNB112,1),(SNB113,1),(SNB114,1),(SNB115,1), C
               (SNB116,1),(SNB117,1)
         DSGEN (SNB120,1),(SNB121,1),(SNB122,1),(SNB123,1),(SNB124,1), C
               (SNB125,1),(SNB126,1),(SNB127,1),(SNB130,1),(SNB131,1), C
               (SNB132,1),(SNB133,1),(SNB134,1),(SNB135,1),(SNB136,1), C
               (SNB137,1),(SNB140,1),(SNB141,1),(SNB142,1),(SNB143,1), C
               (SNB144,1),(SNB145,1),(SNB146,1),(SNB147,1),(SNB150,1), C
               (SNB151,1),(SNB152,1),(SNB153,1),(SNB154,1),(SNB155,1), C
               (SNB156,1),(SNB157,1)
         DSGEN (SNB160,1),(SNB161,1),(SNB162,1),(SNB163,1),(SNB164,1), C
               (SNB165,1),(SNB166,1),(SNB167,1),(SNB170,1),(SNB171,1), C
               (SNB172,1),(SNB173,1),(SNB174,1),(SNB175,1),(SNB176,1), C
               (SNB177,1),(SNB180,1),(SNB181,1),(SNB182,1),(SNB183,1), C
               (SNB184,1),(SNB185,1),(SNB186,1),(SNB187,1),(SNB190,1), C
               (SNB191,1),(SNB192,1),(SNB193,1),(SNB194,1),(SNB195,1), C
               (SNB196,1),(SNB197,1)
         DSGEN (SNB200,1),(SNB201,1),(SNB202,1),(SNB203,1),(SNB204,1), C
               (SNB205,1),(SNB206,1),(SNB207,1),(SNB210,1),(SNB211,1), C
               (SNB212,1),(SNB213,1),(SNB214,1),(SNB215,1),(SNB216,1), C
               (SNB217,1),(SNB220,1),(SNB221,1),(SNB222,1),(SNB223,1), C
               (SNB224,1),(SNB225,1),(SNB226,1),(SNB227,1),(SNB230,1), C
               (SNB231,1),(SNB232,1),(SNB233,1),(SNB234,1),(SNB235,1), C
               (SNB236,1),(SNB237,1)
         EJECT                                                 @Y30LPDS
*                                                              @Y30LPDS
*      THE FOLLOWING DEFINES EXTRA SENSE BYTES INCLUDED IN THE RECORD
*        IF THIS IS A 'VIRTUAL' DEVICE(EG. PART OF AN SS1(3850))
*                                                              @Y30LPDS
         SPACE 1                                               @Y30LPDS
         DSGEN (SNB,1,24,27,0,7)                               @Y30LPDS
           EJECT                                               @Y30LPDS
***********************************************************************
*                                                                     *
*              THIS ENTIRE MODULE IS IN SUPPORT OF  S20201            *
*                                                                     *
***********************************************************************
IFCEMER0 CSECT
         USING *,R9
         USING MER0,R2                                         @Y30LPDS
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
*
L0       EQU   0
L1       EQU   1
L2       EQU   2
L3       EQU   3
L4       EQU   4
L5       EQU   5
L6       EQU   6
L7       EQU   7
L8       EQU   8
L9       EQU   9
L10      EQU   10
L11      EQU   11
L12      EQU   12
L13      EQU   13
L14      EQU   14
L15      EQU   15
L16      EQU   16
L17      EQU   17
L18      EQU   18
L19      EQU   19
L20      EQU   20
L23      EQU   23
L24      EQU   24
L26      EQU   26
H0F      EQU   X'0F'
HE0      EQU   X'E0'
H80      EQU   X'80'
H40      EQU   X'40'
H20      EQU   X'20'
H10      EQU   X'10'
H21      EQU   X'21'
H23      EQU   X'23'
H25      EQU   X'25'
H29      EQU   X'29'
CLRSGN   EQU   X'F0'
SS1CNT    EQU  28                      # OF SNS BYTES RECORDED @Y30LPDS
*                                      FOR AN SS1-VIRTUAL 3330 @Y30LPDS
H30      EQU   X'30'                                           @Y30LPDS
HFF      EQU   X'FF'                                           @Y30LPDS
         DC    A(ENTRIES)
         DC    CL8'IFCEMER0'
XR9PTR   DC    F'0'
XLABELP  DC    F'0'
*        SET HEX -PRINTS 1 CHAR HEX
*
SETHEX   STM   R5,R8,XSAVE             SAVE REGS
         LA    R8,CHARS                CHARACTER TABLE POINTER
         IC    R7,L0(R4)               PICK UP CHARACTER
         SLL   R7,L24                  MOVE TO HI R7
         SR    R6,R6                   CLEAR REGS
         SLDL  R6,L4                   MOVE FOUR BITS
         AR    R6,R8                   ADD OFFSET AND POINTER
         MVC   L0(L1,R3),L0(R6)        MOVE CHARACTER TO LINE
         SR    R6,R6                   CLEAR AGAIN
         SLDL  R6,L4                   MOVE LAST 4 BITS
         AR    R6,R8                   COMPUTE OFFSET
         MVC   L1(L1,R3),L0(R6)        MOVE LAST CHARACTER
         B     RETURN
*
*        TEST TO SEE IF RECORD IS IN AR-149 FORMAT
*
SETCONV  TM    L0(R4),HEX02            HAS RECORD BEEN CONVERTED KEY32
         BCR   ON,R14                  YES RETURN
         SR    R15,R15                 NO CLEAR R15 FOR NO PRINT OF
         BR    R14                     LINE
ON       EQU   1
HEX02    EQU   X'02'
*
*        NO OP RETURN
*
SKIPPER  BR    R14
*
*        TO ADD SPACES ON LINE
*
SPACER2  LA    R3,L4(R3)
         BR    14
*
*        RESTORE REGISTERS USED BY ROUTINES IN THIS MODULE
*
RETURN   LM    R5,R8,XSAVE             RESTORE REGS
         BR    R14                     RETURN
*
*        SET THE DATE READY FOR PRINT
*
SETDATE  UNPK  XSAVE(L8),L1(L3,R4)     UNPACK THE DATE
         MVC   L0(L3,R3),XSAVE+L5      MOVE DAY
         MVC   L6(L2,R3),XSAVE+L3      MOVE YEAR
         BR    R14
*
*        SET THE DEVICE TYPE READY FOR PRINT
*
SETDEVT  STM   R5,R8,XSAVE             SAVE REGS
         LA    R5,L1                    LOAD NO. OF POSSIBLE DEVICE TPS
         LA    R6,DEVTABLE             POIT TO DEVICE TYPES
SETDEVLP CLC   L0(L2,R4),L0(R6)        COMPARE TYPES
         BE    SDEVFND                 FOUND ONE SO BRANCH
         LA    R6,L6(R6)               MOVE POINTER TO LOOK AT NEXT T
         BCT   R5,SETDEVLP             BRANCH IF THERE ARE MORE
         MVC   L0(L4,R3),NONE          NO DEV TYPE MOVE IN NONE
         B     RETURN
SDEVFND  MVC   L0(L4,R3),L2(R6)        MOVE DEV NAME TO PRINT LINE
         B     RETURN
          EJECT                                                @Y30LPDS
*                                                              @Y30LPDS
*      THE FOLLOWING CHECKS THIS RECORD FOR EXTRA(28) SENSE BYTES,
*        IF THE RECORD CONTAINS SS1 SENSE, THIS ROUTINE WILL ADJUST
*        LINE AND LABEL POINTERS TO EDIT THE ADDITIONAL BYTES. @Y30LPDS
*                                                              @Y30LPDS
CKIFSS1  DS    0H                                              @Y30LPDS
         CLI   SBCNT+1,SS1CNT          WERE EXTRA SNS BYTS REC'D
         BE    SETSS1PT                YES - BR                @Y30LPDS
         SR    R15,R15                 NO - REGULAR 3330 RECORD
         BR    R14                     RETURN                  @Y30LPDS
         SPACE 1
SETSS1PT DS    0H                                              @Y30LPDS
         STM   R5,R8,XSAVE             SAVE REGS               @Y30LPDS
         L     R5,SS1LINE              LOAD ADDR OF SS1 LINE   @Y30LPDS
         ST    R5,XR9PTR               STORE FOR EREPO         @Y30LPDS
         L     R5,SS1LABEL             LOAD ADDR OF SS1 LABEL  @Y30LPDS
         ST    R5,XLABELP              STORE FOR EREP0         @Y30LPDS
         SR    R15,R15                 DONT PRINT THIS LINE    @Y30LPDS
         B     RETURN                  BR TO RETURN            @Y30LPDS
         SPACE 2                                               @Y30LPDS
*                                                              @Y30LPDS
*      THE FOLLOWING CHECKS THE CLASS/SOURCE BYTE OF THE RECORD
*                                                              @Y30LPDS
*      N O T E : THE  CLASS/SOURCE BYTE IS SET TO X'FF' BY THE @Y30LPDS
*                  OTHER 3330 EDIT TABELS(IFCEMER1,2,3,4,5) IF @Y30LPDS
*                  THIS RECORD CONTAINS 28 SENSE BYTES(SS1(3850) SENSE)
*                                                              @Y30LPDS
CKENTRY  DS    0H                                              @Y30LPDS
         CLI   CLASRC,HFF              ENTERED FOR SS1 SENSE?? @Y30LPDS
         BNE   SKIPPER                 NO - RETURN             @Y30LPDS
         MVI   CLASRC,H30              RESET CLAS/SOURCE FIELD @Y30LPDS
         B     SETSS1PT                BR TO SET PTRS FOR SS1 EDIT
         SPACE 2                                               @Y30LPDS
*
*        CHECK FOR CPU AND SERIAL NUMBER
*
SETCPUNO STM   R5,R8,XSAVE             SAVE REGS
         SR    R5,R5                   CLEAR R5
         IC    R5,L0(R4)               PICK UP MODEL NO
         SLL   R5,L8                   IN TO
         IC    R5,L1(R4)               R5
         LTR   R5,R5                   TEST FOR ZERO
         BNZ   RETURN                  NONE ZERO BR
         LR    R5,R3                   PUT LINE ADDRESS IN R5
         MVC   L0(L9,R5),UNIVERS       PUT IN UNIVERSAL
         MVC   L11(L6,R5),NONE         PUT IN NONE
         B     RETURN
*
*        SET PROGRAM NAME TO PRINT LINE
*
SETPGMN  MVC   L0(L8,R3),L0(R4)        MOVE 8 CHARS TO LINE
         BR    R14                     RETURN
*
*        SET BINARY WITH R4 POINTING TO THE CHAR
*
SETBIN   STM   R5,R8,XSAVE             SAVE REGS
         IC    R7,L0(R4)               PICK UP CHAR TO PRINT
         SLL   R7,L24                  MOVE IT TO HI OF R7
         LR    R8,R3                   PRINT POS POINTER TO REG8
         LA    R5,L8                   LOOP COUNT
SETBINA  SR    R6,R6                   CLEAR REG 6
         SLDL  R6,L1                   MOVE BIT TO R6
         STC   R6,L0(R8)               PUT IT INTO PRINT LINE
         MVZ   L0(L1,R8),CHAR0
         LA    R8,L1(R8)               MOVE POINTER TO NEXT POS
         BCT   R5,SETBINA              LOOP TILL 8 PRINTED
         B     RETURN
*        CONVERT COUNTERS FROM HEX TO DECIMAL READY FOR PRINT
*
CONV1    STM   R5,R8,XSAVE             SAVE REGISTERS
         XC    READYP(L8),READYP       CLEAR UNPACK BUFFER
         SR    R6,R6                   ZERO REG
         LH    R6,L0(R4)               LOAD DATA TO BE CONVERTED
         CVD   R6,READYP               CONVERT ERROR COUNTER TO DECI
         UNPK  READYP(L5),READYP+L5(L3)  UNPACK DECI COUNT
         OI    READYP+L4,CLRSGN        CLEAR SIGN
         MVC   L0(L4,R3),READYP+L1     MOVE COUNTER READY TO PRINT
         B     RETURN
         DS    0F
XSAVE    DC    5F'0'
NONE     DC    CL6'NONE  '
CHARS    DC    C'0123456789ABCDEF'
CHAR0    DC    C'0'
UNIVERS  DC    C'UNIVERSAL'
DEVTABLE DC    X'2009'
         DC    C'3330'
SS1LABEL DC    A(LABELSS1-1)                                   @Y30LPDS
SS1LINE  DC    A(LINESS1-4)                                    @Y30LPDS
         DS    0D
READYP   DC    CL8' '
ENTRIES  DS    0F
         DC    XL4'00010001'       FORMAT 1
         DC    XL4'00010001'       FORMAT 2
         DC    A(LABELS)           LABEL POINTER
         DC    H'0'                DISP
*
*        SKIP TO CHANNEL 1
*
         DC    X'01'
         DC    X'000B0B00'
*
         LINE  (12,15),(3,15)
         ROUTINE   SNB80,SETHEX
         ROUTINE   SNB90,SETHEX
         ROUTINE   SNB100,SETHEX
         ROUTINE   SNB110,SETHEX
         ROUTINE   SNB120,SETHEX
         ROUTINE   SNB130,SETHEX
         ROUTINE   SNB140,SETHEX
         ROUTINE   SNB150,SETHEX
         ROUTINE   CLASRC,CKENTRY                              @Y30LPDS
         SPACE 2                                               @Y30LPDS
         LABEL 'BYTE 8','BYTE 9','BYTE 10','BYTE 11','BYTE 12','BYTE 13C
               ','BYTE 14','BYTE 15'
         LINE  (2,15),(1,1),SKIP=3
         ROUTINE   SNB80,SETBIN
         ROUTINE   SNB90,SETBIN
         ROUTINE   SNB100,SETBIN
         ROUTINE   SNB110,SETBIN
         ROUTINE   SNB120,SETBIN
         ROUTINE   SNB130,SETBIN
         ROUTINE   SNB140,SETBIN
         ROUTINE   SNB150,SETBIN
         LABEL ' '
         LINE  (12,15),(3,15),SKIP=1
         ROUTINE   SNB160,SETHEX
         ROUTINE   SNB170,SETHEX
         ROUTINE   SNB180,SETHEX
         ROUTINE   SNB190,SETHEX
         ROUTINE   SNB200,SETHEX
         ROUTINE   SNB210,SETHEX
         ROUTINE   SNB220,SETHEX
         ROUTINE   SNB230,SETHEX
         LABEL 'BYTE 16','BYTE 17','BYTE 18','BYTE 19','BYTE 20','BYTE C
                21','BYTE 22','BYTE 23'
         LINE  ,(91,1)
         ROUTINE   SPARE1,SKIPPER
         LABEL '-----ERROR SYMPTOM CODE-----'
         LINE  (2,15),(1,1),SKIP=3
         ROUTINE   SNB160,SETBIN
         ROUTINE   SNB170,SETBIN
         ROUTINE   SNB180,SETBIN
         ROUTINE   SNB190,SETBIN
         ROUTINE   SNB200,SETBIN
         ROUTINE   SNB210,SETBIN
         ROUTINE   SNB220,SETBIN
         ROUTINE   SNB230,SETBIN
         LABEL ' '
          LINE ,,SKIP=1                                        @Y30LPDS
         ROUTINE   SBCNT,CKIFSS1                               @Y30LPDS
         DC    X'FF'
         DC    XL2'0070'                                         S21021
         DC    XL2'0018'
         DC    XL2'0000'
         EJECT                                                 @Y30LPDS
*                                                              @Y30LPDS
*      THE FOLLOWING EDIT IS ONLY DONE IF THIS RECORD CONTAINS @Y30LPDS
*        THE EXTRA FOUR(4) SENSE BYTES FOR SS1(3850).          @Y30LPDS
*                                                              @Y30LPDS
         SPACE 1                                               @Y30LPDS
LINESS1  LINE  (12,15),(3,15),SKIP=1                           @Y30LPDS
         ROUTINE   SNB240,SETHEX                               @Y30LPDS
         ROUTINE   SNB250,SETHEX                               @Y30LPDS
         ROUTINE   SNB260,SETHEX                               @Y30LPDS
         ROUTINE   SNB270,SETHEX                               @Y30LPDS
LABELSS1 LABEL 'BYTE 24','BYTE 25','BYTE 26','BYTE 27'         @Y30LPDS
         LINE  ,(1,15),SKIP=2                                  @Y30LPDS
         ROUTINE   SPARE1,SKIPPER                              @Y30LPDS
         LABEL 'REAL UNIT ADDR','  ----REAL  CYLINDER ----'    @Y30LPDS
         LINE  (2,15),(1,1),SKIP=2                             @Y30LPDS
         ROUTINE   SNB240,SETBIN                               @Y30LPDS
         ROUTINE   SNB250,SETBIN                               @Y30LPDS
         ROUTINE   SNB260,SETBIN                               @Y30LPDS
         ROUTINE   SNB270,SETBIN                               @Y30LPDS
         LABEL ' '                                             @Y30LPDS
         LINE  ,,SKIP=1                                        @Y30LPDS
         LABEL ' '                                             @Y30LPDS
         DC    X'FF'                                           @Y30LPDS
         DC    XL2'0074'               RECORD LENGTH           @Y30LPDS
         DC    XL2'0018'               HDR LENGTH              @Y30LPDS
         DC    XL2'0000'                                       @Y30LPDS
         EJECT                                                 @Y30LPDS
LABELS   DS    0F
         DC    C'$'
         LSTART
         END
