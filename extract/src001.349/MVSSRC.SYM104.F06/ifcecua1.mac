      TITLE  'IFCECUA1 CUA THRESHOLDS AND PERM ERRROR SUMMARY MODULE'
*                                  THIS MODULE IS DESIGNED TO SUPPORT
*                                  THE DASDI/TAPE EREP ENHANCEMENTS.
*                                                              @Z40NIVS
         MACRO
&NAME    DSGEN
.*                            THIS MACRO GENERATES ONE DSECT WORD
.*                                 FORMATTED FOR THE SUBJECT LOG RECORD
.*                                 EACH OPERAND HAS TWO SUB LISTS. THE
.*                                 FIRST IS THE NAME OF THE LOG ITEM
.*                                 WHILE THE SECOND IS THE # OF BITS TO
.*                                 ALLOCATE FOR THIS ITEM. ITEMS MUST
.*                                 BE DEFINED CONTIGUOUSLY WITHOUT GAPS
.*                                 UNUSED BIT GROUPS MUST BE GIVEN
.*                                 DUMMY NAMES. THE NAMES PROVIDED FOR
.*                                 THE LOG ITEMS MAY THEN BE USED IN
.*                                 THE CONVERSION MACRO INSTRUCTIONS.
         GBLC &ITEM(1000)
         GBLA &ITEMNBR,&BITS(1000),&SHIFT(1000)
         LCLB  &ONLY1,&CTIND
         LCLA  &START1,&START2,&END1,&END2
         LCLC  &SYMBOL,&EQUSYM
         LCLA  &OP,&COUNT,&BYTE,&EQUCNT
         ACTR  100000
.START   AIF   (N'&SYSLIST(&OP+1) LT 3).LOOP
         AIF   ('&SYSLIST(&OP+1,3)' EQ 'EQU').LOOP     TEST FOR EQU
  AIF   ('&SYSLIST(&OP+1,3)' EQ '' AND '&SYSLIST(&OP+1,4)' EQ '').ERR1
  AIF   ('&SYSLIST(&OP+1,3)' EQ '' OR '&SYSLIST(&OP+1,4)' EQ '').ERR1
         AIF   ('&SYSLIST(&OP+1,3)' GT '&SYSLIST(&OP+1,4)').ERR3
&START1  SETA  &SYSLIST(&OP+1,3)        GET START COUNT OF ONE
&START2  SETA  &SYSLIST(&OP+1,4)        GET FIRST END COUNT
         AGO   .SET2A                   BRANCH AROUND
.ERR1    MNOTE '**FIRST SYMBOL CONCATENATION INCOMPLETE**' @Z40NIVS
         MEXIT
.SET2A   AIF   ('&SYSLIST(&OP+1,5)' EQ ''AND '&SYSLIST(&OP+1,6)' EQ '' X
               ).SET2                   TEST FOR NO SECOND
  AIF   ('&SYSLIST(&OP+1,5)' EQ '' OR '&SYSLIST(&OP+1,6)' EQ '').ERR2
         AIF   ('&SYSLIST(&OP+1,5)' GT '&SYSLIST(&OP+1,6)').ERR3
&END1    SETA  &SYSLIST(&OP+1,5)        GET START COUNT OF 2
&END2    SETA  &SYSLIST(&OP+1,6)        GET END COUNT OF 2
         AGO   .LOOP
.SET2    ANOP
&ONLY1   SETB  1               INDICATE ONLY ONE CONCATENATION
         AGO   .LOOP
.ERR2    MNOTE '**SECOND SYMBOL CONCATENATION INCOMPLETE**'
         MEXIT
.ERR3    MNOTE '**START GREATER THAN END CONCATENATION**'
         MEXIT
.LOOP    ANOP
&OP      SETA  &OP+1
         AIF   (&OP GT N'&SYSLIST).DONE      TEST IF ALL DONE
&ITEMNBR SETA  &ITEMNBR+1
         AIF   ('&SYSLIST(&OP,2)' NE '').OK1
         MNOTE '**NULL BIT COUNT FIELD**'
         MEXIT
.OK1     ANOP
&SYMBOL  SETC  '&SYSLIST(&OP,1)'
         AIF   ('&SYMBOL' NE '').OK
*              *****     LOG ITEM SYMBOL NOT PROVIDED     *****
         AIF   ('&SYSLIST(&OP,3)' NE 'EQU').CNT
         AGO   .START                   GET NEXT
.OK      AIF   (N'&SYSLIST(&OP) LT 3).NO3    TEST FOR OLD FORMAT
         AIF   ('&SYSLIST(&OP,3)' EQ 'EQU').EQU   TEST FOR EQU
         AIF   (&ONLY1).OK2             TEST FOR ONLY ONE CONCAT
&SYMBOL  SETC  '&SYMBOL.&START1.&END1'       GET 1 AND 2 CONCAT
         AGO   .NO3                     BRANCH AROUND
.OK2     ANOP
&SYMBOL  SETC  '&SYMBOL.&START1'        GET 1 CONCATENATED
.NO3     ANOP
&SYMBOL  EQU   *+&BYTE
&ITEM(&ITEMNBR) SETC '&SYMBOL'          GET LABEL IN GLOBAL
&BITS(&ITEMNBR) SETA &SYSLIST(&OP,2)
&SHIFT(&ITEMNBR) SETA &COUNT-&BYTE*8
.CNT     ANOP
&CTIND   SETB  1                        SET COUNT INDICATOR
&COUNT   SETA  &COUNT+&SYSLIST(&OP,2)
&BYTE    SETA  &COUNT/8
         AIF   (N'&SYSLIST(&OP) LT 3).START  TEST FOR OLD FORMAT
         AIF   (&ONLY1).TSTST           TEST FOR ONLY ONE CONCAT
         AIF   (&END1 EQ &END2).TSTST   TEST FOR SECOND END
&END1    SETA  &END1+1                  INCREMENT COUNT
&OP      SETA  &OP-1                    DECREMENT INCREMENT
         AGO   .LOOP                    GENERATE NEXT
.TSTST   ANOP
         AIF   (&START1 EQ &START2).LPDONE   TEST FOR END
         AIF   (&ONLY1).NSET1           TEST FOR ONLY ONE CONCAT
&END1    SETA  &SYSLIST(&OP,5)          RE-INIT SECOND START COUNT
.NSET1   ANOP
&OP      SETA  &OP-1                    DECREMENT INDEX
&START1  SETA  &START1+1                INCREMENT FIRST COUNT
         AGO   .LOOP                    GO DO NEXT
.LPDONE  ANOP
&ONLY1   SETB  0                        CLEAR INDICATOR
         AGO   .START                   GO TEST FOR MORE SUB-LISTS
.DONE    AIF   (&COUNT-&COUNT/8*8 NE 0).ERR  TEST FOR MULTIPLE OF EIGHT
         AIF   (&CTIND EQ 0).END        NO DS IF NO COUNT
&COUNT   SETA  &COUNT/8                 GET NUMBER OF BYTES
&NAME    DS    &COUNT.C
.END     MEXIT
.ERR     MNOTE '**BIT COUNT FLDS DO NOT TOTAL MULTIPLE OF 8**'
         MEXIT
.EQU     AIF   ('&SYSLIST(&OP,4)' NE '').EQU1     TEST FOR NULL LABEL
.ERR4    MNOTE '**EQU OPERAND OMITTED OR NOT FOUND**'
         MEXIT
.EQU1    AIF   (&SYSLIST(&OP,2) LT 16).EQU2  COUNT OVER FIFTEEN
*****               THE FOLLOWING STATEMENT                *****
*****     NUMBER OF BITS EXCEED 15 - DO NOT USE AS BIN     *****
.EQU2    ANOP
&EQUCNT  SETA  0                        CLEAR COUNTER
&EQUSYM  SETC  '&SYSLIST(&OP,4)'        GET EQU OPERAND
.EQULOP  ANOP
&EQUCNT  SETA  &EQUCNT+1                INCREMENT INDEX
         AIF   ('&ITEM(&EQUCNT)' EQ '&EQUSYM').EQUOUT  LABEL FOUND?
         AIF   (&EQUCNT EQ &ITEMNBR).ERR3    ALL TESTED?
         AGO   .EQULOP                  NO-GET NEXT
.EQUOUT  ANOP
&ITEM(&ITEMNBR) SETC '&SYMBOL'          GET LABEL NAME
&BITS(&ITEMNBR) SETA &SYSLIST(&OP,2)    GET NUMBER OF BITS
&SHIFT(&ITEMNBR) SETA &SHIFT(&EQUCNT)   GET SHIFT COUNT
&SYMBOL  EQU   &EQUSYM                  THIS SYMBOL EQUATED
         AGO   .START                   RETURN FOR NEXT
         MEND
*  LINE MACRO     LINE MACRO     LINE MACRO     LINE MACRO            *
         SPACE 2
         MACRO
&NAME    LINE  &DATA,&LABEL,&SKIP=
.*                            THIS MACRO ESTABLISHES THE MARGINS OR
.*                                 COLUMN SETTINGS FOR EACH LINE. IT
.*                                 GENERATES NECESSARY CARRIAGE CONTROL
.*                                 ENTRIES. LASTLY IT DETERMINES THE
.*                                 NUMBER OF ENTRIES ASSOCIATED WITH
.*                                 THE PREVIOUS LINE AND STORES THAT #
.*                                 INTO THE APPROPRIATE BYTE.
.*                            &DATA(1) - CHARACTER POSITION TO BEGIN
.*                                 DATA.
.*                            &DATA(2) - # OF SPACES BETWEEN SUCCESSIVE
.*                                 DATA COLUMN STARTING CHARACTERS.
.*                            &LABEL(1) - CHAR. POS. TO BEGIN LABELS.
.*                            &LABEL(2) - # SPACES BETWEEN LINE'S LABEL
.*                                 STARTING CHARACTERS.
.*                            &SKIP= - # OF LINES TO ADVANCE CARRIAGE
.*                                 TO BEGIN NEXT PRINTED LINE.
.*                            NEW ENTRIES ARE GENERATED ONLY WHEN
.*                                 NECESSARY. OMISSION OF ITEMS MEANS
.*                                 THEY HAVE NOT CHANGED SINCE PREVIOUS
.*                                 SETTINGS. A LINE MACRO IS REQUIRED
.*                                 FOR EACH PRINTED LINE. IF NO SETTING
.*                                 CHANGES ARE REQUIRED ALL OPERANDS
.*                                 ARE OMITTED IN WHICH CASE ONLY THE
.*                                 # OF ENTRIES FOR THE PREVIOUS LINE
.*                                 IS COMPUTED. THIS MACRO MUST BE THE
.*                                 FIRST MACRO INSTRUCTION ISSUED FOR
.*                                 THE SUBJECT LINE
         GBLA  &DB,&DT,&LB,&LT,&NRENTS
         GBLA  &LASTCC,&INITIAL
         GBLC  &NRENTSX
         GBLC  &CARRCON
         GBLB  &TEST
         LCLA  &S
&NAME    DS    0C
         AIF   (&INITIAL EQ 0).FIRSTLN
         LINEND
         AGO   .NTFIRST
.FIRSTLN ANOP
&NRENTSX SETC  'N&SYSNDX'
&INITIAL SETA  1
N&SYSNDX EQU   *
.NTFIRST ANOP
         DC    AL1(0)
         AIF   ('&DATA(1)' EQ '').CKDTABS
         AIF   (&DATA(1) EQ &DB).CKDTABS
&DB      SETA  &DATA(1)
         AGO   .AA
.CKDTABS AIF   ('&DATA(2)' EQ '').NCDATA
         AIF   (&DATA(2) EQ &DT).NCDATA
         AGO   .CC
.AA      AIF   ('&DATA(2)' EQ '').BB
         AIF   (&DATA(2) EQ &DT).BB
.CC      ANOP
&DT      SETA  &DATA(2)
.BB      DC    XL2'FFFE'
         DC    FL1'&DB'
         DC    FL1'&DT'
&NRENTS  SETA  &NRENTS+1
.NCDATA  ANOP
         AIF   ('&LABEL(1)' EQ '').CKLTABS
         AIF   (&LABEL(1) EQ &LB).CKLTABS
&LB      SETA  &LABEL(1)
         AGO   .AAA
.CKLTABS AIF   ('&LABEL(2)' EQ '').NCLABEL
         AIF   (&LABEL(2) EQ &LT).NCLABEL
         AGO   .CCC
.AAA     AIF   ('&LABEL(2)' EQ '').BBB
         AIF   (&LABEL(2) EQ &LT).BBB
.CCC     ANOP
&LT      SETA  &LABEL(2)
.BBB     DC    XL2'FFFF'
         DC    FL1'&LB'
         DC    FL1'&LT'
&NRENTS  SETA  &NRENTS+1
.NCLABEL ANOP
         AIF   ('&SKIP' NE '').CONT
         AIF   (&TEST EQ 0).NOCHANG
&S       SETA  &LASTCC
         AGO   .DEFAULT
.CONT    ANOP
         AIF   (&TEST EQ 0).AB
&S       SETA  &SKIP
.DEFAULT ANOP
         ORG   &CARRCON+3
         DC    AL.3(0),AL.2(&S),AL.3(1)
         ORG
&LASTCC  SETA  &S
&TEST    SETB  0
         AGO   .DD
.AB      AIF   (&SKIP EQ &LASTCC).NOCHANG
A&SYSNDX DC    XL2'FFFB'
         DC    AL.3(0),AL.2(&SKIP),AL.3(1)
         DC    FL1'9'
&LASTCC  SETA  &SKIP
&TEST    SETB  1
&CARRCON SETC  'A&SYSNDX'
&NRENTS  SETA  &NRENTS+1
.DD      ANOP
.NOCHANG ANOP
         MEND
         EJECT
*  BIN MACRO     BIN MACRO     BIN MACRO     BIN MACRO     BIN MACRO  *
         SPACE 2
         MACRO
         BIN   &LOGITEM,&SKIP$OR
.*                                 &LOGITEM - NAME OF ITEM IN LOG
.*                                      RECORD DSECT
.*                                 &SKIP$OR - NBR OF SPACES TO SKIP ON
.*                                 MULTIPLE PRINT OR NBR OF SPACES
.*                                      TO BACK UP FROM COLUMN FOR
.*                                      START OF PRINTING. THE LETTER
.*                                      B PRECEEDS THE NUMBER (B5) IF
.*                                      THE LATTER IS DESIRED. OMISSION
.*                                      OF THIS OPERAND FORCES OPTION 2
.*                                      WITH BACKUP SPACING EQUAL TO
.*                                 THE NUMBER OF BITS IN THE ITEM
.*                                 DEFINITION (VIA MACRO 'DSGEN').
.*                            A LIMIT OF 15 BITS IS IMPOSED FOR THE
.*                                 TOTAL NUMBER OF BITS TO PRINT.
         GBLC &ITEM(1000)
         GBLA &ITEMNBR,&BITS(1000),&SHIFT(1000),&NRENTS
         GBLC  &DSECT
         LCLB  &B
         LCLA  &IBITS,&NDX,&ISHIFT,&K
         LCLA  &TEMP,&T
         LCLC  &S
.LOOP    ANOP
&NDX     SETA  &NDX+1
         AIF   ('&ITEM(&NDX)' EQ '&LOGITEM').FOUND
         AIF   (&NDX LT &ITEMNBR).LOOP
         MNOTE *,'YOU BLEW IT'
         ROUTINE DUM,SKIPPER
         MEXIT
.FOUND   ANOP
&ISHIFT  SETA  &SHIFT(&NDX)
&IBITS   SETA  &BITS(&NDX)
&T       SETA  &IBITS-1
&B       SETB  0
         AIF   ('&SKIP$OR' EQ '').BACKUP
&K       SETA  K'&SKIP$OR
&B       SETB  ('&SKIP$OR'(1,1) EQ 'B')
&S       SETC  '&SKIP$OR'(&B+1,&K-&B)
&T       SETA  &S
.BACKUP  ANOP
&NRENTS  SETA  &NRENTS+1
&TEMP    SETA  &ISHIFT
A&SYSNDX DC    AL.12(&LOGITEM-&DSECT),XL.4'&TEMP'
         AIF (&IBITS EQ 1 AND &B EQ 0).OUT
         ORG   A&SYSNDX
&B       SETB  1
         DC    AL.12(&LOGITEM-&DSECT),XL.4'C'
         DC    BL.1'&B',AL.7(&T),AL.4(&IBITS),FL.4'&ISHIFT'
.OUT     ANOP
         MEND
         EJECT
*  HEX MACRO     HEX MACRO     HEX MACRO    HEXN MACRO     HEX MACRO  *
         SPACE 2
         MACRO
         HEX   &LOGITEM,&SKIP$OR,&BYTES
.*                            THIS MACRO FACILITATES GENERATION OF THE
.*                                 TABLE ENTRIES SPECIFYING HEX TYPE
.*                                 CONVERSIONS.
.*                            &LOGITEM - NAME OF DATA ITEM TO BE
.*                                 CONVERTED
.*                            &SKIP$OR - NUMBER OF SPACES TO SKIP ON
.*                                 MULTIPLE PRINT OR NBR OF SPACES TO
.*                                 BACK UP FROM COLUMN FOR START OF
.*                                 PRINTING. THE LETTER B PRECEEDS THE
.*                                 NUMBER (B8) IF THE LATTER OPTION IS
.*                                 DESIRED. OMISSION OF THIS OPERAND
.*                                 FORCES OPTION 2 WITH BACKUP SPACING
.*                                 EQUAL TO THE NUMBER OF BYTES SPECI-
.*                                 FIED BY THE NEXT OPERAND (TWICE THIS
.*                                 NUMBER IF SUFFIX IS EXPLICITLY OR
.*                                 IMPLICITLY B).
.*                            &BYTES - NUMBER OF TOTAL INPUT BYTES TO
.*                                 PROCESS. THIS NUMBER IS SUFFIXED
.*                                 WITH AN L,R, OR B TO STIPULATE
.*                                 PRINTING OF THE LEFT HALF, RIGHT
.*                                 HALF, OR BOTH HALVES OF THE BYTE
.*                                 RESPECTIVELY. OMISSION OF THIS
.*                                 OPERAND DEFAULTS TO B WITH THE NUM-
.*                                 BER OF BYTES EQUAL TO THE ITEM LNGTH
.*                            A NEW ENTRY IS GENERATED ONLY WHEN NECES-
.*                                 SARY. THIS MACRO MUST BE THE FIRST
.*                                 MACRO INSTRUCTION ISSUED FOR THE
.*                                 SUBJECT LINE(S).
         GBLC &ITEM(1000),&DSECT
         GBLA &ITEMNBR,&BITS(1000),&SHIFT(1000),&NRENTS
         LCLB  &B
         LCLA  &IBITS,&NDX,&ISHIFT,&K,&T,&CODE,&BYTESP
         LCLC  &S,&LETTER
.LOOP    ANOP
&NDX     SETA  &NDX+1
         AIF   ('&ITEM(&NDX)' EQ '&LOGITEM').FOUND
         AIF   (&NDX LT &ITEMNBR).LOOP
         MNOTE *,'LOG ITEM NOT DEFINED'
         MEXIT
.FOUND   ANOP
&ISHIFT  SETA  &SHIFT(&NDX)
&IBITS   SETA  &BITS(&NDX)
&CODE    SETA  1
&K       SETA  K'&BYTES
         AIF   (&IBITS-(&IBITS/4)*4 EQ 0).OK
         MNOTE *,'BIT LENGTH SPECIFICATION INCONSISTENT WITH CONTROL'
         MEXIT
.OK      AIF   ('&BYTES' EQ '').USEDEFN
&LETTER  SETC  '&BYTES'(&K,1)
&S       SETC  '&BYTES'(1,&K-1)
&BYTESP  SETA  &S
         AIF   ('&LETTER' EQ 'B').BOTH
         AIF   (&ISHIFT EQ 0 OR &ISHIFT EQ 4).OK2
.ERR     MNOTE *,'DATA NOT ALLIGNED ON HEX OR BYTE BOUNDARY'
         MEXIT
.USEDEFN ANOP
&BYTESP  SETA  &IBITS/8
.BOTH    AIF   (&ISHIFT NE 0).ERR
&CODE    SETA  3
&T       SETA  &BYTESP*2-1
&S       SETC  '&T'
.OK2     AIF   (&ISHIFT EQ 0).L
&CODE    SETA  2
.L       ANOP
&B       SETB  1
         AIF   ('&SKIP$OR' EQ '').BACKUP
&K       SETA  K'&SKIP$OR
&B       SETB  ('&SKIP$OR'(1,1) EQ 'B')
&S       SETC  '&SKIP$OR'(&B+1,&K-&B)
.BACKUP  ANOP
&NRENTS  SETA  &NRENTS+1
         DC    AL.12(&LOGITEM-&DSECT),XL.4'A'
         DC    BL.1'&B',FL.7'&S',FL.4'&BYTESP',FL.4'&CODE'
.OUT     ANOP
         MEND
         SPACE 2
*  ROUTINE MACRO     ROUTINE MACRO     ROUTINE MACRO     ROUTINE MACRO*
         SPACE 2
         MACRO
&NAME    ROUTINE &LOGITEM,&RNAME
         GBLC  &DSECT,&CSECT
         GBLC  &ITEM(1000)
         GBLA  &SHIFT(1000),&ITEMNBR
         GBLA  &NRENTS
         LCLA  &ISHIFT,&NDX
.LOOP    ANOP
&NDX     SETA  &NDX+1
         AIF   ('&ITEM(&NDX)' EQ '&LOGITEM').FOUND
         AIF   (&NDX LT &ITEMNBR).LOOP
         MNOTE *,'LOG ITEM NOT DEFINED'
         MEXIT
.FOUND   ANOP
&ISHIFT  SETA  &SHIFT(&NDX)
&NAME    DC    AL.12(&LOGITEM-&DSECT),XL.4'D'
         DC    AL.4(&ISHIFT),AL.12(&RNAME-&CSECT)
&NRENTS  SETA  &NRENTS+1
         MEND
         EJECT
*  LABEL MACRO     LABEL MACRO     LABEL MACRO     LABEL MACRO        *
         SPACE 2
         MACRO
&NAME    LABEL &LABEL1,&LABEL2,&LABEL3,&LABEL4,&LABEL5,&LABEL6,        C
               &LABEL7,&LABEL8
.*                            THIS MACRO ALLOWS UP TO ACHT LABELS TO
.*                                 BE SPECIFIED FOR A GIVEN LINE. THE
.*                                 LABELS SHOULD BE ENCLOSED IN QUOTA-
.*                                 TION MARKS. THE COLUMN AND LINE END
.*                                 CONTROLS WILL BE INSERTED BY THE
.*                                 MACRO. OMITTED OPERANDS MEAN NO
.*                                 LABEL REQUIRED FOR RESPECTIVE
.*                                 COLUMN. THIS MACRO WILL ALSO ALERT
.*                                 THE PROGRAMMER TO EXACTLY WHERE THE
.*                                 TABLE MUST BE BROKEN IF NECESSARY
.*                                 TO AVOID EXCEEDING THE MAXIMUM LIMIT
         GBLC &LABELS(2000)
         GBLC  &LBL(100)
         GBLA  &LBLCTR(100)
         GBLA  &LABELNR
         GBLA  &NRENTS,&LPTR
         LCLC  &MARGIN,&TACK
         LCLC  &TEXT
         LCLA  &OP,&K,&START,&NRCHAR,&REMAIN
&MARGIN  SETC  '*'
         AIF   ('&NAME' EQ '').LOOPOUT
&LPTR    SETA  &LPTR+1
&LBL(&LPTR) SETC '&NAME'
&LBLCTR(&LPTR) SETA &LABELNR+1
.LOOPOUT ANOP
&OP      SETA  &OP+1
&K       SETA  K'&SYSLIST(&OP)
         AIF (&K GE 2).NORM
&K       SETA  2
.NORM    ANOP
&START   SETA  2
         AIF (&OP LT N'&SYSLIST).NOTLAST
&MARGIN  SETC  '$'
.NOTLAST ANOP
&NRCHAR  SETA  8
&TACK    SETC  ''
.LOOPIN  ANOP
&REMAIN  SETA  &K-&START
         AIF (&REMAIN GE 8).MORE
&TACK    SETC  '&MARGIN'
&NRCHAR  SETA  &REMAIN
.MORE    ANOP
&TEXT    SETC  ''
         AIF (&REMAIN EQ 0).ENDTEXT
&TEXT    SETC  '&SYSLIST(&OP)'(&START,&NRCHAR)
.ENDTEXT ANOP
&LABELNR SETA  &LABELNR+1
&LABELS(&LABELNR) SETC '&TEXT'.'&TACK'
&START   SETA  &START+8
         AIF ('&TACK' EQ '').LOOPIN
         AIF ('&TACK' EQ '*').LOOPOUT
         MEND
         SPACE 2
         MACRO
         LSTART
.*                            THIS MACRO IS ISSUED WHEN THE LABEL AREA
.*                                 OF THE TABLE IS TO BEGIN.
         GBLC &LABELS(2000)
         GBLA  &LABELNR
         GBLC  &LBL(100)
         GBLA  &LBLCTR(100)
         LCLA  &NDX,&CTR
         LINEND
&CTR     SETA  1
.LOOP    ANOP
&NDX     SETA  &NDX+1
         AIF   (&LBLCTR(&CTR) NE &NDX).NOLBL
&LBL(&CTR) DC  C'&LABELS(&NDX)'
&CTR     SETA  &CTR+1
         AGO   .LOOPCTL
.NOLBL   ANOP
         DC    C'&LABELS(&NDX)'
.LOOPCTL AIF   (&NDX LT &LABELNR).LOOP
         MEND
         SPACE 2
         MACRO
         LINEND
.*                            THIS MACRO IS USED ONLY BY THE LINE
.*                                 MACRO TO SET THE NUMBER OF ENTRIES
.*                                 ASSOCIATED WITH EACH LINE.
         GBLA  &NRENTS
         GBLC &NRENTSX
         ORG   &NRENTSX
         DC    FL1'&NRENTS'
         ORG
&NRENTS  SETA  0
B&SYSNDX EQU   *
&NRENTSX SETC  'B&SYSNDX'
         MEND
         GBLC  &DSECT,&CSECT                                   @Z40NIVS
IFCECUA1 CSECT                                                 @Z40NIVS
&CSECT   SETC  'IFCECUA1'                                      @Z40NIVS
&DSECT   SETC  'M3420'                                         @Z40NIVS
M3420    DSECT                                                 @Z40NIVS
         DSGEN (CLASSRC,8),(SYSREL,8),(SWITCH1,8),(SWITCH2,8), @Z40NIVSC
               (SPARES,32)                                     @Z40NIVS
         DSGEN (BEGIN,16,EQU,CLASSRC)                          @Z40NIVS
         ORG   SPARES+1
         DSGEN (SHRCUA,16)
         ORG
         DSGEN (DUM1,8),(YEAR,8),(DAY,16),(TIME,32)            @Z40NIVS
         DSGEN (DUM2,8),(CPUSER,24),(CPUID,16),(DUM3,16)       @Z40NIVS
         DSGEN (JOBID,64),(FAILCCW1,32),(FAILCCW2,32),(,32),   @Z427VLSC
               (CSW,32),(,8),(SECUA,24),(,32)                  @Z427VLS
         DSGEN (,8),(PRIMCUA,24),(IORETRY,16),(SNSCNT,16)      @Z40NIVS
         DSGEN (VOLID,48),(BLKLENG,16),(HDRSER,16),(,16),      @Z427VLSC
               (TEMPRDS,8),                                    @Z427VLSC
               (TEMPWRTS,8),(SIOCNT,16),(PERMRDS,8),           @Z40NIVSC
               (PERMWRTS,8),                                   @Z40NIVSC
               (NOISEBLK,8),(,8),(ERASEGPS,16),(CLNRACTS,16)   @Z40NIVS
         DSGEN (SPAR,8),(NOISE,8),(RWVRC,8),(MTELRCR,8)        @Z40NIVS
         DSGEN (EDCCRC,8),(ENVCKVRC,8),(OVERRUN,4),            @Z40NIVSC
               (SKEWCHK,4),                                    @Z40NIVSC
               (CCOMPARE,4),(WRTTRVRC,4)                       @Z40NIVS
         DSGEN (PEIDCHK,1),(MASKEXP,6),(PARITY,1),             @Z40NIVSC
               (TRKINERR,8),                                   @Z40NIVSC
               (WRTTMCHK,4),(STRDCHK,4),(PARTREC,4),           @Z40NIVSC
               (EXCPAMB,4)                                     @Z40NIVS
         DSGEN (ORDROP,4),(FEEDTHRU,4),(EXP,4),(EARLBGRD,4),   @Z40NIVSC
               (EARLNDRD,4),(SLBGRD,4),(SLWNDRD,4),            @Z40NIVSC
               (VELRETRY,4),                                   @Z40NIVSC
               (EXP2,4),(VELCHNG,4),(EXP3A,4),(EXP3,4),        @Z40NIVSC
               (BACKWARD,8),                                   @Z40NIVSC
               (BUSOCHK,4),(ALUHRDER,4)                        @Z40NIVS
         DSGEN (SNB,1,0,23,0,7)                                @Z40NIVS
         DSGEN (SENSEB,48,EQU,SNB00)                           @Z40NIVS
         DSGEN (SENSEB1,48,EQU,SNB60)                          @Z40NIVS
         DSGEN (SENSEB2,48,EQU,SNB120)                         @Z40NIVS
         DSGEN (SENSEB3,48,EQU,SNB180)                         @Z40NIVS
         DSGEN (TUSERIAL,24,EQU,SNB150)                        @Z40NIVS
IFCECUA1 CSECT                                                 @Z40NIVS
         USING *,R9                                            @Z40NIVS
         USING M3420,R2                                        @Z40NIVS
         DC    A(ENTRIES)                                      @Z40NIVS
         DC    CL8'IFCECUA1'                                   @Z40NIVS
LINE     DC    F'0'                                            @Z40NIVS
LABEL    DC    F'0'                                            @Z40NIVS
RETHRE   DS    CL3                 THESE TWO FIELDS MUST BE    @Z40NIVS
WRTHRE   DS    CL3                 CONTIGUOUSDEC 20 FROM BEGIN @Z40NIVS
RETHREH  DS    CL3                 READ THRESHOLD IN HEX       @Z40NIVS
WRTHREH  DS    CL3                 WRITE THRESHOLD IN HEX      @Z40NIVS
HIDATE   DC    F'0'                                            @Z40NIVS
LODATE   DC    X'7FFFFFFF'                                     @Z40NIVS
CHAINST  DC    F'0'                                            @Z40NIVS
CHAINEND DC    F'0'                                            @Z40NIVS
XSAVE    DS    4F                                              @Z40NIVS
X01SAVE  DS    2F                                              @Z40NIVS
PGCNT    DC    X'00'                                           @Z40NIVS
SWTCH    DC    X'00'                                           @Z40NIVS
L0       EQU   0                                               @Z40NIVS
L1       EQU   1                                               @Z40NIVS
L2       EQU   2                                               @Z40NIVS
L3       EQU   3                                               @Z40NIVS
L4       EQU   4                                               @Z40NIVS
L5       EQU   5                                               @Z40NIVS
L6       EQU   6                                               @Z40NIVS
L8       EQU   8                                               @Z40NIVS
L21      EQU   21                                              @Z40NIVS
L24      EQU   24                                              @Z40NIVS
L28      EQU   28                                              @Z40NIVS
L76      EQU   76                                              @Z40NIVS
L77      EQU   77                                              @Z40NIVS
L44      EQU   44                                              @Z40NIVS
L120     EQU   120                                             @Z40NIVS
L108     EQU   108                                             @Z40NIVS
L115     EQU   115                                             @Z40NIVS
L118     EQU   118                                             @Z40NIVS
L15      EQU   15                                              @Z40NIVS
L11      EQU   11                                              @Z40NIVS
R0       EQU   0                                               @Z40NIVS
R1       EQU   1                                               @Z40NIVS
R2       EQU   2                                               @Z40NIVS
R3       EQU   3                                               @Z40NIVS
R4       EQU   4                                               @Z40NIVS
R5       EQU   5                                               @Z40NIVS
R6       EQU   6                                               @Z40NIVS
R7       EQU   7                                               @Z40NIVS
R8       EQU   8                                               @Z40NIVS
R9       EQU   9                                               @Z40NIVS
R14      EQU   14                                              @Z40NIVS
R15      EQU   15                                              @Z40NIVS
CHAR0    EQU   X'F0'                                           @Z40NIVS
DENS16   EQU   X'04'                                           @Z40NIVS
BIRCH    EQU   X'08'                                           @Z40NIVS
DISMOUNT EQU   X'84'                                           @Z40NIVS
LONG     EQU   X'40'                                           @Z40NIVS
SHORT    EQU   X'30'                                           @Z40NIVS
HEADSW   EQU   X'20'                                           @Z40NIVS
DUMMYR   EQU   X'FE'                                           @Z40NIVS
DISMONT  EQU   X'04'                                           @Z40NIVS
HEADPRT  EQU   X'80'                                           @Z40NIVS
FIVE     EQU   5                                               @Z427VLS
SIX      EQU   6                                               @Z427VLS
FOUR     EQU   4                                               @Z40NIVS
TWELVE   EQU   12                                              @Z40NIVS
ONE      EQU   1                                               @Z40NIVS
TWO      EQU   2                                               @Z40NIVS
L16      EQU   16                                              @Z40NIVS
UNITCHK  EQU   X'02'                                           @Z40NIVS
PRINTED  EQU   X'40'                                           @Z40NIVS
FSTIME   EQU   X'10'                                           @Z40NIVS
EQUIP    EQU   X'10'                                           @Z40NIVS
E        EQU   C'E'                                            @Z40NIVS
B        EQU   C'B'                                            @Z40NIVS
P        EQU   C'P'                                            @Z40NIVS
R        EQU   C'R'                                            @Z40NIVS
T        EQU   C'T'                                            @Z40NIVS
V        EQU   C'V'                                            @Z40NIVS
C        EQU   C'C'                                            @Z40NIVS
W        EQU   C'W'                                            @Z40NIVS
TAPBOT   EQU   X'60'                                           @Z40NIVS
ERASE    EQU   X'04'                                           @Z40NIVS
LOAD     EQU   X'01'                                           @Z40NIVS
L        EQU   C'L'                                            @Z40NIVS
PRESS    EQU   X'02'                                           @Z40NIVS
RESETKY  EQU   X'10'                                           @Z40NIVS
TACH     EQU   X'04'                                           @Z40NIVS
VELOC    EQU   X'01'                                           @Z40NIVS
WRITE    EQU   X'04'                                           @Z40NIVS
HIGH     EQU   2                                               @Z40NIVS
ZERO     DC    XL2'0000'                                       @Z427VLS
         SPACE 2                                               @Z40NIVS
ROUTER   STM   R5,R8,XSAVE         SAVE THE REGISTERS          @Z40NIVS
HEADER   TM    SWTCH,HEADSW        HAS HEADER BEEN PRINTED     @Z40NIVS
         BZ    ROUT1               NO, GO PRINT IT             @Z40NIVS
         TM    L4(R2),DUMMYR       IS THIS DUMMY RECORD        @Z40NIVS
         BO    ANYTHR              YES, GO SEE IF ANY PRINTED  @Z40NIVS
DATE     CLC   L8(L4,R4),HIDATE    DATE HIGHER THAN PREV HIGH? @Z40NIVS
         BNH   CHKLO               NO,CHECK LOW DATE
         MVC   HIDATE,L8(R4)       SET NEW HIGH DATE
CHKLO    CLC   L8(L4,R4),LODATE    DATE LOWER THAN PREV LOW?   @Z40NIVS
         BNL   CHKTHR              NO CHECK THRESHOLD
UPLO     MVC   LODATE,L8(R4)       SET NEW LOW DATE            @Z40NIVS
*        B     CKTHR               GO CHECK                    @Z40NIVS
*                                  THRESHOLD                   @Z40NIVS
         SPACE 2                                               @Z40NIVS
CHKTHR   TM    L3(R2),DISMOUNT     IS THIS A DISMOUNT?         @XA22537
         BZ    CHKUC               NO, GO SEE IF UNIT CHECK    @Z40NIVS
         CLC   L76(L1,R4),RETHREH+TWO  READS EXCEED THRESHOLD  @Z40NIVS
         BNL   PRCUAREC            YES, PRINT THIS RECORD      @Z40NIVS
         CLC   L77(L1,R4),WRTHREH+TWO  WRITES EXCEED THRESHOLD?@Z40NIVS
         BL    CHKUC               RETURN WITHOUT PRINT
PRCUAREC TM    SWTCH,HEADPRT       HAS HEADER BEEN PRINTED     @Z40NIVS
         BZ    PRTHDR              NO, GO PRINT IT             @Z40NIVS
         LA    R5,DETLINE-FOUR     CUA LINE ADDRESS            @Z40NIVS
         LA    R6,DETLABEL-ONE     CUA LABEL ADDRESS           @Z40NIVS
         STM   R5,R6,LINE          MAKE THEM CURRENT           @Z40NIVS
*        B     SKIPPRNT            RETURN                      @Z40NIVS
*                                  WITHOUT PRINT               @Z40NIVS
SKIPPRNT SR    R15,R15             ZERO R15 FOR NO PRINT       @Z40NIVS
RETURN   LM    R5,R8,XSAVE         RESTORE THE REGS            @Z40NIVS
         BR    R14                 RETURN                      @Z40NIVS
ROUT1    OI    SWTCH,HEADSW        SET HEADER SWITCH           @Z40NIVS
         PACK  DECBYTES+L6(L2),RETHRE(L3)  PACK THRESHOLD      @Z40NIVS
         CVB   R5,DECBYTES         CONVERT TO HEX              @Z40NIVS
         ST    R5,DECBYTES         STORE FOR MOVE              @Z40NIVS
         MVC   RETHREH(L3),DECBYTES+ONE  MOVE TO HEX FIELD     @Z40NIVS
         XC    DECBYTES(L8),DECBYTES CLEAR FOR NEXT USE        @Z40NIVS
         PACK  DECBYTES+L6(L2),WRTHRE PACK WRITE THRESHOLD     @Z40NIVS
         CVB   R5,DECBYTES         CONVERT TO HEX              @Z40NIVS
         ST    R5,DECBYTES         STORE FOR MOVE              @Z40NIVS
         MVC   WRTHREH(L3),DECBYTES+ONE                        @Z40NIVS
         XC    DECBYTES(L8),DECBYTES                           @Z40NIVS
         LA    R5,RPTLINE-FOUR     GET REPORT HEADER LINE      @Z40NIVS
         LA    R6,RPTLABEL-ONE     GET REPORT LABEL ADDRESS    @Z40NIVS
         STM   R5,R6,LINE          MAKE THEM CURRENT           @Z40NIVS
         B     SKIPPRNT            RETURN WITHOUT PRINT        @Z40NIVS
         SPACE 2                                               @Z40NIVS
PRTHDR   OI    SWTCH,HEADPRT       INDICATE HEADER PRINTED     @Z40NIVS
         LA    R5,CUALINE-FOUR     GET CUA HEADER LINE         @Z40NIVS
         LA    R6,CUALABEL-ONE     GET CUA HEADER LABEL        @Z40NIVS
         STM   R5,R6,LINE          MAKE THEM CURRENT           @Z40NIVS
         B     SKIPPRNT            RETURN WITHOUT PRINT        @Z40NIVS
THRHDR   MVC   L0(L3,R3),RETHRE    MOVE IN RD THRESHOLD VALUE  @Z40NIVS
         MVC   L16(L3,R3),WRTHRE   MOVE IN WRITE THRESHOLD     @Z40NIVS
         BR    14                  RETURN                      @Z40NIVS
CHKUCSV  STM   R5,R8,XSAVE         SAVE REGS                   @Z40NIVS
CHKUC    TM    L44(R2),UNITCHK     UNIT CHECK RECORD?          @Z40NIVS
         BZ    SKIPPRTT            NO, RETURN WITHOUT PRINTING @Z40NIVS
         OI    SWTCH,PRINTED       AT LEAST ONE PRINTED        @Z40NIVS
         LA    R5,UCLINE-FOUR      GET UNIT CHECK LINE         @Z40NIVS
         LA    R6,UCLABEL-ONE      GET UNIT CHECK LABEL        @Z40NIVS
         STM   R5,R6,LINE          MAKE THEM CURRENT           @Z40NIVS
         B     SKIPPRNT            RETURN WITHOUT PRINT        @Z40NIVS
SKIPPRTT LA    R5,SKIPLINE-FOUR    GET NULL LINE               @Z40NIVS
         LA    R6,SKIPLABL-ONE     GET NULL LABLE              @Z40NIVS
         STM   R5,R6,LINE          MAKE THEM CURRENT           @Z40NIVS
         B     SKIPPRNT            RETURN WITHOUT PRINT        @Z40NIVS
CHAIN    STM   R0,R1,X01SAVE       SAVE REGS                   @Z40NIVS
         STM   R5,R8,XSAVE         SAVE REGS                   @Z40NIVS
         GETMAIN R,LV=128          GET STORAGE FOR RECORD      @Z40NIVS
         LM    R5,R6,CHAINST       GET CHAIN POINTERS          @Z40NIVS
         XC    L0(L4,R1),L0(R1)    ZERO FORWARD POINTER        @Z40NIVS
         LTR   R5,R5               DOES CHAIN EXIST YET?       @Z40NIVS
         BNZ   NOTNEW              YES, GO CHAIN NEW ENTRY     @Z40NIVS
         ST    R1,CHAINST          ESTABLISH CHAIN START       @Z40NIVS
         ST    R1,CHAINEND         AND END                     @Z40NIVS
         B     MOVEDATA            GO MOVE IN RECORD           @Z40NIVS
NOTNEW   ST    R1,CHAINEND         ESTABLISH NEW CHAIN END     @Z40NIVS
         ST    R1,L0(R6)           FORWARD CHAIN FROM LAST     @Z40NIVS
MOVEDATA L     R3,LINEADDR         GET DATA ADDRESS            @Z40NIVS
         MVC   L4(L120,R1),L0(R3)  MOVE IN RECORD              @Z40NIVS
         LM    R0,R1,X01SAVE       RESTORE REGS                @Z40NIVS
         B     SKIPPRNT            RETURN WITHOUT PRINT        @Z40NIVS
ANYTHR   STM   R5,R8,XSAVE         SAVE REGS                   @Z40NIVS
         TM    SWTCH,HEADPRT       ANY THRESHOLD RECORDS?      @Z40NIVS
         BO    SEPARATR            YES, BRANCH                 @Z40NIVS
         LA    R5,NOTHRLNE-FOUR    GET ADDRESS OF 'NONE' MSG   @Z40NIVS
         LA    R6,NOTHRLBL-ONE     GET ADDRESS OF LABEL        @Z40NIVS
         STM   R5,R6,LINE          MAKE THEM CURRENT           @Z40NIVS
         B     SKIPPRNT            RETURN WITHOUT PRINT        @Z40NIVS
ENTSEP   STM   R5,R8,XSAVE         SAVE THE REGS               @Z40NIVS
SEPARATR LA    R5,SEPLINE-FOUR     GET SEPARATOR LINE          @Z40NIVS
         LA    R6,SEPLABEL-ONE     GET SEPARATOR LABEL         @Z40NIVS
         STM   R5,R6,LINE          MAKE THEM CURRENT           @Z40NIVS
         B     SKIPPRNT            RETURN WITHOUT PRINT        @Z40NIVS
SEPDEC   STM   R5,R8,XSAVE         SAVE REGS                   @Z40NIVS
FIR      TM    SWTCH,FSTIME        FIRST TIME?                 @Z40NIVS
         BZ    UCDEC               YES, GO SEE IF SEP NEEDED   @Z40NIVS
         MVI   SWTCH,L0            ELSE GET READY TO EXIT      @Z427VLS
         LA    R5,SKIPLINE-FOUR    GET NULL LINE               @Z40NIVS
         LA    R6,SKIPLABL-ONE     GET NULL LABEL              @Z40NIVS
         STM   R5,R6,LINE          MAKE THEM CURRENT           @Z40NIVS
         B     SKIPPRNT            RETURN WITHOUT PRINT        @Z40NIVS
UCDEC    OI    SWTCH,FSTIME        SET FIRST TIME SWITCH       @Z40NIVS
         LA    R5,UCHLINE-FOUR     GET UNIT CHECK  LINE        @Z40NIVS
         LA    R6,UCHLABEL-ONE     GET UNIT CHECK LABEL        @Z40NIVS
         STM   R5,R6,LINE          MAKE THEM CURRENT           @Z40NIVS
         B     SKIPPRNT            RETURN WITHOUT PRINT        @Z40NIVS
NOUCRS   LA    R5,NOUCLINE-FOUR    GET 'NONE' LINE
         LA    R6,NOUCLABL-ONE     GET 'NONE'LABEL             @Z40NIVS
         STM   R5,R6,LINE          MAKE THEM CURRENT           @Z40NIVS
         B     SKIPPRNT            RETURN WITHOUT PRINT        @Z40NIVS
CKNOUC   STM   R5,R8,XSAVE         SAVE THE REGS               @Z40NIVS
         TM    SWTCH,LONG              ANY UNIT CHECKS         @Z40NIVS
         BZ    NOUCRS              NO, BRANCH                  @Z40NIVS
         LA    R5,FIRUCLI-FOUR     GET UC HEADER LINE          @Z40NIVS
         LA    R6,FIRUCLA-ONE      GET UC HEADER LABEL         @Z40NIVS
         STM   R5,R6,LINE          MAKE THEM CURRENT           @Z40NIVS
         B     SKIPPRNT            RETURN WITHOUT PRINT        @Z40NIVS
UNCHAIN  STM   R5,R8,XSAVE         SAVE REGS                   @Z40NIVS
         L     R5,CHAINST          GET RECORD ADDRESS          @Z40NIVS
         LTR   R5,R5               DOES IT EXIST?              @Z40NIVS
         BZ    NOTES               NO, GO PUT OUT CE NOTES     @Z40NIVS
         MVC   L0(L120,R3),L4(R5)  MOVE IN RECORD              @Z40NIVS
         STM   R0,R1,X01SAVE       SAVE REGS                   @Z40NIVS
         MVC   CHAINST,L0(R5)      SET NEW CHAIN START         @Z40NIVS
         FREEMAIN R,LV=128,A=(R5)  FREE THIS RECORD            @Z40NIVS
         LM    R0,R1,X01SAVE       RESTORE REGS                @Z40NIVS
         LM    R5,R8,XSAVE         RESTORE REGS                @Z40NIVS
         LA    R15,ONE             SET R15 NON-ZERO            @Z40NIVS
         BR    R14                                             @Z40NIVS
NOTES    LA    R5,NOTELINE-FOUR    GET ADDRESS OF NOTE LINE    @Z40NIVS
         LA    R6,NOTELABL-ONE     AND LABEL                   @Z40NIVS
         STM   R5,R6,LINE          MAKE THEM CURRENT           @Z40NIVS
         B     SKIPPRNT            RETURN WITHOUT PRINTING     @Z40NIVS
RECHAIN  STM   R5,R8,XSAVE         SAVE REGS                   @Z40NIVS
         LA    R5,CHNLINE-FOUR     GET CHAIN LINE              @Z40NIVS
         LA    R6,CHNLABEL-ONE     GET CHAIN LABEL             @Z40NIVS
         STM   R5,R6,LINE          MAKE THEM CURRENT           @Z40NIVS
         B     SKIPPRNT            RETURN WITHOUT PRINT        @Z40NIVS
ERDECODE STM   R5,R8,XSAVE         SAVE REGS                   @Z40NIVS
         TM    L44(R4),UNITCHK     IS THIS UNIT CHECK?         @Z40NIVS
         BZ    NOTUC1              NO, BRANCH                  @Z40NIVS
         TM    L108(R4),EQUIP      EQUIPMENT CHECK?            @Z40NIVS
         BZ    NOTUC               NO, BRANCH                  @Z40NIVS
         MVI   L0(R3),E            MOVE IN THE E               @Z40NIVS
         MVI   L1(R3),B            MOVE IN THE B               @Z40NIVS
         TM    L115(R4),TAPBOT     IS IT TAPE BOTTOM?          @Z40NIVS
         BNZ   REPOSIT             YES, BRANCH                 @Z40NIVS
         MVI   L1(R3),E            INDICATE ERASE FAILURE      @Z40NIVS
         TM    L115(R4),ERASE      IS IT?                      @Z40NIVS
         BO    REPOSIT             YES, BRANCH                 @Z40NIVS
         MVI   L1(R3),L            INDICATE LOAD FAILURE       @Z40NIVS
         TM    L115(R4),LOAD       IS IT?                      @Z40NIVS
         BO    REPOSIT             YES, BRANCH                 @Z40NIVS
         MVI   L1(R3),P            AIR BEARING PRESSURE        @Z40NIVS
         TM    L115(R4),PRESS      IS IT?                      @Z40NIVS
         BO    REPOSIT             YES, BRANCH                 @Z40NIVS
         MVI   L1(R3),R            INDICATE RESET KEY          @Z40NIVS
         TM    L115(R4),RESETKY    IS IT?                      @Z40NIVS
         BO    REPOSIT             YES, BRANCH                 @Z40NIVS
         MVI   L1(R3),T            INDICATE TACH START FAILURE @Z40NIVS
         TM    L118(R4),TACH       IS IT?                      @Z40NIVS
         BO    REPOSIT             YES, BRANCH                 @Z40NIVS
         MVI   L1(R3),V            INDICATE VELOCITY CHECK     @Z40NIVS
         TM    L118(R4),VELOC      IS IT?                      @Z40NIVS
         BO    REPOSIT             YES, BRANCH                 @Z40NIVS
         MVI   L1(R3),C            INDICATE CAUSE UNKNOWN      @Z40NIVS
         B     REPOSIT             GO POSITION R3              @Z40NIVS
NOTUC1   MVI   L0(R3),P            MOVE IN P                   @Z40NIVS
         MVI   L1(R3),E            MOVE IN E                   @Z40NIVS
         B     REPOSIT             GO SET UP R3                @Z40NIVS
NOTUC    MVI   L0(R3),P            INDICATE PERMANENT ERROR    @Z40NIVS
         MVI   L1(R3),W            INDICATE PERMANENT WRITE    @Z40NIVS
         TM    SNB10,WRITE         IS IT?                      @Z40NIVS
         BO    REPOSIT             YES, BRANCH                 @Z40NIVS
         MVI   L1(R3),R            INDICATE PERMANENT READ     @Z40NIVS
REPOSIT  LA    R5,L3               CONSTANT THREE              @Z40NIVS
         SR    R3,R5               BACK UP THREE POSITIONS     @Z40NIVS
         LM    R5,R8,XSAVE         RESTORE REGS                @Z40NIVS
         BR    R14                 RETURN TO PRINT LINE        @Z40NIVS
MVVOL    MVC   L0(L6,R3),L0(R4)    MOVE IN VOL SER             @Z40NIVS
         BR    R14                 RETURN TO PRINT LINE        @Z40NIVS
MVJOB    MVC   L0(L8,R3),L0(R4)    MOVE IN JOBID               @Z40NIVS
         LA    R3,L3(R3)           BUMP THREE POSITIONS        @Z40NIVS
         BR    R14                 RETURN TO PRINT LINE        @Z40NIVS
MVHIDATE UNPK  L0(L5,R3),HIDATE    UNPACK DATE
         BR    R14
MVLODATE UNPK  L0(L5,R3),LODATE    UNPACK DATE
         BR    R14                 RETURN                      @Z40NIVS
NOZEROES LA    R4,TWELVE           CONSTANT 12                 @Z40NIVS
         SR    R3,R4               BACKUP                      @Z40NIVS
         ST    R3,LINEADDR         SAVE LINE ADDRESS           @Z40NIVS
         MVC   L0(L3,R3),L3(R3)    OVERLAY THE ZEROES          @Z40NIVS
         MVC   L3(L3,R3),L8(R3)    MOVE IN BLANKS              @Z40NIVS
         LA    R4,ONE              CONSTANT ONE                @Z40NIVS
         SR    R3,R4               DECREMENT PRINT POINTER     @Z40NIVS
         BR    R14                 RETURN                      @Z40NIVS
CHECKSER LA    R4,TWELVE           CONSTANT 12                 @Z40NIVS
         SR    R3,R4               BACKUP                      @Z40NIVS
         CLC   L0(L6,R3),ZEROS     IS SERIAL ZEROES?           @Z40NIVS
         BNER  R14                 RETURN IF NOT               @Z40NIVS
         MVC   L0(L6,R3),NA1                                   @Z40NIVS
         BR    R14                 RETURN                      @Z40NIVS
BACK6    BCTR  R3,R0               DECREMENT BY 6
BACK5    BCTR  R3,R0               DECREMENT BY 5
BACK4    BCTR  R3,R0               DECREMENT BY 4
BACK3    BCTR  R3,R0               DECREMENT BY 3
         BCTR  R3,R0               DECREMENT BY 2
         BCTR  R3,R0               DECREMENT BY 1
         BR    R14                 RETURN                      @Z427VLS
SETBINA  STM   R5,R8,STOREREG      SAVE REGISTERS              @Z40NIVS
         LR    R8,R3               PUT LINE POINTER TO REGISTER@Z40NIVS
         LA    R5,L8               PUT COUNTER IN REGISTER     @Z40NIVS
         IC    R7,L0(R4)           GET THE BYTE TO PRINT       @Z40NIVS
         SLL   R7,L24              SHIFT TO LOW BIT POSITIONS  @Z40NIVS
CHNGBITS SR    R6,R6               CLEAR REGISTER              @Z40NIVS
         SLDL  R6,L1               MOVE ONE BIT INTO REG       @Z40NIVS
         STC   R6,L0(R8)           STORE THE BIT ON PRINT LINE @Z40NIVS
         OI    L0(R8),CHAR0       MOVE ZONE TO MAKE IT A PRINTABLE CHAR
         LA    R8,L1(R8)           INCREMENT PRINT LINE        @Z40NIVS
         BCT   R5,CHNGBITS         ALL BITS BEEN PRINTED       @Z40NIVS
         LM    R5,R8,STOREREG      RESTORE REGISTERS           @Z40NIVS
DONOTHNG BR    R14                 RETURN                      @Z40NIVS
PUTVOL   MVC   L21(L6,R3),VOLID    MOVE VOLID TO PRINT LINE    @Z40NIVS
         LA    R3,L6(R3)           SET PRINT BUFFER POINTER    @Z40NIVS
         CLC   SNSCNT(L2),NINER   IF MORE THAN NINE SENSE BYTES@Z40NIVS
*        THE COUNTER IS VALID AND PUT IN THE                   @Z40NIVS
*                                  PRINTOUT                    @Z40NIVS
         BNH   NOTAPP             ONLY 9 SENSE PUT N/A         @Z40NIVS
         CLC   TUSERIAL(L2),ZERO   IS THIS AN OLD STYLE RECORD?
         BH    TWOBYTES            YES, GO TO CONVERT IT       @Z427VLS
         B     NOTAPP              NO PUT IN N/A               @Z40NIVS
SERHDR   CLC   HDRSER(L2),ZERO     IS ZERO # IN HEADER 2 OF REC
         BH    TWOBYTES            YES, GO TO CONVER IT        @Z427VLS
         B     NOTAPP              NO, PUT IN N/A              @Z427VLS
*                                                                     *
*  THE NRZI NOISE COUNTER IS ONLY VALID FOR NRZI TAPES - - THE 1600   *
* BPI BIT IS CHECKED TO SEE IF IT IS A PE TAPE -- IF IT IS WE RETURN  *
* WITHOUT PRINTING THE COUNTER VALUE SINCE IT IS INVALID              *
*                                                                     *
CHKNRZI  LA    R4,NOISE            ADDRESS OF NOISE CTR FOR CONV
         CLC   TUSERIAL(L2),ZERO   IS THIS AN OLD STYLE RECORD @Z427VLS
         BNH   NOTAVAIL                                        @Z427VLS
         TM    SNB30,DENS16        1600 BPI?                   @Z427VLS
         BO    NOTAVAIL                                        @Z427VLS
         TM    SNB60,BIRCH         6250 BPI?                   @Z427VLS
         BNO   ONEBYTE             NO, PUT IN DENSITY          @Z427VLS
NOTAVAIL MVC   L1(L3,R3),NA        YES, PUT IN N/A IN PRINT BUFFER
         LA    R3,L4(R3)           INCREMENT PRINT BUFFER PTR  @Z427VLS
         BR    R14                 EXIT                        @Z427VLS
*                                                                     *
*                                                                     *
*                                                                     *
*THIS ROUTINE WILL TAKE A ONE BYTE COUNTER FROM THE LOGREC ENTRY AND  *
* CONVERT IT TO EBCDIC AND PUT IT INTO THE PRINT BUFFER               *
* IT IS ALSO USED TO CONVERT WHATEVER BINARY VALUE THAT IS IN R4 TO   *
* A PRINTABLE FORM.R6 MUST BE SET TO THE LENGTH OF THE RECEIVING FIELD*
* FOR THE EXECUTE INSTRUCTION                                         *
*                                                                     *
ONEBYTE  STM   R5,R8,STOREREG      STORE REGISTERS             @Z40NIVS
         SR    R5,R5               CLEAR REGISTER5             @Z40NIVS
         IC    R5,L0(R4)           GET THE BYTE TO BE CONVERTED@Z40NIVS
PROCDEC  LA    R8,INLINE           LOAD THE RETURN ADDRESS     @Z40NIVS
         LA    R6,SHORT            GET LENGTH FOR EXECUTE INSTRUCTION
CONVERT  CVD   R5,DECBYTES         CONVERT TO DECIMAL          @Z40NIVS
         EX    R6,UNPACK           UNPACK INTO THE PRINT BUFFER@Z40NIVS
         BR    R8                  RETURN TO INLINE PROCESSING @Z40NIVS
INLINE   OI    L3(R3),CHAR0        MAKE THE LAST CHAR A PRINTABLE NBR
         LM    R5,R8,STOREREG      RELOAD REGISTERS            @Z40NIVS
         LA    R3,L4(R3)           INCREMENT PRINT BUFFER PTR  @Z40NIVS
         BR    R14                 RETURN                      @Z40NIVS
UNPACK   UNPK  L0(L1,R3),DECBYTES(L8) UNPACK NUMBER5 TO PRINT LINE
*                                                                     *
* THIS ROUTINE IS USED TO ISOLATE THE RIGHT HALF OF A BYTE AND GOES   *
* TO HAVE IT CONVERTED TO PRINTABLE FORM                              *
*                                                                     *
RGHTHALF STM   R5,R8,STOREREG      STORE REGISTERS             @Z40NIVS
         SR    R5,R5               CLEAR REGISTER              @Z40NIVS
         IC    R5,L0(R4)           GET A BYTE FROM RECORD      @Z40NIVS
         SLL   R5,L28              GET RID OF LOW ORDER BITS   @Z40NIVS
         SRL   R5,L28              MOVE BACK                   @Z40NIVS
         B     PROCDEC             GO TO CONVERT IT            @Z40NIVS
*                                                                     *
NOTAPP   MVC   L1(L3,R3),NA        MOVE N/A TO PRINT BUFFER IF @Z40NIVS
         BR    R14                 COUNTER IS NOT VALID        @Z40NIVS
CHKDEV   CLC   SNSCNT(L2),NINER    IF MORE THAN 9 SENSE BYTES THE
*                                  COUNTER IS VALID AND PUT IN THE
*                                  PRINTOUT                    @Z40NIVS
         BC    HIGH,RGHTHALF       YES IT IS GO PUT IT OUT     @Z40NIVS
         MVC   L0(L3,R3),NA        MOVE NA TO PRINT BUFFER     @Z40NIVS
         LA    R3,L4(R3)           INCREMENT PRINT BUFFER PTR  @Z40NIVS
         BR    R14                 RETURN CONTROL              @Z40NIVS
*                                                                     *
* USED TO GET A HALFWORD COUNTER FROM THE RECORD AND GOES TO HAVE IT  *
* CONVERTED TO PRINTABLE FORM.RETURNS TO HAVE THE ZONE CHANGED BECAUSE*
* THIS WILL BE REPRESENTED AS A FIVE DIGIT NUMERAL RATHER THAN A FOUR *
* DIGIT AS THE SINGLE AND HALF BYTE COUNTERS.                         *
*                                                                     *
TWOBYTES STM   R5,R8,STOREREG      STORE REGISTERS             @Z40NIVS
         MVC   HALFCNTR(L2),L0(R4) MOVE THE COUNTER TO STORAGE @Z40NIVS
         L     R5,FULLCNTR         PUT THE COUNTER INTO A REGISTER
         LA    R6,LONG             GET LENGTH FOR EXECUTE INSTRUCTION
         BAL   R8,CONVERT          GO TO CONVERT THE NUMBER TO EBCDIC
         OI    L4(R3),CHAR0        MAKE LAST CHARACTER PRINTABLE
         LM    R5,R8,STOREREG      RESTORE REGISTERS           @Z40NIVS
         BR    R14                 RETURN                      @Z40NIVS
*                                                                     *
* THIS CODE WILL TAKE THE DATE FROM THE RECORD UNPACK IT AND PUT IT   *
* IN THE PRINT BUFFER.                                                *
*                                                                     *
SETDATE  UNPK  DECBYTES(L5),L0(L3,R4) UNPACK THE DATE          @Z40NIVS
         LA    R3,L6(R3)           BUMP PRINT POSITION         @Z40NIVS
         MVC   L0(L3,R3),DECBYTES+L2 MOVE IN DAY               @Z40NIVS
         OI    L2(R3),CHAR0        OR IN SIGN                  @Z40NIVS
         MVC   L4(L2,R3),DECBYTES  MOVE IN YEAR                @Z40NIVS
         LA    R3,L15(R3)          BUMP PRINT POSITION         @Z40NIVS
         BR    R14                 RETURN                      @Z40NIVS
SETDATE1 UNPK  DECBYTES(L5),L0(L3,R4) UNPACK THE DATE          @Z40NIVS
         MVC   L0(L5,R3),DECBYTES  MOVE TO PRINT POSITIONS     @Z40NIVS
         OI    L4(R3),CHAR0        OR IN SIGN                  @Z40NIVS
         BR    R14                 RETURN                      @Z40NIVS
*                                                                     *
* THE FOLLOWING ARE ROUTINES TO INCREMENT THE PRINT BUFFER POINTER.   *
*                                                                     *
*                                                                     *
ADD11    LA    R3,L5(R3)           ADD 11
ADD6     LA    R3,L2(R3)           ADD 6
ADD4     LA    R3,L1(R3)           ADD 4
ADD3     LA    R3,L3(R3)          INCREMENT PRINT POSITION BY 3 BYTES
         BR    R14                                             @Z40NIVS
         BR    R14                                             @Z40NIVS
*                                                                     *
* THIS CODE INSPECTS THE SENSE BITS TO DETERMINE WHAT DENSITY IS TO   *
* BE PUT IN THE PRINT BUFFER..                                        *
*                                                                     *
*                                                                     *
*                                                                     *
WHATDENS CLC   TUSERIAL(L2),ZERO   IS THIS AN OLD STYLE RECORD?
         BNH   NOTAPP                                          @Z427VLS
CHKDENS  TM    SNB30,DENS16        IS THIS A 1600 BPI DRIVE    @Z40NIVS
         BO    PUT1600             YES PUT IT IN PRINTOUT      @Z40NIVS
         TM    SNB60,BIRCH         IS THIS A NEW DRIVE         @Z40NIVS
         BO    PUT6250             YES PUT IN 6250             @Z40NIVS
PUT800   MVC   L0(L3,R3),BPI800    PUT 800 IN PRINT BUFFER     @Z40NIVS
         BR    R14                 RETURN                      @Z40NIVS
PUT1600  MVC   L0(L4,R3),BPI1600   PUT 1600 IN PRINT BUFFER    @Z40NIVS
         BR    R14                 RETURN                      @Z40NIVS
PUT6250  MVC   L0(L4,R3),BPI6250   MOVE IN BPI                 @Z40NIVS
         BR    R14                                             @Z40NIVS
BPI800   DC    CL3'800'                                        @Z40NIVS
BPI1600  DC    CL4'1600'                                       @Z40NIVS
BPI6250  DC    CL4'6250'                                       @Z40NIVS
DECAREA  DC    CL5' '                                          @Z427VLS
NINER    DC    H'9'                                            @Z40NIVS
LINEADDR DS    F                                               @Z40NIVS
DECBYTES DC    D'0'                                            @Z40NIVS
STOREREG DC    6F'0'                                           @Z40NIVS
FULLCNTR EQU   STOREREG+20                                     @Z40NIVS
HALFCNTR EQU   STOREREG+22                                     @Z40NIVS
ZEROS    DC    C'000000'                                       @Z40NIVS
NA1      DC    C'  '
NA       DC    CL3'N/A'                                        @Z40NIVS
         DC    C'  '
SWIND    DC    X'00'                                           @Z40NIVS
*                                                                     *
*                                                                     *
ENTRIES  DS    0F                                              @Z40NIVS
         DC    XL4'00'                                         @Z40NIVS
         DC    XL4'00'                                         @Z40NIVS
         DC    A(LABELS)                                       @Z40NIVS
         DC    H'0'                                            @Z40NIVS
         LINE
         ROUTINE BEGIN,ROUTER                                  @Z40NIVS
         LABEL ''                                              @Z40NIVS
RPTLINE  DC    X'01'                                           @Z40NIVS
         DC    X'000B8B00'                                     @Z40NIVS
RPTLABEL LABEL ''                                              @Z40NIVS
         LINE  (1,1),(40,1),SKIP=1                             @Z40NIVS
         LABEL 'XXXXX 34XX/3803 SUBSYSTEM SUMMARY XXXXX'
         LINE  (67,1),(40,27)
         HEX   SHRCUA
         LABEL 'XXXXX      PRIMARY CUA - ','X      XXXXX'
         LINE  (49,16),(5,16),SKIP=1                           @Z40NIVS
         ROUTINE BEGIN,THRHDR                                  @Z40NIVS
         LABEL '            CUA',                              @Z40NIVSX
               'STATISTICS - CUA',                             @Z40NIVSX
               'S EXCEEDING',                                  @Z40NIVSX
               'TEMP RDS OR',                                  @Z40NIVSX
               'TEMP WRTS'                                     @Z40NIVS
         LINE  (49,16),(5,16),SKIP=1                           @Z40NIVS
         ROUTINE BEGIN,ROUTER                                  @Z40NIVS
SKIPLABL LABEL ''                                              @Z40NIVS
UCLINE   LINE  (6,7),(47,1),SKIP=1                             @Z40NIVS
         HEX   SECUA                                           @Z40NIVS
         ROUTINE BEGIN,NOZEROES                                @Z40NIVS
         ROUTINE TUSERIAL,TWOBYTES                             @Z40NIVS
         ROUTINE BEGIN,BACK3                                   @Z40NIVS
         ROUTINE BEGIN,CHECKSER                                @Z40NIVS
         ROUTINE BEGIN,ERDECODE                                @Z40NIVS
         ROUTINE VOLID,MVVOL                                   @Z40NIVS
         HEX   FAILCCW1,0,4B                                   @Z427VLS
         ROUTINE BEGIN,BACK6                                   @Z427VLS
         HEX   FAILCCW2,0,4B                                   @Z427VLS
         ROUTINE BEGIN,BACK5                                   @Z427VLS
         HEX   CSW,0,4B                                        @Z427VLS
         ROUTINE BEGIN,BACK5                                   @Z427VLS
         HEX   SENSEB,1,6B                                     @Z40NIVS
         ROUTINE BEGIN,ADD4
         HEX   SENSEB1,1,6B                                    @Z40NIVS
         ROUTINE BEGIN,ADD4
         HEX   SENSEB2,1,6B                                    @Z40NIVS
         ROUTINE BEGIN,ADD4
         HEX   SENSEB3,1,6B                                    @Z40NIVS
UCLABEL  LABEL '.'                                             @Z40NIVS
         ROUTINE BEGIN,CHAIN                                   @Z40NIVS
SKIPLINE DC    X'FF'                                           @Z40NIVS
         DC    XL6'000000000000'                               @Z40NIVS
NOTELINE LINE  ,(1,40),SKIP=1                                  @Z40NIVS
NOTELABL LABEL 'PW  PERMANENT WRITE','PR  PERMANENT READ',     @Z40NIVSX
               'PE  CAUSE UNKNOWN'                             @Z40NIVS
         LINE  ,(1,40),SKIP=1                                  @Z40NIVS
         LABEL 'EC  EQUIPMENT CHECK, CAUSE UNKNOWN','EE  ERASE HEAD'
         LINE  ,(1,40),SKIP=1                                  @Z40NIVS
         LABEL 'EB  TAPE BOTTOM, LEFT OR RIGHT','EL  LOAD FAILURE'
         LINE  ,(1,40),SKIP=1                                  @Z40NIVS
         LABEL 'EP  AIR BEARING PRESSURE','ET  TACH START FAILURE'
         LINE  ,(1,40),SKIP=1                                  @Z40NIVS
         LABEL 'EV  VELOCITY CHECK','ER  RESET KEY'            @Z40NIVS
         LINE  ,(1,40),SKIP=1                                  @Z40NIVS
         ROUTINE BEGIN,ENTSEP                                  @Z40NIVS
         LABEL ''                                              @Z40NIVS
NOTHRLNE LINE  (68,9),(40,34),SKIP=1
         ROUTINE  BEGIN,MVLODATE
         ROUTINE  BEGIN,MVHIDATE
NOTHRLBL LABEL 'NO CUAS EXCEEDED THRESHOLD:',                  @Z40NIVSX
               'TO'                                            @Z40NIVS
SEPLINE  LINE  ,(1,45),SKIP=2                                  @Z40NIVS
SEPLABEL LABEL 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX',        X
               'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX',        X
               'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'
         LINE  ,(1,45),SKIP=2                                  @Z40NIVS
         ROUTINE BEGIN,SEPDEC                                  @Z40NIVS
         LABEL ''                                              @Z40NIVS
UCHLINE  LINE  (1,1),(44,1),SKIP=1                             @Z40NIVS
UCHLABEL LABEL 'PERMANENT ERROR SUMMARY'                       @Z40NIVS
         LINE  (1,1),(44,1),SKIP=1                             @Z40NIVS
         ROUTINE BEGIN,CKNOUC                                  @Z40NIVS
         LABEL ''                                              @Z40NIVS
FIRUCLI  LINE  (1,1),(74,4),SKIP=1                             @Z40NIVS
FIRUCLA  LABEL '...SENSE...'                                   @Z40NIVS
         LINE  ,(78,2),SKIP=1                                  @Z40NIVS
         LABEL '   1  1  1  1  1  1  1  1  1  1  2  2  2  2'
         LINE  ,(1,40)                                         @Z40NIVS
         LABEL 'DEV  SERIAL ERR  VOLID     LAST CCW  ',        @Z427VLSX
               'CSW44-47  0  1  2  3  4  5  6  7  8  9',       @Z427VLSX
               '0  1  2  3  4  5  6  7  8  9  0  1  2  3'      @Z40NIVS
CHNLINE  LINE (1,1)                                            @Z40NIVS
         ROUTINE BEGIN,UNCHAIN                                 @Z40NIVS
CHNLABEL LABEL ''                                              @Z40NIVS
*                                                              @Z40NIVS
         LINE (1,1)                                            @Z40NIVS
         ROUTINE BEGIN,RECHAIN                                 @Z40NIVS
         LABEL ''                                              @Z40NIVS
*                                                              @Z40NIVS
NOUCLINE LINE  (73,9),(40,39),SKIP=1
         ROUTINE BEGIN,MVHIDATE
         ROUTINE BEGIN,MVLODATE
NOUCLABL LABEL 'NO PERMANENT ERRORS ENCOUNTERED:',             @Z40NIVSX
               'TO'                                            @Z40NIVS
         LINE  (64,9),(40,39),SKIP=1                           @Z40NIVS
         ROUTINE BEGIN,ENTSEP                                  @Z40NIVS
*                                                              @Z40NIVS
         LABEL ''                                              @Z40NIVS
CUALINE  LINE  ,(11,50),SKIP=1                                 @Z40NIVS
         ROUTINE DUM1,DONOTHNG                                 @Z40NIVS
CUALABEL LABEL 'TU    DATE   VOLUME     TIME      --TEMP--  SIO',      C
               'DEN- NRZI  R/W WR TG LRC  CRC  ECC  SKEW ERLY VEL',    X
               ' ----CPU----   HDR'
         LINE  ,(3,52),SKIP=1                                  @Z40NIVS
         ROUTINE DUM1,DONOTHNG                                 @Z40NIVS
         LABEL 'CUA   SERIAL DAY YR  SERIAL  HH MM SS.TH  RDS  WRTS',  C
               'COUNT SITY NOISE VRC  VRC  MTE  EDC  ENV  ERR  BOR',   C
               'CHG   ID  SERIAL   SER'
         LINE  ,(3,52),SKIP=1                                  @Z40NIVS
         ROUTINE DUM1,DONOTHNG                                 @Z40NIVS
NOLAB    LABEL ''                                              @Z40NIVS
DETLINE  EQU   *                                               @Z40NIVS
ONLYENT  LINE  (2,1),,SKIP=1                                   @Z40NIVS
         HEX   PRIMCUA,0,3B                                    @Z40NIVS
         ROUTINE TUSERIAL,PUTVOL                               @Z40NIVS
         ROUTINE YEAR,SETDATE                                  @Z40NIVS
         HEX   TIME,1,4B                                       @Z40NIVS
         ROUTINE DUM1,ADD11                                    @Z40NIVS
         ROUTINE TEMPRDS,ONEBYTE                               @Z40NIVS
         ROUTINE TEMPWRTS,ONEBYTE                              @Z40NIVS
         ROUTINE SIOCNT,TWOBYTES                               @Z40NIVS
         ROUTINE DUM1,ADD4                                     @Z40NIVS
         ROUTINE SNB60,WHATDENS                                @Z40NIVS
         ROUTINE SPARES,ADD3                                   @Z40NIVS
         ROUTINE SNB30,CHKNRZI                                 @Z40NIVS
         ROUTINE DUM1,DONOTHNG                                 @Z40NIVS
         ROUTINE RWVRC,ONEBYTE                                 @Z40NIVS
         ROUTINE CCOMPARE,CHKDEV                               @Z40NIVS
         ROUTINE MTELRCR,ONEBYTE                               @Z40NIVS
         ROUTINE EDCCRC,ONEBYTE                                @Z40NIVS
         ROUTINE ENVCKVRC,ONEBYTE                              @Z40NIVS
         ROUTINE SKEWCHK,RGHTHALF                              @Z40NIVS
         ROUTINE EXP,CHKDEV                                    @Z40NIVS
         ROUTINE EXP2,CHKDEV                                   @Z40NIVS
         HEX   CPUID,0,2B
         ROUTINE DUM1,ADD3
         HEX   CPUSER,0,3B
         ROUTINE DUM1,ADD6
         ROUTINE HDRSER,SERHDR                                 @Z427VLS
DETLABEL EQU   *                                               @Z40NIVS
         LABEL ''                                              @Z40NIVS
         LINE
         ROUTINE BEGIN,CHKUCSV                                 @Z40NIVS
         LABEL ''                                              @Z40NIVS
LABELS   DS    0F                                              @Z40NIVS
         LSTART                                                @Z40NIVS
         END
