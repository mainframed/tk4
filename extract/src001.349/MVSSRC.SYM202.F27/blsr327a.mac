         TITLE 'BLSR327A--SETUP AND CLEANUP'
*---------------------------------------------------------------------*
*                                                                     *
*BLSR327A--SETUP AND CLEANUP                                          *
*                                                                     *
*---------------------------------------------------------------------*
         COPY  BLSR327M           COPY GLOBAL DEFINITIONS
         COPY  BLSR327P           EQUATED VALUES AND DSECTS
         TITLE 'BLSR327A--ENTRY POINT FROM BLSR3270'
         SPACE 2
*---------------------------------------------------------------------*
*BLSR327A--ENTRY POINT FROM BLSR3270--THE FOLLOWING FUNCTIONS ARE     *
*        PERFORMED BY INCLUDED CODE SEGMENT BLSR327A:                 *
*        1. ESTABLISH ASSEMBLER ENVIRONMENT (PROLOG)                  *
*        2. INITIALIZE FLAGS AND DATA AREAS                           *
*        3. OUTPUT FORMATTED SCREEN BUFFER (TPUT)              @ZA31999
*        4. READ INPUT BUFFER (TGET, TCLEARQ)                  @ZA31999
*        5. SET-UP RESPONSE ANALYSIS                           @ZA31999
*        6. RESET STATUS AS A RESULT OF VALIDATED INPUT        @ZA31999
*        7. ADD SUBCOMMAND LINE TO TSO STACK                   @ZA31999
*        8. MAINTAIN DSPL3270 STACK                            @ZA31999
*        9. EXIT ASSEMBLER ENVIRONMENT (EPILOG)                @ZA31999
*                                                                     *
*---------------------------------------------------------------------*
         SPACE
*---------------------------------------------------------------------*
*  ESTABLISH ASSEMBLER ENVIRONMENT (PROLOG)                           *
*---------------------------------------------------------------------*
         SPACE
BLSR327A CSECT
         DROP  RB,RC              PL/S DATAREG & CODEREG
         USING @SA00001,RD        ->AUTOMATIC STORAGE
         USING EA000100,RF        FORMAL LINKAGE REGISTER
EA000100 STM   R0,RF,SAVER0RF     SAVE INPUT REGISTERS
         SPACE 1
*---------------------------------------------------------------------*
*  INITIALIZE FLAGS AND DATA AREAS                                    *
*---------------------------------------------------------------------*
         SPACE 1
*---------------------------------------------------------------------*
*        DSPL3270 UTILIZES A WORK AREA (AT WKAORG) IN AUTOMATIC       *
*        STORAGE WHICH DEFINES THE CURRENT FORMAT OF THE SCREEN.      *
*        THE CONTENT OF THIS AREA IS INITIALIZED ONE OF TWO WAYS,     *
*        DEPENDING OF THE SETTING OF THE RESET/NORESET OPERAND        *
*        CONSIDERED IN CONJUNCTION WITH THE EXISTENCE/NONEXISTENCE    *
*        OF PREVIOUSLY ESTABLISHED DUMP CLUSTER DATA:                 *
*        1. INITIALIZED USING DATA SAVED IN THE DUMP CLUSTER IF       *
*           SUCH DATA EXISTS AND NORESET WAS ENTERED OR ALLOWED TO    *
*           DEFAULT.                                                  *
*        2. INITIALIZED USING PERMANENT VALUES ADDRESSED BY FIELD     *
*           ZZ1327WP IF RESET WAS SPECIFIED AND/OR NO DUMP CLUSTER    *
*           EXISTS FOR THE CURRENT DUMP.                              *
*---------------------------------------------------------------------*
         SPACE
         CLI   WKRESET,1          DOES WORK AREA NEED INITIALIZATION?
         BNE   LA000200           NO
         L     RC,ZZ1P            ->ZZ1
         L     R0,ZZ1327WP(0,RC)  ->BLSR327W PERMANENT COPY
         LA    R1,WKALENG         LENGTH(BLSR327W)
         LA    R2,WKAORG          ->BLSR327W WORKING COPY
         LR    R3,R1              LENGTH(BLSR327W)
         MVCL  R2,R0              PERMANENT COPY=>WORKING COPY
         SPACE
LA000200 LA    RC,LA000200        PROCESSING BASE REGISTER (1 OF 2)
         DROP  RF
         USING LA000200,RC,RB
         LA    RB,LA000200+4095   PROCESSING BASE REGISTER (2 OF 2)
         LA    RB,1(RB)
         SPACE 2
*---------------------------------------------------------------------*
*        INITIALIZE BLSRVPAS PARAMETER LIST                           *
*---------------------------------------------------------------------*
         LA    RF,PACKDEC+3       -> ASID (BINARY)
         ST    RF,PDEIP           INITIALIZE PDE
         LA    RF,PDE             -> PDE
         ST    RF,APDE            1ST PARAMETER
         L     RF,ZZ2P            -> ZZ2
         ST    RF,AZZ2            2ND PARAMETER
         L     RF,=X'80000000'    NO MESSAGE - NULL PARAMETER
         ST    RF,AMSG            3RD PARAMETER
*---------------------------------------------------------------------*
*        DO HOUSEKEEPING                                              *
*---------------------------------------------------------------------*
         SPACE
         LA    RF,0               ASSUME SUCCESSFUL
         ST    RF,SAVERF          -COMPLETION
         MVI   FLAG0,FLAG0FMT     INITIAL FLAG BYTE 0 STATUS
         MVI   FLAG1,FLAG1ADR+FLAG1ASI+FLAG1FMT+FLAG1ARE FLAG BYTE 1
         MVI   FLAG2,0            INITIAL FLAG BYTE 2 STATUS
         MVI   ERLN4,0            INITIAL INPUT ERROR STATUS
         MVI   SCRPO,0            INITIAL SCREEN POSITION INDICATOR
         MVI   NEWWCC,B'00000000' INITIAL WRITE CONTROL CHARACTER
         MVC   PREVCURS,=X'C5D3'  INITIAL CURSOR SAVE ADDRESS
         MVC   NEWLINES(4),WKALINES INITIAL LINES/AREA
         MVC   NEWLNCTL(19),WKALNCTL INITIAL LINE CONTROL DATA
         SPACE 1
         CLC   WKANB1,=CL6'CVT'   INITIAL ENTRY?
         BNE   LA000400           NO
         MVC   WKASTACK,ZZ2AMDC(R9) ->CVT
         SPACE
LA000400 BAL   R8,LA000820        GET RID OF EXTRANEOUS INPUT
         B     BLSR327G           START THE PROCESS
         SPACE 2
         COPY  BLSR327B           BUILD 3277 ORDER STREAM
         TITLE 'BLSR327A--OUTPUT FORMATTED SCREEN BUFFER (TPUT)'
*---------------------------------------------------------------------*
*  OUTPUT FORMATTED SCREEN BUFFER (TPUT)                              *
*---------------------------------------------------------------------*
         SPACE
LA000500 L     R1,ZZ1P            ->ZZ1
         CLI   ZZ1EVEP(R1),0      TERMINATE?
         BNE   LA005600           YES
         LR    R0,RA              R0 WILL HAVE LENGTH FOR TPUT
         LA    R1,SCRNBUFR        ->TGET/TPUT BUFFER
         SLR   R0,R1              LENGTH TO WRITE
         ICM   R1,B'1000',=BL1'00001011' FULL SCREEN TPUT OPTION
         TPUT  (1),(0),R
         CH    RF,=H'8'           UNSUPPORTED RETURN CODE
         BNH   LA000510           NO
         LA    RF,16              YES - SET
         ST    RF,SAVERF          -RETURN CODE
         B     LA005600           -AND GIVE UP
LA000510 EQU   *
         B     LA000600(RF)       MAYBE. USE BRANCH TABLE TO DECIDE
LA000600 B     0(R8)              RC=0, SUCCESSFUL WRITE-RET TO CALLER
         B     LA005600           RC=4, ERROR. WE USE WAIT OPTION
         B     LA000500           RC=8, ATTN-ENTER SEQUENCE--RETRY
         SPACE 2
*---------------------------------------------------------------------*
*  READ INPUT BUFFER (TGET, TCLEARQ)                                  *
*---------------------------------------------------------------------*
         SPACE
LA000700 LA    R0,2560            LENGTH OF TGET/TPUT BUFFER
         LA    R1,SCRNBUFR        ->TGET/TPUT BUFFER
         ICM   R1,B'1000',=BL1'10000001' ASIS TGET OPTION
         TGET  (1),(0),R
         CH    RF,=H'12'          UNSUPPORTED RETURN CODE
         BNH   LA000710           NO
         LA    RF,16              YES - SET
         ST    RF,SAVERF          -RETURN CODE
         B     LA005600           -AND GIVE UP
LA000710 EQU   *
         B     LA000800(RF)       TEST TGET RETURN CODE
LA000800 B     LA000900           RC=0, SUCCESSFUL READ, SAVE DATA LEN
         B     LA005600           RC=4, ERROR. WE USE WAIT OPTION
         B     LC000200           RC=8, ATTN-ENTER SEQUENCE--RESEND
         OI    FLAG0,FLAG0FMT     RC=12, HAVEN'T LOST ANYTHING MUCH
         CLI   ERLN4,0            ARE WE IN THE MIDDLE OF ERRORS?
         BNE   LA000810           -YES, LEAVE FLAG0 AS IS
         NI    FLAG0,FLAG0FMT     CLEAR THE REST OF FLAG0
LA000810 LR    R7,R1              SAVE INPUT LENGTH
         BAL   R8,LA000820        CLEAR TGET INPUT QUEUE
         LR    R1,R7              RESET INPUT LENGTH REGISTER
         B     LA000950
         SPACE 2
*---------------------------------------------------------------------*
*        MAKE SURE TGET QUEUE IS EMPTY                                *
*---------------------------------------------------------------------*
         SPACE
LA000820 TCLEARQ
         LTR   RF,RF              TEST TCLEARQ RETURN CODE
         BZR   R8                 RC=0,SUCCESSFUL
         LA    RF,16              ERROR - SET
         ST    RF,SAVERF          -RETURN CODE
         B     LA005600           -AND GIVE UP
         SPACE 2
*---------------------------------------------------------------------*
*  SET-UP RESPONSE ANALYSIS                                           *
*---------------------------------------------------------------------*
         SPACE
LA000900 CLI   ERLN4,0            ARE WE IN THE MIDDLE OF ERRORS?
         BNE   LA000970           -YES, DON'T RESET FLAGS
         MVI   FLAG0,0            RESET FLAG0
         B     LA000960
LA000950 CLI   ERLN4,0            ARE WE IN THE MIDDLE OF ERRORS?
         BNE   LA000970           -YES, DON'T RESET FLAGS
LA000960 MVI   FLAG0,0            RESET FLAG0
         MVI   FLAG1,0            RESET FLAG1
         NC    WKALNCTL(19),=19AL1(255-WKALNCTW) RESET LINE CONTROLS
         XC    EADDRFLG(LN4FLGLN),EADDRFLG CLEAR ERROR FLAGS
         MVC   EADDRVAL(LN4VALLN),WKAADDR RESET ERROR SAVE VALUES
         NI    EADDRVAL,255-WKAADRLL CLEAR HIGH BYTE
         XC    SAVSTK(SAVSTKLN),SAVSTK CLEAR NOTES ERROR SAVE AREA
         XC    SAVSBCMD,SAVSBCMD  CLEAR SUBCOMMAND ERROR SAVE AREA
LA000970 LTR   R7,R1              SAVE AND CHECK AMT RETD BY TGET
         LA    RA,SCRNBUFR        ->TGET/TPUT BUFFER
         MVI   NEWWCC,X'00'       REFRESH WRITE CONTROL CHAR
         MVI   FLAG2,0            OFF ALL BITS
         MVC   PREVCURS,WKACORDS+1 SAVE LAST CURSOR ADDR FOR HELP, ETC
         MVC   WKACORDS+1(2),1(RA) GET READY TO REPLACE CURSOR
         COPY  BLSR327C           PRE-PROCESS ATTENTION IDENTIFIER
         COPY  BLSR327D           PRE-PROCESS CURSOR
         TITLE 'BLSR327A--RESET STATUS AS RESULT OF VALIDATED INPUT'
*---------------------------------------------------------------------*
*  RESET STATUS AS A RESULT OF VALIDATED INPUT                        *
*---------------------------------------------------------------------*
         SPACE
*---------------------------------------------------------------------*
*EA001400 - INTERNAL SUBROUTINE TO ESTABLISH ROW, COL FROM 3270 ADRR  *
*  INPUT---RETURN ADDR IN RE                                          *
*          RA POINTS 1 BYTE BEFORE 3270 ADDR                          *
*  OUTPUT--COLUMN NUMBER IN R4                                        *
*          ROW NUMBER IN R5 (0-ORIGIN NUMBERS)                        *
*---------------------------------------------------------------------*
         SPACE
EA001400 LA    RF,63              MASK TO KEEP ONLY LOW SIX BITS
         IC    R4,1(0,RA)         FIRST BYTE OF ADDR
         IC    R5,2(0,RA)         SECOND BYTE OF ADDR
         NR    R4,RF              GET RID OF GARBAGE
         NR    R5,RF              DITTO
         SLL   R4,6               PREPARE TO FORM BINARY OFFSET
         ALR   R5,R4              NOW HAVE DISPL FROM POS 0 (R1C1)
         SLR   R4,R4              CLEAR FOR DIVISION
         D     R4,=F'80'          REMAINDER IN R4, QUOTIENT IN R5
         BR    RE
         SPACE
*        R4 HAS REMAINDER FROM DIVISION, = 0-ORG COLUMN NUMBER        *
         SPACE 2
*---------------------------------------------------------------------*
*        MOVE FROM INPUT CHECKING SAVE AREAS TO WORK AREA - ONLY      *
*        NECESSARY FOR STACK NOTATION, LINE 4, AND SUBCOMMAND         *
*        ENTRY FIELDS                                                 *
*---------------------------------------------------------------------*
         SPACE
LA001000 EQU   *
         SPACE
*---------------------------------------------------------------------*
*        CHANGE TO STACK NOTATION                                     *
*---------------------------------------------------------------------*
         SPACE
LA001700 LA    R3,0               LOOP COUNTER INITIAL VALUE
         LA    R4,1               LOOP INCREMENT
         LA    R5,10              LOOP COMPARAND
         LA    RA,SAVSTK          INITIAL NOTE SAVE ENTRY
LA001750 LR    R8,R3              PUT INDEX IN SAFE PLACE
         LA    RF,1(0,R8)         1-ORIGIN NUMBER OF THIS ENTRY
         SLL   R8,2               FORM INDEX INTO STACK
         CLI   0(RA),0            HAS A NOTE ENTRY BEEN SAVED?
         BE    LA002000           NO - LOOK AT NEXT
         CLI   0(RA),C'/'         A DELETE REQUEST?
         BNE   LA001800           NO, A CHANGE OR ADDITION TO NOTES
         LA    RF,WKASTACK(R8)    PREPARE TO MARK PROPER STACK ENTRY
         OI    0(RF),WKASKDEL     TO BE PURGED ... MUST UPDATE 2,3
         OI    FLAG0,FLAG0PRG+FLAG0RW2+FLAG0RW3 - REMEMBER TO DO IT
         B     LA002000           LOOK AT NEXT
LA001800 CLM   RF,1,WKANBNUM      WAS IT A NEW ENTRY?
         BNH   LA001900           - NO, BYPASS SAVING NEW HIGH WATER
         STC   RF,WKANBNUM        - YES, NEW MAX TO RESEND THIS LINE
LA001900 ALR   R8,R8              DOUBLE INDEX VALUE
         LA    R8,WKANOTES(R8)    ADDRESS OF NOTES WORK AREA
         XC    0(8,R8),0(R8)      CLEAR CURRENT ENTRY
         CLI   0(RA),X'FF'        HAS FIELD BEEN CLEARED?
         BE    LA002000           YES
         MVC   0(L'WKANB1,R8),0(RA) PUT NEW DATA INTO NOTE LIST
LA002000 LA    RA,L'WKANB1(RA)    POINT TO NEXT NOTES SAVE AREA
         BXLE  R3,R4,LA001750     CONTINUE LOOP
         SPACE 2
*---------------------------------------------------------------------*
*        CHANGE TO LINE 4--NEW ADDRESS, ASID, FORMAT, ....            *
*---------------------------------------------------------------------*
         SPACE 2
         TM    FLAG1,FLAG1BLA     CAN WE ACCEPT MANUAL INPUT THIS -
         BO    LA002100           TRANSACTION? NO, DON'T SAVE
         MVC   ESAULAD,EADDRVAL   SAVE NEW ADDRESS
         SPACE 2
         XC    ESAUAS2(4),ESAUAS2  CLEAR IT OUT
         MVC   ESAUAS2+2(2),EASIDVAL SAVE NEW ASID
         SPACE 2
LA002100 MVC   ESAUDTY,EFMTVAL    SAVE NEW FORMAT
         SPACE 2
         MVC   WKAAREA,EAREAVAL   SAVE NEW AREA
         SPACE 2
         LA    R3,4               WINDOW LOOP COUNTER
         LA    R4,EWNDSVAL        INITIAL WINDOW SAVE AREA
         LA    R5,NEWLINES        INITIAL WINDOW WORK AREA
LA002200 MVC   0(1,R5),0(R4)      MOVE FROM SAVE AREA
         LA    R4,1(R4)           POINT TO NEXT SAVE AREA
         LA    R5,1(R5)           POINT TO NEXT WORK AREA
         BCT   R3,LA002200        LOOK AT NEXT WINDOW
         SPACE 2
         MVC   WKASKIP,ESKIPVAL  SAVE NEW VALUE
         B     LA004600          LOOK AT SUBCOMMAND
         SPACE 2
*---------------------------------------------------------------------*
*EA003700--VALIDATE HEXADECIMAL INPUT AND CONVERT TO BINARY           *
*          VALID RANGE = 0-F                                          *
*---------------------------------------------------------------------*
         SPACE
EA003700 XC    PACKDEC,PACKDEC    CLEAR RESULT IN CASE OF NULL INPUT
         LR    RF,R9              WHERE WE CAN USE IT
         SH    RF,=H'3'           BYPASS SF, ADDR, ADDR
         BNP   4(0,RE)            RETURN TO CALLER, NULL INPUT VALID
         LA    R0,9               INCREMENT FOR A HEX NOT DEC DIGIT
         LA    R1,PACKDEC+5       WHERE RESULT SHOULD GO
         EX    RF,IA004000        CONVERT TO UPPER CASE -- NOTE - THIS
*                                 CLOBBERS THE FIRST BYTE OF THE NEXT
*                                 FIELD, BUT IS OK, SINCE IT IS EITHER
*                                 AN SBA ORDER ALREADY FOUND, OR OUT
*                                 OF INPUT RANGE.
LA003800 IC    R2,2(RF,RA)        BYTE OF INPUT - RIGHT TO LEFT
         CLM   R2,1,=C'A'         AN 'A'
         BLR   RE                 - IF LESS, THEN NOT VALID HEX
         CLM   R2,1,=C'9'         A '9' ?
         BHR   RE                 - IF GREATER, THEN NOT VALID HEX
         CLM   R2,1,=C'0'         A DECIMAL DIGIT?
         BNL   LA003900           - YES, SAVE IT IN WORK AREA
         CLM   R2,1,=C'F'         AN 'F'?
         BHR   RE                 - IF GREATER, THEN NOT VAILD HEX
         ALR   R2,R0              HEX DIGIT, INCREMENT BY 9
LA003900 STC   R2,0(0,R1)         HEX OR DECIMAL NUMERIC INTO WK AREA
         BCTR  R1,0               DECREMENT WORK AREA ADDRESS
         BCT   RF,LA003800        DECREMENT INDEX, CHECK FOR END
         PACK  PACKDEC+3(5),PACKDEC(7) STRIP OUT ZONES
         B     4(0,RE)            RETURN ON GOOD VECTOR
IA004000 OC    3(0,RA),=CL8' '    *** SUBJ OF EX, ABOVE ***
         SPACE 2
*---------------------------------------------------------------------*
*EA004100--VALIDATE HEXADECIMAL INPUT AND CONVERT TO BINARY           *
*          VALID RANGE = 0-9                                          *
*---------------------------------------------------------------------*
         SPACE
EA004100 XC    PACKDEC,PACKDEC    CLEAR ANSWER AREA IF NULL INPUT
         LR    RF,R9              PROTECT LENGTH OF SUBFIELD
         SH    RF,=H'3'           STRIP OFF SF, ADDR, ADDR
         BNP   4(0,RE)            NULL INPUT, ANSWER = 0
         LR    R0,RF              SAVE COUNT
         LA    R2,2(RA,RF)        LAST INPUT CHAR THIS FIELD
LA004200 CLI   0(R2),C'0'         MUST BE IN RANGE 0 - 9
         BLR   RE                 - TOO LOW, GO BACK ON BAD VECTOR
         CLI   0(R2),C'9'         CHECK TOP OF RANGE
         BHR   RE                 - TOO HIGH, IGNORE INPUT
         BCTR  R2,0               BACK TO PREVIOUS BYTE
         BCT   R0,LA004200        CHECK ALL BYTES
         BCTR  RF,0               DOWN 1 FOR EX
         EX    RF,IA004300        STRIP ZONES, ALIGN FOR CVB
         CVB   RF,PACKDEC         INPUT IN FORM WE WANT
         ST    RF,PACKDEC         SAVE IT JUST IN CASE
         B     4(0,RE)            RETURN ON GOOD VECTOR
IA004300 PACK  PACKDEC(8),3(0,RA) *** SUBJ OF EX, ABOVE ***
IA004400 MVC   0(0,RF),4(RF)      *** SUBJ OF EX, BELOW ***
IA004500 MVC   0(0,RF),8(RF)      *** SUBJ OF EX, BELOW ***
         SPACE 2
*---------------------------------------------------------------------*
*  ADD SUBCOMMAND LINE TO TSO STACK                            @ZA31999
*---------------------------------------------------------------------*
         SPACE
LA004600 CLI   SAVSBCMD,0         WAS ANYTHING ENTERED?
         BE    LA005000           -NO, CHECK STACK
         CLI   SAVSBCMD,NULVALUE  DID HE JUST NULL HIS LAST CMD?
         MVI   WKABLSRN,0         -YES, RESET COUNT
         BE    LA005000           -AND CHECK STACK
         LA    RE,L'SAVSBCMD      LENGTH OF SUBCOMMAND
         STC   RE,WKABLSRN        SAVE FOR NEXT TIME
         MVC   WKABLSRC(L'SAVSBCMD),SAVSBCMD MOVE FROM SAVE AREA
         LA    R0,LSDLEN+0(0,RE)  PREPARE TO SAVE IT           @ZA31999
         ICM   R0,B'1000',=AL1(78) SUBPOOL FOR TSO I/O SERVICE RTNS
         GETMAIN R,LV=(0)         GO GET IT
         USING LSD,R1             THE LIST SOURCE DESCRIPTOR + RECORDS
         ST    R1,STPBALSD        PUT ADDRESS INTO STACK PARM BLOCK
         MVC   LSDVRECT(L'SAVSBCMD),WKABLSRC PUT SUBCMD IN SOURCE LIST
         LA    RE,4(0,RE)         ACTUAL COUNT AGAIN + SIZE OF HEADER
         STCM  RE,B'1100',LSDVREC+2 CLEAR LITTLE LL
         STH   RE,LSDVREC         NOW HAVE SEGMENT BUILT
         SPACE 2
*---------------------------------------------------------------------*
*        FILL IN LIST SOURCE DESCRIPTOR                               *
*---------------------------------------------------------------------*
         SPACE
         ST    RE,LSDRCLEN        CLEAR LRECL, SET VARIABLE LENGTH
         LA    R0,LSDVREC         WHERE THE RECORD SEGMENTS BEGIN
         ST    R0,LSDANEXT        POINTER TO CURRENT = FIRST
         ST    R0,LSDADATA        POINTER TO FIRST RECORD SEG
         SPACE 2
*---------------------------------------------------------------------*
*        CALL IKJSTCK TO PASS THE SUBCOMMANDS TO THE IPCS MONITOR     *
*---------------------------------------------------------------------*
         SPACE
         LA    R1,IOPL            ->IOPL, THE IKJSTCK PARAMETER LIST
         L     RF,ZZ2P            GET ADDRESS OF
         L     RF,ZZ2STCKP(0,RF)  -STACK ENTRY
         STACK STORAGE=(,SOURCE),MF=(E,(1)),ENTRY=(15),PARM=STPB
         OI    FLAG0,FLAG0SUS     SUSPENSION WILL BE REQUIRED
         MVI   SPD3270,1          INDICATE SO TO PLS           @ZA31999
         SPACE 2
*---------------------------------------------------------------------*
*  MAINTAIN DSPL3270 STACK                                            *
*---------------------------------------------------------------------*
         SPACE
LA005000 TM    FLAG0,FLAG0PRG     ANY '/'S ENTERED IN NOTE LIST?
         BNO   LA005500           - NO
         SLR   R4,R4              SET UP SOME WORK REGS
         SLR   R5,R5              TO CLEAR LAST ENTRY IF NEEDED
         TM    WKASTACK+40,WKASKDEL DELETE LAST ENTRY?
         BNO   LA005200           - NO, NEEDN'T DO SPECIAL
         ST    R4,WKASTACK+40     CLEAR IT OUT
         STM   R4,R5,WKANOTES+80  CLEAR NOTE ALSO
         CLI   WKASKNUM,11        WAS THE STACK FULL?
         BNE   LA005100           - NO, DONT MARK IT AS 10 USED
         MVI   WKASKNUM,10        - YES, DECREMENT ITS COUNT
LA005100 CLI   WKANBNUM,11        WAS THE NOTE LIST FULL?
         BNE   LA005200           - NO, DONT MARK IT AS 10 USED
         MVI   WKANBNUM,10        - YES, DECREMENT ITS COUNT
LA005200 IC    R4,WKASKNUM        WHERE TO START OUR LOOP
         LTR   R0,R4              COUNT CONTROL
         BZ    LA005500           NONSENSE TO DELETE UNUSED ENTRY
LA005300 LR    RF,R0              TO FORM INDEX FOR THIS ENTRY
         SLL   RF,2               - A WORD INDEX, TO BE PRECISE, 1-ORG
         LA    R5,0(RF,RF)        - AND NOW A DOUBLE-WORD INDEX
         LR    RE,RF              - NEED LOTS OF INDICES
         LA    RF,WKASTACK-4(RF)  POINT TO THIS ENTRY
         TM    0(RF),WKASKDEL     MARKED DELETE?
         BNO   LA005400           - NO, WILL CHECK FOR LOOP END
         SPACE 2
*---------------------------------------------------------------------*
*        CALCULATE HOW MUCH DATA MUST BE MOVED DOWN IN STACK          *
*---------------------------------------------------------------------*
         SPACE
         SH    RE,=H'43'          EX LENGTH OF MAX MOVE
         LPR   RE,RE              NOW HAVE LENGTH FOR EXECUTE INSTR
         EX    RE,IA004400        COMPRESS DELETED ENTRY FROM STACK
         BCTR  R4,0               (DECR NUMBER ACTIVE ENTRIES)
         CLM   R0,1,WKANBNUM      NEED WE COMPRESS THE NOTE LIST TOO?
         BH    LA005400           - NO, CONTINUE LOOP
         LA    RE,1(RE,RE)        EX LENGTH FOR NOTE LIST
         LA    RF,WKANOTES-8(R5)  WHERE TO MOVE TO
         EX    RE,IA004500        COMPRESS NOTE LIST ENTRIES
         IC    RF,WKANBNUM        AND DECREMENT ITS ACTIVE COUNT
         BCTR  RF,0               - DOWN 1
         STC   RF,WKANBNUM        - BACK INTO SLOT
LA005400 BCT   R0,LA005300        CHECK ALL ACTIVE STACK ENTRIES
         STC   R4,WKASKNUM        SAVE UPDATED ACTIVE STACK COUNT
         SPACE 2
*---------------------------------------------------------------------*
*        CHECK IF A NEW DATA SCREEN ALLOCATION WAS REQUESTED          *
*---------------------------------------------------------------------*
         SPACE
LA005500 CLC   WKALINES(4),NEWLINES ANY CHANGES INDICATED?
         BE    BLSR327E           -NO
         L     R8,=A(BLSR327H)    PICK UP ALLOCATION VERIFICATION
         BALR  R3,R8              ADDRESS AND CALL IT
         COPY  BLSR327E           POST-PROCESS ATTENTION IDENTIFIER
         COPY  BLSR327F           POST-PROCESS CURSOR
         COPY  BLSR327G           POST-PROCESS MANUAL INPUT
         TITLE 'BLSR327A--EXIT ASSEMBLER ENVIRONMENT (EPILOG)'
*---------------------------------------------------------------------*
*  EXIT ASSEMBLER ENVIRONMENT                                         *
*---------------------------------------------------------------------*
         SPACE
LA005600 LM    R0,RF,SAVER0RF     RELOAD INPUT REGISTERS
         BR    RE                 RETURN TO BLSR3270
         COPY  BLSR327H           CLOSED, INDEPENDENT SUBROUTINES
         COPY  BLSR327J           INPUT CHECKING ROUTINE
         COPY  BLSR327I           STATIC STORAGE DATA
