        MACRO
&MSGNO  BLSDMSGG &MSG
.*
.*** THIS MACRO IS WRITTEN FOR @G57LPSR
.*
.** START OF SPECIFICATIONS *******************************************
.*                                                                    *
.*    MACRO NAME: BLSDMSGG                                            *
.*                                                                    *
.*    DESCRIPTIVE NAME: MESSAGE SKELETON AND MESSAGE CSECT GENERATOR  *
.*                                                                    *
.*    COPYRIGHT: NONE                                                 *
.*                                                                    *
.*    STATUS: SU57 RELEASE 1, LEVEL 0                                 *
.*                                                                    *
.*    FUNCTION: CONSTRUCT MESSAGE SKELETONS FROM INPUT MESSAGE        *
.*              STRINGS, OR CONTRUCT THE CROSS REFERENCE TABLES       *
.*              FOR THE MESSAGE CSECT BEING GENERATED IF THERE        *
.*              IS NO INPUT MESSAGE STRING.                           *
.*                                                                    *
.*    NOTES:                                                          *
.*                                                                    *
.*      DEPENDENCIES:   NONE                                          *
.*                                                                    *
.*      RESTRICTIONS:   NONE                                          *
.*                                                                    *
.*      REGISTER CONVENTIONS: N/A                                     *
.*                                                                    *
.*      PATCH LABEL:  GENERATES LABEL: PATCHLBL                       *
.*                                                                    *
.*      SERIALIZATION REQUIREMENTS: NONE                              *
.*                                                                    *
.*    MODULE TYPE: DATA AREA GENERATION MACRO                         *
.*                                                                    *
.*      PROCESSOR: ASSEMBLER F                                        *
.*                                                                    *
.*      MODULE SIZE: N/A                                              *
.*                                                                    *
.*      ATTRIBUTES: N/A                                               *
.*                                                                    *
.*    ENTRY POINT OR ALIAS: BLSDMSGG                                  *
.*                                                                    *
.*      PURPOSE: (SEE FUNCTION)                                       *
.*                                                                    *
.*      LINKAGE: VIA ASSEMBLER MACRO CALL                             *
.*                                                                    *
.*    INVOCATION SYNTAX:                                              *
.*                                                                    *
.*        MSGNO    BLSDMSGG   'MSGTXT'                                *
.*                                                                    *
.*      MSGNO                                                         *
.*        IS A 6-CHARACTER LABEL OF THE FORM: CNNNNN, WHERE "C" IS    *
.*        ANY ALPHABETIC CHARACTER AND IS NOT USED BY THIS MACRO,     *
.*        AND "NNNNN" IS A FIVE DIGIT MESSAGE NUMBER BY WHICH THE     *
.*        MESSAGE CONSTRUCTED BY THIS MACRO WILL BE REFERENCED.       *
.*        THE MESSAGE NUMBERS IN A MESSAGE CSECT MUST BE ENTERED      *
.*        IN ASCENDING SEQUENCE; LEADING ZEROS MAY NOT BE OMITTED.    *
.*                                                                    *
.*      'MSGTXT'                                                      *
.*        IS THE TEXT OF THE MESSAGE TO BE CONSTRUCTED. INSERT        *
.*        LOCATIONS IN THE MESSAGE ARE IDENTIFIED BY A DOUBLE COMMA,  *
.*        THAT IS, ",,,,," WOULD INDICATE TWO INSERTS BACK TO BACK,   *
.*        FOLLOWED BY THE CHARACTER COMMA. THE MAXIMUM LENGTH OF      *
.*        THE MESSAGE TEXT (NOT COUNTING INSERTS) GENERATED BY THIS   *
.*        MACRO IS 255 CHARACTERS; SEE THE PROLOGUE FOR MODULE        *
.*        BLSDMSG0 FOR RESTRICTION ON MAXIMUM OUTPUT MESSAGE LENGTH.  *
.*        MAXIMUM NUMBER OF INSERTS ALLOWED PER MESSAGE CONSTRUCTION  *
.*        IS 255 INSERTS PER MESSAGE.                                 *
.*                                                                    *
.*    OUTPUT OF MACRO:                                                *
.*                                                                    *
.*      GIVEN THE INPUT MACRO CALL:                                   *
.*                                                                    *
.*        Q05301 BLSDMSGG ' BLS05301I NO PROBLEMS EXIST            X  *
.*                        FOR RANGE ,,,,:,,,,'                        *
.*                                                                    *
.*      THIS MACRO WILL GENERATE:                                     *
.*                                                                    *
.*        BLS05301  DC    H'4'             NUMBER OF INSERTS.         *
.*                  DC    AL1(0),AL1(0)    RESERVED.                  *
.*                  DC    AL1(0),AL1(0)    RESERVED.                  *
.*                  DC    AL1(0),AL1(0)    RESERVED.                  *
.*                  DC    AL1(0),AL1(0)    RESERVED.                  *
.*                  DC    AL1(39)          LENGTH OF TEXT SEGMENT.    *
.*                  DC    C' BLS05301I NO PROBLEMS EXIST FOR RANGE '  *
.*                  DC    AL1(0)           LENGTH OF TEXT SEGMENT.    *
.*                  DC    AL1(1)           LENGTH OF TEXT SEGMENT.    *
.*                  DC    C':'             TEXT SEGMENT.              *
.*                  DC    AL1(0)           LENGTH OF TEXT SEGMENT.    *
.*                  DC    AL1(0)           LENGTH OF TEXT SEGMENT.    *
.*                                                                    *
.*      SEE "PROCESSING DESCRIPTION" FOR DISCUSSION OF HOW THE        *
.*      MACRO WORKS TO PRODUCE THIS OUTPUT, AND FOR THE MACRO'S       *
.*      PROCESSING IF THE 'MSGTXT' IS OMITTED.                        *
.*                                                                    *
.*    EXIT-NORMAL:  ASSEMBLER LANGUAGE STATEMENTS ARE PRODUCED        *
.*                  FOR THE MESSAGE, OR ASSEMBLER LANGUAGE            *
.*                  STATEMENTS ARE PRODUCED FOR THE CROSS REFERENCE   *
.*                  TABLES.                                           *
.*                                                                    *
.*    EXIT-ERROR:   THE FOLLOWING MNOTE STATEMENTS CAN BE PRODUCED:   *
.*                                                                    *
.*      12,LABEL MUST BE ONE ALPHABETIC AND FIVE DIGITS.              *
.*                                                                    *
.*      12,LABELS MUST BE ENTERED IN ASCENDING SEQUENCE.              *
.*                                                                    *
.*      12,UNKNOWN CONDITION: SINGLE QUOTATION MARK DETECTED.         *
.*                                                                    *
.*    EXTERNAL REFERENCES: N/A                                        *
.*                                                                    *
.*                                                                    *
.*      DATA AREAS:  SEE LOCAL AND GLOBAL SET SYMBOLS.                *
.*                                                                    *
.*      CONTROL BLOCKS: N/A                                           *
.*                                                                    *
.*    TABLES/WORKAREAS: SEE LOCAL AND GLOBAL SET SYMBOLS.             *
.*                                                                    *
.*    MACROS: N/A                                                     *
.*                                                                    *
.*    CHANGE ACTIVITY:                                                *
.*      THIS MODULE IS WRITTEN FOR @G57LPSR.                          *
.*                                                                    *
.*    MESSAGES ISSUED: SEE "EXIT-ERROR" ABOVE.                        *
.*                                                                    *
.*    ABEND CODES:  N/A                                               *
.*                                                                    *
.*    DATA SETS ACCESSED:   NONE                                      *
.*                                                                    *
.*    PROCESSING DESCRIPTION:                                         *
.*                                                                    *
.*       NOTE: LOCAL SYMBOLS ARE USED PRIMARILY TO PRODUCE            *
.*             THE INDIVIDUAL MESSAGES. THE GLOBAL SYMBOLS            *
.*             ARE USED TO STORE INFORMATION UNTIL THE CROSS          *
.*             REFERENCE TABLES ARE TO BE PRODUCED.                   *
.*                                                                    *
.*     1. IF THIS IS THE FIRST USE OF THE MACRO IN THIS MESSAGE       *
.*        CSECT, OUTPUT THE ASSEMBLER LANGUAGE STATEMENTS:            *
.*                    DC    A(MSGINDX)                                *
.*                    DC    CL8'&SYSECT'                              *
.*                    DC    CL8'&SYSDATE'                             *
.*                    DC    CL8'&SYSTIME'                             *
.*        OTHERWISE, BYPASS THIS STEP. THE FIRST FOUR BYTES OF        *
.*        EACH MESSAGE CSECT MUST BE THE ADDRESS OF THE               *
.*        COMPONENT CROSS REFERENCE INDEX TABLE.                      *
.*                                                                    *
.*     2. IF THE MESSAGE TEXT HAS BEEN OMITTED ON THIS MACRO CALL,    *
.*        THIS IS AN INDICATION THAT THE CROSS REFERENCE INDEX        *
.*        TABLES ARE TO BE PRODUCED (THIS MUST ALWAYS BE THE LAST     *
.*        MACRO CALL IN ANY MESSAGE CSECT). GOTO STEP 4.              *
.*                                                                    *
.*     3. OTHERWISE, THE MACRO SHOULD GENERATE ASSEMBLER LANGUAGE     *
.*        STATEMENTS DESCRIBING THE INPUT MESSAGE.                    *
.*                                                                    *
.*        A. ENSURE THAT THE INPUT MESSAGE NUMBER IS SIX CHARACTERS,  *
.*           THE LAST FIVE ARE DIGITS, AND IS LARGER THAN ANY OTHER   *
.*           MESSAGE NUMBER PREVIOUSLY ENTERED.                       *
.*                                                                    *
.*        B. BREAK THE MESSAGE NUMBER "NNNNN" UP INTO THREE SECTIONS, *
.*           THAT IS, "XXYZZ", WHERE "XX" IS USED AS THE INDEX        *
.*           TO THE COMPONENT CROSS REFERENCE INDEX TABLE, "Y" IS     *
.*           USED AS THE INDEX TO THE SUBCOMPONENT CROSS REFERENCE    *
.*           INDEX TABLE, AND "ZZ" IS USED AS THE INDEX TO THE        *
.*           SUB-SUBCOMPONENT CROSS REFERENCE INDEX TABLE.            *
.*                                                                    *
.*        C. SAVE THE MESSAGE NUMBER IN GLOBAL SYMBOL &MSGID,         *
.*           SAVE THE "XX" IN GLOBAL SYMBOL &MSGCP, "Y" IN &MSGSCP,   *
.*           AND "ZZ" IN &MSGSSCP. SAVE THE MAXIMUM "XX" ENTERED      *
.*           IN GLOBAL SYMBOL &MAXCP, SAVE THE MAXIMUM "Y" ENTERED    *
.*           FOR EACH "XX" IN &MAXSCP, AND SAVE THE MAXIMUM "ZZ"      *
.*           ENTERED FOR EACH "Y" FOR EACH "XX" IN &MACSSCP.          *
.*                                                                    *
.*        D. SCAN THE INPUT 'MSGTXT' FOR INSERT LOCATIONS (DOUBLE     *
.*           COMMAS AND FOR DOUBLE QUOTES. BREAK THE INPUT 'MSGTXT'   *
.*           INTO SEGMENTS, WHERE THE NUMBER OF SEGMENTS WILL         *
.*           ALWAYS BE ONE MORE THAN THE NUMBER OF INSERTS IN THE     *
.*           MESSAGE. MESSAGE SEGMENTS MAY BE OF ZERO LENGTH, WHICH   *
.*           WOULD OCCUR IF TWO INSERTS ARE FOUND BACK TO BACK.       *
.*           SAVE THE INFORMATION CONCERNING THE NUMBER OF INSERTS,   *
.*           THE STARTING LOCATION OF EACH MESSAGE SEGMENT, AND       *
.*           THE LENGTH OF EACH MESSAGE SEGMENT INTO LOCAL SYMBOLS    *
.*           &NINSRT, &LOCTXT, AND &LENTXT RESPECTIVELY. FOR EACH     *
.*           MESSAGE SEGMENT, SAVE THE NUMBER OF DOUBLE QUOTES        *
.*           IT CONTAINS IN LOCAL SYMBOL &NDQTXT.                     *
.*                                                                    *
.*        E. AT THE END OF THE TEXT SCAN, USE THE INFORMATION         *
.*           ACCUMULATED TO OUTPUT THE ASSEMBLER LANGUAGE             *
.*           STATEMENTS WHICH DESCRIBE THE ENTIRE MESSAGE.            *
.*           FIRST IS THE NUMBER OF INSERTS IN THE ENTIRE MESSAGE.    *
.*           THEN, FOR EACH INSERT, RESERVE ONE HALFWORD.             *
.*           FINALLY, FOR EACH MESSAGE SEGMENT, OUTPUT ITS LENGTH     *
.*           FOLLOWED BY THE MESSAGE TEXT. IF THE MESSAGE SEGMENT     *
.*           TEXT LENGTH IS ZERO, THE MESSAGE SEGMENT TEXT IS         *
.*           BYPASSED. IF THE MESSAGE SEGMENT TEXT CONTAINS           *
.*           ONE OR MORE DOUBLE QUOTES, REDUCE THE LENGTH OF          *
.*           THE MESSAGE SEGMENT BY ONE FOR EACH DOUBLE QUOTE.        *
.*                                                                    *
.*        F. EXIT FROM THE MACRO.                                     *
.*                                                                    *
.*     4. THE INPUT 'MSGTXT' WAS OMITTED; THEREFORE, THIS IS THE      *
.*        END OF THIS MESSAGE CSECT. PRODUCE THE CROSS REFERENCE      *
.*        TABLES.                                                     *
.*                                                                    *
.*        A. PRODUCE A PATCH AREA WITH THE LABEL "PATCHLBL" WHICH     *
.*           IS 10% OF THE SIZE OF ALL THE PRECEEDING MESSAGES.       *
.*                                                                    *
.*        B. PRODUCE THE COMPONENT CROSS REFERENCE TABLE. THIS        *
.*           CONSISTS OF THE NUMBER OF ENTRIES (INCLUDING             *
.*           THE ZERO ENTRIES) IN THIS TABLE, FOLLOWED BY PRODUCTION  *
.*           OF A TABLE ENTRY. IF A MESSAGE NUMBER WITH THE VALUE     *
.*           "XX" EXISTS, PRODUCE AN ADCON FOR ITS SUBCOMPONENT       *
.*           TABLE; OTHERWISE, PRODUCE A ZERO. ENTRIES RANGE FROM     *
.*           INDEX VALUE 0 TO &MAXCP.                                 *
.*                                                                    *
.*        C. FOR EACH "XX" ENTRY WHICH EXISTS, PRODUCE THE            *
.*           SUBCOMPONENT TABLE. THIS CONSISTS OF THE NUMBER          *
.*           OF ENTRIES (INCLUDING ZERO VALUES) IN THIS TABLE,        *
.*           FOLLOWED BY PRODUCTION OF THE TABLE ENTRIES. IF          *
.*           A MESSAGE NUMBER WITH THE VALUE "XX" AND "Y" EXISTS,     *
.*           PRODUCE AN ADCON FOR ITS SUB-SUBCOMPONENT TABLE;         *
.*           OTHERWISE, PRODUCE A ZERO. ENTRIES RANGE FROM AN         *
.*           INDEX VALUE OF 0 TO &MAXSCP FOR THIS VALUE OF "XX".      *
.*                                                                    *
.*        D. FOR EACH "XX" AND "Y" ENTRY WHICH EXISTS, PRODUCE THE    *
.*           SUB-SUBCOMPONENT TABLE. THIS CONSISTS OF THE NUMBER      *
.*           OF ENTRIES (INCLUDING ZERO VALUES) IN THIS TABLE,        *
.*           FOLLOWED BY PRODUCTION OF THE TABLE ENTRIES. IF A        *
.*           MESSAGE NUMBER WITH THE VALUES "XX" AND "Y" AND "ZZ"     *
.*           EXISTS, PRODUCE AN ADCON TO THE MESSAGE SKELETON         *
.*           PREVIOUSLY PRODUCED BY A PREVIOUS MACRO CALL;            *
.*           OTHERWISE, PRODUCE A ZERO. ENTRIES RANGE FROM AN         *
.*           INDEX VALUE OF 0 TO &MAXSSCP FOR THIS FALUE OF "XX"      *
.*           FOR THIS VALUE OF "Y".                                   *
.*                                                                    *
.*        E. FOLLOWING PRODUCTION OF ALL CROSS REFERENCE TABLES,      *
.*           EXIT THE MACRO.                                          *
.*                                                                    *
.**** END OF SPECIFICATIONS *******************************************
         LCLA  &LOC           CURRENT &TEXT SCAN INDEX.
         LCLA  &NINSRT        TOTAL NUMBER OF INSERT LOCATIONS FOUND.
         LCLA  &LOCTXT(255)   TEXT SEGMENT N STARTING INDEX.
         LCLA  &LENTXT(255)   TEXT SEGMENT N LENGTH.
         LCLA  &NDQTXT(255)   NUMBER OF DOUBLE QUOTES IN TEXT SEGMENT N
         LCLA  &NDQ           NUMBER OF DOUBLE QUOTES COUNTER.
         LCLA  &LMSG          LENGTH OF ENTIRE MESSAGE.
         LCLC  &TEXT          TEXT OF MESSAGE.
         LCLA  &LTEXT         LENGTH OF TEXT OF MESSAGE.
         LCLC  &SEG           TEXT SEGMENT.
         LCLA  &LSEG          LENGTH OF TEXT SEGMENT.
         LCLA  &MSGLEN        LENGTH OF CONSTRUCTED MESSAGE.
         LCLA  &CNT           LOOP COUNTER.
         LCLA  &FNLLEN        FINAL LENGTH OF TEXT SEQMENT N.
         LCLC  &TMSGID        TEMPORARY MESSAGE IDENTIFIER.
         LCLA  &TNMSGID       TEMPORARY NUMERIC MESSAGE IDENTIFIER.
         LCLC  &TMSGC         TEMPORARY CHARACTER(S) OF THE MESSAGE ID.
         LCLA  &COMP          COMPONENT NUMBER.
         LCLA  &SCOMP         SUBCOMPONENT NUMBER.
         LCLA  &SSCOMP        SUB-SUBCOMPONENT NUMBER.
         LCLC  &LABEL         LABEL FOR MESSAGE IDENTIFIERS.
.*
.*******************************************************************
.*  MESSAGE IDENTIFIERS ARE INPUT THROUGH &MSGNO AS CXXYZZ.        *
.*    C  - ANY ALPHABETIC CHARACTER. IT IS STRIPPED OFF AND        *
.*         THROWN AWAY. IT IS USED BECAUSE THE ASSEMBLER INSISTS   *
.*         THAT A LABEL STARTS WITH AN ALPHABETIC.                 *
.*    XX - IDENTIFIES THE COMPONENT BLOCK OF THE SET OF MESSAGES.  *
.*    Y  - IDENTIFIES THE SUBCOMPONENT BLOCK OF THE SET OF         *
.*         MESSAGES.                                               *
.*    ZZ - IDENTIFIES THE SUB-SUBCOMPONENT BLOCK OF THE SET OF     *
.*         MESSAGES.                                               *
.*******************************************************************
.*
         GBLA  &MAXID         MAXIMUM &MSGID ENTERED.
         GBLA  &MSGID(1000)   ASCENDING SEQUENCE OF MESSAGE IDS.
         GBLA  &NMSGS         NUMBER OF MESSAGES ENTERED.
         GBLA  &MSGCP(1000)   COMPONENT NUMBER OF MESSAGE N.
         GBLA  &MSGSCP(1000)  SUBCOMPONENT NUMBER OF MESSAGE N.
         GBLA  &MSGSSCP(1000) SUB-SUBCOMPONENT NUMBER OF MESSAGE N.
         GBLA  &FIRST         FIRST TIME SWITCH.
         GBLA  &MAXCP         MAX COMPONENT NUMBER ENTERED. FOR
.*                            EXAMPLE, THE MAXIMUM COMPONENT NUMBER
.*                            ENTERED MIGHT BE 6.
         GBLA  &MAXSCP(100)   MAX SUBCOMPONENT NUMBER ENTERED FOR EACH
.*                            COMPONENT. FOR EXAMPLE, FOR COMPONENT
.*                            05, THE MAXIMUM SUBCOMPONENT NUMBER
.*                            ENTERED MIGHT BE 4.
         GBLA  &MAXSSCP(1000) MAX SUB-SUBCOMPCOMPONENT NUMBER ENTERED
.*                            FOR EACH SUBCOMPONENT. FOR EXAMPLE, FOR
.*                            SUBCOMPONENT 054, THE MAXIMUM SUB-
.*                            SUBCOMPONENT NUMBER ENTERED MIGHT BE 22.
.*
.**********************************************************************
.*  THIS SECTION CAUSES INITIAL INFORMATION TO BE PUT IN THE CSECT.   *
.**********************************************************************
.*
         AIF   (&FIRST NE 0).NOINIT
&FIRST   SETA  1
         SPACE 3
         DC    A(MSGINDX)     ADDRESS OF COMPONENT CROSS
*                             REFERENCE INDEX TABLE.
         DC    CL8'&SYSECT'   CSECT NAME.
         DC    CL8'&SYSDATE'  DATE OF LAST COMPILE.
         DC    CL8'&SYSTIME'  TIME OF LAST COMPILE.
         SPACE 3
.NOINIT  ANOP
.*
.**********************************************************************
.*  THIS SECTION DETERMINES WHETHER CROSS REFERENCE INDEX TABLES      *
.*  ARE TO NOW BE PRODUCED. THE LAST MACRO IN A MESSAGE CSECT SHOULD  *
.*  OMIT THE MESSAGE TEXT, WHICH WILL CAUSE THE CROSS REFERENCE       *
.*  TO BE PRODUCED.                                                   *
.**********************************************************************
.*
         AIF   (T'&MSG EQ 'O').CINDX
.*
.**********************************************************************
.*  THIS SECTION ENSURES THAT &MSGNO IS BEING ENTERED IN ASCENDING    *
.*  SEQUENCE. IF NOT, AN MNOTE WITH SEVERITY 12 IS ISSUED. IF SO,     *
.*  THE GLOBAL VARIABLES ARE UPDATED TO REFLECT THE NEW MESSAGE.      *
.**********************************************************************
.*
         AIF   (K'&MSGNO NE 6).E1MSGNO
&TMSGID  SETC  '&MSGNO'(2,(K'&MSGNO)-1)
&CNT     SETA  1
.CKMSGID ANOP
&TMSGC   SETC  '&TMSGID'(&CNT,1)
         AIF   ('&TMSGC' LT '0' OR '&TMSGC' GT '9').E1MSGNO
&CNT     SETA  &CNT+1
         AIF   (&CNT LE 5).CKMSGID
&TNMSGID SETA  &TMSGID
.* MESSAGE NUMBER ENTERED IS IN PROPER SYNTAX.
.* CHECK FOR ASCENDING SEQUENCE
         AIF   (&TNMSGID LE &MAXID).E2MSGNO
&MAXID   SETA  &TNMSGID
&TMSGC   SETC  '&TMSGID'(1,2)
&COMP    SETA  &TMSGC
&TMSGC   SETC  '&TMSGID'(3,1)
&SCOMP   SETA  &TMSGC
&TMSGC   SETC  '&TMSGID'(4,2)
&SSCOMP  SETA  &TMSGC
&MAXCP   SETA  &COMP
&MAXSCP(&COMP+1)  SETA  &SCOMP
&MAXSSCP(10*&COMP+&SCOMP+1)  SETA  &SSCOMP
&NMSGS   SETA  &NMSGS+1
&MSGID(&NMSGS)  SETA  &TNMSGID
&MSGCP(&NMSGS)    SETA  &COMP
&MSGSCP(&NMSGS)   SETA  &SCOMP
&MSGSSCP(&NMSGS)  SETA  &SSCOMP
.*
.*******************************************************************
.*  THIS SECTION INITIALIZES FOR THE TEXT SCAN.                    *
.*******************************************************************
.*
&LMSG    SETA  K'&MSG
&TEXT    SETC  '&MSG'(2,&LMSG-2) STRIP OFF QUOTES AROUND &MSG.
&LTEXT   SETA  &LMSG-2        SET LENGTH OF TEXT.
&LOC     SETA  1              STARTING SCAN LOCATION.
&LOCTXT(&NINSRT+1)  SETA &LOC STARTING INDEX OF TEXT SEGMENT 1.
&NDQ     SETA  0              INITIALIZE THE DOUBLE QUOTE COUNTER.
.*
.*******************************************************************
.*  THIS SECTION IS THE MAIN DRIVING LOOP FOR THE TEXT SCAN.       *
.*******************************************************************
.*
.MAINLOP AIF   ('&TEXT'(&LOC,1) EQ ',').CKINS
         AIF   ('&TEXT'(&LOC,1) EQ '''').CKQUOTE
.CONTML  ANOP
&LOC     SETA  &LOC+1         BUMP &TEXT INDEX PTR.
.CONTMLA ANOP
         AIF   (&LOC LT &LTEXT).MAINLOP
.* DROP THROUGH IMPLIES THAT ENTIRE TEXT HAS BEEN SCANNED FOR INSERTS.
.*
.* BUMP TEXT INDEX PTR TO ONE PAST END OF TEXT.
&LOC     SETA  &LTEXT+1
.* SET LENGTH OF LAST TEXT SEGMENT.
&LENTXT(&NINSRT+1)  SETA  &LOC-&LOCTXT(&NINSRT+1)
.* SAVE NUMBER OF DOUBLE QUOTES IN THE LAST TEXT SEGMENT.
&NDQTXT(&NINSRT+1)  SETA  &NDQ
         AGO   .FORM          GO FORM OUTPUT CONSTRUCTS.
.*
.*******************************************************************
.*  THIS SECTION CHECKS FOR AND HANDLES INSERT LOCATIONS.          *
.*******************************************************************
.*
.CKINS   AIF   ('&TEXT'(&LOC+1,1) NE ',').CONTML
.* HAVE FOUND A DOUBLE COMMA, IMPLYING THIS IS THE END OF THIS
.* TEXT SEGMENT. THE DOUBLE COMMA IS DELETED FROM THE TEXT SEGMENT.
.*
.* COMPUTE AND SAVE LENGTH OF THIS TEXT SEGMENT.
&LENTXT(&NINSRT+1)  SETA  &LOC-&LOCTXT(&NINSRT+1)
.* SAVE NUMBER OF DOUBLE QUOTES FOUND IN THIS TEXT SEGMENT.
&NDQTXT(&NINSRT+1)  SETA  &NDQ
.* RE-INITIALIZE THE DOUBLE QUOTE COUNTER.
&NDQ     SETA  0
.* UPDATE NUMBER OF INSERTS FOUND.
&NINSRT  SETA  &NINSRT+1
.* UPDATE CURRENT SCAN INDEX PTR PAST BOTH COMMAS.
&LOC     SETA  &LOC+2
.* SET NEXT TEXT SEGMENT STARTING INDEX.
&LOCTXT(&NINSRT+1)  SETA  &LOC
         AGO   .CONTMLA
.*
.*******************************************************************
.*  THIS SECTION CHECKS FOR AND HANDLES DOUBLE QUOTES.             *
.*******************************************************************
.*
.* SHOULD NEVER HIT JUST A SINGLE QUOTE, BUT MAKE CHECK ANYHOW.
.CKQUOTE AIF   ('&TEXT'(&LOC+1,1) NE '''').E3UNKN
&NDQ     SETA  &NDQ+1         BUMP NUMBER OF DOUBLE QUOTES FOUND.
&LOC     SETA  &LOC+2         BUMP SCAN INDEX PTR PAST BOTH QUOTES...
         AGO   .CONTMLA       ...AND GO CONTINUE SCAN.
.*
.*******************************************************************
.*  THIS SECTION FORMS THE MESSAGE SEGMENT CONSTRUCTS.             *
.*******************************************************************
.*
.FORM    ANOP
&MSGLEN  SETA  0
&LABEL   SETC  'BLS'.'&TMSGID'
&LABEL   DC    H'&NINSRT'     NUMBER OF INSERTS FOR THIS MESSAGE.
&CNT     SETA  1
.CONV1   AIF   (&CNT GT &NINSRT).FORMMSG
         DC    AL1(0),AL1(0)  RESERVED.
&CNT     SETA  &CNT+1
         AGO   .CONV1
.FORMMSG ANOP
&CNT     SETA  1
.NEXTSEG ANOP
&LSEG    SETA  &LENTXT(&CNT)       NUMBER OF CHARACTERS IN SEGMENT N.
.* FINAL LENGTH OF TEXT SEGMENT AFTER DOUBLE QUOTES ARE SQUEEZED OUT.
&FNLLEN  SETA  &LSEG-&NDQTXT(&CNT)
&MSGLEN  SETA  &MSGLEN + &FNLLEN   RUNNING COUNT OF TOTAL MESSAGE LEN.
         DC    AL1(&FNLLEN)   LENGTH OF TEXT SEGMENT.
         AIF   (&LSEG EQ 0).NOSGMT
&SEG     SETC  '&TEXT'(&LOCTXT(&CNT),&LSEG)
         DC    C'&SEG'        TEXT SEGMENT.
.NOSGMT  ANOP
&CNT     SETA  &CNT+1
         AIF   (&CNT LE &NINSRT+1).NEXTSEG
         AIF   (&MSGLEN LE 255).ENDFORM
         MNOTE 12,'MESSAGE LARGER THAN 255 CHARACTERS.'
.ENDFORM ANOP
         SPACE 2
         AGO   .MEND
.*
.**********************************************************************
.*  THIS SECTION CONSTRUCTS THE COMPONENT MESSAGE CROSS               *
.*  REFERENCE INDEX TABLE.                                            *
.**********************************************************************
.*
.CINDX   ANOP
         SPACE 5
PATCHLBL EQU   *              PATCH AREA.
         ORG   *+1+(*-&SYSECT)/10
         EJECT
**********************************************************************
*  COMPONENT CROSS REFERENCE INDEX TABLE.                            *
**********************************************************************
         SPACE 2
         CNOP  0,4
MSGINDX  EQU   *
         DC    F'&MAXCP'
&CNT     SETA  1
&COMP    SETA  0
.CKCOMP  ANOP
         AIF   (&COMP EQ &MSGCP(&CNT)).FOUND1
         DC    A(0)
.BCOMP   ANOP
&COMP    SETA  &COMP+1
         AIF   (&COMP GT &MAXCP).SCOMP
         AGO   .CKCOMP
.FOUND1  AIF   (&COMP LE 9).PAD1
         DC    A(SBLK&COMP)
         AGO   .NXTCOMP
.PAD1    DC    A(SBLK0&COMP)
.NXTCOMP ANOP
&CNT     SETA  &CNT+1
         AIF   (&CNT GT &NMSGS).SCOMP
         AIF   (&MSGCP(&CNT) EQ &MSGCP(&CNT-1)).NXTCOMP
         AGO   .BCOMP
.*
.**********************************************************************
.*  THIS SECTION CONSTRUCTS THE SUBCOMPONENT MESSAGE CROSS            *
.*  REFERENCE INDEX TABLES.                                           *
.**********************************************************************
.*
.SCOMP   ANOP
         EJECT
&CNT     SETA  1
.NEWCOMP ANOP
         SPACE 3
**********************************************************************
*  SUBCOMPONENT MESSAGE CROSS REFERENCE INDEX TABLE.                 *
**********************************************************************
         SPACE 2
&SCOMP   SETA  0
&COMP    SETA  &MSGCP(&CNT)
         AIF   (&COMP LE 9).PADS1
&LABEL   SETC  'SBLK'.'&COMP'
         AGO   .LBSCOMP
.PADS1   ANOP
&LABEL   SETC  'SBLK0'.'&COMP'
.LBSCOMP ANOP
&LABEL   EQU   *
         DC    F'&MAXSCP(&COMP+1)'
.CKSCOMP ANOP
         AIF   (&SCOMP EQ &MSGSCP(&CNT)).FOUND2
         DC    A(0)
.BSCOMP  ANOP
&SCOMP   SETA  &SCOMP+1
         AIF   (&SCOMP GT &MAXSCP(&COMP+1)).NXTSC
         AGO   .CKSCOMP
.FOUND2  AIF   (&COMP LE 9).PADS2
         DC    A(SSBLK&COMP&SCOMP)
         AGO   .NXTSC
.PADS2   ANOP
         DC    A(SSBLK0&COMP&SCOMP)
.NXTSC   ANOP
&CNT     SETA  &CNT+1
         AIF   (&CNT GT &NMSGS).SSCOMP
         AIF   (&MSGCP(&CNT) NE &COMP).NEWCOMP
         AIF   (&MSGSCP(&CNT) EQ &MSGSCP(&CNT-1)).NXTSC
         AGO   .BSCOMP
.*
.**********************************************************************
.*  THIS SECTION CONTSTRUCTS THE SUB-SUBCOMPONENT MESSAGE             *
.*  CROSS REFERENCE INDEX TABLE.                                      *
.**********************************************************************
.*
.SSCOMP  ANOP
         EJECT
&CNT     SETA  1
.NEWSCMP ANOP
         SPACE 3
**********************************************************************
*  SUB-SUBCOMPONENT CROSS REFERENCE INDEX TABLE.                     *
**********************************************************************
         SPACE 2
&SSCOMP  SETA  0
&SCOMP   SETA  &MSGSCP(&CNT)
&COMP    SETA  &MSGCP(&CNT)
         AIF   (&COMP LE 9).PADSS1
&LABEL   SETC  'SSBLK'.'&COMP'.'&SCOMP'
         AGO   .LBSSCMP
.PADSS1  ANOP
&LABEL   SETC  'SSBLK0'.'&COMP'.'&SCOMP'
.LBSSCMP ANOP
&LABEL   EQU   *
         DC    F'&MAXSSCP(10*&COMP+&SCOMP+1)'
.CKSSCMP ANOP
         AIF   (&SSCOMP EQ &MSGSSCP(&CNT)).FOUND3
         DC    A(0)
.BSSCOMP ANOP
&SSCOMP  SETA  &SSCOMP+1
         AIF   (&SSCOMP GT &MAXSSCP(10*&COMP+&SCOMP+1)).NXTSSC
         AGO   .CKSSCMP
.FOUND3  AIF   (&COMP LE 9).PADSS2
         DC    A(BLS&MSGID(&CNT))
         AGO   .NXTSSC
.PADSS2  DC    A(BLS0&MSGID(&CNT))
.NXTSSC  ANOP
&CNT     SETA  &CNT+1
         AIF   (&CNT GT &NMSGS).MEND
         AIF   (&MSGSCP(&CNT) NE &SCOMP).NEWSCMP
         AIF   (&MSGCP(&CNT) NE &COMP).NEWSCMP
         AGO   .BSSCOMP
.*
.**********************************************************************
.*  THIS SECTION CONTAINS THE MNOTE ERROR MESSAGES.                   *
.**********************************************************************
.*
.E1MSGNO MNOTE 12,'LABEL MUST BE ONE ALPHABETIC AND FIVE DIGITS.'
         AGO   .MEND
.E2MSGNO MNOTE 12,'LABELS MUST BE ENTERED IN ASCENDING SEQUENCE.'
         AGO   .MEND
.E3UNKN  MNOTE 12,'UNKNOWN CONDITION: SINGLE QUOTATION MARK DETECTED.'
         AGO   .MEND
.MEND    MEND
