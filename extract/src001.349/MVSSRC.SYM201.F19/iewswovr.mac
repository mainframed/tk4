SWOV    TITLE 'IEWSWOVR - OVERLAY SUPERVISOR, NONRESIDENT MOD. FOR MVS'
IEWSWOVR CSECT
*1128                                                            A34604
*2526091400                                                        I270
*    096600,097600-097800                                          6854
*1128096200,096600                                               A35794
*
*1128079400-080200                                               M0677
*1128091400                                                      M2860
*                                                                M0195
*                                                                M0184
*091120-091500                                                   YM3344
*D050600-050800,D101000-101200---043404,050900-051000,087620,    YM2817
*087840,091280-091288,091540,097600-097700,100800-101400,112940, YM2817
*112980                                                          YM2817
*107420,107744                                                   YM2976
*090200-090400,091800-092200                                     YM3839
*C107000-107800                                                  YM1021
*A107600                                                         YM1064
*A447610-447660                                                @ZA05601
*A050985-6                                                     @ZA14590
*D095000,A093860                                               @ZA16075
*A044761-044764,A112941                                        @ZA17987
*C079740,C0799802                                              @ZA26003
*044792,091285-091315,107000-108000,113000,113320              @ZA25977
*042000,043520,112486-112800,                                  @ZA25985
          EJECT
*
*STATUS CHANGE LEVEL 002
*
*FUNCTION/OPERATION:  RECEIVES CONTROL FROM RESIDENT OVERLAY SUPERVISOR
*   MODULE. EXAMINES STATUS OF REQUESTED SEGMENT. IF NOT IN MAIN
*   STORAGE, REQUESTED SEGMENT AND SEGMENTS HIGHER IN ITS PATH ARE
*   LOADED INTO MAIN STORAGE. TABLES ARE MODIFIED TO REFLECT THE STATUS
*   OF SEGMENTS IN MAIN STORAGE AND SEGMENTS OVERWRITTEN.
*
*ENTRY POINT:  IEWSWOVR
*              IT IS 'LINKED TO' UNDER THE NAME IEWSZOVR.
*
*INPUT: REGISTERS ARE INITIALIZED AS FOLLOWS:
*
*        REG 1 - ADDRESS OF AN ENTAB ENTRY.
*        REG 2 - POSITIVE VALUE INDICATES SEGWT.
*              - ZERO     VALUE INDICATES SEGLD.
*              - NEGATIVE VALUE INDICATES CALL OR BRANCH.
*        REG 6 - ADDRESS OF REGISTER SAVE AREA (EXTENDED SAVE AREA).
*        REG 8 - BASE OF COMMUNICATION VECTOR.
*        REG 9 - NO. OF REQUESTED SEGMENT,RIGHT JUSTIFIED.
*        REG 10- ZERO
*        REG 12- ADDRESS OF SEGTAB
*
*OUTPUT: N/A
*
*EXTERNAL ROUTINES - IEWFETCH  - PROGRAM FETCH (BLOCK/SCATTER)
*                  - IEAVLDCK  - VALIDITY CHECK RTN.
*
*EXITS:- NORMAL  UPON EXIT, REGISTER 15 IS SET TO A RETURN CODE. RETURN
*                IS TO THE RESIDENT MODULE WHICH INTERPRETS THE RETURN
*                CODE. REGISTER 15 IS USED TO CONTAIN THE RETURN CODE
*                ON NORMAL RETURNS, THE CODE IS ZERO.
         EJECT                                                 @ZA25977
*      - ERRORS  THE ERROR RETURN CODES ARE PLACED IN THE LOW ORDER
*                BYTES OF REGISTER 15.
*                    CODES  - X'12D'    SEGMENT TABLE HAS BEEN CONTAMI-
*                                       NATED.
*                           - X'22D'    VALIDITY TEST INDICATES AN AD-
*                                       DRESS IN ENTAB OR SEGTAB HAS
*                                       BEEN DESTROYED AND NOW ADDRESS-
*                                       ES A LOCATION OUTSIDE OF THE
*                                       PROBLEM PROGRAM.
*                           - X'32D'    AN I/O ERROR DETECTED BY
*                                       PROGRAM FETCH.
*                           - X'E2D'    AN INVALID ADDRESS HAS BEEN
*                                       DETECTED BY PROGRAM FETCH.
*                           - X'D2D'    AN INVALID RECORD TYPE HAS
*                                       BEEN DETECTED BY PROGRAM FETCH.
*                           - X'425'    AN INVALID SEGWT REQUEST MADE
*                                       BY PROBLEM PROGRAM. INVALID
*                                       REQUESTS OF THIS TYPE ARE THOSE
*                                       IN WHICH THE VCON IS RESOLVED
*                                       TO AN ENTAB AND THE REQUESTED
*                                       SEGMENT IS EXCLUSIVE.
*                           - X'42D'    ERROR OCCURRED DURING SEGLD
*                                       PROCESSING.
*
*
*                                                 *
*                                                 *
*                                                 *
*                                               1 * V(JOE)
*                                                 *
*                                                 *
*                                         ******************
*                                         *                * JOE
*                                         *                *
*                                      2  * SEGWT JOE    3 *
*                                         *                *
*                                         *                *
*                                         *                *
*
*                                       IF V(JOE) HAD NOT APPEARED IN
*                                       THE COMMON SEGMENT, THE VCON
*                                       FOR JOE IN SEG 2 (GENERATED BY
*                                       THE SEGWT MACRO) WOULD BE RESO-
*                                       LVED DIRECTLY TO JOE, ITS HIGH
*                                       ORDER BYTE WOULD BE ZERO AND
*                                       IS TREATED AS A NOP. IT APPEARS
*                                       THE SAME AS A SEGWT TO A HIGHER
*                                       SEGMENT. THE REQUEST IS INVALID
*                                       BECAUSE IT ATTEMPTS TO OVERLAY
*                                       THE CALLING SEGMENT OR ONE
*                                       HIGHER IN ITS PATH.
*
         EJECT
*TABLES/WORK AREAS:
*
*  SEGTAB
*
*    '***************'***************'***************'***************'
*    '               '1              '2              '3              '
*    '  BIT 0 MUST NOT BE USED. DENOTES ASYNCHRONOUS LOAD(NEGATIVE).
*    '  BIT 1-0 NOT  '1              '2              '3              '
*    '          IN   '                                               '
*    '          TEST '        DCB  ADDRESS                           '
*    '       -1 IN   '                                               '
*    '          TEST '                                               '
*    '  BIT 2-1 SEGLD IN PROCESS.
*    '        0 NO SEGLD IN PROCESS.
*    '  BIT 3-1 SEGLD CONTINUATION PROCESSING.
*    '        0 REVERSE OF ABOVE.
*    '  BIT 4-1 SYSTEM DEB.
*    '        0 MAY NOT BE SYSTEM DEB.
*    '***************'***************'***************'***************'
*    '4              '5              '6              '7              '
*    '               '        NOTE LIST ADDRESS                      '
*    '               '                                               '
*    '***************'***************'***************'***************'
*    '8 HIGHEST SEG  '9  HIGHEST SEG '10 HIGHEST SEG '11 HIGHEST SEG '
*    'IN REGION 1    'OF REGION 1 IN 'IN REGION 2    'OF REGION 2 IN '
*    '               'MAIN STORAGE   '               'MAIN STORAGE   '
*    '***************'***************'***************'***************'
*    '12 HIGHEST SEG '13 HIGHEST SEG '14HIGHEST SEG  '15 HIGHEST SEG '
*    'IN REGION 3    'OF REGION 3 IN 'IN REGION 4    'OF REGION 4 IN '
*    '               'MAIN STORAGE   '               'MAIN STORAGE   '
*    '***************'***************'***************'***************'
*    '16             '17             '18             '19             '
*    ' IN SUBTASK, PTR TO 1ST SEG TO LOAD. HI BYTE=SEG# BEING LOADED '
*    '
*    '***************'***************'***************'***************'
*    '20             '21             '22             '23             '
*    ' ECB FOR MAIN TASK TO WAIT FOR SUBTASK START.                  '
*    '                                                               '
*    '***************'***************'***************'***************'
*ROOT'24             '25             '26             '27             '
* 1ST' PREVIOUS SEG- '        CALLER FIELD                           '
* SEG' MENT NUMBER   '                                               '
*    '               '                                               '
*    '***************'***************'***************'***************'
*    '28             '29             '30             '31             '
* 2ND' PREVIOUS SEG- '        CALLER FIELD                           '
* SEG' MENT NUMBER   '                                               '
*    '               '                                               '
*    '***************'***************'***************'***************'
* ETC.
*
*  NOTES ON SEGTAB
*    1. THE TEST BIT IS SET BY PROGRAM FETCH IF THE PROGRAM ATTRIBUTES
*       INDICATE THAT THE PROGRAM IS IN TEST
*    2. THE DCB ADDRESS POINTS TO THE DCB USED TO LOAD THE ROOT. IT IS
*       USED EACH TIME A SEGMENT IS LOADED. THE ADDRESS IS INITIALIZED
*       BY PROGRAM FETCH.
*    3. THE NOTE LIST IS READ BY PROGRAM FETCH AND THE ADDRESS IN
*       SEGTAB IS INITIALIZED BY PROGRAM FETCH.
*    4. THE PREVIOUS SEGMENT FIELD CONTAINS THE NUMBER OF THE SEGMENT
*       IMMEDIATELY ABOVE THIS SEGMENT IN THE OVERLAY TREE.
*    5. THE CALLER FIELD IS USED TO RECORD THE CURRENT STATUS OF A
*       SEGMENT. THE LOW ORDER 2 BITS ARE USED.
*
*                     00 - IN MAIN STORAGE DUE TO CALL/BRANCH
*                     10 - IN MAIN STORAGE, NO CALLER CHAIN
*                     01 - NOT IN MAIN STORAGE,BUT IS BEING LOADED
*                          OR MUST BE LOADED
*                     11 - NOT IN MAIN STORAGE,NOT TO BE LOADED
*       THE 00 INDICATES THAT THE REMAINDER OF THE FIELD CONTAINS THE
*       ADDRESS OF AN ENTAB ENTRY WHICH WAS MODIFIED WHEN THIS SEGMENT
*       WAS BROUGHT INTO MAIN STORAGE.
*
*
*ENTAB
*
*
*  ALL ENTRIES BUT THE LAST
*
*  '********************'********************'********************'
*  '                    '                    ' SEG X              '
*  ' BC  15,DIS(15,0)   ' ADDRESS CONSTANT   ' NO  X PREVIOUS     '
*  '                    '                    ' OF  X CALLER       '
*  '                    ' LOCATION OF ENTRY  ' REQ.X FIELD        '
*  '                    ' POINT IN REQUESTED ' SEG X              '
*  '                    ' SEGMENT            '     X              '
*  '********************'********************'********************'
*  '     4 BYTES        '     4 BYTES        ' 1   '   3 BYTES    '
*                                             BYTE
*
*
*   DIS  IS THE DISPLACEMENT BETWEEN THE BEGINNING OF THIS LINE AND THE
*   LAST LINE IN THE TABLE.
*
*
*  LAST ENTRY
*
*  '********************'********************'*******************'
*  '         *          '         *          'SEG  *             '
*  '  SVC 45 *  L 15,4(0,15)      *BCR 15,15 'NO OF* ADDRESS OF  '
*  '         *                    *          'THIS *   SEGTAB    '
*  '         *                    *          'ENTAB*             '
*  '********************'********************'*******************'
*  '  2 BYTES'      4 BYTES       '  2 BYTES ' 1   '   3 BYTES   '
*                                             BYTE
*ATTRIBUTES:   READ ONLY, REENTRANT, PRIVILEGED, ENABLED, KEY 0
*              ALSO USES USER (CALLER) KEY MOST OF THE TIME.   @ZA25977
         EJECT
*  EQUATES FOR SVRB SAVE AREA                                  @ZA25977
*
SAVEAREA EQU   96
SAVEWD1  EQU   SAVEAREA
SAVEWD2  EQU   SAVEAREA+4
IEWSUK   EQU   SAVEAREA+44         USER KEY                    @ZA25977
IEWSNL   EQU   IEWSUK              NOTE LIST ADDRESS           @ZA25985
IEWSNLA  EQU   IEWSNL+1            NOTE LIST ADDRESS           @ZA25985
*
*  EQUATES FOR ENTENT LIST AND NOTE LIST                       @ZA25985
*
XTLNL    EQU   16                  NOTE LIST SEGMENT           @ZA25985
XTLRFA   EQU   17                  RELOCATION FACTOR           @ZA25985
*
*  REGISTER EQUATES
*
OVRR0    EQU   0
OVRR1    EQU   1
OVRR2    EQU   2
OVRR3    EQU   3
OVRR4    EQU   4
OVRR5    EQU   5
OVRR6    EQU   6
OVRR7    EQU   7
OVRR8    EQU   8
OVRR9    EQU   9
OVRR10   EQU   10
OVRBRG   EQU   11
OVRR11   EQU   11                                                YM1021
OVRR12   EQU   12
OVRR13   EQU   13
OVRR14   EQU   14
OVRR15   EQU   15
*
*  EQUATES FOR SEGTAB
*
DCBADD   EQU   0                   ADDR OF DCB FOR LOADING
FLAGBYTE EQU   0                   PROCESS FLAGS
SEGFLG   EQU   X'20'               SUBTASK IS DOING SEGLD
CONTFLG  EQU   X'10'               CONTINUE AFTER SUBTASK CLEANUP
NOTEADD  EQU   4                   POINTER TO NOTE LIST        @ZA25985
OVRAPTR  EQU   16                  ADDR OF SEG FOR SUBTASK TO LOAD
OVRECB   EQU   20                  ECB FOR SUBTASK WATCHING
PRFXSIZ  EQU   20                  SEGTAB PREFIX SIZE
*
*  EQUATES FOR ENTAB
*
SEGNO    EQU   8                   NUMBER OF SEGMENT TO LOAD
PCALL    EQU   8                   NUM. OF SEGMENT CONTAINING ENTAB
         EJECT                                                 @ZA25977
*  EQUATES FOR FETCH WORK AREA
*
FWASTPSP EQU   234            STEP ORIENTED SP # OF FETCH W.A.   YM2817
FWASP    EQU   233            SUBPOOL NUMBER OF FETCH WORK AREA
FWALN    EQU   1500           SIZE OF FETCH WORK AREA
ASYNCECB EQU   8              ECB TO POST FOR SUBTASK START      YM3839
SAVLN    EQU   64             SIZE OF SAVE AREA FOR ASYNC LOAD
LSTLN    EQU   60             SIZE OF PARM LIST FOR ASYNC LOAD   ZA0134
SAVEREGS EQU   FWALN          OFFSET TO SAVE AREA
STARTECB EQU   FWALN+SAVLN+LSTLN    OFFSET TO START ECB          YM3839
ATTLIST  EQU   FWALN+SAVLN    OFFSET TO PARM LIST AREA
*
ZERO     EQU   0              OFFSET OF ZERO                     ZA1407
XZERO    EQU   X'00'          BYTE OF ZEROES                     ZA1407
ADDR     EQU   B'0111'        MASK FOR CLM, STM INSTS          @ZA25985
         EJECT
CVT      DSECT
         CVT   SYS=VMS
         EJECT
IEWSWOVR CSECT
*
*  ENTERED IN KEY ZERO FROM RESIDENT ROUTINE                   @ZA25977
*  ENTERED IN USER KEY FOR SUBTASK                             @ZA25977
*
         BALR  OVRBRG,0      SET UP BASE REGISTER.
         USING *,OVRBRG
         SPACE
         B     SWOVR001                 BR AROUND MODULE ID      Y02081
         DC    C'IEWSZOVR'              MODULE NAME              Y02081
         DC    C'OS/VS2'                SYSTEM NAME              Y02081
         DC    C'&SYSDATE'              DATE OF LAST UPDATE      Y02081
         SPACE
*    TEST IF ENTRY IS FROM NON-RESIDENT OVERLAY SUPERVISOR OR FROM
*      ATTACH ISSUED BY THIS MODULE FOR ASYNCHRONOUS LOAD(SEGLD)
         DC    0H'0'                    PAD TO HALFWORD        @ZA25977
SWOVR001 CLI   0(1),X'47'               R1=0 IS ATTACH           YM3839
         BNE   IEWSEGLD                 GO IF ATTACH             YM3839
         L     OVRR7,4(OVRR1)           GET ENTAB POINTER      @ZA17987
         L     OVRR0,IEWSFM             LENGTH FOR FREEMAIN    @ZA17987
         FREEMAIN R,LV=(0),A=(1)        DO FREEMAIN            @ZA17987
         LR    OVRR1,OVRR7              ENTAB ADDRESS TO REG 1 @ZA17987
*
*  VALIDITY CHECK ENTAB ADDRESS IN REGISTER 7                  @ZA05601
*
         LA    OVRR7,0(OVRR7)    CLEAR HIGH BYTE               @ZA05601
         BAL   OVRR15,OVRL83     VAL CHK THE ADDRESS           @ZA05601
*                                VAL. RTN ENTERS USER KEY      @ZA25977
*
* DETERMINE THE REGION CONTAINING NSEG AND SAVE IT.
*
         MODESET EXTKEY=SUPR                                   @ZA25977
         STC   OVRR9,SAVEWD2(OVRR6)     SAVE NSEG
         BAL   OVRR15,OVRL88            GET REGION OF NSEG.
*                                       VAL RTN GETS USER KEY  @ZA25977
         MODESET EXTKEY=SUPR                                   @ZA25977
         ST    OVRR5,SAVEWD1(OVRR6)     SAVE REGION PTR
         MODESET KEYADDR=IEWSUK(,OVRR6),WORKREG=4     USER KEY @ZA25977
         LR    OVRR4,OVRR5
         EJECT                                                 @ZA25985
*
*  VALIDATE NOTE LIST ADDRESS BY SEARCHING CDE CHAIN           @ZA25985
*
         USING CVT,OVRR15                                      @ZA25985
         L     OVRR15,CVTPTR(OVRR0) ADDRESS OF CVT             @ZA25985
         L     OVRR15,CVTTCBP      ADDR OF TCB PTRS            @ZA25985
         L     OVRR15,4(OVRR15)    ADDR OF CURRENT TCB         @ZA25985
         USING TCB,OVRR15                                      @ZA25985
         L     OVRR15,TCBJSTCB     STEP TO JOB STEP TCB        @ZA25985
         L     OVRR15,TCBJPQ       PICK UP CDE CHAIN           @ZA25985
         USING CDENTRY,OVRR15      TALKING TO CDE              @ZA25985
*  FIND OVERLAY MODULES                                        @ZA25985
OVRL03   TM    CDATTR,CDMIN        IF MINOR CDE, NO XL/NL      @ZA25985
         BO    OVRL04              SKIP IT                     @ZA25985
         TM    CDATTR2,CDOLY       IF NOT OVERLAY,             @ZA25985
         BNO   OVRL04              SKIP IT TOO                 @ZA25985
*  PICK EXTENT LIST ADDRESS, DEVELOP NOTE LIST ADDRESS         @ZA25985
         L     OVRR13,CDXLMJP      POINT TO XL/NL              @ZA25985
         LA    OVRR13,XTLNL(,OVRR13) POINT TO NL PART OF XL    @ZA25985
         C     OVRR13,NOTEADD(,OVRR12) IS THIS THE ONE WANTED  @ZA25985
         BE    OVRL05              YES, GO TEST CONSISTENCY    @ZA25985
*  NEXT  CDE                                                   @ZA25985
OVRL04   ICM   OVRR15,ADDR,CDCHAIN+1  STEP TO NEXT             @ZA25985
         BNZ   OVRL03              BACK IF ANOTHER EXISTS      @ZA25985
         B     ABND22D             END OF CHAIN, ABEND         @ZA25985
         DROP  OVRR15              NO MORE CDE                 @ZA25985
*  NOTE  LIST FOUND. IT MUST POINT BACK TO SEGTAB              @ZA25985
OVRL05   CLM   OVRR12,ADDR,XTLRFA-XTLNL(OVRR13) DOES IT?       @ZA25985
         BNE   ABND22D             NO, IT IS A FAKE NL ADDR    @ZA25985
*  SAVE  VERIFIED ADDRESS FOR FETCH CALLS                      @ZA25985
         MODESET EXTKEY=SUPR       TO KEY 0                    @ZA25977
         STCM  OVRR13,ADDR,IEWSNLA(OVRR6)  STUFF ADDRESS       @ZA25985
*
* DETERMINE ADDRESS OF SEGTAB LINE FOR NSEG
*
         LR    OVRR13,OVRR9        MOVE SEGNO FOR ADDRESS COMPUTE  RTN.
         BAL   OVRR15,OVRL80  COMPUTE ADDRESS AND VALIDITY CHECK IT.
*                             VAL. RTN ENTERS USER KEY         @ZA25977
         EJECT
* NOW DECIDE JUST HOW TO HANDLE THE REQUEST, DEPENDING
* ON WHAT IS ALREADY LOADED AND WHAT KIND OF REQUEST WAS MADE.
*
*  IF REQUESTED SEGMENT IS ALREADY LOADED, GO EXIT
*  IF REQUESTED SEGMENT IS BEING LOADED AND THIS IS SEGLD, GO EXIT
*  IF REQ. SEG. IS BEING LOADED AND THIS ISN'T SEGLD, WAIT, THEN EXIT
*  IF LOAD NOT IN PROGRESS, GO START SOMETHING
*  IF LOAD IN PROGRESS, CLEAN IT UP, THEN START SOMETHING
*
         LR    OVRR0,OVRR5              SAVE SEGTAB ENT. ADDR FOR NSEG
         TM    3(OVRR5),X'01'           IS SEGMENT IN MAIN STORAGE.
         BZ    OVRL60                   BRANCH IF YES, GO EXIT
         TM    3(OVRR5),X'02'           IS IT BEING LOADED.
         BO    OVRL10                   BRANCH IF NO.
         LTR   OVRR2,OVRR2              IS THIS A SEGLD REQUEST.
         BZ    OVRL68                   BRANCH IF YES, GO EXIT
         B     OVRL11                   NO, GO WAIT, THEN EXIT
OVRL10   TM    FLAGBYTE(OVRR12),SEGFLG  IS A SEGLD IN PROGRESS.
         BZ    OVRL15                   BRANCH ON NO.
         OI    FLAGBYTE(OVRR12),CONTFLG TURN ON CONTINUE FLAG.
OVRL11   MODESET EXTKEY=SUPR            TO KEY 0               @ZA25977
         STM   OVRR0,OVRR1,SAVEWD2(OVRR6)                      @ZA25977
         MODESET KEYADDR=IEWSUK(,OVRR6),WORKREG=1     USER KEY @ZA25977
         LA    OVRR1,OVRECB(OVRR12)     ADDRESS OF ECB
         WAIT  1,ECB=(1)
         MVI   OVRECB(OVRR12),X'00'     CLEAR ECB
*                                                                YM2817
*  THE PREVIOUSLY ATTACHED SUB-TASK IS DETACHED AT THIS POINT.   YM2817
*                                                                YM2817
         USING CVT,OVRR15                                        YM2817
         L     OVRR15,CVTPTR(OVRR0)     ADDRESS OF CVT           YM2817
         L     OVRR15,CVTTCBP           ADDR OF NEW/OLD TCB PTRS YM2817
         L     OVRR15,4(OVRR15)         ADDR OF CURRENT TCB      YM2817
         USING TCB,OVRR15                                        YM2817
         MODESET EXTKEY=SUPR            NEEDED FOR DETACH      @ZA25977
         DETACH TCBLTC                  DETACH THE SUB-TASK TCB  YM2817
         DROP  OVRR15                                            YM2817
         MODESET KEYADDR=IEWSUK(,OVRR6),WORKREG=1     USER KEY @ZA25977
         LM    OVRR0,OVRR1,SAVEWD2(OVRR6)
         L     OVRR7,OVRECB(OVRR12)     R7=AB CODE FROM SUBTASK  YM2817
         LTR   OVRR7,OVRR7              Q. RETURN CODE ZERO?     YM2817
         BZ    OVRL115                  IF ZERO CONTINUE         YM2817
         LA    OVRR7,4                  CHANGE ERROR CODE TO 4 @ZA14590
         B     OVRL71                   GO TO ABEND PROC       @ZA14590
OVRL115  XI    FLAGBYTE(OVRR12),SEGFLG  TURN SEGLD INDICATOR OFF
         L     OVRR3,OVRAPTR(OVRR12)    PTR TO LOWEST SEG LOADED.
OVRL12   MVI   3(OVRR3),X'02'           MARK IT IN MAIN STORAGE.
         IC    OVRR9,0(OVRR3)           GET ITS PSEG.
         SLL   OVRR9,2
         LA    OVRR3,PRFXSIZ(OVRR12,OVRR9)   ADDRESS OF SEGTAB LINE.
         TM    3(OVRR3),X'01'           WAS IT MARKED TO BE LOADED.
         BO    OVRL12                   BRANCH IF YES.
*  SEE IF THERE IS ANY MORE WORK TO DO
         TM    FLAGBYTE(OVRR12),CONTFLG IS CONTINUE FLAG ON.
         BZ    OVRL58                   NO, GO DO EXIT PROCESS
         SR    OVRR9,OVRR9              CLEAR REGISTER           A34604
         IC    OVRR9,SEGNO(OVRR1)       GET SEGNO FROM ENTAB.
         XI    FLAGBYTE(OVRR12),CONTFLG TURN OFF CONTINUE FLAG.
         EJECT                                                 @ZA25977
*
*  SET UP TO LOAD NEW SEGMENT
*
*  SEGMENT NUMBERS ARE THE BASIS FOR THE FOLLOWING ANALYSIS.
*  THE FOLLOWING ABBREVIATIONS ARE USED:
*     NSEG  NEW (TARGET) SEGMENT. GOTTEN FROM ENTAB ENTRY
*     OSEG  OLD SEGMENT, PREVIOUSLY LOADED. FROM SEGTAB REGION FIELDS
*     RSEG  REQUESTING SEGMENT = CALLER'S SEGMENT, FROM V-CON HI BYTE
*     PSEG  PARENT SEGMENT, GOTTEN FROM SEGTAB SEGMENT SLOT
*
OVRL15   LTR   OVRR2,OVRR2              IS REQUEST A CALL OR BRANCH.
         BM    OVRL25                   YES
*  DETERMINE THAT CALLER (RSEG) IS NOT OVERLAID BY NSEG
*  I. E., RSEG MUST BE IN PATH OF NSEG, OR IN DIFFENT REGIONS
         MODESET EXTKEY=SUPR            GO TO KEY 0            @ZA25977
         ST    OVRR1,SAVEAREA+4(OVRR6)  PUT RSEG IN SAVE AREA
         MODESET KEYADDR=IEWSUK(,OVRR6),WORKREG=3              @ZA25977
         LR    OVRR3,OVRR9              USE NSEG AS LOOP LIMIT.
OVRL18   NC    0(1,OVRR5),0(OVRR5)      IS PSEG ZERO.
         BZ    OVRL20                   YES, POSSIBLY ERROR, CONTINUE
         CLC   0(1,OVRR5),SAVEAREA+4(OVRR6) IS RSEG IN NSEG'S CHAIN
         BE    OVRL25                   YES, CALL IS LEGAL, GO DO IT
         SR    OVRR13,OVRR13
         IC    OVRR13,0(OVRR5)          GET PSEG.
         BAL   OVRR15,OVRL80            GET SEGTAB LINE ADDRESS.
*                                       VAL. RTN SETS USER KEY @ZA25977
         BCT   OVRR3,OVRL18             TRY AGAIN
         B     OVRL90                   ERROR, BAD SEGTAB/ENTAB/VCON
*  ALLOW SEGLD/SEGWT IF DIFFERENT REGIONS
OVRL20   BAL   OVRR15,OVRL88            GET REGION OF RSEG.
*                                       VAL. RTN SETS USER KEY @ZA25977
         CL    OVRR5,SAVEAREA(OVRR6)    ARE REGIONS THE SAME.
         BNE   OVRL25                   BRANCH IF NO, ACCEPT REQUEST
*  IGNORE SEGLD ERROR; WILL BE CAUGHT @ SEGWT IF STILL BAD.
         LTR   OVRR2,OVRR2              IS REQUEST A SEGLD.
         BZ    OVRL68                   YES, IGNORE ERROR, DON'T LOAD
         LA    OVRR15,1061              ERROR CODE X'425'
         BR    OVRR14                   RETURN WITH ERROR CODE.
*
*  DETERMINE SEGMENTS TO BE LOADED AND MARK THEM. DETERMINE SEGMENTS
*    BEING OVERWRITTEN AND RESET TABLES.
*
OVRL25   IC    OVRR10,1(OVRR4)          GET OSEG FOR THIS REGION.
         STC   OVRR9,1(OVRR4)           STORE NEW OSEG.
OVRL30   CLR   OVRR9,OVRR10             COMPARE NSEG TO OSEG.
         BL    OVRL40                   OSEG GT NSEG, GO MARK DELETES
         BE    OVRL50                   OSEG EQ NSEG, GO DO LOADING
*
*   THIS SECTION MARKS SEGMENTS TO BE LOADED.
*
         LR    OVRR13,OVRR9             SET ENTRY FOR ADDR CHECK RTN.
         BAL   OVRR15,OVRL80            COMPUTE ADDRESS AND CHECK IT.
*                                       VAL. RTN SETS USER KEY @ZA25977
         MVI   3(OVRR5),X'01'           SET ON LOAD INDICATOR
*  NOW TAKE NSEG'S PARENT, LOAD IT IF NOT IN ALREADY.
         IC    OVRR9,0(OVRR5)           SET NSEG EQ TO PSEG(NSEG).
         B     OVRL30                   GO TO NSEG/OSEG COMPARE
*
*   THIS SECTION RESETS TABLES FOR SEGMENTS BEING OVERWRITTEN.
*
OVRL40   LR    OVRR13,OVRR10  SET OSEG IN OVRR13 FOR ADDRESS COMPUTE.
         BAL   OVRR15,OVRL80  COMPUTE ADDRESS AND CHECK IT.
*                             VAL. RTN ENTERS USER KEY         @ZA25977
         L     OVRR7,0(OVRR5) SAVE CALLER FIELD.
         LR    OVRR3,OVRR5    SAVE PTR TO CURRENT SEGTAB ENTRY.
*
** DONT PUT INSTRUCTIONS IN THIS BOX BELOW TM WHICH CHANGE THE CC *****
         TM    3(OVRR5),X'03' DOES CALLER FIELD CONTAIN AN ADDRESS.   *
         MVI   3(OVRR5),X'03' SET NOT LOADED INDICATOR.               *
         BZ    OVRL43         BRANCH IF CALLER FIELD CONTAINED AN ADDR*
***********************************************************************
*
*  NOW TAKE OSEG'S PARENT, TREAT AS WAS OSEG.
OVRL41   IC    OVRR10,0(OVRR3)  SET OSEG EQ TO PSEG OF OSEG.
         B     OVRL30           GO BACK FOR NEXT NSEG-OSEG COMPARISON.
*
*  RESET ENTAB ENTRIES USING CHAIN WHICH STARTS IN SEGTAB CALLER FIELD.
*
OVRL43   LA    OVRR7,0(OVRR7)   CLEAR OUT HIGH ORDER BYTE.
         BAL   OVRR15,OVRL83    VALIDITY TEST THE ADDRESS.
*                               VAL. RTN ENTERS USER KEY       @ZA25977
         XI    3(OVRR5),X'02'   RESET THIS ENTAB ENTRY.
         L     OVRR4,PCALL(OVRR5)  GET PCALLER FIELD OF THIS ENTAB LINE
         LA    OVRR4,0(OVRR4)   REMOVE THE SEGMENT NUMBER.
         LTR   OVRR4,OVRR4      TEST FOR ZERO = END OF CHAIN
         BZ    OVRL41           BRANCH IF PCALLER FIELD WAS ZERO.
         XC    PCALL+1(3,OVRR5),PCALL+1(OVRR5)    SET TO ZERO.
         LR    OVRR7,OVRR4
         B     OVRL43
         EJECT                                                 @ZA25977
*
*   THIS SECTION RESCANS SEGTAB AND LOADS SEGMENTS MARKED TO BE LOADED.
*
OVRL50   LR    OVRR13,OVRR8        MOVE BASE ADDRESS OF COMM. VECTOR.
         LR    OVRR8,OVRR0         SAVE REGS 0,1 IN 8,10.
         LR    OVRR10,OVRR1        MOVE POINTER TO ENTAB
         LTR   OVRR15,OVRR2        TEST FOR SEGLD; SAVE R2     @ZA25985
         BZ    OVLALD01            YES, GO USE ASYNCHRONOUS SUBTASK
         L     OVRR0,OVRLMNST      MAIN STORAGE FOR FETCH (SP 233).
         GETMAIN R,LV=(0)
         LR    OVRR3,OVRR1         SHIFT TO FETCH'S REG.
         IC    OVRR9,SEGNO(OVRR10) PICK UP NSEG FROM ENTAB
         EJECT                                                 @ZA25977
*  START OF LOOP TO LOAD EACH SEGMENT
OVRL52   SLL   OVRR9,2             MULITPLY BY 4.
         LA    OVRR1,PRFXSIZ(OVRR12,OVRR9)  PTR TO SEGMENT SLOT
         TM    3(OVRR1),X'01'      MUST SEG BE LOADED.
         BNO   OVRL57              BRANCH ON NO.
         L     OVRR7,DCBADD(,OVRR12) PTR TO DCB FOR LOAD       @ZA25985
         MODESET EXTKEY=SUPR       GO TO KEY 0 FOR STM         @ZA25977
         STM   OVRR8,OVRR1,SAVEWD2(OVRR6) SAVE REGS OVER FETCH @ZA25985
         L     OVRR8,IEWSNL(,OVRR6) LOAD VERIFIED NOTE LIST    @ZA25985
*
*  ENTER PROGRAM FETCH TO LOAD A SEGMENT. REGISTER SETTINGS -
*
*                        REG 3 - ADDRESS OF WORK AREA
*                        REG 7 - ADDRESS OF DCB
*                        REG 8 - ADDRESS OF NOTE LIST
*                        REG 9 - SEGMENT NO. MULTIPLIED BY 4.
*  ALL REGISTERS ARE VOLATILE IN PROGRAM FETCH EXCEPT REGS 3 AND  6.
*  FETCH RETURN CODE IN REG 15: IF NON-ZERO, AN ERROR HAS OCCURED.
*
         USING CVT,OVRR13
         L     OVRR15,CVTFBOSV
         DROP  OVRR13
         BALR  OVRR14,OVRR15       *** GO TO FETCH ***
         EJECT
         MODESET KEYADDR=IEWSUK(,OVRR6),WORKREG=7              @ZA25977
*
*** DONT PUT INSTRUCTIONS IN THIS BOX WHICH CHANGE THE CC *************
*
         LTR   OVRR7,OVRR15        TEST RETURN CODE.
         LM    OVRR8,OVRR1,SAVEWD2(OVRR6)    RESTORE REGS      @ZA25985
         BNZ   OVRL70              BRANCH IF ERROR IN LOADING.        *
***********************************************************************
*
         MVI   3(OVRR1),X'02'      SET ON LOADED INDIC
         SR    OVRR9,OVRR9         CLEAR
         IC    OVRR9,0(OVRR1)      GET NEXT SEGMENT IN PATH.
         B     OVRL52
*
*  ALL NEEDED SEGMENTS ARE NOW LOADED.
*
OVRL57   LR    OVRR1,OVRR3         SET UP FOR FREEMAIN.
         L     OVRR0,OVRLMNST      MAIN STORAGE FOR FETCH.       YM1021
         FREEMAIN R,LV=(0),A=(1)
         LR    OVRR0,OVRR8         RESET REG 0.
         LR    OVRR1,OVRR10        RESET  REG 1
         LR    OVRR2,OVRR15        RESTORE SAVED REG 2         @ZA25985
         EJECT
*
*   TERMINATION SECTION.
*
         USING CVT,OVRR13                                        M0677
OVRL58   L     OVRR13,CVTPTR(0)    LOAD CVT LOCATION             M0677
         L     OVRR13,CVTTCBP      GET LOC OF CURRENT TCB        M0677
         L     OVRR13,4(OVRR13)             *         *          M0677
         DROP  OVRR13                                            M0677
         USING TCB,OVRR13                                        YM2817
         TM    TCBABF,TCBTCP       BR IF -TEST- NOT RUNNING      YM2817
         DROP  OVRR13                                            YM2817
         BZ    OVRL60                       *         *          M0677
         LR    OVRR13,OVRR1        SAVE REG 1 CONTENTS         @ZA26003
         SR    OVRR1,OVRR1         ZERO REG1 FOR SVC ROUTINE     M0677
         SVC   61                  ISSUE SVC 61 -- TTSAV         M0677
         LR    OVRR1,OVRR13        RESTORE REG 1 CONTENTS      @ZA26003
*
*  IF REQUEST WAS A CALL OR BRANCH AND
*  IF THE 'FROM' AND 'TO' SEGMENT ARE IN THE SAME REGION OR IF THE
*     REQUEST IS THRU THE ENTAB IN THE ROOT SEGMENT
*  THE ENTAB ENTRY IS MODIFIED SO THAT SUBSEQUENT BRANCHES TO THAT
*     ENTRY WILL BYPASS THE SVC 45 AND CONTROL WILL PASS DIRECTLY TO
*     THE CALLED SEGMENT.
*
OVRL60   LTR   OVRR2,OVRR2           IS THE REQUEST A SEGWT.
         BP    OVRL68                BRANCH IF YES, EXIT
         MODESET EXTKEY=SUPR         GET TO KEY 0              @ZA25977
         ST    OVRR12,SAVEWD2(OVRR6) SEGNO OF ENTAB
         MODESET KEYADDR=IEWSUK(,OVRR6),WORKREG=5 GET USER KEY @ZA25977
         CLI   SAVEWD2(OVRR6),X'01'  IS REQUEST FROM ROOT ENTAB.
         BE    OVRL63                YES, GO SET ENTAB
         BAL   OVRR15,OVRL88         GET REGION OF ENTAB.
*                                    VAL. RTN GETS USER KEY    @ZA25977
         CL    OVRR5,SAVEWD1(OVRR6)  COMPARE REGION PTRS.
         BNE   OVRL68                GO IF NOT EQUAL
*
*   THIS SECTION RESETS ENTAB ENTRY FOR REQUESTED SEGMENT AND UPDATES
*    SEGTAB, SUCH THAT NEXT USE OF ENTAB BRANCHES DIRECT.
*
OVRL63   LR    OVRR5,OVRR0           GET ADDRESS OF SEGTAB ENTRY.
         TM    3(OVRR5),X'03'        DOES IT CONTAIN AN ADDRESS.
         BNZ   OVRL65                BRANCH IF NO.
         MVC   9(3,OVRR1),1(OVRR5)   MOVE ADDR TO PCALLER FLD
OVRL65   IC    OVRR4,0(OVRR5)        SAVE NSEG FIELD.
         ST    OVRR1,0(OVRR5) STORE ADDRESS OF ENTAB IN CALLER FIELD.
         STC   OVRR4,0(OVRR5)        RESTORE NSEG FIELD.
         XI    3(OVRR1),X'02'        INCREMENT ENTAB BRANCH.
         EJECT
*
*        RETURN
*
OVRL68   SR    OVRR15,OVRR15         SET ERROR CODE TO NORMAL RETURN.
         BR    OVRR14                RETURN...........
         SPACE 10                                              @ZA25977
OVRL70   EQU   *                                                 YM2817
         LA    15,15                                               AAAA
         CR    OVRR7,15              CHECK FOR RETURN CODE OF F    AAAA
         BNE   OVRL71                                              AAAA
         LA    OVRR7,3               CHANGE CODE OF F TO 3         AAAA
OVRL71   SLL   OVRR7,8                                             AAAA
         LA    OVRR15,45(OVRR7)      MERGE ERROR CODES.
         BR    OVRR14                RETURN WITH ERROR CODE.
         EJECT
*
*     THIS ROUTINE WILL ATTACH IEWSZOVR (IEWSWOVR) FOR ASYNCRONOUS LOAD
*
OVLALD01 L     OVRR0,ASYNCMST      MAIN STORAGE FOR FETCH
         GETMAIN R,LV=(0)
         LR    OVRR3,OVRR1         ADDR OF WORK AREA
         SR    OVRR0,OVRR0         RESET FOR INITIAL TEST        YM3839
         L     OVRR8,IEWSNL(,OVRR6) USER KEY & NOTE LIST ADDR  @ZA25985
         SR    OVRR9,OVRR9          RESET                      @ZA25977
         ST    OVRR9,OVRECB(OVRR12) RESET ECB                  @ZA25977
         MODESET EXTKEY=SUPR        GO TO KEY 0                @ZA25977
         STM   OVRR0,OVRR15,SAVEREGS(OVRR1) SAVE REGS FOR THE
*                                  ASYNC ROUTINE.
         MVI   ZERO(OVRR1),XZERO   CLEAR 1ST BYTE                ZA1407
         SPACE
         LR    OVRR2,OVRR14        SAVE RETURN REG              OY00351
         LR    OVRR1,OVRR3         SET UP REG FOR ATTACHED RT
         LA    OVRR15,ATTLIST(OVRR3)    ADDR OF PARM LIST
         XC    0(LSTLN,OVRR15),0(OVRR15) CLEAR LIST AREA
*   ADD DCB = LINKLIB  TO FORCE SEARCH OF LPALIB & STOP JOBLIB SCAN
         USING CVT,OVRR4                                         YM3344
         L     OVRR4,CVTPTR(0)          POINT TO CVT WITH 4      YM3344
         L     OVRR4,CVTLINK            R4=PTR TO LINKLIB DCB    YM3344
         DROP  OVRR4
*    ADD ECB=(OVRR9) OPERAND TO ENSURE MOTHER TASK IS POSTED EVEN IF
*      SUB-TASK ABENDS                                           YM2817
         LA    OVRR9,OVRECB(OVRR12)     POINT TO SEGTAB ECB      YM2817
         ATTACH EP=IEWSZOVR,SM=SUPV,MF=(E,(1)),SF=(E,(15)),        I270X
               KEY=PROP,JSTCB=NO,SZERO=NO,SVAREA=NO,GIVEJPQ=NO, ZA25977X
               DCB=(OVRR4),                                      YM3344X
               ECB=(OVRR9)                                       YM2817
         SPACE
*    ISSUE WAIT FOR SUBTASK TO GET STARTED
         LA    OVRR1,STARTECB(OVRR3)    POINT TO ECB             YM3839
         WAIT  1,ECB=(1)                WAIT FOR SUBTASK         YM3839
         LR    OVRR14,OVRR2             RETRIEVE RETURN ADDR    OY00351
         SR    OVRR15,OVRR15            RETURN CODE
         RETURN
         EJECT
***********************************************************************
*                                                                     *
*           ATTACHED ROUTINE TO PROCESS ASYNC LOAD REQUEST            *
*                                                                     *
*                ENTERED IN USER KEY, SUPERVISOR STATE        @ZA25977*
***********************************************************************
IEWSEGLD LM    OVRR0,OVRR13,SAVEREGS(OVRR1) RESTORE REGS SAVED
*                                           BY ATTACHER.
         OI    FLAGBYTE(OVRR12),SEGFLG      TURN ON SEGLD FLAG @ZA16075
* POST ECB TO ALLOW MAIN TASK TO RESUME & GIVE CONTROL TO USER'S SEGLD
         LA    OVRR9,STARTECB(OVRR3)        POINT TO ECB         YM3839
         MODESET EXTKEY=SUPR                USE KEY OF ECB CORE@ZA25977
         POST  (9)                          POST WITH ECB=ZERO   YM3839
         LR    OVRR9,OVRR8                  GET USER KEY       @ZA25977
         SRL   OVRR9,24                     POSITION FOR USE   @ZA25977
         SPKA  0(OVRR9)                     ENTER USER KEY     @ZA25977
*
         IC    OVRR9,SEGNO(OVRR10)          PICK UP N SEG
         SLL   OVRR9,2                      MULT X 4
         LA    OVRR1,PRFXSIZ(OVRR12,OVRR9)
         TM    3(OVRR1),X'01'               TEST MUST SEG BE LOADED
         BNO   OVLALD04                     BRANCH NO LOAD
         ST    OVRR1,OVRAPTR(OVRR12)        LOCN OF LINE FOR 1ST SEG
         MVC   OVRAPTR(1,OVRR12),SEGNO(OVRR10)
*
*        SET UP TO ENTER FETCH
*
OVLALD03 L     OVRR7,DCBADD(,OVRR12)        GET DCB ADDR       @ZA25985
*                                           REG 8 HAS NOTE LIST@ZA25985
         LNR   OVRR7,OVRR7                  SET ASYNC INDICATOR
         MODESET EXTKEY=SUPR                KEY 0              @ZA25977
         STM   OVRR8,OVRR15,SAVEREGS+4(OVRR3) SAVE REGS OVER FETCH CALL
*
*  ENTER PROGRAM FETCH TO LOAD A SEGMENT. REGISTER SETTINGS -
*
*                        REG 3 - ADDRESS OF WORK AREA
*                        REG 7 - ADDRESS OF DCB
*                        REG 8 - ADDRESS OF NOTE LIST
*                        REG 9 - SEGMENT NO. MULTIPLIED BY 4.
*  ALL REGISTERS ARE VOLATILE IN PROGRAM FETCH EXCEPT REGS 3 AND  6.
*  FETCH RETURN CODE IN REG 15: IF NON-ZERO, AN ERROR HAS OCCURED.
*
         USING CVT,OVRR13
         L     OVRR15,CVTFBOSV
         DROP  OVRR13
         BALR  OVRR14,OVRR15            ***  TO PROGRAM FETCH ***
         LM    OVRR8,OVRR14,SAVEREGS+4(OVRR3) RESTORE REGS       YM2817
         LR    OVRR9,OVRR8              COPY USER KEY          @ZA25977
         SRL   OVRR9,24                 POSITION FOR USE       @ZA25977
         SPKA  0(OVRR9)                 RESUME USER KEY        @ZA25977
         LTR   OVRR15,OVRR15            TEST FOR RETURN CODE     YM2817
         BNZ   OVRLPOST                 RETURN IF R15 NON-ZERO   YM2817
         IC    OVRR9,OVRAPTR(OVRR12)    SEG. NUM. JUST LOADED
         SLL   OVRR9,2
         LA    OVRR10,PRFXSIZ(OVRR12,OVRR9)  SEGTAB LINE
         SR    OVRR9,OVRR9              CLEAR REGISTER           A34604
         IC    OVRR9,0(OVRR10)          GET PSEG
         STC   OVRR9,OVRAPTR(OVRR12)    SAVE IN SEGTAB
         SLL   OVRR9,2
         LA    OVRR10,PRFXSIZ(OVRR12,OVRR9)  SEGTAB LINE
         TM    3(OVRR10),X'01'               TEST MUST SEG BE LOADED
         BO    OVLALD03                      BRANCH YES
OVLALD04 L     OVRR0,ASYNCMST                SIZE OF CORE TO FREE
         LR    OVRR1,OVRR3                   ADDR OF CORE TO FREE
         FREEMAIN  R,LV=(0),A=(1)
         SR    OVRR15,OVRR15
OVRLPOST RETURN ,RC=(15)                                         YM2817
         EJECT
*  AT ENTRY TO OVERL80, REG 13 CONTAINS A SEGMENT NUMBER. IT IS MULTI-
*  PLIED BY 4 AND ADDED TO THE SEGTAB ADDRESS PLUS PREFIX BYTES (24-4)
*  TO GET THE ADDRESS OF THE SEGTAB LINE FOR THE GIVEN SEGMENT. UPON
*  RETURN FROM THIS ROUTINE, THE RESULTING ADDRESS IS IN REG 5.
*
*  THIS SECTION COMPUTES THE ADDRESS OF A LINE IN SEGTAB AND VALIDITY
*    CHECKS IT.
*
OVRL80   SLL   OVRR13,2       MULTIPLY BY 4.
         LA    OVRR7,20(OVRR12,OVRR13)
*
*
*   REGISTER USAGE IS AS FOLLOWS
*        REG 7 CONTAINS ADDR TO CHECK; COPIED TO 5
*        REG 15 RETURN ADDRESS TO ROUTINE'S CALLER
*        REG 14 RETURN ADDRESS TO RESIDENT MODULE
*
OVRL83   MODESET KEYADDR=IEWSUK(,OVRR6),WORKREG=5     USER KEY @ZA25977
         LR    OVRR5,OVRR7
         N     OVRR5,LOBITTST      KEEP ONLY LO 2 BITS         @ZA25977
         BNZ   ABND22D             BIF NOT MULT OF 4           @ZA25977
         LR    OVRR5,OVRR7         RESTORE REG 5               @ZA25977
         NI    0(OVRR5),X'FF'      TOUCH THE STORAGE           @ZA25977
*  IF NO ABEND, THE STORAGE IS USER'S                          @ZA25977
         BR    OVRR15              RETURN                      @ZA25977
LOBITTST DC    F'3'                                            @ZA25977
*
ABND22D  LA    OVRR15,557          ERROR CODE X'22D'
         BR    OVRR14              TO RESIDENT ROUTINE W/ERROR CODE.
         EJECT
*
*  THIS ROUTINE DETERMINES THE REGION FOR A GIVEN SEG.  IT MAKES A
*  LEFT TO RIGHT COMPARISON BETWEEN THE GIVEN SEGMENT AND BYTES 8,10,12
*  AND 14 OF SEGTAB WHICH CONTAIN THE NO. OF THE HIGHEST NO. SEGMENT
*  WHICH CAN BE LOADED IN A REGION (MAXSEG). WHEN THE GIVEN SEGMENT
*  NO. IS LESS THAN OR EQUAL TO A MAXSEG, THE GIVEN SEGMENT IS IN THAT
*  REGION. THE REGION POINTER IS OUTPUT IN REG 5.
*  THE POINTER TO THE MAXSEG IS CONSIDERED TO GIVE THE REGION.
*
*
OVRL88   MODESET KEYADDR=IEWSUK(,OVRR6),WORKREG=3     USER KEY @ZA25977
         LA    OVRR3,4                   LOOP COUNT.
         LA    OVRR5,6(OVRR12)           ADDRESS OF FIRST MAXSEG - 2
OVRL89   LA    OVRR5,2(OVRR5)
         CLC   SAVEWD2(1,OVRR6),0(OVRR5) COMP NSEG TO MAX SEG
         BNHR  OVRR15                    IF NSEG LESS OR EQ TO MAXSEG.
         BCT   OVRR3,OVRL89
OVRL90   LA    OVRR15,301                ERROR CODE X'12D'.
         BR    OVRR14                    RETURN WITH ERROR CODE.
         SPACE 10
IEWSFM   DC    X'E9000008'                                     @ZA17987
*
OVRLMNST DS    0F                        MS REQUIREMENT (SYNCRONOUS)
         DC    AL1(FWASP)                -SUBPOOL NUMBER
         DC    AL3(FWALN)                -FETCH WORK AREA
*
ASYNCMST DS    0F                        MS REQ FOR ASYNC LOAD
         DC    AL1(FWASTPSP)            -SUBPOOL NUMBER
         DC    AL3(FWALN+SAVLN+LSTLN+ASYNCECB)  FETCH WORK AREA  YM2817
*                              PLUS ECB/ REG SAVE / LIST AREAS.  YM3839
*
         DC    48XL1'00'                 PATCH AREA              YM2817
         EJECT
         IKJTCB
         EJECT
         IHACDE                                                @ZA25985
         END
*/*MVMOVRLY:     CHART (SEQ) M.NIKOLAI */
*/*IEWSWOVR:     E ENTRY TO NON RES SUPERVISOR */
*/*              P SET BASE REGISTER */
*/*              D (YES,,NO,IEWSEGLD) ENTRY FROM RES MODULE? */
*/*              P SAVE NUMBER OF REQUESTED SEGMENT IN SVRB */
*/*              S OVRL88: FIND OVERLAY REGION FOR SEGMENT */
*/*              P SAVE REGION POINTER IN SVRB */
*/*              P VERIFY NOTE LIST ADDRESS */
*/*              S OVRL80: VALIDITY CHECK SET UP ROUTINE */
*/*              D (YES,,NO,OVRL10) SEG BEING LOADED? */
*/*              D (NO,OVRL11,YES,OVRL68) SEGLD REQUEST? */
*/*OVRL10:       D (YES,,NO,OVRL15) SEGLD IN PROGRESS? */
*/*              P TURN ON CONTINUE FLAG IN SEGTAB */
*/*OVRL11:       S WAIT: WAIT ON ECB IN SEGTAB */
*/*              P CLEAR ECB IN SEGTAB */
*/*              P DETACH SUB TASK TCB */
*/*              D (YES,,NO,OVRL70) RETURN CODE = 0? */
*/*OVRL115:      P TURN OFF SEGLD INDICATOR IN SEGTAB */
*/*              P GET POINTER TO LOWEST SEGMENT LOADED */
*/*OVRL12:       P MARK SEGMENT AS LOADED IN MAIN STORAGE */
*/*              P GET ITS PREVIOUS SEGMENT NUMBER */
*/*              D (NO,,YES,OVRL12) MARKED TO BE LOADED? */
*/*              D (YES,,NO,OVRL58) CONTINUE FLAG ON? */
*/*              P TURN OFF CONTINUE FALG IN SEGTAB */
*/*OVRL15:       D (NO,,YES,OVRL25) CALL OR BRANCH? */
*/*              P SET LOOP COUNT = THE NUMBER OF REQUESTED SEGMENT */
*/*OVRL18:       D (NO,,YES,OVRL20) PREVIOUS SEG NUM ZERO? */
*/*              P DEFINE: RSEG=REQUESTING SEGMENT, NSEG=REQUESTED
*/*                SEGMENT */
*/*              P DEFINE: PSEG=PREVIOUS SEG NUM FOR NSEG */
*/*              D (NO,,YES,OVRL25) RSEG = PSEG? */
*/*              S OVRL80: GET SEGTAB LINE ADDRESS FOR PSEG */
*/*              D (YES,OVRL90,NO,OVRL18) LOOP COUNT = ZERO? */
*/*OVRL20:       S OVRL88: GET REGION NUMBER OF RSEG */
*/*              P COMPARE NSEG REGION NUMBER TO RSEG REGION NUMBER */
*/*              D (YES,,NO,OVRL25) EQUAL? */
*/*              D (NO,,YES,OVRL68) THIS REQUEST SEGLD? */
*/*              P INSERT ERROR CODE X'425' */
*/*              R RETURN TO RESIDENT SUPERVISOR */
*/*OVRL25:       P OSEG = NSEG IN SEGTAB */
*/*OVRL30:       D (NO,,YES,OVRL40) OSEG > NSEG? */
*/*              D (NO,,YES,OVRL50) OSEG = NSEG? */
*/*              S OVRL80: CHECK SEGTAB LINE ADDRESS */
*/*              P SET LOAD INDICATOR X'01' IN SEGTAB ENTRY */
*/*              P (,OVRL30) GET SEG NUMBER OF NEXT HIGHER SEGEMENT */
*/*OVRL40:       P OBTAIN SEGTAB ADDRESS FOR THE SEGMENTS BEING
*/*                OVERLAID */
*/*              S OVRL80: VALIDITY CHECK THE ADDRESS */
*/*              P SET THE NOT LOADED INDICATOR X'03' IN SEGTAB */
*/*              D (NO,,YES,OVRL43) CALLER CHAIN EXIST? */
*/*OVRL41:       P (,OVRL30) CHECK IF NEXT HIGHER SEGMENT WILL BE
*/*                OVERLAID */
*/*OVRL43:       S OVRL83: VAL CHECK CALLER CHAIN */
*/*              P RESET THE UNCONDITIONAL BRANCH IN ENTAB TO POINT
*/*                TO THE SVC 45 */
*/*              D (NO,,YES,OVRL41) PREV CALLER FLD = 0? */
*/*              P SET PREVIOUS CALLER FIELD TO ZERO */
*/*              P (,OVRL43) POINT TO ENTAB ENTRY FOR PREV CALLER */
*/*OVRL50:       D (NO,,YES,OVLALD01) SEGLD? */
*/*              S GETMAIN: SPACE FOR FETCH WORK AREA */
*/*OVRL52:       P POINT TO NSEG SEGTAB ENTRY */
*/*              D (YES,,NO,OVRL57) IS SEG TO BE LOADED? */
*/*              P SAVE REGISTERS FOR ENTRY TO FETCH */
*/*              P GET ADD OF DCB AND NOTELIST FOR FETCH */
*/*OVRL55:       S FETCH: GO TO PROG FETCH TO LOAD SEGMENT */
*/*              D (YESS,,NO,OVRL70) FETCH RETURN OK? */
*/*              P SET SEGMENT LOADED IN SEGTAB X'02' */
*/*              P (,OVRL52) GET NEXT SEGMENT IN PATH */
*/*OVRL57:       S FREEMAIN: FETCH WORK AREA */
*/*OVRL58:       D (YES,,NO,OVRL60_) PROG IN TEST? *?
*/*              P ISSUE SVC 61 */
*/*OVRL60:       D (NO,,YES,OVRL68) SEGWT? */
*/*              D (NO,,YES,OVRL63) REQ FROM ROOT ENTAB? */
*/*              S OVRL88: GET REQUESTING ENTABS REGION */
*/*              P COMPARE NSEG REGION TO RSEG REGION */
*/*              D (YES,,NO,OVRL68) REGIONS EQUAL? */
*/*OVRL63:       P POINT TO SEGTAB AND SEE IF CALLER CHAIN EXISTS */
*/*              D (YES,,NO,OVRL65) CHAIN EXIST? */
*/*              P MOVE ADD IN SEGTAB TO PCALLER FLD IN ENTAB */
*/*OVRL65:       P STORE ENTAB ADDRESS TO CALLER FLD IN SEGTAB */
*/*OVRL66:       P SET BRANCH IN ENTAB TO BYPASS SVC 45 INSTRUCTION */
*/*OVRL68:       R RETURN TO RES SUPERVISOR */
*/*OVRL70:       D (YES,,NO,OVRL71) FETCH RET CODE = 'F'? */
*/*              P CHANGE CODE FROM 'F' TO '3' */
*/*OVRL71:       P MERGE ERROR CODE WITH 'X2D' */
*/*              R RETURN TO RES SUPERVISOR */
*/*OVLALD01:     S GETMAIN: SPACE FOR FETCH WORK AREA */
*/*              P FORCE LINKLIB SEARCH FOR CORRECT COPY OF IEWSZOVR */
*/*              P CLEAR ECB IN SEGTAB */
*/*              S ATTACH: ATTACH IEWSZOVR TO PROCESS SEGLD REQUEST */
*/*              S WAIT: WAIT FOR SUBTASK TO START */
*/*              R RETURN TO RES SUPERVISOR */
*/*IEWSEGLD:     S POST: POST MAIN TASK TO GIVE CONTROL TO USER */
*/*              P PICK UP SEGTAB ENTRY FOR NSEG */
*/*              D (YES,,NO,OVLALD04) SEG TO BE LOADED? */
*/*              P TURN ON SEGLD FLAG IN SEGTAB */
*/*OVLALD03:     S FETCH: LOAD THIS SEGMENT */
*/*              D (YES,,NO,OVRLPOST) FETCH RETURN OK? */
*/*              P PICK UP NEXT HIGHER SEGMENT */
*/*              D (NO,,YES,OVLALD03) SEG TO BE LOADED? */
*/*OVLALD04:     S FREEMAIN: FETCH WORK AREA */
*/*OVRLPOST:     R RETURN */
*/*OVRL80:       E VALIDITY CHECK SET UP ROUTINE */
*/*              P POINT TO SEGTAB ENTRY FOR SEGMENT */
*/*OVRL83:       P SAVE REGISTERS ACCROSS VAL CHECK ROUTINE */
*/*              P OBTAIN ADDRESS OF VALIDITY CHECK ROUTINE */
*/*              P GET LOCAL LOCK */
*/*              S VAL CHECK: CHECK THE ADDRESS */
*/*              P RESTORE THE BASE REGISTER */
*/*              D (NO,,YES,OVRL85) VAL CHECK OK? */
*/*              P INDICATE BAD RETURN FROM VAL CHK */
*/*OVRL85:       P RELEASE THE LOCAL LOCK */
*/*              P RESTORE THE REGISTERS */
*/*              D (NO,,YES,%A002) ADD CHECK OK? */
*/*              P LOAD ERROR CODE X'22D' */
*/*              R RETURN TO RESIDENT MODULE */
*/*%A002:        R RETURN TO CALLER */
*/*OVRL88:       E OVERLAY REGION SUBROUTINE */
*/*              P INITIALIZE LOOP COUNT TO 4 */
*/*              P POINT TO FIRST MAXSEG MINUS 2 (SEGTAB+6) */
*/*OVRL89:       P POINT TO NEXT MAXSEG (THIS MAXSEG+2) */
*/*              P DETERMINE IF THIS SEGMENT IS IN THIS REGION */
*/*              D (NO,,YES,%A001) SEGMENT IN REGION? */
*/*              P DECREMENT LOOP COUNT BY 1 */
*/*              D (YES,,NO,OVRL89) LOOP COUNT = 0? */
*/*OVRL90:       P LOAD ERROR CODE X'12D' */
*/*              R RETURN TO RESIDENT MODULE */
*/*%A001:        R RETURN TO CALLER */
*/*IEWSWOVR:     END */
*/* DUMMY END CARD TO SATISFY H ASM WHEN IN BATCH MODE...      @ZA25977
                 END ,     */
