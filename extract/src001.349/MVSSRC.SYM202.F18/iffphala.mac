         TITLE 'GLABEL - GRID LABEL ROUTINE'                          *
*STATUS. CHANGE LEVEL 0                                               *
*                                                                     *
*FUNCTION/OPERATION. GLABEL  GENERATES GRAPHIC ORDERS THAT WILL LABEL *
*   EACH DIVISION OR LOG CYCLE OF AN X OR Y AXIS OF A RECTANGULAR     *
*   GRID WITH ALPHAMERIC CHARACTERS AND IF SPECIFIED PLACE A TICK     *
*   MARK BETWEEN THE AXIS LABELED AND THE LABEL ITSELF.               *
*                                                                     *
*ENTRY POINTS. GLABEL VIA CALL OR LINK MACRO    ALIAS NAME IFFPHALA   *
*                                                                     *
*INPUT. OUTPUT CONTROL BLOCK POINTER AND A PARAMETER TABLE            *
*                                                                     *
*OUTPUT. A STRING OF GRAPHIC ORDERS STORED IN THE GDOA                *
*                                                                     *
*EXTERNAL ROUTINES. N/A                                               *
*                                                                     *
*EXITS-NORMAL. COMPLETION OF TASK. EXIT VIA RETURN MACRO              *
*     -ERROR. HEXADECIMAL 4,8,C,10,14,18, OR 20 IN REG 15             *
*   IMMEDIATE RETURN. EXIT VIA RETURN MACRO                           *
*     -ERROR. HEXADECIMAL 28 IN REG 15   DOES NOT RETURN IMMEDIATELY  *
*   COMPLETION OF TASK. EXIT VIA RETURN MACRO                         *
*                                                                     *
*TABLES/WORK AREAS. USER SPECIFIED PARAMETER TABLE, XYLIM TABLE AND   *
*   WORK AREA                                                         *
*                                                                     *
* ATTRIBUTES. READ ONLY, REENTRANT                                    *
         EJECT
IFFPHALA CSECT                          GLABEL
*0669                                                              7468
         ENTRY GLABEL
GLABEL   SAVE  (14,12),T,*
         BALR  9,0
         USING *,9
         USING PARTAB,PATREG
         USING XYLIMT,XYLREG
         USING WRKAREA,WKAREG
         LM    OBPREG,PATREG,0(1)       GET ADDR OF OCBP,PARTAB
         L     WKAREG,4(OBPREG)                     WRKAREA
         L     OABREG,0(OBPREG)                     OACB
         L     XYLREG,0(PATREG)                     XYLIM TABLE
*  SAVE MASK BITS AS SET BY USER
         ST    9,MASKSV
         SR    WRKREG,WRKREG
         SPM   WRKREG
         LM    XREG,YREG,UI             LOAD UI,VC OR VI,UC
         SR    15,15                    RESET ERR CODE REG
         ST    15,ERRCOUNT              RESET ERR COUNT
         BAL   LINREG,XYLCHK
         CLI   F,C'F'                   TEST FOR FLOAT
         BE    FLTLEG
         CLI   F,C'B'                  TEST FOR FIX
         BE    TESTS
         BAL   LINREG,ERR40
TESTS    CLI   S,C'S'                   TEST FOR SCALE
         BE    FIXSCAL
         CLI   S,C'N'                   TEST FOR NO SCALE
         BE    TESTUV
         BAL   LINREG,ERR40
*   TEST  UC,VC FOR LESS THAN ZERO AND GREATER THAN 4095
TESTUV   C     YREG,HIGH
         BH    ERR8RET
         C     YREG,ZERO
         BL    ERR8RET
*   TEST  UI,VI   FOR  0-4095 LIMITS
         C     XREG,ZERO
         BNH   ERR8RET
         C     XREG,HIGH
         BH    ERR8RET
         LH    WRKREG,LGAP
         C     WRKREG,ZERO              TEST LGAP FOR LESS THAN ZERO
         BL    ERR20RET
         LH    WRKREG,FLENGTH
         C     WRKREG,ZERO              TEST FLENGTH LESS THAN ZERO
         BL    ERR20RET
         EJECT
*   TEST  AXIS  TO  BE  LABELED
         CLI   TYPE,C'Y'
         BE    TICKGAP
         CLI   TYPE,C'X'
         BE    SIZETEST
         B     ERR20RET
SIZETEST CLI   SIZE,C'B'
         BE    BASIC
         CLI   SIZE,C'L'
         BE    LARGE
BASIC    LA    ODDREG,56
         B     LENGTH
LARGE    LA    ODDREG,84
LENGTH   MH    ODDREG,FLENGTH
         CR    ODDREG,XREG              COMPARE TO INC X OR Y
         BL    TICKGAP
         B     ERR20RET
TICKGAP  LH    WRKREG,LTICK
         CH    WRKREG,LGAP
         BH    LTICKERR
         C     WRKREG,ZERO
         BE    TESTFL                   NO TICK IF LTICK = 0
         BH    STORGEVM
LTICKERR BAL   LINREG,ERR40
TESTFL   LH    WRKREG,FLENGTH
         C     WRKREG,ZERO
         BE    RET
*   TEST CHARACTER SIZE B OR L
         CLI   SIZE,C'B'
         BE    CHBASIC
         CLI   SIZE,C'L'
         BE    CHLARGE
         BAL   LINREG,ERR40
CHBASIC  LA    ODDREG,56                CWTH  BASIC
         LA    EVEREG,80                CHGTH
         MVC   YE,GFSCB
         B     TESTTYPE
CHLARGE  LA    ODDREG,84                CWTH LARGE
         LA    EVEREG,120               CHGTH
         MVC   YE,GFSCL
TESTTYPE CLI   TYPE,C'X'
         BE    COMPUTEX
         B     COMPUTEY
         EJECT
*   XI=X1-((FLENGTH-1)*CWTH)/2)     YI=VC-LGAP-(CHGT/2)
COMPUTEX LH    WRKREG,FLENGTH
         S     WRKREG,ONE
         STH   WRKREG,WRKAREA
         MH    ODDREG,WRKAREA
         SRA   ODDREG,1                 /2
         LH    WRKREG,X1
         SR    WRKREG,ODDREG            =XI
         BM    ERR20RET
         STH   WRKREG,XI
         SH    YREG,LGAP                VC-LGAP
         SRA   EVEREG,1                 CWTH/2
         SR    YREG,EVEREG              =YI
         BM    ERR20RET
         STH   YREG,YI
         B     LOADADDR
*    XI =UC-LGAP-(FLENGTH*CWTH)   YI=Y1
COMPUTEY MH    ODDREG,FLENGTH
         SH    YREG,LGAP
         SR    YREG,ODDREG
         BM    ERR20RET
         STH   YREG,XI
         MVC   YI,Y1
LOADADDR MVC   ADDRESS,DATA
         MVC   XS,GEVM
         MVC   GOMODE,GEVM
STORLABL MVC   YS,XI
         MVC   XE,YI
         OI    YS,X'40'                 SET BLANK BIT
         LA    ADDREG,XS
         LA    CNTREG,8
         BAL   LINREG,STORSAVE
         L     ADDREG,ADDRESS
         L     WRKREG,ADDRESS
         AH    WRKREG,FLENGTH           ADDRESS+FLENGTH
         ST    WRKREG,ADDRESS           =NEW ADDRESS
         LH    CNTREG,FLENGTH
         BAL   LINREG,STORSAVE
         MVC   GOMODE,YE
         TM    FLENGTH+1,X'01'          TEST FOR  FL=EVEN NUMBER
         BZ    NEXTINC
         LA    ADDREG,ZERO
         LA    CNTREG,1
         BAL   LINREG,STORSAVE
NEXTINC  CLI   TYPE,C'X'
         BE    XINC
         LH    WRKREG,YI                YI
         AR    WRKREG,XREG                +YINC
         STH   WRKREG,YI                =NEW YI
         CH    WRKREG,Y2
         BH    RET
         B     STORLABL
XINC     LH    WRKREG,XI
         AR    WRKREG,XREG
         STH   WRKREG,XI
         CH    WRKREG,X2
         BH    RET
         B     STORLABL
         EJECT
*   STORE GEVM ORDER IN GDOA
STORGEVM LA    CNTREG,2
         LA    ADDREG,GEVM
         MVC   GOMODE,GEVM
         BAL   LINREG,STORSAVE
         LR    WRKREG,YREG              UC OR VC
         SH    WRKREG,LTICK             -LTICK=XE OR YE
         BM    ERR20RET                XE OR YE OFF SCREEN
         CLI   TYPE,C'X'
         BE    XAXIS
         STH   YREG,XS                  XS=UC
         MVC   YS,Y1                    YS=Y1
         STH   WRKREG,XE                XE=XS-LTICK
         MVC   YE,Y1                    YE=YS
         B     BLANKBIT
XAXIS    MVC   XS,X1                    XS=X1
         STH   YREG,YS                  YS=VC
         MVC   XE,X1                    XE=XS
         STH   WRKREG,YE                YE=YS-LTICK
BLANKBIT OI    XS,X'40'
         LA    CNTREG,8
         LA    ADDREG,XS
STORTICK BAL   LINREG,STORSAVE
         CLI   TYPE,C'X'
         BE    XAXIS2
         LH    WRKREG,YS                GET  YS
         AR    WRKREG,XREG              +INC
         STH   WRKREG,YS                NEW YS
         STH   WRKREG,YE                NEW YE
         CH    WRKREG,Y2
         BH    TESTFL
         B     STORTICK
XAXIS2   LH    WRKREG,XE                GET  XS (XE)
         AR    WRKREG,XREG              +INC
         STH   WRKREG,XS                NEW XS
         STH   WRKREG,XE                NEW XE
         CH    WRKREG,X2
         BH    TESTFL
         B     BLANKBIT
         EJECT
*   LOAD ERROR CODE IN REG 15
ERR40    LA    15,40                    PARAMETER ERROR - DOES NOT RET
         B     ERRCNT
ERR24RET LA    15,24                    USERS OVF HAS NOT RESET OLP
         B     ERRCNTR
ERR20RET LA    15,20                    PARAMETER ERROR - RET
         B     ERRCNTR
ERR16RET LA    15,16                    U1,V1 GREATER THAN U1,U2
         B     ERRCNTR
ERR12RET LA    15,12                    FLT PT ERROR DETECTED
         B     ERRCNTR
ERR8RET  LA    15,8                     U,V LIMIT ERROR AFTER SCALE
         B     ERRCNTR
ERR4RET  LA    15,4                     XYLIM X1,Y1  X2,Y2 LIMIT ERROR
ERRCNTR  LA    LINREG,RET
ERRCNT   L     TEMREG,ERRCOUNT
         A     TEMREG,ONE
         ST    TEMREG,ERRCOUNT
         BR    LINREG
*   TEST ERROR COUNT IN WORK AREA AND SET BIT
*   IN SIGN POSITION OF REG 15 IF MULTIPLE ERRORS
RET      LA    TEMREG,1
         C     TEMREG,ERRCOUNT
         BL    SETBIT
* RESTORE PROGRAM MASK TO SETTING UPON ENTRY
RETMACRO L     WRKREG,MASKSV
         SPM   WRKREG
         RETURN (14,12),T,RC=(15)
SETBIT   O     15,MZERO
         B     RETMACRO
         EJECT
*   XYLCHK  SUBROUTINE
*   CHECK X1,X2,Y1,Y2 LIMITS GREATER THAN 0 AND LESS THAN 4095
*   CHECK X1 LESS THAN X2 , Y1 LESS THAN Y2
*   ADDRESSOF XYLIM TABLE IN XYLREG BEFORE BAL
XYLCHK   LA    CNTREG,4                 SET  LOOP  COUNT
         LA    INXREG,0                 SET  INDEX
XYLLOOP  LH    WRKREG,X1(INXREG)        LOAD X1,Y1,X2,Y2
         C     WRKREG,ZERO
         BL    ERR4RET
         C     WRKREG,HIGH
         BH    ERR4RET
         A     INXREG,TWO
         BCT   CNTREG,XYLLOOP
         CLC   X1,X2
         BNL   ERR4RET
         CLC   Y1,Y2
         BNL   ERR4RET
         BR    LINREG
*   SAVE REG IN WORK AREA BEFORE BAL TO STORE
STORSAVE STM   1,15,PORSAVE
         BAL   LINREG,STORE
         LM    1,15,PORSAVE
         BR    LINREG
FLTLEG   CLI   S,C'S'                   TEST FOR SCALE
         BE    SCALFLT
         CLI   S,C'N'                   TEST FOR NO SCALE
         BE    FCONVERT
         BAL   LINREG,ERR40
FCONVERT LR    VALREG,XREG              FIXCONVERT -(CONVERT FLOAT
         BAL   LINREG,FIXCONV           TO FIX)
         LR    XREG,VALREG
         LR    VALREG,YREG
         BAL   LINREG,FIXCONV
         LR    YREG,VALREG
         B     TESTUV
         EJECT
*   CONVERT FLOATING POINT TO FIXED POINT VALUES
*   TEST FLOATING POINT INPUT VALIDITY
*   VALREG CONTAINS THE VALUE TO BE CONVERTED
FIXCONV  ST    VALREG,0(WKAREG)         STORE FLT VAL IN WORKAREA
         LE    6,0(WKAREG)              LOAD VALUE TO FLOAT REG
         N     VALREG,FCHAR             CHECK  CHARACTERISTIC
         BE    FLERR1                   POSSIBLE ERROR
FCHECOK  AU    6,X6                     ADD EXPONENT TO FLOAT REG
         STE   6,0(WKAREG)              STORE CONV IN WORKAREA
         L     VALREG,0(WKAREG)         LOAD TO GR
         N     VALREG,XZERO             DROP CHARACTERISTIC
         LTR   VALREG,VALREG            IS VAL NEGATIVE
         BNL   NOTNEG
         N     VALREG,NSIGN             DROP SIGN
         LNR   VALREG,VALREG            TAKE TWO'S COMPLIMENT
NOTNEG   BR    LINREG                   RETURN TO NSI AFTER BAL
FLERR1   CE    6,ZERO                   IS VAL ZERO
         BE    FCHECOK
         B     ERR12RET
SCALFLT  LA    CONREG,4                 LOOP  COUNT
         LA    INXREG,0                 SET INDEX
         LA    WRKREG,0
FLTLOOP  LH    VALREG,X1(INXREG)        GET X1,Y1,X2,Y2 VALUES
         BAL   LINREG,FLTCONV
         ST    VALREG,4(WKAREG,WRKREG)
         A     INXREG,TWO
         A     WRKREG,FOUR
         BCT   CONREG,FLTLOOP
*    FLOATING POINT SPECIFIED - TEST FOR CHARACTERISTIC ZERO AND
*    FRACTION NON ZERO. OF ALL U,V VALUES
         L     VALREG,U1
         BAL   LINREG,FIXCONV
         L     VALREG,U2
         BAL   LINREG,FIXCONV
         L     VALREG,V1
         BAL   LINREG,FIXCONV
         L     VALREG,V2
         BAL   LINREG,FIXCONV
         L     VALREG,UI
         BAL   LINREG,FIXCONV
         L     VALREG,VC
         BAL   LINREG,FIXCONV
         EJECT
*   SUBROUTINE TO SCALE FLOATING POINT VALUES
*   SCALED  U,V VALUES LOADED IN XREG AND YREG
FLTSCAL  CLI   TYPE,C'X'
         BE    FLTSCALX
*   (Y2-Y1)*VI/V2-V1)= SCALED INCREMENT (YINC)
*   (UC-U1)*(X2-X1)/(U2-U1)+X1=XC
         LE    0,16(WKAREG)             Y2
         SE    0,8(WKAREG)              -Y1
         BC    13,ERR4RET               BRANCH ON OVF, MINUS OR ZERO
         ME    0,VI                     *VI
         LE    2,V2                     V2
         SE    2,V1                     -V1
         BC    13,ERR16RET              BRANCH ON OVF, MINUS OR ZERO
         DER   0,2
         STE   0,0(WKAREG)
         L     XREG,0(WKAREG)           XREG CONTAINS SCALED FP WI
         LE    0,UC                     UC
         SE    0,U1                       -U1
         LE    2,12(WKAREG)             X2
         SE    2,4(WKAREG)                -X1
         BC    13,ERR4RET               BRANCH ON OVF, MINUS OR ZERO
         MER   0,2
         LE    2,U2                     U2
         SE    2,U1                       -U1
         BC    13,ERR16RET              BRANCH ON OVF, MINUS OR ZERO
         DER   0,2
         AE    0,4(WKAREG)              +X1
         STE   0,0(WKAREG)
         L     YREG,0(WKAREG)           SCALED FLOATING UC IN YREG
         B     FCONVERT
*   (X2-X1)*UI/U2-U1)= SCALED INCREMENT (XINC)
*   (VC-V1)*(Y2-Y1)/(V2-V1)+Y1=YC
FLTSCALX LE    0,12(WKAREG)             X2
         SE    0,4(WKAREG)              -X1
         BC    13,ERR4RET               BRANCH ON OVF, MINUS OR ZERO
         ME    0,UI                     *UI
         LE    2,U2                     U2
         SE    2,U1                     -U1
         BC    13,ERR16RET              BRANCH ON OVF, MINUS OR ZERO
         DER   0,2
         STE   0,0(WKAREG)
         L     XREG,0(WKAREG)           XREG CONTAINS SCALED FP UI
         LE    0,VC                     VC
         SE    0,V1                       -V1
         LE    2,16(WKAREG)             Y2
         SE    2,8(WKAREG)                -Y1
         BC    13,ERR4RET               BRANCH ON OVF, MINUS OR ZERO
         MER   0,2
         LE    2,V2                     V2
         SE    2,V1                       -V1
         BC    13,ERR16RET              BRANCH ON OVF, MINUS OR ZERO
         DER   0,2
         AE    0,8(WKAREG)              +Y1
         STE   0,0(WKAREG)
         L     YREG,0(WKAREG)           SCALED FLOATING VAL VC IN YREG
         B     FCONVERT
         EJECT
*    CONVERT  FIXED  POINT  TO  FLOATING  POINT  VALUES
*    TEST FLOATING POINT INPUT VALIDITY
*    VALREG CONTAINS THE VALUE TO BE CONVERTED
FLTCONV  O     VALREG,X6                EXPONENT OF 6
         ST    VALREG,0(WKAREG)
         LE    0,0(WKAREG)              LOAD FLOATING PT REG
         AE    0,X6                     NORMALIZE
         STE   0,0(WKAREG)
         L     VALREG,0(WKAREG)         FLOAT PT VAL IN VALREG
         BR    LINREG
         EJECT
*   SUBROUTINE TO SCALE   FIXED  POINT  VALUES
*   SCALED  U,V VALUES LOADED IN  XREG AND YREG  (FIXED POINT)
FIXSCAL  CLI   TYPE,C'X'
         BE    FIXSCALX
*   (Y2-Y1)*VI/V2-V1)= SCALED INCREMENT (YINC)
*   (UC-U1)*(X2-X1)/(U2-U1)+X1=XC
         LH    ODDREG,Y2                Y2
         SH    ODDREG,Y1                -Y1
         BC    13,ERR4RET               BRANCH ON OVF, MINUS OR ZERO
         SR    EVEREG,EVEREG            ZERO EVEN REG
         MR    EVEREG,XREG              *VI
         L     XREG,V2                  V2
         S     XREG,V1                    -V1
         BC    13,ERR16RET              BRANCH ON OVF, MINUS OR ZERO
         SR    EVEREG,EVEREG
         DR    EVEREG,XREG
         LR    XREG,ODDREG              YINC IN XREG
         S     YREG,U1                  UC-U1
         LR    ODDREG,YREG
         LH    YREG,X2                  X2
         SH    YREG,X1                    -X1
         BC    13,ERR4RET               BRANCH ON OVF, MINUS OR ZERO
         SR    EVEREG,EVEREG
         MR    EVEREG,YREG
         L     YREG,U2                  U2
         S     YREG,U1                    -U1
         BC    13,ERR16RET              BRANCH ON OVF, MINUS OR ZERO
         SR    EVEREG,EVEREG
         DR    EVEREG,YREG
         AH    ODDREG,X1                +X1
         LR    YREG,ODDREG              SCALED VC IN YREG
         B     TESTUV
*   (X2-X1)*UI/U2-U1)= SCALED INCREMENT (XINC)
*   (VC-V1)*(Y2-Y1)/(V2-V1)+Y1=YC
FIXSCALX LH    ODDREG,X2
         SH    ODDREG,X1                -X1
         BC    13,ERR4RET               BRANCH ON OVF, MINUS OR ZERO
         SR    EVEREG,EVEREG            ZERO EVEN REG
         MR    EVEREG,XREG              * UI
         L     XREG,U2                  U2
         S     XREG,U1
         BC    13,ERR16RET              BRANCH ON OVF, MINUS OR ZERO
         SR    EVEREG,EVEREG            ZERO EVEN REG
         DR    EVEREG,XREG
         LR    XREG,ODDREG              SCALED U VALUE IN XREG
         S     YREG,V1                  VC
         LR    ODDREG,YREG
         LH    YREG,Y2                  Y2
         SH    YREG,Y1                    -Y1
         BC    13,ERR4RET               BRANCH ON OVF, MINUS OR ZERO
         SR    EVEREG,EVEREG
         MR    EVEREG,YREG
         L     YREG,V2                  V2
         S     YREG,V1                    -V1
         BC    13,ERR16RET              BRANCH ON OVF, MINUS OR ZERO
         SR    EVEREG,EVEREG
         DR    EVEREG,YREG
         AH    ODDREG,Y1
         LR    YREG,ODDREG
         B     TESTUV
         EJECT
* STORE GRAPHIC DATA IN GDOA FOR POR
* INPUT TO SUBROUTINE
*   CNTREG = NUMBER OF BYTES OF GRAPHIC DATA TO STORE
*   ADDREG = ADDRESS OF THE GRAPHIC DATA
*   WKAREG = REGISTER 1 MUST CONTAIN THE WORKAREA ADDRESS
*   OABREG = ADDRESS OF OACB
STORE    SR    PASREG,PASREG            CLEAR OVERFLOW PASS INDICATOR
STORE1   L     OLPREG,16(0,OABREG)      ADDRESS OF OLP FROM OACB
         LR    WRKREG,CNTREG            LOAD BYTES TO MOVE
* CALCULATE ADDRESSES BASED ON N VALUE AND SIZE OF GDOA
STORE2   AR    OLPREG,WRKREG            OLP ADDRESS PLUS N VALUE
         LA    TEMREG,4
         AR    TEMREG,OLPREG            OLP PLUS N PLUS 4
         L     SLOREG,0(OABREG)         SLOA ADDRESS
         A     SLOREG,4(OABREG)         ADD LOA EQUALS TOTAL GDOA
         L     OLPREG,16(0,OABREG)      RESET INITIAL OLP ADDRESS
         CR    TEMREG,SLOREG
         BNH   OK                       ROOM FOR DATA
* NOT ENOUGH ROOM TO STORE ALL OF THE DATA-DETERMINE AMOUNT TO STORE
         SR    TEMREG,SLOREG            EQUAL BYTES-CAN'T STORE
         SR    WRKREG,TEMREG            NUMBER OF BYTES CAN STORE
* ANY BYTES TO STORE
         C     WRKREG,ZERO
         BNH   STORE4                   LESS OF EQUAL TO ZERO
         LH    TEMREG,H2A02
         CH    TEMREG,GOMODE
         BH    STORE3A
         LH    TEMREG,H0003
         NR    TEMREG,WRKREG
         BM    STORE4      GO TO USER OVERFLOW ROUTINE (HALA)      7468
STORE3A  SR    CNTREG,WRKREG       BYTES REMAINING
         BAL   INTLNK,STORE6            LINK INTERNALLY
STORE3   LA    PASREG,1                 SET PASS INDICATOR
* STORE REGISTERS IN WORKAREA
         STM   0,15,0(WKAREG)           SAVE REGISTERS IN WORKAREA
         L     15,8(0,OABREG)           OVER FLOW ADDRESS
         LM    2,12,28(13)              RELOAD USER'S REGISTERS
         BALR  14,15                    LINK TO ROUTINE-SET RETURN
         LM    0,15,0(WKAREG)           RELOAD FROM WORKAREA
         B     STORE1                   GET NEW OLP ADDRESS-CONTINUE
* NO SPACE AVAILABLE
STORE4   C     PASREG,ONE               WAS A TRANSFER TO OVERFLOW MADE
         BL    STORE3                   NO
* SET ERROR CODE AND RETURN TO POR-LEAVE POR WITH RETURN MACRO
         B     ERR24RET
OK       BAL   INTLNK,STORE6            LINK INTERNALLY
         BR    LINREG
STORE6   LA    TEMREG,255               SET REG. EQUAL TO 255
STORE6A  CR    WRKREG,TEMREG            IS AMOUNT TO MOVE OVER 255
         BH    STORE7                   YES
         LR    TEMREG,WRKREG
         S     TEMREG,ONE               COMPENSATE FOR EXTRA BYTE
         EX    TEMREG,MOVE              MOVE GRAPHIC DATA
         AR    OLPREG,WRKREG            UPDATE OLP ADDRESS
         AR    ADDREG,WRKREG            UPDATE DATA ADDR
         ST    OLPREG,16(0,OABREG)      STORE NEW OLP ADDRESS
         BR    INTLNK                   RETURN INTERNALLY
STORE7   LR    SLOREG,TEMREG
         S     SLOREG,ONE               COMPENSATE FOR EXTRA BYTE
         EX    SLOREG,MOVE              MOVE GRAPHIC DATA
         AR    OLPREG,TEMREG            UPDATE OLP ADDRESS
         AR    ADDREG,TEMREG            UPDATE INPUT ADDRESS
         SR    WRKREG,TEMREG           REDUCE BY 255
         B     STORE6A                  MAKE NEXT COMPARISON
MOVE     MVC   0(0,OLPREG),0(ADDREG)    MOVE DATA TO GDOA
         EJECT
ZERO     DC    F'0'
ONE      DC    F'1'
TWO      DC    F'2'
HIGH     DC    F'4095'
FOUR     DC    F'4'
H2A02    DC    X'2A02'
H0003    DC    H'0003'
FCHAR    DC    X'7F000000'
XZERO    DC    X'80FFFFFF'                   SIGN AND VALUE -DROP E
X6       DC    X'46000000'                   EXPONENT OF SIX
NSIGN    DC    X'7FFFFFFF'                   DROP SIGN -RETAIN VALUE
MZERO    DC    X'80000000'
GEVM     DC    X'2A02'
GFSCB    DC    X'2A40'
GFSCL    DC    X'2A41'
PASREG   EQU   0
WKAREG   EQU   1
OBPREG   EQU   2
OABREG   EQU   2
PATREG   EQU   3
XYLREG   EQU   4
XREG     EQU   5
SLOREG   EQU   5
YREG     EQU   6
INTLNK   EQU   6
WRKREG   EQU   7
CNTREG   EQU   8
INXREG   EQU   10
OLPREG   EQU   10
EVEREG   EQU   10
ODDREG   EQU   11
VALREG   EQU   11
TEMREG   EQU   11
LINREG   EQU   12
CONREG   EQU   14
ADDREG   EQU   14
         EJECT
PARTAB   DSECT
XYLIM    DS    CL4
UI       DS    CL4
         ORG   UI
VI       DS    CL4
UC       DS    CL4
         ORG   UC
VC       DS    CL4
F        DS    CL1
S        DS    CL1
SIZE     DS    CL1
TYPE     DS    CL1
DATA     DS    CL4
FLENGTH  DS    CL2
LGAP     DS    CL2
LTICK    DS    CL2
*
XYLIMT   DSECT
X1       DS    CL2
Y1       DS    CL2
X2       DS    CL2
Y2       DS    CL2
U1       DS    CL4
U2       DS    CL4
V1       DS    CL4
V2       DS    CL4
*
WRKAREA  DSECT
OVFSAVE  DS    CL64
PORSAVE  DS    CL64
ADDRESS  DS    CL4
ERRCOUNT DS    CL4
XI       DS    CL2
YI       DS    CL2
XS       DS    CL2
YS       DS    CL2
XE       DS    CL2
YE       DS    CL2
MASKSV   DS    F                   SAVE SETTING OF USER PROGRAM MASK
         ORG   OVFSAVE+396
GOMODE   DS    CL2
         END
