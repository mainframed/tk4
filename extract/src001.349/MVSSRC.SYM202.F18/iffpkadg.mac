         START
*TITLE IFFPKADG                                                       *
*                                                                     *
*STATUS: CHANGE LEVEL 000                                             *
*                                                                     *
*FUNCTION/OPERATION: GENERATES A SERIES OF GRAPHIC ORDERS FROM DATA   *
*   SUPPLIED BY THE USER. THE ORDERS MAY CONSIST OF ABSOLUTE OR       *
*   INCREMENTAL ORDERS OR AN OPTIMIZED MIXTURE OF THE TWO. THE DATA   *
*   FORMAT AND MODE IS SPECIFIED BY THE USER IN HIS PARAMETER TABLE.  *
*   THE DATA IS SCALED IF DESIRED USING THE ENTRIES IN THE XYSCALE    *
*   TABLE TO DERIVE APPROPRIATE SCALING FACTORS.                      *
*                                                                     *
*INPUT: A PARAMETER TABLE (PARTAB) AND AN OUTPUT CONTROL BLOCK POINTER*
*   (OCBP). THESE POINT TO AN XYSCALE TABLE AND TO THE OUTPUT AREA    *
*   CONTROL BLOCK (OCBP) AND AN HUNDRED-WORD WORKAREA RESPECTIVELY.   *
*                                                                     *
*OUTPUT: THE GRAPHIC ORDERS TO PLOT THE DATA AS SPECIFIED ARE PLACED  *
*   IN THE USER'S GDOA.                                               *
*                                                                     *
*EXTERNAL ROUTINES: GOFFSG                                            *
*                                                                     *
*EXITS-NORMAL: VIA RETURN MACRO WITH A ZERO RETURN CODE ON SUCESSFUL  *
*   COMPLETION.                                                       *
*              VIA A BALR 14,15 TO THE USER'S OVERFLOW ROUTINE        *
*                                                                     *
*EXITS-ERROR: VIA RETURN MACRO WITH A NON-ZERO RETURN CODE IN REGISTER*
*   15                                                                *
*                                                                     *
*TABLES/WORKAREA: AN HUNDRED-WORD USER SUPPLIED WORKAREA. TABLES OF   *
*   POSSIBLE PARAMETER VALUES AND THE CORRESPONDING SWITCH SETTINGS   *
*                                                                     *
*ATTRIBUTES: PROBLEM STATE, REENTRANT, CHARACTER DEPENDENT.           *
*
WORKAREA DSECT
         DS    0F                      FORCE FULL WORD ALIGNMENT
*
X1       DS    H                       GRID LIMITS-LOWER LEFT CORNER
Y1       DS    H                       IN 4096 RASTER UNITS
X2       DS    H                       GRID LIMITS-UPPER RIGHT CORNER
Y2       DS    H                       IN 4096 RASTER UNITS
*
OVERFLAG DS    C
PTSGSW   DS    C                       PLOT TYPE-SCISSORING OPTIONS
*              X'80'         1=OPTIMIZED PLOT/0=NOT OPTIMIZED
*              X'40'         1=FIRST POINT FOR CALL
*              X'20'         1=INCREMENTAL PLOT/0=ABSOLUTE PLOT
*              X'10'         1=VECTOR PLOT/0=POINT PLOT
*              X'08'         1=DISCONTINUE WHEN SCREEN EXCEEDED
*                            0=CONTINUE
*              X'04'         1=DISCONTINUE WHEN GRID EXCEEDED
*                            0=CONTINUE
*              X'02'         1=SHOW ALL POINTS WITHIN SCREEN LIMITS
*                            0=SHOW ALL POINTS WITHIN GRID LIMITS
UMODE    DS    C                       CHARACTERISTICS OF U'S
VMODE    DS    C                       CHARACTERISTICS OF V'S
*              X'10'         1=FLOATING-POINT/0=INTEGER
*              X'20'         INPUT VALUES ABSOLUTE
*              X'40'         INPUT VALUES A TABLE OF INCREMENTS
*              X'80'         INPUT VALUES BY ADDING A FIXED INCREMENT
XP       DS    H                       LAST PHYSICAL LOCATION
YP       DS    H                       OF BEAM
X        DS    F                       LAST LOGICAL LOCATION
Y        DS    F                       OF BEAM
U        DS    F                       LAST U-VALUE
V        DS    F                       LAST V-VALUE
UTAB     DS    F                       LAST ENTRY IN U-ARRAY USED
VTAB     DS    F                       LAST ENTRY IN V-ARRAY USED
*
GIX1     DS    H                       COORDINATES OF FIRST INTERSEC-
GIY1     DS    H                       TION WITH GRID LIMITS
GIX2     DS    H                       COORDINATES OF SECOND  INTER-
GIY2     DS    H                       SECTION WITH GRID LIMITS
PTPOS    DS    C                       RELATIVE POSITIONS OF END-POINTS
*
DEFLG    DS    C                       DEFAULT FLAG
RETCD    DS    H                       RETURN CODE WORK AREA
PARTABAD DS    F                       ADDRESS OF PARTAB
OACBAD   DS    F                       ADDRESS OF OACB
*
NXTX1    DS    F                       X AND Y COORDINATES
NXTY1    DS    F                       OF FIRST POINT-VECTOR
SUPLT1   DS    C                       SUPRESS PLOT SWITCH
PTCNT1   DS    C                       NO. OF POINTS TO PLOT
BV11     DS    C                       BLANKED BEAM SWITCHES
BV21     DS    C
ADJX11   DS    H                       ADJUSED X
ADJY11   DS    H                                 AND Y
ADJX21   DS    H                                      COORDINATES
ADJY21   DS    H                       TO PLOT VECTOR
NXTX2    DS    F                       X AND Y COORDINATES
NXTY2    DS    F                       OF SECOND POINT-VECTOR
SUPLT2   DS    C                       SUPRESS PLOT SWITCH
PTCNT2   DS    C                       NO. OF POINTS TO PLOT
BV12     DS    C                       BLANKED BEAM SWITCHES
BV22     DS    C
ADJX12   DS    H                       ADJUSTED X
ADJY12   DS    H                                  AND Y
ADJX22   DS    H                                        COORDINATES
ADJY22   DS    H                       TO PLOT VECTOR
*
NXTX3    DS    F                       X AND Y COORDINATES FOR
NXTY3    DS    F                       OPTIMIZATION CHECK VECTOR
SUPLT3   DS    C                       SUPRESS PLOT
PTCNT3   DS    C                       NO. OF POINTS TO PLOT
BV13     DS    C                       BLANKED VECTOR SWITCHES
BV23     DS    C
ADJX13   DS    H                       ADJUSTED X
ADJY13   DS    H                                  AND Y
ADJX23   DS    H                                        COORDINATES
ADJY23   DS    H                       OF VECTOR
SVAR1    DS    18F                     SAVE AREA-SUB-LEVEL 1
SVAR2    DS    18F                     SAVE AREA-SUB-LEVEL 2
*
SMSW     DS    C                       SET MODE SWITCH
INTS     DS    C                       NUMBER OF INTERSECTIONS
*                                      BETWEEN GRID/SCREEN AND VECTOR
ABSPTS   DS    H                       NO. OF ABSOLUTE PTS. IN WORKAREA
INCPTS   DS    H                       NO. OF INCREMENTAL PTS.
BTCNT    DS    H                       NO. OF BYTES REMAINING
*
OPTIMSV  DS    6F
*                                      LOOK-AHEAD
WRKAR    DS    12F
OPT14    DS    F                       SAVE AREA FOR REGISTER 14
DELTAX   DS    F                       TEMPORARY STORAGE-X AND Y
DELTAY   DS    F                       DISPLACEMENTS FROM LAST POINT
SIX1     DS    H                       COORDINATES OF FIRST INTER-
SIY1     DS    H                       SECTION WITH SCREEN LIMITS
SIX2     DS    H                       COORDINATES OF SECOND INTER-
SIY2     DS    H                       SECTION WITH SCREEN LIMITS
         ORG   WRKAR+8
SABL     DS    F                       POINTER TO GRID/SCREEN LIMITS
PT1X     DS    F                       COORDINATES OF FROM POINT
PT1Y     DS    F                       OF VECTOR
PT2X     DS    F                       COORDINATES OF TO POINT
PT2Y     DS    F                       OF VECTOR
NI       DS    F                       NUMBER OF INTERSECTIONS
INTS1X   DS    H                       COORDINATES OF FIRST INTERSEC-
INTS1Y   DS    H                       TION POINT
INTS2X   DS    H                       COORDINATES OF SECOND
INTS2Y   DS    H                       INTERSECTION POINT
         ORG   X1+396
CURMOD   DS    H                       LAST SET MODE ORDER GENERATED
MODE     DS    C                       TEMPORARY STORAGE FOR UMODE &
*                                      VMODE
         DS    C                       RESERVED
PARTAB   DSECT
XYSCALE  DS    F                  ADDRESS OF SCALING TABLES
UADDR    DS    F                  ADDRESSES OF FIRST U AND
VADDR    DS    F                  V VALUES
F        DS    C                  MODE
IPU      DS    C                  FORMAT OF U VALUES
IPV      DS    C                  FORMAT OF V VALUES
PTYPE    DS    C                  TYPE OF PLOT
POSOPT   DS    C                  POSITIONING OPTION
SGOPT    DS    C                  SCREEN/GRID SCISSORING OPTION
S        DS    C                  SCALING
SMOPT    DS    C                  INITIAL SET MODE OPTION
SEGOPT   DS    C                  SEGMENT OPTION
         DS    C                  RESERVED
N        DS    H                  NUMBER OF U,V PAIRS
UINDEX   DS    F                  INDICES TO
VINDEX   DS    F                             TABLE ENTRIES
UINCR    DS    F                  FIXED U AND
VINCR    DS    F                              V INCREMENTS
SCALETAB DSECT
GX1      DS    F                  GRID LIMITS-LOWER LEFT CORNER
GY1      DS    F
GX2      DS    F                             -UPPER RIGHT CORNER
GY2      DS    F
SX1      DS    F                  SCREEN LIMITS-LOWER LEFT CORNER
SY1      DS    F
SX2      DS    F                               -UPPER RIGHT CORNER
SY2      DS    F
DX1      DS    F                  DATA LIMITS-LOWER LEFT CORNER
DY1      DS    F
DX2      DS    F                             -UPPER RIGHT CORNER
DY2      DS    F
XALTER   DS    F                  X-ALTER SWITCH- ALSO, MULTIPLICA-
*                                 TIVE SCALING CONSTANT
YALTER   DS    F                  Y-ALTER SWITCH- ALSO, MULTIPLICA-
*                                 TIVE Y SCALING CONSTANT
XCON     DS    F                  ADDITIVE X SCALING CONSTANT
YCON     DS    F                  ADDITIVE Y SCALING CONSTANT
SGPAR    DSECT
NXTX     DS    F
NXTY     DS    F
SUPLT    DS    C
PTCNT    DS    C
BV1      DS    C
BV2      DS    C
ADJX1    DS    H
ADJY1    DS    H
ADJX2    DS    H
ADJY2    DS    H
IFFPKADG CSECT
* 514200                                                         A29393
PARBASE  EQU   10                      BASE REGISTER FOR PARAMETERS
SCALBASE EQU   9                       BASE REGISTER FOR SCALING
*                                      CONSTANTS
FPACC    EQU   0
FPACC1   EQU   2
FPACC2   EQU   4
FPACC3   EQU   6
ACC      EQU   0                       GENERAL ACCUMULATOR
PARLIST  EQU   1                       PARAMETER LIST REGISTER
NINC     EQU   1                       NUMBER OF VECTORS IN ABS. VECTOR
EVNACC   EQU   2                       ACCUMULATOR FOR MULTIPLICATION
*                                      AND DIVISION
ERRX     EQU   2                       CUMULATIVE X-ERROR
ODDACC   EQU   3                       ACCUMULATOR FOR MULTIPLICATION
*                                      AND DIVISION
ERRY     EQU   3                       CUMULATIVE Y-ERROR
ABIND    EQU   4                       POINTER TO ABSOLUTE VECTOR
*                                      BEING CONVERTED TO INCREMENTAL
ACC1     EQU   4
INCIND   EQU   5                       POINTER TO STORAGE AREA FOR
*                                      INCREMENTAL VECTORS
ACC2     EQU   5
ACC3     EQU   6
COUNT    EQU   6                       NUMBER ABSOLUTE VECTORS
POINTS   EQU   6
DELX     EQU   7                       CONSTANT X-DISPLACEMENT
MAGDELX  EQU   7                       MAGNITUDE OF DELTAX
OLPREG   EQU   7                       CURRENT VALUE OF OLP
RX       EQU   8                       FINAL X-REMAINDER
GDOACNT  EQU   8                       USABLE BYTES IN GDOA
DELY     EQU   9                       CONSTANT Y-DISPLACEMENT
MAGDELY  EQU   9                       MAGNITUDE OF DELTAY
RY       EQU   10                      Y-REMAINDER FOR LAST VECTOR
WORKBASE EQU   11                      BASE FOR SYMBOLIC REFERENCES
*                                      TO WORKAREA
BASE     EQU   12                      BASE REGISTER FOR ROUTINE
SAVEREG  EQU   13                      POINTER TO SAVE AREA
RETREG   EQU   14                      RETURN REGISTER
ENTREG   EQU   15
         ENTRY GSDPLT
GSDPLT   SAVE  (14,12)
         BALR  BASE,0                  ADDRESSABILITY
         USING *,BASE                  FOR ROUTINE
*
         L     PARBASE,4(PARLIST)      ADDRESSABILITY
         USING PARTAB,PARBASE          FOR PARAMETER TABLE
*
         L     EVNACC,0(PARLIST)       GET ADDRESS
         L     WORKBASE,4(EVNACC)      OF WORKAREA
         USING WORKAREA,WORKBASE       ADDRESSABILITY FOR WORKAREA
         XC    PTPOS(4),PTPOS          XET PT. POSITION & DEFAULT
*                                      FLAGS AND RETURN CODE WORKAREA
*                                      TO 0
*
         ST    PARBASE,PARTABAD        S1VE ADDRESSES OF PARAMETER
         MVC   OACBAD(4),0(EVNACC)     TABLE AND OACB IN WORKBASE
*
         LA    EVNACC,SVAR1            SET UP SAVE AREA
         ST    SAVEREG,4(EVNACC)       & CHAIN IT TO
         ST    EVNACC,8(SAVEREG)       PREVIOUS SAVE AREA
         LR    SAVEREG,EVNACC
*
         CLC   N(2),H1                 SEE IF N POSITIVE
         BNL   PARMCHK
         L     SAVEREG,4(SAVEREG)      N ZERO OR NEGATIVE-
         RETURN (14,12),RC=0           IMMEDIATE RETURN
*
PARMCHK  LA    ACC,3
         SPM   ACC                     UNMASK ALL PROGRAM INTERRUPTS
         LA    PARLIST,MODES           GET DATA/
         LA    EVNACC,F                COMPUTATION
         LA    ODDACC,4                MODE OF
         BAL   RETREG,PRMCHKLP         INPUT
         MVC   UMODE(1),1(PARLIST)     AND SET CONTROL SWITCHES
         MVC   VMODE(1),2(PARLIST)
*
         LA    ACC,2
         LA    PARLIST,INPFORMS        GET FORMAT
         LA    EVNACC,IPU              OF U-VALUE
         LA    ODDACC,3                INPUT
         BAL   RETREG,PRMCHKLP
         OC    UMODE(1),1(PARLIST)     AND SET SWITCH
*
         LA    PARLIST,INPFORMS        GET FORMAT
         LA    EVNACC,IPV              OF V-VALUE
         LA    ODDACC,3                INPUT
         BAL   RETREG,PRMCHKLP
         OC    VMODE(1),1(PARLIST)     AND SET SWITCH
*
         LA    PARLIST,SMOPTS          DETERMINE
         LA    EVNACC,SMOPT            SET MODE
         LA    ODDACC,2                OPTIIN
         BAL   RETREG,PRMCHKLP
         MVC   SMSW(1),1(PARLIST)      AND SET CONTROL SWITCH
*
         LA    PARLIST,SGOPTS          DETERMINE
         LA    EVNACC,SGOPT            SCISSORING OPTION
         LA    ODDACC,5                REQUESTED
         BAL   RETREG,PRMCHKLP         AND
         MVC   PTSGSW(1),1(PARLIST)    SET CONTROL SWITCH
*
         LA    PARLIST,PTYPES          DETERMINE
         LA    EVNACC,PTYPE            TYPE OF
         LA    ODDACC,6                PLOT REQUESTED
         BAL   RETREG,PRMCHKLP         AND
         OC    PTSGSW(1),1(PARLIST)    SET CONTROL SWITCH
         TM    PTSGSW,X'80'            IF OPTIMIZED PLOT
         BZ    SCALPARM                IS REQUESTED,
SCALPARM LA    ACC,4
         LA    PARLIST,SOPTS           SEE IF SCALING REQUESTED
         LA    EVNACC,S
         LA    ODDACC,2
         BAL   RETREG,PRMCHKLP
         L     PARLIST,0(PARLIST)      BRANCH TO ROUTINE TO INITIALIZE
         L     SCALBASE,XYSCALE        SCALING REQUESTED, LOCATE
         USING SCALETAB,SCALBASE       SCALING CONTANTS
         BR    PARLIST
*
GRIDSF   LE    FPACC,SX2(EVNACC)       GET S2-S1
         SE    FPACC,SX1(EVNACC)
         BC    12,RC4                  CHECK FOR LEGALITY
         LE    FPACC1,0(PARLIST)       GET COORDINATE TO BE SCALED
         SE    FPACC1,SX1(EVNACC)      SUBTRACT S1
         ME    FPACC1,FOURKE           MULTIPLY BY 4K
         DER   FPACC1,FPACC            DIVIDE BY S2-S1
         STE   FPACC1,WRKAR            STORE
         LA    PARLIST,WRKAR
         ST    RETREG,OPT14            SAVE RETURN REGISTER
         BAL   RETREG,FIX              FIX VALUE
         LTR   ENTREG,ENTREG           CHECK FOR LEGALITY
         BC    7,BADTERM
         L     RETREG,OPT14            RETURN
         BR    RETREG
*
GRIDS    L     ACC,SX2(EVNACC)         GET S2-S1
         S     ACC,SX1(EVNACC)         CHECK FOR LEGALITY
         BC    12,RC4
         L     ODDACC,0(PARLIST)       GET COORDINATE TO BE SCALED
         S     ODDACC,SX1(EVNACC)      SUBSTRACT S1
         ST    EVNACC,DELTAX           SAVE LOOP CONTROL
         M     EVNACC,FOURK            MULTIPLY BY 4K
         DR    EVNACC,ACC              DIVIDE BY S2-S1
         ST    ODDACC,WRKAR            STORE
         L     EVNACC,DELTAX           RESTORE LOOP CONTROL
         BR    RETREG                  AND RETURN
*
ABSGRID  MVC   WRKAR(16),GX1           MOVE GRID LIMITS TO WORKAREA
         SR    EVNACC,EVNACC           SET POINTER
         TM    UMODE,X'10'             NEED TO FIX
         BZ    FXABGRDV                NO, CHECK V
FXABGRD  LA    PARLIST,WRKAR(EVNACC)   GET ADDRESS OF VALUE
         BAL   RETREG,FIX              FIX IT
         LA    PARLIST,WRKAR+8(EVNACC) GET SECOND VALUE
         BAL   RETREG,FIX              FIX IT
         LTR   EVNACC,EVNACC           BOTH U AND V CHECKED
         BC    7,ABGRDXFR              YES, MOVE TO WORKAREA
FXABGRDV LA    EVNACC,4                GET POINTER TO Y VALUES
         TM    VMODE,X'10'             CHECK MODE
         BO    FXABGRD                 FIX V VALUES
ABGRDXFR MVC   X1(2),WRKAR+2           SAVE GRID LIMITS
         MVC   Y1(2),WRKAR+6           IN PROPER
         MVC   X2(2),WRKAR+10          LOCATIONS
         MVC   Y2(2),WRKAR+14          IN THE WORKAREA
         B     CHKGRD                  CHECK FOR VALIDITY
*
SCALGRID SR    EVNACC,EVNACC           SET UP POINTERS
         LA    ACC2,X1                 TO U-X VALUES
         TM    UMODE,X'10'             CHECK MODE
         BZ    FIXGRD                  INTEGER
FLTGRD   LA    PARLIST,GX1(EVNACC)     FLOATING- CONVERT COORDINATE OF
         BAL   RETREG,GRIDSF           LOWER-LEFT CORNER OF GRID TO
         MVC   0(2,ACC2),WRKAR+2       RASTER UNITS AND STORE
         LA    PARLIST,GX2(EVNACC)     LIKEWISE FOR
         BAL   RETREG,GRIDSF           UPPER-RIGHT CORNER
         MVC   4(2,ACC2),WRKAR+2
GRDLP1   LTR   EVNACC,EVNACC           FINISHED PROCESSING Y-VALUES
         BC    7,CHKGRD                YES- CHECK
         LA    EVNACC,4                NO- GET POINTERS TO
         LA    ACC2,Y1                 V-Y VALUES
         TM    VMODE,X'10'             CHECK MODE
         BO    FLTGRD                  FLOATING
*
FIXGRD   LA    PARLIST,GX1(EVNACC)     INTEGER- EVALUATE
         BAL   RETREG,GRIDS            COORDINATES OF
         MVC   0(2,ACC2),WRKAR+2       GRID CORNERS
         LA    PARLIST,GX2(EVNACC)     USING
         BAL   RETREG,GRIDS            INTEGER ARITHMETIC
         MVC   4(2,ACC2),WRKAR+2       AND STORE
         B     GRDLP1
*
CHKGRD   LH    PARLIST,ZERO            CHECK GRID
         CH    PARLIST,X1              LIMITS TO
         BH    RC4                     MAKE SURE
         CH    PARLIST,Y1              THEY ARE
         BH    RC4                     VALID
         LH    PARLIST,ZERO+4          IF NOT,
         CH    PARLIST,X2              SET RETURN
         BL    RC4                     CODE FOR
         CH    PARLIST,Y2              IMMEDIATE RETURN
         BL    RC4
         CLC   X1(2),X2                MAKE SURE LOWER GRID LIMITS
         BNL   RC4
         CLC   Y1(2),Y2                ARE LESS THAN UPPER LIMITS
         BNL   RC4
POSITION OI    PTSGSW,X'40'
         XC    ABSPTS(2),ABSPTS        SET POINT COUNT =0
         XC    INCPTS(2),INCPTS        SET NO. OF INCREMENTAL PTS.=0
         BAL   RETREG,GETNEXT          GET FIRST POINT
         LTR   ENTREG,ENTREG           BAD DATA LIMITS
         BP    ENDTERM                 YES, TERMINATE PROGRAM
         MVC   X(8),DELTAX             STORE
         MVC   XP(2),DELTAX+2          IN HISTORICAL
         MVC   YP(2),DELTAY+2          AREAS
         LA    ACC,NXTX1               SET INITIAL
         MVC   NXTX1(8),X              POSITION SWITCHES
         BAL   RETREG,SGCHECK          FOR FUTURE REFERENCE
         LA    POINTS,1                INITIALIZE COUNTER
         LA    ACC,4                   CHECK
         LA    PARLIST,POSOPTS         POSITIONING
         LA    EVNACC,POSOPT           OPTIONS
         LA    ODDACC,3
         BAL   RETREG,PRMCHKLP
         L     PARLIST,0(PARLIST)      GET ADDRESS OF ROUTINE
*
         L     EVNACC,OACBAD           GET NUMBER
         L     GDOACNT,0(EVNACC)       OF FREE BYTES
         A     GDOACNT,4(EVNACC)       IN THE GDOA
         L     OLPREG,16(EVNACC)       AND THE VALUE
         SR    GDOACNT,OLPREG          OF THE
         SH    GDOACNT,H4              OLP
         NI    PTSGSW,X'BF'
         MVI   BV21,X'00'              SET INCREMENTAL POSITIONING
*                                      SWITCH OFF
         BR    PARLIST                 TO PROCESSING ROUTINE
*
ABSPOS   MVC   NXTX1(8),X              ABSOLUTE POSITIONING
         LA    ACC,NXTX1               CALL SCISSORING ROUTINE TO
         BAL   RETREG,SGCHECK          CHECK POSITIONING VECTOR
         LTR   ENTREG,ENTREG           TERMINATION CONDITION
         BP    ENDTERM                 YES, EXIT
         TM    SUPLT1,X'FF'            NO.  PLOT SUPPRESSED
         BZ    ABSPOS1                 NO.  POSITION TO INPUT VALUE
         XC    XP(4),XP                YES, POSITION TO 0,0
ABSPOS1  MVC   WRKAR(4),XP
         MVC   ABSPTS(2),H1            STORE POSITION IN WORKAREA
         OI    WRKAR,X'40'             BLANK VECTOR
         TM    PTSGSW,X'80'            OPTIMIZED PLOT
         BZ    INCABPOS
         NI    PTSGSW,X'1F'            YES,SET FOR ABSOLUTE PLOT
         OI    PTPOS,X'C0'             SIGNAL PLOT TYPE OVERIDE
         B     STRABS                  STORE DATA
*
INCABPOS TM    PTSGSW,X'20'            INCREMENTAL PLOT
         BZ    STRABS                  NO, STORE ABSOLUTE DATA
         OI    PTPOS,X'40'             YES, SIGNAL PTYPE OVERIDE
         NI    PTSGSW,X'DF'            OVERIDE TO ABSOLUTE PLOT
         B     STRABS
*
INCPOS   CLI   SEGOPT,C'B'             IF SEG OPT B AND POS OPT C
         BE    ABSPOS                  ARE SPECIFIED, ASSUME POS OPT A
         MVI   BV21,X'FF'              BLANK OUT VECTOR
*                                      INCREMENTAL POSITIONING
         TM    PTSGSW,X'80'            OPTIMIZED PLOT
         BZ    ABINCPOS
         OI    PTPOS,X'C0'             YES, SIGNAL PTYPE OVERIDE
         NI    PTSGSW,X'7F'            FORCE NON-OPTIMIZED PLOT
         B     MAINLOOP
ABINCPOS TM    PTSGSW,X'20'            NON-OPTIMIZED INCREMENTAL
         BO    MAINLOOP                YES, PLOT POINT
         OI    PTPOS,X'40'             NO, SIGNAL PTYPE OVERIDE
         OI    PTSGSW,X'20'            FORCE INCREMENTAL PLOT
         MVI   SMSW,X'FF'              AND SET MODE
         B     MAINLOOP
PRMCHKLP CLC   0(1,PARLIST),0(EVNACC)  COMPARE PARAMETER WITH TABLE
         BCR   8,RETREG                ENTRY. IF EQUAL, RETURN
         AR    PARLIST,ACC             NOT EQUAL, GET ADDRESS OF NEXT
         BCT   ODDACC,PRMCHKLP         ENTRY AND CHECK IT
         MVI   DEFLG,X'FF'             NO LEGAL OPTIONS TAKEN-SET
         BR    RETREG                  DEFAULT FLAG AND RETURN
MODES    DC    C'A'                    DATA COMPUTATION MODE
         DC    X'10'                   U FLOATING-POINT
         DC    X'10'                   V FLOATING-POINT
         DC    C'B'
         DC    X'00'                   U INTEGER
         DC    X'00'                   V INTEGER
         DC    C'C'
         DC    X'00'                   U INTEGER
         DC    X'10'                   V FLOATING-POINT
         DC    C'D'
         DC    X'10'                   U FLOATING-POINT
         DC    X'00'                   V INTEGER
         DS    C                       DEFAULT
         DC    X'10'                   U FLOATING-POINT
         DC    X'10'                   V FLOATING-POINT
*
*
*
INPFORMS DC    C'A'                    INPUT FORMATS
         DC    X'20'                   ALL VALUES IN ABSOLUTE TABLE
         DC    C'B'                    FIRST VALUE IN TABLE,
         DC    X'40'                   OTHERS INCREMENTAL
         DC    C'C'                    FIRST VALUE IN TABLE,
         DC    X'80'                   OTHERS BY ADDING FIXED INCREMENT
         DS    C                       DEFAULT
         DC    X'20'                   ALL VALUES ABSOLUTE
*
PTYPES   DC    C'A'                    PLOT TYPES
         DC    X'10'                   ABSOLUTE VECTOR
         DC    C'B'
         DC    X'00'                   ABSOLUTE POINT
         DC    C'C'
         DC    X'30'                   INCREMENTAL VECTOR
         DC    C'D'
         DC    X'20'                   INCREMENTAL POINT
         DC    C'E'
         DC    X'B0'                   OPTIMIZED VECTOR
         DC    C'F'
         DC    X'A0'                   OPTIMIZED POINT
         DS    C                       DEFAULT
         DC    X'10'                   ABSOLUTE VECTOR
*
SGOPTS   DC    C'A'                    OFF SCREEN/OFF GRID OPTIONS
         DC    X'00'                   SHOW ALL POINTS IN GRID
         DC    C'B'
         DC    X'02'                   SHOW ALL POINTS IN SCREEN
         DC    C'C'                    SHOW ALL POINTS IN GRID
         DC    X'08'                   TERMINATE WHEN SCREEN EXCEEDED
         DC    C'D'
         DC    X'04'                   TERMINATE WHEN GRID EXCEEDED
         DC    C'E'                    SHOW ALL POINTS IN SCREEN
         DC    X'0A'                   TERMINATE WHEN SCREEN EXCEEDED
         DS    C                       DEFAULT- SG OPT = E
         DC    X'0A'
*
SMOPTS   DC    C'A'
         DC    X'FF'                   SET MODE REQUESTED
         DC    C'B'
         DC    X'00'                   PROPER MODE SET
         DS    C
         DC    X'FF'                   DEFAULT- SET MODE
*
         DS    0F
POSOPTS  DC    C'A'                    POSITIONING OPTIONS
         DC    AL3(ABSPOS)             ABSOLUTE POSITIONING
         DC    C'B'
         DC    AL3(FINOPT)             POSITION FOR INFORMATION ONLY
         DC    C'C'
         DC    AL3(INCPOS)             INCREMENTAL POSITIONING
         DS    C                       DEFAULT
         DC    AL3(ABSPOS)             ABSOLUTE POSITIONING
*
*
SOPTS    DC    C'A'
         DC    AL3(ABSGRID)            NO SCALING
         DC    C'B'
         DC    AL3(SCALGRID)           SCALING REQUESTED
         DS    C
         DC    AL3(ABSGRID)            DEFAULT - NO SCALING
*
MAINLOOP LA    POINTS,1(POINTS)        INCREMENT COUNTER BY ONE
         CH    POINTS,N                ALL POINTS PROCESSED
         BH    NORMTERM                YES, TERMINATE ROUTINE
         BAL   RETREG,GETNEXT
         MVC   NXTX1(8),DELTAX
*
         LA    ACC,NXTX1
         BAL   RETREG,SGCHECK
         LTR   ENTREG,ENTREG
         BC    7,STOLP
         MVC   X(8),NXTX1              SAVE LOGICAL POSITION OF BEAM
         TM    SUPLT1,X'FF'
         BO    MAINLOOP
         MVC   WRKAR(8),ADJX11
         TM    PTCNT1,X'F0'
         BZ    ONEABS
         MVC   ABSPTS(2),H2
         B     BLANK
ONEABS   MVC   ABSPTS(2),H1
BLANK    TM    BV11,X'FF'
         BZ    PTYPETST
         OI    WRKAR,X'40'
PTYPETST TM    PTSGSW,X'A0'
         BZ    STRABS
         TM    BV21,X'FF'              INCREMENTAL POSITIONING
         BZ    DISP                    NO
         OI    WRKAR,X'40'             YES, BLANK ALL POSSSIBLE
         OI    WRKAR+4,X'40'           ABSOLUTE VECTORS
         MVI   BV21,X'00'              SET SWITCH TO ZERO
*
DISP     BAL   RETREG,DISPLACE
         LTR   ENTREG,ENTREG           RETURN CODE NON-ZERO
         BP    STOLP                   YES, IMMEDIATE TERMINATION
         TM    PTSGSW,X'80'
         BZ    STRINC
*
         TM    PTSGSW,X'20'            CURRENT MODE = ABSOLUTE
         BO    CURINC                  NO,
         CLC   ABSPTS(2),H1            NUMBER OF ABSOLUTE VECTORS
         BL    KEEPMODE                   NONE
         BH    TWOABS                     TWO
         CLC   INCPTS(2),H1               ONE- ONLY ONE INCREMENTAL
         BE    LKAHEAD                 VECTOR REQUIRED, LOOK AHEAD
*                                      MORE THAN ONE REQUIRED
KEEPMODE MVI   SMSW,X'00'              SET SET MODE SWITCH OFF
         B     FINOPT
*
TWOABS   CLC   INCPTS(2),H3            NUMBER OF INCREMENTAL VECTORS
         BE    LKAHEAD                 REQUIRED-- THREE, LOOK AHEAD
         BH    KEEPMODE                  FOUR OR MORE- STAY IN ABSOLUTE
*                                        LESS THAN THREE,
FLIPMODE XI    PTSGSW,X'20'            CHANGE MODE
         MVI   SMSW,X'FF'              SET SET MODE SWITCH
         B     FINOPT
*
LKAHEAD  MVC   OPTIMSV+8(16),U         SAVE CURRENT POSITION PARAMETERS
         BAL   RETREG,GETNEXT          GET NEXT POINT TO PLOT
         LTR   ENTREG,ENTREG           CHECK RETURN CODE
         BC    7,SKPNXT                NON-ZERO
*
         MVC   NXTX3(8),DELTAX         SET UP SCISSORING PARAMETER LIST
         LA    ACC,NXTX3               SET UP CALL FOR SCISSORING
         BAL   RETREG,SGCHECK          SCISSOR
         LTR   ENTREG,ENTREG           TEST RETURN CODE
         BC    7,SKPNXT                NON-ZERO
*
         TM    SUPLT3,X'FF'            PLOT SUPPRESSED,
         BO    SKPNXT                  STAY IN CURRENT MODE
*
         LH    EVNACC,ADJX13           GET DELTAX
         SH    EVNACC,XP
         CH    EVNACC,HILIM            IF GREATER THAN 255,
         BH    SKPNXT                  STAY IN ABSOLUTE
         CH    EVNACC,LOWLIM           IF LESS THAN -256,
         BL    SKPNXT                  STAY IN ABSOLUTE
*
         LH    EVNACC,ADJY13           GET DELTA Y
         SH    EVNACC,YP
         CH    EVNACC,HILIM            IF GREATER THEN 255,
         BH    SKPNXT                  STAY IN CURRENT MODE
         CH    EVNACC,LOWLIM           IF LESS THAN -256
         BL    SKPNXT                  STAY IN CURRENT MODE
*
         MVC   U(16),OPTIMSV+8         RESTORE ORIGINAL BEAM POSITION
*                                      VALUES
         B     FLIPMODE                CHANGE MODE AND EXIT
*
SKPNXT   MVC   U(16),OPTIMSV+8         RESTORE ORIGINAL BEAM POSITION
*                                      VALUES
         B     KEEPMODE                STAY IN ABSOLUTE MODE
*
CURINC   CLC   ABSPTS(2),H2            IF ONE ABSOLUTE VECTOR
         BE    TWOABSI                 NEEDED,
         CLC   INCPTS(2),H3            SEE HOW MANY INCREMENTALS
         BH    FLIPMODE                  MORE THAN 3- GO TO ABSOLUTE
         BNH   KEEPMODE                  3 OR LESS- STAY IN INCREMENTAL
*
TWOABSI  CLC   INCPTS(2),H5            IF TWO ABSOLUTE VECTORS,
         BH    FLIPMODE                  MORE THAN 5 INCREMENTALS
         BNH   KEEPMODE                  5 OR LESS
FINOPT   TM    PTSGSW,X'20'
         BO    STRINC
*
STRABS   LH    EVNACC,ABSPTS
         MH    EVNACC,H4
         TM    SMSW,X'FF'
         BZ    ABSPACE
         LA    EVNACC,2(EVNACC)
ABSPACE  CR    EVNACC,GDOACNT
         BH    GDOAOVER
         LA    ODDACC,WRKAR            GET ADDRESS OF DATA
         TM    SMSW,X'FF'
         BZ    STRDATAA
         TM    PTSGSW,X'10'
         BO    ABSVECSM
         MVC   0(2,OLPREG),GEPM
         MVC   CURMOD(2),GEPM
         B     SMUPDA
ABSVECSM MVC   0(2,OLPREG),GEVM
         MVC   CURMOD(2),GEVM
SMUPDA   LA    OLPREG,2(OLPREG)
         SH    GDOACNT,H2              AVAILABLE SPACE BY 2 BYTES
         SH    EVNACC,H2               DECREMENT SPACE REQUIRED &
STRDATAA LTR   EVNACC,EVNACC           IF NO DATA IS PRESENT,
         BZ    CHKMODE                 BYPASS DATA STORAGE
         SR    GDOACNT,EVNACC          UPDATE AVAILABLE SPACE
         BCTR  EVNACC,0
         EX    EVNACC,MVDATAI          MOVE DATA INTO GDOA
         LA    OLPREG,1(OLPREG,EVNACC) UPDATE OLP
*                                      OFF
         LH    EVNACC,ABSPTS           GET POINTER
         MH    EVNACC,H4               TO LAST
         SH    EVNACC,H4               ABSOLUTE
         LA    EVNACC,WRKAR(EVNACC)    VECTOR IN WORK AREA
         MVC   XP(4),0(EVNACC)         SAVE AS LAST PHYSICAL LOCATION
*                                      OF THE BEAM
         NI    XP,X'0F'                ELIMINATE BEAM BIT
CHKMODE  MVI   SMSW,X'00'
         MVI   OVERFLAG,X'00'
         XC    ABSPTS(2),ABSPTS        SET NUMBER OF ABSOLUTE POINTS
*                                      EQUAL TO ZERO
         TM    PTPOS,X'40'             MODE OVERIDEN
         BZ    SEGTEST                 NO- CONTINUE
         TM    PTPOS,X'80'             YES- OPTIMIZATION OVERRIDEN
         BZ    RONGMODE                NO
         OI    PTSGSW,X'80'            YES- SET OPTIMIZED MODE
         B     SEGTEST                 AND CONTINUE
RONGMODE MVI   SMSW,X'FF'              SET MODE TO BE GENERATED
         XI    PTSGSW,X'20'            SET PROPER MODE
SEGTEST  NI    PTPOS,X'3F'             TURN OFF OVERIDE SIGNAL
         CLI   SEGOPT,C'B'             SEE IF SEGMENT PLOT
         BE    SEGLOOP
         B     MAINLOOP
*
MVDATAI  MVC   0(0,OLPREG),0(ODDACC)
*
STRINC   LH    ODDACC,ABSPTS           GET LOCATION OF INCREMENTAL
         MH    ODDACC,H4               DATA
         LH    EVNACC,INCPTS           GET NUMBER OF INCREMENTAL
         MH    EVNACC,H2               DATA BYTES
         TM    SMSW,X'FF'              IF SET MODE REQUESTED,
         BZ    INCSPACE
         LA    EVNACC,2(EVNACC)        INCREASE NUMBER OF BYTES
*                                      REQUIRED BY 2
INCSPACE CR    EVNACC,GDOACNT          SEE IF ENOUGH SPACE IN GDOA
         BH    GDOAOVER
         LA    ODDACC,WRKAR(ODDACC)    GET ADDRESS OF DATA
         TM    SMSW,X'FF'
         BZ    STRDATAA
*
         TM    PTSGSW,X'10'            INSERT SET MODE INTO GDOA
         BO    INCVECSM                IF REQUESTED
         MVC   0(2,OLPREG),GEPI2       INCREMENTAL POINT MODE
         MVC   CURMOD(2),GEPI2
         B     SMUPDA                  UPDATE OLP AND STORE DATA
INCVECSM MVC   0(2,OLPREG),GEVI2       INCREMENTAL VECTOR MODE
         MVC   CURMOD(2),GEVI2
         B     SMUPDA                  UPDATE OLP AND STORE DATA
SEGLOOP  LA    POINTS,2(POINTS)        INCREMENT COUNTER BY 2
         CH    POINTS,N                FINISHED WITH CALL
         BH    NORMTERM                YES, TERMINATE ROUTINE
         BAL   RETREG,GETNEXT
         MVC   NXTX1(8),DELTAX
*
         LM    EVNACC,ODDACC,X
         C     EVNACC,NXTX1
         BNE   NORMPROC
         C     ODDACC,NXTY1
         BE    PROCSEC
NORMPROC LA    ACC,NXTX1
         BAL   RETREG,SGCHECK
         LTR   ENTREG,ENTREG
         BC    7,STOLP
         MVC   X(8),NXTX1              MODIFY LOGICAL POSITION
*                                      OF BEAM
         TM    SUPLT1,X'FF'            PLOT OF 1ST POINT SUPPRESSED
         BO    PROCSEC                 YES, PROCESS 2ND POINT
         TM    PTCNT1,X'F0'            TWO VECTORS GENERATED
         BZ    ONEFRST
         CLC   ADJX21(2),NXTX1+2       2ND ONE = INPUT VALUE
         BNE   PROCSEC                 NO, PROCESS 2ND POINT
         CLC   ADJY21(2),NXTY1+2
         BNE   PROCSEC
         MVC   WRKAR(4),ADJX21         YES, GENERATE BLANKED VECTOR
         B     EPONE                   TO FIRST POINT
*
ONEFRST  CLC   ADJX11(2),NXTX1+2       ONLY VECTOR RETURNED
         BNE   PROCSEC                 FROM SCISSORING=INPUT VALUE
         CLC   ADJY11(2),NXTY1+2       NO, PROCESS 2ND POINT
         BNE   PROCSEC
         MVC   WRKAR(4),ADJX11         GENERATE BLANKED VECTOR TO
EPONE    OI    WRKAR,X'40'             TO 1ST POINT
         OI    PTPOS,X'80'             SET SWITCH
*
PROCSEC  BAL   RETREG,GETNEXT
         LA    ACC,NXTX2
         MVC   NXTX2(8),DELTAX
*
         BAL   RETREG,SGCHECK
         LTR   ENTREG,ENTREG
         BC    7,STOLP
         MVC   X(8),NXTX2              MODIFY LOGICAL POSITION
*                                      OF BEAM
         TM    SUPLT2,X'FF'            2ND POINT SUPPRESSED
         BZ    TWOTST                  NO, CHECK FURTHER
NODATA   NI    PTPOS,X'3F'             YES, GENERATE NO DATA
         B     SEGLOOP
*
TWOTST   TM    PTCNT2,X'F0'            2 PTS RETURNED FROM SCISSORING
         BZ    ONETEST                 NO
         MVC   WRKAR(8),ADJX12         YES, PLOT THEM WITH
         OI    WRKAR,X'40'             1ST BLANKED
TWOSEG   MVC   ABSPTS(2),H2            SET POINT COUNT =2
PLTSEG   NI    PTPOS,X'3F'             SET SWITCH OFF
         B     PTYPETST
*
ONETEST  TM    BV12,X'FF'              BEAM BLANKED
         BO    NODATA                  YES, GENERATE NO DATA
         TM    PTPOS,X'80'             POSITIONING VECTOR STORED
         BZ    ONESEG                  NO
         MVC   WRKAR+4(4),ADJX12       YES, STORE SECOND PT
         B     TWOSEG
*
ONESEG   MVC   WRKAR(4),ADJX12         ONLY ONE POINT, PLOT IT
         MVC   ABSPTS(2),H1            SET POINT COUNT =1
         B     PLTSEG
*
NORMTERM L     EVNACC,OACBAD           GET ADDRESS OF THE OACB
         ST    OLPREG,16(EVNACC)       UPDATE THE VALUE OF THE OLP
*                                      IN THE OACB
         CLC   RETCD(2),ZERO           RETURN CODE WORKAREA NON-ZERO
         BNE   BADTERM                 YES
         TM    DEFLG,X'FF'             NO. ANY DEFAULTS TAKEN
         BO    BADTERM                 YES
         L     SAVEREG,4(SAVEREG)      GET POINTER TO SAVE AREA
         L     RETREG,12(SAVEREG)      RESTORE REGISTER 14
         SPM   RETREG                  RESTORE USER'S PROGRAM MASK
         RETURN (15,12),RC=0           RESTORE OTHER REGISTERS
*
BADTERM  LH    ENTREG,RETCD            GET RETURN CODE
         N     ENTREG,RRC
         TM    DEFLG,X'FF'             ANY DEFAULTS TAKEN
         BZ    BADOUT                  NO
         LTR   ENTREG,ENTREG           YES. RETURN CODE
         BM    BADOUT                  NEGATIVE-MULTIPLE ERROR FLAG SET
         BP    ORIN                    POSITIVE-OR IN MULTIPLE ERROR
         LA    ENTREG,X'28'            ZERO,SET RETURN CODE
BADOUT   L     SAVEREG,4(SAVEREG)      GET POINTER TO SAVE AREA
         L     RETREG,12(SAVEREG)      RESTORE REGISTER 14
         SPM   RETREG                  RESTORE USER'S PROGRAM MASK
         RETURN (0,12),RC=(15)
*
ORIN     O     ENTREG,HIGHBIT          SET MULTIPLE ERROR FLAG
         B     BADOUT                  AND EXIT
*
STOLP    L     EVNACC,OACBAD           SAVE UPDATED OLP
         ST    OLPREG,16(EVNACC)
ENDTERM  CLC   RETCD(2),ZERO           IMMEDIATE TERMINATION-
         BNE   ORIN                    SET MULTIPLE ERROR
         TM    DEFLG,X'FF'             FLAG IF ANY OTHER
         BO    ORIN                    ERROR CONDITIONS DETECTED
         B     BADOUT                  AND EXIT
*
GDOAOVER TM    OVERFLAG,X'FF'          IS OVERFLOW FLAG SET
         BO    RC24                    YES, IMMEDIATE ERROR EXIT
         SAVE  (14,12)                 NO, SAVE REGISTERS
         LR    PARLIST,SAVEREG         SET UP CALL TO
         L     SAVEREG,4(SAVEREG)      USER'S OVERFLOW
         L     ENTREG,OACBAD           ROUTINE
         ST    OLPREG,16(ENTREG)       UPDATE OLP
         L     ENTREG,8(ENTREG)
         BALR  RETREG,ENTREG           CALL OVERFLOW ROUTINE
         LR    SAVEREG,PARLIST         RESTORE REGISTERS
         LM    14,12,12(SAVEREG)
         MVI   OVERFLAG,X'FF'
         L     EVNACC,OACBAD           GET NEW VALUES
         L     OLPREG,16(EVNACC)       OF OLP
         L     GDOACNT,0(EVNACC)       AND NUMBER OF
         A     GDOACNT,4(EVNACC)       AVAILABLE BYTES
         SR    GDOACNT,OLPREG          IN GDOA
         SH    GDOACNT,H4              ALLOW SPACE FOR GTRU
         B     FINOPT                                            A29393
*
RC24     LA    ENTREG,24               OLP NOT SET TO PERMIT
         B     ENDTERM                 STORAGE OF DATA AFTER OVERFLOW
*
RC4      LA    ENTREG,4                ILLEGAL GRID LIMITS
         B     ENDTERM
*
         DS    0F
RRC      DC    X'800000FF'
HIGHBIT  DC    X'80000000'
*
GETNEXT  SAVE  (14,12)                 SAVE REGISTERS
*
         LA    PARLIST,SVAR2           GET NEW SAVE AREA
         ST    SAVEREG,4(PARLIST)
         ST    PARLIST,8(SAVEREG)      CHAIN SAVE AREAS
         LR    SAVEREG,PARLIST
*
*
*
*
UTEST    MVC   MODE(1),UMODE           MOVE MODE INTO TEMPORARY
*                                      LOCATION
         SR    PARLIST,PARLIST         SET POINTER TO X-U VALUES
GETLOOP  TM    PTSGSW,X'40'            FIRST POINT THIS CALL
         BO    INITIAL                 YES, INITIALIZE
*
         TM    MODE,X'80'              IF VALUES DERIVED FROM
         BO    INC                     TABLE,
         L     EVNACC,UINDEX(PARLIST)  GET INDEX FACTOR TO TABLE
         MH    EVNACC,H4
         A     EVNACC,UTAB(PARLIST)    ADD ADDRESS OF LAST ENTRY USED
         ST    EVNACC,UTAB(PARLIST)    STORE ADDRESS OF CURRENT ENTRY
*
         TM    MODE,X'40'              IF VALUES INCREMENTAL
         BZ    ABS
INCRMNT  TM    MODE,X'10'              CHECK MODE
         BZ    FXINC
         LE    FPACC,U(PARLIST)        EVALUATE NEW VALUE
         AE    FPACC,0(EVNACC)         IN FLOATING-POINT
         STE   FPACC,U(PARLIST)        AND STORE
         B     SCALE
*
FXINC    L     ODDACC,U(PARLIST)       EVALUATE NEW VALUE
         A     ODDACC,0(EVNACC)        IN INTEGER
         ST    ODDACC,U(PARLIST)       AND STORE
         B     SCALE
*
INC      LA    EVNACC,UINCR(PARLIST)   GET ADDRESS OF FIXED INCREMENT
         B     INCRMNT
*
INITIAL  L     EVNACC,UADDR(PARLIST)   GET ADDRESS OF FIRST ENTRY
         ST    EVNACC,UTAB(PARLIST)    INITIALIZE BOOKEEPING
*
ABS      L     ACC,0(EVNACC)           GET ABSOLUTE VALUE
         ST    ACC,U(PARLIST)          OF COORDINATE
*
SCALE    CLI   S,C'B'                  IF SCALING NOT REQUESTED
         BNE   SKPSC                   SKIP IT
         L     ODDACC,XALTER(PARLIST)  GET MULTIPLICATIVE CONSTANT
         LTR   ODDACC,ODDACC           IF SCALING CONSTANTS HAVE
         BZ    SCINT                   CHANGED, REEVALUATE
SCALE1   TM    MODE,X'10'              CHECK MODE
         BZ    FXSCL                   INTEGER
*
         LE    FPACC,XALTER(PARLIST)   MULTIPLY COORDINATE AND
         ME    FPACC,U(PARLIST)        MULTIPLICATIVE CONSTANT
         AE    FPACC,XCON(PARLIST)     ADD ADDITIVE CONSTANT
         STE   FPACC,OPTIMSV(PARLIST)  STORE SCALED VALUE
FIXVAL   ST    PARLIST,0(SAVEREG)      PRESERVE POINTER
         LA    PARLIST,OPTIMSV(PARLIST)
         BAL   RETREG,FIX              CONVERT COORDINATE TO INTEGER
         L     PARLIST,0(SAVEREG)      GET POINTER
         LTR   ENTREG,ENTREG
         BZ    VTEST
         L     SAVEREG,4(SAVEREG)      ERROR(S) IN CONVERSION
         RETURN (14,12),RC=(15)        IMMEDIATE RETURN
*
FXSCL    L     ODDACC,XALTER(PARLIST)  SCALE POINT
         M     EVNACC,U(PARLIST)       USING
         SRDA  EVNACC,12               INTEGER
         A     ODDACC,XCON(PARLIST)    ARITMETIC
         ST    ODDACC,OPTIMSV(PARLIST) AND STORE
VTEST    LTR   PARLIST,PARLIST         IF NON-ZERO,
         BC    7,GETERM                EXIT
*
         MVC   MODE(1),VMODE           SET UP VALUES FOR
         LA    PARLIST,4               V-Y VALUES
         B     GETLOOP
SKPSC    L     ODDACC,U(PARLIST)       SET COORDINATE = UNSCALED
         ST    ODDACC,OPTIMSV(PARLIST) VALUE
         TM    MODE,X'10'              CONVERT TO INTEGER
         BO    FIXVAL                  IF NECESSARY
         B     VTEST
SCINT    TM    MODE,X'10'              CHECK MODE
         BO    FLTSCALE                CALL
FIXSCALE L     ACC,GX2(PARLIST)        COMPUTE FIFFERENCE OF
         S     ACC,GX1(PARLIST)        GRID LIMITS
         L     ACC1,SX2(PARLIST)       COMPUTE DIFFERENCE OF
         S     ACC1,SX1(PARLIST)       SCREEN LIMITS
         L     ACC2,DX2(PARLIST)       COMPUTE DIFFERENCE OF
         S     ACC2,DX1(PARLIST)       DATA LIMITS
         BC    12,RC16                 ILLEGAL DATA LIMITS
*
         L     ODDACC,FOURK            GET CONSTANT
         MR    EVNACC,ACC              MULTIPLY BY GRID DIFFERENCE
         SLDA  EVNACC,12               SCALE TO PERMIT CONSTANTS
*                                      LESS THAN 1
         DR    EVNACC,ACC1             DIVIDE BY DIFFERENCE IN SCREEN
         LR    EVNACC,ODDACC           AND DATA LIMITS
         SRDA  EVNACC,32
         DR    EVNACC,ACC2
         ST    ODDACC,XALTER(PARLIST)  STORE MULTIPLICATIVE CONSTANT
*
         LR    ODDACC,ACC              COMPUTE 4095(GX2-GX1)
         M     EVNACC,FOURK
         SLDA  EVNACC,16               SCALE TO IMPROVE ACCURACY
         DR    EVNACC,ACC1             DIVIDE BY SX2-SX1
         M     EVNACC,DX1(PARLIST)     GET REST OF NUMERATOR
         SRDA  EVNACC,16               REMOVE SCALING FACTOR
         DR    EVNACC,ACC2             DIVIDE BY DX2-DX1
         ST    ODDACC,DELTAX           STORE COMPLETED TERM
*
         L     ODDACC,GX1(PARLIST)     COMPUTE GX1-SX1
         S     ODDACC,SX1(PARLIST)
         M     EVNACC,FOURK            COMPUTE 4095(GX1-SX1)
         DR    EVNACC,ACC1             FINISH COMPUTATION OF TERM
         S     ODDACC,DELTAX           COMPUTE FULL ADDITIVE SONSTANT
         ST    ODDACC,XCON(PARLIST)    AND STORE IT
         B     SCALE1                              ROUTINE
FLTSCALE LE    FPACC,GX2(PARLIST)      COMPUTE  G2-G1
         SE    FPACC,GX1(PARLIST)
         LE    FPACC1,SX2(PARLIST)     COMPUTE  S2-S1
         SE    FPACC1,SX1(PARLIST)
         LE    FPACC2,DX2(PARLIST)     COMPUTE  D2-D1
         SE    FPACC2,DX1(PARLIST)
         BC    12,RC16                 ILLEGAL DATA LIMITS
*
         LE    FPACC3,FOURKE           GET CONSTANT (4096)
         MER   FPACC3,FPACC            MULTIPLY BY DIFFERENCE IN
*                                      GRID LIMITS
         DER   FPACC3,FPACC1           DIVIDE BY DIFFERENCE IN SCREEN
*                                      LIMITS
         DER   FPACC3,FPACC2           DIVIDE BY DIFFERENCE IN DATA
*                                      LIMITS
         STE   FPACC3,XALTER(PARLIST)  STORE MULTIPLICATIVE CONSTANT
*
         LE    FPACC3,GX1(PARLIST)     COMPUTE G1-S1
         SE    FPACC3,SX1(PARLIST)
         MER   FPACC3,FPACC2           COMPUTE (G1-S1)(D2-D1)
         ME    FPACC,DX1(PARLIST)      COMPUTE (D1)(G2-G1)
         SER   FPACC3,FPACC            COMPUTE VARIABLE PART OF
*                                      NUMERATOR
         ME    FPACC3,FOURKE           COMPUTE COMPLETE NUMERATOR
         DER   FPACC3,FPACC1           DIVIDE BY DIFFERENCES IN SCREEN
         DER   FPACC3,FPACC2           AND DATA DIFFERENCES
         STE   FPACC3,XCON(PARLIST)    STORE ADDITIVE CONSTANT
*
         B     SCALE1                              SCALING CONSTANTS
*
GETERM   MVC   DELTAX(8),OPTIMSV       GET NEW COORDINATES
         L     SAVEREG,4(SAVEREG)      GET POINTER TO SAVE AREA
         RETURN (14,12),RC=0
*
*        ILLEGAL DATA LIMITS
RC16     L     SAVEREG,4(SAVEREG)      GET POINTER TO SAVE AREA
         RETURN (14,12),RC=16
*
FOURK    DC    F'4095'
FOURKE   DC    E'4095'
BEAM     DC    X'0FFFFFFF'
*
FIX      SAVE  (14,12)
         SR    ENTREG,ENTREG
         L     ODDACC,0(PARLIST)       GET MANTISSA OF NUMBER
         N     ODDACC,MANTISSA         TO BE CONVERTED
         LH    EVNACC,0(PARLIST)       GET CHARACTERISTIC OF
         N     EVNACC,CHAR             NUMBER TO BE CONVERTED
         BZ    RC12                    IF ZERO, CHECK FOR ZERO MANTISSA
         SRA   EVNACC,6
         SH    EVNACC,H256             SEE IF NUMBER CAN BE CONVERTED
         BC    12,UNDERFLO             NO, EXPONENT LESS THAN 0
         CH    EVNACC,H32
         BH    OVERFLOW                NO, EXPONENT GREATER THAN 8
         BE    POSOVER                 OVERFLOW POSSIBLE ON CONVERSION
         SH    EVNACC,H24              GET SHIFT COUNT FOR MANTISSA
         BP    LFTSHIFT                POSITIVE, SHIFT LEFT
         LPR   EVNACC,EVNACC           NEGATIVE, CONVERT TO PROPER
         SRA   ODDACC,0(EVNACC)        SHIFT COUNT AND SHIFT RIGHT
SIGN     TM    0(PARLIST),X'80'        NUMBER TO BE CONVERTED NEGATIVE
         BZ    STFIXED                 NO, JUST STORE IT
         LNR   ODDACC,ODDACC           YES, COMPLEMENT IT
STFIXED  ST    ODDACC,0(PARLIST)
         RETURN (14,12),RC=(15)
*
LFTSHIFT SLA   ODDACC,0(EVNACC)        SHIFT MANTISSA LEFT
         B     SIGN                    CHECK SIGN
*
UNDERFLO SR    ODDACC,ODDACC           SET NUMBER TO 0
         B     STFIXED
*
POSOVER  TM    1(PARLIST),X'80'        HIGH-ORDER BIT OF MANTISSA=1
         BZ    LFTSHIFT                NO, OVERFLOW WILL NOT OCCUR ON
*                                      CONVERSION
OVERFLOW SR    ODDACC,ODDACC           SET NUMBER =0
         LA    ENTREG,16               SET RETURN CODE
         B     STFIXED
*
RC12     LTR   ODDACC,ODDACC           IF MANTISSA
         BZ    UNDERFLO                IS NON-ZERO
         LA    ENTREG,12               SET RETURN CODE
         B     UNDERFLO
H24      DC    H'24'
H32      DC    H'32'
H256     DC    H'256'
         DS    0F
CHAR     DC    X'00007F00'             MASK FOR CHARACTERISTIC
MANTISSA DC    X'00FFFFFF'             MASK FOR MANTISSA
DISPLACE SAVE  (14,12)                 SAVE GENERAL REGISTERS
*
*   DO NOT SET UP SAVE AREA SINCE LOWESR LEVEL SUBROUTINE
*
         LA    ABIND,WRKAR             GET ADDRESS OF TEMPORARY
         LH    INCIND,ABSPTS           ORDER STORAGE AREAS
         MH    INCIND,H4
         AR    INCIND,ABIND
         LH    COUNT,ABSPTS            GET NO. OF ABSOLUTE VECTORS
         XC    INCPTS(2),INCPTS        SET NO. OF INCREMENTAL PTS.=0
         LTR   COUNT,COUNT             NO ABSOLUTE VECTORS,
         BZ    DISPRET                 GENERATE NO INCREMENTAL
         LA    EVNACC,CURMOD           GET NUMBER OF AVAILABLE BYTES
         SR    EVNACC,INCIND           IN THE WORK AREA
         SRA   EVNACC,1                AND NUMBER OF INCREMENTAL
*                                      VECTORS THAT WILL FIT
         STH   EVNACC,BTCNT            AND STORE
*
*   COMPUTE DISPLACEMENT TO NEXT POINT
*
NEXT     LH    EVNACC,XP               CURRENT X
         N     EVNACC,REDUCE           ELIMINATE LOW-ORDE 2 BITS
         LH    ODDACC,0(ABIND)         NEXT X
         N     ODDACC,HALFBEAM         ELIMINATE BEAM BIT
         SR    ODDACC,EVNACC           GET X-DISPLACEMENT
         ST    ODDACC,DELTAX           AND STORE
*
         LH    EVNACC,YP               CURRENT Y
         N     EVNACC,REDUCE           ELININATE LOW-ORDER 2 BITS
         LH    ODDACC,2(ABIND)         NEXT Y
         SR    ODDACC,EVNACC           GET Y-DISPLACEMENT
         ST    ODDACC,DELTAY           AND STORE
*
*
SPLITU   L     EVNACC,DELTAX           GET MAGNITUDE OF
         LPR   MAGDELX,EVNACC          X-DISPLACEMENT
         L     ODDACC,DELTAY           GET MAGNITUDE OF
         LPR   MAGDELY,ODDACC          Y-DISPLACEMENT
         CR    MAGDELX,MAGDELY
         BL    YHIU                    Y GREATER
         BE    XEQYU                   EQUAL
*                                      X GREATER
         TM    DELTAX,X'80'            SEE IF DELTAX NEGATIVE
         BO    XHIN
         LA    DELX,252                NO, ASSUME = 252 FOR STEP
         LA    ODDACC,252
         B     XHIUC
XHIN     LH    DELX,LOWLIM             DELTAX NEGATIVE, ASSUME = -256
         LH    ODDACC,LOWLIM
XHIUC    M     EVNACC,DELTAY           GET Y DISPLACEMENT FOR STEP
         D     EVNACC,DELTAX
         LR    DELY,ODDACC             SAVE Y DISPLACEMENT
*
NOXS     L     EVNACC,DELTAX           GET NUMBER OF VECTORS
         SRDA  EVNACC,32               WITH LENGTH DELX
         DR    EVNACC,DELX             TO DISPLAY ONE WITH
         LR    NINC,ODDACC             LENGTH DELTAX
*
REMU     L     RX,DELTAX               COMPUTE X-DISPLACEMENT
         LR    ODDACC,DELX             REMAINING AFTER FIXED
         MR    EVNACC,NINC             LENGTH VECTORS USED
         SR    RX,ODDACC
*
         L     RY,DELTAY               COMPUTE Y-DISPLACEMENT
         LR    ODDACC,DELY             REMAINING AFTER
         MR    EVNACC,NINC             OTHER VECTORS USED
         SR    RY,ODDACC
*
         SR    ERRX,ERRX               SET BOTH ERRORS
         SR    ERRY,ERRY               TO ZERO
*
CONVRTU  CH    NINC,BTCNT              MORE VECTORS NECESSARY THAN
*                                      WILL FIT INTO THE WORKAREA
         BNL   WRKOVER                 PREPARE FOR WORKAREA OVERFLOW
         LA    ACC,1                   ADD N+1
         AH    ACC,INCPTS              TO NUMBER
         AR    ACC,NINC                OF INCREMENTAL
         STH   ACC,INCPTS              DATA POINTS
         LTR   NINC,NINC               ONLY ONE INCREMENTAL VECTOR
         BZ    LASTSEG                 YES
*
CNVRTLPU AR    ERRX,DELX               ADD CUMULATIVE ERROR TO
         L     ACC,REDUCE              X-DISPLACEMENT.
         NR    ACC,ERRX                ELIMINATE LOW-ORDER 2 BITS
         SR    ERRX,ACC                GET ERROR FROM THIS STEP
         SRA   ACC,1                   CONVERT X-DISPLACEMENT
         STC   ACC,0(INCIND)           TO INCREMENTAL DATA FROM
         OI    0(INCIND),X'01'         AND STORE
*
         AR    ERRY,DELY               ADD CUMULATIVE ERROR TO
         L     ACC,REDUCE              Y-DISPLACEMENT
         NR    ACC,ERRY                ELIMINATE LOW-ORDER 2 BITS
         SR    ERRY,ACC                GET ERROR FROM THIS STEP
         SRA   ACC,1                   CONVERT Y-DISPLACEMENT TO
         STC   ACC,1(INCIND)           INCREMENTAL DATA FORM & STORE
         TM    0(ABIND),X'40'          IF ABSOLUTE VECTOR
         BO    BLNKPT                  BLANKED, BLANK
         TM    PTSGSW,X'10'            BLANK BEAM
         BO    UPDTU                   IF POINT PLOT
BLNKPT   OI    1(INCIND),X'01'         REQUESTED
*
UPDTU    LA    INCIND,2(INCIND)        INCREMENT POINTER TO WORKAREA
         BCT   NINC,CNVRTLPU           PROCESS NEXT SEGMENT
*
LASTSEG  AR    ERRX,RX                 LAST SEGMENT-ADD CUMULATIVE
         L     ACC,REDUCE              ERROR TO X-REMAINDER
         NR    ACC,ERRX                ELIMINATE LOW-ORDER 2 BITS
         SRA   ACC,1                   CONVERT TO INCREMENTAL DATA
         STC   ACC,0(INCIND)           FORM AND STORE
         OI    0(INCIND),X'01'
*
         AR    ERRY,RY                 ADD CUMULATIVE ERROR TO
         L     ACC,REDUCE              Y-REMAINDER
         NR    ACC,ERRY                ELIMINATE LOW-ORDER 2 BITS
         SRA   ACC,1                   CONVERT TO INCREMENTAL DATA FORM
         STC   ACC,1(INCIND)           & STORE WITH BEAM INTENSIFIED
         TM    0(ABIND),X'40'          IF ABSOLUTE VECTOR
         BZ    ENDTEST                 BLANKED, BLANK
         OI    1(INCIND),X'01'         INCREMENTAL
*
ENDTEST  MVC   XP(4),0(ABIND)          UPDATE PHYSICAL BEAM POSITION
         NI    XP,X'0F'                TURN OFF BEAM BIT
         LA    INCIND,2(INCIND)        INCREMENT
         LA    ABIND,4(ABIND)                    POINTERS
         BCT   COUNT,NEXT              BRANCH BACK IF NOT FINISHED
*                                      AND GO THROUGH THE LOOP AGAIN
DISPRET  RETURN (14,12),RC=0           IF FINISHED, RETURN TO CALLING
*                                      PROGRAM
*
*   ROUTINE TO SPLIT VECTOR INTO SMALLER ONES-UNBLANKED
*
YHIU     TM    DELTAY,X'80'            SEE IF DELTAY NEGATIVE
         BO    YHIN
         LA    DELY,252                NO, ASSUME = 252 FOR STEP
         LA    ODDACC,252
         B     YHIUC
YHIN     LH    DELY,LOWLIM             DELTAY NEGATIVE, ASSUME = -256
         LH    ODDACC,LOWLIM           FOR STEP
*
YHIUC    M     EVNACC,DELTAX           GET X-DISPLACEMENT FOR STEP
         D     EVNACC,DELTAY
         LR    DELX,ODDACC             AND SAVE IT
         L     EVNACC,DELTAY           GET NUMBER OF
         SRDA  EVNACC,32               FIXED-LENGTH
         DR    EVNACC,DELY             VECTORS TO BE
         LR    NINC,ODDACC             DISPLAYED
*
         B     REMU
*
XEQYU    LA    DELX,252                ASSUME DISPLACEMENTS OF
         LA    DELY,252                252 MAGNITUDE
         TM    DELTAX,X'80'            IF DELTAX IS NAGATIVE,
         BZ    XEQU
         LNR   DELX,DELX               MAKE DELX NEGATIVE
*
XEQU     TM    DELTAY,X'80'            GET SIGN OF DELTAY
         BZ    YEQU                    AND ADJUST SIGN OF DISPLACEMENT
         LNR   DELY,DELY               TO AGREE
*
YEQU     B     NOXS
*
WRKOVER  RETURN (14,12),RC=36
*
         DS    0F
REDUCE   DC    X'FFFFFFFC'
HALFBEAM DC    X'00000FFF'
SGCHECK  SAVE  (14,12)
         LR    PARBASE,ACC             ADDRESSABILITY FOR PARAMETERS
         USING SGPAR,PARBASE
*
         LA    PARLIST,SVAR2           CHAIN SAVE
         ST    SAVEREG,4(PARLIST)                 AREAS
         ST    PARLIST,8(SAVEREG)
         LR    SAVEREG,PARLIST
*
         MVI   MODE,X'C0'              SAVE FLAGS,
         NC    MODE(1),PTPOS           IF ANY
         IC    PARLIST,PTPOS           SET POSITION OF
         SRL   PARLIST,3               INITIAL POINT OF VECTOR
         STC   PARLIST,PTPOS           EQUAL TO POSITION OF
         NI    PTPOS,X'07'             TERMINAL POINT OF LAST VECTOR
         OC    PTPOS(1),MODE           RESTORE FLAG
*
         LM    EVNACC,ODDACC,NXTX      GET NEXT POINT
         STM   EVNACC,ODDACC,PT2X      STORE IN DATA AREA FOR
*                                      SCISSORING ROUTINE
*
         CH    EVNACC,X1               X VALUE WITHIN GRID
         BL    XSCR                    NO
         CH    EVNACC,X2               MAYBE
         BH    XSCR                    NO
         CH    ODDACC,Y1               Y VALUE WITHIN GRID
         BL    YSCR                    NO
         CH    ODDACC,Y2               MAYBE
         BH    YSCR                    NO
         OI    PTPOS,X'08'             POINT WITHIN GRID
         B     TEST
*
XSCR     CH    EVNACC,ZERO             X VALUE WITHIN SCREEN
         BL    OFFSCR                  NO
         CH    EVNACC,ZERO+4           MAYBE
         BH    OFFSCR                  NO
YSCR     CH    ODDACC,ZERO             Y VALUE WITHIN SCREEN
         BL    OFFSCR                  NO
         CH    ODDACC,ZERO+4           MAYBE
         BH    OFFSCR                  NO
         OI    PTPOS,X'10'             POINT BETWEEN SCREEN & GRID
         B     TEST
*
OFFSCR   OI    PTPOS,X'20'             POINT OFF- SCREEN
*
TEST     TM    PTPOS,X'07'             CALL JUST TO SET SWITCHES
         BZ    GETOUT                  FOR INITIAL POINT-- EXIT
*
         TM    PTSGSW,X'10'            POINT PLOT
         BZ    PTPLTCHK                YES - CHECK IT
         TM    PTPOS,X'09'             VECTOR PLOT- BOTH POINTS
         BO    ONEPLOT                 WITHIN GRID, ADJUSTED X,Y VALUES
*                                      = INPUT VALUES
         TM    PTSGSW,X'02'            SHOW ALL POINTS IN SCREEN
         BZ    GRDSCIS                 NO
         TM    PTPOS,X'24'             YES. BOTH POINTS ON SCREEN
         BZ    ONEPLOT                 YES, PLOT VECTOR
         MVI   MODE,X'04'              MASKS FOR PT1
         MVI   MODE+1,X'20'            AND PT2 OUTSIDE BOUNDARY
         LA    PARLIST,ZERO            BOUNDARY
         B     SCRTSTA
*
GRDSCIS  MVI   MODE,X'06'              MASKS FOR PT1
         MVI   MODE+1,X'30'            AND PT2 OUTSIDE BOUNDARY
         LA    PARLIST,X1              BOUNDARY
SCRTSTA  TM    BV21,X'FF'              INCREMENTAL POSITIONING
         BO    SPTST                   CONFINE TERMINATION TESTS
*                                      TO SECOND VECTOR ONLY
         TM    PTPOS,X'24'             EITHER POINT OFF SCREEN
         BZ    GRDTSTA                 NO, TEST FOR GRID TERMINATION
SCRTST   TM    PTSGSW,X'08'            TERMINATE IF SCREEN EXCEEDED
         BO    SCRNTERM                YES
*
*                                      TO SECOND POINT ONLY
GRDTSTA  TM    BV21,X'FF'              INCREMENTAL POSITIONING
         BO    SPTST2                  YES, CONFINE TERMINATION TESTS
GRDTST   TM    PTSGSW,X'04'            TERMINATE IF GRID EXCEEDED
         BO    GRIDTERM                YES
GRDTSTB  ST    PARLIST,SABL            STORE POINTER TO BOUNDARY
*
         MVC   PT1X(8),X               PREVIOUS POINT
*
         LOAD  EP=GOFFSG               LOAD OFF SCREEN/OFF GRID ROUTINE
         LR    ENTREG,ACC              GET ADDRESS OF ENTRY POINT
         LA    PARLIST,SABL            POINTER TO PARAMETER LIST
         CALL  (15)                    CALL IT
         DELETE EP=GOFFSG
*
         L     EVNACC,NI               GET NUMBER OF INTERSECTIONS
         CH    EVNACC,H1
         BE    ONEINTS                 ONE
         BH    TWOINTS                 TWO
         IC    EVNACC,MODE+1           ZERO- IS END POINT ON BOUNDARY
         EX    EVNACC,TSTPOS
         BC    7,SUPRESS               NO, SUPRESS PLOT
ONEPLOTB MVC   ADJX1(2),PT2X+2         YES, POSITION BEAM
         MVC   ADJY1(2),PT2Y+2
         MVI   BV1,X'FF'               BLANK BEAM
         B     ONEPLT
*
ONEINTS  IC    EVNACC,MODE             FIRST POINT IN BOUNDARY
         EX    EVNACC,TSTPOS
         BZ    ONEPLOTS                YES
         IC    EVNACC,MODE+1           NO. SECOND POINT IN BOUNDARY
         EX    EVNACC,TSTPOS
         BC    7,SUPRESS               NO, SUPPRESS PLOT
         MVC   ADJX1(4),INTS1X         POSITION TO INTERSECTION
         MVC   ADJX2(2),PT2X+2         DRAW TO SECOND POINT
         MVC   ADJY2(2),PT2Y+2
TWOPLT   MVI   PTCNT,X'FF'             TWO VECTORS
         MVI   BV1,X'FF'               FIRST ONE BLANKED
         MVI   SUPLT,X'00'             ALLOW PLOT
         B     GETOUT
*
ONEPLOTS MVC   ADJX1(4),INTS1X         PLOT TO POINT OF INTERSECTION
         MVI   BV1,X'00'               UNBLANKED
         TM    PTSGSW,X'02'            SCISSORING AT GRID
         BZ    RC44                    YES
         B     RC48                    NO
*
TWOINTS  MVC   ADJX1(8),INTS1X         PLOT FROM FIRST TO SECOND
         B     TWOPLT                  INTERSECTION POINTS
*
ONEPLOT  MVC   ADJX1(2),PT2X+2         MOVE INPUT DATA INTO
         MVC   ADJY1(2),PT2Y+2         OUTPUT LOCATION
         MVI   BV1,X'00'               UNBLANKED
ONEPLT   MVI   SUPLT,X'00'             PERMIT PLOT
         MVI   PTCNT,X'0F'             OF ONE POINT
GETOUT   L     SAVEREG,4(SAVEREG)      RETURN TO CALLING
         RETURN (14,12),RC=0           ROUTINE
*
SPTST    TM    PTPOS,X'20'             SECOND POINT OFF SCREEN
         BO    SCRTST                  TEST FOR OFF SCREEN TERMINATION
SPTST2   TM    PTPOS,X'30'             SECOND POINT OFF GRID
         BO    GRDTST                  TEST FOR OFF GRID TERMINATION
         B     GRDTSTB                 NO, SCISSOR BUT DO NOT END
TSTPOS   TM    PTPOS,X'00'             TEST POINT POSITION SWITCH
*
GRIDTERM L     SAVEREG,4(SAVEREG)      IMMEDIATE TERMINATION IF GRID
         RETURN (14,12),RC=28          LIMITS EXCEEDED
*
SCRNTERM L     SAVEREG,4(SAVEREG)      IMMEDIATE TERMINATION IF SCREEN
         RETURN (14,12),RC=32          LIMITS EXCEEDED
*
RC44     CLC   RETCD(2),ZERO           IF NOT FIRST ERROR DETECTED,
         BE    RC44A
         MVI   RETCD,X'80'             SET HIGH ORDER BIT OF RC
RC44A    MVI   RETCD+1,44              SET RETURN CODE IN WORKAREA=44
         B     ONEPLT
*
RC48     CLC   RETCD(2),ZERO           IF NOT FIRST ERROR DETECTED
         BE    RC48A
         MVI   RETCD,X'80'             SET HIGH-ORDER BIT OF RC
RC48A    MVI   RETCD+1,48              SET RETURN CODE IN WORKAREA=48
         B     ONEPLT
PTPLTCHK MVC   ADJX1(2),NXTX+2         SET UP COORDINATES OF POINT
         MVC   ADJY1(2),NXTY+2
         TM    PTPOS,X'08'             POINT WITHIN GRID
         BO    ONEPLOT                 PLOT IT AS IS
         TM    PTSGSW,X'04'            TERMINATE IF
         BO    GRIDTERM                GRID LIMITS EXCEEDED
         TM    PTPOS,X'10'             POINT BETWEEN SCREEN AND GRID
         BZ    PTOFFSCR                NO- OFF SCREEN
         TM    PTSGSW,X'02'            YES. PLOT ALL POINTS ON SCREEN
         BO    ONEPLOT                 YES.
         B     SUPRESS                 NO. SUPPRESS PLOT
*
PTOFFSCR TM    PTSGSW,X'08'            TERMINATE IF SCREEN LIMITS
         BO    SCRNTERM                EXCEEDED
SUPRESS  MVI   SUPLT,X'FF'             SUPRESS PLOT OF POINT
         MVI   PTCNT,X'00'             SET POINT COUNT =0
         MVI   ABSPTS,X'00'            SET ABSOLUTE POINT COUNT =0
         B     GETOUT
*
*
*
ZERO     DC    H'0,0'                  SCREEN LIMITS- LOWER LEFT CORNER
         DC    H'4095,4095'              -UPPER RIGHT CORNER
H1       DC    H'1'
H2       DC    H'2'
H3       DC    H'3'
H4       DC    H'4'
H5       DC    H'5'
HILIM    DC    H'255'                  MAXIMUM POSITIVE INCREMENT
LOWLIM   DC    H'-256'                 MAXIMUM NEGATIVE INCREMENT
GEPM     DC    X'2A00'                 SET MODE ABSOLUTE POINT
GEVM     DC    X'2A02'                 SET MODE ABSOLUTE VECTOR
GEPI2    DC    X'2A04'                 SET MODE INCREMENTAL POINT
GEVI2    DC    X'2A05'                 SET MODE INCREMENTAL VECTOR
         END
