         TITLE 'GRAPHIC SPECIFY ATTENTION ROUTINE'
***********************************************************************
*
* MODULE NAME:           IGC0007C (OS/VS2)
*
* DESCRIPTIVE NAME:      GRAPHIC SPECIFY ATTENTION ROUTINE
*
* COPYRIGHT:             NONE
*
* STATUS:                RELEASE 2.0
* FUNCTION:              THIS MODULE PERFORMS:
*
*FUNCTION:MAKE USER ATTENTION ROUTINE AVAILABLE FOR USE BY SYSTEM.
*        1.ENSURE A GACB NOT SPARED MORE THAN ONCE.
*        2.CREATE AN IRB AND IQE FOR USER ROUTINE.
*        2A. LOADS IGG019OK, ATTENTION INQUIRY MODULE
*        3.CREATE A ROUTINE ENTRY BLOCK(REB) FOR EACH GACB SPARED.
*        4.PLACE REB INTO LIST OF REBS ACCORDING TO USER ASSIGNED
*        PRIORITY.
*        5.UPDATE TASK ENTRY BLOCK'S(TE) REB CHAIN.
*FILL IN FROM SPECS******CONTINUED*NEXT*PAGE***************************
         EJECT
*ENTRY:VIA SVC 73 FROM P/P
*INPUT:GR#1 POINTS TO PARAMETER LIST
*OUTPUT:1.IRB
*       2.IQE
*       3.REB
*       4.UNIQUE RETURN CODES
*EXTERNAL ROUTINES:N/A
*EXIT:VIA SVC 73
*TABLES/WORK AREAS:N/A
*ATTRIBUTES:1.RE-ENTRANT
*           2.SUPERVISOR STATE
*           3.PRIVILEDGED
*           4.OPERATES ENABLED AND DISABLED
*NOTES:N/A
* CHANGE ACTIVITY:       MODULE HAS BEEN RESTRUCTURED TO CONSOLIDATE
*
*                        FIXES DROPPED LIST:
*
***********************************************************************
*
IGC0007C CSECT
* 019800,022000-022200,022800,026400-026600,053800-054000        S21016
* 056400                                                      LB  AOS/1
*C023000                                                         Y01021
*A096600-09690,A097100,A077100-077200,A179600,D095000        LG @ZM2357
*D058500,A097200,A165500,A160600,A166100,A161500             LG @ZM2357
         EJECT
*
*                                  STANDARD SYSTEM REGISTERS ---
*
         SPACE 3
PAREG0   EQU   0                       PARAM REG 0
PAREG1   EQU   1                       PARAM REG 1
RBASE    EQU   2                       BASE REGISTER
LENREG   EQU   3                       LOOP COUNT REG
GACBR    EQU   4                       GACB ADR REG
PARMR    EQU   5                       PARM LIST ADR REG
RLISTC   EQU   6                       CURRENT LIST PTR
RUCB     EQU   7                       UCB ADR PTR
RTE      EQU   8                       TE ADR PTR
R9       EQU   9                       WORK REG
R10      EQU   10                      WORK REG
R11      EQU   11                      WORK REG
R12      EQU   12                      WORK REG
R13      EQU   13
R14      EQU   14
RCODE    EQU   15                      RETURN CODE REGISTER
         EJECT
*          CONSTANTS USED IN THIS MODULE                              *
*                                                                     *
MULTI    EQU   X'20'                   INDICATE MULTIPLE DEVICES ON REB
DEBETNT  EQU   16                      OFFSET TO DEB # OF EXTENTS
LENGTH   EQU   2                       DISP.TO LENGTH OF LIST PARAM
NEXT     EQU   4                       CONSTANT INCREMENT
ONE      EQU   1                       CONSTANT
EXIT     EQU   3                       EXIT SVC NO.
NOADR    EQU   X'0C'                    NO GACB ADR RET. CODE
NOTGRPHC EQU   X'04'                   DCB NOT GRAPHIC RET CODE  S21016
UODCB    EQU   X'10'                   DCB NOT OPEN RET CODE     S21016
OFLGS    EQU   48                      OFLGS FIELD OF DCB
OPEN     EQU   X'10'                   OPEN BIT
DSORG    EQU   27                      DCB  DSORG DISP-
GRAPHIC  EQU   X'80'                   GRAPHIC DSORG BIT
DEB      EQU   44                      DISP.TO DEB ADR
UCB      EQU   32                      DISP.TO UCB ADR
UTEADR   EQU   28                      USER TE ADR
STEADR   EQU   32                      GRAPHIC INITIATOR TE ADR
TERTN    EQU   4                       ADDR OF 1ST ROUTINE ENTRY BLOCK
TETCB    EQU   8                       TCB PTR
TEFLGS   EQU   20                      TE FLAGS
TEGASIRB EQU   24                      GAS IRB PTR
TEGIR    EQU   28                      GRAPHIC INTERFACE RTN EP PTR
TE       EQU   X'80'                   TE FLAG
RENO     EQU   X'40'                   INDICATES RTNB POINTS TO A TE
RTNF     EQU   0                       LINK FIELD LOWER PRIORITY
RTNB     EQU   4                       LINK FIELD HIGHER PRIORITY
RTNUCB   EQU   8                       UCB PTR
RTNGACB  EQU   12                      GACB PTR
RTNIRB   EQU   16                      IRB ADR
RTNFLGS  EQU   20                      FLAGS
PRTY     EQU   22                      PRIORITY
RTNTCB   EQU   32                      OFFSET FOR REB TCB ADR
RTNQ2    EQU   28                      QUEUE LIST
PGACB    EQU   X'08'                   PREVIOUSLY SPARED
IQE      EQU   100
RSVD     EQU   40
ATTN     EQU   48                  IGG019OK-ADR DISPLACEMENT IN GACB
NXTAVL   EQU   96                      IRB NEXT AVL FLD
IRBIQE   EQU   8                       IRB ADR
IQETCB   EQU   12                      TCB PTR
OFF      EQU   X'FF'-RENO              RESET MASK FOR REB TE FLAG
ZEROO    EQU   0                       ZERO
CVTPTR   EQU   16                      PTR TO CVT
CURTCB   EQU   4                       OFFSET OF CURRENT TCB VIA CVT
MVTERR   EQU   X'14'
JSTCB    EQU   124
XDUMY    EQU   X'00'                    IMMED. OPERAND        LB  AOS/1
         EJECT
         BALR  RBASE,0                 SET UP BASE REGISTER
         USING *,RBASE                 DEFINE BASE REGISTER
         B     *+24
MODID    DC    C'IGC0007C.VS2R2.74337'          MODULE EYECATCHER ID
         LA    R10,ZEROO               ZERO MULTI DEVICE REG
         LR    PARMR,PAREG1            SAVE PARAM LIST ADR
         LA    RLISTC,NEXT(0,PARMR)    LOAD PTR TO CURRENT ENTRY
         SR    LENREG,LENREG           CLEAR REGISTER
         LH    LENREG,LENGTH(PAREG1)   LOAD LENGTH OF PARAM LIST
         LA    R12,ONE                 LOAD CONSTANT
         SR    LENREG,R12              DETERMINE NO. OF GACB ADRS.
         LTR   LENREG,LENREG           ARE THERE ANY GACB ADRS.
         BC    3,SP01                  BRANCH IF YES
         LA    RCODE,NOADR             LOAD RETURN CODE
         B     XCTLMSG                 GO INVOKE MSG RTN         S21016
*
SP01     L     GACBR,0(0,RLISTC)       LOAD GACB ADR
         LTR   GACBR,GACBR             GACB ADR=0
         BC    8,SPLOOP                BRANCH IF YES
         L     RUCB,NEXT(0,GACBR)      LOAD DCB  ADR
         LTR   RUCB,RUCB               DCB ADR=0
         BC    8,SPLOOP                BRANCH IF YES
         TM    OFLGS(RUCB),OPEN        IS DCB OPENED
         BC    1,SP02                  BRANCH IF YES
SP03     LA    RCODE,UODCB             INDICATE INVALID DCB
         B     XCTLMSG                 GO INVOKE MSG RTN         S21016
*
SP02     TM    DSORG(RUCB),GRAPHIC     IS IT A GRAPHIC DCB
         BC    1,SP02A                 BRANCH AROUND PD ROUTINES
         LA    RCODE,NOTGRPHC          LOAD RET CODE             S21016
         B     XCTLMSG                 GO INVOKE MSG RTN         S21016
         EJECT
SP02A    EQU   *                                                 S21016
         LA    RUCB,ZEROO(RUCB)        CLEAR HI-BYTE DCB ADDR LB Y01021
         DEBCHK (RUCB),TYPE=VERIFY,AM=GAM   VALIDATE DEB      LB Y01021
         LTR   RCODE,RCODE           CK RET CODE             LG @ZM2357
         BNZ   SP03                                          LG @ZM2357
         LR    RUCB,PAREG1             DEB ADDRESS            LB Y01021
         CLI   DEBETNT(RUCB),ONE       IS THIS A MULTI-DEVICE DEB
         BC    8,SP14                  BRANCH IF NO
         LA    R10,UCB(0,RUCB)         LOAD PTR TO FIRST UCB ADR PTR
         SR    R13,R13                 CLEAR REG
         IC    R13,DEBETNT(RUCB)       INSERT # OF EXTENTS
SP14     L     RUCB,UCB(0,RUCB)        LOAD UCB ADR
         LA    RUCB,ZEROO(0,RUCB)      CLEAR HI ORDER BYTE
         L     RTE,UTEADR(0,RUCB)      LOAD USER TE ADR
         LTR   RTE,RTE                 TEST IF TE ADR EXIST
         BC    8,SPLOOP                BRANCH IF NO
         TM    TEFLGS(RTE),TE          IS THIS A TASK ENTRY BLOCK
         BC    14,SPLOOP               BRANCH IF NO
         L     R9,RSVD(GACBR)          LOAD GACB REB FIELD
         LTR   R9,R9                   TEST IF REB ADR EXITS
         BC    8,SP23                  BRANCH IF NO
         LA    RCODE,PGACB             INDICATE PREVIOUSLY SPARED
         B     XCTLMSG                 GO INVOKE MSG RTN         S21016
*
*                   PICK UP CURRENT TCB ADDRESS
*
SP23     L     R14,CVTPTR              LOAD ADR OF CVT
         L     R14,ZEROO(R14)          LOAD PTR TO TCB DOUBLE WORD
         L     R14,CURTCB(R14)         LOAD CURRENT TCB ADDRESS
         LA    R14,ZEROO(R14)          CLEAR HI-ORDER BYTE
         L     R9,TETCB(RTE)           LOAD TE TCB ADR
         LA    R9,ZEROO(R9)             CLEAR HI-ORDER BYTE
         CR    R14,R9                  CURRENT TCB EQU TETCB (MVT?)
         BNE   SPMVT                   BRANCH IF NO
         EJECT
*
SP05     L     PAREG0,TEGIR(0,RTE)     LOAD INTERFACE ROUTINE ADR
         CIRB  EP=(0),SVAREA=YES,WKAREA=4
         LR    R12,PAREG1              SAVE IRB ADR
         LOAD  EP=IGG019OK         LOAD ATTNINQ CONTROL SECTION
         LR    R9,PAREG0             SAVE ADDRESS IGG0190K   LG @ZM2357
         L     PAREG0,REQUEST          BYTE REQUEST TO PARAM REG
         GETMAIN R,LV=(0)
         XC    0(40,PAREG1),0(PAREG1)  CLEAR CORE
         USING TCB,R14               R14 HAS TCB ADDR        LG @ZM2357
         MODESET  EXTKEY=TCB,WORKREG=11  SET KEY TO USER     LG @ZM2357
         LR    PAREG0,R9             RESTORE PAREG0          LG @ZM2357
         ST    PAREG0,ATTN(GACBR)    STR ADDR IN GACB+48     LG @ZM2357
         ST    PAREG1,RSVD(GACBR)      STORE REB ADR IN GACB
         MODESET  EXTKEY=SUPR                                LG @ZM2357
         DROP  R14                                           LG @ZM2357
         ST    GACBR,RTNGACB(PAREG1)   GACB ADR TO REB
         LTR   R10,R10                 REG=0
         BC    8,SP15                  BRANCH IF YES
         ST    R10,RTNUCB(PAREG1)      STORE PTR TO LIST OF UCB PTRS
         OI    RTNFLGS(PAREG1),MULTI   INDICATE UCB ADR IS A PTR AND
*                                      NOT A UCB ADR
         STC   R13,RTNFLGS+1(PAREG1)   STORE # OF EXTENTS IN REB
         B     SP16                    BRANCH
SP15     ST    RUCB,RTNUCB(PAREG1)     STORE UCB ADR IN REB
SP16     ST    R12,RTNIRB(PAREG1)      IRB ADR TO REB
         ST    R14,RTNTCB(PAREG1)      STORE CURRENT TCB ADR IN REB
         L     R9,ZERO                 LOAD ZERO
         IC    R9,0(PARMR)             INSERT PRIORITY
         STH   R9,PRTY(PAREG1)         PRIORITY TO REB
         XC    NXTAVL(32,R12),NXTAVL(R12)   ZERO CORE
         LA    R9,IQE(0,R12)           LOAD IQE ADR
         ST    R9,NXTAVL(R12)          STORE IN IRB NEXT AVL FLO
         ST    R12,IRBIQE(R9)          IRB ADR TO IQE
         ST    R14,IQETCB(R9)          STORE CURRENT TCB ADR IN IQE
         L     R9,TERTN(0,RTE)         LOAD REB PTR (FIRST)
         LTR   R9,R9                   ANY REBS
         BC    7,SP08                  BRANCH IF YES
         CLI   ENABL1,XDUMY             FORCE PAGE-IN         LB  AOS/1
         EJECT
*        SSM   ZERO                    DISABLE ALL INTERRUPTS
         ST    RTE,RTNB(PAREG1)        TE ADR TO RTNB FLD
         OI    RTNFLGS(PAREG1),RENO    INDICATE PTR TO A TE
         ST    PAREG1,TERTN(RTE)       REB ADR TO TE
*        SSM   SYSMSK                  ENABLE
ENABL1   EQU   *                        END OF DISABLED CODE  LB  AOS/1
SPLOOP   LA    RLISTC,NEXT(0,RLISTC)   INCREMENT CURRENT LIST PTR
         LA    R10,ZEROO               ZERO MULTI DEVICE REG
         BCT   LENREG,SP01             BRANCH IF MORE GACBS TO SERVICE
         L     RCODE,ZERO              LOAD RETURN CODE
         SVC   EXIT                    RETURN TO USER
SP08     CLC   PRTY(2,R9),PRTY(PAREG1) NEW PRIORITY HIGHEST
         BC    2,SP09                  BRANCH IF NO
         BC    8,SP11                  BRANCH IF PRIORITYS EQUAL
         CLI   ENABL2,XDUMY             FORCE PAGE-IN         LB  AOS/1
*        SSM   ZERO                    DISABLE ALL INTERRUPTS
SP13     MVC   RTNF(4,PAREG1),TERTN(RTE) MOVE LOWER PRTY REG ADR TO
*                                        RTNF FLD OF HIGHEST PRTY REB
         MVC   RTNB(4,PAREG1),RTNB(R9) MOVE LOWER PRTY REB RTNB FLD
*                                      TO HIGHER PTRY REB RTNB FLD
         OI    RTNFLGS(PAREG1),RENO    INDICATE HIGHER PRTY REB RTNB
*                                      FLD POINTS TO A TE
         ST    PAREG1,RTNB(R9)         PLACE HIGHER PRTY REB ADR INTO
*                                      RTNB FLD OF LOWER PRTY REB
         NI    RTNFLGS(R9),OFF         TURN OFF TE FLAG IN LOWER
*                                      PRTY REB
         ST    PAREG1,TERTN(RTE)       NEW HI PRTY REB ADR TO TE REB FD
*        SSM   SYSMSK                  ENABLE
ENABL2   EQU   *                        END OF DISABLED CODE  LB  AOS/1
         B     SPLOOP                  BRANCH
SP09     CLC   RTNF(4,R9),ZERO         IS THERE A LOWER PRTY REB
         BC    7,SP10                  BRANCH IF YES
         CLI   ENABL3,XDUMY             FORCE PAGE-IN         LB  AOS/1
*        SSM   ZERO                    DISABLE ALL INTERRUPTS
         ST    PAREG1,RTNF(R9)         REB ADR TO LOWER PRTY REB PTR IN
*                                      RTNF FLD OF HIGER PRTY REB
         ST    R9,RTNB(PAREG1)         SET LOWER PRTY REB RTNB FLD TO
*                                      POINT TO HIGHER PRTY REB
*        SSM   SYSMSK                  ENABLE
ENABL3   EQU   *                        END OF DISABLED CODE  LB  AOS/1
         B     SPLOOP                  BRANCH
         EJECT
SP10     L     R9,RTNF(0,R9)           LOAD ADR OF NEXT LOWER PRTY REB
         CLC   PRTY(2,R9),PRTY(PAREG1) PRESENT REB PRTY HIGHER THAN
*                                      NEW REB PRTY
         BC    2,SP09                  BRANCH IF YES
         BC    8,SP11                  BRANCH IF PRTYS EQUAL
         B     SP12                    BRANCH
SP11     TM    RTNFLGS(R9),MULTI       PRESENT REB CONTAIN UCB ADR
         BC    1,SP17                  BRANCH IF NO
         TM    RTNFLGS(PAREG1),MULTI   NEW REB CONTAIN UCB ADR
         BC    1,SP18                  BRANCH IF NO
         B     SP19                    BRANCH
SP17     TM    RTNFLGS(PAREG1),MULTI   NEW REB CONTAIN UCB ADR
         BC    1,SP19                  BRANCH IF NO
         B     SP21                    BRANCH
SP19     CLC   RTNUCB+1(3,R9),RTNUCB+1(PAREG1)   UCB ADRS EQUAL
         BC    7,SP09                  BRANCH IF NO
         B     SP12                    BRANCH
SP18     SR    R13,R13                 CLEAR REG
         IC    R13,RTNFLGS+1(PAREG1)   IN SERT  # OF EXTENTS
         L     R10,RTNUCB(PAREG1)      LOAD PTR TO UCB ADRS
SP20     CLC   RTNUCB+1(3,R9),ONE(R10)  UCB ADRS COMPARE
         BC    8,SP12                   BRANCH IF YES
         LA    R10,NEXT(0,R10)         LOAD PTR TO NEXT UCB ADR
         BCT   R13,SP20                BRANCH IF MORE TO CHECK
         B     SP09                     BRANCH
SP21     L     R10,RTNUCB(0,R9)         LOAD PTR TO UCB PTRS
         SR    R13,R13                  CLEAR REG
         IC    R13,RTNFLGS+1(R9)        INSERT # OF EXTENTS
SP22     CLC   RTNUCB+1(3,PAREG1),ONE(R10) UCB ADRS COMPARE
         BC    8,SP12                  BRANCH IF YES
         LA    R10,NEXT(0,R10)         LOAD PTR TO NEXT UCB ADR
         BCT   R13,SP22                BRANCH IF MORE
         B     SP09                    BRANCH
SP12     EQU   *                                              LB  AOS/1
         CLI   ENABL4,XDUMY             FORCE PAGE-IN         LB  AOS/1
*        SSM   ZERO                     DISABLE INTERRUPTS
         TM    RTNFLGS(R9),RENO        PRESENT POINT TO A TE
         BC    1,SP13                  BRANCH IS YES
         L     R11,RTNB(0,R9)          LOAD PREVIOUS REB ADR
         MVC   RTNF(4,PAREG1),RTNF(R11) MOVE PREVIOUS REB RTNF FLD TO
*                                       NEW PREVIOUS REB RTNF FLD TO
         ST    PAREG1,RTNF(R11)        SET PREVIOUS REB RTNF FLD TO
*                                      ADR OF NEW REB
         MVC   RTNB(4,PAREG1),RTNB(R9) SET NEW REB RTNB EQUAL PRESENT
*                                      REB RTNB FLD
         ST    PAREG1,RTNB(R9)         SET PRESENT REB RTND FLD EQUAL
*                                      NEW REB ADR
*        SSM   SYSMSK                  ENABLE
ENABL4   EQU   *                        END OF DISABLED CODE  LB  AOS/1
         B     SPLOOP                  BRANCH
         EJECT
*
*                   BEGIN OPTION 4 CHECK FOR VIOLATIONS
*
SPMVT    LR    R12,R14                 LOAD ADDRESS OF CURRENT TCB
         L     PAREG1,JSTCB(R12)       LOAD JOBSTEP TCB ADR
         LA    PAREG1,ZEROO(PAREG1)    CLEAR HI-ORDER BYTE
         CR    R12,PAREG1              CURRENT TCB = JOBSTEP TCB
         BNE   SPMVT01                 BRANCH IF NO
SPMVT00  LA    RCODE,MVTERR            LOAD RETURN CODE - VIOLATES MVT
         B     XCTLMSG                 GO INVOKE MSG RTN         S21016
         USING TCB,R12                                       LG @ZM2357
*
SPMVT01  L     R11,TCBOTC        LOAD TCB'S ORIGINATING TCB  LG @ZM2357
SPMVT02  LA    R11,ZEROO(R11)          CLEAR HI-ORDER BYTE
         LTR   R11,R11                 CHECK FOR ZERO         LB  AOS/1
         DROP  R12                                           LG @ZM2357
         BZ    SPMVT00                 ERROR IF TCBOTC=0      LB  AOS/1
         CR    R9,R11                  DOES TCBOTC = TETCB
         BE    SP05
         CR    R11,PAREG1              TCBOTC = JOBSTEP TCB
         BE    SPMVT00                 BRANCH IF YES
         USING TCB,R11                                       LG @ZM2357
         L     R11,TCBOTC                                    LG @ZM2357
         B     SPMVT02
         DROP  R11                                           LG @ZM2357
         EJECT
XCTLMSG  EQU   *                       SET UP TO XCTL TO MSG RTN S21016
         LR    R7,RCODE                PASS RETURN CODE          S21016
         L     R9,CVTPTR               CVT ADDRESS               S21016
         L     R9,D0(R9)               ADDR TCB WORDS            S21016
         L     R9,D4(R9)               CURRENT TCB ADDR          S21016
         L     R9,D0(R9)               CURRENT RB ADDR           S21016
         LA    RCODE,D96(R9)           ADDR SUPVSR PARM LIST     S21016
         LA    R9,D104(R9)             ADDR FOR EP NAME          S21016
         ST    R9,D0(RCODE)            WORD1=ADDR EP NAME        S21016
         SR    R9,R9                                             S21016
         ST    R9,D4(RCODE)            WORD2=0 (DCB ADDR)        S21016
         MVC   D8(D8,RCODE),EPMSGRTN   NAME OF MSG RTN           S21016
         XCTL  MF=(E,(1)),SF=(E,(15))  TRANSFER CONTROL          S21016
EPMSGRTN DC    CL8'IGC0107C'           NAME FOR MSG MODULE       S21016
R7       EQU   7                                                 S21016
D0       EQU   0                                                 S21016
D4       EQU   4                                                 S21016
D8       EQU   8                                                 S21016
D96      EQU   96                                                S21016
D104     EQU   104                                               S21016
         DS    0F
ZERO     DC    1F'0'
REQUEST  DC    X'E9'                    SP 233 FOR REB        LB  A0S/1
         DC    AL3(40)                 BYTE REQUEST FOR REB
SYSMSK   DC    2XL1'FF'
         CNOP  0,8
         IKJTCB                                              LG @ZM2357
         END
