         TITLE 'GCPRNT - ALPHAMERIC CHARACTER DISPLAY ROUTINE'
*STATUS. CHANGE LEVEL 0                                               *
*                                                                     *
*FUNCTION/OPERATION. GCPRNT GENERATES THE GRAPHIC ORDERS TO DISPLAY A *
*   STRING OF ALPHAMERIC CHARACTERS ON THE DISPLAY UNIT SCREEN AND    *
*   STORES THEM IN THE GRAPHIC DATA OUTPUT AREA -(GDOA)               *
*                                                                     *
*ENTRY POINTS. GCPRNT VIA CALL OR LINK MACRO   ALIAS NAME IFFPBAPR    *
*                                                                     *
*INPUT. OUTPUT CONTROL BLOCK POINTER (OCBP) AND A PARAMETER TABLE     *
*   WHICH POINTS TO A SEQUENCE OF CHARACTERS IN MAIN STORAGE          *
*                                                                     *
*OUTPUT. A STRING OF ALPHAMERIC CHARACTERS STORED IN THE GDOA         *
*                                                                     *
*EXTERNAL ROUTINES. N/A                                               *
*                                                                     *
*EXITS-NORMAL. COMPLETION OF TASK EXIT VIA RETURN MACRO               *
*     -ERROR. HEXADECIMAL 4,8,C,10,14,OR 18 IN REG 15                 *
*   IMMEDIATE RETURN. EXIT VIA RETURN MACRO                           *
*     -ERROR. HEXADECIMAL 28 IN REG 15  DOES NOT RETURN IMMEDIATELY   *
*   COMPLETION OF TASK AND RETURN VIA RETURN MACRO                    *
*                                                                     *
*TABLES/WORK AREAS. USER SPECIFIED PARAMETER TABLE, XYLIM TABLE AND   *
*   WORK AREA                                                         *
*                                                                     *
*ATTRIBUTES. READ ONLY, REENTRANT                                     *
         EJECT
IFFPBAPR CSECT                          GCPRNT
*0669                                                              7468
         ENTRY GCPRNT
GCPRNT   SAVE  (14,12),T,*              SAVE REGISTARS
         BALR  9,0
         USING *,9
         USING PARTAB,PATREG
         USING XYLIMT,XYLREG
         USING WRKAREA,WKAREG
         SR    15,15                    CLEAR ERROR RETURN REG
         SR    CNTREG,CNTREG            CLEAR BYTE COUNT REG
         LM    OBPREG,PATREG,0(1)       LOAD OCBP,PARTAB ADDRESS
         L     WKAREG,4(OBPREG)         LOAD WRKAREA ADDRESS
         L     OABREG,0(OBPREG)         LOAD OACB ADDRESS
*  SAVE MASK BITS AS SET BY USER
         ST    9,MASKSV
         SR    WRKREG,WRKREG
         SPM   WRKREG
         L     XYLREG,0(PATREG)         LOAD XYLIM TABLE ADDRESS
         LM    XREG,YREG,4(PATREG)      LOAD X,Y VALUES
         ST    15,64(WKAREG)            CLEAR ERROR COUNT IN WRKAREA
         CH    CNTREG,20(PATREG)        TEST N GREATER THAN 0
         BNL   ERR20RET                 BR IF BYTES IS 0 OR LESS
         CLI   12(PATREG),C'F'          TEST FOR FLOAT
         BE    FLTLEG
         CLI   12(PATREG),C'B'          TEST FOR FIX
         BE    TESTS
         BAL   LINREG,ERR40
TESTS    CLI   13(PATREG),C'S'          TEST FOR SCALE
         BE    SCALFIX
         CLI   13(PATREG),C'N'          TEST FOR NOSCALE
         BE    TESTC
         BAL   LINREG,ERR40
TESTC    CLI   22(PATREG),C'C'          TEST FOR CURRENT BEAM START
         BE    TESTMOD
         CLI   22(PATREG),C'U'          TEST FOR USER SPECIFIED
         BE    TESTVAL
         BAL   LINREG,ERR40
*   TEST  UC,VC    FOR 0-4095 LIMITS
TESTVAL  C     XREG,ZERO
         BL    ERR8RET
         C     XREG,HIGH
         BH    ERR8RET
         C     YREG,ZERO
         BL    ERR8RET
         C     YREG,HIGH
         BH    ERR8RET
*   BUILD  GEPM AND GDV XY(B) ORDERS IN WORK AREA
         MVC   68(2,WKAREG),GEPM
         MVC   GOMODE,GEPM
         STH   XREG,70(WKAREG)          STORE  XC
         STH   YREG,72(WKAREG)          STORE  YC
         OI    70(WKAREG),X'40'         SETBLANK BIT
         LA    CNTREG,6                 K=6
         EJECT
*    SUBROUTINE  TO  TEST  CHARACTER  MODE + SIZE  FOR  GRAPHIC  ORDER
*    PATREG  CONTAINS  THE  ADDRESS  OF  THE  PARAMETER  TABLE
*   TEST  CHARACTER MODE
TESTMOD  CLI   15(PATREG),C'P'          TEST FOR P MODE -PROTECTED
         BE    PLEG
         CLI   15(PATREG),C'F'          TEST FOR F MODE -UNPROTECTED
         BE    FLEG
         BAL   LINREG,ERR40
FLEG     LH    ORDREG,GFSC
*   TEST  CHARACTER SIZE
SIZE     CLI   14(PATREG),C'L'          LARGE
         BE    SIZEL
         CLI   14(PATREG),C'B'          BASIC
         BE    ORDSTO
         BAL   LINREG,ERR40
ORDSTO   STH   ORDREG,68(WKAREG,CNTREG)
         STH   ORDREG,GOMODE
         B     COUNT
SIZEL    A     ORDREG,ONE               BUILD L SIZE
         B     ORDSTO
PLEG     LH    ORDREG,GFPC
         B     SIZE
*   SET UP TO STORE N-BYTES OF GRAPHIC ORDERS IN GDOA
COUNT    A     CNTREG,TWO               NUMBER OF BYTES
         LA    ADDREG,68(WKAREG)        GET ADD OF ORDERS
         BAL   LINREG,STORE
*   SET UP TO STORE N-BYTES OF DATA IN GDOA
         LH    CNTREG,20(PATREG,0)
         L     ADDREG,16(PATREG,0)
         BAL   LINREG,STORE
*   TEST  FOR N= EVEN NUMBER
         TM    21(PATREG),X'01'         TEST N
         BC    8,RET
         LA    CNTREG,1                 SET N-BYTES =1
         LA    ADDREG,ZERO
         BAL   LINREG,STORE
         B     RET
FLTLEG   CLI   13(PATREG),C'S'          TEST FOR SCALE
         BE    SCALFLT
         CLI   13(PATREG),C'N'          TEST FOR NO SCALE
         BE    FCONVERT
         BAL   LINREG,ERR40
FCONVERT LR    VALREG,XREG              FIXCONVERT -(CONVERT FLOAT
         BAL   LINREG,FIXCONV           TO FIX)
         LR    XREG,VALREG
         LR    VALREG,YREG
         BAL   LINREG,FIXCONV
         LR    YREG,VALREG
         B     TESTC
SCALFLT  BAL   LINREG,XYLCHK
         EJECT
*    SET-UP FOR CONVERTING X1Y1X2Y2 TO FLOATING PT VALUES
         LA    CONREG,4                 LOOP  COUNT
         LA    INXREG,0                 SET INDEX
         LA    WRKREG,0                 SET INDEX
FLTLOOP  LH    VALREG,0(XYLREG,INXREG)  GET X1Y1,X2Y2 VALUES
         BAL   LINREG,FLTCONV
         ST    VALREG,4(WKAREG,WRKREG)
         A     INXREG,TWO
         A     WRKREG,FOUR
         BCT   CONREG,FLTLOOP
*    FLOATING POINT SPECIFIED - TEST FOR CHARACTERISTIC ZERO AND
*    FRACTION NON ZERO. OF ALL U,V VALUES
         L     VALREG,U1
         BAL   LINREG,FIXCONV
         L     VALREG,U2
         BAL   LINREG,FIXCONV
         L     VALREG,V1
         BAL   LINREG,FIXCONV
         L     VALREG,V2
         BAL   LINREG,FIXCONV
         L     VALREG,UC
         BAL   LINREG,FIXCONV
         L     VALREG,VC
         BAL   LINREG,FIXCONV
*   SUBROUTINE  TO SCALE  FLOATING  POINT  VALUES
*        X=(UC-U1)*(X2-X1)/(U2-U1)+X1
*        Y=(VC-V1)*(Y2-Y1)/(V2-V1)+Y1
*    SCALED  FLOATING  VALUES  LOADED  IN  XREG AND YREG
FLTSCAL  LE    0,4(PATREG)              UC
         SE    0,8(XYLREG)                -U1
         LE    2,12(WKAREG)             X2
         SE    2,4(WKAREG)                -X1
         BC    13,ERR4RET               BRANCH ON OVF, MINUS OR ZERO
         MER   0,2                      MULTIPLICAND* MULTIPLIER
         LE    2,12(XYLREG)             U2
         SE    2,8(XYLREG)                -U1
         BC    13,ERR16RET              BRANCH ON OVF, MINUS OR ZERO
         DER   0,2                      DIVIDEND/ DIVISOR
         AE    0,4(WKAREG)              QUOTIENT+X1
         STE   0,0(WKAREG)
         L     XREG,0(WKAREG)           SCALED FLOATING VAL UC IN XREG
         LE    0,8(PATREG)              VC
         SE    0,16(XYLREG)               -V1
         LE    2,16(WKAREG)             Y2
         SE    2,8(WKAREG)                -Y1
         BC    13,ERR4RET               BRANCH ON OVF, MINUS OR ZERO
         MER   0,2
         LE    2,20(XYLREG)             V2
         SE    2,16(XYLREG)               -V1
         BC    13,ERR16RET              BRANCH ON OVF, MINUS OR ZERO
         DER   0,2
         AE    0,8(WKAREG)              +Y1
         STE   0,0(WKAREG)
         L     YREG,0(WKAREG)           SCALED FLOATING VAL VC IN YREG
         B     FCONVERT
SCALFIX  BAL   LINREG,XYLCHK
         EJECT
*    SUBROUTINE  TO  SCALE  FIX  POINT  VALUES
*    XREG AND YREG CONTAIN U AND V VALUES FROM THE PARAMETER TABLE
*        X=(UC-U1)*(X2-X1)/(U2-U1)+X1
*        Y=(VC-V1)*(Y2-Y1)/(V2-V1)+Y1
*   SCALED UC AND VC  ARE  RETURNED TO YREG AND YREG
FIXSCAL  S     XREG,8(XYLREG)           UC-U1
         LR    ODDREG,XREG              LOAD MULTIPLICAND
         LH    XREG,4(XYLREG)           X2
         SH    XREG,0(XYLREG)             -X1
         BC    13,ERR4RET               BRANCH ON OVF, MINUS OR ZERO
         SR    EVEREG,EVEREG            CLEAR EVEN REG
         MR    EVEREG,XREG              (VC-U1)*(X2-X1) = (DIVIDEND)
         L     XREG,12(XYLREG)          U2
         S     XREG,8(XYLREG)             -U1
         BC    13,ERR16RET              BRANCH ON OVF, MINUS OR ZERO
         SR    EVEREG,EVEREG            CLEAR EVEN FOR DIVIDE
         DR    EVEREG,XREG              DIVIDEND/DIVISOR
         AH    ODDREG,0(XYLREG)         QUOTIENT +1
         LR    XREG,ODDREG              SCALED VC IN XREG
         S     YREG,16(XYLREG)          VC-V1
         LR    ODDREG,YREG
         LH    YREG,6(XYLREG)           Y2
         SH    YREG,2(XYLREG)             -Y1
         BC    13,ERR4RET               BRANCH ON OVF, MINUS OR ZERO
         SR    EVEREG,EVEREG
         MR    EVEREG,YREG
         L     YREG,20(XYLREG)          V2
         S     YREG,16(XYLREG)            -V1
         BC    13,ERR16RET              BRANCH ON OVF, MINUS OR ZERO
         SR    EVEREG,EVEREG
         DR    EVEREG,YREG              DIVIDEND/DIVISOR
         AH    ODDREG,2(XYLREG)         QUOTIENT + Y1
         LR    YREG,ODDREG              SCALED VC IN YREG
         B     TESTC
*    CONVERT  FLOATING  POINT  TO  FIXED  POINT  VALUES
*    TEST FLOATING POINT INPUT VALIDITY
*    VALREG CONTAINS THE VALUE TO BE CONVERTED
FIXCONV  ST    VALREG,0(WKAREG)         STORE FLT VAL IN WORKAREA
         LE    6,0(WKAREG)              LOAD VALUE TO FLOAT REG
         N     VALREG,FCHAR             CHECK  CHARACTERISTIC
         BE    FLERR1                   POSSIBLE ERROR
FCHECOK  AU    6,X6                     ADD EXPONENT TO FLOAT REG
         STE   6,0(WKAREG)              STORE CONV IN WORKAREA
         L     VALREG,0(WKAREG)         LOAD TO GR
         N     VALREG,XZERO             DROP CHARACTERISTIC
         LTR   VALREG,VALREG            IS VAL NEGATIVE
         BNL   NOTNEG
         N     VALREG,NSIGN             DROP SIGN
         LNR   VALREG,VALREG            TAKE TWO'S COMPLIMENT
NOTNEG   BR    LINREG                   RETURN TO NSI AFTER BAL
FLERR1   CE    6,ZERO                   IS VAL ZERO
         BE    FCHECOK
         B     ERR12RET
         EJECT
*    CONVERT  FIXED  POINT  TO  FLOATING  POINT  VALUES
*    VALREG CONTAINS THE VALUE TO BE CONVERTED
FLTCONV  O     VALREG,X6                EXPONENT OF 6
         ST    VALREG,0(WKAREG)
         LE    0,0(WKAREG)              LOAD FLOATING PT REG
         AE    0,X6                     NORMALIZE
         STE   0,0(WKAREG)
         L     VALREG,0(WKAREG)         FLOAT PT VAL IN VALREG
         BR    LINREG
*   XYLCHK  SUBROUTINE
*   CHECK X1,X2,Y1,Y2 LIMITS GREATER THAN 0 AND LESS THAN 4095
*   CHECK X1 LESS THAN X2 , Y1 LESS THAN Y2
*   ADDRESSOF XYLIM TABLE IN XYLREG BEFORE BAL
XYLCHK   LA    CONREG,4                SET LOOP CONTROL
         LA    INXREG,0                 SET  INDEX
XYLLOOP  LH    TEMREG,0(XYLREG,INXREG)  X1,Y1,X2,Y2
         C     TEMREG,ZERO
         BL    ERR4RET
         C     TEMREG,HIGH
         BH    ERR4RET
         A     INXREG,TWO
         BCT   CONREG,XYLLOOP
         CLC   0(2,XYLREG),4(XYLREG)    X1 COMP  X2
         BNL   ERR4RET
         CLC   2(2,XYLREG),6(XYLREG)    Y1 COMP  Y2
         BNL   ERR4RET
         BR    LINREG
         EJECT
*   LOAD ERROR CODE IN REG 15
ERR40    LA    15,40                    PARAMETER ERROR - DOES NOT RET
         B     ERRCNT
ERR24RET LA    15,24                     USERS OVF HAS NOT RESET OLP
         B     ERRCNTR
ERR20RET LA    15,20                   PARAMETER ERROR - RETURNS
         B     ERRCNTR
ERR16RET LA    15,16                     U1,V1 GREATER THAN U2,V2
         B     ERRCNTR
ERR12RET LA    15,12                     FLT PT ERROR DETECTED
         B     ERRCNTR
ERR8RET  LA    15,8                      U,V LIMIT ERROR AFTER SCALE
         B     ERRCNTR
ERR4RET  LA    15,4                      XYLIM X1,Y1  X2,Y2 LIMIT ERROR
ERRCNTR  LA    LINREG,RET
ERRCNT   L     TEMREG,64(WKAREG)
         A     TEMREG,ONE
         ST    TEMREG,64(WKAREG)
         BR    LINREG
*   TEST ERROR COUNT IN WORK AREA AND SET BIT
*   IN HIGH POSITION OF REG 15 IF MULTIPLE ERRORS
RET      LA    TEMREG,1
         C     TEMREG,64(WKAREG)
         BL    SETBIT
* RESTORE PROGRAM MASK TO SETTING UPON ENTRY
RETMACRO L     WRKREG,MASKSV
         SPM   WRKREG
         RETURN (14,12),T,RC=(15)
SETBIT   O     15,MZERO
         B     RETMACRO
         EJECT
* STORE GRAPHIC DATA IN GDOA FOR POR
* INPUT TO SUBROUTINE
*   CNTREG = NUMBER OF BYTES OF GRAPHIC DATA TO STORE
*   ADDREG = ADDRESS OF THE GRAPHIC DATA
*   WKAREG = REGISTER 1 MUST CONTAIN THE WORKAREA ADDRESS
*   OABREG = ADDRESS OF OACB
STORE    SR    PASREG,PASREG            CLEAR OVERFLOW PASS INDICATOR
STORE1   L     OLPREG,16(0,OABREG)      ADDRESS OF OLP FROM OACB
         LR    WRKREG,CNTREG            LOAD BYTES TO MOVE
* CALCULATE ADDRESSES BASED ON N VALUE AND SIZE OF GDOA
STORE2   AR    OLPREG,WRKREG            OLP ADDRESS PLUS N VALUE
         LA    TEMREG,4
         AR    TEMREG,OLPREG            OLP PLUS N PLUS 4
         L     SLOREG,0(OABREG)         SLOA ADDRESS
         A     SLOREG,4(OABREG)         ADD LOA EQUALS TOTAL GDOA
         L     OLPREG,16(0,OABREG)      RESET INITIAL OLP ADDRESS
         CR    TEMREG,SLOREG
         BNH   OK                       ROOM FOR DATA
* NOT ENOUGH ROOM TO STORE ALL OF THE DATA-DETERMINE AMOUNT TO STORE
         SR    TEMREG,SLOREG            EQUAL BYTES-CAN'T STORE
         SR    WRKREG,TEMREG            NUMBER OF BYTES CAN STORE
* ANY BYTES TO STORE
         C     WRKREG,ZERO
         BNH   STORE4                   LESS OF EQUAL TO ZERO
         LH    TEMREG,H2A02
         CH    TEMREG,GOMODE
         BH    STORE3A
         LH    TEMREG,H0003
         NR    TEMREG,WRKREG
         BM    STORE4      GO TO USER OVERFLOW ROUTINE (BAPR)      7468
STORE3A  SR    CNTREG,WRKREG       BYTES REMAINING
         BAL   INTLNK,STORE6            LINK INTERNALLY
STORE3   LA    PASREG,1                 SET PASS INDICATOR
* STORE REGISTERS IN WORKAREA
         STM   0,15,0(WKAREG)           SAVE REGISTERS IN WORKAREA
         L     15,8(0,OABREG)           OVER FLOW ADDRESS
         LM    2,12,28(13)              RELOAD USER'S REGISTERS
         BALR  14,15                    LINK TO ROUTINE-SET RETURN
         LM    0,15,0(WKAREG)           RELOAD FROM WORKAREA
         B     STORE1                   GET NEW OLP ADDRESS-CONTINUE
* NO SPACE AVAILABLE
STORE4   C     PASREG,ONE               WAS A TRANSFER TO OVERFLOW MADE
         BL    STORE3                   NO
* SET ERROR CODE AND RETURN TO POR-LEAVE POR WITH RETURN MACRO
         B     ERR24RET
OK       BAL   INTLNK,STORE6            LINK INTERNALLY
         BR    LINREG
STORE6   LA    TEMREG,255               SET REG. EQUAL TO 255
STORE6A  CR    WRKREG,TEMREG            IS AMOUNT TO MOVE OVER 255
         BH    STORE7                   YES
         LR    TEMREG,WRKREG
         S     TEMREG,ONE               COMPENSATE FOR EXTRA BYTE
         EX    TEMREG,MOVE              MOVE GRAPHIC DATA
         AR    OLPREG,WRKREG            UPDATE OLP ADDRESS
         AR    ADDREG,WRKREG            UPDATE DATA ADDR
         ST    OLPREG,16(0,OABREG)      STORE NEW OLP ADDRESS
         BR    INTLNK                   RETURN INTERNALLY
STORE7   LR    SLOREG,TEMREG
         S     SLOREG,ONE               COMPENSATE FOR EXTRA BYTE
         EX    SLOREG,MOVE              MOVE GRAPHIC DATA
         AR    OLPREG,TEMREG            UPDATE OLP ADDRESS
         AR    ADDREG,TEMREG            UPDATE INPUT ADDRESS
         SR    WRKREG,TEMREG           REDUCE BY 255
         B     STORE6A                  MAKE NEXT COMPARISON
MOVE     MVC   0(0,OLPREG),0(ADDREG)    MOVE DATA TO GDOA
         EJECT
ZERO     DC    F'0'
ONE      DC    F'1'
TWO      DC    F'2'
FOUR     DC    F'4'
HIGH     DC    F'4095'
H2A02    DC    X'2A02'
H0003    DC    H'0003'
FCHAR    DC    X'7F000000'
XZERO    DC    X'80FFFFFF'                   SIGN AND VALUE -DROP EXPO
X6       DC    X'46000000'                   EXPONENT OF SIX
NSIGN    DC    X'7FFFFFFF'                   DROP SIGN -RETAIN VALUE
MZERO    DC    X'80000000'
GEPM     DC    X'2A00'
GFSC     DC    X'2A40'
GFPC     DC    X'2A44'
PASREG   EQU   0
VALREG   EQU   0
WKAREG   EQU   1
OBPREG   EQU   2
OABREG   EQU   2
PATREG   EQU   3
XREG     EQU   4
OLPREG   EQU   4
WRKREG   EQU   5
YREG     EQU   5
CNTREG   EQU   6
INXREG   EQU   7
ORDREG   EQU   7
ADDREG   EQU   8
XYLREG   EQU   8
EVEREG   EQU   10
TEMREG   EQU   10
ODDREG   EQU   11
SLOREG   EQU   11
LINREG   EQU   12
CONREG   EQU   14
INTLNK   EQU   14
         EJECT
PARTAB   DSECT
XYLIM    DS    CL4
UC       DS    CL4
VC       DS    CL4
F        DS    CL1
S        DS    CL1
CSIZE    DS    CL1
CMODE    DS    CL1
DATA     DS    CL4
N        DS    CL2
START    DS    CL1
*
XYLIMT   DSECT
X1       DS    CL2
Y1       DS    CL2
X2       DS    CL2
Y2       DS    CL2
U1       DS    CL4
U2       DS    CL4
V1       DS    CL4
V2       DS    CL4
WRKAREA  DSECT
OVFSAVE  DS    CL64                     STORE SAVE AREA- OVERFLOW
PORSAVE  DS    CL64                     POR SAVE.AREA
ERRCOUNT DS    CL4                      ERROR COUNT SAVE AREA
ORDBUILD DS    CL8                      ORDER BUILD AREA
MASKSV   DS    F                   SAVE SETTING OF USER PROGRAM MASK
         ORG   OVFSAVE+396
GOMODE   DS    CL2
         END
