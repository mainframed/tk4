*                                                                     *
*TITLE IFFPLARE                                                       *
*                                                                     *
*STATUS: CHANGE LEVEL 000                                             *
*                                                                     *
*FUNCTION/OPERATES: RELOCATES A BUFFER SUBROUTINE WHICH WILL TRACK THE*
*   LIGHT-PEN INTO THE USER'S GDOA(S).                                *
*                                                                     *
*ENTRY POINT: PENTRK                                                  *
*                                                                     *
*INPUT: AN OUTPUT CONTROL BLOCK POINTER (OCBP) POINTING TO AN OUTPUT  *
*   AREA CONTROL BLOCK (OACB) AND AN HUNDRED-WORD WORKAREA            *
*                                                                     *
*OUTPUT: THE RELOCATED BUFFER SUBROUTINE.                             *
*                                                                     *
*EXTERNAL ROUTINES: NONE                                              *
*                                                                     *
*EXITS-NORMAL: VIA RETURN MACRO WITH ZERO RETURN CODE ON SUCESSFUL    *
*   COMPLETION                                                        *
*              VIA BALR 14,15 TO USER'S OVERFLOW ROUTINE.             *
*EXITS-ERROR: VIA RETURN MACRO WITH RETURN CODE=28 IF OVERFLOW ROUTINE*
*   DOES NOT PROVIDE ENOUGH SPACE IN THE GDOA                         *
*                                                                     *
*TABLES/WORKAREAS: AN HUNDRED-WORD USER-SUPPLIED WORKAREA             *
*                                                                     *
*ATTRIBUTES: PROBLEM STATE, REENTRANT                                 *
*                                                                     *
*NOTES: RELOCATION FACTOR=BLP+(CRSA-OLP)-(RELATIVE ADDRESS OF FIRST   *
*   ORDER IN GDOA                                                     *
*                                                                     *
IFFPLARE CSECT
*
*        SYMBOLIC REGISTER ASSIGNMENTS
*
PARLIST  EQU   1             PARAMETER LIST REGISTER
WORKREG1 EQU   2             TEMPORARY
WORKREG2 EQU   3                       WORK
WORKREG3 EQU   4                            REGISTERS
MINREG   EQU   5             MINIMUM RELATIVE ADDRESS IN SEGMENT
MAXREG   EQU   6             MAXIMUM RELATIVE ADDRESS IN SEGMENT
RELOCREG EQU   7             RELOCATION FACTOR
INDEX    EQU   8             RELATIVE ADDRESS OF CURRENT ORDER
OLPREG   EQU   9             POINTER TO NEXT AVAILABLE LOCATION IN GDOA
SEGTAB   EQU   10            ADDRESS OF SEGMENT TABLE OF RELOCATION
*                            CONSTANTS
SEGIND   EQU   11            POINTER TO NEXT USABLE LOCATION IN THE
*                            SEGMENT TABLE
BASE     EQU   12                      BASE REGISTER
SAVEREG  EQU   13            SAVE AREA REGISTER
RETREG   EQU   14            RETURN REGISTER
ENTREG   EQU   15            ENTRY REGISTER
*
         ENTRY PENTRK
PENTRK   SAVE  (14,12)            SAVE REGISTERS &
         BALR  BASE,0             ESTABLISH ADDRESSABILITY
         USING *,BASE
         L     WORKREG1,0(PARLIST)     SET ADDRESS OF WORK/SAVE AREA
         L     WORKREG1,4(WORKREG1)
         ST    WORKREG1,8(SAVEREG)
         ST    SAVEREG,4(WORKREG1)
         LR    SAVEREG,WORKREG1
*
*   CLEAR REGISTERS
*
         SR    MINREG,MINREG
         LR    INDEX,MINREG
         LR    SEGIND,MINREG
         STH   SEGIND,394(SAVEREG)     CLEAR SWITCHES
         XC    390(4,SAVEREG),390(SAVEREG)
*                            CLEAR FORWARD REFERENCE CONSTANTS
*
*   DERIVE INITIAL RELOCATION FACTORS
*
          LA   SEGTAB,72(SAVEREG) GET ADDRESS OF RELOCATION TABLE
          L    WORKREG1,0(PARLIST) GET ADDRESS OF OACB
         L     WORKREG1,0(WORKREG1)
         L     OLPREG,16(WORKREG1)     GET VALUE OF OLP
          L    WORKREG2,0(WORKREG1)    GET START OF GDOA
          A    WORKREG2,4(WORKREG1)    GET END OF GDOA
         SR    WORKREG2,OLPREG         GET NUMBER OF USABLE BYTES
         CH    WORKREG2,MINGDOA        SEE IF GDOA MEETS INITIAL SIZE
         BL    OVERFLOW                REQUIREMENTS.  NO, OVERFLOW.
          SH   WORKREG2,H4
         LR    MAXREG,WORKREG2         MAX REL. ADDRESS IN SEGMENT
         LR    RELOCREG,OLPREG         GET DISPLACEMENT OF OLP
         S     RELOCREG,12(WORKREG1)   FROM CRSA
         A     RELOCREG,20(WORKREG1)   ADD BLP TO GET RELOCATION
*                                      FACTOR
*
*   RELOCATION CHECKS
*
RELOCLP  LA    WORKREG1,ROUTINE(INDEX) GET ADDRESS OF LOCATION TO BE
*                                      EXAMINED
         CLI   0(WORKREG1),X'2A'       IF AN ORDER,
         BE    ORDER                   EXAMINE IT FURTHER
         MVI   394(SAVEREG),X'FF'      MAKE SURE DATA MODE SWITCH SET
MOVE     MVC   0(2,OLPREG),0(WORKREG1)
MOVEA    LA    OLPREG,2(OLPREG)        INCREMENT
         LA    INDEX,2(INDEX)                   INDICES
ENDTEST  CH    INDEX,RTNSIZE           ROUTINE COMPLETELY RELOCATED
         BNL   DEPART                  YES, EXIT
         MVI   395(SAVEREG),X'00'      CLEAR OVERFLOW SWITCH
         CH    INDEX,392(SAVEREG)      WAS LAST ORDER PROCESSED THE
         BNH   OVTST                   LAST COVERED BY AN OUTSTANDING
*                                      FORWARD REFERENCE
         XC    390(4,SAVEREG),390(SAVEREG)       YES, ZERO OUT
*                                      FORWARD REFERENCE CONSTANTS
OVTST    CR    INDEX,MAXREG            IS GDOA FILLED
         BNL   OVERFLOW                YES, OVERFLOW
         B     RELOCLP                 NO, CONTINUE PROCESSING
DEPART   LTR   SEGIND,SEGIND           SEGMENT TABLE EMPTY
         BZ    STENT                   STORE CURRENT RELOCATION
*                                      FACTOR AS FIRST ADDRESS OF
*                                      BUFFER SUBROUTINE
         L     RELOCREG,8(SEGTAB)      GET RELOCATION FACTOR FOR
*                                      FIRST SEGMENT
STENT    ST    RELOCREG,396(SAVEREG)   SAVE ADDRESS OF ENTRY POINT
*                                      OF RELOCATED SUBROUTINE
         L     WORKREG1,0(PARLIST)     STORE UPDATED VALUE OF OLP
         L     WORKREG1,0(WORKREG1)
         ST    OLPREG,16(WORKREG1)     IN OACB
         L     SAVEREG,4(SAVEREG)      POINTER TO USER'S SAVE AREA
         RETURN (14,12),RC=0
ORDER    MVC   0(2,OLPREG),0(WORKREG1) STORE FIRST HALF WORD OF
         XC    394(1,SAVEREG),394(SAVEREG)  CLEAR DATA MODE SWITCH
         TM    1(WORKREG1),X'C0'       IF TWO BYTE ORDER,
         BC    12,TWOBYTE              PROCESS APPROPRIATELY
*                                      ORDER IN GDOA
         CLI   1(WORKREG1),X'EC'       IF
         BE    GMVD                       6-BYTE ORDER,
         BAL   RETREG,RELOC            RELOCATE ADDRESS CONSTANT
         STH   WORKREG2,2(OLPREG)      AND STORE IT
         MVC   396(2,SAVEREG),0(OLPREG)     SAVE FIRST TWO BYTES OF
*                                      ORDER
         LA    OLPREG,4(OLPREG)        INCREMENT
         LA    INDEX,4(INDEX)                    INDICES
         B     ENDTEST                 AND TEST FOR END OF LOOP
*
GMVD     BAL   RETREG,RELOC      GMVD--RELOCATE 2ND HALF-WORD,
         STH   WORKREG2,2(OLPREG)      STORE IN GDOA
         MVC   4(2,OLPREG),4(WORKREG1) MOVE IN 3RD
         MVC   396(2,SAVEREG),0(OLPREG)     SAVE FIRST TWO BYTES OF
*                                      ORDER
*
UP6      LA    OLPREG,6(OLPREG)        INCREMENT
         LA    INDEX,6(INDEX)                    INDICES
         B     ENDTEST                 TEST FOR END OF LOOP
*
TWOBYTE  MVC   396(2,SAVEREG),0(OLPREG)     SAVE FIRST TWO BYTES OF
*                                      ORDER
         B     MOVEA
*
RELOC    CLI   1(WORKREG1),X'EC'                       SIX BYTES
         BE    SIXBYTE                                           LONG
         LA  WORKREG2,4(INDEX)         NO--ONLY FOUR BYTES
LIMCHECK CR  WORKREG2,MAXREG           IF ORDER NOT OVERFLOWS SEGMENT,
         BH  OVERFLOW                  DO NOT RELOCATE
*
REFCHECK LH  WORKREG2,2(WORKREG1)      GET CONSTANT TO RELOCATE
         CR  WORKREG2,MINREG           SEE IF BACK REFERENCE
         BL  BACKREF                   YES, PROCESS IT
         CR  WORKREG2,MAXREG           SEE IF FORWARD REF. ACROSS
*                                      SEGMENT BOUNDARY
         BH    OVERLAP       CHECK FOR OVERLAPPING FORWARD REFS.
         BE    CONCHK                  MAXIMUM FORWARD REFERENCE
*                                      ASSUME FOUR BYTE ORDER WILL
*                                      FOLLOW AND WILL FIT
ORCHK    LA    WORKREG3,ROUTINE(WORKREG2)
         CLI   0(WORKREG3),X'2A'       SEE IF ADDRESS THAT OF ORDER
         BE    LIMCHK2                 YES, CONTINUE PROCESSING
         LA    WORKREG3,2(WORKREG2)    NO, SEE IF HALF WORD FITS
         B     LIMCHK2A                IN GDOA
LIMCHK2  CLI   1(WORKREG3),X'EC'                      ORDER
         BE    SIX2
         LA    WORKREG3,4(WORKREG2)    NO
LIMCHK2A CR    WORKREG3,MAXREG         IF ORDER DOES NOT FIT WITHIN
         BH    OVERLAP       CHECK FRO OVERLAPPING FORWARD REFS.
CONCHK   CH    WORKREG2,392(SAVEREG)   STORE NEW FORWARD REFERENCE
         BNH   ADD           CONSTANTS IF REFERENCED ADDRESS EXCEEDS
         STH   WORKREG2,392(SAVEREG)   THAT OF LAST REFERENCE
         STH   INDEX,390(SAVEREG)
ADD      AR    WORKREG2,RELOCREG       ADD RELOCATION FACTOR
         BR    RETREG
SIX2     LA    WORKREG3,6(WORKREG2)    SIX BYTE ORDER
         B     LIMCHK2A
SIXBYTE  LA  WORKREG2,6(INDEX)         SIX BYTE ORDER
         B   LIMCHECK
OVERLAP  CH    INDEX,392(SAVEREG)      LAST FORWARD REFERENCE GOES
*                                      BEYOND CURRENT LOCATION
         BH    OVERFLOW                NO, OVERFLOW
         SH    INDEX,390(SAVEREG)      YES, BACK UP DATA POINTER
         SR    OLPREG,INDEX            AND OLP
         LH    INDEX,390(SAVEREG)
         B     OVERFLOW                AND OVERFLOW
BACKREF  SR    WORKREG3,WORKREG3            SEARCH SEGMENT TABLE
SEGCHK   C     WORKREG2,4(SEGTAB,WORKREG3)   ADDRESS CONTAINED IN
         BNL   NXTSEG                     SEGMENT
         A     WORKREG2,8(SEGTAB,WORKREG3)   YES, RELOCATE
         BR    RETREG
NXTSEG   LA    WORKREG3,12(WORKREG3)        NO, INCREMENT TO NEXT
         B     SEGCHK                       SEGMENT
*
OVERFLOW LR    MAXREG,INDEX            GET ADDRESS OF NEXT HALF-WORD
         CR    MINREG,MAXREG           IF NO DATA STORED IN GDOA,
         BE    OVERCALL                SKIP STORAGE OF RELOCATION
*                                      CONSTANTS
         LA    WORKREG1,0(SEGTAB,SEGIND)    GET ADDRESS OF NEXT
*                                           RELOCATION TABLE ENTRY
         STM   MINREG,RELOCREG,0(WORKREG1)  STORE RELOCATION CONSTANTS
         LA    SEGIND,12(SEGIND)
OVERCALL TM    395(SAVEREG),X'FF'      IS OVERFLOW SWITCH ON
         BO    ERRTRN                  YES, NOT ABLE TO STORE DATA
*                                      AFTER OVERFLOW
         XC    390(4,SAVEREG),390(SAVEREG)       SET FORWARD REFERENCE
*                            CONSTANTS EQUAL TO 0
         MVI   395(SAVEREG),X'FF'      SET OVERFLOW SWITCH
         CLI   397(SAVEREG),X'05'      SEE IF CURRENT ORDER
*                                      GEPI2 OR GEVI2
         BH    CALLSVA                 NO, SET SWITCH OFF
         MVI   394(SAVEREG),X'FF'      YES, SET DATA MODE SWITCH
         B     CALLSV
CALLSVA  MVI   394(SAVEREG),0
CALLSV   L     WORKREG1,0(PARLIST)     GET ADDRESS OF /CBP
         L     WORKREG1,0(WORKREG1)    GET ADDRESS OF OACB
         SAVE  (14,12)                 SAVE REGISTERS
         L     ENTREG,8(WORKREG1)                     OVERFLOW ROUTINE
         ST    OLPREG,16(WORKREG1)     STORE UPDATED VALUE OF OLP
*                                      IN OACB
         LR    PARLIST,SAVEREG         SET UP POINTERS TO SAVE AREAS
         L     SAVEREG,4(PARLIST)
         BALR  RETREG,ENTREG           BRANCH TO USER'S OVERFLOW RTN.
         LR    SAVEREG,PARLIST         RESTORE REGISTERS
         LM    14,12,12(SAVEREG)
         LR    MINREG,INDEX            DERIVE NEW RELOCATION CONSTANTS
         L     OLPREG,16(WORKREG1)
         L     RELOCREG,0(WORKREG1)    GET NUMBER OF AVAILABLE
         A     RELOCREG,4(WORKREG1)        BYTES
         SR    RELOCREG,OLPREG                   IN GDOA
         CH    RELOCREG,MINOVER        IF LESS THAN 180 BYTES SUPPLIED
         BL    ERRTRN                  OVERFLOW ROUTINE, ERROR RETURN.
         AR    MAXREG,RELOCREG         GET MAX REL. ADDR. IN SEGMENT
         SH    MAXREG,H4
         LR    RELOCREG,OLPREG         GET DISPLACEMENT OF OLP
         S     RELOCREG,12(WORKREG1)   FROM CRSA
         A     RELOCREG,20(WORKREG1)   GET RELOCATION FACTOR
         SR    RELOCREG,INDEX          CORRECT TO POSITION IN ROUTINE
         CLI   394(SAVEREG),X'FF'      CURRENT MODE A DATA MODE
         BE    SWOFF                   YES, CONTINUE
         SH    OLPREG,H2               NO, DECREMENT OLP & RELOCATION
         SH    RELOCREG,H2             FACTOR BY 2
         LA    MAXREG,2(MAXREG)        INCREMENT MAX ADDRESS BY 2
SWOFF    MVI   394(SAVEREG),0          SET SWITCH OFF
         B     RELOCLP
ERRTRN   L     SAVEREG,4(SAVEREG)
         RETURN (14,12),RC=24
*
*
H2       DC    H'2'
H4       DC    H'4'
MINGDOA  DC    H'8'                    MINIMUM GDOA UPON INITIAL ENTRY
MINOVER  DC    H'178'                  MINIMUM AVAILABLE GDOA AFTER
*                                      OVERFLOW
RTNSIZE  DC    H'314'                  SIZE OF BUFFER SUBROUTINE
*
*   GRAPHIC SUBROUTINE -- LIGHT-PEN TRACKING
*
         GINIT  BPX=500,BPY=500,BLC=0,BLP=0
ROUTINE  GTRU  0
         GTRU  INIT
UPD      GEPI2
DX       GDV   0,0,B                   UPDATING VECTORS
DY       GDV   0,0,U
UPTST    GTDD  ROUTINE                 EXIT IF CENTER POINT SEEN
         GMVD  UPTST,BDATA=2AFF
         GTRU  INIT2
INIT     GDRD
         GENSD
         GMVD  UPTST,BDATA=2AFC
INIT2    GMVD  DX,BDATA=0101           INITIALIZE UPDATE VECTORS
         GMVD  DY,BDATA=0100
         GEPI2
         GDV   0,0,U
         GTND  BOX1
SB       GEVI2
         GDV   -36,-36,B
         GDV   72,0,U
         GTND  *+8
         GMVD  DY,BDATA=01FE
         GEVI2
         GDV   0,72,U
         GTND  *+8
         GMVD  DX,BDATA=0301
         GEVI2
         GDV   -72,0,U
         GTND  *+8
         GMVD  DY,BDATA=0102
         GEVI2
         GDV   0,-72,U
         GDV   36,36,B
         GTND  BOX2
         GMVD  DX,BDATA=FF01
         GTRU  BOX2
BOX1     GEVI2
         GDV   -36,-36,B
         GDV   72,0,U
         GTND  *+8
         GMVD  DY,BDATA=01EE
         GEVI2
         GDV   0,72,U
         GTND  *+8
         GMVD  DX,BDATA=1301
         GEVI2
         GDV   -72,0,U
         GTND  *+8
         GMVD  DY,BDATA=0112
         GEVI2
         GDV   0,-72,U
         GDV   36,36,B
         GTND  *+8
         GMVD  DX,BDATA=EF01
BOX2     GEVI2
         GDV   -72,-72,B
         GDV   72,0,U
         GDV   72,0,U
         GTND  *+8
         GMVD  DY,BDATA=01D4
         GEVI2
         GDV   0,72,U
         GDV   0,72,U
         GTND  *+8
         GMVD  DX,BDATA=2D01
         GEVI2
         GDV   -72,0,U
         GDV   -72,0,U
         GTND  *+8
         GMVD  DY,BDATA=012C
         GEVI2
         GDV   0,-72,U
         GDV   0,-72,U
         GDV   72,72,B
         GTND  BOX3
         GMVD  DX,BDATA=D501
BOX3     GEVI2
         GDV   -108,-108,B
         GDV   216,0,U
         GTND  *+8
         GMVD  DY,BDATA=01B4
         GEVI2
         GDV   0,216,U
         GTND  *+8
         GMVD  DX,BDATA=4D01
         GEVI2
         GDV   -216,0,U
         GTND  *+8
         GMVD  DY,BDATA=014C
         GEVI2
         GDV   0,-216,U
         GDV   108,108,B
         GTND  UPD
         GMVD  DX,BDATA=B501
         GTRU  UPD
*
         END
