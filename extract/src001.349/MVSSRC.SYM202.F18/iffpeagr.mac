         TITLE 'GCGRID-- RECTANGULAR CARTESIAN GRID GENERATION ROUTINE'
*STATUS. CHANGE LEVEL 0                                               *
*                                                                     *
*FUNCTION/OPERATION. GCGRID GENERATES RECTANGULAR CARTESIAN GRID      *
*   PATTERNS IN LINEAR, SEMI-LOGARITHMIC OR LOGARITHMIC FORMS. THE    *
*   SEMI-LOGARITHMIC GRID PATTERN MAY BE LOGARITHMIC IN EITHER THE    *
*   HORIZONTAL OR VERTICAL DIRECTION. THE ORDERS GENERATED ARE STORED *
*   IN THE GRAPHIC DATA OUTPUT AREA (GDOA)                            *
*                                                                     *
*ENTRY POINTS. GCGRID VIA CALL OR LINK MACRO   ALIAS NAME IFFPEAGR    *
*                                                                     *
*INPUT. OUTPUT CONTROL BLOCK POINTER (OCBP) AND A PARAMETER TABLE     *
*                                                                     *
*OUTPUT. GRAPHIC ORDERS TO GENERATE A GRID STORED IN THE GDOA         *
*                                                                     *
*EXTERNAL ROUTINES. N/A                                               *
*                                                                     *
*EXITS-NORMAL. COMPLETION OF TASK. EXIT VIA RETUR MACRO               *
*     -ERROR. HEXADECIMAL 4,8,C,10, OR 18 IN REG 15                   *
*   IMMEDIATE RETURN. EXIT VIA RETURN MACRO                           *
*     -ERROR. HEXADECIMAL 28 IN REG 15   DOES NOT RETURN IMMEDIATELY  *
*   COMPLETION  OF TASK AND EXIT VIA RETURN MACRO                     *
*                                                                     *
*TABLES/WORK AREAS. USER SPECIFIED PARAMETER TABLE, XYLIM TABLE AND   *
*   WORK AREA                                                         *
*                                                                     *
*ATTRIBUTES. READ ONLY, REENTRANT                                     *
         EJECT
IFFPEAGR CSECT                          GCGRID
*0669                                                              7468
         ENTRY GCGRID
GCGRID   SAVE  (14,12),T,*
         BALR  9,0
         USING *,9
         USING PARTAB,PATREG
         USING XYLIMT,XYLREG
         USING WRKAREA,WKAREG
         LM    OBPREG,PATREG,0(1)       LAOD ADDRESS OF OCBP, PARTAB
         L     WKAREG,4(OBPREG)         LOAD ADDRESS OF WORK AREA
         L     OABREG,0(OBPREG)         LOAD ADDRESS OF OACB
         L     XYLREG,0(PATREG)         LOAD ADDRESS OF XYLIM TABLE
*  SAVE MASK BITS AS SET BY USER
         ST    9,MASKSV
         SR    WRKREG,WRKREG
         SPM   WRKREG
         LM    XREG,YREG,4(PATREG)      LOAD UI VI
         SR    15,15                    ZERO ERR CODE REG
         ST    15,64(WKAREG)                 ERR COUNT
         BAL   LINREG,XYLCHK
         CLI   12(PATREG),C'F'          TEST FOR FLOAT
         BE    FLTLEG
         CLI   12(PATREG),C'B'          TEST FOR FIX POINT
         BE    TESTS
         BAL   LINREG,ERR40
TESTS    CLI   13(PATREG),C'S'          TEST FOR SCALE
         BE    FIXSCAL
         CLI   13(PATREG),C'N'          TEST FOR NO SCALE
         BE    TESTUV
         BAL   LINREG,ERR40
*   TEST  UI,VI   FOR  0-4095 LIMITS
TESTUV   C     XREG,ZERO
         BNH   ERR8RET
         C     XREG,HIGH
         BH    ERR8RET
         C     YREG,ZERO
         BNH   ERR8RET
         C     YREG,HIGH
         BH    ERR8RET
*   STORE GTYPE IN WORK AREA AND TEST FOR TYPE OF GRID
         MVC   68(1,WKAREG),14(PATREG)  STORE GTYPE
         CLI   68(WKAREG),C'A'          LINEAR-X,Y
         BE    GTYPEOK
         CLI   68(WKAREG),C'B'          LOG-X, LINEAR-Y
         BE    GTYPEOK
         CLI   68(WKAREG),C'C'          LINEAR-X, LOG-Y
         BE    GTYPEOK
         CLI   68(WKAREG),C'D'          LOG-X, LOG-Y
         BE    GTYPEOK
         BAL   LINREG,ERR40
         MVI   68(WKAREG),C'A'          SET GTYPE = A
*   STORE  GAVM  ORDER  IN  GDOA
GTYPEOK  LA    CNTREG,2                 LOAD NUMBER OF BYTES
         MVC   72(2,WKAREG),GAVM        GET GAVM ORDER
         MVC   GOMODE,GAVM
         BAL   LINREG,STORELNK
         EJECT
*   SET   SX=1   SY=Y1  TY=Y2
         MVC   72(4,WKAREG),0(XYLREG)   SX,SY
         MVC   78(2,WKAREG),6(XYLREG)      TY
SETSX    MVC   76(2,WKAREG),72(WKAREG)  SX
         BAL   LINREG,STORINIT
*   TEST FOR  LOG   X-AXIS
         CLI   68(WKAREG),C'B'          LOG-X
         BE    LOGX
         CLI   68(WKAREG),C'D'          LOG-X
         BE    LOGX
*    LINEAR      X AXIS
         LH    WRKREG,76(WKAREG)        SX
SETVALX  AR    WRKREG,XREG                +XINC
*    COMPARE   SX+XINC  TO X2 ,IF  GREATER  GO TO  YAXIS
         CH    WRKREG,4(XYLREG)
         BH    YLEG
         STH   WRKREG,72(WKAREG)        NEW SX
*    OLD SY TO TY   OLD TY TO SY
         LH    WRKREG,78(WKAREG)        SAVE OLD TY
         MVC   78(2,WKAREG),74(WKAREG)  OLD SY TO TY
         STH   WRKREG,74(WKAREG)        OLD TY TO SY
         B     SETSX
*    SET  SX=X1   SY=Y1  TX=X2
YLEG     MVC   72(4,WKAREG),0(XYLREG)   SX SY
         MVC   76(2,WKAREG),4(XYLREG)   TX
SETSY    MVC   78(2,WKAREG),74(WKAREG)     SY
         BAL   LINREG,STORINIT
*   TEST FOR  LOG   Y-AXIS
         CLI   68(WKAREG),C'C'          LOG-Y
         BE    LOGY
         CLI   68(WKAREG),C'D'          LOG-Y
         BE    LOGY
*   LINEAR      Y-AXIS
         LH    WRKREG,74(WKAREG)        SY
SETVALY  AR    WRKREG,YREG                +YINC
*   COMPARE    SX+YINC TO Y2 ,IF GREATER  RETURN
         CH    WRKREG,6(XYLREG)
         BH    RET
         STH   WRKREG,74(WKAREG)        NEW SY
*   OLD  SX TO TX   OLD TX TO  SX
         LH    WRKREG,76(WKAREG)        SAVE OLD TX
         MVC   76(2,WKAREG),72(WKAREG)  OLD SX TO TX
         NI    76(WKAREG),X'0F'         RESET BLANKING BIT
         STH   WRKREG,72(WKAREG)        OLD TX TO SX
         B     SETSY
STORINIT OI    72(WKAREG),X'40'         SET  BEAM  OFF
         LA    CNTREG,8
STORELNK STM   1,14,80(WKAREG)
         LA    ADDREG,72(WKAREG)
         BAL   LINREG,STORE
         LM    1,14,80(WKAREG)
         BR    LINREG
         EJECT
*   XYLCHK  SUBROUTINE
*   CHECK X1,X2,Y1,Y2 LIMITS GREATER THAN 0 AND LESS THAN 4095
*   CHECK X1 LESS THAN X2 , Y1 LESS THAN Y2
*   ADDRESSOF XYLIM TABLE IN XYLREG BEFORE BAL
XYLCHK   LA    CNTREG,4                 SET  LOOP  COUNT
         LA    INXREG,0                 SET  INDEX
XYLLOOP  LH    WRKREG,0(XYLREG,INXREG)  LOAD  X1,Y1,X2,Y2
         C     WRKREG,ZERO
         BL    ERR4RET
         C     WRKREG,HIGH
         BH    ERR4RET
         A     INXREG,TWO
         BCT   CNTREG,XYLLOOP
         CLC   0(2,XYLREG),4(XYLREG)    X1 COMP  X2
         BNL   ERR4RET
         CLC   2(2,XYLREG),6(XYLREG)    Y1 COMP  Y2
         BNL   ERR4RET
         BR    LINREG
*   LOAD ERROR CODE IN REG 15
ERR40    LA    15,40                    PARAMETER ERROR DOES NOT RET
         B     ERRCNT
ERR24RET LA    15,24                    USER OUF HAS NOT RESET OLP
         B     ERRCNTR
ERR16RET LA    15,16                    U1,V1 GREATER THAN U2,V2
         B     ERRCNTR
ERR12RET LA    15,12                    FLT PT ERROR DETECTED
         B     ERRCNTR
ERR8RET  LA    15,8                     U,V LIMIT ERROR
         B     ERRCNTR
ERR4RET  LA    15,4                     XYLIM X1,Y1  X2,Y2 LIMIT ERROR
         B     ERRCNTR
ERRCNTR  LA    LINREG,RET
ERRCNT   L     TEMREG,64(WKAREG)
         A     TEMREG,ONE
         ST    TEMREG,64(WKAREG)
         BR    LINREG
*   TEST ERROR COUNT IN WORK AREA AND SET BIT
*   IN SIGN POSITION OF REG 15 IF MULTIPLE ERRORS
RET      LA    TEMREG,1
         C     TEMREG,64(WKAREG)
         BL    SETBIT
* RESTORE PROGRAM MASK TO SETTING UPON ENTRY
RETMACRO L     WRKREG,MASKSV
         SPM   WRKREG
         RETURN (14,12),T,RC=(15)
SETBIT   O     15,MZERO
         B     RETMACRO
         EJECT
*   LOGX LOOPS 8 TIMES / LOGCYCLE
*   TEST IF TX GREATER THAN X2 -IF YES GO TO YAXIS
*   LOGTABLE INDEXED BY 2 / LOOP
LOGX     LA    CONREG,8                 SET  LOOP CONTROL =8
         MVC   70(2,WKAREG),76(WKAREG)  SAVE SX FOR LOG CYCLE
         SR    INXREG,INXREG            SET  INDEX =0
LOGLOOPX LA    LOGREG,LOGTBL            GET  ADDR  OF LOG TABLE
         LR    ODDREG,XREG              LOAD  XINC
         MH    ODDREG,0(LOGREG,INXREG)            *  LOG
         SRA   ODDREG,14                ABSOLUTE  VAL
         AH    ODDREG,70(WKAREG)
         CH    ODDREG,4(XYLREG)         COMPARE TO  X2  LIMIT
         BH    YLEG
         STH   ODDREG,72(WKAREG)        NEW  TX
         LH    WRKREG,78(WKAREG)        SAVE OLD TY
         MVC   78(2,WKAREG),74(WKAREG)  OLD SY TO TY
         STH   WRKREG,74(WKAREG)        OLD TY TO SY
         MVC   76(2,WKAREG),72(WKAREG)  TX
         BAL   LINREG,STORINIT
         A     INXREG,TWO
         BCT   CONREG,LOGLOOPX
         LH    WRKREG,70(WKAREG)        GET SX FOR NEXT LOG CYCLE
         B     SETVALX
         EJECT
*   LOGY LOOPS 8 TIMES / LOGCYCLE
*   TEST IF TY GREATER THAN Y2 -IF YES RETURN
*   LOGTABLE INDEXED BY 2 / LOOP
LOGY     LA    CONREG,8                 SETLOOPCONTROL
         MVC   70(2,WKAREG),74(WKAREG)  SAVE SY FOR LOG CYCLE
         SR    INXREG,INXREG            SET  INXDEX = 0
LOGLOOPY LA    LOGREG,LOGTBL            GET  ADDR  OF  LOG  TABLE
         LR    ODDREG,YREG              LOAD  YINC
         MH    ODDREG,0(LOGREG,INXREG)             *  LOG
         SRA   ODDREG,14
         AH    ODDREG,70(WKAREG)
         CH    ODDREG,6(XYLREG)         COMPARE TO Y2 LIMIT
         BH    RET
         STH   ODDREG,74(WKAREG)        NEW  TY
         LH    WRKREG,76(WKAREG)        SAVE OLD  TX
         MVC   76(2,WKAREG),72(WKAREG)  OLD SX TO TX
         NI    76(WKAREG),X'0F'
         STH   WRKREG,72(WKAREG)        OLD TX TO SX
         MVC   78(2,WKAREG),74(WKAREG)  TY
         BAL   LINREG,STORINIT
         A     INXREG,TWO
         BCT   CONREG,LOGLOOPY
         LH    WRKREG,70(WKAREG)        GET SX FOR NEXT LOG CYCLE
         B     SETVALY
FLTLEG   CLI   13(PATREG),C'S'
         BE    SCALFLT
         CLI   13(PATREG),C'N'          TEST FOR NO SCALE
         BE    FCONVERT
         BAL   LINREG,ERR40
FCONVERT LR    VALREG,XREG              FIXCONVERT -(CONVERT FLOAT
         BAL   LINREG,FIXCONV           TO FIX)
         LR    XREG,VALREG
         LR    VALREG,YREG
         BAL   LINREG,FIXCONV
         LR    YREG,VALREG
         B     TESTUV
         EJECT
*    CONVERT  FLOATING  POINT  TO  FIXED  POINT  VALUES
*    TEST FLOATING POINT INPUT VALIDITY
*    VALREG CONTAINS THE VALUE TO BE CONVERTED
FIXCONV  ST    VALREG,0(WKAREG)         STORE FLT VAL IN WORKAREA
         LE    6,0(WKAREG)              LOAD VALUE TO FLOAT REG
         N     VALREG,FCHAR             CHECK  CHARACTERISTIC
         BE    FLERR1                   POSSIBLE ERROR
FCHECOK  AU    6,X6                     ADD EXPONENT TO FLOAT REG
         STE   6,0(WKAREG)              STORE CONV IN WORKAREA
         L     VALREG,0(WKAREG)         LOAD TO GR
         N     VALREG,XZERO             DROP CHARACTERISTIC
         LTR   VALREG,VALREG            IS VAL NEGATIVE
         BNL   NOTNEG
         N     VALREG,NSIGN             DROP SIGN
         LNR   VALREG,VALREG            TAKE TWO'S COMPLIMENT
NOTNEG   BR    LINREG                   RETURN TO NSI AFTER BAL
FLERR1   CE    6,ZERO                   IS VAL ZERO
         BE    FCHECOK
         B     ERR12RET
SCALFLT  LA    CONREG,4                 LOOP  COUNT
         LA    INXREG,0                 SET INDEX
         LA    WRKREG,0
FLTLOOP  LH    VALREG,0(XYLREG,INXREG)  GET X1Y1,X2Y2 VALUES
         BAL   LINREG,FLTCONV
         ST    VALREG,4(WKAREG,WRKREG)
         A     INXREG,TWO
         A     WRKREG,FOUR
         BCT   CONREG,FLTLOOP
*    FLOATING POINT SPECIFIED - TEST FOR CHARACTERISTIC ZERO AND
*    FRACTION NON ZERO. OF ALL U,V VALUES
         L     VALREG,U1
         BAL   LINREG,FIXCONV
         L     VALREG,U2
         BAL   LINREG,FIXCONV
         L     VALREG,V1
         BAL   LINREG,FIXCONV
         L     VALREG,V2
         BAL   LINREG,FIXCONV
         L     VALREG,UI
         BAL   LINREG,FIXCONV
         L     VALREG,VI
         BAL   LINREG,FIXCONV
         EJECT
*   SUBROUTINE TO SCALE FLOATING POINT VALUES
*   SCALED  U,V VALUES LOADED IN XREG AND YREG
*   (X2-X1)*UI/U2-U1   SCALED INCREMENT (XINC)
*   (Y2-Y1)*VI/V2-V1   SCALED INCREMENT (YINC)
FLTSCAL  LE    0,12(WKAREG)             X2
         SE    0,4(WKAREG)              -X1
         BC    13,ERR4RET               BRANCH ON OVF, MINUS OR ZERO
         ME    0,4(PATREG)              *UI
         LE    2,12(XYLREG)             U2
         SE    2,8(XYLREG)              -U1
         BC    13,ERR16RET              BRANCH ON OVF, MINUS OR ZERO
         DER   0,2
         STE   0,0(WKAREG)
         L     XREG,0(WKAREG)           XREG CONTAINS SCALED FP UI
         LE    0,16(WKAREG)             Y2
         SE    0,8(WKAREG)              -Y1
         BC    13,ERR4RET               BRANCH ON OVF, MINUS OR ZERO
         ME    0,8(PATREG)              *VI
         LE    2,20(XYLREG)             V2
         SE    2,16(XYLREG)             -V1
         BC    13,ERR16RET              BRANCH ON OVF, MINUS OR ZERO
         DER   0,2
         STE   0,0(WKAREG)
         L     YREG,0(WKAREG)           YREG CONTAINS SCALED FP
         B     FCONVERT
         EJECT
*    CONVERT  FIXED  POINT  TO  FLOATING  POINT  VALUES
*    VALREG CONTAINS THE VALUE TO BE CONVERTED
FLTCONV  O     VALREG,X6                EXPONENT OF 6
         ST    VALREG,0(WKAREG)
         LE    0,0(WKAREG)              LOAD FLOATING PT REG
         AE    0,X6                     NORMALIZE
         STE   0,0(WKAREG)
         L     VALREG,0(WKAREG)         FLOAT PT VAL IN VALREG
         BR    LINREG
*   SUBROUTINE TO SCALE   FIXED  POINT  VALUES
*   (X2-X1)*UI/U2-U1)= SCALED INCREMENT (XINC)
*   (Y2-Y1)*VI/V2-V1)= SCALED INCREMENT (YINC)
*   SCALED  U,V VALUES LOADED IN  XREG AND YREG  (FIXED POINT)
FIXSCAL  LH    ODDREG,4(XYLREG)         X2
         SH    ODDREG,0(XYLREG)         -X1
         BC    13,ERR4RET               BRANCH ON OVF, MINUS OR ZERO
         SR    EVEREG,EVEREG            ZERO EVEN REG
         MR    EVEREG,XREG              * UI
         L     XREG,12(XYLREG)          U2
         S     XREG,8(XYLREG)           -U1
         BC    13,ERR16RET              BRANCH ON OVF, MINUS OR ZERO
         SR    EVEREG,EVEREG            ZERO EVEN REG
         DR    EVEREG,XREG
         LR    XREG,ODDREG              SCALED U VALUE IN XREG
         LH    ODDREG,6(XYLREG)         Y2
         SH    ODDREG,2(XYLREG)         -Y1
         BC    13,ERR4RET               BRANCH ON OVF, MINUS OR ZERO
         SR    EVEREG,EVEREG            ZERO EVEN REG
         MR    EVEREG,YREG              * VI
         L     YREG,20(XYLREG)          V2
         S     YREG,16(XYLREG)          -V1
         BC    13,ERR16RET              BRANCH ON OVF, MINUS OR ZERO
         SR    EVEREG,EVEREG
         DR    EVEREG,YREG
         LR    YREG,ODDREG
         B     TESTUV
         EJECT
* STORE GRAPHIC DATA IN GDOA FOR POR
* INPUT TO SUBROUTINE
*   CNTREG = NUMBER OF BYTES OF GRAPHIC DATA TO STORE
*   ADDREG = ADDRESS OF THE GRAPHIC DATA
*   WKAREG = REGISTER 1 MUST CONTAIN THE WORKAREA ADDRESS
*   OABREG = ADDRESS OF OACB
STORE    SR    PASREG,PASREG            CLEAR OVERFLOW PASS INDICATOR
STORE1   L     OLPREG,16(0,OABREG)      ADDRESS OF OLP FROM OACB
         LR    WRKREG,CNTREG            LOAD BYTES TO MOVE
* CALCULATE ADDRESSES BASED ON N VALUE AND SIZE OF GDOA
STORE2   AR    OLPREG,WRKREG            OLP ADDRESS PLUS N VALUE
         LA    TEMREG,4
         AR    TEMREG,OLPREG            OLP PLUS N PLUS 4
         L     SLOREG,0(OABREG)         SLOA ADDRESS
         A     SLOREG,4(OABREG)         ADD LOA EQUALS TOTAL GDOA
         L     OLPREG,16(0,OABREG)      RESET INITIAL OLP ADDRESS
         CR    TEMREG,SLOREG
         BNH   OK                       ROOM FOR DATA
* NOT ENOUGH ROOM TO STORE ALL OF THE DATA-DETERMINE AMOUNT TO STORE
         SR    TEMREG,SLOREG            EQUAL BYTES-CAN'T STORE
         SR    WRKREG,TEMREG            NUMBER OF BYTES CAN STORE
* ANY BYTES TO STORE
         C     WRKREG,ZERO
         BNH   STORE4                   LESS OF EQUAL TO ZERO
         LH    TEMREG,H2A02
         CH    TEMREG,GOMODE
         BH    STORE3A
         LH    TEMREG,H0003
         NR    TEMREG,WRKREG
         BM    STORE4      GO TO USER OVERFLOW ROUTINE (EAGR)      7468
STORE3A  SR    CNTREG,WRKREG       BYTES REMAINING
         BAL   INTLNK,STORE6            LINK INTERNALLY
STORE3   LA    PASREG,1                 SET PASS INDICATOR
* STORE REGISTERS IN WORKAREA
         STM   0,15,0(WKAREG)           SAVE REGISTERS IN WORKAREA
         L     15,8(0,OABREG)           OVER FLOW ADDRESS
         LM    2,12,28(13)              RELOAD USER'S REGISTERS
         BALR  14,15                    LINK TO ROUTINE-SET RETURN
         LM    0,15,0(WKAREG)           RELOAD FROM WORKAREA
         B     STORE1                   GET NEW OLP ADDRESS-CONTINUE
* NO SPACE AVAILABLE
STORE4   C     PASREG,ONE               WAS A TRANSFER TO OVERFLOW MADE
         BL    STORE3                   NO
* SET ERROR CODE AND RETURN TO POR-LEAVE POR WITH RETURN MACRO
         B     ERR24RET
OK       BAL   INTLNK,STORE6            LINK INTERNALLY
         BR    LINREG
STORE6   LA    TEMREG,255               SET REG. EQUAL TO 255
STORE6A  CR    WRKREG,TEMREG            IS AMOUNT TO MOVE OVER 255
         BH    STORE7                   YES
         LR    TEMREG,WRKREG
         S     TEMREG,ONE               COMPENSATE FOR EXTRA BYTE
         EX    TEMREG,MOVE              MOVE GRAPHIC DATA
         AR    OLPREG,WRKREG            UPDATE OLP ADDRESS
         AR    ADDREG,WRKREG            UPDATE DATA ADDR
         ST    OLPREG,16(0,OABREG)      STORE NEW OLP ADDRESS
         BR    INTLNK                   RETURN INTERNALLY
STORE7   LR    SLOREG,TEMREG
         S     SLOREG,ONE               COMPENSATE FOR EXTRA BYTE
         EX    SLOREG,MOVE              MOVE GRAPHIC DATA
         AR    OLPREG,TEMREG            UPDATE OLP ADDRESS
         AR    ADDREG,TEMREG            UPDATE INPUT ADDRESS
         SR    WRKREG,TEMREG           REDUCE BY 255
         B     STORE6A                  MAKE NEXT COMPARISON
MOVE     MVC   0(0,OLPREG),0(ADDREG)    MOVE DATA TO GDOA
         EJECT
         CNOP  0,4
LOGTBL   DC    HS14'.3010'              LOG2
         DC    HS14'.4771'              LOG3
         DC    HS14'.6021'              LOG4
         DC    HS14'.6990'              LOG5
         DC    HS14'.7782'              LOG6
         DC    HS14'.8451'              LOG7
         DC    HS14'.9031'              LOG8
         DC    HS14'.9542'              LOG9
ZERO     DC    F'0'
ONE      DC    F'1'
TWO      DC    F'2'
HIGH     DC    F'4095'
FOUR     DC    F'4'
H2A02    DC    X'2A02'
H0003    DC    H'0003'
FCHAR    DC    X'7F000000'
XZERO    DC    X'80FFFFFF'                   SIGN AND VALUE -DROP EXP
X6       DC    X'46000000'                   EXPONENT OF SIX
NSIGN    DC    X'7FFFFFFF'                   DROP SIGN -RETAIN VALUE
MZERO    DC    X'80000000'
GAVM     DC    X'2A02'
PASREG   EQU   0
WKAREG   EQU   1
OBPREG   EQU   2
OABREG   EQU   2
PATREG   EQU   3
XYLREG   EQU   4
XREG     EQU   5
SLOREG   EQU   5
YREG     EQU   6
INTLNK   EQU   6
WRKREG   EQU   7
CNTREG   EQU   8
LOGREG   EQU   8
INXREG   EQU   10
OLPREG   EQU   10
EVEREG   EQU   10
ODDREG   EQU   11
VALREG   EQU   11
TEMREG   EQU   11
LINREG   EQU   12
CONREG   EQU   14
ADDREG   EQU   14
         EJECT
PARTAB   DSECT
XYLIM    DS    CL4
UI       DS    CL4
VI       DS    CL4
F        DS    CL1
S        DS    CL1
GTYPE    DS    CL1
*
XYLIMT   DSECT
X1       DS    CL2
Y1       DS    CL2
X2       DS    CL2
Y2       DS    CL2
U1       DS    CL4
U2       DS    CL4
V1       DS    CL4
V2       DS    CL4
*
WRKAREA  DSECT
OVFSAVE  DS    CL64                     STORE SAVE AREA -OVERFLOW
PORSAVE  DS    CL64                     POR SAVE AREA
ERRCOUNT DS    CL4                      ERROR COUNT SAVE AREA
SX1      DS    CL2
SY1      DS    CL2
SX2      DS    CL2
         ORG   SX2
TX       DS    CL2
SY2      DS    CL2
         ORG   SY2
TY       DS    CL2
WRKGTYPE DS    CL1                      GTYPE SAVE
MASKSV   DS    F                   SAVE SETTING OF USER PROGRAM MASK
         ORG   OVFSAVE+396
GOMODE   DS    CL2
         END
