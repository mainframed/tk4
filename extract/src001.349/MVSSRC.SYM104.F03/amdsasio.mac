         TITLE 'AMDSASIO VIRTUAL DUMP START I/O ROUTINE                *
                        '
AMDSASIO CSECT ,                                                01S0001
@MAINENT DS    0H                                               01S0001
         USING *,@15                                            01S0001
         B     @PROLOG                                          01S0001
         DC    AL1(16)                                          01S0001
         DC    C'AMDSASIO  75.280'                              01S0001
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                  01S0001
         BALR  @11,0                                            01S0001
@PSTART  DS    0H                                               01S0001
         USING @PSTART,@11                                      01S0001
         ST    @13,@SA00001+4                                   01S0001
         LA    @14,@SA00001                                     01S0001
         ST    @14,8(,@13)                                      01S0001
         LR    @13,@14                                          01S0001
*   SAVEFORM(1:4) = 'LSIO';         /* MOVE MODULE ID TO SAVE AREA   */
         MVC   SAVEFORM(4,R13),@CC01095                         01S0212
*   CCTREG = CCTADDR;               /* SET CCT POINTER               */
         L     CCTREG,@CF00742                                  01S0213
*   SRCBNEXT = VCTRCB;              /* SET UP RCB BACKWARD CHAIN     */
         L     @10,VCTRCB(,VCCTREG)                             01S0214
         ST    @10,SRCBNEXT                                     01S0214
*   SRCBSAVE = R13;                 /* SET UP SAVE AREA PTR FOR RCB
*                                      EXIT                          */
         ST    R13,SRCBSAVE                                     01S0215
*   SRCBBASE = BASEREG;             /* SAVE BASE REGISTER FOR RCB
*                                      EXIT                          */
         ST    BASEREG,SRCBBASE                                 01S0216
*   VCTRCB =ADDR(SIORCB);           /* QUEUE SIO RCB ON CHAIN        */
         LA    @10,SIORCB                                       01S0217
         ST    @10,VCTRCB(,VCCTREG)                             01S0217
*                                                               01S0218
*   /*****************************************************************/
*   /*                                                               */
*   /* ISOLATE THE TYPE OF INPUT REQUEST AND INITIALIZE. IF THE INPUT*/
*   /* REQUEST IS INVALID CALL AUDIT SINCE THIS IS DUE TO AN INTERNAL*/
*   /* AMDSADMP ERROR                                                */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0218
*/* D (YES,DAIO,NO,) DA I/O REQUEST ?                                */
*/* D (YES,WKIO,NO,) WORKFILE I/O REQUEST ?                          */
*/* D (YES,OUTIO,NO,) OUTPUT I/O REQUEST ?                           */
*/* D (YES,OUTIO,NO,AUDEXIT) CTIOTERM REQUEST ?                      */
*/*AUDEXIT: L (,EREXIT) AMDSAAUD: SVC 13 TO OBTAIN DUMP              */
*/*DAIO: P (,%SPROC) SET IODBREG = ADDR OF DA IODB                   */
*/*WKIO: P (,%SPROC) SET IODBREG = ADDR OF WKFILE IODB               */
*/*OUTIO: P (,%SPROC) SET IODBREG = ADDR OF OUTPUT IODB              */
*   IF CTIODA = ON THEN             /* IF DA REQUEST USE DA IODB     */
         TM    CTIODA(CCTREG),B'00100000'                       01S0218
         BNO   @RF00218                                         01S0218
*     IODBREG = ADDR(IODBDA);                                   01S0219
         L     IODBREG,@CA00943                                 01S0219
*   ELSE                                                        01S0220
*     IF CTIOWK = ON THEN           /* IF WORKFILE REQUEST USE  01S0220
*                                      WORKFILE IODB                 */
         B     @RC00218                                         01S0220
@RF00218 TM    CTIOWK(CCTREG),B'00010000'                       01S0220
         BNO   @RF00220                                         01S0220
*       IODBREG = ADDR(IODBWORK);                               01S0221
         L     IODBREG,@CA00944                                 01S0221
*     ELSE                                                      01S0222
*       IF CTIOOUT = ON × CTIOTERM = ON THEN                    01S0222
         B     @RC00220                                         01S0222
@RF00220 TM    CTIOOUT(CCTREG),B'11000000'                      01S0222
         BZ    @RF00222                                         01S0222
*         IODBREG = ADDR(IODBOUT);  /* IF OUTPUT OR TERMINATION 01S0223
*                                      REQUEST USE THE OUTPUT IODB   */
         L     IODBREG,@CA00945                                 01S0223
*       ELSE                                                    01S0224
*         DO;                                                   01S0224
         B     @RC00222                                         01S0224
@RF00222 DS    0H                                               01S0225
*           VCTAUDIT = SIOAUD1;     /* SET SIO AUDIT ERROR CODE TO
*                                      UNIQUELY IDENTIFY THIS ERROR
*                                      CONDITION AS AN INVALID INPUT
*                                      REQUEST                       */
         MVC   VCTAUDIT(2,VCCTREG),SIOAUD1                      01S0225
*           SVC (AUDSVC);           /* CALL AUDIT AS THIS IS A SADMP
*                                      ERROR                         */
         SVC   13                                               01S0226
*           GEN NOSEQFLOW EXIT;     /* TO INDICATE NO RETURN FROM SVC
*                                     ABOVE                         */
*         END;                                                  01S0228
*                                                               01S0229
*   /*****************************************************************/
*   /*                                                               */
*   /* DETERMINE IF THE DEVICE WAS OPERATIONAL PREVIOUSLY. IF        */
*   /* CATASTROPHIC ERRORS PREVIOUSLY OCCURRED THERE IS NO NEED TO   */
*   /* ATTEMPT I/O. IF THE DEVICE HAS NOT PREVIOUSLY BEEN USED OR    */
*   /* ERRORS HAVE NOT OCCURRED, PREPARE TO PERFORM I/O              */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0229
*/*%SPROC: D (YES,TERMREQ,NO,) CTIOTERM = 1 ?                        */
*/* D (YES,EREXIT,NO,) IODBTERM = 1 ?                                */
*/* P TURN OFF BCTCOMP IN BCT POINTED TO BY THE ACTIVE IODB          */
*   IF CTIOTERM = ON THEN                                       01S0229
@RC00222 DS    0H                                               01S0229
@RC00220 DS    0H                                               01S0229
@RC00218 TM    CTIOTERM(CCTREG),B'10000000'                     01S0229
         BO    @RT00229                                         01S0229
*     GO TO TERMREQ;                /* IF TERMINATION REQUEST HANDLE
*                                      DIRECTLY                      */
*   IF IODBTERM = ON THEN                                       01S0231
         TM    IODBTERM(IODBREG),B'10000000'                    01S0231
         BO    @RT00231                                         01S0231
*     GO TO EREXIT;                 /* IF CATASTROPHIC I/O ERROR - DO
*                                      NOT PERFORM I/O               */
*   BCTCOMP = OFF;                  /* TURN OFF I/O COMPLETED BIT IN
*                                      BUFFER                        */
         L     @10,IODBBCT(,IODBREG)                            01S0233
         NI    BCTCOMP(@10),B'01111111'                         01S0233
*                                                               01S0234
*   /*****************************************************************/
*   /*                                                               */
*   /* NOW TO THE HEART OF THE SIO CODE. AS A FUNCTION OF THE DEVICE,*/
*   /* THE CHANNEL PROGRAMS TO PERFORM THE I/O MUST BE SET UP AND    */
*   /* INITIALIZED. THIS SECTION OF CODE PROCESSES DIRECT ACCESS I/O */
*   /* REQUESTS                                                      */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0234
*/* D (YES,DAIOTYPE,NO,WKFILECK) DA I/O ?                            */
*/*DAIOTYPE: P USE DA CCW'S FOR I/O                                  */
*/* P IODBCAW = SEEKADDR                                             */
*/* N FORMAT OF DA CCW'S SEEK, SRCH, TIC, READ                       */
*/* N SEEKADDR IN IODBCCHH                                           */
*/* P (,COMENTRY) STORE BCTRADDR INTO READ CCW ADDRESS               */
*   IF IODBREG = ADDR(IODBDA) THEN                              01S0234
         L     @09,@CA00943                                     01S0234
         CR    IODBREG,@09                                      01S0234
         BNE   @RF00234                                         01S0234
*     DO;                           /* PROCESS DA IO                 */
*       IODBCAW = ADDR(DACCW);      /* SET UP CCW CHAIN IN CAW       */
         LA    @09,DACCW                                        01S0236
         ST    @09,IODBCAW(,IODBREG)                            01S0236
*       DASEEKAD = ADDR(IODBSEEK);  /* INITIALIZE SEEK ADDRESS       */
         LA    @09,IODBSEEK(,IODBREG)                           01S0237
         STCM  @09,7,DASEEKAD                                   01S0237
*       DASRCHAD = ADDR(IODBSRCH);  /* INITIALIZE SEARCH ADDRESS     */
         LA    @09,IODBSRCH(,IODBREG)                           01S0238
         STCM  @09,7,DASRCHAD                                   01S0238
*       DAREADAD = BCTRADDR;        /* INITIALIZE CCW INPUT AREA
*                                      ADDRESS                       */
         MVC   DAREADAD(3),BCTRADDR+1(@10)                      01S0239
*       CTIORSET = ON;              /* INDICATE TRANSFER TO A NEW CPU*/
         OI    CTIORSET(CCTREG),B'00000010'                     01S0240
*       PFSIODA = PFSIODA + 1;      /* COUNT NUMBER OF DA SIO'S      */
*                                                               01S0241
         LA    @10,1                                            01S0241
         AH    @10,PFSIODA                                      01S0241
         STH   @10,PFSIODA                                      01S0241
*       GO TO COMENTRY;             /* PERFORM COMMON I/O FUNCTION   */
         B     COMENTRY                                         01S0242
*     END;                                                      01S0243
*                                                               01S0244
*   /*****************************************************************/
*   /*                                                               */
*   /* IF NOT DA THEN CHECK IF THIS IS WORKFILE. IF YES CHECK THE    */
*   /* VALIDITY OF THE REQUESTED ADDRESS. IF INVALID, THE ERROR EXIT */
*   /* IS TAKEN OTHERWISE PROCESSING IS SPLIT UP FOR DA WORKFILE AND */
*   /* TAPE WORKFILE                                                 */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0244
*/*WKFILECK: D (YES,,NO,%OUTP) WORKFILE I/O ?                        */
*/* P OBTAIN REQUESTED VBN FROM IODBCCHH                             */
*/* D (YES,EREXIT,NO,) REQUESTED VBN > VCTWKHI ?                     */
*   IF IODBREG = ADDR(IODBWORK) THEN                            01S0244
@RF00234 L     @10,@CA00944                                     01S0244
         CR    IODBREG,@10                                      01S0244
         BNE   @RF00244                                         01S0244
*     DO;                           /* PROCESSING FOR WORKFILE I/O   */
*       IF IODBR > VCTWKHI THEN                                 01S0246
         CLC   IODBR(1,IODBREG),VCTWKHI(VCCTREG)                01S0246
         BH    @RT00246                                         01S0246
*         GO TO EREXIT;             /* IF RECORD IS UNAVAILABLE SKIP
*                                      I/O                           */
*                                                               01S0247
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS SECTION DYNAMICALLY GENERATES THE TAPE WORKFILE CCW'S    */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0248
*/* D (YES,WKTAPE,NO,WKDA) IODBCLAS = TAPE ?                         */
*/*WKTAPE: P OBTAIN CURRENT VBN FROM VCTWKC                          */
*/* P BUILD DYNAMIC CCW TO BSR OR FSR THE TAPE TO PROPER VBN         */
*/* N CCW FORMAT IS BSR/FSR ... BSR/FSR, READ                        */
*/* P MOVE ADDRESS OF INPUT AREA FROM BCTRADDR INTO READ CCW         */
*/* P (,COMENTRY) IODBCAW = BSR/FRS CCW ADDRESS                      */
*       IF IODBCLAS = TAPE THEN                                 01S0248
         CLI   IODBCLAS(IODBREG),128                            01S0248
         BNE   @RF00248                                         01S0248
*         DO;                       /* FOR TAPE WORKFILE             */
*           DYNAPTR = ADDR (DYNAREA); /* SET UP TO START OF DYNAMIC
*                                      AREA                          */
         LA    DYNAPTR,DYNAREA                                  01S0250
*           VCTWKC = VCTWKC + 1;    /* POINT TO RECORD TO WHICH TAPE
*                                      IS POSITIONED                 */
         LA    @10,1                                            01S0251
         SLR   @09,@09                                          01S0251
         IC    @09,VCTWKC(,VCCTREG)                             01S0251
         ALR   @10,@09                                          01S0251
         STC   @10,VCTWKC(,VCCTREG)                             01S0251
*           DO WHILE IODBR ^= VCTWKC; /* DYNAMICALLY GENERATE CCW'S  */
         B     @DE00252                                         01S0252
@DL00252 DS    0H                                               01S0253
*             IF IODBR > VCTWKC THEN                            01S0253
         CLC   IODBR(1,IODBREG),VCTWKC(VCCTREG)                 01S0253
         BNH   @RF00253                                         01S0253
*               DO;                                             01S0254
*                 DYNACCW = WKTPFSR; /* MOVE IN FSR CCW              */
         MVC   DYNACCW(8,DYNAPTR),WKTPFSR                       01S0255
*                 VCTWKC = VCTWKC + 1; /* BUMP VCT POINTER FOR FSR   */
         LA    @10,1                                            01S0256
         SLR   @09,@09                                          01S0256
         IC    @09,VCTWKC(,VCCTREG)                             01S0256
         ALR   @10,@09                                          01S0256
         STC   @10,VCTWKC(,VCCTREG)                             01S0256
*               END;                                            01S0257
*             ELSE                                              01S0258
*               DO;                                             01S0258
         B     @RC00253                                         01S0258
@RF00253 DS    0H                                               01S0259
*                 DYNACCW = WKTPBSR; /* MOVE IN BSR CCW              */
         MVC   DYNACCW(8,DYNAPTR),WKTPBSR                       01S0259
*                 VCTWKC = VCTWKC - 1; /* DECREMENT VCT POINTER FOR
*                                      BSR                           */
         SLR   @10,@10                                          01S0260
         IC    @10,VCTWKC(,VCCTREG)                             01S0260
         BCTR  @10,0                                            01S0260
         STC   @10,VCTWKC(,VCCTREG)                             01S0260
*               END;                                            01S0261
*             DYNAPTR = DYNAPTR + LENGTH(CCW); /* BUMP TO NEXT  01S0262
*                                      AVAILABLE AREA FOR THE CCW    */
@RC00253 AL    DYNAPTR,@CF00036                                 01S0262
*           END;                                                01S0263
@DE00252 CLC   IODBR(1,IODBREG),VCTWKC(VCCTREG)                 01S0263
         BNE   @DL00252                                         01S0263
*           WKTPRDAD = BCTRADDR;    /* SET UP INPUT BUFFER ADDRESS   */
         L     @10,IODBBCT(,IODBREG)                            01S0264
         MVC   WKTPRDAD(3),BCTRADDR+1(@10)                      01S0264
*           DYNACCW2 = WKTPREAD;    /* SET UP READ CCW'S             */
         MVC   DYNACCW2(16,DYNAPTR),WKTPREAD                    01S0265
*           IODBCAW = ADDR(DYNAREA); /* SET UP AREA ADDRESS          */
         LA    @10,DYNAREA                                      01S0266
         ST    @10,IODBCAW(,IODBREG)                            01S0266
*           PFSIOWK = PFSIOWK + 1;  /* COUNT NUMBER OF DA WORKFILE
*                                      SIO'S                         */
*                                                               01S0267
         LA    @10,1                                            01S0267
         AH    @10,PFSIOWK                                      01S0267
         STH   @10,PFSIOWK                                      01S0267
*           GO TO COMENTRY;         /* PERFORM COMMON I/O FUNCTION   */
         B     COMENTRY                                         01S0268
*         END;                                                  01S0269
*                                                               01S0270
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS SECTION HANDLES DIRECT ACCESS WORKFILE CCW'S             */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0270
*/*WKDA: D (YES,,NO,%AUDS) IODBCLAS = D.A. ?                         */
*/* P OBTAIN START OF WORKFILE DATA SET FROM CTCCHHW                 */
*/* P OBTAIN DEVICE TYPE FROM IODBTYPE                               */
*/* P MATCH DEVICE TYPE IN TABLE                                     */
*/* D (YES,,NO,EREXIT) DEVICE IN TABLE ?                             */
*/* P DIVIDE VBN BY NUMBER OF WKFILE RECORDS PER TRACK               */
*/* P CTCCHHW + QUOTIENT = CCHH OF WKFILE RECORD                     */
*/* P R = REMAINDER FROM ABOVE DIVISION + 1                          */
*/* P STORE CCHHR INTO IODBCCHH                                      */
*/*WKHHMAX: D (YES,,NO,WKEND) HH >= DEVICE MAXIMUM ?                 */
*/* P CC = CC + 1                                                    */
*/* P (,WKHHMAX) HH = HH - DEVICE MAXIMUM                            */
*/*WKEND: D (YES,EREXIT,NO,) IODBCCHH > CTCCHHE ?                    */
*/* P IODBCAW = SEEK CCW                                             */
*/* N FORMAT OF WKFILE CCW IS SEEK, SRCH, TIC, READ                  */
*/* N SEEKADDR IS IN IODBCCHH                                        */
*/* P (,COMENTRY) STORE BCTRADDR INTO CCW READ ADDRESS               */
*/*%AUDS: L SVC 13 CALL AUDIT TO TAKE DUMP                           */
*       IF IODBCLAS = DA THEN                                   01S0270
@RF00248 CLI   IODBCLAS(IODBREG),32                             01S0270
         BNE   @RF00270                                         01S0270
*         DO;                                                   01S0271
*           WKDCTPTR = ADDR(WKDCT); /* OBTAIN ADDRESS OF DEVICE TABLE*/
         LA    WKDCTPTR,WKDCT                                   01S0272
*           DO WHILE WKDCTPTR ^= ADDR(DEND); /* SEARCH ENTIRE TABLE  */
         B     @DE00273                                         01S0273
@DL00273 DS    0H                                               01S0274
*             IF IODBTYPE = WKDCTID THEN                        01S0274
         CLC   IODBTYPE(1,IODBREG),WKDCTID(WKDCTPTR)            01S0274
         BNE   @RF00274                                         01S0274
*               DO;                 /* IF MATCH FOUND IN TABLE  01S0275
*                                      PROCESS DEVICE                */
*                 IODBSRCH = CTCCHHW + (IODBR / WKDCTTK); /* CCHH =
*                                      STARTING WORKFILE CCHH + 01S0276
*                                      OFFSET INTO WORKFILE DATA AREA*/
         SLR   @10,@10                                          01S0276
         IC    @10,IODBR(,IODBREG)                              01S0276
         SLR   @09,@09                                          01S0276
         IC    @09,WKDCTTK(,WKDCTPTR)                           01S0276
         LR    @01,@10                                          01S0276
         SLR   @00,@00                                          01S0276
         DR    @00,@09                                          01S0276
         AL    @01,CTCCHHW(,CCTREG)                             01S0276
         STCM  @01,15,IODBSRCH(IODBREG)                         01S0276
*                 IODBR = (IODBR//WKDCTTK) + 1; /* R IS REMAINDER OF
*                                      ABOVE                         */
         LA    @15,1                                            01S0277
         LR    @00,@10                                          01S0277
         SRDA  @00,32                                           01S0277
         DR    @00,@09                                          01S0277
         ALR   @00,@15                                          01S0277
         STC   @00,IODBR(,IODBREG)                              01S0277
*                 IODBCC = IODBCC + IODBHH/WKDCTTM; /* UPDATE   01S0278
*                                      CYLINDER COUNT                */
         SLR   @10,@10                                          01S0278
         ICM   @10,3,IODBHH(IODBREG)                            01S0278
         SLR   @09,@09                                          01S0278
         IC    @09,WKDCTTM(,WKDCTPTR)                           01S0278
         LR    @01,@10                                          01S0278
         SLR   @00,@00                                          01S0278
         DR    @00,@09                                          01S0278
         SLR   @00,@00                                          01S0278
         ICM   @00,3,IODBCC(IODBREG)                            01S0278
         ALR   @01,@00                                          01S0278
         STCM  @01,3,IODBCC(IODBREG)                            01S0278
*                 IODBHH = IODBHH//WKDCTTM; /* RESET HEAD COUNT      */
         LR    @00,@10                                          01S0279
         SRDA  @00,32                                           01S0279
         DR    @00,@09                                          01S0279
         STCM  @00,3,IODBHH(IODBREG)                            01S0279
*                 IF IODBSRCH > CTCCHHE THEN                    01S0280
         CLC   IODBSRCH(4,IODBREG),CTCCHHE(CCTREG)              01S0280
         BH    @RT00280                                         01S0280
*                   GO TO EREXIT;   /* IF OUT OF DATA EXTENTS - ERROR*/
*                 IODBCAW = ADDR(WKDACCW); /* SET UP WORKFILE CCW
*                                      ADDRESS                       */
         LA    @10,WKDACCW                                      01S0282
         ST    @10,IODBCAW(,IODBREG)                            01S0282
*                 WKDASKAD = ADDR(IODBSEEK); /* SET UP SEEK ADDRESS  */
         LA    @10,IODBSEEK(,IODBREG)                           01S0283
         STCM  @10,7,WKDASKAD                                   01S0283
*                 WKDASRAD = ADDR(IODBSRCH); /* SET UP SEARCH ADDRESS*/
         LA    @10,IODBSRCH(,IODBREG)                           01S0284
         STCM  @10,7,WKDASRAD                                   01S0284
*                 WKDARDAD = BCTRADDR; /* SET UP INPUT AREA ADDRESS  */
         L     @10,IODBBCT(,IODBREG)                            01S0285
         MVC   WKDARDAD(3),BCTRADDR+1(@10)                      01S0285
*                 PFSIOWK = PFSIOWK + 1; /* COUNT NUMBER OF TAPE
*                                      WORKFILE SIO'S                */
*                                                               01S0286
         AH    @15,PFSIOWK                                      01S0286
         STH   @15,PFSIOWK                                      01S0286
*                 GO TO COMENTRY;   /* GO DO I/O FOR WORKFILE        */
         B     COMENTRY                                         01S0287
*               END;                /* ENDS PROCESSING FOR WORKFILE
*                                      DEVICE                        */
*             WKDCTPTR = WKDCTPTR + LENGTH(WKDCTYPE); /* BUMP TO NEXT
*                                      TABLE ENTRY                   */
@RF00274 AL    WKDCTPTR,@CF00072                                01S0289
*           END;                    /* ENDS DEVICE TABLE SEARCH      */
@DE00273 LA    @10,DEND                                         01S0290
         CR    WKDCTPTR,@10                                     01S0290
         BNE   @DL00273                                         01S0290
*           GO TO EREXIT;           /* THIS DEVICE IS NOT SUPPORTED  */
         B     EREXIT                                           01S0291
*         END;                      /* ENDS WORKFILE DEVICE CHECK    */
*       VCTAUDIT = SIOAUD2;         /* SET SIO AUDIT ERROR TO   01S0293
*                                      IDENTIFY THIS CONDITION AS AN
*                                      INVALID WORKFILE DEVICE TYPE  */
@RF00270 MVC   VCTAUDIT(2,VCCTREG),SIOAUD2                      01S0293
*       SVC (AUDSVC);               /* CALL AUDIT THIS IS A SADMP
*                                      ERROR                         */
         SVC   13                                               01S0294
*     END;                          /* END OF WORKFILE PROCESSING    */
*                                                               01S0296
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS SECTION PROCESSES NORMAL OUTPUT REQUESTS. FIRST A        */
*   /* DETERMINATION IS MADE AS TO THE AVAILABILITY OF CCW'S. IF     */
*   /* AVAILABLE, THE CCW IS SET UP FOR I/O. IF UNAVAILABLE, A CALL  */
*   /* TO AMDSAWAT IS MADE TO FREE SOME CCW'S.                       */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0296
*/*%OUTP: P OBTAIN CURRENT AVAILABLE CCW FROM VCTCPOUT               */
*/* D (YES,%TOPC,NO,) I/O ACTIVE ?                                   */
*/*CPAVAIL: D (YES,%CCWA,NO,) ANY CCW'S AVAILABLE ?                  */
*/* P CTIOINT = 1                                                    */
*/* L AMDSAWAT: CALL VIA SVC 1 TO FREE A CHANNEL PROGRAM             */
*/* P FREE 1ST CHANNEL PROGRAM AND RECOVER                           */
*/* D (YES,CPAVAIL,NO,) CCW'S AVAILABLE ?                            */
*/* P AFTER 10 WAIT RETRIES, FREE TOP CCW                            */
*/* P (,COMENTRY) PERFORM SIO OPERATION                              */
*                                                               01S0296
*CPAVAIL:                                                       01S0296
*   CCWADDR = VCTCPOUT + 2*LENGTH(CCW); /* SET UP TO AVAILABLE  01S0296
*                                      CCW                           */
@RF00244 DS    0H                                               01S0296
CPAVAIL  L     @10,VCTCPOUT(,VCCTREG)                           01S0296
         LA    CCWADDR,16                                       01S0296
         ALR   CCWADDR,@10                                      01S0296
*   IF CCWCMD ^= TICMD THEN         /* LOOK FOR A NOP                */
         CLI   CCWCMD(CCWADDR),8                                01S0297
         BE    @RF00297                                         01S0297
*     CCWADDR = VCTCPOUT;           /* POINT TO NEXT CCW TO USE      */
         LR    CCWADDR,@10                                      01S0298
*    ELSE DO;                                              /*@YM04503*/
         B     @RC00297                                         01S0299
@RF00297 DS    0H                                               01S0300
*     BCTHOLD = IODBBCT;            /* DEQUEUE LAST BCT      @YM03675*/
         L     BCTHOLD,IODBBCT(,IODBREG)                        01S0300
*     IODBBCT = BCTHOLD -> BCTNEXT; /*         DURING WAIT   @YM03675*/
         L     @10,BCTNEXT(,BCTHOLD)                            01S0301
         ST    @10,IODBBCT(,IODBREG)                            01S0301
*       DO I = 1 TO 10;             /* PERFORM LOOP ONLY 10 TIMES    */
         LA    I,1                                              01S0302
@DL00302 DS    0H                                               01S0303
*         CTIOINT = ON;             /* TURN ON IMMEDIATE RETURN FLAG */
         OI    CTIOINT(CCTREG),B'00000100'                      01S0303
*         RESPECIFY RETCODE RESTRICTED;                         01S0304
*         PFSIOWAT= PFSIOWAT+ 1;    /* COUNT NUMBER OF CALLS TO WAIT
*                                      FOR CCW'S                     */
*                                                               01S0305
         LA    @14,1                                            01S0305
         AH    @14,PFSIOWAT                                     01S0305
         STH   @14,PFSIOWAT                                     01S0305
*         SVC (WATSVC);             /* FREE A CHANNEL PROGRAM        */
         SVC   1                                                01S0306
*         CTIOINT = OFF;            /* RESET FLAG                    */
         NI    CTIOINT(CCTREG),B'11111011'                      01S0307
*        IF RETCODE = ZERO THEN DO;                        /*@YM04503*/
         LTR   RETCODE,RETCODE                                  01S0308
         BNZ   @RF00308                                         01S0308
*       BCTHOLD -> BCTNEXT = IODBBCT;  /* RE-QUEUE           @YM03675*/
         L     @14,IODBBCT(,IODBREG)                            01S0310
         ST    @14,BCTNEXT(,BCTHOLD)                            01S0310
*       IODBBCT = BCTHOLD;          /*   LAST BCT            @YM03675*/
         ST    BCTHOLD,IODBBCT(,IODBREG)                        01S0311
*      GO TO CPAVAIL;                /* IF WAIT FREED CCW,   @YM04503*/
         B     CPAVAIL                                          01S0312
*      END;                          /* CHECK IF ALL AVAIL   @YM04503*/
*         RESPECIFY RETCODE UNRESTRICTED;                       01S0314
@RF00308 DS    0H                                               01S0315
*       END;                                                    01S0315
         AL    I,@CF00067                                       01S0315
         C     I,@CF00764                                       01S0315
         BNH   @DL00302                                         01S0315
*       BCTHOLD -> BCTNEXT = IODBBCT;  /* RE-QUEUE           @YM03675*/
         L     @10,IODBBCT(,IODBREG)                            01S0316
         ST    @10,BCTNEXT(,BCTHOLD)                            01S0316
*       IODBBCT = BCTHOLD;          /*   LAST BCT            @YM03675*/
         ST    BCTHOLD,IODBBCT(,IODBREG)                        01S0317
*       CCWADDR = VCTCPOUT;         /* BACK UP TO HDR CMD            */
         L     CCWADDR,VCTCPOUT(,VCCTREG)                       01S0318
*       CCWDADDR = ADDR(BCTKEY1);   /* SET UP HEADER PORTION         */
         L     @10,IODBBCT(,IODBREG)                            01S0319
         LA    @09,BCTKEY1(,@10)                                01S0319
         STCM  @09,7,CCWDADDR(CCWADDR)                          01S0319
*       EVAL(CCWADDR + LENGTH(CCW)) -> CCWDADDR = BCTRADDR; /*  01S0320
*                                      SET UP BUFFER OUT PUT ADDRESS */
         LA    @09,8                                            01S0320
         LR    @03,CCWADDR                                      01S0320
         ALR   @03,@09                                          01S0320
         MVC   CCWDADDR(3,@03),BCTRADDR+1(@10)                  01S0320
*       IODBCAW = CCWADDR;          /* THIS IS THE CCW TO BE    01S0321
*                                      RESTARTED                     */
         ST    CCWADDR,IODBCAW(,IODBREG)                        01S0321
*       CCWPCI = OFF;               /* NO PCI INTERRUPT FROM THIS CCW*/
         NI    CCWPCI(CCWADDR),B'11110111'                      01S0322
*       CCWADDR = CCWADDR - LENGTH(CCW); /* BACK UP TO PREVIOUS 01S0323
*                                      CCW                           */
         SLR   CCWADDR,@09                                      01S0323
*       IF CCWADDR < ADDR(OUTCCW) THEN                          01S0324
         LA    @10,OUTCCW                                       01S0324
         CR    CCWADDR,@10                                      01S0324
         BNL   @RF00324                                         01S0324
*         CCWADDR = ADDR(OUTCCW) + LENGTH(OUTCCW) - LENGTH(CCW);
         SL    @10,@CF01132                                     01S0325
         LR    CCWADDR,@10                                      01S0325
*                                   /* RESET TO NOP COMMAND AT THE
*                                      END OF CCWETY                 */
*       CCWCMD = NOPCMD;            /* INSURE THIS IS A NOP COMMAND  */
@RF00324 MVI   CCWCMD(CCWADDR),X'03'                            01S0326
*       GO TO COMENTRY;             /* PERFORM I/O OPERATION         */
         B     COMENTRY                                         01S0327
*     END;                                                      01S0328
*                                                               01S0329
*   /*****************************************************************/
*   /*                                                               */
*   /* SET UP AVAILABLE CCW IN ORDER TO WRITE THE OUTPUT RECORDS     */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0329
*/*%CCWA: P SET UP TO CCW FOLLOWING LAST ACTIVE CCW                  */
*/*%TOPC: P STORE BCTRADDR INTO 2ND WRITE                            */
*/* N FORMAT OF CCW'S WRITE HDR DATA CHAINED TO WRITE AND TIC/NOP    */
*/* N HDR IS BCTKEY1, BCTKEY2, BCTASID, BCTVADDR                     */
*/* P SET ADDRESS OF FIRST WRITE = ADDRESS OF BCTKEY1                */
*/* P CHANGE TIC/NOP TO NOP                                          */
*/* D (YES,,NO,SIOCHAIN) IODBCAW = 0 ?                               */
*/* P TURN OFF PCI IN FIRST WRITE                                    */
*/* P (,COMENTRY) IODBCAW = WRITE CCW ADDRESS                        */
*/*SIOCHAIN: P TURN ON PCI IN FIRST WRITE                            */
*/* P (,NORMEXIT) CHANGE PRIOR NOP TO TIC FOR CONTINUOUS        01S0329
*/*I/O CHAINING                                                      */
*   CCWDADDR = ADDR(BCTKEY1);       /* SET UP DATA ADDRESS FIELD     */
@RC00297 L     @10,IODBBCT(,IODBREG)                            01S0329
         LA    @09,BCTKEY1(,@10)                                01S0329
         STCM  @09,7,CCWDADDR(CCWADDR)                          01S0329
*   EVAL(CCWADDR + LENGTH(CCW)) -> CCWDADDR = BCTRADDR; /* OUTPUT
*                                      BUFFER ADDRESS                */
         LA    @09,8                                            01S0330
         ALR   @09,CCWADDR                                      01S0330
         MVC   CCWDADDR(3,@09),BCTRADDR+1(@10)                  01S0330
*   IF IODBACTV = OFF THEN                                      01S0331
         TM    IODBACTV(IODBREG),B'00000100'                    01S0331
         BNZ   @RF00331                                         01S0331
*     DO;                           /* IF NO I/O IN PROGRESS         */
*       CCWPCI = OFF;               /* DO NOT PCI FIRST CCW          */
         NI    CCWPCI(CCWADDR),B'11110111'                      01S0333
*       IODBCAW = CCWADDR;          /* SET CAW                       */
         ST    CCWADDR,IODBCAW(,IODBREG)                        01S0334
*       CCWADDR = CCWADDR + 2*LENGTH(CCW); /* SET UP TO NOP          */
         AL    CCWADDR,@CF00127                                 01S0335
*       CCWCMD = NOPCMD;            /* MAKE CERTAIN CMD IS NOP       */
         MVI   CCWCMD(CCWADDR),X'03'                            01S0336
*       VCTCPOUT = CCWDADDR;        /* SET TO NEXT CCW               */
         L     @10,CCWDADDR-1(,CCWADDR)                         01S0337
         LA    @10,0(,@10)                                      01S0337
         ST    @10,VCTCPOUT(,VCCTREG)                           01S0337
*       PFSIOOUT= PFSIOOUT+ 1;      /* COUNT NUMBER OF OUTPUT SIO'S  */
*                                                               01S0338
         LA    @10,1                                            01S0338
         AH    @10,PFSIOOUT                                     01S0338
         STH   @10,PFSIOOUT                                     01S0338
*       GO TO COMENTRY;             /* ISSUE SIO                     */
         B     COMENTRY                                         01S0339
*     END;                                                      01S0340
*   CCWPCI = ON;                    /* SET UP TO PCI TO PREVIOUS SIO */
@RF00331 OI    CCWPCI(CCWADDR),B'00001000'                      01S0341
*   IF CCWADDR = ADDR(OUTCCW) THEN                              01S0342
         LA    @10,OUTCCW                                       01S0342
         CR    CCWADDR,@10                                      01S0342
         BNE   @RF00342                                         01S0342
*     CCWADDR = ADDR(OUTCCW) + LENGTH(OUTCCW) - LENGTH(CCW);    01S0343
         SL    @10,@CF01132                                     01S0343
         LR    CCWADDR,@10                                      01S0343
*   ELSE                                                        01S0344
*     CCWADDR = CCWADDR - LENGTH(CCW); /* BACK UP TO NOP             */
         B     @RC00342                                         01S0344
@RF00342 SL    CCWADDR,@CF00036                                 01S0344
*   CCWCMD = TICMD;                 /* TIC TO NEXT CCW               */
@RC00342 MVI   CCWCMD(CCWADDR),X'08'                            01S0345
*   CCWADDR = CCWDADDR + 2* LENGTH(CCW); /* GET NEXT NOP             */
         LA    @10,16                                           01S0346
         L     @09,CCWDADDR-1(,CCWADDR)                         01S0346
         LA    @09,0(,@09)                                      01S0346
         ALR   @10,@09                                          01S0346
         LR    CCWADDR,@10                                      01S0346
*   CCWCMD = NOPCMD;                /* MAKE CERTAIN CMD IS NOP       */
         MVI   CCWCMD(CCWADDR),X'03'                            01S0347
*   VCTCPOUT = CCWDADDR;            /* SET UP AVAILABLE CCW          */
         L     @10,CCWDADDR-1(,CCWADDR)                         01S0348
         LA    @10,0(,@10)                                      01S0348
         ST    @10,VCTCPOUT(,VCCTREG)                           01S0348
*   PFSIOPCI= PFSIOPCI+ 1;          /* COUNT NUMBER OF PCI'S    01S0349
*                                      BYPASSING SIO                 */
*                                                               01S0349
         LA    @10,1                                            01S0349
         AH    @10,PFSIOPCI                                     01S0349
         STH   @10,PFSIOPCI                                     01S0349
*   GO TO NORMEXIT;                 /* ASSUME I/O HAS STARTED ON
*                                      CONTINUOUS CHAINING           */
         B     NORMEXIT                                         01S0350
*                                                               01S0351
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS SECTION HANDLES TERMINATION REQUESTS                     */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0351
*/*TERMREQ: P SET IODBCAW = TERMCCW ADDRESS                          */
*/*TERMWAIT: D (YES,,NO,TERMWAIT) DEVICE AVAILABLE                   */
*/* N TERMCCW IS WTM, WTM, REWIND-UNLOAD                             */
*/* S COMMONIO:TERMINATE ON OUTPUT TAPE                              */
*/* P SAVE RETURN CODE OF I/O OPERATION FOR EXIT                     */
*/*TERMWK: D (YES,,NO,%TERMCD) WORKFILE ON TAPE ?                    */
*/* P IODBREG = ADDRESS OF WORKFILE IODB                             */
*/* D (YES,%TERMCD,NO,) IODBTERM = 1 ?                               */
*/* P SET IODBCAW = TERMCCW                                          */
*/* S COMMONIO:TERMINATE WORKFILE TAPE                               */
*/* P SAVE HIGHEST RETURN CODE OF TERMINATION I/O                    */
*/*%TERMCD: D (YES,NORMEXIT,NO,EREXIT) I/O OKAY ?                    */
*                                                               01S0351
*TERMREQ:                                                       01S0351
*   TERMRC = ZERO;                  /* RESET RETURN CODE             */
TERMREQ  SLR   TERMRC,TERMRC                                    01S0351
*   IF IODBTERM = OFF THEN                                      01S0352
         TM    IODBTERM(IODBREG),B'10000000'                    01S0352
         BNZ   @RF00352                                         01S0352
*     DO;                           /* IF I/O CAN BE PERFORMED       */
*                                                               01S0353
*TERMWAIT:                                                      01S0354
*       TIO (IODBDEV);              /* IS DEVICE AVAILABLE           */
TERMWAIT LH    @10,IODBDEV(,IODBREG)                            01S0354
         TIO   0(@10)                                           01S0354
*       BC (6,TERMWAIT);            /* LOOP UNTIL AVAILABLE          */
         BC    6,TERMWAIT                                       01S0355
*       IODBCAW = ADDR(TERMCCW);    /* PICK UP WTM,WTM,RWULD         */
         LA    @10,TERMCCW                                      01S0356
         ST    @10,IODBCAW(,IODBREG)                            01S0356
*       CALL COMMONIO;              /* DO SIO                        */
         BAL   @14,COMMONIO                                     01S0357
*       RESPECIFY R15 RESTRICTED;                               01S0358
*       TERMRC = R15;               /* SAVE RETURN CODE              */
         LR    TERMRC,R15                                       01S0359
*     END;                                                      01S0360
*   IODBREG = ADDR(IODBWORK);       /* SET UP FOR HANDLING WORKFILE
*                                      TAPE                          */
@RF00352 L     IODBREG,@CA00944                                 01S0361
*   IF IODBCLAS = TAPE &            /* HANDLE WORKFILE TAPE          */
*         IODBTERM =OFF THEN                                    01S0362
         CLI   IODBCLAS(IODBREG),128                            01S0362
         BNE   @RF00362                                         01S0362
         TM    IODBTERM(IODBREG),B'10000000'                    01S0362
         BNZ   @RF00362                                         01S0362
*     DO;                           /* SIO ONLY IF I/O CAN BE DONE   */
*       IODBCAW = ADDR(TERRUN);     /* SET UP RWULD                  */
         LA    @14,TERRUN                                       01S0364
         ST    @14,IODBCAW(,IODBREG)                            01S0364
*       CALL COMMONIO;              /* DO SIO                        */
         BAL   @14,COMMONIO                                     01S0365
*       TERMRC = MAX(TERMRC,R15);   /* SAVE HIGHEST RETURN CODE      */
         CR    TERMRC,R15                                       01S0366
         BNL   *+6
         LR    TERMRC,R15                                       01S0366
*     END;                                                      01S0367
*   IF TERMRC ^= 0 THEN                                         01S0368
@RF00362 LTR   TERMRC,TERMRC                                    01S0368
         BNZ   @RT00368                                         01S0368
*     GO TO EREXIT;                                             01S0369
*   ELSE                                                        01S0370
*     GO TO NORMEXIT;               /* SET UP ZERO RETURN CODE FOR
*                                      CALLER                        */
         B     NORMEXIT                                         01S0370
*                                                               01S0371
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS SECTION HANDLES COMMON I/O FUNCTIONS                     */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0371
*/*COMENTRY: S COMMONIO:PERFORM I/O OPERATION                        */
*/* D (YES,,NO,EREXIT) I/O OKAY ?                                    */
*/*EREXIT: P RETURN CODE = 4                                         */
*/*NORMEXIT: P (,COMMEXIT) RETURN CODE = 0                           */
*                                                               01S0371
*COMENTRY:                                                      01S0371
*   CALL COMMONIO;                  /* PERFORM SIO                   */
COMENTRY BAL   @14,COMMONIO                                     01S0371
*   IF R15 = ZERO THEN                                          01S0372
*                                                               01S0372
         LTR   R15,R15                                          01S0372
         BNZ   @RF00372                                         01S0372
*NORMEXIT:                                                      01S0373
*     SAVEBACK -> SAVER15 = ZERO;                               01S0373
NORMEXIT L     @14,SAVEBACK(,R13)                               01S0373
         SLR   @10,@10                                          01S0373
         ST    @10,SAVER15(,@14)                                01S0373
*   ELSE                                                        01S0374
*                                                               01S0374
*EREXIT:                                                        01S0374
*     SAVEBACK -> SAVER15 = FOUR;                               01S0374
         B     @RC00372                                         01S0374
@RF00372 DS    0H                                               01S0374
EREXIT   L     @14,SAVEBACK(,R13)                               01S0374
         LA    @10,4                                            01S0374
         ST    @10,SAVER15(,@14)                                01S0374
*   RESPECIFY R15 UNRESTRICTED;                                 01S0375
@RC00372 DS    0H                                               01S0376
*                                                               01S0376
*   /*****************************************************************/
*   /*                                                               */
*   /* TERMINATION PROCESSING CONSISTS OF DEQUEUEING THE RCB. THE    */
*   /* SAVE AREA, RESTORING THE CALLER'S REGISTERS, AND RETURNING    */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0376
*/*COMMEXIT: P DEQUEUE RCB FROM VCTRCB CHAIN                         */
*/* P RESTORE CALLER'S REGISTERS FROM SAVE AREA                      */
*/* R RETURN TO CALLER                                               */
*   VCTRCB = SRCBNEXT;              /* DEQUEUE SIO RCB               */
         L     @10,SRCBNEXT                                     01S0376
         ST    @10,VCTRCB(,VCCTREG)                             01S0376
*   RETURN;                         /* RETURN TO CALLER              */
@EL00001 L     @13,4(,@13)                                      01S0377
@EF00001 DS    0H                                               01S0377
@ER00001 LM    @14,@12,12(@13)                                  01S0377
         BR    @14                                              01S0377
*                                                               01S0378
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS IS THE COMMON SIO ROUTINE. FIRST IT ENTERS THE PROPER CPU*/
*   /* THEN DOES A TIO AND A SIO.                                    */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0378
*/*COMMONIO: E COMMON SIO ROUTINE                                    */
*/*TAP: L AMDSATAP: SVC 2 - CALL TAP TO POSITION ON PROPER CPU       */
*/* D (YES,,NO,COMEREXT) ON PROPER CPU ?                             */
*/*SIOTIO: I TIO THE DEVICE                                          */
*/* D (YES,COMNOTOP,NO,) DEVICE NOT OPERATIONAL ?                    */
*/* D (YES,BUSYCK,NO,) DEVICE BUSY ?                                 */
*/* D (YES,IOSVC,NO,) CSW STORED ?                                   */
*/* N DEVICE IS AVAILABLE                                            */
*/* P STORE CAW (FLCCAW) FROM IODBCAW                                */
*/* I ISSUE SIO TO DEVICE                                            */
*/* D (YES,COMNOTOP,NO,) DEVICE NOT OPERATIONAL ?                    */
*/* D (YES,SIOTIO,NO,) DEVICE BUSY ?                                 */
*/* D (YES,IOSVC,NO,) CSW STORED ?                                   */
*/* N DEVICE IS OKAY - SIO IS SUCCESSFUL                             */
*/* P RETURN CODE = 0                                                */
*/*COMRET: R RETURN TO CALLER                                        */
*/*BUSYCK: I ENABLE / DISABLE TO ALLOW PENDING I/O INTERRUPTS        */
*/* N (,TAP) RETRY TIO OPERATION                                     */
*/*IOSVC: L AMDSAIOI: SVC 27 - ENTRY VIA AMDSAIOB TO IOI             */
*/* D (YES,,NO,COMEREXT) IODBINT = 1 ?                               */
*/* P IODBINT = 0                                                    */
*/*COMEREXT: P RETURN CODE = 4                                       */
*/* R RETURN TO CALLER                                               */
*/*COMNOTOP: L AMDSABIN: CONVERT DEVICE ADDRESS                      */
*/* L AMDSAINR: ISSUE MESSAGE AMD015I                                */
*/* D (NO,COMEREXT,YES,TAP) RETURN CODE ZERO?                        */
*/*AMDSASIO: END                                                     */
*                                                               01S0378
*COMMONIO:                                                      01S0378
*   PROC OPTIONS(NOSAVE);                                       01S0378
COMMONIO DS    0H                                               01S0379
*   RESPECIFY R14 RESTRICTED;       /* RESTRICT REGISTER             */
*   TEMPSAVE = R14;                 /* SAVE RETURN ADDRESS (CHANGED
*                                      BY SVC)                       */
         LR    TEMPSAVE,R14                                     01S0380
*   RESPECIFY R14 UNRESTRICTED;     /* RELEASE REG                   */
*                                                               01S0381
*TAP:                                                           01S0382
*   IODBIOC = OFF;                  /* RESET I/O ERROR INDICATOR     */
TAP      DS    0H                                               01S0383
*   IODBSTRT = OFF;                 /* RESET I/O RESTARTED INDICATOR */
*   IODBINT = OFF;                  /* RESET INTERRUPT PROCESSED FLAG *
         NI    IODBIOC(IODBREG),B'11001110'                     01S0384
*   SVC (TAPSVC);                   /* GET ON PROPER CPU             */
         SVC   2                                                01S0385
*   RESPECIFY RETCODE RESTRICTED;                               01S0386
*   IF RETCODE = 0 THEN                                         01S0387
         LTR   RETCODE,RETCODE                                  01S0387
         BNZ   @RF00387                                         01S0387
*     DO;                                                       01S0388
*       TIO (IODBDEV);              /* TIO THE DEVICE                */
         LH    @14,IODBDEV(,IODBREG)                            01S0389
         TIO   0(@14)                                           01S0389
*       BC (1,COMNOTOP);            /* IF NOT OPERATIONAL - WAIT     */
         BC    1,COMNOTOP                                       01S0390
*       BC (2,BUSYCK);              /* IF BUSY ALLOW PENDING    01S0391
*                                      INTERRUPTS                    */
         BC    2,BUSYCK                                         01S0391
*       BC (4,IOSVC);               /* IF CSW STORED-HANDLE PROBABLY
*                                      IR                            */
         BC    4,IOSVC                                          01S0392
*       FLCCAW = IODBCAW;           /* I/O CAN BE PERFORMED. SET UP
*                                      CAW                           */
         L     @14,IODBCAW(,IODBREG)                            01S0393
         ST    @14,FLCCAW                                       01S0393
*       SIO (IODBDEV);              /* SIO DEVICE                    */
         LH    @14,IODBDEV(,IODBREG)                            01S0394
         SIO   0(@14)                                           01S0394
*       BC (1,COMNOTOP);            /* IF NOT OPERATIONAL - WAIT     */
         BC    1,COMNOTOP                                       01S0395
*       BC (2,BUSYCK);              /* GO BACK TO RETRY I/O          */
         BC    2,BUSYCK                                         01S0396
*       BC (4,IOSVC);               /* CSW STORED - HANDLE I/O ERROR */
         BC    4,IOSVC                                          01S0397
*       IODBACTV = ON;              /* INDICATE INTERRUPT OUTSTANDING*/
         OI    IODBACTV(IODBREG),B'00000100'                    01S0398
*       RETCODE =ZERO;              /* SET RETURN CODE =0            */
         SLR   RETCODE,RETCODE                                  01S0399
*       GO TO COMRET;               /* RETURN TO CALLER              */
*                                                               01S0400
         B     COMRET                                           01S0400
*BUSYCK:                                                        01S0401
*       SSM (ENABLE);               /* ENABLE/DISABLE FOR PENDING    */
BUSYCK   SSM   @CB00935                                         01S0401
*       SSM (DISABLE);              /* I/O INTERRUPTIONS             */
         SSM   @CB00744                                         01S0402
*       GO TO TAP;                  /* RETRY TIO                     */
*                                                               01S0403
         B     TAP                                              01S0403
*IOSVC:                                                         01S0404
*       RESPECIFY R10 RESTRICTED;                               01S0404
IOSVC    DS    0H                                               01S0405
*       IODBACTV = ON;              /* INDICATE INTERRUPT OUTSTANDING*/
         OI    IODBACTV(IODBREG),B'00000100'                    01S0405
*       R10 = IODBDEV;              /* SET UP DEVICE ADDRESS         */
         LH    R10,IODBDEV(,IODBREG)                            01S0406
*       SVC (IOBSVC);               /* HANDLE CSW STORED             */
         SVC   27                                               01S0407
*       RESPECIFY R10 UNRESTRICTED;                             01S0408
*       IF IODBIOC = OFF & IODBSTRT = OFF THEN /* IF DEVICE OKAY
*                                   AND I/O NOT RESTARTED RETRY I/O  */
         TM    IODBIOC(IODBREG),B'00010001'                     01S0409
         BZ    @RT00409                                         01S0409
*         GO TO TAP;                                            01S0410
*      IF IODBIOC = OFF THEN        /* IS DEVICE OKAY                */
@RF00409 TM    IODBIOC(IODBREG),B'00010000'                     01S0411
         BNZ   @RF00411                                         01S0411
*        DO;                                                    01S0412
*          RETCODE = ZERO;          /* SET RETURN CODE               */
         SLR   RETCODE,RETCODE                                  01S0413
*          GO TO COMRET;            /* RETURN                        */
         B     COMRET                                           01S0414
*        END;                                                   01S0415
*     END;                          /* THIS ENDS DO LOOP IF TAP GAVE
*                                      AN ERROR RETURN               */
*                                                               01S0416
@RF00411 DS    0H                                               01S0417
*COMEREXT:                                                      01S0417
*   RETCODE = FOUR;                 /* SET UP ERROR RETURN CODE      */
@RF00387 DS    0H                                               01S0417
COMEREXT LA    RETCODE,4                                        01S0417
*   RESPECIFY RETCODE UNRESTRICTED;                             01S0418
*   RESPECIFY R14 RESTRICTED;       /* RESTRICT REGISTER             */
*                                                               01S0419
*COMRET:                                                        01S0420
*   R14 = TEMPSAVE;                 /* RESTORE RETURN ADDRESS   01S0420
*                                      (CHANGED BY SVC)              */
COMRET   LR    R14,TEMPSAVE                                     01S0420
*   RESPECIFY R14 UNRESTRICTED;     /* RELEASE REG                   */
*   RETURN;                         /* RETURN TO CALLER              */
*                                                               01S0422
@EL00002 DS    0H                                               01S0422
@EF00002 DS    0H                                               01S0422
@ER00002 BR    @14                                              01S0422
*COMNOTOP:                                                      01S0423
*   IODBTERM = ON;                  /* DO NOT REUSE DEVICE           */
COMNOTOP OI    IODBTERM(IODBREG),B'10000000'                    01S0423
*   RESPECIFY (R1,RETCODE) RESTRICTED; /* RESTRICT REGS              */
*   BININ = ADDR(IODBDEV);          /* FIELD TO CONVERT              */
         LA    @14,IODBDEV(,IODBREG)                            01S0425
         ST    @14,BININ                                        01S0425
*   R1 = ADDR(BINPLIST);            /* SET BIN PARM LIST             */
         LA    R1,BINPLIST                                      01S0426
*   SVC(BINSVC);                    /* CONVERT DEVICE ADDR           */
         SVC   28                                               01S0427
*   DEV15I = BINDEV;                /* SET ADDR INTO MSG             */
         L     @14,@CA00948                                     01S0428
         MVC   DEV15I-DEV15I(3,@14),BINDEV                      01S0428
*   R1 = AMD015I;                   /* SET MGE ID TO BE ISSUED       */
         LA    R1,15                                            01S0429
*   SVC(CONSVC);                    /* ISSUE MSG                     */
         SVC   3                                                01S0430
*   GO TO COMEREXT;                 /* NO--EXIT                      */
         B     COMEREXT                                         01S0431
*   END COMMONIO;                                               01S0432
*   END AMDSASIO                                                01S0433
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.      *
*/*%INCLUDE SYSLIB  (IHAPSA  )                                        *
*/*%INCLUDE SYSLIB  (AMDSARMK)                                        *
*;                                                              01S0433
@DATA    DS    0H
         DS    0F
@SA00001 DS    18F
         DS    0F
@CF00067 DC    F'1'
@CF00072 DC    F'3'
@CF00036 DC    F'8'
@CF00764 DC    F'10'
@CF00127 DC    F'16'
@CF00742 DC    F'28672'
@CF01132 DC    F'-232'
@CA00943 DC    A(IODBDA)
@CA00944 DC    A(IODBWORK)
@CA00945 DC    A(IODBOUT)
@CA00948 DC    A(DEV15I)
         DS    0D
@CC01095 DC    C'LSIO'
@CB00744 DC    X'01'
@CB00935 DC    X'03'
         DS    CL2
SIORCB   DS    CL20
         ORG   SIORCB
SRCBNEXT DC    A(0)
@NM00055 DC    A(0)
SRCBSAVE DC    A(0)
@NM00056 DC    AL4(EREXIT)
SRCBBASE DS    AL4
         ORG   SIORCB+20
SIOAUD1  DS    CL2
         ORG   SIOAUD1
@NM00057 DC    X'01'
@NM00058 DC    AL1(0)
         ORG   SIOAUD1+2
SIOAUD2  DS    CL2
         ORG   SIOAUD2
@NM00059 DC    X'02'
@NM00060 DC    AL1(0)
         ORG   SIOAUD2+2
BINPLIST DS    CL10
         ORG   BINPLIST
BININ    DS    AL4
@NM00061 DC    AL4(BINOUT)
@NM00062 DC    H'2'
         ORG   BINPLIST+10
BINOUT   DS    CL4
         ORG   BINOUT
@NM00063 DS    CL1
BINDEV   DS    CL3
         ORG   BINOUT+4
         DS    CL2
DACCW    DS    CL32
         ORG   DACCW
DASEEK   DS    CL8
         ORG   DASEEK
@NM00064 DC    X'07'
DASEEKAD DC    XL3'00'
@NM00065 DC    X'60'
@NM00066 DC    XL3'06'
         ORG   DACCW+8
DASRCH   DS    CL8
         ORG   DASRCH
@NM00067 DC    X'31'
DASRCHAD DC    XL3'00'
@NM00068 DC    X'60'
@NM00069 DC    XL3'05'
         ORG   DACCW+16
DATIC    DS    CL8
         ORG   DATIC
@NM00070 DC    X'08'
@NM00071 DC    AL3(DASRCH)
@NM00072 DC    X'60'
@NM00073 DC    XL3'01'
         ORG   DACCW+24
DAREAD   DS    CL8
         ORG   DAREAD
@NM00074 DC    X'06'
DAREADAD DC    XL3'00'
@NM00075 DC    X'00'
@NM00076 DC    XL3'1000'
         ORG   DACCW+32
WKTPBSR  DC    X'2700000060000001'
WKTPFSR  DC    X'3700000060000001'
WKTPREAD DS    CL16
         ORG   WKTPREAD
@NM00077 DC    X'0200000090000008'
WKTPRD   DS    CL8
         ORG   WKTPRD
@NM00078 DC    X'FF'
WKTPRDAD DC    XL3'00'
@NM00079 DC    X'00'
@NM00080 DC    XL3'1000'
         ORG   WKTPREAD+16
@NM00081 DS    CL280
         ORG   @NM00081
DYNAREA  DC    70F'0'
         ORG   @NM00081+280
WKDACCW  DS    CL32
         ORG   WKDACCW
WKDASEEK DS    CL8
         ORG   WKDASEEK
@NM00082 DC    X'07'
WKDASKAD DC    XL3'00'
@NM00083 DC    X'60'
@NM00084 DC    XL3'06'
         ORG   WKDACCW+8
WKDASRCH DS    CL8
         ORG   WKDASRCH
@NM00085 DC    X'31'
WKDASRAD DC    XL3'00'
@NM00086 DC    X'60'
@NM00087 DC    XL3'05'
         ORG   WKDACCW+16
WKDATIC  DS    CL8
         ORG   WKDATIC
@NM00088 DC    X'08'
@NM00089 DC    AL3(WKDASRCH)
@NM00090 DC    X'60'
@NM00091 DC    XL3'01'
         ORG   WKDACCW+24
WKDAREAD DS    CL8
         ORG   WKDAREAD
@NM00092 DC    X'06'
WKDARDAD DC    XL3'00'
@NM00093 DC    X'00'
@NM00094 DC    XL3'1000'
         ORG   WKDACCW+32
WKDCT    DS    CL24
         ORG   WKDCT
@NM00095 DS    CL3
         ORG   @NM00095
@NM00096 DC    X'06'
@NM00097 DC    X'03'
@NM00098 DC    X'08'
         ORG   WKDCT+3
@NM00099 DS    CL3
         ORG   @NM00099
@NM00100 DC    X'07'
@NM00101 DC    X'03'
@NM00102 DC    X'08'
         ORG   WKDCT+6
@NM00103 DS    CL3
         ORG   @NM00103
@NM00104 DC    X'08'
@NM00105 DC    X'01'
@NM00106 DC    X'14'
         ORG   WKDCT+9
@NM00107 DS    CL3
         ORG   @NM00107
@NM00108 DC    X'09'
@NM00109 DC    X'03'
@NM00110 DC    X'13'
         ORG   WKDCT+12
@NM00111 DS    CL3
         ORG   @NM00111
@NM00112 DC    X'0A'
@NM00113 DC    X'02'
@NM00114 DC    X'0C'
         ORG   WKDCT+15
@NM00115 DS    CL3
         ORG   @NM00115
@NM00116 DC    X'0D'
@NM00117 DC    X'03'
@NM00118 DC    X'13'
         ORG   WKDCT+18
@NM00119 DS    CL3
         ORG   @NM00119
@NM00120 DC    X'0B'
@NM00121 DC    X'04'
@NM00122 DC    X'1E'
         ORG   WKDCT+21
DEND     DC    X'FFFFFF'
         ORG   WKDCT+24
TERMCCW  DS    CL32
         ORG   TERMCCW
@NM00123 DC    X'1F00000060000001'
@NM00124 DC    X'1F00000060000001'
TERRUN   DC    X'0F00000060000001'
@NM00125 DC    X'0300000020000001'
         ORG   TERMCCW+32
OUTCCW   DS    CL240
         ORG   OUTCCW
CCWETY   DS    CL24
         ORG   CCWETY+0
@NM00126 DS    CL8
         ORG   @NM00126+0
@NM00127 DC    X'01'
@NM00128 DC    XL3'01'
@NM00129 DC    X'A0'
@NM00130 DC    XL3'08'
         ORG   CCWETY+8
@NM00131 DS    CL8
         ORG   @NM00131+0
@NM00132 DC    X'FF'
@NM00133 DC    XL3'00'
@NM00134 DC    X'60'
@NM00135 DC    XL3'1000'
         ORG   CCWETY+16
@NM00136 DS    CL8
         ORG   @NM00136+0
@NM00137 DC    X'03'
@NM00138 DC    AL3(CCWETY+24)
@NM00139 DC    X'20'
@NM00140 DC    XL3'01'
         ORG   CCWETY+24
         ORG   CCWETY+24
         ORG   @NM00126+24
         DC    X'01'
         DC    XL3'01'
         DC    X'A0'
         DC    XL3'08'
         ORG   CCWETY+32
         ORG   @NM00131+24
         DC    X'FF'
         DC    XL3'00'
         DC    X'60'
         DC    XL3'1000'
         ORG   CCWETY+40
         ORG   @NM00136+24
         DC    X'03'
         DC    AL3(CCWETY+2*24)
         DC    X'20'
         DC    XL3'01'
         ORG   CCWETY+48
         ORG   CCWETY+48
         ORG   @NM00126+48
         DC    X'01'
         DC    XL3'01'
         DC    X'A0'
         DC    XL3'08'
         ORG   CCWETY+56
         ORG   @NM00131+48
         DC    X'FF'
         DC    XL3'00'
         DC    X'60'
         DC    XL3'1000'
         ORG   CCWETY+64
         ORG   @NM00136+48
         DC    X'03'
         DC    AL3(CCWETY+3*24)
         DC    X'20'
         DC    XL3'01'
         ORG   CCWETY+72
         ORG   CCWETY+72
         ORG   @NM00126+72
         DC    X'01'
         DC    XL3'01'
         DC    X'A0'
         DC    XL3'08'
         ORG   CCWETY+80
         ORG   @NM00131+72
         DC    X'FF'
         DC    XL3'00'
         DC    X'60'
         DC    XL3'1000'
         ORG   CCWETY+88
         ORG   @NM00136+72
         DC    X'03'
         DC    AL3(CCWETY+4*24)
         DC    X'20'
         DC    XL3'01'
         ORG   CCWETY+96
         ORG   CCWETY+96
         ORG   @NM00126+96
         DC    X'01'
         DC    XL3'01'
         DC    X'A0'
         DC    XL3'08'
         ORG   CCWETY+104
         ORG   @NM00131+96
         DC    X'FF'
         DC    XL3'00'
         DC    X'60'
         DC    XL3'1000'
         ORG   CCWETY+112
         ORG   @NM00136+96
         DC    X'03'
         DC    AL3(CCWETY+5*24)
         DC    X'20'
         DC    XL3'01'
         ORG   CCWETY+120
         ORG   CCWETY+120
         ORG   @NM00126+120
         DC    X'01'
         DC    XL3'01'
         DC    X'A0'
         DC    XL3'08'
         ORG   CCWETY+128
         ORG   @NM00131+120
         DC    X'FF'
         DC    XL3'00'
         DC    X'60'
         DC    XL3'1000'
         ORG   CCWETY+136
         ORG   @NM00136+120
         DC    X'03'
         DC    AL3(CCWETY+6*24)
         DC    X'20'
         DC    XL3'01'
         ORG   CCWETY+144
         ORG   CCWETY+144
         ORG   @NM00126+144
         DC    X'01'
         DC    XL3'01'
         DC    X'A0'
         DC    XL3'08'
         ORG   CCWETY+152
         ORG   @NM00131+144
         DC    X'FF'
         DC    XL3'00'
         DC    X'60'
         DC    XL3'1000'
         ORG   CCWETY+160
         ORG   @NM00136+144
         DC    X'03'
         DC    AL3(CCWETY+7*24)
         DC    X'20'
         DC    XL3'01'
         ORG   CCWETY+168
         ORG   CCWETY+168
         ORG   @NM00126+168
         DC    X'01'
         DC    XL3'01'
         DC    X'A0'
         DC    XL3'08'
         ORG   CCWETY+176
         ORG   @NM00131+168
         DC    X'FF'
         DC    XL3'00'
         DC    X'60'
         DC    XL3'1000'
         ORG   CCWETY+184
         ORG   @NM00136+168
         DC    X'03'
         DC    AL3(CCWETY+8*24)
         DC    X'20'
         DC    XL3'01'
         ORG   CCWETY+192
         ORG   CCWETY+192
         ORG   @NM00126+192
         DC    X'01'
         DC    XL3'01'
         DC    X'A0'
         DC    XL3'08'
         ORG   CCWETY+200
         ORG   @NM00131+192
         DC    X'FF'
         DC    XL3'00'
         DC    X'60'
         DC    XL3'1000'
         ORG   CCWETY+208
         ORG   @NM00136+192
         DC    X'03'
         DC    AL3(CCWETY+9*24)
         DC    X'20'
         DC    XL3'01'
         ORG   CCWETY+216
         ORG   CCWETY+216
         ORG   @NM00126+216
         DC    X'01'
         DC    XL3'01'
         DC    X'A0'
         DC    XL3'08'
         ORG   CCWETY+224
         ORG   @NM00131+216
         DC    X'FF'
         DC    XL3'00'
         DC    X'60'
         DC    XL3'1000'
         ORG   CCWETY+232
         ORG   @NM00136+216
         DC    X'03'
         DC    AL3(CCWETY)
         DC    X'20'
         DC    XL3'01'
         ORG   OUTCCW+240
SIOPATCH DC    20F'0'
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
BCTHOLD  EQU   @04
WKDCTPTR EQU   @02
DYNAPTR  EQU   @02
CCTREG   EQU   @03
TEMPSAVE EQU   @05
CCWADDR  EQU   @02
TERMRC   EQU   @04
I        EQU   @05
VCCTREG  EQU   @12
RETCODE  EQU   @15
BASEREG  EQU   @11
R1       EQU   @01
R10      EQU   @10
R13      EQU   @13
R14      EQU   @14
R15      EQU   @15
IODBREG  EQU   @08
RETREG   EQU   @14
R0       EQU   @00
R11      EQU   @11
R12      EQU   @12
R2       EQU   @02
R3       EQU   @03
R4       EQU   @04
R5       EQU   @05
R6       EQU   @06
R7       EQU   @07
R8       EQU   @08
R9       EQU   @09
         ENTRY OUTCCW
         ENTRY WKDCT
         EXTRN IODBDA
         EXTRN IODBWORK
         EXTRN IODBOUT
         EXTRN DEV15I
PSA      EQU   0
FLCRNPSW EQU   PSA
FLCROPSW EQU   PSA+8
FLCICCW2 EQU   PSA+16
FLCCAW   EQU   PSA+72
PSAEEPSW EQU   PSA+132
PSAESPSW EQU   PSA+136
FLCSVILC EQU   PSAESPSW+1
PSAEPPSW EQU   PSA+140
FLCPIILC EQU   PSAEPPSW+1
FLCPICOD EQU   PSAEPPSW+2
PSAPICOD EQU   FLCPICOD+1
FLCTEA   EQU   PSAEPPSW+4
FLCPER   EQU   PSA+152
FLCMCLA  EQU   PSA+168
FLCIOEL  EQU   FLCMCLA+4
FLCIOA   EQU   FLCMCLA+16
FLCFSA   EQU   FLCMCLA+80
PSASUPER EQU   PSA+552
PSASUP1  EQU   PSASUPER
PSASUP2  EQU   PSASUPER+1
PSASUP3  EQU   PSASUPER+2
PSASUP4  EQU   PSASUPER+3
PSACLHT  EQU   PSA+640
PSALKSA  EQU   PSA+696
PSAHLHI  EQU   PSA+760
PSADSSFL EQU   PSA+836
PSADSSF1 EQU   PSADSSFL
PSADSSF3 EQU   PSADSSFL+2
PSADSSF4 EQU   PSADSSFL+3
PSARSVT  EQU   PSA+896
DEBUGLSD EQU   3286
PFSIODA  EQU   DEBUGLSD+6
PFSIOWK  EQU   DEBUGLSD+8
PFSIOOUT EQU   DEBUGLSD+10
PFSIOPCI EQU   DEBUGLSD+12
PFSIOWAT EQU   DEBUGLSD+14
SADMPLSD EQU   3312
ARB      EQU   0
BCTH     EQU   0
BCT      EQU   0
BCTNEXT  EQU   BCT+4
BCTKEY1  EQU   BCT+8
BCTRADDR EQU   BCT+16
BCTLPID  EQU   BCT+28
BCTFLGT  EQU   BCT+44
BCTFLGI  EQU   BCT+45
BCTCOMP  EQU   BCTFLGI
CCT      EQU   0
CTFLG1   EQU   CCT+1
CTFLG2   EQU   CCT+2
CTCCHHE  EQU   CCT+20
CTCCHHW  EQU   CCT+24
CTLOWFLG EQU   CCT+48
CTDMPTYP EQU   CCT+52
CTIOTYPE EQU   CTDMPTYP
CTIOTERM EQU   CTIOTYPE
CTIOOUT  EQU   CTIOTYPE
CTIODA   EQU   CTIOTYPE
CTIOWK   EQU   CTIOTYPE
CTIOINT  EQU   CTIOTYPE
CTIORSET EQU   CTIOTYPE
CTCONFLG EQU   CTDMPTYP+2
CTBUFTYP EQU   CTDMPTYP+3
CTPRMT1  EQU   CTDMPTYP+24
CTPRMT2  EQU   CTDMPTYP+26
CCW      EQU   0
CCWCMD   EQU   CCW
CCWDADDR EQU   CCW+1
CCWFLAGS EQU   CCW+4
CCWPCI   EQU   CCWFLAGS
CSW      EQU   0
CSWKEY00 EQU   CSW
CSWUSTAT EQU   CSW+4
CSWCSTAT EQU   CSW+5
DSCE     EQU   0
IODB     EQU   0
IODBFLAG EQU   IODB+8
IODBTERM EQU   IODBFLAG
IODBINT  EQU   IODBFLAG
IODBIOC  EQU   IODBFLAG
IODBACTV EQU   IODBFLAG
IODBSTRT EQU   IODBFLAG
IODBDEV  EQU   IODB+10
IODBCLAS EQU   IODB+12
IODBTYPE EQU   IODB+13
IODBBCT  EQU   IODB+16
IODBCAW  EQU   IODB+20
IODBCCHH EQU   IODB+32
IODBSEEK EQU   IODBCCHH+1
IODBSRCH EQU   IODBCCHH+3
IODBCC   EQU   IODBSRCH
IODBHH   EQU   IODBSRCH+2
IODBR    EQU   IODBCCHH+7
MDCE     EQU   0
MDCB     EQU   0
MDCBGRS  EQU   MDCB+16
MDCBFLGS EQU   MDCB+86
PSW      EQU   0
PSWSM    EQU   PSW
@NM00047 EQU   PSW+1
PSWCCPM  EQU   PSW+2
@NM00050 EQU   PSW+3
PTRT     EQU   0
PTRTRSA  EQU   0
RCB      EQU   0
VCCT     EQU   0
VCTRCB   EQU   VCCT+4
VCTRECSN EQU   VCCT+8
VCTFLGS  EQU   VCCT+9
VCTMDCE  EQU   VCCT+12
VCTDSCE  EQU   VCCT+20
VCTBCTH  EQU   VCCT+24
VCTWKHI  EQU   VCCT+44
VCTWKC   EQU   VCCT+45
VCTAUDIT EQU   VCCT+62
VCTCBID  EQU   VCCT+64
VCTCPOUT EQU   VCCT+96
SDL      EQU   0
REGLOCAL EQU   0
SAVEFORM EQU   0
SAVEBACK EQU   SAVEFORM+4
SAVER15  EQU   SAVEFORM+16
DYNACCW  EQU   0
DYNACCW2 EQU   0
WKDCTYPE EQU   0
WKDCTID  EQU   WKDCTYPE
WKDCTTK  EQU   WKDCTYPE+1
WKDCTTM  EQU   WKDCTYPE+2
PTRTVSA  EQU   0
PSARSVTE EQU   PSARSVT
CTLOWDMP EQU   CTDMPTYP
FLC      EQU   PSA
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
CTADDRE  EQU   CTLOWDMP+4
CTADDRS  EQU   CTLOWDMP
PSARSAV  EQU   PSARSVTE+60
PSARSTK  EQU   PSARSVTE+56
PSAESAV3 EQU   PSARSVTE+52
PSAESTK3 EQU   PSARSVTE+48
PSAESAV2 EQU   PSARSVTE+44
PSAESTK2 EQU   PSARSVTE+40
PSAESAV1 EQU   PSARSVTE+36
PSAESTK1 EQU   PSARSVTE+32
PSAPSAV  EQU   PSARSVTE+28
PSAPSTK  EQU   PSARSVTE+24
PSAMSAV  EQU   PSARSVTE+20
PSAMSTK  EQU   PSARSVTE+16
PSASSAV  EQU   PSARSVTE+12
PSASSTK  EQU   PSARSVTE+8
PSANSTK  EQU   PSARSVTE+4
PSACSTK  EQU   PSARSVTE
SAVER12  EQU   SAVEFORM+68
SAVER11  EQU   SAVEFORM+64
SAVER10  EQU   SAVEFORM+60
SAVER9   EQU   SAVEFORM+56
SAVER8   EQU   SAVEFORM+52
SAVER7   EQU   SAVEFORM+48
SAVER6   EQU   SAVEFORM+44
SAVER5   EQU   SAVEFORM+40
SAVER4   EQU   SAVEFORM+36
SAVER3   EQU   SAVEFORM+32
SAVER2   EQU   SAVEFORM+28
SAVER1   EQU   SAVEFORM+24
SAVER0   EQU   SAVEFORM+20
SAVER14  EQU   SAVEFORM+12
SAVENEXT EQU   SAVEFORM+8
SAVENAME EQU   SAVEFORM+1
SAVEID   EQU   SAVEFORM
REGL15   EQU   REGLOCAL+60
REGL14   EQU   REGLOCAL+56
REGL13   EQU   REGLOCAL+52
REGL12   EQU   REGLOCAL+48
REGL11   EQU   REGLOCAL+44
REGL10   EQU   REGLOCAL+40
REGL9    EQU   REGLOCAL+36
REGL8    EQU   REGLOCAL+32
REGL7    EQU   REGLOCAL+28
REGL6    EQU   REGLOCAL+24
REGL5    EQU   REGLOCAL+20
REGL4    EQU   REGLOCAL+16
REGL3    EQU   REGLOCAL+12
REGL2    EQU   REGLOCAL+8
REGL1    EQU   REGLOCAL+4
REGL0    EQU   REGLOCAL
SDLSPN   EQU   SDL+1
SDLNUM   EQU   SDL
VCTVCCTV EQU   VCCT+108
VCTCCTV  EQU   VCCT+104
@NM00054 EQU   VCCT+102
VCTEXTRA EQU   VCCT+100
VCTSVCTB EQU   VCCT+92
VCTPGT   EQU   VCCT+88
VCTLPA   EQU   VCCT+84
VCTCBADR EQU   VCCT+80
VCTJBNME EQU   VCCT+72
VCTCBIDN EQU   VCTCBID+7
@NM00053 EQU   VCTCBID
VCTASID  EQU   VCCT+60
VCTPTRT  EQU   VCCT+56
VCTMASCB EQU   VCCT+52
VCTASCB  EQU   VCCT+48
VCTCPUC  EQU   VCCT+46
VCTSUBPL EQU   VCCT+40
VCTARB   EQU   VCCT+36
VCTIODB  EQU   VCCT+32
VCTBCTC  EQU   VCCT+28
VCTSTOR  EQU   VCCT+16
VCTRECVA EQU   VCCT+10
@NM00052 EQU   VCTFLGS
VCTNOI22 EQU   VCTFLGS
VCTLRCLM EQU   VCTFLGS
VCTARCLM EQU   VCTFLGS
VCTASMIC EQU   VCTFLGS
VCTMEMIN EQU   VCTFLGS
VCTSADMP EQU   VCTFLGS
@NM00051 EQU   VCTRECSN
VCTRSMR  EQU   VCTRECSN
VCTEXIR  EQU   VCTRECSN
VCTUPDR  EQU   VCTRECSN
VCTPGIR  EQU   VCTRECSN
VCTVCT   EQU   VCCT
RCBBASE  EQU   RCB+16
RCBEXIT  EQU   RCB+12
RCBSAVE  EQU   RCB+8
RCBSTOR  EQU   RCB+4
RCBNEXT  EQU   RCB
PTRTVS   EQU   PTRT+1032
PTRTRS   EQU   PTRT+8
PTRTLGID EQU   PTRT+4
PTRTPTRT EQU   PTRT
PSWEND   EQU   PSW+8
PSWIA    EQU   PSW+4
PSWSP    EQU   @NM00050
PSWSIG   EQU   PSWCCPM
PSWEU    EQU   PSWCCPM
PSWDO    EQU   PSWCCPM
PSWFPO   EQU   PSWCCPM
@NM00049 EQU   PSWCCPM
@NM00048 EQU   PSWCCPM
PSWPRBLM EQU   @NM00047
PSWAIT   EQU   @NM00047
PSWMCH   EQU   @NM00047
PSWMODE  EQU   @NM00047
PSWKEY   EQU   @NM00047
PSWXTRNL EQU   PSWSM
PSWIO    EQU   PSWSM
PSWDAT   EQU   PSWSM
@NM00046 EQU   PSWSM
@NM00045 EQU   PSWSM
@NM00044 EQU   PSWSM
PSWPER   EQU   PSWSM
@NM00043 EQU   PSWSM
@NM00042 EQU   MDCB+87
@NM00041 EQU   MDCBFLGS
MDCBDUMP EQU   MDCBFLGS
MDCBASMI EQU   MDCBFLGS
MDCBPI   EQU   MDCB+84
MDCBSTOR EQU   MDCB+80
MDCBGR15 EQU   MDCBGRS+60
MDCBGR14 EQU   MDCBGRS+56
MDCBGR13 EQU   MDCBGRS+52
MDCBGR12 EQU   MDCBGRS+48
MDCBGR11 EQU   MDCBGRS+44
MDCBGR10 EQU   MDCBGRS+40
MDCBGR9  EQU   MDCBGRS+36
MDCBGR8  EQU   MDCBGRS+32
MDCBGR7  EQU   MDCBGRS+28
MDCBGR6  EQU   MDCBGRS+24
MDCBGR5  EQU   MDCBGRS+20
MDCBGR4  EQU   MDCBGRS+16
MDCBGR3  EQU   MDCBGRS+12
MDCBGR2  EQU   MDCBGRS+8
MDCBGR1  EQU   MDCBGRS+4
MDCBGR0  EQU   MDCBGRS
MDCBPSW  EQU   MDCB+8
MDCBNEXT EQU   MDCB+4
MDCBMDCB EQU   MDCB
MDCEAVIL EQU   MDCE+8
MDCEACTV EQU   MDCE+4
MDCEMDCE EQU   MDCE
IODBSENS EQU   IODB+40
IODBM    EQU   IODBCCHH
IODBCSW  EQU   IODB+24
IODBCPU  EQU   IODB+14
@NM00040 EQU   IODBFLAG+1
IODBCONW EQU   IODBFLAG
IODBHALT EQU   IODBFLAG
IODBPTRM EQU   IODBFLAG
IODBIDEN EQU   IODB+4
IODBIODB EQU   IODB
DSCETEND EQU   DSCE+20
DSCETCUR EQU   DSCE+16
DSCETBEG EQU   DSCE+12
DSCENEXT EQU   DSCE+8
DSCEBEGN EQU   DSCE+4
DSCEDSCE EQU   DSCE
CSWCNT   EQU   CSW+6
CSWCHC   EQU   CSWCSTAT
CSWICC   EQU   CSWCSTAT
CSWCCC   EQU   CSWCSTAT
CSWCDC   EQU   CSWCSTAT
CSWPTC   EQU   CSWCSTAT
CSWPGC   EQU   CSWCSTAT
CSWIL    EQU   CSWCSTAT
CSWPCI   EQU   CSWCSTAT
CSWUE    EQU   CSWUSTAT
CSWUC    EQU   CSWUSTAT
CSWDE    EQU   CSWUSTAT
CSWCE    EQU   CSWUSTAT
CSWBUSY  EQU   CSWUSTAT
CSWCUE   EQU   CSWUSTAT
CSWSTMOD EQU   CSWUSTAT
CSWATTN  EQU   CSWUSTAT
CSWCADDR EQU   CSW+1
@NM00039 EQU   CSWKEY00
CSWKEY   EQU   CSWKEY00
CCWCNT   EQU   CCW+6
@NM00038 EQU   CCW+5
@NM00037 EQU   CCWFLAGS
CCWIDA   EQU   CCWFLAGS
CCWSKIP  EQU   CCWFLAGS
CCWSLI   EQU   CCWFLAGS
CCWCC    EQU   CCWFLAGS
CCWDC    EQU   CCWFLAGS
CTHWMAX  EQU   CTDMPTYP+29
CTHWM    EQU   CTDMPTYP+28
CTPRMT2X EQU   CTPRMT2+1
CTPRMT2Y EQU   CTPRMT2
CTPRMT1X EQU   CTPRMT1+1
CTPRMT1Y EQU   CTPRMT1
CTVCCT   EQU   CTDMPTYP+20
CTEOR    EQU   CTDMPTYP+16
CTCOMMIO EQU   CTDMPTYP+12
CTLWKAD  EQU   CTDMPTYP+8
CTCONSOL EQU   CTDMPTYP+4
@NM00036 EQU   CTBUFTYP
CTDUMP   EQU   CTBUFTYP
CTLSQA   EQU   CTBUFTYP
CTASM    EQU   CTBUFTYP
CTPGT    EQU   CTBUFTYP
CTWKFLE  EQU   CTBUFTYP
@NM00035 EQU   CTBUFTYP
@NM00034 EQU   CTCONFLG
CTREAD   EQU   CTCONFLG
CTMSGOUT EQU   CTCONFLG
@NM00033 EQU   CTDMPTYP+1
@NM00032 EQU   CTIOTYPE
CTIOCON  EQU   CTIOTYPE
CTEBCOPR EQU   CCT+49
@NM00031 EQU   CTLOWFLG
CTWKSTUS EQU   CTLOWFLG
CTINIT   EQU   CTLOWFLG
CTFP     EQU   CTLOWFLG
CTVIRTD  EQU   CTLOWFLG
CTEBCOPD EQU   CCT+45
CTCONTYP EQU   CCT+44
CTOUTAD  EQU   CCT+42
CTCPUI   EQU   CCT+40
CTERBCON EQU   CCT+36
CTERBTPE EQU   CCT+32
CTERBDA  EQU   CCT+28
CTCCHHS  EQU   CCT+16
CTPGECNT EQU   CCT+15
CTCCHHR  EQU   CCT+8
CTINADDR EQU   CCT+6
CTSENSE  EQU   CCT+4
CTDEVTYP EQU   CCT+3
@NM00030 EQU   CTFLG2
CTALTCON EQU   CTFLG2
CTWKDONE EQU   CTFLG2
CTVIRTR  EQU   CTFLG2
CTNOSTAT EQU   CTFLG2
CTPGEFLT EQU   CTFLG2
CTSTOR   EQU   CTFLG2
CTDUPSW  EQU   CTFLG2
CTERREC  EQU   CTFLG1
CTMP     EQU   CTFLG1
@NM00029 EQU   CTFLG1
CTDEFO   EQU   CTFLG1
CTWORK   EQU   CTFLG1
CTMORTPE EQU   CTFLG1
CTDEVICE EQU   CTFLG1
CTERROR  EQU   CTFLG1
CTWAIT   EQU   CCT
@NM00028 EQU   BCT+46
BCTRECLM EQU   BCTFLGI
BCTIOERR EQU   BCTFLGI
BCTALLOC EQU   BCTFLGI
@NM00027 EQU   BCTFLGT
BCTPGTF  EQU   BCTFLGT
BCTDUMP  EQU   BCTFLGT
BCTLSQA  EQU   BCTFLGT
BCTASM   EQU   BCTFLGT
BCTPGT   EQU   BCTFLGT
BCTWKFLE EQU   BCTFLGT
@NM00026 EQU   BCTFLGT
BCTRBA   EQU   BCT+40
BCTAMB   EQU   BCT+36
@NM00025 EQU   BCTLPID+4
BCTLGN   EQU   BCTLPID
BCTMDCB  EQU   BCT+24
BCTPGTE  EQU   BCT+20
BCTVADDR EQU   BCT+12
BCTASID  EQU   BCT+10
BCTKEY2  EQU   BCT+9
BCTBCT   EQU   BCT
BCTHLAST EQU   BCTH+8
BCTHFRST EQU   BCTH+4
BCTHBCTH EQU   BCTH
ARBADDRE EQU   ARB+4
ARBADDRB EQU   ARB
GTMSAVE  EQU   SADMPLSD+684
GTMNAME  EQU   SADMPLSD+680
FRMSAVE  EQU   SADMPLSD+580
FRMNAME  EQU   SADMPLSD+576
AUDSAVE  EQU   SADMPLSD+476
AUDNAME  EQU   SADMPLSD+472
IOISAVE  EQU   SADMPLSD+372
IOINAME  EQU   SADMPLSD+368
PGISAVE  EQU   SADMPLSD+268
PGINAME  EQU   SADMPLSD+264
SVISAVE  EQU   SADMPLSD+164
SVINAME  EQU   SADMPLSD+160
LOWCRS   EQU   SADMPLSD+96
LOWGRS   EQU   SADMPLSD+32
SAVEDUMP EQU   SADMPLSD+24
AUDPSW   EQU   SADMPLSD+16
SVIRPSW  EQU   SADMPLSD+8
PSWSADMP EQU   SADMPLSD
PFIOIRST EQU   DEBUGLSD+24
PFWATOIP EQU   DEBUGLSD+22
PFWATDE  EQU   DEBUGLSD+20
PFWATEN  EQU   DEBUGLSD+18
PFWATENW EQU   DEBUGLSD+16
PFTAPCPU EQU   DEBUGLSD+4
PFBUFWAT EQU   DEBUGLSD+2
PFTRCLM  EQU   DEBUGLSD
@NM00024 EQU   PSA+3668
PSASTAK  EQU   PSA+3072
@NM00023 EQU   PSA+1040
PSAUSEND EQU   PSA+1040
PSAWTCOD EQU   PSA+1036
PSAATCVT EQU   PSA+1032
PSAPCPSW EQU   PSA+1024
PSAPIR2  EQU   PSA+1020
PSARV059 EQU   PSA+1018
PSASVC13 EQU   PSA+1016
PSALSFCC EQU   PSA+1012
PSASFACC EQU   PSA+1008
PSASTOP  EQU   PSA+992
PSASTART EQU   PSA+976
PSARSPSW EQU   PSA+968
PSASRPSW EQU   PSA+960
PSARV045 EQU   PSA+892
PSARV044 EQU   PSA+888
PSARV043 EQU   PSA+884
PSARV042 EQU   PSA+880
PSARV041 EQU   PSA+876
PSARV040 EQU   PSA+872
PSARV025 EQU   PSA+868
PSADSSED EQU   PSA+868
PSADSSPR EQU   PSA+864
PSADSSFW EQU   PSA+860
PSADSS14 EQU   PSA+856
PSADSSPP EQU   PSA+848
PSADSSRP EQU   PSA+840
PSADSS05 EQU   PSADSSF4
PSADSS10 EQU   PSADSSF4
PSADSSVE EQU   PSADSSF4
PSADSSDE EQU   PSADSSF4
PSADSSC0 EQU   PSADSSF4
PSADSSIE EQU   PSADSSF4
PSADSS12 EQU   PSADSSF4
PSADSSRC EQU   PSADSSF4
PSARV057 EQU   PSADSSF3
PSARV056 EQU   PSADSSF3
PSARV055 EQU   PSADSSF3
PSADSSMC EQU   PSADSSF3
PSADSSRW EQU   PSADSSF3
PSADSSNM EQU   PSADSSF3
PSADSSES EQU   PSADSSF3
PSADSSGP EQU   PSADSSF3
PSADSSF2 EQU   PSADSSFL+1
PSADSSPI EQU   PSADSSF1
PSADSSOI EQU   PSADSSF1
PSADSSSP EQU   PSADSSF1
PSADSSTP EQU   PSADSSF1
PSADSSDW EQU   PSADSSF1
PSADSSDD EQU   PSADSSF1
PSADSSDM EQU   PSADSSF1
PSADSSMV EQU   PSADSSF1
PSADSSTS EQU   PSA+816
PSADSSWK EQU   PSA+812
PSADSSR3 EQU   PSA+808
PSADSSR2 EQU   PSA+804
PSADSSRS EQU   PSA+800
PSASTOR  EQU   PSA+796
PSACPUSA EQU   PSA+794
PSAVSTAP EQU   PSA+792
PSAWKVAP EQU   PSA+788
PSAWKRAP EQU   PSA+784
PSAMCHIC EQU   PSA+783
PSARV061 EQU   PSA+782
PSASYMSK EQU   PSA+781
PSAMCHFL EQU   PSA+780
PSACR0   EQU   PSA+776
PSAPSWSV EQU   PSA+768
PSALITA  EQU   PSA+764
PSACLHS  EQU   PSAHLHI
PSALKR15 EQU   PSALKSA+60
PSALKR14 EQU   PSALKSA+56
PSALKR13 EQU   PSALKSA+52
PSALKR12 EQU   PSALKSA+48
PSALKR11 EQU   PSALKSA+44
PSALKR10 EQU   PSALKSA+40
PSALKR9  EQU   PSALKSA+36
PSALKR8  EQU   PSALKSA+32
PSALKR7  EQU   PSALKSA+28
PSALKR6  EQU   PSALKSA+24
PSALKR5  EQU   PSALKSA+20
PSALKR4  EQU   PSALKSA+16
PSALKR3  EQU   PSALKSA+12
PSALKR2  EQU   PSALKSA+8
PSALKR1  EQU   PSALKSA+4
PSALKR0  EQU   PSALKSA
PSARV023 EQU   PSACLHT+52
PSALOCAL EQU   PSACLHT+48
PSACMSL  EQU   PSACLHT+44
PSAOPTL  EQU   PSACLHT+40
PSATPACL EQU   PSACLHT+36
PSATPDNL EQU   PSACLHT+32
PSATPNCL EQU   PSACLHT+28
PSAIOSLL EQU   PSACLHT+24
PSAIOSUL EQU   PSACLHT+20
PSAIOSCL EQU   PSACLHT+16
PSAIOSSL EQU   PSACLHT+12
PSASALCL EQU   PSACLHT+8
PSAASML  EQU   PSACLHT+4
PSADISPL EQU   PSACLHT
PSASRSA  EQU   PSA+636
PSARV050 EQU   PSA+634
PSADSSGO EQU   PSA+633
PSARECUR EQU   PSA+632
PSAHLHIS EQU   PSA+628
PSAIPCSA EQU   PSA+624
@NM00022 EQU   PSA+621
PSAIPCDM EQU   PSA+620
PSAIPCD  EQU   PSA+616
@NM00021 EQU   PSA+613
PSAIPCRM EQU   PSA+612
PSAIPCR  EQU   PSA+608
PSAMCHEX EQU   PSA+600
PSAMPSW  EQU   PSA+592
PSAEXPS2 EQU   PSA+584
PSAEXPS1 EQU   PSA+576
PSAPIREG EQU   PSA+572
PSARSREG EQU   PSA+568
PSAGPREG EQU   PSA+556
PSARV022 EQU   PSASUP4
PSARV021 EQU   PSASUP4
PSARV020 EQU   PSASUP4
PSARV019 EQU   PSASUP4
PSARV018 EQU   PSASUP4
PSARV017 EQU   PSASUP4
PSARV016 EQU   PSASUP4
PSARV015 EQU   PSASUP4
PSARV014 EQU   PSASUP3
PSARV013 EQU   PSASUP3
PSARV012 EQU   PSASUP3
PSARV011 EQU   PSASUP3
PSASPR   EQU   PSASUP3
PSAPSREG EQU   PSASUP3
PSAPI2   EQU   PSASUP3
PSAIOSUP EQU   PSASUP3
PSALCR   EQU   PSASUP2
PSARTM   EQU   PSASUP2
PSAACR   EQU   PSASUP2
PSAIPCE2 EQU   PSASUP2
PSAIPCES EQU   PSASUP2
PSAIPCEC EQU   PSASUP2
PSAGTF   EQU   PSASUP2
PSAIPCRI EQU   PSASUP2
PSAIPCRP EQU   PSASUP1
PSAIPCDR EQU   PSASUP1
PSADISP  EQU   PSASUP1
PSALOCK  EQU   PSASUP1
PSAPI    EQU   PSASUP1
PSAEXT   EQU   PSASUP1
PSASVC   EQU   PSASUP1
PSAIO    EQU   PSASUP1
PSAAOLD  EQU   PSA+548
PSAANEW  EQU   PSA+544
PSATOLD  EQU   PSA+540
PSATNEW  EQU   PSA+536
PSALCCAR EQU   PSA+532
PSALCCAV EQU   PSA+528
PSAPCCAR EQU   PSA+524
PSAPCCAV EQU   PSA+520
PSACPULA EQU   PSA+518
PSACPUPA EQU   PSA+516
PSAPSA   EQU   PSA+512
FLCHDEND EQU   PSA+512
FLCCRSAV EQU   FLCMCLA+280
FLCGRSAV EQU   FLCMCLA+216
FLCFPSAV EQU   FLCMCLA+184
FLCFLA   EQU   FLCMCLA+88
FLCRGNCD EQU   FLCMCLA+84
FLCFSAA  EQU   FLCFSA+1
@NM00020 EQU   FLCFSA
@NM00019 EQU   FLCMCLA+72
FLCMCIC  EQU   FLCMCLA+64
@NM00018 EQU   FLCMCLA+20
FLCIOAA  EQU   FLCIOA+1
@NM00017 EQU   FLCIOA
@NM00016 EQU   FLCMCLA+15
@NM00015 EQU   FLCMCLA+14
@NM00014 EQU   FLCMCLA+12
FLCLCL   EQU   FLCMCLA+8
FLCIOELA EQU   FLCIOEL+1
@NM00013 EQU   FLCIOEL
FLCCHNID EQU   FLCMCLA
@NM00012 EQU   PSA+160
FLCMTRCD EQU   PSA+157
@NM00011 EQU   PSA+156
FLCPERA  EQU   FLCPER+1
@NM00010 EQU   FLCPER
@NM00009 EQU   PSA+151
FLCPERCD EQU   PSA+150
FLCMCNUM EQU   PSA+149
@NM00008 EQU   PSA+148
FLCTEAA  EQU   FLCTEA+1
@NM00007 EQU   FLCTEA
PSAPIPC  EQU   PSAPICOD
PSAPIMC  EQU   PSAPICOD
PSAPIPER EQU   PSAPICOD
PSARV049 EQU   FLCPICOD
FLCPILCB EQU   FLCPIILC
@NM00006 EQU   FLCPIILC
@NM00005 EQU   PSAEPPSW
FLCSVCN  EQU   PSAESPSW+2
FLCSILCB EQU   FLCSVILC
@NM00004 EQU   FLCSVILC
@NM00003 EQU   PSAESPSW
FLCEICOD EQU   PSAEEPSW+2
PSASPAD  EQU   PSAEEPSW
@NM00002 EQU   PSA+128
FLCINPSW EQU   PSA+120
FLCMNPSW EQU   PSA+112
FLCPNPSW EQU   PSA+104
FLCSNPSW EQU   PSA+96
FLCENPSW EQU   PSA+88
FLCTRACE EQU   PSA+84
FLCTIMER EQU   PSA+80
FLCCVT2  EQU   PSA+76
FLCCSW   EQU   PSA+64
FLCIOPSW EQU   PSA+56
FLCMOPSW EQU   PSA+48
FLCPOPSW EQU   PSA+40
FLCSOPSW EQU   PSA+32
FLCEOPSW EQU   PSA+24
@NM00001 EQU   FLCICCW2+4
FLCCVT   EQU   FLCICCW2
FLCICCW1 EQU   FLCROPSW
FLCIPPSW EQU   FLCRNPSW
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RT00229 EQU   TERMREQ
@RT00231 EQU   EREXIT
@RT00246 EQU   EREXIT
@RT00280 EQU   EREXIT
@RT00368 EQU   EREXIT
@RF00368 EQU   NORMEXIT
@RT00409 EQU   TAP
@ENDDATA EQU   *
         END   AMDSASIO,(C'PLS2013',0603,75280)
