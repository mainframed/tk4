* /* START OF SPECIFICATIONS****
*01*  PROCESSOR = ASSEM;
**** END OF SPECIFICATIONS ***/
         TITLE 'AMDSAPRO -- PRECURSOR FOR THE AMDSADMP PROGRAM'
**********************************************************************
*                                                                    *
* MODULE:   AMDSAPRO                                                 *
* DESCRIPTIVE NAME:   PRECURSOR ROUTINE FOR AMDSADMP                 *
* LOAD MODULE:   AMDSAPRO                                            *
* COPYRIGHT:   NONE                                                  *
* STATUS:   VERSION VS2  RELEASE 3.7                         @ZA17670*
*                                                                    *
* FUNCTION:   THE AMDSAPRO ROUTINE PERFORMS THE THREE BASIC          *
*             FUNCTIONS OF (1) LOADING AMDSAHSR AND AMDSAPGE, OR     *
*             AMDSALSR, (2) A VTOC SEARCHING FUNCTION AND (3)        *
*             WRITING OUT STORAGE LOCATION X'7000' - X'7800'         *
*                                                                    *
* OPERATION:  THE AMDSAPRO ROUTINE IS LOADED INTO CORE               *
*             AT LOCATION X'7800' VIA THE IPL 2 RECORD FOR A         *
*             DIRECT ACCESS RESIDENT, VERSION OF AMDSADMP.           *
*             THE ROUTINE THEN WRITES OUT THE WORK RECORD FROM       *
*             LOCATION X'7000' THEN SEARCHES FOR THE AMDSALSR OR     *
*             AMDSAHSR PROGRAM IN SYS1.PAGEDUMP AND READS IT INTO    *
*             LOCATION X'7020'.  IT ISOLATES THE BOUNDRIES OF THE    *
*             WORKFILE DATA SET FOR HSR.  UPON COMPLETION OF THE HSR *
*             DUMP PROCESSING, THE PRECURSOR IS AGAIN LOADED INTO    *
*             LOCATION X'7800' TO SEARCH FOR AND LOCATE AMDSAPGE IN  *
*             SYS1.PAGEDUMP WHICH IT LOADS INTO LOCATION X'8000'.    *
*             IT THEN RETURNS CONTROL TO AMDSAHSR FOR EVENTUAL       *
*             CONTROL PASSAGE TO AMDSAPGE.                           *
*                                                                    *
* NOTES:      AMDSAHSR MUST ENTER AT ENTRY VIA A BALR 14,15. A       *
*             RETURN CODE WILL BE PROVIDED IN REGISTER 15 BY ALL     *
*             FUNCTIONS IN THIS ROUTINE PRIOR TO RETURNING TO THE    *
*             CALLER VIA A BR 14.  AMDSAPRO ISSUES THE FOLLOWING     *
*             PRIVLEGED INSTRUCTIONS; SIO,TIO,AND LPSW.  AMDSAHSR    *
*             MUST SAVE REGISTERS PRIOR TO CALLING AMDSAPRO.         *
*             PGERCDCT IS A DECLARED ENTRY INITIALIZED BY AMDSALDR   *
*             WITH THE NUMBER OF AMDSAPGE RECORDS WRITTEN INTO       *
*             SYS1.PAGEDUMP.                                         *
*                                                                    *
* DEPENDENCIES:   THE PROGRAM IS DEPENDENT UPON THE STANDARD         *
*             CHARACTER CODE SET, AND CAN BE CORRECTED BY REASSEMBLY.*
*                                                                    *
* REGISTER CONVENTIONS:                                              *
*             R1:  ADDRESS OF FORMAT 1 OR FORMAT 4 DSCB OBTAINED.    *
*             R2:  BASE REGISTER CONTAINING REAL STORAGE ADDRESS     *
*                  X'7000' FOR CCT ADDRESSABILITY.                   *
*             R5:  ADDRESS OF MESSAGE INPUT AREA.                    *
*             R6:  ADDRESS OF MESSAGE OUTPUT AREA.                   *
*             R10: ADDRESS OF DEVICE FOR I/O OPERATIONS.             *
*             R11: ADDRESS OF CCW TO BE EXECUTED.                    *
*             R12: BASE REGISTER.                                    *
*             R13: RETURN REGISTER FOR DUMPSIO ROUTINE.              *
*             R14: LINKAGE RETURN REGISTER.                          *
*             R15: RETURN CODE REGISTER.                             *
*                                                                    *
* PATCH LABEL:   PROPATCH                                            *
*                                                                    *
* MODULE TYPE:   ASSEMBLY LANGUAGE                                   *
*                                                                    *
* MODULE SIZE:   2K                                                  *
*                                                                    *
* ATTRIBUTES:   PRIVILEGED, DISABLED, STAND-ALONE PROGRAM.           *
*                                                                    *
* ENTRY POINT:   AMDSAPRO                                            *
*                                                                    *
* LINKAGE:    R14 LOADED WITH RETURN ADDRESS                         *
*             R15 LOADED WITH ENTRY POINT                            *
*             R15 CONTAINS A RETURN CODE ON EXIT                     *
*                                                                    *
* INPUT:      LOCATION X'B8' WILL BE NON ZERO TO INDICATE ENTRY      *
*             FROM IPL, IT WILL BE SET TO ZERO TO INDICATE ENTRY     *
*             FROM AMDSAHSR.                                         *
*                                                                    *
* OUTPUT:     REQUESTED ROUTINE LOADED INTO STORAGE                  *
*                                                                    *
* EXIT, NORMAL:  AMDSAHSR OR AMDSALSR, WITH RETURN CODE = 0.         *
*                                                                    *
* EXIT, ERROR:   WAIT STATE CODE = 4 -UNABLE TO LOCATE SYS1.PAGEDUMP *
*                WAIT STATE CODE = 8 - UNABLE TO LOAD AMDSAHSR OR    *
*                AMDSALSR                                            *
*                WAIT STATE CODE = C - INTERVENTION REQUIRED ON THE  *
*                IPL DEVICE                                          *
*                                                                    *
*                TO AMDSAHSR- RC=4, I/O ERROR OCCURRED WHILE         *
*                TRYING TO LOAD AMDSAPGE INTO CORE.                  *
*                                                                    *
* EXTERNAL REFERENCES:   AMDSAHSR, AND AMDSALSR                      *
*                                                                    *
* ROUTINES:    CONSOLE - TO OUTPUT INTV REQ MESSAGE                  *
*                                                                    *
* DATA SETS:   SYS1.PAGEDUMP                                         *
*                                                                    *
* DATA AREAS:  COMMON CONTROL TABLE (CCT) LOCATED AT LOCATION        *
*              X'7000'                                               *
*                                                                    *
* TABLES:      NONE                                                  *
*                                                                    *
* MACROS:      NONE                                                  *
*                                                                    *
* CONTROL BLOCKS:                                                    *
*   NAME           PURPOSE                    USE                    *
*                                                                    *
*   CTERROR    CALLER PROCESS ERROR RECOVERY  SET                    *
*   CTDEVTYP   06-2305-1, 07-2305-2,                                 *
*              09-3330, 08-2314, 0D,3330-1                           *
*              0A-3340, 0B-3350               SET            @Z30RSTA*
*   CTSENSE    SENSE INFORMATION AREA         SET                    *
*   CTINADDR   IPL DEVICE ADDRESS             SET                    *
*   CTCCHHS    STARTING CCHH OF SYS1.PAGEDUMP SET                    *
*   CTCCHHE    ENDING CCHH OF SYS1.PAGEDUMP   SET                    *
*   CTERBDA    DIRECT ACCESS ERROR RECOVERY   SET                    *
*   CTCONSOL   REAL ADDRESS OF CONSOLE ROUTINE REF                   *
*   CTWAIT     WAIT STATE CODE                SET                    *
*   CTBRANCH   PASS CONTROL TO AMDSAHSR       REF                    *
*   CTCCHHR    IPL CCHHR                      SET                    *
*   CTCCHHW    START OF WKFILE                SET                    *
*                                                                    *
* MESSAGES:    AMD014A - INTV REQ IPL DEV - USED IF INTERVENTION     *
*              IS REQUIRED ON THE IPL DEVICE WHILE LOADING           *
*              AMDSAPGE                                              *
*                                                                    *
*                                                                    *
*  CHANGE - ACTIVITY =                                               *
* A000000-999999                                               Y02006*
* C788710,788722                                             @YM04500*
* C112276                                                    @YM05130*
* C112823                                                    @YM05130*
* C114688                                                    @YM05130*
* C117188                                                    @YM05130*
* C303300                                                    @YM05130*
* C786700                                                    @YM05130*
* A000500,000600,000700,065800-068403,111242,112404-113137   @Z30RSTA*
* A666864,788752,788772,788766,788780,788993                 @Z30RSTA*
* C041599,045900,088300,787000,871700                        @Z30RSTA*
* D065800-067986,112404-113076,789220                        @Z30RSTA*
*C111106,C007700                                             @ZA13017*
* A310500,C007700,C871700                                    @ZA17670*
**********************************************************************
         SPACE
*/*AMDSAPRO: CHART (SEQ) */
*/* HEADER
*/* CHART AA
*/*ROUTINE (AMDSAPRO)
*/*DATE:  MARCH 11, 1975                                       @Z30RSTA
*/*PAGE # */
*/*AMDSAPRO: E PRECURSOR ENTRY POINT */
*/* P STORE REGS 12&13 IN LOC '8' */
*/* P SET UP ADDRESSABILITY */
*/* P IPLENTSW = 1 */
*/* D (YES,%B1,NO,AMDSAPIO) IPL ENTRY */
*/*%B1: P IPLENTSW = 0 */
*/* P STORE REGS 0-15 IN TEMP SAVE AREA */
*/* P STORE REGS 12 & 13 IN TEMP SAVE AREA FROM LOC '8' */
*/* P SET UP MIN CCT */
*/* P COMPARE TEMP SAVE AREA AND STORE STATUS AREA REGS */
*/* D (YES,%A38,NO,) REGS EQUAL ? */
*/* P SET CTNOSTAT ON */
*/* P MOVE TEMP SAVE AREA REGS INTO STORE STATUS AREA */
*/*%A38: P MOVE IPL ADDR INTO CTINADDR */
*/* P (,AMDSAPIO) SAVE IPL2 CCHHR IN CTCCHHR */
*/*%G1: D (YES,%A16,NO,) IPL ENTRY ? */
*/* P INIT RD1 TO  X'8000' */                                  @Z30RSTA
*/* D (YES,,NO,%G2) 1 RCD PER TRK */                           @Z30RSTA
*/* S (,%G3) EOC: BUMP CCHH BY 1 */                            @Z30RSTA
*/*%G2: P SET R TO 2 TO SKIP HSR */                            @Z30RSTA
*/*%G3: P SET CTL TIC TO READ */                               @Z30RSTA
*/*%G5: S DUMPSIO: READ RCD IN */                              @Z30RSTA
*/* D (NO,,YES,ERRMSG1) I/O ERROR */                           @Z30RSTA
*/* P DECREASE # RCDS BY 1 */                                  @Z30RSTA
*/* D (YES,,NO,%A18) MORE RCDS */                              @Z30RSTA
*/* P BUMP INPUT @ BY X'1800' */                               @Z30RSTA
*/* P INCREMENT R BY 1 */                                      @Z30RSTA
*/* P DECREASE # RCDS/TRK BY 1 */                              @Z30RSTA
*/* D (YES,%G5,NO,) MORE RCDS ON TRK */                        @Z30RSTA
*/* P SET R TO 1 */                                            @Z30RSTA
*/* S (,%G5) EOC: BUMP CCHH BY 1 */                            @Z30RSTA
*/* E EOC */
*/* P BUMP HH BY 1 */
*/* P OBTAIN DEV TYPE */
*/* D (NO,%G4,YES,) HH> MAX FOR DEV TYPE */
*/* P BUMP CC BY 1 */
*/* P ZERO HH */
*/*%G4: P RESTORE  CCHH */
*/* R RETURN */
*/*%A18: P SET UP INTERFACE TO AMDSAPGE */
*/* R AMDSAPGE VIA 'RETURN' */
*/*%A16: P ZERO REGS 6 AND 7 */
*/* P GET PGERCDCT INTO REG7 */
*/* P LOAD DEV ADDR FROM TABLE */
*/* P LOAD RCDS PER TRK INTO REG 5 */
*/* P DIVIDE PGERCDCT BY RCDS PER TRK */
*/* P ADD HH OF CTCCHHS */
*/* P INCREMENT BY 1 */
*/* P LOAD TRK PER CYL INTO REG 5 */
*/* P DIVIDE COUNT BY CYL NUMBER */
*/*P ADD CC OF CTCCHHS TO CYL CT */
*/* P STORE HH IN CTCCHHW */
*/* P STORE CC IN CTCCHHW */
*/* P INDICATE SEARCH FOR RCD 1 */
*/* P SET UP TO READ HSR INTO LOC X'7000' (TIC TO SECOND READ) */
*/* P SET UP FOR READ OF HSR */
*/* S DUMPSIO: READ IN RCD */
*/* D (YES,%A20,NO,) I/O ERROR */
*/* P SET UP INTERFACE TO HSR */
*/* R HSR VIA 'RETURN' */
*/*%A20: P SET UP WAIT STATE CODE = 8 */
*/* R WAIT STATE */
*/*ERRMSG1: D (NO,%A13,YES,) IPL ENTRY */
*/* P SET UP WAIT STATE CODE = 4 */
*/* R WAIT STATE */
*/*%A13: P RC = 4  */
*/* R RETURN */
*/*AMDSAPIO: P SET UP FOR READ OF CCHHR */
*/* P SET UP FOR LENGTH OF VOL LBL */
*/* P SET UP I.O OPERATION */
*/* D (YES,%F1,NO,) IPL ENTRY ? */
*/* P (,%F2) INPUT ADDRESS = X'1000' */
*/*%F1: P INPUT ADDRESS = X'7400' */
*/*%F2:  S DUMPSIO: READ LABEL */
*/* D (YES,ERRMSG1,NO,) I/O ERROR */
*/* D (YES,VOLOK,NO,ERRMSG1) IBM LABEL ? */
*/*VOLOK: P SAVE EXTENT OF VTOC IN CTCCHHS */
*/* D (YES,%F3,NO,) HSR ENTRY ? */
*/* P (,%F4) INPUT ADDRESS = X'7500' */
*/*%F3: P INPUT ADDRESS = X'1000' */
*/*%F4: P SET UP TO GET FORMAT 4 */
*/* P CREATE DSN OF 44 X'04'S */
*/* P SET UP TO SEEK */
*/* S DUMPSIO: READ IN FORMAT 4 DSCB */
*/* D (NO,%A35,YES,ERRMSG1) I/O ERROR */
*/*%A35: P END OF VTOC SAVED IN CTCCHHE */
*/* P SET UP TABLE LENGTH */
*/*%A28: D (NO,%A29,YES,ERRMSG1) END OF TABLE */
*/*%A29: D (YES,%A31,NO,) PROPER DEVICE */
*/* P (,%A28) BUMP TABLE CTR BY 1 */
*/*%A31: P MOVE IN DEVICE TYPE & RECS/TRK */                   @Z30RSTA
*/* P BLANK OUT DATA SET AREA */
*/* P SET UP SYS1.PAGEDUMP */
*/* S DUMPSIO: SEARCH ON DS NAME */
*/* D (NO,%A32,YES,ERRMSG1) I/O ERROR */
*/*%A32: P (,%G1) MOVE HIGH AND LO EXTENTS INTO CTCCHHS & CTCCHHE */
*/* E DUMPSIO */
*/*%A26: D (NO,%A21,YES,) DEV AVAIL ? */
*/*%A22: P SET UP CAW */
*/* P PERFORM I/O */
*/*%A24: P TIO LOOP UNTIL CSW STORED */
*/* D (YES,%A25,NO,) CHAN ERROR */
*/* D (YES,%A25,NO,) UNIT CHECK */
*/* D (NO,%A24,YES,) DEV END */
*/* D (YES,,NO,%B2) SENSE CMD ? */
*/* P ZERO ERB */
*/*%B2: P RC = 0 */
*/* R RETURN */
*/*%A21: D (NO,%A26,YES,) UNIT CHECK */
*/* D (YES,%A22,NO,) SENSE CMD */
*/* P OBTAIN CCW + 8 */
*/*%A25: D (NO,TESTERR,YES,) CTERROR = 1 */
*/* P ZERO CTERROR */
*/* R RETURN */
*/*TESTERR: P SET UP DA ERB */
*/* P SAVE CSW */
*/* P SAVE CCW */
*/* D (NO,%A42,YES,EXITCODE) CAT CHAN ERROR */
*/*%A41: R RETURN */
*/*%A42: D (YES,UNITSENS,NO,) UNIT CHECK */
*/* D (NO,EXITCODE,YES,)  CHAIN CHECK */
*/*%G99: D (YES,CHAINR,NO,) ERB SET UP */
*/* P (,CHAINR) SET UP ERB FOR 10 RETRIES */
*/*UNITSENS: P ZERO SENSE AREA */
*/* P SET UP SENSE CCW */
*/* S DUMPSIO: */
*/* D (YES,EXITCODE,NO,%A51) I/O ERROR */
*/*CHAINR: P STORE ERB */
*/* P SET UP FOR MAX RETRY COUNT */
*/* P MAX CT = MAX CT - 1 */
*/* D (NO,ERBPRIME,YES,) MAX CT = 0 */
*/*EXITCODE: P (,%A41) RC = 4 */
*/*ERBPRIME: P STORE ERB RETRY */
*/* P SET UP PRIMARY RETRY */
*/* P PRIM = PRIM - 1 */
*/* D (YES,EXITCODE,NO,) PRIME = 0 */
*/* P STORE PRIMARY */
*/* R DUMPSIO */
*/*%A51: D (YES,ERRACT1R,NO,) EQUIP CHECK */
*/* D (NO,%A53,YES,EXITCODE) NO REC FOUND */
*/*%A53: D (NO,%A54,YES,%G99) SEEK CHECK */
*/* ERRACT1R: D (YES,CHAINR,NO,) RETRY IN PROGRESS */
*/*%A96: P (,CHAINR) SET UP RETRY CTR FOR 1 RETRY */
*/*%A54: D (YES,%A57,NO,) INTV REQ */
*/* D (NO,%A61,YES,ERRACT1R) BUS CHECK */
*/*%A57: D (NO,%A30,YES,) IPLENTSW = 0 */
*/* P SET INTV REQ WAIT CODE X'OC' */
*/* R LPSW */
*/*%A30: D (YES,%A59,NO,%A96) RETRY IN PROGRESS */
*/*%A59: P SET UP TO WRITE INTERVENTION REQ MESSAGE */
*/* P GET MSG @ AND LENGTH */
*/* S CONSOLE: */
*/* D (YES,EXITCODE,NO,) I/O ERROR */
*/* P TIO LOOP */
*/* P RESTORE I/O OPERATION */
*/* R DUMPSIO */
*/*%A61: D (NO,%A63,YES,) DATA CHECK */
*/*%A62: P SET UP CCW */
*/* D (YES,CHAINR,NO,) RETRY IN PROGRESS */
*/* P (,CHAINR) INIT FOR 16 RETRIES */
*/*%A63: D (YES,%A62,NO,) OVERRUN */
*/* D (YES,%A62,NO,) MISSING ADDR MARKER */
*/* D (YES,EXITCODE,NO,) CMD REJECT */
*/* D (NO,%A89,YES,) TRK CHECK */
*/* P ZERO OUT SENSE AREA */
*/* D (YES,%A68,NO,) RETRY IN PROGRESS */
*/* P SET UP 256 MAX RETRIES */
*/*%A68: P CT = CT - 1 */
*/* D (NO,ERBOK1,YES,EXITCODE) CTR = 0 */
*/*ERBOK1: P SET UP ERROR CTR */
*/* P SAVE ORIGINAL CCHHR */
*/* P SET UP TO HANDLE OWN ERRORS */
*/* P SET UP TO GET ALT TRK */
*/* S DUMPSIO: READ R0 */
*/* D (NO,,YES,EXITCODE) I/O ERROR */
*/*%A37: D (YES,%A80,NO,EXITCODE) DEF TRK */
*/*%A80: S DUMPSIO: READ INPUT FROM ALT TRK */
*/* D (YES,EXITCODE,NO,) I/O ERROR */
*/* P RESTORE ORIGINAL CCHHR */
*/* P CTERROR = 0 */
*/* R RETURN */
*/*%A89: D (N0,EXITCODE,YES,) END OF CYL */
*/*%A94: P BUMP CC BY 1 */
*/* P SET UP SEEK @ */
*/* P ZERO HH FIELD */
*/* D (NO,%A95,YES,) VTOC SEARCH */
*/* D (YES,EXITCODE,NO,) OVER VTOC LIMIT */
*/*%A95: P RESTORE CHAN PGM */
*/* R DUMPSIO */
*/*AMDSAPRO: END */
         SPACE
         SPACE
*********************************************************************
*                                                                   *
*  THIS IS THE ENTRY POINT TO THE PRECURSOR ROUTINE. THIS           *
*  ENTRY POINT IS USED FOR ALL ENTRIES INTO THIS ROUTINE.           *
*                                                                   *
*********************************************************************
         SPACE
AMDSAPRO CSECT
         ENTRY PGERCDCT
*
*  PRECURSOR COMMON INTERFACE ROUTINE ENTRY POINT
*
RDCOUNT  CCW   X'12',COUNTFLD,X'60',8
RDHOMEAD CCW   X'1A',COUNTFLD,X'70',5
IDEQSRCH CCW   X'31',COUNTFLD,X'60',5
         CCW   X'08',IDEQSRCH,X'60',1
         CCW   X'05',X'7000',X'20',X'800'
COUNTFLD DC    2F'0'
         STM   BASEREG,RETREG,HISAVE   SAVE REGS 12&13 IN LOC 8
         BALR  BASEREG,0               SET UP ADDRESSABILITY
         USING *,BASEREG
         OI    SWITCHES,IPLENTSW       SET IPLENTSW = 1 FOR HSR ENTRY
         CLC   IPLDEVAD(K2),REALENT    COMPARE FOR REAL ENTRY
         BE    AMDSAPIO                SKIP STR STAT FOR REAL ENTRY
         MVI   SWITCHES,HEX00          ZERO IPLENTSW FOR IPL ENTRY
         STM   SAVREG,HIREG,REGSAVE    STORE REGS 14-11 IN SAVE AREA
         MVC   REGSAVE+48(8),HISAVE    MOVE REGS 12&13 INTO SAVE AREA
         USING CCT,CCTREG              SET UP ADDRESSABILITY FOR CCT
         LH    CCTREG,HEX7000          AT LOCATION X'7000'
         XC    K0(CTBRANCH-CCT,CCTREG),K0(CCTREG) ZERO OUT MIN CCT
         CLC   REGSAVE(64),GPRLOC      COMPARE STR STAT   & SAVED REGS
         BE    STATDONE                STORE STATUS WAS DONE
         OI    CTFLG2,CTNOSTAT         TURN ON NO STORE STAT DONE FLG
         MVC   GPRLOC(64),REGSAVE      MOVE REGS INTO STR STAT AREA
STATDONE DS    0H
         MVC   CTINADDR(2),IPLDEVAD    MOVE IPL DEV ADDR INTO CCT
         MVC   CTCCHHR(7),CCHHRLOC     SAVE IPL2 CCHHR
         MVC   CTPGECNT(K1),PGERCDCT    OBTAIN NUMBER OF RCDS IN PGE
         SPACE
*********************************************************************
*                                                                   *
*  THIS IS THE PRECURSOR I/O DATA SET SEARCHING ROUTINE             *
*                                                                   *
*********************************************************************
         SPACE
AMDSAPIO DS    0H                      PRECURSOR SEARCH ROUTINE
         LH    CCTREG,HEX7000          INSURE ADDRESSABILITY FOR CCT
         ST    CREG,CREGSAVE           SAVE CREG
         NI    SEARCH2,HEX7F           TURN OFF MULTI-TRK SRCH
         LH    IODEVREG,CTINADDR       PICK UP DEVICE ADDR FOR SRCH
         XC    SEEKADDR(8),SEEKADDR    ZERO OUT SEEK AREA
         MVI   SRCHADDR+4,3            SET UP FOR SEARCH OF RCD
         MVI   SEARCH2+K7,K5           MOVE IN SEARCH LENGTH
         MVI   READ1A+7,LBLNGTH        MOVE LBL LNGTH INTO READ
         TM    SWITCHES,IPLENTSW       TEST FOR HSR ENTRY
         BZ    INPUTIPL                IPL ENTRY INPUT AREA LOC 7400
         L     VOLREG,INPUT            READ INTO LOC X'1000'
         MVC   READ1A+1(3),INPUT+1     LABEL LOCATION
         B     SAPIO2                  BRANCH TO START I/O
INPUTIPL DS    0H
         L     VOLREG,IPLINPUT         READ INTO LOC X'7400'
         MVC   READ1A+1(3),IPLINPUT+1  LABEL LOCATION
SAPIO2   DS    0H
         LA    CCWREG,READ1A           LOAD ADDR OF 2ND READ
         STCM  CCWREG,HEX7,TIC4A+1     STORE THE ADDR IN CTL TIC
         LA    CCWREG,SEEK2            SET UP FOR SEEK, SEARCH, READ
         BAL   RETREG,DUMPSIO          READ IN VOL LABEL
         LTR   RETCODE,RETCODE         SUCCESSFUL READ?
         BNZ   ERRMSG1                 CHECK ENTRY TYPE
         SPACE
*********************************************************************
*                                                                   *
*  THIS SECTION SETS UP FOR DATA SET PROCESSING-VERIFY IBM VOLUME   *
*                                                                   *
*********************************************************************
         SPACE
DATASET  DS    0H                      VERIFY IBM VOLUME
         USING VOLABEL,VOLREG          SET UP ADDRESSABILITY FOR LBL
         CLC   VOLAB1(4),IBMVOL        CHECK FOR IBM LABEL
         BNE   ERRMSG1                 CHECK ENTRY TYPE
VOLOK    DS    0H                      SET UP FOR DS READ
         MVC   SEEKADDR+2(5),VOLVTOC   SET UP CCHHR
         MVC   CTCCHHS(4),VOLVTOC      MOVE CCHH  INTO CCT
         SPACE
*********************************************************************
*                                                                   *
*  THIS SECTION SETS UP THE CCT FOR THE DS FOUND.                   *
*                                                                   *
*********************************************************************
         SPACE
FORMAT1  DS    0H                      EXAMINE FORMAT 4 DSCB
         OI    SEARCH2,HEX80           TURN ON MULTI TRK SRCH
         MVI   SEARCH2+K7,K44          MOVE IN LNGTH OF 44
         TM    SWITCHES,IPLENTSW       TEST FOR HSR ENTRY
         BO    SAPIO3
         LH    ADDREG,IPLWORK          GET WORK AREA ADDR
         MVC   READ1A+1(3),IPLINPUT+1  MOVE IN INPUT ADDR
         B     SAPIO4                  SKIP HSR PROCESSING
SAPIO3   DS    0H
         LA    ADDREG,WORKAREA         MOVE IN WORK AREA ADDR
         MVC   READ1A+1(3),INPUT+1     MOVE IN INPUT ADDR
SAPIO4  DS    0H
         MVI   SEARCH2,HEXA9           SET FOR KEY SEARCH
         MVI   K0(ADDREG),FM04         SET UP TO GET FORMAT 4
         MVC   K1(43,ADDREG),K0(ADDREG)  MOVE 04 INTO DS SRCH NME
         LA    CCWREG,READ1A           GET ADDR OF READ 2
         STCM  CCWREG,HEX7,TIC4A+1     SET CTL TIC TO READ 2
         LA    CCWREG,SEEK2            SET UP TO SEEK FORMAT 4
         STCM  ADDREG,HEX7,SEARCH2+K1  SET UP SEARCH ADDRESS
         BAL   RETREG,DUMPSIO          READ IN FORMAT 4 DSCB
         LTR   RETCODE,RETCODE         I/O ERROR?
         BNZ   ERRMSG1                 CHECK ENTRY TYPE
DEVTYPE  DS    0H                      DEVICE TYPE TABLE CHECKER
         USING DSCBF4,VOLREG           SET UP ADDRESSABILITY FOR DSCB
         MVC   CTCCHHE(4),DSCB4HI      MOVE LIMITS INTO CCT
         LA    WORKREG1,TABLNG         SET UP TABLE LENGTH
DEVLOOP  DS    0H                      LOOP TO FIND DEVICE TYPE
         TM    0(WORKREG1),ENDTAB      END OF TABLE
         BO    ERRMSG1                 CHECK ENTRY TYPE
DEVCOMP  DS    0H                      DETERMINE DEVICE TYPE
         CLC   2(2,WORKREG1),DSCB4TRK+2 PROPER DEVICE?         @ZA13017
         BE    DEVOK                   YES, MOVE IN DEVICE TYPE
         LA    WORKREG1,8(WORKREG1)    BUMP UP TABLE COUNTER
         B     DEVLOOP                 CONTINUE SEARCH
DEVOK    DS    0H                      DEVICE IS VALID
         ST    WORKREG1,DEVSAVE        SAVE DEV TYPE PTR
         MVC   CTDEVTYP(1),5(WORKREG1) MOVE IN DEVICE TYPE
         MVC   DEVRTRK(1),7(WORKREG1)  MOVE IN RCDS/TRK        @Z30RSTA
         SPACE
*********************************************************************
*                                                                   *
*  THIS SECTION SEARCHES ON DSNAME SYS1.PAGEDUMP                    *
*                                                                   *
*********************************************************************
         SPACE
DSIN     DS    0H                      DATA SET IS VALID
         TM    SWITCHES,IPLENTSW       CHECK IF HSR ENTRY
         BO    SAPIO5
         LH    ADDREG,IPLWORK          GET WORK AREA ADDR
         B     SAPIO6
SAPIO5   DS    0H
         LA    ADDREG,WORKAREA         GET WORK AREA ADDRESS
SAPIO6   DS    0H
         MVI   K0(ADDREG),BLANK        SET UP FOR 44 CHAR DS NAME
         MVC   K1(43,ADDREG),K0(ADDREG)  BLANK OUT ENTIRE AREA
         MVC   K0(13,ADDREG),SYS1      SET UP NAME SYS1
         OI    SWITCHES,VTOCSW         SET ON VTOC SRCH SW
         BAL   RETREG,DUMPSIO          DO I/O SEARCH ON NAME
         LTR   RETCODE,RETCODE         I/O ERROR ?
         BNZ   ERRMSG1                 CHECK ENTRY TYPE
DSISOK   DS    0H
         NI    SWITCHES,HEXFF-VTOCSW   TURN OFF VTOC SRCH
         USING DSCBF1,VOLREG
         MVC   CTCCHHS(8),DSCBLOW1     MOVE IN HI AND LO EXTENTS
         MVC   SEEKADDR+2(4),CTCCHHS   MOVE IN STARTING CCHH
         NI    SEARCH2,HEX7F           TURN OFF MULTI-TRK SRCH
         LA    CCWREG,SRCHADDR         GET SEARCH ADDRESS
         STCM  CCWREG,HEX7,SEARCH2+K1  PLACE IT IN SEARCH
         MVI   SEARCH2+K7,HEX05        SET UP SEARCH LNGTH
         MVI   SEARCH2,HEX31           SET FOR ID SEARCH
         TM    SWITCHES,IPLENTSW       CHECK IF HSR ENTRY
         BO    PGERCD                  SKIP IPL PROCESSING
***********************************************************************
*                                                                     *
*  THIS SECTION INITIALIZES CTCCHHW IF ENTRY IS VIA IPL               *
*                                                                     *
***********************************************************************
         SR    OUTREG,OUTREG           ZERO OUT REG 6
         SR    EOCREG,EOCREG           ZERO OUT REG 7
         IC    EOCREG,PGERCDCT         GET NUM OF RCDS IN PGE
         L     WORKREG1,DEVSAVE        GET DEVICE TYPE ADDR
         LH    INREG,6(WORKREG1)       GET RCD PER TRK COUNT
         DR    OUTREG,INREG            OBTAIN CYL AND RCD COUNT
         AH    EOCREG,CTCCHHS+2        BUMP CCHH BY STARTING CCHH
         AH    EOCREG,ONE          BUMP BY 1 TO POSITION CCHH  @YM05130
         SR    OUTREG,OUTREG           ZERO OUT REG 6
         LH    INREG,2(WORKREG1)       GET TRKS PER CYL COUNT
         DR    OUTREG,INREG            GET NUMBER OF TRKS IN PGE
         AH    EOCREG,CTCCHHS          BUMP BY START OF CCHH
         STH   EOCREG,CTCCHHW          STORE CYL OF WORK FILE
         STH   OUTREG,CTCCHHW+2        STORE HH OF WORK FILE
         B     HSRRCD                  GO READ IN HSR
         SPACE
*********************************************************************
*                                                                   *
*   THIS SECTION READS IN AMDSAPGE IF ENTRY IS VIA HSR              *
*                                                                   *
*********************************************************************
         SPACE
PGERCD   DS    0H                                              @Z30RSTA
         LH    CCWREG,RCDLNGTH         RCD LENGTH - X'1800'    @Z30RSTA
         STH   CCWREG,READ1+K6         STORE IT IN READ 1      @Z30RSTA
         ICM   CCWREG,HEX3,PGELOCS     INPUT ADDR FOR PGE      @Z30RSTA
         STCM  CCWREG,HEX7,READ1+K1    PGE LOCATED AT X'8000'  @Z30RSTA
         SR    RCDCTREG,RCDCTREG       ZERO CT REG             @Z30RSTA
         IC    RCDCTREG,PGERCDCT       SET UP FOR # OF RCDS    @Z30RSTA
         SR    RTRKREG,RTRKREG         ZERO REC/TRK CT         @Z30RSTA
         IC    RTRKREG,DEVRTRK         RECS/TRK FOR DEVICE     @Z30RSTA
         CLI   DEVRTRK,HEX01           ONE REC/TRK             @Z30RSTA
         BNE   GT1                     MORE THAN 1 REC/TRK     @Z30RSTA
         BAL   RETREG,EOC              GO BUMP CCHH BY 1 TO PASS HSR
         B     RCDINIT                                         @Z30RSTA
GT1      DS    0H                                              @Z30RSTA
         MVI   SEEKADDR+6,HEX02        SET R TO TWO            @Z30RSTA
         BCTR  RTRKREG,0               DEC RECS ON TRK BY 1    @Z30RSTA
RCDINIT  DS    0H                                              @Z30RSTA
         LA    CCWREG,READ1            READ ADDRESS            @Z30RSTA
         STCM  CCWREG,HEX7,TIC4A+K1                            @Z30RSTA
RCDLOOP  DS    0H                                              @Z30RSTA
         LA    CCWREG,SEEK2            SET UP CHAN PGM         @Z30RSTA
         BAL   RETREG,DUMPSIO          GO READ IN REC          @Z30RSTA
         LTR   RETCODE,RETCODE         I/O ERROR               @Z30RSTA
         BNZ   ERRMSG1                 ERROR CODE EXIT         @Z30RSTA
         BCT   RCDCTREG,MORERCD        DEC PGE RECS BY 1       @Z30RSTA
         B     PGEISIN                 PGE LOADED              @Z30RSTA
MORERCD  DS    0H                                              @Z30RSTA
         ICM   CCWREG,HEX7,READ1+K1    ADDR OF PREV READ       @Z30RSTA
         AH    CCWREG,RCDLNGTH         BUMP BY X'1800'         @Z30RSTA
         STCM  CCWREG,HEX7,READ1+K1    NEW INPUT ADDR          @Z30RSTA
         SR    WORKREG1,WORKREG1       INCREMENT R FOR REC     @Z30RSTA
         IC    WORKREG1,SEEKADDR+6                             @Z30RSTA
         AH    WORKREG1,ONE                                    @Z30RSTA
         STC   WORKREG1,SEEKADDR+6                             @Z30RSTA
         BCT   RTRKREG,RCDLOOP         DEC RECS ON TRK BY 1    @Z30RSTA
         MVI   SEEKADDR+6,HEX01        SET R TO ONE            @Z30RSTA
         IC    RTRKREG,DEVRTRK         RECS/TRK FOR DEV        @Z30RSTA
         BAL   RETREG,EOC              GO BUMP CCHH            @Z30RSTA
         B     RCDLOOP                                         @Z30RSTA
PGEISIN  DS    0H
         L     CREG,CREGSAVE           SET UP ADDR OF PGE AND
         SR    RETCODE,RETCODE         ZERO RETURN CODE
         BR    CREG                    GO BACK TO HSR
         SPACE
*********************************************************************
*                                                                   *
*   THIS SECTION CHECKS THE TYPE OF ENTRY ON AN ERROR CONDITION
*   AND TAKES APPROPRIATE ACTION                                    *
*                                                                   *
*********************************************************************
         SPACE
ERRMSG1  DS    0H
         TM    SWITCHES,IPLENTSW       CHECK FOR HSR ENTRY
         BO    ERRTN                   SET ERROR RC
         MVI   CTWAIT,HEXFE            SET WAIT STATE CODE = FE
         B     WAITSTAT                GO LOAD WAIT STATE
ERRTN    DS    0H
         MVI   CTWAIT,HEX1A            SET WAIT CODE = 1A
         L     CREG,CREGSAVE           GET HSR ADDRESS
         LA    RETCODE,K4              SET RC = 4
         BR    CREG                    RETURN TO CALLER WITH RC = 4
         SPACE
*********************************************************************
*                                                                   *
*   THIS SECTION BUMPS THE CCHH BY ONE                              *
*                                                                   *
*********************************************************************
         SPACE
EOC      DS    0H
         ICM   EOCREG,HEXF,SRCHADDR    GET CCHH OF RCD
         AH    EOCREG,ONE          INCREMENT CCHH BY 1         @YM05130
         L     WORKREG1,DEVSAVE        GET DEV TYPE
         CLM   EOCREG,HEX3,2(WORKREG1) COMPARE HH WITH MAX FOR DEV
         BL    NOMAXHH                 SKIP CC BUMP
         SRL   EOCREG,HEX10            SHIFT TO OBTAIN CC ALONE
         AH    EOCREG,ONE          BUMP CC BY 1                @YM05130
         SLL   EOCREG,HEX10            TO GET CC AND HH(ZERO HH)
NOMAXHH  DS    0H
         STCM  EOCREG,HEXF,SRCHADDR    STORE NEW CCHH
         BR    RETREG                  RETURN TO CALLER
         SPACE
*********************************************************************
*                                                                   *
*  THIS ROUTINE HANDLES I/O ERRORS FOR THE PRECURSOR.               *
*                                                                   *
*********************************************************************
         SPACE
CATSEXIT DS    0H
         TM    CTFLG1,CTERROR          CHECK IF USER DOES OWN ERROR REC
         BNO   TESTERR                 NO, PROVIDE ERROR RECOVERY
         NI    CTFLG1,HEXFF-CTERROR    YES, ZERO FLG TO INDICATE ERROR
         BR    RETREG                  LET CALLER HANDLE ERROR
TESTERR  DS    0H                      ERROR PROCESSING
         ST    RETREG,RETSAVE          STORE RETURN REG ADDR
         ICM   ERBREG,HEXF,CTERBDA     SET UP WITH THE DA ERB
         MVC   CSWSAVE(8),CSW          SAVE THE CSW FOR LATER
         LR    WORKREG1,CCWREG         SAVE CCW FOR RETRY
CSWOK    DS    0H                      SET UP TO CHECK STATUS
         TM    CSW+K5,CHANCK           CATASTROPHIC CHANNEL ERROR?
         BNZ   EXITCODE                YES, TERMINATE WITH RC=4
         TM    CSW+4,UNITCK            UNIT CHECK CONDITION?
         BO    UNITSENS                YES, ISSUE SENSE CMD
         TM    CSW+5,CHAINCK           CHAINING CK COND?
         BNO   EXITCODE                RETURN WITH ERROR CODE
CHAINACT DS    0H                      CHAINING CHECK PROCESSING
         LTR   ERBREG,ERBREG           ERB SET UP?
         BNZ   CHAINR                  YES, RETRY UNTIL COMPLETED
         L     ERBREG,ERB10            NO, SET UP ERB FOR RETRY
         B     CHAINR                  GO TO CHAIN ROUTINE
UNITSENS DS    0H                      UNIT SENSE PROCESSING RTN
         XC    SENSAREA(2),SENSAREA    ZERO OUT SENSE INPUT AREA
         LA    CCWREG,SENSEOP          SET UP SENSE OPERATION
         OI    CTFLG1,CTERROR          SET UP TO HANDLE OWN ERRORS
         BAL   RETREG,DUMPSIO          SET UP TO ISSUE SENSE
         TM    CTFLG1,CTERROR          DID ERROR OCCUR
         BNO   EXITCODE                YES, EXIT
         NI    CTFLG1,HEXFF-CTERROR    NO, ZERO ERROR FLAG
         TM    SENSE03,EQUCK           EQUIPMENT CHECK?
         BO    ERRACT1R                YES, HANDLE WITH ONE RETRY
         TM    SENSE14,NORCD           NO RECORD FOUND?
         BO    EXITCODE                YES, NORMAL CONDITION
         TM    SENSE07,SEEKCK          SEEK CHECK ?
         BO    CHAINACT                SET UP FOR RETRY
         TM    SENSE01,INTVREQ         INTERVENTION REQUIRED?
         BO    INTVR1                  YES,PRINT OUT MSG
         TM    SENSE02,BUSCK           BUS CHECK?
         BO    ERRACT1R                 SET UP TO RECOVER
         TM    SENSE04,DATACK          DATA CHECK?
         BO    ERRACT16                RETRY 16 TIMES
         TM    SENSE05,OVERUN          OVERUN CONDITION?
         BO    ERRACT16                RETRY 16 TIMES
         TM    SENSE16,MISSADDR        MISSING ADDR MARKER
         BO    ERRACT16                YES, RETRY 16 TIMES
         TM    SENSE00,CMDREJ          COMMAND REJECT?
         BO    EXITCODE                YES, EXIT CAT ERROR
         TM    SENSE06,TRKCHK          TRACK CHECK COND?
         BO    ERRACT6                 YES, RETRY
         TM    SENSE12,ENDCYL          END OF CYLINDER?
         BNO   EXITCODE                NO, EXIT ON ALL CONDITIONS
SKIP1NOP DS    0H                      EOC ?
         L     CCWREG,SEEKADDR         SET UP TO INCREMENT CC
         AH    CCWREG,ONE              INCREMENT CC BY 1       @ZA17670
         ST    CCWREG,SEEKADDR         RESTORE-NOW AT NEXT CYLINDER
         XC    SEEKADDR+4(2),SEEKADDR+4 ZERO OUT THE HH FIELD
         TM    SWITCHES,VTOCSW         IN A VTOC SEARCH
         BNO   RTRY                    NO, SKIP TO NEXT CYL
         CLC   SRCHADDR(4),CTCCHHE     OVER THE VTOC LIMITS?
         BH    EXITCODE                YES, NO RECORD FOUND-EXIT
RTRY     DS    0H                      RETRY ON NEXT CYL
         LR    CCWREG,WORKREG1         RESTORE CHANNEL PGM
         L     RETREG,RETSAVE          RESTORE RETURN ADDRESS  @ZA17670
         B     DUMPSIO                 RESTART I/O CHANNEL PROGRAM
EXITCODE DS    0H                      NORMAL EXIT ROUTINE PROCESSING
         LA    RETCODE,4               SET UP RC
         L     RETREG,RETSAVE          RESTORE RETURN ADDR
         BR    RETREG                  RETURN TO CALLER
CHAINR   DS    0H                      CHAIN ROUTINE
         STCM  ERBREG,HEXF,CTERBDA     RESTORE DA ERB FOR LATER USE
         SR    WORKREG2,WORKREG2       SET UP COUNTER REGISTER
         IC    WORKREG2,ERBRETRY       OBTAIN MAX ERB CTR COUNT
         BCT   WORKREG2,ERBPRIME       DECREMENT COUNT BY 1
         B     EXITCODE                MAX RETRY OCCURRED-EXIT RC=8
ERBPRIME DS    0H                      PRIME ERB RETRY COUNTER
         STC   WORKREG2,ERBRETRY       RESTORE COUNT FOR NEXT TIME
         IC    WORKREG2,ERBCTRP        PRIMARY RETRY COUNTER
         BCT   WORKREG2,ERBSIO         DECREMENT BY ONE RETRY
         B     EXITCODE                ALL RETRIES ATTEMPTED-RC=8
ERBSIO   DS    0H                      PERFORM I/O RETRY OPERATION
         STC   WORKREG2,ERBCTRP        RESTORE PRIMARY CTR
         B     DUMPSIO                 ENTER SIO RTN
ERRACT1R DS    0H                      ONE TIME RETRY
         LR    CCWREG,WORKREG1         SET UP FOR RETRY OPERATION
         LTR   ERBREG,ERBREG           RETRY IN PROCESS?
         BNZ   CHAINR                  YES, RETRY AGAIN
ERRACT1S DS    0H
         L     ERBREG,ERB1             NO, SET UP RETRY COUNTER
         B     CHAINR                  GO RETRY OPERATION
ERRACT16 DS    0H                      A 16 RETRY OPERATION
         LR    CCWREG,WORKREG1         SET UP CCW
         LTR   ERBREG,ERBREG           RETRY IN PROCESS?
         BNZ   CHAINR                  YES, SET UP
         L     ERBREG,ERB3             INITIALIZE THE RETRY
         B     CHAINR                  RETRY OPERATION
ERRACT6  DS    0H                      ALTERNATE TRACK CHECK CODE
         XC    SENSAREA(12),SENSAREA   ZERO OUT SENSE INPUT AREA
         LTR   ERBREG,ERBREG           HAVE WE ALREADY RETRIED OPER
         BNZ   TESTIT                  YES, TEST COUNTER
         L     ERBREG,ERB6             SET UP MAX OF 256 RETRIES
TESTIT   DS    0H                      HOW MANY RETRIES ALREADY?
         BCT   ERBREG,ERBOK1           DECREMENT BY ONE RETRY
         B     EXITCODE                ALL DONE, EXIT NO RETRY POSSIBLE
ERBOK1   DS    0H                      SET UP TO READ IN ALT TRK ADDR
         STCM  ERBREG,HEXF,CTERBDA     SET UP THE ERROR COUNTER
         OI    CTFLG1,CTERROR          INDICATE ERRORS HANDLED HERE
*                                      ERRORS AT THIS POINT ARE
*                                      TERMINAL TO THE RECOVERY
         ICM   SAVREG,HEXF,SRCHADDR    SAVE CCHH
         LA    CCWREG,ERRSEEK          SET UP TO GET ALT TRK ADDR
         BAL   RETREG,DUMPSIO          GO TO DUMPSIO
         TM    CTFLG1,CTERROR          AN I/O ERROR OCCUR?
         BNO   EXITCODE                YES, EXIT-PERMANENT I/O ERROR
         TM    SENSAREA,DEFTRKFG       A DEFECTIVE TRACK?
         BNO   EXITCODE                NO, TEST FOR ALTERNATE TRK
         LA    CCWREG,SEEKSA           SET UP SEEK
         TM    SWITCHES,IPLENTSW       CHECK FOR ENTRY
         BO    CONTALTK                BRANCH IF HSR ENTRY
         L     RETREG,RETSAVE          RESTORE RETREG
         B     DUMPSIO                 GO TO DUMPSIO
CONTALTK DS    0H
         BAL   RETREG,DUMPSIO          SEEK ALTERNATE TRK
         TM    CTFLG1,CTERROR          AN I/O ERROR?
         BNO   EXITCODE                IF I/O ERROR EXIT
         STCM  SAVREG,HEXF,SEEKADDR+2  RESTORE ORIGINAL CCHH
         NI    CTFLG1,HEX7F            ZERO CTERROR
         SR    RETCODE,RETCODE         ZERO RETURN CODE
         L     RETREG,RETSAVE          RESTORE RETURN ADDR
         BR    RETREG
INTVR1   DS    0H                      INTERVENTION REQUIRED
         TM    SWITCHES,IPLENTSW       CHECK FOR HSR ENTRY
         BO    HSRINTV                 GO SET UP MSG FOR HSR ENTRY
         MVI   CTWAIT,HEX0E            SET UP INTV REQ WAIT CODE
         B     WAITSTAT                GO LOAD WAIT STATE
HSRINTV  DS    0H
         LR    CCWREG,WORKREG1         SAVE LAST OPERATION
         LTR   ERBREG,ERBREG           RETRY IN PROCESS?
         BZ    ERRACT1S                NO, RETRY OPERATION ONCE
         SR    INREG,INREG             SET UP TO WRITE INTVR MSG
         LA    OUTREG,MSG14I           OBTAIN MSG ADDR
         ICM   OUTREG,HEX8,LMSG14I     SET UP LENGTH OF MSG
         L     BALREG,CTCONSOL         GO TO CONSOLE ROUTINE ADDR
         BALR  CREG,BALREG             GO ISSUE MSG
         LTR   RETCODE,RETCODE         DID AN ERROR OCCUR?
         BNZ   EXITCODE                YES, NO RECOVERY POSSIBLE-EXIT
TIOL     DS    0H                      SET UP FOR INTERRUPT
         LH    IODEVREG,CTINADDR       RESTORE DEVICE ADDRESS
         TIO   0(IODEVREG)             WAIT FOR I/O INTERRUPT
         BC    7,TIOL                  TO OCCUR ON INTV DEVICE
         LR    CCWREG,WORKREG1         RESTORE I/O OPERATION TO
         B     DUMPSIO                 RETRY THE I/O
         SPACE
*********************************************************************
*                                                                   *
*  REGISTER EQUATES                                                 *
*                                                                   *
*********************************************************************
         SPACE
SAVREG   EQU   0                       TEMPORARY SAVE REGISTER
LOWREG   EQU   0                       LOW REGISTER FOR LM AND STM
VOLREG   EQU   1                       VOLUME LABEL REGISTER
RCDCTREG EQU   1                       NUMBER OF RCDS IN PGE
ERBREG   EQU   2                       ERB COUNTER REGISTER
CCTREG   EQU   3                       CCT BASE REGISTER
WORKREG1 EQU   4                       WORK PROCESSING REGISTER
INREG    EQU   5                       INPUT CONSOLE REGISTER
OUTREG   EQU   6                       CONSOLE OUTPUT REGISTER
WORKREG2 EQU   6                       WORKREG PROCESSING REG
EOCREG   EQU   7                       END OF CYL COUNT
ADDREG   EQU   8                       WORKAREA ADDRESS
RTRKREG  EQU   9                       RECS/TRK WORK REG       @Z30RSTA
IODEVREG EQU   10                      DEVICE TO PERFORM I/O
CCWREG   EQU   11                      CHANNEL PROGRAM REIGSTER
BASEREG  EQU   12                      BASE REGISTER
RETREG   EQU   13                      RETURN REGISTER
CREG     EQU   14                      USED FOR SIO RETURN REGISTER
RETCODE  EQU   15                      RETURN CODE REGISTER
BALREG   EQU   15                      BRANCH AND LINK REGISTER
HIREG    EQU   15                      HIGH REGISTER FOR STM AND LM
         SPACE
*********************************************************************
*                                                                   *
*  THIS SECTION DEFINES THE CONSTANTS USED BY THE PROGRAM           *
*                                                                   *
*********************************************************************
         SPACE
K0       EQU   0                       ZERO OFFSET
K1       EQU   1                       ONE OFFSET
K2       EQU   2                       CONSTANT OF 2 FOR SUBTRACTION
K4       EQU   4                       FLAG OFFSET IN CCWS
K5       EQU   5                       SEARCH LENGTH CT
K6       EQU   6                       SEEK CMD LENGTH CT
K7       EQU   7                       LENGTH OFFSET IN SEARCH CMD
K44      EQU   44                      DSNAME LENGTH FOR SEARCH
         SPACE
*********************************************************************
*                                                                   *
*  THIS SECTION CONTAINS THE CONSTANT EQUATES USED BY THE PROGRAM   *
*                                                                   *
*********************************************************************
         SPACE
CAW      EQU   X'48'                   CAW LOCATION
CCHHRLOC EQU   308                     IPL2 CCHHR LOCATION
HALTPSW  EQU   0                       WAIT STATE PSW LOCATION
HISAVE   EQU   X'08'                   SAVE LOC FOR REGS 13&13
PGELNGTH EQU   X'1800'                 RCD LENGTH
GPRLOC   EQU   384                     LOCATION OF GPR SAVE AREA IN LOW
BLANK    EQU   C' '                    CHARACTER BLANK
LBLNGTH  EQU   80                      LENGTH OF IBM VOL LABEL
CSW      EQU   64                      LOCATION OF CSW
ENDTAB   EQU   X'FF'                   END OF TABLE INDICATOR
FM04     EQU   X'04'                   FORMAT 4 DSCB IDENTIFIER
WORKAREA EQU   304                     LOCATION OF WORK AREA
EQUCK    EQU   X'10'                   EQUIPMENT CHECK CONDITION
NORCD    EQU   X'08'                   NO RECORD FOUND
BUSCK    EQU   X'20'                   BUS CHECK CONDITION
INTVREQ  EQU   X'40'                   INTERVENTION REQUIRED
SEEKCK   EQU   X'01'                   SEEK CHECK CONDITION
DATACK   EQU   X'08'                   DATA CHECK CONDITION
OVERUN   EQU   X'04'                   OVERUN CONDITION
MISSADDR EQU   X'02'                   MISSING ADDR MARKERS
TRKCHK   EQU   X'02'                   TRACK CONDITION CHECK
CMDREJ   EQU   X'80'                   COMMAND REJECT
ENDCYL   EQU   X'20'                   END OF CYLINDER CONDITION
IPLDEVAD EQU   X'BA'
IPLENTSW EQU   X'80'
VTOCSW   EQU   X'40'
         SPACE
*********************************************************************
*                                                                   *
*  THIS SECTION DEFINES THE DC CONSTANT AREAS WHICH ARE FIXED       *
*                                                                   *
*********************************************************************
         SPACE
ONE      DC    H'1'                CONSTANT 1                  @YM05130
HSRLOCAT DC    XL2'7020'               HIGH SPEED REAL LOCATION
IPLWORK  DC    XL2'7500'               WORK AREA FOR IPL ENTRY
PGELOCS  DC    XL2'8000'               INIT VALUE FOR READ CCW @Z30RSTA
SYS1     DC    C'SYS1.PAGEDUMP'        FOR DATA SET NAME TO SEARCH ON
TABLNG   DS    0H                      SET UP TABLE
D2305A   DC    H'48'                   TRK CAPACITY ON 2305-1
         DC    H'08'                   TRKS PER CYLINDER
         DC    H'06'                   DEVICE ID
         DC    H'02'                   RCD PER TRK COUNT
D2305B   DC    H'96'                   TRK CAPACITY ON 2305-2
         DC    H'08'                   TRKS PER CYLINDER
         DC    H'07'                   DEVICE ID
         DC    H'02'                   RCD PER TRK COUNT
D3330    DC    H'411'                  3330 TRK CAPACITY
         DC    H'19'                   TRKS PER CYLINDER
         DC    H'09'                   3330 ID
         DC    H'02'                   RCD PER TRK COUNT
D2314    DC    H'203'                  TRK CAPACITY ON 2314
         DC    H'20'                   TRKS PER CYLINDER
         DC    H'08'                   2314 ID
         DC    H'01'                   RCD PER TRK COUNT
D3330A   DC    H'815'                  3330-1 TRK CAPACITY
         DC    H'19'                   TRKS PER CYLINDER
         DC    H'13'                   3330-1 ID
         DC    H'02'                   RCD PER TRK COUNT
D3340A1  DC    H'349'               3340A2 TRK CAPACITY        @YM04500
         DC    H'12'                   TRKS PER CYLINDER
         DC    H'10'                   3340 ID
         DC    H'01'                   RCD PER TRK COUNT
D3340A2  DC    H'698'               3340A3 TRK CAPACITY        @YM04500
         DC    H'12'                   TRKS PER CYLINDER
         DC    H'10'                   3340 ID
         DC    H'01'                   RCD PER TRK COUNT
D3350    DC    H'560'                  3350 TRK CAPACITY       @Z30RSTA
         DC    H'30'                   TRKS PER CYL            @Z30RSTA
         DC    H'11'                   3350 ID                 @Z30RSTA
         DC    H'03'                   REC PER TRK COUNT       @Z30RSTA
TABEND   DC    XL1'FF'                 END OF TABLE
         DS    0F                      ALIGN ON FULL WORK BOUNDRY
ERB1     DC    XL4'010002FF'           ONE TIME RETRY OPERATION
ERB3     DC    XL4'03000FFF'           16 TIME RETRY
ERB6     DC    XL4'06000FFF'           TRK COND CHK ERB
ERB10    DC    XL4'0B00AFF'            10 RETRY ERB
CSWSAVE  DC    2F'0'                   SAVE AREA FOR CSW
DEVSAVE  DS    F'0'                    DEVICE TYPE ADDR
DEVRTRK  DS    XL1                     DEVICE RECS/TRK         @Z30RSTA
REGSAVE  DS    64F                     REG SAVE AREA FOR IPL ENTRY
REALENT  DC    XL2'0000'               REAL ENTRY COMPARATOR
SWITCHES DS    XL1                     SWITCHES USED ONLY IN PRO
         DS    0H
RCDLNGTH DC    XL2'1800'               RCD LENGTH
SENSAREA DC    3F'0'                   SENSE BYTE SAVE AREA
RETSAVE  DS    F'0'
CREGSAVE DS    F'0'
INPUT    DC    XL4'00001000'           ADDRESS OF INPUT WORK AREA
IPLINPUT DC    XL4'00007400'           WORK AREA FOR IPL ENTRY
HEX7000  DC    XL2'7000'               START OF MIN CCT
SENSIN   EQU   SENSAREA                CTSENSE ADDRESS FOR SENSE INFO
IBMVOL   DC    C'VOL1'                 IBM STANDARD DA VOL LABEL
         DS    0F
PAGEADDR DC    XL4'00008000'           LOCATION OF PAGE PROGRAM IN CORE
         DS    0H                      ALIGN ON HALF WORD BOUNDRY
KONE     DC    XL1'01'                 CONSTANT ONE FOR REPLY LNGTH
PGERCDCT DC    X'00'                   NUMBER OF PGE RECORDS
*                                       INIT BY AMDSALDR            *
SEEKSA   CCW   SEEKCMD,SENSAREA+6,HEX60,6
         CCW   TICMD,READALN,HEX60,1
         SPACE
*********************************************************************
*                                                                   *
*  HEXADECIMAL CONSTANTS USED BY THIS MODULE ARE INCLUDED HERE      *
*                                                                   *
*********************************************************************
         SPACE
HEX00    EQU   X'00'                   FOR WAIT STATE CODE OF ZERO
HEX01    EQU   X'01'                   RCD 1 ID
HEX0C    EQU   X'0C'                   INTV REQ WAIT STATE CODE
HEX02    EQU   X'02'                   WAIT BIT IN PSW
HEX05    EQU   X'05'                   SEARCH LENGTH
HEX0E    EQU   X'0E'                   INTV REQ WAIT STATE
HEX1A    EQU   X'1A'                   ERROR LOADING PGE WAIT STATE
HEXFE    EQU   X'FE'                   UNABLE TO LOCATE SYS1.PAGEDUMP
HEXFD    EQU   X'FD'                   ERROR LOADING HSR OR LSR
HEX1     EQU   B'0001'                 MASK FOR RCD COUNT
HEX3     EQU   B'0011'                 MASK FOR RETRY OPERATION
HEX3F    EQU   X'3F'                   CATASTROPHIC CHAN ERR MSK
HEX7     EQU   B'0111'                 USED FOR ADDR PORTION ONLY
HEX70    EQU   X'70'                   FOR MULTI TRK READ HA NO DATA
HEX7F    EQU   X'7F'                   USED FOR ERROR RESET CONDITION
HEX8     EQU   B'1000'                 FOR LENGTH OF MSG COND
HEX80    EQU   X'80'                   MULTI TRK SEARCH
HEX10    EQU   X'10'                   TEST VARIABLE
HEXF     EQU   B'1111'                 FOR LOADS OF NON BYTE BDY ADDR
HEXFF     EQU   X'FF'                  TEST MASK
HEX31    EQU   X'31'                   SEARCH CMD
HEXA9    EQU   X'A9'                   SEARCH KEY CMD
         SPACE
*********************************************************************
*                                                                   *
*  THIS SECTION DEFINES THE MESSAGE ISSUED BY THE PROGRAM          *
*                                                                   *
*********************************************************************
         SPACE
MSG14I   DC    C'14A INTV REQ IPL DEV' INTV REQ ERR
LMSG14I  DC    XL1'14'                 LENGTH OF INTV MSG
         SPACE
*********************************************************************
*                                                                   *
*  THIS DEFINES THE SENSE BYTE DESCRIPTION USED IN ERROR RECOVERY   *
*                                                                   *
*********************************************************************
         SPACE
SENSEOP  CCW   SENSE,SENSIN,HEX20,2    SENSE COMMAND
SENSE    EQU   X'04'                   SENSE COMMAND
UNITCK   EQU   X'02'                   UNIT CHECK CONDITION
SENSE00  EQU   SENSAREA                SENSE BYTE ZERO
SENSE01  EQU   SENSE00                 SENSE BYTE ZERO ONE
SENSE02  EQU   SENSE00                 SENSE BYTE ZERO TWO
SENSE03  EQU   SENSE00                 SENSE BYTE ZERO THREE
SENSE04  EQU   SENSE00                 SENSE BYTE ZERO FOUR
SENSE05  EQU   SENSE00                 SENSE BYTE ZERO FIVE
SENSE06  EQU   SENSE00                 SENSE BYTE ZERO SIX
SENSE07  EQU   SENSE00                 SENSE BYTE ZERO SEVEN
SENSE10  EQU   SENSE00+1               SENSE BYTE ONE
SENSE11  EQU   SENSE10                 SENSE BYTE ONE ONE
SENSE12  EQU   SENSE10                 SENSE BYTE ONE TWO
SENSE13  EQU   SENSE10                 SENSE BYTE ONE THREE
SENSE14  EQU   SENSE10                 SENSE BYTE ONE FOUR
SENSE15  EQU   SENSE10                 SENSE BYTE ONE FIVE
SENSE16  EQU   SENSE10                 SENSE BYTE ONE SIX
SENSE17  EQU   SENSE10                 SENSE BYTE ONE SEVEN
         SPACE
*********************************************************************
*                                                                   *
*  THIS AREA IS A RESERVED MAINTENANCE AND PATCH AREA FROM HERE TO  *
*  THE END OF THE 2K AREA.  THE PATCH AREA IS WITHIN THE 2K FROM    *
*  LOCATION X'7800' TO X'8000' IN THE PRECURSOR AND MUST NOT EXCEED *
*  THESE BOUNDRIES.                                                 *
*                                                                   *
*********************************************************************
         SPACE
PROPATCH DS    0H                 START OF PATCH AND MAINT AREA
         DC    CL8'PROPATCH'      START OF PATCH AREA
*********************************************************************
*                                                                   *
*   THE FOLLOWING ORG PLACES THE PATCH AREA AT THE LOC SPECIFIED    *
*   IN ORDER THAT THE DUMPSIO AND HSR LOADING PORTIONS OF PRECURSOR *
*   WILL BE AT THE VERY END OF THE MODULE.  THIS IS BECAUSE HSR WILL*
*   BE READ INTO LOCATION X'7000' AND WILL OVER-LAY THE FIRST       *
*   PART OF PRECURSOR WHICH STARTS AT LOCATION X'7800'              *
*   ANY ADDITIONS WHICH OCCUR PAST THE PATCH AREA SHOULD            *
*   BE REFLECTED IN THE ORG INSTRUCTION BELOW IN THAT THE LENGTH    *
*   WHICH IS SUBTRACTED FROM 'AMDSAPRO+X'800'' SHOULD BE ADJUSTED   *
*   TO REFLECT ANY INCREASE OR DECREASE IN SIZE FOR BYTES OF CODE   *
*   ADDED OR SUBTRACTED.                                            *
*                                                                   *
*********************************************************************
         ORG   AMDSAPRO+X'800'-X'11C'                          @ZA17670
ENDPATCH DC    CL8'ENDPATCH'      END OF PATCH AREA
         SPACE
*********************************************************************
*                                                                   *
*   THIS SECTION READS IN HSR IF ENTRY IS VIA IPL                   *
*                                                                   *
*********************************************************************
         SPACE
HSRRCD   DS    0H
         LA    CCWREG,HSRRCD           GET ADDR OF HSRRCD
         SR    CCWREG,CCTREG           SUB 7000 FROM IT FOR LNGTH
         STH   CCWREG,READ1A+K6        STORE LNGTH IN READ CCW
         LA    CCWREG,READ1A           SET UP FOR CTL TIC TO
         STCM  CCWREG,HEX7,TIC4A+1     2ND READ
         LA    CCWREG,CTBRANCH         SET UP TO READ HSR
         STCM  CCWREG,HEX7,READ1A+1    INTO LOCATION X'7020'
         LA    CCWREG,SEEK2            READ IN HSR
         BAL   RETREG,DUMPSIO          GO PERFORM I/O
         LTR   RETCODE,RETCODE         ERROR READING IN HSR ?
         BZ    HSRISIN                 NO, GO TO HSR
         MVI   CTWAIT,HEXFD            MOVE IN FD WAIT STATE CODE
WAITSTAT DS    0H
         MVC   HALTPSW+K7(K1),CTWAIT   SET UP WAIT STATE CODE
         OI    HALTPSW+K1,HEX02        TURN ON WAIT BIT IN PSW
         MVI   HALTPSW+K6,HEX00        SET UP REST OF CODE
         LPSW  HALTPSW                 WAIT
HSRISIN  DS    0H
         LR    BASEREG,CCTREG          SET UP ADDR FOR BRANCH
         B     CTBRANCH                GO TO HSR
         SPACE
*********************************************************************
*                                                                   *
*  THIS ROUTINE HANDLES I/O PROCESSING FOR THE PRECURSOR            *
*                                                                   *
*********************************************************************
         SPACE
DUMPSIO  DS    0H                      SIO SUBRTN
TLOOP    DS    0H                      TIO LOOP TO CLR DEV STATUS
         TIO   K0(IODEVREG)            CLR DEV TO INSURE IT IS AVAIL
         BC    2,TLOOP                 WAIT UNTIL DEV IS FREE
         BC    8,SIO                   IF AVAIL ISSUE SIO
         TM    CSW+4,HEX02             ELSE CSW STORED COND TEST LOOP
         BC    14,TLOOP                UNTIL STATUS CLEARED
         CLI   0(CCWREG),SENSE         IS THIS A SENSE CMD ISSUED
         BE    SIO                     YES, IGNORE CHANNEL STATUS
         LA    CCWREG,8(CCWREG)        SET UP CCW FOR INTV REQ
         STCM  CCWREG,HEX7,CSW+1       SET UP CSW FOR INTV REQ
         B     CATSEXIT                HANDLE ERROR CONDITION
SIO      DS    0H
         ST    CCWREG,CAW              SET CAW TO CHANNEL PGM
         SIO   K0(IODEVREG)            PERFORM THE I/O OPERATION
         BC    2,TLOOP                 CSW STORED, CHK AND ATTEMPT ER
         BC    9,TIO
         TM    CSW+4,HEX10
         BNZ   TLOOP
         B     CHECKERR
TIO      DS    0H
         TIO   K0(IODEVREG)            WAIT TIL OPERATION COMPLETED
         BNL   TIO                     CONT WAIT LOOP
CHECKERR DS    0H
         TM    CSW+5,HEX3F             IS IT A UNIT CHK COND
         BNZ   CATSEXIT                IF UNIT CHECK HANDLE ERROR
         TM    CSW+4,HEX02             IS IT DEVICE END
         BNZ   CATSEXIT
         TM    CSW+4,HEX05
         BZ    TIO                     IF NOT DE TIO UNTIL DEV AVAIL
         SR    RETCODE,RETCODE         ZERO RETURN
         CLI   0(CCWREG),SENSE         IS THIS A SENSE CMD ISSUER
         BCR   8,RETREG                YES DO NOT SET ERB TO ZERO
         XC    CTERBDA(4),CTERBDA      NORMAL RETURN RESET ERB
         BR    RETREG                  RETRUN TO CALLER
PROEND   DS    0H
         SPACE
*********************************************************************
*                                                                   *
*  THESE ARE THE CCW'S USED FOR THE DIRECT ACCESS CODE                *
*                                                                   *
*********************************************************************
         SPACE
ERRSEEK  CCW   SEEKCMD,SEEKADDR,HEX60,K6 SEEK FOR ALT TRK
         CCW   READHA,SENSAREA,HEX60,5   READ HOME ADDR CCW
         CCW   READR0,SENSAREA+8,HEX20,4 READ RCD 0 CCW
SEEK2    CCW   SEEKCMD,SEEKADDR,HEX60,K6 SEEK CMD FOR FORMAT 1
READALN  CCW   READHA,INPUT,HEX70,K5     RD HA TO ALIGN AT STRT OF TRK
SEARCH2  CCW   MSEARCH,SRCHADDR,HEX60,44 SEARCH FOR NAME
TIC4     CCW   TICMD,SEARCH2,HEX60,K1    TIC UNTIL FOUND
TIC4A    CCW   TICMD,READ1,HEX60,K1      CTL TIC
READ1    CCW   READCMD,INPUT,HEX20,144   READ IN RECORD 1
READ1A   CCW   READCMD,IPLINPUT,HEX20,144 READ IN RECORD 2
READHA   EQU   X'1A'                   READ HOME ADDR CMD
READR0   EQU   X'16'                   READ RECORD 0 CMD
DEFTRKFG EQU   X'02'                   DEFECTIVE TRK CODE
         DS    0F                      SET UP ALIGNMENT
SEEKADDR DC    XL8'00'                 SEEK ADDR LOC
SRCHADDR EQU   SEEKADDR+2              SEARCH ADDR LOC
MSEARCH  EQU   X'B1'                   MULTI-TRK SEARCH
CHANCK   EQU   X'0E'                   CHANNEL CHECK
CHAINCK  EQU   X'01'                   CHAINING CHECK
TICMD    EQU   X'08'                   TIC CMD CODE
READCMD  EQU   X'06'                   READ CMD CODE
HEX60    EQU   X'60'                   SLI BIT AND CMD CHAIN
HEX20    EQU   X'20'                   SLI BIT ONLY
SEEKCMD  EQU   X'07'                   SEEK CMD CODE
         SPACE
*********************************************************************
*                                                                   *
*  THIS DEFINES THE COMMON CONTROL TABLE (CCT) DSECT                *
*                                                                   *
*********************************************************************
         SPACE
CCT      DSECT
CTWAIT   DS    XL1                     WAIT STATE CODE
CTFLG1   DS    XL1                     FLAG 1 OF CCT
CTERROR  EQU   X'80'                   CALLER HANDLES OWN ERRORS
CTDEVICE EQU   X'40'                   DA I/O IN PROGRESS
CTMORTPE EQU   X'20'                   END OF REEL
CTWORK   EQU   X'10'                   WORK RECORD IN PROGRESS
CTDEFO   EQU   X'08'                   DEFAULT OUTPUT ADDR USED
CTDEFW   EQU   X'04'                   DEFAULT WKFILE ADDR USED
CTMP     EQU   X'02'                   PROCESSING ON MP SYSTEM
CTERREC  EQU   X'01'                   IGNORE CATASTROPHIC ERRORS
CTFLG2   DS    XL1                     FLAG 2 OF CCT
CTDUPSW  EQU   X'80'                   DUPLICATE LINE
CTSTOR   EQU   X'40'                   PROTECT KEY IN PROGRESS
CTPGEFLT EQU   X'20'                   PAGE FAULT IN PROGRESS
CTNOSTAT EQU   X'10'                   STORE STATUS NOT PERFORMED
CTVIRTR  EQU   X'08'                   VIRTUAL DUMP REQUESTED
CTWKDONE EQU   X'04'                   END OF WKFILE PROCESSING
CTALTCON EQU   X'02'                   ALTERNATE CONSOLE IN USE
CTNOWORK EQU   X'01'                   NO WKFILE PRESENT
CTDEVTYP DS    XL1                     IPL DEVICE TYPE
CTSENSE  DS    XL2                     SENSE INFORMATION AREA
CTINADDR DS    XL2                     IPL DEVICE ADDRESS
CTCCHHR  DS    XL7                     FOR USE DURING IPL AND WKFILE
CTPGECNT DS    XL1                     RCD COUNT OF AMDSAPGE
CTCCHHS  DS    XL4                     START OF SYS1.PGEDUMP
CTCCHHE  DS    XL4                     END OF SYS1.PAGEDUMP
CTCCHHW  DS    XL4                     START OF WKFILE
CTERBDA  DS    XL4                     DA ERROR RECOVERY BLOCK
CTERBTPE DS    XL4                     TAPE ERROR RECOVERY BLOCK
CTBRANCH EQU   CTERBTPE
CTERBCON DS    XL4                     CONSOLE ERR RECOVERY BLOCK
CTCPUI   DS    XL2                     IPL CPU ADDRESS
CTOUTAD  DS    XL2                     OUTPUT DEVICE ADDRESS
CTCONTYP DS    XL1                     CONSOLE TYPE
CTEBCOPD DS    XL3                     DEFAULT OUTPUT DEVICE
CTLOWFLG DS    XL1                     FLAGS
CTVIRTD  EQU   X'80'                   DEFAULT TO VIRT DUMP
CTEBCOPR DS    XL3                     REPLIED OUTPUT DEVICE ADDRESS
CTIOTYPE DS    XL1                     IO REQUEST FLAGS
CTIOTERM EQU   X'80'                   TERMINATE
CTIOOUT  EQU   X'40'                   OUTPUT TAPE
CTIODA   EQU   X'20'                   DIRECT ACCESS
CTIOWK   EQU   X'10'                   WKFILE
CTIOCON  EQU   X'08'                   CONSOLE
         DS    XL1                     RESERVED
CTCONFLG DS    XL1                     CONSOLE FLAGS
CTMSGOUT EQU   X'80'                   MSG MUST COME OUT
CTBUFTYP DS    XL1                     BUFFER FLAGS FOR PGE
CTCONSOL DS    XL4                     CONSOLE ROUTINE ADDRESS
CTLWKAD  DS    XL4                     LAST ADDR ON WKFILE
CTCOMMIO DS    XL4                     ADDR OF DUMPSIO ROUTINE
CTEOR    DS    XL4                     ADDRES OF EOR ROUTINE IN HSR
CTVCCT   DS    XL4                     ADDR OF VCCT
CTPRMT1  DS    XL2                     WRITE POSITION(3066 CONSOLE)
CTPRMT2  DS    XL2                     READ POSITION(3066 CONSOLE)
CTHWM    DS    XL1                     LOGICAL 3066 LIMIT
CTHWMAX  DS    XL1                     PHYSICAL 3066 LIMIT
ERBCTRP  EQU   CTERBDA+2               PRIMARY ERB COUNTER
ERBRETRY EQU   CTERBDA+3               MAX ERB COUNTER
         SPACE
*********************************************************************
*                                                                   *
* THIS SECTION DEFINES THE VOLUME LABEL DSECT USED TO REFERENCE LAB *
*                                                                   *
*********************************************************************
         SPACE
VOLABEL  DSECT
VOLAB1   DS    XL3                     LABEL ID
VOLNO    DS    XL1                     VOL LABEL NUMBER
VOLSER   DS    XL6                     VOLUME SERIAL NUMBER
VOLSECUR DS    XL1                     VOL SECURITY BIT
VOLVTOC  DS    XL5                     VTOC POINTER
VOLRSVD1 DS    XL25                    RESERVED FIELD
VOLOWNER DS    XL10                    VOLUME OWNER FIELD
VOLRSVD2 DS    XL29                    RESERVED FIELD
         SPACE
*********************************************************************
*                                                                   *
*  THIS SECTION IS USED TO REFERENCE THE FORMAT 1 DSCB              *
*                                                                   *
*********************************************************************
         SPACE
DSCBF1   DSECT
DSCB1ID  DS    XL1                     FORMAT 1 IDENTIFIER
DSCB1VOL DS    XL6                     VOL ID
DSCB1SEQ DS    XL2                     VOLUME SEQUENCE NUMBER
DSCB1INF DS    XL45                    MISCELLANEOUS INFO (UNUSED)
DSCBTTR  DS    XL2                     RELATIVE TTR FOR UPPER EXTENTS
DSCBMISC DS    XL7                     MISCELLANEOUS INFO (UNUSED)
DSCBLOW1 DS    XL4                     LOWER EXTENT
DSCBHIL  DS    XL4                     UPPER EXTENT LIMIIT
DSCB1EXT DS    XL25                    EXTENT RELEATED DATA(UNUSED)
         SPACE
*********************************************************************
*                                                                   *
*  THIS SECTION IS USED TO REFERENCE THE FORMAT 4 DSCB              *
*                                                                   *
*********************************************************************
         SPACE
DSCBF4   DSECT
DSCB4ID  DS    XL1                     DSCB IDENTIFIER
DSCB4HI  DS    XL5                     DSCB EXTENT LIMIT
DSCB4INF DS    XL12                    DSCB INFO(UNUSED)
DSCB4TRK DS    XL4                     TRACK LNGTH
DSCB4EXT DS    XL76                    EXTENT OF DSCB DATA(UNUSED)
*                                                                   *
         END
