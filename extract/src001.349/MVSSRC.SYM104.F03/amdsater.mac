         TITLE 'AMDSATER TAPE ERROR RECOVERY ROUTINE                   *
                        '
AMDSATER CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL2(@EP00001-@MAINENT)
         DC    AL1(16)                                             0001
         DC    C'AMDSATER  75.153'                                 0001
AMDSAERM DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL2(@EP00652-AMDSAERM)
         ENTRY AMDSAERM
AMDSAERI DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL2(@EP00656-AMDSAERI)
         ENTRY AMDSAERI
AMDSAERP DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL2(@EP00660-AMDSAERP)
         ENTRY AMDSAERP
AMDSAINR DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL2(@EP00664-AMDSAINR)
         ENTRY AMDSAINR
AMDSAERB DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL2(@EP00668-AMDSAERB)
         ENTRY AMDSAERB
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                     0001
         BALR  @09,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,@09                                         0001
         ST    @13,@SA00001+4                                      0001
         LA    @14,@SA00001                                        0001
         ST    @14,8(,@13)                                         0001
         LR    @13,@14                                             0001
         AH    @15,4(,@15)                                         0001
         BR    @15                                                 0001
@EP00001 DS    0H                                                  0002
*   SAVEFORM(1:4) = 'LTER';         /* SET UP SAVE AREA IDENTIFIER   */
         MVC   SAVEFORM(4,R13),@CC01114                            0245
*   CCTREG = CCTADDR;               /* INITIALIZE THE CCT ADDRESS    */
         L     CCTREG,@CF00727                                     0246
*   ERBADDR = ADDR(CTERBTPE);       /* INITIALIZE ADDR OF ERB        */
         LA    @10,CTERBTPE(,CCTREG)                               0247
         ST    @10,ERBADDR                                         0247
*   CTERBTPE = ZERO;                /* CLEAR ERB                     */
*                                                                  0248
         SLR   @10,@10                                             0248
         ST    @10,CTERBTPE(,CCTREG)                               0248
*   /*****************************************************************/
*   /*                                                               */
*   /* FROM THIS POINT ON AMDSATER MAY RE-ENTER ITSELF IN ORDER TO   */
*   /* CORRECT AND RETRY MULTIPLE I/O ERRORS ON TAPE. WHAT FOLLOWS IS*/
*   /* ERROR RECOVERY ACCORDING TO DEFINED STANDARDS FOR TAPE        */
*   /* DEVICES.                                                      */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0249
*                                                                  0249
*RETEST:                                                           0249
*   IF CSWCADDR = ZERO × (CSWCADDR=IODBCAW & VCTCPOUT ^= IODBCAW) THEN
RETEST   L     @10,CSWCADDR+23(,IODBREG)                           0249
         LA    @10,0(,@10)                                         0249
         LTR   @10,@10                                             0249
         BZ    @RT00249                                            0249
         L     @04,IODBCAW(,IODBREG)                               0249
         CR    @10,@04                                             0249
         BNE   @RF00249                                            0249
         C     @04,VCTCPOUT(,VCCTREG)                              0249
         BE    @RF00249                                            0249
@RT00249 DS    0H                                                  0250
*     CCWREG = IODBCAW;             /* IF NO CCW RESTART FROM TOP OF
*                                      CHAN                          */
         L     CCWREG,IODBCAW(,IODBREG)                            0250
*   ELSE                                                           0251
*     CCWREG = CSWCADDR - LENGTH(CCW); /* BACK UP TO START OF FAILING
*                                      CCW                           */
         B     @RC00249                                            0251
@RF00249 L     CCWREG,CSWCADDR+23(,IODBREG)                        0251
         LA    CCWREG,0(,CCWREG)                                   0251
         SL    CCWREG,@CF00036                                     0251
*   IF CCWCMD = DATCHAIN THEN                                      0252
@RC00249 CLI   CCWCMD(CCWREG),255                                  0252
         BNE   @RF00252                                            0252
*     CCWREG = CCWREG - LENGTH(CCW); /* BACK UP ANOTHER CCW TO THE 0253
*                                      STARTING CCW THAT FAILED      */
         SL    CCWREG,@CF00036                                     0253
*   IODBSENS = IODBSENS && IODBSENS; /* ZERO SENSE AREA              */
@RF00252 XC    IODBSENS(24,IODBREG),IODBSENS(IODBREG)              0254
*                                                                  0255
*   /*****************************************************************/
*   /*                                                               */
*   /* FIRST WE HANDLE CHANNEL CONTROL CHECKS. THIS IS KNOWN BY CSW  */
*   /* STATUS 0004                                                   */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0255
*/* D (YES,,NO,ICC) CHANNEL CONTROL CHECK ?                          */
*/* P (,TERMEXIT) MESSAGE ID = 26                                    */
*   IF CSWCCC = ON THEN                                            0255
         TM    CSWCCC+24(IODBREG),B'00000100'                      0255
         BNO   @RF00255                                            0255
*     DO;                                                          0256
*       ERBID = MSGCCC;             /* SET UP MESSAGE ID             */
         MVI   ERBID(CCTREG),X'1A'                                 0257
*       GO TO TERMEXIT;             /* NO RECOVERY FROM CHANNEL ERROR*/
         B     TERMEXIT                                            0258
*     END;                                                         0259
*                                                                  0259
*   /*****************************************************************/
*   /*                                                               */
*   /* INTERFACE CONTROL CHECKS ARE NEXT. THIS IS KNOWN BY CSW STATUS*/
*   /* 0002. NO RECOVERY IS POSSSIBLE                                */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0260
*/*ICC: D (YES,,NO,TUCK) INTERFACE CONTROL CK ?                      */
*/* P (,TERMEXIT) MESSAGE ID = 27                                    */
*   IF CSWICC = ON THEN                                            0260
@RF00255 TM    CSWICC+24(IODBREG),B'00000010'                      0260
         BNO   @RF00260                                            0260
*     DO;                                                          0261
*       ERBID = MSGICC;             /* SET UP MESSAGE ID             */
         MVI   ERBID(CCTREG),X'1B'                                 0262
*       GO TO TERMEXIT;             /* NO RECOVERY IS POSSIBLE       */
         B     TERMEXIT                                            0263
*     END;                                                         0264
*                                                                  0265
*   /*****************************************************************/
*   /*                                                               */
*   /* THE NEXT TEST IS FOR UNIT CHECK CONDITIONS. THIS IS THE MOST  */
*   /* COMMON OF ALL TAPE ERRORS. STATUS IS 0200                     */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0265
*/*TUCK: D (YES,TAPESENS,NO,CDC) UNIT CHECK ?                        */
*   IF CSWUC = ON THEN                                             0265
@RF00260 TM    CSWUC+24(IODBREG),B'00000010'                       0265
         BNO   @RF00265                                            0265
*     DO;                           /* IF UNIT CHECK WE MAY ATTEMPT
*                                      RECOVERY                      */
*                                                                  0266
*   /*****************************************************************/
*   /*                                                               */
*   /* FIRST FOR UNIT CHECK CONDITIONS WE MUST ISSUE A SENSE COMMAND */
*   /* TO FURTHER ISOLATE THE CONDITION                              */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0267
*/*TAPESENS: P R11 = ADDRESS OF SENSE COMMAND READING INTO IODBSENS  */
*/* S TERERI: ISSUE SENSE COMMAND                                    */
*/* D (YES,,NO,TECK) ERROR ON SENSE ?                                */
*/* P (,TERMEXIT) MESSAGE ID = 30                                    */
*       RESPECIFY R11 RESTRICTED;                                  0267
*       R11 = ADDR(SENSECCW);       /* PICK UP SENSE COMMAND         */
         LA    R11,SENSECCW                                        0268
*       SENSEADR = ADDR(IODBSENS);  /* SET UP SENSE INPUT AREA       */
         LA    @10,IODBSENS(,IODBREG)                              0269
         STCM  @10,7,SENSEADR                                      0269
*       CALL TERERI;                /* ISSUE SENSE COMMAND           */
         BAL   @14,TERERI                                          0270
*       RESPECIFY RETCODE RESTRICTED;                              0271
*       IF RETCODE ^= ZERO THEN                                    0272
         LTR   RETCODE,RETCODE                                     0272
         BZ    @RF00272                                            0272
*         DO;                       /* IF ERROR ON SENSE COMMAND     */
*           ERBID = MSGERS;         /* SET UP SENSE ERROR MESSAGE    */
         MVI   ERBID(CCTREG),X'1E'                                 0274
*           GO TO TERMEXIT;         /* CAN NOT DIAGNOSE= OR CORRECT
*                                      ERROR                         */
         B     TERMEXIT                                            0275
*           RESPECIFY (RETCODE,R11) UNRESTRICTED;                  0276
*         END;                                                     0277
*                                                                  0277
*   /*****************************************************************/
*   /*                                                               */
*   /* AFTER A SUCCESSFUL SENSE COMMAND, UNIT CHECK CONDITIONS CAN BE*/
*   /* TESTED. EQUIPMENT CHECK - SENSE 1000 IS FIRST                 */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0278
*/*TECK: D (YES,,NO,TBOCK) EQUIPMENT CK ?                            */
*/* P (,TERMEXIT) MESSAGE ID = 03                                    */
*       IF SENEC = ON THEN                                         0278
@RF00272 TM    SENEC(IODBREG),B'00010000'                          0278
         BNO   @RF00278                                            0278
*         DO;                       /* IF EQUITPMENT CHECK - NO    0279
*                                      RETRIES                       */
*           ERBID = MSGEC;          /* SET UP MESSAGE ID             */
         MVI   ERBID(CCTREG),X'03'                                 0280
*           GO TO TERMEXIT;         /* OBTAIN NEW TAPE AND RETRY I/O
*                                      OPERATION                     */
         B     TERMEXIT                                            0281
*         END;                                                     0282
*                                                                  0283
*   /*****************************************************************/
*   /*                                                               */
*   /* BUS OUT CHECK IS NEXT TO BE PROCESSED. THIS IS KNOWN BY SENSE */
*   /* 2000                                                          */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0283
*/*TBOCK: D (YES,,NO,TINR) BUS OUT CK ?                              */
*/* S TERERB:ERBTPE, CC=02, PCT=5 SCT=0                              */
*/* D (YES,,NO,REPEATOP) DEVICE END ?                                */
*/* D (YES,REPRO,NO,REPEATOP) WRITE CMD ?                            */
*       IF SENBO = ON THEN                                         0283
@RF00278 TM    SENBO(IODBREG),B'00100000'                          0283
         BNO   @RF00283                                            0283
*         DO;                       /* IF BUS OUT CHECK ATTEMPT RETRY*/
*           RESPECIFY R1 RESTRICTED;                               0285
*           IODBCAW = CCWREG;       /* SET UP RETRY CCW              */
         ST    CCWREG,IODBCAW(,IODBREG)                            0286
*           R1 = ADDR(ERBPARM);     /* SET UP TO PARAMETER LIST    0287
*                                      ADDRESS                       */
         LA    R1,ERBPARM                                          0287
*           ERBPID = MSGBOC;        /* SET UP BUS OUT CHECK MESSAGE
*                                      ID                            */
         MVI   ERBPID,X'02'                                        0288
*           ERBSCT = ZERO;          /* ZERO SECONDARY RETRY COUNTER  */
         MVI   ERBSCT,X'00'                                        0289
*           ERBPCT = FIVE;          /* FIVE PRIMARY RETRIES          */
         MVI   ERBPCT,X'05'                                        0290
*           CALL TERERBX;           /* SET UP ERB FOR RETRY          */
         BAL   @14,TERERBX                                         0291
*           RESPECIFY R1 UNRESTRICTED;                             0292
*           IF CSWDE = ON &         /* IF DEVICE END CONDITION       */
*                 CCWCMD = WRITECMD THEN /* ON A WRITE COMMAND       */
         TM    CSWDE+24(IODBREG),B'00000100'                       0293
         BNO   @RF00293                                            0293
         CLI   CCWCMD(CCWREG),1                                    0293
         BE    @RT00293                                            0293
*             GO TO REPRO;          /* REPOSITION THE TAPE PRIOR TO
*                                      RETRY                         */
*           GO TO REPEATOP;         /* OTHERWISE RETRY I/O OPERATION */
         B     REPEATOP                                            0295
*         END;                      /* ENDS BUS OUT CHECK PROCESSING */
*                                                                  0297
*   /*****************************************************************/
*   /*                                                               */
*   /* INTERVENTION REQUIRED CONDITION. THIS IS NOTED BY CONDITION   */
*   /* 4000 IN THE SENSE                                             */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0297
*/*TINR: D (YES,,NO,TCRJT) INTV REQUIRED ?                           */
*/* D (YES,IRRU,NO,STATB) DEVICE END ?                               */
*/*IRRU: P OBTAIN CSW CCW - 8                                        */
*/* D (YES,RC0,NO,) REWIND / UNLOAD COMMAND ?                        */
*/*STATB: D (YES,TIRMSG,NO,) STATUS B BIT = 1 ?                      */
*/* P (,TERMEXIT) MESSAGE ID = 01                                    */
*/*TIRMSG: S AMDSABIN:SVC 28 CONVERT IODBDEV TO EBCDIC DEV ADDR      */
*/* P PLACE DEVICE ADDRESS IN DEV14A                                 */
*/* S TERINR:WAIT FOR READY DEVICE                                   */
*/* D (NO,IRWAIT,YES,%IR1) DEVICE READY ?                            */
*/*IRWAIT: P (,TERMEXIT) MESSAGE ID = 01                             */
*/*%IR1: S TERERB:ERBTPE, CC=01, PCT=2, SCT=0                        */
*/* N (,REPEATOP) RETRY THE I/O OPERATION                            */
*       IF SENIR = ON THEN                                         0297
@RF00283 TM    SENIR(IODBREG),B'01000000'                          0297
         BNO   @RF00297                                            0297
*         DO;                       /* IF INTERVENTION REQUIRED,   0298
*                                      PROCESS THIS CONDITION        */
*           IF CSWDE = ON THEN                                     0299
         TM    CSWDE+24(IODBREG),B'00000100'                       0299
         BNO   @RF00299                                            0299
*             DO;                   /* IF DEVICE END THE COMMAND WENT*/
*               IF CCWCMD = RWUNLOAD THEN                          0301
         CLI   CCWCMD(CCWREG),15                                   0301
         BE    @RT00301                                            0301
*                 GO TO RC0;        /* IF REWIND - UNLOAD IGNORE   0302
*                                      CONDITION SINCE THIS IS A   0302
*                                      NORMAL CONDITION              */
*             END;                  /* IF NOT REWIND-UNLOAD THERE IS
*                                      ANOTHER ERROR SO WE MUST    0303
*                                      CONTINUE CHECKING             */
*           IF SENTB = OFF THEN                                    0304
@RF00299 TM    SENTB(IODBREG),B'00100000'                          0304
         BNZ   @RF00304                                            0304
*             DO;                   /* IF NO TU STATUS THEN PERMANENT
*                                      ERROR EXISTS                  */
*               ERBID = MSGIR;      /* SET UP INTERVENTION REQUIRED
*                                      ERROR MSG                     */
         MVI   ERBID(CCTREG),X'01'                                 0306
*               GO TO TERMEXIT;     /* EXIT TO TRY FOR NEW TAPE      */
         B     TERMEXIT                                            0307
*             END;                                                 0308
*           RESPECIFY R1 RESTRICTED;                               0309
@RF00304 DS    0H                                                  0310
*           R1 = ADDR(CVTBLK);      /* SET UP TO PARAMETER LIST FOR
*                                      CONVERT                       */
         LA    R1,CVTBLK                                           0310
*           CVTBINA = ADDR(IODBDEV); /* PICK UP DEVICE ADDRESS       */
         LA    @10,IODBDEV(,IODBREG)                               0311
         ST    @10,CVTBINA                                         0311
*           CVTEBCA = ADDR(CONVAREA); /* CONVERT AREA ADDRESS        */
         LA    @10,CONVAREA                                        0312
         ST    @10,CVTEBCA                                         0312
*           CVTINL = TWO;           /* TWO BYTE CONVERTED DEVICE   0313
*                                      ADDRESS                       */
         MVC   CVTINL(2),@CH00108                                  0313
*           SVC (BINSVC);           /* CONVERT DDD OF DEVICE         */
         SVC   28                                                  0314
*           DEV14A = CONVAREA(2:4); /* MOVE IN DEVICE ADDRESS        */
         L     @10,@CA01076                                        0315
         MVC   DEV14A-DEV14A(3,@10),CONVAREA+1                     0315
*           R1 = AMD014A;           /* PICK UP MESSAGE ID FOR INTV 0316
*                                      REQUIRED MSG                  */
         LA    R1,14                                               0316
*           CALL TERINR;            /* ISSUE MSG AND WAIT FOR TAPE TO
*                                      BE READY                      */
         BAL   @14,TERINR                                          0317
*           RESPECIFY RETCODE RESTRICTED;                          0318
*           IF RETCODE ^= ZERO THEN                                0319
         LTR   RETCODE,RETCODE                                     0319
         BZ    @RF00319                                            0319
*             DO;                   /* ERROR IN OBTAINING TAPE       */
*               RESPECIFY RETCODE UNRESTRICTED;                    0321
*               ERBID = MSGIR;      /* FINAL MESSAGE ID-CAUSE OF   0322
*                                      FAILURE                       */
         MVI   ERBID(CCTREG),X'01'                                 0322
*               GO TO TERMEXIT;     /* TERMINATE VIRTUAL DUMP        */
         B     TERMEXIT                                            0323
*             END;                                                 0324
*           ERBPID = MSGIR;         /* SET UP IR CONDITION           */
@RF00319 MVI   ERBPID,X'01'                                        0325
*           ERBSCT = ZERO;          /* NO SECONDARY RETRIES          */
         MVI   ERBSCT,X'00'                                        0326
*           ERBPCT = TWO;           /* ALLOW 2 RETRIES ON IR         */
         MVI   ERBPCT,X'02'                                        0327
*           RESPECIFY R1 RESTRICTED;                               0328
*           R1 = ADDR(ERBPARM);                                    0329
         LA    R1,ERBPARM                                          0329
*           CALL TERERBX;           /* UPDATE THE ERB                */
         BAL   @14,TERERBX                                         0330
*           RESPECIFY R1 UNRESTRICTED;                             0331
*           IODBCAW = CCWREG;       /* RETRY ORIGINAL OPERATION      */
         ST    CCWREG,IODBCAW(,IODBREG)                            0332
*           GO TO REPEATOP;                                        0333
         B     REPEATOP                                            0333
*         END;                      /* END OF INTERVENTION REQUIRED
*                                      PROCESSING                    */
*                                                                  0335
*   /*****************************************************************/
*   /*                                                               */
*   /* NEXT WE CHECK FOR COMMAND REJECT. THIS IS IDENTIFIED BY SENSE */
*   /* 8000 ONE NORMAL CONDITION WHICH MAY CAUSE A COMMAND REJECT IS */
*   /* MOUNTING A FILE PROTECTED TAPE. THIS IS KNOWN BY SENSE 8002.  */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0335
*/*TCRJT: D (YES,,NO,TOVER) CMD REJECT ?                             */
*/* D (YES,FPMSG,NO,) FILE PROTECT ?                                 */
*/* P (,TERMEXIT) MESSAGE ID = 00                                    */
*/*FPMSG: P R11 = REWIND/UNLOAD COMMAND                              */
*/* S TERERI:ISSUE REWIND / UNLOAD OF FP TAPE                        */
*/* P SET UP TO ISSUE MESSAGE FP                                     */
*/* S TERINR:WAIT FOR THE DEVICE TO BE READY                         */
*/* D (YES,,NO,FPWAIT) DEVICE READY ?                                */
*/* N (,NEWTAPEM) CHECK NEW TAPE DEVICE                              */
*/*FPWAIT: P (,TERMEXIT) MESSAGE ID = 13                             */
*       IF SENCR = ON THEN                                         0335
@RF00297 TM    SENCR(IODBREG),B'10000000'                          0335
         BNO   @RF00335                                            0335
*         DO;                       /* IF COMMAND REJECT-ISOLATE   0336
*                                      CAUSE                         */
*           IF SENFP = OFF THEN                                    0337
         TM    SENFP(IODBREG),B'00000010'                          0337
         BNZ   @RF00337                                            0337
*             DO;                   /* IF NOT FP - ERROR SO TERMINATE*/
*               ERBID = MSGCR;      /* SET UP CMD REJECT MSG ID      */
         MVI   ERBID(CCTREG),X'00'                                 0339
*               GO TO TERMEXIT;     /* TERMINATE WITH NO RETRIES     */
         B     TERMEXIT                                            0340
*             END;                                                 0341
*           RESPECIFY R11 RESTRICTED;                              0342
@RF00337 DS    0H                                                  0343
*           R11 = ADDR(REWUNLD);    /* REJECT FP TAPE - UNLOAD IT    */
         LA    R11,REWUNLD                                         0343
*           CALL TERERI;            /* REWIND-UNLOAD THE TAPE VOLUME */
         BAL   @14,TERERI                                          0344
*           R11 = ADDR(SENSCCW);   /* RE-ARM DRIVE FOR INTR AT READY */
         LA    R11,SENSCCW                                         0345
*           CALL TERERI;           /* ARM DRIVE                      */
         BAL   @14,TERERI                                          0346
*           RESPECIFY R11 UNRESTRICTED;                            0347
*           RESPECIFY R1 RESTRICTED;                               0348
*           R1 = AMD019A;           /* OBTAIN FP MESSAGE ADDRESS     */
         LA    R1,19                                               0349
*           CALL TERINR;            /* ISSUE MESSAGE AND OBTAIN A NEW
*                                      TAPE                          */
         BAL   @14,TERINR                                          0350
*           RESPECIFY RETCODE RESTRICTED;                          0351
*           IF RETCODE ^= ZERO THEN                                0352
         LTR   RETCODE,RETCODE                                     0352
         BZ    @RF00352                                            0352
*             DO;                   /* IF TAPE IS NOT MOUNTED        */
*               RESPECIFY RETCODE UNRESTRICTED;                    0354
*               ERBID = MSGFP;      /* SET UP FILE PROTECTED MSG ID  */
         MVI   ERBID(CCTREG),X'0D'                                 0355
*               GO TO TERMEXIT;     /* TERMINATE FUNCTION            */
         B     TERMEXIT                                            0356
*             END;                                                 0357
*           GO TO NEWTAPEM;         /* NEW TAPE MOUNTED-CHECK IT OUT */
         B     NEWTAPEM                                            0358
*         END;                      /* END OF COMMAND REJECT       0359
*                                      PROCESSING                    */
*                                                                  0359
*   /*****************************************************************/
*   /*                                                               */
*   /* OVERRUN IS THE NEXT ERROR CONDITION TO BE TESTED. OVERRUN IS  */
*   /* INDICATED BY SENSE 0400                                       */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0360
*/*TOVER: D (YES,,NO,TLPT) OVERRUN ?                                 */
*/* P (,ACTION7) CC=05 FOR ERBID                                     */
*       IF SENOR = ON THEN                                         0360
@RF00335 TM    SENOR(IODBREG),B'00000100'                          0360
         BNO   @RF00360                                            0360
*         DO;                       /* IF OVERRUN HANDLE IN THIS   0361
*                                      SECTION                       */
*           ERBPID = MSGOR;         /* SET UP OVERRUN MESSAGE      0362
*                                      IDENTIFIER                    */
         MVI   ERBPID,X'05'                                        0362
*           GO TO ACTION7;          /* PERFORM COMMON ACTION 7 RETRY
*                                      OPERATION                     */
         B     ACTION7                                             0363
*         END;                      /* END OF OVERRUN PROCESSING   0364
*                                      SECTION                       */
*                                                                  0364
*   /*****************************************************************/
*   /*                                                               */
*   /* THE NEXT CHECK IS FOR LOAD POINT. SENSE 0008.                 */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0365
*/*TLPT: D (YES,,NO,TDC) LOAD POINT ?                                */
*/* P (,TERMEXIT) MESSAGE ID = 34                                    */
*       IF SENLP = ON THEN                                         0365
@RF00360 TM    SENLP(IODBREG),B'00001000'                          0365
         BNO   @RF00365                                            0365
*         DO;                       /* IF LOAD POINT                 */
*           IF IODBREG = ADDR(IODBWORK) THEN /* LP ON WORKFILE       */
         L     @10,@CA01085                                        0367
         CR    IODBREG,@10                                         0367
         BNE   @RF00367                                            0367
*             IODBTERM = ON;        /* TERMINATE ALL I/O TO WORK FILE*/
         OI    IODBTERM(IODBREG),B'10000000'                       0368
*           ERBID = MSGLP;          /* SET UP TERMINAL MSG IDENTIFIER*/
@RF00367 MVI   ERBID(CCTREG),X'22'                                 0369
*           GO TO TERMEXIT;         /* TERMINATE REQUEST             */
         B     TERMEXIT                                            0370
*         END;                                                     0371
*                                                                  0372
*   /*****************************************************************/
*   /*                                                               */
*   /* DATA CHECK IS HANDLED NEXT. THIS IS INDICATED BY SENSE 0800   */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0372
*/*TDC: D (YES,,NO,CDC) DATA CK ?                                    */
*/* P BACK UP TO FAILING CCW                                         */
*/* D (YES,,NO,NXTCMD) READ CMD ?                                    */
*/* S TERERB:ERBTPE, CC=04, PCT=05, SCT=0                            */
*/* N (,REPRO) REPOSITION TAPE AND RETRY I/O OPERATION               */
*/*NXTCMD: D (YES,,NO,WTM) WRITE CMD ?                               */
*/*RETRY15: S TERERB:ERBTPE, CC=04, PCT=15, SCT=0                    */
*/* P (,REPEATOP) SET UP BSR, ERG, MODESET, TIC TO IODBCSW - 8       */
*/*WTM: D (YES,RETRY15,NO,) WTM CMD ?                                */
*/* D (NO,UNKCMD,YES,) ERG CMD ?                                     */
*/* S TERERB:CTERBTPE, CC=04, PCT=03, SCT=00                         */
*/* N (,REPEATOP) RETRY THE I/O OPERATION                            */
*/*UNKCMD: P (,TERMEXIT) NO RETRIES POSSIBLE                         */
*       IF SENDC = ON THEN                                         0372
@RF00365 TM    SENDC(IODBREG),B'00001000'                          0372
         BNO   @RF00372                                            0372
*         DO;                       /* IF DATA CHECK MUST HANDLE     */
*           IODBCAW = CCWREG;       /* CCW TO RESTART                */
         ST    CCWREG,IODBCAW(,IODBREG)                            0374
*           RESPECIFY R1 RESTRICTED;                               0375
*           R1 = ADDR(ERBPARM);     /* SET UP COMMON FIELDS OF DATA
*                                      CHECK ERB PROCESSING          */
         LA    R1,ERBPARM                                          0376
*           ERBPID = MSGDC;         /* SET UP DATA CHECK ID          */
         MVI   ERBPID,X'04'                                        0377
*           ERBSCT = ZERO;          /* NO SECONDARY RETRY COUNTERS   */
         MVI   ERBSCT,X'00'                                        0378
*           IF CCWCMD = READCMD THEN                               0379
         CLC   CCWCMD(1,CCWREG),READCMD                            0379
         BNE   @RF00379                                            0379
*             DO;                   /* IF FAILURE ON A READ          */
*               ERBPCT = FOUR;      /* 4 RETRIES                     */
         MVI   ERBPCT,X'04'                                        0381
*               CALL TERERBX;       /* SET UP ERB FOR RETRY        0382
*                                      OPERATIONS                    */
         BAL   @14,TERERBX                                         0382
*               GO TO REPRO;        /* REPOSITION TAPE AND RETRY   0383
*                                      OPERATION                     */
         B     REPRO                                               0383
*             END;                  /* END OF READ CMD PROCESSING    */
*           IF CCWCMD = WRITECMD × CCWCMD = WTMCMD THEN            0385
@RF00379 CLI   CCWCMD(CCWREG),1                                    0385
         BE    @RT00385                                            0385
         CLI   CCWCMD(CCWREG),31                                   0385
         BNE   @RF00385                                            0385
@RT00385 DS    0H                                                  0386
*             DO;                   /* FOR WRITE CMDS                */
*               ERBPCT = FIFTEEN;   /* SET UP RETRY COUNTER          */
         MVI   ERBPCT,X'0F'                                        0387
*               CALL TERERBX;       /* UPDATE ERB STATUS             */
         BAL   @14,TERERBX                                         0388
*               TICTLADR = IODBCAW; /* SET UP TIC ADDRESS            */
         MVC   TICTLADR(3),IODBCAW+1(IODBREG)                      0389
*               IODBCAW = ADDR(REPOSTAP); /* REPOSITION AND RETRY I/O
*                                      OPERATION                     */
         LA    @10,REPOSTAP                                        0390
         ST    @10,IODBCAW(,IODBREG)                               0390
*               GO TO REPEATOP;     /* RETRY I/O OPERATION           */
         B     REPEATOP                                            0391
*             END;                                                 0392
*           IF CCWCMD = ERGCMD THEN                                0393
@RF00385 CLI   CCWCMD(CCWREG),23                                   0393
         BNE   @RF00393                                            0393
*             DO;                   /* IF ERG SET UP TO REPEATOP     */
*               ERBPCT = THREE;     /* 3 RETRIES                     */
         MVI   ERBPCT,X'03'                                        0395
*               CALL TERERBX;       /* UPDATE ERB                    */
         BAL   @14,TERERBX                                         0396
*               GO TO REPEATOP;     /* RETRY I/O OPERATION           */
         B     REPEATOP                                            0397
*             END;                                                 0398
*           ERBID = MSGDC;          /* UNKNOWN COMMAND - RECOVERY  0399
*                                      IMPOSSIBLE                    */
@RF00393 MVI   ERBID(CCTREG),X'04'                                 0399
*           GO TO TERMEXIT;         /* TERMINATE RECOVERY OPERATIONS */
         B     TERMEXIT                                            0400
*           RESPECIFY R1 UNRESTRICTED;                             0401
*         END;                      /* END OF DATA CHECK RECOVERY  0402
*                                      OPERATIONS                    */
*     END;                          /* END OF FIRST PASS UNIT CHECK
*                                      PROCESSING                    */
*                                                                  0403
@RF00372 DS    0H                                                  0404
*   /*****************************************************************/
*   /*                                                               */
*   /* NEXT WE PROCESS CHANNEL DATA CHECKS. STATUS IS 0008           */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0404
*/*CDC: D (YES,,NO,TUCK2) CHANNEL DATA CK ?                          */
*/* P (,ACTION7) SET UP CC=25 FOR CHAN DATA CK                       */
*   IF CSWCDC = ON THEN                                            0404
@RF00265 TM    CSWCDC+24(IODBREG),B'00001000'                      0404
         BNO   @RF00404                                            0404
*     DO;                           /* FOR CHANNEL DATA CHECK        */
*       ERBPID = MSGCDC;            /* SET UP CHANNEL DATA CHECK   0406
*                                      CONDITION                     */
         MVI   ERBPID,X'19'                                        0406
*       GO TO ACTION7;              /* PERFORM COMMON ACTION         */
         B     ACTION7                                             0407
*     END;                          /* ENDS CHANNEL DATA CHECK     0408
*                                      PROCESSING                    */
*                                                                  0408
*   /*****************************************************************/
*   /*                                                               */
*   /* AGAIN, UNIT CHECK CONDITIONS ARE TO BE CHECKED. THE SENSE WAS */
*   /* PREVIOUSLY ISSUED. CHECKING CONTINUES USING IODBSENS          */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0409
*/*TUCK2: D (YES,TUCKCONT,NO,TCC) UNIT CK ?                          */
*   IF CSWUC = ON THEN                                             0409
@RF00404 TM    CSWUC+24(IODBREG),B'00000010'                       0409
         BNO   @RF00409                                            0409
*     DO;                           /* CONTINUE CHECKS IF UC         */
*                                                                  0410
*   /*****************************************************************/
*   /*                                                               */
*   /* DATA CONVERTER CHECK. THIS IS DETERMINED BY SENSE 0100        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0411
*/*TUCKCONT: D (YES,,NO,NOTCP) DATA CONVERTER CK ?                   */
*/* P (,TERMEXIT) MESSAGE ID = 35                                    */
*       IF SENCC = ON THEN                                         0411
         TM    SENCC(IODBREG),B'00000001'                          0411
         BNO   @RF00411                                            0411
*         DO;                       /* IF DATA CONVERTER CHECK       */
*           ERBID = MSGDCC;         /* SET UP TERMINAL MESSAGE ID    */
         MVI   ERBID(CCTREG),X'23'                                 0413
*           GO TO TERMEXIT;         /* TERMINATE RECOVERY FUNCTION   */
         B     TERMEXIT                                            0414
*         END;                                                     0415
*                                                                  0415
*   /*****************************************************************/
*   /*                                                               */
*   /* NEXT WE CHECK FOR NOT CAPABLE WHICH IS INDICATED BY SENSE 0001*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0416
*/*NOTCP: D (YES,,NO,PEID) NOT CAPABLE ?                             */
*/* P (,TERMEXIT) MESSAGE ID = 36                                    */
*       IF SENNC = ON THEN                                         0416
@RF00411 TM    SENNC(IODBREG),B'00000001'                          0416
         BNO   @RF00416                                            0416
*         DO;                       /* TAPE UNIT NOT CAPABLE OF    0417
*                                      COMMAND                       */
*           ERBID = MSGNC;          /* MESSAGE ID SET UP             */
         MVI   ERBID(CCTREG),X'24'                                 0418
*           GO TO TERMEXIT;         /* COMMAND CAN NOT BE EXECUTED -
*                                      TERMINATE RECOVERY            */
         B     TERMEXIT                                            0419
*         END;                                                     0420
*                                                                  0421
*   /*****************************************************************/
*   /*                                                               */
*   /* PE ID BURST CHECK IS NEXT. THIS IS FOR 3400 SERIES TAPES ONLY */
*   /* SENSE DATA IS 000000000010                                    */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0421
*/*PEID: D (YES,,NO,TCC) PE ID BURST CK ?                            */
*/* P OBTAIN LAST FAILING CCW                                        */
*/* S TERERB:ERBTPE, CC=37, PCT=15, SCT=0                            */
*/* D (YES,,NO,PEIDWTM) WRITE CMD ?                                  */
*/* N (,REPRO) REPOSITION AND RETRY I/O OPERATION                    */
*/*PEIDWTM: D (YES,,NO,PEIDUKN) WTM CMD ?                            */
*/* N (,REPEATOP) RETRY I/O OPERATION                                */
*/*PEIDUKN: P (,TERMEXIT) MESSAGE ID = 37                            */
*       IF SENPEID = ON THEN                                       0421
@RF00416 TM    SENPEID(IODBREG),B'00010000'                        0421
         BNO   @RF00421                                            0421
*         DO;                       /* IF PEID BURST CHECK           */
*           IODBCAW = CCWREG;       /* SET UP RETRY CCW              */
         ST    CCWREG,IODBCAW(,IODBREG)                            0423
*           RESPECIFY R1 RESTRICTED;                               0424
*           R1 = ADDR(ERBPARM);     /* SET UP TO ERB BLOCK FOR RETRY */
         LA    R1,ERBPARM                                          0425
*           ERBPID = MSGPEID;       /* SET UP COMMON SECTIONS OF ERB
*                                      - ID                          */
         MVI   ERBPID,X'25'                                        0426
*           ERBSCT = ZERO;          /* SECONDARY RETRY COUNTER       */
         MVI   ERBSCT,X'00'                                        0427
*           ERBPCT = FIFTEEN;       /* 15 RETRIES                    */
         MVI   ERBPCT,X'0F'                                        0428
*           CALL TERERBX;           /* SET UP ERB PROPERLY           */
         BAL   @14,TERERBX                                         0429
*           IF CCWCMD = WRITECMD THEN                              0430
         CLI   CCWCMD(CCWREG),1                                    0430
         BE    @RT00430                                            0430
*             GO TO REPRO;          /* REPOSITION AND RETRY I/O      */
*           RESPECIFY R1 UNRESTRICTED;                             0432
*           IF CCWCMD = WTMCMD THEN                                0433
         CLI   CCWCMD(CCWREG),31                                   0433
         BE    @RT00433                                            0433
*             GO TO REPEATOP;       /* REPEAT OPERATION              */
*           ERBID = MSGPEID;        /* SET MESSAGE ID                */
         MVI   ERBID(CCTREG),X'25'                                 0435
*           GO TO TERMEXIT;         /* UNKNOWN COMMAND - RETRY NOT 0436
*                                      POSSIBLE                      */
         B     TERMEXIT                                            0436
*         END;                      /* END OF PEID BURST CHECK CODE  */
*                                                                  0438
*   /*****************************************************************/
*   /*                                                               */
*   /* IF UNIT CHECK IS STILL ON THIS IS AN UNKNOWN ERROR CONDITION. */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0438
*/* P (,TERMEXIT) ERBID = MSGUNK UNKNOWN ERROR CONDITION             */
*       ERBID = MSGUNK;             /* SET UP UNKNOWN ERROR        0438
*                                      IDENTIFIER                    */
@RF00421 MVI   ERBID(CCTREG),X'1D'                                 0438
*       GO TO TERMEXIT;             /* EXIT WITHOUT RECOVERY         */
         B     TERMEXIT                                            0439
*     END;                                                         0440
*                                                                  0440
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS SECTION CHECKS FOR A CHAINING CHECK CONDITION. STATUS IS */
*   /* 0001                                                          */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0441
*/*TCC: D (YES,,NO,TIL) CHAINING CK ?                                */
*/* P SET UP CC=28 FOR CHAINING CK                                   */
*   IF CSWCHC = ON THEN                                            0441
@RF00409 TM    CSWCHC+24(IODBREG),B'00000001'                      0441
         BNO   @RF00441                                            0441
*     DO;                           /* IF CHAINING CHECK CONDITION   */
*       ERBPID = MSGCC;             /* SET UP CHAINING CHECK       0443
*                                      IDENTIFIER                    */
         MVI   ERBPID,X'1C'                                        0443
*       RESPECIFY R1 RESTRICTED;                                   0444
*                                                                  0444
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS IS COMMON ACTION 7 RETRY/REPEAT OPERATION PROCESSING     */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0445
*/*ACTION7: S TERERB:ERBTAPE, PCT=5, SCT=0                           */
*/* D (YES,REPRO,NO,REPEATOP) READ OR WRITE CMD ?                    */
*                                                                  0445
*ACTION7:                                                          0445
*       R1 = ADDR(ERBPARM);         /* SET UP ERB PARAMETER LIST     */
ACTION7  LA    R1,ERBPARM                                          0445
*       ERBSCT = ZERO;              /* NO SECONDARY RETRIES          */
         MVI   ERBSCT,X'00'                                        0446
*       ERBPCT = FIVE;              /* 5 PRIMARY RETRIES             */
         MVI   ERBPCT,X'05'                                        0447
*       CALL TERERBX;               /* UPDATE ERB                    */
         BAL   @14,TERERBX                                         0448
*       RESPECIFY R1 UNRESTRICTED;                                 0449
*       IODBCAW = CCWREG;           /* SET UP FOR REPOSITION RETRY 0450
*                                      OPERAT                        */
         ST    CCWREG,IODBCAW(,IODBREG)                            0450
*       IF CCWCMD = WRITECMD × CCWCMD = READCMD THEN               0451
         CLI   CCWCMD(CCWREG),1                                    0451
         BE    @RT00451                                            0451
         CLC   CCWCMD(1,CCWREG),READCMD                            0451
         BE    @RT00451                                            0451
*         GO TO REPRO;              /* IF READ OR WRITE COMMAND THEN
*                                      REPOSITION TAPE BEFORE      0452
*                                      PERFORMING RETRIES            */
*       GO TO REPEATOP;             /* RETRY I/O OPERATION           */
         B     REPEATOP                                            0453
*     END;                          /* END CHAINING CHECK AND COMMON
*                                      ACTION 7 PROCESSING           */
*                                                                  0454
*   /*****************************************************************/
*   /*                                                               */
*   /* CHECK FOR PROGRAM CHECK ERROR. STATUS IS 0020                 */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0455
*/*TPCK: D (YES,,NO,TPROTCK) PROGRAM CK ?                            */
*/* P (,TERMEXIT) MESSAGE ID = 23                                    */
*   IF CSWPGC = ON THEN                                            0455
@RF00441 TM    CSWPGC+24(IODBREG),B'00100000'                      0455
         BNO   @RF00455                                            0455
*     DO;                           /* PROGRAM CHECK                 */
*       ERBID = MSGPCK;             /* CHANNEL PROGRAM CHECK MESSAGE
*                                      ID                            */
         MVI   ERBID(CCTREG),X'17'                                 0457
*       GO TO TERMEXIT;             /* NO RECOVERY FOR PGM CHECK     */
         B     TERMEXIT                                            0458
*     END;                                                         0459
*                                                                  0459
*   /*****************************************************************/
*   /*                                                               */
*   /* CHECK FOR PROTECTION CHECK ERROR. STATUS IS 0010              */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0460
*/*TPROTCK: D (YES,,NO,TUE) PROTECTION CK ?                          */
*/* P (,TERMEXIT) MESSAGE ID = 24                                    */
*   IF CSWPTC = ON THEN                                            0460
@RF00455 TM    CSWPTC+24(IODBREG),B'00010000'                      0460
         BNO   @RF00460                                            0460
*     DO;                           /* CHANNEL PROTECTION CHECK      */
*       ERBID = MSGPTK;             /* SET UP MESSAGE ID             */
         MVI   ERBID(CCTREG),X'18'                                 0462
*       GO TO TERMEXIT;             /* NO RETRIES                    */
         B     TERMEXIT                                            0463
*     END;                                                         0464
*                                                                  0465
*   /*****************************************************************/
*   /*                                                               */
*   /* CHECK FOR INCORRECT LENGTH ERROR. STATUS IS 0040              */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0465
*/*TIL: D (YES,,NO,TPCK) INCORRECT LENGTH ?                          */
*/* P (,TERMEXIT) MESSAGE ID = 22                                    */
*   IF CSWIL = ON THEN                                             0465
@RF00460 TM    CSWIL+24(IODBREG),B'01000000'                       0465
         BNO   @RF00465                                            0465
*     DO;                           /* INCORRECT LENGTH CONDITION    */
*       ERBID = MSGIL;              /* SET UP MSG ID FOR INCORRECT 0467
*                                      LENGTH                        */
         MVI   ERBID(CCTREG),X'16'                                 0467
*       GO TO TERMEXIT;             /* NO RETIRES                    */
         B     TERMEXIT                                            0468
*     END;                                                         0469
*                                                                  0470
*   /*****************************************************************/
*   /*                                                               */
*   /* NEXT WE HANDLE UNIT EXECPTION. THIS CONDITION IS CAUSED BY END*/
*   /* OF REEL ON THE TAPE VOLUME(REACHING THE REFLECTOR ON THE BACK */
*   /* SIDE OF THE TAPE). STATUS IS 0100.                            */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0470
*/* TUE: D (YES,UNITEX,NO,)UNIT EXCEPTION ?                          */
*/*UNITEX: D (YES,RC0,NO,) ON BSR ?                                  */
*/* D (YES,RC0,NO,) ON WORK FILE                                     */
*/* L TERWTM: ISSUE WTM, WTM, RUN CCW CHAIN                          */
*/* P SET UP TO ISSUE EOR MSG                                        */
*/* L AMDSACON:SVC 2 ISSUE EOR MSG                                   */
*/* S TERINR:OBTAIN A NEW TAPE                                       */
*/* D (YES,,NO,EORWAIT) NEW TAPE MOUNTED ?                           */
*/* D (YES,,NO,EORCHAIN) CCW CHAIN TO CONTINUE ?                     */
*/* P (,NEWTAPEM) UPDATE IODBCAW TO CONTINUE CCW CHAIN               */
*/*EORCHAIN: P (,NEWTAPEM) EORCHAIN = 1                              */
*/*EORWAIT: P (,TERMEXIT) MESSAGE ID = 20                            */
*   IF CSWUE = ON THEN                                             0470
@RF00465 TM    CSWUE+24(IODBREG),B'00000001'                       0470
         BNO   @RF00470                                            0470
*     DO;                           /* HANDLE UNIT EXCEPTION AS EOR  */
*       IF IODBREG = ADDR(IODBWORK) /* IGNORE UE ON TAPE WORKFILE    */
*             × CCWCMD = BSRCMD THEN                               0472
         L     @10,@CA01085                                        0472
         CR    IODBREG,@10                                         0472
         BE    @RT00472                                            0472
         CLI   CCWCMD(CCWREG),39                                   0472
         BE    @RT00472                                            0472
*         GO TO RC0;                /* IF ON BSR-IGNORE AS IN ERROR
*                                      RECOVERY.THIS OCCURS WHEN A 0473
*                                      BSR IS ISSUED AND A TAPE MARK
*                                      IS DETECTED DURING EXECUTION
*                                      OF THE BSR COMMAND.           */
*       RUNSW = OFF;                /* FULL FUNCTION WANTED          */
         NI    RUNSW,B'01111111'                                   0474
*       CALL TERWTM;                /* WRITE TAPE MARK AND UNLOAD  0475
*                                      TAPE                          */
         BAL   @14,TERWTM                                          0475
*       RESPECIFY R1 RESTRICTED;                                   0476
*       R1 = AMD004A;               /* SET ERBID                     */
         LA    R1,4                                                0477
*       CALL TERINR;                /* ISSUE EOR                     */
         BAL   @14,TERINR                                          0478
*       RESPECIFY RETCODE RESTRICTED;                              0479
*       IF RETCODE ^= ZERO THEN                                    0480
         LTR   RETCODE,RETCODE                                     0480
         BZ    @RF00480                                            0480
*         DO;                       /* IF NEW TAPE NOT OBTAINED      */
*           RESPECIFY RETCODE UNRESTRICTED;                        0482
*           ERBID = MSGUE;          /* SET UP MSG ID                 */
         MVI   ERBID(CCTREG),X'14'                                 0483
*           GO TO TERMEXIT;         /* TERMINATE RECOVERY            */
         B     TERMEXIT                                            0484
*         END;                                                     0485
*       DO WHILE (CCWCMD ^= TICMD) & (CCWCMD ^= NOPCMD); /* POINT TO
*                                      TIC OR NOP                    */
@RF00480 B     @DE00486                                            0486
@DL00486 DS    0H                                                  0487
*         CCWREG = CCWREG + LENGTH(CCW); /* ADVANCE POINTER          */
         AL    CCWREG,@CF00036                                     0487
*       END;                                                       0488
@DE00486 CLI   CCWCMD(CCWREG),8                                    0488
         BE    @DC00486                                            0488
         CLI   CCWCMD(CCWREG),3                                    0488
         BNE   @DL00486                                            0488
@DC00486 DS    0H                                                  0489
*       IF CCWCMD = NOPCMD THEN                                    0489
         CLI   CCWCMD(CCWREG),3                                    0489
         BNE   @RF00489                                            0489
*         EORCHAIN = ON;            /* INDICATE NO DATA TO WRITE     */
         OI    EORCHAIN,B'10000000'                                0490
*       ELSE                                                       0491
*         IODBCAW = CCWDADDR;       /* SET UP TO NEXT WRITE          */
         B     @RC00489                                            0491
@RF00489 L     @10,CCWDADDR-1(,CCWREG)                             0491
         LA    @10,0(,@10)                                         0491
         ST    @10,IODBCAW(,IODBREG)                               0491
*       GO TO NEWTAPEM;             /* MOUNT A NEW TAPE              */
         B     NEWTAPEM                                            0492
*       RESPECIFY R1 UNRESTRICTED;                                 0493
*     END;                                                         0494
*                                                                  0495
*   /*****************************************************************/
*   /*                                                               */
*   /* NEXT WE HANDLE ATTENTION. THIS CONDITION IS NOTED BY STATUS   */
*   /* 8000.                                                         */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0495
*/* D (YES,,NO,STATM) ATTN ?                                         */
*/* P (,TERMEXIT) MESSAGE ID = 16                                    */
*   IF CSWATTN = ON THEN                                           0495
@RF00470 TM    CSWATTN+24(IODBREG),B'10000000'                     0495
         BNO   @RF00495                                            0495
*     DO;                           /* ATTENTION INTERRUPT           */
*       ERBID = MSGATTN;            /* MSG ID                        */
         MVI   ERBID(CCTREG),X'10'                                 0497
*       GO TO TERMEXIT;             /* NO RETRIES                    */
         B     TERMEXIT                                            0498
*     END;                                                         0499
*                                                                  0499
*   /*****************************************************************/
*   /*                                                               */
*   /* IF DEVICE END IS ON. THIS IS NORMAL. THE CHAIN WAS BROKEN AND */
*   /* CAN NOW BE RESTARTED                                          */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0500
*/*STATM: D (YES,,NO,STATSHR) DEVICE END ?                           */
*/* D (YES,STATSHR,NO,) IODBBCT = 0 ?                                */
*/* D (YES,,NO,STATSHR) BCTCOMP = 0 FOR FIRST BCT                    */
*/*BCTLOOP: D (YES,STRTFND,NO,) BCTNEXT = 0 ?                        */
*/* P (,BCTLOOP) BUMP TO NEXT BCT ENTRY                              */
*/*STRTFND: P OBTAIN STARTING CCW FOR THE LAST BCT                   */
*/* P (,REPEATOP) PLACE CCW IN IODBCAW FOR OUTPUT IODB               */
*   RESPECIFY BCT BASED (IODBBCT);                                 0500
@RF00495 DS    0H                                                  0501
*   IF CSWDE = ON & IODBREG = ADDR(IODBOUT) & IODBBCT ^= ZERO &    0501
*         BCTCOMP = OFF THEN                                       0501
         TM    CSWDE+24(IODBREG),B'00000100'                       0501
         BNO   @RF00501                                            0501
         L     @10,@CA01046                                        0501
         CR    IODBREG,@10                                         0501
         BNE   @RF00501                                            0501
         L     @10,IODBBCT(,IODBREG)                               0501
         LTR   @10,@10                                             0501
         BZ    @RF00501                                            0501
         TM    BCTCOMP(@10),B'10000000'                            0501
         BNZ   @RF00501                                            0501
*     DO;                           /* DETERMINE IF EMPTY BUFFER     */
*       IF CCWCMD = TICMD × CCWCMD = NOPCMD THEN                   0503
         CLI   CCWCMD(CCWREG),8                                    0503
         BE    @RT00503                                            0503
         CLI   CCWCMD(CCWREG),3                                    0503
         BNE   @RF00503                                            0503
@RT00503 DS    0H                                                  0504
*         DO;                       /* IF TIC CMD OR NOP CMD CONTINUE*/
*           IODBCAW = CCWDADDR;     /* SET TO NEXT WRITE CMD         */
         L     @10,CCWDADDR-1(,CCWREG)                             0505
         LA    @10,0(,@10)                                         0505
         ST    @10,IODBCAW(,IODBREG)                               0505
*           GO TO REPEATOP;         /* SIO ON THE CCW CHAIN          */
         B     REPEATOP                                            0506
*         END;                                                     0507
*     END;                                                         0508
@RF00503 DS    0H                                                  0509
*                                                                  0509
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS IS A NORMAL CONDITION CAUSED BY SHARED TAPE SUPPORT. THE */
*   /* STATUS MAY BE STATUS MODIFIER AND BUSY WHICH IMPLIES CONTROL  */
*   /* UNIT BUSY - STATUS DATA 5000 OR CONTROL UNIT END WHICH MEANS  */
*   /* THE DEVICE IS NOW FREE AND READY FOR I/O - STATUS DATA 2000   */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0509
*/*STATSHR: N THIS PATH HANDLES SHARED TAPES                         */
*/* N STATUS MODIFIER, CONTROL UNIT END, AND BUSY                    */
*/*RC0: P (,RESTREGS) RETURN CODE = 0                                */
*                                                                  0509
*RC0:                                                              0509
*   SAVEBACK -> SAVER15 = ZERO;     /* SET UP ZERO RETURN CODE -   0509
*                                      ERROR CONDITION SUCCESSFULLY
*                                      CORRECTED                     */
@RF00501 DS    0H                                                  0509
RC0      L     @10,SAVEBACK(,R13)                                  0509
         SLR   @04,@04                                             0509
         ST    @04,SAVER15(,@10)                                   0509
*   IODBIOC = OFF;                  /* RESET I/O ERROR INDICATOR     */
         NI    IODBIOC(IODBREG),B'11101111'                        0510
*   GO TO RESTREGS;                 /* RETURN TO CALLER              */
         B     RESTREGS                                            0511
*                                                                  0512
*   /*****************************************************************/
*   /*                                                               */
*   /* TERMINATION ROUTINE                                           */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0512
*/*TERMEXIT: S TERERM:ISSUE MESSAGE                                  */
*/* P IODBTERM = 1  IF TERMINAL ERROR                                */
*/* P IODBIOC = 1                                                    */
*/* D (YES,,NO,TRC4) OUTPUT IODB ?                                   */
*/* D (YES,NEWTAPE,NO,) CAN NEW TAPE BE OBTAINED ?                   */
*/* D (YES,,NO,TRC4) TERMINAL ERROR?                                 */
*/* S AMDSACON: ISSUE MESSAGE AMD031I                                */
*/*PTERM: P IODBPTRM = 1                                             */
*/* R AMDSAAUD: SVC 13                                               */
*/*TRC4: P RETURN CODE = 4                                           */
*/*RESTREGS: P CTERBTPE = 0                                          */
*/* P RESTORE CALLER'S REGISTERS                                     */
*/* R RETURN TO CALLER                                               */
*                                                                  0512
*TERMEXIT:                                                         0512
*   RESPECIFY R1 RESTRICTED;                                       0512
TERMEXIT DS    0H                                                  0513
*   R1 = ERBID;                     /* SET UP INPUT MESSAGE        0513
*                                      IDENTIFIER                    */
         SLR   R1,R1                                               0513
         IC    R1,ERBID(,CCTREG)                                   0513
*   CALL TERERM;                    /* ISSUE I/O ERROR MESSAGES      */
         BAL   @14,TERERM                                          0514
*   RESPECIFY R1 UNRESTRICTED;                                     0515
*   IF CSWCDC = ON × CSWCCC = ON × CSWICC = ON × CSWCHC = ON THEN /*
*                                      TERMINAL ERROR                */
         TM    CSWCDC+24(IODBREG),B'00001111'                      0516
         BZ    @RF00516                                            0516
*     IODBTERM = ON;                /* YES--SO INDICATE              */
         OI    IODBTERM(IODBREG),B'10000000'                       0517
*   IODBIOC = ON;                   /* INDICATE AN I/O ERROR OCCURRED*/
@RF00516 OI    IODBIOC(IODBREG),B'00010000'                        0518
*   IF IODBREG = ADDR(IODBOUT) THEN                                0519
         L     @10,@CA01046                                        0519
         CR    IODBREG,@10                                         0519
         BNE   @RF00519                                            0519
*     DO;                                                          0520
*       MSGADDR =MSGTAB(ERBID + 1); /* OBTAIN MSG BLOCK              */
         SLR   @10,@10                                             0521
         IC    @10,ERBID(,CCTREG)                                  0521
         SLA   @10,2                                               0521
         L     @04,@CA00981                                        0521
         L     MSGADDR,MSGTAB-MSGTAB(@10,@04)                      0521
*       IF MSGTAPE = ON THEN                                       0522
         TM    MSGTAPE(MSGADDR),B'00100000'                        0522
         BO    @RT00522                                            0522
*         GO TO NEWTAPE;            /* IF NEW TAPE POSSIBLE - OBTAIN */
*       RESPECIFY R1 RESTRICTED;    /* RESTRICT REG                  */
*       R1 = AMD031I;               /* SET MESSAGE ID                */
         LA    R1,31                                               0525
*       SVC(CONSVC);                /* ISSUE MESSAGE                 */
         SVC   3                                                   0526
*       RESPECIFY R1 UNRESTRICTED;  /* RELEASE REG                   */
*       CTWAIT = TERWAIT;           /* SET PERMANENT ERROR WAIT CODE */
*                                                                  0528
         MVI   CTWAIT(CCTREG),X'30'                                0528
*PTERM:                                                            0529
*       IODBPTRM = ON;              /* PERMANENT ERROR - KILL VIRTUAL
*                                      DUMP                          */
PTERM    DS    0H                                                  0530
*       IODBTERM = ON;              /* CATASTROPHIC DEVICE ERRORS    */
         OI    IODBPTRM(IODBREG),B'11000000'                       0530
*       SVC (AUDSVC);               /* TERMINATE                     */
         SVC   13                                                  0531
*     END;                                                         0532
*   SAVEBACK -> SAVER15 = 4;        /* SET 4 RETURN CODE             */
@RF00519 L     @10,SAVEBACK(,R13)                                  0533
         MVC   SAVER15(4,@10),@CF00044                             0533
*   IF IODBBCT ^= ZERO THEN         /* IS THERE A BCT                */
         L     @10,IODBBCT(,IODBREG)                               0534
         LTR   @10,@10                                             0534
         BZ    @RF00534                                            0534
*     DO;                                                          0535
*       BCTCOMP = ON;               /* THEN TURN ON BCT COMPLETION 0536
*                                      FLAG                          */
*       BCTIOERR = ON;              /* COMPLETED WITH ERROR          */
         OI    BCTCOMP(@10),B'10100000'                            0537
*     END;                                                         0538
*                                                                  0538
*RESTREGS:                                                         0539
*   CTERBTPE = ZERO;                /* ZERO ERB FOR LATER USE        */
@RF00534 DS    0H                                                  0539
RESTREGS SLR   @10,@10                                             0539
         ST    @10,CTERBTPE(,CCTREG)                               0539
*   RETURN;                         /* RETURN TO CALLER              */
@EL00001 L     @13,4(,@13)                                         0540
@EF00001 DS    0H                                                  0540
@ER00001 LM    @14,@12,12(@13)                                     0540
         BR    @14                                                 0540
*                                                                  0541
*   /*****************************************************************/
*   /*                                                               */
*   /* SET UP TO BACKSPACE RECORD BEFORE RETRY OPERATION             */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0541
*/*REPRO: D (YES,REPEATOP,NO,) IODBCSW CCW POINT TO BSR CMD ?        */
*/* P CHAIN BSR TIC TO FAILING CMD WHICH HAS DATA CHAIN ON           */
*/* P UPDATE IODBCAW WITH BSR TIC CMD                                */
*                                                                  0541
*REPRO:                                                            0541
*   RESPECIFY CCW BASED (IODBCAW);                                 0541
REPRO    DS    0H                                                  0542
*   CCWPCI = OFF;                   /* INSURE PCI OFF                */
         L     @10,IODBCAW(,IODBREG)                               0542
         NI    CCWPCI(@10),B'11110111'                             0542
*   IF CCWCMD ^= BSRCMD THEN                                       0543
         CLI   CCWCMD(@10),39                                      0543
         BE    @RF00543                                            0543
*     DO;                           /* IF AT BSR DO NOT LOOP         */
*       REPOTADR = IODBCAW;         /* SET UP TIC CTL ADDRESS        */
         STCM  @10,7,REPOTADR                                      0545
*       IODBCAW = ADDR(REPOSPRM);   /* SET UP BSR, TIC,CCW CHAIN     */
         LA    @10,REPOSPRM                                        0546
         ST    @10,IODBCAW(,IODBREG)                               0546
*     END;                                                         0547
*/*  REPEATOP WILL REPEAT THE I/O OPERATION STARTING WITH IODBCAW    */
*/*REPEATOP: S TERERP:ISSUE RETRY I/O OPERATION                      */
*/* D (YES,%BSRCHK,NO,) I/O ERROR ON RETRY ?                         */
*/* P (,RESTREGS) SET UP RETURN CODE OF ZERO                         */
*/*%BSRCHK: D (YES,BSRCK,NO,RETEST) IODBCAW = BSR CMD ?              */
*/*BSRCK: P (,RETEST) SET CCWREG = BSR TIC CMD                       */
*                                                                  0548
*REPEATOP:                                                         0548
*   CCWPCI = OFF;                   /* INSURE PCI OFF                */
@RF00543 DS    0H                                                  0548
REPEATOP L     @10,IODBCAW(,IODBREG)                               0548
         NI    CCWPCI(@10),B'11110111'                             0548
*   RESPECIFY CCW BASED (CCWREG);                                  0549
*   CALL TERERP;                    /* RETRY I/O OPERATION           */
         BAL   @14,TERERP                                          0550
*   RESPECIFY RETCODE RESTRICTED;                                  0551
*   IF RETCODE = ZERO THEN                                         0552
         SLR   @14,@14                                             0552
         CR    RETCODE,@14                                         0552
         BNE   @RF00552                                            0552
*     DO;                                                          0553
*       SAVEBACK -> SAVER15 = 0;    /* SET UP RETURN CODE OF ZERO    */
         L     @10,SAVEBACK(,R13)                                  0554
         ST    @14,SAVER15(,@10)                                   0554
*       GO TO RESTREGS;             /* RETURN TO CALLER              */
         B     RESTREGS                                            0555
*     END;                                                         0556
*   RESPECIFY RETCODE UNRESTRICTED;                                0557
@RF00552 DS    0H                                                  0558
*   IF IODBREG = ADDR(IODBOUT) & IODBCAW = ADDR(REPOSTAP) THEN /* WAS
*                                      CAW CHANGED FOR REPOSITIONING?*/
         L     @10,@CA01046                                        0558
         CR    IODBREG,@10                                         0558
         BNE   @RF00558                                            0558
         LA    @10,REPOSTAP                                        0558
         C     @10,IODBCAW(,IODBREG)                               0558
         BNE   @RF00558                                            0558
*     IODBCAW = TICTLADR;           /* UPDATE CAW TO ORIGINAL CCW    */
         L     @10,TICTLADR-1                                      0559
         LA    @10,0(,@10)                                         0559
         ST    @10,IODBCAW(,IODBREG)                               0559
*   GO TO RETEST;                   /* DETERMINE CAUSE OF ERROR      */
         B     RETEST                                              0560
*                                                                  0561
*   /*****************************************************************/
*   /*                                                               */
*   /* OBTAIN A NEW TAPE FROM THE OPERATOR                           */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0561
*/*NEWTAPE: P SET UP TO ISSUE WTM                                    */
*/* S TERERI:ISSUE WTM CMD                                           */
*/*NLTPE: P SET UP TO ISSUE REWIND UNLOAD                            */
*/* S TERERI:ISSUE REWIND UNLOAD CMD                                 */
*/* S AMDSABIN:SVC 28 CONVERT DDD FOR TAPE MOUNT MSG                 */
*/* S TERINR:GO GET NEW TAPE                                         */
*/* D (YES,,NO,PTERM) NEW TAPE OBTAINED ?                            */
*                                                                  0561
*NEWTAPE:                                                          0561
*   RESPECIFY R1 RESTRICTED;                                       0561
*                                                                  0561
NEWTAPE  DS    0H                                                  0562
*   /*****************************************************************/
*   /*                                                               */
*   /* NOW TELL THE OPERATOR WE WANT A NL TAPE MOUNTED, AND WAIT FOR */
*   /* THE TAPE TO BE MOUNTED. ONCE MOUNTED DETERMINE THAT THE TAPE  */
*   /* IS A NL TAPE, THAT IS THE TAPE IS NOT A STANDARD LABEL TAPE,  */
*   /* ASCII LABEL TAPE, OR WE CAN NOT ASCERTAIN EITHER              */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0562
*   IF IODBREG ^= ADDR(IODBOUT) THEN                               0562
         L     @10,@CA01046                                        0562
         CR    IODBREG,@10                                         0562
         BNE   @RT00562                                            0562
*     GO TO TERMEXIT;               /* ONLY EOR FOR OUTPUT IODB      */
*   RUNSW = OFF;                    /* FULL FUNCTION WANTED          */
         NI    RUNSW,B'01111111'                                   0564
*   RESPECIFY RETCODE RESTRICTED;                                  0565
*   CALL TERWTM;                    /* WRITE TAPE MARK AND UNLOAD  0566
*                                      TAPE                          */
         BAL   @14,TERWTM                                          0566
*   IF RETCODE ^= 0 THEN            /* TAPE MARK WRITTEN             */
         LTR   RETCODE,RETCODE                                     0567
         BNZ   @RT00567                                            0567
*     GO TO PTERM;                  /* NO THEN TERMINATE             */
*   RESPECIFY RETCODE UNRESTRICTED;                                0569
*   RESPECIFY R1 RESTRICTED;                                       0570
*                                                                  0570
*NLTAPE:                                                           0571
*   R1 = ADDR(CVTBLK);              /* SET UP CONVERT PARAMETER LIST
*                                      ADDRESS                       */
NLTAPE   LA    R1,CVTBLK                                           0571
*   CVTBINA = ADDR(IODBDEV);        /* DEVICE ADDRESS TO CONVERT     */
         LA    @10,IODBDEV(,IODBREG)                               0572
         ST    @10,CVTBINA                                         0572
*   CVTEBCA = ADDR(CONVAREA);       /* AREA FOR ANSWER               */
         LA    @10,CONVAREA                                        0573
         ST    @10,CVTEBCA                                         0573
*   CVTINL = TWO;                   /* DEVICE LENGTH IN BYTES        */
         MVC   CVTINL(2),@CH00108                                  0574
*   SVC (BINSVC);                   /* CONVERT DEVICE TO EBCDIC      */
         SVC   28                                                  0575
*   DEV20A = CONVAREA(2:4);         /* MOVE INTO MSG                 */
         L     @10,@CA01077                                        0576
         MVC   DEV20A-DEV20A(3,@10),CONVAREA+1                     0576
*   R1 = AMD020A;                   /* SET UP MSG ID                 */
         LA    R1,20                                               0577
*   CALL TERINR;                    /* GET NEW TAPE                  */
         BAL   @14,TERINR                                          0578
*   RESPECIFY RETCODE RESTRICTED;                                  0579
*   IF RETCODE ^= ZERO THEN         /* NO NEW TAPE MOUNTED           */
         LTR   RETCODE,RETCODE                                     0580
         BNZ   @RT00580                                            0580
*     GO TO PTERM;                  /* TERMINATE VIRTUAL DUMP        */
*   RESPECIFY RETCODE UNRESTRICTED;                                0582
*   RESPECIFY R1 UNRESTRICTED;                                     0583
*                                                                  0584
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS SECTION OF TER OBTAINS A NEW TAPE AND VERIFIES THAT THE  */
*   /* TAPE IS INDEED A NON-LABELLED TAPE                            */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0584
*/*NEWTAPEM: P REWIND TAPE AND READ VOLUME LABEL                     */
*/* S TERERI:READ THE TAPE LABEL                                     */
*/* D (YES,LBLERR,NO,) I/O ERROR READING TAPE LABEL ?                */
*/* D (YES,LBLERR,NO,) STANDARD LABEL TAPE ?                         */
*/* D (YES,LBLERR,NO,) ASCII LABEL ?                                 */
*/* D (YES,,NO,REPEATOP) EORCHAIN = 1 ?                              */
*/* P (,RC0) EORCHAIN = 0                                            */
*/*LBLERR: L AMDSACON:SVC 2 ISSUE LBL ERR MSG                        */
*/* D (YES,,NO,PTERM) MSG ISSUED ?                                   */
*/* L (,NLTPE) TERWTM: WRITE TAPE MARK AND REWIND TAPE               */
*/*AMDSATER: END                                                     */
*                                                                  0584
*NEWTAPEM:                                                         0584
*   RESPECIFY (R11,RETCODE) RESTRICTED;                            0584
NEWTAPEM DS    0H                                                  0585
*   R11 = ADDR(REREAD);             /* SET UP TO READ THE VOLUME   0585
*                                      LABEL                         */
         LA    R11,REREAD                                          0585
*   CALL TERERI;                    /* READ VOLUME LABEL             */
         BAL   @14,TERERI                                          0586
*     RESPECIFY CSW BASED(ADDR(FLCCSW));                    /*@ZA04263*
*  IF RETCODE = ZERO × (RETCODE ^= ZERO & CSWUE = ON) THEN  /*@ZA02779*
         SLR   @14,@14                                             0588
         CR    RETCODE,@14                                         0588
         BE    @RT00588                                            0588
         CR    RETCODE,@14                                         0588
         BE    @RF00588                                            0588
         LA    @14,FLCCSW                                          0588
         TM    CSWUE(@14),B'00000001'                              0588
         BNO   @RF00588                                            0588
@RT00588 DS    0H                                                  0589
*     DO;                           /* IF READ IS OKAY, CHECK THE  0589
*                                      LABEL                         */
*     RESPECIFY CSW BASED(ADDR(IODBCSW));                   /*@ZA04263*
*       RESPECIFY RETCODE UNRESTRICTED;                            0591
*       IF VOLABEL ^= VOL1 & VOLABEL ^= ASCII THEN                 0592
         CLC   VOLABEL(4),VOL1                                     0592
         BE    @RF00592                                            0592
         CLC   VOLABEL(4),ASCII                                    0592
         BE    @RF00592                                            0592
*         DO;                       /* NOT STANDARD OR ASCII LABELLED
*                                      TAPE                          */
*           IF EORCHAIN = OFF THEN                                 0594
         TM    EORCHAIN,B'10000000'                                0594
         BZ    @RT00594                                            0594
*             GO TO REPEATOP;       /* IF I/O TO DO START IT         */
*           EORCHAIN = OFF;         /* RESET NO I/O SWITCH           */
         NI    EORCHAIN,B'01111111'                                0596
*       CSWUE = OFF;                                        /*@ZA04263*
         NI    CSWUE+24(IODBREG),B'11111110'                       0597
*           GO TO RC0;              /* RETURN TO CALLER              */
         B     RC0                                                 0598
*         END;                                                     0599
*     END;                                                         0600
@RF00592 DS    0H                                                  0601
*   RESPECIFY R11 UNRESTRICTED;                                    0601
@RF00588 DS    0H                                                  0602
*   RESPECIFY R1 RESTRICTED;                                       0602
*   VOLABEL = VOLABEL && VOLABEL;   /* ZERO LABEL AREA               */
         XC    VOLABEL(4),VOLABEL                                  0603
*   R1 = AMD002I;                   /* SET UP LBL ERR MSG ID         */
         LA    R1,2                                                0604
*   SVC (CONSVC);                   /* ISSUE LBL ERR MSG             */
         SVC   3                                                   0605
*   RESPECIFY RETCODE RESTRICTED;                                  0606
*   IF RETCODE = ZERO THEN                                         0607
         LTR   RETCODE,RETCODE                                     0607
         BNZ   @RF00607                                            0607
*     DO;                                                          0608
*       RUNSW = ON;                 /* REWIND/UNLOAD ONLY            */
         OI    RUNSW,B'10000000'                                   0609
*       CALL TERWTM;                /* UNLOAD TAPE                   */
         BAL   @14,TERWTM                                          0610
*       GO TO NLTAPE;               /* GO GET NL TAPE                */
         B     NLTAPE                                              0611
*     END;                                                         0612
*   RESPECIFY RETCODE UNRESTRICTED;                                0613
*   GO TO PTERM;                    /* TERMINATE VIRTUAL DUMP        */
         B     PTERM                                               0614
*                                                                  0615
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS ROUTINE WRITES TWO TAPE MARKS (IF RUNSW=OFF) AND         */
*   /* REWIND-UNLOADS THE TAPE FOR THE GIVEN IODB                    */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0615
*/* D (YES,RUNONLY,NO,) IS TAPE ONLY TO BE UNLOADED?                 */
*/*%AGAIN: L TERERI: ISSUE WTM, WTM, RUN CCW CHAIN                   */
*/* D (NO,,YES,%OUT) I/O OKAY?                                       */
*/* D (YES,,NO,%AGAIN) RETRIED 2 TIMES?                              */
*/* L AMDSACON: ISSUE MESSAGE AMD032I                                */
*/* R RETURN CODE 4                                                  */
*/*%OUT: D (YES,%SKIP,NO,) DID TAPE UNLOAD?                          */
*/* L TERERI: ISSUE REWIND UNLOAD CCW                                */
*/*%SKIP: D (YES,,NO,%OUT2) IS UNIT CHECK ON FROM UNLOAD?            */
*/* L TERERI: ISSUE SENSE TO CLEAR UNIT CHECK                        */
*/*%OUT2: R RETURN CODE 0                                            */
*                                                                  0615
*TERWTM:                                                           0615
*   PROC;                                                          0615
TERWTM   STM   @14,@12,@SA00002                                    0615
*   RESPECIFY CSW BASED(ADDR(FLCCSW));                             0616
*   RESPECIFY R11 RESTRICTED;                                      0617
*   IF RUNSW = ON THEN              /* IS CALL ONLY TO REWIND UNLOAD
*                                      TAPE                          */
         TM    RUNSW,B'10000000'                                   0618
         BO    @RT00618                                            0618
*     GO TO RUNONLY;                                               0619
*   R11 = ADDR(EORCCW);             /* SET UP TO WTM,REWIND UNLOAD   */
         LA    R11,EORCCW                                          0620
*   CALL TERERI;                    /* TAKE CARE OF OLD TAPE         */
         BAL   @14,TERERI                                          0621
*   DO I = 2 TO 1 BY -1 WHILE CSWPGC = ON × CSWPTC = ON × CSWCDC = ON
*           × CSWCCC = ON × CSWICC = ON × CSWCHC = ON;             0622
         LA    I,2                                                 0622
@DL00622 LA    @10,FLCCSW                                          0622
         TM    CSWPGC(@10),B'00111111'                             0622
         BZ    @DC00622                                            0622
*     R11 = ADDR(WTMERR);           /* SET UP TO ISSUE WTM, RECOVERY */
         LA    R11,WTMERR                                          0623
*     CALL TERERI;                  /* RETRY TO ISSUE WTM            */
         BAL   @14,TERERI                                          0624
*   END;                                                           0625
         BCTR  I,0                                                 0625
         LTR   I,I                                                 0625
         BP    @DL00622                                            0625
@DC00622 DS    0H                                                  0626
*   CCWTEMP = CSWCADDR - LENGTH(CCW); /* SET POINTER FOR CCW ADDR    */
         LA    @10,FLCCSW                                          0626
         L     CCWTEMP,CSWCADDR-1(,@10)                            0626
         LA    CCWTEMP,0(,CCWTEMP)                                 0626
         SL    CCWTEMP,@CF00036                                    0626
*   IF I = ZERO THEN                                               0627
         LTR   I,I                                                 0627
         BNZ   @RF00627                                            0627
*     DO;                           /* IF RECOVERY IS NOT SUCCESSFUL
*                                      - ISSUE MSG                   */
*       RESPECIFY R1 RESTRICTED;                                   0629
*       R1 = AMD032I;               /* SET UP MESSAGE IDENTIFIER     */
         LA    R1,32                                               0630
*       SVC (CONSVC);               /* ISSUE CONSOLE MESSAGE         */
         SVC   3                                                   0631
*       RESPECIFY R1 UNRESTRICTED;                                 0632
*       RETURN CODE(4);             /* RETURN ERROR                  */
         LA    @15,4                                               0633
         L     @14,@SA00002                                        0633
         LM    @00,@12,@SA00002+8                                  0633
         BR    @14                                                 0633
*     END;                                                         0634
*   IF CCWTEMP -> CCWCMD ^= RWUNLOAD THEN                          0635
@RF00627 CLI   CCWCMD(CCWTEMP),15                                  0635
         BE    @RF00635                                            0635
*     DO;                           /* IF CHAIN BREAKS DUE TO UNIT 0636
*                                      EXCEPTION                     */
*                                                                  0636
*RUNONLY:                                                          0637
*       R11 = ADDR(REWUNLD);        /* RESTART ON REWIND-UNLOAD      */
RUNONLY  LA    R11,REWUNLD                                         0637
*       CALL TERERI;                /* ISSUE I/O                     */
         BAL   @14,TERERI                                          0638
*     END;                                                         0639
*   RESPECIFY R11 UNRESTRICTED;                                    0640
@RF00635 DS    0H                                                  0641
*   IF CSWUC = ON THEN              /* MUST A SENSE BE ISSUED TO   0641
*                                      CLEAR THE CHANNEL             */
         LA    @10,FLCCSW                                          0641
         TM    CSWUC(@10),B'00000010'                              0641
         BNO   @RF00641                                            0641
*     DO;                                                          0642
*       RESPECIFY R11 RESTRICTED;                                  0643
*       R11 = ADDR(SENSCCW);        /* SET ADDR OF SENSE COMMAND     */
         LA    R11,SENSCCW                                         0644
*       CALL TERERI;                /* ISSUE SENSE                   */
         BAL   @14,TERERI                                          0645
*       RESPECIFY R11 UNRESTRICTED;                                0646
*     END;                                                         0647
*   RETURN CODE(0);                 /* RETURN WITH TM WRITTEN AND  0648
*                                      UNLOADED                      */
@RF00641 SLR   @15,@15                                             0648
         L     @14,@SA00002                                        0648
         LM    @00,@12,@SA00002+8                                  0648
         BR    @14                                                 0648
*   RESPECIFY CSW BASED(ADDR(IODBCSW));                            0649
*   END TERWTM;                                                    0650
*                                                                  0651
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS SECTION CONTAINS THE SVC INTERFACE ENTRY POINTS TO THE   */
*   /* SUBROUTINE FUNCTIONS LOCATED IN AMDSATER                      */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0651
*                                                                  0651
*   /*****************************************************************/
*   /*                                                               */
*   /* THE FIRST ENTRY POINT IS FOR SVC ENTRY TO AMDSAERM - THE ERROR*/
*   /* MESSAGE MODULE                                                */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0651
*/*AMDSAERM: E SVC 27 ENTRY                                          */
*/* L CALL TERERM                                                    */
*/* R RETURN TO CALLER                                               */
*   RESPECIFY RETCODE RESTRICTED;                                  0651
*                                                                  0651
*AMDSAERM:                                                         0652
*   ENTRY;                                                         0652
@EP00652 DS    0H                                                  0653
*   CCTREG = CCTADDR;               /* SET UP ADDRESSABILITY TO CCT  */
         L     CCTREG,@CF00727                                     0653
*   CALL TERERM;                    /* USE THE ERM MESSAGE ROUTINE 0654
*                                      FOR PROCESSING                */
         BAL   @14,TERERM                                          0654
*   GO TO COMRET;                   /* USE COMMON RETURN             */
*                                                                  0655
         B     COMRET                                              0655
*   /*****************************************************************/
*   /*                                                               */
*   /* THE NEXT ENTRY IS FOR THE ERROR RECOVERY INTERFACE FUNCTION   */
*   /* WHICH USED DUMPSIO AS A SUBROUTINE TO PERFORM I/O ERROR       */
*   /* RECOVERY FUNCTIONS                                            */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0656
*/*AMDSAERI: ENTRY VIA SVC 23                                        */
*/* L CALL TERERI                                                    */
*/* R RETURN TO CALLER                                               */
*                                                                  0656
*AMDSAERI:                                                         0656
*   ENTRY;                                                         0656
@EP00656 DS    0H                                                  0657
*   CCTREG = CCTADDR;               /* SET UP ADDRESSABILITY TO CCT  */
         L     CCTREG,@CF00727                                     0657
*   CALL TERERI;                    /* USE THE ERI SUBROUTINE IN TER */
         BAL   @14,TERERI                                          0658
*   GO TO COMRET;                   /* USE COMMON RETURN             */
         B     COMRET                                              0659
*                                                                  0660
*   /*****************************************************************/
*   /*                                                               */
*   /* THE NEXT ROUTINE IS THE ERROR RECOVERY PROCESSOR WHICH SAVES  */
*   /* THE STATUS OF I/O AND IS USED TO RETRY ERROR RECOVERY         */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0660
*/*AMDSAERP: E SVC 21 ENTRY                                          */
*/* L CALL TERERP                                                    */
*/* R RETURN TO CALLER                                               */
*                                                                  0660
*AMDSAERP:                                                         0660
*   ENTRY;                                                         0660
@EP00660 DS    0H                                                  0661
*   CCTREG = CCTADDR;               /* SET UP ADDRESSABILITY TO CCT  */
         L     CCTREG,@CF00727                                     0661
*   CALL TERERP;                    /* USE THE ERP SUBROUTINE IN TER */
         BAL   @14,TERERP                                          0662
*   GO TO COMRET;                   /* USE COMMON RETURN             */
*                                                                  0663
         B     COMRET                                              0663
*   /*****************************************************************/
*   /*                                                               */
*   /* NEXT IS THE INTERVENTION REQUIRED INTERFACE ROUTINE - INR     */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0664
*/*AMDSAINR: E SVC 29 ENTRY                                          */
*/* L CALL TERINR                                                    */
*/* R RETURN TO CALLER                                               */
*                                                                  0664
*AMDSAINR:                                                         0664
*   ENTRY;                                                         0664
@EP00664 DS    0H                                                  0665
*   CCTREG = CCTADDR;               /* SET UP ADDRESSABILITY TO CCT  */
         L     CCTREG,@CF00727                                     0665
*   CALL TERINR;                    /* USE THE INTERVENTION REQUIRED
*                                      SUBROUTINE IN TER             */
         BAL   @14,TERINR                                          0666
*   GO TO COMRET;                   /* USE COMMON RETURN             */
*                                                                  0667
         B     COMRET                                              0667
*   /*****************************************************************/
*   /*                                                               */
*   /* FINALLY IS THE ERROR RECOVERY BLOCK PROCESSOR ROUTINE WHICH   */
*   /* USES THE ERB ROUTINE IN TER                                   */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0668
*/*AMDSAERB: E SVC 20 ENTRY                                          */
*/* L CALL TERERB                                                    */
*/* R RETURN TO CALLER                                               */
*                                                                  0668
*AMDSAERB:                                                         0668
*   ENTRY;                                                         0668
@EP00668 DS    0H                                                  0669
*   CCTREG = CCTADDR;               /* SET UP ADDRESSABILITY TO CCT  */
         L     CCTREG,@CF00727                                     0669
*   CALL TERERB;                    /* USE THE ERB ROUTINE           */
*                                                                  0670
         BAL   @14,TERERB                                          0670
*COMRET:                                                           0671
*   RETURN CODE(RETCODE);                                          0671
COMRET   L     @13,4(,@13)                                         0671
         L     @14,12(,@13)                                        0671
         LM    @00,@12,20(@13)                                     0671
         BR    @14                                                 0671
*   RESPECIFY RETCODE UNRESTRICTED;                                0672
*                                                                  0673
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS IS THE ERROR MESSAGE ROUTINE WHICH IS ENTERED BY BOTH    */
*   /* AMDSATER AND AMDSADER. IT IS A SELF SUFFICIENT ROUTINE WHICH  */
*   /* OUTPUTS AN ERROR MESSAGE ON THE CONSOLE                       */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0673
*/*TERERM: E ENTRY                                                   */
*/* P SAVE CALLER'S REGISTERS                                        */
*/*GETMSG: P OBTAIN MESSAGE FROM MSGTAB                              */
*/* D (YES,MOVETXT,NO,) MSG IN TABLE ?                               */
*/* P (,GETMSG) MSG ID = 29                                          */
*/*MOVETXT: P MOVE MSG TEXT INTO COND33I                             */
*                                                                  0673
*TERERM:                                                           0673
*   PROC;                                                          0673
TERERM   STM   @14,@12,@SA00003                                    0673
*   RESPECIFY R1 RESTRICTED;                                       0674
*   GEN;                                                           0675
*   ERBSAVE = ERBS;                 /* SAVE ERB-S WHICH ARE CLEARED
*                                      BY THE CALL TO CON            */
         MVC   ERBSAVE(8),ERBS(CCTREG)                             0676
*   IF R1 > MAXID THEN                                             0677
         C     R1,@CF00867                                         0677
         BNH   @RF00677                                            0677
*     R1 = MSGUNK;                                                 0678
         LA    R1,29                                               0678
*   MSGADDR = MSGTAB(R1 + 1);       /* OBTAIN MSG TEXT               */
@RF00677 LR    @10,R1                                              0679
         SLA   @10,2                                               0679
         L     @04,@CA00981                                        0679
         L     MSGADDR,MSGTAB-MSGTAB(@10,@04)                      0679
*   R1 =ADDR(CVTBLK);               /* SET UP CONVERT PARAMETER LIST */
         LA    R1,CVTBLK                                           0680
*   COND33I = MSGTXT(1:MSGLNGTH);   /* MOVE IN VARIABLE MSG LENGTH   */
         L     @10,@CA01087                                        0681
         MVI   COND33I-COND33I+1(@10),C' '                         0681
         MVC   COND33I-COND33I+2(22,@10),COND33I-COND33I+1(@10)    0681
         SLR   @07,@07                                             0681
         IC    @07,MSGLNGTH(,MSGADDR)                              0681
         BCTR  @07,0                                               0681
         EX    @07,@SM01247                                        0681
*   LNG33I = MSGLNGTH;              /* SET SECONDARY MESSAGE LENGTH  */
*                                                                  0682
         L     @10,@CA01091                                        0682
         MVC   LNG33I-LNG33I(1,@10),MSGLNGTH(MSGADDR)              0682
*   /*****************************************************************/
*   /*                                                               */
*   /* FILL IN THE REMAINDER OF MSG 33I WITH CSW DATA, CMD CODE , AND*/
*   /* DEVICE ADDRESS                                                */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0683
*/* D (YES,CSWOUT,NO,CSWBLNKS) CSW DATA ?                            */
*/*CSWBLNKS: P (,CMDCONV) STATCSW = NONE                             */
*/*CSWOUT: S AMDSABIN:SVC 28 CONVERT CSW TO EBCDIC                   */
*/* P STAT33I = CONVERTED CSW                                        */
*/*CMDCONV: S AMDSABIN:SVC 28 CONVERT COMMAND CODE                   */
*/* P CMD33I = COMMAND CCW AT TIME OF ERROR                          */
*/* S AMDSABIN:SVC 28 CONVERT DEVICE ADDRESS FROM IODBDEV            */
*/* P DEV33I = CONVERTED DEVICE ADDRESS                              */
*/* L AMDSACON: ISSUE SVC 3 TO ISSUE MESSAGE AMD033I                 */
*/* D (YES,,NO,RETURN) MESSAGE ISSUED ?                              */
*   IF MSGSTAT=ON THEN                                             0683
         TM    MSGSTAT(MSGADDR),B'10000000'                        0683
         BNO   @RF00683                                            0683
*     DO;                           /* IF CSW DATA CONVERT CSW TO  0684
*                                      EBCDIC                        */
*       RESPECIFY CSW BASED (ADDR(IODBCSW));                       0685
*       CVTBINA = ADDR(CSWUSTAT);   /* CSW ADDRESS                   */
         LA    @10,CSWUSTAT+24(,IODBREG)                           0686
         ST    @10,CVTBINA                                         0686
*       CVTEBCA = (ADDR(STAT33I));  /* MSG SLOT                      */
         L     @10,@CA01088                                        0687
         ST    @10,CVTEBCA                                         0687
*       CVTINL = TWO;               /* LENGTH OF CSW                 */
         MVC   CVTINL(2),@CH00108                                  0688
*       SVC (BINSVC);               /* CONVERT CSW TO EBCDIC         */
         SVC   28                                                  0689
*     END;                                                         0690
*   ELSE                                                           0691
*     STAT33I = NONE;               /* NO CSW DATA                   */
         B     @RC00683                                            0691
@RF00683 L     @10,@CA01088                                        0691
         MVC   STAT33I-STAT33I(4,@10),NONE                         0691
*   IF CSWCADDR = 0 × CSWCADDR = IODBCAW THEN                      0692
@RC00683 L     @10,CSWCADDR+23(,IODBREG)                           0692
         LA    @10,0(,@10)                                         0692
         LTR   @10,@10                                             0692
         BZ    @RT00692                                            0692
         C     @10,IODBCAW(,IODBREG)                               0692
         BNE   @RF00692                                            0692
@RT00692 DS    0H                                                  0693
*     CVTBINA = IODBCAW;            /* IF CSW CCW IS ZERO OR NOT   0693
*                                      UPDATED ON EXECUTION OF THE 0693
*                                      COMMAND, USE IODBCAW          */
         L     @10,IODBCAW(,IODBREG)                               0693
         ST    @10,CVTBINA                                         0693
*   ELSE                                                           0694
*     CVTBINA = CSWCADDR - LENGTH(CCW); /* USE CSW CCW MINUS 8 FOR 0694
*                                      FAILING CCW ADDRESS           */
         B     @RC00692                                            0694
@RF00692 L     @10,CSWCADDR+23(,IODBREG)                           0694
         LA    @10,0(,@10)                                         0694
         SL    @10,@CF00036                                        0694
         ST    @10,CVTBINA                                         0694
*   IF CVTBINA -> CCWCMD = DATCHAIN THEN /* IS THIS CMD DATA CHIANED */
@RC00692 L     @10,CVTBINA                                         0695
         CLI   CCWCMD(@10),255                                     0695
         BNE   @RF00695                                            0695
*      CVTBINA = CVTBINA - LENGTH(CCW); /* BACK TO BEGINNING CCW     */
         SL    @10,@CF00036                                        0696
         ST    @10,CVTBINA                                         0696
*   CVTEBCA = (ADDR(CMD33I));       /* OUTPUT AREA ADDRESS IN MSG  0697
*                                      TEXT                          */
@RF00695 L     @10,@CA01089                                        0697
         ST    @10,CVTEBCA                                         0697
*   CVTINL = 1;                     /* 1 BYTE CMD CODE               */
         MVC   CVTINL(2),@CH00067                                  0698
*   SVC (BINSVC);                   /* CONVERT CMD CODE              */
         SVC   28                                                  0699
*   CVTBINA = ADDR(IODBDEV);        /* DEVICE ADDRESS TO CONVERT     */
         LA    @10,IODBDEV(,IODBREG)                               0700
         ST    @10,CVTBINA                                         0700
*   CVTEBCA = ADDR(CONVAREA);       /* CONVERT AREA LOCATION         */
         LA    @10,CONVAREA                                        0701
         ST    @10,CVTEBCA                                         0701
*   CVTINL = TWO;                   /* BYTES TO BE CONVERTED         */
         MVC   CVTINL(2),@CH00108                                  0702
*   SVC (BINSVC);                   /* CONVERT DDD                   */
         SVC   28                                                  0703
*   DEV33I = CONVAREA(2:4);         /* MOVE DDD INTO MSG TEXT        */
         L     @10,@CA01090                                        0704
         MVC   DEV33I-DEV33I(3,@10),CONVAREA+1                     0704
*   R1 = AMD033I;                   /* I/O ERROR MESSAGE ID          */
         LA    R1,33                                               0705
*   SVC (CONSVC);                   /* ISSUE MSG AMD033I             */
         SVC   3                                                   0706
*   RESPECIFY RETCODE RESTRICTED;                                  0707
*   IF RETCODE = ZERO THEN                                         0708
         LTR   RETCODE,RETCODE                                     0708
         BNZ   @RF00708                                            0708
*     DO;                           /* MSG OUTPUTTED - CONTINUE      */
*       RESPECIFY RETCODE UNRESTRICTED;                            0710
*                                                                  0710
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS SECTION OUTPUTS THE SENSE DATA FOR MESSAGE AMD034I       */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0711
*/* D (YES,,NO,RETURN) ANY SENSE DATA ?                              */
*/* P CTMSGOUT = 1                                                   */
*/* S AMDSABIN:SVC 28 TO CONVERT SENSE DATA TO EBCDIC                */
*/* P MOVE SENSE DATA INTO SENS34I                                   */
*/* L AMDSACON: SVC 3 TO ISSUE AMD034I                               */
*/*RETURN: P RESTORE CALLER'S REGISTERS                              */
*/* R RETURN TO CALLER                                               */
*/*TERERM: END                                                       */
*       IF MSGSENS = ON & IODBSENS ^= NULL THEN                    0711
         TM    MSGSENS(MSGADDR),B'01000000'                        0711
         BNO   @RF00711                                            0711
         CLC   IODBSENS(24,IODBREG),NULL                           0711
         BE    @RF00711                                            0711
*         DO;                       /* SENSE DATA RO OUTPUT          */
*           CTMSGOUT = ON;          /* DEPENDENT MSG                 */
         OI    CTMSGOUT(CCTREG),B'10000000'                        0713
*           CVTBINA = ADDR(IODBSENS); /* LOCATION OF SENSE DATA      */
         LA    @10,IODBSENS(,IODBREG)                              0714
         ST    @10,CVTBINA                                         0714
*           CVTEBCA = ADDR(SENS34I); /* OUTPUT AREA IN MESSAGE       */
         L     @10,@CA01092                                        0715
         ST    @10,CVTEBCA                                         0715
*           CVTINL = 24;            /* LENGTH OF SENSE DATA          */
         MVC   CVTINL(2),@CH00089                                  0716
*           R1 = ADDR(CVTBLK);      /* CVT PARAMETTER LIST ADDRESS   */
         LA    R1,CVTBLK                                           0717
*           SVC (BINSVC);           /* CONVERT SENSE TO EBCDIC       */
         SVC   28                                                  0718
*           R1 = AMD034I;           /* MSG ID                        */
         LA    R1,34                                               0719
*           SVC (CONSVC);           /* ISSUE SENSE MSG               */
         SVC   3                                                   0720
*         END;                                                     0721
*     END;                                                         0722
@RF00711 DS    0H                                                  0723
*   ERBS = ERBSAVE;                 /* RESTORE ERB-S                 */
@RF00708 MVC   ERBS(8,CCTREG),ERBSAVE                              0723
*   END TERERM;                     /* RETURN                        */
@EL00003 DS    0H                                                  0724
@EF00003 DS    0H                                                  0724
@ER00003 LM    @14,@12,@SA00003                                    0724
         BR    @14                                                 0724
*                                                                  0725
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS SUBROUTINE RETRIES I/O ERRORS AND RESTARTS I/O TO THE    */
*   /* OUTPUT DEVICE. THIS ROUTINE ISSUES ITS OWN TIO AND SIO THEN   */
*   /* WAITS FOR DEVICE END OR PCI                                   */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0725
*/*TERERI: E ERROR RECOVERY MODULE                                   */
*/* P SAVE REGISTERS IN CALLER'S SAVE AREA                           */
*/* L AMDSATAP: SVC 2 ENTER PROPER CPU                               */
*/* D (YES,,NO,ERROR8) ON PROPER CPU ?                               */
*/*TIO1: I TIO FOR IODBDEV                                           */
*/* D (YES,TIO1,NO,) BUSY                                            */
*/* D (YES,SIO,NO,) AVAILABLE                                        */
*/* D (YES,ERROR,NO,) NOT OPERATIONAL                                */
*/* D (YES,TIO1,NO,) CSW STORED - UNIT CHECK ON                      */
*/* D (NO,ERROR,YES,) SENSE BEING ISSUED                             */
*/* SIO: P SET CAW                                                   */
*/* I SIO FOR IODBDEV                                                */
*/* D (YES,TIO1,NO,) BUSY OR NOT OPERATIONAL                         */
*/* D (YES,TIO2,NO,) SIO BEGIN?                                      */
*/* D (YES,TIO1,NO,CHECK) CSW STORED - CSW BUSY                      */
*/* TIO2: I TIO FOR IODBDEV                                          */
*/* D (YES,TIO2,NO,) BUSY                                            */
*/*CHECK: D (YES,,NO,%ERIA) ERROR IN CSW                             */
*/*ERROR: R RETURN CODE 4                                            */
*/*%ERIA: D (YES,,NO,TIO2) DEVICE END OR PCI                         */
*/* R RETURN TO CALLER                                               */
*/*TERERI: END                                                       */
*                                                                  0725
*TERERI:                                                           0725
*   PROC OPTIONS(SAVEAREA);                                        0725
TERERI   STM   @14,@12,12(@13)                                     0725
         ST    @13,@SA00004+4                                      0725
         LA    @14,@SA00004                                        0725
         ST    @14,8(,@13)                                         0725
         LR    @13,@14                                             0725
*   RESPECIFY R11 RESTRICTED;                                      0726
*   SAVECTIO = CTIOTYPE;            /* SAVE FIELD                    */
         MVC   SAVECTIO(1),CTIOTYPE(CCTREG)                        0727
*   CTIOTYPE = ZERO;                /* RESET CTIOTYPE                */
         MVI   CTIOTYPE(CCTREG),X'00'                              0728
*   IF IODBREG = ADDR(IODBDA) THEN                                 0729
         L     @10,@CA01084                                        0729
         CR    IODBREG,@10                                         0729
         BNE   @RF00729                                            0729
*     CTIODA = ON;                  /* IF DA SET DA SWITCH FOR TAP   */
         OI    CTIODA(CCTREG),B'00100000'                          0730
*   ELSE                                                           0731
*     IF IODBREG = ADDR(IODBWORK) THEN                             0731
         B     @RC00729                                            0731
@RF00729 L     @10,@CA01085                                        0731
         CR    IODBREG,@10                                         0731
         BNE   @RF00731                                            0731
*       CTIOWK = ON;                /* IF WORKFILE SET TAP INDICATOR */
         OI    CTIOWK(CCTREG),B'00010000'                          0732
*     ELSE                                                         0733
*       CTIOOUT = ON;               /* IF OUTPUT SET TAP INDICATOR   */
         B     @RC00731                                            0733
@RF00731 OI    CTIOOUT(CCTREG),B'01000000'                         0733
*   SVC (TAPSVC);                   /* GET ON PROPER CPU             */
@RC00731 DS    0H                                                  0734
@RC00729 SVC   2                                                   0734
*   CTIOTYPE = SAVECTIO;            /* RESTORE FIELD                 */
         MVC   CTIOTYPE(1,CCTREG),SAVECTIO                         0735
*   RESPECIFY RETCODE RESTRICTED;                                  0736
*   IF RETCODE ^= ZERO THEN                                        0737
         LTR   RETCODE,RETCODE                                     0737
         BZ    @RF00737                                            0737
*     RETURN CODE(4);               /* NOT ON PROPER CPU - SEND ERROR
*                                      RETURN CODE                   */
         LA    @15,4                                               0738
         L     @13,4(,@13)                                         0738
         L     @14,12(,@13)                                        0738
         LM    @00,@12,20(@13)                                     0738
         BR    @14                                                 0738
*   RESPECIFY RETCODE UNRESTRICTED;                                0739
@RF00737 DS    0H                                                  0740
*   RESPECIFY CSW BASED(ADDR(FLCCSW));                             0740
*   CSW = CSW && CSW;               /* CLEAR CSW                     */
*                                                                  0741
         LA    @10,FLCCSW                                          0741
         XC    CSW(8,@10),CSW(@10)                                 0741
*TIO1:                                                             0742
*   TIO(IODBDEV);                   /* WAIT FOR AVAILABLE            */
TIO1     LH    @10,IODBDEV(,IODBREG)                               0742
         TIO   0(@10)                                              0742
*   BC(2,TIO1);                     /* LOOP IF BUSY                  */
         BC    2,TIO1                                              0743
*   BC(8,SIO1);                     /* OKAY--SIO                     */
         BC    8,SIO1                                              0744
*   BC(1,ERROR);                    /* RETURN ERROR IF NOT         0745
*                                      OPERATIONAL                   */
         BC    1,ERROR                                             0745
*   IF CSWUC = OFF THEN             /* CSW STORED                    */
         LA    @10,FLCCSW                                          0746
         TM    CSWUC(@10),B'00000010'                              0746
         BZ    @RT00746                                            0746
*     GO TO TIO1;                   /* UNLESS UNIT CHECK IS ON, WAIT
*                                      FOR AVAILABLE                 */
*   IF R11 -> CCWCMD ^= SENSCMD THEN /* IS A SENSE BEING ISSUED      */
         CLI   CCWCMD(R11),4                                       0748
         BNE   @RT00748                                            0748
*     GO TO ERROR;                  /* NO--TREAT AS ERROR            */
*                                                                  0749
*SIO1:                                                             0750
*   FLCCAW = R11;                   /* SET CAW                       */
SIO1     ST    R11,FLCCAW                                          0750
*   SIO(IODBDEV);                   /* ISSUE SIO                     */
         LH    @10,IODBDEV(,IODBREG)                               0751
         SIO   0(@10)                                              0751
*   BC(2,TIO1);                     /* BUSY--GO BACK AND WAIT        */
         BC    2,TIO1                                              0752
*   BC(9,TIO2);                     /* SIO WENT--WAIT FOR CSW        */
         BC    9,TIO2                                              0753
*   IF CSWBUSY = ON THEN            /* CSW STORED--BUSY              */
         LA    @10,FLCCSW                                          0754
         TM    CSWBUSY(@10),B'00010000'                            0754
         BO    @RT00754                                            0754
*     GO TO TIO1;                   /* LOOP BACK TO WAIT             */
*   GO TO CHECK;                    /* NOW CHECK STORED CSW          */
*                                                                  0756
         B     CHECK                                               0756
*TIO2:                                                             0757
*   TIO(IODBDEV);                   /* WAIT FOR OPERATION TO COMPLETE*/
TIO2     LH    @10,IODBDEV(,IODBREG)                               0757
         TIO   0(@10)                                              0757
*   BC(2,TIO2);                     /* LOOP IF BUSY                  */
*                                                                  0758
         BC    2,TIO2                                              0758
*CHECK:                                                            0759
*   IF CSWPGC = ON × CSWPTC = ON × CSWCDC = ON × CSWCCC = ON × CSWICC
*         = ON × CSWCHC = ON × CSWUC = ON × CSWUE = ON × CSWATTN = ON
*           THEN                    /* ERROR ON SIO                  */
*                                                                  0759
CHECK    LA    @10,FLCCSW                                          0759
         TM    CSWPGC(@10),B'00111111'                             0759
         BNZ   @RT00759                                            0759
         TM    CSWUC(@10),B'10000011'                              0759
         BZ    @RF00759                                            0759
@RT00759 DS    0H                                                  0760
*ERROR:                                                            0760
*     RETURN CODE(4);                                              0760
ERROR    LA    @15,4                                               0760
         L     @13,4(,@13)                                         0760
         L     @14,12(,@13)                                        0760
         LM    @00,@12,20(@13)                                     0760
         BR    @14                                                 0760
*   IF CSWDE = OFF & CSWPCI = OFF THEN /* INTERMEDIATE CSW STORED    */
@RF00759 LA    @10,FLCCSW                                          0761
         TM    CSWDE(@10),B'00000100'                              0761
         BNZ   @RF00761                                            0761
         TM    CSWPCI(@10),B'10000000'                             0761
         BZ    @RT00761                                            0761
*     GO TO TIO2;                   /* GO BACK AND WAIT FOR DEVICE 0762
*                                      END OR PCI                    */
*   IF CSWDE = OFF THEN             /* IS AN INTERRUPT STILL       0763
*                                      OUTSTANDING                   */
@RF00761 LA    @10,FLCCSW                                          0763
         TM    CSWDE(@10),B'00000100'                              0763
         BNZ   @RF00763                                            0763
*     IODBACTV = ON;                /* I/O ACTIVE                    */
         OI    IODBACTV(IODBREG),B'00000100'                       0764
*   IODBSTRT = ON;                 /* INDICATE I/O RESTARTED         */
@RF00763 OI    IODBSTRT(IODBREG),B'00000001'                       0765
*   RETURN CODE(0);                 /* DEVICE END OR PCI--RETURN OKAY*/
         SLR   @15,@15                                             0766
         L     @13,4(,@13)                                         0766
         L     @14,12(,@13)                                        0766
         LM    @00,@12,20(@13)                                     0766
         BR    @14                                                 0766
*     RESPECIFY CSW BASED(ADDR(IODBCSW));                   /*@ZA04263*
*   END TERERI;                                                    0768
*                                                                  0769
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS ROUTINE IS THE ERROR RECOVERY PROCESSOR ROUTINE WHICH    */
*   /* HANDLES ERROR RETRIES                                         */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0769
*/*TERERP: E ERROR RETRY ROUTINE                                     */
*/* P SAVE CALLER'S REGISTERS                                        */
*/* P R11 = ADDRESS IN IODBCAW                                       */
*/* S TERERI:RETRY OPERATION                                         */
*/* P IODBCSW = FLCCSW                                               */
*/* D (YES,,NO,ERPRC0) ERROR ON RETRY ?                              */
*/* P (,ERPRET) RETURN CODE = 4                                      */
*/*ERPRC0: P RETURN CODE = 0                                         */
*/*ERPRET: P RESTORE CALLER'S REGISTERS                              */
*/* R RETURN TO CALLER                                               */
*/*TERERP: END                                                       */
*                                                                  0769
*TERERP:                                                           0769
*   PROC;                                                          0769
TERERP   STM   @14,@12,@SA00005                                    0769
*   RESPECIFY BCT BASED (BCTADDR);                                 0770
*   RESPECIFY R11 RESTRICTED;                                      0771
*   R11 = IODBCAW;                  /* RETRY CCW ADDRESS             */
         L     R11,IODBCAW(,IODBREG)                               0772
*   CALL TERERI;                    /* RETRY OPERATION               */
         BAL   @14,TERERI                                          0773
*   RESPECIFY RETCODE RESTRICTED;                                  0774
*   RESPECIFY R11 UNRESTRICTED;                                    0775
*   IODBCSW = FLCCSW;               /* SAVE CSW                      */
         MVC   IODBCSW(8,IODBREG),FLCCSW                           0776
*   RETURN CODE(RETCODE);           /* RETURN TO CALLER              */
         L     @14,@SA00005                                        0777
         LM    @00,@12,@SA00005+8                                  0777
         BR    @14                                                 0777
*   RESPECIFY RETCODE UNRESTRICTED;                                0778
*   END TERERP;                                                    0779
*                                                                  0780
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS ROUTINE OUTPUTS AN INPUT MESSAGE AND WAITS FOR A NEW TAPE*/
*   /* TO BE MOUNTED                                                 */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0780
*/*TERINR: E DEVICE READY RTN                                        */
*/*INR2: L AMDSACON: SVC 3 ISSUE MESSAGE                             */
*/* D (YES,,NO,INWAIT) MESSAGE ISSUED ?                              */
*/* D (YES,,NO,INRTAP) IS DEVICE FOR PAGE DS                         */
*/* L AMDSACON: ISSUE MSG AMD012D                                    */
*/*  D (YES,,NO,%INR1) WAS REPLY I                                   */
*/* P IODBTERM = 1                                                   */
*/* R RETURN CODE 4                                                  */
*/*%INR1: D (YES,,NO,%INR2) WAS REPLY G                              */
*/* L AMDSATAP: SVC 2 GET ON PROPER CPU FOR WAIT                     */
*/* D (YES,,NO,INWAIT) ON PROPER CPU ?                               */
*/* P SAVE FLCINPSW AND FLCIOPSW                                     */
*/* P SET UP FLCINPSW TO FIELD I/O INTERRUPT                         */
*/*ENABWAIT: W ENTER ENABLED WAIT FOR I/O                            */
*/* D (YES,,NO,ENABWAIT) FLCIOAA = IODBDEV ?                         */
*/* P RESTORE FLCINPSW AND FLCIOPSW                                  */
*/* P RETURN CODE = 0                                                */
*/*INRET: R RETURN TO CALLER                                         */
*/*INWAIT: P (,INRET) RETURN CODE = 4                                */
*/*TERINR: END                                                       */
*                                                                  0780
*TERINR:                                                           0780
*   PROC;                                                          0780
TERINR   STM   @14,@12,@SA00006                                    0780
*   RESPECIFY R1 RESTRICTED;                                       0781
*   GEN;                                                           0782
*   INRMSG = R1;                    /* SAVE MSG ID IN CASE OF INVALID
*                                      REPLY                         */
*                                                                  0783
         LR    INRMSG,R1                                           0783
*INRREP:                                                           0784
*   R1 = INRMSG;                    /* RESET ORIGINAL MSG ID         */
INRREP   LR    R1,INRMSG                                           0784
*   SVC (CONSVC);                   /* ISSUE MSG LOCATED IN R1       */
         SVC   3                                                   0785
*   RESPECIFY RETCODE RESTRICTED;                                  0786
*   IF RETCODE ^= ZERO THEN         /* IF MSG ISSUED CONTINUE        */
*                                                                  0787
         LTR   RETCODE,RETCODE                                     0787
         BZ    @RF00787                                            0787
*INRERR:                                                           0788
*     RETURN CODE(4);               /* RETURN ERROR TO CALLER        */
INRERR   LA    @15,4                                               0788
         L     @14,@SA00006                                        0788
         LM    @00,@12,@SA00006+8                                  0788
         BR    @14                                                 0788
*   IF IODBREG = ADDR(IODBDA) THEN  /* IS THIS FOR THE PAGE DATA SET
*                                      DEVICE                        */
@RF00787 L     @14,@CA01084                                        0789
         CR    IODBREG,@14                                         0789
         BNE   @RF00789                                            0789
*     DO;                                                          0790
*       REPLY12D = BLANK;           /* RESET REPLY FIELD             */
         L     @14,@CA01069                                        0791
         MVI   REPLY12D-REPLY12D(@14),C' '                         0791
*       R1 = AMD012D;               /* SET MSG ID                    */
         LA    R1,12                                               0792
*       SVC(CONSVC);                /* ISSUE MSG                     */
         SVC   3                                                   0793
*       IF RETCODE ^= ZERO THEN     /* MSG ISSUED OKAY               */
         LTR   RETCODE,RETCODE                                     0794
         BNZ   @RT00794                                            0794
*         GO TO INRERR;             /* NO--RETURN ERROR              */
*       REPLY12D = REPLY12D × BLANK; /* MAKE REPLY UPPER CASE        */
         L     @14,@CA01069                                        0796
         OI    REPLY12D-REPLY12D(@14),C' '                         0796
*       IF REPLY12D = IGNORE THEN   /* WAS REPLY I                   */
         CLI   REPLY12D-REPLY12D(@14),C'I'                         0797
         BNE   @RF00797                                            0797
*         DO;                                                      0798
*           IODBTERM = ON;          /* DO NOT REUSE THIS DEVICE      */
         OI    IODBTERM(IODBREG),B'10000000'                       0799
*           GO TO INRERR;           /* YES--THEN IGNORE DEVICE       */
         B     INRERR                                              0800
*         END;                                                     0801
*       IF REPLY12D ^= GO THEN      /* WAS REPLY G                   */
@RF00797 L     @14,@CA01069                                        0802
         CLI   REPLY12D-REPLY12D(@14),C'G'                         0802
         BNE   @RT00802                                            0802
*         GO TO INRREP;             /* NO--ITS INVALID--REPEAT       */
*     END;                                                         0804
*   RESPECIFY (R1,RETCODE) UNRESTRICTED;                           0805
@RF00789 DS    0H                                                  0806
*   SAVECTIO = CTIOTYPE;            /* SAVE FIELD                    */
         MVC   SAVECTIO(1),CTIOTYPE(CCTREG)                        0806
*   CTIOTYPE = OFF;                 /* SET UP TAP INPUT PARAMETER    */
         MVI   CTIOTYPE(CCTREG),B'00000000'                        0807
*   IF IODBREG = ADDR(IODBDA) THEN                                 0808
         L     @10,@CA01084                                        0808
         CR    IODBREG,@10                                         0808
         BNE   @RF00808                                            0808
*     CTIODA = ON;                  /* DA TYPE                       */
         OI    CTIODA(CCTREG),B'00100000'                          0809
*   ELSE                                                           0810
*     IF IODBREG = ADDR(IODBWORK) THEN                             0810
         B     @RC00808                                            0810
@RF00808 L     @10,@CA01085                                        0810
         CR    IODBREG,@10                                         0810
         BNE   @RF00810                                            0810
*       CTIOWK = ON;                /* WORKFILE TYPE                 */
         OI    CTIOWK(CCTREG),B'00010000'                          0811
*     ELSE                                                         0812
*       CTIOOUT = ON;               /* OUTPUT ONLY ONE LEFT          */
         B     @RC00810                                            0812
@RF00810 OI    CTIOOUT(CCTREG),B'01000000'                         0812
*   SVC (TAPSVC);                   /* GET ON POROER CPU             */
@RC00810 DS    0H                                                  0813
@RC00808 SVC   2                                                   0813
*   CTIOTYPE = SAVECTIO;            /* RESTORE FIELD                 */
         MVC   CTIOTYPE(1,CCTREG),SAVECTIO                         0814
*   RESPECIFY RETCODE RESTRICTED;                                  0815
*   IF RETCODE ^= ZERO THEN         /* IF ON CPU CONTINUE            */
         LTR   RETCODE,RETCODE                                     0816
         BZ    @RF00816                                            0816
*     RETURN CODE(4);               /* RETURN ERROR TO CALLER        */
         LA    @15,4                                               0817
         L     @14,@SA00006                                        0817
         LM    @00,@12,@SA00006+8                                  0817
         BR    @14                                                 0817
*   RESPECIFY RETCODE UNRESTRICTED;                                0818
@RF00816 DS    0H                                                  0819
*   IONEW = FLCINPSW;               /* SAVE I/O NEW                  */
         MVC   IONEW(8),FLCINPSW                                   0819
*   IOOLD = FLCIOPSW;               /* SAVE I/O OLD                  */
         MVC   IOOLD(8),FLCIOPSW                                   0820
*   FLCINPSW = INRHANDR;            /* SET UP THE INTERVENTION     0821
*                                      REQUIRED SPECIAL INTERRUPT  0821
*                                      HANDLER                       */
         MVC   FLCINPSW(8),INRHANDR                                0821
*   DEVIRW = IODBDEV;               /* SET CUU INTO WAIT CODE        */
*                                                                  0822
         LH    @10,IODBDEV(,IODBREG)                               0822
         STH   @10,DEVIRW                                          0822
*ENABWAIT:                                                         0823
*   LPSW (WAITPSW);                 /* WAIT FOR INTERRUPT            */
*                                                                  0823
ENABWAIT LPSW  WAITPSW                                             0823
*INTERRPT:                                                         0824
*   IF FLCIOAA ^= IODBDEV THEN                                     0824
INTERRPT L     @10,FLCIOAA-1                                       0824
         LA    @10,0(,@10)                                         0824
         CH    @10,IODBDEV(,IODBREG)                               0824
         BNE   @RT00824                                            0824
*     GO TO ENABWAIT;               /* WAIT FOR SPECIFIC INTERRUPT   */
*   FLCINPSW = IONEW;               /* RESTORE I/O NEW               */
         MVC   FLCINPSW(8),IONEW                                   0826
*   FLCIOPSW = IOOLD;               /* RESTORE I/O OLD               */
         MVC   FLCIOPSW(8),IOOLD                                   0827
*   RETURN CODE(0);                 /* RETURN TO CALLER              */
         SLR   @15,@15                                             0828
         L     @14,@SA00006                                        0828
         LM    @00,@12,@SA00006+8                                  0828
         BR    @14                                                 0828
*   END TERINR;                                                    0829
*                                                                  0830
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS IS THE ERROR RECOVERY BLOCK INITALIZATION AND UPDATE     */
*   /* ROUTINE.                                                      */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0830
*/*TERERB: E ENTRY                                                   */
*/* P SAVE CALLER'S REGISTERS                                        */
*/* D (YES,,NO,ERBCTR) ERB = 0 ?                                     */
*/* P ERBMAX CTR = X'FF'                                             */
*/*ERBID: P ERBID = INPUT ERBID                                      */
*/* P ERBPCTR = INPUT PCT                                            */
*/* P (,ERBRET) ERBSCT = INPUT SCT                                   */
*/*ERBCTR: P ERBMAX CTR = ERBMAX CTR - 1                             */
*/* D (YES,%TERM,NO,) ERBMAX CTR = 0 ?                               */
*/* D (YES,,NO,ERBID) ERBID = INPUT ERBID ?                          */
*/* P ERBPCTR = ERBPCTR - 1                                          */
*/* D (YES,,NO,ERBRET) ERBPCTR = 0 ?                                 */
*/* D (YES,TERMEXIT,NO,) ERBSCTR = 0 ?                               */
*/* P ERBSCTR = ERBSCTR - 1                                          */
*/* P ERBPCTR = INPUT PCT                                            */
*/*ERBRET: P RESTORE CALLER'S REGISTERS                              */
*/* R RETURN TO CALLER                                               */
*/*%TERM: P SET UP INPUT ERBID                                       */
*/*TERMEXIT: N GIVE CONTROL TO TERMEXIT IN AMDSATER                  */
*/* R EXIT TO AMDSATER                                               */
*/*TERERB: END                                                       */
*                                                                  0830
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS ROUTINE (TERERBX) IS TO CAUSE THE REAL TERERB ROUTINE TO */
*   /* ALWAYS BE CALLED TWO LEVELS DEEP IN A SAVEAREA. THIS IS       */
*   /* NECESSARY BECAUSE IF THERE ARE TO BE NO MORE RETRIES OF THE   */
*   /* ERROR THEN TERERB RETURNS TO THE ADDRESS PASSED IN THE INPUT  */
*   /* TO TERERB AND MUST ALWAYS RESTORE THS SAME NUMBER OF LEVELS OF*/
*   /* SAVEAREAS.                                                    */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0830
*                                                                  0830
*TERERBX:                                                          0830
*   PROC OPTIONS(SAVEAREA);                                        0830
TERERBX  STM   @14,@12,12(@13)                                     0830
         ST    @13,@SA00007+4                                      0830
         LA    @14,@SA00007                                        0830
         ST    @14,8(,@13)                                         0830
         LR    @13,@14                                             0830
*   CALL TERERB;                    /* CALL REAL ERB ROUTINE         */
         BAL   @14,TERERB                                          0831
*   END TERERBX;                                                   0832
*                                                                  0832
@EL00007 L     @13,4(,@13)                                         0832
@EF00007 DS    0H                                                  0832
@ER00007 LM    @14,@12,12(@13)                                     0832
         BR    @14                                                 0832
*TERERB:                                                           0833
*   PROC;                                                          0833
TERERB   STM   @14,@12,12(@13)                                     0833
*   RESPECIFY R1 RESTRICTED;                                       0834
*   IF ERBLOCK = 0 THEN                                            0835
         L     @10,ERBADDRI(,R1)                                   0835
         ICM   @00,15,ERBLOCK(@10)                                 0835
         BNZ   @RF00835                                            0835
*     ERBMAX = 255;                 /* INITIALIZE THE MAXIMUM ERB  0836
*                                      COUNT IF FIRST ENTRY          */
         MVI   ERBMAX(@10),X'FF'                                   0836
*   ELSE                                                           0837
*     DO;                                                          0837
         B     @RC00835                                            0837
@RF00835 DS    0H                                                  0838
*       ERBMAX = ERBMAX - 1;        /* DECREMENT MAXIMUM CTR         */
         L     @10,ERBADDRI(,R1)                                   0838
         SLR   @00,@00                                             0838
         IC    @00,ERBMAX(,@10)                                    0838
         BCTR  @00,0                                               0838
         STC   @00,ERBMAX(,@10)                                    0838
*       IF ERBMAX = ZERO THEN                                      0839
         CLI   ERBMAX(@10),0                                       0839
         BNE   @RF00839                                            0839
*         DO;                       /* IF OVER 255 RETRIES-DONE      */
*           ERBID1 = ERBPIDI;       /* SET UP LAST ERB IDENTIFIER OF
*                                      ERROR CONDITION               */
         MVC   ERBID1(1,@10),ERBPIDI(R1)                           0841
*           SAVEBACK -> SAVER14 = ERBERRI; /* SET TO TERMINATE ERROR
*                                      RECOVERY ROUTINE              */
         L     @10,SAVEBACK(,R13)                                  0842
         L     @00,ERBERRI(,R1)                                    0842
         ST    @00,SAVER14(,@10)                                   0842
*           GO TO ERBRET;           /* RETURN                        */
         B     ERBRET                                              0843
*         END;                                                     0844
*       IF ERBID1 ^= ERBPIDI THEN                                  0845
@RF00839 L     @10,ERBADDRI(,R1)                                   0845
         CLC   ERBID1(1,@10),ERBPIDI(R1)                           0845
         BNE   @RT00845                                            0845
*         GO TO ERBIDSET;           /* IF DIFFERENT ERROR SET UP   0846
*                                      RETRY                         */
*       ERBPCTR = ERBPCTR - 1;      /* DECREMENT PRIMARY CTR         */
         SLR   @00,@00                                             0847
         IC    @00,ERBPCTR(,@10)                                   0847
         BCTR  @00,0                                               0847
         STC   @00,ERBPCTR(,@10)                                   0847
*       IF ERBPCTR = ZERO THEN                                     0848
         CLI   ERBPCTR(@10),0                                      0848
         BNE   @RF00848                                            0848
*         DO;                       /* IF ZERO CHECK SECONDARY     0849
*                                      POINTER                       */
*           IF ERBSCTR = ZERO THEN                                 0850
         CLI   ERBSCTR(@10),0                                      0850
         BNE   @RF00850                                            0850
*             DO;                   /* IF NO SECONDARY POINTER, WE 0851
*                                      ARE DONE                      */
*               SAVEBACK -> SAVER14 = ERBERRI; /* ERROR EXIT         */
         L     @10,SAVEBACK(,R13)                                  0852
         L     @00,ERBERRI(,R1)                                    0852
         ST    @00,SAVER14(,@10)                                   0852
*               GO TO ERBRET;       /* GO TO THE ERROR EXIT          */
         B     ERBRET                                              0853
*             END;                                                 0854
*           ERBSCTR = ERBSCTR - 1;  /* DECREMENT SECONDARY CTR       */
@RF00850 L     @10,ERBADDRI(,R1)                                   0855
         SLR   @00,@00                                             0855
         IC    @00,ERBSCTR(,@10)                                   0855
         BCTR  @00,0                                               0855
         STC   @00,ERBSCTR(,@10)                                   0855
*           ERBPCTR = ERBPCTI;      /* RESET PRIMARY CTR             */
         MVC   ERBPCTR(1,@10),ERBPCTI(R1)                          0856
*         END;                                                     0857
*       GO TO ERBRET;               /* RETURN TO RETRY I/O ERROR     */
         B     ERBRET                                              0858
*     END;                          /* ERB EXISTED PATH              */
*   ERBIDSET:ERBID1 = ERBPIDI;      /* ERROR ID                      */
@RC00835 DS    0H                                                  0860
ERBIDSET L     @10,ERBADDRI(,R1)                                   0860
         MVC   ERBID1(1,@10),ERBPIDI(R1)                           0860
*   ERBPCTR = ERBPCTI;              /* SET UP PRIMARY # RETRIES      */
         MVC   ERBPCTR(1,@10),ERBPCTI(R1)                          0861
*   ERBSCTR = ERBSCTI;              /* SET UP SECONDARY # RETRIES    */
*                                                                  0862
         MVC   ERBSCTR(1,@10),ERBSCTI(R1)                          0862
*ERBRET:                                                           0863
*   RETURN;                                                        0863
@EL00008 DS    0H                                                  0863
@EF00008 DS    0H                                                  0863
@ER00008 LM    @14,@12,12(@13)                                     0863
         BR    @14                                                 0863
*   END TERERB;                                                    0864
         B     @EL00008                                            0864
*   END AMDSATER                                                   0865
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.      *
*/*%INCLUDE SYSLIB  (IHAPSA  )                                        *
*/*%INCLUDE SYSLIB  (AMDSARMK)                                        *
*;                                                                 0865
@DATA    DS    0H
@CH00067 DC    H'1'
@CH00108 DC    H'2'
@CH00089 DC    H'24'
@SM01247 MVC   COND33I-COND33I(0,@10),MSGTXT(MSGADDR)
         DS    0F
@SA00001 DS    18F
@SA00004 DS    18F
@SA00007 DS    18F
@SA00006 DS    15F
@SA00002 DS    15F
@SA00003 DS    15F
@SA00005 DS    15F
         DS    0F
@CF00044 DC    F'4'
@CF00036 DC    F'8'
@CF00867 DC    F'37'
@CF00727 DC    F'28672'
@CA00981 DC    A(MSGTAB)
@CA01046 DC    A(IODBOUT)
@CA01069 DC    A(REPLY12D)
@CA01076 DC    A(DEV14A)
@CA01077 DC    A(DEV20A)
@CA01084 DC    A(IODBDA)
@CA01085 DC    A(IODBWORK)
@CA01087 DC    A(COND33I)
@CA01088 DC    A(STAT33I)
@CA01089 DC    A(CMD33I)
@CA01090 DC    A(DEV33I)
@CA01091 DC    A(LNG33I)
@CA01092 DC    A(SENS34I)
         DS    0D
BCTADDR  DS    A
CCK      DS    A
@CC01114 DC    C'LTER'
         DS    CL4
SENSECCW DS    CL8
         ORG   SENSECCW
@NM00064 DC    X'04'
SENSEADR DC    XL3'00'
@NM00065 DC    X'20000018'
         ORG   SENSECCW+8
SENSCCW  DS    CL8
         ORG   SENSCCW
@NM00066 DC    X'0400000030000018'
         ORG   SENSCCW+8
WTMERR   DS    CL40
         ORG   WTMERR
@NM00067 DC    X'2700000060000001'
@NM00068 DC    X'1700000060000001'
EORCCW   DS    CL24
         ORG   EORCCW
@NM00069 DC    X'1F00000060000001'
REWUNLD  DC    X'0F00000060000001'
@NM00070 DC    X'0300000020000001'
         ORG   WTMERR+40
REPOSTAP DS    CL24
         ORG   REPOSTAP
@NM00071 DC    X'2700000060000001'
@NM00072 DC    X'1700000060000001'
TICTL    DS    CL8
         ORG   TICTL
@NM00073 DC    X'08'
TICTLADR DC    XL3'00'
@NM00074 DC    X'60000001'
         ORG   REPOSTAP+24
REREAD   DS    CL32
         ORG   REREAD
@NM00075 DC    X'0400000070000018'
@NM00076 DC    X'0700000060000001'
READ     DS    CL8
         ORG   READ
READCMD  DC    X'02'
@NM00077 DC    AL3(VOLABEL)
@NM00078 DC    X'60000004'
         ORG   REREAD+24
@NM00079 DC    X'0700000020000001'
         ORG   REREAD+32
VOLABEL  DS    CL4
         DS    CL4
REPOSPRM DS    CL16
         ORG   REPOSPRM
@NM00080 DC    X'2700000060000001'
REPOTIC  DS    CL8
         ORG   REPOTIC
@NM00081 DC    X'08'
REPOTADR DS    AL3
@NM00082 DC    X'60000001'
         ORG   REPOSPRM+16
CVTBLK   DS    CL10
         ORG   CVTBLK
CVTBINA  DS    AL4
CVTEBCA  DS    AL4
CVTINL   DS    AL2
         ORG   CVTBLK+10
         DS    CL2
CONVAREA DS    CL4
TAPESW   DC    AL1(0)
         ORG   TAPESW
EORCHAIN DS    BL1
@NM00084 EQU   TAPESW+0
         ORG   TAPESW+1
VOL1     DC    CL4'VOL1'
ASCII    DC    X'564F4C31'
@NM00085 DS    BL1
         ORG   @NM00085
RUNSW    DS    BL1
@NM00086 EQU   @NM00085+0
         ORG   @NM00085+1
NULL     DC    X'000000000000000000000000000000000000000000000000'
ERBSAVE  DS    CL8
         DS    CL2
ERBPARM  DS    CL12
         ORG   ERBPARM
ERBADDR  DS    AL4
ERBPID   DS    CL1
ERBSCT   DS    CL1
ERBPCT   DS    CL1
@NM00091 DS    CL1
@NM00092 DC    AL4(TERMEXIT)
         ORG   ERBPARM+12
SAVECTIO DS    BL1
NONE     DC    CL4'NONE'
         DS    CL3
INRHANDR DS    CL8
         ORG   INRHANDR
@NM00094 DC    X'01'
@NM00095 DC    X'0C000000'
@NM00096 DC    AL3(INTERRPT)
         ORG   INRHANDR+8
WAITPSW  DS    CL8
         ORG   WAITPSW
@NM00097 DC    X'030E000000E0'
DEVIRW   DS    FL2
         ORG   WAITPSW+8
IOOLD    DS    CL8
IONEW    DS    CL8
TERPATCH DC    20F'0'
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
CCTREG   EQU   @05
INRMSG   EQU   @06
I        EQU   @02
CCWTEMP  EQU   @03
CCWREG   EQU   @06
MSGADDR  EQU   @06
VCCTREG  EQU   @12
RETCODE  EQU   @15
BASEREG  EQU   @11
R1       EQU   @01
R11      EQU   @11
R13      EQU   @13
IODBREG  EQU   @08
RETREG   EQU   @14
R0       EQU   @00
R10      EQU   @10
R12      EQU   @12
R14      EQU   @14
R15      EQU   @15
R2       EQU   @02
R3       EQU   @03
R4       EQU   @04
R5       EQU   @05
R6       EQU   @06
R7       EQU   @07
R8       EQU   @08
R9       EQU   @09
         EXTRN MSGTAB
         EXTRN IODBOUT
         EXTRN REPLY12D
         EXTRN DEV14A
         EXTRN DEV20A
         EXTRN IODBDA
         EXTRN IODBWORK
         EXTRN COND33I
         EXTRN STAT33I
         EXTRN CMD33I
         EXTRN DEV33I
         EXTRN LNG33I
         EXTRN SENS34I
PSA      EQU   0
FLCRNPSW EQU   PSA
FLCROPSW EQU   PSA+8
FLCICCW2 EQU   PSA+16
FLCIOPSW EQU   PSA+56
FLCCSW   EQU   PSA+64
FLCCAW   EQU   PSA+72
FLCINPSW EQU   PSA+120
PSAEEPSW EQU   PSA+132
PSAESPSW EQU   PSA+136
FLCSVILC EQU   PSAESPSW+1
PSAEPPSW EQU   PSA+140
FLCPIILC EQU   PSAEPPSW+1
FLCPICOD EQU   PSAEPPSW+2
PSAPICOD EQU   FLCPICOD+1
FLCTEA   EQU   PSAEPPSW+4
FLCPER   EQU   PSA+152
FLCMCLA  EQU   PSA+168
FLCIOEL  EQU   FLCMCLA+4
FLCIOA   EQU   FLCMCLA+16
FLCIOAA  EQU   FLCIOA+1
FLCFSA   EQU   FLCMCLA+80
PSASUPER EQU   PSA+552
PSASUP1  EQU   PSASUPER
PSASUP2  EQU   PSASUPER+1
PSASUP3  EQU   PSASUPER+2
PSASUP4  EQU   PSASUPER+3
PSACLHT  EQU   PSA+640
PSALKSA  EQU   PSA+696
PSAHLHI  EQU   PSA+760
PSADSSFL EQU   PSA+836
PSADSSF1 EQU   PSADSSFL
PSADSSF3 EQU   PSADSSFL+2
PSADSSF4 EQU   PSADSSFL+3
PSARSVT  EQU   PSA+896
SADMPLSD EQU   3312
ARB      EQU   0
BCTH     EQU   0
BCT      EQU   0
BCTLPID  EQU   BCT+28
BCTFLGT  EQU   BCT+44
BCTFLGI  EQU   BCT+45
BCTCOMP  EQU   BCTFLGI
BCTIOERR EQU   BCTFLGI
CCT      EQU   0
CTWAIT   EQU   CCT
CTFLG1   EQU   CCT+1
CTFLG2   EQU   CCT+2
CTERBDA  EQU   CCT+28
CTERBTPE EQU   CCT+32
CTLOWFLG EQU   CCT+48
CTDMPTYP EQU   CCT+52
CTIOTYPE EQU   CTDMPTYP
CTIOOUT  EQU   CTIOTYPE
CTIODA   EQU   CTIOTYPE
CTIOWK   EQU   CTIOTYPE
CTCONFLG EQU   CTDMPTYP+2
CTMSGOUT EQU   CTCONFLG
CTBUFTYP EQU   CTDMPTYP+3
CTPRMT1  EQU   CTDMPTYP+24
CTPRMT2  EQU   CTDMPTYP+26
CCW      EQU   0
CCWCMD   EQU   CCW
CCWDADDR EQU   CCW+1
CCWFLAGS EQU   CCW+4
CCWPCI   EQU   CCWFLAGS
CSW      EQU   0
CSWKEY00 EQU   CSW
CSWCADDR EQU   CSW+1
CSWUSTAT EQU   CSW+4
CSWATTN  EQU   CSWUSTAT
CSWBUSY  EQU   CSWUSTAT
CSWDE    EQU   CSWUSTAT
CSWUC    EQU   CSWUSTAT
CSWUE    EQU   CSWUSTAT
CSWCSTAT EQU   CSW+5
CSWPCI   EQU   CSWCSTAT
CSWIL    EQU   CSWCSTAT
CSWPGC   EQU   CSWCSTAT
CSWPTC   EQU   CSWCSTAT
CSWCDC   EQU   CSWCSTAT
CSWCCC   EQU   CSWCSTAT
CSWICC   EQU   CSWCSTAT
CSWCHC   EQU   CSWCSTAT
DSCE     EQU   0
IODB     EQU   0
IODBFLAG EQU   IODB+8
IODBTERM EQU   IODBFLAG
IODBPTRM EQU   IODBFLAG
IODBIOC  EQU   IODBFLAG
IODBACTV EQU   IODBFLAG
IODBSTRT EQU   IODBFLAG
IODBDEV  EQU   IODB+10
IODBBCT  EQU   IODB+16
IODBCAW  EQU   IODB+20
IODBCSW  EQU   IODB+24
IODBCCHH EQU   IODB+32
IODBSRCH EQU   IODBCCHH+3
IODBSENS EQU   IODB+40
MDCE     EQU   0
MDCB     EQU   0
MDCBGRS  EQU   MDCB+16
MDCBFLGS EQU   MDCB+86
PSW      EQU   0
PSWSM    EQU   PSW
@NM00047 EQU   PSW+1
PSWCCPM  EQU   PSW+2
@NM00050 EQU   PSW+3
PTRT     EQU   0
PTRTRSA  EQU   0
RCB      EQU   0
VCCT     EQU   0
VCTRECSN EQU   VCCT+8
VCTFLGS  EQU   VCCT+9
VCTMDCE  EQU   VCCT+12
VCTDSCE  EQU   VCCT+20
VCTBCTH  EQU   VCCT+24
VCTCBID  EQU   VCCT+64
VCTCPOUT EQU   VCCT+96
SDL      EQU   0
REGLOCAL EQU   0
SAVEFORM EQU   0
SAVEBACK EQU   SAVEFORM+4
SAVER14  EQU   SAVEFORM+12
SAVER15  EQU   SAVEFORM+16
MSGTYPE  EQU   0
MSGFLAGS EQU   MSGTYPE
MSGSTAT  EQU   MSGFLAGS
MSGSENS  EQU   MSGFLAGS
MSGTAPE  EQU   MSGFLAGS
MSGLNGTH EQU   MSGTYPE+1
MSGTXT   EQU   MSGTYPE+2
ERBPARMI EQU   0
ERBADDRI EQU   ERBPARMI
ERBPIDI  EQU   ERBPARMI+4
ERBSCTI  EQU   ERBPARMI+5
ERBPCTI  EQU   ERBPARMI+6
ERBERRI  EQU   ERBPARMI+8
ERBLOCK  EQU   0
ERBID1   EQU   ERBLOCK
ERBSCTR  EQU   ERBLOCK+1
ERBPCTR  EQU   ERBLOCK+2
ERBMAX   EQU   ERBLOCK+3
PTRTVSA  EQU   0
PSARSVTE EQU   PSARSVT
CTLOWDMP EQU   CTDMPTYP
SENSE    EQU   IODBSENS
SENSE00  EQU   SENSE
SENCR    EQU   SENSE00
SENIR    EQU   SENSE00
SENBO    EQU   SENSE00
SENEC    EQU   SENSE00
SENDC    EQU   SENSE00
SENOR    EQU   SENSE00
SENCC    EQU   SENSE00
SENSE01  EQU   SENSE+1
SENTB    EQU   SENSE01
SENLP    EQU   SENSE01
SENFP    EQU   SENSE01
SENNC    EQU   SENSE01
SENSE05  EQU   SENSE+5
SENPEID  EQU   SENSE05
@NM00087 EQU   CTERBTPE
ERBID    EQU   @NM00087
ERBS     EQU   CTERBDA
FLC      EQU   PSA
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
@NM00090 EQU   @NM00087+3
@NM00089 EQU   @NM00087+2
@NM00088 EQU   @NM00087+1
@NM00063 EQU   SENSE+6
@NM00062 EQU   SENSE05
@NM00061 EQU   SENSE05
@NM00060 EQU   SENSE+2
@NM00059 EQU   SENSE01
@NM00058 EQU   SENSE01
@NM00057 EQU   SENSE01
@NM00056 EQU   SENSE01
@NM00055 EQU   SENSE00
CTADDRE  EQU   CTLOWDMP+4
CTADDRS  EQU   CTLOWDMP
PSARSAV  EQU   PSARSVTE+60
PSARSTK  EQU   PSARSVTE+56
PSAESAV3 EQU   PSARSVTE+52
PSAESTK3 EQU   PSARSVTE+48
PSAESAV2 EQU   PSARSVTE+44
PSAESTK2 EQU   PSARSVTE+40
PSAESAV1 EQU   PSARSVTE+36
PSAESTK1 EQU   PSARSVTE+32
PSAPSAV  EQU   PSARSVTE+28
PSAPSTK  EQU   PSARSVTE+24
PSAMSAV  EQU   PSARSVTE+20
PSAMSTK  EQU   PSARSVTE+16
PSASSAV  EQU   PSARSVTE+12
PSASSTK  EQU   PSARSVTE+8
PSANSTK  EQU   PSARSVTE+4
PSACSTK  EQU   PSARSVTE
@NM00093 EQU   ERBPARMI+7
@NM00083 EQU   MSGFLAGS
SAVER12  EQU   SAVEFORM+68
SAVER11  EQU   SAVEFORM+64
SAVER10  EQU   SAVEFORM+60
SAVER9   EQU   SAVEFORM+56
SAVER8   EQU   SAVEFORM+52
SAVER7   EQU   SAVEFORM+48
SAVER6   EQU   SAVEFORM+44
SAVER5   EQU   SAVEFORM+40
SAVER4   EQU   SAVEFORM+36
SAVER3   EQU   SAVEFORM+32
SAVER2   EQU   SAVEFORM+28
SAVER1   EQU   SAVEFORM+24
SAVER0   EQU   SAVEFORM+20
SAVENEXT EQU   SAVEFORM+8
SAVENAME EQU   SAVEFORM+1
SAVEID   EQU   SAVEFORM
REGL15   EQU   REGLOCAL+60
REGL14   EQU   REGLOCAL+56
REGL13   EQU   REGLOCAL+52
REGL12   EQU   REGLOCAL+48
REGL11   EQU   REGLOCAL+44
REGL10   EQU   REGLOCAL+40
REGL9    EQU   REGLOCAL+36
REGL8    EQU   REGLOCAL+32
REGL7    EQU   REGLOCAL+28
REGL6    EQU   REGLOCAL+24
REGL5    EQU   REGLOCAL+20
REGL4    EQU   REGLOCAL+16
REGL3    EQU   REGLOCAL+12
REGL2    EQU   REGLOCAL+8
REGL1    EQU   REGLOCAL+4
REGL0    EQU   REGLOCAL
SDLSPN   EQU   SDL+1
SDLNUM   EQU   SDL
VCTVCCTV EQU   VCCT+108
VCTCCTV  EQU   VCCT+104
@NM00054 EQU   VCCT+102
VCTEXTRA EQU   VCCT+100
VCTSVCTB EQU   VCCT+92
VCTPGT   EQU   VCCT+88
VCTLPA   EQU   VCCT+84
VCTCBADR EQU   VCCT+80
VCTJBNME EQU   VCCT+72
VCTCBIDN EQU   VCTCBID+7
@NM00053 EQU   VCTCBID
VCTAUDIT EQU   VCCT+62
VCTASID  EQU   VCCT+60
VCTPTRT  EQU   VCCT+56
VCTMASCB EQU   VCCT+52
VCTASCB  EQU   VCCT+48
VCTCPUC  EQU   VCCT+46
VCTWKC   EQU   VCCT+45
VCTWKHI  EQU   VCCT+44
VCTSUBPL EQU   VCCT+40
VCTARB   EQU   VCCT+36
VCTIODB  EQU   VCCT+32
VCTBCTC  EQU   VCCT+28
VCTSTOR  EQU   VCCT+16
VCTRECVA EQU   VCCT+10
@NM00052 EQU   VCTFLGS
VCTNOI22 EQU   VCTFLGS
VCTLRCLM EQU   VCTFLGS
VCTARCLM EQU   VCTFLGS
VCTASMIC EQU   VCTFLGS
VCTMEMIN EQU   VCTFLGS
VCTSADMP EQU   VCTFLGS
@NM00051 EQU   VCTRECSN
VCTRSMR  EQU   VCTRECSN
VCTEXIR  EQU   VCTRECSN
VCTUPDR  EQU   VCTRECSN
VCTPGIR  EQU   VCTRECSN
VCTRCB   EQU   VCCT+4
VCTVCT   EQU   VCCT
RCBBASE  EQU   RCB+16
RCBEXIT  EQU   RCB+12
RCBSAVE  EQU   RCB+8
RCBSTOR  EQU   RCB+4
RCBNEXT  EQU   RCB
PTRTVS   EQU   PTRT+1032
PTRTRS   EQU   PTRT+8
PTRTLGID EQU   PTRT+4
PTRTPTRT EQU   PTRT
PSWEND   EQU   PSW+8
PSWIA    EQU   PSW+4
PSWSP    EQU   @NM00050
PSWSIG   EQU   PSWCCPM
PSWEU    EQU   PSWCCPM
PSWDO    EQU   PSWCCPM
PSWFPO   EQU   PSWCCPM
@NM00049 EQU   PSWCCPM
@NM00048 EQU   PSWCCPM
PSWPRBLM EQU   @NM00047
PSWAIT   EQU   @NM00047
PSWMCH   EQU   @NM00047
PSWMODE  EQU   @NM00047
PSWKEY   EQU   @NM00047
PSWXTRNL EQU   PSWSM
PSWIO    EQU   PSWSM
PSWDAT   EQU   PSWSM
@NM00046 EQU   PSWSM
@NM00045 EQU   PSWSM
@NM00044 EQU   PSWSM
PSWPER   EQU   PSWSM
@NM00043 EQU   PSWSM
@NM00042 EQU   MDCB+87
@NM00041 EQU   MDCBFLGS
MDCBDUMP EQU   MDCBFLGS
MDCBASMI EQU   MDCBFLGS
MDCBPI   EQU   MDCB+84
MDCBSTOR EQU   MDCB+80
MDCBGR15 EQU   MDCBGRS+60
MDCBGR14 EQU   MDCBGRS+56
MDCBGR13 EQU   MDCBGRS+52
MDCBGR12 EQU   MDCBGRS+48
MDCBGR11 EQU   MDCBGRS+44
MDCBGR10 EQU   MDCBGRS+40
MDCBGR9  EQU   MDCBGRS+36
MDCBGR8  EQU   MDCBGRS+32
MDCBGR7  EQU   MDCBGRS+28
MDCBGR6  EQU   MDCBGRS+24
MDCBGR5  EQU   MDCBGRS+20
MDCBGR4  EQU   MDCBGRS+16
MDCBGR3  EQU   MDCBGRS+12
MDCBGR2  EQU   MDCBGRS+8
MDCBGR1  EQU   MDCBGRS+4
MDCBGR0  EQU   MDCBGRS
MDCBPSW  EQU   MDCB+8
MDCBNEXT EQU   MDCB+4
MDCBMDCB EQU   MDCB
MDCEAVIL EQU   MDCE+8
MDCEACTV EQU   MDCE+4
MDCEMDCE EQU   MDCE
IODBR    EQU   IODBCCHH+7
IODBHH   EQU   IODBSRCH+2
IODBCC   EQU   IODBSRCH
IODBSEEK EQU   IODBCCHH+1
IODBM    EQU   IODBCCHH
IODBCPU  EQU   IODB+14
IODBTYPE EQU   IODB+13
IODBCLAS EQU   IODB+12
@NM00040 EQU   IODBFLAG+1
IODBCONW EQU   IODBFLAG
IODBHALT EQU   IODBFLAG
IODBINT  EQU   IODBFLAG
IODBIDEN EQU   IODB+4
IODBIODB EQU   IODB
DSCETEND EQU   DSCE+20
DSCETCUR EQU   DSCE+16
DSCETBEG EQU   DSCE+12
DSCENEXT EQU   DSCE+8
DSCEBEGN EQU   DSCE+4
DSCEDSCE EQU   DSCE
CSWCNT   EQU   CSW+6
CSWCE    EQU   CSWUSTAT
CSWCUE   EQU   CSWUSTAT
CSWSTMOD EQU   CSWUSTAT
@NM00039 EQU   CSWKEY00
CSWKEY   EQU   CSWKEY00
CCWCNT   EQU   CCW+6
@NM00038 EQU   CCW+5
@NM00037 EQU   CCWFLAGS
CCWIDA   EQU   CCWFLAGS
CCWSKIP  EQU   CCWFLAGS
CCWSLI   EQU   CCWFLAGS
CCWCC    EQU   CCWFLAGS
CCWDC    EQU   CCWFLAGS
CTHWMAX  EQU   CTDMPTYP+29
CTHWM    EQU   CTDMPTYP+28
CTPRMT2X EQU   CTPRMT2+1
CTPRMT2Y EQU   CTPRMT2
CTPRMT1X EQU   CTPRMT1+1
CTPRMT1Y EQU   CTPRMT1
CTVCCT   EQU   CTDMPTYP+20
CTEOR    EQU   CTDMPTYP+16
CTCOMMIO EQU   CTDMPTYP+12
CTLWKAD  EQU   CTDMPTYP+8
CTCONSOL EQU   CTDMPTYP+4
@NM00036 EQU   CTBUFTYP
CTDUMP   EQU   CTBUFTYP
CTLSQA   EQU   CTBUFTYP
CTASM    EQU   CTBUFTYP
CTPGT    EQU   CTBUFTYP
CTWKFLE  EQU   CTBUFTYP
@NM00035 EQU   CTBUFTYP
@NM00034 EQU   CTCONFLG
CTREAD   EQU   CTCONFLG
@NM00033 EQU   CTDMPTYP+1
@NM00032 EQU   CTIOTYPE
CTIORSET EQU   CTIOTYPE
CTIOINT  EQU   CTIOTYPE
CTIOCON  EQU   CTIOTYPE
CTIOTERM EQU   CTIOTYPE
CTEBCOPR EQU   CCT+49
@NM00031 EQU   CTLOWFLG
CTWKSTUS EQU   CTLOWFLG
CTINIT   EQU   CTLOWFLG
CTFP     EQU   CTLOWFLG
CTVIRTD  EQU   CTLOWFLG
CTEBCOPD EQU   CCT+45
CTCONTYP EQU   CCT+44
CTOUTAD  EQU   CCT+42
CTCPUI   EQU   CCT+40
CTERBCON EQU   CCT+36
CTCCHHW  EQU   CCT+24
CTCCHHE  EQU   CCT+20
CTCCHHS  EQU   CCT+16
CTPGECNT EQU   CCT+15
CTCCHHR  EQU   CCT+8
CTINADDR EQU   CCT+6
CTSENSE  EQU   CCT+4
CTDEVTYP EQU   CCT+3
@NM00030 EQU   CTFLG2
CTALTCON EQU   CTFLG2
CTWKDONE EQU   CTFLG2
CTVIRTR  EQU   CTFLG2
CTNOSTAT EQU   CTFLG2
CTPGEFLT EQU   CTFLG2
CTSTOR   EQU   CTFLG2
CTDUPSW  EQU   CTFLG2
CTERREC  EQU   CTFLG1
CTMP     EQU   CTFLG1
@NM00029 EQU   CTFLG1
CTDEFO   EQU   CTFLG1
CTWORK   EQU   CTFLG1
CTMORTPE EQU   CTFLG1
CTDEVICE EQU   CTFLG1
CTERROR  EQU   CTFLG1
@NM00028 EQU   BCT+46
BCTRECLM EQU   BCTFLGI
BCTALLOC EQU   BCTFLGI
@NM00027 EQU   BCTFLGT
BCTPGTF  EQU   BCTFLGT
BCTDUMP  EQU   BCTFLGT
BCTLSQA  EQU   BCTFLGT
BCTASM   EQU   BCTFLGT
BCTPGT   EQU   BCTFLGT
BCTWKFLE EQU   BCTFLGT
@NM00026 EQU   BCTFLGT
BCTRBA   EQU   BCT+40
BCTAMB   EQU   BCT+36
@NM00025 EQU   BCTLPID+4
BCTLGN   EQU   BCTLPID
BCTMDCB  EQU   BCT+24
BCTPGTE  EQU   BCT+20
BCTRADDR EQU   BCT+16
BCTVADDR EQU   BCT+12
BCTASID  EQU   BCT+10
BCTKEY2  EQU   BCT+9
BCTKEY1  EQU   BCT+8
BCTNEXT  EQU   BCT+4
BCTBCT   EQU   BCT
BCTHLAST EQU   BCTH+8
BCTHFRST EQU   BCTH+4
BCTHBCTH EQU   BCTH
ARBADDRE EQU   ARB+4
ARBADDRB EQU   ARB
GTMSAVE  EQU   SADMPLSD+684
GTMNAME  EQU   SADMPLSD+680
FRMSAVE  EQU   SADMPLSD+580
FRMNAME  EQU   SADMPLSD+576
AUDSAVE  EQU   SADMPLSD+476
AUDNAME  EQU   SADMPLSD+472
IOISAVE  EQU   SADMPLSD+372
IOINAME  EQU   SADMPLSD+368
PGISAVE  EQU   SADMPLSD+268
PGINAME  EQU   SADMPLSD+264
SVISAVE  EQU   SADMPLSD+164
SVINAME  EQU   SADMPLSD+160
LOWCRS   EQU   SADMPLSD+96
LOWGRS   EQU   SADMPLSD+32
SAVEDUMP EQU   SADMPLSD+24
AUDPSW   EQU   SADMPLSD+16
SVIRPSW  EQU   SADMPLSD+8
PSWSADMP EQU   SADMPLSD
@NM00024 EQU   PSA+3668
PSASTAK  EQU   PSA+3072
@NM00023 EQU   PSA+1040
PSAUSEND EQU   PSA+1040
PSARV062 EQU   PSA+1036
PSAATCVT EQU   PSA+1032
PSAPCPSW EQU   PSA+1024
PSAPIR2  EQU   PSA+1020
PSARV059 EQU   PSA+1018
PSASVC13 EQU   PSA+1016
PSALSFCC EQU   PSA+1012
PSASFACC EQU   PSA+1008
PSASTOP  EQU   PSA+992
PSASTART EQU   PSA+976
PSARSPSW EQU   PSA+968
PSASRPSW EQU   PSA+960
PSARV045 EQU   PSA+892
PSARV044 EQU   PSA+888
PSARV043 EQU   PSA+884
PSARV042 EQU   PSA+880
PSARV041 EQU   PSA+876
PSARV040 EQU   PSA+872
PSARV025 EQU   PSA+868
PSADSSED EQU   PSA+868
PSADSSPR EQU   PSA+864
PSADSSFW EQU   PSA+860
PSADSS14 EQU   PSA+856
PSADSSPP EQU   PSA+848
PSADSSRP EQU   PSA+840
PSADSS05 EQU   PSADSSF4
PSADSS10 EQU   PSADSSF4
PSADSSVE EQU   PSADSSF4
PSADSSDE EQU   PSADSSF4
PSADSSC0 EQU   PSADSSF4
PSADSSIE EQU   PSADSSF4
PSADSS12 EQU   PSADSSF4
PSADSSRC EQU   PSADSSF4
PSARV057 EQU   PSADSSF3
PSARV056 EQU   PSADSSF3
PSARV055 EQU   PSADSSF3
PSADSSMC EQU   PSADSSF3
PSADSSRW EQU   PSADSSF3
PSADSSNM EQU   PSADSSF3
PSADSSES EQU   PSADSSF3
PSADSSGP EQU   PSADSSF3
PSADSSF2 EQU   PSADSSFL+1
PSADSSPI EQU   PSADSSF1
PSADSSOI EQU   PSADSSF1
PSADSSSP EQU   PSADSSF1
PSADSSTP EQU   PSADSSF1
PSADSSDW EQU   PSADSSF1
PSADSSDD EQU   PSADSSF1
PSADSSDM EQU   PSADSSF1
PSADSSMV EQU   PSADSSF1
PSADSSTS EQU   PSA+816
PSADSSWK EQU   PSA+812
PSADSSR3 EQU   PSA+808
PSADSSR2 EQU   PSA+804
PSADSSRS EQU   PSA+800
PSASTOR  EQU   PSA+796
PSACPUSA EQU   PSA+794
PSAVSTAP EQU   PSA+792
PSAWKVAP EQU   PSA+788
PSAWKRAP EQU   PSA+784
PSAMCHIC EQU   PSA+783
PSARV061 EQU   PSA+782
PSASYMSK EQU   PSA+781
PSAMCHFL EQU   PSA+780
PSACR0   EQU   PSA+776
PSAPSWSV EQU   PSA+768
PSALITA  EQU   PSA+764
PSACLHS  EQU   PSAHLHI
PSALKR15 EQU   PSALKSA+60
PSALKR14 EQU   PSALKSA+56
PSALKR13 EQU   PSALKSA+52
PSALKR12 EQU   PSALKSA+48
PSALKR11 EQU   PSALKSA+44
PSALKR10 EQU   PSALKSA+40
PSALKR9  EQU   PSALKSA+36
PSALKR8  EQU   PSALKSA+32
PSALKR7  EQU   PSALKSA+28
PSALKR6  EQU   PSALKSA+24
PSALKR5  EQU   PSALKSA+20
PSALKR4  EQU   PSALKSA+16
PSALKR3  EQU   PSALKSA+12
PSALKR2  EQU   PSALKSA+8
PSALKR1  EQU   PSALKSA+4
PSALKR0  EQU   PSALKSA
PSARV023 EQU   PSACLHT+52
PSALOCAL EQU   PSACLHT+48
PSACMSL  EQU   PSACLHT+44
PSAOPTL  EQU   PSACLHT+40
PSATPACL EQU   PSACLHT+36
PSATPDNL EQU   PSACLHT+32
PSATPNCL EQU   PSACLHT+28
PSAIOSLL EQU   PSACLHT+24
PSAIOSUL EQU   PSACLHT+20
PSAIOSCL EQU   PSACLHT+16
PSAIOSSL EQU   PSACLHT+12
PSASALCL EQU   PSACLHT+8
PSAASML  EQU   PSACLHT+4
PSADISPL EQU   PSACLHT
PSASRSA  EQU   PSA+636
PSARV050 EQU   PSA+634
PSADSSGO EQU   PSA+633
PSARECUR EQU   PSA+632
PSAHLHIS EQU   PSA+628
PSAIPCSA EQU   PSA+624
@NM00022 EQU   PSA+621
PSAIPCDM EQU   PSA+620
PSAIPCD  EQU   PSA+616
@NM00021 EQU   PSA+613
PSAIPCRM EQU   PSA+612
PSAIPCR  EQU   PSA+608
PSAMCHEX EQU   PSA+600
PSAMPSW  EQU   PSA+592
PSAEXPS2 EQU   PSA+584
PSAEXPS1 EQU   PSA+576
PSAPIREG EQU   PSA+572
PSARSREG EQU   PSA+568
PSAGPREG EQU   PSA+556
PSARV022 EQU   PSASUP4
PSARV021 EQU   PSASUP4
PSARV020 EQU   PSASUP4
PSARV019 EQU   PSASUP4
PSARV018 EQU   PSASUP4
PSARV017 EQU   PSASUP4
PSARV016 EQU   PSASUP4
PSARV015 EQU   PSASUP4
PSARV014 EQU   PSASUP3
PSARV013 EQU   PSASUP3
PSARV012 EQU   PSASUP3
PSARV011 EQU   PSASUP3
PSARV010 EQU   PSASUP3
PSAPSREG EQU   PSASUP3
PSAPI2   EQU   PSASUP3
PSAIOSUP EQU   PSASUP3
PSALCR   EQU   PSASUP2
PSARTM   EQU   PSASUP2
PSAACR   EQU   PSASUP2
PSAIPCE2 EQU   PSASUP2
PSAIPCES EQU   PSASUP2
PSAIPCEC EQU   PSASUP2
PSAGTF   EQU   PSASUP2
PSAIPCRI EQU   PSASUP2
PSAIPCRP EQU   PSASUP1
PSAIPCDR EQU   PSASUP1
PSADISP  EQU   PSASUP1
PSALOCK  EQU   PSASUP1
PSAPI    EQU   PSASUP1
PSAEXT   EQU   PSASUP1
PSASVC   EQU   PSASUP1
PSAIO    EQU   PSASUP1
PSAAOLD  EQU   PSA+548
PSAANEW  EQU   PSA+544
PSATOLD  EQU   PSA+540
PSATNEW  EQU   PSA+536
PSALCCAR EQU   PSA+532
PSALCCAV EQU   PSA+528
PSAPCCAR EQU   PSA+524
PSAPCCAV EQU   PSA+520
PSACPULA EQU   PSA+518
PSACPUPA EQU   PSA+516
PSAPSA   EQU   PSA+512
FLCHDEND EQU   PSA+512
FLCCRSAV EQU   FLCMCLA+280
FLCGRSAV EQU   FLCMCLA+216
FLCFPSAV EQU   FLCMCLA+184
FLCFLA   EQU   FLCMCLA+88
FLCRGNCD EQU   FLCMCLA+84
FLCFSAA  EQU   FLCFSA+1
@NM00020 EQU   FLCFSA
@NM00019 EQU   FLCMCLA+72
FLCMCIC  EQU   FLCMCLA+64
@NM00018 EQU   FLCMCLA+20
@NM00017 EQU   FLCIOA
@NM00016 EQU   FLCMCLA+15
@NM00015 EQU   FLCMCLA+14
@NM00014 EQU   FLCMCLA+12
FLCLCL   EQU   FLCMCLA+8
FLCIOELA EQU   FLCIOEL+1
@NM00013 EQU   FLCIOEL
FLCCHNID EQU   FLCMCLA
@NM00012 EQU   PSA+160
FLCMTRCD EQU   PSA+157
@NM00011 EQU   PSA+156
FLCPERA  EQU   FLCPER+1
@NM00010 EQU   FLCPER
@NM00009 EQU   PSA+151
FLCPERCD EQU   PSA+150
FLCMCNUM EQU   PSA+149
@NM00008 EQU   PSA+148
FLCTEAA  EQU   FLCTEA+1
@NM00007 EQU   FLCTEA
PSAPIPC  EQU   PSAPICOD
PSAPIMC  EQU   PSAPICOD
PSAPIPER EQU   PSAPICOD
PSARV049 EQU   FLCPICOD
FLCPILCB EQU   FLCPIILC
@NM00006 EQU   FLCPIILC
@NM00005 EQU   PSAEPPSW
FLCSVCN  EQU   PSAESPSW+2
FLCSILCB EQU   FLCSVILC
@NM00004 EQU   FLCSVILC
@NM00003 EQU   PSAESPSW
FLCEICOD EQU   PSAEEPSW+2
PSASPAD  EQU   PSAEEPSW
@NM00002 EQU   PSA+128
FLCMNPSW EQU   PSA+112
FLCPNPSW EQU   PSA+104
FLCSNPSW EQU   PSA+96
FLCENPSW EQU   PSA+88
FLCTRACE EQU   PSA+84
FLCTIMER EQU   PSA+80
FLCCVT2  EQU   PSA+76
FLCMOPSW EQU   PSA+48
FLCPOPSW EQU   PSA+40
FLCSOPSW EQU   PSA+32
FLCEOPSW EQU   PSA+24
@NM00001 EQU   FLCICCW2+4
FLCCVT   EQU   FLCICCW2
FLCICCW1 EQU   FLCROPSW
FLCIPPSW EQU   FLCRNPSW
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RT00293 EQU   REPRO
@RF00293 EQU   REPEATOP
@RT00301 EQU   RC0
@RF00352 EQU   NEWTAPEM
@RT00430 EQU   REPRO
@RT00433 EQU   REPEATOP
@RT00451 EQU   REPRO
@RT00472 EQU   RC0
@RC00489 EQU   NEWTAPEM
@RT00522 EQU   NEWTAPE
@RF00558 EQU   RETEST
@RT00562 EQU   TERMEXIT
@RT00567 EQU   PTERM
@RT00580 EQU   PTERM
@RT00594 EQU   REPEATOP
@RF00607 EQU   PTERM
@RT00618 EQU   RUNONLY
@RT00746 EQU   TIO1
@RT00748 EQU   ERROR
@RT00754 EQU   TIO1
@RT00761 EQU   TIO2
@RT00794 EQU   INRERR
@RT00802 EQU   INRREP
@RT00824 EQU   ENABWAIT
@RT00845 EQU   ERBIDSET
ERBRET   EQU   @EL00008
@RF00848 EQU   ERBRET
@ENDDATA EQU   *
         END   AMDSATER,(C'PLS1917',0603,75153)
