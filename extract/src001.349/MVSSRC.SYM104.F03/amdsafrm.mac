         TITLE 'AMDSAFRM   DYNAMIC STORAGE DEALLOCATION ROUTINE        *
                       '
AMDSAFRM CSECT
         STM   R0,R15,FRMSAVE         SAVE REGISTERS IN LOW CORE
         BALR  BASEREG,0              SET UP ADDRESSABILITY
         USING *,BASEREG
         STOSM FRMMASK,0              GET CURRENT SYSTEM MASK
*                                                                  0173
*   /*****************************************************************/
*   /*                                                               */
*   /* IF CALLER WAS EXECUTING IN TRANSLATED MODE, CONVERT ADDRESS TO*/
*   /* BE FREED TO A REAL ADDRESS. CHECK IF STORAGE TO BE FREED HAS  */
*   /* BEEN ALLOCATED.                                               */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0173
*/* D (YES,,NO,%FRMCONT) DAT BIT ON IN FRMMASK                       */
*/* P SUBTRACT VCTLPA FROM R1 TO GET REAL ADDR                       */
*/*%FRMCONT: P OBTAIN DSCE FROM VCTDSCE                              */
*/* D (NO,,YES,FRMERROR) R1 < DSCEBEGN                               */
*/* D (NO,,YES,FRMERROR) R1 > DSCENEXT - X'100'                      */
*/* P COMPUTE (R1 - DSCEBEGN) / X'100'                               */
*/* D (YES,,NO,FRMERROR) REMAINDER = 0                               */
*   FRMRELOC = 0;                   /* SET RELOCATION ADDRESS TO 0   */
         SR    FRMRELOC,FRMRELOC                                   0173
*   IF PSWDAT = ON THEN             /* CALLER EXECUTING IN TRANSLATED
*                                      MODE                          */
         LA    @15,FRMMASK                                         0174
         TM    PSWDAT(@15),B'00000100'                             0174
         BNO   @RF00174                                            0174
*     DO;                           /* YES -                         */
*       R1 = R1 - VCTLPA;           /* YES - CONVERT AREA ADDRESS TO
*                                      REAL                          */
         L     @15,VCTLPA(,VCCTREG)                                0176
         SR    R1,@15                                              0176
*       FRMRELOC = VCTLPA;          /* SET UP RELOCATION ADDRESS     */
         LR    FRMRELOC,@15                                        0177
*     END;                                                         0178
*   IF R1 < DSCEBEGN THEN           /* ADDRESS LESS THAN BEGINNING OF
*                                      DYNAMIC AREA                  */
@RF00174 LR    @15,FRMRELOC                                        0179
         A     @15,VCTDSCE(,VCCTREG)                               0179
         L     @10,DSCEBEGN(,@15)                                  0179
         CR    R1,@10                                              0179
         BL    @RT00179                                            0179
*     GO TO FRMERROR;               /* YES - ERROR                   */
*   IF R1 > DSCENEXT - STORSIZE THEN /* ADDRESS GREATER THAN LAST  0181
*                                      ALLOCATED ADDRESS             */
         L     @05,DSCENEXT(,@15)                                  0181
         SH    @05,@CH00446                                        0181
         CR    R1,@05                                              0181
         BH    @RT00181                                            0181
*     GO TO FRMERROR;               /* YES - ERROR                   */
*   IF (R1 - DSCEBEGN) // STORSIZE ^= 0 THEN /* INTEGRAL NUMBER OF 0183
*                                      ALLOCATED STORAGE UNITS       */
         LR    @02,@10                                             0183
         LCR   @02,@02                                             0183
         AR    @02,R1                                              0183
         SRDA  @02,32                                              0183
         D     @02,@CF00446                                        0183
         LTR   @02,@02                                             0183
         BNZ   @RT00183                                            0183
*     GO TO FRMERROR;               /* NO - ERROR                    */
*                                                                  0185
*   /*****************************************************************/
*   /*                                                               */
*   /* STORAGE TO BE FREED IS VALID. UPDATE DSCE AND RETURN TO CALLER*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0185
*/* P SET DSCENEXT = R1                                              */
*/* P MARK AREA AS FREED ('F' IN FIRST BYTE)                         */
*/* P RESTORE REGISTERS FROM FRMSAVE                                 */
*/* P SET RETURN CODE = 0                                            */
*/* R RETURN TO CALLER                                               */
*   DSCENEXT = R1;                  /* POINT NEXT AVAILABLE SPACE TO
*                                      AREA REQUESTED                */
         ST    R1,DSCENEXT(,@15)                                   0185
*   EVAL(R1+FRMRELOC) -> SAVEID = 'F'; /* MARK AREA AS FREED         */
         LR    @15,R1                                              0186
         AR    @15,FRMRELOC                                        0186
         MVI   SAVEID(@15),C'F'                                    0186
*   RESPECIFY (RETREG,RETCODE) RESTRICTED;                         0187
*   GEN(LM    R0,R15,FRMSAVE);      /* RESTORE CALLER'S REGISTERS    */
         LM    R0,R15,FRMSAVE
*   RETCODE = 0;                    /* SET UP ZERO RETURN CODE       */
         SR    RETCODE,RETCODE                                     0189
*   GENERATE REFS(RETREG) (BR    RETREG); /* RETURN TO CALLER        */
         BR    RETREG
*   RESPECIFY (RETREG,RETCODE) UNRESTRICTED;                       0191
*                                                                  0192
*   /*****************************************************************/
*   /*                                                               */
*   /* AREA TO BE FREED IS INVALID. SINCE THIS IS PROBABLY A SAVE    */
*   /* AREA, USING IT TO RESTORE REGISTERS MAY CAUSE PROBLEMS. INVOKE*/
*   /* AMDSAAUD TO HANDLE ERROR RECOVERY.                            */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0192
*/*FRMERROR: P SET VCTSADMP BIT REQUESTING DUMP                      */
*/* P SET UP ERROR CODE                                              */
*/* P RESTORE REGISTERS FROM FRMSAVE                                 */
*/* N AMDSAAUD IS CALLED VIA SVC 13 TO DUMP AND RECOVER FROM ERROR   */
*/* R AMDSAAUD: PERFORM ERROR RECOVERY                               */
*/*AMDSAFRM: END                                                     */
*                                                                  0192
*FRMERROR:                                                         0192
*   VCTSADMP = ON;                  /* SET DUMP REQUEST BIT          */
FRMERROR OI    VCTSADMP(VCCTREG),B'10000000'                       0192
*   VCTAUDIT = FRMERCD;             /* SET UP ERROR CODE             */
         MVC   VCTAUDIT(2,VCCTREG),FRMERCD                         0193
*   RESPECIFY RETREG RESTRICTED;                                   0194
*   GEN(LM    R0,R15,FRMSAVE);      /* RESTORE CALLER'S REGISTERS    */
         LM    R0,R15,FRMSAVE
*   SVC(AUDSVC);                    /* CALL AMDSAAUD - CONTROL WILL
*                                      BE RETURNED TO THE FIRST RCB
*                                      EXIT                          */
         SVC   13                                                  0196
*   RESPECIFY RETREG UNRESTRICTED;                                 0197
*   END AMDSAFRM                                                   0198
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.      *
*/*%INCLUDE SYSLIB  (AMDSARMK)                                        *
*;                                                                 0198
@DATA    DS    0H
         DS    0F
         DS    0F
@CF00446 DC    F'256'
@CH00446 EQU   @CF00446+2
         DS    0D
FRMMASK  DC    X'00'
FRMERCD  DS    BL2
         ORG   FRMERCD
@NM00031 DC    X'01'
@NM00032 DC    AL1(5)
         ORG   FRMERCD+2
         DS    CL1
FRMPATCH DC    13F'0'
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
FRMRELOC EQU   @04
VCCTREG  EQU   @12
RETREG   EQU   @14
RETCODE  EQU   @15
BASEREG  EQU   @11
R0       EQU   @00
R1       EQU   @01
R13      EQU   @13
R15      EQU   @15
R10      EQU   @10
R11      EQU   @11
R12      EQU   @12
R14      EQU   @14
R2       EQU   @02
R3       EQU   @03
R4       EQU   @04
R5       EQU   @05
R6       EQU   @06
R7       EQU   @07
R8       EQU   @08
R9       EQU   @09
SADMPLSD EQU   3312
FRMSAVE  EQU   SADMPLSD+580
ARB      EQU   0
BCTH     EQU   0
BCT      EQU   0
BCTLPID  EQU   BCT+28
BCTFLGT  EQU   BCT+44
BCTFLGI  EQU   BCT+45
CCT      EQU   0
CTFLG1   EQU   CCT+1
CTFLG2   EQU   CCT+2
CTLOWFLG EQU   CCT+48
CTDMPTYP EQU   CCT+52
CTIOTYPE EQU   CTDMPTYP
CTCONFLG EQU   CTDMPTYP+2
CTBUFTYP EQU   CTDMPTYP+3
CTPRMT1  EQU   CTDMPTYP+24
CTPRMT2  EQU   CTDMPTYP+26
CCW      EQU   0
CCWFLAGS EQU   CCW+4
CSW      EQU   0
CSWKEY00 EQU   CSW
CSWUSTAT EQU   CSW+4
CSWCSTAT EQU   CSW+5
DSCE     EQU   0
DSCEBEGN EQU   DSCE+4
DSCENEXT EQU   DSCE+8
IODB     EQU   0
IODBFLAG EQU   IODB+8
IODBCCHH EQU   IODB+32
IODBSRCH EQU   IODBCCHH+3
MDCE     EQU   0
MDCB     EQU   0
MDCBGRS  EQU   MDCB+16
MDCBFLGS EQU   MDCB+86
PSW      EQU   0
PSWSM    EQU   PSW
PSWDAT   EQU   PSWSM
@NM00023 EQU   PSW+1
PSWCCPM  EQU   PSW+2
@NM00026 EQU   PSW+3
PTRT     EQU   0
PTRTRSA  EQU   0
RCB      EQU   0
VCCT     EQU   0
VCTRECSN EQU   VCCT+8
VCTFLGS  EQU   VCCT+9
VCTSADMP EQU   VCTFLGS
VCTMDCE  EQU   VCCT+12
VCTDSCE  EQU   VCCT+20
VCTBCTH  EQU   VCCT+24
VCTAUDIT EQU   VCCT+62
VCTCBID  EQU   VCCT+64
VCTLPA   EQU   VCCT+84
SDL      EQU   0
REGLOCAL EQU   0
SAVEFORM EQU   0
SAVEID   EQU   SAVEFORM
PTRTVSA  EQU   0
CTLOWDMP EQU   CTDMPTYP
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
CTADDRE  EQU   CTLOWDMP+4
CTADDRS  EQU   CTLOWDMP
SAVER12  EQU   SAVEFORM+68
SAVER11  EQU   SAVEFORM+64
SAVER10  EQU   SAVEFORM+60
SAVER9   EQU   SAVEFORM+56
SAVER8   EQU   SAVEFORM+52
SAVER7   EQU   SAVEFORM+48
SAVER6   EQU   SAVEFORM+44
SAVER5   EQU   SAVEFORM+40
SAVER4   EQU   SAVEFORM+36
SAVER3   EQU   SAVEFORM+32
SAVER2   EQU   SAVEFORM+28
SAVER1   EQU   SAVEFORM+24
SAVER0   EQU   SAVEFORM+20
SAVER15  EQU   SAVEFORM+16
SAVER14  EQU   SAVEFORM+12
SAVENEXT EQU   SAVEFORM+8
SAVEBACK EQU   SAVEFORM+4
SAVENAME EQU   SAVEFORM+1
REGL15   EQU   REGLOCAL+60
REGL14   EQU   REGLOCAL+56
REGL13   EQU   REGLOCAL+52
REGL12   EQU   REGLOCAL+48
REGL11   EQU   REGLOCAL+44
REGL10   EQU   REGLOCAL+40
REGL9    EQU   REGLOCAL+36
REGL8    EQU   REGLOCAL+32
REGL7    EQU   REGLOCAL+28
REGL6    EQU   REGLOCAL+24
REGL5    EQU   REGLOCAL+20
REGL4    EQU   REGLOCAL+16
REGL3    EQU   REGLOCAL+12
REGL2    EQU   REGLOCAL+8
REGL1    EQU   REGLOCAL+4
REGL0    EQU   REGLOCAL
SDLSPN   EQU   SDL+1
SDLNUM   EQU   SDL
VCTVCCTV EQU   VCCT+108
VCTCCTV  EQU   VCCT+104
@NM00030 EQU   VCCT+102
VCTEXTRA EQU   VCCT+100
VCTCPOUT EQU   VCCT+96
VCTSVCTB EQU   VCCT+92
VCTPGT   EQU   VCCT+88
VCTCBADR EQU   VCCT+80
VCTJBNME EQU   VCCT+72
VCTCBIDN EQU   VCTCBID+7
@NM00029 EQU   VCTCBID
VCTASID  EQU   VCCT+60
VCTPTRT  EQU   VCCT+56
VCTMASCB EQU   VCCT+52
VCTASCB  EQU   VCCT+48
VCTCPUC  EQU   VCCT+46
VCTWKC   EQU   VCCT+45
VCTWKHI  EQU   VCCT+44
VCTSUBPL EQU   VCCT+40
VCTARB   EQU   VCCT+36
VCTIODB  EQU   VCCT+32
VCTBCTC  EQU   VCCT+28
VCTSTOR  EQU   VCCT+16
VCTRECVA EQU   VCCT+10
@NM00028 EQU   VCTFLGS
VCTLRCLM EQU   VCTFLGS
VCTARCLM EQU   VCTFLGS
VCTASMIC EQU   VCTFLGS
VCTMEMIN EQU   VCTFLGS
@NM00027 EQU   VCTRECSN
VCTRSMR  EQU   VCTRECSN
VCTEXIR  EQU   VCTRECSN
VCTUPDR  EQU   VCTRECSN
VCTPGIR  EQU   VCTRECSN
VCTRCB   EQU   VCCT+4
VCTVCT   EQU   VCCT
RCBBASE  EQU   RCB+16
RCBEXIT  EQU   RCB+12
RCBSAVE  EQU   RCB+8
RCBSTOR  EQU   RCB+4
RCBNEXT  EQU   RCB
PTRTVS   EQU   PTRT+1032
PTRTRS   EQU   PTRT+8
PTRTLGID EQU   PTRT+4
PTRTPTRT EQU   PTRT
PSWEND   EQU   PSW+8
PSWIA    EQU   PSW+4
PSWSP    EQU   @NM00026
PSWSIG   EQU   PSWCCPM
PSWEU    EQU   PSWCCPM
PSWDO    EQU   PSWCCPM
PSWFPO   EQU   PSWCCPM
@NM00025 EQU   PSWCCPM
@NM00024 EQU   PSWCCPM
PSWPRBLM EQU   @NM00023
PSWAIT   EQU   @NM00023
PSWMCH   EQU   @NM00023
PSWMODE  EQU   @NM00023
PSWKEY   EQU   @NM00023
PSWXTRNL EQU   PSWSM
PSWIO    EQU   PSWSM
@NM00022 EQU   PSWSM
@NM00021 EQU   PSWSM
@NM00020 EQU   PSWSM
PSWPER   EQU   PSWSM
@NM00019 EQU   PSWSM
@NM00018 EQU   MDCB+87
@NM00017 EQU   MDCBFLGS
MDCBDUMP EQU   MDCBFLGS
MDCBASMI EQU   MDCBFLGS
MDCBPI   EQU   MDCB+84
MDCBSTOR EQU   MDCB+80
MDCBGR15 EQU   MDCBGRS+60
MDCBGR14 EQU   MDCBGRS+56
MDCBGR13 EQU   MDCBGRS+52
MDCBGR12 EQU   MDCBGRS+48
MDCBGR11 EQU   MDCBGRS+44
MDCBGR10 EQU   MDCBGRS+40
MDCBGR9  EQU   MDCBGRS+36
MDCBGR8  EQU   MDCBGRS+32
MDCBGR7  EQU   MDCBGRS+28
MDCBGR6  EQU   MDCBGRS+24
MDCBGR5  EQU   MDCBGRS+20
MDCBGR4  EQU   MDCBGRS+16
MDCBGR3  EQU   MDCBGRS+12
MDCBGR2  EQU   MDCBGRS+8
MDCBGR1  EQU   MDCBGRS+4
MDCBGR0  EQU   MDCBGRS
MDCBPSW  EQU   MDCB+8
MDCBNEXT EQU   MDCB+4
MDCBMDCB EQU   MDCB
MDCEAVIL EQU   MDCE+8
MDCEACTV EQU   MDCE+4
MDCEMDCE EQU   MDCE
IODBSENS EQU   IODB+40
IODBR    EQU   IODBCCHH+7
IODBHH   EQU   IODBSRCH+2
IODBCC   EQU   IODBSRCH
IODBSEEK EQU   IODBCCHH+1
IODBM    EQU   IODBCCHH
IODBCSW  EQU   IODB+24
IODBCAW  EQU   IODB+20
IODBBCT  EQU   IODB+16
IODBCPU  EQU   IODB+14
IODBTYPE EQU   IODB+13
IODBCLAS EQU   IODB+12
IODBDEV  EQU   IODB+10
@NM00016 EQU   IODBFLAG+1
IODBSTRT EQU   IODBFLAG
IODBCONW EQU   IODBFLAG
IODBACTV EQU   IODBFLAG
IODBHALT EQU   IODBFLAG
IODBIOC  EQU   IODBFLAG
IODBINT  EQU   IODBFLAG
IODBPTRM EQU   IODBFLAG
IODBTERM EQU   IODBFLAG
IODBIDEN EQU   IODB+4
IODBIODB EQU   IODB
DSCETEND EQU   DSCE+20
DSCETCUR EQU   DSCE+16
DSCETBEG EQU   DSCE+12
DSCEDSCE EQU   DSCE
CSWCNT   EQU   CSW+6
CSWCHC   EQU   CSWCSTAT
CSWICC   EQU   CSWCSTAT
CSWCCC   EQU   CSWCSTAT
CSWCDC   EQU   CSWCSTAT
CSWPTC   EQU   CSWCSTAT
CSWPGC   EQU   CSWCSTAT
CSWIL    EQU   CSWCSTAT
CSWPCI   EQU   CSWCSTAT
CSWUE    EQU   CSWUSTAT
CSWUC    EQU   CSWUSTAT
CSWDE    EQU   CSWUSTAT
CSWCE    EQU   CSWUSTAT
CSWBUSY  EQU   CSWUSTAT
CSWCUE   EQU   CSWUSTAT
CSWSTMOD EQU   CSWUSTAT
CSWATTN  EQU   CSWUSTAT
CSWCADDR EQU   CSW+1
@NM00015 EQU   CSWKEY00
CSWKEY   EQU   CSWKEY00
CCWCNT   EQU   CCW+6
@NM00014 EQU   CCW+5
@NM00013 EQU   CCWFLAGS
CCWIDA   EQU   CCWFLAGS
CCWPCI   EQU   CCWFLAGS
CCWSKIP  EQU   CCWFLAGS
CCWSLI   EQU   CCWFLAGS
CCWCC    EQU   CCWFLAGS
CCWDC    EQU   CCWFLAGS
CCWDADDR EQU   CCW+1
CCWCMD   EQU   CCW
CTHWMAX  EQU   CTDMPTYP+29
CTHWM    EQU   CTDMPTYP+28
CTPRMT2X EQU   CTPRMT2+1
CTPRMT2Y EQU   CTPRMT2
CTPRMT1X EQU   CTPRMT1+1
CTPRMT1Y EQU   CTPRMT1
CTVCCT   EQU   CTDMPTYP+20
CTEOR    EQU   CTDMPTYP+16
CTCOMMIO EQU   CTDMPTYP+12
CTLWKAD  EQU   CTDMPTYP+8
CTCONSOL EQU   CTDMPTYP+4
@NM00012 EQU   CTBUFTYP
CTDUMP   EQU   CTBUFTYP
CTLSQA   EQU   CTBUFTYP
CTASM    EQU   CTBUFTYP
CTPGT    EQU   CTBUFTYP
CTWKFLE  EQU   CTBUFTYP
@NM00011 EQU   CTBUFTYP
@NM00010 EQU   CTCONFLG
CTREAD   EQU   CTCONFLG
CTMSGOUT EQU   CTCONFLG
@NM00009 EQU   CTDMPTYP+1
@NM00008 EQU   CTIOTYPE
CTIORSET EQU   CTIOTYPE
CTIOINT  EQU   CTIOTYPE
CTIOCON  EQU   CTIOTYPE
CTIOWK   EQU   CTIOTYPE
CTIODA   EQU   CTIOTYPE
CTIOOUT  EQU   CTIOTYPE
CTIOTERM EQU   CTIOTYPE
CTEBCOPR EQU   CCT+49
@NM00007 EQU   CTLOWFLG
CTWKSTUS EQU   CTLOWFLG
CTINIT   EQU   CTLOWFLG
CTFP     EQU   CTLOWFLG
CTVIRTD  EQU   CTLOWFLG
CTEBCOPD EQU   CCT+45
CTCONTYP EQU   CCT+44
CTOUTAD  EQU   CCT+42
CTCPUI   EQU   CCT+40
CTERBCON EQU   CCT+36
CTERBTPE EQU   CCT+32
CTERBDA  EQU   CCT+28
CTCCHHW  EQU   CCT+24
CTCCHHE  EQU   CCT+20
CTCCHHS  EQU   CCT+16
CTPGECNT EQU   CCT+15
CTCCHHR  EQU   CCT+8
CTINADDR EQU   CCT+6
CTSENSE  EQU   CCT+4
CTDEVTYP EQU   CCT+3
@NM00006 EQU   CTFLG2
CTALTCON EQU   CTFLG2
CTWKDONE EQU   CTFLG2
CTVIRTR  EQU   CTFLG2
CTNOSTAT EQU   CTFLG2
CTPGEFLT EQU   CTFLG2
CTSTOR   EQU   CTFLG2
CTDUPSW  EQU   CTFLG2
CTERREC  EQU   CTFLG1
CTMP     EQU   CTFLG1
@NM00005 EQU   CTFLG1
CTDEFO   EQU   CTFLG1
CTWORK   EQU   CTFLG1
CTMORTPE EQU   CTFLG1
CTDEVICE EQU   CTFLG1
CTERROR  EQU   CTFLG1
CTWAIT   EQU   CCT
@NM00004 EQU   BCT+46
BCTRECLM EQU   BCTFLGI
BCTIOERR EQU   BCTFLGI
BCTALLOC EQU   BCTFLGI
BCTCOMP  EQU   BCTFLGI
@NM00003 EQU   BCTFLGT
BCTPGTF  EQU   BCTFLGT
BCTDUMP  EQU   BCTFLGT
BCTLSQA  EQU   BCTFLGT
BCTASM   EQU   BCTFLGT
BCTPGT   EQU   BCTFLGT
BCTWKFLE EQU   BCTFLGT
@NM00002 EQU   BCTFLGT
BCTRBA   EQU   BCT+40
BCTAMB   EQU   BCT+36
@NM00001 EQU   BCTLPID+4
BCTLGN   EQU   BCTLPID
BCTMDCB  EQU   BCT+24
BCTPGTE  EQU   BCT+20
BCTRADDR EQU   BCT+16
BCTVADDR EQU   BCT+12
BCTASID  EQU   BCT+10
BCTKEY2  EQU   BCT+9
BCTKEY1  EQU   BCT+8
BCTNEXT  EQU   BCT+4
BCTBCT   EQU   BCT
BCTHLAST EQU   BCTH+8
BCTHFRST EQU   BCTH+4
BCTHBCTH EQU   BCTH
ARBADDRE EQU   ARB+4
ARBADDRB EQU   ARB
GTMSAVE  EQU   SADMPLSD+684
GTMNAME  EQU   SADMPLSD+680
FRMNAME  EQU   SADMPLSD+576
AUDSAVE  EQU   SADMPLSD+476
AUDNAME  EQU   SADMPLSD+472
IOISAVE  EQU   SADMPLSD+372
IOINAME  EQU   SADMPLSD+368
PGISAVE  EQU   SADMPLSD+268
PGINAME  EQU   SADMPLSD+264
SVISAVE  EQU   SADMPLSD+164
SVINAME  EQU   SADMPLSD+160
LOWCRS   EQU   SADMPLSD+96
LOWGRS   EQU   SADMPLSD+32
SAVEDUMP EQU   SADMPLSD+24
AUDPSW   EQU   SADMPLSD+16
SVIRPSW  EQU   SADMPLSD+8
PSWSADMP EQU   SADMPLSD
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RT00179 EQU   FRMERROR
@RT00181 EQU   FRMERROR
@RT00183 EQU   FRMERROR
@ENDDATA EQU   *
         END   AMDSAFRM,(C'PL/S-II',0502,73230)
