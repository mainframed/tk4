         TITLE 'AMDSAARD ADDRESS RANGE DUMP ROUTINE                    *
                       '
AMDSAARD CSECT ,                                                01S0001
@MAINENT DS    0H                                               01S0001
         USING *,@15                                            01S0001
         B     @PROLOG                                          01S0001
         DC    AL1(16)                                          01S0001
         DC    C'AMDSAARD  74.035'                              01S0001
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                  01S0001
         BALR  @11,0                                            01S0001
@PSTART  DS    0H                                               01S0001
         USING @PSTART,@11                                      01S0001
         ST    @13,@SA00001+4                                   01S0001
         LA    @14,@SA00001                                     01S0001
         ST    @14,8(,@13)                                      01S0001
         LR    @13,@14                                          01S0001
*   SAVEFORM(1:4) = 'LARD';         /* MOVE MODULE ID TO SAVE AREA   */
         MVC   SAVEFORM(4,R13),@CC00641                         01S0177
*   RCBSAVE = R13;                  /* SAVE AREA ADDRESS TO RCB      */
         LA    @10,ARDRCB                                       01S0178
         ST    R13,RCBSAVE(,@10)                                01S0178
*   RCBBASE = BASEREG;              /* BASE REGISTER TO RCB          */
         ST    BASEREG,RCBBASE(,@10)                            01S0179
*   RCBNEXT = VCTRCB;               /* CHAIN RCB TO RCB CHAIN        */
         MVC   RCBNEXT(4,@10),VCTRCB(VCCTREG)                   01S0180
*   RCBEXIT = ADDR(ARDRET);         /* SET UP EXIT ADDRESS           */
         LA    @15,ARDRET                                       01S0181
         ST    @15,RCBEXIT(,@10)                                01S0181
*   GENERATE REFS(R1) SETS(ARDSTOR1) (STCTL R1,R1,ARDSTOR1); /* 01S0182
*                                      SEGMENT TABLE ORIGIN TO RCB   */
         STCTL R1,R1,ARDSTOR1
*   VCTRCB = ADDR(ARDRCB);          /* MAKE RCB ACTIVE               */
         LA    @10,ARDRCB                                       01S0183
         ST    @10,VCTRCB(,VCCTREG)                             01S0183
*                                                               01S0184
*   /*****************************************************************/
*   /*                                                               */
*   /* IS THIS AN ARB BUILD REQUEST OR A DUMP REQUEST. IF A DUMP     */
*   /* REQUEST, INVOKE DUMP ROUTINE AND TAKE RETURN PATH.            */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0184
*/* D (NO,%ARDBLD,YES,%ARDDMP) BEG ADDR = 0                          */
*/*%ARDDMP: S (,ARDRET) AMDSAOUT: DUMP ARBS                          */
*   IF R1 = 0 THEN                  /* DUMP REQUEST                  */
         LTR   R1,R1                                            01S0184
         BNZ   @RF00184                                         01S0184
*     DO;                           /* YES -                         */
*       CALL AMDSAOUT;              /* CALL DUMP ROUTINE             */
         BAL   @14,AMDSAOUT                                     01S0186
*       GO TO ARDRET;               /* PREPARE TO EXIT               */
         B     ARDRET                                           01S0187
*     END;                                                      01S0188
*                                                               01S0189
*   /*****************************************************************/
*   /*                                                               */
*   /* ARB BUILD REQUEST - COMPUTE AND SAVE REQUESTED ADDRESS RANGE  */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0189
*/*%ARDBLD: N ARB BUILD REQUESTED                                    */
*/* P COMPUTE END ADDR (R1 + R0)                                     */
*/* P SAVE BEG ADDR (R1) AND END ADDR                                */
*/* D (YES,,NO,ARDRET) END ADDR > BEG ADDR                           */
*/* D (NO,,YES,ARDRET) END ADDR > MAX ADDR IN SYSTEM                 */
*   ARDBEGA = R1;                   /* SAVE BEGINNING ADDRESS        */
@RF00184 LR    ARDBEGA,R1                                       01S0189
*   ARDENDA = R0 + R1;              /* COMPUTE AND SAVE END ADDRESS  */
         LR    ARDENDA,R0                                       01S0190
         AR    ARDENDA,R1                                       01S0190
*   IF ARDENDA <= ARDBEGA THEN      /* END ADDR > BEG ADDR           */
         CR    ARDENDA,ARDBEGA                                  01S0191
         BNH   @RT00191                                         01S0191
*     GO TO ARDRET;                 /* NO - IGNORE REQUEST           */
*   IF ARDENDA > MAXADDR THEN       /* END ADDR > MAXIMUM SYSTEM ADDR*/
         C     ARDENDA,@CF00623                                 01S0193
         BH    @RT00193                                         01S0193
*     GO TO ARDRET;                 /* YES - IGNORE REQUEST          */
*   RESPECIFY (R0,R1) UNRESTRICTED;                             01S0195
*                                                               01S0196
*   /*****************************************************************/
*   /*                                                               */
*   /* VALID ARB BUILD REQUEST - CHECK IF ANY ARBS HAVE BEEN BUILT   */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0196
*/* P GET FIRST ARB (VCTARB)                                         */
*/* D (NO,FILLARB,YES,%CHKARB1) ANY ARBS BUILT                       */
*   IF LASTARB = 0 THEN             /* SHOULD FIRST ARB BE USED      */
         ICM   @10,15,LASTARB                                   01S0196
         BNZ   @RF00196                                         01S0196
*     DO;                           /* YES -                         */
*       LASTARB = ADDR(ARBE(1));    /* POINT TO FIRST ARB            */
         LA    @10,ARBE                                         01S0198
         ST    @10,LASTARB                                      01S0198
*       GO TO FILLARB;              /* INITIALIZE ARB                */
         B     FILLARB                                          01S0199
*     END;                                                      01S0200
*                                                               01S0200
*   /*****************************************************************/
*   /*                                                               */
*   /* RANGE HAS TO BE MERGED WITH EXISTING ARBS. PLACE RANGE IN     */
*   /* PROPER ARB, OR BUILD A NEW ARB IF RANGE IS OUTSIDE OF ALL     */
*   /* RANGES CURRENTLY BUILT.                                       */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0201
*/*%CHKARB1: D (HIGH,,LOW,ARBMERGE,EQ,ARBMERGE) BEG ADDR : ARBADDRE  */
*/* D (NO,,YES,%ARBDON2) IS THIS THE LAST ARB BUILT                  */
*/* P (,%CHKARB1) GET NEXT ARB                                       */
*/*%ARBDON2: D (YES,,NO,%ARBNON2) ALL ARBS USED                      */
*/* S AMDSAOUT: DUMP ARBS                                            */
*/*%ARBNON2: P (,ARDRET) FILL IN ARB AFTER LAST ARB USED             */
*   RESPECIFY ARB BASED(ARDARBAD);                              01S0201
@RF00196 DS    0H                                               01S0202
*   DO ARDARBAD = ADDR(ARBE(1)) TO LASTARB BY LENGTH(ARB); /* SEARCH
*                                      ALL ARBS CURRENTLY BUILT      */
         LA    ARDARBAD,ARBE                                    01S0202
         B     @DE00202                                         01S0202
@DL00202 DS    0H                                               01S0203
*     IF ARDBEGA <= ARBADDRE THEN   /* BEGINNING ADDRESS OVER CURRENT
*                                      ARB                           */
         C     ARDBEGA,ARBADDRE(,ARDARBAD)                      01S0203
         BNH   @RT00203                                         01S0203
*       GO TO ARBMERGE;             /* NO - MERGE ARB                */
*   END;                                                        01S0205
         AH    ARDARBAD,@CH00047                                01S0205
@DE00202 C     ARDARBAD,LASTARB                                 01S0205
         BNH   @DL00202                                         01S0205
*   IF LASTARB = ADDR(ARBEND) - 8   /* IS THIS LAST ARB      @YM03674*/
*   THEN                            /* AVAILABLE             @YM03674*/
         LA    @10,ARBEND                                       01S0206
         SH    @10,@CH00047                                     01S0206
         C     @10,LASTARB                                      01S0206
         BNE   @RF00206                                         01S0206
*     DO;                           /* YES - FREE ARBS               */
*       CALL AMDSAOUT;              /* DUMP ARBS TO FREE THEM        */
         BAL   @14,AMDSAOUT                                     01S0208
*       LASTARB = ADDR(ARBE(1));    /* POINT TO FIRST ARB            */
         LA    @10,ARBE                                         01S0209
         ST    @10,LASTARB                                      01S0209
*     END;                                                      01S0210
*   ELSE                            /* ARB IS AVAILABLE              */
*     LASTARB = LASTARB + LENGTH(ARB); /* POINT TO NEXT ARB          */
         B     @RC00206                                         01S0211
@RF00206 LA    @10,8                                            01S0211
         A     @10,LASTARB                                      01S0211
         ST    @10,LASTARB                                      01S0211
*   GO TO FILLARB;                  /* INITIALIZE ARB AND EXIT       */
         B     FILLARB                                          01S0212
*                                                               01S0213
*   /*****************************************************************/
*   /*                                                               */
*   /* BEGINNING ADDRESS <= ARB ENDING ADDRESS, OR ARB BEGINNING     */
*   /* ADDRESS<BEGINNING ADDRESS<=ARB ENDING ADDRESS. IF BEGINNING   */
*   /* ADDRESS<ARB BEGINNING ADDRESS, CHECK ENDING ADDRESS TO SEE IF */
*   /* EXISTING RANGE IS INCLUDED IN REQUESTED RANGE. IF SO, MERGE   */
*   /* REQUEST. IF NOT, INSERT NEW ARB FOR REQUEST.                  */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0213
*/*ARBMERGE: D (HIGH,ADDREQ,LOW,ADDRLOW,EQ,ADDREQ) BEG ADDR : ARBADDRB
*/*                                                                  */
*/*ADDRLOW: D (HIGH,%ARB1,EQ,%ARB1,LOW,%ARBDONE) END ADDR : ARBADDRB */
*/*%ARBDONE: D (YES,,NO,%ARBNONE) ALL ARBS USED                      */
*/* S (,FILLARB) AMDSAOUT: DUMP ARBS                                 */
*                                                               01S0213
*ARBMERGE:                                                      01S0213
*   IF ARDBEGA < ARBADDRB THEN      /* BEGINNING ADDRESS PRECEDE
*                                      EXISTING RANGE                */
ARBMERGE L     @10,ARBADDRB(,ARDARBAD)                          01S0213
         CR    ARDBEGA,@10                                      01S0213
         BNL   @RF00213                                         01S0213
*     IF ARDENDA < ARBADDRB THEN    /* YES - DOES REQUESTED RANGE
*                                      OVERLAP                       */
         CR    ARDENDA,@10                                      01S0214
         BNL   @RF00214                                         01S0214
*       DO;                         /* NO - NEED A NEW ARB BUILT
*                                      AHEAD OF CURRENT ARB          */
*         IF LASTARB = ADDR(ARBEND) - 8 /* ANY ARB'S AVAILABLE       */
*         THEN DO;                  /* NO ARB'S AVAILABLE    @YM03674*/
         LA    @10,ARBEND                                       01S0216
         SH    @10,@CH00047                                     01S0216
         C     @10,LASTARB                                      01S0216
         BNE   @RF00216                                         01S0216
*             CALL AMDSAOUT;        /* DUMP ALL ARBS                 */
         BAL   @14,AMDSAOUT                                     01S0218
*             LASTARB = ADDR(ARBE(1)); /* POINT TO FIRST ARB         */
         LA    @10,ARBE                                         01S0219
         ST    @10,LASTARB                                      01S0219
*             GO TO FILLARB;        /* INITIALIZE ARB AND EXIT       */
         B     FILLARB                                          01S0220
*           END;                                                01S0221
*                                                               01S0221
*   /*****************************************************************/
*   /*                                                               */
*   /* PUSH DOWN EXISTING ARBS TO INSERT NEW ONE.                    */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0222
*/*%ARBNONE: P PUSH ARBS DOWN                                        */
*/* P (,ARDRET) FILL IN ARB PRECEDING PUSHED DOWN ARB                */
*/*%ARB1: P (,ADDREQ) SET ARBADDRB TO BEG ADDR                       */
*         LASTARB = LASTARB + LENGTH(ARB); /* POINT TO NEXT ARB      */
@RF00216 LA    @10,8                                            01S0222
         A     @10,LASTARB                                      01S0222
         ST    @10,LASTARB                                      01S0222
*         DO ARDPTR2 = LASTARB BY -LENGTH(ARB) WHILE ARDPTR2>ARDARBAD;
         LR    ARDPTR2,@10                                      01S0223
         B     @DE00223                                         01S0223
@DL00223 DS    0H                                               01S0224
*                                   /* MOVE ALL ARBS                 */
*           ARDPTR1 = ARDPTR2 - LENGTH(ARB); /* POINT TO PRECEDING
*                                      ARB                           */
         LR    ARDPTR1,ARDPTR2                                  01S0224
         SH    ARDPTR1,@CH00047                                 01S0224
*           ARDPTR2 -> ARB = ARDPTR1 -> ARB; /* PUSH ARB DOWN        */
         MVC   ARB(8,ARDPTR2),ARB(ARDPTR1)                      01S0225
*         END;                                                  01S0226
         AH    ARDPTR2,@CH00700                                 01S0226
@DE00223 CR    ARDPTR2,ARDARBAD                                 01S0226
         BH    @DL00223                                         01S0226
*         ARBADDRB = ARDBEGA;       /* INITIALIZE BEGINNING ADDRESS  */
         ST    ARDBEGA,ARBADDRB(,ARDARBAD)                      01S0227
*         ARBADDRE = ARDENDA;       /* INITIALIZE ENDING ADDRESS     */
         ST    ARDENDA,ARBADDRE(,ARDARBAD)                      01S0228
*         GO TO ARDRET;             /* EXIT                          */
         B     ARDRET                                           01S0229
*       END;                                                    01S0230
*     ELSE                          /* REQUESTED RANGE INCLUDE  01S0231
*                                      CURRENT ARB                   */
*       ARBADDRB = ARDBEGA;         /* SET BEGINNING ADDRESS IN ARB  */
@RF00214 ST    ARDBEGA,ARBADDRB(,ARDARBAD)                      01S0231
*                                                               01S0232
*   /*****************************************************************/
*   /*                                                               */
*   /* CHECK FOR MERGE OF REMAINING ARBS. CONDITIONS ON ENTRY HERE   */
*   /* ARE ONE OF THE FOLLOWING:                                     */
*   /*                                                               */
*   /*       (1) BEGINNING ADDRESS = ARB BEGINNING ADDRESS, (2) ARB  */
*   /*       BEGINNING ADDRESS < BEGINNING ADDRESS <= ARB ENDING     */
*   /*       ADDRESS, (3) BEGINNING ADDRESS < ARB BEGINNING ADDRESS  */
*   /*       <= ENDING ADDRESS.                                      */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0232
*/*ADDREQ: D (HIGH,,LOW,ARDRET,EQ,ARDRET) END ADDR : ARBADDRE        */
*/* P SET ARBADDRE TO END ADDR                                       */
*/*NEXTARB: D (NO,,YES,ARDRET) ALL ARBS CHECKED                      */
*/* P GET NEXT ARB                                                   */
*/* D (HIGH,%ARB2,EQ,%ARB2,LOW,ARDRET) END ADDR : ARBADDRB           */
*/*%ARB2: D (EQ,%ARB3,LOW,%ARB3,HIGH,ARDREMV) END ADDR : ARBADDRE    */
*/*%ARB3: P SET PREVIOUS ARBADDRE TO CURRENT ARBADDRE                */
*/* N ELIMINATE CURRENT ARB                                          */
*/* S (,ARDRET) ARBCMPRS: COMPRESS REMAINING ARBS                    */
*/*ARDREMV: N ELIMINATE CURRENT ARB                                  */
*/* S (,NEXTARB) ARBCMPRS: COMPRESS REMAINING ARBS                   */
*   IF ARDENDA > ARBADDRE THEN      /* DOES REQUEST INCLUDE CURRENT
*                                      ARB                           */
@RF00213 C     ARDENDA,ARBADDRE(,ARDARBAD)                      01S0232
         BNH   @RF00232                                         01S0232
*     DO;                           /* YES -                         */
*       ARBADDRE = ARDENDA;         /* RESET END ADDR TO REQUEST     */
         ST    ARDENDA,ARBADDRE(,ARDARBAD)                      01S0234
*       DO ARDARBAD = ARDARBAD + LENGTH(ARB) TO LASTARB BY      01S0235
*               LENGTH(ARB);        /* SEARCH REMAINING ARBS         */
         LA    @10,8                                            01S0235
         AR    @10,ARDARBAD                                     01S0235
         LR    ARDARBAD,@10                                     01S0235
         B     @DE00235                                         01S0235
@DL00235 DS    0H                                               01S0236
*         IF ARDENDA < ARBADDRB THEN /* REQUEST OVERLAP NEXT ARB     */
         C     ARDENDA,ARBADDRB(,ARDARBAD)                      01S0236
         BL    @RT00236                                         01S0236
*           GO TO ARDRET;           /* NO - FINISHED                 */
*         IF ARDENDA <= ARBADDRE THEN /* REQUEST INCLUDED IN CURRENT
*                                      RANGE                         */
         L     @10,ARBADDRE(,ARDARBAD)                          01S0238
         CR    ARDENDA,@10                                      01S0238
         BH    @RF00238                                         01S0238
*           DO;                     /* YES -                         */
*             ARDPTR1 = ARDARBAD-LENGTH(ARB); /* POINT TO PREVIOUS
*                                      ARB                           */
         LR    ARDPTR1,ARDARBAD                                 01S0240
         SH    ARDPTR1,@CH00047                                 01S0240
*             ARDPTR1->ARBADDRE = ARBADDRE; /* SET NEW RANGE IN 01S0241
*                                      PREVIOUS ARB TO INCLUDE NEXT
*                                      RANGE                         */
         ST    @10,ARBADDRE(,ARDPTR1)                           01S0241
*             CALL ARBCMPRS;        /* COMPRESS REMIANING ARBS, 01S0242
*                                      ELIMINATING CURRENT ONE       */
         BAL   @14,ARBCMPRS                                     01S0242
*             GO TO ARDRET;         /* FINISHED                      */
         B     ARDRET                                           01S0243
*           END;                                                01S0244
*         CALL ARBCMPRS;            /* REQUEST INCLUDES MORE THAN
*                                      CURRENT RANGE - ELIMINATE
*                                      CURRENT ARB                   */
@RF00238 BAL   @14,ARBCMPRS                                     01S0245
*       END;                        /* CONTINUE ARB MERGE            */
         AH    ARDARBAD,@CH00047                                01S0246
@DE00235 C     ARDARBAD,LASTARB                                 01S0246
         BNH   @DL00235                                         01S0246
*     END;                          /* ARB MERGE COMPLETE            */
*   GO TO ARDRET;                   /* EXIT                          */
         B     ARDRET                                           01S0248
*                                                               01S0249
*   /*****************************************************************/
*   /*                                                               */
*   /* INITIALIZE LAST ARB BUILT, POINTED TO BY LASTARB.             */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0249
*/*FILLARB: P (,ARDRET) FILL IN FIRST ARB                            */
*   RESPECIFY ARB BASED(LASTARB);                               01S0249
*                                                               01S0249
*FILLARB:                                                       01S0250
*   ARBADDRB = ARDBEGA;             /* INITIALIZE ARB                */
FILLARB  L     @10,LASTARB                                      01S0250
         ST    ARDBEGA,ARBADDRB(,@10)                           01S0250
*   ARBADDRE = ARDENDA;             /* INITIALIZE END ADDRESS        */
*                                                               01S0251
         ST    ARDENDA,ARBADDRE(,@10)                           01S0251
*   /*****************************************************************/
*   /*                                                               */
*   /* RETURN PATH - DEQUEUE RCB AND RETURN                          */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0252
*/*ARDRET: P DEQUEUE RCB                                             */
*/* R RETURN TO CALLER                                               */
*                                                               01S0252
*ARDRET:                                                        01S0252
*   VCTRCB = RCBNEXT;               /* DEQUEUE RCB                   */
ARDRET   LA    @10,ARDRCB                                       01S0252
         MVC   VCTRCB(4,VCCTREG),RCBNEXT(@10)                   01S0252
*   RETURN;                         /* RETURN TO CALLER              */
@EL00001 L     @13,4(,@13)                                      01S0253
@EF00001 DS    0H                                               01S0253
@ER00001 LM    @14,@12,12(@13)                                  01S0253
         BR    @14                                              01S0253
*                                                               01S0254
*   /*****************************************************************/
*   /*                                                               */
*   /* PROCEDURE FOR COMPRESSING ARB TABLE - ARDARBAD IS ADDRESS OF  */
*   /* ARB TO BE ELIMINATED, LASTARB IS ADDRESS OF LAST ARB CURRENTLY*/
*   /* BUILT. ON RETURN, LASTARB POINTS TO THE LAST ARB IN THE TABLE.*/
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0254
*/*ARBCMPRS: E ARB COMPRESS                                          */
*/* P COMPRESS REMAINING ARBS                                        */
*/* R RETURN TO CALLER                                               */
*                                                               01S0254
*ARBCMPRS:                                                      01S0254
*   PROC OPTIONS(NOSAVEAREA);                                   01S0254
ARBCMPRS STM   @14,@12,12(@13)                                  01S0254
*   DO ARDPTR2 = ARDARBAD BY LENGTH(ARB) WHILE ARDPTR2 < LASTARB; /*
*                                      COMPRESS ALL ARBS             */
         LR    ARDPTR2,ARDARBAD                                 01S0255
         B     @DE00255                                         01S0255
@DL00255 DS    0H                                               01S0256
*     ARDPTR1 = ARDPTR2 + LENGTH(ARB); /* POINT TO NEXT ARB          */
         LA    ARDPTR1,8                                        01S0256
         AR    ARDPTR1,ARDPTR2                                  01S0256
*     ARDPTR2 -> ARB = ARDPTR1 -> ARB; /* MOVE ARB UP                */
         MVC   ARB(8,ARDPTR2),ARB(ARDPTR1)                      01S0257
*   END;                                                        01S0258
         AH    ARDPTR2,@CH00047                                 01S0258
@DE00255 L     @10,LASTARB                                      01S0258
         CR    ARDPTR2,@10                                      01S0258
         BL    @DL00255                                         01S0258
*   LASTARB = LASTARB - LENGTH(ARB); /* POINT TO ARB WHICH IS   01S0259
*                                      CURRENTLY LAST IN TABLE       */
         SH    @10,@CH00047                                     01S0259
         ST    @10,LASTARB                                      01S0259
*   RETURN;                         /* RETURN TO CALLER              */
@EL00002 DS    0H                                               01S0260
@EF00002 DS    0H                                               01S0260
@ER00002 LM    @14,@12,12(@13)                                  01S0260
         BR    @14                                              01S0260
*   END ARBCMPRS;                                               01S0261
*                                                               01S0262
*   /*****************************************************************/
*   /*                                                               */
*   /* DUMP ROUTINE - THIS ROUTINE DUMPS ALL VIRTUAL ADDRESSES WHICH */
*   /* ARE ON THE ARB. THIS IS DONE BY REFERENCING ALL THE VIRTUAL   */
*   /* ADDRESSES AND CHECKING IF A PAGE FAULT OCCURRED. IF SO, THE   */
*   /* BUFFER IS SCHEDULED FOR OUTPUT. IF NOT, THE BUFFERS ARE       */
*   /* SEARCHED TO SEE IF THE ADDRESS WAS BROUGHT IN EARLIER. IF SO, */
*   /* IT IS SCHEDULED FOR OUTPUT. IN THIS WAY, ONLY ADDRESSES WHICH */
*   /* WERE PAGED OUT ARE DUMPED.                                    */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0262
*                                                               01S0262
*AMDSAOUT:                                                      01S0262
*   PROC OPTIONS(SAVEAREA);                                     01S0262
*                                                               01S0262
AMDSAOUT STM   @14,@12,12(@13)                                  01S0262
         ST    @13,@SA00003+4                                   01S0262
         LA    @14,@SA00003                                     01S0262
         ST    @14,8(,@13)                                      01S0262
         LR    @13,@14                                          01S0262
*   /*****************************************************************/
*   /*                                                               */
*   /* EXTERNAL DECLARES                                             */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0263
*   DCL                                                         01S0263
*         IODBOUT EXTERNAL NONLOCAL; /* OUTPUT IODB                  */
*   DCL                                                         01S0264
*         LNG22I PTR(8) EXTERNAL NONLOCAL; /* SECONDARY MSG LENGTH   */
*   DCL                                                         01S0265
*         DMP22I CHAR(LENGTH(ARDMSG)) EXTERNAL NONLOCAL; /* MESSAGE
*                                      AREA                          */
*   DCL                                                         01S0266
*         VLNG22I PTR(8) BASED(ADDR(LNG22I)+VCTLPA); /* VIRTUAL 01S0266
*                                   ADDRESS OF LENGTH                */
*   DCL                                                         01S0267
*         VDMP22I CHAR(LENGTH(ARDMSG)) BASED(ADDR(DMP22I)+VCTLPA); /*
*                                   VIRTUAL ADDRESS OF MSG AREA      */
*                                                               01S0267
*   /*****************************************************************/
*   /*                                                               */
*   /* BINARY TO EBCDIC CONVERT PARAMETER LIST                       */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0268
*   DCL                                                         01S0268
*         1 OUTBINL BDY(WORD),                                  01S0268
*             3 OUTBINA PTR(31) INIT(0), /* BINARY AREA              */
*             3 OUTEBCA PTR(31) INIT(0), /* EBCDIC AREA              */
*             3 * FIXED(15) INIT(LENGTH(CURRADDR)-1); /* LENGTH OF
*                                      BINARY AREA                   */
*                                                               01S0268
*   /*****************************************************************/
*   /*                                                               */
*   /* MESSAGE TEXT FOR AMD022I                                      */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0269
*   DCL                                                         01S0269
*         1 ARDMSG CHAR(11),                                    01S0269
*             3 * CHAR(5) INIT('PAGE='),                        01S0269
*             3 DMPMSG CHAR(6) INIT(' ');                       01S0269
*                                                               01S0269
*   /*****************************************************************/
*   /*                                                               */
*   /* POINTERS AND CONSTANTS                                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0270
*   DCL                                                         01S0270
*         RSVESAVE PTR(31);         /* RCB SAVEAREA ADDRESS OF CALLER*/
*   DCL                                                         01S0271
*         EXITSAVE PTR(31);         /* RCB EXIT ADDRESS OF CALLER    */
*   DCL                                                         01S0272
*         OUTBCTAD PTR(31);         /* CURRENT BCT ADDRESS           */
*   DCL                                                         01S0273
*         ARDBUFT PTR(8);           /* SAVE AREA FOR CTBUFTYP        */
*   DCL                                                         01S0274
*         ARDIOTYP PTR(8);          /* SAVE AREA FOR CTIOTYPE        */
*   DCL                                                         01S0275
*         CURRADDR PTR(31) INIT(0); /* CURRENT VIRTUAL ADDRESS -
*                                      INITIALIZED TO PREVENT   01S0275
*                                      ASSIGNMENT TO A REGISTER      */
*   DCL                                                         01S0276
*         DUMMY CHAR(1) BASED(CURRADDR); /* DUMMY VARIABLE FOR  01S0276
*                                      REFERENCING VIRTUAL ADDRESS   */
*   DCL                                                         01S0277
*         DUMMY2 CHAR(1) INIT('00'X); /* AREA TO MOVE DUMMY VARIABLE */
*   DCL                                                         01S0278
*         PAGESIZE FIXED(31) CONSTANT(4096); /* SIZE OF PAGES        */
*                                                               01S0279
*   /*****************************************************************/
*   /*                                                               */
*   /* MODIFY RCB FOR DUMPING EXIT                                   */
*   /*                                                               */
*   /*****************************************************************/
*/*AMDSAOUT: E AMDSAOUT                                              */
*/* N THIS IS THE DUMP ROUTINE                                       */
*/* P (RCB,ARDEXIT2,NORM,) MODIFY RCB FOR DUMPING EXIT               */
*                                                               01S0279
*   RESPECIFY R13 RESTRICTED;                                   01S0279
*   RESPECIFY BCTH BASED(VCTBCTH+VCTLPA); /* VIRTUAL ADDRESS OF BCTH */
*   RESPECIFY BCT BASED(OUTBCTAD + VCTLPA); /* VIRTUAL ADDR OF BCT   */
*   RESPECIFY IODB BASED(ADDR(IODBOUT)+VCTLPA); /* VIRTUAL ADDRESS
*                                      OF IODB                       */
*   RESPECIFY CCT BASED(VCTCCTV);   /* VIRTUAL ADDRESS OF CCT        */
*   RESPECIFY ARB BASED(ARDARBAD);                              01S0284
*   EXITSAVE = RCBEXIT;             /* SAVE CALLER'S EXIT ADDRESS    */
         LA    @10,ARDRCB                                       01S0285
         L     EXITSAVE,RCBEXIT(,@10)                           01S0285
*   RSVESAVE = RCBSAVE;             /* SAVE CALLER'S SAVEAREA ADDRESS*/
         L     RSVESAVE,RCBSAVE(,@10)                           01S0286
*   RCBSAVE = R13;                  /* POINT TO LOCAL SAVE AREA      */
         ST    R13,RCBSAVE(,@10)                                01S0287
*   RCBEXIT = ADDR(ARDEXIT2);       /* POINT TO DUMPING EXIT         */
         LA    @06,ARDEXIT2                                     01S0288
         ST    @06,RCBEXIT(,@10)                                01S0288
*   SAVEFORM(1:4) = 'LARD';         /* SET UP MODULE ID              */
*                                                               01S0289
         MVC   SAVEFORM(4,R13),@CC00641                         01S0289
*   /*****************************************************************/
*   /*                                                               */
*   /* CHECK IF ANYTHING SHOULD BE DUMPED                            */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0290
*/* P SET CTDUMP IN CTBUFTYP                                         */
*/* P PICK UP FIRST ARB (VCTARB)                                     */
*/* D (YES,,NO,OUTRET) ANY ARBS TO DUMP                              */
*   ARDBUFT = CTBUFTYP;             /* SAVE CTBUFTYP                 */
         L     @10,VCTCCTV(,VCCTREG)                            01S0290
         SR    ARDBUFT,ARDBUFT                                  01S0290
         IC    ARDBUFT,CTBUFTYP(,@10)                           01S0290
*   CTBUFTYP = OFF;                 /* RESET CTBUFTYP                */
         MVI   CTBUFTYP(@10),B'00000000'                        01S0291
*   CTDUMP = ON;                    /* REQUEST DUMP BUFFER           */
         OI    CTDUMP(@10),B'00000100'                          01S0292
*   IF LASTARB = 0 THEN             /* ANYTHING TO DUMP              */
         ICM   @10,15,LASTARB                                   01S0293
         BZ    @RT00293                                         01S0293
*     GO TO OUTRET;                 /* NO - RETURN                   */
*                                                               01S0294
*   /*****************************************************************/
*   /*                                                               */
*   /* BEGIN DUMPING - REFERENCE VIRTUAL ADDRESS IN ARB AND SEE IF   */
*   /* PAGE FAULT OCCURRED.                                          */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0295
*/*OUTBEGN: P MAKE ARBADDRB CURRENT ADDRESS                          */
*/*OUTRESET: P TURN OFF CTPGEFLT                                     */
*/* P TURN OFF VCTSADMP TO SKIP DUMP ON BAD DAT                      */
*/* P REFERENCE CURRENT ADDR                                         */
*/* N IF ADDR IS PAGED OUT A PAGE FAULT WILL OCCUR                   */
*/* P TURN VCTSADMP BACK ON                                          */
*/* D (YES,,NO,OUTSRCH) CTPGEFLT ON                                  */
*/* P (,OUTIOST) OBTAIN CURRENT BCT ADDR FROM VCTBCTC                */
*/*OUTINCR: P INCREMENT CURRENT ADDR BY 4K                           */
*/* D (NO,,YES,OUTRESET) CURRENT ADDR < ARBADDRE                     */
*/* D (NO,,YES,OUTDONE) LAST ARB PROCESSED                           */
*/* P (,OUTBEGN) GET NEXT ARB                                        */
*   DO ARDARBAD = ADDR(ARBE(1)) TO LASTARB BY LENGTH(ARB); /* USE ALL
*                                      ARBS                          */
         LA    ARDARBAD,ARBE                                    01S0295
         B     @DE00295                                         01S0295
@DL00295 DS    0H                                               01S0296
*     DO CURRADDR = ARBADDRB BY PAGESIZE WHILE CURRADDR < ARBADDRE; /*
*                                      INCLUDE ALL VIRTUAL ADDRESSES */
         L     @10,ARBADDRB(,ARDARBAD)                          01S0296
         ST    @10,CURRADDR                                     01S0296
         B     @DE00296                                         01S0296
@DL00296 DS    0H                                               01S0297
*       CTPGEFLT = OFF;             /* RESET PAGE FAULT INDICATOR    */
         L     @10,VCTCCTV(,VCCTREG)                            01S0297
         NI    CTPGEFLT(@10),B'11011111'                        01S0297
*       VCTSADMP = OFF;             /* NO DUMP IN CASE OF BAD   01S0298
*                                      TRANSLATION                   */
         NI    VCTSADMP(VCCTREG),B'01111111'                    01S0298
*   /*****************************************************************/
*   /*                                                               */
*   /*   THE FOLLOWING INSTRUCTION CAUSES THE CURRENT VIRTUAL        */
*   /*   ADDRESS TO BE REFERENCED.  IF THE PAGE IS PAGED OUT,        */
*   /*   A PAGE FAULT WILL OCCUR.  THE PAGING SUPERVISION CODE       */
*   /*   OF AMDSADMP WILL GET CONTROL AND BRING IN THE PAGE,         */
*   /*   SETTING THE CTPGEFLT FLAG.  IF THE PAGE IS UNAVAILABLE,     */
*   /*   THE RCB EXIT (ARDEXIT2) WILL RECEIVE CONTROL FROM           */
*   /*   AMDSAAUD.                                                   */
*   /*                                                               */
*   /*****************************************************************/
*       DUMMY2 = DUMMY;             /* REFERENCE CURRENT VIRTUAL
*                                      ADDRESS                       */
         L     @06,CURRADDR                                     01S0299
         MVC   DUMMY2(1),DUMMY(@06)                             01S0299
*       VCTSADMP = ON;              /* TURN DUMP REQUEST BIT BACK ON */
         OI    VCTSADMP(VCCTREG),B'10000000'                    01S0300
*       IF CTPGEFLT = ON THEN       /* DID A PAGE FAULT OCCUR FOR
*                                      CURRENT VIRTUAL ADDRESS       */
         TM    CTPGEFLT(@10),B'00100000'                        01S0301
         BNO   @RF00301                                         01S0301
*         OUTBCTAD = VCTBCTC;       /* YES - GET REAL ADDRESS OF
*                                      CURRENT BUFFER                */
         L     OUTBCTAD,VCTBCTC(,VCCTREG)                       01S0302
*       ELSE                                                    01S0303
*                                                               01S0303
*   /*****************************************************************/
*   /*                                                               */
*   /* PAGE FAULT DID NOT OCCUR - SEARCH BUFFERS IN CASE PAGE WAS    */
*   /* BROUGHT IN TO SATISFY SOME PREVIOUS PAGE FAULT.               */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0303
*/*OUTSRCH: N BUFFERS MUST BE CHECKED FOR ADDR PAGED IN BEFORE       */
*/* P GET BCTH FROM VCTBCTH                                          */
*/* P GET FIRST BCT ADDR (BCTHFRST)                                  */
*/* P GET BCTE                                                       */
*/*OUTBCTC: D (YES,,NO,OUTNOTIN) BCTVADDR = CURRENT ADDR             */
*/* D (YES,,NO,OUTNOTIN) BCTASID = VCTASID                           */
*/* D (YES,,NO,OUTNOTIN) BCTCOMP ON                                  */
*/* D (YES,OUTIOST,NO,OUTNOTIN) BCTIOERR OFF                         */
*/*OUTNOTIN: D (NO,,YES,OUTINCR) IS THIS LAST BCT                    */
*/* P (,OUTBCTC) GET NEXT BCT                                        */
*         DO;                                                   01S0303
         B     @RC00301                                         01S0303
@RF00301 DS    0H                                               01S0304
*           DO OUTBCTAD = BCTHFRST TO BCTHLAST BY LENGTH(BCT); /*
*                                      SEARCH BUFFERS                */
         L     @10,VCTBCTH(,VCCTREG)                            01S0304
         A     @10,VCTLPA(,VCCTREG)                             01S0304
         L     OUTBCTAD,BCTHFRST(,@10)                          01S0304
         B     @DE00304                                         01S0304
@DL00304 DS    0H                                               01S0305
*             IF (BCTVADDR = CURRADDR) & (BCTASID = VCTASID) THEN /*
*                                      CURRENT ADDRESS IN BUFFER     */
         LR    @10,OUTBCTAD                                     01S0305
         A     @10,VCTLPA(,VCCTREG)                             01S0305
         CLC   BCTVADDR(4,@10),CURRADDR                         01S0305
         BNE   @RF00305                                         01S0305
         CLC   BCTASID(2,@10),VCTASID(VCCTREG)                  01S0305
         BNE   @RF00305                                         01S0305
*               IF (BCTCOMP = ON & BCTIOERR = OFF) THEN /* YES - IS
*                                      IT VALID                      */
         TM    BCTCOMP(@10),B'10000000'                         01S0306
         BNO   @RF00306                                         01S0306
         TM    BCTIOERR(@10),B'00100000'                        01S0306
         BZ    @RT00306                                         01S0306
*                 GO TO OUTIOST;    /* YES - QUEUE BCT FOR OUTPUT    */
*           END;                    /* CONTINUE BUFFER SEARCH        */
@RF00306 DS    0H                                               01S0308
@RF00305 AH    OUTBCTAD,@CH00701                                01S0308
@DE00304 L     @10,VCTBCTH(,VCCTREG)                            01S0308
         A     @10,VCTLPA(,VCCTREG)                             01S0308
         C     OUTBCTAD,BCTHLAST(,@10)                          01S0308
         BNH   @DL00304                                         01S0308
*           GO TO OUTINCR;          /* ADDR NOT IN A BUFFER - GET
*                                      NEXT PAGE                     */
         B     OUTINCR                                          01S0309
*         END;                                                  01S0310
*                                                               01S0310
*   /*****************************************************************/
*   /*                                                               */
*   /* PLACE BCT ON OUTPUT I/O REQUEST QUEUE AND INITIATE I/O.       */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0311
*/*OUTIOST: P PLACE BCT AT HEAD OF OUTPUT IODB QUEUE                 */
*/* P SET BCTALLOC INDICATING BUFFER ON I/O QUEUE                    */
*/* P TURN OFF BCTCOMP BIT                                           */
*/* P SET CTIOTYPE TO CTIOOUT                                        */
*/* L AMDSASIO:  INITIATE I/O TO OUTPUT DEVICE                       */
*/* D (YES,OUTINCR,NO,%ARDEX2A) RC = 0                               */
*/*%ARDEX2A: P DEQUEUE BCT FROM OUTPUT IODB                          */
*/* P (,ARDEXIT2) RESET BCTALLOC BIT                                 */
*                                                               01S0311
*OUTIOST:                                                       01S0311
*       BCTNEXT = IODBBCT;          /* SAVE CURRENT I/O CHAIN        */
@RC00301 DS    0H                                               01S0311
OUTIOST  L     @10,VCTLPA(,VCCTREG)                             01S0311
         LR    @15,OUTBCTAD                                     01S0311
         AR    @15,@10                                          01S0311
         L     @14,@CA00658                                     01S0311
         AR    @14,@10                                          01S0311
         MVC   BCTNEXT(4,@15),IODBBCT(@14)                      01S0311
*       IODBBCT = OUTBCTAD;         /* QUEUE BCT TO I/O CHAIN        */
         ST    OUTBCTAD,IODBBCT(,@14)                           01S0312
*       BCTALLOC = ON;              /* INDICATE BUFFER ALLOCATED FOR
*                                      I/O                           */
*       BCTCOMP = OFF;              /* RESET BUFFER COMPLETE FLAG    */
         OI    BCTALLOC(@15),B'01000000'                        01S0314
         NI    BCTCOMP(@15),B'01111111'                         01S0314
*       ARDIOTYP = CTIOTYPE;        /* SAVE ORIGINAL I/O REQUEST     */
         L     @10,VCTCCTV(,VCCTREG)                            01S0315
         SR    ARDIOTYP,ARDIOTYP                                01S0315
         IC    ARDIOTYP,CTIOTYPE(,@10)                          01S0315
*       CTIOTYPE = OFF;             /* RESET I/O REQUEST FLAGS       */
         MVI   CTIOTYPE(@10),B'00000000'                        01S0316
*       CTIOOUT = ON;               /* REQUEST I/O TO OUTPUT DEVICE  */
         OI    CTIOOUT(@10),B'01000000'                         01S0317
*       SVC(SIOSVC);                /* CALL AMDSASIO TO INITIATE I/O */
         SVC   0                                                01S0318
*       RESPECIFY (R1,RETCODE) RESTRICTED;                      01S0319
*       CTIOTYPE = ARDIOTYP;        /* RESTORE ORIGINAL I/O REQUEST
*                                      FLAGS                         */
         L     @14,VCTCCTV(,VCCTREG)                            01S0320
         STC   ARDIOTYP,CTIOTYPE(,@14)                          01S0320
*       IF RETCODE ^= 0 THEN        /* I/O INITIATED SUCCESSFULLY    */
         LTR   RETCODE,RETCODE                                  01S0321
         BZ    @RF00321                                         01S0321
*         DO;                       /* NO -                          */
*           RESPECIFY RETCODE UNRESTRICTED;                     01S0323
*           IODBBCT = BCTNEXT;      /* DEQUEUE BCT FROM I/O CHAIN    */
         L     @10,@CA00658                                     01S0324
         L     @04,VCTLPA(,VCCTREG)                             01S0324
         AR    @10,@04                                          01S0324
         AR    @04,OUTBCTAD                                     01S0324
         MVC   IODBBCT(4,@10),BCTNEXT(@04)                      01S0324
*           BCTALLOC = OFF;         /* MARK BCT UNALLOCATED          */
*                                                               01S0325
         NI    BCTALLOC(@04),B'10111111'                        01S0325
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS IS THE RCB EXIT ROUTINE. MESSAGE AMD022I IS INITIALIZED  */
*   /* WITH THE CURRENT ADDRESS AND THEN ISSUED TO THE CONSOLE. THE  */
*   /* NEXT VIRTUAL ADDRESS IS THEN OBTAINED.                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0326
*/*ARDEXIT2: P TURN VCTSADMP BACK ON                                 */
*/* L AMDSABIN:  CONVERT CURRENT ADDR TO EBCDIC                      */
*/* P INITIALIZE MESSAGE AMD022I                                     */
*/* L AMDSACON:  ISSUE MESSAGE AMD022I                               */
*/* N THIS REQUIRES SETTING LNG22I AND DMP22I                        */
*/* P (,OUTINCR) REFRESH CURRENT ADDR                                */
*                                                               01S0326
*ARDEXIT2:                                                      01S0326
*           VCTSADMP = ON;          /* TURN DUMP REQUEST BIT BACK ON */
ARDEXIT2 OI    VCTSADMP(VCCTREG),B'10000000'                    01S0326
*            IF VCTNOI22 = ON THEN  /* WAS PAGE NEVER USED?  @YM05001*/
         TM    VCTNOI22(VCCTREG),B'00000100'                    01S0327
         BNO   @RF00327                                         01S0327
*            DO;                                           /*@YM05001*/
*               VCTNOI22 = OFF;     /* NO - RESET FLAG AND   @YM05001*/
         NI    VCTNOI22(VCCTREG),B'11111011'                    01S0329
*               GO TO OUTINCR;      /* SKIP MESSAGE I22      @YM05001*/
         B     OUTINCR                                          01S0330
*            END;                                          /*@YM05001*/
*           OUTBINA = ADDR(CURRADDR) + 1; /* PTR TO ADDR IN ERROR    */
@RF00327 LA    @10,CURRADDR                                     01S0332
         AH    @10,@CH00062                                     01S0332
         ST    @10,OUTBINA                                      01S0332
*           OUTEBCA = ADDR(DMPMSG); /* OUTPUT AREA                   */
         LA    @10,DMPMSG                                       01S0333
         ST    @10,OUTEBCA                                      01S0333
*           R1 = ADDR(OUTBINL);     /* POINT TO CONVERT PARAMETER
*                                      LIST                          */
         LA    R1,OUTBINL                                       01S0334
*           SVC(BINSVC);            /* CALL AMDSABIN TO CONVERT      */
         SVC   28                                               01S0335
*           VLNG22I = LENGTH(ARDMSG); /* MOVE IN SECONDARY MESSAGE
*                                      LENGTH                        */
         L     @10,@CA00659                                     01S0336
         L     @06,VCTLPA(,VCCTREG)                             01S0336
         AR    @10,@06                                          01S0336
         MVI   VLNG22I(@10),X'0B'                               01S0336
*           VDMP22I = ARDMSG;       /* MOVE IN SECONDARY MESSAGE TEXT*/
         L     @10,@CA00660                                     01S0337
         AR    @10,@06                                          01S0337
         MVC   VDMP22I(11,@10),ARDMSG                           01S0337
*           R1 = AMD022I;           /* REQUEST MESSAGE AMD022I BE
*                                      ISSUED                        */
         LA    R1,22                                            01S0338
*           SVC(CONSVC);            /* CALL AMDSACON TO ISSUE MESSAGE*/
         SVC   3                                                01S0339
*           RESPECIFY R1 UNRESTRICTED;                          01S0340
*         END;                                                  01S0341
*                                                               01S0341
*OUTINCR:                                                       01S0342
*     END;                          /* INCREMENT CURRENT VIRTUAL
*                                      ADDRESS                       */
@RF00321 DS    0H                                               01S0342
OUTINCR  LH    @10,@CH00682                                     01S0342
         A     @10,CURRADDR                                     01S0342
         ST    @10,CURRADDR                                     01S0342
@DE00296 CLC   CURRADDR(4),ARBADDRE(ARDARBAD)                   01S0342
         BL    @DL00296                                         01S0342
*   END;                            /* GET NEXT ARB                  */
*                                                               01S0343
         AH    ARDARBAD,@CH00047                                01S0343
@DE00295 C     ARDARBAD,LASTARB                                 01S0343
         BNH   @DL00295                                         01S0343
*   /*****************************************************************/
*   /*                                                               */
*   /* ALL ARBS HAVE BEEN PROCESSED                                  */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0344
*/*OUTDONE: P INDICATE ARBS ARE FREE                                 */
*/* L  AMDSAWAT:  WAIT FOR COMPLETION OF I/O                         */
*/*OUTRET: P RESTORE ORIGINAL RCB EXIT & SAVEAREA ADDRESSES          */
*/* R RETURN TO CALLER                                               */
*/*AMDSAARD: END                                                     */
*   ARDIOTYP = CTIOTYPE;            /* SAVE I/O REQUEST FLAGS        */
         L     @10,VCTCCTV(,VCCTREG)                            01S0344
         SR    ARDIOTYP,ARDIOTYP                                01S0344
         IC    ARDIOTYP,CTIOTYPE(,@10)                          01S0344
*   CTIOTYPE = OFF;                 /* RESET I/O REQUEST FLAGS       */
         MVI   CTIOTYPE(@10),B'00000000'                        01S0345
*   CTIOOUT = ON;                   /* INDICATE OUTPUT I/O           */
         OI    CTIOOUT(@10),B'01000000'                         01S0346
*   SVC(WATSVC);                    /* CALL AMDSAWAT TO WAIT FOR I/O
*                                      COMPLETION ON OUTPUT          */
         SVC   1                                                01S0347
*   CTIOTYPE = ARDIOTYP;            /* RESTORE I/O REQUEST FLAGS     */
*                                                               01S0348
         L     @10,VCTCCTV(,VCCTREG)                            01S0348
         STC   ARDIOTYP,CTIOTYPE(,@10)                          01S0348
*OUTRET:                                                        01S0349
*   CTBUFTYP = ARDBUFT;             /* RESTORE ORIGINAL BUFFER  01S0349
*                                      REQUEST FLAGS                 */
OUTRET   L     @10,VCTCCTV(,VCCTREG)                            01S0349
         STC   ARDBUFT,CTBUFTYP(,@10)                           01S0349
*   LASTARB = 0;                    /* INDICATE ARBS ARE FREED       */
         SR    @10,@10                                          01S0350
         ST    @10,LASTARB                                      01S0350
*   RCBEXIT = EXITSAVE;             /* RESTORE ORIGINAL RCB EXIT
*                                      ADDRESS                       */
         LA    @10,ARDRCB                                       01S0351
         ST    EXITSAVE,RCBEXIT(,@10)                           01S0351
*   RCBSAVE = RSVESAVE;             /* RESTORE ORIGINAL RCB SAVEAREA
*                                      ADDRESS                       */
         ST    RSVESAVE,RCBSAVE(,@10)                           01S0352
*   RETURN;                         /* RETURN TO CALLER              */
@EL00003 L     @13,4(,@13)                                      01S0353
@EF00003 DS    0H                                               01S0353
@ER00003 LM    @14,@12,12(@13)                                  01S0353
         BR    @14                                              01S0353
*   END AMDSAOUT;                                               01S0354
*   END AMDSAARD                                                01S0355
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.      *
*/*%INCLUDE SYSLIB  (AMDSARMK)                                        *
*;                                                              01S0355
         B     @EL00001                                         01S0355
@DATA    DS    0H
@CH00700 DC    H'-8'
@CH00062 DC    H'1'
@CH00047 DC    H'8'
@CH00701 DC    H'48'
@CH00682 DC    H'4096'
         DS    0F
@SA00001 DS    18F
@SA00003 DS    18F
         DS    0F
@CF00623 DC    XL4'00FFFFFF'
@CA00658 DC    A(IODBOUT)
@CA00659 DC    A(LNG22I)
@CA00660 DC    A(DMP22I)
         DS    0D
LASTARB  DC    A(0)
CURRADDR DC    A(0)
@CC00641 DC    C'LARD'
ARBH     DS    CL100
         ORG   ARBH
ARBID    DC    CL4'ARB '
ARBE     DS    CL8
         ORG   ARBE+0
@NM00031 DC    A(0)
@NM00032 DC    A(0)
         ORG   ARBE+8
         ORG   ARBE+8
         DC    A(0)
         DC    A(0)
         ORG   ARBE+16
         ORG   ARBE+16
         DC    A(0)
         DC    A(0)
         ORG   ARBE+24
         ORG   ARBE+24
         DC    A(0)
         DC    A(0)
         ORG   ARBE+32
         ORG   ARBE+32
         DC    A(0)
         DC    A(0)
         ORG   ARBE+40
         ORG   ARBE+40
         DC    A(0)
         DC    A(0)
         ORG   ARBE+48
         ORG   ARBE+48
         DC    A(0)
         DC    A(0)
         ORG   ARBE+56
         ORG   ARBE+56
         DC    A(0)
         DC    A(0)
         ORG   ARBE+64
         ORG   ARBE+64
         DC    A(0)
         DC    A(0)
         ORG   ARBE+72
         ORG   ARBE+72
         DC    A(0)
         DC    A(0)
         ORG   ARBE+80
         ORG   ARBE+80
         DC    A(0)
         DC    A(0)
         ORG   ARBE+88
         ORG   ARBE+88
         DC    A(0)
         DC    A(0)
         ORG   ARBH+100
ARBEND   DS    0C
         ORG   ARBH+100
ARDRCB   DS    CL20
         ORG   ARDRCB
@NM00033 DC    A(0)
ARDSTOR1 DC    A(0)
@NM00034 DC    A(0)
@NM00035 DC    A(0)
@NM00036 DC    A(0)
         ORG   ARDRCB+20
ARDMSG   DS    CL11
         ORG   ARDMSG
@NM00038 DC    CL5'PAGE='
DMPMSG   DC    CL6' '
         ORG   ARDMSG+11
         DS    CL1
OUTBINL  DS    CL10
         ORG   OUTBINL
OUTBINA  DC    A(0)
OUTEBCA  DC    A(0)
@NM00037 DC    AL2(4-1)
         ORG   OUTBINL+10
DUMMY2   DC    X'00'
         DS    CL1
ARDPATCH DC    15F'0'
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
ARDIOTYP EQU   @04
ARDBUFT  EQU   @09
OUTBCTAD EQU   @06
EXITSAVE EQU   @08
RSVESAVE EQU   @07
ARDPTR2  EQU   @02
ARDPTR1  EQU   @04
ARDARBAD EQU   @05
ARDENDA  EQU   @03
ARDBEGA  EQU   @06
VCCTREG  EQU   @12
RETCODE  EQU   @15
BASEREG  EQU   @11
R0       EQU   @00
R1       EQU   @01
R13      EQU   @13
RETREG   EQU   @14
R10      EQU   @10
R11      EQU   @11
R12      EQU   @12
R14      EQU   @14
R15      EQU   @15
R2       EQU   @02
R3       EQU   @03
R4       EQU   @04
R5       EQU   @05
R6       EQU   @06
R7       EQU   @07
R8       EQU   @08
R9       EQU   @09
         ENTRY ARBH
         EXTRN IODBOUT
         EXTRN LNG22I
         EXTRN DMP22I
SADMPLSD EQU   3312
ARB      EQU   0
ARBADDRB EQU   ARB
ARBADDRE EQU   ARB+4
BCTH     EQU   0
BCTHFRST EQU   BCTH+4
BCTHLAST EQU   BCTH+8
BCT      EQU   0
BCTNEXT  EQU   BCT+4
BCTASID  EQU   BCT+10
BCTVADDR EQU   BCT+12
BCTLPID  EQU   BCT+28
BCTFLGT  EQU   BCT+44
BCTFLGI  EQU   BCT+45
BCTCOMP  EQU   BCTFLGI
BCTALLOC EQU   BCTFLGI
BCTIOERR EQU   BCTFLGI
CCT      EQU   0
CTFLG1   EQU   CCT+1
CTFLG2   EQU   CCT+2
CTPGEFLT EQU   CTFLG2
CTLOWFLG EQU   CCT+48
CTDMPTYP EQU   CCT+52
CTIOTYPE EQU   CTDMPTYP
CTIOOUT  EQU   CTIOTYPE
CTCONFLG EQU   CTDMPTYP+2
CTBUFTYP EQU   CTDMPTYP+3
CTDUMP   EQU   CTBUFTYP
CTPRMT1  EQU   CTDMPTYP+24
CTPRMT2  EQU   CTDMPTYP+26
CCW      EQU   0
CCWFLAGS EQU   CCW+4
CSW      EQU   0
CSWKEY00 EQU   CSW
CSWUSTAT EQU   CSW+4
CSWCSTAT EQU   CSW+5
DSCE     EQU   0
IODB     EQU   0
IODBFLAG EQU   IODB+8
IODBBCT  EQU   IODB+16
IODBCCHH EQU   IODB+32
IODBSRCH EQU   IODBCCHH+3
MDCE     EQU   0
MDCB     EQU   0
MDCBGRS  EQU   MDCB+16
MDCBFLGS EQU   MDCB+86
PSW      EQU   0
PSWSM    EQU   PSW
@NM00023 EQU   PSW+1
PSWCCPM  EQU   PSW+2
@NM00026 EQU   PSW+3
PTRT     EQU   0
PTRTRSA  EQU   0
RCB      EQU   0
RCBNEXT  EQU   RCB
RCBSAVE  EQU   RCB+8
RCBEXIT  EQU   RCB+12
RCBBASE  EQU   RCB+16
VCCT     EQU   0
VCTRCB   EQU   VCCT+4
VCTRECSN EQU   VCCT+8
VCTFLGS  EQU   VCCT+9
VCTSADMP EQU   VCTFLGS
VCTNOI22 EQU   VCTFLGS
VCTMDCE  EQU   VCCT+12
VCTDSCE  EQU   VCCT+20
VCTBCTH  EQU   VCCT+24
VCTBCTC  EQU   VCCT+28
VCTASID  EQU   VCCT+60
VCTCBID  EQU   VCCT+64
VCTLPA   EQU   VCCT+84
VCTCCTV  EQU   VCCT+104
SDL      EQU   0
REGLOCAL EQU   0
SAVEFORM EQU   0
VLNG22I  EQU   0
VDMP22I  EQU   0
DUMMY    EQU   0
PTRTVSA  EQU   0
CTLOWDMP EQU   CTDMPTYP
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
CTADDRE  EQU   CTLOWDMP+4
CTADDRS  EQU   CTLOWDMP
SAVER12  EQU   SAVEFORM+68
SAVER11  EQU   SAVEFORM+64
SAVER10  EQU   SAVEFORM+60
SAVER9   EQU   SAVEFORM+56
SAVER8   EQU   SAVEFORM+52
SAVER7   EQU   SAVEFORM+48
SAVER6   EQU   SAVEFORM+44
SAVER5   EQU   SAVEFORM+40
SAVER4   EQU   SAVEFORM+36
SAVER3   EQU   SAVEFORM+32
SAVER2   EQU   SAVEFORM+28
SAVER1   EQU   SAVEFORM+24
SAVER0   EQU   SAVEFORM+20
SAVER15  EQU   SAVEFORM+16
SAVER14  EQU   SAVEFORM+12
SAVENEXT EQU   SAVEFORM+8
SAVEBACK EQU   SAVEFORM+4
SAVENAME EQU   SAVEFORM+1
SAVEID   EQU   SAVEFORM
REGL15   EQU   REGLOCAL+60
REGL14   EQU   REGLOCAL+56
REGL13   EQU   REGLOCAL+52
REGL12   EQU   REGLOCAL+48
REGL11   EQU   REGLOCAL+44
REGL10   EQU   REGLOCAL+40
REGL9    EQU   REGLOCAL+36
REGL8    EQU   REGLOCAL+32
REGL7    EQU   REGLOCAL+28
REGL6    EQU   REGLOCAL+24
REGL5    EQU   REGLOCAL+20
REGL4    EQU   REGLOCAL+16
REGL3    EQU   REGLOCAL+12
REGL2    EQU   REGLOCAL+8
REGL1    EQU   REGLOCAL+4
REGL0    EQU   REGLOCAL
SDLSPN   EQU   SDL+1
SDLNUM   EQU   SDL
VCTVCCTV EQU   VCCT+108
@NM00030 EQU   VCCT+102
VCTEXTRA EQU   VCCT+100
VCTCPOUT EQU   VCCT+96
VCTSVCTB EQU   VCCT+92
VCTPGT   EQU   VCCT+88
VCTCBADR EQU   VCCT+80
VCTJBNME EQU   VCCT+72
VCTCBIDN EQU   VCTCBID+7
@NM00029 EQU   VCTCBID
VCTAUDIT EQU   VCCT+62
VCTPTRT  EQU   VCCT+56
VCTMASCB EQU   VCCT+52
VCTASCB  EQU   VCCT+48
VCTCPUC  EQU   VCCT+46
VCTWKC   EQU   VCCT+45
VCTWKHI  EQU   VCCT+44
VCTSUBPL EQU   VCCT+40
VCTARB   EQU   VCCT+36
VCTIODB  EQU   VCCT+32
VCTSTOR  EQU   VCCT+16
VCTRECVA EQU   VCCT+10
@NM00028 EQU   VCTFLGS
VCTLRCLM EQU   VCTFLGS
VCTARCLM EQU   VCTFLGS
VCTASMIC EQU   VCTFLGS
VCTMEMIN EQU   VCTFLGS
@NM00027 EQU   VCTRECSN
VCTRSMR  EQU   VCTRECSN
VCTEXIR  EQU   VCTRECSN
VCTUPDR  EQU   VCTRECSN
VCTPGIR  EQU   VCTRECSN
VCTVCT   EQU   VCCT
RCBSTOR  EQU   RCB+4
PTRTVS   EQU   PTRT+1032
PTRTRS   EQU   PTRT+8
PTRTLGID EQU   PTRT+4
PTRTPTRT EQU   PTRT
PSWEND   EQU   PSW+8
PSWIA    EQU   PSW+4
PSWSP    EQU   @NM00026
PSWSIG   EQU   PSWCCPM
PSWEU    EQU   PSWCCPM
PSWDO    EQU   PSWCCPM
PSWFPO   EQU   PSWCCPM
@NM00025 EQU   PSWCCPM
@NM00024 EQU   PSWCCPM
PSWPRBLM EQU   @NM00023
PSWAIT   EQU   @NM00023
PSWMCH   EQU   @NM00023
PSWMODE  EQU   @NM00023
PSWKEY   EQU   @NM00023
PSWXTRNL EQU   PSWSM
PSWIO    EQU   PSWSM
PSWDAT   EQU   PSWSM
@NM00022 EQU   PSWSM
@NM00021 EQU   PSWSM
@NM00020 EQU   PSWSM
PSWPER   EQU   PSWSM
@NM00019 EQU   PSWSM
@NM00018 EQU   MDCB+87
@NM00017 EQU   MDCBFLGS
MDCBDUMP EQU   MDCBFLGS
MDCBASMI EQU   MDCBFLGS
MDCBPI   EQU   MDCB+84
MDCBSTOR EQU   MDCB+80
MDCBGR15 EQU   MDCBGRS+60
MDCBGR14 EQU   MDCBGRS+56
MDCBGR13 EQU   MDCBGRS+52
MDCBGR12 EQU   MDCBGRS+48
MDCBGR11 EQU   MDCBGRS+44
MDCBGR10 EQU   MDCBGRS+40
MDCBGR9  EQU   MDCBGRS+36
MDCBGR8  EQU   MDCBGRS+32
MDCBGR7  EQU   MDCBGRS+28
MDCBGR6  EQU   MDCBGRS+24
MDCBGR5  EQU   MDCBGRS+20
MDCBGR4  EQU   MDCBGRS+16
MDCBGR3  EQU   MDCBGRS+12
MDCBGR2  EQU   MDCBGRS+8
MDCBGR1  EQU   MDCBGRS+4
MDCBGR0  EQU   MDCBGRS
MDCBPSW  EQU   MDCB+8
MDCBNEXT EQU   MDCB+4
MDCBMDCB EQU   MDCB
MDCEAVIL EQU   MDCE+8
MDCEACTV EQU   MDCE+4
MDCEMDCE EQU   MDCE
IODBSENS EQU   IODB+40
IODBR    EQU   IODBCCHH+7
IODBHH   EQU   IODBSRCH+2
IODBCC   EQU   IODBSRCH
IODBSEEK EQU   IODBCCHH+1
IODBM    EQU   IODBCCHH
IODBCSW  EQU   IODB+24
IODBCAW  EQU   IODB+20
IODBCPU  EQU   IODB+14
IODBTYPE EQU   IODB+13
IODBCLAS EQU   IODB+12
IODBDEV  EQU   IODB+10
@NM00016 EQU   IODBFLAG+1
IODBSTRT EQU   IODBFLAG
IODBCONW EQU   IODBFLAG
IODBACTV EQU   IODBFLAG
IODBHALT EQU   IODBFLAG
IODBIOC  EQU   IODBFLAG
IODBINT  EQU   IODBFLAG
IODBPTRM EQU   IODBFLAG
IODBTERM EQU   IODBFLAG
IODBIDEN EQU   IODB+4
IODBIODB EQU   IODB
DSCETEND EQU   DSCE+20
DSCETCUR EQU   DSCE+16
DSCETBEG EQU   DSCE+12
DSCENEXT EQU   DSCE+8
DSCEBEGN EQU   DSCE+4
DSCEDSCE EQU   DSCE
CSWCNT   EQU   CSW+6
CSWCHC   EQU   CSWCSTAT
CSWICC   EQU   CSWCSTAT
CSWCCC   EQU   CSWCSTAT
CSWCDC   EQU   CSWCSTAT
CSWPTC   EQU   CSWCSTAT
CSWPGC   EQU   CSWCSTAT
CSWIL    EQU   CSWCSTAT
CSWPCI   EQU   CSWCSTAT
CSWUE    EQU   CSWUSTAT
CSWUC    EQU   CSWUSTAT
CSWDE    EQU   CSWUSTAT
CSWCE    EQU   CSWUSTAT
CSWBUSY  EQU   CSWUSTAT
CSWCUE   EQU   CSWUSTAT
CSWSTMOD EQU   CSWUSTAT
CSWATTN  EQU   CSWUSTAT
CSWCADDR EQU   CSW+1
@NM00015 EQU   CSWKEY00
CSWKEY   EQU   CSWKEY00
CCWCNT   EQU   CCW+6
@NM00014 EQU   CCW+5
@NM00013 EQU   CCWFLAGS
CCWIDA   EQU   CCWFLAGS
CCWPCI   EQU   CCWFLAGS
CCWSKIP  EQU   CCWFLAGS
CCWSLI   EQU   CCWFLAGS
CCWCC    EQU   CCWFLAGS
CCWDC    EQU   CCWFLAGS
CCWDADDR EQU   CCW+1
CCWCMD   EQU   CCW
CTHWMAX  EQU   CTDMPTYP+29
CTHWM    EQU   CTDMPTYP+28
CTPRMT2X EQU   CTPRMT2+1
CTPRMT2Y EQU   CTPRMT2
CTPRMT1X EQU   CTPRMT1+1
CTPRMT1Y EQU   CTPRMT1
CTVCCT   EQU   CTDMPTYP+20
CTEOR    EQU   CTDMPTYP+16
CTCOMMIO EQU   CTDMPTYP+12
CTLWKAD  EQU   CTDMPTYP+8
CTCONSOL EQU   CTDMPTYP+4
@NM00012 EQU   CTBUFTYP
CTLSQA   EQU   CTBUFTYP
CTASM    EQU   CTBUFTYP
CTPGT    EQU   CTBUFTYP
CTWKFLE  EQU   CTBUFTYP
@NM00011 EQU   CTBUFTYP
@NM00010 EQU   CTCONFLG
CTREAD   EQU   CTCONFLG
CTMSGOUT EQU   CTCONFLG
@NM00009 EQU   CTDMPTYP+1
@NM00008 EQU   CTIOTYPE
CTIORSET EQU   CTIOTYPE
CTIOINT  EQU   CTIOTYPE
CTIOCON  EQU   CTIOTYPE
CTIOWK   EQU   CTIOTYPE
CTIODA   EQU   CTIOTYPE
CTIOTERM EQU   CTIOTYPE
CTEBCOPR EQU   CCT+49
@NM00007 EQU   CTLOWFLG
CTWKSTUS EQU   CTLOWFLG
CTINIT   EQU   CTLOWFLG
CTFP     EQU   CTLOWFLG
CTVIRTD  EQU   CTLOWFLG
CTEBCOPD EQU   CCT+45
CTCONTYP EQU   CCT+44
CTOUTAD  EQU   CCT+42
CTCPUI   EQU   CCT+40
CTERBCON EQU   CCT+36
CTERBTPE EQU   CCT+32
CTERBDA  EQU   CCT+28
CTCCHHW  EQU   CCT+24
CTCCHHE  EQU   CCT+20
CTCCHHS  EQU   CCT+16
CTPGECNT EQU   CCT+15
CTCCHHR  EQU   CCT+8
CTINADDR EQU   CCT+6
CTSENSE  EQU   CCT+4
CTDEVTYP EQU   CCT+3
@NM00006 EQU   CTFLG2
CTALTCON EQU   CTFLG2
CTWKDONE EQU   CTFLG2
CTVIRTR  EQU   CTFLG2
CTNOSTAT EQU   CTFLG2
CTSTOR   EQU   CTFLG2
CTDUPSW  EQU   CTFLG2
CTERREC  EQU   CTFLG1
CTMP     EQU   CTFLG1
@NM00005 EQU   CTFLG1
CTDEFO   EQU   CTFLG1
CTWORK   EQU   CTFLG1
CTMORTPE EQU   CTFLG1
CTDEVICE EQU   CTFLG1
CTERROR  EQU   CTFLG1
CTWAIT   EQU   CCT
@NM00004 EQU   BCT+46
BCTRECLM EQU   BCTFLGI
@NM00003 EQU   BCTFLGT
BCTPGTF  EQU   BCTFLGT
BCTDUMP  EQU   BCTFLGT
BCTLSQA  EQU   BCTFLGT
BCTASM   EQU   BCTFLGT
BCTPGT   EQU   BCTFLGT
BCTWKFLE EQU   BCTFLGT
@NM00002 EQU   BCTFLGT
BCTRBA   EQU   BCT+40
BCTAMB   EQU   BCT+36
@NM00001 EQU   BCTLPID+4
BCTLGN   EQU   BCTLPID
BCTMDCB  EQU   BCT+24
BCTPGTE  EQU   BCT+20
BCTRADDR EQU   BCT+16
BCTKEY2  EQU   BCT+9
BCTKEY1  EQU   BCT+8
BCTBCT   EQU   BCT
BCTHBCTH EQU   BCTH
GTMSAVE  EQU   SADMPLSD+684
GTMNAME  EQU   SADMPLSD+680
FRMSAVE  EQU   SADMPLSD+580
FRMNAME  EQU   SADMPLSD+576
AUDSAVE  EQU   SADMPLSD+476
AUDNAME  EQU   SADMPLSD+472
IOISAVE  EQU   SADMPLSD+372
IOINAME  EQU   SADMPLSD+368
PGISAVE  EQU   SADMPLSD+268
PGINAME  EQU   SADMPLSD+264
SVISAVE  EQU   SADMPLSD+164
SVINAME  EQU   SADMPLSD+160
LOWCRS   EQU   SADMPLSD+96
LOWGRS   EQU   SADMPLSD+32
SAVEDUMP EQU   SADMPLSD+24
AUDPSW   EQU   SADMPLSD+16
SVIRPSW  EQU   SADMPLSD+8
PSWSADMP EQU   SADMPLSD
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RT00191 EQU   ARDRET
@RT00193 EQU   ARDRET
@RT00203 EQU   ARBMERGE
@RC00206 EQU   FILLARB
@RT00236 EQU   ARDRET
@RF00232 EQU   ARDRET
@RT00293 EQU   OUTRET
@RT00306 EQU   OUTIOST
@PB00003 EQU   @EL00001
@PB00002 EQU   @PB00003
@ENDDATA EQU   *
         END   AMDSAARD,(C'PL/S-II',0502,74035)
