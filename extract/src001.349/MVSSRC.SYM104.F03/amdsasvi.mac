         TITLE 'AMDSASVI  SVC INTERRUPT HANDLER                        *
                       '
AMDSASVI CSECT
         STM   R0,R15,SVISAVE         SAVE REGISTERS IN LOW CORE
         BALR  BASEREG,0              SET UP ADDRESSABILITY
         USING *,BASEREG
*   VCCTREG = CTVCCT;               /* ESTABLISH ADDRESSABILITY TO 0201
*                                      VCCT                          */
         LH    @03,@CH00754                                        0201
         L     VCCTREG,CTVCCT(,@03)                                0201
*   R13 = ADDR(SVINAME);            /* POINT TO MODULE ID            */
*                                                                  0202
         LA    R13,SVINAME                                         0202
*   /*****************************************************************/
*   /*                                                               */
*   /* ENSURE THAT SVC WAS NOT ISSUED WITHIN ONE OF THE ASM MODULES. */
*   /* CHECK FOR INVALID OR RESERVED SVC NUMBER. IF EITHER ARE TRUE, */
*   /* AN ERROR CONDITION EXISTS.                                    */
*   /*                                                               */
*   /*****************************************************************/
*/* D (YES,,NO,%SVIMAX) VCTASMIC ON                                  */
*/* N ERROR - AN ASM ROUTINE HAS ISSUED SVC                          */
*/* P RESET VCTASMIC                                                 */
*/* P TURN ON VCTSADMP REQUESTING DUMP                               */
*/* P SET ERROR CODE                                                 */
*/* P RESTORE REGISTERS 0-15                                         */
*/* R AMDSAAUD: PERFORM ERROR RECOVERY                               */
*/*%SVIMAX: D (YES,,NO,SVIERROR) FLCSVCN <= MAX. SVC NO.             */
*/* D (NO,,YES,SVIERROR) ENTRY POINT ADDRESS = 0                     */
*/* P UPDATE TRACE TABLE WITH SVC NUMBER                             */
*                                                                  0203
*   IF VCTASMIC = ON THEN           /* DID ONE OF THE ASM MODULES  0203
*                                      ISSUE THE SVC                 */
         TM    VCTASMIC(VCCTREG),B'00100000'                       0203
         BNO   @RF00203                                            0203
*     DO;                           /* YES                           */
*       VCTASMIC = OFF;             /* RESET ASM IN CONTROL BIT      */
*       VCTSADMP = ON;              /* REQUEST DUMP                  */
         OI    VCTSADMP(VCCTREG),B'10000000'                       0206
         NI    VCTASMIC(VCCTREG),B'11011111'                       0206
*       VCTAUDIT = SVIASMER;        /* SET UP ERROR CODE             */
         MVC   VCTAUDIT(2,VCCTREG),@CH00947                        0207
*       FLCPOPSW = FLCSOPSW;        /* SAVE PSW FOR DUMP             */
         MVC   FLCPOPSW(8),FLCSOPSW                                0208
*       GEN(LM    R0,R15,SVISAVE);  /* RESTORE REGISTERS 0-15        */
         LM    R0,R15,SVISAVE
*       SVC (AUDSVC);               /* GO TO AMDSAAUD FOR ERROR    0210
*                                      RECOVERY - CONTROL WILL BE  0210
*                                      RETURNED TO THE FIRST RCB EXIT*/
         SVC   13                                                  0210
*     END;                                                         0211
*   IF FLCSVCN >= DIM(SVCSADMP) THEN /* IS SVC NUMBER VALID          */
@RF00203 LH    @03,FLCSVCN                                         0212
         CH    @03,@CH00889                                        0212
         BNL   @RT00212                                            0212
*     GO TO SVIERROR;               /* NO - ERROR                    */
*   SVCEPADD = SVCSADMP(FLCSVCN + 1); /* GET ENTRY POINT ADDRESS     */
         LR    @15,@03                                             0214
         SLA   @15,2                                               0214
         L     SVCEPADD,SVCSADMP(@15)                              0214
*   IF SVCEPADD = 0 THEN            /* RESERVED SVC ISSUED           */
         LTR   SVCEPADD,SVCEPADD                                   0215
         BZ    @RT00215                                            0215
*     GO TO SVIERROR;               /* NO - ERROR                    */
*   TRCENTRY = FLCSVCN;             /* SVC NUMBER TO TRACE TABLE     */
         L     @15,VCTDSCE(,VCCTREG)                               0217
         L     @14,DSCETCUR(,@15)                                  0217
         STC   @03,TRCENTRY(,@14)                                  0217
*   DSCETCUR = DSCETCUR+1;          /* UPDATE NEXT TRACE POINTER     */
         AH    @14,@CH00037                                        0218
         ST    @14,DSCETCUR(,@15)                                  0218
*   IF DSCETCUR >= DSCETEND THEN    /* END OF TRACE TABLE            */
         C     @14,DSCETEND(,@15)                                  0219
         BL    @RF00219                                            0219
*     DSCETCUR = DSCETBEG;          /* YES - WRAP AROUND             */
         MVC   DSCETCUR(4,@15),DSCETBEG(@15)                       0220
*                                                                  0221
*   /*****************************************************************/
*   /*                                                               */
*   /* CHECK IF SWITCHING FROM TRANSLATED TO UNTRANSLATED MODE IS    */
*   /* REQUESTED.  IF SO, GET AN MDCB AND HANDLE AS A MEMORY SWITCH. */
*   /* SVCS WHICH MUST EXECUTE UNTRANSLATED ARE IN THE NODATAB.      */
*   /*                                                               */
*   /*****************************************************************/
*/* D (YES,,NO,%CHKSTOR) CALLER IN DAT MODE                          */
*/* D (YES,,NO,%CHKSTOR) REQUESTED SVC IN NODATAB                    */
*/* P (,AMDSAMSW) INDICATE SWITCH TO NON-DAT SVC                     */
*                                                                  0221
*   RESPECIFY I RESTRICTED;                                        0221
@RF00219 DS    0H                                                  0222
*   IF PSWDAT = ON THEN             /* CALLER IN TRANSLATED MODE     */
         LA    @08,FLCSOPSW                                        0222
         TM    PSWDAT(@08),B'00000100'                             0222
         BNO   @RF00222                                            0222
*     DO I = DIM(NODATAB) TO 1 BY -1; /* YES - CHECK NODATAB         */
         LA    I,6                                                 0223
@DL00223 DS    0H                                                  0224
*       IF FLCSVCN = NODATAB(I) THEN /* REQUESTED SVC IN TABLE       */
         LR    @08,I                                               0224
         AR    @08,@08                                             0224
         LA    @03,NODATAB-2(@08)                                  0224
         CLC   FLCSVCN(2),0(@03)                                   0224
         BNE   @RF00224                                            0224
*         DO;                       /* YES -                         */
*           NODATSVC = ON;          /* INDICATE SWITCH TO NON-DAT SVC*/
         OI    NODATSVC,B'10000000'                                0226
*           GO TO AMDSAMSW;         /* HANDLE AS MEMORY SWITCH       */
         B     AMDSAMSW                                            0227
*         END;                                                     0228
*     END;                                                         0229
@RF00224 BCTR  I,0                                                 0229
         LTR   I,I                                                 0229
         BP    @DL00223                                            0229
*   RESPECIFY I UNRESTRICTED;                                      0230
@RF00222 DS    0H                                                  0231
*                                                                  0231
*   /*****************************************************************/
*   /*                                                               */
*   /* CHECK FOR MEMORY SWITCH.  IF NOT, THEN SET UP TO GIVE CONTROL */
*   /* TO REQUESTED FUNCTION BY LOGICALLY CONVERTING THE SVC TO A    */
*   /* BALR 14,15.                                                   */
*   /*                                                               */
*   /*****************************************************************/
*/*%CHKSTOR: D (YES,%NOMEMSW,NO,) VCTSTOR = 0                        */
*/* D (YES,,NO,AMDSAMSW) AMDSAAUD REQUESTED                          */
*/*%NOMEMSW: P SET R14 IN SVISAVE TO PSWIA IN FLCSOPSW               */
*/* P SET PSWIA IN FLCSOPSW TO SVCSADMP (FLCSVCN+1)                  */
*/* D (YES,,NO,%DATCHK) AMDSAAUD REQUESTED                           */
*/* P (,%SVIRET1) TURN DAT OFF                                       */
*/*%DATCHK: D (YES,,NO,%SVIRET1) PSWDAT ON IN FLCSOPSW               */
*/* P ADD VCTLPA TO PSWIA IN FLCSOPSW TO PROVIDE VIRT ADDR           */
*/*%SVIRET1: P SET GPR 15 = PSWIA                                    */
*/* P RESTORE REGISTERS FROM SVISAVE                                 */
*/* R LPSW FLCSOPSW                                                  */
*                                                                  0231
*   IF VCTSTOR = 0 × FLCSVCN = AUDSVC THEN /* NO MEMORY SWITCH OR  0231
*                                      AMDSAAUD REQUESTED            */
         ICM   @03,15,VCTSTOR(VCCTREG)                             0231
         BZ    @RT00231                                            0231
         CLC   FLCSVCN(2),@CH00780                                 0231
         BNE   @RF00231                                            0231
@RT00231 DS    0H                                                  0232
*     DO;                           /* YES                           */
*       RESPECIFY REGLOCAL BASED(ADDR(SVISAVE));                   0233
*       VCTSTOR = 0;                /* FORCE NO MEMORY SWITCH        */
         SR    @03,@03                                             0234
         ST    @03,VCTSTOR(,VCCTREG)                               0234
*       REGL14 = PSWIA;             /* SAVE NEXT SEQUENTIAL INSTRUCTION
*                                      ADDRESS                       */
         LA    @03,SVISAVE                                         0235
         LA    @15,FLCSOPSW                                        0235
         MVC   REGL14(4,@03),PSWIA(@15)                            0235
*       PSWIA = SVCEPADD;           /* REAL ADDR OF CALLED ROUTINE   */
         ST    SVCEPADD,PSWIA(,@15)                                0236
*       IF FLCSVCN = AUDSVC THEN    /* AMDSAAUD REQUESTED            */
         CLC   FLCSVCN(2),@CH00780                                 0237
         BNE   @RF00237                                            0237
*         PSWDAT = OFF;             /* ENSURE IT RECEIVES CONTROL  0238
*                                      UNTRANSLATED                  */
         NI    PSWDAT(@15),B'11111011'                             0238
*       ELSE                                                       0239
*         IF PSWDAT = ON THEN       /* CALLER RUNNING TRANSLATED     */
         B     @RC00237                                            0239
@RF00237 LA    @03,FLCSOPSW                                        0239
         TM    PSWDAT(@03),B'00000100'                             0239
         BNO   @RF00239                                            0239
*           PSWIA = SVCEPADD + VCTLPA; /* YES - GET VIRTUAL ADDRESS  */
         LR    @15,SVCEPADD                                        0240
         A     @15,VCTLPA(,VCCTREG)                                0240
         ST    @15,PSWIA(,@03)                                     0240
*       REGL15 = PSWIA;             /* SET R15 TO ENTRY POINT ADDR   */
@RF00239 DS    0H                                                  0241
@RC00237 LA    @03,SVISAVE                                         0241
         LA    @15,FLCSOPSW                                        0241
         MVC   REGL15(4,@03),PSWIA(@15)                            0241
*       GEN(LM    R0,R15,SVISAVE);  /* RESTORE REGISTERS             */
         LM    R0,R15,SVISAVE
*       LPSW (FLCSOPSW);            /* TRANSFER CONTROL TO REQUESTED
*                                      ROUTINE - CONTROL IS RETURNED
*                                      DIRECTLY TO ISSUER OF SVC     */
         LPSW  FLCSOPSW                                            0243
*     END;                                                         0244
*   NODATSVC = OFF;                 /* RESET SVC MODE INDICATOR      */
@RF00231 NI    NODATSVC,B'01111111'                                0245
*                                                                  0246
*   /*****************************************************************/
*   /*                                                               */
*   /* MEMORY SWITCH REQUESTED. INITIALIZE MDCB TO SAVE CALLER'S     */
*   /* STATUS                                                        */
*   /*                                                               */
*   /*****************************************************************/
*/*AMDSAMSW: N MEMORY SWITCH REQUESTED                               */
*/* P OBTAIN MDCE ADDR FROM VCTMDCE                                  */
*/* D (NO,,YES,SVIERROR) MDCEAVIL = 0                                */
*/* P DEQUEUE MDCB FROM AVAILABLE QUEUE                              */
*/* P ENQUEUE MDCB ON ACTIVE QUEUE                                   */
*/* P MOVE REGS FROM SVISAVE TO MDCBGRS                              */
*/* P SAVE CONTROL REG 1 IN MDCBSTOR                                 */
*/* P SAVE FLCSOPSW IN MDCBPSW                                       */
*/* P SET MDCBPI TO 0                                                */
*/* P SET MDCBFLGS TO 0                                              */
*                                                                  0246
*                                                                  0246
*AMDSAMSW:                                                         0246
*   IF MDCEAVIL = 0 THEN            /* MDCB AVAILABLE                */
AMDSAMSW L     @03,VCTMDCE(,VCCTREG)                               0246
         L     @15,MDCEAVIL(,@03)                                  0246
         LTR   @15,@15                                             0246
         BZ    @RT00246                                            0246
*     GO TO SVIERROR;               /* NO - ERROR                    */
*   MDCBADDR = MDCEAVIL;            /* GET FIRST AVAILABLE MDCB      */
         LR    MDCBADDR,@15                                        0248
*   MDCEAVIL = MDCBNEXT;            /* MAKE NEXT MDCB AVAILABLE      */
         MVC   MDCEAVIL(4,@03),MDCBNEXT(MDCBADDR)                  0249
*   MDCBNEXT = MDCEACTV;            /* QUEUE MDCB TO ACTIVE QUEUE    */
         MVC   MDCBNEXT(4,MDCBADDR),MDCEACTV(@03)                  0250
*   MDCEACTV = MDCBADDR;            /* MAKE MDCB ACTIVE              */
         ST    MDCBADDR,MDCEACTV(,@03)                             0251
*   MDCBGRS = SVISAVE;              /* MOVER REGISTERS TO MDCB       */
         MVC   MDCBGRS(64,MDCBADDR),SVISAVE                        0252
*   GENERATE REFS(R1,R1) SETS(WORKSTOR) (STCTL R1,R1,WORKSTOR); /*STORE
*                                      CONTROL REG 1                 */
         STCTL R1,R1,WORKSTOR
*   MDCBSTOR = WORKSTOR;            /* SAVE CONTROL REG 1 IN MDCB    */
         MVC   MDCBSTOR(4,MDCBADDR),WORKSTOR                       0254
*   MDCBPSW = FLCSOPSW;             /* SAVE PSW IN MDCB              */
         MVC   MDCBPSW(8,MDCBADDR),FLCSOPSW                        0255
*   MDCBPI = 0;                     /* SET INTERRUPT CODE TO 0       */
         SR    @03,@03                                             0256
         STH   @03,MDCBPI(,MDCBADDR)                               0256
*   MDCBFLGS = 0;                   /* RESET MDCB FLAGS              */
         MVI   MDCBFLGS(MDCBADDR),X'00'                            0257
*                                                                  0258
*   /*****************************************************************/
*   /*                                                               */
*   /* SET UP DAT FOR NEW MEMORY                                     */
*   /*                                                               */
*   /*****************************************************************/
*/* P LOAD CONTROL REG 1 WITH VCTSTOR                                */
*/* P PURGE HARDWARE TABLE LOOK- ASIDE BUFFER                        */
*/* P SET VCTSTOR TO 0                                               */
*                                                                  0258
*   WORKSTOR = VCTSTOR;             /* REQUESTED MEMORY              */
         MVC   WORKSTOR(4),VCTSTOR(VCCTREG)                        0258
*   GENERATE REFS(WORKSTOR) SETS(R1) (LCTL  R1,R1,WORKSTOR); /* LOAD
*                                      CR 1 WITH NEW SEGMENT TABLE   */
         LCTL  R1,R1,WORKSTOR
*   GENERATE(PTLB);                 /* PURGE HARDWARE TABLE        0260
*                                      LOOK-ASIDE BUFFER             */
         PTLB
*   VCTSTOR = 0;                    /* RESET REQUESTED MEMORY ADDRESS*/
         SR    @03,@03                                             0261
         ST    @03,VCTSTOR(,VCCTREG)                               0261
*                                                                  0262
*   /*****************************************************************/
*   /*                                                               */
*   /* GET SAVE AREA AND INITIALIZE IT.                              */
*   /*                                                               */
*   /*****************************************************************/
*/* L AMDSAGTM: ISSUE SVC 4 TO OBTAIN STORAGE                        */
*/* D (YES,%SVIINT1,NO,%SVIER1) STORAGE OBTAINED                     */
*/*%SVIER1: P (,MODRET2) SET RETURN CODE OF 4 IN MDCBGR15            */
*/*%SVIINT1: P INITIALIZE SAVE AREA                                  */
*                                                                  0262
*   RESPECIFY (R1,R13) RESTRICTED;                                 0262
*   SVC(GTMSVC);                    /* GO TO AMDSAGTM TO GET STORAGE */
         SVC   4                                                   0263
*   RESPECIFY RETCODE RESTRICTED;                                  0264
*   IF RETCODE ^= 0 THEN            /* STORAGE OBTAINED              */
         LTR   RETCODE,RETCODE                                     0265
         BZ    @RF00265                                            0265
*     DO;                           /* NO                            */
*       MDCBGR15 = 4;               /* INDICATE REQUESTED FUNCTION 0267
*                                      FAILED                        */
         MVC   MDCBGR15(4,MDCBADDR),@CF00039                       0267
*       GO TO MODRET2;              /* CLEAN UP AND RETURN           */
         B     MODRET2                                             0268
*     END;                                                         0269
*   RESPECIFY RETCODE UNRESTRICTED;                                0270
@RF00265 DS    0H                                                  0271
*   RESPECIFY (R8,R15) RESTRICTED;                                 0271
*   R8 = R1;                        /* GET WORK AREA POINTER         */
         LR    R8,R1                                               0272
*   GENERATE REFS(R8) (USING @DATD,R8); /* MAKE WORK AREA ADDRESSABLE*/
         USING @DATD,R8
*   GENERATE SETS(R13) (LA    R13,@SA00001); /* POINT TO SAVE AREA   */
         LA    R13,@SA00001
*   RESPECIFY R1 UNRESTRICTED;                                     0275
*   SAVENAME = SVINAME(2:4);        /* PLACE NAME IN SAVE AREA       */
         MVC   SAVENAME(3,R13),SVINAME+1                           0276
*                                                                  0277
*   /*****************************************************************/
*   /*                                                               */
*   /* INITIALIZE NEW MEMORY PAGE TABLES. SET UP LINKAGE TO REQUESTED*/
*   /* ROUTINE.                                                      */
*   /*                                                               */
*   /*****************************************************************/
*/* P BUILD AN RCB IN THE SAVE/ WORK AREA                            */
*/* P (NORM,,RCB,MODERROR) ENQUEUE ON RCB QUEUE                      */
*/* P MOVE RESUME PSW TO LOW CORE                                    */
*/* P SET PSWIA IN FLCSOPSW TO SVCSADMP (FLCSVCN+1)                  */
*/* D (YES,,NO,%SVIMSW) NON-DAT SVC                                  */
*/* P AMDSAMSW R14 TO REAL ADDR OF LPSW INSTR                        */
*/* P (,%SVIASM) TURN PSWDAT OFF IN FLCSOPSW                         */
*/*%SVIMSW: S AMDSAREL: RELOCATE AMDSADMP                            */
*/* P AMDSAMSW R14 TO VIRT ADDR OF LPSW INSTR                        */
*/* P ADD VCTLPA TO R13 TO GIVE VIRT ADDR OF SAVE AREA               */
*/* P ADD VCTLPA TO PSWIA TO PROVIDE VIRT ADDR                       */
*/* P SET R12 TO VCTVCCTV                                            */
*/* P TURN ON PSWDAT IN FLCSOPSW                                     */
*/*%SVIASM: P SET R1 TO MDCBGR1 AND R0 TO MDCBGR0                    */
*/* P SET GPR 15 = PSWIA                                             */
*/* L (,MODRET) LOAD FLCSOPSW TO TRANSFER CONTROL TO MODULE          */
*                                                                  0277
*   RESPECIFY (R15,RETREG) RESTRICTED;                             0277
*   RESPECIFY RCB BASED(ADDR(DYNRCB));                             0278
*   RCBNEXT = VCTRCB;               /* QUEUE RCB TO RCB CHAIN        */
         LA    @09,DYNRCB                                          0279
         MVC   RCBNEXT(4,@09),VCTRCB(VCCTREG)                      0279
*   RCBSAVE = R13;                  /* POINT TO SAVE AREA            */
         ST    R13,RCBSAVE(,@09)                                   0280
*   RCBBASE = BASEREG;              /* SET UP BASE REGISTER VALUE    */
         ST    BASEREG,RCBBASE(,@09)                               0281
*   RCBEXIT = ADDR(MODERROR);       /* EXIT ADDRESS                  */
         LA    @03,MODERROR                                        0282
         ST    @03,RCBEXIT(,@09)                                   0282
*   VCTRCB = ADDR(RCB);             /* MAKE RCB CURRENT              */
         ST    @09,VCTRCB(,VCCTREG)                                0283
*   SVIRPSW = SVIRPSWI;             /* MOVE RESUME PSW TO LOW CORE TO
*                                      TURN DAT OFF AND GIVE CONTROL
*                                      TO NEXT INSTRUCTION           */
         MVC   SVIRPSW(8),SVIRPSWI                                 0284
*   PSWIA = SVCEPADD;               /* REAL ADDR ENTRY POINT         */
         LA    @09,FLCSOPSW                                        0285
         ST    SVCEPADD,PSWIA(,@09)                                0285
*   IF NODATSVC = ON THEN           /* TRANSFER TO UNTRANSLATED MOD  */
         TM    NODATSVC,B'10000000'                                0286
         BNO   @RF00286                                            0286
*     DO;                           /* YES -                         */
*       RETREG = ADDR(MODRET);      /* REAL RETURN ADDRESS           */
         LA    RETREG,MODRET                                       0288
*       PSWDAT = OFF;               /* NON-TRANSLATED MODE           */
         NI    PSWDAT(@09),B'11111011'                             0289
*     END;                                                         0290
*   ELSE                            /* NO - RELOCATE REGISTERS       */
*     DO;                                                          0291
         B     @RC00286                                            0291
@RF00286 DS    0H                                                  0292
*       CALL AMDSAREL;              /* RELOCATE SADMP AND SET UP PAGE
*                                      TABLES                        */
         BAL   @14,AMDSAREL                                        0292
*       RETREG = ADDR(MODRET) + VCTLPA; /* VIRTUAL RETURN ADDRESS    */
         LA    RETREG,MODRET                                       0293
         L     @09,VCTLPA(,VCCTREG)                                0293
         AR    RETREG,@09                                          0293
*       R13 = R13 + VCTLPA;         /* RELOCATE SAVE AREA POINTER    */
         AR    R13,@09                                             0294
*       PSWIA = SVCEPADD + VCTLPA;  /* VIRTUAL ENTRY POINT ADDRESS   */
         LA    @03,FLCSOPSW                                        0295
         AR    @09,SVCEPADD                                        0295
         ST    @09,PSWIA(,@03)                                     0295
*       PSWDAT = ON;                /* TURN DAT BIT ON FOR NEW PSW   */
         OI    PSWDAT(@03),B'00000100'                             0296
*       VCCTREG = VCTVCCTV;         /* VIRTUAL ADDRESS OF VCCT       */
         L     VCCTREG,VCTVCCTV(,VCCTREG)                          0297
*     END;                                                         0298
*   RESPECIFY R10 UNRESTRICTED;                                    0299
@RC00286 DS    0H                                                  0300
*   RESPECIFY (R0,R1) RESTRICTED;                                  0300
*   R0 = MDCBGR0;                   /* PASS ANY PARAMETERS           */
         L     R0,MDCBGR0(,MDCBADDR)                               0301
*   R1 = MDCBGR1;                   /* PASS ANY PARAMETERS           */
         L     R1,MDCBGR1(,MDCBADDR)                               0302
*   R15 = PSWIA;                    /* SET R15 TO ENTRY POINT ADDR   */
         LA    @09,FLCSOPSW                                        0303
         L     R15,PSWIA(,@09)                                     0303
*   LPSW (FLCSOPSW);                /* TRANSFER CONTROL TO REQUESTED
*                                      MODULE-RETURN POINT IS MODRET */
         LPSW  FLCSOPSW                                            0304
*   RESPECIFY (R0,R1) RESTRICTED;                                  0305
*                                                                  0306
*   /*****************************************************************/
*   /*                                                               */
*   /* RCB EXIT - RECEIVES CONTROL IF ANY MODULE FOLLOWING A         */
*   /* MEMORY SWITCH HAS NO RCB.  SET UP ERROR RETURN CODE.          */
*   /*                                                               */
*   /*****************************************************************/
*/*MODERROR: P SET UP RETURN CODE OF 4                               */
*                                                                  0306
*                                                                  0306
*MODERROR:                                                         0306
*   RETCODE = 4;                    /* SET UP ERROR RETURN CODE      */
MODERROR LA    RETCODE,4                                           0306
*                                                                  0307
*   /*****************************************************************/
*   /*                                                               */
*   /* RETURN POINT FROM MODULES. DAT IS TURNED OFF, THE MDCB IS     */
*   /* MADE AVAILABLE, AND THE SAVE AREA FREED.                      */
*   /*                                                               */
*   /*****************************************************************/
*/*MODRET: N THIS IS RETURN POINT FROM MODULES                       */
*/* P ENTER UNTRANSLATED MODE                                        */
*/* P RE-ESTABLISH ADDRESSABILITY TO VCCT                            */
*/* P SET MDCBGR15 TO R15 TO SAVE RET. CODE                          */
*/* P SAVE RETURN PARAMETER REGISTERS 0 AND 1                        */
*/* P RESET ASM IN CONTROL BIT (VCTASMIC)                            */
*/* P DEQUEUE RCB                                                    */
*/* L AMDSAFRM: ISSUE SVC 5 TO FREE SAVE AREA                        */
*                                                                  0307
*                                                                  0307
*MODRET:                                                           0307
*   LPSW (SVIRPSW);                 /* ENTER UNTRANSLATED MODE       */
*                                                                  0307
MODRET   LPSW  SVIRPSW                                             0307
*MODRET1:                                                          0308
*   RESPECIFY (R0,R1) RESTRICTED;                                  0308
MODRET1  DS    0H                                                  0309
*   VCCTREG = CTVCCT;               /* SET UP ADDRESSABILITY TO VCCT */
         LH    @09,@CH00754                                        0309
         L     VCCTREG,CTVCCT(,@09)                                0309
*   MDCBGR15 = RETCODE;             /* SAVE RETURN CODE FROM CALLED
*                                      MODULE                        */
         ST    RETCODE,MDCBGR15(,MDCBADDR)                         0310
*   MDCBGR0 = R0;                   /* SAVE RETURN PARAMETERS        */
         ST    R0,MDCBGR0(,MDCBADDR)                               0311
*   MDCBGR1 = R1;                   /* SAVE RETURN PARAMETERS        */
         ST    R1,MDCBGR1(,MDCBADDR)                               0312
*   VCTASMIC = OFF;                 /* RESET ASM IN CONTROL BIT      */
         NI    VCTASMIC(VCCTREG),B'11011111'                       0313
*   VCTRCB = RCBNEXT;               /* DEQUEUE RCB                   */
         LA    @09,DYNRCB                                          0314
         MVC   VCTRCB(4,VCCTREG),RCBNEXT(@09)                      0314
*   R1 = R8;                        /* ADDRESS OF AREA TO BE FREED   */
         LR    R1,R8                                               0315
*   SVC(FRMSVC);                    /* FREE STORAGE (AMDSAFRM)       */
         SVC   5                                                   0316
*   RESPECIFY (R0,R1,R15,RETREG) UNRESTRICTED;                     0317
*                                                                  0317
*   /*****************************************************************/
*   /*                                                               */
*   /* THE MDCB IS RETURNED TO THE AVAILABLE QUEUE AND CONTROL IS    */
*   /* RETURNED TO THE ISSUER OF THE SVC.                            */
*   /*                                                               */
*   /*****************************************************************/
*/*MODRET2: P SET FLCSOPSW TO MDCBPSW                                */
*/* P DEQUEUE MDCB FROM ACTIVE QUEUE                                 */
*/* P ENQUEUE MDCB ON AVAILABLE QUEUE                                */
*/* P SET CONTROL REG 1 TO MDCBSTOR                                  */
*/* P PURGE HARDWARE TABLE LOOK- ASIDE BUFFER                        */
*/* P RESTORE REGS FROM MDCBGRS                                      */
*/* N LOAD FLCSOPSW TO RETURN CONTROL TO ISSUER OF SVC               */
*/* R LPSW                                                           */
*                                                                  0318
*                                                                  0318
*MODRET2:                                                          0318
*   FLCSOPSW = MDCBPSW;             /* RESTORE PSW OF INTERRUPTED  0318
*                                      PROGRAM                       */
MODRET2  MVC   FLCSOPSW(8),MDCBPSW(MDCBADDR)                       0318
*   MDCEACTV = MDCBNEXT;            /* DEQUEUE MDCB FROM ACTIVE QUEUE*/
         L     @09,VCTMDCE(,VCCTREG)                               0319
         MVC   MDCEACTV(4,@09),MDCBNEXT(MDCBADDR)                  0319
*   MDCBNEXT = MDCEAVIL;            /* QUEUE MDCB TO AVAILABLE QUEUE */
         MVC   MDCBNEXT(4,MDCBADDR),MDCEAVIL(@09)                  0320
*   MDCEAVIL = MDCBADDR;            /* MAKE MDCB AVAILABLE           */
         ST    MDCBADDR,MDCEAVIL(,@09)                             0321
*   WORKSTOR = MDCBSTOR;            /* GET ORIGINAL SEGMENT TABLE  0322
*                                      ORIGIN                        */
         MVC   WORKSTOR(4),MDCBSTOR(MDCBADDR)                      0322
*   GENERATE REFS(WORKSTOR) SETS(R1) (LCTL  R1,R1,WORKSTOR); /* LOAD
*                                      ORIGINAL SEGMENT TABLE ORIGIN */
         LCTL  R1,R1,WORKSTOR
*   GENERATE(PTLB);                 /* PURGE HARDWARE TABLE        0324
*                                      LOOK-ASIDE BUFFER             */
         PTLB
*   GEN(LM    R0,R15,MDCBGRS(MDCBADDR)); /* RESTORE REGISTERS        */
         LM    R0,R15,MDCBGRS(MDCBADDR)
*   LPSW (FLCSOPSW);                /* RETURN CONTROL TO THE CALLER  */
         LPSW  FLCSOPSW                                            0326
*                                                                  0327
*   /*****************************************************************/
*   /*                                                               */
*   /* HANDLE INVALID SVC NUMBER OR MDCB UNAVAILABLE. REQUEST DUMP   */
*   /* AND SET RETURN CODE OF 4 TO CALLER                            */
*   /*                                                               */
*   /*****************************************************************/
*/*SVIERROR: P ENQUEUE RCB TO VCTRCB                                 */
*/* P TURN ON VCTSADMP TO REQUEST DUMP                               */
*/* P TURN OFF VCTASMIC                                              */
*/* P SAVE REGS FROM SVISAVE AND PSW FROM FLCSOPSW                   */
*/* N THIS IS NEEDED DUE TO RECURSION BY AMDSAAUD THROUGH SVI        */
*/* P SET UP ERROR CODE                                              */
*/* L (RCB,) CALL AMDSAAUD                                           */
*                                                                  0327
*                                                                  0327
*SVIERROR:                                                         0327
*   RESPECIFY RCB BASED(ADDR(SVIRCB));                             0327
SVIERROR DS    0H                                                  0328
*   RCBNEXT = VCTRCB;               /* QUEUE RCB TO RCB CHAIN        */
         LA    @09,SVIRCB                                          0328
         MVC   RCBNEXT(4,@09),VCTRCB(VCCTREG)                      0328
*   RCBBASE = BASEREG;              /* SET UP BASE REGISTER VALUE    */
         ST    BASEREG,RCBBASE(,@09)                               0329
*   VCTRCB = ADDR(SVIRCB);          /* MAKE RCB CURRENT              */
         ST    @09,VCTRCB(,VCCTREG)                                0330
*   VCTSADMP = ON;                  /* REQUEST DUMP                  */
*   VCTASMIC = OFF;                 /* RESET ASM IN CONTROL BIT      */
         OI    VCTSADMP(VCCTREG),B'10000000'                       0332
         NI    VCTASMIC(VCCTREG),B'11011111'                       0332
*   SVIREG2 = SVISAVE;              /* SAVE CALLER'S REGISTERS       */
         MVC   SVIREG2(64),SVISAVE                                 0333
*   SVIPSW2 = FLCSOPSW;             /* SAVE PSW                      */
         MVC   SVIPSW2(8),FLCSOPSW                                 0334
*   VCTAUDIT = SVCINVLD;            /* SET UP ERROR CODE             */
         MVC   VCTAUDIT(2,VCCTREG),@CH00949                        0335
*   FLCPOPSW = FLCSOPSW;            /* SAVE PSW FOR DUMP             */
         MVC   FLCPOPSW(8),FLCSOPSW                                0336
*   SVC (AUDSVC);                   /* HANDLE ERROR RECOVERY         */
*                                                                  0337
         SVC   13                                                  0337
*   /*****************************************************************/
*   /*                                                               */
*   /* EXIT RECEIVES CONTROL FROM AMDSAAUD                           */
*   /*                                                               */
*   /*****************************************************************/
*/*SVIERR2: P DEQUEUE RCB                                            */
*/* P MOVE SAVED PSW TO FLCSOPSW                                     */
*/* P MOVE REGISTERS BACK TO SVISAVE                                 */
*/* P SET RC = 4 IN SAVE AREA                                        */
*/* P RESTORE REGISTERS FROM SVISAVE                                 */
*/* R LPSW FLCSOPSW                                                  */
*                                                                  0338
*                                                                  0338
*SVIERR2:                                                          0338
*   VCTRCB = RCBNEXT;               /* DEQUEUE RCB FROM CHAIN        */
SVIERR2  LA    @09,SVIRCB                                          0338
         MVC   VCTRCB(4,VCCTREG),RCBNEXT(@09)                      0338
*   FLCSOPSW = SVIPSW2;             /* RESTORE PSW                   */
         MVC   FLCSOPSW(8),SVIPSW2                                 0339
*   SVISAVE(1:64) = SVIREG2;        /* RESTORE REGISTERS TO SAVE AREA*/
         MVC   SVISAVE(64),SVIREG2                                 0340
*   REGL15 = 4;                     /* SET FAILING RETURN CODE       */
         LA    @09,SVISAVE                                         0341
         MVC   REGL15(4,@09),@CF00039                              0341
*   GEN(LM    R0,R15,SVISAVE);      /* RESTORE REGISTERS             */
         LM    R0,R15,SVISAVE
*   LPSW (FLCSOPSW);                /* RETURN CONTROL TO CALLER      */
         LPSW  FLCSOPSW                                            0343
*                                                                  0344
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS ROUTINE RELOCATES SADMP TO THE SYSTEM LPA AND MODIFIES   */
*   /* THE NEW MEMORY TO INVALIDATE THE STORAGE OCCUPIED BY SADMP AND*/
*   /* SADMP BUFFERS.                                                */
*   /*                                                               */
*   /*****************************************************************/
*/*AMDSAREL: E AMDSAREL                                              */
*/* N THIS ROUTINE SETS UP THE SEG. AND PAGE TABLES                  */
*/* P GO TO PAGE TABLE FOR 1ST SEGMENT                               */
*/* P MARK LOC. X'1000' TO X'10000' INVALID                          */
*                                                                  0344
*                                                                  0344
*AMDSAREL:                                                         0344
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0344
         B     @PB00002                                            0344
AMDSAREL DS    0H                                                  0345
*   GENERATE                                                       0345
*     REFS(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,R12,R13,R14,R15); 0345
         STM   R14,R12,12(R13)         SAVE CALLERS REGISTERS
*   STEPTR = WORKSTOR;              /* GET FIRST SEG TBL ENTRY       */
         L     STEPTR,WORKSTOR                                     0346
*   PTEPTR = SGTSTE & PGEADMSK;     /* GET PAGE TABLE ADDRESS        */
         L     PTEPTR,SGTSTE(,STEPTR)                              0347
         N     PTEPTR,PGEADMSK                                     0347
*   PGTPTE = PGTELOC0;              /* SET UP VALID ENTRY FOR LOC 0  */
         MVC   PGTPTE(2,PTEPTR),@CB00939                           0348
*   RESPECIFY I RESTRICTED;                                        0349
*   DO I = 15 TO 1 BY -1;           /* UPDATE PAGE TABLES FOR FIRST
*                                      SEGMENT EXCEPT FOR LOCATION 0 */
         LA    I,15                                                0350
@DL00350 DS    0H                                                  0351
*     PTEPTR = PTEPTR + LENGTH(PGTPTE); /* GET NEXT PAGE TABLE ENTRY */
         AH    PTEPTR,@CH00044                                     0351
*     PGTPVM = ON;                  /* MARK PAGE INVALID             */
         OI    PGTPVM(PTEPTR),B'00001000'                          0352
*   END;                                                           0353
*                                                                  0353
         BCTR  I,0                                                 0353
         LTR   I,I                                                 0353
         BP    @DL00350                                            0353
*   /*****************************************************************/
*   /*                                                               */
*   /* IF MORE THAN ONE SEGMENT IS AVAILABLE, MARK THE EXTRA PAGES   */
*   /* INVALID SO THAT VIRTUAL DUMP CAN USE THEM FOR BUFFERS.        */
*   /*                                                               */
*   /*****************************************************************/
*/* D (YES,,NO,%LPAUPD) ANY PAGES IN 2ND SEGMENT                     */
*/* P OBTAIN NUMBER OF EXTRA PAGES FROM VCCT                         */
*/*%PGTEUPD: P MARK PGTE INVALID FOR ADDR                            */
*/* P DECREMENT NUMBER OF PAGES TO BE UPDATED                        */
*/* D (YES,%PGTEUPD,NO,) ANY MORE PAGES TO UPDATE                    */
*                                                                  0354
*   STEPTR = STEPTR + LENGTH(SGTSTE); /* GET 2ND SEG TBL ENTRY       */
         AH    STEPTR,@CH00039                                     0354
*   PTEPTR = SGTSTE & PGEADMSK;     /* GET PAGE TABLE ADDRESS        */
         L     PTEPTR,SGTSTE(,STEPTR)                              0355
         N     PTEPTR,PGEADMSK                                     0355
*   IF VCTEXTRA ^= 0 THEN           /* ANY EXTRA PAGES               */
         LH    @05,VCTEXTRA(,VCCTREG)                              0356
         LTR   @05,@05                                             0356
         BZ    @RF00356                                            0356
*     DO I = VCTEXTRA TO 1 BY -1;   /* UPDATE REMAINING PAGE TABLE 0357
*                                      ENTRIES                       */
         LR    I,@05                                               0357
         B     @DE00357                                            0357
@DL00357 DS    0H                                                  0358
*       PGTPVM = ON;                /* MARK PAGE INVALID             */
         OI    PGTPVM(PTEPTR),B'00001000'                          0358
*       PTEPTR = PTEPTR + LENGTH(PGTPTE); /* NEXT PAGE TABLE ENTRY   */
         AH    PTEPTR,@CH00044                                     0359
*     END;                                                         0360
         BCTR  I,0                                                 0360
@DE00357 LTR   I,I                                                 0360
         BP    @DL00357                                            0360
*   RESPECIFY I UNRESTRICTED;                                      0361
@RF00356 DS    0H                                                  0362
*                                                                  0362
*   /*****************************************************************/
*   /*                                                               */
*   /* POINT SEGMENT TABLE ENTRIES FOR LPA TO VIRTUAL DUMP PAGE      */
*   /* TABLES, PROVIDING THE RELOCATION REQUIRED.                    */
*   /*                                                               */
*   /*****************************************************************/
*/*%LPAUPD: P GET SEGMENT TABLE ENTRY FOR LPA USING VCTLPA           */
*/* P SET ADDR IN SEGMENT TABLE TO VCTPGT FOR 2 SEGMENTS             */
*/* R RETURN TO CALLER                                               */
*                                                                  0362
*   STEPTR = VCTLPA / SEGSIZE * LENGTH(SGTSTE) + WORKSTOR; /* ADDRESS
*                                      OF SEGMENT TABLE ENTRY FOR LPA*/
         L     STEPTR,VCTLPA(,VCCTREG)                             0362
         SRL   STEPTR,16                                           0362
         SLA   STEPTR,2                                            0362
         A     STEPTR,WORKSTOR                                     0362
*   SGTSTE = VCTPGT;                /* POINT TO VIRTUAL DUMP PAGE  0363
*                                      TABLES                        */
         L     @09,VCTPGT(,VCCTREG)                                0363
         ST    @09,SGTSTE(,STEPTR)                                 0363
*   STEPTR = STEPTR + LENGTH(SGTSTE); /* POINT TO NEXT SEG TBL ENTRY */
         AH    STEPTR,@CH00039                                     0364
*   SGTSTE = VCTPGT + LENGTH(PGTPTE) * PGEPRSEG; /* POINT TO NEXT  0365
*                                      VIRTUAL DUMP PAGE TABLE       */
         AH    @09,@CH00158                                        0365
         ST    @09,SGTSTE(,STEPTR)                                 0365
*   GENERATE                                                       0366
*     SETS(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,R12,R13,R14,R15); 0366
         LM    R14,R12,12(R13)         RESTORE CALLERS REGISTERS
*   END AMDSAREL;                                                  0367
@EL00002 DS    0H                                                  0367
@EF00002 DS    0H                                                  0367
@ER00002 BR    @14                                                 0367
@PB00002 DS    0H                                                  0367
*/*AMDSASVI: END                                                     */
*   END AMDSASVI                                                   0368
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.      *
*/*%INCLUDE SYSLIB  (IHASGTE )                                        *
*/*%INCLUDE SYSLIB  (IHAPGTE )                                        *
*/*%INCLUDE SYSLIB  (IHAPSA  )                                        *
*/*%INCLUDE SYSLIB  (AMDSARMK)                                        *
*;                                                                 0368
@DATA    DS    0H
@CH00037 DC    H'1'
@CH00044 DC    H'2'
@CH00780 DC    H'13'
@CH00158 DC    H'32'
@CH00889 DC    H'35'
@CH00754 DC    H'28672'
@CH00947 DC    XL2'F100'
@CH00949 DC    XL2'F200'
@DATD    DSECT
         DS    0F
@SA00001 DS    18F
AMDSASVI CSECT
         DS    0F
@CF00039 DC    F'4'
@CH00039 EQU   @CF00039+2
@DATD    DSECT
         DS    0D
DYNRCB   DS    CL20
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
AMDSASVI CSECT
         NOPR  ((@ENDDATD-@DATD)/257*16)
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
@CV00960 DC    V(AMDSASIO)
@CV00961 DC    V(AMDSAWAT)
@CV00962 DC    V(AMDSATAP)
@CV00963 DC    V(AMDSACON)
@CV00964 DC    V(AMDSAGTM)
@CV00965 DC    V(AMDSAFRM)
@CV00966 DC    V(AMDSAASM)
@CV00967 DC    V(AMDSAERM)
@CV00968 DC    V(AMDSASIN)
@CV00969 DC    V(AMDSAUPD)
@CV00970 DC    V(AMDSATER)
@CV00971 DC    V(AMDSACSA)
@CV00972 DC    V(AMDSAAID)
@CV00973 DC    V(AMDSAAUD)
@CV00974 DC    V(AMDSABUF)
@CV00975 DC    V(AMDSADER)
@CV00976 DC    V(AMDSAARD)
@CV00977 DC    V(AMDSAMDM)
@CV00978 DC    V(AMDSARSM)
@CV00979 DC    V(AMDSAAMR)
@CV00980 DC    V(AMDSAERB)
@CV00981 DC    V(AMDSAERP)
@CV00982 DC    V(AMDSAGTF)
@CV00983 DC    V(AMDSAERI)
@CV00984 DC    V(AMDSAUCB)
@CV00985 DC    V(AMDSAVCK)
@CV00986 DC    V(AMDSASPQ)
@CV00987 DC    V(AMDSAIOB)
@CV00988 DC    V(AMDSABIN)
@CV00989 DC    V(AMDSAINR)
@CV00990 DC    V(AMDSAVRT)
         DS    0D
WORKSTOR DC    F'0'
@CB00939 DC    X'0000'
         DS    CL2
SVIRCB   DS    CL20
         ORG   SVIRCB
SVIRNEXT DC    A(0)
SVIRSTOR DC    A(0)
SVIRSAVE DC    AL4(SVINAME)
SVIREXIT DC    AL4(SVIERR2)
SVIRBASE DC    A(0)
         ORG   SVIRCB+20
PGEADMSK DC    X'00FFFFF8'
SVIPSW2  DS    CL8
SVIREG2  DS    CL64
SVIRPSWI DS    CL8
         ORG   SVIRPSWI
@NM00067 DC    XL4'010C0000'
@NM00068 DC    AL4(MODRET1)
         ORG   SVIRPSWI+8
SADMPPGT DS    CL64
         ORG   SADMPPGT
PGTBL1   DC    X'000800100020003000400050006000700080009000A000B000C000C
               D000E000F0'
PGTBL2   DC    X'010801180128013801480158016801780188019801A801B801C801C
               D801E801F8'
         ORG   SADMPPGT+64
NODATAB  DC    H'0'
         DC    H'1'
         DC    H'2'
         DC    H'3'
         DC    H'9'
         DC    H'14'
SVCSADMP DC    VL4(AMDSASIO)
         DC    VL4(AMDSAWAT)
         DC    VL4(AMDSATAP)
         DC    VL4(AMDSACON)
         DC    VL4(AMDSAGTM)
         DC    VL4(AMDSAFRM)
         DC    VL4(AMDSAASM)
         DC    VL4(AMDSAERM)
         DC    VL4(AMDSASIN)
         DC    VL4(AMDSAUPD)
         DC    VL4(AMDSATER)
         DC    VL4(AMDSACSA)
         DC    VL4(AMDSAAID)
         DC    VL4(AMDSAAUD)
         DC    VL4(AMDSABUF)
         DC    VL4(AMDSADER)
         DC    VL4(AMDSAARD)
         DC    VL4(AMDSAMDM)
         DC    VL4(AMDSARSM)
         DC    VL4(AMDSAAMR)
         DC    VL4(AMDSAERB)
         DC    VL4(AMDSAERP)
         DC    VL4(AMDSAGTF)
         DC    VL4(AMDSAERI)
         DC    VL4(AMDSAUCB)
         DC    VL4(AMDSAVCK)
         DC    VL4(AMDSASPQ)
         DC    VL4(AMDSAIOB)
         DC    VL4(AMDSABIN)
         DC    VL4(AMDSAINR)
         DC    VL4(AMDSAVRT)
         DC    4A(0)
SVIPATCH DC    15F'0'
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
PTEPTR   EQU   @04
STEPTR   EQU   @03
VCCTREG  EQU   @12
RETREG   EQU   @14
RETCODE  EQU   @15
BASEREG  EQU   @11
R0       EQU   @00
R1       EQU   @01
R2       EQU   @02
R3       EQU   @03
R4       EQU   @04
R5       EQU   @05
R6       EQU   @06
R7       EQU   @07
R8       EQU   @08
R9       EQU   @09
R10      EQU   @10
R11      EQU   @11
R12      EQU   @12
R13      EQU   @13
R14      EQU   @14
R15      EQU   @15
MDCBADDR EQU   @02
SVCEPADD EQU   @10
I        EQU   @09
         ENTRY SVCSADMP
         ENTRY SADMPPGT
PSA      EQU   0
FLCRNPSW EQU   PSA
FLCROPSW EQU   PSA+8
FLCICCW2 EQU   PSA+16
FLCSOPSW EQU   PSA+32
FLCPOPSW EQU   PSA+40
PSAEEPSW EQU   PSA+132
PSAESPSW EQU   PSA+136
FLCSVILC EQU   PSAESPSW+1
FLCSVCN  EQU   PSAESPSW+2
PSAEPPSW EQU   PSA+140
FLCPIILC EQU   PSAEPPSW+1
FLCPICOD EQU   PSAEPPSW+2
PSAPICOD EQU   FLCPICOD+1
FLCTEA   EQU   PSAEPPSW+4
FLCPER   EQU   PSA+152
FLCMCLA  EQU   PSA+168
FLCIOEL  EQU   FLCMCLA+4
FLCIOA   EQU   FLCMCLA+16
FLCFSA   EQU   FLCMCLA+80
PSASUPER EQU   PSA+552
PSASUP1  EQU   PSASUPER
PSASUP2  EQU   PSASUPER+1
PSASUP3  EQU   PSASUPER+2
PSASUP4  EQU   PSASUPER+3
PSACLHT  EQU   PSA+640
PSALKSA  EQU   PSA+696
PSAHLHI  EQU   PSA+760
PSADSSFL EQU   PSA+836
PSADSSF1 EQU   PSADSSFL
PSADSSF3 EQU   PSADSSFL+2
PSADSSF4 EQU   PSADSSFL+3
PSARSVT  EQU   PSA+896
SADMPLSD EQU   3312
SVIRPSW  EQU   SADMPLSD+8
SVINAME  EQU   SADMPLSD+160
SVISAVE  EQU   SADMPLSD+164
SGTSTE   EQU   0
SGTLK    EQU   SGTSTE
SGTPTO   EQU   SGTSTE+1
SGTBYTE  EQU   SGTPTO+2
PGTPTE   EQU   0
PGTRSA   EQU   PGTPTE
PGTBITS  EQU   PGTRSA+1
PGTPVM   EQU   PGTBITS
ARB      EQU   0
BCTH     EQU   0
BCT      EQU   0
BCTLPID  EQU   BCT+28
BCTFLGT  EQU   BCT+44
BCTFLGI  EQU   BCT+45
CCT      EQU   0
CTFLG1   EQU   CCT+1
CTFLG2   EQU   CCT+2
CTLOWFLG EQU   CCT+48
CTDMPTYP EQU   CCT+52
CTIOTYPE EQU   CTDMPTYP
CTCONFLG EQU   CTDMPTYP+2
CTBUFTYP EQU   CTDMPTYP+3
CTVCCT   EQU   CTDMPTYP+20
CTPRMT1  EQU   CTDMPTYP+24
CTPRMT2  EQU   CTDMPTYP+26
CCW      EQU   0
CCWFLAGS EQU   CCW+4
CSW      EQU   0
CSWKEY00 EQU   CSW
CSWUSTAT EQU   CSW+4
CSWCSTAT EQU   CSW+5
DSCE     EQU   0
DSCETBEG EQU   DSCE+12
DSCETCUR EQU   DSCE+16
DSCETEND EQU   DSCE+20
IODB     EQU   0
IODBFLAG EQU   IODB+8
IODBCCHH EQU   IODB+32
IODBSRCH EQU   IODBCCHH+3
MDCE     EQU   0
MDCEACTV EQU   MDCE+4
MDCEAVIL EQU   MDCE+8
MDCB     EQU   0
MDCBNEXT EQU   MDCB+4
MDCBPSW  EQU   MDCB+8
MDCBGRS  EQU   MDCB+16
MDCBGR0  EQU   MDCBGRS
MDCBGR1  EQU   MDCBGRS+4
MDCBGR15 EQU   MDCBGRS+60
MDCBSTOR EQU   MDCB+80
MDCBPI   EQU   MDCB+84
MDCBFLGS EQU   MDCB+86
PSW      EQU   0
PSWSM    EQU   PSW
PSWDAT   EQU   PSWSM
@NM00058 EQU   PSW+1
PSWCCPM  EQU   PSW+2
@NM00061 EQU   PSW+3
PSWIA    EQU   PSW+4
PTRT     EQU   0
PTRTRSA  EQU   0
RCB      EQU   0
RCBNEXT  EQU   RCB
RCBSAVE  EQU   RCB+8
RCBEXIT  EQU   RCB+12
RCBBASE  EQU   RCB+16
VCCT     EQU   0
VCTRCB   EQU   VCCT+4
VCTRECSN EQU   VCCT+8
VCTFLGS  EQU   VCCT+9
VCTSADMP EQU   VCTFLGS
VCTASMIC EQU   VCTFLGS
VCTMDCE  EQU   VCCT+12
VCTSTOR  EQU   VCCT+16
VCTDSCE  EQU   VCCT+20
VCTBCTH  EQU   VCCT+24
VCTAUDIT EQU   VCCT+62
VCTCBID  EQU   VCCT+64
VCTLPA   EQU   VCCT+84
VCTPGT   EQU   VCCT+88
VCTEXTRA EQU   VCCT+100
VCTVCCTV EQU   VCCT+108
SDL      EQU   0
REGLOCAL EQU   0
REGL14   EQU   REGLOCAL+56
REGL15   EQU   REGLOCAL+60
SAVEFORM EQU   0
SAVENAME EQU   SAVEFORM+1
TRCENTRY EQU   0
PGTEND   EQU   0
PTRTVSA  EQU   0
SGTEND   EQU   0
PSARSVTE EQU   PSARSVT
CTLOWDMP EQU   CTDMPTYP
SVILOWCR EQU   SVISAVE
SVISWTCH EQU   SVILOWCR+72
NODATSVC EQU   SVISWTCH
FLC      EQU   PSA
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
@NM00066 EQU   SVILOWCR
CTADDRE  EQU   CTLOWDMP+4
CTADDRS  EQU   CTLOWDMP
PSARSAV  EQU   PSARSVTE+60
PSARSTK  EQU   PSARSVTE+56
PSAESAV3 EQU   PSARSVTE+52
PSAESTK3 EQU   PSARSVTE+48
PSAESAV2 EQU   PSARSVTE+44
PSAESTK2 EQU   PSARSVTE+40
PSAESAV1 EQU   PSARSVTE+36
PSAESTK1 EQU   PSARSVTE+32
PSAPSAV  EQU   PSARSVTE+28
PSAPSTK  EQU   PSARSVTE+24
PSAMSAV  EQU   PSARSVTE+20
PSAMSTK  EQU   PSARSVTE+16
PSASSAV  EQU   PSARSVTE+12
PSASSTK  EQU   PSARSVTE+8
PSANSTK  EQU   PSARSVTE+4
PSACSTK  EQU   PSARSVTE
SAVER12  EQU   SAVEFORM+68
SAVER11  EQU   SAVEFORM+64
SAVER10  EQU   SAVEFORM+60
SAVER9   EQU   SAVEFORM+56
SAVER8   EQU   SAVEFORM+52
SAVER7   EQU   SAVEFORM+48
SAVER6   EQU   SAVEFORM+44
SAVER5   EQU   SAVEFORM+40
SAVER4   EQU   SAVEFORM+36
SAVER3   EQU   SAVEFORM+32
SAVER2   EQU   SAVEFORM+28
SAVER1   EQU   SAVEFORM+24
SAVER0   EQU   SAVEFORM+20
SAVER15  EQU   SAVEFORM+16
SAVER14  EQU   SAVEFORM+12
SAVENEXT EQU   SAVEFORM+8
SAVEBACK EQU   SAVEFORM+4
SAVEID   EQU   SAVEFORM
REGL13   EQU   REGLOCAL+52
REGL12   EQU   REGLOCAL+48
REGL11   EQU   REGLOCAL+44
REGL10   EQU   REGLOCAL+40
REGL9    EQU   REGLOCAL+36
REGL8    EQU   REGLOCAL+32
REGL7    EQU   REGLOCAL+28
REGL6    EQU   REGLOCAL+24
REGL5    EQU   REGLOCAL+20
REGL4    EQU   REGLOCAL+16
REGL3    EQU   REGLOCAL+12
REGL2    EQU   REGLOCAL+8
REGL1    EQU   REGLOCAL+4
REGL0    EQU   REGLOCAL
SDLSPN   EQU   SDL+1
SDLNUM   EQU   SDL
VCTCCTV  EQU   VCCT+104
@NM00065 EQU   VCCT+102
VCTCPOUT EQU   VCCT+96
VCTSVCTB EQU   VCCT+92
VCTCBADR EQU   VCCT+80
VCTJBNME EQU   VCCT+72
VCTCBIDN EQU   VCTCBID+7
@NM00064 EQU   VCTCBID
VCTASID  EQU   VCCT+60
VCTPTRT  EQU   VCCT+56
VCTMASCB EQU   VCCT+52
VCTASCB  EQU   VCCT+48
VCTCPUC  EQU   VCCT+46
VCTWKC   EQU   VCCT+45
VCTWKHI  EQU   VCCT+44
VCTSUBPL EQU   VCCT+40
VCTARB   EQU   VCCT+36
VCTIODB  EQU   VCCT+32
VCTBCTC  EQU   VCCT+28
VCTRECVA EQU   VCCT+10
@NM00063 EQU   VCTFLGS
VCTLRCLM EQU   VCTFLGS
VCTARCLM EQU   VCTFLGS
VCTMEMIN EQU   VCTFLGS
@NM00062 EQU   VCTRECSN
VCTRSMR  EQU   VCTRECSN
VCTEXIR  EQU   VCTRECSN
VCTUPDR  EQU   VCTRECSN
VCTPGIR  EQU   VCTRECSN
VCTVCT   EQU   VCCT
RCBSTOR  EQU   RCB+4
PTRTVS   EQU   PTRT+1032
PTRTRS   EQU   PTRT+8
PTRTLGID EQU   PTRT+4
PTRTPTRT EQU   PTRT
PSWEND   EQU   PSW+8
PSWSP    EQU   @NM00061
PSWSIG   EQU   PSWCCPM
PSWEU    EQU   PSWCCPM
PSWDO    EQU   PSWCCPM
PSWFPO   EQU   PSWCCPM
@NM00060 EQU   PSWCCPM
@NM00059 EQU   PSWCCPM
PSWPRBLM EQU   @NM00058
PSWAIT   EQU   @NM00058
PSWMCH   EQU   @NM00058
PSWMODE  EQU   @NM00058
PSWKEY   EQU   @NM00058
PSWXTRNL EQU   PSWSM
PSWIO    EQU   PSWSM
@NM00057 EQU   PSWSM
@NM00056 EQU   PSWSM
@NM00055 EQU   PSWSM
PSWPER   EQU   PSWSM
@NM00054 EQU   PSWSM
@NM00053 EQU   MDCB+87
@NM00052 EQU   MDCBFLGS
MDCBDUMP EQU   MDCBFLGS
MDCBASMI EQU   MDCBFLGS
MDCBGR14 EQU   MDCBGRS+56
MDCBGR13 EQU   MDCBGRS+52
MDCBGR12 EQU   MDCBGRS+48
MDCBGR11 EQU   MDCBGRS+44
MDCBGR10 EQU   MDCBGRS+40
MDCBGR9  EQU   MDCBGRS+36
MDCBGR8  EQU   MDCBGRS+32
MDCBGR7  EQU   MDCBGRS+28
MDCBGR6  EQU   MDCBGRS+24
MDCBGR5  EQU   MDCBGRS+20
MDCBGR4  EQU   MDCBGRS+16
MDCBGR3  EQU   MDCBGRS+12
MDCBGR2  EQU   MDCBGRS+8
MDCBMDCB EQU   MDCB
MDCEMDCE EQU   MDCE
IODBSENS EQU   IODB+40
IODBR    EQU   IODBCCHH+7
IODBHH   EQU   IODBSRCH+2
IODBCC   EQU   IODBSRCH
IODBSEEK EQU   IODBCCHH+1
IODBM    EQU   IODBCCHH
IODBCSW  EQU   IODB+24
IODBCAW  EQU   IODB+20
IODBBCT  EQU   IODB+16
IODBCPU  EQU   IODB+14
IODBTYPE EQU   IODB+13
IODBCLAS EQU   IODB+12
IODBDEV  EQU   IODB+10
@NM00051 EQU   IODBFLAG+1
IODBSTRT EQU   IODBFLAG
IODBCONW EQU   IODBFLAG
IODBACTV EQU   IODBFLAG
IODBHALT EQU   IODBFLAG
IODBIOC  EQU   IODBFLAG
IODBINT  EQU   IODBFLAG
IODBPTRM EQU   IODBFLAG
IODBTERM EQU   IODBFLAG
IODBIDEN EQU   IODB+4
IODBIODB EQU   IODB
DSCENEXT EQU   DSCE+8
DSCEBEGN EQU   DSCE+4
DSCEDSCE EQU   DSCE
CSWCNT   EQU   CSW+6
CSWCHC   EQU   CSWCSTAT
CSWICC   EQU   CSWCSTAT
CSWCCC   EQU   CSWCSTAT
CSWCDC   EQU   CSWCSTAT
CSWPTC   EQU   CSWCSTAT
CSWPGC   EQU   CSWCSTAT
CSWIL    EQU   CSWCSTAT
CSWPCI   EQU   CSWCSTAT
CSWUE    EQU   CSWUSTAT
CSWUC    EQU   CSWUSTAT
CSWDE    EQU   CSWUSTAT
CSWCE    EQU   CSWUSTAT
CSWBUSY  EQU   CSWUSTAT
CSWCUE   EQU   CSWUSTAT
CSWSTMOD EQU   CSWUSTAT
CSWATTN  EQU   CSWUSTAT
CSWCADDR EQU   CSW+1
@NM00050 EQU   CSWKEY00
CSWKEY   EQU   CSWKEY00
CCWCNT   EQU   CCW+6
@NM00049 EQU   CCW+5
@NM00048 EQU   CCWFLAGS
CCWIDA   EQU   CCWFLAGS
CCWPCI   EQU   CCWFLAGS
CCWSKIP  EQU   CCWFLAGS
CCWSLI   EQU   CCWFLAGS
CCWCC    EQU   CCWFLAGS
CCWDC    EQU   CCWFLAGS
CCWDADDR EQU   CCW+1
CCWCMD   EQU   CCW
CTHWMAX  EQU   CTDMPTYP+29
CTHWM    EQU   CTDMPTYP+28
CTPRMT2X EQU   CTPRMT2+1
CTPRMT2Y EQU   CTPRMT2
CTPRMT1X EQU   CTPRMT1+1
CTPRMT1Y EQU   CTPRMT1
CTEOR    EQU   CTDMPTYP+16
CTCOMMIO EQU   CTDMPTYP+12
CTLWKAD  EQU   CTDMPTYP+8
CTCONSOL EQU   CTDMPTYP+4
@NM00047 EQU   CTBUFTYP
CTDUMP   EQU   CTBUFTYP
CTLSQA   EQU   CTBUFTYP
CTASM    EQU   CTBUFTYP
CTPGT    EQU   CTBUFTYP
CTWKFLE  EQU   CTBUFTYP
@NM00046 EQU   CTBUFTYP
@NM00045 EQU   CTCONFLG
CTREAD   EQU   CTCONFLG
CTMSGOUT EQU   CTCONFLG
@NM00044 EQU   CTDMPTYP+1
@NM00043 EQU   CTIOTYPE
CTIORSET EQU   CTIOTYPE
CTIOINT  EQU   CTIOTYPE
CTIOCON  EQU   CTIOTYPE
CTIOWK   EQU   CTIOTYPE
CTIODA   EQU   CTIOTYPE
CTIOOUT  EQU   CTIOTYPE
CTIOTERM EQU   CTIOTYPE
CTEBCOPR EQU   CCT+49
@NM00042 EQU   CTLOWFLG
CTWKSTUS EQU   CTLOWFLG
CTINIT   EQU   CTLOWFLG
CTFP     EQU   CTLOWFLG
CTVIRTD  EQU   CTLOWFLG
CTEBCOPD EQU   CCT+45
CTCONTYP EQU   CCT+44
CTOUTAD  EQU   CCT+42
CTCPUI   EQU   CCT+40
CTERBCON EQU   CCT+36
CTERBTPE EQU   CCT+32
CTERBDA  EQU   CCT+28
CTCCHHW  EQU   CCT+24
CTCCHHE  EQU   CCT+20
CTCCHHS  EQU   CCT+16
CTPGECNT EQU   CCT+15
CTCCHHR  EQU   CCT+8
CTINADDR EQU   CCT+6
CTSENSE  EQU   CCT+4
CTDEVTYP EQU   CCT+3
@NM00041 EQU   CTFLG2
CTALTCON EQU   CTFLG2
CTWKDONE EQU   CTFLG2
CTVIRTR  EQU   CTFLG2
CTNOSTAT EQU   CTFLG2
CTPGEFLT EQU   CTFLG2
CTSTOR   EQU   CTFLG2
CTDUPSW  EQU   CTFLG2
CTERREC  EQU   CTFLG1
CTMP     EQU   CTFLG1
@NM00040 EQU   CTFLG1
CTDEFO   EQU   CTFLG1
CTWORK   EQU   CTFLG1
CTMORTPE EQU   CTFLG1
CTDEVICE EQU   CTFLG1
CTERROR  EQU   CTFLG1
CTWAIT   EQU   CCT
@NM00039 EQU   BCT+46
BCTRECLM EQU   BCTFLGI
BCTIOERR EQU   BCTFLGI
BCTALLOC EQU   BCTFLGI
BCTCOMP  EQU   BCTFLGI
@NM00038 EQU   BCTFLGT
BCTPGTF  EQU   BCTFLGT
BCTDUMP  EQU   BCTFLGT
BCTLSQA  EQU   BCTFLGT
BCTASM   EQU   BCTFLGT
BCTPGT   EQU   BCTFLGT
BCTWKFLE EQU   BCTFLGT
@NM00037 EQU   BCTFLGT
BCTRBA   EQU   BCT+40
BCTAMB   EQU   BCT+36
@NM00036 EQU   BCTLPID+4
BCTLGN   EQU   BCTLPID
BCTMDCB  EQU   BCT+24
BCTPGTE  EQU   BCT+20
BCTRADDR EQU   BCT+16
BCTVADDR EQU   BCT+12
BCTASID  EQU   BCT+10
BCTKEY2  EQU   BCT+9
BCTKEY1  EQU   BCT+8
BCTNEXT  EQU   BCT+4
BCTBCT   EQU   BCT
BCTHLAST EQU   BCTH+8
BCTHFRST EQU   BCTH+4
BCTHBCTH EQU   BCTH
ARBADDRE EQU   ARB+4
ARBADDRB EQU   ARB
PGTPAM   EQU   PGTBITS
@NM00011 EQU   PGTBITS
@NM00010 EQU   PGTBITS
@NM00009 EQU   PGTBITS
@NM00008 EQU   PGTBITS
@NM00007 EQU   PGTBITS
@NM00006 EQU   PGTBITS
PGTREAL  EQU   PGTRSA
SGTPAM   EQU   SGTBYTE
SGTEAC   EQU   SGTBYTE
@NM00005 EQU   SGTBYTE
@NM00004 EQU   SGTBYTE
@NM00003 EQU   SGTBYTE
@NM00002 EQU   SGTBYTE
@NM00001 EQU   SGTBYTE
SGTORG   EQU   SGTPTO
SGTKEY   EQU   SGTLK
SGTPTL   EQU   SGTLK
GTMSAVE  EQU   SADMPLSD+684
GTMNAME  EQU   SADMPLSD+680
FRMSAVE  EQU   SADMPLSD+580
FRMNAME  EQU   SADMPLSD+576
AUDSAVE  EQU   SADMPLSD+476
AUDNAME  EQU   SADMPLSD+472
IOISAVE  EQU   SADMPLSD+372
IOINAME  EQU   SADMPLSD+368
PGISAVE  EQU   SADMPLSD+268
PGINAME  EQU   SADMPLSD+264
LOWCRS   EQU   SADMPLSD+96
LOWGRS   EQU   SADMPLSD+32
SAVEDUMP EQU   SADMPLSD+24
AUDPSW   EQU   SADMPLSD+16
PSWSADMP EQU   SADMPLSD
@NM00035 EQU   PSA+3412
PSASTAK  EQU   PSA+3072
@NM00034 EQU   PSA+1024
PSAUSEND EQU   PSA+1024
PSARV060 EQU   PSA+1020
PSARV059 EQU   PSA+1018
PSASVC13 EQU   PSA+1016
PSALSFCC EQU   PSA+1012
PSASFACC EQU   PSA+1008
PSASTOP  EQU   PSA+992
PSASTART EQU   PSA+976
PSARSPSW EQU   PSA+968
PSASRPSW EQU   PSA+960
PSARV045 EQU   PSA+892
PSARV044 EQU   PSA+888
PSARV043 EQU   PSA+884
PSARV042 EQU   PSA+880
PSARV041 EQU   PSA+876
PSARV040 EQU   PSA+872
PSARV025 EQU   PSA+868
PSADSSED EQU   PSA+868
PSADSSPR EQU   PSA+864
PSADSSFW EQU   PSA+860
PSADSS14 EQU   PSA+856
PSADSSPP EQU   PSA+848
PSADSSRP EQU   PSA+840
PSADSS05 EQU   PSADSSF4
PSADSS10 EQU   PSADSSF4
PSADSSVE EQU   PSADSSF4
PSADSSDE EQU   PSADSSF4
PSADSSC0 EQU   PSADSSF4
PSADSSIE EQU   PSADSSF4
PSADSS12 EQU   PSADSSF4
PSADSSRC EQU   PSADSSF4
PSARV057 EQU   PSADSSF3
PSARV056 EQU   PSADSSF3
PSARV055 EQU   PSADSSF3
PSARV054 EQU   PSADSSF3
PSADSSRW EQU   PSADSSF3
PSADSSNM EQU   PSADSSF3
PSADSSES EQU   PSADSSF3
PSADSSGP EQU   PSADSSF3
PSADSSF2 EQU   PSADSSFL+1
PSADSSPI EQU   PSADSSF1
PSADSSOI EQU   PSADSSF1
PSADSSSP EQU   PSADSSF1
PSADSSTP EQU   PSADSSF1
PSADSSDW EQU   PSADSSF1
PSADSSDD EQU   PSADSSF1
PSADSSDM EQU   PSADSSF1
PSADSSMV EQU   PSADSSF1
PSADSSTS EQU   PSA+816
PSADSSWK EQU   PSA+812
PSADSSR3 EQU   PSA+808
PSADSSR2 EQU   PSA+804
PSADSSRS EQU   PSA+800
PSASTOR  EQU   PSA+796
PSARV058 EQU   PSA+794
PSAVSTAP EQU   PSA+792
PSAWKVAP EQU   PSA+788
PSAWKRAP EQU   PSA+784
PSAMCHIC EQU   PSA+783
PSAMODE  EQU   PSA+782
PSASYMSK EQU   PSA+781
PSAMCHFL EQU   PSA+780
PSACR0   EQU   PSA+776
PSAPSWSV EQU   PSA+768
PSALITA  EQU   PSA+764
PSACLHS  EQU   PSAHLHI
PSALKR15 EQU   PSALKSA+60
PSALKR14 EQU   PSALKSA+56
PSALKR13 EQU   PSALKSA+52
PSALKR12 EQU   PSALKSA+48
PSALKR11 EQU   PSALKSA+44
PSALKR10 EQU   PSALKSA+40
PSALKR9  EQU   PSALKSA+36
PSALKR8  EQU   PSALKSA+32
PSALKR7  EQU   PSALKSA+28
PSALKR6  EQU   PSALKSA+24
PSALKR5  EQU   PSALKSA+20
PSALKR4  EQU   PSALKSA+16
PSALKR3  EQU   PSALKSA+12
PSALKR2  EQU   PSALKSA+8
PSALKR1  EQU   PSALKSA+4
PSALKR0  EQU   PSALKSA
PSARV023 EQU   PSACLHT+52
PSALOCAL EQU   PSACLHT+48
PSACMSL  EQU   PSACLHT+44
PSAOPTL  EQU   PSACLHT+40
PSATPACL EQU   PSACLHT+36
PSATPDNL EQU   PSACLHT+32
PSATPNCL EQU   PSACLHT+28
PSAIOSLL EQU   PSACLHT+24
PSAIOSUL EQU   PSACLHT+20
PSAIOSCL EQU   PSACLHT+16
PSAIOSSL EQU   PSACLHT+12
PSASALCL EQU   PSACLHT+8
PSAASML  EQU   PSACLHT+4
PSADISPL EQU   PSACLHT
PSASRSA  EQU   PSA+636
PSARV050 EQU   PSA+634
PSADSSGO EQU   PSA+633
PSARECUR EQU   PSA+632
PSAHLHIS EQU   PSA+628
PSAIPCSA EQU   PSA+624
@NM00033 EQU   PSA+621
PSAIPCDM EQU   PSA+620
PSAIPCD  EQU   PSA+616
@NM00032 EQU   PSA+613
PSAIPCRM EQU   PSA+612
PSAIPCR  EQU   PSA+608
PSAMCHEX EQU   PSA+600
PSAMPSW  EQU   PSA+592
PSAEXPS2 EQU   PSA+584
PSAEXPS1 EQU   PSA+576
PSAPIREG EQU   PSA+572
PSARSREG EQU   PSA+568
PSAGPREG EQU   PSA+556
PSARV022 EQU   PSASUP4
PSARV021 EQU   PSASUP4
PSARV020 EQU   PSASUP4
PSARV019 EQU   PSASUP4
PSARV018 EQU   PSASUP4
PSARV017 EQU   PSASUP4
PSARV016 EQU   PSASUP4
PSARV015 EQU   PSASUP4
PSARV014 EQU   PSASUP3
PSARV013 EQU   PSASUP3
PSARV012 EQU   PSASUP3
PSARV011 EQU   PSASUP3
PSARV010 EQU   PSASUP3
PSARV009 EQU   PSASUP3
PSARV008 EQU   PSASUP3
PSAIOSUP EQU   PSASUP3
PSALCR   EQU   PSASUP2
PSARTM   EQU   PSASUP2
PSAACR   EQU   PSASUP2
PSAIPCE2 EQU   PSASUP2
PSAIPCES EQU   PSASUP2
PSAIPCEC EQU   PSASUP2
PSAGTF   EQU   PSASUP2
PSAIPCRI EQU   PSASUP2
PSAIPCRP EQU   PSASUP1
PSAIPCDR EQU   PSASUP1
PSADISP  EQU   PSASUP1
PSALOCK  EQU   PSASUP1
PSAPI    EQU   PSASUP1
PSAEXT   EQU   PSASUP1
PSASVC   EQU   PSASUP1
PSAIO    EQU   PSASUP1
PSAAOLD  EQU   PSA+548
PSAANEW  EQU   PSA+544
PSATOLD  EQU   PSA+540
PSATNEW  EQU   PSA+536
PSALCCAR EQU   PSA+532
PSALCCAV EQU   PSA+528
PSAPCCAR EQU   PSA+524
PSAPCCAV EQU   PSA+520
PSACPULA EQU   PSA+518
PSACPUPA EQU   PSA+516
PSAPSA   EQU   PSA+512
FLCHDEND EQU   PSA+512
FLCCRSAV EQU   FLCMCLA+280
FLCGRSAV EQU   FLCMCLA+216
FLCFPSAV EQU   FLCMCLA+184
FLCFLA   EQU   FLCMCLA+88
FLCRGNCD EQU   FLCMCLA+84
FLCFSAA  EQU   FLCFSA+1
@NM00031 EQU   FLCFSA
@NM00030 EQU   FLCMCLA+72
FLCMCIC  EQU   FLCMCLA+64
@NM00029 EQU   FLCMCLA+20
FLCIOAA  EQU   FLCIOA+1
@NM00028 EQU   FLCIOA
@NM00027 EQU   FLCMCLA+15
@NM00026 EQU   FLCMCLA+14
@NM00025 EQU   FLCMCLA+12
FLCLCL   EQU   FLCMCLA+8
FLCIOELA EQU   FLCIOEL+1
@NM00024 EQU   FLCIOEL
FLCCHNID EQU   FLCMCLA
@NM00023 EQU   PSA+160
FLCMTRCD EQU   PSA+157
@NM00022 EQU   PSA+156
FLCPERA  EQU   FLCPER+1
@NM00021 EQU   FLCPER
@NM00020 EQU   PSA+151
FLCPERCD EQU   PSA+150
FLCMCNUM EQU   PSA+149
@NM00019 EQU   PSA+148
FLCTEAA  EQU   FLCTEA+1
@NM00018 EQU   FLCTEA
PSAPIPC  EQU   PSAPICOD
PSAPIMC  EQU   PSAPICOD
PSAPIPER EQU   PSAPICOD
PSARV049 EQU   FLCPICOD
FLCPILCB EQU   FLCPIILC
@NM00017 EQU   FLCPIILC
@NM00016 EQU   PSAEPPSW
FLCSILCB EQU   FLCSVILC
@NM00015 EQU   FLCSVILC
@NM00014 EQU   PSAESPSW
FLCEICOD EQU   PSAEEPSW+2
PSASPAD  EQU   PSAEEPSW
@NM00013 EQU   PSA+128
FLCINPSW EQU   PSA+120
FLCMNPSW EQU   PSA+112
FLCPNPSW EQU   PSA+104
FLCSNPSW EQU   PSA+96
FLCENPSW EQU   PSA+88
FLCTRACE EQU   PSA+84
FLCTIMER EQU   PSA+80
FLCCVT2  EQU   PSA+76
FLCCAW   EQU   PSA+72
FLCCSW   EQU   PSA+64
FLCIOPSW EQU   PSA+56
FLCMOPSW EQU   PSA+48
FLCEOPSW EQU   PSA+24
@NM00012 EQU   FLCICCW2+4
FLCCVT   EQU   FLCICCW2
FLCICCW1 EQU   FLCROPSW
FLCIPPSW EQU   FLCRNPSW
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RT00212 EQU   SVIERROR
@RT00215 EQU   SVIERROR
@RT00246 EQU   SVIERROR
@ENDDATA EQU   *
         END   AMDSASVI,(C'PL/S-II',0502,73230)
