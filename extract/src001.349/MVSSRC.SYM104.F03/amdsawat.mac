         TITLE 'AMDSAWAT VIRTUAL DUMP WAIT ROUTINE                     *
                       '
AMDSAWAT CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'AMDSAWAT  73.234'                                 0001
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                     0001
         BALR  @11,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,@11                                         0001
         ST    @13,@SA00001+4                                      0001
         LA    @14,@SA00001                                        0001
         ST    @14,8(,@13)                                         0001
         LR    @13,@14                                             0001
*   SAVEFORM(1:4) = 'LWAT';         /* MODULE ID TO SAVE AREA        */
         MVC   SAVEFORM(4,R13),@CC00968                            0195
*   WRCBNEXT = VCTRCB;              /* CHAIN WAIT'S RCB'S TO NEXT ON
*                                      QUEUE                         */
         MVC   WRCBNEXT(4),VCTRCB(VCCTREG)                         0196
*   WRCBSAVE = R13;                 /* SAVE AREA ADDRESS TO RCB      */
         ST    R13,WRCBSAVE                                        0197
*   WRCBASE = BASEREG;              /* SAVE BASE REGISTER FOR THE  0198
*                                      RCBEXIT TO HAVE ADDRESSABILITY
*                                      WHEN IT GAINS CONTROL         */
         ST    BASEREG,WRCBASE                                     0198
*   VCTRCB = ADDR(WATRCB);          /* PLACE WAIT'S RCB ON THE VCTRCB
*                                      QUEUE                         */
         LA    @10,WATRCB                                          0199
         ST    @10,VCTRCB(,VCCTREG)                                0199
*   CCTREG = CCTADDR;               /* SET CCT BASE                  */
         LH    CCTREG,@CH00738                                     0200
*                                                                  0201
*   /*****************************************************************/
*   /*                                                               */
*   /* NOW WAIT MUST PERFORM TWO TYPES OF INITIALIZATION TO PROCESS  */
*   /* THE INPUT REQUEST. THE FIRST MODIFIES THE WAIT BIT IN THE WAIT*/
*   /* ENABLED PSW. THIS IS DONE TO ALLOW WAIT TO PROCESS AS MANY    */
*   /* PENDING INTERRUPTS AS POSSIBLE BEFORE ENTERING A WAIT STATE TO*/
*   /* WAIT UPON THE COMPLETION OF THE REQUESTED I/O EVENT. THE      */
*   /* SECOND STAGE IN PROCESSING THE INPUT REQUEST ANALYZES AND SETS*/
*   /* WAIT UP TO ADDRESS THE TARGET IODB                            */
*   /*                                                               */
*   /*****************************************************************/
*/* P TURN OFF WAIT BIT IN ENABLED PSW                               */
*/* D (YES,WATDA,NO,) CTIOTYPE = DA ?                                */
*/* D (YES,WATWK,NO,) CTIOTYPE = WORKFILE ?                          */
*/* D (YES,WATOUT,NO,AUDEXIT) CTIOTYPE = OUTPUT ?                    */
*/*WATDA: P (,WATBCTCK) IODBREG = ADDRESS OF DA IODB                 */
*/*WATWK: P (,WATBCTCK) IODBREG = ADDRESS OF WORKFILE IODB           */
*/*WATOUT: P (,WATBCTCK) IODBREG = ADDRESS OF OUTPUT IODB            */
*/*AUDEXIT: L (,EREXIT) AMDSAAUD: SVC 13 DUMP ON ERROR CONDITION     */
*                                                                  0201
*   PSWAIT = OFF;                   /* INSURE WAIT BIT OF PSW IS OFF */
         LA    @10,EWAITPSW                                        0201
         NI    PSWAIT(@10),B'11111101'                             0201
*   IF CTIODA = ON THEN                                            0202
         TM    CTIODA(CCTREG),B'00100000'                          0202
         BNO   @RF00202                                            0202
*     IODBREG = ADDR(IODBDA);       /* DA REQUESTS USE THE DA IODB   */
         L     IODBREG,@CA00957                                    0203
*   ELSE                                                           0204
*     IF CTIOWK = ON THEN                                          0204
         B     @RC00202                                            0204
@RF00202 TM    CTIOWK(CCTREG),B'00010000'                          0204
         BNO   @RF00204                                            0204
*       IODBREG = ADDR(IODBWORK);   /* WORKFILE REQUESTS USE THE   0205
*                                      WORKFILE IODB                 */
         L     IODBREG,@CA00959                                    0205
*     ELSE                                                         0206
*       IF CTIOOUT = ON THEN                                       0206
         B     @RC00204                                            0206
@RF00204 TM    CTIOOUT(CCTREG),B'01000000'                         0206
         BNO   @RF00206                                            0206
*         IODBREG = ADDR(IODBOUT);  /* OUTPUT REQUESTS USE THE OUTPUT
*                                      IODB                          */
         L     IODBREG,@CA00958                                    0207
*       ELSE                                                       0208
*         DO;                                                      0208
         B     @RC00206                                            0208
@RF00206 DS    0H                                                  0209
*           VCTAUDIT = WATAUD1;     /* SET UP UNIQUE AUDIT CODE TO 0209
*                                      INDICATE AN INVALID INPUT   0209
*                                      REQUEST                       */
         MVC   VCTAUDIT(2,VCCTREG),WATAUD1                         0209
*           SVC (AUDSVC);           /* ERROR INPUT REQUEST - SADMP 0210
*                                      ERROR                         */
         SVC   13                                                  0210
*           GEN NOSEQFLOW EXIT;     /* NO RETURN FROM AMDSAAUD       */
*         END;                                                     0212
*                                                                  0213
*   /*****************************************************************/
*   /*                                                               */
*   /* NOW THE STATE OF AFFAIRS MUST BE EXAMINED. FIRST WE ASK IF    */
*   /* THERE REALLY IS ANYTHING TO WAIT FOR ANYWAY. THE CALLER MAY BE*/
*   /* CALLING US JUST TO INSURE NO I/O IS ACTIVE. IF THERE IS NO    */
*   /* ACTIVE I/O LIFE CAN CONTUNUE AS NORMAL, AND WE CAN CHECK THE  */
*   /* DEVICE STATE                                                  */
*   /*                                                               */
*   /*****************************************************************/
*/*WATBCTCK: D (YES,WATERMCK,NO,RCSET0) IODBACTV = 1 ?               */
*/*WATERMCK: D (YES,PURGEQ,NO,WATINTCK) IODBTERM = 1 ?               */
*                                                                  0213
*   IF IODBACTV = OFF & IODBINT = OFF THEN /* IF NO I/O ACTIVE TO  0213
*                                      WAIT ON RETURN                */
@RC00206 DS    0H                                                  0213
@RC00204 DS    0H                                                  0213
@RC00202 TM    IODBACTV(IODBREG),B'00100100'                       0213
         BZ    @RT00213                                            0213
*     GO TO RCSET0;                 /* NORMAL RETURN TO CALLER AS ALL
*                                      I/O ACTIVITY HAS FINISHED     */
*   IF IODBTERM = ON THEN                                          0215
@RF00213 TM    IODBTERM(IODBREG),B'10000000'                       0215
         BO    @RT00215                                            0215
*     GO TO PURGEQ;                 /* TERMINAL ERROR ON DEVICE- SET
*                                      I/O ERROR FLAGS               */
*                                                                  0217
*   /*****************************************************************/
*   /*                                                               */
*   /* NOW THE QUESTION IS HAS AN INTERRUPT OCCURRED FOR THIS DEVICE,*/
*   /* IF NO, WE MUST WAIT FOR THE INTERRUPT                         */
*   /*                                                               */
*   /*****************************************************************/
*/*WATINTCK: D (YES,PROINT,NO,ENADIS) IODBINT = 1 ?                  */
*/*ENADIS: L AMDSATAP: ISSUE SVC 2 TO GET ON PROPER CPU              */
*/* D (YES,,NO,EREXIT) ON PROPER CPU ?                               */
*/* I ENABLE/DISABLE FOR I/O INTERRUPT                               */
*/* D (YES,,NO,NOIOINT) DID AN I/O INTERRUPT OCCUR                   */
*/* L AMDSAIOI: LPSW TO IOI TO PROCESS INTERRUPT                     */
*                                                                  0217
*   IF IODBINT = OFF THEN                                          0217
         TM    IODBINT(IODBREG),B'00100000'                        0217
         BNZ   @RF00217                                            0217
*     DO;                           /* NO INTERRUPT PATH             */
*                                                                  0218
*ENADIS:                                                           0219
*       SVC (TAPSVC);               /* GET ON PROPER CPU             */
ENADIS   SVC   2                                                   0219
*       RESPECIFY RETCODE RESTRICTED;                              0220
*       IF RETCODE ^= ZERO THEN                                    0221
         LTR   RETCODE,RETCODE                                     0221
         BNZ   @RT00221                                            0221
*         GO TO EREXIT;             /* CANNOT GET ON PROPER CPU      */
*       RESPECIFY RETCODE UNRESTRICTED;                            0223
*       IONPSW = FLCINPSW;          /* SAVE I/O NEW PSW              */
         MVC   IONPSW(8),FLCINPSW                                  0224
*       FLCINPSW = WATPSW;          /* CHANGE TO RETURN CONTROL TO 0225
*                                      WAT                           */
         MVC   FLCINPSW(8),WATPSW                                  0225
*       IF PSWAIT = ON THEN         /* IS THIS A WAIT PSW            */
         LA    @10,EWAITPSW                                        0226
         TM    PSWAIT(@10),B'00000010'                             0226
         BNO   @RF00226                                            0226
*         DO;                                                      0227
*           EWAITCD = 'F0'X;        /* YES--SET WAIT CODE            */
         MVI   EWAITCD,X'F0'                                       0228
*           EWAITDEV = IODBDEV;     /* SET CUU INTO WAIT PSW         */
         MVC   EWAITDEV(2),IODBDEV(IODBREG)                        0229
*         END;                                                     0230
*       ELSE                                                       0231
*         EWAITAD = ADDR(DISABRET); /* NO--SET ADDRESS OF NEXT     0231
*                                      INSTRUCTION                   */
         B     @RC00226                                            0231
@RF00226 LA    @10,DISABRET                                        0231
         STCM  @10,7,EWAITAD                                       0231
*       PFWATEN = PFWATEN + 1;      /* INCREMENT ENABLED DISABLED  0232
*                                      COUNTER                       */
*                                                                  0232
@RC00226 LA    @10,1                                               0232
         AH    @10,PFWATEN                                         0232
         STH   @10,PFWATEN                                         0232
*       LPSW (EWAITPSW);            /* ENABLE FOR I/O INTERRUPTS     */
         LPSW  EWAITPSW                                            0233
*       GEN FLOWS(DISABRET,IOINT);                                 0234
*                                                                  0234
*   /*****************************************************************/
*   /*                                                               */
*   /*   NO I/O INTERRUPT OCCURRED.                                  */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0235
*DISABRET:                                                         0235
*       FLCINPSW = IONPSW;          /* RESTORE I/O NEW PSW           */
DISABRET MVC   FLCINPSW(8),IONPSW                                  0235
*       GO TO NOIOINT;              /* CHECK FOR OTHER DEVICES       */
*                                                                  0236
         B     NOIOINT                                             0236
*   /*****************************************************************/
*   /*                                                               */
*   /* AN I/O INTERRUPT HAS OCCURRED. CONTROL IS PASSED TO           */
*   /* AMDSAIOI TO PROCESS THE INTERRUPT.                            */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0237
*                                                                  0237
*IOINT:                                                            0237
*       FLCINPSW = IONPSW;          /* RESTORE I/O NEW PSW           */
IOINT    MVC   FLCINPSW(8),IONPSW                                  0237
*       FLCIOPSW = WATRET;          /* SET I/O OLD PSW TO SHOW HOW 0238
*                                      CONTROL WANTED BACK           */
         MVC   FLCIOPSW(8),WATRET                                  0238
*       LPSW(FLCINPSW);             /* GIVE CONTROL TO IOI           */
*                                                                  0239
         LPSW  FLCINPSW                                            0239
*   /*****************************************************************/
*   /*                                                               */
*   /* AT THIS POINT IN TIME AMDSAIOI WILL GET CONTROL.              */
*   /* IT WILL PROCESS THE INTERRUPT, HANDLE ERRORS (IF              */
*   /* ANY), EXAMINE AND MARK BUFFERS COMPLETE THEN RESTORE CONTROL  */
*   /* VIA LPSW                                                      */
*   /* AMDSAIOI SETS IODBINT FOR THE DEVICE IF AN INTERRUPT HAS      */
*   /* OCCURRED FOR THE DEVICE WE ARE WAITING ON.                    */
*   /*                                                               */
*   /*****************************************************************/
*/* D (YES,PROINT,NO,) IODBINT = 1 ?                                 */
*/* D (YES,,NO,NOIOINT) INTERRUPT OCCUR FOR OUTPUT */              0240
*/* P SAVE ORIGINAL REQUEST */                                     0240
*/* S WATDQOUT: FREE BUFFERS AND CHANNEL PROGRAMS */               0240
*/* P INDICATE INTERRUPT PROCESSED */                              0240
*/* P RESTORE ORIGINAL REQUEST */                                  0240
*                                                                  0240
*                                                                  0240
*DISABRE2:                                                         0240
*       IF IODBINT = ON THEN                                       0240
DISABRE2 TM    IODBINT(IODBREG),B'00100000'                        0240
         BO    @RT00240                                            0240
*         GO TO PROINT;             /* IF INTERRUPT OCCURRED FOR THIS
*                                      DEVICE WE CAN NOW GO OFF TO 0241
*                                      PROCESS THE INTERRUPT         */
*       IF (IODBREG ^= ADDR(IODBOUT)) &                            0242
*        (EVAL(ADDR(IODBOUT)) -> IODBINT = ON) THEN /* DID AN INTERRUPT
*                                      OCCUR FOR OUTPUT              */
         L     @10,@CA00958                                        0242
         CR    IODBREG,@10                                         0242
         BE    @RF00242                                            0242
         TM    IODBINT(@10),B'00100000'                            0242
         BNO   @RF00242                                            0242
*         DO;                       /* YES - FREE BUFFERS AND CHANNEL
*                                      PROGRAMS                      */
*           TEMPIODB = IODBREG;     /* SAVE REQUESTED IODB           */
         LR    TEMPIODB,IODBREG                                    0244
*           IODBREG = ADDR(IODBOUT); /* POINT TO OUTPUT IODB         */
         LR    IODBREG,@10                                         0245
*           CALL WATDQOUT;          /* FREE BUFFERS AND CHANNEL PGM  */
         BAL   @14,WATDQOUT                                        0246
*           IODBINT = OFF;          /* RESET INTERRUPT-PROCESSED FLAG*/
         NI    IODBINT(IODBREG),B'11011111'                        0247
*           IODBREG = TEMPIODB;     /* RESTORE ORIGINAL IODB         */
         LR    IODBREG,TEMPIODB                                    0248
*           PFWATOIP = PFWATOIP + 1;    /* INCREMENT WAIT COUNTER    */
*                                                                  0249
         LA    @10,1                                               0249
         AH    @10,PFWATOIP                                        0249
         STH   @10,PFWATOIP                                        0249
*         END;                                                     0250
*                                                                  0250
*   /*****************************************************************/
*   /*                                                               */
*   /* THE EXPECTED INTERRUPT DID NOT OCCUR.  WE WILL ENTER AN       */
*   /* ENABLED WAIT STATE FOR THE ORIGINAL REQUEST.                  */
*   /*                                                               */
*   /*****************************************************************/
*/*NOIOINT: P (,ENADIS) SET UP FOR ENABLED WAIT STATE                */
*                                                                  0251
*                                                                  0251
*NOIOINT:                                                          0251
*       PSWAIT = ON;                /* ENABLE WAIT STATE             */
@RF00242 DS    0H                                                  0251
NOIOINT  LA    @10,EWAITPSW                                        0251
         OI    PSWAIT(@10),B'00000010'                             0251
*       PFWATENW = PFWATENW + 1;    /* INCREMENT ENABLED WAIT COUNTER*/
*                                                                  0252
         LA    @10,1                                               0252
         AH    @10,PFWATENW                                        0252
         STH   @10,PFWATENW                                        0252
*       GO TO ENADIS;               /* ALLOW INTERRUPTS              */
         B     ENADIS                                              0253
*     END;                          /* THIS ENDS PROCESSING FOR NO 0254
*                                      EXISTING INTERRUPTS           */
*                                                                  0255
*   /*****************************************************************/
*   /*                                                               */
*   /* WE CAN NOW PROCESS INTERRUPTS FOR A DEVICE.                   */
*   /*                                                               */
*   /*****************************************************************/
*/*PROINT: D (NO,,YES,ORGINT) PROCESSING OUTPUT                      */
*/* D (YES,,NO,ORGINT) INTERRUPT OCCUR FOR OUTPUT                    */
*/* P SAVE ORIGINAL REQUEST                                          */
*/* S WATDQOUT: FREE BUFFERS AND CHANNEL PROGRAMS                    */
*/* P INDICATE INTERRUPT PROCESSED                                   */
*/* P RESTORE ORIGINAL REQUEST                                       */
*/*ORGINT: P IODBINT = 0                                             */
*/* D (YES,,NO,IOCCK) OUTPUT IODB ?                                  */
*/* S WATDQOUT: FREE BUFFERS AND CHANNEL PROGRAMS                    */
*/* D (NO,,YES,ENADIS) WAIT FOR I/O COMPLETION                       */
*                                                                  0255
*                                                                  0255
*PROINT:                                                           0255
*   IF (IODBREG ^= ADDR(IODBOUT)) &                                0255
*    (EVAL(ADDR(IODBOUT)) -> IODBINT = ON) THEN /* DID AN INTERRUPT
*                                      OCCUR FOR OUTPUT              */
@RF00217 DS    0H                                                  0255
PROINT   L     @10,@CA00958                                        0255
         CR    IODBREG,@10                                         0255
         BE    @RF00255                                            0255
         TM    IODBINT(@10),B'00100000'                            0255
         BNO   @RF00255                                            0255
*     DO;                           /* YES - FREE BUFFERS AND CHANNEL
*                                      PROGRAMS                      */
*       TEMPIODB = IODBREG;         /* SAVE REQUESTED IODB           */
         LR    TEMPIODB,IODBREG                                    0257
*       IODBREG = ADDR(IODBOUT);    /* POINT TO OUTPUT IODB          */
         LR    IODBREG,@10                                         0258
*       CALL WATDQOUT;              /* FREE BUFFERS AND CHANNEL PGM  */
         BAL   @14,WATDQOUT                                        0259
*       IODBINT = OFF;              /* RESET INTERRUPT-PROCESSED FLAG*/
         NI    IODBINT(IODBREG),B'11011111'                        0260
*       IODBREG = TEMPIODB;         /* RESTORE ORIGINAL IODB         */
         LR    IODBREG,TEMPIODB                                    0261
*       PFWATOIP = PFWATOIP + 1;    /* INCREMENT WAIT COUNTER        */
         LA    @10,1                                               0262
         AH    @10,PFWATOIP                                        0262
         STH   @10,PFWATOIP                                        0262
*     END;                                                         0263
*   IODBINT = OFF;                  /* RESET INTERRUPT FLAG          */
@RF00255 NI    IODBINT(IODBREG),B'11011111'                        0264
*   IF IODBREG = ADDR(IODBOUT) THEN /* PROCESSING OUTPUT             */
         L     @10,@CA00958                                        0265
         CR    IODBREG,@10                                         0265
         BNE   @RF00265                                            0265
*     DO;                           /* YES - FREE BUFFERS AND CHANNEL
*                                      PROGRAMS                      */
*       RESPECIFY RETCODE RESTRICTED;                              0267
*       CALL WATDQOUT;              /* FREE BUFFERS AND CHANNEL PGM  */
         BAL   @14,WATDQOUT                                        0268
*       IF RETCODE = 8 THEN         /* SHOULD WE WAIT FOR OUTPUT TO
*                                      COMPLETE                      */
         CH    RETCODE,@CH00036                                    0269
         BE    @RT00269                                            0269
*         GO TO ENADIS;             /* YES - ENABLE FOR INTERRUPTS   */
*       RESPECIFY RETCODE UNRESTRICTED;                            0271
*     END;                                                         0272
*                                                                  0273
*   /*****************************************************************/
*   /*                                                               */
*   /* NOW SET UP RETURN CODES BASED UPON I/O COMPLETION             */
*   /*                                                               */
*   /*****************************************************************/
*/*IOCCK: D (YES,EREXIT,NO,RCSET0) IODBIOC = 1 ?                     */
*/*PURGEQ: D (YES,EREXIT,NO,) CTIOTERM = 1 ?                         */
*/* N PURGE IODBBCT QUEUE                                            */
*/* P TURN BCTCOMP ON                                                */
*/* P TURN BCTIOERR ON                                               */
*/*EREXIT: P (,DEQRCB) RETURN CODE = 4                               */
*/*RCSET0: P (,DEQRCB) RETURN CODE = 0                               */
*                                                                  0273
*   IF IODBIOC = OFF THEN                                          0273
@RF00265 TM    IODBIOC(IODBREG),B'00010000'                        0273
         BZ    @RT00273                                            0273
*     GO TO RCSET0;                 /* IF NO I/O ERROR SET UP NORMAL
*                                      RETURN CODE                   */
*   ELSE                                                           0275
*     GO TO RCSET4;                 /* FOR I/O ERRORS SET ERROR    0275
*                                      RETURN CODE                   */
*                                                                  0275
         B     RCSET4                                              0275
*PURGEQ:                                                           0276
*   IF CTIOTERM = OFF& IODBBCT ^= ZERO THEN                        0276
PURGEQ   TM    CTIOTERM(CCTREG),B'10000000'                        0276
         BNZ   @RF00276                                            0276
         L     @10,IODBBCT(,IODBREG)                               0276
         LTR   @10,@10                                             0276
         BZ    @RF00276                                            0276
*     DO;                           /* IF TERMINATION,SKIP BUFFER  0277
*                                      DEQUEUEING                    */
*       RESPECIFY BCT BASED(IODBBCT);                              0278
*       BCTCOMP = ON;               /* INDICATE I/O COMPLETE FOR   0279
*                                      BUFFER                        */
*       BCTIOERR = ON;              /* I/O ERROR OCCURRED            */
         OI    BCTCOMP(@10),B'10100000'                            0280
*     END;                                                         0281
*                                                                  0281
*EREXIT:                                                           0282
*                                                                  0282
*RCSET4:                                                           0282
*   SAVEBACK -> SAVER15 = FOUR;     /* SET UP ERROR RETURN CODE      */
@RF00276 DS    0H                                                  0282
EREXIT   DS    0H                                                  0282
RCSET4   L     @10,SAVEBACK(,R13)                                  0282
         MVC   SAVER15(4,@10),@CF00044                             0282
*   GO TO DEQRCB;                                                  0283
*                                                                  0283
         B     DEQRCB                                              0283
*RCSET0:                                                           0284
*   SAVEBACK ->SAVER15 = ZERO;      /* SET UP NORMAL RETURN CODE     */
*                                                                  0284
RCSET0   L     @10,SAVEBACK(,R13)                                  0284
         SR    @15,@15                                             0284
         ST    @15,SAVER15(,@10)                                   0284
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS SECTION SETS WAIT UP TO RETURN TO THE CALLER             */
*   /*                                                               */
*   /*****************************************************************/
*/*DEQRCB: P DEQUEUE RCB FROM VCTRCB                                 */
*/* P RESTORE CALLER'S REGISTERS                                     */
*/* R RETURN TO CALLER                                               */
*                                                                  0285
*                                                                  0285
*DEQRCB:                                                           0285
*   VCTRCB = WRCBNEXT;              /* DEQUEUE RCB                   */
DEQRCB   MVC   VCTRCB(4,VCCTREG),WRCBNEXT                          0285
*   RETURN;                                                        0286
@EL00001 L     @13,4(,@13)                                         0286
@EF00001 DS    0H                                                  0286
@ER00001 LM    @14,@12,12(@13)                                     0286
         BR    @14                                                 0286
*                                                                  0287
*   /*****************************************************************/
*   /*                                                               */
*   /* DEQUEUE OUTPUT BUFFER                                         */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0287
*/*WATDQOUT: E FREE BUFFERS */                                     0287
*/* P SET UP ZERO RETURN CODE */                                   0287
*/* D (YES,,NO,%WATDQR) I/O ACTIVE */                              0287
*/*OUTIODB: D (YES,DEQBUF,NO,NXTBUF1) BCTCOMP ON ?                   */
*/*NXTBUF1: D (YES,%AUD1,NO,NXTBUF) BCTNEXT = 0 ?                    */
*/*%AUD1: L (,EREXIT) CALL AMDSAAUD TO DUMP ERROR CONDITION          */
*/*NXTBUF: P (,OUTIODB) OBTAIN NEXT BUFFER FROM BCTNEXT              */
*WATDQOUT: PROC OPTIONS(NOSAVE,NOSAVEAREA);                        0287
WATDQOUT DS    0H                                                  0288
*RESPECIFY (RETREG,RETCODE) RESTRICTED;                            0288
*   RETCODE = 0;                    /* SET UP ZERO RETURN CODE       */
         SR    @10,@10                                             0289
         LR    RETCODE,@10                                         0289
*   IF IODBBCT ^= 0 & CTIOTERM = OFF THEN /* ANY I/O ACTIVE          */
         L     @09,IODBBCT(,IODBREG)                               0290
         CR    @09,@10                                             0290
         BE    @RF00290                                            0290
         TM    CTIOTERM(CCTREG),B'10000000'                        0290
         BNZ   @RF00290                                            0290
*     DO;                           /* PROCESSING FOR OUTPUT IODB    */
*       RESPECIFY BCT BASED(BCTADDR);                              0292
*       BCTADDR = IODBBCT;          /* OBTAINED FIRST BUFFER         */
         L     @06,IODBBCT(,IODBREG)                               0293
         LR    BCTADDR,@06                                         0293
*       BCTLAST = ZERO;             /* SET UP END CHAIN POINTER      */
         LR    BCTLAST,@10                                         0294
*       DO WHILE BCTCOMP = OFF;     /* LOOP FOR BUFFER WITH I/O    0295
*                                      COMPLETE                      */
         B     @DE00295                                            0295
@DL00295 DS    0H                                                  0296
*         IF BCTNEXT = ZERO THEN                                   0296
         ICM   @10,15,BCTNEXT(BCTADDR)                             0296
         BNZ   @RF00296                                            0296
*           DO;                                                    0297
*             VCTAUDIT = WATAUD2;   /* SET UP UNIQUE AUDIT CODE TO 0298
*                                      IDENTIFY THIS CONDITION AS  0298
*                                      BCTCOMP NOT BEING SET FOR THE
*                                      BUFFER                        */
         MVC   VCTAUDIT(2,VCCTREG),WATAUD2                         0298
*             SVC (AUDSVC);         /* ERROR CONDITION - THIS      0299
*                                      PREVENTS AN INFINITE SEARCH 0299
*                                      LOOP                          */
         SVC   13                                                  0299
*           END;                                                   0300
*         BCTLAST = BCTADDR;        /* MAINTAIN LAST POINTER         */
@RF00296 LR    BCTLAST,BCTADDR                                     0301
*         BCTADDR = BCTNEXT;        /* GET NEXT BUFFER               */
         L     BCTADDR,BCTNEXT(,BCTADDR)                           0302
*       END;                        /* END BCT SEARCH LOOP           */
@DE00295 TM    BCTCOMP(BCTADDR),B'10000000'                        0303
         BZ    @DL00295                                            0303
*                                                                  0304
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS SECTION DEQUEUES THE BUFFER FROM THE IODB CHAIN AND FREES*/
*   /* THE ASSOCIATED CHANNEL PROGRAMS.                              */
*   /* THIS PROCESSING IS PERFORMED FOR OUTPUT BUFFERS ONLY.         */
*   /*                                                               */
*   /*****************************************************************/
*/*DEQBUF: P DEQUEUE BUFFER FROM IODB CHAIN                          */
*/* P FREE ASSOCIATED CHANNEL PROGRAM                                */
*/* P BCTALLOC = 0                                                   */
*/* D (YES,,NO,NXTBUF) BCTADDR = 0 ?                                 */
*/* D (YES,%WATDQR,NO,) CTIOINT = 1 ?                                */
*/* D (YES,%WATDQR,NO,) IODBBCT = 0 ?                  */          0304
*/* P SET UP RETURN CODE 8 */                                      0304
*/*%WATDQR: R RETURN TO CALLER */                                  0304
*/*AMDSAWAT: END                                                     */
*                                                                  0304
*       DO WHILE BCTADDR ^= ZERO;   /* PROCESS UNTIL COMPLETED       */
         B     @DE00304                                            0304
@DL00304 DS    0H                                                  0305
*         BCTALLOC = OFF;           /* DEQUEUE BUFFER                */
         NI    BCTALLOC(BCTADDR),B'10111111'                       0305
*         CCWADDR = ADDR(OUTCCW) + LENGTH(CCW); /* POINT TO FIRST CCW
*                                      NOT DATA CHAINED              */
         L     CCWADDR,@CA00954                                    0306
         AH    CCWADDR,@CH00036                                    0306
*         DO WHILE CCWDADDR ^= BCTRADDR; /* LOOK FOR CCW WITH BUFFER */
         B     @DE00307                                            0307
@DL00307 DS    0H                                                  0308
*           IF CCWADDR > ADDR(OUTCCW) + LENGTH(OUTCCW) THEN        0308
         L     @10,@CA00954                                        0308
         AH    @10,@CH00955                                        0308
         CR    CCWADDR,@10                                         0308
         BNH   @RF00308                                            0308
*             DO;                                                  0309
*               VCTAUDIT = WATAUD3; /* SET UP AUDIT CODE TO IDENTIFY
*                                      THIS CONDITION AS INVALID CCW
*                                      ON OUTPUT I/O QUEUE           */
         MVC   VCTAUDIT(2,VCCTREG),WATAUD3                         0310
*               SVC (AUDSVC);       /* TERMINAL ERROR IN AMDSADMP    */
         SVC   13                                                  0311
*             END;                                                 0312
*           CCWADDR = CCWADDR + 3 * LENGTH(CCW); /* BUMP TO NEXT   0313
*                                      WRITE CCW                     */
@RF00308 AH    CCWADDR,@CH00089                                    0313
*         END;                                                     0314
@DE00307 SR    @10,@10                                             0314
         ICM   @10,7,CCWDADDR(CCWADDR)                             0314
         C     @10,BCTRADDR(,BCTADDR)                              0314
         BNE   @DL00307                                            0314
*         CCWDADDR = 0;             /* ZERO DATA ADDRESS IN CCW      */
         SR    @10,@10                                             0315
         STCM  @10,7,CCWDADDR(CCWADDR)                             0315
*         CCWADDR = CCWADDR + LENGTH(CCW); /* GET NOP/TIC CCW        */
         AH    CCWADDR,@CH00036                                    0316
*         CCWCMD = NOP;             /* RESET TO NOP CMD              */
         MVI   CCWCMD(CCWADDR),X'03'                               0317
*         BCTADDR = BCTNEXT;        /* BUMP TO NEXT BUFFER ON CHAIN  */
         L     BCTADDR,BCTNEXT(,BCTADDR)                           0318
*       END;                                                       0319
@DE00304 SR    @10,@10                                             0319
         CR    BCTADDR,@10                                         0319
         BNE   @DL00304                                            0319
*       RESPECIFY BCT BASED (BCTLAST);                             0320
*       IF BCTLAST = ZERO THEN                                     0321
         CR    BCTLAST,@10                                         0321
         BNE   @RF00321                                            0321
*         DO;                                                      0322
*           IODBBCT = ZERO;         /* ALL DONE PROCESSING INTERRUPTS*/
         ST    @10,IODBBCT(,IODBREG)                               0323
*           IODBCAW = ZERO;         /* RESET TO NO ACTIVE I/O        */
         ST    @10,IODBCAW(,IODBREG)                               0324
*           PFWATDE = PFWATDE + 1;  /* INCREMENT DEVICE END RECEIVED
*                                      COUNTER                       */
*                                                                  0325
         LA    @10,1                                               0325
         AH    @10,PFWATDE                                         0325
         STH   @10,PFWATDE                                         0325
*         END;                                                     0326
*       ELSE                                                       0327
*         DO;                                                      0327
         B     @RC00321                                            0327
@RF00321 DS    0H                                                  0328
*           BCTNEXT = ZERO;         /* SET UP ZERO POINTER ON FINAL
*                                      BUFFER                        */
         SR    @10,@10                                             0328
         ST    @10,BCTNEXT(,BCTLAST)                               0328
*           IF CTIOINT = OFF THEN                                  0329
         TM    CTIOINT(CCTREG),B'00000100'                         0329
         BNZ   @RF00329                                            0329
*             RETCODE = 8;          /* IF ALL INTERRUPTS MUST BE   0330
*                                      HANDLED INDICATE TO WAIT FOR
*                                      ADDITIONAL I/O INTERRUPTS     */
         LA    RETCODE,8                                           0330
*         END;                                                     0331
*     END;                          /* END OF OUTPUT PROCESSING      */
*   RESPECIFY (RETREG,RETCODE) UNRESTRICTED;                       0333
*   END WATDQOUT;                                                  0334
@EL00002 DS    0H                                                  0334
@EF00002 DS    0H                                                  0334
@ER00002 BR    @14                                                 0334
*   END AMDSAWAT                                                   0335
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.      *
*/*%INCLUDE SYSLIB  (IHAPSA  )                                        *
*/*%INCLUDE SYSLIB  (AMDSARMK)                                        *
*;                                                                 0335
         B     @EL00001                                            0335
@DATA    DS    0H
@CH00036 DC    H'8'
@CH00089 DC    H'24'
@CH00955 DC    H'240'
@CH00738 DC    H'28672'
         DS    0F
@SA00001 DS    18F
         DS    0F
@CF00044 DC    F'4'
@CA00954 DC    A(OUTCCW)
@CA00957 DC    A(IODBDA)
@CA00958 DC    A(IODBOUT)
@CA00959 DC    A(IODBWORK)
         DS    0D
@CC00968 DC    C'LWAT'
WATAUD1  DS    CL2
         ORG   WATAUD1
@NM00055 DC    X'01'
@NM00056 DC    AL1(1)
         ORG   WATAUD1+2
WATAUD2  DS    CL2
         ORG   WATAUD2
@NM00057 DC    X'02'
@NM00058 DC    AL1(1)
         ORG   WATAUD2+2
WATAUD3  DS    CL2
         ORG   WATAUD3
@NM00059 DC    X'03'
@NM00060 DC    AL1(1)
         ORG   WATAUD3+2
         DS    CL2
WATRCB   DS    CL20
         ORG   WATRCB
WRCBNEXT DC    A(0)
@NM00061 DC    A(0)
WRCBSAVE DC    A(0)
@NM00062 DC    AL4(EREXIT)
WRCBASE  DS    AL4
         ORG   WATRCB+20
EWAITPSW DS    CL8
         ORG   EWAITPSW
@NM00063 DC    X'03'
@NM00064 DC    X'0C'
@NM00065 DC    X'000000'
EWAITAD  DS    AL3
         ORG   EWAITAD
EWAITCD  DC    X'F0'
EWAITDEV DC    H'0'
         ORG   EWAITPSW+8
WATPSW   DS    CL8
         ORG   WATPSW
@NM00066 DC    X'010C0000'
@NM00067 DC    AL4(IOINT)
         ORG   WATPSW+8
WATRET   DS    CL8
         ORG   WATRET
@NM00068 DC    X'010C0000'
@NM00069 DC    AL4(DISABRE2)
         ORG   WATRET+8
IONPSW   DS    CL8
DISABLE  DC    X'01'
         DS    CL3
WATPATCH DC    25F'0'
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
CCWADDR  EQU   @06
BCTLAST  EQU   @09
BCTADDR  EQU   @05
TEMPIODB EQU   @08
IODBREG  EQU   @04
CCTREG   EQU   @07
VCCTREG  EQU   @12
RETREG   EQU   @14
RETCODE  EQU   @15
BASEREG  EQU   @11
R13      EQU   @13
R0       EQU   @00
R1       EQU   @01
R10      EQU   @10
R11      EQU   @11
R12      EQU   @12
R14      EQU   @14
R15      EQU   @15
R2       EQU   @02
R3       EQU   @03
R4       EQU   @04
R5       EQU   @05
R6       EQU   @06
R7       EQU   @07
R8       EQU   @08
R9       EQU   @09
         EXTRN OUTCCW
         EXTRN IODBDA
         EXTRN IODBOUT
         EXTRN IODBWORK
PSA      EQU   0
FLCRNPSW EQU   PSA
FLCROPSW EQU   PSA+8
FLCICCW2 EQU   PSA+16
FLCIOPSW EQU   PSA+56
FLCINPSW EQU   PSA+120
PSAEEPSW EQU   PSA+132
PSAESPSW EQU   PSA+136
FLCSVILC EQU   PSAESPSW+1
PSAEPPSW EQU   PSA+140
FLCPIILC EQU   PSAEPPSW+1
FLCPICOD EQU   PSAEPPSW+2
PSAPICOD EQU   FLCPICOD+1
FLCTEA   EQU   PSAEPPSW+4
FLCPER   EQU   PSA+152
FLCMCLA  EQU   PSA+168
FLCIOEL  EQU   FLCMCLA+4
FLCIOA   EQU   FLCMCLA+16
FLCFSA   EQU   FLCMCLA+80
PSASUPER EQU   PSA+552
PSASUP1  EQU   PSASUPER
PSASUP2  EQU   PSASUPER+1
PSASUP3  EQU   PSASUPER+2
PSASUP4  EQU   PSASUPER+3
PSACLHT  EQU   PSA+640
PSALKSA  EQU   PSA+696
PSAHLHI  EQU   PSA+760
PSADSSFL EQU   PSA+836
PSADSSF1 EQU   PSADSSFL
PSADSSF3 EQU   PSADSSFL+2
PSADSSF4 EQU   PSADSSFL+3
PSARSVT  EQU   PSA+896
DEBUGLSD EQU   3286
PFWATENW EQU   DEBUGLSD+16
PFWATEN  EQU   DEBUGLSD+18
PFWATDE  EQU   DEBUGLSD+20
PFWATOIP EQU   DEBUGLSD+22
SADMPLSD EQU   3312
ARB      EQU   0
BCTH     EQU   0
BCT      EQU   0
BCTNEXT  EQU   BCT+4
BCTRADDR EQU   BCT+16
BCTLPID  EQU   BCT+28
BCTFLGT  EQU   BCT+44
BCTFLGI  EQU   BCT+45
BCTCOMP  EQU   BCTFLGI
BCTALLOC EQU   BCTFLGI
BCTIOERR EQU   BCTFLGI
CCT      EQU   0
CTFLG1   EQU   CCT+1
CTFLG2   EQU   CCT+2
CTLOWFLG EQU   CCT+48
CTDMPTYP EQU   CCT+52
CTIOTYPE EQU   CTDMPTYP
CTIOTERM EQU   CTIOTYPE
CTIOOUT  EQU   CTIOTYPE
CTIODA   EQU   CTIOTYPE
CTIOWK   EQU   CTIOTYPE
CTIOINT  EQU   CTIOTYPE
CTCONFLG EQU   CTDMPTYP+2
CTBUFTYP EQU   CTDMPTYP+3
CTPRMT1  EQU   CTDMPTYP+24
CTPRMT2  EQU   CTDMPTYP+26
CCW      EQU   0
CCWCMD   EQU   CCW
CCWDADDR EQU   CCW+1
CCWFLAGS EQU   CCW+4
CSW      EQU   0
CSWKEY00 EQU   CSW
CSWUSTAT EQU   CSW+4
CSWCSTAT EQU   CSW+5
DSCE     EQU   0
IODB     EQU   0
IODBFLAG EQU   IODB+8
IODBTERM EQU   IODBFLAG
IODBINT  EQU   IODBFLAG
IODBIOC  EQU   IODBFLAG
IODBACTV EQU   IODBFLAG
IODBDEV  EQU   IODB+10
IODBBCT  EQU   IODB+16
IODBCAW  EQU   IODB+20
IODBCCHH EQU   IODB+32
IODBSRCH EQU   IODBCCHH+3
MDCE     EQU   0
MDCB     EQU   0
MDCBGRS  EQU   MDCB+16
MDCBFLGS EQU   MDCB+86
PSW      EQU   0
PSWSM    EQU   PSW
@NM00047 EQU   PSW+1
PSWAIT   EQU   @NM00047
PSWCCPM  EQU   PSW+2
@NM00050 EQU   PSW+3
PTRT     EQU   0
PTRTRSA  EQU   0
RCB      EQU   0
VCCT     EQU   0
VCTRCB   EQU   VCCT+4
VCTRECSN EQU   VCCT+8
VCTFLGS  EQU   VCCT+9
VCTMDCE  EQU   VCCT+12
VCTDSCE  EQU   VCCT+20
VCTBCTH  EQU   VCCT+24
VCTAUDIT EQU   VCCT+62
VCTCBID  EQU   VCCT+64
SDL      EQU   0
REGLOCAL EQU   0
SAVEFORM EQU   0
SAVEBACK EQU   SAVEFORM+4
SAVER15  EQU   SAVEFORM+16
PTRTVSA  EQU   0
PSARSVTE EQU   PSARSVT
CTLOWDMP EQU   CTDMPTYP
FLC      EQU   PSA
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
CTADDRE  EQU   CTLOWDMP+4
CTADDRS  EQU   CTLOWDMP
PSARSAV  EQU   PSARSVTE+60
PSARSTK  EQU   PSARSVTE+56
PSAESAV3 EQU   PSARSVTE+52
PSAESTK3 EQU   PSARSVTE+48
PSAESAV2 EQU   PSARSVTE+44
PSAESTK2 EQU   PSARSVTE+40
PSAESAV1 EQU   PSARSVTE+36
PSAESTK1 EQU   PSARSVTE+32
PSAPSAV  EQU   PSARSVTE+28
PSAPSTK  EQU   PSARSVTE+24
PSAMSAV  EQU   PSARSVTE+20
PSAMSTK  EQU   PSARSVTE+16
PSASSAV  EQU   PSARSVTE+12
PSASSTK  EQU   PSARSVTE+8
PSANSTK  EQU   PSARSVTE+4
PSACSTK  EQU   PSARSVTE
SAVER12  EQU   SAVEFORM+68
SAVER11  EQU   SAVEFORM+64
SAVER10  EQU   SAVEFORM+60
SAVER9   EQU   SAVEFORM+56
SAVER8   EQU   SAVEFORM+52
SAVER7   EQU   SAVEFORM+48
SAVER6   EQU   SAVEFORM+44
SAVER5   EQU   SAVEFORM+40
SAVER4   EQU   SAVEFORM+36
SAVER3   EQU   SAVEFORM+32
SAVER2   EQU   SAVEFORM+28
SAVER1   EQU   SAVEFORM+24
SAVER0   EQU   SAVEFORM+20
SAVER14  EQU   SAVEFORM+12
SAVENEXT EQU   SAVEFORM+8
SAVENAME EQU   SAVEFORM+1
SAVEID   EQU   SAVEFORM
REGL15   EQU   REGLOCAL+60
REGL14   EQU   REGLOCAL+56
REGL13   EQU   REGLOCAL+52
REGL12   EQU   REGLOCAL+48
REGL11   EQU   REGLOCAL+44
REGL10   EQU   REGLOCAL+40
REGL9    EQU   REGLOCAL+36
REGL8    EQU   REGLOCAL+32
REGL7    EQU   REGLOCAL+28
REGL6    EQU   REGLOCAL+24
REGL5    EQU   REGLOCAL+20
REGL4    EQU   REGLOCAL+16
REGL3    EQU   REGLOCAL+12
REGL2    EQU   REGLOCAL+8
REGL1    EQU   REGLOCAL+4
REGL0    EQU   REGLOCAL
SDLSPN   EQU   SDL+1
SDLNUM   EQU   SDL
VCTVCCTV EQU   VCCT+108
VCTCCTV  EQU   VCCT+104
@NM00054 EQU   VCCT+102
VCTEXTRA EQU   VCCT+100
VCTCPOUT EQU   VCCT+96
VCTSVCTB EQU   VCCT+92
VCTPGT   EQU   VCCT+88
VCTLPA   EQU   VCCT+84
VCTCBADR EQU   VCCT+80
VCTJBNME EQU   VCCT+72
VCTCBIDN EQU   VCTCBID+7
@NM00053 EQU   VCTCBID
VCTASID  EQU   VCCT+60
VCTPTRT  EQU   VCCT+56
VCTMASCB EQU   VCCT+52
VCTASCB  EQU   VCCT+48
VCTCPUC  EQU   VCCT+46
VCTWKC   EQU   VCCT+45
VCTWKHI  EQU   VCCT+44
VCTSUBPL EQU   VCCT+40
VCTARB   EQU   VCCT+36
VCTIODB  EQU   VCCT+32
VCTBCTC  EQU   VCCT+28
VCTSTOR  EQU   VCCT+16
VCTRECVA EQU   VCCT+10
@NM00052 EQU   VCTFLGS
VCTLRCLM EQU   VCTFLGS
VCTARCLM EQU   VCTFLGS
VCTASMIC EQU   VCTFLGS
VCTMEMIN EQU   VCTFLGS
VCTSADMP EQU   VCTFLGS
@NM00051 EQU   VCTRECSN
VCTRSMR  EQU   VCTRECSN
VCTEXIR  EQU   VCTRECSN
VCTUPDR  EQU   VCTRECSN
VCTPGIR  EQU   VCTRECSN
VCTVCT   EQU   VCCT
RCBBASE  EQU   RCB+16
RCBEXIT  EQU   RCB+12
RCBSAVE  EQU   RCB+8
RCBSTOR  EQU   RCB+4
RCBNEXT  EQU   RCB
PTRTVS   EQU   PTRT+1032
PTRTRS   EQU   PTRT+8
PTRTLGID EQU   PTRT+4
PTRTPTRT EQU   PTRT
PSWEND   EQU   PSW+8
PSWIA    EQU   PSW+4
PSWSP    EQU   @NM00050
PSWSIG   EQU   PSWCCPM
PSWEU    EQU   PSWCCPM
PSWDO    EQU   PSWCCPM
PSWFPO   EQU   PSWCCPM
@NM00049 EQU   PSWCCPM
@NM00048 EQU   PSWCCPM
PSWPRBLM EQU   @NM00047
PSWMCH   EQU   @NM00047
PSWMODE  EQU   @NM00047
PSWKEY   EQU   @NM00047
PSWXTRNL EQU   PSWSM
PSWIO    EQU   PSWSM
PSWDAT   EQU   PSWSM
@NM00046 EQU   PSWSM
@NM00045 EQU   PSWSM
@NM00044 EQU   PSWSM
PSWPER   EQU   PSWSM
@NM00043 EQU   PSWSM
@NM00042 EQU   MDCB+87
@NM00041 EQU   MDCBFLGS
MDCBDUMP EQU   MDCBFLGS
MDCBASMI EQU   MDCBFLGS
MDCBPI   EQU   MDCB+84
MDCBSTOR EQU   MDCB+80
MDCBGR15 EQU   MDCBGRS+60
MDCBGR14 EQU   MDCBGRS+56
MDCBGR13 EQU   MDCBGRS+52
MDCBGR12 EQU   MDCBGRS+48
MDCBGR11 EQU   MDCBGRS+44
MDCBGR10 EQU   MDCBGRS+40
MDCBGR9  EQU   MDCBGRS+36
MDCBGR8  EQU   MDCBGRS+32
MDCBGR7  EQU   MDCBGRS+28
MDCBGR6  EQU   MDCBGRS+24
MDCBGR5  EQU   MDCBGRS+20
MDCBGR4  EQU   MDCBGRS+16
MDCBGR3  EQU   MDCBGRS+12
MDCBGR2  EQU   MDCBGRS+8
MDCBGR1  EQU   MDCBGRS+4
MDCBGR0  EQU   MDCBGRS
MDCBPSW  EQU   MDCB+8
MDCBNEXT EQU   MDCB+4
MDCBMDCB EQU   MDCB
MDCEAVIL EQU   MDCE+8
MDCEACTV EQU   MDCE+4
MDCEMDCE EQU   MDCE
IODBSENS EQU   IODB+40
IODBR    EQU   IODBCCHH+7
IODBHH   EQU   IODBSRCH+2
IODBCC   EQU   IODBSRCH
IODBSEEK EQU   IODBCCHH+1
IODBM    EQU   IODBCCHH
IODBCSW  EQU   IODB+24
IODBCPU  EQU   IODB+14
IODBTYPE EQU   IODB+13
IODBCLAS EQU   IODB+12
@NM00040 EQU   IODBFLAG+1
IODBSTRT EQU   IODBFLAG
IODBCONW EQU   IODBFLAG
IODBHALT EQU   IODBFLAG
IODBPTRM EQU   IODBFLAG
IODBIDEN EQU   IODB+4
IODBIODB EQU   IODB
DSCETEND EQU   DSCE+20
DSCETCUR EQU   DSCE+16
DSCETBEG EQU   DSCE+12
DSCENEXT EQU   DSCE+8
DSCEBEGN EQU   DSCE+4
DSCEDSCE EQU   DSCE
CSWCNT   EQU   CSW+6
CSWCHC   EQU   CSWCSTAT
CSWICC   EQU   CSWCSTAT
CSWCCC   EQU   CSWCSTAT
CSWCDC   EQU   CSWCSTAT
CSWPTC   EQU   CSWCSTAT
CSWPGC   EQU   CSWCSTAT
CSWIL    EQU   CSWCSTAT
CSWPCI   EQU   CSWCSTAT
CSWUE    EQU   CSWUSTAT
CSWUC    EQU   CSWUSTAT
CSWDE    EQU   CSWUSTAT
CSWCE    EQU   CSWUSTAT
CSWBUSY  EQU   CSWUSTAT
CSWCUE   EQU   CSWUSTAT
CSWSTMOD EQU   CSWUSTAT
CSWATTN  EQU   CSWUSTAT
CSWCADDR EQU   CSW+1
@NM00039 EQU   CSWKEY00
CSWKEY   EQU   CSWKEY00
CCWCNT   EQU   CCW+6
@NM00038 EQU   CCW+5
@NM00037 EQU   CCWFLAGS
CCWIDA   EQU   CCWFLAGS
CCWPCI   EQU   CCWFLAGS
CCWSKIP  EQU   CCWFLAGS
CCWSLI   EQU   CCWFLAGS
CCWCC    EQU   CCWFLAGS
CCWDC    EQU   CCWFLAGS
CTHWMAX  EQU   CTDMPTYP+29
CTHWM    EQU   CTDMPTYP+28
CTPRMT2X EQU   CTPRMT2+1
CTPRMT2Y EQU   CTPRMT2
CTPRMT1X EQU   CTPRMT1+1
CTPRMT1Y EQU   CTPRMT1
CTVCCT   EQU   CTDMPTYP+20
CTEOR    EQU   CTDMPTYP+16
CTCOMMIO EQU   CTDMPTYP+12
CTLWKAD  EQU   CTDMPTYP+8
CTCONSOL EQU   CTDMPTYP+4
@NM00036 EQU   CTBUFTYP
CTDUMP   EQU   CTBUFTYP
CTLSQA   EQU   CTBUFTYP
CTASM    EQU   CTBUFTYP
CTPGT    EQU   CTBUFTYP
CTWKFLE  EQU   CTBUFTYP
@NM00035 EQU   CTBUFTYP
@NM00034 EQU   CTCONFLG
CTREAD   EQU   CTCONFLG
CTMSGOUT EQU   CTCONFLG
@NM00033 EQU   CTDMPTYP+1
@NM00032 EQU   CTIOTYPE
CTIORSET EQU   CTIOTYPE
CTIOCON  EQU   CTIOTYPE
CTEBCOPR EQU   CCT+49
@NM00031 EQU   CTLOWFLG
CTWKSTUS EQU   CTLOWFLG
CTINIT   EQU   CTLOWFLG
CTFP     EQU   CTLOWFLG
CTVIRTD  EQU   CTLOWFLG
CTEBCOPD EQU   CCT+45
CTCONTYP EQU   CCT+44
CTOUTAD  EQU   CCT+42
CTCPUI   EQU   CCT+40
CTERBCON EQU   CCT+36
CTERBTPE EQU   CCT+32
CTERBDA  EQU   CCT+28
CTCCHHW  EQU   CCT+24
CTCCHHE  EQU   CCT+20
CTCCHHS  EQU   CCT+16
CTPGECNT EQU   CCT+15
CTCCHHR  EQU   CCT+8
CTINADDR EQU   CCT+6
CTSENSE  EQU   CCT+4
CTDEVTYP EQU   CCT+3
@NM00030 EQU   CTFLG2
CTALTCON EQU   CTFLG2
CTWKDONE EQU   CTFLG2
CTVIRTR  EQU   CTFLG2
CTNOSTAT EQU   CTFLG2
CTPGEFLT EQU   CTFLG2
CTSTOR   EQU   CTFLG2
CTDUPSW  EQU   CTFLG2
CTERREC  EQU   CTFLG1
CTMP     EQU   CTFLG1
@NM00029 EQU   CTFLG1
CTDEFO   EQU   CTFLG1
CTWORK   EQU   CTFLG1
CTMORTPE EQU   CTFLG1
CTDEVICE EQU   CTFLG1
CTERROR  EQU   CTFLG1
CTWAIT   EQU   CCT
@NM00028 EQU   BCT+46
BCTRECLM EQU   BCTFLGI
@NM00027 EQU   BCTFLGT
BCTPGTF  EQU   BCTFLGT
BCTDUMP  EQU   BCTFLGT
BCTLSQA  EQU   BCTFLGT
BCTASM   EQU   BCTFLGT
BCTPGT   EQU   BCTFLGT
BCTWKFLE EQU   BCTFLGT
@NM00026 EQU   BCTFLGT
BCTRBA   EQU   BCT+40
BCTAMB   EQU   BCT+36
@NM00025 EQU   BCTLPID+4
BCTLGN   EQU   BCTLPID
BCTMDCB  EQU   BCT+24
BCTPGTE  EQU   BCT+20
BCTVADDR EQU   BCT+12
BCTASID  EQU   BCT+10
BCTKEY2  EQU   BCT+9
BCTKEY1  EQU   BCT+8
BCTBCT   EQU   BCT
BCTHLAST EQU   BCTH+8
BCTHFRST EQU   BCTH+4
BCTHBCTH EQU   BCTH
ARBADDRE EQU   ARB+4
ARBADDRB EQU   ARB
GTMSAVE  EQU   SADMPLSD+684
GTMNAME  EQU   SADMPLSD+680
FRMSAVE  EQU   SADMPLSD+580
FRMNAME  EQU   SADMPLSD+576
AUDSAVE  EQU   SADMPLSD+476
AUDNAME  EQU   SADMPLSD+472
IOISAVE  EQU   SADMPLSD+372
IOINAME  EQU   SADMPLSD+368
PGISAVE  EQU   SADMPLSD+268
PGINAME  EQU   SADMPLSD+264
SVISAVE  EQU   SADMPLSD+164
SVINAME  EQU   SADMPLSD+160
LOWCRS   EQU   SADMPLSD+96
LOWGRS   EQU   SADMPLSD+32
SAVEDUMP EQU   SADMPLSD+24
AUDPSW   EQU   SADMPLSD+16
SVIRPSW  EQU   SADMPLSD+8
PSWSADMP EQU   SADMPLSD
PFIOIRST EQU   DEBUGLSD+24
PFSIOWAT EQU   DEBUGLSD+14
PFSIOPCI EQU   DEBUGLSD+12
PFSIOOUT EQU   DEBUGLSD+10
PFSIOWK  EQU   DEBUGLSD+8
PFSIODA  EQU   DEBUGLSD+6
PFTAPCPU EQU   DEBUGLSD+4
PFBUFWAT EQU   DEBUGLSD+2
PFTRCLM  EQU   DEBUGLSD
@NM00024 EQU   PSA+3412
PSASTAK  EQU   PSA+3072
@NM00023 EQU   PSA+1024
PSAUSEND EQU   PSA+1024
PSARV060 EQU   PSA+1020
PSARV059 EQU   PSA+1018
PSASVC13 EQU   PSA+1016
PSALSFCC EQU   PSA+1012
PSASFACC EQU   PSA+1008
PSASTOP  EQU   PSA+992
PSASTART EQU   PSA+976
PSARSPSW EQU   PSA+968
PSASRPSW EQU   PSA+960
PSARV045 EQU   PSA+892
PSARV044 EQU   PSA+888
PSARV043 EQU   PSA+884
PSARV042 EQU   PSA+880
PSARV041 EQU   PSA+876
PSARV040 EQU   PSA+872
PSARV025 EQU   PSA+868
PSADSSED EQU   PSA+868
PSADSSPR EQU   PSA+864
PSADSSFW EQU   PSA+860
PSADSS14 EQU   PSA+856
PSADSSPP EQU   PSA+848
PSADSSRP EQU   PSA+840
PSADSS05 EQU   PSADSSF4
PSADSS10 EQU   PSADSSF4
PSADSSVE EQU   PSADSSF4
PSADSSDE EQU   PSADSSF4
PSADSSC0 EQU   PSADSSF4
PSADSSIE EQU   PSADSSF4
PSADSS12 EQU   PSADSSF4
PSADSSRC EQU   PSADSSF4
PSARV057 EQU   PSADSSF3
PSARV056 EQU   PSADSSF3
PSARV055 EQU   PSADSSF3
PSARV054 EQU   PSADSSF3
PSADSSRW EQU   PSADSSF3
PSADSSNM EQU   PSADSSF3
PSADSSES EQU   PSADSSF3
PSADSSGP EQU   PSADSSF3
PSADSSF2 EQU   PSADSSFL+1
PSADSSPI EQU   PSADSSF1
PSADSSOI EQU   PSADSSF1
PSADSSSP EQU   PSADSSF1
PSADSSTP EQU   PSADSSF1
PSADSSDW EQU   PSADSSF1
PSADSSDD EQU   PSADSSF1
PSADSSDM EQU   PSADSSF1
PSADSSMV EQU   PSADSSF1
PSADSSTS EQU   PSA+816
PSADSSWK EQU   PSA+812
PSADSSR3 EQU   PSA+808
PSADSSR2 EQU   PSA+804
PSADSSRS EQU   PSA+800
PSASTOR  EQU   PSA+796
PSARV058 EQU   PSA+794
PSAVSTAP EQU   PSA+792
PSAWKVAP EQU   PSA+788
PSAWKRAP EQU   PSA+784
PSAMCHIC EQU   PSA+783
PSAMODE  EQU   PSA+782
PSASYMSK EQU   PSA+781
PSAMCHFL EQU   PSA+780
PSACR0   EQU   PSA+776
PSAPSWSV EQU   PSA+768
PSALITA  EQU   PSA+764
PSACLHS  EQU   PSAHLHI
PSALKR15 EQU   PSALKSA+60
PSALKR14 EQU   PSALKSA+56
PSALKR13 EQU   PSALKSA+52
PSALKR12 EQU   PSALKSA+48
PSALKR11 EQU   PSALKSA+44
PSALKR10 EQU   PSALKSA+40
PSALKR9  EQU   PSALKSA+36
PSALKR8  EQU   PSALKSA+32
PSALKR7  EQU   PSALKSA+28
PSALKR6  EQU   PSALKSA+24
PSALKR5  EQU   PSALKSA+20
PSALKR4  EQU   PSALKSA+16
PSALKR3  EQU   PSALKSA+12
PSALKR2  EQU   PSALKSA+8
PSALKR1  EQU   PSALKSA+4
PSALKR0  EQU   PSALKSA
PSARV023 EQU   PSACLHT+52
PSALOCAL EQU   PSACLHT+48
PSACMSL  EQU   PSACLHT+44
PSAOPTL  EQU   PSACLHT+40
PSATPACL EQU   PSACLHT+36
PSATPDNL EQU   PSACLHT+32
PSATPNCL EQU   PSACLHT+28
PSAIOSLL EQU   PSACLHT+24
PSAIOSUL EQU   PSACLHT+20
PSAIOSCL EQU   PSACLHT+16
PSAIOSSL EQU   PSACLHT+12
PSASALCL EQU   PSACLHT+8
PSAASML  EQU   PSACLHT+4
PSADISPL EQU   PSACLHT
PSASRSA  EQU   PSA+636
PSARV050 EQU   PSA+634
PSADSSGO EQU   PSA+633
PSARECUR EQU   PSA+632
PSAHLHIS EQU   PSA+628
PSAIPCSA EQU   PSA+624
@NM00022 EQU   PSA+621
PSAIPCDM EQU   PSA+620
PSAIPCD  EQU   PSA+616
@NM00021 EQU   PSA+613
PSAIPCRM EQU   PSA+612
PSAIPCR  EQU   PSA+608
PSAMCHEX EQU   PSA+600
PSAMPSW  EQU   PSA+592
PSAEXPS2 EQU   PSA+584
PSAEXPS1 EQU   PSA+576
PSAPIREG EQU   PSA+572
PSARSREG EQU   PSA+568
PSAGPREG EQU   PSA+556
PSARV022 EQU   PSASUP4
PSARV021 EQU   PSASUP4
PSARV020 EQU   PSASUP4
PSARV019 EQU   PSASUP4
PSARV018 EQU   PSASUP4
PSARV017 EQU   PSASUP4
PSARV016 EQU   PSASUP4
PSARV015 EQU   PSASUP4
PSARV014 EQU   PSASUP3
PSARV013 EQU   PSASUP3
PSARV012 EQU   PSASUP3
PSARV011 EQU   PSASUP3
PSARV010 EQU   PSASUP3
PSARV009 EQU   PSASUP3
PSARV008 EQU   PSASUP3
PSAIOSUP EQU   PSASUP3
PSALCR   EQU   PSASUP2
PSARTM   EQU   PSASUP2
PSAACR   EQU   PSASUP2
PSAIPCE2 EQU   PSASUP2
PSAIPCES EQU   PSASUP2
PSAIPCEC EQU   PSASUP2
PSAGTF   EQU   PSASUP2
PSAIPCRI EQU   PSASUP2
PSAIPCRP EQU   PSASUP1
PSAIPCDR EQU   PSASUP1
PSADISP  EQU   PSASUP1
PSALOCK  EQU   PSASUP1
PSAPI    EQU   PSASUP1
PSAEXT   EQU   PSASUP1
PSASVC   EQU   PSASUP1
PSAIO    EQU   PSASUP1
PSAAOLD  EQU   PSA+548
PSAANEW  EQU   PSA+544
PSATOLD  EQU   PSA+540
PSATNEW  EQU   PSA+536
PSALCCAR EQU   PSA+532
PSALCCAV EQU   PSA+528
PSAPCCAR EQU   PSA+524
PSAPCCAV EQU   PSA+520
PSACPULA EQU   PSA+518
PSACPUPA EQU   PSA+516
PSAPSA   EQU   PSA+512
FLCHDEND EQU   PSA+512
FLCCRSAV EQU   FLCMCLA+280
FLCGRSAV EQU   FLCMCLA+216
FLCFPSAV EQU   FLCMCLA+184
FLCFLA   EQU   FLCMCLA+88
FLCRGNCD EQU   FLCMCLA+84
FLCFSAA  EQU   FLCFSA+1
@NM00020 EQU   FLCFSA
@NM00019 EQU   FLCMCLA+72
FLCMCIC  EQU   FLCMCLA+64
@NM00018 EQU   FLCMCLA+20
FLCIOAA  EQU   FLCIOA+1
@NM00017 EQU   FLCIOA
@NM00016 EQU   FLCMCLA+15
@NM00015 EQU   FLCMCLA+14
@NM00014 EQU   FLCMCLA+12
FLCLCL   EQU   FLCMCLA+8
FLCIOELA EQU   FLCIOEL+1
@NM00013 EQU   FLCIOEL
FLCCHNID EQU   FLCMCLA
@NM00012 EQU   PSA+160
FLCMTRCD EQU   PSA+157
@NM00011 EQU   PSA+156
FLCPERA  EQU   FLCPER+1
@NM00010 EQU   FLCPER
@NM00009 EQU   PSA+151
FLCPERCD EQU   PSA+150
FLCMCNUM EQU   PSA+149
@NM00008 EQU   PSA+148
FLCTEAA  EQU   FLCTEA+1
@NM00007 EQU   FLCTEA
PSAPIPC  EQU   PSAPICOD
PSAPIMC  EQU   PSAPICOD
PSAPIPER EQU   PSAPICOD
PSARV049 EQU   FLCPICOD
FLCPILCB EQU   FLCPIILC
@NM00006 EQU   FLCPIILC
@NM00005 EQU   PSAEPPSW
FLCSVCN  EQU   PSAESPSW+2
FLCSILCB EQU   FLCSVILC
@NM00004 EQU   FLCSVILC
@NM00003 EQU   PSAESPSW
FLCEICOD EQU   PSAEEPSW+2
PSASPAD  EQU   PSAEEPSW
@NM00002 EQU   PSA+128
FLCMNPSW EQU   PSA+112
FLCPNPSW EQU   PSA+104
FLCSNPSW EQU   PSA+96
FLCENPSW EQU   PSA+88
FLCTRACE EQU   PSA+84
FLCTIMER EQU   PSA+80
FLCCVT2  EQU   PSA+76
FLCCAW   EQU   PSA+72
FLCCSW   EQU   PSA+64
FLCMOPSW EQU   PSA+48
FLCPOPSW EQU   PSA+40
FLCSOPSW EQU   PSA+32
FLCEOPSW EQU   PSA+24
@NM00001 EQU   FLCICCW2+4
FLCCVT   EQU   FLCICCW2
FLCICCW1 EQU   FLCROPSW
FLCIPPSW EQU   FLCRNPSW
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RT00213 EQU   RCSET0
@RT00215 EQU   PURGEQ
@RT00221 EQU   EREXIT
@RT00240 EQU   PROINT
@RT00269 EQU   ENADIS
@RT00273 EQU   RCSET0
@RF00273 EQU   RCSET4
@RF00290 EQU   @EL00002
@RC00321 EQU   @EL00002
@RF00329 EQU   @EL00002
@PB00002 EQU   @EL00001
@ENDDATA EQU   *
         END   AMDSAWAT,(C'PL/S-II',0502,73234)
