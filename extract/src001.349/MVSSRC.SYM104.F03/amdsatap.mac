         TITLE 'amdsatap  virtual dump cpu to cpu tap function         *
                       '
AMDSATAP CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'AMDSATAP  73.230'                                 0001
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                     0001
         BALR  @11,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,@11                                         0001
*   IF CTIOCON = ON THEN                                           0185
         LH    @10,@CH00739                                        0185
         TM    CTIOCON(@10),B'00001000'                            0185
         BNO   @RF00185                                            0185
*     IODBREG = ADDR(IODBCON);      /* OBTAIN CONSOLE IODB FOR     0186
*                                      CONSOLE REQUEST               */
         L     IODBREG,@CA00917                                    0186
*   ELSE                                                           0187
*     IF CTIODA = ON THEN                                          0187
         B     @RC00185                                            0187
@RF00185 LH    @10,@CH00739                                        0187
         TM    CTIODA(@10),B'00100000'                             0187
         BNO   @RF00187                                            0187
*       IODBREG = ADDR(IODBDA);     /* OBTAIN DA IODB FOR DA REQUEST */
         L     IODBREG,@CA00918                                    0188
*     ELSE                                                         0189
*       IF CTIOWK = ON THEN                                        0189
         B     @RC00187                                            0189
@RF00187 LH    @10,@CH00739                                        0189
         TM    CTIOWK(@10),B'00010000'                             0189
         BNO   @RF00189                                            0189
*         IODBREG = ADDR(IODBWORK); /* OBTAIN WKFILE IODB FOR WKFILE
*                                      REQUEST                       */
         L     IODBREG,@CA00920                                    0190
*       ELSE                                                       0191
*         IF CTIOOUT = ON × CTIOTERM = ON THEN                     0191
         B     @RC00189                                            0191
@RF00189 LH    @10,@CH00739                                        0191
         TM    CTIOOUT(@10),B'11000000'                            0191
         BZ    @RF00191                                            0191
*           IODBREG = ADDR(IODBOUT); /* OBTAIN OUTPUT IODB FOR OUTPUT
*                                      REQUEST                       */
         L     IODBREG,@CA00919                                    0192
*         ELSE                                                     0193
*           DO;                                                    0193
         B     @RC00191                                            0193
@RF00191 DS    0H                                                  0194
*             VCTAUDIT = TAPAUD1;   /* REQUEST INVALID CODE          */
         MVC   VCTAUDIT(2,VCCTREG),TAPAUD1                         0194
*             SVC (AUDSVC);         /* SADMP ERROR - TAKE A DUMP     */
         SVC   13                                                  0195
*           END;                                                   0196
*                                                                  0197
*   /*****************************************************************/
*   /*                                                               */
*   /* DETERMINE IF AMDSADMP IS ON A CPU IN UNI-PROCESSOR MODE       */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0197
*/*TAPCPUCK: D (YES,,NO,%MP) IODBCPU = VCTCPUC ?                     */
*/* R RETURN CODE 0                                                  */
*/*%MP: D (YES,,NO,EREXIT1) CTMP = 1 ?                               */
*/* L GETMAIN DYNAMIC STORAGE                                        */
*/* D (NO,,YES,%RCB) OBTAIN STORAGE?                                 */
*/*EREXIT1: R RETURN CODE 4                                          */
*/*%RCB: P (NORM,,RCB,EREXIT) QUEUE RCB EXIT ON VCTRCB CHAIN         */
*   IF IODBCPU = VCTCPUC THEN       /* REQUEST FOR CURRENT CPU       */
@RC00191 DS    0H                                                  0197
@RC00189 DS    0H                                                  0197
@RC00187 DS    0H                                                  0197
@RC00185 CLC   IODBCPU(2,IODBREG),VCTCPUC(VCCTREG)                 0197
         BNE   @RF00197                                            0197
*     DO;                                                          0198
*       GEN;                                                       0199
        LM  14,12,12(13)    RESTORE REGS
        SR  RETCODE,RETCODE SET 0 RETURN CODE
        BR  RETREG         RETURN
*     END;                                                         0200
*   IF CTMP ^= ON THEN                                             0201
@RF00197 LH    @10,@CH00739                                        0201
         TM    CTMP(@10),B'00000010'                               0201
         BNO   @RT00201                                            0201
*     GO TO EREXIT1;                /* CAN CHANGE CPU'S ONLY IF MP   */
*   RESPECIFY (R1,R8,RETCODE) RESTRICTED; /* RESTRICT REGS FOR     0203
*                                      GETMAIN                       */
*   SVC (GTMSVC);                   /* GET STORAGE TO BE REENTRANT   */
         SVC   4                                                   0204
*   IF RETCODE ^= 0 THEN            /* GETMAIN OKAY?                 */
         LTR   RETCODE,RETCODE                                     0205
         BZ    @RF00205                                            0205
*     DO;                                                          0206
*                                                                  0206
*EREXIT1:                                                          0207
*       GEN;                                                       0207
EREXIT1  DS    0H                                                  0207
        LM  14,12,12(13)    RESTORE REGS
        LA  RETCODE,4       SET 4 RETURN CODE
        BR  RETREG          RETURN
*     END;                                                         0208
*   R8 = R1;                        /* SET BASE FOR DYNAMIC AREA     */
@RF00205 LR    R8,R1                                               0209
*       GEN;                                                       0210
        USING @DATD,R8     ESTABLISH USING ON DYNAMIC AREA
        ST    R13,@SA00001+4 CHAIN SAVE AREA
        LA    R15,@SA00001 POINT TO SAVE AREA
*   SAVENEXT = R15;                 /* CHAIN SAVEA AREA              */
         ST    R15,SAVENEXT(,R13)                                  0211
*   R13 = R15;                      /* SET SAVE AREA PTR             */
         LR    R13,R15                                             0212
*   RESPECIFY (R1,RETCODE) UNRESTRICTED; /* RELEASE REGS             */
*   TRCBNEXT = VCTRCB;              /* SAVE CURRENT RCB              */
         MVC   TRCBNEXT(4),VCTRCB(VCCTREG)                         0214
*   TRCBSAVE = R13;                 /* SAVE AREA ADDRESS             */
         ST    R13,TRCBSAVE                                        0215
*   TRCBBASE = BASEREG;             /* SAVE BASE REG IN RCB          */
         ST    BASEREG,TRCBBASE                                    0216
*   TRCBEXIT = ADDR(EREXIT);        /* SET RETURN ADDRESS            */
         LA    @10,EREXIT                                          0217
         ST    @10,TRCBEXIT                                        0217
*   TRCBSTOR = 0;                   /* INDICATE NOT TRANSLATED       */
         SR    @10,@10                                             0218
         ST    @10,TRCBSTOR                                        0218
*                                                                  0219
*   /*****************************************************************/
*   /*                                                               */
*   /* NOW THE TARGET CPU STATE MUST BE DETERMINED. IF THIS IS THE   */
*   /* IPLED CPU, THE STATE WAS INITIALIZED BY IPL. IF THIS IS NOT   */
*   /* THE IPLED CPU WE WILL RESET THE STATE ONLY ON AN INITIAL      */
*   /* AMDSASIO REQUEST. STATE INITIALIZATION QUIESCES I/O AND RESETS*/
*   /* THE STATE OF THE PREFIX REGISTER                              */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0219
*/* D (YES,%SAVE,NO,) REQUEST FOR IPLED CPU                          */
*/* D (YES,%SAVE,NO,) CTIORSET = ON ?                                */
*/* L SIGP INITIAL PROGRAM RESET TO INITIALIZE TARGET CPU            */
*/* D (YES,EREXIT,NO,%SAVE) ERROR ON RESET ?                         */
*   IF IODBCPU ^= CTCPUI & CTIORSET = ON THEN                      0219
         LH    @10,IODBCPU(,IODBREG)                               0219
         LH    @15,@CH00739                                        0219
         CH    @10,CTCPUI(,@15)                                    0219
         BE    @RF00219                                            0219
         TM    CTIORSET(@15),B'00000010'                           0219
         BNO   @RF00219                                            0219
*     DO;                           /* IF NOT HEADED TOWARD IPLED CPU
*                                      AND THIS IS A RESET REQUEST 0220
*                                      THEN CPU MUST BE INITIALIZED  */
*       RESPECIFY (R1,R2) RESTRICTED;                              0221
*       R2 = IODBCPU;               /* SET UP CPU ADDRESS            */
         LR    R2,@10                                              0222
*       GEN REFS(R2,IPRORDER) SETS(R1);                            0223
        SIGP R1,R2,IPRORDER RESET TARGET CPU
*       BC (7,EREXIT);              /* IF ERROR - IGNORE REQUEST     */
         BC    7,EREXIT                                            0224
*     END;                                                         0225
*                                                                  0226
*   /*****************************************************************/
*   /*                                                               */
*   /* NOW WE CAN PREPARE TO ENTER THE TARGET CPU. FIRST ALL STATUS  */
*   /* MUST BE PERSERVED                                             */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0226
*/*%SAVE: P SAVE CONTROL REGS IN LOWCRS                              */
*/* P SAVE GPR'S OF TAP IN LOWGRS                                    */
*/* P SAVE RESTART PSW                                               */
*       GEN SETS(LOWCRS,LOWGRS);                                   0226
@RF00219 DS    0H                                                  0226
        STCTL R0,R15,LOWCRS SAVE CONTROL REGISTERS OF TAP
        STM   R0,R15,LOWGRS SAVE GENERAL PURPOSE REGISTERS OF TAP
*   SVERNPSW = FLCRNPSW;            /* SAVE RESTART PSW              */
         MVC   SVERNPSW(8),FLCRNPSW                                0227
*                                                                  0228
*   /*****************************************************************/
*   /*                                                               */
*   /* ISSUE SIGP RESTART ORDER, IF TAP RESTARTS SUCCESSFULLY ON THE */
*   /* TARGET CPU - THIS CODE ENTERS A WAIT STATE. ELSE THE OTHER CPU*/
*   /* WILL BE STOPPED AND AN ERROR RETURN MADE                      */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0228
*/*%TAPRSTR: P SET TAPRSTRT FOR RESTART OPERATION                    */
*/* L (CPU1,%CPU1,CPU2,%CPU2) ISSUE SIGP RESTART TO START AMDSATAP ON
*/*TARGET CPU                                                        */
*/*%CPU1: N THIS CODE IS EXECUTING ON ORIGINAL CPU                   */
*/* D (YES,%WAIT,NO,%STOP) WAS RESTART SUCCESSFUL ?                  */
*/* D (NO,%STOP,YES,%TAPRSTR) CPU BUSY ?                             */
*/*%WAIT: R LPSW WAIT STATE ON CPU 1                                 */
*/*%STOP: L (,EREXIT) STOP TARGET CPU TO INSURE IT IS QUIESCED       */
*   R2 = IODBCPU;                   /* SET UP TARGET CPU ADDRESS     */
         LH    R2,IODBCPU(,IODBREG)                                0228
*   FLCRNPSW = TAPRNPSW;                                           0229
*                                                                  0229
         MVC   FLCRNPSW(8),TAPRNPSW                                0229
*SIGPSTRT:                                                         0230
*       GEN REFS(R2,RSTORDER)SETS(R1)FLOWS(TAPTGCPU);              0230
SIGPSTRT DS    0H                                                  0230
        SIGP R1,R2,RSTORDER RESTART TO START OTHER CPU
*   BC (5,RSTERROR);                /* IF ERROR ON RESTART TERMINATE
*                                      REQUEST                       */
         BC    5,RSTERROR                                          0231
*   BC (2,SIGPSTRT);                /* IF CPU STILL BUSY WITH INITIAL
*                                      PROGRAM RESET,RE-ISSUE RESTART*/
         BC    2,SIGPSTRT                                          0232
*   LPSW (TAPWAIT);                 /* ENTER WAIT STATE ON THIS CPU  */
*                                                                  0233
         LPSW  TAPWAIT                                             0233
*RSTERROR:                                                         0234
*       GEN REFS(R2,STPORDER) SETS(R1);                            0234
RSTERROR DS    0H                                                  0234
        SIGP R1,R2,STPORDER SIGP STOP CPU ORDER
*   FLCRNPSW = SVERNPSW;            /* RESTORE RESTART PSW IN LOW  0235
*                                      CORE                          */
         MVC   FLCRNPSW(8),SVERNPSW                                0235
*   RESPECIFY (R1,R2) UNRESTRICTED;                                0236
*   GO TO EREXIT;                   /* REQUEST COULD NOT BE PERFORMED*/
         B     EREXIT                                              0237
*                                                                  0238
*   /*****************************************************************/
*   /*                                                               */
*   /* WE ARE INDEED ON THE TARGET CPU. THIS CODE EXECUTES ON A      */
*   /* DIFFERENT CPU FROM ITS CALLER'S. SET UP AMDSADMP ON THIS CPU  */
*   /* TO RUN AS NORMAL                                              */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0238
*/*%CPU2: N THIS CODE IS EXECUTING ON TARGET CPU                     */
*/* N IF RESTART IS UNSUCCESSFUL THIS PATH IS NOT EXECUTED           */
*/* P LOAD GPR'S FROM LOWGRS                                         */
*/* P LOAD CONTROL REGISTERS FROM LOWCRS                             */
*/* P PURGE THE CPU LOOK-ASIDE BUFFER                                */
*/* P RESTORE ORIGINAL RESTART PSW                                   */
*/* P ENABLE FOR EXTERNAL INTERRUPTS                                 */
*/* P (,TAPEXIT) UPDATE VCTCPUC WITH CURRENT CPU ADDRESS             */
*                                                                  0238
*TAPTGCPU:                                                         0238
*       GEN REFS(LOWCRS,LOWGRS)                                    0238
*       SETS(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,R12,R13,R14,R15);
TAPTGCPU DS    0H                                                  0238
        LCTL R0,R15,LOWCRS RESTORE CONTROL REGISTERS
        LM R0,R15,LOWGRS       RESTORE GENERAL PURPOSE REGISTERS
        PTLB PURGE HARDWARE TRANSLATION BUFFER
*   FLCRNPSW = SVERNPSW;            /* RESTORE RESTART PSW           */
         MVC   FLCRNPSW(8),SVERNPSW                                0239
*   VCTCPUC = IODBCPU;              /* SET NEW CURRENT CPU ADDRESS   */
         MVC   VCTCPUC(2,VCCTREG),IODBCPU(IODBREG)                 0240
*   SSM (PGEMASK);                  /* ENABLE FOR EXTERNAL INTERRUPTS*/
         SSM   @CB00741                                            0241
*   PFTAPCPU = PFTAPCPU + 1;        /* INCREMENT NUMBER OF TIMES HAVE
*                                      SWITCHED CPU'S                */
*                                                                  0242
         LA    @10,1                                               0242
         AH    @10,PFTAPCPU                                        0242
         STH   @10,PFTAPCPU                                        0242
*                                                                  0243
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS IS THE TEMINATION EXIT CODE. EREXIT SETS AN ERROR RETURN */
*   /* CODE WHILE TAPEXIT SETS A ZERO RETURN CODE                    */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0243
*/*TAPEXIT: P (,TAPREST) RETURN CODE = 0 IN SAVE AREA                */
*/*EREXIT: P RETURN CODE = 4 IN SAVE AREA                            */
*/*TAPREST: P DEQUEUE RCB FROM VCTRCB                                */
*/* L FREEMAIN DYNAMIC AREA                                          */
*/* P RESTORE CALLER'S REGISTERS                                     */
*/* R RETURN TO CALLER                                               */
*/*AMDSATAP: END                                                     */
*                                                                  0243
*TAPEXIT:                                                          0243
*   SAVEBACK -> SAVER15 = 0;        /* SET ZERO RETURN CODE          */
TAPEXIT  L     @10,SAVEBACK(,R13)                                  0243
         SR    @15,@15                                             0243
         ST    @15,SAVER15(,@10)                                   0243
*   GO TO TAPREST;                  /* RETURN TO CALLER              */
*                                                                  0244
         B     TAPREST                                             0244
*EREXIT:                                                           0245
*   SAVEBACK -> SAVER15 = 4;        /* ERROR RETURN CODE             */
*                                                                  0245
EREXIT   L     @10,SAVEBACK(,R13)                                  0245
         MVC   SAVER15(4,@10),@CF00045                             0245
*TAPREST:                                                          0246
*   VCTRCB = TRCBNEXT;              /* DEQUEUE TAP'S RCB             */
TAPREST  MVC   VCTRCB(4,VCCTREG),TRCBNEXT                          0246
*   CTIORSET = OFF;                 /* INSURE RESET REQUEST IS RESET */
         LH    @10,@CH00739                                        0247
         NI    CTIORSET(@10),B'11111101'                           0247
*   RESPECIFY R1 RESTRICTED;        /* RESTRICT FREEMAIN REG         */
*   R1 = R8;                        /* SET AREA TO FREE              */
         LR    R1,R8                                               0249
*   SVC (FRMSVC);                   /* FREE STORAGE                  */
         SVC   5                                                   0250
*   RESPECIFY R1 UNRESTRICTED;      /* RELEASE REG                   */
*   RETURN;                                                        0252
@EL00001 L     @13,4(,@13)                                         0252
@EF00001 DS    0H                                                  0252
@ER00001 LM    @14,@12,12(@13)                                     0252
         BR    @14                                                 0252
*   END AMDSATAP                    /* RETURN                        */
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.      *
*/*%INCLUDE SYSLIB  (IHAPSA  )                                        *
*/*%INCLUDE SYSLIB  (AMDSARMK)                                        *
*;                                                                 0253
@DATA    DS    0H
@CH00739 DC    H'28672'
@DATD    DSECT
         DS    0F
@SA00001 DS    18F
AMDSATAP CSECT
         DS    0F
@CF00045 DC    F'4'
@DATD    DSECT
         DS    0D
TAPRCB   DS    CL20
         ORG   TAPRCB
TRCBNEXT DS    AL4
TRCBSTOR DS    AL4
TRCBSAVE DS    AL4
TRCBEXIT DS    AL4
TRCBBASE DS    AL4
         ORG   TAPRCB+20
SVERNPSW DS    CL8
AMDSATAP CSECT
         NOPR  ((@ENDDATD-@DATD)/257*16)
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
@CA00917 DC    A(IODBCON)
@CA00918 DC    A(IODBDA)
@CA00919 DC    A(IODBOUT)
@CA00920 DC    A(IODBWORK)
         DS    0D
@CB00741 DC    X'01'
TAPAUD1  DS    CL2
         ORG   TAPAUD1
@NM00055 DC    X'01'
@NM00056 DC    AL1(2)
         ORG   TAPAUD1+2
         DS    CL1
TAPRNPSW DS    CL8
         ORG   TAPRNPSW
@NM00057 DC    X'000C0000'
@NM00058 DC    AL4(TAPTGCPU)
         ORG   TAPRNPSW+8
         DS    CL4
TAPWAIT  DC    X'000E000000FFFFFF'
AMDSATAP CSECT
STPORDER EQU 5 SIGP STOP ORDER
RSTORDER EQU 6 SIGP RESTART ORDER
IPRORDER EQU 7 SIGP INITIAL PGM RESET ORDER
AMDSATAP CSECT
         DS   0H
TAPPATCH DC ((@DATA-@PSTART)/20)X'00'
@DATD    DSECT
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
AMDSATAP CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
VCCTREG  EQU   @12
RETCODE  EQU   @15
BASEREG  EQU   @11
R0       EQU   @00
R1       EQU   @01
R2       EQU   @02
R3       EQU   @03
R4       EQU   @04
R5       EQU   @05
R6       EQU   @06
R7       EQU   @07
R8       EQU   @08
R9       EQU   @09
R10      EQU   @10
R11      EQU   @11
R12      EQU   @12
R13      EQU   @13
R14      EQU   @14
R15      EQU   @15
IODBREG  EQU   @09
RETREG   EQU   @14
         EXTRN IODBCON
         EXTRN IODBDA
         EXTRN IODBOUT
         EXTRN IODBWORK
PSA      EQU   0
FLCRNPSW EQU   PSA
FLCROPSW EQU   PSA+8
FLCICCW2 EQU   PSA+16
PSAEEPSW EQU   PSA+132
PSAESPSW EQU   PSA+136
FLCSVILC EQU   PSAESPSW+1
PSAEPPSW EQU   PSA+140
FLCPIILC EQU   PSAEPPSW+1
FLCPICOD EQU   PSAEPPSW+2
PSAPICOD EQU   FLCPICOD+1
FLCTEA   EQU   PSAEPPSW+4
FLCPER   EQU   PSA+152
FLCMCLA  EQU   PSA+168
FLCIOEL  EQU   FLCMCLA+4
FLCIOA   EQU   FLCMCLA+16
FLCFSA   EQU   FLCMCLA+80
PSASUPER EQU   PSA+552
PSASUP1  EQU   PSASUPER
PSASUP2  EQU   PSASUPER+1
PSASUP3  EQU   PSASUPER+2
PSASUP4  EQU   PSASUPER+3
PSACLHT  EQU   PSA+640
PSALKSA  EQU   PSA+696
PSAHLHI  EQU   PSA+760
PSADSSFL EQU   PSA+836
PSADSSF1 EQU   PSADSSFL
PSADSSF3 EQU   PSADSSFL+2
PSADSSF4 EQU   PSADSSFL+3
PSARSVT  EQU   PSA+896
DEBUGLSD EQU   3286
PFTAPCPU EQU   DEBUGLSD+4
SADMPLSD EQU   3312
LOWGRS   EQU   SADMPLSD+32
LOWCRS   EQU   SADMPLSD+96
ARB      EQU   0
BCTH     EQU   0
BCT      EQU   0
BCTLPID  EQU   BCT+28
BCTFLGT  EQU   BCT+44
BCTFLGI  EQU   BCT+45
CCT      EQU   0
CTFLG1   EQU   CCT+1
CTMP     EQU   CTFLG1
CTFLG2   EQU   CCT+2
CTCPUI   EQU   CCT+40
CTLOWFLG EQU   CCT+48
CTDMPTYP EQU   CCT+52
CTIOTYPE EQU   CTDMPTYP
CTIOTERM EQU   CTIOTYPE
CTIOOUT  EQU   CTIOTYPE
CTIODA   EQU   CTIOTYPE
CTIOWK   EQU   CTIOTYPE
CTIOCON  EQU   CTIOTYPE
CTIORSET EQU   CTIOTYPE
CTCONFLG EQU   CTDMPTYP+2
CTBUFTYP EQU   CTDMPTYP+3
CTPRMT1  EQU   CTDMPTYP+24
CTPRMT2  EQU   CTDMPTYP+26
CCW      EQU   0
CCWFLAGS EQU   CCW+4
CSW      EQU   0
CSWKEY00 EQU   CSW
CSWUSTAT EQU   CSW+4
CSWCSTAT EQU   CSW+5
DSCE     EQU   0
IODB     EQU   0
IODBFLAG EQU   IODB+8
IODBCPU  EQU   IODB+14
IODBCCHH EQU   IODB+32
IODBSRCH EQU   IODBCCHH+3
MDCE     EQU   0
MDCB     EQU   0
MDCBGRS  EQU   MDCB+16
MDCBFLGS EQU   MDCB+86
PSW      EQU   0
PSWSM    EQU   PSW
@NM00047 EQU   PSW+1
PSWCCPM  EQU   PSW+2
@NM00050 EQU   PSW+3
PTRT     EQU   0
PTRTRSA  EQU   0
RCB      EQU   0
VCCT     EQU   0
VCTRCB   EQU   VCCT+4
VCTRECSN EQU   VCCT+8
VCTFLGS  EQU   VCCT+9
VCTMDCE  EQU   VCCT+12
VCTDSCE  EQU   VCCT+20
VCTBCTH  EQU   VCCT+24
VCTCPUC  EQU   VCCT+46
VCTAUDIT EQU   VCCT+62
VCTCBID  EQU   VCCT+64
SDL      EQU   0
REGLOCAL EQU   0
SAVEFORM EQU   0
SAVEBACK EQU   SAVEFORM+4
SAVENEXT EQU   SAVEFORM+8
SAVER15  EQU   SAVEFORM+16
PTRTVSA  EQU   0
PSARSVTE EQU   PSARSVT
CTLOWDMP EQU   CTDMPTYP
FLC      EQU   PSA
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
CTADDRE  EQU   CTLOWDMP+4
CTADDRS  EQU   CTLOWDMP
PSARSAV  EQU   PSARSVTE+60
PSARSTK  EQU   PSARSVTE+56
PSAESAV3 EQU   PSARSVTE+52
PSAESTK3 EQU   PSARSVTE+48
PSAESAV2 EQU   PSARSVTE+44
PSAESTK2 EQU   PSARSVTE+40
PSAESAV1 EQU   PSARSVTE+36
PSAESTK1 EQU   PSARSVTE+32
PSAPSAV  EQU   PSARSVTE+28
PSAPSTK  EQU   PSARSVTE+24
PSAMSAV  EQU   PSARSVTE+20
PSAMSTK  EQU   PSARSVTE+16
PSASSAV  EQU   PSARSVTE+12
PSASSTK  EQU   PSARSVTE+8
PSANSTK  EQU   PSARSVTE+4
PSACSTK  EQU   PSARSVTE
SAVER12  EQU   SAVEFORM+68
SAVER11  EQU   SAVEFORM+64
SAVER10  EQU   SAVEFORM+60
SAVER9   EQU   SAVEFORM+56
SAVER8   EQU   SAVEFORM+52
SAVER7   EQU   SAVEFORM+48
SAVER6   EQU   SAVEFORM+44
SAVER5   EQU   SAVEFORM+40
SAVER4   EQU   SAVEFORM+36
SAVER3   EQU   SAVEFORM+32
SAVER2   EQU   SAVEFORM+28
SAVER1   EQU   SAVEFORM+24
SAVER0   EQU   SAVEFORM+20
SAVER14  EQU   SAVEFORM+12
SAVENAME EQU   SAVEFORM+1
SAVEID   EQU   SAVEFORM
REGL15   EQU   REGLOCAL+60
REGL14   EQU   REGLOCAL+56
REGL13   EQU   REGLOCAL+52
REGL12   EQU   REGLOCAL+48
REGL11   EQU   REGLOCAL+44
REGL10   EQU   REGLOCAL+40
REGL9    EQU   REGLOCAL+36
REGL8    EQU   REGLOCAL+32
REGL7    EQU   REGLOCAL+28
REGL6    EQU   REGLOCAL+24
REGL5    EQU   REGLOCAL+20
REGL4    EQU   REGLOCAL+16
REGL3    EQU   REGLOCAL+12
REGL2    EQU   REGLOCAL+8
REGL1    EQU   REGLOCAL+4
REGL0    EQU   REGLOCAL
SDLSPN   EQU   SDL+1
SDLNUM   EQU   SDL
VCTVCCTV EQU   VCCT+108
VCTCCTV  EQU   VCCT+104
@NM00054 EQU   VCCT+102
VCTEXTRA EQU   VCCT+100
VCTCPOUT EQU   VCCT+96
VCTSVCTB EQU   VCCT+92
VCTPGT   EQU   VCCT+88
VCTLPA   EQU   VCCT+84
VCTCBADR EQU   VCCT+80
VCTJBNME EQU   VCCT+72
VCTCBIDN EQU   VCTCBID+7
@NM00053 EQU   VCTCBID
VCTASID  EQU   VCCT+60
VCTPTRT  EQU   VCCT+56
VCTMASCB EQU   VCCT+52
VCTASCB  EQU   VCCT+48
VCTWKC   EQU   VCCT+45
VCTWKHI  EQU   VCCT+44
VCTSUBPL EQU   VCCT+40
VCTARB   EQU   VCCT+36
VCTIODB  EQU   VCCT+32
VCTBCTC  EQU   VCCT+28
VCTSTOR  EQU   VCCT+16
VCTRECVA EQU   VCCT+10
@NM00052 EQU   VCTFLGS
VCTLRCLM EQU   VCTFLGS
VCTARCLM EQU   VCTFLGS
VCTASMIC EQU   VCTFLGS
VCTMEMIN EQU   VCTFLGS
VCTSADMP EQU   VCTFLGS
@NM00051 EQU   VCTRECSN
VCTRSMR  EQU   VCTRECSN
VCTEXIR  EQU   VCTRECSN
VCTUPDR  EQU   VCTRECSN
VCTPGIR  EQU   VCTRECSN
VCTVCT   EQU   VCCT
RCBBASE  EQU   RCB+16
RCBEXIT  EQU   RCB+12
RCBSAVE  EQU   RCB+8
RCBSTOR  EQU   RCB+4
RCBNEXT  EQU   RCB
PTRTVS   EQU   PTRT+1032
PTRTRS   EQU   PTRT+8
PTRTLGID EQU   PTRT+4
PTRTPTRT EQU   PTRT
PSWEND   EQU   PSW+8
PSWIA    EQU   PSW+4
PSWSP    EQU   @NM00050
PSWSIG   EQU   PSWCCPM
PSWEU    EQU   PSWCCPM
PSWDO    EQU   PSWCCPM
PSWFPO   EQU   PSWCCPM
@NM00049 EQU   PSWCCPM
@NM00048 EQU   PSWCCPM
PSWPRBLM EQU   @NM00047
PSWAIT   EQU   @NM00047
PSWMCH   EQU   @NM00047
PSWMODE  EQU   @NM00047
PSWKEY   EQU   @NM00047
PSWXTRNL EQU   PSWSM
PSWIO    EQU   PSWSM
PSWDAT   EQU   PSWSM
@NM00046 EQU   PSWSM
@NM00045 EQU   PSWSM
@NM00044 EQU   PSWSM
PSWPER   EQU   PSWSM
@NM00043 EQU   PSWSM
@NM00042 EQU   MDCB+87
@NM00041 EQU   MDCBFLGS
MDCBDUMP EQU   MDCBFLGS
MDCBASMI EQU   MDCBFLGS
MDCBPI   EQU   MDCB+84
MDCBSTOR EQU   MDCB+80
MDCBGR15 EQU   MDCBGRS+60
MDCBGR14 EQU   MDCBGRS+56
MDCBGR13 EQU   MDCBGRS+52
MDCBGR12 EQU   MDCBGRS+48
MDCBGR11 EQU   MDCBGRS+44
MDCBGR10 EQU   MDCBGRS+40
MDCBGR9  EQU   MDCBGRS+36
MDCBGR8  EQU   MDCBGRS+32
MDCBGR7  EQU   MDCBGRS+28
MDCBGR6  EQU   MDCBGRS+24
MDCBGR5  EQU   MDCBGRS+20
MDCBGR4  EQU   MDCBGRS+16
MDCBGR3  EQU   MDCBGRS+12
MDCBGR2  EQU   MDCBGRS+8
MDCBGR1  EQU   MDCBGRS+4
MDCBGR0  EQU   MDCBGRS
MDCBPSW  EQU   MDCB+8
MDCBNEXT EQU   MDCB+4
MDCBMDCB EQU   MDCB
MDCEAVIL EQU   MDCE+8
MDCEACTV EQU   MDCE+4
MDCEMDCE EQU   MDCE
IODBSENS EQU   IODB+40
IODBR    EQU   IODBCCHH+7
IODBHH   EQU   IODBSRCH+2
IODBCC   EQU   IODBSRCH
IODBSEEK EQU   IODBCCHH+1
IODBM    EQU   IODBCCHH
IODBCSW  EQU   IODB+24
IODBCAW  EQU   IODB+20
IODBBCT  EQU   IODB+16
IODBTYPE EQU   IODB+13
IODBCLAS EQU   IODB+12
IODBDEV  EQU   IODB+10
@NM00040 EQU   IODBFLAG+1
IODBSTRT EQU   IODBFLAG
IODBCONW EQU   IODBFLAG
IODBACTV EQU   IODBFLAG
IODBHALT EQU   IODBFLAG
IODBIOC  EQU   IODBFLAG
IODBINT  EQU   IODBFLAG
IODBPTRM EQU   IODBFLAG
IODBTERM EQU   IODBFLAG
IODBIDEN EQU   IODB+4
IODBIODB EQU   IODB
DSCETEND EQU   DSCE+20
DSCETCUR EQU   DSCE+16
DSCETBEG EQU   DSCE+12
DSCENEXT EQU   DSCE+8
DSCEBEGN EQU   DSCE+4
DSCEDSCE EQU   DSCE
CSWCNT   EQU   CSW+6
CSWCHC   EQU   CSWCSTAT
CSWICC   EQU   CSWCSTAT
CSWCCC   EQU   CSWCSTAT
CSWCDC   EQU   CSWCSTAT
CSWPTC   EQU   CSWCSTAT
CSWPGC   EQU   CSWCSTAT
CSWIL    EQU   CSWCSTAT
CSWPCI   EQU   CSWCSTAT
CSWUE    EQU   CSWUSTAT
CSWUC    EQU   CSWUSTAT
CSWDE    EQU   CSWUSTAT
CSWCE    EQU   CSWUSTAT
CSWBUSY  EQU   CSWUSTAT
CSWCUE   EQU   CSWUSTAT
CSWSTMOD EQU   CSWUSTAT
CSWATTN  EQU   CSWUSTAT
CSWCADDR EQU   CSW+1
@NM00039 EQU   CSWKEY00
CSWKEY   EQU   CSWKEY00
CCWCNT   EQU   CCW+6
@NM00038 EQU   CCW+5
@NM00037 EQU   CCWFLAGS
CCWIDA   EQU   CCWFLAGS
CCWPCI   EQU   CCWFLAGS
CCWSKIP  EQU   CCWFLAGS
CCWSLI   EQU   CCWFLAGS
CCWCC    EQU   CCWFLAGS
CCWDC    EQU   CCWFLAGS
CCWDADDR EQU   CCW+1
CCWCMD   EQU   CCW
CTHWMAX  EQU   CTDMPTYP+29
CTHWM    EQU   CTDMPTYP+28
CTPRMT2X EQU   CTPRMT2+1
CTPRMT2Y EQU   CTPRMT2
CTPRMT1X EQU   CTPRMT1+1
CTPRMT1Y EQU   CTPRMT1
CTVCCT   EQU   CTDMPTYP+20
CTEOR    EQU   CTDMPTYP+16
CTCOMMIO EQU   CTDMPTYP+12
CTLWKAD  EQU   CTDMPTYP+8
CTCONSOL EQU   CTDMPTYP+4
@NM00036 EQU   CTBUFTYP
CTDUMP   EQU   CTBUFTYP
CTLSQA   EQU   CTBUFTYP
CTASM    EQU   CTBUFTYP
CTPGT    EQU   CTBUFTYP
CTWKFLE  EQU   CTBUFTYP
@NM00035 EQU   CTBUFTYP
@NM00034 EQU   CTCONFLG
CTREAD   EQU   CTCONFLG
CTMSGOUT EQU   CTCONFLG
@NM00033 EQU   CTDMPTYP+1
@NM00032 EQU   CTIOTYPE
CTIOINT  EQU   CTIOTYPE
CTEBCOPR EQU   CCT+49
@NM00031 EQU   CTLOWFLG
CTWKSTUS EQU   CTLOWFLG
CTINIT   EQU   CTLOWFLG
CTFP     EQU   CTLOWFLG
CTVIRTD  EQU   CTLOWFLG
CTEBCOPD EQU   CCT+45
CTCONTYP EQU   CCT+44
CTOUTAD  EQU   CCT+42
CTERBCON EQU   CCT+36
CTERBTPE EQU   CCT+32
CTERBDA  EQU   CCT+28
CTCCHHW  EQU   CCT+24
CTCCHHE  EQU   CCT+20
CTCCHHS  EQU   CCT+16
CTPGECNT EQU   CCT+15
CTCCHHR  EQU   CCT+8
CTINADDR EQU   CCT+6
CTSENSE  EQU   CCT+4
CTDEVTYP EQU   CCT+3
@NM00030 EQU   CTFLG2
CTALTCON EQU   CTFLG2
CTWKDONE EQU   CTFLG2
CTVIRTR  EQU   CTFLG2
CTNOSTAT EQU   CTFLG2
CTPGEFLT EQU   CTFLG2
CTSTOR   EQU   CTFLG2
CTDUPSW  EQU   CTFLG2
CTERREC  EQU   CTFLG1
@NM00029 EQU   CTFLG1
CTDEFO   EQU   CTFLG1
CTWORK   EQU   CTFLG1
CTMORTPE EQU   CTFLG1
CTDEVICE EQU   CTFLG1
CTERROR  EQU   CTFLG1
CTWAIT   EQU   CCT
@NM00028 EQU   BCT+46
BCTRECLM EQU   BCTFLGI
BCTIOERR EQU   BCTFLGI
BCTALLOC EQU   BCTFLGI
BCTCOMP  EQU   BCTFLGI
@NM00027 EQU   BCTFLGT
BCTPGTF  EQU   BCTFLGT
BCTDUMP  EQU   BCTFLGT
BCTLSQA  EQU   BCTFLGT
BCTASM   EQU   BCTFLGT
BCTPGT   EQU   BCTFLGT
BCTWKFLE EQU   BCTFLGT
@NM00026 EQU   BCTFLGT
BCTRBA   EQU   BCT+40
BCTAMB   EQU   BCT+36
@NM00025 EQU   BCTLPID+4
BCTLGN   EQU   BCTLPID
BCTMDCB  EQU   BCT+24
BCTPGTE  EQU   BCT+20
BCTRADDR EQU   BCT+16
BCTVADDR EQU   BCT+12
BCTASID  EQU   BCT+10
BCTKEY2  EQU   BCT+9
BCTKEY1  EQU   BCT+8
BCTNEXT  EQU   BCT+4
BCTBCT   EQU   BCT
BCTHLAST EQU   BCTH+8
BCTHFRST EQU   BCTH+4
BCTHBCTH EQU   BCTH
ARBADDRE EQU   ARB+4
ARBADDRB EQU   ARB
GTMSAVE  EQU   SADMPLSD+684
GTMNAME  EQU   SADMPLSD+680
FRMSAVE  EQU   SADMPLSD+580
FRMNAME  EQU   SADMPLSD+576
AUDSAVE  EQU   SADMPLSD+476
AUDNAME  EQU   SADMPLSD+472
IOISAVE  EQU   SADMPLSD+372
IOINAME  EQU   SADMPLSD+368
PGISAVE  EQU   SADMPLSD+268
PGINAME  EQU   SADMPLSD+264
SVISAVE  EQU   SADMPLSD+164
SVINAME  EQU   SADMPLSD+160
SAVEDUMP EQU   SADMPLSD+24
AUDPSW   EQU   SADMPLSD+16
SVIRPSW  EQU   SADMPLSD+8
PSWSADMP EQU   SADMPLSD
PFIOIRST EQU   DEBUGLSD+24
PFWATOIP EQU   DEBUGLSD+22
PFWATDE  EQU   DEBUGLSD+20
PFWATEN  EQU   DEBUGLSD+18
PFWATENW EQU   DEBUGLSD+16
PFSIOWAT EQU   DEBUGLSD+14
PFSIOPCI EQU   DEBUGLSD+12
PFSIOOUT EQU   DEBUGLSD+10
PFSIOWK  EQU   DEBUGLSD+8
PFSIODA  EQU   DEBUGLSD+6
PFBUFWAT EQU   DEBUGLSD+2
PFTRCLM  EQU   DEBUGLSD
@NM00024 EQU   PSA+3412
PSASTAK  EQU   PSA+3072
@NM00023 EQU   PSA+1024
PSAUSEND EQU   PSA+1024
PSARV060 EQU   PSA+1020
PSARV059 EQU   PSA+1018
PSASVC13 EQU   PSA+1016
PSALSFCC EQU   PSA+1012
PSASFACC EQU   PSA+1008
PSASTOP  EQU   PSA+992
PSASTART EQU   PSA+976
PSARSPSW EQU   PSA+968
PSASRPSW EQU   PSA+960
PSARV045 EQU   PSA+892
PSARV044 EQU   PSA+888
PSARV043 EQU   PSA+884
PSARV042 EQU   PSA+880
PSARV041 EQU   PSA+876
PSARV040 EQU   PSA+872
PSARV025 EQU   PSA+868
PSADSSED EQU   PSA+868
PSADSSPR EQU   PSA+864
PSADSSFW EQU   PSA+860
PSADSS14 EQU   PSA+856
PSADSSPP EQU   PSA+848
PSADSSRP EQU   PSA+840
PSADSS05 EQU   PSADSSF4
PSADSS10 EQU   PSADSSF4
PSADSSVE EQU   PSADSSF4
PSADSSDE EQU   PSADSSF4
PSADSSC0 EQU   PSADSSF4
PSADSSIE EQU   PSADSSF4
PSADSS12 EQU   PSADSSF4
PSADSSRC EQU   PSADSSF4
PSARV057 EQU   PSADSSF3
PSARV056 EQU   PSADSSF3
PSARV055 EQU   PSADSSF3
PSARV054 EQU   PSADSSF3
PSADSSRW EQU   PSADSSF3
PSADSSNM EQU   PSADSSF3
PSADSSES EQU   PSADSSF3
PSADSSGP EQU   PSADSSF3
PSADSSF2 EQU   PSADSSFL+1
PSADSSPI EQU   PSADSSF1
PSADSSOI EQU   PSADSSF1
PSADSSSP EQU   PSADSSF1
PSADSSTP EQU   PSADSSF1
PSADSSDW EQU   PSADSSF1
PSADSSDD EQU   PSADSSF1
PSADSSDM EQU   PSADSSF1
PSADSSMV EQU   PSADSSF1
PSADSSTS EQU   PSA+816
PSADSSWK EQU   PSA+812
PSADSSR3 EQU   PSA+808
PSADSSR2 EQU   PSA+804
PSADSSRS EQU   PSA+800
PSASTOR  EQU   PSA+796
PSARV058 EQU   PSA+794
PSAVSTAP EQU   PSA+792
PSAWKVAP EQU   PSA+788
PSAWKRAP EQU   PSA+784
PSAMCHIC EQU   PSA+783
PSAMODE  EQU   PSA+782
PSASYMSK EQU   PSA+781
PSAMCHFL EQU   PSA+780
PSACR0   EQU   PSA+776
PSAPSWSV EQU   PSA+768
PSALITA  EQU   PSA+764
PSACLHS  EQU   PSAHLHI
PSALKR15 EQU   PSALKSA+60
PSALKR14 EQU   PSALKSA+56
PSALKR13 EQU   PSALKSA+52
PSALKR12 EQU   PSALKSA+48
PSALKR11 EQU   PSALKSA+44
PSALKR10 EQU   PSALKSA+40
PSALKR9  EQU   PSALKSA+36
PSALKR8  EQU   PSALKSA+32
PSALKR7  EQU   PSALKSA+28
PSALKR6  EQU   PSALKSA+24
PSALKR5  EQU   PSALKSA+20
PSALKR4  EQU   PSALKSA+16
PSALKR3  EQU   PSALKSA+12
PSALKR2  EQU   PSALKSA+8
PSALKR1  EQU   PSALKSA+4
PSALKR0  EQU   PSALKSA
PSARV023 EQU   PSACLHT+52
PSALOCAL EQU   PSACLHT+48
PSACMSL  EQU   PSACLHT+44
PSAOPTL  EQU   PSACLHT+40
PSATPACL EQU   PSACLHT+36
PSATPDNL EQU   PSACLHT+32
PSATPNCL EQU   PSACLHT+28
PSAIOSLL EQU   PSACLHT+24
PSAIOSUL EQU   PSACLHT+20
PSAIOSCL EQU   PSACLHT+16
PSAIOSSL EQU   PSACLHT+12
PSASALCL EQU   PSACLHT+8
PSAASML  EQU   PSACLHT+4
PSADISPL EQU   PSACLHT
PSASRSA  EQU   PSA+636
PSARV050 EQU   PSA+634
PSADSSGO EQU   PSA+633
PSARECUR EQU   PSA+632
PSAHLHIS EQU   PSA+628
PSAIPCSA EQU   PSA+624
@NM00022 EQU   PSA+621
PSAIPCDM EQU   PSA+620
PSAIPCD  EQU   PSA+616
@NM00021 EQU   PSA+613
PSAIPCRM EQU   PSA+612
PSAIPCR  EQU   PSA+608
PSAMCHEX EQU   PSA+600
PSAMPSW  EQU   PSA+592
PSAEXPS2 EQU   PSA+584
PSAEXPS1 EQU   PSA+576
PSAPIREG EQU   PSA+572
PSARSREG EQU   PSA+568
PSAGPREG EQU   PSA+556
PSARV022 EQU   PSASUP4
PSARV021 EQU   PSASUP4
PSARV020 EQU   PSASUP4
PSARV019 EQU   PSASUP4
PSARV018 EQU   PSASUP4
PSARV017 EQU   PSASUP4
PSARV016 EQU   PSASUP4
PSARV015 EQU   PSASUP4
PSARV014 EQU   PSASUP3
PSARV013 EQU   PSASUP3
PSARV012 EQU   PSASUP3
PSARV011 EQU   PSASUP3
PSARV010 EQU   PSASUP3
PSARV009 EQU   PSASUP3
PSARV008 EQU   PSASUP3
PSAIOSUP EQU   PSASUP3
PSALCR   EQU   PSASUP2
PSARTM   EQU   PSASUP2
PSAACR   EQU   PSASUP2
PSAIPCE2 EQU   PSASUP2
PSAIPCES EQU   PSASUP2
PSAIPCEC EQU   PSASUP2
PSAGTF   EQU   PSASUP2
PSAIPCRI EQU   PSASUP2
PSAIPCRP EQU   PSASUP1
PSAIPCDR EQU   PSASUP1
PSADISP  EQU   PSASUP1
PSALOCK  EQU   PSASUP1
PSAPI    EQU   PSASUP1
PSAEXT   EQU   PSASUP1
PSASVC   EQU   PSASUP1
PSAIO    EQU   PSASUP1
PSAAOLD  EQU   PSA+548
PSAANEW  EQU   PSA+544
PSATOLD  EQU   PSA+540
PSATNEW  EQU   PSA+536
PSALCCAR EQU   PSA+532
PSALCCAV EQU   PSA+528
PSAPCCAR EQU   PSA+524
PSAPCCAV EQU   PSA+520
PSACPULA EQU   PSA+518
PSACPUPA EQU   PSA+516
PSAPSA   EQU   PSA+512
FLCHDEND EQU   PSA+512
FLCCRSAV EQU   FLCMCLA+280
FLCGRSAV EQU   FLCMCLA+216
FLCFPSAV EQU   FLCMCLA+184
FLCFLA   EQU   FLCMCLA+88
FLCRGNCD EQU   FLCMCLA+84
FLCFSAA  EQU   FLCFSA+1
@NM00020 EQU   FLCFSA
@NM00019 EQU   FLCMCLA+72
FLCMCIC  EQU   FLCMCLA+64
@NM00018 EQU   FLCMCLA+20
FLCIOAA  EQU   FLCIOA+1
@NM00017 EQU   FLCIOA
@NM00016 EQU   FLCMCLA+15
@NM00015 EQU   FLCMCLA+14
@NM00014 EQU   FLCMCLA+12
FLCLCL   EQU   FLCMCLA+8
FLCIOELA EQU   FLCIOEL+1
@NM00013 EQU   FLCIOEL
FLCCHNID EQU   FLCMCLA
@NM00012 EQU   PSA+160
FLCMTRCD EQU   PSA+157
@NM00011 EQU   PSA+156
FLCPERA  EQU   FLCPER+1
@NM00010 EQU   FLCPER
@NM00009 EQU   PSA+151
FLCPERCD EQU   PSA+150
FLCMCNUM EQU   PSA+149
@NM00008 EQU   PSA+148
FLCTEAA  EQU   FLCTEA+1
@NM00007 EQU   FLCTEA
PSAPIPC  EQU   PSAPICOD
PSAPIMC  EQU   PSAPICOD
PSAPIPER EQU   PSAPICOD
PSARV049 EQU   FLCPICOD
FLCPILCB EQU   FLCPIILC
@NM00006 EQU   FLCPIILC
@NM00005 EQU   PSAEPPSW
FLCSVCN  EQU   PSAESPSW+2
FLCSILCB EQU   FLCSVILC
@NM00004 EQU   FLCSVILC
@NM00003 EQU   PSAESPSW
FLCEICOD EQU   PSAEEPSW+2
PSASPAD  EQU   PSAEEPSW
@NM00002 EQU   PSA+128
FLCINPSW EQU   PSA+120
FLCMNPSW EQU   PSA+112
FLCPNPSW EQU   PSA+104
FLCSNPSW EQU   PSA+96
FLCENPSW EQU   PSA+88
FLCTRACE EQU   PSA+84
FLCTIMER EQU   PSA+80
FLCCVT2  EQU   PSA+76
FLCCAW   EQU   PSA+72
FLCCSW   EQU   PSA+64
FLCIOPSW EQU   PSA+56
FLCMOPSW EQU   PSA+48
FLCPOPSW EQU   PSA+40
FLCSOPSW EQU   PSA+32
FLCEOPSW EQU   PSA+24
@NM00001 EQU   FLCICCW2+4
FLCCVT   EQU   FLCICCW2
FLCICCW1 EQU   FLCROPSW
FLCIPPSW EQU   FLCRNPSW
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RT00201 EQU   EREXIT1
@ENDDATA EQU   *
         END   AMDSATAP,(C'PL/S-II',0502,73230)
