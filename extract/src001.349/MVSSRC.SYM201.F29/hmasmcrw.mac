         TITLE 'HMASMCRW - WRITE ''IF DATA'' TO (A)CRQ'
HMASMCRW CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'HMASMCRW  78.334'                                 0001
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                     0001
         BALR  @12,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,@12                                         0001
         ST    @13,@SA00001+4                                      0001
         LA    @14,@SA00001                                        0001
         ST    @14,8(,@13)                                         0001
         LR    @13,@14                                             0001
         MVC   @PC00001(4),0(@01)                                  0001
*   IOPPTR=CCAIOPTR;                /* SET BASE TO GENERAL IOP       */
         L     IOPPTR,CCAIOPTR(,CCAPTR)                            0155
*   CRWRETRN=ZERO;                  /* INIT RETURN CODE COLLECTOR    */
         SLR   CRWRETRN,CRWRETRN                                   0156
*   LASTFMID=' ';                   /* INIT SAVED FMID ENVIRONMENT   */
*                                                                  0157
         MVI   LASTFMID+1,C' '                                     0157
         MVC   LASTFMID+2(5),LASTFMID+1                            0157
         MVI   LASTFMID,C' '                                       0157
*   /*****************************************************************/
*   /*                                                               */
*   /* DETERMINE FUNCTION SO THAT DATASET CAN BE SET                 */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0158
*   IF CCAACCPT=ON THEN             /* IF FUNCTION IS ACCEPT THEN    */
         TM    CCAACCPT(CCAPTR),B'00100000'                        0158
         BNO   @RF00158                                            0158
*     IOPDSID=IOPACRQ;              /* USE ACRQ AS DATASET,          */
         MVI   IOPDSID(IOPPTR),X'1E'                               0159
*   ELSE                                                           0160
*     IOPDSID=IOPCRQ;               /* OTHERWISE USE CRQ AS DATASET  */
*                                                                  0160
         B     @RC00158                                            0160
@RF00158 MVI   IOPDSID(IOPPTR),X'1C'                               0160
*   /*****************************************************************/
*   /*                                                               */
*   /* INITIALIZE PARAMETERS FOR HMASMVLU                            */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0161
*   HMASMVLP=''B;                   /*                               */
@RC00158 XC    HMASMVLP(52),HMASMVLP                               0161
*   VLPFUNCT=VLPADD;                /* SET FUNCTION TO ADD ENTRIES   */
         MVI   VLPFUNCT,X'01'                                      0162
*   VLPFMSG=OFF;                    /* NO MESSAGES (ERROR/WARNING)   */
         NI    VLPFMSG,B'01111111'                                 0163
*   VLPLPTR=ADDR(IOPQFMLS(1));      /* SET POINTER TO FIRST ENTRY    */
*                                                                  0164
         LA    @10,IOPQFMLS(,IOPPTR)                               0164
         ST    @10,VLPLPTR                                         0164
*   /*****************************************************************/
*   /*                                                               */
*   /* INITIALIZE PARAMETERS FOR HMASMGTA                            */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0165
*   GTPRCDLN=LENGTH(TPIFRECD);      /* MAXIMUM RECORD LENGTH         */
         L     @10,CCAIFGTP(,CCAPTR)                               0165
         MVC   GTPRCDLN(2,@10),@CH00456                            0165
*                                                                  0166
*   /*****************************************************************/
*   /*                                                               */
*   /* READ THE GTA FILE TWICE. FIRST TIME FOR THE ENVIRONMENT ENTRY,*/
*   /* THE SECOND TIME FOR THE CAUSER ENTRIES.                       */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0166
*   DO X=1 BY 1 TO 2 WHILE CRWRETRN=GTPGOOD;/* READ TWICE WHILE RC=0 */
*                                                                  0166
         LA    X,1                                                 0166
@DL00166 LTR   CRWRETRN,CRWRETRN                                   0166
         BNZ   @DC00166                                            0166
*     /***************************************************************/
*     /*                                                             */
*     /* LOCATE FIRST RECORD FOR "CAUSER" IN GTA FILE                */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0167
*     TPIKEY=''B;                   /* CLEAR KEY                     */
         L     @10,CCAIFGTP(,CCAPTR)                               0167
         L     @05,GTPBUFAD(,@10)                                  0167
         XC    TPIKEY(21,@05),TPIKEY(@05)                          0167
*     TPICSR=CAUSER;                /* PUT SYSMOD-ID PASSED IN KEY   */
         L     @15,@PC00001                                        0168
         MVC   TPICSR(7,@05),CAUSER(@15)                           0168
*     GTPFUNCT=GTPLOC;              /* SET FUNCTION TO LOCATE        */
         MVI   GTPFUNCT(@10),X'03'                                 0169
*     GTPKEYLN=LENGTH(TPIKEY);      /* SET FULL KEY LENGTH           */
         MVC   GTPKEYLN(2,@10),@CH00454                            0170
*     CALL HMASMGTA(HMASMGTP);      /* CALL GTA TO LOCATE RECORD     */
         ST    @10,@AL00001                                        0171
         L     @15,@CV01291                                        0171
         LA    @01,@AL00001                                        0171
         BALR  @14,@15                                             0171
*     GTPKEYLN=LENGTH(TPICSR);      /* SET UP FOR PARTIAL KEY        */
         L     @10,CCAIFGTP(,CCAPTR)                               0172
         MVC   GTPKEYLN(2,@10),@CH00034                            0172
*     CALL HMASMGTA(HMASMGTP);      /* CALL GTA TO LOCATE RECORD     */
         ST    @10,@AL00001                                        0173
         L     @15,@CV01291                                        0173
         LA    @01,@AL00001                                        0173
         BALR  @14,@15                                             0173
*     IF GTPRETRN=GTPGOOD THEN      /* WAS FUNCTION OK?              */
         L     @10,CCAIFGTP(,CCAPTR)                               0174
         CLI   GTPRETRN(@10),0                                     0174
         BNE   @RF00174                                            0174
*       DO;                         /* YES-THEN                      */
*         GTPFUNCT=GTPSTRTN;        /* SET FUNCTION TO RESTART GETN  */
         MVI   GTPFUNCT(@10),X'06'                                 0176
*         CALL HMASMGTA(HMASMGTP);  /* CALL GTA TO RESTART GETN      */
         ST    @10,@AL00001                                        0177
         L     @15,@CV01291                                        0177
         LA    @01,@AL00001                                        0177
         BALR  @14,@15                                             0177
*         IF GTPRETRN=GTPGOOD THEN  /* WAS FUNCTION OK?              */
         L     @10,CCAIFGTP(,CCAPTR)                               0178
         CLI   GTPRETRN(@10),0                                     0178
         BNE   @RF00178                                            0178
*           DO;                     /* YES-THEN                      */
*                                                                  0179
*             /*******************************************************/
*             /*                                                     */
*             /* LOOP THROUGH THE ENTRIES IN THE GTA FILE UNTIL      */
*             /* EITHER AN END OF FILE OR A CHANGE IN KEY IS FOUND.  */
*             /*                                                     */
*             /*******************************************************/
*                                                                  0180
*             DO WHILE GTPRETRN=GTPGOOD;/* TILL EOF/CHANGE           */
         B     @DE00180                                            0180
@DL00180 DS    0H                                                  0181
*               GTPFUNCT=GTPGETN;   /* SET FUNCTION TO GETNEXT       */
         L     @10,CCAIFGTP(,CCAPTR)                               0181
         MVI   GTPFUNCT(@10),X'08'                                 0181
*               CALL HMASMGTA(HMASMGTP);/* CALL GTA TO DO GETNEXT    */
         ST    @10,@AL00001                                        0182
         L     @15,@CV01291                                        0182
         LA    @01,@AL00001                                        0182
         BALR  @14,@15                                             0182
*               IF GTPRETRN=GTPGOOD THEN/* NEXT RECORD FOUND?        */
         L     @10,CCAIFGTP(,CCAPTR)                               0183
         CLI   GTPRETRN(@10),0                                     0183
         BNE   @RF00183                                            0183
*                 DO;               /* YES-THEN,                     */
*                   IF TPICSR=CAUSER THEN/* IS IT THE SAME KEY?      */
         L     @10,GTPBUFAD(,@10)                                  0185
         L     @05,@PC00001                                        0185
         CLC   TPICSR(7,@10),CAUSER(@05)                           0185
         BNE   @RF00185                                            0185
*                     DO;           /* YES THEN                      */
*                                                                  0186
*                       /*********************************************/
*                       /*                                           */
*                       /* DETERMINE WHICH PASS OF THE GTA FILE IS   */
*                       /* BEING DONE. FOR THE FIRST, CALL CRWENVIR  */
*                       /* TO PROCESS THE ENVIRONMENT RECORDS ON THE */
*                       /* (A)CRQ DATASET, IF THE FMID FOR THIS      */
*                       /* CAUSER HAS NOT ALREADY BEEN PROCESSED. IF */
*                       /* THE SECOND PASS OF THE GTA, THEN CALL     */
*                       /* CRWCAUSR TO PROCESS THE CAUSER RECORDS ON */
*                       /* THE (A)CRQ.                               */
*                       /*                                           */
*                       /*********************************************/
*                                                                  0187
*                       IF X=1&TPIFMID^=LASTFMID THEN/* PASS FOR   0187
*                                      ENVIRONMENT ENTRY, AND THIS 0187
*                                      FMID HAS NOT ALREADY BEEN   0187
*                                      PROCESSED FOR THIS CAUSER   0187
*                                      SYSMOD, THEN PROCESS IT       */
         CH    X,@CH00086                                          0187
         BNE   @RF00187                                            0187
         CLC   TPIFMID(7,@10),LASTFMID                             0187
         BE    @RF00187                                            0187
*                         CALL CRWENVIR;/* CALL CRWENVIR             */
         BAL   @14,CRWENVIR                                        0188
*                       IF X=2 THEN /* SECOND PASS FOR CAUSER?       */
@RF00187 CH    X,@CH00183                                          0189
         BNE   @RF00189                                            0189
*                         CALL CRWCAUSR;/* YES- CALL CRWCAUSR        */
         BAL   @14,CRWCAUSR                                        0190
*                     END;          /* END OF SAME KEY LOOP          */
*                   ELSE                                           0192
*                     GTPRETRN=GTPEOF;/* KEY HAS CHANGED SO SET END
*                                      OF FILE RC                    */
         B     @RC00185                                            0192
@RF00185 L     @10,CCAIFGTP(,CCAPTR)                               0192
         MVI   GTPRETRN(@10),X'04'                                 0192
*                 END;              /* END OF NEXT RECORD FOUND LOOP */
@RC00185 DS    0H                                                  0194
*             END;                  /* END OF FILE/KEY CHANGED LOOP  */
*                                                                  0194
@RF00183 DS    0H                                                  0194
@DE00180 L     @10,CCAIFGTP(,CCAPTR)                               0194
         CLI   GTPRETRN(@10),0                                     0194
         BE    @DL00180                                            0194
*             /*******************************************************/
*             /*                                                     */
*             /* CHECK FOR X=1 AND DO STOW OF ENVIRONMENT RECORD IN  */
*             /* BUFFER, WHEN END OF FILE/KEY CHANGE IS ENCOUNTERED  */
*             /* AND PEMAX WAS NOT EXCEEDED IN HMASMVLU.             */
*             /*                                                     */
*             /*******************************************************/
*                                                                  0195
*             IF GTPRETRN=GTPEOF    /* END OF FILE/KEY CHANGE HIT,   */
*                 &X=1              /* AND ENVIRONMENT ENTRY LOOP,   */
*                 &CRWRETRN<VLPPEEXC THEN/* AND PEMAX NOT EXCEEDED,  */
         CLI   GTPRETRN(@10),4                                     0195
         BNE   @RF00195                                            0195
         CH    X,@CH00086                                          0195
         BNE   @RF00195                                            0195
         CH    CRWRETRN,@CH00111                                   0195
         BNL   @RF00195                                            0195
*               DO;                 /* THEN STOWR THE ONLY/LAST ENTRY*/
*                 IOPFUNCT=IOPSTOWR;/* SET FOR STOW REPLACE OPER     */
         MVI   IOPFUNCT(IOPPTR),X'54'                              0197
*                 CALL HMASMIO(HMASMIOP);/* CALL IO TO DO STOWR      */
         ST    IOPPTR,@AL00001                                     0198
         L     @15,@CV01289                                        0198
         LA    @01,@AL00001                                        0198
         BALR  @14,@15                                             0198
*                 CRWRETRN=MAX(CRWRETRN,IOPRETRN);                 0199
         SLR   @10,@10                                             0199
         IC    @10,IOPRETRN(,IOPPTR)                               0199
         CR    CRWRETRN,@10                                        0199
         BNL   *+6
         LR    CRWRETRN,@10                                        0199
*               END;                /* END OF STOWR LOOP             */
*                                                                  0200
*             /*******************************************************/
*             /*                                                     */
*             /* CHECK FOR X=2 AND DO THE WRITE OF THE LAST RECORD IN*/
*             /* THE BUFFER AND THEN DO THE BUILD AND STOW OF        */
*             /* DIRECTORY ENTRY FOR THIS CAUSER WHEN END OF FILE/KEY*/
*             /* CHANGE IS ENCOUNTERED.                              */
*             /*                                                     */
*             /*******************************************************/
*                                                                  0201
*             IF GTPRETRN=GTPEOF    /* END OF FILE/KEY CHANGE HIT,   */
*                 &X=2 THEN         /* AND CAUSER ENTRY LOOP,        */
@RF00195 L     @10,CCAIFGTP(,CCAPTR)                               0201
         CLI   GTPRETRN(@10),4                                     0201
         BNE   @RF00201                                            0201
         CH    X,@CH00183                                          0201
         BNE   @RF00201                                            0201
*               DO;                 /* THEN WRITE LAST RECORD IN BUFR*/
*                 IOPFUNCT=IOPWRITE;/* SET FOR WRITE OPERATION       */
         MVI   IOPFUNCT(IOPPTR),X'51'                              0203
*                 IOPTYPE=IOPCSR;   /* ... TO CAUSER MEMBER          */
         MVI   IOPTYPE(IOPPTR),X'0F'                               0204
*                 IOPNAM17=CAUSER;  /* ... CAUSER MEMBER NAME        */
         L     @10,@PC00001                                        0205
         MVC   IOPNAM17(7,IOPPTR),CAUSER(@10)                      0205
*                 CALL HMASMIO(HMASMIOP);/* CALL IO TO DO WRITE      */
         ST    IOPPTR,@AL00001                                     0206
         L     @15,@CV01289                                        0206
         LA    @01,@AL00001                                        0206
         BALR  @14,@15                                             0206
*                 IF IOPRETRN=IOPGOOD THEN/* WAS WRITE OPER OK?      */
         CLI   IOPRETRN(IOPPTR),0                                  0207
         BNE   @RF00207                                            0207
*                   DO;             /* YES- THEN BUILD/STOWR DIR     */
*                     IOPNAM17=CAUSER;/* CAUSER SYSMOD NAME          */
         L     @10,@PC00001                                        0209
         MVC   IOPNAM17(7,IOPPTR),CAUSER(@10)                      0209
*                     IOPTYPE=IOPCSR;/* CAUSER TYPE ENTRY            */
         MVI   IOPTYPE(IOPPTR),X'0F'                               0210
*                     IOPQSMNT=''B; /* ZERO OUT FIELD                */
         XC    IOPQSMNT(2,IOPPTR),IOPQSMNT(IOPPTR)                 0211
*                     IOPFUNCT=IOPSTOWR;/* SET FOR STOW REPLACE OPER */
         MVI   IOPFUNCT(IOPPTR),X'54'                              0212
*                     CALL HMASMIO(HMASMIOP);/* CALL IO TO DO STOWR  */
         ST    IOPPTR,@AL00001                                     0213
         L     @15,@CV01289                                        0213
         LA    @01,@AL00001                                        0213
         BALR  @14,@15                                             0213
*                   END;            /* END OF BUILD/STOWR LOOP       */
*                 CRWRETRN=MAX(CRWRETRN,IOPRETRN);                 0215
@RF00207 SLR   @10,@10                                             0215
         IC    @10,IOPRETRN(,IOPPTR)                               0215
         CR    CRWRETRN,@10                                        0215
         BNL   *+6
         LR    CRWRETRN,@10                                        0215
*               END;                /* END OF WRITE LAST RECORD LOOP */
*           END;                    /* END OF GOOD RESET GETN LOOP   */
@RF00201 DS    0H                                                  0218
*       END;                        /* END OF GOOD LOCATE LOOP       */
@RF00178 DS    0H                                                  0219
*     LASTFMID=' ';                 /* RESET FMID SAVE FOR PASS 2    */
@RF00174 MVI   LASTFMID+1,C' '                                     0219
         MVC   LASTFMID+2(5),LASTFMID+1                            0219
         MVI   LASTFMID,C' '                                       0219
*   END;                            /* END OF READ GTA TWICE LOOP    */
         AH    X,@CH00086                                          0220
         CH    X,@CH00183                                          0220
         BNH   @DL00166                                            0220
@DC00166 DS    0H                                                  0221
*   RETURN CODE(CRWRETRN);          /* RETURN TO CALLER WITH HIGHEST
*                                      RETURN CODE ENCOUNTERED       */
         LR    @15,CRWRETRN                                        0221
         L     @13,4(,@13)                                         0221
         L     @14,12(,@13)                                        0221
         LM    @00,@12,20(@13)                                     0221
         BR    @14                                                 0221
*                                                                  0222
*   /*****************************************************************/
*   /*                                                               */
*   /* NOTE: THIS PROCEDURE IS ENTERED ONLY ONCE PER FMID.           */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0222
*CRWENVIR:                                                         0222
*   PROC;                           /*                               */
*                                                                  0222
@EL00001 L     @13,4(,@13)                                         0222
@EF00001 DS    0H                                                  0222
@ER00001 LM    @14,@12,12(@13)                                     0222
         BR    @14                                                 0222
CRWENVIR STM   @14,@02,@SA00002                                    0222
         STM   @04,@12,@SA00002+20                                 0222
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS PROCEDURE HANDLES THE FIRST PASS OF THE GTA FILE BY      */
*   /* EXTRACTING THE ENVIRONMENTS MENTIONED IN THE CAUSER SYSMOD    */
*   /* PASSED, AND ADDING THAT CAUSER TO AN EXISTING ENVIRONMENT TYPE*/
*   /* (A)CRQ RECORD, OR CREATING ONE IF NONE EXISTS.                */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0223
*   IF LASTFMID^=BLANKS THEN        /* IS THIS FIRST PASS?           */
*                                                                  0223
         CLC   LASTFMID(7),@CC01293                                0223
         BE    @RF00223                                            0223
*     /***************************************************************/
*     /*                                                             */
*     /* FOR THE FIRST PASS THROUGH THIS ROUTINE, THERE WILL BE NO   */
*     /* ENVIRONMENT ENTRY IN THE BUFFER TO STOWR, SO BYPASS THE     */
*     /* STOW. IF NOT THE FIRST PASS, THEN THE FMID HAS CHANGED, SO  */
*     /* DO A STOWR OF THE PREVIOUS ENVIRONMENT ENTRY THAT IS IN THE */
*     /* BUFFER AND THEN PROCESS THE CURRENT ENVIRONMENT ENTRY.      */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0224
*     DO;                           /* NO- THEN ENTRY IN BUFFER      */
*       IOPFUNCT=IOPSTOWR;          /* SET FUNCTION TO STOWR         */
         MVI   IOPFUNCT(IOPPTR),X'54'                              0225
*       CALL HMASMIO(HMASMIOP);     /* CALL IO TO DO STOWR OPER      */
         ST    IOPPTR,@AL00001                                     0226
         L     @15,@CV01289                                        0226
         LA    @01,@AL00001                                        0226
         BALR  @14,@15                                             0226
*       CRWRETRN=MAX(CRWRETRN,IOPRETRN);/* PICK UP THE HIGHEST RC    */
         SLR   @10,@10                                             0227
         IC    @10,IOPRETRN(,IOPPTR)                               0227
         CR    CRWRETRN,@10                                        0227
         BNL   *+6
         LR    CRWRETRN,@10                                        0227
*     END;                          /* END OF ENTRY IN BUFFER LOOP   */
*                                                                  0228
*   /*****************************************************************/
*   /*                                                               */
*   /* IF THE RETURN CODE COLLECTOR IS OK, THEN ATTEMPT TO FIND AN   */
*   /* EXISTING ENVIRONMENT ENTRY ON THE (A)CRQ.                     */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0229
*   IF CRWRETRN=IOPGOOD THEN        /* IS RC COLLECTOR OK?           */
@RF00223 LTR   CRWRETRN,CRWRETRN                                   0229
         BNZ   @RF00229                                            0229
*     DO;                           /* YES- THEN                     */
*       LASTFMID=TPIFMID;           /* SAVE CURRENT FMID             */
         L     @10,CCAIFGTP(,CCAPTR)                               0231
         L     @10,GTPBUFAD(,@10)                                  0231
         MVC   LASTFMID(7),TPIFMID(@10)                            0231
*       IOPFUNCT=IOPLOC;            /* SET FUNCTION TO LOCATE        */
         MVI   IOPFUNCT(IOPPTR),X'03'                              0232
*       IOPTYPE=IOPFMD;             /* ENVIRONMENT TYPE ENTRY        */
         MVI   IOPTYPE(IOPPTR),X'0E'                               0233
*       IOPNAM17=TPIFMID;           /* FMID ENVIRONMENT SYSMOD NAME  */
         MVC   IOPNAM17(7,IOPPTR),TPIFMID(@10)                     0234
*       CALL HMASMIO(HMASMIOP);     /* CALL IO TO DO THE LOCATE      */
         ST    IOPPTR,@AL00001                                     0235
         L     @15,@CV01289                                        0235
         LA    @01,@AL00001                                        0235
         BALR  @14,@15                                             0235
*       IF IOPRETRN=IOPNTFND THEN   /* DOES AN ENTRY ALREADY EXIST?  */
         CLI   IOPRETRN(IOPPTR),4                                  0236
         BNE   @RF00236                                            0236
*         DO;                       /* NO- THEN SET UP TO BUILD ONE  */
*                                                                  0237
*           /*********************************************************/
*           /*                                                       */
*           /* NO ENTRY EXISTS, SO BUILD A END OF LIST VARIABLE      */
*           /* ENTRY. THE DIRECTORY DATA REQUIRED FOR A STOWR ALREADY*/
*           /* FILLED IN.                                            */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0238
*           IOPQFMNT=''B;           /* ZERO OUT FIELD                */
         XC    IOPQFMNT(2,IOPPTR),IOPQFMNT(IOPPTR)                 0238
*           IOPQFMND(1)=IOPEOLST;   /* SET END OF VARIABLE LIST      */
         MVI   IOPQFMND(IOPPTR),X'FF'                              0239
*           IOPRETRN=IOPGOOD;       /* RESET RC=0 TO CONTINUE        */
         MVI   IOPRETRN(IOPPTR),X'00'                              0240
*         END;                      /* END OF BUILD ONE LOOP         */
*       CRWRETRN=MAX(CRWRETRN,IOPRETRN);/* PICK UP HIGHEST RC        */
@RF00236 SLR   @10,@10                                             0242
         IC    @10,IOPRETRN(,IOPPTR)                               0242
         CR    CRWRETRN,@10                                        0242
         BNL   *+6
         LR    CRWRETRN,@10                                        0242
*     END;                          /* END OF RC COLLECTOR OK LOOP   */
*   IF CRWRETRN=IOPGOOD THEN        /* OK TO BUILD VARIABLE ENTRY?   */
@RF00229 LTR   CRWRETRN,CRWRETRN                                   0244
         BNZ   @RF00244                                            0244
*     DO;                           /* YES- THEN                     */
*                                                                  0245
*       /*************************************************************/
*       /*                                                           */
*       /* IF AN ENTRY WAS FOUND, OR IF A END OF LIST VARIABLE ENTRY */
*       /* WAS BUILT, THEN ADD THIS CAUSER TO THE VARIABLE LIST VIA A*/
*       /* CALL TO HMASMVLU.                                         */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0246
*       VLPTYPE=IOPQFMSM;           /* FILL IN VARIABLE ENTRY TYPE   */
         MVI   VLPTYPE,X'01'                                       0246
*       VLPDLEN=LENGTH(IOPQFMNM);   /* LEN OF KEY IN VLPDATA         */
         LA    @10,7                                               0247
         STC   @10,VLPDLEN                                         0247
*       VLPDATA=''B;                /*                               */
         XC    VLPDATA(8),VLPDATA                                  0248
*       VLPDATA(1:VLPDLEN)=TPICSR;  /* FILL IN VARIABLE ENTRY DATA   */
         BCTR  @10,0                                               0249
         L     @01,CCAIFGTP(,CCAPTR)                               0249
         L     @01,GTPBUFAD(,@01)                                  0249
         EX    @10,@SM01317                                        0249
*       VLPMTYPE=CCATYPEA(IOPFMD);  /*                               */
         L     @10,CCATPAD(,CCAPTR)                                0250
         MVC   VLPMTYPE(8),CCATYPEA+104(@10)                       0250
*       VLPMNAME=IOPNAME;           /*                               */
         MVC   VLPMNAME(8),IOPNAME(IOPPTR)                         0251
*       VLPSTYPE=CCATYPEA(IOPSMD);  /*                               */
         MVI   VLPSTYPE+8,C' '                                     0252
         MVC   VLPSTYPE+9(7),VLPSTYPE+8                            0252
         MVC   VLPSTYPE(8),CCATYPEA+80(@10)                        0252
*       CALL HMASMVLU(HMASMVLP);    /* CALL VLU TO ADD VARIABLE ENTRY*/
         L     @15,@CV01290                                        0253
         LA    @01,@AL00253                                        0253
         BALR  @14,@15                                             0253
*       IF VLPRETRN<VLPPEEXC THEN   /* WAS PEMAX EXCEEDED?           */
         CLI   VLPRETRN,8                                          0254
         BNL   @RF00254                                            0254
*         CRWRETRN=VLPGOOD;         /* NO- RESET RC=0                */
         SLR   CRWRETRN,CRWRETRN                                   0255
*       ELSE                                                       0256
*         CRWRETRN=MAX(CRWRETRN,VLPRETRN);/* YES- PICK UP PEMAX RC   */
         B     @RC00254                                            0256
@RF00254 SLR   @10,@10                                             0256
         IC    @10,VLPRETRN                                        0256
         CR    CRWRETRN,@10                                        0256
         BNL   *+6
         LR    CRWRETRN,@10                                        0256
*     END;                          /* END OF OK TO BUILD LOOP       */
*   END CRWENVIR;                   /*                               */
@EL00002 DS    0H                                                  0258
@EF00002 DS    0H                                                  0258
@ER00002 LM    @14,@02,@SA00002                                    0258
         LM    @04,@12,@SA00002+20                                 0258
         BR    @14                                                 0258
*CRWCAUSR:                                                         0259
*   PROC;                           /*                               */
*                                                                  0259
CRWCAUSR STM   @14,@02,@SA00003                                    0259
         STM   @04,@12,@SA00003+20                                 0259
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS PROCEDURE HANDLES THE SECOND PASS OF THE GTA FILE BY     */
*   /* EXTRACTING THE REQUISITE SYSMODS REQUIRED SHOULD THIS FMID BE */
*   /* INSTALLED, AND WRITING THE RECORDS TO REFLECT THE FMID AND    */
*   /* REQUISITE IN THE DATA RECORDS FOR THE CAUSER ENTRY. IF A      */
*   /* MEMBER EXISTS ALREADY, IT IS IGNORED. A NEW MEMBER WILL BE    */
*   /* WRITTEN AND STOWED TO REPLACE THE CURRENT MEMBER.             */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0260
*   IF LASTFMID^=TPIFMID THEN       /* FMID NOT THE SAME AS LAST?    */
         L     @10,CCAIFGTP(,CCAPTR)                               0260
         L     @10,GTPBUFAD(,@10)                                  0260
         CLC   LASTFMID(7),TPIFMID(@10)                            0260
         BE    @RF00260                                            0260
*     DO;                           /* NO- THEN                      */
*       IF LASTFMID=BLANKS THEN     /* FIRST PASS-I.E.- EMPTY IOPBUFR*/
         CLC   LASTFMID(7),@CC01293                                0262
         BNE   @RF00262                                            0262
*         DO;                       /* YES- THEN                     */
*           LASTFMID=TPIFMID;       /* SET UP FMID WITH CURRENT FMID */
         MVC   LASTFMID(7),TPIFMID(@10)                            0264
*           IOPQSMIF=''B;           /* ZERO FMID & VARIABLE ENTRIES  */
         L     @15,IOPBUFAD(,IOPPTR)                               0265
         XC    IOPQSMIF(80,@15),IOPQSMIF(@15)                      0265
*           IOPQSMFM=TPIFMID;       /* FMID TO FMID FIXED FIELD      */
         MVC   IOPQSMFM(7,@15),TPIFMID(@10)                        0266
*           IOPQSMNM(1)=TPIREQ;     /* REQUISITE SYSMOD TO VARIABLE  */
         MVC   IOPQSMNM(7,@15),TPIREQ(@10)                         0267
*           IOPQSMTP(1)=IOPQSMRQ;   /* INDICATE REQUISITE SYSMOD TYPE*/
         MVI   IOPQSMTP(@15),X'01'                                 0268
*           IOPQSMND(2)=IOPEOLST;   /* SET END OF LIST MARKER        */
         MVI   IOPQSMND+9(@15),X'FF'                               0269
*         END;                      /* END OF EMPTY BUFFER LOOP      */
*       ELSE                        /* FMID HAS CHANGED AND THIS IS  */
*         DO;                       /* NOT FIRST PASS                */
*                                                                  0271
         B     @RC00262                                            0271
@RF00262 DS    0H                                                  0272
*           /*********************************************************/
*           /*                                                       */
*           /* A FMID CHANGE HAS OCCURRED IN THE GTA FILE RECORDS.   */
*           /* EACH FMID REQUIRES A SEPARATE RECORD IN THE MEMBER, SO*/
*           /* WRITE THE CURRENT RECORD FOR THIS FMID, THEN BUILD THE*/
*           /* NEXT FMID RECORD                                      */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0272
*           IOPFUNCT=IOPWRITE;      /* SET FUNCTION TO WRITE         */
         MVI   IOPFUNCT(IOPPTR),X'51'                              0272
*           IOPTYPE=IOPCSR;         /* ... TO CAUSER MEMBER          */
         MVI   IOPTYPE(IOPPTR),X'0F'                               0273
*           IOPNAM17=CAUSER;        /* ... CAUSER MEMBER NAME        */
         L     @10,@PC00001                                        0274
         MVC   IOPNAM17(7,IOPPTR),CAUSER(@10)                      0274
*           CALL HMASMIO(HMASMIOP); /* CALL IO TO WRITE DATA RECORD  */
         ST    IOPPTR,@AL00001                                     0275
         L     @15,@CV01289                                        0275
         LA    @01,@AL00001                                        0275
         BALR  @14,@15                                             0275
*           IF IOPRETRN=IOPGOOD THEN/* WAS WRITE OK?                 */
         CLI   IOPRETRN(IOPPTR),0                                  0276
         BNE   @RF00276                                            0276
*             DO;                   /* YES- THEN                     */
*                                                                  0277
*               /*****************************************************/
*               /*                                                   */
*               /* BUILD NEW FMID RECORD WITH REQUISITES FOR CAUSER  */
*               /* MEMBER                                            */
*               /*                                                   */
*               /*****************************************************/
*                                                                  0278
*               LASTFMID=TPIFMID;   /* SET UP FMID WITH CURRENT FMID */
         L     @10,CCAIFGTP(,CCAPTR)                               0278
         L     @10,GTPBUFAD(,@10)                                  0278
         MVC   LASTFMID(7),TPIFMID(@10)                            0278
*               IOPQSMIF=''B;       /* ZERO FMID & VARIABLE ENTRIES  */
         L     @15,IOPBUFAD(,IOPPTR)                               0279
         XC    IOPQSMIF(80,@15),IOPQSMIF(@15)                      0279
*               IOPQSMFM=TPIFMID;   /* FMID TO FMID FIXED FIELD      */
         MVC   IOPQSMFM(7,@15),TPIFMID(@10)                        0280
*               IOPQSMNM(1)=TPIREQ; /* REQUISITE SYSMOD TO VARIABLE  */
         MVC   IOPQSMNM(7,@15),TPIREQ(@10)                         0281
*               IOPQSMTP(1)=IOPQSMRQ;/* SHOW REQUISITE SYSMOD TYPE   */
         MVI   IOPQSMTP(@15),X'01'                                 0282
*               IOPQSMND(2)=IOPEOLST;/* SET END OF LIST MARKER       */
         MVI   IOPQSMND+9(@15),X'FF'                               0283
*             END;                  /* END OF WRITE OK LOOP          */
*         END;                      /* END OF NOT FIRST PASS LOOP    */
*     END;                          /* END OF NOT THE SAME FMID LOOP */
*   ELSE                            /* SAME FMID AS LAST TIME SO     */
*     DO;                           /* DO-                           */
*                                                                  0287
         B     @RC00260                                            0287
@RF00260 DS    0H                                                  0288
*       /*************************************************************/
*       /*                                                           */
*       /* THIS GTA RECORD HAS THE SAME FMID, SO DETERMINE THE COUNT */
*       /* OF VARIABLE ENTRIES ALREADY IN THIS RECORD. IF THERE IS   */
*       /* ENOUGH SPACE IN THE CURRENT RECORD, THEN ADD THIS         */
*       /* REQUISITE TO THE LIST AND SET THE NEW END OF LIST MARKER. */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0288
*       DO Z=1 BY 1                 /* LOOP UNTIL END OF LIST IS     */
*             WHILE IOPQSMND(Z)^=IOPEOLST;/* FOUND IN THE RECORD     */
         LA    Z,1                                                 0288
         B     @DE00288                                            0288
@DL00288 DS    0H                                                  0289
*       END;                        /* END OF MAX NUMBER LOOP        */
         AH    Z,@CH00086                                          0289
@DE00288 LA    @10,255                                             0289
         LR    @05,Z                                               0289
         MH    @05,@CH00434                                        0289
         L     @15,IOPBUFAD(,IOPPTR)                               0289
         LA    @01,0(@05,@15)                                      0289
         BCTR  @01,0                                               0289
         SLR   @00,@00                                             0289
         IC    @00,IOPQSMND-8(,@01)                                0289
         CR    @10,@00                                             0289
         BNE   @DL00288                                            0289
*       IF(Z+1)<=DIM(IOPQSMLS) THEN /* IS THERE ROOM FOR ENTRY&'FF'? */
         LA    @14,1                                               0290
         LR    @09,Z                                               0290
         ALR   @09,@14                                             0290
         CH    @09,@CH00111                                        0290
         BH    @RF00290                                            0290
*         DO;                       /* YES- THEN                     */
*           IOPQSMNM(Z)=TPIREQ;     /* OVERLAY 'FF' WITH REQ SYSMOD  */
         ST    @05,@TF00001                                        0292
         ALR   @05,@15                                             0292
         BCTR  @05,0                                               0292
         L     @01,CCAIFGTP(,CCAPTR)                               0292
         L     @01,GTPBUFAD(,@01)                                  0292
         MVC   IOPQSMNM-8(7,@05),TPIREQ(@01)                       0292
*           IOPQSMTP(Z)=IOPQSMRQ;   /* SHOW REQUISITE SYSMOD TYPE    */
         L     @05,@TF00001                                        0293
         STC   @14,IOPQSMTP-9(@05,@15)                             0293
*           IOPQSMND(Z+1)=IOPEOLST; /* SET NEW END OF LIST 'FF'      */
         L     @05,@TF00001                                        0294
         STC   @10,IOPQSMND(@05,@15)                               0294
*         END;                      /* END OF ROOM FOR ENTRY & 'FF'  */
*       ELSE                        /*                               */
*         IF Z=DIM(IOPQSMLS) THEN   /* 'FF' MUST BE IN LAST ENTRY    */
         B     @RC00290                                            0296
@RF00290 CH    Z,@CH00111                                          0296
         BNE   @RF00296                                            0296
*           DO;                     /*                               */
*                                                                  0297
*             /*******************************************************/
*             /*                                                     */
*             /* THERE IS NOT SPACE FOR BOTH THE REQUISITE AND THE   */
*             /* END OF LIST ENTRY IN THE CURRENT RECORD, SO ADD THE */
*             /* ENTRY TO THE CURRENT RECORD, WRITE THE RECORD TO THE*/
*             /* DATASET, THEN BUILD THE NEXT RECORD WITH THE END OF */
*             /* LIST ENTRY FOR THIS CAUSER MEMBER.                  */
*             /*                                                     */
*             /*******************************************************/
*                                                                  0298
*             IOPQSMNM(Z)=TPIREQ;   /* OVERLAY 'FF' WITH REQ   SYSMOD*/
         LR    @10,Z                                               0298
         MH    @10,@CH00434                                        0298
         L     @05,IOPBUFAD(,IOPPTR)                               0298
         ST    @10,@TF00001                                        0298
         ALR   @10,@05                                             0298
         BCTR  @10,0                                               0298
         L     @01,CCAIFGTP(,CCAPTR)                               0298
         L     @01,GTPBUFAD(,@01)                                  0298
         MVC   IOPQSMNM-8(7,@10),TPIREQ(@01)                       0298
*             IOPQSMTP(Z)=IOPQSMRQ; /* SHOW REQUISITE SYSMOD TYPE    */
         LA    @10,1                                               0299
         L     @01,@TF00001                                        0299
         STC   @10,IOPQSMTP-9(@01,@05)                             0299
*             IOPFUNCT=IOPWRITE;    /* SET UP FOR WRITE OPERATION    */
         MVI   IOPFUNCT(IOPPTR),X'51'                              0300
*             CALL HMASMIO(HMASMIOP);/* CALL IO TO DO WRITE OPER     */
         ST    IOPPTR,@AL00001                                     0301
         L     @15,@CV01289                                        0301
         LA    @01,@AL00001                                        0301
         BALR  @14,@15                                             0301
*             IF IOPRETRN=IOPGOOD THEN/* WAS WRITE OK?               */
         CLI   IOPRETRN(IOPPTR),0                                  0302
         BNE   @RF00302                                            0302
*               DO;                 /* YES- THEN                     */
*                                                                  0303
*                 /***************************************************/
*                 /*                                                 */
*                 /* BUILD NEXT FMID RECORD WITH END OF LIST FOR     */
*                 /* CAUSER MEMBER                                   */
*                 /*                                                 */
*                 /***************************************************/
*                                                                  0304
*                 IOPQSMIF=''B;     /* ZERO FMID & VARIABLE ENTRIES  */
         L     @10,IOPBUFAD(,IOPPTR)                               0304
         XC    IOPQSMIF(80,@10),IOPQSMIF(@10)                      0304
*                 IOPQSMFM=TPIFMID; /* RESET CURRENT FMID IN RCRD    */
         L     @01,CCAIFGTP(,CCAPTR)                               0305
         L     @01,GTPBUFAD(,@01)                                  0305
         MVC   IOPQSMFM(7,@10),TPIFMID(@01)                        0305
*                 IOPQSMND(1)=IOPEOLST;/* SET END OF LIST 'FF'       */
         MVI   IOPQSMND(@10),X'FF'                                 0306
*               END;                /* END OF WRITE OK LOOP          */
*           END;                    /* END OF 'FF' IN LAST ENTRY LOOP*/
@RF00302 DS    0H                                                  0309
*     END;                          /* END OF SAME FMID AS LAST TIME */
@RF00296 DS    0H                                                  0309
@RC00290 DS    0H                                                  0310
*   CRWRETRN=MAX(CRWRETRN,IOPRETRN);/* PICK UP HIGHEST RC            */
@RC00260 SLR   @10,@10                                             0310
         IC    @10,IOPRETRN(,IOPPTR)                               0310
         CR    CRWRETRN,@10                                        0310
         BNL   *+6
         LR    CRWRETRN,@10                                        0310
*   END CRWCAUSR;                   /*                               */
@EL00003 DS    0H                                                  0311
@EF00003 DS    0H                                                  0311
@ER00003 LM    @14,@02,@SA00003                                    0311
         LM    @04,@12,@SA00003+20                                 0311
         BR    @14                                                 0311
*   END HMASMCRW                    /* END OF HMASMCRW MODULE        */
*                                                                  0312
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (HMASMCCA)                                       */
*/*%INCLUDE SYSLIB  (HMASMIOP)                                       */
*/*%INCLUDE SYSLIB  (HMASMGTP)                                       */
*/*%INCLUDE SYSLIB  (HMASMVLP)                                       */
*                                                                  0312
*       ;                                                          0312
@DATA    DS    0H
@CH00086 DC    H'1'
@CH00183 DC    H'2'
@CH00034 DC    H'7'
@CH00111 DC    H'8'
@CH00434 DC    H'9'
@CH00454 DC    H'21'
@CH00456 DC    H'22'
@SM01317 MVC   VLPDATA(0),TPICSR(@01)
         DS    0F
@AL00253 DC    A(HMASMVLP)             LIST WITH   1 ARGUMENT(S)
         DS    0F
@SA00001 DS    18F
@PC00001 DS    1F
@SA00003 DS    0F
@SA00002 DS    0F
         DS    14F
@AL00001 DS    1A
@TF00001 DS    F
         DS    0F
@CV01289 DC    V(HMASMIO)
@CV01290 DC    V(HMASMVLU)
@CV01291 DC    V(HMASMGTA)
         DS    0D
@CC01293 DC    C'       '
         DS    CL1
HMASMVLP DS    CL52
         ORG   HMASMVLP
VLPFUNCT DS    FL1
VLPRETRN DS    FL1
VLPFLAG  DS    BL1
         ORG   VLPFLAG
VLPFMSG  DS    BL1
VLPFRSV  EQU   VLPFLAG+0
         ORG   HMASMVLP+3
VLPDLEN  DS    FL1
VLPSNTRY DS    CL9
         ORG   VLPSNTRY
VLPDATA  DS    CL8
VLPTYPE  DS    FL1
         ORG   HMASMVLP+13
@NM00174 DS    CL3
VLPLPTR  DS    AL4
VLPMTYPE DS    CL8
VLPMNAME DS    CL8
VLPSTYPE DS    CL16
         ORG   HMASMVLP+52
LASTFMID DS    CL7
         DS    CL1
PATCHCRW DS    CL80
         ORG   PATCHCRW
@NM00175 DC    80X'FF'
         ORG   PATCHCRW+80
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
Z        EQU   @04
X        EQU   @04
CRWRETRN EQU   @03
IOPPTR   EQU   @02
CCAPTR   EQU   @11
RTNCODE  EQU   @15
RTNREG   EQU   @14
HMASMCCA EQU   0
CCAFBUFR EQU   HMASMCCA+4
CCADSAD  EQU   CCAFBUFR+124
CCATPAD  EQU   CCAFBUFR+128
CCAFLAG7 EQU   CCAFBUFR+132
CCAFIOP  EQU   HMASMCCA+140
CCAIOPTR EQU   CCAFIOP
CCAFSYS  EQU   HMASMCCA+148
CCASREL  EQU   CCAFSYS+12
CCAFLAGA EQU   CCAFSYS+21
CCAFSTA  EQU   HMASMCCA+188
CCAFICT  EQU   HMASMCCA+192
CCAFPGM  EQU   HMASMCCA+208
CCABLDLP EQU   CCAFPGM
CCADBLDL EQU   CCAFPGM+4
CCAFGTP  EQU   HMASMCCA+224
CCASEGTP EQU   CCAFGTP
CCAIFGTP EQU   CCAFGTP+16
@NM00009 EQU   HMASMCCA+244
CCAFFUNC EQU   HMASMCCA+264
CCAFLAG1 EQU   CCAFFUNC+8
CCAACCPT EQU   CCAFLAG1
CCAFLAG2 EQU   CCAFFUNC+11
CCAFPROC EQU   HMASMCCA+276
CCAFLAG3 EQU   CCAFPROC
CCAFDIS  EQU   HMASMCCA+278
CCAFLAG4 EQU   CCAFDIS
CCAFLAG5 EQU   CCAFDIS+1
CCAFLAG6 EQU   CCAFDIS+2
CCAFCNV  EQU   HMASMCCA+281
CCAFLAG8 EQU   CCAFCNV
CCAFCTL  EQU   HMASMCCA+282
CCAFLAG9 EQU   CCAFCTL
CCAFDSNG EQU   HMASMCCA+298
CCAFLAGB EQU   CCAFDSNG
CCATYPEA EQU   0
CCABLDLA EQU   0
@NM00025 EQU   CCABLDLA
CCABLDLL EQU   0
@NM00027 EQU   CCABLDLL
CCALKDRC EQU   @NM00027+20
@NM00029 EQU   CCABLDLL+124
CCAASMRC EQU   @NM00029+20
@NM00031 EQU   CCABLDLL+248
CCACPYRC EQU   @NM00031+20
@NM00033 EQU   CCABLDLL+372
CCACOMRC EQU   @NM00033+20
@NM00035 EQU   CCABLDLL+496
CCAZAPRC EQU   @NM00035+20
@NM00037 EQU   CCABLDLL+620
CCASUPRC EQU   @NM00037+20
@NM00039 EQU   CCABLDLL+744
CCAUPDRC EQU   @NM00039+20
CCABLDLM EQU   0
CCABELMT EQU   CCABLDLM+4
CCABMPOS EQU   CCABELMT
HMASMIOP EQU   0
IOPDSID  EQU   HMASMIOP
IOPFUNCT EQU   HMASMIOP+1
IOPRETRN EQU   HMASMIOP+2
IOPTYPE  EQU   HMASMIOP+3
IOPNAME  EQU   HMASMIOP+4
IOPNAM17 EQU   IOPNAME
@NM00043 EQU   HMASMIOP+12
@NM00044 EQU   @NM00043
IOPDDNAM EQU   HMASMIOP+24
IOPBUFAD EQU   HMASMIOP+52
IOPDRMAP EQU   HMASMIOP+56
IOPINAME EQU   IOPDRMAP
IOPINAM  EQU   IOPINAME
IOPITYP  EQU   IOPINAM
IOPUSERL EQU   IOPDRMAP+11
IOPEND   EQU   IOPDRMAP+12
IOPLMCTL EQU   0
IOPQSMIF EQU   0
@NM00154 EQU   IOPQSMIF
IOPQSMFM EQU   @NM00154
IOPQSMLS EQU   IOPQSMIF+8
IOPQSMNM EQU   IOPQSMLS
IOPQSMND EQU   IOPQSMNM
IOPQSMTP EQU   IOPQSMLS+8
IOPBS02  EQU   0
IOPBS04  EQU   0
IOPBAPF  EQU   IOPBS04
HMASMGTP EQU   0
GTPFUNCT EQU   HMASMGTP
GTPRETRN EQU   HMASMGTP+1
GTPRCDLN EQU   HMASMGTP+4
GTPKEYLN EQU   HMASMGTP+6
GTPBUFAD EQU   HMASMGTP+12
GTPRESTR EQU   HMASMGTP+16
GTPFLGS1 EQU   HMASMGTP+26
TPIFRECD EQU   0
TPIKEY   EQU   TPIFRECD
TPICSR   EQU   TPIKEY
TPIFMID  EQU   TPIKEY+7
TPIREQ   EQU   TPIKEY+14
TPIDATA  EQU   TPIFRECD+21
CCADSIDA EQU   0
IOPBS01  EQU   0
IOPBS03  EQU   0
CAUSER   EQU   0
IOPUDATA EQU   IOPEND
IOPINAM3 EQU   IOPINAME
@NM00050 EQU   IOPINAM3
IOPSTCMP EQU   IOPUDATA
IOPDYNDT EQU   IOPUDATA
IOPSPACE EQU   IOPDYNDT+44
IOPDTYPE EQU   IOPDYNDT+50
IOPNTMAX EQU   IOPDRMAP
IOPNTMAP EQU   IOPDRMAP
IOPCDMAP EQU   IOPNTMAP
IOPPTMAP EQU   IOPCDMAP
IOPSCMAP EQU   IOPPTMAP
IOPDIRCT EQU   IOPSCMAP+12
IOPCDMAX EQU   IOPDIRCT
IOPCQMAP EQU   IOPDRMAP
@NM00061 EQU   IOPUDATA
@NM00062 EQU   IOPUDATA
IOPASMNT EQU   IOPUDATA
IOPASMDR EQU   IOPASMNT
IOPABUNT EQU   IOPASMDR+1
IOPLMDNT EQU   IOPUDATA
IOPLMDDR EQU   IOPLMDNT
IOPLMLEP EQU   IOPLMDDR+1
IOPLMDF1 EQU   IOPLMLEP
IOPFLGS2 EQU   IOPLMDF1
IOPLMDF2 EQU   IOPLMLEP+1
IOPLMDF3 EQU   IOPLMLEP+2
IOPLMDF4 EQU   IOPLMLEP+3
IOPLMDF5 EQU   IOPLMDDR+5
IOPFLGS3 EQU   IOPLMDF5
IOPLMDFX EQU   IOPLMDNT+24
@NM00071 EQU   IOPLMDFX
IOPLNTRY EQU   IOPLMDFX+8
IOPLSYS  EQU   IOPLNTRY
IOPSYSLB EQU   IOPLSYS
IOPMACNT EQU   IOPUDATA
IOPMACDR EQU   IOPMACNT
IOPRMIDE EQU   IOPMACDR+1
IOPRMST  EQU   IOPRMIDE+7
IOPFMIDE EQU   IOPMACDR+9
IOPMACFX EQU   IOPMACNT+24
IOPBUNT  EQU   IOPMACFX
IOPMCEND EQU   IOPMACNT+104
IOPMACVR EQU   IOPMCEND
IOPMCENT EQU   IOPMACVR
IOPMCDTA EQU   IOPMCENT
IOPMCASM EQU   IOPMCDTA
IOPMACID EQU   IOPMCASM
IOPMACST EQU   IOPMCASM+7
IOPMCIND EQU   IOPMCENT+8
IOPEOFNT EQU   IOPUDATA
IOPSRCNT EQU   IOPUDATA
IOPSRCDR EQU   IOPSRCNT
@NM00082 EQU   IOPSRCDR+1
@NM00084 EQU   @NM00082+7
@NM00088 EQU   IOPSRCDR+9
IOPSRCFX EQU   IOPSRCNT+24
@NM00092 EQU   IOPSRCFX
IOPSREND EQU   IOPSRCNT+104
IOPSRCVR EQU   IOPSREND
IOPSNTRY EQU   IOPSRCVR
IOPSRDTA EQU   IOPSNTRY
IOPSRCID EQU   IOPSRDTA
IOPSRCST EQU   IOPSRDTA+7
IOPMODNT EQU   IOPUDATA
IOPMODDR EQU   IOPMODNT
@NM00098 EQU   IOPMODDR+1
@NM00100 EQU   @NM00098+7
@NM00104 EQU   IOPMODDR+9
IOPMODFX EQU   IOPMODNT+24
@NM00108 EQU   IOPMODFX
IOPMDLEP EQU   IOPMODFX+8
IOPMODF1 EQU   IOPMDLEP
IOPMODF2 EQU   IOPMDLEP+1
IOPMODF3 EQU   IOPMDLEP+2
IOPMODF4 EQU   IOPMDLEP+3
IOPMDEND EQU   IOPMODNT+104
IOPMODVR EQU   IOPMDEND
IOPMNTRY EQU   IOPMODVR
IOPMDDTA EQU   IOPMNTRY
IOPLMODS EQU   IOPMDDTA
IOPMODID EQU   IOPLMODS
IOPMODST EQU   IOPLMODS+7
IOPDLBNT EQU   IOPUDATA
IOPDLBDR EQU   IOPDLBNT
IOPDLBFX EQU   IOPDLBNT+24
@NM00119 EQU   IOPDLBFX
IOPDLEND EQU   IOPDLBNT+104
IOPDLBVR EQU   IOPDLEND
IOPDNTRY EQU   IOPDLBVR
IOPDSYS  EQU   IOPDNTRY
IOPSYSNT EQU   IOPUDATA
IOPSYSDR EQU   IOPSYSNT
IOPSYSF1 EQU   IOPSYSDR+4
IOPFLGS7 EQU   IOPSYSF1
IOPSYSFX EQU   IOPSYSNT+24
@NM00126 EQU   IOPSYSFX
IOPSYEND EQU   IOPSYSNT+184
IOPSYSVR EQU   IOPSYEND
IOPSYSTR EQU   IOPSYSVR
IOPSYNTR EQU   IOPSYSTR
IOPPTFNT EQU   IOPUDATA
IOPPTFDR EQU   IOPPTFNT
IOPPSTAT EQU   IOPPTFDR+2
IOPPTFF1 EQU   IOPPSTAT
IOPFLGS5 EQU   IOPPTFF1
IOPPTFF2 EQU   IOPPSTAT+1
IOPPTFF3 EQU   IOPPSTAT+3
IOPPTFFX EQU   IOPPTFNT+24
@NM00135 EQU   IOPPTFFX
@NM00136 EQU   @NM00135
IOPPDTES EQU   IOPPTFFX+41
@NM00139 EQU   IOPPDTES
IOPPTPFX EQU   IOPPDTES+6
IOPDATES EQU   IOPPTPFX
IOPPTEND EQU   IOPPTFNT+104
IOPPTFVR EQU   IOPPTEND
IOPPNTRY EQU   IOPPTFVR
IOPPMODS EQU   IOPPNTRY
IOPENTNT EQU   IOPUDATA+104
IOPSRLNT EQU   IOPUDATA+104
IOPPRENT EQU   IOPUDATA+104
IOPNPRNT EQU   IOPUDATA+104
IOPSUPNT EQU   IOPUDATA+104
IOPREQNT EQU   IOPUDATA+104
IOPIRQNT EQU   IOPUDATA+104
IOPFIDNT EQU   IOPUDATA+104
IOPDELNT EQU   IOPUDATA+104
IOPVERNT EQU   IOPUDATA+104
IOPSBYNT EQU   IOPUDATA+104
IOPQSMNT EQU   IOPUDATA
IOPQSMDR EQU   IOPQSMNT
IOPQFMNT EQU   IOPUDATA
IOPQFMDR EQU   IOPQFMNT
IOPQFEND EQU   IOPQFMNT+2
IOPQFMVR EQU   IOPQFEND
IOPQFMLS EQU   IOPQFMVR
IOPQFMNM EQU   IOPQFMLS
IOPQFMND EQU   IOPQFMNM
IOPPTSYS EQU   IOPUDATA
IOPPTSDR EQU   IOPPTSYS
IOPPTSFX EQU   IOPPTSYS+24
IOPDSSPC EQU   IOPPTSFX
IOPPTFG1 EQU   IOPPTSFX+34
IOPPSEND EQU   IOPPTSYS+1064
IOPPTSVR EQU   IOPPSEND
IOPPTNTR EQU   IOPPTSVR
@NM00164 EQU   IOPPTNTR
IOPPTFMD EQU   @NM00164
IOPPTREL EQU   IOPPTFMD
IOPBPDS  EQU   IOPUDATA
IOPBLEP1 EQU   IOPBPDS+8
IOPBLEP2 EQU   IOPBPDS+9
@NM00168 EQU   IOPBPDS+18
IOPBFTB0 EQU   @NM00168
IOPBFTB1 EQU   IOPBFTB0
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
IOPBCEND EQU   IOPBPDS+21
IOPBFTB3 EQU   IOPBFTB0+2
IOPBFTB2 EQU   IOPBFTB0+1
@NM00170 EQU   IOPBFTB1
IOPBAPFP EQU   IOPBFTB1
IOPBSSI  EQU   IOPBFTB1
IOPBPAGA EQU   IOPBFTB1
@NM00169 EQU   IOPBFTB1
IOPBAOSL EQU   IOPBFTB1
IOPBSEPA EQU   IOPBPDS+15
IOPBFTBL EQU   IOPBPDS+13
IOPBSTOR EQU   IOPBPDS+10
IOPBREFR EQU   IOPBLEP2
IOPBLEF  EQU   IOPBLEP2
IOPBTEST EQU   IOPBLEP2
IOPBNE   EQU   IOPBLEP2
@NM00167 EQU   IOPBLEP2
IOPBDC   EQU   IOPBLEP2
@NM00166 EQU   IOPBLEP1
IOPBSCTR EQU   IOPBLEP1
IOPBOL   EQU   IOPBLEP1
@NM00165 EQU   IOPBLEP1
IOPBOVLY EQU   IOPBLEP1
IOPBREUS EQU   IOPBLEP1
IOPBRENT EQU   IOPBLEP1
IOPBNL   EQU   IOPBPDS+7
IOPBTTRN EQU   IOPBPDS+4
IOPBZERO EQU   IOPBPDS+3
IOPBTTRT EQU   IOPBPDS
IOPPTIND EQU   IOPPTNTR+8
IOPPTSND EQU   IOPPTREL
@NM00163 EQU   IOPPTSFX+872
IOPSYZPP EQU   IOPPTSFX+772
IOPSYZPR EQU   IOPPTSFX+771
IOPSYZPS EQU   IOPPTSFX+763
IOPSYZAP EQU   IOPPTSFX+755
IOPSYUPP EQU   IOPPTSFX+655
IOPSYUPR EQU   IOPPTSFX+654
IOPSYUPS EQU   IOPPTSFX+646
IOPSYUPD EQU   IOPPTSFX+638
IOPSYSPP EQU   IOPPTSFX+538
IOPSYSPR EQU   IOPPTSFX+537
IOPSYSPS EQU   IOPPTSFX+529
IOPSYSUP EQU   IOPPTSFX+521
IOPSYLKP EQU   IOPPTSFX+421
IOPSYLKR EQU   IOPPTSFX+420
IOPSYLKS EQU   IOPPTSFX+412
IOPSYLKD EQU   IOPPTSFX+404
IOPSYCPP EQU   IOPPTSFX+304
IOPSYCPR EQU   IOPPTSFX+303
IOPSYCPS EQU   IOPPTSFX+295
IOPSYCPY EQU   IOPPTSFX+287
IOPSYCOP EQU   IOPPTSFX+187
IOPSYCOR EQU   IOPPTSFX+186
IOPSYCOS EQU   IOPPTSFX+178
IOPSYCOM EQU   IOPPTSFX+170
IOPSYASP EQU   IOPPTSFX+70
IOPSYASR EQU   IOPPTSFX+69
IOPSYASS EQU   IOPPTSFX+61
IOPSYASM EQU   IOPPTSFX+53
@NM00162 EQU   IOPPTSFX+35
@NM00161 EQU   IOPPTFG1
IOPPTSNJ EQU   IOPPTFG1
IOPPTSNP EQU   IOPPTFG1
IOPSYPLN EQU   IOPPTSFX+32
IOPDSPFX EQU   IOPPTSFX+6
IOPDSDIR EQU   IOPDSSPC+4
IOPDSSEC EQU   IOPDSSPC+2
IOPDSPRM EQU   IOPDSSPC
@NM00160 EQU   IOPPTSDR+4
IOPPTPEM EQU   IOPPTSDR+2
IOPPCNVL EQU   IOPPTSDR+1
@NM00159 EQU   IOPPTSDR
IOPQFMTP EQU   IOPQFMLS+8
@NM00158 EQU   IOPQFMLS+7
@NM00157 EQU   IOPQFMDR
@NM00153 EQU   IOPQSMDR
@NM00152 EQU   IOPSBYNT+8
IOPSBYST EQU   IOPSBYNT+7
IOPSBYNM EQU   IOPSBYNT
@NM00151 EQU   IOPVERNT+8
IOPVERST EQU   IOPVERNT+7
IOPVERNM EQU   IOPVERNT
@NM00150 EQU   IOPDELNT+8
IOPDELST EQU   IOPDELNT+7
IOPDELNM EQU   IOPDELNT
@NM00149 EQU   IOPFIDNT+8
IOPFIDST EQU   IOPFIDNT+7
IOPFIDNM EQU   IOPFIDNT
@NM00148 EQU   IOPIRQNT+8
IOPIRQST EQU   IOPIRQNT+7
IOPIRQNM EQU   IOPIRQNT
@NM00147 EQU   IOPREQNT+8
IOPREQST EQU   IOPREQNT+7
IOPREQNM EQU   IOPREQNT
@NM00146 EQU   IOPSUPNT+8
IOPSUPST EQU   IOPSUPNT+7
IOPSUPNM EQU   IOPSUPNT
@NM00145 EQU   IOPNPRNT+8
IOPNPRST EQU   IOPNPRNT+7
IOPNPRNM EQU   IOPNPRNT
@NM00144 EQU   IOPPRENT+8
IOPPREST EQU   IOPPRENT+7
IOPPRENM EQU   IOPPRENT
@NM00143 EQU   IOPSRLNT+8
IOPSRLST EQU   IOPSRLNT+7
@NM00142 EQU   IOPSRLNT+4
IOPSRLNM EQU   IOPSRLNT
@NM00141 EQU   IOPENTNT+8
IOPENTST EQU   IOPENTNT+7
IOPENTNM EQU   IOPENTNT
IOPPIND  EQU   IOPPNTRY+8
IOPPTFND EQU   IOPPMODS
IOPPFMID EQU   IOPPTFFX+73
@NM00140 EQU   IOPPTPFX+24
IOPUCLT  EQU   IOPDATES+21
IOPUCLD  EQU   IOPDATES+18
IOPACCT  EQU   IOPDATES+15
IOPACCD  EQU   IOPDATES+12
IOPRSTT  EQU   IOPDATES+9
IOPRSTD  EQU   IOPDATES+6
IOPAPPT  EQU   IOPDATES+3
IOPAPPD  EQU   IOPDATES
IOPRECT  EQU   @NM00139+3
IOPRECD  EQU   @NM00139
@NM00138 EQU   IOPPTFFX+8
@NM00137 EQU   @NM00135+7
IOPPRELN EQU   @NM00136
@NM00134 EQU   IOPPTFDR+20
IOPSBYNO EQU   IOPPTFDR+13
IOPDBYNO EQU   IOPPTFDR+6
@NM00133 EQU   IOPPTFF3
IOPFLF   EQU   IOPPTFF3
IOPDBYP  EQU   IOPPTFF3
IOPSBYP  EQU   IOPPTFF3
IOPPMDLP EQU   IOPPTFF2+1
IOPPADDP EQU   IOPPTFF2+1
@NM00132 EQU   IOPPTFF2+1
IOPLRFP  EQU   IOPPTFF2
IOPJCLP  EQU   IOPPTFF2
IOPSUPP  EQU   IOPPTFF2
IOPREQP  EQU   IOPPTFF2
IOPPREP  EQU   IOPPTFF2
IOPNPRP  EQU   IOPPTFF2
IOPIRQP  EQU   IOPPTFF2
IOPDELP  EQU   IOPPTFF2
IOPREGEN EQU   IOPFLGS5
IOPBYP   EQU   IOPFLGS5
IOPDUMMP EQU   IOPFLGS5
@NM00131 EQU   IOPFLGS5
IOPERROR EQU   IOPFLGS5
IOPACC   EQU   IOPFLGS5
IOPRES   EQU   IOPFLGS5
IOPAPP   EQU   IOPFLGS5
IOPPTYPE EQU   IOPPTFDR+1
@NM00130 EQU   IOPPTFDR
IOPSYSTP EQU   IOPSYSTR+8
IOPSYSND EQU   IOPSYNTR
@NM00129 EQU   IOPSYSFX+21
IOPSYSID EQU   IOPSYSFX+13
IOPNUCID EQU   IOPSYSFX+12
IOPSREL  EQU   IOPSYSFX+8
@NM00128 EQU   @NM00126+7
@NM00127 EQU   @NM00126
@NM00125 EQU   IOPSYSDR+5
@NM00124 EQU   IOPFLGS7
IOPSYNG  EQU   IOPFLGS7
IOPSYDL  EQU   IOPFLGS7
IOPSTSNP EQU   IOPFLGS7
IOPMTSNP EQU   IOPFLGS7
IOPPEMAX EQU   IOPSYSDR+2
IOPSCNVL EQU   IOPSYSDR+1
@NM00123 EQU   IOPSYSDR
IOPDLIND EQU   IOPDNTRY+8
IOPDLBND EQU   IOPDSYS
@NM00122 EQU   IOPDLBFX+8
@NM00121 EQU   @NM00119+7
@NM00120 EQU   @NM00119
@NM00118 EQU   IOPDLBDR+1
@NM00117 EQU   IOPDLBDR
IOPMDIND EQU   IOPMNTRY+8
@NM00116 EQU   IOPMODST
IOPMODND EQU   IOPMODID
IOPDLIB  EQU   IOPMODFX+72
@NM00115 EQU   IOPMODFX+12
@NM00114 EQU   IOPMODF4
@NM00113 EQU   IOPMODF3
@NM00112 EQU   IOPMODF2
IOPMPAGA EQU   IOPMODF2
IOPMNE   EQU   IOPMODF2
@NM00111 EQU   IOPMODF1
IOPMDC   EQU   IOPMODF1
IOPMREFR EQU   IOPMODF1
IOPMOVLY EQU   IOPMODF1
IOPMSCTR EQU   IOPMODF1
IOPMREUS EQU   IOPMODF1
IOPMRENT EQU   IOPMODF1
IOPMAPF  EQU   IOPMODF1
@NM00110 EQU   @NM00108+7
@NM00109 EQU   @NM00108
@NM00107 EQU   IOPMODDR+17
@NM00106 EQU   @NM00104+7
@NM00105 EQU   @NM00104
@NM00103 EQU   @NM00100
@NM00102 EQU   @NM00100
@NM00101 EQU   @NM00100
@NM00099 EQU   @NM00098
@NM00097 EQU   IOPMODDR
IOPSRIND EQU   IOPSNTRY+8
@NM00096 EQU   IOPSRCST
IOPSRCND EQU   IOPSRCID
IOPSRDLB EQU   IOPSRCFX+72
IOPSRSYS EQU   IOPSRCFX+64
@NM00095 EQU   IOPSRCFX+8
@NM00094 EQU   @NM00092+7
@NM00093 EQU   @NM00092
@NM00091 EQU   IOPSRCDR+18
IOPSRLNG EQU   IOPSRCDR+17
@NM00090 EQU   @NM00088+7
@NM00089 EQU   @NM00088
@NM00087 EQU   @NM00084
@NM00086 EQU   @NM00084
@NM00085 EQU   @NM00084
@NM00083 EQU   @NM00082
@NM00081 EQU   IOPSRCDR
IOPEOFND EQU   IOPEOFNT
IOPMCTYP EQU   IOPMCIND
@NM00080 EQU   IOPMACST
IOPMACND EQU   IOPMACID
IOPMCDLB EQU   IOPMACFX+72
IOPMCSYS EQU   IOPMACFX+64
@NM00079 EQU   IOPMACFX+8
IOPBUTYP EQU   IOPBUNT+7
IOPBUSMD EQU   IOPBUNT
@NM00078 EQU   IOPMACDR+18
IOPMCLNG EQU   IOPMACDR+17
IOPFMST  EQU   IOPFMIDE+7
IOPFMID  EQU   IOPFMIDE
@NM00077 EQU   IOPRMST
IOPRMASM EQU   IOPRMST
@NM00076 EQU   IOPRMST
IOPRMID  EQU   IOPRMIDE
@NM00075 EQU   IOPMACDR
IOPLMIND EQU   IOPLNTRY+8
IOPLMDND EQU   IOPSYSLB
@NM00073 EQU   @NM00071+7
@NM00072 EQU   @NM00071
@NM00070 EQU   IOPLMDDR+6
@NM00069 EQU   IOPFLGS3
IOPCHREP EQU   IOPFLGS3
IOPLINK  EQU   IOPFLGS3
IOPCOPY  EQU   IOPFLGS3
@NM00068 EQU   IOPLMDF4
@NM00067 EQU   IOPLMDF3
@NM00066 EQU   IOPLMDF2
IOPPAGA  EQU   IOPLMDF2
IOPNE    EQU   IOPLMDF2
@NM00065 EQU   IOPFLGS2
IOPDC    EQU   IOPFLGS2
IOPREFR  EQU   IOPFLGS2
IOPOVLY  EQU   IOPFLGS2
IOPSCTR  EQU   IOPFLGS2
IOPREUS  EQU   IOPFLGS2
IOPRENT  EQU   IOPFLGS2
IOPAPF   EQU   IOPFLGS2
@NM00064 EQU   IOPLMDDR
@NM00063 EQU   IOPASMDR+9
IOPABUTP EQU   IOPABUNT+7
IOPABUPT EQU   IOPABUNT
IOPNTLVL EQU   IOPASMDR
IOPALLOC EQU   @NM00062+4
IOPUSED  EQU   @NM00062
IOPTPSEQ EQU   @NM00061+8
IOPVLSER EQU   @NM00061+2
IOPBLKSI EQU   @NM00061
IOPCQMAX EQU   IOPCQMAP+12
@NM00060 EQU   IOPCQMAP+11
@NM00059 EQU   IOPCQMAP+8
@NM00058 EQU   IOPCQMAP
IOPPTMAX EQU   IOPCDMAX
@NM00057 EQU   IOPSCMAP+11
@NM00056 EQU   IOPSCMAP+8
@NM00055 EQU   IOPSCMAP
IOPDIRMX EQU   IOPNTMAX+12
@NM00054 EQU   IOPNTMAX+11
@NM00053 EQU   IOPNTMAX+8
@NM00052 EQU   IOPNTMAX
@NM00051 EQU   IOPDTYPE
IOPDMOD  EQU   IOPDTYPE
IOPDJCL  EQU   IOPDTYPE
IOPDSRC  EQU   IOPDTYPE
IOPDMAC  EQU   IOPDTYPE
IOPSDIR  EQU   IOPSPACE+4
IOPSSCND EQU   IOPSPACE+2
IOPSPRIM EQU   IOPSPACE
IOPDSN   EQU   IOPDYNDT
IOPNTYPE EQU   IOPSTCMP+17
IOPNNAME EQU   IOPSTCMP+9
IOPOTYPE EQU   IOPSTCMP+8
IOPONAME EQU   IOPSTCMP
IOPISEQ3 EQU   IOPINAM3+6
IOPITYP3 EQU   @NM00050+5
IOPIPTF3 EQU   @NM00050
TPISTAT  EQU   TPIDATA
@NM00173 EQU   HMASMGTP+27
GTPPSIZE EQU   GTPFLGS1
@NM00172 EQU   GTPFLGS1
GTPRCDNF EQU   GTPFLGS1
GTPNOSPM EQU   GTPFLGS1
GTPPOS   EQU   GTPRESTR+8
GTPRCD   EQU   GTPRESTR+4
GTPPAG   EQU   GTPRESTR
GTPWKAD  EQU   HMASMGTP+8
@NM00171 EQU   HMASMGTP+2
IOPBS04E EQU   IOPBS04+2
IOPBAPFC EQU   IOPBAPF+1
IOPBAPFL EQU   IOPBAPF
IOPBS2NM EQU   IOPBS02+3
IOPBS2EP EQU   IOPBS02
@NM00156 EQU   IOPQSMLS+7
@NM00155 EQU   @NM00154+7
@NM00074 EQU   IOPLMCTL+17
IOPLMCRD EQU   IOPLMCTL+9
IOPLMCRN EQU   IOPLMCTL+1
IOPLMCC  EQU   IOPLMCTL
@NM00049 EQU   IOPUSERL
@NM00048 EQU   IOPUSERL
IOPALIS  EQU   IOPUSERL
IOPTTR   EQU   IOPDRMAP+8
IOPINAM2 EQU   IOPINAM+1
IOPITYP2 EQU   IOPITYP
@NM00047 EQU   HMASMIOP+32
IOPDELDD EQU   IOPDDNAM
@NM00046 EQU   @NM00043+10
IOPSEQNO EQU   @NM00043+8
@NM00045 EQU   @NM00044+7
IOPPTFNM EQU   @NM00044
CCABMREC EQU   CCABELMT+10
CCABPOS  EQU   CCABMPOS+8
CCABNAME EQU   CCABMPOS
@NM00042 EQU   CCABLDLM+2
@NM00041 EQU   CCABLDLM
CCAUPDPM EQU   @NM00039+24
@NM00040 EQU   @NM00039+21
CCARUPDT EQU   CCAUPDRC
CCAUPDSP EQU   @NM00039+12
CCAUPDTE EQU   @NM00039+8
CCAUPDNM EQU   @NM00039
CCASUPPM EQU   @NM00037+24
@NM00038 EQU   @NM00037+21
CCARSUP  EQU   CCASUPRC
CCASUPSP EQU   @NM00037+12
CCAIOSUP EQU   @NM00037+8
CCASUPNM EQU   @NM00037
CCAZAPPM EQU   @NM00035+24
@NM00036 EQU   @NM00035+21
CCARZAP  EQU   CCAZAPRC
CCAZAPSP EQU   @NM00035+12
CCASPZAP EQU   @NM00035+8
CCAZAPNM EQU   @NM00035
CCACOMPM EQU   @NM00033+24
@NM00034 EQU   @NM00033+21
CCARCOMP EQU   CCACOMRC
CCACOMSP EQU   @NM00033+12
CCACOMRS EQU   @NM00033+8
CCACOMNM EQU   @NM00033
CCACPYPM EQU   @NM00031+24
@NM00032 EQU   @NM00031+21
CCARCOPY EQU   CCACPYRC
CCACPYSP EQU   @NM00031+12
CCACOPY  EQU   @NM00031+8
CCACPYNM EQU   @NM00031
CCAASMPM EQU   @NM00029+24
@NM00030 EQU   @NM00029+21
CCARASM  EQU   CCAASMRC
CCAASMSP EQU   @NM00029+12
CCAASM   EQU   @NM00029+8
CCAASMNM EQU   @NM00029
CCALKDPM EQU   @NM00027+24
@NM00028 EQU   @NM00027+21
CCARLINK EQU   CCALKDRC
CCALKDSP EQU   @NM00027+12
CCALKED  EQU   @NM00027+8
CCALKDNM EQU   @NM00027
CCAPGMPM EQU   @NM00025+24
@NM00026 EQU   @NM00025+21
CCABPGRC EQU   @NM00025+20
CCABPGSP EQU   @NM00025+12
CCABPGAD EQU   @NM00025+8
CCABPGNM EQU   @NM00025
CCAEND   EQU   HMASMCCA+371
@NM00024 EQU   HMASMCCA+309
CCACURDD EQU   CCAFDSNG+3
CCACURDS EQU   CCAFDSNG+2
@NM00023 EQU   CCAFLAGB
CCAOUTNG EQU   CCAFLAGB
CCALOGNG EQU   CCAFLAGB
CCAFMID  EQU   HMASMCCA+291
CCALSTDS EQU   CCAFCTL+8
CCARPTDS EQU   CCAFCTL+7
CCATIME  EQU   CCAFCTL+4
CCADATE  EQU   CCAFCTL+1
@NM00022 EQU   CCAFLAG9
CCARVCAN EQU   CCAFLAG9
CCARVEST EQU   CCAFLAG9
CCAPTSNJ EQU   CCAFLAG9
CCASTSNP EQU   CCAFLAG9
CCAMTSNP EQU   CCAFLAG9
CCAPTSNP EQU   CCAFLAG9
@NM00021 EQU   CCAFLAG8
CCAACDSC EQU   CCAFLAG8
CCACDSC  EQU   CCAFLAG8
@NM00020 EQU   CCAFLAG6
CCAACRUP EQU   CCAFLAG6
CCACRQUP EQU   CCAFLAG6
CCAACDUP EQU   CCAFLAG6
CCACDSUP EQU   CCAFLAG6
@NM00019 EQU   CCAFLAG5
CCAACROS EQU   CCAFLAG5
CCACRQOS EQU   CCAFLAG5
CCAACDOS EQU   CCAFLAG5
CCACDSOS EQU   CCAFLAG5
@NM00018 EQU   CCAFLAG4
CCAACRIS EQU   CCAFLAG4
CCACRQIS EQU   CCAFLAG4
CCAACDIS EQU   CCAFLAG4
CCACDSIS EQU   CCAFLAG4
@NM00017 EQU   CCAFLAG3+1
CCARGNP  EQU   CCAFLAG3+1
CCADISRQ EQU   CCAFLAG3+1
CCAICTOK EQU   CCAFLAG3
CCADELP  EQU   CCAFLAG3
CCACMPRS EQU   CCAFLAG3
CCAZAPP  EQU   CCAFLAG3
CCALINKP EQU   CCAFLAG3
CCACOPYP EQU   CCAFLAG3
CCAASIP  EQU   CCAFLAG3
CCAUPDP  EQU   CCAFLAG3
CCAEOSMP EQU   CCAFLAG2
CCAEOFNC EQU   CCAFLAG2
@NM00016 EQU   CCAFLAG2
CCACHECK EQU   CCAFLAG2
CCATERM  EQU   CCAFLAG2
CCASVCLB EQU   CCAFLAG2
CCANCPTF EQU   CCAFLAG2
@NM00015 EQU   CCAFLAG1+1
CCAUNL   EQU   CCAFLAG1+1
CCARESET EQU   CCAFLAG1+1
CCALOG   EQU   CCAFLAG1+1
CCACNV   EQU   CCAFLAG1+1
CCALIST  EQU   CCAFLAG1
CCAUPDU  EQU   CCAFLAG1
CCAUPDJ  EQU   CCAFLAG1
CCARES   EQU   CCAFLAG1
CCAREJ   EQU   CCAFLAG1
CCAAPPLY EQU   CCAFLAG1
CCAREC   EQU   CCAFLAG1
CCAFUNCT EQU   CCAFFUNC
@NM00014 EQU   @NM00009+18
@NM00013 EQU   @NM00009+16
CCATBLPA EQU   @NM00009+12
@NM00012 EQU   @NM00009+8
@NM00011 EQU   @NM00009+4
@NM00010 EQU   @NM00009
CCAGTP3  EQU   CCAFGTP+12
CCAGTP2  EQU   CCAFGTP+8
CCAGTP1  EQU   CCAFGTP+4
CCASETAD EQU   CCASEGTP
CCACLST  EQU   CCAFPGM+12
CCASPDCB EQU   CCAFPGM+8
CCAICLMD EQU   CCAFICT+12
CCAICMOD EQU   CCAFICT+8
CCAICPTF EQU   CCAFICT+4
CCAICT   EQU   CCAFICT
CCARVAD  EQU   CCAFSTA
CCAACDID EQU   CCAFSYS+32
CCACDSID EQU   CCAFSYS+24
CCALNLEN EQU   CCAFSYS+22
@NM00008 EQU   CCAFLAGA
CCAPSYSF EQU   CCAFLAGA
CCAASYSF EQU   CCAFLAGA
CCACSYSF EQU   CCAFLAGA
CCANUCID EQU   CCAFSYS+20
CCAASREL EQU   CCAFSYS+16
CCACSREL EQU   CCASREL
CCAPEMAX EQU   CCAFSYS+10
CCAPGLEN EQU   CCAFSYS+8
CCAIOPAS EQU   CCAFSYS+4
CCAIOPCS EQU   CCAFSYS
CCAPESIZ EQU   CCAFIOP+4
@NM00007 EQU   CCAFLAG7+3
CCALOGP  EQU   CCAFLAG7+2
CCAOUTP  EQU   CCAFLAG7+2
CCASLBP  EQU   CCAFLAG7+2
CCARPTP  EQU   CCAFLAG7+2
CCALISTP EQU   CCAFLAG7+2
CCAJCLP  EQU   CCAFLAG7+2
CCAPTFP  EQU   CCAFLAG7+2
CCATLBP  EQU   CCAFLAG7+2
CCAUT3P  EQU   CCAFLAG7+1
CCAUT2P  EQU   CCAFLAG7+1
CCAUT1P  EQU   CCAFLAG7+1
CCAWK5P  EQU   CCAFLAG7+1
CCAWK4P  EQU   CCAFLAG7+1
CCAWK3P  EQU   CCAFLAG7+1
CCAWK2P  EQU   CCAFLAG7+1
CCAWK1P  EQU   CCAFLAG7+1
CCAACRQP EQU   CCAFLAG7
CCACRQP  EQU   CCAFLAG7
CCASTSP  EQU   CCAFLAG7
CCAMTSP  EQU   CCAFLAG7
CCAPTSP  EQU   CCAFLAG7
CCASCDSP EQU   CCAFLAG7
CCAACDSP EQU   CCAFLAG7
CCACDSP  EQU   CCAFLAG7
@NM00006 EQU   CCAFBUFR+122
@NM00005 EQU   CCAFBUFR+120
@NM00004 EQU   CCAFBUFR+118
CCATBFMX EQU   CCAFBUFR+116
CCA4BFMX EQU   CCAFBUFR+114
CCA3BFMX EQU   CCAFBUFR+112
CCA2BFMX EQU   CCAFBUFR+110
CCA1BFMX EQU   CCAFBUFR+108
CCAXBFMX EQU   CCAFBUFR+106
CCAQBFMX EQU   CCAFBUFR+104
CCASBFMX EQU   CCAFBUFR+102
CCAMBFMX EQU   CCAFBUFR+100
CCAPBFMX EQU   CCAFBUFR+98
CCAVBFMX EQU   CCAFBUFR+96
CCAABFMX EQU   CCAFBUFR+94
CCACBFMX EQU   CCAFBUFR+92
@NM00003 EQU   CCAFBUFR+88
@NM00002 EQU   CCAFBUFR+84
CCA4BFSZ EQU   CCAFBUFR+80
CCATBFSZ EQU   CCAFBUFR+76
CCAWBFSZ EQU   CCAFBUFR+72
CCAQBFSZ EQU   CCAFBUFR+68
CCAPBFSZ EQU   CCAFBUFR+64
CCAVBFSZ EQU   CCAFBUFR+60
CCACBFSZ EQU   CCAFBUFR+56
@NM00001 EQU   CCAFBUFR+52
CCA4BFOA EQU   CCAFBUFR+48
CCA4BFIA EQU   CCAFBUFR+44
CCATBFIA EQU   CCAFBUFR+40
CCAWBFOA EQU   CCAFBUFR+36
CCAWBFIA EQU   CCAFBUFR+32
CCAQBFOA EQU   CCAFBUFR+28
CCAQBFIA EQU   CCAFBUFR+24
CCAPBFOA EQU   CCAFBUFR+20
CCAPBFIA EQU   CCAFBUFR+16
CCAVBFOA EQU   CCAFBUFR+12
CCAVBFIA EQU   CCAFBUFR+8
CCACBFOA EQU   CCAFBUFR+4
CCACBFIA EQU   CCAFBUFR
CCAID    EQU   HMASMCCA
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RF00189 EQU   @RC00185
@RF00244 EQU   @EL00002
@RC00254 EQU   @EL00002
@RC00262 EQU   @RC00260
@RF00276 EQU   @RC00260
@ENDDATA EQU   *
         END   HMASMCRW,(C'PLS1958',0802,78334)
