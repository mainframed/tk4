         TITLE 'HMASMCRD CONTROL CARD READ ROUTINE'
HMASMCRD CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'HMASMCRD  78.334'                                 0001
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                     0001
         BALR  @12,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,@12                                         0001
         ST    @13,@SA00001+4                                      0001
         LA    @14,@SA00001                                        0001
         ST    @14,8(,@13)                                         0001
         LR    @13,@14                                             0001
         MVC   @PC00001(4),0(@01)                                  0001
         EJECT
*                                                                  0152
*   /*****************************************************************/
*   /*                                                               */
*   /* MAIN MODULE SEGMENT                                           */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0152
*   CRDRTNCD=ZERO;                  /* INIT RETURN CODE              */
         SLR   CRDRTNCD,CRDRTNCD                                   0152
*   IOPPTR=ADDR(CRDIOP);            /* INIT PTR TO LOCAL IOP         */
         LA    IOPPTR,CRDIOP                                       0153
*   SCPPTR=CRPSCPAD;                /* PTR TO SCP                    */
         L     @10,@PC00001                                        0154
         L     SCPPTR,CRPSCPAD(,@10)                               0154
*   RFY                                                            0155
*     HMASMSCP BASED(SCPPTR);       /*                               */
*                                                                  0155
*   /*****************************************************************/
*   /*                                                               */
*   /* READ RECORD INTO BUFFER                                       */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0156
*   IF CRDRTNCD=ZERO                /* IF PREV FUNCTIONS OK          */
*     THEN                          /*                               */
         CH    CRDRTNCD,@CH00092                                   0156
         BNE   @RF00156                                            0156
*     DO;                           /*                               */
*       CALL CRDGET;                /* GET NEXT RCD INTO BUFFER      */
         BAL   @14,CRDGET                                          0158
*       RFY                                                        0159
*         RTNCODE RSTD;             /*                               */
*       CRDRTNCD=MAX(CRDRTNCD,RTNCODE);/* SAVE RETURN CODE           */
         CR    CRDRTNCD,RTNCODE                                    0160
         BNL   *+6
         LR    CRDRTNCD,RTNCODE                                    0160
*       RFY                                                        0161
*         RTNCODE UNRSTD;           /*                               */
*     END;                          /*                               */
*                                                                  0162
*   /*****************************************************************/
*   /*                                                               */
*   /* CALL USER EXIT ROUTINE                                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0163
*   IF CRDRTNCD=ZERO                /* IF PREV FUNCTIONS OK          */
*     THEN                          /*                               */
@RF00156 CH    CRDRTNCD,@CH00092                                   0163
         BNE   @RF00163                                            0163
*     DO;                           /*                               */
*       CALL CRDEXIT;               /* GET NEXT RCD INTO BUFFER      */
         BAL   @14,CRDEXIT                                         0165
*       RFY                                                        0166
*         RTNCODE RSTD;             /*                               */
*       CRDRTNCD=MAX(CRDRTNCD,RTNCODE);/* SAVE RETURN CODE           */
         CR    CRDRTNCD,RTNCODE                                    0167
         BNL   *+6
         LR    CRDRTNCD,RTNCODE                                    0167
*       RFY                                                        0168
*         RTNCODE UNRSTD;           /*                               */
*     END;                          /*                               */
*                                                                  0170
*   /*****************************************************************/
*   /*                                                               */
*   /* WRITE RECORD TO SPECIFIED OTPUT DATASET(S)                    */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0170
*   IF CRDRTNCD=ZERO                /* IF PREV FUNCTIONS OK          */
*       &(CRPBUFFR(1:2)^='++'       /* AND NOT SMP CNTL CARD         */
*       ×CRPNOWPP=OFF)              /* OR USER INDICATED WRITE       */
*     THEN                          /*                               */
@RF00163 CH    CRDRTNCD,@CH00092                                   0170
         BNE   @RF00170                                            0170
         L     @10,@PC00001                                        0170
         CLC   CRPBUFFR(2,@10),@CC01343                            0170
         BNE   @RT00170                                            0170
         TM    CRPNOWPP(@10),B'00100000'                           0170
         BNZ   @RF00170                                            0170
@RT00170 DS    0H                                                  0171
*     DO;                           /*                               */
*       CALL CRDPUT;                /* GET NEXT RCD INTO BUFFER      */
         BAL   @14,CRDPUT                                          0172
*       RFY                                                        0173
*         RTNCODE RSTD;             /*                               */
*       CRDRTNCD=MAX(CRDRTNCD,RTNCODE);/* SAVE RETURN CODE           */
         CR    CRDRTNCD,RTNCODE                                    0174
         BNL   *+6
         LR    CRDRTNCD,RTNCODE                                    0174
*       RFY                                                        0175
*         RTNCODE UNRSTD;           /*                               */
*     END;                          /*                               */
*                                                                  0176
*   /*****************************************************************/
*   /*                                                               */
*   /* RESET VARIABLES IN SCAN PARAMETER LIST                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0177
*   IF CRPSCPAD^=ZERO               /* IF SCP PASSED                 */
*     THEN                          /*                               */
@RF00170 SLR   @10,@10                                             0177
         L     @05,@PC00001                                        0177
         C     @10,CRPSCPAD(,@05)                                  0177
         BE    @RF00177                                            0177
*     DO;                           /*                               */
*       SCPCHAR=ADDR(CRPBUFFR);     /* SET PTR TO BUFFER             */
         LA    @05,CRPBUFFR(,@05)                                  0179
         ST    @05,SCPCHAR(,SCPPTR)                                0179
*       IF CRDRTNCD=ZERO            /* IF RCD PROCESSED OK           */
*         THEN                      /*                               */
         CR    CRDRTNCD,@10                                        0180
         BNE   @RF00180                                            0180
*         SCPRET=SCPGOOD;           /* SET RETURN CODE OK            */
         MVI   SCPRET(SCPPTR),X'00'                                0181
*       ELSE                        /*                               */
*         SCPRETRN=CRDRTNCD;        /* SET BAD RETURN CODE           */
         B     @RC00180                                            0182
@RF00180 STC   CRDRTNCD,SCPRETRN(,SCPPTR)                          0182
*     END;                          /*                               */
*                                                                  0183
@RC00180 DS    0H                                                  0184
*   /*****************************************************************/
*   /*                                                               */
*   /* RETURN WITH CODE SET UP DURING PROCESSING                     */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0184
*   CRPRETRN=CRDRTNCD;              /* MOVE RC TO PARM LIST          */
@RF00177 L     @10,@PC00001                                        0184
         STC   CRDRTNCD,CRPRETRN(,@10)                             0184
*   RETURN CODE(CRDRTNCD);          /*                               */
         LR    @15,CRDRTNCD                                        0185
         L     @13,4(,@13)                                         0185
         L     @14,12(,@13)                                        0185
         LM    @00,@12,20(@13)                                     0185
         BR    @14                                                 0185
         EJECT
*                                                                  0186
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS PROCEDURE IS CALLED TO READ THE NEXT RECORD INTO THE     */
*   /* INPUT BUFFER                                                  */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0186
*CRDGET:                            /*                               */
*   PROC;                           /*                               */
CRDGET   STM   @14,@12,@SA00002                                    0186
*   DECLARE                         /*                               */
*     GETRTNCD FIXED(8);            /*                               */
*   GETRTNCD=ZERO;                  /*                               */
         SLR   GETRTNCD,GETRTNCD                                   0188
*   IF CRPBFPRM=OFF                 /* IF BUFFER ALREADY PRIMED      */
*       &CRPEXADD=OFF               /* AND EXIT NOT TO ADD RCDS      */
*       &CRPEOFSW=OFF               /* AND NOT EOF YET               */
*     THEN                          /*                               */
         L     @10,@PC00001                                        0189
         TM    CRPBFPRM(@10),B'10000000'                           0189
         BNZ   @RF00189                                            0189
         TM    CRPEXADD(@10),B'11000000'                           0189
         BNZ   @RF00189                                            0189
*     DO;                           /*                               */
*       IOPDSID=CRPINDS;            /* SPECIFY INPUT DSID            */
         MVC   IOPDSID(1,IOPPTR),CRPINDS(@10)                      0191
*       IF CRPINDS=IOPANYDD         /* NON-SMP DATASET               */
*           ×CRPINDS=IOPTXTDD       /* NON-SMP DATASET               */
*           ×CRPINDS=IOPDDNM        /* NON-SMP DATASET               */
*         THEN                                                     0192
         CLI   CRPINDS(@10),24                                     0192
         BE    @RT00192                                            0192
         CLI   CRPINDS(@10),24                                     0192
         BE    @RT00192                                            0192
         CLI   CRPINDS(@10),14                                     0192
         BNE   @RF00192                                            0192
@RT00192 DS    0H                                                  0193
*         IOPDDNAM=CRPDDNAM;        /* INITIALIZE DATASET DDNAME     */
         L     @10,@PC00001                                        0193
         MVC   IOPDDNAM(8,IOPPTR),CRPDDNAM(@10)                    0193
*       IOPFUNCT=IOPREAD;           /* INDICATE INPUT OPERATION      */
@RF00192 MVI   IOPFUNCT(IOPPTR),X'01'                              0194
*       IOPBUFAD=ADDR(CRPBUFFR);    /* TO PARM BUFFER                */
         L     @10,@PC00001                                        0195
         LA    @10,CRPBUFFR(,@10)                                  0195
         ST    @10,IOPBUFAD(,IOPPTR)                               0195
*       CALL HMASMIO(HMASMIOP);     /* READ A RECORD                 */
         ST    IOPPTR,@AL00001                                     0196
         L     @15,@CV01324                                        0196
         LA    @01,@AL00001                                        0196
         BALR  @14,@15                                             0196
*       IF IOPRETRN=IOPEOF          /*                               */
*         THEN                      /*                               */
         CLI   IOPRETRN(IOPPTR),4                                  0197
         BNE   @RF00197                                            0197
*         DO;                       /*                               */
*           IF CRPUXNUM=ZERO        /* IF NO USER EXIT TO ADD MORE   */
*             THEN                  /* RECORDS THEN SET EOF SW IN    */
         L     @10,@PC00001                                        0199
         CLI   CRPUXNUM(@10),0                                     0199
         BNE   @RF00199                                            0199
*             DO;                   /*                               */
*               GETRTNCD=CRPEOF;    /* SET EOF RC                    */
         LA    GETRTNCD,4                                          0201
*               CRPEOFEN=ON;        /* PARAMETER                     */
         OI    CRPEOFEN(@10),B'10000000'                           0202
*             END;                  /*                               */
*           CRPEOFSW=ON;            /* SET EOF SW                    */
@RF00199 L     @10,@PC00001                                        0204
         OI    CRPEOFSW(@10),B'10000000'                           0204
*         END;                      /*                               */
*       ELSE                        /*                               */
*         GETRTNCD=IOPRETRN;        /* SAVE RETURN CODE              */
*                                                                  0206
         B     @RC00197                                            0206
@RF00197 SLR   GETRTNCD,GETRTNCD                                   0206
         IC    GETRTNCD,IOPRETRN(,IOPPTR)                          0206
*       /*************************************************************/
*       /*                                                           */
*       /* RESET CCA TIME FIELDS                                     */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0207
*       IF CRPSCNCL=OFF             /* IF CALL FROM DRV              */
*           &CRPINDS=IOPCONTR       /* AND INPUT IS SMPCNTL          */
*         THEN                      /* THEN GET NEW TIME             */
@RC00197 L     @10,@PC00001                                        0207
         TM    CRPSCNCL(@10),B'00000001'                           0207
         BNZ   @RF00207                                            0207
         CLI   CRPINDS(@10),9                                      0207
         BNE   @RF00207                                            0207
*         DO;                       /* FOR HEADINGS                  */
*           GEN(TIME DEC);          /* GET TIME                      */
         TIME DEC
*           RFY                                                    0210
*             R0 RSTD;                                             0210
*           TIMETEMP=R0;            /* SAVE TIME                     */
         ST    R0,TIMETEMP                                         0211
*           RFY                                                    0212
*             R0 UNRSTD;                                           0212
*           CCATIME=TIMETEMP(1:3);  /* SAVE TIME IN CCA              */
         L     @10,@CA00099                                        0213
         MVC   CCATIME-HMASMCCA(3,@10),TIMETEMP                    0213
*         END;                      /*                               */
*     END;                          /*                               */
@RF00207 DS    0H                                                  0216
*   RETURN CODE(GETRTNCD);          /*                               */
@RF00189 LR    @15,GETRTNCD                                        0216
         L     @14,@SA00002                                        0216
         LM    @00,@12,@SA00002+8                                  0216
         BR    @14                                                 0216
*   END CRDGET;                     /*                               */
         EJECT
*                                                                  0218
*/********************************************************************/
*/*                                                                  */
*/* CRDEXIT - CALL TO USER EXIT ROUTINE                              */
*/*                                                                  */
*/********************************************************************/
*/*                                                                  */
*/* USER INTERFACE - USERREG (REG 1) CONTAINS ADDR OF 80-BYTE BUFFER */
*/*    OF PTF RECORD. IF THE HIGH-ORDER BYTE IS ON, EOF WAS FOUND    */
*/*    ON PTF FILE. IF USER WANTS TO SUBSTITUTE HIS PTF RECORD FOR   */
*/*    ONE READ BY ROUTINE, HE MUST MOVE INTO OUR BUFFER HIS RECORD  */
*/*    AND NOT SUBSTITUTE BUFFER ADDRESSES.                          */
*/*                                                                  */
*/* OUTPUT - PTF RECORD IN BUFFER POINTED TO BY IOPBUFAD.            */
*/*    RETURN CODES- (FROM USER EXIT TO READ ROUTINE)                */
*/*           0 - NORMAL RETURN                                      */
*/*           4 - UNUSED                                             */
*/*           8 - REQUEST TO TERMINATE THIS SYSMOD                   */
*/*          12 - REQUEST TO TERMINATE THIS FUNCTION                 */
*/*          16 - REQUEST TO TERMINATE SMP                           */
*/*          20 - NORMAL RETURN, PROCESS RCD IN BUFFER               */
*/*               BYPASS READ ON NEXT REQUEST. USER WILL ADD RCD     */
*/*          24 - USER DELETED RCD IN BURRDER.                       */
*/*               READ NEXT RCD AND RETURN TO USER EXIT.             */
*/*                                                                  */
*/********************************************************************/
*                                                                  0218
*CRDEXIT:                                                          0218
*   PROC;                                                          0218
CRDEXIT  STM   @14,@12,@SA00003                                    0218
*   DECLARE                         /*                               */
*     EXTRTNCD FIXED(8);            /*                               */
*   DECLARE                         /*                               */
*     SAVRTNCD FIXED(31);           /* RTNCODE SAVE AREA             */
*   DECLARE                         /*                               */
*     1 EXTSW BIT(8),               /*                               */
*       3 STOP BIT(1),              /* LOOP CONTROL                  */
*       3 * BIT(7);                 /* UNUSED                        */
*   EXTRTNCD=ZERO;                  /*                               */
         SLR   EXTRTNCD,EXTRTNCD                                   0222
*   STOP=OFF;                       /* INIT LOOP CONTROL             */
         NI    STOP,B'01111111'                                    0223
*   DO WHILE(                       /* LOOP                          */
*         CRPUXNUM^=ZERO            /* WHILE EXIT SPECIFIED          */
*         &CRPBFPRM=OFF             /* AND BUFFER NOT PRIMED         */
*         &STOP=OFF);               /* AND SW SET                    */
         B     @DE00224                                            0224
@DL00224 DS    0H                                                  0225
*     STOP=ON;                      /* SET SW TO STOP LOOP           */
         OI    STOP,B'10000000'                                    0225
*     IF CRPEXADD=ON                /* IF PREV CALL TO EXIT INDICATED
*                                      ADD                           */
*         ×CRPEOFSW=OFF             /* OR EOF NOT ENCOUNTERED YET    */
*         ×CRPEOF1=OFF              /* OR IF EOF THIS IS FIRST TIME
*                                      THRU AFTER EOF                */
*       THEN                        /* THEN CALL USER EXIT           */
         L     @10,@PC00001                                        0226
         TM    CRPEXADD(@10),B'01000000'                           0226
         BNZ   @RT00226                                            0226
         TM    CRPEOFSW(@10),B'10010000'                           0226
         BO    @RF00226                                            0226
@RT00226 DS    0H                                                  0227
*       DO;                         /*                               */
*CALLEXIT:                          /*                               */
*         UX001PRM=''B;             /* ZERO 001 PARM                 */
CALLEXIT XC    UX001PRM(81),UX001PRM                               0228
*         IF CRPEOFSW=ON            /* IF EOF ENCOUNTERED            */
*           THEN                    /*                               */
         L     @10,@PC00001                                        0229
         TM    CRPEOFSW(@10),B'10000000'                           0229
         BNO   @RF00229                                            0229
*           UX001RC=UX001EOF;       /* SET EOF RC                    */
         MVI   UX001RC,X'04'                                       0230
*         UX001RCD=CRPBUFFR;        /* MOVE RCD TO BUFFER            */
@RF00229 L     @10,@PC00001                                        0231
         MVC   UX001RCD(80),CRPBUFFR(@10)                          0231
*         CALL HMASMUXC(UXPUX001,UX001PRM);/* CALL USER EXIT INTF    */
         L     @15,@CV01325                                        0232
         LA    @01,@AL00232                                        0232
         BALR  @14,@15                                             0232
*         RFY                                                      0233
*           RTNCODE RSTD;                                          0233
*                                                                  0233
*         /***********************************************************/
*         /*                                                         */
*         /* IF NORMAL RETURN CODE                                   */
*         /*                                                         */
*         /***********************************************************/
*                                                                  0234
*         IF RTNCODE=UXPGOOD        /* IF USE INPUT BUFFER           */
*           THEN                    /*                               */
         LTR   RTNCODE,RTNCODE                                     0234
         BNZ   @RF00234                                            0234
*           DO;                     /*                               */
*             CRPBUFFR=UX001RCD;    /* MOVE RCD TO PARM              */
         L     @14,@PC00001                                        0236
         MVC   CRPBUFFR(80,@14),UX001RCD                           0236
*             IF CRPEOFSW=ON        /* IF EOF HIT ALREADY            */
*               THEN                /*                               */
         TM    CRPEOFSW(@14),B'10000000'                           0237
         BNO   @RF00237                                            0237
*               DO;                 /*                               */
*                 CRPEOFEN=ON;      /* END OF FILE SW                */
         OI    CRPEOFEN(@14),B'10000000'                           0239
*                 EXTRTNCD=CRPEOF;  /* RESET RC TO EOF               */
         LA    EXTRTNCD,4                                          0240
*               END;                /*                               */
*             ELSE                  /* IF NOT EOF                    */
*               IF CRPEXADD=ON      /* IF USER ADDED LAST RCD        */
*                 THEN              /*                               */
         B     @RC00237                                            0242
@RF00237 L     @14,@PC00001                                        0242
         TM    CRPEXADD(@14),B'01000000'                           0242
         BNO   @RF00242                                            0242
*                 DO;               /*                               */
*                   CRPEXADD=OFF;   /* TURN OFF ADD SW               */
         NI    CRPEXADD(@14),B'10111111'                           0244
*                   SAVRTNCD=RTNCODE;/* SAVE RC                      */
         LR    SAVRTNCD,RTNCODE                                    0245
*                   CALL CRDGET;    /* GET NEXT RCD                  */
         BAL   @14,CRDGET                                          0246
*                   IF RTNCODE<=CRPEOF/* IF NO ERROR IN GET          */
*                     THEN          /*                               */
         CH    RTNCODE,@CH00094                                    0247
         BH    @RF00247                                            0247
*                     DO;           /*                               */
*                       STOP=OFF;   /*                               */
         NI    STOP,B'01111111'                                    0249
*                       RTNCODE=SAVRTNCD;/* RESET RC                 */
         LR    RTNCODE,SAVRTNCD                                    0250
*                     END;          /*                               */
*                   ELSE            /* IF ERR IN GET                 */
*                     EXTRTNCD=RTNCODE;/* SAVE RC                    */
         B     @RC00247                                            0252
@RF00247 LR    EXTRTNCD,RTNCODE                                    0252
*                 END;              /*                               */
*           END;                    /*                               */
*                                                                  0254
*         /***********************************************************/
*         /*                                                         */
*         /* IF REQUEST TO ADD RECORD AFTER THIS ONE                 */
*         /*                                                         */
*         /***********************************************************/
*                                                                  0255
*         ELSE                      /*                               */
*           DO;                     /*                               */
         B     @RC00234                                            0255
@RF00234 DS    0H                                                  0256
*             CRPEXADD=OFF;         /* NO EXTRA ADD                  */
         L     @14,@PC00001                                        0256
         NI    CRPEXADD(@14),B'10111111'                           0256
*             IF RTNCODE=UXPADD     /* IF ADD REQUEST                */
*               THEN                /*                               */
         CH    RTNCODE,@CH00411                                    0257
         BNE   @RF00257                                            0257
*               DO;                 /*                               */
*                 CRPEXADD=ON;      /* SET TO ADD RECORD NEXT TIME   */
         OI    CRPEXADD(@14),B'01000000'                           0259
*                 CRPBUFFR=UX001RCD;/* MOVE RCD TO BUFFER            */
         MVC   CRPBUFFR(80,@14),UX001RCD                           0260
*                 IF CRPEOFSW=ON    /* IF EOF HIT                    */
*                     &CRPEOF1=OFF  /* AND THIS IS FIRST TIME AFTER  */
*                   THEN            /* EOF THEN                      */
         TM    CRPEOFSW(@14),B'10000000'                           0261
         BNO   @RF00261                                            0261
         TM    CRPEOF1(@14),B'00010000'                            0261
         BNZ   @RF00261                                            0261
*                   DO;             /*                               */
*                     CRPEOF1=ON;   /* SET SW TO PREVENT AGAIN       */
         OI    CRPEOF1(@14),B'00010000'                            0263
*                     GO TO CALLEXIT;/* GO BACK TO EXIT ONCE         */
         B     CALLEXIT                                            0264
*                   END;            /*                               */
*               END;                /*                               */
*                                                                  0266
*             /*******************************************************/
*             /*                                                     */
*             /* IF REQUEST TO DELETE CURRENT RECORD                 */
*             /*                                                     */
*             /*******************************************************/
*                                                                  0267
*             ELSE                  /*                               */
*               IF RTNCODE=UXPDEL   /* IF DEL CURRENT RCD            */
*                 THEN              /*                               */
         B     @RC00257                                            0267
@RF00257 CH    RTNCODE,@CH00221                                    0267
         BNE   @RF00267                                            0267
*                 DO;               /*                               */
*                   IF CRPEOFSW=ON  /* IF AT EOF                     */
*                     THEN          /*                               */
         L     @14,@PC00001                                        0269
         TM    CRPEOFSW(@14),B'10000000'                           0269
         BNO   @RF00269                                            0269
*                     EXTRTNCD=CRPEOF;/* SET RC TO EOF               */
         LA    EXTRTNCD,4                                          0270
*                   ELSE            /*                               */
*                     DO;           /*                               */
         B     @RC00269                                            0271
@RF00269 DS    0H                                                  0272
*                       SAVRTNCD=RTNCODE;/* SAVE RC ACROSS CALL      */
         LR    SAVRTNCD,RTNCODE                                    0272
*                       CALL CRDGET;/* GET NEXT RECORD               */
         BAL   @14,CRDGET                                          0273
*                       IF RTNCODE>CRPEOF/* IF ERROR IN GET          */
*                         THEN      /*                               */
         CH    RTNCODE,@CH00094                                    0274
         BNH   @RF00274                                            0274
*                         EXTRTNCD=RTNCODE;/* PASS ALONG CODE        */
         LR    EXTRTNCD,RTNCODE                                    0275
*                       STOP=OFF;   /* SET SW TO CONTINUE EXIT CALL  */
@RF00274 NI    STOP,B'01111111'                                    0276
*                       RTNCODE=SAVRTNCD;/* RELOAD RC                */
         LR    RTNCODE,SAVRTNCD                                    0277
*                     END;          /*                               */
*                 END;              /*                               */
*                                                                  0279
*             /*******************************************************/
*             /*                                                     */
*             /* IF ANY OTHER RETURN CODE THEN PASS IT ALONG         */
*             /*                                                     */
*             /*******************************************************/
*                                                                  0280
*               ELSE                /*                               */
*                 DO;               /*                               */
         B     @RC00267                                            0280
@RF00267 DS    0H                                                  0281
*                   EXTRTNCD=RTNCODE;/* PASS ALONG RC                */
         LR    EXTRTNCD,RTNCODE                                    0281
*                   CRPTRMEX=ON;    /* TERMINATED BY USER EXIT       */
         L     @14,@PC00001                                        0282
         OI    CRPTRMEX(@14),B'01000000'                           0282
*                 END;              /*                               */
*           END;                    /* END NOT ZERO RC               */
@RC00267 DS    0H                                                  0284
@RC00257 DS    0H                                                  0285
*         RFY                                                      0285
*           RTNCODE UNRSTD;         /*                               */
@RC00234 DS    0H                                                  0286
*       END;                        /* END NOT EOF OR ADD REQUESTED  */
*   END;                            /* END EXIT CALL LOOP            */
@RF00226 DS    0H                                                  0287
@DE00224 L     @10,@PC00001                                        0287
         CLI   CRPUXNUM(@10),0                                     0287
         BE    @DC00224                                            0287
         TM    CRPBFPRM(@10),B'10000000'                           0287
         BNZ   @DC00224                                            0287
         TM    STOP,B'10000000'                                    0287
         BZ    @DL00224                                            0287
@DC00224 DS    0H                                                  0288
*   RETURN CODE(EXTRTNCD);          /*                               */
         LR    @15,EXTRTNCD                                        0288
         L     @14,@SA00003                                        0288
         LM    @00,@12,@SA00003+8                                  0288
         BR    @14                                                 0288
*   END CRDEXIT;                    /*                               */
         EJECT
*                                                                  0290
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS ROUTINE IS CALLED TO WRITE THE INPUT RECORD TO THE       */
*   /* SPECIFIED OUTPUT DATASET(S)                                   */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0290
*CRDPUT:                            /*                               */
*   PROC;                           /*                               */
CRDPUT   STM   @14,@12,@SA00004                                    0290
*   DECLARE                         /*                               */
*     PUTRTNCD FIXED(8);            /*                               */
*   DECLARE                         /*                               */
*     NONBLNCT FIXED(31);           /* COUNT OF NONBLANK CHAR ON   0292
*                                      INPUT CARD                    */
*   DECLARE                         /*                               */
*     TEMPPTR FIXED(15);            /* FOR LOG SEARCH                */
*   PUTRTNCD=ZERO;                  /* INIT RETRUN CODE              */
         SLR   PUTRTNCD,PUTRTNCD                                   0294
*   IOPFUNCT=IOPWRITE;              /* SET TO WRITE                  */
         MVI   IOPFUNCT(IOPPTR),X'51'                              0295
*   IOPBUFAD=ADDR(CRPBUFFR);        /* FROM PARM BUFFER              */
*                                                                  0296
         L     @10,@PC00001                                        0296
         LA    @15,CRPBUFFR(,@10)                                  0296
         ST    @15,IOPBUFAD(,IOPPTR)                               0296
*   /*****************************************************************/
*   /*                                                               */
*   /* WRITE INPUT BUFFER TO PTS                                     */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0297
*   IF CRPPTS=ON                    /* IF WRITE TO PTS               */
*     THEN                          /*                               */
         TM    CRPPTS(@10),B'00100000'                             0297
         BNO   @RF00297                                            0297
*     DO;                           /*                               */
*       IOPDSID=IOPPTS;             /*                               */
         MVI   IOPDSID(IOPPTR),X'06'                               0299
*       CALL HMASMIO(HMASMIOP);     /* DO WRITE                      */
         ST    IOPPTR,@AL00001                                     0300
         L     @15,@CV01324                                        0300
         LA    @01,@AL00001                                        0300
         BALR  @14,@15                                             0300
*       PUTRTNCD=IOPRETRN;          /* SAVE RETURN CODE              */
         SLR   PUTRTNCD,PUTRTNCD                                   0301
         IC    PUTRTNCD,IOPRETRN(,IOPPTR)                          0301
*     END;                          /*                               */
*                                                                  0302
*   /*****************************************************************/
*   /*                                                               */
*   /* WRITE INPUT BUFFER TO OTHER SPECIFIED DATASET                 */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0303
*   IF CRPOTHER=ON                  /* IF WRITE TO SPECIFIED DATASET */
*       &PUTRTNCD=ZERO              /*                               */
*     THEN                          /*                               */
@RF00297 L     @10,@PC00001                                        0303
         TM    CRPOTHER(@10),B'00000100'                           0303
         BNO   @RF00303                                            0303
         CH    PUTRTNCD,@CH00092                                   0303
         BNE   @RF00303                                            0303
*     DO;                           /*                               */
*       IOPDSID=CRPOUTDS;           /*                               */
         MVC   IOPDSID(1,IOPPTR),CRPOUTDS(@10)                     0305
*       CALL HMASMIO(HMASMIOP);     /* DO WRITE                      */
         ST    IOPPTR,@AL00001                                     0306
         L     @15,@CV01324                                        0306
         LA    @01,@AL00001                                        0306
         BALR  @14,@15                                             0306
*       PUTRTNCD=IOPRETRN;          /* SAVE RETURN CODE              */
         SLR   PUTRTNCD,PUTRTNCD                                   0307
         IC    PUTRTNCD,IOPRETRN(,IOPPTR)                          0307
*     END;                          /*                               */
*                                                                  0309
*   /*****************************************************************/
*   /*                                                               */
*   /* WRITE INPUT BUFFER TO SMPOUT/SMPLIST/SMPRPT                   */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0309
*   IOPBUFAD=ADDR(BUFFER);          /* RESET ADDR OF BUFFER          */
@RF00303 LA    @10,BUFFER                                          0309
         ST    @10,IOPBUFAD(,IOPPTR)                               0309
*   IF(CRPPRINT=ON                  /* IF WRITE TO SMPOUT            */
*       ×CRPLIST=ON                 /* OR SMPLIST                    */
*       ×CRPRPT=ON)                 /* OR SMPRPT                     */
*       &PUTRTNCD=ZERO              /* AND PREV FUNCTIONS OK         */
*     THEN                          /*                               */
         L     @10,@PC00001                                        0310
         TM    CRPPRINT(@10),B'00001000'                           0310
         BO    @GL00010                                            0310
         TM    CRPLIST(@10),B'00011000'                            0310
         BZ    @RF00310                                            0310
@GL00010 SLR   @10,@10                                             0310
         CR    PUTRTNCD,@10                                        0310
         BNE   @RF00310                                            0310
*     DO;                           /*                               */
*       PRLSPAN=ZERO;               /*                               */
*                                                                  0312
         L     @15,IOPBUFAD(,IOPPTR)                               0312
         STH   @10,PRLSPAN(,@15)                                   0312
*       /*************************************************************/
*       /*                                                           */
*       /* FORMAT BUFFER IN REQUESTED FORMAT                         */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0313
*       IF CRPOFFST=ON              /*                               */
*         THEN                      /*                               */
         L     @10,@PC00001                                        0313
         TM    CRPOFFST(@10),B'00000010'                           0313
         BNO   @RF00313                                            0313
*         DO;                       /*                               */
*           PRLRLEN=LENGTH(CRPBUFFR)+LENGTH(DASHES);/*               */
         MVC   PRLRLEN(2,@15),@CH00588                             0315
*           PRLDATA(1:LENGTH(DASHES))=DASHES;/*                      */
         MVC   PRLDATA(10,@15),@CC01329                            0316
*           PRLDATA(LENGTH(DASHES)+1:LENGTH(DASHES)+LENGTH(CRPBUFFR))=
*               CRPBUFFR;           /*                               */
         MVC   PRLDATA+10(80,@15),CRPBUFFR(@10)                    0317
*         END;                      /*                               */
*       ELSE                        /*                               */
*         DO;                       /*                               */
         B     @RC00313                                            0319
@RF00313 DS    0H                                                  0320
*           PRLRLEN=LENGTH(CRPBUFFR);/*                              */
         L     @10,IOPBUFAD(,IOPPTR)                               0320
         MVC   PRLRLEN(2,@10),@CH00083                             0320
*           PRLDATA(1:LENGTH(CRPBUFFR))=CRPBUFFR;/*                  */
         L     @15,@PC00001                                        0321
         MVC   PRLDATA(80,@10),CRPBUFFR(@15)                       0321
*         END;                      /*                               */
*       IF CRPPRINT=ON              /* IF OUTPUT TO SMPOUT           */
*         THEN                      /*                               */
@RC00313 L     @10,@PC00001                                        0323
         TM    CRPPRINT(@10),B'00001000'                           0323
         BNO   @RF00323                                            0323
*         DO;                       /*                               */
*           IOPDSID=IOPPRINT;       /*                               */
         MVI   IOPDSID(IOPPTR),X'0B'                               0325
*           CALL HMASMIO(HMASMIOP); /* DO WRITE                      */
         ST    IOPPTR,@AL00001                                     0326
         L     @15,@CV01324                                        0326
         LA    @01,@AL00001                                        0326
         BALR  @14,@15                                             0326
*           PUTRTNCD=MAX(PUTRTNCD,IOPRETRN);/* SAVE RETURN CODE      */
         SLR   @10,@10                                             0327
         IC    @10,IOPRETRN(,IOPPTR)                               0327
         CR    PUTRTNCD,@10                                        0327
         BNL   *+6
         LR    PUTRTNCD,@10                                        0327
*         END;                      /*                               */
*       IF CRPLIST=ON               /* IF OUTPUT TO SMPLIST          */
*         THEN                      /*                               */
@RF00323 L     @10,@PC00001                                        0329
         TM    CRPLIST(@10),B'00010000'                            0329
         BNO   @RF00329                                            0329
*         DO;                       /*                               */
*           IOPDSID=IOPLIST;        /*                               */
         MVI   IOPDSID(IOPPTR),X'2A'                               0331
*           CALL HMASMIO(HMASMIOP); /* DO WRITE                      */
         ST    IOPPTR,@AL00001                                     0332
         L     @15,@CV01324                                        0332
         LA    @01,@AL00001                                        0332
         BALR  @14,@15                                             0332
*           PUTRTNCD=MAX(PUTRTNCD,IOPRETRN);/* SAVE RETURN CODE      */
         SLR   @10,@10                                             0333
         IC    @10,IOPRETRN(,IOPPTR)                               0333
         CR    PUTRTNCD,@10                                        0333
         BNL   *+6
         LR    PUTRTNCD,@10                                        0333
*         END;                      /*                               */
*       IF CRPRPT=ON                /* IF OUTPUT TO SMPRPT           */
*         THEN                      /*                               */
@RF00329 L     @10,@PC00001                                        0335
         TM    CRPRPT(@10),B'00001000'                             0335
         BNO   @RF00335                                            0335
*         DO;                       /*                               */
*           IOPDSID=IOPRPT;         /*                               */
         MVI   IOPDSID(IOPPTR),X'29'                               0337
*           CALL HMASMIO(HMASMIOP); /* DO WRITE                      */
         ST    IOPPTR,@AL00001                                     0338
         L     @15,@CV01324                                        0338
         LA    @01,@AL00001                                        0338
         BALR  @14,@15                                             0338
*           PUTRTNCD=MAX(PUTRTNCD,IOPRETRN);/* SAVE RETURN CODE      */
         SLR   @10,@10                                             0339
         IC    @10,IOPRETRN(,IOPPTR)                               0339
         CR    PUTRTNCD,@10                                        0339
         BNL   *+6
         LR    PUTRTNCD,@10                                        0339
*         END;                      /*                               */
*     END;                          /*                               */
@RF00335 DS    0H                                                  0342
*                                                                  0342
*   /*****************************************************************/
*   /*                                                               */
*   /* WRITE INPUT BUFFER TO SMPLOG                                  */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0342
*   IF CRPLOG=ON                    /* IF WRITE TO LOG               */
*       &PUTRTNCD=ZERO              /*                               */
*     THEN                          /* THEN PROCESS CARD             */
@RF00310 L     @10,@PC00001                                        0342
         TM    CRPLOG(@10),B'00010000'                             0342
         BNO   @RF00342                                            0342
         SLR   @15,@15                                             0342
         CR    PUTRTNCD,@15                                        0342
         BNE   @RF00342                                            0342
*     DO;                           /*                               */
*       PRLDATA(1:LENGTH(CRPBUFFR))=CRPBUFFR;/* MOVE RCD TO OUTPUT 0344
*                                      AREA FOR PRINT                */
         L     @14,IOPBUFAD(,IOPPTR)                               0344
         MVC   PRLDATA(80,@14),CRPBUFFR(@10)                       0344
*       PRLSPAN=ZERO;               /* ZERO INDICATORS               */
*                                                                  0345
         STH   @15,PRLSPAN(,@14)                                   0345
*       /*************************************************************/
*       /*                                                           */
*       /* DO NOT WRITE LOG COMMANDS ASIS TO LOG                     */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0346
*       CRPWRTLG=ON;                /* DEFAULT WRITE TO LOG          */
         OI    CRPWRTLG(@10),B'00100000'                           0346
*       IF CRPSCNCL=OFF             /* CALL FROM DRV?                */
*           &CRPLOGCK=ON            /* AND CHECK FOR LOG?            */
*         THEN                      /* YES                           */
         TM    CRPLOGCK(@10),B'01000000'                           0347
         BNO   @RF00347                                            0347
         TM    CRPSCNCL(@10),B'00000001'                           0347
         BNZ   @RF00347                                            0347
*         DO;                       /* CHECK FOR LOG VERB            */
*           DO TEMPPTR=1 TO(LENGTH(CRPBUFFR)-3)/* SEARCG INPUT       */
*                 WHILE CRPBUFFR(TEMPPTR)=BLANK;/* TILL FIRST NON  0349
*                                      BLANK IS FOUND                */
         LA    TEMPPTR,1                                           0349
@DL00349 L     @10,@PC00001                                        0349
         ALR   @10,TEMPPTR                                         0349
         CLI   CRPBUFFR-1(@10),C' '                                0349
         BNE   @DC00349                                            0349
*           END;                    /* END OF BLANK SEARCH           */
         AH    TEMPPTR,@CH00047                                    0350
         CH    TEMPPTR,@CH01367                                    0350
         BNH   @DL00349                                            0350
@DC00349 DS    0H                                                  0351
*           IF CRPBUFFR(TEMPPTR:TEMPPTR+2)=TXTLOG/* LOG              */
*             THEN                  /* YES                           */
         L     @10,@PC00001                                        0351
         LR    @05,@10                                             0351
         ALR   @05,TEMPPTR                                         0351
         CLC   CRPBUFFR-1(3,@05),@CC01332                          0351
         BNE   @RF00351                                            0351
*             CRPWRTLG=OFF;         /* DONT WRITE TO LOG             */
         NI    CRPWRTLG(@10),B'11011111'                           0352
*         END;                      /* END CALL FROM DRV GRP         */
*                                                                  0353
@RF00351 DS    0H                                                  0354
*       /*************************************************************/
*       /*                                                           */
*       /* DO NOT WRITE BLANK LINES TO LOG                           */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0354
*       IF CRPWRTLG=ON              /* IF WRITE TO LOG               */
*         THEN                      /*                               */
@RF00347 L     @10,@PC00001                                        0354
         TM    CRPWRTLG(@10),B'00100000'                           0354
         BNO   @RF00354                                            0354
*         DO;                       /*                               */
*           DO NONBLNCT=LENGTH(CRPBUFFR) TO 1 BY-1 WHILE PRLDATA(  0356
*                 NONBLNCT)=BLANK;  /* DROP TRAILING BLANKS          */
         LA    NONBLNCT,80                                         0356
@DL00356 L     @10,IOPBUFAD(,IOPPTR)                               0356
         ALR   @10,NONBLNCT                                        0356
         CLI   PRLDATA-1(@10),C' '                                 0356
         BNE   @DC00356                                            0356
*           END;                    /* END DROP BLANKS GROUP         */
         BCTR  NONBLNCT,0                                          0357
         LTR   NONBLNCT,NONBLNCT                                   0357
         BP    @DL00356                                            0357
@DC00356 DS    0H                                                  0358
*           IF NONBLNCT>ZERO        /* IF DATA PRESENT               */
*             THEN                  /* THEN WRITE IT TO              */
         LTR   NONBLNCT,NONBLNCT                                   0358
         BNP   @RF00358                                            0358
*             DO;                   /* LOG                           */
*               IOPDSID=IOPHLDS;    /* SET TO WRITE LOG              */
         MVI   IOPDSID(IOPPTR),X'01'                               0360
*               PRLRLEN=NONBLNCT+LENGTH(HMASMPRL);/* SET LOG LENGTH  */
         L     @10,IOPBUFAD(,IOPPTR)                               0361
         LA    @05,10                                              0361
         ALR   @05,NONBLNCT                                        0361
         STH   @05,PRLRLEN(,@10)                                   0361
*               CALL HMASMIO(HMASMIOP);/* DO WRITE                   */
         ST    IOPPTR,@AL00001                                     0362
         L     @15,@CV01324                                        0362
         LA    @01,@AL00001                                        0362
         BALR  @14,@15                                             0362
*               PUTRTNCD=IOPRETRN;  /* SAVE RETURN CODE              */
         SLR   PUTRTNCD,PUTRTNCD                                   0363
         IC    PUTRTNCD,IOPRETRN(,IOPPTR)                          0363
*             END;                  /* END DATA TO WRITE             */
*         END;                      /* END NOT LOG VERB              */
@RF00358 DS    0H                                                  0366
*     END;                          /* END WRITE TO LOG              */
@RF00354 DS    0H                                                  0367
*   RETURN CODE(PUTRTNCD);          /*                               */
@RF00342 LR    @15,PUTRTNCD                                        0367
         L     @14,@SA00004                                        0367
         LM    @00,@12,@SA00004+8                                  0367
         BR    @14                                                 0367
*   END CRDPUT;                                                    0368
*   END HMASMCRD                    /*                               */
*                                                                  0369
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (HMASMCRP)                                       */
*/*%INCLUDE SYSLIB  (HMASMCCA)                                       */
*/*%INCLUDE SYSLIB  (HMASMIOP)                                       */
*/*%INCLUDE SYSLIB  (HMASMSCP)                                       */
*/*%INCLUDE SYSLIB  (HMASMPRL)                                       */
*/*%INCLUDE SYSLIB  (HMASMUXP)                                       */
*                                                                  0369
*       ;                                                          0369
@DATA    DS    0H
@CH00092 DC    H'0'
@CH00047 DC    H'1'
@CH00094 DC    H'4'
@CH00411 DC    H'20'
@CH00221 DC    H'24'
@CH01367 DC    H'77'
@CH00083 DC    H'80'
@CH00588 DC    H'90'
         DS    0F
@AL00232 DC    A(@CH00047)             LIST WITH   2 ARGUMENT(S)
         DC    A(UX001PRM)
         DS    0F
@SA00001 DS    18F
@PC00001 DS    1F
@SA00002 DS    15F
@SA00003 DS    15F
@SA00004 DS    0F
         DS    15F
@AL00001 DS    1A
         DS    0F
@CA00099 DC    A(HMASMCCA)
@CV01324 DC    V(HMASMIO)
@CV01325 DC    V(HMASMUXC)
         DS    0D
@CC01329 DC    C'----------'
@CC01332 DC    C'LOG'
@CC01343 DC    C'++'
UX001PRM DC    CL81' '
         ORG   UX001PRM
UX001RC  DS    FL1
UX001RCD DS    CL80
         ORG   UX001PRM+81
CRDIOP   DS    CL68
BUFFER   DS    CL100
TIMETEMP DS    CL4
EXTSW    DS    BL1
         ORG   EXTSW
STOP     DS    BL1
@NM00177 EQU   EXTSW+0
         ORG   EXTSW+1
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
TEMPPTR  EQU   @04
NONBLNCT EQU   @04
PUTRTNCD EQU   @03
SAVRTNCD EQU   @04
EXTRTNCD EQU   @03
GETRTNCD EQU   @03
CRDRTNCD EQU   @03
SCPPTR   EQU   @04
IOPPTR   EQU   @02
CCAPTR   EQU   @11
RTNCODE  EQU   @15
R0       EQU   @00
RTNREG   EQU   @14
USERREG  EQU   @01
         EXTRN HMASMCCA
CCABLDLA EQU   0
@NM00028 EQU   CCABLDLA
CCABLDLL EQU   0
@NM00030 EQU   CCABLDLL
CCALKDRC EQU   @NM00030+20
@NM00032 EQU   CCABLDLL+124
CCAASMRC EQU   @NM00032+20
@NM00034 EQU   CCABLDLL+248
CCACPYRC EQU   @NM00034+20
@NM00036 EQU   CCABLDLL+372
CCACOMRC EQU   @NM00036+20
@NM00038 EQU   CCABLDLL+496
CCAZAPRC EQU   @NM00038+20
@NM00040 EQU   CCABLDLL+620
CCASUPRC EQU   @NM00040+20
@NM00042 EQU   CCABLDLL+744
CCAUPDRC EQU   @NM00042+20
CCABLDLM EQU   0
CCABELMT EQU   CCABLDLM+4
CCABMPOS EQU   CCABELMT
HMASMIOP EQU   0
IOPDSID  EQU   HMASMIOP
IOPFUNCT EQU   HMASMIOP+1
IOPRETRN EQU   HMASMIOP+2
IOPNAME  EQU   HMASMIOP+4
@NM00046 EQU   HMASMIOP+12
@NM00047 EQU   @NM00046
IOPDDNAM EQU   HMASMIOP+24
IOPBUFAD EQU   HMASMIOP+52
IOPDRMAP EQU   HMASMIOP+56
IOPINAME EQU   IOPDRMAP
IOPINAM  EQU   IOPINAME
IOPITYP  EQU   IOPINAM
IOPUSERL EQU   IOPDRMAP+11
IOPEND   EQU   IOPDRMAP+12
IOPLMCTL EQU   0
IOPQSMIF EQU   0
@NM00157 EQU   IOPQSMIF
IOPQSMLS EQU   IOPQSMIF+8
IOPQSMNM EQU   IOPQSMLS
IOPBS02  EQU   0
IOPBS04  EQU   0
IOPBAPF  EQU   IOPBS04
HMASMSCP EQU   0
SCPCHAR  EQU   HMASMSCP
SCPIOPAD EQU   HMASMSCP+16
SCPEOR   EQU   HMASMSCP+24
SCPRETRN EQU   HMASMSCP+25
SCPRET   EQU   SCPRETRN
HMASMPRL EQU   0
PRLRLEN  EQU   HMASMPRL
PRLSPAN  EQU   HMASMPRL+2
PRLFLGS  EQU   PRLSPAN
PRLDATE  EQU   HMASMPRL+4
PRLTIME  EQU   HMASMPRL+7
PRLEND   EQU   HMASMPRL+10
CCADSIDA EQU   0
CCATYPEA EQU   0
IOPBS01  EQU   0
IOPBS03  EQU   0
SCPIOPRM EQU   0
SCPSTRNG EQU   0
CCAFBUFR EQU   HMASMCCA+4
CCADSAD  EQU   CCAFBUFR+124
CCATPAD  EQU   CCAFBUFR+128
CCAFLAG7 EQU   CCAFBUFR+132
CCAFIOP  EQU   HMASMCCA+140
CCAFSYS  EQU   HMASMCCA+148
CCASREL  EQU   CCAFSYS+12
CCAFLAGA EQU   CCAFSYS+21
CCAFSTA  EQU   HMASMCCA+188
CCAFICT  EQU   HMASMCCA+192
CCAFPGM  EQU   HMASMCCA+208
CCABLDLP EQU   CCAFPGM
CCADBLDL EQU   CCAFPGM+4
CCAFGTP  EQU   HMASMCCA+224
CCASEGTP EQU   CCAFGTP
@NM00012 EQU   HMASMCCA+244
CCAFFUNC EQU   HMASMCCA+264
CCAFLAG1 EQU   CCAFFUNC+8
CCAFLAG2 EQU   CCAFFUNC+11
CCAFPROC EQU   HMASMCCA+276
CCAFLAG3 EQU   CCAFPROC
CCAFDIS  EQU   HMASMCCA+278
CCAFLAG4 EQU   CCAFDIS
CCAFLAG5 EQU   CCAFDIS+1
CCAFLAG6 EQU   CCAFDIS+2
CCAFCNV  EQU   HMASMCCA+281
CCAFLAG8 EQU   CCAFCNV
CCAFCTL  EQU   HMASMCCA+282
CCAFLAG9 EQU   CCAFCTL
CCATIME  EQU   CCAFCTL+4
CCAFDSNG EQU   HMASMCCA+298
CCAFLAGB EQU   CCAFDSNG
HMASMCRP EQU   0
CRPUXNUM EQU   HMASMCRP
CRPSCPAD EQU   HMASMCRP+4
CRPINDS  EQU   HMASMCRP+8
CRPOUTDS EQU   HMASMCRP+9
CRPRETRN EQU   HMASMCRP+10
CRPFLG1  EQU   HMASMCRP+14
CRPBFPRM EQU   CRPFLG1
CRPLOGCK EQU   CRPFLG1
CRPPTS   EQU   CRPFLG1
CRPLOG   EQU   CRPFLG1
CRPPRINT EQU   CRPFLG1
CRPOTHER EQU   CRPFLG1
CRPOFFST EQU   CRPFLG1
CRPSCNCL EQU   CRPFLG1
CRPEOFEN EQU   CRPFLG1+1
CRPTRMEX EQU   CRPFLG1+1
CRPNOWPP EQU   CRPFLG1+1
CRPLIST  EQU   CRPFLG1+1
CRPRPT   EQU   CRPFLG1+1
CRPFLG2  EQU   HMASMCRP+16
CRPINSW0 EQU   CRPFLG2
CRPEOFSW EQU   CRPINSW0
CRPINSW1 EQU   CRPFLG2
CRPEXADD EQU   CRPINSW1
CRPINSW2 EQU   CRPFLG2
CRPWRTLG EQU   CRPINSW2
CRPINSW3 EQU   CRPFLG2
CRPEOF1  EQU   CRPINSW3
CRPBUFFR EQU   HMASMCRP+18
CRPBFCTL EQU   CRPBUFFR
CRPDDNAM EQU   HMASMCRP+98
IOPUDATA EQU   IOPEND
IOPINAM3 EQU   IOPINAME
@NM00053 EQU   IOPINAM3
IOPSTCMP EQU   IOPUDATA
IOPDYNDT EQU   IOPUDATA
IOPSPACE EQU   IOPDYNDT+44
IOPDTYPE EQU   IOPDYNDT+50
IOPNTMAX EQU   IOPDRMAP
IOPNTMAP EQU   IOPDRMAP
IOPCDMAP EQU   IOPNTMAP
IOPPTMAP EQU   IOPCDMAP
IOPSCMAP EQU   IOPPTMAP
IOPDIRCT EQU   IOPSCMAP+12
IOPCDMAX EQU   IOPDIRCT
IOPCQMAP EQU   IOPDRMAP
@NM00064 EQU   IOPUDATA
@NM00065 EQU   IOPUDATA
IOPASMNT EQU   IOPUDATA
IOPASMDR EQU   IOPASMNT
IOPABUNT EQU   IOPASMDR+1
IOPLMDNT EQU   IOPUDATA
IOPLMDDR EQU   IOPLMDNT
IOPLMLEP EQU   IOPLMDDR+1
IOPLMDF1 EQU   IOPLMLEP
IOPFLGS2 EQU   IOPLMDF1
IOPLMDF2 EQU   IOPLMLEP+1
IOPLMDF3 EQU   IOPLMLEP+2
IOPLMDF4 EQU   IOPLMLEP+3
IOPLMDF5 EQU   IOPLMDDR+5
IOPFLGS3 EQU   IOPLMDF5
IOPLMDFX EQU   IOPLMDNT+24
@NM00074 EQU   IOPLMDFX
IOPLNTRY EQU   IOPLMDFX+8
IOPLSYS  EQU   IOPLNTRY
IOPSYSLB EQU   IOPLSYS
IOPMACNT EQU   IOPUDATA
IOPMACDR EQU   IOPMACNT
IOPRMIDE EQU   IOPMACDR+1
IOPRMST  EQU   IOPRMIDE+7
IOPFMIDE EQU   IOPMACDR+9
IOPMACFX EQU   IOPMACNT+24
IOPBUNT  EQU   IOPMACFX
IOPMCEND EQU   IOPMACNT+104
IOPMACVR EQU   IOPMCEND
IOPMCENT EQU   IOPMACVR
IOPMCDTA EQU   IOPMCENT
IOPMCASM EQU   IOPMCDTA
IOPMACID EQU   IOPMCASM
IOPMACST EQU   IOPMCASM+7
IOPMCIND EQU   IOPMCENT+8
IOPEOFNT EQU   IOPUDATA
IOPSRCNT EQU   IOPUDATA
IOPSRCDR EQU   IOPSRCNT
@NM00085 EQU   IOPSRCDR+1
@NM00087 EQU   @NM00085+7
@NM00091 EQU   IOPSRCDR+9
IOPSRCFX EQU   IOPSRCNT+24
@NM00095 EQU   IOPSRCFX
IOPSREND EQU   IOPSRCNT+104
IOPSRCVR EQU   IOPSREND
IOPSNTRY EQU   IOPSRCVR
IOPSRDTA EQU   IOPSNTRY
IOPSRCID EQU   IOPSRDTA
IOPSRCST EQU   IOPSRDTA+7
IOPMODNT EQU   IOPUDATA
IOPMODDR EQU   IOPMODNT
@NM00101 EQU   IOPMODDR+1
@NM00103 EQU   @NM00101+7
@NM00107 EQU   IOPMODDR+9
IOPMODFX EQU   IOPMODNT+24
@NM00111 EQU   IOPMODFX
IOPMDLEP EQU   IOPMODFX+8
IOPMODF1 EQU   IOPMDLEP
IOPMODF2 EQU   IOPMDLEP+1
IOPMODF3 EQU   IOPMDLEP+2
IOPMODF4 EQU   IOPMDLEP+3
IOPMDEND EQU   IOPMODNT+104
IOPMODVR EQU   IOPMDEND
IOPMNTRY EQU   IOPMODVR
IOPMDDTA EQU   IOPMNTRY
IOPLMODS EQU   IOPMDDTA
IOPMODID EQU   IOPLMODS
IOPMODST EQU   IOPLMODS+7
IOPDLBNT EQU   IOPUDATA
IOPDLBDR EQU   IOPDLBNT
IOPDLBFX EQU   IOPDLBNT+24
@NM00122 EQU   IOPDLBFX
IOPDLEND EQU   IOPDLBNT+104
IOPDLBVR EQU   IOPDLEND
IOPDNTRY EQU   IOPDLBVR
IOPDSYS  EQU   IOPDNTRY
IOPSYSNT EQU   IOPUDATA
IOPSYSDR EQU   IOPSYSNT
IOPSYSF1 EQU   IOPSYSDR+4
IOPFLGS7 EQU   IOPSYSF1
IOPSYSFX EQU   IOPSYSNT+24
@NM00129 EQU   IOPSYSFX
IOPSYEND EQU   IOPSYSNT+184
IOPSYSVR EQU   IOPSYEND
IOPSYSTR EQU   IOPSYSVR
IOPSYNTR EQU   IOPSYSTR
IOPPTFNT EQU   IOPUDATA
IOPPTFDR EQU   IOPPTFNT
IOPPSTAT EQU   IOPPTFDR+2
IOPPTFF1 EQU   IOPPSTAT
IOPFLGS5 EQU   IOPPTFF1
IOPPTFF2 EQU   IOPPSTAT+1
IOPPTFF3 EQU   IOPPSTAT+3
IOPPTFFX EQU   IOPPTFNT+24
@NM00138 EQU   IOPPTFFX
@NM00139 EQU   @NM00138
IOPPDTES EQU   IOPPTFFX+41
@NM00142 EQU   IOPPDTES
IOPPTPFX EQU   IOPPDTES+6
IOPDATES EQU   IOPPTPFX
IOPPTEND EQU   IOPPTFNT+104
IOPPTFVR EQU   IOPPTEND
IOPPNTRY EQU   IOPPTFVR
IOPPMODS EQU   IOPPNTRY
IOPENTNT EQU   IOPUDATA+104
IOPSRLNT EQU   IOPUDATA+104
IOPPRENT EQU   IOPUDATA+104
IOPNPRNT EQU   IOPUDATA+104
IOPSUPNT EQU   IOPUDATA+104
IOPREQNT EQU   IOPUDATA+104
IOPIRQNT EQU   IOPUDATA+104
IOPFIDNT EQU   IOPUDATA+104
IOPDELNT EQU   IOPUDATA+104
IOPVERNT EQU   IOPUDATA+104
IOPSBYNT EQU   IOPUDATA+104
IOPQSMNT EQU   IOPUDATA
IOPQSMDR EQU   IOPQSMNT
IOPQFMNT EQU   IOPUDATA
IOPQFMDR EQU   IOPQFMNT
IOPQFEND EQU   IOPQFMNT+2
IOPQFMVR EQU   IOPQFEND
IOPQFMLS EQU   IOPQFMVR
IOPQFMNM EQU   IOPQFMLS
IOPPTSYS EQU   IOPUDATA
IOPPTSDR EQU   IOPPTSYS
IOPPTSFX EQU   IOPPTSYS+24
IOPDSSPC EQU   IOPPTSFX
IOPPTFG1 EQU   IOPPTSFX+34
IOPPSEND EQU   IOPPTSYS+1064
IOPPTSVR EQU   IOPPSEND
IOPPTNTR EQU   IOPPTSVR
@NM00167 EQU   IOPPTNTR
IOPPTFMD EQU   @NM00167
IOPPTREL EQU   IOPPTFMD
IOPBPDS  EQU   IOPUDATA
IOPBLEP1 EQU   IOPBPDS+8
IOPBLEP2 EQU   IOPBPDS+9
@NM00171 EQU   IOPBPDS+18
IOPBFTB0 EQU   @NM00171
IOPBFTB1 EQU   IOPBFTB0
PRLDATA  EQU   PRLEND
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
IOPBCEND EQU   IOPBPDS+21
IOPBFTB3 EQU   IOPBFTB0+2
IOPBFTB2 EQU   IOPBFTB0+1
@NM00173 EQU   IOPBFTB1
IOPBAPFP EQU   IOPBFTB1
IOPBSSI  EQU   IOPBFTB1
IOPBPAGA EQU   IOPBFTB1
@NM00172 EQU   IOPBFTB1
IOPBAOSL EQU   IOPBFTB1
IOPBSEPA EQU   IOPBPDS+15
IOPBFTBL EQU   IOPBPDS+13
IOPBSTOR EQU   IOPBPDS+10
IOPBREFR EQU   IOPBLEP2
IOPBLEF  EQU   IOPBLEP2
IOPBTEST EQU   IOPBLEP2
IOPBNE   EQU   IOPBLEP2
@NM00170 EQU   IOPBLEP2
IOPBDC   EQU   IOPBLEP2
@NM00169 EQU   IOPBLEP1
IOPBSCTR EQU   IOPBLEP1
IOPBOL   EQU   IOPBLEP1
@NM00168 EQU   IOPBLEP1
IOPBOVLY EQU   IOPBLEP1
IOPBREUS EQU   IOPBLEP1
IOPBRENT EQU   IOPBLEP1
IOPBNL   EQU   IOPBPDS+7
IOPBTTRN EQU   IOPBPDS+4
IOPBZERO EQU   IOPBPDS+3
IOPBTTRT EQU   IOPBPDS
IOPPTIND EQU   IOPPTNTR+8
IOPPTSND EQU   IOPPTREL
@NM00166 EQU   IOPPTSFX+872
IOPSYZPP EQU   IOPPTSFX+772
IOPSYZPR EQU   IOPPTSFX+771
IOPSYZPS EQU   IOPPTSFX+763
IOPSYZAP EQU   IOPPTSFX+755
IOPSYUPP EQU   IOPPTSFX+655
IOPSYUPR EQU   IOPPTSFX+654
IOPSYUPS EQU   IOPPTSFX+646
IOPSYUPD EQU   IOPPTSFX+638
IOPSYSPP EQU   IOPPTSFX+538
IOPSYSPR EQU   IOPPTSFX+537
IOPSYSPS EQU   IOPPTSFX+529
IOPSYSUP EQU   IOPPTSFX+521
IOPSYLKP EQU   IOPPTSFX+421
IOPSYLKR EQU   IOPPTSFX+420
IOPSYLKS EQU   IOPPTSFX+412
IOPSYLKD EQU   IOPPTSFX+404
IOPSYCPP EQU   IOPPTSFX+304
IOPSYCPR EQU   IOPPTSFX+303
IOPSYCPS EQU   IOPPTSFX+295
IOPSYCPY EQU   IOPPTSFX+287
IOPSYCOP EQU   IOPPTSFX+187
IOPSYCOR EQU   IOPPTSFX+186
IOPSYCOS EQU   IOPPTSFX+178
IOPSYCOM EQU   IOPPTSFX+170
IOPSYASP EQU   IOPPTSFX+70
IOPSYASR EQU   IOPPTSFX+69
IOPSYASS EQU   IOPPTSFX+61
IOPSYASM EQU   IOPPTSFX+53
@NM00165 EQU   IOPPTSFX+35
@NM00164 EQU   IOPPTFG1
IOPPTSNJ EQU   IOPPTFG1
IOPPTSNP EQU   IOPPTFG1
IOPSYPLN EQU   IOPPTSFX+32
IOPDSPFX EQU   IOPPTSFX+6
IOPDSDIR EQU   IOPDSSPC+4
IOPDSSEC EQU   IOPDSSPC+2
IOPDSPRM EQU   IOPDSSPC
@NM00163 EQU   IOPPTSDR+4
IOPPTPEM EQU   IOPPTSDR+2
IOPPCNVL EQU   IOPPTSDR+1
@NM00162 EQU   IOPPTSDR
IOPQFMTP EQU   IOPQFMLS+8
@NM00161 EQU   IOPQFMLS+7
IOPQFMND EQU   IOPQFMNM
@NM00160 EQU   IOPQFMDR
@NM00156 EQU   IOPQSMDR
@NM00155 EQU   IOPSBYNT+8
IOPSBYST EQU   IOPSBYNT+7
IOPSBYNM EQU   IOPSBYNT
@NM00154 EQU   IOPVERNT+8
IOPVERST EQU   IOPVERNT+7
IOPVERNM EQU   IOPVERNT
@NM00153 EQU   IOPDELNT+8
IOPDELST EQU   IOPDELNT+7
IOPDELNM EQU   IOPDELNT
@NM00152 EQU   IOPFIDNT+8
IOPFIDST EQU   IOPFIDNT+7
IOPFIDNM EQU   IOPFIDNT
@NM00151 EQU   IOPIRQNT+8
IOPIRQST EQU   IOPIRQNT+7
IOPIRQNM EQU   IOPIRQNT
@NM00150 EQU   IOPREQNT+8
IOPREQST EQU   IOPREQNT+7
IOPREQNM EQU   IOPREQNT
@NM00149 EQU   IOPSUPNT+8
IOPSUPST EQU   IOPSUPNT+7
IOPSUPNM EQU   IOPSUPNT
@NM00148 EQU   IOPNPRNT+8
IOPNPRST EQU   IOPNPRNT+7
IOPNPRNM EQU   IOPNPRNT
@NM00147 EQU   IOPPRENT+8
IOPPREST EQU   IOPPRENT+7
IOPPRENM EQU   IOPPRENT
@NM00146 EQU   IOPSRLNT+8
IOPSRLST EQU   IOPSRLNT+7
@NM00145 EQU   IOPSRLNT+4
IOPSRLNM EQU   IOPSRLNT
@NM00144 EQU   IOPENTNT+8
IOPENTST EQU   IOPENTNT+7
IOPENTNM EQU   IOPENTNT
IOPPIND  EQU   IOPPNTRY+8
IOPPTFND EQU   IOPPMODS
IOPPFMID EQU   IOPPTFFX+73
@NM00143 EQU   IOPPTPFX+24
IOPUCLT  EQU   IOPDATES+21
IOPUCLD  EQU   IOPDATES+18
IOPACCT  EQU   IOPDATES+15
IOPACCD  EQU   IOPDATES+12
IOPRSTT  EQU   IOPDATES+9
IOPRSTD  EQU   IOPDATES+6
IOPAPPT  EQU   IOPDATES+3
IOPAPPD  EQU   IOPDATES
IOPRECT  EQU   @NM00142+3
IOPRECD  EQU   @NM00142
@NM00141 EQU   IOPPTFFX+8
@NM00140 EQU   @NM00138+7
IOPPRELN EQU   @NM00139
@NM00137 EQU   IOPPTFDR+20
IOPSBYNO EQU   IOPPTFDR+13
IOPDBYNO EQU   IOPPTFDR+6
@NM00136 EQU   IOPPTFF3
IOPFLF   EQU   IOPPTFF3
IOPDBYP  EQU   IOPPTFF3
IOPSBYP  EQU   IOPPTFF3
IOPPMDLP EQU   IOPPTFF2+1
IOPPADDP EQU   IOPPTFF2+1
@NM00135 EQU   IOPPTFF2+1
IOPLRFP  EQU   IOPPTFF2
IOPJCLP  EQU   IOPPTFF2
IOPSUPP  EQU   IOPPTFF2
IOPREQP  EQU   IOPPTFF2
IOPPREP  EQU   IOPPTFF2
IOPNPRP  EQU   IOPPTFF2
IOPIRQP  EQU   IOPPTFF2
IOPDELP  EQU   IOPPTFF2
IOPREGEN EQU   IOPFLGS5
IOPBYP   EQU   IOPFLGS5
IOPDUMMP EQU   IOPFLGS5
@NM00134 EQU   IOPFLGS5
IOPERROR EQU   IOPFLGS5
IOPACC   EQU   IOPFLGS5
IOPRES   EQU   IOPFLGS5
IOPAPP   EQU   IOPFLGS5
IOPPTYPE EQU   IOPPTFDR+1
@NM00133 EQU   IOPPTFDR
IOPSYSTP EQU   IOPSYSTR+8
IOPSYSND EQU   IOPSYNTR
@NM00132 EQU   IOPSYSFX+21
IOPSYSID EQU   IOPSYSFX+13
IOPNUCID EQU   IOPSYSFX+12
IOPSREL  EQU   IOPSYSFX+8
@NM00131 EQU   @NM00129+7
@NM00130 EQU   @NM00129
@NM00128 EQU   IOPSYSDR+5
@NM00127 EQU   IOPFLGS7
IOPSYNG  EQU   IOPFLGS7
IOPSYDL  EQU   IOPFLGS7
IOPSTSNP EQU   IOPFLGS7
IOPMTSNP EQU   IOPFLGS7
IOPPEMAX EQU   IOPSYSDR+2
IOPSCNVL EQU   IOPSYSDR+1
@NM00126 EQU   IOPSYSDR
IOPDLIND EQU   IOPDNTRY+8
IOPDLBND EQU   IOPDSYS
@NM00125 EQU   IOPDLBFX+8
@NM00124 EQU   @NM00122+7
@NM00123 EQU   @NM00122
@NM00121 EQU   IOPDLBDR+1
@NM00120 EQU   IOPDLBDR
IOPMDIND EQU   IOPMNTRY+8
@NM00119 EQU   IOPMODST
IOPMODND EQU   IOPMODID
IOPDLIB  EQU   IOPMODFX+72
@NM00118 EQU   IOPMODFX+12
@NM00117 EQU   IOPMODF4
@NM00116 EQU   IOPMODF3
@NM00115 EQU   IOPMODF2
IOPMPAGA EQU   IOPMODF2
IOPMNE   EQU   IOPMODF2
@NM00114 EQU   IOPMODF1
IOPMDC   EQU   IOPMODF1
IOPMREFR EQU   IOPMODF1
IOPMOVLY EQU   IOPMODF1
IOPMSCTR EQU   IOPMODF1
IOPMREUS EQU   IOPMODF1
IOPMRENT EQU   IOPMODF1
IOPMAPF  EQU   IOPMODF1
@NM00113 EQU   @NM00111+7
@NM00112 EQU   @NM00111
@NM00110 EQU   IOPMODDR+17
@NM00109 EQU   @NM00107+7
@NM00108 EQU   @NM00107
@NM00106 EQU   @NM00103
@NM00105 EQU   @NM00103
@NM00104 EQU   @NM00103
@NM00102 EQU   @NM00101
@NM00100 EQU   IOPMODDR
IOPSRIND EQU   IOPSNTRY+8
@NM00099 EQU   IOPSRCST
IOPSRCND EQU   IOPSRCID
IOPSRDLB EQU   IOPSRCFX+72
IOPSRSYS EQU   IOPSRCFX+64
@NM00098 EQU   IOPSRCFX+8
@NM00097 EQU   @NM00095+7
@NM00096 EQU   @NM00095
@NM00094 EQU   IOPSRCDR+18
IOPSRLNG EQU   IOPSRCDR+17
@NM00093 EQU   @NM00091+7
@NM00092 EQU   @NM00091
@NM00090 EQU   @NM00087
@NM00089 EQU   @NM00087
@NM00088 EQU   @NM00087
@NM00086 EQU   @NM00085
@NM00084 EQU   IOPSRCDR
IOPEOFND EQU   IOPEOFNT
IOPMCTYP EQU   IOPMCIND
@NM00083 EQU   IOPMACST
IOPMACND EQU   IOPMACID
IOPMCDLB EQU   IOPMACFX+72
IOPMCSYS EQU   IOPMACFX+64
@NM00082 EQU   IOPMACFX+8
IOPBUTYP EQU   IOPBUNT+7
IOPBUSMD EQU   IOPBUNT
@NM00081 EQU   IOPMACDR+18
IOPMCLNG EQU   IOPMACDR+17
IOPFMST  EQU   IOPFMIDE+7
IOPFMID  EQU   IOPFMIDE
@NM00080 EQU   IOPRMST
IOPRMASM EQU   IOPRMST
@NM00079 EQU   IOPRMST
IOPRMID  EQU   IOPRMIDE
@NM00078 EQU   IOPMACDR
IOPLMIND EQU   IOPLNTRY+8
IOPLMDND EQU   IOPSYSLB
@NM00076 EQU   @NM00074+7
@NM00075 EQU   @NM00074
@NM00073 EQU   IOPLMDDR+6
@NM00072 EQU   IOPFLGS3
IOPCHREP EQU   IOPFLGS3
IOPLINK  EQU   IOPFLGS3
IOPCOPY  EQU   IOPFLGS3
@NM00071 EQU   IOPLMDF4
@NM00070 EQU   IOPLMDF3
@NM00069 EQU   IOPLMDF2
IOPPAGA  EQU   IOPLMDF2
IOPNE    EQU   IOPLMDF2
@NM00068 EQU   IOPFLGS2
IOPDC    EQU   IOPFLGS2
IOPREFR  EQU   IOPFLGS2
IOPOVLY  EQU   IOPFLGS2
IOPSCTR  EQU   IOPFLGS2
IOPREUS  EQU   IOPFLGS2
IOPRENT  EQU   IOPFLGS2
IOPAPF   EQU   IOPFLGS2
@NM00067 EQU   IOPLMDDR
@NM00066 EQU   IOPASMDR+9
IOPABUTP EQU   IOPABUNT+7
IOPABUPT EQU   IOPABUNT
IOPNTLVL EQU   IOPASMDR
IOPALLOC EQU   @NM00065+4
IOPUSED  EQU   @NM00065
IOPTPSEQ EQU   @NM00064+8
IOPVLSER EQU   @NM00064+2
IOPBLKSI EQU   @NM00064
IOPCQMAX EQU   IOPCQMAP+12
@NM00063 EQU   IOPCQMAP+11
@NM00062 EQU   IOPCQMAP+8
@NM00061 EQU   IOPCQMAP
IOPPTMAX EQU   IOPCDMAX
@NM00060 EQU   IOPSCMAP+11
@NM00059 EQU   IOPSCMAP+8
@NM00058 EQU   IOPSCMAP
IOPDIRMX EQU   IOPNTMAX+12
@NM00057 EQU   IOPNTMAX+11
@NM00056 EQU   IOPNTMAX+8
@NM00055 EQU   IOPNTMAX
@NM00054 EQU   IOPDTYPE
IOPDMOD  EQU   IOPDTYPE
IOPDJCL  EQU   IOPDTYPE
IOPDSRC  EQU   IOPDTYPE
IOPDMAC  EQU   IOPDTYPE
IOPSDIR  EQU   IOPSPACE+4
IOPSSCND EQU   IOPSPACE+2
IOPSPRIM EQU   IOPSPACE
IOPDSN   EQU   IOPDYNDT
IOPNTYPE EQU   IOPSTCMP+17
IOPNNAME EQU   IOPSTCMP+9
IOPOTYPE EQU   IOPSTCMP+8
IOPONAME EQU   IOPSTCMP
IOPISEQ3 EQU   IOPINAM3+6
IOPITYP3 EQU   @NM00053+5
IOPIPTF3 EQU   @NM00053
CRPBFSEQ EQU   CRPBUFFR+72
CRPBFCNT EQU   CRPBFCTL+71
CRPBFDTA EQU   CRPBFCTL
CRPINSWF EQU   CRPFLG2+1
CRPINSWE EQU   CRPFLG2+1
CRPINSWD EQU   CRPFLG2+1
CRPINSWC EQU   CRPFLG2+1
CRPINSWB EQU   CRPFLG2+1
CRPINSWA EQU   CRPFLG2+1
CRPINSW9 EQU   CRPFLG2+1
CRPINSW8 EQU   CRPFLG2+1
CRPINSW7 EQU   CRPFLG2
CRPINSW6 EQU   CRPFLG2
CRPINSW5 EQU   CRPFLG2
CRPINSW4 EQU   CRPFLG2
@NM00003 EQU   CRPFLG1+1
@NM00002 EQU   HMASMCRP+11
@NM00001 EQU   HMASMCRP+1
CCAEND   EQU   HMASMCCA+371
@NM00027 EQU   HMASMCCA+309
CCACURDD EQU   CCAFDSNG+3
CCACURDS EQU   CCAFDSNG+2
@NM00026 EQU   CCAFLAGB
CCAOUTNG EQU   CCAFLAGB
CCALOGNG EQU   CCAFLAGB
CCAFMID  EQU   HMASMCCA+291
CCALSTDS EQU   CCAFCTL+8
CCARPTDS EQU   CCAFCTL+7
CCADATE  EQU   CCAFCTL+1
@NM00025 EQU   CCAFLAG9
CCARVCAN EQU   CCAFLAG9
CCARVEST EQU   CCAFLAG9
CCAPTSNJ EQU   CCAFLAG9
CCASTSNP EQU   CCAFLAG9
CCAMTSNP EQU   CCAFLAG9
CCAPTSNP EQU   CCAFLAG9
@NM00024 EQU   CCAFLAG8
CCAACDSC EQU   CCAFLAG8
CCACDSC  EQU   CCAFLAG8
@NM00023 EQU   CCAFLAG6
CCAACRUP EQU   CCAFLAG6
CCACRQUP EQU   CCAFLAG6
CCAACDUP EQU   CCAFLAG6
CCACDSUP EQU   CCAFLAG6
@NM00022 EQU   CCAFLAG5
CCAACROS EQU   CCAFLAG5
CCACRQOS EQU   CCAFLAG5
CCAACDOS EQU   CCAFLAG5
CCACDSOS EQU   CCAFLAG5
@NM00021 EQU   CCAFLAG4
CCAACRIS EQU   CCAFLAG4
CCACRQIS EQU   CCAFLAG4
CCAACDIS EQU   CCAFLAG4
CCACDSIS EQU   CCAFLAG4
@NM00020 EQU   CCAFLAG3+1
CCARGNP  EQU   CCAFLAG3+1
CCADISRQ EQU   CCAFLAG3+1
CCAICTOK EQU   CCAFLAG3
CCADELP  EQU   CCAFLAG3
CCACMPRS EQU   CCAFLAG3
CCAZAPP  EQU   CCAFLAG3
CCALINKP EQU   CCAFLAG3
CCACOPYP EQU   CCAFLAG3
CCAASIP  EQU   CCAFLAG3
CCAUPDP  EQU   CCAFLAG3
CCAEOSMP EQU   CCAFLAG2
CCAEOFNC EQU   CCAFLAG2
@NM00019 EQU   CCAFLAG2
CCACHECK EQU   CCAFLAG2
CCATERM  EQU   CCAFLAG2
CCASVCLB EQU   CCAFLAG2
CCANCPTF EQU   CCAFLAG2
@NM00018 EQU   CCAFLAG1+1
CCAUNL   EQU   CCAFLAG1+1
CCARESET EQU   CCAFLAG1+1
CCALOG   EQU   CCAFLAG1+1
CCACNV   EQU   CCAFLAG1+1
CCALIST  EQU   CCAFLAG1
CCAUPDU  EQU   CCAFLAG1
CCAUPDJ  EQU   CCAFLAG1
CCARES   EQU   CCAFLAG1
CCAREJ   EQU   CCAFLAG1
CCAACCPT EQU   CCAFLAG1
CCAAPPLY EQU   CCAFLAG1
CCAREC   EQU   CCAFLAG1
CCAFUNCT EQU   CCAFFUNC
@NM00017 EQU   @NM00012+18
@NM00016 EQU   @NM00012+16
CCATBLPA EQU   @NM00012+12
@NM00015 EQU   @NM00012+8
@NM00014 EQU   @NM00012+4
@NM00013 EQU   @NM00012
CCAIFGTP EQU   CCAFGTP+16
CCAGTP3  EQU   CCAFGTP+12
CCAGTP2  EQU   CCAFGTP+8
CCAGTP1  EQU   CCAFGTP+4
CCASETAD EQU   CCASEGTP
CCACLST  EQU   CCAFPGM+12
CCASPDCB EQU   CCAFPGM+8
CCAICLMD EQU   CCAFICT+12
CCAICMOD EQU   CCAFICT+8
CCAICPTF EQU   CCAFICT+4
CCAICT   EQU   CCAFICT
CCARVAD  EQU   CCAFSTA
CCAACDID EQU   CCAFSYS+32
CCACDSID EQU   CCAFSYS+24
CCALNLEN EQU   CCAFSYS+22
@NM00011 EQU   CCAFLAGA
CCAPSYSF EQU   CCAFLAGA
CCAASYSF EQU   CCAFLAGA
CCACSYSF EQU   CCAFLAGA
CCANUCID EQU   CCAFSYS+20
CCAASREL EQU   CCAFSYS+16
CCACSREL EQU   CCASREL
CCAPEMAX EQU   CCAFSYS+10
CCAPGLEN EQU   CCAFSYS+8
CCAIOPAS EQU   CCAFSYS+4
CCAIOPCS EQU   CCAFSYS
CCAPESIZ EQU   CCAFIOP+4
CCAIOPTR EQU   CCAFIOP
@NM00010 EQU   CCAFLAG7+3
CCALOGP  EQU   CCAFLAG7+2
CCAOUTP  EQU   CCAFLAG7+2
CCASLBP  EQU   CCAFLAG7+2
CCARPTP  EQU   CCAFLAG7+2
CCALISTP EQU   CCAFLAG7+2
CCAJCLP  EQU   CCAFLAG7+2
CCAPTFP  EQU   CCAFLAG7+2
CCATLBP  EQU   CCAFLAG7+2
CCAUT3P  EQU   CCAFLAG7+1
CCAUT2P  EQU   CCAFLAG7+1
CCAUT1P  EQU   CCAFLAG7+1
CCAWK5P  EQU   CCAFLAG7+1
CCAWK4P  EQU   CCAFLAG7+1
CCAWK3P  EQU   CCAFLAG7+1
CCAWK2P  EQU   CCAFLAG7+1
CCAWK1P  EQU   CCAFLAG7+1
CCAACRQP EQU   CCAFLAG7
CCACRQP  EQU   CCAFLAG7
CCASTSP  EQU   CCAFLAG7
CCAMTSP  EQU   CCAFLAG7
CCAPTSP  EQU   CCAFLAG7
CCASCDSP EQU   CCAFLAG7
CCAACDSP EQU   CCAFLAG7
CCACDSP  EQU   CCAFLAG7
@NM00009 EQU   CCAFBUFR+122
@NM00008 EQU   CCAFBUFR+120
@NM00007 EQU   CCAFBUFR+118
CCATBFMX EQU   CCAFBUFR+116
CCA4BFMX EQU   CCAFBUFR+114
CCA3BFMX EQU   CCAFBUFR+112
CCA2BFMX EQU   CCAFBUFR+110
CCA1BFMX EQU   CCAFBUFR+108
CCAXBFMX EQU   CCAFBUFR+106
CCAQBFMX EQU   CCAFBUFR+104
CCASBFMX EQU   CCAFBUFR+102
CCAMBFMX EQU   CCAFBUFR+100
CCAPBFMX EQU   CCAFBUFR+98
CCAVBFMX EQU   CCAFBUFR+96
CCAABFMX EQU   CCAFBUFR+94
CCACBFMX EQU   CCAFBUFR+92
@NM00006 EQU   CCAFBUFR+88
@NM00005 EQU   CCAFBUFR+84
CCA4BFSZ EQU   CCAFBUFR+80
CCATBFSZ EQU   CCAFBUFR+76
CCAWBFSZ EQU   CCAFBUFR+72
CCAQBFSZ EQU   CCAFBUFR+68
CCAPBFSZ EQU   CCAFBUFR+64
CCAVBFSZ EQU   CCAFBUFR+60
CCACBFSZ EQU   CCAFBUFR+56
@NM00004 EQU   CCAFBUFR+52
CCA4BFOA EQU   CCAFBUFR+48
CCA4BFIA EQU   CCAFBUFR+44
CCATBFIA EQU   CCAFBUFR+40
CCAWBFOA EQU   CCAFBUFR+36
CCAWBFIA EQU   CCAFBUFR+32
CCAQBFOA EQU   CCAFBUFR+28
CCAQBFIA EQU   CCAFBUFR+24
CCAPBFOA EQU   CCAFBUFR+20
CCAPBFIA EQU   CCAFBUFR+16
CCAVBFOA EQU   CCAFBUFR+12
CCAVBFIA EQU   CCAFBUFR+8
CCACBFOA EQU   CCAFBUFR+4
CCACBFIA EQU   CCAFBUFR
CCAID    EQU   HMASMCCA
PRLCONC  EQU   PRLTIME+2
@NM00176 EQU   PRLTIME
PRLHDADR EQU   PRLDATE
@NM00175 EQU   PRLFLGS
PRLBLANK EQU   PRLFLGS
PRLHEADO EQU   PRLFLGS
PRLHEAD  EQU   PRLFLGS
@NM00174 EQU   SCPEOR
SCPNORT  EQU   SCPEOR
SCPNOSUC EQU   SCPEOR
SCPRTERR EQU   SCPEOR
SCPCOMNT EQU   SCPEOR
SCPNOCT  EQU   SCPEOR
SCPCONT  EQU   SCPEOR
SCPPMLN  EQU   HMASMSCP+22
SCPINLN  EQU   HMASMSCP+20
SCPIORTN EQU   HMASMSCP+12
SCPWKAR  EQU   HMASMSCP+8
SCPSRCH  EQU   HMASMSCP+4
IOPBS04E EQU   IOPBS04+2
IOPBAPFC EQU   IOPBAPF+1
IOPBAPFL EQU   IOPBAPF
IOPBS2NM EQU   IOPBS02+3
IOPBS2EP EQU   IOPBS02
IOPQSMTP EQU   IOPQSMLS+8
@NM00159 EQU   IOPQSMLS+7
IOPQSMND EQU   IOPQSMNM
@NM00158 EQU   @NM00157+7
IOPQSMFM EQU   @NM00157
@NM00077 EQU   IOPLMCTL+17
IOPLMCRD EQU   IOPLMCTL+9
IOPLMCRN EQU   IOPLMCTL+1
IOPLMCC  EQU   IOPLMCTL
@NM00052 EQU   IOPUSERL
@NM00051 EQU   IOPUSERL
IOPALIS  EQU   IOPUSERL
IOPTTR   EQU   IOPDRMAP+8
IOPINAM2 EQU   IOPINAM+1
IOPITYP2 EQU   IOPITYP
@NM00050 EQU   HMASMIOP+32
IOPDELDD EQU   IOPDDNAM
@NM00049 EQU   @NM00046+10
IOPSEQNO EQU   @NM00046+8
@NM00048 EQU   @NM00047+7
IOPPTFNM EQU   @NM00047
IOPNAM17 EQU   IOPNAME
IOPTYPE  EQU   HMASMIOP+3
CCABMREC EQU   CCABELMT+10
CCABPOS  EQU   CCABMPOS+8
CCABNAME EQU   CCABMPOS
@NM00045 EQU   CCABLDLM+2
@NM00044 EQU   CCABLDLM
CCAUPDPM EQU   @NM00042+24
@NM00043 EQU   @NM00042+21
CCARUPDT EQU   CCAUPDRC
CCAUPDSP EQU   @NM00042+12
CCAUPDTE EQU   @NM00042+8
CCAUPDNM EQU   @NM00042
CCASUPPM EQU   @NM00040+24
@NM00041 EQU   @NM00040+21
CCARSUP  EQU   CCASUPRC
CCASUPSP EQU   @NM00040+12
CCAIOSUP EQU   @NM00040+8
CCASUPNM EQU   @NM00040
CCAZAPPM EQU   @NM00038+24
@NM00039 EQU   @NM00038+21
CCARZAP  EQU   CCAZAPRC
CCAZAPSP EQU   @NM00038+12
CCASPZAP EQU   @NM00038+8
CCAZAPNM EQU   @NM00038
CCACOMPM EQU   @NM00036+24
@NM00037 EQU   @NM00036+21
CCARCOMP EQU   CCACOMRC
CCACOMSP EQU   @NM00036+12
CCACOMRS EQU   @NM00036+8
CCACOMNM EQU   @NM00036
CCACPYPM EQU   @NM00034+24
@NM00035 EQU   @NM00034+21
CCARCOPY EQU   CCACPYRC
CCACPYSP EQU   @NM00034+12
CCACOPY  EQU   @NM00034+8
CCACPYNM EQU   @NM00034
CCAASMPM EQU   @NM00032+24
@NM00033 EQU   @NM00032+21
CCARASM  EQU   CCAASMRC
CCAASMSP EQU   @NM00032+12
CCAASM   EQU   @NM00032+8
CCAASMNM EQU   @NM00032
CCALKDPM EQU   @NM00030+24
@NM00031 EQU   @NM00030+21
CCARLINK EQU   CCALKDRC
CCALKDSP EQU   @NM00030+12
CCALKED  EQU   @NM00030+8
CCALKDNM EQU   @NM00030
CCAPGMPM EQU   @NM00028+24
@NM00029 EQU   @NM00028+21
CCABPGRC EQU   @NM00028+20
CCABPGSP EQU   @NM00028+12
CCABPGAD EQU   @NM00028+8
CCABPGNM EQU   @NM00028
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RF00242 EQU   @RC00234
@RC00237 EQU   @RC00234
@RC00247 EQU   @RC00234
@RF00261 EQU   @RC00257
@RC00269 EQU   @RC00267
@ENDDATA EQU   *
         END   HMASMCRD,(C'PLS2116',0802,78334)
