         TITLE 'HMASMCPY - JCLIN COPY STEP PROCESSOR'
HMASMCPY CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'HMASMCPY  78.334'                                 0001
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                     0001
         BALR  @12,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,@12                                         0001
         ST    @13,@SA00001+4                                      0001
         LA    @14,@SA00001                                        0001
         ST    @14,8(,@13)                                         0001
         LR    @13,@14                                             0001
         MVC   @PC00001(16),0(@01)                                 0001
*   IOPPTR=CCAIOPTR;                /* SET ADDRESS OF THE IOP        */
         L     IOPPTR,CCAIOPTR(,CCAPTR)                            0167
*   SCPPTR=ADDR(CPYSCP);            /* LOCAL SCP             @Z67SP00*/
         LA    @10,CPYSCP                                          0168
         ST    @10,SCPPTR                                          0168
*   HMASMSCP=CRPSCPAD->HMASMSCP;    /* COPY PASSED SCP       @Z67SP00*/
         L     @08,@PC00001+4                                      0169
         L     @01,CRPSCPAD(,@08)                                  0169
         MVC   HMASMSCP(26,@10),HMASMSCP(@01)                      0169
*   CRPSCPAD=SCPPTR;                /* CHAIN CRP TO SCP      @Z67SP00*/
         ST    @10,CRPSCPAD(,@08)                                  0170
*   SCPSRCH=ADDR(COPYK);            /* SET STARTING SEARCH ARGUMENT  */
         LA    @15,COPYK                                           0171
         ST    @15,SCPSRCH(,@10)                                   0171
*   SCPCHAR=ADDR(CRPBUFFR);         /* INIT INPUT LIST ADDR  @Z67SP00*/
         LA    @08,CRPBUFFR(,@08)                                  0172
         ST    @08,SCPCHAR(,@10)                                   0172
*   SCPIORTN=ZERO;                  /* ZERO THE I/O ROUTINE ADDR     */
         SLR   @08,@08                                             0173
         ST    @08,SCPIORTN(,@10)                                  0173
*   SCPINLN=LRECL;                  /* SET RECORD LENGTH             */
         MVC   SCPINLN(2,@10),@CH00117                             0174
*   SCPEOR=ZERO;                    /* ZERO THE FLAGS        @YA07506*/
         MVI   SCPEOR(@10),X'00'                                   0175
*   BUPFUNCT=BUPABKUP;              /* ADD SCDS BACKUP ENTRIES     0176
*                                                            @Z67SP00*/
         L     @10,@PC00001                                        0176
         MVI   BUPFUNCT(@10),X'01'                                 0176
*   BUPIOPAD=ADDR(HMASMIOP);        /* ADDRESS OF IOP FOR BAKUP    0177
*                                                            @Z67SP00*/
         ST    IOPPTR,BUPIOPAD(,@10)                               0177
*   BUFADSAV=IOPBUFAD;              /* IOPBUFAD SAVED        @Z67SP00*/
         L     @10,IOPBUFAD(,IOPPTR)                               0178
         ST    @10,BUFADSAV                                        0178
*   SWITCHES=ZERO;                  /* INIT SWITCHES         @YA07506*/
         MVI   SWITCHES,X'00'                                      0179
*COPYSC10:                                                         0180
*   CALL HMASMSCN(HMASMSCP);        /* SCAN IEBCOPY STMT             */
COPYSC10 L     @10,SCPPTR                                          0180
         ST    @10,@AL00001                                        0180
         L     @15,@CV01337                                        0180
         LA    @01,@AL00001                                        0180
         BALR  @14,@15                                             0180
*   OUTDDSW=OFF;                    /* RESET COPY OUTDD SWITCH     0181
*                                                            @ZA01999*/
*   INDDSW=OFF;                     /* AND COPY INDD SWITCH  @ZA01999*/
         NI    OUTDDSW,B'10011111'                                 0182
*   IF SCPRET^=SCPGOOD              /* RETURN GOOD?          @YA07506*/
*     THEN                          /* NO - CHECK TYPE ERR   @YA05690*/
         L     @10,SCPPTR                                          0183
         CLI   SCPRET(@10),0                                       0183
         BE    @RF00183                                            0183
*     IF EXCERR=ON                  /* IOP EXCEEDED?         @YA05690*/
*       THEN                        /* YES                   @YA05690*/
         TM    EXCERR,B'00010000'                                  0184
         BNO   @RF00184                                            0184
*       RETURN CODE(IOPEXC);        /* SET RETURN CODE       @YA05690*/
         LA    @15,8                                               0185
         L     @13,4(,@13)                                         0185
         L     @14,12(,@13)                                        0185
         LM    @00,@12,20(@13)                                     0185
         BR    @14                                                 0185
*     ELSE                          /* MUST BE SYNTAX        @YA05690*/
*       IF SCPRET>IOPNTCLS          /* I/O ERR?              @YA07506*/
*         THEN                      /* YES                   @YA07506*/
@RF00184 L     @10,SCPPTR                                          0186
         CLI   SCPRET(@10),12                                      0186
         BH    @RT00186                                            0186
*         GO TO IOOR;               /*                       @YA07506*/
*       ELSE                        /*                       @YA07506*/
*         DO;                       /*                       @SA72421*/
*           LPTR=ADDR(CRPBUFFR);    /* POINT TO LINE IN ERR  @Z67SP00*/
         L     @10,@PC00001+4                                      0189
         LA    @10,CRPBUFFR(,@10)                                  0189
         ST    @10,LPTR                                            0189
*           APTR=ADDR(INVALCPY);    /* SET ACTION INFO PTR   @SA72421*/
         LA    @10,INVALCPY                                        0190
         ST    @10,APTR                                            0190
*           CALL HMACPYR(JPTR);     /* WRITE MSG             @SA72421*/
         LA    @01,@AL00191                                        0191
         BAL   @14,HMACPYR                                         0191
*           RETURN CODE(SYNTERR);   /* RETURN                @YA05690*/
         LA    @15,10                                              0192
         L     @13,4(,@13)                                         0192
         L     @14,12(,@13)                                        0192
         LM    @00,@12,20(@13)                                     0192
         BR    @14                                                 0192
*         END;                      /*                       @SA72421*/
*   CALL HMASMCRD(HMASMCRP);        /* READ INPUT DATASET    @Z67SP00*/
@RF00183 L     @10,@PC00001+4                                      0194
         ST    @10,@AL00001                                        0194
         L     @15,@CV01340                                        0194
         LA    @01,@AL00001                                        0194
         BALR  @14,@15                                             0194
*   IF CRPRETRN=CRPEOF×             /* EOF ON READ?          @Z67SP00*/
*       (CRPBUFFR(1:2)=PLUSPLUS&    /* IS COL 1:2 = ++ FOR   @Z67SP00*/
*       CRPINDS=IOPPTS)             /* INPUT DATASET OF PTS? @Z67SP00*/
*     THEN                          /* YES                   @YA07506*/
         L     @10,@PC00001+4                                      0195
         CLI   CRPRETRN(@10),4                                     0195
         BE    @RT00195                                            0195
         CLC   CRPBUFFR(2,@10),@CC01357                            0195
         BNE   @RF00195                                            0195
         CLI   CRPINDS(@10),6                                      0195
         BNE   @RF00195                                            0195
@RT00195 DS    0H                                                  0196
*     EOFSW=ON;                     /* REMEMBER IT           @YA07506*/
         OI    EOFSW,B'00001000'                                   0196
*   IF CRPRETRN>CRPEOF              /* I/O ERROR?            @Z67SP00*/
*     THEN                          /*                       @SA72421*/
@RF00195 L     @10,@PC00001+4                                      0197
         CLI   CRPRETRN(@10),4                                     0197
         BNH   @RF00197                                            0197
*IOOR:                                                             0198
*     DO;                           /*                       @SA72421*/
IOOR     DS    0H                                                  0199
*       LPTR=ADDR(CRPBUFFR);        /* POINT TO LINE IN ERR  @Z67SP00*/
         L     @10,@PC00001+4                                      0199
         LA    @10,CRPBUFFR(,@10)                                  0199
         ST    @10,LPTR                                            0199
*       APTR=ADDR(LASTLINE);        /* SET ACTION INFO PTR   @SA72421*/
         LA    @10,LASTLINE                                        0200
         ST    @10,APTR                                            0200
*       CALL HMACPYR(JPTR);         /* WRITE MSG             @SA72421*/
         LA    @01,@AL00201                                        0201
         BAL   @14,HMACPYR                                         0201
*       RETURN CODE(CRPTSMP);       /* INDICATE I/O ERROR    @Z67SP00*/
         LA    @15,16                                              0202
         L     @13,4(,@13)                                         0202
         L     @14,12(,@13)                                        0202
         LM    @00,@12,20(@13)                                     0202
         BR    @14                                                 0202
*     END;                          /*                       @SA72421*/
*                                                                  0204
*   /*****************************************************************/
*   /*                                                               */
*   /* DETERMINE IF CRPBUFFR 1:2 HAS EITHER A //, OR ++, OR          */
*   /* SLASH-ASTERIC, (++ FOR PTS DATASET) TO CAUSE RETURN TO CALLER.*/
*   /*                                                       @Z67SP00*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0204
*   IF CRPBUFFR(1:2)^=SLASHAST      /* END OF FILE?          @Z67SP00*/
*       &CRPBUFFR(1:2)^=TWOSLASH    /* OR JCL ENCOUNTERED ?  @Z67SP00*/
*       &CRPRETRN=CRPGOOD           /* AND NOT END OF FILE   @Z67SP00*/
*       &EOFSW=OFF                  /* NOT A ++ FOR PTS      @Z67SP00*/
*     THEN                                                         0204
@RF00197 L     @10,@PC00001+4                                      0204
         CLC   CRPBUFFR(2,@10),@CC01353                            0204
         BE    @RF00204                                            0204
         CLC   CRPBUFFR(2,@10),@CC01355                            0204
         BE    @RF00204                                            0204
         CLI   CRPRETRN(@10),0                                     0204
         BNE   @RF00204                                            0204
         TM    EOFSW,B'00001000'                                   0204
         BZ    @RT00204                                            0204
*     GO TO COPYSC10;               /* NO - CONTINUE SCAN            */
*   IF SELECTSW=ON                  /* IS THIS A DLIB ENTRY          */
*     THEN                          /* YES - MUST CREATE ENTRY       */
@RF00204 TM    SELECTSW,B'10000000'                                0206
         BNO   @RF00206                                            0206
*     DO;                           /*                       @YA07506*/
*       CALL DLIBSTR;               /* STORE DLIB ENTRY              */
         BAL   @14,DLIBSTR                                         0208
*       RFY                                                        0209
*         RTNCODE RSTD;             /*                       @Z40SP00*/
*       IF RTNCODE^=IOPGOOD         /* I/O ERROR?            @Z67SP00*/
*         THEN                                                     0210
         LTR   RTNCODE,RTNCODE                                     0210
         BNZ   @RT00210                                            0210
*         GO TO IOOR;               /* WRITE ERR MSG         @SA72421*/
*       RFY                                                        0212
*         RTNCODE UNRSTD;           /*                       @Z40SP00*/
*     END;                          /*                               */
*   IF EOFSW=ON                     /* EOF BEEN FOUND        @YA07506*/
*     THEN                                                         0214
@RF00206 TM    EOFSW,B'00001000'                                   0214
         BNO   @RF00214                                            0214
*     RETURN CODE(PREMEOF);         /* YES - IND PREMATURE EOF       */
         LA    @15,14                                              0215
         L     @13,4(,@13)                                         0215
         L     @14,12(,@13)                                        0215
         LM    @00,@12,20(@13)                                     0215
         BR    @14                                                 0215
*   IF CRPBUFFR(1:2)=TWOSLASH       /* WAS JCL FOUND ?       @Z67SP00*/
*     THEN                                                         0216
@RF00214 L     @10,@PC00001+4                                      0216
         CLC   CRPBUFFR(2,@10),@CC01355                            0216
         BNE   @RF00216                                            0216
*     RETURN CODE(JCLENC);          /* YES - INDICATE TO DRIVER      */
         LA    @15,6                                               0217
         L     @13,4(,@13)                                         0217
         L     @14,12(,@13)                                        0217
         LM    @00,@12,20(@13)                                     0217
         BR    @14                                                 0217
*   ELSE                                                           0218
*     RETURN CODE(IOPGOOD);         /* RC=0 FOR SLASH-ASTERIC      0218
*                                                            @Z67SP00*/
@RF00216 SLR   @15,@15                                             0218
         L     @13,4(,@13)                                         0218
         L     @14,12(,@13)                                        0218
         LM    @00,@12,20(@13)                                     0218
         BR    @14                                                 0218
*                                                                  0219
*/********************************************************************/
*/*                                                                  */
*/*            OUTPUT LIBRARY FOUND - SAVE VALUE                     */
*/*                                                                  */
*/********************************************************************/
*                                                                  0219
*SYSLR010:                                                         0219
*   PROCEDURE OPTIONS(SAVEAREA);                                   0219
SYSLR010 STM   @14,@12,12(@13)                                     0219
         ST    @13,@SA00002+4                                      0219
         LA    @14,@SA00002                                        0219
         ST    @14,8(,@13)                                         0219
         LR    @13,@14                                             0219
*   IF SELECTSW=ON                  /* IF SELECT NOT FOUND AFTER LAST
*                                      COPY STATEMENT....... @ZA01999*/
*     THEN                          /* ON THIS COPY STMT THEN CREATE
*                                      DLIB ENTRY            @ZA01999*/
         TM    SELECTSW,B'10000000'                                0220
         BNO   @RF00220                                            0220
*     DO;                           /*                       @OP99999*/
*       CALL DLIBSTR;               /* FOR PREVIOUS COPY STMT      0222
*                                                            @ZA01999*/
         BAL   @14,DLIBSTR                                         0222
*       RFY                                                        0223
*         RTNCODE RSTD;             /*                       @Z40SP00*/
*       IF RTNCODE^=IOPGOOD         /* BAD RETURN?           @YA07506*/
*         THEN                      /* YES - INDICATE TO SCAN        */
         LTR   RTNCODE,RTNCODE                                     0224
         BZ    @RF00224                                            0224
*         DO;                                                      0225
*           SCPRET=RTNCODE;         /* INDICATE ERROR        @YA07506*/
         L     @14,SCPPTR                                          0226
         STC   RTNCODE,SCPRET(,@14)                                0226
*           RFY                                                    0227
*             RTNCODE UNRSTD;       /*                       @Z40SP00*/
*           RETURN;                 /* RETURN TO HMASMSCN            */
@EL00002 L     @13,4(,@13)                                         0228
@EF00002 DS    0H                                                  0228
@ER00002 LM    @14,@12,12(@13)                                     0228
         BR    @14                                                 0228
*         END;                                                     0229
*     END;                          /* END CREATE ENTRY      @OP99999*/
@RF00224 DS    0H                                                  0231
*   SYSLIBSV=SCPSTRNG(1:SCPPMLN);   /* SAVE SYSTEM LIB       @YA07506*/
@RF00220 MVI   SYSLIBSV+1,C' '                                     0231
         MVC   SYSLIBSV+2(6),SYSLIBSV+1                            0231
         L     @10,SCPPTR                                          0231
         LH    @08,SCPPMLN(,@10)                                   0231
         BCTR  @08,0                                               0231
         L     @10,SCPCHAR(,@10)                                   0231
         EX    @08,@SM01447                                        0231
*   OUTDDSW=ON;                     /* OUTDDSW KEYWORD FOUND SW    0232
*                                                            @ZA01999*/
         OI    OUTDDSW,B'01000000'                                 0232
*   IF INDDSW=ON                    /* IF INDD ALREADY FOUND SET UP
*                                      IN                    @ZA01999*/
*     THEN                          /* CASE THERE ARE NO SELECTS   0233
*                                      FOLLOWING             @ZA01999*/
         TM    INDDSW,B'00100000'                                  0233
         BNO   @RF00233                                            0233
*     SELECTSW=ON;                  /* INDICATE COPY STMT            */
         OI    SELECTSW,B'10000000'                                0234
*   END SYSLR010;                   /* RETURN                        */
         B     @EL00002                                            0235
*                                                                  0236
*/********************************************************************/
*/*                                                                  */
*/*           INPUT DLIB FOUND - SAVE IN CDS ENTRY                   */
*/*                                                                  */
*/********************************************************************/
*                                                                  0236
*DLIBR010:                                                         0236
*   PROCEDURE;                                                     0236
DLIBR010 STM   @14,@12,@SA00003                                    0236
*   IF SELECTSW=ON                  /* IF NO SELECTS FOUND AFTER   0237
*                                      PREVIOUS COPY STMT    @ZA01999*/
*     THEN                          /* BUILD DLIB ENTRY FROM PREVIOUS
*                                      COPY STMT             @ZA01999*/
         TM    SELECTSW,B'10000000'                                0237
         BNO   @RF00237                                            0237
*     DO;                           /* ROUTINE TO STORE IT   @ZA01999*/
*       CALL DLIBSTR;               /* CALL STORE ROUTINE    @ZA01999*/
         BAL   @14,DLIBSTR                                         0239
*       RFY                                                        0240
*         RTNCODE RSTD;             /*                       @Z40SP00*/
*       IF RTNCODE^=IOPGOOD         /* BAD STORE?            @YA07506*/
*         THEN                      /* SET UP FOR BAD RETRN  @ZA01999*/
         LTR   RTNCODE,RTNCODE                                     0241
         BZ    @RF00241                                            0241
*         DO;                       /*                       @ZA01999*/
*           SCPRET=RTNCODE;         /* BAD CODE FOR SCAN     @YA07506*/
         L     @14,SCPPTR                                          0243
         STC   RTNCODE,SCPRET(,@14)                                0243
*           RFY                                                    0244
*             RTNCODE UNRSTD;       /*                       @Z40SP00*/
*           RETURN;                 /* RETURN TO HMASMSCN    @ZA01999*/
@EL00003 DS    0H                                                  0245
@EF00003 DS    0H                                                  0245
@ER00003 LM    @14,@12,@SA00003                                    0245
         BR    @14                                                 0245
*         END;                      /* END BAD DLIB SAV      @ZA01999*/
*     END;                          /* END DLIBSAV DO        @ZA01999*/
@RF00241 DS    0H                                                  0248
*   DLIB8=SCPSTRNG(1:SCPPMLN);      /* SAVE DLIB NAME        @Z40SP63*/
@RF00237 MVI   DLIB8+1,C' '                                        0248
         MVC   DLIB8+2(6),DLIB8+1                                  0248
         L     @10,SCPPTR                                          0248
         LH    @08,SCPPMLN(,@10)                                   0248
         BCTR  @08,0                                               0248
         L     @10,SCPCHAR(,@10)                                   0248
         EX    @08,@SM01451                                        0248
*   INDDSW=ON;                      /* INDD FOUND ON COPY STMT     0249
*                                                            @ZA01999*/
         OI    INDDSW,B'00100000'                                  0249
*   IF OUTDDSW=ON                   /* IF OUTDD ALREADY FOUND THEN 0250
*                                      SET UP                @ZA01999*/
*     THEN                          /* IN CASE NO SELECTS FOLLOW AND
*                                      DLIB NEEDED           @ZA01999*/
         TM    OUTDDSW,B'01000000'                                 0250
         BNO   @RF00250                                            0250
*     SELECTSW=ON;                  /* IN CASE NO SELECTS FOLLOW   0251
*                                                            @ZA01999*/
         OI    SELECTSW,B'10000000'                                0251
*   END DLIBR010;                   /* RETURN TO SCAN                */
         B     @EL00003                                            0252
*                                                                  0253
*/********************************************************************/
*/*                                                                  */
*/*         MEMBER NAME FOUND FOR POSSIBLE RENAME                    */
*/*                                                                  */
*/********************************************************************/
*                                                                  0253
*MEMNM010:                                                         0253
*   PROCEDURE;                                                     0253
MEMNM010 STM   @14,@12,12(@13)                                     0253
*   IOPNAME=SCPSTRNG(1:SCPPMLN);    /* MOVE MOD NAME 2 IOP   @YA07506*/
         MVI   IOPNAME+1(IOPPTR),C' '                              0254
         MVC   IOPNAME+2(6,IOPPTR),IOPNAME+1(IOPPTR)               0254
         L     @10,SCPPTR                                          0254
         LH    @08,SCPPMLN(,@10)                                   0254
         BCTR  @08,0                                               0254
         L     @10,SCPCHAR(,@10)                                   0254
         EX    @08,@SM01454                                        0254
*   LOADMDSV=IOPNAME;               /* SAVE LOAD MODULE NAME         */
         MVC   LOADMDSV(8),IOPNAME(IOPPTR)                         0255
*   END MEMNM010;                   /* RETURN                        */
@EL00004 DS    0H                                                  0256
@EF00004 DS    0H                                                  0256
@ER00004 LM    @14,@12,12(@13)                                     0256
         BR    @14                                                 0256
*                                                                  0257
*/********************************************************************/
*/*                                                                  */
*/*      RENAME SPECIFIED - CHANGE LM NAME IN CDS                    */
*/*                                                                  */
*/********************************************************************/
*                                                                  0257
*MEMNM020:                                                         0257
*   PROCEDURE;                                                     0257
MEMNM020 STM   @14,@12,12(@13)                                     0257
*   LOADMDSV=SCPSTRNG(1:SCPPMLN);   /* MEMBER RENAMED - UPDATED LOAD
*                                      MOD                   @YA07506*/
         MVI   LOADMDSV+1,C' '                                     0258
         MVC   LOADMDSV+2(6),LOADMDSV+1                            0258
         L     @10,SCPPTR                                          0258
         LH    @08,SCPPMLN(,@10)                                   0258
         BCTR  @08,0                                               0258
         L     @10,SCPCHAR(,@10)                                   0258
         EX    @08,@SM01456                                        0258
*   END MEMNM020;                   /* RETURN TO CONTINUE SCAN       */
@EL00005 DS    0H                                                  0259
@EF00005 DS    0H                                                  0259
@ER00005 LM    @14,@12,12(@13)                                     0259
         BR    @14                                                 0259
*                                                                  0260
*/********************************************************************/
*/*                                                                  */
*/*       SELECT STMT COMPLETE - OUTPUT ENTRY OF CDS                 */
*/*                                                                  */
*/********************************************************************/
*                                                                  0260
*CDSWRT10:                                                         0260
*   PROCEDURE OPTIONS(SAVEAREA);                                   0260
CDSWRT10 STM   @14,@12,12(@13)                                     0260
         ST    @13,@SA00006+4                                      0260
         LA    @14,@SA00006                                        0260
         ST    @14,8(,@13)                                         0260
         LR    @13,@14                                             0260
*   SELECTSW=OFF;                   /* SELECTS FOUND NO DLIB NEEDED
*                                                            @ZA01999*/
*                                                                  0261
         NI    SELECTSW,B'01111111'                                0261
*   /*****************************************************************/
*   /*                                                               */
*   /* PROCESSING OF THE MOD ENTRIES STARTS HERE. LOCATE THE @Z67SP00*/
*   /* MOD ENTRY IN THE CDS. SET UP BUPTYPE, BASED ON RC. IF @Z67SP00*/
*   /* THE ENTRY IS NOT BEING CHANGED, THEN BYPASS THE SAVE  @Z67SP00*/
*   /* SCDS,BUILD AND STOW. FOR ADD OR CHANGE SAVE SCDS,     @Z67SP00*/
*   /* BUILD THE ENTRY AND STOW THE MOD ENTRY.               @Z67SP00*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0262
*   IOPTYPE=IOPMOD;                 /* INDICATE CSECT ENTRY  @Z40SP63*/
         MVI   IOPTYPE(IOPPTR),X'05'                               0262
*   IOPDSID=IOPCDSM;                /* INDICATE CDS                  */
         MVI   IOPDSID(IOPPTR),X'02'                               0263
*   IOPFUNCT=IOPLOC;                /* INDICATE LOCATE OPERATION     */
*                                                                  0264
         MVI   IOPFUNCT(IOPPTR),X'03'                              0264
*   /*****************************************************************/
*   /*                                                               */
*   /* LOCATE MODULE ENTRY IN CDS                            @Z67SP00*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0265
*   CALL HMASMIO(HMASMIOP);         /* FIND MODULE ENTRY             */
         ST    IOPPTR,@AL00001                                     0265
         L     @15,@CV01338                                        0265
         LA    @01,@AL00001                                        0265
         BALR  @14,@15                                             0265
*                                                                  0266
*   /*****************************************************************/
*   /*                                                               */
*   /* IF ENTRY NOT FOUND INIT IOP WITH DUMMY ENTRY AND CALL HMASMBUR*/
*   /* TO BACKUP ANTRY AS ADDED TYPE                         @Z67SP00*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0266
*   IF IOPRETRN=IOPNTFND            /* IF ENTRY NOT FOUND    @Z67SP00*/
*     THEN                          /*                               */
         CLI   IOPRETRN(IOPPTR),4                                  0266
         BNE   @RF00266                                            0266
*     DO;                           /* ENTRY IS BEING ADDED  @Z67SP00*/
*       I=1;                        /* SET POSITION INDICATOR        */
         MVC   I(4),@CF00046                                       0268
*       IOPMODNT=IOPMODNT&&IOPMODNT;/* INIT MOD ENTRY        @Z40SP63*/
         XC    IOPMODNT(104,IOPPTR),IOPMODNT(IOPPTR)               0269
*       IOPFMID=BLANK;              /* INIT FMID FIELD       @Z67SP00*/
         MVI   IOPFMID+1(IOPPTR),C' '                              0270
         MVC   IOPFMID+2(5,IOPPTR),IOPFMID+1(IOPPTR)               0270
         MVI   IOPFMID(IOPPTR),C' '                                0270
*       IOPNTLVL=IOPMODLC;          /*                       @Z40SP63*/
         MVI   IOPNTLVL(IOPPTR),X'02'                              0271
*       IOPRMID=BLANK;              /*                               */
         MVI   IOPRMID+1(IOPPTR),C' '                              0272
         MVC   IOPRMID+2(5,IOPPTR),IOPRMID+1(IOPPTR)               0272
         MVI   IOPRMID(IOPPTR),C' '                                0272
*       IOPMODND(1)=IOPEOLST;       /*                       @Z40SP63*/
         MVI   IOPMODND(IOPPTR),X'FF'                              0273
*       BUPTYPE=BUPADD;             /* INDICATE NEW ENTRY    @Z67SP00*/
         L     @10,@PC00001                                        0274
         MVI   BUPTYPE(@10),X'01'                                  0274
*       CALL HMASMBUE(BUPPARM);     /*                       @Z67SP00*/
         ST    @10,@AL00001                                        0275
         L     @15,@CV01339                                        0275
         LA    @01,@AL00001                                        0275
         BALR  @14,@15                                             0275
*       RFY                         /*                       @Z67SP00*/
*         RTNCODE RSTD;             /*                       @Z67SP00*/
*       IOPRETRN=RTNCODE;           /* IF ERROR FROM BUE     @Z67SP00*/
         STC   RTNCODE,IOPRETRN(,IOPPTR)                           0277
*       RFY                         /*                       @Z67SP00*/
*         RTNCODE UNRSTD;           /*                       @Z67SP00*/
*     END;                          /* END ENTRY NOT FOUND   @Z67SP00*/
*                                                                  0279
*   /*****************************************************************/
*   /*                                                               */
*   /* IF ENTRY FOUND THEN DETERMINE WHETHER ENTRY WILL BE CHANGED.  */
*   /* ENTRY CHANGED IN LMOD NOT ALREADY PRESENT OR DLIB CHANGED. IF */
*   /* ENTRY TO BE CHANGED THEN CALL HMASMBUE TO CREATE SCDS BACKUP  */
*   /* COPY                                                          */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0280
*   ELSE                            /*                       @Z67SP00*/
*     IF IOPRETRN=IOPGOOD           /* IF ENTRY FOUND        @Z67SP00*/
*       THEN                        /*                       @Z67SP00*/
         B     @RC00266                                            0280
@RF00266 CLI   IOPRETRN(IOPPTR),0                                  0280
         BNE   @RF00280                                            0280
*       DO;                         /*                       @Z67SP00*/
*         DO I=1 BY 1 WHILE         /* LOOP THROUGH SUBENTS  @Z67SP00*/
*               (IOPMODND(I)^=IOPEOLST/* TILL END            @Z67SP00*/
*               &(IOPLMODS(I)^=LOADMDSV/* OR LMOD FOUND      @Z67SP00*/
*               ×IOPMDIND(I)^=IOPMDLMD));/*                  @Z67SP00*/
         LA    @10,1                                               0282
         ST    @10,I                                               0282
         B     @DE00282                                            0282
@DL00282 DS    0H                                                  0283
*         END;                      /*                       @Z67SP00*/
         LA    @10,1                                               0283
         AL    @10,I                                               0283
         ST    @10,I                                               0283
@DE00282 L     @10,I                                               0283
         MH    @10,@CH00516                                        0283
         SLR   @08,@08                                             0283
         IC    @08,IOPMODND-9(@10,IOPPTR)                          0283
         C     @08,@CF00704                                        0283
         BE    @DC00282                                            0283
         ST    @10,@TF00001                                        0283
         ALR   @10,IOPPTR                                          0283
         CLC   IOPLMODS-9(8,@10),LOADMDSV                          0283
         BNE   @DL00282                                            0283
         L     @10,@TF00001                                        0283
         SLR   @08,@08                                             0283
         IC    @08,IOPMDIND-9(@10,IOPPTR)                          0283
         C     @08,@CF00046                                        0283
         BNE   @DL00282                                            0283
@DC00282 DS    0H                                                  0284
*         IF IOPMODND(I)=IOPEOLST   /* IF LMOD NOT FOUND     @Z67SP00*/
*             ×IOPDLIB^=DLIB8       /* OR DLIB CHANGED       @Z67SP00*/
*           THEN                    /*                       @Z67SP00*/
         L     @10,I                                               0284
         MH    @10,@CH00516                                        0284
         SLR   @08,@08                                             0284
         IC    @08,IOPMODND-9(@10,IOPPTR)                          0284
         C     @08,@CF00704                                        0284
         BE    @RT00284                                            0284
         CLC   IOPDLIB(8,IOPPTR),DLIB8                             0284
         BE    @RF00284                                            0284
@RT00284 DS    0H                                                  0285
*           DO;                     /*                       @Z67SP00*/
*             BUPTYPE=BUPUPD;       /*                       @Z67SP00*/
         L     @10,@PC00001                                        0286
         MVI   BUPTYPE(@10),X'02'                                  0286
*             CALL HMASMBUE(BUPPARM);/* CREATE BACKUP COPY   @Z67SP00*/
         ST    @10,@AL00001                                        0287
         L     @15,@CV01339                                        0287
         LA    @01,@AL00001                                        0287
         BALR  @14,@15                                             0287
*             RFY                   /*                       @Z67SP00*/
*               RTNCODE RSTD;       /*                       @Z67SP00*/
*             IOPRETRN=RTNCODE;     /* SAVE RETURN CODE      @Z67SP00*/
         STC   RTNCODE,IOPRETRN(,IOPPTR)                           0289
*             RFY                   /*                       @Z67SP00*/
*               RTNCODE UNRSTD;     /*                       @Z67SP00*/
*           END;                    /*                       @Z67SP00*/
*       END;                        /* END MOD FOUND         @Z67SP00*/
*                                                                  0292
*   /*****************************************************************/
*   /*                                                               */
*   /* IF ERROR IN LOCATE CHECK FOR TYP ERROR AND SET INTERNAL SW    */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0293
*     ELSE                          /*                       @Z67SP00*/
*       IF IOPRETRN=IOPEXC          /* IF PEMAX EXCEEDED     @Z67SP00*/
*         THEN                      /*                       @Z67SP00*/
         B     @RC00280                                            0293
@RF00280 CLI   IOPRETRN(IOPPTR),8                                  0293
         BNE   @RF00293                                            0293
*         EXCERR=ON;                /* SET SW                @Z67SP00*/
*                                                                  0294
         OI    EXCERR,B'00010000'                                  0294
*   /*****************************************************************/
*   /*                                                               */
*   /* IF LOCATE OK AND BACKUP ENTRY CREATED AND MOD IS BEING        */
*   /* MODIFIED THEN SET NEW FIELDS AND STOW ENTRY                   */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0295
*   IF IOPRETRN<=IOPNTFND           /* IF LOCATE OK          @Z67SP00*/
*       &(IOPMODND(I)=IOPEOLST      /* AND LMOD NOT FOUND    @Z67SP00*/
*       ×IOPDLIB^=DLIB8)            /* OR NEW DLIB           @Z67SP00*/
*     THEN                          /*                       @Z67SP00*/
@RF00293 DS    0H                                                  0295
@RC00280 DS    0H                                                  0295
@RC00266 CLI   IOPRETRN(IOPPTR),4                                  0295
         BH    @RF00295                                            0295
         L     @10,I                                               0295
         MH    @10,@CH00516                                        0295
         SLR   @08,@08                                             0295
         IC    @08,IOPMODND-9(@10,IOPPTR)                          0295
         C     @08,@CF00704                                        0295
         BE    @RT00295                                            0295
         CLC   IOPDLIB(8,IOPPTR),DLIB8                             0295
         BE    @RF00295                                            0295
@RT00295 DS    0H                                                  0296
*     DO;                           /*                       @Z67SP00*/
*       IF IOPMODND(I)=IOPEOLST     /* IF LMOD NOT FOUND     @Z67SP00*/
*         THEN                      /*                       @Z67SP00*/
         LA    @10,255                                             0297
         L     @08,I                                               0297
         MH    @08,@CH00516                                        0297
         SLR   @15,@15                                             0297
         IC    @15,IOPMODND-9(@08,IOPPTR)                          0297
         CR    @10,@15                                             0297
         BNE   @RF00297                                            0297
*         DO;                       /*                       @Z67SP00*/
*           IOPLMODS(I)=LOADMDSV;   /* PUT LOAD MOD NAME IN LIST     */
         ST    @08,@TF00001                                        0299
         ALR   @08,IOPPTR                                          0299
         MVC   IOPLMODS-9(8,@08),LOADMDSV                          0299
*           IOPMDIND(I)=IOPMDLMD;   /* SET LMOD TYPE         @Z40SP63*/
         LA    @08,1                                               0300
         L     @01,@TF00001                                        0300
         STC   @08,IOPMDIND-9(@01,IOPPTR)                          0300
*           IOPMODND(I+1)=IOPEOLST; /* INDICATE NEW END TO LIST      */
         L     @08,@TF00001                                        0301
         STC   @10,IOPMODND(@08,IOPPTR)                            0301
*         END;                      /*                       @Z67SP00*/
*       IOPDLIB=DLIB8;              /* PUT DIST LIB IN       @Z40SP63*/
@RF00297 MVC   IOPDLIB(8,IOPPTR),DLIB8                             0303
*       IOPFUNCT=IOPSTOWR;          /* INDICATE STOW OPERATION       */
         MVI   IOPFUNCT(IOPPTR),X'54'                              0304
*       CALL HMASMIO(HMASMIOP);     /* STOW UPDATED MODULE ENTRY     */
         ST    IOPPTR,@AL00001                                     0305
         L     @15,@CV01338                                        0305
         LA    @01,@AL00001                                        0305
         BALR  @14,@15                                             0305
*     END;                          /* END MUST STOW ENTRY   @Z67SP00*/
*   IF IOPRETRN^=IOPGOOD            /* SUCCESSFUL I/O?       @YA07506*/
*     THEN                                                         0307
@RF00295 CLI   IOPRETRN(IOPPTR),0                                  0307
         BNE   @RT00307                                            0307
*     GO TO CDSRTNBD;               /* NO - RETURN BADLY TO SCAN     */
*                                                                  0309
*   /*****************************************************************/
*   /*                                                               */
*   /* PROCESSING OF THE LMOD ENTRIES STARTS HERE. LOCATE    @Z67SP00*/
*   /* THE LMOD ENTRY IN THE CDS. SET UP BUPTYPE, BASED ON   @Z67SP00*/
*   /* RC. IF TYPE IS UPDATE, THEN READ FIRST DATA RECORD    @Z67SP00*/
*   /* WHICH HAS THE SYSLIB ENTRIES. IF THE ENTRY IS NOT BE- @Z67SP00*/
*   /* ING CHANGED, THEN BYPASS THE SAVE SCDS, BUILD, WRITE  @Z67SP00*/
*   /* AND STOW. FOR ADD, SAVE SCDS COPY, BUILD THE ENTRY,   @Z67SP00*/
*   /* WRITE AND STOW THE LMOD ENTRY. FOR UPDATE, SAVE SCDS, @Z67SP00*/
*   /* BUILD UPDATED ENTRY. READ THE FIRST DATA RECORD AND   @Z67SP00*/
*   /* IGNORE IT. WRITE THE UPDATED RECORD. THEN CONTINUE    @Z67SP00*/
*   /* TO READ AND WRITE THE REST OF THE DATA RECORDS UNTIL  @Z67SP00*/
*   /* END OF FILE. STOW THE LMOD ENTRY.                     @Z67SP00*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0309
*BYPASS10:                                                         0309
*   IOPNAME=LOADMDSV;               /* PUT LOAD MOD NAME IN LIST     */
BYPASS10 MVC   IOPNAME(8,IOPPTR),LOADMDSV                          0309
*   IOPTYPE=IOPLMD;                 /* INDICATE LOAD MODULE  @Z40SP63*/
         MVI   IOPTYPE(IOPPTR),X'02'                               0310
*   IOPFUNCT=IOPLOC;                /* INDICATE LOCATE OPERATION     */
*                                                                  0311
         MVI   IOPFUNCT(IOPPTR),X'03'                              0311
*   /*****************************************************************/
*   /*                                                               */
*   /* LOCATE LMOD ENTRY IN CDS                              @Z67SP00*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0312
*   CALL HMASMIO(HMASMIOP);         /* FIND LOAD MODULE ENTRY        */
         ST    IOPPTR,@AL00001                                     0312
         L     @15,@CV01338                                        0312
         LA    @01,@AL00001                                        0312
         BALR  @14,@15                                             0312
*   IF IOPRETRN>IOPNOTFD            /* I/O ERROR?            @YA07506*/
*     THEN                                                         0313
         CLI   IOPRETRN(IOPPTR),4                                  0313
         BH    @RT00313                                            0313
*     GO TO CDSRTNBD;               /* YES - EXIT BADLY              */
*                                                                  0314
*   /*****************************************************************/
*   /*                                                               */
*   /* SET UP BUPTYPE FOR CALL TO BUE IF LMOD                @Z67SP00*/
*   /* ENTRY WILL CHANGE AS A RESULT OF PROCESSING.          @Z67SP00*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0315
*   IF IOPRETRN=IOPGOOD THEN        /* DOES ENTRY EXIST?     @Z67SP00*/
         CLI   IOPRETRN(IOPPTR),0                                  0315
         BNE   @RF00315                                            0315
*     BUPTYPE=BUPUPD;               /* ENTRY IS BEING UPDATED      0316
*                                                            @Z67SP00*/
         L     @10,@PC00001                                        0316
         MVI   BUPTYPE(@10),X'02'                                  0316
*   ELSE                                                           0317
*     DO;                           /* DO FOR NEW ENTRIES    @Z67SP00*/
         B     @RC00315                                            0317
@RF00315 DS    0H                                                  0318
*       BUPTYPE=BUPADD;             /* ENTRY IS BEING ADDED  @Z67SP00*/
         L     @10,@PC00001                                        0318
         MVI   BUPTYPE(@10),X'01'                                  0318
*       IOPLMDNT=IOPLMDNT&&IOPLMDNT;/* INIT LMOD IN CASE NOT @Z40SP63*/
         XC    IOPLMDNT(104,IOPPTR),IOPLMDNT(IOPPTR)               0319
*       IOPNTLVL=IOPLMDLC;          /* MOD NOT FOUND         @Z40SP63*/
         MVI   IOPNTLVL(IOPPTR),X'02'                              0320
*       IOPLMDND(1)=IOPEOLST;       /* SET FIRST ENTRY = FF  @Z67SP00*/
         MVI   IOPLMDND(IOPPTR),X'FF'                              0321
*     END;                          /*                       @Z67SP00*/
*                                                                  0323
*   /*****************************************************************/
*   /*                                                               */
*   /* LOOK FOR A SYSLIB SUBENTRY EQUAL TO ONE BEING ADDED.  @Z67SP00*/
*   /* IF THERE WILL BE NO CHANGE AS A RESULT OF THE PROCESS @Z67SP00*/
*   /* THEN BYPASS THE SAVE SCDS, WRITE AND STOW.            @Z67SP00*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0323
*   I=0;                            /* NUM OF SYSLIB FOUND   @Z40SP63*/
@RC00315 SLR   @10,@10                                             0323
         ST    @10,I                                               0323
*   DO INDX1=1 BY 1 TO DIM(IOPLNTRY)/* LOOP THRU MOD SUBENT  @Z67SP00*/
*         WHILE IOPLMDND(INDX1)^=IOPEOLST;/* TILL END        @Z67SP00*/
         LA    @10,1                                               0324
         ST    @10,INDX1                                           0324
@DL00324 MH    @10,@CH00516                                        0324
         SLR   @08,@08                                             0324
         IC    @08,IOPLMDND-9(@10,IOPPTR)                          0324
         C     @08,@CF00704                                        0324
         BE    @DC00324                                            0324
*     IF IOPLMIND(INDX1)=IOPLMSYS   /* IF THIS IS SYLIB      @Z40SP63*/
*       THEN                        /*                       @Z40SP63*/
         SLR   @08,@08                                             0325
         IC    @08,IOPLMIND-9(@10,IOPPTR)                          0325
         C     @08,@CF00046                                        0325
         BNE   @RF00325                                            0325
*       DO;                         /*                       @Z40SP63*/
*         IF IOPLSYS(INDX1)=SYSLIBSV/* THIS SYSLIB ALREADY   @Z40SP63*/
*           THEN                    /* YES - IGNORE STOW             */
         ALR   @10,IOPPTR                                          0327
         CLC   IOPLSYS-9(8,@10),SYSLIBSV                           0327
         BNE   @RF00327                                            0327
*           DO;                                                    0328
*             IF IOPCOPY=ON         /* IF ALREADY HAS COPY   @Z40SP63*/
*               THEN                /* SET THEN              @Z40SP63*/
         TM    IOPCOPY(IOPPTR),B'10000000'                         0329
         BO    @RT00329                                            0329
*               RETURN;             /* RETURN TO HMASMSCN    @Z67SP00*/
*             ELSE                  /* IF COPY NOT ON        @Z40SP63*/
*               GO TO UPDTSYSL;     /* CONTINUE AT BACKUP    @Z67SP00*/
         B     UPDTSYSL                                            0331
*           END;                                                   0332
*         I=I+1;                    /* INCR SYSLIB NUM       @Z40SP63*/
@RF00327 LA    @10,1                                               0333
         AL    @10,I                                               0333
         ST    @10,I                                               0333
*         IF I=IOPLSMAX             /* IF THIS IS MAXIMUM    @Z40SP63*/
*           THEN                    /* SYSLIB                @Z40SP63*/
         C     @10,@CF00056                                        0334
         BE    @RT00334                                            0334
*           GO TO UPDTSYSL;         /* GO OVERLAY IT         @Z40SP63*/
*       END;                                                       0336
*   END;                            /* END MOD IOP LOOP      @Z40SP63*/
@RF00325 LA    @10,1                                               0337
         AL    @10,INDX1                                           0337
         ST    @10,INDX1                                           0337
         C     @10,@CF00048                                        0337
         BNH   @DL00324                                            0337
@DC00324 DS    0H                                                  0338
*                                                                  0338
*   /*****************************************************************/
*   /*                                                               */
*   /* AT THIS POINT IT HAS BEEN DETERMINED THAT THE LMOD    @Z67SP00*/
*   /* ENTRY WILL EITHER BE CHANGED OR ADDED. CALL HMASMBUE  @Z67SP00*/
*   /* TO CREATE THE BACKUP SCDS ENTRY, BUILD THE LMOD ENTRY @Z67SP00*/
*   /* AND WRITE IT BACK OUT AND THEN DO THE STOW TO THE CDS.        */
*   /*                                                       @Z67SP00*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0338
*UPDTSYSL:                          /*                       @Z40SP63*/
*                                                                  0338
*   /*****************************************************************/
*   /*                                                               */
*   /* CALL HMASMBUE TO CREATE SCDS ENTRY                    @Z67SP00*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0338
*   CALL HMASMBUE(BUPPARM);         /* CREATE BACKUP ENTRY   @Z67SP00*/
UPDTSYSL L     @10,@PC00001                                        0338
         ST    @10,@AL00001                                        0338
         L     @15,@CV01339                                        0338
         LA    @01,@AL00001                                        0338
         BALR  @14,@15                                             0338
*   RFY                                                            0339
*     RTNCODE RSTD;                 /*                       @Z67SP00*/
*   IF RTNCODE^=IOPGOOD             /* BAD BACKUP ON SCDS?   @Z67SP00*/
*     THEN                          /* SET UP FOR BAD RETRN  @Z67SP00*/
         LTR   RTNCODE,RTNCODE                                     0340
         BZ    @RF00340                                            0340
*     DO;                           /*                       @Z67SP00*/
*       SCPRET=RTNCODE;             /* BAD CODE FOR SCAN     @Z67SP00*/
         L     @14,SCPPTR                                          0342
         STC   RTNCODE,SCPRET(,@14)                                0342
*       RFY                                                        0343
*         RTNCODE UNRSTD;           /*                       @Z67SP00*/
*       RETURN;                     /* RETURN TO HMASMSCN    @Z67SP00*/
@EL00006 L     @13,4(,@13)                                         0344
@EF00006 DS    0H                                                  0344
@ER00006 LM    @14,@12,12(@13)                                     0344
         BR    @14                                                 0344
*     END;                          /* END BAD SCDS SAV      @Z67SP00*/
*   IF IOPLMDND(INDX1)=IOPEOLST     /* IF STOP AT END        @Z40SP63*/
*     THEN                          /*                       @Z40SP63*/
@RF00340 LA    @10,255                                             0346
         L     @08,INDX1                                           0346
         MH    @08,@CH00516                                        0346
         SLR   @15,@15                                             0346
         IC    @15,IOPLMDND-9(@08,IOPPTR)                          0346
         CR    @10,@15                                             0346
         BNE   @RF00346                                            0346
*     IOPLMDND(INDX1+1)=IOPEOLST;   /* SET NEW END           @Z40SP63*/
         STC   @10,IOPLMDND(@08,IOPPTR)                            0347
*   IOPLSYS(INDX1)=SYSLIBSV;        /* SAVE SYSLIB IN PROPER @Z40SP63*/
@RF00346 L     @10,INDX1                                           0348
         MH    @10,@CH00516                                        0348
         ST    @10,@TF00001                                        0348
         ALR   @10,IOPPTR                                          0348
         MVC   IOPLSYS-9(8,@10),SYSLIBSV                           0348
*   IOPLMIND(INDX1)=IOPLMSYS;       /* IOP PLACE             @Z40SP63*/
         LA    @10,1                                               0349
         L     @08,@TF00001                                        0349
         STC   @10,IOPLMIND-9(@08,IOPPTR)                          0349
*                                                                  0350
*   /*****************************************************************/
*   /*                                                               */
*   /* DO FOR ADD OF NEW LMOD ENTRY ONLY                     @Z67SP00*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0350
*   IF BUPTYPE=BUPADD THEN          /* IS THIS NEW LMOD ENTRY      0350
*                                                            @Z67SP00*/
         L     @10,@PC00001                                        0350
         CLI   BUPTYPE(@10),1                                      0350
         BNE   @RF00350                                            0350
*     DO;                           /* DO FOR NEW LMOD ENTRY @Z67SP00*/
*       BUFADSAV=IOPBUFAD;          /* SAVE IOPBUFAD         @Z67SP00*/
         L     @10,IOPBUFAD(,IOPPTR)                               0352
         ST    @10,BUFADSAV                                        0352
*       IOPBUFAD=ADDR(IOPLMDFX);    /* WRITE FROM FIXED AREA @Z67SP00*/
         LA    @10,IOPLMDFX(,IOPPTR)                               0353
         ST    @10,IOPBUFAD(,IOPPTR)                               0353
*       IOPFUNCT=IOPWRITE;          /* INDICATE WRITE OPERATION    0354
*                                                            @Z67SP00*/
*                                                                  0354
         MVI   IOPFUNCT(IOPPTR),X'51'                              0354
*       /*************************************************************/
*       /*                                                           */
*       /* WRITE NEW ENTRY AND CONTINUE AT STOW              @Z67SP00*/
*       /*                                                           */
*       /*************************************************************/
*                                                                  0355
*       CALL HMASMIO(HMASMIOP);     /* WRITE NEW LMOD ENTRY  @Z67SP00*/
         ST    IOPPTR,@AL00001                                     0355
         L     @15,@CV01338                                        0355
         LA    @01,@AL00001                                        0355
         BALR  @14,@15                                             0355
*       IF IOPRETRN^=IOPGOOD THEN   /* TEST FOR RC=0         @Z67SP00*/
         CLI   IOPRETRN(IOPPTR),0                                  0356
         BNE   @RT00356                                            0356
*         GOTO CDSRTNBD;            /* RC^=0 EXIT            @Z67SP00*/
*       ELSE                                                       0358
*         GOTO STOWLMOD;            /* GO STOW LMOD ENTRY    @Z67SP00*/
         B     STOWLMOD                                            0358
*     END;                          /* END OF NEW LMOD ENTRY @Z67SP00*/
*                                                                  0360
*   /*****************************************************************/
*   /*                                                               */
*   /* DO FOR UPDATE OF EXISTING LMOD ENTRY ONLY             @Z67SP00*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0360
*   IOPFUNCT=IOPPOSI;               /* SET UP FOR POINT OPERATION  0360
*                                                            @Z67SP00*/
*                                                                  0360
@RF00350 MVI   IOPFUNCT(IOPPTR),X'02'                              0360
*   /*****************************************************************/
*   /*                                                               */
*   /* POSITION FOR READ OPERATION                           @Z67SP00*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0361
*   CALL HMASMIO(HMASMIOP);         /* DO POINT OPERATION    @Z67SP00*/
         ST    IOPPTR,@AL00001                                     0361
         L     @15,@CV01338                                        0361
         LA    @01,@AL00001                                        0361
         BALR  @14,@15                                             0361
*   IF IOPRETRN^=IOPGOOD THEN       /* CHECK FOR RC=0        @Z67SP00*/
         CLI   IOPRETRN(IOPPTR),0                                  0362
         BNE   @RT00362                                            0362
*     GOTO CDSRTNBD;                /* RC^=0 EXIT            @Z67SP00*/
*   IOPFUNCT=IOPREAD;               /* SET UP TO RE-READ FIRST REC 0364
*                                                            @Z67SP00*/
*                                                                  0364
         MVI   IOPFUNCT(IOPPTR),X'01'                              0364
*   /*****************************************************************/
*   /*                                                               */
*   /* READ FIRST RECORD & IGNORE - UPDATE COPY AT IOPLMDFX  @Z67SP00*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0365
*   CALL HMASMIO(HMASMIOP);         /* RE-READ FIRST RECORD  @Z67SP00*/
         ST    IOPPTR,@AL00001                                     0365
         L     @15,@CV01338                                        0365
         LA    @01,@AL00001                                        0365
         BALR  @14,@15                                             0365
*   IF IOPRETRN^=IOPGOOD THEN       /* CHECK FOR RC=0        @Z67SP00*/
         CLI   IOPRETRN(IOPPTR),0                                  0366
         BNE   @RT00366                                            0366
*     GOTO CDSRTNBD;                /* RC^=0 EXIT            @Z67SP00*/
*   BUFADSAV=IOPBUFAD;              /* SAVE IOPBUFAD         @Z67SP00*/
         L     @10,IOPBUFAD(,IOPPTR)                               0368
         ST    @10,BUFADSAV                                        0368
*   IOPBUFAD=ADDR(IOPLMDFX);        /* SET TO LMOD FIXED PORTION   0369
*                                      WHERE THE UPDATED LMOD ENTRY
*                                      IS                    @Z67SP00*/
         LA    @10,IOPLMDFX(,IOPPTR)                               0369
         ST    @10,IOPBUFAD(,IOPPTR)                               0369
*   IOPFUNCT=IOPWRITE;              /* SET UP TO WRITE UPDATED REC 0370
*                                                            @Z67SP00*/
*                                                                  0370
         MVI   IOPFUNCT(IOPPTR),X'51'                              0370
*   /*****************************************************************/
*   /*                                                               */
*   /* WRITE THE UPDATED LMOD ENTRY TO THE CDS               @Z67SP00*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0371
*   CALL HMASMIO(HMASMIOP);         /* WRITE UPDATED RECORD BACK   0371
*                                                            @Z67SP00*/
         ST    IOPPTR,@AL00001                                     0371
         L     @15,@CV01338                                        0371
         LA    @01,@AL00001                                        0371
         BALR  @14,@15                                             0371
*   IF IOPRETRN^=IOPGOOD THEN       /* CHECK FOR RC=0        @Z67SP00*/
         CLI   IOPRETRN(IOPPTR),0                                  0372
         BNE   @RT00372                                            0372
*     GOTO CDSRTNBD;                /* RC^=0 EXIT            @Z67SP00*/
*                                                                  0374
*   /*****************************************************************/
*   /*                                                               */
*   /* READ ALL OF THE REMAINING RECORDS IN AND WRITE THEM   @Z67SP00*/
*   /* BACK OUT UNTIL AN END OF FILE IS REACHED FOR THIS     @Z67SP00*/
*   /* MEMBER. ON END OF FILE CONTINUE AT STOWLMOD.          @Z67SP00*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0374
*READ1:                                                            0374
*   IOPFUNCT=IOPREAD;               /* SET UP TO READ NEXT RECORD  0374
*                                                            @Z67SP00*/
*                                                                  0374
READ1    MVI   IOPFUNCT(IOPPTR),X'01'                              0374
*   /*****************************************************************/
*   /*                                                               */
*   /* READ RECORD                                           @Z67SP00*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0375
*   CALL HMASMIO(HMASMIOP);         /* READ NEXT RECORD TILL EOF   0375
*                                                            @Z67SP00*/
         ST    IOPPTR,@AL00001                                     0375
         L     @15,@CV01338                                        0375
         LA    @01,@AL00001                                        0375
         BALR  @14,@15                                             0375
*   IF IOPRETRN>IOPEOF THEN         /* CHECK FOR RC>4 (I/O ERR)    0376
*                                                            @Z67SP00*/
         CLI   IOPRETRN(IOPPTR),4                                  0376
         BH    @RT00376                                            0376
*     GOTO CDSRTNBD;                /* RC>4 EXIT             @Z67SP00*/
*   IF IOPRETRN=IOPEOF THEN         /* CHECK FOR END OF FILE @Z67SP00*/
         CLI   IOPRETRN(IOPPTR),4                                  0378
         BE    @RT00378                                            0378
*     GOTO STOWLMOD;                /* CONTINUE AT STOW LMOD @Z67SP00*/
*   IOPFUNCT=IOPWRITE;              /* SET UP TO WRITE RECORD BACK 0380
*                                                            @Z67SP00*/
*                                                                  0380
         MVI   IOPFUNCT(IOPPTR),X'51'                              0380
*   /*****************************************************************/
*   /*                                                               */
*   /* WRITE RECORD                                          @Z67SP00*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0381
*   CALL HMASMIO(HMASMIOP);         /* WRITE RECORD BACK TILL EOF  0381
*                                                            @Z67SP00*/
         ST    IOPPTR,@AL00001                                     0381
         L     @15,@CV01338                                        0381
         LA    @01,@AL00001                                        0381
         BALR  @14,@15                                             0381
*   IF IOPRETRN^=IOPGOOD THEN       /* CHECK FOR RC=0        @Z67SP00*/
         CLI   IOPRETRN(IOPPTR),0                                  0382
         BNE   @RT00382                                            0382
*     GOTO CDSRTNBD;                /* RC^=0 EXIT            @Z67SP00*/
*   ELSE                                                           0384
*     GOTO READ1;                   /* LOOP TILL END OF FILE @Z67SP00*/
         B     READ1                                               0384
*                                                                  0385
*   /*****************************************************************/
*   /*                                                               */
*   /* STOW THE LMOD ENTRY ON THE CDS                        @Z67SP00*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0385
*STOWLMOD:                                                         0385
*   IOPCOPY=ON;                     /* INDICATE IEBCOPY RUN          */
STOWLMOD OI    IOPCOPY(IOPPTR),B'10000000'                         0385
*   IOPFUNCT=IOPSTOWR;              /* INDICATE STOW OPERATION       */
         MVI   IOPFUNCT(IOPPTR),X'54'                              0386
*   IOPBUFAD=BUFADSAV;              /* RESET IOPBUFAD ADDRESS      0387
*                                                            @Z67SP00*/
         L     @10,BUFADSAV                                        0387
         ST    @10,IOPBUFAD(,IOPPTR)                               0387
*   CALL HMASMIO(HMASMIOP);         /* WRITE LOAD MOD ENTRY TO CDS   */
         ST    IOPPTR,@AL00001                                     0388
         L     @15,@CV01338                                        0388
         LA    @01,@AL00001                                        0388
         BALR  @14,@15                                             0388
*   IF IOPRETRN^=IOPGOOD            /* SUCCESSFUL STOW?      @YA07506*/
*     THEN                                                         0389
         CLI   IOPRETRN(IOPPTR),0                                  0389
         BNE   @RT00389                                            0389
*     GO TO CDSRTNBD;               /* NO - EXIT BADLY TO SCAN       */
*   RETURN;                         /* RETURN TO HMASMSCN    @Z67SP00*/
*                                                                  0391
         B     @EL00006                                            0391
*   /*****************************************************************/
*   /*                                                               */
*   /* BAD RETURN TO HMASMSCN ROUTINE                        @Z67SP00*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0392
*CDSRTNBD:                          /* BAD RETURN TO SCAN            */
*   IOPBUFAD=BUFADSAV;              /* RESET IOPBUFAD ADDRESS      0392
*                                                            @Z67SP00*/
CDSRTNBD L     @10,BUFADSAV                                        0392
         ST    @10,IOPBUFAD(,IOPPTR)                               0392
*   SCPRET=SCPSTOP;                 /* INDICATE ERROR        @YA07506*/
         L     @10,SCPPTR                                          0393
         MVI   SCPRET(@10),X'08'                                   0393
*   END CDSWRT10;                   /* RETURN TO SCAN                */
         B     @EL00006                                            0394
*                                                                  0395
*   /*****************************************************************/
*   /*                                                               */
*   /* PROCESSING OF THE DLIB ENTRIES STARTS HERE. LOCATE    @Z67SP00*/
*   /* THE DLIB ENTRY IN THE CDS. SET UP BUPTYPE, BASED ON   @Z67SP00*/
*   /* RC. IF THE ENTRY IS NOT BEING CHANGED, THEN BYPASS    @Z67SP00*/
*   /* SAVE SCDS, BUILD AND STOW OF DLIB ENTRY. FOR ADD OR   @Z67SP00*/
*   /* CHANGE, SAVE SCDS, BUILD THE ENTRY AND STOW THE DLIB  @Z67SP00*/
*   /* ENTRY ON THE CDS.                                     @Z67SP00*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0395
*DLIBSTR:                                                          0395
*   PROCEDURE OPTIONS(SAVEAREA);                                   0395
DLIBSTR  STM   @14,@12,12(@13)                                     0395
         ST    @13,@SA00007+4                                      0395
         LA    @14,@SA00007                                        0395
         ST    @14,8(,@13)                                         0395
         LR    @13,@14                                             0395
*   SELECTSW=OFF;                   /* TURN SELECT SWITCH OFF      0396
*                                                            @YA10138*/
         NI    SELECTSW,B'01111111'                                0396
*   IOPDSID=IOPCDSM;                /* INDICATE CDS                  */
         MVI   IOPDSID(IOPPTR),X'02'                               0397
*   IOPFUNCT=IOPLOC;                /* INDICATE LOCATE OPERATION     */
         MVI   IOPFUNCT(IOPPTR),X'03'                              0398
*   IOPNAME=DLIB8;                  /* PUT DIST LIB NAME IN  @Z40SP63*/
         MVC   IOPNAME(8,IOPPTR),DLIB8                             0399
*   IOPTYPE=IOPDLB;                 /* INDICATE DLIB TYPE    @Z40SP63*/
*                                                                  0400
         MVI   IOPTYPE(IOPPTR),X'06'                               0400
*   /*****************************************************************/
*   /*                                                               */
*   /* LOCATE DLIB ON CDS                                    @Z67SP00*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0401
*   CALL HMASMIO(HMASMIOP);         /* LOCATE DLIB MEMBER            */
         ST    IOPPTR,@AL00001                                     0401
         L     @15,@CV01338                                        0401
         LA    @01,@AL00001                                        0401
         BALR  @14,@15                                             0401
*   IF IOPRETRN>IOPNOTFD            /* I/O ERROR?            @YA07506*/
*     THEN                                                         0402
         CLI   IOPRETRN(IOPPTR),4                                  0402
         BNH   @RF00402                                            0402
*     RETURN CODE(IOPRETRN);        /* YES - EXIT            @YA07506*/
*                                                                  0403
         SLR   @15,@15                                             0403
         IC    @15,IOPRETRN(,IOPPTR)                               0403
         L     @13,4(,@13)                                         0403
         L     @14,12(,@13)                                        0403
         LM    @00,@12,20(@13)                                     0403
         BR    @14                                                 0403
*   /*****************************************************************/
*   /*                                                               */
*   /* SET UP BUPTYPE FOR CALL TO BUE IF DLIB                @Z67SP00*/
*   /* ENTRY WILL CHANGE AS A RESULT OF PROCESSING.          @Z67SP00*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0404
*   IF IOPRETRN=IOPGOOD THEN        /* DOES ENTRY EXIST?     @Z67SP00*/
@RF00402 CLI   IOPRETRN(IOPPTR),0                                  0404
         BNE   @RF00404                                            0404
*     BUPTYPE=BUPUPD;               /* ENTRY IS BEING UPDATED      0405
*                                                            @Z67SP00*/
         L     @10,@PC00001                                        0405
         MVI   BUPTYPE(@10),X'02'                                  0405
*   ELSE                                                           0406
*     DO;                           /* ENTRY IS BEING ADDED  @Z67SP00*/
         B     @RC00404                                            0406
@RF00404 DS    0H                                                  0407
*       BUPTYPE=BUPADD;             /* INDICATE NEW ENTRY    @Z67SP00*/
         L     @10,@PC00001                                        0407
         MVI   BUPTYPE(@10),X'01'                                  0407
*       IOPDLBNT=IOPDLBNT&&IOPDLBNT;/* INIT DLIB IN CASE NOT @Z40SP63*/
         XC    IOPDLBNT(104,IOPPTR),IOPDLBNT(IOPPTR)               0408
*       IOPNTLVL=IOPDLBLC;          /* NOT FOUND             @Z40SP63*/
         MVI   IOPNTLVL(IOPPTR),X'02'                              0409
*       IOPDLBND(1)=IOPEOLST;       /*                       @Z40SP63*/
         MVI   IOPDLBND(IOPPTR),X'FF'                              0410
*     END;                          /*                       @Z67SP00*/
*                                                                  0412
*   /*****************************************************************/
*   /*                                                               */
*   /* LOOK FOR A DLIB SUBENTRY EQUAL TO THE ONE BEING ADDED.        */
*   /*                                                       @Z67SP00*/
*   /* IF THERE WILL BE NO CHANGE AS A RESULT OF THE PROCESS @Z67SP00*/
*   /* THEN BYPASS THE SAVE SCDS, BUILD AND STOW.            @Z67SP00*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0412
*   I=0;                            /* NUM OF SYSLIB FOUND   @Z40SP63*/
@RC00404 SLR   @10,@10                                             0412
         ST    @10,I                                               0412
*   DO INDX1=1 BY 1                 /* LOOP THRU DLB SUB-ENT @Z40SP63*/
*         WHILE IOPDLBND(INDX1)^=IOPEOLST;/* TILL END        @Z40SP63*/
         LA    @10,1                                               0413
         ST    @10,INDX1                                           0413
         B     @DE00413                                            0413
@DL00413 DS    0H                                                  0414
*     IF IOPDLIND(INDX1)=IOPDLSYS   /* IF THIS IS SYLIB      @Z40SP63*/
*       THEN                        /*                       @Z40SP63*/
         L     @10,INDX1                                           0414
         MH    @10,@CH00516                                        0414
         SLR   @08,@08                                             0414
         IC    @08,IOPDLIND-9(@10,IOPPTR)                          0414
         C     @08,@CF00046                                        0414
         BNE   @RF00414                                            0414
*       DO;                         /*                       @Z40SP63*/
*         IF IOPDSYS(INDX1)=SYSLIBSV/* THIS SYSLIB ALREADY   @Z40SP63*/
*           THEN                    /* YES - IGNORE STOW             */
         ALR   @10,IOPPTR                                          0416
         CLC   IOPDSYS-9(8,@10),SYSLIBSV                           0416
         BNE   @RF00416                                            0416
*           RETURN CODE(IOPGOOD);   /* RETURN AND IGNORE STOW        */
         SLR   @15,@15                                             0417
         L     @13,4(,@13)                                         0417
         L     @14,12(,@13)                                        0417
         LM    @00,@12,20(@13)                                     0417
         BR    @14                                                 0417
*         I=I+1;                    /* INCR SYSLIB NUM       @Z40SP63*/
@RF00416 LA    @10,1                                               0418
         AL    @10,I                                               0418
         ST    @10,I                                               0418
*         IF I=IOPDSMAX             /* IF THIS IS MAXIMUM    @Z67SP00*/
*           THEN                    /* SYSLIB                @Z40SP63*/
         C     @10,@CF00056                                        0419
         BE    @RT00419                                            0419
*           GO TO UPDTSYSD;         /* GO OVERLAY IT         @Z40SP63*/
*       END;                                                       0421
*   END;                            /* END MOD IOP LOOP      @Z40SP63*/
@RF00414 LA    @10,1                                               0422
         AL    @10,INDX1                                           0422
         ST    @10,INDX1                                           0422
@DE00413 L     @10,INDX1                                           0422
         MH    @10,@CH00516                                        0422
         SLR   @08,@08                                             0422
         IC    @08,IOPDLBND-9(@10,IOPPTR)                          0422
         C     @08,@CF00704                                        0422
         BNE   @DL00413                                            0422
*                                                                  0423
*   /*****************************************************************/
*   /*                                                               */
*   /* AT THIS POINT IT HAS BEEN DETERMINED THAT THE DLIB    @Z67SP00*/
*   /* ENTRY WILL EITHER BE CHANGED OR ADDED. CALL HMASMBUE  @Z67SP00*/
*   /* TO CREATE THE BACKUP SCDS COPY, BUILD THE DLIB ENTRY  @Z67SP00*/
*   /* THEN CALL HMASMIO TO DO THE STOW.                     @Z67SP00*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0423
*UPDTSYSD:                          /*                       @Z40SP63*/
*                                                                  0423
*   /*****************************************************************/
*   /*                                                               */
*   /* CALL HMASMBUE TO CREATE SCDS ENTRY                    @Z67SP00*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0423
*   CALL HMASMBUE(BUPPARM);         /* CREATE BACKUP ENTRY   @Z67SP00*/
UPDTSYSD L     @10,@PC00001                                        0423
         ST    @10,@AL00001                                        0423
         L     @15,@CV01339                                        0423
         LA    @01,@AL00001                                        0423
         BALR  @14,@15                                             0423
*   RFY                                                            0424
*     RTNCODE RSTD;                 /*                       @Z67SP00*/
*   IF RTNCODE^=IOPGOOD             /* BAD BACKUP ON SCDS?   @Z67SP00*/
*     THEN                          /* SET UP FOR BAD RETRN  @Z67SP00*/
         LTR   RTNCODE,RTNCODE                                     0425
         BZ    @RF00425                                            0425
*     DO;                           /*                       @Z67SP00*/
*       SCPRET=RTNCODE;             /* BAD CODE FOR SCAN     @Z67SP00*/
         L     @14,SCPPTR                                          0427
         STC   RTNCODE,SCPRET(,@14)                                0427
*       RFY                                                        0428
*         RTNCODE UNRSTD;           /*                       @Z67SP00*/
*       RETURN CODE(SCPRET);        /* RETURN TO HMASMSCN    @Z67SP00*/
         L     @10,SCPPTR                                          0429
         SLR   @08,@08                                             0429
         IC    @08,SCPRET(,@10)                                    0429
         LR    @15,@08                                             0429
         L     @13,4(,@13)                                         0429
         L     @14,12(,@13)                                        0429
         LM    @00,@12,20(@13)                                     0429
         BR    @14                                                 0429
*     END;                          /* END BAD SCDS SAV      @Z67SP00*/
*   IF IOPDLBND(INDX1)=IOPEOLST     /* IF STOP AT END        @Z40SP63*/
*     THEN                          /*                       @Z40SP63*/
@RF00425 LA    @10,255                                             0431
         L     @08,INDX1                                           0431
         MH    @08,@CH00516                                        0431
         SLR   @15,@15                                             0431
         IC    @15,IOPDLBND-9(@08,IOPPTR)                          0431
         CR    @10,@15                                             0431
         BNE   @RF00431                                            0431
*     IOPDLBND(INDX1+1)=IOPEOLST;   /* SET NEW END           @Z40SP63*/
         STC   @10,IOPDLBND(@08,IOPPTR)                            0432
*   IOPDSYS(INDX1)=SYSLIBSV;        /* SAVE SYSLIB IN PROPER @Z40SP63*/
@RF00431 L     @10,INDX1                                           0433
         MH    @10,@CH00516                                        0433
         ST    @10,@TF00001                                        0433
         ALR   @10,IOPPTR                                          0433
         MVC   IOPDSYS-9(8,@10),SYSLIBSV                           0433
*   IOPDLIND(INDX1)=IOPDLSYS;       /* IOP PLACE             @Z40SP63*/
*                                                                  0434
         LA    @10,1                                               0434
         L     @08,@TF00001                                        0434
         STC   @10,IOPDLIND-9(@08,IOPPTR)                          0434
*   /*****************************************************************/
*   /*                                                               */
*   /* STOW THE DLIB ENTRY                                   @Z67SP00*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0435
*   IOPFUNCT=IOPSTOWR;              /* INDICATE STOW OPERATION       */
         MVI   IOPFUNCT(IOPPTR),X'54'                              0435
*   CALL HMASMIO(HMASMIOP);         /* STOW UPDATED DLIB MEMBER      */
         ST    IOPPTR,@AL00001                                     0436
         L     @15,@CV01338                                        0436
         LA    @01,@AL00001                                        0436
         BALR  @14,@15                                             0436
*   RETURN CODE(IOPRETRN);          /* RETURN WITH IO CODE   @YA07506*/
         SLR   @15,@15                                             0437
         IC    @15,IOPRETRN(,IOPPTR)                               0437
         L     @13,4(,@13)                                         0437
         L     @14,12(,@13)                                        0437
         LM    @00,@12,20(@13)                                     0437
         BR    @14                                                 0437
*   END DLIBSTR;                                                   0438
*                                                                  0439
*   /*****************************************************************/
*   /*                                                               */
*   /* ROUTINE TO PRINT LINE IN ERROR DETECTED IN JCLIN SCAN. TWO    */
*   /* POINTERS ARE RECEIVED. ONE POINTS TO THE LINE IN ERROR RECORD,*/
*   /* THE OTHER POINTS TO AN ACTION FIELD DESCRIBING THE ACTION     */
*   /* TAKEN.                                                @SA72421*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0439
*HMACPYR:                                                          0439
*   PROC(JCLPTRS);                  /* ERROR PRINT ROUTINE   @SA72421*/
HMACPYR  STM   @14,@12,@SA00008                                    0439
         MVC   @PC00008(4),0(@01)                                  0439
*   DCL                                                            0440
*     1 JCLPTRS,                    /* POINTERS RECEIVED     @SA72421*/
*       3 LINEPTR PTR(31),          /* POINTER TO LINE IN ERROR    0440
*                                                            @SA72421*/
*       3 ACTPTR PTR(31);           /* POINTER TO ACTION TAKEN     0440
*                                                            @SA72421*/
*   DCL                                                            0441
*     LINE CHAR(80) BASED(LINEPTR); /* LINE IN ERROR         @SA72421*/
*   DCL                                                            0442
*     ACTION CHAR(25) BASED(ACTPTR);/* ACTION INFO           @SA72421*/
*   DCL                                                            0443
*     1 JCLINOUT,                   /* CORE AREA EQUATING TO HMASMPRL
*                                                            @SA72421*/
*       3 * CHAR(LENGTH(HMASMPRL)), /* PRL PREFIX            @YA07506*/
*       3 PRNTMAP CHAR(120),        /* PRINT LINE MAP        @SA72421*/
*         5 * CHAR(10) INIT('----------'),/* PREFIX          @SA72421*/
*         5 JCLINDAT CHAR(80),      /* LINE IN ERROR         @SA72421*/
*         5 * CHAR(5) INIT(' '),    /* SPACING               @SA72421*/
*         5 JCLINACT CHAR(25);      /* ACTION INFO           @SA72421*/
*   BUFADSAV=IOPBUFAD;              /* SAVE IOPBUFAD ADDRESS @Z67SP00*/
         L     @10,IOPBUFAD(,IOPPTR)                               0444
         ST    @10,BUFADSAV                                        0444
*   IOPBUFAD=ADDR(JCLINOUT);        /* EQUATE PRL TO JCLINOUT MAP  0445
*                                                            @SA72421*/
         LA    @10,JCLINOUT                                        0445
         ST    @10,IOPBUFAD(,IOPPTR)                               0445
*   JCLINDAT=LINE;                  /* FILL IN LINE IN ERROR @SA72421*/
         L     @08,@PC00008                                        0446
         L     @01,LINEPTR(,@08)                                   0446
         MVC   JCLINDAT(80),LINE(@01)                              0446
*   JCLINACT=ACTION;                /* FILL IN ACTION INFO   @SA72421*/
         L     @08,ACTPTR(,@08)                                    0447
         MVC   JCLINACT(25),ACTION(@08)                            0447
*   PRLRLEN=LENGTH(PRNTMAP);        /* FILL IN LNGTH OF PRNT DATA  0448
*                                                            @SA72421*/
         MVC   PRLRLEN(2,@10),@CH01438                             0448
*   PRLFLGS=ZERO;                   /* RESET FLAGS           @YA07506*/
         MVI   PRLFLGS(@10),X'00'                                  0449
*   IOPDSID=IOPPRINT;               /* SET PRINT INDICATOR   @SA72421*/
         MVI   IOPDSID(IOPPTR),X'0B'                               0450
*   IOPFUNCT=IOPWRITE;              /* INDICATE WRITE OP     @SA72421*/
         MVI   IOPFUNCT(IOPPTR),X'51'                              0451
*   CALL HMASMIO(HMASMIOP);         /* WRITE LINE IN ERROR   @SA72421*/
         ST    IOPPTR,@AL00001                                     0452
         L     @15,@CV01338                                        0452
         LA    @01,@AL00001                                        0452
         BALR  @14,@15                                             0452
*   IOPBUFAD=BUFADSAV;              /* RESET IOPBUFAD ADDRESS      0453
*                                                            @Z67SP00*/
         L     @10,BUFADSAV                                        0453
         ST    @10,IOPBUFAD(,IOPPTR)                               0453
*   END HMACPYR;                    /* RETURN                @SA72421*/
@EL00008 DS    0H                                                  0454
@EF00008 DS    0H                                                  0454
@ER00008 LM    @14,@12,@SA00008                                    0454
         BR    @14                                                 0454
*                                                                  0455
*/********************************************************************/
*/*                                                                  */
*/*                  SCAN CONTROL TABLES                             */
*/*                                                                  */
*/********************************************************************/
*                                                                  0455
*   GENERATE DATA;                                                 0455
*   END HMASMCPY                                                   0456
*                                                                  0456
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (HMASMCRP)                                       */
*/*%INCLUDE SYSLIB  (HMASMCCA)                                       */
*/*%INCLUDE SYSLIB  (HMASMIOP)                                       */
*/*%INCLUDE SYSLIB  (HMASMSCP)                                       */
*/*%INCLUDE SYSLIB  (HMASMPRL)                                       */
*                                                                  0456
*       ;                                                          0456
@EL00001 L     @13,4(,@13)                                         0456
@EF00001 DS    0H                                                  0456
@ER00001 LM    @14,@12,12(@13)                                     0456
         BR    @14                                                 0456
@DATA    DS    0H
@CH00516 DC    H'9'
@CH00117 DC    H'71'
@CH01438 DC    H'120'
@SM01447 MVC   SYSLIBSV(0),SCPSTRNG(@10)
@SM01451 MVC   DLIB8(0),SCPSTRNG(@10)
@SM01454 MVC   IOPNAME(0,IOPPTR),SCPSTRNG(@10)
@SM01456 MVC   LOADMDSV(0),SCPSTRNG(@10)
         DS    0F
@AL00191 EQU   *                       LIST WITH   1 ARGUMENT(S)
@AL00201 DC    A(JPTR)                 LIST WITH   1 ARGUMENT(S)
         DS    0F
@SA00001 DS    18F
@PC00001 DS    4F
@SA00007 DS    18F
@SA00002 DS    18F
@SA00003 DS    15F
@SA00006 DS    18F
@SA00008 DS    0F
@PC00008 EQU   @SA00008+60
         DS    16F
@AL00001 DS    1A
@TF00001 DS    F
         DS    0F
@CF00046 DC    F'1'
@CF00056 DC    F'2'
@CF00048 DC    F'7'
@CF00704 DC    F'255'
@CV01337 DC    V(HMASMSCN)
@CV01338 DC    V(HMASMIO)
@CV01339 DC    V(HMASMBUE)
@CV01340 DC    V(HMASMCRD)
         DS    0D
SCPPTR   DS    A
I        DS    F
INDX1    DS    F
BUFADSAV DS    A
@CC01353 DC    C'/*'
@CC01355 DC    C'//'
@CC01357 DC    C'++'
INVALCPY DC    CL25'INVALID IEBCOPY STATEMENT'
LASTLINE DC    CL25'*****-LAST LINE PROCESSED'
CPYSCP   DS    CL26
SYSLIBSV DS    CL8
DLIB8    DS    CL8
LOADMDSV DS    CL8
SWITCHES DS    BL1
         ORG   SWITCHES
SELECTSW DS    BL1
OUTDDSW  EQU   SWITCHES+0
INDDSW   EQU   SWITCHES+0
EXCERR   EQU   SWITCHES+0
EOFSW    EQU   SWITCHES+0
@NM00179 EQU   SWITCHES+0
         ORG   SWITCHES+1
         DS    CL1
JPTR     DS    CL8
         ORG   JPTR
LPTR     DS    AL4
APTR     DS    AL4
         ORG   JPTR+8
PATCHCPY DS    CL80
         ORG   PATCHCPY
@NM00180 DC    80X'FF'
         ORG   PATCHCPY+80
JCLINOUT DS    CL130
         ORG   JCLINOUT
@NM00181 DS    CL10
PRNTMAP  DS    CL120
         ORG   PRNTMAP
@NM00182 DC    CL10'----------'
JCLINDAT DS    CL80
@NM00183 DC    CL5' '
JCLINACT DS    CL25
         ORG   JCLINOUT+130
HMASMCPY CSECT
COPYK    DSCAN KEY='COPY',ALT=CK,SUCC=OUTDDK
CK       DSCAN KEY='C',ALT=SELK,SUCC=OUTDDK
OUTDDK   DSCAN KEY='OUTDD=',SUCC=DDN1P,ALT=OK
OK       DSCAN KEY='O=',SUCC=DDN1P,ALT=INDD
DDN1P    DSCAN SUCC=COMMA1,ROUT=SYSLR010
COMMA1   DSCAN KEY=',',SUCC=INDDK
INDDK    DSCAN KEY='INDD=',SUCC=LPAREN1,ALT=IK
IK       DSCAN KEY='I=',SUCC=LPAREN1
LPAREN1  DSCAN KEY='(',ALT=DDN2P,SUCC=LPAREN1
DDN2P    DSCAN ROUT=DLIBR010
INDD     DSCAN KEY='INDD=',ALT=INDDS,SUCC=LPAREN1A
INDDS    DSCAN KEY='I=',SUCC=LPAREN1A
LPAREN1A DSCAN KEY='(',ALT=DDN2P1,SUCC=LPAREN1A
DDN2P1   DSCAN ROUT=DLIBR010,SUCC=RPAREN
RPAREN   DSCAN KEY=')',ALT=RSCAN,SUCC=RPAREN
RSCAN    DSCAN KEY=',R',ALT=COMMA1A,SUCC=RPAREN
COMMA1A  DSCAN KEY=',',SUCC=OUTDDK1
OUTDDK1  DSCAN KEY='OUTDD=',ALT=OK1,SUCC=DDN1P1
OK1      DSCAN KEY='O=',SUCC=DDN1P1
DDN1P1   DSCAN ROUT=SYSLR010
SELK     DSCAN KEY='SELECT',ALT=SK,SUCC=MEMK
SK       DSCAN KEY='S',SUCC=MEMK,ALT=EXCLK
EXCLK    DSCAN
MEMK     DSCAN KEY='MEMBER=',ALT=MK,SUCC=LPAREN2
MK       DSCAN KEY='M=',SUCC=LPAREN2
LPAREN2  DSCAN KEY='(',SUCC=LPAREN3,ALT=NOPAREN              @YA06343
LPAREN3  DSCAN KEY='(',SUCC=M1P,ALT=M3P
M1P      DSCAN SUCC=COMMA2,ROUT=MEMNM010
COMMA2   DSCAN KEY=',',SUCC=COMMA3,ALT=RPAREN1
COMMA3   DSCAN KEY=',',SUCC=RK,ALT=M2P
RK       DSCAN KEY='R',SUCC=RPAREN1
RPAREN1  DSCAN KEY=')',SUCC=RPAREN2
RPAREN2  DSCAN KEY=')',ALT=COMMA4,ROUT=CDSWRT10
M2P      DSCAN SUCC=COMMA6,ROUT=MEMNM020
M3P      DSCAN SUCC=COMMA5,ROUT=MEMNM010
COMMA4   DSCAN KEY=',',SUCC=LPAREN3,ROUT=CDSWRT10
COMMA5   DSCAN KEY=',',SUCC=LPAREN3,ALT=RPAREN2,ROUT=CDSWRT10
COMMA6   DSCAN KEY=',',SUCC=RK,ALT=RPAREN1
NOPAREN  DSCAN SUCC=COMMA7,ROUT=MEMNM010                     @YA06343
COMMA7   DSCAN KEY=',',SUCC=NOPAREN,ROUT=CDSWRT10,ALT=BLANK,           X
               BLANKS=ON                                     @YA06343
BLANK    DSCAN KEY=' ',ROUT=CDSWRT10,BLANKS=ON               @YA06343
HMASMCPY CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
CCAPTR   EQU   @11
IOPPTR   EQU   @09
RTNCODE  EQU   @15
RTNREG   EQU   @14
HMASMCCA EQU   0
CCAFBUFR EQU   HMASMCCA+4
CCADSAD  EQU   CCAFBUFR+124
CCATPAD  EQU   CCAFBUFR+128
CCAFLAG7 EQU   CCAFBUFR+132
CCAFIOP  EQU   HMASMCCA+140
CCAIOPTR EQU   CCAFIOP
CCAFSYS  EQU   HMASMCCA+148
CCASREL  EQU   CCAFSYS+12
CCAFLAGA EQU   CCAFSYS+21
CCAFSTA  EQU   HMASMCCA+188
CCAFICT  EQU   HMASMCCA+192
CCAFPGM  EQU   HMASMCCA+208
CCABLDLP EQU   CCAFPGM
CCADBLDL EQU   CCAFPGM+4
CCAFGTP  EQU   HMASMCCA+224
CCASEGTP EQU   CCAFGTP
@NM00014 EQU   HMASMCCA+244
CCAFFUNC EQU   HMASMCCA+264
CCAFLAG1 EQU   CCAFFUNC+8
CCAFLAG2 EQU   CCAFFUNC+11
CCAFPROC EQU   HMASMCCA+276
CCAFLAG3 EQU   CCAFPROC
CCAFDIS  EQU   HMASMCCA+278
CCAFLAG4 EQU   CCAFDIS
CCAFLAG5 EQU   CCAFDIS+1
CCAFLAG6 EQU   CCAFDIS+2
CCAFCNV  EQU   HMASMCCA+281
CCAFLAG8 EQU   CCAFCNV
CCAFCTL  EQU   HMASMCCA+282
CCAFLAG9 EQU   CCAFCTL
CCAFDSNG EQU   HMASMCCA+298
CCAFLAGB EQU   CCAFDSNG
CCABLDLA EQU   0
@NM00030 EQU   CCABLDLA
CCABLDLL EQU   0
@NM00032 EQU   CCABLDLL
CCALKDRC EQU   @NM00032+20
@NM00034 EQU   CCABLDLL+124
CCAASMRC EQU   @NM00034+20
@NM00036 EQU   CCABLDLL+248
CCACPYRC EQU   @NM00036+20
@NM00038 EQU   CCABLDLL+372
CCACOMRC EQU   @NM00038+20
@NM00040 EQU   CCABLDLL+496
CCAZAPRC EQU   @NM00040+20
@NM00042 EQU   CCABLDLL+620
CCASUPRC EQU   @NM00042+20
@NM00044 EQU   CCABLDLL+744
CCAUPDRC EQU   @NM00044+20
CCABLDLM EQU   0
CCABELMT EQU   CCABLDLM+4
CCABMPOS EQU   CCABELMT
HMASMIOP EQU   0
IOPDSID  EQU   HMASMIOP
IOPFUNCT EQU   HMASMIOP+1
IOPRETRN EQU   HMASMIOP+2
IOPTYPE  EQU   HMASMIOP+3
IOPNAME  EQU   HMASMIOP+4
@NM00048 EQU   HMASMIOP+12
@NM00049 EQU   @NM00048
IOPDDNAM EQU   HMASMIOP+24
IOPBUFAD EQU   HMASMIOP+52
IOPDRMAP EQU   HMASMIOP+56
IOPINAME EQU   IOPDRMAP
IOPINAM  EQU   IOPINAME
IOPITYP  EQU   IOPINAM
IOPUSERL EQU   IOPDRMAP+11
IOPEND   EQU   IOPDRMAP+12
IOPLMCTL EQU   0
IOPQSMIF EQU   0
@NM00159 EQU   IOPQSMIF
IOPQSMLS EQU   IOPQSMIF+8
IOPQSMNM EQU   IOPQSMLS
IOPBS02  EQU   0
IOPBS04  EQU   0
IOPBAPF  EQU   IOPBS04
HMASMSCP EQU   0
SCPCHAR  EQU   HMASMSCP
SCPSRCH  EQU   HMASMSCP+4
SCPIORTN EQU   HMASMSCP+12
SCPIOPAD EQU   HMASMSCP+16
SCPINLN  EQU   HMASMSCP+20
SCPPMLN  EQU   HMASMSCP+22
SCPEOR   EQU   HMASMSCP+24
SCPRETRN EQU   HMASMSCP+25
SCPRET   EQU   SCPRETRN
SCPSTRNG EQU   0
HMASMPRL EQU   0
PRLRLEN  EQU   HMASMPRL
PRLSPAN  EQU   HMASMPRL+2
PRLFLGS  EQU   PRLSPAN
PRLDATE  EQU   HMASMPRL+4
PRLTIME  EQU   HMASMPRL+7
PRLEND   EQU   HMASMPRL+10
LINE     EQU   0
ACTION   EQU   0
CCADSIDA EQU   0
CCATYPEA EQU   0
IOPBS01  EQU   0
IOPBS03  EQU   0
SCPIOPRM EQU   0
BUPPARM  EQU   0
BUPFUNCT EQU   BUPPARM
BUPTYPE  EQU   BUPPARM+1
BUPFLAGS EQU   BUPPARM+3
BUPIOPAD EQU   BUPPARM+12
HMASMCRP EQU   0
CRPSCPAD EQU   HMASMCRP+4
CRPINDS  EQU   HMASMCRP+8
CRPRETRN EQU   HMASMCRP+10
CRPFLG1  EQU   HMASMCRP+14
CRPFLG2  EQU   HMASMCRP+16
CRPINSW0 EQU   CRPFLG2
CRPINSW1 EQU   CRPFLG2
CRPINSW2 EQU   CRPFLG2
CRPINSW3 EQU   CRPFLG2
CRPBUFFR EQU   HMASMCRP+18
CRPBFCTL EQU   CRPBUFFR
BUFFER   EQU   0
BFFRCNT  EQU   0
JCLPTRS  EQU   0
LINEPTR  EQU   JCLPTRS
ACTPTR   EQU   JCLPTRS+4
IOPUDATA EQU   IOPEND
IOPINAM3 EQU   IOPINAME
@NM00055 EQU   IOPINAM3
IOPSTCMP EQU   IOPUDATA
IOPDYNDT EQU   IOPUDATA
IOPSPACE EQU   IOPDYNDT+44
IOPDTYPE EQU   IOPDYNDT+50
IOPNTMAX EQU   IOPDRMAP
IOPNTMAP EQU   IOPDRMAP
IOPCDMAP EQU   IOPNTMAP
IOPPTMAP EQU   IOPCDMAP
IOPSCMAP EQU   IOPPTMAP
IOPDIRCT EQU   IOPSCMAP+12
IOPCDMAX EQU   IOPDIRCT
IOPCQMAP EQU   IOPDRMAP
@NM00066 EQU   IOPUDATA
@NM00067 EQU   IOPUDATA
IOPASMNT EQU   IOPUDATA
IOPASMDR EQU   IOPASMNT
IOPNTLVL EQU   IOPASMDR
IOPABUNT EQU   IOPASMDR+1
IOPLMDNT EQU   IOPUDATA
IOPLMDDR EQU   IOPLMDNT
IOPLMLEP EQU   IOPLMDDR+1
IOPLMDF1 EQU   IOPLMLEP
IOPFLGS2 EQU   IOPLMDF1
IOPLMDF2 EQU   IOPLMLEP+1
IOPLMDF3 EQU   IOPLMLEP+2
IOPLMDF4 EQU   IOPLMLEP+3
IOPLMDF5 EQU   IOPLMDDR+5
IOPFLGS3 EQU   IOPLMDF5
IOPCOPY  EQU   IOPFLGS3
IOPLMDFX EQU   IOPLMDNT+24
@NM00076 EQU   IOPLMDFX
IOPLNTRY EQU   IOPLMDFX+8
IOPLSYS  EQU   IOPLNTRY
IOPSYSLB EQU   IOPLSYS
IOPLMDND EQU   IOPSYSLB
IOPLMIND EQU   IOPLNTRY+8
IOPMACNT EQU   IOPUDATA
IOPMACDR EQU   IOPMACNT
IOPRMIDE EQU   IOPMACDR+1
IOPRMID  EQU   IOPRMIDE
IOPRMST  EQU   IOPRMIDE+7
IOPFMIDE EQU   IOPMACDR+9
IOPFMID  EQU   IOPFMIDE
IOPMACFX EQU   IOPMACNT+24
IOPBUNT  EQU   IOPMACFX
IOPMCEND EQU   IOPMACNT+104
IOPMACVR EQU   IOPMCEND
IOPMCENT EQU   IOPMACVR
IOPMCDTA EQU   IOPMCENT
IOPMCASM EQU   IOPMCDTA
IOPMACID EQU   IOPMCASM
IOPMACST EQU   IOPMCASM+7
IOPMCIND EQU   IOPMCENT+8
IOPEOFNT EQU   IOPUDATA
IOPSRCNT EQU   IOPUDATA
IOPSRCDR EQU   IOPSRCNT
@NM00087 EQU   IOPSRCDR+1
@NM00089 EQU   @NM00087+7
@NM00093 EQU   IOPSRCDR+9
IOPSRCFX EQU   IOPSRCNT+24
@NM00097 EQU   IOPSRCFX
IOPSREND EQU   IOPSRCNT+104
IOPSRCVR EQU   IOPSREND
IOPSNTRY EQU   IOPSRCVR
IOPSRDTA EQU   IOPSNTRY
IOPSRCID EQU   IOPSRDTA
IOPSRCST EQU   IOPSRDTA+7
IOPMODNT EQU   IOPUDATA
IOPMODDR EQU   IOPMODNT
@NM00103 EQU   IOPMODDR+1
@NM00105 EQU   @NM00103+7
@NM00109 EQU   IOPMODDR+9
IOPMODFX EQU   IOPMODNT+24
@NM00113 EQU   IOPMODFX
IOPMDLEP EQU   IOPMODFX+8
IOPMODF1 EQU   IOPMDLEP
IOPMODF2 EQU   IOPMDLEP+1
IOPMODF3 EQU   IOPMDLEP+2
IOPMODF4 EQU   IOPMDLEP+3
IOPDLIB  EQU   IOPMODFX+72
IOPMDEND EQU   IOPMODNT+104
IOPMODVR EQU   IOPMDEND
IOPMNTRY EQU   IOPMODVR
IOPMDDTA EQU   IOPMNTRY
IOPLMODS EQU   IOPMDDTA
IOPMODID EQU   IOPLMODS
IOPMODND EQU   IOPMODID
IOPMODST EQU   IOPLMODS+7
IOPMDIND EQU   IOPMNTRY+8
IOPDLBNT EQU   IOPUDATA
IOPDLBDR EQU   IOPDLBNT
IOPDLBFX EQU   IOPDLBNT+24
@NM00124 EQU   IOPDLBFX
IOPDLEND EQU   IOPDLBNT+104
IOPDLBVR EQU   IOPDLEND
IOPDNTRY EQU   IOPDLBVR
IOPDSYS  EQU   IOPDNTRY
IOPDLBND EQU   IOPDSYS
IOPDLIND EQU   IOPDNTRY+8
IOPSYSNT EQU   IOPUDATA
IOPSYSDR EQU   IOPSYSNT
IOPSYSF1 EQU   IOPSYSDR+4
IOPFLGS7 EQU   IOPSYSF1
IOPSYSFX EQU   IOPSYSNT+24
@NM00131 EQU   IOPSYSFX
IOPSYEND EQU   IOPSYSNT+184
IOPSYSVR EQU   IOPSYEND
IOPSYSTR EQU   IOPSYSVR
IOPSYNTR EQU   IOPSYSTR
IOPPTFNT EQU   IOPUDATA
IOPPTFDR EQU   IOPPTFNT
IOPPSTAT EQU   IOPPTFDR+2
IOPPTFF1 EQU   IOPPSTAT
IOPFLGS5 EQU   IOPPTFF1
IOPPTFF2 EQU   IOPPSTAT+1
IOPPTFF3 EQU   IOPPSTAT+3
IOPPTFFX EQU   IOPPTFNT+24
@NM00140 EQU   IOPPTFFX
@NM00141 EQU   @NM00140
IOPPDTES EQU   IOPPTFFX+41
@NM00144 EQU   IOPPDTES
IOPPTPFX EQU   IOPPDTES+6
IOPDATES EQU   IOPPTPFX
IOPPTEND EQU   IOPPTFNT+104
IOPPTFVR EQU   IOPPTEND
IOPPNTRY EQU   IOPPTFVR
IOPPMODS EQU   IOPPNTRY
IOPENTNT EQU   IOPUDATA+104
IOPSRLNT EQU   IOPUDATA+104
IOPPRENT EQU   IOPUDATA+104
IOPNPRNT EQU   IOPUDATA+104
IOPSUPNT EQU   IOPUDATA+104
IOPREQNT EQU   IOPUDATA+104
IOPIRQNT EQU   IOPUDATA+104
IOPFIDNT EQU   IOPUDATA+104
IOPDELNT EQU   IOPUDATA+104
IOPVERNT EQU   IOPUDATA+104
IOPSBYNT EQU   IOPUDATA+104
IOPQSMNT EQU   IOPUDATA
IOPQSMDR EQU   IOPQSMNT
IOPQFMNT EQU   IOPUDATA
IOPQFMDR EQU   IOPQFMNT
IOPQFEND EQU   IOPQFMNT+2
IOPQFMVR EQU   IOPQFEND
IOPQFMLS EQU   IOPQFMVR
IOPQFMNM EQU   IOPQFMLS
IOPPTSYS EQU   IOPUDATA
IOPPTSDR EQU   IOPPTSYS
IOPPTSFX EQU   IOPPTSYS+24
IOPDSSPC EQU   IOPPTSFX
IOPPTFG1 EQU   IOPPTSFX+34
IOPPSEND EQU   IOPPTSYS+1064
IOPPTSVR EQU   IOPPSEND
IOPPTNTR EQU   IOPPTSVR
@NM00169 EQU   IOPPTNTR
IOPPTFMD EQU   @NM00169
IOPPTREL EQU   IOPPTFMD
IOPBPDS  EQU   IOPUDATA
IOPBLEP1 EQU   IOPBPDS+8
IOPBLEP2 EQU   IOPBPDS+9
@NM00173 EQU   IOPBPDS+18
IOPBFTB0 EQU   @NM00173
IOPBFTB1 EQU   IOPBFTB0
PRLDATA  EQU   PRLEND
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
IOPBCEND EQU   IOPBPDS+21
IOPBFTB3 EQU   IOPBFTB0+2
IOPBFTB2 EQU   IOPBFTB0+1
@NM00175 EQU   IOPBFTB1
IOPBAPFP EQU   IOPBFTB1
IOPBSSI  EQU   IOPBFTB1
IOPBPAGA EQU   IOPBFTB1
@NM00174 EQU   IOPBFTB1
IOPBAOSL EQU   IOPBFTB1
IOPBSEPA EQU   IOPBPDS+15
IOPBFTBL EQU   IOPBPDS+13
IOPBSTOR EQU   IOPBPDS+10
IOPBREFR EQU   IOPBLEP2
IOPBLEF  EQU   IOPBLEP2
IOPBTEST EQU   IOPBLEP2
IOPBNE   EQU   IOPBLEP2
@NM00172 EQU   IOPBLEP2
IOPBDC   EQU   IOPBLEP2
@NM00171 EQU   IOPBLEP1
IOPBSCTR EQU   IOPBLEP1
IOPBOL   EQU   IOPBLEP1
@NM00170 EQU   IOPBLEP1
IOPBOVLY EQU   IOPBLEP1
IOPBREUS EQU   IOPBLEP1
IOPBRENT EQU   IOPBLEP1
IOPBNL   EQU   IOPBPDS+7
IOPBTTRN EQU   IOPBPDS+4
IOPBZERO EQU   IOPBPDS+3
IOPBTTRT EQU   IOPBPDS
IOPPTIND EQU   IOPPTNTR+8
IOPPTSND EQU   IOPPTREL
@NM00168 EQU   IOPPTSFX+872
IOPSYZPP EQU   IOPPTSFX+772
IOPSYZPR EQU   IOPPTSFX+771
IOPSYZPS EQU   IOPPTSFX+763
IOPSYZAP EQU   IOPPTSFX+755
IOPSYUPP EQU   IOPPTSFX+655
IOPSYUPR EQU   IOPPTSFX+654
IOPSYUPS EQU   IOPPTSFX+646
IOPSYUPD EQU   IOPPTSFX+638
IOPSYSPP EQU   IOPPTSFX+538
IOPSYSPR EQU   IOPPTSFX+537
IOPSYSPS EQU   IOPPTSFX+529
IOPSYSUP EQU   IOPPTSFX+521
IOPSYLKP EQU   IOPPTSFX+421
IOPSYLKR EQU   IOPPTSFX+420
IOPSYLKS EQU   IOPPTSFX+412
IOPSYLKD EQU   IOPPTSFX+404
IOPSYCPP EQU   IOPPTSFX+304
IOPSYCPR EQU   IOPPTSFX+303
IOPSYCPS EQU   IOPPTSFX+295
IOPSYCPY EQU   IOPPTSFX+287
IOPSYCOP EQU   IOPPTSFX+187
IOPSYCOR EQU   IOPPTSFX+186
IOPSYCOS EQU   IOPPTSFX+178
IOPSYCOM EQU   IOPPTSFX+170
IOPSYASP EQU   IOPPTSFX+70
IOPSYASR EQU   IOPPTSFX+69
IOPSYASS EQU   IOPPTSFX+61
IOPSYASM EQU   IOPPTSFX+53
@NM00167 EQU   IOPPTSFX+35
@NM00166 EQU   IOPPTFG1
IOPPTSNJ EQU   IOPPTFG1
IOPPTSNP EQU   IOPPTFG1
IOPSYPLN EQU   IOPPTSFX+32
IOPDSPFX EQU   IOPPTSFX+6
IOPDSDIR EQU   IOPDSSPC+4
IOPDSSEC EQU   IOPDSSPC+2
IOPDSPRM EQU   IOPDSSPC
@NM00165 EQU   IOPPTSDR+4
IOPPTPEM EQU   IOPPTSDR+2
IOPPCNVL EQU   IOPPTSDR+1
@NM00164 EQU   IOPPTSDR
IOPQFMTP EQU   IOPQFMLS+8
@NM00163 EQU   IOPQFMLS+7
IOPQFMND EQU   IOPQFMNM
@NM00162 EQU   IOPQFMDR
@NM00158 EQU   IOPQSMDR
@NM00157 EQU   IOPSBYNT+8
IOPSBYST EQU   IOPSBYNT+7
IOPSBYNM EQU   IOPSBYNT
@NM00156 EQU   IOPVERNT+8
IOPVERST EQU   IOPVERNT+7
IOPVERNM EQU   IOPVERNT
@NM00155 EQU   IOPDELNT+8
IOPDELST EQU   IOPDELNT+7
IOPDELNM EQU   IOPDELNT
@NM00154 EQU   IOPFIDNT+8
IOPFIDST EQU   IOPFIDNT+7
IOPFIDNM EQU   IOPFIDNT
@NM00153 EQU   IOPIRQNT+8
IOPIRQST EQU   IOPIRQNT+7
IOPIRQNM EQU   IOPIRQNT
@NM00152 EQU   IOPREQNT+8
IOPREQST EQU   IOPREQNT+7
IOPREQNM EQU   IOPREQNT
@NM00151 EQU   IOPSUPNT+8
IOPSUPST EQU   IOPSUPNT+7
IOPSUPNM EQU   IOPSUPNT
@NM00150 EQU   IOPNPRNT+8
IOPNPRST EQU   IOPNPRNT+7
IOPNPRNM EQU   IOPNPRNT
@NM00149 EQU   IOPPRENT+8
IOPPREST EQU   IOPPRENT+7
IOPPRENM EQU   IOPPRENT
@NM00148 EQU   IOPSRLNT+8
IOPSRLST EQU   IOPSRLNT+7
@NM00147 EQU   IOPSRLNT+4
IOPSRLNM EQU   IOPSRLNT
@NM00146 EQU   IOPENTNT+8
IOPENTST EQU   IOPENTNT+7
IOPENTNM EQU   IOPENTNT
IOPPIND  EQU   IOPPNTRY+8
IOPPTFND EQU   IOPPMODS
IOPPFMID EQU   IOPPTFFX+73
@NM00145 EQU   IOPPTPFX+24
IOPUCLT  EQU   IOPDATES+21
IOPUCLD  EQU   IOPDATES+18
IOPACCT  EQU   IOPDATES+15
IOPACCD  EQU   IOPDATES+12
IOPRSTT  EQU   IOPDATES+9
IOPRSTD  EQU   IOPDATES+6
IOPAPPT  EQU   IOPDATES+3
IOPAPPD  EQU   IOPDATES
IOPRECT  EQU   @NM00144+3
IOPRECD  EQU   @NM00144
@NM00143 EQU   IOPPTFFX+8
@NM00142 EQU   @NM00140+7
IOPPRELN EQU   @NM00141
@NM00139 EQU   IOPPTFDR+20
IOPSBYNO EQU   IOPPTFDR+13
IOPDBYNO EQU   IOPPTFDR+6
@NM00138 EQU   IOPPTFF3
IOPFLF   EQU   IOPPTFF3
IOPDBYP  EQU   IOPPTFF3
IOPSBYP  EQU   IOPPTFF3
IOPPMDLP EQU   IOPPTFF2+1
IOPPADDP EQU   IOPPTFF2+1
@NM00137 EQU   IOPPTFF2+1
IOPLRFP  EQU   IOPPTFF2
IOPJCLP  EQU   IOPPTFF2
IOPSUPP  EQU   IOPPTFF2
IOPREQP  EQU   IOPPTFF2
IOPPREP  EQU   IOPPTFF2
IOPNPRP  EQU   IOPPTFF2
IOPIRQP  EQU   IOPPTFF2
IOPDELP  EQU   IOPPTFF2
IOPREGEN EQU   IOPFLGS5
IOPBYP   EQU   IOPFLGS5
IOPDUMMP EQU   IOPFLGS5
@NM00136 EQU   IOPFLGS5
IOPERROR EQU   IOPFLGS5
IOPACC   EQU   IOPFLGS5
IOPRES   EQU   IOPFLGS5
IOPAPP   EQU   IOPFLGS5
IOPPTYPE EQU   IOPPTFDR+1
@NM00135 EQU   IOPPTFDR
IOPSYSTP EQU   IOPSYSTR+8
IOPSYSND EQU   IOPSYNTR
@NM00134 EQU   IOPSYSFX+21
IOPSYSID EQU   IOPSYSFX+13
IOPNUCID EQU   IOPSYSFX+12
IOPSREL  EQU   IOPSYSFX+8
@NM00133 EQU   @NM00131+7
@NM00132 EQU   @NM00131
@NM00130 EQU   IOPSYSDR+5
@NM00129 EQU   IOPFLGS7
IOPSYNG  EQU   IOPFLGS7
IOPSYDL  EQU   IOPFLGS7
IOPSTSNP EQU   IOPFLGS7
IOPMTSNP EQU   IOPFLGS7
IOPPEMAX EQU   IOPSYSDR+2
IOPSCNVL EQU   IOPSYSDR+1
@NM00128 EQU   IOPSYSDR
@NM00127 EQU   IOPDLBFX+8
@NM00126 EQU   @NM00124+7
@NM00125 EQU   @NM00124
@NM00123 EQU   IOPDLBDR+1
@NM00122 EQU   IOPDLBDR
@NM00121 EQU   IOPMODST
@NM00120 EQU   IOPMODFX+12
@NM00119 EQU   IOPMODF4
@NM00118 EQU   IOPMODF3
@NM00117 EQU   IOPMODF2
IOPMPAGA EQU   IOPMODF2
IOPMNE   EQU   IOPMODF2
@NM00116 EQU   IOPMODF1
IOPMDC   EQU   IOPMODF1
IOPMREFR EQU   IOPMODF1
IOPMOVLY EQU   IOPMODF1
IOPMSCTR EQU   IOPMODF1
IOPMREUS EQU   IOPMODF1
IOPMRENT EQU   IOPMODF1
IOPMAPF  EQU   IOPMODF1
@NM00115 EQU   @NM00113+7
@NM00114 EQU   @NM00113
@NM00112 EQU   IOPMODDR+17
@NM00111 EQU   @NM00109+7
@NM00110 EQU   @NM00109
@NM00108 EQU   @NM00105
@NM00107 EQU   @NM00105
@NM00106 EQU   @NM00105
@NM00104 EQU   @NM00103
@NM00102 EQU   IOPMODDR
IOPSRIND EQU   IOPSNTRY+8
@NM00101 EQU   IOPSRCST
IOPSRCND EQU   IOPSRCID
IOPSRDLB EQU   IOPSRCFX+72
IOPSRSYS EQU   IOPSRCFX+64
@NM00100 EQU   IOPSRCFX+8
@NM00099 EQU   @NM00097+7
@NM00098 EQU   @NM00097
@NM00096 EQU   IOPSRCDR+18
IOPSRLNG EQU   IOPSRCDR+17
@NM00095 EQU   @NM00093+7
@NM00094 EQU   @NM00093
@NM00092 EQU   @NM00089
@NM00091 EQU   @NM00089
@NM00090 EQU   @NM00089
@NM00088 EQU   @NM00087
@NM00086 EQU   IOPSRCDR
IOPEOFND EQU   IOPEOFNT
IOPMCTYP EQU   IOPMCIND
@NM00085 EQU   IOPMACST
IOPMACND EQU   IOPMACID
IOPMCDLB EQU   IOPMACFX+72
IOPMCSYS EQU   IOPMACFX+64
@NM00084 EQU   IOPMACFX+8
IOPBUTYP EQU   IOPBUNT+7
IOPBUSMD EQU   IOPBUNT
@NM00083 EQU   IOPMACDR+18
IOPMCLNG EQU   IOPMACDR+17
IOPFMST  EQU   IOPFMIDE+7
@NM00082 EQU   IOPRMST
IOPRMASM EQU   IOPRMST
@NM00081 EQU   IOPRMST
@NM00080 EQU   IOPMACDR
@NM00078 EQU   @NM00076+7
@NM00077 EQU   @NM00076
@NM00075 EQU   IOPLMDDR+6
@NM00074 EQU   IOPFLGS3
IOPCHREP EQU   IOPFLGS3
IOPLINK  EQU   IOPFLGS3
@NM00073 EQU   IOPLMDF4
@NM00072 EQU   IOPLMDF3
@NM00071 EQU   IOPLMDF2
IOPPAGA  EQU   IOPLMDF2
IOPNE    EQU   IOPLMDF2
@NM00070 EQU   IOPFLGS2
IOPDC    EQU   IOPFLGS2
IOPREFR  EQU   IOPFLGS2
IOPOVLY  EQU   IOPFLGS2
IOPSCTR  EQU   IOPFLGS2
IOPREUS  EQU   IOPFLGS2
IOPRENT  EQU   IOPFLGS2
IOPAPF   EQU   IOPFLGS2
@NM00069 EQU   IOPLMDDR
@NM00068 EQU   IOPASMDR+9
IOPABUTP EQU   IOPABUNT+7
IOPABUPT EQU   IOPABUNT
IOPALLOC EQU   @NM00067+4
IOPUSED  EQU   @NM00067
IOPTPSEQ EQU   @NM00066+8
IOPVLSER EQU   @NM00066+2
IOPBLKSI EQU   @NM00066
IOPCQMAX EQU   IOPCQMAP+12
@NM00065 EQU   IOPCQMAP+11
@NM00064 EQU   IOPCQMAP+8
@NM00063 EQU   IOPCQMAP
IOPPTMAX EQU   IOPCDMAX
@NM00062 EQU   IOPSCMAP+11
@NM00061 EQU   IOPSCMAP+8
@NM00060 EQU   IOPSCMAP
IOPDIRMX EQU   IOPNTMAX+12
@NM00059 EQU   IOPNTMAX+11
@NM00058 EQU   IOPNTMAX+8
@NM00057 EQU   IOPNTMAX
@NM00056 EQU   IOPDTYPE
IOPDMOD  EQU   IOPDTYPE
IOPDJCL  EQU   IOPDTYPE
IOPDSRC  EQU   IOPDTYPE
IOPDMAC  EQU   IOPDTYPE
IOPSDIR  EQU   IOPSPACE+4
IOPSSCND EQU   IOPSPACE+2
IOPSPRIM EQU   IOPSPACE
IOPDSN   EQU   IOPDYNDT
IOPNTYPE EQU   IOPSTCMP+17
IOPNNAME EQU   IOPSTCMP+9
IOPOTYPE EQU   IOPSTCMP+8
IOPONAME EQU   IOPSTCMP
IOPISEQ3 EQU   IOPINAM3+6
IOPITYP3 EQU   @NM00055+5
IOPIPTF3 EQU   @NM00055
CRPDDNAM EQU   HMASMCRP+98
CRPBFSEQ EQU   CRPBUFFR+72
CRPBFCNT EQU   CRPBFCTL+71
CRPBFDTA EQU   CRPBFCTL
CRPINSWF EQU   CRPFLG2+1
CRPINSWE EQU   CRPFLG2+1
CRPINSWD EQU   CRPFLG2+1
CRPINSWC EQU   CRPFLG2+1
CRPINSWB EQU   CRPFLG2+1
CRPINSWA EQU   CRPFLG2+1
CRPINSW9 EQU   CRPFLG2+1
CRPINSW8 EQU   CRPFLG2+1
CRPINSW7 EQU   CRPFLG2
CRPINSW6 EQU   CRPFLG2
CRPINSW5 EQU   CRPFLG2
CRPINSW4 EQU   CRPFLG2
CRPEOF1  EQU   CRPINSW3
CRPWRTLG EQU   CRPINSW2
CRPEXADD EQU   CRPINSW1
CRPEOFSW EQU   CRPINSW0
@NM00005 EQU   CRPFLG1+1
CRPRPT   EQU   CRPFLG1+1
CRPLIST  EQU   CRPFLG1+1
CRPNOWPP EQU   CRPFLG1+1
CRPTRMEX EQU   CRPFLG1+1
CRPEOFEN EQU   CRPFLG1+1
CRPSCNCL EQU   CRPFLG1
CRPOFFST EQU   CRPFLG1
CRPOTHER EQU   CRPFLG1
CRPPRINT EQU   CRPFLG1
CRPLOG   EQU   CRPFLG1
CRPPTS   EQU   CRPFLG1
CRPLOGCK EQU   CRPFLG1
CRPBFPRM EQU   CRPFLG1
@NM00004 EQU   HMASMCRP+11
CRPOUTDS EQU   HMASMCRP+9
@NM00003 EQU   HMASMCRP+1
CRPUXNUM EQU   HMASMCRP
BUPGTPAD EQU   BUPPARM+16
@NM00002 EQU   BUPPARM+11
BUPSYSMD EQU   BUPPARM+4
@NM00001 EQU   BUPFLAGS
BUPREDO  EQU   BUPFLAGS
BUPSTYPE EQU   BUPPARM+2
PRLCONC  EQU   PRLTIME+2
@NM00178 EQU   PRLTIME
PRLHDADR EQU   PRLDATE
@NM00177 EQU   PRLFLGS
PRLBLANK EQU   PRLFLGS
PRLHEADO EQU   PRLFLGS
PRLHEAD  EQU   PRLFLGS
@NM00176 EQU   SCPEOR
SCPNORT  EQU   SCPEOR
SCPNOSUC EQU   SCPEOR
SCPRTERR EQU   SCPEOR
SCPCOMNT EQU   SCPEOR
SCPNOCT  EQU   SCPEOR
SCPCONT  EQU   SCPEOR
SCPWKAR  EQU   HMASMSCP+8
IOPBS04E EQU   IOPBS04+2
IOPBAPFC EQU   IOPBAPF+1
IOPBAPFL EQU   IOPBAPF
IOPBS2NM EQU   IOPBS02+3
IOPBS2EP EQU   IOPBS02
IOPQSMTP EQU   IOPQSMLS+8
@NM00161 EQU   IOPQSMLS+7
IOPQSMND EQU   IOPQSMNM
@NM00160 EQU   @NM00159+7
IOPQSMFM EQU   @NM00159
@NM00079 EQU   IOPLMCTL+17
IOPLMCRD EQU   IOPLMCTL+9
IOPLMCRN EQU   IOPLMCTL+1
IOPLMCC  EQU   IOPLMCTL
@NM00054 EQU   IOPUSERL
@NM00053 EQU   IOPUSERL
IOPALIS  EQU   IOPUSERL
IOPTTR   EQU   IOPDRMAP+8
IOPINAM2 EQU   IOPINAM+1
IOPITYP2 EQU   IOPITYP
@NM00052 EQU   HMASMIOP+32
IOPDELDD EQU   IOPDDNAM
@NM00051 EQU   @NM00048+10
IOPSEQNO EQU   @NM00048+8
@NM00050 EQU   @NM00049+7
IOPPTFNM EQU   @NM00049
IOPNAM17 EQU   IOPNAME
CCABMREC EQU   CCABELMT+10
CCABPOS  EQU   CCABMPOS+8
CCABNAME EQU   CCABMPOS
@NM00047 EQU   CCABLDLM+2
@NM00046 EQU   CCABLDLM
CCAUPDPM EQU   @NM00044+24
@NM00045 EQU   @NM00044+21
CCARUPDT EQU   CCAUPDRC
CCAUPDSP EQU   @NM00044+12
CCAUPDTE EQU   @NM00044+8
CCAUPDNM EQU   @NM00044
CCASUPPM EQU   @NM00042+24
@NM00043 EQU   @NM00042+21
CCARSUP  EQU   CCASUPRC
CCASUPSP EQU   @NM00042+12
CCAIOSUP EQU   @NM00042+8
CCASUPNM EQU   @NM00042
CCAZAPPM EQU   @NM00040+24
@NM00041 EQU   @NM00040+21
CCARZAP  EQU   CCAZAPRC
CCAZAPSP EQU   @NM00040+12
CCASPZAP EQU   @NM00040+8
CCAZAPNM EQU   @NM00040
CCACOMPM EQU   @NM00038+24
@NM00039 EQU   @NM00038+21
CCARCOMP EQU   CCACOMRC
CCACOMSP EQU   @NM00038+12
CCACOMRS EQU   @NM00038+8
CCACOMNM EQU   @NM00038
CCACPYPM EQU   @NM00036+24
@NM00037 EQU   @NM00036+21
CCARCOPY EQU   CCACPYRC
CCACPYSP EQU   @NM00036+12
CCACOPY  EQU   @NM00036+8
CCACPYNM EQU   @NM00036
CCAASMPM EQU   @NM00034+24
@NM00035 EQU   @NM00034+21
CCARASM  EQU   CCAASMRC
CCAASMSP EQU   @NM00034+12
CCAASM   EQU   @NM00034+8
CCAASMNM EQU   @NM00034
CCALKDPM EQU   @NM00032+24
@NM00033 EQU   @NM00032+21
CCARLINK EQU   CCALKDRC
CCALKDSP EQU   @NM00032+12
CCALKED  EQU   @NM00032+8
CCALKDNM EQU   @NM00032
CCAPGMPM EQU   @NM00030+24
@NM00031 EQU   @NM00030+21
CCABPGRC EQU   @NM00030+20
CCABPGSP EQU   @NM00030+12
CCABPGAD EQU   @NM00030+8
CCABPGNM EQU   @NM00030
CCAEND   EQU   HMASMCCA+371
@NM00029 EQU   HMASMCCA+309
CCACURDD EQU   CCAFDSNG+3
CCACURDS EQU   CCAFDSNG+2
@NM00028 EQU   CCAFLAGB
CCAOUTNG EQU   CCAFLAGB
CCALOGNG EQU   CCAFLAGB
CCAFMID  EQU   HMASMCCA+291
CCALSTDS EQU   CCAFCTL+8
CCARPTDS EQU   CCAFCTL+7
CCATIME  EQU   CCAFCTL+4
CCADATE  EQU   CCAFCTL+1
@NM00027 EQU   CCAFLAG9
CCARVCAN EQU   CCAFLAG9
CCARVEST EQU   CCAFLAG9
CCAPTSNJ EQU   CCAFLAG9
CCASTSNP EQU   CCAFLAG9
CCAMTSNP EQU   CCAFLAG9
CCAPTSNP EQU   CCAFLAG9
@NM00026 EQU   CCAFLAG8
CCAACDSC EQU   CCAFLAG8
CCACDSC  EQU   CCAFLAG8
@NM00025 EQU   CCAFLAG6
CCAACRUP EQU   CCAFLAG6
CCACRQUP EQU   CCAFLAG6
CCAACDUP EQU   CCAFLAG6
CCACDSUP EQU   CCAFLAG6
@NM00024 EQU   CCAFLAG5
CCAACROS EQU   CCAFLAG5
CCACRQOS EQU   CCAFLAG5
CCAACDOS EQU   CCAFLAG5
CCACDSOS EQU   CCAFLAG5
@NM00023 EQU   CCAFLAG4
CCAACRIS EQU   CCAFLAG4
CCACRQIS EQU   CCAFLAG4
CCAACDIS EQU   CCAFLAG4
CCACDSIS EQU   CCAFLAG4
@NM00022 EQU   CCAFLAG3+1
CCARGNP  EQU   CCAFLAG3+1
CCADISRQ EQU   CCAFLAG3+1
CCAICTOK EQU   CCAFLAG3
CCADELP  EQU   CCAFLAG3
CCACMPRS EQU   CCAFLAG3
CCAZAPP  EQU   CCAFLAG3
CCALINKP EQU   CCAFLAG3
CCACOPYP EQU   CCAFLAG3
CCAASIP  EQU   CCAFLAG3
CCAUPDP  EQU   CCAFLAG3
CCAEOSMP EQU   CCAFLAG2
CCAEOFNC EQU   CCAFLAG2
@NM00021 EQU   CCAFLAG2
CCACHECK EQU   CCAFLAG2
CCATERM  EQU   CCAFLAG2
CCASVCLB EQU   CCAFLAG2
CCANCPTF EQU   CCAFLAG2
@NM00020 EQU   CCAFLAG1+1
CCAUNL   EQU   CCAFLAG1+1
CCARESET EQU   CCAFLAG1+1
CCALOG   EQU   CCAFLAG1+1
CCACNV   EQU   CCAFLAG1+1
CCALIST  EQU   CCAFLAG1
CCAUPDU  EQU   CCAFLAG1
CCAUPDJ  EQU   CCAFLAG1
CCARES   EQU   CCAFLAG1
CCAREJ   EQU   CCAFLAG1
CCAACCPT EQU   CCAFLAG1
CCAAPPLY EQU   CCAFLAG1
CCAREC   EQU   CCAFLAG1
CCAFUNCT EQU   CCAFFUNC
@NM00019 EQU   @NM00014+18
@NM00018 EQU   @NM00014+16
CCATBLPA EQU   @NM00014+12
@NM00017 EQU   @NM00014+8
@NM00016 EQU   @NM00014+4
@NM00015 EQU   @NM00014
CCAIFGTP EQU   CCAFGTP+16
CCAGTP3  EQU   CCAFGTP+12
CCAGTP2  EQU   CCAFGTP+8
CCAGTP1  EQU   CCAFGTP+4
CCASETAD EQU   CCASEGTP
CCACLST  EQU   CCAFPGM+12
CCASPDCB EQU   CCAFPGM+8
CCAICLMD EQU   CCAFICT+12
CCAICMOD EQU   CCAFICT+8
CCAICPTF EQU   CCAFICT+4
CCAICT   EQU   CCAFICT
CCARVAD  EQU   CCAFSTA
CCAACDID EQU   CCAFSYS+32
CCACDSID EQU   CCAFSYS+24
CCALNLEN EQU   CCAFSYS+22
@NM00013 EQU   CCAFLAGA
CCAPSYSF EQU   CCAFLAGA
CCAASYSF EQU   CCAFLAGA
CCACSYSF EQU   CCAFLAGA
CCANUCID EQU   CCAFSYS+20
CCAASREL EQU   CCAFSYS+16
CCACSREL EQU   CCASREL
CCAPEMAX EQU   CCAFSYS+10
CCAPGLEN EQU   CCAFSYS+8
CCAIOPAS EQU   CCAFSYS+4
CCAIOPCS EQU   CCAFSYS
CCAPESIZ EQU   CCAFIOP+4
@NM00012 EQU   CCAFLAG7+3
CCALOGP  EQU   CCAFLAG7+2
CCAOUTP  EQU   CCAFLAG7+2
CCASLBP  EQU   CCAFLAG7+2
CCARPTP  EQU   CCAFLAG7+2
CCALISTP EQU   CCAFLAG7+2
CCAJCLP  EQU   CCAFLAG7+2
CCAPTFP  EQU   CCAFLAG7+2
CCATLBP  EQU   CCAFLAG7+2
CCAUT3P  EQU   CCAFLAG7+1
CCAUT2P  EQU   CCAFLAG7+1
CCAUT1P  EQU   CCAFLAG7+1
CCAWK5P  EQU   CCAFLAG7+1
CCAWK4P  EQU   CCAFLAG7+1
CCAWK3P  EQU   CCAFLAG7+1
CCAWK2P  EQU   CCAFLAG7+1
CCAWK1P  EQU   CCAFLAG7+1
CCAACRQP EQU   CCAFLAG7
CCACRQP  EQU   CCAFLAG7
CCASTSP  EQU   CCAFLAG7
CCAMTSP  EQU   CCAFLAG7
CCAPTSP  EQU   CCAFLAG7
CCASCDSP EQU   CCAFLAG7
CCAACDSP EQU   CCAFLAG7
CCACDSP  EQU   CCAFLAG7
@NM00011 EQU   CCAFBUFR+122
@NM00010 EQU   CCAFBUFR+120
@NM00009 EQU   CCAFBUFR+118
CCATBFMX EQU   CCAFBUFR+116
CCA4BFMX EQU   CCAFBUFR+114
CCA3BFMX EQU   CCAFBUFR+112
CCA2BFMX EQU   CCAFBUFR+110
CCA1BFMX EQU   CCAFBUFR+108
CCAXBFMX EQU   CCAFBUFR+106
CCAQBFMX EQU   CCAFBUFR+104
CCASBFMX EQU   CCAFBUFR+102
CCAMBFMX EQU   CCAFBUFR+100
CCAPBFMX EQU   CCAFBUFR+98
CCAVBFMX EQU   CCAFBUFR+96
CCAABFMX EQU   CCAFBUFR+94
CCACBFMX EQU   CCAFBUFR+92
@NM00008 EQU   CCAFBUFR+88
@NM00007 EQU   CCAFBUFR+84
CCA4BFSZ EQU   CCAFBUFR+80
CCATBFSZ EQU   CCAFBUFR+76
CCAWBFSZ EQU   CCAFBUFR+72
CCAQBFSZ EQU   CCAFBUFR+68
CCAPBFSZ EQU   CCAFBUFR+64
CCAVBFSZ EQU   CCAFBUFR+60
CCACBFSZ EQU   CCAFBUFR+56
@NM00006 EQU   CCAFBUFR+52
CCA4BFOA EQU   CCAFBUFR+48
CCA4BFIA EQU   CCAFBUFR+44
CCATBFIA EQU   CCAFBUFR+40
CCAWBFOA EQU   CCAFBUFR+36
CCAWBFIA EQU   CCAFBUFR+32
CCAQBFOA EQU   CCAFBUFR+28
CCAQBFIA EQU   CCAFBUFR+24
CCAPBFOA EQU   CCAFBUFR+20
CCAPBFIA EQU   CCAFBUFR+16
CCAVBFOA EQU   CCAFBUFR+12
CCAVBFIA EQU   CCAFBUFR+8
CCACBFOA EQU   CCAFBUFR+4
CCACBFIA EQU   CCAFBUFR
CCAID    EQU   HMASMCCA
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RT00186 EQU   IOOR
@RT00204 EQU   COPYSC10
@RT00210 EQU   IOOR
@RF00233 EQU   @EL00002
@RF00250 EQU   @EL00003
@RF00284 EQU   @RC00280
@RT00307 EQU   CDSRTNBD
@RT00313 EQU   CDSRTNBD
@RT00329 EQU   @EL00006
@RF00329 EQU   UPDTSYSL
@RT00334 EQU   UPDTSYSL
@RT00356 EQU   CDSRTNBD
@RF00356 EQU   STOWLMOD
@RT00362 EQU   CDSRTNBD
@RT00366 EQU   CDSRTNBD
@RT00372 EQU   CDSRTNBD
@RT00376 EQU   CDSRTNBD
@RT00378 EQU   STOWLMOD
@RT00382 EQU   CDSRTNBD
@RF00382 EQU   READ1
@RT00389 EQU   CDSRTNBD
@RT00419 EQU   UPDTSYSD
@ENDDATA EQU   *
         END   HMASMCPY,(C'PLS1958',0802,78334)
