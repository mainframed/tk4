         TITLE 'HMASMASM - ASSEMBLY SYSGEN SCAN ROUTINE OF SMP'
HMASMASM CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'HMASMASM  78.334'                                 0001
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                     0001
         BALR  @12,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,@12                                         0001
         ST    @13,@SA00001+4                                      0001
         LA    @14,@SA00001                                        0001
         ST    @14,8(,@13)                                         0001
         LR    @13,@14                                             0001
         MVC   @PC00001(16),0(@01)                                 0001
*   IOPPTR=CCAIOPTR;                /* SET POINTER TO THE IOP        */
         L     IOPPTR,CCAIOPTR(,CCAPTR)                            0177
*   SAVBUFAD=IOPBUFAD;              /* SAVE BUFFER ADDR      @Z67SP00*/
         L     @10,IOPBUFAD(,IOPPTR)                               0178
         ST    @10,SAVBUFAD                                        0178
*   SCPPTR=ADDR(ASMSCP);            /* PTR TO LOCAL SCP      @Z67SP00*/
         LA    @10,ASMSCP                                          0179
         ST    @10,SCPPTR                                          0179
*   HMASMSCP=CRPSCPAD->HMASMSCP;    /* COPY PASSEF SCP       @Z67SP00*/
         L     @08,@PC00001+4                                      0180
         L     @01,CRPSCPAD(,@08)                                  0180
         MVC   HMASMSCP(26,@10),HMASMSCP(@01)                      0180
*   CRPSCPAD=SCPPTR;                /* CHAIN CRP TO SCP      @Z67SP00*/
         ST    @10,CRPSCPAD(,@08)                                  0181
*   BUPIOPAD=ADDR(HMASMIOP);        /* PTR TO IOP FOR BUE    @Z67SP00*/
         L     @08,@PC00001                                        0182
         ST    IOPPTR,BUPIOPAD(,@08)                               0182
*   BUPFUNCT=BUPABKUP;              /* SET TO ADD BACKUP     @Z67SP00*/
         MVI   BUPFUNCT(@08),X'01'                                 0183
*   BUFBASE=ADDR(MACTBL);           /* SET TO BASE BUFFER            */
         LA    @08,MACTBL                                          0184
         ST    @08,BUFBASE                                         0184
*   MACNXT=ZERO;                    /* CLEAR CHAIN POINTER           */
         SLR   @15,@15                                             0185
         STCM  @15,7,MACNXT(@08)                                   0185
*   MACCTR=ZERO;                    /* INITIALIZE MACRO COUNTER      */
         MVI   MACCTR(@08),X'00'                                   0186
*   MODNAME=BLANK;                  /* BLANK OUT MODULE NAMS         */
         MVI   MODNAME+1,C' '                                      0187
         MVC   MODNAME+2(6),MODNAME+1                              0187
         MVI   MODNAME,C' '                                        0187
*   SCPSRCH=ADDR(MODK);             /* INIT PTR TO FIRST ARGUMENT    */
         LA    @08,MODK                                            0188
         ST    @08,SCPSRCH(,@10)                                   0188
*   SCPIORTN=ZERO;                  /* ZERO I/O RTN ADDR             */
         ST    @15,SCPIORTN(,@10)                                  0189
*   SCPINLN=MAXJCL*LENGTH(BUFFER(1));/* SET INPUT RECORD LENGTH      */
         L     @08,@PC00001+12                                     0190
         LH    @08,MAXJCL(,@08)                                    0190
         MH    @08,@CH00068                                        0190
         STH   @08,SCPINLN(,@10)                                   0190
*   SCPCHAR=ADDR(BUFFER);           /* SET INPUT LIST RECORD PTR     */
         L     @08,@PC00001+8                                      0191
         ST    @08,SCPCHAR(,@10)                                   0191
*   ASMRTNCD=ZERO;                  /* INITIALIZE RETURN CODE        */
         MVI   ASMRTNCD,X'00'                                      0192
*   SWITCHES=ZERO;                  /* INIT INTERNAL SW      @Z40SP00*/
*                                                                  0193
         MVI   SWITCHES,X'00'                                      0193
*   /*****************************************************************/
*   /*                                                               */
*   /* CALL HMASMSCN TO SCAN THE JCL LOOKING FOR MOD= KEYWORD OR     */
*   /* SYSPUNCH DD STATEMENT FOR DSN. THIS WILL PRODUCE THE ASSEMBLY */
*   /* NAME UNDER WHICH THE ASSEMBLER INPUT IS EVENTUALLY STORED.    */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0194
*   CALL HMASMSCN(HMASMSCP);        /* SCAN THE JCL STATEMENT        */
         ST    @10,@AL00001                                        0194
         L     @15,@CV01384                                        0194
         LA    @01,@AL00001                                        0194
         BALR  @14,@15                                             0194
*   IF SCPRET^=SCPGOOD              /* SYNTAX ERROR?         @Z40SP00*/
*       ×MODNAME(1)=BLANK           /* OR MODULE NAME NOT FOUND      */
*     THEN                          /* YES - RETURN SYNTAX ERROR     */
         L     @10,SCPPTR                                          0195
         CLI   SCPRET(@10),0                                       0195
         BNE   @RT00195                                            0195
         CLI   MODNAME,C' '                                        0195
         BNE   @RF00195                                            0195
@RT00195 DS    0H                                                  0196
*     DO;                           /*                       @SA72421*/
*       MSGTXT=MODERR;              /* WRITE ERROR MESSAGE   @Z67SP00*/
         MVC   MSGTXT(25),MODERR                                   0197
*       ASMRTNCD=MAX(ASMRTNCD,SYNTERR);/* SAVE RC            @Z67SP00*/
         SLR   @10,@10                                             0198
         IC    @10,ASMRTNCD                                        0198
         LA    @08,10                                              0198
         CR    @10,@08                                             0198
         BNL   *+6
         LR    @10,@08                                             0198
         STC   @10,ASMRTNCD                                        0198
*     END;                          /*                       @SA72421*/
         EJECT
*                                                                  0200
*   /*****************************************************************/
*   /*                                                               */
*   /* IF JCL OK THEN LOCATE ASSEM ENTRY ON CDS AND CALL HMASMBUE TO */
*   /* CREATE BACKUP COPY ON SCDS                            @Z67SP00*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0200
*   IF ASMRTNCD=ZERO                /*                       @Z67SP00*/
*     THEN                          /*                       @Z67SP00*/
@RF00195 CLI   ASMRTNCD,0                                          0200
         BNE   @RF00200                                            0200
*     DO;                           /*                       @Z67SP00*/
*       IOPFUNCT=IOPLOC;            /*                       @Z67SP00*/
         MVI   IOPFUNCT(IOPPTR),X'03'                              0202
*       IOPDSID=IOPCDS;             /*                       @Z67SP00*/
         MVI   IOPDSID(IOPPTR),X'02'                               0203
*       IOPNAME=MODNAME;            /*                       @Z67SP00*/
         MVC   IOPNAME(8,IOPPTR),MODNAME                           0204
*       IOPTYPE=IOPASM;             /*                       @Z67SP00*/
         MVI   IOPTYPE(IOPPTR),X'01'                               0205
*       CALL HMASMIO(HMASMIOP);     /* LOC ASSEM             @Z67SP00*/
         ST    IOPPTR,@AL00001                                     0206
         L     @15,@CV01381                                        0206
         LA    @01,@AL00001                                        0206
         BALR  @14,@15                                             0206
*       IF IOPRETRN=IOPGOOD         /* IF FOUND              @Z67SP00*/
*         THEN                      /*                       @Z67SP00*/
         CLI   IOPRETRN(IOPPTR),0                                  0207
         BNE   @RF00207                                            0207
*         DO;                       /*                       @Z67SP00*/
*           BUPTYPE=BUPUPD;         /* INDICATE UPDATE OPER  @Z67SP00*/
         L     @10,@PC00001                                        0209
         MVI   BUPTYPE(@10),X'02'                                  0209
*           CALL HMASMBUE(BUPPARM); /*                       @Z67SP00*/
         ST    @10,@AL00001                                        0210
         L     @15,@CV01382                                        0210
         LA    @01,@AL00001                                        0210
         BALR  @14,@15                                             0210
*           RFY                                                    0211
*             RTNCODE RSTD;         /*                       @Z67SP00*/
*           ASMRTNCD=MAX(ASMRTNCD,RTNCODE);/*                @Z67SP00*/
         SLR   @14,@14                                             0212
         IC    @14,ASMRTNCD                                        0212
         CR    @14,RTNCODE                                         0212
         BNL   *+6
         LR    @14,RTNCODE                                         0212
         STC   @14,ASMRTNCD                                        0212
*           RFY                                                    0213
*             RTNCODE UNRSTD;       /*                       @Z67SP00*/
*         END;                      /*                       @Z67SP00*/
*       ELSE                        /*                       @Z67SP00*/
*         IF IOPRETRN=IOPNTFND      /* IF NOT FOUND          @Z67SP00*/
*           THEN                    /*                       @Z67SP00*/
         B     @RC00207                                            0215
@RF00207 CLI   IOPRETRN(IOPPTR),4                                  0215
         BNE   @RF00215                                            0215
*           DO;                     /*                       @Z67SP00*/
*             IOPASMNT=''B;         /* ZERO ASSEM NTRY       @Z67SP00*/
         XC    IOPASMNT(24,IOPPTR),IOPASMNT(IOPPTR)                0217
*             IOPNTLVL=IOPASMLC;    /* IN CURRENT FORMAT     @Z67SP00*/
         MVI   IOPNTLVL(IOPPTR),X'02'                              0218
*             BUPTYPE=BUPADD;       /* INDICATE ADD OPER     @Z67SP00*/
         L     @10,@PC00001                                        0219
         MVI   BUPTYPE(@10),X'01'                                  0219
*             CALL HMASMBUE(BUPPARM);/*                      @Z67SP00*/
         ST    @10,@AL00001                                        0220
         L     @15,@CV01382                                        0220
         LA    @01,@AL00001                                        0220
         BALR  @14,@15                                             0220
*             RFY                                                  0221
*               RTNCODE RSTD;       /*                       @Z67SP00*/
*             ASMRTNCD=MAX(ASMRTNCD,RTNCODE);/*              @Z67SP00*/
         SLR   @14,@14                                             0222
         IC    @14,ASMRTNCD                                        0222
         CR    @14,RTNCODE                                         0222
         BNL   *+6
         LR    @14,RTNCODE                                         0222
         STC   @14,ASMRTNCD                                        0222
*             RFY                                                  0223
*               RTNCODE UNRSTD;     /*                       @Z67SP00*/
*           END;                    /*                       @Z67SP00*/
*         ELSE                      /*                       @Z67SP00*/
*           DO;                     /*                       @Z67SP00*/
         B     @RC00215                                            0225
@RF00215 DS    0H                                                  0226
*             ASMRTNCD=MAX(ASMRTNCD,IOPRETRN);/*             @Z67SP00*/
         SLR   @10,@10                                             0226
         IC    @10,ASMRTNCD                                        0226
         SLR   @08,@08                                             0226
         IC    @08,IOPRETRN(,IOPPTR)                               0226
         CR    @10,@08                                             0226
         BNL   *+6
         LR    @10,@08                                             0226
         STC   @10,ASMRTNCD                                        0226
*             MSGTXT=LASTLINE;      /*                       @Z67SP00*/
         MVC   MSGTXT(25),LASTLINE                                 0227
*           END;                    /*                       @Z67SP00*/
*     END;                          /*                       @Z67SP00*/
@RC00215 DS    0H                                                  0229
@RC00207 DS    0H                                                  0230
         EJECT
*                                                                  0230
*   /*****************************************************************/
*   /*                                                               */
*   /* SCAN ASSEMBLY RECORDS FOR POSSIBLE MACRO CALLS. THE ASSUMPTION*/
*   /* IS MADE THAT A VALID MACRO CALL MUST BE LONGER THAN 5         */
*   /* CHARACTERS AND LESS THAN 9. THIS IS TO AVOID SCAN AND ANALYSIS*/
*   /* OF EVERY VALID ASSEMBLER OP CODE. THE ONLY KNOWN EXCEPTION TO */
*   /* THE ABOVE RULE IS THE CVT.                                    */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0230
*   SEQNO=ZERO;                     /* RESET SEQUENCE NUMBER         */
@RF00200 SLR   @10,@10                                             0230
         ST    @10,SEQNO                                           0230
*   SCPSRCH=ADDR(MACSTART);         /* INITIALIZE ARGUMENT FOR SCAN  */
         L     @10,SCPPTR                                          0231
         LA    @08,MACSTART                                        0231
         ST    @08,SCPSRCH(,@10)                                   0231
*   SCPINLN=LENGTH(CRPBFDTA);       /* SET INPUT RECORD LEN  @Z67SP00*/
         MVC   SCPINLN(2,@10),@CH01063                             0232
*   DO WHILE(                       /* PROCESS WHILE                 */
*         ASMRTNCD=ZERO             /* RTNCODE IS OK         @Z67SP00*/
*         &CRPBUFFR(1:2)^=SLASHAST  /* AND NOT EOF           @Z67SP00*/
*         &JCLENSW=OFF              /* AND NOT JCL CARD      @Z67SP00*/
*         &PREMSW=OFF               /* OR EOF                @Z67SP00*/
*         );                        /*                       @Z67SP00*/
         B     @DE00233                                            0233
@DL00233 DS    0H                                                  0234
*     IOPBUFAD=ADDR(CRPBUFFR);      /* PTR TO INPUT RCD      @Z67SP00*/
         L     @10,@PC00001+4                                      0234
         LA    @08,CRPBUFFR(,@10)                                  0234
         ST    @08,IOPBUFAD(,IOPPTR)                               0234
*     SEQNO=SEQNO+SEQINCR;          /* BUMP SEQENCE NUMBER           */
         LA    @08,100                                             0235
         AL    @08,SEQNO                                           0235
         ST    @08,SEQNO                                           0235
*     CVD(SEQNO,SEQPACK);           /* CONVERT NUMBER                */
         CVD   @08,SEQPACK                                         0236
*     UNPK(SEQUENCE,SEQPACK);       /* PUT NUMBER INTO RECORD        */
         UNPK  SEQUENCE(8,@10),SEQPACK(8)                          0237
*     LASTDIG=LASTDIG×MAKPRINT;     /* MAKE PRINTABLE                */
         OI    LASTDIG(@10),X'F0'                                  0238
*     IOPDSID=IOPCDS;               /* INDICATE CONTROL DATA SET     */
         MVI   IOPDSID(IOPPTR),X'02'                               0239
*     IOPFUNCT=IOPWRITE;            /* INDICATE WRITE OPERATION      */
         MVI   IOPFUNCT(IOPPTR),X'51'                              0240
*     CALL HMASMIO(HMASMIOP);       /* WRITE ASSEMBLER RECORD TO CDS */
         ST    IOPPTR,@AL00001                                     0241
         L     @15,@CV01381                                        0241
         LA    @01,@AL00001                                        0241
         BALR  @14,@15                                             0241
*     IF IOPRETRN^=IOPGOOD          /* SUCCESSFUL I/O?       @Z40SP00*/
*       THEN                        /* NO - ERROR CONDITION          */
         CLI   IOPRETRN(IOPPTR),0                                  0242
         BE    @RF00242                                            0242
*       DO;                         /*                       @SA72421*/
*         ASMRTNCD=MAX(ASMRTNCD,STOPSMP);/*                  @Z67SP00*/
         SLR   @10,@10                                             0244
         IC    @10,ASMRTNCD                                        0244
         LA    @08,16                                              0244
         CR    @10,@08                                             0244
         BNL   *+6
         LR    @10,@08                                             0244
         STC   @10,ASMRTNCD                                        0244
*         MSGTXT=LASTLINE;          /* MSG TO WRITE          @Z67SP00*/
         MVC   MSGTXT(25),LASTLINE                                 0245
*       END;                        /*                       @SA72421*/
*     ELSE                          /*                       @Z67SP00*/
*       DO;                         /*                       @Z67SP00*/
         B     @RC00242                                            0247
@RF00242 DS    0H                                                  0248
*         IF CONTINSW=OFF           /* IS CONTINUATION PENDING?      */
*           THEN                    /* NO - THEN OK TO SCAN          */
         TM    CONTINSW,B'10000000'                                0248
         BNZ   @RF00248                                            0248
*           DO;                     /* GO AHEAD AND SCAN STMT        */
*             SCPCHAR=ADDR(CRPBUFFR);/* RESET RCD ADDR       @Z67SP00*/
         L     @10,SCPPTR                                          0250
         L     @08,@PC00001+4                                      0250
         LA    @08,CRPBUFFR(,@08)                                  0250
         ST    @08,SCPCHAR(,@10)                                   0250
*             CALL HMASMSCN(HMASMSCP);/* SCAN ASSEMBLER RECORD       */
         ST    @10,@AL00001                                        0251
         L     @15,@CV01384                                        0251
         LA    @01,@AL00001                                        0251
         BALR  @14,@15                                             0251
*             IF SCPRET^=SCPGOOD    /* SYNTAX ERROR?         @Z40SP00*/
*               THEN                /* YES - RETURN TO CALLER        */
         L     @10,SCPPTR                                          0252
         CLI   SCPRET(@10),0                                       0252
         BE    @RF00252                                            0252
*               IF EXCERR=ON        /* MACRO TABLE EXCEEDED?         */
*                 THEN              /* YES - INDICATE ERROR          */
         TM    EXCERR,B'01000000'                                  0253
         BNO   @RF00253                                            0253
*                 DO;               /*                       @SA72421*/
*                   ASMRTNCD=MAX(ASMRTNCD,TBLEXC);/*         @Z67SP00*/
         SLR   @10,@10                                             0255
         IC    @10,ASMRTNCD                                        0255
         LA    @08,12                                              0255
         CR    @10,@08                                             0255
         BNL   *+6
         LR    @10,@08                                             0255
         STC   @10,ASMRTNCD                                        0255
*                   MSGTXT=MACTBLEX;/* MSG TEXT              @Z67SP00*/
         MVC   MSGTXT(25),MACTBLEX                                 0256
*                 END;              /*                       @SA72421*/
*           END;                                                   0258
@RF00253 DS    0H                                                  0258
@RF00252 DS    0H                                                  0259
*         IF ASMRTNCD<STOPPTF       /* IF NO ERROR           @Z67SP00*/
*           THEN                    /*                       @Z67SP00*/
@RF00248 CLI   ASMRTNCD,8                                          0259
         BNL   @RF00259                                            0259
*           DO;                     /*                       @Z67SP00*/
*             IF CRPBFCNT=BLANK     /* IF NOT CONTINUED      @Z67SP00*/
*               THEN                /* YES - INDICATE NO CONTIN      */
         L     @10,@PC00001+4                                      0261
         CLI   CRPBFCNT(@10),C' '                                  0261
         BNE   @RF00261                                            0261
*               CONTINSW=OFF;       /* TURN OFF CONTIN. SWITCH       */
         NI    CONTINSW,B'01111111'                                0262
*             ELSE                  /* CONTINUATION IS PENDING       */
*               CONTINSW=ON;        /* INDICATE CONTINUATION PEND    */
         B     @RC00261                                            0263
@RF00261 OI    CONTINSW,B'10000000'                                0263
*             CALL HMASMCRD(HMASMCRP);/* READ NEXT RCD       @Z67SP00*/
@RC00261 L     @10,@PC00001+4                                      0264
         ST    @10,@AL00001                                        0264
         L     @15,@CV01383                                        0264
         LA    @01,@AL00001                                        0264
         BALR  @14,@15                                             0264
*             IF CRPRETRN=CRPGOOD   /* IF READ OK            @Z67SP00*/
*                 &CRPBUFFR(1:2)=TWOSLASH/* AND WAS JCL      @Z67SP00*/
*               THEN                /*                       @Z67SP00*/
         L     @10,@PC00001+4                                      0265
         CLI   CRPRETRN(@10),0                                     0265
         BNE   @RF00265                                            0265
         CLC   CRPBUFFR(2,@10),@CC01345                            0265
         BNE   @RF00265                                            0265
*               JCLENSW=ON;         /* SET SW                @Z67SP00*/
         OI    JCLENSW,B'00010000'                                 0266
*             ELSE                  /*                       @Z67SP00*/
*               IF CRPRETRN=CRPEOF  /* IF END OF FILE        @Z67SP00*/
*                   ×(CRPBUFFR(1:2)=TWOPLUS/* OR MCS         @Z67SP00*/
*                   &CRPINDS=IOPPTS)/* ON PTS                @Z67SP00*/
*                 THEN              /* YES - ERROR CONDITION         */
         B     @RC00265                                            0267
@RF00265 L     @10,@PC00001+4                                      0267
         CLI   CRPRETRN(@10),4                                     0267
         BE    @RT00267                                            0267
         CLC   CRPBUFFR(2,@10),@CC01347                            0267
         BNE   @RF00267                                            0267
         CLI   CRPINDS(@10),6                                      0267
         BNE   @RF00267                                            0267
@RT00267 DS    0H                                                  0268
*                 PREMSW=ON;        /* PREMATURE EOF         @Z67SP00*/
         OI    PREMSW,B'00001000'                                  0268
*               ELSE                /*                       @Z67SP00*/
*                 IF CRPRETRN>CRPEOF/* I/O ERROR???          @Z40SP00*/
*                   THEN            /* YES - ANOTHER ERROR           */
         B     @RC00267                                            0269
@RF00267 L     @10,@PC00001+4                                      0269
         CLI   CRPRETRN(@10),4                                     0269
         BNH   @RF00269                                            0269
*                   DO;             /*                       @Z67SP00*/
*                     MSGTXT=LASTLINE;/*                     @Z67SP00*/
         MVC   MSGTXT(25),LASTLINE                                 0271
*                     ASMRTNCD=MAX(ASMRTNCD,STOPSMP);/*      @Z67SP00*/
         SLR   @10,@10                                             0272
         IC    @10,ASMRTNCD                                        0272
         LA    @08,16                                              0272
         CR    @10,@08                                             0272
         BNL   *+6
         LR    @10,@08                                             0272
         STC   @10,ASMRTNCD                                        0272
*                   END;            /*                       @Z67SP00*/
*           END;                    /* END NO ERROR IN SCAN  @Z67SP00*/
@RF00269 DS    0H                                                  0274
@RC00267 DS    0H                                                  0274
@RC00265 DS    0H                                                  0275
*       END;                        /* END WRITE OK          @Z67SP00*/
@RF00259 DS    0H                                                  0276
*   END;                            /* END MAC LOOP          @Z67SP00*/
@RC00242 DS    0H                                                  0276
@DE00233 CLI   ASMRTNCD,0                                          0276
         BNE   @DC00233                                            0276
         L     @10,@PC00001+4                                      0276
         CLC   CRPBUFFR(2,@10),@CC01343                            0276
         BE    @DC00233                                            0276
         TM    JCLENSW,B'00011000'                                 0276
         BZ    @DL00233                                            0276
@DC00233 DS    0H                                                  0277
         EJECT
*                                                                  0277
*   /*****************************************************************/
*   /*                                                               */
*   /* THE ASSEMBLY HAS ALL BEEN WRITTEN TO THE CDS AND MACROS HAVE  */
*   /* BEEN PICKED OFF THE STATEMENTS AND STORED IN AN ARRAY FIRST,  */
*   /* THE ASSEMBLER INPUT IS STORED IN THE CDS                      */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0277
*   IF ASMRTNCD<STOPPTF             /* IF NO SEVERE ERROR IN @Z67SP00*/
*     THEN                          /* PREV ROUTINES         @Z67SP00*/
         CLI   ASMRTNCD,8                                          0277
         BNL   @RF00277                                            0277
*     DO;                           /*                       @ZD00004*/
*       IOPFUNCT=IOPSTOWR;          /* INDICATE STOW REPLACE         */
         MVI   IOPFUNCT(IOPPTR),X'54'                              0279
*       CALL HMASMIO(HMASMIOP);     /* STOW CALLING BOOK IN CDS      */
         ST    IOPPTR,@AL00001                                     0280
         L     @15,@CV01381                                        0280
         LA    @01,@AL00001                                        0280
         BALR  @14,@15                                             0280
*       IF IOPRETRN^=IOPGOOD        /* IF ERR IN STOW        @Z67SP00*/
*         THEN                      /*                       @Z67SP00*/
         CLI   IOPRETRN(IOPPTR),0                                  0281
         BE    @RF00281                                            0281
*         DO;                       /*                       @Z67SP00*/
*           ASMRTNCD=MAX(ASMRTNCD,IOPRETRN);/* SAVE RC       @Z67SP00*/
         SLR   @10,@10                                             0283
         IC    @10,ASMRTNCD                                        0283
         SLR   @08,@08                                             0283
         IC    @08,IOPRETRN(,IOPPTR)                               0283
         CR    @10,@08                                             0283
         BNL   *+6
         LR    @10,@08                                             0283
         STC   @10,ASMRTNCD                                        0283
*           MSGTXT=LASTLINE;        /*                       @Z67SP00*/
         MVC   MSGTXT(25),LASTLINE                                 0284
*         END;                      /*                       @Z67SP00*/
*     END;                          /*                       @ZD00004*/
@RF00281 DS    0H                                                  0287
         EJECT
*                                                                  0287
*   /*****************************************************************/
*   /*                                                               */
*   /* IF ASSEMBLY ENTRY WAS STORED OK THEN NOW MUST UPDATE ALL      */
*   /* RELATED MACRO ENTRIES.                                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0287
*   BUFBASE=ADDR(MACTBL);           /* POINT TO BASE BUFFER          */
@RF00277 LA    @10,MACTBL                                          0287
         ST    @10,BUFBASE                                         0287
*   DO I=1 TO MACCTR WHILE(         /* LOOP THROUGH MACRO LIST       */
*         ASMRTNCD<STOPPTF          /* TILL END OR ERROR     @Z67SP00*/
*         );                        /*                       @Z67SP00*/
         LA    @10,1                                               0288
         B     @DE00288                                            0288
@DL00288 CLI   ASMRTNCD,8                                          0288
         BNL   @DC00288                                            0288
*     FOUND=OFF;                    /* INDICATE UPDATE MAC   @Z67SP00*/
         NI    FOUND,B'11011111'                                   0289
*     IOPFUNCT=IOPLOC;              /* INDICATE BLDL OPERATION       */
         MVI   IOPFUNCT(IOPPTR),X'03'                              0290
*     IOPDSID=IOPCDS;               /*                       @Z67SP00*/
         MVI   IOPDSID(IOPPTR),X'02'                               0291
*     IOPNAME=MACCALL(I);           /* PUT MACRO NAME IN IOP         */
         SLA   @10,3                                               0292
         L     @08,BUFBASE                                         0292
         ALR   @08,@10                                             0292
         AL    @08,@CF01456                                        0292
         MVC   IOPNAME(8,IOPPTR),MACCALL-4(@08)                    0292
*     IOPTYPE=IOPMAC;               /* INDICATE MACRO TYPE   @ZD00008*/
         MVI   IOPTYPE(IOPPTR),X'03'                               0293
*     CALL HMASMIO(HMASMIOP);       /* LOCATE MEMBER IN THE CDS      */
         ST    IOPPTR,@AL00001                                     0294
         L     @15,@CV01381                                        0294
         LA    @01,@AL00001                                        0294
         BALR  @14,@15                                             0294
*     IF IOPRETRN=IOPGOOD           /* SUCCESSFUL LOCATE (FOUND)     */
*       THEN                        /* YES - CHECK IF ON LIST(CDS)   */
         CLI   IOPRETRN(IOPPTR),0                                  0295
         BNE   @RF00295                                            0295
*       DO;                         /*                       @Z40SP00*/
*         BUPTYPE=BUPUPD;           /* INDICATE UPDATE       @Z67SP00*/
         L     @10,@PC00001                                        0297
         MVI   BUPTYPE(@10),X'02'                                  0297
*         DO K=1 BY 1               /* CHECK ASSEM LIST IN CDS ENTRY */
*               WHILE IOPMACND(K)^=IOPEOLST;/* TILL END OF LIST    0298
*                                                            @ZD00004*/
         LA    @10,1                                               0298
         STCM  @10,7,K                                             0298
         B     @DE00298                                            0298
@DL00298 DS    0H                                                  0299
*           IF IOPMCASM(K)=MODNAME  /* IF ASM FOUND IN MAC   @Z67SP00*/
*               &IOPMCIND(K)=IOPMASMS/* AS SYSGEN ASM        @Z40SP00*/
*             THEN                  /*                       @ZD00004*/
         L     @10,K-1                                             0299
         LA    @10,0(,@10)                                         0299
         MH    @10,@CH00460                                        0299
         ST    @10,@TF00001                                        0299
         ALR   @10,IOPPTR                                          0299
         CLC   IOPMCASM-9(8,@10),MODNAME                           0299
         BNE   @RF00299                                            0299
         L     @10,@TF00001                                        0299
         SLR   @08,@08                                             0299
         IC    @08,IOPMCIND-9(@10,IOPPTR)                          0299
         C     @08,@CF00046                                        0299
         BNE   @RF00299                                            0299
*             FOUND=ON;             /* SET FOUND ASIS        @ZD00004*/
         OI    FOUND,B'00100000'                                   0300
*         END;                                                     0301
@RF00299 LA    @10,1                                               0301
         L     @08,K-1                                             0301
         LA    @08,0(,@08)                                         0301
         ALR   @10,@08                                             0301
         STCM  @10,7,K                                             0301
@DE00298 L     @10,K-1                                             0301
         LA    @10,0(,@10)                                         0301
         MH    @10,@CH00460                                        0301
         SLR   @08,@08                                             0301
         IC    @08,IOPMACND-9(@10,IOPPTR)                          0301
         C     @08,@CF00648                                        0301
         BNE   @DL00298                                            0301
*       END;                        /* END MAC FOUND         @Z67SP00*/
*     ELSE                          /*                       @Z67SP00*/
*       IF IOPRETRN=IOPNTFND        /* IF MACRO NOT FOUND    @Z67SP00*/
*         THEN                      /* CDS THEN MUST         @Z67SP00*/
         B     @RC00295                                            0303
@RF00295 CLI   IOPRETRN(IOPPTR),4                                  0303
         BNE   @RF00303                                            0303
*         DO;                       /* INITIALIZE ENTRY      @Z67SP00*/
*           K=1;                    /* INDEX TO FIRST ENTRY  @Z40SP00*/
         MVC   K(3),@CF00046+1                                     0305
*           BUPTYPE=BUPADD;         /* INDICATE ADD ENTRY    @Z67SP00*/
         L     @10,@PC00001                                        0306
         MVI   BUPTYPE(@10),X'01'                                  0306
*           IOPMACNT=''B;           /* ZERO ENTRY            @ZD00004*/
         XC    IOPMACNT(104,IOPPTR),IOPMACNT(IOPPTR)               0307
*           IOPNTLVL=IOPMACLC;      /* CURRENT LEVEL         @ZD00004*/
         MVI   IOPNTLVL(IOPPTR),X'03'                              0308
*           IOPFMID=BLANK;          /* BLANK FMID            @Z67SP00*/
         MVI   IOPFMID+1(IOPPTR),C' '                              0309
         MVC   IOPFMID+2(5,IOPPTR),IOPFMID+1(IOPPTR)               0309
         MVI   IOPFMID(IOPPTR),C' '                                0309
*           IOPRMID=BLANK;          /* BLANK RMID FIELD      @ZD00008*/
         MVI   IOPRMID+1(IOPPTR),C' '                              0310
         MVC   IOPRMID+2(5,IOPPTR),IOPRMID+1(IOPPTR)               0310
         MVI   IOPRMID(IOPPTR),C' '                                0310
*           IOPMCLNG=IOPMCASI;      /* ASSEMBLER LANGUAGE    @Z40SP00*/
         MVI   IOPMCLNG(IOPPTR),X'00'                              0311
*           IOPMCDLB=BLANK;         /* NO DISTLIB            @Z40SP00*/
         MVI   IOPMCDLB+1(IOPPTR),C' '                             0312
         MVC   IOPMCDLB+2(6,IOPPTR),IOPMCDLB+1(IOPPTR)             0312
         MVI   IOPMCDLB(IOPPTR),C' '                               0312
*           IOPMCSYS=BLANK;         /* NO TARGET LIBRARY     @Z40SP00*/
         MVI   IOPMCSYS+1(IOPPTR),C' '                             0313
         MVC   IOPMCSYS+2(6,IOPPTR),IOPMCSYS+1(IOPPTR)             0313
         MVI   IOPMCSYS(IOPPTR),C' '                               0313
*         END;                      /*                       @Z67SP00*/
*       ELSE                        /* NOT NOT-FOUND         @Z67SP00*/
*         DO;                       /*                       @Z67SP00*/
         B     @RC00303                                            0315
@RF00303 DS    0H                                                  0316
*           ASMRTNCD=MAX(ASMRTNCD,IOPRETRN);/* SAVE RC       @Z67SP00*/
         SLR   @10,@10                                             0316
         IC    @10,ASMRTNCD                                        0316
         SLR   @08,@08                                             0316
         IC    @08,IOPRETRN(,IOPPTR)                               0316
         CR    @10,@08                                             0316
         BNL   *+6
         LR    @10,@08                                             0316
         STC   @10,ASMRTNCD                                        0316
*           MSGTXT=LASTLINE;        /*                       @Z67SP00*/
         MVC   MSGTXT(25),LASTLINE                                 0317
*         END;                      /*                       @Z67SP00*/
*                                                                  0319
*     /***************************************************************/
*     /*                                                             */
*     /* IF NO SEVERE ERRORS IN LOCATE AND MACRO WAS EITHER ADDED OR */
*     /* UPDATED THIS TIME THEN STORE BACKUP COPY ON SCDS IF         */
*     /* REQUIRED, UPDATE MACRO, AND STOW ON CDS             @Z67SP00*/
*     /*                                                             */
*     /***************************************************************/
*                                                                  0319
*     IF FOUND=OFF                  /* IF MAC WAS UPDDATED   @Z67SP00*/
*         &ASMRTNCD<STOPPTF         /* AND NO ERRORS         @Z67SP00*/
*       THEN                        /*                       @Z67SP00*/
@RC00303 DS    0H                                                  0319
@RC00295 TM    FOUND,B'00100000'                                   0319
         BNZ   @RF00319                                            0319
         CLI   ASMRTNCD,8                                          0319
         BNL   @RF00319                                            0319
*       DO;                         /*                       @Z67SP00*/
*         CALL HMASMBUE(BUPPARM);   /* CREATE BACKUP ENTRY   @Z67SP00*/
         L     @10,@PC00001                                        0321
         ST    @10,@AL00001                                        0321
         L     @15,@CV01382                                        0321
         LA    @01,@AL00001                                        0321
         BALR  @14,@15                                             0321
*         RFY                                                      0322
*           RTNCODE RSTD;           /*                       @Z67SP00*/
*         ASMRTNCD=MAX(ASMRTNCD,RTNCODE);/* SAVE RC          @Z67SP00*/
         SLR   @14,@14                                             0323
         IC    @14,ASMRTNCD                                        0323
         CR    @14,RTNCODE                                         0323
         BNL   *+6
         LR    @14,RTNCODE                                         0323
         STC   @14,ASMRTNCD                                        0323
*         RFY                                                      0324
*           RTNCODE UNRSTD;         /*                       @Z67SP00*/
*         IF ASMRTNCD=ZERO          /* IF BACKUP OK          @Z67SP00*/
*           THEN                    /*                       @Z67SP00*/
         CLI   ASMRTNCD,0                                          0325
         BNE   @RF00325                                            0325
*           DO;                     /*                       @Z67SP00*/
*             IOPMCASM(K)=MODNAME;  /* ADD THIS ASSEMBLY     @Z40SP00*/
         L     @10,K-1                                             0327
         LA    @10,0(,@10)                                         0327
         MH    @10,@CH00460                                        0327
         ST    @10,@TF00001                                        0327
         ALR   @10,IOPPTR                                          0327
         MVC   IOPMCASM-9(8,@10),MODNAME                           0327
*             IOPMCIND(K)=IOPMASMS; /* SYGEN ASSEMBLY        @ZD00004*/
         LA    @10,1                                               0328
         L     @08,@TF00001                                        0328
         STC   @10,IOPMCIND-9(@08,IOPPTR)                          0328
*             IOPMACND(K+1)=IOPEOLST;/* INDICATE END OF LS   @ZD00004*/
         LA    @10,255                                             0329
         L     @08,@TF00001                                        0329
         STC   @10,IOPMACND(@08,IOPPTR)                            0329
*             IOPFUNCT=IOPSTOWR;    /* INDICATE STOW OPERATION       */
         MVI   IOPFUNCT(IOPPTR),X'54'                              0330
*             CALL HMASMIO(HMASMIOP);/* STOW UPDATE MACRO ENTRY      */
         ST    IOPPTR,@AL00001                                     0331
         L     @15,@CV01381                                        0331
         LA    @01,@AL00001                                        0331
         BALR  @14,@15                                             0331
*             IF IOPRETRN^=IOPGOOD  /* SUCCESSFUL STOW?      @Z40SP00*/
*               THEN                /* NO - EXIT BADLY               */
         CLI   IOPRETRN(IOPPTR),0                                  0332
         BE    @RF00332                                            0332
*               DO;                 /*                       @Z67SP00*/
*                 ASMRTNCD=MAX(ASMRTNCD,IOPRETRN);/* SAVE RC @Z67SP00*/
         SLR   @10,@10                                             0334
         IC    @10,ASMRTNCD                                        0334
         SLR   @08,@08                                             0334
         IC    @08,IOPRETRN(,IOPPTR)                               0334
         CR    @10,@08                                             0334
         BNL   *+6
         LR    @10,@08                                             0334
         STC   @10,ASMRTNCD                                        0334
*                 MSGTXT=LASTLINE;  /* TXT FOR ERR MSG       @Z67SP00*/
         MVC   MSGTXT(25),LASTLINE                                 0335
*               END;                /*                       @Z67SP00*/
*           END;                    /* END BACKUP OK         @Z67SP00*/
@RF00332 DS    0H                                                  0338
*       END;                                                       0338
@RF00325 DS    0H                                                  0339
*     IF I=MACCTR                   /* IF AT LAST MAC IN     @Z67SP00*/
*         &MACNXT^=ZERO             /* BUFFER AND THIS IS    @Z67SP00
*                                      NOT LAST BUFFER       @Z67SP00*/
*       THEN                        /* THEN RESET COUNT OF   @Z67SP00*/
@RF00319 L     @10,BUFBASE                                         0339
         L     @08,I-1                                             0339
         LA    @08,0(,@08)                                         0339
         SLR   @15,@15                                             0339
         IC    @15,MACCTR(,@10)                                    0339
         CR    @08,@15                                             0339
         BNE   @RF00339                                            0339
         SLR   @08,@08                                             0339
         ICM   @08,7,MACNXT(@10)                                   0339
         LTR   @08,@08                                             0339
         BZ    @RF00339                                            0339
*       DO;                         /* RCD LEFT TO ZERO TO   @Z67SP00*/
*         I=ZERO;                   /* CONTINUE OUTTER LOOP  @Z67SP00*/
         SLR   @10,@10                                             0341
         STCM  @10,7,I                                             0341
*         BUFBASE=MACNXT;           /* AND POINT TO NEXT BUFFER      */
         ST    @08,BUFBASE                                         0342
*       END;                        /*                               */
*   END;                            /*                       @Z67SP00*/
@RF00339 LA    @10,1                                               0344
         L     @08,I-1                                             0344
         LA    @08,0(,@08)                                         0344
         ALR   @10,@08                                             0344
@DE00288 STCM  @10,7,I                                             0344
         L     @08,BUFBASE                                         0344
         SLR   @15,@15                                             0344
         IC    @15,MACCTR(,@08)                                    0344
         CR    @10,@15                                             0344
         BNH   @DL00288                                            0344
@DC00288 DS    0H                                                  0345
         EJECT
*                                                                  0345
*   /*****************************************************************/
*   /*                                                               */
*   /* NO MORE MACROS IN BUFFER, WRITE ERROR MESSAGE IF REQUIRED THEN*/
*   /* FREE ALL BUFFERS                                      @Z67SP00*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0345
*   IF ASMRTNCD>=STOPPTF            /* IF ERR IN PROCESS     @Z67SP00*/
*     THEN                          /*                       @Z67SP00*/
         CLI   ASMRTNCD,8                                          0345
         BL    @RF00345                                            0345
*     DO;                           /* MESSAGE SET UP        @Z67SP00*/
*       RFY                                                        0347
*         RTNCODE RSTD;             /*                       @Z67SP00*/
*       IF MSGTXT=MODERR            /* IF ERR IN JCL         @Z67SP00*/
*         THEN                      /*                       @Z67SP00*/
         CLC   MSGTXT(25),MODERR                                   0348
         BNE   @RF00348                                            0348
*         CALL HMAASMR(BUFFER(1),MSGTXT);/*                  @Z67SP00*/
         L     @14,@PC00001+8                                      0349
         ST    @14,@AL00001                                        0349
         LA    @14,MSGTXT                                          0349
         ST    @14,@AL00001+4                                      0349
         LA    @01,@AL00001                                        0349
         BAL   @14,HMAASMR                                         0349
*       ELSE                        /*                       @Z67SP00*/
*         CALL HMAASMR(CRPBUFFR,MSGTXT);/* WRITE MSG         @Z67SP00*/
         B     @RC00348                                            0350
@RF00348 L     @14,@PC00001+4                                      0350
         LA    @14,CRPBUFFR(,@14)                                  0350
         ST    @14,@AL00001                                        0350
         LA    @14,MSGTXT                                          0350
         ST    @14,@AL00001+4                                      0350
         LA    @01,@AL00001                                        0350
         BAL   @14,HMAASMR                                         0350
*       ASMRTNCD=MAX(ASMRTNCD,RTNCODE);/* SAVE RC            @Z67SP00*/
@RC00348 SLR   @14,@14                                             0351
         IC    @14,ASMRTNCD                                        0351
         CR    @14,RTNCODE                                         0351
         BNL   *+6
         LR    @14,RTNCODE                                         0351
         STC   @14,ASMRTNCD                                        0351
*       RFY                                                        0352
*         RTNCODE UNRSTD;           /*                       @Z67SP00*/
*     END;                          /*                       @Z67SP00*/
*   BUFBASE=ADDR(MACTBL);           /* SET TO BASE BUFFER            */
@RF00345 LA    @10,MACTBL                                          0354
         ST    @10,BUFBASE                                         0354
*   BUFBASE=MACNXT;                 /* NOW TO NEXT BUFFER            */
         SLR   @08,@08                                             0355
         ICM   @08,7,MACNXT(@10)                                   0355
         ST    @08,BUFBASE                                         0355
*   DO WHILE BUFBASE^=ZERO;         /* LOOP THRU ALL GM'D BUFFERS    */
         B     @DE00356                                            0356
@DL00356 DS    0H                                                  0357
*     NXTBUF=BUFBASE;               /* SET ADDRESS TO FREEMAIN       */
         L     @10,BUFBASE                                         0357
         ST    @10,NXTBUF                                          0357
*     BUFBASE=MACNXT;               /* PICK UP CHAINED BUFFER        */
         SLR   @08,@08                                             0358
         ICM   @08,7,MACNXT(@10)                                   0358
         ST    @08,BUFBASE                                         0358
*     GEN(FREEMAIN     E,LV=84,A=NXTBUF)                           0359
*     REFS(NXTBUF);                 /*                       @Z40SP00*/
         FREEMAIN     E,LV=84,A=NXTBUF
*   END;                                                           0360
@DE00356 SLR   @10,@10                                             0360
         C     @10,BUFBASE                                         0360
         BNE   @DL00356                                            0360
*   BUFBASE=ADDR(MACTBL);           /* RESET TO BASE BUFFER          */
         LA    @08,MACTBL                                          0361
         ST    @08,BUFBASE                                         0361
*   MACCTR=ZERO;                    /* CLEAR COUNTER                 */
         MVI   MACCTR(@08),X'00'                                   0362
*   MACNXT=ZERO;                    /* CLEAR CHAIN POINTER           */
*                                                                  0363
         STCM  @10,7,MACNXT(@08)                                   0363
*   /*****************************************************************/
*   /*                                                               */
*   /* RETURN TO CALLER                                      @Z67SP00*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0364
*   IOPBUFAD=SAVBUFAD;              /*                       @Z67SP00*/
         L     @10,SAVBUFAD                                        0364
         ST    @10,IOPBUFAD(,IOPPTR)                               0364
*   IF ASMRTNCD=ZERO                /*                       @Z67SP00*/
*     THEN                          /*                       @Z67SP00*/
         CLI   ASMRTNCD,0                                          0365
         BNE   @RF00365                                            0365
*     DO;                           /*                       @Z67SP00*/
*       IF JCLENSW=ON               /*                       @Z67SP00*/
*         THEN                      /*                       @Z67SP00*/
         TM    JCLENSW,B'00010000'                                 0367
         BNO   @RF00367                                            0367
*         ASMRTNCD=JCLENC;          /*                       @Z67SP00*/
         MVI   ASMRTNCD,X'06'                                      0368
*       ELSE                        /*                       @Z67SP00*/
*         IF PREMSW=ON              /*                       @Z67SP00*/
*           THEN                    /*                       @Z67SP00*/
         B     @RC00367                                            0369
@RF00367 TM    PREMSW,B'00001000'                                  0369
         BNO   @RF00369                                            0369
*           ASMRTNCD=PREMEOF;       /*                       @Z67SP00*/
         MVI   ASMRTNCD,X'0E'                                      0370
*     END;                          /*                       @Z67SP00*/
@RF00369 DS    0H                                                  0371
@RC00367 DS    0H                                                  0372
*   RETURN CODE(ASMRTNCD);          /* EXIT WITH GOOD RETURN CODE    */
@RF00365 SLR   @15,@15                                             0372
         IC    @15,ASMRTNCD                                        0372
         L     @13,4(,@13)                                         0372
         L     @14,12(,@13)                                        0372
         LM    @00,@12,20(@13)                                     0372
         BR    @14                                                 0372
         EJECT
*                                                                  0373
*   /*****************************************************************/
*   /*                                                               */
*   /* THE FOLLOWING SUBROUTINE IS ENTERED FROM SCAN TO INCREMENT THE*/
*   /* SCAN PTR FOR JCL SEARCH.                                      */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0373
*BUMP010:                                                          0373
*   PROCEDURE;                                                     0373
@EL00001 L     @13,4(,@13)                                         0373
@EF00001 DS    0H                                                  0373
@ER00001 LM    @14,@12,12(@13)                                     0373
         BR    @14                                                 0373
BUMP010  STM   @14,@12,12(@13)                                     0373
*   IF SCPSTRNG(1)=IOPEOLST         /* END OF JCL BUFFER?    @Z40SP00*/
*     THEN                          /* YES - ERROR CONDITION         */
         L     @10,SCPPTR                                          0374
         L     @08,SCPCHAR(,@10)                                   0374
         CLI   SCPSTRNG(@08),255                                   0374
         BNE   @RF00374                                            0374
*     SCPRET=SCPSTOP;               /* INDICATE ERROR        @Z40SP00*/
         MVI   SCPRET(@10),X'08'                                   0375
*   IF SCPPMLN=ZERO                 /* IF PASSBACK LENGTH IS ZERO    */
*     THEN                          /* THEN BUMP SO NO LOOP OCCURS   */
@RF00374 L     @10,SCPPTR                                          0376
         LH    @08,SCPPMLN(,@10)                                   0376
         LTR   @08,@08                                             0376
         BNZ   @RF00376                                            0376
*     SCPPMLN=1;                    /* RESET LENGTH          @Z40SP00*/
         MVC   SCPPMLN(2,@10),@CH00046                             0377
*   END BUMP010;                    /* RETURN TO CONTINUE SCAN       */
*                                                                  0378
@EL00002 DS    0H                                                  0378
@EF00002 DS    0H                                                  0378
@ER00002 LM    @14,@12,12(@13)                                     0378
         BR    @14                                                 0378
*   /*****************************************************************/
*   /*                                                               */
*   /* THE FOLLOWING SUBROUTINE IS ENTERED TO SAVE THE MODULE WHEN   */
*   /* FOUND IN THE SEARCH OF THE JCL. SCAN STOPS AT THIS POINT.     */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0379
*SAVMOD10:                                                         0379
*   PROCEDURE;                                                     0379
SAVMOD10 STM   @14,@12,12(@13)                                     0379
*   MODNAME=SCPSTRNG(1:SCPPMLN);    /* SAVE MODULE NAME      @Z40SP00*/
         MVI   MODNAME+1,C' '                                      0380
         MVC   MODNAME+2(6),MODNAME+1                              0380
         L     @10,SCPPTR                                          0380
         LH    @08,SCPPMLN(,@10)                                   0380
         BCTR  @08,0                                               0380
         L     @10,SCPCHAR(,@10)                                   0380
         EX    @08,@SM01458                                        0380
*   END SAVMOD10;                   /* RETURN TO SCAN                */
*                                                                  0381
@EL00003 DS    0H                                                  0381
@EF00003 DS    0H                                                  0381
@ER00003 LM    @14,@12,12(@13)                                     0381
         BR    @14                                                 0381
*   /*****************************************************************/
*   /*                                                               */
*   /* THE FOLLOWING SUBROUTINE IS INVOKED FROM SCAN OF ASSEMBLER    */
*   /* INPUT FOR THE PURPOSE OF LABEL VERIFICATION. COMMENTS, AND    */
*   /* OTHER UNLIKELY CANDIDATES FOR MACRO CALLS ARE ELIMINATED HERE.*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0382
*LABELCK:                                                          0382
*   PROCEDURE;                                                     0382
LABELCK  STM   @14,@12,12(@13)                                     0382
*   IF SCPPMLN=ZERO                 /* ZERO LABEL LENGTH?            */
*     THEN                          /* YES - NON-ALPHANUMERIC        */
         L     @10,SCPPTR                                          0383
         LH    @08,SCPPMLN(,@10)                                   0383
         LTR   @08,@08                                             0383
         BNZ   @RF00383                                            0383
*     SCPRET=SCPNDSCN;              /* SKIP IT..NOT CAND.    @Z40SP00*/
         MVI   SCPRET(@10),X'04'                                   0384
*   END LABELCK;                    /* RETURN TO SCAN                */
@EL00004 DS    0H                                                  0385
@EF00004 DS    0H                                                  0385
@ER00004 LM    @14,@12,12(@13)                                     0385
         BR    @14                                                 0385
         EJECT
*                                                                  0386
*   /*****************************************************************/
*   /*                                                               */
*   /* THE FOLLOWING SUBROUTINE IS INVOKED FROM SCAN OF ASSEMBLER    */
*   /* INPUT FOR THE PURPOSE OF SAVING MACRO CALLS IN AN ARRAY       */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0386
*MACSV010:                                                         0386
*   PROCEDURE;                                                     0386
MACSV010 STM   @14,@12,@SA00005                                    0386
*   IF(SCPPMLN<=HIGHLIM             /* HIGH LIMIT EXCEEDED?          */
*       &SCPPMLN>=LOWLIM)           /* LOW LIMIT EXCEEDED?           */
*       ×SCPSTRNG(1:LENGTH(CVT))=CVT/* OR WAS THIS CVT       @Z40SP00*/
*     THEN                          /* WANT TO LOOK AT THIS ONE      */
         L     @10,SCPPTR                                          0387
         LH    @10,SCPPMLN(,@10)                                   0387
         C     @10,@CF00041                                        0387
         BH    @GL00010                                            0387
         C     @10,@CF00064                                        0387
         BNL   @RT00387                                            0387
@GL00010 L     @10,SCPPTR                                          0387
         L     @10,SCPCHAR(,@10)                                   0387
         CLC   SCPSTRNG(4,@10),@CC01351                            0387
         BNE   @RF00387                                            0387
@RT00387 DS    0H                                                  0388
*     DO;                           /* ADD MACRO TO THE LIST         */
*       MACSAVE=SCPSTRNG(1:SCPPMLN);/* SAVE THE NAME         @Z40SP00*/
         MVI   MACSAVE+1,C' '                                      0389
         MVC   MACSAVE+2(6),MACSAVE+1                              0389
         L     @10,SCPPTR                                          0389
         LH    @08,SCPPMLN(,@10)                                   0389
         BCTR  @08,0                                               0389
         L     @10,SCPCHAR(,@10)                                   0389
         EX    @08,@SM01460                                        0389
*       BUFBASE=ADDR(MACTBL);       /* SET TO BASE BUFFER            */
         LA    @10,MACTBL                                          0390
         ST    @10,BUFBASE                                         0390
*MACLOOP:                                                          0391
*       DO I=1 TO MACCTR;           /* LOOK AT ALL NAMES IN BUFFER   */
MACLOOP  LA    @10,1                                               0391
         B     @DE00391                                            0391
@DL00391 DS    0H                                                  0392
*         IF MACCALL(I)=MACSAVE     /* IS IT THE SAME NAME ?         */
*           THEN                                                   0392
         LR    @08,@10                                             0392
         SLA   @08,3                                               0392
         L     @01,BUFBASE                                         0392
         ALR   @01,@08                                             0392
         AL    @01,@CF01456                                        0392
         CLC   MACCALL-4(8,@01),MACSAVE                            0392
         BE    @RT00392                                            0392
*           RETURN;                 /* YES - RETURN TO SCAN          */
*       END;                                                       0394
         AL    @10,@CF00046                                        0394
@DE00391 STCM  @10,7,I                                             0394
         L     @08,BUFBASE                                         0394
         SLR   @15,@15                                             0394
         IC    @15,MACCTR(,@08)                                    0394
         CR    @10,@15                                             0394
         BNH   @DL00391                                            0394
*       IF MACCTR=MACLIM            /* OUT OF ROOM IN THIS BUFFER ?  */
*         THEN                                                     0395
         L     @10,BUFBASE                                         0395
         CLI   MACCTR(@10),10                                      0395
         BNE   @RF00395                                            0395
*         DO;                                                      0396
*           IF MACNXT^=ZERO         /* IS THERE A NEXT BUFFER ?      */
*             THEN                                                 0397
         SLR   @08,@08                                             0397
         ICM   @08,7,MACNXT(@10)                                   0397
         LTR   @08,@08                                             0397
         BZ    @RF00397                                            0397
*             DO;                                                  0398
*               BUFBASE=MACNXT;     /* POINT TO NEXT BUFFER          */
         ST    @08,BUFBASE                                         0399
*               GO TO MACLOOP;      /* YES - CONTINUE                */
         B     MACLOOP                                             0400
*             END;                                                 0401
*           ELSE                                                   0402
*             DO;                   /*                       @ZD00003*/
@RF00397 DS    0H                                                  0403
*               GEN(GETMAIN EC,LV=84,A=NXTBUF)                     0403
*               REFS(NXTBUF);       /*                       @Z40SP00*/
         GETMAIN EC,LV=84,A=NXTBUF
*               RFY                                                0404
*                 RTNCODE RSTD;     /*                       @Z67SP00*/
*               IF RTNCODE^=ZERO    /* IS STORAGE AVAILABLE ?        */
*                 THEN                                             0405
         LTR   RTNCODE,RTNCODE                                     0405
         BZ    @RF00405                                            0405
*                 DO;               /* NO - SET UP FOR ERROR         */
*                   EXCERR=ON;      /* SET ERROR INDICATOR           */
         OI    EXCERR,B'01000000'                                  0407
*                   SCPRET=SCPSTOP; /* STOP SCAN             @Z40SP00*/
         L     @14,SCPPTR                                          0408
         MVI   SCPRET(@14),X'08'                                   0408
*                   RETURN;         /* RETURN TO SCAN                */
@EL00005 DS    0H                                                  0409
@EF00005 DS    0H                                                  0409
@ER00005 LM    @14,@12,@SA00005                                    0409
         BR    @14                                                 0409
*                 END;                                             0410
*               RFY                                                0411
*                 RTNCODE UNRSTD;   /*                       @Z67SP00*/
@RF00405 DS    0H                                                  0412
*               MACNXT=NXTBUF;      /* CHAIN IN THE NEW BUFFER       */
         L     @10,NXTBUF                                          0412
         L     @08,BUFBASE                                         0412
         STCM  @10,7,MACNXT(@08)                                   0412
*               BUFBASE=MACNXT;     /* PICK UP ADDRESSABILITY        */
         ST    @10,BUFBASE                                         0413
*               MACCTR=ZERO;        /* RESET NAME COUNTER            */
         MVI   MACCTR(@10),X'00'                                   0414
*               MACNXT=ZERO;        /* AND ITS CHAIN POINTER         */
         SLR   @08,@08                                             0415
         STCM  @08,7,MACNXT(@10)                                   0415
*             END;                                                 0416
*         END;                                                     0417
*       MACCTR=MACCTR+1;            /* BUMP THE NAME COUNT           */
@RF00395 L     @10,BUFBASE                                         0418
         LA    @08,1                                               0418
         SLR   @15,@15                                             0418
         IC    @15,MACCTR(,@10)                                    0418
         ALR   @08,@15                                             0418
         STC   @08,MACCTR(,@10)                                    0418
*       MACCALL(MACCTR)=MACSAVE;    /* INSERT THE NAME               */
         SLA   @08,3                                               0419
         ALR   @10,@08                                             0419
         AL    @10,@CF01456                                        0419
         MVC   MACCALL-4(8,@10),MACSAVE                            0419
*     END;                                                         0420
*   ELSE                            /* INDICATE STOP SCAN            */
*     SCPRET=SCPNDSCN;              /* INDICATE NO MAC CALL  @Z40SP00*/
         B     @RC00387                                            0421
@RF00387 L     @10,SCPPTR                                          0421
         MVI   SCPRET(@10),X'04'                                   0421
*   END MACSV010;                   /* RETURN TO SCAN                */
         B     @EL00005                                            0422
         EJECT
*                                                                  0423
*   /*****************************************************************/
*   /*                                                               */
*   /* ROUTINE TO PRINT LINE IN ERROR DETECTED IN JCLIN SCAN.@SA72421*/
*   /* TWO POINTERS ARE RECEIVED. ONE POINTS TO THE LINE IN  @SA72421*/
*   /* ERROR RECORD. THE OTHER POINTS TO AN ACTION FIELD     @SA72421*/
*   /* DESCRIBING THE ACTION TAKEN.                          @SA72421*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0423
*HMAASMR:                           /* ERROR PRINT ROUTINE   @SA72421*/
*   PROC(LINE,ACTION);              /*                       @Z67SP00*/
HMAASMR  STM   @14,@12,@SA00006                                    0423
         MVC   @PC00006(8),0(@01)                                  0423
*   DCL                                                            0424
*     LINE CHAR(80);                /* LINE IN ERROR         @Z67SP00*/
*   DCL                                                            0425
*     ACTION CHAR(25);              /* ACTION/INFO TAKEN     @Z67SP00*/
*   DCL                                                            0426
*     ASMRBFSV PTR(31);             /* BUFF ADDRESS SAVE AREA      0426
*                                                            @SA72421*/
*   DCL                                                            0427
*     1 JCLINOUT,                   /* CORE AREA EQUATING TO HMASMPRL
*                                                            @SA72421*/
*       3 * CHAR(10),               /* HMASMPRL CONTROL AREA @SA72421*/
*       3 PRNTMAP CHAR(120),        /* PRINT LINE MAP        @SA72421*/
*         5 * CHAR(10) INIT('----------'),/* PREFIX          @SA72421*/
*         5 JCLINDAT CHAR(80),      /* LINE IN ERROR         @SA72421*/
*         5 * CHAR(5) INIT(' '),    /* SPACING               @SA72421*/
*         5 JCLINACT CHAR(25);      /* ACTION INFO           @SA72421*/
*   ASMRBFSV=IOPBUFAD;              /* SAVE BUFFER ADDRESS   @SA72421*/
         L     @10,IOPBUFAD(,IOPPTR)                               0428
         ST    @10,ASMRBFSV                                        0428
*   IOPBUFAD=ADDR(JCLINOUT);        /* EQUATE PRL TO JCLINOUT MAP  0429
*                                                            @SA72421*/
         LA    @10,JCLINOUT                                        0429
         ST    @10,IOPBUFAD(,IOPPTR)                               0429
*   JCLINDAT=LINE;                  /* FILL IN LINE IN ERROR @SA72421*/
         L     @08,@PC00006                                        0430
         MVC   JCLINDAT(80),LINE(@08)                              0430
*   JCLINACT=ACTION;                /* FILL IN ACTION INFO   @SA72421*/
         L     @08,@PC00006+4                                      0431
         MVC   JCLINACT(25),ACTION(@08)                            0431
*   PRLRLEN=LENGTH(PRNTMAP);        /* FILL IN LNGTH OF PRINT DATA 0432
*                                                            @SA72421*/
         MVC   PRLRLEN(2,@10),@CH01443                             0432
*   PRLFLGS=ZERO;                   /* RESET FLAGS           @Z40SP00*/
         MVI   PRLFLGS(@10),X'00'                                  0433
*   IOPDSID=IOPPRINT;               /* SET PRINT INDICATOR   @SA72421*/
         MVI   IOPDSID(IOPPTR),X'0B'                               0434
*   IOPFUNCT=IOPWRITE;              /* INDICATE WRITE OP     @SA72421*/
         MVI   IOPFUNCT(IOPPTR),X'51'                              0435
*   CALL HMASMIO(HMASMIOP);         /* WRITE LINE IN ERROR   @SA72421*/
         ST    IOPPTR,@AL00001                                     0436
         L     @15,@CV01381                                        0436
         LA    @01,@AL00001                                        0436
         BALR  @14,@15                                             0436
*   IOPBUFAD=ASMRBFSV;              /* RESTORE BUFFER ADDRESS      0437
*                                                            @SA72421*/
         L     @10,ASMRBFSV                                        0437
         ST    @10,IOPBUFAD(,IOPPTR)                               0437
*   RETURN CODE(IOPRETRN);          /* RETURN WITH IO CODE   @Z40SP00*/
         SLR   @15,@15                                             0438
         IC    @15,IOPRETRN(,IOPPTR)                               0438
         L     @14,@SA00006                                        0438
         LM    @00,@12,@SA00006+8                                  0438
         BR    @14                                                 0438
*   END HMAASMR;                    /*                       @SA72421*/
*   END HMASMASM                    /*                       @SA72421*/
*                                                                  0440
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (HMASMCCA)                                       */
*/*%INCLUDE SYSLIB  (HMASMIOP)                                       */
*/*%INCLUDE SYSLIB  (HMASMPRL)                                       */
*/*%INCLUDE SYSLIB  (HMASMSCP)                                       */
*/*%INCLUDE SYSLIB  (HMASMCRP)                                       */
*                                                                  0440
*       ;                                                          0440
@DATA    DS    0H
@CH00460 DC    H'9'
@CH01063 DC    H'71'
@CH00068 DC    H'80'
@CH01443 DC    H'120'
@SM01458 MVC   MODNAME(0),SCPSTRNG(@10)
@SM01460 MVC   MACSAVE(0),SCPSTRNG(@10)
         DS    0F
@SA00001 DS    18F
@PC00001 DS    4F
@SA00005 DS    15F
@SA00006 DS    0F
@PC00006 EQU   @SA00006+60
         DS    17F
@AL00001 DS    2A
@TF00001 DS    F
         DS    0F
@CF00046 DC    F'1'
@CH00046 EQU   @CF00046+2
@CF00064 DC    F'6'
@CF00041 DC    F'8'
@CF00648 DC    F'255'
@CF01456 DC    F'-4'
@CV01381 DC    V(HMASMIO)
@CV01382 DC    V(HMASMBUE)
@CV01383 DC    V(HMASMCRD)
@CV01384 DC    V(HMASMSCN)
         DS    0D
SCPPTR   DS    A
SEQNO    DS    F
SAVBUFAD DS    A
BUFBASE  DC    A(0)
NXTBUF   DC    A(0)
ASMRBFSV DS    A
         DS    CL1
K        DS    AL3
         DS    CL1
I        DS    AL3
ASMRTNCD DS    FL1
@CC01351 DC    C'CVT '
@CC01343 DC    C'/*'
@CC01345 DC    C'//'
@CC01347 DC    C'++'
         DS    CL5
SEQPACK  DS    CL8
MACSAVE  DS    CL8
MODNAME  DS    CL8
PATCHASM DS    CL80
         ORG   PATCHASM
@NM00179 DC    80X'FF'
         ORG   PATCHASM+80
MSGTXT   DS    CL25
MODERR   DC    CL25'ERR LOCATING MOD KEYWORD.'
LASTLINE DC    CL25'*****-LAST LINE PROCESSED'
MACTBLEX DC    CL25'MACRO TABLE EXCEEDED     '
ASMSCP   DS    CL26
SWITCHES DS    BL1
         ORG   SWITCHES
CONTINSW DS    BL1
EXCERR   EQU   SWITCHES+0
FOUND    EQU   SWITCHES+0
JCLENSW  EQU   SWITCHES+0
PREMSW   EQU   SWITCHES+0
@NM00180 EQU   SWITCHES+0
         ORG   SWITCHES+1
MACTBL   DS    CL84
JCLINOUT DS    CL130
         ORG   JCLINOUT
@NM00183 DS    CL10
PRNTMAP  DS    CL120
         ORG   PRNTMAP
@NM00184 DC    CL10'----------'
JCLINDAT DS    CL80
@NM00185 DC    CL5' '
JCLINACT DS    CL25
         ORG   JCLINOUT+130
HMASMASM CSECT
*      TABLES FOR JCL SCAN FOR MODULE NAME
*
MODK     DSCAN  KEY='MOD=',SUCC=MODSV,ALT=SYSPK
MODSV    DSCAN  ROUT=SAVMOD10
SYSPK    DSCAN  KEY='//SYSPUNCH',SUCC=DSNLOOK,ALT=SYSGO      @YA05006
SYSGO    DSCAN  KEY='//SYSGO',SUCC=DSNLOOK,ALT=SYSLIN        @YA05006
SYSLIN   DSCAN  KEY='//SYSLIN',SUCC=DSNLOOK,ALT=BUMP1        @YA05006
BUMP1    DSCAN  ROUT=BUMP010,SUCC=MODK,MINLEN=0
DSNLOOK  DSCAN  KEY='DSN=',SUCC=LPARENK,ALT=DSNLOOK2         @Z40SP00
DSNLOOK2 DSCAN  KEY='DSNAME=',SUCC=LPARENK,ALT=DDCONT1       @Z40SP00
DDCONT1  DSCAN  KEY='// ',SUCC=DSNLOOK,ALT=DDNEW1            @YA05006
DDNEW1   DSCAN  KEY='//',SUCC=SYSPK,ALT=BUMP2                @YA05006
BUMP2    DSCAN  ROUT=BUMP010,SUCC=DSNLOOK,MINLEN=0
LPARENK  DSCAN  KEY='(',ALT=BUMP3,SUCC=MODSV
BUMP3    DSCAN  ROUT=BUMP010,SUCC=LPARENK,MINLEN=0
*
*      TABLES FOR ASSEMBLER INPUT SCAN FOR MACRO NAMES
*
MACSTART DSCAN  KEY=' ',BLANKS=ON,SUCC=COPYSV,ALT=MLABELK     @XA10584
MLABELK  DSCAN  KEY='.',ALT=ASTERCK,SUCC=ASTERCK              @Z40SP00
ASTERCK  DSCAN  KEY='*',ALT=LABELK
LABELK   DSCAN  SUCC=OPSV,MINLEN=0,ROUT=LABELCK
COPYSV   DSCAN  KEY='COPY',ALT=OPSV,SUCC=OPSV                 @Z40SP00
OPSV     DSCAN  ROUT=MACSV010,MINLEN=0
HMASMASM CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
CCAPTR   EQU   @11
IOPPTR   EQU   @09
RTNCODE  EQU   @15
RTNREG   EQU   @14
HMASMCCA EQU   0
CCAFBUFR EQU   HMASMCCA+4
CCADSAD  EQU   CCAFBUFR+124
CCATPAD  EQU   CCAFBUFR+128
CCAFLAG7 EQU   CCAFBUFR+132
CCAFIOP  EQU   HMASMCCA+140
CCAIOPTR EQU   CCAFIOP
CCAFSYS  EQU   HMASMCCA+148
CCASREL  EQU   CCAFSYS+12
CCAFLAGA EQU   CCAFSYS+21
CCAFSTA  EQU   HMASMCCA+188
CCAFICT  EQU   HMASMCCA+192
CCAFPGM  EQU   HMASMCCA+208
CCABLDLP EQU   CCAFPGM
CCADBLDL EQU   CCAFPGM+4
CCAFGTP  EQU   HMASMCCA+224
CCASEGTP EQU   CCAFGTP
@NM00011 EQU   HMASMCCA+244
CCAFFUNC EQU   HMASMCCA+264
CCAFLAG1 EQU   CCAFFUNC+8
CCAFLAG2 EQU   CCAFFUNC+11
CCAFPROC EQU   HMASMCCA+276
CCAFLAG3 EQU   CCAFPROC
CCAFDIS  EQU   HMASMCCA+278
CCAFLAG4 EQU   CCAFDIS
CCAFLAG5 EQU   CCAFDIS+1
CCAFLAG6 EQU   CCAFDIS+2
CCAFCNV  EQU   HMASMCCA+281
CCAFLAG8 EQU   CCAFCNV
CCAFCTL  EQU   HMASMCCA+282
CCAFLAG9 EQU   CCAFCTL
CCAFDSNG EQU   HMASMCCA+298
CCAFLAGB EQU   CCAFDSNG
CCABLDLA EQU   0
@NM00027 EQU   CCABLDLA
CCABLDLL EQU   0
@NM00029 EQU   CCABLDLL
CCALKDRC EQU   @NM00029+20
@NM00031 EQU   CCABLDLL+124
CCAASMRC EQU   @NM00031+20
@NM00033 EQU   CCABLDLL+248
CCACPYRC EQU   @NM00033+20
@NM00035 EQU   CCABLDLL+372
CCACOMRC EQU   @NM00035+20
@NM00037 EQU   CCABLDLL+496
CCAZAPRC EQU   @NM00037+20
@NM00039 EQU   CCABLDLL+620
CCASUPRC EQU   @NM00039+20
@NM00041 EQU   CCABLDLL+744
CCAUPDRC EQU   @NM00041+20
CCABLDLM EQU   0
CCABELMT EQU   CCABLDLM+4
CCABMPOS EQU   CCABELMT
HMASMIOP EQU   0
IOPDSID  EQU   HMASMIOP
IOPFUNCT EQU   HMASMIOP+1
IOPRETRN EQU   HMASMIOP+2
IOPTYPE  EQU   HMASMIOP+3
IOPNAME  EQU   HMASMIOP+4
@NM00045 EQU   HMASMIOP+12
@NM00046 EQU   @NM00045
IOPDDNAM EQU   HMASMIOP+24
IOPBUFAD EQU   HMASMIOP+52
IOPDRMAP EQU   HMASMIOP+56
IOPINAME EQU   IOPDRMAP
IOPINAM  EQU   IOPINAME
IOPITYP  EQU   IOPINAM
IOPUSERL EQU   IOPDRMAP+11
IOPEND   EQU   IOPDRMAP+12
IOPLMCTL EQU   0
IOPQSMIF EQU   0
@NM00156 EQU   IOPQSMIF
IOPQSMLS EQU   IOPQSMIF+8
IOPQSMNM EQU   IOPQSMLS
IOPBS02  EQU   0
IOPBS04  EQU   0
IOPBAPF  EQU   IOPBS04
HMASMPRL EQU   0
PRLRLEN  EQU   HMASMPRL
PRLSPAN  EQU   HMASMPRL+2
PRLFLGS  EQU   PRLSPAN
PRLDATE  EQU   HMASMPRL+4
PRLTIME  EQU   HMASMPRL+7
PRLEND   EQU   HMASMPRL+10
HMASMSCP EQU   0
SCPCHAR  EQU   HMASMSCP
SCPSRCH  EQU   HMASMSCP+4
SCPIORTN EQU   HMASMSCP+12
SCPIOPAD EQU   HMASMSCP+16
SCPINLN  EQU   HMASMSCP+20
SCPPMLN  EQU   HMASMSCP+22
SCPEOR   EQU   HMASMSCP+24
SCPRETRN EQU   HMASMSCP+25
SCPRET   EQU   SCPRETRN
SCPSTRNG EQU   0
MACBUF   EQU   0
MACCTR   EQU   MACBUF
MACNXT   EQU   MACBUF+1
MACCALL  EQU   MACBUF+4
CCADSIDA EQU   0
CCATYPEA EQU   0
IOPBS01  EQU   0
IOPBS03  EQU   0
SCPIOPRM EQU   0
BUPPARM  EQU   0
BUPFUNCT EQU   BUPPARM
BUPTYPE  EQU   BUPPARM+1
BUPFLAGS EQU   BUPPARM+3
BUPIOPAD EQU   BUPPARM+12
HMASMCRP EQU   0
CRPSCPAD EQU   HMASMCRP+4
CRPINDS  EQU   HMASMCRP+8
CRPRETRN EQU   HMASMCRP+10
CRPFLG1  EQU   HMASMCRP+14
CRPFLG2  EQU   HMASMCRP+16
CRPINSW0 EQU   CRPFLG2
CRPINSW1 EQU   CRPFLG2
CRPINSW2 EQU   CRPFLG2
CRPINSW3 EQU   CRPFLG2
CRPBUFFR EQU   HMASMCRP+18
CRPBFCTL EQU   CRPBUFFR
CRPBFDTA EQU   CRPBFCTL
CRPBFCNT EQU   CRPBFCTL+71
BUFFER   EQU   0
MAXJCL   EQU   0
LINE     EQU   0
ACTION   EQU   0
IOPUDATA EQU   IOPEND
IOPINAM3 EQU   IOPINAME
@NM00052 EQU   IOPINAM3
IOPSTCMP EQU   IOPUDATA
IOPDYNDT EQU   IOPUDATA
IOPSPACE EQU   IOPDYNDT+44
IOPDTYPE EQU   IOPDYNDT+50
IOPNTMAX EQU   IOPDRMAP
IOPNTMAP EQU   IOPDRMAP
IOPCDMAP EQU   IOPNTMAP
IOPPTMAP EQU   IOPCDMAP
IOPSCMAP EQU   IOPPTMAP
IOPDIRCT EQU   IOPSCMAP+12
IOPCDMAX EQU   IOPDIRCT
IOPCQMAP EQU   IOPDRMAP
@NM00063 EQU   IOPUDATA
@NM00064 EQU   IOPUDATA
IOPASMNT EQU   IOPUDATA
IOPASMDR EQU   IOPASMNT
IOPNTLVL EQU   IOPASMDR
IOPABUNT EQU   IOPASMDR+1
IOPLMDNT EQU   IOPUDATA
IOPLMDDR EQU   IOPLMDNT
IOPLMLEP EQU   IOPLMDDR+1
IOPLMDF1 EQU   IOPLMLEP
IOPFLGS2 EQU   IOPLMDF1
IOPLMDF2 EQU   IOPLMLEP+1
IOPLMDF3 EQU   IOPLMLEP+2
IOPLMDF4 EQU   IOPLMLEP+3
IOPLMDF5 EQU   IOPLMDDR+5
IOPFLGS3 EQU   IOPLMDF5
IOPLMDFX EQU   IOPLMDNT+24
@NM00073 EQU   IOPLMDFX
IOPLNTRY EQU   IOPLMDFX+8
IOPLSYS  EQU   IOPLNTRY
IOPSYSLB EQU   IOPLSYS
IOPMACNT EQU   IOPUDATA
IOPMACDR EQU   IOPMACNT
IOPRMIDE EQU   IOPMACDR+1
IOPRMID  EQU   IOPRMIDE
IOPRMST  EQU   IOPRMIDE+7
IOPFMIDE EQU   IOPMACDR+9
IOPFMID  EQU   IOPFMIDE
IOPMCLNG EQU   IOPMACDR+17
IOPMACFX EQU   IOPMACNT+24
IOPBUNT  EQU   IOPMACFX
IOPMCSYS EQU   IOPMACFX+64
IOPMCDLB EQU   IOPMACFX+72
IOPMCEND EQU   IOPMACNT+104
IOPMACVR EQU   IOPMCEND
IOPMCENT EQU   IOPMACVR
IOPMCDTA EQU   IOPMCENT
IOPMCASM EQU   IOPMCDTA
IOPMACID EQU   IOPMCASM
IOPMACND EQU   IOPMACID
IOPMACST EQU   IOPMCASM+7
IOPMCIND EQU   IOPMCENT+8
IOPEOFNT EQU   IOPUDATA
IOPSRCNT EQU   IOPUDATA
IOPSRCDR EQU   IOPSRCNT
@NM00084 EQU   IOPSRCDR+1
@NM00086 EQU   @NM00084+7
@NM00090 EQU   IOPSRCDR+9
IOPSRCFX EQU   IOPSRCNT+24
@NM00094 EQU   IOPSRCFX
IOPSREND EQU   IOPSRCNT+104
IOPSRCVR EQU   IOPSREND
IOPSNTRY EQU   IOPSRCVR
IOPSRDTA EQU   IOPSNTRY
IOPSRCID EQU   IOPSRDTA
IOPSRCST EQU   IOPSRDTA+7
IOPMODNT EQU   IOPUDATA
IOPMODDR EQU   IOPMODNT
@NM00100 EQU   IOPMODDR+1
@NM00102 EQU   @NM00100+7
@NM00106 EQU   IOPMODDR+9
IOPMODFX EQU   IOPMODNT+24
@NM00110 EQU   IOPMODFX
IOPMDLEP EQU   IOPMODFX+8
IOPMODF1 EQU   IOPMDLEP
IOPMODF2 EQU   IOPMDLEP+1
IOPMODF3 EQU   IOPMDLEP+2
IOPMODF4 EQU   IOPMDLEP+3
IOPMDEND EQU   IOPMODNT+104
IOPMODVR EQU   IOPMDEND
IOPMNTRY EQU   IOPMODVR
IOPMDDTA EQU   IOPMNTRY
IOPLMODS EQU   IOPMDDTA
IOPMODID EQU   IOPLMODS
IOPMODST EQU   IOPLMODS+7
IOPDLBNT EQU   IOPUDATA
IOPDLBDR EQU   IOPDLBNT
IOPDLBFX EQU   IOPDLBNT+24
@NM00121 EQU   IOPDLBFX
IOPDLEND EQU   IOPDLBNT+104
IOPDLBVR EQU   IOPDLEND
IOPDNTRY EQU   IOPDLBVR
IOPDSYS  EQU   IOPDNTRY
IOPSYSNT EQU   IOPUDATA
IOPSYSDR EQU   IOPSYSNT
IOPSYSF1 EQU   IOPSYSDR+4
IOPFLGS7 EQU   IOPSYSF1
IOPSYSFX EQU   IOPSYSNT+24
@NM00128 EQU   IOPSYSFX
IOPSYEND EQU   IOPSYSNT+184
IOPSYSVR EQU   IOPSYEND
IOPSYSTR EQU   IOPSYSVR
IOPSYNTR EQU   IOPSYSTR
IOPPTFNT EQU   IOPUDATA
IOPPTFDR EQU   IOPPTFNT
IOPPSTAT EQU   IOPPTFDR+2
IOPPTFF1 EQU   IOPPSTAT
IOPFLGS5 EQU   IOPPTFF1
IOPPTFF2 EQU   IOPPSTAT+1
IOPPTFF3 EQU   IOPPSTAT+3
IOPPTFFX EQU   IOPPTFNT+24
@NM00137 EQU   IOPPTFFX
@NM00138 EQU   @NM00137
IOPPDTES EQU   IOPPTFFX+41
@NM00141 EQU   IOPPDTES
IOPPTPFX EQU   IOPPDTES+6
IOPDATES EQU   IOPPTPFX
IOPPTEND EQU   IOPPTFNT+104
IOPPTFVR EQU   IOPPTEND
IOPPNTRY EQU   IOPPTFVR
IOPPMODS EQU   IOPPNTRY
IOPENTNT EQU   IOPUDATA+104
IOPSRLNT EQU   IOPUDATA+104
IOPPRENT EQU   IOPUDATA+104
IOPNPRNT EQU   IOPUDATA+104
IOPSUPNT EQU   IOPUDATA+104
IOPREQNT EQU   IOPUDATA+104
IOPIRQNT EQU   IOPUDATA+104
IOPFIDNT EQU   IOPUDATA+104
IOPDELNT EQU   IOPUDATA+104
IOPVERNT EQU   IOPUDATA+104
IOPSBYNT EQU   IOPUDATA+104
IOPQSMNT EQU   IOPUDATA
IOPQSMDR EQU   IOPQSMNT
IOPQFMNT EQU   IOPUDATA
IOPQFMDR EQU   IOPQFMNT
IOPQFEND EQU   IOPQFMNT+2
IOPQFMVR EQU   IOPQFEND
IOPQFMLS EQU   IOPQFMVR
IOPQFMNM EQU   IOPQFMLS
IOPPTSYS EQU   IOPUDATA
IOPPTSDR EQU   IOPPTSYS
IOPPTSFX EQU   IOPPTSYS+24
IOPDSSPC EQU   IOPPTSFX
IOPPTFG1 EQU   IOPPTSFX+34
IOPPSEND EQU   IOPPTSYS+1064
IOPPTSVR EQU   IOPPSEND
IOPPTNTR EQU   IOPPTSVR
@NM00166 EQU   IOPPTNTR
IOPPTFMD EQU   @NM00166
IOPPTREL EQU   IOPPTFMD
IOPBPDS  EQU   IOPUDATA
IOPBLEP1 EQU   IOPBPDS+8
IOPBLEP2 EQU   IOPBPDS+9
@NM00170 EQU   IOPBPDS+18
IOPBFTB0 EQU   @NM00170
IOPBFTB1 EQU   IOPBFTB0
ASMREC   EQU   CRPBUFFR
SEQUENCE EQU   ASMREC+72
LASTDIG  EQU   SEQUENCE+7
PRLDATA  EQU   PRLEND
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
@NM00182 EQU   SEQUENCE
@NM00181 EQU   ASMREC
IOPBCEND EQU   IOPBPDS+21
IOPBFTB3 EQU   IOPBFTB0+2
IOPBFTB2 EQU   IOPBFTB0+1
@NM00172 EQU   IOPBFTB1
IOPBAPFP EQU   IOPBFTB1
IOPBSSI  EQU   IOPBFTB1
IOPBPAGA EQU   IOPBFTB1
@NM00171 EQU   IOPBFTB1
IOPBAOSL EQU   IOPBFTB1
IOPBSEPA EQU   IOPBPDS+15
IOPBFTBL EQU   IOPBPDS+13
IOPBSTOR EQU   IOPBPDS+10
IOPBREFR EQU   IOPBLEP2
IOPBLEF  EQU   IOPBLEP2
IOPBTEST EQU   IOPBLEP2
IOPBNE   EQU   IOPBLEP2
@NM00169 EQU   IOPBLEP2
IOPBDC   EQU   IOPBLEP2
@NM00168 EQU   IOPBLEP1
IOPBSCTR EQU   IOPBLEP1
IOPBOL   EQU   IOPBLEP1
@NM00167 EQU   IOPBLEP1
IOPBOVLY EQU   IOPBLEP1
IOPBREUS EQU   IOPBLEP1
IOPBRENT EQU   IOPBLEP1
IOPBNL   EQU   IOPBPDS+7
IOPBTTRN EQU   IOPBPDS+4
IOPBZERO EQU   IOPBPDS+3
IOPBTTRT EQU   IOPBPDS
IOPPTIND EQU   IOPPTNTR+8
IOPPTSND EQU   IOPPTREL
@NM00165 EQU   IOPPTSFX+872
IOPSYZPP EQU   IOPPTSFX+772
IOPSYZPR EQU   IOPPTSFX+771
IOPSYZPS EQU   IOPPTSFX+763
IOPSYZAP EQU   IOPPTSFX+755
IOPSYUPP EQU   IOPPTSFX+655
IOPSYUPR EQU   IOPPTSFX+654
IOPSYUPS EQU   IOPPTSFX+646
IOPSYUPD EQU   IOPPTSFX+638
IOPSYSPP EQU   IOPPTSFX+538
IOPSYSPR EQU   IOPPTSFX+537
IOPSYSPS EQU   IOPPTSFX+529
IOPSYSUP EQU   IOPPTSFX+521
IOPSYLKP EQU   IOPPTSFX+421
IOPSYLKR EQU   IOPPTSFX+420
IOPSYLKS EQU   IOPPTSFX+412
IOPSYLKD EQU   IOPPTSFX+404
IOPSYCPP EQU   IOPPTSFX+304
IOPSYCPR EQU   IOPPTSFX+303
IOPSYCPS EQU   IOPPTSFX+295
IOPSYCPY EQU   IOPPTSFX+287
IOPSYCOP EQU   IOPPTSFX+187
IOPSYCOR EQU   IOPPTSFX+186
IOPSYCOS EQU   IOPPTSFX+178
IOPSYCOM EQU   IOPPTSFX+170
IOPSYASP EQU   IOPPTSFX+70
IOPSYASR EQU   IOPPTSFX+69
IOPSYASS EQU   IOPPTSFX+61
IOPSYASM EQU   IOPPTSFX+53
@NM00164 EQU   IOPPTSFX+35
@NM00163 EQU   IOPPTFG1
IOPPTSNJ EQU   IOPPTFG1
IOPPTSNP EQU   IOPPTFG1
IOPSYPLN EQU   IOPPTSFX+32
IOPDSPFX EQU   IOPPTSFX+6
IOPDSDIR EQU   IOPDSSPC+4
IOPDSSEC EQU   IOPDSSPC+2
IOPDSPRM EQU   IOPDSSPC
@NM00162 EQU   IOPPTSDR+4
IOPPTPEM EQU   IOPPTSDR+2
IOPPCNVL EQU   IOPPTSDR+1
@NM00161 EQU   IOPPTSDR
IOPQFMTP EQU   IOPQFMLS+8
@NM00160 EQU   IOPQFMLS+7
IOPQFMND EQU   IOPQFMNM
@NM00159 EQU   IOPQFMDR
@NM00155 EQU   IOPQSMDR
@NM00154 EQU   IOPSBYNT+8
IOPSBYST EQU   IOPSBYNT+7
IOPSBYNM EQU   IOPSBYNT
@NM00153 EQU   IOPVERNT+8
IOPVERST EQU   IOPVERNT+7
IOPVERNM EQU   IOPVERNT
@NM00152 EQU   IOPDELNT+8
IOPDELST EQU   IOPDELNT+7
IOPDELNM EQU   IOPDELNT
@NM00151 EQU   IOPFIDNT+8
IOPFIDST EQU   IOPFIDNT+7
IOPFIDNM EQU   IOPFIDNT
@NM00150 EQU   IOPIRQNT+8
IOPIRQST EQU   IOPIRQNT+7
IOPIRQNM EQU   IOPIRQNT
@NM00149 EQU   IOPREQNT+8
IOPREQST EQU   IOPREQNT+7
IOPREQNM EQU   IOPREQNT
@NM00148 EQU   IOPSUPNT+8
IOPSUPST EQU   IOPSUPNT+7
IOPSUPNM EQU   IOPSUPNT
@NM00147 EQU   IOPNPRNT+8
IOPNPRST EQU   IOPNPRNT+7
IOPNPRNM EQU   IOPNPRNT
@NM00146 EQU   IOPPRENT+8
IOPPREST EQU   IOPPRENT+7
IOPPRENM EQU   IOPPRENT
@NM00145 EQU   IOPSRLNT+8
IOPSRLST EQU   IOPSRLNT+7
@NM00144 EQU   IOPSRLNT+4
IOPSRLNM EQU   IOPSRLNT
@NM00143 EQU   IOPENTNT+8
IOPENTST EQU   IOPENTNT+7
IOPENTNM EQU   IOPENTNT
IOPPIND  EQU   IOPPNTRY+8
IOPPTFND EQU   IOPPMODS
IOPPFMID EQU   IOPPTFFX+73
@NM00142 EQU   IOPPTPFX+24
IOPUCLT  EQU   IOPDATES+21
IOPUCLD  EQU   IOPDATES+18
IOPACCT  EQU   IOPDATES+15
IOPACCD  EQU   IOPDATES+12
IOPRSTT  EQU   IOPDATES+9
IOPRSTD  EQU   IOPDATES+6
IOPAPPT  EQU   IOPDATES+3
IOPAPPD  EQU   IOPDATES
IOPRECT  EQU   @NM00141+3
IOPRECD  EQU   @NM00141
@NM00140 EQU   IOPPTFFX+8
@NM00139 EQU   @NM00137+7
IOPPRELN EQU   @NM00138
@NM00136 EQU   IOPPTFDR+20
IOPSBYNO EQU   IOPPTFDR+13
IOPDBYNO EQU   IOPPTFDR+6
@NM00135 EQU   IOPPTFF3
IOPFLF   EQU   IOPPTFF3
IOPDBYP  EQU   IOPPTFF3
IOPSBYP  EQU   IOPPTFF3
IOPPMDLP EQU   IOPPTFF2+1
IOPPADDP EQU   IOPPTFF2+1
@NM00134 EQU   IOPPTFF2+1
IOPLRFP  EQU   IOPPTFF2
IOPJCLP  EQU   IOPPTFF2
IOPSUPP  EQU   IOPPTFF2
IOPREQP  EQU   IOPPTFF2
IOPPREP  EQU   IOPPTFF2
IOPNPRP  EQU   IOPPTFF2
IOPIRQP  EQU   IOPPTFF2
IOPDELP  EQU   IOPPTFF2
IOPREGEN EQU   IOPFLGS5
IOPBYP   EQU   IOPFLGS5
IOPDUMMP EQU   IOPFLGS5
@NM00133 EQU   IOPFLGS5
IOPERROR EQU   IOPFLGS5
IOPACC   EQU   IOPFLGS5
IOPRES   EQU   IOPFLGS5
IOPAPP   EQU   IOPFLGS5
IOPPTYPE EQU   IOPPTFDR+1
@NM00132 EQU   IOPPTFDR
IOPSYSTP EQU   IOPSYSTR+8
IOPSYSND EQU   IOPSYNTR
@NM00131 EQU   IOPSYSFX+21
IOPSYSID EQU   IOPSYSFX+13
IOPNUCID EQU   IOPSYSFX+12
IOPSREL  EQU   IOPSYSFX+8
@NM00130 EQU   @NM00128+7
@NM00129 EQU   @NM00128
@NM00127 EQU   IOPSYSDR+5
@NM00126 EQU   IOPFLGS7
IOPSYNG  EQU   IOPFLGS7
IOPSYDL  EQU   IOPFLGS7
IOPSTSNP EQU   IOPFLGS7
IOPMTSNP EQU   IOPFLGS7
IOPPEMAX EQU   IOPSYSDR+2
IOPSCNVL EQU   IOPSYSDR+1
@NM00125 EQU   IOPSYSDR
IOPDLIND EQU   IOPDNTRY+8
IOPDLBND EQU   IOPDSYS
@NM00124 EQU   IOPDLBFX+8
@NM00123 EQU   @NM00121+7
@NM00122 EQU   @NM00121
@NM00120 EQU   IOPDLBDR+1
@NM00119 EQU   IOPDLBDR
IOPMDIND EQU   IOPMNTRY+8
@NM00118 EQU   IOPMODST
IOPMODND EQU   IOPMODID
IOPDLIB  EQU   IOPMODFX+72
@NM00117 EQU   IOPMODFX+12
@NM00116 EQU   IOPMODF4
@NM00115 EQU   IOPMODF3
@NM00114 EQU   IOPMODF2
IOPMPAGA EQU   IOPMODF2
IOPMNE   EQU   IOPMODF2
@NM00113 EQU   IOPMODF1
IOPMDC   EQU   IOPMODF1
IOPMREFR EQU   IOPMODF1
IOPMOVLY EQU   IOPMODF1
IOPMSCTR EQU   IOPMODF1
IOPMREUS EQU   IOPMODF1
IOPMRENT EQU   IOPMODF1
IOPMAPF  EQU   IOPMODF1
@NM00112 EQU   @NM00110+7
@NM00111 EQU   @NM00110
@NM00109 EQU   IOPMODDR+17
@NM00108 EQU   @NM00106+7
@NM00107 EQU   @NM00106
@NM00105 EQU   @NM00102
@NM00104 EQU   @NM00102
@NM00103 EQU   @NM00102
@NM00101 EQU   @NM00100
@NM00099 EQU   IOPMODDR
IOPSRIND EQU   IOPSNTRY+8
@NM00098 EQU   IOPSRCST
IOPSRCND EQU   IOPSRCID
IOPSRDLB EQU   IOPSRCFX+72
IOPSRSYS EQU   IOPSRCFX+64
@NM00097 EQU   IOPSRCFX+8
@NM00096 EQU   @NM00094+7
@NM00095 EQU   @NM00094
@NM00093 EQU   IOPSRCDR+18
IOPSRLNG EQU   IOPSRCDR+17
@NM00092 EQU   @NM00090+7
@NM00091 EQU   @NM00090
@NM00089 EQU   @NM00086
@NM00088 EQU   @NM00086
@NM00087 EQU   @NM00086
@NM00085 EQU   @NM00084
@NM00083 EQU   IOPSRCDR
IOPEOFND EQU   IOPEOFNT
IOPMCTYP EQU   IOPMCIND
@NM00082 EQU   IOPMACST
@NM00081 EQU   IOPMACFX+8
IOPBUTYP EQU   IOPBUNT+7
IOPBUSMD EQU   IOPBUNT
@NM00080 EQU   IOPMACDR+18
IOPFMST  EQU   IOPFMIDE+7
@NM00079 EQU   IOPRMST
IOPRMASM EQU   IOPRMST
@NM00078 EQU   IOPRMST
@NM00077 EQU   IOPMACDR
IOPLMIND EQU   IOPLNTRY+8
IOPLMDND EQU   IOPSYSLB
@NM00075 EQU   @NM00073+7
@NM00074 EQU   @NM00073
@NM00072 EQU   IOPLMDDR+6
@NM00071 EQU   IOPFLGS3
IOPCHREP EQU   IOPFLGS3
IOPLINK  EQU   IOPFLGS3
IOPCOPY  EQU   IOPFLGS3
@NM00070 EQU   IOPLMDF4
@NM00069 EQU   IOPLMDF3
@NM00068 EQU   IOPLMDF2
IOPPAGA  EQU   IOPLMDF2
IOPNE    EQU   IOPLMDF2
@NM00067 EQU   IOPFLGS2
IOPDC    EQU   IOPFLGS2
IOPREFR  EQU   IOPFLGS2
IOPOVLY  EQU   IOPFLGS2
IOPSCTR  EQU   IOPFLGS2
IOPREUS  EQU   IOPFLGS2
IOPRENT  EQU   IOPFLGS2
IOPAPF   EQU   IOPFLGS2
@NM00066 EQU   IOPLMDDR
@NM00065 EQU   IOPASMDR+9
IOPABUTP EQU   IOPABUNT+7
IOPABUPT EQU   IOPABUNT
IOPALLOC EQU   @NM00064+4
IOPUSED  EQU   @NM00064
IOPTPSEQ EQU   @NM00063+8
IOPVLSER EQU   @NM00063+2
IOPBLKSI EQU   @NM00063
IOPCQMAX EQU   IOPCQMAP+12
@NM00062 EQU   IOPCQMAP+11
@NM00061 EQU   IOPCQMAP+8
@NM00060 EQU   IOPCQMAP
IOPPTMAX EQU   IOPCDMAX
@NM00059 EQU   IOPSCMAP+11
@NM00058 EQU   IOPSCMAP+8
@NM00057 EQU   IOPSCMAP
IOPDIRMX EQU   IOPNTMAX+12
@NM00056 EQU   IOPNTMAX+11
@NM00055 EQU   IOPNTMAX+8
@NM00054 EQU   IOPNTMAX
@NM00053 EQU   IOPDTYPE
IOPDMOD  EQU   IOPDTYPE
IOPDJCL  EQU   IOPDTYPE
IOPDSRC  EQU   IOPDTYPE
IOPDMAC  EQU   IOPDTYPE
IOPSDIR  EQU   IOPSPACE+4
IOPSSCND EQU   IOPSPACE+2
IOPSPRIM EQU   IOPSPACE
IOPDSN   EQU   IOPDYNDT
IOPNTYPE EQU   IOPSTCMP+17
IOPNNAME EQU   IOPSTCMP+9
IOPOTYPE EQU   IOPSTCMP+8
IOPONAME EQU   IOPSTCMP
IOPISEQ3 EQU   IOPINAM3+6
IOPITYP3 EQU   @NM00052+5
IOPIPTF3 EQU   @NM00052
CRPDDNAM EQU   HMASMCRP+98
CRPBFSEQ EQU   CRPBUFFR+72
CRPINSWF EQU   CRPFLG2+1
CRPINSWE EQU   CRPFLG2+1
CRPINSWD EQU   CRPFLG2+1
CRPINSWC EQU   CRPFLG2+1
CRPINSWB EQU   CRPFLG2+1
CRPINSWA EQU   CRPFLG2+1
CRPINSW9 EQU   CRPFLG2+1
CRPINSW8 EQU   CRPFLG2+1
CRPINSW7 EQU   CRPFLG2
CRPINSW6 EQU   CRPFLG2
CRPINSW5 EQU   CRPFLG2
CRPINSW4 EQU   CRPFLG2
CRPEOF1  EQU   CRPINSW3
CRPWRTLG EQU   CRPINSW2
CRPEXADD EQU   CRPINSW1
CRPEOFSW EQU   CRPINSW0
@NM00178 EQU   CRPFLG1+1
CRPRPT   EQU   CRPFLG1+1
CRPLIST  EQU   CRPFLG1+1
CRPNOWPP EQU   CRPFLG1+1
CRPTRMEX EQU   CRPFLG1+1
CRPEOFEN EQU   CRPFLG1+1
CRPSCNCL EQU   CRPFLG1
CRPOFFST EQU   CRPFLG1
CRPOTHER EQU   CRPFLG1
CRPPRINT EQU   CRPFLG1
CRPLOG   EQU   CRPFLG1
CRPPTS   EQU   CRPFLG1
CRPLOGCK EQU   CRPFLG1
CRPBFPRM EQU   CRPFLG1
@NM00177 EQU   HMASMCRP+11
CRPOUTDS EQU   HMASMCRP+9
@NM00176 EQU   HMASMCRP+1
CRPUXNUM EQU   HMASMCRP
BUPGTPAD EQU   BUPPARM+16
@NM00002 EQU   BUPPARM+11
BUPSYSMD EQU   BUPPARM+4
@NM00001 EQU   BUPFLAGS
BUPREDO  EQU   BUPFLAGS
BUPSTYPE EQU   BUPPARM+2
@NM00175 EQU   SCPEOR
SCPNORT  EQU   SCPEOR
SCPNOSUC EQU   SCPEOR
SCPRTERR EQU   SCPEOR
SCPCOMNT EQU   SCPEOR
SCPNOCT  EQU   SCPEOR
SCPCONT  EQU   SCPEOR
SCPWKAR  EQU   HMASMSCP+8
PRLCONC  EQU   PRLTIME+2
@NM00174 EQU   PRLTIME
PRLHDADR EQU   PRLDATE
@NM00173 EQU   PRLFLGS
PRLBLANK EQU   PRLFLGS
PRLHEADO EQU   PRLFLGS
PRLHEAD  EQU   PRLFLGS
IOPBS04E EQU   IOPBS04+2
IOPBAPFC EQU   IOPBAPF+1
IOPBAPFL EQU   IOPBAPF
IOPBS2NM EQU   IOPBS02+3
IOPBS2EP EQU   IOPBS02
IOPQSMTP EQU   IOPQSMLS+8
@NM00158 EQU   IOPQSMLS+7
IOPQSMND EQU   IOPQSMNM
@NM00157 EQU   @NM00156+7
IOPQSMFM EQU   @NM00156
@NM00076 EQU   IOPLMCTL+17
IOPLMCRD EQU   IOPLMCTL+9
IOPLMCRN EQU   IOPLMCTL+1
IOPLMCC  EQU   IOPLMCTL
@NM00051 EQU   IOPUSERL
@NM00050 EQU   IOPUSERL
IOPALIS  EQU   IOPUSERL
IOPTTR   EQU   IOPDRMAP+8
IOPINAM2 EQU   IOPINAM+1
IOPITYP2 EQU   IOPITYP
@NM00049 EQU   HMASMIOP+32
IOPDELDD EQU   IOPDDNAM
@NM00048 EQU   @NM00045+10
IOPSEQNO EQU   @NM00045+8
@NM00047 EQU   @NM00046+7
IOPPTFNM EQU   @NM00046
IOPNAM17 EQU   IOPNAME
CCABMREC EQU   CCABELMT+10
CCABPOS  EQU   CCABMPOS+8
CCABNAME EQU   CCABMPOS
@NM00044 EQU   CCABLDLM+2
@NM00043 EQU   CCABLDLM
CCAUPDPM EQU   @NM00041+24
@NM00042 EQU   @NM00041+21
CCARUPDT EQU   CCAUPDRC
CCAUPDSP EQU   @NM00041+12
CCAUPDTE EQU   @NM00041+8
CCAUPDNM EQU   @NM00041
CCASUPPM EQU   @NM00039+24
@NM00040 EQU   @NM00039+21
CCARSUP  EQU   CCASUPRC
CCASUPSP EQU   @NM00039+12
CCAIOSUP EQU   @NM00039+8
CCASUPNM EQU   @NM00039
CCAZAPPM EQU   @NM00037+24
@NM00038 EQU   @NM00037+21
CCARZAP  EQU   CCAZAPRC
CCAZAPSP EQU   @NM00037+12
CCASPZAP EQU   @NM00037+8
CCAZAPNM EQU   @NM00037
CCACOMPM EQU   @NM00035+24
@NM00036 EQU   @NM00035+21
CCARCOMP EQU   CCACOMRC
CCACOMSP EQU   @NM00035+12
CCACOMRS EQU   @NM00035+8
CCACOMNM EQU   @NM00035
CCACPYPM EQU   @NM00033+24
@NM00034 EQU   @NM00033+21
CCARCOPY EQU   CCACPYRC
CCACPYSP EQU   @NM00033+12
CCACOPY  EQU   @NM00033+8
CCACPYNM EQU   @NM00033
CCAASMPM EQU   @NM00031+24
@NM00032 EQU   @NM00031+21
CCARASM  EQU   CCAASMRC
CCAASMSP EQU   @NM00031+12
CCAASM   EQU   @NM00031+8
CCAASMNM EQU   @NM00031
CCALKDPM EQU   @NM00029+24
@NM00030 EQU   @NM00029+21
CCARLINK EQU   CCALKDRC
CCALKDSP EQU   @NM00029+12
CCALKED  EQU   @NM00029+8
CCALKDNM EQU   @NM00029
CCAPGMPM EQU   @NM00027+24
@NM00028 EQU   @NM00027+21
CCABPGRC EQU   @NM00027+20
CCABPGSP EQU   @NM00027+12
CCABPGAD EQU   @NM00027+8
CCABPGNM EQU   @NM00027
CCAEND   EQU   HMASMCCA+371
@NM00026 EQU   HMASMCCA+309
CCACURDD EQU   CCAFDSNG+3
CCACURDS EQU   CCAFDSNG+2
@NM00025 EQU   CCAFLAGB
CCAOUTNG EQU   CCAFLAGB
CCALOGNG EQU   CCAFLAGB
CCAFMID  EQU   HMASMCCA+291
CCALSTDS EQU   CCAFCTL+8
CCARPTDS EQU   CCAFCTL+7
CCATIME  EQU   CCAFCTL+4
CCADATE  EQU   CCAFCTL+1
@NM00024 EQU   CCAFLAG9
CCARVCAN EQU   CCAFLAG9
CCARVEST EQU   CCAFLAG9
CCAPTSNJ EQU   CCAFLAG9
CCASTSNP EQU   CCAFLAG9
CCAMTSNP EQU   CCAFLAG9
CCAPTSNP EQU   CCAFLAG9
@NM00023 EQU   CCAFLAG8
CCAACDSC EQU   CCAFLAG8
CCACDSC  EQU   CCAFLAG8
@NM00022 EQU   CCAFLAG6
CCAACRUP EQU   CCAFLAG6
CCACRQUP EQU   CCAFLAG6
CCAACDUP EQU   CCAFLAG6
CCACDSUP EQU   CCAFLAG6
@NM00021 EQU   CCAFLAG5
CCAACROS EQU   CCAFLAG5
CCACRQOS EQU   CCAFLAG5
CCAACDOS EQU   CCAFLAG5
CCACDSOS EQU   CCAFLAG5
@NM00020 EQU   CCAFLAG4
CCAACRIS EQU   CCAFLAG4
CCACRQIS EQU   CCAFLAG4
CCAACDIS EQU   CCAFLAG4
CCACDSIS EQU   CCAFLAG4
@NM00019 EQU   CCAFLAG3+1
CCARGNP  EQU   CCAFLAG3+1
CCADISRQ EQU   CCAFLAG3+1
CCAICTOK EQU   CCAFLAG3
CCADELP  EQU   CCAFLAG3
CCACMPRS EQU   CCAFLAG3
CCAZAPP  EQU   CCAFLAG3
CCALINKP EQU   CCAFLAG3
CCACOPYP EQU   CCAFLAG3
CCAASIP  EQU   CCAFLAG3
CCAUPDP  EQU   CCAFLAG3
CCAEOSMP EQU   CCAFLAG2
CCAEOFNC EQU   CCAFLAG2
@NM00018 EQU   CCAFLAG2
CCACHECK EQU   CCAFLAG2
CCATERM  EQU   CCAFLAG2
CCASVCLB EQU   CCAFLAG2
CCANCPTF EQU   CCAFLAG2
@NM00017 EQU   CCAFLAG1+1
CCAUNL   EQU   CCAFLAG1+1
CCARESET EQU   CCAFLAG1+1
CCALOG   EQU   CCAFLAG1+1
CCACNV   EQU   CCAFLAG1+1
CCALIST  EQU   CCAFLAG1
CCAUPDU  EQU   CCAFLAG1
CCAUPDJ  EQU   CCAFLAG1
CCARES   EQU   CCAFLAG1
CCAREJ   EQU   CCAFLAG1
CCAACCPT EQU   CCAFLAG1
CCAAPPLY EQU   CCAFLAG1
CCAREC   EQU   CCAFLAG1
CCAFUNCT EQU   CCAFFUNC
@NM00016 EQU   @NM00011+18
@NM00015 EQU   @NM00011+16
CCATBLPA EQU   @NM00011+12
@NM00014 EQU   @NM00011+8
@NM00013 EQU   @NM00011+4
@NM00012 EQU   @NM00011
CCAIFGTP EQU   CCAFGTP+16
CCAGTP3  EQU   CCAFGTP+12
CCAGTP2  EQU   CCAFGTP+8
CCAGTP1  EQU   CCAFGTP+4
CCASETAD EQU   CCASEGTP
CCACLST  EQU   CCAFPGM+12
CCASPDCB EQU   CCAFPGM+8
CCAICLMD EQU   CCAFICT+12
CCAICMOD EQU   CCAFICT+8
CCAICPTF EQU   CCAFICT+4
CCAICT   EQU   CCAFICT
CCARVAD  EQU   CCAFSTA
CCAACDID EQU   CCAFSYS+32
CCACDSID EQU   CCAFSYS+24
CCALNLEN EQU   CCAFSYS+22
@NM00010 EQU   CCAFLAGA
CCAPSYSF EQU   CCAFLAGA
CCAASYSF EQU   CCAFLAGA
CCACSYSF EQU   CCAFLAGA
CCANUCID EQU   CCAFSYS+20
CCAASREL EQU   CCAFSYS+16
CCACSREL EQU   CCASREL
CCAPEMAX EQU   CCAFSYS+10
CCAPGLEN EQU   CCAFSYS+8
CCAIOPAS EQU   CCAFSYS+4
CCAIOPCS EQU   CCAFSYS
CCAPESIZ EQU   CCAFIOP+4
@NM00009 EQU   CCAFLAG7+3
CCALOGP  EQU   CCAFLAG7+2
CCAOUTP  EQU   CCAFLAG7+2
CCASLBP  EQU   CCAFLAG7+2
CCARPTP  EQU   CCAFLAG7+2
CCALISTP EQU   CCAFLAG7+2
CCAJCLP  EQU   CCAFLAG7+2
CCAPTFP  EQU   CCAFLAG7+2
CCATLBP  EQU   CCAFLAG7+2
CCAUT3P  EQU   CCAFLAG7+1
CCAUT2P  EQU   CCAFLAG7+1
CCAUT1P  EQU   CCAFLAG7+1
CCAWK5P  EQU   CCAFLAG7+1
CCAWK4P  EQU   CCAFLAG7+1
CCAWK3P  EQU   CCAFLAG7+1
CCAWK2P  EQU   CCAFLAG7+1
CCAWK1P  EQU   CCAFLAG7+1
CCAACRQP EQU   CCAFLAG7
CCACRQP  EQU   CCAFLAG7
CCASTSP  EQU   CCAFLAG7
CCAMTSP  EQU   CCAFLAG7
CCAPTSP  EQU   CCAFLAG7
CCASCDSP EQU   CCAFLAG7
CCAACDSP EQU   CCAFLAG7
CCACDSP  EQU   CCAFLAG7
@NM00008 EQU   CCAFBUFR+122
@NM00007 EQU   CCAFBUFR+120
@NM00006 EQU   CCAFBUFR+118
CCATBFMX EQU   CCAFBUFR+116
CCA4BFMX EQU   CCAFBUFR+114
CCA3BFMX EQU   CCAFBUFR+112
CCA2BFMX EQU   CCAFBUFR+110
CCA1BFMX EQU   CCAFBUFR+108
CCAXBFMX EQU   CCAFBUFR+106
CCAQBFMX EQU   CCAFBUFR+104
CCASBFMX EQU   CCAFBUFR+102
CCAMBFMX EQU   CCAFBUFR+100
CCAPBFMX EQU   CCAFBUFR+98
CCAVBFMX EQU   CCAFBUFR+96
CCAABFMX EQU   CCAFBUFR+94
CCACBFMX EQU   CCAFBUFR+92
@NM00005 EQU   CCAFBUFR+88
@NM00004 EQU   CCAFBUFR+84
CCA4BFSZ EQU   CCAFBUFR+80
CCATBFSZ EQU   CCAFBUFR+76
CCAWBFSZ EQU   CCAFBUFR+72
CCAQBFSZ EQU   CCAFBUFR+68
CCAPBFSZ EQU   CCAFBUFR+64
CCAVBFSZ EQU   CCAFBUFR+60
CCACBFSZ EQU   CCAFBUFR+56
@NM00003 EQU   CCAFBUFR+52
CCA4BFOA EQU   CCAFBUFR+48
CCA4BFIA EQU   CCAFBUFR+44
CCATBFIA EQU   CCAFBUFR+40
CCAWBFOA EQU   CCAFBUFR+36
CCAWBFIA EQU   CCAFBUFR+32
CCAQBFOA EQU   CCAFBUFR+28
CCAQBFIA EQU   CCAFBUFR+24
CCAPBFOA EQU   CCAFBUFR+20
CCAPBFIA EQU   CCAFBUFR+16
CCAVBFOA EQU   CCAFBUFR+12
CCAVBFIA EQU   CCAFBUFR+8
CCACBFOA EQU   CCAFBUFR+4
CCACBFIA EQU   CCAFBUFR
CCAID    EQU   HMASMCCA
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RF00376 EQU   @EL00002
@RF00383 EQU   @EL00004
@RT00392 EQU   @EL00005
@RC00387 EQU   @EL00005
@ENDDATA EQU   *
         END   HMASMASM,(C'PLS1823',0802,78334)
