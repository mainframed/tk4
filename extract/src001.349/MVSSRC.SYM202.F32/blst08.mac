T08      TITLE 'BLST08  --IPCS SERVICE ROUTINE TO DISPLAY UNSTRUCTURED *
                STORAGE '
*/* CHANGE ACTIVITY -------------------------------------------------*/
*/*   THIS MODULE WAS WRITTEN FOR @G57LPLK                           */
*/*------------------------------------------------------------------*/
BLST08   CSECT ,                                                   0002
@MAINENT DS    0H                                                  0002
         USING *,@15                                               0002
         B     @PROLOG                                             0002
         DC    AL1(16)                                             0002
         DC    C'BLST08    78.059'                                 0002
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                     0002
         BALR  @12,0                                               0002
@PSTART  DS    0H                                                  0002
         USING @PSTART,@12                                         0002
         L     @00,@SIZDATD                                        0002
         BLSUALLS R,LV=(0)
         LR    @11,@01                                             0002
         USING @DATD,@11                                           0002
         ST    @13,@SA00001+4                                      0002
         LM    @00,@01,20(@13)                                     0002
         ST    @11,8(,@13)                                         0002
         LR    @13,@11                                             0002
         MVC   @PC00001(8),0(@01)                                  0002
*   FLAG='00'X;                     /* DEFAULT PROCESSING FLAGS      */
         MVI   FLAG,X'00'                                          0140
*   ESAU(1:ESAULRL)=ESPA(1:ESAULRL);/* PREPARE REQUEST BUFFER        */
         L     @14,@PC00001+4                                      0141
         MVC   ESAU(182),ESPA(@14)                                 0141
*   ESAURL=0;                       /* NO REMARK                     */
         SLR   @14,@14                                             0142
         STH   @14,ESAURL                                          0142
*   RETC=ZZZFLAGI;                  /* RETURN CODE                   */
         SLR   RETC,RETC                                           0143
*   DUPLEN=0;                       /* DUPLICATE STORAGE LENGTH      */
         ST    @14,DUPLEN                                          0144
*   IF ZZ2AFM='1'B THEN             /* DISPLAY(MACHINE)              */
         TM    ZZ2AFM(R9),B'00100000'                              0145
         BNO   @RF00145                                            0145
*     FLAG3='1'B;                   /* BLST04 MESSAGE(S) DESIRED     */
         OI    FLAG3,B'00100000'                                   0146
*   IF FLAG3='0'B&                  /* DISPLAY(MACHINE)              */
*       ZZ2AFD='0'B THEN            /* DISPLAY(STORAGE)              */
@RF00145 TM    FLAG3,B'00100000'                                   0147
         BNZ   @RF00147                                            0147
         TM    ZZ2AFD(R9),B'00000010'                              0147
         BZ    @RT00147                                            0147
*     GO TO EXIT;                   /* COMMON EXIT PATH              */
*   CLCLD=CLCLD&&CLCLD;             /* INITIALIZE CLCLD              */
@RF00147 XC    CLCLD(16),CLCLD                                     0149
*   FPLZZ2P=ADDR(ZZ2);              /* INITIALIZE FPL                */
         ST    R9,FPLZZ2P                                          0150
*   FPLESP=ADDR(ESAU);              /* STORAGE DESCRIPTION           */
         LA    @14,ESAU                                            0151
         ST    @14,FPLESP                                          0151
*   FPLBUFP=ADDR(BUF);              /* USUAL BUFFER TO USE           */
         LA    @14,BUF                                             0152
         ST    @14,FPLBUFP                                         0152
*   BYTETOTL=ESAUDLE;               /* TOTAL BYTES                   */
         L     BYTETOTL,ESAUDLE                                    0153
*   IF BYTETOTL>LENGTH(BUF)&        /* MORE BYTES REQUIRED FOR AN    */
*       ESAUDFA='1'B THEN           /* ELEMENT OF AN ARRAY           */
*                                                                  0154
         C     BYTETOTL,@CF00094                                   0154
         BNH   @RF00154                                            0154
         TM    ESAUDFA,B'10000000'                                 0154
         BNO   @RF00154                                            0154
*     /***************************************************************/
*     /*                                                             */
*     /* BUFFER ONE ENTRY IF POSSIBLE. FOR AN ARRAY, AN INTEGRAL     */
*     /* NUMBER OF ENTRIES SHOULD BE PROCESSED IN A SINGLE PASS      */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0155
*     DO;                           /* BUFFER ONE ENTRY IF POSSIBLE  */
*       DO;                         /* GETMAIN (RC) LV(BYTETOTL)   0156
*                                      SP(ZZZSPEXC)                  */
*         RESPECIFY                                                0157
*          (GPR01F,                                                0157
*           GPR15F,                                                0157
*           GPR00F) RESTRICTED;                                    0157
*         GPR01F=0;                 /* REG 1 MUST BE ZERO            */
         SLR   GPR01F,GPR01F                                       0158
*         GPR15F=0;                 /* RC-TYPE GETMAIN               */
         SLR   GPR15F,GPR15F                                       0159
*         GPR00F=BYTETOTL;          /* LENGTH REQUESTED              */
         LR    GPR00F,BYTETOTL                                     0160
*         GPR15F=GPR15F×((ZZZSPEXC)*256);/* SP IN BYTE 2             */
         O     GPR15F,@CF00304                                     0161
*         SVC(120);                 /* RC/RU-FORM OF GETMAIN         */
         SVC   120                                                 0162
*         RESPECIFY                                                0163
*          (GPR01F,                                                0163
*           GPR15F,                                                0163
*           GPR00F) UNRESTRICTED;                                  0163
*       END;                        /* GETMAIN (RC) LV(BYTETOTL)   0164
*                                      SP(ZZZSPEXC)                  */
*       IF RF=0 THEN                                               0165
         LTR   RF,RF                                               0165
         BNZ   @RF00165                                            0165
*         FPLBUFP=R1;               /* ->SINGLE ENTRY BUFFER         */
         ST    R1,FPLBUFP                                          0166
*       ELSE                                                       0167
*                                                                  0167
*         /***********************************************************/
*         /*                                                         */
*         /* NO STORAGE FOR BUFFER                                   */
*         /*                                                         */
*         /***********************************************************/
*                                                                  0167
*         DO;                       /* NO STORAGE FOR BUFFER         */
*                                                                  0167
         B     @RC00165                                            0167
@RF00165 DS    0H                                                  0168
*           /*********************************************************/
*           /*                                                       */
*           /* ISSUE ERROR MESSAGE                                   */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0168
*           RESPECIFY                                              0168
*            (R1) UNRESTRICTED;                                    0168
*           CALL BLSUTRMV(ZZ2,M3);  /* TRANSMIT M3                   */
         ST    R9,@AL00001                                         0169
         LA    @14,M3                                              0169
         ST    @14,@AL00001+4                                      0169
         L     @15,ZZ2TRMVP(,R9)                                   0169
         LA    @01,@AL00001                                        0169
         BALR  @14,@15                                             0169
*           RETC=MAX(RETC,RF);      /* RETURN CODE                   */
         CR    RETC,RF                                             0170
         BNL   *+6
         LR    RETC,RF                                             0170
*           RESPECIFY                                              0171
*            (R1) RESTRICTED;                                      0171
*           RETC=MAX(RETC,ZZZFLAGE);/* RETURN CODE                   */
         LA    @14,8                                               0172
         CR    RETC,@14                                            0172
         BNL   *+6
         LR    RETC,@14                                            0172
*           ESAUDTD='';             /* FORCE UNFORMATTED DISPLAY     */
*                                                                  0173
         MVI   ESAUDTD,C' '                                        0173
         MVC   ESAUDTD+1(30),ESAUDTD                               0173
*           /*********************************************************/
*           /*                                                       */
*           /* CONVERT ARRAY REQUEST TO SCALAR REQUEST               */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0174
*           BYTETOTL=BYTETOTL*ESAUDIM;/* REQUEST LENGTH              */
         LR    @03,BYTETOTL                                        0174
         M     @02,ESAUDIM                                         0174
         LR    BYTETOTL,@03                                        0174
*           ESAUDFA='0'B;           /* SCALAR                        */
         NI    ESAUDFA,B'01111111'                                 0175
*           ESAUDIL=0;              /* SCALAR                        */
         SLR   @14,@14                                             0176
         ST    @14,ESAUDIL                                         0176
*           ESAUDIM=0;              /* SCALAR                        */
         ST    @14,ESAUDIM                                         0177
*         END;                                                     0178
*     END;                                                         0179
*   ELSE                                                           0180
*     ;                             /* WILL USE DECLARED BUFFER      */
@RF00154 DS    0H                                                  0181
*   IF ESAUDFA='0'B THEN                                           0181
*                                                                  0181
@RC00154 TM    ESAUDFA,B'10000000'                                 0181
         BNZ   @RF00181                                            0181
*     /***************************************************************/
*     /*                                                             */
*     /* SCALAR REQUEST                                              */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0182
*     DO;                           /* SCALAR REQUEST                */
*       MAXDIM=0;                   /* SCALAR PROCESSING INDICATOR   */
         SLR   MAXDIM,MAXDIM                                       0183
*       IF BYTETOTL<=LENGTH(BUF) THEN                              0184
         C     BYTETOTL,@CF00094                                   0184
         BH    @RF00184                                            0184
*         CLCLD1L=BYTETOTL;         /* REQUEST LENGTH                */
         STCM  BYTETOTL,7,CLCLD1L                                  0185
*       ELSE                                                       0186
*                                                                  0186
*         /***********************************************************/
*         /*                                                         */
*         /* MULTIPLE PASSES WILL BE REQUIRED TO PROCESS THE REQUEST */
*         /*                                                         */
*         /***********************************************************/
*                                                                  0186
*         DO;                       /* MULTIPLE PASSES REQUIRED      */
         B     @RC00184                                            0186
@RF00184 DS    0H                                                  0187
*           CLCLD1L=LENGTH(BUF)-((ESAULAD+ESAUDOF)&BUFMASK2);/* 2ND,
*                                      3RD, ... REQUESTS ALIGNED     */
         L     @14,ESAULAD                                         0187
         AL    @14,ESAUDOF                                         0187
         N     @14,@CF01193                                        0187
         LCR   @14,@14                                             0187
         AL    @14,@CF00094                                        0187
         STCM  @14,7,CLCLD1L                                       0187
*           ESAUDLE=CLCLD1L;        /* INITIAL REQUEST LENGTH        */
         ST    @14,ESAUDLE                                         0188
*         END;                                                     0189
*     END;                                                         0190
*   ELSE                                                           0191
*                                                                  0191
*     /***************************************************************/
*     /*                                                             */
*     /* ARRAY REQUEST                                               */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0191
*     DO;                           /* ARRAY REQUEST                 */
         B     @RC00181                                            0191
@RF00181 DS    0H                                                  0192
*       BYTETOTL=BYTETOTL*ESAUDIM;  /* TOTAL BYTES                   */
         L     @14,ESAUDIM                                         0192
         LR    @03,BYTETOTL                                        0192
         MR    @02,@14                                             0192
         LR    BYTETOTL,@03                                        0192
*       MAXDIM=MAX(MIN(ESAUDIM,LENGTH(BUF)/ESAUDLE),1);/* MAXIMUM  0193
*                                      ENTRIES/BUFFER                */
         L     @10,ESAUDLE                                         0193
         LA    @03,2048                                            0193
         SLR   @02,@02                                             0193
         DR    @02,@10                                             0193
         CLR   @14,@03                                             0193
         BNH   *+6
         LR    @14,@03                                             0193
         LA    MAXDIM,1                                            0193
         CLR   @14,MAXDIM                                          0193
         BNL   *+6
         LR    @14,MAXDIM                                          0193
         LR    MAXDIM,@14                                          0193
*       ESAUDIM=MAXDIM;             /* ENTRIES TO BE PROCESSED       */
         ST    MAXDIM,ESAUDIM                                      0194
*       CLCLD1L=ESAUDLE*MAXDIM;     /* BYTES PROCESSED PER PASS      */
         LR    @03,@10                                             0195
         MR    @02,MAXDIM                                          0195
         STCM  @03,7,CLCLD1L                                       0195
*     END;                                                         0196
*   CURENTRY=ESAUDIL;               /* CURRENT ENTRY NUMBER          */
@RC00181 L     @14,ESAUDIL                                         0197
         ST    @14,CURENTRY                                        0197
*   CLCLD1P=ADDR(FORMBUF);          /* ->BUFFER                      */
         L     @14,FPLBUFP                                         0198
         ST    @14,CLCLD1P                                         0198
*   RESPECIFY                                                      0199
*     R1 UNRESTRICTED;                                             0199
*                                                                  0199
*   /*****************************************************************/
*   /*                                                               */
*   /* ITERATIVELY RETRIEVE AND DISPLAY UNSTRUCTURED STORAGE         */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0200
*   DO WHILE(BYTETOTL>0&RETC<ZZZFLAGS&ZZ1EVEP='0'B);               0200
         B     @DE00200                                            0200
@DL00200 DS    0H                                                  0201
*     CURRLEN=0;                    /* INITIALIZE DISCONTINUITY    0201
*                                      LENGTH                        */
         SLR   CURRLEN,CURRLEN                                     0201
*     CURRPASS=BYTETOTL;            /* TOTAL BYTES THIS PASS         */
         LR    CURRPASS,BYTETOTL                                   0202
*     BYTETOTL=BYTETOTL-CLCLD1L;    /* BYTES YET TO BE PROCESSED     */
         L     @14,CLCLD1L-1                                       0203
         LA    @14,0(,@14)                                         0203
         SLR   BYTETOTL,@14                                        0203
*     ESAUFS='00'X;                 /* NO STORAGE INFORMATION        */
         MVI   ESAUFS,X'00'                                        0204
*     RESPECIFY                                                    0205
*       R1 RESTRICTED;                                             0205
*     R1=ADDR(FPL);                 /* ->BLSRACCQ, ... PARAMETERS    */
         LA    R1,FPL                                              0206
*     CALL BLSRACCQ;                /* RETRIEVE DATA                 */
         L     @05,ZZ2RVTP(,R9)                                    0207
         L     @15,RVTACCQP(,@05)                                  0207
         BALR  @14,@15                                             0207
*     RESPECIFY                                                    0208
*       R1 UNRESTRICTED;                                           0208
*     RETC=MAX(RETC,RF);            /* RETURN CODE                   */
         CR    RETC,RF                                             0209
         BNL   *+6
         LR    RETC,RF                                             0209
*     IF ESAUFSM='1'B THEN                                         0210
*                                                                  0210
         TM    ESAUFSM,B'00100000'                                 0210
         BNO   @RF00210                                            0210
*       /*************************************************************/
*       /*                                                           */
*       /* STORAGE NOT AVAILABLE                                     */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0211
*       DO;                         /* STORAGE NOT AVAILABLE         */
*         ESAUDLE=ESAUMAD-(ESAULAD+ESAUDOF);/* BYTES RETRIEVED       */
         L     @14,ESAULAD                                         0212
         AL    @14,ESAUDOF                                         0212
         LCR   @14,@14                                             0212
         AL    @14,ESAUMAD                                         0212
         ST    @14,ESAUDLE                                         0212
*         ESAUDFA='0'B;             /* FORCE SCALAR PROCESSING       */
         NI    ESAUDFA,B'01111111'                                 0213
*         ESAUDIM=0;                /* SET DIMENSION                 */
         SLR   @14,@14                                             0214
         ST    @14,ESAUDIM                                         0214
*         ESAUDIL=0;                /* SET ENTRY NUMBER              */
         ST    @14,ESAUDIL                                         0215
*         MAXDIM=0;                 /* FORCE SCALAR PROCESSING       */
         SLR   MAXDIM,MAXDIM                                       0216
*       END;                                                       0217
*     IF ESAUDLE>0 THEN                                            0218
*                                                                  0218
@RF00210 L     @14,ESAUDLE                                         0218
         CL    @14,@CF00053                                        0218
         BNH   @RF00218                                            0218
*       /*************************************************************/
*       /*                                                           */
*       /* SOME STORAGE SUCCESSFULLY RETRIEVED                       */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0219
*       DO;                         /* SOME STORAGE RETRIEVED        */
*         CLCLD1L=ESAUDLE*MAX(ESAUDIM,1);/* SET NO. OF BYTES       0220
*                                      RETRIEVED                     */
         L     @01,ESAUDIM                                         0220
         LA    @05,1                                               0220
         CLR   @01,@05                                             0220
         BNL   *+6
         LR    @01,@05                                             0220
         LR    @03,@14                                             0220
         MR    @02,@01                                             0220
         STCM  @03,7,CLCLD1L                                       0220
*         IF FLAGM='1'B THEN                                       0221
         TM    FLAGM,B'10000000'                                   0221
         BNO   @RF00221                                            0221
*           CALL E110;              /* SUMMARIZE MISSING STORAGE     */
         BAL   @14,E110                                            0222
*         IF FLAGR='1'B THEN                                       0223
*                                                                  0223
@RF00221 TM    FLAGR,B'01000000'                                   0223
         BNO   @RF00223                                            0223
*           /*********************************************************/
*           /*                                                       */
*           /* REPETITIVE STORAGE RANGE                              */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0224
*           DO;                     /* REPETITIVE STORAGE RANGE      */
*             CALL E100;            /* CHECK FOR REPETITIVE STORAGE  */
         BAL   @14,E100                                            0225
*             IF FLAGR='0'B THEN                                   0226
         TM    FLAGR,B'01000000'                                   0226
         BNZ   @RF00226                                            0226
*               CALL E110;          /* SUMMARIZE STORAGE RANGE       */
         BAL   @14,E110                                            0227
*           END;                                                   0228
@RF00226 DS    0H                                                  0229
*         IF FLAG3='0'B&FLAGR='0'B THEN                            0229
@RF00223 TM    FLAG3,B'01100000'                                   0229
         BNZ   @RF00229                                            0229
*           CALL E100;              /* CHECK FOR REPETITIVE STORAGE  */
         BAL   @14,E100                                            0230
*         IF FLAGR='0'B THEN                                       0231
*                                                                  0231
@RF00229 TM    FLAGR,B'01000000'                                   0231
         BNZ   @RF00231                                            0231
*           /*********************************************************/
*           /*                                                       */
*           /* DISPLAY MESSAGE(S)                                    */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0232
*           DO;                     /* DISPLAY MESSAGE(S)            */
*             RESPECIFY                                            0233
*               R1 RESTRICTED;                                     0233
*             R1=ADDR(FPL);         /* -> PARAMETERS                 */
         LA    R1,FPL                                              0234
*             CALL BLST06;          /* SUBROUTINE FOR DATA TYPE      */
         L     @05,ZZ2RVTP(,R9)                                    0235
         L     @15,RVTT06P(,@05)                                   0235
         BALR  @14,@15                                             0235
*             RESPECIFY                                            0236
*               R1 UNRESTRICTED;                                   0236
*             RETC=MAX(RETC,RF);    /* UPDATE RETURN CODE            */
         CR    RETC,RF                                             0237
         BNL   *+6
         LR    RETC,RF                                             0237
*           END;                                                   0238
*       END;                                                       0239
@RF00231 DS    0H                                                  0240
*     IF ESAUFSM='1'B THEN                                         0240
*                                                                  0240
@RF00218 TM    ESAUFSM,B'00100000'                                 0240
         BNO   @RF00240                                            0240
*       /*************************************************************/
*       /*                                                           */
*       /* MISSING STORAGE - PROCESS DISCONTINUITIES                 */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0241
*       DO;                         /* MISSING STORAGE               */
*         CURRADDR=ESAUMAD;         /* ADDRESS TO START CHECKING     */
         L     CURRADDR,ESAUMAD                                    0242
*         RAAUAS=ESAUAS;            /* ADDRESS SPACE REQUESTED       */
         MVC   RAAUAS(16),ESAUAS                                   0243
*         RAAURFU(1)='1'B;          /* INITIALIZE FOR 1ST PASS       */
         OI    RAAURFU,B'10000000'                                 0244
*         DO WHILE(RETC<ZZZFLAGS&   /* NO SERIOUS ERRORS YET         */
*               ZZ1EVEP='0'B&       /* NO ATTENTION RECEIVED         */
*               CURRPASS>(ESAUDLE+CURRLEN)&/* WITHIN ATTEMPTED RANGE */
*               RAAURFU(1)='1'B);   /* STORAGE IS STILL NOT THERE    */
         B     @DE00245                                            0245
@DL00245 DS    0H                                                  0246
*           RAAUFAD=CURRADDR;       /* ADDRESS OF INTEREST           */
         ST    CURRADDR,RAAUFAD                                    0246
*           CALL BLSRRAGE(ZZ2,RAAU);/* LOCATE STORAGE RECORD         */
         ST    R9,@AL00001                                         0247
         LA    @14,RAAU                                            0247
         ST    @14,@AL00001+4                                      0247
         L     @06,ZZ2RVTP(,R9)                                    0247
         L     @15,RVTRAGEP(,@06)                                  0247
         LA    @01,@AL00001                                        0247
         BALR  @14,@15                                             0247
*           RETC=MAX(RETC,RF);      /* RETURN CODE                   */
         CR    RETC,RF                                             0248
         BNL   *+6
         LR    RETC,RF                                             0248
*           IF RAAURFU(1)='1'B THEN /* STORAGE NOT AVAILABLE         */
         TM    RAAURFU,B'10000000'                                 0249
         BNO   @RF00249                                            0249
*             DO;                                                  0250
*               CURRLEN=CURRLEN+(RAAURIA(1)+RAAURLE(1)-CURRADDR);/*
*                                      NOT AVAILABLE                 */
         L     @14,RAAURIA                                         0251
         AL    @14,RAAURLE                                         0251
         LR    @06,@14                                             0251
         SLR   @06,CURRADDR                                        0251
         ALR   CURRLEN,@06                                         0251
*               CURRADDR=RAAURIA(1)+RAAURLE(1);/* NEXT ADDRESS TO TO
*                                      TEST FOR NOT AVAILABLE        */
         LR    CURRADDR,@14                                        0252
*             END;                                                 0253
*           ELSE                                                   0254
*             ;                     /* STORAGE MUST BE AVAILABLE     */
@RF00249 DS    0H                                                  0255
*         END;                      /* END OF NOT AVAILABLE LOOP     */
@DE00245 C     RETC,@CF00036                                       0255
         BNL   @DC00245                                            0255
         L     @14,ZZ2ZZ1P(,R9)                                    0255
         TM    ZZ1EVEP(@14),B'01000000'                            0255
         BNZ   @DC00245                                            0255
         LR    @14,CURRLEN                                         0255
         AL    @14,ESAUDLE                                         0255
         CLR   CURRPASS,@14                                        0255
         BNH   @DC00245                                            0255
         TM    RAAURFU,B'10000000'                                 0255
         BO    @DL00245                                            0255
@DC00245 DS    0H                                                  0256
*         IF CURRPASS>ESAUDLE+CURRLEN THEN/* TOTAL LENGTH NEEDED   0256
*                                      GREATER THAN LENGTH OBTAINED
*                                      PLUS NOT AVAILABLE LENGTH     */
         LR    @14,CURRLEN                                         0256
         AL    @14,ESAUDLE                                         0256
         CLR   CURRPASS,@14                                        0256
         BNH   @RF00256                                            0256
*           CLCLD1L=CURRLEN;        /* MISSING STORAGE LENGTH        */
         STCM  CURRLEN,7,CLCLD1L                                   0257
*         ELSE                      /* MUST BE MISSING TO DESIRED END*/
*           CLCLD1L=CURRPASS-ESAUDLE;/* MISSING STORAGE LENGTH       */
         B     @RC00256                                            0258
@RF00256 LR    @14,CURRPASS                                        0258
         SL    @14,ESAUDLE                                         0258
         STCM  @14,7,CLCLD1L                                       0258
*         BYTETOTL=CURRPASS-(ESAUDLE+CURRLEN);/* ADJUST REMAINING  0259
*                                      BYTES TO PROCESS              */
@RC00256 L     @14,ESAUDLE                                         0259
         LR    BYTETOTL,CURRLEN                                    0259
         ALR   BYTETOTL,@14                                        0259
         LCR   BYTETOTL,BYTETOTL                                   0259
         ALR   BYTETOTL,CURRPASS                                   0259
*         ESAUDOF=ESAUDOF+ESAUDLE;  /* MISSING STORAGE OFFSET        */
         AL    @14,ESAUDOF                                         0260
         ST    @14,ESAUDOF                                         0260
*         IF FLAGR='1'B THEN                                       0261
         TM    FLAGR,B'01000000'                                   0261
         BNO   @RF00261                                            0261
*           CALL E110;              /* SUMMARIZE STORAGE RANGE       */
         BAL   @14,E110                                            0262
*         CALL E200;                /* PREPARE MESSAGE DATA          */
@RF00261 BAL   @14,E200                                            0263
*         IF FLAGM='0'B THEN                                       0264
*                                                                  0264
         TM    FLAGM,B'10000000'                                   0264
         BNZ   @RF00264                                            0264
*           /*********************************************************/
*           /*                                                       */
*           /* FIRST BLOCK OF MISSING STORAGE                        */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0265
*           DO;                     /* FIRST MISSING STORAGE BLOCK   */
*             FLAGM='1'B;           /* MISSING STORAGE RANGE         */
         OI    FLAGM,B'10000000'                                   0266
*             M2BL=LENGTH(M2B)-LENGTH(M2BT5)+LENGTH(TXT1);         0267
         MVC   M2BL(2),@CH01245                                    0267
*             M2BT5=TXT1;           /* MISSING MESSAGE TEXT          */
         MVI   M2BT5+21,C' '                                       0268
         MVC   M2BT5+22(14),M2BT5+21                               0268
         MVC   M2BT5(21),TXT1                                      0268
*           END;                                                   0269
*         ESAUMAD=0;                /* ->MISSING STORAGE             */
@RF00264 SLR   @14,@14                                             0270
         ST    @14,ESAUMAD                                         0270
*       END;                                                       0271
*     IF MAXDIM=0 THEN                                             0272
*                                                                  0272
@RF00240 LTR   MAXDIM,MAXDIM                                       0272
         BNZ   @RF00272                                            0272
*       /*************************************************************/
*       /*                                                           */
*       /* SCALAR REQUEST                                            */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0273
*       DO;                         /* SCALAR REQUEST                */
*         ESAUDOF=ESAUDOF+CLCLD1L;  /* OFFSET                        */
         L     @14,CLCLD1L-1                                       0274
         LA    @14,0(,@14)                                         0274
         AL    @14,ESAUDOF                                         0274
         ST    @14,ESAUDOF                                         0274
*         ESAUDLE=MIN(LENGTH(BUF),BYTETOTL);/* LENGTH                */
         LA    @14,2048                                            0275
         CR    @14,BYTETOTL                                        0275
         BNH   *+6
         LR    @14,BYTETOTL                                        0275
         ST    @14,ESAUDLE                                         0275
*         CLCLD1L=ESAUDLE;          /* BYTES TO BE PROCESSED         */
         STCM  @14,7,CLCLD1L                                       0276
*       END;                                                       0277
*     ELSE                                                         0278
*                                                                  0278
*       /*************************************************************/
*       /*                                                           */
*       /* ARRAY REQUEST                                             */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0278
*       DO;                         /* ARRAY REQUEST                 */
         B     @RC00272                                            0278
@RF00272 DS    0H                                                  0279
*         ESAUDFA='1'B;             /* ARRAY REQUEST                 */
         OI    ESAUDFA,B'10000000'                                 0279
*         ESAUDOF=ESPADOF;          /* OFFSET                        */
         L     @14,@PC00001+4                                      0280
         L     @10,ESPADOF(,@14)                                   0280
         ST    @10,ESAUDOF                                         0280
*         ESAUDLE=ESPADLE;          /* LENGTH                        */
         L     @14,ESPADLE(,@14)                                   0281
         ST    @14,ESAUDLE                                         0281
*         ESAULAD=ESAULAD+ESAUDLE*MAXDIM;/* LOGICAL ADDRESS          */
         LR    @03,MAXDIM                                          0282
         MR    @02,@14                                             0282
         AL    @03,ESAULAD                                         0282
         ST    @03,ESAULAD                                         0282
*         ESAUDIM=MIN(BYTETOTL/ESAUDLE,MAXDIM);/* REMAINING ENTRIES  */
         LR    @02,BYTETOTL                                        0283
         SRDA  @02,32                                              0283
         DR    @02,@14                                             0283
         CLR   @03,MAXDIM                                          0283
         BNH   *+6
         LR    @03,MAXDIM                                          0283
         ST    @03,ESAUDIM                                         0283
*         CLCLD1L=ESAUDLE*ESAUDIM;  /* BYTES TO BE PROCESSED         */
         LR    @01,@14                                             0284
         MR    @00,@03                                             0284
         STCM  @01,7,CLCLD1L                                       0284
*         CURENTRY=CURENTRY+MAXDIM; /* INDEX OF NEXT ARRAY ENTRY     */
         LR    @14,MAXDIM                                          0285
         AL    @14,CURENTRY                                        0285
         ST    @14,CURENTRY                                        0285
*         ESAUDIL=CURENTRY;                                        0286
         ST    @14,ESAUDIL                                         0286
*       END;                                                       0287
*   END;                                                           0288
@RC00272 DS    0H                                                  0288
@DE00200 LTR   BYTETOTL,BYTETOTL                                   0288
         BNP   @DC00200                                            0288
         C     RETC,@CF00036                                       0288
         BNL   @DC00200                                            0288
         L     @14,ZZ2ZZ1P(,R9)                                    0288
         TM    ZZ1EVEP(@14),B'01000000'                            0288
         BZ    @DL00200                                            0288
@DC00200 DS    0H                                                  0289
*   IF FLAGM='1'B×FLAGR='1'B THEN                                  0289
         TM    FLAGM,B'11000000'                                   0289
         BZ    @RF00289                                            0289
*     CALL E110;                    /* SUMMARIZE STORAGE RANGE       */
         BAL   @14,E110                                            0290
*   IF FPLBUFP^=ADDR(BUF) THEN      /* GETMAINED BUFFER FOR ARRAYS   */
@RF00289 LA    @14,BUF                                             0291
         C     @14,FPLBUFP                                         0291
         BE    @RF00291                                            0291
*     DO;                           /* FREEMAIN(R) LV(ESPADLE)SP(ZZZS
*                                      PEXC)A(FORMBUF)               */
*       RESPECIFY                                                  0293
*        (GPR01F,                                                  0293
*         GPR00F) RESTRICTED;                                      0293
*       GPR00F=ESPADLE;             /* LENGTH REQUESTED              */
         L     @14,@PC00001+4                                      0294
         L     GPR00F,ESPADLE(,@14)                                0294
*       GPR01F=ZZZSPEXC;            /* SP IN REG 1                   */
         LA    GPR01F,1                                            0295
*       GEN(SLL   GPR01F,24)                                       0296
*       NODEFS NOREFS NOSETS NOEXIT NOFLOWS SEQFLOW;               0296
         SLL   GPR01F,24
*       GPR00F=GPR00F×GPR01F;       /* SP IN HI BYTE                 */
         OR    GPR00F,GPR01F                                       0297
*       GPR01F=ADDR(FORMBUF);       /* SET REGISTER ONE              */
         L     GPR01F,FPLBUFP                                      0298
*       SVC(10);                    /* R-FORM OF GETMAIN             */
         SVC   10                                                  0299
*       RESPECIFY                                                  0300
*        (GPR01F,                                                  0300
*         GPR00F) UNRESTRICTED;                                    0300
*     END;                          /* FREEMAIN(R) LV(ESPADLE)SP(ZZZS
*                                      PEXC)A(FORMBUF) RELEASE       */
*EXIT:                              /* CLEAN UP AND RETURN           */
*   IF ZZ1EVEP='1'B THEN                                           0302
@RF00291 DS    0H                                                  0302
EXIT     L     @14,ZZ2ZZ1P(,R9)                                    0302
         TM    ZZ1EVEP(@14),B'01000000'                            0302
         BNO   @RF00302                                            0302
*     RETC=MAX(RETC,ZZZFLAGS);      /* SIGNAL TERMINATION REQUESTED  */
         LA    @14,12                                              0303
         CR    RETC,@14                                            0303
         BNL   *+6
         LR    RETC,@14                                            0303
*   RETURN CODE(RETC);                                             0304
*                                                                  0304
@RF00302 L     @13,4(,@13)                                         0304
         L     @00,@SIZDATD                                        0304
         LR    @01,@11                                             0304
         BLSUFRES R,LV=(0),A=(1)
         LR    @15,@04                                             0304
         L     @14,12(,@13)                                        0304
         LM    @00,@12,20(@13)                                     0304
         BR    @14                                                 0304
*/********************************************************************/
*/*                                                                  */
*/* E100--CHECK FOR REPETITIVE STORAGE                               */
*/*                                                                  */
*/********************************************************************/
*                                                                  0305
*E100:                              /* CHECK FOR REPETITIVE STORAGE  */
*   PROCEDURE;                                                     0305
E100     STM   @14,@12,@SA00002                                    0305
*   IF CLCLD1L<=1 THEN                                             0306
         CLC   CLCLD1L(3),@CF00048+1                               0306
         BNH   @RT00306                                            0306
*     GO TO L102;                   /* NOT USEFULLY REPETITIVE       */
*   IF FLAGR='0'B THEN                                             0308
         TM    FLAGR,B'01000000'                                   0308
         BNZ   @RF00308                                            0308
*     CLCLD2C=FORMBUF(1:1);         /* REPETITIVE CHARACTER          */
         L     @14,FPLBUFP                                         0309
         MVC   CLCLD2C(1),FORMBUF(@14)                             0309
*   RESPECIFY                                                      0310
*    (R0,                           /* ->BUFFER                      */
*     RE) RESTRICTED;               /* 0                             */
@RF00308 DS    0H                                                  0311
*   LM(RE,R1,CLCLD);                /* PREPARE FOR CLCL              */
         LM    RE,R1,CLCLD                                         0311
*   CLCL(RE,R0);                    /* CHECK FOR REPETITIVE STORAGE  */
         CLCL  RE,R0                                               0312
*   RESPECIFY                                                      0313
*    (R0,                           /* ->BUFFER                      */
*     RE) UNRESTRICTED;             /* 0                             */
*   BC(7,L102);                     /* NOT REPETITIVE                */
         BC    7,L102                                              0314
*   CALL E200;                      /* PREPARE MESSAGE DATA          */
         BAL   @14,E200                                            0315
*   IF FLAGR='0'B THEN                                             0316
*                                                                  0316
         TM    FLAGR,B'01000000'                                   0316
         BNZ   @RF00316                                            0316
*     /***************************************************************/
*     /*                                                             */
*     /* FORMAT MESSAGE BASE                                         */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0317
*     DO;                           /* FORMAT MESSAGE BASE           */
*       DO;                         /* BLRCNVXC(FORMBUF(1:1)) FROM(BS
*                                      )TO(CHARACTER)SET(M2BT51)REMAR
*                                      K(REPETITIVE BYTE--HEXADECIMAL
*                                      TRANSLATION)TR(ZZ1TRHEX)      */
*                                                                  0318
*         /***********************************************************/
*         /*                                                         */
*         /* REPETITIVE BYTE--HEXADECIMAL TRANSLATION                */
*         /*                                                         */
*         /***********************************************************/
*                                                                  0319
*         UNPK(M2BT51(1:LENGTH(M2BT51)-1),FORMBUF(1:1));/* BIT=>ZONED
*                                      HEXADECIMAL                   */
         L     @14,FPLBUFP                                         0319
         UNPK  M2BT51(1),FORMBUF(1,@14)                            0319
*         M2BT51(LENGTH(M2BT51):LENGTH(M2BT51))=FORMBUF(1:1);/* FINAL
*                                      ZONED HEXADECIMAL DIGIT       */
         MVC   M2BT51+1(1),FORMBUF(@14)                            0320
*         TR(M2BT51,ZZ1TRHEX);      /* ZONED HEXADECIMAL=>EBCDIC     */
         L     @10,ZZ2ZZ1P(,R9)                                    0321
         TR    M2BT51(2),ZZ1TRHEX(@10)                             0321
*       END;                        /* BLRCNVXC(FORMBUF(1:1)) FROM(BS
*                                      )TO(CHARACTER)SET(M2BT51)REMAR
*                                      K(REPETITIVE BYTE--HEXADECIMAL
*                                      TRANSLATION)TR(ZZ1TRHEX)      */
*       M2BT531=FORMBUF(1:1);       /* REPETITIVE BYTE (EBCDIC)      */
         MVC   M2BT531(1),FORMBUF(@14)                             0323
*       TR(M2BT531,ZZ1TREBC);       /* NONGRAPHIC==>PERIOD           */
         TR    M2BT531(1),ZZ1TREBC(@10)                            0324
*       IF M2BT531^=FORMBUF(1:1) THEN                              0325
         CLC   M2BT531(1),FORMBUF(@14)                             0325
         BE    @RF00325                                            0325
*         M2BL=LENGTH(M2B)-LENGTH(M2BT53);/* MESSAGE LENGTH          */
         MVC   M2BL(2),@CH00184                                    0326
*       FLAGR='1'B;                 /* REPETITIVE STORAGE RANGE      */
@RF00325 OI    FLAGR,B'01000000'                                   0327
*     END;                                                         0328
*   GO TO L104;                     /* COMMON EXIT PATH              */
         B     L104                                                0329
*L102:                              /* STORAGE NOT REPETITIVE        */
*   FLAGR='0'B;                     /* STORAGE NOT REPETITIVE        */
L102     NI    FLAGR,B'10111111'                                   0330
*L104:                              /* COMMON EXIT PATH              */
*   RETURN;                                                        0331
*                                                                  0331
@EL00002 DS    0H                                                  0331
@EF00002 DS    0H                                                  0331
@ER00002 LM    @14,@12,@SA00002                                    0331
         BR    @14                                                 0331
*/********************************************************************/
*/*                                                                  */
*/* E110--SUMMARIZE STORAGE RANGE                                    */
*/*                                                                  */
*/********************************************************************/
*                                                                  0332
*E110:                              /* SUMMARIZE STORAGE RANGE       */
*   ENTRY;                                                         0332
E110     STM   @14,@12,@SA00002                                    0332
*   DO;                             /* BLRCNVUC(DUPLEN) FROM(UNSIGNED
*                                      BINARY)TO(CHARACTER)SET(M2BT3)
*                                      PATTERN('40202020202020202120'
*                                      X)OPTIONS(PATTERN IN        0333
*                                      PLACE)REMARK(LENGTH)          */
*                                                                  0333
*     /***************************************************************/
*     /*                                                             */
*     /* LENGTH                                                      */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0334
*     CVD(DUPLEN,PACKED);           /* UNSIGNED BINARY=>PACKED     0334
*                                      DECIMAL                       */
         L     @14,DUPLEN                                          0334
         CVD   @14,PACKED                                          0334
*     ED(M2BT3,PACKED(25:64));      /* PACKED DECIMAL=>EBCDIC        */
         ED    M2BT3(10),PACKED+3                                  0335
*   END;                            /* BLRCNVUC(DUPLEN) FROM(UNSIGNED
*                                      BINARY)TO(CHARACTER)SET(M2BT3)
*                                      PATTERN('40202020202020202120'
*                                      X)OPTIONS(PATTERN IN        0336
*                                      PLACE)REMARK(LENGTH)          */
*   FPLESP=ADDR(M2B);               /* MODIFY PARAMETER LIST         */
         LA    @14,M2B                                             0337
         ST    @14,FPLESP                                          0337
*   RESPECIFY                                                      0338
*     R1 RESTRICTED;                                               0338
*   R1=ADDR(FPL);                   /* -> PARAMETERS                 */
         LA    R1,FPL                                              0339
*   CALL BLSUMPK1;                  /* REMOVE EXTRANEOUS BLANKS      */
         L     @10,ZZ2BVTP(,R9)                                    0340
         L     @15,BVTMPK1P(,@10)                                  0340
         BALR  @14,@15                                             0340
*   CALL BLSUPUTA;                  /* TRANSMIT MESSAGE              */
         L     @10,ZZ2BVTP(,R9)                                    0341
         L     @15,BVTPUTAP(,@10)                                  0341
         BALR  @14,@15                                             0341
*   RESPECIFY                                                      0342
*     R1 UNRESTRICTED;                                             0342
*   FPLESP=ADDR(ESAU);              /* RESET PARAMETER LIST          */
         LA    @14,ESAU                                            0343
         ST    @14,FPLESP                                          0343
*   FLAGM='0'B;                     /* NO MISSING STORAGE RANGE      */
*   FLAGR='0'B;                     /* NO REPETITIVE STORAGE RANGE   */
         NI    FLAGM,B'00111111'                                   0345
*   RETURN;                                                        0346
         B     @EL00002                                            0346
*   END E100;                                                      0347
*                                                                  0347
         B     @EL00002                                            0347
*/********************************************************************/
*/*                                                                  */
*/* E200--PREPARE STORAGE RANGE MESSAGE BASE                         */
*/*                                                                  */
*/********************************************************************/
*                                                                  0348
*E200:                              /* PREPARE MESSAGE BASE          */
*   PROCEDURE;                                                     0348
E200     STM   @14,@12,12(@13)                                     0348
*   IF FLAGM='1'B×FLAGR='1'B THEN                                  0349
         TM    FLAGM,B'11000000'                                   0349
         BZ    @RF00349                                            0349
*     DUPLEN=DUPLEN+CLCLD1L;        /* BYTES SUPPRESSED              */
         L     @14,CLCLD1L-1                                       0350
         LA    @14,0(,@14)                                         0350
         AL    @14,DUPLEN                                          0350
         ST    @14,DUPLEN                                          0350
*   ELSE                                                           0351
*                                                                  0351
*     /***************************************************************/
*     /*                                                             */
*     /* FIRST BLOCK OF REPETITIVE STORAGE                           */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0351
*     DO;                           /* FIRST REPETITIVE BLOCK        */
         B     @RC00349                                            0351
@RF00349 DS    0H                                                  0352
*       DUPLEN=CLCLD1L;             /* BYTES SUPPRESSED              */
         L     @14,CLCLD1L-1                                       0352
         LA    @14,0(,@14)                                         0352
         ST    @14,DUPLEN                                          0352
*       M2B=M2S;                    /* M2 LITERAL TEXT               */
         MVC   M2B(72),M2S                                         0353
*       DO;                         /* BLRCNVPC(ESAULAD+ESAUDOF) FROM
*                                      (POINTER)TO(CHARACTER)SET(M2BT
*                                      10)REMARK(REPETITIVE STORAGE
*                                      ADDRESS)TR(ZZ1TRHEX)          */
*                                                                  0354
*         /***********************************************************/
*         /*                                                         */
*         /* REPETITIVE STORAGE ADDRESS                              */
*         /*                                                         */
*         /***********************************************************/
*                                                                  0355
*         PTRPTR=ESAULAD+ESAUDOF;   /* SOURCE TO BIT/POINTER       0355
*                                      INTERMEDIATE                  */
         L     @14,ESAULAD                                         0355
         AL    @14,ESAUDOF                                         0355
         ST    @14,PTRPTR                                          0355
*         UNPK(M2BT10(1:LENGTH(M2BT10)-1),PTRBIT);/* BIT=>ZONED    0356
*                                      HEXADECIMAL                   */
         UNPK  M2BT10(5),PTRBIT(4)                                 0356
*         M2BT10(LENGTH(M2BT10):LENGTH(M2BT10))=PTRBIT(25:32);/*   0357
*                                      FINAL ZONED HEXADECIMAL DIGIT */
         MVC   M2BT10+5(1),PTRBIT+3                                0357
*         TR(M2BT10,ZZ1TRHEX);      /* ZONED HEXADECIMAL=>EBCDIC     */
         L     @14,ZZ2ZZ1P(,R9)                                    0358
         TR    M2BT10(6),ZZ1TRHEX(@14)                             0358
*       END;                        /* BLRCNVPC(ESAULAD+ESAUDOF) FROM
*                                      (POINTER)TO(CHARACTER)SET(M2BT
*                                      10)REMARK(REPETITIVE STORAGE
*                                      ADDRESS)TR(ZZ1TRHEX)          */
*     END;                                                         0360
*   RETURN;                                                        0361
@EL00003 DS    0H                                                  0361
@EF00003 DS    0H                                                  0361
@ER00003 LM    @14,@12,12(@13)                                     0361
         BR    @14                                                 0361
*   END E200;                                                      0362
*                                                                  0362
         B     @EL00003                                            0362
*/*BLSTPEND--DISPLAY FORMATTER                                       */
*/*BLSRPEND--DEBUGGING MODULE                                        */
*/*BLSUPEND--MVS IPCS MODULE                                         */
*                                                                  0363
*   DECLARE                         /* DATA FOR AHB MACROS           */
*     PACKED BIT(64) BOUNDARY(DWORD),/* DATA CONVERSION WORK AREA    */
*     PTRBIT BIT(32) BOUNDARY(WORD),/* DATA CONVERSION WORK AREA FOR
*                                      POINTER DATA                  */
*     PTRPTR POINTER DEFINED(PTRBIT);/* DATA CONVERSION WORK AREA FOR
*                                      POINTER DATA                  */
*   DECLARE                         /* GENERAL PURPOSE REGISTERS     */
*     GPR00F FIXED(31) REG(0),                                     0364
*     GPR01F FIXED(31) REG(1),                                     0364
*     GPR15F FIXED(31) REG(15);                                    0364
*   DECLARE                         /* COMMON VARIABLES              */
*     I256C CHAR(256) BASED,                                       0365
*     I031F FIXED(31) BASED,                                       0365
*     I031P PTR(31) BASED,                                         0365
*     I015F FIXED(15) BASED,                                       0365
*     I015P PTR(15) BASED,                                         0365
*     I008P PTR(8) BASED,                                          0365
*     I001C CHAR(1) BASED;                                         0365
*   GENERATE NODEFS NOREFS DATA;                                   0366
*   END BLST08                      /* BLRPEND(BLST08)               */
*                                                                  0367
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (BLSRZZZ )                                       */
*/*%INCLUDE SYSLIB  (BLSUZZZ )                                       */
*/*%INCLUDE SYSLIB  (BLRFULL )                                       */
*/*%INCLUDE SYSLIB  (IKJCPPL )                                       */
*/*%INCLUDE SYSLIB  (IKJPSCB )                                       */
*/*%INCLUDE SYSLIB  (IKJECT  )                                       */
*/*%INCLUDE SYSLIB  (IKJUPT  )                                       */
*/*%INCLUDE SYSLIB  (BLSUSERV)                                       */
*/*%INCLUDE SYSLIB  (BLRSERV )                                       */
*/*%INCLUDE SYSLIB  (BLRSERVD)                                       */
*/*%INCLUDE SYSLIB  (BLSRSERV)                                       */
*                                                                  0367
*       ;                                                          0367
@EL00001 L     @13,4(,@13)                                         0367
@EF00001 L     @00,@SIZDATD                                        0367
         LR    @01,@11                                             0367
         BLSUFRES R,LV=(0),A=(1)
@ER00001 LM    @14,@12,12(@13)                                     0367
         BR    @14                                                 0367
@DATA    DS    0H
@CH01245 DC    H'57'
@CH00184 DC    H'59'
@DATD    DSECT
         DS    0F
@SA00001 DS    18F
@PC00001 DS    2F
@SA00002 DS    15F
@AL00001 DS    2A
BLST08   CSECT
         DS    0F
@CF00053 DC    F'0'
@CF00048 DC    F'1'
@CF00036 DC    F'12'
@CF00304 DC    F'256'
@CF00094 DC    F'2048'
@CF01193 DC    XL4'000007FF'
@DATD    DSECT
         DS    0D
CURENTRY DS    F
DUPLEN   DS    F
ESAU     DS    CL182
         ORG   ESAU
ESAURID  DS    CL2
@NM00089 DS    BL6
@NM00090 DS    CL8
@NM00091 DS    BL8
ESAURDX  DS    FL4
ESAUSYM  DS    CL31
ESAUELK  DS    0C
ESAURV1  DS    CL1
ESAUAS   DS    CL16
         ORG   ESAUAS
ESAUAS0  DS    0C
ESAUAST  DS    CL2
@NM00092 DS    BL2
ESAUAS1  DS    FL4
ESAUAS2  DS    FL4
@NM00093 DS    BL4
ESAUAS9  DS    0C
         ORG   ESAU+76
ESAULAD  DS    AL4
ESAUD    DS    CL60
         ORG   ESAUD
ESAUD00  DS    0C
ESAUDOF  DS    FL4
ESAUDLE  DS    FL4
ESAUDOB  DS    FL1
ESAUDLB  DS    FL1
ESAUDT   DS    CL34
         ORG   ESAUDT
ESAUDT0  DS    0C
ESAUDTY  DS    CL1
@NM00094 DS    BL1
ESAUDTD  DS    CL31
ESAUDTE  DS    CL1
ESAUDT9  DS    0C
         ORG   ESAUD+44
ESAUDIM  DS    FL4
ESAUDIL  DS    FL4
ESAUDF   DS    BL4
         ORG   ESAUDF
ESAUDFA  DS    BL1
@NM00095 EQU   ESAUDF+0
         ORG   ESAUD+56
@NM00096 DS    BL4
ESAUD99  DS    0C
         ORG   ESAU+140
ESAUMAD  DS    AL4
@NM00097 DS    BL16
ESAUKEY  DS    BL1
ESAUF    DS    BL3
         ORG   ESAUF
ESAUFS   DS    BL1
         ORG   ESAUFS
ESAUFSC  DS    BL1
ESAUFS2  EQU   ESAUFS+0
ESAUFSM  EQU   ESAUFS+0
ESAUFSA  EQU   ESAUFS+0
ESAUFSP  EQU   ESAUFS+0
ESAUFSR  EQU   ESAUFS+0
ESAUFSX  EQU   ESAUFS+0
ESAUFSS  EQU   ESAUFS+0
         ORG   ESAUF+1
ESAUFC   DS    BL1
         ORG   ESAUFC
ESAUFCD  DS    BL1
@NM00098 EQU   ESAUFC+0
         ORG   ESAUF+2
@NM00099 DS    BL1
         ORG   ESAU+164
ESAUABS  DS    FL4
@NM00100 DS    BL12
ESAUR    DS    CL2
         ORG   ESAUR
ESAURL   DS    FL2
ESAURT   DS    0C
         ORG   ESAURT
ESAURT1  DS    0C
         ORG   ESAU+182
ESAU999  DS    0C
         ORG   ESAU+182
         DS    CL2
RAAU     DS    CL148
         ORG   RAAU
RAAURID  DS    CL2
@NM00101 DS    BL6
RAAURDX  DS    FL4
RAAUAS   DS    CL16
         ORG   RAAUAS
RAAUAS0  DS    0C
RAAUAST  DS    CL2
@NM00102 DS    BL2
RAAUAS1  DS    FL4
RAAUAS2  DS    FL4
@NM00103 DS    BL4
RAAUAS9  DS    0C
         ORG   RAAU+28
RAAUFAD  DS    AL4
RAAUELK  DS    0C
@NM00104 DS    BL16
RAAUDIM  DS    FL2
RAAUUSE  DS    FL2
RAAUR    DS    CL32
         ORG   RAAUR+0
RAAURIA  DS    AL4
RAAURLE  DS    FL4
RAAURNM  DS    FL2
RAAURF   DS    BL2
         ORG   RAAURF+0
RAAURFU  DS    BL1
RAAURFP  EQU   RAAURF+0
RAAURFR  EQU   RAAURF+0
@NM00105 EQU   RAAURF+0
         ORG   RAAUR+12
RAAURDA  DS    FL4
RAAUROF  DS    FL4
@NM00106 DS    BL12
         ORG   RAAU+148
RAAU999  DS    0C
         ORG   RAAU+148
CLCLD    DS    CL16
         ORG   CLCLD
CLCLD1   DS    CL8
         ORG   CLCLD1
CLCLD1P  DS    AL4
CLCLD12  DS    BL4
         ORG   CLCLD12
CLCLD1C  DS    CL1
CLCLD1L  DS    FL3
         ORG   CLCLD1+8
CLCLD19  DS    0C
         ORG   CLCLD+8
CLCLD2   DS    CL8
         ORG   CLCLD2
CLCLD2P  DS    AL4
CLCLD22  DS    BL4
         ORG   CLCLD22
CLCLD2C  DS    CL1
CLCLD2L  DS    FL3
         ORG   CLCLD2+8
CLCLD29  DS    0C
         ORG   CLCLD+16
CLCLD99  DS    0C
         ORG   CLCLD+16
M2B      DS    CL72
         ORG   M2B
M2BL     DS    FL2
@NM00108 DS    BL2
M2BT     DS    CL68
         ORG   M2BT
M2BT0    DS    CL1
M2BT1    DS    CL7
         ORG   M2BT1
M2BT10   DS    CL6
M2BT11   DS    CL1
         ORG   M2BT+8
M2BT2    DS    CL8
M2BT3    DS    CL10
M2BT4    DS    CL6
M2BT5    DS    CL36
         ORG   M2BT5
M2BT50   DS    CL20
M2BT51   DS    CL2
M2BT52   DS    CL1
M2BT53   DS    CL13
         ORG   M2BT53
M2BT530  DS    CL11
M2BT531  DS    CL1
M2BT532  DS    CL1
         ORG   M2B+72
FPL      DS    CL12
         ORG   FPL
FPLZZ2P  DS    AL4
FPLESP   DS    AL4
FPLBUFP  DS    AL4
         ORG   FPL+12
FLAG     DS    BL1
         ORG   FLAG
FLAGM    DS    BL1
FLAGR    EQU   FLAG+0
FLAG3    EQU   FLAG+0
@NM00110 EQU   FLAG+0
         ORG   FLAG+1
         DS    CL7
BUF      DS    CL2048
PACKED   DS    BL8
PTRBIT   DS    BL4
BLST08   CSECT
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
         DS    0D
M2S      DS    CL72
         ORG   M2S
M2SL     DC    AL2(72)
@NM00107 DC    X'0000'
M2ST     DS    CL68
         ORG   M2ST
M2ST0    DC    CL1' '
M2ST1    DS    CL7
         ORG   M2ST1
M2ST10   DC    CL6'000000'
M2ST11   DC    CL1'.'
         ORG   M2ST+8
M2ST2    DC    CL8' LENGTH('
M2ST3    DC    X'40202020202020202120'
M2ST4    DC    CL6') ==> '
M2ST5    DS    CL36
         ORG   M2ST5
M2ST50   DC    CL20'ALL BYTES CONTAIN X'''
M2ST51   DC    CL2' '
M2ST52   DC    CL1''''
M2ST53   DS    CL13
         ORG   M2ST53
M2ST530  DC    CL11', EBCDIC C'''
M2ST531  DC    CL1' '
M2ST532  DC    CL1''''
         ORG   M2S+72
TXT1     DS    CL21
         ORG   TXT1
TXT11    DC    CL21'STORAGE NOT AVAILABLE'
         ORG   TXT1+21
         DS    CL1
M3       DS    CL49
         ORG   M3
M3L      DC    AL2(49)
@NM00109 DC    X'0000'
M3T      DS    CL45
         ORG   M3T
M3T1     DC    CL45'BLS20000I GETMAIN FAILURE. SCALAR SUBSTITUTED'
         ORG   M3+49
@DATD    DSECT
         SPACE 2
***********************************************************************
* THE FOLLOWING AREA, BLRPATCH, IS RESERVED FOR PATCH APPLICATION     *
* TO OBTAIN PATCH ROOM IN THE @DATD AUTOMATIC STORAGE AREA, MODIFY    *
* CONSTANT @SIZDATD TO REFLECT THE DESIRED @DATD SIZE                 *
***********************************************************************
         SPACE
BLST08   CSECT
         ORG
         DS    0D
BLRPATCH DC    CL8'ZAPAREA',(((*-BLST08+19)/20+7)/8)CL8'BLST08'
@DATD    DSECT
         DS    0H
@DATD    DSECT
         SPACE 2
***********************************************************************
* ALIGN END OF DATA ON A DOUBLEWORD BOUNDARY                          *
***********************************************************************
         SPACE
         DS    0D
@DATD    DSECT
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
BLST08   CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
RETC     EQU   @04
CURRPASS EQU   @10
CURRLEN  EQU   @08
CURRADDR EQU   @02
MAXDIM   EQU   @07
BYTETOTL EQU   @06
R9       EQU   @09
R0       EQU   @00
R1       EQU   @01
R2       EQU   @02
R3       EQU   @03
R4       EQU   @04
R5       EQU   @05
RB       EQU   @11
RD       EQU   @13
RE       EQU   @14
RF       EQU   @15
GPR01F   EQU   @01
GPR15F   EQU   @15
GPR00F   EQU   @00
RA       EQU   @10
RC       EQU   @12
R6       EQU   @06
R7       EQU   @07
R8       EQU   @08
ZZ1      EQU   0
ZZ1ATTN  EQU   ZZ1+360
ZZ1EVE   EQU   ZZ1ATTN+4
ZZ1EVEP  EQU   ZZ1EVE
ZZ1F     EQU   ZZ1+368
ZZ1TRHEX EQU   ZZ1+568
ZZ1TREBC EQU   ZZ1+824
ZZ1N     EQU   ZZ1+1116
ZZ2      EQU   0
ZZ2AMD   EQU   ZZ2
@NM00025 EQU   ZZ2AMD+7
ZZ2PRT   EQU   ZZ2+138
ZZ2PRTT  EQU   ZZ2PRT+4
ZZ2PRTT1 EQU   ZZ2PRTT+1
ZZ2A     EQU   ZZ2+272
ZZ2AF    EQU   ZZ2A+16
ZZ2AFM   EQU   ZZ2AF+2
ZZ2AFD   EQU   ZZ2AF+2
ZZ2APID  EQU   ZZ2A+64
ZZ2AD    EQU   ZZ2A+74
ZZ2ADD   EQU   ZZ2AD
ZZ2ADDT  EQU   ZZ2ADD+2
ZZ2ADM   EQU   ZZ2AD+46
ZZ2ADMT  EQU   ZZ2ADM+2
ZZ2ADP   EQU   ZZ2AD+56
ZZ2ADPT  EQU   ZZ2ADP+2
ZZ2AZZ6P EQU   ZZ2A+140
ZZ2AQAS  EQU   ZZ2A+144
ZZ2AQD   EQU   ZZ2A+160
ZZ2AQDT  EQU   ZZ2AQD+10
ZZ2AQDF  EQU   ZZ2AQD+52
ZZ2STG   EQU   ZZ2+960
ZZ2ALLOP EQU   ZZ2+992
ZZ2FREEP EQU   ZZ2+996
ZZ2FF19P EQU   ZZ2+1000
ZZ2FRE1P EQU   ZZ2+1004
ZZ2FF18P EQU   ZZ2+1008
ZZ2DYNAP EQU   ZZ2+1012
ZZ2ZZ2CP EQU   ZZ2+1016
ZZ2ZZ2DP EQU   ZZ2+1020
ZZ2STAIP EQU   ZZ2+1024
ZZ2FF02P EQU   ZZ2+1028
ZZ2GETLP EQU   ZZ2+1032
ZZ2PARSP EQU   ZZ2+1036
ZZ2PTGTP EQU   ZZ2+1040
ZZ2PUTLP EQU   ZZ2+1044
ZZ2SCANP EQU   ZZ2+1048
ZZ2STCKP EQU   ZZ2+1052
ZZ2TRMOP EQU   ZZ2+1064
ZZ2TRMVP EQU   ZZ2+1068
ZZ2PUTNP EQU   ZZ2+1084
ZZ2TRMNP EQU   ZZ2+1088
ZZ2ZZ1P  EQU   ZZ2+1264
ZZ2BVTP  EQU   ZZ2+1280
ZZ2RVTP  EQU   ZZ2+1284
ZZ2CPPL  EQU   ZZ2+1292
ZZ2CPPLC EQU   ZZ2CPPL
ZZ2ITR   EQU   ZZ2+2840
ZZ2ITRE  EQU   ZZ2ITR+16
ZZ2ITSE  EQU   ZZ2+2864
ZZ2ES    EQU   ZZ2+2872
ZZ2AMDX  EQU   ZZ2+7160
ZZ2AXO   EQU   ZZ2+7934
ZZ2AXOT  EQU   ZZ2AXO+2
CMD      EQU   0
CMDT     EQU   CMD+4
PSCB     EQU   0
PSCBATR1 EQU   PSCB+16
ECT      EQU   0
ECTSWS   EQU   ECT+28
ECTSWS2  EQU   ECT+40
ECTSWS21 EQU   ECTSWS2
UPT      EQU   0
UPTSWS   EQU   UPT+12
SA       EQU   0
SA1      EQU   SA
SAR      EQU   SA+12
SAR1     EQU   SAR+12
BLSUMPK1 EQU   0
BLSUPUTA EQU   0
BLSUTRMV EQU   0
BVT      EQU   0
BVTPUTLP EQU   BVT+4
BVTPUTOP EQU   BVT+12
BVTPUTTP EQU   BVT+16
BVTPUTVP EQU   BVT+20
BVTPUTAP EQU   BVT+24
BVTPRTTP EQU   BVT+28
BVTPRTAP EQU   BVT+32
BVTPUTDP EQU   BVT+36
BVTMONP  EQU   BVT+40
BVTMON2P EQU   BVT+44
BVTVSARP EQU   BVT+48
BVTVSENP EQU   BVT+64
BVTVSERP EQU   BVT+68
BVTVSGEP EQU   BVT+72
BVTVSGUP EQU   BVT+76
BVTVSPOP EQU   BVT+80
BVTVSPUP EQU   BVT+84
BVTMPKNP EQU   BVT+104
BVTMONLP EQU   BVT+108
BVTPUTCP EQU   BVT+132
BVTMPK1P EQU   BVT+136
BVTZZ2RP EQU   BVT+140
BVTPGMRP EQU   BVT+144
BVTMONAP EQU   BVT+148
BVTBLDDP EQU   BVT+152
BVTBLDLP EQU   BVT+156
BVTPGMCP EQU   BVT+160
BVTPGMDP EQU   BVT+164
BVTPGMLP EQU   BVT+168
BVTMONCP EQU   BVT+180
BVTMONDP EQU   BVT+184
BVTMONTP EQU   BVT+188
BVTPARIP EQU   BVT+192
BVTPARUP EQU   BVT+196
BVTPRTNP EQU   BVT+204
BVTVSCRP EQU   BVT+208
BVTVSMRP EQU   BVT+212
BVTMONXP EQU   BVT+216
BVTTRMAP EQU   BVT+228
ZZ6      EQU   0
ZZ6D     EQU   ZZ6+128
ZZ6DD    EQU   ZZ6D+8
ZZ6DDT   EQU   ZZ6DD+4
ZZ6DQA   EQU   ZZ6D+68
ZZ6DF    EQU   ZZ6D+92
ZZ6B     EQU   ZZ6+768
BLSRACCQ EQU   0
BLST06   EQU   0
BLSRRAGE EQU   0
RVT      EQU   0
RVTADDRP EQU   RVT
RVTT01P  EQU   RVT+4
RVTTAP   EQU   RVT+8
RVTTBP   EQU   RVT+12
RVTTCP   EQU   RVT+16
RVTTFP   EQU   RVT+24
RVTTYP   EQU   RVT+40
RVTT02P  EQU   RVT+48
RVTT03P  EQU   RVT+52
RVTT04P  EQU   RVT+56
RVTACCLP EQU   RVT+60
RVTRACCP EQU   RVT+64
RVTTLP   EQU   RVT+68
RVTTMP   EQU   RVT+72
RVTTUP   EQU   RVT+80
RVTESGEP EQU   RVT+84
RVTESGUP EQU   RVT+88
RVTESARP EQU   RVT+92
RVTRAARP EQU   RVT+96
RVTRAGEP EQU   RVT+100
RVTADDPP EQU   RVT+104
RVTACCQP EQU   RVT+108
RVTSAGUP EQU   RVT+124
RVTSAGEP EQU   RVT+128
RVTESCKP EQU   RVT+132
RVTMSGAP EQU   RVT+136
RVTMSGDP EQU   RVT+140
RVTADDTP EQU   RVT+160
RVTADDUP EQU   RVT+164
RVTADD1P EQU   RVT+176
RVTADD2P EQU   RVT+180
RVTRSAGP EQU   RVT+184
RVTMSGBP EQU   RVT+188
RVTADDSP EQU   RVT+192
RVTADD3P EQU   RVT+196
RVTT05P  EQU   RVT+200
RVTPADSP EQU   RVT+204
RVTTRP   EQU   RVT+228
RVTADD4P EQU   RVT+232
RVTSAPCP EQU   RVT+236
RVTSAARP EQU   RVT+240
RVTSAGNP EQU   RVT+244
RVTT06P  EQU   RVT+248
RVTSAGCP EQU   RVT+252
RVTSAGQP EQU   RVT+256
RVTESGCP EQU   RVT+260
RVTESGQP EQU   RVT+264
RVTDUCKP EQU   RVT+276
RVTDUCCP EQU   RVT+280
FORMBUF  EQU   0
BLSRACC  EQU   0
BLSRACCL EQU   0
BLSRADDP EQU   0
BLSRADDR EQU   0
BLSRADDS EQU   0
BLSRADDT EQU   0
BLSRADDU EQU   0
BLSRADD1 EQU   0
BLSRADD2 EQU   0
BLSRADD3 EQU   0
BLSRADD4 EQU   0
BLSRDUCC EQU   0
BLSRDUCK EQU   0
BLSRESAR EQU   0
BLSRESCK EQU   0
BLSRESGC EQU   0
BLSRESGE EQU   0
BLSRESGQ EQU   0
BLSRESGU EQU   0
BLSRMSGA EQU   0
BLSRMSGB EQU   0
BLSRMSGD EQU   0
BLSRPADS EQU   0
BLSRRAAR EQU   0
BLSRSAAR EQU   0
BLSRSAG  EQU   0
BLSRSAGC EQU   0
BLSRSAGE EQU   0
BLSRSAGN EQU   0
BLSRSAGQ EQU   0
BLSRSAGU EQU   0
BLSRSAPC EQU   0
BLSTA    EQU   0
BLSTB    EQU   0
BLSTC    EQU   0
BLSTF    EQU   0
BLSTL    EQU   0
BLSTM    EQU   0
BLSTR    EQU   0
BLSTU    EQU   0
BLSTY    EQU   0
BLST01   EQU   0
BLST02   EQU   0
BLST03   EQU   0
BLST04   EQU   0
BLST05   EQU   0
BLSUALLO EQU   0
BLSUBLDD EQU   0
BLSUBLDL EQU   0
BLSUDYNA EQU   0
BLSUFREE EQU   0
BLSUFRE1 EQU   0
BLSUMON  EQU   0
BLSUMONA EQU   0
BLSUMONC EQU   0
BLSUMOND EQU   0
BLSUMONL EQU   0
BLSUMONT EQU   0
BLSUMONX EQU   0
BLSUMON2 EQU   0
BLSUMPKN EQU   0
BLSUPARI EQU   0
BLSUPARU EQU   0
BLSUPGMC EQU   0
BLSUPGMD EQU   0
BLSUPGML EQU   0
BLSUPGMR EQU   0
BLSUPRTA EQU   0
BLSUPRTN EQU   0
BLSUPRTT EQU   0
BLSUPUTC EQU   0
BLSUPUTD EQU   0
BLSUPUTL EQU   0
BLSUPUTN EQU   0
BLSUPUTO EQU   0
BLSUPUTT EQU   0
BLSUPUTV EQU   0
BLSUSTAI EQU   0
BLSUTRMA EQU   0
BLSUTRMN EQU   0
BLSUTRMO EQU   0
BLSUVSAR EQU   0
BLSUVSCR EQU   0
BLSUVSEN EQU   0
BLSUVSER EQU   0
BLSUVSGE EQU   0
BLSUVSGU EQU   0
BLSUVSMR EQU   0
BLSUVSPO EQU   0
BLSUVSPU EQU   0
BLSUZZ2C EQU   0
BLSUZZ2D EQU   0
BLSUZZ2R EQU   0
IKJEFF02 EQU   0
IKJEFF18 EQU   0
IKJEFF19 EQU   0
IKJGETL  EQU   0
IKJPARS  EQU   0
IKJPTGT  EQU   0
IKJPUTL  EQU   0
IKJSCAN  EQU   0
IKJSTCK  EQU   0
I001C    EQU   0
I008P    EQU   0
I015F    EQU   0
I015P    EQU   0
I031F    EQU   0
I031P    EQU   0
I256C    EQU   0
PZ2      EQU   0
ESPA     EQU   0
ESPAAS   EQU   ESPA+60
ESPAD    EQU   ESPA+80
ESPADOF  EQU   ESPAD
ESPADLE  EQU   ESPAD+4
ESPADT   EQU   ESPAD+10
ESPADF   EQU   ESPAD+52
ESPAF    EQU   ESPA+161
ESPAFS   EQU   ESPAF
ESPAFC   EQU   ESPAF+1
ESPAR    EQU   ESPA+180
ESPART   EQU   ESPAR+2
CPPL     EQU   ZZ2CPPL
CPPLUPT  EQU   CPPL+4
CPPLPSCB EQU   CPPL+8
CPPLECT  EQU   CPPL+12
PTRPTR   EQU   PTRBIT
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
CPPLCBUF EQU   CPPL
ESPA999  EQU   ESPA+694
ESPART1  EQU   ESPART
ESPARL   EQU   ESPAR
@NM00012 EQU   ESPA+168
ESPAABS  EQU   ESPA+164
@NM00011 EQU   ESPAF+2
@NM00010 EQU   ESPAFC
ESPAFCD  EQU   ESPAFC
ESPAFSS  EQU   ESPAFS
ESPAFSX  EQU   ESPAFS
ESPAFSR  EQU   ESPAFS
ESPAFSP  EQU   ESPAFS
ESPAFSA  EQU   ESPAFS
ESPAFSM  EQU   ESPAFS
ESPAFS2  EQU   ESPAFS
ESPAFSC  EQU   ESPAFS
ESPAKEY  EQU   ESPA+160
@NM00009 EQU   ESPA+144
ESPAMAD  EQU   ESPA+140
ESPAD99  EQU   ESPAD+60
@NM00008 EQU   ESPAD+56
@NM00007 EQU   ESPADF
ESPADFA  EQU   ESPADF
ESPADIL  EQU   ESPAD+48
ESPADIM  EQU   ESPAD+44
ESPADT9  EQU   ESPADT+34
ESPADTE  EQU   ESPADT+33
ESPADTD  EQU   ESPADT+2
@NM00006 EQU   ESPADT+1
ESPADTY  EQU   ESPADT
ESPADT0  EQU   ESPADT
ESPADLB  EQU   ESPAD+9
ESPADOB  EQU   ESPAD+8
ESPAD00  EQU   ESPAD
ESPALAD  EQU   ESPA+76
ESPAAS9  EQU   ESPAAS+16
@NM00005 EQU   ESPAAS+12
ESPAAS2  EQU   ESPAAS+8
ESPAAS1  EQU   ESPAAS+4
@NM00004 EQU   ESPAAS+2
ESPAAST  EQU   ESPAAS
ESPAAS0  EQU   ESPAAS
ESPARV1  EQU   ESPA+59
ESPAELK  EQU   ESPA+59
ESPASYM  EQU   ESPA+28
ESPARDX  EQU   ESPA+24
@NM00003 EQU   ESPA+16
@NM00002 EQU   ESPA+8
@NM00001 EQU   ESPA+2
ESPARID  EQU   ESPA
RVT99999 EQU   RVT+384
RVT0096P EQU   RVT+380
RVT0095P EQU   RVT+376
RVT0094P EQU   RVT+372
RVT0093P EQU   RVT+368
RVT0092P EQU   RVT+364
RVT0091P EQU   RVT+360
RVT0090P EQU   RVT+356
RVT0089P EQU   RVT+352
RVT0088P EQU   RVT+348
RVT0087P EQU   RVT+344
RVT0086P EQU   RVT+340
RVT0085P EQU   RVT+336
RVT0084P EQU   RVT+332
RVT0083P EQU   RVT+328
RVT0082P EQU   RVT+324
RVT0081P EQU   RVT+320
RVT0080P EQU   RVT+316
RVT0079P EQU   RVT+312
RVT0078P EQU   RVT+308
RVT0077P EQU   RVT+304
RVT0076P EQU   RVT+300
RVT0075P EQU   RVT+296
RVT0074P EQU   RVT+292
RVT0073P EQU   RVT+288
RVT0072P EQU   RVT+284
RVTDTUTP EQU   RVT+272
RVTDTMTP EQU   RVT+268
RVT0057P EQU   RVT+224
RVT0056P EQU   RVT+220
RVT0055P EQU   RVT+216
RVT0054P EQU   RVT+212
RVT0053P EQU   RVT+208
RVT0044P EQU   RVT+172
RVT0043P EQU   RVT+168
RVT0040P EQU   RVT+156
RVT0039P EQU   RVT+152
RVT0038P EQU   RVT+148
RVT0037P EQU   RVT+144
RVT0031P EQU   RVT+120
RVT0030P EQU   RVT+116
RVT0029P EQU   RVT+112
RVT0020P EQU   RVT+76
RVT0012P EQU   RVT+44
RVT0010P EQU   RVT+36
RVT0009P EQU   RVT+32
RVT0008P EQU   RVT+28
RVT0006P EQU   RVT+20
ZZ69999  EQU   ZZ6+1792
ZZ6BRB   EQU   ZZ6B+12
ZZ6BRC   EQU   ZZ6B+8
@NM00088 EQU   ZZ6B+6
ZZ6BFL   EQU   ZZ6B+4
ZZ6BDA   EQU   ZZ6B
@NM00087 EQU   ZZ6+540
ZZ6BUFI  EQU   ZZ6+536
ZZ6BUFP  EQU   ZZ6+532
ZZ6FILE  EQU   ZZ6+524
ZZ6BUFB  EQU   ZZ6+520
ZZ6BUFL  EQU   ZZ6+518
ZZ6BUFN  EQU   ZZ6+516
ZZ6ZZ6P  EQU   ZZ6+512
@NM00086 EQU   ZZ6+256
ZZ6D999  EQU   ZZ6D+128
@NM00085 EQU   ZZ6D+116
ZZ6DCAP  EQU   ZZ6D+112
ZZ6DPRP  EQU   ZZ6D+108
ZZ6DDA2  EQU   ZZ6D+104
ZZ6DDA1  EQU   ZZ6D+100
@NM00084 EQU   ZZ6DF
ZZ6DFSU  EQU   ZZ6DF
ZZ6DFST  EQU   ZZ6DF
ZZ6DFAB  EQU   ZZ6DF
ZZ6DFMP  EQU   ZZ6DF
ZZ6DFDU  EQU   ZZ6DF
ZZ6DFBS  EQU   ZZ6DF
ZZ6DQ2   EQU   ZZ6D+88
ZZ6DQ1   EQU   ZZ6D+84
ZZ6DQA9  EQU   ZZ6DQA+16
@NM00083 EQU   ZZ6DQA+12
ZZ6DQA2  EQU   ZZ6DQA+8
ZZ6DQA1  EQU   ZZ6DQA+4
@NM00082 EQU   ZZ6DQA+2
ZZ6DQAT  EQU   ZZ6DQA
ZZ6DQA0  EQU   ZZ6DQA
ZZ6DRDX  EQU   ZZ6D+64
ZZ6DELK  EQU   ZZ6D+64
ZZ6DMEM  EQU   ZZ6D+56
ZZ6DDT1  EQU   ZZ6DDT
ZZ6DDO   EQU   ZZ6DD+2
ZZ6DDL   EQU   ZZ6DD
@NM00081 EQU   ZZ6D+2
ZZ6DRID  EQU   ZZ6D
ZZ6RDCB  EQU   ZZ6
ZZ60000  EQU   ZZ6
BVT99999 EQU   BVT+256
BVT0064P EQU   BVT+252
BVT0063P EQU   BVT+248
BVT0062P EQU   BVT+244
BVT0061P EQU   BVT+240
BVT0060P EQU   BVT+236
BVT0059P EQU   BVT+232
BVT0057P EQU   BVT+224
BVT0056P EQU   BVT+220
BVTSTBLP EQU   BVT+200
BVT0045P EQU   BVT+176
BVT0044P EQU   BVT+172
BVT0033P EQU   BVT+128
BVT0032P EQU   BVT+124
BVT0031P EQU   BVT+120
BVT0030P EQU   BVT+116
BVT0029P EQU   BVT+112
BVT0026P EQU   BVT+100
BVT0025P EQU   BVT+96
BVT0024P EQU   BVT+92
BVT0023P EQU   BVT+88
BVT0016P EQU   BVT+60
BVT0015P EQU   BVT+56
BVT0014P EQU   BVT+52
BVT0003P EQU   BVT+8
BVT0001P EQU   BVT
SA99     EQU   SA+72
SARC     EQU   SAR+56
SARB     EQU   SAR+52
SARA     EQU   SAR+48
SAR9     EQU   SAR+44
SAR8     EQU   SAR+40
SAR7     EQU   SAR+36
SAR6     EQU   SAR+32
SAR5     EQU   SAR+28
SAR4     EQU   SAR+24
SAR3     EQU   SAR+20
SAR2     EQU   SAR+16
SAR0     EQU   SAR+8
SARF     EQU   SAR+4
SARE     EQU   SAR
SAFWD    EQU   SA+8
SABAK    EQU   SA+4
SA1L     EQU   SA1+1
SA1P     EQU   SA1
UPTPREFL EQU   UPT+23
UPTPREFX EQU   UPT+16
@NM00080 EQU   UPT+15
UPTLDEL  EQU   UPT+14
UPTCDEL  EQU   UPT+13
UPTWTP   EQU   UPTSWS
UPTMODE  EQU   UPTSWS
UPTALD   EQU   UPTSWS
UPTPAUS  EQU   UPTSWS
UPTNCOM  EQU   UPTSWS
UPTMID   EQU   UPTSWS
UPTNPRM  EQU   UPTSWS
UPTRCVR  EQU   UPTSWS
UPTUSER  EQU   UPT+2
@NM00079 EQU   UPT
@NM00078 EQU   ECT+52
@NM00077 EQU   ECT+48
@NM00076 EQU   ECT+44
@NM00075 EQU   ECTSWS2+1
@NM00074 EQU   ECTSWS21
ECTTABND EQU   ECTSWS21
ECTDEFCS EQU   ECTSWS21
ECTBKPB  EQU   ECT+36
ECTUSER  EQU   ECT+32
ECTDDNUM EQU   ECT+29
ECTATTN  EQU   ECTSWS
ECTBKGRD EQU   ECTSWS
ECTNNOT  EQU   ECTSWS
ECTNMAL  EQU   ECTSWS
ECTLOGF  EQU   ECTSWS
ECTATRM  EQU   ECTSWS
@NM00073 EQU   ECTSWS
ECTNOPD  EQU   ECTSWS
ECTSCMD  EQU   ECT+20
ECTPCMD  EQU   ECT+12
ECTSMSG  EQU   ECT+9
ECTMSGF  EQU   ECT+8
ECTIOWA  EQU   ECT+4
ECTRTCD  EQU   ECT+1
ECTRCDF  EQU   ECT
PSCBU    EQU   PSCB+64
PSCBRSZ  EQU   PSCB+60
PSCBLINE EQU   PSCB+59
PSCBCHAR EQU   PSCB+58
PSCBUPTL EQU   PSCB+56
PSCBUPT  EQU   PSCB+52
PSCBRLGB EQU   PSCB+48
PSCBDEST EQU   PSCB+40
@NM00072 EQU   PSCB+36
@NM00071 EQU   PSCB+32
@NM00070 EQU   PSCB+28
PSCBLTI2 EQU   PSCB+24
PSCBLTIM EQU   PSCB+20
PSCBATR2 EQU   PSCB+18
@NM00069 EQU   PSCBATR1
@NM00068 EQU   PSCBATR1
@NM00067 EQU   PSCBATR1
PSCBATTN EQU   PSCBATR1
PSCBVMNT EQU   PSCBATR1
PSCBJCL  EQU   PSCBATR1
PSCBACCT EQU   PSCBATR1
PSCBCTRL EQU   PSCBATR1
PSCBGPNM EQU   PSCB+8
PSCBUSRL EQU   PSCB+7
PSCBUSER EQU   PSCB
CMDT1    EQU   CMDT
CMDO     EQU   CMD+2
CMDL     EQU   CMD
ZZ299999 EQU   ZZ2+8192
ZZ2AXOT1 EQU   ZZ2AXOT
ZZ2AXOL  EQU   ZZ2AXO
@NM00066 EQU   ZZ2+7288
@NM00065 EQU   ZZ2AMDX+4
ZZ2AMDXC EQU   ZZ2AMDX
ZZ2HSD   EQU   ZZ2+3056
@NM00064 EQU   ZZ2ES
@NM00063 EQU   ZZ2+2868
ZZ2ITSEC EQU   ZZ2ITSE+1
@NM00062 EQU   ZZ2ITSE
ZZ2ITSEP EQU   ZZ2ITSE
ZZ2ITSEW EQU   ZZ2ITSE
@NM00061 EQU   ZZ2ITR+20
ZZ2ITREC EQU   ZZ2ITRE+1
@NM00060 EQU   ZZ2ITRE
ZZ2ITREP EQU   ZZ2ITRE
ZZ2ITREW EQU   ZZ2ITRE
@NM00059 EQU   ZZ2ITR+9
ZZ2ITRRC EQU   ZZ2ITR+8
ZZ2ITR2P EQU   ZZ2ITR+4
ZZ2ITRPP EQU   ZZ2ITR
@NM00058 EQU   ZZ2+1544
ZZ2PGM   EQU   ZZ2+1536
@NM00057 EQU   ZZ2+1526
ZZ2CW    EQU   ZZ2+1524
@NM00056 EQU   ZZ2+1504
@NM00055 EQU   ZZ2+1352
ZZ2FFSYP EQU   ZZ2+1348
ZZ2SASYP EQU   ZZ2+1344
ZZ2RDSYP EQU   ZZ2+1340
ZZ2RASYP EQU   ZZ2+1336
ZZ2PHSYP EQU   ZZ2+1332
ZZ2ESSYP EQU   ZZ2+1328
ZZ200SYP EQU   ZZ2+1324
ZZ2SCWP  EQU   ZZ2+1320
ZZ2TTLP  EQU   ZZ2+1316
ZZ2LOADP EQU   ZZ2+1312
ZZ2VRESP EQU   ZZ2+1308
ZZ2CPPLE EQU   ZZ2CPPL+12
ZZ2CPPLP EQU   ZZ2CPPL+8
ZZ2CPPLU EQU   ZZ2CPPL+4
ZZ2VRSAP EQU   ZZ2+1288
ZZ2DVTP  EQU   ZZ2+1276
@NM00054 EQU   ZZ2+1272
@NM00053 EQU   ZZ2+1268
ZZ2RPLP  EQU   ZZ2+1260
ZZ2TCBP  EQU   ZZ2+1256
@NM00052 EQU   ZZ2+1252
ZZ2ZZ2P  EQU   ZZ2+1248
@NM00051 EQU   ZZ2+1112
ZZ2FPDRP EQU   ZZ2+1108
ZZ2FDSDP EQU   ZZ2+1104
ZZ2APDRP EQU   ZZ2+1100
ZZ2ADSDP EQU   ZZ2+1096
ZZ2ENQ0P EQU   ZZ2+1092
@NM00050 EQU   ZZ2+1080
ZZ2MSG0P EQU   ZZ2+1076
ZZ2FT25P EQU   ZZ2+1072
ZZ2MSGSP EQU   ZZ2+1060
ZZ2ALOCP EQU   ZZ2+1056
@NM00049 EQU   ZZ2+976
ZZ2TOD   EQU   ZZ2+968
ZZ2STGN  EQU   ZZ2STG+4
ZZ2STGP  EQU   ZZ2STG
@NM00048 EQU   ZZ2+952
ZZ2SCMDE EQU   ZZ2+944
ZZ2SCMDN EQU   ZZ2+936
ZZ2IDENT EQU   ZZ2+928
ZZ2A9999 EQU   ZZ2A+656
@NM00047 EQU   ZZ2A+224
@NM00046 EQU   ZZ2A+220
ZZ2AQD99 EQU   ZZ2AQD+60
@NM00045 EQU   ZZ2AQD+56
@NM00044 EQU   ZZ2AQDF
ZZ2AQDFA EQU   ZZ2AQDF
ZZ2AQDIL EQU   ZZ2AQD+48
ZZ2AQDIM EQU   ZZ2AQD+44
ZZ2AQDT9 EQU   ZZ2AQDT+34
ZZ2AQDTE EQU   ZZ2AQDT+33
ZZ2AQDTD EQU   ZZ2AQDT+2
@NM00043 EQU   ZZ2AQDT+1
ZZ2AQDTY EQU   ZZ2AQDT
ZZ2AQDT0 EQU   ZZ2AQDT
ZZ2AQDLB EQU   ZZ2AQD+9
ZZ2AQDOB EQU   ZZ2AQD+8
ZZ2AQDLE EQU   ZZ2AQD+4
ZZ2AQDOF EQU   ZZ2AQD
ZZ2AQD00 EQU   ZZ2AQD
ZZ2AQAS9 EQU   ZZ2AQAS+16
@NM00042 EQU   ZZ2AQAS+12
ZZ2AQAS2 EQU   ZZ2AQAS+8
ZZ2AQAS1 EQU   ZZ2AQAS+4
@NM00041 EQU   ZZ2AQAS+2
ZZ2AQAST EQU   ZZ2AQAS
ZZ2AQAS0 EQU   ZZ2AQAS
ZZ2ADPTA EQU   ZZ2ADPT
ZZ2ADPL  EQU   ZZ2ADP
ZZ2ADMTA EQU   ZZ2ADMT
ZZ2ADML  EQU   ZZ2ADM
ZZ2ADDTA EQU   ZZ2ADDT
ZZ2ADDL  EQU   ZZ2ADD
@NM00040 EQU   ZZ2A+72
ZZ2APIDB EQU   ZZ2APID+3
ZZ2APIDA EQU   ZZ2APID
@NM00039 EQU   ZZ2A+24
@NM00038 EQU   ZZ2AF+5
ZZ2AFX   EQU   ZZ2AF+5
@NM00037 EQU   ZZ2AF+3
ZZ2AFS   EQU   ZZ2AF+2
ZZ2AFQ   EQU   ZZ2AF+2
ZZ2AF$   EQU   ZZ2AF+2
@NM00036 EQU   ZZ2AF+2
@NM00035 EQU   ZZ2AF+2
@NM00034 EQU   ZZ2AF+1
ZZ2AFV   EQU   ZZ2AF+1
@NM00033 EQU   ZZ2AF+1
ZZ2AFC   EQU   ZZ2AF+1
@NM00032 EQU   ZZ2AF
ZZ2AFFS  EQU   ZZ2AF
ZZ2AFT   EQU   ZZ2AF
ZZ2AFP   EQU   ZZ2AF
@NM00031 EQU   ZZ2A+8
ZZ2ALINE EQU   ZZ2A+4
@NM00030 EQU   ZZ2A+3
ZZ2ASE   EQU   ZZ2A+2
ZZ2ACH   EQU   ZZ2A
@NM00029 EQU   ZZ2+264
@NM00028 EQU   ZZ2+263
ZZ2PRTT0 EQU   ZZ2PRTT
ZZ2PRTO  EQU   ZZ2PRT+2
ZZ2PRTL  EQU   ZZ2PRT
@NM00027 EQU   ZZ2AMD+56
ZZ2AMDXP EQU   ZZ2AMD+52
ZZ2AMDD  EQU   ZZ2AMD+48
ZZ2AMDL  EQU   ZZ2AMD+44
ZZ2AMDU  EQU   ZZ2AMD+28
ZZ2AMDF  EQU   ZZ2AMD+24
ZZ2AMDS  EQU   ZZ2AMD+20
ZZ2AMDC  EQU   ZZ2AMD+16
ZZ2AMDP  EQU   ZZ2AMD+12
ZZ2AMDB  EQU   ZZ2AMD+8
@NM00026 EQU   @NM00025
ZZ2AMD2  EQU   @NM00025
ZZ2AMD1  EQU   @NM00025
ZZ2AMD0  EQU   ZZ2AMD+6
ZZ2AMDA  EQU   ZZ2AMD+4
ZZ2AMDT  EQU   ZZ2AMD
ZZ199999 EQU   ZZ1+3072
@NM00024 EQU   ZZ1+2160
ZZ1TRTAS EQU   ZZ1+1904
ZZ1TRUPC EQU   ZZ1+1648
ZZ1TRCTX EQU   ZZ1+1392
ZZ1NASID EQU   ZZ1N+274
ZZ1NSTRL EQU   ZZ1N+272
ZZ1NOFF  EQU   ZZ1N+268
ZZ1NBDY  EQU   ZZ1N+264
ZZ1NADE  EQU   ZZ1N+260
ZZ1NADB  EQU   ZZ1N+256
ZZ1NSTR  EQU   ZZ1N
@NM00023 EQU   ZZ1+1080
@NM00022 EQU   ZZ1+377
ZZ1USTAE EQU   ZZ1+376
@NM00021 EQU   ZZ1F+1
@NM00020 EQU   ZZ1F
ZZ1FM    EQU   ZZ1F
ZZ1FX    EQU   ZZ1F
ZZ1FU    EQU   ZZ1F
ZZ1EVEC  EQU   ZZ1EVE+1
@NM00019 EQU   ZZ1EVE
ZZ1EVEW  EQU   ZZ1EVE
ZZ1ACMP  EQU   ZZ1ATTN
@NM00018 EQU   ZZ1+144
ZZ1FPP   EQU   ZZ1+140
ZZ1ZZ6P  EQU   ZZ1+136
@NM00017 EQU   ZZ1+84
ZZ1PLINE EQU   ZZ1+80
ZZ1PGSZ  EQU   ZZ1+76
ZZ1PCNT  EQU   ZZ1+72
@NM00016 EQU   ZZ1+68
ZZ1TPAGE EQU   ZZ1+64
ZZ1TLINE EQU   ZZ1+60
@NM00015 EQU   ZZ1+48
ZZ1DSDP  EQU   ZZ1+44
ZZ1PDRP  EQU   ZZ1+40
ZZ1ZZ2P  EQU   ZZ1+36
ZZ1327WP EQU   ZZ1+32
ZZ1ACBP  EQU   ZZ1+28
@NM00014 EQU   ZZ1+24
ZZ1PDCBP EQU   ZZ1+20
ZZ1BLRBL EQU   ZZ1+16
@NM00013 EQU   ZZ1+12
ZZ1PNULL EQU   ZZ1+8
ZZ1NULL  EQU   ZZ1+4
ZZ1IDE   EQU   ZZ1
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RT00147 EQU   EXIT
@RC00165 EQU   @RC00154
@RC00184 EQU   @RC00181
@RT00306 EQU   L102
L104     EQU   @EL00002
@RC00349 EQU   @EL00003
@RF00316 EQU   L104
@ENDDATA EQU   *
         END   BLST08,(C'PLS2038',0701,78059)
